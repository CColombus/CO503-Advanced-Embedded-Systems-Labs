
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000c55c memsz 0x0000c55c flags r-x
    LOAD off    0x0000db98 vaddr 0x0006cb98 paddr 0x0002c57c align 2**12
         filesz 0x00001a58 memsz 0x00001d58 flags rw-
    LOAD off    0x0000f800 vaddr 0x0006c800 paddr 0x0006c800 align 2**12
         filesz 0x00000398 memsz 0x00000398 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c3c4  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  0006c800  0006c800  0000f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0006cb98  0002c57c  0000db98  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  0006e5f0  0002dfd4  0000f5f0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fb98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d60  00000000  00000000  0000fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002295a  00000000  00000000  00010920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f2b  00000000  00000000  0003327a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a0ff  00000000  00000000  0003c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001894  00000000  00000000  000462a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d95  00000000  00000000  00047b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010d42  00000000  00000000  0004a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005b610  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005b620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005f0b7  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005f0ba  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005f0be  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005f0bf  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005f0c0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005f0c4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005f0c8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005f0cc  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005f0d7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005f0e2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0005f0ed  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0005f0f2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00068425  00000000  00000000  0005f112  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0006c800 l    d  .rodata	00000000 .rodata
0006cb98 l    d  .rwdata	00000000 .rwdata
0006e5f0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020848 l     F .text	00000034 __sprint_r
0006c8b6 l     O .rodata	00000010 blanks.3515
0006c8c6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022890 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024300 l     F .text	00000008 __fp_lock
00024308 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0006cb98 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0006c8fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0006ca44 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000288e4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00029624 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00029db8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00029ed4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00029f00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002a000 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002a0f4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002a1e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002a3bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0006e5e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002a630 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002a770 l     F .text	00000038 alt_dev_reg
0006d554 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002aa60 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002ac64 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002b2a0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002b4f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002b984 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002badc l     F .text	00000050 alt_get_errno
0002bb2c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00026dc0 g     F .text	00000074 _mprec_log10
00026eb0 g     F .text	00000084 __any_on
00027b30 g     F .text	00000064 _isatty_r
0006c92c g     O .rodata	00000028 __mprec_tinytens
0002a304 g     F .text	00000078 alt_main
00029d74 g     F .text	00000044 __ashldi3
00020724 g     F .text	00000084 _puts_r
0006e5f0 g     O .bss	00000004 writep
0006e660 g     O .bss	00000100 alt_irq
00027b94 g     F .text	0000006c _lseek_r
0002c57c g       *ABS*	00000000 __flash_rwdata_start
00029184 g     F .text	0000005c __eqdf2
000204b4 g     F .text	0000009c FIFO_1_INIT
0006e8f0 g       *ABS*	00000000 __alt_heap_start
000206e8 g     F .text	0000003c printf
000276d4 g     F .text	0000005c __sseek
000243a4 g     F .text	0000010c __sinit
0002503c g     F .text	0000009c _setlocale_r
0002431c g     F .text	00000078 __sfmoreglue
0002a39c g     F .text	00000020 __malloc_unlock
0006e5f4 g     O .bss	00000004 readp
00025c7c g     F .text	0000018c memmove
00024394 g     F .text	00000010 _cleanup
00025ee4 g     F .text	000000a8 _Balloc
0002923c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00027ac8 g     F .text	00000068 _fstat_r
0006e61c g     O .bss	00000004 errno
0006e624 g     O .bss	00000004 alt_argv
000765b4 g       *ABS*	00000000 _gp
0006d3d4 g     O .rwdata	00000180 alt_fd_list
0002bf30 g     F .text	00000090 alt_find_dev
00025b3c g     F .text	00000140 memcpy
00024310 g     F .text	0000000c _cleanup_r
00029360 g     F .text	000000d4 __floatsidf
0002ba64 g     F .text	00000078 alt_io_redirect
00029304 g     F .text	0000005c __ltdf2
0002c57c g       *ABS*	00000000 __DTOR_END__
000207a8 g     F .text	00000014 puts
00026d1c g     F .text	000000a4 __ratio
0002ae64 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000206bc g     F .text	0000002c _printf_r
00029744 g     F .text	00000008 __udivsi3
0002a050 g     F .text	000000a4 isatty
0006c97c g     O .rodata	000000c8 __mprec_tens
000250d8 g     F .text	0000000c __locale_charset
0006e618 g     O .bss	00000004 __malloc_top_pad
0006e5bc g     O .rwdata	00000004 __mb_cur_max
000250e4 g     F .text	0000000c _localeconv_r
00026314 g     F .text	0000003c __i2b
000249f8 g     F .text	000004e4 __sfvwrite_r
00027594 g     F .text	00000064 _sbrk_r
000205c8 g     F .text	000000b4 consumer
0006e5f8 g     O .bss	00000004 fullp
00027c00 g     F .text	0000006c _read_r
0006cf98 g     O .rwdata	0000000c __lc_ctype
0006e5d8 g     O .rwdata	00000004 alt_max_fd
00029b5c g     F .text	00000104 __unpack_d
00027978 g     F .text	0000013c _fclose_r
000242d0 g     F .text	00000030 fflush
0006e614 g     O .bss	00000004 __malloc_max_sbrked_mem
00028c38 g     F .text	00000054 __adddf3
00026a90 g     F .text	00000148 __b2d
000282bc g     F .text	00000628 __umoddi3
0002a230 g     F .text	000000d4 lseek
0006e5b4 g     O .rwdata	00000004 _global_impure_ptr
00026f34 g     F .text	000005fc _realloc_r
0006e8f0 g       *ABS*	00000000 __bss_end
0002b894 g     F .text	000000f0 alt_iic_isr_register
0002be0c g     F .text	00000104 alt_tick
00027c6c g     F .text	00000650 __udivdi3
0006c954 g     O .rodata	00000028 __mprec_bigtens
000260f8 g     F .text	00000104 __s2b
00029508 g     F .text	0000011c __floatunsidf
00026830 g     F .text	00000058 __mcmp
000245bc g     F .text	00000018 __fp_lock_all
0002b848 g     F .text	0000004c alt_ic_irq_enabled
0002bd74 g     F .text	00000098 alt_alarm_stop
0006e62c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
0006d3ac g     O .rwdata	00000028 alt_dev_null
0002b4dc g     F .text	0000001c alt_dcache_flush_all
000261fc g     F .text	00000068 __hi0bits
00029434 g     F .text	000000d4 __fixdfsi
0006e5f0 g       *ABS*	00000000 __ram_rwdata_end
0006e5d0 g     O .rwdata	00000008 alt_dev_list
0002a680 g     F .text	000000f0 write
0006cb98 g       *ABS*	00000000 __ram_rodata_end
00029f50 g     F .text	000000b0 fstat
00029d30 g     F .text	00000044 __lshrdi3
000265a8 g     F .text	0000012c __pow5mult
0006e60c g     O .bss	00000004 __nlocale_changed
0002974c g     F .text	00000008 __umodsi3
0006e8f0 g       *ABS*	00000000 end
0002a9a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002c57c g       *ABS*	00000000 __CTOR_LIST__
00079000 g       *ABS*	00000000 __alt_stack_pointer
0002b314 g     F .text	00000088 alt_avalon_timer_sc_init
0002988c g     F .text	000000ac __clzsi2
0002b07c g     F .text	00000224 altera_avalon_jtag_uart_write
000245ac g     F .text	00000004 __sfp_lock_acquire
00025a44 g     F .text	000000f8 memchr
0002087c g     F .text	00001e7c ___vfprintf_internal_r
00024728 g     F .text	000002d0 _free_r
0002c3a0 g     F .text	000001a0 __call_exitprocs
00060000 g       *ABS*	00000000 __alt_mem_data_mem_shared
0006e608 g     O .bss	00000004 __mlocale_changed
0006e5c0 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
0006e630 g     O .bss	00000004 _alt_tick_rate
000266d4 g     F .text	0000015c __lshift
0006e634 g     O .bss	00000004 _alt_nticks
0002a40c g     F .text	000000f4 read
0002a7dc g     F .text	00000060 alt_sys_init
0002c270 g     F .text	00000130 __register_exitproc
00026350 g     F .text	00000258 __multiply
0002ad08 g     F .text	00000068 altera_avalon_jtag_uart_close
00029754 g     F .text	00000028 __mulsi3
0006cb98 g       *ABS*	00000000 __ram_rwdata_start
0006c800 g       *ABS*	00000000 __ram_rodata_start
0006e638 g     O .bss	00000028 __malloc_current_mallinfo
00026bd8 g     F .text	00000144 __d2b
0002a83c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002c0d4 g     F .text	000000d4 alt_get_fd
00029c60 g     F .text	000000d0 __fpcmp_parts_d
00027914 g     F .text	00000064 _close_r
0002c1f4 g     F .text	0000007c memcmp
0002a8fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0006e8f0 g       *ABS*	00000000 __alt_stack_base
0002a94c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002271c g     F .text	00000174 __swsetup_r
00028fd0 g     F .text	000001b4 __divdf3
000244b0 g     F .text	000000fc __sfp
00026e34 g     F .text	0000007c __copybits
0006cfa4 g     O .rwdata	00000408 __malloc_av_
000245b8 g     F .text	00000004 __sinit_lock_release
00028cec g     F .text	000002e4 __muldf3
000275f8 g     F .text	00000054 __sread
0002bfc0 g     F .text	00000114 alt_find_file
0002b548 g     F .text	000000a0 alt_dev_llist_insert
0002a37c g     F .text	00000020 __malloc_lock
0002a580 g     F .text	000000b0 sbrk
000240e8 g     F .text	000001e8 _fflush_r
00027848 g     F .text	000000cc _calloc_r
0006e5f0 g       *ABS*	00000000 __bss_start
00025e08 g     F .text	000000dc memset
00020550 g     F .text	00000018 main
0006e628 g     O .bss	00000004 alt_envp
0006e610 g     O .bss	00000004 __malloc_max_total_mem
0002a89c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00027730 g     F .text	00000008 __sclose
00079000 g       *ABS*	00000000 __alt_heap_limit
00027ab4 g     F .text	00000014 fclose
0006e760 g     O .bss	00000190 _atexit0
00022acc g     F .text	0000161c _dtoa_r
000252c0 g     F .text	00000784 _malloc_r
0006e5dc g     O .rwdata	00000004 alt_errno
00024edc g     F .text	000000a8 _fwalk
000201f4 g     F .text	00000160 WRITE_FIFO_1
00029698 g     F .text	00000050 __divsi3
0006ca50 g     O .rodata	00000014 __thenan_df
000245ec g     F .text	0000013c _malloc_trim_r
0002c57c g       *ABS*	00000000 __CTOR_END__
00027738 g     F .text	000000a4 strcmp
0006c800 g       *ABS*	00000000 __flash_rodata_start
0002c57c g       *ABS*	00000000 __DTOR_LIST__
0002067c g     F .text	00000040 delay
000291e0 g     F .text	0000005c __nedf2
0002a7a8 g     F .text	00000034 alt_irq_init
0002a500 g     F .text	00000080 alt_release_fd
0006ca64 g     O .rodata	00000100 __clz_tab
0006e604 g     O .bss	00000004 _PathLocale
00020568 g     F .text	00000060 testreader
0002c1a8 g     F .text	00000014 atexit
000277dc g     F .text	0000006c _write_r
000250f0 g     F .text	0000001c setlocale
0006e5b8 g     O .rwdata	00000004 _impure_ptr
0006e620 g     O .bss	00000004 alt_argc
0002b644 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00026a30 g     F .text	00000060 __ulp
00027530 g     F .text	00000038 __isinfd
00020000 g       *ABS*	00000000 __alt_mem_ins_mem_c1
000245d4 g     F .text	00000018 __fp_unlock_all
0006e5c8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002510c g     F .text	0000000c localeconv
0002b6bc g     F .text	00000050 alt_ic_isr_register
0006e5f0 g       *ABS*	00000000 _edata
0006e8f0 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002ad70 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002b7a8 g     F .text	000000a0 alt_ic_irq_disable
0002764c g     F .text	00000088 __swrite
0006e5c4 g     O .rwdata	00000004 __malloc_trim_threshold
0002bf10 g     F .text	00000020 altera_nios2_qsys_irq_init
0002c1bc g     F .text	00000038 exit
00024f84 g     F .text	000000b8 _fwalk_reent
00026888 g     F .text	000001a8 __mdiff
000296e8 g     F .text	0000005c __modsi3
00079000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000245b0 g     F .text	00000004 __sfp_lock_release
0002c540 g     F .text	0000003c _exit
00027568 g     F .text	0000002c __isnand
0002b39c g     F .text	00000140 alt_alarm_start
0002977c g     F .text	00000110 __muldi3
00025118 g     F .text	000001a8 __smakebuf_r
000207bc g     F .text	0000008c strlen
0002bc1c g     F .text	00000158 open
000292a0 g     F .text	00000064 __gedf2
00020354 g     F .text	00000160 READ_FIFO_1
0002b6a0 g     F .text	0000001c alt_icache_flush_all
0006e5e4 g     O .rwdata	00000004 alt_priority_mask
0006e5fc g     O .bss	00000004 emptyp
0002b70c g     F .text	0000009c alt_ic_irq_enable
000226f8 g     F .text	00000024 __vfprintf_internal
00028c8c g     F .text	00000060 __subdf3
00026264 g     F .text	000000b0 __lo0bits
0006e5e8 g     O .rwdata	00000008 alt_alarm_list
0002b5e8 g     F .text	0000005c _do_ctors
0006e600 g     O .bss	00000004 countp
00029e08 g     F .text	000000cc close
0002a160 g     F .text	00000080 alt_load
00029938 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000245b4 g     F .text	00000004 __sinit_lock_acquire
00025fb4 g     F .text	00000144 __multadd
00025f8c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c001f4 	movhi	r3,7
   20130:	18f99804 	addi	r3,r3,-6560
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010001f4 	movhi	r4,7
   20148:	21399804 	addi	r4,r4,-6560
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   201c0:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
   201c4:	d6996d14 	ori	gp,gp,26036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
   201cc:	10b97c14 	ori	r2,r2,58864

    movhi r3, %hi(__bss_end)
   201d0:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   201d4:	18fa3c14 	ori	r3,r3,59632

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	002a1600 	call	2a160 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	002a3040 	call	2a304 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   201f4:	defffd04 	addi	sp,sp,-12
   201f8:	df000215 	stw	fp,8(sp)
   201fc:	df000204 	addi	fp,sp,8
   20200:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1)
   20204:	0001883a 	nop
   20208:	d0a01117 	ldw	r2,-32700(gp)
   2020c:	1007883a 	mov	r3,r2
   20210:	00800234 	movhi	r2,8
   20214:	10a40004 	addi	r2,r2,-28672
   20218:	1885883a 	add	r2,r3,r2
   2021c:	10800037 	ldwio	r2,0(r2)
   20220:	10800060 	cmpeqi	r2,r2,1
   20224:	103ff81e 	bne	r2,zero,20208 <WRITE_FIFO_1+0x14>
		{}

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,(int)*buffer);
   20228:	d0a00f17 	ldw	r2,-32708(gp)
   2022c:	1007883a 	mov	r3,r2
   20230:	00800234 	movhi	r2,8
   20234:	10a40004 	addi	r2,r2,-28672
   20238:	1885883a 	add	r2,r3,r2
   2023c:	e0ffff17 	ldw	r3,-4(fp)
   20240:	18c00017 	ldw	r3,0(r3)
   20244:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
   20248:	d0a00f17 	ldw	r2,-32708(gp)
   2024c:	10800804 	addi	r2,r2,32
   20250:	d0a00f15 	stw	r2,-32708(gp)
//	if(writep == STARTP + (CAPACITY * UNIT_SIZE)){
//		writep=STARTP;
//	}

	// Update "count" in shared mem
	int count = IORD_32DIRECT(MEM_BASE,countp);
   20254:	d0a01317 	ldw	r2,-32692(gp)
   20258:	1007883a 	mov	r3,r2
   2025c:	00800234 	movhi	r2,8
   20260:	10a40004 	addi	r2,r2,-28672
   20264:	1885883a 	add	r2,r3,r2
   20268:	10800037 	ldwio	r2,0(r2)
   2026c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE, countp, count+1);
   20270:	d0a01317 	ldw	r2,-32692(gp)
   20274:	1007883a 	mov	r3,r2
   20278:	00800234 	movhi	r2,8
   2027c:	10a40004 	addi	r2,r2,-28672
   20280:	1885883a 	add	r2,r3,r2
   20284:	e0fffe17 	ldw	r3,-8(fp)
   20288:	18c00044 	addi	r3,r3,1
   2028c:	10c00035 	stwio	r3,0(r2)
//	printf("Current capacity -> %d out of %d\n",IORD_32DIRECT(MEM_BASE,countp),CAPACITY);

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   20290:	d0a01317 	ldw	r2,-32692(gp)
   20294:	1007883a 	mov	r3,r2
   20298:	00800234 	movhi	r2,8
   2029c:	10a40004 	addi	r2,r2,-28672
   202a0:	1885883a 	add	r2,r3,r2
   202a4:	10800037 	ldwio	r2,0(r2)
   202a8:	10800818 	cmpnei	r2,r2,32
   202ac:	1000081e 	bne	r2,zero,202d0 <WRITE_FIFO_1+0xdc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   202b0:	d0a01117 	ldw	r2,-32700(gp)
   202b4:	1007883a 	mov	r3,r2
   202b8:	00800234 	movhi	r2,8
   202bc:	10a40004 	addi	r2,r2,-28672
   202c0:	1885883a 	add	r2,r3,r2
   202c4:	00c00044 	movi	r3,1
   202c8:	10c00035 	stwio	r3,0(r2)
   202cc:	00000706 	br	202ec <WRITE_FIFO_1+0xf8>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   202d0:	d0a01117 	ldw	r2,-32700(gp)
   202d4:	1007883a 	mov	r3,r2
   202d8:	00800234 	movhi	r2,8
   202dc:	10a40004 	addi	r2,r2,-28672
   202e0:	1885883a 	add	r2,r3,r2
   202e4:	0007883a 	mov	r3,zero
   202e8:	10c00035 	stwio	r3,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   202ec:	d0a01317 	ldw	r2,-32692(gp)
   202f0:	1007883a 	mov	r3,r2
   202f4:	00800234 	movhi	r2,8
   202f8:	10a40004 	addi	r2,r2,-28672
   202fc:	1885883a 	add	r2,r3,r2
   20300:	10800037 	ldwio	r2,0(r2)
   20304:	1000081e 	bne	r2,zero,20328 <WRITE_FIFO_1+0x134>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   20308:	d0a01217 	ldw	r2,-32696(gp)
   2030c:	1007883a 	mov	r3,r2
   20310:	00800234 	movhi	r2,8
   20314:	10a40004 	addi	r2,r2,-28672
   20318:	1885883a 	add	r2,r3,r2
   2031c:	00c00044 	movi	r3,1
   20320:	10c00035 	stwio	r3,0(r2)
   20324:	00000706 	br	20344 <WRITE_FIFO_1+0x150>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   20328:	d0a01217 	ldw	r2,-32696(gp)
   2032c:	1007883a 	mov	r3,r2
   20330:	00800234 	movhi	r2,8
   20334:	10a40004 	addi	r2,r2,-28672
   20338:	1885883a 	add	r2,r3,r2
   2033c:	0007883a 	mov	r3,zero
   20340:	10c00035 	stwio	r3,0(r2)
	}
}
   20344:	e037883a 	mov	sp,fp
   20348:	df000017 	ldw	fp,0(sp)
   2034c:	dec00104 	addi	sp,sp,4
   20350:	f800283a 	ret

00020354 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   20354:	defffd04 	addi	sp,sp,-12
   20358:	df000215 	stw	fp,8(sp)
   2035c:	df000204 	addi	fp,sp,8
   20360:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1)
   20364:	0001883a 	nop
   20368:	d0a01217 	ldw	r2,-32696(gp)
   2036c:	1007883a 	mov	r3,r2
   20370:	00800234 	movhi	r2,8
   20374:	10a40004 	addi	r2,r2,-28672
   20378:	1885883a 	add	r2,r3,r2
   2037c:	10800037 	ldwio	r2,0(r2)
   20380:	10800060 	cmpeqi	r2,r2,1
   20384:	103ff81e 	bne	r2,zero,20368 <READ_FIFO_1+0x14>
		{}

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
   20388:	d0a01017 	ldw	r2,-32704(gp)
   2038c:	1007883a 	mov	r3,r2
   20390:	00800234 	movhi	r2,8
   20394:	10a40004 	addi	r2,r2,-28672
   20398:	1885883a 	add	r2,r3,r2
   2039c:	10c00037 	ldwio	r3,0(r2)
   203a0:	e0bfff17 	ldw	r2,-4(fp)
   203a4:	10c00015 	stw	r3,0(r2)

	// Update the read pointer
	readp += UNIT_SIZE;
   203a8:	d0a01017 	ldw	r2,-32704(gp)
   203ac:	10800804 	addi	r2,r2,32
   203b0:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	int count = IORD_32DIRECT(MEM_BASE,countp);
   203b4:	d0a01317 	ldw	r2,-32692(gp)
   203b8:	1007883a 	mov	r3,r2
   203bc:	00800234 	movhi	r2,8
   203c0:	10a40004 	addi	r2,r2,-28672
   203c4:	1885883a 	add	r2,r3,r2
   203c8:	10800037 	ldwio	r2,0(r2)
   203cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE, countp, count-1);
   203d0:	d0a01317 	ldw	r2,-32692(gp)
   203d4:	1007883a 	mov	r3,r2
   203d8:	00800234 	movhi	r2,8
   203dc:	10a40004 	addi	r2,r2,-28672
   203e0:	1885883a 	add	r2,r3,r2
   203e4:	e0fffe17 	ldw	r3,-8(fp)
   203e8:	18ffffc4 	addi	r3,r3,-1
   203ec:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   203f0:	d0a01317 	ldw	r2,-32692(gp)
   203f4:	1007883a 	mov	r3,r2
   203f8:	00800234 	movhi	r2,8
   203fc:	10a40004 	addi	r2,r2,-28672
   20400:	1885883a 	add	r2,r3,r2
   20404:	10800037 	ldwio	r2,0(r2)
   20408:	10800818 	cmpnei	r2,r2,32
   2040c:	1000081e 	bne	r2,zero,20430 <READ_FIFO_1+0xdc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   20410:	d0a01117 	ldw	r2,-32700(gp)
   20414:	1007883a 	mov	r3,r2
   20418:	00800234 	movhi	r2,8
   2041c:	10a40004 	addi	r2,r2,-28672
   20420:	1885883a 	add	r2,r3,r2
   20424:	00c00044 	movi	r3,1
   20428:	10c00035 	stwio	r3,0(r2)
   2042c:	00000706 	br	2044c <READ_FIFO_1+0xf8>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   20430:	d0a01117 	ldw	r2,-32700(gp)
   20434:	1007883a 	mov	r3,r2
   20438:	00800234 	movhi	r2,8
   2043c:	10a40004 	addi	r2,r2,-28672
   20440:	1885883a 	add	r2,r3,r2
   20444:	0007883a 	mov	r3,zero
   20448:	10c00035 	stwio	r3,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   2044c:	d0a01317 	ldw	r2,-32692(gp)
   20450:	1007883a 	mov	r3,r2
   20454:	00800234 	movhi	r2,8
   20458:	10a40004 	addi	r2,r2,-28672
   2045c:	1885883a 	add	r2,r3,r2
   20460:	10800037 	ldwio	r2,0(r2)
   20464:	1000081e 	bne	r2,zero,20488 <READ_FIFO_1+0x134>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   20468:	d0a01217 	ldw	r2,-32696(gp)
   2046c:	1007883a 	mov	r3,r2
   20470:	00800234 	movhi	r2,8
   20474:	10a40004 	addi	r2,r2,-28672
   20478:	1885883a 	add	r2,r3,r2
   2047c:	00c00044 	movi	r3,1
   20480:	10c00035 	stwio	r3,0(r2)
   20484:	00000706 	br	204a4 <READ_FIFO_1+0x150>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   20488:	d0a01217 	ldw	r2,-32696(gp)
   2048c:	1007883a 	mov	r3,r2
   20490:	00800234 	movhi	r2,8
   20494:	10a40004 	addi	r2,r2,-28672
   20498:	1885883a 	add	r2,r3,r2
   2049c:	0007883a 	mov	r3,zero
   204a0:	10c00035 	stwio	r3,0(r2)
	}
}
   204a4:	e037883a 	mov	sp,fp
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00104 	addi	sp,sp,4
   204b0:	f800283a 	ret

000204b4 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   204b4:	deffff04 	addi	sp,sp,-4
   204b8:	df000015 	stw	fp,0(sp)
   204bc:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   204c0:	00801804 	movi	r2,96
   204c4:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   204c8:	00801804 	movi	r2,96
   204cc:	d0a01015 	stw	r2,-32704(gp)
	fullp   = 0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   204d0:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + UNIT_SIZE;
   204d4:	d0a01117 	ldw	r2,-32700(gp)
   204d8:	10800804 	addi	r2,r2,32
   204dc:	d0a01215 	stw	r2,-32696(gp)
	countp  = emptyp + UNIT_SIZE;
   204e0:	d0a01217 	ldw	r2,-32696(gp)
   204e4:	10800804 	addi	r2,r2,32
   204e8:	d0a01315 	stw	r2,-32692(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0);
   204ec:	d0a01117 	ldw	r2,-32700(gp)
   204f0:	1007883a 	mov	r3,r2
   204f4:	00800234 	movhi	r2,8
   204f8:	10a40004 	addi	r2,r2,-28672
   204fc:	1885883a 	add	r2,r3,r2
   20500:	0007883a 	mov	r3,zero
   20504:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 1); // The fifo is empty at the start
   20508:	d0a01217 	ldw	r2,-32696(gp)
   2050c:	1007883a 	mov	r3,r2
   20510:	00800234 	movhi	r2,8
   20514:	10a40004 	addi	r2,r2,-28672
   20518:	1885883a 	add	r2,r3,r2
   2051c:	00c00044 	movi	r3,1
   20520:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, countp, 0); // The fifo is empty at the start
   20524:	d0a01317 	ldw	r2,-32692(gp)
   20528:	1007883a 	mov	r3,r2
   2052c:	00800234 	movhi	r2,8
   20530:	10a40004 	addi	r2,r2,-28672
   20534:	1885883a 	add	r2,r3,r2
   20538:	0007883a 	mov	r3,zero
   2053c:	10c00035 	stwio	r3,0(r2)
}
   20540:	e037883a 	mov	sp,fp
   20544:	df000017 	ldw	fp,0(sp)
   20548:	dec00104 	addi	sp,sp,4
   2054c:	f800283a 	ret

00020550 <main>:
int consumer();

void testreader(int offset,int *pvar);

int main()
{
   20550:	defffe04 	addi	sp,sp,-8
   20554:	dfc00115 	stw	ra,4(sp)
   20558:	df000015 	stw	fp,0(sp)
   2055c:	d839883a 	mov	fp,sp
	consumer();
   20560:	00205c80 	call	205c8 <consumer>

	while(1) { }
   20564:	003fff06 	br	20564 <main+0x14>

00020568 <testreader>:

	return 0;
}

void testreader(int offset,int *pvar){
   20568:	defffc04 	addi	sp,sp,-16
   2056c:	dfc00315 	stw	ra,12(sp)
   20570:	df000215 	stw	fp,8(sp)
   20574:	df000204 	addi	fp,sp,8
   20578:	e13ffe15 	stw	r4,-8(fp)
   2057c:	e17fff15 	stw	r5,-4(fp)
	*pvar = IORD_32DIRECT(0x00079000,offset);
   20580:	e0fffe17 	ldw	r3,-8(fp)
   20584:	00800234 	movhi	r2,8
   20588:	10a40004 	addi	r2,r2,-28672
   2058c:	1885883a 	add	r2,r3,r2
   20590:	10c00037 	ldwio	r3,0(r2)
   20594:	e0bfff17 	ldw	r2,-4(fp)
   20598:	10c00015 	stw	r3,0(r2)
	printf("--%d--\n",(int)*pvar);
   2059c:	e0bfff17 	ldw	r2,-4(fp)
   205a0:	10800017 	ldw	r2,0(r2)
   205a4:	010001f4 	movhi	r4,7
   205a8:	21320004 	addi	r4,r4,-14336
   205ac:	100b883a 	mov	r5,r2
   205b0:	00206e80 	call	206e8 <printf>
}
   205b4:	e037883a 	mov	sp,fp
   205b8:	dfc00117 	ldw	ra,4(sp)
   205bc:	df000017 	ldw	fp,0(sp)
   205c0:	dec00204 	addi	sp,sp,8
   205c4:	f800283a 	ret

000205c8 <consumer>:


int consumer()
{
   205c8:	defffc04 	addi	sp,sp,-16
   205cc:	dfc00315 	stw	ra,12(sp)
   205d0:	df000215 	stw	fp,8(sp)
   205d4:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   205d8:	010001f4 	movhi	r4,7
   205dc:	21320204 	addi	r4,r4,-14328
   205e0:	00207a80 	call	207a8 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   205e4:	00204b40 	call	204b4 <FIFO_1_INIT>

	int j = 0;
   205e8:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   205ec:	00800144 	movi	r2,5
   205f0:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   205f4:	00001506 	br	2064c <consumer+0x84>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   205f8:	e0bfff04 	addi	r2,fp,-4
   205fc:	1009883a 	mov	r4,r2
   20600:	00203540 	call	20354 <READ_FIFO_1>
		if(j==k)
   20604:	e0ffff17 	ldw	r3,-4(fp)
   20608:	e0bffe17 	ldw	r2,-8(fp)
   2060c:	1880061e 	bne	r3,r2,20628 <consumer+0x60>
			printf("Consumer succefully received [%i]\n",j);
   20610:	e0bfff17 	ldw	r2,-4(fp)
   20614:	010001f4 	movhi	r4,7
   20618:	21320704 	addi	r4,r4,-14308
   2061c:	100b883a 	mov	r5,r2
   20620:	00206e80 	call	206e8 <printf>
   20624:	00000606 	br	20640 <consumer+0x78>
		else
			printf("Expected [%d] but got [%d]\n",k,j);
   20628:	e0bfff17 	ldw	r2,-4(fp)
   2062c:	010001f4 	movhi	r4,7
   20630:	21321004 	addi	r4,r4,-14272
   20634:	e17ffe17 	ldw	r5,-8(fp)
   20638:	100d883a 	mov	r6,r2
   2063c:	00206e80 	call	206e8 <printf>
		k+=11;
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	108002c4 	addi	r2,r2,11
   20648:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   2064c:	e0bffe17 	ldw	r2,-8(fp)
   20650:	10807d10 	cmplti	r2,r2,500
   20654:	103fe81e 	bne	r2,zero,205f8 <consumer+0x30>
		else
			printf("Expected [%d] but got [%d]\n",k,j);
		k+=11;
	}

	printf("Consumer finished..\n");
   20658:	010001f4 	movhi	r4,7
   2065c:	21321704 	addi	r4,r4,-14244
   20660:	00207a80 	call	207a8 <puts>
	return 0;
   20664:	0005883a 	mov	r2,zero
}
   20668:	e037883a 	mov	sp,fp
   2066c:	dfc00117 	ldw	ra,4(sp)
   20670:	df000017 	ldw	fp,0(sp)
   20674:	dec00204 	addi	sp,sp,8
   20678:	f800283a 	ret

0002067c <delay>:


void delay(int n)
{
   2067c:	defffd04 	addi	sp,sp,-12
   20680:	df000215 	stw	fp,8(sp)
   20684:	df000204 	addi	fp,sp,8
   20688:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   2068c:	e0bfff17 	ldw	r2,-4(fp)
   20690:	e0bffe15 	stw	r2,-8(fp)
   20694:	00000306 	br	206a4 <delay+0x28>
   20698:	e0bffe17 	ldw	r2,-8(fp)
   2069c:	10bfffc4 	addi	r2,r2,-1
   206a0:	e0bffe15 	stw	r2,-8(fp)
   206a4:	e0bffe17 	ldw	r2,-8(fp)
   206a8:	00bffb16 	blt	zero,r2,20698 <delay+0x1c>
	{
		continue;
	}
}
   206ac:	e037883a 	mov	sp,fp
   206b0:	df000017 	ldw	fp,0(sp)
   206b4:	dec00104 	addi	sp,sp,4
   206b8:	f800283a 	ret

000206bc <_printf_r>:
   206bc:	defffd04 	addi	sp,sp,-12
   206c0:	dfc00015 	stw	ra,0(sp)
   206c4:	d9800115 	stw	r6,4(sp)
   206c8:	d9c00215 	stw	r7,8(sp)
   206cc:	280d883a 	mov	r6,r5
   206d0:	21400217 	ldw	r5,8(r4)
   206d4:	d9c00104 	addi	r7,sp,4
   206d8:	002087c0 	call	2087c <___vfprintf_internal_r>
   206dc:	dfc00017 	ldw	ra,0(sp)
   206e0:	dec00304 	addi	sp,sp,12
   206e4:	f800283a 	ret

000206e8 <printf>:
   206e8:	defffc04 	addi	sp,sp,-16
   206ec:	dfc00015 	stw	ra,0(sp)
   206f0:	d9400115 	stw	r5,4(sp)
   206f4:	d9800215 	stw	r6,8(sp)
   206f8:	d9c00315 	stw	r7,12(sp)
   206fc:	008001f4 	movhi	r2,7
   20700:	10b96e04 	addi	r2,r2,-6728
   20704:	10800017 	ldw	r2,0(r2)
   20708:	200b883a 	mov	r5,r4
   2070c:	d9800104 	addi	r6,sp,4
   20710:	11000217 	ldw	r4,8(r2)
   20714:	00226f80 	call	226f8 <__vfprintf_internal>
   20718:	dfc00017 	ldw	ra,0(sp)
   2071c:	dec00404 	addi	sp,sp,16
   20720:	f800283a 	ret

00020724 <_puts_r>:
   20724:	defff604 	addi	sp,sp,-40
   20728:	dc400815 	stw	r17,32(sp)
   2072c:	2023883a 	mov	r17,r4
   20730:	2809883a 	mov	r4,r5
   20734:	dc000715 	stw	r16,28(sp)
   20738:	dfc00915 	stw	ra,36(sp)
   2073c:	2821883a 	mov	r16,r5
   20740:	00207bc0 	call	207bc <strlen>
   20744:	10c00044 	addi	r3,r2,1
   20748:	d8800115 	stw	r2,4(sp)
   2074c:	89400217 	ldw	r5,8(r17)
   20750:	008001f4 	movhi	r2,7
   20754:	10b21c04 	addi	r2,r2,-14224
   20758:	d8800215 	stw	r2,8(sp)
   2075c:	00800044 	movi	r2,1
   20760:	d8800315 	stw	r2,12(sp)
   20764:	8809883a 	mov	r4,r17
   20768:	00800084 	movi	r2,2
   2076c:	d9800404 	addi	r6,sp,16
   20770:	dc000015 	stw	r16,0(sp)
   20774:	d8c00615 	stw	r3,24(sp)
   20778:	dec00415 	stw	sp,16(sp)
   2077c:	d8800515 	stw	r2,20(sp)
   20780:	00249f80 	call	249f8 <__sfvwrite_r>
   20784:	1000061e 	bne	r2,zero,207a0 <_puts_r+0x7c>
   20788:	00800284 	movi	r2,10
   2078c:	dfc00917 	ldw	ra,36(sp)
   20790:	dc400817 	ldw	r17,32(sp)
   20794:	dc000717 	ldw	r16,28(sp)
   20798:	dec00a04 	addi	sp,sp,40
   2079c:	f800283a 	ret
   207a0:	00bfffc4 	movi	r2,-1
   207a4:	003ff906 	br	2078c <_puts_r+0x68>

000207a8 <puts>:
   207a8:	008001f4 	movhi	r2,7
   207ac:	10b96e04 	addi	r2,r2,-6728
   207b0:	200b883a 	mov	r5,r4
   207b4:	11000017 	ldw	r4,0(r2)
   207b8:	00207241 	jmpi	20724 <_puts_r>

000207bc <strlen>:
   207bc:	208000cc 	andi	r2,r4,3
   207c0:	10001f1e 	bne	r2,zero,20840 <strlen+0x84>
   207c4:	20800017 	ldw	r2,0(r4)
   207c8:	01ffbff4 	movhi	r7,65279
   207cc:	39ffbfc4 	addi	r7,r7,-257
   207d0:	01a02074 	movhi	r6,32897
   207d4:	31a02004 	addi	r6,r6,-32640
   207d8:	11c7883a 	add	r3,r2,r7
   207dc:	0084303a 	nor	r2,zero,r2
   207e0:	1886703a 	and	r3,r3,r2
   207e4:	1986703a 	and	r3,r3,r6
   207e8:	2005883a 	mov	r2,r4
   207ec:	1800101e 	bne	r3,zero,20830 <strlen+0x74>
   207f0:	10800104 	addi	r2,r2,4
   207f4:	10c00017 	ldw	r3,0(r2)
   207f8:	19cb883a 	add	r5,r3,r7
   207fc:	00c6303a 	nor	r3,zero,r3
   20800:	28c6703a 	and	r3,r5,r3
   20804:	1986703a 	and	r3,r3,r6
   20808:	1800091e 	bne	r3,zero,20830 <strlen+0x74>
   2080c:	10800104 	addi	r2,r2,4
   20810:	10c00017 	ldw	r3,0(r2)
   20814:	19cb883a 	add	r5,r3,r7
   20818:	00c6303a 	nor	r3,zero,r3
   2081c:	28c6703a 	and	r3,r5,r3
   20820:	1986703a 	and	r3,r3,r6
   20824:	183ff226 	beq	r3,zero,207f0 <strlen+0x34>
   20828:	00000106 	br	20830 <strlen+0x74>
   2082c:	10800044 	addi	r2,r2,1
   20830:	10c00007 	ldb	r3,0(r2)
   20834:	183ffd1e 	bne	r3,zero,2082c <strlen+0x70>
   20838:	1105c83a 	sub	r2,r2,r4
   2083c:	f800283a 	ret
   20840:	2005883a 	mov	r2,r4
   20844:	003ffa06 	br	20830 <strlen+0x74>

00020848 <__sprint_r>:
   20848:	30800217 	ldw	r2,8(r6)
   2084c:	defffe04 	addi	sp,sp,-8
   20850:	dc000015 	stw	r16,0(sp)
   20854:	dfc00115 	stw	ra,4(sp)
   20858:	3021883a 	mov	r16,r6
   2085c:	10000226 	beq	r2,zero,20868 <__sprint_r+0x20>
   20860:	00249f80 	call	249f8 <__sfvwrite_r>
   20864:	80000215 	stw	zero,8(r16)
   20868:	80000115 	stw	zero,4(r16)
   2086c:	dfc00117 	ldw	ra,4(sp)
   20870:	dc000017 	ldw	r16,0(sp)
   20874:	dec00204 	addi	sp,sp,8
   20878:	f800283a 	ret

0002087c <___vfprintf_internal_r>:
   2087c:	defeb904 	addi	sp,sp,-1308
   20880:	dc013d15 	stw	r16,1268(sp)
   20884:	d9013015 	stw	r4,1216(sp)
   20888:	dfc14615 	stw	ra,1304(sp)
   2088c:	df014515 	stw	fp,1300(sp)
   20890:	ddc14415 	stw	r23,1296(sp)
   20894:	dd814315 	stw	r22,1292(sp)
   20898:	dd414215 	stw	r21,1288(sp)
   2089c:	dd014115 	stw	r20,1284(sp)
   208a0:	dcc14015 	stw	r19,1280(sp)
   208a4:	dc813f15 	stw	r18,1276(sp)
   208a8:	dc413e15 	stw	r17,1272(sp)
   208ac:	d9412915 	stw	r5,1188(sp)
   208b0:	3021883a 	mov	r16,r6
   208b4:	d9c12d15 	stw	r7,1204(sp)
   208b8:	00250e40 	call	250e4 <_localeconv_r>
   208bc:	10800017 	ldw	r2,0(r2)
   208c0:	d9013017 	ldw	r4,1216(sp)
   208c4:	d8013315 	stw	zero,1228(sp)
   208c8:	d8813715 	stw	r2,1244(sp)
   208cc:	d8013415 	stw	zero,1232(sp)
   208d0:	20000226 	beq	r4,zero,208dc <___vfprintf_internal_r+0x60>
   208d4:	20800e17 	ldw	r2,56(r4)
   208d8:	10014b26 	beq	r2,zero,20e08 <___vfprintf_internal_r+0x58c>
   208dc:	d8c12917 	ldw	r3,1188(sp)
   208e0:	1880030b 	ldhu	r2,12(r3)
   208e4:	10c0020c 	andi	r3,r2,8
   208e8:	18ffffcc 	andi	r3,r3,65535
   208ec:	18e0001c 	xori	r3,r3,32768
   208f0:	18e00004 	addi	r3,r3,-32768
   208f4:	1800ed26 	beq	r3,zero,20cac <___vfprintf_internal_r+0x430>
   208f8:	d9012917 	ldw	r4,1188(sp)
   208fc:	20c00417 	ldw	r3,16(r4)
   20900:	1800ea26 	beq	r3,zero,20cac <___vfprintf_internal_r+0x430>
   20904:	1100068c 	andi	r4,r2,26
   20908:	00c00284 	movi	r3,10
   2090c:	20c0f026 	beq	r4,r3,20cd0 <___vfprintf_internal_r+0x454>
   20910:	d9010dc4 	addi	r4,sp,1079
   20914:	d8810e04 	addi	r2,sp,1080
   20918:	dc413017 	ldw	r17,1216(sp)
   2091c:	d8c00404 	addi	r3,sp,16
   20920:	d9012615 	stw	r4,1176(sp)
   20924:	1109c83a 	sub	r4,r2,r4
   20928:	d8812715 	stw	r2,1180(sp)
   2092c:	d8c11b15 	stw	r3,1132(sp)
   20930:	d8011d15 	stw	zero,1140(sp)
   20934:	d8011c15 	stw	zero,1136(sp)
   20938:	802b883a 	mov	r21,r16
   2093c:	d8013215 	stw	zero,1224(sp)
   20940:	d8013615 	stw	zero,1240(sp)
   20944:	d8013515 	stw	zero,1236(sp)
   20948:	d8012c15 	stw	zero,1200(sp)
   2094c:	1813883a 	mov	r9,r3
   20950:	d9013915 	stw	r4,1252(sp)
   20954:	a8800007 	ldb	r2,0(r21)
   20958:	1002f326 	beq	r2,zero,21528 <___vfprintf_internal_r+0xcac>
   2095c:	00c00944 	movi	r3,37
   20960:	a825883a 	mov	r18,r21
   20964:	10c0021e 	bne	r2,r3,20970 <___vfprintf_internal_r+0xf4>
   20968:	00001406 	br	209bc <___vfprintf_internal_r+0x140>
   2096c:	10c00326 	beq	r2,r3,2097c <___vfprintf_internal_r+0x100>
   20970:	94800044 	addi	r18,r18,1
   20974:	90800007 	ldb	r2,0(r18)
   20978:	103ffc1e 	bne	r2,zero,2096c <___vfprintf_internal_r+0xf0>
   2097c:	9561c83a 	sub	r16,r18,r21
   20980:	80000e26 	beq	r16,zero,209bc <___vfprintf_internal_r+0x140>
   20984:	da011d17 	ldw	r8,1140(sp)
   20988:	d8c11c17 	ldw	r3,1136(sp)
   2098c:	4d400015 	stw	r21,0(r9)
   20990:	4c000115 	stw	r16,4(r9)
   20994:	4411883a 	add	r8,r8,r16
   20998:	18c00044 	addi	r3,r3,1
   2099c:	da011d15 	stw	r8,1140(sp)
   209a0:	d8c11c15 	stw	r3,1136(sp)
   209a4:	008001c4 	movi	r2,7
   209a8:	10c11016 	blt	r2,r3,20dec <___vfprintf_internal_r+0x570>
   209ac:	4a400204 	addi	r9,r9,8
   209b0:	d8812c17 	ldw	r2,1200(sp)
   209b4:	1405883a 	add	r2,r2,r16
   209b8:	d8812c15 	stw	r2,1200(sp)
   209bc:	90800007 	ldb	r2,0(r18)
   209c0:	1000ee26 	beq	r2,zero,20d7c <___vfprintf_internal_r+0x500>
   209c4:	95400044 	addi	r21,r18,1
   209c8:	94800047 	ldb	r18,1(r18)
   209cc:	073fffc4 	movi	fp,-1
   209d0:	e007883a 	mov	r3,fp
   209d4:	d8012585 	stb	zero,1174(sp)
   209d8:	d8012e15 	stw	zero,1208(sp)
   209dc:	0021883a 	mov	r16,zero
   209e0:	05001604 	movi	r20,88
   209e4:	04c00244 	movi	r19,9
   209e8:	4839883a 	mov	fp,r9
   209ec:	ad400044 	addi	r21,r21,1
   209f0:	90bff804 	addi	r2,r18,-32
   209f4:	a080462e 	bgeu	r20,r2,20b10 <___vfprintf_internal_r+0x294>
   209f8:	e013883a 	mov	r9,fp
   209fc:	9000df26 	beq	r18,zero,20d7c <___vfprintf_internal_r+0x500>
   20a00:	00c00044 	movi	r3,1
   20a04:	d8c12815 	stw	r3,1184(sp)
   20a08:	dc810405 	stb	r18,1040(sp)
   20a0c:	d8012585 	stb	zero,1174(sp)
   20a10:	d8c12b15 	stw	r3,1196(sp)
   20a14:	dcc10404 	addi	r19,sp,1040
   20a18:	d8013115 	stw	zero,1220(sp)
   20a1c:	80c0008c 	andi	r3,r16,2
   20a20:	d8c12a15 	stw	r3,1192(sp)
   20a24:	18000326 	beq	r3,zero,20a34 <___vfprintf_internal_r+0x1b8>
   20a28:	d8c12817 	ldw	r3,1184(sp)
   20a2c:	18c00084 	addi	r3,r3,2
   20a30:	d8c12815 	stw	r3,1184(sp)
   20a34:	80c0210c 	andi	r3,r16,132
   20a38:	d8c12f15 	stw	r3,1212(sp)
   20a3c:	1802251e 	bne	r3,zero,212d4 <___vfprintf_internal_r+0xa58>
   20a40:	d9012e17 	ldw	r4,1208(sp)
   20a44:	d8c12817 	ldw	r3,1184(sp)
   20a48:	20edc83a 	sub	r22,r4,r3
   20a4c:	0582210e 	bge	zero,r22,212d4 <___vfprintf_internal_r+0xa58>
   20a50:	02800404 	movi	r10,16
   20a54:	da011d17 	ldw	r8,1140(sp)
   20a58:	d8c11c17 	ldw	r3,1136(sp)
   20a5c:	05c001f4 	movhi	r23,7
   20a60:	bdf22d84 	addi	r23,r23,-14154
   20a64:	5580200e 	bge	r10,r22,20ae8 <___vfprintf_internal_r+0x26c>
   20a68:	dc813815 	stw	r18,1248(sp)
   20a6c:	5039883a 	mov	fp,r10
   20a70:	b825883a 	mov	r18,r23
   20a74:	050001c4 	movi	r20,7
   20a78:	b02f883a 	mov	r23,r22
   20a7c:	802d883a 	mov	r22,r16
   20a80:	dc012917 	ldw	r16,1188(sp)
   20a84:	00000306 	br	20a94 <___vfprintf_internal_r+0x218>
   20a88:	bdfffc04 	addi	r23,r23,-16
   20a8c:	4a400204 	addi	r9,r9,8
   20a90:	e5c0110e 	bge	fp,r23,20ad8 <___vfprintf_internal_r+0x25c>
   20a94:	4c800015 	stw	r18,0(r9)
   20a98:	4f000115 	stw	fp,4(r9)
   20a9c:	42000404 	addi	r8,r8,16
   20aa0:	18c00044 	addi	r3,r3,1
   20aa4:	da011d15 	stw	r8,1140(sp)
   20aa8:	d8c11c15 	stw	r3,1136(sp)
   20aac:	a0fff60e 	bge	r20,r3,20a88 <___vfprintf_internal_r+0x20c>
   20ab0:	8809883a 	mov	r4,r17
   20ab4:	800b883a 	mov	r5,r16
   20ab8:	d9811b04 	addi	r6,sp,1132
   20abc:	00208480 	call	20848 <__sprint_r>
   20ac0:	1000b41e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   20ac4:	bdfffc04 	addi	r23,r23,-16
   20ac8:	da011d17 	ldw	r8,1140(sp)
   20acc:	d8c11c17 	ldw	r3,1136(sp)
   20ad0:	da400404 	addi	r9,sp,16
   20ad4:	e5ffef16 	blt	fp,r23,20a94 <___vfprintf_internal_r+0x218>
   20ad8:	b021883a 	mov	r16,r22
   20adc:	b82d883a 	mov	r22,r23
   20ae0:	902f883a 	mov	r23,r18
   20ae4:	dc813817 	ldw	r18,1248(sp)
   20ae8:	4dc00015 	stw	r23,0(r9)
   20aec:	4d800115 	stw	r22,4(r9)
   20af0:	4591883a 	add	r8,r8,r22
   20af4:	18c00044 	addi	r3,r3,1
   20af8:	da011d15 	stw	r8,1140(sp)
   20afc:	d8c11c15 	stw	r3,1136(sp)
   20b00:	008001c4 	movi	r2,7
   20b04:	10c3fe16 	blt	r2,r3,21b00 <___vfprintf_internal_r+0x1284>
   20b08:	4a400204 	addi	r9,r9,8
   20b0c:	0001f306 	br	212dc <___vfprintf_internal_r+0xa60>
   20b10:	1085883a 	add	r2,r2,r2
   20b14:	1085883a 	add	r2,r2,r2
   20b18:	010000b4 	movhi	r4,2
   20b1c:	2102cb04 	addi	r4,r4,2860
   20b20:	1105883a 	add	r2,r2,r4
   20b24:	10800017 	ldw	r2,0(r2)
   20b28:	1000683a 	jmp	r2
   20b2c:	00021208 	cmpgei	zero,zero,2120
   20b30:	000209f8 	rdprs	zero,zero,2087
   20b34:	000209f8 	rdprs	zero,zero,2087
   20b38:	00021220 	cmpeqi	zero,zero,2120
   20b3c:	000209f8 	rdprs	zero,zero,2087
   20b40:	000209f8 	rdprs	zero,zero,2087
   20b44:	000209f8 	rdprs	zero,zero,2087
   20b48:	000209f8 	rdprs	zero,zero,2087
   20b4c:	000209f8 	rdprs	zero,zero,2087
   20b50:	000209f8 	rdprs	zero,zero,2087
   20b54:	000210d8 	cmpnei	zero,zero,2115
   20b58:	0002126c 	andhi	zero,zero,2121
   20b5c:	000209f8 	rdprs	zero,zero,2087
   20b60:	00020ca0 	cmpeqi	zero,zero,2098
   20b64:	00021040 	call	2104 <__alt_mem_ins_mem_c1-0x1defc>
   20b68:	000209f8 	rdprs	zero,zero,2087
   20b6c:	0002122c 	andhi	zero,zero,2120
   20b70:	00021238 	rdprs	zero,zero,2120
   20b74:	00021238 	rdprs	zero,zero,2120
   20b78:	00021238 	rdprs	zero,zero,2120
   20b7c:	00021238 	rdprs	zero,zero,2120
   20b80:	00021238 	rdprs	zero,zero,2120
   20b84:	00021238 	rdprs	zero,zero,2120
   20b88:	00021238 	rdprs	zero,zero,2120
   20b8c:	00021238 	rdprs	zero,zero,2120
   20b90:	00021238 	rdprs	zero,zero,2120
   20b94:	000209f8 	rdprs	zero,zero,2087
   20b98:	000209f8 	rdprs	zero,zero,2087
   20b9c:	000209f8 	rdprs	zero,zero,2087
   20ba0:	000209f8 	rdprs	zero,zero,2087
   20ba4:	000209f8 	rdprs	zero,zero,2087
   20ba8:	000209f8 	rdprs	zero,zero,2087
   20bac:	000209f8 	rdprs	zero,zero,2087
   20bb0:	000209f8 	rdprs	zero,zero,2087
   20bb4:	000209f8 	rdprs	zero,zero,2087
   20bb8:	000209f8 	rdprs	zero,zero,2087
   20bbc:	00020e10 	cmplti	zero,zero,2104
   20bc0:	00020ed0 	cmplti	zero,zero,2107
   20bc4:	000209f8 	rdprs	zero,zero,2087
   20bc8:	00020ed0 	cmplti	zero,zero,2107
   20bcc:	000209f8 	rdprs	zero,zero,2087
   20bd0:	000209f8 	rdprs	zero,zero,2087
   20bd4:	000209f8 	rdprs	zero,zero,2087
   20bd8:	000209f8 	rdprs	zero,zero,2087
   20bdc:	00020f64 	muli	zero,zero,2109
   20be0:	000209f8 	rdprs	zero,zero,2087
   20be4:	000209f8 	rdprs	zero,zero,2087
   20be8:	00020f70 	cmpltui	zero,zero,2109
   20bec:	000209f8 	rdprs	zero,zero,2087
   20bf0:	000209f8 	rdprs	zero,zero,2087
   20bf4:	000209f8 	rdprs	zero,zero,2087
   20bf8:	000209f8 	rdprs	zero,zero,2087
   20bfc:	000209f8 	rdprs	zero,zero,2087
   20c00:	00020fa8 	cmpgeui	zero,zero,2110
   20c04:	000209f8 	rdprs	zero,zero,2087
   20c08:	000209f8 	rdprs	zero,zero,2087
   20c0c:	00020fe4 	muli	zero,zero,2111
   20c10:	000209f8 	rdprs	zero,zero,2087
   20c14:	000209f8 	rdprs	zero,zero,2087
   20c18:	000209f8 	rdprs	zero,zero,2087
   20c1c:	000209f8 	rdprs	zero,zero,2087
   20c20:	000209f8 	rdprs	zero,zero,2087
   20c24:	000209f8 	rdprs	zero,zero,2087
   20c28:	000209f8 	rdprs	zero,zero,2087
   20c2c:	000209f8 	rdprs	zero,zero,2087
   20c30:	000209f8 	rdprs	zero,zero,2087
   20c34:	000209f8 	rdprs	zero,zero,2087
   20c38:	0002127c 	xorhi	zero,zero,2121
   20c3c:	000212b0 	cmpltui	zero,zero,2122
   20c40:	00020ed0 	cmplti	zero,zero,2107
   20c44:	00020ed0 	cmplti	zero,zero,2107
   20c48:	00020ed0 	cmplti	zero,zero,2107
   20c4c:	000211fc 	xorhi	zero,zero,2119
   20c50:	000212b0 	cmpltui	zero,zero,2122
   20c54:	000209f8 	rdprs	zero,zero,2087
   20c58:	000209f8 	rdprs	zero,zero,2087
   20c5c:	00021088 	cmpgei	zero,zero,2114
   20c60:	000209f8 	rdprs	zero,zero,2087
   20c64:	000210a0 	cmpeqi	zero,zero,2114
   20c68:	000212bc 	xorhi	zero,zero,2122
   20c6c:	00021100 	call	2110 <__alt_mem_ins_mem_c1-0x1def0>
   20c70:	00021150 	cmplti	zero,zero,2117
   20c74:	000209f8 	rdprs	zero,zero,2087
   20c78:	0002115c 	xori	zero,zero,2117
   20c7c:	000209f8 	rdprs	zero,zero,2087
   20c80:	000212c8 	cmpgei	zero,zero,2123
   20c84:	000209f8 	rdprs	zero,zero,2087
   20c88:	000209f8 	rdprs	zero,zero,2087
   20c8c:	000211c0 	call	211c <__alt_mem_ins_mem_c1-0x1dee4>
   20c90:	d9012e17 	ldw	r4,1208(sp)
   20c94:	d8812d15 	stw	r2,1204(sp)
   20c98:	0109c83a 	sub	r4,zero,r4
   20c9c:	d9012e15 	stw	r4,1208(sp)
   20ca0:	84000114 	ori	r16,r16,4
   20ca4:	ac800007 	ldb	r18,0(r21)
   20ca8:	003f5006 	br	209ec <___vfprintf_internal_r+0x170>
   20cac:	d9013017 	ldw	r4,1216(sp)
   20cb0:	d9412917 	ldw	r5,1188(sp)
   20cb4:	002271c0 	call	2271c <__swsetup_r>
   20cb8:	10003d1e 	bne	r2,zero,20db0 <___vfprintf_internal_r+0x534>
   20cbc:	d8c12917 	ldw	r3,1188(sp)
   20cc0:	1880030b 	ldhu	r2,12(r3)
   20cc4:	00c00284 	movi	r3,10
   20cc8:	1100068c 	andi	r4,r2,26
   20ccc:	20ff101e 	bne	r4,r3,20910 <___vfprintf_internal_r+0x94>
   20cd0:	d9012917 	ldw	r4,1188(sp)
   20cd4:	20c0038b 	ldhu	r3,14(r4)
   20cd8:	193fffcc 	andi	r4,r3,65535
   20cdc:	2120001c 	xori	r4,r4,32768
   20ce0:	21200004 	addi	r4,r4,-32768
   20ce4:	203f0a16 	blt	r4,zero,20910 <___vfprintf_internal_r+0x94>
   20ce8:	d9012917 	ldw	r4,1188(sp)
   20cec:	d9c12d17 	ldw	r7,1204(sp)
   20cf0:	10bfff4c 	andi	r2,r2,65533
   20cf4:	22800717 	ldw	r10,28(r4)
   20cf8:	22400917 	ldw	r9,36(r4)
   20cfc:	d9013017 	ldw	r4,1216(sp)
   20d00:	02010004 	movi	r8,1024
   20d04:	d881070d 	sth	r2,1052(sp)
   20d08:	d9410404 	addi	r5,sp,1040
   20d0c:	d8800404 	addi	r2,sp,16
   20d10:	800d883a 	mov	r6,r16
   20d14:	d8c1078d 	sth	r3,1054(sp)
   20d18:	da810b15 	stw	r10,1068(sp)
   20d1c:	da410d15 	stw	r9,1076(sp)
   20d20:	d8810415 	stw	r2,1040(sp)
   20d24:	d8810815 	stw	r2,1056(sp)
   20d28:	da010615 	stw	r8,1048(sp)
   20d2c:	da010915 	stw	r8,1060(sp)
   20d30:	d8010a15 	stw	zero,1064(sp)
   20d34:	002087c0 	call	2087c <___vfprintf_internal_r>
   20d38:	d8812c15 	stw	r2,1200(sp)
   20d3c:	10000416 	blt	r2,zero,20d50 <___vfprintf_internal_r+0x4d4>
   20d40:	d9013017 	ldw	r4,1216(sp)
   20d44:	d9410404 	addi	r5,sp,1040
   20d48:	00240e80 	call	240e8 <_fflush_r>
   20d4c:	1006501e 	bne	r2,zero,22690 <___vfprintf_internal_r+0x1e14>
   20d50:	d881070b 	ldhu	r2,1052(sp)
   20d54:	1080100c 	andi	r2,r2,64
   20d58:	10bfffcc 	andi	r2,r2,65535
   20d5c:	10a0001c 	xori	r2,r2,32768
   20d60:	10a00004 	addi	r2,r2,-32768
   20d64:	10001426 	beq	r2,zero,20db8 <___vfprintf_internal_r+0x53c>
   20d68:	d8c12917 	ldw	r3,1188(sp)
   20d6c:	1880030b 	ldhu	r2,12(r3)
   20d70:	10801014 	ori	r2,r2,64
   20d74:	1880030d 	sth	r2,12(r3)
   20d78:	00000f06 	br	20db8 <___vfprintf_internal_r+0x53c>
   20d7c:	d8811d17 	ldw	r2,1140(sp)
   20d80:	10000426 	beq	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   20d84:	d9013017 	ldw	r4,1216(sp)
   20d88:	d9412917 	ldw	r5,1188(sp)
   20d8c:	d9811b04 	addi	r6,sp,1132
   20d90:	00208480 	call	20848 <__sprint_r>
   20d94:	d8c12917 	ldw	r3,1188(sp)
   20d98:	1880030b 	ldhu	r2,12(r3)
   20d9c:	1080100c 	andi	r2,r2,64
   20da0:	10bfffcc 	andi	r2,r2,65535
   20da4:	10a0001c 	xori	r2,r2,32768
   20da8:	10a00004 	addi	r2,r2,-32768
   20dac:	10000226 	beq	r2,zero,20db8 <___vfprintf_internal_r+0x53c>
   20db0:	00bfffc4 	movi	r2,-1
   20db4:	d8812c15 	stw	r2,1200(sp)
   20db8:	d8812c17 	ldw	r2,1200(sp)
   20dbc:	dfc14617 	ldw	ra,1304(sp)
   20dc0:	df014517 	ldw	fp,1300(sp)
   20dc4:	ddc14417 	ldw	r23,1296(sp)
   20dc8:	dd814317 	ldw	r22,1292(sp)
   20dcc:	dd414217 	ldw	r21,1288(sp)
   20dd0:	dd014117 	ldw	r20,1284(sp)
   20dd4:	dcc14017 	ldw	r19,1280(sp)
   20dd8:	dc813f17 	ldw	r18,1276(sp)
   20ddc:	dc413e17 	ldw	r17,1272(sp)
   20de0:	dc013d17 	ldw	r16,1268(sp)
   20de4:	dec14704 	addi	sp,sp,1308
   20de8:	f800283a 	ret
   20dec:	d9412917 	ldw	r5,1188(sp)
   20df0:	8809883a 	mov	r4,r17
   20df4:	d9811b04 	addi	r6,sp,1132
   20df8:	00208480 	call	20848 <__sprint_r>
   20dfc:	103fe51e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   20e00:	da400404 	addi	r9,sp,16
   20e04:	003eea06 	br	209b0 <___vfprintf_internal_r+0x134>
   20e08:	00243a40 	call	243a4 <__sinit>
   20e0c:	003eb306 	br	208dc <___vfprintf_internal_r+0x60>
   20e10:	e013883a 	mov	r9,fp
   20e14:	84000414 	ori	r16,r16,16
   20e18:	1839883a 	mov	fp,r3
   20e1c:	8080080c 	andi	r2,r16,32
   20e20:	10034426 	beq	r2,zero,21b34 <___vfprintf_internal_r+0x12b8>
   20e24:	d8c12d17 	ldw	r3,1204(sp)
   20e28:	18800117 	ldw	r2,4(r3)
   20e2c:	1dc00017 	ldw	r23,0(r3)
   20e30:	18c00204 	addi	r3,r3,8
   20e34:	d8c12d15 	stw	r3,1204(sp)
   20e38:	102d883a 	mov	r22,r2
   20e3c:	1003020e 	bge	r2,zero,21a48 <___vfprintf_internal_r+0x11cc>
   20e40:	05efc83a 	sub	r23,zero,r23
   20e44:	b804c03a 	cmpne	r2,r23,zero
   20e48:	05adc83a 	sub	r22,zero,r22
   20e4c:	b0adc83a 	sub	r22,r22,r2
   20e50:	00800b44 	movi	r2,45
   20e54:	d8812585 	stb	r2,1174(sp)
   20e58:	00c00044 	movi	r3,1
   20e5c:	bd84b03a 	or	r2,r23,r22
   20e60:	e0000216 	blt	fp,zero,20e6c <___vfprintf_internal_r+0x5f0>
   20e64:	013fdfc4 	movi	r4,-129
   20e68:	8120703a 	and	r16,r16,r4
   20e6c:	1001cc1e 	bne	r2,zero,215a0 <___vfprintf_internal_r+0xd24>
   20e70:	e001cb1e 	bne	fp,zero,215a0 <___vfprintf_internal_r+0xd24>
   20e74:	18c03fcc 	andi	r3,r3,255
   20e78:	1802ca1e 	bne	r3,zero,219a4 <___vfprintf_internal_r+0x1128>
   20e7c:	8080004c 	andi	r2,r16,1
   20e80:	1002c826 	beq	r2,zero,219a4 <___vfprintf_internal_r+0x1128>
   20e84:	d8c13917 	ldw	r3,1252(sp)
   20e88:	00800c04 	movi	r2,48
   20e8c:	d8810dc5 	stb	r2,1079(sp)
   20e90:	d8c12b15 	stw	r3,1196(sp)
   20e94:	dcc10dc4 	addi	r19,sp,1079
   20e98:	d8812b17 	ldw	r2,1196(sp)
   20e9c:	d8812815 	stw	r2,1184(sp)
   20ea0:	1700010e 	bge	r2,fp,20ea8 <___vfprintf_internal_r+0x62c>
   20ea4:	df012815 	stw	fp,1184(sp)
   20ea8:	d8812583 	ldbu	r2,1174(sp)
   20eac:	df013115 	stw	fp,1220(sp)
   20eb0:	10803fcc 	andi	r2,r2,255
   20eb4:	1080201c 	xori	r2,r2,128
   20eb8:	10bfe004 	addi	r2,r2,-128
   20ebc:	103ed726 	beq	r2,zero,20a1c <___vfprintf_internal_r+0x1a0>
   20ec0:	d8c12817 	ldw	r3,1184(sp)
   20ec4:	18c00044 	addi	r3,r3,1
   20ec8:	d8c12815 	stw	r3,1184(sp)
   20ecc:	003ed306 	br	20a1c <___vfprintf_internal_r+0x1a0>
   20ed0:	8080020c 	andi	r2,r16,8
   20ed4:	e013883a 	mov	r9,fp
   20ed8:	1839883a 	mov	fp,r3
   20edc:	1003a626 	beq	r2,zero,21d78 <___vfprintf_internal_r+0x14fc>
   20ee0:	d9012d17 	ldw	r4,1204(sp)
   20ee4:	25800017 	ldw	r22,0(r4)
   20ee8:	25000117 	ldw	r20,4(r4)
   20eec:	21000204 	addi	r4,r4,8
   20ef0:	d9012d15 	stw	r4,1204(sp)
   20ef4:	dd813315 	stw	r22,1228(sp)
   20ef8:	dd013415 	stw	r20,1232(sp)
   20efc:	b009883a 	mov	r4,r22
   20f00:	a00b883a 	mov	r5,r20
   20f04:	da413c15 	stw	r9,1264(sp)
   20f08:	00275300 	call	27530 <__isinfd>
   20f0c:	da413c17 	ldw	r9,1264(sp)
   20f10:	b009883a 	mov	r4,r22
   20f14:	a00b883a 	mov	r5,r20
   20f18:	10041d26 	beq	r2,zero,21f90 <___vfprintf_internal_r+0x1714>
   20f1c:	000d883a 	mov	r6,zero
   20f20:	000f883a 	mov	r7,zero
   20f24:	00293040 	call	29304 <__ltdf2>
   20f28:	da413c17 	ldw	r9,1264(sp)
   20f2c:	1004da16 	blt	r2,zero,22298 <___vfprintf_internal_r+0x1a1c>
   20f30:	d8812583 	ldbu	r2,1174(sp)
   20f34:	00c011c4 	movi	r3,71
   20f38:	1c83d116 	blt	r3,r18,21e80 <___vfprintf_internal_r+0x1604>
   20f3c:	04c001f4 	movhi	r19,7
   20f40:	9cf21d04 	addi	r19,r19,-14220
   20f44:	00c000c4 	movi	r3,3
   20f48:	d8c12815 	stw	r3,1184(sp)
   20f4c:	00ffdfc4 	movi	r3,-129
   20f50:	80e0703a 	and	r16,r16,r3
   20f54:	d8c12817 	ldw	r3,1184(sp)
   20f58:	d8013115 	stw	zero,1220(sp)
   20f5c:	d8c12b15 	stw	r3,1196(sp)
   20f60:	003fd306 	br	20eb0 <___vfprintf_internal_r+0x634>
   20f64:	84000214 	ori	r16,r16,8
   20f68:	ac800007 	ldb	r18,0(r21)
   20f6c:	003e9f06 	br	209ec <___vfprintf_internal_r+0x170>
   20f70:	e013883a 	mov	r9,fp
   20f74:	84000414 	ori	r16,r16,16
   20f78:	1839883a 	mov	fp,r3
   20f7c:	8080080c 	andi	r2,r16,32
   20f80:	10031d26 	beq	r2,zero,21bf8 <___vfprintf_internal_r+0x137c>
   20f84:	d8812d17 	ldw	r2,1204(sp)
   20f88:	0007883a 	mov	r3,zero
   20f8c:	15c00017 	ldw	r23,0(r2)
   20f90:	15800117 	ldw	r22,4(r2)
   20f94:	10800204 	addi	r2,r2,8
   20f98:	d8812d15 	stw	r2,1204(sp)
   20f9c:	d8012585 	stb	zero,1174(sp)
   20fa0:	bd84b03a 	or	r2,r23,r22
   20fa4:	003fae06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   20fa8:	e013883a 	mov	r9,fp
   20fac:	84000414 	ori	r16,r16,16
   20fb0:	1839883a 	mov	fp,r3
   20fb4:	8080080c 	andi	r2,r16,32
   20fb8:	1002e726 	beq	r2,zero,21b58 <___vfprintf_internal_r+0x12dc>
   20fbc:	d8c12d17 	ldw	r3,1204(sp)
   20fc0:	d9012d17 	ldw	r4,1204(sp)
   20fc4:	1dc00017 	ldw	r23,0(r3)
   20fc8:	1d800117 	ldw	r22,4(r3)
   20fcc:	21000204 	addi	r4,r4,8
   20fd0:	00c00044 	movi	r3,1
   20fd4:	d9012d15 	stw	r4,1204(sp)
   20fd8:	bd84b03a 	or	r2,r23,r22
   20fdc:	d8012585 	stb	zero,1174(sp)
   20fe0:	003f9f06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   20fe4:	e013883a 	mov	r9,fp
   20fe8:	1839883a 	mov	fp,r3
   20fec:	00c001f4 	movhi	r3,7
   20ff0:	18f22104 	addi	r3,r3,-14204
   20ff4:	d8c13615 	stw	r3,1240(sp)
   20ff8:	8080080c 	andi	r2,r16,32
   20ffc:	10007726 	beq	r2,zero,211dc <___vfprintf_internal_r+0x960>
   21000:	d9012d17 	ldw	r4,1204(sp)
   21004:	25c00017 	ldw	r23,0(r4)
   21008:	25800117 	ldw	r22,4(r4)
   2100c:	21000204 	addi	r4,r4,8
   21010:	d9012d15 	stw	r4,1204(sp)
   21014:	8080004c 	andi	r2,r16,1
   21018:	1002c226 	beq	r2,zero,21b24 <___vfprintf_internal_r+0x12a8>
   2101c:	bd84b03a 	or	r2,r23,r22
   21020:	10035d26 	beq	r2,zero,21d98 <___vfprintf_internal_r+0x151c>
   21024:	00c00c04 	movi	r3,48
   21028:	d8c12505 	stb	r3,1172(sp)
   2102c:	dc812545 	stb	r18,1173(sp)
   21030:	84000094 	ori	r16,r16,2
   21034:	00c00084 	movi	r3,2
   21038:	d8012585 	stb	zero,1174(sp)
   2103c:	003f8806 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21040:	ac800007 	ldb	r18,0(r21)
   21044:	00c00a84 	movi	r3,42
   21048:	adc00044 	addi	r23,r21,1
   2104c:	90c57526 	beq	r18,r3,22624 <___vfprintf_internal_r+0x1da8>
   21050:	95bff404 	addi	r22,r18,-48
   21054:	0009883a 	mov	r4,zero
   21058:	9d84ff36 	bltu	r19,r22,22458 <___vfprintf_internal_r+0x1bdc>
   2105c:	01400284 	movi	r5,10
   21060:	00297540 	call	29754 <__mulsi3>
   21064:	bc800007 	ldb	r18,0(r23)
   21068:	b089883a 	add	r4,r22,r2
   2106c:	bdc00044 	addi	r23,r23,1
   21070:	95bff404 	addi	r22,r18,-48
   21074:	9dbff92e 	bgeu	r19,r22,2105c <___vfprintf_internal_r+0x7e0>
   21078:	2007883a 	mov	r3,r4
   2107c:	20044316 	blt	r4,zero,2218c <___vfprintf_internal_r+0x1910>
   21080:	b82b883a 	mov	r21,r23
   21084:	003e5a06 	br	209f0 <___vfprintf_internal_r+0x174>
   21088:	ac800007 	ldb	r18,0(r21)
   2108c:	01001b04 	movi	r4,108
   21090:	a805883a 	mov	r2,r21
   21094:	91045526 	beq	r18,r4,221ec <___vfprintf_internal_r+0x1970>
   21098:	84000414 	ori	r16,r16,16
   2109c:	003e5306 	br	209ec <___vfprintf_internal_r+0x170>
   210a0:	8080080c 	andi	r2,r16,32
   210a4:	e013883a 	mov	r9,fp
   210a8:	10034026 	beq	r2,zero,21dac <___vfprintf_internal_r+0x1530>
   210ac:	d9012d17 	ldw	r4,1204(sp)
   210b0:	20800017 	ldw	r2,0(r4)
   210b4:	d9012c17 	ldw	r4,1200(sp)
   210b8:	2007d7fa 	srai	r3,r4,31
   210bc:	d9012d17 	ldw	r4,1204(sp)
   210c0:	10c00115 	stw	r3,4(r2)
   210c4:	21000104 	addi	r4,r4,4
   210c8:	d9012d15 	stw	r4,1204(sp)
   210cc:	d9012c17 	ldw	r4,1200(sp)
   210d0:	11000015 	stw	r4,0(r2)
   210d4:	003e1f06 	br	20954 <___vfprintf_internal_r+0xd8>
   210d8:	d9012d17 	ldw	r4,1204(sp)
   210dc:	21000017 	ldw	r4,0(r4)
   210e0:	d9012e15 	stw	r4,1208(sp)
   210e4:	d9012d17 	ldw	r4,1204(sp)
   210e8:	20800104 	addi	r2,r4,4
   210ec:	d9012e17 	ldw	r4,1208(sp)
   210f0:	203ee716 	blt	r4,zero,20c90 <___vfprintf_internal_r+0x414>
   210f4:	d8812d15 	stw	r2,1204(sp)
   210f8:	ac800007 	ldb	r18,0(r21)
   210fc:	003e3b06 	br	209ec <___vfprintf_internal_r+0x170>
   21100:	e013883a 	mov	r9,fp
   21104:	1839883a 	mov	fp,r3
   21108:	d8c12d17 	ldw	r3,1204(sp)
   2110c:	00800c04 	movi	r2,48
   21110:	010001f4 	movhi	r4,7
   21114:	21322604 	addi	r4,r4,-14184
   21118:	1dc00017 	ldw	r23,0(r3)
   2111c:	18c00104 	addi	r3,r3,4
   21120:	d8812505 	stb	r2,1172(sp)
   21124:	00801e04 	movi	r2,120
   21128:	d8812545 	stb	r2,1173(sp)
   2112c:	d8c12d15 	stw	r3,1204(sp)
   21130:	002d883a 	mov	r22,zero
   21134:	84000094 	ori	r16,r16,2
   21138:	d9013615 	stw	r4,1240(sp)
   2113c:	00c00084 	movi	r3,2
   21140:	04801e04 	movi	r18,120
   21144:	b805883a 	mov	r2,r23
   21148:	d8012585 	stb	zero,1174(sp)
   2114c:	003f4406 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21150:	84000814 	ori	r16,r16,32
   21154:	ac800007 	ldb	r18,0(r21)
   21158:	003e2406 	br	209ec <___vfprintf_internal_r+0x170>
   2115c:	d8812d17 	ldw	r2,1204(sp)
   21160:	d8012585 	stb	zero,1174(sp)
   21164:	e013883a 	mov	r9,fp
   21168:	14c00017 	ldw	r19,0(r2)
   2116c:	1839883a 	mov	fp,r3
   21170:	15c00104 	addi	r23,r2,4
   21174:	98045526 	beq	r19,zero,222cc <___vfprintf_internal_r+0x1a50>
   21178:	9809883a 	mov	r4,r19
   2117c:	18043116 	blt	r3,zero,22244 <___vfprintf_internal_r+0x19c8>
   21180:	000b883a 	mov	r5,zero
   21184:	180d883a 	mov	r6,r3
   21188:	da413c15 	stw	r9,1264(sp)
   2118c:	0025a440 	call	25a44 <memchr>
   21190:	da413c17 	ldw	r9,1264(sp)
   21194:	10047a26 	beq	r2,zero,22380 <___vfprintf_internal_r+0x1b04>
   21198:	14c5c83a 	sub	r2,r2,r19
   2119c:	d8812b15 	stw	r2,1196(sp)
   211a0:	e083d40e 	bge	fp,r2,220f4 <___vfprintf_internal_r+0x1878>
   211a4:	df012815 	stw	fp,1184(sp)
   211a8:	e004e416 	blt	fp,zero,2253c <___vfprintf_internal_r+0x1cc0>
   211ac:	d8812583 	ldbu	r2,1174(sp)
   211b0:	df012b15 	stw	fp,1196(sp)
   211b4:	ddc12d15 	stw	r23,1204(sp)
   211b8:	d8013115 	stw	zero,1220(sp)
   211bc:	003f3c06 	br	20eb0 <___vfprintf_internal_r+0x634>
   211c0:	008001f4 	movhi	r2,7
   211c4:	10b22604 	addi	r2,r2,-14184
   211c8:	d8813615 	stw	r2,1240(sp)
   211cc:	8080080c 	andi	r2,r16,32
   211d0:	e013883a 	mov	r9,fp
   211d4:	1839883a 	mov	fp,r3
   211d8:	103f891e 	bne	r2,zero,21000 <___vfprintf_internal_r+0x784>
   211dc:	8080040c 	andi	r2,r16,16
   211e0:	1002c326 	beq	r2,zero,21cf0 <___vfprintf_internal_r+0x1474>
   211e4:	d8812d17 	ldw	r2,1204(sp)
   211e8:	002d883a 	mov	r22,zero
   211ec:	15c00017 	ldw	r23,0(r2)
   211f0:	10800104 	addi	r2,r2,4
   211f4:	d8812d15 	stw	r2,1204(sp)
   211f8:	003f8606 	br	21014 <___vfprintf_internal_r+0x798>
   211fc:	84001014 	ori	r16,r16,64
   21200:	ac800007 	ldb	r18,0(r21)
   21204:	003df906 	br	209ec <___vfprintf_internal_r+0x170>
   21208:	d8812587 	ldb	r2,1174(sp)
   2120c:	1002e51e 	bne	r2,zero,21da4 <___vfprintf_internal_r+0x1528>
   21210:	00800804 	movi	r2,32
   21214:	d8812585 	stb	r2,1174(sp)
   21218:	ac800007 	ldb	r18,0(r21)
   2121c:	003df306 	br	209ec <___vfprintf_internal_r+0x170>
   21220:	84000054 	ori	r16,r16,1
   21224:	ac800007 	ldb	r18,0(r21)
   21228:	003df006 	br	209ec <___vfprintf_internal_r+0x170>
   2122c:	84002014 	ori	r16,r16,128
   21230:	ac800007 	ldb	r18,0(r21)
   21234:	003ded06 	br	209ec <___vfprintf_internal_r+0x170>
   21238:	0009883a 	mov	r4,zero
   2123c:	95bff404 	addi	r22,r18,-48
   21240:	182f883a 	mov	r23,r3
   21244:	01400284 	movi	r5,10
   21248:	00297540 	call	29754 <__mulsi3>
   2124c:	ac800007 	ldb	r18,0(r21)
   21250:	1589883a 	add	r4,r2,r22
   21254:	ad400044 	addi	r21,r21,1
   21258:	95bff404 	addi	r22,r18,-48
   2125c:	9dbff92e 	bgeu	r19,r22,21244 <___vfprintf_internal_r+0x9c8>
   21260:	b807883a 	mov	r3,r23
   21264:	d9012e15 	stw	r4,1208(sp)
   21268:	003de106 	br	209f0 <___vfprintf_internal_r+0x174>
   2126c:	00800ac4 	movi	r2,43
   21270:	d8812585 	stb	r2,1174(sp)
   21274:	ac800007 	ldb	r18,0(r21)
   21278:	003ddc06 	br	209ec <___vfprintf_internal_r+0x170>
   2127c:	d8c12d17 	ldw	r3,1204(sp)
   21280:	d9012d17 	ldw	r4,1204(sp)
   21284:	e013883a 	mov	r9,fp
   21288:	18800017 	ldw	r2,0(r3)
   2128c:	21000104 	addi	r4,r4,4
   21290:	00c00044 	movi	r3,1
   21294:	d8c12815 	stw	r3,1184(sp)
   21298:	d8012585 	stb	zero,1174(sp)
   2129c:	d8810405 	stb	r2,1040(sp)
   212a0:	d9012d15 	stw	r4,1204(sp)
   212a4:	d8c12b15 	stw	r3,1196(sp)
   212a8:	dcc10404 	addi	r19,sp,1040
   212ac:	003dda06 	br	20a18 <___vfprintf_internal_r+0x19c>
   212b0:	e013883a 	mov	r9,fp
   212b4:	1839883a 	mov	fp,r3
   212b8:	003ed806 	br	20e1c <___vfprintf_internal_r+0x5a0>
   212bc:	e013883a 	mov	r9,fp
   212c0:	1839883a 	mov	fp,r3
   212c4:	003f2d06 	br	20f7c <___vfprintf_internal_r+0x700>
   212c8:	e013883a 	mov	r9,fp
   212cc:	1839883a 	mov	fp,r3
   212d0:	003f3806 	br	20fb4 <___vfprintf_internal_r+0x738>
   212d4:	da011d17 	ldw	r8,1140(sp)
   212d8:	d8c11c17 	ldw	r3,1136(sp)
   212dc:	d8812587 	ldb	r2,1174(sp)
   212e0:	10000b26 	beq	r2,zero,21310 <___vfprintf_internal_r+0xa94>
   212e4:	d8812584 	addi	r2,sp,1174
   212e8:	48800015 	stw	r2,0(r9)
   212ec:	00800044 	movi	r2,1
   212f0:	48800115 	stw	r2,4(r9)
   212f4:	4091883a 	add	r8,r8,r2
   212f8:	1887883a 	add	r3,r3,r2
   212fc:	da011d15 	stw	r8,1140(sp)
   21300:	d8c11c15 	stw	r3,1136(sp)
   21304:	008001c4 	movi	r2,7
   21308:	10c18e16 	blt	r2,r3,21944 <___vfprintf_internal_r+0x10c8>
   2130c:	4a400204 	addi	r9,r9,8
   21310:	d9012a17 	ldw	r4,1192(sp)
   21314:	20000b26 	beq	r4,zero,21344 <___vfprintf_internal_r+0xac8>
   21318:	d8812504 	addi	r2,sp,1172
   2131c:	48800015 	stw	r2,0(r9)
   21320:	00800084 	movi	r2,2
   21324:	48800115 	stw	r2,4(r9)
   21328:	4091883a 	add	r8,r8,r2
   2132c:	18c00044 	addi	r3,r3,1
   21330:	da011d15 	stw	r8,1140(sp)
   21334:	d8c11c15 	stw	r3,1136(sp)
   21338:	008001c4 	movi	r2,7
   2133c:	10c17816 	blt	r2,r3,21920 <___vfprintf_internal_r+0x10a4>
   21340:	4a400204 	addi	r9,r9,8
   21344:	d9012f17 	ldw	r4,1212(sp)
   21348:	00802004 	movi	r2,128
   2134c:	2080fc26 	beq	r4,r2,21740 <___vfprintf_internal_r+0xec4>
   21350:	d8813117 	ldw	r2,1220(sp)
   21354:	d9012b17 	ldw	r4,1196(sp)
   21358:	112fc83a 	sub	r23,r2,r4
   2135c:	05c02a0e 	bge	zero,r23,21408 <___vfprintf_internal_r+0xb8c>
   21360:	07000404 	movi	fp,16
   21364:	050001f4 	movhi	r20,7
   21368:	a5323184 	addi	r20,r20,-14138
   2136c:	e5c01d0e 	bge	fp,r23,213e4 <___vfprintf_internal_r+0xb68>
   21370:	dc812a15 	stw	r18,1192(sp)
   21374:	058001c4 	movi	r22,7
   21378:	a025883a 	mov	r18,r20
   2137c:	8029883a 	mov	r20,r16
   21380:	dc012917 	ldw	r16,1188(sp)
   21384:	00000306 	br	21394 <___vfprintf_internal_r+0xb18>
   21388:	bdfffc04 	addi	r23,r23,-16
   2138c:	4a400204 	addi	r9,r9,8
   21390:	e5c0110e 	bge	fp,r23,213d8 <___vfprintf_internal_r+0xb5c>
   21394:	4c800015 	stw	r18,0(r9)
   21398:	4f000115 	stw	fp,4(r9)
   2139c:	42000404 	addi	r8,r8,16
   213a0:	18c00044 	addi	r3,r3,1
   213a4:	da011d15 	stw	r8,1140(sp)
   213a8:	d8c11c15 	stw	r3,1136(sp)
   213ac:	b0fff60e 	bge	r22,r3,21388 <___vfprintf_internal_r+0xb0c>
   213b0:	8809883a 	mov	r4,r17
   213b4:	800b883a 	mov	r5,r16
   213b8:	d9811b04 	addi	r6,sp,1132
   213bc:	00208480 	call	20848 <__sprint_r>
   213c0:	103e741e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   213c4:	bdfffc04 	addi	r23,r23,-16
   213c8:	da011d17 	ldw	r8,1140(sp)
   213cc:	d8c11c17 	ldw	r3,1136(sp)
   213d0:	da400404 	addi	r9,sp,16
   213d4:	e5ffef16 	blt	fp,r23,21394 <___vfprintf_internal_r+0xb18>
   213d8:	a021883a 	mov	r16,r20
   213dc:	9029883a 	mov	r20,r18
   213e0:	dc812a17 	ldw	r18,1192(sp)
   213e4:	4d000015 	stw	r20,0(r9)
   213e8:	4dc00115 	stw	r23,4(r9)
   213ec:	45d1883a 	add	r8,r8,r23
   213f0:	18c00044 	addi	r3,r3,1
   213f4:	da011d15 	stw	r8,1140(sp)
   213f8:	d8c11c15 	stw	r3,1136(sp)
   213fc:	008001c4 	movi	r2,7
   21400:	10c13e16 	blt	r2,r3,218fc <___vfprintf_internal_r+0x1080>
   21404:	4a400204 	addi	r9,r9,8
   21408:	8080400c 	andi	r2,r16,256
   2140c:	1000831e 	bne	r2,zero,2161c <___vfprintf_internal_r+0xda0>
   21410:	d8812b17 	ldw	r2,1196(sp)
   21414:	4cc00015 	stw	r19,0(r9)
   21418:	48800115 	stw	r2,4(r9)
   2141c:	4091883a 	add	r8,r8,r2
   21420:	18c00044 	addi	r3,r3,1
   21424:	da011d15 	stw	r8,1140(sp)
   21428:	d8c11c15 	stw	r3,1136(sp)
   2142c:	008001c4 	movi	r2,7
   21430:	10c05316 	blt	r2,r3,21580 <___vfprintf_internal_r+0xd04>
   21434:	4a400204 	addi	r9,r9,8
   21438:	8400010c 	andi	r16,r16,4
   2143c:	80002e26 	beq	r16,zero,214f8 <___vfprintf_internal_r+0xc7c>
   21440:	d8812e17 	ldw	r2,1208(sp)
   21444:	d8c12817 	ldw	r3,1184(sp)
   21448:	10e1c83a 	sub	r16,r2,r3
   2144c:	04002a0e 	bge	zero,r16,214f8 <___vfprintf_internal_r+0xc7c>
   21450:	04800404 	movi	r18,16
   21454:	d8c11c17 	ldw	r3,1136(sp)
   21458:	05c001f4 	movhi	r23,7
   2145c:	bdf22d84 	addi	r23,r23,-14154
   21460:	9400170e 	bge	r18,r16,214c0 <___vfprintf_internal_r+0xc44>
   21464:	04c001c4 	movi	r19,7
   21468:	dd012917 	ldw	r20,1188(sp)
   2146c:	00000306 	br	2147c <___vfprintf_internal_r+0xc00>
   21470:	843ffc04 	addi	r16,r16,-16
   21474:	4a400204 	addi	r9,r9,8
   21478:	9400110e 	bge	r18,r16,214c0 <___vfprintf_internal_r+0xc44>
   2147c:	4dc00015 	stw	r23,0(r9)
   21480:	4c800115 	stw	r18,4(r9)
   21484:	42000404 	addi	r8,r8,16
   21488:	18c00044 	addi	r3,r3,1
   2148c:	da011d15 	stw	r8,1140(sp)
   21490:	d8c11c15 	stw	r3,1136(sp)
   21494:	98fff60e 	bge	r19,r3,21470 <___vfprintf_internal_r+0xbf4>
   21498:	8809883a 	mov	r4,r17
   2149c:	a00b883a 	mov	r5,r20
   214a0:	d9811b04 	addi	r6,sp,1132
   214a4:	00208480 	call	20848 <__sprint_r>
   214a8:	103e3a1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   214ac:	843ffc04 	addi	r16,r16,-16
   214b0:	da011d17 	ldw	r8,1140(sp)
   214b4:	d8c11c17 	ldw	r3,1136(sp)
   214b8:	da400404 	addi	r9,sp,16
   214bc:	943fef16 	blt	r18,r16,2147c <___vfprintf_internal_r+0xc00>
   214c0:	4dc00015 	stw	r23,0(r9)
   214c4:	4c000115 	stw	r16,4(r9)
   214c8:	8211883a 	add	r8,r16,r8
   214cc:	18c00044 	addi	r3,r3,1
   214d0:	da011d15 	stw	r8,1140(sp)
   214d4:	d8c11c15 	stw	r3,1136(sp)
   214d8:	008001c4 	movi	r2,7
   214dc:	10c0060e 	bge	r2,r3,214f8 <___vfprintf_internal_r+0xc7c>
   214e0:	d9412917 	ldw	r5,1188(sp)
   214e4:	8809883a 	mov	r4,r17
   214e8:	d9811b04 	addi	r6,sp,1132
   214ec:	00208480 	call	20848 <__sprint_r>
   214f0:	103e281e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   214f4:	da011d17 	ldw	r8,1140(sp)
   214f8:	dd012817 	ldw	r20,1184(sp)
   214fc:	d9012e17 	ldw	r4,1208(sp)
   21500:	a100010e 	bge	r20,r4,21508 <___vfprintf_internal_r+0xc8c>
   21504:	2029883a 	mov	r20,r4
   21508:	d8812c17 	ldw	r2,1200(sp)
   2150c:	1505883a 	add	r2,r2,r20
   21510:	d8812c15 	stw	r2,1200(sp)
   21514:	4000b91e 	bne	r8,zero,217fc <___vfprintf_internal_r+0xf80>
   21518:	d8011c15 	stw	zero,1136(sp)
   2151c:	a8800007 	ldb	r2,0(r21)
   21520:	da400404 	addi	r9,sp,16
   21524:	103d0d1e 	bne	r2,zero,2095c <___vfprintf_internal_r+0xe0>
   21528:	a825883a 	mov	r18,r21
   2152c:	003d2306 	br	209bc <___vfprintf_internal_r+0x140>
   21530:	d9412917 	ldw	r5,1188(sp)
   21534:	8809883a 	mov	r4,r17
   21538:	d9811b04 	addi	r6,sp,1132
   2153c:	00208480 	call	20848 <__sprint_r>
   21540:	103e141e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21544:	da011d17 	ldw	r8,1140(sp)
   21548:	da400404 	addi	r9,sp,16
   2154c:	8080004c 	andi	r2,r16,1
   21550:	103fb926 	beq	r2,zero,21438 <___vfprintf_internal_r+0xbbc>
   21554:	d8c11c17 	ldw	r3,1136(sp)
   21558:	d9013717 	ldw	r4,1244(sp)
   2155c:	00800044 	movi	r2,1
   21560:	48800115 	stw	r2,4(r9)
   21564:	49000015 	stw	r4,0(r9)
   21568:	4091883a 	add	r8,r8,r2
   2156c:	1887883a 	add	r3,r3,r2
   21570:	da011d15 	stw	r8,1140(sp)
   21574:	d8c11c15 	stw	r3,1136(sp)
   21578:	008001c4 	movi	r2,7
   2157c:	10ffad0e 	bge	r2,r3,21434 <___vfprintf_internal_r+0xbb8>
   21580:	d9412917 	ldw	r5,1188(sp)
   21584:	8809883a 	mov	r4,r17
   21588:	d9811b04 	addi	r6,sp,1132
   2158c:	00208480 	call	20848 <__sprint_r>
   21590:	103e001e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21594:	da400404 	addi	r9,sp,16
   21598:	da011d17 	ldw	r8,1140(sp)
   2159c:	003fa606 	br	21438 <___vfprintf_internal_r+0xbbc>
   215a0:	18803fcc 	andi	r2,r3,255
   215a4:	00c00044 	movi	r3,1
   215a8:	10c10126 	beq	r2,r3,219b0 <___vfprintf_internal_r+0x1134>
   215ac:	00c00084 	movi	r3,2
   215b0:	10c0ed26 	beq	r2,r3,21968 <___vfprintf_internal_r+0x10ec>
   215b4:	d8c10dc4 	addi	r3,sp,1079
   215b8:	b808d0fa 	srli	r4,r23,3
   215bc:	b00a977a 	slli	r5,r22,29
   215c0:	b02cd0fa 	srli	r22,r22,3
   215c4:	bdc001cc 	andi	r23,r23,7
   215c8:	b8800c04 	addi	r2,r23,48
   215cc:	292eb03a 	or	r23,r5,r4
   215d0:	18800005 	stb	r2,0(r3)
   215d4:	bd88b03a 	or	r4,r23,r22
   215d8:	1827883a 	mov	r19,r3
   215dc:	18ffffc4 	addi	r3,r3,-1
   215e0:	203ff51e 	bne	r4,zero,215b8 <___vfprintf_internal_r+0xd3c>
   215e4:	8100004c 	andi	r4,r16,1
   215e8:	980b883a 	mov	r5,r19
   215ec:	20000726 	beq	r4,zero,2160c <___vfprintf_internal_r+0xd90>
   215f0:	10803fcc 	andi	r2,r2,255
   215f4:	1080201c 	xori	r2,r2,128
   215f8:	10bfe004 	addi	r2,r2,-128
   215fc:	01000c04 	movi	r4,48
   21600:	11000226 	beq	r2,r4,2160c <___vfprintf_internal_r+0xd90>
   21604:	1827883a 	mov	r19,r3
   21608:	293fffc5 	stb	r4,-1(r5)
   2160c:	d8812717 	ldw	r2,1180(sp)
   21610:	14c5c83a 	sub	r2,r2,r19
   21614:	d8812b15 	stw	r2,1196(sp)
   21618:	003e1f06 	br	20e98 <___vfprintf_internal_r+0x61c>
   2161c:	00801944 	movi	r2,101
   21620:	14807c0e 	bge	r2,r18,21814 <___vfprintf_internal_r+0xf98>
   21624:	d9013317 	ldw	r4,1228(sp)
   21628:	d9413417 	ldw	r5,1232(sp)
   2162c:	000d883a 	mov	r6,zero
   21630:	000f883a 	mov	r7,zero
   21634:	d8c13b15 	stw	r3,1260(sp)
   21638:	da013a15 	stw	r8,1256(sp)
   2163c:	da413c15 	stw	r9,1264(sp)
   21640:	00291840 	call	29184 <__eqdf2>
   21644:	d8c13b17 	ldw	r3,1260(sp)
   21648:	da013a17 	ldw	r8,1256(sp)
   2164c:	da413c17 	ldw	r9,1264(sp)
   21650:	1001001e 	bne	r2,zero,21a54 <___vfprintf_internal_r+0x11d8>
   21654:	008001f4 	movhi	r2,7
   21658:	10b22d04 	addi	r2,r2,-14156
   2165c:	48800015 	stw	r2,0(r9)
   21660:	00800044 	movi	r2,1
   21664:	48800115 	stw	r2,4(r9)
   21668:	4091883a 	add	r8,r8,r2
   2166c:	1887883a 	add	r3,r3,r2
   21670:	da011d15 	stw	r8,1140(sp)
   21674:	d8c11c15 	stw	r3,1136(sp)
   21678:	008001c4 	movi	r2,7
   2167c:	10c20316 	blt	r2,r3,21e8c <___vfprintf_internal_r+0x1610>
   21680:	4a400204 	addi	r9,r9,8
   21684:	d8812417 	ldw	r2,1168(sp)
   21688:	d8c13217 	ldw	r3,1224(sp)
   2168c:	10c00216 	blt	r2,r3,21698 <___vfprintf_internal_r+0xe1c>
   21690:	8080004c 	andi	r2,r16,1
   21694:	103f6826 	beq	r2,zero,21438 <___vfprintf_internal_r+0xbbc>
   21698:	d8c11c17 	ldw	r3,1136(sp)
   2169c:	d9013717 	ldw	r4,1244(sp)
   216a0:	00800044 	movi	r2,1
   216a4:	48800115 	stw	r2,4(r9)
   216a8:	49000015 	stw	r4,0(r9)
   216ac:	4091883a 	add	r8,r8,r2
   216b0:	1887883a 	add	r3,r3,r2
   216b4:	da011d15 	stw	r8,1140(sp)
   216b8:	d8c11c15 	stw	r3,1136(sp)
   216bc:	008001c4 	movi	r2,7
   216c0:	10c2ce16 	blt	r2,r3,221fc <___vfprintf_internal_r+0x1980>
   216c4:	4a400204 	addi	r9,r9,8
   216c8:	d8813217 	ldw	r2,1224(sp)
   216cc:	14bfffc4 	addi	r18,r2,-1
   216d0:	04bf590e 	bge	zero,r18,21438 <___vfprintf_internal_r+0xbbc>
   216d4:	04c00404 	movi	r19,16
   216d8:	d8c11c17 	ldw	r3,1136(sp)
   216dc:	050001f4 	movhi	r20,7
   216e0:	a5323184 	addi	r20,r20,-14138
   216e4:	9c818a0e 	bge	r19,r18,21d10 <___vfprintf_internal_r+0x1494>
   216e8:	058001c4 	movi	r22,7
   216ec:	ddc12917 	ldw	r23,1188(sp)
   216f0:	00000306 	br	21700 <___vfprintf_internal_r+0xe84>
   216f4:	4a400204 	addi	r9,r9,8
   216f8:	94bffc04 	addi	r18,r18,-16
   216fc:	9c81840e 	bge	r19,r18,21d10 <___vfprintf_internal_r+0x1494>
   21700:	4d000015 	stw	r20,0(r9)
   21704:	4cc00115 	stw	r19,4(r9)
   21708:	42000404 	addi	r8,r8,16
   2170c:	18c00044 	addi	r3,r3,1
   21710:	da011d15 	stw	r8,1140(sp)
   21714:	d8c11c15 	stw	r3,1136(sp)
   21718:	b0fff60e 	bge	r22,r3,216f4 <___vfprintf_internal_r+0xe78>
   2171c:	8809883a 	mov	r4,r17
   21720:	b80b883a 	mov	r5,r23
   21724:	d9811b04 	addi	r6,sp,1132
   21728:	00208480 	call	20848 <__sprint_r>
   2172c:	103d991e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21730:	da011d17 	ldw	r8,1140(sp)
   21734:	d8c11c17 	ldw	r3,1136(sp)
   21738:	da400404 	addi	r9,sp,16
   2173c:	003fee06 	br	216f8 <___vfprintf_internal_r+0xe7c>
   21740:	d8812e17 	ldw	r2,1208(sp)
   21744:	d9012817 	ldw	r4,1184(sp)
   21748:	112fc83a 	sub	r23,r2,r4
   2174c:	05ff000e 	bge	zero,r23,21350 <___vfprintf_internal_r+0xad4>
   21750:	07000404 	movi	fp,16
   21754:	050001f4 	movhi	r20,7
   21758:	a5323184 	addi	r20,r20,-14138
   2175c:	e5c01d0e 	bge	fp,r23,217d4 <___vfprintf_internal_r+0xf58>
   21760:	dc812a15 	stw	r18,1192(sp)
   21764:	058001c4 	movi	r22,7
   21768:	a025883a 	mov	r18,r20
   2176c:	8029883a 	mov	r20,r16
   21770:	dc012917 	ldw	r16,1188(sp)
   21774:	00000306 	br	21784 <___vfprintf_internal_r+0xf08>
   21778:	bdfffc04 	addi	r23,r23,-16
   2177c:	4a400204 	addi	r9,r9,8
   21780:	e5c0110e 	bge	fp,r23,217c8 <___vfprintf_internal_r+0xf4c>
   21784:	4c800015 	stw	r18,0(r9)
   21788:	4f000115 	stw	fp,4(r9)
   2178c:	42000404 	addi	r8,r8,16
   21790:	18c00044 	addi	r3,r3,1
   21794:	da011d15 	stw	r8,1140(sp)
   21798:	d8c11c15 	stw	r3,1136(sp)
   2179c:	b0fff60e 	bge	r22,r3,21778 <___vfprintf_internal_r+0xefc>
   217a0:	8809883a 	mov	r4,r17
   217a4:	800b883a 	mov	r5,r16
   217a8:	d9811b04 	addi	r6,sp,1132
   217ac:	00208480 	call	20848 <__sprint_r>
   217b0:	103d781e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   217b4:	bdfffc04 	addi	r23,r23,-16
   217b8:	da011d17 	ldw	r8,1140(sp)
   217bc:	d8c11c17 	ldw	r3,1136(sp)
   217c0:	da400404 	addi	r9,sp,16
   217c4:	e5ffef16 	blt	fp,r23,21784 <___vfprintf_internal_r+0xf08>
   217c8:	a021883a 	mov	r16,r20
   217cc:	9029883a 	mov	r20,r18
   217d0:	dc812a17 	ldw	r18,1192(sp)
   217d4:	4d000015 	stw	r20,0(r9)
   217d8:	4dc00115 	stw	r23,4(r9)
   217dc:	45d1883a 	add	r8,r8,r23
   217e0:	18c00044 	addi	r3,r3,1
   217e4:	da011d15 	stw	r8,1140(sp)
   217e8:	d8c11c15 	stw	r3,1136(sp)
   217ec:	008001c4 	movi	r2,7
   217f0:	10c13616 	blt	r2,r3,21ccc <___vfprintf_internal_r+0x1450>
   217f4:	4a400204 	addi	r9,r9,8
   217f8:	003ed506 	br	21350 <___vfprintf_internal_r+0xad4>
   217fc:	d9412917 	ldw	r5,1188(sp)
   21800:	8809883a 	mov	r4,r17
   21804:	d9811b04 	addi	r6,sp,1132
   21808:	00208480 	call	20848 <__sprint_r>
   2180c:	103f4226 	beq	r2,zero,21518 <___vfprintf_internal_r+0xc9c>
   21810:	003d6006 	br	20d94 <___vfprintf_internal_r+0x518>
   21814:	d9013217 	ldw	r4,1224(sp)
   21818:	00800044 	movi	r2,1
   2181c:	4cc00015 	stw	r19,0(r9)
   21820:	1101000e 	bge	r2,r4,21c24 <___vfprintf_internal_r+0x13a8>
   21824:	00800044 	movi	r2,1
   21828:	48800115 	stw	r2,4(r9)
   2182c:	4091883a 	add	r8,r8,r2
   21830:	1887883a 	add	r3,r3,r2
   21834:	da011d15 	stw	r8,1140(sp)
   21838:	d8c11c15 	stw	r3,1136(sp)
   2183c:	008001c4 	movi	r2,7
   21840:	10c10c16 	blt	r2,r3,21c74 <___vfprintf_internal_r+0x13f8>
   21844:	4a400204 	addi	r9,r9,8
   21848:	d8813717 	ldw	r2,1244(sp)
   2184c:	48800015 	stw	r2,0(r9)
   21850:	00800044 	movi	r2,1
   21854:	48800115 	stw	r2,4(r9)
   21858:	4091883a 	add	r8,r8,r2
   2185c:	1887883a 	add	r3,r3,r2
   21860:	da011d15 	stw	r8,1140(sp)
   21864:	d8c11c15 	stw	r3,1136(sp)
   21868:	008001c4 	movi	r2,7
   2186c:	10c10a16 	blt	r2,r3,21c98 <___vfprintf_internal_r+0x141c>
   21870:	4c800204 	addi	r18,r9,8
   21874:	d9013317 	ldw	r4,1228(sp)
   21878:	d9413417 	ldw	r5,1232(sp)
   2187c:	000d883a 	mov	r6,zero
   21880:	000f883a 	mov	r7,zero
   21884:	d8c13b15 	stw	r3,1260(sp)
   21888:	da013a15 	stw	r8,1256(sp)
   2188c:	00291e00 	call	291e0 <__nedf2>
   21890:	d8c13b17 	ldw	r3,1260(sp)
   21894:	da013a17 	ldw	r8,1256(sp)
   21898:	1000ba26 	beq	r2,zero,21b84 <___vfprintf_internal_r+0x1308>
   2189c:	d9013217 	ldw	r4,1224(sp)
   218a0:	9cc00044 	addi	r19,r19,1
   218a4:	94c00015 	stw	r19,0(r18)
   218a8:	20bfffc4 	addi	r2,r4,-1
   218ac:	90800115 	stw	r2,4(r18)
   218b0:	4091883a 	add	r8,r8,r2
   218b4:	18c00044 	addi	r3,r3,1
   218b8:	da011d15 	stw	r8,1140(sp)
   218bc:	d8c11c15 	stw	r3,1136(sp)
   218c0:	008001c4 	movi	r2,7
   218c4:	10c0e216 	blt	r2,r3,21c50 <___vfprintf_internal_r+0x13d4>
   218c8:	94800204 	addi	r18,r18,8
   218cc:	d9013517 	ldw	r4,1236(sp)
   218d0:	d8811fc4 	addi	r2,sp,1151
   218d4:	90800015 	stw	r2,0(r18)
   218d8:	91000115 	stw	r4,4(r18)
   218dc:	4111883a 	add	r8,r8,r4
   218e0:	18c00044 	addi	r3,r3,1
   218e4:	da011d15 	stw	r8,1140(sp)
   218e8:	d8c11c15 	stw	r3,1136(sp)
   218ec:	008001c4 	movi	r2,7
   218f0:	10ff2316 	blt	r2,r3,21580 <___vfprintf_internal_r+0xd04>
   218f4:	92400204 	addi	r9,r18,8
   218f8:	003ecf06 	br	21438 <___vfprintf_internal_r+0xbbc>
   218fc:	d9412917 	ldw	r5,1188(sp)
   21900:	8809883a 	mov	r4,r17
   21904:	d9811b04 	addi	r6,sp,1132
   21908:	00208480 	call	20848 <__sprint_r>
   2190c:	103d211e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21910:	da011d17 	ldw	r8,1140(sp)
   21914:	d8c11c17 	ldw	r3,1136(sp)
   21918:	da400404 	addi	r9,sp,16
   2191c:	003eba06 	br	21408 <___vfprintf_internal_r+0xb8c>
   21920:	d9412917 	ldw	r5,1188(sp)
   21924:	8809883a 	mov	r4,r17
   21928:	d9811b04 	addi	r6,sp,1132
   2192c:	00208480 	call	20848 <__sprint_r>
   21930:	103d181e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21934:	da011d17 	ldw	r8,1140(sp)
   21938:	d8c11c17 	ldw	r3,1136(sp)
   2193c:	da400404 	addi	r9,sp,16
   21940:	003e8006 	br	21344 <___vfprintf_internal_r+0xac8>
   21944:	d9412917 	ldw	r5,1188(sp)
   21948:	8809883a 	mov	r4,r17
   2194c:	d9811b04 	addi	r6,sp,1132
   21950:	00208480 	call	20848 <__sprint_r>
   21954:	103d0f1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21958:	da011d17 	ldw	r8,1140(sp)
   2195c:	d8c11c17 	ldw	r3,1136(sp)
   21960:	da400404 	addi	r9,sp,16
   21964:	003e6a06 	br	21310 <___vfprintf_internal_r+0xa94>
   21968:	d9413617 	ldw	r5,1240(sp)
   2196c:	d8810dc4 	addi	r2,sp,1079
   21970:	b8c003cc 	andi	r3,r23,15
   21974:	b008973a 	slli	r4,r22,28
   21978:	28c7883a 	add	r3,r5,r3
   2197c:	b82ed13a 	srli	r23,r23,4
   21980:	18c00003 	ldbu	r3,0(r3)
   21984:	b02cd13a 	srli	r22,r22,4
   21988:	25eeb03a 	or	r23,r4,r23
   2198c:	10c00005 	stb	r3,0(r2)
   21990:	bd86b03a 	or	r3,r23,r22
   21994:	1027883a 	mov	r19,r2
   21998:	10bfffc4 	addi	r2,r2,-1
   2199c:	183ff41e 	bne	r3,zero,21970 <___vfprintf_internal_r+0x10f4>
   219a0:	003f1a06 	br	2160c <___vfprintf_internal_r+0xd90>
   219a4:	d8012b15 	stw	zero,1196(sp)
   219a8:	dcc10e04 	addi	r19,sp,1080
   219ac:	003d3a06 	br	20e98 <___vfprintf_internal_r+0x61c>
   219b0:	b0025426 	beq	r22,zero,22304 <___vfprintf_internal_r+0x1a88>
   219b4:	b807883a 	mov	r3,r23
   219b8:	d8810dc4 	addi	r2,sp,1079
   219bc:	882f883a 	mov	r23,r17
   219c0:	04c00244 	movi	r19,9
   219c4:	8023883a 	mov	r17,r16
   219c8:	da412815 	stw	r9,1184(sp)
   219cc:	1821883a 	mov	r16,r3
   219d0:	8009883a 	mov	r4,r16
   219d4:	b00b883a 	mov	r5,r22
   219d8:	01800284 	movi	r6,10
   219dc:	000f883a 	mov	r7,zero
   219e0:	1029883a 	mov	r20,r2
   219e4:	00282bc0 	call	282bc <__umoddi3>
   219e8:	10800c04 	addi	r2,r2,48
   219ec:	8009883a 	mov	r4,r16
   219f0:	b00b883a 	mov	r5,r22
   219f4:	a0800005 	stb	r2,0(r20)
   219f8:	01800284 	movi	r6,10
   219fc:	000f883a 	mov	r7,zero
   21a00:	0027c6c0 	call	27c6c <__udivdi3>
   21a04:	1021883a 	mov	r16,r2
   21a08:	182d883a 	mov	r22,r3
   21a0c:	a0bfffc4 	addi	r2,r20,-1
   21a10:	183fef1e 	bne	r3,zero,219d0 <___vfprintf_internal_r+0x1154>
   21a14:	9c3fee36 	bltu	r19,r16,219d0 <___vfprintf_internal_r+0x1154>
   21a18:	da412817 	ldw	r9,1184(sp)
   21a1c:	8005883a 	mov	r2,r16
   21a20:	8821883a 	mov	r16,r17
   21a24:	b823883a 	mov	r17,r23
   21a28:	102f883a 	mov	r23,r2
   21a2c:	d8812717 	ldw	r2,1180(sp)
   21a30:	a4ffffc4 	addi	r19,r20,-1
   21a34:	bdc00c04 	addi	r23,r23,48
   21a38:	14c5c83a 	sub	r2,r2,r19
   21a3c:	a5ffffc5 	stb	r23,-1(r20)
   21a40:	d8812b15 	stw	r2,1196(sp)
   21a44:	003d1406 	br	20e98 <___vfprintf_internal_r+0x61c>
   21a48:	00c00044 	movi	r3,1
   21a4c:	bd84b03a 	or	r2,r23,r22
   21a50:	003d0306 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21a54:	dc812417 	ldw	r18,1168(sp)
   21a58:	0481140e 	bge	zero,r18,21eac <___vfprintf_internal_r+0x1630>
   21a5c:	d9013217 	ldw	r4,1224(sp)
   21a60:	4cc00015 	stw	r19,0(r9)
   21a64:	9100ec16 	blt	r18,r4,21e18 <___vfprintf_internal_r+0x159c>
   21a68:	49000115 	stw	r4,4(r9)
   21a6c:	4111883a 	add	r8,r8,r4
   21a70:	18c00044 	addi	r3,r3,1
   21a74:	da011d15 	stw	r8,1140(sp)
   21a78:	d8c11c15 	stw	r3,1136(sp)
   21a7c:	008001c4 	movi	r2,7
   21a80:	10c23616 	blt	r2,r3,2235c <___vfprintf_internal_r+0x1ae0>
   21a84:	4a400204 	addi	r9,r9,8
   21a88:	d8813217 	ldw	r2,1224(sp)
   21a8c:	90a5c83a 	sub	r18,r18,r2
   21a90:	04beae0e 	bge	zero,r18,2154c <___vfprintf_internal_r+0xcd0>
   21a94:	04c00404 	movi	r19,16
   21a98:	d8c11c17 	ldw	r3,1136(sp)
   21a9c:	050001f4 	movhi	r20,7
   21aa0:	a5323184 	addi	r20,r20,-14138
   21aa4:	9c81dd0e 	bge	r19,r18,2221c <___vfprintf_internal_r+0x19a0>
   21aa8:	058001c4 	movi	r22,7
   21aac:	ddc12917 	ldw	r23,1188(sp)
   21ab0:	00000306 	br	21ac0 <___vfprintf_internal_r+0x1244>
   21ab4:	4a400204 	addi	r9,r9,8
   21ab8:	94bffc04 	addi	r18,r18,-16
   21abc:	9c81d70e 	bge	r19,r18,2221c <___vfprintf_internal_r+0x19a0>
   21ac0:	4d000015 	stw	r20,0(r9)
   21ac4:	4cc00115 	stw	r19,4(r9)
   21ac8:	42000404 	addi	r8,r8,16
   21acc:	18c00044 	addi	r3,r3,1
   21ad0:	da011d15 	stw	r8,1140(sp)
   21ad4:	d8c11c15 	stw	r3,1136(sp)
   21ad8:	b0fff60e 	bge	r22,r3,21ab4 <___vfprintf_internal_r+0x1238>
   21adc:	8809883a 	mov	r4,r17
   21ae0:	b80b883a 	mov	r5,r23
   21ae4:	d9811b04 	addi	r6,sp,1132
   21ae8:	00208480 	call	20848 <__sprint_r>
   21aec:	103ca91e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21af0:	da011d17 	ldw	r8,1140(sp)
   21af4:	d8c11c17 	ldw	r3,1136(sp)
   21af8:	da400404 	addi	r9,sp,16
   21afc:	003fee06 	br	21ab8 <___vfprintf_internal_r+0x123c>
   21b00:	d9412917 	ldw	r5,1188(sp)
   21b04:	8809883a 	mov	r4,r17
   21b08:	d9811b04 	addi	r6,sp,1132
   21b0c:	00208480 	call	20848 <__sprint_r>
   21b10:	103ca01e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21b14:	da011d17 	ldw	r8,1140(sp)
   21b18:	d8c11c17 	ldw	r3,1136(sp)
   21b1c:	da400404 	addi	r9,sp,16
   21b20:	003dee06 	br	212dc <___vfprintf_internal_r+0xa60>
   21b24:	00c00084 	movi	r3,2
   21b28:	bd84b03a 	or	r2,r23,r22
   21b2c:	d8012585 	stb	zero,1174(sp)
   21b30:	003ccb06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21b34:	8080040c 	andi	r2,r16,16
   21b38:	1000ae26 	beq	r2,zero,21df4 <___vfprintf_internal_r+0x1578>
   21b3c:	d9012d17 	ldw	r4,1204(sp)
   21b40:	25c00017 	ldw	r23,0(r4)
   21b44:	21000104 	addi	r4,r4,4
   21b48:	d9012d15 	stw	r4,1204(sp)
   21b4c:	b82dd7fa 	srai	r22,r23,31
   21b50:	b005883a 	mov	r2,r22
   21b54:	003cb906 	br	20e3c <___vfprintf_internal_r+0x5c0>
   21b58:	8080040c 	andi	r2,r16,16
   21b5c:	10007026 	beq	r2,zero,21d20 <___vfprintf_internal_r+0x14a4>
   21b60:	d8812d17 	ldw	r2,1204(sp)
   21b64:	002d883a 	mov	r22,zero
   21b68:	00c00044 	movi	r3,1
   21b6c:	15c00017 	ldw	r23,0(r2)
   21b70:	10800104 	addi	r2,r2,4
   21b74:	d8812d15 	stw	r2,1204(sp)
   21b78:	d8012585 	stb	zero,1174(sp)
   21b7c:	b805883a 	mov	r2,r23
   21b80:	003cb706 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21b84:	d8813217 	ldw	r2,1224(sp)
   21b88:	14ffffc4 	addi	r19,r2,-1
   21b8c:	04ff4f0e 	bge	zero,r19,218cc <___vfprintf_internal_r+0x1050>
   21b90:	05800404 	movi	r22,16
   21b94:	050001f4 	movhi	r20,7
   21b98:	a5323184 	addi	r20,r20,-14138
   21b9c:	b4c0470e 	bge	r22,r19,21cbc <___vfprintf_internal_r+0x1440>
   21ba0:	05c001c4 	movi	r23,7
   21ba4:	df012917 	ldw	fp,1188(sp)
   21ba8:	00000306 	br	21bb8 <___vfprintf_internal_r+0x133c>
   21bac:	94800204 	addi	r18,r18,8
   21bb0:	9cfffc04 	addi	r19,r19,-16
   21bb4:	b4c0410e 	bge	r22,r19,21cbc <___vfprintf_internal_r+0x1440>
   21bb8:	95000015 	stw	r20,0(r18)
   21bbc:	95800115 	stw	r22,4(r18)
   21bc0:	42000404 	addi	r8,r8,16
   21bc4:	18c00044 	addi	r3,r3,1
   21bc8:	da011d15 	stw	r8,1140(sp)
   21bcc:	d8c11c15 	stw	r3,1136(sp)
   21bd0:	b8fff60e 	bge	r23,r3,21bac <___vfprintf_internal_r+0x1330>
   21bd4:	8809883a 	mov	r4,r17
   21bd8:	e00b883a 	mov	r5,fp
   21bdc:	d9811b04 	addi	r6,sp,1132
   21be0:	00208480 	call	20848 <__sprint_r>
   21be4:	103c6b1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21be8:	da011d17 	ldw	r8,1140(sp)
   21bec:	d8c11c17 	ldw	r3,1136(sp)
   21bf0:	dc800404 	addi	r18,sp,16
   21bf4:	003fee06 	br	21bb0 <___vfprintf_internal_r+0x1334>
   21bf8:	8080040c 	andi	r2,r16,16
   21bfc:	10005326 	beq	r2,zero,21d4c <___vfprintf_internal_r+0x14d0>
   21c00:	d8c12d17 	ldw	r3,1204(sp)
   21c04:	002d883a 	mov	r22,zero
   21c08:	1dc00017 	ldw	r23,0(r3)
   21c0c:	18c00104 	addi	r3,r3,4
   21c10:	d8c12d15 	stw	r3,1204(sp)
   21c14:	b805883a 	mov	r2,r23
   21c18:	0007883a 	mov	r3,zero
   21c1c:	d8012585 	stb	zero,1174(sp)
   21c20:	003c8f06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21c24:	8088703a 	and	r4,r16,r2
   21c28:	203efe1e 	bne	r4,zero,21824 <___vfprintf_internal_r+0xfa8>
   21c2c:	48800115 	stw	r2,4(r9)
   21c30:	42000044 	addi	r8,r8,1
   21c34:	18c00044 	addi	r3,r3,1
   21c38:	da011d15 	stw	r8,1140(sp)
   21c3c:	d8c11c15 	stw	r3,1136(sp)
   21c40:	008001c4 	movi	r2,7
   21c44:	10c00216 	blt	r2,r3,21c50 <___vfprintf_internal_r+0x13d4>
   21c48:	4c800204 	addi	r18,r9,8
   21c4c:	003f1f06 	br	218cc <___vfprintf_internal_r+0x1050>
   21c50:	d9412917 	ldw	r5,1188(sp)
   21c54:	8809883a 	mov	r4,r17
   21c58:	d9811b04 	addi	r6,sp,1132
   21c5c:	00208480 	call	20848 <__sprint_r>
   21c60:	103c4c1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21c64:	dc800404 	addi	r18,sp,16
   21c68:	da011d17 	ldw	r8,1140(sp)
   21c6c:	d8c11c17 	ldw	r3,1136(sp)
   21c70:	003f1606 	br	218cc <___vfprintf_internal_r+0x1050>
   21c74:	d9412917 	ldw	r5,1188(sp)
   21c78:	8809883a 	mov	r4,r17
   21c7c:	d9811b04 	addi	r6,sp,1132
   21c80:	00208480 	call	20848 <__sprint_r>
   21c84:	103c431e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21c88:	da011d17 	ldw	r8,1140(sp)
   21c8c:	d8c11c17 	ldw	r3,1136(sp)
   21c90:	da400404 	addi	r9,sp,16
   21c94:	003eec06 	br	21848 <___vfprintf_internal_r+0xfcc>
   21c98:	d9412917 	ldw	r5,1188(sp)
   21c9c:	8809883a 	mov	r4,r17
   21ca0:	d9811b04 	addi	r6,sp,1132
   21ca4:	00208480 	call	20848 <__sprint_r>
   21ca8:	103c3a1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21cac:	da011d17 	ldw	r8,1140(sp)
   21cb0:	d8c11c17 	ldw	r3,1136(sp)
   21cb4:	dc800404 	addi	r18,sp,16
   21cb8:	003eee06 	br	21874 <___vfprintf_internal_r+0xff8>
   21cbc:	95000015 	stw	r20,0(r18)
   21cc0:	94c00115 	stw	r19,4(r18)
   21cc4:	44d1883a 	add	r8,r8,r19
   21cc8:	003efa06 	br	218b4 <___vfprintf_internal_r+0x1038>
   21ccc:	d9412917 	ldw	r5,1188(sp)
   21cd0:	8809883a 	mov	r4,r17
   21cd4:	d9811b04 	addi	r6,sp,1132
   21cd8:	00208480 	call	20848 <__sprint_r>
   21cdc:	103c2d1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21ce0:	da011d17 	ldw	r8,1140(sp)
   21ce4:	d8c11c17 	ldw	r3,1136(sp)
   21ce8:	da400404 	addi	r9,sp,16
   21cec:	003d9806 	br	21350 <___vfprintf_internal_r+0xad4>
   21cf0:	8080100c 	andi	r2,r16,64
   21cf4:	10011626 	beq	r2,zero,22150 <___vfprintf_internal_r+0x18d4>
   21cf8:	d8c12d17 	ldw	r3,1204(sp)
   21cfc:	002d883a 	mov	r22,zero
   21d00:	1dc0000b 	ldhu	r23,0(r3)
   21d04:	18c00104 	addi	r3,r3,4
   21d08:	d8c12d15 	stw	r3,1204(sp)
   21d0c:	003cc106 	br	21014 <___vfprintf_internal_r+0x798>
   21d10:	4d000015 	stw	r20,0(r9)
   21d14:	4c800115 	stw	r18,4(r9)
   21d18:	4491883a 	add	r8,r8,r18
   21d1c:	003dc006 	br	21420 <___vfprintf_internal_r+0xba4>
   21d20:	8080100c 	andi	r2,r16,64
   21d24:	10010126 	beq	r2,zero,2212c <___vfprintf_internal_r+0x18b0>
   21d28:	d8c12d17 	ldw	r3,1204(sp)
   21d2c:	002d883a 	mov	r22,zero
   21d30:	1dc0000b 	ldhu	r23,0(r3)
   21d34:	18c00104 	addi	r3,r3,4
   21d38:	d8c12d15 	stw	r3,1204(sp)
   21d3c:	b805883a 	mov	r2,r23
   21d40:	00c00044 	movi	r3,1
   21d44:	d8012585 	stb	zero,1174(sp)
   21d48:	003c4506 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21d4c:	8080100c 	andi	r2,r16,64
   21d50:	10010526 	beq	r2,zero,22168 <___vfprintf_internal_r+0x18ec>
   21d54:	d9012d17 	ldw	r4,1204(sp)
   21d58:	002d883a 	mov	r22,zero
   21d5c:	0007883a 	mov	r3,zero
   21d60:	25c0000b 	ldhu	r23,0(r4)
   21d64:	21000104 	addi	r4,r4,4
   21d68:	d9012d15 	stw	r4,1204(sp)
   21d6c:	b805883a 	mov	r2,r23
   21d70:	d8012585 	stb	zero,1174(sp)
   21d74:	003c3a06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21d78:	d8812d17 	ldw	r2,1204(sp)
   21d7c:	15800017 	ldw	r22,0(r2)
   21d80:	15000117 	ldw	r20,4(r2)
   21d84:	10800204 	addi	r2,r2,8
   21d88:	d8812d15 	stw	r2,1204(sp)
   21d8c:	dd813315 	stw	r22,1228(sp)
   21d90:	dd013415 	stw	r20,1232(sp)
   21d94:	003c5906 	br	20efc <___vfprintf_internal_r+0x680>
   21d98:	00c00084 	movi	r3,2
   21d9c:	d8012585 	stb	zero,1174(sp)
   21da0:	003c2f06 	br	20e60 <___vfprintf_internal_r+0x5e4>
   21da4:	ac800007 	ldb	r18,0(r21)
   21da8:	003b1006 	br	209ec <___vfprintf_internal_r+0x170>
   21dac:	8080040c 	andi	r2,r16,16
   21db0:	1000091e 	bne	r2,zero,21dd8 <___vfprintf_internal_r+0x155c>
   21db4:	8400100c 	andi	r16,r16,64
   21db8:	80000726 	beq	r16,zero,21dd8 <___vfprintf_internal_r+0x155c>
   21dbc:	d8c12d17 	ldw	r3,1204(sp)
   21dc0:	d9012c17 	ldw	r4,1200(sp)
   21dc4:	18800017 	ldw	r2,0(r3)
   21dc8:	18c00104 	addi	r3,r3,4
   21dcc:	d8c12d15 	stw	r3,1204(sp)
   21dd0:	1100000d 	sth	r4,0(r2)
   21dd4:	003adf06 	br	20954 <___vfprintf_internal_r+0xd8>
   21dd8:	d8c12d17 	ldw	r3,1204(sp)
   21ddc:	d9012c17 	ldw	r4,1200(sp)
   21de0:	18800017 	ldw	r2,0(r3)
   21de4:	18c00104 	addi	r3,r3,4
   21de8:	d8c12d15 	stw	r3,1204(sp)
   21dec:	11000015 	stw	r4,0(r2)
   21df0:	003ad806 	br	20954 <___vfprintf_internal_r+0xd8>
   21df4:	8080100c 	andi	r2,r16,64
   21df8:	1000c526 	beq	r2,zero,22110 <___vfprintf_internal_r+0x1894>
   21dfc:	d8812d17 	ldw	r2,1204(sp)
   21e00:	15c0000f 	ldh	r23,0(r2)
   21e04:	10800104 	addi	r2,r2,4
   21e08:	d8812d15 	stw	r2,1204(sp)
   21e0c:	b82dd7fa 	srai	r22,r23,31
   21e10:	b005883a 	mov	r2,r22
   21e14:	003c0906 	br	20e3c <___vfprintf_internal_r+0x5c0>
   21e18:	4c800115 	stw	r18,4(r9)
   21e1c:	9211883a 	add	r8,r18,r8
   21e20:	18c00044 	addi	r3,r3,1
   21e24:	da011d15 	stw	r8,1140(sp)
   21e28:	d8c11c15 	stw	r3,1136(sp)
   21e2c:	008001c4 	movi	r2,7
   21e30:	10c14016 	blt	r2,r3,22334 <___vfprintf_internal_r+0x1ab8>
   21e34:	4a400204 	addi	r9,r9,8
   21e38:	d8813717 	ldw	r2,1244(sp)
   21e3c:	9ca7883a 	add	r19,r19,r18
   21e40:	48800015 	stw	r2,0(r9)
   21e44:	00800044 	movi	r2,1
   21e48:	48800115 	stw	r2,4(r9)
   21e4c:	4091883a 	add	r8,r8,r2
   21e50:	1887883a 	add	r3,r3,r2
   21e54:	da011d15 	stw	r8,1140(sp)
   21e58:	d8c11c15 	stw	r3,1136(sp)
   21e5c:	008001c4 	movi	r2,7
   21e60:	10c12c16 	blt	r2,r3,22314 <___vfprintf_internal_r+0x1a98>
   21e64:	4a400204 	addi	r9,r9,8
   21e68:	d9013217 	ldw	r4,1224(sp)
   21e6c:	da011d17 	ldw	r8,1140(sp)
   21e70:	d8c11c17 	ldw	r3,1136(sp)
   21e74:	24a5c83a 	sub	r18,r4,r18
   21e78:	4cc00015 	stw	r19,0(r9)
   21e7c:	003fa506 	br	21d14 <___vfprintf_internal_r+0x1498>
   21e80:	04c001f4 	movhi	r19,7
   21e84:	9cf21e04 	addi	r19,r19,-14216
   21e88:	003c2e06 	br	20f44 <___vfprintf_internal_r+0x6c8>
   21e8c:	d9412917 	ldw	r5,1188(sp)
   21e90:	8809883a 	mov	r4,r17
   21e94:	d9811b04 	addi	r6,sp,1132
   21e98:	00208480 	call	20848 <__sprint_r>
   21e9c:	103bbd1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21ea0:	da011d17 	ldw	r8,1140(sp)
   21ea4:	da400404 	addi	r9,sp,16
   21ea8:	003df606 	br	21684 <___vfprintf_internal_r+0xe08>
   21eac:	008001f4 	movhi	r2,7
   21eb0:	10b22d04 	addi	r2,r2,-14156
   21eb4:	48800015 	stw	r2,0(r9)
   21eb8:	00800044 	movi	r2,1
   21ebc:	48800115 	stw	r2,4(r9)
   21ec0:	4091883a 	add	r8,r8,r2
   21ec4:	1887883a 	add	r3,r3,r2
   21ec8:	da011d15 	stw	r8,1140(sp)
   21ecc:	d8c11c15 	stw	r3,1136(sp)
   21ed0:	008001c4 	movi	r2,7
   21ed4:	10c0bc16 	blt	r2,r3,221c8 <___vfprintf_internal_r+0x194c>
   21ed8:	4a400204 	addi	r9,r9,8
   21edc:	9000041e 	bne	r18,zero,21ef0 <___vfprintf_internal_r+0x1674>
   21ee0:	d8c13217 	ldw	r3,1224(sp)
   21ee4:	1800021e 	bne	r3,zero,21ef0 <___vfprintf_internal_r+0x1674>
   21ee8:	8080004c 	andi	r2,r16,1
   21eec:	103d5226 	beq	r2,zero,21438 <___vfprintf_internal_r+0xbbc>
   21ef0:	d8c11c17 	ldw	r3,1136(sp)
   21ef4:	d9013717 	ldw	r4,1244(sp)
   21ef8:	00800044 	movi	r2,1
   21efc:	48800115 	stw	r2,4(r9)
   21f00:	49000015 	stw	r4,0(r9)
   21f04:	4091883a 	add	r8,r8,r2
   21f08:	1887883a 	add	r3,r3,r2
   21f0c:	da011d15 	stw	r8,1140(sp)
   21f10:	d8c11c15 	stw	r3,1136(sp)
   21f14:	008001c4 	movi	r2,7
   21f18:	10c14516 	blt	r2,r3,22430 <___vfprintf_internal_r+0x1bb4>
   21f1c:	4a400204 	addi	r9,r9,8
   21f20:	04a5c83a 	sub	r18,zero,r18
   21f24:	0480d70e 	bge	zero,r18,22284 <___vfprintf_internal_r+0x1a08>
   21f28:	05800404 	movi	r22,16
   21f2c:	050001f4 	movhi	r20,7
   21f30:	a5323184 	addi	r20,r20,-14138
   21f34:	b480db0e 	bge	r22,r18,222a4 <___vfprintf_internal_r+0x1a28>
   21f38:	05c001c4 	movi	r23,7
   21f3c:	df012917 	ldw	fp,1188(sp)
   21f40:	00000306 	br	21f50 <___vfprintf_internal_r+0x16d4>
   21f44:	4a400204 	addi	r9,r9,8
   21f48:	94bffc04 	addi	r18,r18,-16
   21f4c:	b480d50e 	bge	r22,r18,222a4 <___vfprintf_internal_r+0x1a28>
   21f50:	4d000015 	stw	r20,0(r9)
   21f54:	4d800115 	stw	r22,4(r9)
   21f58:	42000404 	addi	r8,r8,16
   21f5c:	18c00044 	addi	r3,r3,1
   21f60:	da011d15 	stw	r8,1140(sp)
   21f64:	d8c11c15 	stw	r3,1136(sp)
   21f68:	b8fff60e 	bge	r23,r3,21f44 <___vfprintf_internal_r+0x16c8>
   21f6c:	8809883a 	mov	r4,r17
   21f70:	e00b883a 	mov	r5,fp
   21f74:	d9811b04 	addi	r6,sp,1132
   21f78:	00208480 	call	20848 <__sprint_r>
   21f7c:	103b851e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   21f80:	da011d17 	ldw	r8,1140(sp)
   21f84:	d8c11c17 	ldw	r3,1136(sp)
   21f88:	da400404 	addi	r9,sp,16
   21f8c:	003fee06 	br	21f48 <___vfprintf_internal_r+0x16cc>
   21f90:	da413c15 	stw	r9,1264(sp)
   21f94:	00275680 	call	27568 <__isnand>
   21f98:	da413c17 	ldw	r9,1264(sp)
   21f9c:	10007e1e 	bne	r2,zero,22198 <___vfprintf_internal_r+0x191c>
   21fa0:	00bfffc4 	movi	r2,-1
   21fa4:	e0816a26 	beq	fp,r2,22550 <___vfprintf_internal_r+0x1cd4>
   21fa8:	008019c4 	movi	r2,103
   21fac:	90816526 	beq	r18,r2,22544 <___vfprintf_internal_r+0x1cc8>
   21fb0:	008011c4 	movi	r2,71
   21fb4:	90816326 	beq	r18,r2,22544 <___vfprintf_internal_r+0x1cc8>
   21fb8:	80c04014 	ori	r3,r16,256
   21fbc:	d8c12a15 	stw	r3,1192(sp)
   21fc0:	a0016516 	blt	r20,zero,22558 <___vfprintf_internal_r+0x1cdc>
   21fc4:	d8012f05 	stb	zero,1212(sp)
   21fc8:	00801984 	movi	r2,102
   21fcc:	9080f226 	beq	r18,r2,22398 <___vfprintf_internal_r+0x1b1c>
   21fd0:	00801184 	movi	r2,70
   21fd4:	9080f026 	beq	r18,r2,22398 <___vfprintf_internal_r+0x1b1c>
   21fd8:	00801944 	movi	r2,101
   21fdc:	90818d26 	beq	r18,r2,22614 <___vfprintf_internal_r+0x1d98>
   21fe0:	00801144 	movi	r2,69
   21fe4:	90818b26 	beq	r18,r2,22614 <___vfprintf_internal_r+0x1d98>
   21fe8:	e02f883a 	mov	r23,fp
   21fec:	d8812404 	addi	r2,sp,1168
   21ff0:	d8800115 	stw	r2,4(sp)
   21ff4:	d8812304 	addi	r2,sp,1164
   21ff8:	d8800215 	stw	r2,8(sp)
   21ffc:	d8812204 	addi	r2,sp,1160
   22000:	ddc00015 	stw	r23,0(sp)
   22004:	d8800315 	stw	r2,12(sp)
   22008:	8809883a 	mov	r4,r17
   2200c:	b00b883a 	mov	r5,r22
   22010:	a00d883a 	mov	r6,r20
   22014:	01c00084 	movi	r7,2
   22018:	da413c15 	stw	r9,1264(sp)
   2201c:	0022acc0 	call	22acc <_dtoa_r>
   22020:	1027883a 	mov	r19,r2
   22024:	008019c4 	movi	r2,103
   22028:	da413c17 	ldw	r9,1264(sp)
   2202c:	9081951e 	bne	r18,r2,22684 <___vfprintf_internal_r+0x1e08>
   22030:	8080004c 	andi	r2,r16,1
   22034:	10017926 	beq	r2,zero,2261c <___vfprintf_internal_r+0x1da0>
   22038:	00801184 	movi	r2,70
   2203c:	9dc7883a 	add	r3,r19,r23
   22040:	9080e626 	beq	r18,r2,223dc <___vfprintf_internal_r+0x1b60>
   22044:	b009883a 	mov	r4,r22
   22048:	a00b883a 	mov	r5,r20
   2204c:	000d883a 	mov	r6,zero
   22050:	000f883a 	mov	r7,zero
   22054:	d8c13b15 	stw	r3,1260(sp)
   22058:	da413c15 	stw	r9,1264(sp)
   2205c:	00291840 	call	29184 <__eqdf2>
   22060:	d8c13b17 	ldw	r3,1260(sp)
   22064:	da413c17 	ldw	r9,1264(sp)
   22068:	10000726 	beq	r2,zero,22088 <___vfprintf_internal_r+0x180c>
   2206c:	d8812217 	ldw	r2,1160(sp)
   22070:	10c18a2e 	bgeu	r2,r3,2269c <___vfprintf_internal_r+0x1e20>
   22074:	01000c04 	movi	r4,48
   22078:	11000005 	stb	r4,0(r2)
   2207c:	10800044 	addi	r2,r2,1
   22080:	d8812215 	stw	r2,1160(sp)
   22084:	10fffc1e 	bne	r2,r3,22078 <___vfprintf_internal_r+0x17fc>
   22088:	1cc7c83a 	sub	r3,r3,r19
   2208c:	d8c13215 	stw	r3,1224(sp)
   22090:	008019c4 	movi	r2,103
   22094:	9080fa26 	beq	r18,r2,22480 <___vfprintf_internal_r+0x1c04>
   22098:	008011c4 	movi	r2,71
   2209c:	9080f826 	beq	r18,r2,22480 <___vfprintf_internal_r+0x1c04>
   220a0:	00801984 	movi	r2,102
   220a4:	90818e1e 	bne	r18,r2,226e0 <___vfprintf_internal_r+0x1e64>
   220a8:	d8812417 	ldw	r2,1168(sp)
   220ac:	d8812b15 	stw	r2,1196(sp)
   220b0:	00817c0e 	bge	zero,r2,226a4 <___vfprintf_internal_r+0x1e28>
   220b4:	e000021e 	bne	fp,zero,220c0 <___vfprintf_internal_r+0x1844>
   220b8:	8400004c 	andi	r16,r16,1
   220bc:	80000426 	beq	r16,zero,220d0 <___vfprintf_internal_r+0x1854>
   220c0:	d8812b17 	ldw	r2,1196(sp)
   220c4:	e2000044 	addi	r8,fp,1
   220c8:	1205883a 	add	r2,r2,r8
   220cc:	d8812b15 	stw	r2,1196(sp)
   220d0:	d8812815 	stw	r2,1184(sp)
   220d4:	10010b16 	blt	r2,zero,22504 <___vfprintf_internal_r+0x1c88>
   220d8:	ddc12f07 	ldb	r23,1212(sp)
   220dc:	b800e426 	beq	r23,zero,22470 <___vfprintf_internal_r+0x1bf4>
   220e0:	00800b44 	movi	r2,45
   220e4:	d8812585 	stb	r2,1174(sp)
   220e8:	dc012a17 	ldw	r16,1192(sp)
   220ec:	d8013115 	stw	zero,1220(sp)
   220f0:	003b7306 	br	20ec0 <___vfprintf_internal_r+0x644>
   220f4:	d8812b17 	ldw	r2,1196(sp)
   220f8:	d8812815 	stw	r2,1184(sp)
   220fc:	10005716 	blt	r2,zero,2225c <___vfprintf_internal_r+0x19e0>
   22100:	d8812583 	ldbu	r2,1174(sp)
   22104:	ddc12d15 	stw	r23,1204(sp)
   22108:	d8013115 	stw	zero,1220(sp)
   2210c:	003b6806 	br	20eb0 <___vfprintf_internal_r+0x634>
   22110:	d8c12d17 	ldw	r3,1204(sp)
   22114:	1dc00017 	ldw	r23,0(r3)
   22118:	18c00104 	addi	r3,r3,4
   2211c:	d8c12d15 	stw	r3,1204(sp)
   22120:	b82dd7fa 	srai	r22,r23,31
   22124:	b005883a 	mov	r2,r22
   22128:	003b4406 	br	20e3c <___vfprintf_internal_r+0x5c0>
   2212c:	d9012d17 	ldw	r4,1204(sp)
   22130:	002d883a 	mov	r22,zero
   22134:	00c00044 	movi	r3,1
   22138:	25c00017 	ldw	r23,0(r4)
   2213c:	21000104 	addi	r4,r4,4
   22140:	d9012d15 	stw	r4,1204(sp)
   22144:	b805883a 	mov	r2,r23
   22148:	d8012585 	stb	zero,1174(sp)
   2214c:	003b4406 	br	20e60 <___vfprintf_internal_r+0x5e4>
   22150:	d9012d17 	ldw	r4,1204(sp)
   22154:	002d883a 	mov	r22,zero
   22158:	25c00017 	ldw	r23,0(r4)
   2215c:	21000104 	addi	r4,r4,4
   22160:	d9012d15 	stw	r4,1204(sp)
   22164:	003bab06 	br	21014 <___vfprintf_internal_r+0x798>
   22168:	d8812d17 	ldw	r2,1204(sp)
   2216c:	002d883a 	mov	r22,zero
   22170:	0007883a 	mov	r3,zero
   22174:	15c00017 	ldw	r23,0(r2)
   22178:	10800104 	addi	r2,r2,4
   2217c:	d8812d15 	stw	r2,1204(sp)
   22180:	d8012585 	stb	zero,1174(sp)
   22184:	b805883a 	mov	r2,r23
   22188:	003b3506 	br	20e60 <___vfprintf_internal_r+0x5e4>
   2218c:	00ffffc4 	movi	r3,-1
   22190:	b82b883a 	mov	r21,r23
   22194:	003a1606 	br	209f0 <___vfprintf_internal_r+0x174>
   22198:	008011c4 	movi	r2,71
   2219c:	1480b116 	blt	r2,r18,22464 <___vfprintf_internal_r+0x1be8>
   221a0:	04c001f4 	movhi	r19,7
   221a4:	9cf21f04 	addi	r19,r19,-14212
   221a8:	00c000c4 	movi	r3,3
   221ac:	00bfdfc4 	movi	r2,-129
   221b0:	80a0703a 	and	r16,r16,r2
   221b4:	d8c12815 	stw	r3,1184(sp)
   221b8:	d8812583 	ldbu	r2,1174(sp)
   221bc:	d8c12b15 	stw	r3,1196(sp)
   221c0:	d8013115 	stw	zero,1220(sp)
   221c4:	003b3a06 	br	20eb0 <___vfprintf_internal_r+0x634>
   221c8:	d9412917 	ldw	r5,1188(sp)
   221cc:	8809883a 	mov	r4,r17
   221d0:	d9811b04 	addi	r6,sp,1132
   221d4:	00208480 	call	20848 <__sprint_r>
   221d8:	103aee1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   221dc:	dc812417 	ldw	r18,1168(sp)
   221e0:	da011d17 	ldw	r8,1140(sp)
   221e4:	da400404 	addi	r9,sp,16
   221e8:	003f3c06 	br	21edc <___vfprintf_internal_r+0x1660>
   221ec:	ad400044 	addi	r21,r21,1
   221f0:	84000814 	ori	r16,r16,32
   221f4:	14800047 	ldb	r18,1(r2)
   221f8:	0039fc06 	br	209ec <___vfprintf_internal_r+0x170>
   221fc:	d9412917 	ldw	r5,1188(sp)
   22200:	8809883a 	mov	r4,r17
   22204:	d9811b04 	addi	r6,sp,1132
   22208:	00208480 	call	20848 <__sprint_r>
   2220c:	103ae11e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22210:	da011d17 	ldw	r8,1140(sp)
   22214:	da400404 	addi	r9,sp,16
   22218:	003d2b06 	br	216c8 <___vfprintf_internal_r+0xe4c>
   2221c:	4d000015 	stw	r20,0(r9)
   22220:	4c800115 	stw	r18,4(r9)
   22224:	4491883a 	add	r8,r8,r18
   22228:	18c00044 	addi	r3,r3,1
   2222c:	da011d15 	stw	r8,1140(sp)
   22230:	d8c11c15 	stw	r3,1136(sp)
   22234:	008001c4 	movi	r2,7
   22238:	10fcbd16 	blt	r2,r3,21530 <___vfprintf_internal_r+0xcb4>
   2223c:	4a400204 	addi	r9,r9,8
   22240:	003cc206 	br	2154c <___vfprintf_internal_r+0xcd0>
   22244:	da413c15 	stw	r9,1264(sp)
   22248:	00207bc0 	call	207bc <strlen>
   2224c:	d8812b15 	stw	r2,1196(sp)
   22250:	d8812815 	stw	r2,1184(sp)
   22254:	da413c17 	ldw	r9,1264(sp)
   22258:	103fa90e 	bge	r2,zero,22100 <___vfprintf_internal_r+0x1884>
   2225c:	d8012815 	stw	zero,1184(sp)
   22260:	003fa706 	br	22100 <___vfprintf_internal_r+0x1884>
   22264:	d9412917 	ldw	r5,1188(sp)
   22268:	8809883a 	mov	r4,r17
   2226c:	d9811b04 	addi	r6,sp,1132
   22270:	00208480 	call	20848 <__sprint_r>
   22274:	103ac71e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22278:	da011d17 	ldw	r8,1140(sp)
   2227c:	d8c11c17 	ldw	r3,1136(sp)
   22280:	da400404 	addi	r9,sp,16
   22284:	d8813217 	ldw	r2,1224(sp)
   22288:	4cc00015 	stw	r19,0(r9)
   2228c:	48800115 	stw	r2,4(r9)
   22290:	4091883a 	add	r8,r8,r2
   22294:	003c6206 	br	21420 <___vfprintf_internal_r+0xba4>
   22298:	00800b44 	movi	r2,45
   2229c:	d8812585 	stb	r2,1174(sp)
   222a0:	003b2406 	br	20f34 <___vfprintf_internal_r+0x6b8>
   222a4:	4d000015 	stw	r20,0(r9)
   222a8:	4c800115 	stw	r18,4(r9)
   222ac:	4491883a 	add	r8,r8,r18
   222b0:	18c00044 	addi	r3,r3,1
   222b4:	da011d15 	stw	r8,1140(sp)
   222b8:	d8c11c15 	stw	r3,1136(sp)
   222bc:	008001c4 	movi	r2,7
   222c0:	10ffe816 	blt	r2,r3,22264 <___vfprintf_internal_r+0x19e8>
   222c4:	4a400204 	addi	r9,r9,8
   222c8:	003fee06 	br	22284 <___vfprintf_internal_r+0x1a08>
   222cc:	d8c12b15 	stw	r3,1196(sp)
   222d0:	00800184 	movi	r2,6
   222d4:	10c0062e 	bgeu	r2,r3,222f0 <___vfprintf_internal_r+0x1a74>
   222d8:	d8812b15 	stw	r2,1196(sp)
   222dc:	d8812815 	stw	r2,1184(sp)
   222e0:	ddc12d15 	stw	r23,1204(sp)
   222e4:	04c001f4 	movhi	r19,7
   222e8:	9cf22b04 	addi	r19,r19,-14164
   222ec:	0039ca06 	br	20a18 <___vfprintf_internal_r+0x19c>
   222f0:	d8812b17 	ldw	r2,1196(sp)
   222f4:	d8812815 	stw	r2,1184(sp)
   222f8:	103ff90e 	bge	r2,zero,222e0 <___vfprintf_internal_r+0x1a64>
   222fc:	d8012815 	stw	zero,1184(sp)
   22300:	003ff706 	br	222e0 <___vfprintf_internal_r+0x1a64>
   22304:	00800244 	movi	r2,9
   22308:	15fdaa36 	bltu	r2,r23,219b4 <___vfprintf_internal_r+0x1138>
   2230c:	dd010e04 	addi	r20,sp,1080
   22310:	003dc606 	br	21a2c <___vfprintf_internal_r+0x11b0>
   22314:	d9412917 	ldw	r5,1188(sp)
   22318:	8809883a 	mov	r4,r17
   2231c:	d9811b04 	addi	r6,sp,1132
   22320:	00208480 	call	20848 <__sprint_r>
   22324:	103a9b1e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22328:	dc812417 	ldw	r18,1168(sp)
   2232c:	da400404 	addi	r9,sp,16
   22330:	003ecd06 	br	21e68 <___vfprintf_internal_r+0x15ec>
   22334:	d9412917 	ldw	r5,1188(sp)
   22338:	8809883a 	mov	r4,r17
   2233c:	d9811b04 	addi	r6,sp,1132
   22340:	00208480 	call	20848 <__sprint_r>
   22344:	103a931e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22348:	dc812417 	ldw	r18,1168(sp)
   2234c:	da011d17 	ldw	r8,1140(sp)
   22350:	d8c11c17 	ldw	r3,1136(sp)
   22354:	da400404 	addi	r9,sp,16
   22358:	003eb706 	br	21e38 <___vfprintf_internal_r+0x15bc>
   2235c:	d9412917 	ldw	r5,1188(sp)
   22360:	8809883a 	mov	r4,r17
   22364:	d9811b04 	addi	r6,sp,1132
   22368:	00208480 	call	20848 <__sprint_r>
   2236c:	103a891e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22370:	dc812417 	ldw	r18,1168(sp)
   22374:	da011d17 	ldw	r8,1140(sp)
   22378:	da400404 	addi	r9,sp,16
   2237c:	003dc206 	br	21a88 <___vfprintf_internal_r+0x120c>
   22380:	df012815 	stw	fp,1184(sp)
   22384:	d8812583 	ldbu	r2,1174(sp)
   22388:	df012b15 	stw	fp,1196(sp)
   2238c:	ddc12d15 	stw	r23,1204(sp)
   22390:	d8013115 	stw	zero,1220(sp)
   22394:	003ac606 	br	20eb0 <___vfprintf_internal_r+0x634>
   22398:	d8812404 	addi	r2,sp,1168
   2239c:	d8800115 	stw	r2,4(sp)
   223a0:	d8812304 	addi	r2,sp,1164
   223a4:	d8800215 	stw	r2,8(sp)
   223a8:	d8812204 	addi	r2,sp,1160
   223ac:	df000015 	stw	fp,0(sp)
   223b0:	d8800315 	stw	r2,12(sp)
   223b4:	8809883a 	mov	r4,r17
   223b8:	b00b883a 	mov	r5,r22
   223bc:	a00d883a 	mov	r6,r20
   223c0:	01c000c4 	movi	r7,3
   223c4:	da413c15 	stw	r9,1264(sp)
   223c8:	0022acc0 	call	22acc <_dtoa_r>
   223cc:	da413c17 	ldw	r9,1264(sp)
   223d0:	1027883a 	mov	r19,r2
   223d4:	1707883a 	add	r3,r2,fp
   223d8:	e02f883a 	mov	r23,fp
   223dc:	99000007 	ldb	r4,0(r19)
   223e0:	00800c04 	movi	r2,48
   223e4:	20800326 	beq	r4,r2,223f4 <___vfprintf_internal_r+0x1b78>
   223e8:	da812417 	ldw	r10,1168(sp)
   223ec:	1a87883a 	add	r3,r3,r10
   223f0:	003f1406 	br	22044 <___vfprintf_internal_r+0x17c8>
   223f4:	b009883a 	mov	r4,r22
   223f8:	a00b883a 	mov	r5,r20
   223fc:	000d883a 	mov	r6,zero
   22400:	000f883a 	mov	r7,zero
   22404:	d8c13b15 	stw	r3,1260(sp)
   22408:	da413c15 	stw	r9,1264(sp)
   2240c:	00291e00 	call	291e0 <__nedf2>
   22410:	d8c13b17 	ldw	r3,1260(sp)
   22414:	da413c17 	ldw	r9,1264(sp)
   22418:	103ff326 	beq	r2,zero,223e8 <___vfprintf_internal_r+0x1b6c>
   2241c:	00800044 	movi	r2,1
   22420:	15d5c83a 	sub	r10,r2,r23
   22424:	da812415 	stw	r10,1168(sp)
   22428:	1a87883a 	add	r3,r3,r10
   2242c:	003f0506 	br	22044 <___vfprintf_internal_r+0x17c8>
   22430:	d9412917 	ldw	r5,1188(sp)
   22434:	8809883a 	mov	r4,r17
   22438:	d9811b04 	addi	r6,sp,1132
   2243c:	00208480 	call	20848 <__sprint_r>
   22440:	103a541e 	bne	r2,zero,20d94 <___vfprintf_internal_r+0x518>
   22444:	dc812417 	ldw	r18,1168(sp)
   22448:	da011d17 	ldw	r8,1140(sp)
   2244c:	d8c11c17 	ldw	r3,1136(sp)
   22450:	da400404 	addi	r9,sp,16
   22454:	003eb206 	br	21f20 <___vfprintf_internal_r+0x16a4>
   22458:	b82b883a 	mov	r21,r23
   2245c:	0007883a 	mov	r3,zero
   22460:	00396306 	br	209f0 <___vfprintf_internal_r+0x174>
   22464:	04c001f4 	movhi	r19,7
   22468:	9cf22004 	addi	r19,r19,-14208
   2246c:	003f4e06 	br	221a8 <___vfprintf_internal_r+0x192c>
   22470:	d8812583 	ldbu	r2,1174(sp)
   22474:	dc012a17 	ldw	r16,1192(sp)
   22478:	d8013115 	stw	zero,1220(sp)
   2247c:	003a8c06 	br	20eb0 <___vfprintf_internal_r+0x634>
   22480:	d8812417 	ldw	r2,1168(sp)
   22484:	d8812b15 	stw	r2,1196(sp)
   22488:	1029883a 	mov	r20,r2
   2248c:	00bfff44 	movi	r2,-3
   22490:	a0800116 	blt	r20,r2,22498 <___vfprintf_internal_r+0x1c1c>
   22494:	e5001d0e 	bge	fp,r20,2250c <___vfprintf_internal_r+0x1c90>
   22498:	94bfff84 	addi	r18,r18,-2
   2249c:	a53fffc4 	addi	r20,r20,-1
   224a0:	dd012415 	stw	r20,1168(sp)
   224a4:	dc811fc5 	stb	r18,1151(sp)
   224a8:	a0007216 	blt	r20,zero,22674 <___vfprintf_internal_r+0x1df8>
   224ac:	00800ac4 	movi	r2,43
   224b0:	d8812005 	stb	r2,1152(sp)
   224b4:	00800244 	movi	r2,9
   224b8:	15003516 	blt	r2,r20,22590 <___vfprintf_internal_r+0x1d14>
   224bc:	00800c04 	movi	r2,48
   224c0:	a5000c04 	addi	r20,r20,48
   224c4:	d8812045 	stb	r2,1153(sp)
   224c8:	dd012085 	stb	r20,1154(sp)
   224cc:	d8c120c4 	addi	r3,sp,1155
   224d0:	d8811fc4 	addi	r2,sp,1151
   224d4:	1885c83a 	sub	r2,r3,r2
   224d8:	d8c13217 	ldw	r3,1224(sp)
   224dc:	d8813515 	stw	r2,1236(sp)
   224e0:	1885883a 	add	r2,r3,r2
   224e4:	d8812b15 	stw	r2,1196(sp)
   224e8:	00800044 	movi	r2,1
   224ec:	10c0580e 	bge	r2,r3,22650 <___vfprintf_internal_r+0x1dd4>
   224f0:	d8812b17 	ldw	r2,1196(sp)
   224f4:	10800044 	addi	r2,r2,1
   224f8:	d8812b15 	stw	r2,1196(sp)
   224fc:	d8812815 	stw	r2,1184(sp)
   22500:	103ef50e 	bge	r2,zero,220d8 <___vfprintf_internal_r+0x185c>
   22504:	d8012815 	stw	zero,1184(sp)
   22508:	003ef306 	br	220d8 <___vfprintf_internal_r+0x185c>
   2250c:	d8812b17 	ldw	r2,1196(sp)
   22510:	d8c13217 	ldw	r3,1224(sp)
   22514:	10c01416 	blt	r2,r3,22568 <___vfprintf_internal_r+0x1cec>
   22518:	8400004c 	andi	r16,r16,1
   2251c:	80000326 	beq	r16,zero,2252c <___vfprintf_internal_r+0x1cb0>
   22520:	d8812b17 	ldw	r2,1196(sp)
   22524:	10800044 	addi	r2,r2,1
   22528:	d8812b15 	stw	r2,1196(sp)
   2252c:	d8812815 	stw	r2,1184(sp)
   22530:	10001416 	blt	r2,zero,22584 <___vfprintf_internal_r+0x1d08>
   22534:	048019c4 	movi	r18,103
   22538:	003ee706 	br	220d8 <___vfprintf_internal_r+0x185c>
   2253c:	d8012815 	stw	zero,1184(sp)
   22540:	003b1a06 	br	211ac <___vfprintf_internal_r+0x930>
   22544:	e03e9c1e 	bne	fp,zero,21fb8 <___vfprintf_internal_r+0x173c>
   22548:	07000044 	movi	fp,1
   2254c:	003e9a06 	br	21fb8 <___vfprintf_internal_r+0x173c>
   22550:	07000184 	movi	fp,6
   22554:	003e9806 	br	21fb8 <___vfprintf_internal_r+0x173c>
   22558:	00c00b44 	movi	r3,45
   2255c:	a520003c 	xorhi	r20,r20,32768
   22560:	d8c12f05 	stb	r3,1212(sp)
   22564:	003e9806 	br	21fc8 <___vfprintf_internal_r+0x174c>
   22568:	05003f0e 	bge	zero,r20,22668 <___vfprintf_internal_r+0x1dec>
   2256c:	05000044 	movi	r20,1
   22570:	d8c13217 	ldw	r3,1224(sp)
   22574:	a0e9883a 	add	r20,r20,r3
   22578:	dd012b15 	stw	r20,1196(sp)
   2257c:	dd012815 	stw	r20,1184(sp)
   22580:	a03fec0e 	bge	r20,zero,22534 <___vfprintf_internal_r+0x1cb8>
   22584:	d8012815 	stw	zero,1184(sp)
   22588:	048019c4 	movi	r18,103
   2258c:	003ed206 	br	220d8 <___vfprintf_internal_r+0x185c>
   22590:	d8c11f84 	addi	r3,sp,1150
   22594:	102f883a 	mov	r23,r2
   22598:	4839883a 	mov	fp,r9
   2259c:	a009883a 	mov	r4,r20
   225a0:	01400284 	movi	r5,10
   225a4:	182d883a 	mov	r22,r3
   225a8:	00296e80 	call	296e8 <__modsi3>
   225ac:	10800c04 	addi	r2,r2,48
   225b0:	a009883a 	mov	r4,r20
   225b4:	b0800005 	stb	r2,0(r22)
   225b8:	01400284 	movi	r5,10
   225bc:	00296980 	call	29698 <__divsi3>
   225c0:	1029883a 	mov	r20,r2
   225c4:	b0ffffc4 	addi	r3,r22,-1
   225c8:	b8bff416 	blt	r23,r2,2259c <___vfprintf_internal_r+0x1d20>
   225cc:	11400c04 	addi	r5,r2,48
   225d0:	b17fffc5 	stb	r5,-1(r22)
   225d4:	d8811fc4 	addi	r2,sp,1151
   225d8:	e013883a 	mov	r9,fp
   225dc:	18803e2e 	bgeu	r3,r2,226d8 <___vfprintf_internal_r+0x1e5c>
   225e0:	b007883a 	mov	r3,r22
   225e4:	d9012044 	addi	r4,sp,1153
   225e8:	00000206 	br	225f4 <___vfprintf_internal_r+0x1d78>
   225ec:	19400003 	ldbu	r5,0(r3)
   225f0:	18c00044 	addi	r3,r3,1
   225f4:	21400005 	stb	r5,0(r4)
   225f8:	21000044 	addi	r4,r4,1
   225fc:	10fffb1e 	bne	r2,r3,225ec <___vfprintf_internal_r+0x1d70>
   22600:	d8c12004 	addi	r3,sp,1152
   22604:	1d87c83a 	sub	r3,r3,r22
   22608:	d9012044 	addi	r4,sp,1153
   2260c:	20c7883a 	add	r3,r4,r3
   22610:	003fb006 	br	224d4 <___vfprintf_internal_r+0x1c58>
   22614:	e5c00044 	addi	r23,fp,1
   22618:	003e7406 	br	21fec <___vfprintf_internal_r+0x1770>
   2261c:	d8c12217 	ldw	r3,1160(sp)
   22620:	003e9906 	br	22088 <___vfprintf_internal_r+0x180c>
   22624:	d9012d17 	ldw	r4,1204(sp)
   22628:	ac800043 	ldbu	r18,1(r21)
   2262c:	b82b883a 	mov	r21,r23
   22630:	20c00017 	ldw	r3,0(r4)
   22634:	20800104 	addi	r2,r4,4
   22638:	d8812d15 	stw	r2,1204(sp)
   2263c:	18002116 	blt	r3,zero,226c4 <___vfprintf_internal_r+0x1e48>
   22640:	94803fcc 	andi	r18,r18,255
   22644:	9480201c 	xori	r18,r18,128
   22648:	94bfe004 	addi	r18,r18,-128
   2264c:	0038e706 	br	209ec <___vfprintf_internal_r+0x170>
   22650:	80a0703a 	and	r16,r16,r2
   22654:	803fa61e 	bne	r16,zero,224f0 <___vfprintf_internal_r+0x1c74>
   22658:	d8812b17 	ldw	r2,1196(sp)
   2265c:	d8812815 	stw	r2,1184(sp)
   22660:	103e9d0e 	bge	r2,zero,220d8 <___vfprintf_internal_r+0x185c>
   22664:	003fa706 	br	22504 <___vfprintf_internal_r+0x1c88>
   22668:	00800084 	movi	r2,2
   2266c:	1529c83a 	sub	r20,r2,r20
   22670:	003fbf06 	br	22570 <___vfprintf_internal_r+0x1cf4>
   22674:	00800b44 	movi	r2,45
   22678:	0529c83a 	sub	r20,zero,r20
   2267c:	d8812005 	stb	r2,1152(sp)
   22680:	003f8c06 	br	224b4 <___vfprintf_internal_r+0x1c38>
   22684:	008011c4 	movi	r2,71
   22688:	90be6926 	beq	r18,r2,22030 <___vfprintf_internal_r+0x17b4>
   2268c:	003e6a06 	br	22038 <___vfprintf_internal_r+0x17bc>
   22690:	00bfffc4 	movi	r2,-1
   22694:	d8812c15 	stw	r2,1200(sp)
   22698:	0039ad06 	br	20d50 <___vfprintf_internal_r+0x4d4>
   2269c:	1007883a 	mov	r3,r2
   226a0:	003e7906 	br	22088 <___vfprintf_internal_r+0x180c>
   226a4:	e000021e 	bne	fp,zero,226b0 <___vfprintf_internal_r+0x1e34>
   226a8:	8400004c 	andi	r16,r16,1
   226ac:	80000e26 	beq	r16,zero,226e8 <___vfprintf_internal_r+0x1e6c>
   226b0:	e7000084 	addi	fp,fp,2
   226b4:	df012b15 	stw	fp,1196(sp)
   226b8:	df012815 	stw	fp,1184(sp)
   226bc:	e03e860e 	bge	fp,zero,220d8 <___vfprintf_internal_r+0x185c>
   226c0:	003f9006 	br	22504 <___vfprintf_internal_r+0x1c88>
   226c4:	94803fcc 	andi	r18,r18,255
   226c8:	9480201c 	xori	r18,r18,128
   226cc:	00ffffc4 	movi	r3,-1
   226d0:	94bfe004 	addi	r18,r18,-128
   226d4:	0038c506 	br	209ec <___vfprintf_internal_r+0x170>
   226d8:	d8c12044 	addi	r3,sp,1153
   226dc:	003f7d06 	br	224d4 <___vfprintf_internal_r+0x1c58>
   226e0:	dd012417 	ldw	r20,1168(sp)
   226e4:	003f6d06 	br	2249c <___vfprintf_internal_r+0x1c20>
   226e8:	00c00044 	movi	r3,1
   226ec:	d8c12815 	stw	r3,1184(sp)
   226f0:	d8c12b15 	stw	r3,1196(sp)
   226f4:	003e7806 	br	220d8 <___vfprintf_internal_r+0x185c>

000226f8 <__vfprintf_internal>:
   226f8:	008001f4 	movhi	r2,7
   226fc:	10b96e04 	addi	r2,r2,-6728
   22700:	2007883a 	mov	r3,r4
   22704:	11000017 	ldw	r4,0(r2)
   22708:	2805883a 	mov	r2,r5
   2270c:	300f883a 	mov	r7,r6
   22710:	180b883a 	mov	r5,r3
   22714:	100d883a 	mov	r6,r2
   22718:	002087c1 	jmpi	2087c <___vfprintf_internal_r>

0002271c <__swsetup_r>:
   2271c:	008001f4 	movhi	r2,7
   22720:	10b96e04 	addi	r2,r2,-6728
   22724:	10800017 	ldw	r2,0(r2)
   22728:	defffd04 	addi	sp,sp,-12
   2272c:	dc400115 	stw	r17,4(sp)
   22730:	dc000015 	stw	r16,0(sp)
   22734:	dfc00215 	stw	ra,8(sp)
   22738:	2023883a 	mov	r17,r4
   2273c:	2821883a 	mov	r16,r5
   22740:	10000226 	beq	r2,zero,2274c <__swsetup_r+0x30>
   22744:	10c00e17 	ldw	r3,56(r2)
   22748:	18003d26 	beq	r3,zero,22840 <__swsetup_r+0x124>
   2274c:	8080030b 	ldhu	r2,12(r16)
   22750:	10c0020c 	andi	r3,r2,8
   22754:	18ffffcc 	andi	r3,r3,65535
   22758:	18e0001c 	xori	r3,r3,32768
   2275c:	18e00004 	addi	r3,r3,-32768
   22760:	18001226 	beq	r3,zero,227ac <__swsetup_r+0x90>
   22764:	80c00417 	ldw	r3,16(r16)
   22768:	18001f26 	beq	r3,zero,227e8 <__swsetup_r+0xcc>
   2276c:	1100004c 	andi	r4,r2,1
   22770:	2000261e 	bne	r4,zero,2280c <__swsetup_r+0xf0>
   22774:	1080008c 	andi	r2,r2,2
   22778:	10bfffcc 	andi	r2,r2,65535
   2277c:	10a0001c 	xori	r2,r2,32768
   22780:	10a00004 	addi	r2,r2,-32768
   22784:	1000311e 	bne	r2,zero,2284c <__swsetup_r+0x130>
   22788:	80800517 	ldw	r2,20(r16)
   2278c:	80800215 	stw	r2,8(r16)
   22790:	18002326 	beq	r3,zero,22820 <__swsetup_r+0x104>
   22794:	0005883a 	mov	r2,zero
   22798:	dfc00217 	ldw	ra,8(sp)
   2279c:	dc400117 	ldw	r17,4(sp)
   227a0:	dc000017 	ldw	r16,0(sp)
   227a4:	dec00304 	addi	sp,sp,12
   227a8:	f800283a 	ret
   227ac:	10c0040c 	andi	r3,r2,16
   227b0:	18ffffcc 	andi	r3,r3,65535
   227b4:	18e0001c 	xori	r3,r3,32768
   227b8:	18e00004 	addi	r3,r3,-32768
   227bc:	18001e26 	beq	r3,zero,22838 <__swsetup_r+0x11c>
   227c0:	10c0010c 	andi	r3,r2,4
   227c4:	18ffffcc 	andi	r3,r3,65535
   227c8:	18e0001c 	xori	r3,r3,32768
   227cc:	18e00004 	addi	r3,r3,-32768
   227d0:	1800211e 	bne	r3,zero,22858 <__swsetup_r+0x13c>
   227d4:	80c00417 	ldw	r3,16(r16)
   227d8:	11400214 	ori	r5,r2,8
   227dc:	8140030d 	sth	r5,12(r16)
   227e0:	2805883a 	mov	r2,r5
   227e4:	183fe11e 	bne	r3,zero,2276c <__swsetup_r+0x50>
   227e8:	1140a00c 	andi	r5,r2,640
   227ec:	01008004 	movi	r4,512
   227f0:	293fde26 	beq	r5,r4,2276c <__swsetup_r+0x50>
   227f4:	8809883a 	mov	r4,r17
   227f8:	800b883a 	mov	r5,r16
   227fc:	00251180 	call	25118 <__smakebuf_r>
   22800:	8080030b 	ldhu	r2,12(r16)
   22804:	80c00417 	ldw	r3,16(r16)
   22808:	003fd806 	br	2276c <__swsetup_r+0x50>
   2280c:	80800517 	ldw	r2,20(r16)
   22810:	80000215 	stw	zero,8(r16)
   22814:	0085c83a 	sub	r2,zero,r2
   22818:	80800615 	stw	r2,24(r16)
   2281c:	183fdd1e 	bne	r3,zero,22794 <__swsetup_r+0x78>
   22820:	8080030b 	ldhu	r2,12(r16)
   22824:	1080200c 	andi	r2,r2,128
   22828:	10bfffcc 	andi	r2,r2,65535
   2282c:	10a0001c 	xori	r2,r2,32768
   22830:	10a00004 	addi	r2,r2,-32768
   22834:	103fd826 	beq	r2,zero,22798 <__swsetup_r+0x7c>
   22838:	00bfffc4 	movi	r2,-1
   2283c:	003fd606 	br	22798 <__swsetup_r+0x7c>
   22840:	1009883a 	mov	r4,r2
   22844:	00243a40 	call	243a4 <__sinit>
   22848:	003fc006 	br	2274c <__swsetup_r+0x30>
   2284c:	0005883a 	mov	r2,zero
   22850:	80800215 	stw	r2,8(r16)
   22854:	003fce06 	br	22790 <__swsetup_r+0x74>
   22858:	81400c17 	ldw	r5,48(r16)
   2285c:	28000626 	beq	r5,zero,22878 <__swsetup_r+0x15c>
   22860:	80c01004 	addi	r3,r16,64
   22864:	28c00326 	beq	r5,r3,22874 <__swsetup_r+0x158>
   22868:	8809883a 	mov	r4,r17
   2286c:	00247280 	call	24728 <_free_r>
   22870:	8080030b 	ldhu	r2,12(r16)
   22874:	80000c15 	stw	zero,48(r16)
   22878:	80c00417 	ldw	r3,16(r16)
   2287c:	013ff6c4 	movi	r4,-37
   22880:	2084703a 	and	r2,r4,r2
   22884:	80000115 	stw	zero,4(r16)
   22888:	80c00015 	stw	r3,0(r16)
   2288c:	003fd206 	br	227d8 <__swsetup_r+0xbc>

00022890 <quorem>:
   22890:	defff204 	addi	sp,sp,-56
   22894:	dd000815 	stw	r20,32(sp)
   22898:	20800417 	ldw	r2,16(r4)
   2289c:	2d000417 	ldw	r20,16(r5)
   228a0:	dcc00715 	stw	r19,28(sp)
   228a4:	dfc00d15 	stw	ra,52(sp)
   228a8:	df000c15 	stw	fp,48(sp)
   228ac:	ddc00b15 	stw	r23,44(sp)
   228b0:	dd800a15 	stw	r22,40(sp)
   228b4:	dd400915 	stw	r21,36(sp)
   228b8:	dc800615 	stw	r18,24(sp)
   228bc:	dc400515 	stw	r17,20(sp)
   228c0:	dc000415 	stw	r16,16(sp)
   228c4:	d9400015 	stw	r5,0(sp)
   228c8:	2027883a 	mov	r19,r4
   228cc:	15007d16 	blt	r2,r20,22ac4 <quorem+0x234>
   228d0:	a0800104 	addi	r2,r20,4
   228d4:	1085883a 	add	r2,r2,r2
   228d8:	1085883a 	add	r2,r2,r2
   228dc:	28ad883a 	add	r22,r5,r2
   228e0:	2085883a 	add	r2,r4,r2
   228e4:	10800017 	ldw	r2,0(r2)
   228e8:	b1400017 	ldw	r5,0(r22)
   228ec:	a53fffc4 	addi	r20,r20,-1
   228f0:	1009883a 	mov	r4,r2
   228f4:	29400044 	addi	r5,r5,1
   228f8:	d8800115 	stw	r2,4(sp)
   228fc:	00297440 	call	29744 <__udivsi3>
   22900:	1025883a 	mov	r18,r2
   22904:	d8800017 	ldw	r2,0(sp)
   22908:	9f000504 	addi	fp,r19,20
   2290c:	14000504 	addi	r16,r2,20
   22910:	90003626 	beq	r18,zero,229ec <quorem+0x15c>
   22914:	802b883a 	mov	r21,r16
   22918:	e023883a 	mov	r17,fp
   2291c:	0007883a 	mov	r3,zero
   22920:	002f883a 	mov	r23,zero
   22924:	a9800017 	ldw	r6,0(r21)
   22928:	900b883a 	mov	r5,r18
   2292c:	d8c00315 	stw	r3,12(sp)
   22930:	313fffcc 	andi	r4,r6,65535
   22934:	d9800215 	stw	r6,8(sp)
   22938:	00297540 	call	29754 <__mulsi3>
   2293c:	d9800217 	ldw	r6,8(sp)
   22940:	d8c00317 	ldw	r3,12(sp)
   22944:	900b883a 	mov	r5,r18
   22948:	3008d43a 	srli	r4,r6,16
   2294c:	1887883a 	add	r3,r3,r2
   22950:	d8c00315 	stw	r3,12(sp)
   22954:	00297540 	call	29754 <__mulsi3>
   22958:	89400017 	ldw	r5,0(r17)
   2295c:	d8c00317 	ldw	r3,12(sp)
   22960:	ad400104 	addi	r21,r21,4
   22964:	293fffcc 	andi	r4,r5,65535
   22968:	1810d43a 	srli	r8,r3,16
   2296c:	25c9883a 	add	r4,r4,r23
   22970:	18ffffcc 	andi	r3,r3,65535
   22974:	20c9c83a 	sub	r4,r4,r3
   22978:	280cd43a 	srli	r6,r5,16
   2297c:	4085883a 	add	r2,r8,r2
   22980:	2007d43a 	srai	r3,r4,16
   22984:	117fffcc 	andi	r5,r2,65535
   22988:	314bc83a 	sub	r5,r6,r5
   2298c:	28cb883a 	add	r5,r5,r3
   22990:	8940008d 	sth	r5,2(r17)
   22994:	8900000d 	sth	r4,0(r17)
   22998:	1006d43a 	srli	r3,r2,16
   2299c:	282fd43a 	srai	r23,r5,16
   229a0:	8c400104 	addi	r17,r17,4
   229a4:	b57fdf2e 	bgeu	r22,r21,22924 <quorem+0x94>
   229a8:	d8c00117 	ldw	r3,4(sp)
   229ac:	18000f1e 	bne	r3,zero,229ec <quorem+0x15c>
   229b0:	a0800144 	addi	r2,r20,5
   229b4:	1085883a 	add	r2,r2,r2
   229b8:	1085883a 	add	r2,r2,r2
   229bc:	9887883a 	add	r3,r19,r2
   229c0:	18bfff04 	addi	r2,r3,-4
   229c4:	e080082e 	bgeu	fp,r2,229e8 <quorem+0x158>
   229c8:	18ffff17 	ldw	r3,-4(r3)
   229cc:	18000326 	beq	r3,zero,229dc <quorem+0x14c>
   229d0:	00000506 	br	229e8 <quorem+0x158>
   229d4:	10c00017 	ldw	r3,0(r2)
   229d8:	1800031e 	bne	r3,zero,229e8 <quorem+0x158>
   229dc:	10bfff04 	addi	r2,r2,-4
   229e0:	a53fffc4 	addi	r20,r20,-1
   229e4:	e0bffb36 	bltu	fp,r2,229d4 <quorem+0x144>
   229e8:	9d000415 	stw	r20,16(r19)
   229ec:	d9400017 	ldw	r5,0(sp)
   229f0:	9809883a 	mov	r4,r19
   229f4:	00268300 	call	26830 <__mcmp>
   229f8:	10002516 	blt	r2,zero,22a90 <quorem+0x200>
   229fc:	94800044 	addi	r18,r18,1
   22a00:	e007883a 	mov	r3,fp
   22a04:	000d883a 	mov	r6,zero
   22a08:	18800017 	ldw	r2,0(r3)
   22a0c:	82000017 	ldw	r8,0(r16)
   22a10:	84000104 	addi	r16,r16,4
   22a14:	11ffffcc 	andi	r7,r2,65535
   22a18:	413fffcc 	andi	r4,r8,65535
   22a1c:	398d883a 	add	r6,r7,r6
   22a20:	310fc83a 	sub	r7,r6,r4
   22a24:	4010d43a 	srli	r8,r8,16
   22a28:	100cd43a 	srli	r6,r2,16
   22a2c:	3809d43a 	srai	r4,r7,16
   22a30:	19c0000d 	sth	r7,0(r3)
   22a34:	320dc83a 	sub	r6,r6,r8
   22a38:	310d883a 	add	r6,r6,r4
   22a3c:	1980008d 	sth	r6,2(r3)
   22a40:	300dd43a 	srai	r6,r6,16
   22a44:	18c00104 	addi	r3,r3,4
   22a48:	b43fef2e 	bgeu	r22,r16,22a08 <quorem+0x178>
   22a4c:	a0800144 	addi	r2,r20,5
   22a50:	1085883a 	add	r2,r2,r2
   22a54:	1085883a 	add	r2,r2,r2
   22a58:	9885883a 	add	r2,r19,r2
   22a5c:	10c00017 	ldw	r3,0(r2)
   22a60:	18000b1e 	bne	r3,zero,22a90 <quorem+0x200>
   22a64:	10ffff04 	addi	r3,r2,-4
   22a68:	e0c0082e 	bgeu	fp,r3,22a8c <quorem+0x1fc>
   22a6c:	10bfff17 	ldw	r2,-4(r2)
   22a70:	10000326 	beq	r2,zero,22a80 <quorem+0x1f0>
   22a74:	00000506 	br	22a8c <quorem+0x1fc>
   22a78:	18800017 	ldw	r2,0(r3)
   22a7c:	1000031e 	bne	r2,zero,22a8c <quorem+0x1fc>
   22a80:	18ffff04 	addi	r3,r3,-4
   22a84:	a53fffc4 	addi	r20,r20,-1
   22a88:	e0fffb36 	bltu	fp,r3,22a78 <quorem+0x1e8>
   22a8c:	9d000415 	stw	r20,16(r19)
   22a90:	9005883a 	mov	r2,r18
   22a94:	dfc00d17 	ldw	ra,52(sp)
   22a98:	df000c17 	ldw	fp,48(sp)
   22a9c:	ddc00b17 	ldw	r23,44(sp)
   22aa0:	dd800a17 	ldw	r22,40(sp)
   22aa4:	dd400917 	ldw	r21,36(sp)
   22aa8:	dd000817 	ldw	r20,32(sp)
   22aac:	dcc00717 	ldw	r19,28(sp)
   22ab0:	dc800617 	ldw	r18,24(sp)
   22ab4:	dc400517 	ldw	r17,20(sp)
   22ab8:	dc000417 	ldw	r16,16(sp)
   22abc:	dec00e04 	addi	sp,sp,56
   22ac0:	f800283a 	ret
   22ac4:	0005883a 	mov	r2,zero
   22ac8:	003ff206 	br	22a94 <quorem+0x204>

00022acc <_dtoa_r>:
   22acc:	20801017 	ldw	r2,64(r4)
   22ad0:	deffdf04 	addi	sp,sp,-132
   22ad4:	dcc01a15 	stw	r19,104(sp)
   22ad8:	dc801915 	stw	r18,100(sp)
   22adc:	dc401815 	stw	r17,96(sp)
   22ae0:	dc001715 	stw	r16,92(sp)
   22ae4:	dfc02015 	stw	ra,128(sp)
   22ae8:	df001f15 	stw	fp,124(sp)
   22aec:	ddc01e15 	stw	r23,120(sp)
   22af0:	dd801d15 	stw	r22,116(sp)
   22af4:	dd401c15 	stw	r21,112(sp)
   22af8:	dd001b15 	stw	r20,108(sp)
   22afc:	d9400315 	stw	r5,12(sp)
   22b00:	d9c00415 	stw	r7,16(sp)
   22b04:	2021883a 	mov	r16,r4
   22b08:	3025883a 	mov	r18,r6
   22b0c:	dcc02317 	ldw	r19,140(sp)
   22b10:	3023883a 	mov	r17,r6
   22b14:	10000826 	beq	r2,zero,22b38 <_dtoa_r+0x6c>
   22b18:	20c01117 	ldw	r3,68(r4)
   22b1c:	01800044 	movi	r6,1
   22b20:	100b883a 	mov	r5,r2
   22b24:	30cc983a 	sll	r6,r6,r3
   22b28:	10c00115 	stw	r3,4(r2)
   22b2c:	11800215 	stw	r6,8(r2)
   22b30:	0025f8c0 	call	25f8c <_Bfree>
   22b34:	80001015 	stw	zero,64(r16)
   22b38:	90002f16 	blt	r18,zero,22bf8 <_dtoa_r+0x12c>
   22b3c:	98000015 	stw	zero,0(r19)
   22b40:	90dffc2c 	andhi	r3,r18,32752
   22b44:	009ffc34 	movhi	r2,32752
   22b48:	18801c26 	beq	r3,r2,22bbc <_dtoa_r+0xf0>
   22b4c:	d9000317 	ldw	r4,12(sp)
   22b50:	880b883a 	mov	r5,r17
   22b54:	000d883a 	mov	r6,zero
   22b58:	000f883a 	mov	r7,zero
   22b5c:	00291840 	call	29184 <__eqdf2>
   22b60:	10002c1e 	bne	r2,zero,22c14 <_dtoa_r+0x148>
   22b64:	d9002217 	ldw	r4,136(sp)
   22b68:	d9c02417 	ldw	r7,144(sp)
   22b6c:	00800044 	movi	r2,1
   22b70:	20800015 	stw	r2,0(r4)
   22b74:	38019426 	beq	r7,zero,231c8 <_dtoa_r+0x6fc>
   22b78:	008001f4 	movhi	r2,7
   22b7c:	10b22d44 	addi	r2,r2,-14155
   22b80:	38800015 	stw	r2,0(r7)
   22b84:	15ffffc4 	addi	r23,r2,-1
   22b88:	b805883a 	mov	r2,r23
   22b8c:	dfc02017 	ldw	ra,128(sp)
   22b90:	df001f17 	ldw	fp,124(sp)
   22b94:	ddc01e17 	ldw	r23,120(sp)
   22b98:	dd801d17 	ldw	r22,116(sp)
   22b9c:	dd401c17 	ldw	r21,112(sp)
   22ba0:	dd001b17 	ldw	r20,108(sp)
   22ba4:	dcc01a17 	ldw	r19,104(sp)
   22ba8:	dc801917 	ldw	r18,100(sp)
   22bac:	dc401817 	ldw	r17,96(sp)
   22bb0:	dc001717 	ldw	r16,92(sp)
   22bb4:	dec02104 	addi	sp,sp,132
   22bb8:	f800283a 	ret
   22bbc:	d8c02217 	ldw	r3,136(sp)
   22bc0:	d9000317 	ldw	r4,12(sp)
   22bc4:	0089c3c4 	movi	r2,9999
   22bc8:	18800015 	stw	r2,0(r3)
   22bcc:	20016c26 	beq	r4,zero,23180 <_dtoa_r+0x6b4>
   22bd0:	05c001f4 	movhi	r23,7
   22bd4:	bdf23904 	addi	r23,r23,-14108
   22bd8:	d9c02417 	ldw	r7,144(sp)
   22bdc:	383fea26 	beq	r7,zero,22b88 <_dtoa_r+0xbc>
   22be0:	b88000c7 	ldb	r2,3(r23)
   22be4:	10016d1e 	bne	r2,zero,2319c <_dtoa_r+0x6d0>
   22be8:	b88000c4 	addi	r2,r23,3
   22bec:	d8c02417 	ldw	r3,144(sp)
   22bf0:	18800015 	stw	r2,0(r3)
   22bf4:	003fe406 	br	22b88 <_dtoa_r+0xbc>
   22bf8:	04600034 	movhi	r17,32768
   22bfc:	8c7fffc4 	addi	r17,r17,-1
   22c00:	9462703a 	and	r17,r18,r17
   22c04:	00800044 	movi	r2,1
   22c08:	98800015 	stw	r2,0(r19)
   22c0c:	8825883a 	mov	r18,r17
   22c10:	003fcb06 	br	22b40 <_dtoa_r+0x74>
   22c14:	d9400317 	ldw	r5,12(sp)
   22c18:	9028d53a 	srli	r20,r18,20
   22c1c:	d8800204 	addi	r2,sp,8
   22c20:	d8800015 	stw	r2,0(sp)
   22c24:	8009883a 	mov	r4,r16
   22c28:	880d883a 	mov	r6,r17
   22c2c:	d9c00104 	addi	r7,sp,4
   22c30:	0026bd80 	call	26bd8 <__d2b>
   22c34:	a501ffcc 	andi	r20,r20,2047
   22c38:	1039883a 	mov	fp,r2
   22c3c:	a001591e 	bne	r20,zero,231a4 <_dtoa_r+0x6d8>
   22c40:	dd400217 	ldw	r21,8(sp)
   22c44:	dd000117 	ldw	r20,4(sp)
   22c48:	00befbc4 	movi	r2,-1041
   22c4c:	ad29883a 	add	r20,r21,r20
   22c50:	a082d216 	blt	r20,r2,2379c <_dtoa_r+0xcd0>
   22c54:	d8c00317 	ldw	r3,12(sp)
   22c58:	013f0384 	movi	r4,-1010
   22c5c:	2509c83a 	sub	r4,r4,r20
   22c60:	a0810484 	addi	r2,r20,1042
   22c64:	9124983a 	sll	r18,r18,r4
   22c68:	1884d83a 	srl	r2,r3,r2
   22c6c:	9088b03a 	or	r4,r18,r2
   22c70:	00295080 	call	29508 <__floatunsidf>
   22c74:	1009883a 	mov	r4,r2
   22c78:	017f8434 	movhi	r5,65040
   22c7c:	00800044 	movi	r2,1
   22c80:	194b883a 	add	r5,r3,r5
   22c84:	a53fffc4 	addi	r20,r20,-1
   22c88:	d8800f15 	stw	r2,60(sp)
   22c8c:	000d883a 	mov	r6,zero
   22c90:	01cffe34 	movhi	r7,16376
   22c94:	0028c8c0 	call	28c8c <__subdf3>
   22c98:	1009883a 	mov	r4,r2
   22c9c:	180b883a 	mov	r5,r3
   22ca0:	0198dbf4 	movhi	r6,25455
   22ca4:	3190d844 	addi	r6,r6,17249
   22ca8:	01cff4f4 	movhi	r7,16339
   22cac:	39e1e9c4 	addi	r7,r7,-30809
   22cb0:	0028cec0 	call	28cec <__muldf3>
   22cb4:	180b883a 	mov	r5,r3
   22cb8:	01a2d874 	movhi	r6,35681
   22cbc:	31b22cc4 	addi	r6,r6,-14157
   22cc0:	01cff1f4 	movhi	r7,16327
   22cc4:	39e28a04 	addi	r7,r7,-30168
   22cc8:	1009883a 	mov	r4,r2
   22ccc:	0028c380 	call	28c38 <__adddf3>
   22cd0:	a009883a 	mov	r4,r20
   22cd4:	1027883a 	mov	r19,r2
   22cd8:	1825883a 	mov	r18,r3
   22cdc:	00293600 	call	29360 <__floatsidf>
   22ce0:	1009883a 	mov	r4,r2
   22ce4:	180b883a 	mov	r5,r3
   22ce8:	019427f4 	movhi	r6,20639
   22cec:	319e7ec4 	addi	r6,r6,31227
   22cf0:	01cff4f4 	movhi	r7,16339
   22cf4:	39d104c4 	addi	r7,r7,17427
   22cf8:	0028cec0 	call	28cec <__muldf3>
   22cfc:	9809883a 	mov	r4,r19
   22d00:	900b883a 	mov	r5,r18
   22d04:	100d883a 	mov	r6,r2
   22d08:	180f883a 	mov	r7,r3
   22d0c:	0028c380 	call	28c38 <__adddf3>
   22d10:	1009883a 	mov	r4,r2
   22d14:	180b883a 	mov	r5,r3
   22d18:	1027883a 	mov	r19,r2
   22d1c:	1825883a 	mov	r18,r3
   22d20:	00294340 	call	29434 <__fixdfsi>
   22d24:	9809883a 	mov	r4,r19
   22d28:	900b883a 	mov	r5,r18
   22d2c:	000d883a 	mov	r6,zero
   22d30:	000f883a 	mov	r7,zero
   22d34:	d8800615 	stw	r2,24(sp)
   22d38:	00293040 	call	29304 <__ltdf2>
   22d3c:	10027e16 	blt	r2,zero,23738 <_dtoa_r+0xc6c>
   22d40:	d8c00617 	ldw	r3,24(sp)
   22d44:	00800584 	movi	r2,22
   22d48:	10c26c36 	bltu	r2,r3,236fc <_dtoa_r+0xc30>
   22d4c:	180490fa 	slli	r2,r3,3
   22d50:	00c001f4 	movhi	r3,7
   22d54:	18f25f04 	addi	r3,r3,-13956
   22d58:	d9800317 	ldw	r6,12(sp)
   22d5c:	1885883a 	add	r2,r3,r2
   22d60:	11000017 	ldw	r4,0(r2)
   22d64:	11400117 	ldw	r5,4(r2)
   22d68:	880f883a 	mov	r7,r17
   22d6c:	002923c0 	call	2923c <__gtdf2>
   22d70:	00828f0e 	bge	zero,r2,237b0 <_dtoa_r+0xce4>
   22d74:	d8800617 	ldw	r2,24(sp)
   22d78:	d8000d15 	stw	zero,52(sp)
   22d7c:	10bfffc4 	addi	r2,r2,-1
   22d80:	d8800615 	stw	r2,24(sp)
   22d84:	ad29c83a 	sub	r20,r21,r20
   22d88:	a53fffc4 	addi	r20,r20,-1
   22d8c:	a0026616 	blt	r20,zero,23728 <_dtoa_r+0xc5c>
   22d90:	dd000715 	stw	r20,28(sp)
   22d94:	d8000815 	stw	zero,32(sp)
   22d98:	d8800617 	ldw	r2,24(sp)
   22d9c:	10025a16 	blt	r2,zero,23708 <_dtoa_r+0xc3c>
   22da0:	d8c00717 	ldw	r3,28(sp)
   22da4:	d8800b15 	stw	r2,44(sp)
   22da8:	d8000a15 	stw	zero,40(sp)
   22dac:	1887883a 	add	r3,r3,r2
   22db0:	d8c00715 	stw	r3,28(sp)
   22db4:	d9c00417 	ldw	r7,16(sp)
   22db8:	00800244 	movi	r2,9
   22dbc:	11c10536 	bltu	r2,r7,231d4 <_dtoa_r+0x708>
   22dc0:	00800144 	movi	r2,5
   22dc4:	11c4c60e 	bge	r2,r7,240e0 <_dtoa_r+0x1614>
   22dc8:	39ffff04 	addi	r7,r7,-4
   22dcc:	d9c00415 	stw	r7,16(sp)
   22dd0:	0027883a 	mov	r19,zero
   22dd4:	d9c00417 	ldw	r7,16(sp)
   22dd8:	008000c4 	movi	r2,3
   22ddc:	3883a226 	beq	r7,r2,23c68 <_dtoa_r+0x119c>
   22de0:	11c2bc16 	blt	r2,r7,238d4 <_dtoa_r+0xe08>
   22de4:	00800084 	movi	r2,2
   22de8:	3880fb1e 	bne	r7,r2,231d8 <_dtoa_r+0x70c>
   22dec:	d8000c15 	stw	zero,48(sp)
   22df0:	d9002117 	ldw	r4,132(sp)
   22df4:	0103ae0e 	bge	zero,r4,23cb0 <_dtoa_r+0x11e4>
   22df8:	2025883a 	mov	r18,r4
   22dfc:	d9000e15 	stw	r4,56(sp)
   22e00:	d9000915 	stw	r4,36(sp)
   22e04:	80001115 	stw	zero,68(r16)
   22e08:	008005c4 	movi	r2,23
   22e0c:	1484b22e 	bgeu	r2,r18,240d8 <_dtoa_r+0x160c>
   22e10:	00c00044 	movi	r3,1
   22e14:	00800104 	movi	r2,4
   22e18:	1085883a 	add	r2,r2,r2
   22e1c:	11000504 	addi	r4,r2,20
   22e20:	180b883a 	mov	r5,r3
   22e24:	18c00044 	addi	r3,r3,1
   22e28:	913ffb2e 	bgeu	r18,r4,22e18 <_dtoa_r+0x34c>
   22e2c:	81401115 	stw	r5,68(r16)
   22e30:	8009883a 	mov	r4,r16
   22e34:	0025ee40 	call	25ee4 <_Balloc>
   22e38:	102f883a 	mov	r23,r2
   22e3c:	80801015 	stw	r2,64(r16)
   22e40:	00800384 	movi	r2,14
   22e44:	1480f036 	bltu	r2,r18,23208 <_dtoa_r+0x73c>
   22e48:	9800ef26 	beq	r19,zero,23208 <_dtoa_r+0x73c>
   22e4c:	d8800617 	ldw	r2,24(sp)
   22e50:	00839c0e 	bge	zero,r2,23cc4 <_dtoa_r+0x11f8>
   22e54:	d8c00617 	ldw	r3,24(sp)
   22e58:	108003cc 	andi	r2,r2,15
   22e5c:	100490fa 	slli	r2,r2,3
   22e60:	182bd13a 	srai	r21,r3,4
   22e64:	00c001f4 	movhi	r3,7
   22e68:	18f25f04 	addi	r3,r3,-13956
   22e6c:	1885883a 	add	r2,r3,r2
   22e70:	a8c0040c 	andi	r3,r21,16
   22e74:	12800017 	ldw	r10,0(r2)
   22e78:	15800117 	ldw	r22,4(r2)
   22e7c:	18038726 	beq	r3,zero,23c9c <_dtoa_r+0x11d0>
   22e80:	008001f4 	movhi	r2,7
   22e84:	10b25504 	addi	r2,r2,-13996
   22e88:	11800817 	ldw	r6,32(r2)
   22e8c:	11c00917 	ldw	r7,36(r2)
   22e90:	d9000317 	ldw	r4,12(sp)
   22e94:	880b883a 	mov	r5,r17
   22e98:	da801515 	stw	r10,84(sp)
   22e9c:	0028fd00 	call	28fd0 <__divdf3>
   22ea0:	da801517 	ldw	r10,84(sp)
   22ea4:	d8801015 	stw	r2,64(sp)
   22ea8:	1829883a 	mov	r20,r3
   22eac:	ad4003cc 	andi	r21,r21,15
   22eb0:	048000c4 	movi	r18,3
   22eb4:	a8001126 	beq	r21,zero,22efc <_dtoa_r+0x430>
   22eb8:	04c001f4 	movhi	r19,7
   22ebc:	9cf25504 	addi	r19,r19,-13996
   22ec0:	5005883a 	mov	r2,r10
   22ec4:	b007883a 	mov	r3,r22
   22ec8:	a980004c 	andi	r6,r21,1
   22ecc:	1009883a 	mov	r4,r2
   22ed0:	a82bd07a 	srai	r21,r21,1
   22ed4:	180b883a 	mov	r5,r3
   22ed8:	30000426 	beq	r6,zero,22eec <_dtoa_r+0x420>
   22edc:	99800017 	ldw	r6,0(r19)
   22ee0:	99c00117 	ldw	r7,4(r19)
   22ee4:	94800044 	addi	r18,r18,1
   22ee8:	0028cec0 	call	28cec <__muldf3>
   22eec:	9cc00204 	addi	r19,r19,8
   22ef0:	a83ff51e 	bne	r21,zero,22ec8 <_dtoa_r+0x3fc>
   22ef4:	1015883a 	mov	r10,r2
   22ef8:	182d883a 	mov	r22,r3
   22efc:	d9001017 	ldw	r4,64(sp)
   22f00:	a00b883a 	mov	r5,r20
   22f04:	500d883a 	mov	r6,r10
   22f08:	b00f883a 	mov	r7,r22
   22f0c:	0028fd00 	call	28fd0 <__divdf3>
   22f10:	1027883a 	mov	r19,r2
   22f14:	1829883a 	mov	r20,r3
   22f18:	d8c00d17 	ldw	r3,52(sp)
   22f1c:	18000626 	beq	r3,zero,22f38 <_dtoa_r+0x46c>
   22f20:	9809883a 	mov	r4,r19
   22f24:	a00b883a 	mov	r5,r20
   22f28:	000d883a 	mov	r6,zero
   22f2c:	01cffc34 	movhi	r7,16368
   22f30:	00293040 	call	29304 <__ltdf2>
   22f34:	10040e16 	blt	r2,zero,23f70 <_dtoa_r+0x14a4>
   22f38:	9009883a 	mov	r4,r18
   22f3c:	00293600 	call	29360 <__floatsidf>
   22f40:	1009883a 	mov	r4,r2
   22f44:	180b883a 	mov	r5,r3
   22f48:	980d883a 	mov	r6,r19
   22f4c:	a00f883a 	mov	r7,r20
   22f50:	0028cec0 	call	28cec <__muldf3>
   22f54:	1009883a 	mov	r4,r2
   22f58:	180b883a 	mov	r5,r3
   22f5c:	000d883a 	mov	r6,zero
   22f60:	01d00734 	movhi	r7,16412
   22f64:	0028c380 	call	28c38 <__adddf3>
   22f68:	057f3034 	movhi	r21,64704
   22f6c:	1d6b883a 	add	r21,r3,r21
   22f70:	d8c00917 	ldw	r3,36(sp)
   22f74:	1025883a 	mov	r18,r2
   22f78:	18031f26 	beq	r3,zero,23bf8 <_dtoa_r+0x112c>
   22f7c:	d8800617 	ldw	r2,24(sp)
   22f80:	dac00917 	ldw	r11,36(sp)
   22f84:	d8801315 	stw	r2,76(sp)
   22f88:	d8c00c17 	ldw	r3,48(sp)
   22f8c:	18039026 	beq	r3,zero,23dd0 <_dtoa_r+0x1304>
   22f90:	58bfffc4 	addi	r2,r11,-1
   22f94:	100490fa 	slli	r2,r2,3
   22f98:	00c001f4 	movhi	r3,7
   22f9c:	18f25f04 	addi	r3,r3,-13956
   22fa0:	0009883a 	mov	r4,zero
   22fa4:	1885883a 	add	r2,r3,r2
   22fa8:	11800017 	ldw	r6,0(r2)
   22fac:	11c00117 	ldw	r7,4(r2)
   22fb0:	014ff834 	movhi	r5,16352
   22fb4:	dac01615 	stw	r11,88(sp)
   22fb8:	0028fd00 	call	28fd0 <__divdf3>
   22fbc:	900d883a 	mov	r6,r18
   22fc0:	a80f883a 	mov	r7,r21
   22fc4:	1009883a 	mov	r4,r2
   22fc8:	180b883a 	mov	r5,r3
   22fcc:	0028c8c0 	call	28c8c <__subdf3>
   22fd0:	a00b883a 	mov	r5,r20
   22fd4:	9809883a 	mov	r4,r19
   22fd8:	182b883a 	mov	r21,r3
   22fdc:	d8801015 	stw	r2,64(sp)
   22fe0:	00294340 	call	29434 <__fixdfsi>
   22fe4:	1009883a 	mov	r4,r2
   22fe8:	d8801515 	stw	r2,84(sp)
   22fec:	00293600 	call	29360 <__floatsidf>
   22ff0:	9809883a 	mov	r4,r19
   22ff4:	a00b883a 	mov	r5,r20
   22ff8:	100d883a 	mov	r6,r2
   22ffc:	180f883a 	mov	r7,r3
   23000:	0028c8c0 	call	28c8c <__subdf3>
   23004:	da401517 	ldw	r9,84(sp)
   23008:	d9001017 	ldw	r4,64(sp)
   2300c:	a80b883a 	mov	r5,r21
   23010:	4d000c04 	addi	r20,r9,48
   23014:	bd000005 	stb	r20,0(r23)
   23018:	100d883a 	mov	r6,r2
   2301c:	180f883a 	mov	r7,r3
   23020:	bd800044 	addi	r22,r23,1
   23024:	1025883a 	mov	r18,r2
   23028:	1827883a 	mov	r19,r3
   2302c:	002923c0 	call	2923c <__gtdf2>
   23030:	00842216 	blt	zero,r2,240bc <_dtoa_r+0x15f0>
   23034:	0009883a 	mov	r4,zero
   23038:	014ffc34 	movhi	r5,16368
   2303c:	900d883a 	mov	r6,r18
   23040:	980f883a 	mov	r7,r19
   23044:	0028c8c0 	call	28c8c <__subdf3>
   23048:	d9001017 	ldw	r4,64(sp)
   2304c:	a80b883a 	mov	r5,r21
   23050:	100d883a 	mov	r6,r2
   23054:	180f883a 	mov	r7,r3
   23058:	002923c0 	call	2923c <__gtdf2>
   2305c:	dac01617 	ldw	r11,88(sp)
   23060:	00841316 	blt	zero,r2,240b0 <_dtoa_r+0x15e4>
   23064:	00800044 	movi	r2,1
   23068:	12c0670e 	bge	r2,r11,23208 <_dtoa_r+0x73c>
   2306c:	bad7883a 	add	r11,r23,r11
   23070:	df001115 	stw	fp,68(sp)
   23074:	dc401215 	stw	r17,72(sp)
   23078:	5839883a 	mov	fp,r11
   2307c:	dc401017 	ldw	r17,64(sp)
   23080:	00000806 	br	230a4 <_dtoa_r+0x5d8>
   23084:	0028c8c0 	call	28c8c <__subdf3>
   23088:	1009883a 	mov	r4,r2
   2308c:	180b883a 	mov	r5,r3
   23090:	880d883a 	mov	r6,r17
   23094:	a80f883a 	mov	r7,r21
   23098:	00293040 	call	29304 <__ltdf2>
   2309c:	1003ee16 	blt	r2,zero,24058 <_dtoa_r+0x158c>
   230a0:	b703f126 	beq	r22,fp,24068 <_dtoa_r+0x159c>
   230a4:	8809883a 	mov	r4,r17
   230a8:	a80b883a 	mov	r5,r21
   230ac:	000d883a 	mov	r6,zero
   230b0:	01d00934 	movhi	r7,16420
   230b4:	0028cec0 	call	28cec <__muldf3>
   230b8:	000d883a 	mov	r6,zero
   230bc:	01d00934 	movhi	r7,16420
   230c0:	9009883a 	mov	r4,r18
   230c4:	980b883a 	mov	r5,r19
   230c8:	1023883a 	mov	r17,r2
   230cc:	182b883a 	mov	r21,r3
   230d0:	0028cec0 	call	28cec <__muldf3>
   230d4:	180b883a 	mov	r5,r3
   230d8:	1009883a 	mov	r4,r2
   230dc:	1825883a 	mov	r18,r3
   230e0:	1027883a 	mov	r19,r2
   230e4:	00294340 	call	29434 <__fixdfsi>
   230e8:	1009883a 	mov	r4,r2
   230ec:	1029883a 	mov	r20,r2
   230f0:	00293600 	call	29360 <__floatsidf>
   230f4:	9809883a 	mov	r4,r19
   230f8:	900b883a 	mov	r5,r18
   230fc:	100d883a 	mov	r6,r2
   23100:	180f883a 	mov	r7,r3
   23104:	0028c8c0 	call	28c8c <__subdf3>
   23108:	a5000c04 	addi	r20,r20,48
   2310c:	b5000005 	stb	r20,0(r22)
   23110:	1009883a 	mov	r4,r2
   23114:	180b883a 	mov	r5,r3
   23118:	880d883a 	mov	r6,r17
   2311c:	a80f883a 	mov	r7,r21
   23120:	1025883a 	mov	r18,r2
   23124:	1827883a 	mov	r19,r3
   23128:	00293040 	call	29304 <__ltdf2>
   2312c:	b5800044 	addi	r22,r22,1
   23130:	0009883a 	mov	r4,zero
   23134:	014ffc34 	movhi	r5,16368
   23138:	900d883a 	mov	r6,r18
   2313c:	980f883a 	mov	r7,r19
   23140:	103fd00e 	bge	r2,zero,23084 <_dtoa_r+0x5b8>
   23144:	d9001317 	ldw	r4,76(sp)
   23148:	df001117 	ldw	fp,68(sp)
   2314c:	d9000615 	stw	r4,24(sp)
   23150:	8009883a 	mov	r4,r16
   23154:	e00b883a 	mov	r5,fp
   23158:	0025f8c0 	call	25f8c <_Bfree>
   2315c:	d9c00617 	ldw	r7,24(sp)
   23160:	d8c02217 	ldw	r3,136(sp)
   23164:	d9002417 	ldw	r4,144(sp)
   23168:	b0000005 	stb	zero,0(r22)
   2316c:	38800044 	addi	r2,r7,1
   23170:	18800015 	stw	r2,0(r3)
   23174:	203e8426 	beq	r4,zero,22b88 <_dtoa_r+0xbc>
   23178:	25800015 	stw	r22,0(r4)
   2317c:	003e8206 	br	22b88 <_dtoa_r+0xbc>
   23180:	00800434 	movhi	r2,16
   23184:	10bfffc4 	addi	r2,r2,-1
   23188:	90a4703a 	and	r18,r18,r2
   2318c:	903e901e 	bne	r18,zero,22bd0 <_dtoa_r+0x104>
   23190:	05c001f4 	movhi	r23,7
   23194:	bdf23604 	addi	r23,r23,-14120
   23198:	003e8f06 	br	22bd8 <_dtoa_r+0x10c>
   2319c:	b8800204 	addi	r2,r23,8
   231a0:	003e9206 	br	22bec <_dtoa_r+0x120>
   231a4:	01400434 	movhi	r5,16
   231a8:	297fffc4 	addi	r5,r5,-1
   231ac:	894a703a 	and	r5,r17,r5
   231b0:	d9000317 	ldw	r4,12(sp)
   231b4:	294ffc34 	orhi	r5,r5,16368
   231b8:	a53f0044 	addi	r20,r20,-1023
   231bc:	dd400217 	ldw	r21,8(sp)
   231c0:	d8000f15 	stw	zero,60(sp)
   231c4:	003eb106 	br	22c8c <_dtoa_r+0x1c0>
   231c8:	05c001f4 	movhi	r23,7
   231cc:	bdf22d04 	addi	r23,r23,-14156
   231d0:	003e6d06 	br	22b88 <_dtoa_r+0xbc>
   231d4:	d8000415 	stw	zero,16(sp)
   231d8:	80001115 	stw	zero,68(r16)
   231dc:	8009883a 	mov	r4,r16
   231e0:	000b883a 	mov	r5,zero
   231e4:	0025ee40 	call	25ee4 <_Balloc>
   231e8:	01ffffc4 	movi	r7,-1
   231ec:	102f883a 	mov	r23,r2
   231f0:	80801015 	stw	r2,64(r16)
   231f4:	00800044 	movi	r2,1
   231f8:	d9c00915 	stw	r7,36(sp)
   231fc:	d8002115 	stw	zero,132(sp)
   23200:	d9c00e15 	stw	r7,56(sp)
   23204:	d8800c15 	stw	r2,48(sp)
   23208:	d8800117 	ldw	r2,4(sp)
   2320c:	10008b16 	blt	r2,zero,2343c <_dtoa_r+0x970>
   23210:	d9000617 	ldw	r4,24(sp)
   23214:	00c00384 	movi	r3,14
   23218:	19008816 	blt	r3,r4,2343c <_dtoa_r+0x970>
   2321c:	200490fa 	slli	r2,r4,3
   23220:	d9c02117 	ldw	r7,132(sp)
   23224:	00c001f4 	movhi	r3,7
   23228:	18f25f04 	addi	r3,r3,-13956
   2322c:	1885883a 	add	r2,r3,r2
   23230:	14800017 	ldw	r18,0(r2)
   23234:	14c00117 	ldw	r19,4(r2)
   23238:	3801c916 	blt	r7,zero,23960 <_dtoa_r+0xe94>
   2323c:	d9000317 	ldw	r4,12(sp)
   23240:	900d883a 	mov	r6,r18
   23244:	980f883a 	mov	r7,r19
   23248:	880b883a 	mov	r5,r17
   2324c:	0028fd00 	call	28fd0 <__divdf3>
   23250:	180b883a 	mov	r5,r3
   23254:	1009883a 	mov	r4,r2
   23258:	00294340 	call	29434 <__fixdfsi>
   2325c:	1009883a 	mov	r4,r2
   23260:	102b883a 	mov	r21,r2
   23264:	00293600 	call	29360 <__floatsidf>
   23268:	1009883a 	mov	r4,r2
   2326c:	180b883a 	mov	r5,r3
   23270:	900d883a 	mov	r6,r18
   23274:	980f883a 	mov	r7,r19
   23278:	0028cec0 	call	28cec <__muldf3>
   2327c:	d9000317 	ldw	r4,12(sp)
   23280:	880b883a 	mov	r5,r17
   23284:	100d883a 	mov	r6,r2
   23288:	180f883a 	mov	r7,r3
   2328c:	0028c8c0 	call	28c8c <__subdf3>
   23290:	d9c00917 	ldw	r7,36(sp)
   23294:	1009883a 	mov	r4,r2
   23298:	a8800c04 	addi	r2,r21,48
   2329c:	b8800005 	stb	r2,0(r23)
   232a0:	01800044 	movi	r6,1
   232a4:	180b883a 	mov	r5,r3
   232a8:	2005883a 	mov	r2,r4
   232ac:	bd800044 	addi	r22,r23,1
   232b0:	39803726 	beq	r7,r6,23390 <_dtoa_r+0x8c4>
   232b4:	000d883a 	mov	r6,zero
   232b8:	01d00934 	movhi	r7,16420
   232bc:	0028cec0 	call	28cec <__muldf3>
   232c0:	1009883a 	mov	r4,r2
   232c4:	180b883a 	mov	r5,r3
   232c8:	000d883a 	mov	r6,zero
   232cc:	000f883a 	mov	r7,zero
   232d0:	1029883a 	mov	r20,r2
   232d4:	1823883a 	mov	r17,r3
   232d8:	00291840 	call	29184 <__eqdf2>
   232dc:	103f9c26 	beq	r2,zero,23150 <_dtoa_r+0x684>
   232e0:	dd400917 	ldw	r21,36(sp)
   232e4:	dc000415 	stw	r16,16(sp)
   232e8:	00000906 	br	23310 <_dtoa_r+0x844>
   232ec:	0028cec0 	call	28cec <__muldf3>
   232f0:	1009883a 	mov	r4,r2
   232f4:	180b883a 	mov	r5,r3
   232f8:	000d883a 	mov	r6,zero
   232fc:	000f883a 	mov	r7,zero
   23300:	1029883a 	mov	r20,r2
   23304:	1823883a 	mov	r17,r3
   23308:	00291840 	call	29184 <__eqdf2>
   2330c:	10022926 	beq	r2,zero,23bb4 <_dtoa_r+0x10e8>
   23310:	900d883a 	mov	r6,r18
   23314:	980f883a 	mov	r7,r19
   23318:	a009883a 	mov	r4,r20
   2331c:	880b883a 	mov	r5,r17
   23320:	0028fd00 	call	28fd0 <__divdf3>
   23324:	180b883a 	mov	r5,r3
   23328:	1009883a 	mov	r4,r2
   2332c:	00294340 	call	29434 <__fixdfsi>
   23330:	1009883a 	mov	r4,r2
   23334:	1021883a 	mov	r16,r2
   23338:	00293600 	call	29360 <__floatsidf>
   2333c:	1009883a 	mov	r4,r2
   23340:	180b883a 	mov	r5,r3
   23344:	900d883a 	mov	r6,r18
   23348:	980f883a 	mov	r7,r19
   2334c:	0028cec0 	call	28cec <__muldf3>
   23350:	a009883a 	mov	r4,r20
   23354:	880b883a 	mov	r5,r17
   23358:	100d883a 	mov	r6,r2
   2335c:	180f883a 	mov	r7,r3
   23360:	0028c8c0 	call	28c8c <__subdf3>
   23364:	82400c04 	addi	r9,r16,48
   23368:	b2400005 	stb	r9,0(r22)
   2336c:	b5800044 	addi	r22,r22,1
   23370:	b5d3c83a 	sub	r9,r22,r23
   23374:	000d883a 	mov	r6,zero
   23378:	01d00934 	movhi	r7,16420
   2337c:	1009883a 	mov	r4,r2
   23380:	180b883a 	mov	r5,r3
   23384:	aa7fd91e 	bne	r21,r9,232ec <_dtoa_r+0x820>
   23388:	802b883a 	mov	r21,r16
   2338c:	dc000417 	ldw	r16,16(sp)
   23390:	1009883a 	mov	r4,r2
   23394:	180b883a 	mov	r5,r3
   23398:	100d883a 	mov	r6,r2
   2339c:	180f883a 	mov	r7,r3
   233a0:	0028c380 	call	28c38 <__adddf3>
   233a4:	9009883a 	mov	r4,r18
   233a8:	980b883a 	mov	r5,r19
   233ac:	100d883a 	mov	r6,r2
   233b0:	180f883a 	mov	r7,r3
   233b4:	1023883a 	mov	r17,r2
   233b8:	1829883a 	mov	r20,r3
   233bc:	00293040 	call	29304 <__ltdf2>
   233c0:	10000816 	blt	r2,zero,233e4 <_dtoa_r+0x918>
   233c4:	9009883a 	mov	r4,r18
   233c8:	980b883a 	mov	r5,r19
   233cc:	880d883a 	mov	r6,r17
   233d0:	a00f883a 	mov	r7,r20
   233d4:	00291840 	call	29184 <__eqdf2>
   233d8:	103f5d1e 	bne	r2,zero,23150 <_dtoa_r+0x684>
   233dc:	ad40004c 	andi	r21,r21,1
   233e0:	a83f5b26 	beq	r21,zero,23150 <_dtoa_r+0x684>
   233e4:	b53fffc3 	ldbu	r20,-1(r22)
   233e8:	b0ffff84 	addi	r3,r22,-2
   233ec:	01400e44 	movi	r5,57
   233f0:	00000306 	br	23400 <_dtoa_r+0x934>
   233f4:	1d000003 	ldbu	r20,0(r3)
   233f8:	102d883a 	mov	r22,r2
   233fc:	18ffffc4 	addi	r3,r3,-1
   23400:	a1003fcc 	andi	r4,r20,255
   23404:	2100201c 	xori	r4,r4,128
   23408:	213fe004 	addi	r4,r4,-128
   2340c:	b0bfffc4 	addi	r2,r22,-1
   23410:	2142ca1e 	bne	r4,r5,23f3c <_dtoa_r+0x1470>
   23414:	b8bff71e 	bne	r23,r2,233f4 <_dtoa_r+0x928>
   23418:	d8800617 	ldw	r2,24(sp)
   2341c:	05000c44 	movi	r20,49
   23420:	10800044 	addi	r2,r2,1
   23424:	d8800615 	stw	r2,24(sp)
   23428:	00800c04 	movi	r2,48
   2342c:	b8800005 	stb	r2,0(r23)
   23430:	b805883a 	mov	r2,r23
   23434:	15000005 	stb	r20,0(r2)
   23438:	003f4506 	br	23150 <_dtoa_r+0x684>
   2343c:	d9c00c17 	ldw	r7,48(sp)
   23440:	3800c926 	beq	r7,zero,23768 <_dtoa_r+0xc9c>
   23444:	d9c00417 	ldw	r7,16(sp)
   23448:	00c00044 	movi	r3,1
   2344c:	19c16c0e 	bge	r3,r7,23a00 <_dtoa_r+0xf34>
   23450:	d9000917 	ldw	r4,36(sp)
   23454:	d9c00a17 	ldw	r7,40(sp)
   23458:	24ffffc4 	addi	r19,r4,-1
   2345c:	3cc20716 	blt	r7,r19,23c7c <_dtoa_r+0x11b0>
   23460:	3ce7c83a 	sub	r19,r7,r19
   23464:	d9c00917 	ldw	r7,36(sp)
   23468:	3802ae16 	blt	r7,zero,23f24 <_dtoa_r+0x1458>
   2346c:	dc800817 	ldw	r18,32(sp)
   23470:	d8800917 	ldw	r2,36(sp)
   23474:	d8c00817 	ldw	r3,32(sp)
   23478:	d9c00717 	ldw	r7,28(sp)
   2347c:	8009883a 	mov	r4,r16
   23480:	1887883a 	add	r3,r3,r2
   23484:	388f883a 	add	r7,r7,r2
   23488:	01400044 	movi	r5,1
   2348c:	d8c00815 	stw	r3,32(sp)
   23490:	d9c00715 	stw	r7,28(sp)
   23494:	00263140 	call	26314 <__i2b>
   23498:	102b883a 	mov	r21,r2
   2349c:	90000a26 	beq	r18,zero,234c8 <_dtoa_r+0x9fc>
   234a0:	d8800717 	ldw	r2,28(sp)
   234a4:	0080080e 	bge	zero,r2,234c8 <_dtoa_r+0x9fc>
   234a8:	90812b16 	blt	r18,r2,23958 <_dtoa_r+0xe8c>
   234ac:	d8c00817 	ldw	r3,32(sp)
   234b0:	d9000717 	ldw	r4,28(sp)
   234b4:	90a5c83a 	sub	r18,r18,r2
   234b8:	1887c83a 	sub	r3,r3,r2
   234bc:	2089c83a 	sub	r4,r4,r2
   234c0:	d8c00815 	stw	r3,32(sp)
   234c4:	d9000715 	stw	r4,28(sp)
   234c8:	d9c00a17 	ldw	r7,40(sp)
   234cc:	01c0140e 	bge	zero,r7,23520 <_dtoa_r+0xa54>
   234d0:	d8800c17 	ldw	r2,48(sp)
   234d4:	1001de26 	beq	r2,zero,23c50 <_dtoa_r+0x1184>
   234d8:	04c00e0e 	bge	zero,r19,23514 <_dtoa_r+0xa48>
   234dc:	a80b883a 	mov	r5,r21
   234e0:	8009883a 	mov	r4,r16
   234e4:	980d883a 	mov	r6,r19
   234e8:	00265a80 	call	265a8 <__pow5mult>
   234ec:	e00d883a 	mov	r6,fp
   234f0:	8009883a 	mov	r4,r16
   234f4:	100b883a 	mov	r5,r2
   234f8:	102b883a 	mov	r21,r2
   234fc:	00263500 	call	26350 <__multiply>
   23500:	1029883a 	mov	r20,r2
   23504:	e00b883a 	mov	r5,fp
   23508:	8009883a 	mov	r4,r16
   2350c:	0025f8c0 	call	25f8c <_Bfree>
   23510:	a039883a 	mov	fp,r20
   23514:	d8c00a17 	ldw	r3,40(sp)
   23518:	1ccdc83a 	sub	r6,r3,r19
   2351c:	3001291e 	bne	r6,zero,239c4 <_dtoa_r+0xef8>
   23520:	8009883a 	mov	r4,r16
   23524:	01400044 	movi	r5,1
   23528:	00263140 	call	26314 <__i2b>
   2352c:	d9000b17 	ldw	r4,44(sp)
   23530:	1029883a 	mov	r20,r2
   23534:	0100050e 	bge	zero,r4,2354c <_dtoa_r+0xa80>
   23538:	d9800b17 	ldw	r6,44(sp)
   2353c:	8009883a 	mov	r4,r16
   23540:	100b883a 	mov	r5,r2
   23544:	00265a80 	call	265a8 <__pow5mult>
   23548:	1029883a 	mov	r20,r2
   2354c:	d9c00417 	ldw	r7,16(sp)
   23550:	00800044 	movi	r2,1
   23554:	11c0f00e 	bge	r2,r7,23918 <_dtoa_r+0xe4c>
   23558:	0023883a 	mov	r17,zero
   2355c:	d8800b17 	ldw	r2,44(sp)
   23560:	1001741e 	bne	r2,zero,23b34 <_dtoa_r+0x1068>
   23564:	00800044 	movi	r2,1
   23568:	d8c00717 	ldw	r3,28(sp)
   2356c:	10c5883a 	add	r2,r2,r3
   23570:	108007cc 	andi	r2,r2,31
   23574:	10008026 	beq	r2,zero,23778 <_dtoa_r+0xcac>
   23578:	01000804 	movi	r4,32
   2357c:	2089c83a 	sub	r4,r4,r2
   23580:	00c00104 	movi	r3,4
   23584:	1902d00e 	bge	r3,r4,240c8 <_dtoa_r+0x15fc>
   23588:	d9000817 	ldw	r4,32(sp)
   2358c:	d9c00717 	ldw	r7,28(sp)
   23590:	00c00704 	movi	r3,28
   23594:	1885c83a 	sub	r2,r3,r2
   23598:	2089883a 	add	r4,r4,r2
   2359c:	388f883a 	add	r7,r7,r2
   235a0:	d9000815 	stw	r4,32(sp)
   235a4:	90a5883a 	add	r18,r18,r2
   235a8:	d9c00715 	stw	r7,28(sp)
   235ac:	d9c00817 	ldw	r7,32(sp)
   235b0:	01c0050e 	bge	zero,r7,235c8 <_dtoa_r+0xafc>
   235b4:	e00b883a 	mov	r5,fp
   235b8:	8009883a 	mov	r4,r16
   235bc:	380d883a 	mov	r6,r7
   235c0:	00266d40 	call	266d4 <__lshift>
   235c4:	1039883a 	mov	fp,r2
   235c8:	d8800717 	ldw	r2,28(sp)
   235cc:	0080050e 	bge	zero,r2,235e4 <_dtoa_r+0xb18>
   235d0:	a00b883a 	mov	r5,r20
   235d4:	8009883a 	mov	r4,r16
   235d8:	100d883a 	mov	r6,r2
   235dc:	00266d40 	call	266d4 <__lshift>
   235e0:	1029883a 	mov	r20,r2
   235e4:	d8c00d17 	ldw	r3,52(sp)
   235e8:	1801401e 	bne	r3,zero,23aec <_dtoa_r+0x1020>
   235ec:	d8800917 	ldw	r2,36(sp)
   235f0:	00815a0e 	bge	zero,r2,23b5c <_dtoa_r+0x1090>
   235f4:	d8c00c17 	ldw	r3,48(sp)
   235f8:	18006f1e 	bne	r3,zero,237b8 <_dtoa_r+0xcec>
   235fc:	b823883a 	mov	r17,r23
   23600:	dc800917 	ldw	r18,36(sp)
   23604:	00000206 	br	23610 <_dtoa_r+0xb44>
   23608:	0025fb40 	call	25fb4 <__multadd>
   2360c:	1039883a 	mov	fp,r2
   23610:	e009883a 	mov	r4,fp
   23614:	a00b883a 	mov	r5,r20
   23618:	00228900 	call	22890 <quorem>
   2361c:	10800c04 	addi	r2,r2,48
   23620:	88800005 	stb	r2,0(r17)
   23624:	8c400044 	addi	r17,r17,1
   23628:	8dc7c83a 	sub	r3,r17,r23
   2362c:	8009883a 	mov	r4,r16
   23630:	e00b883a 	mov	r5,fp
   23634:	01800284 	movi	r6,10
   23638:	000f883a 	mov	r7,zero
   2363c:	1cbff216 	blt	r3,r18,23608 <_dtoa_r+0xb3c>
   23640:	dd800917 	ldw	r22,36(sp)
   23644:	1007883a 	mov	r3,r2
   23648:	05823a0e 	bge	zero,r22,23f34 <_dtoa_r+0x1468>
   2364c:	bdad883a 	add	r22,r23,r22
   23650:	0023883a 	mov	r17,zero
   23654:	e00b883a 	mov	r5,fp
   23658:	01800044 	movi	r6,1
   2365c:	8009883a 	mov	r4,r16
   23660:	d8c01515 	stw	r3,84(sp)
   23664:	00266d40 	call	266d4 <__lshift>
   23668:	1009883a 	mov	r4,r2
   2366c:	a00b883a 	mov	r5,r20
   23670:	1039883a 	mov	fp,r2
   23674:	00268300 	call	26830 <__mcmp>
   23678:	d8c01517 	ldw	r3,84(sp)
   2367c:	0080d60e 	bge	zero,r2,239d8 <_dtoa_r+0xf0c>
   23680:	b13fffc3 	ldbu	r4,-1(r22)
   23684:	b0ffff84 	addi	r3,r22,-2
   23688:	01800e44 	movi	r6,57
   2368c:	00000306 	br	2369c <_dtoa_r+0xbd0>
   23690:	19000003 	ldbu	r4,0(r3)
   23694:	102d883a 	mov	r22,r2
   23698:	18ffffc4 	addi	r3,r3,-1
   2369c:	21403fcc 	andi	r5,r4,255
   236a0:	2940201c 	xori	r5,r5,128
   236a4:	297fe004 	addi	r5,r5,-128
   236a8:	b0bfffc4 	addi	r2,r22,-1
   236ac:	2981a71e 	bne	r5,r6,23d4c <_dtoa_r+0x1280>
   236b0:	b8bff71e 	bne	r23,r2,23690 <_dtoa_r+0xbc4>
   236b4:	d8800617 	ldw	r2,24(sp)
   236b8:	10800044 	addi	r2,r2,1
   236bc:	d8800615 	stw	r2,24(sp)
   236c0:	00800c44 	movi	r2,49
   236c4:	b8800005 	stb	r2,0(r23)
   236c8:	8009883a 	mov	r4,r16
   236cc:	a00b883a 	mov	r5,r20
   236d0:	0025f8c0 	call	25f8c <_Bfree>
   236d4:	a83e9e26 	beq	r21,zero,23150 <_dtoa_r+0x684>
   236d8:	88000426 	beq	r17,zero,236ec <_dtoa_r+0xc20>
   236dc:	8d400326 	beq	r17,r21,236ec <_dtoa_r+0xc20>
   236e0:	8009883a 	mov	r4,r16
   236e4:	880b883a 	mov	r5,r17
   236e8:	0025f8c0 	call	25f8c <_Bfree>
   236ec:	8009883a 	mov	r4,r16
   236f0:	a80b883a 	mov	r5,r21
   236f4:	0025f8c0 	call	25f8c <_Bfree>
   236f8:	003e9506 	br	23150 <_dtoa_r+0x684>
   236fc:	00c00044 	movi	r3,1
   23700:	d8c00d15 	stw	r3,52(sp)
   23704:	003d9f06 	br	22d84 <_dtoa_r+0x2b8>
   23708:	d9000817 	ldw	r4,32(sp)
   2370c:	d8800617 	ldw	r2,24(sp)
   23710:	d8000b15 	stw	zero,44(sp)
   23714:	2089c83a 	sub	r4,r4,r2
   23718:	0087c83a 	sub	r3,zero,r2
   2371c:	d9000815 	stw	r4,32(sp)
   23720:	d8c00a15 	stw	r3,40(sp)
   23724:	003da306 	br	22db4 <_dtoa_r+0x2e8>
   23728:	0529c83a 	sub	r20,zero,r20
   2372c:	dd000815 	stw	r20,32(sp)
   23730:	d8000715 	stw	zero,28(sp)
   23734:	003d9806 	br	22d98 <_dtoa_r+0x2cc>
   23738:	d9000617 	ldw	r4,24(sp)
   2373c:	00293600 	call	29360 <__floatsidf>
   23740:	1009883a 	mov	r4,r2
   23744:	180b883a 	mov	r5,r3
   23748:	980d883a 	mov	r6,r19
   2374c:	900f883a 	mov	r7,r18
   23750:	00291e00 	call	291e0 <__nedf2>
   23754:	103d7a26 	beq	r2,zero,22d40 <_dtoa_r+0x274>
   23758:	d8800617 	ldw	r2,24(sp)
   2375c:	10bfffc4 	addi	r2,r2,-1
   23760:	d8800615 	stw	r2,24(sp)
   23764:	003d7606 	br	22d40 <_dtoa_r+0x274>
   23768:	dcc00a17 	ldw	r19,40(sp)
   2376c:	dc800817 	ldw	r18,32(sp)
   23770:	002b883a 	mov	r21,zero
   23774:	003f4906 	br	2349c <_dtoa_r+0x9d0>
   23778:	00800704 	movi	r2,28
   2377c:	d8c00817 	ldw	r3,32(sp)
   23780:	d9000717 	ldw	r4,28(sp)
   23784:	90a5883a 	add	r18,r18,r2
   23788:	1887883a 	add	r3,r3,r2
   2378c:	2089883a 	add	r4,r4,r2
   23790:	d8c00815 	stw	r3,32(sp)
   23794:	d9000715 	stw	r4,28(sp)
   23798:	003f8406 	br	235ac <_dtoa_r+0xae0>
   2379c:	d9c00317 	ldw	r7,12(sp)
   237a0:	013efb84 	movi	r4,-1042
   237a4:	2509c83a 	sub	r4,r4,r20
   237a8:	3908983a 	sll	r4,r7,r4
   237ac:	003d3006 	br	22c70 <_dtoa_r+0x1a4>
   237b0:	d8000d15 	stw	zero,52(sp)
   237b4:	003d7306 	br	22d84 <_dtoa_r+0x2b8>
   237b8:	0480050e 	bge	zero,r18,237d0 <_dtoa_r+0xd04>
   237bc:	a80b883a 	mov	r5,r21
   237c0:	8009883a 	mov	r4,r16
   237c4:	900d883a 	mov	r6,r18
   237c8:	00266d40 	call	266d4 <__lshift>
   237cc:	102b883a 	mov	r21,r2
   237d0:	8801611e 	bne	r17,zero,23d58 <_dtoa_r+0x128c>
   237d4:	a827883a 	mov	r19,r21
   237d8:	d8c00317 	ldw	r3,12(sp)
   237dc:	d9000917 	ldw	r4,36(sp)
   237e0:	b8bfffc4 	addi	r2,r23,-1
   237e4:	18c0004c 	andi	r3,r3,1
   237e8:	1105883a 	add	r2,r2,r4
   237ec:	b825883a 	mov	r18,r23
   237f0:	d8800515 	stw	r2,20(sp)
   237f4:	a823883a 	mov	r17,r21
   237f8:	d8c00315 	stw	r3,12(sp)
   237fc:	ddc00715 	stw	r23,28(sp)
   23800:	e009883a 	mov	r4,fp
   23804:	a00b883a 	mov	r5,r20
   23808:	00228900 	call	22890 <quorem>
   2380c:	e009883a 	mov	r4,fp
   23810:	880b883a 	mov	r5,r17
   23814:	102d883a 	mov	r22,r2
   23818:	00268300 	call	26830 <__mcmp>
   2381c:	980d883a 	mov	r6,r19
   23820:	8009883a 	mov	r4,r16
   23824:	a00b883a 	mov	r5,r20
   23828:	102b883a 	mov	r21,r2
   2382c:	00268880 	call	26888 <__mdiff>
   23830:	100d883a 	mov	r6,r2
   23834:	10800317 	ldw	r2,12(r2)
   23838:	b5c00c04 	addi	r23,r22,48
   2383c:	10008c26 	beq	r2,zero,23a70 <_dtoa_r+0xfa4>
   23840:	8009883a 	mov	r4,r16
   23844:	300b883a 	mov	r5,r6
   23848:	0025f8c0 	call	25f8c <_Bfree>
   2384c:	00800044 	movi	r2,1
   23850:	a8007116 	blt	r21,zero,23a18 <_dtoa_r+0xf4c>
   23854:	a800041e 	bne	r21,zero,23868 <_dtoa_r+0xd9c>
   23858:	d9c00417 	ldw	r7,16(sp)
   2385c:	3800021e 	bne	r7,zero,23868 <_dtoa_r+0xd9c>
   23860:	d8c00317 	ldw	r3,12(sp)
   23864:	18006c26 	beq	r3,zero,23a18 <_dtoa_r+0xf4c>
   23868:	00814c16 	blt	zero,r2,23d9c <_dtoa_r+0x12d0>
   2386c:	d8c00517 	ldw	r3,20(sp)
   23870:	95400044 	addi	r21,r18,1
   23874:	95c00005 	stb	r23,0(r18)
   23878:	a82d883a 	mov	r22,r21
   2387c:	90c14d26 	beq	r18,r3,23db4 <_dtoa_r+0x12e8>
   23880:	e00b883a 	mov	r5,fp
   23884:	8009883a 	mov	r4,r16
   23888:	01800284 	movi	r6,10
   2388c:	000f883a 	mov	r7,zero
   23890:	0025fb40 	call	25fb4 <__multadd>
   23894:	1039883a 	mov	fp,r2
   23898:	8cc08b26 	beq	r17,r19,23ac8 <_dtoa_r+0xffc>
   2389c:	880b883a 	mov	r5,r17
   238a0:	01800284 	movi	r6,10
   238a4:	000f883a 	mov	r7,zero
   238a8:	8009883a 	mov	r4,r16
   238ac:	0025fb40 	call	25fb4 <__multadd>
   238b0:	980b883a 	mov	r5,r19
   238b4:	8009883a 	mov	r4,r16
   238b8:	01800284 	movi	r6,10
   238bc:	000f883a 	mov	r7,zero
   238c0:	1023883a 	mov	r17,r2
   238c4:	0025fb40 	call	25fb4 <__multadd>
   238c8:	1027883a 	mov	r19,r2
   238cc:	a825883a 	mov	r18,r21
   238d0:	003fcb06 	br	23800 <_dtoa_r+0xd34>
   238d4:	d9c00417 	ldw	r7,16(sp)
   238d8:	00800104 	movi	r2,4
   238dc:	3880e426 	beq	r7,r2,23c70 <_dtoa_r+0x11a4>
   238e0:	00800144 	movi	r2,5
   238e4:	38be3c1e 	bne	r7,r2,231d8 <_dtoa_r+0x70c>
   238e8:	00c00044 	movi	r3,1
   238ec:	d8c00c15 	stw	r3,48(sp)
   238f0:	d9c02117 	ldw	r7,132(sp)
   238f4:	d8800617 	ldw	r2,24(sp)
   238f8:	388f883a 	add	r7,r7,r2
   238fc:	3c800044 	addi	r18,r7,1
   23900:	d9c00e15 	stw	r7,56(sp)
   23904:	dc800915 	stw	r18,36(sp)
   23908:	04bd3e16 	blt	zero,r18,22e04 <_dtoa_r+0x338>
   2390c:	80001115 	stw	zero,68(r16)
   23910:	000b883a 	mov	r5,zero
   23914:	003d4606 	br	22e30 <_dtoa_r+0x364>
   23918:	d8c00317 	ldw	r3,12(sp)
   2391c:	183f0e1e 	bne	r3,zero,23558 <_dtoa_r+0xa8c>
   23920:	00c00434 	movhi	r3,16
   23924:	18ffffc4 	addi	r3,r3,-1
   23928:	88c6703a 	and	r3,r17,r3
   2392c:	183f0a1e 	bne	r3,zero,23558 <_dtoa_r+0xa8c>
   23930:	8c5ffc2c 	andhi	r17,r17,32752
   23934:	883f0826 	beq	r17,zero,23558 <_dtoa_r+0xa8c>
   23938:	d9000817 	ldw	r4,32(sp)
   2393c:	d9c00717 	ldw	r7,28(sp)
   23940:	1023883a 	mov	r17,r2
   23944:	2089883a 	add	r4,r4,r2
   23948:	388f883a 	add	r7,r7,r2
   2394c:	d9000815 	stw	r4,32(sp)
   23950:	d9c00715 	stw	r7,28(sp)
   23954:	003f0106 	br	2355c <_dtoa_r+0xa90>
   23958:	9005883a 	mov	r2,r18
   2395c:	003ed306 	br	234ac <_dtoa_r+0x9e0>
   23960:	d8800917 	ldw	r2,36(sp)
   23964:	00be3516 	blt	zero,r2,2323c <_dtoa_r+0x770>
   23968:	1000b61e 	bne	r2,zero,23c44 <_dtoa_r+0x1178>
   2396c:	9009883a 	mov	r4,r18
   23970:	980b883a 	mov	r5,r19
   23974:	000d883a 	mov	r6,zero
   23978:	01d00534 	movhi	r7,16404
   2397c:	0028cec0 	call	28cec <__muldf3>
   23980:	d9800317 	ldw	r6,12(sp)
   23984:	1009883a 	mov	r4,r2
   23988:	180b883a 	mov	r5,r3
   2398c:	880f883a 	mov	r7,r17
   23990:	00292a00 	call	292a0 <__gedf2>
   23994:	0029883a 	mov	r20,zero
   23998:	002b883a 	mov	r21,zero
   2399c:	10007e16 	blt	r2,zero,23b98 <_dtoa_r+0x10cc>
   239a0:	d8802117 	ldw	r2,132(sp)
   239a4:	b82d883a 	mov	r22,r23
   239a8:	0084303a 	nor	r2,zero,r2
   239ac:	d8800615 	stw	r2,24(sp)
   239b0:	8009883a 	mov	r4,r16
   239b4:	a00b883a 	mov	r5,r20
   239b8:	0025f8c0 	call	25f8c <_Bfree>
   239bc:	a83f4b1e 	bne	r21,zero,236ec <_dtoa_r+0xc20>
   239c0:	003de306 	br	23150 <_dtoa_r+0x684>
   239c4:	e00b883a 	mov	r5,fp
   239c8:	8009883a 	mov	r4,r16
   239cc:	00265a80 	call	265a8 <__pow5mult>
   239d0:	1039883a 	mov	fp,r2
   239d4:	003ed206 	br	23520 <_dtoa_r+0xa54>
   239d8:	1000021e 	bne	r2,zero,239e4 <_dtoa_r+0xf18>
   239dc:	18c0004c 	andi	r3,r3,1
   239e0:	183f271e 	bne	r3,zero,23680 <_dtoa_r+0xbb4>
   239e4:	01000c04 	movi	r4,48
   239e8:	00000106 	br	239f0 <_dtoa_r+0xf24>
   239ec:	102d883a 	mov	r22,r2
   239f0:	b0bfffc4 	addi	r2,r22,-1
   239f4:	10c00007 	ldb	r3,0(r2)
   239f8:	193ffc26 	beq	r3,r4,239ec <_dtoa_r+0xf20>
   239fc:	003f3206 	br	236c8 <_dtoa_r+0xbfc>
   23a00:	d8c00f17 	ldw	r3,60(sp)
   23a04:	18015026 	beq	r3,zero,23f48 <_dtoa_r+0x147c>
   23a08:	10810cc4 	addi	r2,r2,1075
   23a0c:	dcc00a17 	ldw	r19,40(sp)
   23a10:	dc800817 	ldw	r18,32(sp)
   23a14:	003e9706 	br	23474 <_dtoa_r+0x9a8>
   23a18:	b807883a 	mov	r3,r23
   23a1c:	182b883a 	mov	r21,r3
   23a20:	ddc00717 	ldw	r23,28(sp)
   23a24:	00800e0e 	bge	zero,r2,23a60 <_dtoa_r+0xf94>
   23a28:	e00b883a 	mov	r5,fp
   23a2c:	01800044 	movi	r6,1
   23a30:	8009883a 	mov	r4,r16
   23a34:	d8c01515 	stw	r3,84(sp)
   23a38:	00266d40 	call	266d4 <__lshift>
   23a3c:	1009883a 	mov	r4,r2
   23a40:	a00b883a 	mov	r5,r20
   23a44:	1039883a 	mov	fp,r2
   23a48:	00268300 	call	26830 <__mcmp>
   23a4c:	d8c01517 	ldw	r3,84(sp)
   23a50:	0081880e 	bge	zero,r2,24074 <_dtoa_r+0x15a8>
   23a54:	00800e44 	movi	r2,57
   23a58:	b0c00c44 	addi	r3,r22,49
   23a5c:	a8816326 	beq	r21,r2,23fec <_dtoa_r+0x1520>
   23a60:	90c00005 	stb	r3,0(r18)
   23a64:	95800044 	addi	r22,r18,1
   23a68:	982b883a 	mov	r21,r19
   23a6c:	003f1606 	br	236c8 <_dtoa_r+0xbfc>
   23a70:	300b883a 	mov	r5,r6
   23a74:	e009883a 	mov	r4,fp
   23a78:	d9801515 	stw	r6,84(sp)
   23a7c:	00268300 	call	26830 <__mcmp>
   23a80:	d9801517 	ldw	r6,84(sp)
   23a84:	8009883a 	mov	r4,r16
   23a88:	d8801515 	stw	r2,84(sp)
   23a8c:	300b883a 	mov	r5,r6
   23a90:	0025f8c0 	call	25f8c <_Bfree>
   23a94:	d8801517 	ldw	r2,84(sp)
   23a98:	103f6d1e 	bne	r2,zero,23850 <_dtoa_r+0xd84>
   23a9c:	d9c00417 	ldw	r7,16(sp)
   23aa0:	383f6b1e 	bne	r7,zero,23850 <_dtoa_r+0xd84>
   23aa4:	d8c00317 	ldw	r3,12(sp)
   23aa8:	183f691e 	bne	r3,zero,23850 <_dtoa_r+0xd84>
   23aac:	b807883a 	mov	r3,r23
   23ab0:	00800e44 	movi	r2,57
   23ab4:	ddc00717 	ldw	r23,28(sp)
   23ab8:	18814c26 	beq	r3,r2,23fec <_dtoa_r+0x1520>
   23abc:	057fe80e 	bge	zero,r21,23a60 <_dtoa_r+0xf94>
   23ac0:	b0c00c44 	addi	r3,r22,49
   23ac4:	003fe606 	br	23a60 <_dtoa_r+0xf94>
   23ac8:	880b883a 	mov	r5,r17
   23acc:	8009883a 	mov	r4,r16
   23ad0:	01800284 	movi	r6,10
   23ad4:	000f883a 	mov	r7,zero
   23ad8:	0025fb40 	call	25fb4 <__multadd>
   23adc:	1023883a 	mov	r17,r2
   23ae0:	1027883a 	mov	r19,r2
   23ae4:	a825883a 	mov	r18,r21
   23ae8:	003f4506 	br	23800 <_dtoa_r+0xd34>
   23aec:	e009883a 	mov	r4,fp
   23af0:	a00b883a 	mov	r5,r20
   23af4:	00268300 	call	26830 <__mcmp>
   23af8:	103ebc0e 	bge	r2,zero,235ec <_dtoa_r+0xb20>
   23afc:	e00b883a 	mov	r5,fp
   23b00:	8009883a 	mov	r4,r16
   23b04:	01800284 	movi	r6,10
   23b08:	000f883a 	mov	r7,zero
   23b0c:	0025fb40 	call	25fb4 <__multadd>
   23b10:	1039883a 	mov	fp,r2
   23b14:	d8800617 	ldw	r2,24(sp)
   23b18:	d8c00c17 	ldw	r3,48(sp)
   23b1c:	10bfffc4 	addi	r2,r2,-1
   23b20:	d8800615 	stw	r2,24(sp)
   23b24:	1801571e 	bne	r3,zero,24084 <_dtoa_r+0x15b8>
   23b28:	d9c00e17 	ldw	r7,56(sp)
   23b2c:	d9c00915 	stw	r7,36(sp)
   23b30:	003eae06 	br	235ec <_dtoa_r+0xb20>
   23b34:	a0800417 	ldw	r2,16(r20)
   23b38:	10800104 	addi	r2,r2,4
   23b3c:	1085883a 	add	r2,r2,r2
   23b40:	1085883a 	add	r2,r2,r2
   23b44:	a085883a 	add	r2,r20,r2
   23b48:	11000017 	ldw	r4,0(r2)
   23b4c:	00261fc0 	call	261fc <__hi0bits>
   23b50:	00c00804 	movi	r3,32
   23b54:	1885c83a 	sub	r2,r3,r2
   23b58:	003e8306 	br	23568 <_dtoa_r+0xa9c>
   23b5c:	d9c00417 	ldw	r7,16(sp)
   23b60:	00800084 	movi	r2,2
   23b64:	11fea30e 	bge	r2,r7,235f4 <_dtoa_r+0xb28>
   23b68:	d8800917 	ldw	r2,36(sp)
   23b6c:	103f8c1e 	bne	r2,zero,239a0 <_dtoa_r+0xed4>
   23b70:	a00b883a 	mov	r5,r20
   23b74:	8009883a 	mov	r4,r16
   23b78:	01800144 	movi	r6,5
   23b7c:	000f883a 	mov	r7,zero
   23b80:	0025fb40 	call	25fb4 <__multadd>
   23b84:	e009883a 	mov	r4,fp
   23b88:	100b883a 	mov	r5,r2
   23b8c:	1029883a 	mov	r20,r2
   23b90:	00268300 	call	26830 <__mcmp>
   23b94:	00bf820e 	bge	zero,r2,239a0 <_dtoa_r+0xed4>
   23b98:	00800c44 	movi	r2,49
   23b9c:	b8800005 	stb	r2,0(r23)
   23ba0:	d8800617 	ldw	r2,24(sp)
   23ba4:	bd800044 	addi	r22,r23,1
   23ba8:	10800044 	addi	r2,r2,1
   23bac:	d8800615 	stw	r2,24(sp)
   23bb0:	003f7f06 	br	239b0 <_dtoa_r+0xee4>
   23bb4:	dc000417 	ldw	r16,16(sp)
   23bb8:	003d6506 	br	23150 <_dtoa_r+0x684>
   23bbc:	9009883a 	mov	r4,r18
   23bc0:	00293600 	call	29360 <__floatsidf>
   23bc4:	1009883a 	mov	r4,r2
   23bc8:	180b883a 	mov	r5,r3
   23bcc:	980d883a 	mov	r6,r19
   23bd0:	a00f883a 	mov	r7,r20
   23bd4:	0028cec0 	call	28cec <__muldf3>
   23bd8:	1009883a 	mov	r4,r2
   23bdc:	180b883a 	mov	r5,r3
   23be0:	000d883a 	mov	r6,zero
   23be4:	01d00734 	movhi	r7,16412
   23be8:	0028c380 	call	28c38 <__adddf3>
   23bec:	057f3034 	movhi	r21,64704
   23bf0:	1025883a 	mov	r18,r2
   23bf4:	1d6b883a 	add	r21,r3,r21
   23bf8:	9809883a 	mov	r4,r19
   23bfc:	a00b883a 	mov	r5,r20
   23c00:	000d883a 	mov	r6,zero
   23c04:	01d00534 	movhi	r7,16404
   23c08:	0028c8c0 	call	28c8c <__subdf3>
   23c0c:	1009883a 	mov	r4,r2
   23c10:	180b883a 	mov	r5,r3
   23c14:	900d883a 	mov	r6,r18
   23c18:	a80f883a 	mov	r7,r21
   23c1c:	1027883a 	mov	r19,r2
   23c20:	1829883a 	mov	r20,r3
   23c24:	002923c0 	call	2923c <__gtdf2>
   23c28:	00806616 	blt	zero,r2,23dc4 <_dtoa_r+0x12f8>
   23c2c:	a9e0003c 	xorhi	r7,r21,32768
   23c30:	9809883a 	mov	r4,r19
   23c34:	a00b883a 	mov	r5,r20
   23c38:	900d883a 	mov	r6,r18
   23c3c:	00293040 	call	29304 <__ltdf2>
   23c40:	103d710e 	bge	r2,zero,23208 <_dtoa_r+0x73c>
   23c44:	0029883a 	mov	r20,zero
   23c48:	002b883a 	mov	r21,zero
   23c4c:	003f5406 	br	239a0 <_dtoa_r+0xed4>
   23c50:	d9800a17 	ldw	r6,40(sp)
   23c54:	e00b883a 	mov	r5,fp
   23c58:	8009883a 	mov	r4,r16
   23c5c:	00265a80 	call	265a8 <__pow5mult>
   23c60:	1039883a 	mov	fp,r2
   23c64:	003e2e06 	br	23520 <_dtoa_r+0xa54>
   23c68:	d8000c15 	stw	zero,48(sp)
   23c6c:	003f2006 	br	238f0 <_dtoa_r+0xe24>
   23c70:	00800044 	movi	r2,1
   23c74:	d8800c15 	stw	r2,48(sp)
   23c78:	003c5d06 	br	22df0 <_dtoa_r+0x324>
   23c7c:	d8c00a17 	ldw	r3,40(sp)
   23c80:	d9000b17 	ldw	r4,44(sp)
   23c84:	dcc00a15 	stw	r19,40(sp)
   23c88:	98c5c83a 	sub	r2,r19,r3
   23c8c:	2089883a 	add	r4,r4,r2
   23c90:	d9000b15 	stw	r4,44(sp)
   23c94:	0027883a 	mov	r19,zero
   23c98:	003df206 	br	23464 <_dtoa_r+0x998>
   23c9c:	d9000317 	ldw	r4,12(sp)
   23ca0:	8829883a 	mov	r20,r17
   23ca4:	04800084 	movi	r18,2
   23ca8:	d9001015 	stw	r4,64(sp)
   23cac:	003c8106 	br	22eb4 <_dtoa_r+0x3e8>
   23cb0:	04800044 	movi	r18,1
   23cb4:	dc800e15 	stw	r18,56(sp)
   23cb8:	dc800915 	stw	r18,36(sp)
   23cbc:	dc802115 	stw	r18,132(sp)
   23cc0:	003f1206 	br	2390c <_dtoa_r+0xe40>
   23cc4:	d8800617 	ldw	r2,24(sp)
   23cc8:	00abc83a 	sub	r21,zero,r2
   23ccc:	a800a426 	beq	r21,zero,23f60 <_dtoa_r+0x1494>
   23cd0:	a88003cc 	andi	r2,r21,15
   23cd4:	100490fa 	slli	r2,r2,3
   23cd8:	00c001f4 	movhi	r3,7
   23cdc:	18f25f04 	addi	r3,r3,-13956
   23ce0:	d9000317 	ldw	r4,12(sp)
   23ce4:	1885883a 	add	r2,r3,r2
   23ce8:	11800017 	ldw	r6,0(r2)
   23cec:	11c00117 	ldw	r7,4(r2)
   23cf0:	a82bd13a 	srai	r21,r21,4
   23cf4:	880b883a 	mov	r5,r17
   23cf8:	0028cec0 	call	28cec <__muldf3>
   23cfc:	1027883a 	mov	r19,r2
   23d00:	1829883a 	mov	r20,r3
   23d04:	a800e826 	beq	r21,zero,240a8 <_dtoa_r+0x15dc>
   23d08:	058001f4 	movhi	r22,7
   23d0c:	b5b25504 	addi	r22,r22,-13996
   23d10:	04800084 	movi	r18,2
   23d14:	a980004c 	andi	r6,r21,1
   23d18:	1009883a 	mov	r4,r2
   23d1c:	a82bd07a 	srai	r21,r21,1
   23d20:	180b883a 	mov	r5,r3
   23d24:	30000426 	beq	r6,zero,23d38 <_dtoa_r+0x126c>
   23d28:	b1800017 	ldw	r6,0(r22)
   23d2c:	b1c00117 	ldw	r7,4(r22)
   23d30:	94800044 	addi	r18,r18,1
   23d34:	0028cec0 	call	28cec <__muldf3>
   23d38:	b5800204 	addi	r22,r22,8
   23d3c:	a83ff51e 	bne	r21,zero,23d14 <_dtoa_r+0x1248>
   23d40:	1027883a 	mov	r19,r2
   23d44:	1829883a 	mov	r20,r3
   23d48:	003c7306 	br	22f18 <_dtoa_r+0x44c>
   23d4c:	21000044 	addi	r4,r4,1
   23d50:	11000005 	stb	r4,0(r2)
   23d54:	003e5c06 	br	236c8 <_dtoa_r+0xbfc>
   23d58:	a9400117 	ldw	r5,4(r21)
   23d5c:	8009883a 	mov	r4,r16
   23d60:	0025ee40 	call	25ee4 <_Balloc>
   23d64:	a9800417 	ldw	r6,16(r21)
   23d68:	11000304 	addi	r4,r2,12
   23d6c:	a9400304 	addi	r5,r21,12
   23d70:	31800084 	addi	r6,r6,2
   23d74:	318d883a 	add	r6,r6,r6
   23d78:	318d883a 	add	r6,r6,r6
   23d7c:	1023883a 	mov	r17,r2
   23d80:	0025b3c0 	call	25b3c <memcpy>
   23d84:	8009883a 	mov	r4,r16
   23d88:	880b883a 	mov	r5,r17
   23d8c:	01800044 	movi	r6,1
   23d90:	00266d40 	call	266d4 <__lshift>
   23d94:	1027883a 	mov	r19,r2
   23d98:	003e8f06 	br	237d8 <_dtoa_r+0xd0c>
   23d9c:	b807883a 	mov	r3,r23
   23da0:	00800e44 	movi	r2,57
   23da4:	ddc00717 	ldw	r23,28(sp)
   23da8:	18809026 	beq	r3,r2,23fec <_dtoa_r+0x1520>
   23dac:	18c00044 	addi	r3,r3,1
   23db0:	003f2b06 	br	23a60 <_dtoa_r+0xf94>
   23db4:	b807883a 	mov	r3,r23
   23db8:	982b883a 	mov	r21,r19
   23dbc:	ddc00717 	ldw	r23,28(sp)
   23dc0:	003e2406 	br	23654 <_dtoa_r+0xb88>
   23dc4:	0029883a 	mov	r20,zero
   23dc8:	002b883a 	mov	r21,zero
   23dcc:	003f7206 	br	23b98 <_dtoa_r+0x10cc>
   23dd0:	593fffc4 	addi	r4,r11,-1
   23dd4:	200490fa 	slli	r2,r4,3
   23dd8:	00c001f4 	movhi	r3,7
   23ddc:	18f25f04 	addi	r3,r3,-13956
   23de0:	d9001015 	stw	r4,64(sp)
   23de4:	1885883a 	add	r2,r3,r2
   23de8:	11000017 	ldw	r4,0(r2)
   23dec:	11400117 	ldw	r5,4(r2)
   23df0:	900d883a 	mov	r6,r18
   23df4:	a80f883a 	mov	r7,r21
   23df8:	dac01615 	stw	r11,88(sp)
   23dfc:	0028cec0 	call	28cec <__muldf3>
   23e00:	a00b883a 	mov	r5,r20
   23e04:	9809883a 	mov	r4,r19
   23e08:	d8c01215 	stw	r3,72(sp)
   23e0c:	d8801115 	stw	r2,68(sp)
   23e10:	00294340 	call	29434 <__fixdfsi>
   23e14:	1009883a 	mov	r4,r2
   23e18:	1025883a 	mov	r18,r2
   23e1c:	00293600 	call	29360 <__floatsidf>
   23e20:	9809883a 	mov	r4,r19
   23e24:	a00b883a 	mov	r5,r20
   23e28:	100d883a 	mov	r6,r2
   23e2c:	180f883a 	mov	r7,r3
   23e30:	94800c04 	addi	r18,r18,48
   23e34:	0028c8c0 	call	28c8c <__subdf3>
   23e38:	bc800005 	stb	r18,0(r23)
   23e3c:	dac01617 	ldw	r11,88(sp)
   23e40:	102b883a 	mov	r21,r2
   23e44:	00800044 	movi	r2,1
   23e48:	bd800044 	addi	r22,r23,1
   23e4c:	1815883a 	mov	r10,r3
   23e50:	58802226 	beq	r11,r2,23edc <_dtoa_r+0x1410>
   23e54:	bad7883a 	add	r11,r23,r11
   23e58:	dc001415 	stw	r16,80(sp)
   23e5c:	a805883a 	mov	r2,r21
   23e60:	b027883a 	mov	r19,r22
   23e64:	5821883a 	mov	r16,r11
   23e68:	882b883a 	mov	r21,r17
   23e6c:	000d883a 	mov	r6,zero
   23e70:	01d00934 	movhi	r7,16420
   23e74:	1009883a 	mov	r4,r2
   23e78:	180b883a 	mov	r5,r3
   23e7c:	0028cec0 	call	28cec <__muldf3>
   23e80:	180b883a 	mov	r5,r3
   23e84:	1009883a 	mov	r4,r2
   23e88:	1829883a 	mov	r20,r3
   23e8c:	1023883a 	mov	r17,r2
   23e90:	00294340 	call	29434 <__fixdfsi>
   23e94:	1009883a 	mov	r4,r2
   23e98:	1025883a 	mov	r18,r2
   23e9c:	00293600 	call	29360 <__floatsidf>
   23ea0:	8809883a 	mov	r4,r17
   23ea4:	a00b883a 	mov	r5,r20
   23ea8:	100d883a 	mov	r6,r2
   23eac:	180f883a 	mov	r7,r3
   23eb0:	94800c04 	addi	r18,r18,48
   23eb4:	0028c8c0 	call	28c8c <__subdf3>
   23eb8:	9cc00044 	addi	r19,r19,1
   23ebc:	9cbfffc5 	stb	r18,-1(r19)
   23ec0:	9c3fea1e 	bne	r19,r16,23e6c <_dtoa_r+0x13a0>
   23ec4:	1815883a 	mov	r10,r3
   23ec8:	d8c01017 	ldw	r3,64(sp)
   23ecc:	dc001417 	ldw	r16,80(sp)
   23ed0:	a823883a 	mov	r17,r21
   23ed4:	b0ed883a 	add	r22,r22,r3
   23ed8:	102b883a 	mov	r21,r2
   23edc:	d9001117 	ldw	r4,68(sp)
   23ee0:	d9401217 	ldw	r5,72(sp)
   23ee4:	000d883a 	mov	r6,zero
   23ee8:	01cff834 	movhi	r7,16352
   23eec:	da801515 	stw	r10,84(sp)
   23ef0:	0028c380 	call	28c38 <__adddf3>
   23ef4:	da801517 	ldw	r10,84(sp)
   23ef8:	1009883a 	mov	r4,r2
   23efc:	180b883a 	mov	r5,r3
   23f00:	500f883a 	mov	r7,r10
   23f04:	a80d883a 	mov	r6,r21
   23f08:	00293040 	call	29304 <__ltdf2>
   23f0c:	da801517 	ldw	r10,84(sp)
   23f10:	10003b0e 	bge	r2,zero,24000 <_dtoa_r+0x1534>
   23f14:	d9c01317 	ldw	r7,76(sp)
   23f18:	b53fffc3 	ldbu	r20,-1(r22)
   23f1c:	d9c00615 	stw	r7,24(sp)
   23f20:	003d3106 	br	233e8 <_dtoa_r+0x91c>
   23f24:	d8800817 	ldw	r2,32(sp)
   23f28:	11e5c83a 	sub	r18,r2,r7
   23f2c:	0005883a 	mov	r2,zero
   23f30:	003d5006 	br	23474 <_dtoa_r+0x9a8>
   23f34:	05800044 	movi	r22,1
   23f38:	003dc406 	br	2364c <_dtoa_r+0xb80>
   23f3c:	a5000044 	addi	r20,r20,1
   23f40:	15000005 	stb	r20,0(r2)
   23f44:	003c8206 	br	23150 <_dtoa_r+0x684>
   23f48:	d8800217 	ldw	r2,8(sp)
   23f4c:	00c00d84 	movi	r3,54
   23f50:	dcc00a17 	ldw	r19,40(sp)
   23f54:	1885c83a 	sub	r2,r3,r2
   23f58:	dc800817 	ldw	r18,32(sp)
   23f5c:	003d4506 	br	23474 <_dtoa_r+0x9a8>
   23f60:	dcc00317 	ldw	r19,12(sp)
   23f64:	8829883a 	mov	r20,r17
   23f68:	04800084 	movi	r18,2
   23f6c:	003bea06 	br	22f18 <_dtoa_r+0x44c>
   23f70:	d9000917 	ldw	r4,36(sp)
   23f74:	203f1126 	beq	r4,zero,23bbc <_dtoa_r+0x10f0>
   23f78:	d9c00e17 	ldw	r7,56(sp)
   23f7c:	01fca20e 	bge	zero,r7,23208 <_dtoa_r+0x73c>
   23f80:	a00b883a 	mov	r5,r20
   23f84:	9809883a 	mov	r4,r19
   23f88:	000d883a 	mov	r6,zero
   23f8c:	01d00934 	movhi	r7,16420
   23f90:	0028cec0 	call	28cec <__muldf3>
   23f94:	91000044 	addi	r4,r18,1
   23f98:	1027883a 	mov	r19,r2
   23f9c:	1829883a 	mov	r20,r3
   23fa0:	00293600 	call	29360 <__floatsidf>
   23fa4:	9809883a 	mov	r4,r19
   23fa8:	a00b883a 	mov	r5,r20
   23fac:	100d883a 	mov	r6,r2
   23fb0:	180f883a 	mov	r7,r3
   23fb4:	0028cec0 	call	28cec <__muldf3>
   23fb8:	1009883a 	mov	r4,r2
   23fbc:	180b883a 	mov	r5,r3
   23fc0:	000d883a 	mov	r6,zero
   23fc4:	01d00734 	movhi	r7,16412
   23fc8:	0028c380 	call	28c38 <__adddf3>
   23fcc:	1025883a 	mov	r18,r2
   23fd0:	d8800617 	ldw	r2,24(sp)
   23fd4:	057f3034 	movhi	r21,64704
   23fd8:	1d6b883a 	add	r21,r3,r21
   23fdc:	10bfffc4 	addi	r2,r2,-1
   23fe0:	d8801315 	stw	r2,76(sp)
   23fe4:	dac00e17 	ldw	r11,56(sp)
   23fe8:	003be706 	br	22f88 <_dtoa_r+0x4bc>
   23fec:	01000e44 	movi	r4,57
   23ff0:	91000005 	stb	r4,0(r18)
   23ff4:	95800044 	addi	r22,r18,1
   23ff8:	982b883a 	mov	r21,r19
   23ffc:	003da106 	br	23684 <_dtoa_r+0xbb8>
   24000:	d9801117 	ldw	r6,68(sp)
   24004:	d9c01217 	ldw	r7,72(sp)
   24008:	0009883a 	mov	r4,zero
   2400c:	014ff834 	movhi	r5,16352
   24010:	da801515 	stw	r10,84(sp)
   24014:	0028c8c0 	call	28c8c <__subdf3>
   24018:	da801517 	ldw	r10,84(sp)
   2401c:	1009883a 	mov	r4,r2
   24020:	180b883a 	mov	r5,r3
   24024:	a80d883a 	mov	r6,r21
   24028:	500f883a 	mov	r7,r10
   2402c:	002923c0 	call	2923c <__gtdf2>
   24030:	00bc750e 	bge	zero,r2,23208 <_dtoa_r+0x73c>
   24034:	01000c04 	movi	r4,48
   24038:	00000106 	br	24040 <_dtoa_r+0x1574>
   2403c:	102d883a 	mov	r22,r2
   24040:	b0bfffc4 	addi	r2,r22,-1
   24044:	10c00007 	ldb	r3,0(r2)
   24048:	193ffc26 	beq	r3,r4,2403c <_dtoa_r+0x1570>
   2404c:	d8801317 	ldw	r2,76(sp)
   24050:	d8800615 	stw	r2,24(sp)
   24054:	003c3e06 	br	23150 <_dtoa_r+0x684>
   24058:	d9001317 	ldw	r4,76(sp)
   2405c:	df001117 	ldw	fp,68(sp)
   24060:	d9000615 	stw	r4,24(sp)
   24064:	003ce006 	br	233e8 <_dtoa_r+0x91c>
   24068:	df001117 	ldw	fp,68(sp)
   2406c:	dc401217 	ldw	r17,72(sp)
   24070:	003c6506 	br	23208 <_dtoa_r+0x73c>
   24074:	103e7a1e 	bne	r2,zero,23a60 <_dtoa_r+0xf94>
   24078:	1880004c 	andi	r2,r3,1
   2407c:	103e7826 	beq	r2,zero,23a60 <_dtoa_r+0xf94>
   24080:	003e7406 	br	23a54 <_dtoa_r+0xf88>
   24084:	8009883a 	mov	r4,r16
   24088:	a80b883a 	mov	r5,r21
   2408c:	01800284 	movi	r6,10
   24090:	000f883a 	mov	r7,zero
   24094:	0025fb40 	call	25fb4 <__multadd>
   24098:	d9000e17 	ldw	r4,56(sp)
   2409c:	102b883a 	mov	r21,r2
   240a0:	d9000915 	stw	r4,36(sp)
   240a4:	003d5106 	br	235ec <_dtoa_r+0xb20>
   240a8:	04800084 	movi	r18,2
   240ac:	003b9a06 	br	22f18 <_dtoa_r+0x44c>
   240b0:	d8c01317 	ldw	r3,76(sp)
   240b4:	d8c00615 	stw	r3,24(sp)
   240b8:	003ccb06 	br	233e8 <_dtoa_r+0x91c>
   240bc:	d8c01317 	ldw	r3,76(sp)
   240c0:	d8c00615 	stw	r3,24(sp)
   240c4:	003c2206 	br	23150 <_dtoa_r+0x684>
   240c8:	20fd3826 	beq	r4,r3,235ac <_dtoa_r+0xae0>
   240cc:	00c00f04 	movi	r3,60
   240d0:	1885c83a 	sub	r2,r3,r2
   240d4:	003da906 	br	2377c <_dtoa_r+0xcb0>
   240d8:	000b883a 	mov	r5,zero
   240dc:	003b5406 	br	22e30 <_dtoa_r+0x364>
   240e0:	04c00044 	movi	r19,1
   240e4:	003b3b06 	br	22dd4 <_dtoa_r+0x308>

000240e8 <_fflush_r>:
   240e8:	defffb04 	addi	sp,sp,-20
   240ec:	dcc00315 	stw	r19,12(sp)
   240f0:	dc400115 	stw	r17,4(sp)
   240f4:	dfc00415 	stw	ra,16(sp)
   240f8:	dc800215 	stw	r18,8(sp)
   240fc:	dc000015 	stw	r16,0(sp)
   24100:	2027883a 	mov	r19,r4
   24104:	2823883a 	mov	r17,r5
   24108:	20000226 	beq	r4,zero,24114 <_fflush_r+0x2c>
   2410c:	20800e17 	ldw	r2,56(r4)
   24110:	10005726 	beq	r2,zero,24270 <_fflush_r+0x188>
   24114:	8880030b 	ldhu	r2,12(r17)
   24118:	10c0020c 	andi	r3,r2,8
   2411c:	18ffffcc 	andi	r3,r3,65535
   24120:	18e0001c 	xori	r3,r3,32768
   24124:	18e00004 	addi	r3,r3,-32768
   24128:	1800311e 	bne	r3,zero,241f0 <_fflush_r+0x108>
   2412c:	89000117 	ldw	r4,4(r17)
   24130:	10c20014 	ori	r3,r2,2048
   24134:	88c0030d 	sth	r3,12(r17)
   24138:	180b883a 	mov	r5,r3
   2413c:	0100520e 	bge	zero,r4,24288 <_fflush_r+0x1a0>
   24140:	88c00a17 	ldw	r3,40(r17)
   24144:	18002226 	beq	r3,zero,241d0 <_fflush_r+0xe8>
   24148:	1084000c 	andi	r2,r2,4096
   2414c:	10bfffcc 	andi	r2,r2,65535
   24150:	10a0001c 	xori	r2,r2,32768
   24154:	10a00004 	addi	r2,r2,-32768
   24158:	10004e26 	beq	r2,zero,24294 <_fflush_r+0x1ac>
   2415c:	8c001417 	ldw	r16,80(r17)
   24160:	2940010c 	andi	r5,r5,4
   24164:	297fffcc 	andi	r5,r5,65535
   24168:	2960001c 	xori	r5,r5,32768
   2416c:	29600004 	addi	r5,r5,-32768
   24170:	28000626 	beq	r5,zero,2418c <_fflush_r+0xa4>
   24174:	89000117 	ldw	r4,4(r17)
   24178:	88800c17 	ldw	r2,48(r17)
   2417c:	8121c83a 	sub	r16,r16,r4
   24180:	10000226 	beq	r2,zero,2418c <_fflush_r+0xa4>
   24184:	88800f17 	ldw	r2,60(r17)
   24188:	80a1c83a 	sub	r16,r16,r2
   2418c:	89400717 	ldw	r5,28(r17)
   24190:	9809883a 	mov	r4,r19
   24194:	800d883a 	mov	r6,r16
   24198:	000f883a 	mov	r7,zero
   2419c:	183ee83a 	callr	r3
   241a0:	8080281e 	bne	r16,r2,24244 <_fflush_r+0x15c>
   241a4:	8880030b 	ldhu	r2,12(r17)
   241a8:	88c00417 	ldw	r3,16(r17)
   241ac:	88000115 	stw	zero,4(r17)
   241b0:	113dffcc 	andi	r4,r2,63487
   241b4:	1084000c 	andi	r2,r2,4096
   241b8:	10bfffcc 	andi	r2,r2,65535
   241bc:	10a0001c 	xori	r2,r2,32768
   241c0:	8900030d 	sth	r4,12(r17)
   241c4:	88c00015 	stw	r3,0(r17)
   241c8:	10a00004 	addi	r2,r2,-32768
   241cc:	10002c1e 	bne	r2,zero,24280 <_fflush_r+0x198>
   241d0:	0005883a 	mov	r2,zero
   241d4:	dfc00417 	ldw	ra,16(sp)
   241d8:	dcc00317 	ldw	r19,12(sp)
   241dc:	dc800217 	ldw	r18,8(sp)
   241e0:	dc400117 	ldw	r17,4(sp)
   241e4:	dc000017 	ldw	r16,0(sp)
   241e8:	dec00504 	addi	sp,sp,20
   241ec:	f800283a 	ret
   241f0:	8c800417 	ldw	r18,16(r17)
   241f4:	903ff626 	beq	r18,zero,241d0 <_fflush_r+0xe8>
   241f8:	8c000017 	ldw	r16,0(r17)
   241fc:	108000cc 	andi	r2,r2,3
   24200:	8c800015 	stw	r18,0(r17)
   24204:	84a1c83a 	sub	r16,r16,r18
   24208:	10001b1e 	bne	r2,zero,24278 <_fflush_r+0x190>
   2420c:	88800517 	ldw	r2,20(r17)
   24210:	88800215 	stw	r2,8(r17)
   24214:	04000316 	blt	zero,r16,24224 <_fflush_r+0x13c>
   24218:	003fed06 	br	241d0 <_fflush_r+0xe8>
   2421c:	90a5883a 	add	r18,r18,r2
   24220:	043feb0e 	bge	zero,r16,241d0 <_fflush_r+0xe8>
   24224:	88800917 	ldw	r2,36(r17)
   24228:	89400717 	ldw	r5,28(r17)
   2422c:	800f883a 	mov	r7,r16
   24230:	900d883a 	mov	r6,r18
   24234:	9809883a 	mov	r4,r19
   24238:	103ee83a 	callr	r2
   2423c:	80a1c83a 	sub	r16,r16,r2
   24240:	00bff616 	blt	zero,r2,2421c <_fflush_r+0x134>
   24244:	88c0030b 	ldhu	r3,12(r17)
   24248:	00bfffc4 	movi	r2,-1
   2424c:	18c01014 	ori	r3,r3,64
   24250:	88c0030d 	sth	r3,12(r17)
   24254:	dfc00417 	ldw	ra,16(sp)
   24258:	dcc00317 	ldw	r19,12(sp)
   2425c:	dc800217 	ldw	r18,8(sp)
   24260:	dc400117 	ldw	r17,4(sp)
   24264:	dc000017 	ldw	r16,0(sp)
   24268:	dec00504 	addi	sp,sp,20
   2426c:	f800283a 	ret
   24270:	00243a40 	call	243a4 <__sinit>
   24274:	003fa706 	br	24114 <_fflush_r+0x2c>
   24278:	0005883a 	mov	r2,zero
   2427c:	003fe406 	br	24210 <_fflush_r+0x128>
   24280:	8c001415 	stw	r16,80(r17)
   24284:	003fd206 	br	241d0 <_fflush_r+0xe8>
   24288:	88c00f17 	ldw	r3,60(r17)
   2428c:	00ffac16 	blt	zero,r3,24140 <_fflush_r+0x58>
   24290:	003fcf06 	br	241d0 <_fflush_r+0xe8>
   24294:	89400717 	ldw	r5,28(r17)
   24298:	9809883a 	mov	r4,r19
   2429c:	000d883a 	mov	r6,zero
   242a0:	01c00044 	movi	r7,1
   242a4:	183ee83a 	callr	r3
   242a8:	1021883a 	mov	r16,r2
   242ac:	00bfffc4 	movi	r2,-1
   242b0:	80800326 	beq	r16,r2,242c0 <_fflush_r+0x1d8>
   242b4:	8940030b 	ldhu	r5,12(r17)
   242b8:	88c00a17 	ldw	r3,40(r17)
   242bc:	003fa806 	br	24160 <_fflush_r+0x78>
   242c0:	98c00017 	ldw	r3,0(r19)
   242c4:	00800744 	movi	r2,29
   242c8:	18bfde1e 	bne	r3,r2,24244 <_fflush_r+0x15c>
   242cc:	003fc006 	br	241d0 <_fflush_r+0xe8>

000242d0 <fflush>:
   242d0:	200b883a 	mov	r5,r4
   242d4:	20000426 	beq	r4,zero,242e8 <fflush+0x18>
   242d8:	008001f4 	movhi	r2,7
   242dc:	10b96e04 	addi	r2,r2,-6728
   242e0:	11000017 	ldw	r4,0(r2)
   242e4:	00240e81 	jmpi	240e8 <_fflush_r>
   242e8:	008001f4 	movhi	r2,7
   242ec:	10b96d04 	addi	r2,r2,-6732
   242f0:	11000017 	ldw	r4,0(r2)
   242f4:	014000b4 	movhi	r5,2
   242f8:	29503a04 	addi	r5,r5,16616
   242fc:	0024f841 	jmpi	24f84 <_fwalk_reent>

00024300 <__fp_lock>:
   24300:	0005883a 	mov	r2,zero
   24304:	f800283a 	ret

00024308 <__fp_unlock>:
   24308:	0005883a 	mov	r2,zero
   2430c:	f800283a 	ret

00024310 <_cleanup_r>:
   24310:	014000b4 	movhi	r5,2
   24314:	295ead04 	addi	r5,r5,31412
   24318:	0024edc1 	jmpi	24edc <_fwalk>

0002431c <__sfmoreglue>:
   2431c:	defffc04 	addi	sp,sp,-16
   24320:	dc800215 	stw	r18,8(sp)
   24324:	2825883a 	mov	r18,r5
   24328:	dc000015 	stw	r16,0(sp)
   2432c:	01401704 	movi	r5,92
   24330:	2021883a 	mov	r16,r4
   24334:	9009883a 	mov	r4,r18
   24338:	dfc00315 	stw	ra,12(sp)
   2433c:	dc400115 	stw	r17,4(sp)
   24340:	00297540 	call	29754 <__mulsi3>
   24344:	8009883a 	mov	r4,r16
   24348:	11400304 	addi	r5,r2,12
   2434c:	1023883a 	mov	r17,r2
   24350:	00252c00 	call	252c0 <_malloc_r>
   24354:	1021883a 	mov	r16,r2
   24358:	10000726 	beq	r2,zero,24378 <__sfmoreglue+0x5c>
   2435c:	11000304 	addi	r4,r2,12
   24360:	10000015 	stw	zero,0(r2)
   24364:	14800115 	stw	r18,4(r2)
   24368:	11000215 	stw	r4,8(r2)
   2436c:	000b883a 	mov	r5,zero
   24370:	880d883a 	mov	r6,r17
   24374:	0025e080 	call	25e08 <memset>
   24378:	8005883a 	mov	r2,r16
   2437c:	dfc00317 	ldw	ra,12(sp)
   24380:	dc800217 	ldw	r18,8(sp)
   24384:	dc400117 	ldw	r17,4(sp)
   24388:	dc000017 	ldw	r16,0(sp)
   2438c:	dec00404 	addi	sp,sp,16
   24390:	f800283a 	ret

00024394 <_cleanup>:
   24394:	008001f4 	movhi	r2,7
   24398:	10b96d04 	addi	r2,r2,-6732
   2439c:	11000017 	ldw	r4,0(r2)
   243a0:	00243101 	jmpi	24310 <_cleanup_r>

000243a4 <__sinit>:
   243a4:	20800e17 	ldw	r2,56(r4)
   243a8:	1000401e 	bne	r2,zero,244ac <__sinit+0x108>
   243ac:	21400117 	ldw	r5,4(r4)
   243b0:	018000b4 	movhi	r6,2
   243b4:	3190c404 	addi	r6,r6,17168
   243b8:	20c00217 	ldw	r3,8(r4)
   243bc:	21800f15 	stw	r6,60(r4)
   243c0:	2080bb04 	addi	r2,r4,748
   243c4:	02400044 	movi	r9,1
   243c8:	018000c4 	movi	r6,3
   243cc:	2180b915 	stw	r6,740(r4)
   243d0:	2080ba15 	stw	r2,744(r4)
   243d4:	22400e15 	stw	r9,56(r4)
   243d8:	20800317 	ldw	r2,12(r4)
   243dc:	2000b815 	stw	zero,736(r4)
   243e0:	020000b4 	movhi	r8,2
   243e4:	421d7e04 	addi	r8,r8,30200
   243e8:	01c000b4 	movhi	r7,2
   243ec:	39dd9304 	addi	r7,r7,30284
   243f0:	018000b4 	movhi	r6,2
   243f4:	319db504 	addi	r6,r6,30420
   243f8:	010000b4 	movhi	r4,2
   243fc:	211dcc04 	addi	r4,r4,30512
   24400:	02800104 	movi	r10,4
   24404:	28000015 	stw	zero,0(r5)
   24408:	28000115 	stw	zero,4(r5)
   2440c:	28000215 	stw	zero,8(r5)
   24410:	2a80030d 	sth	r10,12(r5)
   24414:	2800038d 	sth	zero,14(r5)
   24418:	28000415 	stw	zero,16(r5)
   2441c:	28000515 	stw	zero,20(r5)
   24420:	28000615 	stw	zero,24(r5)
   24424:	29400715 	stw	r5,28(r5)
   24428:	2a000815 	stw	r8,32(r5)
   2442c:	29c00915 	stw	r7,36(r5)
   24430:	29800a15 	stw	r6,40(r5)
   24434:	29000b15 	stw	r4,44(r5)
   24438:	01400284 	movi	r5,10
   2443c:	18000015 	stw	zero,0(r3)
   24440:	18000115 	stw	zero,4(r3)
   24444:	18000215 	stw	zero,8(r3)
   24448:	1940030d 	sth	r5,12(r3)
   2444c:	1a40038d 	sth	r9,14(r3)
   24450:	18000415 	stw	zero,16(r3)
   24454:	18000515 	stw	zero,20(r3)
   24458:	18000615 	stw	zero,24(r3)
   2445c:	18c00715 	stw	r3,28(r3)
   24460:	1a000815 	stw	r8,32(r3)
   24464:	19c00915 	stw	r7,36(r3)
   24468:	19800a15 	stw	r6,40(r3)
   2446c:	19000b15 	stw	r4,44(r3)
   24470:	00c00484 	movi	r3,18
   24474:	10c0030d 	sth	r3,12(r2)
   24478:	00c00084 	movi	r3,2
   2447c:	10000015 	stw	zero,0(r2)
   24480:	10000115 	stw	zero,4(r2)
   24484:	10000215 	stw	zero,8(r2)
   24488:	10c0038d 	sth	r3,14(r2)
   2448c:	10000415 	stw	zero,16(r2)
   24490:	10000515 	stw	zero,20(r2)
   24494:	10000615 	stw	zero,24(r2)
   24498:	10800715 	stw	r2,28(r2)
   2449c:	12000815 	stw	r8,32(r2)
   244a0:	11c00915 	stw	r7,36(r2)
   244a4:	11800a15 	stw	r6,40(r2)
   244a8:	11000b15 	stw	r4,44(r2)
   244ac:	f800283a 	ret

000244b0 <__sfp>:
   244b0:	defffc04 	addi	sp,sp,-16
   244b4:	008001f4 	movhi	r2,7
   244b8:	10b96d04 	addi	r2,r2,-6732
   244bc:	dc400115 	stw	r17,4(sp)
   244c0:	14400017 	ldw	r17,0(r2)
   244c4:	dc800215 	stw	r18,8(sp)
   244c8:	dfc00315 	stw	ra,12(sp)
   244cc:	88800e17 	ldw	r2,56(r17)
   244d0:	dc000015 	stw	r16,0(sp)
   244d4:	2025883a 	mov	r18,r4
   244d8:	10002826 	beq	r2,zero,2457c <__sfp+0xcc>
   244dc:	8c40b804 	addi	r17,r17,736
   244e0:	043fffc4 	movi	r16,-1
   244e4:	89400117 	ldw	r5,4(r17)
   244e8:	88800217 	ldw	r2,8(r17)
   244ec:	297fffc4 	addi	r5,r5,-1
   244f0:	28000a16 	blt	r5,zero,2451c <__sfp+0x6c>
   244f4:	10c0030f 	ldh	r3,12(r2)
   244f8:	18000c26 	beq	r3,zero,2452c <__sfp+0x7c>
   244fc:	10c01a04 	addi	r3,r2,104
   24500:	00000206 	br	2450c <__sfp+0x5c>
   24504:	19bfe90f 	ldh	r6,-92(r3)
   24508:	30000826 	beq	r6,zero,2452c <__sfp+0x7c>
   2450c:	297fffc4 	addi	r5,r5,-1
   24510:	18bffd04 	addi	r2,r3,-12
   24514:	18c01704 	addi	r3,r3,92
   24518:	2c3ffa1e 	bne	r5,r16,24504 <__sfp+0x54>
   2451c:	88800017 	ldw	r2,0(r17)
   24520:	10001926 	beq	r2,zero,24588 <__sfp+0xd8>
   24524:	1023883a 	mov	r17,r2
   24528:	003fee06 	br	244e4 <__sfp+0x34>
   2452c:	00ffffc4 	movi	r3,-1
   24530:	10c0038d 	sth	r3,14(r2)
   24534:	00c00044 	movi	r3,1
   24538:	10c0030d 	sth	r3,12(r2)
   2453c:	10000015 	stw	zero,0(r2)
   24540:	10000215 	stw	zero,8(r2)
   24544:	10000115 	stw	zero,4(r2)
   24548:	10000415 	stw	zero,16(r2)
   2454c:	10000515 	stw	zero,20(r2)
   24550:	10000615 	stw	zero,24(r2)
   24554:	10000c15 	stw	zero,48(r2)
   24558:	10000d15 	stw	zero,52(r2)
   2455c:	10001115 	stw	zero,68(r2)
   24560:	10001215 	stw	zero,72(r2)
   24564:	dfc00317 	ldw	ra,12(sp)
   24568:	dc800217 	ldw	r18,8(sp)
   2456c:	dc400117 	ldw	r17,4(sp)
   24570:	dc000017 	ldw	r16,0(sp)
   24574:	dec00404 	addi	sp,sp,16
   24578:	f800283a 	ret
   2457c:	8809883a 	mov	r4,r17
   24580:	00243a40 	call	243a4 <__sinit>
   24584:	003fd506 	br	244dc <__sfp+0x2c>
   24588:	9009883a 	mov	r4,r18
   2458c:	01400104 	movi	r5,4
   24590:	002431c0 	call	2431c <__sfmoreglue>
   24594:	88800015 	stw	r2,0(r17)
   24598:	103fe21e 	bne	r2,zero,24524 <__sfp+0x74>
   2459c:	00800304 	movi	r2,12
   245a0:	90800015 	stw	r2,0(r18)
   245a4:	0005883a 	mov	r2,zero
   245a8:	003fee06 	br	24564 <__sfp+0xb4>

000245ac <__sfp_lock_acquire>:
   245ac:	f800283a 	ret

000245b0 <__sfp_lock_release>:
   245b0:	f800283a 	ret

000245b4 <__sinit_lock_acquire>:
   245b4:	f800283a 	ret

000245b8 <__sinit_lock_release>:
   245b8:	f800283a 	ret

000245bc <__fp_lock_all>:
   245bc:	008001f4 	movhi	r2,7
   245c0:	10b96e04 	addi	r2,r2,-6728
   245c4:	11000017 	ldw	r4,0(r2)
   245c8:	014000b4 	movhi	r5,2
   245cc:	2950c004 	addi	r5,r5,17152
   245d0:	0024edc1 	jmpi	24edc <_fwalk>

000245d4 <__fp_unlock_all>:
   245d4:	008001f4 	movhi	r2,7
   245d8:	10b96e04 	addi	r2,r2,-6728
   245dc:	11000017 	ldw	r4,0(r2)
   245e0:	014000b4 	movhi	r5,2
   245e4:	2950c204 	addi	r5,r5,17160
   245e8:	0024edc1 	jmpi	24edc <_fwalk>

000245ec <_malloc_trim_r>:
   245ec:	defffb04 	addi	sp,sp,-20
   245f0:	dcc00315 	stw	r19,12(sp)
   245f4:	dc800215 	stw	r18,8(sp)
   245f8:	dc400115 	stw	r17,4(sp)
   245fc:	dc000015 	stw	r16,0(sp)
   24600:	2827883a 	mov	r19,r5
   24604:	dfc00415 	stw	ra,16(sp)
   24608:	044001f4 	movhi	r17,7
   2460c:	8c73e904 	addi	r17,r17,-12380
   24610:	2021883a 	mov	r16,r4
   24614:	002a37c0 	call	2a37c <__malloc_lock>
   24618:	88800217 	ldw	r2,8(r17)
   2461c:	14800117 	ldw	r18,4(r2)
   24620:	00bfff04 	movi	r2,-4
   24624:	90a4703a 	and	r18,r18,r2
   24628:	9083fbc4 	addi	r2,r18,4079
   2462c:	14e7c83a 	sub	r19,r2,r19
   24630:	9826d33a 	srli	r19,r19,12
   24634:	0083ffc4 	movi	r2,4095
   24638:	9cffffc4 	addi	r19,r19,-1
   2463c:	9826933a 	slli	r19,r19,12
   24640:	14c0060e 	bge	r2,r19,2465c <_malloc_trim_r+0x70>
   24644:	8009883a 	mov	r4,r16
   24648:	000b883a 	mov	r5,zero
   2464c:	00275940 	call	27594 <_sbrk_r>
   24650:	88c00217 	ldw	r3,8(r17)
   24654:	1c87883a 	add	r3,r3,r18
   24658:	10c00a26 	beq	r2,r3,24684 <_malloc_trim_r+0x98>
   2465c:	8009883a 	mov	r4,r16
   24660:	002a39c0 	call	2a39c <__malloc_unlock>
   24664:	0005883a 	mov	r2,zero
   24668:	dfc00417 	ldw	ra,16(sp)
   2466c:	dcc00317 	ldw	r19,12(sp)
   24670:	dc800217 	ldw	r18,8(sp)
   24674:	dc400117 	ldw	r17,4(sp)
   24678:	dc000017 	ldw	r16,0(sp)
   2467c:	dec00504 	addi	sp,sp,20
   24680:	f800283a 	ret
   24684:	8009883a 	mov	r4,r16
   24688:	04cbc83a 	sub	r5,zero,r19
   2468c:	00275940 	call	27594 <_sbrk_r>
   24690:	00ffffc4 	movi	r3,-1
   24694:	10c01326 	beq	r2,r3,246e4 <_malloc_trim_r+0xf8>
   24698:	008001f4 	movhi	r2,7
   2469c:	10b98e04 	addi	r2,r2,-6600
   246a0:	11000017 	ldw	r4,0(r2)
   246a4:	88c00217 	ldw	r3,8(r17)
   246a8:	94e5c83a 	sub	r18,r18,r19
   246ac:	94800054 	ori	r18,r18,1
   246b0:	24e7c83a 	sub	r19,r4,r19
   246b4:	1c800115 	stw	r18,4(r3)
   246b8:	8009883a 	mov	r4,r16
   246bc:	14c00015 	stw	r19,0(r2)
   246c0:	002a39c0 	call	2a39c <__malloc_unlock>
   246c4:	00800044 	movi	r2,1
   246c8:	dfc00417 	ldw	ra,16(sp)
   246cc:	dcc00317 	ldw	r19,12(sp)
   246d0:	dc800217 	ldw	r18,8(sp)
   246d4:	dc400117 	ldw	r17,4(sp)
   246d8:	dc000017 	ldw	r16,0(sp)
   246dc:	dec00504 	addi	sp,sp,20
   246e0:	f800283a 	ret
   246e4:	8009883a 	mov	r4,r16
   246e8:	000b883a 	mov	r5,zero
   246ec:	00275940 	call	27594 <_sbrk_r>
   246f0:	88c00217 	ldw	r3,8(r17)
   246f4:	014003c4 	movi	r5,15
   246f8:	10c9c83a 	sub	r4,r2,r3
   246fc:	293fd70e 	bge	r5,r4,2465c <_malloc_trim_r+0x70>
   24700:	014001f4 	movhi	r5,7
   24704:	29797004 	addi	r5,r5,-6720
   24708:	29400017 	ldw	r5,0(r5)
   2470c:	21000054 	ori	r4,r4,1
   24710:	19000115 	stw	r4,4(r3)
   24714:	1145c83a 	sub	r2,r2,r5
   24718:	014001f4 	movhi	r5,7
   2471c:	29798e04 	addi	r5,r5,-6600
   24720:	28800015 	stw	r2,0(r5)
   24724:	003fcd06 	br	2465c <_malloc_trim_r+0x70>

00024728 <_free_r>:
   24728:	defffd04 	addi	sp,sp,-12
   2472c:	dc400115 	stw	r17,4(sp)
   24730:	dc000015 	stw	r16,0(sp)
   24734:	dfc00215 	stw	ra,8(sp)
   24738:	2821883a 	mov	r16,r5
   2473c:	2023883a 	mov	r17,r4
   24740:	28004b26 	beq	r5,zero,24870 <_free_r+0x148>
   24744:	002a37c0 	call	2a37c <__malloc_lock>
   24748:	823fff17 	ldw	r8,-4(r16)
   2474c:	00bfff84 	movi	r2,-2
   24750:	81bffe04 	addi	r6,r16,-8
   24754:	4084703a 	and	r2,r8,r2
   24758:	3087883a 	add	r3,r6,r2
   2475c:	014001f4 	movhi	r5,7
   24760:	2973e904 	addi	r5,r5,-12380
   24764:	1a400117 	ldw	r9,4(r3)
   24768:	29000217 	ldw	r4,8(r5)
   2476c:	01ffff04 	movi	r7,-4
   24770:	49ce703a 	and	r7,r9,r7
   24774:	20c06526 	beq	r4,r3,2490c <_free_r+0x1e4>
   24778:	19c00115 	stw	r7,4(r3)
   2477c:	4200004c 	andi	r8,r8,1
   24780:	40003026 	beq	r8,zero,24844 <_free_r+0x11c>
   24784:	0009883a 	mov	r4,zero
   24788:	19d1883a 	add	r8,r3,r7
   2478c:	42000117 	ldw	r8,4(r8)
   24790:	4200004c 	andi	r8,r8,1
   24794:	4000061e 	bne	r8,zero,247b0 <_free_r+0x88>
   24798:	11c5883a 	add	r2,r2,r7
   2479c:	19c00217 	ldw	r7,8(r3)
   247a0:	20004e26 	beq	r4,zero,248dc <_free_r+0x1b4>
   247a4:	18c00317 	ldw	r3,12(r3)
   247a8:	38c00315 	stw	r3,12(r7)
   247ac:	19c00215 	stw	r7,8(r3)
   247b0:	11c00054 	ori	r7,r2,1
   247b4:	3087883a 	add	r3,r6,r2
   247b8:	31c00115 	stw	r7,4(r6)
   247bc:	18800015 	stw	r2,0(r3)
   247c0:	20001a1e 	bne	r4,zero,2482c <_free_r+0x104>
   247c4:	00c07fc4 	movi	r3,511
   247c8:	18802e2e 	bgeu	r3,r2,24884 <_free_r+0x15c>
   247cc:	1006d27a 	srli	r3,r2,9
   247d0:	01000104 	movi	r4,4
   247d4:	20c06636 	bltu	r4,r3,24970 <_free_r+0x248>
   247d8:	1008d1ba 	srli	r4,r2,6
   247dc:	21000e04 	addi	r4,r4,56
   247e0:	210f883a 	add	r7,r4,r4
   247e4:	39cf883a 	add	r7,r7,r7
   247e8:	39cf883a 	add	r7,r7,r7
   247ec:	29cf883a 	add	r7,r5,r7
   247f0:	38c00217 	ldw	r3,8(r7)
   247f4:	014001f4 	movhi	r5,7
   247f8:	2973e904 	addi	r5,r5,-12380
   247fc:	19c06126 	beq	r3,r7,24984 <_free_r+0x25c>
   24800:	013fff04 	movi	r4,-4
   24804:	19400117 	ldw	r5,4(r3)
   24808:	290a703a 	and	r5,r5,r4
   2480c:	1140022e 	bgeu	r2,r5,24818 <_free_r+0xf0>
   24810:	18c00217 	ldw	r3,8(r3)
   24814:	38fffb1e 	bne	r7,r3,24804 <_free_r+0xdc>
   24818:	18800317 	ldw	r2,12(r3)
   2481c:	30800315 	stw	r2,12(r6)
   24820:	30c00215 	stw	r3,8(r6)
   24824:	11800215 	stw	r6,8(r2)
   24828:	19800315 	stw	r6,12(r3)
   2482c:	8809883a 	mov	r4,r17
   24830:	dfc00217 	ldw	ra,8(sp)
   24834:	dc400117 	ldw	r17,4(sp)
   24838:	dc000017 	ldw	r16,0(sp)
   2483c:	dec00304 	addi	sp,sp,12
   24840:	002a39c1 	jmpi	2a39c <__malloc_unlock>
   24844:	813ffe17 	ldw	r4,-8(r16)
   24848:	2a400204 	addi	r9,r5,8
   2484c:	310dc83a 	sub	r6,r6,r4
   24850:	32000217 	ldw	r8,8(r6)
   24854:	1105883a 	add	r2,r2,r4
   24858:	42404326 	beq	r8,r9,24968 <_free_r+0x240>
   2485c:	32400317 	ldw	r9,12(r6)
   24860:	0009883a 	mov	r4,zero
   24864:	42400315 	stw	r9,12(r8)
   24868:	4a000215 	stw	r8,8(r9)
   2486c:	003fc606 	br	24788 <_free_r+0x60>
   24870:	dfc00217 	ldw	ra,8(sp)
   24874:	dc400117 	ldw	r17,4(sp)
   24878:	dc000017 	ldw	r16,0(sp)
   2487c:	dec00304 	addi	sp,sp,12
   24880:	f800283a 	ret
   24884:	1004d0fa 	srli	r2,r2,3
   24888:	02000044 	movi	r8,1
   2488c:	29c00117 	ldw	r7,4(r5)
   24890:	1087883a 	add	r3,r2,r2
   24894:	18c7883a 	add	r3,r3,r3
   24898:	1005d0ba 	srai	r2,r2,2
   2489c:	18c7883a 	add	r3,r3,r3
   248a0:	28c7883a 	add	r3,r5,r3
   248a4:	19000217 	ldw	r4,8(r3)
   248a8:	4084983a 	sll	r2,r8,r2
   248ac:	30c00315 	stw	r3,12(r6)
   248b0:	31000215 	stw	r4,8(r6)
   248b4:	11c4b03a 	or	r2,r2,r7
   248b8:	21800315 	stw	r6,12(r4)
   248bc:	8809883a 	mov	r4,r17
   248c0:	28800115 	stw	r2,4(r5)
   248c4:	19800215 	stw	r6,8(r3)
   248c8:	dfc00217 	ldw	ra,8(sp)
   248cc:	dc400117 	ldw	r17,4(sp)
   248d0:	dc000017 	ldw	r16,0(sp)
   248d4:	dec00304 	addi	sp,sp,12
   248d8:	002a39c1 	jmpi	2a39c <__malloc_unlock>
   248dc:	020001f4 	movhi	r8,7
   248e0:	4233eb04 	addi	r8,r8,-12372
   248e4:	3a3faf1e 	bne	r7,r8,247a4 <_free_r+0x7c>
   248e8:	29800515 	stw	r6,20(r5)
   248ec:	29800415 	stw	r6,16(r5)
   248f0:	11000054 	ori	r4,r2,1
   248f4:	3087883a 	add	r3,r6,r2
   248f8:	31c00315 	stw	r7,12(r6)
   248fc:	31c00215 	stw	r7,8(r6)
   24900:	31000115 	stw	r4,4(r6)
   24904:	18800015 	stw	r2,0(r3)
   24908:	003fc806 	br	2482c <_free_r+0x104>
   2490c:	4200004c 	andi	r8,r8,1
   24910:	3885883a 	add	r2,r7,r2
   24914:	4000071e 	bne	r8,zero,24934 <_free_r+0x20c>
   24918:	81fffe17 	ldw	r7,-8(r16)
   2491c:	31cdc83a 	sub	r6,r6,r7
   24920:	30c00317 	ldw	r3,12(r6)
   24924:	31000217 	ldw	r4,8(r6)
   24928:	11c5883a 	add	r2,r2,r7
   2492c:	20c00315 	stw	r3,12(r4)
   24930:	19000215 	stw	r4,8(r3)
   24934:	00c001f4 	movhi	r3,7
   24938:	18f97104 	addi	r3,r3,-6716
   2493c:	18c00017 	ldw	r3,0(r3)
   24940:	11000054 	ori	r4,r2,1
   24944:	31000115 	stw	r4,4(r6)
   24948:	29800215 	stw	r6,8(r5)
   2494c:	10ffb736 	bltu	r2,r3,2482c <_free_r+0x104>
   24950:	008001f4 	movhi	r2,7
   24954:	10b98604 	addi	r2,r2,-6632
   24958:	11400017 	ldw	r5,0(r2)
   2495c:	8809883a 	mov	r4,r17
   24960:	00245ec0 	call	245ec <_malloc_trim_r>
   24964:	003fb106 	br	2482c <_free_r+0x104>
   24968:	01000044 	movi	r4,1
   2496c:	003f8606 	br	24788 <_free_r+0x60>
   24970:	01000504 	movi	r4,20
   24974:	20c00b36 	bltu	r4,r3,249a4 <_free_r+0x27c>
   24978:	190016c4 	addi	r4,r3,91
   2497c:	210f883a 	add	r7,r4,r4
   24980:	003f9806 	br	247e4 <_free_r+0xbc>
   24984:	2009d0ba 	srai	r4,r4,2
   24988:	00800044 	movi	r2,1
   2498c:	29c00117 	ldw	r7,4(r5)
   24990:	1108983a 	sll	r4,r2,r4
   24994:	1805883a 	mov	r2,r3
   24998:	21c8b03a 	or	r4,r4,r7
   2499c:	29000115 	stw	r4,4(r5)
   249a0:	003f9e06 	br	2481c <_free_r+0xf4>
   249a4:	01001504 	movi	r4,84
   249a8:	20c00436 	bltu	r4,r3,249bc <_free_r+0x294>
   249ac:	1008d33a 	srli	r4,r2,12
   249b0:	21001b84 	addi	r4,r4,110
   249b4:	210f883a 	add	r7,r4,r4
   249b8:	003f8a06 	br	247e4 <_free_r+0xbc>
   249bc:	01005504 	movi	r4,340
   249c0:	20c00436 	bltu	r4,r3,249d4 <_free_r+0x2ac>
   249c4:	1008d3fa 	srli	r4,r2,15
   249c8:	21001dc4 	addi	r4,r4,119
   249cc:	210f883a 	add	r7,r4,r4
   249d0:	003f8406 	br	247e4 <_free_r+0xbc>
   249d4:	01015504 	movi	r4,1364
   249d8:	20c00436 	bltu	r4,r3,249ec <_free_r+0x2c4>
   249dc:	1008d4ba 	srli	r4,r2,18
   249e0:	21001f04 	addi	r4,r4,124
   249e4:	210f883a 	add	r7,r4,r4
   249e8:	003f7e06 	br	247e4 <_free_r+0xbc>
   249ec:	01c03f04 	movi	r7,252
   249f0:	01001f84 	movi	r4,126
   249f4:	003f7b06 	br	247e4 <_free_r+0xbc>

000249f8 <__sfvwrite_r>:
   249f8:	30800217 	ldw	r2,8(r6)
   249fc:	defff504 	addi	sp,sp,-44
   24a00:	dd400615 	stw	r21,24(sp)
   24a04:	dd000515 	stw	r20,20(sp)
   24a08:	dc000115 	stw	r16,4(sp)
   24a0c:	dfc00a15 	stw	ra,40(sp)
   24a10:	df000915 	stw	fp,36(sp)
   24a14:	ddc00815 	stw	r23,32(sp)
   24a18:	dd800715 	stw	r22,28(sp)
   24a1c:	dcc00415 	stw	r19,16(sp)
   24a20:	dc800315 	stw	r18,12(sp)
   24a24:	dc400215 	stw	r17,8(sp)
   24a28:	3029883a 	mov	r20,r6
   24a2c:	202b883a 	mov	r21,r4
   24a30:	2821883a 	mov	r16,r5
   24a34:	10002126 	beq	r2,zero,24abc <__sfvwrite_r+0xc4>
   24a38:	2880030b 	ldhu	r2,12(r5)
   24a3c:	10c0020c 	andi	r3,r2,8
   24a40:	18ffffcc 	andi	r3,r3,65535
   24a44:	18e0001c 	xori	r3,r3,32768
   24a48:	18e00004 	addi	r3,r3,-32768
   24a4c:	18002826 	beq	r3,zero,24af0 <__sfvwrite_r+0xf8>
   24a50:	28c00417 	ldw	r3,16(r5)
   24a54:	18002626 	beq	r3,zero,24af0 <__sfvwrite_r+0xf8>
   24a58:	10c0008c 	andi	r3,r2,2
   24a5c:	18ffffcc 	andi	r3,r3,65535
   24a60:	18e0001c 	xori	r3,r3,32768
   24a64:	18e00004 	addi	r3,r3,-32768
   24a68:	a4400017 	ldw	r17,0(r20)
   24a6c:	18002b26 	beq	r3,zero,24b1c <__sfvwrite_r+0x124>
   24a70:	0027883a 	mov	r19,zero
   24a74:	0025883a 	mov	r18,zero
   24a78:	05810004 	movi	r22,1024
   24a7c:	980d883a 	mov	r6,r19
   24a80:	a809883a 	mov	r4,r21
   24a84:	90004f26 	beq	r18,zero,24bc4 <__sfvwrite_r+0x1cc>
   24a88:	900f883a 	mov	r7,r18
   24a8c:	81400717 	ldw	r5,28(r16)
   24a90:	b480012e 	bgeu	r22,r18,24a98 <__sfvwrite_r+0xa0>
   24a94:	01c10004 	movi	r7,1024
   24a98:	80800917 	ldw	r2,36(r16)
   24a9c:	103ee83a 	callr	r2
   24aa0:	0080540e 	bge	zero,r2,24bf4 <__sfvwrite_r+0x1fc>
   24aa4:	a0c00217 	ldw	r3,8(r20)
   24aa8:	98a7883a 	add	r19,r19,r2
   24aac:	90a5c83a 	sub	r18,r18,r2
   24ab0:	1885c83a 	sub	r2,r3,r2
   24ab4:	a0800215 	stw	r2,8(r20)
   24ab8:	103ff01e 	bne	r2,zero,24a7c <__sfvwrite_r+0x84>
   24abc:	0005883a 	mov	r2,zero
   24ac0:	dfc00a17 	ldw	ra,40(sp)
   24ac4:	df000917 	ldw	fp,36(sp)
   24ac8:	ddc00817 	ldw	r23,32(sp)
   24acc:	dd800717 	ldw	r22,28(sp)
   24ad0:	dd400617 	ldw	r21,24(sp)
   24ad4:	dd000517 	ldw	r20,20(sp)
   24ad8:	dcc00417 	ldw	r19,16(sp)
   24adc:	dc800317 	ldw	r18,12(sp)
   24ae0:	dc400217 	ldw	r17,8(sp)
   24ae4:	dc000117 	ldw	r16,4(sp)
   24ae8:	dec00b04 	addi	sp,sp,44
   24aec:	f800283a 	ret
   24af0:	a809883a 	mov	r4,r21
   24af4:	800b883a 	mov	r5,r16
   24af8:	002271c0 	call	2271c <__swsetup_r>
   24afc:	1000f01e 	bne	r2,zero,24ec0 <__sfvwrite_r+0x4c8>
   24b00:	8080030b 	ldhu	r2,12(r16)
   24b04:	a4400017 	ldw	r17,0(r20)
   24b08:	10c0008c 	andi	r3,r2,2
   24b0c:	18ffffcc 	andi	r3,r3,65535
   24b10:	18e0001c 	xori	r3,r3,32768
   24b14:	18e00004 	addi	r3,r3,-32768
   24b18:	183fd51e 	bne	r3,zero,24a70 <__sfvwrite_r+0x78>
   24b1c:	10c0004c 	andi	r3,r2,1
   24b20:	002d883a 	mov	r22,zero
   24b24:	1800381e 	bne	r3,zero,24c08 <__sfvwrite_r+0x210>
   24b28:	0025883a 	mov	r18,zero
   24b2c:	90002126 	beq	r18,zero,24bb4 <__sfvwrite_r+0x1bc>
   24b30:	10c0800c 	andi	r3,r2,512
   24b34:	18ffffcc 	andi	r3,r3,65535
   24b38:	18e0001c 	xori	r3,r3,32768
   24b3c:	18e00004 	addi	r3,r3,-32768
   24b40:	84c00217 	ldw	r19,8(r16)
   24b44:	18006b26 	beq	r3,zero,24cf4 <__sfvwrite_r+0x2fc>
   24b48:	980f883a 	mov	r7,r19
   24b4c:	94c08636 	bltu	r18,r19,24d68 <__sfvwrite_r+0x370>
   24b50:	10c1200c 	andi	r3,r2,1152
   24b54:	18009f1e 	bne	r3,zero,24dd4 <__sfvwrite_r+0x3dc>
   24b58:	81000017 	ldw	r4,0(r16)
   24b5c:	982f883a 	mov	r23,r19
   24b60:	9039883a 	mov	fp,r18
   24b64:	9027883a 	mov	r19,r18
   24b68:	380d883a 	mov	r6,r7
   24b6c:	b00b883a 	mov	r5,r22
   24b70:	d9c00015 	stw	r7,0(sp)
   24b74:	0025c7c0 	call	25c7c <memmove>
   24b78:	d9c00017 	ldw	r7,0(sp)
   24b7c:	81000217 	ldw	r4,8(r16)
   24b80:	80800017 	ldw	r2,0(r16)
   24b84:	25efc83a 	sub	r23,r4,r23
   24b88:	11cf883a 	add	r7,r2,r7
   24b8c:	85c00215 	stw	r23,8(r16)
   24b90:	81c00015 	stw	r7,0(r16)
   24b94:	a0800217 	ldw	r2,8(r20)
   24b98:	b72d883a 	add	r22,r22,fp
   24b9c:	9725c83a 	sub	r18,r18,fp
   24ba0:	14e7c83a 	sub	r19,r2,r19
   24ba4:	a4c00215 	stw	r19,8(r20)
   24ba8:	983fc426 	beq	r19,zero,24abc <__sfvwrite_r+0xc4>
   24bac:	8080030b 	ldhu	r2,12(r16)
   24bb0:	903fdf1e 	bne	r18,zero,24b30 <__sfvwrite_r+0x138>
   24bb4:	8d800017 	ldw	r22,0(r17)
   24bb8:	8c800117 	ldw	r18,4(r17)
   24bbc:	8c400204 	addi	r17,r17,8
   24bc0:	003fda06 	br	24b2c <__sfvwrite_r+0x134>
   24bc4:	8cc00017 	ldw	r19,0(r17)
   24bc8:	8c800117 	ldw	r18,4(r17)
   24bcc:	8c400204 	addi	r17,r17,8
   24bd0:	003faa06 	br	24a7c <__sfvwrite_r+0x84>
   24bd4:	0026f340 	call	26f34 <_realloc_r>
   24bd8:	102f883a 	mov	r23,r2
   24bdc:	10009f1e 	bne	r2,zero,24e5c <__sfvwrite_r+0x464>
   24be0:	81400417 	ldw	r5,16(r16)
   24be4:	a809883a 	mov	r4,r21
   24be8:	00247280 	call	24728 <_free_r>
   24bec:	00800304 	movi	r2,12
   24bf0:	a8800015 	stw	r2,0(r21)
   24bf4:	80c0030b 	ldhu	r3,12(r16)
   24bf8:	00bfffc4 	movi	r2,-1
   24bfc:	18c01014 	ori	r3,r3,64
   24c00:	80c0030d 	sth	r3,12(r16)
   24c04:	003fae06 	br	24ac0 <__sfvwrite_r+0xc8>
   24c08:	0007883a 	mov	r3,zero
   24c0c:	0039883a 	mov	fp,zero
   24c10:	0025883a 	mov	r18,zero
   24c14:	90001e26 	beq	r18,zero,24c90 <__sfvwrite_r+0x298>
   24c18:	18006526 	beq	r3,zero,24db0 <__sfvwrite_r+0x3b8>
   24c1c:	b02f883a 	mov	r23,r22
   24c20:	9580012e 	bgeu	r18,r22,24c28 <__sfvwrite_r+0x230>
   24c24:	902f883a 	mov	r23,r18
   24c28:	81000017 	ldw	r4,0(r16)
   24c2c:	80800417 	ldw	r2,16(r16)
   24c30:	84c00217 	ldw	r19,8(r16)
   24c34:	81c00517 	ldw	r7,20(r16)
   24c38:	1100022e 	bgeu	r2,r4,24c44 <__sfvwrite_r+0x24c>
   24c3c:	99e7883a 	add	r19,r19,r7
   24c40:	9dc01816 	blt	r19,r23,24ca4 <__sfvwrite_r+0x2ac>
   24c44:	b9c03b16 	blt	r23,r7,24d34 <__sfvwrite_r+0x33c>
   24c48:	80800917 	ldw	r2,36(r16)
   24c4c:	81400717 	ldw	r5,28(r16)
   24c50:	a809883a 	mov	r4,r21
   24c54:	d8c00015 	stw	r3,0(sp)
   24c58:	e00d883a 	mov	r6,fp
   24c5c:	103ee83a 	callr	r2
   24c60:	1027883a 	mov	r19,r2
   24c64:	d8c00017 	ldw	r3,0(sp)
   24c68:	00bfe20e 	bge	zero,r2,24bf4 <__sfvwrite_r+0x1fc>
   24c6c:	b4edc83a 	sub	r22,r22,r19
   24c70:	b0001a26 	beq	r22,zero,24cdc <__sfvwrite_r+0x2e4>
   24c74:	a0800217 	ldw	r2,8(r20)
   24c78:	e4f9883a 	add	fp,fp,r19
   24c7c:	94e5c83a 	sub	r18,r18,r19
   24c80:	14e7c83a 	sub	r19,r2,r19
   24c84:	a4c00215 	stw	r19,8(r20)
   24c88:	983f8c26 	beq	r19,zero,24abc <__sfvwrite_r+0xc4>
   24c8c:	903fe21e 	bne	r18,zero,24c18 <__sfvwrite_r+0x220>
   24c90:	8f000017 	ldw	fp,0(r17)
   24c94:	8c800117 	ldw	r18,4(r17)
   24c98:	0007883a 	mov	r3,zero
   24c9c:	8c400204 	addi	r17,r17,8
   24ca0:	003fdc06 	br	24c14 <__sfvwrite_r+0x21c>
   24ca4:	e00b883a 	mov	r5,fp
   24ca8:	980d883a 	mov	r6,r19
   24cac:	d8c00015 	stw	r3,0(sp)
   24cb0:	0025c7c0 	call	25c7c <memmove>
   24cb4:	80800017 	ldw	r2,0(r16)
   24cb8:	a809883a 	mov	r4,r21
   24cbc:	800b883a 	mov	r5,r16
   24cc0:	14c5883a 	add	r2,r2,r19
   24cc4:	80800015 	stw	r2,0(r16)
   24cc8:	00240e80 	call	240e8 <_fflush_r>
   24ccc:	d8c00017 	ldw	r3,0(sp)
   24cd0:	103fc81e 	bne	r2,zero,24bf4 <__sfvwrite_r+0x1fc>
   24cd4:	b4edc83a 	sub	r22,r22,r19
   24cd8:	b03fe61e 	bne	r22,zero,24c74 <__sfvwrite_r+0x27c>
   24cdc:	a809883a 	mov	r4,r21
   24ce0:	800b883a 	mov	r5,r16
   24ce4:	00240e80 	call	240e8 <_fflush_r>
   24ce8:	103fc21e 	bne	r2,zero,24bf4 <__sfvwrite_r+0x1fc>
   24cec:	0007883a 	mov	r3,zero
   24cf0:	003fe006 	br	24c74 <__sfvwrite_r+0x27c>
   24cf4:	81000017 	ldw	r4,0(r16)
   24cf8:	80800417 	ldw	r2,16(r16)
   24cfc:	1100022e 	bgeu	r2,r4,24d08 <__sfvwrite_r+0x310>
   24d00:	9839883a 	mov	fp,r19
   24d04:	9c806036 	bltu	r19,r18,24e88 <__sfvwrite_r+0x490>
   24d08:	81c00517 	ldw	r7,20(r16)
   24d0c:	91c01c36 	bltu	r18,r7,24d80 <__sfvwrite_r+0x388>
   24d10:	80800917 	ldw	r2,36(r16)
   24d14:	81400717 	ldw	r5,28(r16)
   24d18:	a809883a 	mov	r4,r21
   24d1c:	b00d883a 	mov	r6,r22
   24d20:	103ee83a 	callr	r2
   24d24:	1027883a 	mov	r19,r2
   24d28:	00bfb20e 	bge	zero,r2,24bf4 <__sfvwrite_r+0x1fc>
   24d2c:	1039883a 	mov	fp,r2
   24d30:	003f9806 	br	24b94 <__sfvwrite_r+0x19c>
   24d34:	b80d883a 	mov	r6,r23
   24d38:	e00b883a 	mov	r5,fp
   24d3c:	d8c00015 	stw	r3,0(sp)
   24d40:	0025c7c0 	call	25c7c <memmove>
   24d44:	80800217 	ldw	r2,8(r16)
   24d48:	81000017 	ldw	r4,0(r16)
   24d4c:	b827883a 	mov	r19,r23
   24d50:	15c5c83a 	sub	r2,r2,r23
   24d54:	25ef883a 	add	r23,r4,r23
   24d58:	80800215 	stw	r2,8(r16)
   24d5c:	85c00015 	stw	r23,0(r16)
   24d60:	d8c00017 	ldw	r3,0(sp)
   24d64:	003fc106 	br	24c6c <__sfvwrite_r+0x274>
   24d68:	81000017 	ldw	r4,0(r16)
   24d6c:	902f883a 	mov	r23,r18
   24d70:	9039883a 	mov	fp,r18
   24d74:	9027883a 	mov	r19,r18
   24d78:	900f883a 	mov	r7,r18
   24d7c:	003f7a06 	br	24b68 <__sfvwrite_r+0x170>
   24d80:	b00b883a 	mov	r5,r22
   24d84:	900d883a 	mov	r6,r18
   24d88:	0025c7c0 	call	25c7c <memmove>
   24d8c:	80c00217 	ldw	r3,8(r16)
   24d90:	80800017 	ldw	r2,0(r16)
   24d94:	9027883a 	mov	r19,r18
   24d98:	1c87c83a 	sub	r3,r3,r18
   24d9c:	1485883a 	add	r2,r2,r18
   24da0:	80c00215 	stw	r3,8(r16)
   24da4:	80800015 	stw	r2,0(r16)
   24da8:	9039883a 	mov	fp,r18
   24dac:	003f7906 	br	24b94 <__sfvwrite_r+0x19c>
   24db0:	e009883a 	mov	r4,fp
   24db4:	01400284 	movi	r5,10
   24db8:	900d883a 	mov	r6,r18
   24dbc:	0025a440 	call	25a44 <memchr>
   24dc0:	10003c26 	beq	r2,zero,24eb4 <__sfvwrite_r+0x4bc>
   24dc4:	15800044 	addi	r22,r2,1
   24dc8:	b72dc83a 	sub	r22,r22,fp
   24dcc:	00c00044 	movi	r3,1
   24dd0:	003f9206 	br	24c1c <__sfvwrite_r+0x224>
   24dd4:	81000517 	ldw	r4,20(r16)
   24dd8:	81400417 	ldw	r5,16(r16)
   24ddc:	80c00017 	ldw	r3,0(r16)
   24de0:	210d883a 	add	r6,r4,r4
   24de4:	3109883a 	add	r4,r6,r4
   24de8:	2026d7fa 	srli	r19,r4,31
   24dec:	1979c83a 	sub	fp,r3,r5
   24df0:	e1800044 	addi	r6,fp,1
   24df4:	9909883a 	add	r4,r19,r4
   24df8:	2027d07a 	srai	r19,r4,1
   24dfc:	3489883a 	add	r4,r6,r18
   24e00:	980d883a 	mov	r6,r19
   24e04:	9900022e 	bgeu	r19,r4,24e10 <__sfvwrite_r+0x418>
   24e08:	2027883a 	mov	r19,r4
   24e0c:	200d883a 	mov	r6,r4
   24e10:	1081000c 	andi	r2,r2,1024
   24e14:	10bfffcc 	andi	r2,r2,65535
   24e18:	10a0001c 	xori	r2,r2,32768
   24e1c:	10a00004 	addi	r2,r2,-32768
   24e20:	a809883a 	mov	r4,r21
   24e24:	103f6b26 	beq	r2,zero,24bd4 <__sfvwrite_r+0x1dc>
   24e28:	300b883a 	mov	r5,r6
   24e2c:	00252c00 	call	252c0 <_malloc_r>
   24e30:	102f883a 	mov	r23,r2
   24e34:	103f6d26 	beq	r2,zero,24bec <__sfvwrite_r+0x1f4>
   24e38:	81400417 	ldw	r5,16(r16)
   24e3c:	1009883a 	mov	r4,r2
   24e40:	e00d883a 	mov	r6,fp
   24e44:	0025b3c0 	call	25b3c <memcpy>
   24e48:	8080030b 	ldhu	r2,12(r16)
   24e4c:	00fedfc4 	movi	r3,-1153
   24e50:	10c4703a 	and	r2,r2,r3
   24e54:	10802014 	ori	r2,r2,128
   24e58:	8080030d 	sth	r2,12(r16)
   24e5c:	bf09883a 	add	r4,r23,fp
   24e60:	9f07c83a 	sub	r3,r19,fp
   24e64:	85c00415 	stw	r23,16(r16)
   24e68:	84c00515 	stw	r19,20(r16)
   24e6c:	81000015 	stw	r4,0(r16)
   24e70:	902f883a 	mov	r23,r18
   24e74:	80c00215 	stw	r3,8(r16)
   24e78:	9039883a 	mov	fp,r18
   24e7c:	9027883a 	mov	r19,r18
   24e80:	900f883a 	mov	r7,r18
   24e84:	003f3806 	br	24b68 <__sfvwrite_r+0x170>
   24e88:	b00b883a 	mov	r5,r22
   24e8c:	980d883a 	mov	r6,r19
   24e90:	0025c7c0 	call	25c7c <memmove>
   24e94:	80800017 	ldw	r2,0(r16)
   24e98:	a809883a 	mov	r4,r21
   24e9c:	800b883a 	mov	r5,r16
   24ea0:	14c5883a 	add	r2,r2,r19
   24ea4:	80800015 	stw	r2,0(r16)
   24ea8:	00240e80 	call	240e8 <_fflush_r>
   24eac:	103f3926 	beq	r2,zero,24b94 <__sfvwrite_r+0x19c>
   24eb0:	003f5006 	br	24bf4 <__sfvwrite_r+0x1fc>
   24eb4:	95800044 	addi	r22,r18,1
   24eb8:	00c00044 	movi	r3,1
   24ebc:	003f5706 	br	24c1c <__sfvwrite_r+0x224>
   24ec0:	80c0030b 	ldhu	r3,12(r16)
   24ec4:	00bfffc4 	movi	r2,-1
   24ec8:	18c01014 	ori	r3,r3,64
   24ecc:	80c0030d 	sth	r3,12(r16)
   24ed0:	00c00244 	movi	r3,9
   24ed4:	a8c00015 	stw	r3,0(r21)
   24ed8:	003ef906 	br	24ac0 <__sfvwrite_r+0xc8>

00024edc <_fwalk>:
   24edc:	defff904 	addi	sp,sp,-28
   24ee0:	dcc00315 	stw	r19,12(sp)
   24ee4:	24c0b804 	addi	r19,r4,736
   24ee8:	dd400515 	stw	r21,20(sp)
   24eec:	dd000415 	stw	r20,16(sp)
   24ef0:	dfc00615 	stw	ra,24(sp)
   24ef4:	dc800215 	stw	r18,8(sp)
   24ef8:	dc400115 	stw	r17,4(sp)
   24efc:	dc000015 	stw	r16,0(sp)
   24f00:	282b883a 	mov	r21,r5
   24f04:	0029883a 	mov	r20,zero
   24f08:	00245ac0 	call	245ac <__sfp_lock_acquire>
   24f0c:	98001226 	beq	r19,zero,24f58 <_fwalk+0x7c>
   24f10:	04bfffc4 	movi	r18,-1
   24f14:	9c400117 	ldw	r17,4(r19)
   24f18:	9c000217 	ldw	r16,8(r19)
   24f1c:	8c7fffc4 	addi	r17,r17,-1
   24f20:	88000b16 	blt	r17,zero,24f50 <_fwalk+0x74>
   24f24:	84000304 	addi	r16,r16,12
   24f28:	80c0000f 	ldh	r3,0(r16)
   24f2c:	8c7fffc4 	addi	r17,r17,-1
   24f30:	813ffd04 	addi	r4,r16,-12
   24f34:	18000426 	beq	r3,zero,24f48 <_fwalk+0x6c>
   24f38:	80c0008f 	ldh	r3,2(r16)
   24f3c:	1c800226 	beq	r3,r18,24f48 <_fwalk+0x6c>
   24f40:	a83ee83a 	callr	r21
   24f44:	a0a8b03a 	or	r20,r20,r2
   24f48:	84001704 	addi	r16,r16,92
   24f4c:	8cbff61e 	bne	r17,r18,24f28 <_fwalk+0x4c>
   24f50:	9cc00017 	ldw	r19,0(r19)
   24f54:	983fef1e 	bne	r19,zero,24f14 <_fwalk+0x38>
   24f58:	00245b00 	call	245b0 <__sfp_lock_release>
   24f5c:	a005883a 	mov	r2,r20
   24f60:	dfc00617 	ldw	ra,24(sp)
   24f64:	dd400517 	ldw	r21,20(sp)
   24f68:	dd000417 	ldw	r20,16(sp)
   24f6c:	dcc00317 	ldw	r19,12(sp)
   24f70:	dc800217 	ldw	r18,8(sp)
   24f74:	dc400117 	ldw	r17,4(sp)
   24f78:	dc000017 	ldw	r16,0(sp)
   24f7c:	dec00704 	addi	sp,sp,28
   24f80:	f800283a 	ret

00024f84 <_fwalk_reent>:
   24f84:	defff804 	addi	sp,sp,-32
   24f88:	dcc00315 	stw	r19,12(sp)
   24f8c:	24c0b804 	addi	r19,r4,736
   24f90:	dd800615 	stw	r22,24(sp)
   24f94:	dd400515 	stw	r21,20(sp)
   24f98:	dd000415 	stw	r20,16(sp)
   24f9c:	dfc00715 	stw	ra,28(sp)
   24fa0:	dc800215 	stw	r18,8(sp)
   24fa4:	dc400115 	stw	r17,4(sp)
   24fa8:	dc000015 	stw	r16,0(sp)
   24fac:	2029883a 	mov	r20,r4
   24fb0:	282b883a 	mov	r21,r5
   24fb4:	002d883a 	mov	r22,zero
   24fb8:	00245ac0 	call	245ac <__sfp_lock_acquire>
   24fbc:	98001326 	beq	r19,zero,2500c <_fwalk_reent+0x88>
   24fc0:	04bfffc4 	movi	r18,-1
   24fc4:	9c400117 	ldw	r17,4(r19)
   24fc8:	9c000217 	ldw	r16,8(r19)
   24fcc:	8c7fffc4 	addi	r17,r17,-1
   24fd0:	88000c16 	blt	r17,zero,25004 <_fwalk_reent+0x80>
   24fd4:	84000304 	addi	r16,r16,12
   24fd8:	80c0000f 	ldh	r3,0(r16)
   24fdc:	8c7fffc4 	addi	r17,r17,-1
   24fe0:	817ffd04 	addi	r5,r16,-12
   24fe4:	18000526 	beq	r3,zero,24ffc <_fwalk_reent+0x78>
   24fe8:	80c0008f 	ldh	r3,2(r16)
   24fec:	a009883a 	mov	r4,r20
   24ff0:	1c800226 	beq	r3,r18,24ffc <_fwalk_reent+0x78>
   24ff4:	a83ee83a 	callr	r21
   24ff8:	b0acb03a 	or	r22,r22,r2
   24ffc:	84001704 	addi	r16,r16,92
   25000:	8cbff51e 	bne	r17,r18,24fd8 <_fwalk_reent+0x54>
   25004:	9cc00017 	ldw	r19,0(r19)
   25008:	983fee1e 	bne	r19,zero,24fc4 <_fwalk_reent+0x40>
   2500c:	00245b00 	call	245b0 <__sfp_lock_release>
   25010:	b005883a 	mov	r2,r22
   25014:	dfc00717 	ldw	ra,28(sp)
   25018:	dd800617 	ldw	r22,24(sp)
   2501c:	dd400517 	ldw	r21,20(sp)
   25020:	dd000417 	ldw	r20,16(sp)
   25024:	dcc00317 	ldw	r19,12(sp)
   25028:	dc800217 	ldw	r18,8(sp)
   2502c:	dc400117 	ldw	r17,4(sp)
   25030:	dc000017 	ldw	r16,0(sp)
   25034:	dec00804 	addi	sp,sp,32
   25038:	f800283a 	ret

0002503c <_setlocale_r>:
   2503c:	defffc04 	addi	sp,sp,-16
   25040:	dc800215 	stw	r18,8(sp)
   25044:	dc400115 	stw	r17,4(sp)
   25048:	dc000015 	stw	r16,0(sp)
   2504c:	dfc00315 	stw	ra,12(sp)
   25050:	3021883a 	mov	r16,r6
   25054:	2023883a 	mov	r17,r4
   25058:	2825883a 	mov	r18,r5
   2505c:	30001626 	beq	r6,zero,250b8 <_setlocale_r+0x7c>
   25060:	3009883a 	mov	r4,r6
   25064:	014001f4 	movhi	r5,7
   25068:	29723a04 	addi	r5,r5,-14104
   2506c:	00277380 	call	27738 <strcmp>
   25070:	10000a1e 	bne	r2,zero,2509c <_setlocale_r+0x60>
   25074:	8c800c15 	stw	r18,48(r17)
   25078:	8c000d15 	stw	r16,52(r17)
   2507c:	008001f4 	movhi	r2,7
   25080:	10b23a04 	addi	r2,r2,-14104
   25084:	dfc00317 	ldw	ra,12(sp)
   25088:	dc800217 	ldw	r18,8(sp)
   2508c:	dc400117 	ldw	r17,4(sp)
   25090:	dc000017 	ldw	r16,0(sp)
   25094:	dec00404 	addi	sp,sp,16
   25098:	f800283a 	ret
   2509c:	8009883a 	mov	r4,r16
   250a0:	014001f4 	movhi	r5,7
   250a4:	29722504 	addi	r5,r5,-14188
   250a8:	00277380 	call	27738 <strcmp>
   250ac:	103ff126 	beq	r2,zero,25074 <_setlocale_r+0x38>
   250b0:	0005883a 	mov	r2,zero
   250b4:	003ff306 	br	25084 <_setlocale_r+0x48>
   250b8:	008001f4 	movhi	r2,7
   250bc:	10b23a04 	addi	r2,r2,-14104
   250c0:	dfc00317 	ldw	ra,12(sp)
   250c4:	dc800217 	ldw	r18,8(sp)
   250c8:	dc400117 	ldw	r17,4(sp)
   250cc:	dc000017 	ldw	r16,0(sp)
   250d0:	dec00404 	addi	sp,sp,16
   250d4:	f800283a 	ret

000250d8 <__locale_charset>:
   250d8:	008001f4 	movhi	r2,7
   250dc:	10b23b04 	addi	r2,r2,-14100
   250e0:	f800283a 	ret

000250e4 <_localeconv_r>:
   250e4:	008001f4 	movhi	r2,7
   250e8:	10b23f04 	addi	r2,r2,-14084
   250ec:	f800283a 	ret

000250f0 <setlocale>:
   250f0:	00c001f4 	movhi	r3,7
   250f4:	18f96e04 	addi	r3,r3,-6728
   250f8:	2005883a 	mov	r2,r4
   250fc:	19000017 	ldw	r4,0(r3)
   25100:	280d883a 	mov	r6,r5
   25104:	100b883a 	mov	r5,r2
   25108:	002503c1 	jmpi	2503c <_setlocale_r>

0002510c <localeconv>:
   2510c:	008001f4 	movhi	r2,7
   25110:	10b23f04 	addi	r2,r2,-14084
   25114:	f800283a 	ret

00025118 <__smakebuf_r>:
   25118:	2880030b 	ldhu	r2,12(r5)
   2511c:	deffed04 	addi	sp,sp,-76
   25120:	dc401015 	stw	r17,64(sp)
   25124:	10c0008c 	andi	r3,r2,2
   25128:	18ffffcc 	andi	r3,r3,65535
   2512c:	18e0001c 	xori	r3,r3,32768
   25130:	dc000f15 	stw	r16,60(sp)
   25134:	dfc01215 	stw	ra,72(sp)
   25138:	dc801115 	stw	r18,68(sp)
   2513c:	18e00004 	addi	r3,r3,-32768
   25140:	2821883a 	mov	r16,r5
   25144:	2023883a 	mov	r17,r4
   25148:	1800381e 	bne	r3,zero,2522c <__smakebuf_r+0x114>
   2514c:	2940038f 	ldh	r5,14(r5)
   25150:	28002d16 	blt	r5,zero,25208 <__smakebuf_r+0xf0>
   25154:	d80d883a 	mov	r6,sp
   25158:	0027ac80 	call	27ac8 <_fstat_r>
   2515c:	10002916 	blt	r2,zero,25204 <__smakebuf_r+0xec>
   25160:	d8800117 	ldw	r2,4(sp)
   25164:	00e00014 	movui	r3,32768
   25168:	10bc000c 	andi	r2,r2,61440
   2516c:	10c03c26 	beq	r2,r3,25260 <__smakebuf_r+0x148>
   25170:	80c0030b 	ldhu	r3,12(r16)
   25174:	18c20014 	ori	r3,r3,2048
   25178:	80c0030d 	sth	r3,12(r16)
   2517c:	00c80004 	movi	r3,8192
   25180:	10c00c1e 	bne	r2,r3,251b4 <__smakebuf_r+0x9c>
   25184:	8140038f 	ldh	r5,14(r16)
   25188:	8809883a 	mov	r4,r17
   2518c:	0027b300 	call	27b30 <_isatty_r>
   25190:	10000826 	beq	r2,zero,251b4 <__smakebuf_r+0x9c>
   25194:	80c0030b 	ldhu	r3,12(r16)
   25198:	808010c4 	addi	r2,r16,67
   2519c:	80800015 	stw	r2,0(r16)
   251a0:	18c00054 	ori	r3,r3,1
   251a4:	80800415 	stw	r2,16(r16)
   251a8:	00800044 	movi	r2,1
   251ac:	80c0030d 	sth	r3,12(r16)
   251b0:	80800515 	stw	r2,20(r16)
   251b4:	04810004 	movi	r18,1024
   251b8:	8809883a 	mov	r4,r17
   251bc:	900b883a 	mov	r5,r18
   251c0:	00252c00 	call	252c0 <_malloc_r>
   251c4:	10003026 	beq	r2,zero,25288 <__smakebuf_r+0x170>
   251c8:	80c0030b 	ldhu	r3,12(r16)
   251cc:	010000b4 	movhi	r4,2
   251d0:	2110c404 	addi	r4,r4,17168
   251d4:	89000f15 	stw	r4,60(r17)
   251d8:	18c02014 	ori	r3,r3,128
   251dc:	80c0030d 	sth	r3,12(r16)
   251e0:	80800015 	stw	r2,0(r16)
   251e4:	80800415 	stw	r2,16(r16)
   251e8:	84800515 	stw	r18,20(r16)
   251ec:	dfc01217 	ldw	ra,72(sp)
   251f0:	dc801117 	ldw	r18,68(sp)
   251f4:	dc401017 	ldw	r17,64(sp)
   251f8:	dc000f17 	ldw	r16,60(sp)
   251fc:	dec01304 	addi	sp,sp,76
   25200:	f800283a 	ret
   25204:	8080030b 	ldhu	r2,12(r16)
   25208:	10c0200c 	andi	r3,r2,128
   2520c:	18ffffcc 	andi	r3,r3,65535
   25210:	18e0001c 	xori	r3,r3,32768
   25214:	18e00004 	addi	r3,r3,-32768
   25218:	18000f1e 	bne	r3,zero,25258 <__smakebuf_r+0x140>
   2521c:	04810004 	movi	r18,1024
   25220:	10820014 	ori	r2,r2,2048
   25224:	8080030d 	sth	r2,12(r16)
   25228:	003fe306 	br	251b8 <__smakebuf_r+0xa0>
   2522c:	288010c4 	addi	r2,r5,67
   25230:	28800015 	stw	r2,0(r5)
   25234:	28800415 	stw	r2,16(r5)
   25238:	00800044 	movi	r2,1
   2523c:	28800515 	stw	r2,20(r5)
   25240:	dfc01217 	ldw	ra,72(sp)
   25244:	dc801117 	ldw	r18,68(sp)
   25248:	dc401017 	ldw	r17,64(sp)
   2524c:	dc000f17 	ldw	r16,60(sp)
   25250:	dec01304 	addi	sp,sp,76
   25254:	f800283a 	ret
   25258:	04801004 	movi	r18,64
   2525c:	003ff006 	br	25220 <__smakebuf_r+0x108>
   25260:	81000a17 	ldw	r4,40(r16)
   25264:	00c000b4 	movhi	r3,2
   25268:	18ddb504 	addi	r3,r3,30420
   2526c:	20ffc01e 	bne	r4,r3,25170 <__smakebuf_r+0x58>
   25270:	8080030b 	ldhu	r2,12(r16)
   25274:	00c10004 	movi	r3,1024
   25278:	80c01315 	stw	r3,76(r16)
   2527c:	10c4b03a 	or	r2,r2,r3
   25280:	8080030d 	sth	r2,12(r16)
   25284:	003fcb06 	br	251b4 <__smakebuf_r+0x9c>
   25288:	8080030b 	ldhu	r2,12(r16)
   2528c:	10c0800c 	andi	r3,r2,512
   25290:	18ffffcc 	andi	r3,r3,65535
   25294:	18e0001c 	xori	r3,r3,32768
   25298:	18e00004 	addi	r3,r3,-32768
   2529c:	183fd31e 	bne	r3,zero,251ec <__smakebuf_r+0xd4>
   252a0:	10800094 	ori	r2,r2,2
   252a4:	80c010c4 	addi	r3,r16,67
   252a8:	8080030d 	sth	r2,12(r16)
   252ac:	00800044 	movi	r2,1
   252b0:	80c00015 	stw	r3,0(r16)
   252b4:	80c00415 	stw	r3,16(r16)
   252b8:	80800515 	stw	r2,20(r16)
   252bc:	003fcb06 	br	251ec <__smakebuf_r+0xd4>

000252c0 <_malloc_r>:
   252c0:	defff604 	addi	sp,sp,-40
   252c4:	dc800215 	stw	r18,8(sp)
   252c8:	dfc00915 	stw	ra,36(sp)
   252cc:	df000815 	stw	fp,32(sp)
   252d0:	ddc00715 	stw	r23,28(sp)
   252d4:	dd800615 	stw	r22,24(sp)
   252d8:	dd400515 	stw	r21,20(sp)
   252dc:	dd000415 	stw	r20,16(sp)
   252e0:	dcc00315 	stw	r19,12(sp)
   252e4:	dc400115 	stw	r17,4(sp)
   252e8:	dc000015 	stw	r16,0(sp)
   252ec:	288002c4 	addi	r2,r5,11
   252f0:	00c00584 	movi	r3,22
   252f4:	2025883a 	mov	r18,r4
   252f8:	18802b2e 	bgeu	r3,r2,253a8 <_malloc_r+0xe8>
   252fc:	047ffe04 	movi	r17,-8
   25300:	1462703a 	and	r17,r2,r17
   25304:	88002a16 	blt	r17,zero,253b0 <_malloc_r+0xf0>
   25308:	89402936 	bltu	r17,r5,253b0 <_malloc_r+0xf0>
   2530c:	9009883a 	mov	r4,r18
   25310:	002a37c0 	call	2a37c <__malloc_lock>
   25314:	00807dc4 	movi	r2,503
   25318:	14402936 	bltu	r2,r17,253c0 <_malloc_r+0x100>
   2531c:	8808d0fa 	srli	r4,r17,3
   25320:	04c001f4 	movhi	r19,7
   25324:	9cf3e904 	addi	r19,r19,-12380
   25328:	2105883a 	add	r2,r4,r4
   2532c:	1085883a 	add	r2,r2,r2
   25330:	1085883a 	add	r2,r2,r2
   25334:	9885883a 	add	r2,r19,r2
   25338:	14000317 	ldw	r16,12(r2)
   2533c:	80815526 	beq	r16,r2,25894 <_malloc_r+0x5d4>
   25340:	81000117 	ldw	r4,4(r16)
   25344:	00bfff04 	movi	r2,-4
   25348:	80c00317 	ldw	r3,12(r16)
   2534c:	2084703a 	and	r2,r4,r2
   25350:	8085883a 	add	r2,r16,r2
   25354:	11800117 	ldw	r6,4(r2)
   25358:	81400217 	ldw	r5,8(r16)
   2535c:	9009883a 	mov	r4,r18
   25360:	31800054 	ori	r6,r6,1
   25364:	11800115 	stw	r6,4(r2)
   25368:	28c00315 	stw	r3,12(r5)
   2536c:	19400215 	stw	r5,8(r3)
   25370:	002a39c0 	call	2a39c <__malloc_unlock>
   25374:	80800204 	addi	r2,r16,8
   25378:	dfc00917 	ldw	ra,36(sp)
   2537c:	df000817 	ldw	fp,32(sp)
   25380:	ddc00717 	ldw	r23,28(sp)
   25384:	dd800617 	ldw	r22,24(sp)
   25388:	dd400517 	ldw	r21,20(sp)
   2538c:	dd000417 	ldw	r20,16(sp)
   25390:	dcc00317 	ldw	r19,12(sp)
   25394:	dc800217 	ldw	r18,8(sp)
   25398:	dc400117 	ldw	r17,4(sp)
   2539c:	dc000017 	ldw	r16,0(sp)
   253a0:	dec00a04 	addi	sp,sp,40
   253a4:	f800283a 	ret
   253a8:	04400404 	movi	r17,16
   253ac:	897fd72e 	bgeu	r17,r5,2530c <_malloc_r+0x4c>
   253b0:	00800304 	movi	r2,12
   253b4:	90800015 	stw	r2,0(r18)
   253b8:	0005883a 	mov	r2,zero
   253bc:	003fee06 	br	25378 <_malloc_r+0xb8>
   253c0:	8808d27a 	srli	r4,r17,9
   253c4:	20007126 	beq	r4,zero,2558c <_malloc_r+0x2cc>
   253c8:	00800104 	movi	r2,4
   253cc:	1100eb36 	bltu	r2,r4,2577c <_malloc_r+0x4bc>
   253d0:	8808d1ba 	srli	r4,r17,6
   253d4:	21000e04 	addi	r4,r4,56
   253d8:	210b883a 	add	r5,r4,r4
   253dc:	294b883a 	add	r5,r5,r5
   253e0:	294b883a 	add	r5,r5,r5
   253e4:	04c001f4 	movhi	r19,7
   253e8:	9cf3e904 	addi	r19,r19,-12380
   253ec:	994b883a 	add	r5,r19,r5
   253f0:	2c000317 	ldw	r16,12(r5)
   253f4:	2c000e26 	beq	r5,r16,25430 <_malloc_r+0x170>
   253f8:	80c00117 	ldw	r3,4(r16)
   253fc:	01ffff04 	movi	r7,-4
   25400:	018003c4 	movi	r6,15
   25404:	19c6703a 	and	r3,r3,r7
   25408:	1c45c83a 	sub	r2,r3,r17
   2540c:	30800716 	blt	r6,r2,2542c <_malloc_r+0x16c>
   25410:	1000610e 	bge	r2,zero,25598 <_malloc_r+0x2d8>
   25414:	84000317 	ldw	r16,12(r16)
   25418:	2c000526 	beq	r5,r16,25430 <_malloc_r+0x170>
   2541c:	80c00117 	ldw	r3,4(r16)
   25420:	19c6703a 	and	r3,r3,r7
   25424:	1c45c83a 	sub	r2,r3,r17
   25428:	30bff90e 	bge	r6,r2,25410 <_malloc_r+0x150>
   2542c:	213fffc4 	addi	r4,r4,-1
   25430:	21000044 	addi	r4,r4,1
   25434:	9c000417 	ldw	r16,16(r19)
   25438:	00c001f4 	movhi	r3,7
   2543c:	18f3e904 	addi	r3,r3,-12380
   25440:	1a400204 	addi	r9,r3,8
   25444:	8240ff26 	beq	r16,r9,25844 <_malloc_r+0x584>
   25448:	81400117 	ldw	r5,4(r16)
   2544c:	00bfff04 	movi	r2,-4
   25450:	018003c4 	movi	r6,15
   25454:	2884703a 	and	r2,r5,r2
   25458:	144bc83a 	sub	r5,r2,r17
   2545c:	3140ea16 	blt	r6,r5,25808 <_malloc_r+0x548>
   25460:	1a400515 	stw	r9,20(r3)
   25464:	1a400415 	stw	r9,16(r3)
   25468:	2800570e 	bge	r5,zero,255c8 <_malloc_r+0x308>
   2546c:	01407fc4 	movi	r5,511
   25470:	2880ca36 	bltu	r5,r2,2579c <_malloc_r+0x4dc>
   25474:	1004d0fa 	srli	r2,r2,3
   25478:	02000044 	movi	r8,1
   2547c:	19c00117 	ldw	r7,4(r3)
   25480:	108b883a 	add	r5,r2,r2
   25484:	294b883a 	add	r5,r5,r5
   25488:	1005d0ba 	srai	r2,r2,2
   2548c:	294b883a 	add	r5,r5,r5
   25490:	28cb883a 	add	r5,r5,r3
   25494:	29800217 	ldw	r6,8(r5)
   25498:	4084983a 	sll	r2,r8,r2
   2549c:	81400315 	stw	r5,12(r16)
   254a0:	81800215 	stw	r6,8(r16)
   254a4:	11c4b03a 	or	r2,r2,r7
   254a8:	18800115 	stw	r2,4(r3)
   254ac:	2c000215 	stw	r16,8(r5)
   254b0:	34000315 	stw	r16,12(r6)
   254b4:	200bd0ba 	srai	r5,r4,2
   254b8:	00c00044 	movi	r3,1
   254bc:	194a983a 	sll	r5,r3,r5
   254c0:	11404936 	bltu	r2,r5,255e8 <_malloc_r+0x328>
   254c4:	1146703a 	and	r3,r2,r5
   254c8:	18000a1e 	bne	r3,zero,254f4 <_malloc_r+0x234>
   254cc:	00ffff04 	movi	r3,-4
   254d0:	294b883a 	add	r5,r5,r5
   254d4:	20c8703a 	and	r4,r4,r3
   254d8:	1146703a 	and	r3,r2,r5
   254dc:	21000104 	addi	r4,r4,4
   254e0:	1800041e 	bne	r3,zero,254f4 <_malloc_r+0x234>
   254e4:	294b883a 	add	r5,r5,r5
   254e8:	1146703a 	and	r3,r2,r5
   254ec:	21000104 	addi	r4,r4,4
   254f0:	183ffc26 	beq	r3,zero,254e4 <_malloc_r+0x224>
   254f4:	023fff04 	movi	r8,-4
   254f8:	01c003c4 	movi	r7,15
   254fc:	2105883a 	add	r2,r4,r4
   25500:	1085883a 	add	r2,r2,r2
   25504:	1085883a 	add	r2,r2,r2
   25508:	9899883a 	add	r12,r19,r2
   2550c:	62800304 	addi	r10,r12,12
   25510:	2017883a 	mov	r11,r4
   25514:	54000017 	ldw	r16,0(r10)
   25518:	51bffd04 	addi	r6,r10,-12
   2551c:	8180041e 	bne	r16,r6,25530 <_malloc_r+0x270>
   25520:	0000ca06 	br	2584c <_malloc_r+0x58c>
   25524:	10001c0e 	bge	r2,zero,25598 <_malloc_r+0x2d8>
   25528:	84000317 	ldw	r16,12(r16)
   2552c:	8180c726 	beq	r16,r6,2584c <_malloc_r+0x58c>
   25530:	80c00117 	ldw	r3,4(r16)
   25534:	1a06703a 	and	r3,r3,r8
   25538:	1c45c83a 	sub	r2,r3,r17
   2553c:	38bff90e 	bge	r7,r2,25524 <_malloc_r+0x264>
   25540:	81000317 	ldw	r4,12(r16)
   25544:	81400217 	ldw	r5,8(r16)
   25548:	8447883a 	add	r3,r16,r17
   2554c:	8c400054 	ori	r17,r17,1
   25550:	29000315 	stw	r4,12(r5)
   25554:	21400215 	stw	r5,8(r4)
   25558:	84400115 	stw	r17,4(r16)
   2555c:	1889883a 	add	r4,r3,r2
   25560:	11400054 	ori	r5,r2,1
   25564:	98c00515 	stw	r3,20(r19)
   25568:	98c00415 	stw	r3,16(r19)
   2556c:	20800015 	stw	r2,0(r4)
   25570:	1a400315 	stw	r9,12(r3)
   25574:	1a400215 	stw	r9,8(r3)
   25578:	19400115 	stw	r5,4(r3)
   2557c:	9009883a 	mov	r4,r18
   25580:	002a39c0 	call	2a39c <__malloc_unlock>
   25584:	80800204 	addi	r2,r16,8
   25588:	003f7b06 	br	25378 <_malloc_r+0xb8>
   2558c:	8808d0fa 	srli	r4,r17,3
   25590:	210b883a 	add	r5,r4,r4
   25594:	003f9106 	br	253dc <_malloc_r+0x11c>
   25598:	80c7883a 	add	r3,r16,r3
   2559c:	19400117 	ldw	r5,4(r3)
   255a0:	80800317 	ldw	r2,12(r16)
   255a4:	81000217 	ldw	r4,8(r16)
   255a8:	29400054 	ori	r5,r5,1
   255ac:	19400115 	stw	r5,4(r3)
   255b0:	20800315 	stw	r2,12(r4)
   255b4:	11000215 	stw	r4,8(r2)
   255b8:	9009883a 	mov	r4,r18
   255bc:	002a39c0 	call	2a39c <__malloc_unlock>
   255c0:	80800204 	addi	r2,r16,8
   255c4:	003f6c06 	br	25378 <_malloc_r+0xb8>
   255c8:	8085883a 	add	r2,r16,r2
   255cc:	10c00117 	ldw	r3,4(r2)
   255d0:	9009883a 	mov	r4,r18
   255d4:	18c00054 	ori	r3,r3,1
   255d8:	10c00115 	stw	r3,4(r2)
   255dc:	002a39c0 	call	2a39c <__malloc_unlock>
   255e0:	80800204 	addi	r2,r16,8
   255e4:	003f6406 	br	25378 <_malloc_r+0xb8>
   255e8:	9c000217 	ldw	r16,8(r19)
   255ec:	00bfff04 	movi	r2,-4
   255f0:	85400117 	ldw	r21,4(r16)
   255f4:	a8aa703a 	and	r21,r21,r2
   255f8:	ac400336 	bltu	r21,r17,25608 <_malloc_r+0x348>
   255fc:	ac45c83a 	sub	r2,r21,r17
   25600:	00c003c4 	movi	r3,15
   25604:	18805316 	blt	r3,r2,25754 <_malloc_r+0x494>
   25608:	d5e01917 	ldw	r23,-32668(gp)
   2560c:	d0e00317 	ldw	r3,-32756(gp)
   25610:	00bfffc4 	movi	r2,-1
   25614:	8579883a 	add	fp,r16,r21
   25618:	8def883a 	add	r23,r17,r23
   2561c:	1880d226 	beq	r3,r2,25968 <_malloc_r+0x6a8>
   25620:	bdc403c4 	addi	r23,r23,4111
   25624:	00bc0004 	movi	r2,-4096
   25628:	b8ae703a 	and	r23,r23,r2
   2562c:	9009883a 	mov	r4,r18
   25630:	b80b883a 	mov	r5,r23
   25634:	00275940 	call	27594 <_sbrk_r>
   25638:	1029883a 	mov	r20,r2
   2563c:	00bfffc4 	movi	r2,-1
   25640:	a080d126 	beq	r20,r2,25988 <_malloc_r+0x6c8>
   25644:	a7009f36 	bltu	r20,fp,258c4 <_malloc_r+0x604>
   25648:	058001f4 	movhi	r22,7
   2564c:	b5b98e04 	addi	r22,r22,-6600
   25650:	b0800017 	ldw	r2,0(r22)
   25654:	b885883a 	add	r2,r23,r2
   25658:	b0800015 	stw	r2,0(r22)
   2565c:	e500cf26 	beq	fp,r20,2599c <_malloc_r+0x6dc>
   25660:	d1200317 	ldw	r4,-32756(gp)
   25664:	00ffffc4 	movi	r3,-1
   25668:	20c0e026 	beq	r4,r3,259ec <_malloc_r+0x72c>
   2566c:	a739c83a 	sub	fp,r20,fp
   25670:	1705883a 	add	r2,r2,fp
   25674:	b0800015 	stw	r2,0(r22)
   25678:	a08001cc 	andi	r2,r20,7
   2567c:	1000a526 	beq	r2,zero,25914 <_malloc_r+0x654>
   25680:	a0a9c83a 	sub	r20,r20,r2
   25684:	00c40204 	movi	r3,4104
   25688:	a5000204 	addi	r20,r20,8
   2568c:	1885c83a 	sub	r2,r3,r2
   25690:	a5c7883a 	add	r3,r20,r23
   25694:	18c3ffcc 	andi	r3,r3,4095
   25698:	10efc83a 	sub	r23,r2,r3
   2569c:	9009883a 	mov	r4,r18
   256a0:	b80b883a 	mov	r5,r23
   256a4:	00275940 	call	27594 <_sbrk_r>
   256a8:	00ffffc4 	movi	r3,-1
   256ac:	10c0cc26 	beq	r2,r3,259e0 <_malloc_r+0x720>
   256b0:	1505c83a 	sub	r2,r2,r20
   256b4:	b887883a 	add	r3,r23,r2
   256b8:	18c00054 	ori	r3,r3,1
   256bc:	b0800017 	ldw	r2,0(r22)
   256c0:	9d000215 	stw	r20,8(r19)
   256c4:	a0c00115 	stw	r3,4(r20)
   256c8:	b885883a 	add	r2,r23,r2
   256cc:	b0800015 	stw	r2,0(r22)
   256d0:	84c00e26 	beq	r16,r19,2570c <_malloc_r+0x44c>
   256d4:	00c003c4 	movi	r3,15
   256d8:	1d40902e 	bgeu	r3,r21,2591c <_malloc_r+0x65c>
   256dc:	ad7ffd04 	addi	r21,r21,-12
   256e0:	013ffe04 	movi	r4,-8
   256e4:	a908703a 	and	r4,r21,r4
   256e8:	810b883a 	add	r5,r16,r4
   256ec:	01800144 	movi	r6,5
   256f0:	29800115 	stw	r6,4(r5)
   256f4:	29800215 	stw	r6,8(r5)
   256f8:	81400117 	ldw	r5,4(r16)
   256fc:	2940004c 	andi	r5,r5,1
   25700:	214ab03a 	or	r5,r4,r5
   25704:	81400115 	stw	r5,4(r16)
   25708:	1900ae36 	bltu	r3,r4,259c4 <_malloc_r+0x704>
   2570c:	d0e01817 	ldw	r3,-32672(gp)
   25710:	1880012e 	bgeu	r3,r2,25718 <_malloc_r+0x458>
   25714:	d0a01815 	stw	r2,-32672(gp)
   25718:	d0e01717 	ldw	r3,-32676(gp)
   2571c:	9c000217 	ldw	r16,8(r19)
   25720:	1880012e 	bgeu	r3,r2,25728 <_malloc_r+0x468>
   25724:	d0a01715 	stw	r2,-32676(gp)
   25728:	80c00117 	ldw	r3,4(r16)
   2572c:	00bfff04 	movi	r2,-4
   25730:	1886703a 	and	r3,r3,r2
   25734:	1c45c83a 	sub	r2,r3,r17
   25738:	1c400236 	bltu	r3,r17,25744 <_malloc_r+0x484>
   2573c:	00c003c4 	movi	r3,15
   25740:	18800416 	blt	r3,r2,25754 <_malloc_r+0x494>
   25744:	9009883a 	mov	r4,r18
   25748:	002a39c0 	call	2a39c <__malloc_unlock>
   2574c:	0005883a 	mov	r2,zero
   25750:	003f0906 	br	25378 <_malloc_r+0xb8>
   25754:	88c00054 	ori	r3,r17,1
   25758:	10800054 	ori	r2,r2,1
   2575c:	80c00115 	stw	r3,4(r16)
   25760:	8463883a 	add	r17,r16,r17
   25764:	88800115 	stw	r2,4(r17)
   25768:	9009883a 	mov	r4,r18
   2576c:	9c400215 	stw	r17,8(r19)
   25770:	002a39c0 	call	2a39c <__malloc_unlock>
   25774:	80800204 	addi	r2,r16,8
   25778:	003eff06 	br	25378 <_malloc_r+0xb8>
   2577c:	00800504 	movi	r2,20
   25780:	1100492e 	bgeu	r2,r4,258a8 <_malloc_r+0x5e8>
   25784:	00801504 	movi	r2,84
   25788:	11005c36 	bltu	r2,r4,258fc <_malloc_r+0x63c>
   2578c:	8808d33a 	srli	r4,r17,12
   25790:	21001b84 	addi	r4,r4,110
   25794:	210b883a 	add	r5,r4,r4
   25798:	003f1006 	br	253dc <_malloc_r+0x11c>
   2579c:	1006d27a 	srli	r3,r2,9
   257a0:	01400104 	movi	r5,4
   257a4:	28c0432e 	bgeu	r5,r3,258b4 <_malloc_r+0x5f4>
   257a8:	01400504 	movi	r5,20
   257ac:	28c07036 	bltu	r5,r3,25970 <_malloc_r+0x6b0>
   257b0:	194016c4 	addi	r5,r3,91
   257b4:	294d883a 	add	r6,r5,r5
   257b8:	318d883a 	add	r6,r6,r6
   257bc:	318d883a 	add	r6,r6,r6
   257c0:	998d883a 	add	r6,r19,r6
   257c4:	30c00217 	ldw	r3,8(r6)
   257c8:	01c001f4 	movhi	r7,7
   257cc:	39f3e904 	addi	r7,r7,-12380
   257d0:	19805726 	beq	r3,r6,25930 <_malloc_r+0x670>
   257d4:	01ffff04 	movi	r7,-4
   257d8:	19400117 	ldw	r5,4(r3)
   257dc:	29ca703a 	and	r5,r5,r7
   257e0:	1140022e 	bgeu	r2,r5,257ec <_malloc_r+0x52c>
   257e4:	18c00217 	ldw	r3,8(r3)
   257e8:	30fffb1e 	bne	r6,r3,257d8 <_malloc_r+0x518>
   257ec:	19400317 	ldw	r5,12(r3)
   257f0:	98800117 	ldw	r2,4(r19)
   257f4:	81400315 	stw	r5,12(r16)
   257f8:	80c00215 	stw	r3,8(r16)
   257fc:	2c000215 	stw	r16,8(r5)
   25800:	1c000315 	stw	r16,12(r3)
   25804:	003f2b06 	br	254b4 <_malloc_r+0x1f4>
   25808:	8445883a 	add	r2,r16,r17
   2580c:	8c400054 	ori	r17,r17,1
   25810:	18800515 	stw	r2,20(r3)
   25814:	18800415 	stw	r2,16(r3)
   25818:	29000054 	ori	r4,r5,1
   2581c:	1147883a 	add	r3,r2,r5
   25820:	84400115 	stw	r17,4(r16)
   25824:	11000115 	stw	r4,4(r2)
   25828:	12400315 	stw	r9,12(r2)
   2582c:	12400215 	stw	r9,8(r2)
   25830:	19400015 	stw	r5,0(r3)
   25834:	9009883a 	mov	r4,r18
   25838:	002a39c0 	call	2a39c <__malloc_unlock>
   2583c:	80800204 	addi	r2,r16,8
   25840:	003ecd06 	br	25378 <_malloc_r+0xb8>
   25844:	18800117 	ldw	r2,4(r3)
   25848:	003f1a06 	br	254b4 <_malloc_r+0x1f4>
   2584c:	5ac00044 	addi	r11,r11,1
   25850:	588000cc 	andi	r2,r11,3
   25854:	52800204 	addi	r10,r10,8
   25858:	103f2e1e 	bne	r2,zero,25514 <_malloc_r+0x254>
   2585c:	20c000cc 	andi	r3,r4,3
   25860:	60bffe04 	addi	r2,r12,-8
   25864:	18006f26 	beq	r3,zero,25a24 <_malloc_r+0x764>
   25868:	63000017 	ldw	r12,0(r12)
   2586c:	213fffc4 	addi	r4,r4,-1
   25870:	60bffa26 	beq	r12,r2,2585c <_malloc_r+0x59c>
   25874:	98800117 	ldw	r2,4(r19)
   25878:	294b883a 	add	r5,r5,r5
   2587c:	117f5a36 	bltu	r2,r5,255e8 <_malloc_r+0x328>
   25880:	283f5926 	beq	r5,zero,255e8 <_malloc_r+0x328>
   25884:	1146703a 	and	r3,r2,r5
   25888:	18001626 	beq	r3,zero,258e4 <_malloc_r+0x624>
   2588c:	5809883a 	mov	r4,r11
   25890:	003f1a06 	br	254fc <_malloc_r+0x23c>
   25894:	80800204 	addi	r2,r16,8
   25898:	84000517 	ldw	r16,20(r16)
   2589c:	143ea81e 	bne	r2,r16,25340 <_malloc_r+0x80>
   258a0:	21000084 	addi	r4,r4,2
   258a4:	003ee306 	br	25434 <_malloc_r+0x174>
   258a8:	210016c4 	addi	r4,r4,91
   258ac:	210b883a 	add	r5,r4,r4
   258b0:	003eca06 	br	253dc <_malloc_r+0x11c>
   258b4:	100ad1ba 	srli	r5,r2,6
   258b8:	29400e04 	addi	r5,r5,56
   258bc:	294d883a 	add	r6,r5,r5
   258c0:	003fbd06 	br	257b8 <_malloc_r+0x4f8>
   258c4:	84ff6026 	beq	r16,r19,25648 <_malloc_r+0x388>
   258c8:	008001f4 	movhi	r2,7
   258cc:	10b3e904 	addi	r2,r2,-12380
   258d0:	14000217 	ldw	r16,8(r2)
   258d4:	00bfff04 	movi	r2,-4
   258d8:	80c00117 	ldw	r3,4(r16)
   258dc:	1886703a 	and	r3,r3,r2
   258e0:	003f9406 	br	25734 <_malloc_r+0x474>
   258e4:	294b883a 	add	r5,r5,r5
   258e8:	1146703a 	and	r3,r2,r5
   258ec:	5ac00104 	addi	r11,r11,4
   258f0:	183ffc26 	beq	r3,zero,258e4 <_malloc_r+0x624>
   258f4:	5809883a 	mov	r4,r11
   258f8:	003f0006 	br	254fc <_malloc_r+0x23c>
   258fc:	00805504 	movi	r2,340
   25900:	11001336 	bltu	r2,r4,25950 <_malloc_r+0x690>
   25904:	8808d3fa 	srli	r4,r17,15
   25908:	21001dc4 	addi	r4,r4,119
   2590c:	210b883a 	add	r5,r4,r4
   25910:	003eb206 	br	253dc <_malloc_r+0x11c>
   25914:	00840004 	movi	r2,4096
   25918:	003f5d06 	br	25690 <_malloc_r+0x3d0>
   2591c:	00800044 	movi	r2,1
   25920:	a0800115 	stw	r2,4(r20)
   25924:	a021883a 	mov	r16,r20
   25928:	0007883a 	mov	r3,zero
   2592c:	003f8106 	br	25734 <_malloc_r+0x474>
   25930:	280bd0ba 	srai	r5,r5,2
   25934:	01800044 	movi	r6,1
   25938:	38800117 	ldw	r2,4(r7)
   2593c:	314c983a 	sll	r6,r6,r5
   25940:	180b883a 	mov	r5,r3
   25944:	3084b03a 	or	r2,r6,r2
   25948:	38800115 	stw	r2,4(r7)
   2594c:	003fa906 	br	257f4 <_malloc_r+0x534>
   25950:	00815504 	movi	r2,1364
   25954:	11001836 	bltu	r2,r4,259b8 <_malloc_r+0x6f8>
   25958:	8808d4ba 	srli	r4,r17,18
   2595c:	21001f04 	addi	r4,r4,124
   25960:	210b883a 	add	r5,r4,r4
   25964:	003e9d06 	br	253dc <_malloc_r+0x11c>
   25968:	bdc00404 	addi	r23,r23,16
   2596c:	003f2f06 	br	2562c <_malloc_r+0x36c>
   25970:	01401504 	movi	r5,84
   25974:	28c01f36 	bltu	r5,r3,259f4 <_malloc_r+0x734>
   25978:	100ad33a 	srli	r5,r2,12
   2597c:	29401b84 	addi	r5,r5,110
   25980:	294d883a 	add	r6,r5,r5
   25984:	003f8c06 	br	257b8 <_malloc_r+0x4f8>
   25988:	9c000217 	ldw	r16,8(r19)
   2598c:	00bfff04 	movi	r2,-4
   25990:	80c00117 	ldw	r3,4(r16)
   25994:	1886703a 	and	r3,r3,r2
   25998:	003f6606 	br	25734 <_malloc_r+0x474>
   2599c:	e0c3ffcc 	andi	r3,fp,4095
   259a0:	183f2f1e 	bne	r3,zero,25660 <_malloc_r+0x3a0>
   259a4:	98c00217 	ldw	r3,8(r19)
   259a8:	bd49883a 	add	r4,r23,r21
   259ac:	21000054 	ori	r4,r4,1
   259b0:	19000115 	stw	r4,4(r3)
   259b4:	003f5506 	br	2570c <_malloc_r+0x44c>
   259b8:	01403f04 	movi	r5,252
   259bc:	01001f84 	movi	r4,126
   259c0:	003e8606 	br	253dc <_malloc_r+0x11c>
   259c4:	9009883a 	mov	r4,r18
   259c8:	81400204 	addi	r5,r16,8
   259cc:	00247280 	call	24728 <_free_r>
   259d0:	008001f4 	movhi	r2,7
   259d4:	10b98e04 	addi	r2,r2,-6600
   259d8:	10800017 	ldw	r2,0(r2)
   259dc:	003f4b06 	br	2570c <_malloc_r+0x44c>
   259e0:	00c00044 	movi	r3,1
   259e4:	002f883a 	mov	r23,zero
   259e8:	003f3406 	br	256bc <_malloc_r+0x3fc>
   259ec:	d5200315 	stw	r20,-32756(gp)
   259f0:	003f2106 	br	25678 <_malloc_r+0x3b8>
   259f4:	01405504 	movi	r5,340
   259f8:	28c00436 	bltu	r5,r3,25a0c <_malloc_r+0x74c>
   259fc:	100ad3fa 	srli	r5,r2,15
   25a00:	29401dc4 	addi	r5,r5,119
   25a04:	294d883a 	add	r6,r5,r5
   25a08:	003f6b06 	br	257b8 <_malloc_r+0x4f8>
   25a0c:	01415504 	movi	r5,1364
   25a10:	28c00936 	bltu	r5,r3,25a38 <_malloc_r+0x778>
   25a14:	100ad4ba 	srli	r5,r2,18
   25a18:	29401f04 	addi	r5,r5,124
   25a1c:	294d883a 	add	r6,r5,r5
   25a20:	003f6506 	br	257b8 <_malloc_r+0x4f8>
   25a24:	98800117 	ldw	r2,4(r19)
   25a28:	0146303a 	nor	r3,zero,r5
   25a2c:	1884703a 	and	r2,r3,r2
   25a30:	98800115 	stw	r2,4(r19)
   25a34:	003f9006 	br	25878 <_malloc_r+0x5b8>
   25a38:	01803f04 	movi	r6,252
   25a3c:	01401f84 	movi	r5,126
   25a40:	003f5d06 	br	257b8 <_malloc_r+0x4f8>

00025a44 <memchr>:
   25a44:	008000c4 	movi	r2,3
   25a48:	29403fcc 	andi	r5,r5,255
   25a4c:	1180282e 	bgeu	r2,r6,25af0 <memchr+0xac>
   25a50:	2086703a 	and	r3,r4,r2
   25a54:	1800351e 	bne	r3,zero,25b2c <memchr+0xe8>
   25a58:	2816923a 	slli	r11,r5,8
   25a5c:	2093883a 	add	r9,r4,r2
   25a60:	22000084 	addi	r8,r4,2
   25a64:	5957883a 	add	r11,r11,r5
   25a68:	5816923a 	slli	r11,r11,8
   25a6c:	20c00044 	addi	r3,r4,1
   25a70:	037fbff4 	movhi	r13,65279
   25a74:	6b7fbfc4 	addi	r13,r13,-257
   25a78:	5957883a 	add	r11,r11,r5
   25a7c:	5816923a 	slli	r11,r11,8
   25a80:	03202074 	movhi	r12,32897
   25a84:	63202004 	addi	r12,r12,-32640
   25a88:	101d883a 	mov	r14,r2
   25a8c:	5957883a 	add	r11,r11,r5
   25a90:	21c00017 	ldw	r7,0(r4)
   25a94:	31bfff04 	addi	r6,r6,-4
   25a98:	1805883a 	mov	r2,r3
   25a9c:	3acef03a 	xor	r7,r7,r11
   25aa0:	3b55883a 	add	r10,r7,r13
   25aa4:	01ce303a 	nor	r7,zero,r7
   25aa8:	51ce703a 	and	r7,r10,r7
   25aac:	3b0e703a 	and	r7,r7,r12
   25ab0:	38000a26 	beq	r7,zero,25adc <memchr+0x98>
   25ab4:	21c00003 	ldbu	r7,0(r4)
   25ab8:	39401e26 	beq	r7,r5,25b34 <memchr+0xf0>
   25abc:	19c00003 	ldbu	r7,0(r3)
   25ac0:	39401926 	beq	r7,r5,25b28 <memchr+0xe4>
   25ac4:	41c00003 	ldbu	r7,0(r8)
   25ac8:	4005883a 	mov	r2,r8
   25acc:	39401626 	beq	r7,r5,25b28 <memchr+0xe4>
   25ad0:	49c00003 	ldbu	r7,0(r9)
   25ad4:	4805883a 	mov	r2,r9
   25ad8:	39401326 	beq	r7,r5,25b28 <memchr+0xe4>
   25adc:	21000104 	addi	r4,r4,4
   25ae0:	4a400104 	addi	r9,r9,4
   25ae4:	42000104 	addi	r8,r8,4
   25ae8:	18c00104 	addi	r3,r3,4
   25aec:	71bfe836 	bltu	r14,r6,25a90 <memchr+0x4c>
   25af0:	2005883a 	mov	r2,r4
   25af4:	30000a26 	beq	r6,zero,25b20 <memchr+0xdc>
   25af8:	10c00003 	ldbu	r3,0(r2)
   25afc:	19400a26 	beq	r3,r5,25b28 <memchr+0xe4>
   25b00:	10c00044 	addi	r3,r2,1
   25b04:	118d883a 	add	r6,r2,r6
   25b08:	00000306 	br	25b18 <memchr+0xd4>
   25b0c:	11000003 	ldbu	r4,0(r2)
   25b10:	18c00044 	addi	r3,r3,1
   25b14:	21400426 	beq	r4,r5,25b28 <memchr+0xe4>
   25b18:	1805883a 	mov	r2,r3
   25b1c:	19bffb1e 	bne	r3,r6,25b0c <memchr+0xc8>
   25b20:	0005883a 	mov	r2,zero
   25b24:	f800283a 	ret
   25b28:	f800283a 	ret
   25b2c:	2005883a 	mov	r2,r4
   25b30:	003ff106 	br	25af8 <memchr+0xb4>
   25b34:	2005883a 	mov	r2,r4
   25b38:	f800283a 	ret

00025b3c <memcpy>:
   25b3c:	defffb04 	addi	sp,sp,-20
   25b40:	dc000015 	stw	r16,0(sp)
   25b44:	dfc00415 	stw	ra,16(sp)
   25b48:	dcc00315 	stw	r19,12(sp)
   25b4c:	dc800215 	stw	r18,8(sp)
   25b50:	dc400115 	stw	r17,4(sp)
   25b54:	00c003c4 	movi	r3,15
   25b58:	2021883a 	mov	r16,r4
   25b5c:	3005883a 	mov	r2,r6
   25b60:	1980032e 	bgeu	r3,r6,25b70 <memcpy+0x34>
   25b64:	2906b03a 	or	r3,r5,r4
   25b68:	18c000cc 	andi	r3,r3,3
   25b6c:	18001026 	beq	r3,zero,25bb0 <memcpy+0x74>
   25b70:	8007883a 	mov	r3,r16
   25b74:	288f883a 	add	r7,r5,r2
   25b78:	10000526 	beq	r2,zero,25b90 <memcpy+0x54>
   25b7c:	29800003 	ldbu	r6,0(r5)
   25b80:	18c00044 	addi	r3,r3,1
   25b84:	29400044 	addi	r5,r5,1
   25b88:	19bfffc5 	stb	r6,-1(r3)
   25b8c:	29fffb1e 	bne	r5,r7,25b7c <memcpy+0x40>
   25b90:	8005883a 	mov	r2,r16
   25b94:	dfc00417 	ldw	ra,16(sp)
   25b98:	dcc00317 	ldw	r19,12(sp)
   25b9c:	dc800217 	ldw	r18,8(sp)
   25ba0:	dc400117 	ldw	r17,4(sp)
   25ba4:	dc000017 	ldw	r16,0(sp)
   25ba8:	dec00504 	addi	sp,sp,20
   25bac:	f800283a 	ret
   25bb0:	32bffc04 	addi	r10,r6,-16
   25bb4:	5014d13a 	srli	r10,r10,4
   25bb8:	20800404 	addi	r2,r4,16
   25bbc:	2007883a 	mov	r3,r4
   25bc0:	5008913a 	slli	r4,r10,4
   25bc4:	280f883a 	mov	r7,r5
   25bc8:	1105883a 	add	r2,r2,r4
   25bcc:	3a000017 	ldw	r8,0(r7)
   25bd0:	18c00404 	addi	r3,r3,16
   25bd4:	39c00404 	addi	r7,r7,16
   25bd8:	1a3ffc15 	stw	r8,-16(r3)
   25bdc:	3a3ffd17 	ldw	r8,-12(r7)
   25be0:	1a3ffd15 	stw	r8,-12(r3)
   25be4:	3a3ffe17 	ldw	r8,-8(r7)
   25be8:	1a3ffe15 	stw	r8,-8(r3)
   25bec:	3a3fff17 	ldw	r8,-4(r7)
   25bf0:	1a3fff15 	stw	r8,-4(r3)
   25bf4:	18bff51e 	bne	r3,r2,25bcc <memcpy+0x90>
   25bf8:	52800044 	addi	r10,r10,1
   25bfc:	5014913a 	slli	r10,r10,4
   25c00:	308003cc 	andi	r2,r6,15
   25c04:	010000c4 	movi	r4,3
   25c08:	8287883a 	add	r3,r16,r10
   25c0c:	2a95883a 	add	r10,r5,r10
   25c10:	2080182e 	bgeu	r4,r2,25c74 <memcpy+0x138>
   25c14:	147fff04 	addi	r17,r2,-4
   25c18:	8808d0ba 	srli	r4,r17,2
   25c1c:	1a400104 	addi	r9,r3,4
   25c20:	180d883a 	mov	r6,r3
   25c24:	2105883a 	add	r2,r4,r4
   25c28:	1085883a 	add	r2,r2,r2
   25c2c:	4893883a 	add	r9,r9,r2
   25c30:	500f883a 	mov	r7,r10
   25c34:	3a000017 	ldw	r8,0(r7)
   25c38:	31800104 	addi	r6,r6,4
   25c3c:	39c00104 	addi	r7,r7,4
   25c40:	323fff15 	stw	r8,-4(r6)
   25c44:	327ffb1e 	bne	r6,r9,25c34 <memcpy+0xf8>
   25c48:	20800044 	addi	r2,r4,1
   25c4c:	1085883a 	add	r2,r2,r2
   25c50:	1085883a 	add	r2,r2,r2
   25c54:	017fff04 	movi	r5,-4
   25c58:	18a5883a 	add	r18,r3,r2
   25c5c:	50a7883a 	add	r19,r10,r2
   25c60:	00297540 	call	29754 <__mulsi3>
   25c64:	1445883a 	add	r2,r2,r17
   25c68:	980b883a 	mov	r5,r19
   25c6c:	9007883a 	mov	r3,r18
   25c70:	003fc006 	br	25b74 <memcpy+0x38>
   25c74:	500b883a 	mov	r5,r10
   25c78:	003fbe06 	br	25b74 <memcpy+0x38>

00025c7c <memmove>:
   25c7c:	defffb04 	addi	sp,sp,-20
   25c80:	dc000015 	stw	r16,0(sp)
   25c84:	dfc00415 	stw	ra,16(sp)
   25c88:	dcc00315 	stw	r19,12(sp)
   25c8c:	dc800215 	stw	r18,8(sp)
   25c90:	dc400115 	stw	r17,4(sp)
   25c94:	2021883a 	mov	r16,r4
   25c98:	300f883a 	mov	r7,r6
   25c9c:	2900122e 	bgeu	r5,r4,25ce8 <memmove+0x6c>
   25ca0:	2987883a 	add	r3,r5,r6
   25ca4:	20c0102e 	bgeu	r4,r3,25ce8 <memmove+0x6c>
   25ca8:	218b883a 	add	r5,r4,r6
   25cac:	1989c83a 	sub	r4,r3,r6
   25cb0:	30000526 	beq	r6,zero,25cc8 <memmove+0x4c>
   25cb4:	18ffffc4 	addi	r3,r3,-1
   25cb8:	18800003 	ldbu	r2,0(r3)
   25cbc:	297fffc4 	addi	r5,r5,-1
   25cc0:	28800005 	stb	r2,0(r5)
   25cc4:	193ffb1e 	bne	r3,r4,25cb4 <memmove+0x38>
   25cc8:	8005883a 	mov	r2,r16
   25ccc:	dfc00417 	ldw	ra,16(sp)
   25cd0:	dcc00317 	ldw	r19,12(sp)
   25cd4:	dc800217 	ldw	r18,8(sp)
   25cd8:	dc400117 	ldw	r17,4(sp)
   25cdc:	dc000017 	ldw	r16,0(sp)
   25ce0:	dec00504 	addi	sp,sp,20
   25ce4:	f800283a 	ret
   25ce8:	008003c4 	movi	r2,15
   25cec:	1180422e 	bgeu	r2,r6,25df8 <memmove+0x17c>
   25cf0:	2c04b03a 	or	r2,r5,r16
   25cf4:	108000cc 	andi	r2,r2,3
   25cf8:	10003f1e 	bne	r2,zero,25df8 <memmove+0x17c>
   25cfc:	32bffc04 	addi	r10,r6,-16
   25d00:	5014d13a 	srli	r10,r10,4
   25d04:	81000404 	addi	r4,r16,16
   25d08:	8007883a 	mov	r3,r16
   25d0c:	5004913a 	slli	r2,r10,4
   25d10:	280f883a 	mov	r7,r5
   25d14:	2089883a 	add	r4,r4,r2
   25d18:	38800017 	ldw	r2,0(r7)
   25d1c:	18c00404 	addi	r3,r3,16
   25d20:	39c00404 	addi	r7,r7,16
   25d24:	18bffc15 	stw	r2,-16(r3)
   25d28:	38bffd17 	ldw	r2,-12(r7)
   25d2c:	18bffd15 	stw	r2,-12(r3)
   25d30:	38bffe17 	ldw	r2,-8(r7)
   25d34:	18bffe15 	stw	r2,-8(r3)
   25d38:	38bfff17 	ldw	r2,-4(r7)
   25d3c:	18bfff15 	stw	r2,-4(r3)
   25d40:	193ff51e 	bne	r3,r4,25d18 <memmove+0x9c>
   25d44:	52800044 	addi	r10,r10,1
   25d48:	5014913a 	slli	r10,r10,4
   25d4c:	31c003cc 	andi	r7,r6,15
   25d50:	008000c4 	movi	r2,3
   25d54:	8287883a 	add	r3,r16,r10
   25d58:	2a95883a 	add	r10,r5,r10
   25d5c:	11c0282e 	bgeu	r2,r7,25e00 <memmove+0x184>
   25d60:	3c7fff04 	addi	r17,r7,-4
   25d64:	8808d0ba 	srli	r4,r17,2
   25d68:	1a400104 	addi	r9,r3,4
   25d6c:	180d883a 	mov	r6,r3
   25d70:	2105883a 	add	r2,r4,r4
   25d74:	1085883a 	add	r2,r2,r2
   25d78:	4893883a 	add	r9,r9,r2
   25d7c:	5005883a 	mov	r2,r10
   25d80:	12000017 	ldw	r8,0(r2)
   25d84:	31800104 	addi	r6,r6,4
   25d88:	10800104 	addi	r2,r2,4
   25d8c:	323fff15 	stw	r8,-4(r6)
   25d90:	327ffb1e 	bne	r6,r9,25d80 <memmove+0x104>
   25d94:	20800044 	addi	r2,r4,1
   25d98:	1085883a 	add	r2,r2,r2
   25d9c:	1085883a 	add	r2,r2,r2
   25da0:	017fff04 	movi	r5,-4
   25da4:	18a5883a 	add	r18,r3,r2
   25da8:	50a7883a 	add	r19,r10,r2
   25dac:	00297540 	call	29754 <__mulsi3>
   25db0:	144f883a 	add	r7,r2,r17
   25db4:	980b883a 	mov	r5,r19
   25db8:	9007883a 	mov	r3,r18
   25dbc:	383fc226 	beq	r7,zero,25cc8 <memmove+0x4c>
   25dc0:	19cf883a 	add	r7,r3,r7
   25dc4:	29800003 	ldbu	r6,0(r5)
   25dc8:	18c00044 	addi	r3,r3,1
   25dcc:	29400044 	addi	r5,r5,1
   25dd0:	19bfffc5 	stb	r6,-1(r3)
   25dd4:	19fffb1e 	bne	r3,r7,25dc4 <memmove+0x148>
   25dd8:	8005883a 	mov	r2,r16
   25ddc:	dfc00417 	ldw	ra,16(sp)
   25de0:	dcc00317 	ldw	r19,12(sp)
   25de4:	dc800217 	ldw	r18,8(sp)
   25de8:	dc400117 	ldw	r17,4(sp)
   25dec:	dc000017 	ldw	r16,0(sp)
   25df0:	dec00504 	addi	sp,sp,20
   25df4:	f800283a 	ret
   25df8:	8007883a 	mov	r3,r16
   25dfc:	003fef06 	br	25dbc <memmove+0x140>
   25e00:	500b883a 	mov	r5,r10
   25e04:	003fed06 	br	25dbc <memmove+0x140>

00025e08 <memset>:
   25e08:	00c000c4 	movi	r3,3
   25e0c:	2005883a 	mov	r2,r4
   25e10:	29403fcc 	andi	r5,r5,255
   25e14:	19802d2e 	bgeu	r3,r6,25ecc <memset+0xc4>
   25e18:	20c6703a 	and	r3,r4,r3
   25e1c:	18002e1e 	bne	r3,zero,25ed8 <memset+0xd0>
   25e20:	2806923a 	slli	r3,r5,8
   25e24:	010003c4 	movi	r4,15
   25e28:	3011883a 	mov	r8,r6
   25e2c:	1946b03a 	or	r3,r3,r5
   25e30:	180e943a 	slli	r7,r3,16
   25e34:	38ceb03a 	or	r7,r7,r3
   25e38:	1007883a 	mov	r3,r2
   25e3c:	21800f2e 	bgeu	r4,r6,25e7c <memset+0x74>
   25e40:	19c00015 	stw	r7,0(r3)
   25e44:	19c00115 	stw	r7,4(r3)
   25e48:	19c00215 	stw	r7,8(r3)
   25e4c:	19c00315 	stw	r7,12(r3)
   25e50:	423ffc04 	addi	r8,r8,-16
   25e54:	18c00404 	addi	r3,r3,16
   25e58:	223ff936 	bltu	r4,r8,25e40 <memset+0x38>
   25e5c:	30fffc04 	addi	r3,r6,-16
   25e60:	1806d13a 	srli	r3,r3,4
   25e64:	318003cc 	andi	r6,r6,15
   25e68:	010000c4 	movi	r4,3
   25e6c:	18c00044 	addi	r3,r3,1
   25e70:	1806913a 	slli	r3,r3,4
   25e74:	10c7883a 	add	r3,r2,r3
   25e78:	21800e2e 	bgeu	r4,r6,25eb4 <memset+0xac>
   25e7c:	1813883a 	mov	r9,r3
   25e80:	3011883a 	mov	r8,r6
   25e84:	010000c4 	movi	r4,3
   25e88:	49c00015 	stw	r7,0(r9)
   25e8c:	423fff04 	addi	r8,r8,-4
   25e90:	4a400104 	addi	r9,r9,4
   25e94:	223ffc36 	bltu	r4,r8,25e88 <memset+0x80>
   25e98:	313fff04 	addi	r4,r6,-4
   25e9c:	2008d0ba 	srli	r4,r4,2
   25ea0:	318000cc 	andi	r6,r6,3
   25ea4:	21000044 	addi	r4,r4,1
   25ea8:	2109883a 	add	r4,r4,r4
   25eac:	2109883a 	add	r4,r4,r4
   25eb0:	1907883a 	add	r3,r3,r4
   25eb4:	30000a26 	beq	r6,zero,25ee0 <memset+0xd8>
   25eb8:	198d883a 	add	r6,r3,r6
   25ebc:	19400005 	stb	r5,0(r3)
   25ec0:	18c00044 	addi	r3,r3,1
   25ec4:	19bffd1e 	bne	r3,r6,25ebc <memset+0xb4>
   25ec8:	f800283a 	ret
   25ecc:	2007883a 	mov	r3,r4
   25ed0:	303ff91e 	bne	r6,zero,25eb8 <memset+0xb0>
   25ed4:	00000206 	br	25ee0 <memset+0xd8>
   25ed8:	2007883a 	mov	r3,r4
   25edc:	003ff606 	br	25eb8 <memset+0xb0>
   25ee0:	f800283a 	ret

00025ee4 <_Balloc>:
   25ee4:	20801317 	ldw	r2,76(r4)
   25ee8:	defffc04 	addi	sp,sp,-16
   25eec:	dc400115 	stw	r17,4(sp)
   25ef0:	dc000015 	stw	r16,0(sp)
   25ef4:	dfc00315 	stw	ra,12(sp)
   25ef8:	dc800215 	stw	r18,8(sp)
   25efc:	2023883a 	mov	r17,r4
   25f00:	2821883a 	mov	r16,r5
   25f04:	10000f26 	beq	r2,zero,25f44 <_Balloc+0x60>
   25f08:	8407883a 	add	r3,r16,r16
   25f0c:	18c7883a 	add	r3,r3,r3
   25f10:	10c7883a 	add	r3,r2,r3
   25f14:	18800017 	ldw	r2,0(r3)
   25f18:	10001126 	beq	r2,zero,25f60 <_Balloc+0x7c>
   25f1c:	11000017 	ldw	r4,0(r2)
   25f20:	19000015 	stw	r4,0(r3)
   25f24:	10000415 	stw	zero,16(r2)
   25f28:	10000315 	stw	zero,12(r2)
   25f2c:	dfc00317 	ldw	ra,12(sp)
   25f30:	dc800217 	ldw	r18,8(sp)
   25f34:	dc400117 	ldw	r17,4(sp)
   25f38:	dc000017 	ldw	r16,0(sp)
   25f3c:	dec00404 	addi	sp,sp,16
   25f40:	f800283a 	ret
   25f44:	01400104 	movi	r5,4
   25f48:	01800404 	movi	r6,16
   25f4c:	00278480 	call	27848 <_calloc_r>
   25f50:	88801315 	stw	r2,76(r17)
   25f54:	103fec1e 	bne	r2,zero,25f08 <_Balloc+0x24>
   25f58:	0005883a 	mov	r2,zero
   25f5c:	003ff306 	br	25f2c <_Balloc+0x48>
   25f60:	01400044 	movi	r5,1
   25f64:	2c24983a 	sll	r18,r5,r16
   25f68:	8809883a 	mov	r4,r17
   25f6c:	91800144 	addi	r6,r18,5
   25f70:	318d883a 	add	r6,r6,r6
   25f74:	318d883a 	add	r6,r6,r6
   25f78:	00278480 	call	27848 <_calloc_r>
   25f7c:	103ff626 	beq	r2,zero,25f58 <_Balloc+0x74>
   25f80:	14000115 	stw	r16,4(r2)
   25f84:	14800215 	stw	r18,8(r2)
   25f88:	003fe606 	br	25f24 <_Balloc+0x40>

00025f8c <_Bfree>:
   25f8c:	28000826 	beq	r5,zero,25fb0 <_Bfree+0x24>
   25f90:	28c00117 	ldw	r3,4(r5)
   25f94:	20801317 	ldw	r2,76(r4)
   25f98:	18c7883a 	add	r3,r3,r3
   25f9c:	18c7883a 	add	r3,r3,r3
   25fa0:	10c5883a 	add	r2,r2,r3
   25fa4:	10c00017 	ldw	r3,0(r2)
   25fa8:	28c00015 	stw	r3,0(r5)
   25fac:	11400015 	stw	r5,0(r2)
   25fb0:	f800283a 	ret

00025fb4 <__multadd>:
   25fb4:	defff604 	addi	sp,sp,-40
   25fb8:	dd400515 	stw	r21,20(sp)
   25fbc:	2d400417 	ldw	r21,16(r5)
   25fc0:	df000815 	stw	fp,32(sp)
   25fc4:	ddc00715 	stw	r23,28(sp)
   25fc8:	dd800615 	stw	r22,24(sp)
   25fcc:	dd000415 	stw	r20,16(sp)
   25fd0:	dc400115 	stw	r17,4(sp)
   25fd4:	dc000015 	stw	r16,0(sp)
   25fd8:	dfc00915 	stw	ra,36(sp)
   25fdc:	dcc00315 	stw	r19,12(sp)
   25fe0:	dc800215 	stw	r18,8(sp)
   25fe4:	282d883a 	mov	r22,r5
   25fe8:	202f883a 	mov	r23,r4
   25fec:	3029883a 	mov	r20,r6
   25ff0:	3839883a 	mov	fp,r7
   25ff4:	2c000504 	addi	r16,r5,20
   25ff8:	0023883a 	mov	r17,zero
   25ffc:	84c00017 	ldw	r19,0(r16)
   26000:	a00b883a 	mov	r5,r20
   26004:	8c400044 	addi	r17,r17,1
   26008:	993fffcc 	andi	r4,r19,65535
   2600c:	00297540 	call	29754 <__mulsi3>
   26010:	1725883a 	add	r18,r2,fp
   26014:	9808d43a 	srli	r4,r19,16
   26018:	9026d43a 	srli	r19,r18,16
   2601c:	a00b883a 	mov	r5,r20
   26020:	00297540 	call	29754 <__mulsi3>
   26024:	988f883a 	add	r7,r19,r2
   26028:	3804943a 	slli	r2,r7,16
   2602c:	94bfffcc 	andi	r18,r18,65535
   26030:	3838d43a 	srli	fp,r7,16
   26034:	14a5883a 	add	r18,r2,r18
   26038:	84800015 	stw	r18,0(r16)
   2603c:	84000104 	addi	r16,r16,4
   26040:	8d7fee16 	blt	r17,r21,25ffc <__multadd+0x48>
   26044:	e0000926 	beq	fp,zero,2606c <__multadd+0xb8>
   26048:	b0800217 	ldw	r2,8(r22)
   2604c:	a880140e 	bge	r21,r2,260a0 <__multadd+0xec>
   26050:	a8800144 	addi	r2,r21,5
   26054:	1085883a 	add	r2,r2,r2
   26058:	1085883a 	add	r2,r2,r2
   2605c:	b085883a 	add	r2,r22,r2
   26060:	ad400044 	addi	r21,r21,1
   26064:	17000015 	stw	fp,0(r2)
   26068:	b5400415 	stw	r21,16(r22)
   2606c:	b005883a 	mov	r2,r22
   26070:	dfc00917 	ldw	ra,36(sp)
   26074:	df000817 	ldw	fp,32(sp)
   26078:	ddc00717 	ldw	r23,28(sp)
   2607c:	dd800617 	ldw	r22,24(sp)
   26080:	dd400517 	ldw	r21,20(sp)
   26084:	dd000417 	ldw	r20,16(sp)
   26088:	dcc00317 	ldw	r19,12(sp)
   2608c:	dc800217 	ldw	r18,8(sp)
   26090:	dc400117 	ldw	r17,4(sp)
   26094:	dc000017 	ldw	r16,0(sp)
   26098:	dec00a04 	addi	sp,sp,40
   2609c:	f800283a 	ret
   260a0:	b1400117 	ldw	r5,4(r22)
   260a4:	b809883a 	mov	r4,r23
   260a8:	29400044 	addi	r5,r5,1
   260ac:	0025ee40 	call	25ee4 <_Balloc>
   260b0:	b1800417 	ldw	r6,16(r22)
   260b4:	b1400304 	addi	r5,r22,12
   260b8:	11000304 	addi	r4,r2,12
   260bc:	31800084 	addi	r6,r6,2
   260c0:	318d883a 	add	r6,r6,r6
   260c4:	318d883a 	add	r6,r6,r6
   260c8:	1021883a 	mov	r16,r2
   260cc:	0025b3c0 	call	25b3c <memcpy>
   260d0:	b0c00117 	ldw	r3,4(r22)
   260d4:	b8801317 	ldw	r2,76(r23)
   260d8:	18c7883a 	add	r3,r3,r3
   260dc:	18c7883a 	add	r3,r3,r3
   260e0:	10c5883a 	add	r2,r2,r3
   260e4:	10c00017 	ldw	r3,0(r2)
   260e8:	b0c00015 	stw	r3,0(r22)
   260ec:	15800015 	stw	r22,0(r2)
   260f0:	802d883a 	mov	r22,r16
   260f4:	003fd606 	br	26050 <__multadd+0x9c>

000260f8 <__s2b>:
   260f8:	defff904 	addi	sp,sp,-28
   260fc:	dd000415 	stw	r20,16(sp)
   26100:	dc400115 	stw	r17,4(sp)
   26104:	2829883a 	mov	r20,r5
   26108:	2023883a 	mov	r17,r4
   2610c:	01400244 	movi	r5,9
   26110:	39000204 	addi	r4,r7,8
   26114:	dcc00315 	stw	r19,12(sp)
   26118:	dc800215 	stw	r18,8(sp)
   2611c:	dfc00615 	stw	ra,24(sp)
   26120:	dd400515 	stw	r21,20(sp)
   26124:	dc000015 	stw	r16,0(sp)
   26128:	3825883a 	mov	r18,r7
   2612c:	3027883a 	mov	r19,r6
   26130:	00296980 	call	29698 <__divsi3>
   26134:	00c00044 	movi	r3,1
   26138:	000b883a 	mov	r5,zero
   2613c:	1880030e 	bge	r3,r2,2614c <__s2b+0x54>
   26140:	18c7883a 	add	r3,r3,r3
   26144:	29400044 	addi	r5,r5,1
   26148:	18bffd16 	blt	r3,r2,26140 <__s2b+0x48>
   2614c:	8809883a 	mov	r4,r17
   26150:	0025ee40 	call	25ee4 <_Balloc>
   26154:	d8c00717 	ldw	r3,28(sp)
   26158:	10c00515 	stw	r3,20(r2)
   2615c:	00c00044 	movi	r3,1
   26160:	10c00415 	stw	r3,16(r2)
   26164:	00c00244 	movi	r3,9
   26168:	1cc0210e 	bge	r3,r19,261f0 <__s2b+0xf8>
   2616c:	a0eb883a 	add	r21,r20,r3
   26170:	a821883a 	mov	r16,r21
   26174:	a4e9883a 	add	r20,r20,r19
   26178:	81c00007 	ldb	r7,0(r16)
   2617c:	8809883a 	mov	r4,r17
   26180:	84000044 	addi	r16,r16,1
   26184:	100b883a 	mov	r5,r2
   26188:	01800284 	movi	r6,10
   2618c:	39fff404 	addi	r7,r7,-48
   26190:	0025fb40 	call	25fb4 <__multadd>
   26194:	853ff81e 	bne	r16,r20,26178 <__s2b+0x80>
   26198:	ace1883a 	add	r16,r21,r19
   2619c:	843ffe04 	addi	r16,r16,-8
   261a0:	9c800a0e 	bge	r19,r18,261cc <__s2b+0xd4>
   261a4:	94e5c83a 	sub	r18,r18,r19
   261a8:	84a5883a 	add	r18,r16,r18
   261ac:	81c00007 	ldb	r7,0(r16)
   261b0:	8809883a 	mov	r4,r17
   261b4:	84000044 	addi	r16,r16,1
   261b8:	100b883a 	mov	r5,r2
   261bc:	01800284 	movi	r6,10
   261c0:	39fff404 	addi	r7,r7,-48
   261c4:	0025fb40 	call	25fb4 <__multadd>
   261c8:	84bff81e 	bne	r16,r18,261ac <__s2b+0xb4>
   261cc:	dfc00617 	ldw	ra,24(sp)
   261d0:	dd400517 	ldw	r21,20(sp)
   261d4:	dd000417 	ldw	r20,16(sp)
   261d8:	dcc00317 	ldw	r19,12(sp)
   261dc:	dc800217 	ldw	r18,8(sp)
   261e0:	dc400117 	ldw	r17,4(sp)
   261e4:	dc000017 	ldw	r16,0(sp)
   261e8:	dec00704 	addi	sp,sp,28
   261ec:	f800283a 	ret
   261f0:	a4000284 	addi	r16,r20,10
   261f4:	1827883a 	mov	r19,r3
   261f8:	003fe906 	br	261a0 <__s2b+0xa8>

000261fc <__hi0bits>:
   261fc:	20bfffec 	andhi	r2,r4,65535
   26200:	1000141e 	bne	r2,zero,26254 <__hi0bits+0x58>
   26204:	2008943a 	slli	r4,r4,16
   26208:	00800404 	movi	r2,16
   2620c:	20ffc02c 	andhi	r3,r4,65280
   26210:	1800021e 	bne	r3,zero,2621c <__hi0bits+0x20>
   26214:	2008923a 	slli	r4,r4,8
   26218:	10800204 	addi	r2,r2,8
   2621c:	20fc002c 	andhi	r3,r4,61440
   26220:	1800021e 	bne	r3,zero,2622c <__hi0bits+0x30>
   26224:	2008913a 	slli	r4,r4,4
   26228:	10800104 	addi	r2,r2,4
   2622c:	20f0002c 	andhi	r3,r4,49152
   26230:	1800031e 	bne	r3,zero,26240 <__hi0bits+0x44>
   26234:	2109883a 	add	r4,r4,r4
   26238:	10800084 	addi	r2,r2,2
   2623c:	2109883a 	add	r4,r4,r4
   26240:	20000316 	blt	r4,zero,26250 <__hi0bits+0x54>
   26244:	2110002c 	andhi	r4,r4,16384
   26248:	2000041e 	bne	r4,zero,2625c <__hi0bits+0x60>
   2624c:	00800804 	movi	r2,32
   26250:	f800283a 	ret
   26254:	0005883a 	mov	r2,zero
   26258:	003fec06 	br	2620c <__hi0bits+0x10>
   2625c:	10800044 	addi	r2,r2,1
   26260:	f800283a 	ret

00026264 <__lo0bits>:
   26264:	20c00017 	ldw	r3,0(r4)
   26268:	188001cc 	andi	r2,r3,7
   2626c:	10000826 	beq	r2,zero,26290 <__lo0bits+0x2c>
   26270:	1880004c 	andi	r2,r3,1
   26274:	1000211e 	bne	r2,zero,262fc <__lo0bits+0x98>
   26278:	1880008c 	andi	r2,r3,2
   2627c:	1000211e 	bne	r2,zero,26304 <__lo0bits+0xa0>
   26280:	1806d0ba 	srli	r3,r3,2
   26284:	00800084 	movi	r2,2
   26288:	20c00015 	stw	r3,0(r4)
   2628c:	f800283a 	ret
   26290:	18bfffcc 	andi	r2,r3,65535
   26294:	10001326 	beq	r2,zero,262e4 <__lo0bits+0x80>
   26298:	0005883a 	mov	r2,zero
   2629c:	19403fcc 	andi	r5,r3,255
   262a0:	2800021e 	bne	r5,zero,262ac <__lo0bits+0x48>
   262a4:	1806d23a 	srli	r3,r3,8
   262a8:	10800204 	addi	r2,r2,8
   262ac:	194003cc 	andi	r5,r3,15
   262b0:	2800021e 	bne	r5,zero,262bc <__lo0bits+0x58>
   262b4:	1806d13a 	srli	r3,r3,4
   262b8:	10800104 	addi	r2,r2,4
   262bc:	194000cc 	andi	r5,r3,3
   262c0:	2800021e 	bne	r5,zero,262cc <__lo0bits+0x68>
   262c4:	1806d0ba 	srli	r3,r3,2
   262c8:	10800084 	addi	r2,r2,2
   262cc:	1940004c 	andi	r5,r3,1
   262d0:	2800081e 	bne	r5,zero,262f4 <__lo0bits+0x90>
   262d4:	1806d07a 	srli	r3,r3,1
   262d8:	1800051e 	bne	r3,zero,262f0 <__lo0bits+0x8c>
   262dc:	00800804 	movi	r2,32
   262e0:	f800283a 	ret
   262e4:	1806d43a 	srli	r3,r3,16
   262e8:	00800404 	movi	r2,16
   262ec:	003feb06 	br	2629c <__lo0bits+0x38>
   262f0:	10800044 	addi	r2,r2,1
   262f4:	20c00015 	stw	r3,0(r4)
   262f8:	f800283a 	ret
   262fc:	0005883a 	mov	r2,zero
   26300:	f800283a 	ret
   26304:	1806d07a 	srli	r3,r3,1
   26308:	00800044 	movi	r2,1
   2630c:	20c00015 	stw	r3,0(r4)
   26310:	f800283a 	ret

00026314 <__i2b>:
   26314:	defffd04 	addi	sp,sp,-12
   26318:	dc000015 	stw	r16,0(sp)
   2631c:	04000044 	movi	r16,1
   26320:	dc400115 	stw	r17,4(sp)
   26324:	2823883a 	mov	r17,r5
   26328:	800b883a 	mov	r5,r16
   2632c:	dfc00215 	stw	ra,8(sp)
   26330:	0025ee40 	call	25ee4 <_Balloc>
   26334:	14400515 	stw	r17,20(r2)
   26338:	14000415 	stw	r16,16(r2)
   2633c:	dfc00217 	ldw	ra,8(sp)
   26340:	dc400117 	ldw	r17,4(sp)
   26344:	dc000017 	ldw	r16,0(sp)
   26348:	dec00304 	addi	sp,sp,12
   2634c:	f800283a 	ret

00026350 <__multiply>:
   26350:	defff004 	addi	sp,sp,-64
   26354:	dc800815 	stw	r18,32(sp)
   26358:	dc400715 	stw	r17,28(sp)
   2635c:	34800417 	ldw	r18,16(r6)
   26360:	2c400417 	ldw	r17,16(r5)
   26364:	ddc00d15 	stw	r23,52(sp)
   26368:	dc000615 	stw	r16,24(sp)
   2636c:	dfc00f15 	stw	ra,60(sp)
   26370:	df000e15 	stw	fp,56(sp)
   26374:	dd800c15 	stw	r22,48(sp)
   26378:	dd400b15 	stw	r21,44(sp)
   2637c:	dd000a15 	stw	r20,40(sp)
   26380:	dcc00915 	stw	r19,36(sp)
   26384:	2821883a 	mov	r16,r5
   26388:	302f883a 	mov	r23,r6
   2638c:	8c80050e 	bge	r17,r18,263a4 <__multiply+0x54>
   26390:	8807883a 	mov	r3,r17
   26394:	3021883a 	mov	r16,r6
   26398:	9023883a 	mov	r17,r18
   2639c:	282f883a 	mov	r23,r5
   263a0:	1825883a 	mov	r18,r3
   263a4:	80800217 	ldw	r2,8(r16)
   263a8:	8c87883a 	add	r3,r17,r18
   263ac:	d8c00115 	stw	r3,4(sp)
   263b0:	81400117 	ldw	r5,4(r16)
   263b4:	10c0010e 	bge	r2,r3,263bc <__multiply+0x6c>
   263b8:	29400044 	addi	r5,r5,1
   263bc:	0025ee40 	call	25ee4 <_Balloc>
   263c0:	d8c00117 	ldw	r3,4(sp)
   263c4:	d8800515 	stw	r2,20(sp)
   263c8:	14c00504 	addi	r19,r2,20
   263cc:	1d400144 	addi	r21,r3,5
   263d0:	ad6b883a 	add	r21,r21,r21
   263d4:	ad6b883a 	add	r21,r21,r21
   263d8:	156b883a 	add	r21,r2,r21
   263dc:	dd400215 	stw	r21,8(sp)
   263e0:	9805883a 	mov	r2,r19
   263e4:	9d40042e 	bgeu	r19,r21,263f8 <__multiply+0xa8>
   263e8:	d8c00217 	ldw	r3,8(sp)
   263ec:	10000015 	stw	zero,0(r2)
   263f0:	10800104 	addi	r2,r2,4
   263f4:	10fffc36 	bltu	r2,r3,263e8 <__multiply+0x98>
   263f8:	94800144 	addi	r18,r18,5
   263fc:	94a5883a 	add	r18,r18,r18
   26400:	94ad883a 	add	r22,r18,r18
   26404:	8c400144 	addi	r17,r17,5
   26408:	8c63883a 	add	r17,r17,r17
   2640c:	bdad883a 	add	r22,r23,r22
   26410:	80c00504 	addi	r3,r16,20
   26414:	8c63883a 	add	r17,r17,r17
   26418:	bc800504 	addi	r18,r23,20
   2641c:	dd800315 	stw	r22,12(sp)
   26420:	d8c00415 	stw	r3,16(sp)
   26424:	dcc00015 	stw	r19,0(sp)
   26428:	8463883a 	add	r17,r16,r17
   2642c:	9580412e 	bgeu	r18,r22,26534 <__multiply+0x1e4>
   26430:	90800017 	ldw	r2,0(r18)
   26434:	173fffcc 	andi	fp,r2,65535
   26438:	e0001a26 	beq	fp,zero,264a4 <__multiply+0x154>
   2643c:	dd000017 	ldw	r20,0(sp)
   26440:	dd800417 	ldw	r22,16(sp)
   26444:	002b883a 	mov	r21,zero
   26448:	b4c00017 	ldw	r19,0(r22)
   2644c:	a4000017 	ldw	r16,0(r20)
   26450:	e00b883a 	mov	r5,fp
   26454:	993fffcc 	andi	r4,r19,65535
   26458:	00297540 	call	29754 <__mulsi3>
   2645c:	9808d43a 	srli	r4,r19,16
   26460:	817fffcc 	andi	r5,r16,65535
   26464:	1145883a 	add	r2,r2,r5
   26468:	e00b883a 	mov	r5,fp
   2646c:	1567883a 	add	r19,r2,r21
   26470:	8020d43a 	srli	r16,r16,16
   26474:	00297540 	call	29754 <__mulsi3>
   26478:	9808d43a 	srli	r4,r19,16
   2647c:	1405883a 	add	r2,r2,r16
   26480:	a4c0000d 	sth	r19,0(r20)
   26484:	110f883a 	add	r7,r2,r4
   26488:	a1c0008d 	sth	r7,2(r20)
   2648c:	b5800104 	addi	r22,r22,4
   26490:	382ad43a 	srli	r21,r7,16
   26494:	a5000104 	addi	r20,r20,4
   26498:	b47feb36 	bltu	r22,r17,26448 <__multiply+0xf8>
   2649c:	a5400015 	stw	r21,0(r20)
   264a0:	90800017 	ldw	r2,0(r18)
   264a4:	1038d43a 	srli	fp,r2,16
   264a8:	e0001c26 	beq	fp,zero,2651c <__multiply+0x1cc>
   264ac:	d8c00017 	ldw	r3,0(sp)
   264b0:	dd000417 	ldw	r20,16(sp)
   264b4:	002b883a 	mov	r21,zero
   264b8:	1d800017 	ldw	r22,0(r3)
   264bc:	182f883a 	mov	r23,r3
   264c0:	b021883a 	mov	r16,r22
   264c4:	a4c00017 	ldw	r19,0(r20)
   264c8:	8020d43a 	srli	r16,r16,16
   264cc:	e00b883a 	mov	r5,fp
   264d0:	993fffcc 	andi	r4,r19,65535
   264d4:	00297540 	call	29754 <__mulsi3>
   264d8:	1405883a 	add	r2,r2,r16
   264dc:	9808d43a 	srli	r4,r19,16
   264e0:	156b883a 	add	r21,r2,r21
   264e4:	bdc00104 	addi	r23,r23,4
   264e8:	bdbfff0d 	sth	r22,-4(r23)
   264ec:	bd7fff8d 	sth	r21,-2(r23)
   264f0:	bc000017 	ldw	r16,0(r23)
   264f4:	e00b883a 	mov	r5,fp
   264f8:	00297540 	call	29754 <__mulsi3>
   264fc:	a80ed43a 	srli	r7,r21,16
   26500:	813fffcc 	andi	r4,r16,65535
   26504:	2085883a 	add	r2,r4,r2
   26508:	11ed883a 	add	r22,r2,r7
   2650c:	a5000104 	addi	r20,r20,4
   26510:	b02ad43a 	srli	r21,r22,16
   26514:	a47feb36 	bltu	r20,r17,264c4 <__multiply+0x174>
   26518:	bd800015 	stw	r22,0(r23)
   2651c:	d8c00017 	ldw	r3,0(sp)
   26520:	94800104 	addi	r18,r18,4
   26524:	18c00104 	addi	r3,r3,4
   26528:	d8c00015 	stw	r3,0(sp)
   2652c:	d8c00317 	ldw	r3,12(sp)
   26530:	90ffbf36 	bltu	r18,r3,26430 <__multiply+0xe0>
   26534:	d8c00117 	ldw	r3,4(sp)
   26538:	00c00c0e 	bge	zero,r3,2656c <__multiply+0x21c>
   2653c:	d8c00217 	ldw	r3,8(sp)
   26540:	18bfff17 	ldw	r2,-4(r3)
   26544:	1d7fff04 	addi	r21,r3,-4
   26548:	10000326 	beq	r2,zero,26558 <__multiply+0x208>
   2654c:	00000706 	br	2656c <__multiply+0x21c>
   26550:	a8800017 	ldw	r2,0(r21)
   26554:	1000051e 	bne	r2,zero,2656c <__multiply+0x21c>
   26558:	d8c00117 	ldw	r3,4(sp)
   2655c:	ad7fff04 	addi	r21,r21,-4
   26560:	18ffffc4 	addi	r3,r3,-1
   26564:	d8c00115 	stw	r3,4(sp)
   26568:	183ff91e 	bne	r3,zero,26550 <__multiply+0x200>
   2656c:	d8800517 	ldw	r2,20(sp)
   26570:	d8c00117 	ldw	r3,4(sp)
   26574:	10c00415 	stw	r3,16(r2)
   26578:	dfc00f17 	ldw	ra,60(sp)
   2657c:	df000e17 	ldw	fp,56(sp)
   26580:	ddc00d17 	ldw	r23,52(sp)
   26584:	dd800c17 	ldw	r22,48(sp)
   26588:	dd400b17 	ldw	r21,44(sp)
   2658c:	dd000a17 	ldw	r20,40(sp)
   26590:	dcc00917 	ldw	r19,36(sp)
   26594:	dc800817 	ldw	r18,32(sp)
   26598:	dc400717 	ldw	r17,28(sp)
   2659c:	dc000617 	ldw	r16,24(sp)
   265a0:	dec01004 	addi	sp,sp,64
   265a4:	f800283a 	ret

000265a8 <__pow5mult>:
   265a8:	defffb04 	addi	sp,sp,-20
   265ac:	dcc00315 	stw	r19,12(sp)
   265b0:	dc800215 	stw	r18,8(sp)
   265b4:	dc000015 	stw	r16,0(sp)
   265b8:	dfc00415 	stw	ra,16(sp)
   265bc:	dc400115 	stw	r17,4(sp)
   265c0:	308000cc 	andi	r2,r6,3
   265c4:	3021883a 	mov	r16,r6
   265c8:	2027883a 	mov	r19,r4
   265cc:	2825883a 	mov	r18,r5
   265d0:	10002e1e 	bne	r2,zero,2668c <__pow5mult+0xe4>
   265d4:	8021d0ba 	srai	r16,r16,2
   265d8:	80001a26 	beq	r16,zero,26644 <__pow5mult+0x9c>
   265dc:	9c401217 	ldw	r17,72(r19)
   265e0:	8800061e 	bne	r17,zero,265fc <__pow5mult+0x54>
   265e4:	00003406 	br	266b8 <__pow5mult+0x110>
   265e8:	8021d07a 	srai	r16,r16,1
   265ec:	80001526 	beq	r16,zero,26644 <__pow5mult+0x9c>
   265f0:	88c00017 	ldw	r3,0(r17)
   265f4:	18001b26 	beq	r3,zero,26664 <__pow5mult+0xbc>
   265f8:	1823883a 	mov	r17,r3
   265fc:	80c0004c 	andi	r3,r16,1
   26600:	183ff926 	beq	r3,zero,265e8 <__pow5mult+0x40>
   26604:	900b883a 	mov	r5,r18
   26608:	880d883a 	mov	r6,r17
   2660c:	9809883a 	mov	r4,r19
   26610:	00263500 	call	26350 <__multiply>
   26614:	90001b26 	beq	r18,zero,26684 <__pow5mult+0xdc>
   26618:	91000117 	ldw	r4,4(r18)
   2661c:	98c01317 	ldw	r3,76(r19)
   26620:	8021d07a 	srai	r16,r16,1
   26624:	2109883a 	add	r4,r4,r4
   26628:	2109883a 	add	r4,r4,r4
   2662c:	1907883a 	add	r3,r3,r4
   26630:	19000017 	ldw	r4,0(r3)
   26634:	91000015 	stw	r4,0(r18)
   26638:	1c800015 	stw	r18,0(r3)
   2663c:	1025883a 	mov	r18,r2
   26640:	803feb1e 	bne	r16,zero,265f0 <__pow5mult+0x48>
   26644:	9005883a 	mov	r2,r18
   26648:	dfc00417 	ldw	ra,16(sp)
   2664c:	dcc00317 	ldw	r19,12(sp)
   26650:	dc800217 	ldw	r18,8(sp)
   26654:	dc400117 	ldw	r17,4(sp)
   26658:	dc000017 	ldw	r16,0(sp)
   2665c:	dec00504 	addi	sp,sp,20
   26660:	f800283a 	ret
   26664:	880b883a 	mov	r5,r17
   26668:	880d883a 	mov	r6,r17
   2666c:	9809883a 	mov	r4,r19
   26670:	00263500 	call	26350 <__multiply>
   26674:	88800015 	stw	r2,0(r17)
   26678:	10000015 	stw	zero,0(r2)
   2667c:	1023883a 	mov	r17,r2
   26680:	003fde06 	br	265fc <__pow5mult+0x54>
   26684:	1025883a 	mov	r18,r2
   26688:	003fd706 	br	265e8 <__pow5mult+0x40>
   2668c:	10bfffc4 	addi	r2,r2,-1
   26690:	1085883a 	add	r2,r2,r2
   26694:	00c001f4 	movhi	r3,7
   26698:	18f29104 	addi	r3,r3,-13756
   2669c:	1085883a 	add	r2,r2,r2
   266a0:	1885883a 	add	r2,r3,r2
   266a4:	11800017 	ldw	r6,0(r2)
   266a8:	000f883a 	mov	r7,zero
   266ac:	0025fb40 	call	25fb4 <__multadd>
   266b0:	1025883a 	mov	r18,r2
   266b4:	003fc706 	br	265d4 <__pow5mult+0x2c>
   266b8:	9809883a 	mov	r4,r19
   266bc:	01409c44 	movi	r5,625
   266c0:	00263140 	call	26314 <__i2b>
   266c4:	98801215 	stw	r2,72(r19)
   266c8:	1023883a 	mov	r17,r2
   266cc:	10000015 	stw	zero,0(r2)
   266d0:	003fca06 	br	265fc <__pow5mult+0x54>

000266d4 <__lshift>:
   266d4:	defff904 	addi	sp,sp,-28
   266d8:	dd400515 	stw	r21,20(sp)
   266dc:	dc400115 	stw	r17,4(sp)
   266e0:	2d400417 	ldw	r21,16(r5)
   266e4:	3023d17a 	srai	r17,r6,5
   266e8:	28800217 	ldw	r2,8(r5)
   266ec:	dd000415 	stw	r20,16(sp)
   266f0:	8d6b883a 	add	r21,r17,r21
   266f4:	dcc00315 	stw	r19,12(sp)
   266f8:	dc800215 	stw	r18,8(sp)
   266fc:	dc000015 	stw	r16,0(sp)
   26700:	dfc00615 	stw	ra,24(sp)
   26704:	ac000044 	addi	r16,r21,1
   26708:	2825883a 	mov	r18,r5
   2670c:	3029883a 	mov	r20,r6
   26710:	2027883a 	mov	r19,r4
   26714:	29400117 	ldw	r5,4(r5)
   26718:	1400030e 	bge	r2,r16,26728 <__lshift+0x54>
   2671c:	1085883a 	add	r2,r2,r2
   26720:	29400044 	addi	r5,r5,1
   26724:	143ffd16 	blt	r2,r16,2671c <__lshift+0x48>
   26728:	9809883a 	mov	r4,r19
   2672c:	0025ee40 	call	25ee4 <_Balloc>
   26730:	10c00504 	addi	r3,r2,20
   26734:	0440090e 	bge	zero,r17,2675c <__lshift+0x88>
   26738:	000f883a 	mov	r7,zero
   2673c:	18000015 	stw	zero,0(r3)
   26740:	39c00044 	addi	r7,r7,1
   26744:	18c00104 	addi	r3,r3,4
   26748:	3c7ffc1e 	bne	r7,r17,2673c <__lshift+0x68>
   2674c:	38c00144 	addi	r3,r7,5
   26750:	18c7883a 	add	r3,r3,r3
   26754:	18c7883a 	add	r3,r3,r3
   26758:	10c7883a 	add	r3,r2,r3
   2675c:	92000417 	ldw	r8,16(r18)
   26760:	a18007cc 	andi	r6,r20,31
   26764:	91c00504 	addi	r7,r18,20
   26768:	42000144 	addi	r8,r8,5
   2676c:	4211883a 	add	r8,r8,r8
   26770:	4211883a 	add	r8,r8,r8
   26774:	9211883a 	add	r8,r18,r8
   26778:	30002226 	beq	r6,zero,26804 <__lshift+0x130>
   2677c:	02800804 	movi	r10,32
   26780:	5195c83a 	sub	r10,r10,r6
   26784:	000b883a 	mov	r5,zero
   26788:	3a400017 	ldw	r9,0(r7)
   2678c:	18c00104 	addi	r3,r3,4
   26790:	39c00104 	addi	r7,r7,4
   26794:	4992983a 	sll	r9,r9,r6
   26798:	2a4ab03a 	or	r5,r5,r9
   2679c:	197fff15 	stw	r5,-4(r3)
   267a0:	397fff17 	ldw	r5,-4(r7)
   267a4:	2a8ad83a 	srl	r5,r5,r10
   267a8:	3a3ff736 	bltu	r7,r8,26788 <__lshift+0xb4>
   267ac:	19400015 	stw	r5,0(r3)
   267b0:	28000126 	beq	r5,zero,267b8 <__lshift+0xe4>
   267b4:	ac000084 	addi	r16,r21,2
   267b8:	91000117 	ldw	r4,4(r18)
   267bc:	98c01317 	ldw	r3,76(r19)
   267c0:	843fffc4 	addi	r16,r16,-1
   267c4:	2109883a 	add	r4,r4,r4
   267c8:	2109883a 	add	r4,r4,r4
   267cc:	1907883a 	add	r3,r3,r4
   267d0:	19000017 	ldw	r4,0(r3)
   267d4:	14000415 	stw	r16,16(r2)
   267d8:	91000015 	stw	r4,0(r18)
   267dc:	1c800015 	stw	r18,0(r3)
   267e0:	dfc00617 	ldw	ra,24(sp)
   267e4:	dd400517 	ldw	r21,20(sp)
   267e8:	dd000417 	ldw	r20,16(sp)
   267ec:	dcc00317 	ldw	r19,12(sp)
   267f0:	dc800217 	ldw	r18,8(sp)
   267f4:	dc400117 	ldw	r17,4(sp)
   267f8:	dc000017 	ldw	r16,0(sp)
   267fc:	dec00704 	addi	sp,sp,28
   26800:	f800283a 	ret
   26804:	39400017 	ldw	r5,0(r7)
   26808:	18c00104 	addi	r3,r3,4
   2680c:	39c00104 	addi	r7,r7,4
   26810:	197fff15 	stw	r5,-4(r3)
   26814:	3a3fe82e 	bgeu	r7,r8,267b8 <__lshift+0xe4>
   26818:	39400017 	ldw	r5,0(r7)
   2681c:	18c00104 	addi	r3,r3,4
   26820:	39c00104 	addi	r7,r7,4
   26824:	197fff15 	stw	r5,-4(r3)
   26828:	3a3ff636 	bltu	r7,r8,26804 <__lshift+0x130>
   2682c:	003fe206 	br	267b8 <__lshift+0xe4>

00026830 <__mcmp>:
   26830:	20800417 	ldw	r2,16(r4)
   26834:	28c00417 	ldw	r3,16(r5)
   26838:	10c5c83a 	sub	r2,r2,r3
   2683c:	10000f1e 	bne	r2,zero,2687c <__mcmp+0x4c>
   26840:	18c00144 	addi	r3,r3,5
   26844:	18c7883a 	add	r3,r3,r3
   26848:	18c7883a 	add	r3,r3,r3
   2684c:	21c00504 	addi	r7,r4,20
   26850:	28cb883a 	add	r5,r5,r3
   26854:	20c9883a 	add	r4,r4,r3
   26858:	213fff04 	addi	r4,r4,-4
   2685c:	297fff04 	addi	r5,r5,-4
   26860:	21800017 	ldw	r6,0(r4)
   26864:	28c00017 	ldw	r3,0(r5)
   26868:	30c0021e 	bne	r6,r3,26874 <__mcmp+0x44>
   2686c:	393ffa36 	bltu	r7,r4,26858 <__mcmp+0x28>
   26870:	f800283a 	ret
   26874:	30c00236 	bltu	r6,r3,26880 <__mcmp+0x50>
   26878:	00800044 	movi	r2,1
   2687c:	f800283a 	ret
   26880:	00bfffc4 	movi	r2,-1
   26884:	f800283a 	ret

00026888 <__mdiff>:
   26888:	defffb04 	addi	sp,sp,-20
   2688c:	dc000015 	stw	r16,0(sp)
   26890:	2821883a 	mov	r16,r5
   26894:	dc800215 	stw	r18,8(sp)
   26898:	300b883a 	mov	r5,r6
   2689c:	2025883a 	mov	r18,r4
   268a0:	8009883a 	mov	r4,r16
   268a4:	dc400115 	stw	r17,4(sp)
   268a8:	dfc00415 	stw	ra,16(sp)
   268ac:	dcc00315 	stw	r19,12(sp)
   268b0:	3023883a 	mov	r17,r6
   268b4:	00268300 	call	26830 <__mcmp>
   268b8:	10005026 	beq	r2,zero,269fc <__mdiff+0x174>
   268bc:	10004a16 	blt	r2,zero,269e8 <__mdiff+0x160>
   268c0:	0027883a 	mov	r19,zero
   268c4:	81400117 	ldw	r5,4(r16)
   268c8:	9009883a 	mov	r4,r18
   268cc:	0025ee40 	call	25ee4 <_Balloc>
   268d0:	82400417 	ldw	r9,16(r16)
   268d4:	89800417 	ldw	r6,16(r17)
   268d8:	14c00315 	stw	r19,12(r2)
   268dc:	4b800144 	addi	r14,r9,5
   268e0:	31800144 	addi	r6,r6,5
   268e4:	739d883a 	add	r14,r14,r14
   268e8:	318d883a 	add	r6,r6,r6
   268ec:	739d883a 	add	r14,r14,r14
   268f0:	318d883a 	add	r6,r6,r6
   268f4:	81c00504 	addi	r7,r16,20
   268f8:	839d883a 	add	r14,r16,r14
   268fc:	8a000504 	addi	r8,r17,20
   26900:	898d883a 	add	r6,r17,r6
   26904:	10c00504 	addi	r3,r2,20
   26908:	0009883a 	mov	r4,zero
   2690c:	3b000017 	ldw	r12,0(r7)
   26910:	42c00017 	ldw	r11,0(r8)
   26914:	42000104 	addi	r8,r8,4
   26918:	62bfffcc 	andi	r10,r12,65535
   2691c:	5b7fffcc 	andi	r13,r11,65535
   26920:	5109883a 	add	r4,r10,r4
   26924:	2355c83a 	sub	r10,r4,r13
   26928:	5816d43a 	srli	r11,r11,16
   2692c:	6008d43a 	srli	r4,r12,16
   26930:	501bd43a 	srai	r13,r10,16
   26934:	1a80000d 	sth	r10,0(r3)
   26938:	22c9c83a 	sub	r4,r4,r11
   2693c:	2349883a 	add	r4,r4,r13
   26940:	1900008d 	sth	r4,2(r3)
   26944:	39c00104 	addi	r7,r7,4
   26948:	2009d43a 	srai	r4,r4,16
   2694c:	18c00104 	addi	r3,r3,4
   26950:	41bfee36 	bltu	r8,r6,2690c <__mdiff+0x84>
   26954:	180b883a 	mov	r5,r3
   26958:	3815883a 	mov	r10,r7
   2695c:	3b80132e 	bgeu	r7,r14,269ac <__mdiff+0x124>
   26960:	3a000017 	ldw	r8,0(r7)
   26964:	18c00104 	addi	r3,r3,4
   26968:	39c00104 	addi	r7,r7,4
   2696c:	41bfffcc 	andi	r6,r8,65535
   26970:	310d883a 	add	r6,r6,r4
   26974:	3009d43a 	srai	r4,r6,16
   26978:	4010d43a 	srli	r8,r8,16
   2697c:	19bfff0d 	sth	r6,-4(r3)
   26980:	2209883a 	add	r4,r4,r8
   26984:	193fff8d 	sth	r4,-2(r3)
   26988:	2009d43a 	srai	r4,r4,16
   2698c:	3bbff436 	bltu	r7,r14,26960 <__mdiff+0xd8>
   26990:	0286303a 	nor	r3,zero,r10
   26994:	1b87883a 	add	r3,r3,r14
   26998:	1806d0ba 	srli	r3,r3,2
   2699c:	18c00044 	addi	r3,r3,1
   269a0:	18c7883a 	add	r3,r3,r3
   269a4:	18c7883a 	add	r3,r3,r3
   269a8:	28c7883a 	add	r3,r5,r3
   269ac:	193fff17 	ldw	r4,-4(r3)
   269b0:	18ffff04 	addi	r3,r3,-4
   269b4:	2000041e 	bne	r4,zero,269c8 <__mdiff+0x140>
   269b8:	18ffff04 	addi	r3,r3,-4
   269bc:	19000017 	ldw	r4,0(r3)
   269c0:	4a7fffc4 	addi	r9,r9,-1
   269c4:	203ffc26 	beq	r4,zero,269b8 <__mdiff+0x130>
   269c8:	12400415 	stw	r9,16(r2)
   269cc:	dfc00417 	ldw	ra,16(sp)
   269d0:	dcc00317 	ldw	r19,12(sp)
   269d4:	dc800217 	ldw	r18,8(sp)
   269d8:	dc400117 	ldw	r17,4(sp)
   269dc:	dc000017 	ldw	r16,0(sp)
   269e0:	dec00504 	addi	sp,sp,20
   269e4:	f800283a 	ret
   269e8:	8005883a 	mov	r2,r16
   269ec:	04c00044 	movi	r19,1
   269f0:	8821883a 	mov	r16,r17
   269f4:	1023883a 	mov	r17,r2
   269f8:	003fb206 	br	268c4 <__mdiff+0x3c>
   269fc:	9009883a 	mov	r4,r18
   26a00:	000b883a 	mov	r5,zero
   26a04:	0025ee40 	call	25ee4 <_Balloc>
   26a08:	00c00044 	movi	r3,1
   26a0c:	10c00415 	stw	r3,16(r2)
   26a10:	10000515 	stw	zero,20(r2)
   26a14:	dfc00417 	ldw	ra,16(sp)
   26a18:	dcc00317 	ldw	r19,12(sp)
   26a1c:	dc800217 	ldw	r18,8(sp)
   26a20:	dc400117 	ldw	r17,4(sp)
   26a24:	dc000017 	ldw	r16,0(sp)
   26a28:	dec00504 	addi	sp,sp,20
   26a2c:	f800283a 	ret

00026a30 <__ulp>:
   26a30:	295ffc2c 	andhi	r5,r5,32752
   26a34:	00bf3034 	movhi	r2,64704
   26a38:	2887883a 	add	r3,r5,r2
   26a3c:	00c0020e 	bge	zero,r3,26a48 <__ulp+0x18>
   26a40:	0005883a 	mov	r2,zero
   26a44:	f800283a 	ret
   26a48:	00c7c83a 	sub	r3,zero,r3
   26a4c:	1805d53a 	srai	r2,r3,20
   26a50:	00c004c4 	movi	r3,19
   26a54:	18800a0e 	bge	r3,r2,26a80 <__ulp+0x50>
   26a58:	01000c84 	movi	r4,50
   26a5c:	0007883a 	mov	r3,zero
   26a60:	20800516 	blt	r4,r2,26a78 <__ulp+0x48>
   26a64:	01000cc4 	movi	r4,51
   26a68:	2085c83a 	sub	r2,r4,r2
   26a6c:	01000044 	movi	r4,1
   26a70:	2084983a 	sll	r2,r4,r2
   26a74:	f800283a 	ret
   26a78:	00800044 	movi	r2,1
   26a7c:	f800283a 	ret
   26a80:	00c00234 	movhi	r3,8
   26a84:	1887d83a 	sra	r3,r3,r2
   26a88:	0005883a 	mov	r2,zero
   26a8c:	f800283a 	ret

00026a90 <__b2d>:
   26a90:	defffa04 	addi	sp,sp,-24
   26a94:	dc000015 	stw	r16,0(sp)
   26a98:	24000417 	ldw	r16,16(r4)
   26a9c:	dc400115 	stw	r17,4(sp)
   26aa0:	dcc00315 	stw	r19,12(sp)
   26aa4:	84000144 	addi	r16,r16,5
   26aa8:	8421883a 	add	r16,r16,r16
   26aac:	8421883a 	add	r16,r16,r16
   26ab0:	2421883a 	add	r16,r4,r16
   26ab4:	847fff17 	ldw	r17,-4(r16)
   26ab8:	24c00504 	addi	r19,r4,20
   26abc:	dd000415 	stw	r20,16(sp)
   26ac0:	8809883a 	mov	r4,r17
   26ac4:	dc800215 	stw	r18,8(sp)
   26ac8:	2829883a 	mov	r20,r5
   26acc:	dfc00515 	stw	ra,20(sp)
   26ad0:	00261fc0 	call	261fc <__hi0bits>
   26ad4:	00c00804 	movi	r3,32
   26ad8:	1887c83a 	sub	r3,r3,r2
   26adc:	a0c00015 	stw	r3,0(r20)
   26ae0:	00c00284 	movi	r3,10
   26ae4:	84bfff04 	addi	r18,r16,-4
   26ae8:	18801216 	blt	r3,r2,26b34 <__b2d+0xa4>
   26aec:	010002c4 	movi	r4,11
   26af0:	2089c83a 	sub	r4,r4,r2
   26af4:	8906d83a 	srl	r3,r17,r4
   26af8:	18cffc34 	orhi	r3,r3,16368
   26afc:	9c80322e 	bgeu	r19,r18,26bc8 <__b2d+0x138>
   26b00:	817ffe17 	ldw	r5,-8(r16)
   26b04:	2908d83a 	srl	r4,r5,r4
   26b08:	10800544 	addi	r2,r2,21
   26b0c:	88a2983a 	sll	r17,r17,r2
   26b10:	2444b03a 	or	r2,r4,r17
   26b14:	dfc00517 	ldw	ra,20(sp)
   26b18:	dd000417 	ldw	r20,16(sp)
   26b1c:	dcc00317 	ldw	r19,12(sp)
   26b20:	dc800217 	ldw	r18,8(sp)
   26b24:	dc400117 	ldw	r17,4(sp)
   26b28:	dc000017 	ldw	r16,0(sp)
   26b2c:	dec00604 	addi	sp,sp,24
   26b30:	f800283a 	ret
   26b34:	9c801636 	bltu	r19,r18,26b90 <__b2d+0x100>
   26b38:	113ffd44 	addi	r4,r2,-11
   26b3c:	000b883a 	mov	r5,zero
   26b40:	20001726 	beq	r4,zero,26ba0 <__b2d+0x110>
   26b44:	00c00ac4 	movi	r3,43
   26b48:	1885c83a 	sub	r2,r3,r2
   26b4c:	8906983a 	sll	r3,r17,r4
   26b50:	288cd83a 	srl	r6,r5,r2
   26b54:	18cffc34 	orhi	r3,r3,16368
   26b58:	1986b03a 	or	r3,r3,r6
   26b5c:	9c801c2e 	bgeu	r19,r18,26bd0 <__b2d+0x140>
   26b60:	91bfff17 	ldw	r6,-4(r18)
   26b64:	3084d83a 	srl	r2,r6,r2
   26b68:	2908983a 	sll	r4,r5,r4
   26b6c:	1104b03a 	or	r2,r2,r4
   26b70:	dfc00517 	ldw	ra,20(sp)
   26b74:	dd000417 	ldw	r20,16(sp)
   26b78:	dcc00317 	ldw	r19,12(sp)
   26b7c:	dc800217 	ldw	r18,8(sp)
   26b80:	dc400117 	ldw	r17,4(sp)
   26b84:	dc000017 	ldw	r16,0(sp)
   26b88:	dec00604 	addi	sp,sp,24
   26b8c:	f800283a 	ret
   26b90:	113ffd44 	addi	r4,r2,-11
   26b94:	84bffe04 	addi	r18,r16,-8
   26b98:	817ffe17 	ldw	r5,-8(r16)
   26b9c:	203fe91e 	bne	r4,zero,26b44 <__b2d+0xb4>
   26ba0:	88cffc34 	orhi	r3,r17,16368
   26ba4:	2805883a 	mov	r2,r5
   26ba8:	dfc00517 	ldw	ra,20(sp)
   26bac:	dd000417 	ldw	r20,16(sp)
   26bb0:	dcc00317 	ldw	r19,12(sp)
   26bb4:	dc800217 	ldw	r18,8(sp)
   26bb8:	dc400117 	ldw	r17,4(sp)
   26bbc:	dc000017 	ldw	r16,0(sp)
   26bc0:	dec00604 	addi	sp,sp,24
   26bc4:	f800283a 	ret
   26bc8:	0009883a 	mov	r4,zero
   26bcc:	003fce06 	br	26b08 <__b2d+0x78>
   26bd0:	0005883a 	mov	r2,zero
   26bd4:	003fe406 	br	26b68 <__b2d+0xd8>

00026bd8 <__d2b>:
   26bd8:	defff804 	addi	sp,sp,-32
   26bdc:	dc400315 	stw	r17,12(sp)
   26be0:	3023883a 	mov	r17,r6
   26be4:	dc800415 	stw	r18,16(sp)
   26be8:	8824907a 	slli	r18,r17,1
   26bec:	dcc00515 	stw	r19,20(sp)
   26bf0:	2827883a 	mov	r19,r5
   26bf4:	9024d57a 	srli	r18,r18,21
   26bf8:	01400044 	movi	r5,1
   26bfc:	dd000615 	stw	r20,24(sp)
   26c00:	dc000215 	stw	r16,8(sp)
   26c04:	dfc00715 	stw	ra,28(sp)
   26c08:	3829883a 	mov	r20,r7
   26c0c:	0025ee40 	call	25ee4 <_Balloc>
   26c10:	1021883a 	mov	r16,r2
   26c14:	00800434 	movhi	r2,16
   26c18:	10bfffc4 	addi	r2,r2,-1
   26c1c:	88a2703a 	and	r17,r17,r2
   26c20:	90000126 	beq	r18,zero,26c28 <__d2b+0x50>
   26c24:	8c400434 	orhi	r17,r17,16
   26c28:	dc400015 	stw	r17,0(sp)
   26c2c:	98002226 	beq	r19,zero,26cb8 <__d2b+0xe0>
   26c30:	d9000104 	addi	r4,sp,4
   26c34:	dcc00115 	stw	r19,4(sp)
   26c38:	00262640 	call	26264 <__lo0bits>
   26c3c:	d8c00017 	ldw	r3,0(sp)
   26c40:	10002d1e 	bne	r2,zero,26cf8 <__d2b+0x120>
   26c44:	d9000117 	ldw	r4,4(sp)
   26c48:	81000515 	stw	r4,20(r16)
   26c4c:	1823003a 	cmpeq	r17,r3,zero
   26c50:	01000084 	movi	r4,2
   26c54:	2463c83a 	sub	r17,r4,r17
   26c58:	80c00615 	stw	r3,24(r16)
   26c5c:	84400415 	stw	r17,16(r16)
   26c60:	90001d1e 	bne	r18,zero,26cd8 <__d2b+0x100>
   26c64:	88c00104 	addi	r3,r17,4
   26c68:	18c7883a 	add	r3,r3,r3
   26c6c:	18c7883a 	add	r3,r3,r3
   26c70:	80c7883a 	add	r3,r16,r3
   26c74:	19000017 	ldw	r4,0(r3)
   26c78:	10bef384 	addi	r2,r2,-1074
   26c7c:	a0800015 	stw	r2,0(r20)
   26c80:	00261fc0 	call	261fc <__hi0bits>
   26c84:	8822917a 	slli	r17,r17,5
   26c88:	d8c00817 	ldw	r3,32(sp)
   26c8c:	8885c83a 	sub	r2,r17,r2
   26c90:	18800015 	stw	r2,0(r3)
   26c94:	8005883a 	mov	r2,r16
   26c98:	dfc00717 	ldw	ra,28(sp)
   26c9c:	dd000617 	ldw	r20,24(sp)
   26ca0:	dcc00517 	ldw	r19,20(sp)
   26ca4:	dc800417 	ldw	r18,16(sp)
   26ca8:	dc400317 	ldw	r17,12(sp)
   26cac:	dc000217 	ldw	r16,8(sp)
   26cb0:	dec00804 	addi	sp,sp,32
   26cb4:	f800283a 	ret
   26cb8:	d809883a 	mov	r4,sp
   26cbc:	00262640 	call	26264 <__lo0bits>
   26cc0:	d8c00017 	ldw	r3,0(sp)
   26cc4:	04400044 	movi	r17,1
   26cc8:	84400415 	stw	r17,16(r16)
   26ccc:	80c00515 	stw	r3,20(r16)
   26cd0:	10800804 	addi	r2,r2,32
   26cd4:	903fe326 	beq	r18,zero,26c64 <__d2b+0x8c>
   26cd8:	00c00d44 	movi	r3,53
   26cdc:	94bef344 	addi	r18,r18,-1075
   26ce0:	90a5883a 	add	r18,r18,r2
   26ce4:	1885c83a 	sub	r2,r3,r2
   26ce8:	d8c00817 	ldw	r3,32(sp)
   26cec:	a4800015 	stw	r18,0(r20)
   26cf0:	18800015 	stw	r2,0(r3)
   26cf4:	003fe706 	br	26c94 <__d2b+0xbc>
   26cf8:	01000804 	movi	r4,32
   26cfc:	2089c83a 	sub	r4,r4,r2
   26d00:	1908983a 	sll	r4,r3,r4
   26d04:	d9400117 	ldw	r5,4(sp)
   26d08:	1886d83a 	srl	r3,r3,r2
   26d0c:	2148b03a 	or	r4,r4,r5
   26d10:	81000515 	stw	r4,20(r16)
   26d14:	d8c00015 	stw	r3,0(sp)
   26d18:	003fcc06 	br	26c4c <__d2b+0x74>

00026d1c <__ratio>:
   26d1c:	defff904 	addi	sp,sp,-28
   26d20:	dc400315 	stw	r17,12(sp)
   26d24:	2823883a 	mov	r17,r5
   26d28:	d9400104 	addi	r5,sp,4
   26d2c:	dfc00615 	stw	ra,24(sp)
   26d30:	dcc00515 	stw	r19,20(sp)
   26d34:	dc800415 	stw	r18,16(sp)
   26d38:	2027883a 	mov	r19,r4
   26d3c:	dc000215 	stw	r16,8(sp)
   26d40:	0026a900 	call	26a90 <__b2d>
   26d44:	8809883a 	mov	r4,r17
   26d48:	d80b883a 	mov	r5,sp
   26d4c:	1025883a 	mov	r18,r2
   26d50:	1821883a 	mov	r16,r3
   26d54:	0026a900 	call	26a90 <__b2d>
   26d58:	99400417 	ldw	r5,16(r19)
   26d5c:	89000417 	ldw	r4,16(r17)
   26d60:	d9800117 	ldw	r6,4(sp)
   26d64:	2909c83a 	sub	r4,r5,r4
   26d68:	d9400017 	ldw	r5,0(sp)
   26d6c:	2008917a 	slli	r4,r4,5
   26d70:	314bc83a 	sub	r5,r6,r5
   26d74:	290b883a 	add	r5,r5,r4
   26d78:	01400e0e 	bge	zero,r5,26db4 <__ratio+0x98>
   26d7c:	280a953a 	slli	r5,r5,20
   26d80:	2c21883a 	add	r16,r5,r16
   26d84:	9009883a 	mov	r4,r18
   26d88:	800b883a 	mov	r5,r16
   26d8c:	100d883a 	mov	r6,r2
   26d90:	180f883a 	mov	r7,r3
   26d94:	0028fd00 	call	28fd0 <__divdf3>
   26d98:	dfc00617 	ldw	ra,24(sp)
   26d9c:	dcc00517 	ldw	r19,20(sp)
   26da0:	dc800417 	ldw	r18,16(sp)
   26da4:	dc400317 	ldw	r17,12(sp)
   26da8:	dc000217 	ldw	r16,8(sp)
   26dac:	dec00704 	addi	sp,sp,28
   26db0:	f800283a 	ret
   26db4:	280a953a 	slli	r5,r5,20
   26db8:	1947c83a 	sub	r3,r3,r5
   26dbc:	003ff106 	br	26d84 <__ratio+0x68>

00026dc0 <_mprec_log10>:
   26dc0:	defffe04 	addi	sp,sp,-8
   26dc4:	dc000015 	stw	r16,0(sp)
   26dc8:	dfc00115 	stw	ra,4(sp)
   26dcc:	008005c4 	movi	r2,23
   26dd0:	2021883a 	mov	r16,r4
   26dd4:	11000d0e 	bge	r2,r4,26e0c <_mprec_log10+0x4c>
   26dd8:	0005883a 	mov	r2,zero
   26ddc:	00cffc34 	movhi	r3,16368
   26de0:	843fffc4 	addi	r16,r16,-1
   26de4:	1009883a 	mov	r4,r2
   26de8:	180b883a 	mov	r5,r3
   26dec:	000d883a 	mov	r6,zero
   26df0:	01d00934 	movhi	r7,16420
   26df4:	0028cec0 	call	28cec <__muldf3>
   26df8:	803ff91e 	bne	r16,zero,26de0 <_mprec_log10+0x20>
   26dfc:	dfc00117 	ldw	ra,4(sp)
   26e00:	dc000017 	ldw	r16,0(sp)
   26e04:	dec00204 	addi	sp,sp,8
   26e08:	f800283a 	ret
   26e0c:	202090fa 	slli	r16,r4,3
   26e10:	008001f4 	movhi	r2,7
   26e14:	10b25f04 	addi	r2,r2,-13956
   26e18:	1421883a 	add	r16,r2,r16
   26e1c:	80800017 	ldw	r2,0(r16)
   26e20:	80c00117 	ldw	r3,4(r16)
   26e24:	dfc00117 	ldw	ra,4(sp)
   26e28:	dc000017 	ldw	r16,0(sp)
   26e2c:	dec00204 	addi	sp,sp,8
   26e30:	f800283a 	ret

00026e34 <__copybits>:
   26e34:	297fffc4 	addi	r5,r5,-1
   26e38:	31c00417 	ldw	r7,16(r6)
   26e3c:	2811d17a 	srai	r8,r5,5
   26e40:	30800504 	addi	r2,r6,20
   26e44:	39c00144 	addi	r7,r7,5
   26e48:	42000044 	addi	r8,r8,1
   26e4c:	39cf883a 	add	r7,r7,r7
   26e50:	4211883a 	add	r8,r8,r8
   26e54:	39cf883a 	add	r7,r7,r7
   26e58:	4211883a 	add	r8,r8,r8
   26e5c:	31cf883a 	add	r7,r6,r7
   26e60:	2211883a 	add	r8,r4,r8
   26e64:	11c00d2e 	bgeu	r2,r7,26e9c <__copybits+0x68>
   26e68:	2007883a 	mov	r3,r4
   26e6c:	11400017 	ldw	r5,0(r2)
   26e70:	18c00104 	addi	r3,r3,4
   26e74:	10800104 	addi	r2,r2,4
   26e78:	197fff15 	stw	r5,-4(r3)
   26e7c:	11fffb36 	bltu	r2,r7,26e6c <__copybits+0x38>
   26e80:	3985c83a 	sub	r2,r7,r6
   26e84:	10bffac4 	addi	r2,r2,-21
   26e88:	1004d0ba 	srli	r2,r2,2
   26e8c:	10800044 	addi	r2,r2,1
   26e90:	1085883a 	add	r2,r2,r2
   26e94:	1085883a 	add	r2,r2,r2
   26e98:	2089883a 	add	r4,r4,r2
   26e9c:	2200032e 	bgeu	r4,r8,26eac <__copybits+0x78>
   26ea0:	20000015 	stw	zero,0(r4)
   26ea4:	21000104 	addi	r4,r4,4
   26ea8:	223ffd36 	bltu	r4,r8,26ea0 <__copybits+0x6c>
   26eac:	f800283a 	ret

00026eb0 <__any_on>:
   26eb0:	21800417 	ldw	r6,16(r4)
   26eb4:	2805d17a 	srai	r2,r5,5
   26eb8:	20c00504 	addi	r3,r4,20
   26ebc:	30800f0e 	bge	r6,r2,26efc <__any_on+0x4c>
   26ec0:	3005883a 	mov	r2,r6
   26ec4:	10800144 	addi	r2,r2,5
   26ec8:	1085883a 	add	r2,r2,r2
   26ecc:	1085883a 	add	r2,r2,r2
   26ed0:	2089883a 	add	r4,r4,r2
   26ed4:	1900152e 	bgeu	r3,r4,26f2c <__any_on+0x7c>
   26ed8:	20bfff17 	ldw	r2,-4(r4)
   26edc:	213fff04 	addi	r4,r4,-4
   26ee0:	1000041e 	bne	r2,zero,26ef4 <__any_on+0x44>
   26ee4:	1900112e 	bgeu	r3,r4,26f2c <__any_on+0x7c>
   26ee8:	213fff04 	addi	r4,r4,-4
   26eec:	20800017 	ldw	r2,0(r4)
   26ef0:	103ffc26 	beq	r2,zero,26ee4 <__any_on+0x34>
   26ef4:	00800044 	movi	r2,1
   26ef8:	f800283a 	ret
   26efc:	11bff10e 	bge	r2,r6,26ec4 <__any_on+0x14>
   26f00:	294007cc 	andi	r5,r5,31
   26f04:	283fef26 	beq	r5,zero,26ec4 <__any_on+0x14>
   26f08:	11800144 	addi	r6,r2,5
   26f0c:	318d883a 	add	r6,r6,r6
   26f10:	318d883a 	add	r6,r6,r6
   26f14:	218d883a 	add	r6,r4,r6
   26f18:	31800017 	ldw	r6,0(r6)
   26f1c:	314ed83a 	srl	r7,r6,r5
   26f20:	394a983a 	sll	r5,r7,r5
   26f24:	29bff31e 	bne	r5,r6,26ef4 <__any_on+0x44>
   26f28:	003fe606 	br	26ec4 <__any_on+0x14>
   26f2c:	0005883a 	mov	r2,zero
   26f30:	f800283a 	ret

00026f34 <_realloc_r>:
   26f34:	defff504 	addi	sp,sp,-44
   26f38:	dd400615 	stw	r21,24(sp)
   26f3c:	dc800315 	stw	r18,12(sp)
   26f40:	dc000115 	stw	r16,4(sp)
   26f44:	dfc00a15 	stw	ra,40(sp)
   26f48:	df000915 	stw	fp,36(sp)
   26f4c:	ddc00815 	stw	r23,32(sp)
   26f50:	dd800715 	stw	r22,28(sp)
   26f54:	dd000515 	stw	r20,20(sp)
   26f58:	dcc00415 	stw	r19,16(sp)
   26f5c:	dc400215 	stw	r17,8(sp)
   26f60:	2821883a 	mov	r16,r5
   26f64:	202b883a 	mov	r21,r4
   26f68:	3025883a 	mov	r18,r6
   26f6c:	28009626 	beq	r5,zero,271c8 <_realloc_r+0x294>
   26f70:	002a37c0 	call	2a37c <__malloc_lock>
   26f74:	80bfff17 	ldw	r2,-4(r16)
   26f78:	04ffff04 	movi	r19,-4
   26f7c:	90c002c4 	addi	r3,r18,11
   26f80:	01000584 	movi	r4,22
   26f84:	85bffe04 	addi	r22,r16,-8
   26f88:	14e6703a 	and	r19,r2,r19
   26f8c:	20c0372e 	bgeu	r4,r3,2706c <_realloc_r+0x138>
   26f90:	047ffe04 	movi	r17,-8
   26f94:	1c62703a 	and	r17,r3,r17
   26f98:	8807883a 	mov	r3,r17
   26f9c:	88005a16 	blt	r17,zero,27108 <_realloc_r+0x1d4>
   26fa0:	8c805936 	bltu	r17,r18,27108 <_realloc_r+0x1d4>
   26fa4:	98c0340e 	bge	r19,r3,27078 <_realloc_r+0x144>
   26fa8:	070001f4 	movhi	fp,7
   26fac:	e733e904 	addi	fp,fp,-12380
   26fb0:	e1400217 	ldw	r5,8(fp)
   26fb4:	b4c9883a 	add	r4,r22,r19
   26fb8:	29009026 	beq	r5,r4,271fc <_realloc_r+0x2c8>
   26fbc:	21800117 	ldw	r6,4(r4)
   26fc0:	01ffff84 	movi	r7,-2
   26fc4:	31ce703a 	and	r7,r6,r7
   26fc8:	21cf883a 	add	r7,r4,r7
   26fcc:	39c00117 	ldw	r7,4(r7)
   26fd0:	39c0004c 	andi	r7,r7,1
   26fd4:	38004326 	beq	r7,zero,270e4 <_realloc_r+0x1b0>
   26fd8:	000d883a 	mov	r6,zero
   26fdc:	0009883a 	mov	r4,zero
   26fe0:	1080004c 	andi	r2,r2,1
   26fe4:	10005a1e 	bne	r2,zero,27150 <_realloc_r+0x21c>
   26fe8:	85fffe17 	ldw	r23,-8(r16)
   26fec:	00bfff04 	movi	r2,-4
   26ff0:	b5efc83a 	sub	r23,r22,r23
   26ff4:	b9c00117 	ldw	r7,4(r23)
   26ff8:	388e703a 	and	r7,r7,r2
   26ffc:	3ccf883a 	add	r7,r7,r19
   27000:	20005226 	beq	r4,zero,2714c <_realloc_r+0x218>
   27004:	31e9883a 	add	r20,r6,r7
   27008:	2140c726 	beq	r4,r5,27328 <_realloc_r+0x3f4>
   2700c:	a0c04f16 	blt	r20,r3,2714c <_realloc_r+0x218>
   27010:	20800317 	ldw	r2,12(r4)
   27014:	20c00217 	ldw	r3,8(r4)
   27018:	99bfff04 	addi	r6,r19,-4
   2701c:	01000904 	movi	r4,36
   27020:	18800315 	stw	r2,12(r3)
   27024:	10c00215 	stw	r3,8(r2)
   27028:	b8c00217 	ldw	r3,8(r23)
   2702c:	b8800317 	ldw	r2,12(r23)
   27030:	bc800204 	addi	r18,r23,8
   27034:	18800315 	stw	r2,12(r3)
   27038:	10c00215 	stw	r3,8(r2)
   2703c:	2180ed36 	bltu	r4,r6,273f4 <_realloc_r+0x4c0>
   27040:	008004c4 	movi	r2,19
   27044:	11809b2e 	bgeu	r2,r6,272b4 <_realloc_r+0x380>
   27048:	80800017 	ldw	r2,0(r16)
   2704c:	b8800215 	stw	r2,8(r23)
   27050:	80800117 	ldw	r2,4(r16)
   27054:	b8800315 	stw	r2,12(r23)
   27058:	008006c4 	movi	r2,27
   2705c:	1180f936 	bltu	r2,r6,27444 <_realloc_r+0x510>
   27060:	b8800404 	addi	r2,r23,16
   27064:	80c00204 	addi	r3,r16,8
   27068:	00009406 	br	272bc <_realloc_r+0x388>
   2706c:	00c00404 	movi	r3,16
   27070:	1823883a 	mov	r17,r3
   27074:	003fca06 	br	26fa0 <_realloc_r+0x6c>
   27078:	9829883a 	mov	r20,r19
   2707c:	a447c83a 	sub	r3,r20,r17
   27080:	010003c4 	movi	r4,15
   27084:	1080004c 	andi	r2,r2,1
   27088:	20c02336 	bltu	r4,r3,27118 <_realloc_r+0x1e4>
   2708c:	1504b03a 	or	r2,r2,r20
   27090:	b0800115 	stw	r2,4(r22)
   27094:	b52d883a 	add	r22,r22,r20
   27098:	b0800117 	ldw	r2,4(r22)
   2709c:	10800054 	ori	r2,r2,1
   270a0:	b0800115 	stw	r2,4(r22)
   270a4:	a809883a 	mov	r4,r21
   270a8:	002a39c0 	call	2a39c <__malloc_unlock>
   270ac:	8025883a 	mov	r18,r16
   270b0:	9005883a 	mov	r2,r18
   270b4:	dfc00a17 	ldw	ra,40(sp)
   270b8:	df000917 	ldw	fp,36(sp)
   270bc:	ddc00817 	ldw	r23,32(sp)
   270c0:	dd800717 	ldw	r22,28(sp)
   270c4:	dd400617 	ldw	r21,24(sp)
   270c8:	dd000517 	ldw	r20,20(sp)
   270cc:	dcc00417 	ldw	r19,16(sp)
   270d0:	dc800317 	ldw	r18,12(sp)
   270d4:	dc400217 	ldw	r17,8(sp)
   270d8:	dc000117 	ldw	r16,4(sp)
   270dc:	dec00b04 	addi	sp,sp,44
   270e0:	f800283a 	ret
   270e4:	01ffff04 	movi	r7,-4
   270e8:	31cc703a 	and	r6,r6,r7
   270ec:	34e9883a 	add	r20,r6,r19
   270f0:	a0ffbb16 	blt	r20,r3,26fe0 <_realloc_r+0xac>
   270f4:	20c00317 	ldw	r3,12(r4)
   270f8:	21000217 	ldw	r4,8(r4)
   270fc:	20c00315 	stw	r3,12(r4)
   27100:	19000215 	stw	r4,8(r3)
   27104:	003fdd06 	br	2707c <_realloc_r+0x148>
   27108:	00800304 	movi	r2,12
   2710c:	a8800015 	stw	r2,0(r21)
   27110:	0025883a 	mov	r18,zero
   27114:	003fe606 	br	270b0 <_realloc_r+0x17c>
   27118:	1444b03a 	or	r2,r2,r17
   2711c:	b0800115 	stw	r2,4(r22)
   27120:	b44b883a 	add	r5,r22,r17
   27124:	18800054 	ori	r2,r3,1
   27128:	28800115 	stw	r2,4(r5)
   2712c:	28c7883a 	add	r3,r5,r3
   27130:	18800117 	ldw	r2,4(r3)
   27134:	a809883a 	mov	r4,r21
   27138:	29400204 	addi	r5,r5,8
   2713c:	10800054 	ori	r2,r2,1
   27140:	18800115 	stw	r2,4(r3)
   27144:	00247280 	call	24728 <_free_r>
   27148:	003fd606 	br	270a4 <_realloc_r+0x170>
   2714c:	38c0330e 	bge	r7,r3,2721c <_realloc_r+0x2e8>
   27150:	900b883a 	mov	r5,r18
   27154:	a809883a 	mov	r4,r21
   27158:	00252c00 	call	252c0 <_malloc_r>
   2715c:	1025883a 	mov	r18,r2
   27160:	10001626 	beq	r2,zero,271bc <_realloc_r+0x288>
   27164:	80bfff17 	ldw	r2,-4(r16)
   27168:	00ffff84 	movi	r3,-2
   2716c:	913ffe04 	addi	r4,r18,-8
   27170:	10c6703a 	and	r3,r2,r3
   27174:	b0c7883a 	add	r3,r22,r3
   27178:	20c09926 	beq	r4,r3,273e0 <_realloc_r+0x4ac>
   2717c:	99bfff04 	addi	r6,r19,-4
   27180:	00800904 	movi	r2,36
   27184:	11806436 	bltu	r2,r6,27318 <_realloc_r+0x3e4>
   27188:	00c004c4 	movi	r3,19
   2718c:	19804036 	bltu	r3,r6,27290 <_realloc_r+0x35c>
   27190:	9005883a 	mov	r2,r18
   27194:	8007883a 	mov	r3,r16
   27198:	19000017 	ldw	r4,0(r3)
   2719c:	11000015 	stw	r4,0(r2)
   271a0:	19000117 	ldw	r4,4(r3)
   271a4:	11000115 	stw	r4,4(r2)
   271a8:	18c00217 	ldw	r3,8(r3)
   271ac:	10c00215 	stw	r3,8(r2)
   271b0:	a809883a 	mov	r4,r21
   271b4:	800b883a 	mov	r5,r16
   271b8:	00247280 	call	24728 <_free_r>
   271bc:	a809883a 	mov	r4,r21
   271c0:	002a39c0 	call	2a39c <__malloc_unlock>
   271c4:	003fba06 	br	270b0 <_realloc_r+0x17c>
   271c8:	300b883a 	mov	r5,r6
   271cc:	dfc00a17 	ldw	ra,40(sp)
   271d0:	df000917 	ldw	fp,36(sp)
   271d4:	ddc00817 	ldw	r23,32(sp)
   271d8:	dd800717 	ldw	r22,28(sp)
   271dc:	dd400617 	ldw	r21,24(sp)
   271e0:	dd000517 	ldw	r20,20(sp)
   271e4:	dcc00417 	ldw	r19,16(sp)
   271e8:	dc800317 	ldw	r18,12(sp)
   271ec:	dc400217 	ldw	r17,8(sp)
   271f0:	dc000117 	ldw	r16,4(sp)
   271f4:	dec00b04 	addi	sp,sp,44
   271f8:	00252c01 	jmpi	252c0 <_malloc_r>
   271fc:	29800117 	ldw	r6,4(r5)
   27200:	013fff04 	movi	r4,-4
   27204:	89c00404 	addi	r7,r17,16
   27208:	310c703a 	and	r6,r6,r4
   2720c:	34c9883a 	add	r4,r6,r19
   27210:	21c0340e 	bge	r4,r7,272e4 <_realloc_r+0x3b0>
   27214:	2809883a 	mov	r4,r5
   27218:	003f7106 	br	26fe0 <_realloc_r+0xac>
   2721c:	b8800317 	ldw	r2,12(r23)
   27220:	b8c00217 	ldw	r3,8(r23)
   27224:	99bfff04 	addi	r6,r19,-4
   27228:	01000904 	movi	r4,36
   2722c:	18800315 	stw	r2,12(r3)
   27230:	10c00215 	stw	r3,8(r2)
   27234:	bc800204 	addi	r18,r23,8
   27238:	21807836 	bltu	r4,r6,2741c <_realloc_r+0x4e8>
   2723c:	008004c4 	movi	r2,19
   27240:	1180732e 	bgeu	r2,r6,27410 <_realloc_r+0x4dc>
   27244:	80800017 	ldw	r2,0(r16)
   27248:	b8800215 	stw	r2,8(r23)
   2724c:	80800117 	ldw	r2,4(r16)
   27250:	b8800315 	stw	r2,12(r23)
   27254:	008006c4 	movi	r2,27
   27258:	11808936 	bltu	r2,r6,27480 <_realloc_r+0x54c>
   2725c:	b8800404 	addi	r2,r23,16
   27260:	80c00204 	addi	r3,r16,8
   27264:	19000017 	ldw	r4,0(r3)
   27268:	9021883a 	mov	r16,r18
   2726c:	3829883a 	mov	r20,r7
   27270:	11000015 	stw	r4,0(r2)
   27274:	19000117 	ldw	r4,4(r3)
   27278:	b82d883a 	mov	r22,r23
   2727c:	11000115 	stw	r4,4(r2)
   27280:	18c00217 	ldw	r3,8(r3)
   27284:	10c00215 	stw	r3,8(r2)
   27288:	b8800117 	ldw	r2,4(r23)
   2728c:	003f7b06 	br	2707c <_realloc_r+0x148>
   27290:	80c00017 	ldw	r3,0(r16)
   27294:	90c00015 	stw	r3,0(r18)
   27298:	80c00117 	ldw	r3,4(r16)
   2729c:	90c00115 	stw	r3,4(r18)
   272a0:	00c006c4 	movi	r3,27
   272a4:	19804636 	bltu	r3,r6,273c0 <_realloc_r+0x48c>
   272a8:	90800204 	addi	r2,r18,8
   272ac:	80c00204 	addi	r3,r16,8
   272b0:	003fb906 	br	27198 <_realloc_r+0x264>
   272b4:	9005883a 	mov	r2,r18
   272b8:	8007883a 	mov	r3,r16
   272bc:	19000017 	ldw	r4,0(r3)
   272c0:	9021883a 	mov	r16,r18
   272c4:	b82d883a 	mov	r22,r23
   272c8:	11000015 	stw	r4,0(r2)
   272cc:	19000117 	ldw	r4,4(r3)
   272d0:	11000115 	stw	r4,4(r2)
   272d4:	18c00217 	ldw	r3,8(r3)
   272d8:	10c00215 	stw	r3,8(r2)
   272dc:	b8800117 	ldw	r2,4(r23)
   272e0:	003f6606 	br	2707c <_realloc_r+0x148>
   272e4:	2445c83a 	sub	r2,r4,r17
   272e8:	b46d883a 	add	r22,r22,r17
   272ec:	10800054 	ori	r2,r2,1
   272f0:	b0800115 	stw	r2,4(r22)
   272f4:	80bfff17 	ldw	r2,-4(r16)
   272f8:	a809883a 	mov	r4,r21
   272fc:	e5800215 	stw	r22,8(fp)
   27300:	1080004c 	andi	r2,r2,1
   27304:	88a2b03a 	or	r17,r17,r2
   27308:	847fff15 	stw	r17,-4(r16)
   2730c:	002a39c0 	call	2a39c <__malloc_unlock>
   27310:	8025883a 	mov	r18,r16
   27314:	003f6606 	br	270b0 <_realloc_r+0x17c>
   27318:	9009883a 	mov	r4,r18
   2731c:	800b883a 	mov	r5,r16
   27320:	0025c7c0 	call	25c7c <memmove>
   27324:	003fa206 	br	271b0 <_realloc_r+0x27c>
   27328:	88800404 	addi	r2,r17,16
   2732c:	a0bf8716 	blt	r20,r2,2714c <_realloc_r+0x218>
   27330:	b8800317 	ldw	r2,12(r23)
   27334:	b8c00217 	ldw	r3,8(r23)
   27338:	99bfff04 	addi	r6,r19,-4
   2733c:	01000904 	movi	r4,36
   27340:	18800315 	stw	r2,12(r3)
   27344:	10c00215 	stw	r3,8(r2)
   27348:	bc800204 	addi	r18,r23,8
   2734c:	21806536 	bltu	r4,r6,274e4 <_realloc_r+0x5b0>
   27350:	008004c4 	movi	r2,19
   27354:	1180592e 	bgeu	r2,r6,274bc <_realloc_r+0x588>
   27358:	80800017 	ldw	r2,0(r16)
   2735c:	b8800215 	stw	r2,8(r23)
   27360:	80800117 	ldw	r2,4(r16)
   27364:	b8800315 	stw	r2,12(r23)
   27368:	008006c4 	movi	r2,27
   2736c:	11806136 	bltu	r2,r6,274f4 <_realloc_r+0x5c0>
   27370:	b8800404 	addi	r2,r23,16
   27374:	80c00204 	addi	r3,r16,8
   27378:	19000017 	ldw	r4,0(r3)
   2737c:	11000015 	stw	r4,0(r2)
   27380:	19000117 	ldw	r4,4(r3)
   27384:	11000115 	stw	r4,4(r2)
   27388:	18c00217 	ldw	r3,8(r3)
   2738c:	10c00215 	stw	r3,8(r2)
   27390:	a447c83a 	sub	r3,r20,r17
   27394:	bc45883a 	add	r2,r23,r17
   27398:	18c00054 	ori	r3,r3,1
   2739c:	10c00115 	stw	r3,4(r2)
   273a0:	b8c00117 	ldw	r3,4(r23)
   273a4:	e0800215 	stw	r2,8(fp)
   273a8:	a809883a 	mov	r4,r21
   273ac:	1880004c 	andi	r2,r3,1
   273b0:	88a2b03a 	or	r17,r17,r2
   273b4:	bc400115 	stw	r17,4(r23)
   273b8:	002a39c0 	call	2a39c <__malloc_unlock>
   273bc:	003f3c06 	br	270b0 <_realloc_r+0x17c>
   273c0:	80c00217 	ldw	r3,8(r16)
   273c4:	90c00215 	stw	r3,8(r18)
   273c8:	80c00317 	ldw	r3,12(r16)
   273cc:	90c00315 	stw	r3,12(r18)
   273d0:	30802426 	beq	r6,r2,27464 <_realloc_r+0x530>
   273d4:	90800404 	addi	r2,r18,16
   273d8:	80c00404 	addi	r3,r16,16
   273dc:	003f6e06 	br	27198 <_realloc_r+0x264>
   273e0:	953fff17 	ldw	r20,-4(r18)
   273e4:	00ffff04 	movi	r3,-4
   273e8:	a0e8703a 	and	r20,r20,r3
   273ec:	a4e9883a 	add	r20,r20,r19
   273f0:	003f2206 	br	2707c <_realloc_r+0x148>
   273f4:	800b883a 	mov	r5,r16
   273f8:	9009883a 	mov	r4,r18
   273fc:	0025c7c0 	call	25c7c <memmove>
   27400:	9021883a 	mov	r16,r18
   27404:	b8800117 	ldw	r2,4(r23)
   27408:	b82d883a 	mov	r22,r23
   2740c:	003f1b06 	br	2707c <_realloc_r+0x148>
   27410:	9005883a 	mov	r2,r18
   27414:	8007883a 	mov	r3,r16
   27418:	003f9206 	br	27264 <_realloc_r+0x330>
   2741c:	800b883a 	mov	r5,r16
   27420:	9009883a 	mov	r4,r18
   27424:	d9c00015 	stw	r7,0(sp)
   27428:	0025c7c0 	call	25c7c <memmove>
   2742c:	d9c00017 	ldw	r7,0(sp)
   27430:	9021883a 	mov	r16,r18
   27434:	b8800117 	ldw	r2,4(r23)
   27438:	3829883a 	mov	r20,r7
   2743c:	b82d883a 	mov	r22,r23
   27440:	003f0e06 	br	2707c <_realloc_r+0x148>
   27444:	80800217 	ldw	r2,8(r16)
   27448:	b8800415 	stw	r2,16(r23)
   2744c:	80800317 	ldw	r2,12(r16)
   27450:	b8800515 	stw	r2,20(r23)
   27454:	31001226 	beq	r6,r4,274a0 <_realloc_r+0x56c>
   27458:	b8800604 	addi	r2,r23,24
   2745c:	80c00404 	addi	r3,r16,16
   27460:	003f9606 	br	272bc <_realloc_r+0x388>
   27464:	81000417 	ldw	r4,16(r16)
   27468:	90800604 	addi	r2,r18,24
   2746c:	80c00604 	addi	r3,r16,24
   27470:	91000415 	stw	r4,16(r18)
   27474:	81000517 	ldw	r4,20(r16)
   27478:	91000515 	stw	r4,20(r18)
   2747c:	003f4606 	br	27198 <_realloc_r+0x264>
   27480:	80800217 	ldw	r2,8(r16)
   27484:	b8800415 	stw	r2,16(r23)
   27488:	80800317 	ldw	r2,12(r16)
   2748c:	b8800515 	stw	r2,20(r23)
   27490:	31000d26 	beq	r6,r4,274c8 <_realloc_r+0x594>
   27494:	b8800604 	addi	r2,r23,24
   27498:	80c00404 	addi	r3,r16,16
   2749c:	003f7106 	br	27264 <_realloc_r+0x330>
   274a0:	81000417 	ldw	r4,16(r16)
   274a4:	b8800804 	addi	r2,r23,32
   274a8:	80c00604 	addi	r3,r16,24
   274ac:	b9000615 	stw	r4,24(r23)
   274b0:	81000517 	ldw	r4,20(r16)
   274b4:	b9000715 	stw	r4,28(r23)
   274b8:	003f8006 	br	272bc <_realloc_r+0x388>
   274bc:	9005883a 	mov	r2,r18
   274c0:	8007883a 	mov	r3,r16
   274c4:	003fac06 	br	27378 <_realloc_r+0x444>
   274c8:	81000417 	ldw	r4,16(r16)
   274cc:	b8800804 	addi	r2,r23,32
   274d0:	80c00604 	addi	r3,r16,24
   274d4:	b9000615 	stw	r4,24(r23)
   274d8:	81000517 	ldw	r4,20(r16)
   274dc:	b9000715 	stw	r4,28(r23)
   274e0:	003f6006 	br	27264 <_realloc_r+0x330>
   274e4:	9009883a 	mov	r4,r18
   274e8:	800b883a 	mov	r5,r16
   274ec:	0025c7c0 	call	25c7c <memmove>
   274f0:	003fa706 	br	27390 <_realloc_r+0x45c>
   274f4:	80800217 	ldw	r2,8(r16)
   274f8:	b8800415 	stw	r2,16(r23)
   274fc:	80800317 	ldw	r2,12(r16)
   27500:	b8800515 	stw	r2,20(r23)
   27504:	31000326 	beq	r6,r4,27514 <_realloc_r+0x5e0>
   27508:	b8800604 	addi	r2,r23,24
   2750c:	80c00404 	addi	r3,r16,16
   27510:	003f9906 	br	27378 <_realloc_r+0x444>
   27514:	81000417 	ldw	r4,16(r16)
   27518:	b8800804 	addi	r2,r23,32
   2751c:	80c00604 	addi	r3,r16,24
   27520:	b9000615 	stw	r4,24(r23)
   27524:	81000517 	ldw	r4,20(r16)
   27528:	b9000715 	stw	r4,28(r23)
   2752c:	003f9206 	br	27378 <_realloc_r+0x444>

00027530 <__isinfd>:
   27530:	0105c83a 	sub	r2,zero,r4
   27534:	1108b03a 	or	r4,r2,r4
   27538:	2004d7fa 	srli	r2,r4,31
   2753c:	00e00034 	movhi	r3,32768
   27540:	18ffffc4 	addi	r3,r3,-1
   27544:	28ca703a 	and	r5,r5,r3
   27548:	1144b03a 	or	r2,r2,r5
   2754c:	00dffc34 	movhi	r3,32752
   27550:	1885c83a 	sub	r2,r3,r2
   27554:	0087c83a 	sub	r3,zero,r2
   27558:	1884b03a 	or	r2,r3,r2
   2755c:	1005d7fa 	srai	r2,r2,31
   27560:	10800044 	addi	r2,r2,1
   27564:	f800283a 	ret

00027568 <__isnand>:
   27568:	0105c83a 	sub	r2,zero,r4
   2756c:	1108b03a 	or	r4,r2,r4
   27570:	2004d7fa 	srli	r2,r4,31
   27574:	00e00034 	movhi	r3,32768
   27578:	18ffffc4 	addi	r3,r3,-1
   2757c:	28ca703a 	and	r5,r5,r3
   27580:	1144b03a 	or	r2,r2,r5
   27584:	00dffc34 	movhi	r3,32752
   27588:	1885c83a 	sub	r2,r3,r2
   2758c:	1004d7fa 	srli	r2,r2,31
   27590:	f800283a 	ret

00027594 <_sbrk_r>:
   27594:	defffd04 	addi	sp,sp,-12
   27598:	dc400115 	stw	r17,4(sp)
   2759c:	dc000015 	stw	r16,0(sp)
   275a0:	2023883a 	mov	r17,r4
   275a4:	040001f4 	movhi	r16,7
   275a8:	84398704 	addi	r16,r16,-6628
   275ac:	2809883a 	mov	r4,r5
   275b0:	dfc00215 	stw	ra,8(sp)
   275b4:	80000015 	stw	zero,0(r16)
   275b8:	002a5800 	call	2a580 <sbrk>
   275bc:	00ffffc4 	movi	r3,-1
   275c0:	10c00526 	beq	r2,r3,275d8 <_sbrk_r+0x44>
   275c4:	dfc00217 	ldw	ra,8(sp)
   275c8:	dc400117 	ldw	r17,4(sp)
   275cc:	dc000017 	ldw	r16,0(sp)
   275d0:	dec00304 	addi	sp,sp,12
   275d4:	f800283a 	ret
   275d8:	80c00017 	ldw	r3,0(r16)
   275dc:	183ff926 	beq	r3,zero,275c4 <_sbrk_r+0x30>
   275e0:	88c00015 	stw	r3,0(r17)
   275e4:	dfc00217 	ldw	ra,8(sp)
   275e8:	dc400117 	ldw	r17,4(sp)
   275ec:	dc000017 	ldw	r16,0(sp)
   275f0:	dec00304 	addi	sp,sp,12
   275f4:	f800283a 	ret

000275f8 <__sread>:
   275f8:	defffe04 	addi	sp,sp,-8
   275fc:	dc000015 	stw	r16,0(sp)
   27600:	2821883a 	mov	r16,r5
   27604:	2940038f 	ldh	r5,14(r5)
   27608:	dfc00115 	stw	ra,4(sp)
   2760c:	0027c000 	call	27c00 <_read_r>
   27610:	10000716 	blt	r2,zero,27630 <__sread+0x38>
   27614:	80c01417 	ldw	r3,80(r16)
   27618:	1887883a 	add	r3,r3,r2
   2761c:	80c01415 	stw	r3,80(r16)
   27620:	dfc00117 	ldw	ra,4(sp)
   27624:	dc000017 	ldw	r16,0(sp)
   27628:	dec00204 	addi	sp,sp,8
   2762c:	f800283a 	ret
   27630:	80c0030b 	ldhu	r3,12(r16)
   27634:	18fbffcc 	andi	r3,r3,61439
   27638:	80c0030d 	sth	r3,12(r16)
   2763c:	dfc00117 	ldw	ra,4(sp)
   27640:	dc000017 	ldw	r16,0(sp)
   27644:	dec00204 	addi	sp,sp,8
   27648:	f800283a 	ret

0002764c <__swrite>:
   2764c:	2880030b 	ldhu	r2,12(r5)
   27650:	defffb04 	addi	sp,sp,-20
   27654:	dcc00315 	stw	r19,12(sp)
   27658:	10c0400c 	andi	r3,r2,256
   2765c:	18ffffcc 	andi	r3,r3,65535
   27660:	18e0001c 	xori	r3,r3,32768
   27664:	dc800215 	stw	r18,8(sp)
   27668:	dc400115 	stw	r17,4(sp)
   2766c:	dc000015 	stw	r16,0(sp)
   27670:	dfc00415 	stw	ra,16(sp)
   27674:	18e00004 	addi	r3,r3,-32768
   27678:	2821883a 	mov	r16,r5
   2767c:	2027883a 	mov	r19,r4
   27680:	3025883a 	mov	r18,r6
   27684:	3823883a 	mov	r17,r7
   27688:	18000526 	beq	r3,zero,276a0 <__swrite+0x54>
   2768c:	2940038f 	ldh	r5,14(r5)
   27690:	000d883a 	mov	r6,zero
   27694:	01c00084 	movi	r7,2
   27698:	0027b940 	call	27b94 <_lseek_r>
   2769c:	8080030b 	ldhu	r2,12(r16)
   276a0:	8140038f 	ldh	r5,14(r16)
   276a4:	10bbffcc 	andi	r2,r2,61439
   276a8:	9809883a 	mov	r4,r19
   276ac:	900d883a 	mov	r6,r18
   276b0:	880f883a 	mov	r7,r17
   276b4:	8080030d 	sth	r2,12(r16)
   276b8:	dfc00417 	ldw	ra,16(sp)
   276bc:	dcc00317 	ldw	r19,12(sp)
   276c0:	dc800217 	ldw	r18,8(sp)
   276c4:	dc400117 	ldw	r17,4(sp)
   276c8:	dc000017 	ldw	r16,0(sp)
   276cc:	dec00504 	addi	sp,sp,20
   276d0:	00277dc1 	jmpi	277dc <_write_r>

000276d4 <__sseek>:
   276d4:	defffe04 	addi	sp,sp,-8
   276d8:	dc000015 	stw	r16,0(sp)
   276dc:	2821883a 	mov	r16,r5
   276e0:	2940038f 	ldh	r5,14(r5)
   276e4:	dfc00115 	stw	ra,4(sp)
   276e8:	0027b940 	call	27b94 <_lseek_r>
   276ec:	00ffffc4 	movi	r3,-1
   276f0:	10c00826 	beq	r2,r3,27714 <__sseek+0x40>
   276f4:	80c0030b 	ldhu	r3,12(r16)
   276f8:	80801415 	stw	r2,80(r16)
   276fc:	18c40014 	ori	r3,r3,4096
   27700:	80c0030d 	sth	r3,12(r16)
   27704:	dfc00117 	ldw	ra,4(sp)
   27708:	dc000017 	ldw	r16,0(sp)
   2770c:	dec00204 	addi	sp,sp,8
   27710:	f800283a 	ret
   27714:	80c0030b 	ldhu	r3,12(r16)
   27718:	18fbffcc 	andi	r3,r3,61439
   2771c:	80c0030d 	sth	r3,12(r16)
   27720:	dfc00117 	ldw	ra,4(sp)
   27724:	dc000017 	ldw	r16,0(sp)
   27728:	dec00204 	addi	sp,sp,8
   2772c:	f800283a 	ret

00027730 <__sclose>:
   27730:	2940038f 	ldh	r5,14(r5)
   27734:	00279141 	jmpi	27914 <_close_r>

00027738 <strcmp>:
   27738:	2904b03a 	or	r2,r5,r4
   2773c:	108000cc 	andi	r2,r2,3
   27740:	1000171e 	bne	r2,zero,277a0 <strcmp+0x68>
   27744:	20800017 	ldw	r2,0(r4)
   27748:	28c00017 	ldw	r3,0(r5)
   2774c:	10c0141e 	bne	r2,r3,277a0 <strcmp+0x68>
   27750:	027fbff4 	movhi	r9,65279
   27754:	4a7fbfc4 	addi	r9,r9,-257
   27758:	1247883a 	add	r3,r2,r9
   2775c:	0084303a 	nor	r2,zero,r2
   27760:	1884703a 	and	r2,r3,r2
   27764:	02202074 	movhi	r8,32897
   27768:	42202004 	addi	r8,r8,-32640
   2776c:	1204703a 	and	r2,r2,r8
   27770:	10000226 	beq	r2,zero,2777c <strcmp+0x44>
   27774:	00001706 	br	277d4 <strcmp+0x9c>
   27778:	3000161e 	bne	r6,zero,277d4 <strcmp+0x9c>
   2777c:	21000104 	addi	r4,r4,4
   27780:	20800017 	ldw	r2,0(r4)
   27784:	29400104 	addi	r5,r5,4
   27788:	28c00017 	ldw	r3,0(r5)
   2778c:	124f883a 	add	r7,r2,r9
   27790:	008c303a 	nor	r6,zero,r2
   27794:	398c703a 	and	r6,r7,r6
   27798:	320c703a 	and	r6,r6,r8
   2779c:	10fff626 	beq	r2,r3,27778 <strcmp+0x40>
   277a0:	20800007 	ldb	r2,0(r4)
   277a4:	1000051e 	bne	r2,zero,277bc <strcmp+0x84>
   277a8:	00000606 	br	277c4 <strcmp+0x8c>
   277ac:	21000044 	addi	r4,r4,1
   277b0:	20800007 	ldb	r2,0(r4)
   277b4:	29400044 	addi	r5,r5,1
   277b8:	10000226 	beq	r2,zero,277c4 <strcmp+0x8c>
   277bc:	28c00007 	ldb	r3,0(r5)
   277c0:	10fffa26 	beq	r2,r3,277ac <strcmp+0x74>
   277c4:	20c00003 	ldbu	r3,0(r4)
   277c8:	28800003 	ldbu	r2,0(r5)
   277cc:	1885c83a 	sub	r2,r3,r2
   277d0:	f800283a 	ret
   277d4:	0005883a 	mov	r2,zero
   277d8:	f800283a 	ret

000277dc <_write_r>:
   277dc:	defffd04 	addi	sp,sp,-12
   277e0:	dc400115 	stw	r17,4(sp)
   277e4:	dc000015 	stw	r16,0(sp)
   277e8:	2023883a 	mov	r17,r4
   277ec:	040001f4 	movhi	r16,7
   277f0:	84398704 	addi	r16,r16,-6628
   277f4:	2809883a 	mov	r4,r5
   277f8:	300b883a 	mov	r5,r6
   277fc:	380d883a 	mov	r6,r7
   27800:	dfc00215 	stw	ra,8(sp)
   27804:	80000015 	stw	zero,0(r16)
   27808:	002a6800 	call	2a680 <write>
   2780c:	00ffffc4 	movi	r3,-1
   27810:	10c00526 	beq	r2,r3,27828 <_write_r+0x4c>
   27814:	dfc00217 	ldw	ra,8(sp)
   27818:	dc400117 	ldw	r17,4(sp)
   2781c:	dc000017 	ldw	r16,0(sp)
   27820:	dec00304 	addi	sp,sp,12
   27824:	f800283a 	ret
   27828:	80c00017 	ldw	r3,0(r16)
   2782c:	183ff926 	beq	r3,zero,27814 <_write_r+0x38>
   27830:	88c00015 	stw	r3,0(r17)
   27834:	dfc00217 	ldw	ra,8(sp)
   27838:	dc400117 	ldw	r17,4(sp)
   2783c:	dc000017 	ldw	r16,0(sp)
   27840:	dec00304 	addi	sp,sp,12
   27844:	f800283a 	ret

00027848 <_calloc_r>:
   27848:	defffe04 	addi	sp,sp,-8
   2784c:	dc000015 	stw	r16,0(sp)
   27850:	2021883a 	mov	r16,r4
   27854:	3009883a 	mov	r4,r6
   27858:	dfc00115 	stw	ra,4(sp)
   2785c:	00297540 	call	29754 <__mulsi3>
   27860:	8009883a 	mov	r4,r16
   27864:	100b883a 	mov	r5,r2
   27868:	00252c00 	call	252c0 <_malloc_r>
   2786c:	1021883a 	mov	r16,r2
   27870:	10000c26 	beq	r2,zero,278a4 <_calloc_r+0x5c>
   27874:	11bfff17 	ldw	r6,-4(r2)
   27878:	00ffff04 	movi	r3,-4
   2787c:	00800904 	movi	r2,36
   27880:	30cc703a 	and	r6,r6,r3
   27884:	30cd883a 	add	r6,r6,r3
   27888:	11801436 	bltu	r2,r6,278dc <_calloc_r+0x94>
   2788c:	00c004c4 	movi	r3,19
   27890:	19800936 	bltu	r3,r6,278b8 <_calloc_r+0x70>
   27894:	8005883a 	mov	r2,r16
   27898:	10000015 	stw	zero,0(r2)
   2789c:	10000115 	stw	zero,4(r2)
   278a0:	10000215 	stw	zero,8(r2)
   278a4:	8005883a 	mov	r2,r16
   278a8:	dfc00117 	ldw	ra,4(sp)
   278ac:	dc000017 	ldw	r16,0(sp)
   278b0:	dec00204 	addi	sp,sp,8
   278b4:	f800283a 	ret
   278b8:	80000015 	stw	zero,0(r16)
   278bc:	80000115 	stw	zero,4(r16)
   278c0:	00c006c4 	movi	r3,27
   278c4:	19800d2e 	bgeu	r3,r6,278fc <_calloc_r+0xb4>
   278c8:	80000215 	stw	zero,8(r16)
   278cc:	80000315 	stw	zero,12(r16)
   278d0:	30800c26 	beq	r6,r2,27904 <_calloc_r+0xbc>
   278d4:	80800404 	addi	r2,r16,16
   278d8:	003fef06 	br	27898 <_calloc_r+0x50>
   278dc:	8009883a 	mov	r4,r16
   278e0:	000b883a 	mov	r5,zero
   278e4:	0025e080 	call	25e08 <memset>
   278e8:	8005883a 	mov	r2,r16
   278ec:	dfc00117 	ldw	ra,4(sp)
   278f0:	dc000017 	ldw	r16,0(sp)
   278f4:	dec00204 	addi	sp,sp,8
   278f8:	f800283a 	ret
   278fc:	80800204 	addi	r2,r16,8
   27900:	003fe506 	br	27898 <_calloc_r+0x50>
   27904:	80000415 	stw	zero,16(r16)
   27908:	80000515 	stw	zero,20(r16)
   2790c:	80800604 	addi	r2,r16,24
   27910:	003fe106 	br	27898 <_calloc_r+0x50>

00027914 <_close_r>:
   27914:	defffd04 	addi	sp,sp,-12
   27918:	dc400115 	stw	r17,4(sp)
   2791c:	dc000015 	stw	r16,0(sp)
   27920:	2023883a 	mov	r17,r4
   27924:	040001f4 	movhi	r16,7
   27928:	84398704 	addi	r16,r16,-6628
   2792c:	2809883a 	mov	r4,r5
   27930:	dfc00215 	stw	ra,8(sp)
   27934:	80000015 	stw	zero,0(r16)
   27938:	0029e080 	call	29e08 <close>
   2793c:	00ffffc4 	movi	r3,-1
   27940:	10c00526 	beq	r2,r3,27958 <_close_r+0x44>
   27944:	dfc00217 	ldw	ra,8(sp)
   27948:	dc400117 	ldw	r17,4(sp)
   2794c:	dc000017 	ldw	r16,0(sp)
   27950:	dec00304 	addi	sp,sp,12
   27954:	f800283a 	ret
   27958:	80c00017 	ldw	r3,0(r16)
   2795c:	183ff926 	beq	r3,zero,27944 <_close_r+0x30>
   27960:	88c00015 	stw	r3,0(r17)
   27964:	dfc00217 	ldw	ra,8(sp)
   27968:	dc400117 	ldw	r17,4(sp)
   2796c:	dc000017 	ldw	r16,0(sp)
   27970:	dec00304 	addi	sp,sp,12
   27974:	f800283a 	ret

00027978 <_fclose_r>:
   27978:	defffc04 	addi	sp,sp,-16
   2797c:	dc400115 	stw	r17,4(sp)
   27980:	dc000015 	stw	r16,0(sp)
   27984:	dfc00315 	stw	ra,12(sp)
   27988:	dc800215 	stw	r18,8(sp)
   2798c:	2821883a 	mov	r16,r5
   27990:	2023883a 	mov	r17,r4
   27994:	28003426 	beq	r5,zero,27a68 <_fclose_r+0xf0>
   27998:	00245ac0 	call	245ac <__sfp_lock_acquire>
   2799c:	88000226 	beq	r17,zero,279a8 <_fclose_r+0x30>
   279a0:	88800e17 	ldw	r2,56(r17)
   279a4:	10003826 	beq	r2,zero,27a88 <_fclose_r+0x110>
   279a8:	8080030f 	ldh	r2,12(r16)
   279ac:	10002526 	beq	r2,zero,27a44 <_fclose_r+0xcc>
   279b0:	8809883a 	mov	r4,r17
   279b4:	800b883a 	mov	r5,r16
   279b8:	00240e80 	call	240e8 <_fflush_r>
   279bc:	1025883a 	mov	r18,r2
   279c0:	80800b17 	ldw	r2,44(r16)
   279c4:	10000426 	beq	r2,zero,279d8 <_fclose_r+0x60>
   279c8:	81400717 	ldw	r5,28(r16)
   279cc:	8809883a 	mov	r4,r17
   279d0:	103ee83a 	callr	r2
   279d4:	10003516 	blt	r2,zero,27aac <_fclose_r+0x134>
   279d8:	8080030b 	ldhu	r2,12(r16)
   279dc:	1080200c 	andi	r2,r2,128
   279e0:	10bfffcc 	andi	r2,r2,65535
   279e4:	10a0001c 	xori	r2,r2,32768
   279e8:	10a00004 	addi	r2,r2,-32768
   279ec:	10002b1e 	bne	r2,zero,27a9c <_fclose_r+0x124>
   279f0:	81400c17 	ldw	r5,48(r16)
   279f4:	28000526 	beq	r5,zero,27a0c <_fclose_r+0x94>
   279f8:	80801004 	addi	r2,r16,64
   279fc:	28800226 	beq	r5,r2,27a08 <_fclose_r+0x90>
   27a00:	8809883a 	mov	r4,r17
   27a04:	00247280 	call	24728 <_free_r>
   27a08:	80000c15 	stw	zero,48(r16)
   27a0c:	81401117 	ldw	r5,68(r16)
   27a10:	28000326 	beq	r5,zero,27a20 <_fclose_r+0xa8>
   27a14:	8809883a 	mov	r4,r17
   27a18:	00247280 	call	24728 <_free_r>
   27a1c:	80001115 	stw	zero,68(r16)
   27a20:	8000030d 	sth	zero,12(r16)
   27a24:	00245b00 	call	245b0 <__sfp_lock_release>
   27a28:	9005883a 	mov	r2,r18
   27a2c:	dfc00317 	ldw	ra,12(sp)
   27a30:	dc800217 	ldw	r18,8(sp)
   27a34:	dc400117 	ldw	r17,4(sp)
   27a38:	dc000017 	ldw	r16,0(sp)
   27a3c:	dec00404 	addi	sp,sp,16
   27a40:	f800283a 	ret
   27a44:	00245b00 	call	245b0 <__sfp_lock_release>
   27a48:	0025883a 	mov	r18,zero
   27a4c:	9005883a 	mov	r2,r18
   27a50:	dfc00317 	ldw	ra,12(sp)
   27a54:	dc800217 	ldw	r18,8(sp)
   27a58:	dc400117 	ldw	r17,4(sp)
   27a5c:	dc000017 	ldw	r16,0(sp)
   27a60:	dec00404 	addi	sp,sp,16
   27a64:	f800283a 	ret
   27a68:	0025883a 	mov	r18,zero
   27a6c:	9005883a 	mov	r2,r18
   27a70:	dfc00317 	ldw	ra,12(sp)
   27a74:	dc800217 	ldw	r18,8(sp)
   27a78:	dc400117 	ldw	r17,4(sp)
   27a7c:	dc000017 	ldw	r16,0(sp)
   27a80:	dec00404 	addi	sp,sp,16
   27a84:	f800283a 	ret
   27a88:	8809883a 	mov	r4,r17
   27a8c:	00243a40 	call	243a4 <__sinit>
   27a90:	8080030f 	ldh	r2,12(r16)
   27a94:	103fc61e 	bne	r2,zero,279b0 <_fclose_r+0x38>
   27a98:	003fea06 	br	27a44 <_fclose_r+0xcc>
   27a9c:	81400417 	ldw	r5,16(r16)
   27aa0:	8809883a 	mov	r4,r17
   27aa4:	00247280 	call	24728 <_free_r>
   27aa8:	003fd106 	br	279f0 <_fclose_r+0x78>
   27aac:	04bfffc4 	movi	r18,-1
   27ab0:	003fc906 	br	279d8 <_fclose_r+0x60>

00027ab4 <fclose>:
   27ab4:	008001f4 	movhi	r2,7
   27ab8:	10b96e04 	addi	r2,r2,-6728
   27abc:	200b883a 	mov	r5,r4
   27ac0:	11000017 	ldw	r4,0(r2)
   27ac4:	00279781 	jmpi	27978 <_fclose_r>

00027ac8 <_fstat_r>:
   27ac8:	defffd04 	addi	sp,sp,-12
   27acc:	dc400115 	stw	r17,4(sp)
   27ad0:	dc000015 	stw	r16,0(sp)
   27ad4:	2023883a 	mov	r17,r4
   27ad8:	040001f4 	movhi	r16,7
   27adc:	84398704 	addi	r16,r16,-6628
   27ae0:	2809883a 	mov	r4,r5
   27ae4:	300b883a 	mov	r5,r6
   27ae8:	dfc00215 	stw	ra,8(sp)
   27aec:	80000015 	stw	zero,0(r16)
   27af0:	0029f500 	call	29f50 <fstat>
   27af4:	00ffffc4 	movi	r3,-1
   27af8:	10c00526 	beq	r2,r3,27b10 <_fstat_r+0x48>
   27afc:	dfc00217 	ldw	ra,8(sp)
   27b00:	dc400117 	ldw	r17,4(sp)
   27b04:	dc000017 	ldw	r16,0(sp)
   27b08:	dec00304 	addi	sp,sp,12
   27b0c:	f800283a 	ret
   27b10:	80c00017 	ldw	r3,0(r16)
   27b14:	183ff926 	beq	r3,zero,27afc <_fstat_r+0x34>
   27b18:	88c00015 	stw	r3,0(r17)
   27b1c:	dfc00217 	ldw	ra,8(sp)
   27b20:	dc400117 	ldw	r17,4(sp)
   27b24:	dc000017 	ldw	r16,0(sp)
   27b28:	dec00304 	addi	sp,sp,12
   27b2c:	f800283a 	ret

00027b30 <_isatty_r>:
   27b30:	defffd04 	addi	sp,sp,-12
   27b34:	dc400115 	stw	r17,4(sp)
   27b38:	dc000015 	stw	r16,0(sp)
   27b3c:	2023883a 	mov	r17,r4
   27b40:	040001f4 	movhi	r16,7
   27b44:	84398704 	addi	r16,r16,-6628
   27b48:	2809883a 	mov	r4,r5
   27b4c:	dfc00215 	stw	ra,8(sp)
   27b50:	80000015 	stw	zero,0(r16)
   27b54:	002a0500 	call	2a050 <isatty>
   27b58:	00ffffc4 	movi	r3,-1
   27b5c:	10c00526 	beq	r2,r3,27b74 <_isatty_r+0x44>
   27b60:	dfc00217 	ldw	ra,8(sp)
   27b64:	dc400117 	ldw	r17,4(sp)
   27b68:	dc000017 	ldw	r16,0(sp)
   27b6c:	dec00304 	addi	sp,sp,12
   27b70:	f800283a 	ret
   27b74:	80c00017 	ldw	r3,0(r16)
   27b78:	183ff926 	beq	r3,zero,27b60 <_isatty_r+0x30>
   27b7c:	88c00015 	stw	r3,0(r17)
   27b80:	dfc00217 	ldw	ra,8(sp)
   27b84:	dc400117 	ldw	r17,4(sp)
   27b88:	dc000017 	ldw	r16,0(sp)
   27b8c:	dec00304 	addi	sp,sp,12
   27b90:	f800283a 	ret

00027b94 <_lseek_r>:
   27b94:	defffd04 	addi	sp,sp,-12
   27b98:	dc400115 	stw	r17,4(sp)
   27b9c:	dc000015 	stw	r16,0(sp)
   27ba0:	2023883a 	mov	r17,r4
   27ba4:	040001f4 	movhi	r16,7
   27ba8:	84398704 	addi	r16,r16,-6628
   27bac:	2809883a 	mov	r4,r5
   27bb0:	300b883a 	mov	r5,r6
   27bb4:	380d883a 	mov	r6,r7
   27bb8:	dfc00215 	stw	ra,8(sp)
   27bbc:	80000015 	stw	zero,0(r16)
   27bc0:	002a2300 	call	2a230 <lseek>
   27bc4:	00ffffc4 	movi	r3,-1
   27bc8:	10c00526 	beq	r2,r3,27be0 <_lseek_r+0x4c>
   27bcc:	dfc00217 	ldw	ra,8(sp)
   27bd0:	dc400117 	ldw	r17,4(sp)
   27bd4:	dc000017 	ldw	r16,0(sp)
   27bd8:	dec00304 	addi	sp,sp,12
   27bdc:	f800283a 	ret
   27be0:	80c00017 	ldw	r3,0(r16)
   27be4:	183ff926 	beq	r3,zero,27bcc <_lseek_r+0x38>
   27be8:	88c00015 	stw	r3,0(r17)
   27bec:	dfc00217 	ldw	ra,8(sp)
   27bf0:	dc400117 	ldw	r17,4(sp)
   27bf4:	dc000017 	ldw	r16,0(sp)
   27bf8:	dec00304 	addi	sp,sp,12
   27bfc:	f800283a 	ret

00027c00 <_read_r>:
   27c00:	defffd04 	addi	sp,sp,-12
   27c04:	dc400115 	stw	r17,4(sp)
   27c08:	dc000015 	stw	r16,0(sp)
   27c0c:	2023883a 	mov	r17,r4
   27c10:	040001f4 	movhi	r16,7
   27c14:	84398704 	addi	r16,r16,-6628
   27c18:	2809883a 	mov	r4,r5
   27c1c:	300b883a 	mov	r5,r6
   27c20:	380d883a 	mov	r6,r7
   27c24:	dfc00215 	stw	ra,8(sp)
   27c28:	80000015 	stw	zero,0(r16)
   27c2c:	002a40c0 	call	2a40c <read>
   27c30:	00ffffc4 	movi	r3,-1
   27c34:	10c00526 	beq	r2,r3,27c4c <_read_r+0x4c>
   27c38:	dfc00217 	ldw	ra,8(sp)
   27c3c:	dc400117 	ldw	r17,4(sp)
   27c40:	dc000017 	ldw	r16,0(sp)
   27c44:	dec00304 	addi	sp,sp,12
   27c48:	f800283a 	ret
   27c4c:	80c00017 	ldw	r3,0(r16)
   27c50:	183ff926 	beq	r3,zero,27c38 <_read_r+0x38>
   27c54:	88c00015 	stw	r3,0(r17)
   27c58:	dfc00217 	ldw	ra,8(sp)
   27c5c:	dc400117 	ldw	r17,4(sp)
   27c60:	dc000017 	ldw	r16,0(sp)
   27c64:	dec00304 	addi	sp,sp,12
   27c68:	f800283a 	ret

00027c6c <__udivdi3>:
   27c6c:	defff504 	addi	sp,sp,-44
   27c70:	dd000515 	stw	r20,20(sp)
   27c74:	dcc00415 	stw	r19,16(sp)
   27c78:	dc800315 	stw	r18,12(sp)
   27c7c:	dc400215 	stw	r17,8(sp)
   27c80:	dc000115 	stw	r16,4(sp)
   27c84:	dfc00a15 	stw	ra,40(sp)
   27c88:	df000915 	stw	fp,36(sp)
   27c8c:	ddc00815 	stw	r23,32(sp)
   27c90:	dd800715 	stw	r22,28(sp)
   27c94:	dd400615 	stw	r21,24(sp)
   27c98:	2025883a 	mov	r18,r4
   27c9c:	2823883a 	mov	r17,r5
   27ca0:	3021883a 	mov	r16,r6
   27ca4:	2027883a 	mov	r19,r4
   27ca8:	2829883a 	mov	r20,r5
   27cac:	3800451e 	bne	r7,zero,27dc4 <__udivdi3+0x158>
   27cb0:	2980652e 	bgeu	r5,r6,27e48 <__udivdi3+0x1dc>
   27cb4:	00bfffd4 	movui	r2,65535
   27cb8:	1180b436 	bltu	r2,r6,27f8c <__udivdi3+0x320>
   27cbc:	00803fc4 	movi	r2,255
   27cc0:	11816636 	bltu	r2,r6,2825c <__udivdi3+0x5f0>
   27cc4:	0005883a 	mov	r2,zero
   27cc8:	0007883a 	mov	r3,zero
   27ccc:	3084d83a 	srl	r2,r6,r2
   27cd0:	010001f4 	movhi	r4,7
   27cd4:	21329904 	addi	r4,r4,-13724
   27cd8:	2085883a 	add	r2,r4,r2
   27cdc:	10800003 	ldbu	r2,0(r2)
   27ce0:	10c7883a 	add	r3,r2,r3
   27ce4:	00800804 	movi	r2,32
   27ce8:	10c5c83a 	sub	r2,r2,r3
   27cec:	10000526 	beq	r2,zero,27d04 <__udivdi3+0x98>
   27cf0:	88a2983a 	sll	r17,r17,r2
   27cf4:	90c6d83a 	srl	r3,r18,r3
   27cf8:	30a0983a 	sll	r16,r6,r2
   27cfc:	90a6983a 	sll	r19,r18,r2
   27d00:	88e8b03a 	or	r20,r17,r3
   27d04:	8022d43a 	srli	r17,r16,16
   27d08:	a009883a 	mov	r4,r20
   27d0c:	857fffcc 	andi	r21,r16,65535
   27d10:	880b883a 	mov	r5,r17
   27d14:	002974c0 	call	2974c <__umodsi3>
   27d18:	a009883a 	mov	r4,r20
   27d1c:	880b883a 	mov	r5,r17
   27d20:	102d883a 	mov	r22,r2
   27d24:	00297440 	call	29744 <__udivsi3>
   27d28:	1009883a 	mov	r4,r2
   27d2c:	a80b883a 	mov	r5,r21
   27d30:	1025883a 	mov	r18,r2
   27d34:	00297540 	call	29754 <__mulsi3>
   27d38:	1009883a 	mov	r4,r2
   27d3c:	b006943a 	slli	r3,r22,16
   27d40:	9804d43a 	srli	r2,r19,16
   27d44:	1886b03a 	or	r3,r3,r2
   27d48:	1900052e 	bgeu	r3,r4,27d60 <__udivdi3+0xf4>
   27d4c:	1c07883a 	add	r3,r3,r16
   27d50:	90bfffc4 	addi	r2,r18,-1
   27d54:	1c000136 	bltu	r3,r16,27d5c <__udivdi3+0xf0>
   27d58:	19015536 	bltu	r3,r4,282b0 <__udivdi3+0x644>
   27d5c:	1025883a 	mov	r18,r2
   27d60:	1929c83a 	sub	r20,r3,r4
   27d64:	880b883a 	mov	r5,r17
   27d68:	a009883a 	mov	r4,r20
   27d6c:	002974c0 	call	2974c <__umodsi3>
   27d70:	102d883a 	mov	r22,r2
   27d74:	880b883a 	mov	r5,r17
   27d78:	a009883a 	mov	r4,r20
   27d7c:	b02c943a 	slli	r22,r22,16
   27d80:	00297440 	call	29744 <__udivsi3>
   27d84:	1009883a 	mov	r4,r2
   27d88:	a80b883a 	mov	r5,r21
   27d8c:	9cffffcc 	andi	r19,r19,65535
   27d90:	1023883a 	mov	r17,r2
   27d94:	b4e6b03a 	or	r19,r22,r19
   27d98:	00297540 	call	29754 <__mulsi3>
   27d9c:	9880052e 	bgeu	r19,r2,27db4 <__udivdi3+0x148>
   27da0:	9c27883a 	add	r19,r19,r16
   27da4:	88ffffc4 	addi	r3,r17,-1
   27da8:	9c011436 	bltu	r19,r16,281fc <__udivdi3+0x590>
   27dac:	9881132e 	bgeu	r19,r2,281fc <__udivdi3+0x590>
   27db0:	8c7fff84 	addi	r17,r17,-2
   27db4:	9004943a 	slli	r2,r18,16
   27db8:	0007883a 	mov	r3,zero
   27dbc:	8884b03a 	or	r2,r17,r2
   27dc0:	00001506 	br	27e18 <__udivdi3+0x1ac>
   27dc4:	29c06a36 	bltu	r5,r7,27f70 <__udivdi3+0x304>
   27dc8:	00bfffd4 	movui	r2,65535
   27dcc:	11c06a2e 	bgeu	r2,r7,27f78 <__udivdi3+0x30c>
   27dd0:	00804034 	movhi	r2,256
   27dd4:	10bfffc4 	addi	r2,r2,-1
   27dd8:	11c11436 	bltu	r2,r7,2822c <__udivdi3+0x5c0>
   27ddc:	00c00404 	movi	r3,16
   27de0:	180b883a 	mov	r5,r3
   27de4:	38c6d83a 	srl	r3,r7,r3
   27de8:	010001f4 	movhi	r4,7
   27dec:	21329904 	addi	r4,r4,-13724
   27df0:	04000804 	movi	r16,32
   27df4:	20c7883a 	add	r3,r4,r3
   27df8:	18800003 	ldbu	r2,0(r3)
   27dfc:	1145883a 	add	r2,r2,r5
   27e00:	80a1c83a 	sub	r16,r16,r2
   27e04:	80006e1e 	bne	r16,zero,27fc0 <__udivdi3+0x354>
   27e08:	0007883a 	mov	r3,zero
   27e0c:	3c406a36 	bltu	r7,r17,27fb8 <__udivdi3+0x34c>
   27e10:	9180692e 	bgeu	r18,r6,27fb8 <__udivdi3+0x34c>
   27e14:	0005883a 	mov	r2,zero
   27e18:	dfc00a17 	ldw	ra,40(sp)
   27e1c:	df000917 	ldw	fp,36(sp)
   27e20:	ddc00817 	ldw	r23,32(sp)
   27e24:	dd800717 	ldw	r22,28(sp)
   27e28:	dd400617 	ldw	r21,24(sp)
   27e2c:	dd000517 	ldw	r20,20(sp)
   27e30:	dcc00417 	ldw	r19,16(sp)
   27e34:	dc800317 	ldw	r18,12(sp)
   27e38:	dc400217 	ldw	r17,8(sp)
   27e3c:	dc000117 	ldw	r16,4(sp)
   27e40:	dec00b04 	addi	sp,sp,44
   27e44:	f800283a 	ret
   27e48:	3000041e 	bne	r6,zero,27e5c <__udivdi3+0x1f0>
   27e4c:	01000044 	movi	r4,1
   27e50:	000b883a 	mov	r5,zero
   27e54:	00297440 	call	29744 <__udivsi3>
   27e58:	1021883a 	mov	r16,r2
   27e5c:	00bfffd4 	movui	r2,65535
   27e60:	1400502e 	bgeu	r2,r16,27fa4 <__udivdi3+0x338>
   27e64:	00804034 	movhi	r2,256
   27e68:	10bfffc4 	addi	r2,r2,-1
   27e6c:	1400f536 	bltu	r2,r16,28244 <__udivdi3+0x5d8>
   27e70:	00800404 	movi	r2,16
   27e74:	1007883a 	mov	r3,r2
   27e78:	8084d83a 	srl	r2,r16,r2
   27e7c:	010001f4 	movhi	r4,7
   27e80:	21329904 	addi	r4,r4,-13724
   27e84:	2085883a 	add	r2,r4,r2
   27e88:	10800003 	ldbu	r2,0(r2)
   27e8c:	10c7883a 	add	r3,r2,r3
   27e90:	00800804 	movi	r2,32
   27e94:	10c5c83a 	sub	r2,r2,r3
   27e98:	1000a01e 	bne	r2,zero,2811c <__udivdi3+0x4b0>
   27e9c:	8028d43a 	srli	r20,r16,16
   27ea0:	8c23c83a 	sub	r17,r17,r16
   27ea4:	857fffcc 	andi	r21,r16,65535
   27ea8:	00c00044 	movi	r3,1
   27eac:	8809883a 	mov	r4,r17
   27eb0:	a00b883a 	mov	r5,r20
   27eb4:	d8c00015 	stw	r3,0(sp)
   27eb8:	002974c0 	call	2974c <__umodsi3>
   27ebc:	8809883a 	mov	r4,r17
   27ec0:	a00b883a 	mov	r5,r20
   27ec4:	102d883a 	mov	r22,r2
   27ec8:	00297440 	call	29744 <__udivsi3>
   27ecc:	1009883a 	mov	r4,r2
   27ed0:	a80b883a 	mov	r5,r21
   27ed4:	1025883a 	mov	r18,r2
   27ed8:	00297540 	call	29754 <__mulsi3>
   27edc:	1009883a 	mov	r4,r2
   27ee0:	b00c943a 	slli	r6,r22,16
   27ee4:	9804d43a 	srli	r2,r19,16
   27ee8:	d8c00017 	ldw	r3,0(sp)
   27eec:	308cb03a 	or	r6,r6,r2
   27ef0:	3100052e 	bgeu	r6,r4,27f08 <__udivdi3+0x29c>
   27ef4:	340d883a 	add	r6,r6,r16
   27ef8:	90bfffc4 	addi	r2,r18,-1
   27efc:	34000136 	bltu	r6,r16,27f04 <__udivdi3+0x298>
   27f00:	3100e836 	bltu	r6,r4,282a4 <__udivdi3+0x638>
   27f04:	1025883a 	mov	r18,r2
   27f08:	3123c83a 	sub	r17,r6,r4
   27f0c:	8809883a 	mov	r4,r17
   27f10:	a00b883a 	mov	r5,r20
   27f14:	d8c00015 	stw	r3,0(sp)
   27f18:	002974c0 	call	2974c <__umodsi3>
   27f1c:	102d883a 	mov	r22,r2
   27f20:	8809883a 	mov	r4,r17
   27f24:	a00b883a 	mov	r5,r20
   27f28:	b02c943a 	slli	r22,r22,16
   27f2c:	00297440 	call	29744 <__udivsi3>
   27f30:	1009883a 	mov	r4,r2
   27f34:	a80b883a 	mov	r5,r21
   27f38:	9cffffcc 	andi	r19,r19,65535
   27f3c:	1023883a 	mov	r17,r2
   27f40:	b4e6b03a 	or	r19,r22,r19
   27f44:	00297540 	call	29754 <__mulsi3>
   27f48:	d8c00017 	ldw	r3,0(sp)
   27f4c:	9880052e 	bgeu	r19,r2,27f64 <__udivdi3+0x2f8>
   27f50:	9c27883a 	add	r19,r19,r16
   27f54:	893fffc4 	addi	r4,r17,-1
   27f58:	9c00aa36 	bltu	r19,r16,28204 <__udivdi3+0x598>
   27f5c:	9880a92e 	bgeu	r19,r2,28204 <__udivdi3+0x598>
   27f60:	8c7fff84 	addi	r17,r17,-2
   27f64:	9004943a 	slli	r2,r18,16
   27f68:	8884b03a 	or	r2,r17,r2
   27f6c:	003faa06 	br	27e18 <__udivdi3+0x1ac>
   27f70:	0007883a 	mov	r3,zero
   27f74:	003fa706 	br	27e14 <__udivdi3+0x1a8>
   27f78:	00803fc4 	movi	r2,255
   27f7c:	11c0ae36 	bltu	r2,r7,28238 <__udivdi3+0x5cc>
   27f80:	0007883a 	mov	r3,zero
   27f84:	000b883a 	mov	r5,zero
   27f88:	003f9606 	br	27de4 <__udivdi3+0x178>
   27f8c:	00804034 	movhi	r2,256
   27f90:	10bfffc4 	addi	r2,r2,-1
   27f94:	1180ae36 	bltu	r2,r6,28250 <__udivdi3+0x5e4>
   27f98:	00800404 	movi	r2,16
   27f9c:	1007883a 	mov	r3,r2
   27fa0:	003f4a06 	br	27ccc <__udivdi3+0x60>
   27fa4:	00803fc4 	movi	r2,255
   27fa8:	1400af36 	bltu	r2,r16,28268 <__udivdi3+0x5fc>
   27fac:	0005883a 	mov	r2,zero
   27fb0:	0007883a 	mov	r3,zero
   27fb4:	003fb006 	br	27e78 <__udivdi3+0x20c>
   27fb8:	00800044 	movi	r2,1
   27fbc:	003f9606 	br	27e18 <__udivdi3+0x1ac>
   27fc0:	3c0e983a 	sll	r7,r7,r16
   27fc4:	3086d83a 	srl	r3,r6,r2
   27fc8:	88aed83a 	srl	r23,r17,r2
   27fcc:	9084d83a 	srl	r2,r18,r2
   27fd0:	38e6b03a 	or	r19,r7,r3
   27fd4:	9828d43a 	srli	r20,r19,16
   27fd8:	8c22983a 	sll	r17,r17,r16
   27fdc:	b809883a 	mov	r4,r23
   27fe0:	a00b883a 	mov	r5,r20
   27fe4:	342a983a 	sll	r21,r6,r16
   27fe8:	88a2b03a 	or	r17,r17,r2
   27fec:	002974c0 	call	2974c <__umodsi3>
   27ff0:	b809883a 	mov	r4,r23
   27ff4:	a00b883a 	mov	r5,r20
   27ff8:	1039883a 	mov	fp,r2
   27ffc:	9dbfffcc 	andi	r22,r19,65535
   28000:	00297440 	call	29744 <__udivsi3>
   28004:	1009883a 	mov	r4,r2
   28008:	b00b883a 	mov	r5,r22
   2800c:	102f883a 	mov	r23,r2
   28010:	00297540 	call	29754 <__mulsi3>
   28014:	1009883a 	mov	r4,r2
   28018:	e00e943a 	slli	r7,fp,16
   2801c:	8804d43a 	srli	r2,r17,16
   28020:	388eb03a 	or	r7,r7,r2
   28024:	3900042e 	bgeu	r7,r4,28038 <__udivdi3+0x3cc>
   28028:	3ccf883a 	add	r7,r7,r19
   2802c:	b8bfffc4 	addi	r2,r23,-1
   28030:	3cc0942e 	bgeu	r7,r19,28284 <__udivdi3+0x618>
   28034:	102f883a 	mov	r23,r2
   28038:	3939c83a 	sub	fp,r7,r4
   2803c:	a00b883a 	mov	r5,r20
   28040:	e009883a 	mov	r4,fp
   28044:	002974c0 	call	2974c <__umodsi3>
   28048:	a00b883a 	mov	r5,r20
   2804c:	e009883a 	mov	r4,fp
   28050:	d8800015 	stw	r2,0(sp)
   28054:	00297440 	call	29744 <__udivsi3>
   28058:	1009883a 	mov	r4,r2
   2805c:	b00b883a 	mov	r5,r22
   28060:	1029883a 	mov	r20,r2
   28064:	00297540 	call	29754 <__mulsi3>
   28068:	d8c00017 	ldw	r3,0(sp)
   2806c:	8c7fffcc 	andi	r17,r17,65535
   28070:	1806943a 	slli	r3,r3,16
   28074:	1c46b03a 	or	r3,r3,r17
   28078:	1880042e 	bgeu	r3,r2,2808c <__udivdi3+0x420>
   2807c:	1cc7883a 	add	r3,r3,r19
   28080:	a13fffc4 	addi	r4,r20,-1
   28084:	1cc07b2e 	bgeu	r3,r19,28274 <__udivdi3+0x608>
   28088:	2029883a 	mov	r20,r4
   2808c:	b82e943a 	slli	r23,r23,16
   28090:	a822d43a 	srli	r17,r21,16
   28094:	ad7fffcc 	andi	r21,r21,65535
   28098:	a5e8b03a 	or	r20,r20,r23
   2809c:	a5bfffcc 	andi	r22,r20,65535
   280a0:	b009883a 	mov	r4,r22
   280a4:	a80b883a 	mov	r5,r21
   280a8:	18afc83a 	sub	r23,r3,r2
   280ac:	a026d43a 	srli	r19,r20,16
   280b0:	00297540 	call	29754 <__mulsi3>
   280b4:	b009883a 	mov	r4,r22
   280b8:	880b883a 	mov	r5,r17
   280bc:	1039883a 	mov	fp,r2
   280c0:	00297540 	call	29754 <__mulsi3>
   280c4:	a80b883a 	mov	r5,r21
   280c8:	9809883a 	mov	r4,r19
   280cc:	102d883a 	mov	r22,r2
   280d0:	00297540 	call	29754 <__mulsi3>
   280d4:	9809883a 	mov	r4,r19
   280d8:	880b883a 	mov	r5,r17
   280dc:	102b883a 	mov	r21,r2
   280e0:	00297540 	call	29754 <__mulsi3>
   280e4:	100b883a 	mov	r5,r2
   280e8:	e004d43a 	srli	r2,fp,16
   280ec:	ad89883a 	add	r4,r21,r22
   280f0:	2089883a 	add	r4,r4,r2
   280f4:	2540022e 	bgeu	r4,r21,28100 <__udivdi3+0x494>
   280f8:	00800074 	movhi	r2,1
   280fc:	288b883a 	add	r5,r5,r2
   28100:	2004d43a 	srli	r2,r4,16
   28104:	288b883a 	add	r5,r5,r2
   28108:	b9404536 	bltu	r23,r5,28220 <__udivdi3+0x5b4>
   2810c:	b9403f26 	beq	r23,r5,2820c <__udivdi3+0x5a0>
   28110:	a005883a 	mov	r2,r20
   28114:	0007883a 	mov	r3,zero
   28118:	003f3f06 	br	27e18 <__udivdi3+0x1ac>
   2811c:	80a0983a 	sll	r16,r16,r2
   28120:	88eed83a 	srl	r23,r17,r3
   28124:	90c6d83a 	srl	r3,r18,r3
   28128:	8028d43a 	srli	r20,r16,16
   2812c:	88a2983a 	sll	r17,r17,r2
   28130:	b809883a 	mov	r4,r23
   28134:	a00b883a 	mov	r5,r20
   28138:	88ecb03a 	or	r22,r17,r3
   2813c:	90a6983a 	sll	r19,r18,r2
   28140:	002974c0 	call	2974c <__umodsi3>
   28144:	b809883a 	mov	r4,r23
   28148:	a00b883a 	mov	r5,r20
   2814c:	1023883a 	mov	r17,r2
   28150:	857fffcc 	andi	r21,r16,65535
   28154:	00297440 	call	29744 <__udivsi3>
   28158:	1009883a 	mov	r4,r2
   2815c:	a80b883a 	mov	r5,r21
   28160:	102f883a 	mov	r23,r2
   28164:	00297540 	call	29754 <__mulsi3>
   28168:	1009883a 	mov	r4,r2
   2816c:	880a943a 	slli	r5,r17,16
   28170:	b004d43a 	srli	r2,r22,16
   28174:	288ab03a 	or	r5,r5,r2
   28178:	2900062e 	bgeu	r5,r4,28194 <__udivdi3+0x528>
   2817c:	2c0b883a 	add	r5,r5,r16
   28180:	b8bfffc4 	addi	r2,r23,-1
   28184:	2c004536 	bltu	r5,r16,2829c <__udivdi3+0x630>
   28188:	2900442e 	bgeu	r5,r4,2829c <__udivdi3+0x630>
   2818c:	bdffff84 	addi	r23,r23,-2
   28190:	2c0b883a 	add	r5,r5,r16
   28194:	2925c83a 	sub	r18,r5,r4
   28198:	9009883a 	mov	r4,r18
   2819c:	a00b883a 	mov	r5,r20
   281a0:	002974c0 	call	2974c <__umodsi3>
   281a4:	1023883a 	mov	r17,r2
   281a8:	9009883a 	mov	r4,r18
   281ac:	a00b883a 	mov	r5,r20
   281b0:	8822943a 	slli	r17,r17,16
   281b4:	00297440 	call	29744 <__udivsi3>
   281b8:	1009883a 	mov	r4,r2
   281bc:	a80b883a 	mov	r5,r21
   281c0:	b5bfffcc 	andi	r22,r22,65535
   281c4:	1025883a 	mov	r18,r2
   281c8:	8da2b03a 	or	r17,r17,r22
   281cc:	00297540 	call	29754 <__mulsi3>
   281d0:	8880062e 	bgeu	r17,r2,281ec <__udivdi3+0x580>
   281d4:	8c23883a 	add	r17,r17,r16
   281d8:	90ffffc4 	addi	r3,r18,-1
   281dc:	8c002d36 	bltu	r17,r16,28294 <__udivdi3+0x628>
   281e0:	88802c2e 	bgeu	r17,r2,28294 <__udivdi3+0x628>
   281e4:	94bfff84 	addi	r18,r18,-2
   281e8:	8c23883a 	add	r17,r17,r16
   281ec:	b806943a 	slli	r3,r23,16
   281f0:	88a3c83a 	sub	r17,r17,r2
   281f4:	90c6b03a 	or	r3,r18,r3
   281f8:	003f2c06 	br	27eac <__udivdi3+0x240>
   281fc:	1823883a 	mov	r17,r3
   28200:	003eec06 	br	27db4 <__udivdi3+0x148>
   28204:	2023883a 	mov	r17,r4
   28208:	003f5606 	br	27f64 <__udivdi3+0x2f8>
   2820c:	2008943a 	slli	r4,r4,16
   28210:	9420983a 	sll	r16,r18,r16
   28214:	e73fffcc 	andi	fp,fp,65535
   28218:	2709883a 	add	r4,r4,fp
   2821c:	813fbc2e 	bgeu	r16,r4,28110 <__udivdi3+0x4a4>
   28220:	a0bfffc4 	addi	r2,r20,-1
   28224:	0007883a 	mov	r3,zero
   28228:	003efb06 	br	27e18 <__udivdi3+0x1ac>
   2822c:	00c00604 	movi	r3,24
   28230:	180b883a 	mov	r5,r3
   28234:	003eeb06 	br	27de4 <__udivdi3+0x178>
   28238:	00c00204 	movi	r3,8
   2823c:	180b883a 	mov	r5,r3
   28240:	003ee806 	br	27de4 <__udivdi3+0x178>
   28244:	00800604 	movi	r2,24
   28248:	1007883a 	mov	r3,r2
   2824c:	003f0a06 	br	27e78 <__udivdi3+0x20c>
   28250:	00800604 	movi	r2,24
   28254:	1007883a 	mov	r3,r2
   28258:	003e9c06 	br	27ccc <__udivdi3+0x60>
   2825c:	00800204 	movi	r2,8
   28260:	1007883a 	mov	r3,r2
   28264:	003e9906 	br	27ccc <__udivdi3+0x60>
   28268:	00800204 	movi	r2,8
   2826c:	1007883a 	mov	r3,r2
   28270:	003f0106 	br	27e78 <__udivdi3+0x20c>
   28274:	18bf842e 	bgeu	r3,r2,28088 <__udivdi3+0x41c>
   28278:	a53fff84 	addi	r20,r20,-2
   2827c:	1cc7883a 	add	r3,r3,r19
   28280:	003f8206 	br	2808c <__udivdi3+0x420>
   28284:	393f6b2e 	bgeu	r7,r4,28034 <__udivdi3+0x3c8>
   28288:	bdffff84 	addi	r23,r23,-2
   2828c:	3ccf883a 	add	r7,r7,r19
   28290:	003f6906 	br	28038 <__udivdi3+0x3cc>
   28294:	1825883a 	mov	r18,r3
   28298:	003fd406 	br	281ec <__udivdi3+0x580>
   2829c:	102f883a 	mov	r23,r2
   282a0:	003fbc06 	br	28194 <__udivdi3+0x528>
   282a4:	94bfff84 	addi	r18,r18,-2
   282a8:	340d883a 	add	r6,r6,r16
   282ac:	003f1606 	br	27f08 <__udivdi3+0x29c>
   282b0:	94bfff84 	addi	r18,r18,-2
   282b4:	1c07883a 	add	r3,r3,r16
   282b8:	003ea906 	br	27d60 <__udivdi3+0xf4>

000282bc <__umoddi3>:
   282bc:	defff304 	addi	sp,sp,-52
   282c0:	dd000715 	stw	r20,28(sp)
   282c4:	dcc00615 	stw	r19,24(sp)
   282c8:	dc800515 	stw	r18,20(sp)
   282cc:	dc400415 	stw	r17,16(sp)
   282d0:	dc000315 	stw	r16,12(sp)
   282d4:	dfc00c15 	stw	ra,48(sp)
   282d8:	df000b15 	stw	fp,44(sp)
   282dc:	ddc00a15 	stw	r23,40(sp)
   282e0:	dd800915 	stw	r22,36(sp)
   282e4:	dd400815 	stw	r21,32(sp)
   282e8:	2025883a 	mov	r18,r4
   282ec:	2823883a 	mov	r17,r5
   282f0:	3021883a 	mov	r16,r6
   282f4:	2027883a 	mov	r19,r4
   282f8:	2829883a 	mov	r20,r5
   282fc:	38003a1e 	bne	r7,zero,283e8 <__umoddi3+0x12c>
   28300:	2980522e 	bgeu	r5,r6,2844c <__umoddi3+0x190>
   28304:	00bfffd4 	movui	r2,65535
   28308:	1180a436 	bltu	r2,r6,2859c <__umoddi3+0x2e0>
   2830c:	00803fc4 	movi	r2,255
   28310:	11816036 	bltu	r2,r6,28894 <__umoddi3+0x5d8>
   28314:	0005883a 	mov	r2,zero
   28318:	0009883a 	mov	r4,zero
   2831c:	3084d83a 	srl	r2,r6,r2
   28320:	00c001f4 	movhi	r3,7
   28324:	18f29904 	addi	r3,r3,-13724
   28328:	05400804 	movi	r21,32
   2832c:	1885883a 	add	r2,r3,r2
   28330:	10800003 	ldbu	r2,0(r2)
   28334:	1109883a 	add	r4,r2,r4
   28338:	a92bc83a 	sub	r21,r21,r4
   2833c:	a8010e26 	beq	r21,zero,28778 <__umoddi3+0x4bc>
   28340:	8d62983a 	sll	r17,r17,r21
   28344:	9108d83a 	srl	r4,r18,r4
   28348:	3560983a 	sll	r16,r6,r21
   2834c:	9566983a 	sll	r19,r18,r21
   28350:	8928b03a 	or	r20,r17,r4
   28354:	8022d43a 	srli	r17,r16,16
   28358:	a009883a 	mov	r4,r20
   2835c:	84bfffcc 	andi	r18,r16,65535
   28360:	880b883a 	mov	r5,r17
   28364:	002974c0 	call	2974c <__umodsi3>
   28368:	a009883a 	mov	r4,r20
   2836c:	880b883a 	mov	r5,r17
   28370:	102d883a 	mov	r22,r2
   28374:	00297440 	call	29744 <__udivsi3>
   28378:	1009883a 	mov	r4,r2
   2837c:	900b883a 	mov	r5,r18
   28380:	00297540 	call	29754 <__mulsi3>
   28384:	1009883a 	mov	r4,r2
   28388:	b006943a 	slli	r3,r22,16
   2838c:	9804d43a 	srli	r2,r19,16
   28390:	1886b03a 	or	r3,r3,r2
   28394:	1900042e 	bgeu	r3,r4,283a8 <__umoddi3+0xec>
   28398:	1c07883a 	add	r3,r3,r16
   2839c:	1c000236 	bltu	r3,r16,283a8 <__umoddi3+0xec>
   283a0:	1900012e 	bgeu	r3,r4,283a8 <__umoddi3+0xec>
   283a4:	1c07883a 	add	r3,r3,r16
   283a8:	1929c83a 	sub	r20,r3,r4
   283ac:	a009883a 	mov	r4,r20
   283b0:	880b883a 	mov	r5,r17
   283b4:	002974c0 	call	2974c <__umodsi3>
   283b8:	102d883a 	mov	r22,r2
   283bc:	a009883a 	mov	r4,r20
   283c0:	880b883a 	mov	r5,r17
   283c4:	b02c943a 	slli	r22,r22,16
   283c8:	00297440 	call	29744 <__udivsi3>
   283cc:	1009883a 	mov	r4,r2
   283d0:	900b883a 	mov	r5,r18
   283d4:	9cffffcc 	andi	r19,r19,65535
   283d8:	00297540 	call	29754 <__mulsi3>
   283dc:	b4e6b03a 	or	r19,r22,r19
   283e0:	9880572e 	bgeu	r19,r2,28540 <__umoddi3+0x284>
   283e4:	00005206 	br	28530 <__umoddi3+0x274>
   283e8:	29c05936 	bltu	r5,r7,28550 <__umoddi3+0x294>
   283ec:	00bfffd4 	movui	r2,65535
   283f0:	11c0652e 	bgeu	r2,r7,28588 <__umoddi3+0x2cc>
   283f4:	00804034 	movhi	r2,256
   283f8:	10bfffc4 	addi	r2,r2,-1
   283fc:	11c11936 	bltu	r2,r7,28864 <__umoddi3+0x5a8>
   28400:	00c00404 	movi	r3,16
   28404:	1827883a 	mov	r19,r3
   28408:	38c6d83a 	srl	r3,r7,r3
   2840c:	010001f4 	movhi	r4,7
   28410:	21329904 	addi	r4,r4,-13724
   28414:	04000804 	movi	r16,32
   28418:	20c7883a 	add	r3,r4,r3
   2841c:	18800003 	ldbu	r2,0(r3)
   28420:	14e7883a 	add	r19,r2,r19
   28424:	84e1c83a 	sub	r16,r16,r19
   28428:	8000671e 	bne	r16,zero,285c8 <__umoddi3+0x30c>
   2842c:	3c400136 	bltu	r7,r17,28434 <__umoddi3+0x178>
   28430:	91812536 	bltu	r18,r6,288c8 <__umoddi3+0x60c>
   28434:	9185c83a 	sub	r2,r18,r6
   28438:	89e3c83a 	sub	r17,r17,r7
   2843c:	90a5803a 	cmpltu	r18,r18,r2
   28440:	8ca9c83a 	sub	r20,r17,r18
   28444:	a007883a 	mov	r3,r20
   28448:	00004306 	br	28558 <__umoddi3+0x29c>
   2844c:	3000041e 	bne	r6,zero,28460 <__umoddi3+0x1a4>
   28450:	01000044 	movi	r4,1
   28454:	000b883a 	mov	r5,zero
   28458:	00297440 	call	29744 <__udivsi3>
   2845c:	1021883a 	mov	r16,r2
   28460:	00bfffd4 	movui	r2,65535
   28464:	1400532e 	bgeu	r2,r16,285b4 <__umoddi3+0x2f8>
   28468:	00804034 	movhi	r2,256
   2846c:	10bfffc4 	addi	r2,r2,-1
   28470:	14010536 	bltu	r2,r16,28888 <__umoddi3+0x5cc>
   28474:	00800404 	movi	r2,16
   28478:	1007883a 	mov	r3,r2
   2847c:	8084d83a 	srl	r2,r16,r2
   28480:	010001f4 	movhi	r4,7
   28484:	21329904 	addi	r4,r4,-13724
   28488:	05400804 	movi	r21,32
   2848c:	2085883a 	add	r2,r4,r2
   28490:	10800003 	ldbu	r2,0(r2)
   28494:	10c7883a 	add	r3,r2,r3
   28498:	a8ebc83a 	sub	r21,r21,r3
   2849c:	a800b81e 	bne	r21,zero,28780 <__umoddi3+0x4c4>
   284a0:	8028d43a 	srli	r20,r16,16
   284a4:	8c23c83a 	sub	r17,r17,r16
   284a8:	85bfffcc 	andi	r22,r16,65535
   284ac:	8809883a 	mov	r4,r17
   284b0:	a00b883a 	mov	r5,r20
   284b4:	002974c0 	call	2974c <__umodsi3>
   284b8:	8809883a 	mov	r4,r17
   284bc:	a00b883a 	mov	r5,r20
   284c0:	1025883a 	mov	r18,r2
   284c4:	00297440 	call	29744 <__udivsi3>
   284c8:	1009883a 	mov	r4,r2
   284cc:	b00b883a 	mov	r5,r22
   284d0:	00297540 	call	29754 <__mulsi3>
   284d4:	1009883a 	mov	r4,r2
   284d8:	9006943a 	slli	r3,r18,16
   284dc:	9804d43a 	srli	r2,r19,16
   284e0:	1886b03a 	or	r3,r3,r2
   284e4:	1900032e 	bgeu	r3,r4,284f4 <__umoddi3+0x238>
   284e8:	1c07883a 	add	r3,r3,r16
   284ec:	1c000136 	bltu	r3,r16,284f4 <__umoddi3+0x238>
   284f0:	1900f336 	bltu	r3,r4,288c0 <__umoddi3+0x604>
   284f4:	1923c83a 	sub	r17,r3,r4
   284f8:	8809883a 	mov	r4,r17
   284fc:	a00b883a 	mov	r5,r20
   28500:	002974c0 	call	2974c <__umodsi3>
   28504:	102f883a 	mov	r23,r2
   28508:	8809883a 	mov	r4,r17
   2850c:	a00b883a 	mov	r5,r20
   28510:	b82e943a 	slli	r23,r23,16
   28514:	00297440 	call	29744 <__udivsi3>
   28518:	1009883a 	mov	r4,r2
   2851c:	b00b883a 	mov	r5,r22
   28520:	9cffffcc 	andi	r19,r19,65535
   28524:	00297540 	call	29754 <__mulsi3>
   28528:	bce6b03a 	or	r19,r23,r19
   2852c:	9880042e 	bgeu	r19,r2,28540 <__umoddi3+0x284>
   28530:	9c27883a 	add	r19,r19,r16
   28534:	9c000236 	bltu	r19,r16,28540 <__umoddi3+0x284>
   28538:	9880012e 	bgeu	r19,r2,28540 <__umoddi3+0x284>
   2853c:	9c27883a 	add	r19,r19,r16
   28540:	9885c83a 	sub	r2,r19,r2
   28544:	1544d83a 	srl	r2,r2,r21
   28548:	0007883a 	mov	r3,zero
   2854c:	00000206 	br	28558 <__umoddi3+0x29c>
   28550:	2005883a 	mov	r2,r4
   28554:	2807883a 	mov	r3,r5
   28558:	dfc00c17 	ldw	ra,48(sp)
   2855c:	df000b17 	ldw	fp,44(sp)
   28560:	ddc00a17 	ldw	r23,40(sp)
   28564:	dd800917 	ldw	r22,36(sp)
   28568:	dd400817 	ldw	r21,32(sp)
   2856c:	dd000717 	ldw	r20,28(sp)
   28570:	dcc00617 	ldw	r19,24(sp)
   28574:	dc800517 	ldw	r18,20(sp)
   28578:	dc400417 	ldw	r17,16(sp)
   2857c:	dc000317 	ldw	r16,12(sp)
   28580:	dec00d04 	addi	sp,sp,52
   28584:	f800283a 	ret
   28588:	00803fc4 	movi	r2,255
   2858c:	11c0b236 	bltu	r2,r7,28858 <__umoddi3+0x59c>
   28590:	0007883a 	mov	r3,zero
   28594:	0027883a 	mov	r19,zero
   28598:	003f9b06 	br	28408 <__umoddi3+0x14c>
   2859c:	00804034 	movhi	r2,256
   285a0:	10bfffc4 	addi	r2,r2,-1
   285a4:	1180b236 	bltu	r2,r6,28870 <__umoddi3+0x5b4>
   285a8:	00800404 	movi	r2,16
   285ac:	1009883a 	mov	r4,r2
   285b0:	003f5a06 	br	2831c <__umoddi3+0x60>
   285b4:	00803fc4 	movi	r2,255
   285b8:	1400b036 	bltu	r2,r16,2887c <__umoddi3+0x5c0>
   285bc:	0005883a 	mov	r2,zero
   285c0:	0007883a 	mov	r3,zero
   285c4:	003fad06 	br	2847c <__umoddi3+0x1c0>
   285c8:	34c4d83a 	srl	r2,r6,r19
   285cc:	3c0e983a 	sll	r7,r7,r16
   285d0:	8cf8d83a 	srl	fp,r17,r19
   285d4:	8c22983a 	sll	r17,r17,r16
   285d8:	38a8b03a 	or	r20,r7,r2
   285dc:	a02ad43a 	srli	r21,r20,16
   285e0:	94c4d83a 	srl	r2,r18,r19
   285e4:	e009883a 	mov	r4,fp
   285e8:	a80b883a 	mov	r5,r21
   285ec:	342c983a 	sll	r22,r6,r16
   285f0:	88a2b03a 	or	r17,r17,r2
   285f4:	002974c0 	call	2974c <__umodsi3>
   285f8:	e009883a 	mov	r4,fp
   285fc:	a80b883a 	mov	r5,r21
   28600:	a5ffffcc 	andi	r23,r20,65535
   28604:	d8800215 	stw	r2,8(sp)
   28608:	00297440 	call	29744 <__udivsi3>
   2860c:	1009883a 	mov	r4,r2
   28610:	b80b883a 	mov	r5,r23
   28614:	1039883a 	mov	fp,r2
   28618:	00297540 	call	29754 <__mulsi3>
   2861c:	d8c00217 	ldw	r3,8(sp)
   28620:	1009883a 	mov	r4,r2
   28624:	8804d43a 	srli	r2,r17,16
   28628:	1806943a 	slli	r3,r3,16
   2862c:	9424983a 	sll	r18,r18,r16
   28630:	1886b03a 	or	r3,r3,r2
   28634:	1900042e 	bgeu	r3,r4,28648 <__umoddi3+0x38c>
   28638:	1d07883a 	add	r3,r3,r20
   2863c:	e0bfffc4 	addi	r2,fp,-1
   28640:	1d009b2e 	bgeu	r3,r20,288b0 <__umoddi3+0x5f4>
   28644:	1039883a 	mov	fp,r2
   28648:	1907c83a 	sub	r3,r3,r4
   2864c:	1809883a 	mov	r4,r3
   28650:	a80b883a 	mov	r5,r21
   28654:	d8c00215 	stw	r3,8(sp)
   28658:	002974c0 	call	2974c <__umodsi3>
   2865c:	d8c00217 	ldw	r3,8(sp)
   28660:	a80b883a 	mov	r5,r21
   28664:	d8800015 	stw	r2,0(sp)
   28668:	1809883a 	mov	r4,r3
   2866c:	00297440 	call	29744 <__udivsi3>
   28670:	1009883a 	mov	r4,r2
   28674:	b80b883a 	mov	r5,r23
   28678:	102b883a 	mov	r21,r2
   2867c:	00297540 	call	29754 <__mulsi3>
   28680:	d9c00017 	ldw	r7,0(sp)
   28684:	8c7fffcc 	andi	r17,r17,65535
   28688:	380e943a 	slli	r7,r7,16
   2868c:	3c4eb03a 	or	r7,r7,r17
   28690:	3880042e 	bgeu	r7,r2,286a4 <__umoddi3+0x3e8>
   28694:	3d0f883a 	add	r7,r7,r20
   28698:	a8ffffc4 	addi	r3,r21,-1
   2869c:	3d00802e 	bgeu	r7,r20,288a0 <__umoddi3+0x5e4>
   286a0:	182b883a 	mov	r21,r3
   286a4:	e038943a 	slli	fp,fp,16
   286a8:	b010d43a 	srli	r8,r22,16
   286ac:	b1bfffcc 	andi	r6,r22,65535
   286b0:	af2ab03a 	or	r21,r21,fp
   286b4:	a82ed43a 	srli	r23,r21,16
   286b8:	ad7fffcc 	andi	r21,r21,65535
   286bc:	300b883a 	mov	r5,r6
   286c0:	a809883a 	mov	r4,r21
   286c4:	38a3c83a 	sub	r17,r7,r2
   286c8:	d9800115 	stw	r6,4(sp)
   286cc:	da000015 	stw	r8,0(sp)
   286d0:	00297540 	call	29754 <__mulsi3>
   286d4:	da000017 	ldw	r8,0(sp)
   286d8:	a809883a 	mov	r4,r21
   286dc:	1039883a 	mov	fp,r2
   286e0:	400b883a 	mov	r5,r8
   286e4:	da000215 	stw	r8,8(sp)
   286e8:	00297540 	call	29754 <__mulsi3>
   286ec:	d9800117 	ldw	r6,4(sp)
   286f0:	b809883a 	mov	r4,r23
   286f4:	d8800015 	stw	r2,0(sp)
   286f8:	300b883a 	mov	r5,r6
   286fc:	00297540 	call	29754 <__mulsi3>
   28700:	d8c00217 	ldw	r3,8(sp)
   28704:	b809883a 	mov	r4,r23
   28708:	102b883a 	mov	r21,r2
   2870c:	180b883a 	mov	r5,r3
   28710:	00297540 	call	29754 <__mulsi3>
   28714:	d9c00017 	ldw	r7,0(sp)
   28718:	1007883a 	mov	r3,r2
   2871c:	e004d43a 	srli	r2,fp,16
   28720:	a9c9883a 	add	r4,r21,r7
   28724:	2089883a 	add	r4,r4,r2
   28728:	2540022e 	bgeu	r4,r21,28734 <__umoddi3+0x478>
   2872c:	00800074 	movhi	r2,1
   28730:	1887883a 	add	r3,r3,r2
   28734:	2004d43a 	srli	r2,r4,16
   28738:	2008943a 	slli	r4,r4,16
   2873c:	e73fffcc 	andi	fp,fp,65535
   28740:	1887883a 	add	r3,r3,r2
   28744:	2709883a 	add	r4,r4,fp
   28748:	88c03d36 	bltu	r17,r3,28840 <__umoddi3+0x584>
   2874c:	88c06126 	beq	r17,r3,288d4 <__umoddi3+0x618>
   28750:	88c7c83a 	sub	r3,r17,r3
   28754:	202d883a 	mov	r22,r4
   28758:	95adc83a 	sub	r22,r18,r22
   2875c:	95a5803a 	cmpltu	r18,r18,r22
   28760:	1c87c83a 	sub	r3,r3,r18
   28764:	1cc4983a 	sll	r2,r3,r19
   28768:	b42cd83a 	srl	r22,r22,r16
   2876c:	1c06d83a 	srl	r3,r3,r16
   28770:	1584b03a 	or	r2,r2,r22
   28774:	003f7806 	br	28558 <__umoddi3+0x29c>
   28778:	002b883a 	mov	r21,zero
   2877c:	003ef506 	br	28354 <__umoddi3+0x98>
   28780:	8560983a 	sll	r16,r16,r21
   28784:	88e6d83a 	srl	r19,r17,r3
   28788:	90c6d83a 	srl	r3,r18,r3
   2878c:	8028d43a 	srli	r20,r16,16
   28790:	8d62983a 	sll	r17,r17,r21
   28794:	9809883a 	mov	r4,r19
   28798:	a00b883a 	mov	r5,r20
   2879c:	88eeb03a 	or	r23,r17,r3
   287a0:	002974c0 	call	2974c <__umodsi3>
   287a4:	9809883a 	mov	r4,r19
   287a8:	a00b883a 	mov	r5,r20
   287ac:	1023883a 	mov	r17,r2
   287b0:	85bfffcc 	andi	r22,r16,65535
   287b4:	00297440 	call	29744 <__udivsi3>
   287b8:	1009883a 	mov	r4,r2
   287bc:	b00b883a 	mov	r5,r22
   287c0:	00297540 	call	29754 <__mulsi3>
   287c4:	1007883a 	mov	r3,r2
   287c8:	8808943a 	slli	r4,r17,16
   287cc:	b804d43a 	srli	r2,r23,16
   287d0:	9566983a 	sll	r19,r18,r21
   287d4:	2088b03a 	or	r4,r4,r2
   287d8:	20c0042e 	bgeu	r4,r3,287ec <__umoddi3+0x530>
   287dc:	2409883a 	add	r4,r4,r16
   287e0:	24000236 	bltu	r4,r16,287ec <__umoddi3+0x530>
   287e4:	20c0012e 	bgeu	r4,r3,287ec <__umoddi3+0x530>
   287e8:	2409883a 	add	r4,r4,r16
   287ec:	20e5c83a 	sub	r18,r4,r3
   287f0:	9009883a 	mov	r4,r18
   287f4:	a00b883a 	mov	r5,r20
   287f8:	002974c0 	call	2974c <__umodsi3>
   287fc:	1023883a 	mov	r17,r2
   28800:	9009883a 	mov	r4,r18
   28804:	a00b883a 	mov	r5,r20
   28808:	8822943a 	slli	r17,r17,16
   2880c:	00297440 	call	29744 <__udivsi3>
   28810:	1009883a 	mov	r4,r2
   28814:	b00b883a 	mov	r5,r22
   28818:	bdffffcc 	andi	r23,r23,65535
   2881c:	00297540 	call	29754 <__mulsi3>
   28820:	8de2b03a 	or	r17,r17,r23
   28824:	8880042e 	bgeu	r17,r2,28838 <__umoddi3+0x57c>
   28828:	8c23883a 	add	r17,r17,r16
   2882c:	8c000236 	bltu	r17,r16,28838 <__umoddi3+0x57c>
   28830:	8880012e 	bgeu	r17,r2,28838 <__umoddi3+0x57c>
   28834:	8c23883a 	add	r17,r17,r16
   28838:	88a3c83a 	sub	r17,r17,r2
   2883c:	003f1b06 	br	284ac <__umoddi3+0x1f0>
   28840:	25adc83a 	sub	r22,r4,r22
   28844:	1d07c83a 	sub	r3,r3,r20
   28848:	2589803a 	cmpltu	r4,r4,r22
   2884c:	1907c83a 	sub	r3,r3,r4
   28850:	88c7c83a 	sub	r3,r17,r3
   28854:	003fc006 	br	28758 <__umoddi3+0x49c>
   28858:	00c00204 	movi	r3,8
   2885c:	1827883a 	mov	r19,r3
   28860:	003ee906 	br	28408 <__umoddi3+0x14c>
   28864:	00c00604 	movi	r3,24
   28868:	1827883a 	mov	r19,r3
   2886c:	003ee606 	br	28408 <__umoddi3+0x14c>
   28870:	00800604 	movi	r2,24
   28874:	1009883a 	mov	r4,r2
   28878:	003ea806 	br	2831c <__umoddi3+0x60>
   2887c:	00800204 	movi	r2,8
   28880:	1007883a 	mov	r3,r2
   28884:	003efd06 	br	2847c <__umoddi3+0x1c0>
   28888:	00800604 	movi	r2,24
   2888c:	1007883a 	mov	r3,r2
   28890:	003efa06 	br	2847c <__umoddi3+0x1c0>
   28894:	00800204 	movi	r2,8
   28898:	1009883a 	mov	r4,r2
   2889c:	003e9f06 	br	2831c <__umoddi3+0x60>
   288a0:	38bf7f2e 	bgeu	r7,r2,286a0 <__umoddi3+0x3e4>
   288a4:	ad7fff84 	addi	r21,r21,-2
   288a8:	3d0f883a 	add	r7,r7,r20
   288ac:	003f7d06 	br	286a4 <__umoddi3+0x3e8>
   288b0:	193f642e 	bgeu	r3,r4,28644 <__umoddi3+0x388>
   288b4:	e73fff84 	addi	fp,fp,-2
   288b8:	1d07883a 	add	r3,r3,r20
   288bc:	003f6206 	br	28648 <__umoddi3+0x38c>
   288c0:	1c07883a 	add	r3,r3,r16
   288c4:	003f0b06 	br	284f4 <__umoddi3+0x238>
   288c8:	9005883a 	mov	r2,r18
   288cc:	a007883a 	mov	r3,r20
   288d0:	003f2106 	br	28558 <__umoddi3+0x29c>
   288d4:	913fda36 	bltu	r18,r4,28840 <__umoddi3+0x584>
   288d8:	202d883a 	mov	r22,r4
   288dc:	0007883a 	mov	r3,zero
   288e0:	003f9d06 	br	28758 <__umoddi3+0x49c>

000288e4 <_fpadd_parts>:
   288e4:	2005883a 	mov	r2,r4
   288e8:	21000017 	ldw	r4,0(r4)
   288ec:	01c00044 	movi	r7,1
   288f0:	3900622e 	bgeu	r7,r4,28a7c <_fpadd_parts+0x198>
   288f4:	28c00017 	ldw	r3,0(r5)
   288f8:	38c05f2e 	bgeu	r7,r3,28a78 <_fpadd_parts+0x194>
   288fc:	01c00104 	movi	r7,4
   28900:	21c0c626 	beq	r4,r7,28c1c <_fpadd_parts+0x338>
   28904:	19c05c26 	beq	r3,r7,28a78 <_fpadd_parts+0x194>
   28908:	01c00084 	movi	r7,2
   2890c:	19c06b26 	beq	r3,r7,28abc <_fpadd_parts+0x1d8>
   28910:	21c05926 	beq	r4,r7,28a78 <_fpadd_parts+0x194>
   28914:	11c00217 	ldw	r7,8(r2)
   28918:	2ac00217 	ldw	r11,8(r5)
   2891c:	13000317 	ldw	r12,12(r2)
   28920:	13400417 	ldw	r13,16(r2)
   28924:	3ac9c83a 	sub	r4,r7,r11
   28928:	2a000317 	ldw	r8,12(r5)
   2892c:	2a400417 	ldw	r9,16(r5)
   28930:	2015883a 	mov	r10,r4
   28934:	20007516 	blt	r4,zero,28b0c <_fpadd_parts+0x228>
   28938:	00c00fc4 	movi	r3,63
   2893c:	1a805016 	blt	r3,r10,28a80 <_fpadd_parts+0x19c>
   28940:	0100870e 	bge	zero,r4,28b60 <_fpadd_parts+0x27c>
   28944:	50fff804 	addi	r3,r10,-32
   28948:	18009916 	blt	r3,zero,28bb0 <_fpadd_parts+0x2cc>
   2894c:	48d6d83a 	srl	r11,r9,r3
   28950:	001d883a 	mov	r14,zero
   28954:	18009e16 	blt	r3,zero,28bd0 <_fpadd_parts+0x2ec>
   28958:	01000044 	movi	r4,1
   2895c:	20c6983a 	sll	r3,r4,r3
   28960:	0015883a 	mov	r10,zero
   28964:	513fffc4 	addi	r4,r10,-1
   28968:	2295403a 	cmpgeu	r10,r4,r10
   2896c:	1a87c83a 	sub	r3,r3,r10
   28970:	1a52703a 	and	r9,r3,r9
   28974:	2210703a 	and	r8,r4,r8
   28978:	4250b03a 	or	r8,r8,r9
   2897c:	4010c03a 	cmpne	r8,r8,zero
   28980:	42d0b03a 	or	r8,r8,r11
   28984:	7013883a 	mov	r9,r14
   28988:	11000117 	ldw	r4,4(r2)
   2898c:	28800117 	ldw	r2,4(r5)
   28990:	20804126 	beq	r4,r2,28a98 <_fpadd_parts+0x1b4>
   28994:	20006326 	beq	r4,zero,28b24 <_fpadd_parts+0x240>
   28998:	4305c83a 	sub	r2,r8,r12
   2899c:	4091803a 	cmpltu	r8,r8,r2
   289a0:	4b47c83a 	sub	r3,r9,r13
   289a4:	1a07c83a 	sub	r3,r3,r8
   289a8:	18006316 	blt	r3,zero,28b38 <_fpadd_parts+0x254>
   289ac:	30000115 	stw	zero,4(r6)
   289b0:	31c00215 	stw	r7,8(r6)
   289b4:	30800315 	stw	r2,12(r6)
   289b8:	30c00415 	stw	r3,16(r6)
   289bc:	11ffffc4 	addi	r7,r2,-1
   289c0:	388b403a 	cmpgeu	r5,r7,r2
   289c4:	194bc83a 	sub	r5,r3,r5
   289c8:	01040034 	movhi	r4,4096
   289cc:	213fffc4 	addi	r4,r4,-1
   289d0:	21401736 	bltu	r4,r5,28a30 <_fpadd_parts+0x14c>
   289d4:	29008226 	beq	r5,r4,28be0 <_fpadd_parts+0x2fc>
   289d8:	31400217 	ldw	r5,8(r6)
   289dc:	02840034 	movhi	r10,4096
   289e0:	52bfffc4 	addi	r10,r10,-1
   289e4:	033fff84 	movi	r12,-2
   289e8:	297fffc4 	addi	r5,r5,-1
   289ec:	00000106 	br	289f4 <_fpadd_parts+0x110>
   289f0:	3a804a26 	beq	r7,r10,28b1c <_fpadd_parts+0x238>
   289f4:	1089883a 	add	r4,r2,r2
   289f8:	2091803a 	cmpltu	r8,r4,r2
   289fc:	18c7883a 	add	r3,r3,r3
   28a00:	227fffc4 	addi	r9,r4,-1
   28a04:	40d1883a 	add	r8,r8,r3
   28a08:	490f403a 	cmpgeu	r7,r9,r4
   28a0c:	41cfc83a 	sub	r7,r8,r7
   28a10:	2817883a 	mov	r11,r5
   28a14:	2005883a 	mov	r2,r4
   28a18:	4007883a 	mov	r3,r8
   28a1c:	297fffc4 	addi	r5,r5,-1
   28a20:	51fff32e 	bgeu	r10,r7,289f0 <_fpadd_parts+0x10c>
   28a24:	31000315 	stw	r4,12(r6)
   28a28:	32000415 	stw	r8,16(r6)
   28a2c:	32c00215 	stw	r11,8(r6)
   28a30:	010000c4 	movi	r4,3
   28a34:	31000015 	stw	r4,0(r6)
   28a38:	01080034 	movhi	r4,8192
   28a3c:	213fffc4 	addi	r4,r4,-1
   28a40:	20c00b2e 	bgeu	r4,r3,28a70 <_fpadd_parts+0x18c>
   28a44:	180e97fa 	slli	r7,r3,31
   28a48:	1008d07a 	srli	r4,r2,1
   28a4c:	31400217 	ldw	r5,8(r6)
   28a50:	1806d07a 	srli	r3,r3,1
   28a54:	1080004c 	andi	r2,r2,1
   28a58:	3908b03a 	or	r4,r7,r4
   28a5c:	1108b03a 	or	r4,r2,r4
   28a60:	29400044 	addi	r5,r5,1
   28a64:	31000315 	stw	r4,12(r6)
   28a68:	30c00415 	stw	r3,16(r6)
   28a6c:	31400215 	stw	r5,8(r6)
   28a70:	3005883a 	mov	r2,r6
   28a74:	f800283a 	ret
   28a78:	2805883a 	mov	r2,r5
   28a7c:	f800283a 	ret
   28a80:	59c01e0e 	bge	r11,r7,28afc <_fpadd_parts+0x218>
   28a84:	11000117 	ldw	r4,4(r2)
   28a88:	28800117 	ldw	r2,4(r5)
   28a8c:	0011883a 	mov	r8,zero
   28a90:	0013883a 	mov	r9,zero
   28a94:	20bfbf1e 	bne	r4,r2,28994 <_fpadd_parts+0xb0>
   28a98:	4305883a 	add	r2,r8,r12
   28a9c:	1207803a 	cmpltu	r3,r2,r8
   28aa0:	4b53883a 	add	r9,r9,r13
   28aa4:	1a47883a 	add	r3,r3,r9
   28aa8:	31000115 	stw	r4,4(r6)
   28aac:	31c00215 	stw	r7,8(r6)
   28ab0:	30800315 	stw	r2,12(r6)
   28ab4:	30c00415 	stw	r3,16(r6)
   28ab8:	003fdd06 	br	28a30 <_fpadd_parts+0x14c>
   28abc:	20ffef1e 	bne	r4,r3,28a7c <_fpadd_parts+0x198>
   28ac0:	31000015 	stw	r4,0(r6)
   28ac4:	10c00117 	ldw	r3,4(r2)
   28ac8:	30c00115 	stw	r3,4(r6)
   28acc:	10c00217 	ldw	r3,8(r2)
   28ad0:	11000117 	ldw	r4,4(r2)
   28ad4:	29400117 	ldw	r5,4(r5)
   28ad8:	30c00215 	stw	r3,8(r6)
   28adc:	10c00317 	ldw	r3,12(r2)
   28ae0:	2908703a 	and	r4,r5,r4
   28ae4:	30c00315 	stw	r3,12(r6)
   28ae8:	10c00417 	ldw	r3,16(r2)
   28aec:	31000115 	stw	r4,4(r6)
   28af0:	3005883a 	mov	r2,r6
   28af4:	30c00415 	stw	r3,16(r6)
   28af8:	f800283a 	ret
   28afc:	580f883a 	mov	r7,r11
   28b00:	0019883a 	mov	r12,zero
   28b04:	001b883a 	mov	r13,zero
   28b08:	003f9f06 	br	28988 <_fpadd_parts+0xa4>
   28b0c:	0115c83a 	sub	r10,zero,r4
   28b10:	00c00fc4 	movi	r3,63
   28b14:	1abfda16 	blt	r3,r10,28a80 <_fpadd_parts+0x19c>
   28b18:	003f8906 	br	28940 <_fpadd_parts+0x5c>
   28b1c:	627fb52e 	bgeu	r12,r9,289f4 <_fpadd_parts+0x110>
   28b20:	003fc006 	br	28a24 <_fpadd_parts+0x140>
   28b24:	6205c83a 	sub	r2,r12,r8
   28b28:	6099803a 	cmpltu	r12,r12,r2
   28b2c:	6a47c83a 	sub	r3,r13,r9
   28b30:	1b07c83a 	sub	r3,r3,r12
   28b34:	183f9d0e 	bge	r3,zero,289ac <_fpadd_parts+0xc8>
   28b38:	0085c83a 	sub	r2,zero,r2
   28b3c:	1008c03a 	cmpne	r4,r2,zero
   28b40:	00c7c83a 	sub	r3,zero,r3
   28b44:	1907c83a 	sub	r3,r3,r4
   28b48:	01000044 	movi	r4,1
   28b4c:	31000115 	stw	r4,4(r6)
   28b50:	31c00215 	stw	r7,8(r6)
   28b54:	30800315 	stw	r2,12(r6)
   28b58:	30c00415 	stw	r3,16(r6)
   28b5c:	003f9706 	br	289bc <_fpadd_parts+0xd8>
   28b60:	203f8926 	beq	r4,zero,28988 <_fpadd_parts+0xa4>
   28b64:	50fff804 	addi	r3,r10,-32
   28b68:	3a8f883a 	add	r7,r7,r10
   28b6c:	18002316 	blt	r3,zero,28bfc <_fpadd_parts+0x318>
   28b70:	68d6d83a 	srl	r11,r13,r3
   28b74:	001d883a 	mov	r14,zero
   28b78:	18001c16 	blt	r3,zero,28bec <_fpadd_parts+0x308>
   28b7c:	01000044 	movi	r4,1
   28b80:	20c6983a 	sll	r3,r4,r3
   28b84:	0015883a 	mov	r10,zero
   28b88:	513fffc4 	addi	r4,r10,-1
   28b8c:	2295403a 	cmpgeu	r10,r4,r10
   28b90:	1a87c83a 	sub	r3,r3,r10
   28b94:	1b5a703a 	and	r13,r3,r13
   28b98:	2318703a 	and	r12,r4,r12
   28b9c:	6358b03a 	or	r12,r12,r13
   28ba0:	6018c03a 	cmpne	r12,r12,zero
   28ba4:	62d8b03a 	or	r12,r12,r11
   28ba8:	701b883a 	mov	r13,r14
   28bac:	003f7606 	br	28988 <_fpadd_parts+0xa4>
   28bb0:	4808907a 	slli	r4,r9,1
   28bb4:	02c007c4 	movi	r11,31
   28bb8:	5a97c83a 	sub	r11,r11,r10
   28bbc:	22c8983a 	sll	r4,r4,r11
   28bc0:	4296d83a 	srl	r11,r8,r10
   28bc4:	4a9cd83a 	srl	r14,r9,r10
   28bc8:	22d6b03a 	or	r11,r4,r11
   28bcc:	003f6106 	br	28954 <_fpadd_parts+0x70>
   28bd0:	00c00044 	movi	r3,1
   28bd4:	1a94983a 	sll	r10,r3,r10
   28bd8:	0007883a 	mov	r3,zero
   28bdc:	003f6106 	br	28964 <_fpadd_parts+0x80>
   28be0:	013fff84 	movi	r4,-2
   28be4:	21ff7c2e 	bgeu	r4,r7,289d8 <_fpadd_parts+0xf4>
   28be8:	003f9106 	br	28a30 <_fpadd_parts+0x14c>
   28bec:	00c00044 	movi	r3,1
   28bf0:	1a94983a 	sll	r10,r3,r10
   28bf4:	0007883a 	mov	r3,zero
   28bf8:	003fe306 	br	28b88 <_fpadd_parts+0x2a4>
   28bfc:	6816907a 	slli	r11,r13,1
   28c00:	010007c4 	movi	r4,31
   28c04:	2289c83a 	sub	r4,r4,r10
   28c08:	5908983a 	sll	r4,r11,r4
   28c0c:	6296d83a 	srl	r11,r12,r10
   28c10:	6a9cd83a 	srl	r14,r13,r10
   28c14:	22d6b03a 	or	r11,r4,r11
   28c18:	003fd706 	br	28b78 <_fpadd_parts+0x294>
   28c1c:	193f971e 	bne	r3,r4,28a7c <_fpadd_parts+0x198>
   28c20:	11000117 	ldw	r4,4(r2)
   28c24:	28c00117 	ldw	r3,4(r5)
   28c28:	20ff9426 	beq	r4,r3,28a7c <_fpadd_parts+0x198>
   28c2c:	008001f4 	movhi	r2,7
   28c30:	10b29404 	addi	r2,r2,-13744
   28c34:	f800283a 	ret

00028c38 <__adddf3>:
   28c38:	deffec04 	addi	sp,sp,-80
   28c3c:	d9001115 	stw	r4,68(sp)
   28c40:	d9401215 	stw	r5,72(sp)
   28c44:	d9001104 	addi	r4,sp,68
   28c48:	d9400a04 	addi	r5,sp,40
   28c4c:	dfc01315 	stw	ra,76(sp)
   28c50:	d9c01015 	stw	r7,64(sp)
   28c54:	d9800f15 	stw	r6,60(sp)
   28c58:	0029b5c0 	call	29b5c <__unpack_d>
   28c5c:	d9000f04 	addi	r4,sp,60
   28c60:	d9400504 	addi	r5,sp,20
   28c64:	0029b5c0 	call	29b5c <__unpack_d>
   28c68:	d9000a04 	addi	r4,sp,40
   28c6c:	d9400504 	addi	r5,sp,20
   28c70:	d80d883a 	mov	r6,sp
   28c74:	00288e40 	call	288e4 <_fpadd_parts>
   28c78:	1009883a 	mov	r4,r2
   28c7c:	00299380 	call	29938 <__pack_d>
   28c80:	dfc01317 	ldw	ra,76(sp)
   28c84:	dec01404 	addi	sp,sp,80
   28c88:	f800283a 	ret

00028c8c <__subdf3>:
   28c8c:	deffec04 	addi	sp,sp,-80
   28c90:	d9001115 	stw	r4,68(sp)
   28c94:	d9401215 	stw	r5,72(sp)
   28c98:	d9001104 	addi	r4,sp,68
   28c9c:	d9400a04 	addi	r5,sp,40
   28ca0:	dfc01315 	stw	ra,76(sp)
   28ca4:	d9c01015 	stw	r7,64(sp)
   28ca8:	d9800f15 	stw	r6,60(sp)
   28cac:	0029b5c0 	call	29b5c <__unpack_d>
   28cb0:	d9000f04 	addi	r4,sp,60
   28cb4:	d9400504 	addi	r5,sp,20
   28cb8:	0029b5c0 	call	29b5c <__unpack_d>
   28cbc:	d8800617 	ldw	r2,24(sp)
   28cc0:	d9000a04 	addi	r4,sp,40
   28cc4:	d9400504 	addi	r5,sp,20
   28cc8:	d80d883a 	mov	r6,sp
   28ccc:	1080005c 	xori	r2,r2,1
   28cd0:	d8800615 	stw	r2,24(sp)
   28cd4:	00288e40 	call	288e4 <_fpadd_parts>
   28cd8:	1009883a 	mov	r4,r2
   28cdc:	00299380 	call	29938 <__pack_d>
   28ce0:	dfc01317 	ldw	ra,76(sp)
   28ce4:	dec01404 	addi	sp,sp,80
   28ce8:	f800283a 	ret

00028cec <__muldf3>:
   28cec:	deffe404 	addi	sp,sp,-112
   28cf0:	d9001115 	stw	r4,68(sp)
   28cf4:	d9401215 	stw	r5,72(sp)
   28cf8:	d9001104 	addi	r4,sp,68
   28cfc:	d9400a04 	addi	r5,sp,40
   28d00:	dfc01b15 	stw	ra,108(sp)
   28d04:	d9800f15 	stw	r6,60(sp)
   28d08:	d9c01015 	stw	r7,64(sp)
   28d0c:	ddc01a15 	stw	r23,104(sp)
   28d10:	dd801915 	stw	r22,100(sp)
   28d14:	dd401815 	stw	r21,96(sp)
   28d18:	dd001715 	stw	r20,92(sp)
   28d1c:	dcc01615 	stw	r19,88(sp)
   28d20:	dc801515 	stw	r18,84(sp)
   28d24:	dc401415 	stw	r17,80(sp)
   28d28:	dc001315 	stw	r16,76(sp)
   28d2c:	0029b5c0 	call	29b5c <__unpack_d>
   28d30:	d9000f04 	addi	r4,sp,60
   28d34:	d9400504 	addi	r5,sp,20
   28d38:	0029b5c0 	call	29b5c <__unpack_d>
   28d3c:	d8c00a17 	ldw	r3,40(sp)
   28d40:	00800044 	movi	r2,1
   28d44:	10c01136 	bltu	r2,r3,28d8c <__muldf3+0xa0>
   28d48:	d8c00b17 	ldw	r3,44(sp)
   28d4c:	d8800617 	ldw	r2,24(sp)
   28d50:	d9000a04 	addi	r4,sp,40
   28d54:	1884c03a 	cmpne	r2,r3,r2
   28d58:	d8800b15 	stw	r2,44(sp)
   28d5c:	00299380 	call	29938 <__pack_d>
   28d60:	dfc01b17 	ldw	ra,108(sp)
   28d64:	ddc01a17 	ldw	r23,104(sp)
   28d68:	dd801917 	ldw	r22,100(sp)
   28d6c:	dd401817 	ldw	r21,96(sp)
   28d70:	dd001717 	ldw	r20,92(sp)
   28d74:	dcc01617 	ldw	r19,88(sp)
   28d78:	dc801517 	ldw	r18,84(sp)
   28d7c:	dc401417 	ldw	r17,80(sp)
   28d80:	dc001317 	ldw	r16,76(sp)
   28d84:	dec01c04 	addi	sp,sp,112
   28d88:	f800283a 	ret
   28d8c:	d9000517 	ldw	r4,20(sp)
   28d90:	11000636 	bltu	r2,r4,28dac <__muldf3+0xc0>
   28d94:	d8800617 	ldw	r2,24(sp)
   28d98:	d8c00b17 	ldw	r3,44(sp)
   28d9c:	d9000504 	addi	r4,sp,20
   28da0:	1884c03a 	cmpne	r2,r3,r2
   28da4:	d8800615 	stw	r2,24(sp)
   28da8:	003fec06 	br	28d5c <__muldf3+0x70>
   28dac:	00800104 	movi	r2,4
   28db0:	1880051e 	bne	r3,r2,28dc8 <__muldf3+0xdc>
   28db4:	00800084 	movi	r2,2
   28db8:	20bfe31e 	bne	r4,r2,28d48 <__muldf3+0x5c>
   28dbc:	010001f4 	movhi	r4,7
   28dc0:	21329404 	addi	r4,r4,-13744
   28dc4:	003fe506 	br	28d5c <__muldf3+0x70>
   28dc8:	2080031e 	bne	r4,r2,28dd8 <__muldf3+0xec>
   28dcc:	00800084 	movi	r2,2
   28dd0:	18bffa26 	beq	r3,r2,28dbc <__muldf3+0xd0>
   28dd4:	003fef06 	br	28d94 <__muldf3+0xa8>
   28dd8:	00800084 	movi	r2,2
   28ddc:	18bfda26 	beq	r3,r2,28d48 <__muldf3+0x5c>
   28de0:	20bfec26 	beq	r4,r2,28d94 <__muldf3+0xa8>
   28de4:	dc000d17 	ldw	r16,52(sp)
   28de8:	dd000817 	ldw	r20,32(sp)
   28dec:	dc800917 	ldw	r18,36(sp)
   28df0:	8009883a 	mov	r4,r16
   28df4:	000b883a 	mov	r5,zero
   28df8:	a00d883a 	mov	r6,r20
   28dfc:	000f883a 	mov	r7,zero
   28e00:	002977c0 	call	2977c <__muldi3>
   28e04:	dc400e17 	ldw	r17,56(sp)
   28e08:	9009883a 	mov	r4,r18
   28e0c:	800d883a 	mov	r6,r16
   28e10:	000b883a 	mov	r5,zero
   28e14:	000f883a 	mov	r7,zero
   28e18:	102f883a 	mov	r23,r2
   28e1c:	1827883a 	mov	r19,r3
   28e20:	002977c0 	call	2977c <__muldi3>
   28e24:	900d883a 	mov	r6,r18
   28e28:	8809883a 	mov	r4,r17
   28e2c:	000b883a 	mov	r5,zero
   28e30:	000f883a 	mov	r7,zero
   28e34:	102b883a 	mov	r21,r2
   28e38:	1821883a 	mov	r16,r3
   28e3c:	002977c0 	call	2977c <__muldi3>
   28e40:	8809883a 	mov	r4,r17
   28e44:	000b883a 	mov	r5,zero
   28e48:	a00d883a 	mov	r6,r20
   28e4c:	000f883a 	mov	r7,zero
   28e50:	102d883a 	mov	r22,r2
   28e54:	1825883a 	mov	r18,r3
   28e58:	002977c0 	call	2977c <__muldi3>
   28e5c:	154b883a 	add	r5,r2,r21
   28e60:	2889803a 	cmpltu	r4,r5,r2
   28e64:	1c07883a 	add	r3,r3,r16
   28e68:	20c9883a 	add	r4,r4,r3
   28e6c:	24004b36 	bltu	r4,r16,28f9c <__muldf3+0x2b0>
   28e70:	8100011e 	bne	r16,r4,28e78 <__muldf3+0x18c>
   28e74:	2d404936 	bltu	r5,r21,28f9c <__muldf3+0x2b0>
   28e78:	0011883a 	mov	r8,zero
   28e7c:	0007883a 	mov	r3,zero
   28e80:	2ccb883a 	add	r5,r5,r19
   28e84:	b80d883a 	mov	r6,r23
   28e88:	2cc0012e 	bgeu	r5,r19,28e90 <__muldf3+0x1a4>
   28e8c:	02000044 	movi	r8,1
   28e90:	258f883a 	add	r7,r4,r22
   28e94:	3909803a 	cmpltu	r4,r7,r4
   28e98:	da400c17 	ldw	r9,48(sp)
   28e9c:	2489883a 	add	r4,r4,r18
   28ea0:	d8800717 	ldw	r2,28(sp)
   28ea4:	20c9883a 	add	r4,r4,r3
   28ea8:	da800b17 	ldw	r10,44(sp)
   28eac:	d8c00617 	ldw	r3,24(sp)
   28eb0:	3a11883a 	add	r8,r7,r8
   28eb4:	4885883a 	add	r2,r9,r2
   28eb8:	50c6c03a 	cmpne	r3,r10,r3
   28ebc:	41cf803a 	cmpltu	r7,r8,r7
   28ec0:	12400104 	addi	r9,r2,4
   28ec4:	d8c00115 	stw	r3,4(sp)
   28ec8:	3909883a 	add	r4,r7,r4
   28ecc:	da400215 	stw	r9,8(sp)
   28ed0:	03480034 	movhi	r13,8192
   28ed4:	6b7fffc4 	addi	r13,r13,-1
   28ed8:	4007883a 	mov	r3,r8
   28edc:	6900102e 	bgeu	r13,r4,28f20 <__muldf3+0x234>
   28ee0:	10800144 	addi	r2,r2,5
   28ee4:	180ed07a 	srli	r7,r3,1
   28ee8:	18c0004c 	andi	r3,r3,1
   28eec:	201097fa 	slli	r8,r4,31
   28ef0:	281697fa 	slli	r11,r5,31
   28ef4:	2008d07a 	srli	r4,r4,1
   28ef8:	3014d07a 	srli	r10,r6,1
   28efc:	2812d07a 	srli	r9,r5,1
   28f00:	1019883a 	mov	r12,r2
   28f04:	18000226 	beq	r3,zero,28f10 <__muldf3+0x224>
   28f08:	5a8cb03a 	or	r6,r11,r10
   28f0c:	49600034 	orhi	r5,r9,32768
   28f10:	41c6b03a 	or	r3,r8,r7
   28f14:	10800044 	addi	r2,r2,1
   28f18:	693ff236 	bltu	r13,r4,28ee4 <__muldf3+0x1f8>
   28f1c:	db000215 	stw	r12,8(sp)
   28f20:	03440034 	movhi	r13,4096
   28f24:	6b7fffc4 	addi	r13,r13,-1
   28f28:	69001336 	bltu	r13,r4,28f78 <__muldf3+0x28c>
   28f2c:	d8800217 	ldw	r2,8(sp)
   28f30:	10bfffc4 	addi	r2,r2,-1
   28f34:	18d3883a 	add	r9,r3,r3
   28f38:	48c7803a 	cmpltu	r3,r9,r3
   28f3c:	2109883a 	add	r4,r4,r4
   28f40:	190f883a 	add	r7,r3,r4
   28f44:	3191883a 	add	r8,r6,r6
   28f48:	4197803a 	cmpltu	r11,r8,r6
   28f4c:	2955883a 	add	r10,r5,r5
   28f50:	1019883a 	mov	r12,r2
   28f54:	4807883a 	mov	r3,r9
   28f58:	3809883a 	mov	r4,r7
   28f5c:	2800010e 	bge	r5,zero,28f64 <__muldf3+0x278>
   28f60:	48c00054 	ori	r3,r9,1
   28f64:	400d883a 	mov	r6,r8
   28f68:	5a8b883a 	add	r5,r11,r10
   28f6c:	10bfffc4 	addi	r2,r2,-1
   28f70:	69fff02e 	bgeu	r13,r7,28f34 <__muldf3+0x248>
   28f74:	db000215 	stw	r12,8(sp)
   28f78:	18803fcc 	andi	r2,r3,255
   28f7c:	01c02004 	movi	r7,128
   28f80:	11c00926 	beq	r2,r7,28fa8 <__muldf3+0x2bc>
   28f84:	008000c4 	movi	r2,3
   28f88:	d9000415 	stw	r4,16(sp)
   28f8c:	d8c00315 	stw	r3,12(sp)
   28f90:	d8800015 	stw	r2,0(sp)
   28f94:	d809883a 	mov	r4,sp
   28f98:	003f7006 	br	28d5c <__muldf3+0x70>
   28f9c:	0011883a 	mov	r8,zero
   28fa0:	00c00044 	movi	r3,1
   28fa4:	003fb606 	br	28e80 <__muldf3+0x194>
   28fa8:	19c0400c 	andi	r7,r3,256
   28fac:	383ff51e 	bne	r7,zero,28f84 <__muldf3+0x298>
   28fb0:	314ab03a 	or	r5,r6,r5
   28fb4:	283ff326 	beq	r5,zero,28f84 <__muldf3+0x298>
   28fb8:	1885883a 	add	r2,r3,r2
   28fbc:	10cb803a 	cmpltu	r5,r2,r3
   28fc0:	00ffc004 	movi	r3,-256
   28fc4:	10c6703a 	and	r3,r2,r3
   28fc8:	2909883a 	add	r4,r5,r4
   28fcc:	003fed06 	br	28f84 <__muldf3+0x298>

00028fd0 <__divdf3>:
   28fd0:	defff104 	addi	sp,sp,-60
   28fd4:	d9000c15 	stw	r4,48(sp)
   28fd8:	d9400d15 	stw	r5,52(sp)
   28fdc:	d9000c04 	addi	r4,sp,48
   28fe0:	d9400504 	addi	r5,sp,20
   28fe4:	dfc00e15 	stw	ra,56(sp)
   28fe8:	d9800a15 	stw	r6,40(sp)
   28fec:	d9c00b15 	stw	r7,44(sp)
   28ff0:	0029b5c0 	call	29b5c <__unpack_d>
   28ff4:	d9000a04 	addi	r4,sp,40
   28ff8:	d80b883a 	mov	r5,sp
   28ffc:	0029b5c0 	call	29b5c <__unpack_d>
   29000:	d8c00517 	ldw	r3,20(sp)
   29004:	00800044 	movi	r2,1
   29008:	10c00536 	bltu	r2,r3,29020 <__divdf3+0x50>
   2900c:	d9000504 	addi	r4,sp,20
   29010:	00299380 	call	29938 <__pack_d>
   29014:	dfc00e17 	ldw	ra,56(sp)
   29018:	dec00f04 	addi	sp,sp,60
   2901c:	f800283a 	ret
   29020:	d9000017 	ldw	r4,0(sp)
   29024:	11000536 	bltu	r2,r4,2903c <__divdf3+0x6c>
   29028:	d809883a 	mov	r4,sp
   2902c:	00299380 	call	29938 <__pack_d>
   29030:	dfc00e17 	ldw	ra,56(sp)
   29034:	dec00f04 	addi	sp,sp,60
   29038:	f800283a 	ret
   2903c:	d9800617 	ldw	r6,24(sp)
   29040:	d9400117 	ldw	r5,4(sp)
   29044:	00800104 	movi	r2,4
   29048:	314af03a 	xor	r5,r6,r5
   2904c:	d9400615 	stw	r5,24(sp)
   29050:	18800226 	beq	r3,r2,2905c <__divdf3+0x8c>
   29054:	01400084 	movi	r5,2
   29058:	1940041e 	bne	r3,r5,2906c <__divdf3+0x9c>
   2905c:	193feb1e 	bne	r3,r4,2900c <__divdf3+0x3c>
   29060:	010001f4 	movhi	r4,7
   29064:	21329404 	addi	r4,r4,-13744
   29068:	003fe906 	br	29010 <__divdf3+0x40>
   2906c:	20803326 	beq	r4,r2,2913c <__divdf3+0x16c>
   29070:	21403726 	beq	r4,r5,29150 <__divdf3+0x180>
   29074:	d8800217 	ldw	r2,8(sp)
   29078:	d9000717 	ldw	r4,28(sp)
   2907c:	d8c00917 	ldw	r3,36(sp)
   29080:	da000417 	ldw	r8,16(sp)
   29084:	2089c83a 	sub	r4,r4,r2
   29088:	d9000715 	stw	r4,28(sp)
   2908c:	d8800817 	ldw	r2,32(sp)
   29090:	dbc00317 	ldw	r15,12(sp)
   29094:	1a000236 	bltu	r3,r8,290a0 <__divdf3+0xd0>
   29098:	40c0081e 	bne	r8,r3,290bc <__divdf3+0xec>
   2909c:	13c0072e 	bgeu	r2,r15,290bc <__divdf3+0xec>
   290a0:	108b883a 	add	r5,r2,r2
   290a4:	288d803a 	cmpltu	r6,r5,r2
   290a8:	18c7883a 	add	r3,r3,r3
   290ac:	213fffc4 	addi	r4,r4,-1
   290b0:	2805883a 	mov	r2,r5
   290b4:	30c7883a 	add	r3,r6,r3
   290b8:	d9000715 	stw	r4,28(sp)
   290bc:	01400f44 	movi	r5,61
   290c0:	000f883a 	mov	r7,zero
   290c4:	01040034 	movhi	r4,4096
   290c8:	0019883a 	mov	r12,zero
   290cc:	001b883a 	mov	r13,zero
   290d0:	201697fa 	slli	r11,r4,31
   290d4:	3814d07a 	srli	r10,r7,1
   290d8:	297fffc4 	addi	r5,r5,-1
   290dc:	1a000936 	bltu	r3,r8,29104 <__divdf3+0x134>
   290e0:	13cdc83a 	sub	r6,r2,r15
   290e4:	1193803a 	cmpltu	r9,r2,r6
   290e8:	1a1dc83a 	sub	r14,r3,r8
   290ec:	40c0011e 	bne	r8,r3,290f4 <__divdf3+0x124>
   290f0:	13c00436 	bltu	r2,r15,29104 <__divdf3+0x134>
   290f4:	3005883a 	mov	r2,r6
   290f8:	7247c83a 	sub	r3,r14,r9
   290fc:	61d8b03a 	or	r12,r12,r7
   29100:	691ab03a 	or	r13,r13,r4
   29104:	108d883a 	add	r6,r2,r2
   29108:	3093803a 	cmpltu	r9,r6,r2
   2910c:	18c7883a 	add	r3,r3,r3
   29110:	5a8eb03a 	or	r7,r11,r10
   29114:	2008d07a 	srli	r4,r4,1
   29118:	3005883a 	mov	r2,r6
   2911c:	48c7883a 	add	r3,r9,r3
   29120:	283feb1e 	bne	r5,zero,290d0 <__divdf3+0x100>
   29124:	61003fcc 	andi	r4,r12,255
   29128:	01402004 	movi	r5,128
   2912c:	21400b26 	beq	r4,r5,2915c <__divdf3+0x18c>
   29130:	db000815 	stw	r12,32(sp)
   29134:	db400915 	stw	r13,36(sp)
   29138:	003fb406 	br	2900c <__divdf3+0x3c>
   2913c:	d8000815 	stw	zero,32(sp)
   29140:	d8000915 	stw	zero,36(sp)
   29144:	d8000715 	stw	zero,28(sp)
   29148:	d9000504 	addi	r4,sp,20
   2914c:	003fb006 	br	29010 <__divdf3+0x40>
   29150:	d8800515 	stw	r2,20(sp)
   29154:	d9000504 	addi	r4,sp,20
   29158:	003fad06 	br	29010 <__divdf3+0x40>
   2915c:	6140400c 	andi	r5,r12,256
   29160:	283ff31e 	bne	r5,zero,29130 <__divdf3+0x160>
   29164:	30c4b03a 	or	r2,r6,r3
   29168:	103ff126 	beq	r2,zero,29130 <__divdf3+0x160>
   2916c:	6109883a 	add	r4,r12,r4
   29170:	2305803a 	cmpltu	r2,r4,r12
   29174:	033fc004 	movi	r12,-256
   29178:	2318703a 	and	r12,r4,r12
   2917c:	135b883a 	add	r13,r2,r13
   29180:	003feb06 	br	29130 <__divdf3+0x160>

00029184 <__eqdf2>:
   29184:	defff104 	addi	sp,sp,-60
   29188:	d9000c15 	stw	r4,48(sp)
   2918c:	d9400d15 	stw	r5,52(sp)
   29190:	d9000c04 	addi	r4,sp,48
   29194:	d9400504 	addi	r5,sp,20
   29198:	dfc00e15 	stw	ra,56(sp)
   2919c:	d9800a15 	stw	r6,40(sp)
   291a0:	d9c00b15 	stw	r7,44(sp)
   291a4:	0029b5c0 	call	29b5c <__unpack_d>
   291a8:	d9000a04 	addi	r4,sp,40
   291ac:	d80b883a 	mov	r5,sp
   291b0:	0029b5c0 	call	29b5c <__unpack_d>
   291b4:	d8c00517 	ldw	r3,20(sp)
   291b8:	00800044 	movi	r2,1
   291bc:	10c0052e 	bgeu	r2,r3,291d4 <__eqdf2+0x50>
   291c0:	d8c00017 	ldw	r3,0(sp)
   291c4:	10c0032e 	bgeu	r2,r3,291d4 <__eqdf2+0x50>
   291c8:	d9000504 	addi	r4,sp,20
   291cc:	d80b883a 	mov	r5,sp
   291d0:	0029c600 	call	29c60 <__fpcmp_parts_d>
   291d4:	dfc00e17 	ldw	ra,56(sp)
   291d8:	dec00f04 	addi	sp,sp,60
   291dc:	f800283a 	ret

000291e0 <__nedf2>:
   291e0:	defff104 	addi	sp,sp,-60
   291e4:	d9000c15 	stw	r4,48(sp)
   291e8:	d9400d15 	stw	r5,52(sp)
   291ec:	d9000c04 	addi	r4,sp,48
   291f0:	d9400504 	addi	r5,sp,20
   291f4:	dfc00e15 	stw	ra,56(sp)
   291f8:	d9800a15 	stw	r6,40(sp)
   291fc:	d9c00b15 	stw	r7,44(sp)
   29200:	0029b5c0 	call	29b5c <__unpack_d>
   29204:	d9000a04 	addi	r4,sp,40
   29208:	d80b883a 	mov	r5,sp
   2920c:	0029b5c0 	call	29b5c <__unpack_d>
   29210:	d8c00517 	ldw	r3,20(sp)
   29214:	00800044 	movi	r2,1
   29218:	10c0052e 	bgeu	r2,r3,29230 <__nedf2+0x50>
   2921c:	d8c00017 	ldw	r3,0(sp)
   29220:	10c0032e 	bgeu	r2,r3,29230 <__nedf2+0x50>
   29224:	d9000504 	addi	r4,sp,20
   29228:	d80b883a 	mov	r5,sp
   2922c:	0029c600 	call	29c60 <__fpcmp_parts_d>
   29230:	dfc00e17 	ldw	ra,56(sp)
   29234:	dec00f04 	addi	sp,sp,60
   29238:	f800283a 	ret

0002923c <__gtdf2>:
   2923c:	defff104 	addi	sp,sp,-60
   29240:	d9000c15 	stw	r4,48(sp)
   29244:	d9400d15 	stw	r5,52(sp)
   29248:	d9000c04 	addi	r4,sp,48
   2924c:	d9400504 	addi	r5,sp,20
   29250:	dfc00e15 	stw	ra,56(sp)
   29254:	d9800a15 	stw	r6,40(sp)
   29258:	d9c00b15 	stw	r7,44(sp)
   2925c:	0029b5c0 	call	29b5c <__unpack_d>
   29260:	d9000a04 	addi	r4,sp,40
   29264:	d80b883a 	mov	r5,sp
   29268:	0029b5c0 	call	29b5c <__unpack_d>
   2926c:	d8c00517 	ldw	r3,20(sp)
   29270:	00800044 	movi	r2,1
   29274:	10c0082e 	bgeu	r2,r3,29298 <__gtdf2+0x5c>
   29278:	d8c00017 	ldw	r3,0(sp)
   2927c:	10c0062e 	bgeu	r2,r3,29298 <__gtdf2+0x5c>
   29280:	d9000504 	addi	r4,sp,20
   29284:	d80b883a 	mov	r5,sp
   29288:	0029c600 	call	29c60 <__fpcmp_parts_d>
   2928c:	dfc00e17 	ldw	ra,56(sp)
   29290:	dec00f04 	addi	sp,sp,60
   29294:	f800283a 	ret
   29298:	00bfffc4 	movi	r2,-1
   2929c:	003ffb06 	br	2928c <__gtdf2+0x50>

000292a0 <__gedf2>:
   292a0:	defff104 	addi	sp,sp,-60
   292a4:	d9000c15 	stw	r4,48(sp)
   292a8:	d9400d15 	stw	r5,52(sp)
   292ac:	d9000c04 	addi	r4,sp,48
   292b0:	d9400504 	addi	r5,sp,20
   292b4:	dfc00e15 	stw	ra,56(sp)
   292b8:	d9800a15 	stw	r6,40(sp)
   292bc:	d9c00b15 	stw	r7,44(sp)
   292c0:	0029b5c0 	call	29b5c <__unpack_d>
   292c4:	d9000a04 	addi	r4,sp,40
   292c8:	d80b883a 	mov	r5,sp
   292cc:	0029b5c0 	call	29b5c <__unpack_d>
   292d0:	d8c00517 	ldw	r3,20(sp)
   292d4:	00800044 	movi	r2,1
   292d8:	10c0082e 	bgeu	r2,r3,292fc <__gedf2+0x5c>
   292dc:	d8c00017 	ldw	r3,0(sp)
   292e0:	10c0062e 	bgeu	r2,r3,292fc <__gedf2+0x5c>
   292e4:	d9000504 	addi	r4,sp,20
   292e8:	d80b883a 	mov	r5,sp
   292ec:	0029c600 	call	29c60 <__fpcmp_parts_d>
   292f0:	dfc00e17 	ldw	ra,56(sp)
   292f4:	dec00f04 	addi	sp,sp,60
   292f8:	f800283a 	ret
   292fc:	00bfffc4 	movi	r2,-1
   29300:	003ffb06 	br	292f0 <__gedf2+0x50>

00029304 <__ltdf2>:
   29304:	defff104 	addi	sp,sp,-60
   29308:	d9000c15 	stw	r4,48(sp)
   2930c:	d9400d15 	stw	r5,52(sp)
   29310:	d9000c04 	addi	r4,sp,48
   29314:	d9400504 	addi	r5,sp,20
   29318:	dfc00e15 	stw	ra,56(sp)
   2931c:	d9800a15 	stw	r6,40(sp)
   29320:	d9c00b15 	stw	r7,44(sp)
   29324:	0029b5c0 	call	29b5c <__unpack_d>
   29328:	d9000a04 	addi	r4,sp,40
   2932c:	d80b883a 	mov	r5,sp
   29330:	0029b5c0 	call	29b5c <__unpack_d>
   29334:	d8c00517 	ldw	r3,20(sp)
   29338:	00800044 	movi	r2,1
   2933c:	10c0052e 	bgeu	r2,r3,29354 <__ltdf2+0x50>
   29340:	d8c00017 	ldw	r3,0(sp)
   29344:	10c0032e 	bgeu	r2,r3,29354 <__ltdf2+0x50>
   29348:	d9000504 	addi	r4,sp,20
   2934c:	d80b883a 	mov	r5,sp
   29350:	0029c600 	call	29c60 <__fpcmp_parts_d>
   29354:	dfc00e17 	ldw	ra,56(sp)
   29358:	dec00f04 	addi	sp,sp,60
   2935c:	f800283a 	ret

00029360 <__floatsidf>:
   29360:	2004d7fa 	srli	r2,r4,31
   29364:	defff904 	addi	sp,sp,-28
   29368:	00c000c4 	movi	r3,3
   2936c:	dfc00615 	stw	ra,24(sp)
   29370:	dc000515 	stw	r16,20(sp)
   29374:	d8c00015 	stw	r3,0(sp)
   29378:	d8800115 	stw	r2,4(sp)
   2937c:	2000081e 	bne	r4,zero,293a0 <__floatsidf+0x40>
   29380:	00800084 	movi	r2,2
   29384:	d8800015 	stw	r2,0(sp)
   29388:	d809883a 	mov	r4,sp
   2938c:	00299380 	call	29938 <__pack_d>
   29390:	dfc00617 	ldw	ra,24(sp)
   29394:	dc000517 	ldw	r16,20(sp)
   29398:	dec00704 	addi	sp,sp,28
   2939c:	f800283a 	ret
   293a0:	00c00f04 	movi	r3,60
   293a4:	d8c00215 	stw	r3,8(sp)
   293a8:	10000f1e 	bne	r2,zero,293e8 <__floatsidf+0x88>
   293ac:	2021883a 	mov	r16,r4
   293b0:	8009883a 	mov	r4,r16
   293b4:	002988c0 	call	2988c <__clzsi2>
   293b8:	11000744 	addi	r4,r2,29
   293bc:	0100110e 	bge	zero,r4,29404 <__floatsidf+0xa4>
   293c0:	10ffff44 	addi	r3,r2,-3
   293c4:	18001216 	blt	r3,zero,29410 <__floatsidf+0xb0>
   293c8:	80c6983a 	sll	r3,r16,r3
   293cc:	0009883a 	mov	r4,zero
   293d0:	014007c4 	movi	r5,31
   293d4:	2885c83a 	sub	r2,r5,r2
   293d8:	d9000315 	stw	r4,12(sp)
   293dc:	d8c00415 	stw	r3,16(sp)
   293e0:	d8800215 	stw	r2,8(sp)
   293e4:	003fe806 	br	29388 <__floatsidf+0x28>
   293e8:	00a00034 	movhi	r2,32768
   293ec:	20800e26 	beq	r4,r2,29428 <__floatsidf+0xc8>
   293f0:	0121c83a 	sub	r16,zero,r4
   293f4:	8009883a 	mov	r4,r16
   293f8:	002988c0 	call	2988c <__clzsi2>
   293fc:	11000744 	addi	r4,r2,29
   29400:	013fef16 	blt	zero,r4,293c0 <__floatsidf+0x60>
   29404:	dc000315 	stw	r16,12(sp)
   29408:	d8000415 	stw	zero,16(sp)
   2940c:	003fde06 	br	29388 <__floatsidf+0x28>
   29410:	800ad07a 	srli	r5,r16,1
   29414:	00c007c4 	movi	r3,31
   29418:	1907c83a 	sub	r3,r3,r4
   2941c:	28c6d83a 	srl	r3,r5,r3
   29420:	8108983a 	sll	r4,r16,r4
   29424:	003fea06 	br	293d0 <__floatsidf+0x70>
   29428:	0005883a 	mov	r2,zero
   2942c:	00f07834 	movhi	r3,49632
   29430:	003fd706 	br	29390 <__floatsidf+0x30>

00029434 <__fixdfsi>:
   29434:	defff804 	addi	sp,sp,-32
   29438:	d9000515 	stw	r4,20(sp)
   2943c:	d9400615 	stw	r5,24(sp)
   29440:	d9000504 	addi	r4,sp,20
   29444:	d80b883a 	mov	r5,sp
   29448:	dfc00715 	stw	ra,28(sp)
   2944c:	0029b5c0 	call	29b5c <__unpack_d>
   29450:	d8800017 	ldw	r2,0(sp)
   29454:	00c00084 	movi	r3,2
   29458:	10c01c26 	beq	r2,r3,294cc <__fixdfsi+0x98>
   2945c:	00c00044 	movi	r3,1
   29460:	18801a2e 	bgeu	r3,r2,294cc <__fixdfsi+0x98>
   29464:	00c00104 	movi	r3,4
   29468:	10c01126 	beq	r2,r3,294b0 <__fixdfsi+0x7c>
   2946c:	d8800217 	ldw	r2,8(sp)
   29470:	10001616 	blt	r2,zero,294cc <__fixdfsi+0x98>
   29474:	00c00784 	movi	r3,30
   29478:	18800d16 	blt	r3,r2,294b0 <__fixdfsi+0x7c>
   2947c:	00c00f04 	movi	r3,60
   29480:	1885c83a 	sub	r2,r3,r2
   29484:	10fff804 	addi	r3,r2,-32
   29488:	d9400317 	ldw	r5,12(sp)
   2948c:	d9000417 	ldw	r4,16(sp)
   29490:	18001616 	blt	r3,zero,294ec <__fixdfsi+0xb8>
   29494:	20c4d83a 	srl	r2,r4,r3
   29498:	d8c00117 	ldw	r3,4(sp)
   2949c:	18000126 	beq	r3,zero,294a4 <__fixdfsi+0x70>
   294a0:	0085c83a 	sub	r2,zero,r2
   294a4:	dfc00717 	ldw	ra,28(sp)
   294a8:	dec00804 	addi	sp,sp,32
   294ac:	f800283a 	ret
   294b0:	d8800117 	ldw	r2,4(sp)
   294b4:	1000091e 	bne	r2,zero,294dc <__fixdfsi+0xa8>
   294b8:	00a00034 	movhi	r2,32768
   294bc:	10bfffc4 	addi	r2,r2,-1
   294c0:	dfc00717 	ldw	ra,28(sp)
   294c4:	dec00804 	addi	sp,sp,32
   294c8:	f800283a 	ret
   294cc:	0005883a 	mov	r2,zero
   294d0:	dfc00717 	ldw	ra,28(sp)
   294d4:	dec00804 	addi	sp,sp,32
   294d8:	f800283a 	ret
   294dc:	00a00034 	movhi	r2,32768
   294e0:	dfc00717 	ldw	ra,28(sp)
   294e4:	dec00804 	addi	sp,sp,32
   294e8:	f800283a 	ret
   294ec:	2008907a 	slli	r4,r4,1
   294f0:	018007c4 	movi	r6,31
   294f4:	308dc83a 	sub	r6,r6,r2
   294f8:	2188983a 	sll	r4,r4,r6
   294fc:	2884d83a 	srl	r2,r5,r2
   29500:	2084b03a 	or	r2,r4,r2
   29504:	003fe406 	br	29498 <__fixdfsi+0x64>

00029508 <__floatunsidf>:
   29508:	defff904 	addi	sp,sp,-28
   2950c:	dc000515 	stw	r16,20(sp)
   29510:	dfc00615 	stw	ra,24(sp)
   29514:	d8000115 	stw	zero,4(sp)
   29518:	2021883a 	mov	r16,r4
   2951c:	20001726 	beq	r4,zero,2957c <__floatunsidf+0x74>
   29520:	008000c4 	movi	r2,3
   29524:	d8800015 	stw	r2,0(sp)
   29528:	00800f04 	movi	r2,60
   2952c:	d8800215 	stw	r2,8(sp)
   29530:	002988c0 	call	2988c <__clzsi2>
   29534:	10c00744 	addi	r3,r2,29
   29538:	18001816 	blt	r3,zero,2959c <__floatunsidf+0x94>
   2953c:	18002d26 	beq	r3,zero,295f4 <__floatunsidf+0xec>
   29540:	113fff44 	addi	r4,r2,-3
   29544:	20002e16 	blt	r4,zero,29600 <__floatunsidf+0xf8>
   29548:	8108983a 	sll	r4,r16,r4
   2954c:	0021883a 	mov	r16,zero
   29550:	014007c4 	movi	r5,31
   29554:	2885c83a 	sub	r2,r5,r2
   29558:	dc000315 	stw	r16,12(sp)
   2955c:	d9000415 	stw	r4,16(sp)
   29560:	d8800215 	stw	r2,8(sp)
   29564:	d809883a 	mov	r4,sp
   29568:	00299380 	call	29938 <__pack_d>
   2956c:	dfc00617 	ldw	ra,24(sp)
   29570:	dc000517 	ldw	r16,20(sp)
   29574:	dec00704 	addi	sp,sp,28
   29578:	f800283a 	ret
   2957c:	00800084 	movi	r2,2
   29580:	d809883a 	mov	r4,sp
   29584:	d8800015 	stw	r2,0(sp)
   29588:	00299380 	call	29938 <__pack_d>
   2958c:	dfc00617 	ldw	ra,24(sp)
   29590:	dc000517 	ldw	r16,20(sp)
   29594:	dec00704 	addi	sp,sp,28
   29598:	f800283a 	ret
   2959c:	00c7c83a 	sub	r3,zero,r3
   295a0:	193ff804 	addi	r4,r3,-32
   295a4:	20001c16 	blt	r4,zero,29618 <__floatunsidf+0x110>
   295a8:	000b883a 	mov	r5,zero
   295ac:	2009d7fa 	srai	r4,r4,31
   295b0:	80c6d83a 	srl	r3,r16,r3
   295b4:	297fffc4 	addi	r5,r5,-1
   295b8:	2c20703a 	and	r16,r5,r16
   295bc:	8020c03a 	cmpne	r16,r16,zero
   295c0:	1906703a 	and	r3,r3,r4
   295c4:	010007c4 	movi	r4,31
   295c8:	80c6b03a 	or	r3,r16,r3
   295cc:	2085c83a 	sub	r2,r4,r2
   295d0:	d809883a 	mov	r4,sp
   295d4:	d8c00315 	stw	r3,12(sp)
   295d8:	d8000415 	stw	zero,16(sp)
   295dc:	d8800215 	stw	r2,8(sp)
   295e0:	00299380 	call	29938 <__pack_d>
   295e4:	dfc00617 	ldw	ra,24(sp)
   295e8:	dc000517 	ldw	r16,20(sp)
   295ec:	dec00704 	addi	sp,sp,28
   295f0:	f800283a 	ret
   295f4:	dc000315 	stw	r16,12(sp)
   295f8:	d8000415 	stw	zero,16(sp)
   295fc:	003fd906 	br	29564 <__floatunsidf+0x5c>
   29600:	800ad07a 	srli	r5,r16,1
   29604:	010007c4 	movi	r4,31
   29608:	20c9c83a 	sub	r4,r4,r3
   2960c:	2908d83a 	srl	r4,r5,r4
   29610:	80e0983a 	sll	r16,r16,r3
   29614:	003fce06 	br	29550 <__floatunsidf+0x48>
   29618:	01400044 	movi	r5,1
   2961c:	28ca983a 	sll	r5,r5,r3
   29620:	003fe206 	br	295ac <__floatunsidf+0xa4>

00029624 <udivmodsi4>:
   29624:	2005883a 	mov	r2,r4
   29628:	2900182e 	bgeu	r5,r4,2968c <udivmodsi4+0x68>
   2962c:	28001716 	blt	r5,zero,2968c <udivmodsi4+0x68>
   29630:	01000804 	movi	r4,32
   29634:	00c00044 	movi	r3,1
   29638:	00000206 	br	29644 <udivmodsi4+0x20>
   2963c:	20001126 	beq	r4,zero,29684 <udivmodsi4+0x60>
   29640:	28000516 	blt	r5,zero,29658 <udivmodsi4+0x34>
   29644:	294b883a 	add	r5,r5,r5
   29648:	213fffc4 	addi	r4,r4,-1
   2964c:	18c7883a 	add	r3,r3,r3
   29650:	28bffa36 	bltu	r5,r2,2963c <udivmodsi4+0x18>
   29654:	18000b26 	beq	r3,zero,29684 <udivmodsi4+0x60>
   29658:	0009883a 	mov	r4,zero
   2965c:	11400236 	bltu	r2,r5,29668 <udivmodsi4+0x44>
   29660:	1145c83a 	sub	r2,r2,r5
   29664:	20c8b03a 	or	r4,r4,r3
   29668:	1806d07a 	srli	r3,r3,1
   2966c:	280ad07a 	srli	r5,r5,1
   29670:	183ffa1e 	bne	r3,zero,2965c <udivmodsi4+0x38>
   29674:	3000021e 	bne	r6,zero,29680 <udivmodsi4+0x5c>
   29678:	2005883a 	mov	r2,r4
   2967c:	f800283a 	ret
   29680:	f800283a 	ret
   29684:	0009883a 	mov	r4,zero
   29688:	003ffa06 	br	29674 <udivmodsi4+0x50>
   2968c:	00c00044 	movi	r3,1
   29690:	0009883a 	mov	r4,zero
   29694:	003ff106 	br	2965c <udivmodsi4+0x38>

00029698 <__divsi3>:
   29698:	defffe04 	addi	sp,sp,-8
   2969c:	dfc00115 	stw	ra,4(sp)
   296a0:	dc000015 	stw	r16,0(sp)
   296a4:	20000a16 	blt	r4,zero,296d0 <__divsi3+0x38>
   296a8:	0021883a 	mov	r16,zero
   296ac:	28000b16 	blt	r5,zero,296dc <__divsi3+0x44>
   296b0:	000d883a 	mov	r6,zero
   296b4:	00296240 	call	29624 <udivmodsi4>
   296b8:	80000126 	beq	r16,zero,296c0 <__divsi3+0x28>
   296bc:	0085c83a 	sub	r2,zero,r2
   296c0:	dfc00117 	ldw	ra,4(sp)
   296c4:	dc000017 	ldw	r16,0(sp)
   296c8:	dec00204 	addi	sp,sp,8
   296cc:	f800283a 	ret
   296d0:	0109c83a 	sub	r4,zero,r4
   296d4:	04000044 	movi	r16,1
   296d8:	283ff50e 	bge	r5,zero,296b0 <__divsi3+0x18>
   296dc:	014bc83a 	sub	r5,zero,r5
   296e0:	8400005c 	xori	r16,r16,1
   296e4:	003ff206 	br	296b0 <__divsi3+0x18>

000296e8 <__modsi3>:
   296e8:	deffff04 	addi	sp,sp,-4
   296ec:	dfc00015 	stw	ra,0(sp)
   296f0:	20000516 	blt	r4,zero,29708 <__modsi3+0x20>
   296f4:	28000c16 	blt	r5,zero,29728 <__modsi3+0x40>
   296f8:	01800044 	movi	r6,1
   296fc:	dfc00017 	ldw	ra,0(sp)
   29700:	dec00104 	addi	sp,sp,4
   29704:	00296241 	jmpi	29624 <udivmodsi4>
   29708:	0109c83a 	sub	r4,zero,r4
   2970c:	28000b16 	blt	r5,zero,2973c <__modsi3+0x54>
   29710:	01800044 	movi	r6,1
   29714:	00296240 	call	29624 <udivmodsi4>
   29718:	0085c83a 	sub	r2,zero,r2
   2971c:	dfc00017 	ldw	ra,0(sp)
   29720:	dec00104 	addi	sp,sp,4
   29724:	f800283a 	ret
   29728:	014bc83a 	sub	r5,zero,r5
   2972c:	01800044 	movi	r6,1
   29730:	dfc00017 	ldw	ra,0(sp)
   29734:	dec00104 	addi	sp,sp,4
   29738:	00296241 	jmpi	29624 <udivmodsi4>
   2973c:	014bc83a 	sub	r5,zero,r5
   29740:	003ff306 	br	29710 <__modsi3+0x28>

00029744 <__udivsi3>:
   29744:	000d883a 	mov	r6,zero
   29748:	00296241 	jmpi	29624 <udivmodsi4>

0002974c <__umodsi3>:
   2974c:	01800044 	movi	r6,1
   29750:	00296241 	jmpi	29624 <udivmodsi4>

00029754 <__mulsi3>:
   29754:	0005883a 	mov	r2,zero
   29758:	20000726 	beq	r4,zero,29778 <__mulsi3+0x24>
   2975c:	20c0004c 	andi	r3,r4,1
   29760:	2008d07a 	srli	r4,r4,1
   29764:	18000126 	beq	r3,zero,2976c <__mulsi3+0x18>
   29768:	1145883a 	add	r2,r2,r5
   2976c:	294b883a 	add	r5,r5,r5
   29770:	203ffa1e 	bne	r4,zero,2975c <__mulsi3+0x8>
   29774:	f800283a 	ret
   29778:	f800283a 	ret

0002977c <__muldi3>:
   2977c:	defff604 	addi	sp,sp,-40
   29780:	dd400515 	stw	r21,20(sp)
   29784:	dd000415 	stw	r20,16(sp)
   29788:	257fffcc 	andi	r21,r4,65535
   2978c:	353fffcc 	andi	r20,r6,65535
   29790:	dcc00315 	stw	r19,12(sp)
   29794:	3026d43a 	srli	r19,r6,16
   29798:	dd800615 	stw	r22,24(sp)
   2979c:	dc800215 	stw	r18,8(sp)
   297a0:	dc400115 	stw	r17,4(sp)
   297a4:	2024d43a 	srli	r18,r4,16
   297a8:	2023883a 	mov	r17,r4
   297ac:	282d883a 	mov	r22,r5
   297b0:	a009883a 	mov	r4,r20
   297b4:	a80b883a 	mov	r5,r21
   297b8:	dfc00915 	stw	ra,36(sp)
   297bc:	df000815 	stw	fp,32(sp)
   297c0:	ddc00715 	stw	r23,28(sp)
   297c4:	3839883a 	mov	fp,r7
   297c8:	dc000015 	stw	r16,0(sp)
   297cc:	3021883a 	mov	r16,r6
   297d0:	00297540 	call	29754 <__mulsi3>
   297d4:	a80b883a 	mov	r5,r21
   297d8:	9809883a 	mov	r4,r19
   297dc:	102f883a 	mov	r23,r2
   297e0:	00297540 	call	29754 <__mulsi3>
   297e4:	a009883a 	mov	r4,r20
   297e8:	900b883a 	mov	r5,r18
   297ec:	102b883a 	mov	r21,r2
   297f0:	00297540 	call	29754 <__mulsi3>
   297f4:	9809883a 	mov	r4,r19
   297f8:	900b883a 	mov	r5,r18
   297fc:	1029883a 	mov	r20,r2
   29800:	00297540 	call	29754 <__mulsi3>
   29804:	1007883a 	mov	r3,r2
   29808:	b804d43a 	srli	r2,r23,16
   2980c:	a549883a 	add	r4,r20,r21
   29810:	2089883a 	add	r4,r4,r2
   29814:	2500022e 	bgeu	r4,r20,29820 <__muldi3+0xa4>
   29818:	00800074 	movhi	r2,1
   2981c:	1887883a 	add	r3,r3,r2
   29820:	200cd43a 	srli	r6,r4,16
   29824:	2004943a 	slli	r2,r4,16
   29828:	e00b883a 	mov	r5,fp
   2982c:	8809883a 	mov	r4,r17
   29830:	bdffffcc 	andi	r23,r23,65535
   29834:	19a3883a 	add	r17,r3,r6
   29838:	15ef883a 	add	r23,r2,r23
   2983c:	00297540 	call	29754 <__mulsi3>
   29840:	8009883a 	mov	r4,r16
   29844:	b00b883a 	mov	r5,r22
   29848:	1025883a 	mov	r18,r2
   2984c:	00297540 	call	29754 <__mulsi3>
   29850:	9085883a 	add	r2,r18,r2
   29854:	1447883a 	add	r3,r2,r17
   29858:	b805883a 	mov	r2,r23
   2985c:	dfc00917 	ldw	ra,36(sp)
   29860:	df000817 	ldw	fp,32(sp)
   29864:	ddc00717 	ldw	r23,28(sp)
   29868:	dd800617 	ldw	r22,24(sp)
   2986c:	dd400517 	ldw	r21,20(sp)
   29870:	dd000417 	ldw	r20,16(sp)
   29874:	dcc00317 	ldw	r19,12(sp)
   29878:	dc800217 	ldw	r18,8(sp)
   2987c:	dc400117 	ldw	r17,4(sp)
   29880:	dc000017 	ldw	r16,0(sp)
   29884:	dec00a04 	addi	sp,sp,40
   29888:	f800283a 	ret

0002988c <__clzsi2>:
   2988c:	00bfffd4 	movui	r2,65535
   29890:	11000b36 	bltu	r2,r4,298c0 <__clzsi2+0x34>
   29894:	00803fc4 	movi	r2,255
   29898:	11001e2e 	bgeu	r2,r4,29914 <__clzsi2+0x88>
   2989c:	00c00204 	movi	r3,8
   298a0:	20c8d83a 	srl	r4,r4,r3
   298a4:	00c001f4 	movhi	r3,7
   298a8:	18f29904 	addi	r3,r3,-13724
   298ac:	00800604 	movi	r2,24
   298b0:	1909883a 	add	r4,r3,r4
   298b4:	20c00003 	ldbu	r3,0(r4)
   298b8:	10c5c83a 	sub	r2,r2,r3
   298bc:	f800283a 	ret
   298c0:	00804034 	movhi	r2,256
   298c4:	10bfffc4 	addi	r2,r2,-1
   298c8:	11000936 	bltu	r2,r4,298f0 <__clzsi2+0x64>
   298cc:	00800404 	movi	r2,16
   298d0:	1007883a 	mov	r3,r2
   298d4:	20c8d83a 	srl	r4,r4,r3
   298d8:	00c001f4 	movhi	r3,7
   298dc:	18f29904 	addi	r3,r3,-13724
   298e0:	1909883a 	add	r4,r3,r4
   298e4:	20c00003 	ldbu	r3,0(r4)
   298e8:	10c5c83a 	sub	r2,r2,r3
   298ec:	f800283a 	ret
   298f0:	00c00604 	movi	r3,24
   298f4:	20c8d83a 	srl	r4,r4,r3
   298f8:	00c001f4 	movhi	r3,7
   298fc:	18f29904 	addi	r3,r3,-13724
   29900:	00800204 	movi	r2,8
   29904:	1909883a 	add	r4,r3,r4
   29908:	20c00003 	ldbu	r3,0(r4)
   2990c:	10c5c83a 	sub	r2,r2,r3
   29910:	f800283a 	ret
   29914:	0007883a 	mov	r3,zero
   29918:	20c8d83a 	srl	r4,r4,r3
   2991c:	00c001f4 	movhi	r3,7
   29920:	18f29904 	addi	r3,r3,-13724
   29924:	00800804 	movi	r2,32
   29928:	1909883a 	add	r4,r3,r4
   2992c:	20c00003 	ldbu	r3,0(r4)
   29930:	10c5c83a 	sub	r2,r2,r3
   29934:	f800283a 	ret

00029938 <__pack_d>:
   29938:	20800017 	ldw	r2,0(r4)
   2993c:	defff804 	addi	sp,sp,-32
   29940:	dcc00315 	stw	r19,12(sp)
   29944:	dc800215 	stw	r18,8(sp)
   29948:	dfc00715 	stw	ra,28(sp)
   2994c:	dd800615 	stw	r22,24(sp)
   29950:	dd400515 	stw	r21,20(sp)
   29954:	dd000415 	stw	r20,16(sp)
   29958:	dc400115 	stw	r17,4(sp)
   2995c:	dc000015 	stw	r16,0(sp)
   29960:	04800044 	movi	r18,1
   29964:	24400317 	ldw	r17,12(r4)
   29968:	24000417 	ldw	r16,16(r4)
   2996c:	24c00117 	ldw	r19,4(r4)
   29970:	9080422e 	bgeu	r18,r2,29a7c <__pack_d+0x144>
   29974:	00c00104 	movi	r3,4
   29978:	10c03c26 	beq	r2,r3,29a6c <__pack_d+0x134>
   2997c:	00c00084 	movi	r3,2
   29980:	10c01926 	beq	r2,r3,299e8 <__pack_d+0xb0>
   29984:	8c04b03a 	or	r2,r17,r16
   29988:	10001726 	beq	r2,zero,299e8 <__pack_d+0xb0>
   2998c:	21000217 	ldw	r4,8(r4)
   29990:	00bf0084 	movi	r2,-1022
   29994:	20804016 	blt	r4,r2,29a98 <__pack_d+0x160>
   29998:	0080ffc4 	movi	r2,1023
   2999c:	11003316 	blt	r2,r4,29a6c <__pack_d+0x134>
   299a0:	88803fcc 	andi	r2,r17,255
   299a4:	00c02004 	movi	r3,128
   299a8:	10c02926 	beq	r2,r3,29a50 <__pack_d+0x118>
   299ac:	88801fc4 	addi	r2,r17,127
   299b0:	1463803a 	cmpltu	r17,r2,r17
   299b4:	8c21883a 	add	r16,r17,r16
   299b8:	1023883a 	mov	r17,r2
   299bc:	00880034 	movhi	r2,8192
   299c0:	10bfffc4 	addi	r2,r2,-1
   299c4:	14001c36 	bltu	r2,r16,29a38 <__pack_d+0x100>
   299c8:	2100ffc4 	addi	r4,r4,1023
   299cc:	8006963a 	slli	r3,r16,24
   299d0:	8804d23a 	srli	r2,r17,8
   299d4:	8020913a 	slli	r16,r16,4
   299d8:	2101ffcc 	andi	r4,r4,2047
   299dc:	1884b03a 	or	r2,r3,r2
   299e0:	8020d33a 	srli	r16,r16,12
   299e4:	00000306 	br	299f4 <__pack_d+0xbc>
   299e8:	0009883a 	mov	r4,zero
   299ec:	0005883a 	mov	r2,zero
   299f0:	0021883a 	mov	r16,zero
   299f4:	2008953a 	slli	r4,r4,20
   299f8:	982697fa 	slli	r19,r19,31
   299fc:	00c00434 	movhi	r3,16
   29a00:	18ffffc4 	addi	r3,r3,-1
   29a04:	80e0703a 	and	r16,r16,r3
   29a08:	8106b03a 	or	r3,r16,r4
   29a0c:	1cc6b03a 	or	r3,r3,r19
   29a10:	dfc00717 	ldw	ra,28(sp)
   29a14:	dd800617 	ldw	r22,24(sp)
   29a18:	dd400517 	ldw	r21,20(sp)
   29a1c:	dd000417 	ldw	r20,16(sp)
   29a20:	dcc00317 	ldw	r19,12(sp)
   29a24:	dc800217 	ldw	r18,8(sp)
   29a28:	dc400117 	ldw	r17,4(sp)
   29a2c:	dc000017 	ldw	r16,0(sp)
   29a30:	dec00804 	addi	sp,sp,32
   29a34:	f800283a 	ret
   29a38:	800697fa 	slli	r3,r16,31
   29a3c:	8804d07a 	srli	r2,r17,1
   29a40:	21010004 	addi	r4,r4,1024
   29a44:	8020d07a 	srli	r16,r16,1
   29a48:	18a2b03a 	or	r17,r3,r2
   29a4c:	003fdf06 	br	299cc <__pack_d+0x94>
   29a50:	88c0400c 	andi	r3,r17,256
   29a54:	183fd926 	beq	r3,zero,299bc <__pack_d+0x84>
   29a58:	8885883a 	add	r2,r17,r2
   29a5c:	1463803a 	cmpltu	r17,r2,r17
   29a60:	8c21883a 	add	r16,r17,r16
   29a64:	1023883a 	mov	r17,r2
   29a68:	003fd406 	br	299bc <__pack_d+0x84>
   29a6c:	0101ffc4 	movi	r4,2047
   29a70:	0005883a 	mov	r2,zero
   29a74:	0021883a 	mov	r16,zero
   29a78:	003fde06 	br	299f4 <__pack_d+0xbc>
   29a7c:	84000234 	orhi	r16,r16,8
   29a80:	00c00434 	movhi	r3,16
   29a84:	18ffffc4 	addi	r3,r3,-1
   29a88:	8805883a 	mov	r2,r17
   29a8c:	80e0703a 	and	r16,r16,r3
   29a90:	0101ffc4 	movi	r4,2047
   29a94:	003fd706 	br	299f4 <__pack_d+0xbc>
   29a98:	1129c83a 	sub	r20,r2,r4
   29a9c:	00800e04 	movi	r2,56
   29aa0:	15002716 	blt	r2,r20,29b40 <__pack_d+0x208>
   29aa4:	800b883a 	mov	r5,r16
   29aa8:	a00d883a 	mov	r6,r20
   29aac:	8809883a 	mov	r4,r17
   29ab0:	0029d300 	call	29d30 <__lshrdi3>
   29ab4:	9009883a 	mov	r4,r18
   29ab8:	000b883a 	mov	r5,zero
   29abc:	a00d883a 	mov	r6,r20
   29ac0:	102d883a 	mov	r22,r2
   29ac4:	182b883a 	mov	r21,r3
   29ac8:	0029d740 	call	29d74 <__ashldi3>
   29acc:	1009003a 	cmpeq	r4,r2,zero
   29ad0:	1907c83a 	sub	r3,r3,r4
   29ad4:	10bfffc4 	addi	r2,r2,-1
   29ad8:	1c20703a 	and	r16,r3,r16
   29adc:	1444703a 	and	r2,r2,r17
   29ae0:	1404b03a 	or	r2,r2,r16
   29ae4:	1004c03a 	cmpne	r2,r2,zero
   29ae8:	1584b03a 	or	r2,r2,r22
   29aec:	11003fcc 	andi	r4,r2,255
   29af0:	01402004 	movi	r5,128
   29af4:	a807883a 	mov	r3,r21
   29af8:	2140131e 	bne	r4,r5,29b48 <__pack_d+0x210>
   29afc:	1140400c 	andi	r5,r2,256
   29b00:	28000426 	beq	r5,zero,29b14 <__pack_d+0x1dc>
   29b04:	1109883a 	add	r4,r2,r4
   29b08:	2085803a 	cmpltu	r2,r4,r2
   29b0c:	1547883a 	add	r3,r2,r21
   29b10:	2005883a 	mov	r2,r4
   29b14:	1808963a 	slli	r4,r3,24
   29b18:	1004d23a 	srli	r2,r2,8
   29b1c:	1820913a 	slli	r16,r3,4
   29b20:	01440034 	movhi	r5,4096
   29b24:	297fffc4 	addi	r5,r5,-1
   29b28:	2084b03a 	or	r2,r4,r2
   29b2c:	8020d33a 	srli	r16,r16,12
   29b30:	01000044 	movi	r4,1
   29b34:	28ffaf36 	bltu	r5,r3,299f4 <__pack_d+0xbc>
   29b38:	0009883a 	mov	r4,zero
   29b3c:	003fad06 	br	299f4 <__pack_d+0xbc>
   29b40:	0005883a 	mov	r2,zero
   29b44:	0007883a 	mov	r3,zero
   29b48:	11001fc4 	addi	r4,r2,127
   29b4c:	2085803a 	cmpltu	r2,r4,r2
   29b50:	10c7883a 	add	r3,r2,r3
   29b54:	2005883a 	mov	r2,r4
   29b58:	003fee06 	br	29b14 <__pack_d+0x1dc>

00029b5c <__unpack_d>:
   29b5c:	21800117 	ldw	r6,4(r4)
   29b60:	20c00017 	ldw	r3,0(r4)
   29b64:	3004d7fa 	srli	r2,r6,31
   29b68:	3008d53a 	srli	r4,r6,20
   29b6c:	28800115 	stw	r2,4(r5)
   29b70:	2101ffcc 	andi	r4,r4,2047
   29b74:	00800434 	movhi	r2,16
   29b78:	10bfffc4 	addi	r2,r2,-1
   29b7c:	3084703a 	and	r2,r6,r2
   29b80:	20001a1e 	bne	r4,zero,29bec <__unpack_d+0x90>
   29b84:	1888b03a 	or	r4,r3,r2
   29b88:	20002626 	beq	r4,zero,29c24 <__unpack_d+0xc8>
   29b8c:	1808d63a 	srli	r4,r3,24
   29b90:	1004923a 	slli	r2,r2,8
   29b94:	01bf0084 	movi	r6,-1022
   29b98:	29800215 	stw	r6,8(r5)
   29b9c:	2084b03a 	or	r2,r4,r2
   29ba0:	010000c4 	movi	r4,3
   29ba4:	29000015 	stw	r4,0(r5)
   29ba8:	02040034 	movhi	r8,4096
   29bac:	423fffc4 	addi	r8,r8,-1
   29bb0:	1806923a 	slli	r3,r3,8
   29bb4:	40801836 	bltu	r8,r2,29c18 <__unpack_d+0xbc>
   29bb8:	013f0044 	movi	r4,-1023
   29bbc:	18cd883a 	add	r6,r3,r3
   29bc0:	30c7803a 	cmpltu	r3,r6,r3
   29bc4:	1085883a 	add	r2,r2,r2
   29bc8:	1885883a 	add	r2,r3,r2
   29bcc:	200f883a 	mov	r7,r4
   29bd0:	3007883a 	mov	r3,r6
   29bd4:	213fffc4 	addi	r4,r4,-1
   29bd8:	40bff82e 	bgeu	r8,r2,29bbc <__unpack_d+0x60>
   29bdc:	29c00215 	stw	r7,8(r5)
   29be0:	28c00315 	stw	r3,12(r5)
   29be4:	28800415 	stw	r2,16(r5)
   29be8:	f800283a 	ret
   29bec:	01c1ffc4 	movi	r7,2047
   29bf0:	21c00f26 	beq	r4,r7,29c30 <__unpack_d+0xd4>
   29bf4:	180cd63a 	srli	r6,r3,24
   29bf8:	1004923a 	slli	r2,r2,8
   29bfc:	213f0044 	addi	r4,r4,-1023
   29c00:	1806923a 	slli	r3,r3,8
   29c04:	3084b03a 	or	r2,r6,r2
   29c08:	29000215 	stw	r4,8(r5)
   29c0c:	010000c4 	movi	r4,3
   29c10:	10840034 	orhi	r2,r2,4096
   29c14:	29000015 	stw	r4,0(r5)
   29c18:	28c00315 	stw	r3,12(r5)
   29c1c:	28800415 	stw	r2,16(r5)
   29c20:	f800283a 	ret
   29c24:	00800084 	movi	r2,2
   29c28:	28800015 	stw	r2,0(r5)
   29c2c:	f800283a 	ret
   29c30:	1888b03a 	or	r4,r3,r2
   29c34:	20000526 	beq	r4,zero,29c4c <__unpack_d+0xf0>
   29c38:	3180022c 	andhi	r6,r6,8
   29c3c:	30000626 	beq	r6,zero,29c58 <__unpack_d+0xfc>
   29c40:	01000044 	movi	r4,1
   29c44:	29000015 	stw	r4,0(r5)
   29c48:	003ff306 	br	29c18 <__unpack_d+0xbc>
   29c4c:	00800104 	movi	r2,4
   29c50:	28800015 	stw	r2,0(r5)
   29c54:	f800283a 	ret
   29c58:	28000015 	stw	zero,0(r5)
   29c5c:	003fee06 	br	29c18 <__unpack_d+0xbc>

00029c60 <__fpcmp_parts_d>:
   29c60:	20c00017 	ldw	r3,0(r4)
   29c64:	00800044 	movi	r2,1
   29c68:	10c0142e 	bgeu	r2,r3,29cbc <__fpcmp_parts_d+0x5c>
   29c6c:	29800017 	ldw	r6,0(r5)
   29c70:	1180122e 	bgeu	r2,r6,29cbc <__fpcmp_parts_d+0x5c>
   29c74:	01c00104 	movi	r7,4
   29c78:	19c02826 	beq	r3,r7,29d1c <__fpcmp_parts_d+0xbc>
   29c7c:	31c00926 	beq	r6,r7,29ca4 <__fpcmp_parts_d+0x44>
   29c80:	01c00084 	movi	r7,2
   29c84:	19c00626 	beq	r3,r7,29ca0 <__fpcmp_parts_d+0x40>
   29c88:	31c00a26 	beq	r6,r7,29cb4 <__fpcmp_parts_d+0x54>
   29c8c:	20c00117 	ldw	r3,4(r4)
   29c90:	29800117 	ldw	r6,4(r5)
   29c94:	19800b26 	beq	r3,r6,29cc4 <__fpcmp_parts_d+0x64>
   29c98:	1800041e 	bne	r3,zero,29cac <__fpcmp_parts_d+0x4c>
   29c9c:	f800283a 	ret
   29ca0:	30c01a26 	beq	r6,r3,29d0c <__fpcmp_parts_d+0xac>
   29ca4:	28800117 	ldw	r2,4(r5)
   29ca8:	1000041e 	bne	r2,zero,29cbc <__fpcmp_parts_d+0x5c>
   29cac:	00bfffc4 	movi	r2,-1
   29cb0:	f800283a 	ret
   29cb4:	20800117 	ldw	r2,4(r4)
   29cb8:	103ffc1e 	bne	r2,zero,29cac <__fpcmp_parts_d+0x4c>
   29cbc:	00800044 	movi	r2,1
   29cc0:	f800283a 	ret
   29cc4:	21c00217 	ldw	r7,8(r4)
   29cc8:	29800217 	ldw	r6,8(r5)
   29ccc:	31c0020e 	bge	r6,r7,29cd8 <__fpcmp_parts_d+0x78>
   29cd0:	183ff61e 	bne	r3,zero,29cac <__fpcmp_parts_d+0x4c>
   29cd4:	f800283a 	ret
   29cd8:	39800a16 	blt	r7,r6,29d04 <__fpcmp_parts_d+0xa4>
   29cdc:	20800417 	ldw	r2,16(r4)
   29ce0:	29800417 	ldw	r6,16(r5)
   29ce4:	21c00317 	ldw	r7,12(r4)
   29ce8:	29000317 	ldw	r4,12(r5)
   29cec:	30800936 	bltu	r6,r2,29d14 <__fpcmp_parts_d+0xb4>
   29cf0:	1180011e 	bne	r2,r6,29cf8 <__fpcmp_parts_d+0x98>
   29cf4:	21c00736 	bltu	r4,r7,29d14 <__fpcmp_parts_d+0xb4>
   29cf8:	11800236 	bltu	r2,r6,29d04 <__fpcmp_parts_d+0xa4>
   29cfc:	3080031e 	bne	r6,r2,29d0c <__fpcmp_parts_d+0xac>
   29d00:	3900022e 	bgeu	r7,r4,29d0c <__fpcmp_parts_d+0xac>
   29d04:	183fe926 	beq	r3,zero,29cac <__fpcmp_parts_d+0x4c>
   29d08:	003fec06 	br	29cbc <__fpcmp_parts_d+0x5c>
   29d0c:	0005883a 	mov	r2,zero
   29d10:	f800283a 	ret
   29d14:	183fe926 	beq	r3,zero,29cbc <__fpcmp_parts_d+0x5c>
   29d18:	003fe406 	br	29cac <__fpcmp_parts_d+0x4c>
   29d1c:	30ffe51e 	bne	r6,r3,29cb4 <__fpcmp_parts_d+0x54>
   29d20:	28c00117 	ldw	r3,4(r5)
   29d24:	20800117 	ldw	r2,4(r4)
   29d28:	1885c83a 	sub	r2,r3,r2
   29d2c:	f800283a 	ret

00029d30 <__lshrdi3>:
   29d30:	2005883a 	mov	r2,r4
   29d34:	2807883a 	mov	r3,r5
   29d38:	30000826 	beq	r6,zero,29d5c <__lshrdi3+0x2c>
   29d3c:	01000804 	movi	r4,32
   29d40:	2189c83a 	sub	r4,r4,r6
   29d44:	0100060e 	bge	zero,r4,29d60 <__lshrdi3+0x30>
   29d48:	1184d83a 	srl	r2,r2,r6
   29d4c:	2908983a 	sll	r4,r5,r4
   29d50:	298cd83a 	srl	r6,r5,r6
   29d54:	2084b03a 	or	r2,r4,r2
   29d58:	3007883a 	mov	r3,r6
   29d5c:	f800283a 	ret
   29d60:	0105c83a 	sub	r2,zero,r4
   29d64:	000d883a 	mov	r6,zero
   29d68:	2884d83a 	srl	r2,r5,r2
   29d6c:	3007883a 	mov	r3,r6
   29d70:	003ffa06 	br	29d5c <__lshrdi3+0x2c>

00029d74 <__ashldi3>:
   29d74:	2005883a 	mov	r2,r4
   29d78:	2807883a 	mov	r3,r5
   29d7c:	30000826 	beq	r6,zero,29da0 <__ashldi3+0x2c>
   29d80:	01000804 	movi	r4,32
   29d84:	2189c83a 	sub	r4,r4,r6
   29d88:	0100060e 	bge	zero,r4,29da4 <__ashldi3+0x30>
   29d8c:	1108d83a 	srl	r4,r2,r4
   29d90:	2986983a 	sll	r3,r5,r6
   29d94:	118c983a 	sll	r6,r2,r6
   29d98:	20c6b03a 	or	r3,r4,r3
   29d9c:	3005883a 	mov	r2,r6
   29da0:	f800283a 	ret
   29da4:	0107c83a 	sub	r3,zero,r4
   29da8:	000d883a 	mov	r6,zero
   29dac:	10c6983a 	sll	r3,r2,r3
   29db0:	3005883a 	mov	r2,r6
   29db4:	003ffa06 	br	29da0 <__ashldi3+0x2c>

00029db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29db8:	defffe04 	addi	sp,sp,-8
   29dbc:	dfc00115 	stw	ra,4(sp)
   29dc0:	df000015 	stw	fp,0(sp)
   29dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29dc8:	008001f4 	movhi	r2,7
   29dcc:	10b97704 	addi	r2,r2,-6692
   29dd0:	10800017 	ldw	r2,0(r2)
   29dd4:	10000526 	beq	r2,zero,29dec <alt_get_errno+0x34>
   29dd8:	008001f4 	movhi	r2,7
   29ddc:	10b97704 	addi	r2,r2,-6692
   29de0:	10800017 	ldw	r2,0(r2)
   29de4:	103ee83a 	callr	r2
   29de8:	00000206 	br	29df4 <alt_get_errno+0x3c>
   29dec:	008001f4 	movhi	r2,7
   29df0:	10b98704 	addi	r2,r2,-6628
}
   29df4:	e037883a 	mov	sp,fp
   29df8:	dfc00117 	ldw	ra,4(sp)
   29dfc:	df000017 	ldw	fp,0(sp)
   29e00:	dec00204 	addi	sp,sp,8
   29e04:	f800283a 	ret

00029e08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   29e08:	defffb04 	addi	sp,sp,-20
   29e0c:	dfc00415 	stw	ra,16(sp)
   29e10:	df000315 	stw	fp,12(sp)
   29e14:	df000304 	addi	fp,sp,12
   29e18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   29e1c:	e0bfff17 	ldw	r2,-4(fp)
   29e20:	10000716 	blt	r2,zero,29e40 <close+0x38>
   29e24:	e13fff17 	ldw	r4,-4(fp)
   29e28:	01400304 	movi	r5,12
   29e2c:	00297540 	call	29754 <__mulsi3>
   29e30:	00c001f4 	movhi	r3,7
   29e34:	18f4f504 	addi	r3,r3,-11308
   29e38:	10c5883a 	add	r2,r2,r3
   29e3c:	00000106 	br	29e44 <close+0x3c>
   29e40:	0005883a 	mov	r2,zero
   29e44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   29e48:	e0bffd17 	ldw	r2,-12(fp)
   29e4c:	10001826 	beq	r2,zero,29eb0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   29e50:	e0bffd17 	ldw	r2,-12(fp)
   29e54:	10800017 	ldw	r2,0(r2)
   29e58:	10800417 	ldw	r2,16(r2)
   29e5c:	10000626 	beq	r2,zero,29e78 <close+0x70>
   29e60:	e0bffd17 	ldw	r2,-12(fp)
   29e64:	10800017 	ldw	r2,0(r2)
   29e68:	10800417 	ldw	r2,16(r2)
   29e6c:	e13ffd17 	ldw	r4,-12(fp)
   29e70:	103ee83a 	callr	r2
   29e74:	00000106 	br	29e7c <close+0x74>
   29e78:	0005883a 	mov	r2,zero
   29e7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   29e80:	e13fff17 	ldw	r4,-4(fp)
   29e84:	002a5000 	call	2a500 <alt_release_fd>
    if (rval < 0)
   29e88:	e0bffe17 	ldw	r2,-8(fp)
   29e8c:	1000060e 	bge	r2,zero,29ea8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   29e90:	0029db80 	call	29db8 <alt_get_errno>
   29e94:	e0fffe17 	ldw	r3,-8(fp)
   29e98:	00c7c83a 	sub	r3,zero,r3
   29e9c:	10c00015 	stw	r3,0(r2)
      return -1;
   29ea0:	00bfffc4 	movi	r2,-1
   29ea4:	00000606 	br	29ec0 <close+0xb8>
    }
    return 0;
   29ea8:	0005883a 	mov	r2,zero
   29eac:	00000406 	br	29ec0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29eb0:	0029db80 	call	29db8 <alt_get_errno>
   29eb4:	00c01444 	movi	r3,81
   29eb8:	10c00015 	stw	r3,0(r2)
    return -1;
   29ebc:	00bfffc4 	movi	r2,-1
  }
}
   29ec0:	e037883a 	mov	sp,fp
   29ec4:	dfc00117 	ldw	ra,4(sp)
   29ec8:	df000017 	ldw	fp,0(sp)
   29ecc:	dec00204 	addi	sp,sp,8
   29ed0:	f800283a 	ret

00029ed4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   29ed4:	defffc04 	addi	sp,sp,-16
   29ed8:	df000315 	stw	fp,12(sp)
   29edc:	df000304 	addi	fp,sp,12
   29ee0:	e13ffd15 	stw	r4,-12(fp)
   29ee4:	e17ffe15 	stw	r5,-8(fp)
   29ee8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   29eec:	e0bfff17 	ldw	r2,-4(fp)
}
   29ef0:	e037883a 	mov	sp,fp
   29ef4:	df000017 	ldw	fp,0(sp)
   29ef8:	dec00104 	addi	sp,sp,4
   29efc:	f800283a 	ret

00029f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29f00:	defffe04 	addi	sp,sp,-8
   29f04:	dfc00115 	stw	ra,4(sp)
   29f08:	df000015 	stw	fp,0(sp)
   29f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29f10:	008001f4 	movhi	r2,7
   29f14:	10b97704 	addi	r2,r2,-6692
   29f18:	10800017 	ldw	r2,0(r2)
   29f1c:	10000526 	beq	r2,zero,29f34 <alt_get_errno+0x34>
   29f20:	008001f4 	movhi	r2,7
   29f24:	10b97704 	addi	r2,r2,-6692
   29f28:	10800017 	ldw	r2,0(r2)
   29f2c:	103ee83a 	callr	r2
   29f30:	00000206 	br	29f3c <alt_get_errno+0x3c>
   29f34:	008001f4 	movhi	r2,7
   29f38:	10b98704 	addi	r2,r2,-6628
}
   29f3c:	e037883a 	mov	sp,fp
   29f40:	dfc00117 	ldw	ra,4(sp)
   29f44:	df000017 	ldw	fp,0(sp)
   29f48:	dec00204 	addi	sp,sp,8
   29f4c:	f800283a 	ret

00029f50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   29f50:	defffb04 	addi	sp,sp,-20
   29f54:	dfc00415 	stw	ra,16(sp)
   29f58:	df000315 	stw	fp,12(sp)
   29f5c:	df000304 	addi	fp,sp,12
   29f60:	e13ffe15 	stw	r4,-8(fp)
   29f64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29f68:	e0bffe17 	ldw	r2,-8(fp)
   29f6c:	10000716 	blt	r2,zero,29f8c <fstat+0x3c>
   29f70:	e13ffe17 	ldw	r4,-8(fp)
   29f74:	01400304 	movi	r5,12
   29f78:	00297540 	call	29754 <__mulsi3>
   29f7c:	00c001f4 	movhi	r3,7
   29f80:	18f4f504 	addi	r3,r3,-11308
   29f84:	10c5883a 	add	r2,r2,r3
   29f88:	00000106 	br	29f90 <fstat+0x40>
   29f8c:	0005883a 	mov	r2,zero
   29f90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   29f94:	e0bffd17 	ldw	r2,-12(fp)
   29f98:	10001026 	beq	r2,zero,29fdc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   29f9c:	e0bffd17 	ldw	r2,-12(fp)
   29fa0:	10800017 	ldw	r2,0(r2)
   29fa4:	10800817 	ldw	r2,32(r2)
   29fa8:	10000726 	beq	r2,zero,29fc8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   29fac:	e0bffd17 	ldw	r2,-12(fp)
   29fb0:	10800017 	ldw	r2,0(r2)
   29fb4:	10800817 	ldw	r2,32(r2)
   29fb8:	e13ffd17 	ldw	r4,-12(fp)
   29fbc:	e17fff17 	ldw	r5,-4(fp)
   29fc0:	103ee83a 	callr	r2
   29fc4:	00000906 	br	29fec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   29fc8:	e0bfff17 	ldw	r2,-4(fp)
   29fcc:	00c80004 	movi	r3,8192
   29fd0:	10c00115 	stw	r3,4(r2)
      return 0;
   29fd4:	0005883a 	mov	r2,zero
   29fd8:	00000406 	br	29fec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29fdc:	0029f000 	call	29f00 <alt_get_errno>
   29fe0:	00c01444 	movi	r3,81
   29fe4:	10c00015 	stw	r3,0(r2)
    return -1;
   29fe8:	00bfffc4 	movi	r2,-1
  }
}
   29fec:	e037883a 	mov	sp,fp
   29ff0:	dfc00117 	ldw	ra,4(sp)
   29ff4:	df000017 	ldw	fp,0(sp)
   29ff8:	dec00204 	addi	sp,sp,8
   29ffc:	f800283a 	ret

0002a000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a000:	defffe04 	addi	sp,sp,-8
   2a004:	dfc00115 	stw	ra,4(sp)
   2a008:	df000015 	stw	fp,0(sp)
   2a00c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a010:	008001f4 	movhi	r2,7
   2a014:	10b97704 	addi	r2,r2,-6692
   2a018:	10800017 	ldw	r2,0(r2)
   2a01c:	10000526 	beq	r2,zero,2a034 <alt_get_errno+0x34>
   2a020:	008001f4 	movhi	r2,7
   2a024:	10b97704 	addi	r2,r2,-6692
   2a028:	10800017 	ldw	r2,0(r2)
   2a02c:	103ee83a 	callr	r2
   2a030:	00000206 	br	2a03c <alt_get_errno+0x3c>
   2a034:	008001f4 	movhi	r2,7
   2a038:	10b98704 	addi	r2,r2,-6628
}
   2a03c:	e037883a 	mov	sp,fp
   2a040:	dfc00117 	ldw	ra,4(sp)
   2a044:	df000017 	ldw	fp,0(sp)
   2a048:	dec00204 	addi	sp,sp,8
   2a04c:	f800283a 	ret

0002a050 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2a050:	deffed04 	addi	sp,sp,-76
   2a054:	dfc01215 	stw	ra,72(sp)
   2a058:	df001115 	stw	fp,68(sp)
   2a05c:	df001104 	addi	fp,sp,68
   2a060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a064:	e0bfff17 	ldw	r2,-4(fp)
   2a068:	10000716 	blt	r2,zero,2a088 <isatty+0x38>
   2a06c:	e13fff17 	ldw	r4,-4(fp)
   2a070:	01400304 	movi	r5,12
   2a074:	00297540 	call	29754 <__mulsi3>
   2a078:	00c001f4 	movhi	r3,7
   2a07c:	18f4f504 	addi	r3,r3,-11308
   2a080:	10c5883a 	add	r2,r2,r3
   2a084:	00000106 	br	2a08c <isatty+0x3c>
   2a088:	0005883a 	mov	r2,zero
   2a08c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2a090:	e0bfef17 	ldw	r2,-68(fp)
   2a094:	10000e26 	beq	r2,zero,2a0d0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2a098:	e0bfef17 	ldw	r2,-68(fp)
   2a09c:	10800017 	ldw	r2,0(r2)
   2a0a0:	10800817 	ldw	r2,32(r2)
   2a0a4:	1000021e 	bne	r2,zero,2a0b0 <isatty+0x60>
    {
      return 1;
   2a0a8:	00800044 	movi	r2,1
   2a0ac:	00000c06 	br	2a0e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2a0b0:	e0bff004 	addi	r2,fp,-64
   2a0b4:	e13fff17 	ldw	r4,-4(fp)
   2a0b8:	100b883a 	mov	r5,r2
   2a0bc:	0029f500 	call	29f50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2a0c0:	e0bff117 	ldw	r2,-60(fp)
   2a0c4:	10880020 	cmpeqi	r2,r2,8192
   2a0c8:	10803fcc 	andi	r2,r2,255
   2a0cc:	00000406 	br	2a0e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a0d0:	002a0000 	call	2a000 <alt_get_errno>
   2a0d4:	00c01444 	movi	r3,81
   2a0d8:	10c00015 	stw	r3,0(r2)
    return 0;
   2a0dc:	0005883a 	mov	r2,zero
  }
}
   2a0e0:	e037883a 	mov	sp,fp
   2a0e4:	dfc00117 	ldw	ra,4(sp)
   2a0e8:	df000017 	ldw	fp,0(sp)
   2a0ec:	dec00204 	addi	sp,sp,8
   2a0f0:	f800283a 	ret

0002a0f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2a0f4:	defffc04 	addi	sp,sp,-16
   2a0f8:	df000315 	stw	fp,12(sp)
   2a0fc:	df000304 	addi	fp,sp,12
   2a100:	e13ffd15 	stw	r4,-12(fp)
   2a104:	e17ffe15 	stw	r5,-8(fp)
   2a108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2a10c:	e0fffe17 	ldw	r3,-8(fp)
   2a110:	e0bffd17 	ldw	r2,-12(fp)
   2a114:	18800e26 	beq	r3,r2,2a150 <alt_load_section+0x5c>
  {
    while( to != end )
   2a118:	00000a06 	br	2a144 <alt_load_section+0x50>
    {
      *to++ = *from++;
   2a11c:	e0bffd17 	ldw	r2,-12(fp)
   2a120:	10c00017 	ldw	r3,0(r2)
   2a124:	e0bffe17 	ldw	r2,-8(fp)
   2a128:	10c00015 	stw	r3,0(r2)
   2a12c:	e0bffe17 	ldw	r2,-8(fp)
   2a130:	10800104 	addi	r2,r2,4
   2a134:	e0bffe15 	stw	r2,-8(fp)
   2a138:	e0bffd17 	ldw	r2,-12(fp)
   2a13c:	10800104 	addi	r2,r2,4
   2a140:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2a144:	e0fffe17 	ldw	r3,-8(fp)
   2a148:	e0bfff17 	ldw	r2,-4(fp)
   2a14c:	18bff31e 	bne	r3,r2,2a11c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2a150:	e037883a 	mov	sp,fp
   2a154:	df000017 	ldw	fp,0(sp)
   2a158:	dec00104 	addi	sp,sp,4
   2a15c:	f800283a 	ret

0002a160 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2a160:	defffe04 	addi	sp,sp,-8
   2a164:	dfc00115 	stw	ra,4(sp)
   2a168:	df000015 	stw	fp,0(sp)
   2a16c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2a170:	010000f4 	movhi	r4,3
   2a174:	21315f04 	addi	r4,r4,-14980
   2a178:	014001f4 	movhi	r5,7
   2a17c:	2972e604 	addi	r5,r5,-13416
   2a180:	018001f4 	movhi	r6,7
   2a184:	31b97c04 	addi	r6,r6,-6672
   2a188:	002a0f40 	call	2a0f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2a18c:	010000b4 	movhi	r4,2
   2a190:	21000804 	addi	r4,r4,32
   2a194:	014000b4 	movhi	r5,2
   2a198:	29400804 	addi	r5,r5,32
   2a19c:	018000b4 	movhi	r6,2
   2a1a0:	31806e04 	addi	r6,r6,440
   2a1a4:	002a0f40 	call	2a0f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2a1a8:	010001f4 	movhi	r4,7
   2a1ac:	21320004 	addi	r4,r4,-14336
   2a1b0:	014001f4 	movhi	r5,7
   2a1b4:	29720004 	addi	r5,r5,-14336
   2a1b8:	018001f4 	movhi	r6,7
   2a1bc:	31b2e604 	addi	r6,r6,-13416
   2a1c0:	002a0f40 	call	2a0f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2a1c4:	002b4dc0 	call	2b4dc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2a1c8:	002b6a00 	call	2b6a0 <alt_icache_flush_all>
}
   2a1cc:	e037883a 	mov	sp,fp
   2a1d0:	dfc00117 	ldw	ra,4(sp)
   2a1d4:	df000017 	ldw	fp,0(sp)
   2a1d8:	dec00204 	addi	sp,sp,8
   2a1dc:	f800283a 	ret

0002a1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a1e0:	defffe04 	addi	sp,sp,-8
   2a1e4:	dfc00115 	stw	ra,4(sp)
   2a1e8:	df000015 	stw	fp,0(sp)
   2a1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a1f0:	008001f4 	movhi	r2,7
   2a1f4:	10b97704 	addi	r2,r2,-6692
   2a1f8:	10800017 	ldw	r2,0(r2)
   2a1fc:	10000526 	beq	r2,zero,2a214 <alt_get_errno+0x34>
   2a200:	008001f4 	movhi	r2,7
   2a204:	10b97704 	addi	r2,r2,-6692
   2a208:	10800017 	ldw	r2,0(r2)
   2a20c:	103ee83a 	callr	r2
   2a210:	00000206 	br	2a21c <alt_get_errno+0x3c>
   2a214:	008001f4 	movhi	r2,7
   2a218:	10b98704 	addi	r2,r2,-6628
}
   2a21c:	e037883a 	mov	sp,fp
   2a220:	dfc00117 	ldw	ra,4(sp)
   2a224:	df000017 	ldw	fp,0(sp)
   2a228:	dec00204 	addi	sp,sp,8
   2a22c:	f800283a 	ret

0002a230 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2a230:	defff904 	addi	sp,sp,-28
   2a234:	dfc00615 	stw	ra,24(sp)
   2a238:	df000515 	stw	fp,20(sp)
   2a23c:	df000504 	addi	fp,sp,20
   2a240:	e13ffd15 	stw	r4,-12(fp)
   2a244:	e17ffe15 	stw	r5,-8(fp)
   2a248:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2a24c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a250:	e0bffd17 	ldw	r2,-12(fp)
   2a254:	10000716 	blt	r2,zero,2a274 <lseek+0x44>
   2a258:	e13ffd17 	ldw	r4,-12(fp)
   2a25c:	01400304 	movi	r5,12
   2a260:	00297540 	call	29754 <__mulsi3>
   2a264:	00c001f4 	movhi	r3,7
   2a268:	18f4f504 	addi	r3,r3,-11308
   2a26c:	10c5883a 	add	r2,r2,r3
   2a270:	00000106 	br	2a278 <lseek+0x48>
   2a274:	0005883a 	mov	r2,zero
   2a278:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2a27c:	e0bffc17 	ldw	r2,-16(fp)
   2a280:	10001026 	beq	r2,zero,2a2c4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2a284:	e0bffc17 	ldw	r2,-16(fp)
   2a288:	10800017 	ldw	r2,0(r2)
   2a28c:	10800717 	ldw	r2,28(r2)
   2a290:	10000926 	beq	r2,zero,2a2b8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2a294:	e0bffc17 	ldw	r2,-16(fp)
   2a298:	10800017 	ldw	r2,0(r2)
   2a29c:	10800717 	ldw	r2,28(r2)
   2a2a0:	e13ffc17 	ldw	r4,-16(fp)
   2a2a4:	e17ffe17 	ldw	r5,-8(fp)
   2a2a8:	e1bfff17 	ldw	r6,-4(fp)
   2a2ac:	103ee83a 	callr	r2
   2a2b0:	e0bffb15 	stw	r2,-20(fp)
   2a2b4:	00000506 	br	2a2cc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2a2b8:	00bfde84 	movi	r2,-134
   2a2bc:	e0bffb15 	stw	r2,-20(fp)
   2a2c0:	00000206 	br	2a2cc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   2a2c4:	00bfebc4 	movi	r2,-81
   2a2c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2a2cc:	e0bffb17 	ldw	r2,-20(fp)
   2a2d0:	1000060e 	bge	r2,zero,2a2ec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2a2d4:	002a1e00 	call	2a1e0 <alt_get_errno>
   2a2d8:	e0fffb17 	ldw	r3,-20(fp)
   2a2dc:	00c7c83a 	sub	r3,zero,r3
   2a2e0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   2a2e4:	00bfffc4 	movi	r2,-1
   2a2e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2a2ec:	e0bffb17 	ldw	r2,-20(fp)
}
   2a2f0:	e037883a 	mov	sp,fp
   2a2f4:	dfc00117 	ldw	ra,4(sp)
   2a2f8:	df000017 	ldw	fp,0(sp)
   2a2fc:	dec00204 	addi	sp,sp,8
   2a300:	f800283a 	ret

0002a304 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2a304:	defffd04 	addi	sp,sp,-12
   2a308:	dfc00215 	stw	ra,8(sp)
   2a30c:	df000115 	stw	fp,4(sp)
   2a310:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2a314:	0009883a 	mov	r4,zero
   2a318:	002a7a80 	call	2a7a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2a31c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2a320:	002a7dc0 	call	2a7dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2a324:	010001f4 	movhi	r4,7
   2a328:	2132dc04 	addi	r4,r4,-13456
   2a32c:	014001f4 	movhi	r5,7
   2a330:	2972dc04 	addi	r5,r5,-13456
   2a334:	018001f4 	movhi	r6,7
   2a338:	31b2dc04 	addi	r6,r6,-13456
   2a33c:	002ba640 	call	2ba64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2a340:	002b5e80 	call	2b5e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2a344:	010000f4 	movhi	r4,3
   2a348:	212d9104 	addi	r4,r4,-18876
   2a34c:	002c1a80 	call	2c1a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2a350:	d1201b17 	ldw	r4,-32660(gp)
   2a354:	d0e01c17 	ldw	r3,-32656(gp)
   2a358:	d0a01d17 	ldw	r2,-32652(gp)
   2a35c:	180b883a 	mov	r5,r3
   2a360:	100d883a 	mov	r6,r2
   2a364:	00205500 	call	20550 <main>
   2a368:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2a36c:	01000044 	movi	r4,1
   2a370:	0029e080 	call	29e08 <close>
  exit (result);
   2a374:	e13fff17 	ldw	r4,-4(fp)
   2a378:	002c1bc0 	call	2c1bc <exit>

0002a37c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2a37c:	defffe04 	addi	sp,sp,-8
   2a380:	df000115 	stw	fp,4(sp)
   2a384:	df000104 	addi	fp,sp,4
   2a388:	e13fff15 	stw	r4,-4(fp)
}
   2a38c:	e037883a 	mov	sp,fp
   2a390:	df000017 	ldw	fp,0(sp)
   2a394:	dec00104 	addi	sp,sp,4
   2a398:	f800283a 	ret

0002a39c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2a39c:	defffe04 	addi	sp,sp,-8
   2a3a0:	df000115 	stw	fp,4(sp)
   2a3a4:	df000104 	addi	fp,sp,4
   2a3a8:	e13fff15 	stw	r4,-4(fp)
}
   2a3ac:	e037883a 	mov	sp,fp
   2a3b0:	df000017 	ldw	fp,0(sp)
   2a3b4:	dec00104 	addi	sp,sp,4
   2a3b8:	f800283a 	ret

0002a3bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a3bc:	defffe04 	addi	sp,sp,-8
   2a3c0:	dfc00115 	stw	ra,4(sp)
   2a3c4:	df000015 	stw	fp,0(sp)
   2a3c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a3cc:	008001f4 	movhi	r2,7
   2a3d0:	10b97704 	addi	r2,r2,-6692
   2a3d4:	10800017 	ldw	r2,0(r2)
   2a3d8:	10000526 	beq	r2,zero,2a3f0 <alt_get_errno+0x34>
   2a3dc:	008001f4 	movhi	r2,7
   2a3e0:	10b97704 	addi	r2,r2,-6692
   2a3e4:	10800017 	ldw	r2,0(r2)
   2a3e8:	103ee83a 	callr	r2
   2a3ec:	00000206 	br	2a3f8 <alt_get_errno+0x3c>
   2a3f0:	008001f4 	movhi	r2,7
   2a3f4:	10b98704 	addi	r2,r2,-6628
}
   2a3f8:	e037883a 	mov	sp,fp
   2a3fc:	dfc00117 	ldw	ra,4(sp)
   2a400:	df000017 	ldw	fp,0(sp)
   2a404:	dec00204 	addi	sp,sp,8
   2a408:	f800283a 	ret

0002a40c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2a40c:	defff904 	addi	sp,sp,-28
   2a410:	dfc00615 	stw	ra,24(sp)
   2a414:	df000515 	stw	fp,20(sp)
   2a418:	df000504 	addi	fp,sp,20
   2a41c:	e13ffd15 	stw	r4,-12(fp)
   2a420:	e17ffe15 	stw	r5,-8(fp)
   2a424:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a428:	e0bffd17 	ldw	r2,-12(fp)
   2a42c:	10000716 	blt	r2,zero,2a44c <read+0x40>
   2a430:	e13ffd17 	ldw	r4,-12(fp)
   2a434:	01400304 	movi	r5,12
   2a438:	00297540 	call	29754 <__mulsi3>
   2a43c:	00c001f4 	movhi	r3,7
   2a440:	18f4f504 	addi	r3,r3,-11308
   2a444:	10c5883a 	add	r2,r2,r3
   2a448:	00000106 	br	2a450 <read+0x44>
   2a44c:	0005883a 	mov	r2,zero
   2a450:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a454:	e0bffb17 	ldw	r2,-20(fp)
   2a458:	10002026 	beq	r2,zero,2a4dc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a45c:	e0bffb17 	ldw	r2,-20(fp)
   2a460:	10800217 	ldw	r2,8(r2)
   2a464:	108000cc 	andi	r2,r2,3
   2a468:	10800060 	cmpeqi	r2,r2,1
   2a46c:	1000171e 	bne	r2,zero,2a4cc <read+0xc0>
        (fd->dev->read))
   2a470:	e0bffb17 	ldw	r2,-20(fp)
   2a474:	10800017 	ldw	r2,0(r2)
   2a478:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a47c:	10001326 	beq	r2,zero,2a4cc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2a480:	e0bffb17 	ldw	r2,-20(fp)
   2a484:	10800017 	ldw	r2,0(r2)
   2a488:	10c00517 	ldw	r3,20(r2)
   2a48c:	e0bfff17 	ldw	r2,-4(fp)
   2a490:	e13ffb17 	ldw	r4,-20(fp)
   2a494:	e17ffe17 	ldw	r5,-8(fp)
   2a498:	100d883a 	mov	r6,r2
   2a49c:	183ee83a 	callr	r3
   2a4a0:	e0bffc15 	stw	r2,-16(fp)
   2a4a4:	e0bffc17 	ldw	r2,-16(fp)
   2a4a8:	1000060e 	bge	r2,zero,2a4c4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2a4ac:	002a3bc0 	call	2a3bc <alt_get_errno>
   2a4b0:	e0fffc17 	ldw	r3,-16(fp)
   2a4b4:	00c7c83a 	sub	r3,zero,r3
   2a4b8:	10c00015 	stw	r3,0(r2)
          return -1;
   2a4bc:	00bfffc4 	movi	r2,-1
   2a4c0:	00000a06 	br	2a4ec <read+0xe0>
        }
        return rval;
   2a4c4:	e0bffc17 	ldw	r2,-16(fp)
   2a4c8:	00000806 	br	2a4ec <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2a4cc:	002a3bc0 	call	2a3bc <alt_get_errno>
   2a4d0:	00c00344 	movi	r3,13
   2a4d4:	10c00015 	stw	r3,0(r2)
   2a4d8:	00000306 	br	2a4e8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2a4dc:	002a3bc0 	call	2a3bc <alt_get_errno>
   2a4e0:	00c01444 	movi	r3,81
   2a4e4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a4e8:	00bfffc4 	movi	r2,-1
}
   2a4ec:	e037883a 	mov	sp,fp
   2a4f0:	dfc00117 	ldw	ra,4(sp)
   2a4f4:	df000017 	ldw	fp,0(sp)
   2a4f8:	dec00204 	addi	sp,sp,8
   2a4fc:	f800283a 	ret

0002a500 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2a500:	defffc04 	addi	sp,sp,-16
   2a504:	dfc00315 	stw	ra,12(sp)
   2a508:	df000215 	stw	fp,8(sp)
   2a50c:	dc000115 	stw	r16,4(sp)
   2a510:	df000104 	addi	fp,sp,4
   2a514:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2a518:	e0bfff17 	ldw	r2,-4(fp)
   2a51c:	108000d0 	cmplti	r2,r2,3
   2a520:	1000111e 	bne	r2,zero,2a568 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2a524:	040001f4 	movhi	r16,7
   2a528:	8434f504 	addi	r16,r16,-11308
   2a52c:	e0bfff17 	ldw	r2,-4(fp)
   2a530:	1009883a 	mov	r4,r2
   2a534:	01400304 	movi	r5,12
   2a538:	00297540 	call	29754 <__mulsi3>
   2a53c:	8085883a 	add	r2,r16,r2
   2a540:	10800204 	addi	r2,r2,8
   2a544:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2a548:	040001f4 	movhi	r16,7
   2a54c:	8434f504 	addi	r16,r16,-11308
   2a550:	e0bfff17 	ldw	r2,-4(fp)
   2a554:	1009883a 	mov	r4,r2
   2a558:	01400304 	movi	r5,12
   2a55c:	00297540 	call	29754 <__mulsi3>
   2a560:	8085883a 	add	r2,r16,r2
   2a564:	10000015 	stw	zero,0(r2)
  }
}
   2a568:	e037883a 	mov	sp,fp
   2a56c:	dfc00217 	ldw	ra,8(sp)
   2a570:	df000117 	ldw	fp,4(sp)
   2a574:	dc000017 	ldw	r16,0(sp)
   2a578:	dec00304 	addi	sp,sp,12
   2a57c:	f800283a 	ret

0002a580 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2a580:	defff904 	addi	sp,sp,-28
   2a584:	df000615 	stw	fp,24(sp)
   2a588:	df000604 	addi	fp,sp,24
   2a58c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a590:	0005303a 	rdctl	r2,status
   2a594:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a598:	e0fffc17 	ldw	r3,-16(fp)
   2a59c:	00bfff84 	movi	r2,-2
   2a5a0:	1884703a 	and	r2,r3,r2
   2a5a4:	1001703a 	wrctl	status,r2
  
  return context;
   2a5a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2a5ac:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2a5b0:	d0a00b17 	ldw	r2,-32724(gp)
   2a5b4:	10c000c4 	addi	r3,r2,3
   2a5b8:	00bfff04 	movi	r2,-4
   2a5bc:	1884703a 	and	r2,r3,r2
   2a5c0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2a5c4:	d0e00b17 	ldw	r3,-32724(gp)
   2a5c8:	e0bfff17 	ldw	r2,-4(fp)
   2a5cc:	1885883a 	add	r2,r3,r2
   2a5d0:	00c00234 	movhi	r3,8
   2a5d4:	18e40004 	addi	r3,r3,-28672
   2a5d8:	1880062e 	bgeu	r3,r2,2a5f4 <sbrk+0x74>
   2a5dc:	e0bffa17 	ldw	r2,-24(fp)
   2a5e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a5e4:	e0bffd17 	ldw	r2,-12(fp)
   2a5e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2a5ec:	00bfffc4 	movi	r2,-1
   2a5f0:	00000b06 	br	2a620 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2a5f4:	d0a00b17 	ldw	r2,-32724(gp)
   2a5f8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2a5fc:	d0e00b17 	ldw	r3,-32724(gp)
   2a600:	e0bfff17 	ldw	r2,-4(fp)
   2a604:	1885883a 	add	r2,r3,r2
   2a608:	d0a00b15 	stw	r2,-32724(gp)
   2a60c:	e0bffa17 	ldw	r2,-24(fp)
   2a610:	e0bffe15 	stw	r2,-8(fp)
   2a614:	e0bffe17 	ldw	r2,-8(fp)
   2a618:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2a61c:	e0bffb17 	ldw	r2,-20(fp)
} 
   2a620:	e037883a 	mov	sp,fp
   2a624:	df000017 	ldw	fp,0(sp)
   2a628:	dec00104 	addi	sp,sp,4
   2a62c:	f800283a 	ret

0002a630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a630:	defffe04 	addi	sp,sp,-8
   2a634:	dfc00115 	stw	ra,4(sp)
   2a638:	df000015 	stw	fp,0(sp)
   2a63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a640:	008001f4 	movhi	r2,7
   2a644:	10b97704 	addi	r2,r2,-6692
   2a648:	10800017 	ldw	r2,0(r2)
   2a64c:	10000526 	beq	r2,zero,2a664 <alt_get_errno+0x34>
   2a650:	008001f4 	movhi	r2,7
   2a654:	10b97704 	addi	r2,r2,-6692
   2a658:	10800017 	ldw	r2,0(r2)
   2a65c:	103ee83a 	callr	r2
   2a660:	00000206 	br	2a66c <alt_get_errno+0x3c>
   2a664:	008001f4 	movhi	r2,7
   2a668:	10b98704 	addi	r2,r2,-6628
}
   2a66c:	e037883a 	mov	sp,fp
   2a670:	dfc00117 	ldw	ra,4(sp)
   2a674:	df000017 	ldw	fp,0(sp)
   2a678:	dec00204 	addi	sp,sp,8
   2a67c:	f800283a 	ret

0002a680 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2a680:	defff904 	addi	sp,sp,-28
   2a684:	dfc00615 	stw	ra,24(sp)
   2a688:	df000515 	stw	fp,20(sp)
   2a68c:	df000504 	addi	fp,sp,20
   2a690:	e13ffd15 	stw	r4,-12(fp)
   2a694:	e17ffe15 	stw	r5,-8(fp)
   2a698:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a69c:	e0bffd17 	ldw	r2,-12(fp)
   2a6a0:	10000716 	blt	r2,zero,2a6c0 <write+0x40>
   2a6a4:	e13ffd17 	ldw	r4,-12(fp)
   2a6a8:	01400304 	movi	r5,12
   2a6ac:	00297540 	call	29754 <__mulsi3>
   2a6b0:	00c001f4 	movhi	r3,7
   2a6b4:	18f4f504 	addi	r3,r3,-11308
   2a6b8:	10c5883a 	add	r2,r2,r3
   2a6bc:	00000106 	br	2a6c4 <write+0x44>
   2a6c0:	0005883a 	mov	r2,zero
   2a6c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a6c8:	e0bffb17 	ldw	r2,-20(fp)
   2a6cc:	10001f26 	beq	r2,zero,2a74c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2a6d0:	e0bffb17 	ldw	r2,-20(fp)
   2a6d4:	10800217 	ldw	r2,8(r2)
   2a6d8:	108000cc 	andi	r2,r2,3
   2a6dc:	10001726 	beq	r2,zero,2a73c <write+0xbc>
   2a6e0:	e0bffb17 	ldw	r2,-20(fp)
   2a6e4:	10800017 	ldw	r2,0(r2)
   2a6e8:	10800617 	ldw	r2,24(r2)
   2a6ec:	10001326 	beq	r2,zero,2a73c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2a6f0:	e0bffb17 	ldw	r2,-20(fp)
   2a6f4:	10800017 	ldw	r2,0(r2)
   2a6f8:	10c00617 	ldw	r3,24(r2)
   2a6fc:	e0bfff17 	ldw	r2,-4(fp)
   2a700:	e13ffb17 	ldw	r4,-20(fp)
   2a704:	e17ffe17 	ldw	r5,-8(fp)
   2a708:	100d883a 	mov	r6,r2
   2a70c:	183ee83a 	callr	r3
   2a710:	e0bffc15 	stw	r2,-16(fp)
   2a714:	e0bffc17 	ldw	r2,-16(fp)
   2a718:	1000060e 	bge	r2,zero,2a734 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2a71c:	002a6300 	call	2a630 <alt_get_errno>
   2a720:	e0fffc17 	ldw	r3,-16(fp)
   2a724:	00c7c83a 	sub	r3,zero,r3
   2a728:	10c00015 	stw	r3,0(r2)
        return -1;
   2a72c:	00bfffc4 	movi	r2,-1
   2a730:	00000a06 	br	2a75c <write+0xdc>
      }
      return rval;
   2a734:	e0bffc17 	ldw	r2,-16(fp)
   2a738:	00000806 	br	2a75c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2a73c:	002a6300 	call	2a630 <alt_get_errno>
   2a740:	00c00344 	movi	r3,13
   2a744:	10c00015 	stw	r3,0(r2)
   2a748:	00000306 	br	2a758 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2a74c:	002a6300 	call	2a630 <alt_get_errno>
   2a750:	00c01444 	movi	r3,81
   2a754:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a758:	00bfffc4 	movi	r2,-1
}
   2a75c:	e037883a 	mov	sp,fp
   2a760:	dfc00117 	ldw	ra,4(sp)
   2a764:	df000017 	ldw	fp,0(sp)
   2a768:	dec00204 	addi	sp,sp,8
   2a76c:	f800283a 	ret

0002a770 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2a770:	defffd04 	addi	sp,sp,-12
   2a774:	dfc00215 	stw	ra,8(sp)
   2a778:	df000115 	stw	fp,4(sp)
   2a77c:	df000104 	addi	fp,sp,4
   2a780:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2a784:	e13fff17 	ldw	r4,-4(fp)
   2a788:	014001f4 	movhi	r5,7
   2a78c:	29797404 	addi	r5,r5,-6704
   2a790:	002b5480 	call	2b548 <alt_dev_llist_insert>
}
   2a794:	e037883a 	mov	sp,fp
   2a798:	dfc00117 	ldw	ra,4(sp)
   2a79c:	df000017 	ldw	fp,0(sp)
   2a7a0:	dec00204 	addi	sp,sp,8
   2a7a4:	f800283a 	ret

0002a7a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2a7a8:	defffd04 	addi	sp,sp,-12
   2a7ac:	dfc00215 	stw	ra,8(sp)
   2a7b0:	df000115 	stw	fp,4(sp)
   2a7b4:	df000104 	addi	fp,sp,4
   2a7b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   2a7bc:	002bf100 	call	2bf10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2a7c0:	00800044 	movi	r2,1
   2a7c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2a7c8:	e037883a 	mov	sp,fp
   2a7cc:	dfc00117 	ldw	ra,4(sp)
   2a7d0:	df000017 	ldw	fp,0(sp)
   2a7d4:	dec00204 	addi	sp,sp,8
   2a7d8:	f800283a 	ret

0002a7dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2a7dc:	defffe04 	addi	sp,sp,-8
   2a7e0:	dfc00115 	stw	ra,4(sp)
   2a7e4:	df000015 	stw	fp,0(sp)
   2a7e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   2a7ec:	01000134 	movhi	r4,4
   2a7f0:	21040004 	addi	r4,r4,4096
   2a7f4:	000b883a 	mov	r5,zero
   2a7f8:	01800044 	movi	r6,1
   2a7fc:	01c0fa04 	movi	r7,1000
   2a800:	002b3140 	call	2b314 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   2a804:	010001f4 	movhi	r4,7
   2a808:	21355f04 	addi	r4,r4,-10884
   2a80c:	000b883a 	mov	r5,zero
   2a810:	01800404 	movi	r6,16
   2a814:	002a9a00 	call	2a9a0 <altera_avalon_jtag_uart_init>
   2a818:	010001f4 	movhi	r4,7
   2a81c:	21355504 	addi	r4,r4,-10924
   2a820:	002a7700 	call	2a770 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1, sysid_1);
   2a824:	0001883a 	nop
}
   2a828:	e037883a 	mov	sp,fp
   2a82c:	dfc00117 	ldw	ra,4(sp)
   2a830:	df000017 	ldw	fp,0(sp)
   2a834:	dec00204 	addi	sp,sp,8
   2a838:	f800283a 	ret

0002a83c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2a83c:	defffa04 	addi	sp,sp,-24
   2a840:	dfc00515 	stw	ra,20(sp)
   2a844:	df000415 	stw	fp,16(sp)
   2a848:	df000404 	addi	fp,sp,16
   2a84c:	e13ffd15 	stw	r4,-12(fp)
   2a850:	e17ffe15 	stw	r5,-8(fp)
   2a854:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2a858:	e0bffd17 	ldw	r2,-12(fp)
   2a85c:	10800017 	ldw	r2,0(r2)
   2a860:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2a864:	e0bffc17 	ldw	r2,-16(fp)
   2a868:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2a86c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2a870:	10800217 	ldw	r2,8(r2)
   2a874:	1809883a 	mov	r4,r3
   2a878:	e17ffe17 	ldw	r5,-8(fp)
   2a87c:	e1bfff17 	ldw	r6,-4(fp)
   2a880:	100f883a 	mov	r7,r2
   2a884:	002ae640 	call	2ae64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2a888:	e037883a 	mov	sp,fp
   2a88c:	dfc00117 	ldw	ra,4(sp)
   2a890:	df000017 	ldw	fp,0(sp)
   2a894:	dec00204 	addi	sp,sp,8
   2a898:	f800283a 	ret

0002a89c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2a89c:	defffa04 	addi	sp,sp,-24
   2a8a0:	dfc00515 	stw	ra,20(sp)
   2a8a4:	df000415 	stw	fp,16(sp)
   2a8a8:	df000404 	addi	fp,sp,16
   2a8ac:	e13ffd15 	stw	r4,-12(fp)
   2a8b0:	e17ffe15 	stw	r5,-8(fp)
   2a8b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2a8b8:	e0bffd17 	ldw	r2,-12(fp)
   2a8bc:	10800017 	ldw	r2,0(r2)
   2a8c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2a8c4:	e0bffc17 	ldw	r2,-16(fp)
   2a8c8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2a8cc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2a8d0:	10800217 	ldw	r2,8(r2)
   2a8d4:	1809883a 	mov	r4,r3
   2a8d8:	e17ffe17 	ldw	r5,-8(fp)
   2a8dc:	e1bfff17 	ldw	r6,-4(fp)
   2a8e0:	100f883a 	mov	r7,r2
   2a8e4:	002b07c0 	call	2b07c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2a8e8:	e037883a 	mov	sp,fp
   2a8ec:	dfc00117 	ldw	ra,4(sp)
   2a8f0:	df000017 	ldw	fp,0(sp)
   2a8f4:	dec00204 	addi	sp,sp,8
   2a8f8:	f800283a 	ret

0002a8fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2a8fc:	defffc04 	addi	sp,sp,-16
   2a900:	dfc00315 	stw	ra,12(sp)
   2a904:	df000215 	stw	fp,8(sp)
   2a908:	df000204 	addi	fp,sp,8
   2a90c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2a910:	e0bfff17 	ldw	r2,-4(fp)
   2a914:	10800017 	ldw	r2,0(r2)
   2a918:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2a91c:	e0bffe17 	ldw	r2,-8(fp)
   2a920:	10c00a04 	addi	r3,r2,40
   2a924:	e0bfff17 	ldw	r2,-4(fp)
   2a928:	10800217 	ldw	r2,8(r2)
   2a92c:	1809883a 	mov	r4,r3
   2a930:	100b883a 	mov	r5,r2
   2a934:	002ad080 	call	2ad08 <altera_avalon_jtag_uart_close>
}
   2a938:	e037883a 	mov	sp,fp
   2a93c:	dfc00117 	ldw	ra,4(sp)
   2a940:	df000017 	ldw	fp,0(sp)
   2a944:	dec00204 	addi	sp,sp,8
   2a948:	f800283a 	ret

0002a94c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2a94c:	defffa04 	addi	sp,sp,-24
   2a950:	dfc00515 	stw	ra,20(sp)
   2a954:	df000415 	stw	fp,16(sp)
   2a958:	df000404 	addi	fp,sp,16
   2a95c:	e13ffd15 	stw	r4,-12(fp)
   2a960:	e17ffe15 	stw	r5,-8(fp)
   2a964:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2a968:	e0bffd17 	ldw	r2,-12(fp)
   2a96c:	10800017 	ldw	r2,0(r2)
   2a970:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2a974:	e0bffc17 	ldw	r2,-16(fp)
   2a978:	10800a04 	addi	r2,r2,40
   2a97c:	1009883a 	mov	r4,r2
   2a980:	e17ffe17 	ldw	r5,-8(fp)
   2a984:	e1bfff17 	ldw	r6,-4(fp)
   2a988:	002ad700 	call	2ad70 <altera_avalon_jtag_uart_ioctl>
}
   2a98c:	e037883a 	mov	sp,fp
   2a990:	dfc00117 	ldw	ra,4(sp)
   2a994:	df000017 	ldw	fp,0(sp)
   2a998:	dec00204 	addi	sp,sp,8
   2a99c:	f800283a 	ret

0002a9a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2a9a0:	defffa04 	addi	sp,sp,-24
   2a9a4:	dfc00515 	stw	ra,20(sp)
   2a9a8:	df000415 	stw	fp,16(sp)
   2a9ac:	df000404 	addi	fp,sp,16
   2a9b0:	e13ffd15 	stw	r4,-12(fp)
   2a9b4:	e17ffe15 	stw	r5,-8(fp)
   2a9b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2a9bc:	e0bffd17 	ldw	r2,-12(fp)
   2a9c0:	00c00044 	movi	r3,1
   2a9c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2a9c8:	e0bffd17 	ldw	r2,-12(fp)
   2a9cc:	10800017 	ldw	r2,0(r2)
   2a9d0:	10800104 	addi	r2,r2,4
   2a9d4:	e0fffd17 	ldw	r3,-12(fp)
   2a9d8:	18c00817 	ldw	r3,32(r3)
   2a9dc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2a9e0:	e0fffe17 	ldw	r3,-8(fp)
   2a9e4:	e0bfff17 	ldw	r2,-4(fp)
   2a9e8:	d8000015 	stw	zero,0(sp)
   2a9ec:	1809883a 	mov	r4,r3
   2a9f0:	100b883a 	mov	r5,r2
   2a9f4:	018000f4 	movhi	r6,3
   2a9f8:	31aa9804 	addi	r6,r6,-21920
   2a9fc:	e1fffd17 	ldw	r7,-12(fp)
   2aa00:	002b6bc0 	call	2b6bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2aa04:	e0bffd17 	ldw	r2,-12(fp)
   2aa08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2aa0c:	e0bffd17 	ldw	r2,-12(fp)
   2aa10:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2aa14:	008001f4 	movhi	r2,7
   2aa18:	10b98c04 	addi	r2,r2,-6608
   2aa1c:	10800017 	ldw	r2,0(r2)
   2aa20:	1809883a 	mov	r4,r3
   2aa24:	100b883a 	mov	r5,r2
   2aa28:	018000f4 	movhi	r6,3
   2aa2c:	31ab1904 	addi	r6,r6,-21404
   2aa30:	e1fffd17 	ldw	r7,-12(fp)
   2aa34:	002b39c0 	call	2b39c <alt_alarm_start>
   2aa38:	1000040e 	bge	r2,zero,2aa4c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2aa3c:	e0bffd17 	ldw	r2,-12(fp)
   2aa40:	00e00034 	movhi	r3,32768
   2aa44:	18ffffc4 	addi	r3,r3,-1
   2aa48:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2aa4c:	e037883a 	mov	sp,fp
   2aa50:	dfc00117 	ldw	ra,4(sp)
   2aa54:	df000017 	ldw	fp,0(sp)
   2aa58:	dec00204 	addi	sp,sp,8
   2aa5c:	f800283a 	ret

0002aa60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2aa60:	defff804 	addi	sp,sp,-32
   2aa64:	df000715 	stw	fp,28(sp)
   2aa68:	df000704 	addi	fp,sp,28
   2aa6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2aa70:	e0bfff17 	ldw	r2,-4(fp)
   2aa74:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2aa78:	e0bffb17 	ldw	r2,-20(fp)
   2aa7c:	10800017 	ldw	r2,0(r2)
   2aa80:	e0bffc15 	stw	r2,-16(fp)
   2aa84:	00000106 	br	2aa8c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2aa88:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2aa8c:	e0bffc17 	ldw	r2,-16(fp)
   2aa90:	10800104 	addi	r2,r2,4
   2aa94:	10800037 	ldwio	r2,0(r2)
   2aa98:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2aa9c:	e0bffd17 	ldw	r2,-12(fp)
   2aaa0:	1080c00c 	andi	r2,r2,768
   2aaa4:	10006a26 	beq	r2,zero,2ac50 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2aaa8:	e0bffd17 	ldw	r2,-12(fp)
   2aaac:	1080400c 	andi	r2,r2,256
   2aab0:	10003326 	beq	r2,zero,2ab80 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2aab4:	00800074 	movhi	r2,1
   2aab8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2aabc:	e0bffb17 	ldw	r2,-20(fp)
   2aac0:	10800a17 	ldw	r2,40(r2)
   2aac4:	10800044 	addi	r2,r2,1
   2aac8:	1081ffcc 	andi	r2,r2,2047
   2aacc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2aad0:	e0bffb17 	ldw	r2,-20(fp)
   2aad4:	10c00b17 	ldw	r3,44(r2)
   2aad8:	e0bffe17 	ldw	r2,-8(fp)
   2aadc:	18801426 	beq	r3,r2,2ab30 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2aae0:	e0bffc17 	ldw	r2,-16(fp)
   2aae4:	10800037 	ldwio	r2,0(r2)
   2aae8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2aaec:	e0bff917 	ldw	r2,-28(fp)
   2aaf0:	10a0000c 	andi	r2,r2,32768
   2aaf4:	10001026 	beq	r2,zero,2ab38 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2aaf8:	e0bffb17 	ldw	r2,-20(fp)
   2aafc:	10800a17 	ldw	r2,40(r2)
   2ab00:	e0fff917 	ldw	r3,-28(fp)
   2ab04:	e13ffb17 	ldw	r4,-20(fp)
   2ab08:	2085883a 	add	r2,r4,r2
   2ab0c:	10800e04 	addi	r2,r2,56
   2ab10:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ab14:	e0bffb17 	ldw	r2,-20(fp)
   2ab18:	10800a17 	ldw	r2,40(r2)
   2ab1c:	10800044 	addi	r2,r2,1
   2ab20:	10c1ffcc 	andi	r3,r2,2047
   2ab24:	e0bffb17 	ldw	r2,-20(fp)
   2ab28:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2ab2c:	003fe306 	br	2aabc <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2ab30:	0001883a 	nop
   2ab34:	00000106 	br	2ab3c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2ab38:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2ab3c:	e0bff917 	ldw	r2,-28(fp)
   2ab40:	10bfffec 	andhi	r2,r2,65535
   2ab44:	10000e26 	beq	r2,zero,2ab80 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ab48:	e0bffb17 	ldw	r2,-20(fp)
   2ab4c:	10c00817 	ldw	r3,32(r2)
   2ab50:	00bfff84 	movi	r2,-2
   2ab54:	1886703a 	and	r3,r3,r2
   2ab58:	e0bffb17 	ldw	r2,-20(fp)
   2ab5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2ab60:	e0bffc17 	ldw	r2,-16(fp)
   2ab64:	10800104 	addi	r2,r2,4
   2ab68:	e0fffb17 	ldw	r3,-20(fp)
   2ab6c:	18c00817 	ldw	r3,32(r3)
   2ab70:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ab74:	e0bffc17 	ldw	r2,-16(fp)
   2ab78:	10800104 	addi	r2,r2,4
   2ab7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2ab80:	e0bffd17 	ldw	r2,-12(fp)
   2ab84:	1080800c 	andi	r2,r2,512
   2ab88:	103fbf26 	beq	r2,zero,2aa88 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2ab8c:	e0bffd17 	ldw	r2,-12(fp)
   2ab90:	1004d43a 	srli	r2,r2,16
   2ab94:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ab98:	00001406 	br	2abec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2ab9c:	e0bffc17 	ldw	r2,-16(fp)
   2aba0:	e0fffb17 	ldw	r3,-20(fp)
   2aba4:	18c00d17 	ldw	r3,52(r3)
   2aba8:	e13ffb17 	ldw	r4,-20(fp)
   2abac:	20c7883a 	add	r3,r4,r3
   2abb0:	18c20e04 	addi	r3,r3,2104
   2abb4:	18c00003 	ldbu	r3,0(r3)
   2abb8:	18c03fcc 	andi	r3,r3,255
   2abbc:	18c0201c 	xori	r3,r3,128
   2abc0:	18ffe004 	addi	r3,r3,-128
   2abc4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2abc8:	e0bffb17 	ldw	r2,-20(fp)
   2abcc:	10800d17 	ldw	r2,52(r2)
   2abd0:	10800044 	addi	r2,r2,1
   2abd4:	10c1ffcc 	andi	r3,r2,2047
   2abd8:	e0bffb17 	ldw	r2,-20(fp)
   2abdc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2abe0:	e0bffa17 	ldw	r2,-24(fp)
   2abe4:	10bfffc4 	addi	r2,r2,-1
   2abe8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2abec:	e0bffa17 	ldw	r2,-24(fp)
   2abf0:	10000526 	beq	r2,zero,2ac08 <altera_avalon_jtag_uart_irq+0x1a8>
   2abf4:	e0bffb17 	ldw	r2,-20(fp)
   2abf8:	10c00d17 	ldw	r3,52(r2)
   2abfc:	e0bffb17 	ldw	r2,-20(fp)
   2ac00:	10800c17 	ldw	r2,48(r2)
   2ac04:	18bfe51e 	bne	r3,r2,2ab9c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2ac08:	e0bffa17 	ldw	r2,-24(fp)
   2ac0c:	103f9e26 	beq	r2,zero,2aa88 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ac10:	e0bffb17 	ldw	r2,-20(fp)
   2ac14:	10c00817 	ldw	r3,32(r2)
   2ac18:	00bfff44 	movi	r2,-3
   2ac1c:	1886703a 	and	r3,r3,r2
   2ac20:	e0bffb17 	ldw	r2,-20(fp)
   2ac24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ac28:	e0bffb17 	ldw	r2,-20(fp)
   2ac2c:	10800017 	ldw	r2,0(r2)
   2ac30:	10800104 	addi	r2,r2,4
   2ac34:	e0fffb17 	ldw	r3,-20(fp)
   2ac38:	18c00817 	ldw	r3,32(r3)
   2ac3c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ac40:	e0bffc17 	ldw	r2,-16(fp)
   2ac44:	10800104 	addi	r2,r2,4
   2ac48:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ac4c:	003f8e06 	br	2aa88 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ac50:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ac54:	e037883a 	mov	sp,fp
   2ac58:	df000017 	ldw	fp,0(sp)
   2ac5c:	dec00104 	addi	sp,sp,4
   2ac60:	f800283a 	ret

0002ac64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2ac64:	defffc04 	addi	sp,sp,-16
   2ac68:	df000315 	stw	fp,12(sp)
   2ac6c:	df000304 	addi	fp,sp,12
   2ac70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2ac74:	e0bfff17 	ldw	r2,-4(fp)
   2ac78:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2ac7c:	e0bffd17 	ldw	r2,-12(fp)
   2ac80:	10800017 	ldw	r2,0(r2)
   2ac84:	10800104 	addi	r2,r2,4
   2ac88:	10800037 	ldwio	r2,0(r2)
   2ac8c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2ac90:	e0bffe17 	ldw	r2,-8(fp)
   2ac94:	1081000c 	andi	r2,r2,1024
   2ac98:	10000a26 	beq	r2,zero,2acc4 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2ac9c:	e0bffd17 	ldw	r2,-12(fp)
   2aca0:	10800017 	ldw	r2,0(r2)
   2aca4:	10800104 	addi	r2,r2,4
   2aca8:	e0fffd17 	ldw	r3,-12(fp)
   2acac:	18c00817 	ldw	r3,32(r3)
   2acb0:	18c10014 	ori	r3,r3,1024
   2acb4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2acb8:	e0bffd17 	ldw	r2,-12(fp)
   2acbc:	10000915 	stw	zero,36(r2)
   2acc0:	00000a06 	br	2acec <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2acc4:	e0bffd17 	ldw	r2,-12(fp)
   2acc8:	10800917 	ldw	r2,36(r2)
   2accc:	00e00034 	movhi	r3,32768
   2acd0:	18ffff04 	addi	r3,r3,-4
   2acd4:	18800536 	bltu	r3,r2,2acec <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2acd8:	e0bffd17 	ldw	r2,-12(fp)
   2acdc:	10800917 	ldw	r2,36(r2)
   2ace0:	10c00044 	addi	r3,r2,1
   2ace4:	e0bffd17 	ldw	r2,-12(fp)
   2ace8:	10c00915 	stw	r3,36(r2)
   2acec:	008001f4 	movhi	r2,7
   2acf0:	10b98c04 	addi	r2,r2,-6608
   2acf4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2acf8:	e037883a 	mov	sp,fp
   2acfc:	df000017 	ldw	fp,0(sp)
   2ad00:	dec00104 	addi	sp,sp,4
   2ad04:	f800283a 	ret

0002ad08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2ad08:	defffd04 	addi	sp,sp,-12
   2ad0c:	df000215 	stw	fp,8(sp)
   2ad10:	df000204 	addi	fp,sp,8
   2ad14:	e13ffe15 	stw	r4,-8(fp)
   2ad18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2ad1c:	00000506 	br	2ad34 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2ad20:	e0bfff17 	ldw	r2,-4(fp)
   2ad24:	1090000c 	andi	r2,r2,16384
   2ad28:	10000226 	beq	r2,zero,2ad34 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2ad2c:	00bffd44 	movi	r2,-11
   2ad30:	00000b06 	br	2ad60 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2ad34:	e0bffe17 	ldw	r2,-8(fp)
   2ad38:	10c00d17 	ldw	r3,52(r2)
   2ad3c:	e0bffe17 	ldw	r2,-8(fp)
   2ad40:	10800c17 	ldw	r2,48(r2)
   2ad44:	18800526 	beq	r3,r2,2ad5c <altera_avalon_jtag_uart_close+0x54>
   2ad48:	e0bffe17 	ldw	r2,-8(fp)
   2ad4c:	10c00917 	ldw	r3,36(r2)
   2ad50:	e0bffe17 	ldw	r2,-8(fp)
   2ad54:	10800117 	ldw	r2,4(r2)
   2ad58:	18bff136 	bltu	r3,r2,2ad20 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2ad5c:	0005883a 	mov	r2,zero
}
   2ad60:	e037883a 	mov	sp,fp
   2ad64:	df000017 	ldw	fp,0(sp)
   2ad68:	dec00104 	addi	sp,sp,4
   2ad6c:	f800283a 	ret

0002ad70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2ad70:	defffa04 	addi	sp,sp,-24
   2ad74:	df000515 	stw	fp,20(sp)
   2ad78:	df000504 	addi	fp,sp,20
   2ad7c:	e13ffd15 	stw	r4,-12(fp)
   2ad80:	e17ffe15 	stw	r5,-8(fp)
   2ad84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2ad88:	00bff9c4 	movi	r2,-25
   2ad8c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2ad90:	e0bffe17 	ldw	r2,-8(fp)
   2ad94:	10da8060 	cmpeqi	r3,r2,27137
   2ad98:	1800031e 	bne	r3,zero,2ada8 <altera_avalon_jtag_uart_ioctl+0x38>
   2ad9c:	109a80a0 	cmpeqi	r2,r2,27138
   2ada0:	1000181e 	bne	r2,zero,2ae04 <altera_avalon_jtag_uart_ioctl+0x94>
   2ada4:	00002606 	br	2ae40 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2ada8:	e0bffd17 	ldw	r2,-12(fp)
   2adac:	10c00117 	ldw	r3,4(r2)
   2adb0:	00a00034 	movhi	r2,32768
   2adb4:	10bfffc4 	addi	r2,r2,-1
   2adb8:	18802226 	beq	r3,r2,2ae44 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   2adbc:	e0bfff17 	ldw	r2,-4(fp)
   2adc0:	10800017 	ldw	r2,0(r2)
   2adc4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2adc8:	e0bffc17 	ldw	r2,-16(fp)
   2adcc:	10800090 	cmplti	r2,r2,2
   2add0:	1000061e 	bne	r2,zero,2adec <altera_avalon_jtag_uart_ioctl+0x7c>
   2add4:	e0fffc17 	ldw	r3,-16(fp)
   2add8:	00a00034 	movhi	r2,32768
   2addc:	10bfffc4 	addi	r2,r2,-1
   2ade0:	18800226 	beq	r3,r2,2adec <altera_avalon_jtag_uart_ioctl+0x7c>
   2ade4:	e0bffc17 	ldw	r2,-16(fp)
   2ade8:	00000206 	br	2adf4 <altera_avalon_jtag_uart_ioctl+0x84>
   2adec:	00a00034 	movhi	r2,32768
   2adf0:	10bfff84 	addi	r2,r2,-2
   2adf4:	e0fffd17 	ldw	r3,-12(fp)
   2adf8:	18800115 	stw	r2,4(r3)
      rc = 0;
   2adfc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ae00:	00001006 	br	2ae44 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2ae04:	e0bffd17 	ldw	r2,-12(fp)
   2ae08:	10c00117 	ldw	r3,4(r2)
   2ae0c:	00a00034 	movhi	r2,32768
   2ae10:	10bfffc4 	addi	r2,r2,-1
   2ae14:	18800d26 	beq	r3,r2,2ae4c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2ae18:	e0bffd17 	ldw	r2,-12(fp)
   2ae1c:	10c00917 	ldw	r3,36(r2)
   2ae20:	e0bffd17 	ldw	r2,-12(fp)
   2ae24:	10800117 	ldw	r2,4(r2)
   2ae28:	1885803a 	cmpltu	r2,r3,r2
   2ae2c:	10c03fcc 	andi	r3,r2,255
   2ae30:	e0bfff17 	ldw	r2,-4(fp)
   2ae34:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2ae38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ae3c:	00000306 	br	2ae4c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   2ae40:	00000306 	br	2ae50 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2ae44:	0001883a 	nop
   2ae48:	00000106 	br	2ae50 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2ae4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2ae50:	e0bffb17 	ldw	r2,-20(fp)
}
   2ae54:	e037883a 	mov	sp,fp
   2ae58:	df000017 	ldw	fp,0(sp)
   2ae5c:	dec00104 	addi	sp,sp,4
   2ae60:	f800283a 	ret

0002ae64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2ae64:	defff304 	addi	sp,sp,-52
   2ae68:	dfc00c15 	stw	ra,48(sp)
   2ae6c:	df000b15 	stw	fp,44(sp)
   2ae70:	df000b04 	addi	fp,sp,44
   2ae74:	e13ffc15 	stw	r4,-16(fp)
   2ae78:	e17ffd15 	stw	r5,-12(fp)
   2ae7c:	e1bffe15 	stw	r6,-8(fp)
   2ae80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2ae84:	e0bffd17 	ldw	r2,-12(fp)
   2ae88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ae8c:	00004706 	br	2afac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2ae90:	e0bffc17 	ldw	r2,-16(fp)
   2ae94:	10800a17 	ldw	r2,40(r2)
   2ae98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2ae9c:	e0bffc17 	ldw	r2,-16(fp)
   2aea0:	10800b17 	ldw	r2,44(r2)
   2aea4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2aea8:	e0fff717 	ldw	r3,-36(fp)
   2aeac:	e0bff817 	ldw	r2,-32(fp)
   2aeb0:	18800536 	bltu	r3,r2,2aec8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2aeb4:	e0fff717 	ldw	r3,-36(fp)
   2aeb8:	e0bff817 	ldw	r2,-32(fp)
   2aebc:	1885c83a 	sub	r2,r3,r2
   2aec0:	e0bff615 	stw	r2,-40(fp)
   2aec4:	00000406 	br	2aed8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2aec8:	00c20004 	movi	r3,2048
   2aecc:	e0bff817 	ldw	r2,-32(fp)
   2aed0:	1885c83a 	sub	r2,r3,r2
   2aed4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2aed8:	e0bff617 	ldw	r2,-40(fp)
   2aedc:	10001e26 	beq	r2,zero,2af58 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2aee0:	e0fffe17 	ldw	r3,-8(fp)
   2aee4:	e0bff617 	ldw	r2,-40(fp)
   2aee8:	1880022e 	bgeu	r3,r2,2aef4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2aeec:	e0bffe17 	ldw	r2,-8(fp)
   2aef0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2aef4:	e0bff817 	ldw	r2,-32(fp)
   2aef8:	10800e04 	addi	r2,r2,56
   2aefc:	e0fffc17 	ldw	r3,-16(fp)
   2af00:	1885883a 	add	r2,r3,r2
   2af04:	e13ff517 	ldw	r4,-44(fp)
   2af08:	100b883a 	mov	r5,r2
   2af0c:	e1bff617 	ldw	r6,-40(fp)
   2af10:	0025b3c0 	call	25b3c <memcpy>
      ptr   += n;
   2af14:	e0fff517 	ldw	r3,-44(fp)
   2af18:	e0bff617 	ldw	r2,-40(fp)
   2af1c:	1885883a 	add	r2,r3,r2
   2af20:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2af24:	e0fffe17 	ldw	r3,-8(fp)
   2af28:	e0bff617 	ldw	r2,-40(fp)
   2af2c:	1885c83a 	sub	r2,r3,r2
   2af30:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2af34:	e0fff817 	ldw	r3,-32(fp)
   2af38:	e0bff617 	ldw	r2,-40(fp)
   2af3c:	1885883a 	add	r2,r3,r2
   2af40:	10c1ffcc 	andi	r3,r2,2047
   2af44:	e0bffc17 	ldw	r2,-16(fp)
   2af48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2af4c:	e0bffe17 	ldw	r2,-8(fp)
   2af50:	00bfcf16 	blt	zero,r2,2ae90 <altera_avalon_jtag_uart_read+0x2c>
   2af54:	00000106 	br	2af5c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2af58:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2af5c:	e0fff517 	ldw	r3,-44(fp)
   2af60:	e0bffd17 	ldw	r2,-12(fp)
   2af64:	1880141e 	bne	r3,r2,2afb8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2af68:	e0bfff17 	ldw	r2,-4(fp)
   2af6c:	1090000c 	andi	r2,r2,16384
   2af70:	1000131e 	bne	r2,zero,2afc0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2af74:	0001883a 	nop
   2af78:	e0bffc17 	ldw	r2,-16(fp)
   2af7c:	10c00a17 	ldw	r3,40(r2)
   2af80:	e0bff717 	ldw	r2,-36(fp)
   2af84:	1880051e 	bne	r3,r2,2af9c <altera_avalon_jtag_uart_read+0x138>
   2af88:	e0bffc17 	ldw	r2,-16(fp)
   2af8c:	10c00917 	ldw	r3,36(r2)
   2af90:	e0bffc17 	ldw	r2,-16(fp)
   2af94:	10800117 	ldw	r2,4(r2)
   2af98:	18bff736 	bltu	r3,r2,2af78 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2af9c:	e0bffc17 	ldw	r2,-16(fp)
   2afa0:	10c00a17 	ldw	r3,40(r2)
   2afa4:	e0bff717 	ldw	r2,-36(fp)
   2afa8:	18800726 	beq	r3,r2,2afc8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2afac:	e0bffe17 	ldw	r2,-8(fp)
   2afb0:	00bfb716 	blt	zero,r2,2ae90 <altera_avalon_jtag_uart_read+0x2c>
   2afb4:	00000506 	br	2afcc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2afb8:	0001883a 	nop
   2afbc:	00000306 	br	2afcc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2afc0:	0001883a 	nop
   2afc4:	00000106 	br	2afcc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2afc8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2afcc:	e0fff517 	ldw	r3,-44(fp)
   2afd0:	e0bffd17 	ldw	r2,-12(fp)
   2afd4:	18801726 	beq	r3,r2,2b034 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2afd8:	0005303a 	rdctl	r2,status
   2afdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2afe0:	e0fffa17 	ldw	r3,-24(fp)
   2afe4:	00bfff84 	movi	r2,-2
   2afe8:	1884703a 	and	r2,r3,r2
   2afec:	1001703a 	wrctl	status,r2
  
  return context;
   2aff0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2aff4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2aff8:	e0bffc17 	ldw	r2,-16(fp)
   2affc:	10800817 	ldw	r2,32(r2)
   2b000:	10c00054 	ori	r3,r2,1
   2b004:	e0bffc17 	ldw	r2,-16(fp)
   2b008:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b00c:	e0bffc17 	ldw	r2,-16(fp)
   2b010:	10800017 	ldw	r2,0(r2)
   2b014:	10800104 	addi	r2,r2,4
   2b018:	e0fffc17 	ldw	r3,-16(fp)
   2b01c:	18c00817 	ldw	r3,32(r3)
   2b020:	10c00035 	stwio	r3,0(r2)
   2b024:	e0bff917 	ldw	r2,-28(fp)
   2b028:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b02c:	e0bffb17 	ldw	r2,-20(fp)
   2b030:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2b034:	e0fff517 	ldw	r3,-44(fp)
   2b038:	e0bffd17 	ldw	r2,-12(fp)
   2b03c:	18800426 	beq	r3,r2,2b050 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   2b040:	e0fff517 	ldw	r3,-44(fp)
   2b044:	e0bffd17 	ldw	r2,-12(fp)
   2b048:	1885c83a 	sub	r2,r3,r2
   2b04c:	00000606 	br	2b068 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   2b050:	e0bfff17 	ldw	r2,-4(fp)
   2b054:	1090000c 	andi	r2,r2,16384
   2b058:	10000226 	beq	r2,zero,2b064 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   2b05c:	00bffd44 	movi	r2,-11
   2b060:	00000106 	br	2b068 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   2b064:	00bffec4 	movi	r2,-5
}
   2b068:	e037883a 	mov	sp,fp
   2b06c:	dfc00117 	ldw	ra,4(sp)
   2b070:	df000017 	ldw	fp,0(sp)
   2b074:	dec00204 	addi	sp,sp,8
   2b078:	f800283a 	ret

0002b07c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2b07c:	defff304 	addi	sp,sp,-52
   2b080:	dfc00c15 	stw	ra,48(sp)
   2b084:	df000b15 	stw	fp,44(sp)
   2b088:	df000b04 	addi	fp,sp,44
   2b08c:	e13ffc15 	stw	r4,-16(fp)
   2b090:	e17ffd15 	stw	r5,-12(fp)
   2b094:	e1bffe15 	stw	r6,-8(fp)
   2b098:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2b09c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2b0a0:	e0bffd17 	ldw	r2,-12(fp)
   2b0a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b0a8:	00003706 	br	2b188 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2b0ac:	e0bffc17 	ldw	r2,-16(fp)
   2b0b0:	10800c17 	ldw	r2,48(r2)
   2b0b4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2b0b8:	e0bffc17 	ldw	r2,-16(fp)
   2b0bc:	10800d17 	ldw	r2,52(r2)
   2b0c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2b0c4:	e0fff817 	ldw	r3,-32(fp)
   2b0c8:	e0bff517 	ldw	r2,-44(fp)
   2b0cc:	1880062e 	bgeu	r3,r2,2b0e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2b0d0:	e0fff517 	ldw	r3,-44(fp)
   2b0d4:	e0bff817 	ldw	r2,-32(fp)
   2b0d8:	1885c83a 	sub	r2,r3,r2
   2b0dc:	10bfffc4 	addi	r2,r2,-1
   2b0e0:	e0bff615 	stw	r2,-40(fp)
   2b0e4:	00000b06 	br	2b114 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2b0e8:	e0bff517 	ldw	r2,-44(fp)
   2b0ec:	10000526 	beq	r2,zero,2b104 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2b0f0:	00c20004 	movi	r3,2048
   2b0f4:	e0bff817 	ldw	r2,-32(fp)
   2b0f8:	1885c83a 	sub	r2,r3,r2
   2b0fc:	e0bff615 	stw	r2,-40(fp)
   2b100:	00000406 	br	2b114 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2b104:	00c1ffc4 	movi	r3,2047
   2b108:	e0bff817 	ldw	r2,-32(fp)
   2b10c:	1885c83a 	sub	r2,r3,r2
   2b110:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b114:	e0bff617 	ldw	r2,-40(fp)
   2b118:	10001e26 	beq	r2,zero,2b194 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2b11c:	e0fffe17 	ldw	r3,-8(fp)
   2b120:	e0bff617 	ldw	r2,-40(fp)
   2b124:	1880022e 	bgeu	r3,r2,2b130 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2b128:	e0bffe17 	ldw	r2,-8(fp)
   2b12c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2b130:	e0bff817 	ldw	r2,-32(fp)
   2b134:	10820e04 	addi	r2,r2,2104
   2b138:	e0fffc17 	ldw	r3,-16(fp)
   2b13c:	1885883a 	add	r2,r3,r2
   2b140:	1009883a 	mov	r4,r2
   2b144:	e17ffd17 	ldw	r5,-12(fp)
   2b148:	e1bff617 	ldw	r6,-40(fp)
   2b14c:	0025b3c0 	call	25b3c <memcpy>
      ptr   += n;
   2b150:	e0fffd17 	ldw	r3,-12(fp)
   2b154:	e0bff617 	ldw	r2,-40(fp)
   2b158:	1885883a 	add	r2,r3,r2
   2b15c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2b160:	e0fffe17 	ldw	r3,-8(fp)
   2b164:	e0bff617 	ldw	r2,-40(fp)
   2b168:	1885c83a 	sub	r2,r3,r2
   2b16c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b170:	e0fff817 	ldw	r3,-32(fp)
   2b174:	e0bff617 	ldw	r2,-40(fp)
   2b178:	1885883a 	add	r2,r3,r2
   2b17c:	10c1ffcc 	andi	r3,r2,2047
   2b180:	e0bffc17 	ldw	r2,-16(fp)
   2b184:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b188:	e0bffe17 	ldw	r2,-8(fp)
   2b18c:	00bfc716 	blt	zero,r2,2b0ac <altera_avalon_jtag_uart_write+0x30>
   2b190:	00000106 	br	2b198 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2b194:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b198:	0005303a 	rdctl	r2,status
   2b19c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b1a0:	e0fffa17 	ldw	r3,-24(fp)
   2b1a4:	00bfff84 	movi	r2,-2
   2b1a8:	1884703a 	and	r2,r3,r2
   2b1ac:	1001703a 	wrctl	status,r2
  
  return context;
   2b1b0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2b1b4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b1b8:	e0bffc17 	ldw	r2,-16(fp)
   2b1bc:	10800817 	ldw	r2,32(r2)
   2b1c0:	10c00094 	ori	r3,r2,2
   2b1c4:	e0bffc17 	ldw	r2,-16(fp)
   2b1c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b1cc:	e0bffc17 	ldw	r2,-16(fp)
   2b1d0:	10800017 	ldw	r2,0(r2)
   2b1d4:	10800104 	addi	r2,r2,4
   2b1d8:	e0fffc17 	ldw	r3,-16(fp)
   2b1dc:	18c00817 	ldw	r3,32(r3)
   2b1e0:	10c00035 	stwio	r3,0(r2)
   2b1e4:	e0bff917 	ldw	r2,-28(fp)
   2b1e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b1ec:	e0bffb17 	ldw	r2,-20(fp)
   2b1f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2b1f4:	e0bffe17 	ldw	r2,-8(fp)
   2b1f8:	0080110e 	bge	zero,r2,2b240 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2b1fc:	e0bfff17 	ldw	r2,-4(fp)
   2b200:	1090000c 	andi	r2,r2,16384
   2b204:	1000111e 	bne	r2,zero,2b24c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2b208:	0001883a 	nop
   2b20c:	e0bffc17 	ldw	r2,-16(fp)
   2b210:	10c00d17 	ldw	r3,52(r2)
   2b214:	e0bff517 	ldw	r2,-44(fp)
   2b218:	1880051e 	bne	r3,r2,2b230 <altera_avalon_jtag_uart_write+0x1b4>
   2b21c:	e0bffc17 	ldw	r2,-16(fp)
   2b220:	10c00917 	ldw	r3,36(r2)
   2b224:	e0bffc17 	ldw	r2,-16(fp)
   2b228:	10800117 	ldw	r2,4(r2)
   2b22c:	18bff736 	bltu	r3,r2,2b20c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2b230:	e0bffc17 	ldw	r2,-16(fp)
   2b234:	10c00d17 	ldw	r3,52(r2)
   2b238:	e0bff517 	ldw	r2,-44(fp)
   2b23c:	18800526 	beq	r3,r2,2b254 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2b240:	e0bffe17 	ldw	r2,-8(fp)
   2b244:	00bfd016 	blt	zero,r2,2b188 <altera_avalon_jtag_uart_write+0x10c>
   2b248:	00000306 	br	2b258 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2b24c:	0001883a 	nop
   2b250:	00000106 	br	2b258 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   2b254:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2b258:	e0fffd17 	ldw	r3,-12(fp)
   2b25c:	e0bff717 	ldw	r2,-36(fp)
   2b260:	18800426 	beq	r3,r2,2b274 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2b264:	e0fffd17 	ldw	r3,-12(fp)
   2b268:	e0bff717 	ldw	r2,-36(fp)
   2b26c:	1885c83a 	sub	r2,r3,r2
   2b270:	00000606 	br	2b28c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2b274:	e0bfff17 	ldw	r2,-4(fp)
   2b278:	1090000c 	andi	r2,r2,16384
   2b27c:	10000226 	beq	r2,zero,2b288 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2b280:	00bffd44 	movi	r2,-11
   2b284:	00000106 	br	2b28c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2b288:	00bffec4 	movi	r2,-5
}
   2b28c:	e037883a 	mov	sp,fp
   2b290:	dfc00117 	ldw	ra,4(sp)
   2b294:	df000017 	ldw	fp,0(sp)
   2b298:	dec00204 	addi	sp,sp,8
   2b29c:	f800283a 	ret

0002b2a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2b2a0:	defffa04 	addi	sp,sp,-24
   2b2a4:	dfc00515 	stw	ra,20(sp)
   2b2a8:	df000415 	stw	fp,16(sp)
   2b2ac:	df000404 	addi	fp,sp,16
   2b2b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2b2b4:	0007883a 	mov	r3,zero
   2b2b8:	e0bfff17 	ldw	r2,-4(fp)
   2b2bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2b2c0:	e0bfff17 	ldw	r2,-4(fp)
   2b2c4:	10800104 	addi	r2,r2,4
   2b2c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b2cc:	0005303a 	rdctl	r2,status
   2b2d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b2d4:	e0fffd17 	ldw	r3,-12(fp)
   2b2d8:	00bfff84 	movi	r2,-2
   2b2dc:	1884703a 	and	r2,r3,r2
   2b2e0:	1001703a 	wrctl	status,r2
  
  return context;
   2b2e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2b2e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2b2ec:	002be0c0 	call	2be0c <alt_tick>
   2b2f0:	e0bffc17 	ldw	r2,-16(fp)
   2b2f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b2f8:	e0bffe17 	ldw	r2,-8(fp)
   2b2fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2b300:	e037883a 	mov	sp,fp
   2b304:	dfc00117 	ldw	ra,4(sp)
   2b308:	df000017 	ldw	fp,0(sp)
   2b30c:	dec00204 	addi	sp,sp,8
   2b310:	f800283a 	ret

0002b314 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2b314:	defff804 	addi	sp,sp,-32
   2b318:	dfc00715 	stw	ra,28(sp)
   2b31c:	df000615 	stw	fp,24(sp)
   2b320:	df000604 	addi	fp,sp,24
   2b324:	e13ffc15 	stw	r4,-16(fp)
   2b328:	e17ffd15 	stw	r5,-12(fp)
   2b32c:	e1bffe15 	stw	r6,-8(fp)
   2b330:	e1ffff15 	stw	r7,-4(fp)
   2b334:	e0bfff17 	ldw	r2,-4(fp)
   2b338:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2b33c:	008001f4 	movhi	r2,7
   2b340:	10b98c04 	addi	r2,r2,-6608
   2b344:	10800017 	ldw	r2,0(r2)
   2b348:	1000041e 	bne	r2,zero,2b35c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2b34c:	008001f4 	movhi	r2,7
   2b350:	10b98c04 	addi	r2,r2,-6608
   2b354:	e0fffb17 	ldw	r3,-20(fp)
   2b358:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2b35c:	e0bffc17 	ldw	r2,-16(fp)
   2b360:	10800104 	addi	r2,r2,4
   2b364:	00c001c4 	movi	r3,7
   2b368:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2b36c:	d8000015 	stw	zero,0(sp)
   2b370:	e13ffd17 	ldw	r4,-12(fp)
   2b374:	e17ffe17 	ldw	r5,-8(fp)
   2b378:	018000f4 	movhi	r6,3
   2b37c:	31aca804 	addi	r6,r6,-19808
   2b380:	e1fffc17 	ldw	r7,-16(fp)
   2b384:	002b6bc0 	call	2b6bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2b388:	e037883a 	mov	sp,fp
   2b38c:	dfc00117 	ldw	ra,4(sp)
   2b390:	df000017 	ldw	fp,0(sp)
   2b394:	dec00204 	addi	sp,sp,8
   2b398:	f800283a 	ret

0002b39c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2b39c:	defff504 	addi	sp,sp,-44
   2b3a0:	df000a15 	stw	fp,40(sp)
   2b3a4:	df000a04 	addi	fp,sp,40
   2b3a8:	e13ffc15 	stw	r4,-16(fp)
   2b3ac:	e17ffd15 	stw	r5,-12(fp)
   2b3b0:	e1bffe15 	stw	r6,-8(fp)
   2b3b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2b3b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b3bc:	008001f4 	movhi	r2,7
   2b3c0:	10b98c04 	addi	r2,r2,-6608
   2b3c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2b3c8:	10003f26 	beq	r2,zero,2b4c8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2b3cc:	e0bffc17 	ldw	r2,-16(fp)
   2b3d0:	10003b26 	beq	r2,zero,2b4c0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2b3d4:	e0bffc17 	ldw	r2,-16(fp)
   2b3d8:	e0fffe17 	ldw	r3,-8(fp)
   2b3dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2b3e0:	e0bffc17 	ldw	r2,-16(fp)
   2b3e4:	e0ffff17 	ldw	r3,-4(fp)
   2b3e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b3ec:	0005303a 	rdctl	r2,status
   2b3f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b3f4:	e0fff817 	ldw	r3,-32(fp)
   2b3f8:	00bfff84 	movi	r2,-2
   2b3fc:	1884703a 	and	r2,r3,r2
   2b400:	1001703a 	wrctl	status,r2
  
  return context;
   2b404:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2b408:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2b40c:	008001f4 	movhi	r2,7
   2b410:	10b98d04 	addi	r2,r2,-6604
   2b414:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2b418:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2b41c:	e0fffd17 	ldw	r3,-12(fp)
   2b420:	e0bff617 	ldw	r2,-40(fp)
   2b424:	1885883a 	add	r2,r3,r2
   2b428:	10c00044 	addi	r3,r2,1
   2b42c:	e0bffc17 	ldw	r2,-16(fp)
   2b430:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2b434:	e0bffc17 	ldw	r2,-16(fp)
   2b438:	10c00217 	ldw	r3,8(r2)
   2b43c:	e0bff617 	ldw	r2,-40(fp)
   2b440:	1880042e 	bgeu	r3,r2,2b454 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2b444:	e0bffc17 	ldw	r2,-16(fp)
   2b448:	00c00044 	movi	r3,1
   2b44c:	10c00405 	stb	r3,16(r2)
   2b450:	00000206 	br	2b45c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2b454:	e0bffc17 	ldw	r2,-16(fp)
   2b458:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2b45c:	e0bffc17 	ldw	r2,-16(fp)
   2b460:	00c001f4 	movhi	r3,7
   2b464:	18f97a04 	addi	r3,r3,-6680
   2b468:	e0fff915 	stw	r3,-28(fp)
   2b46c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b470:	e0bffa17 	ldw	r2,-24(fp)
   2b474:	e0fff917 	ldw	r3,-28(fp)
   2b478:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b47c:	e0bff917 	ldw	r2,-28(fp)
   2b480:	10c00017 	ldw	r3,0(r2)
   2b484:	e0bffa17 	ldw	r2,-24(fp)
   2b488:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b48c:	e0bff917 	ldw	r2,-28(fp)
   2b490:	10800017 	ldw	r2,0(r2)
   2b494:	e0fffa17 	ldw	r3,-24(fp)
   2b498:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b49c:	e0bff917 	ldw	r2,-28(fp)
   2b4a0:	e0fffa17 	ldw	r3,-24(fp)
   2b4a4:	10c00015 	stw	r3,0(r2)
   2b4a8:	e0bff717 	ldw	r2,-36(fp)
   2b4ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b4b0:	e0bffb17 	ldw	r2,-20(fp)
   2b4b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2b4b8:	0005883a 	mov	r2,zero
   2b4bc:	00000306 	br	2b4cc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2b4c0:	00bffa84 	movi	r2,-22
   2b4c4:	00000106 	br	2b4cc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2b4c8:	00bfde84 	movi	r2,-134
  }
}
   2b4cc:	e037883a 	mov	sp,fp
   2b4d0:	df000017 	ldw	fp,0(sp)
   2b4d4:	dec00104 	addi	sp,sp,4
   2b4d8:	f800283a 	ret

0002b4dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2b4dc:	deffff04 	addi	sp,sp,-4
   2b4e0:	df000015 	stw	fp,0(sp)
   2b4e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2b4e8:	e037883a 	mov	sp,fp
   2b4ec:	df000017 	ldw	fp,0(sp)
   2b4f0:	dec00104 	addi	sp,sp,4
   2b4f4:	f800283a 	ret

0002b4f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b4f8:	defffe04 	addi	sp,sp,-8
   2b4fc:	dfc00115 	stw	ra,4(sp)
   2b500:	df000015 	stw	fp,0(sp)
   2b504:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b508:	008001f4 	movhi	r2,7
   2b50c:	10b97704 	addi	r2,r2,-6692
   2b510:	10800017 	ldw	r2,0(r2)
   2b514:	10000526 	beq	r2,zero,2b52c <alt_get_errno+0x34>
   2b518:	008001f4 	movhi	r2,7
   2b51c:	10b97704 	addi	r2,r2,-6692
   2b520:	10800017 	ldw	r2,0(r2)
   2b524:	103ee83a 	callr	r2
   2b528:	00000206 	br	2b534 <alt_get_errno+0x3c>
   2b52c:	008001f4 	movhi	r2,7
   2b530:	10b98704 	addi	r2,r2,-6628
}
   2b534:	e037883a 	mov	sp,fp
   2b538:	dfc00117 	ldw	ra,4(sp)
   2b53c:	df000017 	ldw	fp,0(sp)
   2b540:	dec00204 	addi	sp,sp,8
   2b544:	f800283a 	ret

0002b548 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2b548:	defffa04 	addi	sp,sp,-24
   2b54c:	dfc00515 	stw	ra,20(sp)
   2b550:	df000415 	stw	fp,16(sp)
   2b554:	df000404 	addi	fp,sp,16
   2b558:	e13ffe15 	stw	r4,-8(fp)
   2b55c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2b560:	e0bffe17 	ldw	r2,-8(fp)
   2b564:	10000326 	beq	r2,zero,2b574 <alt_dev_llist_insert+0x2c>
   2b568:	e0bffe17 	ldw	r2,-8(fp)
   2b56c:	10800217 	ldw	r2,8(r2)
   2b570:	1000051e 	bne	r2,zero,2b588 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2b574:	002b4f80 	call	2b4f8 <alt_get_errno>
   2b578:	00c00584 	movi	r3,22
   2b57c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2b580:	00bffa84 	movi	r2,-22
   2b584:	00001306 	br	2b5d4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2b588:	e0bffe17 	ldw	r2,-8(fp)
   2b58c:	e0ffff17 	ldw	r3,-4(fp)
   2b590:	e0fffc15 	stw	r3,-16(fp)
   2b594:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b598:	e0bffd17 	ldw	r2,-12(fp)
   2b59c:	e0fffc17 	ldw	r3,-16(fp)
   2b5a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b5a4:	e0bffc17 	ldw	r2,-16(fp)
   2b5a8:	10c00017 	ldw	r3,0(r2)
   2b5ac:	e0bffd17 	ldw	r2,-12(fp)
   2b5b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b5b4:	e0bffc17 	ldw	r2,-16(fp)
   2b5b8:	10800017 	ldw	r2,0(r2)
   2b5bc:	e0fffd17 	ldw	r3,-12(fp)
   2b5c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b5c4:	e0bffc17 	ldw	r2,-16(fp)
   2b5c8:	e0fffd17 	ldw	r3,-12(fp)
   2b5cc:	10c00015 	stw	r3,0(r2)

  return 0;  
   2b5d0:	0005883a 	mov	r2,zero
}
   2b5d4:	e037883a 	mov	sp,fp
   2b5d8:	dfc00117 	ldw	ra,4(sp)
   2b5dc:	df000017 	ldw	fp,0(sp)
   2b5e0:	dec00204 	addi	sp,sp,8
   2b5e4:	f800283a 	ret

0002b5e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2b5e8:	defffd04 	addi	sp,sp,-12
   2b5ec:	dfc00215 	stw	ra,8(sp)
   2b5f0:	df000115 	stw	fp,4(sp)
   2b5f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b5f8:	008000f4 	movhi	r2,3
   2b5fc:	10b15e04 	addi	r2,r2,-14984
   2b600:	e0bfff15 	stw	r2,-4(fp)
   2b604:	00000606 	br	2b620 <_do_ctors+0x38>
        (*ctor) (); 
   2b608:	e0bfff17 	ldw	r2,-4(fp)
   2b60c:	10800017 	ldw	r2,0(r2)
   2b610:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b614:	e0bfff17 	ldw	r2,-4(fp)
   2b618:	10bfff04 	addi	r2,r2,-4
   2b61c:	e0bfff15 	stw	r2,-4(fp)
   2b620:	e0ffff17 	ldw	r3,-4(fp)
   2b624:	008000f4 	movhi	r2,3
   2b628:	10b15f04 	addi	r2,r2,-14980
   2b62c:	18bff62e 	bgeu	r3,r2,2b608 <_do_ctors+0x20>
        (*ctor) (); 
}
   2b630:	e037883a 	mov	sp,fp
   2b634:	dfc00117 	ldw	ra,4(sp)
   2b638:	df000017 	ldw	fp,0(sp)
   2b63c:	dec00204 	addi	sp,sp,8
   2b640:	f800283a 	ret

0002b644 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2b644:	defffd04 	addi	sp,sp,-12
   2b648:	dfc00215 	stw	ra,8(sp)
   2b64c:	df000115 	stw	fp,4(sp)
   2b650:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b654:	008000f4 	movhi	r2,3
   2b658:	10b15e04 	addi	r2,r2,-14984
   2b65c:	e0bfff15 	stw	r2,-4(fp)
   2b660:	00000606 	br	2b67c <_do_dtors+0x38>
        (*dtor) (); 
   2b664:	e0bfff17 	ldw	r2,-4(fp)
   2b668:	10800017 	ldw	r2,0(r2)
   2b66c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b670:	e0bfff17 	ldw	r2,-4(fp)
   2b674:	10bfff04 	addi	r2,r2,-4
   2b678:	e0bfff15 	stw	r2,-4(fp)
   2b67c:	e0ffff17 	ldw	r3,-4(fp)
   2b680:	008000f4 	movhi	r2,3
   2b684:	10b15f04 	addi	r2,r2,-14980
   2b688:	18bff62e 	bgeu	r3,r2,2b664 <_do_dtors+0x20>
        (*dtor) (); 
}
   2b68c:	e037883a 	mov	sp,fp
   2b690:	dfc00117 	ldw	ra,4(sp)
   2b694:	df000017 	ldw	fp,0(sp)
   2b698:	dec00204 	addi	sp,sp,8
   2b69c:	f800283a 	ret

0002b6a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2b6a0:	deffff04 	addi	sp,sp,-4
   2b6a4:	df000015 	stw	fp,0(sp)
   2b6a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2b6ac:	e037883a 	mov	sp,fp
   2b6b0:	df000017 	ldw	fp,0(sp)
   2b6b4:	dec00104 	addi	sp,sp,4
   2b6b8:	f800283a 	ret

0002b6bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2b6bc:	defff904 	addi	sp,sp,-28
   2b6c0:	dfc00615 	stw	ra,24(sp)
   2b6c4:	df000515 	stw	fp,20(sp)
   2b6c8:	df000504 	addi	fp,sp,20
   2b6cc:	e13ffc15 	stw	r4,-16(fp)
   2b6d0:	e17ffd15 	stw	r5,-12(fp)
   2b6d4:	e1bffe15 	stw	r6,-8(fp)
   2b6d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2b6dc:	e0800217 	ldw	r2,8(fp)
   2b6e0:	d8800015 	stw	r2,0(sp)
   2b6e4:	e13ffc17 	ldw	r4,-16(fp)
   2b6e8:	e17ffd17 	ldw	r5,-12(fp)
   2b6ec:	e1bffe17 	ldw	r6,-8(fp)
   2b6f0:	e1ffff17 	ldw	r7,-4(fp)
   2b6f4:	002b8940 	call	2b894 <alt_iic_isr_register>
}  
   2b6f8:	e037883a 	mov	sp,fp
   2b6fc:	dfc00117 	ldw	ra,4(sp)
   2b700:	df000017 	ldw	fp,0(sp)
   2b704:	dec00204 	addi	sp,sp,8
   2b708:	f800283a 	ret

0002b70c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2b70c:	defff904 	addi	sp,sp,-28
   2b710:	df000615 	stw	fp,24(sp)
   2b714:	df000604 	addi	fp,sp,24
   2b718:	e13ffe15 	stw	r4,-8(fp)
   2b71c:	e17fff15 	stw	r5,-4(fp)
   2b720:	e0bfff17 	ldw	r2,-4(fp)
   2b724:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b728:	0005303a 	rdctl	r2,status
   2b72c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b730:	e0fffb17 	ldw	r3,-20(fp)
   2b734:	00bfff84 	movi	r2,-2
   2b738:	1884703a 	and	r2,r3,r2
   2b73c:	1001703a 	wrctl	status,r2
  
  return context;
   2b740:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b744:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2b748:	e0bffa17 	ldw	r2,-24(fp)
   2b74c:	00c00044 	movi	r3,1
   2b750:	1884983a 	sll	r2,r3,r2
   2b754:	1007883a 	mov	r3,r2
   2b758:	008001f4 	movhi	r2,7
   2b75c:	10b98b04 	addi	r2,r2,-6612
   2b760:	10800017 	ldw	r2,0(r2)
   2b764:	1886b03a 	or	r3,r3,r2
   2b768:	008001f4 	movhi	r2,7
   2b76c:	10b98b04 	addi	r2,r2,-6612
   2b770:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b774:	008001f4 	movhi	r2,7
   2b778:	10b98b04 	addi	r2,r2,-6612
   2b77c:	10800017 	ldw	r2,0(r2)
   2b780:	100170fa 	wrctl	ienable,r2
   2b784:	e0bffc17 	ldw	r2,-16(fp)
   2b788:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b78c:	e0bffd17 	ldw	r2,-12(fp)
   2b790:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2b794:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2b798:	e037883a 	mov	sp,fp
   2b79c:	df000017 	ldw	fp,0(sp)
   2b7a0:	dec00104 	addi	sp,sp,4
   2b7a4:	f800283a 	ret

0002b7a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2b7a8:	defff904 	addi	sp,sp,-28
   2b7ac:	df000615 	stw	fp,24(sp)
   2b7b0:	df000604 	addi	fp,sp,24
   2b7b4:	e13ffe15 	stw	r4,-8(fp)
   2b7b8:	e17fff15 	stw	r5,-4(fp)
   2b7bc:	e0bfff17 	ldw	r2,-4(fp)
   2b7c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b7c4:	0005303a 	rdctl	r2,status
   2b7c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b7cc:	e0fffb17 	ldw	r3,-20(fp)
   2b7d0:	00bfff84 	movi	r2,-2
   2b7d4:	1884703a 	and	r2,r3,r2
   2b7d8:	1001703a 	wrctl	status,r2
  
  return context;
   2b7dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b7e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2b7e4:	e0bffa17 	ldw	r2,-24(fp)
   2b7e8:	00c00044 	movi	r3,1
   2b7ec:	1884983a 	sll	r2,r3,r2
   2b7f0:	0084303a 	nor	r2,zero,r2
   2b7f4:	1007883a 	mov	r3,r2
   2b7f8:	008001f4 	movhi	r2,7
   2b7fc:	10b98b04 	addi	r2,r2,-6612
   2b800:	10800017 	ldw	r2,0(r2)
   2b804:	1886703a 	and	r3,r3,r2
   2b808:	008001f4 	movhi	r2,7
   2b80c:	10b98b04 	addi	r2,r2,-6612
   2b810:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b814:	008001f4 	movhi	r2,7
   2b818:	10b98b04 	addi	r2,r2,-6612
   2b81c:	10800017 	ldw	r2,0(r2)
   2b820:	100170fa 	wrctl	ienable,r2
   2b824:	e0bffc17 	ldw	r2,-16(fp)
   2b828:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b82c:	e0bffd17 	ldw	r2,-12(fp)
   2b830:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2b834:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2b838:	e037883a 	mov	sp,fp
   2b83c:	df000017 	ldw	fp,0(sp)
   2b840:	dec00104 	addi	sp,sp,4
   2b844:	f800283a 	ret

0002b848 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2b848:	defffc04 	addi	sp,sp,-16
   2b84c:	df000315 	stw	fp,12(sp)
   2b850:	df000304 	addi	fp,sp,12
   2b854:	e13ffe15 	stw	r4,-8(fp)
   2b858:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2b85c:	000530fa 	rdctl	r2,ienable
   2b860:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2b864:	e0bfff17 	ldw	r2,-4(fp)
   2b868:	00c00044 	movi	r3,1
   2b86c:	1884983a 	sll	r2,r3,r2
   2b870:	1007883a 	mov	r3,r2
   2b874:	e0bffd17 	ldw	r2,-12(fp)
   2b878:	1884703a 	and	r2,r3,r2
   2b87c:	1004c03a 	cmpne	r2,r2,zero
   2b880:	10803fcc 	andi	r2,r2,255
}
   2b884:	e037883a 	mov	sp,fp
   2b888:	df000017 	ldw	fp,0(sp)
   2b88c:	dec00104 	addi	sp,sp,4
   2b890:	f800283a 	ret

0002b894 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2b894:	defff504 	addi	sp,sp,-44
   2b898:	dfc00a15 	stw	ra,40(sp)
   2b89c:	df000915 	stw	fp,36(sp)
   2b8a0:	df000904 	addi	fp,sp,36
   2b8a4:	e13ffc15 	stw	r4,-16(fp)
   2b8a8:	e17ffd15 	stw	r5,-12(fp)
   2b8ac:	e1bffe15 	stw	r6,-8(fp)
   2b8b0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2b8b4:	00bffa84 	movi	r2,-22
   2b8b8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2b8bc:	e0bffd17 	ldw	r2,-12(fp)
   2b8c0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2b8c4:	e0bff817 	ldw	r2,-32(fp)
   2b8c8:	10800808 	cmpgei	r2,r2,32
   2b8cc:	1000271e 	bne	r2,zero,2b96c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b8d0:	0005303a 	rdctl	r2,status
   2b8d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b8d8:	e0fffa17 	ldw	r3,-24(fp)
   2b8dc:	00bfff84 	movi	r2,-2
   2b8e0:	1884703a 	and	r2,r3,r2
   2b8e4:	1001703a 	wrctl	status,r2
  
  return context;
   2b8e8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2b8ec:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2b8f0:	00c001f4 	movhi	r3,7
   2b8f4:	18f99804 	addi	r3,r3,-6560
   2b8f8:	e0bff817 	ldw	r2,-32(fp)
   2b8fc:	100490fa 	slli	r2,r2,3
   2b900:	1885883a 	add	r2,r3,r2
   2b904:	e0fffe17 	ldw	r3,-8(fp)
   2b908:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2b90c:	00c001f4 	movhi	r3,7
   2b910:	18f99804 	addi	r3,r3,-6560
   2b914:	e0bff817 	ldw	r2,-32(fp)
   2b918:	100490fa 	slli	r2,r2,3
   2b91c:	1885883a 	add	r2,r3,r2
   2b920:	10800104 	addi	r2,r2,4
   2b924:	e0ffff17 	ldw	r3,-4(fp)
   2b928:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2b92c:	e0bffe17 	ldw	r2,-8(fp)
   2b930:	10000526 	beq	r2,zero,2b948 <alt_iic_isr_register+0xb4>
   2b934:	e0bff817 	ldw	r2,-32(fp)
   2b938:	e13ffc17 	ldw	r4,-16(fp)
   2b93c:	100b883a 	mov	r5,r2
   2b940:	002b70c0 	call	2b70c <alt_ic_irq_enable>
   2b944:	00000406 	br	2b958 <alt_iic_isr_register+0xc4>
   2b948:	e0bff817 	ldw	r2,-32(fp)
   2b94c:	e13ffc17 	ldw	r4,-16(fp)
   2b950:	100b883a 	mov	r5,r2
   2b954:	002b7a80 	call	2b7a8 <alt_ic_irq_disable>
   2b958:	e0bff715 	stw	r2,-36(fp)
   2b95c:	e0bff917 	ldw	r2,-28(fp)
   2b960:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b964:	e0bffb17 	ldw	r2,-20(fp)
   2b968:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2b96c:	e0bff717 	ldw	r2,-36(fp)
}
   2b970:	e037883a 	mov	sp,fp
   2b974:	dfc00117 	ldw	ra,4(sp)
   2b978:	df000017 	ldw	fp,0(sp)
   2b97c:	dec00204 	addi	sp,sp,8
   2b980:	f800283a 	ret

0002b984 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2b984:	defff804 	addi	sp,sp,-32
   2b988:	dfc00715 	stw	ra,28(sp)
   2b98c:	df000615 	stw	fp,24(sp)
   2b990:	dc000515 	stw	r16,20(sp)
   2b994:	df000504 	addi	fp,sp,20
   2b998:	e13ffc15 	stw	r4,-16(fp)
   2b99c:	e17ffd15 	stw	r5,-12(fp)
   2b9a0:	e1bffe15 	stw	r6,-8(fp)
   2b9a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2b9a8:	e13ffd17 	ldw	r4,-12(fp)
   2b9ac:	e17ffe17 	ldw	r5,-8(fp)
   2b9b0:	e1bfff17 	ldw	r6,-4(fp)
   2b9b4:	002bc1c0 	call	2bc1c <open>
   2b9b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2b9bc:	e0bffb17 	ldw	r2,-20(fp)
   2b9c0:	10002216 	blt	r2,zero,2ba4c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2b9c4:	040001f4 	movhi	r16,7
   2b9c8:	8434f504 	addi	r16,r16,-11308
   2b9cc:	e0bffb17 	ldw	r2,-20(fp)
   2b9d0:	1009883a 	mov	r4,r2
   2b9d4:	01400304 	movi	r5,12
   2b9d8:	00297540 	call	29754 <__mulsi3>
   2b9dc:	8085883a 	add	r2,r16,r2
   2b9e0:	10c00017 	ldw	r3,0(r2)
   2b9e4:	e0bffc17 	ldw	r2,-16(fp)
   2b9e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2b9ec:	040001f4 	movhi	r16,7
   2b9f0:	8434f504 	addi	r16,r16,-11308
   2b9f4:	e0bffb17 	ldw	r2,-20(fp)
   2b9f8:	1009883a 	mov	r4,r2
   2b9fc:	01400304 	movi	r5,12
   2ba00:	00297540 	call	29754 <__mulsi3>
   2ba04:	8085883a 	add	r2,r16,r2
   2ba08:	10800104 	addi	r2,r2,4
   2ba0c:	10c00017 	ldw	r3,0(r2)
   2ba10:	e0bffc17 	ldw	r2,-16(fp)
   2ba14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2ba18:	040001f4 	movhi	r16,7
   2ba1c:	8434f504 	addi	r16,r16,-11308
   2ba20:	e0bffb17 	ldw	r2,-20(fp)
   2ba24:	1009883a 	mov	r4,r2
   2ba28:	01400304 	movi	r5,12
   2ba2c:	00297540 	call	29754 <__mulsi3>
   2ba30:	8085883a 	add	r2,r16,r2
   2ba34:	10800204 	addi	r2,r2,8
   2ba38:	10c00017 	ldw	r3,0(r2)
   2ba3c:	e0bffc17 	ldw	r2,-16(fp)
   2ba40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2ba44:	e13ffb17 	ldw	r4,-20(fp)
   2ba48:	002a5000 	call	2a500 <alt_release_fd>
  }
} 
   2ba4c:	e037883a 	mov	sp,fp
   2ba50:	dfc00217 	ldw	ra,8(sp)
   2ba54:	df000117 	ldw	fp,4(sp)
   2ba58:	dc000017 	ldw	r16,0(sp)
   2ba5c:	dec00304 	addi	sp,sp,12
   2ba60:	f800283a 	ret

0002ba64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2ba64:	defffb04 	addi	sp,sp,-20
   2ba68:	dfc00415 	stw	ra,16(sp)
   2ba6c:	df000315 	stw	fp,12(sp)
   2ba70:	df000304 	addi	fp,sp,12
   2ba74:	e13ffd15 	stw	r4,-12(fp)
   2ba78:	e17ffe15 	stw	r5,-8(fp)
   2ba7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2ba80:	010001f4 	movhi	r4,7
   2ba84:	2134f804 	addi	r4,r4,-11296
   2ba88:	e17ffd17 	ldw	r5,-12(fp)
   2ba8c:	01800044 	movi	r6,1
   2ba90:	01c07fc4 	movi	r7,511
   2ba94:	002b9840 	call	2b984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2ba98:	010001f4 	movhi	r4,7
   2ba9c:	2134f504 	addi	r4,r4,-11308
   2baa0:	e17ffe17 	ldw	r5,-8(fp)
   2baa4:	000d883a 	mov	r6,zero
   2baa8:	01c07fc4 	movi	r7,511
   2baac:	002b9840 	call	2b984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2bab0:	010001f4 	movhi	r4,7
   2bab4:	2134fb04 	addi	r4,r4,-11284
   2bab8:	e17fff17 	ldw	r5,-4(fp)
   2babc:	01800044 	movi	r6,1
   2bac0:	01c07fc4 	movi	r7,511
   2bac4:	002b9840 	call	2b984 <alt_open_fd>
}  
   2bac8:	e037883a 	mov	sp,fp
   2bacc:	dfc00117 	ldw	ra,4(sp)
   2bad0:	df000017 	ldw	fp,0(sp)
   2bad4:	dec00204 	addi	sp,sp,8
   2bad8:	f800283a 	ret

0002badc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2badc:	defffe04 	addi	sp,sp,-8
   2bae0:	dfc00115 	stw	ra,4(sp)
   2bae4:	df000015 	stw	fp,0(sp)
   2bae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2baec:	008001f4 	movhi	r2,7
   2baf0:	10b97704 	addi	r2,r2,-6692
   2baf4:	10800017 	ldw	r2,0(r2)
   2baf8:	10000526 	beq	r2,zero,2bb10 <alt_get_errno+0x34>
   2bafc:	008001f4 	movhi	r2,7
   2bb00:	10b97704 	addi	r2,r2,-6692
   2bb04:	10800017 	ldw	r2,0(r2)
   2bb08:	103ee83a 	callr	r2
   2bb0c:	00000206 	br	2bb18 <alt_get_errno+0x3c>
   2bb10:	008001f4 	movhi	r2,7
   2bb14:	10b98704 	addi	r2,r2,-6628
}
   2bb18:	e037883a 	mov	sp,fp
   2bb1c:	dfc00117 	ldw	ra,4(sp)
   2bb20:	df000017 	ldw	fp,0(sp)
   2bb24:	dec00204 	addi	sp,sp,8
   2bb28:	f800283a 	ret

0002bb2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2bb2c:	defffb04 	addi	sp,sp,-20
   2bb30:	dfc00415 	stw	ra,16(sp)
   2bb34:	df000315 	stw	fp,12(sp)
   2bb38:	dc000215 	stw	r16,8(sp)
   2bb3c:	df000204 	addi	fp,sp,8
   2bb40:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2bb44:	e0bfff17 	ldw	r2,-4(fp)
   2bb48:	10800217 	ldw	r2,8(r2)
   2bb4c:	10d00034 	orhi	r3,r2,16384
   2bb50:	e0bfff17 	ldw	r2,-4(fp)
   2bb54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bb58:	e03ffe15 	stw	zero,-8(fp)
   2bb5c:	00002206 	br	2bbe8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bb60:	040001f4 	movhi	r16,7
   2bb64:	8434f504 	addi	r16,r16,-11308
   2bb68:	e0bffe17 	ldw	r2,-8(fp)
   2bb6c:	1009883a 	mov	r4,r2
   2bb70:	01400304 	movi	r5,12
   2bb74:	00297540 	call	29754 <__mulsi3>
   2bb78:	8085883a 	add	r2,r16,r2
   2bb7c:	10c00017 	ldw	r3,0(r2)
   2bb80:	e0bfff17 	ldw	r2,-4(fp)
   2bb84:	10800017 	ldw	r2,0(r2)
   2bb88:	1880141e 	bne	r3,r2,2bbdc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bb8c:	040001f4 	movhi	r16,7
   2bb90:	8434f504 	addi	r16,r16,-11308
   2bb94:	e0bffe17 	ldw	r2,-8(fp)
   2bb98:	1009883a 	mov	r4,r2
   2bb9c:	01400304 	movi	r5,12
   2bba0:	00297540 	call	29754 <__mulsi3>
   2bba4:	8085883a 	add	r2,r16,r2
   2bba8:	10800204 	addi	r2,r2,8
   2bbac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bbb0:	10000a0e 	bge	r2,zero,2bbdc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2bbb4:	e13ffe17 	ldw	r4,-8(fp)
   2bbb8:	01400304 	movi	r5,12
   2bbbc:	00297540 	call	29754 <__mulsi3>
   2bbc0:	00c001f4 	movhi	r3,7
   2bbc4:	18f4f504 	addi	r3,r3,-11308
   2bbc8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bbcc:	e0bfff17 	ldw	r2,-4(fp)
   2bbd0:	18800226 	beq	r3,r2,2bbdc <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2bbd4:	00bffcc4 	movi	r2,-13
   2bbd8:	00000a06 	br	2bc04 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bbdc:	e0bffe17 	ldw	r2,-8(fp)
   2bbe0:	10800044 	addi	r2,r2,1
   2bbe4:	e0bffe15 	stw	r2,-8(fp)
   2bbe8:	008001f4 	movhi	r2,7
   2bbec:	10b97604 	addi	r2,r2,-6696
   2bbf0:	10800017 	ldw	r2,0(r2)
   2bbf4:	1007883a 	mov	r3,r2
   2bbf8:	e0bffe17 	ldw	r2,-8(fp)
   2bbfc:	18bfd82e 	bgeu	r3,r2,2bb60 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2bc00:	0005883a 	mov	r2,zero
}
   2bc04:	e037883a 	mov	sp,fp
   2bc08:	dfc00217 	ldw	ra,8(sp)
   2bc0c:	df000117 	ldw	fp,4(sp)
   2bc10:	dc000017 	ldw	r16,0(sp)
   2bc14:	dec00304 	addi	sp,sp,12
   2bc18:	f800283a 	ret

0002bc1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2bc1c:	defff604 	addi	sp,sp,-40
   2bc20:	dfc00915 	stw	ra,36(sp)
   2bc24:	df000815 	stw	fp,32(sp)
   2bc28:	df000804 	addi	fp,sp,32
   2bc2c:	e13ffd15 	stw	r4,-12(fp)
   2bc30:	e17ffe15 	stw	r5,-8(fp)
   2bc34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2bc38:	00bfffc4 	movi	r2,-1
   2bc3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2bc40:	00bffb44 	movi	r2,-19
   2bc44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2bc48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2bc4c:	e13ffd17 	ldw	r4,-12(fp)
   2bc50:	014001f4 	movhi	r5,7
   2bc54:	29797404 	addi	r5,r5,-6704
   2bc58:	002bf300 	call	2bf30 <alt_find_dev>
   2bc5c:	e0bff815 	stw	r2,-32(fp)
   2bc60:	e0bff817 	ldw	r2,-32(fp)
   2bc64:	1000051e 	bne	r2,zero,2bc7c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2bc68:	e13ffd17 	ldw	r4,-12(fp)
   2bc6c:	002bfc00 	call	2bfc0 <alt_find_file>
   2bc70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2bc74:	00800044 	movi	r2,1
   2bc78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2bc7c:	e0bff817 	ldw	r2,-32(fp)
   2bc80:	10002a26 	beq	r2,zero,2bd2c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2bc84:	e13ff817 	ldw	r4,-32(fp)
   2bc88:	002c0d40 	call	2c0d4 <alt_get_fd>
   2bc8c:	e0bff915 	stw	r2,-28(fp)
   2bc90:	e0bff917 	ldw	r2,-28(fp)
   2bc94:	1000030e 	bge	r2,zero,2bca4 <open+0x88>
    {
      status = index;
   2bc98:	e0bff917 	ldw	r2,-28(fp)
   2bc9c:	e0bffa15 	stw	r2,-24(fp)
   2bca0:	00002406 	br	2bd34 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2bca4:	e13ff917 	ldw	r4,-28(fp)
   2bca8:	01400304 	movi	r5,12
   2bcac:	00297540 	call	29754 <__mulsi3>
   2bcb0:	00c001f4 	movhi	r3,7
   2bcb4:	18f4f504 	addi	r3,r3,-11308
   2bcb8:	10c5883a 	add	r2,r2,r3
   2bcbc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2bcc0:	e0fffe17 	ldw	r3,-8(fp)
   2bcc4:	00900034 	movhi	r2,16384
   2bcc8:	10bfffc4 	addi	r2,r2,-1
   2bccc:	1886703a 	and	r3,r3,r2
   2bcd0:	e0bffc17 	ldw	r2,-16(fp)
   2bcd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2bcd8:	e0bffb17 	ldw	r2,-20(fp)
   2bcdc:	1000051e 	bne	r2,zero,2bcf4 <open+0xd8>
   2bce0:	e13ffc17 	ldw	r4,-16(fp)
   2bce4:	002bb2c0 	call	2bb2c <alt_file_locked>
   2bce8:	e0bffa15 	stw	r2,-24(fp)
   2bcec:	e0bffa17 	ldw	r2,-24(fp)
   2bcf0:	10001016 	blt	r2,zero,2bd34 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2bcf4:	e0bff817 	ldw	r2,-32(fp)
   2bcf8:	10800317 	ldw	r2,12(r2)
   2bcfc:	10000826 	beq	r2,zero,2bd20 <open+0x104>
   2bd00:	e0bff817 	ldw	r2,-32(fp)
   2bd04:	10800317 	ldw	r2,12(r2)
   2bd08:	e13ffc17 	ldw	r4,-16(fp)
   2bd0c:	e17ffd17 	ldw	r5,-12(fp)
   2bd10:	e1bffe17 	ldw	r6,-8(fp)
   2bd14:	e1ffff17 	ldw	r7,-4(fp)
   2bd18:	103ee83a 	callr	r2
   2bd1c:	00000106 	br	2bd24 <open+0x108>
   2bd20:	0005883a 	mov	r2,zero
   2bd24:	e0bffa15 	stw	r2,-24(fp)
   2bd28:	00000206 	br	2bd34 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2bd2c:	00bffb44 	movi	r2,-19
   2bd30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2bd34:	e0bffa17 	ldw	r2,-24(fp)
   2bd38:	1000080e 	bge	r2,zero,2bd5c <open+0x140>
  {
    alt_release_fd (index);  
   2bd3c:	e13ff917 	ldw	r4,-28(fp)
   2bd40:	002a5000 	call	2a500 <alt_release_fd>
    ALT_ERRNO = -status;
   2bd44:	002badc0 	call	2badc <alt_get_errno>
   2bd48:	e0fffa17 	ldw	r3,-24(fp)
   2bd4c:	00c7c83a 	sub	r3,zero,r3
   2bd50:	10c00015 	stw	r3,0(r2)
    return -1;
   2bd54:	00bfffc4 	movi	r2,-1
   2bd58:	00000106 	br	2bd60 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2bd5c:	e0bff917 	ldw	r2,-28(fp)
}
   2bd60:	e037883a 	mov	sp,fp
   2bd64:	dfc00117 	ldw	ra,4(sp)
   2bd68:	df000017 	ldw	fp,0(sp)
   2bd6c:	dec00204 	addi	sp,sp,8
   2bd70:	f800283a 	ret

0002bd74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2bd74:	defffa04 	addi	sp,sp,-24
   2bd78:	df000515 	stw	fp,20(sp)
   2bd7c:	df000504 	addi	fp,sp,20
   2bd80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bd84:	0005303a 	rdctl	r2,status
   2bd88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bd8c:	e0fffc17 	ldw	r3,-16(fp)
   2bd90:	00bfff84 	movi	r2,-2
   2bd94:	1884703a 	and	r2,r3,r2
   2bd98:	1001703a 	wrctl	status,r2
  
  return context;
   2bd9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2bda0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2bda4:	e0bfff17 	ldw	r2,-4(fp)
   2bda8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2bdac:	e0bffd17 	ldw	r2,-12(fp)
   2bdb0:	10800017 	ldw	r2,0(r2)
   2bdb4:	e0fffd17 	ldw	r3,-12(fp)
   2bdb8:	18c00117 	ldw	r3,4(r3)
   2bdbc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2bdc0:	e0bffd17 	ldw	r2,-12(fp)
   2bdc4:	10800117 	ldw	r2,4(r2)
   2bdc8:	e0fffd17 	ldw	r3,-12(fp)
   2bdcc:	18c00017 	ldw	r3,0(r3)
   2bdd0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2bdd4:	e0bffd17 	ldw	r2,-12(fp)
   2bdd8:	e0fffd17 	ldw	r3,-12(fp)
   2bddc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2bde0:	e0bffd17 	ldw	r2,-12(fp)
   2bde4:	e0fffd17 	ldw	r3,-12(fp)
   2bde8:	10c00015 	stw	r3,0(r2)
   2bdec:	e0bffb17 	ldw	r2,-20(fp)
   2bdf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bdf4:	e0bffe17 	ldw	r2,-8(fp)
   2bdf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2bdfc:	e037883a 	mov	sp,fp
   2be00:	df000017 	ldw	fp,0(sp)
   2be04:	dec00104 	addi	sp,sp,4
   2be08:	f800283a 	ret

0002be0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2be0c:	defffb04 	addi	sp,sp,-20
   2be10:	dfc00415 	stw	ra,16(sp)
   2be14:	df000315 	stw	fp,12(sp)
   2be18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2be1c:	d0a00d17 	ldw	r2,-32716(gp)
   2be20:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2be24:	d0a02017 	ldw	r2,-32640(gp)
   2be28:	10800044 	addi	r2,r2,1
   2be2c:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2be30:	00002e06 	br	2beec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2be34:	e0bffd17 	ldw	r2,-12(fp)
   2be38:	10800017 	ldw	r2,0(r2)
   2be3c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2be40:	e0bffd17 	ldw	r2,-12(fp)
   2be44:	10800403 	ldbu	r2,16(r2)
   2be48:	10803fcc 	andi	r2,r2,255
   2be4c:	10000426 	beq	r2,zero,2be60 <alt_tick+0x54>
   2be50:	d0a02017 	ldw	r2,-32640(gp)
   2be54:	1000021e 	bne	r2,zero,2be60 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2be58:	e0bffd17 	ldw	r2,-12(fp)
   2be5c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2be60:	e0bffd17 	ldw	r2,-12(fp)
   2be64:	10800217 	ldw	r2,8(r2)
   2be68:	d0e02017 	ldw	r3,-32640(gp)
   2be6c:	18801d36 	bltu	r3,r2,2bee4 <alt_tick+0xd8>
   2be70:	e0bffd17 	ldw	r2,-12(fp)
   2be74:	10800403 	ldbu	r2,16(r2)
   2be78:	10803fcc 	andi	r2,r2,255
   2be7c:	1000191e 	bne	r2,zero,2bee4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2be80:	e0bffd17 	ldw	r2,-12(fp)
   2be84:	10c00317 	ldw	r3,12(r2)
   2be88:	e0bffd17 	ldw	r2,-12(fp)
   2be8c:	10800517 	ldw	r2,20(r2)
   2be90:	1009883a 	mov	r4,r2
   2be94:	183ee83a 	callr	r3
   2be98:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2be9c:	e0bfff17 	ldw	r2,-4(fp)
   2bea0:	1000031e 	bne	r2,zero,2beb0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2bea4:	e13ffd17 	ldw	r4,-12(fp)
   2bea8:	002bd740 	call	2bd74 <alt_alarm_stop>
   2beac:	00000d06 	br	2bee4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2beb0:	e0bffd17 	ldw	r2,-12(fp)
   2beb4:	10c00217 	ldw	r3,8(r2)
   2beb8:	e0bfff17 	ldw	r2,-4(fp)
   2bebc:	1887883a 	add	r3,r3,r2
   2bec0:	e0bffd17 	ldw	r2,-12(fp)
   2bec4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2bec8:	e0bffd17 	ldw	r2,-12(fp)
   2becc:	10c00217 	ldw	r3,8(r2)
   2bed0:	d0a02017 	ldw	r2,-32640(gp)
   2bed4:	1880032e 	bgeu	r3,r2,2bee4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2bed8:	e0bffd17 	ldw	r2,-12(fp)
   2bedc:	00c00044 	movi	r3,1
   2bee0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2bee4:	e0bffe17 	ldw	r2,-8(fp)
   2bee8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2beec:	e0fffd17 	ldw	r3,-12(fp)
   2bef0:	d0a00d04 	addi	r2,gp,-32716
   2bef4:	18bfcf1e 	bne	r3,r2,2be34 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2bef8:	0001883a 	nop
}
   2befc:	e037883a 	mov	sp,fp
   2bf00:	dfc00117 	ldw	ra,4(sp)
   2bf04:	df000017 	ldw	fp,0(sp)
   2bf08:	dec00204 	addi	sp,sp,8
   2bf0c:	f800283a 	ret

0002bf10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2bf10:	deffff04 	addi	sp,sp,-4
   2bf14:	df000015 	stw	fp,0(sp)
   2bf18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2bf1c:	000170fa 	wrctl	ienable,zero
}
   2bf20:	e037883a 	mov	sp,fp
   2bf24:	df000017 	ldw	fp,0(sp)
   2bf28:	dec00104 	addi	sp,sp,4
   2bf2c:	f800283a 	ret

0002bf30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2bf30:	defffa04 	addi	sp,sp,-24
   2bf34:	dfc00515 	stw	ra,20(sp)
   2bf38:	df000415 	stw	fp,16(sp)
   2bf3c:	df000404 	addi	fp,sp,16
   2bf40:	e13ffe15 	stw	r4,-8(fp)
   2bf44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2bf48:	e0bfff17 	ldw	r2,-4(fp)
   2bf4c:	10800017 	ldw	r2,0(r2)
   2bf50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2bf54:	e13ffe17 	ldw	r4,-8(fp)
   2bf58:	00207bc0 	call	207bc <strlen>
   2bf5c:	10800044 	addi	r2,r2,1
   2bf60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2bf64:	00000d06 	br	2bf9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2bf68:	e0bffc17 	ldw	r2,-16(fp)
   2bf6c:	10c00217 	ldw	r3,8(r2)
   2bf70:	e0bffd17 	ldw	r2,-12(fp)
   2bf74:	1809883a 	mov	r4,r3
   2bf78:	e17ffe17 	ldw	r5,-8(fp)
   2bf7c:	100d883a 	mov	r6,r2
   2bf80:	002c1f40 	call	2c1f4 <memcmp>
   2bf84:	1000021e 	bne	r2,zero,2bf90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2bf88:	e0bffc17 	ldw	r2,-16(fp)
   2bf8c:	00000706 	br	2bfac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2bf90:	e0bffc17 	ldw	r2,-16(fp)
   2bf94:	10800017 	ldw	r2,0(r2)
   2bf98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2bf9c:	e0fffc17 	ldw	r3,-16(fp)
   2bfa0:	e0bfff17 	ldw	r2,-4(fp)
   2bfa4:	18bff01e 	bne	r3,r2,2bf68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2bfa8:	0005883a 	mov	r2,zero
}
   2bfac:	e037883a 	mov	sp,fp
   2bfb0:	dfc00117 	ldw	ra,4(sp)
   2bfb4:	df000017 	ldw	fp,0(sp)
   2bfb8:	dec00204 	addi	sp,sp,8
   2bfbc:	f800283a 	ret

0002bfc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2bfc0:	defffb04 	addi	sp,sp,-20
   2bfc4:	dfc00415 	stw	ra,16(sp)
   2bfc8:	df000315 	stw	fp,12(sp)
   2bfcc:	df000304 	addi	fp,sp,12
   2bfd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2bfd4:	008001f4 	movhi	r2,7
   2bfd8:	10b97204 	addi	r2,r2,-6712
   2bfdc:	10800017 	ldw	r2,0(r2)
   2bfe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2bfe4:	00003106 	br	2c0ac <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2bfe8:	e0bffd17 	ldw	r2,-12(fp)
   2bfec:	10800217 	ldw	r2,8(r2)
   2bff0:	1009883a 	mov	r4,r2
   2bff4:	00207bc0 	call	207bc <strlen>
   2bff8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2bffc:	e0bffd17 	ldw	r2,-12(fp)
   2c000:	10c00217 	ldw	r3,8(r2)
   2c004:	e0bffe17 	ldw	r2,-8(fp)
   2c008:	10bfffc4 	addi	r2,r2,-1
   2c00c:	1885883a 	add	r2,r3,r2
   2c010:	10800003 	ldbu	r2,0(r2)
   2c014:	10803fcc 	andi	r2,r2,255
   2c018:	1080201c 	xori	r2,r2,128
   2c01c:	10bfe004 	addi	r2,r2,-128
   2c020:	10800bd8 	cmpnei	r2,r2,47
   2c024:	1000031e 	bne	r2,zero,2c034 <alt_find_file+0x74>
    {
      len -= 1;
   2c028:	e0bffe17 	ldw	r2,-8(fp)
   2c02c:	10bfffc4 	addi	r2,r2,-1
   2c030:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c034:	e0bffe17 	ldw	r2,-8(fp)
   2c038:	e0ffff17 	ldw	r3,-4(fp)
   2c03c:	1885883a 	add	r2,r3,r2
   2c040:	10800003 	ldbu	r2,0(r2)
   2c044:	10803fcc 	andi	r2,r2,255
   2c048:	1080201c 	xori	r2,r2,128
   2c04c:	10bfe004 	addi	r2,r2,-128
   2c050:	10800be0 	cmpeqi	r2,r2,47
   2c054:	1000081e 	bne	r2,zero,2c078 <alt_find_file+0xb8>
   2c058:	e0bffe17 	ldw	r2,-8(fp)
   2c05c:	e0ffff17 	ldw	r3,-4(fp)
   2c060:	1885883a 	add	r2,r3,r2
   2c064:	10800003 	ldbu	r2,0(r2)
   2c068:	10803fcc 	andi	r2,r2,255
   2c06c:	1080201c 	xori	r2,r2,128
   2c070:	10bfe004 	addi	r2,r2,-128
   2c074:	10000a1e 	bne	r2,zero,2c0a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2c078:	e0bffd17 	ldw	r2,-12(fp)
   2c07c:	10c00217 	ldw	r3,8(r2)
   2c080:	e0bffe17 	ldw	r2,-8(fp)
   2c084:	1809883a 	mov	r4,r3
   2c088:	e17fff17 	ldw	r5,-4(fp)
   2c08c:	100d883a 	mov	r6,r2
   2c090:	002c1f40 	call	2c1f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c094:	1000021e 	bne	r2,zero,2c0a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2c098:	e0bffd17 	ldw	r2,-12(fp)
   2c09c:	00000806 	br	2c0c0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2c0a0:	e0bffd17 	ldw	r2,-12(fp)
   2c0a4:	10800017 	ldw	r2,0(r2)
   2c0a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c0ac:	e0fffd17 	ldw	r3,-12(fp)
   2c0b0:	008001f4 	movhi	r2,7
   2c0b4:	10b97204 	addi	r2,r2,-6712
   2c0b8:	18bfcb1e 	bne	r3,r2,2bfe8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2c0bc:	0005883a 	mov	r2,zero
}
   2c0c0:	e037883a 	mov	sp,fp
   2c0c4:	dfc00117 	ldw	ra,4(sp)
   2c0c8:	df000017 	ldw	fp,0(sp)
   2c0cc:	dec00204 	addi	sp,sp,8
   2c0d0:	f800283a 	ret

0002c0d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2c0d4:	defffa04 	addi	sp,sp,-24
   2c0d8:	dfc00515 	stw	ra,20(sp)
   2c0dc:	df000415 	stw	fp,16(sp)
   2c0e0:	dc000315 	stw	r16,12(sp)
   2c0e4:	df000304 	addi	fp,sp,12
   2c0e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2c0ec:	00bffa04 	movi	r2,-24
   2c0f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c0f4:	e03ffd15 	stw	zero,-12(fp)
   2c0f8:	00002106 	br	2c180 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2c0fc:	040001f4 	movhi	r16,7
   2c100:	8434f504 	addi	r16,r16,-11308
   2c104:	e0bffd17 	ldw	r2,-12(fp)
   2c108:	1009883a 	mov	r4,r2
   2c10c:	01400304 	movi	r5,12
   2c110:	00297540 	call	29754 <__mulsi3>
   2c114:	8085883a 	add	r2,r16,r2
   2c118:	10800017 	ldw	r2,0(r2)
   2c11c:	1000151e 	bne	r2,zero,2c174 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2c120:	040001f4 	movhi	r16,7
   2c124:	8434f504 	addi	r16,r16,-11308
   2c128:	e0bffd17 	ldw	r2,-12(fp)
   2c12c:	1009883a 	mov	r4,r2
   2c130:	01400304 	movi	r5,12
   2c134:	00297540 	call	29754 <__mulsi3>
   2c138:	8085883a 	add	r2,r16,r2
   2c13c:	e0ffff17 	ldw	r3,-4(fp)
   2c140:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2c144:	008001f4 	movhi	r2,7
   2c148:	10b97604 	addi	r2,r2,-6696
   2c14c:	10c00017 	ldw	r3,0(r2)
   2c150:	e0bffd17 	ldw	r2,-12(fp)
   2c154:	1880040e 	bge	r3,r2,2c168 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2c158:	008001f4 	movhi	r2,7
   2c15c:	10b97604 	addi	r2,r2,-6696
   2c160:	e0fffd17 	ldw	r3,-12(fp)
   2c164:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2c168:	e0bffd17 	ldw	r2,-12(fp)
   2c16c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2c170:	00000606 	br	2c18c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c174:	e0bffd17 	ldw	r2,-12(fp)
   2c178:	10800044 	addi	r2,r2,1
   2c17c:	e0bffd15 	stw	r2,-12(fp)
   2c180:	e0bffd17 	ldw	r2,-12(fp)
   2c184:	10800810 	cmplti	r2,r2,32
   2c188:	103fdc1e 	bne	r2,zero,2c0fc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2c18c:	e0bffe17 	ldw	r2,-8(fp)
}
   2c190:	e037883a 	mov	sp,fp
   2c194:	dfc00217 	ldw	ra,8(sp)
   2c198:	df000117 	ldw	fp,4(sp)
   2c19c:	dc000017 	ldw	r16,0(sp)
   2c1a0:	dec00304 	addi	sp,sp,12
   2c1a4:	f800283a 	ret

0002c1a8 <atexit>:
   2c1a8:	200b883a 	mov	r5,r4
   2c1ac:	000d883a 	mov	r6,zero
   2c1b0:	0009883a 	mov	r4,zero
   2c1b4:	000f883a 	mov	r7,zero
   2c1b8:	002c2701 	jmpi	2c270 <__register_exitproc>

0002c1bc <exit>:
   2c1bc:	defffe04 	addi	sp,sp,-8
   2c1c0:	000b883a 	mov	r5,zero
   2c1c4:	dc000015 	stw	r16,0(sp)
   2c1c8:	dfc00115 	stw	ra,4(sp)
   2c1cc:	2021883a 	mov	r16,r4
   2c1d0:	002c3a00 	call	2c3a0 <__call_exitprocs>
   2c1d4:	008001f4 	movhi	r2,7
   2c1d8:	10b96d04 	addi	r2,r2,-6732
   2c1dc:	11000017 	ldw	r4,0(r2)
   2c1e0:	20800f17 	ldw	r2,60(r4)
   2c1e4:	10000126 	beq	r2,zero,2c1ec <exit+0x30>
   2c1e8:	103ee83a 	callr	r2
   2c1ec:	8009883a 	mov	r4,r16
   2c1f0:	002c5400 	call	2c540 <_exit>

0002c1f4 <memcmp>:
   2c1f4:	01c000c4 	movi	r7,3
   2c1f8:	3980192e 	bgeu	r7,r6,2c260 <memcmp+0x6c>
   2c1fc:	2904b03a 	or	r2,r5,r4
   2c200:	11c4703a 	and	r2,r2,r7
   2c204:	10000f26 	beq	r2,zero,2c244 <memcmp+0x50>
   2c208:	20c00003 	ldbu	r3,0(r4)
   2c20c:	28800003 	ldbu	r2,0(r5)
   2c210:	1880151e 	bne	r3,r2,2c268 <memcmp+0x74>
   2c214:	31bfff84 	addi	r6,r6,-2
   2c218:	01ffffc4 	movi	r7,-1
   2c21c:	00000406 	br	2c230 <memcmp+0x3c>
   2c220:	20c00003 	ldbu	r3,0(r4)
   2c224:	28800003 	ldbu	r2,0(r5)
   2c228:	31bfffc4 	addi	r6,r6,-1
   2c22c:	18800e1e 	bne	r3,r2,2c268 <memcmp+0x74>
   2c230:	21000044 	addi	r4,r4,1
   2c234:	29400044 	addi	r5,r5,1
   2c238:	31fff91e 	bne	r6,r7,2c220 <memcmp+0x2c>
   2c23c:	0005883a 	mov	r2,zero
   2c240:	f800283a 	ret
   2c244:	20c00017 	ldw	r3,0(r4)
   2c248:	28800017 	ldw	r2,0(r5)
   2c24c:	1880041e 	bne	r3,r2,2c260 <memcmp+0x6c>
   2c250:	31bfff04 	addi	r6,r6,-4
   2c254:	21000104 	addi	r4,r4,4
   2c258:	29400104 	addi	r5,r5,4
   2c25c:	39bff936 	bltu	r7,r6,2c244 <memcmp+0x50>
   2c260:	303fe91e 	bne	r6,zero,2c208 <memcmp+0x14>
   2c264:	003ff506 	br	2c23c <memcmp+0x48>
   2c268:	1885c83a 	sub	r2,r3,r2
   2c26c:	f800283a 	ret

0002c270 <__register_exitproc>:
   2c270:	defffa04 	addi	sp,sp,-24
   2c274:	008001f4 	movhi	r2,7
   2c278:	10b96d04 	addi	r2,r2,-6732
   2c27c:	dc000315 	stw	r16,12(sp)
   2c280:	14000017 	ldw	r16,0(r2)
   2c284:	dc400415 	stw	r17,16(sp)
   2c288:	dfc00515 	stw	ra,20(sp)
   2c28c:	80805217 	ldw	r2,328(r16)
   2c290:	2023883a 	mov	r17,r4
   2c294:	10003e26 	beq	r2,zero,2c390 <__register_exitproc+0x120>
   2c298:	10c00117 	ldw	r3,4(r2)
   2c29c:	020007c4 	movi	r8,31
   2c2a0:	40c0180e 	bge	r8,r3,2c304 <__register_exitproc+0x94>
   2c2a4:	00800034 	movhi	r2,0
   2c2a8:	10800004 	addi	r2,r2,0
   2c2ac:	1000061e 	bne	r2,zero,2c2c8 <__register_exitproc+0x58>
   2c2b0:	00bfffc4 	movi	r2,-1
   2c2b4:	dfc00517 	ldw	ra,20(sp)
   2c2b8:	dc400417 	ldw	r17,16(sp)
   2c2bc:	dc000317 	ldw	r16,12(sp)
   2c2c0:	dec00604 	addi	sp,sp,24
   2c2c4:	f800283a 	ret
   2c2c8:	01006404 	movi	r4,400
   2c2cc:	d9400015 	stw	r5,0(sp)
   2c2d0:	d9800115 	stw	r6,4(sp)
   2c2d4:	d9c00215 	stw	r7,8(sp)
   2c2d8:	00000000 	call	0 <__alt_mem_ins_mem_c1-0x20000>
   2c2dc:	d9400017 	ldw	r5,0(sp)
   2c2e0:	d9800117 	ldw	r6,4(sp)
   2c2e4:	d9c00217 	ldw	r7,8(sp)
   2c2e8:	103ff126 	beq	r2,zero,2c2b0 <__register_exitproc+0x40>
   2c2ec:	80c05217 	ldw	r3,328(r16)
   2c2f0:	10000115 	stw	zero,4(r2)
   2c2f4:	10c00015 	stw	r3,0(r2)
   2c2f8:	80805215 	stw	r2,328(r16)
   2c2fc:	10006215 	stw	zero,392(r2)
   2c300:	10006315 	stw	zero,396(r2)
   2c304:	10c00117 	ldw	r3,4(r2)
   2c308:	88000d1e 	bne	r17,zero,2c340 <__register_exitproc+0xd0>
   2c30c:	19000084 	addi	r4,r3,2
   2c310:	2109883a 	add	r4,r4,r4
   2c314:	18c00044 	addi	r3,r3,1
   2c318:	2109883a 	add	r4,r4,r4
   2c31c:	1109883a 	add	r4,r2,r4
   2c320:	10c00115 	stw	r3,4(r2)
   2c324:	0005883a 	mov	r2,zero
   2c328:	21400015 	stw	r5,0(r4)
   2c32c:	dfc00517 	ldw	ra,20(sp)
   2c330:	dc400417 	ldw	r17,16(sp)
   2c334:	dc000317 	ldw	r16,12(sp)
   2c338:	dec00604 	addi	sp,sp,24
   2c33c:	f800283a 	ret
   2c340:	02400044 	movi	r9,1
   2c344:	12806217 	ldw	r10,392(r2)
   2c348:	48d2983a 	sll	r9,r9,r3
   2c34c:	19000804 	addi	r4,r3,32
   2c350:	18d1883a 	add	r8,r3,r3
   2c354:	2109883a 	add	r4,r4,r4
   2c358:	4211883a 	add	r8,r8,r8
   2c35c:	2109883a 	add	r4,r4,r4
   2c360:	1109883a 	add	r4,r2,r4
   2c364:	1211883a 	add	r8,r2,r8
   2c368:	5254b03a 	or	r10,r10,r9
   2c36c:	21c02215 	stw	r7,136(r4)
   2c370:	41802215 	stw	r6,136(r8)
   2c374:	12806215 	stw	r10,392(r2)
   2c378:	01000084 	movi	r4,2
   2c37c:	893fe31e 	bne	r17,r4,2c30c <__register_exitproc+0x9c>
   2c380:	11006317 	ldw	r4,396(r2)
   2c384:	2252b03a 	or	r9,r4,r9
   2c388:	12406315 	stw	r9,396(r2)
   2c38c:	003fdf06 	br	2c30c <__register_exitproc+0x9c>
   2c390:	008001f4 	movhi	r2,7
   2c394:	10b9d804 	addi	r2,r2,-6304
   2c398:	80805215 	stw	r2,328(r16)
   2c39c:	003fbe06 	br	2c298 <__register_exitproc+0x28>

0002c3a0 <__call_exitprocs>:
   2c3a0:	008001f4 	movhi	r2,7
   2c3a4:	10b96d04 	addi	r2,r2,-6732
   2c3a8:	10800017 	ldw	r2,0(r2)
   2c3ac:	defff304 	addi	sp,sp,-52
   2c3b0:	df000b15 	stw	fp,44(sp)
   2c3b4:	d8800015 	stw	r2,0(sp)
   2c3b8:	10805204 	addi	r2,r2,328
   2c3bc:	dd400815 	stw	r21,32(sp)
   2c3c0:	dfc00c15 	stw	ra,48(sp)
   2c3c4:	ddc00a15 	stw	r23,40(sp)
   2c3c8:	dd800915 	stw	r22,36(sp)
   2c3cc:	dd000715 	stw	r20,28(sp)
   2c3d0:	dcc00615 	stw	r19,24(sp)
   2c3d4:	dc800515 	stw	r18,20(sp)
   2c3d8:	dc400415 	stw	r17,16(sp)
   2c3dc:	dc000315 	stw	r16,12(sp)
   2c3e0:	d9000115 	stw	r4,4(sp)
   2c3e4:	2839883a 	mov	fp,r5
   2c3e8:	d8800215 	stw	r2,8(sp)
   2c3ec:	057fffc4 	movi	r21,-1
   2c3f0:	d8800017 	ldw	r2,0(sp)
   2c3f4:	ddc00217 	ldw	r23,8(sp)
   2c3f8:	14805217 	ldw	r18,328(r2)
   2c3fc:	90001726 	beq	r18,zero,2c45c <__call_exitprocs+0xbc>
   2c400:	94400117 	ldw	r17,4(r18)
   2c404:	8c3fffc4 	addi	r16,r17,-1
   2c408:	80001116 	blt	r16,zero,2c450 <__call_exitprocs+0xb0>
   2c40c:	8c400044 	addi	r17,r17,1
   2c410:	8427883a 	add	r19,r16,r16
   2c414:	8c63883a 	add	r17,r17,r17
   2c418:	95802204 	addi	r22,r18,136
   2c41c:	9ce7883a 	add	r19,r19,r19
   2c420:	8c63883a 	add	r17,r17,r17
   2c424:	b4e7883a 	add	r19,r22,r19
   2c428:	9463883a 	add	r17,r18,r17
   2c42c:	e0001726 	beq	fp,zero,2c48c <__call_exitprocs+0xec>
   2c430:	8c87c83a 	sub	r3,r17,r18
   2c434:	b0c7883a 	add	r3,r22,r3
   2c438:	18c01e17 	ldw	r3,120(r3)
   2c43c:	1f001326 	beq	r3,fp,2c48c <__call_exitprocs+0xec>
   2c440:	843fffc4 	addi	r16,r16,-1
   2c444:	9cffff04 	addi	r19,r19,-4
   2c448:	8c7fff04 	addi	r17,r17,-4
   2c44c:	857ff71e 	bne	r16,r21,2c42c <__call_exitprocs+0x8c>
   2c450:	00800034 	movhi	r2,0
   2c454:	10800004 	addi	r2,r2,0
   2c458:	10002a1e 	bne	r2,zero,2c504 <__call_exitprocs+0x164>
   2c45c:	dfc00c17 	ldw	ra,48(sp)
   2c460:	df000b17 	ldw	fp,44(sp)
   2c464:	ddc00a17 	ldw	r23,40(sp)
   2c468:	dd800917 	ldw	r22,36(sp)
   2c46c:	dd400817 	ldw	r21,32(sp)
   2c470:	dd000717 	ldw	r20,28(sp)
   2c474:	dcc00617 	ldw	r19,24(sp)
   2c478:	dc800517 	ldw	r18,20(sp)
   2c47c:	dc400417 	ldw	r17,16(sp)
   2c480:	dc000317 	ldw	r16,12(sp)
   2c484:	dec00d04 	addi	sp,sp,52
   2c488:	f800283a 	ret
   2c48c:	91000117 	ldw	r4,4(r18)
   2c490:	88c00017 	ldw	r3,0(r17)
   2c494:	213fffc4 	addi	r4,r4,-1
   2c498:	24001526 	beq	r4,r16,2c4f0 <__call_exitprocs+0x150>
   2c49c:	88000015 	stw	zero,0(r17)
   2c4a0:	183fe726 	beq	r3,zero,2c440 <__call_exitprocs+0xa0>
   2c4a4:	00800044 	movi	r2,1
   2c4a8:	1408983a 	sll	r4,r2,r16
   2c4ac:	91406217 	ldw	r5,392(r18)
   2c4b0:	95000117 	ldw	r20,4(r18)
   2c4b4:	214a703a 	and	r5,r4,r5
   2c4b8:	28000b26 	beq	r5,zero,2c4e8 <__call_exitprocs+0x148>
   2c4bc:	91406317 	ldw	r5,396(r18)
   2c4c0:	2148703a 	and	r4,r4,r5
   2c4c4:	20000c1e 	bne	r4,zero,2c4f8 <__call_exitprocs+0x158>
   2c4c8:	99400017 	ldw	r5,0(r19)
   2c4cc:	d9000117 	ldw	r4,4(sp)
   2c4d0:	183ee83a 	callr	r3
   2c4d4:	90c00117 	ldw	r3,4(r18)
   2c4d8:	1d3fc51e 	bne	r3,r20,2c3f0 <__call_exitprocs+0x50>
   2c4dc:	b8c00017 	ldw	r3,0(r23)
   2c4e0:	1cbfd726 	beq	r3,r18,2c440 <__call_exitprocs+0xa0>
   2c4e4:	003fc206 	br	2c3f0 <__call_exitprocs+0x50>
   2c4e8:	183ee83a 	callr	r3
   2c4ec:	003ff906 	br	2c4d4 <__call_exitprocs+0x134>
   2c4f0:	94000115 	stw	r16,4(r18)
   2c4f4:	003fea06 	br	2c4a0 <__call_exitprocs+0x100>
   2c4f8:	99000017 	ldw	r4,0(r19)
   2c4fc:	183ee83a 	callr	r3
   2c500:	003ff406 	br	2c4d4 <__call_exitprocs+0x134>
   2c504:	90c00117 	ldw	r3,4(r18)
   2c508:	1800071e 	bne	r3,zero,2c528 <__call_exitprocs+0x188>
   2c50c:	90c00017 	ldw	r3,0(r18)
   2c510:	18000926 	beq	r3,zero,2c538 <__call_exitprocs+0x198>
   2c514:	9009883a 	mov	r4,r18
   2c518:	b8c00015 	stw	r3,0(r23)
   2c51c:	00000000 	call	0 <__alt_mem_ins_mem_c1-0x20000>
   2c520:	bc800017 	ldw	r18,0(r23)
   2c524:	003fb506 	br	2c3fc <__call_exitprocs+0x5c>
   2c528:	90c00017 	ldw	r3,0(r18)
   2c52c:	902f883a 	mov	r23,r18
   2c530:	1825883a 	mov	r18,r3
   2c534:	003fb106 	br	2c3fc <__call_exitprocs+0x5c>
   2c538:	0007883a 	mov	r3,zero
   2c53c:	003ffb06 	br	2c52c <__call_exitprocs+0x18c>

0002c540 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2c540:	defffc04 	addi	sp,sp,-16
   2c544:	df000315 	stw	fp,12(sp)
   2c548:	df000304 	addi	fp,sp,12
   2c54c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2c550:	0001883a 	nop
   2c554:	e0bfff17 	ldw	r2,-4(fp)
   2c558:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2c55c:	e0bffd17 	ldw	r2,-12(fp)
   2c560:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2c564:	e0bffe17 	ldw	r2,-8(fp)
   2c568:	10000226 	beq	r2,zero,2c574 <_exit+0x34>
    ALT_SIM_FAIL();
   2c56c:	002af070 	cmpltui	zero,zero,43969
   2c570:	00000106 	br	2c578 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2c574:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2c578:	003fff06 	br	2c578 <_exit+0x38>

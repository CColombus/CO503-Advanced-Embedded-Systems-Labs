
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000ccd0 memsz 0x0000ccd0 flags r-x
    LOAD off    0x0000ec24 vaddr 0x0006cc24 paddr 0x0002ccf0 align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x00010800 vaddr 0x0006c800 paddr 0x0006c800 align 2**12
         filesz 0x00000424 memsz 0x00000424 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cb38  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000424  0006c800  0006c800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0006cc24  0002ccf0  0000ec24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  0006e67c  0002e748  0001067c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010c24  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e90  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002425f  00000000  00000000  00011ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009d29  00000000  00000000  00035d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a75e  00000000  00000000  0003fa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000019cc  00000000  00000000  0004a1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002e8f  00000000  00000000  0004bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000116cc  00000000  00000000  0004ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000600e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  000600f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00063eaf  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00063eb2  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00063eb6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00063eb7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00063eb8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00063ebc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00063ec0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00063ec4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00063ecf  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00063eda  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  00063ee5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  00063eea  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074b8b  00000000  00000000  00063f0a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0006c800 l    d  .rodata	00000000 .rodata
0006cc24 l    d  .rwdata	00000000 .rwdata
0006e67c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0006cc24 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021324 l     F .text	00000034 __sprint_r
0006ca46 l     O .rodata	00000010 blanks.3515
0006ca56 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0002350c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024f7c l     F .text	00000008 __fp_lock
00024f84 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0006ca88 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0006cbd0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00029560 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002a2a0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0002a5a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002a6c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002a728 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002a828 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002a91c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002aa08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002abe4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0006e66c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002ae58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002af98 l     F .text	00000038 alt_dev_reg
0006d5e0 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002b2a8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002b4ac l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002bae8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002be80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002c30c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002c464 l     F .text	00000050 alt_get_errno
0002c4b4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
00027a3c g     F .text	00000074 _mprec_log10
00027b2c g     F .text	00000084 __any_on
000287ac g     F .text	00000064 _isatty_r
0006cab8 g     O .rodata	00000028 __mprec_tinytens
0002ab2c g     F .text	00000078 alt_main
0002111c g     F .text	00000044 __ashldi3
00021200 g     F .text	00000084 _puts_r
0006e67c g     O .bss	00000004 writep
0006e6f4 g     O .bss	00000100 alt_irq
00028810 g     F .text	0000006c _lseek_r
0002ccf0 g       *ABS*	00000000 __flash_rwdata_start
00029e00 g     F .text	0000005c __eqdf2
000204dc g     F .text	00000040 FIFO_1_INIT
0006e984 g       *ABS*	00000000 __alt_heap_start
000211c4 g     F .text	0000003c printf
00028350 g     F .text	0000005c __sseek
00025020 g     F .text	0000010c __sinit
00025cb8 g     F .text	0000009c _setlocale_r
00024f98 g     F .text	00000078 __sfmoreglue
0002abc4 g     F .text	00000020 __malloc_unlock
00020850 g     F .text	0000013c __divsf3
0006e680 g     O .bss	00000004 readp
0006e6bc g     O .bss	00000004 altera_avalon_timer_ts_freq
000268f8 g     F .text	0000018c memmove
00025010 g     F .text	00000010 _cleanup
00026b60 g     F .text	000000a8 _Balloc
00029eb8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00028744 g     F .text	00000068 _fstat_r
0006e6a8 g     O .bss	00000004 errno
00020aa4 g     F .text	00000038 __make_dp
0006e6b0 g     O .bss	00000004 alt_argv
00076640 g       *ABS*	00000000 _gp
0006d460 g     O .rwdata	00000180 alt_fd_list
0002c8b8 g     F .text	00000090 alt_find_dev
000267b8 g     F .text	00000140 memcpy
00024f8c g     F .text	0000000c _cleanup_r
00029fdc g     F .text	000000d4 __floatsidf
0002c3ec g     F .text	00000078 alt_io_redirect
00029f80 g     F .text	0000005c __ltdf2
0002ccf0 g       *ABS*	00000000 __DTOR_END__
00021284 g     F .text	00000014 puts
00027998 g     F .text	000000a4 __ratio
0002b6ac g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00021198 g     F .text	0000002c _printf_r
0002a3c0 g     F .text	00000008 __udivsi3
0002a878 g     F .text	000000a4 isatty
0006cb08 g     O .rodata	000000c8 __mprec_tens
00025d54 g     F .text	0000000c __locale_charset
0006e6a4 g     O .bss	00000004 __malloc_top_pad
0006e648 g     O .rwdata	00000004 __mb_cur_max
00025d60 g     F .text	0000000c _localeconv_r
00026f90 g     F .text	0000003c __i2b
00025674 g     F .text	000004e4 __sfvwrite_r
00028210 g     F .text	00000064 _sbrk_r
00020550 g     F .text	00000170 consumer
0006e684 g     O .bss	00000004 fullp
0002887c g     F .text	0000006c _read_r
0006d024 g     O .rwdata	0000000c __lc_ctype
0006e664 g     O .rwdata	00000004 alt_max_fd
0002a3d0 g     F .text	00000104 __unpack_d
000285f4 g     F .text	0000013c _fclose_r
00024f4c g     F .text	00000030 fflush
0006e6a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002098c g     F .text	00000044 __extendsfdf2
000298b4 g     F .text	00000054 __adddf3
0002770c g     F .text	00000148 __b2d
00028f38 g     F .text	00000628 __umoddi3
0002aa58 g     F .text	000000d4 lseek
0006e640 g     O .rwdata	00000004 _global_impure_ptr
00027bb0 g     F .text	000005fc _realloc_r
0006e984 g       *ABS*	00000000 __bss_end
0002c21c g     F .text	000000f0 alt_iic_isr_register
0002c794 g     F .text	00000104 alt_tick
000288e8 g     F .text	00000650 __udivdi3
0006cae0 g     O .rodata	00000028 __mprec_bigtens
00026d74 g     F .text	00000104 __s2b
0002a184 g     F .text	0000011c __floatunsidf
000274ac g     F .text	00000058 __mcmp
00025238 g     F .text	00000018 __fp_lock_all
0002c1d0 g     F .text	0000004c alt_ic_irq_enabled
0002c6fc g     F .text	00000098 alt_alarm_stop
0006e6c0 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
0006d438 g     O .rwdata	00000028 alt_dev_null
00020dc4 g     F .text	000000c8 __unpack_f
0002be64 g     F .text	0000001c alt_dcache_flush_all
00026e78 g     F .text	00000068 __hi0bits
0002a0b0 g     F .text	000000d4 __fixdfsi
0006e67c g       *ABS*	00000000 __ram_rwdata_end
0006e65c g     O .rwdata	00000008 alt_dev_list
0002aea8 g     F .text	000000f0 write
0002bcfc g     F .text	00000028 alt_timestamp_freq
0006cc24 g       *ABS*	00000000 __ram_rodata_end
0002a778 g     F .text	000000b0 fstat
000210d8 g     F .text	00000044 __lshrdi3
00027224 g     F .text	0000012c __pow5mult
0006e698 g     O .bss	00000004 __nlocale_changed
0002a3c8 g     F .text	00000008 __umodsi3
0006e984 g       *ABS*	00000000 end
00020c98 g     F .text	0000012c __pack_f
0002b1e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002ccf0 g       *ABS*	00000000 __CTOR_LIST__
00079000 g       *ABS*	00000000 __alt_stack_pointer
0002bb5c g     F .text	00000088 alt_avalon_timer_sc_init
00020bec g     F .text	000000ac __clzsi2
0002b8c4 g     F .text	00000224 altera_avalon_jtag_uart_write
00025228 g     F .text	00000004 __sfp_lock_acquire
000266c0 g     F .text	000000f8 memchr
00021358 g     F .text	00001e7c ___vfprintf_internal_r
000253a4 g     F .text	000002d0 _free_r
0002336c g     F .text	000001a0 __call_exitprocs
00060000 g       *ABS*	00000000 __alt_mem_data_mem_shared
0006e694 g     O .bss	00000004 __mlocale_changed
0006e64c g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
0006e6c4 g     O .bss	00000004 _alt_tick_rate
00027350 g     F .text	0000015c __lshift
0006e6c8 g     O .bss	00000004 _alt_nticks
0002ac34 g     F .text	000000f4 read
0002b004 g     F .text	00000080 alt_sys_init
0002cbc0 g     F .text	00000130 __register_exitproc
00026fcc g     F .text	00000258 __multiply
0002b550 g     F .text	00000068 altera_avalon_jtag_uart_close
000210b0 g     F .text	00000028 __mulsi3
0006cc24 g       *ABS*	00000000 __ram_rwdata_start
0006c800 g       *ABS*	00000000 __ram_rodata_start
0006e6cc g     O .bss	00000028 __malloc_current_mallinfo
00027854 g     F .text	00000144 __d2b
0002b084 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002ca5c g     F .text	000000d4 alt_get_fd
0002a4d4 g     F .text	000000d0 __fpcmp_parts_d
00028590 g     F .text	00000064 _close_r
0002cb44 g     F .text	0000007c memcmp
0002b144 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0006e984 g       *ABS*	00000000 __alt_stack_base
0002b194 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000231f8 g     F .text	00000174 __swsetup_r
00029c4c g     F .text	000001b4 __divdf3
0002512c g     F .text	000000fc __sfp
00027ab0 g     F .text	0000007c __copybits
0006d030 g     O .rwdata	00000408 __malloc_av_
00025234 g     F .text	00000004 __sinit_lock_release
00029968 g     F .text	000002e4 __muldf3
00028274 g     F .text	00000054 __sread
0006c8ec g     O .rodata	00000010 __thenan_sf
0002c948 g     F .text	00000114 alt_find_file
0002bed0 g     F .text	000000a0 alt_dev_llist_insert
0002aba4 g     F .text	00000020 __malloc_lock
0002ada8 g     F .text	000000b0 sbrk
00024d64 g     F .text	000001e8 _fflush_r
000284c4 g     F .text	000000cc _calloc_r
0006e67c g       *ABS*	00000000 __bss_start
00026a84 g     F .text	000000dc memset
0002051c g     F .text	00000034 main
0006e6b4 g     O .bss	00000004 alt_envp
0006e69c g     O .bss	00000004 __malloc_max_total_mem
0002b0e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000283ac g     F .text	00000008 __sclose
00079000 g       *ABS*	00000000 __alt_heap_limit
00028730 g     F .text	00000014 fclose
0002bbe4 g     F .text	00000088 alt_timestamp_start
0006e7f4 g     O .bss	00000190 _atexit0
00023748 g     F .text	0000161c _dtoa_r
00025f3c g     F .text	00000784 _malloc_r
0006e668 g     O .rwdata	00000004 alt_errno
00025b58 g     F .text	000000a8 _fwalk
000201f4 g     F .text	00000174 WRITE_FIFO_1
0002a314 g     F .text	00000050 __divsi3
0006cbdc g     O .rodata	00000014 __thenan_df
00025268 g     F .text	0000013c _malloc_trim_r
0002ccf0 g       *ABS*	00000000 __CTOR_END__
000206c0 g     F .text	00000190 __mulsf3
000283b4 g     F .text	000000a4 strcmp
0006c800 g       *ABS*	00000000 __flash_rodata_start
0002ccf0 g       *ABS*	00000000 __DTOR_LIST__
00029e5c g     F .text	0000005c __nedf2
0002afd0 g     F .text	00000034 alt_irq_init
0002ad28 g     F .text	00000080 alt_release_fd
0006c8fc g     O .rodata	00000100 __clz_tab
0006e690 g     O .bss	00000004 _PathLocale
0002cb30 g     F .text	00000014 atexit
00028458 g     F .text	0000006c _write_r
00025d6c g     F .text	0000001c setlocale
0006e644 g     O .rwdata	00000004 _impure_ptr
0006e6ac g     O .bss	00000004 alt_argc
0006e6b8 g     O .bss	00000004 altera_avalon_timer_ts_base
0002bfcc g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000276ac g     F .text	00000060 __ulp
000281ac g     F .text	00000038 __isinfd
00020000 g       *ABS*	00000000 __alt_mem_ins_mem_c1
00025250 g     F .text	00000018 __fp_unlock_all
0006e654 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025d88 g     F .text	0000000c localeconv
0002bc6c g     F .text	00000090 alt_timestamp
0002c044 g     F .text	00000050 alt_ic_isr_register
0006e67c g       *ABS*	00000000 _edata
0006e984 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002b5b8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002c130 g     F .text	000000a0 alt_ic_irq_disable
000282c8 g     F .text	00000088 __swrite
0006e650 g     O .rwdata	00000004 __malloc_trim_threshold
0002c898 g     F .text	00000020 altera_nios2_qsys_irq_init
00021160 g     F .text	00000038 exit
00025c00 g     F .text	000000b8 _fwalk_reent
000209d0 g     F .text	000000d4 __floatunsisf
00027504 g     F .text	000001a8 __mdiff
0002a364 g     F .text	0000005c __modsi3
00079000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002522c g     F .text	00000004 __sfp_lock_release
000281e4 g     F .text	0000002c __isnand
0002a6ec g     F .text	0000003c _exit
0002bd24 g     F .text	00000140 alt_alarm_start
00020adc g     F .text	00000110 __muldi3
00025d94 g     F .text	000001a8 __smakebuf_r
00021298 g     F .text	0000008c strlen
0002c5a4 g     F .text	00000158 open
00029f1c g     F .text	00000064 __gedf2
00020368 g     F .text	00000174 READ_FIFO_1
0002c028 g     F .text	0000001c alt_icache_flush_all
0006e670 g     O .rwdata	00000004 alt_priority_mask
0006e688 g     O .bss	00000004 emptyp
0002c094 g     F .text	0000009c alt_ic_irq_enable
000231d4 g     F .text	00000024 __vfprintf_internal
00029908 g     F .text	00000060 __subdf3
00026ee0 g     F .text	000000b0 __lo0bits
0006e674 g     O .rwdata	00000008 alt_alarm_list
0002bf70 g     F .text	0000005c _do_ctors
0006e68c g     O .bss	00000004 countp
0002a5f4 g     F .text	000000cc close
0002a988 g     F .text	00000080 alt_load
00020e8c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00025230 g     F .text	00000004 __sinit_lock_acquire
00026c30 g     F .text	00000144 __multadd
00026c08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c001f4 	movhi	r3,7
   20130:	18f9bd04 	addi	r3,r3,-6412
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010001f4 	movhi	r4,7
   20148:	2139bd04 	addi	r4,r4,-6412
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   201c0:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
   201c4:	d6999014 	ori	gp,gp,26176
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
   201cc:	10b99f14 	ori	r2,r2,59004

    movhi r3, %hi(__bss_end)
   201d0:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   201d4:	18fa6114 	ori	r3,r3,59780

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	002a9880 	call	2a988 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	002ab2c0 	call	2ab2c <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO_1>:
#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   201f4:	defffd04 	addi	sp,sp,-12
   201f8:	df000215 	stw	fp,8(sp)
   201fc:	df000204 	addi	fp,sp,8
   20200:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1)
   20204:	0001883a 	nop
   20208:	d0a01117 	ldw	r2,-32700(gp)
   2020c:	1007883a 	mov	r3,r2
   20210:	00800234 	movhi	r2,8
   20214:	10a40004 	addi	r2,r2,-28672
   20218:	1885883a 	add	r2,r3,r2
   2021c:	10800037 	ldwio	r2,0(r2)
   20220:	10800060 	cmpeqi	r2,r2,1
   20224:	103ff81e 	bne	r2,zero,20208 <WRITE_FIFO_1+0x14>
		{}

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,(int)*buffer);
   20228:	d0a00f17 	ldw	r2,-32708(gp)
   2022c:	1007883a 	mov	r3,r2
   20230:	00800234 	movhi	r2,8
   20234:	10a40004 	addi	r2,r2,-28672
   20238:	1885883a 	add	r2,r3,r2
   2023c:	e0ffff17 	ldw	r3,-4(fp)
   20240:	18c00017 	ldw	r3,0(r3)
   20244:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
   20248:	d0a00f17 	ldw	r2,-32708(gp)
   2024c:	10800804 	addi	r2,r2,32
   20250:	d0a00f15 	stw	r2,-32708(gp)

	if(writep == STARTP + (CAPACITY * UNIT_SIZE)){
   20254:	d0a00f17 	ldw	r2,-32708(gp)
   20258:	10811818 	cmpnei	r2,r2,1120
   2025c:	1000021e 	bne	r2,zero,20268 <WRITE_FIFO_1+0x74>
		writep=STARTP;
   20260:	00801804 	movi	r2,96
   20264:	d0a00f15 	stw	r2,-32708(gp)
	}

	// Update "count" in shared mem
	int count = IORD_32DIRECT(MEM_BASE,countp);
   20268:	d0a01317 	ldw	r2,-32692(gp)
   2026c:	1007883a 	mov	r3,r2
   20270:	00800234 	movhi	r2,8
   20274:	10a40004 	addi	r2,r2,-28672
   20278:	1885883a 	add	r2,r3,r2
   2027c:	10800037 	ldwio	r2,0(r2)
   20280:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE, countp, count+1);
   20284:	d0a01317 	ldw	r2,-32692(gp)
   20288:	1007883a 	mov	r3,r2
   2028c:	00800234 	movhi	r2,8
   20290:	10a40004 	addi	r2,r2,-28672
   20294:	1885883a 	add	r2,r3,r2
   20298:	e0fffe17 	ldw	r3,-8(fp)
   2029c:	18c00044 	addi	r3,r3,1
   202a0:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   202a4:	d0a01317 	ldw	r2,-32692(gp)
   202a8:	1007883a 	mov	r3,r2
   202ac:	00800234 	movhi	r2,8
   202b0:	10a40004 	addi	r2,r2,-28672
   202b4:	1885883a 	add	r2,r3,r2
   202b8:	10800037 	ldwio	r2,0(r2)
   202bc:	10800818 	cmpnei	r2,r2,32
   202c0:	1000081e 	bne	r2,zero,202e4 <WRITE_FIFO_1+0xf0>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   202c4:	d0a01117 	ldw	r2,-32700(gp)
   202c8:	1007883a 	mov	r3,r2
   202cc:	00800234 	movhi	r2,8
   202d0:	10a40004 	addi	r2,r2,-28672
   202d4:	1885883a 	add	r2,r3,r2
   202d8:	00c00044 	movi	r3,1
   202dc:	10c00035 	stwio	r3,0(r2)
   202e0:	00000706 	br	20300 <WRITE_FIFO_1+0x10c>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   202e4:	d0a01117 	ldw	r2,-32700(gp)
   202e8:	1007883a 	mov	r3,r2
   202ec:	00800234 	movhi	r2,8
   202f0:	10a40004 	addi	r2,r2,-28672
   202f4:	1885883a 	add	r2,r3,r2
   202f8:	0007883a 	mov	r3,zero
   202fc:	10c00035 	stwio	r3,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   20300:	d0a01317 	ldw	r2,-32692(gp)
   20304:	1007883a 	mov	r3,r2
   20308:	00800234 	movhi	r2,8
   2030c:	10a40004 	addi	r2,r2,-28672
   20310:	1885883a 	add	r2,r3,r2
   20314:	10800037 	ldwio	r2,0(r2)
   20318:	1000081e 	bne	r2,zero,2033c <WRITE_FIFO_1+0x148>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   2031c:	d0a01217 	ldw	r2,-32696(gp)
   20320:	1007883a 	mov	r3,r2
   20324:	00800234 	movhi	r2,8
   20328:	10a40004 	addi	r2,r2,-28672
   2032c:	1885883a 	add	r2,r3,r2
   20330:	00c00044 	movi	r3,1
   20334:	10c00035 	stwio	r3,0(r2)
   20338:	00000706 	br	20358 <WRITE_FIFO_1+0x164>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   2033c:	d0a01217 	ldw	r2,-32696(gp)
   20340:	1007883a 	mov	r3,r2
   20344:	00800234 	movhi	r2,8
   20348:	10a40004 	addi	r2,r2,-28672
   2034c:	1885883a 	add	r2,r3,r2
   20350:	0007883a 	mov	r3,zero
   20354:	10c00035 	stwio	r3,0(r2)
	}
}
   20358:	e037883a 	mov	sp,fp
   2035c:	df000017 	ldw	fp,0(sp)
   20360:	dec00104 	addi	sp,sp,4
   20364:	f800283a 	ret

00020368 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   20368:	defffd04 	addi	sp,sp,-12
   2036c:	df000215 	stw	fp,8(sp)
   20370:	df000204 	addi	fp,sp,8
   20374:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1)
   20378:	0001883a 	nop
   2037c:	d0a01217 	ldw	r2,-32696(gp)
   20380:	1007883a 	mov	r3,r2
   20384:	00800234 	movhi	r2,8
   20388:	10a40004 	addi	r2,r2,-28672
   2038c:	1885883a 	add	r2,r3,r2
   20390:	10800037 	ldwio	r2,0(r2)
   20394:	10800060 	cmpeqi	r2,r2,1
   20398:	103ff81e 	bne	r2,zero,2037c <READ_FIFO_1+0x14>
		{}

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
   2039c:	d0a01017 	ldw	r2,-32704(gp)
   203a0:	1007883a 	mov	r3,r2
   203a4:	00800234 	movhi	r2,8
   203a8:	10a40004 	addi	r2,r2,-28672
   203ac:	1885883a 	add	r2,r3,r2
   203b0:	10c00037 	ldwio	r3,0(r2)
   203b4:	e0bfff17 	ldw	r2,-4(fp)
   203b8:	10c00015 	stw	r3,0(r2)

	// Update the read pointer
	readp += UNIT_SIZE;
   203bc:	d0a01017 	ldw	r2,-32704(gp)
   203c0:	10800804 	addi	r2,r2,32
   203c4:	d0a01015 	stw	r2,-32704(gp)


	if(readp == STARTP + (CAPACITY * UNIT_SIZE)){
   203c8:	d0a01017 	ldw	r2,-32704(gp)
   203cc:	10811818 	cmpnei	r2,r2,1120
   203d0:	1000021e 	bne	r2,zero,203dc <READ_FIFO_1+0x74>
		readp=STARTP;
   203d4:	00801804 	movi	r2,96
   203d8:	d0a01015 	stw	r2,-32704(gp)
	}

	// Update "count" in shared mem
	int count = IORD_32DIRECT(MEM_BASE,countp);
   203dc:	d0a01317 	ldw	r2,-32692(gp)
   203e0:	1007883a 	mov	r3,r2
   203e4:	00800234 	movhi	r2,8
   203e8:	10a40004 	addi	r2,r2,-28672
   203ec:	1885883a 	add	r2,r3,r2
   203f0:	10800037 	ldwio	r2,0(r2)
   203f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE, countp, count-1);
   203f8:	d0a01317 	ldw	r2,-32692(gp)
   203fc:	1007883a 	mov	r3,r2
   20400:	00800234 	movhi	r2,8
   20404:	10a40004 	addi	r2,r2,-28672
   20408:	1885883a 	add	r2,r3,r2
   2040c:	e0fffe17 	ldw	r3,-8(fp)
   20410:	18ffffc4 	addi	r3,r3,-1
   20414:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   20418:	d0a01317 	ldw	r2,-32692(gp)
   2041c:	1007883a 	mov	r3,r2
   20420:	00800234 	movhi	r2,8
   20424:	10a40004 	addi	r2,r2,-28672
   20428:	1885883a 	add	r2,r3,r2
   2042c:	10800037 	ldwio	r2,0(r2)
   20430:	10800818 	cmpnei	r2,r2,32
   20434:	1000081e 	bne	r2,zero,20458 <READ_FIFO_1+0xf0>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   20438:	d0a01117 	ldw	r2,-32700(gp)
   2043c:	1007883a 	mov	r3,r2
   20440:	00800234 	movhi	r2,8
   20444:	10a40004 	addi	r2,r2,-28672
   20448:	1885883a 	add	r2,r3,r2
   2044c:	00c00044 	movi	r3,1
   20450:	10c00035 	stwio	r3,0(r2)
   20454:	00000706 	br	20474 <READ_FIFO_1+0x10c>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   20458:	d0a01117 	ldw	r2,-32700(gp)
   2045c:	1007883a 	mov	r3,r2
   20460:	00800234 	movhi	r2,8
   20464:	10a40004 	addi	r2,r2,-28672
   20468:	1885883a 	add	r2,r3,r2
   2046c:	0007883a 	mov	r3,zero
   20470:	10c00035 	stwio	r3,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   20474:	d0a01317 	ldw	r2,-32692(gp)
   20478:	1007883a 	mov	r3,r2
   2047c:	00800234 	movhi	r2,8
   20480:	10a40004 	addi	r2,r2,-28672
   20484:	1885883a 	add	r2,r3,r2
   20488:	10800037 	ldwio	r2,0(r2)
   2048c:	1000081e 	bne	r2,zero,204b0 <READ_FIFO_1+0x148>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   20490:	d0a01217 	ldw	r2,-32696(gp)
   20494:	1007883a 	mov	r3,r2
   20498:	00800234 	movhi	r2,8
   2049c:	10a40004 	addi	r2,r2,-28672
   204a0:	1885883a 	add	r2,r3,r2
   204a4:	00c00044 	movi	r3,1
   204a8:	10c00035 	stwio	r3,0(r2)
   204ac:	00000706 	br	204cc <READ_FIFO_1+0x164>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   204b0:	d0a01217 	ldw	r2,-32696(gp)
   204b4:	1007883a 	mov	r3,r2
   204b8:	00800234 	movhi	r2,8
   204bc:	10a40004 	addi	r2,r2,-28672
   204c0:	1885883a 	add	r2,r3,r2
   204c4:	0007883a 	mov	r3,zero
   204c8:	10c00035 	stwio	r3,0(r2)
	}
}
   204cc:	e037883a 	mov	sp,fp
   204d0:	df000017 	ldw	fp,0(sp)
   204d4:	dec00104 	addi	sp,sp,4
   204d8:	f800283a 	ret

000204dc <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   204dc:	deffff04 	addi	sp,sp,-4
   204e0:	df000015 	stw	fp,0(sp)
   204e4:	d839883a 	mov	fp,sp
	writep	= STARTP; // Write pointer. Points to the next slot to be written in. Used and modified only by the writing CPU
   204e8:	00801804 	movi	r2,96
   204ec:	d0a00f15 	stw	r2,-32708(gp)
	readp	= STARTP; // Read pointer. Points to the next slot to be read. Used and modified only by the reading CPU
   204f0:	00801804 	movi	r2,96
   204f4:	d0a01015 	stw	r2,-32704(gp)
	fullp	= 0; // Points to "full?" flag in shared memory
   204f8:	d0201115 	stw	zero,-32700(gp)
	emptyp	= UNIT_SIZE*1; // points to "empty?" flag in shared memory
   204fc:	00800804 	movi	r2,32
   20500:	d0a01215 	stw	r2,-32696(gp)
	countp	= UNIT_SIZE*2; // Points to "count" in shared memory
   20504:	00801004 	movi	r2,64
   20508:	d0a01315 	stw	r2,-32692(gp)
	// Assigning values for the flags.
//	IOWR_32DIRECT(MEM_BASE, fullp, 0);
//	IOWR_32DIRECT(MEM_BASE, emptyp, 1); // The fifo is empty at the start
//	IOWR_32DIRECT(MEM_BASE, countp, 0); // The fifo is empty at the start

}
   2050c:	e037883a 	mov	sp,fp
   20510:	df000017 	ldw	fp,0(sp)
   20514:	dec00104 	addi	sp,sp,4
   20518:	f800283a 	ret

0002051c <main>:

//void delay(int n);
int consumer();

int main()
{
   2051c:	defffe04 	addi	sp,sp,-8
   20520:	dfc00115 	stw	ra,4(sp)
   20524:	df000015 	stw	fp,0(sp)
   20528:	d839883a 	mov	fp,sp
  if(alt_timestamp_start() < 0) // starts the timestamp timer
   2052c:	002bbe40 	call	2bbe4 <alt_timestamp_start>
   20530:	1000050e 	bge	r2,zero,20548 <main+0x2c>
  {
	printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
   20534:	010001f4 	movhi	r4,7
   20538:	21320004 	addi	r4,r4,-14336
   2053c:	00212840 	call	21284 <puts>
	exit(1);
   20540:	01000044 	movi	r4,1
   20544:	00211600 	call	21160 <exit>
  }

	consumer();
   20548:	00205500 	call	20550 <consumer>

	while(1) { }
   2054c:	003fff06 	br	2054c <main+0x30>

00020550 <consumer>:

	return 0;
}

int consumer()
{
   20550:	defff704 	addi	sp,sp,-36
   20554:	dfc00815 	stw	ra,32(sp)
   20558:	df000715 	stw	fp,28(sp)
   2055c:	dc400615 	stw	r17,24(sp)
   20560:	dc000515 	stw	r16,20(sp)
   20564:	df000504 	addi	fp,sp,20

	alt_u32 start_time, stop_time;

	printf("Consumer starting..\n");
   20568:	010001f4 	movhi	r4,7
   2056c:	21321904 	addi	r4,r4,-14236
   20570:	00212840 	call	21284 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   20574:	00204dc0 	call	204dc <FIFO_1_INIT>

	int j = 0;
   20578:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   2057c:	00800144 	movi	r2,5
   20580:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   20584:	e03ffd15 	stw	zero,-12(fp)


	while(count <= 5000)
   20588:	00001d06 	br	20600 <consumer+0xb0>
	{
		if (count == 100) {
   2058c:	e0bffd17 	ldw	r2,-12(fp)
   20590:	10801918 	cmpnei	r2,r2,100
   20594:	1000021e 	bne	r2,zero,205a0 <consumer+0x50>
			start_time = alt_timestamp();
   20598:	002bc6c0 	call	2bc6c <alt_timestamp>
   2059c:	e0bffb15 	stw	r2,-20(fp)
		}

		count++;
   205a0:	e0bffd17 	ldw	r2,-12(fp)
   205a4:	10800044 	addi	r2,r2,1
   205a8:	e0bffd15 	stw	r2,-12(fp)
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   205ac:	e0bfff04 	addi	r2,fp,-4
   205b0:	1009883a 	mov	r4,r2
   205b4:	00203680 	call	20368 <READ_FIFO_1>
		if(j==k)
   205b8:	e0ffff17 	ldw	r3,-4(fp)
   205bc:	e0bffc17 	ldw	r2,-16(fp)
   205c0:	1880061e 	bne	r3,r2,205dc <consumer+0x8c>
			printf("Consumer succefully received [%i]\n",j);
   205c4:	e0bfff17 	ldw	r2,-4(fp)
   205c8:	010001f4 	movhi	r4,7
   205cc:	21321e04 	addi	r4,r4,-14216
   205d0:	100b883a 	mov	r5,r2
   205d4:	00211c40 	call	211c4 <printf>
   205d8:	00000606 	br	205f4 <consumer+0xa4>
		else
			printf("Expected [%d] but got [%d]\n",k,j);
   205dc:	e0bfff17 	ldw	r2,-4(fp)
   205e0:	010001f4 	movhi	r4,7
   205e4:	21322704 	addi	r4,r4,-14180
   205e8:	e17ffc17 	ldw	r5,-16(fp)
   205ec:	100d883a 	mov	r6,r2
   205f0:	00211c40 	call	211c4 <printf>
		k+=11;
   205f4:	e0bffc17 	ldw	r2,-16(fp)
   205f8:	108002c4 	addi	r2,r2,11
   205fc:	e0bffc15 	stw	r2,-16(fp)
	int j = 0;
	int k = 5;
	int count = 0;


	while(count <= 5000)
   20600:	e0bffd17 	ldw	r2,-12(fp)
   20604:	1084e250 	cmplti	r2,r2,5001
   20608:	103fe01e 	bne	r2,zero,2058c <consumer+0x3c>
			printf("Consumer succefully received [%i]\n",j);
		else
			printf("Expected [%d] but got [%d]\n",k,j);
		k+=11;
	}
	stop_time = alt_timestamp();
   2060c:	002bc6c0 	call	2bc6c <alt_timestamp>
   20610:	e0bffe15 	stw	r2,-8(fp)

	printf("Consumer finished..\n");
   20614:	010001f4 	movhi	r4,7
   20618:	21322e04 	addi	r4,r4,-14152
   2061c:	00212840 	call	21284 <puts>

	printf("Consumed %d data in %.2f ms.\n", count-1, 1000*((float)(stop_time-start_time)) /((float)alt_timestamp_freq()));
   20620:	e0bffd17 	ldw	r2,-12(fp)
   20624:	143fffc4 	addi	r16,r2,-1
   20628:	e0fffe17 	ldw	r3,-8(fp)
   2062c:	e0bffb17 	ldw	r2,-20(fp)
   20630:	1885c83a 	sub	r2,r3,r2
   20634:	1009883a 	mov	r4,r2
   20638:	00209d00 	call	209d0 <__floatunsisf>
   2063c:	1007883a 	mov	r3,r2
   20640:	1809883a 	mov	r4,r3
   20644:	01511eb4 	movhi	r5,17530
   20648:	00206c00 	call	206c0 <__mulsf3>
   2064c:	1007883a 	mov	r3,r2
   20650:	1823883a 	mov	r17,r3
   20654:	002bcfc0 	call	2bcfc <alt_timestamp_freq>
   20658:	1009883a 	mov	r4,r2
   2065c:	00209d00 	call	209d0 <__floatunsisf>
   20660:	1007883a 	mov	r3,r2
   20664:	8809883a 	mov	r4,r17
   20668:	180b883a 	mov	r5,r3
   2066c:	00208500 	call	20850 <__divsf3>
   20670:	1007883a 	mov	r3,r2
   20674:	1805883a 	mov	r2,r3
   20678:	1009883a 	mov	r4,r2
   2067c:	002098c0 	call	2098c <__extendsfdf2>
   20680:	100f883a 	mov	r7,r2
   20684:	1811883a 	mov	r8,r3
   20688:	010001f4 	movhi	r4,7
   2068c:	21323304 	addi	r4,r4,-14132
   20690:	800b883a 	mov	r5,r16
   20694:	380d883a 	mov	r6,r7
   20698:	400f883a 	mov	r7,r8
   2069c:	00211c40 	call	211c4 <printf>
	return 0;
   206a0:	0005883a 	mov	r2,zero
}
   206a4:	e037883a 	mov	sp,fp
   206a8:	dfc00317 	ldw	ra,12(sp)
   206ac:	df000217 	ldw	fp,8(sp)
   206b0:	dc400117 	ldw	r17,4(sp)
   206b4:	dc000017 	ldw	r16,0(sp)
   206b8:	dec00404 	addi	sp,sp,16
   206bc:	f800283a 	ret

000206c0 <__mulsf3>:
   206c0:	defff104 	addi	sp,sp,-60
   206c4:	d9000d15 	stw	r4,52(sp)
   206c8:	d9400c15 	stw	r5,48(sp)
   206cc:	d9000d04 	addi	r4,sp,52
   206d0:	d9400804 	addi	r5,sp,32
   206d4:	dfc00e15 	stw	ra,56(sp)
   206d8:	0020dc40 	call	20dc4 <__unpack_f>
   206dc:	d9000c04 	addi	r4,sp,48
   206e0:	d9400404 	addi	r5,sp,16
   206e4:	0020dc40 	call	20dc4 <__unpack_f>
   206e8:	d8c00817 	ldw	r3,32(sp)
   206ec:	00800044 	movi	r2,1
   206f0:	10c00936 	bltu	r2,r3,20718 <__mulsf3+0x58>
   206f4:	d8c00917 	ldw	r3,36(sp)
   206f8:	d8800517 	ldw	r2,20(sp)
   206fc:	d9000804 	addi	r4,sp,32
   20700:	1884c03a 	cmpne	r2,r3,r2
   20704:	d8800915 	stw	r2,36(sp)
   20708:	0020c980 	call	20c98 <__pack_f>
   2070c:	dfc00e17 	ldw	ra,56(sp)
   20710:	dec00f04 	addi	sp,sp,60
   20714:	f800283a 	ret
   20718:	d9000417 	ldw	r4,16(sp)
   2071c:	11000936 	bltu	r2,r4,20744 <__mulsf3+0x84>
   20720:	d8800517 	ldw	r2,20(sp)
   20724:	d8c00917 	ldw	r3,36(sp)
   20728:	d9000404 	addi	r4,sp,16
   2072c:	1884c03a 	cmpne	r2,r3,r2
   20730:	d8800515 	stw	r2,20(sp)
   20734:	0020c980 	call	20c98 <__pack_f>
   20738:	dfc00e17 	ldw	ra,56(sp)
   2073c:	dec00f04 	addi	sp,sp,60
   20740:	f800283a 	ret
   20744:	00800104 	movi	r2,4
   20748:	1880051e 	bne	r3,r2,20760 <__mulsf3+0xa0>
   2074c:	00800084 	movi	r2,2
   20750:	20bfe81e 	bne	r4,r2,206f4 <__mulsf3+0x34>
   20754:	010001f4 	movhi	r4,7
   20758:	21323b04 	addi	r4,r4,-14100
   2075c:	003fea06 	br	20708 <__mulsf3+0x48>
   20760:	2080031e 	bne	r4,r2,20770 <__mulsf3+0xb0>
   20764:	00800084 	movi	r2,2
   20768:	18bffa26 	beq	r3,r2,20754 <__mulsf3+0x94>
   2076c:	003fec06 	br	20720 <__mulsf3+0x60>
   20770:	00800084 	movi	r2,2
   20774:	18bfdf26 	beq	r3,r2,206f4 <__mulsf3+0x34>
   20778:	20bfe926 	beq	r4,r2,20720 <__mulsf3+0x60>
   2077c:	d9000717 	ldw	r4,28(sp)
   20780:	d9800b17 	ldw	r6,44(sp)
   20784:	000b883a 	mov	r5,zero
   20788:	000f883a 	mov	r7,zero
   2078c:	0020adc0 	call	20adc <__muldi3>
   20790:	d9000617 	ldw	r4,24(sp)
   20794:	d9400a17 	ldw	r5,40(sp)
   20798:	d9c00917 	ldw	r7,36(sp)
   2079c:	290b883a 	add	r5,r5,r4
   207a0:	d9000517 	ldw	r4,20(sp)
   207a4:	29800084 	addi	r6,r5,2
   207a8:	d9800215 	stw	r6,8(sp)
   207ac:	3908c03a 	cmpne	r4,r7,r4
   207b0:	d9000115 	stw	r4,4(sp)
   207b4:	1809883a 	mov	r4,r3
   207b8:	1800070e 	bge	r3,zero,207d8 <__mulsf3+0x118>
   207bc:	1900004c 	andi	r4,r3,1
   207c0:	294000c4 	addi	r5,r5,3
   207c4:	20000226 	beq	r4,zero,207d0 <__mulsf3+0x110>
   207c8:	1004d07a 	srli	r2,r2,1
   207cc:	10a00034 	orhi	r2,r2,32768
   207d0:	1808d07a 	srli	r4,r3,1
   207d4:	d9400215 	stw	r5,8(sp)
   207d8:	01900034 	movhi	r6,16384
   207dc:	31bfffc4 	addi	r6,r6,-1
   207e0:	31000c36 	bltu	r6,r4,20814 <__mulsf3+0x154>
   207e4:	d8c00217 	ldw	r3,8(sp)
   207e8:	18ffffc4 	addi	r3,r3,-1
   207ec:	00000306 	br	207fc <__mulsf3+0x13c>
   207f0:	1085883a 	add	r2,r2,r2
   207f4:	18ffffc4 	addi	r3,r3,-1
   207f8:	31000536 	bltu	r6,r4,20810 <__mulsf3+0x150>
   207fc:	2109883a 	add	r4,r4,r4
   20800:	180b883a 	mov	r5,r3
   20804:	103ffa0e 	bge	r2,zero,207f0 <__mulsf3+0x130>
   20808:	21000054 	ori	r4,r4,1
   2080c:	003ff806 	br	207f0 <__mulsf3+0x130>
   20810:	d9400215 	stw	r5,8(sp)
   20814:	21401fcc 	andi	r5,r4,127
   20818:	00c01004 	movi	r3,64
   2081c:	28c00526 	beq	r5,r3,20834 <__mulsf3+0x174>
   20820:	008000c4 	movi	r2,3
   20824:	d9000315 	stw	r4,12(sp)
   20828:	d8800015 	stw	r2,0(sp)
   2082c:	d809883a 	mov	r4,sp
   20830:	003fb506 	br	20708 <__mulsf3+0x48>
   20834:	20c0200c 	andi	r3,r4,128
   20838:	183ff91e 	bne	r3,zero,20820 <__mulsf3+0x160>
   2083c:	103ff826 	beq	r2,zero,20820 <__mulsf3+0x160>
   20840:	21001004 	addi	r4,r4,64
   20844:	00bfe004 	movi	r2,-128
   20848:	2088703a 	and	r4,r4,r2
   2084c:	003ff406 	br	20820 <__mulsf3+0x160>

00020850 <__divsf3>:
   20850:	defff504 	addi	sp,sp,-44
   20854:	d9000915 	stw	r4,36(sp)
   20858:	d9400815 	stw	r5,32(sp)
   2085c:	d9000904 	addi	r4,sp,36
   20860:	d9400404 	addi	r5,sp,16
   20864:	dfc00a15 	stw	ra,40(sp)
   20868:	0020dc40 	call	20dc4 <__unpack_f>
   2086c:	d9000804 	addi	r4,sp,32
   20870:	d80b883a 	mov	r5,sp
   20874:	0020dc40 	call	20dc4 <__unpack_f>
   20878:	d8c00417 	ldw	r3,16(sp)
   2087c:	00800044 	movi	r2,1
   20880:	10c00536 	bltu	r2,r3,20898 <__divsf3+0x48>
   20884:	d9000404 	addi	r4,sp,16
   20888:	0020c980 	call	20c98 <__pack_f>
   2088c:	dfc00a17 	ldw	ra,40(sp)
   20890:	dec00b04 	addi	sp,sp,44
   20894:	f800283a 	ret
   20898:	d9000017 	ldw	r4,0(sp)
   2089c:	11000536 	bltu	r2,r4,208b4 <__divsf3+0x64>
   208a0:	d809883a 	mov	r4,sp
   208a4:	0020c980 	call	20c98 <__pack_f>
   208a8:	dfc00a17 	ldw	ra,40(sp)
   208ac:	dec00b04 	addi	sp,sp,44
   208b0:	f800283a 	ret
   208b4:	d9800517 	ldw	r6,20(sp)
   208b8:	d9400117 	ldw	r5,4(sp)
   208bc:	00800104 	movi	r2,4
   208c0:	314af03a 	xor	r5,r6,r5
   208c4:	d9400515 	stw	r5,20(sp)
   208c8:	18800226 	beq	r3,r2,208d4 <__divsf3+0x84>
   208cc:	01400084 	movi	r5,2
   208d0:	1940041e 	bne	r3,r5,208e4 <__divsf3+0x94>
   208d4:	193feb1e 	bne	r3,r4,20884 <__divsf3+0x34>
   208d8:	010001f4 	movhi	r4,7
   208dc:	21323b04 	addi	r4,r4,-14100
   208e0:	003fe906 	br	20888 <__divsf3+0x38>
   208e4:	20802226 	beq	r4,r2,20970 <__divsf3+0x120>
   208e8:	21402526 	beq	r4,r5,20980 <__divsf3+0x130>
   208ec:	d9000617 	ldw	r4,24(sp)
   208f0:	d8c00217 	ldw	r3,8(sp)
   208f4:	d8800717 	ldw	r2,28(sp)
   208f8:	d9400317 	ldw	r5,12(sp)
   208fc:	20c7c83a 	sub	r3,r4,r3
   20900:	d8c00615 	stw	r3,24(sp)
   20904:	1140032e 	bgeu	r2,r5,20914 <__divsf3+0xc4>
   20908:	18ffffc4 	addi	r3,r3,-1
   2090c:	1085883a 	add	r2,r2,r2
   20910:	d8c00615 	stw	r3,24(sp)
   20914:	00c007c4 	movi	r3,31
   20918:	01100034 	movhi	r4,16384
   2091c:	000d883a 	mov	r6,zero
   20920:	18ffffc4 	addi	r3,r3,-1
   20924:	11400236 	bltu	r2,r5,20930 <__divsf3+0xe0>
   20928:	310cb03a 	or	r6,r6,r4
   2092c:	1145c83a 	sub	r2,r2,r5
   20930:	2008d07a 	srli	r4,r4,1
   20934:	1085883a 	add	r2,r2,r2
   20938:	183ff91e 	bne	r3,zero,20920 <__divsf3+0xd0>
   2093c:	31001fcc 	andi	r4,r6,127
   20940:	00c01004 	movi	r3,64
   20944:	20c00226 	beq	r4,r3,20950 <__divsf3+0x100>
   20948:	d9800715 	stw	r6,28(sp)
   2094c:	003fcd06 	br	20884 <__divsf3+0x34>
   20950:	30c0200c 	andi	r3,r6,128
   20954:	183ffc1e 	bne	r3,zero,20948 <__divsf3+0xf8>
   20958:	103ffb26 	beq	r2,zero,20948 <__divsf3+0xf8>
   2095c:	31801004 	addi	r6,r6,64
   20960:	00bfe004 	movi	r2,-128
   20964:	308c703a 	and	r6,r6,r2
   20968:	d9800715 	stw	r6,28(sp)
   2096c:	003fc506 	br	20884 <__divsf3+0x34>
   20970:	d8000715 	stw	zero,28(sp)
   20974:	d8000615 	stw	zero,24(sp)
   20978:	d9000404 	addi	r4,sp,16
   2097c:	003fc206 	br	20888 <__divsf3+0x38>
   20980:	d8800415 	stw	r2,16(sp)
   20984:	d9000404 	addi	r4,sp,16
   20988:	003fbf06 	br	20888 <__divsf3+0x38>

0002098c <__extendsfdf2>:
   2098c:	defff904 	addi	sp,sp,-28
   20990:	d9000515 	stw	r4,20(sp)
   20994:	d9400104 	addi	r5,sp,4
   20998:	d9000504 	addi	r4,sp,20
   2099c:	dfc00615 	stw	ra,24(sp)
   209a0:	0020dc40 	call	20dc4 <__unpack_f>
   209a4:	d9c00417 	ldw	r7,16(sp)
   209a8:	d9000117 	ldw	r4,4(sp)
   209ac:	d9400217 	ldw	r5,8(sp)
   209b0:	3804d0ba 	srli	r2,r7,2
   209b4:	d9800317 	ldw	r6,12(sp)
   209b8:	380e97ba 	slli	r7,r7,30
   209bc:	d8800015 	stw	r2,0(sp)
   209c0:	0020aa40 	call	20aa4 <__make_dp>
   209c4:	dfc00617 	ldw	ra,24(sp)
   209c8:	dec00704 	addi	sp,sp,28
   209cc:	f800283a 	ret

000209d0 <__floatunsisf>:
   209d0:	defffa04 	addi	sp,sp,-24
   209d4:	dc000415 	stw	r16,16(sp)
   209d8:	dfc00515 	stw	ra,20(sp)
   209dc:	d8000115 	stw	zero,4(sp)
   209e0:	2021883a 	mov	r16,r4
   209e4:	20001326 	beq	r4,zero,20a34 <__floatunsisf+0x64>
   209e8:	008000c4 	movi	r2,3
   209ec:	d8800015 	stw	r2,0(sp)
   209f0:	00800784 	movi	r2,30
   209f4:	d8800215 	stw	r2,8(sp)
   209f8:	0020bec0 	call	20bec <__clzsi2>
   209fc:	10ffffc4 	addi	r3,r2,-1
   20a00:	18001416 	blt	r3,zero,20a54 <__floatunsisf+0x84>
   20a04:	18002526 	beq	r3,zero,20a9c <__floatunsisf+0xcc>
   20a08:	80e0983a 	sll	r16,r16,r3
   20a0c:	00c007c4 	movi	r3,31
   20a10:	1885c83a 	sub	r2,r3,r2
   20a14:	dc000315 	stw	r16,12(sp)
   20a18:	d8800215 	stw	r2,8(sp)
   20a1c:	d809883a 	mov	r4,sp
   20a20:	0020c980 	call	20c98 <__pack_f>
   20a24:	dfc00517 	ldw	ra,20(sp)
   20a28:	dc000417 	ldw	r16,16(sp)
   20a2c:	dec00604 	addi	sp,sp,24
   20a30:	f800283a 	ret
   20a34:	00800084 	movi	r2,2
   20a38:	d809883a 	mov	r4,sp
   20a3c:	d8800015 	stw	r2,0(sp)
   20a40:	0020c980 	call	20c98 <__pack_f>
   20a44:	dfc00517 	ldw	ra,20(sp)
   20a48:	dc000417 	ldw	r16,16(sp)
   20a4c:	dec00604 	addi	sp,sp,24
   20a50:	f800283a 	ret
   20a54:	00c7c83a 	sub	r3,zero,r3
   20a58:	01000044 	movi	r4,1
   20a5c:	20c8983a 	sll	r4,r4,r3
   20a60:	80c6d83a 	srl	r3,r16,r3
   20a64:	213fffc4 	addi	r4,r4,-1
   20a68:	2420703a 	and	r16,r4,r16
   20a6c:	8020c03a 	cmpne	r16,r16,zero
   20a70:	010007c4 	movi	r4,31
   20a74:	80c6b03a 	or	r3,r16,r3
   20a78:	2085c83a 	sub	r2,r4,r2
   20a7c:	d809883a 	mov	r4,sp
   20a80:	d8c00315 	stw	r3,12(sp)
   20a84:	d8800215 	stw	r2,8(sp)
   20a88:	0020c980 	call	20c98 <__pack_f>
   20a8c:	dfc00517 	ldw	ra,20(sp)
   20a90:	dc000417 	ldw	r16,16(sp)
   20a94:	dec00604 	addi	sp,sp,24
   20a98:	f800283a 	ret
   20a9c:	dc000315 	stw	r16,12(sp)
   20aa0:	003fde06 	br	20a1c <__floatunsisf+0x4c>

00020aa4 <__make_dp>:
   20aa4:	defff904 	addi	sp,sp,-28
   20aa8:	d8800717 	ldw	r2,28(sp)
   20aac:	d9000015 	stw	r4,0(sp)
   20ab0:	d809883a 	mov	r4,sp
   20ab4:	dfc00515 	stw	ra,20(sp)
   20ab8:	d9c00615 	stw	r7,24(sp)
   20abc:	d9400115 	stw	r5,4(sp)
   20ac0:	d9800215 	stw	r6,8(sp)
   20ac4:	d9c00315 	stw	r7,12(sp)
   20ac8:	d8800415 	stw	r2,16(sp)
   20acc:	0020e8c0 	call	20e8c <__pack_d>
   20ad0:	dfc00517 	ldw	ra,20(sp)
   20ad4:	dec00704 	addi	sp,sp,28
   20ad8:	f800283a 	ret

00020adc <__muldi3>:
   20adc:	defff604 	addi	sp,sp,-40
   20ae0:	dd400515 	stw	r21,20(sp)
   20ae4:	dd000415 	stw	r20,16(sp)
   20ae8:	257fffcc 	andi	r21,r4,65535
   20aec:	353fffcc 	andi	r20,r6,65535
   20af0:	dcc00315 	stw	r19,12(sp)
   20af4:	3026d43a 	srli	r19,r6,16
   20af8:	dd800615 	stw	r22,24(sp)
   20afc:	dc800215 	stw	r18,8(sp)
   20b00:	dc400115 	stw	r17,4(sp)
   20b04:	2024d43a 	srli	r18,r4,16
   20b08:	2023883a 	mov	r17,r4
   20b0c:	282d883a 	mov	r22,r5
   20b10:	a009883a 	mov	r4,r20
   20b14:	a80b883a 	mov	r5,r21
   20b18:	dfc00915 	stw	ra,36(sp)
   20b1c:	df000815 	stw	fp,32(sp)
   20b20:	ddc00715 	stw	r23,28(sp)
   20b24:	3839883a 	mov	fp,r7
   20b28:	dc000015 	stw	r16,0(sp)
   20b2c:	3021883a 	mov	r16,r6
   20b30:	00210b00 	call	210b0 <__mulsi3>
   20b34:	a80b883a 	mov	r5,r21
   20b38:	9809883a 	mov	r4,r19
   20b3c:	102f883a 	mov	r23,r2
   20b40:	00210b00 	call	210b0 <__mulsi3>
   20b44:	a009883a 	mov	r4,r20
   20b48:	900b883a 	mov	r5,r18
   20b4c:	102b883a 	mov	r21,r2
   20b50:	00210b00 	call	210b0 <__mulsi3>
   20b54:	9809883a 	mov	r4,r19
   20b58:	900b883a 	mov	r5,r18
   20b5c:	1029883a 	mov	r20,r2
   20b60:	00210b00 	call	210b0 <__mulsi3>
   20b64:	1007883a 	mov	r3,r2
   20b68:	b804d43a 	srli	r2,r23,16
   20b6c:	a549883a 	add	r4,r20,r21
   20b70:	2089883a 	add	r4,r4,r2
   20b74:	2500022e 	bgeu	r4,r20,20b80 <__muldi3+0xa4>
   20b78:	00800074 	movhi	r2,1
   20b7c:	1887883a 	add	r3,r3,r2
   20b80:	200cd43a 	srli	r6,r4,16
   20b84:	2004943a 	slli	r2,r4,16
   20b88:	e00b883a 	mov	r5,fp
   20b8c:	8809883a 	mov	r4,r17
   20b90:	bdffffcc 	andi	r23,r23,65535
   20b94:	19a3883a 	add	r17,r3,r6
   20b98:	15ef883a 	add	r23,r2,r23
   20b9c:	00210b00 	call	210b0 <__mulsi3>
   20ba0:	8009883a 	mov	r4,r16
   20ba4:	b00b883a 	mov	r5,r22
   20ba8:	1025883a 	mov	r18,r2
   20bac:	00210b00 	call	210b0 <__mulsi3>
   20bb0:	9085883a 	add	r2,r18,r2
   20bb4:	1447883a 	add	r3,r2,r17
   20bb8:	b805883a 	mov	r2,r23
   20bbc:	dfc00917 	ldw	ra,36(sp)
   20bc0:	df000817 	ldw	fp,32(sp)
   20bc4:	ddc00717 	ldw	r23,28(sp)
   20bc8:	dd800617 	ldw	r22,24(sp)
   20bcc:	dd400517 	ldw	r21,20(sp)
   20bd0:	dd000417 	ldw	r20,16(sp)
   20bd4:	dcc00317 	ldw	r19,12(sp)
   20bd8:	dc800217 	ldw	r18,8(sp)
   20bdc:	dc400117 	ldw	r17,4(sp)
   20be0:	dc000017 	ldw	r16,0(sp)
   20be4:	dec00a04 	addi	sp,sp,40
   20be8:	f800283a 	ret

00020bec <__clzsi2>:
   20bec:	00bfffd4 	movui	r2,65535
   20bf0:	11000b36 	bltu	r2,r4,20c20 <__clzsi2+0x34>
   20bf4:	00803fc4 	movi	r2,255
   20bf8:	11001e2e 	bgeu	r2,r4,20c74 <__clzsi2+0x88>
   20bfc:	00c00204 	movi	r3,8
   20c00:	20c8d83a 	srl	r4,r4,r3
   20c04:	00c001f4 	movhi	r3,7
   20c08:	18f23f04 	addi	r3,r3,-14084
   20c0c:	00800604 	movi	r2,24
   20c10:	1909883a 	add	r4,r3,r4
   20c14:	20c00003 	ldbu	r3,0(r4)
   20c18:	10c5c83a 	sub	r2,r2,r3
   20c1c:	f800283a 	ret
   20c20:	00804034 	movhi	r2,256
   20c24:	10bfffc4 	addi	r2,r2,-1
   20c28:	11000936 	bltu	r2,r4,20c50 <__clzsi2+0x64>
   20c2c:	00800404 	movi	r2,16
   20c30:	1007883a 	mov	r3,r2
   20c34:	20c8d83a 	srl	r4,r4,r3
   20c38:	00c001f4 	movhi	r3,7
   20c3c:	18f23f04 	addi	r3,r3,-14084
   20c40:	1909883a 	add	r4,r3,r4
   20c44:	20c00003 	ldbu	r3,0(r4)
   20c48:	10c5c83a 	sub	r2,r2,r3
   20c4c:	f800283a 	ret
   20c50:	00c00604 	movi	r3,24
   20c54:	20c8d83a 	srl	r4,r4,r3
   20c58:	00c001f4 	movhi	r3,7
   20c5c:	18f23f04 	addi	r3,r3,-14084
   20c60:	00800204 	movi	r2,8
   20c64:	1909883a 	add	r4,r3,r4
   20c68:	20c00003 	ldbu	r3,0(r4)
   20c6c:	10c5c83a 	sub	r2,r2,r3
   20c70:	f800283a 	ret
   20c74:	0007883a 	mov	r3,zero
   20c78:	20c8d83a 	srl	r4,r4,r3
   20c7c:	00c001f4 	movhi	r3,7
   20c80:	18f23f04 	addi	r3,r3,-14084
   20c84:	00800804 	movi	r2,32
   20c88:	1909883a 	add	r4,r3,r4
   20c8c:	20c00003 	ldbu	r3,0(r4)
   20c90:	10c5c83a 	sub	r2,r2,r3
   20c94:	f800283a 	ret

00020c98 <__pack_f>:
   20c98:	21400017 	ldw	r5,0(r4)
   20c9c:	01800044 	movi	r6,1
   20ca0:	20c00317 	ldw	r3,12(r4)
   20ca4:	21c00117 	ldw	r7,4(r4)
   20ca8:	3140282e 	bgeu	r6,r5,20d4c <__pack_f+0xb4>
   20cac:	00800104 	movi	r2,4
   20cb0:	28802326 	beq	r5,r2,20d40 <__pack_f+0xa8>
   20cb4:	00800084 	movi	r2,2
   20cb8:	28800f26 	beq	r5,r2,20cf8 <__pack_f+0x60>
   20cbc:	18000e26 	beq	r3,zero,20cf8 <__pack_f+0x60>
   20cc0:	21000217 	ldw	r4,8(r4)
   20cc4:	00bfe084 	movi	r2,-126
   20cc8:	20802616 	blt	r4,r2,20d64 <__pack_f+0xcc>
   20ccc:	00801fc4 	movi	r2,127
   20cd0:	11001b16 	blt	r2,r4,20d40 <__pack_f+0xa8>
   20cd4:	188a703a 	and	r5,r3,r2
   20cd8:	00801004 	movi	r2,64
   20cdc:	28801126 	beq	r5,r2,20d24 <__pack_f+0x8c>
   20ce0:	18c00fc4 	addi	r3,r3,63
   20ce4:	18001316 	blt	r3,zero,20d34 <__pack_f+0x9c>
   20ce8:	21001fc4 	addi	r4,r4,127
   20cec:	180690ba 	slli	r3,r3,2
   20cf0:	1806d27a 	srli	r3,r3,9
   20cf4:	00000206 	br	20d00 <__pack_f+0x68>
   20cf8:	0009883a 	mov	r4,zero
   20cfc:	0007883a 	mov	r3,zero
   20d00:	21003fcc 	andi	r4,r4,255
   20d04:	200895fa 	slli	r4,r4,23
   20d08:	380a97fa 	slli	r5,r7,31
   20d0c:	00802034 	movhi	r2,128
   20d10:	10bfffc4 	addi	r2,r2,-1
   20d14:	1886703a 	and	r3,r3,r2
   20d18:	1904b03a 	or	r2,r3,r4
   20d1c:	1144b03a 	or	r2,r2,r5
   20d20:	f800283a 	ret
   20d24:	1880200c 	andi	r2,r3,128
   20d28:	103fee26 	beq	r2,zero,20ce4 <__pack_f+0x4c>
   20d2c:	18c01004 	addi	r3,r3,64
   20d30:	183fed0e 	bge	r3,zero,20ce8 <__pack_f+0x50>
   20d34:	1806d07a 	srli	r3,r3,1
   20d38:	21002004 	addi	r4,r4,128
   20d3c:	003feb06 	br	20cec <__pack_f+0x54>
   20d40:	013fffc4 	movi	r4,-1
   20d44:	0007883a 	mov	r3,zero
   20d48:	003fed06 	br	20d00 <__pack_f+0x68>
   20d4c:	18c00434 	orhi	r3,r3,16
   20d50:	00802034 	movhi	r2,128
   20d54:	10bfffc4 	addi	r2,r2,-1
   20d58:	1886703a 	and	r3,r3,r2
   20d5c:	013fffc4 	movi	r4,-1
   20d60:	003fe706 	br	20d00 <__pack_f+0x68>
   20d64:	1105c83a 	sub	r2,r2,r4
   20d68:	01000644 	movi	r4,25
   20d6c:	20801216 	blt	r4,r2,20db8 <__pack_f+0x120>
   20d70:	3088983a 	sll	r4,r6,r2
   20d74:	1884d83a 	srl	r2,r3,r2
   20d78:	213fffc4 	addi	r4,r4,-1
   20d7c:	20c6703a 	and	r3,r4,r3
   20d80:	1806c03a 	cmpne	r3,r3,zero
   20d84:	1884b03a 	or	r2,r3,r2
   20d88:	11001fcc 	andi	r4,r2,127
   20d8c:	00c01004 	movi	r3,64
   20d90:	20c00a1e 	bne	r4,r3,20dbc <__pack_f+0x124>
   20d94:	10c0200c 	andi	r3,r2,128
   20d98:	18000126 	beq	r3,zero,20da0 <__pack_f+0x108>
   20d9c:	10801004 	addi	r2,r2,64
   20da0:	100690ba 	slli	r3,r2,2
   20da4:	01100034 	movhi	r4,16384
   20da8:	1105403a 	cmpgeu	r2,r2,r4
   20dac:	1806d27a 	srli	r3,r3,9
   20db0:	1009883a 	mov	r4,r2
   20db4:	003fd206 	br	20d00 <__pack_f+0x68>
   20db8:	0005883a 	mov	r2,zero
   20dbc:	10800fc4 	addi	r2,r2,63
   20dc0:	003ff706 	br	20da0 <__pack_f+0x108>

00020dc4 <__unpack_f>:
   20dc4:	20c00017 	ldw	r3,0(r4)
   20dc8:	00802034 	movhi	r2,128
   20dcc:	10bfffc4 	addi	r2,r2,-1
   20dd0:	1808d5fa 	srli	r4,r3,23
   20dd4:	180cd7fa 	srli	r6,r3,31
   20dd8:	1884703a 	and	r2,r3,r2
   20ddc:	21003fcc 	andi	r4,r4,255
   20de0:	29800115 	stw	r6,4(r5)
   20de4:	2000111e 	bne	r4,zero,20e2c <__unpack_f+0x68>
   20de8:	10001a26 	beq	r2,zero,20e54 <__unpack_f+0x90>
   20dec:	00ffe084 	movi	r3,-126
   20df0:	100491fa 	slli	r2,r2,7
   20df4:	28c00215 	stw	r3,8(r5)
   20df8:	00c000c4 	movi	r3,3
   20dfc:	28c00015 	stw	r3,0(r5)
   20e00:	01900034 	movhi	r6,16384
   20e04:	31bfffc4 	addi	r6,r6,-1
   20e08:	30801036 	bltu	r6,r2,20e4c <__unpack_f+0x88>
   20e0c:	00ffe044 	movi	r3,-127
   20e10:	1085883a 	add	r2,r2,r2
   20e14:	1809883a 	mov	r4,r3
   20e18:	18ffffc4 	addi	r3,r3,-1
   20e1c:	30bffc2e 	bgeu	r6,r2,20e10 <__unpack_f+0x4c>
   20e20:	29000215 	stw	r4,8(r5)
   20e24:	28800315 	stw	r2,12(r5)
   20e28:	f800283a 	ret
   20e2c:	01803fc4 	movi	r6,255
   20e30:	21800b26 	beq	r4,r6,20e60 <__unpack_f+0x9c>
   20e34:	100491fa 	slli	r2,r2,7
   20e38:	213fe044 	addi	r4,r4,-127
   20e3c:	00c000c4 	movi	r3,3
   20e40:	10900034 	orhi	r2,r2,16384
   20e44:	29000215 	stw	r4,8(r5)
   20e48:	28c00015 	stw	r3,0(r5)
   20e4c:	28800315 	stw	r2,12(r5)
   20e50:	f800283a 	ret
   20e54:	00800084 	movi	r2,2
   20e58:	28800015 	stw	r2,0(r5)
   20e5c:	f800283a 	ret
   20e60:	10000526 	beq	r2,zero,20e78 <__unpack_f+0xb4>
   20e64:	18c0042c 	andhi	r3,r3,16
   20e68:	18000626 	beq	r3,zero,20e84 <__unpack_f+0xc0>
   20e6c:	00c00044 	movi	r3,1
   20e70:	28c00015 	stw	r3,0(r5)
   20e74:	003ff506 	br	20e4c <__unpack_f+0x88>
   20e78:	00800104 	movi	r2,4
   20e7c:	28800015 	stw	r2,0(r5)
   20e80:	f800283a 	ret
   20e84:	28000015 	stw	zero,0(r5)
   20e88:	003ff006 	br	20e4c <__unpack_f+0x88>

00020e8c <__pack_d>:
   20e8c:	20800017 	ldw	r2,0(r4)
   20e90:	defff804 	addi	sp,sp,-32
   20e94:	dcc00315 	stw	r19,12(sp)
   20e98:	dc800215 	stw	r18,8(sp)
   20e9c:	dfc00715 	stw	ra,28(sp)
   20ea0:	dd800615 	stw	r22,24(sp)
   20ea4:	dd400515 	stw	r21,20(sp)
   20ea8:	dd000415 	stw	r20,16(sp)
   20eac:	dc400115 	stw	r17,4(sp)
   20eb0:	dc000015 	stw	r16,0(sp)
   20eb4:	04800044 	movi	r18,1
   20eb8:	24400317 	ldw	r17,12(r4)
   20ebc:	24000417 	ldw	r16,16(r4)
   20ec0:	24c00117 	ldw	r19,4(r4)
   20ec4:	9080422e 	bgeu	r18,r2,20fd0 <__pack_d+0x144>
   20ec8:	00c00104 	movi	r3,4
   20ecc:	10c03c26 	beq	r2,r3,20fc0 <__pack_d+0x134>
   20ed0:	00c00084 	movi	r3,2
   20ed4:	10c01926 	beq	r2,r3,20f3c <__pack_d+0xb0>
   20ed8:	8c04b03a 	or	r2,r17,r16
   20edc:	10001726 	beq	r2,zero,20f3c <__pack_d+0xb0>
   20ee0:	21000217 	ldw	r4,8(r4)
   20ee4:	00bf0084 	movi	r2,-1022
   20ee8:	20804016 	blt	r4,r2,20fec <__pack_d+0x160>
   20eec:	0080ffc4 	movi	r2,1023
   20ef0:	11003316 	blt	r2,r4,20fc0 <__pack_d+0x134>
   20ef4:	88803fcc 	andi	r2,r17,255
   20ef8:	00c02004 	movi	r3,128
   20efc:	10c02926 	beq	r2,r3,20fa4 <__pack_d+0x118>
   20f00:	88801fc4 	addi	r2,r17,127
   20f04:	1463803a 	cmpltu	r17,r2,r17
   20f08:	8c21883a 	add	r16,r17,r16
   20f0c:	1023883a 	mov	r17,r2
   20f10:	00880034 	movhi	r2,8192
   20f14:	10bfffc4 	addi	r2,r2,-1
   20f18:	14001c36 	bltu	r2,r16,20f8c <__pack_d+0x100>
   20f1c:	2100ffc4 	addi	r4,r4,1023
   20f20:	8006963a 	slli	r3,r16,24
   20f24:	8804d23a 	srli	r2,r17,8
   20f28:	8020913a 	slli	r16,r16,4
   20f2c:	2101ffcc 	andi	r4,r4,2047
   20f30:	1884b03a 	or	r2,r3,r2
   20f34:	8020d33a 	srli	r16,r16,12
   20f38:	00000306 	br	20f48 <__pack_d+0xbc>
   20f3c:	0009883a 	mov	r4,zero
   20f40:	0005883a 	mov	r2,zero
   20f44:	0021883a 	mov	r16,zero
   20f48:	2008953a 	slli	r4,r4,20
   20f4c:	982697fa 	slli	r19,r19,31
   20f50:	00c00434 	movhi	r3,16
   20f54:	18ffffc4 	addi	r3,r3,-1
   20f58:	80e0703a 	and	r16,r16,r3
   20f5c:	8106b03a 	or	r3,r16,r4
   20f60:	1cc6b03a 	or	r3,r3,r19
   20f64:	dfc00717 	ldw	ra,28(sp)
   20f68:	dd800617 	ldw	r22,24(sp)
   20f6c:	dd400517 	ldw	r21,20(sp)
   20f70:	dd000417 	ldw	r20,16(sp)
   20f74:	dcc00317 	ldw	r19,12(sp)
   20f78:	dc800217 	ldw	r18,8(sp)
   20f7c:	dc400117 	ldw	r17,4(sp)
   20f80:	dc000017 	ldw	r16,0(sp)
   20f84:	dec00804 	addi	sp,sp,32
   20f88:	f800283a 	ret
   20f8c:	800697fa 	slli	r3,r16,31
   20f90:	8804d07a 	srli	r2,r17,1
   20f94:	21010004 	addi	r4,r4,1024
   20f98:	8020d07a 	srli	r16,r16,1
   20f9c:	18a2b03a 	or	r17,r3,r2
   20fa0:	003fdf06 	br	20f20 <__pack_d+0x94>
   20fa4:	88c0400c 	andi	r3,r17,256
   20fa8:	183fd926 	beq	r3,zero,20f10 <__pack_d+0x84>
   20fac:	8885883a 	add	r2,r17,r2
   20fb0:	1463803a 	cmpltu	r17,r2,r17
   20fb4:	8c21883a 	add	r16,r17,r16
   20fb8:	1023883a 	mov	r17,r2
   20fbc:	003fd406 	br	20f10 <__pack_d+0x84>
   20fc0:	0101ffc4 	movi	r4,2047
   20fc4:	0005883a 	mov	r2,zero
   20fc8:	0021883a 	mov	r16,zero
   20fcc:	003fde06 	br	20f48 <__pack_d+0xbc>
   20fd0:	84000234 	orhi	r16,r16,8
   20fd4:	00c00434 	movhi	r3,16
   20fd8:	18ffffc4 	addi	r3,r3,-1
   20fdc:	8805883a 	mov	r2,r17
   20fe0:	80e0703a 	and	r16,r16,r3
   20fe4:	0101ffc4 	movi	r4,2047
   20fe8:	003fd706 	br	20f48 <__pack_d+0xbc>
   20fec:	1129c83a 	sub	r20,r2,r4
   20ff0:	00800e04 	movi	r2,56
   20ff4:	15002716 	blt	r2,r20,21094 <__pack_d+0x208>
   20ff8:	800b883a 	mov	r5,r16
   20ffc:	a00d883a 	mov	r6,r20
   21000:	8809883a 	mov	r4,r17
   21004:	00210d80 	call	210d8 <__lshrdi3>
   21008:	9009883a 	mov	r4,r18
   2100c:	000b883a 	mov	r5,zero
   21010:	a00d883a 	mov	r6,r20
   21014:	102d883a 	mov	r22,r2
   21018:	182b883a 	mov	r21,r3
   2101c:	002111c0 	call	2111c <__ashldi3>
   21020:	1009003a 	cmpeq	r4,r2,zero
   21024:	1907c83a 	sub	r3,r3,r4
   21028:	10bfffc4 	addi	r2,r2,-1
   2102c:	1c20703a 	and	r16,r3,r16
   21030:	1444703a 	and	r2,r2,r17
   21034:	1404b03a 	or	r2,r2,r16
   21038:	1004c03a 	cmpne	r2,r2,zero
   2103c:	1584b03a 	or	r2,r2,r22
   21040:	11003fcc 	andi	r4,r2,255
   21044:	01402004 	movi	r5,128
   21048:	a807883a 	mov	r3,r21
   2104c:	2140131e 	bne	r4,r5,2109c <__pack_d+0x210>
   21050:	1140400c 	andi	r5,r2,256
   21054:	28000426 	beq	r5,zero,21068 <__pack_d+0x1dc>
   21058:	1109883a 	add	r4,r2,r4
   2105c:	2085803a 	cmpltu	r2,r4,r2
   21060:	1547883a 	add	r3,r2,r21
   21064:	2005883a 	mov	r2,r4
   21068:	1808963a 	slli	r4,r3,24
   2106c:	1004d23a 	srli	r2,r2,8
   21070:	1820913a 	slli	r16,r3,4
   21074:	01440034 	movhi	r5,4096
   21078:	297fffc4 	addi	r5,r5,-1
   2107c:	2084b03a 	or	r2,r4,r2
   21080:	8020d33a 	srli	r16,r16,12
   21084:	01000044 	movi	r4,1
   21088:	28ffaf36 	bltu	r5,r3,20f48 <__pack_d+0xbc>
   2108c:	0009883a 	mov	r4,zero
   21090:	003fad06 	br	20f48 <__pack_d+0xbc>
   21094:	0005883a 	mov	r2,zero
   21098:	0007883a 	mov	r3,zero
   2109c:	11001fc4 	addi	r4,r2,127
   210a0:	2085803a 	cmpltu	r2,r4,r2
   210a4:	10c7883a 	add	r3,r2,r3
   210a8:	2005883a 	mov	r2,r4
   210ac:	003fee06 	br	21068 <__pack_d+0x1dc>

000210b0 <__mulsi3>:
   210b0:	0005883a 	mov	r2,zero
   210b4:	20000726 	beq	r4,zero,210d4 <__mulsi3+0x24>
   210b8:	20c0004c 	andi	r3,r4,1
   210bc:	2008d07a 	srli	r4,r4,1
   210c0:	18000126 	beq	r3,zero,210c8 <__mulsi3+0x18>
   210c4:	1145883a 	add	r2,r2,r5
   210c8:	294b883a 	add	r5,r5,r5
   210cc:	203ffa1e 	bne	r4,zero,210b8 <__mulsi3+0x8>
   210d0:	f800283a 	ret
   210d4:	f800283a 	ret

000210d8 <__lshrdi3>:
   210d8:	2005883a 	mov	r2,r4
   210dc:	2807883a 	mov	r3,r5
   210e0:	30000826 	beq	r6,zero,21104 <__lshrdi3+0x2c>
   210e4:	01000804 	movi	r4,32
   210e8:	2189c83a 	sub	r4,r4,r6
   210ec:	0100060e 	bge	zero,r4,21108 <__lshrdi3+0x30>
   210f0:	1184d83a 	srl	r2,r2,r6
   210f4:	2908983a 	sll	r4,r5,r4
   210f8:	298cd83a 	srl	r6,r5,r6
   210fc:	2084b03a 	or	r2,r4,r2
   21100:	3007883a 	mov	r3,r6
   21104:	f800283a 	ret
   21108:	0105c83a 	sub	r2,zero,r4
   2110c:	000d883a 	mov	r6,zero
   21110:	2884d83a 	srl	r2,r5,r2
   21114:	3007883a 	mov	r3,r6
   21118:	003ffa06 	br	21104 <__lshrdi3+0x2c>

0002111c <__ashldi3>:
   2111c:	2005883a 	mov	r2,r4
   21120:	2807883a 	mov	r3,r5
   21124:	30000826 	beq	r6,zero,21148 <__ashldi3+0x2c>
   21128:	01000804 	movi	r4,32
   2112c:	2189c83a 	sub	r4,r4,r6
   21130:	0100060e 	bge	zero,r4,2114c <__ashldi3+0x30>
   21134:	1108d83a 	srl	r4,r2,r4
   21138:	2986983a 	sll	r3,r5,r6
   2113c:	118c983a 	sll	r6,r2,r6
   21140:	20c6b03a 	or	r3,r4,r3
   21144:	3005883a 	mov	r2,r6
   21148:	f800283a 	ret
   2114c:	0107c83a 	sub	r3,zero,r4
   21150:	000d883a 	mov	r6,zero
   21154:	10c6983a 	sll	r3,r2,r3
   21158:	3005883a 	mov	r2,r6
   2115c:	003ffa06 	br	21148 <__ashldi3+0x2c>

00021160 <exit>:
   21160:	defffe04 	addi	sp,sp,-8
   21164:	000b883a 	mov	r5,zero
   21168:	dc000015 	stw	r16,0(sp)
   2116c:	dfc00115 	stw	ra,4(sp)
   21170:	2021883a 	mov	r16,r4
   21174:	002336c0 	call	2336c <__call_exitprocs>
   21178:	008001f4 	movhi	r2,7
   2117c:	10b99004 	addi	r2,r2,-6592
   21180:	11000017 	ldw	r4,0(r2)
   21184:	20800f17 	ldw	r2,60(r4)
   21188:	10000126 	beq	r2,zero,21190 <exit+0x30>
   2118c:	103ee83a 	callr	r2
   21190:	8009883a 	mov	r4,r16
   21194:	002a6ec0 	call	2a6ec <_exit>

00021198 <_printf_r>:
   21198:	defffd04 	addi	sp,sp,-12
   2119c:	dfc00015 	stw	ra,0(sp)
   211a0:	d9800115 	stw	r6,4(sp)
   211a4:	d9c00215 	stw	r7,8(sp)
   211a8:	280d883a 	mov	r6,r5
   211ac:	21400217 	ldw	r5,8(r4)
   211b0:	d9c00104 	addi	r7,sp,4
   211b4:	00213580 	call	21358 <___vfprintf_internal_r>
   211b8:	dfc00017 	ldw	ra,0(sp)
   211bc:	dec00304 	addi	sp,sp,12
   211c0:	f800283a 	ret

000211c4 <printf>:
   211c4:	defffc04 	addi	sp,sp,-16
   211c8:	dfc00015 	stw	ra,0(sp)
   211cc:	d9400115 	stw	r5,4(sp)
   211d0:	d9800215 	stw	r6,8(sp)
   211d4:	d9c00315 	stw	r7,12(sp)
   211d8:	008001f4 	movhi	r2,7
   211dc:	10b99104 	addi	r2,r2,-6588
   211e0:	10800017 	ldw	r2,0(r2)
   211e4:	200b883a 	mov	r5,r4
   211e8:	d9800104 	addi	r6,sp,4
   211ec:	11000217 	ldw	r4,8(r2)
   211f0:	00231d40 	call	231d4 <__vfprintf_internal>
   211f4:	dfc00017 	ldw	ra,0(sp)
   211f8:	dec00404 	addi	sp,sp,16
   211fc:	f800283a 	ret

00021200 <_puts_r>:
   21200:	defff604 	addi	sp,sp,-40
   21204:	dc400815 	stw	r17,32(sp)
   21208:	2023883a 	mov	r17,r4
   2120c:	2809883a 	mov	r4,r5
   21210:	dc000715 	stw	r16,28(sp)
   21214:	dfc00915 	stw	ra,36(sp)
   21218:	2821883a 	mov	r16,r5
   2121c:	00212980 	call	21298 <strlen>
   21220:	10c00044 	addi	r3,r2,1
   21224:	d8800115 	stw	r2,4(sp)
   21228:	89400217 	ldw	r5,8(r17)
   2122c:	008001f4 	movhi	r2,7
   21230:	10b28004 	addi	r2,r2,-13824
   21234:	d8800215 	stw	r2,8(sp)
   21238:	00800044 	movi	r2,1
   2123c:	d8800315 	stw	r2,12(sp)
   21240:	8809883a 	mov	r4,r17
   21244:	00800084 	movi	r2,2
   21248:	d9800404 	addi	r6,sp,16
   2124c:	dc000015 	stw	r16,0(sp)
   21250:	d8c00615 	stw	r3,24(sp)
   21254:	dec00415 	stw	sp,16(sp)
   21258:	d8800515 	stw	r2,20(sp)
   2125c:	00256740 	call	25674 <__sfvwrite_r>
   21260:	1000061e 	bne	r2,zero,2127c <_puts_r+0x7c>
   21264:	00800284 	movi	r2,10
   21268:	dfc00917 	ldw	ra,36(sp)
   2126c:	dc400817 	ldw	r17,32(sp)
   21270:	dc000717 	ldw	r16,28(sp)
   21274:	dec00a04 	addi	sp,sp,40
   21278:	f800283a 	ret
   2127c:	00bfffc4 	movi	r2,-1
   21280:	003ff906 	br	21268 <_puts_r+0x68>

00021284 <puts>:
   21284:	008001f4 	movhi	r2,7
   21288:	10b99104 	addi	r2,r2,-6588
   2128c:	200b883a 	mov	r5,r4
   21290:	11000017 	ldw	r4,0(r2)
   21294:	00212001 	jmpi	21200 <_puts_r>

00021298 <strlen>:
   21298:	208000cc 	andi	r2,r4,3
   2129c:	10001f1e 	bne	r2,zero,2131c <strlen+0x84>
   212a0:	20800017 	ldw	r2,0(r4)
   212a4:	01ffbff4 	movhi	r7,65279
   212a8:	39ffbfc4 	addi	r7,r7,-257
   212ac:	01a02074 	movhi	r6,32897
   212b0:	31a02004 	addi	r6,r6,-32640
   212b4:	11c7883a 	add	r3,r2,r7
   212b8:	0084303a 	nor	r2,zero,r2
   212bc:	1886703a 	and	r3,r3,r2
   212c0:	1986703a 	and	r3,r3,r6
   212c4:	2005883a 	mov	r2,r4
   212c8:	1800101e 	bne	r3,zero,2130c <strlen+0x74>
   212cc:	10800104 	addi	r2,r2,4
   212d0:	10c00017 	ldw	r3,0(r2)
   212d4:	19cb883a 	add	r5,r3,r7
   212d8:	00c6303a 	nor	r3,zero,r3
   212dc:	28c6703a 	and	r3,r5,r3
   212e0:	1986703a 	and	r3,r3,r6
   212e4:	1800091e 	bne	r3,zero,2130c <strlen+0x74>
   212e8:	10800104 	addi	r2,r2,4
   212ec:	10c00017 	ldw	r3,0(r2)
   212f0:	19cb883a 	add	r5,r3,r7
   212f4:	00c6303a 	nor	r3,zero,r3
   212f8:	28c6703a 	and	r3,r5,r3
   212fc:	1986703a 	and	r3,r3,r6
   21300:	183ff226 	beq	r3,zero,212cc <strlen+0x34>
   21304:	00000106 	br	2130c <strlen+0x74>
   21308:	10800044 	addi	r2,r2,1
   2130c:	10c00007 	ldb	r3,0(r2)
   21310:	183ffd1e 	bne	r3,zero,21308 <strlen+0x70>
   21314:	1105c83a 	sub	r2,r2,r4
   21318:	f800283a 	ret
   2131c:	2005883a 	mov	r2,r4
   21320:	003ffa06 	br	2130c <strlen+0x74>

00021324 <__sprint_r>:
   21324:	30800217 	ldw	r2,8(r6)
   21328:	defffe04 	addi	sp,sp,-8
   2132c:	dc000015 	stw	r16,0(sp)
   21330:	dfc00115 	stw	ra,4(sp)
   21334:	3021883a 	mov	r16,r6
   21338:	10000226 	beq	r2,zero,21344 <__sprint_r+0x20>
   2133c:	00256740 	call	25674 <__sfvwrite_r>
   21340:	80000215 	stw	zero,8(r16)
   21344:	80000115 	stw	zero,4(r16)
   21348:	dfc00117 	ldw	ra,4(sp)
   2134c:	dc000017 	ldw	r16,0(sp)
   21350:	dec00204 	addi	sp,sp,8
   21354:	f800283a 	ret

00021358 <___vfprintf_internal_r>:
   21358:	defeb904 	addi	sp,sp,-1308
   2135c:	dc013d15 	stw	r16,1268(sp)
   21360:	d9013015 	stw	r4,1216(sp)
   21364:	dfc14615 	stw	ra,1304(sp)
   21368:	df014515 	stw	fp,1300(sp)
   2136c:	ddc14415 	stw	r23,1296(sp)
   21370:	dd814315 	stw	r22,1292(sp)
   21374:	dd414215 	stw	r21,1288(sp)
   21378:	dd014115 	stw	r20,1284(sp)
   2137c:	dcc14015 	stw	r19,1280(sp)
   21380:	dc813f15 	stw	r18,1276(sp)
   21384:	dc413e15 	stw	r17,1272(sp)
   21388:	d9412915 	stw	r5,1188(sp)
   2138c:	3021883a 	mov	r16,r6
   21390:	d9c12d15 	stw	r7,1204(sp)
   21394:	0025d600 	call	25d60 <_localeconv_r>
   21398:	10800017 	ldw	r2,0(r2)
   2139c:	d9013017 	ldw	r4,1216(sp)
   213a0:	d8013315 	stw	zero,1228(sp)
   213a4:	d8813715 	stw	r2,1244(sp)
   213a8:	d8013415 	stw	zero,1232(sp)
   213ac:	20000226 	beq	r4,zero,213b8 <___vfprintf_internal_r+0x60>
   213b0:	20800e17 	ldw	r2,56(r4)
   213b4:	10014b26 	beq	r2,zero,218e4 <___vfprintf_internal_r+0x58c>
   213b8:	d8c12917 	ldw	r3,1188(sp)
   213bc:	1880030b 	ldhu	r2,12(r3)
   213c0:	10c0020c 	andi	r3,r2,8
   213c4:	18ffffcc 	andi	r3,r3,65535
   213c8:	18e0001c 	xori	r3,r3,32768
   213cc:	18e00004 	addi	r3,r3,-32768
   213d0:	1800ed26 	beq	r3,zero,21788 <___vfprintf_internal_r+0x430>
   213d4:	d9012917 	ldw	r4,1188(sp)
   213d8:	20c00417 	ldw	r3,16(r4)
   213dc:	1800ea26 	beq	r3,zero,21788 <___vfprintf_internal_r+0x430>
   213e0:	1100068c 	andi	r4,r2,26
   213e4:	00c00284 	movi	r3,10
   213e8:	20c0f026 	beq	r4,r3,217ac <___vfprintf_internal_r+0x454>
   213ec:	d9010dc4 	addi	r4,sp,1079
   213f0:	d8810e04 	addi	r2,sp,1080
   213f4:	dc413017 	ldw	r17,1216(sp)
   213f8:	d8c00404 	addi	r3,sp,16
   213fc:	d9012615 	stw	r4,1176(sp)
   21400:	1109c83a 	sub	r4,r2,r4
   21404:	d8812715 	stw	r2,1180(sp)
   21408:	d8c11b15 	stw	r3,1132(sp)
   2140c:	d8011d15 	stw	zero,1140(sp)
   21410:	d8011c15 	stw	zero,1136(sp)
   21414:	802b883a 	mov	r21,r16
   21418:	d8013215 	stw	zero,1224(sp)
   2141c:	d8013615 	stw	zero,1240(sp)
   21420:	d8013515 	stw	zero,1236(sp)
   21424:	d8012c15 	stw	zero,1200(sp)
   21428:	1813883a 	mov	r9,r3
   2142c:	d9013915 	stw	r4,1252(sp)
   21430:	a8800007 	ldb	r2,0(r21)
   21434:	1002f326 	beq	r2,zero,22004 <___vfprintf_internal_r+0xcac>
   21438:	00c00944 	movi	r3,37
   2143c:	a825883a 	mov	r18,r21
   21440:	10c0021e 	bne	r2,r3,2144c <___vfprintf_internal_r+0xf4>
   21444:	00001406 	br	21498 <___vfprintf_internal_r+0x140>
   21448:	10c00326 	beq	r2,r3,21458 <___vfprintf_internal_r+0x100>
   2144c:	94800044 	addi	r18,r18,1
   21450:	90800007 	ldb	r2,0(r18)
   21454:	103ffc1e 	bne	r2,zero,21448 <___vfprintf_internal_r+0xf0>
   21458:	9561c83a 	sub	r16,r18,r21
   2145c:	80000e26 	beq	r16,zero,21498 <___vfprintf_internal_r+0x140>
   21460:	da011d17 	ldw	r8,1140(sp)
   21464:	d8c11c17 	ldw	r3,1136(sp)
   21468:	4d400015 	stw	r21,0(r9)
   2146c:	4c000115 	stw	r16,4(r9)
   21470:	4411883a 	add	r8,r8,r16
   21474:	18c00044 	addi	r3,r3,1
   21478:	da011d15 	stw	r8,1140(sp)
   2147c:	d8c11c15 	stw	r3,1136(sp)
   21480:	008001c4 	movi	r2,7
   21484:	10c11016 	blt	r2,r3,218c8 <___vfprintf_internal_r+0x570>
   21488:	4a400204 	addi	r9,r9,8
   2148c:	d8812c17 	ldw	r2,1200(sp)
   21490:	1405883a 	add	r2,r2,r16
   21494:	d8812c15 	stw	r2,1200(sp)
   21498:	90800007 	ldb	r2,0(r18)
   2149c:	1000ee26 	beq	r2,zero,21858 <___vfprintf_internal_r+0x500>
   214a0:	95400044 	addi	r21,r18,1
   214a4:	94800047 	ldb	r18,1(r18)
   214a8:	073fffc4 	movi	fp,-1
   214ac:	e007883a 	mov	r3,fp
   214b0:	d8012585 	stb	zero,1174(sp)
   214b4:	d8012e15 	stw	zero,1208(sp)
   214b8:	0021883a 	mov	r16,zero
   214bc:	05001604 	movi	r20,88
   214c0:	04c00244 	movi	r19,9
   214c4:	4839883a 	mov	fp,r9
   214c8:	ad400044 	addi	r21,r21,1
   214cc:	90bff804 	addi	r2,r18,-32
   214d0:	a080462e 	bgeu	r20,r2,215ec <___vfprintf_internal_r+0x294>
   214d4:	e013883a 	mov	r9,fp
   214d8:	9000df26 	beq	r18,zero,21858 <___vfprintf_internal_r+0x500>
   214dc:	00c00044 	movi	r3,1
   214e0:	d8c12815 	stw	r3,1184(sp)
   214e4:	dc810405 	stb	r18,1040(sp)
   214e8:	d8012585 	stb	zero,1174(sp)
   214ec:	d8c12b15 	stw	r3,1196(sp)
   214f0:	dcc10404 	addi	r19,sp,1040
   214f4:	d8013115 	stw	zero,1220(sp)
   214f8:	80c0008c 	andi	r3,r16,2
   214fc:	d8c12a15 	stw	r3,1192(sp)
   21500:	18000326 	beq	r3,zero,21510 <___vfprintf_internal_r+0x1b8>
   21504:	d8c12817 	ldw	r3,1184(sp)
   21508:	18c00084 	addi	r3,r3,2
   2150c:	d8c12815 	stw	r3,1184(sp)
   21510:	80c0210c 	andi	r3,r16,132
   21514:	d8c12f15 	stw	r3,1212(sp)
   21518:	1802251e 	bne	r3,zero,21db0 <___vfprintf_internal_r+0xa58>
   2151c:	d9012e17 	ldw	r4,1208(sp)
   21520:	d8c12817 	ldw	r3,1184(sp)
   21524:	20edc83a 	sub	r22,r4,r3
   21528:	0582210e 	bge	zero,r22,21db0 <___vfprintf_internal_r+0xa58>
   2152c:	02800404 	movi	r10,16
   21530:	da011d17 	ldw	r8,1140(sp)
   21534:	d8c11c17 	ldw	r3,1136(sp)
   21538:	05c001f4 	movhi	r23,7
   2153c:	bdf29184 	addi	r23,r23,-13754
   21540:	5580200e 	bge	r10,r22,215c4 <___vfprintf_internal_r+0x26c>
   21544:	dc813815 	stw	r18,1248(sp)
   21548:	5039883a 	mov	fp,r10
   2154c:	b825883a 	mov	r18,r23
   21550:	050001c4 	movi	r20,7
   21554:	b02f883a 	mov	r23,r22
   21558:	802d883a 	mov	r22,r16
   2155c:	dc012917 	ldw	r16,1188(sp)
   21560:	00000306 	br	21570 <___vfprintf_internal_r+0x218>
   21564:	bdfffc04 	addi	r23,r23,-16
   21568:	4a400204 	addi	r9,r9,8
   2156c:	e5c0110e 	bge	fp,r23,215b4 <___vfprintf_internal_r+0x25c>
   21570:	4c800015 	stw	r18,0(r9)
   21574:	4f000115 	stw	fp,4(r9)
   21578:	42000404 	addi	r8,r8,16
   2157c:	18c00044 	addi	r3,r3,1
   21580:	da011d15 	stw	r8,1140(sp)
   21584:	d8c11c15 	stw	r3,1136(sp)
   21588:	a0fff60e 	bge	r20,r3,21564 <___vfprintf_internal_r+0x20c>
   2158c:	8809883a 	mov	r4,r17
   21590:	800b883a 	mov	r5,r16
   21594:	d9811b04 	addi	r6,sp,1132
   21598:	00213240 	call	21324 <__sprint_r>
   2159c:	1000b41e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   215a0:	bdfffc04 	addi	r23,r23,-16
   215a4:	da011d17 	ldw	r8,1140(sp)
   215a8:	d8c11c17 	ldw	r3,1136(sp)
   215ac:	da400404 	addi	r9,sp,16
   215b0:	e5ffef16 	blt	fp,r23,21570 <___vfprintf_internal_r+0x218>
   215b4:	b021883a 	mov	r16,r22
   215b8:	b82d883a 	mov	r22,r23
   215bc:	902f883a 	mov	r23,r18
   215c0:	dc813817 	ldw	r18,1248(sp)
   215c4:	4dc00015 	stw	r23,0(r9)
   215c8:	4d800115 	stw	r22,4(r9)
   215cc:	4591883a 	add	r8,r8,r22
   215d0:	18c00044 	addi	r3,r3,1
   215d4:	da011d15 	stw	r8,1140(sp)
   215d8:	d8c11c15 	stw	r3,1136(sp)
   215dc:	008001c4 	movi	r2,7
   215e0:	10c3fe16 	blt	r2,r3,225dc <___vfprintf_internal_r+0x1284>
   215e4:	4a400204 	addi	r9,r9,8
   215e8:	0001f306 	br	21db8 <___vfprintf_internal_r+0xa60>
   215ec:	1085883a 	add	r2,r2,r2
   215f0:	1085883a 	add	r2,r2,r2
   215f4:	010000b4 	movhi	r4,2
   215f8:	21058204 	addi	r4,r4,5640
   215fc:	1105883a 	add	r2,r2,r4
   21600:	10800017 	ldw	r2,0(r2)
   21604:	1000683a 	jmp	r2
   21608:	00021ce4 	muli	zero,zero,2163
   2160c:	000214d4 	movui	zero,2131
   21610:	000214d4 	movui	zero,2131
   21614:	00021cfc 	xorhi	zero,zero,2163
   21618:	000214d4 	movui	zero,2131
   2161c:	000214d4 	movui	zero,2131
   21620:	000214d4 	movui	zero,2131
   21624:	000214d4 	movui	zero,2131
   21628:	000214d4 	movui	zero,2131
   2162c:	000214d4 	movui	zero,2131
   21630:	00021bb4 	movhi	zero,2158
   21634:	00021d48 	cmpgei	zero,zero,2165
   21638:	000214d4 	movui	zero,2131
   2163c:	0002177c 	xorhi	zero,zero,2141
   21640:	00021b1c 	xori	zero,zero,2156
   21644:	000214d4 	movui	zero,2131
   21648:	00021d08 	cmpgei	zero,zero,2164
   2164c:	00021d14 	movui	zero,2164
   21650:	00021d14 	movui	zero,2164
   21654:	00021d14 	movui	zero,2164
   21658:	00021d14 	movui	zero,2164
   2165c:	00021d14 	movui	zero,2164
   21660:	00021d14 	movui	zero,2164
   21664:	00021d14 	movui	zero,2164
   21668:	00021d14 	movui	zero,2164
   2166c:	00021d14 	movui	zero,2164
   21670:	000214d4 	movui	zero,2131
   21674:	000214d4 	movui	zero,2131
   21678:	000214d4 	movui	zero,2131
   2167c:	000214d4 	movui	zero,2131
   21680:	000214d4 	movui	zero,2131
   21684:	000214d4 	movui	zero,2131
   21688:	000214d4 	movui	zero,2131
   2168c:	000214d4 	movui	zero,2131
   21690:	000214d4 	movui	zero,2131
   21694:	000214d4 	movui	zero,2131
   21698:	000218ec 	andhi	zero,zero,2147
   2169c:	000219ac 	andhi	zero,zero,2150
   216a0:	000214d4 	movui	zero,2131
   216a4:	000219ac 	andhi	zero,zero,2150
   216a8:	000214d4 	movui	zero,2131
   216ac:	000214d4 	movui	zero,2131
   216b0:	000214d4 	movui	zero,2131
   216b4:	000214d4 	movui	zero,2131
   216b8:	00021a40 	call	21a4 <__alt_mem_ins_mem_c1-0x1de5c>
   216bc:	000214d4 	movui	zero,2131
   216c0:	000214d4 	movui	zero,2131
   216c4:	00021a4c 	andi	zero,zero,2153
   216c8:	000214d4 	movui	zero,2131
   216cc:	000214d4 	movui	zero,2131
   216d0:	000214d4 	movui	zero,2131
   216d4:	000214d4 	movui	zero,2131
   216d8:	000214d4 	movui	zero,2131
   216dc:	00021a84 	movi	zero,2154
   216e0:	000214d4 	movui	zero,2131
   216e4:	000214d4 	movui	zero,2131
   216e8:	00021ac0 	call	21ac <__alt_mem_ins_mem_c1-0x1de54>
   216ec:	000214d4 	movui	zero,2131
   216f0:	000214d4 	movui	zero,2131
   216f4:	000214d4 	movui	zero,2131
   216f8:	000214d4 	movui	zero,2131
   216fc:	000214d4 	movui	zero,2131
   21700:	000214d4 	movui	zero,2131
   21704:	000214d4 	movui	zero,2131
   21708:	000214d4 	movui	zero,2131
   2170c:	000214d4 	movui	zero,2131
   21710:	000214d4 	movui	zero,2131
   21714:	00021d58 	cmpnei	zero,zero,2165
   21718:	00021d8c 	andi	zero,zero,2166
   2171c:	000219ac 	andhi	zero,zero,2150
   21720:	000219ac 	andhi	zero,zero,2150
   21724:	000219ac 	andhi	zero,zero,2150
   21728:	00021cd8 	cmpnei	zero,zero,2163
   2172c:	00021d8c 	andi	zero,zero,2166
   21730:	000214d4 	movui	zero,2131
   21734:	000214d4 	movui	zero,2131
   21738:	00021b64 	muli	zero,zero,2157
   2173c:	000214d4 	movui	zero,2131
   21740:	00021b7c 	xorhi	zero,zero,2157
   21744:	00021d98 	cmpnei	zero,zero,2166
   21748:	00021bdc 	xori	zero,zero,2159
   2174c:	00021c2c 	andhi	zero,zero,2160
   21750:	000214d4 	movui	zero,2131
   21754:	00021c38 	rdprs	zero,zero,2160
   21758:	000214d4 	movui	zero,2131
   2175c:	00021da4 	muli	zero,zero,2166
   21760:	000214d4 	movui	zero,2131
   21764:	000214d4 	movui	zero,2131
   21768:	00021c9c 	xori	zero,zero,2162
   2176c:	d9012e17 	ldw	r4,1208(sp)
   21770:	d8812d15 	stw	r2,1204(sp)
   21774:	0109c83a 	sub	r4,zero,r4
   21778:	d9012e15 	stw	r4,1208(sp)
   2177c:	84000114 	ori	r16,r16,4
   21780:	ac800007 	ldb	r18,0(r21)
   21784:	003f5006 	br	214c8 <___vfprintf_internal_r+0x170>
   21788:	d9013017 	ldw	r4,1216(sp)
   2178c:	d9412917 	ldw	r5,1188(sp)
   21790:	00231f80 	call	231f8 <__swsetup_r>
   21794:	10003d1e 	bne	r2,zero,2188c <___vfprintf_internal_r+0x534>
   21798:	d8c12917 	ldw	r3,1188(sp)
   2179c:	1880030b 	ldhu	r2,12(r3)
   217a0:	00c00284 	movi	r3,10
   217a4:	1100068c 	andi	r4,r2,26
   217a8:	20ff101e 	bne	r4,r3,213ec <___vfprintf_internal_r+0x94>
   217ac:	d9012917 	ldw	r4,1188(sp)
   217b0:	20c0038b 	ldhu	r3,14(r4)
   217b4:	193fffcc 	andi	r4,r3,65535
   217b8:	2120001c 	xori	r4,r4,32768
   217bc:	21200004 	addi	r4,r4,-32768
   217c0:	203f0a16 	blt	r4,zero,213ec <___vfprintf_internal_r+0x94>
   217c4:	d9012917 	ldw	r4,1188(sp)
   217c8:	d9c12d17 	ldw	r7,1204(sp)
   217cc:	10bfff4c 	andi	r2,r2,65533
   217d0:	22800717 	ldw	r10,28(r4)
   217d4:	22400917 	ldw	r9,36(r4)
   217d8:	d9013017 	ldw	r4,1216(sp)
   217dc:	02010004 	movi	r8,1024
   217e0:	d881070d 	sth	r2,1052(sp)
   217e4:	d9410404 	addi	r5,sp,1040
   217e8:	d8800404 	addi	r2,sp,16
   217ec:	800d883a 	mov	r6,r16
   217f0:	d8c1078d 	sth	r3,1054(sp)
   217f4:	da810b15 	stw	r10,1068(sp)
   217f8:	da410d15 	stw	r9,1076(sp)
   217fc:	d8810415 	stw	r2,1040(sp)
   21800:	d8810815 	stw	r2,1056(sp)
   21804:	da010615 	stw	r8,1048(sp)
   21808:	da010915 	stw	r8,1060(sp)
   2180c:	d8010a15 	stw	zero,1064(sp)
   21810:	00213580 	call	21358 <___vfprintf_internal_r>
   21814:	d8812c15 	stw	r2,1200(sp)
   21818:	10000416 	blt	r2,zero,2182c <___vfprintf_internal_r+0x4d4>
   2181c:	d9013017 	ldw	r4,1216(sp)
   21820:	d9410404 	addi	r5,sp,1040
   21824:	0024d640 	call	24d64 <_fflush_r>
   21828:	1006501e 	bne	r2,zero,2316c <___vfprintf_internal_r+0x1e14>
   2182c:	d881070b 	ldhu	r2,1052(sp)
   21830:	1080100c 	andi	r2,r2,64
   21834:	10bfffcc 	andi	r2,r2,65535
   21838:	10a0001c 	xori	r2,r2,32768
   2183c:	10a00004 	addi	r2,r2,-32768
   21840:	10001426 	beq	r2,zero,21894 <___vfprintf_internal_r+0x53c>
   21844:	d8c12917 	ldw	r3,1188(sp)
   21848:	1880030b 	ldhu	r2,12(r3)
   2184c:	10801014 	ori	r2,r2,64
   21850:	1880030d 	sth	r2,12(r3)
   21854:	00000f06 	br	21894 <___vfprintf_internal_r+0x53c>
   21858:	d8811d17 	ldw	r2,1140(sp)
   2185c:	10000426 	beq	r2,zero,21870 <___vfprintf_internal_r+0x518>
   21860:	d9013017 	ldw	r4,1216(sp)
   21864:	d9412917 	ldw	r5,1188(sp)
   21868:	d9811b04 	addi	r6,sp,1132
   2186c:	00213240 	call	21324 <__sprint_r>
   21870:	d8c12917 	ldw	r3,1188(sp)
   21874:	1880030b 	ldhu	r2,12(r3)
   21878:	1080100c 	andi	r2,r2,64
   2187c:	10bfffcc 	andi	r2,r2,65535
   21880:	10a0001c 	xori	r2,r2,32768
   21884:	10a00004 	addi	r2,r2,-32768
   21888:	10000226 	beq	r2,zero,21894 <___vfprintf_internal_r+0x53c>
   2188c:	00bfffc4 	movi	r2,-1
   21890:	d8812c15 	stw	r2,1200(sp)
   21894:	d8812c17 	ldw	r2,1200(sp)
   21898:	dfc14617 	ldw	ra,1304(sp)
   2189c:	df014517 	ldw	fp,1300(sp)
   218a0:	ddc14417 	ldw	r23,1296(sp)
   218a4:	dd814317 	ldw	r22,1292(sp)
   218a8:	dd414217 	ldw	r21,1288(sp)
   218ac:	dd014117 	ldw	r20,1284(sp)
   218b0:	dcc14017 	ldw	r19,1280(sp)
   218b4:	dc813f17 	ldw	r18,1276(sp)
   218b8:	dc413e17 	ldw	r17,1272(sp)
   218bc:	dc013d17 	ldw	r16,1268(sp)
   218c0:	dec14704 	addi	sp,sp,1308
   218c4:	f800283a 	ret
   218c8:	d9412917 	ldw	r5,1188(sp)
   218cc:	8809883a 	mov	r4,r17
   218d0:	d9811b04 	addi	r6,sp,1132
   218d4:	00213240 	call	21324 <__sprint_r>
   218d8:	103fe51e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   218dc:	da400404 	addi	r9,sp,16
   218e0:	003eea06 	br	2148c <___vfprintf_internal_r+0x134>
   218e4:	00250200 	call	25020 <__sinit>
   218e8:	003eb306 	br	213b8 <___vfprintf_internal_r+0x60>
   218ec:	e013883a 	mov	r9,fp
   218f0:	84000414 	ori	r16,r16,16
   218f4:	1839883a 	mov	fp,r3
   218f8:	8080080c 	andi	r2,r16,32
   218fc:	10034426 	beq	r2,zero,22610 <___vfprintf_internal_r+0x12b8>
   21900:	d8c12d17 	ldw	r3,1204(sp)
   21904:	18800117 	ldw	r2,4(r3)
   21908:	1dc00017 	ldw	r23,0(r3)
   2190c:	18c00204 	addi	r3,r3,8
   21910:	d8c12d15 	stw	r3,1204(sp)
   21914:	102d883a 	mov	r22,r2
   21918:	1003020e 	bge	r2,zero,22524 <___vfprintf_internal_r+0x11cc>
   2191c:	05efc83a 	sub	r23,zero,r23
   21920:	b804c03a 	cmpne	r2,r23,zero
   21924:	05adc83a 	sub	r22,zero,r22
   21928:	b0adc83a 	sub	r22,r22,r2
   2192c:	00800b44 	movi	r2,45
   21930:	d8812585 	stb	r2,1174(sp)
   21934:	00c00044 	movi	r3,1
   21938:	bd84b03a 	or	r2,r23,r22
   2193c:	e0000216 	blt	fp,zero,21948 <___vfprintf_internal_r+0x5f0>
   21940:	013fdfc4 	movi	r4,-129
   21944:	8120703a 	and	r16,r16,r4
   21948:	1001cc1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0xd24>
   2194c:	e001cb1e 	bne	fp,zero,2207c <___vfprintf_internal_r+0xd24>
   21950:	18c03fcc 	andi	r3,r3,255
   21954:	1802ca1e 	bne	r3,zero,22480 <___vfprintf_internal_r+0x1128>
   21958:	8080004c 	andi	r2,r16,1
   2195c:	1002c826 	beq	r2,zero,22480 <___vfprintf_internal_r+0x1128>
   21960:	d8c13917 	ldw	r3,1252(sp)
   21964:	00800c04 	movi	r2,48
   21968:	d8810dc5 	stb	r2,1079(sp)
   2196c:	d8c12b15 	stw	r3,1196(sp)
   21970:	dcc10dc4 	addi	r19,sp,1079
   21974:	d8812b17 	ldw	r2,1196(sp)
   21978:	d8812815 	stw	r2,1184(sp)
   2197c:	1700010e 	bge	r2,fp,21984 <___vfprintf_internal_r+0x62c>
   21980:	df012815 	stw	fp,1184(sp)
   21984:	d8812583 	ldbu	r2,1174(sp)
   21988:	df013115 	stw	fp,1220(sp)
   2198c:	10803fcc 	andi	r2,r2,255
   21990:	1080201c 	xori	r2,r2,128
   21994:	10bfe004 	addi	r2,r2,-128
   21998:	103ed726 	beq	r2,zero,214f8 <___vfprintf_internal_r+0x1a0>
   2199c:	d8c12817 	ldw	r3,1184(sp)
   219a0:	18c00044 	addi	r3,r3,1
   219a4:	d8c12815 	stw	r3,1184(sp)
   219a8:	003ed306 	br	214f8 <___vfprintf_internal_r+0x1a0>
   219ac:	8080020c 	andi	r2,r16,8
   219b0:	e013883a 	mov	r9,fp
   219b4:	1839883a 	mov	fp,r3
   219b8:	1003a626 	beq	r2,zero,22854 <___vfprintf_internal_r+0x14fc>
   219bc:	d9012d17 	ldw	r4,1204(sp)
   219c0:	25800017 	ldw	r22,0(r4)
   219c4:	25000117 	ldw	r20,4(r4)
   219c8:	21000204 	addi	r4,r4,8
   219cc:	d9012d15 	stw	r4,1204(sp)
   219d0:	dd813315 	stw	r22,1228(sp)
   219d4:	dd013415 	stw	r20,1232(sp)
   219d8:	b009883a 	mov	r4,r22
   219dc:	a00b883a 	mov	r5,r20
   219e0:	da413c15 	stw	r9,1264(sp)
   219e4:	00281ac0 	call	281ac <__isinfd>
   219e8:	da413c17 	ldw	r9,1264(sp)
   219ec:	b009883a 	mov	r4,r22
   219f0:	a00b883a 	mov	r5,r20
   219f4:	10041d26 	beq	r2,zero,22a6c <___vfprintf_internal_r+0x1714>
   219f8:	000d883a 	mov	r6,zero
   219fc:	000f883a 	mov	r7,zero
   21a00:	0029f800 	call	29f80 <__ltdf2>
   21a04:	da413c17 	ldw	r9,1264(sp)
   21a08:	1004da16 	blt	r2,zero,22d74 <___vfprintf_internal_r+0x1a1c>
   21a0c:	d8812583 	ldbu	r2,1174(sp)
   21a10:	00c011c4 	movi	r3,71
   21a14:	1c83d116 	blt	r3,r18,2295c <___vfprintf_internal_r+0x1604>
   21a18:	04c001f4 	movhi	r19,7
   21a1c:	9cf28104 	addi	r19,r19,-13820
   21a20:	00c000c4 	movi	r3,3
   21a24:	d8c12815 	stw	r3,1184(sp)
   21a28:	00ffdfc4 	movi	r3,-129
   21a2c:	80e0703a 	and	r16,r16,r3
   21a30:	d8c12817 	ldw	r3,1184(sp)
   21a34:	d8013115 	stw	zero,1220(sp)
   21a38:	d8c12b15 	stw	r3,1196(sp)
   21a3c:	003fd306 	br	2198c <___vfprintf_internal_r+0x634>
   21a40:	84000214 	ori	r16,r16,8
   21a44:	ac800007 	ldb	r18,0(r21)
   21a48:	003e9f06 	br	214c8 <___vfprintf_internal_r+0x170>
   21a4c:	e013883a 	mov	r9,fp
   21a50:	84000414 	ori	r16,r16,16
   21a54:	1839883a 	mov	fp,r3
   21a58:	8080080c 	andi	r2,r16,32
   21a5c:	10031d26 	beq	r2,zero,226d4 <___vfprintf_internal_r+0x137c>
   21a60:	d8812d17 	ldw	r2,1204(sp)
   21a64:	0007883a 	mov	r3,zero
   21a68:	15c00017 	ldw	r23,0(r2)
   21a6c:	15800117 	ldw	r22,4(r2)
   21a70:	10800204 	addi	r2,r2,8
   21a74:	d8812d15 	stw	r2,1204(sp)
   21a78:	d8012585 	stb	zero,1174(sp)
   21a7c:	bd84b03a 	or	r2,r23,r22
   21a80:	003fae06 	br	2193c <___vfprintf_internal_r+0x5e4>
   21a84:	e013883a 	mov	r9,fp
   21a88:	84000414 	ori	r16,r16,16
   21a8c:	1839883a 	mov	fp,r3
   21a90:	8080080c 	andi	r2,r16,32
   21a94:	1002e726 	beq	r2,zero,22634 <___vfprintf_internal_r+0x12dc>
   21a98:	d8c12d17 	ldw	r3,1204(sp)
   21a9c:	d9012d17 	ldw	r4,1204(sp)
   21aa0:	1dc00017 	ldw	r23,0(r3)
   21aa4:	1d800117 	ldw	r22,4(r3)
   21aa8:	21000204 	addi	r4,r4,8
   21aac:	00c00044 	movi	r3,1
   21ab0:	d9012d15 	stw	r4,1204(sp)
   21ab4:	bd84b03a 	or	r2,r23,r22
   21ab8:	d8012585 	stb	zero,1174(sp)
   21abc:	003f9f06 	br	2193c <___vfprintf_internal_r+0x5e4>
   21ac0:	e013883a 	mov	r9,fp
   21ac4:	1839883a 	mov	fp,r3
   21ac8:	00c001f4 	movhi	r3,7
   21acc:	18f28504 	addi	r3,r3,-13804
   21ad0:	d8c13615 	stw	r3,1240(sp)
   21ad4:	8080080c 	andi	r2,r16,32
   21ad8:	10007726 	beq	r2,zero,21cb8 <___vfprintf_internal_r+0x960>
   21adc:	d9012d17 	ldw	r4,1204(sp)
   21ae0:	25c00017 	ldw	r23,0(r4)
   21ae4:	25800117 	ldw	r22,4(r4)
   21ae8:	21000204 	addi	r4,r4,8
   21aec:	d9012d15 	stw	r4,1204(sp)
   21af0:	8080004c 	andi	r2,r16,1
   21af4:	1002c226 	beq	r2,zero,22600 <___vfprintf_internal_r+0x12a8>
   21af8:	bd84b03a 	or	r2,r23,r22
   21afc:	10035d26 	beq	r2,zero,22874 <___vfprintf_internal_r+0x151c>
   21b00:	00c00c04 	movi	r3,48
   21b04:	d8c12505 	stb	r3,1172(sp)
   21b08:	dc812545 	stb	r18,1173(sp)
   21b0c:	84000094 	ori	r16,r16,2
   21b10:	00c00084 	movi	r3,2
   21b14:	d8012585 	stb	zero,1174(sp)
   21b18:	003f8806 	br	2193c <___vfprintf_internal_r+0x5e4>
   21b1c:	ac800007 	ldb	r18,0(r21)
   21b20:	00c00a84 	movi	r3,42
   21b24:	adc00044 	addi	r23,r21,1
   21b28:	90c57526 	beq	r18,r3,23100 <___vfprintf_internal_r+0x1da8>
   21b2c:	95bff404 	addi	r22,r18,-48
   21b30:	0009883a 	mov	r4,zero
   21b34:	9d84ff36 	bltu	r19,r22,22f34 <___vfprintf_internal_r+0x1bdc>
   21b38:	01400284 	movi	r5,10
   21b3c:	00210b00 	call	210b0 <__mulsi3>
   21b40:	bc800007 	ldb	r18,0(r23)
   21b44:	b089883a 	add	r4,r22,r2
   21b48:	bdc00044 	addi	r23,r23,1
   21b4c:	95bff404 	addi	r22,r18,-48
   21b50:	9dbff92e 	bgeu	r19,r22,21b38 <___vfprintf_internal_r+0x7e0>
   21b54:	2007883a 	mov	r3,r4
   21b58:	20044316 	blt	r4,zero,22c68 <___vfprintf_internal_r+0x1910>
   21b5c:	b82b883a 	mov	r21,r23
   21b60:	003e5a06 	br	214cc <___vfprintf_internal_r+0x174>
   21b64:	ac800007 	ldb	r18,0(r21)
   21b68:	01001b04 	movi	r4,108
   21b6c:	a805883a 	mov	r2,r21
   21b70:	91045526 	beq	r18,r4,22cc8 <___vfprintf_internal_r+0x1970>
   21b74:	84000414 	ori	r16,r16,16
   21b78:	003e5306 	br	214c8 <___vfprintf_internal_r+0x170>
   21b7c:	8080080c 	andi	r2,r16,32
   21b80:	e013883a 	mov	r9,fp
   21b84:	10034026 	beq	r2,zero,22888 <___vfprintf_internal_r+0x1530>
   21b88:	d9012d17 	ldw	r4,1204(sp)
   21b8c:	20800017 	ldw	r2,0(r4)
   21b90:	d9012c17 	ldw	r4,1200(sp)
   21b94:	2007d7fa 	srai	r3,r4,31
   21b98:	d9012d17 	ldw	r4,1204(sp)
   21b9c:	10c00115 	stw	r3,4(r2)
   21ba0:	21000104 	addi	r4,r4,4
   21ba4:	d9012d15 	stw	r4,1204(sp)
   21ba8:	d9012c17 	ldw	r4,1200(sp)
   21bac:	11000015 	stw	r4,0(r2)
   21bb0:	003e1f06 	br	21430 <___vfprintf_internal_r+0xd8>
   21bb4:	d9012d17 	ldw	r4,1204(sp)
   21bb8:	21000017 	ldw	r4,0(r4)
   21bbc:	d9012e15 	stw	r4,1208(sp)
   21bc0:	d9012d17 	ldw	r4,1204(sp)
   21bc4:	20800104 	addi	r2,r4,4
   21bc8:	d9012e17 	ldw	r4,1208(sp)
   21bcc:	203ee716 	blt	r4,zero,2176c <___vfprintf_internal_r+0x414>
   21bd0:	d8812d15 	stw	r2,1204(sp)
   21bd4:	ac800007 	ldb	r18,0(r21)
   21bd8:	003e3b06 	br	214c8 <___vfprintf_internal_r+0x170>
   21bdc:	e013883a 	mov	r9,fp
   21be0:	1839883a 	mov	fp,r3
   21be4:	d8c12d17 	ldw	r3,1204(sp)
   21be8:	00800c04 	movi	r2,48
   21bec:	010001f4 	movhi	r4,7
   21bf0:	21328a04 	addi	r4,r4,-13784
   21bf4:	1dc00017 	ldw	r23,0(r3)
   21bf8:	18c00104 	addi	r3,r3,4
   21bfc:	d8812505 	stb	r2,1172(sp)
   21c00:	00801e04 	movi	r2,120
   21c04:	d8812545 	stb	r2,1173(sp)
   21c08:	d8c12d15 	stw	r3,1204(sp)
   21c0c:	002d883a 	mov	r22,zero
   21c10:	84000094 	ori	r16,r16,2
   21c14:	d9013615 	stw	r4,1240(sp)
   21c18:	00c00084 	movi	r3,2
   21c1c:	04801e04 	movi	r18,120
   21c20:	b805883a 	mov	r2,r23
   21c24:	d8012585 	stb	zero,1174(sp)
   21c28:	003f4406 	br	2193c <___vfprintf_internal_r+0x5e4>
   21c2c:	84000814 	ori	r16,r16,32
   21c30:	ac800007 	ldb	r18,0(r21)
   21c34:	003e2406 	br	214c8 <___vfprintf_internal_r+0x170>
   21c38:	d8812d17 	ldw	r2,1204(sp)
   21c3c:	d8012585 	stb	zero,1174(sp)
   21c40:	e013883a 	mov	r9,fp
   21c44:	14c00017 	ldw	r19,0(r2)
   21c48:	1839883a 	mov	fp,r3
   21c4c:	15c00104 	addi	r23,r2,4
   21c50:	98045526 	beq	r19,zero,22da8 <___vfprintf_internal_r+0x1a50>
   21c54:	9809883a 	mov	r4,r19
   21c58:	18043116 	blt	r3,zero,22d20 <___vfprintf_internal_r+0x19c8>
   21c5c:	000b883a 	mov	r5,zero
   21c60:	180d883a 	mov	r6,r3
   21c64:	da413c15 	stw	r9,1264(sp)
   21c68:	00266c00 	call	266c0 <memchr>
   21c6c:	da413c17 	ldw	r9,1264(sp)
   21c70:	10047a26 	beq	r2,zero,22e5c <___vfprintf_internal_r+0x1b04>
   21c74:	14c5c83a 	sub	r2,r2,r19
   21c78:	d8812b15 	stw	r2,1196(sp)
   21c7c:	e083d40e 	bge	fp,r2,22bd0 <___vfprintf_internal_r+0x1878>
   21c80:	df012815 	stw	fp,1184(sp)
   21c84:	e004e416 	blt	fp,zero,23018 <___vfprintf_internal_r+0x1cc0>
   21c88:	d8812583 	ldbu	r2,1174(sp)
   21c8c:	df012b15 	stw	fp,1196(sp)
   21c90:	ddc12d15 	stw	r23,1204(sp)
   21c94:	d8013115 	stw	zero,1220(sp)
   21c98:	003f3c06 	br	2198c <___vfprintf_internal_r+0x634>
   21c9c:	008001f4 	movhi	r2,7
   21ca0:	10b28a04 	addi	r2,r2,-13784
   21ca4:	d8813615 	stw	r2,1240(sp)
   21ca8:	8080080c 	andi	r2,r16,32
   21cac:	e013883a 	mov	r9,fp
   21cb0:	1839883a 	mov	fp,r3
   21cb4:	103f891e 	bne	r2,zero,21adc <___vfprintf_internal_r+0x784>
   21cb8:	8080040c 	andi	r2,r16,16
   21cbc:	1002c326 	beq	r2,zero,227cc <___vfprintf_internal_r+0x1474>
   21cc0:	d8812d17 	ldw	r2,1204(sp)
   21cc4:	002d883a 	mov	r22,zero
   21cc8:	15c00017 	ldw	r23,0(r2)
   21ccc:	10800104 	addi	r2,r2,4
   21cd0:	d8812d15 	stw	r2,1204(sp)
   21cd4:	003f8606 	br	21af0 <___vfprintf_internal_r+0x798>
   21cd8:	84001014 	ori	r16,r16,64
   21cdc:	ac800007 	ldb	r18,0(r21)
   21ce0:	003df906 	br	214c8 <___vfprintf_internal_r+0x170>
   21ce4:	d8812587 	ldb	r2,1174(sp)
   21ce8:	1002e51e 	bne	r2,zero,22880 <___vfprintf_internal_r+0x1528>
   21cec:	00800804 	movi	r2,32
   21cf0:	d8812585 	stb	r2,1174(sp)
   21cf4:	ac800007 	ldb	r18,0(r21)
   21cf8:	003df306 	br	214c8 <___vfprintf_internal_r+0x170>
   21cfc:	84000054 	ori	r16,r16,1
   21d00:	ac800007 	ldb	r18,0(r21)
   21d04:	003df006 	br	214c8 <___vfprintf_internal_r+0x170>
   21d08:	84002014 	ori	r16,r16,128
   21d0c:	ac800007 	ldb	r18,0(r21)
   21d10:	003ded06 	br	214c8 <___vfprintf_internal_r+0x170>
   21d14:	0009883a 	mov	r4,zero
   21d18:	95bff404 	addi	r22,r18,-48
   21d1c:	182f883a 	mov	r23,r3
   21d20:	01400284 	movi	r5,10
   21d24:	00210b00 	call	210b0 <__mulsi3>
   21d28:	ac800007 	ldb	r18,0(r21)
   21d2c:	1589883a 	add	r4,r2,r22
   21d30:	ad400044 	addi	r21,r21,1
   21d34:	95bff404 	addi	r22,r18,-48
   21d38:	9dbff92e 	bgeu	r19,r22,21d20 <___vfprintf_internal_r+0x9c8>
   21d3c:	b807883a 	mov	r3,r23
   21d40:	d9012e15 	stw	r4,1208(sp)
   21d44:	003de106 	br	214cc <___vfprintf_internal_r+0x174>
   21d48:	00800ac4 	movi	r2,43
   21d4c:	d8812585 	stb	r2,1174(sp)
   21d50:	ac800007 	ldb	r18,0(r21)
   21d54:	003ddc06 	br	214c8 <___vfprintf_internal_r+0x170>
   21d58:	d8c12d17 	ldw	r3,1204(sp)
   21d5c:	d9012d17 	ldw	r4,1204(sp)
   21d60:	e013883a 	mov	r9,fp
   21d64:	18800017 	ldw	r2,0(r3)
   21d68:	21000104 	addi	r4,r4,4
   21d6c:	00c00044 	movi	r3,1
   21d70:	d8c12815 	stw	r3,1184(sp)
   21d74:	d8012585 	stb	zero,1174(sp)
   21d78:	d8810405 	stb	r2,1040(sp)
   21d7c:	d9012d15 	stw	r4,1204(sp)
   21d80:	d8c12b15 	stw	r3,1196(sp)
   21d84:	dcc10404 	addi	r19,sp,1040
   21d88:	003dda06 	br	214f4 <___vfprintf_internal_r+0x19c>
   21d8c:	e013883a 	mov	r9,fp
   21d90:	1839883a 	mov	fp,r3
   21d94:	003ed806 	br	218f8 <___vfprintf_internal_r+0x5a0>
   21d98:	e013883a 	mov	r9,fp
   21d9c:	1839883a 	mov	fp,r3
   21da0:	003f2d06 	br	21a58 <___vfprintf_internal_r+0x700>
   21da4:	e013883a 	mov	r9,fp
   21da8:	1839883a 	mov	fp,r3
   21dac:	003f3806 	br	21a90 <___vfprintf_internal_r+0x738>
   21db0:	da011d17 	ldw	r8,1140(sp)
   21db4:	d8c11c17 	ldw	r3,1136(sp)
   21db8:	d8812587 	ldb	r2,1174(sp)
   21dbc:	10000b26 	beq	r2,zero,21dec <___vfprintf_internal_r+0xa94>
   21dc0:	d8812584 	addi	r2,sp,1174
   21dc4:	48800015 	stw	r2,0(r9)
   21dc8:	00800044 	movi	r2,1
   21dcc:	48800115 	stw	r2,4(r9)
   21dd0:	4091883a 	add	r8,r8,r2
   21dd4:	1887883a 	add	r3,r3,r2
   21dd8:	da011d15 	stw	r8,1140(sp)
   21ddc:	d8c11c15 	stw	r3,1136(sp)
   21de0:	008001c4 	movi	r2,7
   21de4:	10c18e16 	blt	r2,r3,22420 <___vfprintf_internal_r+0x10c8>
   21de8:	4a400204 	addi	r9,r9,8
   21dec:	d9012a17 	ldw	r4,1192(sp)
   21df0:	20000b26 	beq	r4,zero,21e20 <___vfprintf_internal_r+0xac8>
   21df4:	d8812504 	addi	r2,sp,1172
   21df8:	48800015 	stw	r2,0(r9)
   21dfc:	00800084 	movi	r2,2
   21e00:	48800115 	stw	r2,4(r9)
   21e04:	4091883a 	add	r8,r8,r2
   21e08:	18c00044 	addi	r3,r3,1
   21e0c:	da011d15 	stw	r8,1140(sp)
   21e10:	d8c11c15 	stw	r3,1136(sp)
   21e14:	008001c4 	movi	r2,7
   21e18:	10c17816 	blt	r2,r3,223fc <___vfprintf_internal_r+0x10a4>
   21e1c:	4a400204 	addi	r9,r9,8
   21e20:	d9012f17 	ldw	r4,1212(sp)
   21e24:	00802004 	movi	r2,128
   21e28:	2080fc26 	beq	r4,r2,2221c <___vfprintf_internal_r+0xec4>
   21e2c:	d8813117 	ldw	r2,1220(sp)
   21e30:	d9012b17 	ldw	r4,1196(sp)
   21e34:	112fc83a 	sub	r23,r2,r4
   21e38:	05c02a0e 	bge	zero,r23,21ee4 <___vfprintf_internal_r+0xb8c>
   21e3c:	07000404 	movi	fp,16
   21e40:	050001f4 	movhi	r20,7
   21e44:	a5329584 	addi	r20,r20,-13738
   21e48:	e5c01d0e 	bge	fp,r23,21ec0 <___vfprintf_internal_r+0xb68>
   21e4c:	dc812a15 	stw	r18,1192(sp)
   21e50:	058001c4 	movi	r22,7
   21e54:	a025883a 	mov	r18,r20
   21e58:	8029883a 	mov	r20,r16
   21e5c:	dc012917 	ldw	r16,1188(sp)
   21e60:	00000306 	br	21e70 <___vfprintf_internal_r+0xb18>
   21e64:	bdfffc04 	addi	r23,r23,-16
   21e68:	4a400204 	addi	r9,r9,8
   21e6c:	e5c0110e 	bge	fp,r23,21eb4 <___vfprintf_internal_r+0xb5c>
   21e70:	4c800015 	stw	r18,0(r9)
   21e74:	4f000115 	stw	fp,4(r9)
   21e78:	42000404 	addi	r8,r8,16
   21e7c:	18c00044 	addi	r3,r3,1
   21e80:	da011d15 	stw	r8,1140(sp)
   21e84:	d8c11c15 	stw	r3,1136(sp)
   21e88:	b0fff60e 	bge	r22,r3,21e64 <___vfprintf_internal_r+0xb0c>
   21e8c:	8809883a 	mov	r4,r17
   21e90:	800b883a 	mov	r5,r16
   21e94:	d9811b04 	addi	r6,sp,1132
   21e98:	00213240 	call	21324 <__sprint_r>
   21e9c:	103e741e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   21ea0:	bdfffc04 	addi	r23,r23,-16
   21ea4:	da011d17 	ldw	r8,1140(sp)
   21ea8:	d8c11c17 	ldw	r3,1136(sp)
   21eac:	da400404 	addi	r9,sp,16
   21eb0:	e5ffef16 	blt	fp,r23,21e70 <___vfprintf_internal_r+0xb18>
   21eb4:	a021883a 	mov	r16,r20
   21eb8:	9029883a 	mov	r20,r18
   21ebc:	dc812a17 	ldw	r18,1192(sp)
   21ec0:	4d000015 	stw	r20,0(r9)
   21ec4:	4dc00115 	stw	r23,4(r9)
   21ec8:	45d1883a 	add	r8,r8,r23
   21ecc:	18c00044 	addi	r3,r3,1
   21ed0:	da011d15 	stw	r8,1140(sp)
   21ed4:	d8c11c15 	stw	r3,1136(sp)
   21ed8:	008001c4 	movi	r2,7
   21edc:	10c13e16 	blt	r2,r3,223d8 <___vfprintf_internal_r+0x1080>
   21ee0:	4a400204 	addi	r9,r9,8
   21ee4:	8080400c 	andi	r2,r16,256
   21ee8:	1000831e 	bne	r2,zero,220f8 <___vfprintf_internal_r+0xda0>
   21eec:	d8812b17 	ldw	r2,1196(sp)
   21ef0:	4cc00015 	stw	r19,0(r9)
   21ef4:	48800115 	stw	r2,4(r9)
   21ef8:	4091883a 	add	r8,r8,r2
   21efc:	18c00044 	addi	r3,r3,1
   21f00:	da011d15 	stw	r8,1140(sp)
   21f04:	d8c11c15 	stw	r3,1136(sp)
   21f08:	008001c4 	movi	r2,7
   21f0c:	10c05316 	blt	r2,r3,2205c <___vfprintf_internal_r+0xd04>
   21f10:	4a400204 	addi	r9,r9,8
   21f14:	8400010c 	andi	r16,r16,4
   21f18:	80002e26 	beq	r16,zero,21fd4 <___vfprintf_internal_r+0xc7c>
   21f1c:	d8812e17 	ldw	r2,1208(sp)
   21f20:	d8c12817 	ldw	r3,1184(sp)
   21f24:	10e1c83a 	sub	r16,r2,r3
   21f28:	04002a0e 	bge	zero,r16,21fd4 <___vfprintf_internal_r+0xc7c>
   21f2c:	04800404 	movi	r18,16
   21f30:	d8c11c17 	ldw	r3,1136(sp)
   21f34:	05c001f4 	movhi	r23,7
   21f38:	bdf29184 	addi	r23,r23,-13754
   21f3c:	9400170e 	bge	r18,r16,21f9c <___vfprintf_internal_r+0xc44>
   21f40:	04c001c4 	movi	r19,7
   21f44:	dd012917 	ldw	r20,1188(sp)
   21f48:	00000306 	br	21f58 <___vfprintf_internal_r+0xc00>
   21f4c:	843ffc04 	addi	r16,r16,-16
   21f50:	4a400204 	addi	r9,r9,8
   21f54:	9400110e 	bge	r18,r16,21f9c <___vfprintf_internal_r+0xc44>
   21f58:	4dc00015 	stw	r23,0(r9)
   21f5c:	4c800115 	stw	r18,4(r9)
   21f60:	42000404 	addi	r8,r8,16
   21f64:	18c00044 	addi	r3,r3,1
   21f68:	da011d15 	stw	r8,1140(sp)
   21f6c:	d8c11c15 	stw	r3,1136(sp)
   21f70:	98fff60e 	bge	r19,r3,21f4c <___vfprintf_internal_r+0xbf4>
   21f74:	8809883a 	mov	r4,r17
   21f78:	a00b883a 	mov	r5,r20
   21f7c:	d9811b04 	addi	r6,sp,1132
   21f80:	00213240 	call	21324 <__sprint_r>
   21f84:	103e3a1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   21f88:	843ffc04 	addi	r16,r16,-16
   21f8c:	da011d17 	ldw	r8,1140(sp)
   21f90:	d8c11c17 	ldw	r3,1136(sp)
   21f94:	da400404 	addi	r9,sp,16
   21f98:	943fef16 	blt	r18,r16,21f58 <___vfprintf_internal_r+0xc00>
   21f9c:	4dc00015 	stw	r23,0(r9)
   21fa0:	4c000115 	stw	r16,4(r9)
   21fa4:	8211883a 	add	r8,r16,r8
   21fa8:	18c00044 	addi	r3,r3,1
   21fac:	da011d15 	stw	r8,1140(sp)
   21fb0:	d8c11c15 	stw	r3,1136(sp)
   21fb4:	008001c4 	movi	r2,7
   21fb8:	10c0060e 	bge	r2,r3,21fd4 <___vfprintf_internal_r+0xc7c>
   21fbc:	d9412917 	ldw	r5,1188(sp)
   21fc0:	8809883a 	mov	r4,r17
   21fc4:	d9811b04 	addi	r6,sp,1132
   21fc8:	00213240 	call	21324 <__sprint_r>
   21fcc:	103e281e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   21fd0:	da011d17 	ldw	r8,1140(sp)
   21fd4:	dd012817 	ldw	r20,1184(sp)
   21fd8:	d9012e17 	ldw	r4,1208(sp)
   21fdc:	a100010e 	bge	r20,r4,21fe4 <___vfprintf_internal_r+0xc8c>
   21fe0:	2029883a 	mov	r20,r4
   21fe4:	d8812c17 	ldw	r2,1200(sp)
   21fe8:	1505883a 	add	r2,r2,r20
   21fec:	d8812c15 	stw	r2,1200(sp)
   21ff0:	4000b91e 	bne	r8,zero,222d8 <___vfprintf_internal_r+0xf80>
   21ff4:	d8011c15 	stw	zero,1136(sp)
   21ff8:	a8800007 	ldb	r2,0(r21)
   21ffc:	da400404 	addi	r9,sp,16
   22000:	103d0d1e 	bne	r2,zero,21438 <___vfprintf_internal_r+0xe0>
   22004:	a825883a 	mov	r18,r21
   22008:	003d2306 	br	21498 <___vfprintf_internal_r+0x140>
   2200c:	d9412917 	ldw	r5,1188(sp)
   22010:	8809883a 	mov	r4,r17
   22014:	d9811b04 	addi	r6,sp,1132
   22018:	00213240 	call	21324 <__sprint_r>
   2201c:	103e141e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22020:	da011d17 	ldw	r8,1140(sp)
   22024:	da400404 	addi	r9,sp,16
   22028:	8080004c 	andi	r2,r16,1
   2202c:	103fb926 	beq	r2,zero,21f14 <___vfprintf_internal_r+0xbbc>
   22030:	d8c11c17 	ldw	r3,1136(sp)
   22034:	d9013717 	ldw	r4,1244(sp)
   22038:	00800044 	movi	r2,1
   2203c:	48800115 	stw	r2,4(r9)
   22040:	49000015 	stw	r4,0(r9)
   22044:	4091883a 	add	r8,r8,r2
   22048:	1887883a 	add	r3,r3,r2
   2204c:	da011d15 	stw	r8,1140(sp)
   22050:	d8c11c15 	stw	r3,1136(sp)
   22054:	008001c4 	movi	r2,7
   22058:	10ffad0e 	bge	r2,r3,21f10 <___vfprintf_internal_r+0xbb8>
   2205c:	d9412917 	ldw	r5,1188(sp)
   22060:	8809883a 	mov	r4,r17
   22064:	d9811b04 	addi	r6,sp,1132
   22068:	00213240 	call	21324 <__sprint_r>
   2206c:	103e001e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22070:	da400404 	addi	r9,sp,16
   22074:	da011d17 	ldw	r8,1140(sp)
   22078:	003fa606 	br	21f14 <___vfprintf_internal_r+0xbbc>
   2207c:	18803fcc 	andi	r2,r3,255
   22080:	00c00044 	movi	r3,1
   22084:	10c10126 	beq	r2,r3,2248c <___vfprintf_internal_r+0x1134>
   22088:	00c00084 	movi	r3,2
   2208c:	10c0ed26 	beq	r2,r3,22444 <___vfprintf_internal_r+0x10ec>
   22090:	d8c10dc4 	addi	r3,sp,1079
   22094:	b808d0fa 	srli	r4,r23,3
   22098:	b00a977a 	slli	r5,r22,29
   2209c:	b02cd0fa 	srli	r22,r22,3
   220a0:	bdc001cc 	andi	r23,r23,7
   220a4:	b8800c04 	addi	r2,r23,48
   220a8:	292eb03a 	or	r23,r5,r4
   220ac:	18800005 	stb	r2,0(r3)
   220b0:	bd88b03a 	or	r4,r23,r22
   220b4:	1827883a 	mov	r19,r3
   220b8:	18ffffc4 	addi	r3,r3,-1
   220bc:	203ff51e 	bne	r4,zero,22094 <___vfprintf_internal_r+0xd3c>
   220c0:	8100004c 	andi	r4,r16,1
   220c4:	980b883a 	mov	r5,r19
   220c8:	20000726 	beq	r4,zero,220e8 <___vfprintf_internal_r+0xd90>
   220cc:	10803fcc 	andi	r2,r2,255
   220d0:	1080201c 	xori	r2,r2,128
   220d4:	10bfe004 	addi	r2,r2,-128
   220d8:	01000c04 	movi	r4,48
   220dc:	11000226 	beq	r2,r4,220e8 <___vfprintf_internal_r+0xd90>
   220e0:	1827883a 	mov	r19,r3
   220e4:	293fffc5 	stb	r4,-1(r5)
   220e8:	d8812717 	ldw	r2,1180(sp)
   220ec:	14c5c83a 	sub	r2,r2,r19
   220f0:	d8812b15 	stw	r2,1196(sp)
   220f4:	003e1f06 	br	21974 <___vfprintf_internal_r+0x61c>
   220f8:	00801944 	movi	r2,101
   220fc:	14807c0e 	bge	r2,r18,222f0 <___vfprintf_internal_r+0xf98>
   22100:	d9013317 	ldw	r4,1228(sp)
   22104:	d9413417 	ldw	r5,1232(sp)
   22108:	000d883a 	mov	r6,zero
   2210c:	000f883a 	mov	r7,zero
   22110:	d8c13b15 	stw	r3,1260(sp)
   22114:	da013a15 	stw	r8,1256(sp)
   22118:	da413c15 	stw	r9,1264(sp)
   2211c:	0029e000 	call	29e00 <__eqdf2>
   22120:	d8c13b17 	ldw	r3,1260(sp)
   22124:	da013a17 	ldw	r8,1256(sp)
   22128:	da413c17 	ldw	r9,1264(sp)
   2212c:	1001001e 	bne	r2,zero,22530 <___vfprintf_internal_r+0x11d8>
   22130:	008001f4 	movhi	r2,7
   22134:	10b29104 	addi	r2,r2,-13756
   22138:	48800015 	stw	r2,0(r9)
   2213c:	00800044 	movi	r2,1
   22140:	48800115 	stw	r2,4(r9)
   22144:	4091883a 	add	r8,r8,r2
   22148:	1887883a 	add	r3,r3,r2
   2214c:	da011d15 	stw	r8,1140(sp)
   22150:	d8c11c15 	stw	r3,1136(sp)
   22154:	008001c4 	movi	r2,7
   22158:	10c20316 	blt	r2,r3,22968 <___vfprintf_internal_r+0x1610>
   2215c:	4a400204 	addi	r9,r9,8
   22160:	d8812417 	ldw	r2,1168(sp)
   22164:	d8c13217 	ldw	r3,1224(sp)
   22168:	10c00216 	blt	r2,r3,22174 <___vfprintf_internal_r+0xe1c>
   2216c:	8080004c 	andi	r2,r16,1
   22170:	103f6826 	beq	r2,zero,21f14 <___vfprintf_internal_r+0xbbc>
   22174:	d8c11c17 	ldw	r3,1136(sp)
   22178:	d9013717 	ldw	r4,1244(sp)
   2217c:	00800044 	movi	r2,1
   22180:	48800115 	stw	r2,4(r9)
   22184:	49000015 	stw	r4,0(r9)
   22188:	4091883a 	add	r8,r8,r2
   2218c:	1887883a 	add	r3,r3,r2
   22190:	da011d15 	stw	r8,1140(sp)
   22194:	d8c11c15 	stw	r3,1136(sp)
   22198:	008001c4 	movi	r2,7
   2219c:	10c2ce16 	blt	r2,r3,22cd8 <___vfprintf_internal_r+0x1980>
   221a0:	4a400204 	addi	r9,r9,8
   221a4:	d8813217 	ldw	r2,1224(sp)
   221a8:	14bfffc4 	addi	r18,r2,-1
   221ac:	04bf590e 	bge	zero,r18,21f14 <___vfprintf_internal_r+0xbbc>
   221b0:	04c00404 	movi	r19,16
   221b4:	d8c11c17 	ldw	r3,1136(sp)
   221b8:	050001f4 	movhi	r20,7
   221bc:	a5329584 	addi	r20,r20,-13738
   221c0:	9c818a0e 	bge	r19,r18,227ec <___vfprintf_internal_r+0x1494>
   221c4:	058001c4 	movi	r22,7
   221c8:	ddc12917 	ldw	r23,1188(sp)
   221cc:	00000306 	br	221dc <___vfprintf_internal_r+0xe84>
   221d0:	4a400204 	addi	r9,r9,8
   221d4:	94bffc04 	addi	r18,r18,-16
   221d8:	9c81840e 	bge	r19,r18,227ec <___vfprintf_internal_r+0x1494>
   221dc:	4d000015 	stw	r20,0(r9)
   221e0:	4cc00115 	stw	r19,4(r9)
   221e4:	42000404 	addi	r8,r8,16
   221e8:	18c00044 	addi	r3,r3,1
   221ec:	da011d15 	stw	r8,1140(sp)
   221f0:	d8c11c15 	stw	r3,1136(sp)
   221f4:	b0fff60e 	bge	r22,r3,221d0 <___vfprintf_internal_r+0xe78>
   221f8:	8809883a 	mov	r4,r17
   221fc:	b80b883a 	mov	r5,r23
   22200:	d9811b04 	addi	r6,sp,1132
   22204:	00213240 	call	21324 <__sprint_r>
   22208:	103d991e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   2220c:	da011d17 	ldw	r8,1140(sp)
   22210:	d8c11c17 	ldw	r3,1136(sp)
   22214:	da400404 	addi	r9,sp,16
   22218:	003fee06 	br	221d4 <___vfprintf_internal_r+0xe7c>
   2221c:	d8812e17 	ldw	r2,1208(sp)
   22220:	d9012817 	ldw	r4,1184(sp)
   22224:	112fc83a 	sub	r23,r2,r4
   22228:	05ff000e 	bge	zero,r23,21e2c <___vfprintf_internal_r+0xad4>
   2222c:	07000404 	movi	fp,16
   22230:	050001f4 	movhi	r20,7
   22234:	a5329584 	addi	r20,r20,-13738
   22238:	e5c01d0e 	bge	fp,r23,222b0 <___vfprintf_internal_r+0xf58>
   2223c:	dc812a15 	stw	r18,1192(sp)
   22240:	058001c4 	movi	r22,7
   22244:	a025883a 	mov	r18,r20
   22248:	8029883a 	mov	r20,r16
   2224c:	dc012917 	ldw	r16,1188(sp)
   22250:	00000306 	br	22260 <___vfprintf_internal_r+0xf08>
   22254:	bdfffc04 	addi	r23,r23,-16
   22258:	4a400204 	addi	r9,r9,8
   2225c:	e5c0110e 	bge	fp,r23,222a4 <___vfprintf_internal_r+0xf4c>
   22260:	4c800015 	stw	r18,0(r9)
   22264:	4f000115 	stw	fp,4(r9)
   22268:	42000404 	addi	r8,r8,16
   2226c:	18c00044 	addi	r3,r3,1
   22270:	da011d15 	stw	r8,1140(sp)
   22274:	d8c11c15 	stw	r3,1136(sp)
   22278:	b0fff60e 	bge	r22,r3,22254 <___vfprintf_internal_r+0xefc>
   2227c:	8809883a 	mov	r4,r17
   22280:	800b883a 	mov	r5,r16
   22284:	d9811b04 	addi	r6,sp,1132
   22288:	00213240 	call	21324 <__sprint_r>
   2228c:	103d781e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22290:	bdfffc04 	addi	r23,r23,-16
   22294:	da011d17 	ldw	r8,1140(sp)
   22298:	d8c11c17 	ldw	r3,1136(sp)
   2229c:	da400404 	addi	r9,sp,16
   222a0:	e5ffef16 	blt	fp,r23,22260 <___vfprintf_internal_r+0xf08>
   222a4:	a021883a 	mov	r16,r20
   222a8:	9029883a 	mov	r20,r18
   222ac:	dc812a17 	ldw	r18,1192(sp)
   222b0:	4d000015 	stw	r20,0(r9)
   222b4:	4dc00115 	stw	r23,4(r9)
   222b8:	45d1883a 	add	r8,r8,r23
   222bc:	18c00044 	addi	r3,r3,1
   222c0:	da011d15 	stw	r8,1140(sp)
   222c4:	d8c11c15 	stw	r3,1136(sp)
   222c8:	008001c4 	movi	r2,7
   222cc:	10c13616 	blt	r2,r3,227a8 <___vfprintf_internal_r+0x1450>
   222d0:	4a400204 	addi	r9,r9,8
   222d4:	003ed506 	br	21e2c <___vfprintf_internal_r+0xad4>
   222d8:	d9412917 	ldw	r5,1188(sp)
   222dc:	8809883a 	mov	r4,r17
   222e0:	d9811b04 	addi	r6,sp,1132
   222e4:	00213240 	call	21324 <__sprint_r>
   222e8:	103f4226 	beq	r2,zero,21ff4 <___vfprintf_internal_r+0xc9c>
   222ec:	003d6006 	br	21870 <___vfprintf_internal_r+0x518>
   222f0:	d9013217 	ldw	r4,1224(sp)
   222f4:	00800044 	movi	r2,1
   222f8:	4cc00015 	stw	r19,0(r9)
   222fc:	1101000e 	bge	r2,r4,22700 <___vfprintf_internal_r+0x13a8>
   22300:	00800044 	movi	r2,1
   22304:	48800115 	stw	r2,4(r9)
   22308:	4091883a 	add	r8,r8,r2
   2230c:	1887883a 	add	r3,r3,r2
   22310:	da011d15 	stw	r8,1140(sp)
   22314:	d8c11c15 	stw	r3,1136(sp)
   22318:	008001c4 	movi	r2,7
   2231c:	10c10c16 	blt	r2,r3,22750 <___vfprintf_internal_r+0x13f8>
   22320:	4a400204 	addi	r9,r9,8
   22324:	d8813717 	ldw	r2,1244(sp)
   22328:	48800015 	stw	r2,0(r9)
   2232c:	00800044 	movi	r2,1
   22330:	48800115 	stw	r2,4(r9)
   22334:	4091883a 	add	r8,r8,r2
   22338:	1887883a 	add	r3,r3,r2
   2233c:	da011d15 	stw	r8,1140(sp)
   22340:	d8c11c15 	stw	r3,1136(sp)
   22344:	008001c4 	movi	r2,7
   22348:	10c10a16 	blt	r2,r3,22774 <___vfprintf_internal_r+0x141c>
   2234c:	4c800204 	addi	r18,r9,8
   22350:	d9013317 	ldw	r4,1228(sp)
   22354:	d9413417 	ldw	r5,1232(sp)
   22358:	000d883a 	mov	r6,zero
   2235c:	000f883a 	mov	r7,zero
   22360:	d8c13b15 	stw	r3,1260(sp)
   22364:	da013a15 	stw	r8,1256(sp)
   22368:	0029e5c0 	call	29e5c <__nedf2>
   2236c:	d8c13b17 	ldw	r3,1260(sp)
   22370:	da013a17 	ldw	r8,1256(sp)
   22374:	1000ba26 	beq	r2,zero,22660 <___vfprintf_internal_r+0x1308>
   22378:	d9013217 	ldw	r4,1224(sp)
   2237c:	9cc00044 	addi	r19,r19,1
   22380:	94c00015 	stw	r19,0(r18)
   22384:	20bfffc4 	addi	r2,r4,-1
   22388:	90800115 	stw	r2,4(r18)
   2238c:	4091883a 	add	r8,r8,r2
   22390:	18c00044 	addi	r3,r3,1
   22394:	da011d15 	stw	r8,1140(sp)
   22398:	d8c11c15 	stw	r3,1136(sp)
   2239c:	008001c4 	movi	r2,7
   223a0:	10c0e216 	blt	r2,r3,2272c <___vfprintf_internal_r+0x13d4>
   223a4:	94800204 	addi	r18,r18,8
   223a8:	d9013517 	ldw	r4,1236(sp)
   223ac:	d8811fc4 	addi	r2,sp,1151
   223b0:	90800015 	stw	r2,0(r18)
   223b4:	91000115 	stw	r4,4(r18)
   223b8:	4111883a 	add	r8,r8,r4
   223bc:	18c00044 	addi	r3,r3,1
   223c0:	da011d15 	stw	r8,1140(sp)
   223c4:	d8c11c15 	stw	r3,1136(sp)
   223c8:	008001c4 	movi	r2,7
   223cc:	10ff2316 	blt	r2,r3,2205c <___vfprintf_internal_r+0xd04>
   223d0:	92400204 	addi	r9,r18,8
   223d4:	003ecf06 	br	21f14 <___vfprintf_internal_r+0xbbc>
   223d8:	d9412917 	ldw	r5,1188(sp)
   223dc:	8809883a 	mov	r4,r17
   223e0:	d9811b04 	addi	r6,sp,1132
   223e4:	00213240 	call	21324 <__sprint_r>
   223e8:	103d211e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   223ec:	da011d17 	ldw	r8,1140(sp)
   223f0:	d8c11c17 	ldw	r3,1136(sp)
   223f4:	da400404 	addi	r9,sp,16
   223f8:	003eba06 	br	21ee4 <___vfprintf_internal_r+0xb8c>
   223fc:	d9412917 	ldw	r5,1188(sp)
   22400:	8809883a 	mov	r4,r17
   22404:	d9811b04 	addi	r6,sp,1132
   22408:	00213240 	call	21324 <__sprint_r>
   2240c:	103d181e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22410:	da011d17 	ldw	r8,1140(sp)
   22414:	d8c11c17 	ldw	r3,1136(sp)
   22418:	da400404 	addi	r9,sp,16
   2241c:	003e8006 	br	21e20 <___vfprintf_internal_r+0xac8>
   22420:	d9412917 	ldw	r5,1188(sp)
   22424:	8809883a 	mov	r4,r17
   22428:	d9811b04 	addi	r6,sp,1132
   2242c:	00213240 	call	21324 <__sprint_r>
   22430:	103d0f1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22434:	da011d17 	ldw	r8,1140(sp)
   22438:	d8c11c17 	ldw	r3,1136(sp)
   2243c:	da400404 	addi	r9,sp,16
   22440:	003e6a06 	br	21dec <___vfprintf_internal_r+0xa94>
   22444:	d9413617 	ldw	r5,1240(sp)
   22448:	d8810dc4 	addi	r2,sp,1079
   2244c:	b8c003cc 	andi	r3,r23,15
   22450:	b008973a 	slli	r4,r22,28
   22454:	28c7883a 	add	r3,r5,r3
   22458:	b82ed13a 	srli	r23,r23,4
   2245c:	18c00003 	ldbu	r3,0(r3)
   22460:	b02cd13a 	srli	r22,r22,4
   22464:	25eeb03a 	or	r23,r4,r23
   22468:	10c00005 	stb	r3,0(r2)
   2246c:	bd86b03a 	or	r3,r23,r22
   22470:	1027883a 	mov	r19,r2
   22474:	10bfffc4 	addi	r2,r2,-1
   22478:	183ff41e 	bne	r3,zero,2244c <___vfprintf_internal_r+0x10f4>
   2247c:	003f1a06 	br	220e8 <___vfprintf_internal_r+0xd90>
   22480:	d8012b15 	stw	zero,1196(sp)
   22484:	dcc10e04 	addi	r19,sp,1080
   22488:	003d3a06 	br	21974 <___vfprintf_internal_r+0x61c>
   2248c:	b0025426 	beq	r22,zero,22de0 <___vfprintf_internal_r+0x1a88>
   22490:	b807883a 	mov	r3,r23
   22494:	d8810dc4 	addi	r2,sp,1079
   22498:	882f883a 	mov	r23,r17
   2249c:	04c00244 	movi	r19,9
   224a0:	8023883a 	mov	r17,r16
   224a4:	da412815 	stw	r9,1184(sp)
   224a8:	1821883a 	mov	r16,r3
   224ac:	8009883a 	mov	r4,r16
   224b0:	b00b883a 	mov	r5,r22
   224b4:	01800284 	movi	r6,10
   224b8:	000f883a 	mov	r7,zero
   224bc:	1029883a 	mov	r20,r2
   224c0:	0028f380 	call	28f38 <__umoddi3>
   224c4:	10800c04 	addi	r2,r2,48
   224c8:	8009883a 	mov	r4,r16
   224cc:	b00b883a 	mov	r5,r22
   224d0:	a0800005 	stb	r2,0(r20)
   224d4:	01800284 	movi	r6,10
   224d8:	000f883a 	mov	r7,zero
   224dc:	00288e80 	call	288e8 <__udivdi3>
   224e0:	1021883a 	mov	r16,r2
   224e4:	182d883a 	mov	r22,r3
   224e8:	a0bfffc4 	addi	r2,r20,-1
   224ec:	183fef1e 	bne	r3,zero,224ac <___vfprintf_internal_r+0x1154>
   224f0:	9c3fee36 	bltu	r19,r16,224ac <___vfprintf_internal_r+0x1154>
   224f4:	da412817 	ldw	r9,1184(sp)
   224f8:	8005883a 	mov	r2,r16
   224fc:	8821883a 	mov	r16,r17
   22500:	b823883a 	mov	r17,r23
   22504:	102f883a 	mov	r23,r2
   22508:	d8812717 	ldw	r2,1180(sp)
   2250c:	a4ffffc4 	addi	r19,r20,-1
   22510:	bdc00c04 	addi	r23,r23,48
   22514:	14c5c83a 	sub	r2,r2,r19
   22518:	a5ffffc5 	stb	r23,-1(r20)
   2251c:	d8812b15 	stw	r2,1196(sp)
   22520:	003d1406 	br	21974 <___vfprintf_internal_r+0x61c>
   22524:	00c00044 	movi	r3,1
   22528:	bd84b03a 	or	r2,r23,r22
   2252c:	003d0306 	br	2193c <___vfprintf_internal_r+0x5e4>
   22530:	dc812417 	ldw	r18,1168(sp)
   22534:	0481140e 	bge	zero,r18,22988 <___vfprintf_internal_r+0x1630>
   22538:	d9013217 	ldw	r4,1224(sp)
   2253c:	4cc00015 	stw	r19,0(r9)
   22540:	9100ec16 	blt	r18,r4,228f4 <___vfprintf_internal_r+0x159c>
   22544:	49000115 	stw	r4,4(r9)
   22548:	4111883a 	add	r8,r8,r4
   2254c:	18c00044 	addi	r3,r3,1
   22550:	da011d15 	stw	r8,1140(sp)
   22554:	d8c11c15 	stw	r3,1136(sp)
   22558:	008001c4 	movi	r2,7
   2255c:	10c23616 	blt	r2,r3,22e38 <___vfprintf_internal_r+0x1ae0>
   22560:	4a400204 	addi	r9,r9,8
   22564:	d8813217 	ldw	r2,1224(sp)
   22568:	90a5c83a 	sub	r18,r18,r2
   2256c:	04beae0e 	bge	zero,r18,22028 <___vfprintf_internal_r+0xcd0>
   22570:	04c00404 	movi	r19,16
   22574:	d8c11c17 	ldw	r3,1136(sp)
   22578:	050001f4 	movhi	r20,7
   2257c:	a5329584 	addi	r20,r20,-13738
   22580:	9c81dd0e 	bge	r19,r18,22cf8 <___vfprintf_internal_r+0x19a0>
   22584:	058001c4 	movi	r22,7
   22588:	ddc12917 	ldw	r23,1188(sp)
   2258c:	00000306 	br	2259c <___vfprintf_internal_r+0x1244>
   22590:	4a400204 	addi	r9,r9,8
   22594:	94bffc04 	addi	r18,r18,-16
   22598:	9c81d70e 	bge	r19,r18,22cf8 <___vfprintf_internal_r+0x19a0>
   2259c:	4d000015 	stw	r20,0(r9)
   225a0:	4cc00115 	stw	r19,4(r9)
   225a4:	42000404 	addi	r8,r8,16
   225a8:	18c00044 	addi	r3,r3,1
   225ac:	da011d15 	stw	r8,1140(sp)
   225b0:	d8c11c15 	stw	r3,1136(sp)
   225b4:	b0fff60e 	bge	r22,r3,22590 <___vfprintf_internal_r+0x1238>
   225b8:	8809883a 	mov	r4,r17
   225bc:	b80b883a 	mov	r5,r23
   225c0:	d9811b04 	addi	r6,sp,1132
   225c4:	00213240 	call	21324 <__sprint_r>
   225c8:	103ca91e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   225cc:	da011d17 	ldw	r8,1140(sp)
   225d0:	d8c11c17 	ldw	r3,1136(sp)
   225d4:	da400404 	addi	r9,sp,16
   225d8:	003fee06 	br	22594 <___vfprintf_internal_r+0x123c>
   225dc:	d9412917 	ldw	r5,1188(sp)
   225e0:	8809883a 	mov	r4,r17
   225e4:	d9811b04 	addi	r6,sp,1132
   225e8:	00213240 	call	21324 <__sprint_r>
   225ec:	103ca01e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   225f0:	da011d17 	ldw	r8,1140(sp)
   225f4:	d8c11c17 	ldw	r3,1136(sp)
   225f8:	da400404 	addi	r9,sp,16
   225fc:	003dee06 	br	21db8 <___vfprintf_internal_r+0xa60>
   22600:	00c00084 	movi	r3,2
   22604:	bd84b03a 	or	r2,r23,r22
   22608:	d8012585 	stb	zero,1174(sp)
   2260c:	003ccb06 	br	2193c <___vfprintf_internal_r+0x5e4>
   22610:	8080040c 	andi	r2,r16,16
   22614:	1000ae26 	beq	r2,zero,228d0 <___vfprintf_internal_r+0x1578>
   22618:	d9012d17 	ldw	r4,1204(sp)
   2261c:	25c00017 	ldw	r23,0(r4)
   22620:	21000104 	addi	r4,r4,4
   22624:	d9012d15 	stw	r4,1204(sp)
   22628:	b82dd7fa 	srai	r22,r23,31
   2262c:	b005883a 	mov	r2,r22
   22630:	003cb906 	br	21918 <___vfprintf_internal_r+0x5c0>
   22634:	8080040c 	andi	r2,r16,16
   22638:	10007026 	beq	r2,zero,227fc <___vfprintf_internal_r+0x14a4>
   2263c:	d8812d17 	ldw	r2,1204(sp)
   22640:	002d883a 	mov	r22,zero
   22644:	00c00044 	movi	r3,1
   22648:	15c00017 	ldw	r23,0(r2)
   2264c:	10800104 	addi	r2,r2,4
   22650:	d8812d15 	stw	r2,1204(sp)
   22654:	d8012585 	stb	zero,1174(sp)
   22658:	b805883a 	mov	r2,r23
   2265c:	003cb706 	br	2193c <___vfprintf_internal_r+0x5e4>
   22660:	d8813217 	ldw	r2,1224(sp)
   22664:	14ffffc4 	addi	r19,r2,-1
   22668:	04ff4f0e 	bge	zero,r19,223a8 <___vfprintf_internal_r+0x1050>
   2266c:	05800404 	movi	r22,16
   22670:	050001f4 	movhi	r20,7
   22674:	a5329584 	addi	r20,r20,-13738
   22678:	b4c0470e 	bge	r22,r19,22798 <___vfprintf_internal_r+0x1440>
   2267c:	05c001c4 	movi	r23,7
   22680:	df012917 	ldw	fp,1188(sp)
   22684:	00000306 	br	22694 <___vfprintf_internal_r+0x133c>
   22688:	94800204 	addi	r18,r18,8
   2268c:	9cfffc04 	addi	r19,r19,-16
   22690:	b4c0410e 	bge	r22,r19,22798 <___vfprintf_internal_r+0x1440>
   22694:	95000015 	stw	r20,0(r18)
   22698:	95800115 	stw	r22,4(r18)
   2269c:	42000404 	addi	r8,r8,16
   226a0:	18c00044 	addi	r3,r3,1
   226a4:	da011d15 	stw	r8,1140(sp)
   226a8:	d8c11c15 	stw	r3,1136(sp)
   226ac:	b8fff60e 	bge	r23,r3,22688 <___vfprintf_internal_r+0x1330>
   226b0:	8809883a 	mov	r4,r17
   226b4:	e00b883a 	mov	r5,fp
   226b8:	d9811b04 	addi	r6,sp,1132
   226bc:	00213240 	call	21324 <__sprint_r>
   226c0:	103c6b1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   226c4:	da011d17 	ldw	r8,1140(sp)
   226c8:	d8c11c17 	ldw	r3,1136(sp)
   226cc:	dc800404 	addi	r18,sp,16
   226d0:	003fee06 	br	2268c <___vfprintf_internal_r+0x1334>
   226d4:	8080040c 	andi	r2,r16,16
   226d8:	10005326 	beq	r2,zero,22828 <___vfprintf_internal_r+0x14d0>
   226dc:	d8c12d17 	ldw	r3,1204(sp)
   226e0:	002d883a 	mov	r22,zero
   226e4:	1dc00017 	ldw	r23,0(r3)
   226e8:	18c00104 	addi	r3,r3,4
   226ec:	d8c12d15 	stw	r3,1204(sp)
   226f0:	b805883a 	mov	r2,r23
   226f4:	0007883a 	mov	r3,zero
   226f8:	d8012585 	stb	zero,1174(sp)
   226fc:	003c8f06 	br	2193c <___vfprintf_internal_r+0x5e4>
   22700:	8088703a 	and	r4,r16,r2
   22704:	203efe1e 	bne	r4,zero,22300 <___vfprintf_internal_r+0xfa8>
   22708:	48800115 	stw	r2,4(r9)
   2270c:	42000044 	addi	r8,r8,1
   22710:	18c00044 	addi	r3,r3,1
   22714:	da011d15 	stw	r8,1140(sp)
   22718:	d8c11c15 	stw	r3,1136(sp)
   2271c:	008001c4 	movi	r2,7
   22720:	10c00216 	blt	r2,r3,2272c <___vfprintf_internal_r+0x13d4>
   22724:	4c800204 	addi	r18,r9,8
   22728:	003f1f06 	br	223a8 <___vfprintf_internal_r+0x1050>
   2272c:	d9412917 	ldw	r5,1188(sp)
   22730:	8809883a 	mov	r4,r17
   22734:	d9811b04 	addi	r6,sp,1132
   22738:	00213240 	call	21324 <__sprint_r>
   2273c:	103c4c1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22740:	dc800404 	addi	r18,sp,16
   22744:	da011d17 	ldw	r8,1140(sp)
   22748:	d8c11c17 	ldw	r3,1136(sp)
   2274c:	003f1606 	br	223a8 <___vfprintf_internal_r+0x1050>
   22750:	d9412917 	ldw	r5,1188(sp)
   22754:	8809883a 	mov	r4,r17
   22758:	d9811b04 	addi	r6,sp,1132
   2275c:	00213240 	call	21324 <__sprint_r>
   22760:	103c431e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22764:	da011d17 	ldw	r8,1140(sp)
   22768:	d8c11c17 	ldw	r3,1136(sp)
   2276c:	da400404 	addi	r9,sp,16
   22770:	003eec06 	br	22324 <___vfprintf_internal_r+0xfcc>
   22774:	d9412917 	ldw	r5,1188(sp)
   22778:	8809883a 	mov	r4,r17
   2277c:	d9811b04 	addi	r6,sp,1132
   22780:	00213240 	call	21324 <__sprint_r>
   22784:	103c3a1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22788:	da011d17 	ldw	r8,1140(sp)
   2278c:	d8c11c17 	ldw	r3,1136(sp)
   22790:	dc800404 	addi	r18,sp,16
   22794:	003eee06 	br	22350 <___vfprintf_internal_r+0xff8>
   22798:	95000015 	stw	r20,0(r18)
   2279c:	94c00115 	stw	r19,4(r18)
   227a0:	44d1883a 	add	r8,r8,r19
   227a4:	003efa06 	br	22390 <___vfprintf_internal_r+0x1038>
   227a8:	d9412917 	ldw	r5,1188(sp)
   227ac:	8809883a 	mov	r4,r17
   227b0:	d9811b04 	addi	r6,sp,1132
   227b4:	00213240 	call	21324 <__sprint_r>
   227b8:	103c2d1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   227bc:	da011d17 	ldw	r8,1140(sp)
   227c0:	d8c11c17 	ldw	r3,1136(sp)
   227c4:	da400404 	addi	r9,sp,16
   227c8:	003d9806 	br	21e2c <___vfprintf_internal_r+0xad4>
   227cc:	8080100c 	andi	r2,r16,64
   227d0:	10011626 	beq	r2,zero,22c2c <___vfprintf_internal_r+0x18d4>
   227d4:	d8c12d17 	ldw	r3,1204(sp)
   227d8:	002d883a 	mov	r22,zero
   227dc:	1dc0000b 	ldhu	r23,0(r3)
   227e0:	18c00104 	addi	r3,r3,4
   227e4:	d8c12d15 	stw	r3,1204(sp)
   227e8:	003cc106 	br	21af0 <___vfprintf_internal_r+0x798>
   227ec:	4d000015 	stw	r20,0(r9)
   227f0:	4c800115 	stw	r18,4(r9)
   227f4:	4491883a 	add	r8,r8,r18
   227f8:	003dc006 	br	21efc <___vfprintf_internal_r+0xba4>
   227fc:	8080100c 	andi	r2,r16,64
   22800:	10010126 	beq	r2,zero,22c08 <___vfprintf_internal_r+0x18b0>
   22804:	d8c12d17 	ldw	r3,1204(sp)
   22808:	002d883a 	mov	r22,zero
   2280c:	1dc0000b 	ldhu	r23,0(r3)
   22810:	18c00104 	addi	r3,r3,4
   22814:	d8c12d15 	stw	r3,1204(sp)
   22818:	b805883a 	mov	r2,r23
   2281c:	00c00044 	movi	r3,1
   22820:	d8012585 	stb	zero,1174(sp)
   22824:	003c4506 	br	2193c <___vfprintf_internal_r+0x5e4>
   22828:	8080100c 	andi	r2,r16,64
   2282c:	10010526 	beq	r2,zero,22c44 <___vfprintf_internal_r+0x18ec>
   22830:	d9012d17 	ldw	r4,1204(sp)
   22834:	002d883a 	mov	r22,zero
   22838:	0007883a 	mov	r3,zero
   2283c:	25c0000b 	ldhu	r23,0(r4)
   22840:	21000104 	addi	r4,r4,4
   22844:	d9012d15 	stw	r4,1204(sp)
   22848:	b805883a 	mov	r2,r23
   2284c:	d8012585 	stb	zero,1174(sp)
   22850:	003c3a06 	br	2193c <___vfprintf_internal_r+0x5e4>
   22854:	d8812d17 	ldw	r2,1204(sp)
   22858:	15800017 	ldw	r22,0(r2)
   2285c:	15000117 	ldw	r20,4(r2)
   22860:	10800204 	addi	r2,r2,8
   22864:	d8812d15 	stw	r2,1204(sp)
   22868:	dd813315 	stw	r22,1228(sp)
   2286c:	dd013415 	stw	r20,1232(sp)
   22870:	003c5906 	br	219d8 <___vfprintf_internal_r+0x680>
   22874:	00c00084 	movi	r3,2
   22878:	d8012585 	stb	zero,1174(sp)
   2287c:	003c2f06 	br	2193c <___vfprintf_internal_r+0x5e4>
   22880:	ac800007 	ldb	r18,0(r21)
   22884:	003b1006 	br	214c8 <___vfprintf_internal_r+0x170>
   22888:	8080040c 	andi	r2,r16,16
   2288c:	1000091e 	bne	r2,zero,228b4 <___vfprintf_internal_r+0x155c>
   22890:	8400100c 	andi	r16,r16,64
   22894:	80000726 	beq	r16,zero,228b4 <___vfprintf_internal_r+0x155c>
   22898:	d8c12d17 	ldw	r3,1204(sp)
   2289c:	d9012c17 	ldw	r4,1200(sp)
   228a0:	18800017 	ldw	r2,0(r3)
   228a4:	18c00104 	addi	r3,r3,4
   228a8:	d8c12d15 	stw	r3,1204(sp)
   228ac:	1100000d 	sth	r4,0(r2)
   228b0:	003adf06 	br	21430 <___vfprintf_internal_r+0xd8>
   228b4:	d8c12d17 	ldw	r3,1204(sp)
   228b8:	d9012c17 	ldw	r4,1200(sp)
   228bc:	18800017 	ldw	r2,0(r3)
   228c0:	18c00104 	addi	r3,r3,4
   228c4:	d8c12d15 	stw	r3,1204(sp)
   228c8:	11000015 	stw	r4,0(r2)
   228cc:	003ad806 	br	21430 <___vfprintf_internal_r+0xd8>
   228d0:	8080100c 	andi	r2,r16,64
   228d4:	1000c526 	beq	r2,zero,22bec <___vfprintf_internal_r+0x1894>
   228d8:	d8812d17 	ldw	r2,1204(sp)
   228dc:	15c0000f 	ldh	r23,0(r2)
   228e0:	10800104 	addi	r2,r2,4
   228e4:	d8812d15 	stw	r2,1204(sp)
   228e8:	b82dd7fa 	srai	r22,r23,31
   228ec:	b005883a 	mov	r2,r22
   228f0:	003c0906 	br	21918 <___vfprintf_internal_r+0x5c0>
   228f4:	4c800115 	stw	r18,4(r9)
   228f8:	9211883a 	add	r8,r18,r8
   228fc:	18c00044 	addi	r3,r3,1
   22900:	da011d15 	stw	r8,1140(sp)
   22904:	d8c11c15 	stw	r3,1136(sp)
   22908:	008001c4 	movi	r2,7
   2290c:	10c14016 	blt	r2,r3,22e10 <___vfprintf_internal_r+0x1ab8>
   22910:	4a400204 	addi	r9,r9,8
   22914:	d8813717 	ldw	r2,1244(sp)
   22918:	9ca7883a 	add	r19,r19,r18
   2291c:	48800015 	stw	r2,0(r9)
   22920:	00800044 	movi	r2,1
   22924:	48800115 	stw	r2,4(r9)
   22928:	4091883a 	add	r8,r8,r2
   2292c:	1887883a 	add	r3,r3,r2
   22930:	da011d15 	stw	r8,1140(sp)
   22934:	d8c11c15 	stw	r3,1136(sp)
   22938:	008001c4 	movi	r2,7
   2293c:	10c12c16 	blt	r2,r3,22df0 <___vfprintf_internal_r+0x1a98>
   22940:	4a400204 	addi	r9,r9,8
   22944:	d9013217 	ldw	r4,1224(sp)
   22948:	da011d17 	ldw	r8,1140(sp)
   2294c:	d8c11c17 	ldw	r3,1136(sp)
   22950:	24a5c83a 	sub	r18,r4,r18
   22954:	4cc00015 	stw	r19,0(r9)
   22958:	003fa506 	br	227f0 <___vfprintf_internal_r+0x1498>
   2295c:	04c001f4 	movhi	r19,7
   22960:	9cf28204 	addi	r19,r19,-13816
   22964:	003c2e06 	br	21a20 <___vfprintf_internal_r+0x6c8>
   22968:	d9412917 	ldw	r5,1188(sp)
   2296c:	8809883a 	mov	r4,r17
   22970:	d9811b04 	addi	r6,sp,1132
   22974:	00213240 	call	21324 <__sprint_r>
   22978:	103bbd1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   2297c:	da011d17 	ldw	r8,1140(sp)
   22980:	da400404 	addi	r9,sp,16
   22984:	003df606 	br	22160 <___vfprintf_internal_r+0xe08>
   22988:	008001f4 	movhi	r2,7
   2298c:	10b29104 	addi	r2,r2,-13756
   22990:	48800015 	stw	r2,0(r9)
   22994:	00800044 	movi	r2,1
   22998:	48800115 	stw	r2,4(r9)
   2299c:	4091883a 	add	r8,r8,r2
   229a0:	1887883a 	add	r3,r3,r2
   229a4:	da011d15 	stw	r8,1140(sp)
   229a8:	d8c11c15 	stw	r3,1136(sp)
   229ac:	008001c4 	movi	r2,7
   229b0:	10c0bc16 	blt	r2,r3,22ca4 <___vfprintf_internal_r+0x194c>
   229b4:	4a400204 	addi	r9,r9,8
   229b8:	9000041e 	bne	r18,zero,229cc <___vfprintf_internal_r+0x1674>
   229bc:	d8c13217 	ldw	r3,1224(sp)
   229c0:	1800021e 	bne	r3,zero,229cc <___vfprintf_internal_r+0x1674>
   229c4:	8080004c 	andi	r2,r16,1
   229c8:	103d5226 	beq	r2,zero,21f14 <___vfprintf_internal_r+0xbbc>
   229cc:	d8c11c17 	ldw	r3,1136(sp)
   229d0:	d9013717 	ldw	r4,1244(sp)
   229d4:	00800044 	movi	r2,1
   229d8:	48800115 	stw	r2,4(r9)
   229dc:	49000015 	stw	r4,0(r9)
   229e0:	4091883a 	add	r8,r8,r2
   229e4:	1887883a 	add	r3,r3,r2
   229e8:	da011d15 	stw	r8,1140(sp)
   229ec:	d8c11c15 	stw	r3,1136(sp)
   229f0:	008001c4 	movi	r2,7
   229f4:	10c14516 	blt	r2,r3,22f0c <___vfprintf_internal_r+0x1bb4>
   229f8:	4a400204 	addi	r9,r9,8
   229fc:	04a5c83a 	sub	r18,zero,r18
   22a00:	0480d70e 	bge	zero,r18,22d60 <___vfprintf_internal_r+0x1a08>
   22a04:	05800404 	movi	r22,16
   22a08:	050001f4 	movhi	r20,7
   22a0c:	a5329584 	addi	r20,r20,-13738
   22a10:	b480db0e 	bge	r22,r18,22d80 <___vfprintf_internal_r+0x1a28>
   22a14:	05c001c4 	movi	r23,7
   22a18:	df012917 	ldw	fp,1188(sp)
   22a1c:	00000306 	br	22a2c <___vfprintf_internal_r+0x16d4>
   22a20:	4a400204 	addi	r9,r9,8
   22a24:	94bffc04 	addi	r18,r18,-16
   22a28:	b480d50e 	bge	r22,r18,22d80 <___vfprintf_internal_r+0x1a28>
   22a2c:	4d000015 	stw	r20,0(r9)
   22a30:	4d800115 	stw	r22,4(r9)
   22a34:	42000404 	addi	r8,r8,16
   22a38:	18c00044 	addi	r3,r3,1
   22a3c:	da011d15 	stw	r8,1140(sp)
   22a40:	d8c11c15 	stw	r3,1136(sp)
   22a44:	b8fff60e 	bge	r23,r3,22a20 <___vfprintf_internal_r+0x16c8>
   22a48:	8809883a 	mov	r4,r17
   22a4c:	e00b883a 	mov	r5,fp
   22a50:	d9811b04 	addi	r6,sp,1132
   22a54:	00213240 	call	21324 <__sprint_r>
   22a58:	103b851e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22a5c:	da011d17 	ldw	r8,1140(sp)
   22a60:	d8c11c17 	ldw	r3,1136(sp)
   22a64:	da400404 	addi	r9,sp,16
   22a68:	003fee06 	br	22a24 <___vfprintf_internal_r+0x16cc>
   22a6c:	da413c15 	stw	r9,1264(sp)
   22a70:	00281e40 	call	281e4 <__isnand>
   22a74:	da413c17 	ldw	r9,1264(sp)
   22a78:	10007e1e 	bne	r2,zero,22c74 <___vfprintf_internal_r+0x191c>
   22a7c:	00bfffc4 	movi	r2,-1
   22a80:	e0816a26 	beq	fp,r2,2302c <___vfprintf_internal_r+0x1cd4>
   22a84:	008019c4 	movi	r2,103
   22a88:	90816526 	beq	r18,r2,23020 <___vfprintf_internal_r+0x1cc8>
   22a8c:	008011c4 	movi	r2,71
   22a90:	90816326 	beq	r18,r2,23020 <___vfprintf_internal_r+0x1cc8>
   22a94:	80c04014 	ori	r3,r16,256
   22a98:	d8c12a15 	stw	r3,1192(sp)
   22a9c:	a0016516 	blt	r20,zero,23034 <___vfprintf_internal_r+0x1cdc>
   22aa0:	d8012f05 	stb	zero,1212(sp)
   22aa4:	00801984 	movi	r2,102
   22aa8:	9080f226 	beq	r18,r2,22e74 <___vfprintf_internal_r+0x1b1c>
   22aac:	00801184 	movi	r2,70
   22ab0:	9080f026 	beq	r18,r2,22e74 <___vfprintf_internal_r+0x1b1c>
   22ab4:	00801944 	movi	r2,101
   22ab8:	90818d26 	beq	r18,r2,230f0 <___vfprintf_internal_r+0x1d98>
   22abc:	00801144 	movi	r2,69
   22ac0:	90818b26 	beq	r18,r2,230f0 <___vfprintf_internal_r+0x1d98>
   22ac4:	e02f883a 	mov	r23,fp
   22ac8:	d8812404 	addi	r2,sp,1168
   22acc:	d8800115 	stw	r2,4(sp)
   22ad0:	d8812304 	addi	r2,sp,1164
   22ad4:	d8800215 	stw	r2,8(sp)
   22ad8:	d8812204 	addi	r2,sp,1160
   22adc:	ddc00015 	stw	r23,0(sp)
   22ae0:	d8800315 	stw	r2,12(sp)
   22ae4:	8809883a 	mov	r4,r17
   22ae8:	b00b883a 	mov	r5,r22
   22aec:	a00d883a 	mov	r6,r20
   22af0:	01c00084 	movi	r7,2
   22af4:	da413c15 	stw	r9,1264(sp)
   22af8:	00237480 	call	23748 <_dtoa_r>
   22afc:	1027883a 	mov	r19,r2
   22b00:	008019c4 	movi	r2,103
   22b04:	da413c17 	ldw	r9,1264(sp)
   22b08:	9081951e 	bne	r18,r2,23160 <___vfprintf_internal_r+0x1e08>
   22b0c:	8080004c 	andi	r2,r16,1
   22b10:	10017926 	beq	r2,zero,230f8 <___vfprintf_internal_r+0x1da0>
   22b14:	00801184 	movi	r2,70
   22b18:	9dc7883a 	add	r3,r19,r23
   22b1c:	9080e626 	beq	r18,r2,22eb8 <___vfprintf_internal_r+0x1b60>
   22b20:	b009883a 	mov	r4,r22
   22b24:	a00b883a 	mov	r5,r20
   22b28:	000d883a 	mov	r6,zero
   22b2c:	000f883a 	mov	r7,zero
   22b30:	d8c13b15 	stw	r3,1260(sp)
   22b34:	da413c15 	stw	r9,1264(sp)
   22b38:	0029e000 	call	29e00 <__eqdf2>
   22b3c:	d8c13b17 	ldw	r3,1260(sp)
   22b40:	da413c17 	ldw	r9,1264(sp)
   22b44:	10000726 	beq	r2,zero,22b64 <___vfprintf_internal_r+0x180c>
   22b48:	d8812217 	ldw	r2,1160(sp)
   22b4c:	10c18a2e 	bgeu	r2,r3,23178 <___vfprintf_internal_r+0x1e20>
   22b50:	01000c04 	movi	r4,48
   22b54:	11000005 	stb	r4,0(r2)
   22b58:	10800044 	addi	r2,r2,1
   22b5c:	d8812215 	stw	r2,1160(sp)
   22b60:	10fffc1e 	bne	r2,r3,22b54 <___vfprintf_internal_r+0x17fc>
   22b64:	1cc7c83a 	sub	r3,r3,r19
   22b68:	d8c13215 	stw	r3,1224(sp)
   22b6c:	008019c4 	movi	r2,103
   22b70:	9080fa26 	beq	r18,r2,22f5c <___vfprintf_internal_r+0x1c04>
   22b74:	008011c4 	movi	r2,71
   22b78:	9080f826 	beq	r18,r2,22f5c <___vfprintf_internal_r+0x1c04>
   22b7c:	00801984 	movi	r2,102
   22b80:	90818e1e 	bne	r18,r2,231bc <___vfprintf_internal_r+0x1e64>
   22b84:	d8812417 	ldw	r2,1168(sp)
   22b88:	d8812b15 	stw	r2,1196(sp)
   22b8c:	00817c0e 	bge	zero,r2,23180 <___vfprintf_internal_r+0x1e28>
   22b90:	e000021e 	bne	fp,zero,22b9c <___vfprintf_internal_r+0x1844>
   22b94:	8400004c 	andi	r16,r16,1
   22b98:	80000426 	beq	r16,zero,22bac <___vfprintf_internal_r+0x1854>
   22b9c:	d8812b17 	ldw	r2,1196(sp)
   22ba0:	e2000044 	addi	r8,fp,1
   22ba4:	1205883a 	add	r2,r2,r8
   22ba8:	d8812b15 	stw	r2,1196(sp)
   22bac:	d8812815 	stw	r2,1184(sp)
   22bb0:	10010b16 	blt	r2,zero,22fe0 <___vfprintf_internal_r+0x1c88>
   22bb4:	ddc12f07 	ldb	r23,1212(sp)
   22bb8:	b800e426 	beq	r23,zero,22f4c <___vfprintf_internal_r+0x1bf4>
   22bbc:	00800b44 	movi	r2,45
   22bc0:	d8812585 	stb	r2,1174(sp)
   22bc4:	dc012a17 	ldw	r16,1192(sp)
   22bc8:	d8013115 	stw	zero,1220(sp)
   22bcc:	003b7306 	br	2199c <___vfprintf_internal_r+0x644>
   22bd0:	d8812b17 	ldw	r2,1196(sp)
   22bd4:	d8812815 	stw	r2,1184(sp)
   22bd8:	10005716 	blt	r2,zero,22d38 <___vfprintf_internal_r+0x19e0>
   22bdc:	d8812583 	ldbu	r2,1174(sp)
   22be0:	ddc12d15 	stw	r23,1204(sp)
   22be4:	d8013115 	stw	zero,1220(sp)
   22be8:	003b6806 	br	2198c <___vfprintf_internal_r+0x634>
   22bec:	d8c12d17 	ldw	r3,1204(sp)
   22bf0:	1dc00017 	ldw	r23,0(r3)
   22bf4:	18c00104 	addi	r3,r3,4
   22bf8:	d8c12d15 	stw	r3,1204(sp)
   22bfc:	b82dd7fa 	srai	r22,r23,31
   22c00:	b005883a 	mov	r2,r22
   22c04:	003b4406 	br	21918 <___vfprintf_internal_r+0x5c0>
   22c08:	d9012d17 	ldw	r4,1204(sp)
   22c0c:	002d883a 	mov	r22,zero
   22c10:	00c00044 	movi	r3,1
   22c14:	25c00017 	ldw	r23,0(r4)
   22c18:	21000104 	addi	r4,r4,4
   22c1c:	d9012d15 	stw	r4,1204(sp)
   22c20:	b805883a 	mov	r2,r23
   22c24:	d8012585 	stb	zero,1174(sp)
   22c28:	003b4406 	br	2193c <___vfprintf_internal_r+0x5e4>
   22c2c:	d9012d17 	ldw	r4,1204(sp)
   22c30:	002d883a 	mov	r22,zero
   22c34:	25c00017 	ldw	r23,0(r4)
   22c38:	21000104 	addi	r4,r4,4
   22c3c:	d9012d15 	stw	r4,1204(sp)
   22c40:	003bab06 	br	21af0 <___vfprintf_internal_r+0x798>
   22c44:	d8812d17 	ldw	r2,1204(sp)
   22c48:	002d883a 	mov	r22,zero
   22c4c:	0007883a 	mov	r3,zero
   22c50:	15c00017 	ldw	r23,0(r2)
   22c54:	10800104 	addi	r2,r2,4
   22c58:	d8812d15 	stw	r2,1204(sp)
   22c5c:	d8012585 	stb	zero,1174(sp)
   22c60:	b805883a 	mov	r2,r23
   22c64:	003b3506 	br	2193c <___vfprintf_internal_r+0x5e4>
   22c68:	00ffffc4 	movi	r3,-1
   22c6c:	b82b883a 	mov	r21,r23
   22c70:	003a1606 	br	214cc <___vfprintf_internal_r+0x174>
   22c74:	008011c4 	movi	r2,71
   22c78:	1480b116 	blt	r2,r18,22f40 <___vfprintf_internal_r+0x1be8>
   22c7c:	04c001f4 	movhi	r19,7
   22c80:	9cf28304 	addi	r19,r19,-13812
   22c84:	00c000c4 	movi	r3,3
   22c88:	00bfdfc4 	movi	r2,-129
   22c8c:	80a0703a 	and	r16,r16,r2
   22c90:	d8c12815 	stw	r3,1184(sp)
   22c94:	d8812583 	ldbu	r2,1174(sp)
   22c98:	d8c12b15 	stw	r3,1196(sp)
   22c9c:	d8013115 	stw	zero,1220(sp)
   22ca0:	003b3a06 	br	2198c <___vfprintf_internal_r+0x634>
   22ca4:	d9412917 	ldw	r5,1188(sp)
   22ca8:	8809883a 	mov	r4,r17
   22cac:	d9811b04 	addi	r6,sp,1132
   22cb0:	00213240 	call	21324 <__sprint_r>
   22cb4:	103aee1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22cb8:	dc812417 	ldw	r18,1168(sp)
   22cbc:	da011d17 	ldw	r8,1140(sp)
   22cc0:	da400404 	addi	r9,sp,16
   22cc4:	003f3c06 	br	229b8 <___vfprintf_internal_r+0x1660>
   22cc8:	ad400044 	addi	r21,r21,1
   22ccc:	84000814 	ori	r16,r16,32
   22cd0:	14800047 	ldb	r18,1(r2)
   22cd4:	0039fc06 	br	214c8 <___vfprintf_internal_r+0x170>
   22cd8:	d9412917 	ldw	r5,1188(sp)
   22cdc:	8809883a 	mov	r4,r17
   22ce0:	d9811b04 	addi	r6,sp,1132
   22ce4:	00213240 	call	21324 <__sprint_r>
   22ce8:	103ae11e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22cec:	da011d17 	ldw	r8,1140(sp)
   22cf0:	da400404 	addi	r9,sp,16
   22cf4:	003d2b06 	br	221a4 <___vfprintf_internal_r+0xe4c>
   22cf8:	4d000015 	stw	r20,0(r9)
   22cfc:	4c800115 	stw	r18,4(r9)
   22d00:	4491883a 	add	r8,r8,r18
   22d04:	18c00044 	addi	r3,r3,1
   22d08:	da011d15 	stw	r8,1140(sp)
   22d0c:	d8c11c15 	stw	r3,1136(sp)
   22d10:	008001c4 	movi	r2,7
   22d14:	10fcbd16 	blt	r2,r3,2200c <___vfprintf_internal_r+0xcb4>
   22d18:	4a400204 	addi	r9,r9,8
   22d1c:	003cc206 	br	22028 <___vfprintf_internal_r+0xcd0>
   22d20:	da413c15 	stw	r9,1264(sp)
   22d24:	00212980 	call	21298 <strlen>
   22d28:	d8812b15 	stw	r2,1196(sp)
   22d2c:	d8812815 	stw	r2,1184(sp)
   22d30:	da413c17 	ldw	r9,1264(sp)
   22d34:	103fa90e 	bge	r2,zero,22bdc <___vfprintf_internal_r+0x1884>
   22d38:	d8012815 	stw	zero,1184(sp)
   22d3c:	003fa706 	br	22bdc <___vfprintf_internal_r+0x1884>
   22d40:	d9412917 	ldw	r5,1188(sp)
   22d44:	8809883a 	mov	r4,r17
   22d48:	d9811b04 	addi	r6,sp,1132
   22d4c:	00213240 	call	21324 <__sprint_r>
   22d50:	103ac71e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22d54:	da011d17 	ldw	r8,1140(sp)
   22d58:	d8c11c17 	ldw	r3,1136(sp)
   22d5c:	da400404 	addi	r9,sp,16
   22d60:	d8813217 	ldw	r2,1224(sp)
   22d64:	4cc00015 	stw	r19,0(r9)
   22d68:	48800115 	stw	r2,4(r9)
   22d6c:	4091883a 	add	r8,r8,r2
   22d70:	003c6206 	br	21efc <___vfprintf_internal_r+0xba4>
   22d74:	00800b44 	movi	r2,45
   22d78:	d8812585 	stb	r2,1174(sp)
   22d7c:	003b2406 	br	21a10 <___vfprintf_internal_r+0x6b8>
   22d80:	4d000015 	stw	r20,0(r9)
   22d84:	4c800115 	stw	r18,4(r9)
   22d88:	4491883a 	add	r8,r8,r18
   22d8c:	18c00044 	addi	r3,r3,1
   22d90:	da011d15 	stw	r8,1140(sp)
   22d94:	d8c11c15 	stw	r3,1136(sp)
   22d98:	008001c4 	movi	r2,7
   22d9c:	10ffe816 	blt	r2,r3,22d40 <___vfprintf_internal_r+0x19e8>
   22da0:	4a400204 	addi	r9,r9,8
   22da4:	003fee06 	br	22d60 <___vfprintf_internal_r+0x1a08>
   22da8:	d8c12b15 	stw	r3,1196(sp)
   22dac:	00800184 	movi	r2,6
   22db0:	10c0062e 	bgeu	r2,r3,22dcc <___vfprintf_internal_r+0x1a74>
   22db4:	d8812b15 	stw	r2,1196(sp)
   22db8:	d8812815 	stw	r2,1184(sp)
   22dbc:	ddc12d15 	stw	r23,1204(sp)
   22dc0:	04c001f4 	movhi	r19,7
   22dc4:	9cf28f04 	addi	r19,r19,-13764
   22dc8:	0039ca06 	br	214f4 <___vfprintf_internal_r+0x19c>
   22dcc:	d8812b17 	ldw	r2,1196(sp)
   22dd0:	d8812815 	stw	r2,1184(sp)
   22dd4:	103ff90e 	bge	r2,zero,22dbc <___vfprintf_internal_r+0x1a64>
   22dd8:	d8012815 	stw	zero,1184(sp)
   22ddc:	003ff706 	br	22dbc <___vfprintf_internal_r+0x1a64>
   22de0:	00800244 	movi	r2,9
   22de4:	15fdaa36 	bltu	r2,r23,22490 <___vfprintf_internal_r+0x1138>
   22de8:	dd010e04 	addi	r20,sp,1080
   22dec:	003dc606 	br	22508 <___vfprintf_internal_r+0x11b0>
   22df0:	d9412917 	ldw	r5,1188(sp)
   22df4:	8809883a 	mov	r4,r17
   22df8:	d9811b04 	addi	r6,sp,1132
   22dfc:	00213240 	call	21324 <__sprint_r>
   22e00:	103a9b1e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22e04:	dc812417 	ldw	r18,1168(sp)
   22e08:	da400404 	addi	r9,sp,16
   22e0c:	003ecd06 	br	22944 <___vfprintf_internal_r+0x15ec>
   22e10:	d9412917 	ldw	r5,1188(sp)
   22e14:	8809883a 	mov	r4,r17
   22e18:	d9811b04 	addi	r6,sp,1132
   22e1c:	00213240 	call	21324 <__sprint_r>
   22e20:	103a931e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22e24:	dc812417 	ldw	r18,1168(sp)
   22e28:	da011d17 	ldw	r8,1140(sp)
   22e2c:	d8c11c17 	ldw	r3,1136(sp)
   22e30:	da400404 	addi	r9,sp,16
   22e34:	003eb706 	br	22914 <___vfprintf_internal_r+0x15bc>
   22e38:	d9412917 	ldw	r5,1188(sp)
   22e3c:	8809883a 	mov	r4,r17
   22e40:	d9811b04 	addi	r6,sp,1132
   22e44:	00213240 	call	21324 <__sprint_r>
   22e48:	103a891e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22e4c:	dc812417 	ldw	r18,1168(sp)
   22e50:	da011d17 	ldw	r8,1140(sp)
   22e54:	da400404 	addi	r9,sp,16
   22e58:	003dc206 	br	22564 <___vfprintf_internal_r+0x120c>
   22e5c:	df012815 	stw	fp,1184(sp)
   22e60:	d8812583 	ldbu	r2,1174(sp)
   22e64:	df012b15 	stw	fp,1196(sp)
   22e68:	ddc12d15 	stw	r23,1204(sp)
   22e6c:	d8013115 	stw	zero,1220(sp)
   22e70:	003ac606 	br	2198c <___vfprintf_internal_r+0x634>
   22e74:	d8812404 	addi	r2,sp,1168
   22e78:	d8800115 	stw	r2,4(sp)
   22e7c:	d8812304 	addi	r2,sp,1164
   22e80:	d8800215 	stw	r2,8(sp)
   22e84:	d8812204 	addi	r2,sp,1160
   22e88:	df000015 	stw	fp,0(sp)
   22e8c:	d8800315 	stw	r2,12(sp)
   22e90:	8809883a 	mov	r4,r17
   22e94:	b00b883a 	mov	r5,r22
   22e98:	a00d883a 	mov	r6,r20
   22e9c:	01c000c4 	movi	r7,3
   22ea0:	da413c15 	stw	r9,1264(sp)
   22ea4:	00237480 	call	23748 <_dtoa_r>
   22ea8:	da413c17 	ldw	r9,1264(sp)
   22eac:	1027883a 	mov	r19,r2
   22eb0:	1707883a 	add	r3,r2,fp
   22eb4:	e02f883a 	mov	r23,fp
   22eb8:	99000007 	ldb	r4,0(r19)
   22ebc:	00800c04 	movi	r2,48
   22ec0:	20800326 	beq	r4,r2,22ed0 <___vfprintf_internal_r+0x1b78>
   22ec4:	da812417 	ldw	r10,1168(sp)
   22ec8:	1a87883a 	add	r3,r3,r10
   22ecc:	003f1406 	br	22b20 <___vfprintf_internal_r+0x17c8>
   22ed0:	b009883a 	mov	r4,r22
   22ed4:	a00b883a 	mov	r5,r20
   22ed8:	000d883a 	mov	r6,zero
   22edc:	000f883a 	mov	r7,zero
   22ee0:	d8c13b15 	stw	r3,1260(sp)
   22ee4:	da413c15 	stw	r9,1264(sp)
   22ee8:	0029e5c0 	call	29e5c <__nedf2>
   22eec:	d8c13b17 	ldw	r3,1260(sp)
   22ef0:	da413c17 	ldw	r9,1264(sp)
   22ef4:	103ff326 	beq	r2,zero,22ec4 <___vfprintf_internal_r+0x1b6c>
   22ef8:	00800044 	movi	r2,1
   22efc:	15d5c83a 	sub	r10,r2,r23
   22f00:	da812415 	stw	r10,1168(sp)
   22f04:	1a87883a 	add	r3,r3,r10
   22f08:	003f0506 	br	22b20 <___vfprintf_internal_r+0x17c8>
   22f0c:	d9412917 	ldw	r5,1188(sp)
   22f10:	8809883a 	mov	r4,r17
   22f14:	d9811b04 	addi	r6,sp,1132
   22f18:	00213240 	call	21324 <__sprint_r>
   22f1c:	103a541e 	bne	r2,zero,21870 <___vfprintf_internal_r+0x518>
   22f20:	dc812417 	ldw	r18,1168(sp)
   22f24:	da011d17 	ldw	r8,1140(sp)
   22f28:	d8c11c17 	ldw	r3,1136(sp)
   22f2c:	da400404 	addi	r9,sp,16
   22f30:	003eb206 	br	229fc <___vfprintf_internal_r+0x16a4>
   22f34:	b82b883a 	mov	r21,r23
   22f38:	0007883a 	mov	r3,zero
   22f3c:	00396306 	br	214cc <___vfprintf_internal_r+0x174>
   22f40:	04c001f4 	movhi	r19,7
   22f44:	9cf28404 	addi	r19,r19,-13808
   22f48:	003f4e06 	br	22c84 <___vfprintf_internal_r+0x192c>
   22f4c:	d8812583 	ldbu	r2,1174(sp)
   22f50:	dc012a17 	ldw	r16,1192(sp)
   22f54:	d8013115 	stw	zero,1220(sp)
   22f58:	003a8c06 	br	2198c <___vfprintf_internal_r+0x634>
   22f5c:	d8812417 	ldw	r2,1168(sp)
   22f60:	d8812b15 	stw	r2,1196(sp)
   22f64:	1029883a 	mov	r20,r2
   22f68:	00bfff44 	movi	r2,-3
   22f6c:	a0800116 	blt	r20,r2,22f74 <___vfprintf_internal_r+0x1c1c>
   22f70:	e5001d0e 	bge	fp,r20,22fe8 <___vfprintf_internal_r+0x1c90>
   22f74:	94bfff84 	addi	r18,r18,-2
   22f78:	a53fffc4 	addi	r20,r20,-1
   22f7c:	dd012415 	stw	r20,1168(sp)
   22f80:	dc811fc5 	stb	r18,1151(sp)
   22f84:	a0007216 	blt	r20,zero,23150 <___vfprintf_internal_r+0x1df8>
   22f88:	00800ac4 	movi	r2,43
   22f8c:	d8812005 	stb	r2,1152(sp)
   22f90:	00800244 	movi	r2,9
   22f94:	15003516 	blt	r2,r20,2306c <___vfprintf_internal_r+0x1d14>
   22f98:	00800c04 	movi	r2,48
   22f9c:	a5000c04 	addi	r20,r20,48
   22fa0:	d8812045 	stb	r2,1153(sp)
   22fa4:	dd012085 	stb	r20,1154(sp)
   22fa8:	d8c120c4 	addi	r3,sp,1155
   22fac:	d8811fc4 	addi	r2,sp,1151
   22fb0:	1885c83a 	sub	r2,r3,r2
   22fb4:	d8c13217 	ldw	r3,1224(sp)
   22fb8:	d8813515 	stw	r2,1236(sp)
   22fbc:	1885883a 	add	r2,r3,r2
   22fc0:	d8812b15 	stw	r2,1196(sp)
   22fc4:	00800044 	movi	r2,1
   22fc8:	10c0580e 	bge	r2,r3,2312c <___vfprintf_internal_r+0x1dd4>
   22fcc:	d8812b17 	ldw	r2,1196(sp)
   22fd0:	10800044 	addi	r2,r2,1
   22fd4:	d8812b15 	stw	r2,1196(sp)
   22fd8:	d8812815 	stw	r2,1184(sp)
   22fdc:	103ef50e 	bge	r2,zero,22bb4 <___vfprintf_internal_r+0x185c>
   22fe0:	d8012815 	stw	zero,1184(sp)
   22fe4:	003ef306 	br	22bb4 <___vfprintf_internal_r+0x185c>
   22fe8:	d8812b17 	ldw	r2,1196(sp)
   22fec:	d8c13217 	ldw	r3,1224(sp)
   22ff0:	10c01416 	blt	r2,r3,23044 <___vfprintf_internal_r+0x1cec>
   22ff4:	8400004c 	andi	r16,r16,1
   22ff8:	80000326 	beq	r16,zero,23008 <___vfprintf_internal_r+0x1cb0>
   22ffc:	d8812b17 	ldw	r2,1196(sp)
   23000:	10800044 	addi	r2,r2,1
   23004:	d8812b15 	stw	r2,1196(sp)
   23008:	d8812815 	stw	r2,1184(sp)
   2300c:	10001416 	blt	r2,zero,23060 <___vfprintf_internal_r+0x1d08>
   23010:	048019c4 	movi	r18,103
   23014:	003ee706 	br	22bb4 <___vfprintf_internal_r+0x185c>
   23018:	d8012815 	stw	zero,1184(sp)
   2301c:	003b1a06 	br	21c88 <___vfprintf_internal_r+0x930>
   23020:	e03e9c1e 	bne	fp,zero,22a94 <___vfprintf_internal_r+0x173c>
   23024:	07000044 	movi	fp,1
   23028:	003e9a06 	br	22a94 <___vfprintf_internal_r+0x173c>
   2302c:	07000184 	movi	fp,6
   23030:	003e9806 	br	22a94 <___vfprintf_internal_r+0x173c>
   23034:	00c00b44 	movi	r3,45
   23038:	a520003c 	xorhi	r20,r20,32768
   2303c:	d8c12f05 	stb	r3,1212(sp)
   23040:	003e9806 	br	22aa4 <___vfprintf_internal_r+0x174c>
   23044:	05003f0e 	bge	zero,r20,23144 <___vfprintf_internal_r+0x1dec>
   23048:	05000044 	movi	r20,1
   2304c:	d8c13217 	ldw	r3,1224(sp)
   23050:	a0e9883a 	add	r20,r20,r3
   23054:	dd012b15 	stw	r20,1196(sp)
   23058:	dd012815 	stw	r20,1184(sp)
   2305c:	a03fec0e 	bge	r20,zero,23010 <___vfprintf_internal_r+0x1cb8>
   23060:	d8012815 	stw	zero,1184(sp)
   23064:	048019c4 	movi	r18,103
   23068:	003ed206 	br	22bb4 <___vfprintf_internal_r+0x185c>
   2306c:	d8c11f84 	addi	r3,sp,1150
   23070:	102f883a 	mov	r23,r2
   23074:	4839883a 	mov	fp,r9
   23078:	a009883a 	mov	r4,r20
   2307c:	01400284 	movi	r5,10
   23080:	182d883a 	mov	r22,r3
   23084:	002a3640 	call	2a364 <__modsi3>
   23088:	10800c04 	addi	r2,r2,48
   2308c:	a009883a 	mov	r4,r20
   23090:	b0800005 	stb	r2,0(r22)
   23094:	01400284 	movi	r5,10
   23098:	002a3140 	call	2a314 <__divsi3>
   2309c:	1029883a 	mov	r20,r2
   230a0:	b0ffffc4 	addi	r3,r22,-1
   230a4:	b8bff416 	blt	r23,r2,23078 <___vfprintf_internal_r+0x1d20>
   230a8:	11400c04 	addi	r5,r2,48
   230ac:	b17fffc5 	stb	r5,-1(r22)
   230b0:	d8811fc4 	addi	r2,sp,1151
   230b4:	e013883a 	mov	r9,fp
   230b8:	18803e2e 	bgeu	r3,r2,231b4 <___vfprintf_internal_r+0x1e5c>
   230bc:	b007883a 	mov	r3,r22
   230c0:	d9012044 	addi	r4,sp,1153
   230c4:	00000206 	br	230d0 <___vfprintf_internal_r+0x1d78>
   230c8:	19400003 	ldbu	r5,0(r3)
   230cc:	18c00044 	addi	r3,r3,1
   230d0:	21400005 	stb	r5,0(r4)
   230d4:	21000044 	addi	r4,r4,1
   230d8:	10fffb1e 	bne	r2,r3,230c8 <___vfprintf_internal_r+0x1d70>
   230dc:	d8c12004 	addi	r3,sp,1152
   230e0:	1d87c83a 	sub	r3,r3,r22
   230e4:	d9012044 	addi	r4,sp,1153
   230e8:	20c7883a 	add	r3,r4,r3
   230ec:	003fb006 	br	22fb0 <___vfprintf_internal_r+0x1c58>
   230f0:	e5c00044 	addi	r23,fp,1
   230f4:	003e7406 	br	22ac8 <___vfprintf_internal_r+0x1770>
   230f8:	d8c12217 	ldw	r3,1160(sp)
   230fc:	003e9906 	br	22b64 <___vfprintf_internal_r+0x180c>
   23100:	d9012d17 	ldw	r4,1204(sp)
   23104:	ac800043 	ldbu	r18,1(r21)
   23108:	b82b883a 	mov	r21,r23
   2310c:	20c00017 	ldw	r3,0(r4)
   23110:	20800104 	addi	r2,r4,4
   23114:	d8812d15 	stw	r2,1204(sp)
   23118:	18002116 	blt	r3,zero,231a0 <___vfprintf_internal_r+0x1e48>
   2311c:	94803fcc 	andi	r18,r18,255
   23120:	9480201c 	xori	r18,r18,128
   23124:	94bfe004 	addi	r18,r18,-128
   23128:	0038e706 	br	214c8 <___vfprintf_internal_r+0x170>
   2312c:	80a0703a 	and	r16,r16,r2
   23130:	803fa61e 	bne	r16,zero,22fcc <___vfprintf_internal_r+0x1c74>
   23134:	d8812b17 	ldw	r2,1196(sp)
   23138:	d8812815 	stw	r2,1184(sp)
   2313c:	103e9d0e 	bge	r2,zero,22bb4 <___vfprintf_internal_r+0x185c>
   23140:	003fa706 	br	22fe0 <___vfprintf_internal_r+0x1c88>
   23144:	00800084 	movi	r2,2
   23148:	1529c83a 	sub	r20,r2,r20
   2314c:	003fbf06 	br	2304c <___vfprintf_internal_r+0x1cf4>
   23150:	00800b44 	movi	r2,45
   23154:	0529c83a 	sub	r20,zero,r20
   23158:	d8812005 	stb	r2,1152(sp)
   2315c:	003f8c06 	br	22f90 <___vfprintf_internal_r+0x1c38>
   23160:	008011c4 	movi	r2,71
   23164:	90be6926 	beq	r18,r2,22b0c <___vfprintf_internal_r+0x17b4>
   23168:	003e6a06 	br	22b14 <___vfprintf_internal_r+0x17bc>
   2316c:	00bfffc4 	movi	r2,-1
   23170:	d8812c15 	stw	r2,1200(sp)
   23174:	0039ad06 	br	2182c <___vfprintf_internal_r+0x4d4>
   23178:	1007883a 	mov	r3,r2
   2317c:	003e7906 	br	22b64 <___vfprintf_internal_r+0x180c>
   23180:	e000021e 	bne	fp,zero,2318c <___vfprintf_internal_r+0x1e34>
   23184:	8400004c 	andi	r16,r16,1
   23188:	80000e26 	beq	r16,zero,231c4 <___vfprintf_internal_r+0x1e6c>
   2318c:	e7000084 	addi	fp,fp,2
   23190:	df012b15 	stw	fp,1196(sp)
   23194:	df012815 	stw	fp,1184(sp)
   23198:	e03e860e 	bge	fp,zero,22bb4 <___vfprintf_internal_r+0x185c>
   2319c:	003f9006 	br	22fe0 <___vfprintf_internal_r+0x1c88>
   231a0:	94803fcc 	andi	r18,r18,255
   231a4:	9480201c 	xori	r18,r18,128
   231a8:	00ffffc4 	movi	r3,-1
   231ac:	94bfe004 	addi	r18,r18,-128
   231b0:	0038c506 	br	214c8 <___vfprintf_internal_r+0x170>
   231b4:	d8c12044 	addi	r3,sp,1153
   231b8:	003f7d06 	br	22fb0 <___vfprintf_internal_r+0x1c58>
   231bc:	dd012417 	ldw	r20,1168(sp)
   231c0:	003f6d06 	br	22f78 <___vfprintf_internal_r+0x1c20>
   231c4:	00c00044 	movi	r3,1
   231c8:	d8c12815 	stw	r3,1184(sp)
   231cc:	d8c12b15 	stw	r3,1196(sp)
   231d0:	003e7806 	br	22bb4 <___vfprintf_internal_r+0x185c>

000231d4 <__vfprintf_internal>:
   231d4:	008001f4 	movhi	r2,7
   231d8:	10b99104 	addi	r2,r2,-6588
   231dc:	2007883a 	mov	r3,r4
   231e0:	11000017 	ldw	r4,0(r2)
   231e4:	2805883a 	mov	r2,r5
   231e8:	300f883a 	mov	r7,r6
   231ec:	180b883a 	mov	r5,r3
   231f0:	100d883a 	mov	r6,r2
   231f4:	00213581 	jmpi	21358 <___vfprintf_internal_r>

000231f8 <__swsetup_r>:
   231f8:	008001f4 	movhi	r2,7
   231fc:	10b99104 	addi	r2,r2,-6588
   23200:	10800017 	ldw	r2,0(r2)
   23204:	defffd04 	addi	sp,sp,-12
   23208:	dc400115 	stw	r17,4(sp)
   2320c:	dc000015 	stw	r16,0(sp)
   23210:	dfc00215 	stw	ra,8(sp)
   23214:	2023883a 	mov	r17,r4
   23218:	2821883a 	mov	r16,r5
   2321c:	10000226 	beq	r2,zero,23228 <__swsetup_r+0x30>
   23220:	10c00e17 	ldw	r3,56(r2)
   23224:	18003d26 	beq	r3,zero,2331c <__swsetup_r+0x124>
   23228:	8080030b 	ldhu	r2,12(r16)
   2322c:	10c0020c 	andi	r3,r2,8
   23230:	18ffffcc 	andi	r3,r3,65535
   23234:	18e0001c 	xori	r3,r3,32768
   23238:	18e00004 	addi	r3,r3,-32768
   2323c:	18001226 	beq	r3,zero,23288 <__swsetup_r+0x90>
   23240:	80c00417 	ldw	r3,16(r16)
   23244:	18001f26 	beq	r3,zero,232c4 <__swsetup_r+0xcc>
   23248:	1100004c 	andi	r4,r2,1
   2324c:	2000261e 	bne	r4,zero,232e8 <__swsetup_r+0xf0>
   23250:	1080008c 	andi	r2,r2,2
   23254:	10bfffcc 	andi	r2,r2,65535
   23258:	10a0001c 	xori	r2,r2,32768
   2325c:	10a00004 	addi	r2,r2,-32768
   23260:	1000311e 	bne	r2,zero,23328 <__swsetup_r+0x130>
   23264:	80800517 	ldw	r2,20(r16)
   23268:	80800215 	stw	r2,8(r16)
   2326c:	18002326 	beq	r3,zero,232fc <__swsetup_r+0x104>
   23270:	0005883a 	mov	r2,zero
   23274:	dfc00217 	ldw	ra,8(sp)
   23278:	dc400117 	ldw	r17,4(sp)
   2327c:	dc000017 	ldw	r16,0(sp)
   23280:	dec00304 	addi	sp,sp,12
   23284:	f800283a 	ret
   23288:	10c0040c 	andi	r3,r2,16
   2328c:	18ffffcc 	andi	r3,r3,65535
   23290:	18e0001c 	xori	r3,r3,32768
   23294:	18e00004 	addi	r3,r3,-32768
   23298:	18001e26 	beq	r3,zero,23314 <__swsetup_r+0x11c>
   2329c:	10c0010c 	andi	r3,r2,4
   232a0:	18ffffcc 	andi	r3,r3,65535
   232a4:	18e0001c 	xori	r3,r3,32768
   232a8:	18e00004 	addi	r3,r3,-32768
   232ac:	1800211e 	bne	r3,zero,23334 <__swsetup_r+0x13c>
   232b0:	80c00417 	ldw	r3,16(r16)
   232b4:	11400214 	ori	r5,r2,8
   232b8:	8140030d 	sth	r5,12(r16)
   232bc:	2805883a 	mov	r2,r5
   232c0:	183fe11e 	bne	r3,zero,23248 <__swsetup_r+0x50>
   232c4:	1140a00c 	andi	r5,r2,640
   232c8:	01008004 	movi	r4,512
   232cc:	293fde26 	beq	r5,r4,23248 <__swsetup_r+0x50>
   232d0:	8809883a 	mov	r4,r17
   232d4:	800b883a 	mov	r5,r16
   232d8:	0025d940 	call	25d94 <__smakebuf_r>
   232dc:	8080030b 	ldhu	r2,12(r16)
   232e0:	80c00417 	ldw	r3,16(r16)
   232e4:	003fd806 	br	23248 <__swsetup_r+0x50>
   232e8:	80800517 	ldw	r2,20(r16)
   232ec:	80000215 	stw	zero,8(r16)
   232f0:	0085c83a 	sub	r2,zero,r2
   232f4:	80800615 	stw	r2,24(r16)
   232f8:	183fdd1e 	bne	r3,zero,23270 <__swsetup_r+0x78>
   232fc:	8080030b 	ldhu	r2,12(r16)
   23300:	1080200c 	andi	r2,r2,128
   23304:	10bfffcc 	andi	r2,r2,65535
   23308:	10a0001c 	xori	r2,r2,32768
   2330c:	10a00004 	addi	r2,r2,-32768
   23310:	103fd826 	beq	r2,zero,23274 <__swsetup_r+0x7c>
   23314:	00bfffc4 	movi	r2,-1
   23318:	003fd606 	br	23274 <__swsetup_r+0x7c>
   2331c:	1009883a 	mov	r4,r2
   23320:	00250200 	call	25020 <__sinit>
   23324:	003fc006 	br	23228 <__swsetup_r+0x30>
   23328:	0005883a 	mov	r2,zero
   2332c:	80800215 	stw	r2,8(r16)
   23330:	003fce06 	br	2326c <__swsetup_r+0x74>
   23334:	81400c17 	ldw	r5,48(r16)
   23338:	28000626 	beq	r5,zero,23354 <__swsetup_r+0x15c>
   2333c:	80c01004 	addi	r3,r16,64
   23340:	28c00326 	beq	r5,r3,23350 <__swsetup_r+0x158>
   23344:	8809883a 	mov	r4,r17
   23348:	00253a40 	call	253a4 <_free_r>
   2334c:	8080030b 	ldhu	r2,12(r16)
   23350:	80000c15 	stw	zero,48(r16)
   23354:	80c00417 	ldw	r3,16(r16)
   23358:	013ff6c4 	movi	r4,-37
   2335c:	2084703a 	and	r2,r4,r2
   23360:	80000115 	stw	zero,4(r16)
   23364:	80c00015 	stw	r3,0(r16)
   23368:	003fd206 	br	232b4 <__swsetup_r+0xbc>

0002336c <__call_exitprocs>:
   2336c:	008001f4 	movhi	r2,7
   23370:	10b99004 	addi	r2,r2,-6592
   23374:	10800017 	ldw	r2,0(r2)
   23378:	defff304 	addi	sp,sp,-52
   2337c:	df000b15 	stw	fp,44(sp)
   23380:	d8800015 	stw	r2,0(sp)
   23384:	10805204 	addi	r2,r2,328
   23388:	dd400815 	stw	r21,32(sp)
   2338c:	dfc00c15 	stw	ra,48(sp)
   23390:	ddc00a15 	stw	r23,40(sp)
   23394:	dd800915 	stw	r22,36(sp)
   23398:	dd000715 	stw	r20,28(sp)
   2339c:	dcc00615 	stw	r19,24(sp)
   233a0:	dc800515 	stw	r18,20(sp)
   233a4:	dc400415 	stw	r17,16(sp)
   233a8:	dc000315 	stw	r16,12(sp)
   233ac:	d9000115 	stw	r4,4(sp)
   233b0:	2839883a 	mov	fp,r5
   233b4:	d8800215 	stw	r2,8(sp)
   233b8:	057fffc4 	movi	r21,-1
   233bc:	d8800017 	ldw	r2,0(sp)
   233c0:	ddc00217 	ldw	r23,8(sp)
   233c4:	14805217 	ldw	r18,328(r2)
   233c8:	90001726 	beq	r18,zero,23428 <__call_exitprocs+0xbc>
   233cc:	94400117 	ldw	r17,4(r18)
   233d0:	8c3fffc4 	addi	r16,r17,-1
   233d4:	80001116 	blt	r16,zero,2341c <__call_exitprocs+0xb0>
   233d8:	8c400044 	addi	r17,r17,1
   233dc:	8427883a 	add	r19,r16,r16
   233e0:	8c63883a 	add	r17,r17,r17
   233e4:	95802204 	addi	r22,r18,136
   233e8:	9ce7883a 	add	r19,r19,r19
   233ec:	8c63883a 	add	r17,r17,r17
   233f0:	b4e7883a 	add	r19,r22,r19
   233f4:	9463883a 	add	r17,r18,r17
   233f8:	e0001726 	beq	fp,zero,23458 <__call_exitprocs+0xec>
   233fc:	8c87c83a 	sub	r3,r17,r18
   23400:	b0c7883a 	add	r3,r22,r3
   23404:	18c01e17 	ldw	r3,120(r3)
   23408:	1f001326 	beq	r3,fp,23458 <__call_exitprocs+0xec>
   2340c:	843fffc4 	addi	r16,r16,-1
   23410:	9cffff04 	addi	r19,r19,-4
   23414:	8c7fff04 	addi	r17,r17,-4
   23418:	857ff71e 	bne	r16,r21,233f8 <__call_exitprocs+0x8c>
   2341c:	00800034 	movhi	r2,0
   23420:	10800004 	addi	r2,r2,0
   23424:	10002a1e 	bne	r2,zero,234d0 <__call_exitprocs+0x164>
   23428:	dfc00c17 	ldw	ra,48(sp)
   2342c:	df000b17 	ldw	fp,44(sp)
   23430:	ddc00a17 	ldw	r23,40(sp)
   23434:	dd800917 	ldw	r22,36(sp)
   23438:	dd400817 	ldw	r21,32(sp)
   2343c:	dd000717 	ldw	r20,28(sp)
   23440:	dcc00617 	ldw	r19,24(sp)
   23444:	dc800517 	ldw	r18,20(sp)
   23448:	dc400417 	ldw	r17,16(sp)
   2344c:	dc000317 	ldw	r16,12(sp)
   23450:	dec00d04 	addi	sp,sp,52
   23454:	f800283a 	ret
   23458:	91000117 	ldw	r4,4(r18)
   2345c:	88c00017 	ldw	r3,0(r17)
   23460:	213fffc4 	addi	r4,r4,-1
   23464:	24001526 	beq	r4,r16,234bc <__call_exitprocs+0x150>
   23468:	88000015 	stw	zero,0(r17)
   2346c:	183fe726 	beq	r3,zero,2340c <__call_exitprocs+0xa0>
   23470:	00800044 	movi	r2,1
   23474:	1408983a 	sll	r4,r2,r16
   23478:	91406217 	ldw	r5,392(r18)
   2347c:	95000117 	ldw	r20,4(r18)
   23480:	214a703a 	and	r5,r4,r5
   23484:	28000b26 	beq	r5,zero,234b4 <__call_exitprocs+0x148>
   23488:	91406317 	ldw	r5,396(r18)
   2348c:	2148703a 	and	r4,r4,r5
   23490:	20000c1e 	bne	r4,zero,234c4 <__call_exitprocs+0x158>
   23494:	99400017 	ldw	r5,0(r19)
   23498:	d9000117 	ldw	r4,4(sp)
   2349c:	183ee83a 	callr	r3
   234a0:	90c00117 	ldw	r3,4(r18)
   234a4:	1d3fc51e 	bne	r3,r20,233bc <__call_exitprocs+0x50>
   234a8:	b8c00017 	ldw	r3,0(r23)
   234ac:	1cbfd726 	beq	r3,r18,2340c <__call_exitprocs+0xa0>
   234b0:	003fc206 	br	233bc <__call_exitprocs+0x50>
   234b4:	183ee83a 	callr	r3
   234b8:	003ff906 	br	234a0 <__call_exitprocs+0x134>
   234bc:	94000115 	stw	r16,4(r18)
   234c0:	003fea06 	br	2346c <__call_exitprocs+0x100>
   234c4:	99000017 	ldw	r4,0(r19)
   234c8:	183ee83a 	callr	r3
   234cc:	003ff406 	br	234a0 <__call_exitprocs+0x134>
   234d0:	90c00117 	ldw	r3,4(r18)
   234d4:	1800071e 	bne	r3,zero,234f4 <__call_exitprocs+0x188>
   234d8:	90c00017 	ldw	r3,0(r18)
   234dc:	18000926 	beq	r3,zero,23504 <__call_exitprocs+0x198>
   234e0:	9009883a 	mov	r4,r18
   234e4:	b8c00015 	stw	r3,0(r23)
   234e8:	00000000 	call	0 <__alt_mem_ins_mem_c1-0x20000>
   234ec:	bc800017 	ldw	r18,0(r23)
   234f0:	003fb506 	br	233c8 <__call_exitprocs+0x5c>
   234f4:	90c00017 	ldw	r3,0(r18)
   234f8:	902f883a 	mov	r23,r18
   234fc:	1825883a 	mov	r18,r3
   23500:	003fb106 	br	233c8 <__call_exitprocs+0x5c>
   23504:	0007883a 	mov	r3,zero
   23508:	003ffb06 	br	234f8 <__call_exitprocs+0x18c>

0002350c <quorem>:
   2350c:	defff204 	addi	sp,sp,-56
   23510:	dd000815 	stw	r20,32(sp)
   23514:	20800417 	ldw	r2,16(r4)
   23518:	2d000417 	ldw	r20,16(r5)
   2351c:	dcc00715 	stw	r19,28(sp)
   23520:	dfc00d15 	stw	ra,52(sp)
   23524:	df000c15 	stw	fp,48(sp)
   23528:	ddc00b15 	stw	r23,44(sp)
   2352c:	dd800a15 	stw	r22,40(sp)
   23530:	dd400915 	stw	r21,36(sp)
   23534:	dc800615 	stw	r18,24(sp)
   23538:	dc400515 	stw	r17,20(sp)
   2353c:	dc000415 	stw	r16,16(sp)
   23540:	d9400015 	stw	r5,0(sp)
   23544:	2027883a 	mov	r19,r4
   23548:	15007d16 	blt	r2,r20,23740 <quorem+0x234>
   2354c:	a0800104 	addi	r2,r20,4
   23550:	1085883a 	add	r2,r2,r2
   23554:	1085883a 	add	r2,r2,r2
   23558:	28ad883a 	add	r22,r5,r2
   2355c:	2085883a 	add	r2,r4,r2
   23560:	10800017 	ldw	r2,0(r2)
   23564:	b1400017 	ldw	r5,0(r22)
   23568:	a53fffc4 	addi	r20,r20,-1
   2356c:	1009883a 	mov	r4,r2
   23570:	29400044 	addi	r5,r5,1
   23574:	d8800115 	stw	r2,4(sp)
   23578:	002a3c00 	call	2a3c0 <__udivsi3>
   2357c:	1025883a 	mov	r18,r2
   23580:	d8800017 	ldw	r2,0(sp)
   23584:	9f000504 	addi	fp,r19,20
   23588:	14000504 	addi	r16,r2,20
   2358c:	90003626 	beq	r18,zero,23668 <quorem+0x15c>
   23590:	802b883a 	mov	r21,r16
   23594:	e023883a 	mov	r17,fp
   23598:	0007883a 	mov	r3,zero
   2359c:	002f883a 	mov	r23,zero
   235a0:	a9800017 	ldw	r6,0(r21)
   235a4:	900b883a 	mov	r5,r18
   235a8:	d8c00315 	stw	r3,12(sp)
   235ac:	313fffcc 	andi	r4,r6,65535
   235b0:	d9800215 	stw	r6,8(sp)
   235b4:	00210b00 	call	210b0 <__mulsi3>
   235b8:	d9800217 	ldw	r6,8(sp)
   235bc:	d8c00317 	ldw	r3,12(sp)
   235c0:	900b883a 	mov	r5,r18
   235c4:	3008d43a 	srli	r4,r6,16
   235c8:	1887883a 	add	r3,r3,r2
   235cc:	d8c00315 	stw	r3,12(sp)
   235d0:	00210b00 	call	210b0 <__mulsi3>
   235d4:	89400017 	ldw	r5,0(r17)
   235d8:	d8c00317 	ldw	r3,12(sp)
   235dc:	ad400104 	addi	r21,r21,4
   235e0:	293fffcc 	andi	r4,r5,65535
   235e4:	1810d43a 	srli	r8,r3,16
   235e8:	25c9883a 	add	r4,r4,r23
   235ec:	18ffffcc 	andi	r3,r3,65535
   235f0:	20c9c83a 	sub	r4,r4,r3
   235f4:	280cd43a 	srli	r6,r5,16
   235f8:	4085883a 	add	r2,r8,r2
   235fc:	2007d43a 	srai	r3,r4,16
   23600:	117fffcc 	andi	r5,r2,65535
   23604:	314bc83a 	sub	r5,r6,r5
   23608:	28cb883a 	add	r5,r5,r3
   2360c:	8940008d 	sth	r5,2(r17)
   23610:	8900000d 	sth	r4,0(r17)
   23614:	1006d43a 	srli	r3,r2,16
   23618:	282fd43a 	srai	r23,r5,16
   2361c:	8c400104 	addi	r17,r17,4
   23620:	b57fdf2e 	bgeu	r22,r21,235a0 <quorem+0x94>
   23624:	d8c00117 	ldw	r3,4(sp)
   23628:	18000f1e 	bne	r3,zero,23668 <quorem+0x15c>
   2362c:	a0800144 	addi	r2,r20,5
   23630:	1085883a 	add	r2,r2,r2
   23634:	1085883a 	add	r2,r2,r2
   23638:	9887883a 	add	r3,r19,r2
   2363c:	18bfff04 	addi	r2,r3,-4
   23640:	e080082e 	bgeu	fp,r2,23664 <quorem+0x158>
   23644:	18ffff17 	ldw	r3,-4(r3)
   23648:	18000326 	beq	r3,zero,23658 <quorem+0x14c>
   2364c:	00000506 	br	23664 <quorem+0x158>
   23650:	10c00017 	ldw	r3,0(r2)
   23654:	1800031e 	bne	r3,zero,23664 <quorem+0x158>
   23658:	10bfff04 	addi	r2,r2,-4
   2365c:	a53fffc4 	addi	r20,r20,-1
   23660:	e0bffb36 	bltu	fp,r2,23650 <quorem+0x144>
   23664:	9d000415 	stw	r20,16(r19)
   23668:	d9400017 	ldw	r5,0(sp)
   2366c:	9809883a 	mov	r4,r19
   23670:	00274ac0 	call	274ac <__mcmp>
   23674:	10002516 	blt	r2,zero,2370c <quorem+0x200>
   23678:	94800044 	addi	r18,r18,1
   2367c:	e007883a 	mov	r3,fp
   23680:	000d883a 	mov	r6,zero
   23684:	18800017 	ldw	r2,0(r3)
   23688:	82000017 	ldw	r8,0(r16)
   2368c:	84000104 	addi	r16,r16,4
   23690:	11ffffcc 	andi	r7,r2,65535
   23694:	413fffcc 	andi	r4,r8,65535
   23698:	398d883a 	add	r6,r7,r6
   2369c:	310fc83a 	sub	r7,r6,r4
   236a0:	4010d43a 	srli	r8,r8,16
   236a4:	100cd43a 	srli	r6,r2,16
   236a8:	3809d43a 	srai	r4,r7,16
   236ac:	19c0000d 	sth	r7,0(r3)
   236b0:	320dc83a 	sub	r6,r6,r8
   236b4:	310d883a 	add	r6,r6,r4
   236b8:	1980008d 	sth	r6,2(r3)
   236bc:	300dd43a 	srai	r6,r6,16
   236c0:	18c00104 	addi	r3,r3,4
   236c4:	b43fef2e 	bgeu	r22,r16,23684 <quorem+0x178>
   236c8:	a0800144 	addi	r2,r20,5
   236cc:	1085883a 	add	r2,r2,r2
   236d0:	1085883a 	add	r2,r2,r2
   236d4:	9885883a 	add	r2,r19,r2
   236d8:	10c00017 	ldw	r3,0(r2)
   236dc:	18000b1e 	bne	r3,zero,2370c <quorem+0x200>
   236e0:	10ffff04 	addi	r3,r2,-4
   236e4:	e0c0082e 	bgeu	fp,r3,23708 <quorem+0x1fc>
   236e8:	10bfff17 	ldw	r2,-4(r2)
   236ec:	10000326 	beq	r2,zero,236fc <quorem+0x1f0>
   236f0:	00000506 	br	23708 <quorem+0x1fc>
   236f4:	18800017 	ldw	r2,0(r3)
   236f8:	1000031e 	bne	r2,zero,23708 <quorem+0x1fc>
   236fc:	18ffff04 	addi	r3,r3,-4
   23700:	a53fffc4 	addi	r20,r20,-1
   23704:	e0fffb36 	bltu	fp,r3,236f4 <quorem+0x1e8>
   23708:	9d000415 	stw	r20,16(r19)
   2370c:	9005883a 	mov	r2,r18
   23710:	dfc00d17 	ldw	ra,52(sp)
   23714:	df000c17 	ldw	fp,48(sp)
   23718:	ddc00b17 	ldw	r23,44(sp)
   2371c:	dd800a17 	ldw	r22,40(sp)
   23720:	dd400917 	ldw	r21,36(sp)
   23724:	dd000817 	ldw	r20,32(sp)
   23728:	dcc00717 	ldw	r19,28(sp)
   2372c:	dc800617 	ldw	r18,24(sp)
   23730:	dc400517 	ldw	r17,20(sp)
   23734:	dc000417 	ldw	r16,16(sp)
   23738:	dec00e04 	addi	sp,sp,56
   2373c:	f800283a 	ret
   23740:	0005883a 	mov	r2,zero
   23744:	003ff206 	br	23710 <quorem+0x204>

00023748 <_dtoa_r>:
   23748:	20801017 	ldw	r2,64(r4)
   2374c:	deffdf04 	addi	sp,sp,-132
   23750:	dcc01a15 	stw	r19,104(sp)
   23754:	dc801915 	stw	r18,100(sp)
   23758:	dc401815 	stw	r17,96(sp)
   2375c:	dc001715 	stw	r16,92(sp)
   23760:	dfc02015 	stw	ra,128(sp)
   23764:	df001f15 	stw	fp,124(sp)
   23768:	ddc01e15 	stw	r23,120(sp)
   2376c:	dd801d15 	stw	r22,116(sp)
   23770:	dd401c15 	stw	r21,112(sp)
   23774:	dd001b15 	stw	r20,108(sp)
   23778:	d9400315 	stw	r5,12(sp)
   2377c:	d9c00415 	stw	r7,16(sp)
   23780:	2021883a 	mov	r16,r4
   23784:	3025883a 	mov	r18,r6
   23788:	dcc02317 	ldw	r19,140(sp)
   2378c:	3023883a 	mov	r17,r6
   23790:	10000826 	beq	r2,zero,237b4 <_dtoa_r+0x6c>
   23794:	20c01117 	ldw	r3,68(r4)
   23798:	01800044 	movi	r6,1
   2379c:	100b883a 	mov	r5,r2
   237a0:	30cc983a 	sll	r6,r6,r3
   237a4:	10c00115 	stw	r3,4(r2)
   237a8:	11800215 	stw	r6,8(r2)
   237ac:	0026c080 	call	26c08 <_Bfree>
   237b0:	80001015 	stw	zero,64(r16)
   237b4:	90002f16 	blt	r18,zero,23874 <_dtoa_r+0x12c>
   237b8:	98000015 	stw	zero,0(r19)
   237bc:	90dffc2c 	andhi	r3,r18,32752
   237c0:	009ffc34 	movhi	r2,32752
   237c4:	18801c26 	beq	r3,r2,23838 <_dtoa_r+0xf0>
   237c8:	d9000317 	ldw	r4,12(sp)
   237cc:	880b883a 	mov	r5,r17
   237d0:	000d883a 	mov	r6,zero
   237d4:	000f883a 	mov	r7,zero
   237d8:	0029e000 	call	29e00 <__eqdf2>
   237dc:	10002c1e 	bne	r2,zero,23890 <_dtoa_r+0x148>
   237e0:	d9002217 	ldw	r4,136(sp)
   237e4:	d9c02417 	ldw	r7,144(sp)
   237e8:	00800044 	movi	r2,1
   237ec:	20800015 	stw	r2,0(r4)
   237f0:	38019426 	beq	r7,zero,23e44 <_dtoa_r+0x6fc>
   237f4:	008001f4 	movhi	r2,7
   237f8:	10b29144 	addi	r2,r2,-13755
   237fc:	38800015 	stw	r2,0(r7)
   23800:	15ffffc4 	addi	r23,r2,-1
   23804:	b805883a 	mov	r2,r23
   23808:	dfc02017 	ldw	ra,128(sp)
   2380c:	df001f17 	ldw	fp,124(sp)
   23810:	ddc01e17 	ldw	r23,120(sp)
   23814:	dd801d17 	ldw	r22,116(sp)
   23818:	dd401c17 	ldw	r21,112(sp)
   2381c:	dd001b17 	ldw	r20,108(sp)
   23820:	dcc01a17 	ldw	r19,104(sp)
   23824:	dc801917 	ldw	r18,100(sp)
   23828:	dc401817 	ldw	r17,96(sp)
   2382c:	dc001717 	ldw	r16,92(sp)
   23830:	dec02104 	addi	sp,sp,132
   23834:	f800283a 	ret
   23838:	d8c02217 	ldw	r3,136(sp)
   2383c:	d9000317 	ldw	r4,12(sp)
   23840:	0089c3c4 	movi	r2,9999
   23844:	18800015 	stw	r2,0(r3)
   23848:	20016c26 	beq	r4,zero,23dfc <_dtoa_r+0x6b4>
   2384c:	05c001f4 	movhi	r23,7
   23850:	bdf29d04 	addi	r23,r23,-13708
   23854:	d9c02417 	ldw	r7,144(sp)
   23858:	383fea26 	beq	r7,zero,23804 <_dtoa_r+0xbc>
   2385c:	b88000c7 	ldb	r2,3(r23)
   23860:	10016d1e 	bne	r2,zero,23e18 <_dtoa_r+0x6d0>
   23864:	b88000c4 	addi	r2,r23,3
   23868:	d8c02417 	ldw	r3,144(sp)
   2386c:	18800015 	stw	r2,0(r3)
   23870:	003fe406 	br	23804 <_dtoa_r+0xbc>
   23874:	04600034 	movhi	r17,32768
   23878:	8c7fffc4 	addi	r17,r17,-1
   2387c:	9462703a 	and	r17,r18,r17
   23880:	00800044 	movi	r2,1
   23884:	98800015 	stw	r2,0(r19)
   23888:	8825883a 	mov	r18,r17
   2388c:	003fcb06 	br	237bc <_dtoa_r+0x74>
   23890:	d9400317 	ldw	r5,12(sp)
   23894:	9028d53a 	srli	r20,r18,20
   23898:	d8800204 	addi	r2,sp,8
   2389c:	d8800015 	stw	r2,0(sp)
   238a0:	8009883a 	mov	r4,r16
   238a4:	880d883a 	mov	r6,r17
   238a8:	d9c00104 	addi	r7,sp,4
   238ac:	00278540 	call	27854 <__d2b>
   238b0:	a501ffcc 	andi	r20,r20,2047
   238b4:	1039883a 	mov	fp,r2
   238b8:	a001591e 	bne	r20,zero,23e20 <_dtoa_r+0x6d8>
   238bc:	dd400217 	ldw	r21,8(sp)
   238c0:	dd000117 	ldw	r20,4(sp)
   238c4:	00befbc4 	movi	r2,-1041
   238c8:	ad29883a 	add	r20,r21,r20
   238cc:	a082d216 	blt	r20,r2,24418 <_dtoa_r+0xcd0>
   238d0:	d8c00317 	ldw	r3,12(sp)
   238d4:	013f0384 	movi	r4,-1010
   238d8:	2509c83a 	sub	r4,r4,r20
   238dc:	a0810484 	addi	r2,r20,1042
   238e0:	9124983a 	sll	r18,r18,r4
   238e4:	1884d83a 	srl	r2,r3,r2
   238e8:	9088b03a 	or	r4,r18,r2
   238ec:	002a1840 	call	2a184 <__floatunsidf>
   238f0:	1009883a 	mov	r4,r2
   238f4:	017f8434 	movhi	r5,65040
   238f8:	00800044 	movi	r2,1
   238fc:	194b883a 	add	r5,r3,r5
   23900:	a53fffc4 	addi	r20,r20,-1
   23904:	d8800f15 	stw	r2,60(sp)
   23908:	000d883a 	mov	r6,zero
   2390c:	01cffe34 	movhi	r7,16376
   23910:	00299080 	call	29908 <__subdf3>
   23914:	1009883a 	mov	r4,r2
   23918:	180b883a 	mov	r5,r3
   2391c:	0198dbf4 	movhi	r6,25455
   23920:	3190d844 	addi	r6,r6,17249
   23924:	01cff4f4 	movhi	r7,16339
   23928:	39e1e9c4 	addi	r7,r7,-30809
   2392c:	00299680 	call	29968 <__muldf3>
   23930:	180b883a 	mov	r5,r3
   23934:	01a2d874 	movhi	r6,35681
   23938:	31b22cc4 	addi	r6,r6,-14157
   2393c:	01cff1f4 	movhi	r7,16327
   23940:	39e28a04 	addi	r7,r7,-30168
   23944:	1009883a 	mov	r4,r2
   23948:	00298b40 	call	298b4 <__adddf3>
   2394c:	a009883a 	mov	r4,r20
   23950:	1027883a 	mov	r19,r2
   23954:	1825883a 	mov	r18,r3
   23958:	0029fdc0 	call	29fdc <__floatsidf>
   2395c:	1009883a 	mov	r4,r2
   23960:	180b883a 	mov	r5,r3
   23964:	019427f4 	movhi	r6,20639
   23968:	319e7ec4 	addi	r6,r6,31227
   2396c:	01cff4f4 	movhi	r7,16339
   23970:	39d104c4 	addi	r7,r7,17427
   23974:	00299680 	call	29968 <__muldf3>
   23978:	9809883a 	mov	r4,r19
   2397c:	900b883a 	mov	r5,r18
   23980:	100d883a 	mov	r6,r2
   23984:	180f883a 	mov	r7,r3
   23988:	00298b40 	call	298b4 <__adddf3>
   2398c:	1009883a 	mov	r4,r2
   23990:	180b883a 	mov	r5,r3
   23994:	1027883a 	mov	r19,r2
   23998:	1825883a 	mov	r18,r3
   2399c:	002a0b00 	call	2a0b0 <__fixdfsi>
   239a0:	9809883a 	mov	r4,r19
   239a4:	900b883a 	mov	r5,r18
   239a8:	000d883a 	mov	r6,zero
   239ac:	000f883a 	mov	r7,zero
   239b0:	d8800615 	stw	r2,24(sp)
   239b4:	0029f800 	call	29f80 <__ltdf2>
   239b8:	10027e16 	blt	r2,zero,243b4 <_dtoa_r+0xc6c>
   239bc:	d8c00617 	ldw	r3,24(sp)
   239c0:	00800584 	movi	r2,22
   239c4:	10c26c36 	bltu	r2,r3,24378 <_dtoa_r+0xc30>
   239c8:	180490fa 	slli	r2,r3,3
   239cc:	00c001f4 	movhi	r3,7
   239d0:	18f2c204 	addi	r3,r3,-13560
   239d4:	d9800317 	ldw	r6,12(sp)
   239d8:	1885883a 	add	r2,r3,r2
   239dc:	11000017 	ldw	r4,0(r2)
   239e0:	11400117 	ldw	r5,4(r2)
   239e4:	880f883a 	mov	r7,r17
   239e8:	0029eb80 	call	29eb8 <__gtdf2>
   239ec:	00828f0e 	bge	zero,r2,2442c <_dtoa_r+0xce4>
   239f0:	d8800617 	ldw	r2,24(sp)
   239f4:	d8000d15 	stw	zero,52(sp)
   239f8:	10bfffc4 	addi	r2,r2,-1
   239fc:	d8800615 	stw	r2,24(sp)
   23a00:	ad29c83a 	sub	r20,r21,r20
   23a04:	a53fffc4 	addi	r20,r20,-1
   23a08:	a0026616 	blt	r20,zero,243a4 <_dtoa_r+0xc5c>
   23a0c:	dd000715 	stw	r20,28(sp)
   23a10:	d8000815 	stw	zero,32(sp)
   23a14:	d8800617 	ldw	r2,24(sp)
   23a18:	10025a16 	blt	r2,zero,24384 <_dtoa_r+0xc3c>
   23a1c:	d8c00717 	ldw	r3,28(sp)
   23a20:	d8800b15 	stw	r2,44(sp)
   23a24:	d8000a15 	stw	zero,40(sp)
   23a28:	1887883a 	add	r3,r3,r2
   23a2c:	d8c00715 	stw	r3,28(sp)
   23a30:	d9c00417 	ldw	r7,16(sp)
   23a34:	00800244 	movi	r2,9
   23a38:	11c10536 	bltu	r2,r7,23e50 <_dtoa_r+0x708>
   23a3c:	00800144 	movi	r2,5
   23a40:	11c4c60e 	bge	r2,r7,24d5c <_dtoa_r+0x1614>
   23a44:	39ffff04 	addi	r7,r7,-4
   23a48:	d9c00415 	stw	r7,16(sp)
   23a4c:	0027883a 	mov	r19,zero
   23a50:	d9c00417 	ldw	r7,16(sp)
   23a54:	008000c4 	movi	r2,3
   23a58:	3883a226 	beq	r7,r2,248e4 <_dtoa_r+0x119c>
   23a5c:	11c2bc16 	blt	r2,r7,24550 <_dtoa_r+0xe08>
   23a60:	00800084 	movi	r2,2
   23a64:	3880fb1e 	bne	r7,r2,23e54 <_dtoa_r+0x70c>
   23a68:	d8000c15 	stw	zero,48(sp)
   23a6c:	d9002117 	ldw	r4,132(sp)
   23a70:	0103ae0e 	bge	zero,r4,2492c <_dtoa_r+0x11e4>
   23a74:	2025883a 	mov	r18,r4
   23a78:	d9000e15 	stw	r4,56(sp)
   23a7c:	d9000915 	stw	r4,36(sp)
   23a80:	80001115 	stw	zero,68(r16)
   23a84:	008005c4 	movi	r2,23
   23a88:	1484b22e 	bgeu	r2,r18,24d54 <_dtoa_r+0x160c>
   23a8c:	00c00044 	movi	r3,1
   23a90:	00800104 	movi	r2,4
   23a94:	1085883a 	add	r2,r2,r2
   23a98:	11000504 	addi	r4,r2,20
   23a9c:	180b883a 	mov	r5,r3
   23aa0:	18c00044 	addi	r3,r3,1
   23aa4:	913ffb2e 	bgeu	r18,r4,23a94 <_dtoa_r+0x34c>
   23aa8:	81401115 	stw	r5,68(r16)
   23aac:	8009883a 	mov	r4,r16
   23ab0:	0026b600 	call	26b60 <_Balloc>
   23ab4:	102f883a 	mov	r23,r2
   23ab8:	80801015 	stw	r2,64(r16)
   23abc:	00800384 	movi	r2,14
   23ac0:	1480f036 	bltu	r2,r18,23e84 <_dtoa_r+0x73c>
   23ac4:	9800ef26 	beq	r19,zero,23e84 <_dtoa_r+0x73c>
   23ac8:	d8800617 	ldw	r2,24(sp)
   23acc:	00839c0e 	bge	zero,r2,24940 <_dtoa_r+0x11f8>
   23ad0:	d8c00617 	ldw	r3,24(sp)
   23ad4:	108003cc 	andi	r2,r2,15
   23ad8:	100490fa 	slli	r2,r2,3
   23adc:	182bd13a 	srai	r21,r3,4
   23ae0:	00c001f4 	movhi	r3,7
   23ae4:	18f2c204 	addi	r3,r3,-13560
   23ae8:	1885883a 	add	r2,r3,r2
   23aec:	a8c0040c 	andi	r3,r21,16
   23af0:	12800017 	ldw	r10,0(r2)
   23af4:	15800117 	ldw	r22,4(r2)
   23af8:	18038726 	beq	r3,zero,24918 <_dtoa_r+0x11d0>
   23afc:	008001f4 	movhi	r2,7
   23b00:	10b2b804 	addi	r2,r2,-13600
   23b04:	11800817 	ldw	r6,32(r2)
   23b08:	11c00917 	ldw	r7,36(r2)
   23b0c:	d9000317 	ldw	r4,12(sp)
   23b10:	880b883a 	mov	r5,r17
   23b14:	da801515 	stw	r10,84(sp)
   23b18:	0029c4c0 	call	29c4c <__divdf3>
   23b1c:	da801517 	ldw	r10,84(sp)
   23b20:	d8801015 	stw	r2,64(sp)
   23b24:	1829883a 	mov	r20,r3
   23b28:	ad4003cc 	andi	r21,r21,15
   23b2c:	048000c4 	movi	r18,3
   23b30:	a8001126 	beq	r21,zero,23b78 <_dtoa_r+0x430>
   23b34:	04c001f4 	movhi	r19,7
   23b38:	9cf2b804 	addi	r19,r19,-13600
   23b3c:	5005883a 	mov	r2,r10
   23b40:	b007883a 	mov	r3,r22
   23b44:	a980004c 	andi	r6,r21,1
   23b48:	1009883a 	mov	r4,r2
   23b4c:	a82bd07a 	srai	r21,r21,1
   23b50:	180b883a 	mov	r5,r3
   23b54:	30000426 	beq	r6,zero,23b68 <_dtoa_r+0x420>
   23b58:	99800017 	ldw	r6,0(r19)
   23b5c:	99c00117 	ldw	r7,4(r19)
   23b60:	94800044 	addi	r18,r18,1
   23b64:	00299680 	call	29968 <__muldf3>
   23b68:	9cc00204 	addi	r19,r19,8
   23b6c:	a83ff51e 	bne	r21,zero,23b44 <_dtoa_r+0x3fc>
   23b70:	1015883a 	mov	r10,r2
   23b74:	182d883a 	mov	r22,r3
   23b78:	d9001017 	ldw	r4,64(sp)
   23b7c:	a00b883a 	mov	r5,r20
   23b80:	500d883a 	mov	r6,r10
   23b84:	b00f883a 	mov	r7,r22
   23b88:	0029c4c0 	call	29c4c <__divdf3>
   23b8c:	1027883a 	mov	r19,r2
   23b90:	1829883a 	mov	r20,r3
   23b94:	d8c00d17 	ldw	r3,52(sp)
   23b98:	18000626 	beq	r3,zero,23bb4 <_dtoa_r+0x46c>
   23b9c:	9809883a 	mov	r4,r19
   23ba0:	a00b883a 	mov	r5,r20
   23ba4:	000d883a 	mov	r6,zero
   23ba8:	01cffc34 	movhi	r7,16368
   23bac:	0029f800 	call	29f80 <__ltdf2>
   23bb0:	10040e16 	blt	r2,zero,24bec <_dtoa_r+0x14a4>
   23bb4:	9009883a 	mov	r4,r18
   23bb8:	0029fdc0 	call	29fdc <__floatsidf>
   23bbc:	1009883a 	mov	r4,r2
   23bc0:	180b883a 	mov	r5,r3
   23bc4:	980d883a 	mov	r6,r19
   23bc8:	a00f883a 	mov	r7,r20
   23bcc:	00299680 	call	29968 <__muldf3>
   23bd0:	1009883a 	mov	r4,r2
   23bd4:	180b883a 	mov	r5,r3
   23bd8:	000d883a 	mov	r6,zero
   23bdc:	01d00734 	movhi	r7,16412
   23be0:	00298b40 	call	298b4 <__adddf3>
   23be4:	057f3034 	movhi	r21,64704
   23be8:	1d6b883a 	add	r21,r3,r21
   23bec:	d8c00917 	ldw	r3,36(sp)
   23bf0:	1025883a 	mov	r18,r2
   23bf4:	18031f26 	beq	r3,zero,24874 <_dtoa_r+0x112c>
   23bf8:	d8800617 	ldw	r2,24(sp)
   23bfc:	dac00917 	ldw	r11,36(sp)
   23c00:	d8801315 	stw	r2,76(sp)
   23c04:	d8c00c17 	ldw	r3,48(sp)
   23c08:	18039026 	beq	r3,zero,24a4c <_dtoa_r+0x1304>
   23c0c:	58bfffc4 	addi	r2,r11,-1
   23c10:	100490fa 	slli	r2,r2,3
   23c14:	00c001f4 	movhi	r3,7
   23c18:	18f2c204 	addi	r3,r3,-13560
   23c1c:	0009883a 	mov	r4,zero
   23c20:	1885883a 	add	r2,r3,r2
   23c24:	11800017 	ldw	r6,0(r2)
   23c28:	11c00117 	ldw	r7,4(r2)
   23c2c:	014ff834 	movhi	r5,16352
   23c30:	dac01615 	stw	r11,88(sp)
   23c34:	0029c4c0 	call	29c4c <__divdf3>
   23c38:	900d883a 	mov	r6,r18
   23c3c:	a80f883a 	mov	r7,r21
   23c40:	1009883a 	mov	r4,r2
   23c44:	180b883a 	mov	r5,r3
   23c48:	00299080 	call	29908 <__subdf3>
   23c4c:	a00b883a 	mov	r5,r20
   23c50:	9809883a 	mov	r4,r19
   23c54:	182b883a 	mov	r21,r3
   23c58:	d8801015 	stw	r2,64(sp)
   23c5c:	002a0b00 	call	2a0b0 <__fixdfsi>
   23c60:	1009883a 	mov	r4,r2
   23c64:	d8801515 	stw	r2,84(sp)
   23c68:	0029fdc0 	call	29fdc <__floatsidf>
   23c6c:	9809883a 	mov	r4,r19
   23c70:	a00b883a 	mov	r5,r20
   23c74:	100d883a 	mov	r6,r2
   23c78:	180f883a 	mov	r7,r3
   23c7c:	00299080 	call	29908 <__subdf3>
   23c80:	da401517 	ldw	r9,84(sp)
   23c84:	d9001017 	ldw	r4,64(sp)
   23c88:	a80b883a 	mov	r5,r21
   23c8c:	4d000c04 	addi	r20,r9,48
   23c90:	bd000005 	stb	r20,0(r23)
   23c94:	100d883a 	mov	r6,r2
   23c98:	180f883a 	mov	r7,r3
   23c9c:	bd800044 	addi	r22,r23,1
   23ca0:	1025883a 	mov	r18,r2
   23ca4:	1827883a 	mov	r19,r3
   23ca8:	0029eb80 	call	29eb8 <__gtdf2>
   23cac:	00842216 	blt	zero,r2,24d38 <_dtoa_r+0x15f0>
   23cb0:	0009883a 	mov	r4,zero
   23cb4:	014ffc34 	movhi	r5,16368
   23cb8:	900d883a 	mov	r6,r18
   23cbc:	980f883a 	mov	r7,r19
   23cc0:	00299080 	call	29908 <__subdf3>
   23cc4:	d9001017 	ldw	r4,64(sp)
   23cc8:	a80b883a 	mov	r5,r21
   23ccc:	100d883a 	mov	r6,r2
   23cd0:	180f883a 	mov	r7,r3
   23cd4:	0029eb80 	call	29eb8 <__gtdf2>
   23cd8:	dac01617 	ldw	r11,88(sp)
   23cdc:	00841316 	blt	zero,r2,24d2c <_dtoa_r+0x15e4>
   23ce0:	00800044 	movi	r2,1
   23ce4:	12c0670e 	bge	r2,r11,23e84 <_dtoa_r+0x73c>
   23ce8:	bad7883a 	add	r11,r23,r11
   23cec:	df001115 	stw	fp,68(sp)
   23cf0:	dc401215 	stw	r17,72(sp)
   23cf4:	5839883a 	mov	fp,r11
   23cf8:	dc401017 	ldw	r17,64(sp)
   23cfc:	00000806 	br	23d20 <_dtoa_r+0x5d8>
   23d00:	00299080 	call	29908 <__subdf3>
   23d04:	1009883a 	mov	r4,r2
   23d08:	180b883a 	mov	r5,r3
   23d0c:	880d883a 	mov	r6,r17
   23d10:	a80f883a 	mov	r7,r21
   23d14:	0029f800 	call	29f80 <__ltdf2>
   23d18:	1003ee16 	blt	r2,zero,24cd4 <_dtoa_r+0x158c>
   23d1c:	b703f126 	beq	r22,fp,24ce4 <_dtoa_r+0x159c>
   23d20:	8809883a 	mov	r4,r17
   23d24:	a80b883a 	mov	r5,r21
   23d28:	000d883a 	mov	r6,zero
   23d2c:	01d00934 	movhi	r7,16420
   23d30:	00299680 	call	29968 <__muldf3>
   23d34:	000d883a 	mov	r6,zero
   23d38:	01d00934 	movhi	r7,16420
   23d3c:	9009883a 	mov	r4,r18
   23d40:	980b883a 	mov	r5,r19
   23d44:	1023883a 	mov	r17,r2
   23d48:	182b883a 	mov	r21,r3
   23d4c:	00299680 	call	29968 <__muldf3>
   23d50:	180b883a 	mov	r5,r3
   23d54:	1009883a 	mov	r4,r2
   23d58:	1825883a 	mov	r18,r3
   23d5c:	1027883a 	mov	r19,r2
   23d60:	002a0b00 	call	2a0b0 <__fixdfsi>
   23d64:	1009883a 	mov	r4,r2
   23d68:	1029883a 	mov	r20,r2
   23d6c:	0029fdc0 	call	29fdc <__floatsidf>
   23d70:	9809883a 	mov	r4,r19
   23d74:	900b883a 	mov	r5,r18
   23d78:	100d883a 	mov	r6,r2
   23d7c:	180f883a 	mov	r7,r3
   23d80:	00299080 	call	29908 <__subdf3>
   23d84:	a5000c04 	addi	r20,r20,48
   23d88:	b5000005 	stb	r20,0(r22)
   23d8c:	1009883a 	mov	r4,r2
   23d90:	180b883a 	mov	r5,r3
   23d94:	880d883a 	mov	r6,r17
   23d98:	a80f883a 	mov	r7,r21
   23d9c:	1025883a 	mov	r18,r2
   23da0:	1827883a 	mov	r19,r3
   23da4:	0029f800 	call	29f80 <__ltdf2>
   23da8:	b5800044 	addi	r22,r22,1
   23dac:	0009883a 	mov	r4,zero
   23db0:	014ffc34 	movhi	r5,16368
   23db4:	900d883a 	mov	r6,r18
   23db8:	980f883a 	mov	r7,r19
   23dbc:	103fd00e 	bge	r2,zero,23d00 <_dtoa_r+0x5b8>
   23dc0:	d9001317 	ldw	r4,76(sp)
   23dc4:	df001117 	ldw	fp,68(sp)
   23dc8:	d9000615 	stw	r4,24(sp)
   23dcc:	8009883a 	mov	r4,r16
   23dd0:	e00b883a 	mov	r5,fp
   23dd4:	0026c080 	call	26c08 <_Bfree>
   23dd8:	d9c00617 	ldw	r7,24(sp)
   23ddc:	d8c02217 	ldw	r3,136(sp)
   23de0:	d9002417 	ldw	r4,144(sp)
   23de4:	b0000005 	stb	zero,0(r22)
   23de8:	38800044 	addi	r2,r7,1
   23dec:	18800015 	stw	r2,0(r3)
   23df0:	203e8426 	beq	r4,zero,23804 <_dtoa_r+0xbc>
   23df4:	25800015 	stw	r22,0(r4)
   23df8:	003e8206 	br	23804 <_dtoa_r+0xbc>
   23dfc:	00800434 	movhi	r2,16
   23e00:	10bfffc4 	addi	r2,r2,-1
   23e04:	90a4703a 	and	r18,r18,r2
   23e08:	903e901e 	bne	r18,zero,2384c <_dtoa_r+0x104>
   23e0c:	05c001f4 	movhi	r23,7
   23e10:	bdf29a04 	addi	r23,r23,-13720
   23e14:	003e8f06 	br	23854 <_dtoa_r+0x10c>
   23e18:	b8800204 	addi	r2,r23,8
   23e1c:	003e9206 	br	23868 <_dtoa_r+0x120>
   23e20:	01400434 	movhi	r5,16
   23e24:	297fffc4 	addi	r5,r5,-1
   23e28:	894a703a 	and	r5,r17,r5
   23e2c:	d9000317 	ldw	r4,12(sp)
   23e30:	294ffc34 	orhi	r5,r5,16368
   23e34:	a53f0044 	addi	r20,r20,-1023
   23e38:	dd400217 	ldw	r21,8(sp)
   23e3c:	d8000f15 	stw	zero,60(sp)
   23e40:	003eb106 	br	23908 <_dtoa_r+0x1c0>
   23e44:	05c001f4 	movhi	r23,7
   23e48:	bdf29104 	addi	r23,r23,-13756
   23e4c:	003e6d06 	br	23804 <_dtoa_r+0xbc>
   23e50:	d8000415 	stw	zero,16(sp)
   23e54:	80001115 	stw	zero,68(r16)
   23e58:	8009883a 	mov	r4,r16
   23e5c:	000b883a 	mov	r5,zero
   23e60:	0026b600 	call	26b60 <_Balloc>
   23e64:	01ffffc4 	movi	r7,-1
   23e68:	102f883a 	mov	r23,r2
   23e6c:	80801015 	stw	r2,64(r16)
   23e70:	00800044 	movi	r2,1
   23e74:	d9c00915 	stw	r7,36(sp)
   23e78:	d8002115 	stw	zero,132(sp)
   23e7c:	d9c00e15 	stw	r7,56(sp)
   23e80:	d8800c15 	stw	r2,48(sp)
   23e84:	d8800117 	ldw	r2,4(sp)
   23e88:	10008b16 	blt	r2,zero,240b8 <_dtoa_r+0x970>
   23e8c:	d9000617 	ldw	r4,24(sp)
   23e90:	00c00384 	movi	r3,14
   23e94:	19008816 	blt	r3,r4,240b8 <_dtoa_r+0x970>
   23e98:	200490fa 	slli	r2,r4,3
   23e9c:	d9c02117 	ldw	r7,132(sp)
   23ea0:	00c001f4 	movhi	r3,7
   23ea4:	18f2c204 	addi	r3,r3,-13560
   23ea8:	1885883a 	add	r2,r3,r2
   23eac:	14800017 	ldw	r18,0(r2)
   23eb0:	14c00117 	ldw	r19,4(r2)
   23eb4:	3801c916 	blt	r7,zero,245dc <_dtoa_r+0xe94>
   23eb8:	d9000317 	ldw	r4,12(sp)
   23ebc:	900d883a 	mov	r6,r18
   23ec0:	980f883a 	mov	r7,r19
   23ec4:	880b883a 	mov	r5,r17
   23ec8:	0029c4c0 	call	29c4c <__divdf3>
   23ecc:	180b883a 	mov	r5,r3
   23ed0:	1009883a 	mov	r4,r2
   23ed4:	002a0b00 	call	2a0b0 <__fixdfsi>
   23ed8:	1009883a 	mov	r4,r2
   23edc:	102b883a 	mov	r21,r2
   23ee0:	0029fdc0 	call	29fdc <__floatsidf>
   23ee4:	1009883a 	mov	r4,r2
   23ee8:	180b883a 	mov	r5,r3
   23eec:	900d883a 	mov	r6,r18
   23ef0:	980f883a 	mov	r7,r19
   23ef4:	00299680 	call	29968 <__muldf3>
   23ef8:	d9000317 	ldw	r4,12(sp)
   23efc:	880b883a 	mov	r5,r17
   23f00:	100d883a 	mov	r6,r2
   23f04:	180f883a 	mov	r7,r3
   23f08:	00299080 	call	29908 <__subdf3>
   23f0c:	d9c00917 	ldw	r7,36(sp)
   23f10:	1009883a 	mov	r4,r2
   23f14:	a8800c04 	addi	r2,r21,48
   23f18:	b8800005 	stb	r2,0(r23)
   23f1c:	01800044 	movi	r6,1
   23f20:	180b883a 	mov	r5,r3
   23f24:	2005883a 	mov	r2,r4
   23f28:	bd800044 	addi	r22,r23,1
   23f2c:	39803726 	beq	r7,r6,2400c <_dtoa_r+0x8c4>
   23f30:	000d883a 	mov	r6,zero
   23f34:	01d00934 	movhi	r7,16420
   23f38:	00299680 	call	29968 <__muldf3>
   23f3c:	1009883a 	mov	r4,r2
   23f40:	180b883a 	mov	r5,r3
   23f44:	000d883a 	mov	r6,zero
   23f48:	000f883a 	mov	r7,zero
   23f4c:	1029883a 	mov	r20,r2
   23f50:	1823883a 	mov	r17,r3
   23f54:	0029e000 	call	29e00 <__eqdf2>
   23f58:	103f9c26 	beq	r2,zero,23dcc <_dtoa_r+0x684>
   23f5c:	dd400917 	ldw	r21,36(sp)
   23f60:	dc000415 	stw	r16,16(sp)
   23f64:	00000906 	br	23f8c <_dtoa_r+0x844>
   23f68:	00299680 	call	29968 <__muldf3>
   23f6c:	1009883a 	mov	r4,r2
   23f70:	180b883a 	mov	r5,r3
   23f74:	000d883a 	mov	r6,zero
   23f78:	000f883a 	mov	r7,zero
   23f7c:	1029883a 	mov	r20,r2
   23f80:	1823883a 	mov	r17,r3
   23f84:	0029e000 	call	29e00 <__eqdf2>
   23f88:	10022926 	beq	r2,zero,24830 <_dtoa_r+0x10e8>
   23f8c:	900d883a 	mov	r6,r18
   23f90:	980f883a 	mov	r7,r19
   23f94:	a009883a 	mov	r4,r20
   23f98:	880b883a 	mov	r5,r17
   23f9c:	0029c4c0 	call	29c4c <__divdf3>
   23fa0:	180b883a 	mov	r5,r3
   23fa4:	1009883a 	mov	r4,r2
   23fa8:	002a0b00 	call	2a0b0 <__fixdfsi>
   23fac:	1009883a 	mov	r4,r2
   23fb0:	1021883a 	mov	r16,r2
   23fb4:	0029fdc0 	call	29fdc <__floatsidf>
   23fb8:	1009883a 	mov	r4,r2
   23fbc:	180b883a 	mov	r5,r3
   23fc0:	900d883a 	mov	r6,r18
   23fc4:	980f883a 	mov	r7,r19
   23fc8:	00299680 	call	29968 <__muldf3>
   23fcc:	a009883a 	mov	r4,r20
   23fd0:	880b883a 	mov	r5,r17
   23fd4:	100d883a 	mov	r6,r2
   23fd8:	180f883a 	mov	r7,r3
   23fdc:	00299080 	call	29908 <__subdf3>
   23fe0:	82400c04 	addi	r9,r16,48
   23fe4:	b2400005 	stb	r9,0(r22)
   23fe8:	b5800044 	addi	r22,r22,1
   23fec:	b5d3c83a 	sub	r9,r22,r23
   23ff0:	000d883a 	mov	r6,zero
   23ff4:	01d00934 	movhi	r7,16420
   23ff8:	1009883a 	mov	r4,r2
   23ffc:	180b883a 	mov	r5,r3
   24000:	aa7fd91e 	bne	r21,r9,23f68 <_dtoa_r+0x820>
   24004:	802b883a 	mov	r21,r16
   24008:	dc000417 	ldw	r16,16(sp)
   2400c:	1009883a 	mov	r4,r2
   24010:	180b883a 	mov	r5,r3
   24014:	100d883a 	mov	r6,r2
   24018:	180f883a 	mov	r7,r3
   2401c:	00298b40 	call	298b4 <__adddf3>
   24020:	9009883a 	mov	r4,r18
   24024:	980b883a 	mov	r5,r19
   24028:	100d883a 	mov	r6,r2
   2402c:	180f883a 	mov	r7,r3
   24030:	1023883a 	mov	r17,r2
   24034:	1829883a 	mov	r20,r3
   24038:	0029f800 	call	29f80 <__ltdf2>
   2403c:	10000816 	blt	r2,zero,24060 <_dtoa_r+0x918>
   24040:	9009883a 	mov	r4,r18
   24044:	980b883a 	mov	r5,r19
   24048:	880d883a 	mov	r6,r17
   2404c:	a00f883a 	mov	r7,r20
   24050:	0029e000 	call	29e00 <__eqdf2>
   24054:	103f5d1e 	bne	r2,zero,23dcc <_dtoa_r+0x684>
   24058:	ad40004c 	andi	r21,r21,1
   2405c:	a83f5b26 	beq	r21,zero,23dcc <_dtoa_r+0x684>
   24060:	b53fffc3 	ldbu	r20,-1(r22)
   24064:	b0ffff84 	addi	r3,r22,-2
   24068:	01400e44 	movi	r5,57
   2406c:	00000306 	br	2407c <_dtoa_r+0x934>
   24070:	1d000003 	ldbu	r20,0(r3)
   24074:	102d883a 	mov	r22,r2
   24078:	18ffffc4 	addi	r3,r3,-1
   2407c:	a1003fcc 	andi	r4,r20,255
   24080:	2100201c 	xori	r4,r4,128
   24084:	213fe004 	addi	r4,r4,-128
   24088:	b0bfffc4 	addi	r2,r22,-1
   2408c:	2142ca1e 	bne	r4,r5,24bb8 <_dtoa_r+0x1470>
   24090:	b8bff71e 	bne	r23,r2,24070 <_dtoa_r+0x928>
   24094:	d8800617 	ldw	r2,24(sp)
   24098:	05000c44 	movi	r20,49
   2409c:	10800044 	addi	r2,r2,1
   240a0:	d8800615 	stw	r2,24(sp)
   240a4:	00800c04 	movi	r2,48
   240a8:	b8800005 	stb	r2,0(r23)
   240ac:	b805883a 	mov	r2,r23
   240b0:	15000005 	stb	r20,0(r2)
   240b4:	003f4506 	br	23dcc <_dtoa_r+0x684>
   240b8:	d9c00c17 	ldw	r7,48(sp)
   240bc:	3800c926 	beq	r7,zero,243e4 <_dtoa_r+0xc9c>
   240c0:	d9c00417 	ldw	r7,16(sp)
   240c4:	00c00044 	movi	r3,1
   240c8:	19c16c0e 	bge	r3,r7,2467c <_dtoa_r+0xf34>
   240cc:	d9000917 	ldw	r4,36(sp)
   240d0:	d9c00a17 	ldw	r7,40(sp)
   240d4:	24ffffc4 	addi	r19,r4,-1
   240d8:	3cc20716 	blt	r7,r19,248f8 <_dtoa_r+0x11b0>
   240dc:	3ce7c83a 	sub	r19,r7,r19
   240e0:	d9c00917 	ldw	r7,36(sp)
   240e4:	3802ae16 	blt	r7,zero,24ba0 <_dtoa_r+0x1458>
   240e8:	dc800817 	ldw	r18,32(sp)
   240ec:	d8800917 	ldw	r2,36(sp)
   240f0:	d8c00817 	ldw	r3,32(sp)
   240f4:	d9c00717 	ldw	r7,28(sp)
   240f8:	8009883a 	mov	r4,r16
   240fc:	1887883a 	add	r3,r3,r2
   24100:	388f883a 	add	r7,r7,r2
   24104:	01400044 	movi	r5,1
   24108:	d8c00815 	stw	r3,32(sp)
   2410c:	d9c00715 	stw	r7,28(sp)
   24110:	0026f900 	call	26f90 <__i2b>
   24114:	102b883a 	mov	r21,r2
   24118:	90000a26 	beq	r18,zero,24144 <_dtoa_r+0x9fc>
   2411c:	d8800717 	ldw	r2,28(sp)
   24120:	0080080e 	bge	zero,r2,24144 <_dtoa_r+0x9fc>
   24124:	90812b16 	blt	r18,r2,245d4 <_dtoa_r+0xe8c>
   24128:	d8c00817 	ldw	r3,32(sp)
   2412c:	d9000717 	ldw	r4,28(sp)
   24130:	90a5c83a 	sub	r18,r18,r2
   24134:	1887c83a 	sub	r3,r3,r2
   24138:	2089c83a 	sub	r4,r4,r2
   2413c:	d8c00815 	stw	r3,32(sp)
   24140:	d9000715 	stw	r4,28(sp)
   24144:	d9c00a17 	ldw	r7,40(sp)
   24148:	01c0140e 	bge	zero,r7,2419c <_dtoa_r+0xa54>
   2414c:	d8800c17 	ldw	r2,48(sp)
   24150:	1001de26 	beq	r2,zero,248cc <_dtoa_r+0x1184>
   24154:	04c00e0e 	bge	zero,r19,24190 <_dtoa_r+0xa48>
   24158:	a80b883a 	mov	r5,r21
   2415c:	8009883a 	mov	r4,r16
   24160:	980d883a 	mov	r6,r19
   24164:	00272240 	call	27224 <__pow5mult>
   24168:	e00d883a 	mov	r6,fp
   2416c:	8009883a 	mov	r4,r16
   24170:	100b883a 	mov	r5,r2
   24174:	102b883a 	mov	r21,r2
   24178:	0026fcc0 	call	26fcc <__multiply>
   2417c:	1029883a 	mov	r20,r2
   24180:	e00b883a 	mov	r5,fp
   24184:	8009883a 	mov	r4,r16
   24188:	0026c080 	call	26c08 <_Bfree>
   2418c:	a039883a 	mov	fp,r20
   24190:	d8c00a17 	ldw	r3,40(sp)
   24194:	1ccdc83a 	sub	r6,r3,r19
   24198:	3001291e 	bne	r6,zero,24640 <_dtoa_r+0xef8>
   2419c:	8009883a 	mov	r4,r16
   241a0:	01400044 	movi	r5,1
   241a4:	0026f900 	call	26f90 <__i2b>
   241a8:	d9000b17 	ldw	r4,44(sp)
   241ac:	1029883a 	mov	r20,r2
   241b0:	0100050e 	bge	zero,r4,241c8 <_dtoa_r+0xa80>
   241b4:	d9800b17 	ldw	r6,44(sp)
   241b8:	8009883a 	mov	r4,r16
   241bc:	100b883a 	mov	r5,r2
   241c0:	00272240 	call	27224 <__pow5mult>
   241c4:	1029883a 	mov	r20,r2
   241c8:	d9c00417 	ldw	r7,16(sp)
   241cc:	00800044 	movi	r2,1
   241d0:	11c0f00e 	bge	r2,r7,24594 <_dtoa_r+0xe4c>
   241d4:	0023883a 	mov	r17,zero
   241d8:	d8800b17 	ldw	r2,44(sp)
   241dc:	1001741e 	bne	r2,zero,247b0 <_dtoa_r+0x1068>
   241e0:	00800044 	movi	r2,1
   241e4:	d8c00717 	ldw	r3,28(sp)
   241e8:	10c5883a 	add	r2,r2,r3
   241ec:	108007cc 	andi	r2,r2,31
   241f0:	10008026 	beq	r2,zero,243f4 <_dtoa_r+0xcac>
   241f4:	01000804 	movi	r4,32
   241f8:	2089c83a 	sub	r4,r4,r2
   241fc:	00c00104 	movi	r3,4
   24200:	1902d00e 	bge	r3,r4,24d44 <_dtoa_r+0x15fc>
   24204:	d9000817 	ldw	r4,32(sp)
   24208:	d9c00717 	ldw	r7,28(sp)
   2420c:	00c00704 	movi	r3,28
   24210:	1885c83a 	sub	r2,r3,r2
   24214:	2089883a 	add	r4,r4,r2
   24218:	388f883a 	add	r7,r7,r2
   2421c:	d9000815 	stw	r4,32(sp)
   24220:	90a5883a 	add	r18,r18,r2
   24224:	d9c00715 	stw	r7,28(sp)
   24228:	d9c00817 	ldw	r7,32(sp)
   2422c:	01c0050e 	bge	zero,r7,24244 <_dtoa_r+0xafc>
   24230:	e00b883a 	mov	r5,fp
   24234:	8009883a 	mov	r4,r16
   24238:	380d883a 	mov	r6,r7
   2423c:	00273500 	call	27350 <__lshift>
   24240:	1039883a 	mov	fp,r2
   24244:	d8800717 	ldw	r2,28(sp)
   24248:	0080050e 	bge	zero,r2,24260 <_dtoa_r+0xb18>
   2424c:	a00b883a 	mov	r5,r20
   24250:	8009883a 	mov	r4,r16
   24254:	100d883a 	mov	r6,r2
   24258:	00273500 	call	27350 <__lshift>
   2425c:	1029883a 	mov	r20,r2
   24260:	d8c00d17 	ldw	r3,52(sp)
   24264:	1801401e 	bne	r3,zero,24768 <_dtoa_r+0x1020>
   24268:	d8800917 	ldw	r2,36(sp)
   2426c:	00815a0e 	bge	zero,r2,247d8 <_dtoa_r+0x1090>
   24270:	d8c00c17 	ldw	r3,48(sp)
   24274:	18006f1e 	bne	r3,zero,24434 <_dtoa_r+0xcec>
   24278:	b823883a 	mov	r17,r23
   2427c:	dc800917 	ldw	r18,36(sp)
   24280:	00000206 	br	2428c <_dtoa_r+0xb44>
   24284:	0026c300 	call	26c30 <__multadd>
   24288:	1039883a 	mov	fp,r2
   2428c:	e009883a 	mov	r4,fp
   24290:	a00b883a 	mov	r5,r20
   24294:	002350c0 	call	2350c <quorem>
   24298:	10800c04 	addi	r2,r2,48
   2429c:	88800005 	stb	r2,0(r17)
   242a0:	8c400044 	addi	r17,r17,1
   242a4:	8dc7c83a 	sub	r3,r17,r23
   242a8:	8009883a 	mov	r4,r16
   242ac:	e00b883a 	mov	r5,fp
   242b0:	01800284 	movi	r6,10
   242b4:	000f883a 	mov	r7,zero
   242b8:	1cbff216 	blt	r3,r18,24284 <_dtoa_r+0xb3c>
   242bc:	dd800917 	ldw	r22,36(sp)
   242c0:	1007883a 	mov	r3,r2
   242c4:	05823a0e 	bge	zero,r22,24bb0 <_dtoa_r+0x1468>
   242c8:	bdad883a 	add	r22,r23,r22
   242cc:	0023883a 	mov	r17,zero
   242d0:	e00b883a 	mov	r5,fp
   242d4:	01800044 	movi	r6,1
   242d8:	8009883a 	mov	r4,r16
   242dc:	d8c01515 	stw	r3,84(sp)
   242e0:	00273500 	call	27350 <__lshift>
   242e4:	1009883a 	mov	r4,r2
   242e8:	a00b883a 	mov	r5,r20
   242ec:	1039883a 	mov	fp,r2
   242f0:	00274ac0 	call	274ac <__mcmp>
   242f4:	d8c01517 	ldw	r3,84(sp)
   242f8:	0080d60e 	bge	zero,r2,24654 <_dtoa_r+0xf0c>
   242fc:	b13fffc3 	ldbu	r4,-1(r22)
   24300:	b0ffff84 	addi	r3,r22,-2
   24304:	01800e44 	movi	r6,57
   24308:	00000306 	br	24318 <_dtoa_r+0xbd0>
   2430c:	19000003 	ldbu	r4,0(r3)
   24310:	102d883a 	mov	r22,r2
   24314:	18ffffc4 	addi	r3,r3,-1
   24318:	21403fcc 	andi	r5,r4,255
   2431c:	2940201c 	xori	r5,r5,128
   24320:	297fe004 	addi	r5,r5,-128
   24324:	b0bfffc4 	addi	r2,r22,-1
   24328:	2981a71e 	bne	r5,r6,249c8 <_dtoa_r+0x1280>
   2432c:	b8bff71e 	bne	r23,r2,2430c <_dtoa_r+0xbc4>
   24330:	d8800617 	ldw	r2,24(sp)
   24334:	10800044 	addi	r2,r2,1
   24338:	d8800615 	stw	r2,24(sp)
   2433c:	00800c44 	movi	r2,49
   24340:	b8800005 	stb	r2,0(r23)
   24344:	8009883a 	mov	r4,r16
   24348:	a00b883a 	mov	r5,r20
   2434c:	0026c080 	call	26c08 <_Bfree>
   24350:	a83e9e26 	beq	r21,zero,23dcc <_dtoa_r+0x684>
   24354:	88000426 	beq	r17,zero,24368 <_dtoa_r+0xc20>
   24358:	8d400326 	beq	r17,r21,24368 <_dtoa_r+0xc20>
   2435c:	8009883a 	mov	r4,r16
   24360:	880b883a 	mov	r5,r17
   24364:	0026c080 	call	26c08 <_Bfree>
   24368:	8009883a 	mov	r4,r16
   2436c:	a80b883a 	mov	r5,r21
   24370:	0026c080 	call	26c08 <_Bfree>
   24374:	003e9506 	br	23dcc <_dtoa_r+0x684>
   24378:	00c00044 	movi	r3,1
   2437c:	d8c00d15 	stw	r3,52(sp)
   24380:	003d9f06 	br	23a00 <_dtoa_r+0x2b8>
   24384:	d9000817 	ldw	r4,32(sp)
   24388:	d8800617 	ldw	r2,24(sp)
   2438c:	d8000b15 	stw	zero,44(sp)
   24390:	2089c83a 	sub	r4,r4,r2
   24394:	0087c83a 	sub	r3,zero,r2
   24398:	d9000815 	stw	r4,32(sp)
   2439c:	d8c00a15 	stw	r3,40(sp)
   243a0:	003da306 	br	23a30 <_dtoa_r+0x2e8>
   243a4:	0529c83a 	sub	r20,zero,r20
   243a8:	dd000815 	stw	r20,32(sp)
   243ac:	d8000715 	stw	zero,28(sp)
   243b0:	003d9806 	br	23a14 <_dtoa_r+0x2cc>
   243b4:	d9000617 	ldw	r4,24(sp)
   243b8:	0029fdc0 	call	29fdc <__floatsidf>
   243bc:	1009883a 	mov	r4,r2
   243c0:	180b883a 	mov	r5,r3
   243c4:	980d883a 	mov	r6,r19
   243c8:	900f883a 	mov	r7,r18
   243cc:	0029e5c0 	call	29e5c <__nedf2>
   243d0:	103d7a26 	beq	r2,zero,239bc <_dtoa_r+0x274>
   243d4:	d8800617 	ldw	r2,24(sp)
   243d8:	10bfffc4 	addi	r2,r2,-1
   243dc:	d8800615 	stw	r2,24(sp)
   243e0:	003d7606 	br	239bc <_dtoa_r+0x274>
   243e4:	dcc00a17 	ldw	r19,40(sp)
   243e8:	dc800817 	ldw	r18,32(sp)
   243ec:	002b883a 	mov	r21,zero
   243f0:	003f4906 	br	24118 <_dtoa_r+0x9d0>
   243f4:	00800704 	movi	r2,28
   243f8:	d8c00817 	ldw	r3,32(sp)
   243fc:	d9000717 	ldw	r4,28(sp)
   24400:	90a5883a 	add	r18,r18,r2
   24404:	1887883a 	add	r3,r3,r2
   24408:	2089883a 	add	r4,r4,r2
   2440c:	d8c00815 	stw	r3,32(sp)
   24410:	d9000715 	stw	r4,28(sp)
   24414:	003f8406 	br	24228 <_dtoa_r+0xae0>
   24418:	d9c00317 	ldw	r7,12(sp)
   2441c:	013efb84 	movi	r4,-1042
   24420:	2509c83a 	sub	r4,r4,r20
   24424:	3908983a 	sll	r4,r7,r4
   24428:	003d3006 	br	238ec <_dtoa_r+0x1a4>
   2442c:	d8000d15 	stw	zero,52(sp)
   24430:	003d7306 	br	23a00 <_dtoa_r+0x2b8>
   24434:	0480050e 	bge	zero,r18,2444c <_dtoa_r+0xd04>
   24438:	a80b883a 	mov	r5,r21
   2443c:	8009883a 	mov	r4,r16
   24440:	900d883a 	mov	r6,r18
   24444:	00273500 	call	27350 <__lshift>
   24448:	102b883a 	mov	r21,r2
   2444c:	8801611e 	bne	r17,zero,249d4 <_dtoa_r+0x128c>
   24450:	a827883a 	mov	r19,r21
   24454:	d8c00317 	ldw	r3,12(sp)
   24458:	d9000917 	ldw	r4,36(sp)
   2445c:	b8bfffc4 	addi	r2,r23,-1
   24460:	18c0004c 	andi	r3,r3,1
   24464:	1105883a 	add	r2,r2,r4
   24468:	b825883a 	mov	r18,r23
   2446c:	d8800515 	stw	r2,20(sp)
   24470:	a823883a 	mov	r17,r21
   24474:	d8c00315 	stw	r3,12(sp)
   24478:	ddc00715 	stw	r23,28(sp)
   2447c:	e009883a 	mov	r4,fp
   24480:	a00b883a 	mov	r5,r20
   24484:	002350c0 	call	2350c <quorem>
   24488:	e009883a 	mov	r4,fp
   2448c:	880b883a 	mov	r5,r17
   24490:	102d883a 	mov	r22,r2
   24494:	00274ac0 	call	274ac <__mcmp>
   24498:	980d883a 	mov	r6,r19
   2449c:	8009883a 	mov	r4,r16
   244a0:	a00b883a 	mov	r5,r20
   244a4:	102b883a 	mov	r21,r2
   244a8:	00275040 	call	27504 <__mdiff>
   244ac:	100d883a 	mov	r6,r2
   244b0:	10800317 	ldw	r2,12(r2)
   244b4:	b5c00c04 	addi	r23,r22,48
   244b8:	10008c26 	beq	r2,zero,246ec <_dtoa_r+0xfa4>
   244bc:	8009883a 	mov	r4,r16
   244c0:	300b883a 	mov	r5,r6
   244c4:	0026c080 	call	26c08 <_Bfree>
   244c8:	00800044 	movi	r2,1
   244cc:	a8007116 	blt	r21,zero,24694 <_dtoa_r+0xf4c>
   244d0:	a800041e 	bne	r21,zero,244e4 <_dtoa_r+0xd9c>
   244d4:	d9c00417 	ldw	r7,16(sp)
   244d8:	3800021e 	bne	r7,zero,244e4 <_dtoa_r+0xd9c>
   244dc:	d8c00317 	ldw	r3,12(sp)
   244e0:	18006c26 	beq	r3,zero,24694 <_dtoa_r+0xf4c>
   244e4:	00814c16 	blt	zero,r2,24a18 <_dtoa_r+0x12d0>
   244e8:	d8c00517 	ldw	r3,20(sp)
   244ec:	95400044 	addi	r21,r18,1
   244f0:	95c00005 	stb	r23,0(r18)
   244f4:	a82d883a 	mov	r22,r21
   244f8:	90c14d26 	beq	r18,r3,24a30 <_dtoa_r+0x12e8>
   244fc:	e00b883a 	mov	r5,fp
   24500:	8009883a 	mov	r4,r16
   24504:	01800284 	movi	r6,10
   24508:	000f883a 	mov	r7,zero
   2450c:	0026c300 	call	26c30 <__multadd>
   24510:	1039883a 	mov	fp,r2
   24514:	8cc08b26 	beq	r17,r19,24744 <_dtoa_r+0xffc>
   24518:	880b883a 	mov	r5,r17
   2451c:	01800284 	movi	r6,10
   24520:	000f883a 	mov	r7,zero
   24524:	8009883a 	mov	r4,r16
   24528:	0026c300 	call	26c30 <__multadd>
   2452c:	980b883a 	mov	r5,r19
   24530:	8009883a 	mov	r4,r16
   24534:	01800284 	movi	r6,10
   24538:	000f883a 	mov	r7,zero
   2453c:	1023883a 	mov	r17,r2
   24540:	0026c300 	call	26c30 <__multadd>
   24544:	1027883a 	mov	r19,r2
   24548:	a825883a 	mov	r18,r21
   2454c:	003fcb06 	br	2447c <_dtoa_r+0xd34>
   24550:	d9c00417 	ldw	r7,16(sp)
   24554:	00800104 	movi	r2,4
   24558:	3880e426 	beq	r7,r2,248ec <_dtoa_r+0x11a4>
   2455c:	00800144 	movi	r2,5
   24560:	38be3c1e 	bne	r7,r2,23e54 <_dtoa_r+0x70c>
   24564:	00c00044 	movi	r3,1
   24568:	d8c00c15 	stw	r3,48(sp)
   2456c:	d9c02117 	ldw	r7,132(sp)
   24570:	d8800617 	ldw	r2,24(sp)
   24574:	388f883a 	add	r7,r7,r2
   24578:	3c800044 	addi	r18,r7,1
   2457c:	d9c00e15 	stw	r7,56(sp)
   24580:	dc800915 	stw	r18,36(sp)
   24584:	04bd3e16 	blt	zero,r18,23a80 <_dtoa_r+0x338>
   24588:	80001115 	stw	zero,68(r16)
   2458c:	000b883a 	mov	r5,zero
   24590:	003d4606 	br	23aac <_dtoa_r+0x364>
   24594:	d8c00317 	ldw	r3,12(sp)
   24598:	183f0e1e 	bne	r3,zero,241d4 <_dtoa_r+0xa8c>
   2459c:	00c00434 	movhi	r3,16
   245a0:	18ffffc4 	addi	r3,r3,-1
   245a4:	88c6703a 	and	r3,r17,r3
   245a8:	183f0a1e 	bne	r3,zero,241d4 <_dtoa_r+0xa8c>
   245ac:	8c5ffc2c 	andhi	r17,r17,32752
   245b0:	883f0826 	beq	r17,zero,241d4 <_dtoa_r+0xa8c>
   245b4:	d9000817 	ldw	r4,32(sp)
   245b8:	d9c00717 	ldw	r7,28(sp)
   245bc:	1023883a 	mov	r17,r2
   245c0:	2089883a 	add	r4,r4,r2
   245c4:	388f883a 	add	r7,r7,r2
   245c8:	d9000815 	stw	r4,32(sp)
   245cc:	d9c00715 	stw	r7,28(sp)
   245d0:	003f0106 	br	241d8 <_dtoa_r+0xa90>
   245d4:	9005883a 	mov	r2,r18
   245d8:	003ed306 	br	24128 <_dtoa_r+0x9e0>
   245dc:	d8800917 	ldw	r2,36(sp)
   245e0:	00be3516 	blt	zero,r2,23eb8 <_dtoa_r+0x770>
   245e4:	1000b61e 	bne	r2,zero,248c0 <_dtoa_r+0x1178>
   245e8:	9009883a 	mov	r4,r18
   245ec:	980b883a 	mov	r5,r19
   245f0:	000d883a 	mov	r6,zero
   245f4:	01d00534 	movhi	r7,16404
   245f8:	00299680 	call	29968 <__muldf3>
   245fc:	d9800317 	ldw	r6,12(sp)
   24600:	1009883a 	mov	r4,r2
   24604:	180b883a 	mov	r5,r3
   24608:	880f883a 	mov	r7,r17
   2460c:	0029f1c0 	call	29f1c <__gedf2>
   24610:	0029883a 	mov	r20,zero
   24614:	002b883a 	mov	r21,zero
   24618:	10007e16 	blt	r2,zero,24814 <_dtoa_r+0x10cc>
   2461c:	d8802117 	ldw	r2,132(sp)
   24620:	b82d883a 	mov	r22,r23
   24624:	0084303a 	nor	r2,zero,r2
   24628:	d8800615 	stw	r2,24(sp)
   2462c:	8009883a 	mov	r4,r16
   24630:	a00b883a 	mov	r5,r20
   24634:	0026c080 	call	26c08 <_Bfree>
   24638:	a83f4b1e 	bne	r21,zero,24368 <_dtoa_r+0xc20>
   2463c:	003de306 	br	23dcc <_dtoa_r+0x684>
   24640:	e00b883a 	mov	r5,fp
   24644:	8009883a 	mov	r4,r16
   24648:	00272240 	call	27224 <__pow5mult>
   2464c:	1039883a 	mov	fp,r2
   24650:	003ed206 	br	2419c <_dtoa_r+0xa54>
   24654:	1000021e 	bne	r2,zero,24660 <_dtoa_r+0xf18>
   24658:	18c0004c 	andi	r3,r3,1
   2465c:	183f271e 	bne	r3,zero,242fc <_dtoa_r+0xbb4>
   24660:	01000c04 	movi	r4,48
   24664:	00000106 	br	2466c <_dtoa_r+0xf24>
   24668:	102d883a 	mov	r22,r2
   2466c:	b0bfffc4 	addi	r2,r22,-1
   24670:	10c00007 	ldb	r3,0(r2)
   24674:	193ffc26 	beq	r3,r4,24668 <_dtoa_r+0xf20>
   24678:	003f3206 	br	24344 <_dtoa_r+0xbfc>
   2467c:	d8c00f17 	ldw	r3,60(sp)
   24680:	18015026 	beq	r3,zero,24bc4 <_dtoa_r+0x147c>
   24684:	10810cc4 	addi	r2,r2,1075
   24688:	dcc00a17 	ldw	r19,40(sp)
   2468c:	dc800817 	ldw	r18,32(sp)
   24690:	003e9706 	br	240f0 <_dtoa_r+0x9a8>
   24694:	b807883a 	mov	r3,r23
   24698:	182b883a 	mov	r21,r3
   2469c:	ddc00717 	ldw	r23,28(sp)
   246a0:	00800e0e 	bge	zero,r2,246dc <_dtoa_r+0xf94>
   246a4:	e00b883a 	mov	r5,fp
   246a8:	01800044 	movi	r6,1
   246ac:	8009883a 	mov	r4,r16
   246b0:	d8c01515 	stw	r3,84(sp)
   246b4:	00273500 	call	27350 <__lshift>
   246b8:	1009883a 	mov	r4,r2
   246bc:	a00b883a 	mov	r5,r20
   246c0:	1039883a 	mov	fp,r2
   246c4:	00274ac0 	call	274ac <__mcmp>
   246c8:	d8c01517 	ldw	r3,84(sp)
   246cc:	0081880e 	bge	zero,r2,24cf0 <_dtoa_r+0x15a8>
   246d0:	00800e44 	movi	r2,57
   246d4:	b0c00c44 	addi	r3,r22,49
   246d8:	a8816326 	beq	r21,r2,24c68 <_dtoa_r+0x1520>
   246dc:	90c00005 	stb	r3,0(r18)
   246e0:	95800044 	addi	r22,r18,1
   246e4:	982b883a 	mov	r21,r19
   246e8:	003f1606 	br	24344 <_dtoa_r+0xbfc>
   246ec:	300b883a 	mov	r5,r6
   246f0:	e009883a 	mov	r4,fp
   246f4:	d9801515 	stw	r6,84(sp)
   246f8:	00274ac0 	call	274ac <__mcmp>
   246fc:	d9801517 	ldw	r6,84(sp)
   24700:	8009883a 	mov	r4,r16
   24704:	d8801515 	stw	r2,84(sp)
   24708:	300b883a 	mov	r5,r6
   2470c:	0026c080 	call	26c08 <_Bfree>
   24710:	d8801517 	ldw	r2,84(sp)
   24714:	103f6d1e 	bne	r2,zero,244cc <_dtoa_r+0xd84>
   24718:	d9c00417 	ldw	r7,16(sp)
   2471c:	383f6b1e 	bne	r7,zero,244cc <_dtoa_r+0xd84>
   24720:	d8c00317 	ldw	r3,12(sp)
   24724:	183f691e 	bne	r3,zero,244cc <_dtoa_r+0xd84>
   24728:	b807883a 	mov	r3,r23
   2472c:	00800e44 	movi	r2,57
   24730:	ddc00717 	ldw	r23,28(sp)
   24734:	18814c26 	beq	r3,r2,24c68 <_dtoa_r+0x1520>
   24738:	057fe80e 	bge	zero,r21,246dc <_dtoa_r+0xf94>
   2473c:	b0c00c44 	addi	r3,r22,49
   24740:	003fe606 	br	246dc <_dtoa_r+0xf94>
   24744:	880b883a 	mov	r5,r17
   24748:	8009883a 	mov	r4,r16
   2474c:	01800284 	movi	r6,10
   24750:	000f883a 	mov	r7,zero
   24754:	0026c300 	call	26c30 <__multadd>
   24758:	1023883a 	mov	r17,r2
   2475c:	1027883a 	mov	r19,r2
   24760:	a825883a 	mov	r18,r21
   24764:	003f4506 	br	2447c <_dtoa_r+0xd34>
   24768:	e009883a 	mov	r4,fp
   2476c:	a00b883a 	mov	r5,r20
   24770:	00274ac0 	call	274ac <__mcmp>
   24774:	103ebc0e 	bge	r2,zero,24268 <_dtoa_r+0xb20>
   24778:	e00b883a 	mov	r5,fp
   2477c:	8009883a 	mov	r4,r16
   24780:	01800284 	movi	r6,10
   24784:	000f883a 	mov	r7,zero
   24788:	0026c300 	call	26c30 <__multadd>
   2478c:	1039883a 	mov	fp,r2
   24790:	d8800617 	ldw	r2,24(sp)
   24794:	d8c00c17 	ldw	r3,48(sp)
   24798:	10bfffc4 	addi	r2,r2,-1
   2479c:	d8800615 	stw	r2,24(sp)
   247a0:	1801571e 	bne	r3,zero,24d00 <_dtoa_r+0x15b8>
   247a4:	d9c00e17 	ldw	r7,56(sp)
   247a8:	d9c00915 	stw	r7,36(sp)
   247ac:	003eae06 	br	24268 <_dtoa_r+0xb20>
   247b0:	a0800417 	ldw	r2,16(r20)
   247b4:	10800104 	addi	r2,r2,4
   247b8:	1085883a 	add	r2,r2,r2
   247bc:	1085883a 	add	r2,r2,r2
   247c0:	a085883a 	add	r2,r20,r2
   247c4:	11000017 	ldw	r4,0(r2)
   247c8:	0026e780 	call	26e78 <__hi0bits>
   247cc:	00c00804 	movi	r3,32
   247d0:	1885c83a 	sub	r2,r3,r2
   247d4:	003e8306 	br	241e4 <_dtoa_r+0xa9c>
   247d8:	d9c00417 	ldw	r7,16(sp)
   247dc:	00800084 	movi	r2,2
   247e0:	11fea30e 	bge	r2,r7,24270 <_dtoa_r+0xb28>
   247e4:	d8800917 	ldw	r2,36(sp)
   247e8:	103f8c1e 	bne	r2,zero,2461c <_dtoa_r+0xed4>
   247ec:	a00b883a 	mov	r5,r20
   247f0:	8009883a 	mov	r4,r16
   247f4:	01800144 	movi	r6,5
   247f8:	000f883a 	mov	r7,zero
   247fc:	0026c300 	call	26c30 <__multadd>
   24800:	e009883a 	mov	r4,fp
   24804:	100b883a 	mov	r5,r2
   24808:	1029883a 	mov	r20,r2
   2480c:	00274ac0 	call	274ac <__mcmp>
   24810:	00bf820e 	bge	zero,r2,2461c <_dtoa_r+0xed4>
   24814:	00800c44 	movi	r2,49
   24818:	b8800005 	stb	r2,0(r23)
   2481c:	d8800617 	ldw	r2,24(sp)
   24820:	bd800044 	addi	r22,r23,1
   24824:	10800044 	addi	r2,r2,1
   24828:	d8800615 	stw	r2,24(sp)
   2482c:	003f7f06 	br	2462c <_dtoa_r+0xee4>
   24830:	dc000417 	ldw	r16,16(sp)
   24834:	003d6506 	br	23dcc <_dtoa_r+0x684>
   24838:	9009883a 	mov	r4,r18
   2483c:	0029fdc0 	call	29fdc <__floatsidf>
   24840:	1009883a 	mov	r4,r2
   24844:	180b883a 	mov	r5,r3
   24848:	980d883a 	mov	r6,r19
   2484c:	a00f883a 	mov	r7,r20
   24850:	00299680 	call	29968 <__muldf3>
   24854:	1009883a 	mov	r4,r2
   24858:	180b883a 	mov	r5,r3
   2485c:	000d883a 	mov	r6,zero
   24860:	01d00734 	movhi	r7,16412
   24864:	00298b40 	call	298b4 <__adddf3>
   24868:	057f3034 	movhi	r21,64704
   2486c:	1025883a 	mov	r18,r2
   24870:	1d6b883a 	add	r21,r3,r21
   24874:	9809883a 	mov	r4,r19
   24878:	a00b883a 	mov	r5,r20
   2487c:	000d883a 	mov	r6,zero
   24880:	01d00534 	movhi	r7,16404
   24884:	00299080 	call	29908 <__subdf3>
   24888:	1009883a 	mov	r4,r2
   2488c:	180b883a 	mov	r5,r3
   24890:	900d883a 	mov	r6,r18
   24894:	a80f883a 	mov	r7,r21
   24898:	1027883a 	mov	r19,r2
   2489c:	1829883a 	mov	r20,r3
   248a0:	0029eb80 	call	29eb8 <__gtdf2>
   248a4:	00806616 	blt	zero,r2,24a40 <_dtoa_r+0x12f8>
   248a8:	a9e0003c 	xorhi	r7,r21,32768
   248ac:	9809883a 	mov	r4,r19
   248b0:	a00b883a 	mov	r5,r20
   248b4:	900d883a 	mov	r6,r18
   248b8:	0029f800 	call	29f80 <__ltdf2>
   248bc:	103d710e 	bge	r2,zero,23e84 <_dtoa_r+0x73c>
   248c0:	0029883a 	mov	r20,zero
   248c4:	002b883a 	mov	r21,zero
   248c8:	003f5406 	br	2461c <_dtoa_r+0xed4>
   248cc:	d9800a17 	ldw	r6,40(sp)
   248d0:	e00b883a 	mov	r5,fp
   248d4:	8009883a 	mov	r4,r16
   248d8:	00272240 	call	27224 <__pow5mult>
   248dc:	1039883a 	mov	fp,r2
   248e0:	003e2e06 	br	2419c <_dtoa_r+0xa54>
   248e4:	d8000c15 	stw	zero,48(sp)
   248e8:	003f2006 	br	2456c <_dtoa_r+0xe24>
   248ec:	00800044 	movi	r2,1
   248f0:	d8800c15 	stw	r2,48(sp)
   248f4:	003c5d06 	br	23a6c <_dtoa_r+0x324>
   248f8:	d8c00a17 	ldw	r3,40(sp)
   248fc:	d9000b17 	ldw	r4,44(sp)
   24900:	dcc00a15 	stw	r19,40(sp)
   24904:	98c5c83a 	sub	r2,r19,r3
   24908:	2089883a 	add	r4,r4,r2
   2490c:	d9000b15 	stw	r4,44(sp)
   24910:	0027883a 	mov	r19,zero
   24914:	003df206 	br	240e0 <_dtoa_r+0x998>
   24918:	d9000317 	ldw	r4,12(sp)
   2491c:	8829883a 	mov	r20,r17
   24920:	04800084 	movi	r18,2
   24924:	d9001015 	stw	r4,64(sp)
   24928:	003c8106 	br	23b30 <_dtoa_r+0x3e8>
   2492c:	04800044 	movi	r18,1
   24930:	dc800e15 	stw	r18,56(sp)
   24934:	dc800915 	stw	r18,36(sp)
   24938:	dc802115 	stw	r18,132(sp)
   2493c:	003f1206 	br	24588 <_dtoa_r+0xe40>
   24940:	d8800617 	ldw	r2,24(sp)
   24944:	00abc83a 	sub	r21,zero,r2
   24948:	a800a426 	beq	r21,zero,24bdc <_dtoa_r+0x1494>
   2494c:	a88003cc 	andi	r2,r21,15
   24950:	100490fa 	slli	r2,r2,3
   24954:	00c001f4 	movhi	r3,7
   24958:	18f2c204 	addi	r3,r3,-13560
   2495c:	d9000317 	ldw	r4,12(sp)
   24960:	1885883a 	add	r2,r3,r2
   24964:	11800017 	ldw	r6,0(r2)
   24968:	11c00117 	ldw	r7,4(r2)
   2496c:	a82bd13a 	srai	r21,r21,4
   24970:	880b883a 	mov	r5,r17
   24974:	00299680 	call	29968 <__muldf3>
   24978:	1027883a 	mov	r19,r2
   2497c:	1829883a 	mov	r20,r3
   24980:	a800e826 	beq	r21,zero,24d24 <_dtoa_r+0x15dc>
   24984:	058001f4 	movhi	r22,7
   24988:	b5b2b804 	addi	r22,r22,-13600
   2498c:	04800084 	movi	r18,2
   24990:	a980004c 	andi	r6,r21,1
   24994:	1009883a 	mov	r4,r2
   24998:	a82bd07a 	srai	r21,r21,1
   2499c:	180b883a 	mov	r5,r3
   249a0:	30000426 	beq	r6,zero,249b4 <_dtoa_r+0x126c>
   249a4:	b1800017 	ldw	r6,0(r22)
   249a8:	b1c00117 	ldw	r7,4(r22)
   249ac:	94800044 	addi	r18,r18,1
   249b0:	00299680 	call	29968 <__muldf3>
   249b4:	b5800204 	addi	r22,r22,8
   249b8:	a83ff51e 	bne	r21,zero,24990 <_dtoa_r+0x1248>
   249bc:	1027883a 	mov	r19,r2
   249c0:	1829883a 	mov	r20,r3
   249c4:	003c7306 	br	23b94 <_dtoa_r+0x44c>
   249c8:	21000044 	addi	r4,r4,1
   249cc:	11000005 	stb	r4,0(r2)
   249d0:	003e5c06 	br	24344 <_dtoa_r+0xbfc>
   249d4:	a9400117 	ldw	r5,4(r21)
   249d8:	8009883a 	mov	r4,r16
   249dc:	0026b600 	call	26b60 <_Balloc>
   249e0:	a9800417 	ldw	r6,16(r21)
   249e4:	11000304 	addi	r4,r2,12
   249e8:	a9400304 	addi	r5,r21,12
   249ec:	31800084 	addi	r6,r6,2
   249f0:	318d883a 	add	r6,r6,r6
   249f4:	318d883a 	add	r6,r6,r6
   249f8:	1023883a 	mov	r17,r2
   249fc:	00267b80 	call	267b8 <memcpy>
   24a00:	8009883a 	mov	r4,r16
   24a04:	880b883a 	mov	r5,r17
   24a08:	01800044 	movi	r6,1
   24a0c:	00273500 	call	27350 <__lshift>
   24a10:	1027883a 	mov	r19,r2
   24a14:	003e8f06 	br	24454 <_dtoa_r+0xd0c>
   24a18:	b807883a 	mov	r3,r23
   24a1c:	00800e44 	movi	r2,57
   24a20:	ddc00717 	ldw	r23,28(sp)
   24a24:	18809026 	beq	r3,r2,24c68 <_dtoa_r+0x1520>
   24a28:	18c00044 	addi	r3,r3,1
   24a2c:	003f2b06 	br	246dc <_dtoa_r+0xf94>
   24a30:	b807883a 	mov	r3,r23
   24a34:	982b883a 	mov	r21,r19
   24a38:	ddc00717 	ldw	r23,28(sp)
   24a3c:	003e2406 	br	242d0 <_dtoa_r+0xb88>
   24a40:	0029883a 	mov	r20,zero
   24a44:	002b883a 	mov	r21,zero
   24a48:	003f7206 	br	24814 <_dtoa_r+0x10cc>
   24a4c:	593fffc4 	addi	r4,r11,-1
   24a50:	200490fa 	slli	r2,r4,3
   24a54:	00c001f4 	movhi	r3,7
   24a58:	18f2c204 	addi	r3,r3,-13560
   24a5c:	d9001015 	stw	r4,64(sp)
   24a60:	1885883a 	add	r2,r3,r2
   24a64:	11000017 	ldw	r4,0(r2)
   24a68:	11400117 	ldw	r5,4(r2)
   24a6c:	900d883a 	mov	r6,r18
   24a70:	a80f883a 	mov	r7,r21
   24a74:	dac01615 	stw	r11,88(sp)
   24a78:	00299680 	call	29968 <__muldf3>
   24a7c:	a00b883a 	mov	r5,r20
   24a80:	9809883a 	mov	r4,r19
   24a84:	d8c01215 	stw	r3,72(sp)
   24a88:	d8801115 	stw	r2,68(sp)
   24a8c:	002a0b00 	call	2a0b0 <__fixdfsi>
   24a90:	1009883a 	mov	r4,r2
   24a94:	1025883a 	mov	r18,r2
   24a98:	0029fdc0 	call	29fdc <__floatsidf>
   24a9c:	9809883a 	mov	r4,r19
   24aa0:	a00b883a 	mov	r5,r20
   24aa4:	100d883a 	mov	r6,r2
   24aa8:	180f883a 	mov	r7,r3
   24aac:	94800c04 	addi	r18,r18,48
   24ab0:	00299080 	call	29908 <__subdf3>
   24ab4:	bc800005 	stb	r18,0(r23)
   24ab8:	dac01617 	ldw	r11,88(sp)
   24abc:	102b883a 	mov	r21,r2
   24ac0:	00800044 	movi	r2,1
   24ac4:	bd800044 	addi	r22,r23,1
   24ac8:	1815883a 	mov	r10,r3
   24acc:	58802226 	beq	r11,r2,24b58 <_dtoa_r+0x1410>
   24ad0:	bad7883a 	add	r11,r23,r11
   24ad4:	dc001415 	stw	r16,80(sp)
   24ad8:	a805883a 	mov	r2,r21
   24adc:	b027883a 	mov	r19,r22
   24ae0:	5821883a 	mov	r16,r11
   24ae4:	882b883a 	mov	r21,r17
   24ae8:	000d883a 	mov	r6,zero
   24aec:	01d00934 	movhi	r7,16420
   24af0:	1009883a 	mov	r4,r2
   24af4:	180b883a 	mov	r5,r3
   24af8:	00299680 	call	29968 <__muldf3>
   24afc:	180b883a 	mov	r5,r3
   24b00:	1009883a 	mov	r4,r2
   24b04:	1829883a 	mov	r20,r3
   24b08:	1023883a 	mov	r17,r2
   24b0c:	002a0b00 	call	2a0b0 <__fixdfsi>
   24b10:	1009883a 	mov	r4,r2
   24b14:	1025883a 	mov	r18,r2
   24b18:	0029fdc0 	call	29fdc <__floatsidf>
   24b1c:	8809883a 	mov	r4,r17
   24b20:	a00b883a 	mov	r5,r20
   24b24:	100d883a 	mov	r6,r2
   24b28:	180f883a 	mov	r7,r3
   24b2c:	94800c04 	addi	r18,r18,48
   24b30:	00299080 	call	29908 <__subdf3>
   24b34:	9cc00044 	addi	r19,r19,1
   24b38:	9cbfffc5 	stb	r18,-1(r19)
   24b3c:	9c3fea1e 	bne	r19,r16,24ae8 <_dtoa_r+0x13a0>
   24b40:	1815883a 	mov	r10,r3
   24b44:	d8c01017 	ldw	r3,64(sp)
   24b48:	dc001417 	ldw	r16,80(sp)
   24b4c:	a823883a 	mov	r17,r21
   24b50:	b0ed883a 	add	r22,r22,r3
   24b54:	102b883a 	mov	r21,r2
   24b58:	d9001117 	ldw	r4,68(sp)
   24b5c:	d9401217 	ldw	r5,72(sp)
   24b60:	000d883a 	mov	r6,zero
   24b64:	01cff834 	movhi	r7,16352
   24b68:	da801515 	stw	r10,84(sp)
   24b6c:	00298b40 	call	298b4 <__adddf3>
   24b70:	da801517 	ldw	r10,84(sp)
   24b74:	1009883a 	mov	r4,r2
   24b78:	180b883a 	mov	r5,r3
   24b7c:	500f883a 	mov	r7,r10
   24b80:	a80d883a 	mov	r6,r21
   24b84:	0029f800 	call	29f80 <__ltdf2>
   24b88:	da801517 	ldw	r10,84(sp)
   24b8c:	10003b0e 	bge	r2,zero,24c7c <_dtoa_r+0x1534>
   24b90:	d9c01317 	ldw	r7,76(sp)
   24b94:	b53fffc3 	ldbu	r20,-1(r22)
   24b98:	d9c00615 	stw	r7,24(sp)
   24b9c:	003d3106 	br	24064 <_dtoa_r+0x91c>
   24ba0:	d8800817 	ldw	r2,32(sp)
   24ba4:	11e5c83a 	sub	r18,r2,r7
   24ba8:	0005883a 	mov	r2,zero
   24bac:	003d5006 	br	240f0 <_dtoa_r+0x9a8>
   24bb0:	05800044 	movi	r22,1
   24bb4:	003dc406 	br	242c8 <_dtoa_r+0xb80>
   24bb8:	a5000044 	addi	r20,r20,1
   24bbc:	15000005 	stb	r20,0(r2)
   24bc0:	003c8206 	br	23dcc <_dtoa_r+0x684>
   24bc4:	d8800217 	ldw	r2,8(sp)
   24bc8:	00c00d84 	movi	r3,54
   24bcc:	dcc00a17 	ldw	r19,40(sp)
   24bd0:	1885c83a 	sub	r2,r3,r2
   24bd4:	dc800817 	ldw	r18,32(sp)
   24bd8:	003d4506 	br	240f0 <_dtoa_r+0x9a8>
   24bdc:	dcc00317 	ldw	r19,12(sp)
   24be0:	8829883a 	mov	r20,r17
   24be4:	04800084 	movi	r18,2
   24be8:	003bea06 	br	23b94 <_dtoa_r+0x44c>
   24bec:	d9000917 	ldw	r4,36(sp)
   24bf0:	203f1126 	beq	r4,zero,24838 <_dtoa_r+0x10f0>
   24bf4:	d9c00e17 	ldw	r7,56(sp)
   24bf8:	01fca20e 	bge	zero,r7,23e84 <_dtoa_r+0x73c>
   24bfc:	a00b883a 	mov	r5,r20
   24c00:	9809883a 	mov	r4,r19
   24c04:	000d883a 	mov	r6,zero
   24c08:	01d00934 	movhi	r7,16420
   24c0c:	00299680 	call	29968 <__muldf3>
   24c10:	91000044 	addi	r4,r18,1
   24c14:	1027883a 	mov	r19,r2
   24c18:	1829883a 	mov	r20,r3
   24c1c:	0029fdc0 	call	29fdc <__floatsidf>
   24c20:	9809883a 	mov	r4,r19
   24c24:	a00b883a 	mov	r5,r20
   24c28:	100d883a 	mov	r6,r2
   24c2c:	180f883a 	mov	r7,r3
   24c30:	00299680 	call	29968 <__muldf3>
   24c34:	1009883a 	mov	r4,r2
   24c38:	180b883a 	mov	r5,r3
   24c3c:	000d883a 	mov	r6,zero
   24c40:	01d00734 	movhi	r7,16412
   24c44:	00298b40 	call	298b4 <__adddf3>
   24c48:	1025883a 	mov	r18,r2
   24c4c:	d8800617 	ldw	r2,24(sp)
   24c50:	057f3034 	movhi	r21,64704
   24c54:	1d6b883a 	add	r21,r3,r21
   24c58:	10bfffc4 	addi	r2,r2,-1
   24c5c:	d8801315 	stw	r2,76(sp)
   24c60:	dac00e17 	ldw	r11,56(sp)
   24c64:	003be706 	br	23c04 <_dtoa_r+0x4bc>
   24c68:	01000e44 	movi	r4,57
   24c6c:	91000005 	stb	r4,0(r18)
   24c70:	95800044 	addi	r22,r18,1
   24c74:	982b883a 	mov	r21,r19
   24c78:	003da106 	br	24300 <_dtoa_r+0xbb8>
   24c7c:	d9801117 	ldw	r6,68(sp)
   24c80:	d9c01217 	ldw	r7,72(sp)
   24c84:	0009883a 	mov	r4,zero
   24c88:	014ff834 	movhi	r5,16352
   24c8c:	da801515 	stw	r10,84(sp)
   24c90:	00299080 	call	29908 <__subdf3>
   24c94:	da801517 	ldw	r10,84(sp)
   24c98:	1009883a 	mov	r4,r2
   24c9c:	180b883a 	mov	r5,r3
   24ca0:	a80d883a 	mov	r6,r21
   24ca4:	500f883a 	mov	r7,r10
   24ca8:	0029eb80 	call	29eb8 <__gtdf2>
   24cac:	00bc750e 	bge	zero,r2,23e84 <_dtoa_r+0x73c>
   24cb0:	01000c04 	movi	r4,48
   24cb4:	00000106 	br	24cbc <_dtoa_r+0x1574>
   24cb8:	102d883a 	mov	r22,r2
   24cbc:	b0bfffc4 	addi	r2,r22,-1
   24cc0:	10c00007 	ldb	r3,0(r2)
   24cc4:	193ffc26 	beq	r3,r4,24cb8 <_dtoa_r+0x1570>
   24cc8:	d8801317 	ldw	r2,76(sp)
   24ccc:	d8800615 	stw	r2,24(sp)
   24cd0:	003c3e06 	br	23dcc <_dtoa_r+0x684>
   24cd4:	d9001317 	ldw	r4,76(sp)
   24cd8:	df001117 	ldw	fp,68(sp)
   24cdc:	d9000615 	stw	r4,24(sp)
   24ce0:	003ce006 	br	24064 <_dtoa_r+0x91c>
   24ce4:	df001117 	ldw	fp,68(sp)
   24ce8:	dc401217 	ldw	r17,72(sp)
   24cec:	003c6506 	br	23e84 <_dtoa_r+0x73c>
   24cf0:	103e7a1e 	bne	r2,zero,246dc <_dtoa_r+0xf94>
   24cf4:	1880004c 	andi	r2,r3,1
   24cf8:	103e7826 	beq	r2,zero,246dc <_dtoa_r+0xf94>
   24cfc:	003e7406 	br	246d0 <_dtoa_r+0xf88>
   24d00:	8009883a 	mov	r4,r16
   24d04:	a80b883a 	mov	r5,r21
   24d08:	01800284 	movi	r6,10
   24d0c:	000f883a 	mov	r7,zero
   24d10:	0026c300 	call	26c30 <__multadd>
   24d14:	d9000e17 	ldw	r4,56(sp)
   24d18:	102b883a 	mov	r21,r2
   24d1c:	d9000915 	stw	r4,36(sp)
   24d20:	003d5106 	br	24268 <_dtoa_r+0xb20>
   24d24:	04800084 	movi	r18,2
   24d28:	003b9a06 	br	23b94 <_dtoa_r+0x44c>
   24d2c:	d8c01317 	ldw	r3,76(sp)
   24d30:	d8c00615 	stw	r3,24(sp)
   24d34:	003ccb06 	br	24064 <_dtoa_r+0x91c>
   24d38:	d8c01317 	ldw	r3,76(sp)
   24d3c:	d8c00615 	stw	r3,24(sp)
   24d40:	003c2206 	br	23dcc <_dtoa_r+0x684>
   24d44:	20fd3826 	beq	r4,r3,24228 <_dtoa_r+0xae0>
   24d48:	00c00f04 	movi	r3,60
   24d4c:	1885c83a 	sub	r2,r3,r2
   24d50:	003da906 	br	243f8 <_dtoa_r+0xcb0>
   24d54:	000b883a 	mov	r5,zero
   24d58:	003b5406 	br	23aac <_dtoa_r+0x364>
   24d5c:	04c00044 	movi	r19,1
   24d60:	003b3b06 	br	23a50 <_dtoa_r+0x308>

00024d64 <_fflush_r>:
   24d64:	defffb04 	addi	sp,sp,-20
   24d68:	dcc00315 	stw	r19,12(sp)
   24d6c:	dc400115 	stw	r17,4(sp)
   24d70:	dfc00415 	stw	ra,16(sp)
   24d74:	dc800215 	stw	r18,8(sp)
   24d78:	dc000015 	stw	r16,0(sp)
   24d7c:	2027883a 	mov	r19,r4
   24d80:	2823883a 	mov	r17,r5
   24d84:	20000226 	beq	r4,zero,24d90 <_fflush_r+0x2c>
   24d88:	20800e17 	ldw	r2,56(r4)
   24d8c:	10005726 	beq	r2,zero,24eec <_fflush_r+0x188>
   24d90:	8880030b 	ldhu	r2,12(r17)
   24d94:	10c0020c 	andi	r3,r2,8
   24d98:	18ffffcc 	andi	r3,r3,65535
   24d9c:	18e0001c 	xori	r3,r3,32768
   24da0:	18e00004 	addi	r3,r3,-32768
   24da4:	1800311e 	bne	r3,zero,24e6c <_fflush_r+0x108>
   24da8:	89000117 	ldw	r4,4(r17)
   24dac:	10c20014 	ori	r3,r2,2048
   24db0:	88c0030d 	sth	r3,12(r17)
   24db4:	180b883a 	mov	r5,r3
   24db8:	0100520e 	bge	zero,r4,24f04 <_fflush_r+0x1a0>
   24dbc:	88c00a17 	ldw	r3,40(r17)
   24dc0:	18002226 	beq	r3,zero,24e4c <_fflush_r+0xe8>
   24dc4:	1084000c 	andi	r2,r2,4096
   24dc8:	10bfffcc 	andi	r2,r2,65535
   24dcc:	10a0001c 	xori	r2,r2,32768
   24dd0:	10a00004 	addi	r2,r2,-32768
   24dd4:	10004e26 	beq	r2,zero,24f10 <_fflush_r+0x1ac>
   24dd8:	8c001417 	ldw	r16,80(r17)
   24ddc:	2940010c 	andi	r5,r5,4
   24de0:	297fffcc 	andi	r5,r5,65535
   24de4:	2960001c 	xori	r5,r5,32768
   24de8:	29600004 	addi	r5,r5,-32768
   24dec:	28000626 	beq	r5,zero,24e08 <_fflush_r+0xa4>
   24df0:	89000117 	ldw	r4,4(r17)
   24df4:	88800c17 	ldw	r2,48(r17)
   24df8:	8121c83a 	sub	r16,r16,r4
   24dfc:	10000226 	beq	r2,zero,24e08 <_fflush_r+0xa4>
   24e00:	88800f17 	ldw	r2,60(r17)
   24e04:	80a1c83a 	sub	r16,r16,r2
   24e08:	89400717 	ldw	r5,28(r17)
   24e0c:	9809883a 	mov	r4,r19
   24e10:	800d883a 	mov	r6,r16
   24e14:	000f883a 	mov	r7,zero
   24e18:	183ee83a 	callr	r3
   24e1c:	8080281e 	bne	r16,r2,24ec0 <_fflush_r+0x15c>
   24e20:	8880030b 	ldhu	r2,12(r17)
   24e24:	88c00417 	ldw	r3,16(r17)
   24e28:	88000115 	stw	zero,4(r17)
   24e2c:	113dffcc 	andi	r4,r2,63487
   24e30:	1084000c 	andi	r2,r2,4096
   24e34:	10bfffcc 	andi	r2,r2,65535
   24e38:	10a0001c 	xori	r2,r2,32768
   24e3c:	8900030d 	sth	r4,12(r17)
   24e40:	88c00015 	stw	r3,0(r17)
   24e44:	10a00004 	addi	r2,r2,-32768
   24e48:	10002c1e 	bne	r2,zero,24efc <_fflush_r+0x198>
   24e4c:	0005883a 	mov	r2,zero
   24e50:	dfc00417 	ldw	ra,16(sp)
   24e54:	dcc00317 	ldw	r19,12(sp)
   24e58:	dc800217 	ldw	r18,8(sp)
   24e5c:	dc400117 	ldw	r17,4(sp)
   24e60:	dc000017 	ldw	r16,0(sp)
   24e64:	dec00504 	addi	sp,sp,20
   24e68:	f800283a 	ret
   24e6c:	8c800417 	ldw	r18,16(r17)
   24e70:	903ff626 	beq	r18,zero,24e4c <_fflush_r+0xe8>
   24e74:	8c000017 	ldw	r16,0(r17)
   24e78:	108000cc 	andi	r2,r2,3
   24e7c:	8c800015 	stw	r18,0(r17)
   24e80:	84a1c83a 	sub	r16,r16,r18
   24e84:	10001b1e 	bne	r2,zero,24ef4 <_fflush_r+0x190>
   24e88:	88800517 	ldw	r2,20(r17)
   24e8c:	88800215 	stw	r2,8(r17)
   24e90:	04000316 	blt	zero,r16,24ea0 <_fflush_r+0x13c>
   24e94:	003fed06 	br	24e4c <_fflush_r+0xe8>
   24e98:	90a5883a 	add	r18,r18,r2
   24e9c:	043feb0e 	bge	zero,r16,24e4c <_fflush_r+0xe8>
   24ea0:	88800917 	ldw	r2,36(r17)
   24ea4:	89400717 	ldw	r5,28(r17)
   24ea8:	800f883a 	mov	r7,r16
   24eac:	900d883a 	mov	r6,r18
   24eb0:	9809883a 	mov	r4,r19
   24eb4:	103ee83a 	callr	r2
   24eb8:	80a1c83a 	sub	r16,r16,r2
   24ebc:	00bff616 	blt	zero,r2,24e98 <_fflush_r+0x134>
   24ec0:	88c0030b 	ldhu	r3,12(r17)
   24ec4:	00bfffc4 	movi	r2,-1
   24ec8:	18c01014 	ori	r3,r3,64
   24ecc:	88c0030d 	sth	r3,12(r17)
   24ed0:	dfc00417 	ldw	ra,16(sp)
   24ed4:	dcc00317 	ldw	r19,12(sp)
   24ed8:	dc800217 	ldw	r18,8(sp)
   24edc:	dc400117 	ldw	r17,4(sp)
   24ee0:	dc000017 	ldw	r16,0(sp)
   24ee4:	dec00504 	addi	sp,sp,20
   24ee8:	f800283a 	ret
   24eec:	00250200 	call	25020 <__sinit>
   24ef0:	003fa706 	br	24d90 <_fflush_r+0x2c>
   24ef4:	0005883a 	mov	r2,zero
   24ef8:	003fe406 	br	24e8c <_fflush_r+0x128>
   24efc:	8c001415 	stw	r16,80(r17)
   24f00:	003fd206 	br	24e4c <_fflush_r+0xe8>
   24f04:	88c00f17 	ldw	r3,60(r17)
   24f08:	00ffac16 	blt	zero,r3,24dbc <_fflush_r+0x58>
   24f0c:	003fcf06 	br	24e4c <_fflush_r+0xe8>
   24f10:	89400717 	ldw	r5,28(r17)
   24f14:	9809883a 	mov	r4,r19
   24f18:	000d883a 	mov	r6,zero
   24f1c:	01c00044 	movi	r7,1
   24f20:	183ee83a 	callr	r3
   24f24:	1021883a 	mov	r16,r2
   24f28:	00bfffc4 	movi	r2,-1
   24f2c:	80800326 	beq	r16,r2,24f3c <_fflush_r+0x1d8>
   24f30:	8940030b 	ldhu	r5,12(r17)
   24f34:	88c00a17 	ldw	r3,40(r17)
   24f38:	003fa806 	br	24ddc <_fflush_r+0x78>
   24f3c:	98c00017 	ldw	r3,0(r19)
   24f40:	00800744 	movi	r2,29
   24f44:	18bfde1e 	bne	r3,r2,24ec0 <_fflush_r+0x15c>
   24f48:	003fc006 	br	24e4c <_fflush_r+0xe8>

00024f4c <fflush>:
   24f4c:	200b883a 	mov	r5,r4
   24f50:	20000426 	beq	r4,zero,24f64 <fflush+0x18>
   24f54:	008001f4 	movhi	r2,7
   24f58:	10b99104 	addi	r2,r2,-6588
   24f5c:	11000017 	ldw	r4,0(r2)
   24f60:	0024d641 	jmpi	24d64 <_fflush_r>
   24f64:	008001f4 	movhi	r2,7
   24f68:	10b99004 	addi	r2,r2,-6592
   24f6c:	11000017 	ldw	r4,0(r2)
   24f70:	014000b4 	movhi	r5,2
   24f74:	29535904 	addi	r5,r5,19812
   24f78:	0025c001 	jmpi	25c00 <_fwalk_reent>

00024f7c <__fp_lock>:
   24f7c:	0005883a 	mov	r2,zero
   24f80:	f800283a 	ret

00024f84 <__fp_unlock>:
   24f84:	0005883a 	mov	r2,zero
   24f88:	f800283a 	ret

00024f8c <_cleanup_r>:
   24f8c:	014000f4 	movhi	r5,3
   24f90:	2961cc04 	addi	r5,r5,-30928
   24f94:	0025b581 	jmpi	25b58 <_fwalk>

00024f98 <__sfmoreglue>:
   24f98:	defffc04 	addi	sp,sp,-16
   24f9c:	dc800215 	stw	r18,8(sp)
   24fa0:	2825883a 	mov	r18,r5
   24fa4:	dc000015 	stw	r16,0(sp)
   24fa8:	01401704 	movi	r5,92
   24fac:	2021883a 	mov	r16,r4
   24fb0:	9009883a 	mov	r4,r18
   24fb4:	dfc00315 	stw	ra,12(sp)
   24fb8:	dc400115 	stw	r17,4(sp)
   24fbc:	00210b00 	call	210b0 <__mulsi3>
   24fc0:	8009883a 	mov	r4,r16
   24fc4:	11400304 	addi	r5,r2,12
   24fc8:	1023883a 	mov	r17,r2
   24fcc:	0025f3c0 	call	25f3c <_malloc_r>
   24fd0:	1021883a 	mov	r16,r2
   24fd4:	10000726 	beq	r2,zero,24ff4 <__sfmoreglue+0x5c>
   24fd8:	11000304 	addi	r4,r2,12
   24fdc:	10000015 	stw	zero,0(r2)
   24fe0:	14800115 	stw	r18,4(r2)
   24fe4:	11000215 	stw	r4,8(r2)
   24fe8:	000b883a 	mov	r5,zero
   24fec:	880d883a 	mov	r6,r17
   24ff0:	0026a840 	call	26a84 <memset>
   24ff4:	8005883a 	mov	r2,r16
   24ff8:	dfc00317 	ldw	ra,12(sp)
   24ffc:	dc800217 	ldw	r18,8(sp)
   25000:	dc400117 	ldw	r17,4(sp)
   25004:	dc000017 	ldw	r16,0(sp)
   25008:	dec00404 	addi	sp,sp,16
   2500c:	f800283a 	ret

00025010 <_cleanup>:
   25010:	008001f4 	movhi	r2,7
   25014:	10b99004 	addi	r2,r2,-6592
   25018:	11000017 	ldw	r4,0(r2)
   2501c:	0024f8c1 	jmpi	24f8c <_cleanup_r>

00025020 <__sinit>:
   25020:	20800e17 	ldw	r2,56(r4)
   25024:	1000401e 	bne	r2,zero,25128 <__sinit+0x108>
   25028:	21400117 	ldw	r5,4(r4)
   2502c:	018000b4 	movhi	r6,2
   25030:	3193e304 	addi	r6,r6,20364
   25034:	20c00217 	ldw	r3,8(r4)
   25038:	21800f15 	stw	r6,60(r4)
   2503c:	2080bb04 	addi	r2,r4,748
   25040:	02400044 	movi	r9,1
   25044:	018000c4 	movi	r6,3
   25048:	2180b915 	stw	r6,740(r4)
   2504c:	2080ba15 	stw	r2,744(r4)
   25050:	22400e15 	stw	r9,56(r4)
   25054:	20800317 	ldw	r2,12(r4)
   25058:	2000b815 	stw	zero,736(r4)
   2505c:	020000f4 	movhi	r8,3
   25060:	42209d04 	addi	r8,r8,-32140
   25064:	01c000f4 	movhi	r7,3
   25068:	39e0b204 	addi	r7,r7,-32056
   2506c:	018000f4 	movhi	r6,3
   25070:	31a0d404 	addi	r6,r6,-31920
   25074:	010000f4 	movhi	r4,3
   25078:	2120eb04 	addi	r4,r4,-31828
   2507c:	02800104 	movi	r10,4
   25080:	28000015 	stw	zero,0(r5)
   25084:	28000115 	stw	zero,4(r5)
   25088:	28000215 	stw	zero,8(r5)
   2508c:	2a80030d 	sth	r10,12(r5)
   25090:	2800038d 	sth	zero,14(r5)
   25094:	28000415 	stw	zero,16(r5)
   25098:	28000515 	stw	zero,20(r5)
   2509c:	28000615 	stw	zero,24(r5)
   250a0:	29400715 	stw	r5,28(r5)
   250a4:	2a000815 	stw	r8,32(r5)
   250a8:	29c00915 	stw	r7,36(r5)
   250ac:	29800a15 	stw	r6,40(r5)
   250b0:	29000b15 	stw	r4,44(r5)
   250b4:	01400284 	movi	r5,10
   250b8:	18000015 	stw	zero,0(r3)
   250bc:	18000115 	stw	zero,4(r3)
   250c0:	18000215 	stw	zero,8(r3)
   250c4:	1940030d 	sth	r5,12(r3)
   250c8:	1a40038d 	sth	r9,14(r3)
   250cc:	18000415 	stw	zero,16(r3)
   250d0:	18000515 	stw	zero,20(r3)
   250d4:	18000615 	stw	zero,24(r3)
   250d8:	18c00715 	stw	r3,28(r3)
   250dc:	1a000815 	stw	r8,32(r3)
   250e0:	19c00915 	stw	r7,36(r3)
   250e4:	19800a15 	stw	r6,40(r3)
   250e8:	19000b15 	stw	r4,44(r3)
   250ec:	00c00484 	movi	r3,18
   250f0:	10c0030d 	sth	r3,12(r2)
   250f4:	00c00084 	movi	r3,2
   250f8:	10000015 	stw	zero,0(r2)
   250fc:	10000115 	stw	zero,4(r2)
   25100:	10000215 	stw	zero,8(r2)
   25104:	10c0038d 	sth	r3,14(r2)
   25108:	10000415 	stw	zero,16(r2)
   2510c:	10000515 	stw	zero,20(r2)
   25110:	10000615 	stw	zero,24(r2)
   25114:	10800715 	stw	r2,28(r2)
   25118:	12000815 	stw	r8,32(r2)
   2511c:	11c00915 	stw	r7,36(r2)
   25120:	11800a15 	stw	r6,40(r2)
   25124:	11000b15 	stw	r4,44(r2)
   25128:	f800283a 	ret

0002512c <__sfp>:
   2512c:	defffc04 	addi	sp,sp,-16
   25130:	008001f4 	movhi	r2,7
   25134:	10b99004 	addi	r2,r2,-6592
   25138:	dc400115 	stw	r17,4(sp)
   2513c:	14400017 	ldw	r17,0(r2)
   25140:	dc800215 	stw	r18,8(sp)
   25144:	dfc00315 	stw	ra,12(sp)
   25148:	88800e17 	ldw	r2,56(r17)
   2514c:	dc000015 	stw	r16,0(sp)
   25150:	2025883a 	mov	r18,r4
   25154:	10002826 	beq	r2,zero,251f8 <__sfp+0xcc>
   25158:	8c40b804 	addi	r17,r17,736
   2515c:	043fffc4 	movi	r16,-1
   25160:	89400117 	ldw	r5,4(r17)
   25164:	88800217 	ldw	r2,8(r17)
   25168:	297fffc4 	addi	r5,r5,-1
   2516c:	28000a16 	blt	r5,zero,25198 <__sfp+0x6c>
   25170:	10c0030f 	ldh	r3,12(r2)
   25174:	18000c26 	beq	r3,zero,251a8 <__sfp+0x7c>
   25178:	10c01a04 	addi	r3,r2,104
   2517c:	00000206 	br	25188 <__sfp+0x5c>
   25180:	19bfe90f 	ldh	r6,-92(r3)
   25184:	30000826 	beq	r6,zero,251a8 <__sfp+0x7c>
   25188:	297fffc4 	addi	r5,r5,-1
   2518c:	18bffd04 	addi	r2,r3,-12
   25190:	18c01704 	addi	r3,r3,92
   25194:	2c3ffa1e 	bne	r5,r16,25180 <__sfp+0x54>
   25198:	88800017 	ldw	r2,0(r17)
   2519c:	10001926 	beq	r2,zero,25204 <__sfp+0xd8>
   251a0:	1023883a 	mov	r17,r2
   251a4:	003fee06 	br	25160 <__sfp+0x34>
   251a8:	00ffffc4 	movi	r3,-1
   251ac:	10c0038d 	sth	r3,14(r2)
   251b0:	00c00044 	movi	r3,1
   251b4:	10c0030d 	sth	r3,12(r2)
   251b8:	10000015 	stw	zero,0(r2)
   251bc:	10000215 	stw	zero,8(r2)
   251c0:	10000115 	stw	zero,4(r2)
   251c4:	10000415 	stw	zero,16(r2)
   251c8:	10000515 	stw	zero,20(r2)
   251cc:	10000615 	stw	zero,24(r2)
   251d0:	10000c15 	stw	zero,48(r2)
   251d4:	10000d15 	stw	zero,52(r2)
   251d8:	10001115 	stw	zero,68(r2)
   251dc:	10001215 	stw	zero,72(r2)
   251e0:	dfc00317 	ldw	ra,12(sp)
   251e4:	dc800217 	ldw	r18,8(sp)
   251e8:	dc400117 	ldw	r17,4(sp)
   251ec:	dc000017 	ldw	r16,0(sp)
   251f0:	dec00404 	addi	sp,sp,16
   251f4:	f800283a 	ret
   251f8:	8809883a 	mov	r4,r17
   251fc:	00250200 	call	25020 <__sinit>
   25200:	003fd506 	br	25158 <__sfp+0x2c>
   25204:	9009883a 	mov	r4,r18
   25208:	01400104 	movi	r5,4
   2520c:	0024f980 	call	24f98 <__sfmoreglue>
   25210:	88800015 	stw	r2,0(r17)
   25214:	103fe21e 	bne	r2,zero,251a0 <__sfp+0x74>
   25218:	00800304 	movi	r2,12
   2521c:	90800015 	stw	r2,0(r18)
   25220:	0005883a 	mov	r2,zero
   25224:	003fee06 	br	251e0 <__sfp+0xb4>

00025228 <__sfp_lock_acquire>:
   25228:	f800283a 	ret

0002522c <__sfp_lock_release>:
   2522c:	f800283a 	ret

00025230 <__sinit_lock_acquire>:
   25230:	f800283a 	ret

00025234 <__sinit_lock_release>:
   25234:	f800283a 	ret

00025238 <__fp_lock_all>:
   25238:	008001f4 	movhi	r2,7
   2523c:	10b99104 	addi	r2,r2,-6588
   25240:	11000017 	ldw	r4,0(r2)
   25244:	014000b4 	movhi	r5,2
   25248:	2953df04 	addi	r5,r5,20348
   2524c:	0025b581 	jmpi	25b58 <_fwalk>

00025250 <__fp_unlock_all>:
   25250:	008001f4 	movhi	r2,7
   25254:	10b99104 	addi	r2,r2,-6588
   25258:	11000017 	ldw	r4,0(r2)
   2525c:	014000b4 	movhi	r5,2
   25260:	2953e104 	addi	r5,r5,20356
   25264:	0025b581 	jmpi	25b58 <_fwalk>

00025268 <_malloc_trim_r>:
   25268:	defffb04 	addi	sp,sp,-20
   2526c:	dcc00315 	stw	r19,12(sp)
   25270:	dc800215 	stw	r18,8(sp)
   25274:	dc400115 	stw	r17,4(sp)
   25278:	dc000015 	stw	r16,0(sp)
   2527c:	2827883a 	mov	r19,r5
   25280:	dfc00415 	stw	ra,16(sp)
   25284:	044001f4 	movhi	r17,7
   25288:	8c740c04 	addi	r17,r17,-12240
   2528c:	2021883a 	mov	r16,r4
   25290:	002aba40 	call	2aba4 <__malloc_lock>
   25294:	88800217 	ldw	r2,8(r17)
   25298:	14800117 	ldw	r18,4(r2)
   2529c:	00bfff04 	movi	r2,-4
   252a0:	90a4703a 	and	r18,r18,r2
   252a4:	9083fbc4 	addi	r2,r18,4079
   252a8:	14e7c83a 	sub	r19,r2,r19
   252ac:	9826d33a 	srli	r19,r19,12
   252b0:	0083ffc4 	movi	r2,4095
   252b4:	9cffffc4 	addi	r19,r19,-1
   252b8:	9826933a 	slli	r19,r19,12
   252bc:	14c0060e 	bge	r2,r19,252d8 <_malloc_trim_r+0x70>
   252c0:	8009883a 	mov	r4,r16
   252c4:	000b883a 	mov	r5,zero
   252c8:	00282100 	call	28210 <_sbrk_r>
   252cc:	88c00217 	ldw	r3,8(r17)
   252d0:	1c87883a 	add	r3,r3,r18
   252d4:	10c00a26 	beq	r2,r3,25300 <_malloc_trim_r+0x98>
   252d8:	8009883a 	mov	r4,r16
   252dc:	002abc40 	call	2abc4 <__malloc_unlock>
   252e0:	0005883a 	mov	r2,zero
   252e4:	dfc00417 	ldw	ra,16(sp)
   252e8:	dcc00317 	ldw	r19,12(sp)
   252ec:	dc800217 	ldw	r18,8(sp)
   252f0:	dc400117 	ldw	r17,4(sp)
   252f4:	dc000017 	ldw	r16,0(sp)
   252f8:	dec00504 	addi	sp,sp,20
   252fc:	f800283a 	ret
   25300:	8009883a 	mov	r4,r16
   25304:	04cbc83a 	sub	r5,zero,r19
   25308:	00282100 	call	28210 <_sbrk_r>
   2530c:	00ffffc4 	movi	r3,-1
   25310:	10c01326 	beq	r2,r3,25360 <_malloc_trim_r+0xf8>
   25314:	008001f4 	movhi	r2,7
   25318:	10b9b304 	addi	r2,r2,-6452
   2531c:	11000017 	ldw	r4,0(r2)
   25320:	88c00217 	ldw	r3,8(r17)
   25324:	94e5c83a 	sub	r18,r18,r19
   25328:	94800054 	ori	r18,r18,1
   2532c:	24e7c83a 	sub	r19,r4,r19
   25330:	1c800115 	stw	r18,4(r3)
   25334:	8009883a 	mov	r4,r16
   25338:	14c00015 	stw	r19,0(r2)
   2533c:	002abc40 	call	2abc4 <__malloc_unlock>
   25340:	00800044 	movi	r2,1
   25344:	dfc00417 	ldw	ra,16(sp)
   25348:	dcc00317 	ldw	r19,12(sp)
   2534c:	dc800217 	ldw	r18,8(sp)
   25350:	dc400117 	ldw	r17,4(sp)
   25354:	dc000017 	ldw	r16,0(sp)
   25358:	dec00504 	addi	sp,sp,20
   2535c:	f800283a 	ret
   25360:	8009883a 	mov	r4,r16
   25364:	000b883a 	mov	r5,zero
   25368:	00282100 	call	28210 <_sbrk_r>
   2536c:	88c00217 	ldw	r3,8(r17)
   25370:	014003c4 	movi	r5,15
   25374:	10c9c83a 	sub	r4,r2,r3
   25378:	293fd70e 	bge	r5,r4,252d8 <_malloc_trim_r+0x70>
   2537c:	014001f4 	movhi	r5,7
   25380:	29799304 	addi	r5,r5,-6580
   25384:	29400017 	ldw	r5,0(r5)
   25388:	21000054 	ori	r4,r4,1
   2538c:	19000115 	stw	r4,4(r3)
   25390:	1145c83a 	sub	r2,r2,r5
   25394:	014001f4 	movhi	r5,7
   25398:	2979b304 	addi	r5,r5,-6452
   2539c:	28800015 	stw	r2,0(r5)
   253a0:	003fcd06 	br	252d8 <_malloc_trim_r+0x70>

000253a4 <_free_r>:
   253a4:	defffd04 	addi	sp,sp,-12
   253a8:	dc400115 	stw	r17,4(sp)
   253ac:	dc000015 	stw	r16,0(sp)
   253b0:	dfc00215 	stw	ra,8(sp)
   253b4:	2821883a 	mov	r16,r5
   253b8:	2023883a 	mov	r17,r4
   253bc:	28004b26 	beq	r5,zero,254ec <_free_r+0x148>
   253c0:	002aba40 	call	2aba4 <__malloc_lock>
   253c4:	823fff17 	ldw	r8,-4(r16)
   253c8:	00bfff84 	movi	r2,-2
   253cc:	81bffe04 	addi	r6,r16,-8
   253d0:	4084703a 	and	r2,r8,r2
   253d4:	3087883a 	add	r3,r6,r2
   253d8:	014001f4 	movhi	r5,7
   253dc:	29740c04 	addi	r5,r5,-12240
   253e0:	1a400117 	ldw	r9,4(r3)
   253e4:	29000217 	ldw	r4,8(r5)
   253e8:	01ffff04 	movi	r7,-4
   253ec:	49ce703a 	and	r7,r9,r7
   253f0:	20c06526 	beq	r4,r3,25588 <_free_r+0x1e4>
   253f4:	19c00115 	stw	r7,4(r3)
   253f8:	4200004c 	andi	r8,r8,1
   253fc:	40003026 	beq	r8,zero,254c0 <_free_r+0x11c>
   25400:	0009883a 	mov	r4,zero
   25404:	19d1883a 	add	r8,r3,r7
   25408:	42000117 	ldw	r8,4(r8)
   2540c:	4200004c 	andi	r8,r8,1
   25410:	4000061e 	bne	r8,zero,2542c <_free_r+0x88>
   25414:	11c5883a 	add	r2,r2,r7
   25418:	19c00217 	ldw	r7,8(r3)
   2541c:	20004e26 	beq	r4,zero,25558 <_free_r+0x1b4>
   25420:	18c00317 	ldw	r3,12(r3)
   25424:	38c00315 	stw	r3,12(r7)
   25428:	19c00215 	stw	r7,8(r3)
   2542c:	11c00054 	ori	r7,r2,1
   25430:	3087883a 	add	r3,r6,r2
   25434:	31c00115 	stw	r7,4(r6)
   25438:	18800015 	stw	r2,0(r3)
   2543c:	20001a1e 	bne	r4,zero,254a8 <_free_r+0x104>
   25440:	00c07fc4 	movi	r3,511
   25444:	18802e2e 	bgeu	r3,r2,25500 <_free_r+0x15c>
   25448:	1006d27a 	srli	r3,r2,9
   2544c:	01000104 	movi	r4,4
   25450:	20c06636 	bltu	r4,r3,255ec <_free_r+0x248>
   25454:	1008d1ba 	srli	r4,r2,6
   25458:	21000e04 	addi	r4,r4,56
   2545c:	210f883a 	add	r7,r4,r4
   25460:	39cf883a 	add	r7,r7,r7
   25464:	39cf883a 	add	r7,r7,r7
   25468:	29cf883a 	add	r7,r5,r7
   2546c:	38c00217 	ldw	r3,8(r7)
   25470:	014001f4 	movhi	r5,7
   25474:	29740c04 	addi	r5,r5,-12240
   25478:	19c06126 	beq	r3,r7,25600 <_free_r+0x25c>
   2547c:	013fff04 	movi	r4,-4
   25480:	19400117 	ldw	r5,4(r3)
   25484:	290a703a 	and	r5,r5,r4
   25488:	1140022e 	bgeu	r2,r5,25494 <_free_r+0xf0>
   2548c:	18c00217 	ldw	r3,8(r3)
   25490:	38fffb1e 	bne	r7,r3,25480 <_free_r+0xdc>
   25494:	18800317 	ldw	r2,12(r3)
   25498:	30800315 	stw	r2,12(r6)
   2549c:	30c00215 	stw	r3,8(r6)
   254a0:	11800215 	stw	r6,8(r2)
   254a4:	19800315 	stw	r6,12(r3)
   254a8:	8809883a 	mov	r4,r17
   254ac:	dfc00217 	ldw	ra,8(sp)
   254b0:	dc400117 	ldw	r17,4(sp)
   254b4:	dc000017 	ldw	r16,0(sp)
   254b8:	dec00304 	addi	sp,sp,12
   254bc:	002abc41 	jmpi	2abc4 <__malloc_unlock>
   254c0:	813ffe17 	ldw	r4,-8(r16)
   254c4:	2a400204 	addi	r9,r5,8
   254c8:	310dc83a 	sub	r6,r6,r4
   254cc:	32000217 	ldw	r8,8(r6)
   254d0:	1105883a 	add	r2,r2,r4
   254d4:	42404326 	beq	r8,r9,255e4 <_free_r+0x240>
   254d8:	32400317 	ldw	r9,12(r6)
   254dc:	0009883a 	mov	r4,zero
   254e0:	42400315 	stw	r9,12(r8)
   254e4:	4a000215 	stw	r8,8(r9)
   254e8:	003fc606 	br	25404 <_free_r+0x60>
   254ec:	dfc00217 	ldw	ra,8(sp)
   254f0:	dc400117 	ldw	r17,4(sp)
   254f4:	dc000017 	ldw	r16,0(sp)
   254f8:	dec00304 	addi	sp,sp,12
   254fc:	f800283a 	ret
   25500:	1004d0fa 	srli	r2,r2,3
   25504:	02000044 	movi	r8,1
   25508:	29c00117 	ldw	r7,4(r5)
   2550c:	1087883a 	add	r3,r2,r2
   25510:	18c7883a 	add	r3,r3,r3
   25514:	1005d0ba 	srai	r2,r2,2
   25518:	18c7883a 	add	r3,r3,r3
   2551c:	28c7883a 	add	r3,r5,r3
   25520:	19000217 	ldw	r4,8(r3)
   25524:	4084983a 	sll	r2,r8,r2
   25528:	30c00315 	stw	r3,12(r6)
   2552c:	31000215 	stw	r4,8(r6)
   25530:	11c4b03a 	or	r2,r2,r7
   25534:	21800315 	stw	r6,12(r4)
   25538:	8809883a 	mov	r4,r17
   2553c:	28800115 	stw	r2,4(r5)
   25540:	19800215 	stw	r6,8(r3)
   25544:	dfc00217 	ldw	ra,8(sp)
   25548:	dc400117 	ldw	r17,4(sp)
   2554c:	dc000017 	ldw	r16,0(sp)
   25550:	dec00304 	addi	sp,sp,12
   25554:	002abc41 	jmpi	2abc4 <__malloc_unlock>
   25558:	020001f4 	movhi	r8,7
   2555c:	42340e04 	addi	r8,r8,-12232
   25560:	3a3faf1e 	bne	r7,r8,25420 <_free_r+0x7c>
   25564:	29800515 	stw	r6,20(r5)
   25568:	29800415 	stw	r6,16(r5)
   2556c:	11000054 	ori	r4,r2,1
   25570:	3087883a 	add	r3,r6,r2
   25574:	31c00315 	stw	r7,12(r6)
   25578:	31c00215 	stw	r7,8(r6)
   2557c:	31000115 	stw	r4,4(r6)
   25580:	18800015 	stw	r2,0(r3)
   25584:	003fc806 	br	254a8 <_free_r+0x104>
   25588:	4200004c 	andi	r8,r8,1
   2558c:	3885883a 	add	r2,r7,r2
   25590:	4000071e 	bne	r8,zero,255b0 <_free_r+0x20c>
   25594:	81fffe17 	ldw	r7,-8(r16)
   25598:	31cdc83a 	sub	r6,r6,r7
   2559c:	30c00317 	ldw	r3,12(r6)
   255a0:	31000217 	ldw	r4,8(r6)
   255a4:	11c5883a 	add	r2,r2,r7
   255a8:	20c00315 	stw	r3,12(r4)
   255ac:	19000215 	stw	r4,8(r3)
   255b0:	00c001f4 	movhi	r3,7
   255b4:	18f99404 	addi	r3,r3,-6576
   255b8:	18c00017 	ldw	r3,0(r3)
   255bc:	11000054 	ori	r4,r2,1
   255c0:	31000115 	stw	r4,4(r6)
   255c4:	29800215 	stw	r6,8(r5)
   255c8:	10ffb736 	bltu	r2,r3,254a8 <_free_r+0x104>
   255cc:	008001f4 	movhi	r2,7
   255d0:	10b9a904 	addi	r2,r2,-6492
   255d4:	11400017 	ldw	r5,0(r2)
   255d8:	8809883a 	mov	r4,r17
   255dc:	00252680 	call	25268 <_malloc_trim_r>
   255e0:	003fb106 	br	254a8 <_free_r+0x104>
   255e4:	01000044 	movi	r4,1
   255e8:	003f8606 	br	25404 <_free_r+0x60>
   255ec:	01000504 	movi	r4,20
   255f0:	20c00b36 	bltu	r4,r3,25620 <_free_r+0x27c>
   255f4:	190016c4 	addi	r4,r3,91
   255f8:	210f883a 	add	r7,r4,r4
   255fc:	003f9806 	br	25460 <_free_r+0xbc>
   25600:	2009d0ba 	srai	r4,r4,2
   25604:	00800044 	movi	r2,1
   25608:	29c00117 	ldw	r7,4(r5)
   2560c:	1108983a 	sll	r4,r2,r4
   25610:	1805883a 	mov	r2,r3
   25614:	21c8b03a 	or	r4,r4,r7
   25618:	29000115 	stw	r4,4(r5)
   2561c:	003f9e06 	br	25498 <_free_r+0xf4>
   25620:	01001504 	movi	r4,84
   25624:	20c00436 	bltu	r4,r3,25638 <_free_r+0x294>
   25628:	1008d33a 	srli	r4,r2,12
   2562c:	21001b84 	addi	r4,r4,110
   25630:	210f883a 	add	r7,r4,r4
   25634:	003f8a06 	br	25460 <_free_r+0xbc>
   25638:	01005504 	movi	r4,340
   2563c:	20c00436 	bltu	r4,r3,25650 <_free_r+0x2ac>
   25640:	1008d3fa 	srli	r4,r2,15
   25644:	21001dc4 	addi	r4,r4,119
   25648:	210f883a 	add	r7,r4,r4
   2564c:	003f8406 	br	25460 <_free_r+0xbc>
   25650:	01015504 	movi	r4,1364
   25654:	20c00436 	bltu	r4,r3,25668 <_free_r+0x2c4>
   25658:	1008d4ba 	srli	r4,r2,18
   2565c:	21001f04 	addi	r4,r4,124
   25660:	210f883a 	add	r7,r4,r4
   25664:	003f7e06 	br	25460 <_free_r+0xbc>
   25668:	01c03f04 	movi	r7,252
   2566c:	01001f84 	movi	r4,126
   25670:	003f7b06 	br	25460 <_free_r+0xbc>

00025674 <__sfvwrite_r>:
   25674:	30800217 	ldw	r2,8(r6)
   25678:	defff504 	addi	sp,sp,-44
   2567c:	dd400615 	stw	r21,24(sp)
   25680:	dd000515 	stw	r20,20(sp)
   25684:	dc000115 	stw	r16,4(sp)
   25688:	dfc00a15 	stw	ra,40(sp)
   2568c:	df000915 	stw	fp,36(sp)
   25690:	ddc00815 	stw	r23,32(sp)
   25694:	dd800715 	stw	r22,28(sp)
   25698:	dcc00415 	stw	r19,16(sp)
   2569c:	dc800315 	stw	r18,12(sp)
   256a0:	dc400215 	stw	r17,8(sp)
   256a4:	3029883a 	mov	r20,r6
   256a8:	202b883a 	mov	r21,r4
   256ac:	2821883a 	mov	r16,r5
   256b0:	10002126 	beq	r2,zero,25738 <__sfvwrite_r+0xc4>
   256b4:	2880030b 	ldhu	r2,12(r5)
   256b8:	10c0020c 	andi	r3,r2,8
   256bc:	18ffffcc 	andi	r3,r3,65535
   256c0:	18e0001c 	xori	r3,r3,32768
   256c4:	18e00004 	addi	r3,r3,-32768
   256c8:	18002826 	beq	r3,zero,2576c <__sfvwrite_r+0xf8>
   256cc:	28c00417 	ldw	r3,16(r5)
   256d0:	18002626 	beq	r3,zero,2576c <__sfvwrite_r+0xf8>
   256d4:	10c0008c 	andi	r3,r2,2
   256d8:	18ffffcc 	andi	r3,r3,65535
   256dc:	18e0001c 	xori	r3,r3,32768
   256e0:	18e00004 	addi	r3,r3,-32768
   256e4:	a4400017 	ldw	r17,0(r20)
   256e8:	18002b26 	beq	r3,zero,25798 <__sfvwrite_r+0x124>
   256ec:	0027883a 	mov	r19,zero
   256f0:	0025883a 	mov	r18,zero
   256f4:	05810004 	movi	r22,1024
   256f8:	980d883a 	mov	r6,r19
   256fc:	a809883a 	mov	r4,r21
   25700:	90004f26 	beq	r18,zero,25840 <__sfvwrite_r+0x1cc>
   25704:	900f883a 	mov	r7,r18
   25708:	81400717 	ldw	r5,28(r16)
   2570c:	b480012e 	bgeu	r22,r18,25714 <__sfvwrite_r+0xa0>
   25710:	01c10004 	movi	r7,1024
   25714:	80800917 	ldw	r2,36(r16)
   25718:	103ee83a 	callr	r2
   2571c:	0080540e 	bge	zero,r2,25870 <__sfvwrite_r+0x1fc>
   25720:	a0c00217 	ldw	r3,8(r20)
   25724:	98a7883a 	add	r19,r19,r2
   25728:	90a5c83a 	sub	r18,r18,r2
   2572c:	1885c83a 	sub	r2,r3,r2
   25730:	a0800215 	stw	r2,8(r20)
   25734:	103ff01e 	bne	r2,zero,256f8 <__sfvwrite_r+0x84>
   25738:	0005883a 	mov	r2,zero
   2573c:	dfc00a17 	ldw	ra,40(sp)
   25740:	df000917 	ldw	fp,36(sp)
   25744:	ddc00817 	ldw	r23,32(sp)
   25748:	dd800717 	ldw	r22,28(sp)
   2574c:	dd400617 	ldw	r21,24(sp)
   25750:	dd000517 	ldw	r20,20(sp)
   25754:	dcc00417 	ldw	r19,16(sp)
   25758:	dc800317 	ldw	r18,12(sp)
   2575c:	dc400217 	ldw	r17,8(sp)
   25760:	dc000117 	ldw	r16,4(sp)
   25764:	dec00b04 	addi	sp,sp,44
   25768:	f800283a 	ret
   2576c:	a809883a 	mov	r4,r21
   25770:	800b883a 	mov	r5,r16
   25774:	00231f80 	call	231f8 <__swsetup_r>
   25778:	1000f01e 	bne	r2,zero,25b3c <__sfvwrite_r+0x4c8>
   2577c:	8080030b 	ldhu	r2,12(r16)
   25780:	a4400017 	ldw	r17,0(r20)
   25784:	10c0008c 	andi	r3,r2,2
   25788:	18ffffcc 	andi	r3,r3,65535
   2578c:	18e0001c 	xori	r3,r3,32768
   25790:	18e00004 	addi	r3,r3,-32768
   25794:	183fd51e 	bne	r3,zero,256ec <__sfvwrite_r+0x78>
   25798:	10c0004c 	andi	r3,r2,1
   2579c:	002d883a 	mov	r22,zero
   257a0:	1800381e 	bne	r3,zero,25884 <__sfvwrite_r+0x210>
   257a4:	0025883a 	mov	r18,zero
   257a8:	90002126 	beq	r18,zero,25830 <__sfvwrite_r+0x1bc>
   257ac:	10c0800c 	andi	r3,r2,512
   257b0:	18ffffcc 	andi	r3,r3,65535
   257b4:	18e0001c 	xori	r3,r3,32768
   257b8:	18e00004 	addi	r3,r3,-32768
   257bc:	84c00217 	ldw	r19,8(r16)
   257c0:	18006b26 	beq	r3,zero,25970 <__sfvwrite_r+0x2fc>
   257c4:	980f883a 	mov	r7,r19
   257c8:	94c08636 	bltu	r18,r19,259e4 <__sfvwrite_r+0x370>
   257cc:	10c1200c 	andi	r3,r2,1152
   257d0:	18009f1e 	bne	r3,zero,25a50 <__sfvwrite_r+0x3dc>
   257d4:	81000017 	ldw	r4,0(r16)
   257d8:	982f883a 	mov	r23,r19
   257dc:	9039883a 	mov	fp,r18
   257e0:	9027883a 	mov	r19,r18
   257e4:	380d883a 	mov	r6,r7
   257e8:	b00b883a 	mov	r5,r22
   257ec:	d9c00015 	stw	r7,0(sp)
   257f0:	00268f80 	call	268f8 <memmove>
   257f4:	d9c00017 	ldw	r7,0(sp)
   257f8:	81000217 	ldw	r4,8(r16)
   257fc:	80800017 	ldw	r2,0(r16)
   25800:	25efc83a 	sub	r23,r4,r23
   25804:	11cf883a 	add	r7,r2,r7
   25808:	85c00215 	stw	r23,8(r16)
   2580c:	81c00015 	stw	r7,0(r16)
   25810:	a0800217 	ldw	r2,8(r20)
   25814:	b72d883a 	add	r22,r22,fp
   25818:	9725c83a 	sub	r18,r18,fp
   2581c:	14e7c83a 	sub	r19,r2,r19
   25820:	a4c00215 	stw	r19,8(r20)
   25824:	983fc426 	beq	r19,zero,25738 <__sfvwrite_r+0xc4>
   25828:	8080030b 	ldhu	r2,12(r16)
   2582c:	903fdf1e 	bne	r18,zero,257ac <__sfvwrite_r+0x138>
   25830:	8d800017 	ldw	r22,0(r17)
   25834:	8c800117 	ldw	r18,4(r17)
   25838:	8c400204 	addi	r17,r17,8
   2583c:	003fda06 	br	257a8 <__sfvwrite_r+0x134>
   25840:	8cc00017 	ldw	r19,0(r17)
   25844:	8c800117 	ldw	r18,4(r17)
   25848:	8c400204 	addi	r17,r17,8
   2584c:	003faa06 	br	256f8 <__sfvwrite_r+0x84>
   25850:	0027bb00 	call	27bb0 <_realloc_r>
   25854:	102f883a 	mov	r23,r2
   25858:	10009f1e 	bne	r2,zero,25ad8 <__sfvwrite_r+0x464>
   2585c:	81400417 	ldw	r5,16(r16)
   25860:	a809883a 	mov	r4,r21
   25864:	00253a40 	call	253a4 <_free_r>
   25868:	00800304 	movi	r2,12
   2586c:	a8800015 	stw	r2,0(r21)
   25870:	80c0030b 	ldhu	r3,12(r16)
   25874:	00bfffc4 	movi	r2,-1
   25878:	18c01014 	ori	r3,r3,64
   2587c:	80c0030d 	sth	r3,12(r16)
   25880:	003fae06 	br	2573c <__sfvwrite_r+0xc8>
   25884:	0007883a 	mov	r3,zero
   25888:	0039883a 	mov	fp,zero
   2588c:	0025883a 	mov	r18,zero
   25890:	90001e26 	beq	r18,zero,2590c <__sfvwrite_r+0x298>
   25894:	18006526 	beq	r3,zero,25a2c <__sfvwrite_r+0x3b8>
   25898:	b02f883a 	mov	r23,r22
   2589c:	9580012e 	bgeu	r18,r22,258a4 <__sfvwrite_r+0x230>
   258a0:	902f883a 	mov	r23,r18
   258a4:	81000017 	ldw	r4,0(r16)
   258a8:	80800417 	ldw	r2,16(r16)
   258ac:	84c00217 	ldw	r19,8(r16)
   258b0:	81c00517 	ldw	r7,20(r16)
   258b4:	1100022e 	bgeu	r2,r4,258c0 <__sfvwrite_r+0x24c>
   258b8:	99e7883a 	add	r19,r19,r7
   258bc:	9dc01816 	blt	r19,r23,25920 <__sfvwrite_r+0x2ac>
   258c0:	b9c03b16 	blt	r23,r7,259b0 <__sfvwrite_r+0x33c>
   258c4:	80800917 	ldw	r2,36(r16)
   258c8:	81400717 	ldw	r5,28(r16)
   258cc:	a809883a 	mov	r4,r21
   258d0:	d8c00015 	stw	r3,0(sp)
   258d4:	e00d883a 	mov	r6,fp
   258d8:	103ee83a 	callr	r2
   258dc:	1027883a 	mov	r19,r2
   258e0:	d8c00017 	ldw	r3,0(sp)
   258e4:	00bfe20e 	bge	zero,r2,25870 <__sfvwrite_r+0x1fc>
   258e8:	b4edc83a 	sub	r22,r22,r19
   258ec:	b0001a26 	beq	r22,zero,25958 <__sfvwrite_r+0x2e4>
   258f0:	a0800217 	ldw	r2,8(r20)
   258f4:	e4f9883a 	add	fp,fp,r19
   258f8:	94e5c83a 	sub	r18,r18,r19
   258fc:	14e7c83a 	sub	r19,r2,r19
   25900:	a4c00215 	stw	r19,8(r20)
   25904:	983f8c26 	beq	r19,zero,25738 <__sfvwrite_r+0xc4>
   25908:	903fe21e 	bne	r18,zero,25894 <__sfvwrite_r+0x220>
   2590c:	8f000017 	ldw	fp,0(r17)
   25910:	8c800117 	ldw	r18,4(r17)
   25914:	0007883a 	mov	r3,zero
   25918:	8c400204 	addi	r17,r17,8
   2591c:	003fdc06 	br	25890 <__sfvwrite_r+0x21c>
   25920:	e00b883a 	mov	r5,fp
   25924:	980d883a 	mov	r6,r19
   25928:	d8c00015 	stw	r3,0(sp)
   2592c:	00268f80 	call	268f8 <memmove>
   25930:	80800017 	ldw	r2,0(r16)
   25934:	a809883a 	mov	r4,r21
   25938:	800b883a 	mov	r5,r16
   2593c:	14c5883a 	add	r2,r2,r19
   25940:	80800015 	stw	r2,0(r16)
   25944:	0024d640 	call	24d64 <_fflush_r>
   25948:	d8c00017 	ldw	r3,0(sp)
   2594c:	103fc81e 	bne	r2,zero,25870 <__sfvwrite_r+0x1fc>
   25950:	b4edc83a 	sub	r22,r22,r19
   25954:	b03fe61e 	bne	r22,zero,258f0 <__sfvwrite_r+0x27c>
   25958:	a809883a 	mov	r4,r21
   2595c:	800b883a 	mov	r5,r16
   25960:	0024d640 	call	24d64 <_fflush_r>
   25964:	103fc21e 	bne	r2,zero,25870 <__sfvwrite_r+0x1fc>
   25968:	0007883a 	mov	r3,zero
   2596c:	003fe006 	br	258f0 <__sfvwrite_r+0x27c>
   25970:	81000017 	ldw	r4,0(r16)
   25974:	80800417 	ldw	r2,16(r16)
   25978:	1100022e 	bgeu	r2,r4,25984 <__sfvwrite_r+0x310>
   2597c:	9839883a 	mov	fp,r19
   25980:	9c806036 	bltu	r19,r18,25b04 <__sfvwrite_r+0x490>
   25984:	81c00517 	ldw	r7,20(r16)
   25988:	91c01c36 	bltu	r18,r7,259fc <__sfvwrite_r+0x388>
   2598c:	80800917 	ldw	r2,36(r16)
   25990:	81400717 	ldw	r5,28(r16)
   25994:	a809883a 	mov	r4,r21
   25998:	b00d883a 	mov	r6,r22
   2599c:	103ee83a 	callr	r2
   259a0:	1027883a 	mov	r19,r2
   259a4:	00bfb20e 	bge	zero,r2,25870 <__sfvwrite_r+0x1fc>
   259a8:	1039883a 	mov	fp,r2
   259ac:	003f9806 	br	25810 <__sfvwrite_r+0x19c>
   259b0:	b80d883a 	mov	r6,r23
   259b4:	e00b883a 	mov	r5,fp
   259b8:	d8c00015 	stw	r3,0(sp)
   259bc:	00268f80 	call	268f8 <memmove>
   259c0:	80800217 	ldw	r2,8(r16)
   259c4:	81000017 	ldw	r4,0(r16)
   259c8:	b827883a 	mov	r19,r23
   259cc:	15c5c83a 	sub	r2,r2,r23
   259d0:	25ef883a 	add	r23,r4,r23
   259d4:	80800215 	stw	r2,8(r16)
   259d8:	85c00015 	stw	r23,0(r16)
   259dc:	d8c00017 	ldw	r3,0(sp)
   259e0:	003fc106 	br	258e8 <__sfvwrite_r+0x274>
   259e4:	81000017 	ldw	r4,0(r16)
   259e8:	902f883a 	mov	r23,r18
   259ec:	9039883a 	mov	fp,r18
   259f0:	9027883a 	mov	r19,r18
   259f4:	900f883a 	mov	r7,r18
   259f8:	003f7a06 	br	257e4 <__sfvwrite_r+0x170>
   259fc:	b00b883a 	mov	r5,r22
   25a00:	900d883a 	mov	r6,r18
   25a04:	00268f80 	call	268f8 <memmove>
   25a08:	80c00217 	ldw	r3,8(r16)
   25a0c:	80800017 	ldw	r2,0(r16)
   25a10:	9027883a 	mov	r19,r18
   25a14:	1c87c83a 	sub	r3,r3,r18
   25a18:	1485883a 	add	r2,r2,r18
   25a1c:	80c00215 	stw	r3,8(r16)
   25a20:	80800015 	stw	r2,0(r16)
   25a24:	9039883a 	mov	fp,r18
   25a28:	003f7906 	br	25810 <__sfvwrite_r+0x19c>
   25a2c:	e009883a 	mov	r4,fp
   25a30:	01400284 	movi	r5,10
   25a34:	900d883a 	mov	r6,r18
   25a38:	00266c00 	call	266c0 <memchr>
   25a3c:	10003c26 	beq	r2,zero,25b30 <__sfvwrite_r+0x4bc>
   25a40:	15800044 	addi	r22,r2,1
   25a44:	b72dc83a 	sub	r22,r22,fp
   25a48:	00c00044 	movi	r3,1
   25a4c:	003f9206 	br	25898 <__sfvwrite_r+0x224>
   25a50:	81000517 	ldw	r4,20(r16)
   25a54:	81400417 	ldw	r5,16(r16)
   25a58:	80c00017 	ldw	r3,0(r16)
   25a5c:	210d883a 	add	r6,r4,r4
   25a60:	3109883a 	add	r4,r6,r4
   25a64:	2026d7fa 	srli	r19,r4,31
   25a68:	1979c83a 	sub	fp,r3,r5
   25a6c:	e1800044 	addi	r6,fp,1
   25a70:	9909883a 	add	r4,r19,r4
   25a74:	2027d07a 	srai	r19,r4,1
   25a78:	3489883a 	add	r4,r6,r18
   25a7c:	980d883a 	mov	r6,r19
   25a80:	9900022e 	bgeu	r19,r4,25a8c <__sfvwrite_r+0x418>
   25a84:	2027883a 	mov	r19,r4
   25a88:	200d883a 	mov	r6,r4
   25a8c:	1081000c 	andi	r2,r2,1024
   25a90:	10bfffcc 	andi	r2,r2,65535
   25a94:	10a0001c 	xori	r2,r2,32768
   25a98:	10a00004 	addi	r2,r2,-32768
   25a9c:	a809883a 	mov	r4,r21
   25aa0:	103f6b26 	beq	r2,zero,25850 <__sfvwrite_r+0x1dc>
   25aa4:	300b883a 	mov	r5,r6
   25aa8:	0025f3c0 	call	25f3c <_malloc_r>
   25aac:	102f883a 	mov	r23,r2
   25ab0:	103f6d26 	beq	r2,zero,25868 <__sfvwrite_r+0x1f4>
   25ab4:	81400417 	ldw	r5,16(r16)
   25ab8:	1009883a 	mov	r4,r2
   25abc:	e00d883a 	mov	r6,fp
   25ac0:	00267b80 	call	267b8 <memcpy>
   25ac4:	8080030b 	ldhu	r2,12(r16)
   25ac8:	00fedfc4 	movi	r3,-1153
   25acc:	10c4703a 	and	r2,r2,r3
   25ad0:	10802014 	ori	r2,r2,128
   25ad4:	8080030d 	sth	r2,12(r16)
   25ad8:	bf09883a 	add	r4,r23,fp
   25adc:	9f07c83a 	sub	r3,r19,fp
   25ae0:	85c00415 	stw	r23,16(r16)
   25ae4:	84c00515 	stw	r19,20(r16)
   25ae8:	81000015 	stw	r4,0(r16)
   25aec:	902f883a 	mov	r23,r18
   25af0:	80c00215 	stw	r3,8(r16)
   25af4:	9039883a 	mov	fp,r18
   25af8:	9027883a 	mov	r19,r18
   25afc:	900f883a 	mov	r7,r18
   25b00:	003f3806 	br	257e4 <__sfvwrite_r+0x170>
   25b04:	b00b883a 	mov	r5,r22
   25b08:	980d883a 	mov	r6,r19
   25b0c:	00268f80 	call	268f8 <memmove>
   25b10:	80800017 	ldw	r2,0(r16)
   25b14:	a809883a 	mov	r4,r21
   25b18:	800b883a 	mov	r5,r16
   25b1c:	14c5883a 	add	r2,r2,r19
   25b20:	80800015 	stw	r2,0(r16)
   25b24:	0024d640 	call	24d64 <_fflush_r>
   25b28:	103f3926 	beq	r2,zero,25810 <__sfvwrite_r+0x19c>
   25b2c:	003f5006 	br	25870 <__sfvwrite_r+0x1fc>
   25b30:	95800044 	addi	r22,r18,1
   25b34:	00c00044 	movi	r3,1
   25b38:	003f5706 	br	25898 <__sfvwrite_r+0x224>
   25b3c:	80c0030b 	ldhu	r3,12(r16)
   25b40:	00bfffc4 	movi	r2,-1
   25b44:	18c01014 	ori	r3,r3,64
   25b48:	80c0030d 	sth	r3,12(r16)
   25b4c:	00c00244 	movi	r3,9
   25b50:	a8c00015 	stw	r3,0(r21)
   25b54:	003ef906 	br	2573c <__sfvwrite_r+0xc8>

00025b58 <_fwalk>:
   25b58:	defff904 	addi	sp,sp,-28
   25b5c:	dcc00315 	stw	r19,12(sp)
   25b60:	24c0b804 	addi	r19,r4,736
   25b64:	dd400515 	stw	r21,20(sp)
   25b68:	dd000415 	stw	r20,16(sp)
   25b6c:	dfc00615 	stw	ra,24(sp)
   25b70:	dc800215 	stw	r18,8(sp)
   25b74:	dc400115 	stw	r17,4(sp)
   25b78:	dc000015 	stw	r16,0(sp)
   25b7c:	282b883a 	mov	r21,r5
   25b80:	0029883a 	mov	r20,zero
   25b84:	00252280 	call	25228 <__sfp_lock_acquire>
   25b88:	98001226 	beq	r19,zero,25bd4 <_fwalk+0x7c>
   25b8c:	04bfffc4 	movi	r18,-1
   25b90:	9c400117 	ldw	r17,4(r19)
   25b94:	9c000217 	ldw	r16,8(r19)
   25b98:	8c7fffc4 	addi	r17,r17,-1
   25b9c:	88000b16 	blt	r17,zero,25bcc <_fwalk+0x74>
   25ba0:	84000304 	addi	r16,r16,12
   25ba4:	80c0000f 	ldh	r3,0(r16)
   25ba8:	8c7fffc4 	addi	r17,r17,-1
   25bac:	813ffd04 	addi	r4,r16,-12
   25bb0:	18000426 	beq	r3,zero,25bc4 <_fwalk+0x6c>
   25bb4:	80c0008f 	ldh	r3,2(r16)
   25bb8:	1c800226 	beq	r3,r18,25bc4 <_fwalk+0x6c>
   25bbc:	a83ee83a 	callr	r21
   25bc0:	a0a8b03a 	or	r20,r20,r2
   25bc4:	84001704 	addi	r16,r16,92
   25bc8:	8cbff61e 	bne	r17,r18,25ba4 <_fwalk+0x4c>
   25bcc:	9cc00017 	ldw	r19,0(r19)
   25bd0:	983fef1e 	bne	r19,zero,25b90 <_fwalk+0x38>
   25bd4:	002522c0 	call	2522c <__sfp_lock_release>
   25bd8:	a005883a 	mov	r2,r20
   25bdc:	dfc00617 	ldw	ra,24(sp)
   25be0:	dd400517 	ldw	r21,20(sp)
   25be4:	dd000417 	ldw	r20,16(sp)
   25be8:	dcc00317 	ldw	r19,12(sp)
   25bec:	dc800217 	ldw	r18,8(sp)
   25bf0:	dc400117 	ldw	r17,4(sp)
   25bf4:	dc000017 	ldw	r16,0(sp)
   25bf8:	dec00704 	addi	sp,sp,28
   25bfc:	f800283a 	ret

00025c00 <_fwalk_reent>:
   25c00:	defff804 	addi	sp,sp,-32
   25c04:	dcc00315 	stw	r19,12(sp)
   25c08:	24c0b804 	addi	r19,r4,736
   25c0c:	dd800615 	stw	r22,24(sp)
   25c10:	dd400515 	stw	r21,20(sp)
   25c14:	dd000415 	stw	r20,16(sp)
   25c18:	dfc00715 	stw	ra,28(sp)
   25c1c:	dc800215 	stw	r18,8(sp)
   25c20:	dc400115 	stw	r17,4(sp)
   25c24:	dc000015 	stw	r16,0(sp)
   25c28:	2029883a 	mov	r20,r4
   25c2c:	282b883a 	mov	r21,r5
   25c30:	002d883a 	mov	r22,zero
   25c34:	00252280 	call	25228 <__sfp_lock_acquire>
   25c38:	98001326 	beq	r19,zero,25c88 <_fwalk_reent+0x88>
   25c3c:	04bfffc4 	movi	r18,-1
   25c40:	9c400117 	ldw	r17,4(r19)
   25c44:	9c000217 	ldw	r16,8(r19)
   25c48:	8c7fffc4 	addi	r17,r17,-1
   25c4c:	88000c16 	blt	r17,zero,25c80 <_fwalk_reent+0x80>
   25c50:	84000304 	addi	r16,r16,12
   25c54:	80c0000f 	ldh	r3,0(r16)
   25c58:	8c7fffc4 	addi	r17,r17,-1
   25c5c:	817ffd04 	addi	r5,r16,-12
   25c60:	18000526 	beq	r3,zero,25c78 <_fwalk_reent+0x78>
   25c64:	80c0008f 	ldh	r3,2(r16)
   25c68:	a009883a 	mov	r4,r20
   25c6c:	1c800226 	beq	r3,r18,25c78 <_fwalk_reent+0x78>
   25c70:	a83ee83a 	callr	r21
   25c74:	b0acb03a 	or	r22,r22,r2
   25c78:	84001704 	addi	r16,r16,92
   25c7c:	8cbff51e 	bne	r17,r18,25c54 <_fwalk_reent+0x54>
   25c80:	9cc00017 	ldw	r19,0(r19)
   25c84:	983fee1e 	bne	r19,zero,25c40 <_fwalk_reent+0x40>
   25c88:	002522c0 	call	2522c <__sfp_lock_release>
   25c8c:	b005883a 	mov	r2,r22
   25c90:	dfc00717 	ldw	ra,28(sp)
   25c94:	dd800617 	ldw	r22,24(sp)
   25c98:	dd400517 	ldw	r21,20(sp)
   25c9c:	dd000417 	ldw	r20,16(sp)
   25ca0:	dcc00317 	ldw	r19,12(sp)
   25ca4:	dc800217 	ldw	r18,8(sp)
   25ca8:	dc400117 	ldw	r17,4(sp)
   25cac:	dc000017 	ldw	r16,0(sp)
   25cb0:	dec00804 	addi	sp,sp,32
   25cb4:	f800283a 	ret

00025cb8 <_setlocale_r>:
   25cb8:	defffc04 	addi	sp,sp,-16
   25cbc:	dc800215 	stw	r18,8(sp)
   25cc0:	dc400115 	stw	r17,4(sp)
   25cc4:	dc000015 	stw	r16,0(sp)
   25cc8:	dfc00315 	stw	ra,12(sp)
   25ccc:	3021883a 	mov	r16,r6
   25cd0:	2023883a 	mov	r17,r4
   25cd4:	2825883a 	mov	r18,r5
   25cd8:	30001626 	beq	r6,zero,25d34 <_setlocale_r+0x7c>
   25cdc:	3009883a 	mov	r4,r6
   25ce0:	014001f4 	movhi	r5,7
   25ce4:	29727f04 	addi	r5,r5,-13828
   25ce8:	00283b40 	call	283b4 <strcmp>
   25cec:	10000a1e 	bne	r2,zero,25d18 <_setlocale_r+0x60>
   25cf0:	8c800c15 	stw	r18,48(r17)
   25cf4:	8c000d15 	stw	r16,52(r17)
   25cf8:	008001f4 	movhi	r2,7
   25cfc:	10b27f04 	addi	r2,r2,-13828
   25d00:	dfc00317 	ldw	ra,12(sp)
   25d04:	dc800217 	ldw	r18,8(sp)
   25d08:	dc400117 	ldw	r17,4(sp)
   25d0c:	dc000017 	ldw	r16,0(sp)
   25d10:	dec00404 	addi	sp,sp,16
   25d14:	f800283a 	ret
   25d18:	8009883a 	mov	r4,r16
   25d1c:	014001f4 	movhi	r5,7
   25d20:	29728904 	addi	r5,r5,-13788
   25d24:	00283b40 	call	283b4 <strcmp>
   25d28:	103ff126 	beq	r2,zero,25cf0 <_setlocale_r+0x38>
   25d2c:	0005883a 	mov	r2,zero
   25d30:	003ff306 	br	25d00 <_setlocale_r+0x48>
   25d34:	008001f4 	movhi	r2,7
   25d38:	10b27f04 	addi	r2,r2,-13828
   25d3c:	dfc00317 	ldw	ra,12(sp)
   25d40:	dc800217 	ldw	r18,8(sp)
   25d44:	dc400117 	ldw	r17,4(sp)
   25d48:	dc000017 	ldw	r16,0(sp)
   25d4c:	dec00404 	addi	sp,sp,16
   25d50:	f800283a 	ret

00025d54 <__locale_charset>:
   25d54:	008001f4 	movhi	r2,7
   25d58:	10b29e04 	addi	r2,r2,-13704
   25d5c:	f800283a 	ret

00025d60 <_localeconv_r>:
   25d60:	008001f4 	movhi	r2,7
   25d64:	10b2a204 	addi	r2,r2,-13688
   25d68:	f800283a 	ret

00025d6c <setlocale>:
   25d6c:	00c001f4 	movhi	r3,7
   25d70:	18f99104 	addi	r3,r3,-6588
   25d74:	2005883a 	mov	r2,r4
   25d78:	19000017 	ldw	r4,0(r3)
   25d7c:	280d883a 	mov	r6,r5
   25d80:	100b883a 	mov	r5,r2
   25d84:	0025cb81 	jmpi	25cb8 <_setlocale_r>

00025d88 <localeconv>:
   25d88:	008001f4 	movhi	r2,7
   25d8c:	10b2a204 	addi	r2,r2,-13688
   25d90:	f800283a 	ret

00025d94 <__smakebuf_r>:
   25d94:	2880030b 	ldhu	r2,12(r5)
   25d98:	deffed04 	addi	sp,sp,-76
   25d9c:	dc401015 	stw	r17,64(sp)
   25da0:	10c0008c 	andi	r3,r2,2
   25da4:	18ffffcc 	andi	r3,r3,65535
   25da8:	18e0001c 	xori	r3,r3,32768
   25dac:	dc000f15 	stw	r16,60(sp)
   25db0:	dfc01215 	stw	ra,72(sp)
   25db4:	dc801115 	stw	r18,68(sp)
   25db8:	18e00004 	addi	r3,r3,-32768
   25dbc:	2821883a 	mov	r16,r5
   25dc0:	2023883a 	mov	r17,r4
   25dc4:	1800381e 	bne	r3,zero,25ea8 <__smakebuf_r+0x114>
   25dc8:	2940038f 	ldh	r5,14(r5)
   25dcc:	28002d16 	blt	r5,zero,25e84 <__smakebuf_r+0xf0>
   25dd0:	d80d883a 	mov	r6,sp
   25dd4:	00287440 	call	28744 <_fstat_r>
   25dd8:	10002916 	blt	r2,zero,25e80 <__smakebuf_r+0xec>
   25ddc:	d8800117 	ldw	r2,4(sp)
   25de0:	00e00014 	movui	r3,32768
   25de4:	10bc000c 	andi	r2,r2,61440
   25de8:	10c03c26 	beq	r2,r3,25edc <__smakebuf_r+0x148>
   25dec:	80c0030b 	ldhu	r3,12(r16)
   25df0:	18c20014 	ori	r3,r3,2048
   25df4:	80c0030d 	sth	r3,12(r16)
   25df8:	00c80004 	movi	r3,8192
   25dfc:	10c00c1e 	bne	r2,r3,25e30 <__smakebuf_r+0x9c>
   25e00:	8140038f 	ldh	r5,14(r16)
   25e04:	8809883a 	mov	r4,r17
   25e08:	00287ac0 	call	287ac <_isatty_r>
   25e0c:	10000826 	beq	r2,zero,25e30 <__smakebuf_r+0x9c>
   25e10:	80c0030b 	ldhu	r3,12(r16)
   25e14:	808010c4 	addi	r2,r16,67
   25e18:	80800015 	stw	r2,0(r16)
   25e1c:	18c00054 	ori	r3,r3,1
   25e20:	80800415 	stw	r2,16(r16)
   25e24:	00800044 	movi	r2,1
   25e28:	80c0030d 	sth	r3,12(r16)
   25e2c:	80800515 	stw	r2,20(r16)
   25e30:	04810004 	movi	r18,1024
   25e34:	8809883a 	mov	r4,r17
   25e38:	900b883a 	mov	r5,r18
   25e3c:	0025f3c0 	call	25f3c <_malloc_r>
   25e40:	10003026 	beq	r2,zero,25f04 <__smakebuf_r+0x170>
   25e44:	80c0030b 	ldhu	r3,12(r16)
   25e48:	010000b4 	movhi	r4,2
   25e4c:	2113e304 	addi	r4,r4,20364
   25e50:	89000f15 	stw	r4,60(r17)
   25e54:	18c02014 	ori	r3,r3,128
   25e58:	80c0030d 	sth	r3,12(r16)
   25e5c:	80800015 	stw	r2,0(r16)
   25e60:	80800415 	stw	r2,16(r16)
   25e64:	84800515 	stw	r18,20(r16)
   25e68:	dfc01217 	ldw	ra,72(sp)
   25e6c:	dc801117 	ldw	r18,68(sp)
   25e70:	dc401017 	ldw	r17,64(sp)
   25e74:	dc000f17 	ldw	r16,60(sp)
   25e78:	dec01304 	addi	sp,sp,76
   25e7c:	f800283a 	ret
   25e80:	8080030b 	ldhu	r2,12(r16)
   25e84:	10c0200c 	andi	r3,r2,128
   25e88:	18ffffcc 	andi	r3,r3,65535
   25e8c:	18e0001c 	xori	r3,r3,32768
   25e90:	18e00004 	addi	r3,r3,-32768
   25e94:	18000f1e 	bne	r3,zero,25ed4 <__smakebuf_r+0x140>
   25e98:	04810004 	movi	r18,1024
   25e9c:	10820014 	ori	r2,r2,2048
   25ea0:	8080030d 	sth	r2,12(r16)
   25ea4:	003fe306 	br	25e34 <__smakebuf_r+0xa0>
   25ea8:	288010c4 	addi	r2,r5,67
   25eac:	28800015 	stw	r2,0(r5)
   25eb0:	28800415 	stw	r2,16(r5)
   25eb4:	00800044 	movi	r2,1
   25eb8:	28800515 	stw	r2,20(r5)
   25ebc:	dfc01217 	ldw	ra,72(sp)
   25ec0:	dc801117 	ldw	r18,68(sp)
   25ec4:	dc401017 	ldw	r17,64(sp)
   25ec8:	dc000f17 	ldw	r16,60(sp)
   25ecc:	dec01304 	addi	sp,sp,76
   25ed0:	f800283a 	ret
   25ed4:	04801004 	movi	r18,64
   25ed8:	003ff006 	br	25e9c <__smakebuf_r+0x108>
   25edc:	81000a17 	ldw	r4,40(r16)
   25ee0:	00c000f4 	movhi	r3,3
   25ee4:	18e0d404 	addi	r3,r3,-31920
   25ee8:	20ffc01e 	bne	r4,r3,25dec <__smakebuf_r+0x58>
   25eec:	8080030b 	ldhu	r2,12(r16)
   25ef0:	00c10004 	movi	r3,1024
   25ef4:	80c01315 	stw	r3,76(r16)
   25ef8:	10c4b03a 	or	r2,r2,r3
   25efc:	8080030d 	sth	r2,12(r16)
   25f00:	003fcb06 	br	25e30 <__smakebuf_r+0x9c>
   25f04:	8080030b 	ldhu	r2,12(r16)
   25f08:	10c0800c 	andi	r3,r2,512
   25f0c:	18ffffcc 	andi	r3,r3,65535
   25f10:	18e0001c 	xori	r3,r3,32768
   25f14:	18e00004 	addi	r3,r3,-32768
   25f18:	183fd31e 	bne	r3,zero,25e68 <__smakebuf_r+0xd4>
   25f1c:	10800094 	ori	r2,r2,2
   25f20:	80c010c4 	addi	r3,r16,67
   25f24:	8080030d 	sth	r2,12(r16)
   25f28:	00800044 	movi	r2,1
   25f2c:	80c00015 	stw	r3,0(r16)
   25f30:	80c00415 	stw	r3,16(r16)
   25f34:	80800515 	stw	r2,20(r16)
   25f38:	003fcb06 	br	25e68 <__smakebuf_r+0xd4>

00025f3c <_malloc_r>:
   25f3c:	defff604 	addi	sp,sp,-40
   25f40:	dc800215 	stw	r18,8(sp)
   25f44:	dfc00915 	stw	ra,36(sp)
   25f48:	df000815 	stw	fp,32(sp)
   25f4c:	ddc00715 	stw	r23,28(sp)
   25f50:	dd800615 	stw	r22,24(sp)
   25f54:	dd400515 	stw	r21,20(sp)
   25f58:	dd000415 	stw	r20,16(sp)
   25f5c:	dcc00315 	stw	r19,12(sp)
   25f60:	dc400115 	stw	r17,4(sp)
   25f64:	dc000015 	stw	r16,0(sp)
   25f68:	288002c4 	addi	r2,r5,11
   25f6c:	00c00584 	movi	r3,22
   25f70:	2025883a 	mov	r18,r4
   25f74:	18802b2e 	bgeu	r3,r2,26024 <_malloc_r+0xe8>
   25f78:	047ffe04 	movi	r17,-8
   25f7c:	1462703a 	and	r17,r2,r17
   25f80:	88002a16 	blt	r17,zero,2602c <_malloc_r+0xf0>
   25f84:	89402936 	bltu	r17,r5,2602c <_malloc_r+0xf0>
   25f88:	9009883a 	mov	r4,r18
   25f8c:	002aba40 	call	2aba4 <__malloc_lock>
   25f90:	00807dc4 	movi	r2,503
   25f94:	14402936 	bltu	r2,r17,2603c <_malloc_r+0x100>
   25f98:	8808d0fa 	srli	r4,r17,3
   25f9c:	04c001f4 	movhi	r19,7
   25fa0:	9cf40c04 	addi	r19,r19,-12240
   25fa4:	2105883a 	add	r2,r4,r4
   25fa8:	1085883a 	add	r2,r2,r2
   25fac:	1085883a 	add	r2,r2,r2
   25fb0:	9885883a 	add	r2,r19,r2
   25fb4:	14000317 	ldw	r16,12(r2)
   25fb8:	80815526 	beq	r16,r2,26510 <_malloc_r+0x5d4>
   25fbc:	81000117 	ldw	r4,4(r16)
   25fc0:	00bfff04 	movi	r2,-4
   25fc4:	80c00317 	ldw	r3,12(r16)
   25fc8:	2084703a 	and	r2,r4,r2
   25fcc:	8085883a 	add	r2,r16,r2
   25fd0:	11800117 	ldw	r6,4(r2)
   25fd4:	81400217 	ldw	r5,8(r16)
   25fd8:	9009883a 	mov	r4,r18
   25fdc:	31800054 	ori	r6,r6,1
   25fe0:	11800115 	stw	r6,4(r2)
   25fe4:	28c00315 	stw	r3,12(r5)
   25fe8:	19400215 	stw	r5,8(r3)
   25fec:	002abc40 	call	2abc4 <__malloc_unlock>
   25ff0:	80800204 	addi	r2,r16,8
   25ff4:	dfc00917 	ldw	ra,36(sp)
   25ff8:	df000817 	ldw	fp,32(sp)
   25ffc:	ddc00717 	ldw	r23,28(sp)
   26000:	dd800617 	ldw	r22,24(sp)
   26004:	dd400517 	ldw	r21,20(sp)
   26008:	dd000417 	ldw	r20,16(sp)
   2600c:	dcc00317 	ldw	r19,12(sp)
   26010:	dc800217 	ldw	r18,8(sp)
   26014:	dc400117 	ldw	r17,4(sp)
   26018:	dc000017 	ldw	r16,0(sp)
   2601c:	dec00a04 	addi	sp,sp,40
   26020:	f800283a 	ret
   26024:	04400404 	movi	r17,16
   26028:	897fd72e 	bgeu	r17,r5,25f88 <_malloc_r+0x4c>
   2602c:	00800304 	movi	r2,12
   26030:	90800015 	stw	r2,0(r18)
   26034:	0005883a 	mov	r2,zero
   26038:	003fee06 	br	25ff4 <_malloc_r+0xb8>
   2603c:	8808d27a 	srli	r4,r17,9
   26040:	20007126 	beq	r4,zero,26208 <_malloc_r+0x2cc>
   26044:	00800104 	movi	r2,4
   26048:	1100eb36 	bltu	r2,r4,263f8 <_malloc_r+0x4bc>
   2604c:	8808d1ba 	srli	r4,r17,6
   26050:	21000e04 	addi	r4,r4,56
   26054:	210b883a 	add	r5,r4,r4
   26058:	294b883a 	add	r5,r5,r5
   2605c:	294b883a 	add	r5,r5,r5
   26060:	04c001f4 	movhi	r19,7
   26064:	9cf40c04 	addi	r19,r19,-12240
   26068:	994b883a 	add	r5,r19,r5
   2606c:	2c000317 	ldw	r16,12(r5)
   26070:	2c000e26 	beq	r5,r16,260ac <_malloc_r+0x170>
   26074:	80c00117 	ldw	r3,4(r16)
   26078:	01ffff04 	movi	r7,-4
   2607c:	018003c4 	movi	r6,15
   26080:	19c6703a 	and	r3,r3,r7
   26084:	1c45c83a 	sub	r2,r3,r17
   26088:	30800716 	blt	r6,r2,260a8 <_malloc_r+0x16c>
   2608c:	1000610e 	bge	r2,zero,26214 <_malloc_r+0x2d8>
   26090:	84000317 	ldw	r16,12(r16)
   26094:	2c000526 	beq	r5,r16,260ac <_malloc_r+0x170>
   26098:	80c00117 	ldw	r3,4(r16)
   2609c:	19c6703a 	and	r3,r3,r7
   260a0:	1c45c83a 	sub	r2,r3,r17
   260a4:	30bff90e 	bge	r6,r2,2608c <_malloc_r+0x150>
   260a8:	213fffc4 	addi	r4,r4,-1
   260ac:	21000044 	addi	r4,r4,1
   260b0:	9c000417 	ldw	r16,16(r19)
   260b4:	00c001f4 	movhi	r3,7
   260b8:	18f40c04 	addi	r3,r3,-12240
   260bc:	1a400204 	addi	r9,r3,8
   260c0:	8240ff26 	beq	r16,r9,264c0 <_malloc_r+0x584>
   260c4:	81400117 	ldw	r5,4(r16)
   260c8:	00bfff04 	movi	r2,-4
   260cc:	018003c4 	movi	r6,15
   260d0:	2884703a 	and	r2,r5,r2
   260d4:	144bc83a 	sub	r5,r2,r17
   260d8:	3140ea16 	blt	r6,r5,26484 <_malloc_r+0x548>
   260dc:	1a400515 	stw	r9,20(r3)
   260e0:	1a400415 	stw	r9,16(r3)
   260e4:	2800570e 	bge	r5,zero,26244 <_malloc_r+0x308>
   260e8:	01407fc4 	movi	r5,511
   260ec:	2880ca36 	bltu	r5,r2,26418 <_malloc_r+0x4dc>
   260f0:	1004d0fa 	srli	r2,r2,3
   260f4:	02000044 	movi	r8,1
   260f8:	19c00117 	ldw	r7,4(r3)
   260fc:	108b883a 	add	r5,r2,r2
   26100:	294b883a 	add	r5,r5,r5
   26104:	1005d0ba 	srai	r2,r2,2
   26108:	294b883a 	add	r5,r5,r5
   2610c:	28cb883a 	add	r5,r5,r3
   26110:	29800217 	ldw	r6,8(r5)
   26114:	4084983a 	sll	r2,r8,r2
   26118:	81400315 	stw	r5,12(r16)
   2611c:	81800215 	stw	r6,8(r16)
   26120:	11c4b03a 	or	r2,r2,r7
   26124:	18800115 	stw	r2,4(r3)
   26128:	2c000215 	stw	r16,8(r5)
   2612c:	34000315 	stw	r16,12(r6)
   26130:	200bd0ba 	srai	r5,r4,2
   26134:	00c00044 	movi	r3,1
   26138:	194a983a 	sll	r5,r3,r5
   2613c:	11404936 	bltu	r2,r5,26264 <_malloc_r+0x328>
   26140:	1146703a 	and	r3,r2,r5
   26144:	18000a1e 	bne	r3,zero,26170 <_malloc_r+0x234>
   26148:	00ffff04 	movi	r3,-4
   2614c:	294b883a 	add	r5,r5,r5
   26150:	20c8703a 	and	r4,r4,r3
   26154:	1146703a 	and	r3,r2,r5
   26158:	21000104 	addi	r4,r4,4
   2615c:	1800041e 	bne	r3,zero,26170 <_malloc_r+0x234>
   26160:	294b883a 	add	r5,r5,r5
   26164:	1146703a 	and	r3,r2,r5
   26168:	21000104 	addi	r4,r4,4
   2616c:	183ffc26 	beq	r3,zero,26160 <_malloc_r+0x224>
   26170:	023fff04 	movi	r8,-4
   26174:	01c003c4 	movi	r7,15
   26178:	2105883a 	add	r2,r4,r4
   2617c:	1085883a 	add	r2,r2,r2
   26180:	1085883a 	add	r2,r2,r2
   26184:	9899883a 	add	r12,r19,r2
   26188:	62800304 	addi	r10,r12,12
   2618c:	2017883a 	mov	r11,r4
   26190:	54000017 	ldw	r16,0(r10)
   26194:	51bffd04 	addi	r6,r10,-12
   26198:	8180041e 	bne	r16,r6,261ac <_malloc_r+0x270>
   2619c:	0000ca06 	br	264c8 <_malloc_r+0x58c>
   261a0:	10001c0e 	bge	r2,zero,26214 <_malloc_r+0x2d8>
   261a4:	84000317 	ldw	r16,12(r16)
   261a8:	8180c726 	beq	r16,r6,264c8 <_malloc_r+0x58c>
   261ac:	80c00117 	ldw	r3,4(r16)
   261b0:	1a06703a 	and	r3,r3,r8
   261b4:	1c45c83a 	sub	r2,r3,r17
   261b8:	38bff90e 	bge	r7,r2,261a0 <_malloc_r+0x264>
   261bc:	81000317 	ldw	r4,12(r16)
   261c0:	81400217 	ldw	r5,8(r16)
   261c4:	8447883a 	add	r3,r16,r17
   261c8:	8c400054 	ori	r17,r17,1
   261cc:	29000315 	stw	r4,12(r5)
   261d0:	21400215 	stw	r5,8(r4)
   261d4:	84400115 	stw	r17,4(r16)
   261d8:	1889883a 	add	r4,r3,r2
   261dc:	11400054 	ori	r5,r2,1
   261e0:	98c00515 	stw	r3,20(r19)
   261e4:	98c00415 	stw	r3,16(r19)
   261e8:	20800015 	stw	r2,0(r4)
   261ec:	1a400315 	stw	r9,12(r3)
   261f0:	1a400215 	stw	r9,8(r3)
   261f4:	19400115 	stw	r5,4(r3)
   261f8:	9009883a 	mov	r4,r18
   261fc:	002abc40 	call	2abc4 <__malloc_unlock>
   26200:	80800204 	addi	r2,r16,8
   26204:	003f7b06 	br	25ff4 <_malloc_r+0xb8>
   26208:	8808d0fa 	srli	r4,r17,3
   2620c:	210b883a 	add	r5,r4,r4
   26210:	003f9106 	br	26058 <_malloc_r+0x11c>
   26214:	80c7883a 	add	r3,r16,r3
   26218:	19400117 	ldw	r5,4(r3)
   2621c:	80800317 	ldw	r2,12(r16)
   26220:	81000217 	ldw	r4,8(r16)
   26224:	29400054 	ori	r5,r5,1
   26228:	19400115 	stw	r5,4(r3)
   2622c:	20800315 	stw	r2,12(r4)
   26230:	11000215 	stw	r4,8(r2)
   26234:	9009883a 	mov	r4,r18
   26238:	002abc40 	call	2abc4 <__malloc_unlock>
   2623c:	80800204 	addi	r2,r16,8
   26240:	003f6c06 	br	25ff4 <_malloc_r+0xb8>
   26244:	8085883a 	add	r2,r16,r2
   26248:	10c00117 	ldw	r3,4(r2)
   2624c:	9009883a 	mov	r4,r18
   26250:	18c00054 	ori	r3,r3,1
   26254:	10c00115 	stw	r3,4(r2)
   26258:	002abc40 	call	2abc4 <__malloc_unlock>
   2625c:	80800204 	addi	r2,r16,8
   26260:	003f6406 	br	25ff4 <_malloc_r+0xb8>
   26264:	9c000217 	ldw	r16,8(r19)
   26268:	00bfff04 	movi	r2,-4
   2626c:	85400117 	ldw	r21,4(r16)
   26270:	a8aa703a 	and	r21,r21,r2
   26274:	ac400336 	bltu	r21,r17,26284 <_malloc_r+0x348>
   26278:	ac45c83a 	sub	r2,r21,r17
   2627c:	00c003c4 	movi	r3,15
   26280:	18805316 	blt	r3,r2,263d0 <_malloc_r+0x494>
   26284:	d5e01917 	ldw	r23,-32668(gp)
   26288:	d0e00317 	ldw	r3,-32756(gp)
   2628c:	00bfffc4 	movi	r2,-1
   26290:	8579883a 	add	fp,r16,r21
   26294:	8def883a 	add	r23,r17,r23
   26298:	1880d226 	beq	r3,r2,265e4 <_malloc_r+0x6a8>
   2629c:	bdc403c4 	addi	r23,r23,4111
   262a0:	00bc0004 	movi	r2,-4096
   262a4:	b8ae703a 	and	r23,r23,r2
   262a8:	9009883a 	mov	r4,r18
   262ac:	b80b883a 	mov	r5,r23
   262b0:	00282100 	call	28210 <_sbrk_r>
   262b4:	1029883a 	mov	r20,r2
   262b8:	00bfffc4 	movi	r2,-1
   262bc:	a080d126 	beq	r20,r2,26604 <_malloc_r+0x6c8>
   262c0:	a7009f36 	bltu	r20,fp,26540 <_malloc_r+0x604>
   262c4:	058001f4 	movhi	r22,7
   262c8:	b5b9b304 	addi	r22,r22,-6452
   262cc:	b0800017 	ldw	r2,0(r22)
   262d0:	b885883a 	add	r2,r23,r2
   262d4:	b0800015 	stw	r2,0(r22)
   262d8:	e500cf26 	beq	fp,r20,26618 <_malloc_r+0x6dc>
   262dc:	d1200317 	ldw	r4,-32756(gp)
   262e0:	00ffffc4 	movi	r3,-1
   262e4:	20c0e026 	beq	r4,r3,26668 <_malloc_r+0x72c>
   262e8:	a739c83a 	sub	fp,r20,fp
   262ec:	1705883a 	add	r2,r2,fp
   262f0:	b0800015 	stw	r2,0(r22)
   262f4:	a08001cc 	andi	r2,r20,7
   262f8:	1000a526 	beq	r2,zero,26590 <_malloc_r+0x654>
   262fc:	a0a9c83a 	sub	r20,r20,r2
   26300:	00c40204 	movi	r3,4104
   26304:	a5000204 	addi	r20,r20,8
   26308:	1885c83a 	sub	r2,r3,r2
   2630c:	a5c7883a 	add	r3,r20,r23
   26310:	18c3ffcc 	andi	r3,r3,4095
   26314:	10efc83a 	sub	r23,r2,r3
   26318:	9009883a 	mov	r4,r18
   2631c:	b80b883a 	mov	r5,r23
   26320:	00282100 	call	28210 <_sbrk_r>
   26324:	00ffffc4 	movi	r3,-1
   26328:	10c0cc26 	beq	r2,r3,2665c <_malloc_r+0x720>
   2632c:	1505c83a 	sub	r2,r2,r20
   26330:	b887883a 	add	r3,r23,r2
   26334:	18c00054 	ori	r3,r3,1
   26338:	b0800017 	ldw	r2,0(r22)
   2633c:	9d000215 	stw	r20,8(r19)
   26340:	a0c00115 	stw	r3,4(r20)
   26344:	b885883a 	add	r2,r23,r2
   26348:	b0800015 	stw	r2,0(r22)
   2634c:	84c00e26 	beq	r16,r19,26388 <_malloc_r+0x44c>
   26350:	00c003c4 	movi	r3,15
   26354:	1d40902e 	bgeu	r3,r21,26598 <_malloc_r+0x65c>
   26358:	ad7ffd04 	addi	r21,r21,-12
   2635c:	013ffe04 	movi	r4,-8
   26360:	a908703a 	and	r4,r21,r4
   26364:	810b883a 	add	r5,r16,r4
   26368:	01800144 	movi	r6,5
   2636c:	29800115 	stw	r6,4(r5)
   26370:	29800215 	stw	r6,8(r5)
   26374:	81400117 	ldw	r5,4(r16)
   26378:	2940004c 	andi	r5,r5,1
   2637c:	214ab03a 	or	r5,r4,r5
   26380:	81400115 	stw	r5,4(r16)
   26384:	1900ae36 	bltu	r3,r4,26640 <_malloc_r+0x704>
   26388:	d0e01817 	ldw	r3,-32672(gp)
   2638c:	1880012e 	bgeu	r3,r2,26394 <_malloc_r+0x458>
   26390:	d0a01815 	stw	r2,-32672(gp)
   26394:	d0e01717 	ldw	r3,-32676(gp)
   26398:	9c000217 	ldw	r16,8(r19)
   2639c:	1880012e 	bgeu	r3,r2,263a4 <_malloc_r+0x468>
   263a0:	d0a01715 	stw	r2,-32676(gp)
   263a4:	80c00117 	ldw	r3,4(r16)
   263a8:	00bfff04 	movi	r2,-4
   263ac:	1886703a 	and	r3,r3,r2
   263b0:	1c45c83a 	sub	r2,r3,r17
   263b4:	1c400236 	bltu	r3,r17,263c0 <_malloc_r+0x484>
   263b8:	00c003c4 	movi	r3,15
   263bc:	18800416 	blt	r3,r2,263d0 <_malloc_r+0x494>
   263c0:	9009883a 	mov	r4,r18
   263c4:	002abc40 	call	2abc4 <__malloc_unlock>
   263c8:	0005883a 	mov	r2,zero
   263cc:	003f0906 	br	25ff4 <_malloc_r+0xb8>
   263d0:	88c00054 	ori	r3,r17,1
   263d4:	10800054 	ori	r2,r2,1
   263d8:	80c00115 	stw	r3,4(r16)
   263dc:	8463883a 	add	r17,r16,r17
   263e0:	88800115 	stw	r2,4(r17)
   263e4:	9009883a 	mov	r4,r18
   263e8:	9c400215 	stw	r17,8(r19)
   263ec:	002abc40 	call	2abc4 <__malloc_unlock>
   263f0:	80800204 	addi	r2,r16,8
   263f4:	003eff06 	br	25ff4 <_malloc_r+0xb8>
   263f8:	00800504 	movi	r2,20
   263fc:	1100492e 	bgeu	r2,r4,26524 <_malloc_r+0x5e8>
   26400:	00801504 	movi	r2,84
   26404:	11005c36 	bltu	r2,r4,26578 <_malloc_r+0x63c>
   26408:	8808d33a 	srli	r4,r17,12
   2640c:	21001b84 	addi	r4,r4,110
   26410:	210b883a 	add	r5,r4,r4
   26414:	003f1006 	br	26058 <_malloc_r+0x11c>
   26418:	1006d27a 	srli	r3,r2,9
   2641c:	01400104 	movi	r5,4
   26420:	28c0432e 	bgeu	r5,r3,26530 <_malloc_r+0x5f4>
   26424:	01400504 	movi	r5,20
   26428:	28c07036 	bltu	r5,r3,265ec <_malloc_r+0x6b0>
   2642c:	194016c4 	addi	r5,r3,91
   26430:	294d883a 	add	r6,r5,r5
   26434:	318d883a 	add	r6,r6,r6
   26438:	318d883a 	add	r6,r6,r6
   2643c:	998d883a 	add	r6,r19,r6
   26440:	30c00217 	ldw	r3,8(r6)
   26444:	01c001f4 	movhi	r7,7
   26448:	39f40c04 	addi	r7,r7,-12240
   2644c:	19805726 	beq	r3,r6,265ac <_malloc_r+0x670>
   26450:	01ffff04 	movi	r7,-4
   26454:	19400117 	ldw	r5,4(r3)
   26458:	29ca703a 	and	r5,r5,r7
   2645c:	1140022e 	bgeu	r2,r5,26468 <_malloc_r+0x52c>
   26460:	18c00217 	ldw	r3,8(r3)
   26464:	30fffb1e 	bne	r6,r3,26454 <_malloc_r+0x518>
   26468:	19400317 	ldw	r5,12(r3)
   2646c:	98800117 	ldw	r2,4(r19)
   26470:	81400315 	stw	r5,12(r16)
   26474:	80c00215 	stw	r3,8(r16)
   26478:	2c000215 	stw	r16,8(r5)
   2647c:	1c000315 	stw	r16,12(r3)
   26480:	003f2b06 	br	26130 <_malloc_r+0x1f4>
   26484:	8445883a 	add	r2,r16,r17
   26488:	8c400054 	ori	r17,r17,1
   2648c:	18800515 	stw	r2,20(r3)
   26490:	18800415 	stw	r2,16(r3)
   26494:	29000054 	ori	r4,r5,1
   26498:	1147883a 	add	r3,r2,r5
   2649c:	84400115 	stw	r17,4(r16)
   264a0:	11000115 	stw	r4,4(r2)
   264a4:	12400315 	stw	r9,12(r2)
   264a8:	12400215 	stw	r9,8(r2)
   264ac:	19400015 	stw	r5,0(r3)
   264b0:	9009883a 	mov	r4,r18
   264b4:	002abc40 	call	2abc4 <__malloc_unlock>
   264b8:	80800204 	addi	r2,r16,8
   264bc:	003ecd06 	br	25ff4 <_malloc_r+0xb8>
   264c0:	18800117 	ldw	r2,4(r3)
   264c4:	003f1a06 	br	26130 <_malloc_r+0x1f4>
   264c8:	5ac00044 	addi	r11,r11,1
   264cc:	588000cc 	andi	r2,r11,3
   264d0:	52800204 	addi	r10,r10,8
   264d4:	103f2e1e 	bne	r2,zero,26190 <_malloc_r+0x254>
   264d8:	20c000cc 	andi	r3,r4,3
   264dc:	60bffe04 	addi	r2,r12,-8
   264e0:	18006f26 	beq	r3,zero,266a0 <_malloc_r+0x764>
   264e4:	63000017 	ldw	r12,0(r12)
   264e8:	213fffc4 	addi	r4,r4,-1
   264ec:	60bffa26 	beq	r12,r2,264d8 <_malloc_r+0x59c>
   264f0:	98800117 	ldw	r2,4(r19)
   264f4:	294b883a 	add	r5,r5,r5
   264f8:	117f5a36 	bltu	r2,r5,26264 <_malloc_r+0x328>
   264fc:	283f5926 	beq	r5,zero,26264 <_malloc_r+0x328>
   26500:	1146703a 	and	r3,r2,r5
   26504:	18001626 	beq	r3,zero,26560 <_malloc_r+0x624>
   26508:	5809883a 	mov	r4,r11
   2650c:	003f1a06 	br	26178 <_malloc_r+0x23c>
   26510:	80800204 	addi	r2,r16,8
   26514:	84000517 	ldw	r16,20(r16)
   26518:	143ea81e 	bne	r2,r16,25fbc <_malloc_r+0x80>
   2651c:	21000084 	addi	r4,r4,2
   26520:	003ee306 	br	260b0 <_malloc_r+0x174>
   26524:	210016c4 	addi	r4,r4,91
   26528:	210b883a 	add	r5,r4,r4
   2652c:	003eca06 	br	26058 <_malloc_r+0x11c>
   26530:	100ad1ba 	srli	r5,r2,6
   26534:	29400e04 	addi	r5,r5,56
   26538:	294d883a 	add	r6,r5,r5
   2653c:	003fbd06 	br	26434 <_malloc_r+0x4f8>
   26540:	84ff6026 	beq	r16,r19,262c4 <_malloc_r+0x388>
   26544:	008001f4 	movhi	r2,7
   26548:	10b40c04 	addi	r2,r2,-12240
   2654c:	14000217 	ldw	r16,8(r2)
   26550:	00bfff04 	movi	r2,-4
   26554:	80c00117 	ldw	r3,4(r16)
   26558:	1886703a 	and	r3,r3,r2
   2655c:	003f9406 	br	263b0 <_malloc_r+0x474>
   26560:	294b883a 	add	r5,r5,r5
   26564:	1146703a 	and	r3,r2,r5
   26568:	5ac00104 	addi	r11,r11,4
   2656c:	183ffc26 	beq	r3,zero,26560 <_malloc_r+0x624>
   26570:	5809883a 	mov	r4,r11
   26574:	003f0006 	br	26178 <_malloc_r+0x23c>
   26578:	00805504 	movi	r2,340
   2657c:	11001336 	bltu	r2,r4,265cc <_malloc_r+0x690>
   26580:	8808d3fa 	srli	r4,r17,15
   26584:	21001dc4 	addi	r4,r4,119
   26588:	210b883a 	add	r5,r4,r4
   2658c:	003eb206 	br	26058 <_malloc_r+0x11c>
   26590:	00840004 	movi	r2,4096
   26594:	003f5d06 	br	2630c <_malloc_r+0x3d0>
   26598:	00800044 	movi	r2,1
   2659c:	a0800115 	stw	r2,4(r20)
   265a0:	a021883a 	mov	r16,r20
   265a4:	0007883a 	mov	r3,zero
   265a8:	003f8106 	br	263b0 <_malloc_r+0x474>
   265ac:	280bd0ba 	srai	r5,r5,2
   265b0:	01800044 	movi	r6,1
   265b4:	38800117 	ldw	r2,4(r7)
   265b8:	314c983a 	sll	r6,r6,r5
   265bc:	180b883a 	mov	r5,r3
   265c0:	3084b03a 	or	r2,r6,r2
   265c4:	38800115 	stw	r2,4(r7)
   265c8:	003fa906 	br	26470 <_malloc_r+0x534>
   265cc:	00815504 	movi	r2,1364
   265d0:	11001836 	bltu	r2,r4,26634 <_malloc_r+0x6f8>
   265d4:	8808d4ba 	srli	r4,r17,18
   265d8:	21001f04 	addi	r4,r4,124
   265dc:	210b883a 	add	r5,r4,r4
   265e0:	003e9d06 	br	26058 <_malloc_r+0x11c>
   265e4:	bdc00404 	addi	r23,r23,16
   265e8:	003f2f06 	br	262a8 <_malloc_r+0x36c>
   265ec:	01401504 	movi	r5,84
   265f0:	28c01f36 	bltu	r5,r3,26670 <_malloc_r+0x734>
   265f4:	100ad33a 	srli	r5,r2,12
   265f8:	29401b84 	addi	r5,r5,110
   265fc:	294d883a 	add	r6,r5,r5
   26600:	003f8c06 	br	26434 <_malloc_r+0x4f8>
   26604:	9c000217 	ldw	r16,8(r19)
   26608:	00bfff04 	movi	r2,-4
   2660c:	80c00117 	ldw	r3,4(r16)
   26610:	1886703a 	and	r3,r3,r2
   26614:	003f6606 	br	263b0 <_malloc_r+0x474>
   26618:	e0c3ffcc 	andi	r3,fp,4095
   2661c:	183f2f1e 	bne	r3,zero,262dc <_malloc_r+0x3a0>
   26620:	98c00217 	ldw	r3,8(r19)
   26624:	bd49883a 	add	r4,r23,r21
   26628:	21000054 	ori	r4,r4,1
   2662c:	19000115 	stw	r4,4(r3)
   26630:	003f5506 	br	26388 <_malloc_r+0x44c>
   26634:	01403f04 	movi	r5,252
   26638:	01001f84 	movi	r4,126
   2663c:	003e8606 	br	26058 <_malloc_r+0x11c>
   26640:	9009883a 	mov	r4,r18
   26644:	81400204 	addi	r5,r16,8
   26648:	00253a40 	call	253a4 <_free_r>
   2664c:	008001f4 	movhi	r2,7
   26650:	10b9b304 	addi	r2,r2,-6452
   26654:	10800017 	ldw	r2,0(r2)
   26658:	003f4b06 	br	26388 <_malloc_r+0x44c>
   2665c:	00c00044 	movi	r3,1
   26660:	002f883a 	mov	r23,zero
   26664:	003f3406 	br	26338 <_malloc_r+0x3fc>
   26668:	d5200315 	stw	r20,-32756(gp)
   2666c:	003f2106 	br	262f4 <_malloc_r+0x3b8>
   26670:	01405504 	movi	r5,340
   26674:	28c00436 	bltu	r5,r3,26688 <_malloc_r+0x74c>
   26678:	100ad3fa 	srli	r5,r2,15
   2667c:	29401dc4 	addi	r5,r5,119
   26680:	294d883a 	add	r6,r5,r5
   26684:	003f6b06 	br	26434 <_malloc_r+0x4f8>
   26688:	01415504 	movi	r5,1364
   2668c:	28c00936 	bltu	r5,r3,266b4 <_malloc_r+0x778>
   26690:	100ad4ba 	srli	r5,r2,18
   26694:	29401f04 	addi	r5,r5,124
   26698:	294d883a 	add	r6,r5,r5
   2669c:	003f6506 	br	26434 <_malloc_r+0x4f8>
   266a0:	98800117 	ldw	r2,4(r19)
   266a4:	0146303a 	nor	r3,zero,r5
   266a8:	1884703a 	and	r2,r3,r2
   266ac:	98800115 	stw	r2,4(r19)
   266b0:	003f9006 	br	264f4 <_malloc_r+0x5b8>
   266b4:	01803f04 	movi	r6,252
   266b8:	01401f84 	movi	r5,126
   266bc:	003f5d06 	br	26434 <_malloc_r+0x4f8>

000266c0 <memchr>:
   266c0:	008000c4 	movi	r2,3
   266c4:	29403fcc 	andi	r5,r5,255
   266c8:	1180282e 	bgeu	r2,r6,2676c <memchr+0xac>
   266cc:	2086703a 	and	r3,r4,r2
   266d0:	1800351e 	bne	r3,zero,267a8 <memchr+0xe8>
   266d4:	2816923a 	slli	r11,r5,8
   266d8:	2093883a 	add	r9,r4,r2
   266dc:	22000084 	addi	r8,r4,2
   266e0:	5957883a 	add	r11,r11,r5
   266e4:	5816923a 	slli	r11,r11,8
   266e8:	20c00044 	addi	r3,r4,1
   266ec:	037fbff4 	movhi	r13,65279
   266f0:	6b7fbfc4 	addi	r13,r13,-257
   266f4:	5957883a 	add	r11,r11,r5
   266f8:	5816923a 	slli	r11,r11,8
   266fc:	03202074 	movhi	r12,32897
   26700:	63202004 	addi	r12,r12,-32640
   26704:	101d883a 	mov	r14,r2
   26708:	5957883a 	add	r11,r11,r5
   2670c:	21c00017 	ldw	r7,0(r4)
   26710:	31bfff04 	addi	r6,r6,-4
   26714:	1805883a 	mov	r2,r3
   26718:	3acef03a 	xor	r7,r7,r11
   2671c:	3b55883a 	add	r10,r7,r13
   26720:	01ce303a 	nor	r7,zero,r7
   26724:	51ce703a 	and	r7,r10,r7
   26728:	3b0e703a 	and	r7,r7,r12
   2672c:	38000a26 	beq	r7,zero,26758 <memchr+0x98>
   26730:	21c00003 	ldbu	r7,0(r4)
   26734:	39401e26 	beq	r7,r5,267b0 <memchr+0xf0>
   26738:	19c00003 	ldbu	r7,0(r3)
   2673c:	39401926 	beq	r7,r5,267a4 <memchr+0xe4>
   26740:	41c00003 	ldbu	r7,0(r8)
   26744:	4005883a 	mov	r2,r8
   26748:	39401626 	beq	r7,r5,267a4 <memchr+0xe4>
   2674c:	49c00003 	ldbu	r7,0(r9)
   26750:	4805883a 	mov	r2,r9
   26754:	39401326 	beq	r7,r5,267a4 <memchr+0xe4>
   26758:	21000104 	addi	r4,r4,4
   2675c:	4a400104 	addi	r9,r9,4
   26760:	42000104 	addi	r8,r8,4
   26764:	18c00104 	addi	r3,r3,4
   26768:	71bfe836 	bltu	r14,r6,2670c <memchr+0x4c>
   2676c:	2005883a 	mov	r2,r4
   26770:	30000a26 	beq	r6,zero,2679c <memchr+0xdc>
   26774:	10c00003 	ldbu	r3,0(r2)
   26778:	19400a26 	beq	r3,r5,267a4 <memchr+0xe4>
   2677c:	10c00044 	addi	r3,r2,1
   26780:	118d883a 	add	r6,r2,r6
   26784:	00000306 	br	26794 <memchr+0xd4>
   26788:	11000003 	ldbu	r4,0(r2)
   2678c:	18c00044 	addi	r3,r3,1
   26790:	21400426 	beq	r4,r5,267a4 <memchr+0xe4>
   26794:	1805883a 	mov	r2,r3
   26798:	19bffb1e 	bne	r3,r6,26788 <memchr+0xc8>
   2679c:	0005883a 	mov	r2,zero
   267a0:	f800283a 	ret
   267a4:	f800283a 	ret
   267a8:	2005883a 	mov	r2,r4
   267ac:	003ff106 	br	26774 <memchr+0xb4>
   267b0:	2005883a 	mov	r2,r4
   267b4:	f800283a 	ret

000267b8 <memcpy>:
   267b8:	defffb04 	addi	sp,sp,-20
   267bc:	dc000015 	stw	r16,0(sp)
   267c0:	dfc00415 	stw	ra,16(sp)
   267c4:	dcc00315 	stw	r19,12(sp)
   267c8:	dc800215 	stw	r18,8(sp)
   267cc:	dc400115 	stw	r17,4(sp)
   267d0:	00c003c4 	movi	r3,15
   267d4:	2021883a 	mov	r16,r4
   267d8:	3005883a 	mov	r2,r6
   267dc:	1980032e 	bgeu	r3,r6,267ec <memcpy+0x34>
   267e0:	2906b03a 	or	r3,r5,r4
   267e4:	18c000cc 	andi	r3,r3,3
   267e8:	18001026 	beq	r3,zero,2682c <memcpy+0x74>
   267ec:	8007883a 	mov	r3,r16
   267f0:	288f883a 	add	r7,r5,r2
   267f4:	10000526 	beq	r2,zero,2680c <memcpy+0x54>
   267f8:	29800003 	ldbu	r6,0(r5)
   267fc:	18c00044 	addi	r3,r3,1
   26800:	29400044 	addi	r5,r5,1
   26804:	19bfffc5 	stb	r6,-1(r3)
   26808:	29fffb1e 	bne	r5,r7,267f8 <memcpy+0x40>
   2680c:	8005883a 	mov	r2,r16
   26810:	dfc00417 	ldw	ra,16(sp)
   26814:	dcc00317 	ldw	r19,12(sp)
   26818:	dc800217 	ldw	r18,8(sp)
   2681c:	dc400117 	ldw	r17,4(sp)
   26820:	dc000017 	ldw	r16,0(sp)
   26824:	dec00504 	addi	sp,sp,20
   26828:	f800283a 	ret
   2682c:	32bffc04 	addi	r10,r6,-16
   26830:	5014d13a 	srli	r10,r10,4
   26834:	20800404 	addi	r2,r4,16
   26838:	2007883a 	mov	r3,r4
   2683c:	5008913a 	slli	r4,r10,4
   26840:	280f883a 	mov	r7,r5
   26844:	1105883a 	add	r2,r2,r4
   26848:	3a000017 	ldw	r8,0(r7)
   2684c:	18c00404 	addi	r3,r3,16
   26850:	39c00404 	addi	r7,r7,16
   26854:	1a3ffc15 	stw	r8,-16(r3)
   26858:	3a3ffd17 	ldw	r8,-12(r7)
   2685c:	1a3ffd15 	stw	r8,-12(r3)
   26860:	3a3ffe17 	ldw	r8,-8(r7)
   26864:	1a3ffe15 	stw	r8,-8(r3)
   26868:	3a3fff17 	ldw	r8,-4(r7)
   2686c:	1a3fff15 	stw	r8,-4(r3)
   26870:	18bff51e 	bne	r3,r2,26848 <memcpy+0x90>
   26874:	52800044 	addi	r10,r10,1
   26878:	5014913a 	slli	r10,r10,4
   2687c:	308003cc 	andi	r2,r6,15
   26880:	010000c4 	movi	r4,3
   26884:	8287883a 	add	r3,r16,r10
   26888:	2a95883a 	add	r10,r5,r10
   2688c:	2080182e 	bgeu	r4,r2,268f0 <memcpy+0x138>
   26890:	147fff04 	addi	r17,r2,-4
   26894:	8808d0ba 	srli	r4,r17,2
   26898:	1a400104 	addi	r9,r3,4
   2689c:	180d883a 	mov	r6,r3
   268a0:	2105883a 	add	r2,r4,r4
   268a4:	1085883a 	add	r2,r2,r2
   268a8:	4893883a 	add	r9,r9,r2
   268ac:	500f883a 	mov	r7,r10
   268b0:	3a000017 	ldw	r8,0(r7)
   268b4:	31800104 	addi	r6,r6,4
   268b8:	39c00104 	addi	r7,r7,4
   268bc:	323fff15 	stw	r8,-4(r6)
   268c0:	327ffb1e 	bne	r6,r9,268b0 <memcpy+0xf8>
   268c4:	20800044 	addi	r2,r4,1
   268c8:	1085883a 	add	r2,r2,r2
   268cc:	1085883a 	add	r2,r2,r2
   268d0:	017fff04 	movi	r5,-4
   268d4:	18a5883a 	add	r18,r3,r2
   268d8:	50a7883a 	add	r19,r10,r2
   268dc:	00210b00 	call	210b0 <__mulsi3>
   268e0:	1445883a 	add	r2,r2,r17
   268e4:	980b883a 	mov	r5,r19
   268e8:	9007883a 	mov	r3,r18
   268ec:	003fc006 	br	267f0 <memcpy+0x38>
   268f0:	500b883a 	mov	r5,r10
   268f4:	003fbe06 	br	267f0 <memcpy+0x38>

000268f8 <memmove>:
   268f8:	defffb04 	addi	sp,sp,-20
   268fc:	dc000015 	stw	r16,0(sp)
   26900:	dfc00415 	stw	ra,16(sp)
   26904:	dcc00315 	stw	r19,12(sp)
   26908:	dc800215 	stw	r18,8(sp)
   2690c:	dc400115 	stw	r17,4(sp)
   26910:	2021883a 	mov	r16,r4
   26914:	300f883a 	mov	r7,r6
   26918:	2900122e 	bgeu	r5,r4,26964 <memmove+0x6c>
   2691c:	2987883a 	add	r3,r5,r6
   26920:	20c0102e 	bgeu	r4,r3,26964 <memmove+0x6c>
   26924:	218b883a 	add	r5,r4,r6
   26928:	1989c83a 	sub	r4,r3,r6
   2692c:	30000526 	beq	r6,zero,26944 <memmove+0x4c>
   26930:	18ffffc4 	addi	r3,r3,-1
   26934:	18800003 	ldbu	r2,0(r3)
   26938:	297fffc4 	addi	r5,r5,-1
   2693c:	28800005 	stb	r2,0(r5)
   26940:	193ffb1e 	bne	r3,r4,26930 <memmove+0x38>
   26944:	8005883a 	mov	r2,r16
   26948:	dfc00417 	ldw	ra,16(sp)
   2694c:	dcc00317 	ldw	r19,12(sp)
   26950:	dc800217 	ldw	r18,8(sp)
   26954:	dc400117 	ldw	r17,4(sp)
   26958:	dc000017 	ldw	r16,0(sp)
   2695c:	dec00504 	addi	sp,sp,20
   26960:	f800283a 	ret
   26964:	008003c4 	movi	r2,15
   26968:	1180422e 	bgeu	r2,r6,26a74 <memmove+0x17c>
   2696c:	2c04b03a 	or	r2,r5,r16
   26970:	108000cc 	andi	r2,r2,3
   26974:	10003f1e 	bne	r2,zero,26a74 <memmove+0x17c>
   26978:	32bffc04 	addi	r10,r6,-16
   2697c:	5014d13a 	srli	r10,r10,4
   26980:	81000404 	addi	r4,r16,16
   26984:	8007883a 	mov	r3,r16
   26988:	5004913a 	slli	r2,r10,4
   2698c:	280f883a 	mov	r7,r5
   26990:	2089883a 	add	r4,r4,r2
   26994:	38800017 	ldw	r2,0(r7)
   26998:	18c00404 	addi	r3,r3,16
   2699c:	39c00404 	addi	r7,r7,16
   269a0:	18bffc15 	stw	r2,-16(r3)
   269a4:	38bffd17 	ldw	r2,-12(r7)
   269a8:	18bffd15 	stw	r2,-12(r3)
   269ac:	38bffe17 	ldw	r2,-8(r7)
   269b0:	18bffe15 	stw	r2,-8(r3)
   269b4:	38bfff17 	ldw	r2,-4(r7)
   269b8:	18bfff15 	stw	r2,-4(r3)
   269bc:	193ff51e 	bne	r3,r4,26994 <memmove+0x9c>
   269c0:	52800044 	addi	r10,r10,1
   269c4:	5014913a 	slli	r10,r10,4
   269c8:	31c003cc 	andi	r7,r6,15
   269cc:	008000c4 	movi	r2,3
   269d0:	8287883a 	add	r3,r16,r10
   269d4:	2a95883a 	add	r10,r5,r10
   269d8:	11c0282e 	bgeu	r2,r7,26a7c <memmove+0x184>
   269dc:	3c7fff04 	addi	r17,r7,-4
   269e0:	8808d0ba 	srli	r4,r17,2
   269e4:	1a400104 	addi	r9,r3,4
   269e8:	180d883a 	mov	r6,r3
   269ec:	2105883a 	add	r2,r4,r4
   269f0:	1085883a 	add	r2,r2,r2
   269f4:	4893883a 	add	r9,r9,r2
   269f8:	5005883a 	mov	r2,r10
   269fc:	12000017 	ldw	r8,0(r2)
   26a00:	31800104 	addi	r6,r6,4
   26a04:	10800104 	addi	r2,r2,4
   26a08:	323fff15 	stw	r8,-4(r6)
   26a0c:	327ffb1e 	bne	r6,r9,269fc <memmove+0x104>
   26a10:	20800044 	addi	r2,r4,1
   26a14:	1085883a 	add	r2,r2,r2
   26a18:	1085883a 	add	r2,r2,r2
   26a1c:	017fff04 	movi	r5,-4
   26a20:	18a5883a 	add	r18,r3,r2
   26a24:	50a7883a 	add	r19,r10,r2
   26a28:	00210b00 	call	210b0 <__mulsi3>
   26a2c:	144f883a 	add	r7,r2,r17
   26a30:	980b883a 	mov	r5,r19
   26a34:	9007883a 	mov	r3,r18
   26a38:	383fc226 	beq	r7,zero,26944 <memmove+0x4c>
   26a3c:	19cf883a 	add	r7,r3,r7
   26a40:	29800003 	ldbu	r6,0(r5)
   26a44:	18c00044 	addi	r3,r3,1
   26a48:	29400044 	addi	r5,r5,1
   26a4c:	19bfffc5 	stb	r6,-1(r3)
   26a50:	19fffb1e 	bne	r3,r7,26a40 <memmove+0x148>
   26a54:	8005883a 	mov	r2,r16
   26a58:	dfc00417 	ldw	ra,16(sp)
   26a5c:	dcc00317 	ldw	r19,12(sp)
   26a60:	dc800217 	ldw	r18,8(sp)
   26a64:	dc400117 	ldw	r17,4(sp)
   26a68:	dc000017 	ldw	r16,0(sp)
   26a6c:	dec00504 	addi	sp,sp,20
   26a70:	f800283a 	ret
   26a74:	8007883a 	mov	r3,r16
   26a78:	003fef06 	br	26a38 <memmove+0x140>
   26a7c:	500b883a 	mov	r5,r10
   26a80:	003fed06 	br	26a38 <memmove+0x140>

00026a84 <memset>:
   26a84:	00c000c4 	movi	r3,3
   26a88:	2005883a 	mov	r2,r4
   26a8c:	29403fcc 	andi	r5,r5,255
   26a90:	19802d2e 	bgeu	r3,r6,26b48 <memset+0xc4>
   26a94:	20c6703a 	and	r3,r4,r3
   26a98:	18002e1e 	bne	r3,zero,26b54 <memset+0xd0>
   26a9c:	2806923a 	slli	r3,r5,8
   26aa0:	010003c4 	movi	r4,15
   26aa4:	3011883a 	mov	r8,r6
   26aa8:	1946b03a 	or	r3,r3,r5
   26aac:	180e943a 	slli	r7,r3,16
   26ab0:	38ceb03a 	or	r7,r7,r3
   26ab4:	1007883a 	mov	r3,r2
   26ab8:	21800f2e 	bgeu	r4,r6,26af8 <memset+0x74>
   26abc:	19c00015 	stw	r7,0(r3)
   26ac0:	19c00115 	stw	r7,4(r3)
   26ac4:	19c00215 	stw	r7,8(r3)
   26ac8:	19c00315 	stw	r7,12(r3)
   26acc:	423ffc04 	addi	r8,r8,-16
   26ad0:	18c00404 	addi	r3,r3,16
   26ad4:	223ff936 	bltu	r4,r8,26abc <memset+0x38>
   26ad8:	30fffc04 	addi	r3,r6,-16
   26adc:	1806d13a 	srli	r3,r3,4
   26ae0:	318003cc 	andi	r6,r6,15
   26ae4:	010000c4 	movi	r4,3
   26ae8:	18c00044 	addi	r3,r3,1
   26aec:	1806913a 	slli	r3,r3,4
   26af0:	10c7883a 	add	r3,r2,r3
   26af4:	21800e2e 	bgeu	r4,r6,26b30 <memset+0xac>
   26af8:	1813883a 	mov	r9,r3
   26afc:	3011883a 	mov	r8,r6
   26b00:	010000c4 	movi	r4,3
   26b04:	49c00015 	stw	r7,0(r9)
   26b08:	423fff04 	addi	r8,r8,-4
   26b0c:	4a400104 	addi	r9,r9,4
   26b10:	223ffc36 	bltu	r4,r8,26b04 <memset+0x80>
   26b14:	313fff04 	addi	r4,r6,-4
   26b18:	2008d0ba 	srli	r4,r4,2
   26b1c:	318000cc 	andi	r6,r6,3
   26b20:	21000044 	addi	r4,r4,1
   26b24:	2109883a 	add	r4,r4,r4
   26b28:	2109883a 	add	r4,r4,r4
   26b2c:	1907883a 	add	r3,r3,r4
   26b30:	30000a26 	beq	r6,zero,26b5c <memset+0xd8>
   26b34:	198d883a 	add	r6,r3,r6
   26b38:	19400005 	stb	r5,0(r3)
   26b3c:	18c00044 	addi	r3,r3,1
   26b40:	19bffd1e 	bne	r3,r6,26b38 <memset+0xb4>
   26b44:	f800283a 	ret
   26b48:	2007883a 	mov	r3,r4
   26b4c:	303ff91e 	bne	r6,zero,26b34 <memset+0xb0>
   26b50:	00000206 	br	26b5c <memset+0xd8>
   26b54:	2007883a 	mov	r3,r4
   26b58:	003ff606 	br	26b34 <memset+0xb0>
   26b5c:	f800283a 	ret

00026b60 <_Balloc>:
   26b60:	20801317 	ldw	r2,76(r4)
   26b64:	defffc04 	addi	sp,sp,-16
   26b68:	dc400115 	stw	r17,4(sp)
   26b6c:	dc000015 	stw	r16,0(sp)
   26b70:	dfc00315 	stw	ra,12(sp)
   26b74:	dc800215 	stw	r18,8(sp)
   26b78:	2023883a 	mov	r17,r4
   26b7c:	2821883a 	mov	r16,r5
   26b80:	10000f26 	beq	r2,zero,26bc0 <_Balloc+0x60>
   26b84:	8407883a 	add	r3,r16,r16
   26b88:	18c7883a 	add	r3,r3,r3
   26b8c:	10c7883a 	add	r3,r2,r3
   26b90:	18800017 	ldw	r2,0(r3)
   26b94:	10001126 	beq	r2,zero,26bdc <_Balloc+0x7c>
   26b98:	11000017 	ldw	r4,0(r2)
   26b9c:	19000015 	stw	r4,0(r3)
   26ba0:	10000415 	stw	zero,16(r2)
   26ba4:	10000315 	stw	zero,12(r2)
   26ba8:	dfc00317 	ldw	ra,12(sp)
   26bac:	dc800217 	ldw	r18,8(sp)
   26bb0:	dc400117 	ldw	r17,4(sp)
   26bb4:	dc000017 	ldw	r16,0(sp)
   26bb8:	dec00404 	addi	sp,sp,16
   26bbc:	f800283a 	ret
   26bc0:	01400104 	movi	r5,4
   26bc4:	01800404 	movi	r6,16
   26bc8:	00284c40 	call	284c4 <_calloc_r>
   26bcc:	88801315 	stw	r2,76(r17)
   26bd0:	103fec1e 	bne	r2,zero,26b84 <_Balloc+0x24>
   26bd4:	0005883a 	mov	r2,zero
   26bd8:	003ff306 	br	26ba8 <_Balloc+0x48>
   26bdc:	01400044 	movi	r5,1
   26be0:	2c24983a 	sll	r18,r5,r16
   26be4:	8809883a 	mov	r4,r17
   26be8:	91800144 	addi	r6,r18,5
   26bec:	318d883a 	add	r6,r6,r6
   26bf0:	318d883a 	add	r6,r6,r6
   26bf4:	00284c40 	call	284c4 <_calloc_r>
   26bf8:	103ff626 	beq	r2,zero,26bd4 <_Balloc+0x74>
   26bfc:	14000115 	stw	r16,4(r2)
   26c00:	14800215 	stw	r18,8(r2)
   26c04:	003fe606 	br	26ba0 <_Balloc+0x40>

00026c08 <_Bfree>:
   26c08:	28000826 	beq	r5,zero,26c2c <_Bfree+0x24>
   26c0c:	28c00117 	ldw	r3,4(r5)
   26c10:	20801317 	ldw	r2,76(r4)
   26c14:	18c7883a 	add	r3,r3,r3
   26c18:	18c7883a 	add	r3,r3,r3
   26c1c:	10c5883a 	add	r2,r2,r3
   26c20:	10c00017 	ldw	r3,0(r2)
   26c24:	28c00015 	stw	r3,0(r5)
   26c28:	11400015 	stw	r5,0(r2)
   26c2c:	f800283a 	ret

00026c30 <__multadd>:
   26c30:	defff604 	addi	sp,sp,-40
   26c34:	dd400515 	stw	r21,20(sp)
   26c38:	2d400417 	ldw	r21,16(r5)
   26c3c:	df000815 	stw	fp,32(sp)
   26c40:	ddc00715 	stw	r23,28(sp)
   26c44:	dd800615 	stw	r22,24(sp)
   26c48:	dd000415 	stw	r20,16(sp)
   26c4c:	dc400115 	stw	r17,4(sp)
   26c50:	dc000015 	stw	r16,0(sp)
   26c54:	dfc00915 	stw	ra,36(sp)
   26c58:	dcc00315 	stw	r19,12(sp)
   26c5c:	dc800215 	stw	r18,8(sp)
   26c60:	282d883a 	mov	r22,r5
   26c64:	202f883a 	mov	r23,r4
   26c68:	3029883a 	mov	r20,r6
   26c6c:	3839883a 	mov	fp,r7
   26c70:	2c000504 	addi	r16,r5,20
   26c74:	0023883a 	mov	r17,zero
   26c78:	84c00017 	ldw	r19,0(r16)
   26c7c:	a00b883a 	mov	r5,r20
   26c80:	8c400044 	addi	r17,r17,1
   26c84:	993fffcc 	andi	r4,r19,65535
   26c88:	00210b00 	call	210b0 <__mulsi3>
   26c8c:	1725883a 	add	r18,r2,fp
   26c90:	9808d43a 	srli	r4,r19,16
   26c94:	9026d43a 	srli	r19,r18,16
   26c98:	a00b883a 	mov	r5,r20
   26c9c:	00210b00 	call	210b0 <__mulsi3>
   26ca0:	988f883a 	add	r7,r19,r2
   26ca4:	3804943a 	slli	r2,r7,16
   26ca8:	94bfffcc 	andi	r18,r18,65535
   26cac:	3838d43a 	srli	fp,r7,16
   26cb0:	14a5883a 	add	r18,r2,r18
   26cb4:	84800015 	stw	r18,0(r16)
   26cb8:	84000104 	addi	r16,r16,4
   26cbc:	8d7fee16 	blt	r17,r21,26c78 <__multadd+0x48>
   26cc0:	e0000926 	beq	fp,zero,26ce8 <__multadd+0xb8>
   26cc4:	b0800217 	ldw	r2,8(r22)
   26cc8:	a880140e 	bge	r21,r2,26d1c <__multadd+0xec>
   26ccc:	a8800144 	addi	r2,r21,5
   26cd0:	1085883a 	add	r2,r2,r2
   26cd4:	1085883a 	add	r2,r2,r2
   26cd8:	b085883a 	add	r2,r22,r2
   26cdc:	ad400044 	addi	r21,r21,1
   26ce0:	17000015 	stw	fp,0(r2)
   26ce4:	b5400415 	stw	r21,16(r22)
   26ce8:	b005883a 	mov	r2,r22
   26cec:	dfc00917 	ldw	ra,36(sp)
   26cf0:	df000817 	ldw	fp,32(sp)
   26cf4:	ddc00717 	ldw	r23,28(sp)
   26cf8:	dd800617 	ldw	r22,24(sp)
   26cfc:	dd400517 	ldw	r21,20(sp)
   26d00:	dd000417 	ldw	r20,16(sp)
   26d04:	dcc00317 	ldw	r19,12(sp)
   26d08:	dc800217 	ldw	r18,8(sp)
   26d0c:	dc400117 	ldw	r17,4(sp)
   26d10:	dc000017 	ldw	r16,0(sp)
   26d14:	dec00a04 	addi	sp,sp,40
   26d18:	f800283a 	ret
   26d1c:	b1400117 	ldw	r5,4(r22)
   26d20:	b809883a 	mov	r4,r23
   26d24:	29400044 	addi	r5,r5,1
   26d28:	0026b600 	call	26b60 <_Balloc>
   26d2c:	b1800417 	ldw	r6,16(r22)
   26d30:	b1400304 	addi	r5,r22,12
   26d34:	11000304 	addi	r4,r2,12
   26d38:	31800084 	addi	r6,r6,2
   26d3c:	318d883a 	add	r6,r6,r6
   26d40:	318d883a 	add	r6,r6,r6
   26d44:	1021883a 	mov	r16,r2
   26d48:	00267b80 	call	267b8 <memcpy>
   26d4c:	b0c00117 	ldw	r3,4(r22)
   26d50:	b8801317 	ldw	r2,76(r23)
   26d54:	18c7883a 	add	r3,r3,r3
   26d58:	18c7883a 	add	r3,r3,r3
   26d5c:	10c5883a 	add	r2,r2,r3
   26d60:	10c00017 	ldw	r3,0(r2)
   26d64:	b0c00015 	stw	r3,0(r22)
   26d68:	15800015 	stw	r22,0(r2)
   26d6c:	802d883a 	mov	r22,r16
   26d70:	003fd606 	br	26ccc <__multadd+0x9c>

00026d74 <__s2b>:
   26d74:	defff904 	addi	sp,sp,-28
   26d78:	dd000415 	stw	r20,16(sp)
   26d7c:	dc400115 	stw	r17,4(sp)
   26d80:	2829883a 	mov	r20,r5
   26d84:	2023883a 	mov	r17,r4
   26d88:	01400244 	movi	r5,9
   26d8c:	39000204 	addi	r4,r7,8
   26d90:	dcc00315 	stw	r19,12(sp)
   26d94:	dc800215 	stw	r18,8(sp)
   26d98:	dfc00615 	stw	ra,24(sp)
   26d9c:	dd400515 	stw	r21,20(sp)
   26da0:	dc000015 	stw	r16,0(sp)
   26da4:	3825883a 	mov	r18,r7
   26da8:	3027883a 	mov	r19,r6
   26dac:	002a3140 	call	2a314 <__divsi3>
   26db0:	00c00044 	movi	r3,1
   26db4:	000b883a 	mov	r5,zero
   26db8:	1880030e 	bge	r3,r2,26dc8 <__s2b+0x54>
   26dbc:	18c7883a 	add	r3,r3,r3
   26dc0:	29400044 	addi	r5,r5,1
   26dc4:	18bffd16 	blt	r3,r2,26dbc <__s2b+0x48>
   26dc8:	8809883a 	mov	r4,r17
   26dcc:	0026b600 	call	26b60 <_Balloc>
   26dd0:	d8c00717 	ldw	r3,28(sp)
   26dd4:	10c00515 	stw	r3,20(r2)
   26dd8:	00c00044 	movi	r3,1
   26ddc:	10c00415 	stw	r3,16(r2)
   26de0:	00c00244 	movi	r3,9
   26de4:	1cc0210e 	bge	r3,r19,26e6c <__s2b+0xf8>
   26de8:	a0eb883a 	add	r21,r20,r3
   26dec:	a821883a 	mov	r16,r21
   26df0:	a4e9883a 	add	r20,r20,r19
   26df4:	81c00007 	ldb	r7,0(r16)
   26df8:	8809883a 	mov	r4,r17
   26dfc:	84000044 	addi	r16,r16,1
   26e00:	100b883a 	mov	r5,r2
   26e04:	01800284 	movi	r6,10
   26e08:	39fff404 	addi	r7,r7,-48
   26e0c:	0026c300 	call	26c30 <__multadd>
   26e10:	853ff81e 	bne	r16,r20,26df4 <__s2b+0x80>
   26e14:	ace1883a 	add	r16,r21,r19
   26e18:	843ffe04 	addi	r16,r16,-8
   26e1c:	9c800a0e 	bge	r19,r18,26e48 <__s2b+0xd4>
   26e20:	94e5c83a 	sub	r18,r18,r19
   26e24:	84a5883a 	add	r18,r16,r18
   26e28:	81c00007 	ldb	r7,0(r16)
   26e2c:	8809883a 	mov	r4,r17
   26e30:	84000044 	addi	r16,r16,1
   26e34:	100b883a 	mov	r5,r2
   26e38:	01800284 	movi	r6,10
   26e3c:	39fff404 	addi	r7,r7,-48
   26e40:	0026c300 	call	26c30 <__multadd>
   26e44:	84bff81e 	bne	r16,r18,26e28 <__s2b+0xb4>
   26e48:	dfc00617 	ldw	ra,24(sp)
   26e4c:	dd400517 	ldw	r21,20(sp)
   26e50:	dd000417 	ldw	r20,16(sp)
   26e54:	dcc00317 	ldw	r19,12(sp)
   26e58:	dc800217 	ldw	r18,8(sp)
   26e5c:	dc400117 	ldw	r17,4(sp)
   26e60:	dc000017 	ldw	r16,0(sp)
   26e64:	dec00704 	addi	sp,sp,28
   26e68:	f800283a 	ret
   26e6c:	a4000284 	addi	r16,r20,10
   26e70:	1827883a 	mov	r19,r3
   26e74:	003fe906 	br	26e1c <__s2b+0xa8>

00026e78 <__hi0bits>:
   26e78:	20bfffec 	andhi	r2,r4,65535
   26e7c:	1000141e 	bne	r2,zero,26ed0 <__hi0bits+0x58>
   26e80:	2008943a 	slli	r4,r4,16
   26e84:	00800404 	movi	r2,16
   26e88:	20ffc02c 	andhi	r3,r4,65280
   26e8c:	1800021e 	bne	r3,zero,26e98 <__hi0bits+0x20>
   26e90:	2008923a 	slli	r4,r4,8
   26e94:	10800204 	addi	r2,r2,8
   26e98:	20fc002c 	andhi	r3,r4,61440
   26e9c:	1800021e 	bne	r3,zero,26ea8 <__hi0bits+0x30>
   26ea0:	2008913a 	slli	r4,r4,4
   26ea4:	10800104 	addi	r2,r2,4
   26ea8:	20f0002c 	andhi	r3,r4,49152
   26eac:	1800031e 	bne	r3,zero,26ebc <__hi0bits+0x44>
   26eb0:	2109883a 	add	r4,r4,r4
   26eb4:	10800084 	addi	r2,r2,2
   26eb8:	2109883a 	add	r4,r4,r4
   26ebc:	20000316 	blt	r4,zero,26ecc <__hi0bits+0x54>
   26ec0:	2110002c 	andhi	r4,r4,16384
   26ec4:	2000041e 	bne	r4,zero,26ed8 <__hi0bits+0x60>
   26ec8:	00800804 	movi	r2,32
   26ecc:	f800283a 	ret
   26ed0:	0005883a 	mov	r2,zero
   26ed4:	003fec06 	br	26e88 <__hi0bits+0x10>
   26ed8:	10800044 	addi	r2,r2,1
   26edc:	f800283a 	ret

00026ee0 <__lo0bits>:
   26ee0:	20c00017 	ldw	r3,0(r4)
   26ee4:	188001cc 	andi	r2,r3,7
   26ee8:	10000826 	beq	r2,zero,26f0c <__lo0bits+0x2c>
   26eec:	1880004c 	andi	r2,r3,1
   26ef0:	1000211e 	bne	r2,zero,26f78 <__lo0bits+0x98>
   26ef4:	1880008c 	andi	r2,r3,2
   26ef8:	1000211e 	bne	r2,zero,26f80 <__lo0bits+0xa0>
   26efc:	1806d0ba 	srli	r3,r3,2
   26f00:	00800084 	movi	r2,2
   26f04:	20c00015 	stw	r3,0(r4)
   26f08:	f800283a 	ret
   26f0c:	18bfffcc 	andi	r2,r3,65535
   26f10:	10001326 	beq	r2,zero,26f60 <__lo0bits+0x80>
   26f14:	0005883a 	mov	r2,zero
   26f18:	19403fcc 	andi	r5,r3,255
   26f1c:	2800021e 	bne	r5,zero,26f28 <__lo0bits+0x48>
   26f20:	1806d23a 	srli	r3,r3,8
   26f24:	10800204 	addi	r2,r2,8
   26f28:	194003cc 	andi	r5,r3,15
   26f2c:	2800021e 	bne	r5,zero,26f38 <__lo0bits+0x58>
   26f30:	1806d13a 	srli	r3,r3,4
   26f34:	10800104 	addi	r2,r2,4
   26f38:	194000cc 	andi	r5,r3,3
   26f3c:	2800021e 	bne	r5,zero,26f48 <__lo0bits+0x68>
   26f40:	1806d0ba 	srli	r3,r3,2
   26f44:	10800084 	addi	r2,r2,2
   26f48:	1940004c 	andi	r5,r3,1
   26f4c:	2800081e 	bne	r5,zero,26f70 <__lo0bits+0x90>
   26f50:	1806d07a 	srli	r3,r3,1
   26f54:	1800051e 	bne	r3,zero,26f6c <__lo0bits+0x8c>
   26f58:	00800804 	movi	r2,32
   26f5c:	f800283a 	ret
   26f60:	1806d43a 	srli	r3,r3,16
   26f64:	00800404 	movi	r2,16
   26f68:	003feb06 	br	26f18 <__lo0bits+0x38>
   26f6c:	10800044 	addi	r2,r2,1
   26f70:	20c00015 	stw	r3,0(r4)
   26f74:	f800283a 	ret
   26f78:	0005883a 	mov	r2,zero
   26f7c:	f800283a 	ret
   26f80:	1806d07a 	srli	r3,r3,1
   26f84:	00800044 	movi	r2,1
   26f88:	20c00015 	stw	r3,0(r4)
   26f8c:	f800283a 	ret

00026f90 <__i2b>:
   26f90:	defffd04 	addi	sp,sp,-12
   26f94:	dc000015 	stw	r16,0(sp)
   26f98:	04000044 	movi	r16,1
   26f9c:	dc400115 	stw	r17,4(sp)
   26fa0:	2823883a 	mov	r17,r5
   26fa4:	800b883a 	mov	r5,r16
   26fa8:	dfc00215 	stw	ra,8(sp)
   26fac:	0026b600 	call	26b60 <_Balloc>
   26fb0:	14400515 	stw	r17,20(r2)
   26fb4:	14000415 	stw	r16,16(r2)
   26fb8:	dfc00217 	ldw	ra,8(sp)
   26fbc:	dc400117 	ldw	r17,4(sp)
   26fc0:	dc000017 	ldw	r16,0(sp)
   26fc4:	dec00304 	addi	sp,sp,12
   26fc8:	f800283a 	ret

00026fcc <__multiply>:
   26fcc:	defff004 	addi	sp,sp,-64
   26fd0:	dc800815 	stw	r18,32(sp)
   26fd4:	dc400715 	stw	r17,28(sp)
   26fd8:	34800417 	ldw	r18,16(r6)
   26fdc:	2c400417 	ldw	r17,16(r5)
   26fe0:	ddc00d15 	stw	r23,52(sp)
   26fe4:	dc000615 	stw	r16,24(sp)
   26fe8:	dfc00f15 	stw	ra,60(sp)
   26fec:	df000e15 	stw	fp,56(sp)
   26ff0:	dd800c15 	stw	r22,48(sp)
   26ff4:	dd400b15 	stw	r21,44(sp)
   26ff8:	dd000a15 	stw	r20,40(sp)
   26ffc:	dcc00915 	stw	r19,36(sp)
   27000:	2821883a 	mov	r16,r5
   27004:	302f883a 	mov	r23,r6
   27008:	8c80050e 	bge	r17,r18,27020 <__multiply+0x54>
   2700c:	8807883a 	mov	r3,r17
   27010:	3021883a 	mov	r16,r6
   27014:	9023883a 	mov	r17,r18
   27018:	282f883a 	mov	r23,r5
   2701c:	1825883a 	mov	r18,r3
   27020:	80800217 	ldw	r2,8(r16)
   27024:	8c87883a 	add	r3,r17,r18
   27028:	d8c00115 	stw	r3,4(sp)
   2702c:	81400117 	ldw	r5,4(r16)
   27030:	10c0010e 	bge	r2,r3,27038 <__multiply+0x6c>
   27034:	29400044 	addi	r5,r5,1
   27038:	0026b600 	call	26b60 <_Balloc>
   2703c:	d8c00117 	ldw	r3,4(sp)
   27040:	d8800515 	stw	r2,20(sp)
   27044:	14c00504 	addi	r19,r2,20
   27048:	1d400144 	addi	r21,r3,5
   2704c:	ad6b883a 	add	r21,r21,r21
   27050:	ad6b883a 	add	r21,r21,r21
   27054:	156b883a 	add	r21,r2,r21
   27058:	dd400215 	stw	r21,8(sp)
   2705c:	9805883a 	mov	r2,r19
   27060:	9d40042e 	bgeu	r19,r21,27074 <__multiply+0xa8>
   27064:	d8c00217 	ldw	r3,8(sp)
   27068:	10000015 	stw	zero,0(r2)
   2706c:	10800104 	addi	r2,r2,4
   27070:	10fffc36 	bltu	r2,r3,27064 <__multiply+0x98>
   27074:	94800144 	addi	r18,r18,5
   27078:	94a5883a 	add	r18,r18,r18
   2707c:	94ad883a 	add	r22,r18,r18
   27080:	8c400144 	addi	r17,r17,5
   27084:	8c63883a 	add	r17,r17,r17
   27088:	bdad883a 	add	r22,r23,r22
   2708c:	80c00504 	addi	r3,r16,20
   27090:	8c63883a 	add	r17,r17,r17
   27094:	bc800504 	addi	r18,r23,20
   27098:	dd800315 	stw	r22,12(sp)
   2709c:	d8c00415 	stw	r3,16(sp)
   270a0:	dcc00015 	stw	r19,0(sp)
   270a4:	8463883a 	add	r17,r16,r17
   270a8:	9580412e 	bgeu	r18,r22,271b0 <__multiply+0x1e4>
   270ac:	90800017 	ldw	r2,0(r18)
   270b0:	173fffcc 	andi	fp,r2,65535
   270b4:	e0001a26 	beq	fp,zero,27120 <__multiply+0x154>
   270b8:	dd000017 	ldw	r20,0(sp)
   270bc:	dd800417 	ldw	r22,16(sp)
   270c0:	002b883a 	mov	r21,zero
   270c4:	b4c00017 	ldw	r19,0(r22)
   270c8:	a4000017 	ldw	r16,0(r20)
   270cc:	e00b883a 	mov	r5,fp
   270d0:	993fffcc 	andi	r4,r19,65535
   270d4:	00210b00 	call	210b0 <__mulsi3>
   270d8:	9808d43a 	srli	r4,r19,16
   270dc:	817fffcc 	andi	r5,r16,65535
   270e0:	1145883a 	add	r2,r2,r5
   270e4:	e00b883a 	mov	r5,fp
   270e8:	1567883a 	add	r19,r2,r21
   270ec:	8020d43a 	srli	r16,r16,16
   270f0:	00210b00 	call	210b0 <__mulsi3>
   270f4:	9808d43a 	srli	r4,r19,16
   270f8:	1405883a 	add	r2,r2,r16
   270fc:	a4c0000d 	sth	r19,0(r20)
   27100:	110f883a 	add	r7,r2,r4
   27104:	a1c0008d 	sth	r7,2(r20)
   27108:	b5800104 	addi	r22,r22,4
   2710c:	382ad43a 	srli	r21,r7,16
   27110:	a5000104 	addi	r20,r20,4
   27114:	b47feb36 	bltu	r22,r17,270c4 <__multiply+0xf8>
   27118:	a5400015 	stw	r21,0(r20)
   2711c:	90800017 	ldw	r2,0(r18)
   27120:	1038d43a 	srli	fp,r2,16
   27124:	e0001c26 	beq	fp,zero,27198 <__multiply+0x1cc>
   27128:	d8c00017 	ldw	r3,0(sp)
   2712c:	dd000417 	ldw	r20,16(sp)
   27130:	002b883a 	mov	r21,zero
   27134:	1d800017 	ldw	r22,0(r3)
   27138:	182f883a 	mov	r23,r3
   2713c:	b021883a 	mov	r16,r22
   27140:	a4c00017 	ldw	r19,0(r20)
   27144:	8020d43a 	srli	r16,r16,16
   27148:	e00b883a 	mov	r5,fp
   2714c:	993fffcc 	andi	r4,r19,65535
   27150:	00210b00 	call	210b0 <__mulsi3>
   27154:	1405883a 	add	r2,r2,r16
   27158:	9808d43a 	srli	r4,r19,16
   2715c:	156b883a 	add	r21,r2,r21
   27160:	bdc00104 	addi	r23,r23,4
   27164:	bdbfff0d 	sth	r22,-4(r23)
   27168:	bd7fff8d 	sth	r21,-2(r23)
   2716c:	bc000017 	ldw	r16,0(r23)
   27170:	e00b883a 	mov	r5,fp
   27174:	00210b00 	call	210b0 <__mulsi3>
   27178:	a80ed43a 	srli	r7,r21,16
   2717c:	813fffcc 	andi	r4,r16,65535
   27180:	2085883a 	add	r2,r4,r2
   27184:	11ed883a 	add	r22,r2,r7
   27188:	a5000104 	addi	r20,r20,4
   2718c:	b02ad43a 	srli	r21,r22,16
   27190:	a47feb36 	bltu	r20,r17,27140 <__multiply+0x174>
   27194:	bd800015 	stw	r22,0(r23)
   27198:	d8c00017 	ldw	r3,0(sp)
   2719c:	94800104 	addi	r18,r18,4
   271a0:	18c00104 	addi	r3,r3,4
   271a4:	d8c00015 	stw	r3,0(sp)
   271a8:	d8c00317 	ldw	r3,12(sp)
   271ac:	90ffbf36 	bltu	r18,r3,270ac <__multiply+0xe0>
   271b0:	d8c00117 	ldw	r3,4(sp)
   271b4:	00c00c0e 	bge	zero,r3,271e8 <__multiply+0x21c>
   271b8:	d8c00217 	ldw	r3,8(sp)
   271bc:	18bfff17 	ldw	r2,-4(r3)
   271c0:	1d7fff04 	addi	r21,r3,-4
   271c4:	10000326 	beq	r2,zero,271d4 <__multiply+0x208>
   271c8:	00000706 	br	271e8 <__multiply+0x21c>
   271cc:	a8800017 	ldw	r2,0(r21)
   271d0:	1000051e 	bne	r2,zero,271e8 <__multiply+0x21c>
   271d4:	d8c00117 	ldw	r3,4(sp)
   271d8:	ad7fff04 	addi	r21,r21,-4
   271dc:	18ffffc4 	addi	r3,r3,-1
   271e0:	d8c00115 	stw	r3,4(sp)
   271e4:	183ff91e 	bne	r3,zero,271cc <__multiply+0x200>
   271e8:	d8800517 	ldw	r2,20(sp)
   271ec:	d8c00117 	ldw	r3,4(sp)
   271f0:	10c00415 	stw	r3,16(r2)
   271f4:	dfc00f17 	ldw	ra,60(sp)
   271f8:	df000e17 	ldw	fp,56(sp)
   271fc:	ddc00d17 	ldw	r23,52(sp)
   27200:	dd800c17 	ldw	r22,48(sp)
   27204:	dd400b17 	ldw	r21,44(sp)
   27208:	dd000a17 	ldw	r20,40(sp)
   2720c:	dcc00917 	ldw	r19,36(sp)
   27210:	dc800817 	ldw	r18,32(sp)
   27214:	dc400717 	ldw	r17,28(sp)
   27218:	dc000617 	ldw	r16,24(sp)
   2721c:	dec01004 	addi	sp,sp,64
   27220:	f800283a 	ret

00027224 <__pow5mult>:
   27224:	defffb04 	addi	sp,sp,-20
   27228:	dcc00315 	stw	r19,12(sp)
   2722c:	dc800215 	stw	r18,8(sp)
   27230:	dc000015 	stw	r16,0(sp)
   27234:	dfc00415 	stw	ra,16(sp)
   27238:	dc400115 	stw	r17,4(sp)
   2723c:	308000cc 	andi	r2,r6,3
   27240:	3021883a 	mov	r16,r6
   27244:	2027883a 	mov	r19,r4
   27248:	2825883a 	mov	r18,r5
   2724c:	10002e1e 	bne	r2,zero,27308 <__pow5mult+0xe4>
   27250:	8021d0ba 	srai	r16,r16,2
   27254:	80001a26 	beq	r16,zero,272c0 <__pow5mult+0x9c>
   27258:	9c401217 	ldw	r17,72(r19)
   2725c:	8800061e 	bne	r17,zero,27278 <__pow5mult+0x54>
   27260:	00003406 	br	27334 <__pow5mult+0x110>
   27264:	8021d07a 	srai	r16,r16,1
   27268:	80001526 	beq	r16,zero,272c0 <__pow5mult+0x9c>
   2726c:	88c00017 	ldw	r3,0(r17)
   27270:	18001b26 	beq	r3,zero,272e0 <__pow5mult+0xbc>
   27274:	1823883a 	mov	r17,r3
   27278:	80c0004c 	andi	r3,r16,1
   2727c:	183ff926 	beq	r3,zero,27264 <__pow5mult+0x40>
   27280:	900b883a 	mov	r5,r18
   27284:	880d883a 	mov	r6,r17
   27288:	9809883a 	mov	r4,r19
   2728c:	0026fcc0 	call	26fcc <__multiply>
   27290:	90001b26 	beq	r18,zero,27300 <__pow5mult+0xdc>
   27294:	91000117 	ldw	r4,4(r18)
   27298:	98c01317 	ldw	r3,76(r19)
   2729c:	8021d07a 	srai	r16,r16,1
   272a0:	2109883a 	add	r4,r4,r4
   272a4:	2109883a 	add	r4,r4,r4
   272a8:	1907883a 	add	r3,r3,r4
   272ac:	19000017 	ldw	r4,0(r3)
   272b0:	91000015 	stw	r4,0(r18)
   272b4:	1c800015 	stw	r18,0(r3)
   272b8:	1025883a 	mov	r18,r2
   272bc:	803feb1e 	bne	r16,zero,2726c <__pow5mult+0x48>
   272c0:	9005883a 	mov	r2,r18
   272c4:	dfc00417 	ldw	ra,16(sp)
   272c8:	dcc00317 	ldw	r19,12(sp)
   272cc:	dc800217 	ldw	r18,8(sp)
   272d0:	dc400117 	ldw	r17,4(sp)
   272d4:	dc000017 	ldw	r16,0(sp)
   272d8:	dec00504 	addi	sp,sp,20
   272dc:	f800283a 	ret
   272e0:	880b883a 	mov	r5,r17
   272e4:	880d883a 	mov	r6,r17
   272e8:	9809883a 	mov	r4,r19
   272ec:	0026fcc0 	call	26fcc <__multiply>
   272f0:	88800015 	stw	r2,0(r17)
   272f4:	10000015 	stw	zero,0(r2)
   272f8:	1023883a 	mov	r17,r2
   272fc:	003fde06 	br	27278 <__pow5mult+0x54>
   27300:	1025883a 	mov	r18,r2
   27304:	003fd706 	br	27264 <__pow5mult+0x40>
   27308:	10bfffc4 	addi	r2,r2,-1
   2730c:	1085883a 	add	r2,r2,r2
   27310:	00c001f4 	movhi	r3,7
   27314:	18f2f404 	addi	r3,r3,-13360
   27318:	1085883a 	add	r2,r2,r2
   2731c:	1885883a 	add	r2,r3,r2
   27320:	11800017 	ldw	r6,0(r2)
   27324:	000f883a 	mov	r7,zero
   27328:	0026c300 	call	26c30 <__multadd>
   2732c:	1025883a 	mov	r18,r2
   27330:	003fc706 	br	27250 <__pow5mult+0x2c>
   27334:	9809883a 	mov	r4,r19
   27338:	01409c44 	movi	r5,625
   2733c:	0026f900 	call	26f90 <__i2b>
   27340:	98801215 	stw	r2,72(r19)
   27344:	1023883a 	mov	r17,r2
   27348:	10000015 	stw	zero,0(r2)
   2734c:	003fca06 	br	27278 <__pow5mult+0x54>

00027350 <__lshift>:
   27350:	defff904 	addi	sp,sp,-28
   27354:	dd400515 	stw	r21,20(sp)
   27358:	dc400115 	stw	r17,4(sp)
   2735c:	2d400417 	ldw	r21,16(r5)
   27360:	3023d17a 	srai	r17,r6,5
   27364:	28800217 	ldw	r2,8(r5)
   27368:	dd000415 	stw	r20,16(sp)
   2736c:	8d6b883a 	add	r21,r17,r21
   27370:	dcc00315 	stw	r19,12(sp)
   27374:	dc800215 	stw	r18,8(sp)
   27378:	dc000015 	stw	r16,0(sp)
   2737c:	dfc00615 	stw	ra,24(sp)
   27380:	ac000044 	addi	r16,r21,1
   27384:	2825883a 	mov	r18,r5
   27388:	3029883a 	mov	r20,r6
   2738c:	2027883a 	mov	r19,r4
   27390:	29400117 	ldw	r5,4(r5)
   27394:	1400030e 	bge	r2,r16,273a4 <__lshift+0x54>
   27398:	1085883a 	add	r2,r2,r2
   2739c:	29400044 	addi	r5,r5,1
   273a0:	143ffd16 	blt	r2,r16,27398 <__lshift+0x48>
   273a4:	9809883a 	mov	r4,r19
   273a8:	0026b600 	call	26b60 <_Balloc>
   273ac:	10c00504 	addi	r3,r2,20
   273b0:	0440090e 	bge	zero,r17,273d8 <__lshift+0x88>
   273b4:	000f883a 	mov	r7,zero
   273b8:	18000015 	stw	zero,0(r3)
   273bc:	39c00044 	addi	r7,r7,1
   273c0:	18c00104 	addi	r3,r3,4
   273c4:	3c7ffc1e 	bne	r7,r17,273b8 <__lshift+0x68>
   273c8:	38c00144 	addi	r3,r7,5
   273cc:	18c7883a 	add	r3,r3,r3
   273d0:	18c7883a 	add	r3,r3,r3
   273d4:	10c7883a 	add	r3,r2,r3
   273d8:	92000417 	ldw	r8,16(r18)
   273dc:	a18007cc 	andi	r6,r20,31
   273e0:	91c00504 	addi	r7,r18,20
   273e4:	42000144 	addi	r8,r8,5
   273e8:	4211883a 	add	r8,r8,r8
   273ec:	4211883a 	add	r8,r8,r8
   273f0:	9211883a 	add	r8,r18,r8
   273f4:	30002226 	beq	r6,zero,27480 <__lshift+0x130>
   273f8:	02800804 	movi	r10,32
   273fc:	5195c83a 	sub	r10,r10,r6
   27400:	000b883a 	mov	r5,zero
   27404:	3a400017 	ldw	r9,0(r7)
   27408:	18c00104 	addi	r3,r3,4
   2740c:	39c00104 	addi	r7,r7,4
   27410:	4992983a 	sll	r9,r9,r6
   27414:	2a4ab03a 	or	r5,r5,r9
   27418:	197fff15 	stw	r5,-4(r3)
   2741c:	397fff17 	ldw	r5,-4(r7)
   27420:	2a8ad83a 	srl	r5,r5,r10
   27424:	3a3ff736 	bltu	r7,r8,27404 <__lshift+0xb4>
   27428:	19400015 	stw	r5,0(r3)
   2742c:	28000126 	beq	r5,zero,27434 <__lshift+0xe4>
   27430:	ac000084 	addi	r16,r21,2
   27434:	91000117 	ldw	r4,4(r18)
   27438:	98c01317 	ldw	r3,76(r19)
   2743c:	843fffc4 	addi	r16,r16,-1
   27440:	2109883a 	add	r4,r4,r4
   27444:	2109883a 	add	r4,r4,r4
   27448:	1907883a 	add	r3,r3,r4
   2744c:	19000017 	ldw	r4,0(r3)
   27450:	14000415 	stw	r16,16(r2)
   27454:	91000015 	stw	r4,0(r18)
   27458:	1c800015 	stw	r18,0(r3)
   2745c:	dfc00617 	ldw	ra,24(sp)
   27460:	dd400517 	ldw	r21,20(sp)
   27464:	dd000417 	ldw	r20,16(sp)
   27468:	dcc00317 	ldw	r19,12(sp)
   2746c:	dc800217 	ldw	r18,8(sp)
   27470:	dc400117 	ldw	r17,4(sp)
   27474:	dc000017 	ldw	r16,0(sp)
   27478:	dec00704 	addi	sp,sp,28
   2747c:	f800283a 	ret
   27480:	39400017 	ldw	r5,0(r7)
   27484:	18c00104 	addi	r3,r3,4
   27488:	39c00104 	addi	r7,r7,4
   2748c:	197fff15 	stw	r5,-4(r3)
   27490:	3a3fe82e 	bgeu	r7,r8,27434 <__lshift+0xe4>
   27494:	39400017 	ldw	r5,0(r7)
   27498:	18c00104 	addi	r3,r3,4
   2749c:	39c00104 	addi	r7,r7,4
   274a0:	197fff15 	stw	r5,-4(r3)
   274a4:	3a3ff636 	bltu	r7,r8,27480 <__lshift+0x130>
   274a8:	003fe206 	br	27434 <__lshift+0xe4>

000274ac <__mcmp>:
   274ac:	20800417 	ldw	r2,16(r4)
   274b0:	28c00417 	ldw	r3,16(r5)
   274b4:	10c5c83a 	sub	r2,r2,r3
   274b8:	10000f1e 	bne	r2,zero,274f8 <__mcmp+0x4c>
   274bc:	18c00144 	addi	r3,r3,5
   274c0:	18c7883a 	add	r3,r3,r3
   274c4:	18c7883a 	add	r3,r3,r3
   274c8:	21c00504 	addi	r7,r4,20
   274cc:	28cb883a 	add	r5,r5,r3
   274d0:	20c9883a 	add	r4,r4,r3
   274d4:	213fff04 	addi	r4,r4,-4
   274d8:	297fff04 	addi	r5,r5,-4
   274dc:	21800017 	ldw	r6,0(r4)
   274e0:	28c00017 	ldw	r3,0(r5)
   274e4:	30c0021e 	bne	r6,r3,274f0 <__mcmp+0x44>
   274e8:	393ffa36 	bltu	r7,r4,274d4 <__mcmp+0x28>
   274ec:	f800283a 	ret
   274f0:	30c00236 	bltu	r6,r3,274fc <__mcmp+0x50>
   274f4:	00800044 	movi	r2,1
   274f8:	f800283a 	ret
   274fc:	00bfffc4 	movi	r2,-1
   27500:	f800283a 	ret

00027504 <__mdiff>:
   27504:	defffb04 	addi	sp,sp,-20
   27508:	dc000015 	stw	r16,0(sp)
   2750c:	2821883a 	mov	r16,r5
   27510:	dc800215 	stw	r18,8(sp)
   27514:	300b883a 	mov	r5,r6
   27518:	2025883a 	mov	r18,r4
   2751c:	8009883a 	mov	r4,r16
   27520:	dc400115 	stw	r17,4(sp)
   27524:	dfc00415 	stw	ra,16(sp)
   27528:	dcc00315 	stw	r19,12(sp)
   2752c:	3023883a 	mov	r17,r6
   27530:	00274ac0 	call	274ac <__mcmp>
   27534:	10005026 	beq	r2,zero,27678 <__mdiff+0x174>
   27538:	10004a16 	blt	r2,zero,27664 <__mdiff+0x160>
   2753c:	0027883a 	mov	r19,zero
   27540:	81400117 	ldw	r5,4(r16)
   27544:	9009883a 	mov	r4,r18
   27548:	0026b600 	call	26b60 <_Balloc>
   2754c:	82400417 	ldw	r9,16(r16)
   27550:	89800417 	ldw	r6,16(r17)
   27554:	14c00315 	stw	r19,12(r2)
   27558:	4b800144 	addi	r14,r9,5
   2755c:	31800144 	addi	r6,r6,5
   27560:	739d883a 	add	r14,r14,r14
   27564:	318d883a 	add	r6,r6,r6
   27568:	739d883a 	add	r14,r14,r14
   2756c:	318d883a 	add	r6,r6,r6
   27570:	81c00504 	addi	r7,r16,20
   27574:	839d883a 	add	r14,r16,r14
   27578:	8a000504 	addi	r8,r17,20
   2757c:	898d883a 	add	r6,r17,r6
   27580:	10c00504 	addi	r3,r2,20
   27584:	0009883a 	mov	r4,zero
   27588:	3b000017 	ldw	r12,0(r7)
   2758c:	42c00017 	ldw	r11,0(r8)
   27590:	42000104 	addi	r8,r8,4
   27594:	62bfffcc 	andi	r10,r12,65535
   27598:	5b7fffcc 	andi	r13,r11,65535
   2759c:	5109883a 	add	r4,r10,r4
   275a0:	2355c83a 	sub	r10,r4,r13
   275a4:	5816d43a 	srli	r11,r11,16
   275a8:	6008d43a 	srli	r4,r12,16
   275ac:	501bd43a 	srai	r13,r10,16
   275b0:	1a80000d 	sth	r10,0(r3)
   275b4:	22c9c83a 	sub	r4,r4,r11
   275b8:	2349883a 	add	r4,r4,r13
   275bc:	1900008d 	sth	r4,2(r3)
   275c0:	39c00104 	addi	r7,r7,4
   275c4:	2009d43a 	srai	r4,r4,16
   275c8:	18c00104 	addi	r3,r3,4
   275cc:	41bfee36 	bltu	r8,r6,27588 <__mdiff+0x84>
   275d0:	180b883a 	mov	r5,r3
   275d4:	3815883a 	mov	r10,r7
   275d8:	3b80132e 	bgeu	r7,r14,27628 <__mdiff+0x124>
   275dc:	3a000017 	ldw	r8,0(r7)
   275e0:	18c00104 	addi	r3,r3,4
   275e4:	39c00104 	addi	r7,r7,4
   275e8:	41bfffcc 	andi	r6,r8,65535
   275ec:	310d883a 	add	r6,r6,r4
   275f0:	3009d43a 	srai	r4,r6,16
   275f4:	4010d43a 	srli	r8,r8,16
   275f8:	19bfff0d 	sth	r6,-4(r3)
   275fc:	2209883a 	add	r4,r4,r8
   27600:	193fff8d 	sth	r4,-2(r3)
   27604:	2009d43a 	srai	r4,r4,16
   27608:	3bbff436 	bltu	r7,r14,275dc <__mdiff+0xd8>
   2760c:	0286303a 	nor	r3,zero,r10
   27610:	1b87883a 	add	r3,r3,r14
   27614:	1806d0ba 	srli	r3,r3,2
   27618:	18c00044 	addi	r3,r3,1
   2761c:	18c7883a 	add	r3,r3,r3
   27620:	18c7883a 	add	r3,r3,r3
   27624:	28c7883a 	add	r3,r5,r3
   27628:	193fff17 	ldw	r4,-4(r3)
   2762c:	18ffff04 	addi	r3,r3,-4
   27630:	2000041e 	bne	r4,zero,27644 <__mdiff+0x140>
   27634:	18ffff04 	addi	r3,r3,-4
   27638:	19000017 	ldw	r4,0(r3)
   2763c:	4a7fffc4 	addi	r9,r9,-1
   27640:	203ffc26 	beq	r4,zero,27634 <__mdiff+0x130>
   27644:	12400415 	stw	r9,16(r2)
   27648:	dfc00417 	ldw	ra,16(sp)
   2764c:	dcc00317 	ldw	r19,12(sp)
   27650:	dc800217 	ldw	r18,8(sp)
   27654:	dc400117 	ldw	r17,4(sp)
   27658:	dc000017 	ldw	r16,0(sp)
   2765c:	dec00504 	addi	sp,sp,20
   27660:	f800283a 	ret
   27664:	8005883a 	mov	r2,r16
   27668:	04c00044 	movi	r19,1
   2766c:	8821883a 	mov	r16,r17
   27670:	1023883a 	mov	r17,r2
   27674:	003fb206 	br	27540 <__mdiff+0x3c>
   27678:	9009883a 	mov	r4,r18
   2767c:	000b883a 	mov	r5,zero
   27680:	0026b600 	call	26b60 <_Balloc>
   27684:	00c00044 	movi	r3,1
   27688:	10c00415 	stw	r3,16(r2)
   2768c:	10000515 	stw	zero,20(r2)
   27690:	dfc00417 	ldw	ra,16(sp)
   27694:	dcc00317 	ldw	r19,12(sp)
   27698:	dc800217 	ldw	r18,8(sp)
   2769c:	dc400117 	ldw	r17,4(sp)
   276a0:	dc000017 	ldw	r16,0(sp)
   276a4:	dec00504 	addi	sp,sp,20
   276a8:	f800283a 	ret

000276ac <__ulp>:
   276ac:	295ffc2c 	andhi	r5,r5,32752
   276b0:	00bf3034 	movhi	r2,64704
   276b4:	2887883a 	add	r3,r5,r2
   276b8:	00c0020e 	bge	zero,r3,276c4 <__ulp+0x18>
   276bc:	0005883a 	mov	r2,zero
   276c0:	f800283a 	ret
   276c4:	00c7c83a 	sub	r3,zero,r3
   276c8:	1805d53a 	srai	r2,r3,20
   276cc:	00c004c4 	movi	r3,19
   276d0:	18800a0e 	bge	r3,r2,276fc <__ulp+0x50>
   276d4:	01000c84 	movi	r4,50
   276d8:	0007883a 	mov	r3,zero
   276dc:	20800516 	blt	r4,r2,276f4 <__ulp+0x48>
   276e0:	01000cc4 	movi	r4,51
   276e4:	2085c83a 	sub	r2,r4,r2
   276e8:	01000044 	movi	r4,1
   276ec:	2084983a 	sll	r2,r4,r2
   276f0:	f800283a 	ret
   276f4:	00800044 	movi	r2,1
   276f8:	f800283a 	ret
   276fc:	00c00234 	movhi	r3,8
   27700:	1887d83a 	sra	r3,r3,r2
   27704:	0005883a 	mov	r2,zero
   27708:	f800283a 	ret

0002770c <__b2d>:
   2770c:	defffa04 	addi	sp,sp,-24
   27710:	dc000015 	stw	r16,0(sp)
   27714:	24000417 	ldw	r16,16(r4)
   27718:	dc400115 	stw	r17,4(sp)
   2771c:	dcc00315 	stw	r19,12(sp)
   27720:	84000144 	addi	r16,r16,5
   27724:	8421883a 	add	r16,r16,r16
   27728:	8421883a 	add	r16,r16,r16
   2772c:	2421883a 	add	r16,r4,r16
   27730:	847fff17 	ldw	r17,-4(r16)
   27734:	24c00504 	addi	r19,r4,20
   27738:	dd000415 	stw	r20,16(sp)
   2773c:	8809883a 	mov	r4,r17
   27740:	dc800215 	stw	r18,8(sp)
   27744:	2829883a 	mov	r20,r5
   27748:	dfc00515 	stw	ra,20(sp)
   2774c:	0026e780 	call	26e78 <__hi0bits>
   27750:	00c00804 	movi	r3,32
   27754:	1887c83a 	sub	r3,r3,r2
   27758:	a0c00015 	stw	r3,0(r20)
   2775c:	00c00284 	movi	r3,10
   27760:	84bfff04 	addi	r18,r16,-4
   27764:	18801216 	blt	r3,r2,277b0 <__b2d+0xa4>
   27768:	010002c4 	movi	r4,11
   2776c:	2089c83a 	sub	r4,r4,r2
   27770:	8906d83a 	srl	r3,r17,r4
   27774:	18cffc34 	orhi	r3,r3,16368
   27778:	9c80322e 	bgeu	r19,r18,27844 <__b2d+0x138>
   2777c:	817ffe17 	ldw	r5,-8(r16)
   27780:	2908d83a 	srl	r4,r5,r4
   27784:	10800544 	addi	r2,r2,21
   27788:	88a2983a 	sll	r17,r17,r2
   2778c:	2444b03a 	or	r2,r4,r17
   27790:	dfc00517 	ldw	ra,20(sp)
   27794:	dd000417 	ldw	r20,16(sp)
   27798:	dcc00317 	ldw	r19,12(sp)
   2779c:	dc800217 	ldw	r18,8(sp)
   277a0:	dc400117 	ldw	r17,4(sp)
   277a4:	dc000017 	ldw	r16,0(sp)
   277a8:	dec00604 	addi	sp,sp,24
   277ac:	f800283a 	ret
   277b0:	9c801636 	bltu	r19,r18,2780c <__b2d+0x100>
   277b4:	113ffd44 	addi	r4,r2,-11
   277b8:	000b883a 	mov	r5,zero
   277bc:	20001726 	beq	r4,zero,2781c <__b2d+0x110>
   277c0:	00c00ac4 	movi	r3,43
   277c4:	1885c83a 	sub	r2,r3,r2
   277c8:	8906983a 	sll	r3,r17,r4
   277cc:	288cd83a 	srl	r6,r5,r2
   277d0:	18cffc34 	orhi	r3,r3,16368
   277d4:	1986b03a 	or	r3,r3,r6
   277d8:	9c801c2e 	bgeu	r19,r18,2784c <__b2d+0x140>
   277dc:	91bfff17 	ldw	r6,-4(r18)
   277e0:	3084d83a 	srl	r2,r6,r2
   277e4:	2908983a 	sll	r4,r5,r4
   277e8:	1104b03a 	or	r2,r2,r4
   277ec:	dfc00517 	ldw	ra,20(sp)
   277f0:	dd000417 	ldw	r20,16(sp)
   277f4:	dcc00317 	ldw	r19,12(sp)
   277f8:	dc800217 	ldw	r18,8(sp)
   277fc:	dc400117 	ldw	r17,4(sp)
   27800:	dc000017 	ldw	r16,0(sp)
   27804:	dec00604 	addi	sp,sp,24
   27808:	f800283a 	ret
   2780c:	113ffd44 	addi	r4,r2,-11
   27810:	84bffe04 	addi	r18,r16,-8
   27814:	817ffe17 	ldw	r5,-8(r16)
   27818:	203fe91e 	bne	r4,zero,277c0 <__b2d+0xb4>
   2781c:	88cffc34 	orhi	r3,r17,16368
   27820:	2805883a 	mov	r2,r5
   27824:	dfc00517 	ldw	ra,20(sp)
   27828:	dd000417 	ldw	r20,16(sp)
   2782c:	dcc00317 	ldw	r19,12(sp)
   27830:	dc800217 	ldw	r18,8(sp)
   27834:	dc400117 	ldw	r17,4(sp)
   27838:	dc000017 	ldw	r16,0(sp)
   2783c:	dec00604 	addi	sp,sp,24
   27840:	f800283a 	ret
   27844:	0009883a 	mov	r4,zero
   27848:	003fce06 	br	27784 <__b2d+0x78>
   2784c:	0005883a 	mov	r2,zero
   27850:	003fe406 	br	277e4 <__b2d+0xd8>

00027854 <__d2b>:
   27854:	defff804 	addi	sp,sp,-32
   27858:	dc400315 	stw	r17,12(sp)
   2785c:	3023883a 	mov	r17,r6
   27860:	dc800415 	stw	r18,16(sp)
   27864:	8824907a 	slli	r18,r17,1
   27868:	dcc00515 	stw	r19,20(sp)
   2786c:	2827883a 	mov	r19,r5
   27870:	9024d57a 	srli	r18,r18,21
   27874:	01400044 	movi	r5,1
   27878:	dd000615 	stw	r20,24(sp)
   2787c:	dc000215 	stw	r16,8(sp)
   27880:	dfc00715 	stw	ra,28(sp)
   27884:	3829883a 	mov	r20,r7
   27888:	0026b600 	call	26b60 <_Balloc>
   2788c:	1021883a 	mov	r16,r2
   27890:	00800434 	movhi	r2,16
   27894:	10bfffc4 	addi	r2,r2,-1
   27898:	88a2703a 	and	r17,r17,r2
   2789c:	90000126 	beq	r18,zero,278a4 <__d2b+0x50>
   278a0:	8c400434 	orhi	r17,r17,16
   278a4:	dc400015 	stw	r17,0(sp)
   278a8:	98002226 	beq	r19,zero,27934 <__d2b+0xe0>
   278ac:	d9000104 	addi	r4,sp,4
   278b0:	dcc00115 	stw	r19,4(sp)
   278b4:	0026ee00 	call	26ee0 <__lo0bits>
   278b8:	d8c00017 	ldw	r3,0(sp)
   278bc:	10002d1e 	bne	r2,zero,27974 <__d2b+0x120>
   278c0:	d9000117 	ldw	r4,4(sp)
   278c4:	81000515 	stw	r4,20(r16)
   278c8:	1823003a 	cmpeq	r17,r3,zero
   278cc:	01000084 	movi	r4,2
   278d0:	2463c83a 	sub	r17,r4,r17
   278d4:	80c00615 	stw	r3,24(r16)
   278d8:	84400415 	stw	r17,16(r16)
   278dc:	90001d1e 	bne	r18,zero,27954 <__d2b+0x100>
   278e0:	88c00104 	addi	r3,r17,4
   278e4:	18c7883a 	add	r3,r3,r3
   278e8:	18c7883a 	add	r3,r3,r3
   278ec:	80c7883a 	add	r3,r16,r3
   278f0:	19000017 	ldw	r4,0(r3)
   278f4:	10bef384 	addi	r2,r2,-1074
   278f8:	a0800015 	stw	r2,0(r20)
   278fc:	0026e780 	call	26e78 <__hi0bits>
   27900:	8822917a 	slli	r17,r17,5
   27904:	d8c00817 	ldw	r3,32(sp)
   27908:	8885c83a 	sub	r2,r17,r2
   2790c:	18800015 	stw	r2,0(r3)
   27910:	8005883a 	mov	r2,r16
   27914:	dfc00717 	ldw	ra,28(sp)
   27918:	dd000617 	ldw	r20,24(sp)
   2791c:	dcc00517 	ldw	r19,20(sp)
   27920:	dc800417 	ldw	r18,16(sp)
   27924:	dc400317 	ldw	r17,12(sp)
   27928:	dc000217 	ldw	r16,8(sp)
   2792c:	dec00804 	addi	sp,sp,32
   27930:	f800283a 	ret
   27934:	d809883a 	mov	r4,sp
   27938:	0026ee00 	call	26ee0 <__lo0bits>
   2793c:	d8c00017 	ldw	r3,0(sp)
   27940:	04400044 	movi	r17,1
   27944:	84400415 	stw	r17,16(r16)
   27948:	80c00515 	stw	r3,20(r16)
   2794c:	10800804 	addi	r2,r2,32
   27950:	903fe326 	beq	r18,zero,278e0 <__d2b+0x8c>
   27954:	00c00d44 	movi	r3,53
   27958:	94bef344 	addi	r18,r18,-1075
   2795c:	90a5883a 	add	r18,r18,r2
   27960:	1885c83a 	sub	r2,r3,r2
   27964:	d8c00817 	ldw	r3,32(sp)
   27968:	a4800015 	stw	r18,0(r20)
   2796c:	18800015 	stw	r2,0(r3)
   27970:	003fe706 	br	27910 <__d2b+0xbc>
   27974:	01000804 	movi	r4,32
   27978:	2089c83a 	sub	r4,r4,r2
   2797c:	1908983a 	sll	r4,r3,r4
   27980:	d9400117 	ldw	r5,4(sp)
   27984:	1886d83a 	srl	r3,r3,r2
   27988:	2148b03a 	or	r4,r4,r5
   2798c:	81000515 	stw	r4,20(r16)
   27990:	d8c00015 	stw	r3,0(sp)
   27994:	003fcc06 	br	278c8 <__d2b+0x74>

00027998 <__ratio>:
   27998:	defff904 	addi	sp,sp,-28
   2799c:	dc400315 	stw	r17,12(sp)
   279a0:	2823883a 	mov	r17,r5
   279a4:	d9400104 	addi	r5,sp,4
   279a8:	dfc00615 	stw	ra,24(sp)
   279ac:	dcc00515 	stw	r19,20(sp)
   279b0:	dc800415 	stw	r18,16(sp)
   279b4:	2027883a 	mov	r19,r4
   279b8:	dc000215 	stw	r16,8(sp)
   279bc:	002770c0 	call	2770c <__b2d>
   279c0:	8809883a 	mov	r4,r17
   279c4:	d80b883a 	mov	r5,sp
   279c8:	1025883a 	mov	r18,r2
   279cc:	1821883a 	mov	r16,r3
   279d0:	002770c0 	call	2770c <__b2d>
   279d4:	99400417 	ldw	r5,16(r19)
   279d8:	89000417 	ldw	r4,16(r17)
   279dc:	d9800117 	ldw	r6,4(sp)
   279e0:	2909c83a 	sub	r4,r5,r4
   279e4:	d9400017 	ldw	r5,0(sp)
   279e8:	2008917a 	slli	r4,r4,5
   279ec:	314bc83a 	sub	r5,r6,r5
   279f0:	290b883a 	add	r5,r5,r4
   279f4:	01400e0e 	bge	zero,r5,27a30 <__ratio+0x98>
   279f8:	280a953a 	slli	r5,r5,20
   279fc:	2c21883a 	add	r16,r5,r16
   27a00:	9009883a 	mov	r4,r18
   27a04:	800b883a 	mov	r5,r16
   27a08:	100d883a 	mov	r6,r2
   27a0c:	180f883a 	mov	r7,r3
   27a10:	0029c4c0 	call	29c4c <__divdf3>
   27a14:	dfc00617 	ldw	ra,24(sp)
   27a18:	dcc00517 	ldw	r19,20(sp)
   27a1c:	dc800417 	ldw	r18,16(sp)
   27a20:	dc400317 	ldw	r17,12(sp)
   27a24:	dc000217 	ldw	r16,8(sp)
   27a28:	dec00704 	addi	sp,sp,28
   27a2c:	f800283a 	ret
   27a30:	280a953a 	slli	r5,r5,20
   27a34:	1947c83a 	sub	r3,r3,r5
   27a38:	003ff106 	br	27a00 <__ratio+0x68>

00027a3c <_mprec_log10>:
   27a3c:	defffe04 	addi	sp,sp,-8
   27a40:	dc000015 	stw	r16,0(sp)
   27a44:	dfc00115 	stw	ra,4(sp)
   27a48:	008005c4 	movi	r2,23
   27a4c:	2021883a 	mov	r16,r4
   27a50:	11000d0e 	bge	r2,r4,27a88 <_mprec_log10+0x4c>
   27a54:	0005883a 	mov	r2,zero
   27a58:	00cffc34 	movhi	r3,16368
   27a5c:	843fffc4 	addi	r16,r16,-1
   27a60:	1009883a 	mov	r4,r2
   27a64:	180b883a 	mov	r5,r3
   27a68:	000d883a 	mov	r6,zero
   27a6c:	01d00934 	movhi	r7,16420
   27a70:	00299680 	call	29968 <__muldf3>
   27a74:	803ff91e 	bne	r16,zero,27a5c <_mprec_log10+0x20>
   27a78:	dfc00117 	ldw	ra,4(sp)
   27a7c:	dc000017 	ldw	r16,0(sp)
   27a80:	dec00204 	addi	sp,sp,8
   27a84:	f800283a 	ret
   27a88:	202090fa 	slli	r16,r4,3
   27a8c:	008001f4 	movhi	r2,7
   27a90:	10b2c204 	addi	r2,r2,-13560
   27a94:	1421883a 	add	r16,r2,r16
   27a98:	80800017 	ldw	r2,0(r16)
   27a9c:	80c00117 	ldw	r3,4(r16)
   27aa0:	dfc00117 	ldw	ra,4(sp)
   27aa4:	dc000017 	ldw	r16,0(sp)
   27aa8:	dec00204 	addi	sp,sp,8
   27aac:	f800283a 	ret

00027ab0 <__copybits>:
   27ab0:	297fffc4 	addi	r5,r5,-1
   27ab4:	31c00417 	ldw	r7,16(r6)
   27ab8:	2811d17a 	srai	r8,r5,5
   27abc:	30800504 	addi	r2,r6,20
   27ac0:	39c00144 	addi	r7,r7,5
   27ac4:	42000044 	addi	r8,r8,1
   27ac8:	39cf883a 	add	r7,r7,r7
   27acc:	4211883a 	add	r8,r8,r8
   27ad0:	39cf883a 	add	r7,r7,r7
   27ad4:	4211883a 	add	r8,r8,r8
   27ad8:	31cf883a 	add	r7,r6,r7
   27adc:	2211883a 	add	r8,r4,r8
   27ae0:	11c00d2e 	bgeu	r2,r7,27b18 <__copybits+0x68>
   27ae4:	2007883a 	mov	r3,r4
   27ae8:	11400017 	ldw	r5,0(r2)
   27aec:	18c00104 	addi	r3,r3,4
   27af0:	10800104 	addi	r2,r2,4
   27af4:	197fff15 	stw	r5,-4(r3)
   27af8:	11fffb36 	bltu	r2,r7,27ae8 <__copybits+0x38>
   27afc:	3985c83a 	sub	r2,r7,r6
   27b00:	10bffac4 	addi	r2,r2,-21
   27b04:	1004d0ba 	srli	r2,r2,2
   27b08:	10800044 	addi	r2,r2,1
   27b0c:	1085883a 	add	r2,r2,r2
   27b10:	1085883a 	add	r2,r2,r2
   27b14:	2089883a 	add	r4,r4,r2
   27b18:	2200032e 	bgeu	r4,r8,27b28 <__copybits+0x78>
   27b1c:	20000015 	stw	zero,0(r4)
   27b20:	21000104 	addi	r4,r4,4
   27b24:	223ffd36 	bltu	r4,r8,27b1c <__copybits+0x6c>
   27b28:	f800283a 	ret

00027b2c <__any_on>:
   27b2c:	21800417 	ldw	r6,16(r4)
   27b30:	2805d17a 	srai	r2,r5,5
   27b34:	20c00504 	addi	r3,r4,20
   27b38:	30800f0e 	bge	r6,r2,27b78 <__any_on+0x4c>
   27b3c:	3005883a 	mov	r2,r6
   27b40:	10800144 	addi	r2,r2,5
   27b44:	1085883a 	add	r2,r2,r2
   27b48:	1085883a 	add	r2,r2,r2
   27b4c:	2089883a 	add	r4,r4,r2
   27b50:	1900152e 	bgeu	r3,r4,27ba8 <__any_on+0x7c>
   27b54:	20bfff17 	ldw	r2,-4(r4)
   27b58:	213fff04 	addi	r4,r4,-4
   27b5c:	1000041e 	bne	r2,zero,27b70 <__any_on+0x44>
   27b60:	1900112e 	bgeu	r3,r4,27ba8 <__any_on+0x7c>
   27b64:	213fff04 	addi	r4,r4,-4
   27b68:	20800017 	ldw	r2,0(r4)
   27b6c:	103ffc26 	beq	r2,zero,27b60 <__any_on+0x34>
   27b70:	00800044 	movi	r2,1
   27b74:	f800283a 	ret
   27b78:	11bff10e 	bge	r2,r6,27b40 <__any_on+0x14>
   27b7c:	294007cc 	andi	r5,r5,31
   27b80:	283fef26 	beq	r5,zero,27b40 <__any_on+0x14>
   27b84:	11800144 	addi	r6,r2,5
   27b88:	318d883a 	add	r6,r6,r6
   27b8c:	318d883a 	add	r6,r6,r6
   27b90:	218d883a 	add	r6,r4,r6
   27b94:	31800017 	ldw	r6,0(r6)
   27b98:	314ed83a 	srl	r7,r6,r5
   27b9c:	394a983a 	sll	r5,r7,r5
   27ba0:	29bff31e 	bne	r5,r6,27b70 <__any_on+0x44>
   27ba4:	003fe606 	br	27b40 <__any_on+0x14>
   27ba8:	0005883a 	mov	r2,zero
   27bac:	f800283a 	ret

00027bb0 <_realloc_r>:
   27bb0:	defff504 	addi	sp,sp,-44
   27bb4:	dd400615 	stw	r21,24(sp)
   27bb8:	dc800315 	stw	r18,12(sp)
   27bbc:	dc000115 	stw	r16,4(sp)
   27bc0:	dfc00a15 	stw	ra,40(sp)
   27bc4:	df000915 	stw	fp,36(sp)
   27bc8:	ddc00815 	stw	r23,32(sp)
   27bcc:	dd800715 	stw	r22,28(sp)
   27bd0:	dd000515 	stw	r20,20(sp)
   27bd4:	dcc00415 	stw	r19,16(sp)
   27bd8:	dc400215 	stw	r17,8(sp)
   27bdc:	2821883a 	mov	r16,r5
   27be0:	202b883a 	mov	r21,r4
   27be4:	3025883a 	mov	r18,r6
   27be8:	28009626 	beq	r5,zero,27e44 <_realloc_r+0x294>
   27bec:	002aba40 	call	2aba4 <__malloc_lock>
   27bf0:	80bfff17 	ldw	r2,-4(r16)
   27bf4:	04ffff04 	movi	r19,-4
   27bf8:	90c002c4 	addi	r3,r18,11
   27bfc:	01000584 	movi	r4,22
   27c00:	85bffe04 	addi	r22,r16,-8
   27c04:	14e6703a 	and	r19,r2,r19
   27c08:	20c0372e 	bgeu	r4,r3,27ce8 <_realloc_r+0x138>
   27c0c:	047ffe04 	movi	r17,-8
   27c10:	1c62703a 	and	r17,r3,r17
   27c14:	8807883a 	mov	r3,r17
   27c18:	88005a16 	blt	r17,zero,27d84 <_realloc_r+0x1d4>
   27c1c:	8c805936 	bltu	r17,r18,27d84 <_realloc_r+0x1d4>
   27c20:	98c0340e 	bge	r19,r3,27cf4 <_realloc_r+0x144>
   27c24:	070001f4 	movhi	fp,7
   27c28:	e7340c04 	addi	fp,fp,-12240
   27c2c:	e1400217 	ldw	r5,8(fp)
   27c30:	b4c9883a 	add	r4,r22,r19
   27c34:	29009026 	beq	r5,r4,27e78 <_realloc_r+0x2c8>
   27c38:	21800117 	ldw	r6,4(r4)
   27c3c:	01ffff84 	movi	r7,-2
   27c40:	31ce703a 	and	r7,r6,r7
   27c44:	21cf883a 	add	r7,r4,r7
   27c48:	39c00117 	ldw	r7,4(r7)
   27c4c:	39c0004c 	andi	r7,r7,1
   27c50:	38004326 	beq	r7,zero,27d60 <_realloc_r+0x1b0>
   27c54:	000d883a 	mov	r6,zero
   27c58:	0009883a 	mov	r4,zero
   27c5c:	1080004c 	andi	r2,r2,1
   27c60:	10005a1e 	bne	r2,zero,27dcc <_realloc_r+0x21c>
   27c64:	85fffe17 	ldw	r23,-8(r16)
   27c68:	00bfff04 	movi	r2,-4
   27c6c:	b5efc83a 	sub	r23,r22,r23
   27c70:	b9c00117 	ldw	r7,4(r23)
   27c74:	388e703a 	and	r7,r7,r2
   27c78:	3ccf883a 	add	r7,r7,r19
   27c7c:	20005226 	beq	r4,zero,27dc8 <_realloc_r+0x218>
   27c80:	31e9883a 	add	r20,r6,r7
   27c84:	2140c726 	beq	r4,r5,27fa4 <_realloc_r+0x3f4>
   27c88:	a0c04f16 	blt	r20,r3,27dc8 <_realloc_r+0x218>
   27c8c:	20800317 	ldw	r2,12(r4)
   27c90:	20c00217 	ldw	r3,8(r4)
   27c94:	99bfff04 	addi	r6,r19,-4
   27c98:	01000904 	movi	r4,36
   27c9c:	18800315 	stw	r2,12(r3)
   27ca0:	10c00215 	stw	r3,8(r2)
   27ca4:	b8c00217 	ldw	r3,8(r23)
   27ca8:	b8800317 	ldw	r2,12(r23)
   27cac:	bc800204 	addi	r18,r23,8
   27cb0:	18800315 	stw	r2,12(r3)
   27cb4:	10c00215 	stw	r3,8(r2)
   27cb8:	2180ed36 	bltu	r4,r6,28070 <_realloc_r+0x4c0>
   27cbc:	008004c4 	movi	r2,19
   27cc0:	11809b2e 	bgeu	r2,r6,27f30 <_realloc_r+0x380>
   27cc4:	80800017 	ldw	r2,0(r16)
   27cc8:	b8800215 	stw	r2,8(r23)
   27ccc:	80800117 	ldw	r2,4(r16)
   27cd0:	b8800315 	stw	r2,12(r23)
   27cd4:	008006c4 	movi	r2,27
   27cd8:	1180f936 	bltu	r2,r6,280c0 <_realloc_r+0x510>
   27cdc:	b8800404 	addi	r2,r23,16
   27ce0:	80c00204 	addi	r3,r16,8
   27ce4:	00009406 	br	27f38 <_realloc_r+0x388>
   27ce8:	00c00404 	movi	r3,16
   27cec:	1823883a 	mov	r17,r3
   27cf0:	003fca06 	br	27c1c <_realloc_r+0x6c>
   27cf4:	9829883a 	mov	r20,r19
   27cf8:	a447c83a 	sub	r3,r20,r17
   27cfc:	010003c4 	movi	r4,15
   27d00:	1080004c 	andi	r2,r2,1
   27d04:	20c02336 	bltu	r4,r3,27d94 <_realloc_r+0x1e4>
   27d08:	1504b03a 	or	r2,r2,r20
   27d0c:	b0800115 	stw	r2,4(r22)
   27d10:	b52d883a 	add	r22,r22,r20
   27d14:	b0800117 	ldw	r2,4(r22)
   27d18:	10800054 	ori	r2,r2,1
   27d1c:	b0800115 	stw	r2,4(r22)
   27d20:	a809883a 	mov	r4,r21
   27d24:	002abc40 	call	2abc4 <__malloc_unlock>
   27d28:	8025883a 	mov	r18,r16
   27d2c:	9005883a 	mov	r2,r18
   27d30:	dfc00a17 	ldw	ra,40(sp)
   27d34:	df000917 	ldw	fp,36(sp)
   27d38:	ddc00817 	ldw	r23,32(sp)
   27d3c:	dd800717 	ldw	r22,28(sp)
   27d40:	dd400617 	ldw	r21,24(sp)
   27d44:	dd000517 	ldw	r20,20(sp)
   27d48:	dcc00417 	ldw	r19,16(sp)
   27d4c:	dc800317 	ldw	r18,12(sp)
   27d50:	dc400217 	ldw	r17,8(sp)
   27d54:	dc000117 	ldw	r16,4(sp)
   27d58:	dec00b04 	addi	sp,sp,44
   27d5c:	f800283a 	ret
   27d60:	01ffff04 	movi	r7,-4
   27d64:	31cc703a 	and	r6,r6,r7
   27d68:	34e9883a 	add	r20,r6,r19
   27d6c:	a0ffbb16 	blt	r20,r3,27c5c <_realloc_r+0xac>
   27d70:	20c00317 	ldw	r3,12(r4)
   27d74:	21000217 	ldw	r4,8(r4)
   27d78:	20c00315 	stw	r3,12(r4)
   27d7c:	19000215 	stw	r4,8(r3)
   27d80:	003fdd06 	br	27cf8 <_realloc_r+0x148>
   27d84:	00800304 	movi	r2,12
   27d88:	a8800015 	stw	r2,0(r21)
   27d8c:	0025883a 	mov	r18,zero
   27d90:	003fe606 	br	27d2c <_realloc_r+0x17c>
   27d94:	1444b03a 	or	r2,r2,r17
   27d98:	b0800115 	stw	r2,4(r22)
   27d9c:	b44b883a 	add	r5,r22,r17
   27da0:	18800054 	ori	r2,r3,1
   27da4:	28800115 	stw	r2,4(r5)
   27da8:	28c7883a 	add	r3,r5,r3
   27dac:	18800117 	ldw	r2,4(r3)
   27db0:	a809883a 	mov	r4,r21
   27db4:	29400204 	addi	r5,r5,8
   27db8:	10800054 	ori	r2,r2,1
   27dbc:	18800115 	stw	r2,4(r3)
   27dc0:	00253a40 	call	253a4 <_free_r>
   27dc4:	003fd606 	br	27d20 <_realloc_r+0x170>
   27dc8:	38c0330e 	bge	r7,r3,27e98 <_realloc_r+0x2e8>
   27dcc:	900b883a 	mov	r5,r18
   27dd0:	a809883a 	mov	r4,r21
   27dd4:	0025f3c0 	call	25f3c <_malloc_r>
   27dd8:	1025883a 	mov	r18,r2
   27ddc:	10001626 	beq	r2,zero,27e38 <_realloc_r+0x288>
   27de0:	80bfff17 	ldw	r2,-4(r16)
   27de4:	00ffff84 	movi	r3,-2
   27de8:	913ffe04 	addi	r4,r18,-8
   27dec:	10c6703a 	and	r3,r2,r3
   27df0:	b0c7883a 	add	r3,r22,r3
   27df4:	20c09926 	beq	r4,r3,2805c <_realloc_r+0x4ac>
   27df8:	99bfff04 	addi	r6,r19,-4
   27dfc:	00800904 	movi	r2,36
   27e00:	11806436 	bltu	r2,r6,27f94 <_realloc_r+0x3e4>
   27e04:	00c004c4 	movi	r3,19
   27e08:	19804036 	bltu	r3,r6,27f0c <_realloc_r+0x35c>
   27e0c:	9005883a 	mov	r2,r18
   27e10:	8007883a 	mov	r3,r16
   27e14:	19000017 	ldw	r4,0(r3)
   27e18:	11000015 	stw	r4,0(r2)
   27e1c:	19000117 	ldw	r4,4(r3)
   27e20:	11000115 	stw	r4,4(r2)
   27e24:	18c00217 	ldw	r3,8(r3)
   27e28:	10c00215 	stw	r3,8(r2)
   27e2c:	a809883a 	mov	r4,r21
   27e30:	800b883a 	mov	r5,r16
   27e34:	00253a40 	call	253a4 <_free_r>
   27e38:	a809883a 	mov	r4,r21
   27e3c:	002abc40 	call	2abc4 <__malloc_unlock>
   27e40:	003fba06 	br	27d2c <_realloc_r+0x17c>
   27e44:	300b883a 	mov	r5,r6
   27e48:	dfc00a17 	ldw	ra,40(sp)
   27e4c:	df000917 	ldw	fp,36(sp)
   27e50:	ddc00817 	ldw	r23,32(sp)
   27e54:	dd800717 	ldw	r22,28(sp)
   27e58:	dd400617 	ldw	r21,24(sp)
   27e5c:	dd000517 	ldw	r20,20(sp)
   27e60:	dcc00417 	ldw	r19,16(sp)
   27e64:	dc800317 	ldw	r18,12(sp)
   27e68:	dc400217 	ldw	r17,8(sp)
   27e6c:	dc000117 	ldw	r16,4(sp)
   27e70:	dec00b04 	addi	sp,sp,44
   27e74:	0025f3c1 	jmpi	25f3c <_malloc_r>
   27e78:	29800117 	ldw	r6,4(r5)
   27e7c:	013fff04 	movi	r4,-4
   27e80:	89c00404 	addi	r7,r17,16
   27e84:	310c703a 	and	r6,r6,r4
   27e88:	34c9883a 	add	r4,r6,r19
   27e8c:	21c0340e 	bge	r4,r7,27f60 <_realloc_r+0x3b0>
   27e90:	2809883a 	mov	r4,r5
   27e94:	003f7106 	br	27c5c <_realloc_r+0xac>
   27e98:	b8800317 	ldw	r2,12(r23)
   27e9c:	b8c00217 	ldw	r3,8(r23)
   27ea0:	99bfff04 	addi	r6,r19,-4
   27ea4:	01000904 	movi	r4,36
   27ea8:	18800315 	stw	r2,12(r3)
   27eac:	10c00215 	stw	r3,8(r2)
   27eb0:	bc800204 	addi	r18,r23,8
   27eb4:	21807836 	bltu	r4,r6,28098 <_realloc_r+0x4e8>
   27eb8:	008004c4 	movi	r2,19
   27ebc:	1180732e 	bgeu	r2,r6,2808c <_realloc_r+0x4dc>
   27ec0:	80800017 	ldw	r2,0(r16)
   27ec4:	b8800215 	stw	r2,8(r23)
   27ec8:	80800117 	ldw	r2,4(r16)
   27ecc:	b8800315 	stw	r2,12(r23)
   27ed0:	008006c4 	movi	r2,27
   27ed4:	11808936 	bltu	r2,r6,280fc <_realloc_r+0x54c>
   27ed8:	b8800404 	addi	r2,r23,16
   27edc:	80c00204 	addi	r3,r16,8
   27ee0:	19000017 	ldw	r4,0(r3)
   27ee4:	9021883a 	mov	r16,r18
   27ee8:	3829883a 	mov	r20,r7
   27eec:	11000015 	stw	r4,0(r2)
   27ef0:	19000117 	ldw	r4,4(r3)
   27ef4:	b82d883a 	mov	r22,r23
   27ef8:	11000115 	stw	r4,4(r2)
   27efc:	18c00217 	ldw	r3,8(r3)
   27f00:	10c00215 	stw	r3,8(r2)
   27f04:	b8800117 	ldw	r2,4(r23)
   27f08:	003f7b06 	br	27cf8 <_realloc_r+0x148>
   27f0c:	80c00017 	ldw	r3,0(r16)
   27f10:	90c00015 	stw	r3,0(r18)
   27f14:	80c00117 	ldw	r3,4(r16)
   27f18:	90c00115 	stw	r3,4(r18)
   27f1c:	00c006c4 	movi	r3,27
   27f20:	19804636 	bltu	r3,r6,2803c <_realloc_r+0x48c>
   27f24:	90800204 	addi	r2,r18,8
   27f28:	80c00204 	addi	r3,r16,8
   27f2c:	003fb906 	br	27e14 <_realloc_r+0x264>
   27f30:	9005883a 	mov	r2,r18
   27f34:	8007883a 	mov	r3,r16
   27f38:	19000017 	ldw	r4,0(r3)
   27f3c:	9021883a 	mov	r16,r18
   27f40:	b82d883a 	mov	r22,r23
   27f44:	11000015 	stw	r4,0(r2)
   27f48:	19000117 	ldw	r4,4(r3)
   27f4c:	11000115 	stw	r4,4(r2)
   27f50:	18c00217 	ldw	r3,8(r3)
   27f54:	10c00215 	stw	r3,8(r2)
   27f58:	b8800117 	ldw	r2,4(r23)
   27f5c:	003f6606 	br	27cf8 <_realloc_r+0x148>
   27f60:	2445c83a 	sub	r2,r4,r17
   27f64:	b46d883a 	add	r22,r22,r17
   27f68:	10800054 	ori	r2,r2,1
   27f6c:	b0800115 	stw	r2,4(r22)
   27f70:	80bfff17 	ldw	r2,-4(r16)
   27f74:	a809883a 	mov	r4,r21
   27f78:	e5800215 	stw	r22,8(fp)
   27f7c:	1080004c 	andi	r2,r2,1
   27f80:	88a2b03a 	or	r17,r17,r2
   27f84:	847fff15 	stw	r17,-4(r16)
   27f88:	002abc40 	call	2abc4 <__malloc_unlock>
   27f8c:	8025883a 	mov	r18,r16
   27f90:	003f6606 	br	27d2c <_realloc_r+0x17c>
   27f94:	9009883a 	mov	r4,r18
   27f98:	800b883a 	mov	r5,r16
   27f9c:	00268f80 	call	268f8 <memmove>
   27fa0:	003fa206 	br	27e2c <_realloc_r+0x27c>
   27fa4:	88800404 	addi	r2,r17,16
   27fa8:	a0bf8716 	blt	r20,r2,27dc8 <_realloc_r+0x218>
   27fac:	b8800317 	ldw	r2,12(r23)
   27fb0:	b8c00217 	ldw	r3,8(r23)
   27fb4:	99bfff04 	addi	r6,r19,-4
   27fb8:	01000904 	movi	r4,36
   27fbc:	18800315 	stw	r2,12(r3)
   27fc0:	10c00215 	stw	r3,8(r2)
   27fc4:	bc800204 	addi	r18,r23,8
   27fc8:	21806536 	bltu	r4,r6,28160 <_realloc_r+0x5b0>
   27fcc:	008004c4 	movi	r2,19
   27fd0:	1180592e 	bgeu	r2,r6,28138 <_realloc_r+0x588>
   27fd4:	80800017 	ldw	r2,0(r16)
   27fd8:	b8800215 	stw	r2,8(r23)
   27fdc:	80800117 	ldw	r2,4(r16)
   27fe0:	b8800315 	stw	r2,12(r23)
   27fe4:	008006c4 	movi	r2,27
   27fe8:	11806136 	bltu	r2,r6,28170 <_realloc_r+0x5c0>
   27fec:	b8800404 	addi	r2,r23,16
   27ff0:	80c00204 	addi	r3,r16,8
   27ff4:	19000017 	ldw	r4,0(r3)
   27ff8:	11000015 	stw	r4,0(r2)
   27ffc:	19000117 	ldw	r4,4(r3)
   28000:	11000115 	stw	r4,4(r2)
   28004:	18c00217 	ldw	r3,8(r3)
   28008:	10c00215 	stw	r3,8(r2)
   2800c:	a447c83a 	sub	r3,r20,r17
   28010:	bc45883a 	add	r2,r23,r17
   28014:	18c00054 	ori	r3,r3,1
   28018:	10c00115 	stw	r3,4(r2)
   2801c:	b8c00117 	ldw	r3,4(r23)
   28020:	e0800215 	stw	r2,8(fp)
   28024:	a809883a 	mov	r4,r21
   28028:	1880004c 	andi	r2,r3,1
   2802c:	88a2b03a 	or	r17,r17,r2
   28030:	bc400115 	stw	r17,4(r23)
   28034:	002abc40 	call	2abc4 <__malloc_unlock>
   28038:	003f3c06 	br	27d2c <_realloc_r+0x17c>
   2803c:	80c00217 	ldw	r3,8(r16)
   28040:	90c00215 	stw	r3,8(r18)
   28044:	80c00317 	ldw	r3,12(r16)
   28048:	90c00315 	stw	r3,12(r18)
   2804c:	30802426 	beq	r6,r2,280e0 <_realloc_r+0x530>
   28050:	90800404 	addi	r2,r18,16
   28054:	80c00404 	addi	r3,r16,16
   28058:	003f6e06 	br	27e14 <_realloc_r+0x264>
   2805c:	953fff17 	ldw	r20,-4(r18)
   28060:	00ffff04 	movi	r3,-4
   28064:	a0e8703a 	and	r20,r20,r3
   28068:	a4e9883a 	add	r20,r20,r19
   2806c:	003f2206 	br	27cf8 <_realloc_r+0x148>
   28070:	800b883a 	mov	r5,r16
   28074:	9009883a 	mov	r4,r18
   28078:	00268f80 	call	268f8 <memmove>
   2807c:	9021883a 	mov	r16,r18
   28080:	b8800117 	ldw	r2,4(r23)
   28084:	b82d883a 	mov	r22,r23
   28088:	003f1b06 	br	27cf8 <_realloc_r+0x148>
   2808c:	9005883a 	mov	r2,r18
   28090:	8007883a 	mov	r3,r16
   28094:	003f9206 	br	27ee0 <_realloc_r+0x330>
   28098:	800b883a 	mov	r5,r16
   2809c:	9009883a 	mov	r4,r18
   280a0:	d9c00015 	stw	r7,0(sp)
   280a4:	00268f80 	call	268f8 <memmove>
   280a8:	d9c00017 	ldw	r7,0(sp)
   280ac:	9021883a 	mov	r16,r18
   280b0:	b8800117 	ldw	r2,4(r23)
   280b4:	3829883a 	mov	r20,r7
   280b8:	b82d883a 	mov	r22,r23
   280bc:	003f0e06 	br	27cf8 <_realloc_r+0x148>
   280c0:	80800217 	ldw	r2,8(r16)
   280c4:	b8800415 	stw	r2,16(r23)
   280c8:	80800317 	ldw	r2,12(r16)
   280cc:	b8800515 	stw	r2,20(r23)
   280d0:	31001226 	beq	r6,r4,2811c <_realloc_r+0x56c>
   280d4:	b8800604 	addi	r2,r23,24
   280d8:	80c00404 	addi	r3,r16,16
   280dc:	003f9606 	br	27f38 <_realloc_r+0x388>
   280e0:	81000417 	ldw	r4,16(r16)
   280e4:	90800604 	addi	r2,r18,24
   280e8:	80c00604 	addi	r3,r16,24
   280ec:	91000415 	stw	r4,16(r18)
   280f0:	81000517 	ldw	r4,20(r16)
   280f4:	91000515 	stw	r4,20(r18)
   280f8:	003f4606 	br	27e14 <_realloc_r+0x264>
   280fc:	80800217 	ldw	r2,8(r16)
   28100:	b8800415 	stw	r2,16(r23)
   28104:	80800317 	ldw	r2,12(r16)
   28108:	b8800515 	stw	r2,20(r23)
   2810c:	31000d26 	beq	r6,r4,28144 <_realloc_r+0x594>
   28110:	b8800604 	addi	r2,r23,24
   28114:	80c00404 	addi	r3,r16,16
   28118:	003f7106 	br	27ee0 <_realloc_r+0x330>
   2811c:	81000417 	ldw	r4,16(r16)
   28120:	b8800804 	addi	r2,r23,32
   28124:	80c00604 	addi	r3,r16,24
   28128:	b9000615 	stw	r4,24(r23)
   2812c:	81000517 	ldw	r4,20(r16)
   28130:	b9000715 	stw	r4,28(r23)
   28134:	003f8006 	br	27f38 <_realloc_r+0x388>
   28138:	9005883a 	mov	r2,r18
   2813c:	8007883a 	mov	r3,r16
   28140:	003fac06 	br	27ff4 <_realloc_r+0x444>
   28144:	81000417 	ldw	r4,16(r16)
   28148:	b8800804 	addi	r2,r23,32
   2814c:	80c00604 	addi	r3,r16,24
   28150:	b9000615 	stw	r4,24(r23)
   28154:	81000517 	ldw	r4,20(r16)
   28158:	b9000715 	stw	r4,28(r23)
   2815c:	003f6006 	br	27ee0 <_realloc_r+0x330>
   28160:	9009883a 	mov	r4,r18
   28164:	800b883a 	mov	r5,r16
   28168:	00268f80 	call	268f8 <memmove>
   2816c:	003fa706 	br	2800c <_realloc_r+0x45c>
   28170:	80800217 	ldw	r2,8(r16)
   28174:	b8800415 	stw	r2,16(r23)
   28178:	80800317 	ldw	r2,12(r16)
   2817c:	b8800515 	stw	r2,20(r23)
   28180:	31000326 	beq	r6,r4,28190 <_realloc_r+0x5e0>
   28184:	b8800604 	addi	r2,r23,24
   28188:	80c00404 	addi	r3,r16,16
   2818c:	003f9906 	br	27ff4 <_realloc_r+0x444>
   28190:	81000417 	ldw	r4,16(r16)
   28194:	b8800804 	addi	r2,r23,32
   28198:	80c00604 	addi	r3,r16,24
   2819c:	b9000615 	stw	r4,24(r23)
   281a0:	81000517 	ldw	r4,20(r16)
   281a4:	b9000715 	stw	r4,28(r23)
   281a8:	003f9206 	br	27ff4 <_realloc_r+0x444>

000281ac <__isinfd>:
   281ac:	0105c83a 	sub	r2,zero,r4
   281b0:	1108b03a 	or	r4,r2,r4
   281b4:	2004d7fa 	srli	r2,r4,31
   281b8:	00e00034 	movhi	r3,32768
   281bc:	18ffffc4 	addi	r3,r3,-1
   281c0:	28ca703a 	and	r5,r5,r3
   281c4:	1144b03a 	or	r2,r2,r5
   281c8:	00dffc34 	movhi	r3,32752
   281cc:	1885c83a 	sub	r2,r3,r2
   281d0:	0087c83a 	sub	r3,zero,r2
   281d4:	1884b03a 	or	r2,r3,r2
   281d8:	1005d7fa 	srai	r2,r2,31
   281dc:	10800044 	addi	r2,r2,1
   281e0:	f800283a 	ret

000281e4 <__isnand>:
   281e4:	0105c83a 	sub	r2,zero,r4
   281e8:	1108b03a 	or	r4,r2,r4
   281ec:	2004d7fa 	srli	r2,r4,31
   281f0:	00e00034 	movhi	r3,32768
   281f4:	18ffffc4 	addi	r3,r3,-1
   281f8:	28ca703a 	and	r5,r5,r3
   281fc:	1144b03a 	or	r2,r2,r5
   28200:	00dffc34 	movhi	r3,32752
   28204:	1885c83a 	sub	r2,r3,r2
   28208:	1004d7fa 	srli	r2,r2,31
   2820c:	f800283a 	ret

00028210 <_sbrk_r>:
   28210:	defffd04 	addi	sp,sp,-12
   28214:	dc400115 	stw	r17,4(sp)
   28218:	dc000015 	stw	r16,0(sp)
   2821c:	2023883a 	mov	r17,r4
   28220:	040001f4 	movhi	r16,7
   28224:	8439aa04 	addi	r16,r16,-6488
   28228:	2809883a 	mov	r4,r5
   2822c:	dfc00215 	stw	ra,8(sp)
   28230:	80000015 	stw	zero,0(r16)
   28234:	002ada80 	call	2ada8 <sbrk>
   28238:	00ffffc4 	movi	r3,-1
   2823c:	10c00526 	beq	r2,r3,28254 <_sbrk_r+0x44>
   28240:	dfc00217 	ldw	ra,8(sp)
   28244:	dc400117 	ldw	r17,4(sp)
   28248:	dc000017 	ldw	r16,0(sp)
   2824c:	dec00304 	addi	sp,sp,12
   28250:	f800283a 	ret
   28254:	80c00017 	ldw	r3,0(r16)
   28258:	183ff926 	beq	r3,zero,28240 <_sbrk_r+0x30>
   2825c:	88c00015 	stw	r3,0(r17)
   28260:	dfc00217 	ldw	ra,8(sp)
   28264:	dc400117 	ldw	r17,4(sp)
   28268:	dc000017 	ldw	r16,0(sp)
   2826c:	dec00304 	addi	sp,sp,12
   28270:	f800283a 	ret

00028274 <__sread>:
   28274:	defffe04 	addi	sp,sp,-8
   28278:	dc000015 	stw	r16,0(sp)
   2827c:	2821883a 	mov	r16,r5
   28280:	2940038f 	ldh	r5,14(r5)
   28284:	dfc00115 	stw	ra,4(sp)
   28288:	002887c0 	call	2887c <_read_r>
   2828c:	10000716 	blt	r2,zero,282ac <__sread+0x38>
   28290:	80c01417 	ldw	r3,80(r16)
   28294:	1887883a 	add	r3,r3,r2
   28298:	80c01415 	stw	r3,80(r16)
   2829c:	dfc00117 	ldw	ra,4(sp)
   282a0:	dc000017 	ldw	r16,0(sp)
   282a4:	dec00204 	addi	sp,sp,8
   282a8:	f800283a 	ret
   282ac:	80c0030b 	ldhu	r3,12(r16)
   282b0:	18fbffcc 	andi	r3,r3,61439
   282b4:	80c0030d 	sth	r3,12(r16)
   282b8:	dfc00117 	ldw	ra,4(sp)
   282bc:	dc000017 	ldw	r16,0(sp)
   282c0:	dec00204 	addi	sp,sp,8
   282c4:	f800283a 	ret

000282c8 <__swrite>:
   282c8:	2880030b 	ldhu	r2,12(r5)
   282cc:	defffb04 	addi	sp,sp,-20
   282d0:	dcc00315 	stw	r19,12(sp)
   282d4:	10c0400c 	andi	r3,r2,256
   282d8:	18ffffcc 	andi	r3,r3,65535
   282dc:	18e0001c 	xori	r3,r3,32768
   282e0:	dc800215 	stw	r18,8(sp)
   282e4:	dc400115 	stw	r17,4(sp)
   282e8:	dc000015 	stw	r16,0(sp)
   282ec:	dfc00415 	stw	ra,16(sp)
   282f0:	18e00004 	addi	r3,r3,-32768
   282f4:	2821883a 	mov	r16,r5
   282f8:	2027883a 	mov	r19,r4
   282fc:	3025883a 	mov	r18,r6
   28300:	3823883a 	mov	r17,r7
   28304:	18000526 	beq	r3,zero,2831c <__swrite+0x54>
   28308:	2940038f 	ldh	r5,14(r5)
   2830c:	000d883a 	mov	r6,zero
   28310:	01c00084 	movi	r7,2
   28314:	00288100 	call	28810 <_lseek_r>
   28318:	8080030b 	ldhu	r2,12(r16)
   2831c:	8140038f 	ldh	r5,14(r16)
   28320:	10bbffcc 	andi	r2,r2,61439
   28324:	9809883a 	mov	r4,r19
   28328:	900d883a 	mov	r6,r18
   2832c:	880f883a 	mov	r7,r17
   28330:	8080030d 	sth	r2,12(r16)
   28334:	dfc00417 	ldw	ra,16(sp)
   28338:	dcc00317 	ldw	r19,12(sp)
   2833c:	dc800217 	ldw	r18,8(sp)
   28340:	dc400117 	ldw	r17,4(sp)
   28344:	dc000017 	ldw	r16,0(sp)
   28348:	dec00504 	addi	sp,sp,20
   2834c:	00284581 	jmpi	28458 <_write_r>

00028350 <__sseek>:
   28350:	defffe04 	addi	sp,sp,-8
   28354:	dc000015 	stw	r16,0(sp)
   28358:	2821883a 	mov	r16,r5
   2835c:	2940038f 	ldh	r5,14(r5)
   28360:	dfc00115 	stw	ra,4(sp)
   28364:	00288100 	call	28810 <_lseek_r>
   28368:	00ffffc4 	movi	r3,-1
   2836c:	10c00826 	beq	r2,r3,28390 <__sseek+0x40>
   28370:	80c0030b 	ldhu	r3,12(r16)
   28374:	80801415 	stw	r2,80(r16)
   28378:	18c40014 	ori	r3,r3,4096
   2837c:	80c0030d 	sth	r3,12(r16)
   28380:	dfc00117 	ldw	ra,4(sp)
   28384:	dc000017 	ldw	r16,0(sp)
   28388:	dec00204 	addi	sp,sp,8
   2838c:	f800283a 	ret
   28390:	80c0030b 	ldhu	r3,12(r16)
   28394:	18fbffcc 	andi	r3,r3,61439
   28398:	80c0030d 	sth	r3,12(r16)
   2839c:	dfc00117 	ldw	ra,4(sp)
   283a0:	dc000017 	ldw	r16,0(sp)
   283a4:	dec00204 	addi	sp,sp,8
   283a8:	f800283a 	ret

000283ac <__sclose>:
   283ac:	2940038f 	ldh	r5,14(r5)
   283b0:	00285901 	jmpi	28590 <_close_r>

000283b4 <strcmp>:
   283b4:	2904b03a 	or	r2,r5,r4
   283b8:	108000cc 	andi	r2,r2,3
   283bc:	1000171e 	bne	r2,zero,2841c <strcmp+0x68>
   283c0:	20800017 	ldw	r2,0(r4)
   283c4:	28c00017 	ldw	r3,0(r5)
   283c8:	10c0141e 	bne	r2,r3,2841c <strcmp+0x68>
   283cc:	027fbff4 	movhi	r9,65279
   283d0:	4a7fbfc4 	addi	r9,r9,-257
   283d4:	1247883a 	add	r3,r2,r9
   283d8:	0084303a 	nor	r2,zero,r2
   283dc:	1884703a 	and	r2,r3,r2
   283e0:	02202074 	movhi	r8,32897
   283e4:	42202004 	addi	r8,r8,-32640
   283e8:	1204703a 	and	r2,r2,r8
   283ec:	10000226 	beq	r2,zero,283f8 <strcmp+0x44>
   283f0:	00001706 	br	28450 <strcmp+0x9c>
   283f4:	3000161e 	bne	r6,zero,28450 <strcmp+0x9c>
   283f8:	21000104 	addi	r4,r4,4
   283fc:	20800017 	ldw	r2,0(r4)
   28400:	29400104 	addi	r5,r5,4
   28404:	28c00017 	ldw	r3,0(r5)
   28408:	124f883a 	add	r7,r2,r9
   2840c:	008c303a 	nor	r6,zero,r2
   28410:	398c703a 	and	r6,r7,r6
   28414:	320c703a 	and	r6,r6,r8
   28418:	10fff626 	beq	r2,r3,283f4 <strcmp+0x40>
   2841c:	20800007 	ldb	r2,0(r4)
   28420:	1000051e 	bne	r2,zero,28438 <strcmp+0x84>
   28424:	00000606 	br	28440 <strcmp+0x8c>
   28428:	21000044 	addi	r4,r4,1
   2842c:	20800007 	ldb	r2,0(r4)
   28430:	29400044 	addi	r5,r5,1
   28434:	10000226 	beq	r2,zero,28440 <strcmp+0x8c>
   28438:	28c00007 	ldb	r3,0(r5)
   2843c:	10fffa26 	beq	r2,r3,28428 <strcmp+0x74>
   28440:	20c00003 	ldbu	r3,0(r4)
   28444:	28800003 	ldbu	r2,0(r5)
   28448:	1885c83a 	sub	r2,r3,r2
   2844c:	f800283a 	ret
   28450:	0005883a 	mov	r2,zero
   28454:	f800283a 	ret

00028458 <_write_r>:
   28458:	defffd04 	addi	sp,sp,-12
   2845c:	dc400115 	stw	r17,4(sp)
   28460:	dc000015 	stw	r16,0(sp)
   28464:	2023883a 	mov	r17,r4
   28468:	040001f4 	movhi	r16,7
   2846c:	8439aa04 	addi	r16,r16,-6488
   28470:	2809883a 	mov	r4,r5
   28474:	300b883a 	mov	r5,r6
   28478:	380d883a 	mov	r6,r7
   2847c:	dfc00215 	stw	ra,8(sp)
   28480:	80000015 	stw	zero,0(r16)
   28484:	002aea80 	call	2aea8 <write>
   28488:	00ffffc4 	movi	r3,-1
   2848c:	10c00526 	beq	r2,r3,284a4 <_write_r+0x4c>
   28490:	dfc00217 	ldw	ra,8(sp)
   28494:	dc400117 	ldw	r17,4(sp)
   28498:	dc000017 	ldw	r16,0(sp)
   2849c:	dec00304 	addi	sp,sp,12
   284a0:	f800283a 	ret
   284a4:	80c00017 	ldw	r3,0(r16)
   284a8:	183ff926 	beq	r3,zero,28490 <_write_r+0x38>
   284ac:	88c00015 	stw	r3,0(r17)
   284b0:	dfc00217 	ldw	ra,8(sp)
   284b4:	dc400117 	ldw	r17,4(sp)
   284b8:	dc000017 	ldw	r16,0(sp)
   284bc:	dec00304 	addi	sp,sp,12
   284c0:	f800283a 	ret

000284c4 <_calloc_r>:
   284c4:	defffe04 	addi	sp,sp,-8
   284c8:	dc000015 	stw	r16,0(sp)
   284cc:	2021883a 	mov	r16,r4
   284d0:	3009883a 	mov	r4,r6
   284d4:	dfc00115 	stw	ra,4(sp)
   284d8:	00210b00 	call	210b0 <__mulsi3>
   284dc:	8009883a 	mov	r4,r16
   284e0:	100b883a 	mov	r5,r2
   284e4:	0025f3c0 	call	25f3c <_malloc_r>
   284e8:	1021883a 	mov	r16,r2
   284ec:	10000c26 	beq	r2,zero,28520 <_calloc_r+0x5c>
   284f0:	11bfff17 	ldw	r6,-4(r2)
   284f4:	00ffff04 	movi	r3,-4
   284f8:	00800904 	movi	r2,36
   284fc:	30cc703a 	and	r6,r6,r3
   28500:	30cd883a 	add	r6,r6,r3
   28504:	11801436 	bltu	r2,r6,28558 <_calloc_r+0x94>
   28508:	00c004c4 	movi	r3,19
   2850c:	19800936 	bltu	r3,r6,28534 <_calloc_r+0x70>
   28510:	8005883a 	mov	r2,r16
   28514:	10000015 	stw	zero,0(r2)
   28518:	10000115 	stw	zero,4(r2)
   2851c:	10000215 	stw	zero,8(r2)
   28520:	8005883a 	mov	r2,r16
   28524:	dfc00117 	ldw	ra,4(sp)
   28528:	dc000017 	ldw	r16,0(sp)
   2852c:	dec00204 	addi	sp,sp,8
   28530:	f800283a 	ret
   28534:	80000015 	stw	zero,0(r16)
   28538:	80000115 	stw	zero,4(r16)
   2853c:	00c006c4 	movi	r3,27
   28540:	19800d2e 	bgeu	r3,r6,28578 <_calloc_r+0xb4>
   28544:	80000215 	stw	zero,8(r16)
   28548:	80000315 	stw	zero,12(r16)
   2854c:	30800c26 	beq	r6,r2,28580 <_calloc_r+0xbc>
   28550:	80800404 	addi	r2,r16,16
   28554:	003fef06 	br	28514 <_calloc_r+0x50>
   28558:	8009883a 	mov	r4,r16
   2855c:	000b883a 	mov	r5,zero
   28560:	0026a840 	call	26a84 <memset>
   28564:	8005883a 	mov	r2,r16
   28568:	dfc00117 	ldw	ra,4(sp)
   2856c:	dc000017 	ldw	r16,0(sp)
   28570:	dec00204 	addi	sp,sp,8
   28574:	f800283a 	ret
   28578:	80800204 	addi	r2,r16,8
   2857c:	003fe506 	br	28514 <_calloc_r+0x50>
   28580:	80000415 	stw	zero,16(r16)
   28584:	80000515 	stw	zero,20(r16)
   28588:	80800604 	addi	r2,r16,24
   2858c:	003fe106 	br	28514 <_calloc_r+0x50>

00028590 <_close_r>:
   28590:	defffd04 	addi	sp,sp,-12
   28594:	dc400115 	stw	r17,4(sp)
   28598:	dc000015 	stw	r16,0(sp)
   2859c:	2023883a 	mov	r17,r4
   285a0:	040001f4 	movhi	r16,7
   285a4:	8439aa04 	addi	r16,r16,-6488
   285a8:	2809883a 	mov	r4,r5
   285ac:	dfc00215 	stw	ra,8(sp)
   285b0:	80000015 	stw	zero,0(r16)
   285b4:	002a5f40 	call	2a5f4 <close>
   285b8:	00ffffc4 	movi	r3,-1
   285bc:	10c00526 	beq	r2,r3,285d4 <_close_r+0x44>
   285c0:	dfc00217 	ldw	ra,8(sp)
   285c4:	dc400117 	ldw	r17,4(sp)
   285c8:	dc000017 	ldw	r16,0(sp)
   285cc:	dec00304 	addi	sp,sp,12
   285d0:	f800283a 	ret
   285d4:	80c00017 	ldw	r3,0(r16)
   285d8:	183ff926 	beq	r3,zero,285c0 <_close_r+0x30>
   285dc:	88c00015 	stw	r3,0(r17)
   285e0:	dfc00217 	ldw	ra,8(sp)
   285e4:	dc400117 	ldw	r17,4(sp)
   285e8:	dc000017 	ldw	r16,0(sp)
   285ec:	dec00304 	addi	sp,sp,12
   285f0:	f800283a 	ret

000285f4 <_fclose_r>:
   285f4:	defffc04 	addi	sp,sp,-16
   285f8:	dc400115 	stw	r17,4(sp)
   285fc:	dc000015 	stw	r16,0(sp)
   28600:	dfc00315 	stw	ra,12(sp)
   28604:	dc800215 	stw	r18,8(sp)
   28608:	2821883a 	mov	r16,r5
   2860c:	2023883a 	mov	r17,r4
   28610:	28003426 	beq	r5,zero,286e4 <_fclose_r+0xf0>
   28614:	00252280 	call	25228 <__sfp_lock_acquire>
   28618:	88000226 	beq	r17,zero,28624 <_fclose_r+0x30>
   2861c:	88800e17 	ldw	r2,56(r17)
   28620:	10003826 	beq	r2,zero,28704 <_fclose_r+0x110>
   28624:	8080030f 	ldh	r2,12(r16)
   28628:	10002526 	beq	r2,zero,286c0 <_fclose_r+0xcc>
   2862c:	8809883a 	mov	r4,r17
   28630:	800b883a 	mov	r5,r16
   28634:	0024d640 	call	24d64 <_fflush_r>
   28638:	1025883a 	mov	r18,r2
   2863c:	80800b17 	ldw	r2,44(r16)
   28640:	10000426 	beq	r2,zero,28654 <_fclose_r+0x60>
   28644:	81400717 	ldw	r5,28(r16)
   28648:	8809883a 	mov	r4,r17
   2864c:	103ee83a 	callr	r2
   28650:	10003516 	blt	r2,zero,28728 <_fclose_r+0x134>
   28654:	8080030b 	ldhu	r2,12(r16)
   28658:	1080200c 	andi	r2,r2,128
   2865c:	10bfffcc 	andi	r2,r2,65535
   28660:	10a0001c 	xori	r2,r2,32768
   28664:	10a00004 	addi	r2,r2,-32768
   28668:	10002b1e 	bne	r2,zero,28718 <_fclose_r+0x124>
   2866c:	81400c17 	ldw	r5,48(r16)
   28670:	28000526 	beq	r5,zero,28688 <_fclose_r+0x94>
   28674:	80801004 	addi	r2,r16,64
   28678:	28800226 	beq	r5,r2,28684 <_fclose_r+0x90>
   2867c:	8809883a 	mov	r4,r17
   28680:	00253a40 	call	253a4 <_free_r>
   28684:	80000c15 	stw	zero,48(r16)
   28688:	81401117 	ldw	r5,68(r16)
   2868c:	28000326 	beq	r5,zero,2869c <_fclose_r+0xa8>
   28690:	8809883a 	mov	r4,r17
   28694:	00253a40 	call	253a4 <_free_r>
   28698:	80001115 	stw	zero,68(r16)
   2869c:	8000030d 	sth	zero,12(r16)
   286a0:	002522c0 	call	2522c <__sfp_lock_release>
   286a4:	9005883a 	mov	r2,r18
   286a8:	dfc00317 	ldw	ra,12(sp)
   286ac:	dc800217 	ldw	r18,8(sp)
   286b0:	dc400117 	ldw	r17,4(sp)
   286b4:	dc000017 	ldw	r16,0(sp)
   286b8:	dec00404 	addi	sp,sp,16
   286bc:	f800283a 	ret
   286c0:	002522c0 	call	2522c <__sfp_lock_release>
   286c4:	0025883a 	mov	r18,zero
   286c8:	9005883a 	mov	r2,r18
   286cc:	dfc00317 	ldw	ra,12(sp)
   286d0:	dc800217 	ldw	r18,8(sp)
   286d4:	dc400117 	ldw	r17,4(sp)
   286d8:	dc000017 	ldw	r16,0(sp)
   286dc:	dec00404 	addi	sp,sp,16
   286e0:	f800283a 	ret
   286e4:	0025883a 	mov	r18,zero
   286e8:	9005883a 	mov	r2,r18
   286ec:	dfc00317 	ldw	ra,12(sp)
   286f0:	dc800217 	ldw	r18,8(sp)
   286f4:	dc400117 	ldw	r17,4(sp)
   286f8:	dc000017 	ldw	r16,0(sp)
   286fc:	dec00404 	addi	sp,sp,16
   28700:	f800283a 	ret
   28704:	8809883a 	mov	r4,r17
   28708:	00250200 	call	25020 <__sinit>
   2870c:	8080030f 	ldh	r2,12(r16)
   28710:	103fc61e 	bne	r2,zero,2862c <_fclose_r+0x38>
   28714:	003fea06 	br	286c0 <_fclose_r+0xcc>
   28718:	81400417 	ldw	r5,16(r16)
   2871c:	8809883a 	mov	r4,r17
   28720:	00253a40 	call	253a4 <_free_r>
   28724:	003fd106 	br	2866c <_fclose_r+0x78>
   28728:	04bfffc4 	movi	r18,-1
   2872c:	003fc906 	br	28654 <_fclose_r+0x60>

00028730 <fclose>:
   28730:	008001f4 	movhi	r2,7
   28734:	10b99104 	addi	r2,r2,-6588
   28738:	200b883a 	mov	r5,r4
   2873c:	11000017 	ldw	r4,0(r2)
   28740:	00285f41 	jmpi	285f4 <_fclose_r>

00028744 <_fstat_r>:
   28744:	defffd04 	addi	sp,sp,-12
   28748:	dc400115 	stw	r17,4(sp)
   2874c:	dc000015 	stw	r16,0(sp)
   28750:	2023883a 	mov	r17,r4
   28754:	040001f4 	movhi	r16,7
   28758:	8439aa04 	addi	r16,r16,-6488
   2875c:	2809883a 	mov	r4,r5
   28760:	300b883a 	mov	r5,r6
   28764:	dfc00215 	stw	ra,8(sp)
   28768:	80000015 	stw	zero,0(r16)
   2876c:	002a7780 	call	2a778 <fstat>
   28770:	00ffffc4 	movi	r3,-1
   28774:	10c00526 	beq	r2,r3,2878c <_fstat_r+0x48>
   28778:	dfc00217 	ldw	ra,8(sp)
   2877c:	dc400117 	ldw	r17,4(sp)
   28780:	dc000017 	ldw	r16,0(sp)
   28784:	dec00304 	addi	sp,sp,12
   28788:	f800283a 	ret
   2878c:	80c00017 	ldw	r3,0(r16)
   28790:	183ff926 	beq	r3,zero,28778 <_fstat_r+0x34>
   28794:	88c00015 	stw	r3,0(r17)
   28798:	dfc00217 	ldw	ra,8(sp)
   2879c:	dc400117 	ldw	r17,4(sp)
   287a0:	dc000017 	ldw	r16,0(sp)
   287a4:	dec00304 	addi	sp,sp,12
   287a8:	f800283a 	ret

000287ac <_isatty_r>:
   287ac:	defffd04 	addi	sp,sp,-12
   287b0:	dc400115 	stw	r17,4(sp)
   287b4:	dc000015 	stw	r16,0(sp)
   287b8:	2023883a 	mov	r17,r4
   287bc:	040001f4 	movhi	r16,7
   287c0:	8439aa04 	addi	r16,r16,-6488
   287c4:	2809883a 	mov	r4,r5
   287c8:	dfc00215 	stw	ra,8(sp)
   287cc:	80000015 	stw	zero,0(r16)
   287d0:	002a8780 	call	2a878 <isatty>
   287d4:	00ffffc4 	movi	r3,-1
   287d8:	10c00526 	beq	r2,r3,287f0 <_isatty_r+0x44>
   287dc:	dfc00217 	ldw	ra,8(sp)
   287e0:	dc400117 	ldw	r17,4(sp)
   287e4:	dc000017 	ldw	r16,0(sp)
   287e8:	dec00304 	addi	sp,sp,12
   287ec:	f800283a 	ret
   287f0:	80c00017 	ldw	r3,0(r16)
   287f4:	183ff926 	beq	r3,zero,287dc <_isatty_r+0x30>
   287f8:	88c00015 	stw	r3,0(r17)
   287fc:	dfc00217 	ldw	ra,8(sp)
   28800:	dc400117 	ldw	r17,4(sp)
   28804:	dc000017 	ldw	r16,0(sp)
   28808:	dec00304 	addi	sp,sp,12
   2880c:	f800283a 	ret

00028810 <_lseek_r>:
   28810:	defffd04 	addi	sp,sp,-12
   28814:	dc400115 	stw	r17,4(sp)
   28818:	dc000015 	stw	r16,0(sp)
   2881c:	2023883a 	mov	r17,r4
   28820:	040001f4 	movhi	r16,7
   28824:	8439aa04 	addi	r16,r16,-6488
   28828:	2809883a 	mov	r4,r5
   2882c:	300b883a 	mov	r5,r6
   28830:	380d883a 	mov	r6,r7
   28834:	dfc00215 	stw	ra,8(sp)
   28838:	80000015 	stw	zero,0(r16)
   2883c:	002aa580 	call	2aa58 <lseek>
   28840:	00ffffc4 	movi	r3,-1
   28844:	10c00526 	beq	r2,r3,2885c <_lseek_r+0x4c>
   28848:	dfc00217 	ldw	ra,8(sp)
   2884c:	dc400117 	ldw	r17,4(sp)
   28850:	dc000017 	ldw	r16,0(sp)
   28854:	dec00304 	addi	sp,sp,12
   28858:	f800283a 	ret
   2885c:	80c00017 	ldw	r3,0(r16)
   28860:	183ff926 	beq	r3,zero,28848 <_lseek_r+0x38>
   28864:	88c00015 	stw	r3,0(r17)
   28868:	dfc00217 	ldw	ra,8(sp)
   2886c:	dc400117 	ldw	r17,4(sp)
   28870:	dc000017 	ldw	r16,0(sp)
   28874:	dec00304 	addi	sp,sp,12
   28878:	f800283a 	ret

0002887c <_read_r>:
   2887c:	defffd04 	addi	sp,sp,-12
   28880:	dc400115 	stw	r17,4(sp)
   28884:	dc000015 	stw	r16,0(sp)
   28888:	2023883a 	mov	r17,r4
   2888c:	040001f4 	movhi	r16,7
   28890:	8439aa04 	addi	r16,r16,-6488
   28894:	2809883a 	mov	r4,r5
   28898:	300b883a 	mov	r5,r6
   2889c:	380d883a 	mov	r6,r7
   288a0:	dfc00215 	stw	ra,8(sp)
   288a4:	80000015 	stw	zero,0(r16)
   288a8:	002ac340 	call	2ac34 <read>
   288ac:	00ffffc4 	movi	r3,-1
   288b0:	10c00526 	beq	r2,r3,288c8 <_read_r+0x4c>
   288b4:	dfc00217 	ldw	ra,8(sp)
   288b8:	dc400117 	ldw	r17,4(sp)
   288bc:	dc000017 	ldw	r16,0(sp)
   288c0:	dec00304 	addi	sp,sp,12
   288c4:	f800283a 	ret
   288c8:	80c00017 	ldw	r3,0(r16)
   288cc:	183ff926 	beq	r3,zero,288b4 <_read_r+0x38>
   288d0:	88c00015 	stw	r3,0(r17)
   288d4:	dfc00217 	ldw	ra,8(sp)
   288d8:	dc400117 	ldw	r17,4(sp)
   288dc:	dc000017 	ldw	r16,0(sp)
   288e0:	dec00304 	addi	sp,sp,12
   288e4:	f800283a 	ret

000288e8 <__udivdi3>:
   288e8:	defff504 	addi	sp,sp,-44
   288ec:	dd000515 	stw	r20,20(sp)
   288f0:	dcc00415 	stw	r19,16(sp)
   288f4:	dc800315 	stw	r18,12(sp)
   288f8:	dc400215 	stw	r17,8(sp)
   288fc:	dc000115 	stw	r16,4(sp)
   28900:	dfc00a15 	stw	ra,40(sp)
   28904:	df000915 	stw	fp,36(sp)
   28908:	ddc00815 	stw	r23,32(sp)
   2890c:	dd800715 	stw	r22,28(sp)
   28910:	dd400615 	stw	r21,24(sp)
   28914:	2025883a 	mov	r18,r4
   28918:	2823883a 	mov	r17,r5
   2891c:	3021883a 	mov	r16,r6
   28920:	2027883a 	mov	r19,r4
   28924:	2829883a 	mov	r20,r5
   28928:	3800451e 	bne	r7,zero,28a40 <__udivdi3+0x158>
   2892c:	2980652e 	bgeu	r5,r6,28ac4 <__udivdi3+0x1dc>
   28930:	00bfffd4 	movui	r2,65535
   28934:	1180b436 	bltu	r2,r6,28c08 <__udivdi3+0x320>
   28938:	00803fc4 	movi	r2,255
   2893c:	11816636 	bltu	r2,r6,28ed8 <__udivdi3+0x5f0>
   28940:	0005883a 	mov	r2,zero
   28944:	0007883a 	mov	r3,zero
   28948:	3084d83a 	srl	r2,r6,r2
   2894c:	010001f4 	movhi	r4,7
   28950:	21323f04 	addi	r4,r4,-14084
   28954:	2085883a 	add	r2,r4,r2
   28958:	10800003 	ldbu	r2,0(r2)
   2895c:	10c7883a 	add	r3,r2,r3
   28960:	00800804 	movi	r2,32
   28964:	10c5c83a 	sub	r2,r2,r3
   28968:	10000526 	beq	r2,zero,28980 <__udivdi3+0x98>
   2896c:	88a2983a 	sll	r17,r17,r2
   28970:	90c6d83a 	srl	r3,r18,r3
   28974:	30a0983a 	sll	r16,r6,r2
   28978:	90a6983a 	sll	r19,r18,r2
   2897c:	88e8b03a 	or	r20,r17,r3
   28980:	8022d43a 	srli	r17,r16,16
   28984:	a009883a 	mov	r4,r20
   28988:	857fffcc 	andi	r21,r16,65535
   2898c:	880b883a 	mov	r5,r17
   28990:	002a3c80 	call	2a3c8 <__umodsi3>
   28994:	a009883a 	mov	r4,r20
   28998:	880b883a 	mov	r5,r17
   2899c:	102d883a 	mov	r22,r2
   289a0:	002a3c00 	call	2a3c0 <__udivsi3>
   289a4:	1009883a 	mov	r4,r2
   289a8:	a80b883a 	mov	r5,r21
   289ac:	1025883a 	mov	r18,r2
   289b0:	00210b00 	call	210b0 <__mulsi3>
   289b4:	1009883a 	mov	r4,r2
   289b8:	b006943a 	slli	r3,r22,16
   289bc:	9804d43a 	srli	r2,r19,16
   289c0:	1886b03a 	or	r3,r3,r2
   289c4:	1900052e 	bgeu	r3,r4,289dc <__udivdi3+0xf4>
   289c8:	1c07883a 	add	r3,r3,r16
   289cc:	90bfffc4 	addi	r2,r18,-1
   289d0:	1c000136 	bltu	r3,r16,289d8 <__udivdi3+0xf0>
   289d4:	19015536 	bltu	r3,r4,28f2c <__udivdi3+0x644>
   289d8:	1025883a 	mov	r18,r2
   289dc:	1929c83a 	sub	r20,r3,r4
   289e0:	880b883a 	mov	r5,r17
   289e4:	a009883a 	mov	r4,r20
   289e8:	002a3c80 	call	2a3c8 <__umodsi3>
   289ec:	102d883a 	mov	r22,r2
   289f0:	880b883a 	mov	r5,r17
   289f4:	a009883a 	mov	r4,r20
   289f8:	b02c943a 	slli	r22,r22,16
   289fc:	002a3c00 	call	2a3c0 <__udivsi3>
   28a00:	1009883a 	mov	r4,r2
   28a04:	a80b883a 	mov	r5,r21
   28a08:	9cffffcc 	andi	r19,r19,65535
   28a0c:	1023883a 	mov	r17,r2
   28a10:	b4e6b03a 	or	r19,r22,r19
   28a14:	00210b00 	call	210b0 <__mulsi3>
   28a18:	9880052e 	bgeu	r19,r2,28a30 <__udivdi3+0x148>
   28a1c:	9c27883a 	add	r19,r19,r16
   28a20:	88ffffc4 	addi	r3,r17,-1
   28a24:	9c011436 	bltu	r19,r16,28e78 <__udivdi3+0x590>
   28a28:	9881132e 	bgeu	r19,r2,28e78 <__udivdi3+0x590>
   28a2c:	8c7fff84 	addi	r17,r17,-2
   28a30:	9004943a 	slli	r2,r18,16
   28a34:	0007883a 	mov	r3,zero
   28a38:	8884b03a 	or	r2,r17,r2
   28a3c:	00001506 	br	28a94 <__udivdi3+0x1ac>
   28a40:	29c06a36 	bltu	r5,r7,28bec <__udivdi3+0x304>
   28a44:	00bfffd4 	movui	r2,65535
   28a48:	11c06a2e 	bgeu	r2,r7,28bf4 <__udivdi3+0x30c>
   28a4c:	00804034 	movhi	r2,256
   28a50:	10bfffc4 	addi	r2,r2,-1
   28a54:	11c11436 	bltu	r2,r7,28ea8 <__udivdi3+0x5c0>
   28a58:	00c00404 	movi	r3,16
   28a5c:	180b883a 	mov	r5,r3
   28a60:	38c6d83a 	srl	r3,r7,r3
   28a64:	010001f4 	movhi	r4,7
   28a68:	21323f04 	addi	r4,r4,-14084
   28a6c:	04000804 	movi	r16,32
   28a70:	20c7883a 	add	r3,r4,r3
   28a74:	18800003 	ldbu	r2,0(r3)
   28a78:	1145883a 	add	r2,r2,r5
   28a7c:	80a1c83a 	sub	r16,r16,r2
   28a80:	80006e1e 	bne	r16,zero,28c3c <__udivdi3+0x354>
   28a84:	0007883a 	mov	r3,zero
   28a88:	3c406a36 	bltu	r7,r17,28c34 <__udivdi3+0x34c>
   28a8c:	9180692e 	bgeu	r18,r6,28c34 <__udivdi3+0x34c>
   28a90:	0005883a 	mov	r2,zero
   28a94:	dfc00a17 	ldw	ra,40(sp)
   28a98:	df000917 	ldw	fp,36(sp)
   28a9c:	ddc00817 	ldw	r23,32(sp)
   28aa0:	dd800717 	ldw	r22,28(sp)
   28aa4:	dd400617 	ldw	r21,24(sp)
   28aa8:	dd000517 	ldw	r20,20(sp)
   28aac:	dcc00417 	ldw	r19,16(sp)
   28ab0:	dc800317 	ldw	r18,12(sp)
   28ab4:	dc400217 	ldw	r17,8(sp)
   28ab8:	dc000117 	ldw	r16,4(sp)
   28abc:	dec00b04 	addi	sp,sp,44
   28ac0:	f800283a 	ret
   28ac4:	3000041e 	bne	r6,zero,28ad8 <__udivdi3+0x1f0>
   28ac8:	01000044 	movi	r4,1
   28acc:	000b883a 	mov	r5,zero
   28ad0:	002a3c00 	call	2a3c0 <__udivsi3>
   28ad4:	1021883a 	mov	r16,r2
   28ad8:	00bfffd4 	movui	r2,65535
   28adc:	1400502e 	bgeu	r2,r16,28c20 <__udivdi3+0x338>
   28ae0:	00804034 	movhi	r2,256
   28ae4:	10bfffc4 	addi	r2,r2,-1
   28ae8:	1400f536 	bltu	r2,r16,28ec0 <__udivdi3+0x5d8>
   28aec:	00800404 	movi	r2,16
   28af0:	1007883a 	mov	r3,r2
   28af4:	8084d83a 	srl	r2,r16,r2
   28af8:	010001f4 	movhi	r4,7
   28afc:	21323f04 	addi	r4,r4,-14084
   28b00:	2085883a 	add	r2,r4,r2
   28b04:	10800003 	ldbu	r2,0(r2)
   28b08:	10c7883a 	add	r3,r2,r3
   28b0c:	00800804 	movi	r2,32
   28b10:	10c5c83a 	sub	r2,r2,r3
   28b14:	1000a01e 	bne	r2,zero,28d98 <__udivdi3+0x4b0>
   28b18:	8028d43a 	srli	r20,r16,16
   28b1c:	8c23c83a 	sub	r17,r17,r16
   28b20:	857fffcc 	andi	r21,r16,65535
   28b24:	00c00044 	movi	r3,1
   28b28:	8809883a 	mov	r4,r17
   28b2c:	a00b883a 	mov	r5,r20
   28b30:	d8c00015 	stw	r3,0(sp)
   28b34:	002a3c80 	call	2a3c8 <__umodsi3>
   28b38:	8809883a 	mov	r4,r17
   28b3c:	a00b883a 	mov	r5,r20
   28b40:	102d883a 	mov	r22,r2
   28b44:	002a3c00 	call	2a3c0 <__udivsi3>
   28b48:	1009883a 	mov	r4,r2
   28b4c:	a80b883a 	mov	r5,r21
   28b50:	1025883a 	mov	r18,r2
   28b54:	00210b00 	call	210b0 <__mulsi3>
   28b58:	1009883a 	mov	r4,r2
   28b5c:	b00c943a 	slli	r6,r22,16
   28b60:	9804d43a 	srli	r2,r19,16
   28b64:	d8c00017 	ldw	r3,0(sp)
   28b68:	308cb03a 	or	r6,r6,r2
   28b6c:	3100052e 	bgeu	r6,r4,28b84 <__udivdi3+0x29c>
   28b70:	340d883a 	add	r6,r6,r16
   28b74:	90bfffc4 	addi	r2,r18,-1
   28b78:	34000136 	bltu	r6,r16,28b80 <__udivdi3+0x298>
   28b7c:	3100e836 	bltu	r6,r4,28f20 <__udivdi3+0x638>
   28b80:	1025883a 	mov	r18,r2
   28b84:	3123c83a 	sub	r17,r6,r4
   28b88:	8809883a 	mov	r4,r17
   28b8c:	a00b883a 	mov	r5,r20
   28b90:	d8c00015 	stw	r3,0(sp)
   28b94:	002a3c80 	call	2a3c8 <__umodsi3>
   28b98:	102d883a 	mov	r22,r2
   28b9c:	8809883a 	mov	r4,r17
   28ba0:	a00b883a 	mov	r5,r20
   28ba4:	b02c943a 	slli	r22,r22,16
   28ba8:	002a3c00 	call	2a3c0 <__udivsi3>
   28bac:	1009883a 	mov	r4,r2
   28bb0:	a80b883a 	mov	r5,r21
   28bb4:	9cffffcc 	andi	r19,r19,65535
   28bb8:	1023883a 	mov	r17,r2
   28bbc:	b4e6b03a 	or	r19,r22,r19
   28bc0:	00210b00 	call	210b0 <__mulsi3>
   28bc4:	d8c00017 	ldw	r3,0(sp)
   28bc8:	9880052e 	bgeu	r19,r2,28be0 <__udivdi3+0x2f8>
   28bcc:	9c27883a 	add	r19,r19,r16
   28bd0:	893fffc4 	addi	r4,r17,-1
   28bd4:	9c00aa36 	bltu	r19,r16,28e80 <__udivdi3+0x598>
   28bd8:	9880a92e 	bgeu	r19,r2,28e80 <__udivdi3+0x598>
   28bdc:	8c7fff84 	addi	r17,r17,-2
   28be0:	9004943a 	slli	r2,r18,16
   28be4:	8884b03a 	or	r2,r17,r2
   28be8:	003faa06 	br	28a94 <__udivdi3+0x1ac>
   28bec:	0007883a 	mov	r3,zero
   28bf0:	003fa706 	br	28a90 <__udivdi3+0x1a8>
   28bf4:	00803fc4 	movi	r2,255
   28bf8:	11c0ae36 	bltu	r2,r7,28eb4 <__udivdi3+0x5cc>
   28bfc:	0007883a 	mov	r3,zero
   28c00:	000b883a 	mov	r5,zero
   28c04:	003f9606 	br	28a60 <__udivdi3+0x178>
   28c08:	00804034 	movhi	r2,256
   28c0c:	10bfffc4 	addi	r2,r2,-1
   28c10:	1180ae36 	bltu	r2,r6,28ecc <__udivdi3+0x5e4>
   28c14:	00800404 	movi	r2,16
   28c18:	1007883a 	mov	r3,r2
   28c1c:	003f4a06 	br	28948 <__udivdi3+0x60>
   28c20:	00803fc4 	movi	r2,255
   28c24:	1400af36 	bltu	r2,r16,28ee4 <__udivdi3+0x5fc>
   28c28:	0005883a 	mov	r2,zero
   28c2c:	0007883a 	mov	r3,zero
   28c30:	003fb006 	br	28af4 <__udivdi3+0x20c>
   28c34:	00800044 	movi	r2,1
   28c38:	003f9606 	br	28a94 <__udivdi3+0x1ac>
   28c3c:	3c0e983a 	sll	r7,r7,r16
   28c40:	3086d83a 	srl	r3,r6,r2
   28c44:	88aed83a 	srl	r23,r17,r2
   28c48:	9084d83a 	srl	r2,r18,r2
   28c4c:	38e6b03a 	or	r19,r7,r3
   28c50:	9828d43a 	srli	r20,r19,16
   28c54:	8c22983a 	sll	r17,r17,r16
   28c58:	b809883a 	mov	r4,r23
   28c5c:	a00b883a 	mov	r5,r20
   28c60:	342a983a 	sll	r21,r6,r16
   28c64:	88a2b03a 	or	r17,r17,r2
   28c68:	002a3c80 	call	2a3c8 <__umodsi3>
   28c6c:	b809883a 	mov	r4,r23
   28c70:	a00b883a 	mov	r5,r20
   28c74:	1039883a 	mov	fp,r2
   28c78:	9dbfffcc 	andi	r22,r19,65535
   28c7c:	002a3c00 	call	2a3c0 <__udivsi3>
   28c80:	1009883a 	mov	r4,r2
   28c84:	b00b883a 	mov	r5,r22
   28c88:	102f883a 	mov	r23,r2
   28c8c:	00210b00 	call	210b0 <__mulsi3>
   28c90:	1009883a 	mov	r4,r2
   28c94:	e00e943a 	slli	r7,fp,16
   28c98:	8804d43a 	srli	r2,r17,16
   28c9c:	388eb03a 	or	r7,r7,r2
   28ca0:	3900042e 	bgeu	r7,r4,28cb4 <__udivdi3+0x3cc>
   28ca4:	3ccf883a 	add	r7,r7,r19
   28ca8:	b8bfffc4 	addi	r2,r23,-1
   28cac:	3cc0942e 	bgeu	r7,r19,28f00 <__udivdi3+0x618>
   28cb0:	102f883a 	mov	r23,r2
   28cb4:	3939c83a 	sub	fp,r7,r4
   28cb8:	a00b883a 	mov	r5,r20
   28cbc:	e009883a 	mov	r4,fp
   28cc0:	002a3c80 	call	2a3c8 <__umodsi3>
   28cc4:	a00b883a 	mov	r5,r20
   28cc8:	e009883a 	mov	r4,fp
   28ccc:	d8800015 	stw	r2,0(sp)
   28cd0:	002a3c00 	call	2a3c0 <__udivsi3>
   28cd4:	1009883a 	mov	r4,r2
   28cd8:	b00b883a 	mov	r5,r22
   28cdc:	1029883a 	mov	r20,r2
   28ce0:	00210b00 	call	210b0 <__mulsi3>
   28ce4:	d8c00017 	ldw	r3,0(sp)
   28ce8:	8c7fffcc 	andi	r17,r17,65535
   28cec:	1806943a 	slli	r3,r3,16
   28cf0:	1c46b03a 	or	r3,r3,r17
   28cf4:	1880042e 	bgeu	r3,r2,28d08 <__udivdi3+0x420>
   28cf8:	1cc7883a 	add	r3,r3,r19
   28cfc:	a13fffc4 	addi	r4,r20,-1
   28d00:	1cc07b2e 	bgeu	r3,r19,28ef0 <__udivdi3+0x608>
   28d04:	2029883a 	mov	r20,r4
   28d08:	b82e943a 	slli	r23,r23,16
   28d0c:	a822d43a 	srli	r17,r21,16
   28d10:	ad7fffcc 	andi	r21,r21,65535
   28d14:	a5e8b03a 	or	r20,r20,r23
   28d18:	a5bfffcc 	andi	r22,r20,65535
   28d1c:	b009883a 	mov	r4,r22
   28d20:	a80b883a 	mov	r5,r21
   28d24:	18afc83a 	sub	r23,r3,r2
   28d28:	a026d43a 	srli	r19,r20,16
   28d2c:	00210b00 	call	210b0 <__mulsi3>
   28d30:	b009883a 	mov	r4,r22
   28d34:	880b883a 	mov	r5,r17
   28d38:	1039883a 	mov	fp,r2
   28d3c:	00210b00 	call	210b0 <__mulsi3>
   28d40:	a80b883a 	mov	r5,r21
   28d44:	9809883a 	mov	r4,r19
   28d48:	102d883a 	mov	r22,r2
   28d4c:	00210b00 	call	210b0 <__mulsi3>
   28d50:	9809883a 	mov	r4,r19
   28d54:	880b883a 	mov	r5,r17
   28d58:	102b883a 	mov	r21,r2
   28d5c:	00210b00 	call	210b0 <__mulsi3>
   28d60:	100b883a 	mov	r5,r2
   28d64:	e004d43a 	srli	r2,fp,16
   28d68:	ad89883a 	add	r4,r21,r22
   28d6c:	2089883a 	add	r4,r4,r2
   28d70:	2540022e 	bgeu	r4,r21,28d7c <__udivdi3+0x494>
   28d74:	00800074 	movhi	r2,1
   28d78:	288b883a 	add	r5,r5,r2
   28d7c:	2004d43a 	srli	r2,r4,16
   28d80:	288b883a 	add	r5,r5,r2
   28d84:	b9404536 	bltu	r23,r5,28e9c <__udivdi3+0x5b4>
   28d88:	b9403f26 	beq	r23,r5,28e88 <__udivdi3+0x5a0>
   28d8c:	a005883a 	mov	r2,r20
   28d90:	0007883a 	mov	r3,zero
   28d94:	003f3f06 	br	28a94 <__udivdi3+0x1ac>
   28d98:	80a0983a 	sll	r16,r16,r2
   28d9c:	88eed83a 	srl	r23,r17,r3
   28da0:	90c6d83a 	srl	r3,r18,r3
   28da4:	8028d43a 	srli	r20,r16,16
   28da8:	88a2983a 	sll	r17,r17,r2
   28dac:	b809883a 	mov	r4,r23
   28db0:	a00b883a 	mov	r5,r20
   28db4:	88ecb03a 	or	r22,r17,r3
   28db8:	90a6983a 	sll	r19,r18,r2
   28dbc:	002a3c80 	call	2a3c8 <__umodsi3>
   28dc0:	b809883a 	mov	r4,r23
   28dc4:	a00b883a 	mov	r5,r20
   28dc8:	1023883a 	mov	r17,r2
   28dcc:	857fffcc 	andi	r21,r16,65535
   28dd0:	002a3c00 	call	2a3c0 <__udivsi3>
   28dd4:	1009883a 	mov	r4,r2
   28dd8:	a80b883a 	mov	r5,r21
   28ddc:	102f883a 	mov	r23,r2
   28de0:	00210b00 	call	210b0 <__mulsi3>
   28de4:	1009883a 	mov	r4,r2
   28de8:	880a943a 	slli	r5,r17,16
   28dec:	b004d43a 	srli	r2,r22,16
   28df0:	288ab03a 	or	r5,r5,r2
   28df4:	2900062e 	bgeu	r5,r4,28e10 <__udivdi3+0x528>
   28df8:	2c0b883a 	add	r5,r5,r16
   28dfc:	b8bfffc4 	addi	r2,r23,-1
   28e00:	2c004536 	bltu	r5,r16,28f18 <__udivdi3+0x630>
   28e04:	2900442e 	bgeu	r5,r4,28f18 <__udivdi3+0x630>
   28e08:	bdffff84 	addi	r23,r23,-2
   28e0c:	2c0b883a 	add	r5,r5,r16
   28e10:	2925c83a 	sub	r18,r5,r4
   28e14:	9009883a 	mov	r4,r18
   28e18:	a00b883a 	mov	r5,r20
   28e1c:	002a3c80 	call	2a3c8 <__umodsi3>
   28e20:	1023883a 	mov	r17,r2
   28e24:	9009883a 	mov	r4,r18
   28e28:	a00b883a 	mov	r5,r20
   28e2c:	8822943a 	slli	r17,r17,16
   28e30:	002a3c00 	call	2a3c0 <__udivsi3>
   28e34:	1009883a 	mov	r4,r2
   28e38:	a80b883a 	mov	r5,r21
   28e3c:	b5bfffcc 	andi	r22,r22,65535
   28e40:	1025883a 	mov	r18,r2
   28e44:	8da2b03a 	or	r17,r17,r22
   28e48:	00210b00 	call	210b0 <__mulsi3>
   28e4c:	8880062e 	bgeu	r17,r2,28e68 <__udivdi3+0x580>
   28e50:	8c23883a 	add	r17,r17,r16
   28e54:	90ffffc4 	addi	r3,r18,-1
   28e58:	8c002d36 	bltu	r17,r16,28f10 <__udivdi3+0x628>
   28e5c:	88802c2e 	bgeu	r17,r2,28f10 <__udivdi3+0x628>
   28e60:	94bfff84 	addi	r18,r18,-2
   28e64:	8c23883a 	add	r17,r17,r16
   28e68:	b806943a 	slli	r3,r23,16
   28e6c:	88a3c83a 	sub	r17,r17,r2
   28e70:	90c6b03a 	or	r3,r18,r3
   28e74:	003f2c06 	br	28b28 <__udivdi3+0x240>
   28e78:	1823883a 	mov	r17,r3
   28e7c:	003eec06 	br	28a30 <__udivdi3+0x148>
   28e80:	2023883a 	mov	r17,r4
   28e84:	003f5606 	br	28be0 <__udivdi3+0x2f8>
   28e88:	2008943a 	slli	r4,r4,16
   28e8c:	9420983a 	sll	r16,r18,r16
   28e90:	e73fffcc 	andi	fp,fp,65535
   28e94:	2709883a 	add	r4,r4,fp
   28e98:	813fbc2e 	bgeu	r16,r4,28d8c <__udivdi3+0x4a4>
   28e9c:	a0bfffc4 	addi	r2,r20,-1
   28ea0:	0007883a 	mov	r3,zero
   28ea4:	003efb06 	br	28a94 <__udivdi3+0x1ac>
   28ea8:	00c00604 	movi	r3,24
   28eac:	180b883a 	mov	r5,r3
   28eb0:	003eeb06 	br	28a60 <__udivdi3+0x178>
   28eb4:	00c00204 	movi	r3,8
   28eb8:	180b883a 	mov	r5,r3
   28ebc:	003ee806 	br	28a60 <__udivdi3+0x178>
   28ec0:	00800604 	movi	r2,24
   28ec4:	1007883a 	mov	r3,r2
   28ec8:	003f0a06 	br	28af4 <__udivdi3+0x20c>
   28ecc:	00800604 	movi	r2,24
   28ed0:	1007883a 	mov	r3,r2
   28ed4:	003e9c06 	br	28948 <__udivdi3+0x60>
   28ed8:	00800204 	movi	r2,8
   28edc:	1007883a 	mov	r3,r2
   28ee0:	003e9906 	br	28948 <__udivdi3+0x60>
   28ee4:	00800204 	movi	r2,8
   28ee8:	1007883a 	mov	r3,r2
   28eec:	003f0106 	br	28af4 <__udivdi3+0x20c>
   28ef0:	18bf842e 	bgeu	r3,r2,28d04 <__udivdi3+0x41c>
   28ef4:	a53fff84 	addi	r20,r20,-2
   28ef8:	1cc7883a 	add	r3,r3,r19
   28efc:	003f8206 	br	28d08 <__udivdi3+0x420>
   28f00:	393f6b2e 	bgeu	r7,r4,28cb0 <__udivdi3+0x3c8>
   28f04:	bdffff84 	addi	r23,r23,-2
   28f08:	3ccf883a 	add	r7,r7,r19
   28f0c:	003f6906 	br	28cb4 <__udivdi3+0x3cc>
   28f10:	1825883a 	mov	r18,r3
   28f14:	003fd406 	br	28e68 <__udivdi3+0x580>
   28f18:	102f883a 	mov	r23,r2
   28f1c:	003fbc06 	br	28e10 <__udivdi3+0x528>
   28f20:	94bfff84 	addi	r18,r18,-2
   28f24:	340d883a 	add	r6,r6,r16
   28f28:	003f1606 	br	28b84 <__udivdi3+0x29c>
   28f2c:	94bfff84 	addi	r18,r18,-2
   28f30:	1c07883a 	add	r3,r3,r16
   28f34:	003ea906 	br	289dc <__udivdi3+0xf4>

00028f38 <__umoddi3>:
   28f38:	defff304 	addi	sp,sp,-52
   28f3c:	dd000715 	stw	r20,28(sp)
   28f40:	dcc00615 	stw	r19,24(sp)
   28f44:	dc800515 	stw	r18,20(sp)
   28f48:	dc400415 	stw	r17,16(sp)
   28f4c:	dc000315 	stw	r16,12(sp)
   28f50:	dfc00c15 	stw	ra,48(sp)
   28f54:	df000b15 	stw	fp,44(sp)
   28f58:	ddc00a15 	stw	r23,40(sp)
   28f5c:	dd800915 	stw	r22,36(sp)
   28f60:	dd400815 	stw	r21,32(sp)
   28f64:	2025883a 	mov	r18,r4
   28f68:	2823883a 	mov	r17,r5
   28f6c:	3021883a 	mov	r16,r6
   28f70:	2027883a 	mov	r19,r4
   28f74:	2829883a 	mov	r20,r5
   28f78:	38003a1e 	bne	r7,zero,29064 <__umoddi3+0x12c>
   28f7c:	2980522e 	bgeu	r5,r6,290c8 <__umoddi3+0x190>
   28f80:	00bfffd4 	movui	r2,65535
   28f84:	1180a436 	bltu	r2,r6,29218 <__umoddi3+0x2e0>
   28f88:	00803fc4 	movi	r2,255
   28f8c:	11816036 	bltu	r2,r6,29510 <__umoddi3+0x5d8>
   28f90:	0005883a 	mov	r2,zero
   28f94:	0009883a 	mov	r4,zero
   28f98:	3084d83a 	srl	r2,r6,r2
   28f9c:	00c001f4 	movhi	r3,7
   28fa0:	18f23f04 	addi	r3,r3,-14084
   28fa4:	05400804 	movi	r21,32
   28fa8:	1885883a 	add	r2,r3,r2
   28fac:	10800003 	ldbu	r2,0(r2)
   28fb0:	1109883a 	add	r4,r2,r4
   28fb4:	a92bc83a 	sub	r21,r21,r4
   28fb8:	a8010e26 	beq	r21,zero,293f4 <__umoddi3+0x4bc>
   28fbc:	8d62983a 	sll	r17,r17,r21
   28fc0:	9108d83a 	srl	r4,r18,r4
   28fc4:	3560983a 	sll	r16,r6,r21
   28fc8:	9566983a 	sll	r19,r18,r21
   28fcc:	8928b03a 	or	r20,r17,r4
   28fd0:	8022d43a 	srli	r17,r16,16
   28fd4:	a009883a 	mov	r4,r20
   28fd8:	84bfffcc 	andi	r18,r16,65535
   28fdc:	880b883a 	mov	r5,r17
   28fe0:	002a3c80 	call	2a3c8 <__umodsi3>
   28fe4:	a009883a 	mov	r4,r20
   28fe8:	880b883a 	mov	r5,r17
   28fec:	102d883a 	mov	r22,r2
   28ff0:	002a3c00 	call	2a3c0 <__udivsi3>
   28ff4:	1009883a 	mov	r4,r2
   28ff8:	900b883a 	mov	r5,r18
   28ffc:	00210b00 	call	210b0 <__mulsi3>
   29000:	1009883a 	mov	r4,r2
   29004:	b006943a 	slli	r3,r22,16
   29008:	9804d43a 	srli	r2,r19,16
   2900c:	1886b03a 	or	r3,r3,r2
   29010:	1900042e 	bgeu	r3,r4,29024 <__umoddi3+0xec>
   29014:	1c07883a 	add	r3,r3,r16
   29018:	1c000236 	bltu	r3,r16,29024 <__umoddi3+0xec>
   2901c:	1900012e 	bgeu	r3,r4,29024 <__umoddi3+0xec>
   29020:	1c07883a 	add	r3,r3,r16
   29024:	1929c83a 	sub	r20,r3,r4
   29028:	a009883a 	mov	r4,r20
   2902c:	880b883a 	mov	r5,r17
   29030:	002a3c80 	call	2a3c8 <__umodsi3>
   29034:	102d883a 	mov	r22,r2
   29038:	a009883a 	mov	r4,r20
   2903c:	880b883a 	mov	r5,r17
   29040:	b02c943a 	slli	r22,r22,16
   29044:	002a3c00 	call	2a3c0 <__udivsi3>
   29048:	1009883a 	mov	r4,r2
   2904c:	900b883a 	mov	r5,r18
   29050:	9cffffcc 	andi	r19,r19,65535
   29054:	00210b00 	call	210b0 <__mulsi3>
   29058:	b4e6b03a 	or	r19,r22,r19
   2905c:	9880572e 	bgeu	r19,r2,291bc <__umoddi3+0x284>
   29060:	00005206 	br	291ac <__umoddi3+0x274>
   29064:	29c05936 	bltu	r5,r7,291cc <__umoddi3+0x294>
   29068:	00bfffd4 	movui	r2,65535
   2906c:	11c0652e 	bgeu	r2,r7,29204 <__umoddi3+0x2cc>
   29070:	00804034 	movhi	r2,256
   29074:	10bfffc4 	addi	r2,r2,-1
   29078:	11c11936 	bltu	r2,r7,294e0 <__umoddi3+0x5a8>
   2907c:	00c00404 	movi	r3,16
   29080:	1827883a 	mov	r19,r3
   29084:	38c6d83a 	srl	r3,r7,r3
   29088:	010001f4 	movhi	r4,7
   2908c:	21323f04 	addi	r4,r4,-14084
   29090:	04000804 	movi	r16,32
   29094:	20c7883a 	add	r3,r4,r3
   29098:	18800003 	ldbu	r2,0(r3)
   2909c:	14e7883a 	add	r19,r2,r19
   290a0:	84e1c83a 	sub	r16,r16,r19
   290a4:	8000671e 	bne	r16,zero,29244 <__umoddi3+0x30c>
   290a8:	3c400136 	bltu	r7,r17,290b0 <__umoddi3+0x178>
   290ac:	91812536 	bltu	r18,r6,29544 <__umoddi3+0x60c>
   290b0:	9185c83a 	sub	r2,r18,r6
   290b4:	89e3c83a 	sub	r17,r17,r7
   290b8:	90a5803a 	cmpltu	r18,r18,r2
   290bc:	8ca9c83a 	sub	r20,r17,r18
   290c0:	a007883a 	mov	r3,r20
   290c4:	00004306 	br	291d4 <__umoddi3+0x29c>
   290c8:	3000041e 	bne	r6,zero,290dc <__umoddi3+0x1a4>
   290cc:	01000044 	movi	r4,1
   290d0:	000b883a 	mov	r5,zero
   290d4:	002a3c00 	call	2a3c0 <__udivsi3>
   290d8:	1021883a 	mov	r16,r2
   290dc:	00bfffd4 	movui	r2,65535
   290e0:	1400532e 	bgeu	r2,r16,29230 <__umoddi3+0x2f8>
   290e4:	00804034 	movhi	r2,256
   290e8:	10bfffc4 	addi	r2,r2,-1
   290ec:	14010536 	bltu	r2,r16,29504 <__umoddi3+0x5cc>
   290f0:	00800404 	movi	r2,16
   290f4:	1007883a 	mov	r3,r2
   290f8:	8084d83a 	srl	r2,r16,r2
   290fc:	010001f4 	movhi	r4,7
   29100:	21323f04 	addi	r4,r4,-14084
   29104:	05400804 	movi	r21,32
   29108:	2085883a 	add	r2,r4,r2
   2910c:	10800003 	ldbu	r2,0(r2)
   29110:	10c7883a 	add	r3,r2,r3
   29114:	a8ebc83a 	sub	r21,r21,r3
   29118:	a800b81e 	bne	r21,zero,293fc <__umoddi3+0x4c4>
   2911c:	8028d43a 	srli	r20,r16,16
   29120:	8c23c83a 	sub	r17,r17,r16
   29124:	85bfffcc 	andi	r22,r16,65535
   29128:	8809883a 	mov	r4,r17
   2912c:	a00b883a 	mov	r5,r20
   29130:	002a3c80 	call	2a3c8 <__umodsi3>
   29134:	8809883a 	mov	r4,r17
   29138:	a00b883a 	mov	r5,r20
   2913c:	1025883a 	mov	r18,r2
   29140:	002a3c00 	call	2a3c0 <__udivsi3>
   29144:	1009883a 	mov	r4,r2
   29148:	b00b883a 	mov	r5,r22
   2914c:	00210b00 	call	210b0 <__mulsi3>
   29150:	1009883a 	mov	r4,r2
   29154:	9006943a 	slli	r3,r18,16
   29158:	9804d43a 	srli	r2,r19,16
   2915c:	1886b03a 	or	r3,r3,r2
   29160:	1900032e 	bgeu	r3,r4,29170 <__umoddi3+0x238>
   29164:	1c07883a 	add	r3,r3,r16
   29168:	1c000136 	bltu	r3,r16,29170 <__umoddi3+0x238>
   2916c:	1900f336 	bltu	r3,r4,2953c <__umoddi3+0x604>
   29170:	1923c83a 	sub	r17,r3,r4
   29174:	8809883a 	mov	r4,r17
   29178:	a00b883a 	mov	r5,r20
   2917c:	002a3c80 	call	2a3c8 <__umodsi3>
   29180:	102f883a 	mov	r23,r2
   29184:	8809883a 	mov	r4,r17
   29188:	a00b883a 	mov	r5,r20
   2918c:	b82e943a 	slli	r23,r23,16
   29190:	002a3c00 	call	2a3c0 <__udivsi3>
   29194:	1009883a 	mov	r4,r2
   29198:	b00b883a 	mov	r5,r22
   2919c:	9cffffcc 	andi	r19,r19,65535
   291a0:	00210b00 	call	210b0 <__mulsi3>
   291a4:	bce6b03a 	or	r19,r23,r19
   291a8:	9880042e 	bgeu	r19,r2,291bc <__umoddi3+0x284>
   291ac:	9c27883a 	add	r19,r19,r16
   291b0:	9c000236 	bltu	r19,r16,291bc <__umoddi3+0x284>
   291b4:	9880012e 	bgeu	r19,r2,291bc <__umoddi3+0x284>
   291b8:	9c27883a 	add	r19,r19,r16
   291bc:	9885c83a 	sub	r2,r19,r2
   291c0:	1544d83a 	srl	r2,r2,r21
   291c4:	0007883a 	mov	r3,zero
   291c8:	00000206 	br	291d4 <__umoddi3+0x29c>
   291cc:	2005883a 	mov	r2,r4
   291d0:	2807883a 	mov	r3,r5
   291d4:	dfc00c17 	ldw	ra,48(sp)
   291d8:	df000b17 	ldw	fp,44(sp)
   291dc:	ddc00a17 	ldw	r23,40(sp)
   291e0:	dd800917 	ldw	r22,36(sp)
   291e4:	dd400817 	ldw	r21,32(sp)
   291e8:	dd000717 	ldw	r20,28(sp)
   291ec:	dcc00617 	ldw	r19,24(sp)
   291f0:	dc800517 	ldw	r18,20(sp)
   291f4:	dc400417 	ldw	r17,16(sp)
   291f8:	dc000317 	ldw	r16,12(sp)
   291fc:	dec00d04 	addi	sp,sp,52
   29200:	f800283a 	ret
   29204:	00803fc4 	movi	r2,255
   29208:	11c0b236 	bltu	r2,r7,294d4 <__umoddi3+0x59c>
   2920c:	0007883a 	mov	r3,zero
   29210:	0027883a 	mov	r19,zero
   29214:	003f9b06 	br	29084 <__umoddi3+0x14c>
   29218:	00804034 	movhi	r2,256
   2921c:	10bfffc4 	addi	r2,r2,-1
   29220:	1180b236 	bltu	r2,r6,294ec <__umoddi3+0x5b4>
   29224:	00800404 	movi	r2,16
   29228:	1009883a 	mov	r4,r2
   2922c:	003f5a06 	br	28f98 <__umoddi3+0x60>
   29230:	00803fc4 	movi	r2,255
   29234:	1400b036 	bltu	r2,r16,294f8 <__umoddi3+0x5c0>
   29238:	0005883a 	mov	r2,zero
   2923c:	0007883a 	mov	r3,zero
   29240:	003fad06 	br	290f8 <__umoddi3+0x1c0>
   29244:	34c4d83a 	srl	r2,r6,r19
   29248:	3c0e983a 	sll	r7,r7,r16
   2924c:	8cf8d83a 	srl	fp,r17,r19
   29250:	8c22983a 	sll	r17,r17,r16
   29254:	38a8b03a 	or	r20,r7,r2
   29258:	a02ad43a 	srli	r21,r20,16
   2925c:	94c4d83a 	srl	r2,r18,r19
   29260:	e009883a 	mov	r4,fp
   29264:	a80b883a 	mov	r5,r21
   29268:	342c983a 	sll	r22,r6,r16
   2926c:	88a2b03a 	or	r17,r17,r2
   29270:	002a3c80 	call	2a3c8 <__umodsi3>
   29274:	e009883a 	mov	r4,fp
   29278:	a80b883a 	mov	r5,r21
   2927c:	a5ffffcc 	andi	r23,r20,65535
   29280:	d8800215 	stw	r2,8(sp)
   29284:	002a3c00 	call	2a3c0 <__udivsi3>
   29288:	1009883a 	mov	r4,r2
   2928c:	b80b883a 	mov	r5,r23
   29290:	1039883a 	mov	fp,r2
   29294:	00210b00 	call	210b0 <__mulsi3>
   29298:	d8c00217 	ldw	r3,8(sp)
   2929c:	1009883a 	mov	r4,r2
   292a0:	8804d43a 	srli	r2,r17,16
   292a4:	1806943a 	slli	r3,r3,16
   292a8:	9424983a 	sll	r18,r18,r16
   292ac:	1886b03a 	or	r3,r3,r2
   292b0:	1900042e 	bgeu	r3,r4,292c4 <__umoddi3+0x38c>
   292b4:	1d07883a 	add	r3,r3,r20
   292b8:	e0bfffc4 	addi	r2,fp,-1
   292bc:	1d009b2e 	bgeu	r3,r20,2952c <__umoddi3+0x5f4>
   292c0:	1039883a 	mov	fp,r2
   292c4:	1907c83a 	sub	r3,r3,r4
   292c8:	1809883a 	mov	r4,r3
   292cc:	a80b883a 	mov	r5,r21
   292d0:	d8c00215 	stw	r3,8(sp)
   292d4:	002a3c80 	call	2a3c8 <__umodsi3>
   292d8:	d8c00217 	ldw	r3,8(sp)
   292dc:	a80b883a 	mov	r5,r21
   292e0:	d8800015 	stw	r2,0(sp)
   292e4:	1809883a 	mov	r4,r3
   292e8:	002a3c00 	call	2a3c0 <__udivsi3>
   292ec:	1009883a 	mov	r4,r2
   292f0:	b80b883a 	mov	r5,r23
   292f4:	102b883a 	mov	r21,r2
   292f8:	00210b00 	call	210b0 <__mulsi3>
   292fc:	d9c00017 	ldw	r7,0(sp)
   29300:	8c7fffcc 	andi	r17,r17,65535
   29304:	380e943a 	slli	r7,r7,16
   29308:	3c4eb03a 	or	r7,r7,r17
   2930c:	3880042e 	bgeu	r7,r2,29320 <__umoddi3+0x3e8>
   29310:	3d0f883a 	add	r7,r7,r20
   29314:	a8ffffc4 	addi	r3,r21,-1
   29318:	3d00802e 	bgeu	r7,r20,2951c <__umoddi3+0x5e4>
   2931c:	182b883a 	mov	r21,r3
   29320:	e038943a 	slli	fp,fp,16
   29324:	b010d43a 	srli	r8,r22,16
   29328:	b1bfffcc 	andi	r6,r22,65535
   2932c:	af2ab03a 	or	r21,r21,fp
   29330:	a82ed43a 	srli	r23,r21,16
   29334:	ad7fffcc 	andi	r21,r21,65535
   29338:	300b883a 	mov	r5,r6
   2933c:	a809883a 	mov	r4,r21
   29340:	38a3c83a 	sub	r17,r7,r2
   29344:	d9800115 	stw	r6,4(sp)
   29348:	da000015 	stw	r8,0(sp)
   2934c:	00210b00 	call	210b0 <__mulsi3>
   29350:	da000017 	ldw	r8,0(sp)
   29354:	a809883a 	mov	r4,r21
   29358:	1039883a 	mov	fp,r2
   2935c:	400b883a 	mov	r5,r8
   29360:	da000215 	stw	r8,8(sp)
   29364:	00210b00 	call	210b0 <__mulsi3>
   29368:	d9800117 	ldw	r6,4(sp)
   2936c:	b809883a 	mov	r4,r23
   29370:	d8800015 	stw	r2,0(sp)
   29374:	300b883a 	mov	r5,r6
   29378:	00210b00 	call	210b0 <__mulsi3>
   2937c:	d8c00217 	ldw	r3,8(sp)
   29380:	b809883a 	mov	r4,r23
   29384:	102b883a 	mov	r21,r2
   29388:	180b883a 	mov	r5,r3
   2938c:	00210b00 	call	210b0 <__mulsi3>
   29390:	d9c00017 	ldw	r7,0(sp)
   29394:	1007883a 	mov	r3,r2
   29398:	e004d43a 	srli	r2,fp,16
   2939c:	a9c9883a 	add	r4,r21,r7
   293a0:	2089883a 	add	r4,r4,r2
   293a4:	2540022e 	bgeu	r4,r21,293b0 <__umoddi3+0x478>
   293a8:	00800074 	movhi	r2,1
   293ac:	1887883a 	add	r3,r3,r2
   293b0:	2004d43a 	srli	r2,r4,16
   293b4:	2008943a 	slli	r4,r4,16
   293b8:	e73fffcc 	andi	fp,fp,65535
   293bc:	1887883a 	add	r3,r3,r2
   293c0:	2709883a 	add	r4,r4,fp
   293c4:	88c03d36 	bltu	r17,r3,294bc <__umoddi3+0x584>
   293c8:	88c06126 	beq	r17,r3,29550 <__umoddi3+0x618>
   293cc:	88c7c83a 	sub	r3,r17,r3
   293d0:	202d883a 	mov	r22,r4
   293d4:	95adc83a 	sub	r22,r18,r22
   293d8:	95a5803a 	cmpltu	r18,r18,r22
   293dc:	1c87c83a 	sub	r3,r3,r18
   293e0:	1cc4983a 	sll	r2,r3,r19
   293e4:	b42cd83a 	srl	r22,r22,r16
   293e8:	1c06d83a 	srl	r3,r3,r16
   293ec:	1584b03a 	or	r2,r2,r22
   293f0:	003f7806 	br	291d4 <__umoddi3+0x29c>
   293f4:	002b883a 	mov	r21,zero
   293f8:	003ef506 	br	28fd0 <__umoddi3+0x98>
   293fc:	8560983a 	sll	r16,r16,r21
   29400:	88e6d83a 	srl	r19,r17,r3
   29404:	90c6d83a 	srl	r3,r18,r3
   29408:	8028d43a 	srli	r20,r16,16
   2940c:	8d62983a 	sll	r17,r17,r21
   29410:	9809883a 	mov	r4,r19
   29414:	a00b883a 	mov	r5,r20
   29418:	88eeb03a 	or	r23,r17,r3
   2941c:	002a3c80 	call	2a3c8 <__umodsi3>
   29420:	9809883a 	mov	r4,r19
   29424:	a00b883a 	mov	r5,r20
   29428:	1023883a 	mov	r17,r2
   2942c:	85bfffcc 	andi	r22,r16,65535
   29430:	002a3c00 	call	2a3c0 <__udivsi3>
   29434:	1009883a 	mov	r4,r2
   29438:	b00b883a 	mov	r5,r22
   2943c:	00210b00 	call	210b0 <__mulsi3>
   29440:	1007883a 	mov	r3,r2
   29444:	8808943a 	slli	r4,r17,16
   29448:	b804d43a 	srli	r2,r23,16
   2944c:	9566983a 	sll	r19,r18,r21
   29450:	2088b03a 	or	r4,r4,r2
   29454:	20c0042e 	bgeu	r4,r3,29468 <__umoddi3+0x530>
   29458:	2409883a 	add	r4,r4,r16
   2945c:	24000236 	bltu	r4,r16,29468 <__umoddi3+0x530>
   29460:	20c0012e 	bgeu	r4,r3,29468 <__umoddi3+0x530>
   29464:	2409883a 	add	r4,r4,r16
   29468:	20e5c83a 	sub	r18,r4,r3
   2946c:	9009883a 	mov	r4,r18
   29470:	a00b883a 	mov	r5,r20
   29474:	002a3c80 	call	2a3c8 <__umodsi3>
   29478:	1023883a 	mov	r17,r2
   2947c:	9009883a 	mov	r4,r18
   29480:	a00b883a 	mov	r5,r20
   29484:	8822943a 	slli	r17,r17,16
   29488:	002a3c00 	call	2a3c0 <__udivsi3>
   2948c:	1009883a 	mov	r4,r2
   29490:	b00b883a 	mov	r5,r22
   29494:	bdffffcc 	andi	r23,r23,65535
   29498:	00210b00 	call	210b0 <__mulsi3>
   2949c:	8de2b03a 	or	r17,r17,r23
   294a0:	8880042e 	bgeu	r17,r2,294b4 <__umoddi3+0x57c>
   294a4:	8c23883a 	add	r17,r17,r16
   294a8:	8c000236 	bltu	r17,r16,294b4 <__umoddi3+0x57c>
   294ac:	8880012e 	bgeu	r17,r2,294b4 <__umoddi3+0x57c>
   294b0:	8c23883a 	add	r17,r17,r16
   294b4:	88a3c83a 	sub	r17,r17,r2
   294b8:	003f1b06 	br	29128 <__umoddi3+0x1f0>
   294bc:	25adc83a 	sub	r22,r4,r22
   294c0:	1d07c83a 	sub	r3,r3,r20
   294c4:	2589803a 	cmpltu	r4,r4,r22
   294c8:	1907c83a 	sub	r3,r3,r4
   294cc:	88c7c83a 	sub	r3,r17,r3
   294d0:	003fc006 	br	293d4 <__umoddi3+0x49c>
   294d4:	00c00204 	movi	r3,8
   294d8:	1827883a 	mov	r19,r3
   294dc:	003ee906 	br	29084 <__umoddi3+0x14c>
   294e0:	00c00604 	movi	r3,24
   294e4:	1827883a 	mov	r19,r3
   294e8:	003ee606 	br	29084 <__umoddi3+0x14c>
   294ec:	00800604 	movi	r2,24
   294f0:	1009883a 	mov	r4,r2
   294f4:	003ea806 	br	28f98 <__umoddi3+0x60>
   294f8:	00800204 	movi	r2,8
   294fc:	1007883a 	mov	r3,r2
   29500:	003efd06 	br	290f8 <__umoddi3+0x1c0>
   29504:	00800604 	movi	r2,24
   29508:	1007883a 	mov	r3,r2
   2950c:	003efa06 	br	290f8 <__umoddi3+0x1c0>
   29510:	00800204 	movi	r2,8
   29514:	1009883a 	mov	r4,r2
   29518:	003e9f06 	br	28f98 <__umoddi3+0x60>
   2951c:	38bf7f2e 	bgeu	r7,r2,2931c <__umoddi3+0x3e4>
   29520:	ad7fff84 	addi	r21,r21,-2
   29524:	3d0f883a 	add	r7,r7,r20
   29528:	003f7d06 	br	29320 <__umoddi3+0x3e8>
   2952c:	193f642e 	bgeu	r3,r4,292c0 <__umoddi3+0x388>
   29530:	e73fff84 	addi	fp,fp,-2
   29534:	1d07883a 	add	r3,r3,r20
   29538:	003f6206 	br	292c4 <__umoddi3+0x38c>
   2953c:	1c07883a 	add	r3,r3,r16
   29540:	003f0b06 	br	29170 <__umoddi3+0x238>
   29544:	9005883a 	mov	r2,r18
   29548:	a007883a 	mov	r3,r20
   2954c:	003f2106 	br	291d4 <__umoddi3+0x29c>
   29550:	913fda36 	bltu	r18,r4,294bc <__umoddi3+0x584>
   29554:	202d883a 	mov	r22,r4
   29558:	0007883a 	mov	r3,zero
   2955c:	003f9d06 	br	293d4 <__umoddi3+0x49c>

00029560 <_fpadd_parts>:
   29560:	2005883a 	mov	r2,r4
   29564:	21000017 	ldw	r4,0(r4)
   29568:	01c00044 	movi	r7,1
   2956c:	3900622e 	bgeu	r7,r4,296f8 <_fpadd_parts+0x198>
   29570:	28c00017 	ldw	r3,0(r5)
   29574:	38c05f2e 	bgeu	r7,r3,296f4 <_fpadd_parts+0x194>
   29578:	01c00104 	movi	r7,4
   2957c:	21c0c626 	beq	r4,r7,29898 <_fpadd_parts+0x338>
   29580:	19c05c26 	beq	r3,r7,296f4 <_fpadd_parts+0x194>
   29584:	01c00084 	movi	r7,2
   29588:	19c06b26 	beq	r3,r7,29738 <_fpadd_parts+0x1d8>
   2958c:	21c05926 	beq	r4,r7,296f4 <_fpadd_parts+0x194>
   29590:	11c00217 	ldw	r7,8(r2)
   29594:	2ac00217 	ldw	r11,8(r5)
   29598:	13000317 	ldw	r12,12(r2)
   2959c:	13400417 	ldw	r13,16(r2)
   295a0:	3ac9c83a 	sub	r4,r7,r11
   295a4:	2a000317 	ldw	r8,12(r5)
   295a8:	2a400417 	ldw	r9,16(r5)
   295ac:	2015883a 	mov	r10,r4
   295b0:	20007516 	blt	r4,zero,29788 <_fpadd_parts+0x228>
   295b4:	00c00fc4 	movi	r3,63
   295b8:	1a805016 	blt	r3,r10,296fc <_fpadd_parts+0x19c>
   295bc:	0100870e 	bge	zero,r4,297dc <_fpadd_parts+0x27c>
   295c0:	50fff804 	addi	r3,r10,-32
   295c4:	18009916 	blt	r3,zero,2982c <_fpadd_parts+0x2cc>
   295c8:	48d6d83a 	srl	r11,r9,r3
   295cc:	001d883a 	mov	r14,zero
   295d0:	18009e16 	blt	r3,zero,2984c <_fpadd_parts+0x2ec>
   295d4:	01000044 	movi	r4,1
   295d8:	20c6983a 	sll	r3,r4,r3
   295dc:	0015883a 	mov	r10,zero
   295e0:	513fffc4 	addi	r4,r10,-1
   295e4:	2295403a 	cmpgeu	r10,r4,r10
   295e8:	1a87c83a 	sub	r3,r3,r10
   295ec:	1a52703a 	and	r9,r3,r9
   295f0:	2210703a 	and	r8,r4,r8
   295f4:	4250b03a 	or	r8,r8,r9
   295f8:	4010c03a 	cmpne	r8,r8,zero
   295fc:	42d0b03a 	or	r8,r8,r11
   29600:	7013883a 	mov	r9,r14
   29604:	11000117 	ldw	r4,4(r2)
   29608:	28800117 	ldw	r2,4(r5)
   2960c:	20804126 	beq	r4,r2,29714 <_fpadd_parts+0x1b4>
   29610:	20006326 	beq	r4,zero,297a0 <_fpadd_parts+0x240>
   29614:	4305c83a 	sub	r2,r8,r12
   29618:	4091803a 	cmpltu	r8,r8,r2
   2961c:	4b47c83a 	sub	r3,r9,r13
   29620:	1a07c83a 	sub	r3,r3,r8
   29624:	18006316 	blt	r3,zero,297b4 <_fpadd_parts+0x254>
   29628:	30000115 	stw	zero,4(r6)
   2962c:	31c00215 	stw	r7,8(r6)
   29630:	30800315 	stw	r2,12(r6)
   29634:	30c00415 	stw	r3,16(r6)
   29638:	11ffffc4 	addi	r7,r2,-1
   2963c:	388b403a 	cmpgeu	r5,r7,r2
   29640:	194bc83a 	sub	r5,r3,r5
   29644:	01040034 	movhi	r4,4096
   29648:	213fffc4 	addi	r4,r4,-1
   2964c:	21401736 	bltu	r4,r5,296ac <_fpadd_parts+0x14c>
   29650:	29008226 	beq	r5,r4,2985c <_fpadd_parts+0x2fc>
   29654:	31400217 	ldw	r5,8(r6)
   29658:	02840034 	movhi	r10,4096
   2965c:	52bfffc4 	addi	r10,r10,-1
   29660:	033fff84 	movi	r12,-2
   29664:	297fffc4 	addi	r5,r5,-1
   29668:	00000106 	br	29670 <_fpadd_parts+0x110>
   2966c:	3a804a26 	beq	r7,r10,29798 <_fpadd_parts+0x238>
   29670:	1089883a 	add	r4,r2,r2
   29674:	2091803a 	cmpltu	r8,r4,r2
   29678:	18c7883a 	add	r3,r3,r3
   2967c:	227fffc4 	addi	r9,r4,-1
   29680:	40d1883a 	add	r8,r8,r3
   29684:	490f403a 	cmpgeu	r7,r9,r4
   29688:	41cfc83a 	sub	r7,r8,r7
   2968c:	2817883a 	mov	r11,r5
   29690:	2005883a 	mov	r2,r4
   29694:	4007883a 	mov	r3,r8
   29698:	297fffc4 	addi	r5,r5,-1
   2969c:	51fff32e 	bgeu	r10,r7,2966c <_fpadd_parts+0x10c>
   296a0:	31000315 	stw	r4,12(r6)
   296a4:	32000415 	stw	r8,16(r6)
   296a8:	32c00215 	stw	r11,8(r6)
   296ac:	010000c4 	movi	r4,3
   296b0:	31000015 	stw	r4,0(r6)
   296b4:	01080034 	movhi	r4,8192
   296b8:	213fffc4 	addi	r4,r4,-1
   296bc:	20c00b2e 	bgeu	r4,r3,296ec <_fpadd_parts+0x18c>
   296c0:	180e97fa 	slli	r7,r3,31
   296c4:	1008d07a 	srli	r4,r2,1
   296c8:	31400217 	ldw	r5,8(r6)
   296cc:	1806d07a 	srli	r3,r3,1
   296d0:	1080004c 	andi	r2,r2,1
   296d4:	3908b03a 	or	r4,r7,r4
   296d8:	1108b03a 	or	r4,r2,r4
   296dc:	29400044 	addi	r5,r5,1
   296e0:	31000315 	stw	r4,12(r6)
   296e4:	30c00415 	stw	r3,16(r6)
   296e8:	31400215 	stw	r5,8(r6)
   296ec:	3005883a 	mov	r2,r6
   296f0:	f800283a 	ret
   296f4:	2805883a 	mov	r2,r5
   296f8:	f800283a 	ret
   296fc:	59c01e0e 	bge	r11,r7,29778 <_fpadd_parts+0x218>
   29700:	11000117 	ldw	r4,4(r2)
   29704:	28800117 	ldw	r2,4(r5)
   29708:	0011883a 	mov	r8,zero
   2970c:	0013883a 	mov	r9,zero
   29710:	20bfbf1e 	bne	r4,r2,29610 <_fpadd_parts+0xb0>
   29714:	4305883a 	add	r2,r8,r12
   29718:	1207803a 	cmpltu	r3,r2,r8
   2971c:	4b53883a 	add	r9,r9,r13
   29720:	1a47883a 	add	r3,r3,r9
   29724:	31000115 	stw	r4,4(r6)
   29728:	31c00215 	stw	r7,8(r6)
   2972c:	30800315 	stw	r2,12(r6)
   29730:	30c00415 	stw	r3,16(r6)
   29734:	003fdd06 	br	296ac <_fpadd_parts+0x14c>
   29738:	20ffef1e 	bne	r4,r3,296f8 <_fpadd_parts+0x198>
   2973c:	31000015 	stw	r4,0(r6)
   29740:	10c00117 	ldw	r3,4(r2)
   29744:	30c00115 	stw	r3,4(r6)
   29748:	10c00217 	ldw	r3,8(r2)
   2974c:	11000117 	ldw	r4,4(r2)
   29750:	29400117 	ldw	r5,4(r5)
   29754:	30c00215 	stw	r3,8(r6)
   29758:	10c00317 	ldw	r3,12(r2)
   2975c:	2908703a 	and	r4,r5,r4
   29760:	30c00315 	stw	r3,12(r6)
   29764:	10c00417 	ldw	r3,16(r2)
   29768:	31000115 	stw	r4,4(r6)
   2976c:	3005883a 	mov	r2,r6
   29770:	30c00415 	stw	r3,16(r6)
   29774:	f800283a 	ret
   29778:	580f883a 	mov	r7,r11
   2977c:	0019883a 	mov	r12,zero
   29780:	001b883a 	mov	r13,zero
   29784:	003f9f06 	br	29604 <_fpadd_parts+0xa4>
   29788:	0115c83a 	sub	r10,zero,r4
   2978c:	00c00fc4 	movi	r3,63
   29790:	1abfda16 	blt	r3,r10,296fc <_fpadd_parts+0x19c>
   29794:	003f8906 	br	295bc <_fpadd_parts+0x5c>
   29798:	627fb52e 	bgeu	r12,r9,29670 <_fpadd_parts+0x110>
   2979c:	003fc006 	br	296a0 <_fpadd_parts+0x140>
   297a0:	6205c83a 	sub	r2,r12,r8
   297a4:	6099803a 	cmpltu	r12,r12,r2
   297a8:	6a47c83a 	sub	r3,r13,r9
   297ac:	1b07c83a 	sub	r3,r3,r12
   297b0:	183f9d0e 	bge	r3,zero,29628 <_fpadd_parts+0xc8>
   297b4:	0085c83a 	sub	r2,zero,r2
   297b8:	1008c03a 	cmpne	r4,r2,zero
   297bc:	00c7c83a 	sub	r3,zero,r3
   297c0:	1907c83a 	sub	r3,r3,r4
   297c4:	01000044 	movi	r4,1
   297c8:	31000115 	stw	r4,4(r6)
   297cc:	31c00215 	stw	r7,8(r6)
   297d0:	30800315 	stw	r2,12(r6)
   297d4:	30c00415 	stw	r3,16(r6)
   297d8:	003f9706 	br	29638 <_fpadd_parts+0xd8>
   297dc:	203f8926 	beq	r4,zero,29604 <_fpadd_parts+0xa4>
   297e0:	50fff804 	addi	r3,r10,-32
   297e4:	3a8f883a 	add	r7,r7,r10
   297e8:	18002316 	blt	r3,zero,29878 <_fpadd_parts+0x318>
   297ec:	68d6d83a 	srl	r11,r13,r3
   297f0:	001d883a 	mov	r14,zero
   297f4:	18001c16 	blt	r3,zero,29868 <_fpadd_parts+0x308>
   297f8:	01000044 	movi	r4,1
   297fc:	20c6983a 	sll	r3,r4,r3
   29800:	0015883a 	mov	r10,zero
   29804:	513fffc4 	addi	r4,r10,-1
   29808:	2295403a 	cmpgeu	r10,r4,r10
   2980c:	1a87c83a 	sub	r3,r3,r10
   29810:	1b5a703a 	and	r13,r3,r13
   29814:	2318703a 	and	r12,r4,r12
   29818:	6358b03a 	or	r12,r12,r13
   2981c:	6018c03a 	cmpne	r12,r12,zero
   29820:	62d8b03a 	or	r12,r12,r11
   29824:	701b883a 	mov	r13,r14
   29828:	003f7606 	br	29604 <_fpadd_parts+0xa4>
   2982c:	4808907a 	slli	r4,r9,1
   29830:	02c007c4 	movi	r11,31
   29834:	5a97c83a 	sub	r11,r11,r10
   29838:	22c8983a 	sll	r4,r4,r11
   2983c:	4296d83a 	srl	r11,r8,r10
   29840:	4a9cd83a 	srl	r14,r9,r10
   29844:	22d6b03a 	or	r11,r4,r11
   29848:	003f6106 	br	295d0 <_fpadd_parts+0x70>
   2984c:	00c00044 	movi	r3,1
   29850:	1a94983a 	sll	r10,r3,r10
   29854:	0007883a 	mov	r3,zero
   29858:	003f6106 	br	295e0 <_fpadd_parts+0x80>
   2985c:	013fff84 	movi	r4,-2
   29860:	21ff7c2e 	bgeu	r4,r7,29654 <_fpadd_parts+0xf4>
   29864:	003f9106 	br	296ac <_fpadd_parts+0x14c>
   29868:	00c00044 	movi	r3,1
   2986c:	1a94983a 	sll	r10,r3,r10
   29870:	0007883a 	mov	r3,zero
   29874:	003fe306 	br	29804 <_fpadd_parts+0x2a4>
   29878:	6816907a 	slli	r11,r13,1
   2987c:	010007c4 	movi	r4,31
   29880:	2289c83a 	sub	r4,r4,r10
   29884:	5908983a 	sll	r4,r11,r4
   29888:	6296d83a 	srl	r11,r12,r10
   2988c:	6a9cd83a 	srl	r14,r13,r10
   29890:	22d6b03a 	or	r11,r4,r11
   29894:	003fd706 	br	297f4 <_fpadd_parts+0x294>
   29898:	193f971e 	bne	r3,r4,296f8 <_fpadd_parts+0x198>
   2989c:	11000117 	ldw	r4,4(r2)
   298a0:	28c00117 	ldw	r3,4(r5)
   298a4:	20ff9426 	beq	r4,r3,296f8 <_fpadd_parts+0x198>
   298a8:	008001f4 	movhi	r2,7
   298ac:	10b2f704 	addi	r2,r2,-13348
   298b0:	f800283a 	ret

000298b4 <__adddf3>:
   298b4:	deffec04 	addi	sp,sp,-80
   298b8:	d9001115 	stw	r4,68(sp)
   298bc:	d9401215 	stw	r5,72(sp)
   298c0:	d9001104 	addi	r4,sp,68
   298c4:	d9400a04 	addi	r5,sp,40
   298c8:	dfc01315 	stw	ra,76(sp)
   298cc:	d9c01015 	stw	r7,64(sp)
   298d0:	d9800f15 	stw	r6,60(sp)
   298d4:	002a3d00 	call	2a3d0 <__unpack_d>
   298d8:	d9000f04 	addi	r4,sp,60
   298dc:	d9400504 	addi	r5,sp,20
   298e0:	002a3d00 	call	2a3d0 <__unpack_d>
   298e4:	d9000a04 	addi	r4,sp,40
   298e8:	d9400504 	addi	r5,sp,20
   298ec:	d80d883a 	mov	r6,sp
   298f0:	00295600 	call	29560 <_fpadd_parts>
   298f4:	1009883a 	mov	r4,r2
   298f8:	0020e8c0 	call	20e8c <__pack_d>
   298fc:	dfc01317 	ldw	ra,76(sp)
   29900:	dec01404 	addi	sp,sp,80
   29904:	f800283a 	ret

00029908 <__subdf3>:
   29908:	deffec04 	addi	sp,sp,-80
   2990c:	d9001115 	stw	r4,68(sp)
   29910:	d9401215 	stw	r5,72(sp)
   29914:	d9001104 	addi	r4,sp,68
   29918:	d9400a04 	addi	r5,sp,40
   2991c:	dfc01315 	stw	ra,76(sp)
   29920:	d9c01015 	stw	r7,64(sp)
   29924:	d9800f15 	stw	r6,60(sp)
   29928:	002a3d00 	call	2a3d0 <__unpack_d>
   2992c:	d9000f04 	addi	r4,sp,60
   29930:	d9400504 	addi	r5,sp,20
   29934:	002a3d00 	call	2a3d0 <__unpack_d>
   29938:	d8800617 	ldw	r2,24(sp)
   2993c:	d9000a04 	addi	r4,sp,40
   29940:	d9400504 	addi	r5,sp,20
   29944:	d80d883a 	mov	r6,sp
   29948:	1080005c 	xori	r2,r2,1
   2994c:	d8800615 	stw	r2,24(sp)
   29950:	00295600 	call	29560 <_fpadd_parts>
   29954:	1009883a 	mov	r4,r2
   29958:	0020e8c0 	call	20e8c <__pack_d>
   2995c:	dfc01317 	ldw	ra,76(sp)
   29960:	dec01404 	addi	sp,sp,80
   29964:	f800283a 	ret

00029968 <__muldf3>:
   29968:	deffe404 	addi	sp,sp,-112
   2996c:	d9001115 	stw	r4,68(sp)
   29970:	d9401215 	stw	r5,72(sp)
   29974:	d9001104 	addi	r4,sp,68
   29978:	d9400a04 	addi	r5,sp,40
   2997c:	dfc01b15 	stw	ra,108(sp)
   29980:	d9800f15 	stw	r6,60(sp)
   29984:	d9c01015 	stw	r7,64(sp)
   29988:	ddc01a15 	stw	r23,104(sp)
   2998c:	dd801915 	stw	r22,100(sp)
   29990:	dd401815 	stw	r21,96(sp)
   29994:	dd001715 	stw	r20,92(sp)
   29998:	dcc01615 	stw	r19,88(sp)
   2999c:	dc801515 	stw	r18,84(sp)
   299a0:	dc401415 	stw	r17,80(sp)
   299a4:	dc001315 	stw	r16,76(sp)
   299a8:	002a3d00 	call	2a3d0 <__unpack_d>
   299ac:	d9000f04 	addi	r4,sp,60
   299b0:	d9400504 	addi	r5,sp,20
   299b4:	002a3d00 	call	2a3d0 <__unpack_d>
   299b8:	d8c00a17 	ldw	r3,40(sp)
   299bc:	00800044 	movi	r2,1
   299c0:	10c01136 	bltu	r2,r3,29a08 <__muldf3+0xa0>
   299c4:	d8c00b17 	ldw	r3,44(sp)
   299c8:	d8800617 	ldw	r2,24(sp)
   299cc:	d9000a04 	addi	r4,sp,40
   299d0:	1884c03a 	cmpne	r2,r3,r2
   299d4:	d8800b15 	stw	r2,44(sp)
   299d8:	0020e8c0 	call	20e8c <__pack_d>
   299dc:	dfc01b17 	ldw	ra,108(sp)
   299e0:	ddc01a17 	ldw	r23,104(sp)
   299e4:	dd801917 	ldw	r22,100(sp)
   299e8:	dd401817 	ldw	r21,96(sp)
   299ec:	dd001717 	ldw	r20,92(sp)
   299f0:	dcc01617 	ldw	r19,88(sp)
   299f4:	dc801517 	ldw	r18,84(sp)
   299f8:	dc401417 	ldw	r17,80(sp)
   299fc:	dc001317 	ldw	r16,76(sp)
   29a00:	dec01c04 	addi	sp,sp,112
   29a04:	f800283a 	ret
   29a08:	d9000517 	ldw	r4,20(sp)
   29a0c:	11000636 	bltu	r2,r4,29a28 <__muldf3+0xc0>
   29a10:	d8800617 	ldw	r2,24(sp)
   29a14:	d8c00b17 	ldw	r3,44(sp)
   29a18:	d9000504 	addi	r4,sp,20
   29a1c:	1884c03a 	cmpne	r2,r3,r2
   29a20:	d8800615 	stw	r2,24(sp)
   29a24:	003fec06 	br	299d8 <__muldf3+0x70>
   29a28:	00800104 	movi	r2,4
   29a2c:	1880051e 	bne	r3,r2,29a44 <__muldf3+0xdc>
   29a30:	00800084 	movi	r2,2
   29a34:	20bfe31e 	bne	r4,r2,299c4 <__muldf3+0x5c>
   29a38:	010001f4 	movhi	r4,7
   29a3c:	2132f704 	addi	r4,r4,-13348
   29a40:	003fe506 	br	299d8 <__muldf3+0x70>
   29a44:	2080031e 	bne	r4,r2,29a54 <__muldf3+0xec>
   29a48:	00800084 	movi	r2,2
   29a4c:	18bffa26 	beq	r3,r2,29a38 <__muldf3+0xd0>
   29a50:	003fef06 	br	29a10 <__muldf3+0xa8>
   29a54:	00800084 	movi	r2,2
   29a58:	18bfda26 	beq	r3,r2,299c4 <__muldf3+0x5c>
   29a5c:	20bfec26 	beq	r4,r2,29a10 <__muldf3+0xa8>
   29a60:	dc000d17 	ldw	r16,52(sp)
   29a64:	dd000817 	ldw	r20,32(sp)
   29a68:	dc800917 	ldw	r18,36(sp)
   29a6c:	8009883a 	mov	r4,r16
   29a70:	000b883a 	mov	r5,zero
   29a74:	a00d883a 	mov	r6,r20
   29a78:	000f883a 	mov	r7,zero
   29a7c:	0020adc0 	call	20adc <__muldi3>
   29a80:	dc400e17 	ldw	r17,56(sp)
   29a84:	9009883a 	mov	r4,r18
   29a88:	800d883a 	mov	r6,r16
   29a8c:	000b883a 	mov	r5,zero
   29a90:	000f883a 	mov	r7,zero
   29a94:	102f883a 	mov	r23,r2
   29a98:	1827883a 	mov	r19,r3
   29a9c:	0020adc0 	call	20adc <__muldi3>
   29aa0:	900d883a 	mov	r6,r18
   29aa4:	8809883a 	mov	r4,r17
   29aa8:	000b883a 	mov	r5,zero
   29aac:	000f883a 	mov	r7,zero
   29ab0:	102b883a 	mov	r21,r2
   29ab4:	1821883a 	mov	r16,r3
   29ab8:	0020adc0 	call	20adc <__muldi3>
   29abc:	8809883a 	mov	r4,r17
   29ac0:	000b883a 	mov	r5,zero
   29ac4:	a00d883a 	mov	r6,r20
   29ac8:	000f883a 	mov	r7,zero
   29acc:	102d883a 	mov	r22,r2
   29ad0:	1825883a 	mov	r18,r3
   29ad4:	0020adc0 	call	20adc <__muldi3>
   29ad8:	154b883a 	add	r5,r2,r21
   29adc:	2889803a 	cmpltu	r4,r5,r2
   29ae0:	1c07883a 	add	r3,r3,r16
   29ae4:	20c9883a 	add	r4,r4,r3
   29ae8:	24004b36 	bltu	r4,r16,29c18 <__muldf3+0x2b0>
   29aec:	8100011e 	bne	r16,r4,29af4 <__muldf3+0x18c>
   29af0:	2d404936 	bltu	r5,r21,29c18 <__muldf3+0x2b0>
   29af4:	0011883a 	mov	r8,zero
   29af8:	0007883a 	mov	r3,zero
   29afc:	2ccb883a 	add	r5,r5,r19
   29b00:	b80d883a 	mov	r6,r23
   29b04:	2cc0012e 	bgeu	r5,r19,29b0c <__muldf3+0x1a4>
   29b08:	02000044 	movi	r8,1
   29b0c:	258f883a 	add	r7,r4,r22
   29b10:	3909803a 	cmpltu	r4,r7,r4
   29b14:	da400c17 	ldw	r9,48(sp)
   29b18:	2489883a 	add	r4,r4,r18
   29b1c:	d8800717 	ldw	r2,28(sp)
   29b20:	20c9883a 	add	r4,r4,r3
   29b24:	da800b17 	ldw	r10,44(sp)
   29b28:	d8c00617 	ldw	r3,24(sp)
   29b2c:	3a11883a 	add	r8,r7,r8
   29b30:	4885883a 	add	r2,r9,r2
   29b34:	50c6c03a 	cmpne	r3,r10,r3
   29b38:	41cf803a 	cmpltu	r7,r8,r7
   29b3c:	12400104 	addi	r9,r2,4
   29b40:	d8c00115 	stw	r3,4(sp)
   29b44:	3909883a 	add	r4,r7,r4
   29b48:	da400215 	stw	r9,8(sp)
   29b4c:	03480034 	movhi	r13,8192
   29b50:	6b7fffc4 	addi	r13,r13,-1
   29b54:	4007883a 	mov	r3,r8
   29b58:	6900102e 	bgeu	r13,r4,29b9c <__muldf3+0x234>
   29b5c:	10800144 	addi	r2,r2,5
   29b60:	180ed07a 	srli	r7,r3,1
   29b64:	18c0004c 	andi	r3,r3,1
   29b68:	201097fa 	slli	r8,r4,31
   29b6c:	281697fa 	slli	r11,r5,31
   29b70:	2008d07a 	srli	r4,r4,1
   29b74:	3014d07a 	srli	r10,r6,1
   29b78:	2812d07a 	srli	r9,r5,1
   29b7c:	1019883a 	mov	r12,r2
   29b80:	18000226 	beq	r3,zero,29b8c <__muldf3+0x224>
   29b84:	5a8cb03a 	or	r6,r11,r10
   29b88:	49600034 	orhi	r5,r9,32768
   29b8c:	41c6b03a 	or	r3,r8,r7
   29b90:	10800044 	addi	r2,r2,1
   29b94:	693ff236 	bltu	r13,r4,29b60 <__muldf3+0x1f8>
   29b98:	db000215 	stw	r12,8(sp)
   29b9c:	03440034 	movhi	r13,4096
   29ba0:	6b7fffc4 	addi	r13,r13,-1
   29ba4:	69001336 	bltu	r13,r4,29bf4 <__muldf3+0x28c>
   29ba8:	d8800217 	ldw	r2,8(sp)
   29bac:	10bfffc4 	addi	r2,r2,-1
   29bb0:	18d3883a 	add	r9,r3,r3
   29bb4:	48c7803a 	cmpltu	r3,r9,r3
   29bb8:	2109883a 	add	r4,r4,r4
   29bbc:	190f883a 	add	r7,r3,r4
   29bc0:	3191883a 	add	r8,r6,r6
   29bc4:	4197803a 	cmpltu	r11,r8,r6
   29bc8:	2955883a 	add	r10,r5,r5
   29bcc:	1019883a 	mov	r12,r2
   29bd0:	4807883a 	mov	r3,r9
   29bd4:	3809883a 	mov	r4,r7
   29bd8:	2800010e 	bge	r5,zero,29be0 <__muldf3+0x278>
   29bdc:	48c00054 	ori	r3,r9,1
   29be0:	400d883a 	mov	r6,r8
   29be4:	5a8b883a 	add	r5,r11,r10
   29be8:	10bfffc4 	addi	r2,r2,-1
   29bec:	69fff02e 	bgeu	r13,r7,29bb0 <__muldf3+0x248>
   29bf0:	db000215 	stw	r12,8(sp)
   29bf4:	18803fcc 	andi	r2,r3,255
   29bf8:	01c02004 	movi	r7,128
   29bfc:	11c00926 	beq	r2,r7,29c24 <__muldf3+0x2bc>
   29c00:	008000c4 	movi	r2,3
   29c04:	d9000415 	stw	r4,16(sp)
   29c08:	d8c00315 	stw	r3,12(sp)
   29c0c:	d8800015 	stw	r2,0(sp)
   29c10:	d809883a 	mov	r4,sp
   29c14:	003f7006 	br	299d8 <__muldf3+0x70>
   29c18:	0011883a 	mov	r8,zero
   29c1c:	00c00044 	movi	r3,1
   29c20:	003fb606 	br	29afc <__muldf3+0x194>
   29c24:	19c0400c 	andi	r7,r3,256
   29c28:	383ff51e 	bne	r7,zero,29c00 <__muldf3+0x298>
   29c2c:	314ab03a 	or	r5,r6,r5
   29c30:	283ff326 	beq	r5,zero,29c00 <__muldf3+0x298>
   29c34:	1885883a 	add	r2,r3,r2
   29c38:	10cb803a 	cmpltu	r5,r2,r3
   29c3c:	00ffc004 	movi	r3,-256
   29c40:	10c6703a 	and	r3,r2,r3
   29c44:	2909883a 	add	r4,r5,r4
   29c48:	003fed06 	br	29c00 <__muldf3+0x298>

00029c4c <__divdf3>:
   29c4c:	defff104 	addi	sp,sp,-60
   29c50:	d9000c15 	stw	r4,48(sp)
   29c54:	d9400d15 	stw	r5,52(sp)
   29c58:	d9000c04 	addi	r4,sp,48
   29c5c:	d9400504 	addi	r5,sp,20
   29c60:	dfc00e15 	stw	ra,56(sp)
   29c64:	d9800a15 	stw	r6,40(sp)
   29c68:	d9c00b15 	stw	r7,44(sp)
   29c6c:	002a3d00 	call	2a3d0 <__unpack_d>
   29c70:	d9000a04 	addi	r4,sp,40
   29c74:	d80b883a 	mov	r5,sp
   29c78:	002a3d00 	call	2a3d0 <__unpack_d>
   29c7c:	d8c00517 	ldw	r3,20(sp)
   29c80:	00800044 	movi	r2,1
   29c84:	10c00536 	bltu	r2,r3,29c9c <__divdf3+0x50>
   29c88:	d9000504 	addi	r4,sp,20
   29c8c:	0020e8c0 	call	20e8c <__pack_d>
   29c90:	dfc00e17 	ldw	ra,56(sp)
   29c94:	dec00f04 	addi	sp,sp,60
   29c98:	f800283a 	ret
   29c9c:	d9000017 	ldw	r4,0(sp)
   29ca0:	11000536 	bltu	r2,r4,29cb8 <__divdf3+0x6c>
   29ca4:	d809883a 	mov	r4,sp
   29ca8:	0020e8c0 	call	20e8c <__pack_d>
   29cac:	dfc00e17 	ldw	ra,56(sp)
   29cb0:	dec00f04 	addi	sp,sp,60
   29cb4:	f800283a 	ret
   29cb8:	d9800617 	ldw	r6,24(sp)
   29cbc:	d9400117 	ldw	r5,4(sp)
   29cc0:	00800104 	movi	r2,4
   29cc4:	314af03a 	xor	r5,r6,r5
   29cc8:	d9400615 	stw	r5,24(sp)
   29ccc:	18800226 	beq	r3,r2,29cd8 <__divdf3+0x8c>
   29cd0:	01400084 	movi	r5,2
   29cd4:	1940041e 	bne	r3,r5,29ce8 <__divdf3+0x9c>
   29cd8:	193feb1e 	bne	r3,r4,29c88 <__divdf3+0x3c>
   29cdc:	010001f4 	movhi	r4,7
   29ce0:	2132f704 	addi	r4,r4,-13348
   29ce4:	003fe906 	br	29c8c <__divdf3+0x40>
   29ce8:	20803326 	beq	r4,r2,29db8 <__divdf3+0x16c>
   29cec:	21403726 	beq	r4,r5,29dcc <__divdf3+0x180>
   29cf0:	d8800217 	ldw	r2,8(sp)
   29cf4:	d9000717 	ldw	r4,28(sp)
   29cf8:	d8c00917 	ldw	r3,36(sp)
   29cfc:	da000417 	ldw	r8,16(sp)
   29d00:	2089c83a 	sub	r4,r4,r2
   29d04:	d9000715 	stw	r4,28(sp)
   29d08:	d8800817 	ldw	r2,32(sp)
   29d0c:	dbc00317 	ldw	r15,12(sp)
   29d10:	1a000236 	bltu	r3,r8,29d1c <__divdf3+0xd0>
   29d14:	40c0081e 	bne	r8,r3,29d38 <__divdf3+0xec>
   29d18:	13c0072e 	bgeu	r2,r15,29d38 <__divdf3+0xec>
   29d1c:	108b883a 	add	r5,r2,r2
   29d20:	288d803a 	cmpltu	r6,r5,r2
   29d24:	18c7883a 	add	r3,r3,r3
   29d28:	213fffc4 	addi	r4,r4,-1
   29d2c:	2805883a 	mov	r2,r5
   29d30:	30c7883a 	add	r3,r6,r3
   29d34:	d9000715 	stw	r4,28(sp)
   29d38:	01400f44 	movi	r5,61
   29d3c:	000f883a 	mov	r7,zero
   29d40:	01040034 	movhi	r4,4096
   29d44:	0019883a 	mov	r12,zero
   29d48:	001b883a 	mov	r13,zero
   29d4c:	201697fa 	slli	r11,r4,31
   29d50:	3814d07a 	srli	r10,r7,1
   29d54:	297fffc4 	addi	r5,r5,-1
   29d58:	1a000936 	bltu	r3,r8,29d80 <__divdf3+0x134>
   29d5c:	13cdc83a 	sub	r6,r2,r15
   29d60:	1193803a 	cmpltu	r9,r2,r6
   29d64:	1a1dc83a 	sub	r14,r3,r8
   29d68:	40c0011e 	bne	r8,r3,29d70 <__divdf3+0x124>
   29d6c:	13c00436 	bltu	r2,r15,29d80 <__divdf3+0x134>
   29d70:	3005883a 	mov	r2,r6
   29d74:	7247c83a 	sub	r3,r14,r9
   29d78:	61d8b03a 	or	r12,r12,r7
   29d7c:	691ab03a 	or	r13,r13,r4
   29d80:	108d883a 	add	r6,r2,r2
   29d84:	3093803a 	cmpltu	r9,r6,r2
   29d88:	18c7883a 	add	r3,r3,r3
   29d8c:	5a8eb03a 	or	r7,r11,r10
   29d90:	2008d07a 	srli	r4,r4,1
   29d94:	3005883a 	mov	r2,r6
   29d98:	48c7883a 	add	r3,r9,r3
   29d9c:	283feb1e 	bne	r5,zero,29d4c <__divdf3+0x100>
   29da0:	61003fcc 	andi	r4,r12,255
   29da4:	01402004 	movi	r5,128
   29da8:	21400b26 	beq	r4,r5,29dd8 <__divdf3+0x18c>
   29dac:	db000815 	stw	r12,32(sp)
   29db0:	db400915 	stw	r13,36(sp)
   29db4:	003fb406 	br	29c88 <__divdf3+0x3c>
   29db8:	d8000815 	stw	zero,32(sp)
   29dbc:	d8000915 	stw	zero,36(sp)
   29dc0:	d8000715 	stw	zero,28(sp)
   29dc4:	d9000504 	addi	r4,sp,20
   29dc8:	003fb006 	br	29c8c <__divdf3+0x40>
   29dcc:	d8800515 	stw	r2,20(sp)
   29dd0:	d9000504 	addi	r4,sp,20
   29dd4:	003fad06 	br	29c8c <__divdf3+0x40>
   29dd8:	6140400c 	andi	r5,r12,256
   29ddc:	283ff31e 	bne	r5,zero,29dac <__divdf3+0x160>
   29de0:	30c4b03a 	or	r2,r6,r3
   29de4:	103ff126 	beq	r2,zero,29dac <__divdf3+0x160>
   29de8:	6109883a 	add	r4,r12,r4
   29dec:	2305803a 	cmpltu	r2,r4,r12
   29df0:	033fc004 	movi	r12,-256
   29df4:	2318703a 	and	r12,r4,r12
   29df8:	135b883a 	add	r13,r2,r13
   29dfc:	003feb06 	br	29dac <__divdf3+0x160>

00029e00 <__eqdf2>:
   29e00:	defff104 	addi	sp,sp,-60
   29e04:	d9000c15 	stw	r4,48(sp)
   29e08:	d9400d15 	stw	r5,52(sp)
   29e0c:	d9000c04 	addi	r4,sp,48
   29e10:	d9400504 	addi	r5,sp,20
   29e14:	dfc00e15 	stw	ra,56(sp)
   29e18:	d9800a15 	stw	r6,40(sp)
   29e1c:	d9c00b15 	stw	r7,44(sp)
   29e20:	002a3d00 	call	2a3d0 <__unpack_d>
   29e24:	d9000a04 	addi	r4,sp,40
   29e28:	d80b883a 	mov	r5,sp
   29e2c:	002a3d00 	call	2a3d0 <__unpack_d>
   29e30:	d8c00517 	ldw	r3,20(sp)
   29e34:	00800044 	movi	r2,1
   29e38:	10c0052e 	bgeu	r2,r3,29e50 <__eqdf2+0x50>
   29e3c:	d8c00017 	ldw	r3,0(sp)
   29e40:	10c0032e 	bgeu	r2,r3,29e50 <__eqdf2+0x50>
   29e44:	d9000504 	addi	r4,sp,20
   29e48:	d80b883a 	mov	r5,sp
   29e4c:	002a4d40 	call	2a4d4 <__fpcmp_parts_d>
   29e50:	dfc00e17 	ldw	ra,56(sp)
   29e54:	dec00f04 	addi	sp,sp,60
   29e58:	f800283a 	ret

00029e5c <__nedf2>:
   29e5c:	defff104 	addi	sp,sp,-60
   29e60:	d9000c15 	stw	r4,48(sp)
   29e64:	d9400d15 	stw	r5,52(sp)
   29e68:	d9000c04 	addi	r4,sp,48
   29e6c:	d9400504 	addi	r5,sp,20
   29e70:	dfc00e15 	stw	ra,56(sp)
   29e74:	d9800a15 	stw	r6,40(sp)
   29e78:	d9c00b15 	stw	r7,44(sp)
   29e7c:	002a3d00 	call	2a3d0 <__unpack_d>
   29e80:	d9000a04 	addi	r4,sp,40
   29e84:	d80b883a 	mov	r5,sp
   29e88:	002a3d00 	call	2a3d0 <__unpack_d>
   29e8c:	d8c00517 	ldw	r3,20(sp)
   29e90:	00800044 	movi	r2,1
   29e94:	10c0052e 	bgeu	r2,r3,29eac <__nedf2+0x50>
   29e98:	d8c00017 	ldw	r3,0(sp)
   29e9c:	10c0032e 	bgeu	r2,r3,29eac <__nedf2+0x50>
   29ea0:	d9000504 	addi	r4,sp,20
   29ea4:	d80b883a 	mov	r5,sp
   29ea8:	002a4d40 	call	2a4d4 <__fpcmp_parts_d>
   29eac:	dfc00e17 	ldw	ra,56(sp)
   29eb0:	dec00f04 	addi	sp,sp,60
   29eb4:	f800283a 	ret

00029eb8 <__gtdf2>:
   29eb8:	defff104 	addi	sp,sp,-60
   29ebc:	d9000c15 	stw	r4,48(sp)
   29ec0:	d9400d15 	stw	r5,52(sp)
   29ec4:	d9000c04 	addi	r4,sp,48
   29ec8:	d9400504 	addi	r5,sp,20
   29ecc:	dfc00e15 	stw	ra,56(sp)
   29ed0:	d9800a15 	stw	r6,40(sp)
   29ed4:	d9c00b15 	stw	r7,44(sp)
   29ed8:	002a3d00 	call	2a3d0 <__unpack_d>
   29edc:	d9000a04 	addi	r4,sp,40
   29ee0:	d80b883a 	mov	r5,sp
   29ee4:	002a3d00 	call	2a3d0 <__unpack_d>
   29ee8:	d8c00517 	ldw	r3,20(sp)
   29eec:	00800044 	movi	r2,1
   29ef0:	10c0082e 	bgeu	r2,r3,29f14 <__gtdf2+0x5c>
   29ef4:	d8c00017 	ldw	r3,0(sp)
   29ef8:	10c0062e 	bgeu	r2,r3,29f14 <__gtdf2+0x5c>
   29efc:	d9000504 	addi	r4,sp,20
   29f00:	d80b883a 	mov	r5,sp
   29f04:	002a4d40 	call	2a4d4 <__fpcmp_parts_d>
   29f08:	dfc00e17 	ldw	ra,56(sp)
   29f0c:	dec00f04 	addi	sp,sp,60
   29f10:	f800283a 	ret
   29f14:	00bfffc4 	movi	r2,-1
   29f18:	003ffb06 	br	29f08 <__gtdf2+0x50>

00029f1c <__gedf2>:
   29f1c:	defff104 	addi	sp,sp,-60
   29f20:	d9000c15 	stw	r4,48(sp)
   29f24:	d9400d15 	stw	r5,52(sp)
   29f28:	d9000c04 	addi	r4,sp,48
   29f2c:	d9400504 	addi	r5,sp,20
   29f30:	dfc00e15 	stw	ra,56(sp)
   29f34:	d9800a15 	stw	r6,40(sp)
   29f38:	d9c00b15 	stw	r7,44(sp)
   29f3c:	002a3d00 	call	2a3d0 <__unpack_d>
   29f40:	d9000a04 	addi	r4,sp,40
   29f44:	d80b883a 	mov	r5,sp
   29f48:	002a3d00 	call	2a3d0 <__unpack_d>
   29f4c:	d8c00517 	ldw	r3,20(sp)
   29f50:	00800044 	movi	r2,1
   29f54:	10c0082e 	bgeu	r2,r3,29f78 <__gedf2+0x5c>
   29f58:	d8c00017 	ldw	r3,0(sp)
   29f5c:	10c0062e 	bgeu	r2,r3,29f78 <__gedf2+0x5c>
   29f60:	d9000504 	addi	r4,sp,20
   29f64:	d80b883a 	mov	r5,sp
   29f68:	002a4d40 	call	2a4d4 <__fpcmp_parts_d>
   29f6c:	dfc00e17 	ldw	ra,56(sp)
   29f70:	dec00f04 	addi	sp,sp,60
   29f74:	f800283a 	ret
   29f78:	00bfffc4 	movi	r2,-1
   29f7c:	003ffb06 	br	29f6c <__gedf2+0x50>

00029f80 <__ltdf2>:
   29f80:	defff104 	addi	sp,sp,-60
   29f84:	d9000c15 	stw	r4,48(sp)
   29f88:	d9400d15 	stw	r5,52(sp)
   29f8c:	d9000c04 	addi	r4,sp,48
   29f90:	d9400504 	addi	r5,sp,20
   29f94:	dfc00e15 	stw	ra,56(sp)
   29f98:	d9800a15 	stw	r6,40(sp)
   29f9c:	d9c00b15 	stw	r7,44(sp)
   29fa0:	002a3d00 	call	2a3d0 <__unpack_d>
   29fa4:	d9000a04 	addi	r4,sp,40
   29fa8:	d80b883a 	mov	r5,sp
   29fac:	002a3d00 	call	2a3d0 <__unpack_d>
   29fb0:	d8c00517 	ldw	r3,20(sp)
   29fb4:	00800044 	movi	r2,1
   29fb8:	10c0052e 	bgeu	r2,r3,29fd0 <__ltdf2+0x50>
   29fbc:	d8c00017 	ldw	r3,0(sp)
   29fc0:	10c0032e 	bgeu	r2,r3,29fd0 <__ltdf2+0x50>
   29fc4:	d9000504 	addi	r4,sp,20
   29fc8:	d80b883a 	mov	r5,sp
   29fcc:	002a4d40 	call	2a4d4 <__fpcmp_parts_d>
   29fd0:	dfc00e17 	ldw	ra,56(sp)
   29fd4:	dec00f04 	addi	sp,sp,60
   29fd8:	f800283a 	ret

00029fdc <__floatsidf>:
   29fdc:	2004d7fa 	srli	r2,r4,31
   29fe0:	defff904 	addi	sp,sp,-28
   29fe4:	00c000c4 	movi	r3,3
   29fe8:	dfc00615 	stw	ra,24(sp)
   29fec:	dc000515 	stw	r16,20(sp)
   29ff0:	d8c00015 	stw	r3,0(sp)
   29ff4:	d8800115 	stw	r2,4(sp)
   29ff8:	2000081e 	bne	r4,zero,2a01c <__floatsidf+0x40>
   29ffc:	00800084 	movi	r2,2
   2a000:	d8800015 	stw	r2,0(sp)
   2a004:	d809883a 	mov	r4,sp
   2a008:	0020e8c0 	call	20e8c <__pack_d>
   2a00c:	dfc00617 	ldw	ra,24(sp)
   2a010:	dc000517 	ldw	r16,20(sp)
   2a014:	dec00704 	addi	sp,sp,28
   2a018:	f800283a 	ret
   2a01c:	00c00f04 	movi	r3,60
   2a020:	d8c00215 	stw	r3,8(sp)
   2a024:	10000f1e 	bne	r2,zero,2a064 <__floatsidf+0x88>
   2a028:	2021883a 	mov	r16,r4
   2a02c:	8009883a 	mov	r4,r16
   2a030:	0020bec0 	call	20bec <__clzsi2>
   2a034:	11000744 	addi	r4,r2,29
   2a038:	0100110e 	bge	zero,r4,2a080 <__floatsidf+0xa4>
   2a03c:	10ffff44 	addi	r3,r2,-3
   2a040:	18001216 	blt	r3,zero,2a08c <__floatsidf+0xb0>
   2a044:	80c6983a 	sll	r3,r16,r3
   2a048:	0009883a 	mov	r4,zero
   2a04c:	014007c4 	movi	r5,31
   2a050:	2885c83a 	sub	r2,r5,r2
   2a054:	d9000315 	stw	r4,12(sp)
   2a058:	d8c00415 	stw	r3,16(sp)
   2a05c:	d8800215 	stw	r2,8(sp)
   2a060:	003fe806 	br	2a004 <__floatsidf+0x28>
   2a064:	00a00034 	movhi	r2,32768
   2a068:	20800e26 	beq	r4,r2,2a0a4 <__floatsidf+0xc8>
   2a06c:	0121c83a 	sub	r16,zero,r4
   2a070:	8009883a 	mov	r4,r16
   2a074:	0020bec0 	call	20bec <__clzsi2>
   2a078:	11000744 	addi	r4,r2,29
   2a07c:	013fef16 	blt	zero,r4,2a03c <__floatsidf+0x60>
   2a080:	dc000315 	stw	r16,12(sp)
   2a084:	d8000415 	stw	zero,16(sp)
   2a088:	003fde06 	br	2a004 <__floatsidf+0x28>
   2a08c:	800ad07a 	srli	r5,r16,1
   2a090:	00c007c4 	movi	r3,31
   2a094:	1907c83a 	sub	r3,r3,r4
   2a098:	28c6d83a 	srl	r3,r5,r3
   2a09c:	8108983a 	sll	r4,r16,r4
   2a0a0:	003fea06 	br	2a04c <__floatsidf+0x70>
   2a0a4:	0005883a 	mov	r2,zero
   2a0a8:	00f07834 	movhi	r3,49632
   2a0ac:	003fd706 	br	2a00c <__floatsidf+0x30>

0002a0b0 <__fixdfsi>:
   2a0b0:	defff804 	addi	sp,sp,-32
   2a0b4:	d9000515 	stw	r4,20(sp)
   2a0b8:	d9400615 	stw	r5,24(sp)
   2a0bc:	d9000504 	addi	r4,sp,20
   2a0c0:	d80b883a 	mov	r5,sp
   2a0c4:	dfc00715 	stw	ra,28(sp)
   2a0c8:	002a3d00 	call	2a3d0 <__unpack_d>
   2a0cc:	d8800017 	ldw	r2,0(sp)
   2a0d0:	00c00084 	movi	r3,2
   2a0d4:	10c01c26 	beq	r2,r3,2a148 <__fixdfsi+0x98>
   2a0d8:	00c00044 	movi	r3,1
   2a0dc:	18801a2e 	bgeu	r3,r2,2a148 <__fixdfsi+0x98>
   2a0e0:	00c00104 	movi	r3,4
   2a0e4:	10c01126 	beq	r2,r3,2a12c <__fixdfsi+0x7c>
   2a0e8:	d8800217 	ldw	r2,8(sp)
   2a0ec:	10001616 	blt	r2,zero,2a148 <__fixdfsi+0x98>
   2a0f0:	00c00784 	movi	r3,30
   2a0f4:	18800d16 	blt	r3,r2,2a12c <__fixdfsi+0x7c>
   2a0f8:	00c00f04 	movi	r3,60
   2a0fc:	1885c83a 	sub	r2,r3,r2
   2a100:	10fff804 	addi	r3,r2,-32
   2a104:	d9400317 	ldw	r5,12(sp)
   2a108:	d9000417 	ldw	r4,16(sp)
   2a10c:	18001616 	blt	r3,zero,2a168 <__fixdfsi+0xb8>
   2a110:	20c4d83a 	srl	r2,r4,r3
   2a114:	d8c00117 	ldw	r3,4(sp)
   2a118:	18000126 	beq	r3,zero,2a120 <__fixdfsi+0x70>
   2a11c:	0085c83a 	sub	r2,zero,r2
   2a120:	dfc00717 	ldw	ra,28(sp)
   2a124:	dec00804 	addi	sp,sp,32
   2a128:	f800283a 	ret
   2a12c:	d8800117 	ldw	r2,4(sp)
   2a130:	1000091e 	bne	r2,zero,2a158 <__fixdfsi+0xa8>
   2a134:	00a00034 	movhi	r2,32768
   2a138:	10bfffc4 	addi	r2,r2,-1
   2a13c:	dfc00717 	ldw	ra,28(sp)
   2a140:	dec00804 	addi	sp,sp,32
   2a144:	f800283a 	ret
   2a148:	0005883a 	mov	r2,zero
   2a14c:	dfc00717 	ldw	ra,28(sp)
   2a150:	dec00804 	addi	sp,sp,32
   2a154:	f800283a 	ret
   2a158:	00a00034 	movhi	r2,32768
   2a15c:	dfc00717 	ldw	ra,28(sp)
   2a160:	dec00804 	addi	sp,sp,32
   2a164:	f800283a 	ret
   2a168:	2008907a 	slli	r4,r4,1
   2a16c:	018007c4 	movi	r6,31
   2a170:	308dc83a 	sub	r6,r6,r2
   2a174:	2188983a 	sll	r4,r4,r6
   2a178:	2884d83a 	srl	r2,r5,r2
   2a17c:	2084b03a 	or	r2,r4,r2
   2a180:	003fe406 	br	2a114 <__fixdfsi+0x64>

0002a184 <__floatunsidf>:
   2a184:	defff904 	addi	sp,sp,-28
   2a188:	dc000515 	stw	r16,20(sp)
   2a18c:	dfc00615 	stw	ra,24(sp)
   2a190:	d8000115 	stw	zero,4(sp)
   2a194:	2021883a 	mov	r16,r4
   2a198:	20001726 	beq	r4,zero,2a1f8 <__floatunsidf+0x74>
   2a19c:	008000c4 	movi	r2,3
   2a1a0:	d8800015 	stw	r2,0(sp)
   2a1a4:	00800f04 	movi	r2,60
   2a1a8:	d8800215 	stw	r2,8(sp)
   2a1ac:	0020bec0 	call	20bec <__clzsi2>
   2a1b0:	10c00744 	addi	r3,r2,29
   2a1b4:	18001816 	blt	r3,zero,2a218 <__floatunsidf+0x94>
   2a1b8:	18002d26 	beq	r3,zero,2a270 <__floatunsidf+0xec>
   2a1bc:	113fff44 	addi	r4,r2,-3
   2a1c0:	20002e16 	blt	r4,zero,2a27c <__floatunsidf+0xf8>
   2a1c4:	8108983a 	sll	r4,r16,r4
   2a1c8:	0021883a 	mov	r16,zero
   2a1cc:	014007c4 	movi	r5,31
   2a1d0:	2885c83a 	sub	r2,r5,r2
   2a1d4:	dc000315 	stw	r16,12(sp)
   2a1d8:	d9000415 	stw	r4,16(sp)
   2a1dc:	d8800215 	stw	r2,8(sp)
   2a1e0:	d809883a 	mov	r4,sp
   2a1e4:	0020e8c0 	call	20e8c <__pack_d>
   2a1e8:	dfc00617 	ldw	ra,24(sp)
   2a1ec:	dc000517 	ldw	r16,20(sp)
   2a1f0:	dec00704 	addi	sp,sp,28
   2a1f4:	f800283a 	ret
   2a1f8:	00800084 	movi	r2,2
   2a1fc:	d809883a 	mov	r4,sp
   2a200:	d8800015 	stw	r2,0(sp)
   2a204:	0020e8c0 	call	20e8c <__pack_d>
   2a208:	dfc00617 	ldw	ra,24(sp)
   2a20c:	dc000517 	ldw	r16,20(sp)
   2a210:	dec00704 	addi	sp,sp,28
   2a214:	f800283a 	ret
   2a218:	00c7c83a 	sub	r3,zero,r3
   2a21c:	193ff804 	addi	r4,r3,-32
   2a220:	20001c16 	blt	r4,zero,2a294 <__floatunsidf+0x110>
   2a224:	000b883a 	mov	r5,zero
   2a228:	2009d7fa 	srai	r4,r4,31
   2a22c:	80c6d83a 	srl	r3,r16,r3
   2a230:	297fffc4 	addi	r5,r5,-1
   2a234:	2c20703a 	and	r16,r5,r16
   2a238:	8020c03a 	cmpne	r16,r16,zero
   2a23c:	1906703a 	and	r3,r3,r4
   2a240:	010007c4 	movi	r4,31
   2a244:	80c6b03a 	or	r3,r16,r3
   2a248:	2085c83a 	sub	r2,r4,r2
   2a24c:	d809883a 	mov	r4,sp
   2a250:	d8c00315 	stw	r3,12(sp)
   2a254:	d8000415 	stw	zero,16(sp)
   2a258:	d8800215 	stw	r2,8(sp)
   2a25c:	0020e8c0 	call	20e8c <__pack_d>
   2a260:	dfc00617 	ldw	ra,24(sp)
   2a264:	dc000517 	ldw	r16,20(sp)
   2a268:	dec00704 	addi	sp,sp,28
   2a26c:	f800283a 	ret
   2a270:	dc000315 	stw	r16,12(sp)
   2a274:	d8000415 	stw	zero,16(sp)
   2a278:	003fd906 	br	2a1e0 <__floatunsidf+0x5c>
   2a27c:	800ad07a 	srli	r5,r16,1
   2a280:	010007c4 	movi	r4,31
   2a284:	20c9c83a 	sub	r4,r4,r3
   2a288:	2908d83a 	srl	r4,r5,r4
   2a28c:	80e0983a 	sll	r16,r16,r3
   2a290:	003fce06 	br	2a1cc <__floatunsidf+0x48>
   2a294:	01400044 	movi	r5,1
   2a298:	28ca983a 	sll	r5,r5,r3
   2a29c:	003fe206 	br	2a228 <__floatunsidf+0xa4>

0002a2a0 <udivmodsi4>:
   2a2a0:	2005883a 	mov	r2,r4
   2a2a4:	2900182e 	bgeu	r5,r4,2a308 <udivmodsi4+0x68>
   2a2a8:	28001716 	blt	r5,zero,2a308 <udivmodsi4+0x68>
   2a2ac:	01000804 	movi	r4,32
   2a2b0:	00c00044 	movi	r3,1
   2a2b4:	00000206 	br	2a2c0 <udivmodsi4+0x20>
   2a2b8:	20001126 	beq	r4,zero,2a300 <udivmodsi4+0x60>
   2a2bc:	28000516 	blt	r5,zero,2a2d4 <udivmodsi4+0x34>
   2a2c0:	294b883a 	add	r5,r5,r5
   2a2c4:	213fffc4 	addi	r4,r4,-1
   2a2c8:	18c7883a 	add	r3,r3,r3
   2a2cc:	28bffa36 	bltu	r5,r2,2a2b8 <udivmodsi4+0x18>
   2a2d0:	18000b26 	beq	r3,zero,2a300 <udivmodsi4+0x60>
   2a2d4:	0009883a 	mov	r4,zero
   2a2d8:	11400236 	bltu	r2,r5,2a2e4 <udivmodsi4+0x44>
   2a2dc:	1145c83a 	sub	r2,r2,r5
   2a2e0:	20c8b03a 	or	r4,r4,r3
   2a2e4:	1806d07a 	srli	r3,r3,1
   2a2e8:	280ad07a 	srli	r5,r5,1
   2a2ec:	183ffa1e 	bne	r3,zero,2a2d8 <udivmodsi4+0x38>
   2a2f0:	3000021e 	bne	r6,zero,2a2fc <udivmodsi4+0x5c>
   2a2f4:	2005883a 	mov	r2,r4
   2a2f8:	f800283a 	ret
   2a2fc:	f800283a 	ret
   2a300:	0009883a 	mov	r4,zero
   2a304:	003ffa06 	br	2a2f0 <udivmodsi4+0x50>
   2a308:	00c00044 	movi	r3,1
   2a30c:	0009883a 	mov	r4,zero
   2a310:	003ff106 	br	2a2d8 <udivmodsi4+0x38>

0002a314 <__divsi3>:
   2a314:	defffe04 	addi	sp,sp,-8
   2a318:	dfc00115 	stw	ra,4(sp)
   2a31c:	dc000015 	stw	r16,0(sp)
   2a320:	20000a16 	blt	r4,zero,2a34c <__divsi3+0x38>
   2a324:	0021883a 	mov	r16,zero
   2a328:	28000b16 	blt	r5,zero,2a358 <__divsi3+0x44>
   2a32c:	000d883a 	mov	r6,zero
   2a330:	002a2a00 	call	2a2a0 <udivmodsi4>
   2a334:	80000126 	beq	r16,zero,2a33c <__divsi3+0x28>
   2a338:	0085c83a 	sub	r2,zero,r2
   2a33c:	dfc00117 	ldw	ra,4(sp)
   2a340:	dc000017 	ldw	r16,0(sp)
   2a344:	dec00204 	addi	sp,sp,8
   2a348:	f800283a 	ret
   2a34c:	0109c83a 	sub	r4,zero,r4
   2a350:	04000044 	movi	r16,1
   2a354:	283ff50e 	bge	r5,zero,2a32c <__divsi3+0x18>
   2a358:	014bc83a 	sub	r5,zero,r5
   2a35c:	8400005c 	xori	r16,r16,1
   2a360:	003ff206 	br	2a32c <__divsi3+0x18>

0002a364 <__modsi3>:
   2a364:	deffff04 	addi	sp,sp,-4
   2a368:	dfc00015 	stw	ra,0(sp)
   2a36c:	20000516 	blt	r4,zero,2a384 <__modsi3+0x20>
   2a370:	28000c16 	blt	r5,zero,2a3a4 <__modsi3+0x40>
   2a374:	01800044 	movi	r6,1
   2a378:	dfc00017 	ldw	ra,0(sp)
   2a37c:	dec00104 	addi	sp,sp,4
   2a380:	002a2a01 	jmpi	2a2a0 <udivmodsi4>
   2a384:	0109c83a 	sub	r4,zero,r4
   2a388:	28000b16 	blt	r5,zero,2a3b8 <__modsi3+0x54>
   2a38c:	01800044 	movi	r6,1
   2a390:	002a2a00 	call	2a2a0 <udivmodsi4>
   2a394:	0085c83a 	sub	r2,zero,r2
   2a398:	dfc00017 	ldw	ra,0(sp)
   2a39c:	dec00104 	addi	sp,sp,4
   2a3a0:	f800283a 	ret
   2a3a4:	014bc83a 	sub	r5,zero,r5
   2a3a8:	01800044 	movi	r6,1
   2a3ac:	dfc00017 	ldw	ra,0(sp)
   2a3b0:	dec00104 	addi	sp,sp,4
   2a3b4:	002a2a01 	jmpi	2a2a0 <udivmodsi4>
   2a3b8:	014bc83a 	sub	r5,zero,r5
   2a3bc:	003ff306 	br	2a38c <__modsi3+0x28>

0002a3c0 <__udivsi3>:
   2a3c0:	000d883a 	mov	r6,zero
   2a3c4:	002a2a01 	jmpi	2a2a0 <udivmodsi4>

0002a3c8 <__umodsi3>:
   2a3c8:	01800044 	movi	r6,1
   2a3cc:	002a2a01 	jmpi	2a2a0 <udivmodsi4>

0002a3d0 <__unpack_d>:
   2a3d0:	21800117 	ldw	r6,4(r4)
   2a3d4:	20c00017 	ldw	r3,0(r4)
   2a3d8:	3004d7fa 	srli	r2,r6,31
   2a3dc:	3008d53a 	srli	r4,r6,20
   2a3e0:	28800115 	stw	r2,4(r5)
   2a3e4:	2101ffcc 	andi	r4,r4,2047
   2a3e8:	00800434 	movhi	r2,16
   2a3ec:	10bfffc4 	addi	r2,r2,-1
   2a3f0:	3084703a 	and	r2,r6,r2
   2a3f4:	20001a1e 	bne	r4,zero,2a460 <__unpack_d+0x90>
   2a3f8:	1888b03a 	or	r4,r3,r2
   2a3fc:	20002626 	beq	r4,zero,2a498 <__unpack_d+0xc8>
   2a400:	1808d63a 	srli	r4,r3,24
   2a404:	1004923a 	slli	r2,r2,8
   2a408:	01bf0084 	movi	r6,-1022
   2a40c:	29800215 	stw	r6,8(r5)
   2a410:	2084b03a 	or	r2,r4,r2
   2a414:	010000c4 	movi	r4,3
   2a418:	29000015 	stw	r4,0(r5)
   2a41c:	02040034 	movhi	r8,4096
   2a420:	423fffc4 	addi	r8,r8,-1
   2a424:	1806923a 	slli	r3,r3,8
   2a428:	40801836 	bltu	r8,r2,2a48c <__unpack_d+0xbc>
   2a42c:	013f0044 	movi	r4,-1023
   2a430:	18cd883a 	add	r6,r3,r3
   2a434:	30c7803a 	cmpltu	r3,r6,r3
   2a438:	1085883a 	add	r2,r2,r2
   2a43c:	1885883a 	add	r2,r3,r2
   2a440:	200f883a 	mov	r7,r4
   2a444:	3007883a 	mov	r3,r6
   2a448:	213fffc4 	addi	r4,r4,-1
   2a44c:	40bff82e 	bgeu	r8,r2,2a430 <__unpack_d+0x60>
   2a450:	29c00215 	stw	r7,8(r5)
   2a454:	28c00315 	stw	r3,12(r5)
   2a458:	28800415 	stw	r2,16(r5)
   2a45c:	f800283a 	ret
   2a460:	01c1ffc4 	movi	r7,2047
   2a464:	21c00f26 	beq	r4,r7,2a4a4 <__unpack_d+0xd4>
   2a468:	180cd63a 	srli	r6,r3,24
   2a46c:	1004923a 	slli	r2,r2,8
   2a470:	213f0044 	addi	r4,r4,-1023
   2a474:	1806923a 	slli	r3,r3,8
   2a478:	3084b03a 	or	r2,r6,r2
   2a47c:	29000215 	stw	r4,8(r5)
   2a480:	010000c4 	movi	r4,3
   2a484:	10840034 	orhi	r2,r2,4096
   2a488:	29000015 	stw	r4,0(r5)
   2a48c:	28c00315 	stw	r3,12(r5)
   2a490:	28800415 	stw	r2,16(r5)
   2a494:	f800283a 	ret
   2a498:	00800084 	movi	r2,2
   2a49c:	28800015 	stw	r2,0(r5)
   2a4a0:	f800283a 	ret
   2a4a4:	1888b03a 	or	r4,r3,r2
   2a4a8:	20000526 	beq	r4,zero,2a4c0 <__unpack_d+0xf0>
   2a4ac:	3180022c 	andhi	r6,r6,8
   2a4b0:	30000626 	beq	r6,zero,2a4cc <__unpack_d+0xfc>
   2a4b4:	01000044 	movi	r4,1
   2a4b8:	29000015 	stw	r4,0(r5)
   2a4bc:	003ff306 	br	2a48c <__unpack_d+0xbc>
   2a4c0:	00800104 	movi	r2,4
   2a4c4:	28800015 	stw	r2,0(r5)
   2a4c8:	f800283a 	ret
   2a4cc:	28000015 	stw	zero,0(r5)
   2a4d0:	003fee06 	br	2a48c <__unpack_d+0xbc>

0002a4d4 <__fpcmp_parts_d>:
   2a4d4:	20c00017 	ldw	r3,0(r4)
   2a4d8:	00800044 	movi	r2,1
   2a4dc:	10c0142e 	bgeu	r2,r3,2a530 <__fpcmp_parts_d+0x5c>
   2a4e0:	29800017 	ldw	r6,0(r5)
   2a4e4:	1180122e 	bgeu	r2,r6,2a530 <__fpcmp_parts_d+0x5c>
   2a4e8:	01c00104 	movi	r7,4
   2a4ec:	19c02826 	beq	r3,r7,2a590 <__fpcmp_parts_d+0xbc>
   2a4f0:	31c00926 	beq	r6,r7,2a518 <__fpcmp_parts_d+0x44>
   2a4f4:	01c00084 	movi	r7,2
   2a4f8:	19c00626 	beq	r3,r7,2a514 <__fpcmp_parts_d+0x40>
   2a4fc:	31c00a26 	beq	r6,r7,2a528 <__fpcmp_parts_d+0x54>
   2a500:	20c00117 	ldw	r3,4(r4)
   2a504:	29800117 	ldw	r6,4(r5)
   2a508:	19800b26 	beq	r3,r6,2a538 <__fpcmp_parts_d+0x64>
   2a50c:	1800041e 	bne	r3,zero,2a520 <__fpcmp_parts_d+0x4c>
   2a510:	f800283a 	ret
   2a514:	30c01a26 	beq	r6,r3,2a580 <__fpcmp_parts_d+0xac>
   2a518:	28800117 	ldw	r2,4(r5)
   2a51c:	1000041e 	bne	r2,zero,2a530 <__fpcmp_parts_d+0x5c>
   2a520:	00bfffc4 	movi	r2,-1
   2a524:	f800283a 	ret
   2a528:	20800117 	ldw	r2,4(r4)
   2a52c:	103ffc1e 	bne	r2,zero,2a520 <__fpcmp_parts_d+0x4c>
   2a530:	00800044 	movi	r2,1
   2a534:	f800283a 	ret
   2a538:	21c00217 	ldw	r7,8(r4)
   2a53c:	29800217 	ldw	r6,8(r5)
   2a540:	31c0020e 	bge	r6,r7,2a54c <__fpcmp_parts_d+0x78>
   2a544:	183ff61e 	bne	r3,zero,2a520 <__fpcmp_parts_d+0x4c>
   2a548:	f800283a 	ret
   2a54c:	39800a16 	blt	r7,r6,2a578 <__fpcmp_parts_d+0xa4>
   2a550:	20800417 	ldw	r2,16(r4)
   2a554:	29800417 	ldw	r6,16(r5)
   2a558:	21c00317 	ldw	r7,12(r4)
   2a55c:	29000317 	ldw	r4,12(r5)
   2a560:	30800936 	bltu	r6,r2,2a588 <__fpcmp_parts_d+0xb4>
   2a564:	1180011e 	bne	r2,r6,2a56c <__fpcmp_parts_d+0x98>
   2a568:	21c00736 	bltu	r4,r7,2a588 <__fpcmp_parts_d+0xb4>
   2a56c:	11800236 	bltu	r2,r6,2a578 <__fpcmp_parts_d+0xa4>
   2a570:	3080031e 	bne	r6,r2,2a580 <__fpcmp_parts_d+0xac>
   2a574:	3900022e 	bgeu	r7,r4,2a580 <__fpcmp_parts_d+0xac>
   2a578:	183fe926 	beq	r3,zero,2a520 <__fpcmp_parts_d+0x4c>
   2a57c:	003fec06 	br	2a530 <__fpcmp_parts_d+0x5c>
   2a580:	0005883a 	mov	r2,zero
   2a584:	f800283a 	ret
   2a588:	183fe926 	beq	r3,zero,2a530 <__fpcmp_parts_d+0x5c>
   2a58c:	003fe406 	br	2a520 <__fpcmp_parts_d+0x4c>
   2a590:	30ffe51e 	bne	r6,r3,2a528 <__fpcmp_parts_d+0x54>
   2a594:	28c00117 	ldw	r3,4(r5)
   2a598:	20800117 	ldw	r2,4(r4)
   2a59c:	1885c83a 	sub	r2,r3,r2
   2a5a0:	f800283a 	ret

0002a5a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a5a4:	defffe04 	addi	sp,sp,-8
   2a5a8:	dfc00115 	stw	ra,4(sp)
   2a5ac:	df000015 	stw	fp,0(sp)
   2a5b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a5b4:	008001f4 	movhi	r2,7
   2a5b8:	10b99a04 	addi	r2,r2,-6552
   2a5bc:	10800017 	ldw	r2,0(r2)
   2a5c0:	10000526 	beq	r2,zero,2a5d8 <alt_get_errno+0x34>
   2a5c4:	008001f4 	movhi	r2,7
   2a5c8:	10b99a04 	addi	r2,r2,-6552
   2a5cc:	10800017 	ldw	r2,0(r2)
   2a5d0:	103ee83a 	callr	r2
   2a5d4:	00000206 	br	2a5e0 <alt_get_errno+0x3c>
   2a5d8:	008001f4 	movhi	r2,7
   2a5dc:	10b9aa04 	addi	r2,r2,-6488
}
   2a5e0:	e037883a 	mov	sp,fp
   2a5e4:	dfc00117 	ldw	ra,4(sp)
   2a5e8:	df000017 	ldw	fp,0(sp)
   2a5ec:	dec00204 	addi	sp,sp,8
   2a5f0:	f800283a 	ret

0002a5f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2a5f4:	defffb04 	addi	sp,sp,-20
   2a5f8:	dfc00415 	stw	ra,16(sp)
   2a5fc:	df000315 	stw	fp,12(sp)
   2a600:	df000304 	addi	fp,sp,12
   2a604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2a608:	e0bfff17 	ldw	r2,-4(fp)
   2a60c:	10000716 	blt	r2,zero,2a62c <close+0x38>
   2a610:	e13fff17 	ldw	r4,-4(fp)
   2a614:	01400304 	movi	r5,12
   2a618:	00210b00 	call	210b0 <__mulsi3>
   2a61c:	00c001f4 	movhi	r3,7
   2a620:	18f51804 	addi	r3,r3,-11168
   2a624:	10c5883a 	add	r2,r2,r3
   2a628:	00000106 	br	2a630 <close+0x3c>
   2a62c:	0005883a 	mov	r2,zero
   2a630:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2a634:	e0bffd17 	ldw	r2,-12(fp)
   2a638:	10001826 	beq	r2,zero,2a69c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2a63c:	e0bffd17 	ldw	r2,-12(fp)
   2a640:	10800017 	ldw	r2,0(r2)
   2a644:	10800417 	ldw	r2,16(r2)
   2a648:	10000626 	beq	r2,zero,2a664 <close+0x70>
   2a64c:	e0bffd17 	ldw	r2,-12(fp)
   2a650:	10800017 	ldw	r2,0(r2)
   2a654:	10800417 	ldw	r2,16(r2)
   2a658:	e13ffd17 	ldw	r4,-12(fp)
   2a65c:	103ee83a 	callr	r2
   2a660:	00000106 	br	2a668 <close+0x74>
   2a664:	0005883a 	mov	r2,zero
   2a668:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2a66c:	e13fff17 	ldw	r4,-4(fp)
   2a670:	002ad280 	call	2ad28 <alt_release_fd>
    if (rval < 0)
   2a674:	e0bffe17 	ldw	r2,-8(fp)
   2a678:	1000060e 	bge	r2,zero,2a694 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2a67c:	002a5a40 	call	2a5a4 <alt_get_errno>
   2a680:	e0fffe17 	ldw	r3,-8(fp)
   2a684:	00c7c83a 	sub	r3,zero,r3
   2a688:	10c00015 	stw	r3,0(r2)
      return -1;
   2a68c:	00bfffc4 	movi	r2,-1
   2a690:	00000606 	br	2a6ac <close+0xb8>
    }
    return 0;
   2a694:	0005883a 	mov	r2,zero
   2a698:	00000406 	br	2a6ac <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a69c:	002a5a40 	call	2a5a4 <alt_get_errno>
   2a6a0:	00c01444 	movi	r3,81
   2a6a4:	10c00015 	stw	r3,0(r2)
    return -1;
   2a6a8:	00bfffc4 	movi	r2,-1
  }
}
   2a6ac:	e037883a 	mov	sp,fp
   2a6b0:	dfc00117 	ldw	ra,4(sp)
   2a6b4:	df000017 	ldw	fp,0(sp)
   2a6b8:	dec00204 	addi	sp,sp,8
   2a6bc:	f800283a 	ret

0002a6c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2a6c0:	defffc04 	addi	sp,sp,-16
   2a6c4:	df000315 	stw	fp,12(sp)
   2a6c8:	df000304 	addi	fp,sp,12
   2a6cc:	e13ffd15 	stw	r4,-12(fp)
   2a6d0:	e17ffe15 	stw	r5,-8(fp)
   2a6d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2a6d8:	e0bfff17 	ldw	r2,-4(fp)
}
   2a6dc:	e037883a 	mov	sp,fp
   2a6e0:	df000017 	ldw	fp,0(sp)
   2a6e4:	dec00104 	addi	sp,sp,4
   2a6e8:	f800283a 	ret

0002a6ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2a6ec:	defffc04 	addi	sp,sp,-16
   2a6f0:	df000315 	stw	fp,12(sp)
   2a6f4:	df000304 	addi	fp,sp,12
   2a6f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2a6fc:	0001883a 	nop
   2a700:	e0bfff17 	ldw	r2,-4(fp)
   2a704:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2a708:	e0bffd17 	ldw	r2,-12(fp)
   2a70c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2a710:	e0bffe17 	ldw	r2,-8(fp)
   2a714:	10000226 	beq	r2,zero,2a720 <_exit+0x34>
    ALT_SIM_FAIL();
   2a718:	002af070 	cmpltui	zero,zero,43969
   2a71c:	00000106 	br	2a724 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2a720:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2a724:	003fff06 	br	2a724 <_exit+0x38>

0002a728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a728:	defffe04 	addi	sp,sp,-8
   2a72c:	dfc00115 	stw	ra,4(sp)
   2a730:	df000015 	stw	fp,0(sp)
   2a734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a738:	008001f4 	movhi	r2,7
   2a73c:	10b99a04 	addi	r2,r2,-6552
   2a740:	10800017 	ldw	r2,0(r2)
   2a744:	10000526 	beq	r2,zero,2a75c <alt_get_errno+0x34>
   2a748:	008001f4 	movhi	r2,7
   2a74c:	10b99a04 	addi	r2,r2,-6552
   2a750:	10800017 	ldw	r2,0(r2)
   2a754:	103ee83a 	callr	r2
   2a758:	00000206 	br	2a764 <alt_get_errno+0x3c>
   2a75c:	008001f4 	movhi	r2,7
   2a760:	10b9aa04 	addi	r2,r2,-6488
}
   2a764:	e037883a 	mov	sp,fp
   2a768:	dfc00117 	ldw	ra,4(sp)
   2a76c:	df000017 	ldw	fp,0(sp)
   2a770:	dec00204 	addi	sp,sp,8
   2a774:	f800283a 	ret

0002a778 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2a778:	defffb04 	addi	sp,sp,-20
   2a77c:	dfc00415 	stw	ra,16(sp)
   2a780:	df000315 	stw	fp,12(sp)
   2a784:	df000304 	addi	fp,sp,12
   2a788:	e13ffe15 	stw	r4,-8(fp)
   2a78c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a790:	e0bffe17 	ldw	r2,-8(fp)
   2a794:	10000716 	blt	r2,zero,2a7b4 <fstat+0x3c>
   2a798:	e13ffe17 	ldw	r4,-8(fp)
   2a79c:	01400304 	movi	r5,12
   2a7a0:	00210b00 	call	210b0 <__mulsi3>
   2a7a4:	00c001f4 	movhi	r3,7
   2a7a8:	18f51804 	addi	r3,r3,-11168
   2a7ac:	10c5883a 	add	r2,r2,r3
   2a7b0:	00000106 	br	2a7b8 <fstat+0x40>
   2a7b4:	0005883a 	mov	r2,zero
   2a7b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2a7bc:	e0bffd17 	ldw	r2,-12(fp)
   2a7c0:	10001026 	beq	r2,zero,2a804 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2a7c4:	e0bffd17 	ldw	r2,-12(fp)
   2a7c8:	10800017 	ldw	r2,0(r2)
   2a7cc:	10800817 	ldw	r2,32(r2)
   2a7d0:	10000726 	beq	r2,zero,2a7f0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   2a7d4:	e0bffd17 	ldw	r2,-12(fp)
   2a7d8:	10800017 	ldw	r2,0(r2)
   2a7dc:	10800817 	ldw	r2,32(r2)
   2a7e0:	e13ffd17 	ldw	r4,-12(fp)
   2a7e4:	e17fff17 	ldw	r5,-4(fp)
   2a7e8:	103ee83a 	callr	r2
   2a7ec:	00000906 	br	2a814 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2a7f0:	e0bfff17 	ldw	r2,-4(fp)
   2a7f4:	00c80004 	movi	r3,8192
   2a7f8:	10c00115 	stw	r3,4(r2)
      return 0;
   2a7fc:	0005883a 	mov	r2,zero
   2a800:	00000406 	br	2a814 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a804:	002a7280 	call	2a728 <alt_get_errno>
   2a808:	00c01444 	movi	r3,81
   2a80c:	10c00015 	stw	r3,0(r2)
    return -1;
   2a810:	00bfffc4 	movi	r2,-1
  }
}
   2a814:	e037883a 	mov	sp,fp
   2a818:	dfc00117 	ldw	ra,4(sp)
   2a81c:	df000017 	ldw	fp,0(sp)
   2a820:	dec00204 	addi	sp,sp,8
   2a824:	f800283a 	ret

0002a828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a828:	defffe04 	addi	sp,sp,-8
   2a82c:	dfc00115 	stw	ra,4(sp)
   2a830:	df000015 	stw	fp,0(sp)
   2a834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a838:	008001f4 	movhi	r2,7
   2a83c:	10b99a04 	addi	r2,r2,-6552
   2a840:	10800017 	ldw	r2,0(r2)
   2a844:	10000526 	beq	r2,zero,2a85c <alt_get_errno+0x34>
   2a848:	008001f4 	movhi	r2,7
   2a84c:	10b99a04 	addi	r2,r2,-6552
   2a850:	10800017 	ldw	r2,0(r2)
   2a854:	103ee83a 	callr	r2
   2a858:	00000206 	br	2a864 <alt_get_errno+0x3c>
   2a85c:	008001f4 	movhi	r2,7
   2a860:	10b9aa04 	addi	r2,r2,-6488
}
   2a864:	e037883a 	mov	sp,fp
   2a868:	dfc00117 	ldw	ra,4(sp)
   2a86c:	df000017 	ldw	fp,0(sp)
   2a870:	dec00204 	addi	sp,sp,8
   2a874:	f800283a 	ret

0002a878 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2a878:	deffed04 	addi	sp,sp,-76
   2a87c:	dfc01215 	stw	ra,72(sp)
   2a880:	df001115 	stw	fp,68(sp)
   2a884:	df001104 	addi	fp,sp,68
   2a888:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a88c:	e0bfff17 	ldw	r2,-4(fp)
   2a890:	10000716 	blt	r2,zero,2a8b0 <isatty+0x38>
   2a894:	e13fff17 	ldw	r4,-4(fp)
   2a898:	01400304 	movi	r5,12
   2a89c:	00210b00 	call	210b0 <__mulsi3>
   2a8a0:	00c001f4 	movhi	r3,7
   2a8a4:	18f51804 	addi	r3,r3,-11168
   2a8a8:	10c5883a 	add	r2,r2,r3
   2a8ac:	00000106 	br	2a8b4 <isatty+0x3c>
   2a8b0:	0005883a 	mov	r2,zero
   2a8b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2a8b8:	e0bfef17 	ldw	r2,-68(fp)
   2a8bc:	10000e26 	beq	r2,zero,2a8f8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2a8c0:	e0bfef17 	ldw	r2,-68(fp)
   2a8c4:	10800017 	ldw	r2,0(r2)
   2a8c8:	10800817 	ldw	r2,32(r2)
   2a8cc:	1000021e 	bne	r2,zero,2a8d8 <isatty+0x60>
    {
      return 1;
   2a8d0:	00800044 	movi	r2,1
   2a8d4:	00000c06 	br	2a908 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2a8d8:	e0bff004 	addi	r2,fp,-64
   2a8dc:	e13fff17 	ldw	r4,-4(fp)
   2a8e0:	100b883a 	mov	r5,r2
   2a8e4:	002a7780 	call	2a778 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2a8e8:	e0bff117 	ldw	r2,-60(fp)
   2a8ec:	10880020 	cmpeqi	r2,r2,8192
   2a8f0:	10803fcc 	andi	r2,r2,255
   2a8f4:	00000406 	br	2a908 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a8f8:	002a8280 	call	2a828 <alt_get_errno>
   2a8fc:	00c01444 	movi	r3,81
   2a900:	10c00015 	stw	r3,0(r2)
    return 0;
   2a904:	0005883a 	mov	r2,zero
  }
}
   2a908:	e037883a 	mov	sp,fp
   2a90c:	dfc00117 	ldw	ra,4(sp)
   2a910:	df000017 	ldw	fp,0(sp)
   2a914:	dec00204 	addi	sp,sp,8
   2a918:	f800283a 	ret

0002a91c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2a91c:	defffc04 	addi	sp,sp,-16
   2a920:	df000315 	stw	fp,12(sp)
   2a924:	df000304 	addi	fp,sp,12
   2a928:	e13ffd15 	stw	r4,-12(fp)
   2a92c:	e17ffe15 	stw	r5,-8(fp)
   2a930:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2a934:	e0fffe17 	ldw	r3,-8(fp)
   2a938:	e0bffd17 	ldw	r2,-12(fp)
   2a93c:	18800e26 	beq	r3,r2,2a978 <alt_load_section+0x5c>
  {
    while( to != end )
   2a940:	00000a06 	br	2a96c <alt_load_section+0x50>
    {
      *to++ = *from++;
   2a944:	e0bffd17 	ldw	r2,-12(fp)
   2a948:	10c00017 	ldw	r3,0(r2)
   2a94c:	e0bffe17 	ldw	r2,-8(fp)
   2a950:	10c00015 	stw	r3,0(r2)
   2a954:	e0bffe17 	ldw	r2,-8(fp)
   2a958:	10800104 	addi	r2,r2,4
   2a95c:	e0bffe15 	stw	r2,-8(fp)
   2a960:	e0bffd17 	ldw	r2,-12(fp)
   2a964:	10800104 	addi	r2,r2,4
   2a968:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2a96c:	e0fffe17 	ldw	r3,-8(fp)
   2a970:	e0bfff17 	ldw	r2,-4(fp)
   2a974:	18bff31e 	bne	r3,r2,2a944 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2a978:	e037883a 	mov	sp,fp
   2a97c:	df000017 	ldw	fp,0(sp)
   2a980:	dec00104 	addi	sp,sp,4
   2a984:	f800283a 	ret

0002a988 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2a988:	defffe04 	addi	sp,sp,-8
   2a98c:	dfc00115 	stw	ra,4(sp)
   2a990:	df000015 	stw	fp,0(sp)
   2a994:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2a998:	010000f4 	movhi	r4,3
   2a99c:	21333c04 	addi	r4,r4,-13072
   2a9a0:	014001f4 	movhi	r5,7
   2a9a4:	29730904 	addi	r5,r5,-13276
   2a9a8:	018001f4 	movhi	r6,7
   2a9ac:	31b99f04 	addi	r6,r6,-6532
   2a9b0:	002a91c0 	call	2a91c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2a9b4:	010000b4 	movhi	r4,2
   2a9b8:	21000804 	addi	r4,r4,32
   2a9bc:	014000b4 	movhi	r5,2
   2a9c0:	29400804 	addi	r5,r5,32
   2a9c4:	018000b4 	movhi	r6,2
   2a9c8:	31806e04 	addi	r6,r6,440
   2a9cc:	002a91c0 	call	2a91c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2a9d0:	010001f4 	movhi	r4,7
   2a9d4:	21320004 	addi	r4,r4,-14336
   2a9d8:	014001f4 	movhi	r5,7
   2a9dc:	29720004 	addi	r5,r5,-14336
   2a9e0:	018001f4 	movhi	r6,7
   2a9e4:	31b30904 	addi	r6,r6,-13276
   2a9e8:	002a91c0 	call	2a91c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2a9ec:	002be640 	call	2be64 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2a9f0:	002c0280 	call	2c028 <alt_icache_flush_all>
}
   2a9f4:	e037883a 	mov	sp,fp
   2a9f8:	dfc00117 	ldw	ra,4(sp)
   2a9fc:	df000017 	ldw	fp,0(sp)
   2aa00:	dec00204 	addi	sp,sp,8
   2aa04:	f800283a 	ret

0002aa08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2aa08:	defffe04 	addi	sp,sp,-8
   2aa0c:	dfc00115 	stw	ra,4(sp)
   2aa10:	df000015 	stw	fp,0(sp)
   2aa14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2aa18:	008001f4 	movhi	r2,7
   2aa1c:	10b99a04 	addi	r2,r2,-6552
   2aa20:	10800017 	ldw	r2,0(r2)
   2aa24:	10000526 	beq	r2,zero,2aa3c <alt_get_errno+0x34>
   2aa28:	008001f4 	movhi	r2,7
   2aa2c:	10b99a04 	addi	r2,r2,-6552
   2aa30:	10800017 	ldw	r2,0(r2)
   2aa34:	103ee83a 	callr	r2
   2aa38:	00000206 	br	2aa44 <alt_get_errno+0x3c>
   2aa3c:	008001f4 	movhi	r2,7
   2aa40:	10b9aa04 	addi	r2,r2,-6488
}
   2aa44:	e037883a 	mov	sp,fp
   2aa48:	dfc00117 	ldw	ra,4(sp)
   2aa4c:	df000017 	ldw	fp,0(sp)
   2aa50:	dec00204 	addi	sp,sp,8
   2aa54:	f800283a 	ret

0002aa58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2aa58:	defff904 	addi	sp,sp,-28
   2aa5c:	dfc00615 	stw	ra,24(sp)
   2aa60:	df000515 	stw	fp,20(sp)
   2aa64:	df000504 	addi	fp,sp,20
   2aa68:	e13ffd15 	stw	r4,-12(fp)
   2aa6c:	e17ffe15 	stw	r5,-8(fp)
   2aa70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2aa74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2aa78:	e0bffd17 	ldw	r2,-12(fp)
   2aa7c:	10000716 	blt	r2,zero,2aa9c <lseek+0x44>
   2aa80:	e13ffd17 	ldw	r4,-12(fp)
   2aa84:	01400304 	movi	r5,12
   2aa88:	00210b00 	call	210b0 <__mulsi3>
   2aa8c:	00c001f4 	movhi	r3,7
   2aa90:	18f51804 	addi	r3,r3,-11168
   2aa94:	10c5883a 	add	r2,r2,r3
   2aa98:	00000106 	br	2aaa0 <lseek+0x48>
   2aa9c:	0005883a 	mov	r2,zero
   2aaa0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2aaa4:	e0bffc17 	ldw	r2,-16(fp)
   2aaa8:	10001026 	beq	r2,zero,2aaec <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2aaac:	e0bffc17 	ldw	r2,-16(fp)
   2aab0:	10800017 	ldw	r2,0(r2)
   2aab4:	10800717 	ldw	r2,28(r2)
   2aab8:	10000926 	beq	r2,zero,2aae0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2aabc:	e0bffc17 	ldw	r2,-16(fp)
   2aac0:	10800017 	ldw	r2,0(r2)
   2aac4:	10800717 	ldw	r2,28(r2)
   2aac8:	e13ffc17 	ldw	r4,-16(fp)
   2aacc:	e17ffe17 	ldw	r5,-8(fp)
   2aad0:	e1bfff17 	ldw	r6,-4(fp)
   2aad4:	103ee83a 	callr	r2
   2aad8:	e0bffb15 	stw	r2,-20(fp)
   2aadc:	00000506 	br	2aaf4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2aae0:	00bfde84 	movi	r2,-134
   2aae4:	e0bffb15 	stw	r2,-20(fp)
   2aae8:	00000206 	br	2aaf4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   2aaec:	00bfebc4 	movi	r2,-81
   2aaf0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2aaf4:	e0bffb17 	ldw	r2,-20(fp)
   2aaf8:	1000060e 	bge	r2,zero,2ab14 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2aafc:	002aa080 	call	2aa08 <alt_get_errno>
   2ab00:	e0fffb17 	ldw	r3,-20(fp)
   2ab04:	00c7c83a 	sub	r3,zero,r3
   2ab08:	10c00015 	stw	r3,0(r2)
    rc = -1;
   2ab0c:	00bfffc4 	movi	r2,-1
   2ab10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2ab14:	e0bffb17 	ldw	r2,-20(fp)
}
   2ab18:	e037883a 	mov	sp,fp
   2ab1c:	dfc00117 	ldw	ra,4(sp)
   2ab20:	df000017 	ldw	fp,0(sp)
   2ab24:	dec00204 	addi	sp,sp,8
   2ab28:	f800283a 	ret

0002ab2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2ab2c:	defffd04 	addi	sp,sp,-12
   2ab30:	dfc00215 	stw	ra,8(sp)
   2ab34:	df000115 	stw	fp,4(sp)
   2ab38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2ab3c:	0009883a 	mov	r4,zero
   2ab40:	002afd00 	call	2afd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2ab44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2ab48:	002b0040 	call	2b004 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2ab4c:	010001f4 	movhi	r4,7
   2ab50:	2132ff04 	addi	r4,r4,-13316
   2ab54:	014001f4 	movhi	r5,7
   2ab58:	2972ff04 	addi	r5,r5,-13316
   2ab5c:	018001f4 	movhi	r6,7
   2ab60:	31b2ff04 	addi	r6,r6,-13316
   2ab64:	002c3ec0 	call	2c3ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2ab68:	002bf700 	call	2bf70 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2ab6c:	010000f4 	movhi	r4,3
   2ab70:	212ff304 	addi	r4,r4,-16436
   2ab74:	002cb300 	call	2cb30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2ab78:	d1201b17 	ldw	r4,-32660(gp)
   2ab7c:	d0e01c17 	ldw	r3,-32656(gp)
   2ab80:	d0a01d17 	ldw	r2,-32652(gp)
   2ab84:	180b883a 	mov	r5,r3
   2ab88:	100d883a 	mov	r6,r2
   2ab8c:	002051c0 	call	2051c <main>
   2ab90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2ab94:	01000044 	movi	r4,1
   2ab98:	002a5f40 	call	2a5f4 <close>
  exit (result);
   2ab9c:	e13fff17 	ldw	r4,-4(fp)
   2aba0:	00211600 	call	21160 <exit>

0002aba4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2aba4:	defffe04 	addi	sp,sp,-8
   2aba8:	df000115 	stw	fp,4(sp)
   2abac:	df000104 	addi	fp,sp,4
   2abb0:	e13fff15 	stw	r4,-4(fp)
}
   2abb4:	e037883a 	mov	sp,fp
   2abb8:	df000017 	ldw	fp,0(sp)
   2abbc:	dec00104 	addi	sp,sp,4
   2abc0:	f800283a 	ret

0002abc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2abc4:	defffe04 	addi	sp,sp,-8
   2abc8:	df000115 	stw	fp,4(sp)
   2abcc:	df000104 	addi	fp,sp,4
   2abd0:	e13fff15 	stw	r4,-4(fp)
}
   2abd4:	e037883a 	mov	sp,fp
   2abd8:	df000017 	ldw	fp,0(sp)
   2abdc:	dec00104 	addi	sp,sp,4
   2abe0:	f800283a 	ret

0002abe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2abe4:	defffe04 	addi	sp,sp,-8
   2abe8:	dfc00115 	stw	ra,4(sp)
   2abec:	df000015 	stw	fp,0(sp)
   2abf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2abf4:	008001f4 	movhi	r2,7
   2abf8:	10b99a04 	addi	r2,r2,-6552
   2abfc:	10800017 	ldw	r2,0(r2)
   2ac00:	10000526 	beq	r2,zero,2ac18 <alt_get_errno+0x34>
   2ac04:	008001f4 	movhi	r2,7
   2ac08:	10b99a04 	addi	r2,r2,-6552
   2ac0c:	10800017 	ldw	r2,0(r2)
   2ac10:	103ee83a 	callr	r2
   2ac14:	00000206 	br	2ac20 <alt_get_errno+0x3c>
   2ac18:	008001f4 	movhi	r2,7
   2ac1c:	10b9aa04 	addi	r2,r2,-6488
}
   2ac20:	e037883a 	mov	sp,fp
   2ac24:	dfc00117 	ldw	ra,4(sp)
   2ac28:	df000017 	ldw	fp,0(sp)
   2ac2c:	dec00204 	addi	sp,sp,8
   2ac30:	f800283a 	ret

0002ac34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2ac34:	defff904 	addi	sp,sp,-28
   2ac38:	dfc00615 	stw	ra,24(sp)
   2ac3c:	df000515 	stw	fp,20(sp)
   2ac40:	df000504 	addi	fp,sp,20
   2ac44:	e13ffd15 	stw	r4,-12(fp)
   2ac48:	e17ffe15 	stw	r5,-8(fp)
   2ac4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ac50:	e0bffd17 	ldw	r2,-12(fp)
   2ac54:	10000716 	blt	r2,zero,2ac74 <read+0x40>
   2ac58:	e13ffd17 	ldw	r4,-12(fp)
   2ac5c:	01400304 	movi	r5,12
   2ac60:	00210b00 	call	210b0 <__mulsi3>
   2ac64:	00c001f4 	movhi	r3,7
   2ac68:	18f51804 	addi	r3,r3,-11168
   2ac6c:	10c5883a 	add	r2,r2,r3
   2ac70:	00000106 	br	2ac78 <read+0x44>
   2ac74:	0005883a 	mov	r2,zero
   2ac78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2ac7c:	e0bffb17 	ldw	r2,-20(fp)
   2ac80:	10002026 	beq	r2,zero,2ad04 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2ac84:	e0bffb17 	ldw	r2,-20(fp)
   2ac88:	10800217 	ldw	r2,8(r2)
   2ac8c:	108000cc 	andi	r2,r2,3
   2ac90:	10800060 	cmpeqi	r2,r2,1
   2ac94:	1000171e 	bne	r2,zero,2acf4 <read+0xc0>
        (fd->dev->read))
   2ac98:	e0bffb17 	ldw	r2,-20(fp)
   2ac9c:	10800017 	ldw	r2,0(r2)
   2aca0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2aca4:	10001326 	beq	r2,zero,2acf4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2aca8:	e0bffb17 	ldw	r2,-20(fp)
   2acac:	10800017 	ldw	r2,0(r2)
   2acb0:	10c00517 	ldw	r3,20(r2)
   2acb4:	e0bfff17 	ldw	r2,-4(fp)
   2acb8:	e13ffb17 	ldw	r4,-20(fp)
   2acbc:	e17ffe17 	ldw	r5,-8(fp)
   2acc0:	100d883a 	mov	r6,r2
   2acc4:	183ee83a 	callr	r3
   2acc8:	e0bffc15 	stw	r2,-16(fp)
   2accc:	e0bffc17 	ldw	r2,-16(fp)
   2acd0:	1000060e 	bge	r2,zero,2acec <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2acd4:	002abe40 	call	2abe4 <alt_get_errno>
   2acd8:	e0fffc17 	ldw	r3,-16(fp)
   2acdc:	00c7c83a 	sub	r3,zero,r3
   2ace0:	10c00015 	stw	r3,0(r2)
          return -1;
   2ace4:	00bfffc4 	movi	r2,-1
   2ace8:	00000a06 	br	2ad14 <read+0xe0>
        }
        return rval;
   2acec:	e0bffc17 	ldw	r2,-16(fp)
   2acf0:	00000806 	br	2ad14 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2acf4:	002abe40 	call	2abe4 <alt_get_errno>
   2acf8:	00c00344 	movi	r3,13
   2acfc:	10c00015 	stw	r3,0(r2)
   2ad00:	00000306 	br	2ad10 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2ad04:	002abe40 	call	2abe4 <alt_get_errno>
   2ad08:	00c01444 	movi	r3,81
   2ad0c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2ad10:	00bfffc4 	movi	r2,-1
}
   2ad14:	e037883a 	mov	sp,fp
   2ad18:	dfc00117 	ldw	ra,4(sp)
   2ad1c:	df000017 	ldw	fp,0(sp)
   2ad20:	dec00204 	addi	sp,sp,8
   2ad24:	f800283a 	ret

0002ad28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2ad28:	defffc04 	addi	sp,sp,-16
   2ad2c:	dfc00315 	stw	ra,12(sp)
   2ad30:	df000215 	stw	fp,8(sp)
   2ad34:	dc000115 	stw	r16,4(sp)
   2ad38:	df000104 	addi	fp,sp,4
   2ad3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2ad40:	e0bfff17 	ldw	r2,-4(fp)
   2ad44:	108000d0 	cmplti	r2,r2,3
   2ad48:	1000111e 	bne	r2,zero,2ad90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2ad4c:	040001f4 	movhi	r16,7
   2ad50:	84351804 	addi	r16,r16,-11168
   2ad54:	e0bfff17 	ldw	r2,-4(fp)
   2ad58:	1009883a 	mov	r4,r2
   2ad5c:	01400304 	movi	r5,12
   2ad60:	00210b00 	call	210b0 <__mulsi3>
   2ad64:	8085883a 	add	r2,r16,r2
   2ad68:	10800204 	addi	r2,r2,8
   2ad6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2ad70:	040001f4 	movhi	r16,7
   2ad74:	84351804 	addi	r16,r16,-11168
   2ad78:	e0bfff17 	ldw	r2,-4(fp)
   2ad7c:	1009883a 	mov	r4,r2
   2ad80:	01400304 	movi	r5,12
   2ad84:	00210b00 	call	210b0 <__mulsi3>
   2ad88:	8085883a 	add	r2,r16,r2
   2ad8c:	10000015 	stw	zero,0(r2)
  }
}
   2ad90:	e037883a 	mov	sp,fp
   2ad94:	dfc00217 	ldw	ra,8(sp)
   2ad98:	df000117 	ldw	fp,4(sp)
   2ad9c:	dc000017 	ldw	r16,0(sp)
   2ada0:	dec00304 	addi	sp,sp,12
   2ada4:	f800283a 	ret

0002ada8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2ada8:	defff904 	addi	sp,sp,-28
   2adac:	df000615 	stw	fp,24(sp)
   2adb0:	df000604 	addi	fp,sp,24
   2adb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2adb8:	0005303a 	rdctl	r2,status
   2adbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2adc0:	e0fffc17 	ldw	r3,-16(fp)
   2adc4:	00bfff84 	movi	r2,-2
   2adc8:	1884703a 	and	r2,r3,r2
   2adcc:	1001703a 	wrctl	status,r2
  
  return context;
   2add0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2add4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2add8:	d0a00b17 	ldw	r2,-32724(gp)
   2addc:	10c000c4 	addi	r3,r2,3
   2ade0:	00bfff04 	movi	r2,-4
   2ade4:	1884703a 	and	r2,r3,r2
   2ade8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2adec:	d0e00b17 	ldw	r3,-32724(gp)
   2adf0:	e0bfff17 	ldw	r2,-4(fp)
   2adf4:	1885883a 	add	r2,r3,r2
   2adf8:	00c00234 	movhi	r3,8
   2adfc:	18e40004 	addi	r3,r3,-28672
   2ae00:	1880062e 	bgeu	r3,r2,2ae1c <sbrk+0x74>
   2ae04:	e0bffa17 	ldw	r2,-24(fp)
   2ae08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ae0c:	e0bffd17 	ldw	r2,-12(fp)
   2ae10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2ae14:	00bfffc4 	movi	r2,-1
   2ae18:	00000b06 	br	2ae48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2ae1c:	d0a00b17 	ldw	r2,-32724(gp)
   2ae20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2ae24:	d0e00b17 	ldw	r3,-32724(gp)
   2ae28:	e0bfff17 	ldw	r2,-4(fp)
   2ae2c:	1885883a 	add	r2,r3,r2
   2ae30:	d0a00b15 	stw	r2,-32724(gp)
   2ae34:	e0bffa17 	ldw	r2,-24(fp)
   2ae38:	e0bffe15 	stw	r2,-8(fp)
   2ae3c:	e0bffe17 	ldw	r2,-8(fp)
   2ae40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2ae44:	e0bffb17 	ldw	r2,-20(fp)
} 
   2ae48:	e037883a 	mov	sp,fp
   2ae4c:	df000017 	ldw	fp,0(sp)
   2ae50:	dec00104 	addi	sp,sp,4
   2ae54:	f800283a 	ret

0002ae58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ae58:	defffe04 	addi	sp,sp,-8
   2ae5c:	dfc00115 	stw	ra,4(sp)
   2ae60:	df000015 	stw	fp,0(sp)
   2ae64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ae68:	008001f4 	movhi	r2,7
   2ae6c:	10b99a04 	addi	r2,r2,-6552
   2ae70:	10800017 	ldw	r2,0(r2)
   2ae74:	10000526 	beq	r2,zero,2ae8c <alt_get_errno+0x34>
   2ae78:	008001f4 	movhi	r2,7
   2ae7c:	10b99a04 	addi	r2,r2,-6552
   2ae80:	10800017 	ldw	r2,0(r2)
   2ae84:	103ee83a 	callr	r2
   2ae88:	00000206 	br	2ae94 <alt_get_errno+0x3c>
   2ae8c:	008001f4 	movhi	r2,7
   2ae90:	10b9aa04 	addi	r2,r2,-6488
}
   2ae94:	e037883a 	mov	sp,fp
   2ae98:	dfc00117 	ldw	ra,4(sp)
   2ae9c:	df000017 	ldw	fp,0(sp)
   2aea0:	dec00204 	addi	sp,sp,8
   2aea4:	f800283a 	ret

0002aea8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2aea8:	defff904 	addi	sp,sp,-28
   2aeac:	dfc00615 	stw	ra,24(sp)
   2aeb0:	df000515 	stw	fp,20(sp)
   2aeb4:	df000504 	addi	fp,sp,20
   2aeb8:	e13ffd15 	stw	r4,-12(fp)
   2aebc:	e17ffe15 	stw	r5,-8(fp)
   2aec0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2aec4:	e0bffd17 	ldw	r2,-12(fp)
   2aec8:	10000716 	blt	r2,zero,2aee8 <write+0x40>
   2aecc:	e13ffd17 	ldw	r4,-12(fp)
   2aed0:	01400304 	movi	r5,12
   2aed4:	00210b00 	call	210b0 <__mulsi3>
   2aed8:	00c001f4 	movhi	r3,7
   2aedc:	18f51804 	addi	r3,r3,-11168
   2aee0:	10c5883a 	add	r2,r2,r3
   2aee4:	00000106 	br	2aeec <write+0x44>
   2aee8:	0005883a 	mov	r2,zero
   2aeec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2aef0:	e0bffb17 	ldw	r2,-20(fp)
   2aef4:	10001f26 	beq	r2,zero,2af74 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2aef8:	e0bffb17 	ldw	r2,-20(fp)
   2aefc:	10800217 	ldw	r2,8(r2)
   2af00:	108000cc 	andi	r2,r2,3
   2af04:	10001726 	beq	r2,zero,2af64 <write+0xbc>
   2af08:	e0bffb17 	ldw	r2,-20(fp)
   2af0c:	10800017 	ldw	r2,0(r2)
   2af10:	10800617 	ldw	r2,24(r2)
   2af14:	10001326 	beq	r2,zero,2af64 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2af18:	e0bffb17 	ldw	r2,-20(fp)
   2af1c:	10800017 	ldw	r2,0(r2)
   2af20:	10c00617 	ldw	r3,24(r2)
   2af24:	e0bfff17 	ldw	r2,-4(fp)
   2af28:	e13ffb17 	ldw	r4,-20(fp)
   2af2c:	e17ffe17 	ldw	r5,-8(fp)
   2af30:	100d883a 	mov	r6,r2
   2af34:	183ee83a 	callr	r3
   2af38:	e0bffc15 	stw	r2,-16(fp)
   2af3c:	e0bffc17 	ldw	r2,-16(fp)
   2af40:	1000060e 	bge	r2,zero,2af5c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2af44:	002ae580 	call	2ae58 <alt_get_errno>
   2af48:	e0fffc17 	ldw	r3,-16(fp)
   2af4c:	00c7c83a 	sub	r3,zero,r3
   2af50:	10c00015 	stw	r3,0(r2)
        return -1;
   2af54:	00bfffc4 	movi	r2,-1
   2af58:	00000a06 	br	2af84 <write+0xdc>
      }
      return rval;
   2af5c:	e0bffc17 	ldw	r2,-16(fp)
   2af60:	00000806 	br	2af84 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2af64:	002ae580 	call	2ae58 <alt_get_errno>
   2af68:	00c00344 	movi	r3,13
   2af6c:	10c00015 	stw	r3,0(r2)
   2af70:	00000306 	br	2af80 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2af74:	002ae580 	call	2ae58 <alt_get_errno>
   2af78:	00c01444 	movi	r3,81
   2af7c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2af80:	00bfffc4 	movi	r2,-1
}
   2af84:	e037883a 	mov	sp,fp
   2af88:	dfc00117 	ldw	ra,4(sp)
   2af8c:	df000017 	ldw	fp,0(sp)
   2af90:	dec00204 	addi	sp,sp,8
   2af94:	f800283a 	ret

0002af98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2af98:	defffd04 	addi	sp,sp,-12
   2af9c:	dfc00215 	stw	ra,8(sp)
   2afa0:	df000115 	stw	fp,4(sp)
   2afa4:	df000104 	addi	fp,sp,4
   2afa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2afac:	e13fff17 	ldw	r4,-4(fp)
   2afb0:	014001f4 	movhi	r5,7
   2afb4:	29799704 	addi	r5,r5,-6564
   2afb8:	002bed00 	call	2bed0 <alt_dev_llist_insert>
}
   2afbc:	e037883a 	mov	sp,fp
   2afc0:	dfc00117 	ldw	ra,4(sp)
   2afc4:	df000017 	ldw	fp,0(sp)
   2afc8:	dec00204 	addi	sp,sp,8
   2afcc:	f800283a 	ret

0002afd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2afd0:	defffd04 	addi	sp,sp,-12
   2afd4:	dfc00215 	stw	ra,8(sp)
   2afd8:	df000115 	stw	fp,4(sp)
   2afdc:	df000104 	addi	fp,sp,4
   2afe0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   2afe4:	002c8980 	call	2c898 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2afe8:	00800044 	movi	r2,1
   2afec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2aff0:	e037883a 	mov	sp,fp
   2aff4:	dfc00117 	ldw	ra,4(sp)
   2aff8:	df000017 	ldw	fp,0(sp)
   2affc:	dec00204 	addi	sp,sp,8
   2b000:	f800283a 	ret

0002b004 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2b004:	defffe04 	addi	sp,sp,-8
   2b008:	dfc00115 	stw	ra,4(sp)
   2b00c:	df000015 	stw	fp,0(sp)
   2b010:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ALT_TIMER_1, alt_timer_1);
   2b014:	008001f4 	movhi	r2,7
   2b018:	10b9ae04 	addi	r2,r2,-6472
   2b01c:	10000015 	stw	zero,0(r2)
   2b020:	008001f4 	movhi	r2,7
   2b024:	10b9af04 	addi	r2,r2,-6468
   2b028:	00c0bef4 	movhi	r3,763
   2b02c:	18fc2004 	addi	r3,r3,-3968
   2b030:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   2b034:	01000134 	movhi	r4,4
   2b038:	21040004 	addi	r4,r4,4096
   2b03c:	000b883a 	mov	r5,zero
   2b040:	01800044 	movi	r6,1
   2b044:	01c0fa04 	movi	r7,1000
   2b048:	002bb5c0 	call	2bb5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   2b04c:	010001f4 	movhi	r4,7
   2b050:	21358204 	addi	r4,r4,-10744
   2b054:	000b883a 	mov	r5,zero
   2b058:	01800404 	movi	r6,16
   2b05c:	002b1e80 	call	2b1e8 <altera_avalon_jtag_uart_init>
   2b060:	010001f4 	movhi	r4,7
   2b064:	21357804 	addi	r4,r4,-10784
   2b068:	002af980 	call	2af98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1, sysid_1);
   2b06c:	0001883a 	nop
}
   2b070:	e037883a 	mov	sp,fp
   2b074:	dfc00117 	ldw	ra,4(sp)
   2b078:	df000017 	ldw	fp,0(sp)
   2b07c:	dec00204 	addi	sp,sp,8
   2b080:	f800283a 	ret

0002b084 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2b084:	defffa04 	addi	sp,sp,-24
   2b088:	dfc00515 	stw	ra,20(sp)
   2b08c:	df000415 	stw	fp,16(sp)
   2b090:	df000404 	addi	fp,sp,16
   2b094:	e13ffd15 	stw	r4,-12(fp)
   2b098:	e17ffe15 	stw	r5,-8(fp)
   2b09c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b0a0:	e0bffd17 	ldw	r2,-12(fp)
   2b0a4:	10800017 	ldw	r2,0(r2)
   2b0a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2b0ac:	e0bffc17 	ldw	r2,-16(fp)
   2b0b0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2b0b4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2b0b8:	10800217 	ldw	r2,8(r2)
   2b0bc:	1809883a 	mov	r4,r3
   2b0c0:	e17ffe17 	ldw	r5,-8(fp)
   2b0c4:	e1bfff17 	ldw	r6,-4(fp)
   2b0c8:	100f883a 	mov	r7,r2
   2b0cc:	002b6ac0 	call	2b6ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2b0d0:	e037883a 	mov	sp,fp
   2b0d4:	dfc00117 	ldw	ra,4(sp)
   2b0d8:	df000017 	ldw	fp,0(sp)
   2b0dc:	dec00204 	addi	sp,sp,8
   2b0e0:	f800283a 	ret

0002b0e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2b0e4:	defffa04 	addi	sp,sp,-24
   2b0e8:	dfc00515 	stw	ra,20(sp)
   2b0ec:	df000415 	stw	fp,16(sp)
   2b0f0:	df000404 	addi	fp,sp,16
   2b0f4:	e13ffd15 	stw	r4,-12(fp)
   2b0f8:	e17ffe15 	stw	r5,-8(fp)
   2b0fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b100:	e0bffd17 	ldw	r2,-12(fp)
   2b104:	10800017 	ldw	r2,0(r2)
   2b108:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2b10c:	e0bffc17 	ldw	r2,-16(fp)
   2b110:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2b114:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2b118:	10800217 	ldw	r2,8(r2)
   2b11c:	1809883a 	mov	r4,r3
   2b120:	e17ffe17 	ldw	r5,-8(fp)
   2b124:	e1bfff17 	ldw	r6,-4(fp)
   2b128:	100f883a 	mov	r7,r2
   2b12c:	002b8c40 	call	2b8c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2b130:	e037883a 	mov	sp,fp
   2b134:	dfc00117 	ldw	ra,4(sp)
   2b138:	df000017 	ldw	fp,0(sp)
   2b13c:	dec00204 	addi	sp,sp,8
   2b140:	f800283a 	ret

0002b144 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2b144:	defffc04 	addi	sp,sp,-16
   2b148:	dfc00315 	stw	ra,12(sp)
   2b14c:	df000215 	stw	fp,8(sp)
   2b150:	df000204 	addi	fp,sp,8
   2b154:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b158:	e0bfff17 	ldw	r2,-4(fp)
   2b15c:	10800017 	ldw	r2,0(r2)
   2b160:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2b164:	e0bffe17 	ldw	r2,-8(fp)
   2b168:	10c00a04 	addi	r3,r2,40
   2b16c:	e0bfff17 	ldw	r2,-4(fp)
   2b170:	10800217 	ldw	r2,8(r2)
   2b174:	1809883a 	mov	r4,r3
   2b178:	100b883a 	mov	r5,r2
   2b17c:	002b5500 	call	2b550 <altera_avalon_jtag_uart_close>
}
   2b180:	e037883a 	mov	sp,fp
   2b184:	dfc00117 	ldw	ra,4(sp)
   2b188:	df000017 	ldw	fp,0(sp)
   2b18c:	dec00204 	addi	sp,sp,8
   2b190:	f800283a 	ret

0002b194 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2b194:	defffa04 	addi	sp,sp,-24
   2b198:	dfc00515 	stw	ra,20(sp)
   2b19c:	df000415 	stw	fp,16(sp)
   2b1a0:	df000404 	addi	fp,sp,16
   2b1a4:	e13ffd15 	stw	r4,-12(fp)
   2b1a8:	e17ffe15 	stw	r5,-8(fp)
   2b1ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2b1b0:	e0bffd17 	ldw	r2,-12(fp)
   2b1b4:	10800017 	ldw	r2,0(r2)
   2b1b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2b1bc:	e0bffc17 	ldw	r2,-16(fp)
   2b1c0:	10800a04 	addi	r2,r2,40
   2b1c4:	1009883a 	mov	r4,r2
   2b1c8:	e17ffe17 	ldw	r5,-8(fp)
   2b1cc:	e1bfff17 	ldw	r6,-4(fp)
   2b1d0:	002b5b80 	call	2b5b8 <altera_avalon_jtag_uart_ioctl>
}
   2b1d4:	e037883a 	mov	sp,fp
   2b1d8:	dfc00117 	ldw	ra,4(sp)
   2b1dc:	df000017 	ldw	fp,0(sp)
   2b1e0:	dec00204 	addi	sp,sp,8
   2b1e4:	f800283a 	ret

0002b1e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2b1e8:	defffa04 	addi	sp,sp,-24
   2b1ec:	dfc00515 	stw	ra,20(sp)
   2b1f0:	df000415 	stw	fp,16(sp)
   2b1f4:	df000404 	addi	fp,sp,16
   2b1f8:	e13ffd15 	stw	r4,-12(fp)
   2b1fc:	e17ffe15 	stw	r5,-8(fp)
   2b200:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b204:	e0bffd17 	ldw	r2,-12(fp)
   2b208:	00c00044 	movi	r3,1
   2b20c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2b210:	e0bffd17 	ldw	r2,-12(fp)
   2b214:	10800017 	ldw	r2,0(r2)
   2b218:	10800104 	addi	r2,r2,4
   2b21c:	e0fffd17 	ldw	r3,-12(fp)
   2b220:	18c00817 	ldw	r3,32(r3)
   2b224:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2b228:	e0fffe17 	ldw	r3,-8(fp)
   2b22c:	e0bfff17 	ldw	r2,-4(fp)
   2b230:	d8000015 	stw	zero,0(sp)
   2b234:	1809883a 	mov	r4,r3
   2b238:	100b883a 	mov	r5,r2
   2b23c:	018000f4 	movhi	r6,3
   2b240:	31acaa04 	addi	r6,r6,-19800
   2b244:	e1fffd17 	ldw	r7,-12(fp)
   2b248:	002c0440 	call	2c044 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2b24c:	e0bffd17 	ldw	r2,-12(fp)
   2b250:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2b254:	e0bffd17 	ldw	r2,-12(fp)
   2b258:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b25c:	008001f4 	movhi	r2,7
   2b260:	10b9b104 	addi	r2,r2,-6460
   2b264:	10800017 	ldw	r2,0(r2)
   2b268:	1809883a 	mov	r4,r3
   2b26c:	100b883a 	mov	r5,r2
   2b270:	018000f4 	movhi	r6,3
   2b274:	31ad2b04 	addi	r6,r6,-19284
   2b278:	e1fffd17 	ldw	r7,-12(fp)
   2b27c:	002bd240 	call	2bd24 <alt_alarm_start>
   2b280:	1000040e 	bge	r2,zero,2b294 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2b284:	e0bffd17 	ldw	r2,-12(fp)
   2b288:	00e00034 	movhi	r3,32768
   2b28c:	18ffffc4 	addi	r3,r3,-1
   2b290:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2b294:	e037883a 	mov	sp,fp
   2b298:	dfc00117 	ldw	ra,4(sp)
   2b29c:	df000017 	ldw	fp,0(sp)
   2b2a0:	dec00204 	addi	sp,sp,8
   2b2a4:	f800283a 	ret

0002b2a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2b2a8:	defff804 	addi	sp,sp,-32
   2b2ac:	df000715 	stw	fp,28(sp)
   2b2b0:	df000704 	addi	fp,sp,28
   2b2b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2b2b8:	e0bfff17 	ldw	r2,-4(fp)
   2b2bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2b2c0:	e0bffb17 	ldw	r2,-20(fp)
   2b2c4:	10800017 	ldw	r2,0(r2)
   2b2c8:	e0bffc15 	stw	r2,-16(fp)
   2b2cc:	00000106 	br	2b2d4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2b2d0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b2d4:	e0bffc17 	ldw	r2,-16(fp)
   2b2d8:	10800104 	addi	r2,r2,4
   2b2dc:	10800037 	ldwio	r2,0(r2)
   2b2e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2b2e4:	e0bffd17 	ldw	r2,-12(fp)
   2b2e8:	1080c00c 	andi	r2,r2,768
   2b2ec:	10006a26 	beq	r2,zero,2b498 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2b2f0:	e0bffd17 	ldw	r2,-12(fp)
   2b2f4:	1080400c 	andi	r2,r2,256
   2b2f8:	10003326 	beq	r2,zero,2b3c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2b2fc:	00800074 	movhi	r2,1
   2b300:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b304:	e0bffb17 	ldw	r2,-20(fp)
   2b308:	10800a17 	ldw	r2,40(r2)
   2b30c:	10800044 	addi	r2,r2,1
   2b310:	1081ffcc 	andi	r2,r2,2047
   2b314:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2b318:	e0bffb17 	ldw	r2,-20(fp)
   2b31c:	10c00b17 	ldw	r3,44(r2)
   2b320:	e0bffe17 	ldw	r2,-8(fp)
   2b324:	18801426 	beq	r3,r2,2b378 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2b328:	e0bffc17 	ldw	r2,-16(fp)
   2b32c:	10800037 	ldwio	r2,0(r2)
   2b330:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2b334:	e0bff917 	ldw	r2,-28(fp)
   2b338:	10a0000c 	andi	r2,r2,32768
   2b33c:	10001026 	beq	r2,zero,2b380 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2b340:	e0bffb17 	ldw	r2,-20(fp)
   2b344:	10800a17 	ldw	r2,40(r2)
   2b348:	e0fff917 	ldw	r3,-28(fp)
   2b34c:	e13ffb17 	ldw	r4,-20(fp)
   2b350:	2085883a 	add	r2,r4,r2
   2b354:	10800e04 	addi	r2,r2,56
   2b358:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b35c:	e0bffb17 	ldw	r2,-20(fp)
   2b360:	10800a17 	ldw	r2,40(r2)
   2b364:	10800044 	addi	r2,r2,1
   2b368:	10c1ffcc 	andi	r3,r2,2047
   2b36c:	e0bffb17 	ldw	r2,-20(fp)
   2b370:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2b374:	003fe306 	br	2b304 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2b378:	0001883a 	nop
   2b37c:	00000106 	br	2b384 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2b380:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2b384:	e0bff917 	ldw	r2,-28(fp)
   2b388:	10bfffec 	andhi	r2,r2,65535
   2b38c:	10000e26 	beq	r2,zero,2b3c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b390:	e0bffb17 	ldw	r2,-20(fp)
   2b394:	10c00817 	ldw	r3,32(r2)
   2b398:	00bfff84 	movi	r2,-2
   2b39c:	1886703a 	and	r3,r3,r2
   2b3a0:	e0bffb17 	ldw	r2,-20(fp)
   2b3a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2b3a8:	e0bffc17 	ldw	r2,-16(fp)
   2b3ac:	10800104 	addi	r2,r2,4
   2b3b0:	e0fffb17 	ldw	r3,-20(fp)
   2b3b4:	18c00817 	ldw	r3,32(r3)
   2b3b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b3bc:	e0bffc17 	ldw	r2,-16(fp)
   2b3c0:	10800104 	addi	r2,r2,4
   2b3c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2b3c8:	e0bffd17 	ldw	r2,-12(fp)
   2b3cc:	1080800c 	andi	r2,r2,512
   2b3d0:	103fbf26 	beq	r2,zero,2b2d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2b3d4:	e0bffd17 	ldw	r2,-12(fp)
   2b3d8:	1004d43a 	srli	r2,r2,16
   2b3dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b3e0:	00001406 	br	2b434 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2b3e4:	e0bffc17 	ldw	r2,-16(fp)
   2b3e8:	e0fffb17 	ldw	r3,-20(fp)
   2b3ec:	18c00d17 	ldw	r3,52(r3)
   2b3f0:	e13ffb17 	ldw	r4,-20(fp)
   2b3f4:	20c7883a 	add	r3,r4,r3
   2b3f8:	18c20e04 	addi	r3,r3,2104
   2b3fc:	18c00003 	ldbu	r3,0(r3)
   2b400:	18c03fcc 	andi	r3,r3,255
   2b404:	18c0201c 	xori	r3,r3,128
   2b408:	18ffe004 	addi	r3,r3,-128
   2b40c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b410:	e0bffb17 	ldw	r2,-20(fp)
   2b414:	10800d17 	ldw	r2,52(r2)
   2b418:	10800044 	addi	r2,r2,1
   2b41c:	10c1ffcc 	andi	r3,r2,2047
   2b420:	e0bffb17 	ldw	r2,-20(fp)
   2b424:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2b428:	e0bffa17 	ldw	r2,-24(fp)
   2b42c:	10bfffc4 	addi	r2,r2,-1
   2b430:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b434:	e0bffa17 	ldw	r2,-24(fp)
   2b438:	10000526 	beq	r2,zero,2b450 <altera_avalon_jtag_uart_irq+0x1a8>
   2b43c:	e0bffb17 	ldw	r2,-20(fp)
   2b440:	10c00d17 	ldw	r3,52(r2)
   2b444:	e0bffb17 	ldw	r2,-20(fp)
   2b448:	10800c17 	ldw	r2,48(r2)
   2b44c:	18bfe51e 	bne	r3,r2,2b3e4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2b450:	e0bffa17 	ldw	r2,-24(fp)
   2b454:	103f9e26 	beq	r2,zero,2b2d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b458:	e0bffb17 	ldw	r2,-20(fp)
   2b45c:	10c00817 	ldw	r3,32(r2)
   2b460:	00bfff44 	movi	r2,-3
   2b464:	1886703a 	and	r3,r3,r2
   2b468:	e0bffb17 	ldw	r2,-20(fp)
   2b46c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b470:	e0bffb17 	ldw	r2,-20(fp)
   2b474:	10800017 	ldw	r2,0(r2)
   2b478:	10800104 	addi	r2,r2,4
   2b47c:	e0fffb17 	ldw	r3,-20(fp)
   2b480:	18c00817 	ldw	r3,32(r3)
   2b484:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b488:	e0bffc17 	ldw	r2,-16(fp)
   2b48c:	10800104 	addi	r2,r2,4
   2b490:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2b494:	003f8e06 	br	2b2d0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2b498:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2b49c:	e037883a 	mov	sp,fp
   2b4a0:	df000017 	ldw	fp,0(sp)
   2b4a4:	dec00104 	addi	sp,sp,4
   2b4a8:	f800283a 	ret

0002b4ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2b4ac:	defffc04 	addi	sp,sp,-16
   2b4b0:	df000315 	stw	fp,12(sp)
   2b4b4:	df000304 	addi	fp,sp,12
   2b4b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2b4bc:	e0bfff17 	ldw	r2,-4(fp)
   2b4c0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2b4c4:	e0bffd17 	ldw	r2,-12(fp)
   2b4c8:	10800017 	ldw	r2,0(r2)
   2b4cc:	10800104 	addi	r2,r2,4
   2b4d0:	10800037 	ldwio	r2,0(r2)
   2b4d4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2b4d8:	e0bffe17 	ldw	r2,-8(fp)
   2b4dc:	1081000c 	andi	r2,r2,1024
   2b4e0:	10000a26 	beq	r2,zero,2b50c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2b4e4:	e0bffd17 	ldw	r2,-12(fp)
   2b4e8:	10800017 	ldw	r2,0(r2)
   2b4ec:	10800104 	addi	r2,r2,4
   2b4f0:	e0fffd17 	ldw	r3,-12(fp)
   2b4f4:	18c00817 	ldw	r3,32(r3)
   2b4f8:	18c10014 	ori	r3,r3,1024
   2b4fc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2b500:	e0bffd17 	ldw	r2,-12(fp)
   2b504:	10000915 	stw	zero,36(r2)
   2b508:	00000a06 	br	2b534 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2b50c:	e0bffd17 	ldw	r2,-12(fp)
   2b510:	10800917 	ldw	r2,36(r2)
   2b514:	00e00034 	movhi	r3,32768
   2b518:	18ffff04 	addi	r3,r3,-4
   2b51c:	18800536 	bltu	r3,r2,2b534 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2b520:	e0bffd17 	ldw	r2,-12(fp)
   2b524:	10800917 	ldw	r2,36(r2)
   2b528:	10c00044 	addi	r3,r2,1
   2b52c:	e0bffd17 	ldw	r2,-12(fp)
   2b530:	10c00915 	stw	r3,36(r2)
   2b534:	008001f4 	movhi	r2,7
   2b538:	10b9b104 	addi	r2,r2,-6460
   2b53c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2b540:	e037883a 	mov	sp,fp
   2b544:	df000017 	ldw	fp,0(sp)
   2b548:	dec00104 	addi	sp,sp,4
   2b54c:	f800283a 	ret

0002b550 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2b550:	defffd04 	addi	sp,sp,-12
   2b554:	df000215 	stw	fp,8(sp)
   2b558:	df000204 	addi	fp,sp,8
   2b55c:	e13ffe15 	stw	r4,-8(fp)
   2b560:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b564:	00000506 	br	2b57c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2b568:	e0bfff17 	ldw	r2,-4(fp)
   2b56c:	1090000c 	andi	r2,r2,16384
   2b570:	10000226 	beq	r2,zero,2b57c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2b574:	00bffd44 	movi	r2,-11
   2b578:	00000b06 	br	2b5a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b57c:	e0bffe17 	ldw	r2,-8(fp)
   2b580:	10c00d17 	ldw	r3,52(r2)
   2b584:	e0bffe17 	ldw	r2,-8(fp)
   2b588:	10800c17 	ldw	r2,48(r2)
   2b58c:	18800526 	beq	r3,r2,2b5a4 <altera_avalon_jtag_uart_close+0x54>
   2b590:	e0bffe17 	ldw	r2,-8(fp)
   2b594:	10c00917 	ldw	r3,36(r2)
   2b598:	e0bffe17 	ldw	r2,-8(fp)
   2b59c:	10800117 	ldw	r2,4(r2)
   2b5a0:	18bff136 	bltu	r3,r2,2b568 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2b5a4:	0005883a 	mov	r2,zero
}
   2b5a8:	e037883a 	mov	sp,fp
   2b5ac:	df000017 	ldw	fp,0(sp)
   2b5b0:	dec00104 	addi	sp,sp,4
   2b5b4:	f800283a 	ret

0002b5b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2b5b8:	defffa04 	addi	sp,sp,-24
   2b5bc:	df000515 	stw	fp,20(sp)
   2b5c0:	df000504 	addi	fp,sp,20
   2b5c4:	e13ffd15 	stw	r4,-12(fp)
   2b5c8:	e17ffe15 	stw	r5,-8(fp)
   2b5cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2b5d0:	00bff9c4 	movi	r2,-25
   2b5d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2b5d8:	e0bffe17 	ldw	r2,-8(fp)
   2b5dc:	10da8060 	cmpeqi	r3,r2,27137
   2b5e0:	1800031e 	bne	r3,zero,2b5f0 <altera_avalon_jtag_uart_ioctl+0x38>
   2b5e4:	109a80a0 	cmpeqi	r2,r2,27138
   2b5e8:	1000181e 	bne	r2,zero,2b64c <altera_avalon_jtag_uart_ioctl+0x94>
   2b5ec:	00002606 	br	2b688 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2b5f0:	e0bffd17 	ldw	r2,-12(fp)
   2b5f4:	10c00117 	ldw	r3,4(r2)
   2b5f8:	00a00034 	movhi	r2,32768
   2b5fc:	10bfffc4 	addi	r2,r2,-1
   2b600:	18802226 	beq	r3,r2,2b68c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   2b604:	e0bfff17 	ldw	r2,-4(fp)
   2b608:	10800017 	ldw	r2,0(r2)
   2b60c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2b610:	e0bffc17 	ldw	r2,-16(fp)
   2b614:	10800090 	cmplti	r2,r2,2
   2b618:	1000061e 	bne	r2,zero,2b634 <altera_avalon_jtag_uart_ioctl+0x7c>
   2b61c:	e0fffc17 	ldw	r3,-16(fp)
   2b620:	00a00034 	movhi	r2,32768
   2b624:	10bfffc4 	addi	r2,r2,-1
   2b628:	18800226 	beq	r3,r2,2b634 <altera_avalon_jtag_uart_ioctl+0x7c>
   2b62c:	e0bffc17 	ldw	r2,-16(fp)
   2b630:	00000206 	br	2b63c <altera_avalon_jtag_uart_ioctl+0x84>
   2b634:	00a00034 	movhi	r2,32768
   2b638:	10bfff84 	addi	r2,r2,-2
   2b63c:	e0fffd17 	ldw	r3,-12(fp)
   2b640:	18800115 	stw	r2,4(r3)
      rc = 0;
   2b644:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2b648:	00001006 	br	2b68c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2b64c:	e0bffd17 	ldw	r2,-12(fp)
   2b650:	10c00117 	ldw	r3,4(r2)
   2b654:	00a00034 	movhi	r2,32768
   2b658:	10bfffc4 	addi	r2,r2,-1
   2b65c:	18800d26 	beq	r3,r2,2b694 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2b660:	e0bffd17 	ldw	r2,-12(fp)
   2b664:	10c00917 	ldw	r3,36(r2)
   2b668:	e0bffd17 	ldw	r2,-12(fp)
   2b66c:	10800117 	ldw	r2,4(r2)
   2b670:	1885803a 	cmpltu	r2,r3,r2
   2b674:	10c03fcc 	andi	r3,r2,255
   2b678:	e0bfff17 	ldw	r2,-4(fp)
   2b67c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2b680:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2b684:	00000306 	br	2b694 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   2b688:	00000306 	br	2b698 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2b68c:	0001883a 	nop
   2b690:	00000106 	br	2b698 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2b694:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2b698:	e0bffb17 	ldw	r2,-20(fp)
}
   2b69c:	e037883a 	mov	sp,fp
   2b6a0:	df000017 	ldw	fp,0(sp)
   2b6a4:	dec00104 	addi	sp,sp,4
   2b6a8:	f800283a 	ret

0002b6ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2b6ac:	defff304 	addi	sp,sp,-52
   2b6b0:	dfc00c15 	stw	ra,48(sp)
   2b6b4:	df000b15 	stw	fp,44(sp)
   2b6b8:	df000b04 	addi	fp,sp,44
   2b6bc:	e13ffc15 	stw	r4,-16(fp)
   2b6c0:	e17ffd15 	stw	r5,-12(fp)
   2b6c4:	e1bffe15 	stw	r6,-8(fp)
   2b6c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2b6cc:	e0bffd17 	ldw	r2,-12(fp)
   2b6d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b6d4:	00004706 	br	2b7f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2b6d8:	e0bffc17 	ldw	r2,-16(fp)
   2b6dc:	10800a17 	ldw	r2,40(r2)
   2b6e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2b6e4:	e0bffc17 	ldw	r2,-16(fp)
   2b6e8:	10800b17 	ldw	r2,44(r2)
   2b6ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2b6f0:	e0fff717 	ldw	r3,-36(fp)
   2b6f4:	e0bff817 	ldw	r2,-32(fp)
   2b6f8:	18800536 	bltu	r3,r2,2b710 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2b6fc:	e0fff717 	ldw	r3,-36(fp)
   2b700:	e0bff817 	ldw	r2,-32(fp)
   2b704:	1885c83a 	sub	r2,r3,r2
   2b708:	e0bff615 	stw	r2,-40(fp)
   2b70c:	00000406 	br	2b720 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2b710:	00c20004 	movi	r3,2048
   2b714:	e0bff817 	ldw	r2,-32(fp)
   2b718:	1885c83a 	sub	r2,r3,r2
   2b71c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b720:	e0bff617 	ldw	r2,-40(fp)
   2b724:	10001e26 	beq	r2,zero,2b7a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2b728:	e0fffe17 	ldw	r3,-8(fp)
   2b72c:	e0bff617 	ldw	r2,-40(fp)
   2b730:	1880022e 	bgeu	r3,r2,2b73c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2b734:	e0bffe17 	ldw	r2,-8(fp)
   2b738:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2b73c:	e0bff817 	ldw	r2,-32(fp)
   2b740:	10800e04 	addi	r2,r2,56
   2b744:	e0fffc17 	ldw	r3,-16(fp)
   2b748:	1885883a 	add	r2,r3,r2
   2b74c:	e13ff517 	ldw	r4,-44(fp)
   2b750:	100b883a 	mov	r5,r2
   2b754:	e1bff617 	ldw	r6,-40(fp)
   2b758:	00267b80 	call	267b8 <memcpy>
      ptr   += n;
   2b75c:	e0fff517 	ldw	r3,-44(fp)
   2b760:	e0bff617 	ldw	r2,-40(fp)
   2b764:	1885883a 	add	r2,r3,r2
   2b768:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2b76c:	e0fffe17 	ldw	r3,-8(fp)
   2b770:	e0bff617 	ldw	r2,-40(fp)
   2b774:	1885c83a 	sub	r2,r3,r2
   2b778:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b77c:	e0fff817 	ldw	r3,-32(fp)
   2b780:	e0bff617 	ldw	r2,-40(fp)
   2b784:	1885883a 	add	r2,r3,r2
   2b788:	10c1ffcc 	andi	r3,r2,2047
   2b78c:	e0bffc17 	ldw	r2,-16(fp)
   2b790:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2b794:	e0bffe17 	ldw	r2,-8(fp)
   2b798:	00bfcf16 	blt	zero,r2,2b6d8 <altera_avalon_jtag_uart_read+0x2c>
   2b79c:	00000106 	br	2b7a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2b7a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2b7a4:	e0fff517 	ldw	r3,-44(fp)
   2b7a8:	e0bffd17 	ldw	r2,-12(fp)
   2b7ac:	1880141e 	bne	r3,r2,2b800 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2b7b0:	e0bfff17 	ldw	r2,-4(fp)
   2b7b4:	1090000c 	andi	r2,r2,16384
   2b7b8:	1000131e 	bne	r2,zero,2b808 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2b7bc:	0001883a 	nop
   2b7c0:	e0bffc17 	ldw	r2,-16(fp)
   2b7c4:	10c00a17 	ldw	r3,40(r2)
   2b7c8:	e0bff717 	ldw	r2,-36(fp)
   2b7cc:	1880051e 	bne	r3,r2,2b7e4 <altera_avalon_jtag_uart_read+0x138>
   2b7d0:	e0bffc17 	ldw	r2,-16(fp)
   2b7d4:	10c00917 	ldw	r3,36(r2)
   2b7d8:	e0bffc17 	ldw	r2,-16(fp)
   2b7dc:	10800117 	ldw	r2,4(r2)
   2b7e0:	18bff736 	bltu	r3,r2,2b7c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2b7e4:	e0bffc17 	ldw	r2,-16(fp)
   2b7e8:	10c00a17 	ldw	r3,40(r2)
   2b7ec:	e0bff717 	ldw	r2,-36(fp)
   2b7f0:	18800726 	beq	r3,r2,2b810 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b7f4:	e0bffe17 	ldw	r2,-8(fp)
   2b7f8:	00bfb716 	blt	zero,r2,2b6d8 <altera_avalon_jtag_uart_read+0x2c>
   2b7fc:	00000506 	br	2b814 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2b800:	0001883a 	nop
   2b804:	00000306 	br	2b814 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2b808:	0001883a 	nop
   2b80c:	00000106 	br	2b814 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2b810:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2b814:	e0fff517 	ldw	r3,-44(fp)
   2b818:	e0bffd17 	ldw	r2,-12(fp)
   2b81c:	18801726 	beq	r3,r2,2b87c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b820:	0005303a 	rdctl	r2,status
   2b824:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b828:	e0fffa17 	ldw	r3,-24(fp)
   2b82c:	00bfff84 	movi	r2,-2
   2b830:	1884703a 	and	r2,r3,r2
   2b834:	1001703a 	wrctl	status,r2
  
  return context;
   2b838:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2b83c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b840:	e0bffc17 	ldw	r2,-16(fp)
   2b844:	10800817 	ldw	r2,32(r2)
   2b848:	10c00054 	ori	r3,r2,1
   2b84c:	e0bffc17 	ldw	r2,-16(fp)
   2b850:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b854:	e0bffc17 	ldw	r2,-16(fp)
   2b858:	10800017 	ldw	r2,0(r2)
   2b85c:	10800104 	addi	r2,r2,4
   2b860:	e0fffc17 	ldw	r3,-16(fp)
   2b864:	18c00817 	ldw	r3,32(r3)
   2b868:	10c00035 	stwio	r3,0(r2)
   2b86c:	e0bff917 	ldw	r2,-28(fp)
   2b870:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b874:	e0bffb17 	ldw	r2,-20(fp)
   2b878:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2b87c:	e0fff517 	ldw	r3,-44(fp)
   2b880:	e0bffd17 	ldw	r2,-12(fp)
   2b884:	18800426 	beq	r3,r2,2b898 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   2b888:	e0fff517 	ldw	r3,-44(fp)
   2b88c:	e0bffd17 	ldw	r2,-12(fp)
   2b890:	1885c83a 	sub	r2,r3,r2
   2b894:	00000606 	br	2b8b0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   2b898:	e0bfff17 	ldw	r2,-4(fp)
   2b89c:	1090000c 	andi	r2,r2,16384
   2b8a0:	10000226 	beq	r2,zero,2b8ac <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   2b8a4:	00bffd44 	movi	r2,-11
   2b8a8:	00000106 	br	2b8b0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   2b8ac:	00bffec4 	movi	r2,-5
}
   2b8b0:	e037883a 	mov	sp,fp
   2b8b4:	dfc00117 	ldw	ra,4(sp)
   2b8b8:	df000017 	ldw	fp,0(sp)
   2b8bc:	dec00204 	addi	sp,sp,8
   2b8c0:	f800283a 	ret

0002b8c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2b8c4:	defff304 	addi	sp,sp,-52
   2b8c8:	dfc00c15 	stw	ra,48(sp)
   2b8cc:	df000b15 	stw	fp,44(sp)
   2b8d0:	df000b04 	addi	fp,sp,44
   2b8d4:	e13ffc15 	stw	r4,-16(fp)
   2b8d8:	e17ffd15 	stw	r5,-12(fp)
   2b8dc:	e1bffe15 	stw	r6,-8(fp)
   2b8e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2b8e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2b8e8:	e0bffd17 	ldw	r2,-12(fp)
   2b8ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b8f0:	00003706 	br	2b9d0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2b8f4:	e0bffc17 	ldw	r2,-16(fp)
   2b8f8:	10800c17 	ldw	r2,48(r2)
   2b8fc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2b900:	e0bffc17 	ldw	r2,-16(fp)
   2b904:	10800d17 	ldw	r2,52(r2)
   2b908:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2b90c:	e0fff817 	ldw	r3,-32(fp)
   2b910:	e0bff517 	ldw	r2,-44(fp)
   2b914:	1880062e 	bgeu	r3,r2,2b930 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2b918:	e0fff517 	ldw	r3,-44(fp)
   2b91c:	e0bff817 	ldw	r2,-32(fp)
   2b920:	1885c83a 	sub	r2,r3,r2
   2b924:	10bfffc4 	addi	r2,r2,-1
   2b928:	e0bff615 	stw	r2,-40(fp)
   2b92c:	00000b06 	br	2b95c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2b930:	e0bff517 	ldw	r2,-44(fp)
   2b934:	10000526 	beq	r2,zero,2b94c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2b938:	00c20004 	movi	r3,2048
   2b93c:	e0bff817 	ldw	r2,-32(fp)
   2b940:	1885c83a 	sub	r2,r3,r2
   2b944:	e0bff615 	stw	r2,-40(fp)
   2b948:	00000406 	br	2b95c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2b94c:	00c1ffc4 	movi	r3,2047
   2b950:	e0bff817 	ldw	r2,-32(fp)
   2b954:	1885c83a 	sub	r2,r3,r2
   2b958:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b95c:	e0bff617 	ldw	r2,-40(fp)
   2b960:	10001e26 	beq	r2,zero,2b9dc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2b964:	e0fffe17 	ldw	r3,-8(fp)
   2b968:	e0bff617 	ldw	r2,-40(fp)
   2b96c:	1880022e 	bgeu	r3,r2,2b978 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2b970:	e0bffe17 	ldw	r2,-8(fp)
   2b974:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2b978:	e0bff817 	ldw	r2,-32(fp)
   2b97c:	10820e04 	addi	r2,r2,2104
   2b980:	e0fffc17 	ldw	r3,-16(fp)
   2b984:	1885883a 	add	r2,r3,r2
   2b988:	1009883a 	mov	r4,r2
   2b98c:	e17ffd17 	ldw	r5,-12(fp)
   2b990:	e1bff617 	ldw	r6,-40(fp)
   2b994:	00267b80 	call	267b8 <memcpy>
      ptr   += n;
   2b998:	e0fffd17 	ldw	r3,-12(fp)
   2b99c:	e0bff617 	ldw	r2,-40(fp)
   2b9a0:	1885883a 	add	r2,r3,r2
   2b9a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2b9a8:	e0fffe17 	ldw	r3,-8(fp)
   2b9ac:	e0bff617 	ldw	r2,-40(fp)
   2b9b0:	1885c83a 	sub	r2,r3,r2
   2b9b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b9b8:	e0fff817 	ldw	r3,-32(fp)
   2b9bc:	e0bff617 	ldw	r2,-40(fp)
   2b9c0:	1885883a 	add	r2,r3,r2
   2b9c4:	10c1ffcc 	andi	r3,r2,2047
   2b9c8:	e0bffc17 	ldw	r2,-16(fp)
   2b9cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b9d0:	e0bffe17 	ldw	r2,-8(fp)
   2b9d4:	00bfc716 	blt	zero,r2,2b8f4 <altera_avalon_jtag_uart_write+0x30>
   2b9d8:	00000106 	br	2b9e0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2b9dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b9e0:	0005303a 	rdctl	r2,status
   2b9e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b9e8:	e0fffa17 	ldw	r3,-24(fp)
   2b9ec:	00bfff84 	movi	r2,-2
   2b9f0:	1884703a 	and	r2,r3,r2
   2b9f4:	1001703a 	wrctl	status,r2
  
  return context;
   2b9f8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2b9fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ba00:	e0bffc17 	ldw	r2,-16(fp)
   2ba04:	10800817 	ldw	r2,32(r2)
   2ba08:	10c00094 	ori	r3,r2,2
   2ba0c:	e0bffc17 	ldw	r2,-16(fp)
   2ba10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ba14:	e0bffc17 	ldw	r2,-16(fp)
   2ba18:	10800017 	ldw	r2,0(r2)
   2ba1c:	10800104 	addi	r2,r2,4
   2ba20:	e0fffc17 	ldw	r3,-16(fp)
   2ba24:	18c00817 	ldw	r3,32(r3)
   2ba28:	10c00035 	stwio	r3,0(r2)
   2ba2c:	e0bff917 	ldw	r2,-28(fp)
   2ba30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ba34:	e0bffb17 	ldw	r2,-20(fp)
   2ba38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2ba3c:	e0bffe17 	ldw	r2,-8(fp)
   2ba40:	0080110e 	bge	zero,r2,2ba88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2ba44:	e0bfff17 	ldw	r2,-4(fp)
   2ba48:	1090000c 	andi	r2,r2,16384
   2ba4c:	1000111e 	bne	r2,zero,2ba94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2ba50:	0001883a 	nop
   2ba54:	e0bffc17 	ldw	r2,-16(fp)
   2ba58:	10c00d17 	ldw	r3,52(r2)
   2ba5c:	e0bff517 	ldw	r2,-44(fp)
   2ba60:	1880051e 	bne	r3,r2,2ba78 <altera_avalon_jtag_uart_write+0x1b4>
   2ba64:	e0bffc17 	ldw	r2,-16(fp)
   2ba68:	10c00917 	ldw	r3,36(r2)
   2ba6c:	e0bffc17 	ldw	r2,-16(fp)
   2ba70:	10800117 	ldw	r2,4(r2)
   2ba74:	18bff736 	bltu	r3,r2,2ba54 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2ba78:	e0bffc17 	ldw	r2,-16(fp)
   2ba7c:	10c00d17 	ldw	r3,52(r2)
   2ba80:	e0bff517 	ldw	r2,-44(fp)
   2ba84:	18800526 	beq	r3,r2,2ba9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2ba88:	e0bffe17 	ldw	r2,-8(fp)
   2ba8c:	00bfd016 	blt	zero,r2,2b9d0 <altera_avalon_jtag_uart_write+0x10c>
   2ba90:	00000306 	br	2baa0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2ba94:	0001883a 	nop
   2ba98:	00000106 	br	2baa0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   2ba9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2baa0:	e0fffd17 	ldw	r3,-12(fp)
   2baa4:	e0bff717 	ldw	r2,-36(fp)
   2baa8:	18800426 	beq	r3,r2,2babc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2baac:	e0fffd17 	ldw	r3,-12(fp)
   2bab0:	e0bff717 	ldw	r2,-36(fp)
   2bab4:	1885c83a 	sub	r2,r3,r2
   2bab8:	00000606 	br	2bad4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2babc:	e0bfff17 	ldw	r2,-4(fp)
   2bac0:	1090000c 	andi	r2,r2,16384
   2bac4:	10000226 	beq	r2,zero,2bad0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2bac8:	00bffd44 	movi	r2,-11
   2bacc:	00000106 	br	2bad4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2bad0:	00bffec4 	movi	r2,-5
}
   2bad4:	e037883a 	mov	sp,fp
   2bad8:	dfc00117 	ldw	ra,4(sp)
   2badc:	df000017 	ldw	fp,0(sp)
   2bae0:	dec00204 	addi	sp,sp,8
   2bae4:	f800283a 	ret

0002bae8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2bae8:	defffa04 	addi	sp,sp,-24
   2baec:	dfc00515 	stw	ra,20(sp)
   2baf0:	df000415 	stw	fp,16(sp)
   2baf4:	df000404 	addi	fp,sp,16
   2baf8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2bafc:	0007883a 	mov	r3,zero
   2bb00:	e0bfff17 	ldw	r2,-4(fp)
   2bb04:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2bb08:	e0bfff17 	ldw	r2,-4(fp)
   2bb0c:	10800104 	addi	r2,r2,4
   2bb10:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bb14:	0005303a 	rdctl	r2,status
   2bb18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bb1c:	e0fffd17 	ldw	r3,-12(fp)
   2bb20:	00bfff84 	movi	r2,-2
   2bb24:	1884703a 	and	r2,r3,r2
   2bb28:	1001703a 	wrctl	status,r2
  
  return context;
   2bb2c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2bb30:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2bb34:	002c7940 	call	2c794 <alt_tick>
   2bb38:	e0bffc17 	ldw	r2,-16(fp)
   2bb3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bb40:	e0bffe17 	ldw	r2,-8(fp)
   2bb44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2bb48:	e037883a 	mov	sp,fp
   2bb4c:	dfc00117 	ldw	ra,4(sp)
   2bb50:	df000017 	ldw	fp,0(sp)
   2bb54:	dec00204 	addi	sp,sp,8
   2bb58:	f800283a 	ret

0002bb5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2bb5c:	defff804 	addi	sp,sp,-32
   2bb60:	dfc00715 	stw	ra,28(sp)
   2bb64:	df000615 	stw	fp,24(sp)
   2bb68:	df000604 	addi	fp,sp,24
   2bb6c:	e13ffc15 	stw	r4,-16(fp)
   2bb70:	e17ffd15 	stw	r5,-12(fp)
   2bb74:	e1bffe15 	stw	r6,-8(fp)
   2bb78:	e1ffff15 	stw	r7,-4(fp)
   2bb7c:	e0bfff17 	ldw	r2,-4(fp)
   2bb80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2bb84:	008001f4 	movhi	r2,7
   2bb88:	10b9b104 	addi	r2,r2,-6460
   2bb8c:	10800017 	ldw	r2,0(r2)
   2bb90:	1000041e 	bne	r2,zero,2bba4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2bb94:	008001f4 	movhi	r2,7
   2bb98:	10b9b104 	addi	r2,r2,-6460
   2bb9c:	e0fffb17 	ldw	r3,-20(fp)
   2bba0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2bba4:	e0bffc17 	ldw	r2,-16(fp)
   2bba8:	10800104 	addi	r2,r2,4
   2bbac:	00c001c4 	movi	r3,7
   2bbb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2bbb4:	d8000015 	stw	zero,0(sp)
   2bbb8:	e13ffd17 	ldw	r4,-12(fp)
   2bbbc:	e17ffe17 	ldw	r5,-8(fp)
   2bbc0:	018000f4 	movhi	r6,3
   2bbc4:	31aeba04 	addi	r6,r6,-17688
   2bbc8:	e1fffc17 	ldw	r7,-16(fp)
   2bbcc:	002c0440 	call	2c044 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2bbd0:	e037883a 	mov	sp,fp
   2bbd4:	dfc00117 	ldw	ra,4(sp)
   2bbd8:	df000017 	ldw	fp,0(sp)
   2bbdc:	dec00204 	addi	sp,sp,8
   2bbe0:	f800283a 	ret

0002bbe4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   2bbe4:	defffe04 	addi	sp,sp,-8
   2bbe8:	df000115 	stw	fp,4(sp)
   2bbec:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   2bbf0:	008001f4 	movhi	r2,7
   2bbf4:	10b9ae04 	addi	r2,r2,-6472
   2bbf8:	10800017 	ldw	r2,0(r2)
   2bbfc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   2bc00:	008001f4 	movhi	r2,7
   2bc04:	10b9af04 	addi	r2,r2,-6468
   2bc08:	10800017 	ldw	r2,0(r2)
   2bc0c:	1000021e 	bne	r2,zero,2bc18 <alt_timestamp_start+0x34>
  {
    return -1;
   2bc10:	00bfffc4 	movi	r2,-1
   2bc14:	00001106 	br	2bc5c <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   2bc18:	e0bfff17 	ldw	r2,-4(fp)
   2bc1c:	10800104 	addi	r2,r2,4
   2bc20:	00c00204 	movi	r3,8
   2bc24:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   2bc28:	e0bfff17 	ldw	r2,-4(fp)
   2bc2c:	10800204 	addi	r2,r2,8
   2bc30:	00ffffd4 	movui	r3,65535
   2bc34:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   2bc38:	e0bfff17 	ldw	r2,-4(fp)
   2bc3c:	10800304 	addi	r2,r2,12
   2bc40:	00ffffd4 	movui	r3,65535
   2bc44:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   2bc48:	e0bfff17 	ldw	r2,-4(fp)
   2bc4c:	10800104 	addi	r2,r2,4
   2bc50:	00c00104 	movi	r3,4
   2bc54:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   2bc58:	0005883a 	mov	r2,zero
}
   2bc5c:	e037883a 	mov	sp,fp
   2bc60:	df000017 	ldw	fp,0(sp)
   2bc64:	dec00104 	addi	sp,sp,4
   2bc68:	f800283a 	ret

0002bc6c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   2bc6c:	defffc04 	addi	sp,sp,-16
   2bc70:	df000315 	stw	fp,12(sp)
   2bc74:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   2bc78:	008001f4 	movhi	r2,7
   2bc7c:	10b9ae04 	addi	r2,r2,-6472
   2bc80:	10800017 	ldw	r2,0(r2)
   2bc84:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   2bc88:	008001f4 	movhi	r2,7
   2bc8c:	10b9af04 	addi	r2,r2,-6468
   2bc90:	10800017 	ldw	r2,0(r2)
   2bc94:	1000021e 	bne	r2,zero,2bca0 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   2bc98:	00bfffc4 	movi	r2,-1
   2bc9c:	00001306 	br	2bcec <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   2bca0:	e0bffd17 	ldw	r2,-12(fp)
   2bca4:	10800404 	addi	r2,r2,16
   2bca8:	0007883a 	mov	r3,zero
   2bcac:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   2bcb0:	e0bffd17 	ldw	r2,-12(fp)
   2bcb4:	10800404 	addi	r2,r2,16
   2bcb8:	10800037 	ldwio	r2,0(r2)
   2bcbc:	10bfffcc 	andi	r2,r2,65535
   2bcc0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   2bcc4:	e0bffd17 	ldw	r2,-12(fp)
   2bcc8:	10800504 	addi	r2,r2,20
   2bccc:	10800037 	ldwio	r2,0(r2)
   2bcd0:	10bfffcc 	andi	r2,r2,65535
   2bcd4:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   2bcd8:	e0bfff17 	ldw	r2,-4(fp)
   2bcdc:	1006943a 	slli	r3,r2,16
   2bce0:	e0bffe17 	ldw	r2,-8(fp)
   2bce4:	1884b03a 	or	r2,r3,r2
   2bce8:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   2bcec:	e037883a 	mov	sp,fp
   2bcf0:	df000017 	ldw	fp,0(sp)
   2bcf4:	dec00104 	addi	sp,sp,4
   2bcf8:	f800283a 	ret

0002bcfc <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   2bcfc:	deffff04 	addi	sp,sp,-4
   2bd00:	df000015 	stw	fp,0(sp)
   2bd04:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   2bd08:	008001f4 	movhi	r2,7
   2bd0c:	10b9af04 	addi	r2,r2,-6468
   2bd10:	10800017 	ldw	r2,0(r2)
}
   2bd14:	e037883a 	mov	sp,fp
   2bd18:	df000017 	ldw	fp,0(sp)
   2bd1c:	dec00104 	addi	sp,sp,4
   2bd20:	f800283a 	ret

0002bd24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2bd24:	defff504 	addi	sp,sp,-44
   2bd28:	df000a15 	stw	fp,40(sp)
   2bd2c:	df000a04 	addi	fp,sp,40
   2bd30:	e13ffc15 	stw	r4,-16(fp)
   2bd34:	e17ffd15 	stw	r5,-12(fp)
   2bd38:	e1bffe15 	stw	r6,-8(fp)
   2bd3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2bd40:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2bd44:	008001f4 	movhi	r2,7
   2bd48:	10b9b104 	addi	r2,r2,-6460
   2bd4c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2bd50:	10003f26 	beq	r2,zero,2be50 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2bd54:	e0bffc17 	ldw	r2,-16(fp)
   2bd58:	10003b26 	beq	r2,zero,2be48 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2bd5c:	e0bffc17 	ldw	r2,-16(fp)
   2bd60:	e0fffe17 	ldw	r3,-8(fp)
   2bd64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2bd68:	e0bffc17 	ldw	r2,-16(fp)
   2bd6c:	e0ffff17 	ldw	r3,-4(fp)
   2bd70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bd74:	0005303a 	rdctl	r2,status
   2bd78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bd7c:	e0fff817 	ldw	r3,-32(fp)
   2bd80:	00bfff84 	movi	r2,-2
   2bd84:	1884703a 	and	r2,r3,r2
   2bd88:	1001703a 	wrctl	status,r2
  
  return context;
   2bd8c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2bd90:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2bd94:	008001f4 	movhi	r2,7
   2bd98:	10b9b204 	addi	r2,r2,-6456
   2bd9c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2bda0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2bda4:	e0fffd17 	ldw	r3,-12(fp)
   2bda8:	e0bff617 	ldw	r2,-40(fp)
   2bdac:	1885883a 	add	r2,r3,r2
   2bdb0:	10c00044 	addi	r3,r2,1
   2bdb4:	e0bffc17 	ldw	r2,-16(fp)
   2bdb8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2bdbc:	e0bffc17 	ldw	r2,-16(fp)
   2bdc0:	10c00217 	ldw	r3,8(r2)
   2bdc4:	e0bff617 	ldw	r2,-40(fp)
   2bdc8:	1880042e 	bgeu	r3,r2,2bddc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2bdcc:	e0bffc17 	ldw	r2,-16(fp)
   2bdd0:	00c00044 	movi	r3,1
   2bdd4:	10c00405 	stb	r3,16(r2)
   2bdd8:	00000206 	br	2bde4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2bddc:	e0bffc17 	ldw	r2,-16(fp)
   2bde0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2bde4:	e0bffc17 	ldw	r2,-16(fp)
   2bde8:	00c001f4 	movhi	r3,7
   2bdec:	18f99d04 	addi	r3,r3,-6540
   2bdf0:	e0fff915 	stw	r3,-28(fp)
   2bdf4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2bdf8:	e0bffa17 	ldw	r2,-24(fp)
   2bdfc:	e0fff917 	ldw	r3,-28(fp)
   2be00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2be04:	e0bff917 	ldw	r2,-28(fp)
   2be08:	10c00017 	ldw	r3,0(r2)
   2be0c:	e0bffa17 	ldw	r2,-24(fp)
   2be10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2be14:	e0bff917 	ldw	r2,-28(fp)
   2be18:	10800017 	ldw	r2,0(r2)
   2be1c:	e0fffa17 	ldw	r3,-24(fp)
   2be20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2be24:	e0bff917 	ldw	r2,-28(fp)
   2be28:	e0fffa17 	ldw	r3,-24(fp)
   2be2c:	10c00015 	stw	r3,0(r2)
   2be30:	e0bff717 	ldw	r2,-36(fp)
   2be34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2be38:	e0bffb17 	ldw	r2,-20(fp)
   2be3c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2be40:	0005883a 	mov	r2,zero
   2be44:	00000306 	br	2be54 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2be48:	00bffa84 	movi	r2,-22
   2be4c:	00000106 	br	2be54 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2be50:	00bfde84 	movi	r2,-134
  }
}
   2be54:	e037883a 	mov	sp,fp
   2be58:	df000017 	ldw	fp,0(sp)
   2be5c:	dec00104 	addi	sp,sp,4
   2be60:	f800283a 	ret

0002be64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2be64:	deffff04 	addi	sp,sp,-4
   2be68:	df000015 	stw	fp,0(sp)
   2be6c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2be70:	e037883a 	mov	sp,fp
   2be74:	df000017 	ldw	fp,0(sp)
   2be78:	dec00104 	addi	sp,sp,4
   2be7c:	f800283a 	ret

0002be80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2be80:	defffe04 	addi	sp,sp,-8
   2be84:	dfc00115 	stw	ra,4(sp)
   2be88:	df000015 	stw	fp,0(sp)
   2be8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2be90:	008001f4 	movhi	r2,7
   2be94:	10b99a04 	addi	r2,r2,-6552
   2be98:	10800017 	ldw	r2,0(r2)
   2be9c:	10000526 	beq	r2,zero,2beb4 <alt_get_errno+0x34>
   2bea0:	008001f4 	movhi	r2,7
   2bea4:	10b99a04 	addi	r2,r2,-6552
   2bea8:	10800017 	ldw	r2,0(r2)
   2beac:	103ee83a 	callr	r2
   2beb0:	00000206 	br	2bebc <alt_get_errno+0x3c>
   2beb4:	008001f4 	movhi	r2,7
   2beb8:	10b9aa04 	addi	r2,r2,-6488
}
   2bebc:	e037883a 	mov	sp,fp
   2bec0:	dfc00117 	ldw	ra,4(sp)
   2bec4:	df000017 	ldw	fp,0(sp)
   2bec8:	dec00204 	addi	sp,sp,8
   2becc:	f800283a 	ret

0002bed0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2bed0:	defffa04 	addi	sp,sp,-24
   2bed4:	dfc00515 	stw	ra,20(sp)
   2bed8:	df000415 	stw	fp,16(sp)
   2bedc:	df000404 	addi	fp,sp,16
   2bee0:	e13ffe15 	stw	r4,-8(fp)
   2bee4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2bee8:	e0bffe17 	ldw	r2,-8(fp)
   2beec:	10000326 	beq	r2,zero,2befc <alt_dev_llist_insert+0x2c>
   2bef0:	e0bffe17 	ldw	r2,-8(fp)
   2bef4:	10800217 	ldw	r2,8(r2)
   2bef8:	1000051e 	bne	r2,zero,2bf10 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2befc:	002be800 	call	2be80 <alt_get_errno>
   2bf00:	00c00584 	movi	r3,22
   2bf04:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2bf08:	00bffa84 	movi	r2,-22
   2bf0c:	00001306 	br	2bf5c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2bf10:	e0bffe17 	ldw	r2,-8(fp)
   2bf14:	e0ffff17 	ldw	r3,-4(fp)
   2bf18:	e0fffc15 	stw	r3,-16(fp)
   2bf1c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2bf20:	e0bffd17 	ldw	r2,-12(fp)
   2bf24:	e0fffc17 	ldw	r3,-16(fp)
   2bf28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2bf2c:	e0bffc17 	ldw	r2,-16(fp)
   2bf30:	10c00017 	ldw	r3,0(r2)
   2bf34:	e0bffd17 	ldw	r2,-12(fp)
   2bf38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2bf3c:	e0bffc17 	ldw	r2,-16(fp)
   2bf40:	10800017 	ldw	r2,0(r2)
   2bf44:	e0fffd17 	ldw	r3,-12(fp)
   2bf48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2bf4c:	e0bffc17 	ldw	r2,-16(fp)
   2bf50:	e0fffd17 	ldw	r3,-12(fp)
   2bf54:	10c00015 	stw	r3,0(r2)

  return 0;  
   2bf58:	0005883a 	mov	r2,zero
}
   2bf5c:	e037883a 	mov	sp,fp
   2bf60:	dfc00117 	ldw	ra,4(sp)
   2bf64:	df000017 	ldw	fp,0(sp)
   2bf68:	dec00204 	addi	sp,sp,8
   2bf6c:	f800283a 	ret

0002bf70 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2bf70:	defffd04 	addi	sp,sp,-12
   2bf74:	dfc00215 	stw	ra,8(sp)
   2bf78:	df000115 	stw	fp,4(sp)
   2bf7c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2bf80:	008000f4 	movhi	r2,3
   2bf84:	10b33b04 	addi	r2,r2,-13076
   2bf88:	e0bfff15 	stw	r2,-4(fp)
   2bf8c:	00000606 	br	2bfa8 <_do_ctors+0x38>
        (*ctor) (); 
   2bf90:	e0bfff17 	ldw	r2,-4(fp)
   2bf94:	10800017 	ldw	r2,0(r2)
   2bf98:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2bf9c:	e0bfff17 	ldw	r2,-4(fp)
   2bfa0:	10bfff04 	addi	r2,r2,-4
   2bfa4:	e0bfff15 	stw	r2,-4(fp)
   2bfa8:	e0ffff17 	ldw	r3,-4(fp)
   2bfac:	008000f4 	movhi	r2,3
   2bfb0:	10b33c04 	addi	r2,r2,-13072
   2bfb4:	18bff62e 	bgeu	r3,r2,2bf90 <_do_ctors+0x20>
        (*ctor) (); 
}
   2bfb8:	e037883a 	mov	sp,fp
   2bfbc:	dfc00117 	ldw	ra,4(sp)
   2bfc0:	df000017 	ldw	fp,0(sp)
   2bfc4:	dec00204 	addi	sp,sp,8
   2bfc8:	f800283a 	ret

0002bfcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2bfcc:	defffd04 	addi	sp,sp,-12
   2bfd0:	dfc00215 	stw	ra,8(sp)
   2bfd4:	df000115 	stw	fp,4(sp)
   2bfd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2bfdc:	008000f4 	movhi	r2,3
   2bfe0:	10b33b04 	addi	r2,r2,-13076
   2bfe4:	e0bfff15 	stw	r2,-4(fp)
   2bfe8:	00000606 	br	2c004 <_do_dtors+0x38>
        (*dtor) (); 
   2bfec:	e0bfff17 	ldw	r2,-4(fp)
   2bff0:	10800017 	ldw	r2,0(r2)
   2bff4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2bff8:	e0bfff17 	ldw	r2,-4(fp)
   2bffc:	10bfff04 	addi	r2,r2,-4
   2c000:	e0bfff15 	stw	r2,-4(fp)
   2c004:	e0ffff17 	ldw	r3,-4(fp)
   2c008:	008000f4 	movhi	r2,3
   2c00c:	10b33c04 	addi	r2,r2,-13072
   2c010:	18bff62e 	bgeu	r3,r2,2bfec <_do_dtors+0x20>
        (*dtor) (); 
}
   2c014:	e037883a 	mov	sp,fp
   2c018:	dfc00117 	ldw	ra,4(sp)
   2c01c:	df000017 	ldw	fp,0(sp)
   2c020:	dec00204 	addi	sp,sp,8
   2c024:	f800283a 	ret

0002c028 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2c028:	deffff04 	addi	sp,sp,-4
   2c02c:	df000015 	stw	fp,0(sp)
   2c030:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2c034:	e037883a 	mov	sp,fp
   2c038:	df000017 	ldw	fp,0(sp)
   2c03c:	dec00104 	addi	sp,sp,4
   2c040:	f800283a 	ret

0002c044 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2c044:	defff904 	addi	sp,sp,-28
   2c048:	dfc00615 	stw	ra,24(sp)
   2c04c:	df000515 	stw	fp,20(sp)
   2c050:	df000504 	addi	fp,sp,20
   2c054:	e13ffc15 	stw	r4,-16(fp)
   2c058:	e17ffd15 	stw	r5,-12(fp)
   2c05c:	e1bffe15 	stw	r6,-8(fp)
   2c060:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2c064:	e0800217 	ldw	r2,8(fp)
   2c068:	d8800015 	stw	r2,0(sp)
   2c06c:	e13ffc17 	ldw	r4,-16(fp)
   2c070:	e17ffd17 	ldw	r5,-12(fp)
   2c074:	e1bffe17 	ldw	r6,-8(fp)
   2c078:	e1ffff17 	ldw	r7,-4(fp)
   2c07c:	002c21c0 	call	2c21c <alt_iic_isr_register>
}  
   2c080:	e037883a 	mov	sp,fp
   2c084:	dfc00117 	ldw	ra,4(sp)
   2c088:	df000017 	ldw	fp,0(sp)
   2c08c:	dec00204 	addi	sp,sp,8
   2c090:	f800283a 	ret

0002c094 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2c094:	defff904 	addi	sp,sp,-28
   2c098:	df000615 	stw	fp,24(sp)
   2c09c:	df000604 	addi	fp,sp,24
   2c0a0:	e13ffe15 	stw	r4,-8(fp)
   2c0a4:	e17fff15 	stw	r5,-4(fp)
   2c0a8:	e0bfff17 	ldw	r2,-4(fp)
   2c0ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c0b0:	0005303a 	rdctl	r2,status
   2c0b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c0b8:	e0fffb17 	ldw	r3,-20(fp)
   2c0bc:	00bfff84 	movi	r2,-2
   2c0c0:	1884703a 	and	r2,r3,r2
   2c0c4:	1001703a 	wrctl	status,r2
  
  return context;
   2c0c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2c0cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2c0d0:	e0bffa17 	ldw	r2,-24(fp)
   2c0d4:	00c00044 	movi	r3,1
   2c0d8:	1884983a 	sll	r2,r3,r2
   2c0dc:	1007883a 	mov	r3,r2
   2c0e0:	008001f4 	movhi	r2,7
   2c0e4:	10b9b004 	addi	r2,r2,-6464
   2c0e8:	10800017 	ldw	r2,0(r2)
   2c0ec:	1886b03a 	or	r3,r3,r2
   2c0f0:	008001f4 	movhi	r2,7
   2c0f4:	10b9b004 	addi	r2,r2,-6464
   2c0f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2c0fc:	008001f4 	movhi	r2,7
   2c100:	10b9b004 	addi	r2,r2,-6464
   2c104:	10800017 	ldw	r2,0(r2)
   2c108:	100170fa 	wrctl	ienable,r2
   2c10c:	e0bffc17 	ldw	r2,-16(fp)
   2c110:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c114:	e0bffd17 	ldw	r2,-12(fp)
   2c118:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2c11c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2c120:	e037883a 	mov	sp,fp
   2c124:	df000017 	ldw	fp,0(sp)
   2c128:	dec00104 	addi	sp,sp,4
   2c12c:	f800283a 	ret

0002c130 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2c130:	defff904 	addi	sp,sp,-28
   2c134:	df000615 	stw	fp,24(sp)
   2c138:	df000604 	addi	fp,sp,24
   2c13c:	e13ffe15 	stw	r4,-8(fp)
   2c140:	e17fff15 	stw	r5,-4(fp)
   2c144:	e0bfff17 	ldw	r2,-4(fp)
   2c148:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c14c:	0005303a 	rdctl	r2,status
   2c150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c154:	e0fffb17 	ldw	r3,-20(fp)
   2c158:	00bfff84 	movi	r2,-2
   2c15c:	1884703a 	and	r2,r3,r2
   2c160:	1001703a 	wrctl	status,r2
  
  return context;
   2c164:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2c168:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2c16c:	e0bffa17 	ldw	r2,-24(fp)
   2c170:	00c00044 	movi	r3,1
   2c174:	1884983a 	sll	r2,r3,r2
   2c178:	0084303a 	nor	r2,zero,r2
   2c17c:	1007883a 	mov	r3,r2
   2c180:	008001f4 	movhi	r2,7
   2c184:	10b9b004 	addi	r2,r2,-6464
   2c188:	10800017 	ldw	r2,0(r2)
   2c18c:	1886703a 	and	r3,r3,r2
   2c190:	008001f4 	movhi	r2,7
   2c194:	10b9b004 	addi	r2,r2,-6464
   2c198:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2c19c:	008001f4 	movhi	r2,7
   2c1a0:	10b9b004 	addi	r2,r2,-6464
   2c1a4:	10800017 	ldw	r2,0(r2)
   2c1a8:	100170fa 	wrctl	ienable,r2
   2c1ac:	e0bffc17 	ldw	r2,-16(fp)
   2c1b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c1b4:	e0bffd17 	ldw	r2,-12(fp)
   2c1b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2c1bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2c1c0:	e037883a 	mov	sp,fp
   2c1c4:	df000017 	ldw	fp,0(sp)
   2c1c8:	dec00104 	addi	sp,sp,4
   2c1cc:	f800283a 	ret

0002c1d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2c1d0:	defffc04 	addi	sp,sp,-16
   2c1d4:	df000315 	stw	fp,12(sp)
   2c1d8:	df000304 	addi	fp,sp,12
   2c1dc:	e13ffe15 	stw	r4,-8(fp)
   2c1e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2c1e4:	000530fa 	rdctl	r2,ienable
   2c1e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2c1ec:	e0bfff17 	ldw	r2,-4(fp)
   2c1f0:	00c00044 	movi	r3,1
   2c1f4:	1884983a 	sll	r2,r3,r2
   2c1f8:	1007883a 	mov	r3,r2
   2c1fc:	e0bffd17 	ldw	r2,-12(fp)
   2c200:	1884703a 	and	r2,r3,r2
   2c204:	1004c03a 	cmpne	r2,r2,zero
   2c208:	10803fcc 	andi	r2,r2,255
}
   2c20c:	e037883a 	mov	sp,fp
   2c210:	df000017 	ldw	fp,0(sp)
   2c214:	dec00104 	addi	sp,sp,4
   2c218:	f800283a 	ret

0002c21c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2c21c:	defff504 	addi	sp,sp,-44
   2c220:	dfc00a15 	stw	ra,40(sp)
   2c224:	df000915 	stw	fp,36(sp)
   2c228:	df000904 	addi	fp,sp,36
   2c22c:	e13ffc15 	stw	r4,-16(fp)
   2c230:	e17ffd15 	stw	r5,-12(fp)
   2c234:	e1bffe15 	stw	r6,-8(fp)
   2c238:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2c23c:	00bffa84 	movi	r2,-22
   2c240:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2c244:	e0bffd17 	ldw	r2,-12(fp)
   2c248:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2c24c:	e0bff817 	ldw	r2,-32(fp)
   2c250:	10800808 	cmpgei	r2,r2,32
   2c254:	1000271e 	bne	r2,zero,2c2f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c258:	0005303a 	rdctl	r2,status
   2c25c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c260:	e0fffa17 	ldw	r3,-24(fp)
   2c264:	00bfff84 	movi	r2,-2
   2c268:	1884703a 	and	r2,r3,r2
   2c26c:	1001703a 	wrctl	status,r2
  
  return context;
   2c270:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2c274:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2c278:	00c001f4 	movhi	r3,7
   2c27c:	18f9bd04 	addi	r3,r3,-6412
   2c280:	e0bff817 	ldw	r2,-32(fp)
   2c284:	100490fa 	slli	r2,r2,3
   2c288:	1885883a 	add	r2,r3,r2
   2c28c:	e0fffe17 	ldw	r3,-8(fp)
   2c290:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2c294:	00c001f4 	movhi	r3,7
   2c298:	18f9bd04 	addi	r3,r3,-6412
   2c29c:	e0bff817 	ldw	r2,-32(fp)
   2c2a0:	100490fa 	slli	r2,r2,3
   2c2a4:	1885883a 	add	r2,r3,r2
   2c2a8:	10800104 	addi	r2,r2,4
   2c2ac:	e0ffff17 	ldw	r3,-4(fp)
   2c2b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2c2b4:	e0bffe17 	ldw	r2,-8(fp)
   2c2b8:	10000526 	beq	r2,zero,2c2d0 <alt_iic_isr_register+0xb4>
   2c2bc:	e0bff817 	ldw	r2,-32(fp)
   2c2c0:	e13ffc17 	ldw	r4,-16(fp)
   2c2c4:	100b883a 	mov	r5,r2
   2c2c8:	002c0940 	call	2c094 <alt_ic_irq_enable>
   2c2cc:	00000406 	br	2c2e0 <alt_iic_isr_register+0xc4>
   2c2d0:	e0bff817 	ldw	r2,-32(fp)
   2c2d4:	e13ffc17 	ldw	r4,-16(fp)
   2c2d8:	100b883a 	mov	r5,r2
   2c2dc:	002c1300 	call	2c130 <alt_ic_irq_disable>
   2c2e0:	e0bff715 	stw	r2,-36(fp)
   2c2e4:	e0bff917 	ldw	r2,-28(fp)
   2c2e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c2ec:	e0bffb17 	ldw	r2,-20(fp)
   2c2f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2c2f4:	e0bff717 	ldw	r2,-36(fp)
}
   2c2f8:	e037883a 	mov	sp,fp
   2c2fc:	dfc00117 	ldw	ra,4(sp)
   2c300:	df000017 	ldw	fp,0(sp)
   2c304:	dec00204 	addi	sp,sp,8
   2c308:	f800283a 	ret

0002c30c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2c30c:	defff804 	addi	sp,sp,-32
   2c310:	dfc00715 	stw	ra,28(sp)
   2c314:	df000615 	stw	fp,24(sp)
   2c318:	dc000515 	stw	r16,20(sp)
   2c31c:	df000504 	addi	fp,sp,20
   2c320:	e13ffc15 	stw	r4,-16(fp)
   2c324:	e17ffd15 	stw	r5,-12(fp)
   2c328:	e1bffe15 	stw	r6,-8(fp)
   2c32c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2c330:	e13ffd17 	ldw	r4,-12(fp)
   2c334:	e17ffe17 	ldw	r5,-8(fp)
   2c338:	e1bfff17 	ldw	r6,-4(fp)
   2c33c:	002c5a40 	call	2c5a4 <open>
   2c340:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2c344:	e0bffb17 	ldw	r2,-20(fp)
   2c348:	10002216 	blt	r2,zero,2c3d4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2c34c:	040001f4 	movhi	r16,7
   2c350:	84351804 	addi	r16,r16,-11168
   2c354:	e0bffb17 	ldw	r2,-20(fp)
   2c358:	1009883a 	mov	r4,r2
   2c35c:	01400304 	movi	r5,12
   2c360:	00210b00 	call	210b0 <__mulsi3>
   2c364:	8085883a 	add	r2,r16,r2
   2c368:	10c00017 	ldw	r3,0(r2)
   2c36c:	e0bffc17 	ldw	r2,-16(fp)
   2c370:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2c374:	040001f4 	movhi	r16,7
   2c378:	84351804 	addi	r16,r16,-11168
   2c37c:	e0bffb17 	ldw	r2,-20(fp)
   2c380:	1009883a 	mov	r4,r2
   2c384:	01400304 	movi	r5,12
   2c388:	00210b00 	call	210b0 <__mulsi3>
   2c38c:	8085883a 	add	r2,r16,r2
   2c390:	10800104 	addi	r2,r2,4
   2c394:	10c00017 	ldw	r3,0(r2)
   2c398:	e0bffc17 	ldw	r2,-16(fp)
   2c39c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2c3a0:	040001f4 	movhi	r16,7
   2c3a4:	84351804 	addi	r16,r16,-11168
   2c3a8:	e0bffb17 	ldw	r2,-20(fp)
   2c3ac:	1009883a 	mov	r4,r2
   2c3b0:	01400304 	movi	r5,12
   2c3b4:	00210b00 	call	210b0 <__mulsi3>
   2c3b8:	8085883a 	add	r2,r16,r2
   2c3bc:	10800204 	addi	r2,r2,8
   2c3c0:	10c00017 	ldw	r3,0(r2)
   2c3c4:	e0bffc17 	ldw	r2,-16(fp)
   2c3c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2c3cc:	e13ffb17 	ldw	r4,-20(fp)
   2c3d0:	002ad280 	call	2ad28 <alt_release_fd>
  }
} 
   2c3d4:	e037883a 	mov	sp,fp
   2c3d8:	dfc00217 	ldw	ra,8(sp)
   2c3dc:	df000117 	ldw	fp,4(sp)
   2c3e0:	dc000017 	ldw	r16,0(sp)
   2c3e4:	dec00304 	addi	sp,sp,12
   2c3e8:	f800283a 	ret

0002c3ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2c3ec:	defffb04 	addi	sp,sp,-20
   2c3f0:	dfc00415 	stw	ra,16(sp)
   2c3f4:	df000315 	stw	fp,12(sp)
   2c3f8:	df000304 	addi	fp,sp,12
   2c3fc:	e13ffd15 	stw	r4,-12(fp)
   2c400:	e17ffe15 	stw	r5,-8(fp)
   2c404:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2c408:	010001f4 	movhi	r4,7
   2c40c:	21351b04 	addi	r4,r4,-11156
   2c410:	e17ffd17 	ldw	r5,-12(fp)
   2c414:	01800044 	movi	r6,1
   2c418:	01c07fc4 	movi	r7,511
   2c41c:	002c30c0 	call	2c30c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2c420:	010001f4 	movhi	r4,7
   2c424:	21351804 	addi	r4,r4,-11168
   2c428:	e17ffe17 	ldw	r5,-8(fp)
   2c42c:	000d883a 	mov	r6,zero
   2c430:	01c07fc4 	movi	r7,511
   2c434:	002c30c0 	call	2c30c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2c438:	010001f4 	movhi	r4,7
   2c43c:	21351e04 	addi	r4,r4,-11144
   2c440:	e17fff17 	ldw	r5,-4(fp)
   2c444:	01800044 	movi	r6,1
   2c448:	01c07fc4 	movi	r7,511
   2c44c:	002c30c0 	call	2c30c <alt_open_fd>
}  
   2c450:	e037883a 	mov	sp,fp
   2c454:	dfc00117 	ldw	ra,4(sp)
   2c458:	df000017 	ldw	fp,0(sp)
   2c45c:	dec00204 	addi	sp,sp,8
   2c460:	f800283a 	ret

0002c464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c464:	defffe04 	addi	sp,sp,-8
   2c468:	dfc00115 	stw	ra,4(sp)
   2c46c:	df000015 	stw	fp,0(sp)
   2c470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c474:	008001f4 	movhi	r2,7
   2c478:	10b99a04 	addi	r2,r2,-6552
   2c47c:	10800017 	ldw	r2,0(r2)
   2c480:	10000526 	beq	r2,zero,2c498 <alt_get_errno+0x34>
   2c484:	008001f4 	movhi	r2,7
   2c488:	10b99a04 	addi	r2,r2,-6552
   2c48c:	10800017 	ldw	r2,0(r2)
   2c490:	103ee83a 	callr	r2
   2c494:	00000206 	br	2c4a0 <alt_get_errno+0x3c>
   2c498:	008001f4 	movhi	r2,7
   2c49c:	10b9aa04 	addi	r2,r2,-6488
}
   2c4a0:	e037883a 	mov	sp,fp
   2c4a4:	dfc00117 	ldw	ra,4(sp)
   2c4a8:	df000017 	ldw	fp,0(sp)
   2c4ac:	dec00204 	addi	sp,sp,8
   2c4b0:	f800283a 	ret

0002c4b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2c4b4:	defffb04 	addi	sp,sp,-20
   2c4b8:	dfc00415 	stw	ra,16(sp)
   2c4bc:	df000315 	stw	fp,12(sp)
   2c4c0:	dc000215 	stw	r16,8(sp)
   2c4c4:	df000204 	addi	fp,sp,8
   2c4c8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2c4cc:	e0bfff17 	ldw	r2,-4(fp)
   2c4d0:	10800217 	ldw	r2,8(r2)
   2c4d4:	10d00034 	orhi	r3,r2,16384
   2c4d8:	e0bfff17 	ldw	r2,-4(fp)
   2c4dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c4e0:	e03ffe15 	stw	zero,-8(fp)
   2c4e4:	00002206 	br	2c570 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c4e8:	040001f4 	movhi	r16,7
   2c4ec:	84351804 	addi	r16,r16,-11168
   2c4f0:	e0bffe17 	ldw	r2,-8(fp)
   2c4f4:	1009883a 	mov	r4,r2
   2c4f8:	01400304 	movi	r5,12
   2c4fc:	00210b00 	call	210b0 <__mulsi3>
   2c500:	8085883a 	add	r2,r16,r2
   2c504:	10c00017 	ldw	r3,0(r2)
   2c508:	e0bfff17 	ldw	r2,-4(fp)
   2c50c:	10800017 	ldw	r2,0(r2)
   2c510:	1880141e 	bne	r3,r2,2c564 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2c514:	040001f4 	movhi	r16,7
   2c518:	84351804 	addi	r16,r16,-11168
   2c51c:	e0bffe17 	ldw	r2,-8(fp)
   2c520:	1009883a 	mov	r4,r2
   2c524:	01400304 	movi	r5,12
   2c528:	00210b00 	call	210b0 <__mulsi3>
   2c52c:	8085883a 	add	r2,r16,r2
   2c530:	10800204 	addi	r2,r2,8
   2c534:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c538:	10000a0e 	bge	r2,zero,2c564 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2c53c:	e13ffe17 	ldw	r4,-8(fp)
   2c540:	01400304 	movi	r5,12
   2c544:	00210b00 	call	210b0 <__mulsi3>
   2c548:	00c001f4 	movhi	r3,7
   2c54c:	18f51804 	addi	r3,r3,-11168
   2c550:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2c554:	e0bfff17 	ldw	r2,-4(fp)
   2c558:	18800226 	beq	r3,r2,2c564 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2c55c:	00bffcc4 	movi	r2,-13
   2c560:	00000a06 	br	2c58c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c564:	e0bffe17 	ldw	r2,-8(fp)
   2c568:	10800044 	addi	r2,r2,1
   2c56c:	e0bffe15 	stw	r2,-8(fp)
   2c570:	008001f4 	movhi	r2,7
   2c574:	10b99904 	addi	r2,r2,-6556
   2c578:	10800017 	ldw	r2,0(r2)
   2c57c:	1007883a 	mov	r3,r2
   2c580:	e0bffe17 	ldw	r2,-8(fp)
   2c584:	18bfd82e 	bgeu	r3,r2,2c4e8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2c588:	0005883a 	mov	r2,zero
}
   2c58c:	e037883a 	mov	sp,fp
   2c590:	dfc00217 	ldw	ra,8(sp)
   2c594:	df000117 	ldw	fp,4(sp)
   2c598:	dc000017 	ldw	r16,0(sp)
   2c59c:	dec00304 	addi	sp,sp,12
   2c5a0:	f800283a 	ret

0002c5a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2c5a4:	defff604 	addi	sp,sp,-40
   2c5a8:	dfc00915 	stw	ra,36(sp)
   2c5ac:	df000815 	stw	fp,32(sp)
   2c5b0:	df000804 	addi	fp,sp,32
   2c5b4:	e13ffd15 	stw	r4,-12(fp)
   2c5b8:	e17ffe15 	stw	r5,-8(fp)
   2c5bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2c5c0:	00bfffc4 	movi	r2,-1
   2c5c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2c5c8:	00bffb44 	movi	r2,-19
   2c5cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2c5d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2c5d4:	e13ffd17 	ldw	r4,-12(fp)
   2c5d8:	014001f4 	movhi	r5,7
   2c5dc:	29799704 	addi	r5,r5,-6564
   2c5e0:	002c8b80 	call	2c8b8 <alt_find_dev>
   2c5e4:	e0bff815 	stw	r2,-32(fp)
   2c5e8:	e0bff817 	ldw	r2,-32(fp)
   2c5ec:	1000051e 	bne	r2,zero,2c604 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2c5f0:	e13ffd17 	ldw	r4,-12(fp)
   2c5f4:	002c9480 	call	2c948 <alt_find_file>
   2c5f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2c5fc:	00800044 	movi	r2,1
   2c600:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2c604:	e0bff817 	ldw	r2,-32(fp)
   2c608:	10002a26 	beq	r2,zero,2c6b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2c60c:	e13ff817 	ldw	r4,-32(fp)
   2c610:	002ca5c0 	call	2ca5c <alt_get_fd>
   2c614:	e0bff915 	stw	r2,-28(fp)
   2c618:	e0bff917 	ldw	r2,-28(fp)
   2c61c:	1000030e 	bge	r2,zero,2c62c <open+0x88>
    {
      status = index;
   2c620:	e0bff917 	ldw	r2,-28(fp)
   2c624:	e0bffa15 	stw	r2,-24(fp)
   2c628:	00002406 	br	2c6bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2c62c:	e13ff917 	ldw	r4,-28(fp)
   2c630:	01400304 	movi	r5,12
   2c634:	00210b00 	call	210b0 <__mulsi3>
   2c638:	00c001f4 	movhi	r3,7
   2c63c:	18f51804 	addi	r3,r3,-11168
   2c640:	10c5883a 	add	r2,r2,r3
   2c644:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2c648:	e0fffe17 	ldw	r3,-8(fp)
   2c64c:	00900034 	movhi	r2,16384
   2c650:	10bfffc4 	addi	r2,r2,-1
   2c654:	1886703a 	and	r3,r3,r2
   2c658:	e0bffc17 	ldw	r2,-16(fp)
   2c65c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2c660:	e0bffb17 	ldw	r2,-20(fp)
   2c664:	1000051e 	bne	r2,zero,2c67c <open+0xd8>
   2c668:	e13ffc17 	ldw	r4,-16(fp)
   2c66c:	002c4b40 	call	2c4b4 <alt_file_locked>
   2c670:	e0bffa15 	stw	r2,-24(fp)
   2c674:	e0bffa17 	ldw	r2,-24(fp)
   2c678:	10001016 	blt	r2,zero,2c6bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2c67c:	e0bff817 	ldw	r2,-32(fp)
   2c680:	10800317 	ldw	r2,12(r2)
   2c684:	10000826 	beq	r2,zero,2c6a8 <open+0x104>
   2c688:	e0bff817 	ldw	r2,-32(fp)
   2c68c:	10800317 	ldw	r2,12(r2)
   2c690:	e13ffc17 	ldw	r4,-16(fp)
   2c694:	e17ffd17 	ldw	r5,-12(fp)
   2c698:	e1bffe17 	ldw	r6,-8(fp)
   2c69c:	e1ffff17 	ldw	r7,-4(fp)
   2c6a0:	103ee83a 	callr	r2
   2c6a4:	00000106 	br	2c6ac <open+0x108>
   2c6a8:	0005883a 	mov	r2,zero
   2c6ac:	e0bffa15 	stw	r2,-24(fp)
   2c6b0:	00000206 	br	2c6bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2c6b4:	00bffb44 	movi	r2,-19
   2c6b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2c6bc:	e0bffa17 	ldw	r2,-24(fp)
   2c6c0:	1000080e 	bge	r2,zero,2c6e4 <open+0x140>
  {
    alt_release_fd (index);  
   2c6c4:	e13ff917 	ldw	r4,-28(fp)
   2c6c8:	002ad280 	call	2ad28 <alt_release_fd>
    ALT_ERRNO = -status;
   2c6cc:	002c4640 	call	2c464 <alt_get_errno>
   2c6d0:	e0fffa17 	ldw	r3,-24(fp)
   2c6d4:	00c7c83a 	sub	r3,zero,r3
   2c6d8:	10c00015 	stw	r3,0(r2)
    return -1;
   2c6dc:	00bfffc4 	movi	r2,-1
   2c6e0:	00000106 	br	2c6e8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2c6e4:	e0bff917 	ldw	r2,-28(fp)
}
   2c6e8:	e037883a 	mov	sp,fp
   2c6ec:	dfc00117 	ldw	ra,4(sp)
   2c6f0:	df000017 	ldw	fp,0(sp)
   2c6f4:	dec00204 	addi	sp,sp,8
   2c6f8:	f800283a 	ret

0002c6fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2c6fc:	defffa04 	addi	sp,sp,-24
   2c700:	df000515 	stw	fp,20(sp)
   2c704:	df000504 	addi	fp,sp,20
   2c708:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c70c:	0005303a 	rdctl	r2,status
   2c710:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c714:	e0fffc17 	ldw	r3,-16(fp)
   2c718:	00bfff84 	movi	r2,-2
   2c71c:	1884703a 	and	r2,r3,r2
   2c720:	1001703a 	wrctl	status,r2
  
  return context;
   2c724:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2c728:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2c72c:	e0bfff17 	ldw	r2,-4(fp)
   2c730:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2c734:	e0bffd17 	ldw	r2,-12(fp)
   2c738:	10800017 	ldw	r2,0(r2)
   2c73c:	e0fffd17 	ldw	r3,-12(fp)
   2c740:	18c00117 	ldw	r3,4(r3)
   2c744:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2c748:	e0bffd17 	ldw	r2,-12(fp)
   2c74c:	10800117 	ldw	r2,4(r2)
   2c750:	e0fffd17 	ldw	r3,-12(fp)
   2c754:	18c00017 	ldw	r3,0(r3)
   2c758:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2c75c:	e0bffd17 	ldw	r2,-12(fp)
   2c760:	e0fffd17 	ldw	r3,-12(fp)
   2c764:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2c768:	e0bffd17 	ldw	r2,-12(fp)
   2c76c:	e0fffd17 	ldw	r3,-12(fp)
   2c770:	10c00015 	stw	r3,0(r2)
   2c774:	e0bffb17 	ldw	r2,-20(fp)
   2c778:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c77c:	e0bffe17 	ldw	r2,-8(fp)
   2c780:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2c784:	e037883a 	mov	sp,fp
   2c788:	df000017 	ldw	fp,0(sp)
   2c78c:	dec00104 	addi	sp,sp,4
   2c790:	f800283a 	ret

0002c794 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2c794:	defffb04 	addi	sp,sp,-20
   2c798:	dfc00415 	stw	ra,16(sp)
   2c79c:	df000315 	stw	fp,12(sp)
   2c7a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2c7a4:	d0a00d17 	ldw	r2,-32716(gp)
   2c7a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2c7ac:	d0a02217 	ldw	r2,-32632(gp)
   2c7b0:	10800044 	addi	r2,r2,1
   2c7b4:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c7b8:	00002e06 	br	2c874 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2c7bc:	e0bffd17 	ldw	r2,-12(fp)
   2c7c0:	10800017 	ldw	r2,0(r2)
   2c7c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2c7c8:	e0bffd17 	ldw	r2,-12(fp)
   2c7cc:	10800403 	ldbu	r2,16(r2)
   2c7d0:	10803fcc 	andi	r2,r2,255
   2c7d4:	10000426 	beq	r2,zero,2c7e8 <alt_tick+0x54>
   2c7d8:	d0a02217 	ldw	r2,-32632(gp)
   2c7dc:	1000021e 	bne	r2,zero,2c7e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2c7e0:	e0bffd17 	ldw	r2,-12(fp)
   2c7e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2c7e8:	e0bffd17 	ldw	r2,-12(fp)
   2c7ec:	10800217 	ldw	r2,8(r2)
   2c7f0:	d0e02217 	ldw	r3,-32632(gp)
   2c7f4:	18801d36 	bltu	r3,r2,2c86c <alt_tick+0xd8>
   2c7f8:	e0bffd17 	ldw	r2,-12(fp)
   2c7fc:	10800403 	ldbu	r2,16(r2)
   2c800:	10803fcc 	andi	r2,r2,255
   2c804:	1000191e 	bne	r2,zero,2c86c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2c808:	e0bffd17 	ldw	r2,-12(fp)
   2c80c:	10c00317 	ldw	r3,12(r2)
   2c810:	e0bffd17 	ldw	r2,-12(fp)
   2c814:	10800517 	ldw	r2,20(r2)
   2c818:	1009883a 	mov	r4,r2
   2c81c:	183ee83a 	callr	r3
   2c820:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2c824:	e0bfff17 	ldw	r2,-4(fp)
   2c828:	1000031e 	bne	r2,zero,2c838 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2c82c:	e13ffd17 	ldw	r4,-12(fp)
   2c830:	002c6fc0 	call	2c6fc <alt_alarm_stop>
   2c834:	00000d06 	br	2c86c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2c838:	e0bffd17 	ldw	r2,-12(fp)
   2c83c:	10c00217 	ldw	r3,8(r2)
   2c840:	e0bfff17 	ldw	r2,-4(fp)
   2c844:	1887883a 	add	r3,r3,r2
   2c848:	e0bffd17 	ldw	r2,-12(fp)
   2c84c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2c850:	e0bffd17 	ldw	r2,-12(fp)
   2c854:	10c00217 	ldw	r3,8(r2)
   2c858:	d0a02217 	ldw	r2,-32632(gp)
   2c85c:	1880032e 	bgeu	r3,r2,2c86c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2c860:	e0bffd17 	ldw	r2,-12(fp)
   2c864:	00c00044 	movi	r3,1
   2c868:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2c86c:	e0bffe17 	ldw	r2,-8(fp)
   2c870:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c874:	e0fffd17 	ldw	r3,-12(fp)
   2c878:	d0a00d04 	addi	r2,gp,-32716
   2c87c:	18bfcf1e 	bne	r3,r2,2c7bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2c880:	0001883a 	nop
}
   2c884:	e037883a 	mov	sp,fp
   2c888:	dfc00117 	ldw	ra,4(sp)
   2c88c:	df000017 	ldw	fp,0(sp)
   2c890:	dec00204 	addi	sp,sp,8
   2c894:	f800283a 	ret

0002c898 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2c898:	deffff04 	addi	sp,sp,-4
   2c89c:	df000015 	stw	fp,0(sp)
   2c8a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2c8a4:	000170fa 	wrctl	ienable,zero
}
   2c8a8:	e037883a 	mov	sp,fp
   2c8ac:	df000017 	ldw	fp,0(sp)
   2c8b0:	dec00104 	addi	sp,sp,4
   2c8b4:	f800283a 	ret

0002c8b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2c8b8:	defffa04 	addi	sp,sp,-24
   2c8bc:	dfc00515 	stw	ra,20(sp)
   2c8c0:	df000415 	stw	fp,16(sp)
   2c8c4:	df000404 	addi	fp,sp,16
   2c8c8:	e13ffe15 	stw	r4,-8(fp)
   2c8cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2c8d0:	e0bfff17 	ldw	r2,-4(fp)
   2c8d4:	10800017 	ldw	r2,0(r2)
   2c8d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2c8dc:	e13ffe17 	ldw	r4,-8(fp)
   2c8e0:	00212980 	call	21298 <strlen>
   2c8e4:	10800044 	addi	r2,r2,1
   2c8e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c8ec:	00000d06 	br	2c924 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2c8f0:	e0bffc17 	ldw	r2,-16(fp)
   2c8f4:	10c00217 	ldw	r3,8(r2)
   2c8f8:	e0bffd17 	ldw	r2,-12(fp)
   2c8fc:	1809883a 	mov	r4,r3
   2c900:	e17ffe17 	ldw	r5,-8(fp)
   2c904:	100d883a 	mov	r6,r2
   2c908:	002cb440 	call	2cb44 <memcmp>
   2c90c:	1000021e 	bne	r2,zero,2c918 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2c910:	e0bffc17 	ldw	r2,-16(fp)
   2c914:	00000706 	br	2c934 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2c918:	e0bffc17 	ldw	r2,-16(fp)
   2c91c:	10800017 	ldw	r2,0(r2)
   2c920:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c924:	e0fffc17 	ldw	r3,-16(fp)
   2c928:	e0bfff17 	ldw	r2,-4(fp)
   2c92c:	18bff01e 	bne	r3,r2,2c8f0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2c930:	0005883a 	mov	r2,zero
}
   2c934:	e037883a 	mov	sp,fp
   2c938:	dfc00117 	ldw	ra,4(sp)
   2c93c:	df000017 	ldw	fp,0(sp)
   2c940:	dec00204 	addi	sp,sp,8
   2c944:	f800283a 	ret

0002c948 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2c948:	defffb04 	addi	sp,sp,-20
   2c94c:	dfc00415 	stw	ra,16(sp)
   2c950:	df000315 	stw	fp,12(sp)
   2c954:	df000304 	addi	fp,sp,12
   2c958:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2c95c:	008001f4 	movhi	r2,7
   2c960:	10b99504 	addi	r2,r2,-6572
   2c964:	10800017 	ldw	r2,0(r2)
   2c968:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c96c:	00003106 	br	2ca34 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2c970:	e0bffd17 	ldw	r2,-12(fp)
   2c974:	10800217 	ldw	r2,8(r2)
   2c978:	1009883a 	mov	r4,r2
   2c97c:	00212980 	call	21298 <strlen>
   2c980:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2c984:	e0bffd17 	ldw	r2,-12(fp)
   2c988:	10c00217 	ldw	r3,8(r2)
   2c98c:	e0bffe17 	ldw	r2,-8(fp)
   2c990:	10bfffc4 	addi	r2,r2,-1
   2c994:	1885883a 	add	r2,r3,r2
   2c998:	10800003 	ldbu	r2,0(r2)
   2c99c:	10803fcc 	andi	r2,r2,255
   2c9a0:	1080201c 	xori	r2,r2,128
   2c9a4:	10bfe004 	addi	r2,r2,-128
   2c9a8:	10800bd8 	cmpnei	r2,r2,47
   2c9ac:	1000031e 	bne	r2,zero,2c9bc <alt_find_file+0x74>
    {
      len -= 1;
   2c9b0:	e0bffe17 	ldw	r2,-8(fp)
   2c9b4:	10bfffc4 	addi	r2,r2,-1
   2c9b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c9bc:	e0bffe17 	ldw	r2,-8(fp)
   2c9c0:	e0ffff17 	ldw	r3,-4(fp)
   2c9c4:	1885883a 	add	r2,r3,r2
   2c9c8:	10800003 	ldbu	r2,0(r2)
   2c9cc:	10803fcc 	andi	r2,r2,255
   2c9d0:	1080201c 	xori	r2,r2,128
   2c9d4:	10bfe004 	addi	r2,r2,-128
   2c9d8:	10800be0 	cmpeqi	r2,r2,47
   2c9dc:	1000081e 	bne	r2,zero,2ca00 <alt_find_file+0xb8>
   2c9e0:	e0bffe17 	ldw	r2,-8(fp)
   2c9e4:	e0ffff17 	ldw	r3,-4(fp)
   2c9e8:	1885883a 	add	r2,r3,r2
   2c9ec:	10800003 	ldbu	r2,0(r2)
   2c9f0:	10803fcc 	andi	r2,r2,255
   2c9f4:	1080201c 	xori	r2,r2,128
   2c9f8:	10bfe004 	addi	r2,r2,-128
   2c9fc:	10000a1e 	bne	r2,zero,2ca28 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2ca00:	e0bffd17 	ldw	r2,-12(fp)
   2ca04:	10c00217 	ldw	r3,8(r2)
   2ca08:	e0bffe17 	ldw	r2,-8(fp)
   2ca0c:	1809883a 	mov	r4,r3
   2ca10:	e17fff17 	ldw	r5,-4(fp)
   2ca14:	100d883a 	mov	r6,r2
   2ca18:	002cb440 	call	2cb44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2ca1c:	1000021e 	bne	r2,zero,2ca28 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2ca20:	e0bffd17 	ldw	r2,-12(fp)
   2ca24:	00000806 	br	2ca48 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2ca28:	e0bffd17 	ldw	r2,-12(fp)
   2ca2c:	10800017 	ldw	r2,0(r2)
   2ca30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2ca34:	e0fffd17 	ldw	r3,-12(fp)
   2ca38:	008001f4 	movhi	r2,7
   2ca3c:	10b99504 	addi	r2,r2,-6572
   2ca40:	18bfcb1e 	bne	r3,r2,2c970 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2ca44:	0005883a 	mov	r2,zero
}
   2ca48:	e037883a 	mov	sp,fp
   2ca4c:	dfc00117 	ldw	ra,4(sp)
   2ca50:	df000017 	ldw	fp,0(sp)
   2ca54:	dec00204 	addi	sp,sp,8
   2ca58:	f800283a 	ret

0002ca5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2ca5c:	defffa04 	addi	sp,sp,-24
   2ca60:	dfc00515 	stw	ra,20(sp)
   2ca64:	df000415 	stw	fp,16(sp)
   2ca68:	dc000315 	stw	r16,12(sp)
   2ca6c:	df000304 	addi	fp,sp,12
   2ca70:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2ca74:	00bffa04 	movi	r2,-24
   2ca78:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2ca7c:	e03ffd15 	stw	zero,-12(fp)
   2ca80:	00002106 	br	2cb08 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2ca84:	040001f4 	movhi	r16,7
   2ca88:	84351804 	addi	r16,r16,-11168
   2ca8c:	e0bffd17 	ldw	r2,-12(fp)
   2ca90:	1009883a 	mov	r4,r2
   2ca94:	01400304 	movi	r5,12
   2ca98:	00210b00 	call	210b0 <__mulsi3>
   2ca9c:	8085883a 	add	r2,r16,r2
   2caa0:	10800017 	ldw	r2,0(r2)
   2caa4:	1000151e 	bne	r2,zero,2cafc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2caa8:	040001f4 	movhi	r16,7
   2caac:	84351804 	addi	r16,r16,-11168
   2cab0:	e0bffd17 	ldw	r2,-12(fp)
   2cab4:	1009883a 	mov	r4,r2
   2cab8:	01400304 	movi	r5,12
   2cabc:	00210b00 	call	210b0 <__mulsi3>
   2cac0:	8085883a 	add	r2,r16,r2
   2cac4:	e0ffff17 	ldw	r3,-4(fp)
   2cac8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2cacc:	008001f4 	movhi	r2,7
   2cad0:	10b99904 	addi	r2,r2,-6556
   2cad4:	10c00017 	ldw	r3,0(r2)
   2cad8:	e0bffd17 	ldw	r2,-12(fp)
   2cadc:	1880040e 	bge	r3,r2,2caf0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2cae0:	008001f4 	movhi	r2,7
   2cae4:	10b99904 	addi	r2,r2,-6556
   2cae8:	e0fffd17 	ldw	r3,-12(fp)
   2caec:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2caf0:	e0bffd17 	ldw	r2,-12(fp)
   2caf4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2caf8:	00000606 	br	2cb14 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2cafc:	e0bffd17 	ldw	r2,-12(fp)
   2cb00:	10800044 	addi	r2,r2,1
   2cb04:	e0bffd15 	stw	r2,-12(fp)
   2cb08:	e0bffd17 	ldw	r2,-12(fp)
   2cb0c:	10800810 	cmplti	r2,r2,32
   2cb10:	103fdc1e 	bne	r2,zero,2ca84 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2cb14:	e0bffe17 	ldw	r2,-8(fp)
}
   2cb18:	e037883a 	mov	sp,fp
   2cb1c:	dfc00217 	ldw	ra,8(sp)
   2cb20:	df000117 	ldw	fp,4(sp)
   2cb24:	dc000017 	ldw	r16,0(sp)
   2cb28:	dec00304 	addi	sp,sp,12
   2cb2c:	f800283a 	ret

0002cb30 <atexit>:
   2cb30:	200b883a 	mov	r5,r4
   2cb34:	000d883a 	mov	r6,zero
   2cb38:	0009883a 	mov	r4,zero
   2cb3c:	000f883a 	mov	r7,zero
   2cb40:	002cbc01 	jmpi	2cbc0 <__register_exitproc>

0002cb44 <memcmp>:
   2cb44:	01c000c4 	movi	r7,3
   2cb48:	3980192e 	bgeu	r7,r6,2cbb0 <memcmp+0x6c>
   2cb4c:	2904b03a 	or	r2,r5,r4
   2cb50:	11c4703a 	and	r2,r2,r7
   2cb54:	10000f26 	beq	r2,zero,2cb94 <memcmp+0x50>
   2cb58:	20c00003 	ldbu	r3,0(r4)
   2cb5c:	28800003 	ldbu	r2,0(r5)
   2cb60:	1880151e 	bne	r3,r2,2cbb8 <memcmp+0x74>
   2cb64:	31bfff84 	addi	r6,r6,-2
   2cb68:	01ffffc4 	movi	r7,-1
   2cb6c:	00000406 	br	2cb80 <memcmp+0x3c>
   2cb70:	20c00003 	ldbu	r3,0(r4)
   2cb74:	28800003 	ldbu	r2,0(r5)
   2cb78:	31bfffc4 	addi	r6,r6,-1
   2cb7c:	18800e1e 	bne	r3,r2,2cbb8 <memcmp+0x74>
   2cb80:	21000044 	addi	r4,r4,1
   2cb84:	29400044 	addi	r5,r5,1
   2cb88:	31fff91e 	bne	r6,r7,2cb70 <memcmp+0x2c>
   2cb8c:	0005883a 	mov	r2,zero
   2cb90:	f800283a 	ret
   2cb94:	20c00017 	ldw	r3,0(r4)
   2cb98:	28800017 	ldw	r2,0(r5)
   2cb9c:	1880041e 	bne	r3,r2,2cbb0 <memcmp+0x6c>
   2cba0:	31bfff04 	addi	r6,r6,-4
   2cba4:	21000104 	addi	r4,r4,4
   2cba8:	29400104 	addi	r5,r5,4
   2cbac:	39bff936 	bltu	r7,r6,2cb94 <memcmp+0x50>
   2cbb0:	303fe91e 	bne	r6,zero,2cb58 <memcmp+0x14>
   2cbb4:	003ff506 	br	2cb8c <memcmp+0x48>
   2cbb8:	1885c83a 	sub	r2,r3,r2
   2cbbc:	f800283a 	ret

0002cbc0 <__register_exitproc>:
   2cbc0:	defffa04 	addi	sp,sp,-24
   2cbc4:	008001f4 	movhi	r2,7
   2cbc8:	10b99004 	addi	r2,r2,-6592
   2cbcc:	dc000315 	stw	r16,12(sp)
   2cbd0:	14000017 	ldw	r16,0(r2)
   2cbd4:	dc400415 	stw	r17,16(sp)
   2cbd8:	dfc00515 	stw	ra,20(sp)
   2cbdc:	80805217 	ldw	r2,328(r16)
   2cbe0:	2023883a 	mov	r17,r4
   2cbe4:	10003e26 	beq	r2,zero,2cce0 <__register_exitproc+0x120>
   2cbe8:	10c00117 	ldw	r3,4(r2)
   2cbec:	020007c4 	movi	r8,31
   2cbf0:	40c0180e 	bge	r8,r3,2cc54 <__register_exitproc+0x94>
   2cbf4:	00800034 	movhi	r2,0
   2cbf8:	10800004 	addi	r2,r2,0
   2cbfc:	1000061e 	bne	r2,zero,2cc18 <__register_exitproc+0x58>
   2cc00:	00bfffc4 	movi	r2,-1
   2cc04:	dfc00517 	ldw	ra,20(sp)
   2cc08:	dc400417 	ldw	r17,16(sp)
   2cc0c:	dc000317 	ldw	r16,12(sp)
   2cc10:	dec00604 	addi	sp,sp,24
   2cc14:	f800283a 	ret
   2cc18:	01006404 	movi	r4,400
   2cc1c:	d9400015 	stw	r5,0(sp)
   2cc20:	d9800115 	stw	r6,4(sp)
   2cc24:	d9c00215 	stw	r7,8(sp)
   2cc28:	00000000 	call	0 <__alt_mem_ins_mem_c1-0x20000>
   2cc2c:	d9400017 	ldw	r5,0(sp)
   2cc30:	d9800117 	ldw	r6,4(sp)
   2cc34:	d9c00217 	ldw	r7,8(sp)
   2cc38:	103ff126 	beq	r2,zero,2cc00 <__register_exitproc+0x40>
   2cc3c:	80c05217 	ldw	r3,328(r16)
   2cc40:	10000115 	stw	zero,4(r2)
   2cc44:	10c00015 	stw	r3,0(r2)
   2cc48:	80805215 	stw	r2,328(r16)
   2cc4c:	10006215 	stw	zero,392(r2)
   2cc50:	10006315 	stw	zero,396(r2)
   2cc54:	10c00117 	ldw	r3,4(r2)
   2cc58:	88000d1e 	bne	r17,zero,2cc90 <__register_exitproc+0xd0>
   2cc5c:	19000084 	addi	r4,r3,2
   2cc60:	2109883a 	add	r4,r4,r4
   2cc64:	18c00044 	addi	r3,r3,1
   2cc68:	2109883a 	add	r4,r4,r4
   2cc6c:	1109883a 	add	r4,r2,r4
   2cc70:	10c00115 	stw	r3,4(r2)
   2cc74:	0005883a 	mov	r2,zero
   2cc78:	21400015 	stw	r5,0(r4)
   2cc7c:	dfc00517 	ldw	ra,20(sp)
   2cc80:	dc400417 	ldw	r17,16(sp)
   2cc84:	dc000317 	ldw	r16,12(sp)
   2cc88:	dec00604 	addi	sp,sp,24
   2cc8c:	f800283a 	ret
   2cc90:	02400044 	movi	r9,1
   2cc94:	12806217 	ldw	r10,392(r2)
   2cc98:	48d2983a 	sll	r9,r9,r3
   2cc9c:	19000804 	addi	r4,r3,32
   2cca0:	18d1883a 	add	r8,r3,r3
   2cca4:	2109883a 	add	r4,r4,r4
   2cca8:	4211883a 	add	r8,r8,r8
   2ccac:	2109883a 	add	r4,r4,r4
   2ccb0:	1109883a 	add	r4,r2,r4
   2ccb4:	1211883a 	add	r8,r2,r8
   2ccb8:	5254b03a 	or	r10,r10,r9
   2ccbc:	21c02215 	stw	r7,136(r4)
   2ccc0:	41802215 	stw	r6,136(r8)
   2ccc4:	12806215 	stw	r10,392(r2)
   2ccc8:	01000084 	movi	r4,2
   2cccc:	893fe31e 	bne	r17,r4,2cc5c <__register_exitproc+0x9c>
   2ccd0:	11006317 	ldw	r4,396(r2)
   2ccd4:	2252b03a 	or	r9,r4,r9
   2ccd8:	12406315 	stw	r9,396(r2)
   2ccdc:	003fdf06 	br	2cc5c <__register_exitproc+0x9c>
   2cce0:	008001f4 	movhi	r2,7
   2cce4:	10b9fd04 	addi	r2,r2,-6156
   2cce8:	80805215 	stw	r2,328(r16)
   2ccec:	003fbe06 	br	2cbe8 <__register_exitproc+0x28>

/*
 * 	FIFO queue for shared memory communication between niosII processors
 *
 *  	DATE		: 18-08-2016
 *      AUTHOR	: Isuru Nawinne
 *
 *	Structure of the FIFO:
 *	___________________________________________________________________________
 *	| 	full	| 	empty	| 	count	|	|	|	|	|	|	|	|	|
 *	| 	?		| 	?		| 	?		|	|	|	|	|	|	|	|	|
 *	___________________________________________________________________________
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{

	// Wait if the fifo is full
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<0) != 0)
	{}

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(MEM_BASE,CTRL_BASE,(int)*buffer);
}

void READ_FIFO_1(int *buffer)
{
	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<1) != 0)
	{}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(MEM_BASE,CTRL_BASE);

}

void alt_write_fifo(int data){
	// Wait if the fifo is full
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<0) != 0)
	{}

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(MEM_BASE,CTRL_BASE,(int)data);
}

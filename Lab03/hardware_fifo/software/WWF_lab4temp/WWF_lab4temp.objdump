
WWF_lab4temp.elf:     file format elf32-littlenios2
WWF_lab4temp.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000055b8 memsz 0x000055b8 flags r-x
    LOAD off    0x000065d8 vaddr 0x000255d8 paddr 0x00027020 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a68 vaddr 0x00028a68 paddr 0x00028a68 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053a8  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00025560  00025560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  000255d8  00027020  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  00028a68  00028a68  00008a68  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000968  00000000  00000000  00008048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001786a  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005b5b  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006cba  00000000  00000000  00025d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fe0  00000000  00000000  0002ca30  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021b0  00000000  00000000  0002da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000351f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00037a8a  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00037a8d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00037a91  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00037a92  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00037a93  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00037a97  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00037a9b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00037a9f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00037aaa  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00037ab5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00037ac0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000021  00000000  00000000  00037aca  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000775d9  00000000  00000000  00037aeb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
00025560 l    d  .rodata	00000000 .rodata
000255d8 l    d  .rwdata	00000000 .rwdata
00028a68 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../WWF_lab4temp_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000255d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021d70 l     F .text	00000008 __fp_lock
00021d78 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022d78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022e94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022ec0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00022fc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000230b4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000231a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002337c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027010 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000235f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023730 l     F .text	00000038 alt_dev_reg
00025f88 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023a44 l     F .text	00000204 altera_avalon_jtag_uart_irq
00023c48 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00024284 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000244dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024968 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024ac0 l     F .text	00000050 alt_get_errno
00024b10 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00022c14 g     F .text	00000064 _isatty_r
000232c4 g     F .text	00000078 alt_main
00020234 g     F .text	00000084 _puts_r
00028ac0 g     O .bss	00000100 alt_irq
00022c78 g     F .text	0000006c _lseek_r
00027020 g       *ABS*	00000000 __flash_rwdata_start
00028d50 g       *ABS*	00000000 __alt_heap_start
00022928 g     F .text	0000005c __sseek
00021e14 g     F .text	0000010c __sinit
00021d8c g     F .text	00000078 __sfmoreglue
0002335c g     F .text	00000020 __malloc_unlock
00028a88 g     O .bss	00000004 altera_avalon_timer_ts_freq
000211f8 g     F .text	0000018c memmove
00021e04 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022bac g     F .text	00000068 _fstat_r
00028a74 g     O .bss	00000004 errno
00028a7c g     O .bss	00000004 alt_argv
0002efe8 g       *ABS*	00000000 _gp
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem_c0
00025e08 g     O .rwdata	00000180 alt_fd_list
00024f14 g     F .text	00000090 alt_find_dev
000210b8 g     F .text	00000140 memcpy
00021d80 g     F .text	0000000c _cleanup_r
00024a48 g     F .text	00000078 alt_io_redirect
00025560 g       *ABS*	00000000 __DTOR_END__
000202b8 g     F .text	00000014 puts
00023e48 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00023010 g     F .text	000000a4 isatty
00028a70 g     O .bss	00000004 __malloc_top_pad
00020358 g     F .text	000004e4 __sfvwrite_r
00021980 g     F .text	00000064 _sbrk_r
00022ce4 g     F .text	0000006c _read_r
00027008 g     O .rwdata	00000004 alt_max_fd
00022a5c g     F .text	0000013c _fclose_r
00021d40 g     F .text	00000030 fflush
00028a6c g     O .bss	00000004 __malloc_max_sbrked_mem
000231f0 g     F .text	000000d4 lseek
00026fe8 g     O .rwdata	00000004 _global_impure_ptr
00021384 g     F .text	000005fc _realloc_r
00028d50 g       *ABS*	00000000 __bss_end
00024878 g     F .text	000000f0 alt_iic_isr_register
00024df0 g     F .text	00000104 alt_tick
0002202c g     F .text	00000018 __fp_lock_all
0002482c g     F .text	0000004c alt_ic_irq_enabled
00024d58 g     F .text	00000098 alt_alarm_stop
00028a8c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
00025de0 g     O .rwdata	00000028 alt_dev_null
000244c0 g     F .text	0000001c alt_dcache_flush_all
00027020 g       *ABS*	00000000 __ram_rwdata_end
00027000 g     O .rwdata	00000008 alt_dev_list
00023640 g     F .text	000000f0 write
000255d8 g       *ABS*	00000000 __ram_rodata_end
00022f10 g     F .text	000000b0 fstat
00028d50 g       *ABS*	00000000 end
00023984 g     F .text	000000c0 altera_avalon_jtag_uart_init
00025560 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000242f8 g     F .text	00000088 alt_avalon_timer_sc_init
00024060 g     F .text	00000224 altera_avalon_jtag_uart_write
0002201c g     F .text	00000004 __sfp_lock_acquire
00020fc0 g     F .text	000000f8 memchr
00022198 g     F .text	000002d0 _free_r
00025384 g     F .text	000001a0 __call_exitprocs
00026ff0 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
00028a90 g     O .bss	00000004 _alt_tick_rate
00028a94 g     O .bss	00000004 _alt_nticks
000233cc g     F .text	000000f4 read
0002379c g     F .text	00000084 alt_sys_init
00025254 g     F .text	00000130 __register_exitproc
00023cec g     F .text	00000068 altera_avalon_jtag_uart_close
00022d50 g     F .text	00000028 __mulsi3
000255d8 g       *ABS*	00000000 __ram_rwdata_start
00025560 g       *ABS*	00000000 __ram_rodata_start
00028a98 g     O .bss	00000028 __malloc_current_mallinfo
00023820 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000250b8 g     F .text	000000d4 alt_get_fd
000229f8 g     F .text	00000064 _close_r
000251d8 g     F .text	0000007c memcmp
000238e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00028d50 g       *ABS*	00000000 __alt_stack_base
00023930 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000219e4 g     F .text	00000174 __swsetup_r
00021f20 g     F .text	000000fc __sfp
000259d8 g     O .rwdata	00000408 __malloc_av_
00022028 g     F .text	00000004 __sinit_lock_release
0002284c g     F .text	00000054 __sread
00024fa4 g     F .text	00000114 alt_find_file
0002452c g     F .text	000000a0 alt_dev_llist_insert
0002333c g     F .text	00000020 __malloc_lock
00023540 g     F .text	000000b0 sbrk
00021b58 g     F .text	000001e8 _fflush_r
00028a68 g       *ABS*	00000000 __bss_start
00022770 g     F .text	000000dc memset
000201f4 g     F .text	00000040 main
00028a80 g     O .bss	00000004 alt_envp
00028a68 g     O .bss	00000004 __malloc_max_total_mem
00023880 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022984 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022b98 g     F .text	00000014 fclose
00028bc0 g     O .bss	00000190 _atexit0
0002083c g     F .text	00000784 _malloc_r
0002700c g     O .rwdata	00000004 alt_errno
00022468 g     F .text	000000a8 _fwalk
0002205c g     F .text	0000013c _malloc_trim_r
00025560 g       *ABS*	00000000 __CTOR_END__
00025560 g       *ABS*	00000000 __flash_rodata_start
00025560 g       *ABS*	00000000 __DTOR_LIST__
00023768 g     F .text	00000034 alt_irq_init
000234c0 g     F .text	00000080 alt_release_fd
0002518c g     F .text	00000014 atexit
0002298c g     F .text	0000006c _write_r
00026fec g     O .rwdata	00000004 _impure_ptr
00028a78 g     O .bss	00000004 alt_argc
00028a84 g     O .bss	00000004 altera_avalon_timer_ts_base
00024628 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00022044 g     F .text	00000018 __fp_unlock_all
00026ff8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000246a0 g     F .text	00000050 alt_ic_isr_register
00027020 g       *ABS*	00000000 _edata
00028d50 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
00023d54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002478c g     F .text	000000a0 alt_ic_irq_disable
000228a0 g     F .text	00000088 __swrite
00026ff4 g     O .rwdata	00000004 __malloc_trim_threshold
00024ef4 g     F .text	00000020 altera_nios2_qsys_irq_init
000251a0 g     F .text	00000038 exit
00022510 g     F .text	000000b8 _fwalk_reent
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00022020 g     F .text	00000004 __sfp_lock_release
00025524 g     F .text	0000003c _exit
00024380 g     F .text	00000140 alt_alarm_start
000225c8 g     F .text	000001a8 __smakebuf_r
000202cc g     F .text	0000008c strlen
00024c00 g     F .text	00000158 open
00024684 g     F .text	0000001c alt_icache_flush_all
00027014 g     O .rwdata	00000004 alt_priority_mask
000246f0 g     F .text	0000009c alt_ic_irq_enable
00027018 g     O .rwdata	00000008 alt_alarm_list
000245cc g     F .text	0000005c _do_ctors
00022dc8 g     F .text	000000cc close
00023120 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00022024 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18e2b004 	addi	r3,r3,-30016
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	2122b004 	addi	r4,r4,-30016
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   201c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c4:	d6bbfa14 	ori	gp,gp,61416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201cc:	10a29a14 	ori	r2,r2,35432

    movhi r3, %hi(__bss_end)
   201d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d4:	18e35414 	ori	r3,r3,36176

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	00231200 	call	23120 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	00232c40 	call	232c4 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <main>:
 */

#include <stdio.h>

int main()
{
   201f4:	defffe04 	addi	sp,sp,-8
   201f8:	dfc00115 	stw	ra,4(sp)
   201fc:	df000015 	stw	fp,0(sp)
   20200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II! inside WWF...\n");
   20204:	010000b4 	movhi	r4,2
   20208:	21155804 	addi	r4,r4,21856
   2020c:	00202b80 	call	202b8 <puts>

  printf("Everything's working\n");
   20210:	010000b4 	movhi	r4,2
   20214:	21156104 	addi	r4,r4,21892
   20218:	00202b80 	call	202b8 <puts>


  return 0;
   2021c:	0005883a 	mov	r2,zero
}
   20220:	e037883a 	mov	sp,fp
   20224:	dfc00117 	ldw	ra,4(sp)
   20228:	df000017 	ldw	fp,0(sp)
   2022c:	dec00204 	addi	sp,sp,8
   20230:	f800283a 	ret

00020234 <_puts_r>:
   20234:	defff604 	addi	sp,sp,-40
   20238:	dc400815 	stw	r17,32(sp)
   2023c:	2023883a 	mov	r17,r4
   20240:	2809883a 	mov	r4,r5
   20244:	dc000715 	stw	r16,28(sp)
   20248:	dfc00915 	stw	ra,36(sp)
   2024c:	2821883a 	mov	r16,r5
   20250:	00202cc0 	call	202cc <strlen>
   20254:	10c00044 	addi	r3,r2,1
   20258:	d8800115 	stw	r2,4(sp)
   2025c:	89400217 	ldw	r5,8(r17)
   20260:	008000b4 	movhi	r2,2
   20264:	10956704 	addi	r2,r2,21916
   20268:	d8800215 	stw	r2,8(sp)
   2026c:	00800044 	movi	r2,1
   20270:	d8800315 	stw	r2,12(sp)
   20274:	8809883a 	mov	r4,r17
   20278:	00800084 	movi	r2,2
   2027c:	d9800404 	addi	r6,sp,16
   20280:	dc000015 	stw	r16,0(sp)
   20284:	d8c00615 	stw	r3,24(sp)
   20288:	dec00415 	stw	sp,16(sp)
   2028c:	d8800515 	stw	r2,20(sp)
   20290:	00203580 	call	20358 <__sfvwrite_r>
   20294:	1000061e 	bne	r2,zero,202b0 <_puts_r+0x7c>
   20298:	00800284 	movi	r2,10
   2029c:	dfc00917 	ldw	ra,36(sp)
   202a0:	dc400817 	ldw	r17,32(sp)
   202a4:	dc000717 	ldw	r16,28(sp)
   202a8:	dec00a04 	addi	sp,sp,40
   202ac:	f800283a 	ret
   202b0:	00bfffc4 	movi	r2,-1
   202b4:	003ff906 	br	2029c <_puts_r+0x68>

000202b8 <puts>:
   202b8:	008000b4 	movhi	r2,2
   202bc:	109bfb04 	addi	r2,r2,28652
   202c0:	200b883a 	mov	r5,r4
   202c4:	11000017 	ldw	r4,0(r2)
   202c8:	00202341 	jmpi	20234 <_puts_r>

000202cc <strlen>:
   202cc:	208000cc 	andi	r2,r4,3
   202d0:	10001f1e 	bne	r2,zero,20350 <strlen+0x84>
   202d4:	20800017 	ldw	r2,0(r4)
   202d8:	01ffbff4 	movhi	r7,65279
   202dc:	39ffbfc4 	addi	r7,r7,-257
   202e0:	01a02074 	movhi	r6,32897
   202e4:	31a02004 	addi	r6,r6,-32640
   202e8:	11c7883a 	add	r3,r2,r7
   202ec:	0084303a 	nor	r2,zero,r2
   202f0:	1886703a 	and	r3,r3,r2
   202f4:	1986703a 	and	r3,r3,r6
   202f8:	2005883a 	mov	r2,r4
   202fc:	1800101e 	bne	r3,zero,20340 <strlen+0x74>
   20300:	10800104 	addi	r2,r2,4
   20304:	10c00017 	ldw	r3,0(r2)
   20308:	19cb883a 	add	r5,r3,r7
   2030c:	00c6303a 	nor	r3,zero,r3
   20310:	28c6703a 	and	r3,r5,r3
   20314:	1986703a 	and	r3,r3,r6
   20318:	1800091e 	bne	r3,zero,20340 <strlen+0x74>
   2031c:	10800104 	addi	r2,r2,4
   20320:	10c00017 	ldw	r3,0(r2)
   20324:	19cb883a 	add	r5,r3,r7
   20328:	00c6303a 	nor	r3,zero,r3
   2032c:	28c6703a 	and	r3,r5,r3
   20330:	1986703a 	and	r3,r3,r6
   20334:	183ff226 	beq	r3,zero,20300 <strlen+0x34>
   20338:	00000106 	br	20340 <strlen+0x74>
   2033c:	10800044 	addi	r2,r2,1
   20340:	10c00007 	ldb	r3,0(r2)
   20344:	183ffd1e 	bne	r3,zero,2033c <strlen+0x70>
   20348:	1105c83a 	sub	r2,r2,r4
   2034c:	f800283a 	ret
   20350:	2005883a 	mov	r2,r4
   20354:	003ffa06 	br	20340 <strlen+0x74>

00020358 <__sfvwrite_r>:
   20358:	30800217 	ldw	r2,8(r6)
   2035c:	defff504 	addi	sp,sp,-44
   20360:	dd400615 	stw	r21,24(sp)
   20364:	dd000515 	stw	r20,20(sp)
   20368:	dc000115 	stw	r16,4(sp)
   2036c:	dfc00a15 	stw	ra,40(sp)
   20370:	df000915 	stw	fp,36(sp)
   20374:	ddc00815 	stw	r23,32(sp)
   20378:	dd800715 	stw	r22,28(sp)
   2037c:	dcc00415 	stw	r19,16(sp)
   20380:	dc800315 	stw	r18,12(sp)
   20384:	dc400215 	stw	r17,8(sp)
   20388:	3029883a 	mov	r20,r6
   2038c:	202b883a 	mov	r21,r4
   20390:	2821883a 	mov	r16,r5
   20394:	10002126 	beq	r2,zero,2041c <__sfvwrite_r+0xc4>
   20398:	2880030b 	ldhu	r2,12(r5)
   2039c:	10c0020c 	andi	r3,r2,8
   203a0:	18ffffcc 	andi	r3,r3,65535
   203a4:	18e0001c 	xori	r3,r3,32768
   203a8:	18e00004 	addi	r3,r3,-32768
   203ac:	18002826 	beq	r3,zero,20450 <__sfvwrite_r+0xf8>
   203b0:	28c00417 	ldw	r3,16(r5)
   203b4:	18002626 	beq	r3,zero,20450 <__sfvwrite_r+0xf8>
   203b8:	10c0008c 	andi	r3,r2,2
   203bc:	18ffffcc 	andi	r3,r3,65535
   203c0:	18e0001c 	xori	r3,r3,32768
   203c4:	18e00004 	addi	r3,r3,-32768
   203c8:	a4400017 	ldw	r17,0(r20)
   203cc:	18002b26 	beq	r3,zero,2047c <__sfvwrite_r+0x124>
   203d0:	0027883a 	mov	r19,zero
   203d4:	0025883a 	mov	r18,zero
   203d8:	05810004 	movi	r22,1024
   203dc:	980d883a 	mov	r6,r19
   203e0:	a809883a 	mov	r4,r21
   203e4:	90004f26 	beq	r18,zero,20524 <__sfvwrite_r+0x1cc>
   203e8:	900f883a 	mov	r7,r18
   203ec:	81400717 	ldw	r5,28(r16)
   203f0:	b480012e 	bgeu	r22,r18,203f8 <__sfvwrite_r+0xa0>
   203f4:	01c10004 	movi	r7,1024
   203f8:	80800917 	ldw	r2,36(r16)
   203fc:	103ee83a 	callr	r2
   20400:	0080540e 	bge	zero,r2,20554 <__sfvwrite_r+0x1fc>
   20404:	a0c00217 	ldw	r3,8(r20)
   20408:	98a7883a 	add	r19,r19,r2
   2040c:	90a5c83a 	sub	r18,r18,r2
   20410:	1885c83a 	sub	r2,r3,r2
   20414:	a0800215 	stw	r2,8(r20)
   20418:	103ff01e 	bne	r2,zero,203dc <__sfvwrite_r+0x84>
   2041c:	0005883a 	mov	r2,zero
   20420:	dfc00a17 	ldw	ra,40(sp)
   20424:	df000917 	ldw	fp,36(sp)
   20428:	ddc00817 	ldw	r23,32(sp)
   2042c:	dd800717 	ldw	r22,28(sp)
   20430:	dd400617 	ldw	r21,24(sp)
   20434:	dd000517 	ldw	r20,20(sp)
   20438:	dcc00417 	ldw	r19,16(sp)
   2043c:	dc800317 	ldw	r18,12(sp)
   20440:	dc400217 	ldw	r17,8(sp)
   20444:	dc000117 	ldw	r16,4(sp)
   20448:	dec00b04 	addi	sp,sp,44
   2044c:	f800283a 	ret
   20450:	a809883a 	mov	r4,r21
   20454:	800b883a 	mov	r5,r16
   20458:	00219e40 	call	219e4 <__swsetup_r>
   2045c:	1000f01e 	bne	r2,zero,20820 <__sfvwrite_r+0x4c8>
   20460:	8080030b 	ldhu	r2,12(r16)
   20464:	a4400017 	ldw	r17,0(r20)
   20468:	10c0008c 	andi	r3,r2,2
   2046c:	18ffffcc 	andi	r3,r3,65535
   20470:	18e0001c 	xori	r3,r3,32768
   20474:	18e00004 	addi	r3,r3,-32768
   20478:	183fd51e 	bne	r3,zero,203d0 <__sfvwrite_r+0x78>
   2047c:	10c0004c 	andi	r3,r2,1
   20480:	002d883a 	mov	r22,zero
   20484:	1800381e 	bne	r3,zero,20568 <__sfvwrite_r+0x210>
   20488:	0025883a 	mov	r18,zero
   2048c:	90002126 	beq	r18,zero,20514 <__sfvwrite_r+0x1bc>
   20490:	10c0800c 	andi	r3,r2,512
   20494:	18ffffcc 	andi	r3,r3,65535
   20498:	18e0001c 	xori	r3,r3,32768
   2049c:	18e00004 	addi	r3,r3,-32768
   204a0:	84c00217 	ldw	r19,8(r16)
   204a4:	18006b26 	beq	r3,zero,20654 <__sfvwrite_r+0x2fc>
   204a8:	980f883a 	mov	r7,r19
   204ac:	94c08636 	bltu	r18,r19,206c8 <__sfvwrite_r+0x370>
   204b0:	10c1200c 	andi	r3,r2,1152
   204b4:	18009f1e 	bne	r3,zero,20734 <__sfvwrite_r+0x3dc>
   204b8:	81000017 	ldw	r4,0(r16)
   204bc:	982f883a 	mov	r23,r19
   204c0:	9039883a 	mov	fp,r18
   204c4:	9027883a 	mov	r19,r18
   204c8:	380d883a 	mov	r6,r7
   204cc:	b00b883a 	mov	r5,r22
   204d0:	d9c00015 	stw	r7,0(sp)
   204d4:	00211f80 	call	211f8 <memmove>
   204d8:	d9c00017 	ldw	r7,0(sp)
   204dc:	81000217 	ldw	r4,8(r16)
   204e0:	80800017 	ldw	r2,0(r16)
   204e4:	25efc83a 	sub	r23,r4,r23
   204e8:	11cf883a 	add	r7,r2,r7
   204ec:	85c00215 	stw	r23,8(r16)
   204f0:	81c00015 	stw	r7,0(r16)
   204f4:	a0800217 	ldw	r2,8(r20)
   204f8:	b72d883a 	add	r22,r22,fp
   204fc:	9725c83a 	sub	r18,r18,fp
   20500:	14e7c83a 	sub	r19,r2,r19
   20504:	a4c00215 	stw	r19,8(r20)
   20508:	983fc426 	beq	r19,zero,2041c <__sfvwrite_r+0xc4>
   2050c:	8080030b 	ldhu	r2,12(r16)
   20510:	903fdf1e 	bne	r18,zero,20490 <__sfvwrite_r+0x138>
   20514:	8d800017 	ldw	r22,0(r17)
   20518:	8c800117 	ldw	r18,4(r17)
   2051c:	8c400204 	addi	r17,r17,8
   20520:	003fda06 	br	2048c <__sfvwrite_r+0x134>
   20524:	8cc00017 	ldw	r19,0(r17)
   20528:	8c800117 	ldw	r18,4(r17)
   2052c:	8c400204 	addi	r17,r17,8
   20530:	003faa06 	br	203dc <__sfvwrite_r+0x84>
   20534:	00213840 	call	21384 <_realloc_r>
   20538:	102f883a 	mov	r23,r2
   2053c:	10009f1e 	bne	r2,zero,207bc <__sfvwrite_r+0x464>
   20540:	81400417 	ldw	r5,16(r16)
   20544:	a809883a 	mov	r4,r21
   20548:	00221980 	call	22198 <_free_r>
   2054c:	00800304 	movi	r2,12
   20550:	a8800015 	stw	r2,0(r21)
   20554:	80c0030b 	ldhu	r3,12(r16)
   20558:	00bfffc4 	movi	r2,-1
   2055c:	18c01014 	ori	r3,r3,64
   20560:	80c0030d 	sth	r3,12(r16)
   20564:	003fae06 	br	20420 <__sfvwrite_r+0xc8>
   20568:	0007883a 	mov	r3,zero
   2056c:	0039883a 	mov	fp,zero
   20570:	0025883a 	mov	r18,zero
   20574:	90001e26 	beq	r18,zero,205f0 <__sfvwrite_r+0x298>
   20578:	18006526 	beq	r3,zero,20710 <__sfvwrite_r+0x3b8>
   2057c:	b02f883a 	mov	r23,r22
   20580:	9580012e 	bgeu	r18,r22,20588 <__sfvwrite_r+0x230>
   20584:	902f883a 	mov	r23,r18
   20588:	81000017 	ldw	r4,0(r16)
   2058c:	80800417 	ldw	r2,16(r16)
   20590:	84c00217 	ldw	r19,8(r16)
   20594:	81c00517 	ldw	r7,20(r16)
   20598:	1100022e 	bgeu	r2,r4,205a4 <__sfvwrite_r+0x24c>
   2059c:	99e7883a 	add	r19,r19,r7
   205a0:	9dc01816 	blt	r19,r23,20604 <__sfvwrite_r+0x2ac>
   205a4:	b9c03b16 	blt	r23,r7,20694 <__sfvwrite_r+0x33c>
   205a8:	80800917 	ldw	r2,36(r16)
   205ac:	81400717 	ldw	r5,28(r16)
   205b0:	a809883a 	mov	r4,r21
   205b4:	d8c00015 	stw	r3,0(sp)
   205b8:	e00d883a 	mov	r6,fp
   205bc:	103ee83a 	callr	r2
   205c0:	1027883a 	mov	r19,r2
   205c4:	d8c00017 	ldw	r3,0(sp)
   205c8:	00bfe20e 	bge	zero,r2,20554 <__sfvwrite_r+0x1fc>
   205cc:	b4edc83a 	sub	r22,r22,r19
   205d0:	b0001a26 	beq	r22,zero,2063c <__sfvwrite_r+0x2e4>
   205d4:	a0800217 	ldw	r2,8(r20)
   205d8:	e4f9883a 	add	fp,fp,r19
   205dc:	94e5c83a 	sub	r18,r18,r19
   205e0:	14e7c83a 	sub	r19,r2,r19
   205e4:	a4c00215 	stw	r19,8(r20)
   205e8:	983f8c26 	beq	r19,zero,2041c <__sfvwrite_r+0xc4>
   205ec:	903fe21e 	bne	r18,zero,20578 <__sfvwrite_r+0x220>
   205f0:	8f000017 	ldw	fp,0(r17)
   205f4:	8c800117 	ldw	r18,4(r17)
   205f8:	0007883a 	mov	r3,zero
   205fc:	8c400204 	addi	r17,r17,8
   20600:	003fdc06 	br	20574 <__sfvwrite_r+0x21c>
   20604:	e00b883a 	mov	r5,fp
   20608:	980d883a 	mov	r6,r19
   2060c:	d8c00015 	stw	r3,0(sp)
   20610:	00211f80 	call	211f8 <memmove>
   20614:	80800017 	ldw	r2,0(r16)
   20618:	a809883a 	mov	r4,r21
   2061c:	800b883a 	mov	r5,r16
   20620:	14c5883a 	add	r2,r2,r19
   20624:	80800015 	stw	r2,0(r16)
   20628:	0021b580 	call	21b58 <_fflush_r>
   2062c:	d8c00017 	ldw	r3,0(sp)
   20630:	103fc81e 	bne	r2,zero,20554 <__sfvwrite_r+0x1fc>
   20634:	b4edc83a 	sub	r22,r22,r19
   20638:	b03fe61e 	bne	r22,zero,205d4 <__sfvwrite_r+0x27c>
   2063c:	a809883a 	mov	r4,r21
   20640:	800b883a 	mov	r5,r16
   20644:	0021b580 	call	21b58 <_fflush_r>
   20648:	103fc21e 	bne	r2,zero,20554 <__sfvwrite_r+0x1fc>
   2064c:	0007883a 	mov	r3,zero
   20650:	003fe006 	br	205d4 <__sfvwrite_r+0x27c>
   20654:	81000017 	ldw	r4,0(r16)
   20658:	80800417 	ldw	r2,16(r16)
   2065c:	1100022e 	bgeu	r2,r4,20668 <__sfvwrite_r+0x310>
   20660:	9839883a 	mov	fp,r19
   20664:	9c806036 	bltu	r19,r18,207e8 <__sfvwrite_r+0x490>
   20668:	81c00517 	ldw	r7,20(r16)
   2066c:	91c01c36 	bltu	r18,r7,206e0 <__sfvwrite_r+0x388>
   20670:	80800917 	ldw	r2,36(r16)
   20674:	81400717 	ldw	r5,28(r16)
   20678:	a809883a 	mov	r4,r21
   2067c:	b00d883a 	mov	r6,r22
   20680:	103ee83a 	callr	r2
   20684:	1027883a 	mov	r19,r2
   20688:	00bfb20e 	bge	zero,r2,20554 <__sfvwrite_r+0x1fc>
   2068c:	1039883a 	mov	fp,r2
   20690:	003f9806 	br	204f4 <__sfvwrite_r+0x19c>
   20694:	b80d883a 	mov	r6,r23
   20698:	e00b883a 	mov	r5,fp
   2069c:	d8c00015 	stw	r3,0(sp)
   206a0:	00211f80 	call	211f8 <memmove>
   206a4:	80800217 	ldw	r2,8(r16)
   206a8:	81000017 	ldw	r4,0(r16)
   206ac:	b827883a 	mov	r19,r23
   206b0:	15c5c83a 	sub	r2,r2,r23
   206b4:	25ef883a 	add	r23,r4,r23
   206b8:	80800215 	stw	r2,8(r16)
   206bc:	85c00015 	stw	r23,0(r16)
   206c0:	d8c00017 	ldw	r3,0(sp)
   206c4:	003fc106 	br	205cc <__sfvwrite_r+0x274>
   206c8:	81000017 	ldw	r4,0(r16)
   206cc:	902f883a 	mov	r23,r18
   206d0:	9039883a 	mov	fp,r18
   206d4:	9027883a 	mov	r19,r18
   206d8:	900f883a 	mov	r7,r18
   206dc:	003f7a06 	br	204c8 <__sfvwrite_r+0x170>
   206e0:	b00b883a 	mov	r5,r22
   206e4:	900d883a 	mov	r6,r18
   206e8:	00211f80 	call	211f8 <memmove>
   206ec:	80c00217 	ldw	r3,8(r16)
   206f0:	80800017 	ldw	r2,0(r16)
   206f4:	9027883a 	mov	r19,r18
   206f8:	1c87c83a 	sub	r3,r3,r18
   206fc:	1485883a 	add	r2,r2,r18
   20700:	80c00215 	stw	r3,8(r16)
   20704:	80800015 	stw	r2,0(r16)
   20708:	9039883a 	mov	fp,r18
   2070c:	003f7906 	br	204f4 <__sfvwrite_r+0x19c>
   20710:	e009883a 	mov	r4,fp
   20714:	01400284 	movi	r5,10
   20718:	900d883a 	mov	r6,r18
   2071c:	0020fc00 	call	20fc0 <memchr>
   20720:	10003c26 	beq	r2,zero,20814 <__sfvwrite_r+0x4bc>
   20724:	15800044 	addi	r22,r2,1
   20728:	b72dc83a 	sub	r22,r22,fp
   2072c:	00c00044 	movi	r3,1
   20730:	003f9206 	br	2057c <__sfvwrite_r+0x224>
   20734:	81000517 	ldw	r4,20(r16)
   20738:	81400417 	ldw	r5,16(r16)
   2073c:	80c00017 	ldw	r3,0(r16)
   20740:	210d883a 	add	r6,r4,r4
   20744:	3109883a 	add	r4,r6,r4
   20748:	2026d7fa 	srli	r19,r4,31
   2074c:	1979c83a 	sub	fp,r3,r5
   20750:	e1800044 	addi	r6,fp,1
   20754:	9909883a 	add	r4,r19,r4
   20758:	2027d07a 	srai	r19,r4,1
   2075c:	3489883a 	add	r4,r6,r18
   20760:	980d883a 	mov	r6,r19
   20764:	9900022e 	bgeu	r19,r4,20770 <__sfvwrite_r+0x418>
   20768:	2027883a 	mov	r19,r4
   2076c:	200d883a 	mov	r6,r4
   20770:	1081000c 	andi	r2,r2,1024
   20774:	10bfffcc 	andi	r2,r2,65535
   20778:	10a0001c 	xori	r2,r2,32768
   2077c:	10a00004 	addi	r2,r2,-32768
   20780:	a809883a 	mov	r4,r21
   20784:	103f6b26 	beq	r2,zero,20534 <__sfvwrite_r+0x1dc>
   20788:	300b883a 	mov	r5,r6
   2078c:	002083c0 	call	2083c <_malloc_r>
   20790:	102f883a 	mov	r23,r2
   20794:	103f6d26 	beq	r2,zero,2054c <__sfvwrite_r+0x1f4>
   20798:	81400417 	ldw	r5,16(r16)
   2079c:	1009883a 	mov	r4,r2
   207a0:	e00d883a 	mov	r6,fp
   207a4:	00210b80 	call	210b8 <memcpy>
   207a8:	8080030b 	ldhu	r2,12(r16)
   207ac:	00fedfc4 	movi	r3,-1153
   207b0:	10c4703a 	and	r2,r2,r3
   207b4:	10802014 	ori	r2,r2,128
   207b8:	8080030d 	sth	r2,12(r16)
   207bc:	bf09883a 	add	r4,r23,fp
   207c0:	9f07c83a 	sub	r3,r19,fp
   207c4:	85c00415 	stw	r23,16(r16)
   207c8:	84c00515 	stw	r19,20(r16)
   207cc:	81000015 	stw	r4,0(r16)
   207d0:	902f883a 	mov	r23,r18
   207d4:	80c00215 	stw	r3,8(r16)
   207d8:	9039883a 	mov	fp,r18
   207dc:	9027883a 	mov	r19,r18
   207e0:	900f883a 	mov	r7,r18
   207e4:	003f3806 	br	204c8 <__sfvwrite_r+0x170>
   207e8:	b00b883a 	mov	r5,r22
   207ec:	980d883a 	mov	r6,r19
   207f0:	00211f80 	call	211f8 <memmove>
   207f4:	80800017 	ldw	r2,0(r16)
   207f8:	a809883a 	mov	r4,r21
   207fc:	800b883a 	mov	r5,r16
   20800:	14c5883a 	add	r2,r2,r19
   20804:	80800015 	stw	r2,0(r16)
   20808:	0021b580 	call	21b58 <_fflush_r>
   2080c:	103f3926 	beq	r2,zero,204f4 <__sfvwrite_r+0x19c>
   20810:	003f5006 	br	20554 <__sfvwrite_r+0x1fc>
   20814:	95800044 	addi	r22,r18,1
   20818:	00c00044 	movi	r3,1
   2081c:	003f5706 	br	2057c <__sfvwrite_r+0x224>
   20820:	80c0030b 	ldhu	r3,12(r16)
   20824:	00bfffc4 	movi	r2,-1
   20828:	18c01014 	ori	r3,r3,64
   2082c:	80c0030d 	sth	r3,12(r16)
   20830:	00c00244 	movi	r3,9
   20834:	a8c00015 	stw	r3,0(r21)
   20838:	003ef906 	br	20420 <__sfvwrite_r+0xc8>

0002083c <_malloc_r>:
   2083c:	defff604 	addi	sp,sp,-40
   20840:	dc800215 	stw	r18,8(sp)
   20844:	dfc00915 	stw	ra,36(sp)
   20848:	df000815 	stw	fp,32(sp)
   2084c:	ddc00715 	stw	r23,28(sp)
   20850:	dd800615 	stw	r22,24(sp)
   20854:	dd400515 	stw	r21,20(sp)
   20858:	dd000415 	stw	r20,16(sp)
   2085c:	dcc00315 	stw	r19,12(sp)
   20860:	dc400115 	stw	r17,4(sp)
   20864:	dc000015 	stw	r16,0(sp)
   20868:	288002c4 	addi	r2,r5,11
   2086c:	00c00584 	movi	r3,22
   20870:	2025883a 	mov	r18,r4
   20874:	18802b2e 	bgeu	r3,r2,20924 <_malloc_r+0xe8>
   20878:	047ffe04 	movi	r17,-8
   2087c:	1462703a 	and	r17,r2,r17
   20880:	88002a16 	blt	r17,zero,2092c <_malloc_r+0xf0>
   20884:	89402936 	bltu	r17,r5,2092c <_malloc_r+0xf0>
   20888:	9009883a 	mov	r4,r18
   2088c:	002333c0 	call	2333c <__malloc_lock>
   20890:	00807dc4 	movi	r2,503
   20894:	14402936 	bltu	r2,r17,2093c <_malloc_r+0x100>
   20898:	8808d0fa 	srli	r4,r17,3
   2089c:	04c000b4 	movhi	r19,2
   208a0:	9cd67604 	addi	r19,r19,23000
   208a4:	2105883a 	add	r2,r4,r4
   208a8:	1085883a 	add	r2,r2,r2
   208ac:	1085883a 	add	r2,r2,r2
   208b0:	9885883a 	add	r2,r19,r2
   208b4:	14000317 	ldw	r16,12(r2)
   208b8:	80815526 	beq	r16,r2,20e10 <_malloc_r+0x5d4>
   208bc:	81000117 	ldw	r4,4(r16)
   208c0:	00bfff04 	movi	r2,-4
   208c4:	80c00317 	ldw	r3,12(r16)
   208c8:	2084703a 	and	r2,r4,r2
   208cc:	8085883a 	add	r2,r16,r2
   208d0:	11800117 	ldw	r6,4(r2)
   208d4:	81400217 	ldw	r5,8(r16)
   208d8:	9009883a 	mov	r4,r18
   208dc:	31800054 	ori	r6,r6,1
   208e0:	11800115 	stw	r6,4(r2)
   208e4:	28c00315 	stw	r3,12(r5)
   208e8:	19400215 	stw	r5,8(r3)
   208ec:	002335c0 	call	2335c <__malloc_unlock>
   208f0:	80800204 	addi	r2,r16,8
   208f4:	dfc00917 	ldw	ra,36(sp)
   208f8:	df000817 	ldw	fp,32(sp)
   208fc:	ddc00717 	ldw	r23,28(sp)
   20900:	dd800617 	ldw	r22,24(sp)
   20904:	dd400517 	ldw	r21,20(sp)
   20908:	dd000417 	ldw	r20,16(sp)
   2090c:	dcc00317 	ldw	r19,12(sp)
   20910:	dc800217 	ldw	r18,8(sp)
   20914:	dc400117 	ldw	r17,4(sp)
   20918:	dc000017 	ldw	r16,0(sp)
   2091c:	dec00a04 	addi	sp,sp,40
   20920:	f800283a 	ret
   20924:	04400404 	movi	r17,16
   20928:	897fd72e 	bgeu	r17,r5,20888 <_malloc_r+0x4c>
   2092c:	00800304 	movi	r2,12
   20930:	90800015 	stw	r2,0(r18)
   20934:	0005883a 	mov	r2,zero
   20938:	003fee06 	br	208f4 <_malloc_r+0xb8>
   2093c:	8808d27a 	srli	r4,r17,9
   20940:	20007126 	beq	r4,zero,20b08 <_malloc_r+0x2cc>
   20944:	00800104 	movi	r2,4
   20948:	1100eb36 	bltu	r2,r4,20cf8 <_malloc_r+0x4bc>
   2094c:	8808d1ba 	srli	r4,r17,6
   20950:	21000e04 	addi	r4,r4,56
   20954:	210b883a 	add	r5,r4,r4
   20958:	294b883a 	add	r5,r5,r5
   2095c:	294b883a 	add	r5,r5,r5
   20960:	04c000b4 	movhi	r19,2
   20964:	9cd67604 	addi	r19,r19,23000
   20968:	994b883a 	add	r5,r19,r5
   2096c:	2c000317 	ldw	r16,12(r5)
   20970:	2c000e26 	beq	r5,r16,209ac <_malloc_r+0x170>
   20974:	80c00117 	ldw	r3,4(r16)
   20978:	01ffff04 	movi	r7,-4
   2097c:	018003c4 	movi	r6,15
   20980:	19c6703a 	and	r3,r3,r7
   20984:	1c45c83a 	sub	r2,r3,r17
   20988:	30800716 	blt	r6,r2,209a8 <_malloc_r+0x16c>
   2098c:	1000610e 	bge	r2,zero,20b14 <_malloc_r+0x2d8>
   20990:	84000317 	ldw	r16,12(r16)
   20994:	2c000526 	beq	r5,r16,209ac <_malloc_r+0x170>
   20998:	80c00117 	ldw	r3,4(r16)
   2099c:	19c6703a 	and	r3,r3,r7
   209a0:	1c45c83a 	sub	r2,r3,r17
   209a4:	30bff90e 	bge	r6,r2,2098c <_malloc_r+0x150>
   209a8:	213fffc4 	addi	r4,r4,-1
   209ac:	21000044 	addi	r4,r4,1
   209b0:	9c000417 	ldw	r16,16(r19)
   209b4:	00c000b4 	movhi	r3,2
   209b8:	18d67604 	addi	r3,r3,23000
   209bc:	1a400204 	addi	r9,r3,8
   209c0:	8240ff26 	beq	r16,r9,20dc0 <_malloc_r+0x584>
   209c4:	81400117 	ldw	r5,4(r16)
   209c8:	00bfff04 	movi	r2,-4
   209cc:	018003c4 	movi	r6,15
   209d0:	2884703a 	and	r2,r5,r2
   209d4:	144bc83a 	sub	r5,r2,r17
   209d8:	3140ea16 	blt	r6,r5,20d84 <_malloc_r+0x548>
   209dc:	1a400515 	stw	r9,20(r3)
   209e0:	1a400415 	stw	r9,16(r3)
   209e4:	2800570e 	bge	r5,zero,20b44 <_malloc_r+0x308>
   209e8:	01407fc4 	movi	r5,511
   209ec:	2880ca36 	bltu	r5,r2,20d18 <_malloc_r+0x4dc>
   209f0:	1004d0fa 	srli	r2,r2,3
   209f4:	02000044 	movi	r8,1
   209f8:	19c00117 	ldw	r7,4(r3)
   209fc:	108b883a 	add	r5,r2,r2
   20a00:	294b883a 	add	r5,r5,r5
   20a04:	1005d0ba 	srai	r2,r2,2
   20a08:	294b883a 	add	r5,r5,r5
   20a0c:	28cb883a 	add	r5,r5,r3
   20a10:	29800217 	ldw	r6,8(r5)
   20a14:	4084983a 	sll	r2,r8,r2
   20a18:	81400315 	stw	r5,12(r16)
   20a1c:	81800215 	stw	r6,8(r16)
   20a20:	11c4b03a 	or	r2,r2,r7
   20a24:	18800115 	stw	r2,4(r3)
   20a28:	2c000215 	stw	r16,8(r5)
   20a2c:	34000315 	stw	r16,12(r6)
   20a30:	200bd0ba 	srai	r5,r4,2
   20a34:	00c00044 	movi	r3,1
   20a38:	194a983a 	sll	r5,r3,r5
   20a3c:	11404936 	bltu	r2,r5,20b64 <_malloc_r+0x328>
   20a40:	1146703a 	and	r3,r2,r5
   20a44:	18000a1e 	bne	r3,zero,20a70 <_malloc_r+0x234>
   20a48:	00ffff04 	movi	r3,-4
   20a4c:	294b883a 	add	r5,r5,r5
   20a50:	20c8703a 	and	r4,r4,r3
   20a54:	1146703a 	and	r3,r2,r5
   20a58:	21000104 	addi	r4,r4,4
   20a5c:	1800041e 	bne	r3,zero,20a70 <_malloc_r+0x234>
   20a60:	294b883a 	add	r5,r5,r5
   20a64:	1146703a 	and	r3,r2,r5
   20a68:	21000104 	addi	r4,r4,4
   20a6c:	183ffc26 	beq	r3,zero,20a60 <_malloc_r+0x224>
   20a70:	023fff04 	movi	r8,-4
   20a74:	01c003c4 	movi	r7,15
   20a78:	2105883a 	add	r2,r4,r4
   20a7c:	1085883a 	add	r2,r2,r2
   20a80:	1085883a 	add	r2,r2,r2
   20a84:	9899883a 	add	r12,r19,r2
   20a88:	62800304 	addi	r10,r12,12
   20a8c:	2017883a 	mov	r11,r4
   20a90:	54000017 	ldw	r16,0(r10)
   20a94:	51bffd04 	addi	r6,r10,-12
   20a98:	8180041e 	bne	r16,r6,20aac <_malloc_r+0x270>
   20a9c:	0000ca06 	br	20dc8 <_malloc_r+0x58c>
   20aa0:	10001c0e 	bge	r2,zero,20b14 <_malloc_r+0x2d8>
   20aa4:	84000317 	ldw	r16,12(r16)
   20aa8:	8180c726 	beq	r16,r6,20dc8 <_malloc_r+0x58c>
   20aac:	80c00117 	ldw	r3,4(r16)
   20ab0:	1a06703a 	and	r3,r3,r8
   20ab4:	1c45c83a 	sub	r2,r3,r17
   20ab8:	38bff90e 	bge	r7,r2,20aa0 <_malloc_r+0x264>
   20abc:	81000317 	ldw	r4,12(r16)
   20ac0:	81400217 	ldw	r5,8(r16)
   20ac4:	8447883a 	add	r3,r16,r17
   20ac8:	8c400054 	ori	r17,r17,1
   20acc:	29000315 	stw	r4,12(r5)
   20ad0:	21400215 	stw	r5,8(r4)
   20ad4:	84400115 	stw	r17,4(r16)
   20ad8:	1889883a 	add	r4,r3,r2
   20adc:	11400054 	ori	r5,r2,1
   20ae0:	98c00515 	stw	r3,20(r19)
   20ae4:	98c00415 	stw	r3,16(r19)
   20ae8:	20800015 	stw	r2,0(r4)
   20aec:	1a400315 	stw	r9,12(r3)
   20af0:	1a400215 	stw	r9,8(r3)
   20af4:	19400115 	stw	r5,4(r3)
   20af8:	9009883a 	mov	r4,r18
   20afc:	002335c0 	call	2335c <__malloc_unlock>
   20b00:	80800204 	addi	r2,r16,8
   20b04:	003f7b06 	br	208f4 <_malloc_r+0xb8>
   20b08:	8808d0fa 	srli	r4,r17,3
   20b0c:	210b883a 	add	r5,r4,r4
   20b10:	003f9106 	br	20958 <_malloc_r+0x11c>
   20b14:	80c7883a 	add	r3,r16,r3
   20b18:	19400117 	ldw	r5,4(r3)
   20b1c:	80800317 	ldw	r2,12(r16)
   20b20:	81000217 	ldw	r4,8(r16)
   20b24:	29400054 	ori	r5,r5,1
   20b28:	19400115 	stw	r5,4(r3)
   20b2c:	20800315 	stw	r2,12(r4)
   20b30:	11000215 	stw	r4,8(r2)
   20b34:	9009883a 	mov	r4,r18
   20b38:	002335c0 	call	2335c <__malloc_unlock>
   20b3c:	80800204 	addi	r2,r16,8
   20b40:	003f6c06 	br	208f4 <_malloc_r+0xb8>
   20b44:	8085883a 	add	r2,r16,r2
   20b48:	10c00117 	ldw	r3,4(r2)
   20b4c:	9009883a 	mov	r4,r18
   20b50:	18c00054 	ori	r3,r3,1
   20b54:	10c00115 	stw	r3,4(r2)
   20b58:	002335c0 	call	2335c <__malloc_unlock>
   20b5c:	80800204 	addi	r2,r16,8
   20b60:	003f6406 	br	208f4 <_malloc_r+0xb8>
   20b64:	9c000217 	ldw	r16,8(r19)
   20b68:	00bfff04 	movi	r2,-4
   20b6c:	85400117 	ldw	r21,4(r16)
   20b70:	a8aa703a 	and	r21,r21,r2
   20b74:	ac400336 	bltu	r21,r17,20b84 <_malloc_r+0x348>
   20b78:	ac45c83a 	sub	r2,r21,r17
   20b7c:	00c003c4 	movi	r3,15
   20b80:	18805316 	blt	r3,r2,20cd0 <_malloc_r+0x494>
   20b84:	d5e6a217 	ldw	r23,-25976(gp)
   20b88:	d0e00217 	ldw	r3,-32760(gp)
   20b8c:	00bfffc4 	movi	r2,-1
   20b90:	8579883a 	add	fp,r16,r21
   20b94:	8def883a 	add	r23,r17,r23
   20b98:	1880d226 	beq	r3,r2,20ee4 <_malloc_r+0x6a8>
   20b9c:	bdc403c4 	addi	r23,r23,4111
   20ba0:	00bc0004 	movi	r2,-4096
   20ba4:	b8ae703a 	and	r23,r23,r2
   20ba8:	9009883a 	mov	r4,r18
   20bac:	b80b883a 	mov	r5,r23
   20bb0:	00219800 	call	21980 <_sbrk_r>
   20bb4:	1029883a 	mov	r20,r2
   20bb8:	00bfffc4 	movi	r2,-1
   20bbc:	a080d126 	beq	r20,r2,20f04 <_malloc_r+0x6c8>
   20bc0:	a7009f36 	bltu	r20,fp,20e40 <_malloc_r+0x604>
   20bc4:	058000f4 	movhi	r22,3
   20bc8:	b5a2a604 	addi	r22,r22,-30056
   20bcc:	b0800017 	ldw	r2,0(r22)
   20bd0:	b885883a 	add	r2,r23,r2
   20bd4:	b0800015 	stw	r2,0(r22)
   20bd8:	e500cf26 	beq	fp,r20,20f18 <_malloc_r+0x6dc>
   20bdc:	d1200217 	ldw	r4,-32760(gp)
   20be0:	00ffffc4 	movi	r3,-1
   20be4:	20c0e026 	beq	r4,r3,20f68 <_malloc_r+0x72c>
   20be8:	a739c83a 	sub	fp,r20,fp
   20bec:	1705883a 	add	r2,r2,fp
   20bf0:	b0800015 	stw	r2,0(r22)
   20bf4:	a08001cc 	andi	r2,r20,7
   20bf8:	1000a526 	beq	r2,zero,20e90 <_malloc_r+0x654>
   20bfc:	a0a9c83a 	sub	r20,r20,r2
   20c00:	00c40204 	movi	r3,4104
   20c04:	a5000204 	addi	r20,r20,8
   20c08:	1885c83a 	sub	r2,r3,r2
   20c0c:	a5c7883a 	add	r3,r20,r23
   20c10:	18c3ffcc 	andi	r3,r3,4095
   20c14:	10efc83a 	sub	r23,r2,r3
   20c18:	9009883a 	mov	r4,r18
   20c1c:	b80b883a 	mov	r5,r23
   20c20:	00219800 	call	21980 <_sbrk_r>
   20c24:	00ffffc4 	movi	r3,-1
   20c28:	10c0cc26 	beq	r2,r3,20f5c <_malloc_r+0x720>
   20c2c:	1505c83a 	sub	r2,r2,r20
   20c30:	b887883a 	add	r3,r23,r2
   20c34:	18c00054 	ori	r3,r3,1
   20c38:	b0800017 	ldw	r2,0(r22)
   20c3c:	9d000215 	stw	r20,8(r19)
   20c40:	a0c00115 	stw	r3,4(r20)
   20c44:	b885883a 	add	r2,r23,r2
   20c48:	b0800015 	stw	r2,0(r22)
   20c4c:	84c00e26 	beq	r16,r19,20c88 <_malloc_r+0x44c>
   20c50:	00c003c4 	movi	r3,15
   20c54:	1d40902e 	bgeu	r3,r21,20e98 <_malloc_r+0x65c>
   20c58:	ad7ffd04 	addi	r21,r21,-12
   20c5c:	013ffe04 	movi	r4,-8
   20c60:	a908703a 	and	r4,r21,r4
   20c64:	810b883a 	add	r5,r16,r4
   20c68:	01800144 	movi	r6,5
   20c6c:	29800115 	stw	r6,4(r5)
   20c70:	29800215 	stw	r6,8(r5)
   20c74:	81400117 	ldw	r5,4(r16)
   20c78:	2940004c 	andi	r5,r5,1
   20c7c:	214ab03a 	or	r5,r4,r5
   20c80:	81400115 	stw	r5,4(r16)
   20c84:	1900ae36 	bltu	r3,r4,20f40 <_malloc_r+0x704>
   20c88:	d0e6a117 	ldw	r3,-25980(gp)
   20c8c:	1880012e 	bgeu	r3,r2,20c94 <_malloc_r+0x458>
   20c90:	d0a6a115 	stw	r2,-25980(gp)
   20c94:	d0e6a017 	ldw	r3,-25984(gp)
   20c98:	9c000217 	ldw	r16,8(r19)
   20c9c:	1880012e 	bgeu	r3,r2,20ca4 <_malloc_r+0x468>
   20ca0:	d0a6a015 	stw	r2,-25984(gp)
   20ca4:	80c00117 	ldw	r3,4(r16)
   20ca8:	00bfff04 	movi	r2,-4
   20cac:	1886703a 	and	r3,r3,r2
   20cb0:	1c45c83a 	sub	r2,r3,r17
   20cb4:	1c400236 	bltu	r3,r17,20cc0 <_malloc_r+0x484>
   20cb8:	00c003c4 	movi	r3,15
   20cbc:	18800416 	blt	r3,r2,20cd0 <_malloc_r+0x494>
   20cc0:	9009883a 	mov	r4,r18
   20cc4:	002335c0 	call	2335c <__malloc_unlock>
   20cc8:	0005883a 	mov	r2,zero
   20ccc:	003f0906 	br	208f4 <_malloc_r+0xb8>
   20cd0:	88c00054 	ori	r3,r17,1
   20cd4:	10800054 	ori	r2,r2,1
   20cd8:	80c00115 	stw	r3,4(r16)
   20cdc:	8463883a 	add	r17,r16,r17
   20ce0:	88800115 	stw	r2,4(r17)
   20ce4:	9009883a 	mov	r4,r18
   20ce8:	9c400215 	stw	r17,8(r19)
   20cec:	002335c0 	call	2335c <__malloc_unlock>
   20cf0:	80800204 	addi	r2,r16,8
   20cf4:	003eff06 	br	208f4 <_malloc_r+0xb8>
   20cf8:	00800504 	movi	r2,20
   20cfc:	1100492e 	bgeu	r2,r4,20e24 <_malloc_r+0x5e8>
   20d00:	00801504 	movi	r2,84
   20d04:	11005c36 	bltu	r2,r4,20e78 <_malloc_r+0x63c>
   20d08:	8808d33a 	srli	r4,r17,12
   20d0c:	21001b84 	addi	r4,r4,110
   20d10:	210b883a 	add	r5,r4,r4
   20d14:	003f1006 	br	20958 <_malloc_r+0x11c>
   20d18:	1006d27a 	srli	r3,r2,9
   20d1c:	01400104 	movi	r5,4
   20d20:	28c0432e 	bgeu	r5,r3,20e30 <_malloc_r+0x5f4>
   20d24:	01400504 	movi	r5,20
   20d28:	28c07036 	bltu	r5,r3,20eec <_malloc_r+0x6b0>
   20d2c:	194016c4 	addi	r5,r3,91
   20d30:	294d883a 	add	r6,r5,r5
   20d34:	318d883a 	add	r6,r6,r6
   20d38:	318d883a 	add	r6,r6,r6
   20d3c:	998d883a 	add	r6,r19,r6
   20d40:	30c00217 	ldw	r3,8(r6)
   20d44:	01c000b4 	movhi	r7,2
   20d48:	39d67604 	addi	r7,r7,23000
   20d4c:	19805726 	beq	r3,r6,20eac <_malloc_r+0x670>
   20d50:	01ffff04 	movi	r7,-4
   20d54:	19400117 	ldw	r5,4(r3)
   20d58:	29ca703a 	and	r5,r5,r7
   20d5c:	1140022e 	bgeu	r2,r5,20d68 <_malloc_r+0x52c>
   20d60:	18c00217 	ldw	r3,8(r3)
   20d64:	30fffb1e 	bne	r6,r3,20d54 <_malloc_r+0x518>
   20d68:	19400317 	ldw	r5,12(r3)
   20d6c:	98800117 	ldw	r2,4(r19)
   20d70:	81400315 	stw	r5,12(r16)
   20d74:	80c00215 	stw	r3,8(r16)
   20d78:	2c000215 	stw	r16,8(r5)
   20d7c:	1c000315 	stw	r16,12(r3)
   20d80:	003f2b06 	br	20a30 <_malloc_r+0x1f4>
   20d84:	8445883a 	add	r2,r16,r17
   20d88:	8c400054 	ori	r17,r17,1
   20d8c:	18800515 	stw	r2,20(r3)
   20d90:	18800415 	stw	r2,16(r3)
   20d94:	29000054 	ori	r4,r5,1
   20d98:	1147883a 	add	r3,r2,r5
   20d9c:	84400115 	stw	r17,4(r16)
   20da0:	11000115 	stw	r4,4(r2)
   20da4:	12400315 	stw	r9,12(r2)
   20da8:	12400215 	stw	r9,8(r2)
   20dac:	19400015 	stw	r5,0(r3)
   20db0:	9009883a 	mov	r4,r18
   20db4:	002335c0 	call	2335c <__malloc_unlock>
   20db8:	80800204 	addi	r2,r16,8
   20dbc:	003ecd06 	br	208f4 <_malloc_r+0xb8>
   20dc0:	18800117 	ldw	r2,4(r3)
   20dc4:	003f1a06 	br	20a30 <_malloc_r+0x1f4>
   20dc8:	5ac00044 	addi	r11,r11,1
   20dcc:	588000cc 	andi	r2,r11,3
   20dd0:	52800204 	addi	r10,r10,8
   20dd4:	103f2e1e 	bne	r2,zero,20a90 <_malloc_r+0x254>
   20dd8:	20c000cc 	andi	r3,r4,3
   20ddc:	60bffe04 	addi	r2,r12,-8
   20de0:	18006f26 	beq	r3,zero,20fa0 <_malloc_r+0x764>
   20de4:	63000017 	ldw	r12,0(r12)
   20de8:	213fffc4 	addi	r4,r4,-1
   20dec:	60bffa26 	beq	r12,r2,20dd8 <_malloc_r+0x59c>
   20df0:	98800117 	ldw	r2,4(r19)
   20df4:	294b883a 	add	r5,r5,r5
   20df8:	117f5a36 	bltu	r2,r5,20b64 <_malloc_r+0x328>
   20dfc:	283f5926 	beq	r5,zero,20b64 <_malloc_r+0x328>
   20e00:	1146703a 	and	r3,r2,r5
   20e04:	18001626 	beq	r3,zero,20e60 <_malloc_r+0x624>
   20e08:	5809883a 	mov	r4,r11
   20e0c:	003f1a06 	br	20a78 <_malloc_r+0x23c>
   20e10:	80800204 	addi	r2,r16,8
   20e14:	84000517 	ldw	r16,20(r16)
   20e18:	143ea81e 	bne	r2,r16,208bc <_malloc_r+0x80>
   20e1c:	21000084 	addi	r4,r4,2
   20e20:	003ee306 	br	209b0 <_malloc_r+0x174>
   20e24:	210016c4 	addi	r4,r4,91
   20e28:	210b883a 	add	r5,r4,r4
   20e2c:	003eca06 	br	20958 <_malloc_r+0x11c>
   20e30:	100ad1ba 	srli	r5,r2,6
   20e34:	29400e04 	addi	r5,r5,56
   20e38:	294d883a 	add	r6,r5,r5
   20e3c:	003fbd06 	br	20d34 <_malloc_r+0x4f8>
   20e40:	84ff6026 	beq	r16,r19,20bc4 <_malloc_r+0x388>
   20e44:	008000b4 	movhi	r2,2
   20e48:	10967604 	addi	r2,r2,23000
   20e4c:	14000217 	ldw	r16,8(r2)
   20e50:	00bfff04 	movi	r2,-4
   20e54:	80c00117 	ldw	r3,4(r16)
   20e58:	1886703a 	and	r3,r3,r2
   20e5c:	003f9406 	br	20cb0 <_malloc_r+0x474>
   20e60:	294b883a 	add	r5,r5,r5
   20e64:	1146703a 	and	r3,r2,r5
   20e68:	5ac00104 	addi	r11,r11,4
   20e6c:	183ffc26 	beq	r3,zero,20e60 <_malloc_r+0x624>
   20e70:	5809883a 	mov	r4,r11
   20e74:	003f0006 	br	20a78 <_malloc_r+0x23c>
   20e78:	00805504 	movi	r2,340
   20e7c:	11001336 	bltu	r2,r4,20ecc <_malloc_r+0x690>
   20e80:	8808d3fa 	srli	r4,r17,15
   20e84:	21001dc4 	addi	r4,r4,119
   20e88:	210b883a 	add	r5,r4,r4
   20e8c:	003eb206 	br	20958 <_malloc_r+0x11c>
   20e90:	00840004 	movi	r2,4096
   20e94:	003f5d06 	br	20c0c <_malloc_r+0x3d0>
   20e98:	00800044 	movi	r2,1
   20e9c:	a0800115 	stw	r2,4(r20)
   20ea0:	a021883a 	mov	r16,r20
   20ea4:	0007883a 	mov	r3,zero
   20ea8:	003f8106 	br	20cb0 <_malloc_r+0x474>
   20eac:	280bd0ba 	srai	r5,r5,2
   20eb0:	01800044 	movi	r6,1
   20eb4:	38800117 	ldw	r2,4(r7)
   20eb8:	314c983a 	sll	r6,r6,r5
   20ebc:	180b883a 	mov	r5,r3
   20ec0:	3084b03a 	or	r2,r6,r2
   20ec4:	38800115 	stw	r2,4(r7)
   20ec8:	003fa906 	br	20d70 <_malloc_r+0x534>
   20ecc:	00815504 	movi	r2,1364
   20ed0:	11001836 	bltu	r2,r4,20f34 <_malloc_r+0x6f8>
   20ed4:	8808d4ba 	srli	r4,r17,18
   20ed8:	21001f04 	addi	r4,r4,124
   20edc:	210b883a 	add	r5,r4,r4
   20ee0:	003e9d06 	br	20958 <_malloc_r+0x11c>
   20ee4:	bdc00404 	addi	r23,r23,16
   20ee8:	003f2f06 	br	20ba8 <_malloc_r+0x36c>
   20eec:	01401504 	movi	r5,84
   20ef0:	28c01f36 	bltu	r5,r3,20f70 <_malloc_r+0x734>
   20ef4:	100ad33a 	srli	r5,r2,12
   20ef8:	29401b84 	addi	r5,r5,110
   20efc:	294d883a 	add	r6,r5,r5
   20f00:	003f8c06 	br	20d34 <_malloc_r+0x4f8>
   20f04:	9c000217 	ldw	r16,8(r19)
   20f08:	00bfff04 	movi	r2,-4
   20f0c:	80c00117 	ldw	r3,4(r16)
   20f10:	1886703a 	and	r3,r3,r2
   20f14:	003f6606 	br	20cb0 <_malloc_r+0x474>
   20f18:	e0c3ffcc 	andi	r3,fp,4095
   20f1c:	183f2f1e 	bne	r3,zero,20bdc <_malloc_r+0x3a0>
   20f20:	98c00217 	ldw	r3,8(r19)
   20f24:	bd49883a 	add	r4,r23,r21
   20f28:	21000054 	ori	r4,r4,1
   20f2c:	19000115 	stw	r4,4(r3)
   20f30:	003f5506 	br	20c88 <_malloc_r+0x44c>
   20f34:	01403f04 	movi	r5,252
   20f38:	01001f84 	movi	r4,126
   20f3c:	003e8606 	br	20958 <_malloc_r+0x11c>
   20f40:	9009883a 	mov	r4,r18
   20f44:	81400204 	addi	r5,r16,8
   20f48:	00221980 	call	22198 <_free_r>
   20f4c:	008000f4 	movhi	r2,3
   20f50:	10a2a604 	addi	r2,r2,-30056
   20f54:	10800017 	ldw	r2,0(r2)
   20f58:	003f4b06 	br	20c88 <_malloc_r+0x44c>
   20f5c:	00c00044 	movi	r3,1
   20f60:	002f883a 	mov	r23,zero
   20f64:	003f3406 	br	20c38 <_malloc_r+0x3fc>
   20f68:	d5200215 	stw	r20,-32760(gp)
   20f6c:	003f2106 	br	20bf4 <_malloc_r+0x3b8>
   20f70:	01405504 	movi	r5,340
   20f74:	28c00436 	bltu	r5,r3,20f88 <_malloc_r+0x74c>
   20f78:	100ad3fa 	srli	r5,r2,15
   20f7c:	29401dc4 	addi	r5,r5,119
   20f80:	294d883a 	add	r6,r5,r5
   20f84:	003f6b06 	br	20d34 <_malloc_r+0x4f8>
   20f88:	01415504 	movi	r5,1364
   20f8c:	28c00936 	bltu	r5,r3,20fb4 <_malloc_r+0x778>
   20f90:	100ad4ba 	srli	r5,r2,18
   20f94:	29401f04 	addi	r5,r5,124
   20f98:	294d883a 	add	r6,r5,r5
   20f9c:	003f6506 	br	20d34 <_malloc_r+0x4f8>
   20fa0:	98800117 	ldw	r2,4(r19)
   20fa4:	0146303a 	nor	r3,zero,r5
   20fa8:	1884703a 	and	r2,r3,r2
   20fac:	98800115 	stw	r2,4(r19)
   20fb0:	003f9006 	br	20df4 <_malloc_r+0x5b8>
   20fb4:	01803f04 	movi	r6,252
   20fb8:	01401f84 	movi	r5,126
   20fbc:	003f5d06 	br	20d34 <_malloc_r+0x4f8>

00020fc0 <memchr>:
   20fc0:	008000c4 	movi	r2,3
   20fc4:	29403fcc 	andi	r5,r5,255
   20fc8:	1180282e 	bgeu	r2,r6,2106c <memchr+0xac>
   20fcc:	2086703a 	and	r3,r4,r2
   20fd0:	1800351e 	bne	r3,zero,210a8 <memchr+0xe8>
   20fd4:	2816923a 	slli	r11,r5,8
   20fd8:	2093883a 	add	r9,r4,r2
   20fdc:	22000084 	addi	r8,r4,2
   20fe0:	5957883a 	add	r11,r11,r5
   20fe4:	5816923a 	slli	r11,r11,8
   20fe8:	20c00044 	addi	r3,r4,1
   20fec:	037fbff4 	movhi	r13,65279
   20ff0:	6b7fbfc4 	addi	r13,r13,-257
   20ff4:	5957883a 	add	r11,r11,r5
   20ff8:	5816923a 	slli	r11,r11,8
   20ffc:	03202074 	movhi	r12,32897
   21000:	63202004 	addi	r12,r12,-32640
   21004:	101d883a 	mov	r14,r2
   21008:	5957883a 	add	r11,r11,r5
   2100c:	21c00017 	ldw	r7,0(r4)
   21010:	31bfff04 	addi	r6,r6,-4
   21014:	1805883a 	mov	r2,r3
   21018:	3acef03a 	xor	r7,r7,r11
   2101c:	3b55883a 	add	r10,r7,r13
   21020:	01ce303a 	nor	r7,zero,r7
   21024:	51ce703a 	and	r7,r10,r7
   21028:	3b0e703a 	and	r7,r7,r12
   2102c:	38000a26 	beq	r7,zero,21058 <memchr+0x98>
   21030:	21c00003 	ldbu	r7,0(r4)
   21034:	39401e26 	beq	r7,r5,210b0 <memchr+0xf0>
   21038:	19c00003 	ldbu	r7,0(r3)
   2103c:	39401926 	beq	r7,r5,210a4 <memchr+0xe4>
   21040:	41c00003 	ldbu	r7,0(r8)
   21044:	4005883a 	mov	r2,r8
   21048:	39401626 	beq	r7,r5,210a4 <memchr+0xe4>
   2104c:	49c00003 	ldbu	r7,0(r9)
   21050:	4805883a 	mov	r2,r9
   21054:	39401326 	beq	r7,r5,210a4 <memchr+0xe4>
   21058:	21000104 	addi	r4,r4,4
   2105c:	4a400104 	addi	r9,r9,4
   21060:	42000104 	addi	r8,r8,4
   21064:	18c00104 	addi	r3,r3,4
   21068:	71bfe836 	bltu	r14,r6,2100c <memchr+0x4c>
   2106c:	2005883a 	mov	r2,r4
   21070:	30000a26 	beq	r6,zero,2109c <memchr+0xdc>
   21074:	10c00003 	ldbu	r3,0(r2)
   21078:	19400a26 	beq	r3,r5,210a4 <memchr+0xe4>
   2107c:	10c00044 	addi	r3,r2,1
   21080:	118d883a 	add	r6,r2,r6
   21084:	00000306 	br	21094 <memchr+0xd4>
   21088:	11000003 	ldbu	r4,0(r2)
   2108c:	18c00044 	addi	r3,r3,1
   21090:	21400426 	beq	r4,r5,210a4 <memchr+0xe4>
   21094:	1805883a 	mov	r2,r3
   21098:	19bffb1e 	bne	r3,r6,21088 <memchr+0xc8>
   2109c:	0005883a 	mov	r2,zero
   210a0:	f800283a 	ret
   210a4:	f800283a 	ret
   210a8:	2005883a 	mov	r2,r4
   210ac:	003ff106 	br	21074 <memchr+0xb4>
   210b0:	2005883a 	mov	r2,r4
   210b4:	f800283a 	ret

000210b8 <memcpy>:
   210b8:	defffb04 	addi	sp,sp,-20
   210bc:	dc000015 	stw	r16,0(sp)
   210c0:	dfc00415 	stw	ra,16(sp)
   210c4:	dcc00315 	stw	r19,12(sp)
   210c8:	dc800215 	stw	r18,8(sp)
   210cc:	dc400115 	stw	r17,4(sp)
   210d0:	00c003c4 	movi	r3,15
   210d4:	2021883a 	mov	r16,r4
   210d8:	3005883a 	mov	r2,r6
   210dc:	1980032e 	bgeu	r3,r6,210ec <memcpy+0x34>
   210e0:	2906b03a 	or	r3,r5,r4
   210e4:	18c000cc 	andi	r3,r3,3
   210e8:	18001026 	beq	r3,zero,2112c <memcpy+0x74>
   210ec:	8007883a 	mov	r3,r16
   210f0:	288f883a 	add	r7,r5,r2
   210f4:	10000526 	beq	r2,zero,2110c <memcpy+0x54>
   210f8:	29800003 	ldbu	r6,0(r5)
   210fc:	18c00044 	addi	r3,r3,1
   21100:	29400044 	addi	r5,r5,1
   21104:	19bfffc5 	stb	r6,-1(r3)
   21108:	29fffb1e 	bne	r5,r7,210f8 <memcpy+0x40>
   2110c:	8005883a 	mov	r2,r16
   21110:	dfc00417 	ldw	ra,16(sp)
   21114:	dcc00317 	ldw	r19,12(sp)
   21118:	dc800217 	ldw	r18,8(sp)
   2111c:	dc400117 	ldw	r17,4(sp)
   21120:	dc000017 	ldw	r16,0(sp)
   21124:	dec00504 	addi	sp,sp,20
   21128:	f800283a 	ret
   2112c:	32bffc04 	addi	r10,r6,-16
   21130:	5014d13a 	srli	r10,r10,4
   21134:	20800404 	addi	r2,r4,16
   21138:	2007883a 	mov	r3,r4
   2113c:	5008913a 	slli	r4,r10,4
   21140:	280f883a 	mov	r7,r5
   21144:	1105883a 	add	r2,r2,r4
   21148:	3a000017 	ldw	r8,0(r7)
   2114c:	18c00404 	addi	r3,r3,16
   21150:	39c00404 	addi	r7,r7,16
   21154:	1a3ffc15 	stw	r8,-16(r3)
   21158:	3a3ffd17 	ldw	r8,-12(r7)
   2115c:	1a3ffd15 	stw	r8,-12(r3)
   21160:	3a3ffe17 	ldw	r8,-8(r7)
   21164:	1a3ffe15 	stw	r8,-8(r3)
   21168:	3a3fff17 	ldw	r8,-4(r7)
   2116c:	1a3fff15 	stw	r8,-4(r3)
   21170:	18bff51e 	bne	r3,r2,21148 <memcpy+0x90>
   21174:	52800044 	addi	r10,r10,1
   21178:	5014913a 	slli	r10,r10,4
   2117c:	308003cc 	andi	r2,r6,15
   21180:	010000c4 	movi	r4,3
   21184:	8287883a 	add	r3,r16,r10
   21188:	2a95883a 	add	r10,r5,r10
   2118c:	2080182e 	bgeu	r4,r2,211f0 <memcpy+0x138>
   21190:	147fff04 	addi	r17,r2,-4
   21194:	8808d0ba 	srli	r4,r17,2
   21198:	1a400104 	addi	r9,r3,4
   2119c:	180d883a 	mov	r6,r3
   211a0:	2105883a 	add	r2,r4,r4
   211a4:	1085883a 	add	r2,r2,r2
   211a8:	4893883a 	add	r9,r9,r2
   211ac:	500f883a 	mov	r7,r10
   211b0:	3a000017 	ldw	r8,0(r7)
   211b4:	31800104 	addi	r6,r6,4
   211b8:	39c00104 	addi	r7,r7,4
   211bc:	323fff15 	stw	r8,-4(r6)
   211c0:	327ffb1e 	bne	r6,r9,211b0 <memcpy+0xf8>
   211c4:	20800044 	addi	r2,r4,1
   211c8:	1085883a 	add	r2,r2,r2
   211cc:	1085883a 	add	r2,r2,r2
   211d0:	017fff04 	movi	r5,-4
   211d4:	18a5883a 	add	r18,r3,r2
   211d8:	50a7883a 	add	r19,r10,r2
   211dc:	0022d500 	call	22d50 <__mulsi3>
   211e0:	1445883a 	add	r2,r2,r17
   211e4:	980b883a 	mov	r5,r19
   211e8:	9007883a 	mov	r3,r18
   211ec:	003fc006 	br	210f0 <memcpy+0x38>
   211f0:	500b883a 	mov	r5,r10
   211f4:	003fbe06 	br	210f0 <memcpy+0x38>

000211f8 <memmove>:
   211f8:	defffb04 	addi	sp,sp,-20
   211fc:	dc000015 	stw	r16,0(sp)
   21200:	dfc00415 	stw	ra,16(sp)
   21204:	dcc00315 	stw	r19,12(sp)
   21208:	dc800215 	stw	r18,8(sp)
   2120c:	dc400115 	stw	r17,4(sp)
   21210:	2021883a 	mov	r16,r4
   21214:	300f883a 	mov	r7,r6
   21218:	2900122e 	bgeu	r5,r4,21264 <memmove+0x6c>
   2121c:	2987883a 	add	r3,r5,r6
   21220:	20c0102e 	bgeu	r4,r3,21264 <memmove+0x6c>
   21224:	218b883a 	add	r5,r4,r6
   21228:	1989c83a 	sub	r4,r3,r6
   2122c:	30000526 	beq	r6,zero,21244 <memmove+0x4c>
   21230:	18ffffc4 	addi	r3,r3,-1
   21234:	18800003 	ldbu	r2,0(r3)
   21238:	297fffc4 	addi	r5,r5,-1
   2123c:	28800005 	stb	r2,0(r5)
   21240:	193ffb1e 	bne	r3,r4,21230 <memmove+0x38>
   21244:	8005883a 	mov	r2,r16
   21248:	dfc00417 	ldw	ra,16(sp)
   2124c:	dcc00317 	ldw	r19,12(sp)
   21250:	dc800217 	ldw	r18,8(sp)
   21254:	dc400117 	ldw	r17,4(sp)
   21258:	dc000017 	ldw	r16,0(sp)
   2125c:	dec00504 	addi	sp,sp,20
   21260:	f800283a 	ret
   21264:	008003c4 	movi	r2,15
   21268:	1180422e 	bgeu	r2,r6,21374 <memmove+0x17c>
   2126c:	2c04b03a 	or	r2,r5,r16
   21270:	108000cc 	andi	r2,r2,3
   21274:	10003f1e 	bne	r2,zero,21374 <memmove+0x17c>
   21278:	32bffc04 	addi	r10,r6,-16
   2127c:	5014d13a 	srli	r10,r10,4
   21280:	81000404 	addi	r4,r16,16
   21284:	8007883a 	mov	r3,r16
   21288:	5004913a 	slli	r2,r10,4
   2128c:	280f883a 	mov	r7,r5
   21290:	2089883a 	add	r4,r4,r2
   21294:	38800017 	ldw	r2,0(r7)
   21298:	18c00404 	addi	r3,r3,16
   2129c:	39c00404 	addi	r7,r7,16
   212a0:	18bffc15 	stw	r2,-16(r3)
   212a4:	38bffd17 	ldw	r2,-12(r7)
   212a8:	18bffd15 	stw	r2,-12(r3)
   212ac:	38bffe17 	ldw	r2,-8(r7)
   212b0:	18bffe15 	stw	r2,-8(r3)
   212b4:	38bfff17 	ldw	r2,-4(r7)
   212b8:	18bfff15 	stw	r2,-4(r3)
   212bc:	193ff51e 	bne	r3,r4,21294 <memmove+0x9c>
   212c0:	52800044 	addi	r10,r10,1
   212c4:	5014913a 	slli	r10,r10,4
   212c8:	31c003cc 	andi	r7,r6,15
   212cc:	008000c4 	movi	r2,3
   212d0:	8287883a 	add	r3,r16,r10
   212d4:	2a95883a 	add	r10,r5,r10
   212d8:	11c0282e 	bgeu	r2,r7,2137c <memmove+0x184>
   212dc:	3c7fff04 	addi	r17,r7,-4
   212e0:	8808d0ba 	srli	r4,r17,2
   212e4:	1a400104 	addi	r9,r3,4
   212e8:	180d883a 	mov	r6,r3
   212ec:	2105883a 	add	r2,r4,r4
   212f0:	1085883a 	add	r2,r2,r2
   212f4:	4893883a 	add	r9,r9,r2
   212f8:	5005883a 	mov	r2,r10
   212fc:	12000017 	ldw	r8,0(r2)
   21300:	31800104 	addi	r6,r6,4
   21304:	10800104 	addi	r2,r2,4
   21308:	323fff15 	stw	r8,-4(r6)
   2130c:	327ffb1e 	bne	r6,r9,212fc <memmove+0x104>
   21310:	20800044 	addi	r2,r4,1
   21314:	1085883a 	add	r2,r2,r2
   21318:	1085883a 	add	r2,r2,r2
   2131c:	017fff04 	movi	r5,-4
   21320:	18a5883a 	add	r18,r3,r2
   21324:	50a7883a 	add	r19,r10,r2
   21328:	0022d500 	call	22d50 <__mulsi3>
   2132c:	144f883a 	add	r7,r2,r17
   21330:	980b883a 	mov	r5,r19
   21334:	9007883a 	mov	r3,r18
   21338:	383fc226 	beq	r7,zero,21244 <memmove+0x4c>
   2133c:	19cf883a 	add	r7,r3,r7
   21340:	29800003 	ldbu	r6,0(r5)
   21344:	18c00044 	addi	r3,r3,1
   21348:	29400044 	addi	r5,r5,1
   2134c:	19bfffc5 	stb	r6,-1(r3)
   21350:	19fffb1e 	bne	r3,r7,21340 <memmove+0x148>
   21354:	8005883a 	mov	r2,r16
   21358:	dfc00417 	ldw	ra,16(sp)
   2135c:	dcc00317 	ldw	r19,12(sp)
   21360:	dc800217 	ldw	r18,8(sp)
   21364:	dc400117 	ldw	r17,4(sp)
   21368:	dc000017 	ldw	r16,0(sp)
   2136c:	dec00504 	addi	sp,sp,20
   21370:	f800283a 	ret
   21374:	8007883a 	mov	r3,r16
   21378:	003fef06 	br	21338 <memmove+0x140>
   2137c:	500b883a 	mov	r5,r10
   21380:	003fed06 	br	21338 <memmove+0x140>

00021384 <_realloc_r>:
   21384:	defff504 	addi	sp,sp,-44
   21388:	dd400615 	stw	r21,24(sp)
   2138c:	dc800315 	stw	r18,12(sp)
   21390:	dc000115 	stw	r16,4(sp)
   21394:	dfc00a15 	stw	ra,40(sp)
   21398:	df000915 	stw	fp,36(sp)
   2139c:	ddc00815 	stw	r23,32(sp)
   213a0:	dd800715 	stw	r22,28(sp)
   213a4:	dd000515 	stw	r20,20(sp)
   213a8:	dcc00415 	stw	r19,16(sp)
   213ac:	dc400215 	stw	r17,8(sp)
   213b0:	2821883a 	mov	r16,r5
   213b4:	202b883a 	mov	r21,r4
   213b8:	3025883a 	mov	r18,r6
   213bc:	28009626 	beq	r5,zero,21618 <_realloc_r+0x294>
   213c0:	002333c0 	call	2333c <__malloc_lock>
   213c4:	80bfff17 	ldw	r2,-4(r16)
   213c8:	04ffff04 	movi	r19,-4
   213cc:	90c002c4 	addi	r3,r18,11
   213d0:	01000584 	movi	r4,22
   213d4:	85bffe04 	addi	r22,r16,-8
   213d8:	14e6703a 	and	r19,r2,r19
   213dc:	20c0372e 	bgeu	r4,r3,214bc <_realloc_r+0x138>
   213e0:	047ffe04 	movi	r17,-8
   213e4:	1c62703a 	and	r17,r3,r17
   213e8:	8807883a 	mov	r3,r17
   213ec:	88005a16 	blt	r17,zero,21558 <_realloc_r+0x1d4>
   213f0:	8c805936 	bltu	r17,r18,21558 <_realloc_r+0x1d4>
   213f4:	98c0340e 	bge	r19,r3,214c8 <_realloc_r+0x144>
   213f8:	070000b4 	movhi	fp,2
   213fc:	e7167604 	addi	fp,fp,23000
   21400:	e1400217 	ldw	r5,8(fp)
   21404:	b4c9883a 	add	r4,r22,r19
   21408:	29009026 	beq	r5,r4,2164c <_realloc_r+0x2c8>
   2140c:	21800117 	ldw	r6,4(r4)
   21410:	01ffff84 	movi	r7,-2
   21414:	31ce703a 	and	r7,r6,r7
   21418:	21cf883a 	add	r7,r4,r7
   2141c:	39c00117 	ldw	r7,4(r7)
   21420:	39c0004c 	andi	r7,r7,1
   21424:	38004326 	beq	r7,zero,21534 <_realloc_r+0x1b0>
   21428:	000d883a 	mov	r6,zero
   2142c:	0009883a 	mov	r4,zero
   21430:	1080004c 	andi	r2,r2,1
   21434:	10005a1e 	bne	r2,zero,215a0 <_realloc_r+0x21c>
   21438:	85fffe17 	ldw	r23,-8(r16)
   2143c:	00bfff04 	movi	r2,-4
   21440:	b5efc83a 	sub	r23,r22,r23
   21444:	b9c00117 	ldw	r7,4(r23)
   21448:	388e703a 	and	r7,r7,r2
   2144c:	3ccf883a 	add	r7,r7,r19
   21450:	20005226 	beq	r4,zero,2159c <_realloc_r+0x218>
   21454:	31e9883a 	add	r20,r6,r7
   21458:	2140c726 	beq	r4,r5,21778 <_realloc_r+0x3f4>
   2145c:	a0c04f16 	blt	r20,r3,2159c <_realloc_r+0x218>
   21460:	20800317 	ldw	r2,12(r4)
   21464:	20c00217 	ldw	r3,8(r4)
   21468:	99bfff04 	addi	r6,r19,-4
   2146c:	01000904 	movi	r4,36
   21470:	18800315 	stw	r2,12(r3)
   21474:	10c00215 	stw	r3,8(r2)
   21478:	b8c00217 	ldw	r3,8(r23)
   2147c:	b8800317 	ldw	r2,12(r23)
   21480:	bc800204 	addi	r18,r23,8
   21484:	18800315 	stw	r2,12(r3)
   21488:	10c00215 	stw	r3,8(r2)
   2148c:	2180ed36 	bltu	r4,r6,21844 <_realloc_r+0x4c0>
   21490:	008004c4 	movi	r2,19
   21494:	11809b2e 	bgeu	r2,r6,21704 <_realloc_r+0x380>
   21498:	80800017 	ldw	r2,0(r16)
   2149c:	b8800215 	stw	r2,8(r23)
   214a0:	80800117 	ldw	r2,4(r16)
   214a4:	b8800315 	stw	r2,12(r23)
   214a8:	008006c4 	movi	r2,27
   214ac:	1180f936 	bltu	r2,r6,21894 <_realloc_r+0x510>
   214b0:	b8800404 	addi	r2,r23,16
   214b4:	80c00204 	addi	r3,r16,8
   214b8:	00009406 	br	2170c <_realloc_r+0x388>
   214bc:	00c00404 	movi	r3,16
   214c0:	1823883a 	mov	r17,r3
   214c4:	003fca06 	br	213f0 <_realloc_r+0x6c>
   214c8:	9829883a 	mov	r20,r19
   214cc:	a447c83a 	sub	r3,r20,r17
   214d0:	010003c4 	movi	r4,15
   214d4:	1080004c 	andi	r2,r2,1
   214d8:	20c02336 	bltu	r4,r3,21568 <_realloc_r+0x1e4>
   214dc:	1504b03a 	or	r2,r2,r20
   214e0:	b0800115 	stw	r2,4(r22)
   214e4:	b52d883a 	add	r22,r22,r20
   214e8:	b0800117 	ldw	r2,4(r22)
   214ec:	10800054 	ori	r2,r2,1
   214f0:	b0800115 	stw	r2,4(r22)
   214f4:	a809883a 	mov	r4,r21
   214f8:	002335c0 	call	2335c <__malloc_unlock>
   214fc:	8025883a 	mov	r18,r16
   21500:	9005883a 	mov	r2,r18
   21504:	dfc00a17 	ldw	ra,40(sp)
   21508:	df000917 	ldw	fp,36(sp)
   2150c:	ddc00817 	ldw	r23,32(sp)
   21510:	dd800717 	ldw	r22,28(sp)
   21514:	dd400617 	ldw	r21,24(sp)
   21518:	dd000517 	ldw	r20,20(sp)
   2151c:	dcc00417 	ldw	r19,16(sp)
   21520:	dc800317 	ldw	r18,12(sp)
   21524:	dc400217 	ldw	r17,8(sp)
   21528:	dc000117 	ldw	r16,4(sp)
   2152c:	dec00b04 	addi	sp,sp,44
   21530:	f800283a 	ret
   21534:	01ffff04 	movi	r7,-4
   21538:	31cc703a 	and	r6,r6,r7
   2153c:	34e9883a 	add	r20,r6,r19
   21540:	a0ffbb16 	blt	r20,r3,21430 <_realloc_r+0xac>
   21544:	20c00317 	ldw	r3,12(r4)
   21548:	21000217 	ldw	r4,8(r4)
   2154c:	20c00315 	stw	r3,12(r4)
   21550:	19000215 	stw	r4,8(r3)
   21554:	003fdd06 	br	214cc <_realloc_r+0x148>
   21558:	00800304 	movi	r2,12
   2155c:	a8800015 	stw	r2,0(r21)
   21560:	0025883a 	mov	r18,zero
   21564:	003fe606 	br	21500 <_realloc_r+0x17c>
   21568:	1444b03a 	or	r2,r2,r17
   2156c:	b0800115 	stw	r2,4(r22)
   21570:	b44b883a 	add	r5,r22,r17
   21574:	18800054 	ori	r2,r3,1
   21578:	28800115 	stw	r2,4(r5)
   2157c:	28c7883a 	add	r3,r5,r3
   21580:	18800117 	ldw	r2,4(r3)
   21584:	a809883a 	mov	r4,r21
   21588:	29400204 	addi	r5,r5,8
   2158c:	10800054 	ori	r2,r2,1
   21590:	18800115 	stw	r2,4(r3)
   21594:	00221980 	call	22198 <_free_r>
   21598:	003fd606 	br	214f4 <_realloc_r+0x170>
   2159c:	38c0330e 	bge	r7,r3,2166c <_realloc_r+0x2e8>
   215a0:	900b883a 	mov	r5,r18
   215a4:	a809883a 	mov	r4,r21
   215a8:	002083c0 	call	2083c <_malloc_r>
   215ac:	1025883a 	mov	r18,r2
   215b0:	10001626 	beq	r2,zero,2160c <_realloc_r+0x288>
   215b4:	80bfff17 	ldw	r2,-4(r16)
   215b8:	00ffff84 	movi	r3,-2
   215bc:	913ffe04 	addi	r4,r18,-8
   215c0:	10c6703a 	and	r3,r2,r3
   215c4:	b0c7883a 	add	r3,r22,r3
   215c8:	20c09926 	beq	r4,r3,21830 <_realloc_r+0x4ac>
   215cc:	99bfff04 	addi	r6,r19,-4
   215d0:	00800904 	movi	r2,36
   215d4:	11806436 	bltu	r2,r6,21768 <_realloc_r+0x3e4>
   215d8:	00c004c4 	movi	r3,19
   215dc:	19804036 	bltu	r3,r6,216e0 <_realloc_r+0x35c>
   215e0:	9005883a 	mov	r2,r18
   215e4:	8007883a 	mov	r3,r16
   215e8:	19000017 	ldw	r4,0(r3)
   215ec:	11000015 	stw	r4,0(r2)
   215f0:	19000117 	ldw	r4,4(r3)
   215f4:	11000115 	stw	r4,4(r2)
   215f8:	18c00217 	ldw	r3,8(r3)
   215fc:	10c00215 	stw	r3,8(r2)
   21600:	a809883a 	mov	r4,r21
   21604:	800b883a 	mov	r5,r16
   21608:	00221980 	call	22198 <_free_r>
   2160c:	a809883a 	mov	r4,r21
   21610:	002335c0 	call	2335c <__malloc_unlock>
   21614:	003fba06 	br	21500 <_realloc_r+0x17c>
   21618:	300b883a 	mov	r5,r6
   2161c:	dfc00a17 	ldw	ra,40(sp)
   21620:	df000917 	ldw	fp,36(sp)
   21624:	ddc00817 	ldw	r23,32(sp)
   21628:	dd800717 	ldw	r22,28(sp)
   2162c:	dd400617 	ldw	r21,24(sp)
   21630:	dd000517 	ldw	r20,20(sp)
   21634:	dcc00417 	ldw	r19,16(sp)
   21638:	dc800317 	ldw	r18,12(sp)
   2163c:	dc400217 	ldw	r17,8(sp)
   21640:	dc000117 	ldw	r16,4(sp)
   21644:	dec00b04 	addi	sp,sp,44
   21648:	002083c1 	jmpi	2083c <_malloc_r>
   2164c:	29800117 	ldw	r6,4(r5)
   21650:	013fff04 	movi	r4,-4
   21654:	89c00404 	addi	r7,r17,16
   21658:	310c703a 	and	r6,r6,r4
   2165c:	34c9883a 	add	r4,r6,r19
   21660:	21c0340e 	bge	r4,r7,21734 <_realloc_r+0x3b0>
   21664:	2809883a 	mov	r4,r5
   21668:	003f7106 	br	21430 <_realloc_r+0xac>
   2166c:	b8800317 	ldw	r2,12(r23)
   21670:	b8c00217 	ldw	r3,8(r23)
   21674:	99bfff04 	addi	r6,r19,-4
   21678:	01000904 	movi	r4,36
   2167c:	18800315 	stw	r2,12(r3)
   21680:	10c00215 	stw	r3,8(r2)
   21684:	bc800204 	addi	r18,r23,8
   21688:	21807836 	bltu	r4,r6,2186c <_realloc_r+0x4e8>
   2168c:	008004c4 	movi	r2,19
   21690:	1180732e 	bgeu	r2,r6,21860 <_realloc_r+0x4dc>
   21694:	80800017 	ldw	r2,0(r16)
   21698:	b8800215 	stw	r2,8(r23)
   2169c:	80800117 	ldw	r2,4(r16)
   216a0:	b8800315 	stw	r2,12(r23)
   216a4:	008006c4 	movi	r2,27
   216a8:	11808936 	bltu	r2,r6,218d0 <_realloc_r+0x54c>
   216ac:	b8800404 	addi	r2,r23,16
   216b0:	80c00204 	addi	r3,r16,8
   216b4:	19000017 	ldw	r4,0(r3)
   216b8:	9021883a 	mov	r16,r18
   216bc:	3829883a 	mov	r20,r7
   216c0:	11000015 	stw	r4,0(r2)
   216c4:	19000117 	ldw	r4,4(r3)
   216c8:	b82d883a 	mov	r22,r23
   216cc:	11000115 	stw	r4,4(r2)
   216d0:	18c00217 	ldw	r3,8(r3)
   216d4:	10c00215 	stw	r3,8(r2)
   216d8:	b8800117 	ldw	r2,4(r23)
   216dc:	003f7b06 	br	214cc <_realloc_r+0x148>
   216e0:	80c00017 	ldw	r3,0(r16)
   216e4:	90c00015 	stw	r3,0(r18)
   216e8:	80c00117 	ldw	r3,4(r16)
   216ec:	90c00115 	stw	r3,4(r18)
   216f0:	00c006c4 	movi	r3,27
   216f4:	19804636 	bltu	r3,r6,21810 <_realloc_r+0x48c>
   216f8:	90800204 	addi	r2,r18,8
   216fc:	80c00204 	addi	r3,r16,8
   21700:	003fb906 	br	215e8 <_realloc_r+0x264>
   21704:	9005883a 	mov	r2,r18
   21708:	8007883a 	mov	r3,r16
   2170c:	19000017 	ldw	r4,0(r3)
   21710:	9021883a 	mov	r16,r18
   21714:	b82d883a 	mov	r22,r23
   21718:	11000015 	stw	r4,0(r2)
   2171c:	19000117 	ldw	r4,4(r3)
   21720:	11000115 	stw	r4,4(r2)
   21724:	18c00217 	ldw	r3,8(r3)
   21728:	10c00215 	stw	r3,8(r2)
   2172c:	b8800117 	ldw	r2,4(r23)
   21730:	003f6606 	br	214cc <_realloc_r+0x148>
   21734:	2445c83a 	sub	r2,r4,r17
   21738:	b46d883a 	add	r22,r22,r17
   2173c:	10800054 	ori	r2,r2,1
   21740:	b0800115 	stw	r2,4(r22)
   21744:	80bfff17 	ldw	r2,-4(r16)
   21748:	a809883a 	mov	r4,r21
   2174c:	e5800215 	stw	r22,8(fp)
   21750:	1080004c 	andi	r2,r2,1
   21754:	88a2b03a 	or	r17,r17,r2
   21758:	847fff15 	stw	r17,-4(r16)
   2175c:	002335c0 	call	2335c <__malloc_unlock>
   21760:	8025883a 	mov	r18,r16
   21764:	003f6606 	br	21500 <_realloc_r+0x17c>
   21768:	9009883a 	mov	r4,r18
   2176c:	800b883a 	mov	r5,r16
   21770:	00211f80 	call	211f8 <memmove>
   21774:	003fa206 	br	21600 <_realloc_r+0x27c>
   21778:	88800404 	addi	r2,r17,16
   2177c:	a0bf8716 	blt	r20,r2,2159c <_realloc_r+0x218>
   21780:	b8800317 	ldw	r2,12(r23)
   21784:	b8c00217 	ldw	r3,8(r23)
   21788:	99bfff04 	addi	r6,r19,-4
   2178c:	01000904 	movi	r4,36
   21790:	18800315 	stw	r2,12(r3)
   21794:	10c00215 	stw	r3,8(r2)
   21798:	bc800204 	addi	r18,r23,8
   2179c:	21806536 	bltu	r4,r6,21934 <_realloc_r+0x5b0>
   217a0:	008004c4 	movi	r2,19
   217a4:	1180592e 	bgeu	r2,r6,2190c <_realloc_r+0x588>
   217a8:	80800017 	ldw	r2,0(r16)
   217ac:	b8800215 	stw	r2,8(r23)
   217b0:	80800117 	ldw	r2,4(r16)
   217b4:	b8800315 	stw	r2,12(r23)
   217b8:	008006c4 	movi	r2,27
   217bc:	11806136 	bltu	r2,r6,21944 <_realloc_r+0x5c0>
   217c0:	b8800404 	addi	r2,r23,16
   217c4:	80c00204 	addi	r3,r16,8
   217c8:	19000017 	ldw	r4,0(r3)
   217cc:	11000015 	stw	r4,0(r2)
   217d0:	19000117 	ldw	r4,4(r3)
   217d4:	11000115 	stw	r4,4(r2)
   217d8:	18c00217 	ldw	r3,8(r3)
   217dc:	10c00215 	stw	r3,8(r2)
   217e0:	a447c83a 	sub	r3,r20,r17
   217e4:	bc45883a 	add	r2,r23,r17
   217e8:	18c00054 	ori	r3,r3,1
   217ec:	10c00115 	stw	r3,4(r2)
   217f0:	b8c00117 	ldw	r3,4(r23)
   217f4:	e0800215 	stw	r2,8(fp)
   217f8:	a809883a 	mov	r4,r21
   217fc:	1880004c 	andi	r2,r3,1
   21800:	88a2b03a 	or	r17,r17,r2
   21804:	bc400115 	stw	r17,4(r23)
   21808:	002335c0 	call	2335c <__malloc_unlock>
   2180c:	003f3c06 	br	21500 <_realloc_r+0x17c>
   21810:	80c00217 	ldw	r3,8(r16)
   21814:	90c00215 	stw	r3,8(r18)
   21818:	80c00317 	ldw	r3,12(r16)
   2181c:	90c00315 	stw	r3,12(r18)
   21820:	30802426 	beq	r6,r2,218b4 <_realloc_r+0x530>
   21824:	90800404 	addi	r2,r18,16
   21828:	80c00404 	addi	r3,r16,16
   2182c:	003f6e06 	br	215e8 <_realloc_r+0x264>
   21830:	953fff17 	ldw	r20,-4(r18)
   21834:	00ffff04 	movi	r3,-4
   21838:	a0e8703a 	and	r20,r20,r3
   2183c:	a4e9883a 	add	r20,r20,r19
   21840:	003f2206 	br	214cc <_realloc_r+0x148>
   21844:	800b883a 	mov	r5,r16
   21848:	9009883a 	mov	r4,r18
   2184c:	00211f80 	call	211f8 <memmove>
   21850:	9021883a 	mov	r16,r18
   21854:	b8800117 	ldw	r2,4(r23)
   21858:	b82d883a 	mov	r22,r23
   2185c:	003f1b06 	br	214cc <_realloc_r+0x148>
   21860:	9005883a 	mov	r2,r18
   21864:	8007883a 	mov	r3,r16
   21868:	003f9206 	br	216b4 <_realloc_r+0x330>
   2186c:	800b883a 	mov	r5,r16
   21870:	9009883a 	mov	r4,r18
   21874:	d9c00015 	stw	r7,0(sp)
   21878:	00211f80 	call	211f8 <memmove>
   2187c:	d9c00017 	ldw	r7,0(sp)
   21880:	9021883a 	mov	r16,r18
   21884:	b8800117 	ldw	r2,4(r23)
   21888:	3829883a 	mov	r20,r7
   2188c:	b82d883a 	mov	r22,r23
   21890:	003f0e06 	br	214cc <_realloc_r+0x148>
   21894:	80800217 	ldw	r2,8(r16)
   21898:	b8800415 	stw	r2,16(r23)
   2189c:	80800317 	ldw	r2,12(r16)
   218a0:	b8800515 	stw	r2,20(r23)
   218a4:	31001226 	beq	r6,r4,218f0 <_realloc_r+0x56c>
   218a8:	b8800604 	addi	r2,r23,24
   218ac:	80c00404 	addi	r3,r16,16
   218b0:	003f9606 	br	2170c <_realloc_r+0x388>
   218b4:	81000417 	ldw	r4,16(r16)
   218b8:	90800604 	addi	r2,r18,24
   218bc:	80c00604 	addi	r3,r16,24
   218c0:	91000415 	stw	r4,16(r18)
   218c4:	81000517 	ldw	r4,20(r16)
   218c8:	91000515 	stw	r4,20(r18)
   218cc:	003f4606 	br	215e8 <_realloc_r+0x264>
   218d0:	80800217 	ldw	r2,8(r16)
   218d4:	b8800415 	stw	r2,16(r23)
   218d8:	80800317 	ldw	r2,12(r16)
   218dc:	b8800515 	stw	r2,20(r23)
   218e0:	31000d26 	beq	r6,r4,21918 <_realloc_r+0x594>
   218e4:	b8800604 	addi	r2,r23,24
   218e8:	80c00404 	addi	r3,r16,16
   218ec:	003f7106 	br	216b4 <_realloc_r+0x330>
   218f0:	81000417 	ldw	r4,16(r16)
   218f4:	b8800804 	addi	r2,r23,32
   218f8:	80c00604 	addi	r3,r16,24
   218fc:	b9000615 	stw	r4,24(r23)
   21900:	81000517 	ldw	r4,20(r16)
   21904:	b9000715 	stw	r4,28(r23)
   21908:	003f8006 	br	2170c <_realloc_r+0x388>
   2190c:	9005883a 	mov	r2,r18
   21910:	8007883a 	mov	r3,r16
   21914:	003fac06 	br	217c8 <_realloc_r+0x444>
   21918:	81000417 	ldw	r4,16(r16)
   2191c:	b8800804 	addi	r2,r23,32
   21920:	80c00604 	addi	r3,r16,24
   21924:	b9000615 	stw	r4,24(r23)
   21928:	81000517 	ldw	r4,20(r16)
   2192c:	b9000715 	stw	r4,28(r23)
   21930:	003f6006 	br	216b4 <_realloc_r+0x330>
   21934:	9009883a 	mov	r4,r18
   21938:	800b883a 	mov	r5,r16
   2193c:	00211f80 	call	211f8 <memmove>
   21940:	003fa706 	br	217e0 <_realloc_r+0x45c>
   21944:	80800217 	ldw	r2,8(r16)
   21948:	b8800415 	stw	r2,16(r23)
   2194c:	80800317 	ldw	r2,12(r16)
   21950:	b8800515 	stw	r2,20(r23)
   21954:	31000326 	beq	r6,r4,21964 <_realloc_r+0x5e0>
   21958:	b8800604 	addi	r2,r23,24
   2195c:	80c00404 	addi	r3,r16,16
   21960:	003f9906 	br	217c8 <_realloc_r+0x444>
   21964:	81000417 	ldw	r4,16(r16)
   21968:	b8800804 	addi	r2,r23,32
   2196c:	80c00604 	addi	r3,r16,24
   21970:	b9000615 	stw	r4,24(r23)
   21974:	81000517 	ldw	r4,20(r16)
   21978:	b9000715 	stw	r4,28(r23)
   2197c:	003f9206 	br	217c8 <_realloc_r+0x444>

00021980 <_sbrk_r>:
   21980:	defffd04 	addi	sp,sp,-12
   21984:	dc400115 	stw	r17,4(sp)
   21988:	dc000015 	stw	r16,0(sp)
   2198c:	2023883a 	mov	r17,r4
   21990:	040000f4 	movhi	r16,3
   21994:	84229d04 	addi	r16,r16,-30092
   21998:	2809883a 	mov	r4,r5
   2199c:	dfc00215 	stw	ra,8(sp)
   219a0:	80000015 	stw	zero,0(r16)
   219a4:	00235400 	call	23540 <sbrk>
   219a8:	00ffffc4 	movi	r3,-1
   219ac:	10c00526 	beq	r2,r3,219c4 <_sbrk_r+0x44>
   219b0:	dfc00217 	ldw	ra,8(sp)
   219b4:	dc400117 	ldw	r17,4(sp)
   219b8:	dc000017 	ldw	r16,0(sp)
   219bc:	dec00304 	addi	sp,sp,12
   219c0:	f800283a 	ret
   219c4:	80c00017 	ldw	r3,0(r16)
   219c8:	183ff926 	beq	r3,zero,219b0 <_sbrk_r+0x30>
   219cc:	88c00015 	stw	r3,0(r17)
   219d0:	dfc00217 	ldw	ra,8(sp)
   219d4:	dc400117 	ldw	r17,4(sp)
   219d8:	dc000017 	ldw	r16,0(sp)
   219dc:	dec00304 	addi	sp,sp,12
   219e0:	f800283a 	ret

000219e4 <__swsetup_r>:
   219e4:	008000b4 	movhi	r2,2
   219e8:	109bfb04 	addi	r2,r2,28652
   219ec:	10800017 	ldw	r2,0(r2)
   219f0:	defffd04 	addi	sp,sp,-12
   219f4:	dc400115 	stw	r17,4(sp)
   219f8:	dc000015 	stw	r16,0(sp)
   219fc:	dfc00215 	stw	ra,8(sp)
   21a00:	2023883a 	mov	r17,r4
   21a04:	2821883a 	mov	r16,r5
   21a08:	10000226 	beq	r2,zero,21a14 <__swsetup_r+0x30>
   21a0c:	10c00e17 	ldw	r3,56(r2)
   21a10:	18003d26 	beq	r3,zero,21b08 <__swsetup_r+0x124>
   21a14:	8080030b 	ldhu	r2,12(r16)
   21a18:	10c0020c 	andi	r3,r2,8
   21a1c:	18ffffcc 	andi	r3,r3,65535
   21a20:	18e0001c 	xori	r3,r3,32768
   21a24:	18e00004 	addi	r3,r3,-32768
   21a28:	18001226 	beq	r3,zero,21a74 <__swsetup_r+0x90>
   21a2c:	80c00417 	ldw	r3,16(r16)
   21a30:	18001f26 	beq	r3,zero,21ab0 <__swsetup_r+0xcc>
   21a34:	1100004c 	andi	r4,r2,1
   21a38:	2000261e 	bne	r4,zero,21ad4 <__swsetup_r+0xf0>
   21a3c:	1080008c 	andi	r2,r2,2
   21a40:	10bfffcc 	andi	r2,r2,65535
   21a44:	10a0001c 	xori	r2,r2,32768
   21a48:	10a00004 	addi	r2,r2,-32768
   21a4c:	1000311e 	bne	r2,zero,21b14 <__swsetup_r+0x130>
   21a50:	80800517 	ldw	r2,20(r16)
   21a54:	80800215 	stw	r2,8(r16)
   21a58:	18002326 	beq	r3,zero,21ae8 <__swsetup_r+0x104>
   21a5c:	0005883a 	mov	r2,zero
   21a60:	dfc00217 	ldw	ra,8(sp)
   21a64:	dc400117 	ldw	r17,4(sp)
   21a68:	dc000017 	ldw	r16,0(sp)
   21a6c:	dec00304 	addi	sp,sp,12
   21a70:	f800283a 	ret
   21a74:	10c0040c 	andi	r3,r2,16
   21a78:	18ffffcc 	andi	r3,r3,65535
   21a7c:	18e0001c 	xori	r3,r3,32768
   21a80:	18e00004 	addi	r3,r3,-32768
   21a84:	18001e26 	beq	r3,zero,21b00 <__swsetup_r+0x11c>
   21a88:	10c0010c 	andi	r3,r2,4
   21a8c:	18ffffcc 	andi	r3,r3,65535
   21a90:	18e0001c 	xori	r3,r3,32768
   21a94:	18e00004 	addi	r3,r3,-32768
   21a98:	1800211e 	bne	r3,zero,21b20 <__swsetup_r+0x13c>
   21a9c:	80c00417 	ldw	r3,16(r16)
   21aa0:	11400214 	ori	r5,r2,8
   21aa4:	8140030d 	sth	r5,12(r16)
   21aa8:	2805883a 	mov	r2,r5
   21aac:	183fe11e 	bne	r3,zero,21a34 <__swsetup_r+0x50>
   21ab0:	1140a00c 	andi	r5,r2,640
   21ab4:	01008004 	movi	r4,512
   21ab8:	293fde26 	beq	r5,r4,21a34 <__swsetup_r+0x50>
   21abc:	8809883a 	mov	r4,r17
   21ac0:	800b883a 	mov	r5,r16
   21ac4:	00225c80 	call	225c8 <__smakebuf_r>
   21ac8:	8080030b 	ldhu	r2,12(r16)
   21acc:	80c00417 	ldw	r3,16(r16)
   21ad0:	003fd806 	br	21a34 <__swsetup_r+0x50>
   21ad4:	80800517 	ldw	r2,20(r16)
   21ad8:	80000215 	stw	zero,8(r16)
   21adc:	0085c83a 	sub	r2,zero,r2
   21ae0:	80800615 	stw	r2,24(r16)
   21ae4:	183fdd1e 	bne	r3,zero,21a5c <__swsetup_r+0x78>
   21ae8:	8080030b 	ldhu	r2,12(r16)
   21aec:	1080200c 	andi	r2,r2,128
   21af0:	10bfffcc 	andi	r2,r2,65535
   21af4:	10a0001c 	xori	r2,r2,32768
   21af8:	10a00004 	addi	r2,r2,-32768
   21afc:	103fd826 	beq	r2,zero,21a60 <__swsetup_r+0x7c>
   21b00:	00bfffc4 	movi	r2,-1
   21b04:	003fd606 	br	21a60 <__swsetup_r+0x7c>
   21b08:	1009883a 	mov	r4,r2
   21b0c:	0021e140 	call	21e14 <__sinit>
   21b10:	003fc006 	br	21a14 <__swsetup_r+0x30>
   21b14:	0005883a 	mov	r2,zero
   21b18:	80800215 	stw	r2,8(r16)
   21b1c:	003fce06 	br	21a58 <__swsetup_r+0x74>
   21b20:	81400c17 	ldw	r5,48(r16)
   21b24:	28000626 	beq	r5,zero,21b40 <__swsetup_r+0x15c>
   21b28:	80c01004 	addi	r3,r16,64
   21b2c:	28c00326 	beq	r5,r3,21b3c <__swsetup_r+0x158>
   21b30:	8809883a 	mov	r4,r17
   21b34:	00221980 	call	22198 <_free_r>
   21b38:	8080030b 	ldhu	r2,12(r16)
   21b3c:	80000c15 	stw	zero,48(r16)
   21b40:	80c00417 	ldw	r3,16(r16)
   21b44:	013ff6c4 	movi	r4,-37
   21b48:	2084703a 	and	r2,r4,r2
   21b4c:	80000115 	stw	zero,4(r16)
   21b50:	80c00015 	stw	r3,0(r16)
   21b54:	003fd206 	br	21aa0 <__swsetup_r+0xbc>

00021b58 <_fflush_r>:
   21b58:	defffb04 	addi	sp,sp,-20
   21b5c:	dcc00315 	stw	r19,12(sp)
   21b60:	dc400115 	stw	r17,4(sp)
   21b64:	dfc00415 	stw	ra,16(sp)
   21b68:	dc800215 	stw	r18,8(sp)
   21b6c:	dc000015 	stw	r16,0(sp)
   21b70:	2027883a 	mov	r19,r4
   21b74:	2823883a 	mov	r17,r5
   21b78:	20000226 	beq	r4,zero,21b84 <_fflush_r+0x2c>
   21b7c:	20800e17 	ldw	r2,56(r4)
   21b80:	10005726 	beq	r2,zero,21ce0 <_fflush_r+0x188>
   21b84:	8880030b 	ldhu	r2,12(r17)
   21b88:	10c0020c 	andi	r3,r2,8
   21b8c:	18ffffcc 	andi	r3,r3,65535
   21b90:	18e0001c 	xori	r3,r3,32768
   21b94:	18e00004 	addi	r3,r3,-32768
   21b98:	1800311e 	bne	r3,zero,21c60 <_fflush_r+0x108>
   21b9c:	89000117 	ldw	r4,4(r17)
   21ba0:	10c20014 	ori	r3,r2,2048
   21ba4:	88c0030d 	sth	r3,12(r17)
   21ba8:	180b883a 	mov	r5,r3
   21bac:	0100520e 	bge	zero,r4,21cf8 <_fflush_r+0x1a0>
   21bb0:	88c00a17 	ldw	r3,40(r17)
   21bb4:	18002226 	beq	r3,zero,21c40 <_fflush_r+0xe8>
   21bb8:	1084000c 	andi	r2,r2,4096
   21bbc:	10bfffcc 	andi	r2,r2,65535
   21bc0:	10a0001c 	xori	r2,r2,32768
   21bc4:	10a00004 	addi	r2,r2,-32768
   21bc8:	10004e26 	beq	r2,zero,21d04 <_fflush_r+0x1ac>
   21bcc:	8c001417 	ldw	r16,80(r17)
   21bd0:	2940010c 	andi	r5,r5,4
   21bd4:	297fffcc 	andi	r5,r5,65535
   21bd8:	2960001c 	xori	r5,r5,32768
   21bdc:	29600004 	addi	r5,r5,-32768
   21be0:	28000626 	beq	r5,zero,21bfc <_fflush_r+0xa4>
   21be4:	89000117 	ldw	r4,4(r17)
   21be8:	88800c17 	ldw	r2,48(r17)
   21bec:	8121c83a 	sub	r16,r16,r4
   21bf0:	10000226 	beq	r2,zero,21bfc <_fflush_r+0xa4>
   21bf4:	88800f17 	ldw	r2,60(r17)
   21bf8:	80a1c83a 	sub	r16,r16,r2
   21bfc:	89400717 	ldw	r5,28(r17)
   21c00:	9809883a 	mov	r4,r19
   21c04:	800d883a 	mov	r6,r16
   21c08:	000f883a 	mov	r7,zero
   21c0c:	183ee83a 	callr	r3
   21c10:	8080281e 	bne	r16,r2,21cb4 <_fflush_r+0x15c>
   21c14:	8880030b 	ldhu	r2,12(r17)
   21c18:	88c00417 	ldw	r3,16(r17)
   21c1c:	88000115 	stw	zero,4(r17)
   21c20:	113dffcc 	andi	r4,r2,63487
   21c24:	1084000c 	andi	r2,r2,4096
   21c28:	10bfffcc 	andi	r2,r2,65535
   21c2c:	10a0001c 	xori	r2,r2,32768
   21c30:	8900030d 	sth	r4,12(r17)
   21c34:	88c00015 	stw	r3,0(r17)
   21c38:	10a00004 	addi	r2,r2,-32768
   21c3c:	10002c1e 	bne	r2,zero,21cf0 <_fflush_r+0x198>
   21c40:	0005883a 	mov	r2,zero
   21c44:	dfc00417 	ldw	ra,16(sp)
   21c48:	dcc00317 	ldw	r19,12(sp)
   21c4c:	dc800217 	ldw	r18,8(sp)
   21c50:	dc400117 	ldw	r17,4(sp)
   21c54:	dc000017 	ldw	r16,0(sp)
   21c58:	dec00504 	addi	sp,sp,20
   21c5c:	f800283a 	ret
   21c60:	8c800417 	ldw	r18,16(r17)
   21c64:	903ff626 	beq	r18,zero,21c40 <_fflush_r+0xe8>
   21c68:	8c000017 	ldw	r16,0(r17)
   21c6c:	108000cc 	andi	r2,r2,3
   21c70:	8c800015 	stw	r18,0(r17)
   21c74:	84a1c83a 	sub	r16,r16,r18
   21c78:	10001b1e 	bne	r2,zero,21ce8 <_fflush_r+0x190>
   21c7c:	88800517 	ldw	r2,20(r17)
   21c80:	88800215 	stw	r2,8(r17)
   21c84:	04000316 	blt	zero,r16,21c94 <_fflush_r+0x13c>
   21c88:	003fed06 	br	21c40 <_fflush_r+0xe8>
   21c8c:	90a5883a 	add	r18,r18,r2
   21c90:	043feb0e 	bge	zero,r16,21c40 <_fflush_r+0xe8>
   21c94:	88800917 	ldw	r2,36(r17)
   21c98:	89400717 	ldw	r5,28(r17)
   21c9c:	800f883a 	mov	r7,r16
   21ca0:	900d883a 	mov	r6,r18
   21ca4:	9809883a 	mov	r4,r19
   21ca8:	103ee83a 	callr	r2
   21cac:	80a1c83a 	sub	r16,r16,r2
   21cb0:	00bff616 	blt	zero,r2,21c8c <_fflush_r+0x134>
   21cb4:	88c0030b 	ldhu	r3,12(r17)
   21cb8:	00bfffc4 	movi	r2,-1
   21cbc:	18c01014 	ori	r3,r3,64
   21cc0:	88c0030d 	sth	r3,12(r17)
   21cc4:	dfc00417 	ldw	ra,16(sp)
   21cc8:	dcc00317 	ldw	r19,12(sp)
   21ccc:	dc800217 	ldw	r18,8(sp)
   21cd0:	dc400117 	ldw	r17,4(sp)
   21cd4:	dc000017 	ldw	r16,0(sp)
   21cd8:	dec00504 	addi	sp,sp,20
   21cdc:	f800283a 	ret
   21ce0:	0021e140 	call	21e14 <__sinit>
   21ce4:	003fa706 	br	21b84 <_fflush_r+0x2c>
   21ce8:	0005883a 	mov	r2,zero
   21cec:	003fe406 	br	21c80 <_fflush_r+0x128>
   21cf0:	8c001415 	stw	r16,80(r17)
   21cf4:	003fd206 	br	21c40 <_fflush_r+0xe8>
   21cf8:	88c00f17 	ldw	r3,60(r17)
   21cfc:	00ffac16 	blt	zero,r3,21bb0 <_fflush_r+0x58>
   21d00:	003fcf06 	br	21c40 <_fflush_r+0xe8>
   21d04:	89400717 	ldw	r5,28(r17)
   21d08:	9809883a 	mov	r4,r19
   21d0c:	000d883a 	mov	r6,zero
   21d10:	01c00044 	movi	r7,1
   21d14:	183ee83a 	callr	r3
   21d18:	1021883a 	mov	r16,r2
   21d1c:	00bfffc4 	movi	r2,-1
   21d20:	80800326 	beq	r16,r2,21d30 <_fflush_r+0x1d8>
   21d24:	8940030b 	ldhu	r5,12(r17)
   21d28:	88c00a17 	ldw	r3,40(r17)
   21d2c:	003fa806 	br	21bd0 <_fflush_r+0x78>
   21d30:	98c00017 	ldw	r3,0(r19)
   21d34:	00800744 	movi	r2,29
   21d38:	18bfde1e 	bne	r3,r2,21cb4 <_fflush_r+0x15c>
   21d3c:	003fc006 	br	21c40 <_fflush_r+0xe8>

00021d40 <fflush>:
   21d40:	200b883a 	mov	r5,r4
   21d44:	20000426 	beq	r4,zero,21d58 <fflush+0x18>
   21d48:	008000b4 	movhi	r2,2
   21d4c:	109bfb04 	addi	r2,r2,28652
   21d50:	11000017 	ldw	r4,0(r2)
   21d54:	0021b581 	jmpi	21b58 <_fflush_r>
   21d58:	008000b4 	movhi	r2,2
   21d5c:	109bfa04 	addi	r2,r2,28648
   21d60:	11000017 	ldw	r4,0(r2)
   21d64:	014000b4 	movhi	r5,2
   21d68:	2946d604 	addi	r5,r5,7000
   21d6c:	00225101 	jmpi	22510 <_fwalk_reent>

00021d70 <__fp_lock>:
   21d70:	0005883a 	mov	r2,zero
   21d74:	f800283a 	ret

00021d78 <__fp_unlock>:
   21d78:	0005883a 	mov	r2,zero
   21d7c:	f800283a 	ret

00021d80 <_cleanup_r>:
   21d80:	014000b4 	movhi	r5,2
   21d84:	294ae604 	addi	r5,r5,11160
   21d88:	00224681 	jmpi	22468 <_fwalk>

00021d8c <__sfmoreglue>:
   21d8c:	defffc04 	addi	sp,sp,-16
   21d90:	dc800215 	stw	r18,8(sp)
   21d94:	2825883a 	mov	r18,r5
   21d98:	dc000015 	stw	r16,0(sp)
   21d9c:	01401704 	movi	r5,92
   21da0:	2021883a 	mov	r16,r4
   21da4:	9009883a 	mov	r4,r18
   21da8:	dfc00315 	stw	ra,12(sp)
   21dac:	dc400115 	stw	r17,4(sp)
   21db0:	0022d500 	call	22d50 <__mulsi3>
   21db4:	8009883a 	mov	r4,r16
   21db8:	11400304 	addi	r5,r2,12
   21dbc:	1023883a 	mov	r17,r2
   21dc0:	002083c0 	call	2083c <_malloc_r>
   21dc4:	1021883a 	mov	r16,r2
   21dc8:	10000726 	beq	r2,zero,21de8 <__sfmoreglue+0x5c>
   21dcc:	11000304 	addi	r4,r2,12
   21dd0:	10000015 	stw	zero,0(r2)
   21dd4:	14800115 	stw	r18,4(r2)
   21dd8:	11000215 	stw	r4,8(r2)
   21ddc:	000b883a 	mov	r5,zero
   21de0:	880d883a 	mov	r6,r17
   21de4:	00227700 	call	22770 <memset>
   21de8:	8005883a 	mov	r2,r16
   21dec:	dfc00317 	ldw	ra,12(sp)
   21df0:	dc800217 	ldw	r18,8(sp)
   21df4:	dc400117 	ldw	r17,4(sp)
   21df8:	dc000017 	ldw	r16,0(sp)
   21dfc:	dec00404 	addi	sp,sp,16
   21e00:	f800283a 	ret

00021e04 <_cleanup>:
   21e04:	008000b4 	movhi	r2,2
   21e08:	109bfa04 	addi	r2,r2,28648
   21e0c:	11000017 	ldw	r4,0(r2)
   21e10:	0021d801 	jmpi	21d80 <_cleanup_r>

00021e14 <__sinit>:
   21e14:	20800e17 	ldw	r2,56(r4)
   21e18:	1000401e 	bne	r2,zero,21f1c <__sinit+0x108>
   21e1c:	21400117 	ldw	r5,4(r4)
   21e20:	018000b4 	movhi	r6,2
   21e24:	31876004 	addi	r6,r6,7552
   21e28:	20c00217 	ldw	r3,8(r4)
   21e2c:	21800f15 	stw	r6,60(r4)
   21e30:	2080bb04 	addi	r2,r4,748
   21e34:	02400044 	movi	r9,1
   21e38:	018000c4 	movi	r6,3
   21e3c:	2180b915 	stw	r6,740(r4)
   21e40:	2080ba15 	stw	r2,744(r4)
   21e44:	22400e15 	stw	r9,56(r4)
   21e48:	20800317 	ldw	r2,12(r4)
   21e4c:	2000b815 	stw	zero,736(r4)
   21e50:	020000b4 	movhi	r8,2
   21e54:	420a1304 	addi	r8,r8,10316
   21e58:	01c000b4 	movhi	r7,2
   21e5c:	39ca2804 	addi	r7,r7,10400
   21e60:	018000b4 	movhi	r6,2
   21e64:	318a4a04 	addi	r6,r6,10536
   21e68:	010000b4 	movhi	r4,2
   21e6c:	210a6104 	addi	r4,r4,10628
   21e70:	02800104 	movi	r10,4
   21e74:	28000015 	stw	zero,0(r5)
   21e78:	28000115 	stw	zero,4(r5)
   21e7c:	28000215 	stw	zero,8(r5)
   21e80:	2a80030d 	sth	r10,12(r5)
   21e84:	2800038d 	sth	zero,14(r5)
   21e88:	28000415 	stw	zero,16(r5)
   21e8c:	28000515 	stw	zero,20(r5)
   21e90:	28000615 	stw	zero,24(r5)
   21e94:	29400715 	stw	r5,28(r5)
   21e98:	2a000815 	stw	r8,32(r5)
   21e9c:	29c00915 	stw	r7,36(r5)
   21ea0:	29800a15 	stw	r6,40(r5)
   21ea4:	29000b15 	stw	r4,44(r5)
   21ea8:	01400284 	movi	r5,10
   21eac:	18000015 	stw	zero,0(r3)
   21eb0:	18000115 	stw	zero,4(r3)
   21eb4:	18000215 	stw	zero,8(r3)
   21eb8:	1940030d 	sth	r5,12(r3)
   21ebc:	1a40038d 	sth	r9,14(r3)
   21ec0:	18000415 	stw	zero,16(r3)
   21ec4:	18000515 	stw	zero,20(r3)
   21ec8:	18000615 	stw	zero,24(r3)
   21ecc:	18c00715 	stw	r3,28(r3)
   21ed0:	1a000815 	stw	r8,32(r3)
   21ed4:	19c00915 	stw	r7,36(r3)
   21ed8:	19800a15 	stw	r6,40(r3)
   21edc:	19000b15 	stw	r4,44(r3)
   21ee0:	00c00484 	movi	r3,18
   21ee4:	10c0030d 	sth	r3,12(r2)
   21ee8:	00c00084 	movi	r3,2
   21eec:	10000015 	stw	zero,0(r2)
   21ef0:	10000115 	stw	zero,4(r2)
   21ef4:	10000215 	stw	zero,8(r2)
   21ef8:	10c0038d 	sth	r3,14(r2)
   21efc:	10000415 	stw	zero,16(r2)
   21f00:	10000515 	stw	zero,20(r2)
   21f04:	10000615 	stw	zero,24(r2)
   21f08:	10800715 	stw	r2,28(r2)
   21f0c:	12000815 	stw	r8,32(r2)
   21f10:	11c00915 	stw	r7,36(r2)
   21f14:	11800a15 	stw	r6,40(r2)
   21f18:	11000b15 	stw	r4,44(r2)
   21f1c:	f800283a 	ret

00021f20 <__sfp>:
   21f20:	defffc04 	addi	sp,sp,-16
   21f24:	008000b4 	movhi	r2,2
   21f28:	109bfa04 	addi	r2,r2,28648
   21f2c:	dc400115 	stw	r17,4(sp)
   21f30:	14400017 	ldw	r17,0(r2)
   21f34:	dc800215 	stw	r18,8(sp)
   21f38:	dfc00315 	stw	ra,12(sp)
   21f3c:	88800e17 	ldw	r2,56(r17)
   21f40:	dc000015 	stw	r16,0(sp)
   21f44:	2025883a 	mov	r18,r4
   21f48:	10002826 	beq	r2,zero,21fec <__sfp+0xcc>
   21f4c:	8c40b804 	addi	r17,r17,736
   21f50:	043fffc4 	movi	r16,-1
   21f54:	89400117 	ldw	r5,4(r17)
   21f58:	88800217 	ldw	r2,8(r17)
   21f5c:	297fffc4 	addi	r5,r5,-1
   21f60:	28000a16 	blt	r5,zero,21f8c <__sfp+0x6c>
   21f64:	10c0030f 	ldh	r3,12(r2)
   21f68:	18000c26 	beq	r3,zero,21f9c <__sfp+0x7c>
   21f6c:	10c01a04 	addi	r3,r2,104
   21f70:	00000206 	br	21f7c <__sfp+0x5c>
   21f74:	19bfe90f 	ldh	r6,-92(r3)
   21f78:	30000826 	beq	r6,zero,21f9c <__sfp+0x7c>
   21f7c:	297fffc4 	addi	r5,r5,-1
   21f80:	18bffd04 	addi	r2,r3,-12
   21f84:	18c01704 	addi	r3,r3,92
   21f88:	2c3ffa1e 	bne	r5,r16,21f74 <__sfp+0x54>
   21f8c:	88800017 	ldw	r2,0(r17)
   21f90:	10001926 	beq	r2,zero,21ff8 <__sfp+0xd8>
   21f94:	1023883a 	mov	r17,r2
   21f98:	003fee06 	br	21f54 <__sfp+0x34>
   21f9c:	00ffffc4 	movi	r3,-1
   21fa0:	10c0038d 	sth	r3,14(r2)
   21fa4:	00c00044 	movi	r3,1
   21fa8:	10c0030d 	sth	r3,12(r2)
   21fac:	10000015 	stw	zero,0(r2)
   21fb0:	10000215 	stw	zero,8(r2)
   21fb4:	10000115 	stw	zero,4(r2)
   21fb8:	10000415 	stw	zero,16(r2)
   21fbc:	10000515 	stw	zero,20(r2)
   21fc0:	10000615 	stw	zero,24(r2)
   21fc4:	10000c15 	stw	zero,48(r2)
   21fc8:	10000d15 	stw	zero,52(r2)
   21fcc:	10001115 	stw	zero,68(r2)
   21fd0:	10001215 	stw	zero,72(r2)
   21fd4:	dfc00317 	ldw	ra,12(sp)
   21fd8:	dc800217 	ldw	r18,8(sp)
   21fdc:	dc400117 	ldw	r17,4(sp)
   21fe0:	dc000017 	ldw	r16,0(sp)
   21fe4:	dec00404 	addi	sp,sp,16
   21fe8:	f800283a 	ret
   21fec:	8809883a 	mov	r4,r17
   21ff0:	0021e140 	call	21e14 <__sinit>
   21ff4:	003fd506 	br	21f4c <__sfp+0x2c>
   21ff8:	9009883a 	mov	r4,r18
   21ffc:	01400104 	movi	r5,4
   22000:	0021d8c0 	call	21d8c <__sfmoreglue>
   22004:	88800015 	stw	r2,0(r17)
   22008:	103fe21e 	bne	r2,zero,21f94 <__sfp+0x74>
   2200c:	00800304 	movi	r2,12
   22010:	90800015 	stw	r2,0(r18)
   22014:	0005883a 	mov	r2,zero
   22018:	003fee06 	br	21fd4 <__sfp+0xb4>

0002201c <__sfp_lock_acquire>:
   2201c:	f800283a 	ret

00022020 <__sfp_lock_release>:
   22020:	f800283a 	ret

00022024 <__sinit_lock_acquire>:
   22024:	f800283a 	ret

00022028 <__sinit_lock_release>:
   22028:	f800283a 	ret

0002202c <__fp_lock_all>:
   2202c:	008000b4 	movhi	r2,2
   22030:	109bfb04 	addi	r2,r2,28652
   22034:	11000017 	ldw	r4,0(r2)
   22038:	014000b4 	movhi	r5,2
   2203c:	29475c04 	addi	r5,r5,7536
   22040:	00224681 	jmpi	22468 <_fwalk>

00022044 <__fp_unlock_all>:
   22044:	008000b4 	movhi	r2,2
   22048:	109bfb04 	addi	r2,r2,28652
   2204c:	11000017 	ldw	r4,0(r2)
   22050:	014000b4 	movhi	r5,2
   22054:	29475e04 	addi	r5,r5,7544
   22058:	00224681 	jmpi	22468 <_fwalk>

0002205c <_malloc_trim_r>:
   2205c:	defffb04 	addi	sp,sp,-20
   22060:	dcc00315 	stw	r19,12(sp)
   22064:	dc800215 	stw	r18,8(sp)
   22068:	dc400115 	stw	r17,4(sp)
   2206c:	dc000015 	stw	r16,0(sp)
   22070:	2827883a 	mov	r19,r5
   22074:	dfc00415 	stw	ra,16(sp)
   22078:	044000b4 	movhi	r17,2
   2207c:	8c567604 	addi	r17,r17,23000
   22080:	2021883a 	mov	r16,r4
   22084:	002333c0 	call	2333c <__malloc_lock>
   22088:	88800217 	ldw	r2,8(r17)
   2208c:	14800117 	ldw	r18,4(r2)
   22090:	00bfff04 	movi	r2,-4
   22094:	90a4703a 	and	r18,r18,r2
   22098:	9083fbc4 	addi	r2,r18,4079
   2209c:	14e7c83a 	sub	r19,r2,r19
   220a0:	9826d33a 	srli	r19,r19,12
   220a4:	0083ffc4 	movi	r2,4095
   220a8:	9cffffc4 	addi	r19,r19,-1
   220ac:	9826933a 	slli	r19,r19,12
   220b0:	14c0060e 	bge	r2,r19,220cc <_malloc_trim_r+0x70>
   220b4:	8009883a 	mov	r4,r16
   220b8:	000b883a 	mov	r5,zero
   220bc:	00219800 	call	21980 <_sbrk_r>
   220c0:	88c00217 	ldw	r3,8(r17)
   220c4:	1c87883a 	add	r3,r3,r18
   220c8:	10c00a26 	beq	r2,r3,220f4 <_malloc_trim_r+0x98>
   220cc:	8009883a 	mov	r4,r16
   220d0:	002335c0 	call	2335c <__malloc_unlock>
   220d4:	0005883a 	mov	r2,zero
   220d8:	dfc00417 	ldw	ra,16(sp)
   220dc:	dcc00317 	ldw	r19,12(sp)
   220e0:	dc800217 	ldw	r18,8(sp)
   220e4:	dc400117 	ldw	r17,4(sp)
   220e8:	dc000017 	ldw	r16,0(sp)
   220ec:	dec00504 	addi	sp,sp,20
   220f0:	f800283a 	ret
   220f4:	8009883a 	mov	r4,r16
   220f8:	04cbc83a 	sub	r5,zero,r19
   220fc:	00219800 	call	21980 <_sbrk_r>
   22100:	00ffffc4 	movi	r3,-1
   22104:	10c01326 	beq	r2,r3,22154 <_malloc_trim_r+0xf8>
   22108:	008000f4 	movhi	r2,3
   2210c:	10a2a604 	addi	r2,r2,-30056
   22110:	11000017 	ldw	r4,0(r2)
   22114:	88c00217 	ldw	r3,8(r17)
   22118:	94e5c83a 	sub	r18,r18,r19
   2211c:	94800054 	ori	r18,r18,1
   22120:	24e7c83a 	sub	r19,r4,r19
   22124:	1c800115 	stw	r18,4(r3)
   22128:	8009883a 	mov	r4,r16
   2212c:	14c00015 	stw	r19,0(r2)
   22130:	002335c0 	call	2335c <__malloc_unlock>
   22134:	00800044 	movi	r2,1
   22138:	dfc00417 	ldw	ra,16(sp)
   2213c:	dcc00317 	ldw	r19,12(sp)
   22140:	dc800217 	ldw	r18,8(sp)
   22144:	dc400117 	ldw	r17,4(sp)
   22148:	dc000017 	ldw	r16,0(sp)
   2214c:	dec00504 	addi	sp,sp,20
   22150:	f800283a 	ret
   22154:	8009883a 	mov	r4,r16
   22158:	000b883a 	mov	r5,zero
   2215c:	00219800 	call	21980 <_sbrk_r>
   22160:	88c00217 	ldw	r3,8(r17)
   22164:	014003c4 	movi	r5,15
   22168:	10c9c83a 	sub	r4,r2,r3
   2216c:	293fd70e 	bge	r5,r4,220cc <_malloc_trim_r+0x70>
   22170:	014000b4 	movhi	r5,2
   22174:	295bfc04 	addi	r5,r5,28656
   22178:	29400017 	ldw	r5,0(r5)
   2217c:	21000054 	ori	r4,r4,1
   22180:	19000115 	stw	r4,4(r3)
   22184:	1145c83a 	sub	r2,r2,r5
   22188:	014000f4 	movhi	r5,3
   2218c:	2962a604 	addi	r5,r5,-30056
   22190:	28800015 	stw	r2,0(r5)
   22194:	003fcd06 	br	220cc <_malloc_trim_r+0x70>

00022198 <_free_r>:
   22198:	defffd04 	addi	sp,sp,-12
   2219c:	dc400115 	stw	r17,4(sp)
   221a0:	dc000015 	stw	r16,0(sp)
   221a4:	dfc00215 	stw	ra,8(sp)
   221a8:	2821883a 	mov	r16,r5
   221ac:	2023883a 	mov	r17,r4
   221b0:	28004b26 	beq	r5,zero,222e0 <_free_r+0x148>
   221b4:	002333c0 	call	2333c <__malloc_lock>
   221b8:	823fff17 	ldw	r8,-4(r16)
   221bc:	00bfff84 	movi	r2,-2
   221c0:	81bffe04 	addi	r6,r16,-8
   221c4:	4084703a 	and	r2,r8,r2
   221c8:	3087883a 	add	r3,r6,r2
   221cc:	014000b4 	movhi	r5,2
   221d0:	29567604 	addi	r5,r5,23000
   221d4:	1a400117 	ldw	r9,4(r3)
   221d8:	29000217 	ldw	r4,8(r5)
   221dc:	01ffff04 	movi	r7,-4
   221e0:	49ce703a 	and	r7,r9,r7
   221e4:	20c06526 	beq	r4,r3,2237c <_free_r+0x1e4>
   221e8:	19c00115 	stw	r7,4(r3)
   221ec:	4200004c 	andi	r8,r8,1
   221f0:	40003026 	beq	r8,zero,222b4 <_free_r+0x11c>
   221f4:	0009883a 	mov	r4,zero
   221f8:	19d1883a 	add	r8,r3,r7
   221fc:	42000117 	ldw	r8,4(r8)
   22200:	4200004c 	andi	r8,r8,1
   22204:	4000061e 	bne	r8,zero,22220 <_free_r+0x88>
   22208:	11c5883a 	add	r2,r2,r7
   2220c:	19c00217 	ldw	r7,8(r3)
   22210:	20004e26 	beq	r4,zero,2234c <_free_r+0x1b4>
   22214:	18c00317 	ldw	r3,12(r3)
   22218:	38c00315 	stw	r3,12(r7)
   2221c:	19c00215 	stw	r7,8(r3)
   22220:	11c00054 	ori	r7,r2,1
   22224:	3087883a 	add	r3,r6,r2
   22228:	31c00115 	stw	r7,4(r6)
   2222c:	18800015 	stw	r2,0(r3)
   22230:	20001a1e 	bne	r4,zero,2229c <_free_r+0x104>
   22234:	00c07fc4 	movi	r3,511
   22238:	18802e2e 	bgeu	r3,r2,222f4 <_free_r+0x15c>
   2223c:	1006d27a 	srli	r3,r2,9
   22240:	01000104 	movi	r4,4
   22244:	20c06636 	bltu	r4,r3,223e0 <_free_r+0x248>
   22248:	1008d1ba 	srli	r4,r2,6
   2224c:	21000e04 	addi	r4,r4,56
   22250:	210f883a 	add	r7,r4,r4
   22254:	39cf883a 	add	r7,r7,r7
   22258:	39cf883a 	add	r7,r7,r7
   2225c:	29cf883a 	add	r7,r5,r7
   22260:	38c00217 	ldw	r3,8(r7)
   22264:	014000b4 	movhi	r5,2
   22268:	29567604 	addi	r5,r5,23000
   2226c:	19c06126 	beq	r3,r7,223f4 <_free_r+0x25c>
   22270:	013fff04 	movi	r4,-4
   22274:	19400117 	ldw	r5,4(r3)
   22278:	290a703a 	and	r5,r5,r4
   2227c:	1140022e 	bgeu	r2,r5,22288 <_free_r+0xf0>
   22280:	18c00217 	ldw	r3,8(r3)
   22284:	38fffb1e 	bne	r7,r3,22274 <_free_r+0xdc>
   22288:	18800317 	ldw	r2,12(r3)
   2228c:	30800315 	stw	r2,12(r6)
   22290:	30c00215 	stw	r3,8(r6)
   22294:	11800215 	stw	r6,8(r2)
   22298:	19800315 	stw	r6,12(r3)
   2229c:	8809883a 	mov	r4,r17
   222a0:	dfc00217 	ldw	ra,8(sp)
   222a4:	dc400117 	ldw	r17,4(sp)
   222a8:	dc000017 	ldw	r16,0(sp)
   222ac:	dec00304 	addi	sp,sp,12
   222b0:	002335c1 	jmpi	2335c <__malloc_unlock>
   222b4:	813ffe17 	ldw	r4,-8(r16)
   222b8:	2a400204 	addi	r9,r5,8
   222bc:	310dc83a 	sub	r6,r6,r4
   222c0:	32000217 	ldw	r8,8(r6)
   222c4:	1105883a 	add	r2,r2,r4
   222c8:	42404326 	beq	r8,r9,223d8 <_free_r+0x240>
   222cc:	32400317 	ldw	r9,12(r6)
   222d0:	0009883a 	mov	r4,zero
   222d4:	42400315 	stw	r9,12(r8)
   222d8:	4a000215 	stw	r8,8(r9)
   222dc:	003fc606 	br	221f8 <_free_r+0x60>
   222e0:	dfc00217 	ldw	ra,8(sp)
   222e4:	dc400117 	ldw	r17,4(sp)
   222e8:	dc000017 	ldw	r16,0(sp)
   222ec:	dec00304 	addi	sp,sp,12
   222f0:	f800283a 	ret
   222f4:	1004d0fa 	srli	r2,r2,3
   222f8:	02000044 	movi	r8,1
   222fc:	29c00117 	ldw	r7,4(r5)
   22300:	1087883a 	add	r3,r2,r2
   22304:	18c7883a 	add	r3,r3,r3
   22308:	1005d0ba 	srai	r2,r2,2
   2230c:	18c7883a 	add	r3,r3,r3
   22310:	28c7883a 	add	r3,r5,r3
   22314:	19000217 	ldw	r4,8(r3)
   22318:	4084983a 	sll	r2,r8,r2
   2231c:	30c00315 	stw	r3,12(r6)
   22320:	31000215 	stw	r4,8(r6)
   22324:	11c4b03a 	or	r2,r2,r7
   22328:	21800315 	stw	r6,12(r4)
   2232c:	8809883a 	mov	r4,r17
   22330:	28800115 	stw	r2,4(r5)
   22334:	19800215 	stw	r6,8(r3)
   22338:	dfc00217 	ldw	ra,8(sp)
   2233c:	dc400117 	ldw	r17,4(sp)
   22340:	dc000017 	ldw	r16,0(sp)
   22344:	dec00304 	addi	sp,sp,12
   22348:	002335c1 	jmpi	2335c <__malloc_unlock>
   2234c:	020000b4 	movhi	r8,2
   22350:	42167804 	addi	r8,r8,23008
   22354:	3a3faf1e 	bne	r7,r8,22214 <_free_r+0x7c>
   22358:	29800515 	stw	r6,20(r5)
   2235c:	29800415 	stw	r6,16(r5)
   22360:	11000054 	ori	r4,r2,1
   22364:	3087883a 	add	r3,r6,r2
   22368:	31c00315 	stw	r7,12(r6)
   2236c:	31c00215 	stw	r7,8(r6)
   22370:	31000115 	stw	r4,4(r6)
   22374:	18800015 	stw	r2,0(r3)
   22378:	003fc806 	br	2229c <_free_r+0x104>
   2237c:	4200004c 	andi	r8,r8,1
   22380:	3885883a 	add	r2,r7,r2
   22384:	4000071e 	bne	r8,zero,223a4 <_free_r+0x20c>
   22388:	81fffe17 	ldw	r7,-8(r16)
   2238c:	31cdc83a 	sub	r6,r6,r7
   22390:	30c00317 	ldw	r3,12(r6)
   22394:	31000217 	ldw	r4,8(r6)
   22398:	11c5883a 	add	r2,r2,r7
   2239c:	20c00315 	stw	r3,12(r4)
   223a0:	19000215 	stw	r4,8(r3)
   223a4:	00c000b4 	movhi	r3,2
   223a8:	18dbfd04 	addi	r3,r3,28660
   223ac:	18c00017 	ldw	r3,0(r3)
   223b0:	11000054 	ori	r4,r2,1
   223b4:	31000115 	stw	r4,4(r6)
   223b8:	29800215 	stw	r6,8(r5)
   223bc:	10ffb736 	bltu	r2,r3,2229c <_free_r+0x104>
   223c0:	008000f4 	movhi	r2,3
   223c4:	10a29c04 	addi	r2,r2,-30096
   223c8:	11400017 	ldw	r5,0(r2)
   223cc:	8809883a 	mov	r4,r17
   223d0:	002205c0 	call	2205c <_malloc_trim_r>
   223d4:	003fb106 	br	2229c <_free_r+0x104>
   223d8:	01000044 	movi	r4,1
   223dc:	003f8606 	br	221f8 <_free_r+0x60>
   223e0:	01000504 	movi	r4,20
   223e4:	20c00b36 	bltu	r4,r3,22414 <_free_r+0x27c>
   223e8:	190016c4 	addi	r4,r3,91
   223ec:	210f883a 	add	r7,r4,r4
   223f0:	003f9806 	br	22254 <_free_r+0xbc>
   223f4:	2009d0ba 	srai	r4,r4,2
   223f8:	00800044 	movi	r2,1
   223fc:	29c00117 	ldw	r7,4(r5)
   22400:	1108983a 	sll	r4,r2,r4
   22404:	1805883a 	mov	r2,r3
   22408:	21c8b03a 	or	r4,r4,r7
   2240c:	29000115 	stw	r4,4(r5)
   22410:	003f9e06 	br	2228c <_free_r+0xf4>
   22414:	01001504 	movi	r4,84
   22418:	20c00436 	bltu	r4,r3,2242c <_free_r+0x294>
   2241c:	1008d33a 	srli	r4,r2,12
   22420:	21001b84 	addi	r4,r4,110
   22424:	210f883a 	add	r7,r4,r4
   22428:	003f8a06 	br	22254 <_free_r+0xbc>
   2242c:	01005504 	movi	r4,340
   22430:	20c00436 	bltu	r4,r3,22444 <_free_r+0x2ac>
   22434:	1008d3fa 	srli	r4,r2,15
   22438:	21001dc4 	addi	r4,r4,119
   2243c:	210f883a 	add	r7,r4,r4
   22440:	003f8406 	br	22254 <_free_r+0xbc>
   22444:	01015504 	movi	r4,1364
   22448:	20c00436 	bltu	r4,r3,2245c <_free_r+0x2c4>
   2244c:	1008d4ba 	srli	r4,r2,18
   22450:	21001f04 	addi	r4,r4,124
   22454:	210f883a 	add	r7,r4,r4
   22458:	003f7e06 	br	22254 <_free_r+0xbc>
   2245c:	01c03f04 	movi	r7,252
   22460:	01001f84 	movi	r4,126
   22464:	003f7b06 	br	22254 <_free_r+0xbc>

00022468 <_fwalk>:
   22468:	defff904 	addi	sp,sp,-28
   2246c:	dcc00315 	stw	r19,12(sp)
   22470:	24c0b804 	addi	r19,r4,736
   22474:	dd400515 	stw	r21,20(sp)
   22478:	dd000415 	stw	r20,16(sp)
   2247c:	dfc00615 	stw	ra,24(sp)
   22480:	dc800215 	stw	r18,8(sp)
   22484:	dc400115 	stw	r17,4(sp)
   22488:	dc000015 	stw	r16,0(sp)
   2248c:	282b883a 	mov	r21,r5
   22490:	0029883a 	mov	r20,zero
   22494:	002201c0 	call	2201c <__sfp_lock_acquire>
   22498:	98001226 	beq	r19,zero,224e4 <_fwalk+0x7c>
   2249c:	04bfffc4 	movi	r18,-1
   224a0:	9c400117 	ldw	r17,4(r19)
   224a4:	9c000217 	ldw	r16,8(r19)
   224a8:	8c7fffc4 	addi	r17,r17,-1
   224ac:	88000b16 	blt	r17,zero,224dc <_fwalk+0x74>
   224b0:	84000304 	addi	r16,r16,12
   224b4:	80c0000f 	ldh	r3,0(r16)
   224b8:	8c7fffc4 	addi	r17,r17,-1
   224bc:	813ffd04 	addi	r4,r16,-12
   224c0:	18000426 	beq	r3,zero,224d4 <_fwalk+0x6c>
   224c4:	80c0008f 	ldh	r3,2(r16)
   224c8:	1c800226 	beq	r3,r18,224d4 <_fwalk+0x6c>
   224cc:	a83ee83a 	callr	r21
   224d0:	a0a8b03a 	or	r20,r20,r2
   224d4:	84001704 	addi	r16,r16,92
   224d8:	8cbff61e 	bne	r17,r18,224b4 <_fwalk+0x4c>
   224dc:	9cc00017 	ldw	r19,0(r19)
   224e0:	983fef1e 	bne	r19,zero,224a0 <_fwalk+0x38>
   224e4:	00220200 	call	22020 <__sfp_lock_release>
   224e8:	a005883a 	mov	r2,r20
   224ec:	dfc00617 	ldw	ra,24(sp)
   224f0:	dd400517 	ldw	r21,20(sp)
   224f4:	dd000417 	ldw	r20,16(sp)
   224f8:	dcc00317 	ldw	r19,12(sp)
   224fc:	dc800217 	ldw	r18,8(sp)
   22500:	dc400117 	ldw	r17,4(sp)
   22504:	dc000017 	ldw	r16,0(sp)
   22508:	dec00704 	addi	sp,sp,28
   2250c:	f800283a 	ret

00022510 <_fwalk_reent>:
   22510:	defff804 	addi	sp,sp,-32
   22514:	dcc00315 	stw	r19,12(sp)
   22518:	24c0b804 	addi	r19,r4,736
   2251c:	dd800615 	stw	r22,24(sp)
   22520:	dd400515 	stw	r21,20(sp)
   22524:	dd000415 	stw	r20,16(sp)
   22528:	dfc00715 	stw	ra,28(sp)
   2252c:	dc800215 	stw	r18,8(sp)
   22530:	dc400115 	stw	r17,4(sp)
   22534:	dc000015 	stw	r16,0(sp)
   22538:	2029883a 	mov	r20,r4
   2253c:	282b883a 	mov	r21,r5
   22540:	002d883a 	mov	r22,zero
   22544:	002201c0 	call	2201c <__sfp_lock_acquire>
   22548:	98001326 	beq	r19,zero,22598 <_fwalk_reent+0x88>
   2254c:	04bfffc4 	movi	r18,-1
   22550:	9c400117 	ldw	r17,4(r19)
   22554:	9c000217 	ldw	r16,8(r19)
   22558:	8c7fffc4 	addi	r17,r17,-1
   2255c:	88000c16 	blt	r17,zero,22590 <_fwalk_reent+0x80>
   22560:	84000304 	addi	r16,r16,12
   22564:	80c0000f 	ldh	r3,0(r16)
   22568:	8c7fffc4 	addi	r17,r17,-1
   2256c:	817ffd04 	addi	r5,r16,-12
   22570:	18000526 	beq	r3,zero,22588 <_fwalk_reent+0x78>
   22574:	80c0008f 	ldh	r3,2(r16)
   22578:	a009883a 	mov	r4,r20
   2257c:	1c800226 	beq	r3,r18,22588 <_fwalk_reent+0x78>
   22580:	a83ee83a 	callr	r21
   22584:	b0acb03a 	or	r22,r22,r2
   22588:	84001704 	addi	r16,r16,92
   2258c:	8cbff51e 	bne	r17,r18,22564 <_fwalk_reent+0x54>
   22590:	9cc00017 	ldw	r19,0(r19)
   22594:	983fee1e 	bne	r19,zero,22550 <_fwalk_reent+0x40>
   22598:	00220200 	call	22020 <__sfp_lock_release>
   2259c:	b005883a 	mov	r2,r22
   225a0:	dfc00717 	ldw	ra,28(sp)
   225a4:	dd800617 	ldw	r22,24(sp)
   225a8:	dd400517 	ldw	r21,20(sp)
   225ac:	dd000417 	ldw	r20,16(sp)
   225b0:	dcc00317 	ldw	r19,12(sp)
   225b4:	dc800217 	ldw	r18,8(sp)
   225b8:	dc400117 	ldw	r17,4(sp)
   225bc:	dc000017 	ldw	r16,0(sp)
   225c0:	dec00804 	addi	sp,sp,32
   225c4:	f800283a 	ret

000225c8 <__smakebuf_r>:
   225c8:	2880030b 	ldhu	r2,12(r5)
   225cc:	deffed04 	addi	sp,sp,-76
   225d0:	dc401015 	stw	r17,64(sp)
   225d4:	10c0008c 	andi	r3,r2,2
   225d8:	18ffffcc 	andi	r3,r3,65535
   225dc:	18e0001c 	xori	r3,r3,32768
   225e0:	dc000f15 	stw	r16,60(sp)
   225e4:	dfc01215 	stw	ra,72(sp)
   225e8:	dc801115 	stw	r18,68(sp)
   225ec:	18e00004 	addi	r3,r3,-32768
   225f0:	2821883a 	mov	r16,r5
   225f4:	2023883a 	mov	r17,r4
   225f8:	1800381e 	bne	r3,zero,226dc <__smakebuf_r+0x114>
   225fc:	2940038f 	ldh	r5,14(r5)
   22600:	28002d16 	blt	r5,zero,226b8 <__smakebuf_r+0xf0>
   22604:	d80d883a 	mov	r6,sp
   22608:	0022bac0 	call	22bac <_fstat_r>
   2260c:	10002916 	blt	r2,zero,226b4 <__smakebuf_r+0xec>
   22610:	d8800117 	ldw	r2,4(sp)
   22614:	00e00014 	movui	r3,32768
   22618:	10bc000c 	andi	r2,r2,61440
   2261c:	10c03c26 	beq	r2,r3,22710 <__smakebuf_r+0x148>
   22620:	80c0030b 	ldhu	r3,12(r16)
   22624:	18c20014 	ori	r3,r3,2048
   22628:	80c0030d 	sth	r3,12(r16)
   2262c:	00c80004 	movi	r3,8192
   22630:	10c00c1e 	bne	r2,r3,22664 <__smakebuf_r+0x9c>
   22634:	8140038f 	ldh	r5,14(r16)
   22638:	8809883a 	mov	r4,r17
   2263c:	0022c140 	call	22c14 <_isatty_r>
   22640:	10000826 	beq	r2,zero,22664 <__smakebuf_r+0x9c>
   22644:	80c0030b 	ldhu	r3,12(r16)
   22648:	808010c4 	addi	r2,r16,67
   2264c:	80800015 	stw	r2,0(r16)
   22650:	18c00054 	ori	r3,r3,1
   22654:	80800415 	stw	r2,16(r16)
   22658:	00800044 	movi	r2,1
   2265c:	80c0030d 	sth	r3,12(r16)
   22660:	80800515 	stw	r2,20(r16)
   22664:	04810004 	movi	r18,1024
   22668:	8809883a 	mov	r4,r17
   2266c:	900b883a 	mov	r5,r18
   22670:	002083c0 	call	2083c <_malloc_r>
   22674:	10003026 	beq	r2,zero,22738 <__smakebuf_r+0x170>
   22678:	80c0030b 	ldhu	r3,12(r16)
   2267c:	010000b4 	movhi	r4,2
   22680:	21076004 	addi	r4,r4,7552
   22684:	89000f15 	stw	r4,60(r17)
   22688:	18c02014 	ori	r3,r3,128
   2268c:	80c0030d 	sth	r3,12(r16)
   22690:	80800015 	stw	r2,0(r16)
   22694:	80800415 	stw	r2,16(r16)
   22698:	84800515 	stw	r18,20(r16)
   2269c:	dfc01217 	ldw	ra,72(sp)
   226a0:	dc801117 	ldw	r18,68(sp)
   226a4:	dc401017 	ldw	r17,64(sp)
   226a8:	dc000f17 	ldw	r16,60(sp)
   226ac:	dec01304 	addi	sp,sp,76
   226b0:	f800283a 	ret
   226b4:	8080030b 	ldhu	r2,12(r16)
   226b8:	10c0200c 	andi	r3,r2,128
   226bc:	18ffffcc 	andi	r3,r3,65535
   226c0:	18e0001c 	xori	r3,r3,32768
   226c4:	18e00004 	addi	r3,r3,-32768
   226c8:	18000f1e 	bne	r3,zero,22708 <__smakebuf_r+0x140>
   226cc:	04810004 	movi	r18,1024
   226d0:	10820014 	ori	r2,r2,2048
   226d4:	8080030d 	sth	r2,12(r16)
   226d8:	003fe306 	br	22668 <__smakebuf_r+0xa0>
   226dc:	288010c4 	addi	r2,r5,67
   226e0:	28800015 	stw	r2,0(r5)
   226e4:	28800415 	stw	r2,16(r5)
   226e8:	00800044 	movi	r2,1
   226ec:	28800515 	stw	r2,20(r5)
   226f0:	dfc01217 	ldw	ra,72(sp)
   226f4:	dc801117 	ldw	r18,68(sp)
   226f8:	dc401017 	ldw	r17,64(sp)
   226fc:	dc000f17 	ldw	r16,60(sp)
   22700:	dec01304 	addi	sp,sp,76
   22704:	f800283a 	ret
   22708:	04801004 	movi	r18,64
   2270c:	003ff006 	br	226d0 <__smakebuf_r+0x108>
   22710:	81000a17 	ldw	r4,40(r16)
   22714:	00c000b4 	movhi	r3,2
   22718:	18ca4a04 	addi	r3,r3,10536
   2271c:	20ffc01e 	bne	r4,r3,22620 <__smakebuf_r+0x58>
   22720:	8080030b 	ldhu	r2,12(r16)
   22724:	00c10004 	movi	r3,1024
   22728:	80c01315 	stw	r3,76(r16)
   2272c:	10c4b03a 	or	r2,r2,r3
   22730:	8080030d 	sth	r2,12(r16)
   22734:	003fcb06 	br	22664 <__smakebuf_r+0x9c>
   22738:	8080030b 	ldhu	r2,12(r16)
   2273c:	10c0800c 	andi	r3,r2,512
   22740:	18ffffcc 	andi	r3,r3,65535
   22744:	18e0001c 	xori	r3,r3,32768
   22748:	18e00004 	addi	r3,r3,-32768
   2274c:	183fd31e 	bne	r3,zero,2269c <__smakebuf_r+0xd4>
   22750:	10800094 	ori	r2,r2,2
   22754:	80c010c4 	addi	r3,r16,67
   22758:	8080030d 	sth	r2,12(r16)
   2275c:	00800044 	movi	r2,1
   22760:	80c00015 	stw	r3,0(r16)
   22764:	80c00415 	stw	r3,16(r16)
   22768:	80800515 	stw	r2,20(r16)
   2276c:	003fcb06 	br	2269c <__smakebuf_r+0xd4>

00022770 <memset>:
   22770:	00c000c4 	movi	r3,3
   22774:	2005883a 	mov	r2,r4
   22778:	29403fcc 	andi	r5,r5,255
   2277c:	19802d2e 	bgeu	r3,r6,22834 <memset+0xc4>
   22780:	20c6703a 	and	r3,r4,r3
   22784:	18002e1e 	bne	r3,zero,22840 <memset+0xd0>
   22788:	2806923a 	slli	r3,r5,8
   2278c:	010003c4 	movi	r4,15
   22790:	3011883a 	mov	r8,r6
   22794:	1946b03a 	or	r3,r3,r5
   22798:	180e943a 	slli	r7,r3,16
   2279c:	38ceb03a 	or	r7,r7,r3
   227a0:	1007883a 	mov	r3,r2
   227a4:	21800f2e 	bgeu	r4,r6,227e4 <memset+0x74>
   227a8:	19c00015 	stw	r7,0(r3)
   227ac:	19c00115 	stw	r7,4(r3)
   227b0:	19c00215 	stw	r7,8(r3)
   227b4:	19c00315 	stw	r7,12(r3)
   227b8:	423ffc04 	addi	r8,r8,-16
   227bc:	18c00404 	addi	r3,r3,16
   227c0:	223ff936 	bltu	r4,r8,227a8 <memset+0x38>
   227c4:	30fffc04 	addi	r3,r6,-16
   227c8:	1806d13a 	srli	r3,r3,4
   227cc:	318003cc 	andi	r6,r6,15
   227d0:	010000c4 	movi	r4,3
   227d4:	18c00044 	addi	r3,r3,1
   227d8:	1806913a 	slli	r3,r3,4
   227dc:	10c7883a 	add	r3,r2,r3
   227e0:	21800e2e 	bgeu	r4,r6,2281c <memset+0xac>
   227e4:	1813883a 	mov	r9,r3
   227e8:	3011883a 	mov	r8,r6
   227ec:	010000c4 	movi	r4,3
   227f0:	49c00015 	stw	r7,0(r9)
   227f4:	423fff04 	addi	r8,r8,-4
   227f8:	4a400104 	addi	r9,r9,4
   227fc:	223ffc36 	bltu	r4,r8,227f0 <memset+0x80>
   22800:	313fff04 	addi	r4,r6,-4
   22804:	2008d0ba 	srli	r4,r4,2
   22808:	318000cc 	andi	r6,r6,3
   2280c:	21000044 	addi	r4,r4,1
   22810:	2109883a 	add	r4,r4,r4
   22814:	2109883a 	add	r4,r4,r4
   22818:	1907883a 	add	r3,r3,r4
   2281c:	30000a26 	beq	r6,zero,22848 <memset+0xd8>
   22820:	198d883a 	add	r6,r3,r6
   22824:	19400005 	stb	r5,0(r3)
   22828:	18c00044 	addi	r3,r3,1
   2282c:	19bffd1e 	bne	r3,r6,22824 <memset+0xb4>
   22830:	f800283a 	ret
   22834:	2007883a 	mov	r3,r4
   22838:	303ff91e 	bne	r6,zero,22820 <memset+0xb0>
   2283c:	00000206 	br	22848 <memset+0xd8>
   22840:	2007883a 	mov	r3,r4
   22844:	003ff606 	br	22820 <memset+0xb0>
   22848:	f800283a 	ret

0002284c <__sread>:
   2284c:	defffe04 	addi	sp,sp,-8
   22850:	dc000015 	stw	r16,0(sp)
   22854:	2821883a 	mov	r16,r5
   22858:	2940038f 	ldh	r5,14(r5)
   2285c:	dfc00115 	stw	ra,4(sp)
   22860:	0022ce40 	call	22ce4 <_read_r>
   22864:	10000716 	blt	r2,zero,22884 <__sread+0x38>
   22868:	80c01417 	ldw	r3,80(r16)
   2286c:	1887883a 	add	r3,r3,r2
   22870:	80c01415 	stw	r3,80(r16)
   22874:	dfc00117 	ldw	ra,4(sp)
   22878:	dc000017 	ldw	r16,0(sp)
   2287c:	dec00204 	addi	sp,sp,8
   22880:	f800283a 	ret
   22884:	80c0030b 	ldhu	r3,12(r16)
   22888:	18fbffcc 	andi	r3,r3,61439
   2288c:	80c0030d 	sth	r3,12(r16)
   22890:	dfc00117 	ldw	ra,4(sp)
   22894:	dc000017 	ldw	r16,0(sp)
   22898:	dec00204 	addi	sp,sp,8
   2289c:	f800283a 	ret

000228a0 <__swrite>:
   228a0:	2880030b 	ldhu	r2,12(r5)
   228a4:	defffb04 	addi	sp,sp,-20
   228a8:	dcc00315 	stw	r19,12(sp)
   228ac:	10c0400c 	andi	r3,r2,256
   228b0:	18ffffcc 	andi	r3,r3,65535
   228b4:	18e0001c 	xori	r3,r3,32768
   228b8:	dc800215 	stw	r18,8(sp)
   228bc:	dc400115 	stw	r17,4(sp)
   228c0:	dc000015 	stw	r16,0(sp)
   228c4:	dfc00415 	stw	ra,16(sp)
   228c8:	18e00004 	addi	r3,r3,-32768
   228cc:	2821883a 	mov	r16,r5
   228d0:	2027883a 	mov	r19,r4
   228d4:	3025883a 	mov	r18,r6
   228d8:	3823883a 	mov	r17,r7
   228dc:	18000526 	beq	r3,zero,228f4 <__swrite+0x54>
   228e0:	2940038f 	ldh	r5,14(r5)
   228e4:	000d883a 	mov	r6,zero
   228e8:	01c00084 	movi	r7,2
   228ec:	0022c780 	call	22c78 <_lseek_r>
   228f0:	8080030b 	ldhu	r2,12(r16)
   228f4:	8140038f 	ldh	r5,14(r16)
   228f8:	10bbffcc 	andi	r2,r2,61439
   228fc:	9809883a 	mov	r4,r19
   22900:	900d883a 	mov	r6,r18
   22904:	880f883a 	mov	r7,r17
   22908:	8080030d 	sth	r2,12(r16)
   2290c:	dfc00417 	ldw	ra,16(sp)
   22910:	dcc00317 	ldw	r19,12(sp)
   22914:	dc800217 	ldw	r18,8(sp)
   22918:	dc400117 	ldw	r17,4(sp)
   2291c:	dc000017 	ldw	r16,0(sp)
   22920:	dec00504 	addi	sp,sp,20
   22924:	002298c1 	jmpi	2298c <_write_r>

00022928 <__sseek>:
   22928:	defffe04 	addi	sp,sp,-8
   2292c:	dc000015 	stw	r16,0(sp)
   22930:	2821883a 	mov	r16,r5
   22934:	2940038f 	ldh	r5,14(r5)
   22938:	dfc00115 	stw	ra,4(sp)
   2293c:	0022c780 	call	22c78 <_lseek_r>
   22940:	00ffffc4 	movi	r3,-1
   22944:	10c00826 	beq	r2,r3,22968 <__sseek+0x40>
   22948:	80c0030b 	ldhu	r3,12(r16)
   2294c:	80801415 	stw	r2,80(r16)
   22950:	18c40014 	ori	r3,r3,4096
   22954:	80c0030d 	sth	r3,12(r16)
   22958:	dfc00117 	ldw	ra,4(sp)
   2295c:	dc000017 	ldw	r16,0(sp)
   22960:	dec00204 	addi	sp,sp,8
   22964:	f800283a 	ret
   22968:	80c0030b 	ldhu	r3,12(r16)
   2296c:	18fbffcc 	andi	r3,r3,61439
   22970:	80c0030d 	sth	r3,12(r16)
   22974:	dfc00117 	ldw	ra,4(sp)
   22978:	dc000017 	ldw	r16,0(sp)
   2297c:	dec00204 	addi	sp,sp,8
   22980:	f800283a 	ret

00022984 <__sclose>:
   22984:	2940038f 	ldh	r5,14(r5)
   22988:	00229f81 	jmpi	229f8 <_close_r>

0002298c <_write_r>:
   2298c:	defffd04 	addi	sp,sp,-12
   22990:	dc400115 	stw	r17,4(sp)
   22994:	dc000015 	stw	r16,0(sp)
   22998:	2023883a 	mov	r17,r4
   2299c:	040000f4 	movhi	r16,3
   229a0:	84229d04 	addi	r16,r16,-30092
   229a4:	2809883a 	mov	r4,r5
   229a8:	300b883a 	mov	r5,r6
   229ac:	380d883a 	mov	r6,r7
   229b0:	dfc00215 	stw	ra,8(sp)
   229b4:	80000015 	stw	zero,0(r16)
   229b8:	00236400 	call	23640 <write>
   229bc:	00ffffc4 	movi	r3,-1
   229c0:	10c00526 	beq	r2,r3,229d8 <_write_r+0x4c>
   229c4:	dfc00217 	ldw	ra,8(sp)
   229c8:	dc400117 	ldw	r17,4(sp)
   229cc:	dc000017 	ldw	r16,0(sp)
   229d0:	dec00304 	addi	sp,sp,12
   229d4:	f800283a 	ret
   229d8:	80c00017 	ldw	r3,0(r16)
   229dc:	183ff926 	beq	r3,zero,229c4 <_write_r+0x38>
   229e0:	88c00015 	stw	r3,0(r17)
   229e4:	dfc00217 	ldw	ra,8(sp)
   229e8:	dc400117 	ldw	r17,4(sp)
   229ec:	dc000017 	ldw	r16,0(sp)
   229f0:	dec00304 	addi	sp,sp,12
   229f4:	f800283a 	ret

000229f8 <_close_r>:
   229f8:	defffd04 	addi	sp,sp,-12
   229fc:	dc400115 	stw	r17,4(sp)
   22a00:	dc000015 	stw	r16,0(sp)
   22a04:	2023883a 	mov	r17,r4
   22a08:	040000f4 	movhi	r16,3
   22a0c:	84229d04 	addi	r16,r16,-30092
   22a10:	2809883a 	mov	r4,r5
   22a14:	dfc00215 	stw	ra,8(sp)
   22a18:	80000015 	stw	zero,0(r16)
   22a1c:	0022dc80 	call	22dc8 <close>
   22a20:	00ffffc4 	movi	r3,-1
   22a24:	10c00526 	beq	r2,r3,22a3c <_close_r+0x44>
   22a28:	dfc00217 	ldw	ra,8(sp)
   22a2c:	dc400117 	ldw	r17,4(sp)
   22a30:	dc000017 	ldw	r16,0(sp)
   22a34:	dec00304 	addi	sp,sp,12
   22a38:	f800283a 	ret
   22a3c:	80c00017 	ldw	r3,0(r16)
   22a40:	183ff926 	beq	r3,zero,22a28 <_close_r+0x30>
   22a44:	88c00015 	stw	r3,0(r17)
   22a48:	dfc00217 	ldw	ra,8(sp)
   22a4c:	dc400117 	ldw	r17,4(sp)
   22a50:	dc000017 	ldw	r16,0(sp)
   22a54:	dec00304 	addi	sp,sp,12
   22a58:	f800283a 	ret

00022a5c <_fclose_r>:
   22a5c:	defffc04 	addi	sp,sp,-16
   22a60:	dc400115 	stw	r17,4(sp)
   22a64:	dc000015 	stw	r16,0(sp)
   22a68:	dfc00315 	stw	ra,12(sp)
   22a6c:	dc800215 	stw	r18,8(sp)
   22a70:	2821883a 	mov	r16,r5
   22a74:	2023883a 	mov	r17,r4
   22a78:	28003426 	beq	r5,zero,22b4c <_fclose_r+0xf0>
   22a7c:	002201c0 	call	2201c <__sfp_lock_acquire>
   22a80:	88000226 	beq	r17,zero,22a8c <_fclose_r+0x30>
   22a84:	88800e17 	ldw	r2,56(r17)
   22a88:	10003826 	beq	r2,zero,22b6c <_fclose_r+0x110>
   22a8c:	8080030f 	ldh	r2,12(r16)
   22a90:	10002526 	beq	r2,zero,22b28 <_fclose_r+0xcc>
   22a94:	8809883a 	mov	r4,r17
   22a98:	800b883a 	mov	r5,r16
   22a9c:	0021b580 	call	21b58 <_fflush_r>
   22aa0:	1025883a 	mov	r18,r2
   22aa4:	80800b17 	ldw	r2,44(r16)
   22aa8:	10000426 	beq	r2,zero,22abc <_fclose_r+0x60>
   22aac:	81400717 	ldw	r5,28(r16)
   22ab0:	8809883a 	mov	r4,r17
   22ab4:	103ee83a 	callr	r2
   22ab8:	10003516 	blt	r2,zero,22b90 <_fclose_r+0x134>
   22abc:	8080030b 	ldhu	r2,12(r16)
   22ac0:	1080200c 	andi	r2,r2,128
   22ac4:	10bfffcc 	andi	r2,r2,65535
   22ac8:	10a0001c 	xori	r2,r2,32768
   22acc:	10a00004 	addi	r2,r2,-32768
   22ad0:	10002b1e 	bne	r2,zero,22b80 <_fclose_r+0x124>
   22ad4:	81400c17 	ldw	r5,48(r16)
   22ad8:	28000526 	beq	r5,zero,22af0 <_fclose_r+0x94>
   22adc:	80801004 	addi	r2,r16,64
   22ae0:	28800226 	beq	r5,r2,22aec <_fclose_r+0x90>
   22ae4:	8809883a 	mov	r4,r17
   22ae8:	00221980 	call	22198 <_free_r>
   22aec:	80000c15 	stw	zero,48(r16)
   22af0:	81401117 	ldw	r5,68(r16)
   22af4:	28000326 	beq	r5,zero,22b04 <_fclose_r+0xa8>
   22af8:	8809883a 	mov	r4,r17
   22afc:	00221980 	call	22198 <_free_r>
   22b00:	80001115 	stw	zero,68(r16)
   22b04:	8000030d 	sth	zero,12(r16)
   22b08:	00220200 	call	22020 <__sfp_lock_release>
   22b0c:	9005883a 	mov	r2,r18
   22b10:	dfc00317 	ldw	ra,12(sp)
   22b14:	dc800217 	ldw	r18,8(sp)
   22b18:	dc400117 	ldw	r17,4(sp)
   22b1c:	dc000017 	ldw	r16,0(sp)
   22b20:	dec00404 	addi	sp,sp,16
   22b24:	f800283a 	ret
   22b28:	00220200 	call	22020 <__sfp_lock_release>
   22b2c:	0025883a 	mov	r18,zero
   22b30:	9005883a 	mov	r2,r18
   22b34:	dfc00317 	ldw	ra,12(sp)
   22b38:	dc800217 	ldw	r18,8(sp)
   22b3c:	dc400117 	ldw	r17,4(sp)
   22b40:	dc000017 	ldw	r16,0(sp)
   22b44:	dec00404 	addi	sp,sp,16
   22b48:	f800283a 	ret
   22b4c:	0025883a 	mov	r18,zero
   22b50:	9005883a 	mov	r2,r18
   22b54:	dfc00317 	ldw	ra,12(sp)
   22b58:	dc800217 	ldw	r18,8(sp)
   22b5c:	dc400117 	ldw	r17,4(sp)
   22b60:	dc000017 	ldw	r16,0(sp)
   22b64:	dec00404 	addi	sp,sp,16
   22b68:	f800283a 	ret
   22b6c:	8809883a 	mov	r4,r17
   22b70:	0021e140 	call	21e14 <__sinit>
   22b74:	8080030f 	ldh	r2,12(r16)
   22b78:	103fc61e 	bne	r2,zero,22a94 <_fclose_r+0x38>
   22b7c:	003fea06 	br	22b28 <_fclose_r+0xcc>
   22b80:	81400417 	ldw	r5,16(r16)
   22b84:	8809883a 	mov	r4,r17
   22b88:	00221980 	call	22198 <_free_r>
   22b8c:	003fd106 	br	22ad4 <_fclose_r+0x78>
   22b90:	04bfffc4 	movi	r18,-1
   22b94:	003fc906 	br	22abc <_fclose_r+0x60>

00022b98 <fclose>:
   22b98:	008000b4 	movhi	r2,2
   22b9c:	109bfb04 	addi	r2,r2,28652
   22ba0:	200b883a 	mov	r5,r4
   22ba4:	11000017 	ldw	r4,0(r2)
   22ba8:	0022a5c1 	jmpi	22a5c <_fclose_r>

00022bac <_fstat_r>:
   22bac:	defffd04 	addi	sp,sp,-12
   22bb0:	dc400115 	stw	r17,4(sp)
   22bb4:	dc000015 	stw	r16,0(sp)
   22bb8:	2023883a 	mov	r17,r4
   22bbc:	040000f4 	movhi	r16,3
   22bc0:	84229d04 	addi	r16,r16,-30092
   22bc4:	2809883a 	mov	r4,r5
   22bc8:	300b883a 	mov	r5,r6
   22bcc:	dfc00215 	stw	ra,8(sp)
   22bd0:	80000015 	stw	zero,0(r16)
   22bd4:	0022f100 	call	22f10 <fstat>
   22bd8:	00ffffc4 	movi	r3,-1
   22bdc:	10c00526 	beq	r2,r3,22bf4 <_fstat_r+0x48>
   22be0:	dfc00217 	ldw	ra,8(sp)
   22be4:	dc400117 	ldw	r17,4(sp)
   22be8:	dc000017 	ldw	r16,0(sp)
   22bec:	dec00304 	addi	sp,sp,12
   22bf0:	f800283a 	ret
   22bf4:	80c00017 	ldw	r3,0(r16)
   22bf8:	183ff926 	beq	r3,zero,22be0 <_fstat_r+0x34>
   22bfc:	88c00015 	stw	r3,0(r17)
   22c00:	dfc00217 	ldw	ra,8(sp)
   22c04:	dc400117 	ldw	r17,4(sp)
   22c08:	dc000017 	ldw	r16,0(sp)
   22c0c:	dec00304 	addi	sp,sp,12
   22c10:	f800283a 	ret

00022c14 <_isatty_r>:
   22c14:	defffd04 	addi	sp,sp,-12
   22c18:	dc400115 	stw	r17,4(sp)
   22c1c:	dc000015 	stw	r16,0(sp)
   22c20:	2023883a 	mov	r17,r4
   22c24:	040000f4 	movhi	r16,3
   22c28:	84229d04 	addi	r16,r16,-30092
   22c2c:	2809883a 	mov	r4,r5
   22c30:	dfc00215 	stw	ra,8(sp)
   22c34:	80000015 	stw	zero,0(r16)
   22c38:	00230100 	call	23010 <isatty>
   22c3c:	00ffffc4 	movi	r3,-1
   22c40:	10c00526 	beq	r2,r3,22c58 <_isatty_r+0x44>
   22c44:	dfc00217 	ldw	ra,8(sp)
   22c48:	dc400117 	ldw	r17,4(sp)
   22c4c:	dc000017 	ldw	r16,0(sp)
   22c50:	dec00304 	addi	sp,sp,12
   22c54:	f800283a 	ret
   22c58:	80c00017 	ldw	r3,0(r16)
   22c5c:	183ff926 	beq	r3,zero,22c44 <_isatty_r+0x30>
   22c60:	88c00015 	stw	r3,0(r17)
   22c64:	dfc00217 	ldw	ra,8(sp)
   22c68:	dc400117 	ldw	r17,4(sp)
   22c6c:	dc000017 	ldw	r16,0(sp)
   22c70:	dec00304 	addi	sp,sp,12
   22c74:	f800283a 	ret

00022c78 <_lseek_r>:
   22c78:	defffd04 	addi	sp,sp,-12
   22c7c:	dc400115 	stw	r17,4(sp)
   22c80:	dc000015 	stw	r16,0(sp)
   22c84:	2023883a 	mov	r17,r4
   22c88:	040000f4 	movhi	r16,3
   22c8c:	84229d04 	addi	r16,r16,-30092
   22c90:	2809883a 	mov	r4,r5
   22c94:	300b883a 	mov	r5,r6
   22c98:	380d883a 	mov	r6,r7
   22c9c:	dfc00215 	stw	ra,8(sp)
   22ca0:	80000015 	stw	zero,0(r16)
   22ca4:	00231f00 	call	231f0 <lseek>
   22ca8:	00ffffc4 	movi	r3,-1
   22cac:	10c00526 	beq	r2,r3,22cc4 <_lseek_r+0x4c>
   22cb0:	dfc00217 	ldw	ra,8(sp)
   22cb4:	dc400117 	ldw	r17,4(sp)
   22cb8:	dc000017 	ldw	r16,0(sp)
   22cbc:	dec00304 	addi	sp,sp,12
   22cc0:	f800283a 	ret
   22cc4:	80c00017 	ldw	r3,0(r16)
   22cc8:	183ff926 	beq	r3,zero,22cb0 <_lseek_r+0x38>
   22ccc:	88c00015 	stw	r3,0(r17)
   22cd0:	dfc00217 	ldw	ra,8(sp)
   22cd4:	dc400117 	ldw	r17,4(sp)
   22cd8:	dc000017 	ldw	r16,0(sp)
   22cdc:	dec00304 	addi	sp,sp,12
   22ce0:	f800283a 	ret

00022ce4 <_read_r>:
   22ce4:	defffd04 	addi	sp,sp,-12
   22ce8:	dc400115 	stw	r17,4(sp)
   22cec:	dc000015 	stw	r16,0(sp)
   22cf0:	2023883a 	mov	r17,r4
   22cf4:	040000f4 	movhi	r16,3
   22cf8:	84229d04 	addi	r16,r16,-30092
   22cfc:	2809883a 	mov	r4,r5
   22d00:	300b883a 	mov	r5,r6
   22d04:	380d883a 	mov	r6,r7
   22d08:	dfc00215 	stw	ra,8(sp)
   22d0c:	80000015 	stw	zero,0(r16)
   22d10:	00233cc0 	call	233cc <read>
   22d14:	00ffffc4 	movi	r3,-1
   22d18:	10c00526 	beq	r2,r3,22d30 <_read_r+0x4c>
   22d1c:	dfc00217 	ldw	ra,8(sp)
   22d20:	dc400117 	ldw	r17,4(sp)
   22d24:	dc000017 	ldw	r16,0(sp)
   22d28:	dec00304 	addi	sp,sp,12
   22d2c:	f800283a 	ret
   22d30:	80c00017 	ldw	r3,0(r16)
   22d34:	183ff926 	beq	r3,zero,22d1c <_read_r+0x38>
   22d38:	88c00015 	stw	r3,0(r17)
   22d3c:	dfc00217 	ldw	ra,8(sp)
   22d40:	dc400117 	ldw	r17,4(sp)
   22d44:	dc000017 	ldw	r16,0(sp)
   22d48:	dec00304 	addi	sp,sp,12
   22d4c:	f800283a 	ret

00022d50 <__mulsi3>:
   22d50:	0005883a 	mov	r2,zero
   22d54:	20000726 	beq	r4,zero,22d74 <__mulsi3+0x24>
   22d58:	20c0004c 	andi	r3,r4,1
   22d5c:	2008d07a 	srli	r4,r4,1
   22d60:	18000126 	beq	r3,zero,22d68 <__mulsi3+0x18>
   22d64:	1145883a 	add	r2,r2,r5
   22d68:	294b883a 	add	r5,r5,r5
   22d6c:	203ffa1e 	bne	r4,zero,22d58 <__mulsi3+0x8>
   22d70:	f800283a 	ret
   22d74:	f800283a 	ret

00022d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d78:	defffe04 	addi	sp,sp,-8
   22d7c:	dfc00115 	stw	ra,4(sp)
   22d80:	df000015 	stw	fp,0(sp)
   22d84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d88:	008000b4 	movhi	r2,2
   22d8c:	109c0304 	addi	r2,r2,28684
   22d90:	10800017 	ldw	r2,0(r2)
   22d94:	10000526 	beq	r2,zero,22dac <alt_get_errno+0x34>
   22d98:	008000b4 	movhi	r2,2
   22d9c:	109c0304 	addi	r2,r2,28684
   22da0:	10800017 	ldw	r2,0(r2)
   22da4:	103ee83a 	callr	r2
   22da8:	00000206 	br	22db4 <alt_get_errno+0x3c>
   22dac:	008000f4 	movhi	r2,3
   22db0:	10a29d04 	addi	r2,r2,-30092
}
   22db4:	e037883a 	mov	sp,fp
   22db8:	dfc00117 	ldw	ra,4(sp)
   22dbc:	df000017 	ldw	fp,0(sp)
   22dc0:	dec00204 	addi	sp,sp,8
   22dc4:	f800283a 	ret

00022dc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22dc8:	defffb04 	addi	sp,sp,-20
   22dcc:	dfc00415 	stw	ra,16(sp)
   22dd0:	df000315 	stw	fp,12(sp)
   22dd4:	df000304 	addi	fp,sp,12
   22dd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22ddc:	e0bfff17 	ldw	r2,-4(fp)
   22de0:	10000716 	blt	r2,zero,22e00 <close+0x38>
   22de4:	e13fff17 	ldw	r4,-4(fp)
   22de8:	01400304 	movi	r5,12
   22dec:	0022d500 	call	22d50 <__mulsi3>
   22df0:	00c000b4 	movhi	r3,2
   22df4:	18d78204 	addi	r3,r3,24072
   22df8:	10c5883a 	add	r2,r2,r3
   22dfc:	00000106 	br	22e04 <close+0x3c>
   22e00:	0005883a 	mov	r2,zero
   22e04:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22e08:	e0bffd17 	ldw	r2,-12(fp)
   22e0c:	10001826 	beq	r2,zero,22e70 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22e10:	e0bffd17 	ldw	r2,-12(fp)
   22e14:	10800017 	ldw	r2,0(r2)
   22e18:	10800417 	ldw	r2,16(r2)
   22e1c:	10000626 	beq	r2,zero,22e38 <close+0x70>
   22e20:	e0bffd17 	ldw	r2,-12(fp)
   22e24:	10800017 	ldw	r2,0(r2)
   22e28:	10800417 	ldw	r2,16(r2)
   22e2c:	e13ffd17 	ldw	r4,-12(fp)
   22e30:	103ee83a 	callr	r2
   22e34:	00000106 	br	22e3c <close+0x74>
   22e38:	0005883a 	mov	r2,zero
   22e3c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22e40:	e13fff17 	ldw	r4,-4(fp)
   22e44:	00234c00 	call	234c0 <alt_release_fd>
    if (rval < 0)
   22e48:	e0bffe17 	ldw	r2,-8(fp)
   22e4c:	1000060e 	bge	r2,zero,22e68 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   22e50:	0022d780 	call	22d78 <alt_get_errno>
   22e54:	e0fffe17 	ldw	r3,-8(fp)
   22e58:	00c7c83a 	sub	r3,zero,r3
   22e5c:	10c00015 	stw	r3,0(r2)
      return -1;
   22e60:	00bfffc4 	movi	r2,-1
   22e64:	00000606 	br	22e80 <close+0xb8>
    }
    return 0;
   22e68:	0005883a 	mov	r2,zero
   22e6c:	00000406 	br	22e80 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22e70:	0022d780 	call	22d78 <alt_get_errno>
   22e74:	00c01444 	movi	r3,81
   22e78:	10c00015 	stw	r3,0(r2)
    return -1;
   22e7c:	00bfffc4 	movi	r2,-1
  }
}
   22e80:	e037883a 	mov	sp,fp
   22e84:	dfc00117 	ldw	ra,4(sp)
   22e88:	df000017 	ldw	fp,0(sp)
   22e8c:	dec00204 	addi	sp,sp,8
   22e90:	f800283a 	ret

00022e94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22e94:	defffc04 	addi	sp,sp,-16
   22e98:	df000315 	stw	fp,12(sp)
   22e9c:	df000304 	addi	fp,sp,12
   22ea0:	e13ffd15 	stw	r4,-12(fp)
   22ea4:	e17ffe15 	stw	r5,-8(fp)
   22ea8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22eac:	e0bfff17 	ldw	r2,-4(fp)
}
   22eb0:	e037883a 	mov	sp,fp
   22eb4:	df000017 	ldw	fp,0(sp)
   22eb8:	dec00104 	addi	sp,sp,4
   22ebc:	f800283a 	ret

00022ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ec0:	defffe04 	addi	sp,sp,-8
   22ec4:	dfc00115 	stw	ra,4(sp)
   22ec8:	df000015 	stw	fp,0(sp)
   22ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ed0:	008000b4 	movhi	r2,2
   22ed4:	109c0304 	addi	r2,r2,28684
   22ed8:	10800017 	ldw	r2,0(r2)
   22edc:	10000526 	beq	r2,zero,22ef4 <alt_get_errno+0x34>
   22ee0:	008000b4 	movhi	r2,2
   22ee4:	109c0304 	addi	r2,r2,28684
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	103ee83a 	callr	r2
   22ef0:	00000206 	br	22efc <alt_get_errno+0x3c>
   22ef4:	008000f4 	movhi	r2,3
   22ef8:	10a29d04 	addi	r2,r2,-30092
}
   22efc:	e037883a 	mov	sp,fp
   22f00:	dfc00117 	ldw	ra,4(sp)
   22f04:	df000017 	ldw	fp,0(sp)
   22f08:	dec00204 	addi	sp,sp,8
   22f0c:	f800283a 	ret

00022f10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   22f10:	defffb04 	addi	sp,sp,-20
   22f14:	dfc00415 	stw	ra,16(sp)
   22f18:	df000315 	stw	fp,12(sp)
   22f1c:	df000304 	addi	fp,sp,12
   22f20:	e13ffe15 	stw	r4,-8(fp)
   22f24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22f28:	e0bffe17 	ldw	r2,-8(fp)
   22f2c:	10000716 	blt	r2,zero,22f4c <fstat+0x3c>
   22f30:	e13ffe17 	ldw	r4,-8(fp)
   22f34:	01400304 	movi	r5,12
   22f38:	0022d500 	call	22d50 <__mulsi3>
   22f3c:	00c000b4 	movhi	r3,2
   22f40:	18d78204 	addi	r3,r3,24072
   22f44:	10c5883a 	add	r2,r2,r3
   22f48:	00000106 	br	22f50 <fstat+0x40>
   22f4c:	0005883a 	mov	r2,zero
   22f50:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   22f54:	e0bffd17 	ldw	r2,-12(fp)
   22f58:	10001026 	beq	r2,zero,22f9c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   22f5c:	e0bffd17 	ldw	r2,-12(fp)
   22f60:	10800017 	ldw	r2,0(r2)
   22f64:	10800817 	ldw	r2,32(r2)
   22f68:	10000726 	beq	r2,zero,22f88 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   22f6c:	e0bffd17 	ldw	r2,-12(fp)
   22f70:	10800017 	ldw	r2,0(r2)
   22f74:	10800817 	ldw	r2,32(r2)
   22f78:	e13ffd17 	ldw	r4,-12(fp)
   22f7c:	e17fff17 	ldw	r5,-4(fp)
   22f80:	103ee83a 	callr	r2
   22f84:	00000906 	br	22fac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   22f88:	e0bfff17 	ldw	r2,-4(fp)
   22f8c:	00c80004 	movi	r3,8192
   22f90:	10c00115 	stw	r3,4(r2)
      return 0;
   22f94:	0005883a 	mov	r2,zero
   22f98:	00000406 	br	22fac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22f9c:	0022ec00 	call	22ec0 <alt_get_errno>
   22fa0:	00c01444 	movi	r3,81
   22fa4:	10c00015 	stw	r3,0(r2)
    return -1;
   22fa8:	00bfffc4 	movi	r2,-1
  }
}
   22fac:	e037883a 	mov	sp,fp
   22fb0:	dfc00117 	ldw	ra,4(sp)
   22fb4:	df000017 	ldw	fp,0(sp)
   22fb8:	dec00204 	addi	sp,sp,8
   22fbc:	f800283a 	ret

00022fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fc0:	defffe04 	addi	sp,sp,-8
   22fc4:	dfc00115 	stw	ra,4(sp)
   22fc8:	df000015 	stw	fp,0(sp)
   22fcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fd0:	008000b4 	movhi	r2,2
   22fd4:	109c0304 	addi	r2,r2,28684
   22fd8:	10800017 	ldw	r2,0(r2)
   22fdc:	10000526 	beq	r2,zero,22ff4 <alt_get_errno+0x34>
   22fe0:	008000b4 	movhi	r2,2
   22fe4:	109c0304 	addi	r2,r2,28684
   22fe8:	10800017 	ldw	r2,0(r2)
   22fec:	103ee83a 	callr	r2
   22ff0:	00000206 	br	22ffc <alt_get_errno+0x3c>
   22ff4:	008000f4 	movhi	r2,3
   22ff8:	10a29d04 	addi	r2,r2,-30092
}
   22ffc:	e037883a 	mov	sp,fp
   23000:	dfc00117 	ldw	ra,4(sp)
   23004:	df000017 	ldw	fp,0(sp)
   23008:	dec00204 	addi	sp,sp,8
   2300c:	f800283a 	ret

00023010 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23010:	deffed04 	addi	sp,sp,-76
   23014:	dfc01215 	stw	ra,72(sp)
   23018:	df001115 	stw	fp,68(sp)
   2301c:	df001104 	addi	fp,sp,68
   23020:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23024:	e0bfff17 	ldw	r2,-4(fp)
   23028:	10000716 	blt	r2,zero,23048 <isatty+0x38>
   2302c:	e13fff17 	ldw	r4,-4(fp)
   23030:	01400304 	movi	r5,12
   23034:	0022d500 	call	22d50 <__mulsi3>
   23038:	00c000b4 	movhi	r3,2
   2303c:	18d78204 	addi	r3,r3,24072
   23040:	10c5883a 	add	r2,r2,r3
   23044:	00000106 	br	2304c <isatty+0x3c>
   23048:	0005883a 	mov	r2,zero
   2304c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23050:	e0bfef17 	ldw	r2,-68(fp)
   23054:	10000e26 	beq	r2,zero,23090 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23058:	e0bfef17 	ldw	r2,-68(fp)
   2305c:	10800017 	ldw	r2,0(r2)
   23060:	10800817 	ldw	r2,32(r2)
   23064:	1000021e 	bne	r2,zero,23070 <isatty+0x60>
    {
      return 1;
   23068:	00800044 	movi	r2,1
   2306c:	00000c06 	br	230a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23070:	e0bff004 	addi	r2,fp,-64
   23074:	e13fff17 	ldw	r4,-4(fp)
   23078:	100b883a 	mov	r5,r2
   2307c:	0022f100 	call	22f10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23080:	e0bff117 	ldw	r2,-60(fp)
   23084:	10880020 	cmpeqi	r2,r2,8192
   23088:	10803fcc 	andi	r2,r2,255
   2308c:	00000406 	br	230a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23090:	0022fc00 	call	22fc0 <alt_get_errno>
   23094:	00c01444 	movi	r3,81
   23098:	10c00015 	stw	r3,0(r2)
    return 0;
   2309c:	0005883a 	mov	r2,zero
  }
}
   230a0:	e037883a 	mov	sp,fp
   230a4:	dfc00117 	ldw	ra,4(sp)
   230a8:	df000017 	ldw	fp,0(sp)
   230ac:	dec00204 	addi	sp,sp,8
   230b0:	f800283a 	ret

000230b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   230b4:	defffc04 	addi	sp,sp,-16
   230b8:	df000315 	stw	fp,12(sp)
   230bc:	df000304 	addi	fp,sp,12
   230c0:	e13ffd15 	stw	r4,-12(fp)
   230c4:	e17ffe15 	stw	r5,-8(fp)
   230c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   230cc:	e0fffe17 	ldw	r3,-8(fp)
   230d0:	e0bffd17 	ldw	r2,-12(fp)
   230d4:	18800e26 	beq	r3,r2,23110 <alt_load_section+0x5c>
  {
    while( to != end )
   230d8:	00000a06 	br	23104 <alt_load_section+0x50>
    {
      *to++ = *from++;
   230dc:	e0bffd17 	ldw	r2,-12(fp)
   230e0:	10c00017 	ldw	r3,0(r2)
   230e4:	e0bffe17 	ldw	r2,-8(fp)
   230e8:	10c00015 	stw	r3,0(r2)
   230ec:	e0bffe17 	ldw	r2,-8(fp)
   230f0:	10800104 	addi	r2,r2,4
   230f4:	e0bffe15 	stw	r2,-8(fp)
   230f8:	e0bffd17 	ldw	r2,-12(fp)
   230fc:	10800104 	addi	r2,r2,4
   23100:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23104:	e0fffe17 	ldw	r3,-8(fp)
   23108:	e0bfff17 	ldw	r2,-4(fp)
   2310c:	18bff31e 	bne	r3,r2,230dc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23110:	e037883a 	mov	sp,fp
   23114:	df000017 	ldw	fp,0(sp)
   23118:	dec00104 	addi	sp,sp,4
   2311c:	f800283a 	ret

00023120 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23120:	defffe04 	addi	sp,sp,-8
   23124:	dfc00115 	stw	ra,4(sp)
   23128:	df000015 	stw	fp,0(sp)
   2312c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23130:	010000b4 	movhi	r4,2
   23134:	211c0804 	addi	r4,r4,28704
   23138:	014000b4 	movhi	r5,2
   2313c:	29557604 	addi	r5,r5,21976
   23140:	018000b4 	movhi	r6,2
   23144:	319c0804 	addi	r6,r6,28704
   23148:	00230b40 	call	230b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2314c:	010000b4 	movhi	r4,2
   23150:	21000804 	addi	r4,r4,32
   23154:	014000b4 	movhi	r5,2
   23158:	29400804 	addi	r5,r5,32
   2315c:	018000b4 	movhi	r6,2
   23160:	31806e04 	addi	r6,r6,440
   23164:	00230b40 	call	230b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23168:	010000b4 	movhi	r4,2
   2316c:	21155804 	addi	r4,r4,21856
   23170:	014000b4 	movhi	r5,2
   23174:	29555804 	addi	r5,r5,21856
   23178:	018000b4 	movhi	r6,2
   2317c:	31957604 	addi	r6,r6,21976
   23180:	00230b40 	call	230b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23184:	00244c00 	call	244c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23188:	00246840 	call	24684 <alt_icache_flush_all>
}
   2318c:	e037883a 	mov	sp,fp
   23190:	dfc00117 	ldw	ra,4(sp)
   23194:	df000017 	ldw	fp,0(sp)
   23198:	dec00204 	addi	sp,sp,8
   2319c:	f800283a 	ret

000231a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231a0:	defffe04 	addi	sp,sp,-8
   231a4:	dfc00115 	stw	ra,4(sp)
   231a8:	df000015 	stw	fp,0(sp)
   231ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231b0:	008000b4 	movhi	r2,2
   231b4:	109c0304 	addi	r2,r2,28684
   231b8:	10800017 	ldw	r2,0(r2)
   231bc:	10000526 	beq	r2,zero,231d4 <alt_get_errno+0x34>
   231c0:	008000b4 	movhi	r2,2
   231c4:	109c0304 	addi	r2,r2,28684
   231c8:	10800017 	ldw	r2,0(r2)
   231cc:	103ee83a 	callr	r2
   231d0:	00000206 	br	231dc <alt_get_errno+0x3c>
   231d4:	008000f4 	movhi	r2,3
   231d8:	10a29d04 	addi	r2,r2,-30092
}
   231dc:	e037883a 	mov	sp,fp
   231e0:	dfc00117 	ldw	ra,4(sp)
   231e4:	df000017 	ldw	fp,0(sp)
   231e8:	dec00204 	addi	sp,sp,8
   231ec:	f800283a 	ret

000231f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   231f0:	defff904 	addi	sp,sp,-28
   231f4:	dfc00615 	stw	ra,24(sp)
   231f8:	df000515 	stw	fp,20(sp)
   231fc:	df000504 	addi	fp,sp,20
   23200:	e13ffd15 	stw	r4,-12(fp)
   23204:	e17ffe15 	stw	r5,-8(fp)
   23208:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2320c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23210:	e0bffd17 	ldw	r2,-12(fp)
   23214:	10000716 	blt	r2,zero,23234 <lseek+0x44>
   23218:	e13ffd17 	ldw	r4,-12(fp)
   2321c:	01400304 	movi	r5,12
   23220:	0022d500 	call	22d50 <__mulsi3>
   23224:	00c000b4 	movhi	r3,2
   23228:	18d78204 	addi	r3,r3,24072
   2322c:	10c5883a 	add	r2,r2,r3
   23230:	00000106 	br	23238 <lseek+0x48>
   23234:	0005883a 	mov	r2,zero
   23238:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2323c:	e0bffc17 	ldw	r2,-16(fp)
   23240:	10001026 	beq	r2,zero,23284 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23244:	e0bffc17 	ldw	r2,-16(fp)
   23248:	10800017 	ldw	r2,0(r2)
   2324c:	10800717 	ldw	r2,28(r2)
   23250:	10000926 	beq	r2,zero,23278 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23254:	e0bffc17 	ldw	r2,-16(fp)
   23258:	10800017 	ldw	r2,0(r2)
   2325c:	10800717 	ldw	r2,28(r2)
   23260:	e13ffc17 	ldw	r4,-16(fp)
   23264:	e17ffe17 	ldw	r5,-8(fp)
   23268:	e1bfff17 	ldw	r6,-4(fp)
   2326c:	103ee83a 	callr	r2
   23270:	e0bffb15 	stw	r2,-20(fp)
   23274:	00000506 	br	2328c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23278:	00bfde84 	movi	r2,-134
   2327c:	e0bffb15 	stw	r2,-20(fp)
   23280:	00000206 	br	2328c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   23284:	00bfebc4 	movi	r2,-81
   23288:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2328c:	e0bffb17 	ldw	r2,-20(fp)
   23290:	1000060e 	bge	r2,zero,232ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23294:	00231a00 	call	231a0 <alt_get_errno>
   23298:	e0fffb17 	ldw	r3,-20(fp)
   2329c:	00c7c83a 	sub	r3,zero,r3
   232a0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   232a4:	00bfffc4 	movi	r2,-1
   232a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   232ac:	e0bffb17 	ldw	r2,-20(fp)
}
   232b0:	e037883a 	mov	sp,fp
   232b4:	dfc00117 	ldw	ra,4(sp)
   232b8:	df000017 	ldw	fp,0(sp)
   232bc:	dec00204 	addi	sp,sp,8
   232c0:	f800283a 	ret

000232c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   232c4:	defffd04 	addi	sp,sp,-12
   232c8:	dfc00215 	stw	ra,8(sp)
   232cc:	df000115 	stw	fp,4(sp)
   232d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   232d4:	0009883a 	mov	r4,zero
   232d8:	00237680 	call	23768 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   232dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   232e0:	002379c0 	call	2379c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   232e4:	010000b4 	movhi	r4,2
   232e8:	21156c04 	addi	r4,r4,21936
   232ec:	014000b4 	movhi	r5,2
   232f0:	29556c04 	addi	r5,r5,21936
   232f4:	018000b4 	movhi	r6,2
   232f8:	31956c04 	addi	r6,r6,21936
   232fc:	0024a480 	call	24a48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23300:	00245cc0 	call	245cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23304:	010000b4 	movhi	r4,2
   23308:	21118a04 	addi	r4,r4,17960
   2330c:	002518c0 	call	2518c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23310:	d126a417 	ldw	r4,-25968(gp)
   23314:	d0e6a517 	ldw	r3,-25964(gp)
   23318:	d0a6a617 	ldw	r2,-25960(gp)
   2331c:	180b883a 	mov	r5,r3
   23320:	100d883a 	mov	r6,r2
   23324:	00201f40 	call	201f4 <main>
   23328:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2332c:	01000044 	movi	r4,1
   23330:	0022dc80 	call	22dc8 <close>
  exit (result);
   23334:	e13fff17 	ldw	r4,-4(fp)
   23338:	00251a00 	call	251a0 <exit>

0002333c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2333c:	defffe04 	addi	sp,sp,-8
   23340:	df000115 	stw	fp,4(sp)
   23344:	df000104 	addi	fp,sp,4
   23348:	e13fff15 	stw	r4,-4(fp)
}
   2334c:	e037883a 	mov	sp,fp
   23350:	df000017 	ldw	fp,0(sp)
   23354:	dec00104 	addi	sp,sp,4
   23358:	f800283a 	ret

0002335c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2335c:	defffe04 	addi	sp,sp,-8
   23360:	df000115 	stw	fp,4(sp)
   23364:	df000104 	addi	fp,sp,4
   23368:	e13fff15 	stw	r4,-4(fp)
}
   2336c:	e037883a 	mov	sp,fp
   23370:	df000017 	ldw	fp,0(sp)
   23374:	dec00104 	addi	sp,sp,4
   23378:	f800283a 	ret

0002337c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2337c:	defffe04 	addi	sp,sp,-8
   23380:	dfc00115 	stw	ra,4(sp)
   23384:	df000015 	stw	fp,0(sp)
   23388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2338c:	008000b4 	movhi	r2,2
   23390:	109c0304 	addi	r2,r2,28684
   23394:	10800017 	ldw	r2,0(r2)
   23398:	10000526 	beq	r2,zero,233b0 <alt_get_errno+0x34>
   2339c:	008000b4 	movhi	r2,2
   233a0:	109c0304 	addi	r2,r2,28684
   233a4:	10800017 	ldw	r2,0(r2)
   233a8:	103ee83a 	callr	r2
   233ac:	00000206 	br	233b8 <alt_get_errno+0x3c>
   233b0:	008000f4 	movhi	r2,3
   233b4:	10a29d04 	addi	r2,r2,-30092
}
   233b8:	e037883a 	mov	sp,fp
   233bc:	dfc00117 	ldw	ra,4(sp)
   233c0:	df000017 	ldw	fp,0(sp)
   233c4:	dec00204 	addi	sp,sp,8
   233c8:	f800283a 	ret

000233cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   233cc:	defff904 	addi	sp,sp,-28
   233d0:	dfc00615 	stw	ra,24(sp)
   233d4:	df000515 	stw	fp,20(sp)
   233d8:	df000504 	addi	fp,sp,20
   233dc:	e13ffd15 	stw	r4,-12(fp)
   233e0:	e17ffe15 	stw	r5,-8(fp)
   233e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   233e8:	e0bffd17 	ldw	r2,-12(fp)
   233ec:	10000716 	blt	r2,zero,2340c <read+0x40>
   233f0:	e13ffd17 	ldw	r4,-12(fp)
   233f4:	01400304 	movi	r5,12
   233f8:	0022d500 	call	22d50 <__mulsi3>
   233fc:	00c000b4 	movhi	r3,2
   23400:	18d78204 	addi	r3,r3,24072
   23404:	10c5883a 	add	r2,r2,r3
   23408:	00000106 	br	23410 <read+0x44>
   2340c:	0005883a 	mov	r2,zero
   23410:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23414:	e0bffb17 	ldw	r2,-20(fp)
   23418:	10002026 	beq	r2,zero,2349c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2341c:	e0bffb17 	ldw	r2,-20(fp)
   23420:	10800217 	ldw	r2,8(r2)
   23424:	108000cc 	andi	r2,r2,3
   23428:	10800060 	cmpeqi	r2,r2,1
   2342c:	1000171e 	bne	r2,zero,2348c <read+0xc0>
        (fd->dev->read))
   23430:	e0bffb17 	ldw	r2,-20(fp)
   23434:	10800017 	ldw	r2,0(r2)
   23438:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2343c:	10001326 	beq	r2,zero,2348c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23440:	e0bffb17 	ldw	r2,-20(fp)
   23444:	10800017 	ldw	r2,0(r2)
   23448:	10c00517 	ldw	r3,20(r2)
   2344c:	e0bfff17 	ldw	r2,-4(fp)
   23450:	e13ffb17 	ldw	r4,-20(fp)
   23454:	e17ffe17 	ldw	r5,-8(fp)
   23458:	100d883a 	mov	r6,r2
   2345c:	183ee83a 	callr	r3
   23460:	e0bffc15 	stw	r2,-16(fp)
   23464:	e0bffc17 	ldw	r2,-16(fp)
   23468:	1000060e 	bge	r2,zero,23484 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2346c:	002337c0 	call	2337c <alt_get_errno>
   23470:	e0fffc17 	ldw	r3,-16(fp)
   23474:	00c7c83a 	sub	r3,zero,r3
   23478:	10c00015 	stw	r3,0(r2)
          return -1;
   2347c:	00bfffc4 	movi	r2,-1
   23480:	00000a06 	br	234ac <read+0xe0>
        }
        return rval;
   23484:	e0bffc17 	ldw	r2,-16(fp)
   23488:	00000806 	br	234ac <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2348c:	002337c0 	call	2337c <alt_get_errno>
   23490:	00c00344 	movi	r3,13
   23494:	10c00015 	stw	r3,0(r2)
   23498:	00000306 	br	234a8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2349c:	002337c0 	call	2337c <alt_get_errno>
   234a0:	00c01444 	movi	r3,81
   234a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   234a8:	00bfffc4 	movi	r2,-1
}
   234ac:	e037883a 	mov	sp,fp
   234b0:	dfc00117 	ldw	ra,4(sp)
   234b4:	df000017 	ldw	fp,0(sp)
   234b8:	dec00204 	addi	sp,sp,8
   234bc:	f800283a 	ret

000234c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   234c0:	defffc04 	addi	sp,sp,-16
   234c4:	dfc00315 	stw	ra,12(sp)
   234c8:	df000215 	stw	fp,8(sp)
   234cc:	dc000115 	stw	r16,4(sp)
   234d0:	df000104 	addi	fp,sp,4
   234d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   234d8:	e0bfff17 	ldw	r2,-4(fp)
   234dc:	108000d0 	cmplti	r2,r2,3
   234e0:	1000111e 	bne	r2,zero,23528 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   234e4:	040000b4 	movhi	r16,2
   234e8:	84178204 	addi	r16,r16,24072
   234ec:	e0bfff17 	ldw	r2,-4(fp)
   234f0:	1009883a 	mov	r4,r2
   234f4:	01400304 	movi	r5,12
   234f8:	0022d500 	call	22d50 <__mulsi3>
   234fc:	8085883a 	add	r2,r16,r2
   23500:	10800204 	addi	r2,r2,8
   23504:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23508:	040000b4 	movhi	r16,2
   2350c:	84178204 	addi	r16,r16,24072
   23510:	e0bfff17 	ldw	r2,-4(fp)
   23514:	1009883a 	mov	r4,r2
   23518:	01400304 	movi	r5,12
   2351c:	0022d500 	call	22d50 <__mulsi3>
   23520:	8085883a 	add	r2,r16,r2
   23524:	10000015 	stw	zero,0(r2)
  }
}
   23528:	e037883a 	mov	sp,fp
   2352c:	dfc00217 	ldw	ra,8(sp)
   23530:	df000117 	ldw	fp,4(sp)
   23534:	dc000017 	ldw	r16,0(sp)
   23538:	dec00304 	addi	sp,sp,12
   2353c:	f800283a 	ret

00023540 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23540:	defff904 	addi	sp,sp,-28
   23544:	df000615 	stw	fp,24(sp)
   23548:	df000604 	addi	fp,sp,24
   2354c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23550:	0005303a 	rdctl	r2,status
   23554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23558:	e0fffc17 	ldw	r3,-16(fp)
   2355c:	00bfff84 	movi	r2,-2
   23560:	1884703a 	and	r2,r3,r2
   23564:	1001703a 	wrctl	status,r2
  
  return context;
   23568:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2356c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23570:	d0a00a17 	ldw	r2,-32728(gp)
   23574:	10c000c4 	addi	r3,r2,3
   23578:	00bfff04 	movi	r2,-4
   2357c:	1884703a 	and	r2,r3,r2
   23580:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23584:	d0e00a17 	ldw	r3,-32728(gp)
   23588:	e0bfff17 	ldw	r2,-4(fp)
   2358c:	1885883a 	add	r2,r3,r2
   23590:	00c00134 	movhi	r3,4
   23594:	18c00004 	addi	r3,r3,0
   23598:	1880062e 	bgeu	r3,r2,235b4 <sbrk+0x74>
   2359c:	e0bffa17 	ldw	r2,-24(fp)
   235a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   235a4:	e0bffd17 	ldw	r2,-12(fp)
   235a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   235ac:	00bfffc4 	movi	r2,-1
   235b0:	00000b06 	br	235e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   235b4:	d0a00a17 	ldw	r2,-32728(gp)
   235b8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   235bc:	d0e00a17 	ldw	r3,-32728(gp)
   235c0:	e0bfff17 	ldw	r2,-4(fp)
   235c4:	1885883a 	add	r2,r3,r2
   235c8:	d0a00a15 	stw	r2,-32728(gp)
   235cc:	e0bffa17 	ldw	r2,-24(fp)
   235d0:	e0bffe15 	stw	r2,-8(fp)
   235d4:	e0bffe17 	ldw	r2,-8(fp)
   235d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   235dc:	e0bffb17 	ldw	r2,-20(fp)
} 
   235e0:	e037883a 	mov	sp,fp
   235e4:	df000017 	ldw	fp,0(sp)
   235e8:	dec00104 	addi	sp,sp,4
   235ec:	f800283a 	ret

000235f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235f0:	defffe04 	addi	sp,sp,-8
   235f4:	dfc00115 	stw	ra,4(sp)
   235f8:	df000015 	stw	fp,0(sp)
   235fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23600:	008000b4 	movhi	r2,2
   23604:	109c0304 	addi	r2,r2,28684
   23608:	10800017 	ldw	r2,0(r2)
   2360c:	10000526 	beq	r2,zero,23624 <alt_get_errno+0x34>
   23610:	008000b4 	movhi	r2,2
   23614:	109c0304 	addi	r2,r2,28684
   23618:	10800017 	ldw	r2,0(r2)
   2361c:	103ee83a 	callr	r2
   23620:	00000206 	br	2362c <alt_get_errno+0x3c>
   23624:	008000f4 	movhi	r2,3
   23628:	10a29d04 	addi	r2,r2,-30092
}
   2362c:	e037883a 	mov	sp,fp
   23630:	dfc00117 	ldw	ra,4(sp)
   23634:	df000017 	ldw	fp,0(sp)
   23638:	dec00204 	addi	sp,sp,8
   2363c:	f800283a 	ret

00023640 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23640:	defff904 	addi	sp,sp,-28
   23644:	dfc00615 	stw	ra,24(sp)
   23648:	df000515 	stw	fp,20(sp)
   2364c:	df000504 	addi	fp,sp,20
   23650:	e13ffd15 	stw	r4,-12(fp)
   23654:	e17ffe15 	stw	r5,-8(fp)
   23658:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2365c:	e0bffd17 	ldw	r2,-12(fp)
   23660:	10000716 	blt	r2,zero,23680 <write+0x40>
   23664:	e13ffd17 	ldw	r4,-12(fp)
   23668:	01400304 	movi	r5,12
   2366c:	0022d500 	call	22d50 <__mulsi3>
   23670:	00c000b4 	movhi	r3,2
   23674:	18d78204 	addi	r3,r3,24072
   23678:	10c5883a 	add	r2,r2,r3
   2367c:	00000106 	br	23684 <write+0x44>
   23680:	0005883a 	mov	r2,zero
   23684:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23688:	e0bffb17 	ldw	r2,-20(fp)
   2368c:	10001f26 	beq	r2,zero,2370c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23690:	e0bffb17 	ldw	r2,-20(fp)
   23694:	10800217 	ldw	r2,8(r2)
   23698:	108000cc 	andi	r2,r2,3
   2369c:	10001726 	beq	r2,zero,236fc <write+0xbc>
   236a0:	e0bffb17 	ldw	r2,-20(fp)
   236a4:	10800017 	ldw	r2,0(r2)
   236a8:	10800617 	ldw	r2,24(r2)
   236ac:	10001326 	beq	r2,zero,236fc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   236b0:	e0bffb17 	ldw	r2,-20(fp)
   236b4:	10800017 	ldw	r2,0(r2)
   236b8:	10c00617 	ldw	r3,24(r2)
   236bc:	e0bfff17 	ldw	r2,-4(fp)
   236c0:	e13ffb17 	ldw	r4,-20(fp)
   236c4:	e17ffe17 	ldw	r5,-8(fp)
   236c8:	100d883a 	mov	r6,r2
   236cc:	183ee83a 	callr	r3
   236d0:	e0bffc15 	stw	r2,-16(fp)
   236d4:	e0bffc17 	ldw	r2,-16(fp)
   236d8:	1000060e 	bge	r2,zero,236f4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   236dc:	00235f00 	call	235f0 <alt_get_errno>
   236e0:	e0fffc17 	ldw	r3,-16(fp)
   236e4:	00c7c83a 	sub	r3,zero,r3
   236e8:	10c00015 	stw	r3,0(r2)
        return -1;
   236ec:	00bfffc4 	movi	r2,-1
   236f0:	00000a06 	br	2371c <write+0xdc>
      }
      return rval;
   236f4:	e0bffc17 	ldw	r2,-16(fp)
   236f8:	00000806 	br	2371c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   236fc:	00235f00 	call	235f0 <alt_get_errno>
   23700:	00c00344 	movi	r3,13
   23704:	10c00015 	stw	r3,0(r2)
   23708:	00000306 	br	23718 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2370c:	00235f00 	call	235f0 <alt_get_errno>
   23710:	00c01444 	movi	r3,81
   23714:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   23718:	00bfffc4 	movi	r2,-1
}
   2371c:	e037883a 	mov	sp,fp
   23720:	dfc00117 	ldw	ra,4(sp)
   23724:	df000017 	ldw	fp,0(sp)
   23728:	dec00204 	addi	sp,sp,8
   2372c:	f800283a 	ret

00023730 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23730:	defffd04 	addi	sp,sp,-12
   23734:	dfc00215 	stw	ra,8(sp)
   23738:	df000115 	stw	fp,4(sp)
   2373c:	df000104 	addi	fp,sp,4
   23740:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23744:	e13fff17 	ldw	r4,-4(fp)
   23748:	014000b4 	movhi	r5,2
   2374c:	295c0004 	addi	r5,r5,28672
   23750:	002452c0 	call	2452c <alt_dev_llist_insert>
}
   23754:	e037883a 	mov	sp,fp
   23758:	dfc00117 	ldw	ra,4(sp)
   2375c:	df000017 	ldw	fp,0(sp)
   23760:	dec00204 	addi	sp,sp,8
   23764:	f800283a 	ret

00023768 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23768:	defffd04 	addi	sp,sp,-12
   2376c:	dfc00215 	stw	ra,8(sp)
   23770:	df000115 	stw	fp,4(sp)
   23774:	df000104 	addi	fp,sp,4
   23778:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   2377c:	0024ef40 	call	24ef4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23780:	00800044 	movi	r2,1
   23784:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23788:	e037883a 	mov	sp,fp
   2378c:	dfc00117 	ldw	ra,4(sp)
   23790:	df000017 	ldw	fp,0(sp)
   23794:	dec00204 	addi	sp,sp,8
   23798:	f800283a 	ret

0002379c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2379c:	defffe04 	addi	sp,sp,-8
   237a0:	dfc00115 	stw	ra,4(sp)
   237a4:	df000015 	stw	fp,0(sp)
   237a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ALT_TIMER_0, alt_timer_0);
   237ac:	008000f4 	movhi	r2,3
   237b0:	10a2a104 	addi	r2,r2,-30076
   237b4:	10000015 	stw	zero,0(r2)
   237b8:	008000f4 	movhi	r2,3
   237bc:	10a2a204 	addi	r2,r2,-30072
   237c0:	00c0bef4 	movhi	r3,763
   237c4:	18fc2004 	addi	r3,r3,-3968
   237c8:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   237cc:	01000134 	movhi	r4,4
   237d0:	21040804 	addi	r4,r4,4128
   237d4:	000b883a 	mov	r5,zero
   237d8:	01800044 	movi	r6,1
   237dc:	01c0fa04 	movi	r7,1000
   237e0:	00242f80 	call	242f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_SHARED, fifo_shared);
   237e4:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   237e8:	010000b4 	movhi	r4,2
   237ec:	2117ec04 	addi	r4,r4,24496
   237f0:	000b883a 	mov	r5,zero
   237f4:	01800404 	movi	r6,16
   237f8:	00239840 	call	23984 <altera_avalon_jtag_uart_init>
   237fc:	010000b4 	movhi	r4,2
   23800:	2117e204 	addi	r4,r4,24456
   23804:	00237300 	call	23730 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_0, sysid_0);
   23808:	0001883a 	nop
}
   2380c:	e037883a 	mov	sp,fp
   23810:	dfc00117 	ldw	ra,4(sp)
   23814:	df000017 	ldw	fp,0(sp)
   23818:	dec00204 	addi	sp,sp,8
   2381c:	f800283a 	ret

00023820 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23820:	defffa04 	addi	sp,sp,-24
   23824:	dfc00515 	stw	ra,20(sp)
   23828:	df000415 	stw	fp,16(sp)
   2382c:	df000404 	addi	fp,sp,16
   23830:	e13ffd15 	stw	r4,-12(fp)
   23834:	e17ffe15 	stw	r5,-8(fp)
   23838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2383c:	e0bffd17 	ldw	r2,-12(fp)
   23840:	10800017 	ldw	r2,0(r2)
   23844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23848:	e0bffc17 	ldw	r2,-16(fp)
   2384c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23850:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23854:	10800217 	ldw	r2,8(r2)
   23858:	1809883a 	mov	r4,r3
   2385c:	e17ffe17 	ldw	r5,-8(fp)
   23860:	e1bfff17 	ldw	r6,-4(fp)
   23864:	100f883a 	mov	r7,r2
   23868:	0023e480 	call	23e48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2386c:	e037883a 	mov	sp,fp
   23870:	dfc00117 	ldw	ra,4(sp)
   23874:	df000017 	ldw	fp,0(sp)
   23878:	dec00204 	addi	sp,sp,8
   2387c:	f800283a 	ret

00023880 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23880:	defffa04 	addi	sp,sp,-24
   23884:	dfc00515 	stw	ra,20(sp)
   23888:	df000415 	stw	fp,16(sp)
   2388c:	df000404 	addi	fp,sp,16
   23890:	e13ffd15 	stw	r4,-12(fp)
   23894:	e17ffe15 	stw	r5,-8(fp)
   23898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2389c:	e0bffd17 	ldw	r2,-12(fp)
   238a0:	10800017 	ldw	r2,0(r2)
   238a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   238a8:	e0bffc17 	ldw	r2,-16(fp)
   238ac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   238b0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   238b4:	10800217 	ldw	r2,8(r2)
   238b8:	1809883a 	mov	r4,r3
   238bc:	e17ffe17 	ldw	r5,-8(fp)
   238c0:	e1bfff17 	ldw	r6,-4(fp)
   238c4:	100f883a 	mov	r7,r2
   238c8:	00240600 	call	24060 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   238cc:	e037883a 	mov	sp,fp
   238d0:	dfc00117 	ldw	ra,4(sp)
   238d4:	df000017 	ldw	fp,0(sp)
   238d8:	dec00204 	addi	sp,sp,8
   238dc:	f800283a 	ret

000238e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   238e0:	defffc04 	addi	sp,sp,-16
   238e4:	dfc00315 	stw	ra,12(sp)
   238e8:	df000215 	stw	fp,8(sp)
   238ec:	df000204 	addi	fp,sp,8
   238f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   238f4:	e0bfff17 	ldw	r2,-4(fp)
   238f8:	10800017 	ldw	r2,0(r2)
   238fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23900:	e0bffe17 	ldw	r2,-8(fp)
   23904:	10c00a04 	addi	r3,r2,40
   23908:	e0bfff17 	ldw	r2,-4(fp)
   2390c:	10800217 	ldw	r2,8(r2)
   23910:	1809883a 	mov	r4,r3
   23914:	100b883a 	mov	r5,r2
   23918:	0023cec0 	call	23cec <altera_avalon_jtag_uart_close>
}
   2391c:	e037883a 	mov	sp,fp
   23920:	dfc00117 	ldw	ra,4(sp)
   23924:	df000017 	ldw	fp,0(sp)
   23928:	dec00204 	addi	sp,sp,8
   2392c:	f800283a 	ret

00023930 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23930:	defffa04 	addi	sp,sp,-24
   23934:	dfc00515 	stw	ra,20(sp)
   23938:	df000415 	stw	fp,16(sp)
   2393c:	df000404 	addi	fp,sp,16
   23940:	e13ffd15 	stw	r4,-12(fp)
   23944:	e17ffe15 	stw	r5,-8(fp)
   23948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2394c:	e0bffd17 	ldw	r2,-12(fp)
   23950:	10800017 	ldw	r2,0(r2)
   23954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23958:	e0bffc17 	ldw	r2,-16(fp)
   2395c:	10800a04 	addi	r2,r2,40
   23960:	1009883a 	mov	r4,r2
   23964:	e17ffe17 	ldw	r5,-8(fp)
   23968:	e1bfff17 	ldw	r6,-4(fp)
   2396c:	0023d540 	call	23d54 <altera_avalon_jtag_uart_ioctl>
}
   23970:	e037883a 	mov	sp,fp
   23974:	dfc00117 	ldw	ra,4(sp)
   23978:	df000017 	ldw	fp,0(sp)
   2397c:	dec00204 	addi	sp,sp,8
   23980:	f800283a 	ret

00023984 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23984:	defffa04 	addi	sp,sp,-24
   23988:	dfc00515 	stw	ra,20(sp)
   2398c:	df000415 	stw	fp,16(sp)
   23990:	df000404 	addi	fp,sp,16
   23994:	e13ffd15 	stw	r4,-12(fp)
   23998:	e17ffe15 	stw	r5,-8(fp)
   2399c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   239a0:	e0bffd17 	ldw	r2,-12(fp)
   239a4:	00c00044 	movi	r3,1
   239a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   239ac:	e0bffd17 	ldw	r2,-12(fp)
   239b0:	10800017 	ldw	r2,0(r2)
   239b4:	10800104 	addi	r2,r2,4
   239b8:	e0fffd17 	ldw	r3,-12(fp)
   239bc:	18c00817 	ldw	r3,32(r3)
   239c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   239c4:	e0fffe17 	ldw	r3,-8(fp)
   239c8:	e0bfff17 	ldw	r2,-4(fp)
   239cc:	d8000015 	stw	zero,0(sp)
   239d0:	1809883a 	mov	r4,r3
   239d4:	100b883a 	mov	r5,r2
   239d8:	018000b4 	movhi	r6,2
   239dc:	318e9104 	addi	r6,r6,14916
   239e0:	e1fffd17 	ldw	r7,-12(fp)
   239e4:	00246a00 	call	246a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   239e8:	e0bffd17 	ldw	r2,-12(fp)
   239ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   239f0:	e0bffd17 	ldw	r2,-12(fp)
   239f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   239f8:	008000f4 	movhi	r2,3
   239fc:	10a2a404 	addi	r2,r2,-30064
   23a00:	10800017 	ldw	r2,0(r2)
   23a04:	1809883a 	mov	r4,r3
   23a08:	100b883a 	mov	r5,r2
   23a0c:	018000b4 	movhi	r6,2
   23a10:	318f1204 	addi	r6,r6,15432
   23a14:	e1fffd17 	ldw	r7,-12(fp)
   23a18:	00243800 	call	24380 <alt_alarm_start>
   23a1c:	1000040e 	bge	r2,zero,23a30 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23a20:	e0bffd17 	ldw	r2,-12(fp)
   23a24:	00e00034 	movhi	r3,32768
   23a28:	18ffffc4 	addi	r3,r3,-1
   23a2c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23a30:	e037883a 	mov	sp,fp
   23a34:	dfc00117 	ldw	ra,4(sp)
   23a38:	df000017 	ldw	fp,0(sp)
   23a3c:	dec00204 	addi	sp,sp,8
   23a40:	f800283a 	ret

00023a44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23a44:	defff804 	addi	sp,sp,-32
   23a48:	df000715 	stw	fp,28(sp)
   23a4c:	df000704 	addi	fp,sp,28
   23a50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23a54:	e0bfff17 	ldw	r2,-4(fp)
   23a58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23a5c:	e0bffb17 	ldw	r2,-20(fp)
   23a60:	10800017 	ldw	r2,0(r2)
   23a64:	e0bffc15 	stw	r2,-16(fp)
   23a68:	00000106 	br	23a70 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   23a6c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a70:	e0bffc17 	ldw	r2,-16(fp)
   23a74:	10800104 	addi	r2,r2,4
   23a78:	10800037 	ldwio	r2,0(r2)
   23a7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23a80:	e0bffd17 	ldw	r2,-12(fp)
   23a84:	1080c00c 	andi	r2,r2,768
   23a88:	10006a26 	beq	r2,zero,23c34 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23a8c:	e0bffd17 	ldw	r2,-12(fp)
   23a90:	1080400c 	andi	r2,r2,256
   23a94:	10003326 	beq	r2,zero,23b64 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23a98:	00800074 	movhi	r2,1
   23a9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23aa0:	e0bffb17 	ldw	r2,-20(fp)
   23aa4:	10800a17 	ldw	r2,40(r2)
   23aa8:	10800044 	addi	r2,r2,1
   23aac:	1081ffcc 	andi	r2,r2,2047
   23ab0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23ab4:	e0bffb17 	ldw	r2,-20(fp)
   23ab8:	10c00b17 	ldw	r3,44(r2)
   23abc:	e0bffe17 	ldw	r2,-8(fp)
   23ac0:	18801426 	beq	r3,r2,23b14 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23ac4:	e0bffc17 	ldw	r2,-16(fp)
   23ac8:	10800037 	ldwio	r2,0(r2)
   23acc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23ad0:	e0bff917 	ldw	r2,-28(fp)
   23ad4:	10a0000c 	andi	r2,r2,32768
   23ad8:	10001026 	beq	r2,zero,23b1c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23adc:	e0bffb17 	ldw	r2,-20(fp)
   23ae0:	10800a17 	ldw	r2,40(r2)
   23ae4:	e0fff917 	ldw	r3,-28(fp)
   23ae8:	e13ffb17 	ldw	r4,-20(fp)
   23aec:	2085883a 	add	r2,r4,r2
   23af0:	10800e04 	addi	r2,r2,56
   23af4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23af8:	e0bffb17 	ldw	r2,-20(fp)
   23afc:	10800a17 	ldw	r2,40(r2)
   23b00:	10800044 	addi	r2,r2,1
   23b04:	10c1ffcc 	andi	r3,r2,2047
   23b08:	e0bffb17 	ldw	r2,-20(fp)
   23b0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23b10:	003fe306 	br	23aa0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23b14:	0001883a 	nop
   23b18:	00000106 	br	23b20 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23b1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23b20:	e0bff917 	ldw	r2,-28(fp)
   23b24:	10bfffec 	andhi	r2,r2,65535
   23b28:	10000e26 	beq	r2,zero,23b64 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23b2c:	e0bffb17 	ldw	r2,-20(fp)
   23b30:	10c00817 	ldw	r3,32(r2)
   23b34:	00bfff84 	movi	r2,-2
   23b38:	1886703a 	and	r3,r3,r2
   23b3c:	e0bffb17 	ldw	r2,-20(fp)
   23b40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23b44:	e0bffc17 	ldw	r2,-16(fp)
   23b48:	10800104 	addi	r2,r2,4
   23b4c:	e0fffb17 	ldw	r3,-20(fp)
   23b50:	18c00817 	ldw	r3,32(r3)
   23b54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23b58:	e0bffc17 	ldw	r2,-16(fp)
   23b5c:	10800104 	addi	r2,r2,4
   23b60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23b64:	e0bffd17 	ldw	r2,-12(fp)
   23b68:	1080800c 	andi	r2,r2,512
   23b6c:	103fbf26 	beq	r2,zero,23a6c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23b70:	e0bffd17 	ldw	r2,-12(fp)
   23b74:	1004d43a 	srli	r2,r2,16
   23b78:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b7c:	00001406 	br	23bd0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23b80:	e0bffc17 	ldw	r2,-16(fp)
   23b84:	e0fffb17 	ldw	r3,-20(fp)
   23b88:	18c00d17 	ldw	r3,52(r3)
   23b8c:	e13ffb17 	ldw	r4,-20(fp)
   23b90:	20c7883a 	add	r3,r4,r3
   23b94:	18c20e04 	addi	r3,r3,2104
   23b98:	18c00003 	ldbu	r3,0(r3)
   23b9c:	18c03fcc 	andi	r3,r3,255
   23ba0:	18c0201c 	xori	r3,r3,128
   23ba4:	18ffe004 	addi	r3,r3,-128
   23ba8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23bac:	e0bffb17 	ldw	r2,-20(fp)
   23bb0:	10800d17 	ldw	r2,52(r2)
   23bb4:	10800044 	addi	r2,r2,1
   23bb8:	10c1ffcc 	andi	r3,r2,2047
   23bbc:	e0bffb17 	ldw	r2,-20(fp)
   23bc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23bc4:	e0bffa17 	ldw	r2,-24(fp)
   23bc8:	10bfffc4 	addi	r2,r2,-1
   23bcc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23bd0:	e0bffa17 	ldw	r2,-24(fp)
   23bd4:	10000526 	beq	r2,zero,23bec <altera_avalon_jtag_uart_irq+0x1a8>
   23bd8:	e0bffb17 	ldw	r2,-20(fp)
   23bdc:	10c00d17 	ldw	r3,52(r2)
   23be0:	e0bffb17 	ldw	r2,-20(fp)
   23be4:	10800c17 	ldw	r2,48(r2)
   23be8:	18bfe51e 	bne	r3,r2,23b80 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23bec:	e0bffa17 	ldw	r2,-24(fp)
   23bf0:	103f9e26 	beq	r2,zero,23a6c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23bf4:	e0bffb17 	ldw	r2,-20(fp)
   23bf8:	10c00817 	ldw	r3,32(r2)
   23bfc:	00bfff44 	movi	r2,-3
   23c00:	1886703a 	and	r3,r3,r2
   23c04:	e0bffb17 	ldw	r2,-20(fp)
   23c08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23c0c:	e0bffb17 	ldw	r2,-20(fp)
   23c10:	10800017 	ldw	r2,0(r2)
   23c14:	10800104 	addi	r2,r2,4
   23c18:	e0fffb17 	ldw	r3,-20(fp)
   23c1c:	18c00817 	ldw	r3,32(r3)
   23c20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23c24:	e0bffc17 	ldw	r2,-16(fp)
   23c28:	10800104 	addi	r2,r2,4
   23c2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23c30:	003f8e06 	br	23a6c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23c34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23c38:	e037883a 	mov	sp,fp
   23c3c:	df000017 	ldw	fp,0(sp)
   23c40:	dec00104 	addi	sp,sp,4
   23c44:	f800283a 	ret

00023c48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23c48:	defffc04 	addi	sp,sp,-16
   23c4c:	df000315 	stw	fp,12(sp)
   23c50:	df000304 	addi	fp,sp,12
   23c54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23c58:	e0bfff17 	ldw	r2,-4(fp)
   23c5c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23c60:	e0bffd17 	ldw	r2,-12(fp)
   23c64:	10800017 	ldw	r2,0(r2)
   23c68:	10800104 	addi	r2,r2,4
   23c6c:	10800037 	ldwio	r2,0(r2)
   23c70:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23c74:	e0bffe17 	ldw	r2,-8(fp)
   23c78:	1081000c 	andi	r2,r2,1024
   23c7c:	10000a26 	beq	r2,zero,23ca8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23c80:	e0bffd17 	ldw	r2,-12(fp)
   23c84:	10800017 	ldw	r2,0(r2)
   23c88:	10800104 	addi	r2,r2,4
   23c8c:	e0fffd17 	ldw	r3,-12(fp)
   23c90:	18c00817 	ldw	r3,32(r3)
   23c94:	18c10014 	ori	r3,r3,1024
   23c98:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   23c9c:	e0bffd17 	ldw	r2,-12(fp)
   23ca0:	10000915 	stw	zero,36(r2)
   23ca4:	00000a06 	br	23cd0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23ca8:	e0bffd17 	ldw	r2,-12(fp)
   23cac:	10800917 	ldw	r2,36(r2)
   23cb0:	00e00034 	movhi	r3,32768
   23cb4:	18ffff04 	addi	r3,r3,-4
   23cb8:	18800536 	bltu	r3,r2,23cd0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   23cbc:	e0bffd17 	ldw	r2,-12(fp)
   23cc0:	10800917 	ldw	r2,36(r2)
   23cc4:	10c00044 	addi	r3,r2,1
   23cc8:	e0bffd17 	ldw	r2,-12(fp)
   23ccc:	10c00915 	stw	r3,36(r2)
   23cd0:	008000f4 	movhi	r2,3
   23cd4:	10a2a404 	addi	r2,r2,-30064
   23cd8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23cdc:	e037883a 	mov	sp,fp
   23ce0:	df000017 	ldw	fp,0(sp)
   23ce4:	dec00104 	addi	sp,sp,4
   23ce8:	f800283a 	ret

00023cec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23cec:	defffd04 	addi	sp,sp,-12
   23cf0:	df000215 	stw	fp,8(sp)
   23cf4:	df000204 	addi	fp,sp,8
   23cf8:	e13ffe15 	stw	r4,-8(fp)
   23cfc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23d00:	00000506 	br	23d18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23d04:	e0bfff17 	ldw	r2,-4(fp)
   23d08:	1090000c 	andi	r2,r2,16384
   23d0c:	10000226 	beq	r2,zero,23d18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23d10:	00bffd44 	movi	r2,-11
   23d14:	00000b06 	br	23d44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23d18:	e0bffe17 	ldw	r2,-8(fp)
   23d1c:	10c00d17 	ldw	r3,52(r2)
   23d20:	e0bffe17 	ldw	r2,-8(fp)
   23d24:	10800c17 	ldw	r2,48(r2)
   23d28:	18800526 	beq	r3,r2,23d40 <altera_avalon_jtag_uart_close+0x54>
   23d2c:	e0bffe17 	ldw	r2,-8(fp)
   23d30:	10c00917 	ldw	r3,36(r2)
   23d34:	e0bffe17 	ldw	r2,-8(fp)
   23d38:	10800117 	ldw	r2,4(r2)
   23d3c:	18bff136 	bltu	r3,r2,23d04 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23d40:	0005883a 	mov	r2,zero
}
   23d44:	e037883a 	mov	sp,fp
   23d48:	df000017 	ldw	fp,0(sp)
   23d4c:	dec00104 	addi	sp,sp,4
   23d50:	f800283a 	ret

00023d54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23d54:	defffa04 	addi	sp,sp,-24
   23d58:	df000515 	stw	fp,20(sp)
   23d5c:	df000504 	addi	fp,sp,20
   23d60:	e13ffd15 	stw	r4,-12(fp)
   23d64:	e17ffe15 	stw	r5,-8(fp)
   23d68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23d6c:	00bff9c4 	movi	r2,-25
   23d70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23d74:	e0bffe17 	ldw	r2,-8(fp)
   23d78:	10da8060 	cmpeqi	r3,r2,27137
   23d7c:	1800031e 	bne	r3,zero,23d8c <altera_avalon_jtag_uart_ioctl+0x38>
   23d80:	109a80a0 	cmpeqi	r2,r2,27138
   23d84:	1000181e 	bne	r2,zero,23de8 <altera_avalon_jtag_uart_ioctl+0x94>
   23d88:	00002606 	br	23e24 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23d8c:	e0bffd17 	ldw	r2,-12(fp)
   23d90:	10c00117 	ldw	r3,4(r2)
   23d94:	00a00034 	movhi	r2,32768
   23d98:	10bfffc4 	addi	r2,r2,-1
   23d9c:	18802226 	beq	r3,r2,23e28 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   23da0:	e0bfff17 	ldw	r2,-4(fp)
   23da4:	10800017 	ldw	r2,0(r2)
   23da8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23dac:	e0bffc17 	ldw	r2,-16(fp)
   23db0:	10800090 	cmplti	r2,r2,2
   23db4:	1000061e 	bne	r2,zero,23dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   23db8:	e0fffc17 	ldw	r3,-16(fp)
   23dbc:	00a00034 	movhi	r2,32768
   23dc0:	10bfffc4 	addi	r2,r2,-1
   23dc4:	18800226 	beq	r3,r2,23dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   23dc8:	e0bffc17 	ldw	r2,-16(fp)
   23dcc:	00000206 	br	23dd8 <altera_avalon_jtag_uart_ioctl+0x84>
   23dd0:	00a00034 	movhi	r2,32768
   23dd4:	10bfff84 	addi	r2,r2,-2
   23dd8:	e0fffd17 	ldw	r3,-12(fp)
   23ddc:	18800115 	stw	r2,4(r3)
      rc = 0;
   23de0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23de4:	00001006 	br	23e28 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23de8:	e0bffd17 	ldw	r2,-12(fp)
   23dec:	10c00117 	ldw	r3,4(r2)
   23df0:	00a00034 	movhi	r2,32768
   23df4:	10bfffc4 	addi	r2,r2,-1
   23df8:	18800d26 	beq	r3,r2,23e30 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23dfc:	e0bffd17 	ldw	r2,-12(fp)
   23e00:	10c00917 	ldw	r3,36(r2)
   23e04:	e0bffd17 	ldw	r2,-12(fp)
   23e08:	10800117 	ldw	r2,4(r2)
   23e0c:	1885803a 	cmpltu	r2,r3,r2
   23e10:	10c03fcc 	andi	r3,r2,255
   23e14:	e0bfff17 	ldw	r2,-4(fp)
   23e18:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23e1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23e20:	00000306 	br	23e30 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   23e24:	00000306 	br	23e34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   23e28:	0001883a 	nop
   23e2c:	00000106 	br	23e34 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   23e30:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23e34:	e0bffb17 	ldw	r2,-20(fp)
}
   23e38:	e037883a 	mov	sp,fp
   23e3c:	df000017 	ldw	fp,0(sp)
   23e40:	dec00104 	addi	sp,sp,4
   23e44:	f800283a 	ret

00023e48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23e48:	defff304 	addi	sp,sp,-52
   23e4c:	dfc00c15 	stw	ra,48(sp)
   23e50:	df000b15 	stw	fp,44(sp)
   23e54:	df000b04 	addi	fp,sp,44
   23e58:	e13ffc15 	stw	r4,-16(fp)
   23e5c:	e17ffd15 	stw	r5,-12(fp)
   23e60:	e1bffe15 	stw	r6,-8(fp)
   23e64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23e68:	e0bffd17 	ldw	r2,-12(fp)
   23e6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23e70:	00004706 	br	23f90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23e74:	e0bffc17 	ldw	r2,-16(fp)
   23e78:	10800a17 	ldw	r2,40(r2)
   23e7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23e80:	e0bffc17 	ldw	r2,-16(fp)
   23e84:	10800b17 	ldw	r2,44(r2)
   23e88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   23e8c:	e0fff717 	ldw	r3,-36(fp)
   23e90:	e0bff817 	ldw	r2,-32(fp)
   23e94:	18800536 	bltu	r3,r2,23eac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23e98:	e0fff717 	ldw	r3,-36(fp)
   23e9c:	e0bff817 	ldw	r2,-32(fp)
   23ea0:	1885c83a 	sub	r2,r3,r2
   23ea4:	e0bff615 	stw	r2,-40(fp)
   23ea8:	00000406 	br	23ebc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23eac:	00c20004 	movi	r3,2048
   23eb0:	e0bff817 	ldw	r2,-32(fp)
   23eb4:	1885c83a 	sub	r2,r3,r2
   23eb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23ebc:	e0bff617 	ldw	r2,-40(fp)
   23ec0:	10001e26 	beq	r2,zero,23f3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   23ec4:	e0fffe17 	ldw	r3,-8(fp)
   23ec8:	e0bff617 	ldw	r2,-40(fp)
   23ecc:	1880022e 	bgeu	r3,r2,23ed8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23ed0:	e0bffe17 	ldw	r2,-8(fp)
   23ed4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23ed8:	e0bff817 	ldw	r2,-32(fp)
   23edc:	10800e04 	addi	r2,r2,56
   23ee0:	e0fffc17 	ldw	r3,-16(fp)
   23ee4:	1885883a 	add	r2,r3,r2
   23ee8:	e13ff517 	ldw	r4,-44(fp)
   23eec:	100b883a 	mov	r5,r2
   23ef0:	e1bff617 	ldw	r6,-40(fp)
   23ef4:	00210b80 	call	210b8 <memcpy>
      ptr   += n;
   23ef8:	e0fff517 	ldw	r3,-44(fp)
   23efc:	e0bff617 	ldw	r2,-40(fp)
   23f00:	1885883a 	add	r2,r3,r2
   23f04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23f08:	e0fffe17 	ldw	r3,-8(fp)
   23f0c:	e0bff617 	ldw	r2,-40(fp)
   23f10:	1885c83a 	sub	r2,r3,r2
   23f14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23f18:	e0fff817 	ldw	r3,-32(fp)
   23f1c:	e0bff617 	ldw	r2,-40(fp)
   23f20:	1885883a 	add	r2,r3,r2
   23f24:	10c1ffcc 	andi	r3,r2,2047
   23f28:	e0bffc17 	ldw	r2,-16(fp)
   23f2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23f30:	e0bffe17 	ldw	r2,-8(fp)
   23f34:	00bfcf16 	blt	zero,r2,23e74 <altera_avalon_jtag_uart_read+0x2c>
   23f38:	00000106 	br	23f40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   23f3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   23f40:	e0fff517 	ldw	r3,-44(fp)
   23f44:	e0bffd17 	ldw	r2,-12(fp)
   23f48:	1880141e 	bne	r3,r2,23f9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23f4c:	e0bfff17 	ldw	r2,-4(fp)
   23f50:	1090000c 	andi	r2,r2,16384
   23f54:	1000131e 	bne	r2,zero,23fa4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23f58:	0001883a 	nop
   23f5c:	e0bffc17 	ldw	r2,-16(fp)
   23f60:	10c00a17 	ldw	r3,40(r2)
   23f64:	e0bff717 	ldw	r2,-36(fp)
   23f68:	1880051e 	bne	r3,r2,23f80 <altera_avalon_jtag_uart_read+0x138>
   23f6c:	e0bffc17 	ldw	r2,-16(fp)
   23f70:	10c00917 	ldw	r3,36(r2)
   23f74:	e0bffc17 	ldw	r2,-16(fp)
   23f78:	10800117 	ldw	r2,4(r2)
   23f7c:	18bff736 	bltu	r3,r2,23f5c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23f80:	e0bffc17 	ldw	r2,-16(fp)
   23f84:	10c00a17 	ldw	r3,40(r2)
   23f88:	e0bff717 	ldw	r2,-36(fp)
   23f8c:	18800726 	beq	r3,r2,23fac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23f90:	e0bffe17 	ldw	r2,-8(fp)
   23f94:	00bfb716 	blt	zero,r2,23e74 <altera_avalon_jtag_uart_read+0x2c>
   23f98:	00000506 	br	23fb0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23f9c:	0001883a 	nop
   23fa0:	00000306 	br	23fb0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23fa4:	0001883a 	nop
   23fa8:	00000106 	br	23fb0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23fac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23fb0:	e0fff517 	ldw	r3,-44(fp)
   23fb4:	e0bffd17 	ldw	r2,-12(fp)
   23fb8:	18801726 	beq	r3,r2,24018 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23fbc:	0005303a 	rdctl	r2,status
   23fc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23fc4:	e0fffa17 	ldw	r3,-24(fp)
   23fc8:	00bfff84 	movi	r2,-2
   23fcc:	1884703a 	and	r2,r3,r2
   23fd0:	1001703a 	wrctl	status,r2
  
  return context;
   23fd4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23fd8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23fdc:	e0bffc17 	ldw	r2,-16(fp)
   23fe0:	10800817 	ldw	r2,32(r2)
   23fe4:	10c00054 	ori	r3,r2,1
   23fe8:	e0bffc17 	ldw	r2,-16(fp)
   23fec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23ff0:	e0bffc17 	ldw	r2,-16(fp)
   23ff4:	10800017 	ldw	r2,0(r2)
   23ff8:	10800104 	addi	r2,r2,4
   23ffc:	e0fffc17 	ldw	r3,-16(fp)
   24000:	18c00817 	ldw	r3,32(r3)
   24004:	10c00035 	stwio	r3,0(r2)
   24008:	e0bff917 	ldw	r2,-28(fp)
   2400c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24010:	e0bffb17 	ldw	r2,-20(fp)
   24014:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24018:	e0fff517 	ldw	r3,-44(fp)
   2401c:	e0bffd17 	ldw	r2,-12(fp)
   24020:	18800426 	beq	r3,r2,24034 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   24024:	e0fff517 	ldw	r3,-44(fp)
   24028:	e0bffd17 	ldw	r2,-12(fp)
   2402c:	1885c83a 	sub	r2,r3,r2
   24030:	00000606 	br	2404c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   24034:	e0bfff17 	ldw	r2,-4(fp)
   24038:	1090000c 	andi	r2,r2,16384
   2403c:	10000226 	beq	r2,zero,24048 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   24040:	00bffd44 	movi	r2,-11
   24044:	00000106 	br	2404c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   24048:	00bffec4 	movi	r2,-5
}
   2404c:	e037883a 	mov	sp,fp
   24050:	dfc00117 	ldw	ra,4(sp)
   24054:	df000017 	ldw	fp,0(sp)
   24058:	dec00204 	addi	sp,sp,8
   2405c:	f800283a 	ret

00024060 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24060:	defff304 	addi	sp,sp,-52
   24064:	dfc00c15 	stw	ra,48(sp)
   24068:	df000b15 	stw	fp,44(sp)
   2406c:	df000b04 	addi	fp,sp,44
   24070:	e13ffc15 	stw	r4,-16(fp)
   24074:	e17ffd15 	stw	r5,-12(fp)
   24078:	e1bffe15 	stw	r6,-8(fp)
   2407c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24080:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24084:	e0bffd17 	ldw	r2,-12(fp)
   24088:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2408c:	00003706 	br	2416c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24090:	e0bffc17 	ldw	r2,-16(fp)
   24094:	10800c17 	ldw	r2,48(r2)
   24098:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2409c:	e0bffc17 	ldw	r2,-16(fp)
   240a0:	10800d17 	ldw	r2,52(r2)
   240a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   240a8:	e0fff817 	ldw	r3,-32(fp)
   240ac:	e0bff517 	ldw	r2,-44(fp)
   240b0:	1880062e 	bgeu	r3,r2,240cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   240b4:	e0fff517 	ldw	r3,-44(fp)
   240b8:	e0bff817 	ldw	r2,-32(fp)
   240bc:	1885c83a 	sub	r2,r3,r2
   240c0:	10bfffc4 	addi	r2,r2,-1
   240c4:	e0bff615 	stw	r2,-40(fp)
   240c8:	00000b06 	br	240f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   240cc:	e0bff517 	ldw	r2,-44(fp)
   240d0:	10000526 	beq	r2,zero,240e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   240d4:	00c20004 	movi	r3,2048
   240d8:	e0bff817 	ldw	r2,-32(fp)
   240dc:	1885c83a 	sub	r2,r3,r2
   240e0:	e0bff615 	stw	r2,-40(fp)
   240e4:	00000406 	br	240f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   240e8:	00c1ffc4 	movi	r3,2047
   240ec:	e0bff817 	ldw	r2,-32(fp)
   240f0:	1885c83a 	sub	r2,r3,r2
   240f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   240f8:	e0bff617 	ldw	r2,-40(fp)
   240fc:	10001e26 	beq	r2,zero,24178 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24100:	e0fffe17 	ldw	r3,-8(fp)
   24104:	e0bff617 	ldw	r2,-40(fp)
   24108:	1880022e 	bgeu	r3,r2,24114 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2410c:	e0bffe17 	ldw	r2,-8(fp)
   24110:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24114:	e0bff817 	ldw	r2,-32(fp)
   24118:	10820e04 	addi	r2,r2,2104
   2411c:	e0fffc17 	ldw	r3,-16(fp)
   24120:	1885883a 	add	r2,r3,r2
   24124:	1009883a 	mov	r4,r2
   24128:	e17ffd17 	ldw	r5,-12(fp)
   2412c:	e1bff617 	ldw	r6,-40(fp)
   24130:	00210b80 	call	210b8 <memcpy>
      ptr   += n;
   24134:	e0fffd17 	ldw	r3,-12(fp)
   24138:	e0bff617 	ldw	r2,-40(fp)
   2413c:	1885883a 	add	r2,r3,r2
   24140:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24144:	e0fffe17 	ldw	r3,-8(fp)
   24148:	e0bff617 	ldw	r2,-40(fp)
   2414c:	1885c83a 	sub	r2,r3,r2
   24150:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24154:	e0fff817 	ldw	r3,-32(fp)
   24158:	e0bff617 	ldw	r2,-40(fp)
   2415c:	1885883a 	add	r2,r3,r2
   24160:	10c1ffcc 	andi	r3,r2,2047
   24164:	e0bffc17 	ldw	r2,-16(fp)
   24168:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2416c:	e0bffe17 	ldw	r2,-8(fp)
   24170:	00bfc716 	blt	zero,r2,24090 <altera_avalon_jtag_uart_write+0x30>
   24174:	00000106 	br	2417c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24178:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2417c:	0005303a 	rdctl	r2,status
   24180:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24184:	e0fffa17 	ldw	r3,-24(fp)
   24188:	00bfff84 	movi	r2,-2
   2418c:	1884703a 	and	r2,r3,r2
   24190:	1001703a 	wrctl	status,r2
  
  return context;
   24194:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24198:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2419c:	e0bffc17 	ldw	r2,-16(fp)
   241a0:	10800817 	ldw	r2,32(r2)
   241a4:	10c00094 	ori	r3,r2,2
   241a8:	e0bffc17 	ldw	r2,-16(fp)
   241ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   241b0:	e0bffc17 	ldw	r2,-16(fp)
   241b4:	10800017 	ldw	r2,0(r2)
   241b8:	10800104 	addi	r2,r2,4
   241bc:	e0fffc17 	ldw	r3,-16(fp)
   241c0:	18c00817 	ldw	r3,32(r3)
   241c4:	10c00035 	stwio	r3,0(r2)
   241c8:	e0bff917 	ldw	r2,-28(fp)
   241cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   241d0:	e0bffb17 	ldw	r2,-20(fp)
   241d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   241d8:	e0bffe17 	ldw	r2,-8(fp)
   241dc:	0080110e 	bge	zero,r2,24224 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   241e0:	e0bfff17 	ldw	r2,-4(fp)
   241e4:	1090000c 	andi	r2,r2,16384
   241e8:	1000111e 	bne	r2,zero,24230 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   241ec:	0001883a 	nop
   241f0:	e0bffc17 	ldw	r2,-16(fp)
   241f4:	10c00d17 	ldw	r3,52(r2)
   241f8:	e0bff517 	ldw	r2,-44(fp)
   241fc:	1880051e 	bne	r3,r2,24214 <altera_avalon_jtag_uart_write+0x1b4>
   24200:	e0bffc17 	ldw	r2,-16(fp)
   24204:	10c00917 	ldw	r3,36(r2)
   24208:	e0bffc17 	ldw	r2,-16(fp)
   2420c:	10800117 	ldw	r2,4(r2)
   24210:	18bff736 	bltu	r3,r2,241f0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   24214:	e0bffc17 	ldw	r2,-16(fp)
   24218:	10c00d17 	ldw	r3,52(r2)
   2421c:	e0bff517 	ldw	r2,-44(fp)
   24220:	18800526 	beq	r3,r2,24238 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24224:	e0bffe17 	ldw	r2,-8(fp)
   24228:	00bfd016 	blt	zero,r2,2416c <altera_avalon_jtag_uart_write+0x10c>
   2422c:	00000306 	br	2423c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24230:	0001883a 	nop
   24234:	00000106 	br	2423c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   24238:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2423c:	e0fffd17 	ldw	r3,-12(fp)
   24240:	e0bff717 	ldw	r2,-36(fp)
   24244:	18800426 	beq	r3,r2,24258 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24248:	e0fffd17 	ldw	r3,-12(fp)
   2424c:	e0bff717 	ldw	r2,-36(fp)
   24250:	1885c83a 	sub	r2,r3,r2
   24254:	00000606 	br	24270 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24258:	e0bfff17 	ldw	r2,-4(fp)
   2425c:	1090000c 	andi	r2,r2,16384
   24260:	10000226 	beq	r2,zero,2426c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24264:	00bffd44 	movi	r2,-11
   24268:	00000106 	br	24270 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2426c:	00bffec4 	movi	r2,-5
}
   24270:	e037883a 	mov	sp,fp
   24274:	dfc00117 	ldw	ra,4(sp)
   24278:	df000017 	ldw	fp,0(sp)
   2427c:	dec00204 	addi	sp,sp,8
   24280:	f800283a 	ret

00024284 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   24284:	defffa04 	addi	sp,sp,-24
   24288:	dfc00515 	stw	ra,20(sp)
   2428c:	df000415 	stw	fp,16(sp)
   24290:	df000404 	addi	fp,sp,16
   24294:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24298:	0007883a 	mov	r3,zero
   2429c:	e0bfff17 	ldw	r2,-4(fp)
   242a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   242a4:	e0bfff17 	ldw	r2,-4(fp)
   242a8:	10800104 	addi	r2,r2,4
   242ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   242b0:	0005303a 	rdctl	r2,status
   242b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242b8:	e0fffd17 	ldw	r3,-12(fp)
   242bc:	00bfff84 	movi	r2,-2
   242c0:	1884703a 	and	r2,r3,r2
   242c4:	1001703a 	wrctl	status,r2
  
  return context;
   242c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   242cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   242d0:	0024df00 	call	24df0 <alt_tick>
   242d4:	e0bffc17 	ldw	r2,-16(fp)
   242d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242dc:	e0bffe17 	ldw	r2,-8(fp)
   242e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   242e4:	e037883a 	mov	sp,fp
   242e8:	dfc00117 	ldw	ra,4(sp)
   242ec:	df000017 	ldw	fp,0(sp)
   242f0:	dec00204 	addi	sp,sp,8
   242f4:	f800283a 	ret

000242f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   242f8:	defff804 	addi	sp,sp,-32
   242fc:	dfc00715 	stw	ra,28(sp)
   24300:	df000615 	stw	fp,24(sp)
   24304:	df000604 	addi	fp,sp,24
   24308:	e13ffc15 	stw	r4,-16(fp)
   2430c:	e17ffd15 	stw	r5,-12(fp)
   24310:	e1bffe15 	stw	r6,-8(fp)
   24314:	e1ffff15 	stw	r7,-4(fp)
   24318:	e0bfff17 	ldw	r2,-4(fp)
   2431c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24320:	008000f4 	movhi	r2,3
   24324:	10a2a404 	addi	r2,r2,-30064
   24328:	10800017 	ldw	r2,0(r2)
   2432c:	1000041e 	bne	r2,zero,24340 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   24330:	008000f4 	movhi	r2,3
   24334:	10a2a404 	addi	r2,r2,-30064
   24338:	e0fffb17 	ldw	r3,-20(fp)
   2433c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24340:	e0bffc17 	ldw	r2,-16(fp)
   24344:	10800104 	addi	r2,r2,4
   24348:	00c001c4 	movi	r3,7
   2434c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24350:	d8000015 	stw	zero,0(sp)
   24354:	e13ffd17 	ldw	r4,-12(fp)
   24358:	e17ffe17 	ldw	r5,-8(fp)
   2435c:	018000b4 	movhi	r6,2
   24360:	3190a104 	addi	r6,r6,17028
   24364:	e1fffc17 	ldw	r7,-16(fp)
   24368:	00246a00 	call	246a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2436c:	e037883a 	mov	sp,fp
   24370:	dfc00117 	ldw	ra,4(sp)
   24374:	df000017 	ldw	fp,0(sp)
   24378:	dec00204 	addi	sp,sp,8
   2437c:	f800283a 	ret

00024380 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24380:	defff504 	addi	sp,sp,-44
   24384:	df000a15 	stw	fp,40(sp)
   24388:	df000a04 	addi	fp,sp,40
   2438c:	e13ffc15 	stw	r4,-16(fp)
   24390:	e17ffd15 	stw	r5,-12(fp)
   24394:	e1bffe15 	stw	r6,-8(fp)
   24398:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2439c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   243a0:	008000f4 	movhi	r2,3
   243a4:	10a2a404 	addi	r2,r2,-30064
   243a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   243ac:	10003f26 	beq	r2,zero,244ac <alt_alarm_start+0x12c>
  {
    if (alarm)
   243b0:	e0bffc17 	ldw	r2,-16(fp)
   243b4:	10003b26 	beq	r2,zero,244a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   243b8:	e0bffc17 	ldw	r2,-16(fp)
   243bc:	e0fffe17 	ldw	r3,-8(fp)
   243c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   243c4:	e0bffc17 	ldw	r2,-16(fp)
   243c8:	e0ffff17 	ldw	r3,-4(fp)
   243cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   243d0:	0005303a 	rdctl	r2,status
   243d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   243d8:	e0fff817 	ldw	r3,-32(fp)
   243dc:	00bfff84 	movi	r2,-2
   243e0:	1884703a 	and	r2,r3,r2
   243e4:	1001703a 	wrctl	status,r2
  
  return context;
   243e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   243ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   243f0:	008000f4 	movhi	r2,3
   243f4:	10a2a504 	addi	r2,r2,-30060
   243f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   243fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24400:	e0fffd17 	ldw	r3,-12(fp)
   24404:	e0bff617 	ldw	r2,-40(fp)
   24408:	1885883a 	add	r2,r3,r2
   2440c:	10c00044 	addi	r3,r2,1
   24410:	e0bffc17 	ldw	r2,-16(fp)
   24414:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24418:	e0bffc17 	ldw	r2,-16(fp)
   2441c:	10c00217 	ldw	r3,8(r2)
   24420:	e0bff617 	ldw	r2,-40(fp)
   24424:	1880042e 	bgeu	r3,r2,24438 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   24428:	e0bffc17 	ldw	r2,-16(fp)
   2442c:	00c00044 	movi	r3,1
   24430:	10c00405 	stb	r3,16(r2)
   24434:	00000206 	br	24440 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   24438:	e0bffc17 	ldw	r2,-16(fp)
   2443c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24440:	e0bffc17 	ldw	r2,-16(fp)
   24444:	00c000b4 	movhi	r3,2
   24448:	18dc0604 	addi	r3,r3,28696
   2444c:	e0fff915 	stw	r3,-28(fp)
   24450:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24454:	e0bffa17 	ldw	r2,-24(fp)
   24458:	e0fff917 	ldw	r3,-28(fp)
   2445c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24460:	e0bff917 	ldw	r2,-28(fp)
   24464:	10c00017 	ldw	r3,0(r2)
   24468:	e0bffa17 	ldw	r2,-24(fp)
   2446c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24470:	e0bff917 	ldw	r2,-28(fp)
   24474:	10800017 	ldw	r2,0(r2)
   24478:	e0fffa17 	ldw	r3,-24(fp)
   2447c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24480:	e0bff917 	ldw	r2,-28(fp)
   24484:	e0fffa17 	ldw	r3,-24(fp)
   24488:	10c00015 	stw	r3,0(r2)
   2448c:	e0bff717 	ldw	r2,-36(fp)
   24490:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24494:	e0bffb17 	ldw	r2,-20(fp)
   24498:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2449c:	0005883a 	mov	r2,zero
   244a0:	00000306 	br	244b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   244a4:	00bffa84 	movi	r2,-22
   244a8:	00000106 	br	244b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   244ac:	00bfde84 	movi	r2,-134
  }
}
   244b0:	e037883a 	mov	sp,fp
   244b4:	df000017 	ldw	fp,0(sp)
   244b8:	dec00104 	addi	sp,sp,4
   244bc:	f800283a 	ret

000244c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   244c0:	deffff04 	addi	sp,sp,-4
   244c4:	df000015 	stw	fp,0(sp)
   244c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   244cc:	e037883a 	mov	sp,fp
   244d0:	df000017 	ldw	fp,0(sp)
   244d4:	dec00104 	addi	sp,sp,4
   244d8:	f800283a 	ret

000244dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   244dc:	defffe04 	addi	sp,sp,-8
   244e0:	dfc00115 	stw	ra,4(sp)
   244e4:	df000015 	stw	fp,0(sp)
   244e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   244ec:	008000b4 	movhi	r2,2
   244f0:	109c0304 	addi	r2,r2,28684
   244f4:	10800017 	ldw	r2,0(r2)
   244f8:	10000526 	beq	r2,zero,24510 <alt_get_errno+0x34>
   244fc:	008000b4 	movhi	r2,2
   24500:	109c0304 	addi	r2,r2,28684
   24504:	10800017 	ldw	r2,0(r2)
   24508:	103ee83a 	callr	r2
   2450c:	00000206 	br	24518 <alt_get_errno+0x3c>
   24510:	008000f4 	movhi	r2,3
   24514:	10a29d04 	addi	r2,r2,-30092
}
   24518:	e037883a 	mov	sp,fp
   2451c:	dfc00117 	ldw	ra,4(sp)
   24520:	df000017 	ldw	fp,0(sp)
   24524:	dec00204 	addi	sp,sp,8
   24528:	f800283a 	ret

0002452c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2452c:	defffa04 	addi	sp,sp,-24
   24530:	dfc00515 	stw	ra,20(sp)
   24534:	df000415 	stw	fp,16(sp)
   24538:	df000404 	addi	fp,sp,16
   2453c:	e13ffe15 	stw	r4,-8(fp)
   24540:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24544:	e0bffe17 	ldw	r2,-8(fp)
   24548:	10000326 	beq	r2,zero,24558 <alt_dev_llist_insert+0x2c>
   2454c:	e0bffe17 	ldw	r2,-8(fp)
   24550:	10800217 	ldw	r2,8(r2)
   24554:	1000051e 	bne	r2,zero,2456c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   24558:	00244dc0 	call	244dc <alt_get_errno>
   2455c:	00c00584 	movi	r3,22
   24560:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   24564:	00bffa84 	movi	r2,-22
   24568:	00001306 	br	245b8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2456c:	e0bffe17 	ldw	r2,-8(fp)
   24570:	e0ffff17 	ldw	r3,-4(fp)
   24574:	e0fffc15 	stw	r3,-16(fp)
   24578:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2457c:	e0bffd17 	ldw	r2,-12(fp)
   24580:	e0fffc17 	ldw	r3,-16(fp)
   24584:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24588:	e0bffc17 	ldw	r2,-16(fp)
   2458c:	10c00017 	ldw	r3,0(r2)
   24590:	e0bffd17 	ldw	r2,-12(fp)
   24594:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24598:	e0bffc17 	ldw	r2,-16(fp)
   2459c:	10800017 	ldw	r2,0(r2)
   245a0:	e0fffd17 	ldw	r3,-12(fp)
   245a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   245a8:	e0bffc17 	ldw	r2,-16(fp)
   245ac:	e0fffd17 	ldw	r3,-12(fp)
   245b0:	10c00015 	stw	r3,0(r2)

  return 0;  
   245b4:	0005883a 	mov	r2,zero
}
   245b8:	e037883a 	mov	sp,fp
   245bc:	dfc00117 	ldw	ra,4(sp)
   245c0:	df000017 	ldw	fp,0(sp)
   245c4:	dec00204 	addi	sp,sp,8
   245c8:	f800283a 	ret

000245cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   245cc:	defffd04 	addi	sp,sp,-12
   245d0:	dfc00215 	stw	ra,8(sp)
   245d4:	df000115 	stw	fp,4(sp)
   245d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   245dc:	008000b4 	movhi	r2,2
   245e0:	10955704 	addi	r2,r2,21852
   245e4:	e0bfff15 	stw	r2,-4(fp)
   245e8:	00000606 	br	24604 <_do_ctors+0x38>
        (*ctor) (); 
   245ec:	e0bfff17 	ldw	r2,-4(fp)
   245f0:	10800017 	ldw	r2,0(r2)
   245f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   245f8:	e0bfff17 	ldw	r2,-4(fp)
   245fc:	10bfff04 	addi	r2,r2,-4
   24600:	e0bfff15 	stw	r2,-4(fp)
   24604:	e0ffff17 	ldw	r3,-4(fp)
   24608:	008000b4 	movhi	r2,2
   2460c:	10955804 	addi	r2,r2,21856
   24610:	18bff62e 	bgeu	r3,r2,245ec <_do_ctors+0x20>
        (*ctor) (); 
}
   24614:	e037883a 	mov	sp,fp
   24618:	dfc00117 	ldw	ra,4(sp)
   2461c:	df000017 	ldw	fp,0(sp)
   24620:	dec00204 	addi	sp,sp,8
   24624:	f800283a 	ret

00024628 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24628:	defffd04 	addi	sp,sp,-12
   2462c:	dfc00215 	stw	ra,8(sp)
   24630:	df000115 	stw	fp,4(sp)
   24634:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24638:	008000b4 	movhi	r2,2
   2463c:	10955704 	addi	r2,r2,21852
   24640:	e0bfff15 	stw	r2,-4(fp)
   24644:	00000606 	br	24660 <_do_dtors+0x38>
        (*dtor) (); 
   24648:	e0bfff17 	ldw	r2,-4(fp)
   2464c:	10800017 	ldw	r2,0(r2)
   24650:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24654:	e0bfff17 	ldw	r2,-4(fp)
   24658:	10bfff04 	addi	r2,r2,-4
   2465c:	e0bfff15 	stw	r2,-4(fp)
   24660:	e0ffff17 	ldw	r3,-4(fp)
   24664:	008000b4 	movhi	r2,2
   24668:	10955804 	addi	r2,r2,21856
   2466c:	18bff62e 	bgeu	r3,r2,24648 <_do_dtors+0x20>
        (*dtor) (); 
}
   24670:	e037883a 	mov	sp,fp
   24674:	dfc00117 	ldw	ra,4(sp)
   24678:	df000017 	ldw	fp,0(sp)
   2467c:	dec00204 	addi	sp,sp,8
   24680:	f800283a 	ret

00024684 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24684:	deffff04 	addi	sp,sp,-4
   24688:	df000015 	stw	fp,0(sp)
   2468c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24690:	e037883a 	mov	sp,fp
   24694:	df000017 	ldw	fp,0(sp)
   24698:	dec00104 	addi	sp,sp,4
   2469c:	f800283a 	ret

000246a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   246a0:	defff904 	addi	sp,sp,-28
   246a4:	dfc00615 	stw	ra,24(sp)
   246a8:	df000515 	stw	fp,20(sp)
   246ac:	df000504 	addi	fp,sp,20
   246b0:	e13ffc15 	stw	r4,-16(fp)
   246b4:	e17ffd15 	stw	r5,-12(fp)
   246b8:	e1bffe15 	stw	r6,-8(fp)
   246bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   246c0:	e0800217 	ldw	r2,8(fp)
   246c4:	d8800015 	stw	r2,0(sp)
   246c8:	e13ffc17 	ldw	r4,-16(fp)
   246cc:	e17ffd17 	ldw	r5,-12(fp)
   246d0:	e1bffe17 	ldw	r6,-8(fp)
   246d4:	e1ffff17 	ldw	r7,-4(fp)
   246d8:	00248780 	call	24878 <alt_iic_isr_register>
}  
   246dc:	e037883a 	mov	sp,fp
   246e0:	dfc00117 	ldw	ra,4(sp)
   246e4:	df000017 	ldw	fp,0(sp)
   246e8:	dec00204 	addi	sp,sp,8
   246ec:	f800283a 	ret

000246f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   246f0:	defff904 	addi	sp,sp,-28
   246f4:	df000615 	stw	fp,24(sp)
   246f8:	df000604 	addi	fp,sp,24
   246fc:	e13ffe15 	stw	r4,-8(fp)
   24700:	e17fff15 	stw	r5,-4(fp)
   24704:	e0bfff17 	ldw	r2,-4(fp)
   24708:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2470c:	0005303a 	rdctl	r2,status
   24710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24714:	e0fffb17 	ldw	r3,-20(fp)
   24718:	00bfff84 	movi	r2,-2
   2471c:	1884703a 	and	r2,r3,r2
   24720:	1001703a 	wrctl	status,r2
  
  return context;
   24724:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24728:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2472c:	e0bffa17 	ldw	r2,-24(fp)
   24730:	00c00044 	movi	r3,1
   24734:	1884983a 	sll	r2,r3,r2
   24738:	1007883a 	mov	r3,r2
   2473c:	008000f4 	movhi	r2,3
   24740:	10a2a304 	addi	r2,r2,-30068
   24744:	10800017 	ldw	r2,0(r2)
   24748:	1886b03a 	or	r3,r3,r2
   2474c:	008000f4 	movhi	r2,3
   24750:	10a2a304 	addi	r2,r2,-30068
   24754:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24758:	008000f4 	movhi	r2,3
   2475c:	10a2a304 	addi	r2,r2,-30068
   24760:	10800017 	ldw	r2,0(r2)
   24764:	100170fa 	wrctl	ienable,r2
   24768:	e0bffc17 	ldw	r2,-16(fp)
   2476c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24770:	e0bffd17 	ldw	r2,-12(fp)
   24774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24778:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2477c:	e037883a 	mov	sp,fp
   24780:	df000017 	ldw	fp,0(sp)
   24784:	dec00104 	addi	sp,sp,4
   24788:	f800283a 	ret

0002478c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2478c:	defff904 	addi	sp,sp,-28
   24790:	df000615 	stw	fp,24(sp)
   24794:	df000604 	addi	fp,sp,24
   24798:	e13ffe15 	stw	r4,-8(fp)
   2479c:	e17fff15 	stw	r5,-4(fp)
   247a0:	e0bfff17 	ldw	r2,-4(fp)
   247a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247a8:	0005303a 	rdctl	r2,status
   247ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247b0:	e0fffb17 	ldw	r3,-20(fp)
   247b4:	00bfff84 	movi	r2,-2
   247b8:	1884703a 	and	r2,r3,r2
   247bc:	1001703a 	wrctl	status,r2
  
  return context;
   247c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   247c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   247c8:	e0bffa17 	ldw	r2,-24(fp)
   247cc:	00c00044 	movi	r3,1
   247d0:	1884983a 	sll	r2,r3,r2
   247d4:	0084303a 	nor	r2,zero,r2
   247d8:	1007883a 	mov	r3,r2
   247dc:	008000f4 	movhi	r2,3
   247e0:	10a2a304 	addi	r2,r2,-30068
   247e4:	10800017 	ldw	r2,0(r2)
   247e8:	1886703a 	and	r3,r3,r2
   247ec:	008000f4 	movhi	r2,3
   247f0:	10a2a304 	addi	r2,r2,-30068
   247f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   247f8:	008000f4 	movhi	r2,3
   247fc:	10a2a304 	addi	r2,r2,-30068
   24800:	10800017 	ldw	r2,0(r2)
   24804:	100170fa 	wrctl	ienable,r2
   24808:	e0bffc17 	ldw	r2,-16(fp)
   2480c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24810:	e0bffd17 	ldw	r2,-12(fp)
   24814:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24818:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2481c:	e037883a 	mov	sp,fp
   24820:	df000017 	ldw	fp,0(sp)
   24824:	dec00104 	addi	sp,sp,4
   24828:	f800283a 	ret

0002482c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2482c:	defffc04 	addi	sp,sp,-16
   24830:	df000315 	stw	fp,12(sp)
   24834:	df000304 	addi	fp,sp,12
   24838:	e13ffe15 	stw	r4,-8(fp)
   2483c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24840:	000530fa 	rdctl	r2,ienable
   24844:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24848:	e0bfff17 	ldw	r2,-4(fp)
   2484c:	00c00044 	movi	r3,1
   24850:	1884983a 	sll	r2,r3,r2
   24854:	1007883a 	mov	r3,r2
   24858:	e0bffd17 	ldw	r2,-12(fp)
   2485c:	1884703a 	and	r2,r3,r2
   24860:	1004c03a 	cmpne	r2,r2,zero
   24864:	10803fcc 	andi	r2,r2,255
}
   24868:	e037883a 	mov	sp,fp
   2486c:	df000017 	ldw	fp,0(sp)
   24870:	dec00104 	addi	sp,sp,4
   24874:	f800283a 	ret

00024878 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24878:	defff504 	addi	sp,sp,-44
   2487c:	dfc00a15 	stw	ra,40(sp)
   24880:	df000915 	stw	fp,36(sp)
   24884:	df000904 	addi	fp,sp,36
   24888:	e13ffc15 	stw	r4,-16(fp)
   2488c:	e17ffd15 	stw	r5,-12(fp)
   24890:	e1bffe15 	stw	r6,-8(fp)
   24894:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24898:	00bffa84 	movi	r2,-22
   2489c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   248a0:	e0bffd17 	ldw	r2,-12(fp)
   248a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   248a8:	e0bff817 	ldw	r2,-32(fp)
   248ac:	10800808 	cmpgei	r2,r2,32
   248b0:	1000271e 	bne	r2,zero,24950 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   248b4:	0005303a 	rdctl	r2,status
   248b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   248bc:	e0fffa17 	ldw	r3,-24(fp)
   248c0:	00bfff84 	movi	r2,-2
   248c4:	1884703a 	and	r2,r3,r2
   248c8:	1001703a 	wrctl	status,r2
  
  return context;
   248cc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   248d0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   248d4:	00c000f4 	movhi	r3,3
   248d8:	18e2b004 	addi	r3,r3,-30016
   248dc:	e0bff817 	ldw	r2,-32(fp)
   248e0:	100490fa 	slli	r2,r2,3
   248e4:	1885883a 	add	r2,r3,r2
   248e8:	e0fffe17 	ldw	r3,-8(fp)
   248ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   248f0:	00c000f4 	movhi	r3,3
   248f4:	18e2b004 	addi	r3,r3,-30016
   248f8:	e0bff817 	ldw	r2,-32(fp)
   248fc:	100490fa 	slli	r2,r2,3
   24900:	1885883a 	add	r2,r3,r2
   24904:	10800104 	addi	r2,r2,4
   24908:	e0ffff17 	ldw	r3,-4(fp)
   2490c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24910:	e0bffe17 	ldw	r2,-8(fp)
   24914:	10000526 	beq	r2,zero,2492c <alt_iic_isr_register+0xb4>
   24918:	e0bff817 	ldw	r2,-32(fp)
   2491c:	e13ffc17 	ldw	r4,-16(fp)
   24920:	100b883a 	mov	r5,r2
   24924:	00246f00 	call	246f0 <alt_ic_irq_enable>
   24928:	00000406 	br	2493c <alt_iic_isr_register+0xc4>
   2492c:	e0bff817 	ldw	r2,-32(fp)
   24930:	e13ffc17 	ldw	r4,-16(fp)
   24934:	100b883a 	mov	r5,r2
   24938:	002478c0 	call	2478c <alt_ic_irq_disable>
   2493c:	e0bff715 	stw	r2,-36(fp)
   24940:	e0bff917 	ldw	r2,-28(fp)
   24944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24948:	e0bffb17 	ldw	r2,-20(fp)
   2494c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24950:	e0bff717 	ldw	r2,-36(fp)
}
   24954:	e037883a 	mov	sp,fp
   24958:	dfc00117 	ldw	ra,4(sp)
   2495c:	df000017 	ldw	fp,0(sp)
   24960:	dec00204 	addi	sp,sp,8
   24964:	f800283a 	ret

00024968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24968:	defff804 	addi	sp,sp,-32
   2496c:	dfc00715 	stw	ra,28(sp)
   24970:	df000615 	stw	fp,24(sp)
   24974:	dc000515 	stw	r16,20(sp)
   24978:	df000504 	addi	fp,sp,20
   2497c:	e13ffc15 	stw	r4,-16(fp)
   24980:	e17ffd15 	stw	r5,-12(fp)
   24984:	e1bffe15 	stw	r6,-8(fp)
   24988:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2498c:	e13ffd17 	ldw	r4,-12(fp)
   24990:	e17ffe17 	ldw	r5,-8(fp)
   24994:	e1bfff17 	ldw	r6,-4(fp)
   24998:	0024c000 	call	24c00 <open>
   2499c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   249a0:	e0bffb17 	ldw	r2,-20(fp)
   249a4:	10002216 	blt	r2,zero,24a30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   249a8:	040000b4 	movhi	r16,2
   249ac:	84178204 	addi	r16,r16,24072
   249b0:	e0bffb17 	ldw	r2,-20(fp)
   249b4:	1009883a 	mov	r4,r2
   249b8:	01400304 	movi	r5,12
   249bc:	0022d500 	call	22d50 <__mulsi3>
   249c0:	8085883a 	add	r2,r16,r2
   249c4:	10c00017 	ldw	r3,0(r2)
   249c8:	e0bffc17 	ldw	r2,-16(fp)
   249cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   249d0:	040000b4 	movhi	r16,2
   249d4:	84178204 	addi	r16,r16,24072
   249d8:	e0bffb17 	ldw	r2,-20(fp)
   249dc:	1009883a 	mov	r4,r2
   249e0:	01400304 	movi	r5,12
   249e4:	0022d500 	call	22d50 <__mulsi3>
   249e8:	8085883a 	add	r2,r16,r2
   249ec:	10800104 	addi	r2,r2,4
   249f0:	10c00017 	ldw	r3,0(r2)
   249f4:	e0bffc17 	ldw	r2,-16(fp)
   249f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   249fc:	040000b4 	movhi	r16,2
   24a00:	84178204 	addi	r16,r16,24072
   24a04:	e0bffb17 	ldw	r2,-20(fp)
   24a08:	1009883a 	mov	r4,r2
   24a0c:	01400304 	movi	r5,12
   24a10:	0022d500 	call	22d50 <__mulsi3>
   24a14:	8085883a 	add	r2,r16,r2
   24a18:	10800204 	addi	r2,r2,8
   24a1c:	10c00017 	ldw	r3,0(r2)
   24a20:	e0bffc17 	ldw	r2,-16(fp)
   24a24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24a28:	e13ffb17 	ldw	r4,-20(fp)
   24a2c:	00234c00 	call	234c0 <alt_release_fd>
  }
} 
   24a30:	e037883a 	mov	sp,fp
   24a34:	dfc00217 	ldw	ra,8(sp)
   24a38:	df000117 	ldw	fp,4(sp)
   24a3c:	dc000017 	ldw	r16,0(sp)
   24a40:	dec00304 	addi	sp,sp,12
   24a44:	f800283a 	ret

00024a48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24a48:	defffb04 	addi	sp,sp,-20
   24a4c:	dfc00415 	stw	ra,16(sp)
   24a50:	df000315 	stw	fp,12(sp)
   24a54:	df000304 	addi	fp,sp,12
   24a58:	e13ffd15 	stw	r4,-12(fp)
   24a5c:	e17ffe15 	stw	r5,-8(fp)
   24a60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24a64:	010000b4 	movhi	r4,2
   24a68:	21178504 	addi	r4,r4,24084
   24a6c:	e17ffd17 	ldw	r5,-12(fp)
   24a70:	01800044 	movi	r6,1
   24a74:	01c07fc4 	movi	r7,511
   24a78:	00249680 	call	24968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24a7c:	010000b4 	movhi	r4,2
   24a80:	21178204 	addi	r4,r4,24072
   24a84:	e17ffe17 	ldw	r5,-8(fp)
   24a88:	000d883a 	mov	r6,zero
   24a8c:	01c07fc4 	movi	r7,511
   24a90:	00249680 	call	24968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24a94:	010000b4 	movhi	r4,2
   24a98:	21178804 	addi	r4,r4,24096
   24a9c:	e17fff17 	ldw	r5,-4(fp)
   24aa0:	01800044 	movi	r6,1
   24aa4:	01c07fc4 	movi	r7,511
   24aa8:	00249680 	call	24968 <alt_open_fd>
}  
   24aac:	e037883a 	mov	sp,fp
   24ab0:	dfc00117 	ldw	ra,4(sp)
   24ab4:	df000017 	ldw	fp,0(sp)
   24ab8:	dec00204 	addi	sp,sp,8
   24abc:	f800283a 	ret

00024ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24ac0:	defffe04 	addi	sp,sp,-8
   24ac4:	dfc00115 	stw	ra,4(sp)
   24ac8:	df000015 	stw	fp,0(sp)
   24acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24ad0:	008000b4 	movhi	r2,2
   24ad4:	109c0304 	addi	r2,r2,28684
   24ad8:	10800017 	ldw	r2,0(r2)
   24adc:	10000526 	beq	r2,zero,24af4 <alt_get_errno+0x34>
   24ae0:	008000b4 	movhi	r2,2
   24ae4:	109c0304 	addi	r2,r2,28684
   24ae8:	10800017 	ldw	r2,0(r2)
   24aec:	103ee83a 	callr	r2
   24af0:	00000206 	br	24afc <alt_get_errno+0x3c>
   24af4:	008000f4 	movhi	r2,3
   24af8:	10a29d04 	addi	r2,r2,-30092
}
   24afc:	e037883a 	mov	sp,fp
   24b00:	dfc00117 	ldw	ra,4(sp)
   24b04:	df000017 	ldw	fp,0(sp)
   24b08:	dec00204 	addi	sp,sp,8
   24b0c:	f800283a 	ret

00024b10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24b10:	defffb04 	addi	sp,sp,-20
   24b14:	dfc00415 	stw	ra,16(sp)
   24b18:	df000315 	stw	fp,12(sp)
   24b1c:	dc000215 	stw	r16,8(sp)
   24b20:	df000204 	addi	fp,sp,8
   24b24:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24b28:	e0bfff17 	ldw	r2,-4(fp)
   24b2c:	10800217 	ldw	r2,8(r2)
   24b30:	10d00034 	orhi	r3,r2,16384
   24b34:	e0bfff17 	ldw	r2,-4(fp)
   24b38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24b3c:	e03ffe15 	stw	zero,-8(fp)
   24b40:	00002206 	br	24bcc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24b44:	040000b4 	movhi	r16,2
   24b48:	84178204 	addi	r16,r16,24072
   24b4c:	e0bffe17 	ldw	r2,-8(fp)
   24b50:	1009883a 	mov	r4,r2
   24b54:	01400304 	movi	r5,12
   24b58:	0022d500 	call	22d50 <__mulsi3>
   24b5c:	8085883a 	add	r2,r16,r2
   24b60:	10c00017 	ldw	r3,0(r2)
   24b64:	e0bfff17 	ldw	r2,-4(fp)
   24b68:	10800017 	ldw	r2,0(r2)
   24b6c:	1880141e 	bne	r3,r2,24bc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24b70:	040000b4 	movhi	r16,2
   24b74:	84178204 	addi	r16,r16,24072
   24b78:	e0bffe17 	ldw	r2,-8(fp)
   24b7c:	1009883a 	mov	r4,r2
   24b80:	01400304 	movi	r5,12
   24b84:	0022d500 	call	22d50 <__mulsi3>
   24b88:	8085883a 	add	r2,r16,r2
   24b8c:	10800204 	addi	r2,r2,8
   24b90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24b94:	10000a0e 	bge	r2,zero,24bc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24b98:	e13ffe17 	ldw	r4,-8(fp)
   24b9c:	01400304 	movi	r5,12
   24ba0:	0022d500 	call	22d50 <__mulsi3>
   24ba4:	00c000b4 	movhi	r3,2
   24ba8:	18d78204 	addi	r3,r3,24072
   24bac:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24bb0:	e0bfff17 	ldw	r2,-4(fp)
   24bb4:	18800226 	beq	r3,r2,24bc0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24bb8:	00bffcc4 	movi	r2,-13
   24bbc:	00000a06 	br	24be8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24bc0:	e0bffe17 	ldw	r2,-8(fp)
   24bc4:	10800044 	addi	r2,r2,1
   24bc8:	e0bffe15 	stw	r2,-8(fp)
   24bcc:	008000b4 	movhi	r2,2
   24bd0:	109c0204 	addi	r2,r2,28680
   24bd4:	10800017 	ldw	r2,0(r2)
   24bd8:	1007883a 	mov	r3,r2
   24bdc:	e0bffe17 	ldw	r2,-8(fp)
   24be0:	18bfd82e 	bgeu	r3,r2,24b44 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24be4:	0005883a 	mov	r2,zero
}
   24be8:	e037883a 	mov	sp,fp
   24bec:	dfc00217 	ldw	ra,8(sp)
   24bf0:	df000117 	ldw	fp,4(sp)
   24bf4:	dc000017 	ldw	r16,0(sp)
   24bf8:	dec00304 	addi	sp,sp,12
   24bfc:	f800283a 	ret

00024c00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24c00:	defff604 	addi	sp,sp,-40
   24c04:	dfc00915 	stw	ra,36(sp)
   24c08:	df000815 	stw	fp,32(sp)
   24c0c:	df000804 	addi	fp,sp,32
   24c10:	e13ffd15 	stw	r4,-12(fp)
   24c14:	e17ffe15 	stw	r5,-8(fp)
   24c18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24c1c:	00bfffc4 	movi	r2,-1
   24c20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24c24:	00bffb44 	movi	r2,-19
   24c28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24c2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24c30:	e13ffd17 	ldw	r4,-12(fp)
   24c34:	014000b4 	movhi	r5,2
   24c38:	295c0004 	addi	r5,r5,28672
   24c3c:	0024f140 	call	24f14 <alt_find_dev>
   24c40:	e0bff815 	stw	r2,-32(fp)
   24c44:	e0bff817 	ldw	r2,-32(fp)
   24c48:	1000051e 	bne	r2,zero,24c60 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24c4c:	e13ffd17 	ldw	r4,-12(fp)
   24c50:	0024fa40 	call	24fa4 <alt_find_file>
   24c54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24c58:	00800044 	movi	r2,1
   24c5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24c60:	e0bff817 	ldw	r2,-32(fp)
   24c64:	10002a26 	beq	r2,zero,24d10 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24c68:	e13ff817 	ldw	r4,-32(fp)
   24c6c:	00250b80 	call	250b8 <alt_get_fd>
   24c70:	e0bff915 	stw	r2,-28(fp)
   24c74:	e0bff917 	ldw	r2,-28(fp)
   24c78:	1000030e 	bge	r2,zero,24c88 <open+0x88>
    {
      status = index;
   24c7c:	e0bff917 	ldw	r2,-28(fp)
   24c80:	e0bffa15 	stw	r2,-24(fp)
   24c84:	00002406 	br	24d18 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24c88:	e13ff917 	ldw	r4,-28(fp)
   24c8c:	01400304 	movi	r5,12
   24c90:	0022d500 	call	22d50 <__mulsi3>
   24c94:	00c000b4 	movhi	r3,2
   24c98:	18d78204 	addi	r3,r3,24072
   24c9c:	10c5883a 	add	r2,r2,r3
   24ca0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24ca4:	e0fffe17 	ldw	r3,-8(fp)
   24ca8:	00900034 	movhi	r2,16384
   24cac:	10bfffc4 	addi	r2,r2,-1
   24cb0:	1886703a 	and	r3,r3,r2
   24cb4:	e0bffc17 	ldw	r2,-16(fp)
   24cb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24cbc:	e0bffb17 	ldw	r2,-20(fp)
   24cc0:	1000051e 	bne	r2,zero,24cd8 <open+0xd8>
   24cc4:	e13ffc17 	ldw	r4,-16(fp)
   24cc8:	0024b100 	call	24b10 <alt_file_locked>
   24ccc:	e0bffa15 	stw	r2,-24(fp)
   24cd0:	e0bffa17 	ldw	r2,-24(fp)
   24cd4:	10001016 	blt	r2,zero,24d18 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24cd8:	e0bff817 	ldw	r2,-32(fp)
   24cdc:	10800317 	ldw	r2,12(r2)
   24ce0:	10000826 	beq	r2,zero,24d04 <open+0x104>
   24ce4:	e0bff817 	ldw	r2,-32(fp)
   24ce8:	10800317 	ldw	r2,12(r2)
   24cec:	e13ffc17 	ldw	r4,-16(fp)
   24cf0:	e17ffd17 	ldw	r5,-12(fp)
   24cf4:	e1bffe17 	ldw	r6,-8(fp)
   24cf8:	e1ffff17 	ldw	r7,-4(fp)
   24cfc:	103ee83a 	callr	r2
   24d00:	00000106 	br	24d08 <open+0x108>
   24d04:	0005883a 	mov	r2,zero
   24d08:	e0bffa15 	stw	r2,-24(fp)
   24d0c:	00000206 	br	24d18 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24d10:	00bffb44 	movi	r2,-19
   24d14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24d18:	e0bffa17 	ldw	r2,-24(fp)
   24d1c:	1000080e 	bge	r2,zero,24d40 <open+0x140>
  {
    alt_release_fd (index);  
   24d20:	e13ff917 	ldw	r4,-28(fp)
   24d24:	00234c00 	call	234c0 <alt_release_fd>
    ALT_ERRNO = -status;
   24d28:	0024ac00 	call	24ac0 <alt_get_errno>
   24d2c:	e0fffa17 	ldw	r3,-24(fp)
   24d30:	00c7c83a 	sub	r3,zero,r3
   24d34:	10c00015 	stw	r3,0(r2)
    return -1;
   24d38:	00bfffc4 	movi	r2,-1
   24d3c:	00000106 	br	24d44 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   24d40:	e0bff917 	ldw	r2,-28(fp)
}
   24d44:	e037883a 	mov	sp,fp
   24d48:	dfc00117 	ldw	ra,4(sp)
   24d4c:	df000017 	ldw	fp,0(sp)
   24d50:	dec00204 	addi	sp,sp,8
   24d54:	f800283a 	ret

00024d58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24d58:	defffa04 	addi	sp,sp,-24
   24d5c:	df000515 	stw	fp,20(sp)
   24d60:	df000504 	addi	fp,sp,20
   24d64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24d68:	0005303a 	rdctl	r2,status
   24d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24d70:	e0fffc17 	ldw	r3,-16(fp)
   24d74:	00bfff84 	movi	r2,-2
   24d78:	1884703a 	and	r2,r3,r2
   24d7c:	1001703a 	wrctl	status,r2
  
  return context;
   24d80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24d84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24d88:	e0bfff17 	ldw	r2,-4(fp)
   24d8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24d90:	e0bffd17 	ldw	r2,-12(fp)
   24d94:	10800017 	ldw	r2,0(r2)
   24d98:	e0fffd17 	ldw	r3,-12(fp)
   24d9c:	18c00117 	ldw	r3,4(r3)
   24da0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24da4:	e0bffd17 	ldw	r2,-12(fp)
   24da8:	10800117 	ldw	r2,4(r2)
   24dac:	e0fffd17 	ldw	r3,-12(fp)
   24db0:	18c00017 	ldw	r3,0(r3)
   24db4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24db8:	e0bffd17 	ldw	r2,-12(fp)
   24dbc:	e0fffd17 	ldw	r3,-12(fp)
   24dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24dc4:	e0bffd17 	ldw	r2,-12(fp)
   24dc8:	e0fffd17 	ldw	r3,-12(fp)
   24dcc:	10c00015 	stw	r3,0(r2)
   24dd0:	e0bffb17 	ldw	r2,-20(fp)
   24dd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24dd8:	e0bffe17 	ldw	r2,-8(fp)
   24ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24de0:	e037883a 	mov	sp,fp
   24de4:	df000017 	ldw	fp,0(sp)
   24de8:	dec00104 	addi	sp,sp,4
   24dec:	f800283a 	ret

00024df0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24df0:	defffb04 	addi	sp,sp,-20
   24df4:	dfc00415 	stw	ra,16(sp)
   24df8:	df000315 	stw	fp,12(sp)
   24dfc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24e00:	d0a00c17 	ldw	r2,-32720(gp)
   24e04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24e08:	d0a6ab17 	ldw	r2,-25940(gp)
   24e0c:	10800044 	addi	r2,r2,1
   24e10:	d0a6ab15 	stw	r2,-25940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24e14:	00002e06 	br	24ed0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24e18:	e0bffd17 	ldw	r2,-12(fp)
   24e1c:	10800017 	ldw	r2,0(r2)
   24e20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24e24:	e0bffd17 	ldw	r2,-12(fp)
   24e28:	10800403 	ldbu	r2,16(r2)
   24e2c:	10803fcc 	andi	r2,r2,255
   24e30:	10000426 	beq	r2,zero,24e44 <alt_tick+0x54>
   24e34:	d0a6ab17 	ldw	r2,-25940(gp)
   24e38:	1000021e 	bne	r2,zero,24e44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24e3c:	e0bffd17 	ldw	r2,-12(fp)
   24e40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24e44:	e0bffd17 	ldw	r2,-12(fp)
   24e48:	10800217 	ldw	r2,8(r2)
   24e4c:	d0e6ab17 	ldw	r3,-25940(gp)
   24e50:	18801d36 	bltu	r3,r2,24ec8 <alt_tick+0xd8>
   24e54:	e0bffd17 	ldw	r2,-12(fp)
   24e58:	10800403 	ldbu	r2,16(r2)
   24e5c:	10803fcc 	andi	r2,r2,255
   24e60:	1000191e 	bne	r2,zero,24ec8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24e64:	e0bffd17 	ldw	r2,-12(fp)
   24e68:	10c00317 	ldw	r3,12(r2)
   24e6c:	e0bffd17 	ldw	r2,-12(fp)
   24e70:	10800517 	ldw	r2,20(r2)
   24e74:	1009883a 	mov	r4,r2
   24e78:	183ee83a 	callr	r3
   24e7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24e80:	e0bfff17 	ldw	r2,-4(fp)
   24e84:	1000031e 	bne	r2,zero,24e94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24e88:	e13ffd17 	ldw	r4,-12(fp)
   24e8c:	0024d580 	call	24d58 <alt_alarm_stop>
   24e90:	00000d06 	br	24ec8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24e94:	e0bffd17 	ldw	r2,-12(fp)
   24e98:	10c00217 	ldw	r3,8(r2)
   24e9c:	e0bfff17 	ldw	r2,-4(fp)
   24ea0:	1887883a 	add	r3,r3,r2
   24ea4:	e0bffd17 	ldw	r2,-12(fp)
   24ea8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24eac:	e0bffd17 	ldw	r2,-12(fp)
   24eb0:	10c00217 	ldw	r3,8(r2)
   24eb4:	d0a6ab17 	ldw	r2,-25940(gp)
   24eb8:	1880032e 	bgeu	r3,r2,24ec8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24ebc:	e0bffd17 	ldw	r2,-12(fp)
   24ec0:	00c00044 	movi	r3,1
   24ec4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24ec8:	e0bffe17 	ldw	r2,-8(fp)
   24ecc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24ed0:	e0fffd17 	ldw	r3,-12(fp)
   24ed4:	d0a00c04 	addi	r2,gp,-32720
   24ed8:	18bfcf1e 	bne	r3,r2,24e18 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24edc:	0001883a 	nop
}
   24ee0:	e037883a 	mov	sp,fp
   24ee4:	dfc00117 	ldw	ra,4(sp)
   24ee8:	df000017 	ldw	fp,0(sp)
   24eec:	dec00204 	addi	sp,sp,8
   24ef0:	f800283a 	ret

00024ef4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   24ef4:	deffff04 	addi	sp,sp,-4
   24ef8:	df000015 	stw	fp,0(sp)
   24efc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24f00:	000170fa 	wrctl	ienable,zero
}
   24f04:	e037883a 	mov	sp,fp
   24f08:	df000017 	ldw	fp,0(sp)
   24f0c:	dec00104 	addi	sp,sp,4
   24f10:	f800283a 	ret

00024f14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24f14:	defffa04 	addi	sp,sp,-24
   24f18:	dfc00515 	stw	ra,20(sp)
   24f1c:	df000415 	stw	fp,16(sp)
   24f20:	df000404 	addi	fp,sp,16
   24f24:	e13ffe15 	stw	r4,-8(fp)
   24f28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24f2c:	e0bfff17 	ldw	r2,-4(fp)
   24f30:	10800017 	ldw	r2,0(r2)
   24f34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24f38:	e13ffe17 	ldw	r4,-8(fp)
   24f3c:	00202cc0 	call	202cc <strlen>
   24f40:	10800044 	addi	r2,r2,1
   24f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24f48:	00000d06 	br	24f80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24f4c:	e0bffc17 	ldw	r2,-16(fp)
   24f50:	10c00217 	ldw	r3,8(r2)
   24f54:	e0bffd17 	ldw	r2,-12(fp)
   24f58:	1809883a 	mov	r4,r3
   24f5c:	e17ffe17 	ldw	r5,-8(fp)
   24f60:	100d883a 	mov	r6,r2
   24f64:	00251d80 	call	251d8 <memcmp>
   24f68:	1000021e 	bne	r2,zero,24f74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24f6c:	e0bffc17 	ldw	r2,-16(fp)
   24f70:	00000706 	br	24f90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24f74:	e0bffc17 	ldw	r2,-16(fp)
   24f78:	10800017 	ldw	r2,0(r2)
   24f7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24f80:	e0fffc17 	ldw	r3,-16(fp)
   24f84:	e0bfff17 	ldw	r2,-4(fp)
   24f88:	18bff01e 	bne	r3,r2,24f4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24f8c:	0005883a 	mov	r2,zero
}
   24f90:	e037883a 	mov	sp,fp
   24f94:	dfc00117 	ldw	ra,4(sp)
   24f98:	df000017 	ldw	fp,0(sp)
   24f9c:	dec00204 	addi	sp,sp,8
   24fa0:	f800283a 	ret

00024fa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24fa4:	defffb04 	addi	sp,sp,-20
   24fa8:	dfc00415 	stw	ra,16(sp)
   24fac:	df000315 	stw	fp,12(sp)
   24fb0:	df000304 	addi	fp,sp,12
   24fb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24fb8:	008000b4 	movhi	r2,2
   24fbc:	109bfe04 	addi	r2,r2,28664
   24fc0:	10800017 	ldw	r2,0(r2)
   24fc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24fc8:	00003106 	br	25090 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24fcc:	e0bffd17 	ldw	r2,-12(fp)
   24fd0:	10800217 	ldw	r2,8(r2)
   24fd4:	1009883a 	mov	r4,r2
   24fd8:	00202cc0 	call	202cc <strlen>
   24fdc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24fe0:	e0bffd17 	ldw	r2,-12(fp)
   24fe4:	10c00217 	ldw	r3,8(r2)
   24fe8:	e0bffe17 	ldw	r2,-8(fp)
   24fec:	10bfffc4 	addi	r2,r2,-1
   24ff0:	1885883a 	add	r2,r3,r2
   24ff4:	10800003 	ldbu	r2,0(r2)
   24ff8:	10803fcc 	andi	r2,r2,255
   24ffc:	1080201c 	xori	r2,r2,128
   25000:	10bfe004 	addi	r2,r2,-128
   25004:	10800bd8 	cmpnei	r2,r2,47
   25008:	1000031e 	bne	r2,zero,25018 <alt_find_file+0x74>
    {
      len -= 1;
   2500c:	e0bffe17 	ldw	r2,-8(fp)
   25010:	10bfffc4 	addi	r2,r2,-1
   25014:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25018:	e0bffe17 	ldw	r2,-8(fp)
   2501c:	e0ffff17 	ldw	r3,-4(fp)
   25020:	1885883a 	add	r2,r3,r2
   25024:	10800003 	ldbu	r2,0(r2)
   25028:	10803fcc 	andi	r2,r2,255
   2502c:	1080201c 	xori	r2,r2,128
   25030:	10bfe004 	addi	r2,r2,-128
   25034:	10800be0 	cmpeqi	r2,r2,47
   25038:	1000081e 	bne	r2,zero,2505c <alt_find_file+0xb8>
   2503c:	e0bffe17 	ldw	r2,-8(fp)
   25040:	e0ffff17 	ldw	r3,-4(fp)
   25044:	1885883a 	add	r2,r3,r2
   25048:	10800003 	ldbu	r2,0(r2)
   2504c:	10803fcc 	andi	r2,r2,255
   25050:	1080201c 	xori	r2,r2,128
   25054:	10bfe004 	addi	r2,r2,-128
   25058:	10000a1e 	bne	r2,zero,25084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2505c:	e0bffd17 	ldw	r2,-12(fp)
   25060:	10c00217 	ldw	r3,8(r2)
   25064:	e0bffe17 	ldw	r2,-8(fp)
   25068:	1809883a 	mov	r4,r3
   2506c:	e17fff17 	ldw	r5,-4(fp)
   25070:	100d883a 	mov	r6,r2
   25074:	00251d80 	call	251d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25078:	1000021e 	bne	r2,zero,25084 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2507c:	e0bffd17 	ldw	r2,-12(fp)
   25080:	00000806 	br	250a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   25084:	e0bffd17 	ldw	r2,-12(fp)
   25088:	10800017 	ldw	r2,0(r2)
   2508c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25090:	e0fffd17 	ldw	r3,-12(fp)
   25094:	008000b4 	movhi	r2,2
   25098:	109bfe04 	addi	r2,r2,28664
   2509c:	18bfcb1e 	bne	r3,r2,24fcc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   250a0:	0005883a 	mov	r2,zero
}
   250a4:	e037883a 	mov	sp,fp
   250a8:	dfc00117 	ldw	ra,4(sp)
   250ac:	df000017 	ldw	fp,0(sp)
   250b0:	dec00204 	addi	sp,sp,8
   250b4:	f800283a 	ret

000250b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   250b8:	defffa04 	addi	sp,sp,-24
   250bc:	dfc00515 	stw	ra,20(sp)
   250c0:	df000415 	stw	fp,16(sp)
   250c4:	dc000315 	stw	r16,12(sp)
   250c8:	df000304 	addi	fp,sp,12
   250cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   250d0:	00bffa04 	movi	r2,-24
   250d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   250d8:	e03ffd15 	stw	zero,-12(fp)
   250dc:	00002106 	br	25164 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   250e0:	040000b4 	movhi	r16,2
   250e4:	84178204 	addi	r16,r16,24072
   250e8:	e0bffd17 	ldw	r2,-12(fp)
   250ec:	1009883a 	mov	r4,r2
   250f0:	01400304 	movi	r5,12
   250f4:	0022d500 	call	22d50 <__mulsi3>
   250f8:	8085883a 	add	r2,r16,r2
   250fc:	10800017 	ldw	r2,0(r2)
   25100:	1000151e 	bne	r2,zero,25158 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   25104:	040000b4 	movhi	r16,2
   25108:	84178204 	addi	r16,r16,24072
   2510c:	e0bffd17 	ldw	r2,-12(fp)
   25110:	1009883a 	mov	r4,r2
   25114:	01400304 	movi	r5,12
   25118:	0022d500 	call	22d50 <__mulsi3>
   2511c:	8085883a 	add	r2,r16,r2
   25120:	e0ffff17 	ldw	r3,-4(fp)
   25124:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25128:	008000b4 	movhi	r2,2
   2512c:	109c0204 	addi	r2,r2,28680
   25130:	10c00017 	ldw	r3,0(r2)
   25134:	e0bffd17 	ldw	r2,-12(fp)
   25138:	1880040e 	bge	r3,r2,2514c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2513c:	008000b4 	movhi	r2,2
   25140:	109c0204 	addi	r2,r2,28680
   25144:	e0fffd17 	ldw	r3,-12(fp)
   25148:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2514c:	e0bffd17 	ldw	r2,-12(fp)
   25150:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25154:	00000606 	br	25170 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25158:	e0bffd17 	ldw	r2,-12(fp)
   2515c:	10800044 	addi	r2,r2,1
   25160:	e0bffd15 	stw	r2,-12(fp)
   25164:	e0bffd17 	ldw	r2,-12(fp)
   25168:	10800810 	cmplti	r2,r2,32
   2516c:	103fdc1e 	bne	r2,zero,250e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25170:	e0bffe17 	ldw	r2,-8(fp)
}
   25174:	e037883a 	mov	sp,fp
   25178:	dfc00217 	ldw	ra,8(sp)
   2517c:	df000117 	ldw	fp,4(sp)
   25180:	dc000017 	ldw	r16,0(sp)
   25184:	dec00304 	addi	sp,sp,12
   25188:	f800283a 	ret

0002518c <atexit>:
   2518c:	200b883a 	mov	r5,r4
   25190:	000d883a 	mov	r6,zero
   25194:	0009883a 	mov	r4,zero
   25198:	000f883a 	mov	r7,zero
   2519c:	00252541 	jmpi	25254 <__register_exitproc>

000251a0 <exit>:
   251a0:	defffe04 	addi	sp,sp,-8
   251a4:	000b883a 	mov	r5,zero
   251a8:	dc000015 	stw	r16,0(sp)
   251ac:	dfc00115 	stw	ra,4(sp)
   251b0:	2021883a 	mov	r16,r4
   251b4:	00253840 	call	25384 <__call_exitprocs>
   251b8:	008000b4 	movhi	r2,2
   251bc:	109bfa04 	addi	r2,r2,28648
   251c0:	11000017 	ldw	r4,0(r2)
   251c4:	20800f17 	ldw	r2,60(r4)
   251c8:	10000126 	beq	r2,zero,251d0 <exit+0x30>
   251cc:	103ee83a 	callr	r2
   251d0:	8009883a 	mov	r4,r16
   251d4:	00255240 	call	25524 <_exit>

000251d8 <memcmp>:
   251d8:	01c000c4 	movi	r7,3
   251dc:	3980192e 	bgeu	r7,r6,25244 <memcmp+0x6c>
   251e0:	2904b03a 	or	r2,r5,r4
   251e4:	11c4703a 	and	r2,r2,r7
   251e8:	10000f26 	beq	r2,zero,25228 <memcmp+0x50>
   251ec:	20c00003 	ldbu	r3,0(r4)
   251f0:	28800003 	ldbu	r2,0(r5)
   251f4:	1880151e 	bne	r3,r2,2524c <memcmp+0x74>
   251f8:	31bfff84 	addi	r6,r6,-2
   251fc:	01ffffc4 	movi	r7,-1
   25200:	00000406 	br	25214 <memcmp+0x3c>
   25204:	20c00003 	ldbu	r3,0(r4)
   25208:	28800003 	ldbu	r2,0(r5)
   2520c:	31bfffc4 	addi	r6,r6,-1
   25210:	18800e1e 	bne	r3,r2,2524c <memcmp+0x74>
   25214:	21000044 	addi	r4,r4,1
   25218:	29400044 	addi	r5,r5,1
   2521c:	31fff91e 	bne	r6,r7,25204 <memcmp+0x2c>
   25220:	0005883a 	mov	r2,zero
   25224:	f800283a 	ret
   25228:	20c00017 	ldw	r3,0(r4)
   2522c:	28800017 	ldw	r2,0(r5)
   25230:	1880041e 	bne	r3,r2,25244 <memcmp+0x6c>
   25234:	31bfff04 	addi	r6,r6,-4
   25238:	21000104 	addi	r4,r4,4
   2523c:	29400104 	addi	r5,r5,4
   25240:	39bff936 	bltu	r7,r6,25228 <memcmp+0x50>
   25244:	303fe91e 	bne	r6,zero,251ec <memcmp+0x14>
   25248:	003ff506 	br	25220 <memcmp+0x48>
   2524c:	1885c83a 	sub	r2,r3,r2
   25250:	f800283a 	ret

00025254 <__register_exitproc>:
   25254:	defffa04 	addi	sp,sp,-24
   25258:	008000b4 	movhi	r2,2
   2525c:	109bfa04 	addi	r2,r2,28648
   25260:	dc000315 	stw	r16,12(sp)
   25264:	14000017 	ldw	r16,0(r2)
   25268:	dc400415 	stw	r17,16(sp)
   2526c:	dfc00515 	stw	ra,20(sp)
   25270:	80805217 	ldw	r2,328(r16)
   25274:	2023883a 	mov	r17,r4
   25278:	10003e26 	beq	r2,zero,25374 <__register_exitproc+0x120>
   2527c:	10c00117 	ldw	r3,4(r2)
   25280:	020007c4 	movi	r8,31
   25284:	40c0180e 	bge	r8,r3,252e8 <__register_exitproc+0x94>
   25288:	00800034 	movhi	r2,0
   2528c:	10800004 	addi	r2,r2,0
   25290:	1000061e 	bne	r2,zero,252ac <__register_exitproc+0x58>
   25294:	00bfffc4 	movi	r2,-1
   25298:	dfc00517 	ldw	ra,20(sp)
   2529c:	dc400417 	ldw	r17,16(sp)
   252a0:	dc000317 	ldw	r16,12(sp)
   252a4:	dec00604 	addi	sp,sp,24
   252a8:	f800283a 	ret
   252ac:	01006404 	movi	r4,400
   252b0:	d9400015 	stw	r5,0(sp)
   252b4:	d9800115 	stw	r6,4(sp)
   252b8:	d9c00215 	stw	r7,8(sp)
   252bc:	00000000 	call	0 <__alt_mem_onchip_mem_c0-0x20000>
   252c0:	d9400017 	ldw	r5,0(sp)
   252c4:	d9800117 	ldw	r6,4(sp)
   252c8:	d9c00217 	ldw	r7,8(sp)
   252cc:	103ff126 	beq	r2,zero,25294 <__register_exitproc+0x40>
   252d0:	80c05217 	ldw	r3,328(r16)
   252d4:	10000115 	stw	zero,4(r2)
   252d8:	10c00015 	stw	r3,0(r2)
   252dc:	80805215 	stw	r2,328(r16)
   252e0:	10006215 	stw	zero,392(r2)
   252e4:	10006315 	stw	zero,396(r2)
   252e8:	10c00117 	ldw	r3,4(r2)
   252ec:	88000d1e 	bne	r17,zero,25324 <__register_exitproc+0xd0>
   252f0:	19000084 	addi	r4,r3,2
   252f4:	2109883a 	add	r4,r4,r4
   252f8:	18c00044 	addi	r3,r3,1
   252fc:	2109883a 	add	r4,r4,r4
   25300:	1109883a 	add	r4,r2,r4
   25304:	10c00115 	stw	r3,4(r2)
   25308:	0005883a 	mov	r2,zero
   2530c:	21400015 	stw	r5,0(r4)
   25310:	dfc00517 	ldw	ra,20(sp)
   25314:	dc400417 	ldw	r17,16(sp)
   25318:	dc000317 	ldw	r16,12(sp)
   2531c:	dec00604 	addi	sp,sp,24
   25320:	f800283a 	ret
   25324:	02400044 	movi	r9,1
   25328:	12806217 	ldw	r10,392(r2)
   2532c:	48d2983a 	sll	r9,r9,r3
   25330:	19000804 	addi	r4,r3,32
   25334:	18d1883a 	add	r8,r3,r3
   25338:	2109883a 	add	r4,r4,r4
   2533c:	4211883a 	add	r8,r8,r8
   25340:	2109883a 	add	r4,r4,r4
   25344:	1109883a 	add	r4,r2,r4
   25348:	1211883a 	add	r8,r2,r8
   2534c:	5254b03a 	or	r10,r10,r9
   25350:	21c02215 	stw	r7,136(r4)
   25354:	41802215 	stw	r6,136(r8)
   25358:	12806215 	stw	r10,392(r2)
   2535c:	01000084 	movi	r4,2
   25360:	893fe31e 	bne	r17,r4,252f0 <__register_exitproc+0x9c>
   25364:	11006317 	ldw	r4,396(r2)
   25368:	2252b03a 	or	r9,r4,r9
   2536c:	12406315 	stw	r9,396(r2)
   25370:	003fdf06 	br	252f0 <__register_exitproc+0x9c>
   25374:	008000f4 	movhi	r2,3
   25378:	10a2f004 	addi	r2,r2,-29760
   2537c:	80805215 	stw	r2,328(r16)
   25380:	003fbe06 	br	2527c <__register_exitproc+0x28>

00025384 <__call_exitprocs>:
   25384:	008000b4 	movhi	r2,2
   25388:	109bfa04 	addi	r2,r2,28648
   2538c:	10800017 	ldw	r2,0(r2)
   25390:	defff304 	addi	sp,sp,-52
   25394:	df000b15 	stw	fp,44(sp)
   25398:	d8800015 	stw	r2,0(sp)
   2539c:	10805204 	addi	r2,r2,328
   253a0:	dd400815 	stw	r21,32(sp)
   253a4:	dfc00c15 	stw	ra,48(sp)
   253a8:	ddc00a15 	stw	r23,40(sp)
   253ac:	dd800915 	stw	r22,36(sp)
   253b0:	dd000715 	stw	r20,28(sp)
   253b4:	dcc00615 	stw	r19,24(sp)
   253b8:	dc800515 	stw	r18,20(sp)
   253bc:	dc400415 	stw	r17,16(sp)
   253c0:	dc000315 	stw	r16,12(sp)
   253c4:	d9000115 	stw	r4,4(sp)
   253c8:	2839883a 	mov	fp,r5
   253cc:	d8800215 	stw	r2,8(sp)
   253d0:	057fffc4 	movi	r21,-1
   253d4:	d8800017 	ldw	r2,0(sp)
   253d8:	ddc00217 	ldw	r23,8(sp)
   253dc:	14805217 	ldw	r18,328(r2)
   253e0:	90001726 	beq	r18,zero,25440 <__call_exitprocs+0xbc>
   253e4:	94400117 	ldw	r17,4(r18)
   253e8:	8c3fffc4 	addi	r16,r17,-1
   253ec:	80001116 	blt	r16,zero,25434 <__call_exitprocs+0xb0>
   253f0:	8c400044 	addi	r17,r17,1
   253f4:	8427883a 	add	r19,r16,r16
   253f8:	8c63883a 	add	r17,r17,r17
   253fc:	95802204 	addi	r22,r18,136
   25400:	9ce7883a 	add	r19,r19,r19
   25404:	8c63883a 	add	r17,r17,r17
   25408:	b4e7883a 	add	r19,r22,r19
   2540c:	9463883a 	add	r17,r18,r17
   25410:	e0001726 	beq	fp,zero,25470 <__call_exitprocs+0xec>
   25414:	8c87c83a 	sub	r3,r17,r18
   25418:	b0c7883a 	add	r3,r22,r3
   2541c:	18c01e17 	ldw	r3,120(r3)
   25420:	1f001326 	beq	r3,fp,25470 <__call_exitprocs+0xec>
   25424:	843fffc4 	addi	r16,r16,-1
   25428:	9cffff04 	addi	r19,r19,-4
   2542c:	8c7fff04 	addi	r17,r17,-4
   25430:	857ff71e 	bne	r16,r21,25410 <__call_exitprocs+0x8c>
   25434:	00800034 	movhi	r2,0
   25438:	10800004 	addi	r2,r2,0
   2543c:	10002a1e 	bne	r2,zero,254e8 <__call_exitprocs+0x164>
   25440:	dfc00c17 	ldw	ra,48(sp)
   25444:	df000b17 	ldw	fp,44(sp)
   25448:	ddc00a17 	ldw	r23,40(sp)
   2544c:	dd800917 	ldw	r22,36(sp)
   25450:	dd400817 	ldw	r21,32(sp)
   25454:	dd000717 	ldw	r20,28(sp)
   25458:	dcc00617 	ldw	r19,24(sp)
   2545c:	dc800517 	ldw	r18,20(sp)
   25460:	dc400417 	ldw	r17,16(sp)
   25464:	dc000317 	ldw	r16,12(sp)
   25468:	dec00d04 	addi	sp,sp,52
   2546c:	f800283a 	ret
   25470:	91000117 	ldw	r4,4(r18)
   25474:	88c00017 	ldw	r3,0(r17)
   25478:	213fffc4 	addi	r4,r4,-1
   2547c:	24001526 	beq	r4,r16,254d4 <__call_exitprocs+0x150>
   25480:	88000015 	stw	zero,0(r17)
   25484:	183fe726 	beq	r3,zero,25424 <__call_exitprocs+0xa0>
   25488:	00800044 	movi	r2,1
   2548c:	1408983a 	sll	r4,r2,r16
   25490:	91406217 	ldw	r5,392(r18)
   25494:	95000117 	ldw	r20,4(r18)
   25498:	214a703a 	and	r5,r4,r5
   2549c:	28000b26 	beq	r5,zero,254cc <__call_exitprocs+0x148>
   254a0:	91406317 	ldw	r5,396(r18)
   254a4:	2148703a 	and	r4,r4,r5
   254a8:	20000c1e 	bne	r4,zero,254dc <__call_exitprocs+0x158>
   254ac:	99400017 	ldw	r5,0(r19)
   254b0:	d9000117 	ldw	r4,4(sp)
   254b4:	183ee83a 	callr	r3
   254b8:	90c00117 	ldw	r3,4(r18)
   254bc:	1d3fc51e 	bne	r3,r20,253d4 <__call_exitprocs+0x50>
   254c0:	b8c00017 	ldw	r3,0(r23)
   254c4:	1cbfd726 	beq	r3,r18,25424 <__call_exitprocs+0xa0>
   254c8:	003fc206 	br	253d4 <__call_exitprocs+0x50>
   254cc:	183ee83a 	callr	r3
   254d0:	003ff906 	br	254b8 <__call_exitprocs+0x134>
   254d4:	94000115 	stw	r16,4(r18)
   254d8:	003fea06 	br	25484 <__call_exitprocs+0x100>
   254dc:	99000017 	ldw	r4,0(r19)
   254e0:	183ee83a 	callr	r3
   254e4:	003ff406 	br	254b8 <__call_exitprocs+0x134>
   254e8:	90c00117 	ldw	r3,4(r18)
   254ec:	1800071e 	bne	r3,zero,2550c <__call_exitprocs+0x188>
   254f0:	90c00017 	ldw	r3,0(r18)
   254f4:	18000926 	beq	r3,zero,2551c <__call_exitprocs+0x198>
   254f8:	9009883a 	mov	r4,r18
   254fc:	b8c00015 	stw	r3,0(r23)
   25500:	00000000 	call	0 <__alt_mem_onchip_mem_c0-0x20000>
   25504:	bc800017 	ldw	r18,0(r23)
   25508:	003fb506 	br	253e0 <__call_exitprocs+0x5c>
   2550c:	90c00017 	ldw	r3,0(r18)
   25510:	902f883a 	mov	r23,r18
   25514:	1825883a 	mov	r18,r3
   25518:	003fb106 	br	253e0 <__call_exitprocs+0x5c>
   2551c:	0007883a 	mov	r3,zero
   25520:	003ffb06 	br	25510 <__call_exitprocs+0x18c>

00025524 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25524:	defffc04 	addi	sp,sp,-16
   25528:	df000315 	stw	fp,12(sp)
   2552c:	df000304 	addi	fp,sp,12
   25530:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25534:	0001883a 	nop
   25538:	e0bfff17 	ldw	r2,-4(fp)
   2553c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   25540:	e0bffd17 	ldw	r2,-12(fp)
   25544:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25548:	e0bffe17 	ldw	r2,-8(fp)
   2554c:	10000226 	beq	r2,zero,25558 <_exit+0x34>
    ALT_SIM_FAIL();
   25550:	002af070 	cmpltui	zero,zero,43969
   25554:	00000106 	br	2555c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   25558:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2555c:	003fff06 	br	2555c <_exit+0x38>

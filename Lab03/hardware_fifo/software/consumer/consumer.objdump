
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000caa4 memsz 0x0000caa4 flags r-x
    LOAD off    0x0000dac4 vaddr 0x0002cac4 paddr 0x0002e51c align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000ff74 vaddr 0x0002ff74 paddr 0x0002ff74 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c598  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000374  0002c750  0002c750  0000d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0002cac4  0002e51c  0000dac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0002ff74  0002ff74  0000ff74  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f51c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000f540  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022cd2  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f5e  00000000  00000000  00032f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a157  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a48  00000000  00000000  00046048  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002fe1  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010fd6  00000000  00000000  0004aa71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005ba48  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005ba58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005f77c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005f77f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005f783  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005f784  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005f785  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005f789  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005f78d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005f791  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005f79c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005f7a7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  0005f7b2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000021  00000000  00000000  0005f7bc  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006ae73  00000000  00000000  0005f7dd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0002c750 l    d  .rodata	00000000 .rodata
0002cac4 l    d  .rwdata	00000000 .rwdata
0002ff74 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020528 l     F .text	00000034 __sprint_r
0002c7e2 l     O .rodata	00000010 blanks.3515
0002c7f2 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022570 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00023fe0 l     F .text	00000008 __fp_lock
00023fe8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002cac4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0002c828 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002c970 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000285c4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00029304 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00029a98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00029bb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00029be0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00029ce0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00029dd4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00029ec0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002a09c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002e50c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002a310 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002a450 l     F .text	00000038 alt_dev_reg
0002d480 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002ac34 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002ae38 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002b474 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002b6cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002bb58 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002bcb0 l     F .text	00000050 alt_get_errno
0002bd00 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00026aa0 g     F .text	00000074 _mprec_log10
00026b90 g     F .text	00000084 __any_on
00027810 g     F .text	00000064 _isatty_r
0002c858 g     O .rodata	00000028 __mprec_tinytens
00029fe4 g     F .text	00000078 alt_main
00029a54 g     F .text	00000044 __ashldi3
00020404 g     F .text	00000084 _puts_r
0002ffd0 g     O .bss	00000100 alt_irq
00027874 g     F .text	0000006c _lseek_r
0002a7a0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0002e51c g       *ABS*	00000000 __flash_rwdata_start
00028e64 g     F .text	0000005c __eqdf2
00030260 g       *ABS*	00000000 __alt_heap_start
000203c8 g     F .text	0000003c printf
000273b4 g     F .text	0000005c __sseek
00024084 g     F .text	0000010c __sinit
00024d1c g     F .text	0000009c _setlocale_r
00023ffc g     F .text	00000078 __sfmoreglue
0002a07c g     F .text	00000020 __malloc_unlock
0002595c g     F .text	0000018c memmove
0002a520 g     F .text	00000098 altera_avalon_fifo_init
00024074 g     F .text	00000010 _cleanup
0002a850 g     F .text	00000058 altera_avalon_fifo_write_fifo
00025bc4 g     F .text	000000a8 _Balloc
00028f1c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
0002a9e8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
000277a8 g     F .text	00000068 _fstat_r
0002ff8c g     O .bss	00000004 errno
0002ff94 g     O .bss	00000004 alt_argv
000364e0 g       *ABS*	00000000 _gp
0002a6ec g     F .text	0000005c altera_avalon_fifo_clear_event
0002d300 g     O .rwdata	00000180 alt_fd_list
0002c104 g     F .text	00000090 alt_find_dev
0002581c g     F .text	00000140 memcpy
00023ff0 g     F .text	0000000c _cleanup_r
00029040 g     F .text	000000d4 __floatsidf
0002bc38 g     F .text	00000078 alt_io_redirect
00028fe4 g     F .text	0000005c __ltdf2
0002c750 g       *ABS*	00000000 __DTOR_END__
00020488 g     F .text	00000014 puts
000269fc g     F .text	000000a4 __ratio
0002b038 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0002039c g     F .text	0000002c _printf_r
00029424 g     F .text	00000008 __udivsi3
00029d30 g     F .text	000000a4 isatty
0002c8a8 g     O .rodata	000000c8 __mprec_tens
00024db8 g     F .text	0000000c __locale_charset
0002ff88 g     O .bss	00000004 __malloc_top_pad
0002e4e8 g     O .rwdata	00000004 __mb_cur_max
00024dc4 g     F .text	0000000c _localeconv_r
00025ff4 g     F .text	0000003c __i2b
000246d8 g     F .text	000004e4 __sfvwrite_r
00027274 g     F .text	00000064 _sbrk_r
000202c8 g     F .text	00000094 consumer
000278e0 g     F .text	0000006c _read_r
0002cec4 g     O .rwdata	0000000c __lc_ctype
0002e504 g     O .rwdata	00000004 alt_max_fd
0002983c g     F .text	00000104 __unpack_d
00027658 g     F .text	0000013c _fclose_r
00023fb0 g     F .text	00000030 fflush
0002ff84 g     O .bss	00000004 __malloc_max_sbrked_mem
00028918 g     F .text	00000054 __adddf3
00026770 g     F .text	00000148 __b2d
00027f9c g     F .text	00000628 __umoddi3
00029f10 g     F .text	000000d4 lseek
0002e4e0 g     O .rwdata	00000004 _global_impure_ptr
00026c14 g     F .text	000005fc _realloc_r
00030260 g       *ABS*	00000000 __bss_end
0002ba68 g     F .text	000000f0 alt_iic_isr_register
0002bfe0 g     F .text	00000104 alt_tick
0002794c g     F .text	00000650 __udivdi3
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem_c1
0002c880 g     O .rodata	00000028 __mprec_bigtens
00025dd8 g     F .text	00000104 __s2b
000291e8 g     F .text	0000011c __floatunsidf
00026510 g     F .text	00000058 __mcmp
0002429c g     F .text	00000018 __fp_lock_all
0002ba1c g     F .text	0000004c alt_ic_irq_enabled
0002bf48 g     F .text	00000098 alt_alarm_stop
0002ff9c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
0002d2d8 g     O .rwdata	00000028 alt_dev_null
0002b6b0 g     F .text	0000001c alt_dcache_flush_all
00025edc g     F .text	00000068 __hi0bits
00029114 g     F .text	000000d4 __fixdfsi
0002a748 g     F .text	00000058 altera_avalon_fifo_write_ienable
0002e51c g       *ABS*	00000000 __ram_rwdata_end
0002a65c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0002e4fc g     O .rwdata	00000008 alt_dev_list
0002a360 g     F .text	000000f0 write
0002cac4 g       *ABS*	00000000 __ram_rodata_end
00029c30 g     F .text	000000b0 fstat
00029a10 g     F .text	00000044 __lshrdi3
00026288 g     F .text	0000012c __pow5mult
0002ff7c g     O .bss	00000004 __nlocale_changed
0002942c g     F .text	00000008 __umodsi3
00030260 g       *ABS*	00000000 end
0002ab74 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002a688 g     F .text	0000003c altera_avalon_fifo_read_event
0002c750 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002b4e8 g     F .text	00000088 alt_avalon_timer_sc_init
0002956c g     F .text	000000ac __clzsi2
0002b250 g     F .text	00000224 altera_avalon_jtag_uart_write
0002428c g     F .text	00000004 __sfp_lock_acquire
0002a914 g     F .text	0000004c altera_avalon_fifo_read_fifo
00025724 g     F .text	000000f8 memchr
0002055c g     F .text	00001e7c ___vfprintf_internal_r
00024408 g     F .text	000002d0 _free_r
0002c574 g     F .text	000001a0 __call_exitprocs
0002ff78 g     O .bss	00000004 __mlocale_changed
0002e4ec g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
0002ffa0 g     O .bss	00000004 _alt_tick_rate
000263b4 g     F .text	0000015c __lshift
0002ffa4 g     O .bss	00000004 _alt_nticks
0002a0ec g     F .text	000000f4 read
0002a4bc g     F .text	00000064 alt_sys_init
0002c444 g     F .text	00000130 __register_exitproc
00026030 g     F .text	00000258 __multiply
0002aedc g     F .text	00000068 altera_avalon_jtag_uart_close
00029434 g     F .text	00000028 __mulsi3
0002cac4 g       *ABS*	00000000 __ram_rwdata_start
0002c750 g       *ABS*	00000000 __ram_rodata_start
0002ffa8 g     O .bss	00000028 __malloc_current_mallinfo
000268b8 g     F .text	00000144 __d2b
0002aa10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002c2a8 g     F .text	000000d4 alt_get_fd
00029940 g     F .text	000000d0 __fpcmp_parts_d
000275f4 g     F .text	00000064 _close_r
0002c3c8 g     F .text	0000007c memcmp
0002aad0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00030260 g       *ABS*	00000000 __alt_stack_base
0002ab20 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000223fc g     F .text	00000174 __swsetup_r
0002a5b8 g     F .text	0000003c altera_avalon_fifo_read_status
00028cb0 g     F .text	000001b4 __divdf3
00024190 g     F .text	000000fc __sfp
00026b14 g     F .text	0000007c __copybits
0002ced0 g     O .rwdata	00000408 __malloc_av_
00024298 g     F .text	00000004 __sinit_lock_release
000289cc g     F .text	000002e4 __muldf3
000272d8 g     F .text	00000054 __sread
0002a9bc g     F .text	0000002c altera_avalon_fifo_read_other_info
0002c194 g     F .text	00000114 alt_find_file
0002b71c g     F .text	000000a0 alt_dev_llist_insert
0002a05c g     F .text	00000020 __malloc_lock
0002a260 g     F .text	000000b0 sbrk
00023dc8 g     F .text	000001e8 _fflush_r
00027528 g     F .text	000000cc _calloc_r
0002ff74 g       *ABS*	00000000 __bss_start
00025ae8 g     F .text	000000dc memset
000202b0 g     F .text	00000018 main
0002ff98 g     O .bss	00000004 alt_envp
0002ff80 g     O .bss	00000004 __malloc_max_total_mem
0002aa70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a6c4 g     F .text	00000028 altera_avalon_fifo_read_level
00027410 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00027794 g     F .text	00000014 fclose
000300d0 g     O .bss	00000190 _atexit0
000227ac g     F .text	0000161c _dtoa_r
00024fa0 g     F .text	00000784 _malloc_r
0002e508 g     O .rwdata	00000004 alt_errno
00024bbc g     F .text	000000a8 _fwalk
000201f4 g     F .text	00000060 WRITE_FIFO_1
00029378 g     F .text	00000050 __divsi3
0002c97c g     O .rodata	00000014 __thenan_df
000242cc g     F .text	0000013c _malloc_trim_r
0002c750 g       *ABS*	00000000 __CTOR_END__
00027418 g     F .text	000000a4 strcmp
0002c750 g       *ABS*	00000000 __flash_rodata_start
0002c750 g       *ABS*	00000000 __DTOR_LIST__
0002035c g     F .text	00000040 delay
00028ec0 g     F .text	0000005c __nedf2
0002a488 g     F .text	00000034 alt_irq_init
0002a1e0 g     F .text	00000080 alt_release_fd
0002c990 g     O .rodata	00000100 __clz_tab
0002ff74 g     O .bss	00000004 _PathLocale
0002c37c g     F .text	00000014 atexit
000274bc g     F .text	0000006c _write_r
00024dd0 g     F .text	0000001c setlocale
0002e4e4 g     O .rwdata	00000004 _impure_ptr
0002ff90 g     O .bss	00000004 alt_argc
0002b818 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00026710 g     F .text	00000060 __ulp
00027210 g     F .text	00000038 __isinfd
000242b4 g     F .text	00000018 __fp_unlock_all
0002e4f4 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024dec g     F .text	0000000c localeconv
0002a960 g     F .text	0000005c altera_avalon_fifo_write_other_info
0002b890 g     F .text	00000050 alt_ic_isr_register
0002e51c g       *ABS*	00000000 _edata
00030260 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002af44 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002b97c g     F .text	000000a0 alt_ic_irq_disable
0002732c g     F .text	00000088 __swrite
0002e4f0 g     O .rwdata	00000004 __malloc_trim_threshold
0002c0e4 g     F .text	00000020 altera_nios2_qsys_irq_init
0002c390 g     F .text	00000038 exit
00024c64 g     F .text	000000b8 _fwalk_reent
00026568 g     F .text	000001a8 __mdiff
000293c8 g     F .text	0000005c __modsi3
0002a5f4 g     F .text	0000003c altera_avalon_fifo_read_ienable
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024290 g     F .text	00000004 __sfp_lock_release
0002c714 g     F .text	0000003c _exit
00027248 g     F .text	0000002c __isnand
0002b570 g     F .text	00000140 alt_alarm_start
0002945c g     F .text	00000110 __muldi3
0002a630 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00024df8 g     F .text	000001a8 __smakebuf_r
0002049c g     F .text	0000008c strlen
0002bdf0 g     F .text	00000158 open
0002a8a8 g     F .text	0000006c altera_avalon_read_fifo
00028f80 g     F .text	00000064 __gedf2
00020254 g     F .text	0000005c READ_FIFO_1
0002b874 g     F .text	0000001c alt_icache_flush_all
0002e510 g     O .rwdata	00000004 alt_priority_mask
0002b8e0 g     F .text	0000009c alt_ic_irq_enable
000223d8 g     F .text	00000024 __vfprintf_internal
0002896c g     F .text	00000060 __subdf3
00025f44 g     F .text	000000b0 __lo0bits
0002a7f8 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0002e514 g     O .rwdata	00000008 alt_alarm_list
0002b7bc g     F .text	0000005c _do_ctors
00029ae8 g     F .text	000000cc close
00029e40 g     F .text	00000080 alt_load
00029618 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00024294 g     F .text	00000004 __sinit_lock_acquire
00025c94 g     F .text	00000144 __multadd
00025c6c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18fff404 	addi	r3,r3,-48
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	213ff404 	addi	r4,r4,-48
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   201c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c4:	d6993814 	ori	gp,gp,25824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201cc:	10bfdd14 	ori	r2,r2,65396

    movhi r3, %hi(__bss_end)
   201d0:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201d4:	18c09814 	ori	r3,r3,608

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	0029e400 	call	29e40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	0029fe40 	call	29fe4 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO_1>:
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   201f4:	defffd04 	addi	sp,sp,-12
   201f8:	dfc00215 	stw	ra,8(sp)
   201fc:	df000115 	stw	fp,4(sp)
   20200:	df000104 	addi	fp,sp,4
   20204:	e13fff15 	stw	r4,-4(fp)

	// Wait if the fifo is full
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<0) != 0)
   20208:	0001883a 	nop
   2020c:	01000134 	movhi	r4,4
   20210:	21040004 	addi	r4,r4,4096
   20214:	01400044 	movi	r5,1
   20218:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2021c:	103ffb1e 	bne	r2,zero,2020c <WRITE_FIFO_1+0x18>
	{}

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(MEM_BASE,CTRL_BASE,(int)*buffer);
   20220:	e0bfff17 	ldw	r2,-4(fp)
   20224:	10800017 	ldw	r2,0(r2)
   20228:	01000134 	movhi	r4,4
   2022c:	21041404 	addi	r4,r4,4176
   20230:	01400134 	movhi	r5,4
   20234:	29440004 	addi	r5,r5,4096
   20238:	100d883a 	mov	r6,r2
   2023c:	002a8500 	call	2a850 <altera_avalon_fifo_write_fifo>
}
   20240:	e037883a 	mov	sp,fp
   20244:	dfc00117 	ldw	ra,4(sp)
   20248:	df000017 	ldw	fp,0(sp)
   2024c:	dec00204 	addi	sp,sp,8
   20250:	f800283a 	ret

00020254 <READ_FIFO_1>:

void READ_FIFO_1(int *buffer)
{
   20254:	defffd04 	addi	sp,sp,-12
   20258:	dfc00215 	stw	ra,8(sp)
   2025c:	df000115 	stw	fp,4(sp)
   20260:	df000104 	addi	fp,sp,4
   20264:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<1) != 0)
   20268:	0001883a 	nop
   2026c:	01000134 	movhi	r4,4
   20270:	21040004 	addi	r4,r4,4096
   20274:	01400084 	movi	r5,2
   20278:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2027c:	103ffb1e 	bne	r2,zero,2026c <READ_FIFO_1+0x18>
	{}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(MEM_BASE,CTRL_BASE);
   20280:	01000134 	movhi	r4,4
   20284:	21041404 	addi	r4,r4,4176
   20288:	01400134 	movhi	r5,4
   2028c:	29440004 	addi	r5,r5,4096
   20290:	002a9140 	call	2a914 <altera_avalon_fifo_read_fifo>
   20294:	e0ffff17 	ldw	r3,-4(fp)
   20298:	18800015 	stw	r2,0(r3)

}
   2029c:	e037883a 	mov	sp,fp
   202a0:	dfc00117 	ldw	ra,4(sp)
   202a4:	df000017 	ldw	fp,0(sp)
   202a8:	dec00204 	addi	sp,sp,8
   202ac:	f800283a 	ret

000202b0 <main>:
void delay(int n);
int consumer();


int main()
{
   202b0:	defffe04 	addi	sp,sp,-8
   202b4:	dfc00115 	stw	ra,4(sp)
   202b8:	df000015 	stw	fp,0(sp)
   202bc:	d839883a 	mov	fp,sp
	consumer();
   202c0:	00202c80 	call	202c8 <consumer>
	
	while(1) { }
   202c4:	003fff06 	br	202c4 <main+0x14>

000202c8 <consumer>:
	return 0;
}


int consumer()
{
   202c8:	defffc04 	addi	sp,sp,-16
   202cc:	dfc00315 	stw	ra,12(sp)
   202d0:	df000215 	stw	fp,8(sp)
   202d4:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   202d8:	010000f4 	movhi	r4,3
   202dc:	2131d404 	addi	r4,r4,-14512
   202e0:	00204880 	call	20488 <puts>

//	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
   202e4:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   202e8:	00800144 	movi	r2,5
   202ec:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   202f0:	00000e06 	br	2032c <consumer+0x64>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   202f4:	e0bfff04 	addi	r2,fp,-4
   202f8:	1009883a 	mov	r4,r2
   202fc:	00202540 	call	20254 <READ_FIFO_1>
		if(j==k)
   20300:	e0ffff17 	ldw	r3,-4(fp)
   20304:	e0bffe17 	ldw	r2,-8(fp)
   20308:	1880051e 	bne	r3,r2,20320 <consumer+0x58>
			printf("Consumer succefully received [%i]\n",j);
   2030c:	e0bfff17 	ldw	r2,-4(fp)
   20310:	010000f4 	movhi	r4,3
   20314:	2131d904 	addi	r4,r4,-14492
   20318:	100b883a 	mov	r5,r2
   2031c:	00203c80 	call	203c8 <printf>

		k+=10;
   20320:	e0bffe17 	ldw	r2,-8(fp)
   20324:	10800284 	addi	r2,r2,10
   20328:	e0bffe15 	stw	r2,-8(fp)

//	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   2032c:	e0bffe17 	ldw	r2,-8(fp)
   20330:	10807d10 	cmplti	r2,r2,500
   20334:	103fef1e 	bne	r2,zero,202f4 <consumer+0x2c>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   20338:	010000f4 	movhi	r4,3
   2033c:	2131e204 	addi	r4,r4,-14456
   20340:	00204880 	call	20488 <puts>
	return 0;
   20344:	0005883a 	mov	r2,zero
}
   20348:	e037883a 	mov	sp,fp
   2034c:	dfc00117 	ldw	ra,4(sp)
   20350:	df000017 	ldw	fp,0(sp)
   20354:	dec00204 	addi	sp,sp,8
   20358:	f800283a 	ret

0002035c <delay>:


void delay(int n)
{
   2035c:	defffd04 	addi	sp,sp,-12
   20360:	df000215 	stw	fp,8(sp)
   20364:	df000204 	addi	fp,sp,8
   20368:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   2036c:	e0bfff17 	ldw	r2,-4(fp)
   20370:	e0bffe15 	stw	r2,-8(fp)
   20374:	00000306 	br	20384 <delay+0x28>
   20378:	e0bffe17 	ldw	r2,-8(fp)
   2037c:	10bfffc4 	addi	r2,r2,-1
   20380:	e0bffe15 	stw	r2,-8(fp)
   20384:	e0bffe17 	ldw	r2,-8(fp)
   20388:	00bffb16 	blt	zero,r2,20378 <delay+0x1c>
	{
		continue;
	}
}
   2038c:	e037883a 	mov	sp,fp
   20390:	df000017 	ldw	fp,0(sp)
   20394:	dec00104 	addi	sp,sp,4
   20398:	f800283a 	ret

0002039c <_printf_r>:
   2039c:	defffd04 	addi	sp,sp,-12
   203a0:	dfc00015 	stw	ra,0(sp)
   203a4:	d9800115 	stw	r6,4(sp)
   203a8:	d9c00215 	stw	r7,8(sp)
   203ac:	280d883a 	mov	r6,r5
   203b0:	21400217 	ldw	r5,8(r4)
   203b4:	d9c00104 	addi	r7,sp,4
   203b8:	002055c0 	call	2055c <___vfprintf_internal_r>
   203bc:	dfc00017 	ldw	ra,0(sp)
   203c0:	dec00304 	addi	sp,sp,12
   203c4:	f800283a 	ret

000203c8 <printf>:
   203c8:	defffc04 	addi	sp,sp,-16
   203cc:	dfc00015 	stw	ra,0(sp)
   203d0:	d9400115 	stw	r5,4(sp)
   203d4:	d9800215 	stw	r6,8(sp)
   203d8:	d9c00315 	stw	r7,12(sp)
   203dc:	008000f4 	movhi	r2,3
   203e0:	10b93904 	addi	r2,r2,-6940
   203e4:	10800017 	ldw	r2,0(r2)
   203e8:	200b883a 	mov	r5,r4
   203ec:	d9800104 	addi	r6,sp,4
   203f0:	11000217 	ldw	r4,8(r2)
   203f4:	00223d80 	call	223d8 <__vfprintf_internal>
   203f8:	dfc00017 	ldw	ra,0(sp)
   203fc:	dec00404 	addi	sp,sp,16
   20400:	f800283a 	ret

00020404 <_puts_r>:
   20404:	defff604 	addi	sp,sp,-40
   20408:	dc400815 	stw	r17,32(sp)
   2040c:	2023883a 	mov	r17,r4
   20410:	2809883a 	mov	r4,r5
   20414:	dc000715 	stw	r16,28(sp)
   20418:	dfc00915 	stw	ra,36(sp)
   2041c:	2821883a 	mov	r16,r5
   20420:	002049c0 	call	2049c <strlen>
   20424:	10c00044 	addi	r3,r2,1
   20428:	d8800115 	stw	r2,4(sp)
   2042c:	89400217 	ldw	r5,8(r17)
   20430:	008000f4 	movhi	r2,3
   20434:	10b1e704 	addi	r2,r2,-14436
   20438:	d8800215 	stw	r2,8(sp)
   2043c:	00800044 	movi	r2,1
   20440:	d8800315 	stw	r2,12(sp)
   20444:	8809883a 	mov	r4,r17
   20448:	00800084 	movi	r2,2
   2044c:	d9800404 	addi	r6,sp,16
   20450:	dc000015 	stw	r16,0(sp)
   20454:	d8c00615 	stw	r3,24(sp)
   20458:	dec00415 	stw	sp,16(sp)
   2045c:	d8800515 	stw	r2,20(sp)
   20460:	00246d80 	call	246d8 <__sfvwrite_r>
   20464:	1000061e 	bne	r2,zero,20480 <_puts_r+0x7c>
   20468:	00800284 	movi	r2,10
   2046c:	dfc00917 	ldw	ra,36(sp)
   20470:	dc400817 	ldw	r17,32(sp)
   20474:	dc000717 	ldw	r16,28(sp)
   20478:	dec00a04 	addi	sp,sp,40
   2047c:	f800283a 	ret
   20480:	00bfffc4 	movi	r2,-1
   20484:	003ff906 	br	2046c <_puts_r+0x68>

00020488 <puts>:
   20488:	008000f4 	movhi	r2,3
   2048c:	10b93904 	addi	r2,r2,-6940
   20490:	200b883a 	mov	r5,r4
   20494:	11000017 	ldw	r4,0(r2)
   20498:	00204041 	jmpi	20404 <_puts_r>

0002049c <strlen>:
   2049c:	208000cc 	andi	r2,r4,3
   204a0:	10001f1e 	bne	r2,zero,20520 <strlen+0x84>
   204a4:	20800017 	ldw	r2,0(r4)
   204a8:	01ffbff4 	movhi	r7,65279
   204ac:	39ffbfc4 	addi	r7,r7,-257
   204b0:	01a02074 	movhi	r6,32897
   204b4:	31a02004 	addi	r6,r6,-32640
   204b8:	11c7883a 	add	r3,r2,r7
   204bc:	0084303a 	nor	r2,zero,r2
   204c0:	1886703a 	and	r3,r3,r2
   204c4:	1986703a 	and	r3,r3,r6
   204c8:	2005883a 	mov	r2,r4
   204cc:	1800101e 	bne	r3,zero,20510 <strlen+0x74>
   204d0:	10800104 	addi	r2,r2,4
   204d4:	10c00017 	ldw	r3,0(r2)
   204d8:	19cb883a 	add	r5,r3,r7
   204dc:	00c6303a 	nor	r3,zero,r3
   204e0:	28c6703a 	and	r3,r5,r3
   204e4:	1986703a 	and	r3,r3,r6
   204e8:	1800091e 	bne	r3,zero,20510 <strlen+0x74>
   204ec:	10800104 	addi	r2,r2,4
   204f0:	10c00017 	ldw	r3,0(r2)
   204f4:	19cb883a 	add	r5,r3,r7
   204f8:	00c6303a 	nor	r3,zero,r3
   204fc:	28c6703a 	and	r3,r5,r3
   20500:	1986703a 	and	r3,r3,r6
   20504:	183ff226 	beq	r3,zero,204d0 <strlen+0x34>
   20508:	00000106 	br	20510 <strlen+0x74>
   2050c:	10800044 	addi	r2,r2,1
   20510:	10c00007 	ldb	r3,0(r2)
   20514:	183ffd1e 	bne	r3,zero,2050c <strlen+0x70>
   20518:	1105c83a 	sub	r2,r2,r4
   2051c:	f800283a 	ret
   20520:	2005883a 	mov	r2,r4
   20524:	003ffa06 	br	20510 <strlen+0x74>

00020528 <__sprint_r>:
   20528:	30800217 	ldw	r2,8(r6)
   2052c:	defffe04 	addi	sp,sp,-8
   20530:	dc000015 	stw	r16,0(sp)
   20534:	dfc00115 	stw	ra,4(sp)
   20538:	3021883a 	mov	r16,r6
   2053c:	10000226 	beq	r2,zero,20548 <__sprint_r+0x20>
   20540:	00246d80 	call	246d8 <__sfvwrite_r>
   20544:	80000215 	stw	zero,8(r16)
   20548:	80000115 	stw	zero,4(r16)
   2054c:	dfc00117 	ldw	ra,4(sp)
   20550:	dc000017 	ldw	r16,0(sp)
   20554:	dec00204 	addi	sp,sp,8
   20558:	f800283a 	ret

0002055c <___vfprintf_internal_r>:
   2055c:	defeb904 	addi	sp,sp,-1308
   20560:	dc013d15 	stw	r16,1268(sp)
   20564:	d9013015 	stw	r4,1216(sp)
   20568:	dfc14615 	stw	ra,1304(sp)
   2056c:	df014515 	stw	fp,1300(sp)
   20570:	ddc14415 	stw	r23,1296(sp)
   20574:	dd814315 	stw	r22,1292(sp)
   20578:	dd414215 	stw	r21,1288(sp)
   2057c:	dd014115 	stw	r20,1284(sp)
   20580:	dcc14015 	stw	r19,1280(sp)
   20584:	dc813f15 	stw	r18,1276(sp)
   20588:	dc413e15 	stw	r17,1272(sp)
   2058c:	d9412915 	stw	r5,1188(sp)
   20590:	3021883a 	mov	r16,r6
   20594:	d9c12d15 	stw	r7,1204(sp)
   20598:	0024dc40 	call	24dc4 <_localeconv_r>
   2059c:	10800017 	ldw	r2,0(r2)
   205a0:	d9013017 	ldw	r4,1216(sp)
   205a4:	d8013315 	stw	zero,1228(sp)
   205a8:	d8813715 	stw	r2,1244(sp)
   205ac:	d8013415 	stw	zero,1232(sp)
   205b0:	20000226 	beq	r4,zero,205bc <___vfprintf_internal_r+0x60>
   205b4:	20800e17 	ldw	r2,56(r4)
   205b8:	10014b26 	beq	r2,zero,20ae8 <___vfprintf_internal_r+0x58c>
   205bc:	d8c12917 	ldw	r3,1188(sp)
   205c0:	1880030b 	ldhu	r2,12(r3)
   205c4:	10c0020c 	andi	r3,r2,8
   205c8:	18ffffcc 	andi	r3,r3,65535
   205cc:	18e0001c 	xori	r3,r3,32768
   205d0:	18e00004 	addi	r3,r3,-32768
   205d4:	1800ed26 	beq	r3,zero,2098c <___vfprintf_internal_r+0x430>
   205d8:	d9012917 	ldw	r4,1188(sp)
   205dc:	20c00417 	ldw	r3,16(r4)
   205e0:	1800ea26 	beq	r3,zero,2098c <___vfprintf_internal_r+0x430>
   205e4:	1100068c 	andi	r4,r2,26
   205e8:	00c00284 	movi	r3,10
   205ec:	20c0f026 	beq	r4,r3,209b0 <___vfprintf_internal_r+0x454>
   205f0:	d9010dc4 	addi	r4,sp,1079
   205f4:	d8810e04 	addi	r2,sp,1080
   205f8:	dc413017 	ldw	r17,1216(sp)
   205fc:	d8c00404 	addi	r3,sp,16
   20600:	d9012615 	stw	r4,1176(sp)
   20604:	1109c83a 	sub	r4,r2,r4
   20608:	d8812715 	stw	r2,1180(sp)
   2060c:	d8c11b15 	stw	r3,1132(sp)
   20610:	d8011d15 	stw	zero,1140(sp)
   20614:	d8011c15 	stw	zero,1136(sp)
   20618:	802b883a 	mov	r21,r16
   2061c:	d8013215 	stw	zero,1224(sp)
   20620:	d8013615 	stw	zero,1240(sp)
   20624:	d8013515 	stw	zero,1236(sp)
   20628:	d8012c15 	stw	zero,1200(sp)
   2062c:	1813883a 	mov	r9,r3
   20630:	d9013915 	stw	r4,1252(sp)
   20634:	a8800007 	ldb	r2,0(r21)
   20638:	1002f326 	beq	r2,zero,21208 <___vfprintf_internal_r+0xcac>
   2063c:	00c00944 	movi	r3,37
   20640:	a825883a 	mov	r18,r21
   20644:	10c0021e 	bne	r2,r3,20650 <___vfprintf_internal_r+0xf4>
   20648:	00001406 	br	2069c <___vfprintf_internal_r+0x140>
   2064c:	10c00326 	beq	r2,r3,2065c <___vfprintf_internal_r+0x100>
   20650:	94800044 	addi	r18,r18,1
   20654:	90800007 	ldb	r2,0(r18)
   20658:	103ffc1e 	bne	r2,zero,2064c <___vfprintf_internal_r+0xf0>
   2065c:	9561c83a 	sub	r16,r18,r21
   20660:	80000e26 	beq	r16,zero,2069c <___vfprintf_internal_r+0x140>
   20664:	da011d17 	ldw	r8,1140(sp)
   20668:	d8c11c17 	ldw	r3,1136(sp)
   2066c:	4d400015 	stw	r21,0(r9)
   20670:	4c000115 	stw	r16,4(r9)
   20674:	4411883a 	add	r8,r8,r16
   20678:	18c00044 	addi	r3,r3,1
   2067c:	da011d15 	stw	r8,1140(sp)
   20680:	d8c11c15 	stw	r3,1136(sp)
   20684:	008001c4 	movi	r2,7
   20688:	10c11016 	blt	r2,r3,20acc <___vfprintf_internal_r+0x570>
   2068c:	4a400204 	addi	r9,r9,8
   20690:	d8812c17 	ldw	r2,1200(sp)
   20694:	1405883a 	add	r2,r2,r16
   20698:	d8812c15 	stw	r2,1200(sp)
   2069c:	90800007 	ldb	r2,0(r18)
   206a0:	1000ee26 	beq	r2,zero,20a5c <___vfprintf_internal_r+0x500>
   206a4:	95400044 	addi	r21,r18,1
   206a8:	94800047 	ldb	r18,1(r18)
   206ac:	073fffc4 	movi	fp,-1
   206b0:	e007883a 	mov	r3,fp
   206b4:	d8012585 	stb	zero,1174(sp)
   206b8:	d8012e15 	stw	zero,1208(sp)
   206bc:	0021883a 	mov	r16,zero
   206c0:	05001604 	movi	r20,88
   206c4:	04c00244 	movi	r19,9
   206c8:	4839883a 	mov	fp,r9
   206cc:	ad400044 	addi	r21,r21,1
   206d0:	90bff804 	addi	r2,r18,-32
   206d4:	a080462e 	bgeu	r20,r2,207f0 <___vfprintf_internal_r+0x294>
   206d8:	e013883a 	mov	r9,fp
   206dc:	9000df26 	beq	r18,zero,20a5c <___vfprintf_internal_r+0x500>
   206e0:	00c00044 	movi	r3,1
   206e4:	d8c12815 	stw	r3,1184(sp)
   206e8:	dc810405 	stb	r18,1040(sp)
   206ec:	d8012585 	stb	zero,1174(sp)
   206f0:	d8c12b15 	stw	r3,1196(sp)
   206f4:	dcc10404 	addi	r19,sp,1040
   206f8:	d8013115 	stw	zero,1220(sp)
   206fc:	80c0008c 	andi	r3,r16,2
   20700:	d8c12a15 	stw	r3,1192(sp)
   20704:	18000326 	beq	r3,zero,20714 <___vfprintf_internal_r+0x1b8>
   20708:	d8c12817 	ldw	r3,1184(sp)
   2070c:	18c00084 	addi	r3,r3,2
   20710:	d8c12815 	stw	r3,1184(sp)
   20714:	80c0210c 	andi	r3,r16,132
   20718:	d8c12f15 	stw	r3,1212(sp)
   2071c:	1802251e 	bne	r3,zero,20fb4 <___vfprintf_internal_r+0xa58>
   20720:	d9012e17 	ldw	r4,1208(sp)
   20724:	d8c12817 	ldw	r3,1184(sp)
   20728:	20edc83a 	sub	r22,r4,r3
   2072c:	0582210e 	bge	zero,r22,20fb4 <___vfprintf_internal_r+0xa58>
   20730:	02800404 	movi	r10,16
   20734:	da011d17 	ldw	r8,1140(sp)
   20738:	d8c11c17 	ldw	r3,1136(sp)
   2073c:	05c000f4 	movhi	r23,3
   20740:	bdf1f884 	addi	r23,r23,-14366
   20744:	5580200e 	bge	r10,r22,207c8 <___vfprintf_internal_r+0x26c>
   20748:	dc813815 	stw	r18,1248(sp)
   2074c:	5039883a 	mov	fp,r10
   20750:	b825883a 	mov	r18,r23
   20754:	050001c4 	movi	r20,7
   20758:	b02f883a 	mov	r23,r22
   2075c:	802d883a 	mov	r22,r16
   20760:	dc012917 	ldw	r16,1188(sp)
   20764:	00000306 	br	20774 <___vfprintf_internal_r+0x218>
   20768:	bdfffc04 	addi	r23,r23,-16
   2076c:	4a400204 	addi	r9,r9,8
   20770:	e5c0110e 	bge	fp,r23,207b8 <___vfprintf_internal_r+0x25c>
   20774:	4c800015 	stw	r18,0(r9)
   20778:	4f000115 	stw	fp,4(r9)
   2077c:	42000404 	addi	r8,r8,16
   20780:	18c00044 	addi	r3,r3,1
   20784:	da011d15 	stw	r8,1140(sp)
   20788:	d8c11c15 	stw	r3,1136(sp)
   2078c:	a0fff60e 	bge	r20,r3,20768 <___vfprintf_internal_r+0x20c>
   20790:	8809883a 	mov	r4,r17
   20794:	800b883a 	mov	r5,r16
   20798:	d9811b04 	addi	r6,sp,1132
   2079c:	00205280 	call	20528 <__sprint_r>
   207a0:	1000b41e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   207a4:	bdfffc04 	addi	r23,r23,-16
   207a8:	da011d17 	ldw	r8,1140(sp)
   207ac:	d8c11c17 	ldw	r3,1136(sp)
   207b0:	da400404 	addi	r9,sp,16
   207b4:	e5ffef16 	blt	fp,r23,20774 <___vfprintf_internal_r+0x218>
   207b8:	b021883a 	mov	r16,r22
   207bc:	b82d883a 	mov	r22,r23
   207c0:	902f883a 	mov	r23,r18
   207c4:	dc813817 	ldw	r18,1248(sp)
   207c8:	4dc00015 	stw	r23,0(r9)
   207cc:	4d800115 	stw	r22,4(r9)
   207d0:	4591883a 	add	r8,r8,r22
   207d4:	18c00044 	addi	r3,r3,1
   207d8:	da011d15 	stw	r8,1140(sp)
   207dc:	d8c11c15 	stw	r3,1136(sp)
   207e0:	008001c4 	movi	r2,7
   207e4:	10c3fe16 	blt	r2,r3,217e0 <___vfprintf_internal_r+0x1284>
   207e8:	4a400204 	addi	r9,r9,8
   207ec:	0001f306 	br	20fbc <___vfprintf_internal_r+0xa60>
   207f0:	1085883a 	add	r2,r2,r2
   207f4:	1085883a 	add	r2,r2,r2
   207f8:	010000b4 	movhi	r4,2
   207fc:	21020304 	addi	r4,r4,2060
   20800:	1105883a 	add	r2,r2,r4
   20804:	10800017 	ldw	r2,0(r2)
   20808:	1000683a 	jmp	r2
   2080c:	00020ee8 	cmpgeui	zero,zero,2107
   20810:	000206d8 	cmpnei	zero,zero,2075
   20814:	000206d8 	cmpnei	zero,zero,2075
   20818:	00020f00 	call	20f0 <__alt_mem_onchip_mem_c1-0x1df10>
   2081c:	000206d8 	cmpnei	zero,zero,2075
   20820:	000206d8 	cmpnei	zero,zero,2075
   20824:	000206d8 	cmpnei	zero,zero,2075
   20828:	000206d8 	cmpnei	zero,zero,2075
   2082c:	000206d8 	cmpnei	zero,zero,2075
   20830:	000206d8 	cmpnei	zero,zero,2075
   20834:	00020db8 	rdprs	zero,zero,2102
   20838:	00020f4c 	andi	zero,zero,2109
   2083c:	000206d8 	cmpnei	zero,zero,2075
   20840:	00020980 	call	2098 <__alt_mem_onchip_mem_c1-0x1df68>
   20844:	00020d20 	cmpeqi	zero,zero,2100
   20848:	000206d8 	cmpnei	zero,zero,2075
   2084c:	00020f0c 	andi	zero,zero,2108
   20850:	00020f18 	cmpnei	zero,zero,2108
   20854:	00020f18 	cmpnei	zero,zero,2108
   20858:	00020f18 	cmpnei	zero,zero,2108
   2085c:	00020f18 	cmpnei	zero,zero,2108
   20860:	00020f18 	cmpnei	zero,zero,2108
   20864:	00020f18 	cmpnei	zero,zero,2108
   20868:	00020f18 	cmpnei	zero,zero,2108
   2086c:	00020f18 	cmpnei	zero,zero,2108
   20870:	00020f18 	cmpnei	zero,zero,2108
   20874:	000206d8 	cmpnei	zero,zero,2075
   20878:	000206d8 	cmpnei	zero,zero,2075
   2087c:	000206d8 	cmpnei	zero,zero,2075
   20880:	000206d8 	cmpnei	zero,zero,2075
   20884:	000206d8 	cmpnei	zero,zero,2075
   20888:	000206d8 	cmpnei	zero,zero,2075
   2088c:	000206d8 	cmpnei	zero,zero,2075
   20890:	000206d8 	cmpnei	zero,zero,2075
   20894:	000206d8 	cmpnei	zero,zero,2075
   20898:	000206d8 	cmpnei	zero,zero,2075
   2089c:	00020af0 	cmpltui	zero,zero,2091
   208a0:	00020bb0 	cmpltui	zero,zero,2094
   208a4:	000206d8 	cmpnei	zero,zero,2075
   208a8:	00020bb0 	cmpltui	zero,zero,2094
   208ac:	000206d8 	cmpnei	zero,zero,2075
   208b0:	000206d8 	cmpnei	zero,zero,2075
   208b4:	000206d8 	cmpnei	zero,zero,2075
   208b8:	000206d8 	cmpnei	zero,zero,2075
   208bc:	00020c44 	movi	zero,2097
   208c0:	000206d8 	cmpnei	zero,zero,2075
   208c4:	000206d8 	cmpnei	zero,zero,2075
   208c8:	00020c50 	cmplti	zero,zero,2097
   208cc:	000206d8 	cmpnei	zero,zero,2075
   208d0:	000206d8 	cmpnei	zero,zero,2075
   208d4:	000206d8 	cmpnei	zero,zero,2075
   208d8:	000206d8 	cmpnei	zero,zero,2075
   208dc:	000206d8 	cmpnei	zero,zero,2075
   208e0:	00020c88 	cmpgei	zero,zero,2098
   208e4:	000206d8 	cmpnei	zero,zero,2075
   208e8:	000206d8 	cmpnei	zero,zero,2075
   208ec:	00020cc4 	movi	zero,2099
   208f0:	000206d8 	cmpnei	zero,zero,2075
   208f4:	000206d8 	cmpnei	zero,zero,2075
   208f8:	000206d8 	cmpnei	zero,zero,2075
   208fc:	000206d8 	cmpnei	zero,zero,2075
   20900:	000206d8 	cmpnei	zero,zero,2075
   20904:	000206d8 	cmpnei	zero,zero,2075
   20908:	000206d8 	cmpnei	zero,zero,2075
   2090c:	000206d8 	cmpnei	zero,zero,2075
   20910:	000206d8 	cmpnei	zero,zero,2075
   20914:	000206d8 	cmpnei	zero,zero,2075
   20918:	00020f5c 	xori	zero,zero,2109
   2091c:	00020f90 	cmplti	zero,zero,2110
   20920:	00020bb0 	cmpltui	zero,zero,2094
   20924:	00020bb0 	cmpltui	zero,zero,2094
   20928:	00020bb0 	cmpltui	zero,zero,2094
   2092c:	00020edc 	xori	zero,zero,2107
   20930:	00020f90 	cmplti	zero,zero,2110
   20934:	000206d8 	cmpnei	zero,zero,2075
   20938:	000206d8 	cmpnei	zero,zero,2075
   2093c:	00020d68 	cmpgeui	zero,zero,2101
   20940:	000206d8 	cmpnei	zero,zero,2075
   20944:	00020d80 	call	20d8 <__alt_mem_onchip_mem_c1-0x1df28>
   20948:	00020f9c 	xori	zero,zero,2110
   2094c:	00020de0 	cmpeqi	zero,zero,2103
   20950:	00020e30 	cmpltui	zero,zero,2104
   20954:	000206d8 	cmpnei	zero,zero,2075
   20958:	00020e3c 	xorhi	zero,zero,2104
   2095c:	000206d8 	cmpnei	zero,zero,2075
   20960:	00020fa8 	cmpgeui	zero,zero,2110
   20964:	000206d8 	cmpnei	zero,zero,2075
   20968:	000206d8 	cmpnei	zero,zero,2075
   2096c:	00020ea0 	cmpeqi	zero,zero,2106
   20970:	d9012e17 	ldw	r4,1208(sp)
   20974:	d8812d15 	stw	r2,1204(sp)
   20978:	0109c83a 	sub	r4,zero,r4
   2097c:	d9012e15 	stw	r4,1208(sp)
   20980:	84000114 	ori	r16,r16,4
   20984:	ac800007 	ldb	r18,0(r21)
   20988:	003f5006 	br	206cc <___vfprintf_internal_r+0x170>
   2098c:	d9013017 	ldw	r4,1216(sp)
   20990:	d9412917 	ldw	r5,1188(sp)
   20994:	00223fc0 	call	223fc <__swsetup_r>
   20998:	10003d1e 	bne	r2,zero,20a90 <___vfprintf_internal_r+0x534>
   2099c:	d8c12917 	ldw	r3,1188(sp)
   209a0:	1880030b 	ldhu	r2,12(r3)
   209a4:	00c00284 	movi	r3,10
   209a8:	1100068c 	andi	r4,r2,26
   209ac:	20ff101e 	bne	r4,r3,205f0 <___vfprintf_internal_r+0x94>
   209b0:	d9012917 	ldw	r4,1188(sp)
   209b4:	20c0038b 	ldhu	r3,14(r4)
   209b8:	193fffcc 	andi	r4,r3,65535
   209bc:	2120001c 	xori	r4,r4,32768
   209c0:	21200004 	addi	r4,r4,-32768
   209c4:	203f0a16 	blt	r4,zero,205f0 <___vfprintf_internal_r+0x94>
   209c8:	d9012917 	ldw	r4,1188(sp)
   209cc:	d9c12d17 	ldw	r7,1204(sp)
   209d0:	10bfff4c 	andi	r2,r2,65533
   209d4:	22800717 	ldw	r10,28(r4)
   209d8:	22400917 	ldw	r9,36(r4)
   209dc:	d9013017 	ldw	r4,1216(sp)
   209e0:	02010004 	movi	r8,1024
   209e4:	d881070d 	sth	r2,1052(sp)
   209e8:	d9410404 	addi	r5,sp,1040
   209ec:	d8800404 	addi	r2,sp,16
   209f0:	800d883a 	mov	r6,r16
   209f4:	d8c1078d 	sth	r3,1054(sp)
   209f8:	da810b15 	stw	r10,1068(sp)
   209fc:	da410d15 	stw	r9,1076(sp)
   20a00:	d8810415 	stw	r2,1040(sp)
   20a04:	d8810815 	stw	r2,1056(sp)
   20a08:	da010615 	stw	r8,1048(sp)
   20a0c:	da010915 	stw	r8,1060(sp)
   20a10:	d8010a15 	stw	zero,1064(sp)
   20a14:	002055c0 	call	2055c <___vfprintf_internal_r>
   20a18:	d8812c15 	stw	r2,1200(sp)
   20a1c:	10000416 	blt	r2,zero,20a30 <___vfprintf_internal_r+0x4d4>
   20a20:	d9013017 	ldw	r4,1216(sp)
   20a24:	d9410404 	addi	r5,sp,1040
   20a28:	0023dc80 	call	23dc8 <_fflush_r>
   20a2c:	1006501e 	bne	r2,zero,22370 <___vfprintf_internal_r+0x1e14>
   20a30:	d881070b 	ldhu	r2,1052(sp)
   20a34:	1080100c 	andi	r2,r2,64
   20a38:	10bfffcc 	andi	r2,r2,65535
   20a3c:	10a0001c 	xori	r2,r2,32768
   20a40:	10a00004 	addi	r2,r2,-32768
   20a44:	10001426 	beq	r2,zero,20a98 <___vfprintf_internal_r+0x53c>
   20a48:	d8c12917 	ldw	r3,1188(sp)
   20a4c:	1880030b 	ldhu	r2,12(r3)
   20a50:	10801014 	ori	r2,r2,64
   20a54:	1880030d 	sth	r2,12(r3)
   20a58:	00000f06 	br	20a98 <___vfprintf_internal_r+0x53c>
   20a5c:	d8811d17 	ldw	r2,1140(sp)
   20a60:	10000426 	beq	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   20a64:	d9013017 	ldw	r4,1216(sp)
   20a68:	d9412917 	ldw	r5,1188(sp)
   20a6c:	d9811b04 	addi	r6,sp,1132
   20a70:	00205280 	call	20528 <__sprint_r>
   20a74:	d8c12917 	ldw	r3,1188(sp)
   20a78:	1880030b 	ldhu	r2,12(r3)
   20a7c:	1080100c 	andi	r2,r2,64
   20a80:	10bfffcc 	andi	r2,r2,65535
   20a84:	10a0001c 	xori	r2,r2,32768
   20a88:	10a00004 	addi	r2,r2,-32768
   20a8c:	10000226 	beq	r2,zero,20a98 <___vfprintf_internal_r+0x53c>
   20a90:	00bfffc4 	movi	r2,-1
   20a94:	d8812c15 	stw	r2,1200(sp)
   20a98:	d8812c17 	ldw	r2,1200(sp)
   20a9c:	dfc14617 	ldw	ra,1304(sp)
   20aa0:	df014517 	ldw	fp,1300(sp)
   20aa4:	ddc14417 	ldw	r23,1296(sp)
   20aa8:	dd814317 	ldw	r22,1292(sp)
   20aac:	dd414217 	ldw	r21,1288(sp)
   20ab0:	dd014117 	ldw	r20,1284(sp)
   20ab4:	dcc14017 	ldw	r19,1280(sp)
   20ab8:	dc813f17 	ldw	r18,1276(sp)
   20abc:	dc413e17 	ldw	r17,1272(sp)
   20ac0:	dc013d17 	ldw	r16,1268(sp)
   20ac4:	dec14704 	addi	sp,sp,1308
   20ac8:	f800283a 	ret
   20acc:	d9412917 	ldw	r5,1188(sp)
   20ad0:	8809883a 	mov	r4,r17
   20ad4:	d9811b04 	addi	r6,sp,1132
   20ad8:	00205280 	call	20528 <__sprint_r>
   20adc:	103fe51e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   20ae0:	da400404 	addi	r9,sp,16
   20ae4:	003eea06 	br	20690 <___vfprintf_internal_r+0x134>
   20ae8:	00240840 	call	24084 <__sinit>
   20aec:	003eb306 	br	205bc <___vfprintf_internal_r+0x60>
   20af0:	e013883a 	mov	r9,fp
   20af4:	84000414 	ori	r16,r16,16
   20af8:	1839883a 	mov	fp,r3
   20afc:	8080080c 	andi	r2,r16,32
   20b00:	10034426 	beq	r2,zero,21814 <___vfprintf_internal_r+0x12b8>
   20b04:	d8c12d17 	ldw	r3,1204(sp)
   20b08:	18800117 	ldw	r2,4(r3)
   20b0c:	1dc00017 	ldw	r23,0(r3)
   20b10:	18c00204 	addi	r3,r3,8
   20b14:	d8c12d15 	stw	r3,1204(sp)
   20b18:	102d883a 	mov	r22,r2
   20b1c:	1003020e 	bge	r2,zero,21728 <___vfprintf_internal_r+0x11cc>
   20b20:	05efc83a 	sub	r23,zero,r23
   20b24:	b804c03a 	cmpne	r2,r23,zero
   20b28:	05adc83a 	sub	r22,zero,r22
   20b2c:	b0adc83a 	sub	r22,r22,r2
   20b30:	00800b44 	movi	r2,45
   20b34:	d8812585 	stb	r2,1174(sp)
   20b38:	00c00044 	movi	r3,1
   20b3c:	bd84b03a 	or	r2,r23,r22
   20b40:	e0000216 	blt	fp,zero,20b4c <___vfprintf_internal_r+0x5f0>
   20b44:	013fdfc4 	movi	r4,-129
   20b48:	8120703a 	and	r16,r16,r4
   20b4c:	1001cc1e 	bne	r2,zero,21280 <___vfprintf_internal_r+0xd24>
   20b50:	e001cb1e 	bne	fp,zero,21280 <___vfprintf_internal_r+0xd24>
   20b54:	18c03fcc 	andi	r3,r3,255
   20b58:	1802ca1e 	bne	r3,zero,21684 <___vfprintf_internal_r+0x1128>
   20b5c:	8080004c 	andi	r2,r16,1
   20b60:	1002c826 	beq	r2,zero,21684 <___vfprintf_internal_r+0x1128>
   20b64:	d8c13917 	ldw	r3,1252(sp)
   20b68:	00800c04 	movi	r2,48
   20b6c:	d8810dc5 	stb	r2,1079(sp)
   20b70:	d8c12b15 	stw	r3,1196(sp)
   20b74:	dcc10dc4 	addi	r19,sp,1079
   20b78:	d8812b17 	ldw	r2,1196(sp)
   20b7c:	d8812815 	stw	r2,1184(sp)
   20b80:	1700010e 	bge	r2,fp,20b88 <___vfprintf_internal_r+0x62c>
   20b84:	df012815 	stw	fp,1184(sp)
   20b88:	d8812583 	ldbu	r2,1174(sp)
   20b8c:	df013115 	stw	fp,1220(sp)
   20b90:	10803fcc 	andi	r2,r2,255
   20b94:	1080201c 	xori	r2,r2,128
   20b98:	10bfe004 	addi	r2,r2,-128
   20b9c:	103ed726 	beq	r2,zero,206fc <___vfprintf_internal_r+0x1a0>
   20ba0:	d8c12817 	ldw	r3,1184(sp)
   20ba4:	18c00044 	addi	r3,r3,1
   20ba8:	d8c12815 	stw	r3,1184(sp)
   20bac:	003ed306 	br	206fc <___vfprintf_internal_r+0x1a0>
   20bb0:	8080020c 	andi	r2,r16,8
   20bb4:	e013883a 	mov	r9,fp
   20bb8:	1839883a 	mov	fp,r3
   20bbc:	1003a626 	beq	r2,zero,21a58 <___vfprintf_internal_r+0x14fc>
   20bc0:	d9012d17 	ldw	r4,1204(sp)
   20bc4:	25800017 	ldw	r22,0(r4)
   20bc8:	25000117 	ldw	r20,4(r4)
   20bcc:	21000204 	addi	r4,r4,8
   20bd0:	d9012d15 	stw	r4,1204(sp)
   20bd4:	dd813315 	stw	r22,1228(sp)
   20bd8:	dd013415 	stw	r20,1232(sp)
   20bdc:	b009883a 	mov	r4,r22
   20be0:	a00b883a 	mov	r5,r20
   20be4:	da413c15 	stw	r9,1264(sp)
   20be8:	00272100 	call	27210 <__isinfd>
   20bec:	da413c17 	ldw	r9,1264(sp)
   20bf0:	b009883a 	mov	r4,r22
   20bf4:	a00b883a 	mov	r5,r20
   20bf8:	10041d26 	beq	r2,zero,21c70 <___vfprintf_internal_r+0x1714>
   20bfc:	000d883a 	mov	r6,zero
   20c00:	000f883a 	mov	r7,zero
   20c04:	0028fe40 	call	28fe4 <__ltdf2>
   20c08:	da413c17 	ldw	r9,1264(sp)
   20c0c:	1004da16 	blt	r2,zero,21f78 <___vfprintf_internal_r+0x1a1c>
   20c10:	d8812583 	ldbu	r2,1174(sp)
   20c14:	00c011c4 	movi	r3,71
   20c18:	1c83d116 	blt	r3,r18,21b60 <___vfprintf_internal_r+0x1604>
   20c1c:	04c000f4 	movhi	r19,3
   20c20:	9cf1e804 	addi	r19,r19,-14432
   20c24:	00c000c4 	movi	r3,3
   20c28:	d8c12815 	stw	r3,1184(sp)
   20c2c:	00ffdfc4 	movi	r3,-129
   20c30:	80e0703a 	and	r16,r16,r3
   20c34:	d8c12817 	ldw	r3,1184(sp)
   20c38:	d8013115 	stw	zero,1220(sp)
   20c3c:	d8c12b15 	stw	r3,1196(sp)
   20c40:	003fd306 	br	20b90 <___vfprintf_internal_r+0x634>
   20c44:	84000214 	ori	r16,r16,8
   20c48:	ac800007 	ldb	r18,0(r21)
   20c4c:	003e9f06 	br	206cc <___vfprintf_internal_r+0x170>
   20c50:	e013883a 	mov	r9,fp
   20c54:	84000414 	ori	r16,r16,16
   20c58:	1839883a 	mov	fp,r3
   20c5c:	8080080c 	andi	r2,r16,32
   20c60:	10031d26 	beq	r2,zero,218d8 <___vfprintf_internal_r+0x137c>
   20c64:	d8812d17 	ldw	r2,1204(sp)
   20c68:	0007883a 	mov	r3,zero
   20c6c:	15c00017 	ldw	r23,0(r2)
   20c70:	15800117 	ldw	r22,4(r2)
   20c74:	10800204 	addi	r2,r2,8
   20c78:	d8812d15 	stw	r2,1204(sp)
   20c7c:	d8012585 	stb	zero,1174(sp)
   20c80:	bd84b03a 	or	r2,r23,r22
   20c84:	003fae06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   20c88:	e013883a 	mov	r9,fp
   20c8c:	84000414 	ori	r16,r16,16
   20c90:	1839883a 	mov	fp,r3
   20c94:	8080080c 	andi	r2,r16,32
   20c98:	1002e726 	beq	r2,zero,21838 <___vfprintf_internal_r+0x12dc>
   20c9c:	d8c12d17 	ldw	r3,1204(sp)
   20ca0:	d9012d17 	ldw	r4,1204(sp)
   20ca4:	1dc00017 	ldw	r23,0(r3)
   20ca8:	1d800117 	ldw	r22,4(r3)
   20cac:	21000204 	addi	r4,r4,8
   20cb0:	00c00044 	movi	r3,1
   20cb4:	d9012d15 	stw	r4,1204(sp)
   20cb8:	bd84b03a 	or	r2,r23,r22
   20cbc:	d8012585 	stb	zero,1174(sp)
   20cc0:	003f9f06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   20cc4:	e013883a 	mov	r9,fp
   20cc8:	1839883a 	mov	fp,r3
   20ccc:	00c000f4 	movhi	r3,3
   20cd0:	18f1ec04 	addi	r3,r3,-14416
   20cd4:	d8c13615 	stw	r3,1240(sp)
   20cd8:	8080080c 	andi	r2,r16,32
   20cdc:	10007726 	beq	r2,zero,20ebc <___vfprintf_internal_r+0x960>
   20ce0:	d9012d17 	ldw	r4,1204(sp)
   20ce4:	25c00017 	ldw	r23,0(r4)
   20ce8:	25800117 	ldw	r22,4(r4)
   20cec:	21000204 	addi	r4,r4,8
   20cf0:	d9012d15 	stw	r4,1204(sp)
   20cf4:	8080004c 	andi	r2,r16,1
   20cf8:	1002c226 	beq	r2,zero,21804 <___vfprintf_internal_r+0x12a8>
   20cfc:	bd84b03a 	or	r2,r23,r22
   20d00:	10035d26 	beq	r2,zero,21a78 <___vfprintf_internal_r+0x151c>
   20d04:	00c00c04 	movi	r3,48
   20d08:	d8c12505 	stb	r3,1172(sp)
   20d0c:	dc812545 	stb	r18,1173(sp)
   20d10:	84000094 	ori	r16,r16,2
   20d14:	00c00084 	movi	r3,2
   20d18:	d8012585 	stb	zero,1174(sp)
   20d1c:	003f8806 	br	20b40 <___vfprintf_internal_r+0x5e4>
   20d20:	ac800007 	ldb	r18,0(r21)
   20d24:	00c00a84 	movi	r3,42
   20d28:	adc00044 	addi	r23,r21,1
   20d2c:	90c57526 	beq	r18,r3,22304 <___vfprintf_internal_r+0x1da8>
   20d30:	95bff404 	addi	r22,r18,-48
   20d34:	0009883a 	mov	r4,zero
   20d38:	9d84ff36 	bltu	r19,r22,22138 <___vfprintf_internal_r+0x1bdc>
   20d3c:	01400284 	movi	r5,10
   20d40:	00294340 	call	29434 <__mulsi3>
   20d44:	bc800007 	ldb	r18,0(r23)
   20d48:	b089883a 	add	r4,r22,r2
   20d4c:	bdc00044 	addi	r23,r23,1
   20d50:	95bff404 	addi	r22,r18,-48
   20d54:	9dbff92e 	bgeu	r19,r22,20d3c <___vfprintf_internal_r+0x7e0>
   20d58:	2007883a 	mov	r3,r4
   20d5c:	20044316 	blt	r4,zero,21e6c <___vfprintf_internal_r+0x1910>
   20d60:	b82b883a 	mov	r21,r23
   20d64:	003e5a06 	br	206d0 <___vfprintf_internal_r+0x174>
   20d68:	ac800007 	ldb	r18,0(r21)
   20d6c:	01001b04 	movi	r4,108
   20d70:	a805883a 	mov	r2,r21
   20d74:	91045526 	beq	r18,r4,21ecc <___vfprintf_internal_r+0x1970>
   20d78:	84000414 	ori	r16,r16,16
   20d7c:	003e5306 	br	206cc <___vfprintf_internal_r+0x170>
   20d80:	8080080c 	andi	r2,r16,32
   20d84:	e013883a 	mov	r9,fp
   20d88:	10034026 	beq	r2,zero,21a8c <___vfprintf_internal_r+0x1530>
   20d8c:	d9012d17 	ldw	r4,1204(sp)
   20d90:	20800017 	ldw	r2,0(r4)
   20d94:	d9012c17 	ldw	r4,1200(sp)
   20d98:	2007d7fa 	srai	r3,r4,31
   20d9c:	d9012d17 	ldw	r4,1204(sp)
   20da0:	10c00115 	stw	r3,4(r2)
   20da4:	21000104 	addi	r4,r4,4
   20da8:	d9012d15 	stw	r4,1204(sp)
   20dac:	d9012c17 	ldw	r4,1200(sp)
   20db0:	11000015 	stw	r4,0(r2)
   20db4:	003e1f06 	br	20634 <___vfprintf_internal_r+0xd8>
   20db8:	d9012d17 	ldw	r4,1204(sp)
   20dbc:	21000017 	ldw	r4,0(r4)
   20dc0:	d9012e15 	stw	r4,1208(sp)
   20dc4:	d9012d17 	ldw	r4,1204(sp)
   20dc8:	20800104 	addi	r2,r4,4
   20dcc:	d9012e17 	ldw	r4,1208(sp)
   20dd0:	203ee716 	blt	r4,zero,20970 <___vfprintf_internal_r+0x414>
   20dd4:	d8812d15 	stw	r2,1204(sp)
   20dd8:	ac800007 	ldb	r18,0(r21)
   20ddc:	003e3b06 	br	206cc <___vfprintf_internal_r+0x170>
   20de0:	e013883a 	mov	r9,fp
   20de4:	1839883a 	mov	fp,r3
   20de8:	d8c12d17 	ldw	r3,1204(sp)
   20dec:	00800c04 	movi	r2,48
   20df0:	010000f4 	movhi	r4,3
   20df4:	2131f104 	addi	r4,r4,-14396
   20df8:	1dc00017 	ldw	r23,0(r3)
   20dfc:	18c00104 	addi	r3,r3,4
   20e00:	d8812505 	stb	r2,1172(sp)
   20e04:	00801e04 	movi	r2,120
   20e08:	d8812545 	stb	r2,1173(sp)
   20e0c:	d8c12d15 	stw	r3,1204(sp)
   20e10:	002d883a 	mov	r22,zero
   20e14:	84000094 	ori	r16,r16,2
   20e18:	d9013615 	stw	r4,1240(sp)
   20e1c:	00c00084 	movi	r3,2
   20e20:	04801e04 	movi	r18,120
   20e24:	b805883a 	mov	r2,r23
   20e28:	d8012585 	stb	zero,1174(sp)
   20e2c:	003f4406 	br	20b40 <___vfprintf_internal_r+0x5e4>
   20e30:	84000814 	ori	r16,r16,32
   20e34:	ac800007 	ldb	r18,0(r21)
   20e38:	003e2406 	br	206cc <___vfprintf_internal_r+0x170>
   20e3c:	d8812d17 	ldw	r2,1204(sp)
   20e40:	d8012585 	stb	zero,1174(sp)
   20e44:	e013883a 	mov	r9,fp
   20e48:	14c00017 	ldw	r19,0(r2)
   20e4c:	1839883a 	mov	fp,r3
   20e50:	15c00104 	addi	r23,r2,4
   20e54:	98045526 	beq	r19,zero,21fac <___vfprintf_internal_r+0x1a50>
   20e58:	9809883a 	mov	r4,r19
   20e5c:	18043116 	blt	r3,zero,21f24 <___vfprintf_internal_r+0x19c8>
   20e60:	000b883a 	mov	r5,zero
   20e64:	180d883a 	mov	r6,r3
   20e68:	da413c15 	stw	r9,1264(sp)
   20e6c:	00257240 	call	25724 <memchr>
   20e70:	da413c17 	ldw	r9,1264(sp)
   20e74:	10047a26 	beq	r2,zero,22060 <___vfprintf_internal_r+0x1b04>
   20e78:	14c5c83a 	sub	r2,r2,r19
   20e7c:	d8812b15 	stw	r2,1196(sp)
   20e80:	e083d40e 	bge	fp,r2,21dd4 <___vfprintf_internal_r+0x1878>
   20e84:	df012815 	stw	fp,1184(sp)
   20e88:	e004e416 	blt	fp,zero,2221c <___vfprintf_internal_r+0x1cc0>
   20e8c:	d8812583 	ldbu	r2,1174(sp)
   20e90:	df012b15 	stw	fp,1196(sp)
   20e94:	ddc12d15 	stw	r23,1204(sp)
   20e98:	d8013115 	stw	zero,1220(sp)
   20e9c:	003f3c06 	br	20b90 <___vfprintf_internal_r+0x634>
   20ea0:	008000f4 	movhi	r2,3
   20ea4:	10b1f104 	addi	r2,r2,-14396
   20ea8:	d8813615 	stw	r2,1240(sp)
   20eac:	8080080c 	andi	r2,r16,32
   20eb0:	e013883a 	mov	r9,fp
   20eb4:	1839883a 	mov	fp,r3
   20eb8:	103f891e 	bne	r2,zero,20ce0 <___vfprintf_internal_r+0x784>
   20ebc:	8080040c 	andi	r2,r16,16
   20ec0:	1002c326 	beq	r2,zero,219d0 <___vfprintf_internal_r+0x1474>
   20ec4:	d8812d17 	ldw	r2,1204(sp)
   20ec8:	002d883a 	mov	r22,zero
   20ecc:	15c00017 	ldw	r23,0(r2)
   20ed0:	10800104 	addi	r2,r2,4
   20ed4:	d8812d15 	stw	r2,1204(sp)
   20ed8:	003f8606 	br	20cf4 <___vfprintf_internal_r+0x798>
   20edc:	84001014 	ori	r16,r16,64
   20ee0:	ac800007 	ldb	r18,0(r21)
   20ee4:	003df906 	br	206cc <___vfprintf_internal_r+0x170>
   20ee8:	d8812587 	ldb	r2,1174(sp)
   20eec:	1002e51e 	bne	r2,zero,21a84 <___vfprintf_internal_r+0x1528>
   20ef0:	00800804 	movi	r2,32
   20ef4:	d8812585 	stb	r2,1174(sp)
   20ef8:	ac800007 	ldb	r18,0(r21)
   20efc:	003df306 	br	206cc <___vfprintf_internal_r+0x170>
   20f00:	84000054 	ori	r16,r16,1
   20f04:	ac800007 	ldb	r18,0(r21)
   20f08:	003df006 	br	206cc <___vfprintf_internal_r+0x170>
   20f0c:	84002014 	ori	r16,r16,128
   20f10:	ac800007 	ldb	r18,0(r21)
   20f14:	003ded06 	br	206cc <___vfprintf_internal_r+0x170>
   20f18:	0009883a 	mov	r4,zero
   20f1c:	95bff404 	addi	r22,r18,-48
   20f20:	182f883a 	mov	r23,r3
   20f24:	01400284 	movi	r5,10
   20f28:	00294340 	call	29434 <__mulsi3>
   20f2c:	ac800007 	ldb	r18,0(r21)
   20f30:	1589883a 	add	r4,r2,r22
   20f34:	ad400044 	addi	r21,r21,1
   20f38:	95bff404 	addi	r22,r18,-48
   20f3c:	9dbff92e 	bgeu	r19,r22,20f24 <___vfprintf_internal_r+0x9c8>
   20f40:	b807883a 	mov	r3,r23
   20f44:	d9012e15 	stw	r4,1208(sp)
   20f48:	003de106 	br	206d0 <___vfprintf_internal_r+0x174>
   20f4c:	00800ac4 	movi	r2,43
   20f50:	d8812585 	stb	r2,1174(sp)
   20f54:	ac800007 	ldb	r18,0(r21)
   20f58:	003ddc06 	br	206cc <___vfprintf_internal_r+0x170>
   20f5c:	d8c12d17 	ldw	r3,1204(sp)
   20f60:	d9012d17 	ldw	r4,1204(sp)
   20f64:	e013883a 	mov	r9,fp
   20f68:	18800017 	ldw	r2,0(r3)
   20f6c:	21000104 	addi	r4,r4,4
   20f70:	00c00044 	movi	r3,1
   20f74:	d8c12815 	stw	r3,1184(sp)
   20f78:	d8012585 	stb	zero,1174(sp)
   20f7c:	d8810405 	stb	r2,1040(sp)
   20f80:	d9012d15 	stw	r4,1204(sp)
   20f84:	d8c12b15 	stw	r3,1196(sp)
   20f88:	dcc10404 	addi	r19,sp,1040
   20f8c:	003dda06 	br	206f8 <___vfprintf_internal_r+0x19c>
   20f90:	e013883a 	mov	r9,fp
   20f94:	1839883a 	mov	fp,r3
   20f98:	003ed806 	br	20afc <___vfprintf_internal_r+0x5a0>
   20f9c:	e013883a 	mov	r9,fp
   20fa0:	1839883a 	mov	fp,r3
   20fa4:	003f2d06 	br	20c5c <___vfprintf_internal_r+0x700>
   20fa8:	e013883a 	mov	r9,fp
   20fac:	1839883a 	mov	fp,r3
   20fb0:	003f3806 	br	20c94 <___vfprintf_internal_r+0x738>
   20fb4:	da011d17 	ldw	r8,1140(sp)
   20fb8:	d8c11c17 	ldw	r3,1136(sp)
   20fbc:	d8812587 	ldb	r2,1174(sp)
   20fc0:	10000b26 	beq	r2,zero,20ff0 <___vfprintf_internal_r+0xa94>
   20fc4:	d8812584 	addi	r2,sp,1174
   20fc8:	48800015 	stw	r2,0(r9)
   20fcc:	00800044 	movi	r2,1
   20fd0:	48800115 	stw	r2,4(r9)
   20fd4:	4091883a 	add	r8,r8,r2
   20fd8:	1887883a 	add	r3,r3,r2
   20fdc:	da011d15 	stw	r8,1140(sp)
   20fe0:	d8c11c15 	stw	r3,1136(sp)
   20fe4:	008001c4 	movi	r2,7
   20fe8:	10c18e16 	blt	r2,r3,21624 <___vfprintf_internal_r+0x10c8>
   20fec:	4a400204 	addi	r9,r9,8
   20ff0:	d9012a17 	ldw	r4,1192(sp)
   20ff4:	20000b26 	beq	r4,zero,21024 <___vfprintf_internal_r+0xac8>
   20ff8:	d8812504 	addi	r2,sp,1172
   20ffc:	48800015 	stw	r2,0(r9)
   21000:	00800084 	movi	r2,2
   21004:	48800115 	stw	r2,4(r9)
   21008:	4091883a 	add	r8,r8,r2
   2100c:	18c00044 	addi	r3,r3,1
   21010:	da011d15 	stw	r8,1140(sp)
   21014:	d8c11c15 	stw	r3,1136(sp)
   21018:	008001c4 	movi	r2,7
   2101c:	10c17816 	blt	r2,r3,21600 <___vfprintf_internal_r+0x10a4>
   21020:	4a400204 	addi	r9,r9,8
   21024:	d9012f17 	ldw	r4,1212(sp)
   21028:	00802004 	movi	r2,128
   2102c:	2080fc26 	beq	r4,r2,21420 <___vfprintf_internal_r+0xec4>
   21030:	d8813117 	ldw	r2,1220(sp)
   21034:	d9012b17 	ldw	r4,1196(sp)
   21038:	112fc83a 	sub	r23,r2,r4
   2103c:	05c02a0e 	bge	zero,r23,210e8 <___vfprintf_internal_r+0xb8c>
   21040:	07000404 	movi	fp,16
   21044:	050000f4 	movhi	r20,3
   21048:	a531fc84 	addi	r20,r20,-14350
   2104c:	e5c01d0e 	bge	fp,r23,210c4 <___vfprintf_internal_r+0xb68>
   21050:	dc812a15 	stw	r18,1192(sp)
   21054:	058001c4 	movi	r22,7
   21058:	a025883a 	mov	r18,r20
   2105c:	8029883a 	mov	r20,r16
   21060:	dc012917 	ldw	r16,1188(sp)
   21064:	00000306 	br	21074 <___vfprintf_internal_r+0xb18>
   21068:	bdfffc04 	addi	r23,r23,-16
   2106c:	4a400204 	addi	r9,r9,8
   21070:	e5c0110e 	bge	fp,r23,210b8 <___vfprintf_internal_r+0xb5c>
   21074:	4c800015 	stw	r18,0(r9)
   21078:	4f000115 	stw	fp,4(r9)
   2107c:	42000404 	addi	r8,r8,16
   21080:	18c00044 	addi	r3,r3,1
   21084:	da011d15 	stw	r8,1140(sp)
   21088:	d8c11c15 	stw	r3,1136(sp)
   2108c:	b0fff60e 	bge	r22,r3,21068 <___vfprintf_internal_r+0xb0c>
   21090:	8809883a 	mov	r4,r17
   21094:	800b883a 	mov	r5,r16
   21098:	d9811b04 	addi	r6,sp,1132
   2109c:	00205280 	call	20528 <__sprint_r>
   210a0:	103e741e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   210a4:	bdfffc04 	addi	r23,r23,-16
   210a8:	da011d17 	ldw	r8,1140(sp)
   210ac:	d8c11c17 	ldw	r3,1136(sp)
   210b0:	da400404 	addi	r9,sp,16
   210b4:	e5ffef16 	blt	fp,r23,21074 <___vfprintf_internal_r+0xb18>
   210b8:	a021883a 	mov	r16,r20
   210bc:	9029883a 	mov	r20,r18
   210c0:	dc812a17 	ldw	r18,1192(sp)
   210c4:	4d000015 	stw	r20,0(r9)
   210c8:	4dc00115 	stw	r23,4(r9)
   210cc:	45d1883a 	add	r8,r8,r23
   210d0:	18c00044 	addi	r3,r3,1
   210d4:	da011d15 	stw	r8,1140(sp)
   210d8:	d8c11c15 	stw	r3,1136(sp)
   210dc:	008001c4 	movi	r2,7
   210e0:	10c13e16 	blt	r2,r3,215dc <___vfprintf_internal_r+0x1080>
   210e4:	4a400204 	addi	r9,r9,8
   210e8:	8080400c 	andi	r2,r16,256
   210ec:	1000831e 	bne	r2,zero,212fc <___vfprintf_internal_r+0xda0>
   210f0:	d8812b17 	ldw	r2,1196(sp)
   210f4:	4cc00015 	stw	r19,0(r9)
   210f8:	48800115 	stw	r2,4(r9)
   210fc:	4091883a 	add	r8,r8,r2
   21100:	18c00044 	addi	r3,r3,1
   21104:	da011d15 	stw	r8,1140(sp)
   21108:	d8c11c15 	stw	r3,1136(sp)
   2110c:	008001c4 	movi	r2,7
   21110:	10c05316 	blt	r2,r3,21260 <___vfprintf_internal_r+0xd04>
   21114:	4a400204 	addi	r9,r9,8
   21118:	8400010c 	andi	r16,r16,4
   2111c:	80002e26 	beq	r16,zero,211d8 <___vfprintf_internal_r+0xc7c>
   21120:	d8812e17 	ldw	r2,1208(sp)
   21124:	d8c12817 	ldw	r3,1184(sp)
   21128:	10e1c83a 	sub	r16,r2,r3
   2112c:	04002a0e 	bge	zero,r16,211d8 <___vfprintf_internal_r+0xc7c>
   21130:	04800404 	movi	r18,16
   21134:	d8c11c17 	ldw	r3,1136(sp)
   21138:	05c000f4 	movhi	r23,3
   2113c:	bdf1f884 	addi	r23,r23,-14366
   21140:	9400170e 	bge	r18,r16,211a0 <___vfprintf_internal_r+0xc44>
   21144:	04c001c4 	movi	r19,7
   21148:	dd012917 	ldw	r20,1188(sp)
   2114c:	00000306 	br	2115c <___vfprintf_internal_r+0xc00>
   21150:	843ffc04 	addi	r16,r16,-16
   21154:	4a400204 	addi	r9,r9,8
   21158:	9400110e 	bge	r18,r16,211a0 <___vfprintf_internal_r+0xc44>
   2115c:	4dc00015 	stw	r23,0(r9)
   21160:	4c800115 	stw	r18,4(r9)
   21164:	42000404 	addi	r8,r8,16
   21168:	18c00044 	addi	r3,r3,1
   2116c:	da011d15 	stw	r8,1140(sp)
   21170:	d8c11c15 	stw	r3,1136(sp)
   21174:	98fff60e 	bge	r19,r3,21150 <___vfprintf_internal_r+0xbf4>
   21178:	8809883a 	mov	r4,r17
   2117c:	a00b883a 	mov	r5,r20
   21180:	d9811b04 	addi	r6,sp,1132
   21184:	00205280 	call	20528 <__sprint_r>
   21188:	103e3a1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   2118c:	843ffc04 	addi	r16,r16,-16
   21190:	da011d17 	ldw	r8,1140(sp)
   21194:	d8c11c17 	ldw	r3,1136(sp)
   21198:	da400404 	addi	r9,sp,16
   2119c:	943fef16 	blt	r18,r16,2115c <___vfprintf_internal_r+0xc00>
   211a0:	4dc00015 	stw	r23,0(r9)
   211a4:	4c000115 	stw	r16,4(r9)
   211a8:	8211883a 	add	r8,r16,r8
   211ac:	18c00044 	addi	r3,r3,1
   211b0:	da011d15 	stw	r8,1140(sp)
   211b4:	d8c11c15 	stw	r3,1136(sp)
   211b8:	008001c4 	movi	r2,7
   211bc:	10c0060e 	bge	r2,r3,211d8 <___vfprintf_internal_r+0xc7c>
   211c0:	d9412917 	ldw	r5,1188(sp)
   211c4:	8809883a 	mov	r4,r17
   211c8:	d9811b04 	addi	r6,sp,1132
   211cc:	00205280 	call	20528 <__sprint_r>
   211d0:	103e281e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   211d4:	da011d17 	ldw	r8,1140(sp)
   211d8:	dd012817 	ldw	r20,1184(sp)
   211dc:	d9012e17 	ldw	r4,1208(sp)
   211e0:	a100010e 	bge	r20,r4,211e8 <___vfprintf_internal_r+0xc8c>
   211e4:	2029883a 	mov	r20,r4
   211e8:	d8812c17 	ldw	r2,1200(sp)
   211ec:	1505883a 	add	r2,r2,r20
   211f0:	d8812c15 	stw	r2,1200(sp)
   211f4:	4000b91e 	bne	r8,zero,214dc <___vfprintf_internal_r+0xf80>
   211f8:	d8011c15 	stw	zero,1136(sp)
   211fc:	a8800007 	ldb	r2,0(r21)
   21200:	da400404 	addi	r9,sp,16
   21204:	103d0d1e 	bne	r2,zero,2063c <___vfprintf_internal_r+0xe0>
   21208:	a825883a 	mov	r18,r21
   2120c:	003d2306 	br	2069c <___vfprintf_internal_r+0x140>
   21210:	d9412917 	ldw	r5,1188(sp)
   21214:	8809883a 	mov	r4,r17
   21218:	d9811b04 	addi	r6,sp,1132
   2121c:	00205280 	call	20528 <__sprint_r>
   21220:	103e141e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21224:	da011d17 	ldw	r8,1140(sp)
   21228:	da400404 	addi	r9,sp,16
   2122c:	8080004c 	andi	r2,r16,1
   21230:	103fb926 	beq	r2,zero,21118 <___vfprintf_internal_r+0xbbc>
   21234:	d8c11c17 	ldw	r3,1136(sp)
   21238:	d9013717 	ldw	r4,1244(sp)
   2123c:	00800044 	movi	r2,1
   21240:	48800115 	stw	r2,4(r9)
   21244:	49000015 	stw	r4,0(r9)
   21248:	4091883a 	add	r8,r8,r2
   2124c:	1887883a 	add	r3,r3,r2
   21250:	da011d15 	stw	r8,1140(sp)
   21254:	d8c11c15 	stw	r3,1136(sp)
   21258:	008001c4 	movi	r2,7
   2125c:	10ffad0e 	bge	r2,r3,21114 <___vfprintf_internal_r+0xbb8>
   21260:	d9412917 	ldw	r5,1188(sp)
   21264:	8809883a 	mov	r4,r17
   21268:	d9811b04 	addi	r6,sp,1132
   2126c:	00205280 	call	20528 <__sprint_r>
   21270:	103e001e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21274:	da400404 	addi	r9,sp,16
   21278:	da011d17 	ldw	r8,1140(sp)
   2127c:	003fa606 	br	21118 <___vfprintf_internal_r+0xbbc>
   21280:	18803fcc 	andi	r2,r3,255
   21284:	00c00044 	movi	r3,1
   21288:	10c10126 	beq	r2,r3,21690 <___vfprintf_internal_r+0x1134>
   2128c:	00c00084 	movi	r3,2
   21290:	10c0ed26 	beq	r2,r3,21648 <___vfprintf_internal_r+0x10ec>
   21294:	d8c10dc4 	addi	r3,sp,1079
   21298:	b808d0fa 	srli	r4,r23,3
   2129c:	b00a977a 	slli	r5,r22,29
   212a0:	b02cd0fa 	srli	r22,r22,3
   212a4:	bdc001cc 	andi	r23,r23,7
   212a8:	b8800c04 	addi	r2,r23,48
   212ac:	292eb03a 	or	r23,r5,r4
   212b0:	18800005 	stb	r2,0(r3)
   212b4:	bd88b03a 	or	r4,r23,r22
   212b8:	1827883a 	mov	r19,r3
   212bc:	18ffffc4 	addi	r3,r3,-1
   212c0:	203ff51e 	bne	r4,zero,21298 <___vfprintf_internal_r+0xd3c>
   212c4:	8100004c 	andi	r4,r16,1
   212c8:	980b883a 	mov	r5,r19
   212cc:	20000726 	beq	r4,zero,212ec <___vfprintf_internal_r+0xd90>
   212d0:	10803fcc 	andi	r2,r2,255
   212d4:	1080201c 	xori	r2,r2,128
   212d8:	10bfe004 	addi	r2,r2,-128
   212dc:	01000c04 	movi	r4,48
   212e0:	11000226 	beq	r2,r4,212ec <___vfprintf_internal_r+0xd90>
   212e4:	1827883a 	mov	r19,r3
   212e8:	293fffc5 	stb	r4,-1(r5)
   212ec:	d8812717 	ldw	r2,1180(sp)
   212f0:	14c5c83a 	sub	r2,r2,r19
   212f4:	d8812b15 	stw	r2,1196(sp)
   212f8:	003e1f06 	br	20b78 <___vfprintf_internal_r+0x61c>
   212fc:	00801944 	movi	r2,101
   21300:	14807c0e 	bge	r2,r18,214f4 <___vfprintf_internal_r+0xf98>
   21304:	d9013317 	ldw	r4,1228(sp)
   21308:	d9413417 	ldw	r5,1232(sp)
   2130c:	000d883a 	mov	r6,zero
   21310:	000f883a 	mov	r7,zero
   21314:	d8c13b15 	stw	r3,1260(sp)
   21318:	da013a15 	stw	r8,1256(sp)
   2131c:	da413c15 	stw	r9,1264(sp)
   21320:	0028e640 	call	28e64 <__eqdf2>
   21324:	d8c13b17 	ldw	r3,1260(sp)
   21328:	da013a17 	ldw	r8,1256(sp)
   2132c:	da413c17 	ldw	r9,1264(sp)
   21330:	1001001e 	bne	r2,zero,21734 <___vfprintf_internal_r+0x11d8>
   21334:	008000f4 	movhi	r2,3
   21338:	10b1f804 	addi	r2,r2,-14368
   2133c:	48800015 	stw	r2,0(r9)
   21340:	00800044 	movi	r2,1
   21344:	48800115 	stw	r2,4(r9)
   21348:	4091883a 	add	r8,r8,r2
   2134c:	1887883a 	add	r3,r3,r2
   21350:	da011d15 	stw	r8,1140(sp)
   21354:	d8c11c15 	stw	r3,1136(sp)
   21358:	008001c4 	movi	r2,7
   2135c:	10c20316 	blt	r2,r3,21b6c <___vfprintf_internal_r+0x1610>
   21360:	4a400204 	addi	r9,r9,8
   21364:	d8812417 	ldw	r2,1168(sp)
   21368:	d8c13217 	ldw	r3,1224(sp)
   2136c:	10c00216 	blt	r2,r3,21378 <___vfprintf_internal_r+0xe1c>
   21370:	8080004c 	andi	r2,r16,1
   21374:	103f6826 	beq	r2,zero,21118 <___vfprintf_internal_r+0xbbc>
   21378:	d8c11c17 	ldw	r3,1136(sp)
   2137c:	d9013717 	ldw	r4,1244(sp)
   21380:	00800044 	movi	r2,1
   21384:	48800115 	stw	r2,4(r9)
   21388:	49000015 	stw	r4,0(r9)
   2138c:	4091883a 	add	r8,r8,r2
   21390:	1887883a 	add	r3,r3,r2
   21394:	da011d15 	stw	r8,1140(sp)
   21398:	d8c11c15 	stw	r3,1136(sp)
   2139c:	008001c4 	movi	r2,7
   213a0:	10c2ce16 	blt	r2,r3,21edc <___vfprintf_internal_r+0x1980>
   213a4:	4a400204 	addi	r9,r9,8
   213a8:	d8813217 	ldw	r2,1224(sp)
   213ac:	14bfffc4 	addi	r18,r2,-1
   213b0:	04bf590e 	bge	zero,r18,21118 <___vfprintf_internal_r+0xbbc>
   213b4:	04c00404 	movi	r19,16
   213b8:	d8c11c17 	ldw	r3,1136(sp)
   213bc:	050000f4 	movhi	r20,3
   213c0:	a531fc84 	addi	r20,r20,-14350
   213c4:	9c818a0e 	bge	r19,r18,219f0 <___vfprintf_internal_r+0x1494>
   213c8:	058001c4 	movi	r22,7
   213cc:	ddc12917 	ldw	r23,1188(sp)
   213d0:	00000306 	br	213e0 <___vfprintf_internal_r+0xe84>
   213d4:	4a400204 	addi	r9,r9,8
   213d8:	94bffc04 	addi	r18,r18,-16
   213dc:	9c81840e 	bge	r19,r18,219f0 <___vfprintf_internal_r+0x1494>
   213e0:	4d000015 	stw	r20,0(r9)
   213e4:	4cc00115 	stw	r19,4(r9)
   213e8:	42000404 	addi	r8,r8,16
   213ec:	18c00044 	addi	r3,r3,1
   213f0:	da011d15 	stw	r8,1140(sp)
   213f4:	d8c11c15 	stw	r3,1136(sp)
   213f8:	b0fff60e 	bge	r22,r3,213d4 <___vfprintf_internal_r+0xe78>
   213fc:	8809883a 	mov	r4,r17
   21400:	b80b883a 	mov	r5,r23
   21404:	d9811b04 	addi	r6,sp,1132
   21408:	00205280 	call	20528 <__sprint_r>
   2140c:	103d991e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21410:	da011d17 	ldw	r8,1140(sp)
   21414:	d8c11c17 	ldw	r3,1136(sp)
   21418:	da400404 	addi	r9,sp,16
   2141c:	003fee06 	br	213d8 <___vfprintf_internal_r+0xe7c>
   21420:	d8812e17 	ldw	r2,1208(sp)
   21424:	d9012817 	ldw	r4,1184(sp)
   21428:	112fc83a 	sub	r23,r2,r4
   2142c:	05ff000e 	bge	zero,r23,21030 <___vfprintf_internal_r+0xad4>
   21430:	07000404 	movi	fp,16
   21434:	050000f4 	movhi	r20,3
   21438:	a531fc84 	addi	r20,r20,-14350
   2143c:	e5c01d0e 	bge	fp,r23,214b4 <___vfprintf_internal_r+0xf58>
   21440:	dc812a15 	stw	r18,1192(sp)
   21444:	058001c4 	movi	r22,7
   21448:	a025883a 	mov	r18,r20
   2144c:	8029883a 	mov	r20,r16
   21450:	dc012917 	ldw	r16,1188(sp)
   21454:	00000306 	br	21464 <___vfprintf_internal_r+0xf08>
   21458:	bdfffc04 	addi	r23,r23,-16
   2145c:	4a400204 	addi	r9,r9,8
   21460:	e5c0110e 	bge	fp,r23,214a8 <___vfprintf_internal_r+0xf4c>
   21464:	4c800015 	stw	r18,0(r9)
   21468:	4f000115 	stw	fp,4(r9)
   2146c:	42000404 	addi	r8,r8,16
   21470:	18c00044 	addi	r3,r3,1
   21474:	da011d15 	stw	r8,1140(sp)
   21478:	d8c11c15 	stw	r3,1136(sp)
   2147c:	b0fff60e 	bge	r22,r3,21458 <___vfprintf_internal_r+0xefc>
   21480:	8809883a 	mov	r4,r17
   21484:	800b883a 	mov	r5,r16
   21488:	d9811b04 	addi	r6,sp,1132
   2148c:	00205280 	call	20528 <__sprint_r>
   21490:	103d781e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21494:	bdfffc04 	addi	r23,r23,-16
   21498:	da011d17 	ldw	r8,1140(sp)
   2149c:	d8c11c17 	ldw	r3,1136(sp)
   214a0:	da400404 	addi	r9,sp,16
   214a4:	e5ffef16 	blt	fp,r23,21464 <___vfprintf_internal_r+0xf08>
   214a8:	a021883a 	mov	r16,r20
   214ac:	9029883a 	mov	r20,r18
   214b0:	dc812a17 	ldw	r18,1192(sp)
   214b4:	4d000015 	stw	r20,0(r9)
   214b8:	4dc00115 	stw	r23,4(r9)
   214bc:	45d1883a 	add	r8,r8,r23
   214c0:	18c00044 	addi	r3,r3,1
   214c4:	da011d15 	stw	r8,1140(sp)
   214c8:	d8c11c15 	stw	r3,1136(sp)
   214cc:	008001c4 	movi	r2,7
   214d0:	10c13616 	blt	r2,r3,219ac <___vfprintf_internal_r+0x1450>
   214d4:	4a400204 	addi	r9,r9,8
   214d8:	003ed506 	br	21030 <___vfprintf_internal_r+0xad4>
   214dc:	d9412917 	ldw	r5,1188(sp)
   214e0:	8809883a 	mov	r4,r17
   214e4:	d9811b04 	addi	r6,sp,1132
   214e8:	00205280 	call	20528 <__sprint_r>
   214ec:	103f4226 	beq	r2,zero,211f8 <___vfprintf_internal_r+0xc9c>
   214f0:	003d6006 	br	20a74 <___vfprintf_internal_r+0x518>
   214f4:	d9013217 	ldw	r4,1224(sp)
   214f8:	00800044 	movi	r2,1
   214fc:	4cc00015 	stw	r19,0(r9)
   21500:	1101000e 	bge	r2,r4,21904 <___vfprintf_internal_r+0x13a8>
   21504:	00800044 	movi	r2,1
   21508:	48800115 	stw	r2,4(r9)
   2150c:	4091883a 	add	r8,r8,r2
   21510:	1887883a 	add	r3,r3,r2
   21514:	da011d15 	stw	r8,1140(sp)
   21518:	d8c11c15 	stw	r3,1136(sp)
   2151c:	008001c4 	movi	r2,7
   21520:	10c10c16 	blt	r2,r3,21954 <___vfprintf_internal_r+0x13f8>
   21524:	4a400204 	addi	r9,r9,8
   21528:	d8813717 	ldw	r2,1244(sp)
   2152c:	48800015 	stw	r2,0(r9)
   21530:	00800044 	movi	r2,1
   21534:	48800115 	stw	r2,4(r9)
   21538:	4091883a 	add	r8,r8,r2
   2153c:	1887883a 	add	r3,r3,r2
   21540:	da011d15 	stw	r8,1140(sp)
   21544:	d8c11c15 	stw	r3,1136(sp)
   21548:	008001c4 	movi	r2,7
   2154c:	10c10a16 	blt	r2,r3,21978 <___vfprintf_internal_r+0x141c>
   21550:	4c800204 	addi	r18,r9,8
   21554:	d9013317 	ldw	r4,1228(sp)
   21558:	d9413417 	ldw	r5,1232(sp)
   2155c:	000d883a 	mov	r6,zero
   21560:	000f883a 	mov	r7,zero
   21564:	d8c13b15 	stw	r3,1260(sp)
   21568:	da013a15 	stw	r8,1256(sp)
   2156c:	0028ec00 	call	28ec0 <__nedf2>
   21570:	d8c13b17 	ldw	r3,1260(sp)
   21574:	da013a17 	ldw	r8,1256(sp)
   21578:	1000ba26 	beq	r2,zero,21864 <___vfprintf_internal_r+0x1308>
   2157c:	d9013217 	ldw	r4,1224(sp)
   21580:	9cc00044 	addi	r19,r19,1
   21584:	94c00015 	stw	r19,0(r18)
   21588:	20bfffc4 	addi	r2,r4,-1
   2158c:	90800115 	stw	r2,4(r18)
   21590:	4091883a 	add	r8,r8,r2
   21594:	18c00044 	addi	r3,r3,1
   21598:	da011d15 	stw	r8,1140(sp)
   2159c:	d8c11c15 	stw	r3,1136(sp)
   215a0:	008001c4 	movi	r2,7
   215a4:	10c0e216 	blt	r2,r3,21930 <___vfprintf_internal_r+0x13d4>
   215a8:	94800204 	addi	r18,r18,8
   215ac:	d9013517 	ldw	r4,1236(sp)
   215b0:	d8811fc4 	addi	r2,sp,1151
   215b4:	90800015 	stw	r2,0(r18)
   215b8:	91000115 	stw	r4,4(r18)
   215bc:	4111883a 	add	r8,r8,r4
   215c0:	18c00044 	addi	r3,r3,1
   215c4:	da011d15 	stw	r8,1140(sp)
   215c8:	d8c11c15 	stw	r3,1136(sp)
   215cc:	008001c4 	movi	r2,7
   215d0:	10ff2316 	blt	r2,r3,21260 <___vfprintf_internal_r+0xd04>
   215d4:	92400204 	addi	r9,r18,8
   215d8:	003ecf06 	br	21118 <___vfprintf_internal_r+0xbbc>
   215dc:	d9412917 	ldw	r5,1188(sp)
   215e0:	8809883a 	mov	r4,r17
   215e4:	d9811b04 	addi	r6,sp,1132
   215e8:	00205280 	call	20528 <__sprint_r>
   215ec:	103d211e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   215f0:	da011d17 	ldw	r8,1140(sp)
   215f4:	d8c11c17 	ldw	r3,1136(sp)
   215f8:	da400404 	addi	r9,sp,16
   215fc:	003eba06 	br	210e8 <___vfprintf_internal_r+0xb8c>
   21600:	d9412917 	ldw	r5,1188(sp)
   21604:	8809883a 	mov	r4,r17
   21608:	d9811b04 	addi	r6,sp,1132
   2160c:	00205280 	call	20528 <__sprint_r>
   21610:	103d181e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21614:	da011d17 	ldw	r8,1140(sp)
   21618:	d8c11c17 	ldw	r3,1136(sp)
   2161c:	da400404 	addi	r9,sp,16
   21620:	003e8006 	br	21024 <___vfprintf_internal_r+0xac8>
   21624:	d9412917 	ldw	r5,1188(sp)
   21628:	8809883a 	mov	r4,r17
   2162c:	d9811b04 	addi	r6,sp,1132
   21630:	00205280 	call	20528 <__sprint_r>
   21634:	103d0f1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21638:	da011d17 	ldw	r8,1140(sp)
   2163c:	d8c11c17 	ldw	r3,1136(sp)
   21640:	da400404 	addi	r9,sp,16
   21644:	003e6a06 	br	20ff0 <___vfprintf_internal_r+0xa94>
   21648:	d9413617 	ldw	r5,1240(sp)
   2164c:	d8810dc4 	addi	r2,sp,1079
   21650:	b8c003cc 	andi	r3,r23,15
   21654:	b008973a 	slli	r4,r22,28
   21658:	28c7883a 	add	r3,r5,r3
   2165c:	b82ed13a 	srli	r23,r23,4
   21660:	18c00003 	ldbu	r3,0(r3)
   21664:	b02cd13a 	srli	r22,r22,4
   21668:	25eeb03a 	or	r23,r4,r23
   2166c:	10c00005 	stb	r3,0(r2)
   21670:	bd86b03a 	or	r3,r23,r22
   21674:	1027883a 	mov	r19,r2
   21678:	10bfffc4 	addi	r2,r2,-1
   2167c:	183ff41e 	bne	r3,zero,21650 <___vfprintf_internal_r+0x10f4>
   21680:	003f1a06 	br	212ec <___vfprintf_internal_r+0xd90>
   21684:	d8012b15 	stw	zero,1196(sp)
   21688:	dcc10e04 	addi	r19,sp,1080
   2168c:	003d3a06 	br	20b78 <___vfprintf_internal_r+0x61c>
   21690:	b0025426 	beq	r22,zero,21fe4 <___vfprintf_internal_r+0x1a88>
   21694:	b807883a 	mov	r3,r23
   21698:	d8810dc4 	addi	r2,sp,1079
   2169c:	882f883a 	mov	r23,r17
   216a0:	04c00244 	movi	r19,9
   216a4:	8023883a 	mov	r17,r16
   216a8:	da412815 	stw	r9,1184(sp)
   216ac:	1821883a 	mov	r16,r3
   216b0:	8009883a 	mov	r4,r16
   216b4:	b00b883a 	mov	r5,r22
   216b8:	01800284 	movi	r6,10
   216bc:	000f883a 	mov	r7,zero
   216c0:	1029883a 	mov	r20,r2
   216c4:	0027f9c0 	call	27f9c <__umoddi3>
   216c8:	10800c04 	addi	r2,r2,48
   216cc:	8009883a 	mov	r4,r16
   216d0:	b00b883a 	mov	r5,r22
   216d4:	a0800005 	stb	r2,0(r20)
   216d8:	01800284 	movi	r6,10
   216dc:	000f883a 	mov	r7,zero
   216e0:	002794c0 	call	2794c <__udivdi3>
   216e4:	1021883a 	mov	r16,r2
   216e8:	182d883a 	mov	r22,r3
   216ec:	a0bfffc4 	addi	r2,r20,-1
   216f0:	183fef1e 	bne	r3,zero,216b0 <___vfprintf_internal_r+0x1154>
   216f4:	9c3fee36 	bltu	r19,r16,216b0 <___vfprintf_internal_r+0x1154>
   216f8:	da412817 	ldw	r9,1184(sp)
   216fc:	8005883a 	mov	r2,r16
   21700:	8821883a 	mov	r16,r17
   21704:	b823883a 	mov	r17,r23
   21708:	102f883a 	mov	r23,r2
   2170c:	d8812717 	ldw	r2,1180(sp)
   21710:	a4ffffc4 	addi	r19,r20,-1
   21714:	bdc00c04 	addi	r23,r23,48
   21718:	14c5c83a 	sub	r2,r2,r19
   2171c:	a5ffffc5 	stb	r23,-1(r20)
   21720:	d8812b15 	stw	r2,1196(sp)
   21724:	003d1406 	br	20b78 <___vfprintf_internal_r+0x61c>
   21728:	00c00044 	movi	r3,1
   2172c:	bd84b03a 	or	r2,r23,r22
   21730:	003d0306 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21734:	dc812417 	ldw	r18,1168(sp)
   21738:	0481140e 	bge	zero,r18,21b8c <___vfprintf_internal_r+0x1630>
   2173c:	d9013217 	ldw	r4,1224(sp)
   21740:	4cc00015 	stw	r19,0(r9)
   21744:	9100ec16 	blt	r18,r4,21af8 <___vfprintf_internal_r+0x159c>
   21748:	49000115 	stw	r4,4(r9)
   2174c:	4111883a 	add	r8,r8,r4
   21750:	18c00044 	addi	r3,r3,1
   21754:	da011d15 	stw	r8,1140(sp)
   21758:	d8c11c15 	stw	r3,1136(sp)
   2175c:	008001c4 	movi	r2,7
   21760:	10c23616 	blt	r2,r3,2203c <___vfprintf_internal_r+0x1ae0>
   21764:	4a400204 	addi	r9,r9,8
   21768:	d8813217 	ldw	r2,1224(sp)
   2176c:	90a5c83a 	sub	r18,r18,r2
   21770:	04beae0e 	bge	zero,r18,2122c <___vfprintf_internal_r+0xcd0>
   21774:	04c00404 	movi	r19,16
   21778:	d8c11c17 	ldw	r3,1136(sp)
   2177c:	050000f4 	movhi	r20,3
   21780:	a531fc84 	addi	r20,r20,-14350
   21784:	9c81dd0e 	bge	r19,r18,21efc <___vfprintf_internal_r+0x19a0>
   21788:	058001c4 	movi	r22,7
   2178c:	ddc12917 	ldw	r23,1188(sp)
   21790:	00000306 	br	217a0 <___vfprintf_internal_r+0x1244>
   21794:	4a400204 	addi	r9,r9,8
   21798:	94bffc04 	addi	r18,r18,-16
   2179c:	9c81d70e 	bge	r19,r18,21efc <___vfprintf_internal_r+0x19a0>
   217a0:	4d000015 	stw	r20,0(r9)
   217a4:	4cc00115 	stw	r19,4(r9)
   217a8:	42000404 	addi	r8,r8,16
   217ac:	18c00044 	addi	r3,r3,1
   217b0:	da011d15 	stw	r8,1140(sp)
   217b4:	d8c11c15 	stw	r3,1136(sp)
   217b8:	b0fff60e 	bge	r22,r3,21794 <___vfprintf_internal_r+0x1238>
   217bc:	8809883a 	mov	r4,r17
   217c0:	b80b883a 	mov	r5,r23
   217c4:	d9811b04 	addi	r6,sp,1132
   217c8:	00205280 	call	20528 <__sprint_r>
   217cc:	103ca91e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   217d0:	da011d17 	ldw	r8,1140(sp)
   217d4:	d8c11c17 	ldw	r3,1136(sp)
   217d8:	da400404 	addi	r9,sp,16
   217dc:	003fee06 	br	21798 <___vfprintf_internal_r+0x123c>
   217e0:	d9412917 	ldw	r5,1188(sp)
   217e4:	8809883a 	mov	r4,r17
   217e8:	d9811b04 	addi	r6,sp,1132
   217ec:	00205280 	call	20528 <__sprint_r>
   217f0:	103ca01e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   217f4:	da011d17 	ldw	r8,1140(sp)
   217f8:	d8c11c17 	ldw	r3,1136(sp)
   217fc:	da400404 	addi	r9,sp,16
   21800:	003dee06 	br	20fbc <___vfprintf_internal_r+0xa60>
   21804:	00c00084 	movi	r3,2
   21808:	bd84b03a 	or	r2,r23,r22
   2180c:	d8012585 	stb	zero,1174(sp)
   21810:	003ccb06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21814:	8080040c 	andi	r2,r16,16
   21818:	1000ae26 	beq	r2,zero,21ad4 <___vfprintf_internal_r+0x1578>
   2181c:	d9012d17 	ldw	r4,1204(sp)
   21820:	25c00017 	ldw	r23,0(r4)
   21824:	21000104 	addi	r4,r4,4
   21828:	d9012d15 	stw	r4,1204(sp)
   2182c:	b82dd7fa 	srai	r22,r23,31
   21830:	b005883a 	mov	r2,r22
   21834:	003cb906 	br	20b1c <___vfprintf_internal_r+0x5c0>
   21838:	8080040c 	andi	r2,r16,16
   2183c:	10007026 	beq	r2,zero,21a00 <___vfprintf_internal_r+0x14a4>
   21840:	d8812d17 	ldw	r2,1204(sp)
   21844:	002d883a 	mov	r22,zero
   21848:	00c00044 	movi	r3,1
   2184c:	15c00017 	ldw	r23,0(r2)
   21850:	10800104 	addi	r2,r2,4
   21854:	d8812d15 	stw	r2,1204(sp)
   21858:	d8012585 	stb	zero,1174(sp)
   2185c:	b805883a 	mov	r2,r23
   21860:	003cb706 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21864:	d8813217 	ldw	r2,1224(sp)
   21868:	14ffffc4 	addi	r19,r2,-1
   2186c:	04ff4f0e 	bge	zero,r19,215ac <___vfprintf_internal_r+0x1050>
   21870:	05800404 	movi	r22,16
   21874:	050000f4 	movhi	r20,3
   21878:	a531fc84 	addi	r20,r20,-14350
   2187c:	b4c0470e 	bge	r22,r19,2199c <___vfprintf_internal_r+0x1440>
   21880:	05c001c4 	movi	r23,7
   21884:	df012917 	ldw	fp,1188(sp)
   21888:	00000306 	br	21898 <___vfprintf_internal_r+0x133c>
   2188c:	94800204 	addi	r18,r18,8
   21890:	9cfffc04 	addi	r19,r19,-16
   21894:	b4c0410e 	bge	r22,r19,2199c <___vfprintf_internal_r+0x1440>
   21898:	95000015 	stw	r20,0(r18)
   2189c:	95800115 	stw	r22,4(r18)
   218a0:	42000404 	addi	r8,r8,16
   218a4:	18c00044 	addi	r3,r3,1
   218a8:	da011d15 	stw	r8,1140(sp)
   218ac:	d8c11c15 	stw	r3,1136(sp)
   218b0:	b8fff60e 	bge	r23,r3,2188c <___vfprintf_internal_r+0x1330>
   218b4:	8809883a 	mov	r4,r17
   218b8:	e00b883a 	mov	r5,fp
   218bc:	d9811b04 	addi	r6,sp,1132
   218c0:	00205280 	call	20528 <__sprint_r>
   218c4:	103c6b1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   218c8:	da011d17 	ldw	r8,1140(sp)
   218cc:	d8c11c17 	ldw	r3,1136(sp)
   218d0:	dc800404 	addi	r18,sp,16
   218d4:	003fee06 	br	21890 <___vfprintf_internal_r+0x1334>
   218d8:	8080040c 	andi	r2,r16,16
   218dc:	10005326 	beq	r2,zero,21a2c <___vfprintf_internal_r+0x14d0>
   218e0:	d8c12d17 	ldw	r3,1204(sp)
   218e4:	002d883a 	mov	r22,zero
   218e8:	1dc00017 	ldw	r23,0(r3)
   218ec:	18c00104 	addi	r3,r3,4
   218f0:	d8c12d15 	stw	r3,1204(sp)
   218f4:	b805883a 	mov	r2,r23
   218f8:	0007883a 	mov	r3,zero
   218fc:	d8012585 	stb	zero,1174(sp)
   21900:	003c8f06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21904:	8088703a 	and	r4,r16,r2
   21908:	203efe1e 	bne	r4,zero,21504 <___vfprintf_internal_r+0xfa8>
   2190c:	48800115 	stw	r2,4(r9)
   21910:	42000044 	addi	r8,r8,1
   21914:	18c00044 	addi	r3,r3,1
   21918:	da011d15 	stw	r8,1140(sp)
   2191c:	d8c11c15 	stw	r3,1136(sp)
   21920:	008001c4 	movi	r2,7
   21924:	10c00216 	blt	r2,r3,21930 <___vfprintf_internal_r+0x13d4>
   21928:	4c800204 	addi	r18,r9,8
   2192c:	003f1f06 	br	215ac <___vfprintf_internal_r+0x1050>
   21930:	d9412917 	ldw	r5,1188(sp)
   21934:	8809883a 	mov	r4,r17
   21938:	d9811b04 	addi	r6,sp,1132
   2193c:	00205280 	call	20528 <__sprint_r>
   21940:	103c4c1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21944:	dc800404 	addi	r18,sp,16
   21948:	da011d17 	ldw	r8,1140(sp)
   2194c:	d8c11c17 	ldw	r3,1136(sp)
   21950:	003f1606 	br	215ac <___vfprintf_internal_r+0x1050>
   21954:	d9412917 	ldw	r5,1188(sp)
   21958:	8809883a 	mov	r4,r17
   2195c:	d9811b04 	addi	r6,sp,1132
   21960:	00205280 	call	20528 <__sprint_r>
   21964:	103c431e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21968:	da011d17 	ldw	r8,1140(sp)
   2196c:	d8c11c17 	ldw	r3,1136(sp)
   21970:	da400404 	addi	r9,sp,16
   21974:	003eec06 	br	21528 <___vfprintf_internal_r+0xfcc>
   21978:	d9412917 	ldw	r5,1188(sp)
   2197c:	8809883a 	mov	r4,r17
   21980:	d9811b04 	addi	r6,sp,1132
   21984:	00205280 	call	20528 <__sprint_r>
   21988:	103c3a1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   2198c:	da011d17 	ldw	r8,1140(sp)
   21990:	d8c11c17 	ldw	r3,1136(sp)
   21994:	dc800404 	addi	r18,sp,16
   21998:	003eee06 	br	21554 <___vfprintf_internal_r+0xff8>
   2199c:	95000015 	stw	r20,0(r18)
   219a0:	94c00115 	stw	r19,4(r18)
   219a4:	44d1883a 	add	r8,r8,r19
   219a8:	003efa06 	br	21594 <___vfprintf_internal_r+0x1038>
   219ac:	d9412917 	ldw	r5,1188(sp)
   219b0:	8809883a 	mov	r4,r17
   219b4:	d9811b04 	addi	r6,sp,1132
   219b8:	00205280 	call	20528 <__sprint_r>
   219bc:	103c2d1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   219c0:	da011d17 	ldw	r8,1140(sp)
   219c4:	d8c11c17 	ldw	r3,1136(sp)
   219c8:	da400404 	addi	r9,sp,16
   219cc:	003d9806 	br	21030 <___vfprintf_internal_r+0xad4>
   219d0:	8080100c 	andi	r2,r16,64
   219d4:	10011626 	beq	r2,zero,21e30 <___vfprintf_internal_r+0x18d4>
   219d8:	d8c12d17 	ldw	r3,1204(sp)
   219dc:	002d883a 	mov	r22,zero
   219e0:	1dc0000b 	ldhu	r23,0(r3)
   219e4:	18c00104 	addi	r3,r3,4
   219e8:	d8c12d15 	stw	r3,1204(sp)
   219ec:	003cc106 	br	20cf4 <___vfprintf_internal_r+0x798>
   219f0:	4d000015 	stw	r20,0(r9)
   219f4:	4c800115 	stw	r18,4(r9)
   219f8:	4491883a 	add	r8,r8,r18
   219fc:	003dc006 	br	21100 <___vfprintf_internal_r+0xba4>
   21a00:	8080100c 	andi	r2,r16,64
   21a04:	10010126 	beq	r2,zero,21e0c <___vfprintf_internal_r+0x18b0>
   21a08:	d8c12d17 	ldw	r3,1204(sp)
   21a0c:	002d883a 	mov	r22,zero
   21a10:	1dc0000b 	ldhu	r23,0(r3)
   21a14:	18c00104 	addi	r3,r3,4
   21a18:	d8c12d15 	stw	r3,1204(sp)
   21a1c:	b805883a 	mov	r2,r23
   21a20:	00c00044 	movi	r3,1
   21a24:	d8012585 	stb	zero,1174(sp)
   21a28:	003c4506 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21a2c:	8080100c 	andi	r2,r16,64
   21a30:	10010526 	beq	r2,zero,21e48 <___vfprintf_internal_r+0x18ec>
   21a34:	d9012d17 	ldw	r4,1204(sp)
   21a38:	002d883a 	mov	r22,zero
   21a3c:	0007883a 	mov	r3,zero
   21a40:	25c0000b 	ldhu	r23,0(r4)
   21a44:	21000104 	addi	r4,r4,4
   21a48:	d9012d15 	stw	r4,1204(sp)
   21a4c:	b805883a 	mov	r2,r23
   21a50:	d8012585 	stb	zero,1174(sp)
   21a54:	003c3a06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21a58:	d8812d17 	ldw	r2,1204(sp)
   21a5c:	15800017 	ldw	r22,0(r2)
   21a60:	15000117 	ldw	r20,4(r2)
   21a64:	10800204 	addi	r2,r2,8
   21a68:	d8812d15 	stw	r2,1204(sp)
   21a6c:	dd813315 	stw	r22,1228(sp)
   21a70:	dd013415 	stw	r20,1232(sp)
   21a74:	003c5906 	br	20bdc <___vfprintf_internal_r+0x680>
   21a78:	00c00084 	movi	r3,2
   21a7c:	d8012585 	stb	zero,1174(sp)
   21a80:	003c2f06 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21a84:	ac800007 	ldb	r18,0(r21)
   21a88:	003b1006 	br	206cc <___vfprintf_internal_r+0x170>
   21a8c:	8080040c 	andi	r2,r16,16
   21a90:	1000091e 	bne	r2,zero,21ab8 <___vfprintf_internal_r+0x155c>
   21a94:	8400100c 	andi	r16,r16,64
   21a98:	80000726 	beq	r16,zero,21ab8 <___vfprintf_internal_r+0x155c>
   21a9c:	d8c12d17 	ldw	r3,1204(sp)
   21aa0:	d9012c17 	ldw	r4,1200(sp)
   21aa4:	18800017 	ldw	r2,0(r3)
   21aa8:	18c00104 	addi	r3,r3,4
   21aac:	d8c12d15 	stw	r3,1204(sp)
   21ab0:	1100000d 	sth	r4,0(r2)
   21ab4:	003adf06 	br	20634 <___vfprintf_internal_r+0xd8>
   21ab8:	d8c12d17 	ldw	r3,1204(sp)
   21abc:	d9012c17 	ldw	r4,1200(sp)
   21ac0:	18800017 	ldw	r2,0(r3)
   21ac4:	18c00104 	addi	r3,r3,4
   21ac8:	d8c12d15 	stw	r3,1204(sp)
   21acc:	11000015 	stw	r4,0(r2)
   21ad0:	003ad806 	br	20634 <___vfprintf_internal_r+0xd8>
   21ad4:	8080100c 	andi	r2,r16,64
   21ad8:	1000c526 	beq	r2,zero,21df0 <___vfprintf_internal_r+0x1894>
   21adc:	d8812d17 	ldw	r2,1204(sp)
   21ae0:	15c0000f 	ldh	r23,0(r2)
   21ae4:	10800104 	addi	r2,r2,4
   21ae8:	d8812d15 	stw	r2,1204(sp)
   21aec:	b82dd7fa 	srai	r22,r23,31
   21af0:	b005883a 	mov	r2,r22
   21af4:	003c0906 	br	20b1c <___vfprintf_internal_r+0x5c0>
   21af8:	4c800115 	stw	r18,4(r9)
   21afc:	9211883a 	add	r8,r18,r8
   21b00:	18c00044 	addi	r3,r3,1
   21b04:	da011d15 	stw	r8,1140(sp)
   21b08:	d8c11c15 	stw	r3,1136(sp)
   21b0c:	008001c4 	movi	r2,7
   21b10:	10c14016 	blt	r2,r3,22014 <___vfprintf_internal_r+0x1ab8>
   21b14:	4a400204 	addi	r9,r9,8
   21b18:	d8813717 	ldw	r2,1244(sp)
   21b1c:	9ca7883a 	add	r19,r19,r18
   21b20:	48800015 	stw	r2,0(r9)
   21b24:	00800044 	movi	r2,1
   21b28:	48800115 	stw	r2,4(r9)
   21b2c:	4091883a 	add	r8,r8,r2
   21b30:	1887883a 	add	r3,r3,r2
   21b34:	da011d15 	stw	r8,1140(sp)
   21b38:	d8c11c15 	stw	r3,1136(sp)
   21b3c:	008001c4 	movi	r2,7
   21b40:	10c12c16 	blt	r2,r3,21ff4 <___vfprintf_internal_r+0x1a98>
   21b44:	4a400204 	addi	r9,r9,8
   21b48:	d9013217 	ldw	r4,1224(sp)
   21b4c:	da011d17 	ldw	r8,1140(sp)
   21b50:	d8c11c17 	ldw	r3,1136(sp)
   21b54:	24a5c83a 	sub	r18,r4,r18
   21b58:	4cc00015 	stw	r19,0(r9)
   21b5c:	003fa506 	br	219f4 <___vfprintf_internal_r+0x1498>
   21b60:	04c000f4 	movhi	r19,3
   21b64:	9cf1e904 	addi	r19,r19,-14428
   21b68:	003c2e06 	br	20c24 <___vfprintf_internal_r+0x6c8>
   21b6c:	d9412917 	ldw	r5,1188(sp)
   21b70:	8809883a 	mov	r4,r17
   21b74:	d9811b04 	addi	r6,sp,1132
   21b78:	00205280 	call	20528 <__sprint_r>
   21b7c:	103bbd1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21b80:	da011d17 	ldw	r8,1140(sp)
   21b84:	da400404 	addi	r9,sp,16
   21b88:	003df606 	br	21364 <___vfprintf_internal_r+0xe08>
   21b8c:	008000f4 	movhi	r2,3
   21b90:	10b1f804 	addi	r2,r2,-14368
   21b94:	48800015 	stw	r2,0(r9)
   21b98:	00800044 	movi	r2,1
   21b9c:	48800115 	stw	r2,4(r9)
   21ba0:	4091883a 	add	r8,r8,r2
   21ba4:	1887883a 	add	r3,r3,r2
   21ba8:	da011d15 	stw	r8,1140(sp)
   21bac:	d8c11c15 	stw	r3,1136(sp)
   21bb0:	008001c4 	movi	r2,7
   21bb4:	10c0bc16 	blt	r2,r3,21ea8 <___vfprintf_internal_r+0x194c>
   21bb8:	4a400204 	addi	r9,r9,8
   21bbc:	9000041e 	bne	r18,zero,21bd0 <___vfprintf_internal_r+0x1674>
   21bc0:	d8c13217 	ldw	r3,1224(sp)
   21bc4:	1800021e 	bne	r3,zero,21bd0 <___vfprintf_internal_r+0x1674>
   21bc8:	8080004c 	andi	r2,r16,1
   21bcc:	103d5226 	beq	r2,zero,21118 <___vfprintf_internal_r+0xbbc>
   21bd0:	d8c11c17 	ldw	r3,1136(sp)
   21bd4:	d9013717 	ldw	r4,1244(sp)
   21bd8:	00800044 	movi	r2,1
   21bdc:	48800115 	stw	r2,4(r9)
   21be0:	49000015 	stw	r4,0(r9)
   21be4:	4091883a 	add	r8,r8,r2
   21be8:	1887883a 	add	r3,r3,r2
   21bec:	da011d15 	stw	r8,1140(sp)
   21bf0:	d8c11c15 	stw	r3,1136(sp)
   21bf4:	008001c4 	movi	r2,7
   21bf8:	10c14516 	blt	r2,r3,22110 <___vfprintf_internal_r+0x1bb4>
   21bfc:	4a400204 	addi	r9,r9,8
   21c00:	04a5c83a 	sub	r18,zero,r18
   21c04:	0480d70e 	bge	zero,r18,21f64 <___vfprintf_internal_r+0x1a08>
   21c08:	05800404 	movi	r22,16
   21c0c:	050000f4 	movhi	r20,3
   21c10:	a531fc84 	addi	r20,r20,-14350
   21c14:	b480db0e 	bge	r22,r18,21f84 <___vfprintf_internal_r+0x1a28>
   21c18:	05c001c4 	movi	r23,7
   21c1c:	df012917 	ldw	fp,1188(sp)
   21c20:	00000306 	br	21c30 <___vfprintf_internal_r+0x16d4>
   21c24:	4a400204 	addi	r9,r9,8
   21c28:	94bffc04 	addi	r18,r18,-16
   21c2c:	b480d50e 	bge	r22,r18,21f84 <___vfprintf_internal_r+0x1a28>
   21c30:	4d000015 	stw	r20,0(r9)
   21c34:	4d800115 	stw	r22,4(r9)
   21c38:	42000404 	addi	r8,r8,16
   21c3c:	18c00044 	addi	r3,r3,1
   21c40:	da011d15 	stw	r8,1140(sp)
   21c44:	d8c11c15 	stw	r3,1136(sp)
   21c48:	b8fff60e 	bge	r23,r3,21c24 <___vfprintf_internal_r+0x16c8>
   21c4c:	8809883a 	mov	r4,r17
   21c50:	e00b883a 	mov	r5,fp
   21c54:	d9811b04 	addi	r6,sp,1132
   21c58:	00205280 	call	20528 <__sprint_r>
   21c5c:	103b851e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21c60:	da011d17 	ldw	r8,1140(sp)
   21c64:	d8c11c17 	ldw	r3,1136(sp)
   21c68:	da400404 	addi	r9,sp,16
   21c6c:	003fee06 	br	21c28 <___vfprintf_internal_r+0x16cc>
   21c70:	da413c15 	stw	r9,1264(sp)
   21c74:	00272480 	call	27248 <__isnand>
   21c78:	da413c17 	ldw	r9,1264(sp)
   21c7c:	10007e1e 	bne	r2,zero,21e78 <___vfprintf_internal_r+0x191c>
   21c80:	00bfffc4 	movi	r2,-1
   21c84:	e0816a26 	beq	fp,r2,22230 <___vfprintf_internal_r+0x1cd4>
   21c88:	008019c4 	movi	r2,103
   21c8c:	90816526 	beq	r18,r2,22224 <___vfprintf_internal_r+0x1cc8>
   21c90:	008011c4 	movi	r2,71
   21c94:	90816326 	beq	r18,r2,22224 <___vfprintf_internal_r+0x1cc8>
   21c98:	80c04014 	ori	r3,r16,256
   21c9c:	d8c12a15 	stw	r3,1192(sp)
   21ca0:	a0016516 	blt	r20,zero,22238 <___vfprintf_internal_r+0x1cdc>
   21ca4:	d8012f05 	stb	zero,1212(sp)
   21ca8:	00801984 	movi	r2,102
   21cac:	9080f226 	beq	r18,r2,22078 <___vfprintf_internal_r+0x1b1c>
   21cb0:	00801184 	movi	r2,70
   21cb4:	9080f026 	beq	r18,r2,22078 <___vfprintf_internal_r+0x1b1c>
   21cb8:	00801944 	movi	r2,101
   21cbc:	90818d26 	beq	r18,r2,222f4 <___vfprintf_internal_r+0x1d98>
   21cc0:	00801144 	movi	r2,69
   21cc4:	90818b26 	beq	r18,r2,222f4 <___vfprintf_internal_r+0x1d98>
   21cc8:	e02f883a 	mov	r23,fp
   21ccc:	d8812404 	addi	r2,sp,1168
   21cd0:	d8800115 	stw	r2,4(sp)
   21cd4:	d8812304 	addi	r2,sp,1164
   21cd8:	d8800215 	stw	r2,8(sp)
   21cdc:	d8812204 	addi	r2,sp,1160
   21ce0:	ddc00015 	stw	r23,0(sp)
   21ce4:	d8800315 	stw	r2,12(sp)
   21ce8:	8809883a 	mov	r4,r17
   21cec:	b00b883a 	mov	r5,r22
   21cf0:	a00d883a 	mov	r6,r20
   21cf4:	01c00084 	movi	r7,2
   21cf8:	da413c15 	stw	r9,1264(sp)
   21cfc:	00227ac0 	call	227ac <_dtoa_r>
   21d00:	1027883a 	mov	r19,r2
   21d04:	008019c4 	movi	r2,103
   21d08:	da413c17 	ldw	r9,1264(sp)
   21d0c:	9081951e 	bne	r18,r2,22364 <___vfprintf_internal_r+0x1e08>
   21d10:	8080004c 	andi	r2,r16,1
   21d14:	10017926 	beq	r2,zero,222fc <___vfprintf_internal_r+0x1da0>
   21d18:	00801184 	movi	r2,70
   21d1c:	9dc7883a 	add	r3,r19,r23
   21d20:	9080e626 	beq	r18,r2,220bc <___vfprintf_internal_r+0x1b60>
   21d24:	b009883a 	mov	r4,r22
   21d28:	a00b883a 	mov	r5,r20
   21d2c:	000d883a 	mov	r6,zero
   21d30:	000f883a 	mov	r7,zero
   21d34:	d8c13b15 	stw	r3,1260(sp)
   21d38:	da413c15 	stw	r9,1264(sp)
   21d3c:	0028e640 	call	28e64 <__eqdf2>
   21d40:	d8c13b17 	ldw	r3,1260(sp)
   21d44:	da413c17 	ldw	r9,1264(sp)
   21d48:	10000726 	beq	r2,zero,21d68 <___vfprintf_internal_r+0x180c>
   21d4c:	d8812217 	ldw	r2,1160(sp)
   21d50:	10c18a2e 	bgeu	r2,r3,2237c <___vfprintf_internal_r+0x1e20>
   21d54:	01000c04 	movi	r4,48
   21d58:	11000005 	stb	r4,0(r2)
   21d5c:	10800044 	addi	r2,r2,1
   21d60:	d8812215 	stw	r2,1160(sp)
   21d64:	10fffc1e 	bne	r2,r3,21d58 <___vfprintf_internal_r+0x17fc>
   21d68:	1cc7c83a 	sub	r3,r3,r19
   21d6c:	d8c13215 	stw	r3,1224(sp)
   21d70:	008019c4 	movi	r2,103
   21d74:	9080fa26 	beq	r18,r2,22160 <___vfprintf_internal_r+0x1c04>
   21d78:	008011c4 	movi	r2,71
   21d7c:	9080f826 	beq	r18,r2,22160 <___vfprintf_internal_r+0x1c04>
   21d80:	00801984 	movi	r2,102
   21d84:	90818e1e 	bne	r18,r2,223c0 <___vfprintf_internal_r+0x1e64>
   21d88:	d8812417 	ldw	r2,1168(sp)
   21d8c:	d8812b15 	stw	r2,1196(sp)
   21d90:	00817c0e 	bge	zero,r2,22384 <___vfprintf_internal_r+0x1e28>
   21d94:	e000021e 	bne	fp,zero,21da0 <___vfprintf_internal_r+0x1844>
   21d98:	8400004c 	andi	r16,r16,1
   21d9c:	80000426 	beq	r16,zero,21db0 <___vfprintf_internal_r+0x1854>
   21da0:	d8812b17 	ldw	r2,1196(sp)
   21da4:	e2000044 	addi	r8,fp,1
   21da8:	1205883a 	add	r2,r2,r8
   21dac:	d8812b15 	stw	r2,1196(sp)
   21db0:	d8812815 	stw	r2,1184(sp)
   21db4:	10010b16 	blt	r2,zero,221e4 <___vfprintf_internal_r+0x1c88>
   21db8:	ddc12f07 	ldb	r23,1212(sp)
   21dbc:	b800e426 	beq	r23,zero,22150 <___vfprintf_internal_r+0x1bf4>
   21dc0:	00800b44 	movi	r2,45
   21dc4:	d8812585 	stb	r2,1174(sp)
   21dc8:	dc012a17 	ldw	r16,1192(sp)
   21dcc:	d8013115 	stw	zero,1220(sp)
   21dd0:	003b7306 	br	20ba0 <___vfprintf_internal_r+0x644>
   21dd4:	d8812b17 	ldw	r2,1196(sp)
   21dd8:	d8812815 	stw	r2,1184(sp)
   21ddc:	10005716 	blt	r2,zero,21f3c <___vfprintf_internal_r+0x19e0>
   21de0:	d8812583 	ldbu	r2,1174(sp)
   21de4:	ddc12d15 	stw	r23,1204(sp)
   21de8:	d8013115 	stw	zero,1220(sp)
   21dec:	003b6806 	br	20b90 <___vfprintf_internal_r+0x634>
   21df0:	d8c12d17 	ldw	r3,1204(sp)
   21df4:	1dc00017 	ldw	r23,0(r3)
   21df8:	18c00104 	addi	r3,r3,4
   21dfc:	d8c12d15 	stw	r3,1204(sp)
   21e00:	b82dd7fa 	srai	r22,r23,31
   21e04:	b005883a 	mov	r2,r22
   21e08:	003b4406 	br	20b1c <___vfprintf_internal_r+0x5c0>
   21e0c:	d9012d17 	ldw	r4,1204(sp)
   21e10:	002d883a 	mov	r22,zero
   21e14:	00c00044 	movi	r3,1
   21e18:	25c00017 	ldw	r23,0(r4)
   21e1c:	21000104 	addi	r4,r4,4
   21e20:	d9012d15 	stw	r4,1204(sp)
   21e24:	b805883a 	mov	r2,r23
   21e28:	d8012585 	stb	zero,1174(sp)
   21e2c:	003b4406 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21e30:	d9012d17 	ldw	r4,1204(sp)
   21e34:	002d883a 	mov	r22,zero
   21e38:	25c00017 	ldw	r23,0(r4)
   21e3c:	21000104 	addi	r4,r4,4
   21e40:	d9012d15 	stw	r4,1204(sp)
   21e44:	003bab06 	br	20cf4 <___vfprintf_internal_r+0x798>
   21e48:	d8812d17 	ldw	r2,1204(sp)
   21e4c:	002d883a 	mov	r22,zero
   21e50:	0007883a 	mov	r3,zero
   21e54:	15c00017 	ldw	r23,0(r2)
   21e58:	10800104 	addi	r2,r2,4
   21e5c:	d8812d15 	stw	r2,1204(sp)
   21e60:	d8012585 	stb	zero,1174(sp)
   21e64:	b805883a 	mov	r2,r23
   21e68:	003b3506 	br	20b40 <___vfprintf_internal_r+0x5e4>
   21e6c:	00ffffc4 	movi	r3,-1
   21e70:	b82b883a 	mov	r21,r23
   21e74:	003a1606 	br	206d0 <___vfprintf_internal_r+0x174>
   21e78:	008011c4 	movi	r2,71
   21e7c:	1480b116 	blt	r2,r18,22144 <___vfprintf_internal_r+0x1be8>
   21e80:	04c000f4 	movhi	r19,3
   21e84:	9cf1ea04 	addi	r19,r19,-14424
   21e88:	00c000c4 	movi	r3,3
   21e8c:	00bfdfc4 	movi	r2,-129
   21e90:	80a0703a 	and	r16,r16,r2
   21e94:	d8c12815 	stw	r3,1184(sp)
   21e98:	d8812583 	ldbu	r2,1174(sp)
   21e9c:	d8c12b15 	stw	r3,1196(sp)
   21ea0:	d8013115 	stw	zero,1220(sp)
   21ea4:	003b3a06 	br	20b90 <___vfprintf_internal_r+0x634>
   21ea8:	d9412917 	ldw	r5,1188(sp)
   21eac:	8809883a 	mov	r4,r17
   21eb0:	d9811b04 	addi	r6,sp,1132
   21eb4:	00205280 	call	20528 <__sprint_r>
   21eb8:	103aee1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21ebc:	dc812417 	ldw	r18,1168(sp)
   21ec0:	da011d17 	ldw	r8,1140(sp)
   21ec4:	da400404 	addi	r9,sp,16
   21ec8:	003f3c06 	br	21bbc <___vfprintf_internal_r+0x1660>
   21ecc:	ad400044 	addi	r21,r21,1
   21ed0:	84000814 	ori	r16,r16,32
   21ed4:	14800047 	ldb	r18,1(r2)
   21ed8:	0039fc06 	br	206cc <___vfprintf_internal_r+0x170>
   21edc:	d9412917 	ldw	r5,1188(sp)
   21ee0:	8809883a 	mov	r4,r17
   21ee4:	d9811b04 	addi	r6,sp,1132
   21ee8:	00205280 	call	20528 <__sprint_r>
   21eec:	103ae11e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21ef0:	da011d17 	ldw	r8,1140(sp)
   21ef4:	da400404 	addi	r9,sp,16
   21ef8:	003d2b06 	br	213a8 <___vfprintf_internal_r+0xe4c>
   21efc:	4d000015 	stw	r20,0(r9)
   21f00:	4c800115 	stw	r18,4(r9)
   21f04:	4491883a 	add	r8,r8,r18
   21f08:	18c00044 	addi	r3,r3,1
   21f0c:	da011d15 	stw	r8,1140(sp)
   21f10:	d8c11c15 	stw	r3,1136(sp)
   21f14:	008001c4 	movi	r2,7
   21f18:	10fcbd16 	blt	r2,r3,21210 <___vfprintf_internal_r+0xcb4>
   21f1c:	4a400204 	addi	r9,r9,8
   21f20:	003cc206 	br	2122c <___vfprintf_internal_r+0xcd0>
   21f24:	da413c15 	stw	r9,1264(sp)
   21f28:	002049c0 	call	2049c <strlen>
   21f2c:	d8812b15 	stw	r2,1196(sp)
   21f30:	d8812815 	stw	r2,1184(sp)
   21f34:	da413c17 	ldw	r9,1264(sp)
   21f38:	103fa90e 	bge	r2,zero,21de0 <___vfprintf_internal_r+0x1884>
   21f3c:	d8012815 	stw	zero,1184(sp)
   21f40:	003fa706 	br	21de0 <___vfprintf_internal_r+0x1884>
   21f44:	d9412917 	ldw	r5,1188(sp)
   21f48:	8809883a 	mov	r4,r17
   21f4c:	d9811b04 	addi	r6,sp,1132
   21f50:	00205280 	call	20528 <__sprint_r>
   21f54:	103ac71e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   21f58:	da011d17 	ldw	r8,1140(sp)
   21f5c:	d8c11c17 	ldw	r3,1136(sp)
   21f60:	da400404 	addi	r9,sp,16
   21f64:	d8813217 	ldw	r2,1224(sp)
   21f68:	4cc00015 	stw	r19,0(r9)
   21f6c:	48800115 	stw	r2,4(r9)
   21f70:	4091883a 	add	r8,r8,r2
   21f74:	003c6206 	br	21100 <___vfprintf_internal_r+0xba4>
   21f78:	00800b44 	movi	r2,45
   21f7c:	d8812585 	stb	r2,1174(sp)
   21f80:	003b2406 	br	20c14 <___vfprintf_internal_r+0x6b8>
   21f84:	4d000015 	stw	r20,0(r9)
   21f88:	4c800115 	stw	r18,4(r9)
   21f8c:	4491883a 	add	r8,r8,r18
   21f90:	18c00044 	addi	r3,r3,1
   21f94:	da011d15 	stw	r8,1140(sp)
   21f98:	d8c11c15 	stw	r3,1136(sp)
   21f9c:	008001c4 	movi	r2,7
   21fa0:	10ffe816 	blt	r2,r3,21f44 <___vfprintf_internal_r+0x19e8>
   21fa4:	4a400204 	addi	r9,r9,8
   21fa8:	003fee06 	br	21f64 <___vfprintf_internal_r+0x1a08>
   21fac:	d8c12b15 	stw	r3,1196(sp)
   21fb0:	00800184 	movi	r2,6
   21fb4:	10c0062e 	bgeu	r2,r3,21fd0 <___vfprintf_internal_r+0x1a74>
   21fb8:	d8812b15 	stw	r2,1196(sp)
   21fbc:	d8812815 	stw	r2,1184(sp)
   21fc0:	ddc12d15 	stw	r23,1204(sp)
   21fc4:	04c000f4 	movhi	r19,3
   21fc8:	9cf1f604 	addi	r19,r19,-14376
   21fcc:	0039ca06 	br	206f8 <___vfprintf_internal_r+0x19c>
   21fd0:	d8812b17 	ldw	r2,1196(sp)
   21fd4:	d8812815 	stw	r2,1184(sp)
   21fd8:	103ff90e 	bge	r2,zero,21fc0 <___vfprintf_internal_r+0x1a64>
   21fdc:	d8012815 	stw	zero,1184(sp)
   21fe0:	003ff706 	br	21fc0 <___vfprintf_internal_r+0x1a64>
   21fe4:	00800244 	movi	r2,9
   21fe8:	15fdaa36 	bltu	r2,r23,21694 <___vfprintf_internal_r+0x1138>
   21fec:	dd010e04 	addi	r20,sp,1080
   21ff0:	003dc606 	br	2170c <___vfprintf_internal_r+0x11b0>
   21ff4:	d9412917 	ldw	r5,1188(sp)
   21ff8:	8809883a 	mov	r4,r17
   21ffc:	d9811b04 	addi	r6,sp,1132
   22000:	00205280 	call	20528 <__sprint_r>
   22004:	103a9b1e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   22008:	dc812417 	ldw	r18,1168(sp)
   2200c:	da400404 	addi	r9,sp,16
   22010:	003ecd06 	br	21b48 <___vfprintf_internal_r+0x15ec>
   22014:	d9412917 	ldw	r5,1188(sp)
   22018:	8809883a 	mov	r4,r17
   2201c:	d9811b04 	addi	r6,sp,1132
   22020:	00205280 	call	20528 <__sprint_r>
   22024:	103a931e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   22028:	dc812417 	ldw	r18,1168(sp)
   2202c:	da011d17 	ldw	r8,1140(sp)
   22030:	d8c11c17 	ldw	r3,1136(sp)
   22034:	da400404 	addi	r9,sp,16
   22038:	003eb706 	br	21b18 <___vfprintf_internal_r+0x15bc>
   2203c:	d9412917 	ldw	r5,1188(sp)
   22040:	8809883a 	mov	r4,r17
   22044:	d9811b04 	addi	r6,sp,1132
   22048:	00205280 	call	20528 <__sprint_r>
   2204c:	103a891e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   22050:	dc812417 	ldw	r18,1168(sp)
   22054:	da011d17 	ldw	r8,1140(sp)
   22058:	da400404 	addi	r9,sp,16
   2205c:	003dc206 	br	21768 <___vfprintf_internal_r+0x120c>
   22060:	df012815 	stw	fp,1184(sp)
   22064:	d8812583 	ldbu	r2,1174(sp)
   22068:	df012b15 	stw	fp,1196(sp)
   2206c:	ddc12d15 	stw	r23,1204(sp)
   22070:	d8013115 	stw	zero,1220(sp)
   22074:	003ac606 	br	20b90 <___vfprintf_internal_r+0x634>
   22078:	d8812404 	addi	r2,sp,1168
   2207c:	d8800115 	stw	r2,4(sp)
   22080:	d8812304 	addi	r2,sp,1164
   22084:	d8800215 	stw	r2,8(sp)
   22088:	d8812204 	addi	r2,sp,1160
   2208c:	df000015 	stw	fp,0(sp)
   22090:	d8800315 	stw	r2,12(sp)
   22094:	8809883a 	mov	r4,r17
   22098:	b00b883a 	mov	r5,r22
   2209c:	a00d883a 	mov	r6,r20
   220a0:	01c000c4 	movi	r7,3
   220a4:	da413c15 	stw	r9,1264(sp)
   220a8:	00227ac0 	call	227ac <_dtoa_r>
   220ac:	da413c17 	ldw	r9,1264(sp)
   220b0:	1027883a 	mov	r19,r2
   220b4:	1707883a 	add	r3,r2,fp
   220b8:	e02f883a 	mov	r23,fp
   220bc:	99000007 	ldb	r4,0(r19)
   220c0:	00800c04 	movi	r2,48
   220c4:	20800326 	beq	r4,r2,220d4 <___vfprintf_internal_r+0x1b78>
   220c8:	da812417 	ldw	r10,1168(sp)
   220cc:	1a87883a 	add	r3,r3,r10
   220d0:	003f1406 	br	21d24 <___vfprintf_internal_r+0x17c8>
   220d4:	b009883a 	mov	r4,r22
   220d8:	a00b883a 	mov	r5,r20
   220dc:	000d883a 	mov	r6,zero
   220e0:	000f883a 	mov	r7,zero
   220e4:	d8c13b15 	stw	r3,1260(sp)
   220e8:	da413c15 	stw	r9,1264(sp)
   220ec:	0028ec00 	call	28ec0 <__nedf2>
   220f0:	d8c13b17 	ldw	r3,1260(sp)
   220f4:	da413c17 	ldw	r9,1264(sp)
   220f8:	103ff326 	beq	r2,zero,220c8 <___vfprintf_internal_r+0x1b6c>
   220fc:	00800044 	movi	r2,1
   22100:	15d5c83a 	sub	r10,r2,r23
   22104:	da812415 	stw	r10,1168(sp)
   22108:	1a87883a 	add	r3,r3,r10
   2210c:	003f0506 	br	21d24 <___vfprintf_internal_r+0x17c8>
   22110:	d9412917 	ldw	r5,1188(sp)
   22114:	8809883a 	mov	r4,r17
   22118:	d9811b04 	addi	r6,sp,1132
   2211c:	00205280 	call	20528 <__sprint_r>
   22120:	103a541e 	bne	r2,zero,20a74 <___vfprintf_internal_r+0x518>
   22124:	dc812417 	ldw	r18,1168(sp)
   22128:	da011d17 	ldw	r8,1140(sp)
   2212c:	d8c11c17 	ldw	r3,1136(sp)
   22130:	da400404 	addi	r9,sp,16
   22134:	003eb206 	br	21c00 <___vfprintf_internal_r+0x16a4>
   22138:	b82b883a 	mov	r21,r23
   2213c:	0007883a 	mov	r3,zero
   22140:	00396306 	br	206d0 <___vfprintf_internal_r+0x174>
   22144:	04c000f4 	movhi	r19,3
   22148:	9cf1eb04 	addi	r19,r19,-14420
   2214c:	003f4e06 	br	21e88 <___vfprintf_internal_r+0x192c>
   22150:	d8812583 	ldbu	r2,1174(sp)
   22154:	dc012a17 	ldw	r16,1192(sp)
   22158:	d8013115 	stw	zero,1220(sp)
   2215c:	003a8c06 	br	20b90 <___vfprintf_internal_r+0x634>
   22160:	d8812417 	ldw	r2,1168(sp)
   22164:	d8812b15 	stw	r2,1196(sp)
   22168:	1029883a 	mov	r20,r2
   2216c:	00bfff44 	movi	r2,-3
   22170:	a0800116 	blt	r20,r2,22178 <___vfprintf_internal_r+0x1c1c>
   22174:	e5001d0e 	bge	fp,r20,221ec <___vfprintf_internal_r+0x1c90>
   22178:	94bfff84 	addi	r18,r18,-2
   2217c:	a53fffc4 	addi	r20,r20,-1
   22180:	dd012415 	stw	r20,1168(sp)
   22184:	dc811fc5 	stb	r18,1151(sp)
   22188:	a0007216 	blt	r20,zero,22354 <___vfprintf_internal_r+0x1df8>
   2218c:	00800ac4 	movi	r2,43
   22190:	d8812005 	stb	r2,1152(sp)
   22194:	00800244 	movi	r2,9
   22198:	15003516 	blt	r2,r20,22270 <___vfprintf_internal_r+0x1d14>
   2219c:	00800c04 	movi	r2,48
   221a0:	a5000c04 	addi	r20,r20,48
   221a4:	d8812045 	stb	r2,1153(sp)
   221a8:	dd012085 	stb	r20,1154(sp)
   221ac:	d8c120c4 	addi	r3,sp,1155
   221b0:	d8811fc4 	addi	r2,sp,1151
   221b4:	1885c83a 	sub	r2,r3,r2
   221b8:	d8c13217 	ldw	r3,1224(sp)
   221bc:	d8813515 	stw	r2,1236(sp)
   221c0:	1885883a 	add	r2,r3,r2
   221c4:	d8812b15 	stw	r2,1196(sp)
   221c8:	00800044 	movi	r2,1
   221cc:	10c0580e 	bge	r2,r3,22330 <___vfprintf_internal_r+0x1dd4>
   221d0:	d8812b17 	ldw	r2,1196(sp)
   221d4:	10800044 	addi	r2,r2,1
   221d8:	d8812b15 	stw	r2,1196(sp)
   221dc:	d8812815 	stw	r2,1184(sp)
   221e0:	103ef50e 	bge	r2,zero,21db8 <___vfprintf_internal_r+0x185c>
   221e4:	d8012815 	stw	zero,1184(sp)
   221e8:	003ef306 	br	21db8 <___vfprintf_internal_r+0x185c>
   221ec:	d8812b17 	ldw	r2,1196(sp)
   221f0:	d8c13217 	ldw	r3,1224(sp)
   221f4:	10c01416 	blt	r2,r3,22248 <___vfprintf_internal_r+0x1cec>
   221f8:	8400004c 	andi	r16,r16,1
   221fc:	80000326 	beq	r16,zero,2220c <___vfprintf_internal_r+0x1cb0>
   22200:	d8812b17 	ldw	r2,1196(sp)
   22204:	10800044 	addi	r2,r2,1
   22208:	d8812b15 	stw	r2,1196(sp)
   2220c:	d8812815 	stw	r2,1184(sp)
   22210:	10001416 	blt	r2,zero,22264 <___vfprintf_internal_r+0x1d08>
   22214:	048019c4 	movi	r18,103
   22218:	003ee706 	br	21db8 <___vfprintf_internal_r+0x185c>
   2221c:	d8012815 	stw	zero,1184(sp)
   22220:	003b1a06 	br	20e8c <___vfprintf_internal_r+0x930>
   22224:	e03e9c1e 	bne	fp,zero,21c98 <___vfprintf_internal_r+0x173c>
   22228:	07000044 	movi	fp,1
   2222c:	003e9a06 	br	21c98 <___vfprintf_internal_r+0x173c>
   22230:	07000184 	movi	fp,6
   22234:	003e9806 	br	21c98 <___vfprintf_internal_r+0x173c>
   22238:	00c00b44 	movi	r3,45
   2223c:	a520003c 	xorhi	r20,r20,32768
   22240:	d8c12f05 	stb	r3,1212(sp)
   22244:	003e9806 	br	21ca8 <___vfprintf_internal_r+0x174c>
   22248:	05003f0e 	bge	zero,r20,22348 <___vfprintf_internal_r+0x1dec>
   2224c:	05000044 	movi	r20,1
   22250:	d8c13217 	ldw	r3,1224(sp)
   22254:	a0e9883a 	add	r20,r20,r3
   22258:	dd012b15 	stw	r20,1196(sp)
   2225c:	dd012815 	stw	r20,1184(sp)
   22260:	a03fec0e 	bge	r20,zero,22214 <___vfprintf_internal_r+0x1cb8>
   22264:	d8012815 	stw	zero,1184(sp)
   22268:	048019c4 	movi	r18,103
   2226c:	003ed206 	br	21db8 <___vfprintf_internal_r+0x185c>
   22270:	d8c11f84 	addi	r3,sp,1150
   22274:	102f883a 	mov	r23,r2
   22278:	4839883a 	mov	fp,r9
   2227c:	a009883a 	mov	r4,r20
   22280:	01400284 	movi	r5,10
   22284:	182d883a 	mov	r22,r3
   22288:	00293c80 	call	293c8 <__modsi3>
   2228c:	10800c04 	addi	r2,r2,48
   22290:	a009883a 	mov	r4,r20
   22294:	b0800005 	stb	r2,0(r22)
   22298:	01400284 	movi	r5,10
   2229c:	00293780 	call	29378 <__divsi3>
   222a0:	1029883a 	mov	r20,r2
   222a4:	b0ffffc4 	addi	r3,r22,-1
   222a8:	b8bff416 	blt	r23,r2,2227c <___vfprintf_internal_r+0x1d20>
   222ac:	11400c04 	addi	r5,r2,48
   222b0:	b17fffc5 	stb	r5,-1(r22)
   222b4:	d8811fc4 	addi	r2,sp,1151
   222b8:	e013883a 	mov	r9,fp
   222bc:	18803e2e 	bgeu	r3,r2,223b8 <___vfprintf_internal_r+0x1e5c>
   222c0:	b007883a 	mov	r3,r22
   222c4:	d9012044 	addi	r4,sp,1153
   222c8:	00000206 	br	222d4 <___vfprintf_internal_r+0x1d78>
   222cc:	19400003 	ldbu	r5,0(r3)
   222d0:	18c00044 	addi	r3,r3,1
   222d4:	21400005 	stb	r5,0(r4)
   222d8:	21000044 	addi	r4,r4,1
   222dc:	10fffb1e 	bne	r2,r3,222cc <___vfprintf_internal_r+0x1d70>
   222e0:	d8c12004 	addi	r3,sp,1152
   222e4:	1d87c83a 	sub	r3,r3,r22
   222e8:	d9012044 	addi	r4,sp,1153
   222ec:	20c7883a 	add	r3,r4,r3
   222f0:	003fb006 	br	221b4 <___vfprintf_internal_r+0x1c58>
   222f4:	e5c00044 	addi	r23,fp,1
   222f8:	003e7406 	br	21ccc <___vfprintf_internal_r+0x1770>
   222fc:	d8c12217 	ldw	r3,1160(sp)
   22300:	003e9906 	br	21d68 <___vfprintf_internal_r+0x180c>
   22304:	d9012d17 	ldw	r4,1204(sp)
   22308:	ac800043 	ldbu	r18,1(r21)
   2230c:	b82b883a 	mov	r21,r23
   22310:	20c00017 	ldw	r3,0(r4)
   22314:	20800104 	addi	r2,r4,4
   22318:	d8812d15 	stw	r2,1204(sp)
   2231c:	18002116 	blt	r3,zero,223a4 <___vfprintf_internal_r+0x1e48>
   22320:	94803fcc 	andi	r18,r18,255
   22324:	9480201c 	xori	r18,r18,128
   22328:	94bfe004 	addi	r18,r18,-128
   2232c:	0038e706 	br	206cc <___vfprintf_internal_r+0x170>
   22330:	80a0703a 	and	r16,r16,r2
   22334:	803fa61e 	bne	r16,zero,221d0 <___vfprintf_internal_r+0x1c74>
   22338:	d8812b17 	ldw	r2,1196(sp)
   2233c:	d8812815 	stw	r2,1184(sp)
   22340:	103e9d0e 	bge	r2,zero,21db8 <___vfprintf_internal_r+0x185c>
   22344:	003fa706 	br	221e4 <___vfprintf_internal_r+0x1c88>
   22348:	00800084 	movi	r2,2
   2234c:	1529c83a 	sub	r20,r2,r20
   22350:	003fbf06 	br	22250 <___vfprintf_internal_r+0x1cf4>
   22354:	00800b44 	movi	r2,45
   22358:	0529c83a 	sub	r20,zero,r20
   2235c:	d8812005 	stb	r2,1152(sp)
   22360:	003f8c06 	br	22194 <___vfprintf_internal_r+0x1c38>
   22364:	008011c4 	movi	r2,71
   22368:	90be6926 	beq	r18,r2,21d10 <___vfprintf_internal_r+0x17b4>
   2236c:	003e6a06 	br	21d18 <___vfprintf_internal_r+0x17bc>
   22370:	00bfffc4 	movi	r2,-1
   22374:	d8812c15 	stw	r2,1200(sp)
   22378:	0039ad06 	br	20a30 <___vfprintf_internal_r+0x4d4>
   2237c:	1007883a 	mov	r3,r2
   22380:	003e7906 	br	21d68 <___vfprintf_internal_r+0x180c>
   22384:	e000021e 	bne	fp,zero,22390 <___vfprintf_internal_r+0x1e34>
   22388:	8400004c 	andi	r16,r16,1
   2238c:	80000e26 	beq	r16,zero,223c8 <___vfprintf_internal_r+0x1e6c>
   22390:	e7000084 	addi	fp,fp,2
   22394:	df012b15 	stw	fp,1196(sp)
   22398:	df012815 	stw	fp,1184(sp)
   2239c:	e03e860e 	bge	fp,zero,21db8 <___vfprintf_internal_r+0x185c>
   223a0:	003f9006 	br	221e4 <___vfprintf_internal_r+0x1c88>
   223a4:	94803fcc 	andi	r18,r18,255
   223a8:	9480201c 	xori	r18,r18,128
   223ac:	00ffffc4 	movi	r3,-1
   223b0:	94bfe004 	addi	r18,r18,-128
   223b4:	0038c506 	br	206cc <___vfprintf_internal_r+0x170>
   223b8:	d8c12044 	addi	r3,sp,1153
   223bc:	003f7d06 	br	221b4 <___vfprintf_internal_r+0x1c58>
   223c0:	dd012417 	ldw	r20,1168(sp)
   223c4:	003f6d06 	br	2217c <___vfprintf_internal_r+0x1c20>
   223c8:	00c00044 	movi	r3,1
   223cc:	d8c12815 	stw	r3,1184(sp)
   223d0:	d8c12b15 	stw	r3,1196(sp)
   223d4:	003e7806 	br	21db8 <___vfprintf_internal_r+0x185c>

000223d8 <__vfprintf_internal>:
   223d8:	008000f4 	movhi	r2,3
   223dc:	10b93904 	addi	r2,r2,-6940
   223e0:	2007883a 	mov	r3,r4
   223e4:	11000017 	ldw	r4,0(r2)
   223e8:	2805883a 	mov	r2,r5
   223ec:	300f883a 	mov	r7,r6
   223f0:	180b883a 	mov	r5,r3
   223f4:	100d883a 	mov	r6,r2
   223f8:	002055c1 	jmpi	2055c <___vfprintf_internal_r>

000223fc <__swsetup_r>:
   223fc:	008000f4 	movhi	r2,3
   22400:	10b93904 	addi	r2,r2,-6940
   22404:	10800017 	ldw	r2,0(r2)
   22408:	defffd04 	addi	sp,sp,-12
   2240c:	dc400115 	stw	r17,4(sp)
   22410:	dc000015 	stw	r16,0(sp)
   22414:	dfc00215 	stw	ra,8(sp)
   22418:	2023883a 	mov	r17,r4
   2241c:	2821883a 	mov	r16,r5
   22420:	10000226 	beq	r2,zero,2242c <__swsetup_r+0x30>
   22424:	10c00e17 	ldw	r3,56(r2)
   22428:	18003d26 	beq	r3,zero,22520 <__swsetup_r+0x124>
   2242c:	8080030b 	ldhu	r2,12(r16)
   22430:	10c0020c 	andi	r3,r2,8
   22434:	18ffffcc 	andi	r3,r3,65535
   22438:	18e0001c 	xori	r3,r3,32768
   2243c:	18e00004 	addi	r3,r3,-32768
   22440:	18001226 	beq	r3,zero,2248c <__swsetup_r+0x90>
   22444:	80c00417 	ldw	r3,16(r16)
   22448:	18001f26 	beq	r3,zero,224c8 <__swsetup_r+0xcc>
   2244c:	1100004c 	andi	r4,r2,1
   22450:	2000261e 	bne	r4,zero,224ec <__swsetup_r+0xf0>
   22454:	1080008c 	andi	r2,r2,2
   22458:	10bfffcc 	andi	r2,r2,65535
   2245c:	10a0001c 	xori	r2,r2,32768
   22460:	10a00004 	addi	r2,r2,-32768
   22464:	1000311e 	bne	r2,zero,2252c <__swsetup_r+0x130>
   22468:	80800517 	ldw	r2,20(r16)
   2246c:	80800215 	stw	r2,8(r16)
   22470:	18002326 	beq	r3,zero,22500 <__swsetup_r+0x104>
   22474:	0005883a 	mov	r2,zero
   22478:	dfc00217 	ldw	ra,8(sp)
   2247c:	dc400117 	ldw	r17,4(sp)
   22480:	dc000017 	ldw	r16,0(sp)
   22484:	dec00304 	addi	sp,sp,12
   22488:	f800283a 	ret
   2248c:	10c0040c 	andi	r3,r2,16
   22490:	18ffffcc 	andi	r3,r3,65535
   22494:	18e0001c 	xori	r3,r3,32768
   22498:	18e00004 	addi	r3,r3,-32768
   2249c:	18001e26 	beq	r3,zero,22518 <__swsetup_r+0x11c>
   224a0:	10c0010c 	andi	r3,r2,4
   224a4:	18ffffcc 	andi	r3,r3,65535
   224a8:	18e0001c 	xori	r3,r3,32768
   224ac:	18e00004 	addi	r3,r3,-32768
   224b0:	1800211e 	bne	r3,zero,22538 <__swsetup_r+0x13c>
   224b4:	80c00417 	ldw	r3,16(r16)
   224b8:	11400214 	ori	r5,r2,8
   224bc:	8140030d 	sth	r5,12(r16)
   224c0:	2805883a 	mov	r2,r5
   224c4:	183fe11e 	bne	r3,zero,2244c <__swsetup_r+0x50>
   224c8:	1140a00c 	andi	r5,r2,640
   224cc:	01008004 	movi	r4,512
   224d0:	293fde26 	beq	r5,r4,2244c <__swsetup_r+0x50>
   224d4:	8809883a 	mov	r4,r17
   224d8:	800b883a 	mov	r5,r16
   224dc:	0024df80 	call	24df8 <__smakebuf_r>
   224e0:	8080030b 	ldhu	r2,12(r16)
   224e4:	80c00417 	ldw	r3,16(r16)
   224e8:	003fd806 	br	2244c <__swsetup_r+0x50>
   224ec:	80800517 	ldw	r2,20(r16)
   224f0:	80000215 	stw	zero,8(r16)
   224f4:	0085c83a 	sub	r2,zero,r2
   224f8:	80800615 	stw	r2,24(r16)
   224fc:	183fdd1e 	bne	r3,zero,22474 <__swsetup_r+0x78>
   22500:	8080030b 	ldhu	r2,12(r16)
   22504:	1080200c 	andi	r2,r2,128
   22508:	10bfffcc 	andi	r2,r2,65535
   2250c:	10a0001c 	xori	r2,r2,32768
   22510:	10a00004 	addi	r2,r2,-32768
   22514:	103fd826 	beq	r2,zero,22478 <__swsetup_r+0x7c>
   22518:	00bfffc4 	movi	r2,-1
   2251c:	003fd606 	br	22478 <__swsetup_r+0x7c>
   22520:	1009883a 	mov	r4,r2
   22524:	00240840 	call	24084 <__sinit>
   22528:	003fc006 	br	2242c <__swsetup_r+0x30>
   2252c:	0005883a 	mov	r2,zero
   22530:	80800215 	stw	r2,8(r16)
   22534:	003fce06 	br	22470 <__swsetup_r+0x74>
   22538:	81400c17 	ldw	r5,48(r16)
   2253c:	28000626 	beq	r5,zero,22558 <__swsetup_r+0x15c>
   22540:	80c01004 	addi	r3,r16,64
   22544:	28c00326 	beq	r5,r3,22554 <__swsetup_r+0x158>
   22548:	8809883a 	mov	r4,r17
   2254c:	00244080 	call	24408 <_free_r>
   22550:	8080030b 	ldhu	r2,12(r16)
   22554:	80000c15 	stw	zero,48(r16)
   22558:	80c00417 	ldw	r3,16(r16)
   2255c:	013ff6c4 	movi	r4,-37
   22560:	2084703a 	and	r2,r4,r2
   22564:	80000115 	stw	zero,4(r16)
   22568:	80c00015 	stw	r3,0(r16)
   2256c:	003fd206 	br	224b8 <__swsetup_r+0xbc>

00022570 <quorem>:
   22570:	defff204 	addi	sp,sp,-56
   22574:	dd000815 	stw	r20,32(sp)
   22578:	20800417 	ldw	r2,16(r4)
   2257c:	2d000417 	ldw	r20,16(r5)
   22580:	dcc00715 	stw	r19,28(sp)
   22584:	dfc00d15 	stw	ra,52(sp)
   22588:	df000c15 	stw	fp,48(sp)
   2258c:	ddc00b15 	stw	r23,44(sp)
   22590:	dd800a15 	stw	r22,40(sp)
   22594:	dd400915 	stw	r21,36(sp)
   22598:	dc800615 	stw	r18,24(sp)
   2259c:	dc400515 	stw	r17,20(sp)
   225a0:	dc000415 	stw	r16,16(sp)
   225a4:	d9400015 	stw	r5,0(sp)
   225a8:	2027883a 	mov	r19,r4
   225ac:	15007d16 	blt	r2,r20,227a4 <quorem+0x234>
   225b0:	a0800104 	addi	r2,r20,4
   225b4:	1085883a 	add	r2,r2,r2
   225b8:	1085883a 	add	r2,r2,r2
   225bc:	28ad883a 	add	r22,r5,r2
   225c0:	2085883a 	add	r2,r4,r2
   225c4:	10800017 	ldw	r2,0(r2)
   225c8:	b1400017 	ldw	r5,0(r22)
   225cc:	a53fffc4 	addi	r20,r20,-1
   225d0:	1009883a 	mov	r4,r2
   225d4:	29400044 	addi	r5,r5,1
   225d8:	d8800115 	stw	r2,4(sp)
   225dc:	00294240 	call	29424 <__udivsi3>
   225e0:	1025883a 	mov	r18,r2
   225e4:	d8800017 	ldw	r2,0(sp)
   225e8:	9f000504 	addi	fp,r19,20
   225ec:	14000504 	addi	r16,r2,20
   225f0:	90003626 	beq	r18,zero,226cc <quorem+0x15c>
   225f4:	802b883a 	mov	r21,r16
   225f8:	e023883a 	mov	r17,fp
   225fc:	0007883a 	mov	r3,zero
   22600:	002f883a 	mov	r23,zero
   22604:	a9800017 	ldw	r6,0(r21)
   22608:	900b883a 	mov	r5,r18
   2260c:	d8c00315 	stw	r3,12(sp)
   22610:	313fffcc 	andi	r4,r6,65535
   22614:	d9800215 	stw	r6,8(sp)
   22618:	00294340 	call	29434 <__mulsi3>
   2261c:	d9800217 	ldw	r6,8(sp)
   22620:	d8c00317 	ldw	r3,12(sp)
   22624:	900b883a 	mov	r5,r18
   22628:	3008d43a 	srli	r4,r6,16
   2262c:	1887883a 	add	r3,r3,r2
   22630:	d8c00315 	stw	r3,12(sp)
   22634:	00294340 	call	29434 <__mulsi3>
   22638:	89400017 	ldw	r5,0(r17)
   2263c:	d8c00317 	ldw	r3,12(sp)
   22640:	ad400104 	addi	r21,r21,4
   22644:	293fffcc 	andi	r4,r5,65535
   22648:	1810d43a 	srli	r8,r3,16
   2264c:	25c9883a 	add	r4,r4,r23
   22650:	18ffffcc 	andi	r3,r3,65535
   22654:	20c9c83a 	sub	r4,r4,r3
   22658:	280cd43a 	srli	r6,r5,16
   2265c:	4085883a 	add	r2,r8,r2
   22660:	2007d43a 	srai	r3,r4,16
   22664:	117fffcc 	andi	r5,r2,65535
   22668:	314bc83a 	sub	r5,r6,r5
   2266c:	28cb883a 	add	r5,r5,r3
   22670:	8940008d 	sth	r5,2(r17)
   22674:	8900000d 	sth	r4,0(r17)
   22678:	1006d43a 	srli	r3,r2,16
   2267c:	282fd43a 	srai	r23,r5,16
   22680:	8c400104 	addi	r17,r17,4
   22684:	b57fdf2e 	bgeu	r22,r21,22604 <quorem+0x94>
   22688:	d8c00117 	ldw	r3,4(sp)
   2268c:	18000f1e 	bne	r3,zero,226cc <quorem+0x15c>
   22690:	a0800144 	addi	r2,r20,5
   22694:	1085883a 	add	r2,r2,r2
   22698:	1085883a 	add	r2,r2,r2
   2269c:	9887883a 	add	r3,r19,r2
   226a0:	18bfff04 	addi	r2,r3,-4
   226a4:	e080082e 	bgeu	fp,r2,226c8 <quorem+0x158>
   226a8:	18ffff17 	ldw	r3,-4(r3)
   226ac:	18000326 	beq	r3,zero,226bc <quorem+0x14c>
   226b0:	00000506 	br	226c8 <quorem+0x158>
   226b4:	10c00017 	ldw	r3,0(r2)
   226b8:	1800031e 	bne	r3,zero,226c8 <quorem+0x158>
   226bc:	10bfff04 	addi	r2,r2,-4
   226c0:	a53fffc4 	addi	r20,r20,-1
   226c4:	e0bffb36 	bltu	fp,r2,226b4 <quorem+0x144>
   226c8:	9d000415 	stw	r20,16(r19)
   226cc:	d9400017 	ldw	r5,0(sp)
   226d0:	9809883a 	mov	r4,r19
   226d4:	00265100 	call	26510 <__mcmp>
   226d8:	10002516 	blt	r2,zero,22770 <quorem+0x200>
   226dc:	94800044 	addi	r18,r18,1
   226e0:	e007883a 	mov	r3,fp
   226e4:	000d883a 	mov	r6,zero
   226e8:	18800017 	ldw	r2,0(r3)
   226ec:	82000017 	ldw	r8,0(r16)
   226f0:	84000104 	addi	r16,r16,4
   226f4:	11ffffcc 	andi	r7,r2,65535
   226f8:	413fffcc 	andi	r4,r8,65535
   226fc:	398d883a 	add	r6,r7,r6
   22700:	310fc83a 	sub	r7,r6,r4
   22704:	4010d43a 	srli	r8,r8,16
   22708:	100cd43a 	srli	r6,r2,16
   2270c:	3809d43a 	srai	r4,r7,16
   22710:	19c0000d 	sth	r7,0(r3)
   22714:	320dc83a 	sub	r6,r6,r8
   22718:	310d883a 	add	r6,r6,r4
   2271c:	1980008d 	sth	r6,2(r3)
   22720:	300dd43a 	srai	r6,r6,16
   22724:	18c00104 	addi	r3,r3,4
   22728:	b43fef2e 	bgeu	r22,r16,226e8 <quorem+0x178>
   2272c:	a0800144 	addi	r2,r20,5
   22730:	1085883a 	add	r2,r2,r2
   22734:	1085883a 	add	r2,r2,r2
   22738:	9885883a 	add	r2,r19,r2
   2273c:	10c00017 	ldw	r3,0(r2)
   22740:	18000b1e 	bne	r3,zero,22770 <quorem+0x200>
   22744:	10ffff04 	addi	r3,r2,-4
   22748:	e0c0082e 	bgeu	fp,r3,2276c <quorem+0x1fc>
   2274c:	10bfff17 	ldw	r2,-4(r2)
   22750:	10000326 	beq	r2,zero,22760 <quorem+0x1f0>
   22754:	00000506 	br	2276c <quorem+0x1fc>
   22758:	18800017 	ldw	r2,0(r3)
   2275c:	1000031e 	bne	r2,zero,2276c <quorem+0x1fc>
   22760:	18ffff04 	addi	r3,r3,-4
   22764:	a53fffc4 	addi	r20,r20,-1
   22768:	e0fffb36 	bltu	fp,r3,22758 <quorem+0x1e8>
   2276c:	9d000415 	stw	r20,16(r19)
   22770:	9005883a 	mov	r2,r18
   22774:	dfc00d17 	ldw	ra,52(sp)
   22778:	df000c17 	ldw	fp,48(sp)
   2277c:	ddc00b17 	ldw	r23,44(sp)
   22780:	dd800a17 	ldw	r22,40(sp)
   22784:	dd400917 	ldw	r21,36(sp)
   22788:	dd000817 	ldw	r20,32(sp)
   2278c:	dcc00717 	ldw	r19,28(sp)
   22790:	dc800617 	ldw	r18,24(sp)
   22794:	dc400517 	ldw	r17,20(sp)
   22798:	dc000417 	ldw	r16,16(sp)
   2279c:	dec00e04 	addi	sp,sp,56
   227a0:	f800283a 	ret
   227a4:	0005883a 	mov	r2,zero
   227a8:	003ff206 	br	22774 <quorem+0x204>

000227ac <_dtoa_r>:
   227ac:	20801017 	ldw	r2,64(r4)
   227b0:	deffdf04 	addi	sp,sp,-132
   227b4:	dcc01a15 	stw	r19,104(sp)
   227b8:	dc801915 	stw	r18,100(sp)
   227bc:	dc401815 	stw	r17,96(sp)
   227c0:	dc001715 	stw	r16,92(sp)
   227c4:	dfc02015 	stw	ra,128(sp)
   227c8:	df001f15 	stw	fp,124(sp)
   227cc:	ddc01e15 	stw	r23,120(sp)
   227d0:	dd801d15 	stw	r22,116(sp)
   227d4:	dd401c15 	stw	r21,112(sp)
   227d8:	dd001b15 	stw	r20,108(sp)
   227dc:	d9400315 	stw	r5,12(sp)
   227e0:	d9c00415 	stw	r7,16(sp)
   227e4:	2021883a 	mov	r16,r4
   227e8:	3025883a 	mov	r18,r6
   227ec:	dcc02317 	ldw	r19,140(sp)
   227f0:	3023883a 	mov	r17,r6
   227f4:	10000826 	beq	r2,zero,22818 <_dtoa_r+0x6c>
   227f8:	20c01117 	ldw	r3,68(r4)
   227fc:	01800044 	movi	r6,1
   22800:	100b883a 	mov	r5,r2
   22804:	30cc983a 	sll	r6,r6,r3
   22808:	10c00115 	stw	r3,4(r2)
   2280c:	11800215 	stw	r6,8(r2)
   22810:	0025c6c0 	call	25c6c <_Bfree>
   22814:	80001015 	stw	zero,64(r16)
   22818:	90002f16 	blt	r18,zero,228d8 <_dtoa_r+0x12c>
   2281c:	98000015 	stw	zero,0(r19)
   22820:	90dffc2c 	andhi	r3,r18,32752
   22824:	009ffc34 	movhi	r2,32752
   22828:	18801c26 	beq	r3,r2,2289c <_dtoa_r+0xf0>
   2282c:	d9000317 	ldw	r4,12(sp)
   22830:	880b883a 	mov	r5,r17
   22834:	000d883a 	mov	r6,zero
   22838:	000f883a 	mov	r7,zero
   2283c:	0028e640 	call	28e64 <__eqdf2>
   22840:	10002c1e 	bne	r2,zero,228f4 <_dtoa_r+0x148>
   22844:	d9002217 	ldw	r4,136(sp)
   22848:	d9c02417 	ldw	r7,144(sp)
   2284c:	00800044 	movi	r2,1
   22850:	20800015 	stw	r2,0(r4)
   22854:	38019426 	beq	r7,zero,22ea8 <_dtoa_r+0x6fc>
   22858:	008000f4 	movhi	r2,3
   2285c:	10b1f844 	addi	r2,r2,-14367
   22860:	38800015 	stw	r2,0(r7)
   22864:	15ffffc4 	addi	r23,r2,-1
   22868:	b805883a 	mov	r2,r23
   2286c:	dfc02017 	ldw	ra,128(sp)
   22870:	df001f17 	ldw	fp,124(sp)
   22874:	ddc01e17 	ldw	r23,120(sp)
   22878:	dd801d17 	ldw	r22,116(sp)
   2287c:	dd401c17 	ldw	r21,112(sp)
   22880:	dd001b17 	ldw	r20,108(sp)
   22884:	dcc01a17 	ldw	r19,104(sp)
   22888:	dc801917 	ldw	r18,100(sp)
   2288c:	dc401817 	ldw	r17,96(sp)
   22890:	dc001717 	ldw	r16,92(sp)
   22894:	dec02104 	addi	sp,sp,132
   22898:	f800283a 	ret
   2289c:	d8c02217 	ldw	r3,136(sp)
   228a0:	d9000317 	ldw	r4,12(sp)
   228a4:	0089c3c4 	movi	r2,9999
   228a8:	18800015 	stw	r2,0(r3)
   228ac:	20016c26 	beq	r4,zero,22e60 <_dtoa_r+0x6b4>
   228b0:	05c000f4 	movhi	r23,3
   228b4:	bdf20404 	addi	r23,r23,-14320
   228b8:	d9c02417 	ldw	r7,144(sp)
   228bc:	383fea26 	beq	r7,zero,22868 <_dtoa_r+0xbc>
   228c0:	b88000c7 	ldb	r2,3(r23)
   228c4:	10016d1e 	bne	r2,zero,22e7c <_dtoa_r+0x6d0>
   228c8:	b88000c4 	addi	r2,r23,3
   228cc:	d8c02417 	ldw	r3,144(sp)
   228d0:	18800015 	stw	r2,0(r3)
   228d4:	003fe406 	br	22868 <_dtoa_r+0xbc>
   228d8:	04600034 	movhi	r17,32768
   228dc:	8c7fffc4 	addi	r17,r17,-1
   228e0:	9462703a 	and	r17,r18,r17
   228e4:	00800044 	movi	r2,1
   228e8:	98800015 	stw	r2,0(r19)
   228ec:	8825883a 	mov	r18,r17
   228f0:	003fcb06 	br	22820 <_dtoa_r+0x74>
   228f4:	d9400317 	ldw	r5,12(sp)
   228f8:	9028d53a 	srli	r20,r18,20
   228fc:	d8800204 	addi	r2,sp,8
   22900:	d8800015 	stw	r2,0(sp)
   22904:	8009883a 	mov	r4,r16
   22908:	880d883a 	mov	r6,r17
   2290c:	d9c00104 	addi	r7,sp,4
   22910:	00268b80 	call	268b8 <__d2b>
   22914:	a501ffcc 	andi	r20,r20,2047
   22918:	1039883a 	mov	fp,r2
   2291c:	a001591e 	bne	r20,zero,22e84 <_dtoa_r+0x6d8>
   22920:	dd400217 	ldw	r21,8(sp)
   22924:	dd000117 	ldw	r20,4(sp)
   22928:	00befbc4 	movi	r2,-1041
   2292c:	ad29883a 	add	r20,r21,r20
   22930:	a082d216 	blt	r20,r2,2347c <_dtoa_r+0xcd0>
   22934:	d8c00317 	ldw	r3,12(sp)
   22938:	013f0384 	movi	r4,-1010
   2293c:	2509c83a 	sub	r4,r4,r20
   22940:	a0810484 	addi	r2,r20,1042
   22944:	9124983a 	sll	r18,r18,r4
   22948:	1884d83a 	srl	r2,r3,r2
   2294c:	9088b03a 	or	r4,r18,r2
   22950:	00291e80 	call	291e8 <__floatunsidf>
   22954:	1009883a 	mov	r4,r2
   22958:	017f8434 	movhi	r5,65040
   2295c:	00800044 	movi	r2,1
   22960:	194b883a 	add	r5,r3,r5
   22964:	a53fffc4 	addi	r20,r20,-1
   22968:	d8800f15 	stw	r2,60(sp)
   2296c:	000d883a 	mov	r6,zero
   22970:	01cffe34 	movhi	r7,16376
   22974:	002896c0 	call	2896c <__subdf3>
   22978:	1009883a 	mov	r4,r2
   2297c:	180b883a 	mov	r5,r3
   22980:	0198dbf4 	movhi	r6,25455
   22984:	3190d844 	addi	r6,r6,17249
   22988:	01cff4f4 	movhi	r7,16339
   2298c:	39e1e9c4 	addi	r7,r7,-30809
   22990:	00289cc0 	call	289cc <__muldf3>
   22994:	180b883a 	mov	r5,r3
   22998:	01a2d874 	movhi	r6,35681
   2299c:	31b22cc4 	addi	r6,r6,-14157
   229a0:	01cff1f4 	movhi	r7,16327
   229a4:	39e28a04 	addi	r7,r7,-30168
   229a8:	1009883a 	mov	r4,r2
   229ac:	00289180 	call	28918 <__adddf3>
   229b0:	a009883a 	mov	r4,r20
   229b4:	1027883a 	mov	r19,r2
   229b8:	1825883a 	mov	r18,r3
   229bc:	00290400 	call	29040 <__floatsidf>
   229c0:	1009883a 	mov	r4,r2
   229c4:	180b883a 	mov	r5,r3
   229c8:	019427f4 	movhi	r6,20639
   229cc:	319e7ec4 	addi	r6,r6,31227
   229d0:	01cff4f4 	movhi	r7,16339
   229d4:	39d104c4 	addi	r7,r7,17427
   229d8:	00289cc0 	call	289cc <__muldf3>
   229dc:	9809883a 	mov	r4,r19
   229e0:	900b883a 	mov	r5,r18
   229e4:	100d883a 	mov	r6,r2
   229e8:	180f883a 	mov	r7,r3
   229ec:	00289180 	call	28918 <__adddf3>
   229f0:	1009883a 	mov	r4,r2
   229f4:	180b883a 	mov	r5,r3
   229f8:	1027883a 	mov	r19,r2
   229fc:	1825883a 	mov	r18,r3
   22a00:	00291140 	call	29114 <__fixdfsi>
   22a04:	9809883a 	mov	r4,r19
   22a08:	900b883a 	mov	r5,r18
   22a0c:	000d883a 	mov	r6,zero
   22a10:	000f883a 	mov	r7,zero
   22a14:	d8800615 	stw	r2,24(sp)
   22a18:	0028fe40 	call	28fe4 <__ltdf2>
   22a1c:	10027e16 	blt	r2,zero,23418 <_dtoa_r+0xc6c>
   22a20:	d8c00617 	ldw	r3,24(sp)
   22a24:	00800584 	movi	r2,22
   22a28:	10c26c36 	bltu	r2,r3,233dc <_dtoa_r+0xc30>
   22a2c:	180490fa 	slli	r2,r3,3
   22a30:	00c000f4 	movhi	r3,3
   22a34:	18f22a04 	addi	r3,r3,-14168
   22a38:	d9800317 	ldw	r6,12(sp)
   22a3c:	1885883a 	add	r2,r3,r2
   22a40:	11000017 	ldw	r4,0(r2)
   22a44:	11400117 	ldw	r5,4(r2)
   22a48:	880f883a 	mov	r7,r17
   22a4c:	0028f1c0 	call	28f1c <__gtdf2>
   22a50:	00828f0e 	bge	zero,r2,23490 <_dtoa_r+0xce4>
   22a54:	d8800617 	ldw	r2,24(sp)
   22a58:	d8000d15 	stw	zero,52(sp)
   22a5c:	10bfffc4 	addi	r2,r2,-1
   22a60:	d8800615 	stw	r2,24(sp)
   22a64:	ad29c83a 	sub	r20,r21,r20
   22a68:	a53fffc4 	addi	r20,r20,-1
   22a6c:	a0026616 	blt	r20,zero,23408 <_dtoa_r+0xc5c>
   22a70:	dd000715 	stw	r20,28(sp)
   22a74:	d8000815 	stw	zero,32(sp)
   22a78:	d8800617 	ldw	r2,24(sp)
   22a7c:	10025a16 	blt	r2,zero,233e8 <_dtoa_r+0xc3c>
   22a80:	d8c00717 	ldw	r3,28(sp)
   22a84:	d8800b15 	stw	r2,44(sp)
   22a88:	d8000a15 	stw	zero,40(sp)
   22a8c:	1887883a 	add	r3,r3,r2
   22a90:	d8c00715 	stw	r3,28(sp)
   22a94:	d9c00417 	ldw	r7,16(sp)
   22a98:	00800244 	movi	r2,9
   22a9c:	11c10536 	bltu	r2,r7,22eb4 <_dtoa_r+0x708>
   22aa0:	00800144 	movi	r2,5
   22aa4:	11c4c60e 	bge	r2,r7,23dc0 <_dtoa_r+0x1614>
   22aa8:	39ffff04 	addi	r7,r7,-4
   22aac:	d9c00415 	stw	r7,16(sp)
   22ab0:	0027883a 	mov	r19,zero
   22ab4:	d9c00417 	ldw	r7,16(sp)
   22ab8:	008000c4 	movi	r2,3
   22abc:	3883a226 	beq	r7,r2,23948 <_dtoa_r+0x119c>
   22ac0:	11c2bc16 	blt	r2,r7,235b4 <_dtoa_r+0xe08>
   22ac4:	00800084 	movi	r2,2
   22ac8:	3880fb1e 	bne	r7,r2,22eb8 <_dtoa_r+0x70c>
   22acc:	d8000c15 	stw	zero,48(sp)
   22ad0:	d9002117 	ldw	r4,132(sp)
   22ad4:	0103ae0e 	bge	zero,r4,23990 <_dtoa_r+0x11e4>
   22ad8:	2025883a 	mov	r18,r4
   22adc:	d9000e15 	stw	r4,56(sp)
   22ae0:	d9000915 	stw	r4,36(sp)
   22ae4:	80001115 	stw	zero,68(r16)
   22ae8:	008005c4 	movi	r2,23
   22aec:	1484b22e 	bgeu	r2,r18,23db8 <_dtoa_r+0x160c>
   22af0:	00c00044 	movi	r3,1
   22af4:	00800104 	movi	r2,4
   22af8:	1085883a 	add	r2,r2,r2
   22afc:	11000504 	addi	r4,r2,20
   22b00:	180b883a 	mov	r5,r3
   22b04:	18c00044 	addi	r3,r3,1
   22b08:	913ffb2e 	bgeu	r18,r4,22af8 <_dtoa_r+0x34c>
   22b0c:	81401115 	stw	r5,68(r16)
   22b10:	8009883a 	mov	r4,r16
   22b14:	0025bc40 	call	25bc4 <_Balloc>
   22b18:	102f883a 	mov	r23,r2
   22b1c:	80801015 	stw	r2,64(r16)
   22b20:	00800384 	movi	r2,14
   22b24:	1480f036 	bltu	r2,r18,22ee8 <_dtoa_r+0x73c>
   22b28:	9800ef26 	beq	r19,zero,22ee8 <_dtoa_r+0x73c>
   22b2c:	d8800617 	ldw	r2,24(sp)
   22b30:	00839c0e 	bge	zero,r2,239a4 <_dtoa_r+0x11f8>
   22b34:	d8c00617 	ldw	r3,24(sp)
   22b38:	108003cc 	andi	r2,r2,15
   22b3c:	100490fa 	slli	r2,r2,3
   22b40:	182bd13a 	srai	r21,r3,4
   22b44:	00c000f4 	movhi	r3,3
   22b48:	18f22a04 	addi	r3,r3,-14168
   22b4c:	1885883a 	add	r2,r3,r2
   22b50:	a8c0040c 	andi	r3,r21,16
   22b54:	12800017 	ldw	r10,0(r2)
   22b58:	15800117 	ldw	r22,4(r2)
   22b5c:	18038726 	beq	r3,zero,2397c <_dtoa_r+0x11d0>
   22b60:	008000f4 	movhi	r2,3
   22b64:	10b22004 	addi	r2,r2,-14208
   22b68:	11800817 	ldw	r6,32(r2)
   22b6c:	11c00917 	ldw	r7,36(r2)
   22b70:	d9000317 	ldw	r4,12(sp)
   22b74:	880b883a 	mov	r5,r17
   22b78:	da801515 	stw	r10,84(sp)
   22b7c:	0028cb00 	call	28cb0 <__divdf3>
   22b80:	da801517 	ldw	r10,84(sp)
   22b84:	d8801015 	stw	r2,64(sp)
   22b88:	1829883a 	mov	r20,r3
   22b8c:	ad4003cc 	andi	r21,r21,15
   22b90:	048000c4 	movi	r18,3
   22b94:	a8001126 	beq	r21,zero,22bdc <_dtoa_r+0x430>
   22b98:	04c000f4 	movhi	r19,3
   22b9c:	9cf22004 	addi	r19,r19,-14208
   22ba0:	5005883a 	mov	r2,r10
   22ba4:	b007883a 	mov	r3,r22
   22ba8:	a980004c 	andi	r6,r21,1
   22bac:	1009883a 	mov	r4,r2
   22bb0:	a82bd07a 	srai	r21,r21,1
   22bb4:	180b883a 	mov	r5,r3
   22bb8:	30000426 	beq	r6,zero,22bcc <_dtoa_r+0x420>
   22bbc:	99800017 	ldw	r6,0(r19)
   22bc0:	99c00117 	ldw	r7,4(r19)
   22bc4:	94800044 	addi	r18,r18,1
   22bc8:	00289cc0 	call	289cc <__muldf3>
   22bcc:	9cc00204 	addi	r19,r19,8
   22bd0:	a83ff51e 	bne	r21,zero,22ba8 <_dtoa_r+0x3fc>
   22bd4:	1015883a 	mov	r10,r2
   22bd8:	182d883a 	mov	r22,r3
   22bdc:	d9001017 	ldw	r4,64(sp)
   22be0:	a00b883a 	mov	r5,r20
   22be4:	500d883a 	mov	r6,r10
   22be8:	b00f883a 	mov	r7,r22
   22bec:	0028cb00 	call	28cb0 <__divdf3>
   22bf0:	1027883a 	mov	r19,r2
   22bf4:	1829883a 	mov	r20,r3
   22bf8:	d8c00d17 	ldw	r3,52(sp)
   22bfc:	18000626 	beq	r3,zero,22c18 <_dtoa_r+0x46c>
   22c00:	9809883a 	mov	r4,r19
   22c04:	a00b883a 	mov	r5,r20
   22c08:	000d883a 	mov	r6,zero
   22c0c:	01cffc34 	movhi	r7,16368
   22c10:	0028fe40 	call	28fe4 <__ltdf2>
   22c14:	10040e16 	blt	r2,zero,23c50 <_dtoa_r+0x14a4>
   22c18:	9009883a 	mov	r4,r18
   22c1c:	00290400 	call	29040 <__floatsidf>
   22c20:	1009883a 	mov	r4,r2
   22c24:	180b883a 	mov	r5,r3
   22c28:	980d883a 	mov	r6,r19
   22c2c:	a00f883a 	mov	r7,r20
   22c30:	00289cc0 	call	289cc <__muldf3>
   22c34:	1009883a 	mov	r4,r2
   22c38:	180b883a 	mov	r5,r3
   22c3c:	000d883a 	mov	r6,zero
   22c40:	01d00734 	movhi	r7,16412
   22c44:	00289180 	call	28918 <__adddf3>
   22c48:	057f3034 	movhi	r21,64704
   22c4c:	1d6b883a 	add	r21,r3,r21
   22c50:	d8c00917 	ldw	r3,36(sp)
   22c54:	1025883a 	mov	r18,r2
   22c58:	18031f26 	beq	r3,zero,238d8 <_dtoa_r+0x112c>
   22c5c:	d8800617 	ldw	r2,24(sp)
   22c60:	dac00917 	ldw	r11,36(sp)
   22c64:	d8801315 	stw	r2,76(sp)
   22c68:	d8c00c17 	ldw	r3,48(sp)
   22c6c:	18039026 	beq	r3,zero,23ab0 <_dtoa_r+0x1304>
   22c70:	58bfffc4 	addi	r2,r11,-1
   22c74:	100490fa 	slli	r2,r2,3
   22c78:	00c000f4 	movhi	r3,3
   22c7c:	18f22a04 	addi	r3,r3,-14168
   22c80:	0009883a 	mov	r4,zero
   22c84:	1885883a 	add	r2,r3,r2
   22c88:	11800017 	ldw	r6,0(r2)
   22c8c:	11c00117 	ldw	r7,4(r2)
   22c90:	014ff834 	movhi	r5,16352
   22c94:	dac01615 	stw	r11,88(sp)
   22c98:	0028cb00 	call	28cb0 <__divdf3>
   22c9c:	900d883a 	mov	r6,r18
   22ca0:	a80f883a 	mov	r7,r21
   22ca4:	1009883a 	mov	r4,r2
   22ca8:	180b883a 	mov	r5,r3
   22cac:	002896c0 	call	2896c <__subdf3>
   22cb0:	a00b883a 	mov	r5,r20
   22cb4:	9809883a 	mov	r4,r19
   22cb8:	182b883a 	mov	r21,r3
   22cbc:	d8801015 	stw	r2,64(sp)
   22cc0:	00291140 	call	29114 <__fixdfsi>
   22cc4:	1009883a 	mov	r4,r2
   22cc8:	d8801515 	stw	r2,84(sp)
   22ccc:	00290400 	call	29040 <__floatsidf>
   22cd0:	9809883a 	mov	r4,r19
   22cd4:	a00b883a 	mov	r5,r20
   22cd8:	100d883a 	mov	r6,r2
   22cdc:	180f883a 	mov	r7,r3
   22ce0:	002896c0 	call	2896c <__subdf3>
   22ce4:	da401517 	ldw	r9,84(sp)
   22ce8:	d9001017 	ldw	r4,64(sp)
   22cec:	a80b883a 	mov	r5,r21
   22cf0:	4d000c04 	addi	r20,r9,48
   22cf4:	bd000005 	stb	r20,0(r23)
   22cf8:	100d883a 	mov	r6,r2
   22cfc:	180f883a 	mov	r7,r3
   22d00:	bd800044 	addi	r22,r23,1
   22d04:	1025883a 	mov	r18,r2
   22d08:	1827883a 	mov	r19,r3
   22d0c:	0028f1c0 	call	28f1c <__gtdf2>
   22d10:	00842216 	blt	zero,r2,23d9c <_dtoa_r+0x15f0>
   22d14:	0009883a 	mov	r4,zero
   22d18:	014ffc34 	movhi	r5,16368
   22d1c:	900d883a 	mov	r6,r18
   22d20:	980f883a 	mov	r7,r19
   22d24:	002896c0 	call	2896c <__subdf3>
   22d28:	d9001017 	ldw	r4,64(sp)
   22d2c:	a80b883a 	mov	r5,r21
   22d30:	100d883a 	mov	r6,r2
   22d34:	180f883a 	mov	r7,r3
   22d38:	0028f1c0 	call	28f1c <__gtdf2>
   22d3c:	dac01617 	ldw	r11,88(sp)
   22d40:	00841316 	blt	zero,r2,23d90 <_dtoa_r+0x15e4>
   22d44:	00800044 	movi	r2,1
   22d48:	12c0670e 	bge	r2,r11,22ee8 <_dtoa_r+0x73c>
   22d4c:	bad7883a 	add	r11,r23,r11
   22d50:	df001115 	stw	fp,68(sp)
   22d54:	dc401215 	stw	r17,72(sp)
   22d58:	5839883a 	mov	fp,r11
   22d5c:	dc401017 	ldw	r17,64(sp)
   22d60:	00000806 	br	22d84 <_dtoa_r+0x5d8>
   22d64:	002896c0 	call	2896c <__subdf3>
   22d68:	1009883a 	mov	r4,r2
   22d6c:	180b883a 	mov	r5,r3
   22d70:	880d883a 	mov	r6,r17
   22d74:	a80f883a 	mov	r7,r21
   22d78:	0028fe40 	call	28fe4 <__ltdf2>
   22d7c:	1003ee16 	blt	r2,zero,23d38 <_dtoa_r+0x158c>
   22d80:	b703f126 	beq	r22,fp,23d48 <_dtoa_r+0x159c>
   22d84:	8809883a 	mov	r4,r17
   22d88:	a80b883a 	mov	r5,r21
   22d8c:	000d883a 	mov	r6,zero
   22d90:	01d00934 	movhi	r7,16420
   22d94:	00289cc0 	call	289cc <__muldf3>
   22d98:	000d883a 	mov	r6,zero
   22d9c:	01d00934 	movhi	r7,16420
   22da0:	9009883a 	mov	r4,r18
   22da4:	980b883a 	mov	r5,r19
   22da8:	1023883a 	mov	r17,r2
   22dac:	182b883a 	mov	r21,r3
   22db0:	00289cc0 	call	289cc <__muldf3>
   22db4:	180b883a 	mov	r5,r3
   22db8:	1009883a 	mov	r4,r2
   22dbc:	1825883a 	mov	r18,r3
   22dc0:	1027883a 	mov	r19,r2
   22dc4:	00291140 	call	29114 <__fixdfsi>
   22dc8:	1009883a 	mov	r4,r2
   22dcc:	1029883a 	mov	r20,r2
   22dd0:	00290400 	call	29040 <__floatsidf>
   22dd4:	9809883a 	mov	r4,r19
   22dd8:	900b883a 	mov	r5,r18
   22ddc:	100d883a 	mov	r6,r2
   22de0:	180f883a 	mov	r7,r3
   22de4:	002896c0 	call	2896c <__subdf3>
   22de8:	a5000c04 	addi	r20,r20,48
   22dec:	b5000005 	stb	r20,0(r22)
   22df0:	1009883a 	mov	r4,r2
   22df4:	180b883a 	mov	r5,r3
   22df8:	880d883a 	mov	r6,r17
   22dfc:	a80f883a 	mov	r7,r21
   22e00:	1025883a 	mov	r18,r2
   22e04:	1827883a 	mov	r19,r3
   22e08:	0028fe40 	call	28fe4 <__ltdf2>
   22e0c:	b5800044 	addi	r22,r22,1
   22e10:	0009883a 	mov	r4,zero
   22e14:	014ffc34 	movhi	r5,16368
   22e18:	900d883a 	mov	r6,r18
   22e1c:	980f883a 	mov	r7,r19
   22e20:	103fd00e 	bge	r2,zero,22d64 <_dtoa_r+0x5b8>
   22e24:	d9001317 	ldw	r4,76(sp)
   22e28:	df001117 	ldw	fp,68(sp)
   22e2c:	d9000615 	stw	r4,24(sp)
   22e30:	8009883a 	mov	r4,r16
   22e34:	e00b883a 	mov	r5,fp
   22e38:	0025c6c0 	call	25c6c <_Bfree>
   22e3c:	d9c00617 	ldw	r7,24(sp)
   22e40:	d8c02217 	ldw	r3,136(sp)
   22e44:	d9002417 	ldw	r4,144(sp)
   22e48:	b0000005 	stb	zero,0(r22)
   22e4c:	38800044 	addi	r2,r7,1
   22e50:	18800015 	stw	r2,0(r3)
   22e54:	203e8426 	beq	r4,zero,22868 <_dtoa_r+0xbc>
   22e58:	25800015 	stw	r22,0(r4)
   22e5c:	003e8206 	br	22868 <_dtoa_r+0xbc>
   22e60:	00800434 	movhi	r2,16
   22e64:	10bfffc4 	addi	r2,r2,-1
   22e68:	90a4703a 	and	r18,r18,r2
   22e6c:	903e901e 	bne	r18,zero,228b0 <_dtoa_r+0x104>
   22e70:	05c000f4 	movhi	r23,3
   22e74:	bdf20104 	addi	r23,r23,-14332
   22e78:	003e8f06 	br	228b8 <_dtoa_r+0x10c>
   22e7c:	b8800204 	addi	r2,r23,8
   22e80:	003e9206 	br	228cc <_dtoa_r+0x120>
   22e84:	01400434 	movhi	r5,16
   22e88:	297fffc4 	addi	r5,r5,-1
   22e8c:	894a703a 	and	r5,r17,r5
   22e90:	d9000317 	ldw	r4,12(sp)
   22e94:	294ffc34 	orhi	r5,r5,16368
   22e98:	a53f0044 	addi	r20,r20,-1023
   22e9c:	dd400217 	ldw	r21,8(sp)
   22ea0:	d8000f15 	stw	zero,60(sp)
   22ea4:	003eb106 	br	2296c <_dtoa_r+0x1c0>
   22ea8:	05c000f4 	movhi	r23,3
   22eac:	bdf1f804 	addi	r23,r23,-14368
   22eb0:	003e6d06 	br	22868 <_dtoa_r+0xbc>
   22eb4:	d8000415 	stw	zero,16(sp)
   22eb8:	80001115 	stw	zero,68(r16)
   22ebc:	8009883a 	mov	r4,r16
   22ec0:	000b883a 	mov	r5,zero
   22ec4:	0025bc40 	call	25bc4 <_Balloc>
   22ec8:	01ffffc4 	movi	r7,-1
   22ecc:	102f883a 	mov	r23,r2
   22ed0:	80801015 	stw	r2,64(r16)
   22ed4:	00800044 	movi	r2,1
   22ed8:	d9c00915 	stw	r7,36(sp)
   22edc:	d8002115 	stw	zero,132(sp)
   22ee0:	d9c00e15 	stw	r7,56(sp)
   22ee4:	d8800c15 	stw	r2,48(sp)
   22ee8:	d8800117 	ldw	r2,4(sp)
   22eec:	10008b16 	blt	r2,zero,2311c <_dtoa_r+0x970>
   22ef0:	d9000617 	ldw	r4,24(sp)
   22ef4:	00c00384 	movi	r3,14
   22ef8:	19008816 	blt	r3,r4,2311c <_dtoa_r+0x970>
   22efc:	200490fa 	slli	r2,r4,3
   22f00:	d9c02117 	ldw	r7,132(sp)
   22f04:	00c000f4 	movhi	r3,3
   22f08:	18f22a04 	addi	r3,r3,-14168
   22f0c:	1885883a 	add	r2,r3,r2
   22f10:	14800017 	ldw	r18,0(r2)
   22f14:	14c00117 	ldw	r19,4(r2)
   22f18:	3801c916 	blt	r7,zero,23640 <_dtoa_r+0xe94>
   22f1c:	d9000317 	ldw	r4,12(sp)
   22f20:	900d883a 	mov	r6,r18
   22f24:	980f883a 	mov	r7,r19
   22f28:	880b883a 	mov	r5,r17
   22f2c:	0028cb00 	call	28cb0 <__divdf3>
   22f30:	180b883a 	mov	r5,r3
   22f34:	1009883a 	mov	r4,r2
   22f38:	00291140 	call	29114 <__fixdfsi>
   22f3c:	1009883a 	mov	r4,r2
   22f40:	102b883a 	mov	r21,r2
   22f44:	00290400 	call	29040 <__floatsidf>
   22f48:	1009883a 	mov	r4,r2
   22f4c:	180b883a 	mov	r5,r3
   22f50:	900d883a 	mov	r6,r18
   22f54:	980f883a 	mov	r7,r19
   22f58:	00289cc0 	call	289cc <__muldf3>
   22f5c:	d9000317 	ldw	r4,12(sp)
   22f60:	880b883a 	mov	r5,r17
   22f64:	100d883a 	mov	r6,r2
   22f68:	180f883a 	mov	r7,r3
   22f6c:	002896c0 	call	2896c <__subdf3>
   22f70:	d9c00917 	ldw	r7,36(sp)
   22f74:	1009883a 	mov	r4,r2
   22f78:	a8800c04 	addi	r2,r21,48
   22f7c:	b8800005 	stb	r2,0(r23)
   22f80:	01800044 	movi	r6,1
   22f84:	180b883a 	mov	r5,r3
   22f88:	2005883a 	mov	r2,r4
   22f8c:	bd800044 	addi	r22,r23,1
   22f90:	39803726 	beq	r7,r6,23070 <_dtoa_r+0x8c4>
   22f94:	000d883a 	mov	r6,zero
   22f98:	01d00934 	movhi	r7,16420
   22f9c:	00289cc0 	call	289cc <__muldf3>
   22fa0:	1009883a 	mov	r4,r2
   22fa4:	180b883a 	mov	r5,r3
   22fa8:	000d883a 	mov	r6,zero
   22fac:	000f883a 	mov	r7,zero
   22fb0:	1029883a 	mov	r20,r2
   22fb4:	1823883a 	mov	r17,r3
   22fb8:	0028e640 	call	28e64 <__eqdf2>
   22fbc:	103f9c26 	beq	r2,zero,22e30 <_dtoa_r+0x684>
   22fc0:	dd400917 	ldw	r21,36(sp)
   22fc4:	dc000415 	stw	r16,16(sp)
   22fc8:	00000906 	br	22ff0 <_dtoa_r+0x844>
   22fcc:	00289cc0 	call	289cc <__muldf3>
   22fd0:	1009883a 	mov	r4,r2
   22fd4:	180b883a 	mov	r5,r3
   22fd8:	000d883a 	mov	r6,zero
   22fdc:	000f883a 	mov	r7,zero
   22fe0:	1029883a 	mov	r20,r2
   22fe4:	1823883a 	mov	r17,r3
   22fe8:	0028e640 	call	28e64 <__eqdf2>
   22fec:	10022926 	beq	r2,zero,23894 <_dtoa_r+0x10e8>
   22ff0:	900d883a 	mov	r6,r18
   22ff4:	980f883a 	mov	r7,r19
   22ff8:	a009883a 	mov	r4,r20
   22ffc:	880b883a 	mov	r5,r17
   23000:	0028cb00 	call	28cb0 <__divdf3>
   23004:	180b883a 	mov	r5,r3
   23008:	1009883a 	mov	r4,r2
   2300c:	00291140 	call	29114 <__fixdfsi>
   23010:	1009883a 	mov	r4,r2
   23014:	1021883a 	mov	r16,r2
   23018:	00290400 	call	29040 <__floatsidf>
   2301c:	1009883a 	mov	r4,r2
   23020:	180b883a 	mov	r5,r3
   23024:	900d883a 	mov	r6,r18
   23028:	980f883a 	mov	r7,r19
   2302c:	00289cc0 	call	289cc <__muldf3>
   23030:	a009883a 	mov	r4,r20
   23034:	880b883a 	mov	r5,r17
   23038:	100d883a 	mov	r6,r2
   2303c:	180f883a 	mov	r7,r3
   23040:	002896c0 	call	2896c <__subdf3>
   23044:	82400c04 	addi	r9,r16,48
   23048:	b2400005 	stb	r9,0(r22)
   2304c:	b5800044 	addi	r22,r22,1
   23050:	b5d3c83a 	sub	r9,r22,r23
   23054:	000d883a 	mov	r6,zero
   23058:	01d00934 	movhi	r7,16420
   2305c:	1009883a 	mov	r4,r2
   23060:	180b883a 	mov	r5,r3
   23064:	aa7fd91e 	bne	r21,r9,22fcc <_dtoa_r+0x820>
   23068:	802b883a 	mov	r21,r16
   2306c:	dc000417 	ldw	r16,16(sp)
   23070:	1009883a 	mov	r4,r2
   23074:	180b883a 	mov	r5,r3
   23078:	100d883a 	mov	r6,r2
   2307c:	180f883a 	mov	r7,r3
   23080:	00289180 	call	28918 <__adddf3>
   23084:	9009883a 	mov	r4,r18
   23088:	980b883a 	mov	r5,r19
   2308c:	100d883a 	mov	r6,r2
   23090:	180f883a 	mov	r7,r3
   23094:	1023883a 	mov	r17,r2
   23098:	1829883a 	mov	r20,r3
   2309c:	0028fe40 	call	28fe4 <__ltdf2>
   230a0:	10000816 	blt	r2,zero,230c4 <_dtoa_r+0x918>
   230a4:	9009883a 	mov	r4,r18
   230a8:	980b883a 	mov	r5,r19
   230ac:	880d883a 	mov	r6,r17
   230b0:	a00f883a 	mov	r7,r20
   230b4:	0028e640 	call	28e64 <__eqdf2>
   230b8:	103f5d1e 	bne	r2,zero,22e30 <_dtoa_r+0x684>
   230bc:	ad40004c 	andi	r21,r21,1
   230c0:	a83f5b26 	beq	r21,zero,22e30 <_dtoa_r+0x684>
   230c4:	b53fffc3 	ldbu	r20,-1(r22)
   230c8:	b0ffff84 	addi	r3,r22,-2
   230cc:	01400e44 	movi	r5,57
   230d0:	00000306 	br	230e0 <_dtoa_r+0x934>
   230d4:	1d000003 	ldbu	r20,0(r3)
   230d8:	102d883a 	mov	r22,r2
   230dc:	18ffffc4 	addi	r3,r3,-1
   230e0:	a1003fcc 	andi	r4,r20,255
   230e4:	2100201c 	xori	r4,r4,128
   230e8:	213fe004 	addi	r4,r4,-128
   230ec:	b0bfffc4 	addi	r2,r22,-1
   230f0:	2142ca1e 	bne	r4,r5,23c1c <_dtoa_r+0x1470>
   230f4:	b8bff71e 	bne	r23,r2,230d4 <_dtoa_r+0x928>
   230f8:	d8800617 	ldw	r2,24(sp)
   230fc:	05000c44 	movi	r20,49
   23100:	10800044 	addi	r2,r2,1
   23104:	d8800615 	stw	r2,24(sp)
   23108:	00800c04 	movi	r2,48
   2310c:	b8800005 	stb	r2,0(r23)
   23110:	b805883a 	mov	r2,r23
   23114:	15000005 	stb	r20,0(r2)
   23118:	003f4506 	br	22e30 <_dtoa_r+0x684>
   2311c:	d9c00c17 	ldw	r7,48(sp)
   23120:	3800c926 	beq	r7,zero,23448 <_dtoa_r+0xc9c>
   23124:	d9c00417 	ldw	r7,16(sp)
   23128:	00c00044 	movi	r3,1
   2312c:	19c16c0e 	bge	r3,r7,236e0 <_dtoa_r+0xf34>
   23130:	d9000917 	ldw	r4,36(sp)
   23134:	d9c00a17 	ldw	r7,40(sp)
   23138:	24ffffc4 	addi	r19,r4,-1
   2313c:	3cc20716 	blt	r7,r19,2395c <_dtoa_r+0x11b0>
   23140:	3ce7c83a 	sub	r19,r7,r19
   23144:	d9c00917 	ldw	r7,36(sp)
   23148:	3802ae16 	blt	r7,zero,23c04 <_dtoa_r+0x1458>
   2314c:	dc800817 	ldw	r18,32(sp)
   23150:	d8800917 	ldw	r2,36(sp)
   23154:	d8c00817 	ldw	r3,32(sp)
   23158:	d9c00717 	ldw	r7,28(sp)
   2315c:	8009883a 	mov	r4,r16
   23160:	1887883a 	add	r3,r3,r2
   23164:	388f883a 	add	r7,r7,r2
   23168:	01400044 	movi	r5,1
   2316c:	d8c00815 	stw	r3,32(sp)
   23170:	d9c00715 	stw	r7,28(sp)
   23174:	0025ff40 	call	25ff4 <__i2b>
   23178:	102b883a 	mov	r21,r2
   2317c:	90000a26 	beq	r18,zero,231a8 <_dtoa_r+0x9fc>
   23180:	d8800717 	ldw	r2,28(sp)
   23184:	0080080e 	bge	zero,r2,231a8 <_dtoa_r+0x9fc>
   23188:	90812b16 	blt	r18,r2,23638 <_dtoa_r+0xe8c>
   2318c:	d8c00817 	ldw	r3,32(sp)
   23190:	d9000717 	ldw	r4,28(sp)
   23194:	90a5c83a 	sub	r18,r18,r2
   23198:	1887c83a 	sub	r3,r3,r2
   2319c:	2089c83a 	sub	r4,r4,r2
   231a0:	d8c00815 	stw	r3,32(sp)
   231a4:	d9000715 	stw	r4,28(sp)
   231a8:	d9c00a17 	ldw	r7,40(sp)
   231ac:	01c0140e 	bge	zero,r7,23200 <_dtoa_r+0xa54>
   231b0:	d8800c17 	ldw	r2,48(sp)
   231b4:	1001de26 	beq	r2,zero,23930 <_dtoa_r+0x1184>
   231b8:	04c00e0e 	bge	zero,r19,231f4 <_dtoa_r+0xa48>
   231bc:	a80b883a 	mov	r5,r21
   231c0:	8009883a 	mov	r4,r16
   231c4:	980d883a 	mov	r6,r19
   231c8:	00262880 	call	26288 <__pow5mult>
   231cc:	e00d883a 	mov	r6,fp
   231d0:	8009883a 	mov	r4,r16
   231d4:	100b883a 	mov	r5,r2
   231d8:	102b883a 	mov	r21,r2
   231dc:	00260300 	call	26030 <__multiply>
   231e0:	1029883a 	mov	r20,r2
   231e4:	e00b883a 	mov	r5,fp
   231e8:	8009883a 	mov	r4,r16
   231ec:	0025c6c0 	call	25c6c <_Bfree>
   231f0:	a039883a 	mov	fp,r20
   231f4:	d8c00a17 	ldw	r3,40(sp)
   231f8:	1ccdc83a 	sub	r6,r3,r19
   231fc:	3001291e 	bne	r6,zero,236a4 <_dtoa_r+0xef8>
   23200:	8009883a 	mov	r4,r16
   23204:	01400044 	movi	r5,1
   23208:	0025ff40 	call	25ff4 <__i2b>
   2320c:	d9000b17 	ldw	r4,44(sp)
   23210:	1029883a 	mov	r20,r2
   23214:	0100050e 	bge	zero,r4,2322c <_dtoa_r+0xa80>
   23218:	d9800b17 	ldw	r6,44(sp)
   2321c:	8009883a 	mov	r4,r16
   23220:	100b883a 	mov	r5,r2
   23224:	00262880 	call	26288 <__pow5mult>
   23228:	1029883a 	mov	r20,r2
   2322c:	d9c00417 	ldw	r7,16(sp)
   23230:	00800044 	movi	r2,1
   23234:	11c0f00e 	bge	r2,r7,235f8 <_dtoa_r+0xe4c>
   23238:	0023883a 	mov	r17,zero
   2323c:	d8800b17 	ldw	r2,44(sp)
   23240:	1001741e 	bne	r2,zero,23814 <_dtoa_r+0x1068>
   23244:	00800044 	movi	r2,1
   23248:	d8c00717 	ldw	r3,28(sp)
   2324c:	10c5883a 	add	r2,r2,r3
   23250:	108007cc 	andi	r2,r2,31
   23254:	10008026 	beq	r2,zero,23458 <_dtoa_r+0xcac>
   23258:	01000804 	movi	r4,32
   2325c:	2089c83a 	sub	r4,r4,r2
   23260:	00c00104 	movi	r3,4
   23264:	1902d00e 	bge	r3,r4,23da8 <_dtoa_r+0x15fc>
   23268:	d9000817 	ldw	r4,32(sp)
   2326c:	d9c00717 	ldw	r7,28(sp)
   23270:	00c00704 	movi	r3,28
   23274:	1885c83a 	sub	r2,r3,r2
   23278:	2089883a 	add	r4,r4,r2
   2327c:	388f883a 	add	r7,r7,r2
   23280:	d9000815 	stw	r4,32(sp)
   23284:	90a5883a 	add	r18,r18,r2
   23288:	d9c00715 	stw	r7,28(sp)
   2328c:	d9c00817 	ldw	r7,32(sp)
   23290:	01c0050e 	bge	zero,r7,232a8 <_dtoa_r+0xafc>
   23294:	e00b883a 	mov	r5,fp
   23298:	8009883a 	mov	r4,r16
   2329c:	380d883a 	mov	r6,r7
   232a0:	00263b40 	call	263b4 <__lshift>
   232a4:	1039883a 	mov	fp,r2
   232a8:	d8800717 	ldw	r2,28(sp)
   232ac:	0080050e 	bge	zero,r2,232c4 <_dtoa_r+0xb18>
   232b0:	a00b883a 	mov	r5,r20
   232b4:	8009883a 	mov	r4,r16
   232b8:	100d883a 	mov	r6,r2
   232bc:	00263b40 	call	263b4 <__lshift>
   232c0:	1029883a 	mov	r20,r2
   232c4:	d8c00d17 	ldw	r3,52(sp)
   232c8:	1801401e 	bne	r3,zero,237cc <_dtoa_r+0x1020>
   232cc:	d8800917 	ldw	r2,36(sp)
   232d0:	00815a0e 	bge	zero,r2,2383c <_dtoa_r+0x1090>
   232d4:	d8c00c17 	ldw	r3,48(sp)
   232d8:	18006f1e 	bne	r3,zero,23498 <_dtoa_r+0xcec>
   232dc:	b823883a 	mov	r17,r23
   232e0:	dc800917 	ldw	r18,36(sp)
   232e4:	00000206 	br	232f0 <_dtoa_r+0xb44>
   232e8:	0025c940 	call	25c94 <__multadd>
   232ec:	1039883a 	mov	fp,r2
   232f0:	e009883a 	mov	r4,fp
   232f4:	a00b883a 	mov	r5,r20
   232f8:	00225700 	call	22570 <quorem>
   232fc:	10800c04 	addi	r2,r2,48
   23300:	88800005 	stb	r2,0(r17)
   23304:	8c400044 	addi	r17,r17,1
   23308:	8dc7c83a 	sub	r3,r17,r23
   2330c:	8009883a 	mov	r4,r16
   23310:	e00b883a 	mov	r5,fp
   23314:	01800284 	movi	r6,10
   23318:	000f883a 	mov	r7,zero
   2331c:	1cbff216 	blt	r3,r18,232e8 <_dtoa_r+0xb3c>
   23320:	dd800917 	ldw	r22,36(sp)
   23324:	1007883a 	mov	r3,r2
   23328:	05823a0e 	bge	zero,r22,23c14 <_dtoa_r+0x1468>
   2332c:	bdad883a 	add	r22,r23,r22
   23330:	0023883a 	mov	r17,zero
   23334:	e00b883a 	mov	r5,fp
   23338:	01800044 	movi	r6,1
   2333c:	8009883a 	mov	r4,r16
   23340:	d8c01515 	stw	r3,84(sp)
   23344:	00263b40 	call	263b4 <__lshift>
   23348:	1009883a 	mov	r4,r2
   2334c:	a00b883a 	mov	r5,r20
   23350:	1039883a 	mov	fp,r2
   23354:	00265100 	call	26510 <__mcmp>
   23358:	d8c01517 	ldw	r3,84(sp)
   2335c:	0080d60e 	bge	zero,r2,236b8 <_dtoa_r+0xf0c>
   23360:	b13fffc3 	ldbu	r4,-1(r22)
   23364:	b0ffff84 	addi	r3,r22,-2
   23368:	01800e44 	movi	r6,57
   2336c:	00000306 	br	2337c <_dtoa_r+0xbd0>
   23370:	19000003 	ldbu	r4,0(r3)
   23374:	102d883a 	mov	r22,r2
   23378:	18ffffc4 	addi	r3,r3,-1
   2337c:	21403fcc 	andi	r5,r4,255
   23380:	2940201c 	xori	r5,r5,128
   23384:	297fe004 	addi	r5,r5,-128
   23388:	b0bfffc4 	addi	r2,r22,-1
   2338c:	2981a71e 	bne	r5,r6,23a2c <_dtoa_r+0x1280>
   23390:	b8bff71e 	bne	r23,r2,23370 <_dtoa_r+0xbc4>
   23394:	d8800617 	ldw	r2,24(sp)
   23398:	10800044 	addi	r2,r2,1
   2339c:	d8800615 	stw	r2,24(sp)
   233a0:	00800c44 	movi	r2,49
   233a4:	b8800005 	stb	r2,0(r23)
   233a8:	8009883a 	mov	r4,r16
   233ac:	a00b883a 	mov	r5,r20
   233b0:	0025c6c0 	call	25c6c <_Bfree>
   233b4:	a83e9e26 	beq	r21,zero,22e30 <_dtoa_r+0x684>
   233b8:	88000426 	beq	r17,zero,233cc <_dtoa_r+0xc20>
   233bc:	8d400326 	beq	r17,r21,233cc <_dtoa_r+0xc20>
   233c0:	8009883a 	mov	r4,r16
   233c4:	880b883a 	mov	r5,r17
   233c8:	0025c6c0 	call	25c6c <_Bfree>
   233cc:	8009883a 	mov	r4,r16
   233d0:	a80b883a 	mov	r5,r21
   233d4:	0025c6c0 	call	25c6c <_Bfree>
   233d8:	003e9506 	br	22e30 <_dtoa_r+0x684>
   233dc:	00c00044 	movi	r3,1
   233e0:	d8c00d15 	stw	r3,52(sp)
   233e4:	003d9f06 	br	22a64 <_dtoa_r+0x2b8>
   233e8:	d9000817 	ldw	r4,32(sp)
   233ec:	d8800617 	ldw	r2,24(sp)
   233f0:	d8000b15 	stw	zero,44(sp)
   233f4:	2089c83a 	sub	r4,r4,r2
   233f8:	0087c83a 	sub	r3,zero,r2
   233fc:	d9000815 	stw	r4,32(sp)
   23400:	d8c00a15 	stw	r3,40(sp)
   23404:	003da306 	br	22a94 <_dtoa_r+0x2e8>
   23408:	0529c83a 	sub	r20,zero,r20
   2340c:	dd000815 	stw	r20,32(sp)
   23410:	d8000715 	stw	zero,28(sp)
   23414:	003d9806 	br	22a78 <_dtoa_r+0x2cc>
   23418:	d9000617 	ldw	r4,24(sp)
   2341c:	00290400 	call	29040 <__floatsidf>
   23420:	1009883a 	mov	r4,r2
   23424:	180b883a 	mov	r5,r3
   23428:	980d883a 	mov	r6,r19
   2342c:	900f883a 	mov	r7,r18
   23430:	0028ec00 	call	28ec0 <__nedf2>
   23434:	103d7a26 	beq	r2,zero,22a20 <_dtoa_r+0x274>
   23438:	d8800617 	ldw	r2,24(sp)
   2343c:	10bfffc4 	addi	r2,r2,-1
   23440:	d8800615 	stw	r2,24(sp)
   23444:	003d7606 	br	22a20 <_dtoa_r+0x274>
   23448:	dcc00a17 	ldw	r19,40(sp)
   2344c:	dc800817 	ldw	r18,32(sp)
   23450:	002b883a 	mov	r21,zero
   23454:	003f4906 	br	2317c <_dtoa_r+0x9d0>
   23458:	00800704 	movi	r2,28
   2345c:	d8c00817 	ldw	r3,32(sp)
   23460:	d9000717 	ldw	r4,28(sp)
   23464:	90a5883a 	add	r18,r18,r2
   23468:	1887883a 	add	r3,r3,r2
   2346c:	2089883a 	add	r4,r4,r2
   23470:	d8c00815 	stw	r3,32(sp)
   23474:	d9000715 	stw	r4,28(sp)
   23478:	003f8406 	br	2328c <_dtoa_r+0xae0>
   2347c:	d9c00317 	ldw	r7,12(sp)
   23480:	013efb84 	movi	r4,-1042
   23484:	2509c83a 	sub	r4,r4,r20
   23488:	3908983a 	sll	r4,r7,r4
   2348c:	003d3006 	br	22950 <_dtoa_r+0x1a4>
   23490:	d8000d15 	stw	zero,52(sp)
   23494:	003d7306 	br	22a64 <_dtoa_r+0x2b8>
   23498:	0480050e 	bge	zero,r18,234b0 <_dtoa_r+0xd04>
   2349c:	a80b883a 	mov	r5,r21
   234a0:	8009883a 	mov	r4,r16
   234a4:	900d883a 	mov	r6,r18
   234a8:	00263b40 	call	263b4 <__lshift>
   234ac:	102b883a 	mov	r21,r2
   234b0:	8801611e 	bne	r17,zero,23a38 <_dtoa_r+0x128c>
   234b4:	a827883a 	mov	r19,r21
   234b8:	d8c00317 	ldw	r3,12(sp)
   234bc:	d9000917 	ldw	r4,36(sp)
   234c0:	b8bfffc4 	addi	r2,r23,-1
   234c4:	18c0004c 	andi	r3,r3,1
   234c8:	1105883a 	add	r2,r2,r4
   234cc:	b825883a 	mov	r18,r23
   234d0:	d8800515 	stw	r2,20(sp)
   234d4:	a823883a 	mov	r17,r21
   234d8:	d8c00315 	stw	r3,12(sp)
   234dc:	ddc00715 	stw	r23,28(sp)
   234e0:	e009883a 	mov	r4,fp
   234e4:	a00b883a 	mov	r5,r20
   234e8:	00225700 	call	22570 <quorem>
   234ec:	e009883a 	mov	r4,fp
   234f0:	880b883a 	mov	r5,r17
   234f4:	102d883a 	mov	r22,r2
   234f8:	00265100 	call	26510 <__mcmp>
   234fc:	980d883a 	mov	r6,r19
   23500:	8009883a 	mov	r4,r16
   23504:	a00b883a 	mov	r5,r20
   23508:	102b883a 	mov	r21,r2
   2350c:	00265680 	call	26568 <__mdiff>
   23510:	100d883a 	mov	r6,r2
   23514:	10800317 	ldw	r2,12(r2)
   23518:	b5c00c04 	addi	r23,r22,48
   2351c:	10008c26 	beq	r2,zero,23750 <_dtoa_r+0xfa4>
   23520:	8009883a 	mov	r4,r16
   23524:	300b883a 	mov	r5,r6
   23528:	0025c6c0 	call	25c6c <_Bfree>
   2352c:	00800044 	movi	r2,1
   23530:	a8007116 	blt	r21,zero,236f8 <_dtoa_r+0xf4c>
   23534:	a800041e 	bne	r21,zero,23548 <_dtoa_r+0xd9c>
   23538:	d9c00417 	ldw	r7,16(sp)
   2353c:	3800021e 	bne	r7,zero,23548 <_dtoa_r+0xd9c>
   23540:	d8c00317 	ldw	r3,12(sp)
   23544:	18006c26 	beq	r3,zero,236f8 <_dtoa_r+0xf4c>
   23548:	00814c16 	blt	zero,r2,23a7c <_dtoa_r+0x12d0>
   2354c:	d8c00517 	ldw	r3,20(sp)
   23550:	95400044 	addi	r21,r18,1
   23554:	95c00005 	stb	r23,0(r18)
   23558:	a82d883a 	mov	r22,r21
   2355c:	90c14d26 	beq	r18,r3,23a94 <_dtoa_r+0x12e8>
   23560:	e00b883a 	mov	r5,fp
   23564:	8009883a 	mov	r4,r16
   23568:	01800284 	movi	r6,10
   2356c:	000f883a 	mov	r7,zero
   23570:	0025c940 	call	25c94 <__multadd>
   23574:	1039883a 	mov	fp,r2
   23578:	8cc08b26 	beq	r17,r19,237a8 <_dtoa_r+0xffc>
   2357c:	880b883a 	mov	r5,r17
   23580:	01800284 	movi	r6,10
   23584:	000f883a 	mov	r7,zero
   23588:	8009883a 	mov	r4,r16
   2358c:	0025c940 	call	25c94 <__multadd>
   23590:	980b883a 	mov	r5,r19
   23594:	8009883a 	mov	r4,r16
   23598:	01800284 	movi	r6,10
   2359c:	000f883a 	mov	r7,zero
   235a0:	1023883a 	mov	r17,r2
   235a4:	0025c940 	call	25c94 <__multadd>
   235a8:	1027883a 	mov	r19,r2
   235ac:	a825883a 	mov	r18,r21
   235b0:	003fcb06 	br	234e0 <_dtoa_r+0xd34>
   235b4:	d9c00417 	ldw	r7,16(sp)
   235b8:	00800104 	movi	r2,4
   235bc:	3880e426 	beq	r7,r2,23950 <_dtoa_r+0x11a4>
   235c0:	00800144 	movi	r2,5
   235c4:	38be3c1e 	bne	r7,r2,22eb8 <_dtoa_r+0x70c>
   235c8:	00c00044 	movi	r3,1
   235cc:	d8c00c15 	stw	r3,48(sp)
   235d0:	d9c02117 	ldw	r7,132(sp)
   235d4:	d8800617 	ldw	r2,24(sp)
   235d8:	388f883a 	add	r7,r7,r2
   235dc:	3c800044 	addi	r18,r7,1
   235e0:	d9c00e15 	stw	r7,56(sp)
   235e4:	dc800915 	stw	r18,36(sp)
   235e8:	04bd3e16 	blt	zero,r18,22ae4 <_dtoa_r+0x338>
   235ec:	80001115 	stw	zero,68(r16)
   235f0:	000b883a 	mov	r5,zero
   235f4:	003d4606 	br	22b10 <_dtoa_r+0x364>
   235f8:	d8c00317 	ldw	r3,12(sp)
   235fc:	183f0e1e 	bne	r3,zero,23238 <_dtoa_r+0xa8c>
   23600:	00c00434 	movhi	r3,16
   23604:	18ffffc4 	addi	r3,r3,-1
   23608:	88c6703a 	and	r3,r17,r3
   2360c:	183f0a1e 	bne	r3,zero,23238 <_dtoa_r+0xa8c>
   23610:	8c5ffc2c 	andhi	r17,r17,32752
   23614:	883f0826 	beq	r17,zero,23238 <_dtoa_r+0xa8c>
   23618:	d9000817 	ldw	r4,32(sp)
   2361c:	d9c00717 	ldw	r7,28(sp)
   23620:	1023883a 	mov	r17,r2
   23624:	2089883a 	add	r4,r4,r2
   23628:	388f883a 	add	r7,r7,r2
   2362c:	d9000815 	stw	r4,32(sp)
   23630:	d9c00715 	stw	r7,28(sp)
   23634:	003f0106 	br	2323c <_dtoa_r+0xa90>
   23638:	9005883a 	mov	r2,r18
   2363c:	003ed306 	br	2318c <_dtoa_r+0x9e0>
   23640:	d8800917 	ldw	r2,36(sp)
   23644:	00be3516 	blt	zero,r2,22f1c <_dtoa_r+0x770>
   23648:	1000b61e 	bne	r2,zero,23924 <_dtoa_r+0x1178>
   2364c:	9009883a 	mov	r4,r18
   23650:	980b883a 	mov	r5,r19
   23654:	000d883a 	mov	r6,zero
   23658:	01d00534 	movhi	r7,16404
   2365c:	00289cc0 	call	289cc <__muldf3>
   23660:	d9800317 	ldw	r6,12(sp)
   23664:	1009883a 	mov	r4,r2
   23668:	180b883a 	mov	r5,r3
   2366c:	880f883a 	mov	r7,r17
   23670:	0028f800 	call	28f80 <__gedf2>
   23674:	0029883a 	mov	r20,zero
   23678:	002b883a 	mov	r21,zero
   2367c:	10007e16 	blt	r2,zero,23878 <_dtoa_r+0x10cc>
   23680:	d8802117 	ldw	r2,132(sp)
   23684:	b82d883a 	mov	r22,r23
   23688:	0084303a 	nor	r2,zero,r2
   2368c:	d8800615 	stw	r2,24(sp)
   23690:	8009883a 	mov	r4,r16
   23694:	a00b883a 	mov	r5,r20
   23698:	0025c6c0 	call	25c6c <_Bfree>
   2369c:	a83f4b1e 	bne	r21,zero,233cc <_dtoa_r+0xc20>
   236a0:	003de306 	br	22e30 <_dtoa_r+0x684>
   236a4:	e00b883a 	mov	r5,fp
   236a8:	8009883a 	mov	r4,r16
   236ac:	00262880 	call	26288 <__pow5mult>
   236b0:	1039883a 	mov	fp,r2
   236b4:	003ed206 	br	23200 <_dtoa_r+0xa54>
   236b8:	1000021e 	bne	r2,zero,236c4 <_dtoa_r+0xf18>
   236bc:	18c0004c 	andi	r3,r3,1
   236c0:	183f271e 	bne	r3,zero,23360 <_dtoa_r+0xbb4>
   236c4:	01000c04 	movi	r4,48
   236c8:	00000106 	br	236d0 <_dtoa_r+0xf24>
   236cc:	102d883a 	mov	r22,r2
   236d0:	b0bfffc4 	addi	r2,r22,-1
   236d4:	10c00007 	ldb	r3,0(r2)
   236d8:	193ffc26 	beq	r3,r4,236cc <_dtoa_r+0xf20>
   236dc:	003f3206 	br	233a8 <_dtoa_r+0xbfc>
   236e0:	d8c00f17 	ldw	r3,60(sp)
   236e4:	18015026 	beq	r3,zero,23c28 <_dtoa_r+0x147c>
   236e8:	10810cc4 	addi	r2,r2,1075
   236ec:	dcc00a17 	ldw	r19,40(sp)
   236f0:	dc800817 	ldw	r18,32(sp)
   236f4:	003e9706 	br	23154 <_dtoa_r+0x9a8>
   236f8:	b807883a 	mov	r3,r23
   236fc:	182b883a 	mov	r21,r3
   23700:	ddc00717 	ldw	r23,28(sp)
   23704:	00800e0e 	bge	zero,r2,23740 <_dtoa_r+0xf94>
   23708:	e00b883a 	mov	r5,fp
   2370c:	01800044 	movi	r6,1
   23710:	8009883a 	mov	r4,r16
   23714:	d8c01515 	stw	r3,84(sp)
   23718:	00263b40 	call	263b4 <__lshift>
   2371c:	1009883a 	mov	r4,r2
   23720:	a00b883a 	mov	r5,r20
   23724:	1039883a 	mov	fp,r2
   23728:	00265100 	call	26510 <__mcmp>
   2372c:	d8c01517 	ldw	r3,84(sp)
   23730:	0081880e 	bge	zero,r2,23d54 <_dtoa_r+0x15a8>
   23734:	00800e44 	movi	r2,57
   23738:	b0c00c44 	addi	r3,r22,49
   2373c:	a8816326 	beq	r21,r2,23ccc <_dtoa_r+0x1520>
   23740:	90c00005 	stb	r3,0(r18)
   23744:	95800044 	addi	r22,r18,1
   23748:	982b883a 	mov	r21,r19
   2374c:	003f1606 	br	233a8 <_dtoa_r+0xbfc>
   23750:	300b883a 	mov	r5,r6
   23754:	e009883a 	mov	r4,fp
   23758:	d9801515 	stw	r6,84(sp)
   2375c:	00265100 	call	26510 <__mcmp>
   23760:	d9801517 	ldw	r6,84(sp)
   23764:	8009883a 	mov	r4,r16
   23768:	d8801515 	stw	r2,84(sp)
   2376c:	300b883a 	mov	r5,r6
   23770:	0025c6c0 	call	25c6c <_Bfree>
   23774:	d8801517 	ldw	r2,84(sp)
   23778:	103f6d1e 	bne	r2,zero,23530 <_dtoa_r+0xd84>
   2377c:	d9c00417 	ldw	r7,16(sp)
   23780:	383f6b1e 	bne	r7,zero,23530 <_dtoa_r+0xd84>
   23784:	d8c00317 	ldw	r3,12(sp)
   23788:	183f691e 	bne	r3,zero,23530 <_dtoa_r+0xd84>
   2378c:	b807883a 	mov	r3,r23
   23790:	00800e44 	movi	r2,57
   23794:	ddc00717 	ldw	r23,28(sp)
   23798:	18814c26 	beq	r3,r2,23ccc <_dtoa_r+0x1520>
   2379c:	057fe80e 	bge	zero,r21,23740 <_dtoa_r+0xf94>
   237a0:	b0c00c44 	addi	r3,r22,49
   237a4:	003fe606 	br	23740 <_dtoa_r+0xf94>
   237a8:	880b883a 	mov	r5,r17
   237ac:	8009883a 	mov	r4,r16
   237b0:	01800284 	movi	r6,10
   237b4:	000f883a 	mov	r7,zero
   237b8:	0025c940 	call	25c94 <__multadd>
   237bc:	1023883a 	mov	r17,r2
   237c0:	1027883a 	mov	r19,r2
   237c4:	a825883a 	mov	r18,r21
   237c8:	003f4506 	br	234e0 <_dtoa_r+0xd34>
   237cc:	e009883a 	mov	r4,fp
   237d0:	a00b883a 	mov	r5,r20
   237d4:	00265100 	call	26510 <__mcmp>
   237d8:	103ebc0e 	bge	r2,zero,232cc <_dtoa_r+0xb20>
   237dc:	e00b883a 	mov	r5,fp
   237e0:	8009883a 	mov	r4,r16
   237e4:	01800284 	movi	r6,10
   237e8:	000f883a 	mov	r7,zero
   237ec:	0025c940 	call	25c94 <__multadd>
   237f0:	1039883a 	mov	fp,r2
   237f4:	d8800617 	ldw	r2,24(sp)
   237f8:	d8c00c17 	ldw	r3,48(sp)
   237fc:	10bfffc4 	addi	r2,r2,-1
   23800:	d8800615 	stw	r2,24(sp)
   23804:	1801571e 	bne	r3,zero,23d64 <_dtoa_r+0x15b8>
   23808:	d9c00e17 	ldw	r7,56(sp)
   2380c:	d9c00915 	stw	r7,36(sp)
   23810:	003eae06 	br	232cc <_dtoa_r+0xb20>
   23814:	a0800417 	ldw	r2,16(r20)
   23818:	10800104 	addi	r2,r2,4
   2381c:	1085883a 	add	r2,r2,r2
   23820:	1085883a 	add	r2,r2,r2
   23824:	a085883a 	add	r2,r20,r2
   23828:	11000017 	ldw	r4,0(r2)
   2382c:	0025edc0 	call	25edc <__hi0bits>
   23830:	00c00804 	movi	r3,32
   23834:	1885c83a 	sub	r2,r3,r2
   23838:	003e8306 	br	23248 <_dtoa_r+0xa9c>
   2383c:	d9c00417 	ldw	r7,16(sp)
   23840:	00800084 	movi	r2,2
   23844:	11fea30e 	bge	r2,r7,232d4 <_dtoa_r+0xb28>
   23848:	d8800917 	ldw	r2,36(sp)
   2384c:	103f8c1e 	bne	r2,zero,23680 <_dtoa_r+0xed4>
   23850:	a00b883a 	mov	r5,r20
   23854:	8009883a 	mov	r4,r16
   23858:	01800144 	movi	r6,5
   2385c:	000f883a 	mov	r7,zero
   23860:	0025c940 	call	25c94 <__multadd>
   23864:	e009883a 	mov	r4,fp
   23868:	100b883a 	mov	r5,r2
   2386c:	1029883a 	mov	r20,r2
   23870:	00265100 	call	26510 <__mcmp>
   23874:	00bf820e 	bge	zero,r2,23680 <_dtoa_r+0xed4>
   23878:	00800c44 	movi	r2,49
   2387c:	b8800005 	stb	r2,0(r23)
   23880:	d8800617 	ldw	r2,24(sp)
   23884:	bd800044 	addi	r22,r23,1
   23888:	10800044 	addi	r2,r2,1
   2388c:	d8800615 	stw	r2,24(sp)
   23890:	003f7f06 	br	23690 <_dtoa_r+0xee4>
   23894:	dc000417 	ldw	r16,16(sp)
   23898:	003d6506 	br	22e30 <_dtoa_r+0x684>
   2389c:	9009883a 	mov	r4,r18
   238a0:	00290400 	call	29040 <__floatsidf>
   238a4:	1009883a 	mov	r4,r2
   238a8:	180b883a 	mov	r5,r3
   238ac:	980d883a 	mov	r6,r19
   238b0:	a00f883a 	mov	r7,r20
   238b4:	00289cc0 	call	289cc <__muldf3>
   238b8:	1009883a 	mov	r4,r2
   238bc:	180b883a 	mov	r5,r3
   238c0:	000d883a 	mov	r6,zero
   238c4:	01d00734 	movhi	r7,16412
   238c8:	00289180 	call	28918 <__adddf3>
   238cc:	057f3034 	movhi	r21,64704
   238d0:	1025883a 	mov	r18,r2
   238d4:	1d6b883a 	add	r21,r3,r21
   238d8:	9809883a 	mov	r4,r19
   238dc:	a00b883a 	mov	r5,r20
   238e0:	000d883a 	mov	r6,zero
   238e4:	01d00534 	movhi	r7,16404
   238e8:	002896c0 	call	2896c <__subdf3>
   238ec:	1009883a 	mov	r4,r2
   238f0:	180b883a 	mov	r5,r3
   238f4:	900d883a 	mov	r6,r18
   238f8:	a80f883a 	mov	r7,r21
   238fc:	1027883a 	mov	r19,r2
   23900:	1829883a 	mov	r20,r3
   23904:	0028f1c0 	call	28f1c <__gtdf2>
   23908:	00806616 	blt	zero,r2,23aa4 <_dtoa_r+0x12f8>
   2390c:	a9e0003c 	xorhi	r7,r21,32768
   23910:	9809883a 	mov	r4,r19
   23914:	a00b883a 	mov	r5,r20
   23918:	900d883a 	mov	r6,r18
   2391c:	0028fe40 	call	28fe4 <__ltdf2>
   23920:	103d710e 	bge	r2,zero,22ee8 <_dtoa_r+0x73c>
   23924:	0029883a 	mov	r20,zero
   23928:	002b883a 	mov	r21,zero
   2392c:	003f5406 	br	23680 <_dtoa_r+0xed4>
   23930:	d9800a17 	ldw	r6,40(sp)
   23934:	e00b883a 	mov	r5,fp
   23938:	8009883a 	mov	r4,r16
   2393c:	00262880 	call	26288 <__pow5mult>
   23940:	1039883a 	mov	fp,r2
   23944:	003e2e06 	br	23200 <_dtoa_r+0xa54>
   23948:	d8000c15 	stw	zero,48(sp)
   2394c:	003f2006 	br	235d0 <_dtoa_r+0xe24>
   23950:	00800044 	movi	r2,1
   23954:	d8800c15 	stw	r2,48(sp)
   23958:	003c5d06 	br	22ad0 <_dtoa_r+0x324>
   2395c:	d8c00a17 	ldw	r3,40(sp)
   23960:	d9000b17 	ldw	r4,44(sp)
   23964:	dcc00a15 	stw	r19,40(sp)
   23968:	98c5c83a 	sub	r2,r19,r3
   2396c:	2089883a 	add	r4,r4,r2
   23970:	d9000b15 	stw	r4,44(sp)
   23974:	0027883a 	mov	r19,zero
   23978:	003df206 	br	23144 <_dtoa_r+0x998>
   2397c:	d9000317 	ldw	r4,12(sp)
   23980:	8829883a 	mov	r20,r17
   23984:	04800084 	movi	r18,2
   23988:	d9001015 	stw	r4,64(sp)
   2398c:	003c8106 	br	22b94 <_dtoa_r+0x3e8>
   23990:	04800044 	movi	r18,1
   23994:	dc800e15 	stw	r18,56(sp)
   23998:	dc800915 	stw	r18,36(sp)
   2399c:	dc802115 	stw	r18,132(sp)
   239a0:	003f1206 	br	235ec <_dtoa_r+0xe40>
   239a4:	d8800617 	ldw	r2,24(sp)
   239a8:	00abc83a 	sub	r21,zero,r2
   239ac:	a800a426 	beq	r21,zero,23c40 <_dtoa_r+0x1494>
   239b0:	a88003cc 	andi	r2,r21,15
   239b4:	100490fa 	slli	r2,r2,3
   239b8:	00c000f4 	movhi	r3,3
   239bc:	18f22a04 	addi	r3,r3,-14168
   239c0:	d9000317 	ldw	r4,12(sp)
   239c4:	1885883a 	add	r2,r3,r2
   239c8:	11800017 	ldw	r6,0(r2)
   239cc:	11c00117 	ldw	r7,4(r2)
   239d0:	a82bd13a 	srai	r21,r21,4
   239d4:	880b883a 	mov	r5,r17
   239d8:	00289cc0 	call	289cc <__muldf3>
   239dc:	1027883a 	mov	r19,r2
   239e0:	1829883a 	mov	r20,r3
   239e4:	a800e826 	beq	r21,zero,23d88 <_dtoa_r+0x15dc>
   239e8:	058000f4 	movhi	r22,3
   239ec:	b5b22004 	addi	r22,r22,-14208
   239f0:	04800084 	movi	r18,2
   239f4:	a980004c 	andi	r6,r21,1
   239f8:	1009883a 	mov	r4,r2
   239fc:	a82bd07a 	srai	r21,r21,1
   23a00:	180b883a 	mov	r5,r3
   23a04:	30000426 	beq	r6,zero,23a18 <_dtoa_r+0x126c>
   23a08:	b1800017 	ldw	r6,0(r22)
   23a0c:	b1c00117 	ldw	r7,4(r22)
   23a10:	94800044 	addi	r18,r18,1
   23a14:	00289cc0 	call	289cc <__muldf3>
   23a18:	b5800204 	addi	r22,r22,8
   23a1c:	a83ff51e 	bne	r21,zero,239f4 <_dtoa_r+0x1248>
   23a20:	1027883a 	mov	r19,r2
   23a24:	1829883a 	mov	r20,r3
   23a28:	003c7306 	br	22bf8 <_dtoa_r+0x44c>
   23a2c:	21000044 	addi	r4,r4,1
   23a30:	11000005 	stb	r4,0(r2)
   23a34:	003e5c06 	br	233a8 <_dtoa_r+0xbfc>
   23a38:	a9400117 	ldw	r5,4(r21)
   23a3c:	8009883a 	mov	r4,r16
   23a40:	0025bc40 	call	25bc4 <_Balloc>
   23a44:	a9800417 	ldw	r6,16(r21)
   23a48:	11000304 	addi	r4,r2,12
   23a4c:	a9400304 	addi	r5,r21,12
   23a50:	31800084 	addi	r6,r6,2
   23a54:	318d883a 	add	r6,r6,r6
   23a58:	318d883a 	add	r6,r6,r6
   23a5c:	1023883a 	mov	r17,r2
   23a60:	002581c0 	call	2581c <memcpy>
   23a64:	8009883a 	mov	r4,r16
   23a68:	880b883a 	mov	r5,r17
   23a6c:	01800044 	movi	r6,1
   23a70:	00263b40 	call	263b4 <__lshift>
   23a74:	1027883a 	mov	r19,r2
   23a78:	003e8f06 	br	234b8 <_dtoa_r+0xd0c>
   23a7c:	b807883a 	mov	r3,r23
   23a80:	00800e44 	movi	r2,57
   23a84:	ddc00717 	ldw	r23,28(sp)
   23a88:	18809026 	beq	r3,r2,23ccc <_dtoa_r+0x1520>
   23a8c:	18c00044 	addi	r3,r3,1
   23a90:	003f2b06 	br	23740 <_dtoa_r+0xf94>
   23a94:	b807883a 	mov	r3,r23
   23a98:	982b883a 	mov	r21,r19
   23a9c:	ddc00717 	ldw	r23,28(sp)
   23aa0:	003e2406 	br	23334 <_dtoa_r+0xb88>
   23aa4:	0029883a 	mov	r20,zero
   23aa8:	002b883a 	mov	r21,zero
   23aac:	003f7206 	br	23878 <_dtoa_r+0x10cc>
   23ab0:	593fffc4 	addi	r4,r11,-1
   23ab4:	200490fa 	slli	r2,r4,3
   23ab8:	00c000f4 	movhi	r3,3
   23abc:	18f22a04 	addi	r3,r3,-14168
   23ac0:	d9001015 	stw	r4,64(sp)
   23ac4:	1885883a 	add	r2,r3,r2
   23ac8:	11000017 	ldw	r4,0(r2)
   23acc:	11400117 	ldw	r5,4(r2)
   23ad0:	900d883a 	mov	r6,r18
   23ad4:	a80f883a 	mov	r7,r21
   23ad8:	dac01615 	stw	r11,88(sp)
   23adc:	00289cc0 	call	289cc <__muldf3>
   23ae0:	a00b883a 	mov	r5,r20
   23ae4:	9809883a 	mov	r4,r19
   23ae8:	d8c01215 	stw	r3,72(sp)
   23aec:	d8801115 	stw	r2,68(sp)
   23af0:	00291140 	call	29114 <__fixdfsi>
   23af4:	1009883a 	mov	r4,r2
   23af8:	1025883a 	mov	r18,r2
   23afc:	00290400 	call	29040 <__floatsidf>
   23b00:	9809883a 	mov	r4,r19
   23b04:	a00b883a 	mov	r5,r20
   23b08:	100d883a 	mov	r6,r2
   23b0c:	180f883a 	mov	r7,r3
   23b10:	94800c04 	addi	r18,r18,48
   23b14:	002896c0 	call	2896c <__subdf3>
   23b18:	bc800005 	stb	r18,0(r23)
   23b1c:	dac01617 	ldw	r11,88(sp)
   23b20:	102b883a 	mov	r21,r2
   23b24:	00800044 	movi	r2,1
   23b28:	bd800044 	addi	r22,r23,1
   23b2c:	1815883a 	mov	r10,r3
   23b30:	58802226 	beq	r11,r2,23bbc <_dtoa_r+0x1410>
   23b34:	bad7883a 	add	r11,r23,r11
   23b38:	dc001415 	stw	r16,80(sp)
   23b3c:	a805883a 	mov	r2,r21
   23b40:	b027883a 	mov	r19,r22
   23b44:	5821883a 	mov	r16,r11
   23b48:	882b883a 	mov	r21,r17
   23b4c:	000d883a 	mov	r6,zero
   23b50:	01d00934 	movhi	r7,16420
   23b54:	1009883a 	mov	r4,r2
   23b58:	180b883a 	mov	r5,r3
   23b5c:	00289cc0 	call	289cc <__muldf3>
   23b60:	180b883a 	mov	r5,r3
   23b64:	1009883a 	mov	r4,r2
   23b68:	1829883a 	mov	r20,r3
   23b6c:	1023883a 	mov	r17,r2
   23b70:	00291140 	call	29114 <__fixdfsi>
   23b74:	1009883a 	mov	r4,r2
   23b78:	1025883a 	mov	r18,r2
   23b7c:	00290400 	call	29040 <__floatsidf>
   23b80:	8809883a 	mov	r4,r17
   23b84:	a00b883a 	mov	r5,r20
   23b88:	100d883a 	mov	r6,r2
   23b8c:	180f883a 	mov	r7,r3
   23b90:	94800c04 	addi	r18,r18,48
   23b94:	002896c0 	call	2896c <__subdf3>
   23b98:	9cc00044 	addi	r19,r19,1
   23b9c:	9cbfffc5 	stb	r18,-1(r19)
   23ba0:	9c3fea1e 	bne	r19,r16,23b4c <_dtoa_r+0x13a0>
   23ba4:	1815883a 	mov	r10,r3
   23ba8:	d8c01017 	ldw	r3,64(sp)
   23bac:	dc001417 	ldw	r16,80(sp)
   23bb0:	a823883a 	mov	r17,r21
   23bb4:	b0ed883a 	add	r22,r22,r3
   23bb8:	102b883a 	mov	r21,r2
   23bbc:	d9001117 	ldw	r4,68(sp)
   23bc0:	d9401217 	ldw	r5,72(sp)
   23bc4:	000d883a 	mov	r6,zero
   23bc8:	01cff834 	movhi	r7,16352
   23bcc:	da801515 	stw	r10,84(sp)
   23bd0:	00289180 	call	28918 <__adddf3>
   23bd4:	da801517 	ldw	r10,84(sp)
   23bd8:	1009883a 	mov	r4,r2
   23bdc:	180b883a 	mov	r5,r3
   23be0:	500f883a 	mov	r7,r10
   23be4:	a80d883a 	mov	r6,r21
   23be8:	0028fe40 	call	28fe4 <__ltdf2>
   23bec:	da801517 	ldw	r10,84(sp)
   23bf0:	10003b0e 	bge	r2,zero,23ce0 <_dtoa_r+0x1534>
   23bf4:	d9c01317 	ldw	r7,76(sp)
   23bf8:	b53fffc3 	ldbu	r20,-1(r22)
   23bfc:	d9c00615 	stw	r7,24(sp)
   23c00:	003d3106 	br	230c8 <_dtoa_r+0x91c>
   23c04:	d8800817 	ldw	r2,32(sp)
   23c08:	11e5c83a 	sub	r18,r2,r7
   23c0c:	0005883a 	mov	r2,zero
   23c10:	003d5006 	br	23154 <_dtoa_r+0x9a8>
   23c14:	05800044 	movi	r22,1
   23c18:	003dc406 	br	2332c <_dtoa_r+0xb80>
   23c1c:	a5000044 	addi	r20,r20,1
   23c20:	15000005 	stb	r20,0(r2)
   23c24:	003c8206 	br	22e30 <_dtoa_r+0x684>
   23c28:	d8800217 	ldw	r2,8(sp)
   23c2c:	00c00d84 	movi	r3,54
   23c30:	dcc00a17 	ldw	r19,40(sp)
   23c34:	1885c83a 	sub	r2,r3,r2
   23c38:	dc800817 	ldw	r18,32(sp)
   23c3c:	003d4506 	br	23154 <_dtoa_r+0x9a8>
   23c40:	dcc00317 	ldw	r19,12(sp)
   23c44:	8829883a 	mov	r20,r17
   23c48:	04800084 	movi	r18,2
   23c4c:	003bea06 	br	22bf8 <_dtoa_r+0x44c>
   23c50:	d9000917 	ldw	r4,36(sp)
   23c54:	203f1126 	beq	r4,zero,2389c <_dtoa_r+0x10f0>
   23c58:	d9c00e17 	ldw	r7,56(sp)
   23c5c:	01fca20e 	bge	zero,r7,22ee8 <_dtoa_r+0x73c>
   23c60:	a00b883a 	mov	r5,r20
   23c64:	9809883a 	mov	r4,r19
   23c68:	000d883a 	mov	r6,zero
   23c6c:	01d00934 	movhi	r7,16420
   23c70:	00289cc0 	call	289cc <__muldf3>
   23c74:	91000044 	addi	r4,r18,1
   23c78:	1027883a 	mov	r19,r2
   23c7c:	1829883a 	mov	r20,r3
   23c80:	00290400 	call	29040 <__floatsidf>
   23c84:	9809883a 	mov	r4,r19
   23c88:	a00b883a 	mov	r5,r20
   23c8c:	100d883a 	mov	r6,r2
   23c90:	180f883a 	mov	r7,r3
   23c94:	00289cc0 	call	289cc <__muldf3>
   23c98:	1009883a 	mov	r4,r2
   23c9c:	180b883a 	mov	r5,r3
   23ca0:	000d883a 	mov	r6,zero
   23ca4:	01d00734 	movhi	r7,16412
   23ca8:	00289180 	call	28918 <__adddf3>
   23cac:	1025883a 	mov	r18,r2
   23cb0:	d8800617 	ldw	r2,24(sp)
   23cb4:	057f3034 	movhi	r21,64704
   23cb8:	1d6b883a 	add	r21,r3,r21
   23cbc:	10bfffc4 	addi	r2,r2,-1
   23cc0:	d8801315 	stw	r2,76(sp)
   23cc4:	dac00e17 	ldw	r11,56(sp)
   23cc8:	003be706 	br	22c68 <_dtoa_r+0x4bc>
   23ccc:	01000e44 	movi	r4,57
   23cd0:	91000005 	stb	r4,0(r18)
   23cd4:	95800044 	addi	r22,r18,1
   23cd8:	982b883a 	mov	r21,r19
   23cdc:	003da106 	br	23364 <_dtoa_r+0xbb8>
   23ce0:	d9801117 	ldw	r6,68(sp)
   23ce4:	d9c01217 	ldw	r7,72(sp)
   23ce8:	0009883a 	mov	r4,zero
   23cec:	014ff834 	movhi	r5,16352
   23cf0:	da801515 	stw	r10,84(sp)
   23cf4:	002896c0 	call	2896c <__subdf3>
   23cf8:	da801517 	ldw	r10,84(sp)
   23cfc:	1009883a 	mov	r4,r2
   23d00:	180b883a 	mov	r5,r3
   23d04:	a80d883a 	mov	r6,r21
   23d08:	500f883a 	mov	r7,r10
   23d0c:	0028f1c0 	call	28f1c <__gtdf2>
   23d10:	00bc750e 	bge	zero,r2,22ee8 <_dtoa_r+0x73c>
   23d14:	01000c04 	movi	r4,48
   23d18:	00000106 	br	23d20 <_dtoa_r+0x1574>
   23d1c:	102d883a 	mov	r22,r2
   23d20:	b0bfffc4 	addi	r2,r22,-1
   23d24:	10c00007 	ldb	r3,0(r2)
   23d28:	193ffc26 	beq	r3,r4,23d1c <_dtoa_r+0x1570>
   23d2c:	d8801317 	ldw	r2,76(sp)
   23d30:	d8800615 	stw	r2,24(sp)
   23d34:	003c3e06 	br	22e30 <_dtoa_r+0x684>
   23d38:	d9001317 	ldw	r4,76(sp)
   23d3c:	df001117 	ldw	fp,68(sp)
   23d40:	d9000615 	stw	r4,24(sp)
   23d44:	003ce006 	br	230c8 <_dtoa_r+0x91c>
   23d48:	df001117 	ldw	fp,68(sp)
   23d4c:	dc401217 	ldw	r17,72(sp)
   23d50:	003c6506 	br	22ee8 <_dtoa_r+0x73c>
   23d54:	103e7a1e 	bne	r2,zero,23740 <_dtoa_r+0xf94>
   23d58:	1880004c 	andi	r2,r3,1
   23d5c:	103e7826 	beq	r2,zero,23740 <_dtoa_r+0xf94>
   23d60:	003e7406 	br	23734 <_dtoa_r+0xf88>
   23d64:	8009883a 	mov	r4,r16
   23d68:	a80b883a 	mov	r5,r21
   23d6c:	01800284 	movi	r6,10
   23d70:	000f883a 	mov	r7,zero
   23d74:	0025c940 	call	25c94 <__multadd>
   23d78:	d9000e17 	ldw	r4,56(sp)
   23d7c:	102b883a 	mov	r21,r2
   23d80:	d9000915 	stw	r4,36(sp)
   23d84:	003d5106 	br	232cc <_dtoa_r+0xb20>
   23d88:	04800084 	movi	r18,2
   23d8c:	003b9a06 	br	22bf8 <_dtoa_r+0x44c>
   23d90:	d8c01317 	ldw	r3,76(sp)
   23d94:	d8c00615 	stw	r3,24(sp)
   23d98:	003ccb06 	br	230c8 <_dtoa_r+0x91c>
   23d9c:	d8c01317 	ldw	r3,76(sp)
   23da0:	d8c00615 	stw	r3,24(sp)
   23da4:	003c2206 	br	22e30 <_dtoa_r+0x684>
   23da8:	20fd3826 	beq	r4,r3,2328c <_dtoa_r+0xae0>
   23dac:	00c00f04 	movi	r3,60
   23db0:	1885c83a 	sub	r2,r3,r2
   23db4:	003da906 	br	2345c <_dtoa_r+0xcb0>
   23db8:	000b883a 	mov	r5,zero
   23dbc:	003b5406 	br	22b10 <_dtoa_r+0x364>
   23dc0:	04c00044 	movi	r19,1
   23dc4:	003b3b06 	br	22ab4 <_dtoa_r+0x308>

00023dc8 <_fflush_r>:
   23dc8:	defffb04 	addi	sp,sp,-20
   23dcc:	dcc00315 	stw	r19,12(sp)
   23dd0:	dc400115 	stw	r17,4(sp)
   23dd4:	dfc00415 	stw	ra,16(sp)
   23dd8:	dc800215 	stw	r18,8(sp)
   23ddc:	dc000015 	stw	r16,0(sp)
   23de0:	2027883a 	mov	r19,r4
   23de4:	2823883a 	mov	r17,r5
   23de8:	20000226 	beq	r4,zero,23df4 <_fflush_r+0x2c>
   23dec:	20800e17 	ldw	r2,56(r4)
   23df0:	10005726 	beq	r2,zero,23f50 <_fflush_r+0x188>
   23df4:	8880030b 	ldhu	r2,12(r17)
   23df8:	10c0020c 	andi	r3,r2,8
   23dfc:	18ffffcc 	andi	r3,r3,65535
   23e00:	18e0001c 	xori	r3,r3,32768
   23e04:	18e00004 	addi	r3,r3,-32768
   23e08:	1800311e 	bne	r3,zero,23ed0 <_fflush_r+0x108>
   23e0c:	89000117 	ldw	r4,4(r17)
   23e10:	10c20014 	ori	r3,r2,2048
   23e14:	88c0030d 	sth	r3,12(r17)
   23e18:	180b883a 	mov	r5,r3
   23e1c:	0100520e 	bge	zero,r4,23f68 <_fflush_r+0x1a0>
   23e20:	88c00a17 	ldw	r3,40(r17)
   23e24:	18002226 	beq	r3,zero,23eb0 <_fflush_r+0xe8>
   23e28:	1084000c 	andi	r2,r2,4096
   23e2c:	10bfffcc 	andi	r2,r2,65535
   23e30:	10a0001c 	xori	r2,r2,32768
   23e34:	10a00004 	addi	r2,r2,-32768
   23e38:	10004e26 	beq	r2,zero,23f74 <_fflush_r+0x1ac>
   23e3c:	8c001417 	ldw	r16,80(r17)
   23e40:	2940010c 	andi	r5,r5,4
   23e44:	297fffcc 	andi	r5,r5,65535
   23e48:	2960001c 	xori	r5,r5,32768
   23e4c:	29600004 	addi	r5,r5,-32768
   23e50:	28000626 	beq	r5,zero,23e6c <_fflush_r+0xa4>
   23e54:	89000117 	ldw	r4,4(r17)
   23e58:	88800c17 	ldw	r2,48(r17)
   23e5c:	8121c83a 	sub	r16,r16,r4
   23e60:	10000226 	beq	r2,zero,23e6c <_fflush_r+0xa4>
   23e64:	88800f17 	ldw	r2,60(r17)
   23e68:	80a1c83a 	sub	r16,r16,r2
   23e6c:	89400717 	ldw	r5,28(r17)
   23e70:	9809883a 	mov	r4,r19
   23e74:	800d883a 	mov	r6,r16
   23e78:	000f883a 	mov	r7,zero
   23e7c:	183ee83a 	callr	r3
   23e80:	8080281e 	bne	r16,r2,23f24 <_fflush_r+0x15c>
   23e84:	8880030b 	ldhu	r2,12(r17)
   23e88:	88c00417 	ldw	r3,16(r17)
   23e8c:	88000115 	stw	zero,4(r17)
   23e90:	113dffcc 	andi	r4,r2,63487
   23e94:	1084000c 	andi	r2,r2,4096
   23e98:	10bfffcc 	andi	r2,r2,65535
   23e9c:	10a0001c 	xori	r2,r2,32768
   23ea0:	8900030d 	sth	r4,12(r17)
   23ea4:	88c00015 	stw	r3,0(r17)
   23ea8:	10a00004 	addi	r2,r2,-32768
   23eac:	10002c1e 	bne	r2,zero,23f60 <_fflush_r+0x198>
   23eb0:	0005883a 	mov	r2,zero
   23eb4:	dfc00417 	ldw	ra,16(sp)
   23eb8:	dcc00317 	ldw	r19,12(sp)
   23ebc:	dc800217 	ldw	r18,8(sp)
   23ec0:	dc400117 	ldw	r17,4(sp)
   23ec4:	dc000017 	ldw	r16,0(sp)
   23ec8:	dec00504 	addi	sp,sp,20
   23ecc:	f800283a 	ret
   23ed0:	8c800417 	ldw	r18,16(r17)
   23ed4:	903ff626 	beq	r18,zero,23eb0 <_fflush_r+0xe8>
   23ed8:	8c000017 	ldw	r16,0(r17)
   23edc:	108000cc 	andi	r2,r2,3
   23ee0:	8c800015 	stw	r18,0(r17)
   23ee4:	84a1c83a 	sub	r16,r16,r18
   23ee8:	10001b1e 	bne	r2,zero,23f58 <_fflush_r+0x190>
   23eec:	88800517 	ldw	r2,20(r17)
   23ef0:	88800215 	stw	r2,8(r17)
   23ef4:	04000316 	blt	zero,r16,23f04 <_fflush_r+0x13c>
   23ef8:	003fed06 	br	23eb0 <_fflush_r+0xe8>
   23efc:	90a5883a 	add	r18,r18,r2
   23f00:	043feb0e 	bge	zero,r16,23eb0 <_fflush_r+0xe8>
   23f04:	88800917 	ldw	r2,36(r17)
   23f08:	89400717 	ldw	r5,28(r17)
   23f0c:	800f883a 	mov	r7,r16
   23f10:	900d883a 	mov	r6,r18
   23f14:	9809883a 	mov	r4,r19
   23f18:	103ee83a 	callr	r2
   23f1c:	80a1c83a 	sub	r16,r16,r2
   23f20:	00bff616 	blt	zero,r2,23efc <_fflush_r+0x134>
   23f24:	88c0030b 	ldhu	r3,12(r17)
   23f28:	00bfffc4 	movi	r2,-1
   23f2c:	18c01014 	ori	r3,r3,64
   23f30:	88c0030d 	sth	r3,12(r17)
   23f34:	dfc00417 	ldw	ra,16(sp)
   23f38:	dcc00317 	ldw	r19,12(sp)
   23f3c:	dc800217 	ldw	r18,8(sp)
   23f40:	dc400117 	ldw	r17,4(sp)
   23f44:	dc000017 	ldw	r16,0(sp)
   23f48:	dec00504 	addi	sp,sp,20
   23f4c:	f800283a 	ret
   23f50:	00240840 	call	24084 <__sinit>
   23f54:	003fa706 	br	23df4 <_fflush_r+0x2c>
   23f58:	0005883a 	mov	r2,zero
   23f5c:	003fe406 	br	23ef0 <_fflush_r+0x128>
   23f60:	8c001415 	stw	r16,80(r17)
   23f64:	003fd206 	br	23eb0 <_fflush_r+0xe8>
   23f68:	88c00f17 	ldw	r3,60(r17)
   23f6c:	00ffac16 	blt	zero,r3,23e20 <_fflush_r+0x58>
   23f70:	003fcf06 	br	23eb0 <_fflush_r+0xe8>
   23f74:	89400717 	ldw	r5,28(r17)
   23f78:	9809883a 	mov	r4,r19
   23f7c:	000d883a 	mov	r6,zero
   23f80:	01c00044 	movi	r7,1
   23f84:	183ee83a 	callr	r3
   23f88:	1021883a 	mov	r16,r2
   23f8c:	00bfffc4 	movi	r2,-1
   23f90:	80800326 	beq	r16,r2,23fa0 <_fflush_r+0x1d8>
   23f94:	8940030b 	ldhu	r5,12(r17)
   23f98:	88c00a17 	ldw	r3,40(r17)
   23f9c:	003fa806 	br	23e40 <_fflush_r+0x78>
   23fa0:	98c00017 	ldw	r3,0(r19)
   23fa4:	00800744 	movi	r2,29
   23fa8:	18bfde1e 	bne	r3,r2,23f24 <_fflush_r+0x15c>
   23fac:	003fc006 	br	23eb0 <_fflush_r+0xe8>

00023fb0 <fflush>:
   23fb0:	200b883a 	mov	r5,r4
   23fb4:	20000426 	beq	r4,zero,23fc8 <fflush+0x18>
   23fb8:	008000f4 	movhi	r2,3
   23fbc:	10b93904 	addi	r2,r2,-6940
   23fc0:	11000017 	ldw	r4,0(r2)
   23fc4:	0023dc81 	jmpi	23dc8 <_fflush_r>
   23fc8:	008000f4 	movhi	r2,3
   23fcc:	10b93804 	addi	r2,r2,-6944
   23fd0:	11000017 	ldw	r4,0(r2)
   23fd4:	014000b4 	movhi	r5,2
   23fd8:	294f7204 	addi	r5,r5,15816
   23fdc:	0024c641 	jmpi	24c64 <_fwalk_reent>

00023fe0 <__fp_lock>:
   23fe0:	0005883a 	mov	r2,zero
   23fe4:	f800283a 	ret

00023fe8 <__fp_unlock>:
   23fe8:	0005883a 	mov	r2,zero
   23fec:	f800283a 	ret

00023ff0 <_cleanup_r>:
   23ff0:	014000b4 	movhi	r5,2
   23ff4:	295de504 	addi	r5,r5,30612
   23ff8:	0024bbc1 	jmpi	24bbc <_fwalk>

00023ffc <__sfmoreglue>:
   23ffc:	defffc04 	addi	sp,sp,-16
   24000:	dc800215 	stw	r18,8(sp)
   24004:	2825883a 	mov	r18,r5
   24008:	dc000015 	stw	r16,0(sp)
   2400c:	01401704 	movi	r5,92
   24010:	2021883a 	mov	r16,r4
   24014:	9009883a 	mov	r4,r18
   24018:	dfc00315 	stw	ra,12(sp)
   2401c:	dc400115 	stw	r17,4(sp)
   24020:	00294340 	call	29434 <__mulsi3>
   24024:	8009883a 	mov	r4,r16
   24028:	11400304 	addi	r5,r2,12
   2402c:	1023883a 	mov	r17,r2
   24030:	0024fa00 	call	24fa0 <_malloc_r>
   24034:	1021883a 	mov	r16,r2
   24038:	10000726 	beq	r2,zero,24058 <__sfmoreglue+0x5c>
   2403c:	11000304 	addi	r4,r2,12
   24040:	10000015 	stw	zero,0(r2)
   24044:	14800115 	stw	r18,4(r2)
   24048:	11000215 	stw	r4,8(r2)
   2404c:	000b883a 	mov	r5,zero
   24050:	880d883a 	mov	r6,r17
   24054:	0025ae80 	call	25ae8 <memset>
   24058:	8005883a 	mov	r2,r16
   2405c:	dfc00317 	ldw	ra,12(sp)
   24060:	dc800217 	ldw	r18,8(sp)
   24064:	dc400117 	ldw	r17,4(sp)
   24068:	dc000017 	ldw	r16,0(sp)
   2406c:	dec00404 	addi	sp,sp,16
   24070:	f800283a 	ret

00024074 <_cleanup>:
   24074:	008000f4 	movhi	r2,3
   24078:	10b93804 	addi	r2,r2,-6944
   2407c:	11000017 	ldw	r4,0(r2)
   24080:	0023ff01 	jmpi	23ff0 <_cleanup_r>

00024084 <__sinit>:
   24084:	20800e17 	ldw	r2,56(r4)
   24088:	1000401e 	bne	r2,zero,2418c <__sinit+0x108>
   2408c:	21400117 	ldw	r5,4(r4)
   24090:	018000b4 	movhi	r6,2
   24094:	318ffc04 	addi	r6,r6,16368
   24098:	20c00217 	ldw	r3,8(r4)
   2409c:	21800f15 	stw	r6,60(r4)
   240a0:	2080bb04 	addi	r2,r4,748
   240a4:	02400044 	movi	r9,1
   240a8:	018000c4 	movi	r6,3
   240ac:	2180b915 	stw	r6,740(r4)
   240b0:	2080ba15 	stw	r2,744(r4)
   240b4:	22400e15 	stw	r9,56(r4)
   240b8:	20800317 	ldw	r2,12(r4)
   240bc:	2000b815 	stw	zero,736(r4)
   240c0:	020000b4 	movhi	r8,2
   240c4:	421cb604 	addi	r8,r8,29400
   240c8:	01c000b4 	movhi	r7,2
   240cc:	39dccb04 	addi	r7,r7,29484
   240d0:	018000b4 	movhi	r6,2
   240d4:	319ced04 	addi	r6,r6,29620
   240d8:	010000b4 	movhi	r4,2
   240dc:	211d0404 	addi	r4,r4,29712
   240e0:	02800104 	movi	r10,4
   240e4:	28000015 	stw	zero,0(r5)
   240e8:	28000115 	stw	zero,4(r5)
   240ec:	28000215 	stw	zero,8(r5)
   240f0:	2a80030d 	sth	r10,12(r5)
   240f4:	2800038d 	sth	zero,14(r5)
   240f8:	28000415 	stw	zero,16(r5)
   240fc:	28000515 	stw	zero,20(r5)
   24100:	28000615 	stw	zero,24(r5)
   24104:	29400715 	stw	r5,28(r5)
   24108:	2a000815 	stw	r8,32(r5)
   2410c:	29c00915 	stw	r7,36(r5)
   24110:	29800a15 	stw	r6,40(r5)
   24114:	29000b15 	stw	r4,44(r5)
   24118:	01400284 	movi	r5,10
   2411c:	18000015 	stw	zero,0(r3)
   24120:	18000115 	stw	zero,4(r3)
   24124:	18000215 	stw	zero,8(r3)
   24128:	1940030d 	sth	r5,12(r3)
   2412c:	1a40038d 	sth	r9,14(r3)
   24130:	18000415 	stw	zero,16(r3)
   24134:	18000515 	stw	zero,20(r3)
   24138:	18000615 	stw	zero,24(r3)
   2413c:	18c00715 	stw	r3,28(r3)
   24140:	1a000815 	stw	r8,32(r3)
   24144:	19c00915 	stw	r7,36(r3)
   24148:	19800a15 	stw	r6,40(r3)
   2414c:	19000b15 	stw	r4,44(r3)
   24150:	00c00484 	movi	r3,18
   24154:	10c0030d 	sth	r3,12(r2)
   24158:	00c00084 	movi	r3,2
   2415c:	10000015 	stw	zero,0(r2)
   24160:	10000115 	stw	zero,4(r2)
   24164:	10000215 	stw	zero,8(r2)
   24168:	10c0038d 	sth	r3,14(r2)
   2416c:	10000415 	stw	zero,16(r2)
   24170:	10000515 	stw	zero,20(r2)
   24174:	10000615 	stw	zero,24(r2)
   24178:	10800715 	stw	r2,28(r2)
   2417c:	12000815 	stw	r8,32(r2)
   24180:	11c00915 	stw	r7,36(r2)
   24184:	11800a15 	stw	r6,40(r2)
   24188:	11000b15 	stw	r4,44(r2)
   2418c:	f800283a 	ret

00024190 <__sfp>:
   24190:	defffc04 	addi	sp,sp,-16
   24194:	008000f4 	movhi	r2,3
   24198:	10b93804 	addi	r2,r2,-6944
   2419c:	dc400115 	stw	r17,4(sp)
   241a0:	14400017 	ldw	r17,0(r2)
   241a4:	dc800215 	stw	r18,8(sp)
   241a8:	dfc00315 	stw	ra,12(sp)
   241ac:	88800e17 	ldw	r2,56(r17)
   241b0:	dc000015 	stw	r16,0(sp)
   241b4:	2025883a 	mov	r18,r4
   241b8:	10002826 	beq	r2,zero,2425c <__sfp+0xcc>
   241bc:	8c40b804 	addi	r17,r17,736
   241c0:	043fffc4 	movi	r16,-1
   241c4:	89400117 	ldw	r5,4(r17)
   241c8:	88800217 	ldw	r2,8(r17)
   241cc:	297fffc4 	addi	r5,r5,-1
   241d0:	28000a16 	blt	r5,zero,241fc <__sfp+0x6c>
   241d4:	10c0030f 	ldh	r3,12(r2)
   241d8:	18000c26 	beq	r3,zero,2420c <__sfp+0x7c>
   241dc:	10c01a04 	addi	r3,r2,104
   241e0:	00000206 	br	241ec <__sfp+0x5c>
   241e4:	19bfe90f 	ldh	r6,-92(r3)
   241e8:	30000826 	beq	r6,zero,2420c <__sfp+0x7c>
   241ec:	297fffc4 	addi	r5,r5,-1
   241f0:	18bffd04 	addi	r2,r3,-12
   241f4:	18c01704 	addi	r3,r3,92
   241f8:	2c3ffa1e 	bne	r5,r16,241e4 <__sfp+0x54>
   241fc:	88800017 	ldw	r2,0(r17)
   24200:	10001926 	beq	r2,zero,24268 <__sfp+0xd8>
   24204:	1023883a 	mov	r17,r2
   24208:	003fee06 	br	241c4 <__sfp+0x34>
   2420c:	00ffffc4 	movi	r3,-1
   24210:	10c0038d 	sth	r3,14(r2)
   24214:	00c00044 	movi	r3,1
   24218:	10c0030d 	sth	r3,12(r2)
   2421c:	10000015 	stw	zero,0(r2)
   24220:	10000215 	stw	zero,8(r2)
   24224:	10000115 	stw	zero,4(r2)
   24228:	10000415 	stw	zero,16(r2)
   2422c:	10000515 	stw	zero,20(r2)
   24230:	10000615 	stw	zero,24(r2)
   24234:	10000c15 	stw	zero,48(r2)
   24238:	10000d15 	stw	zero,52(r2)
   2423c:	10001115 	stw	zero,68(r2)
   24240:	10001215 	stw	zero,72(r2)
   24244:	dfc00317 	ldw	ra,12(sp)
   24248:	dc800217 	ldw	r18,8(sp)
   2424c:	dc400117 	ldw	r17,4(sp)
   24250:	dc000017 	ldw	r16,0(sp)
   24254:	dec00404 	addi	sp,sp,16
   24258:	f800283a 	ret
   2425c:	8809883a 	mov	r4,r17
   24260:	00240840 	call	24084 <__sinit>
   24264:	003fd506 	br	241bc <__sfp+0x2c>
   24268:	9009883a 	mov	r4,r18
   2426c:	01400104 	movi	r5,4
   24270:	0023ffc0 	call	23ffc <__sfmoreglue>
   24274:	88800015 	stw	r2,0(r17)
   24278:	103fe21e 	bne	r2,zero,24204 <__sfp+0x74>
   2427c:	00800304 	movi	r2,12
   24280:	90800015 	stw	r2,0(r18)
   24284:	0005883a 	mov	r2,zero
   24288:	003fee06 	br	24244 <__sfp+0xb4>

0002428c <__sfp_lock_acquire>:
   2428c:	f800283a 	ret

00024290 <__sfp_lock_release>:
   24290:	f800283a 	ret

00024294 <__sinit_lock_acquire>:
   24294:	f800283a 	ret

00024298 <__sinit_lock_release>:
   24298:	f800283a 	ret

0002429c <__fp_lock_all>:
   2429c:	008000f4 	movhi	r2,3
   242a0:	10b93904 	addi	r2,r2,-6940
   242a4:	11000017 	ldw	r4,0(r2)
   242a8:	014000b4 	movhi	r5,2
   242ac:	294ff804 	addi	r5,r5,16352
   242b0:	0024bbc1 	jmpi	24bbc <_fwalk>

000242b4 <__fp_unlock_all>:
   242b4:	008000f4 	movhi	r2,3
   242b8:	10b93904 	addi	r2,r2,-6940
   242bc:	11000017 	ldw	r4,0(r2)
   242c0:	014000b4 	movhi	r5,2
   242c4:	294ffa04 	addi	r5,r5,16360
   242c8:	0024bbc1 	jmpi	24bbc <_fwalk>

000242cc <_malloc_trim_r>:
   242cc:	defffb04 	addi	sp,sp,-20
   242d0:	dcc00315 	stw	r19,12(sp)
   242d4:	dc800215 	stw	r18,8(sp)
   242d8:	dc400115 	stw	r17,4(sp)
   242dc:	dc000015 	stw	r16,0(sp)
   242e0:	2827883a 	mov	r19,r5
   242e4:	dfc00415 	stw	ra,16(sp)
   242e8:	044000f4 	movhi	r17,3
   242ec:	8c73b404 	addi	r17,r17,-12592
   242f0:	2021883a 	mov	r16,r4
   242f4:	002a05c0 	call	2a05c <__malloc_lock>
   242f8:	88800217 	ldw	r2,8(r17)
   242fc:	14800117 	ldw	r18,4(r2)
   24300:	00bfff04 	movi	r2,-4
   24304:	90a4703a 	and	r18,r18,r2
   24308:	9083fbc4 	addi	r2,r18,4079
   2430c:	14e7c83a 	sub	r19,r2,r19
   24310:	9826d33a 	srli	r19,r19,12
   24314:	0083ffc4 	movi	r2,4095
   24318:	9cffffc4 	addi	r19,r19,-1
   2431c:	9826933a 	slli	r19,r19,12
   24320:	14c0060e 	bge	r2,r19,2433c <_malloc_trim_r+0x70>
   24324:	8009883a 	mov	r4,r16
   24328:	000b883a 	mov	r5,zero
   2432c:	00272740 	call	27274 <_sbrk_r>
   24330:	88c00217 	ldw	r3,8(r17)
   24334:	1c87883a 	add	r3,r3,r18
   24338:	10c00a26 	beq	r2,r3,24364 <_malloc_trim_r+0x98>
   2433c:	8009883a 	mov	r4,r16
   24340:	002a07c0 	call	2a07c <__malloc_unlock>
   24344:	0005883a 	mov	r2,zero
   24348:	dfc00417 	ldw	ra,16(sp)
   2434c:	dcc00317 	ldw	r19,12(sp)
   24350:	dc800217 	ldw	r18,8(sp)
   24354:	dc400117 	ldw	r17,4(sp)
   24358:	dc000017 	ldw	r16,0(sp)
   2435c:	dec00504 	addi	sp,sp,20
   24360:	f800283a 	ret
   24364:	8009883a 	mov	r4,r16
   24368:	04cbc83a 	sub	r5,zero,r19
   2436c:	00272740 	call	27274 <_sbrk_r>
   24370:	00ffffc4 	movi	r3,-1
   24374:	10c01326 	beq	r2,r3,243c4 <_malloc_trim_r+0xf8>
   24378:	008000f4 	movhi	r2,3
   2437c:	10bfea04 	addi	r2,r2,-88
   24380:	11000017 	ldw	r4,0(r2)
   24384:	88c00217 	ldw	r3,8(r17)
   24388:	94e5c83a 	sub	r18,r18,r19
   2438c:	94800054 	ori	r18,r18,1
   24390:	24e7c83a 	sub	r19,r4,r19
   24394:	1c800115 	stw	r18,4(r3)
   24398:	8009883a 	mov	r4,r16
   2439c:	14c00015 	stw	r19,0(r2)
   243a0:	002a07c0 	call	2a07c <__malloc_unlock>
   243a4:	00800044 	movi	r2,1
   243a8:	dfc00417 	ldw	ra,16(sp)
   243ac:	dcc00317 	ldw	r19,12(sp)
   243b0:	dc800217 	ldw	r18,8(sp)
   243b4:	dc400117 	ldw	r17,4(sp)
   243b8:	dc000017 	ldw	r16,0(sp)
   243bc:	dec00504 	addi	sp,sp,20
   243c0:	f800283a 	ret
   243c4:	8009883a 	mov	r4,r16
   243c8:	000b883a 	mov	r5,zero
   243cc:	00272740 	call	27274 <_sbrk_r>
   243d0:	88c00217 	ldw	r3,8(r17)
   243d4:	014003c4 	movi	r5,15
   243d8:	10c9c83a 	sub	r4,r2,r3
   243dc:	293fd70e 	bge	r5,r4,2433c <_malloc_trim_r+0x70>
   243e0:	014000f4 	movhi	r5,3
   243e4:	29793b04 	addi	r5,r5,-6932
   243e8:	29400017 	ldw	r5,0(r5)
   243ec:	21000054 	ori	r4,r4,1
   243f0:	19000115 	stw	r4,4(r3)
   243f4:	1145c83a 	sub	r2,r2,r5
   243f8:	014000f4 	movhi	r5,3
   243fc:	297fea04 	addi	r5,r5,-88
   24400:	28800015 	stw	r2,0(r5)
   24404:	003fcd06 	br	2433c <_malloc_trim_r+0x70>

00024408 <_free_r>:
   24408:	defffd04 	addi	sp,sp,-12
   2440c:	dc400115 	stw	r17,4(sp)
   24410:	dc000015 	stw	r16,0(sp)
   24414:	dfc00215 	stw	ra,8(sp)
   24418:	2821883a 	mov	r16,r5
   2441c:	2023883a 	mov	r17,r4
   24420:	28004b26 	beq	r5,zero,24550 <_free_r+0x148>
   24424:	002a05c0 	call	2a05c <__malloc_lock>
   24428:	823fff17 	ldw	r8,-4(r16)
   2442c:	00bfff84 	movi	r2,-2
   24430:	81bffe04 	addi	r6,r16,-8
   24434:	4084703a 	and	r2,r8,r2
   24438:	3087883a 	add	r3,r6,r2
   2443c:	014000f4 	movhi	r5,3
   24440:	2973b404 	addi	r5,r5,-12592
   24444:	1a400117 	ldw	r9,4(r3)
   24448:	29000217 	ldw	r4,8(r5)
   2444c:	01ffff04 	movi	r7,-4
   24450:	49ce703a 	and	r7,r9,r7
   24454:	20c06526 	beq	r4,r3,245ec <_free_r+0x1e4>
   24458:	19c00115 	stw	r7,4(r3)
   2445c:	4200004c 	andi	r8,r8,1
   24460:	40003026 	beq	r8,zero,24524 <_free_r+0x11c>
   24464:	0009883a 	mov	r4,zero
   24468:	19d1883a 	add	r8,r3,r7
   2446c:	42000117 	ldw	r8,4(r8)
   24470:	4200004c 	andi	r8,r8,1
   24474:	4000061e 	bne	r8,zero,24490 <_free_r+0x88>
   24478:	11c5883a 	add	r2,r2,r7
   2447c:	19c00217 	ldw	r7,8(r3)
   24480:	20004e26 	beq	r4,zero,245bc <_free_r+0x1b4>
   24484:	18c00317 	ldw	r3,12(r3)
   24488:	38c00315 	stw	r3,12(r7)
   2448c:	19c00215 	stw	r7,8(r3)
   24490:	11c00054 	ori	r7,r2,1
   24494:	3087883a 	add	r3,r6,r2
   24498:	31c00115 	stw	r7,4(r6)
   2449c:	18800015 	stw	r2,0(r3)
   244a0:	20001a1e 	bne	r4,zero,2450c <_free_r+0x104>
   244a4:	00c07fc4 	movi	r3,511
   244a8:	18802e2e 	bgeu	r3,r2,24564 <_free_r+0x15c>
   244ac:	1006d27a 	srli	r3,r2,9
   244b0:	01000104 	movi	r4,4
   244b4:	20c06636 	bltu	r4,r3,24650 <_free_r+0x248>
   244b8:	1008d1ba 	srli	r4,r2,6
   244bc:	21000e04 	addi	r4,r4,56
   244c0:	210f883a 	add	r7,r4,r4
   244c4:	39cf883a 	add	r7,r7,r7
   244c8:	39cf883a 	add	r7,r7,r7
   244cc:	29cf883a 	add	r7,r5,r7
   244d0:	38c00217 	ldw	r3,8(r7)
   244d4:	014000f4 	movhi	r5,3
   244d8:	2973b404 	addi	r5,r5,-12592
   244dc:	19c06126 	beq	r3,r7,24664 <_free_r+0x25c>
   244e0:	013fff04 	movi	r4,-4
   244e4:	19400117 	ldw	r5,4(r3)
   244e8:	290a703a 	and	r5,r5,r4
   244ec:	1140022e 	bgeu	r2,r5,244f8 <_free_r+0xf0>
   244f0:	18c00217 	ldw	r3,8(r3)
   244f4:	38fffb1e 	bne	r7,r3,244e4 <_free_r+0xdc>
   244f8:	18800317 	ldw	r2,12(r3)
   244fc:	30800315 	stw	r2,12(r6)
   24500:	30c00215 	stw	r3,8(r6)
   24504:	11800215 	stw	r6,8(r2)
   24508:	19800315 	stw	r6,12(r3)
   2450c:	8809883a 	mov	r4,r17
   24510:	dfc00217 	ldw	ra,8(sp)
   24514:	dc400117 	ldw	r17,4(sp)
   24518:	dc000017 	ldw	r16,0(sp)
   2451c:	dec00304 	addi	sp,sp,12
   24520:	002a07c1 	jmpi	2a07c <__malloc_unlock>
   24524:	813ffe17 	ldw	r4,-8(r16)
   24528:	2a400204 	addi	r9,r5,8
   2452c:	310dc83a 	sub	r6,r6,r4
   24530:	32000217 	ldw	r8,8(r6)
   24534:	1105883a 	add	r2,r2,r4
   24538:	42404326 	beq	r8,r9,24648 <_free_r+0x240>
   2453c:	32400317 	ldw	r9,12(r6)
   24540:	0009883a 	mov	r4,zero
   24544:	42400315 	stw	r9,12(r8)
   24548:	4a000215 	stw	r8,8(r9)
   2454c:	003fc606 	br	24468 <_free_r+0x60>
   24550:	dfc00217 	ldw	ra,8(sp)
   24554:	dc400117 	ldw	r17,4(sp)
   24558:	dc000017 	ldw	r16,0(sp)
   2455c:	dec00304 	addi	sp,sp,12
   24560:	f800283a 	ret
   24564:	1004d0fa 	srli	r2,r2,3
   24568:	02000044 	movi	r8,1
   2456c:	29c00117 	ldw	r7,4(r5)
   24570:	1087883a 	add	r3,r2,r2
   24574:	18c7883a 	add	r3,r3,r3
   24578:	1005d0ba 	srai	r2,r2,2
   2457c:	18c7883a 	add	r3,r3,r3
   24580:	28c7883a 	add	r3,r5,r3
   24584:	19000217 	ldw	r4,8(r3)
   24588:	4084983a 	sll	r2,r8,r2
   2458c:	30c00315 	stw	r3,12(r6)
   24590:	31000215 	stw	r4,8(r6)
   24594:	11c4b03a 	or	r2,r2,r7
   24598:	21800315 	stw	r6,12(r4)
   2459c:	8809883a 	mov	r4,r17
   245a0:	28800115 	stw	r2,4(r5)
   245a4:	19800215 	stw	r6,8(r3)
   245a8:	dfc00217 	ldw	ra,8(sp)
   245ac:	dc400117 	ldw	r17,4(sp)
   245b0:	dc000017 	ldw	r16,0(sp)
   245b4:	dec00304 	addi	sp,sp,12
   245b8:	002a07c1 	jmpi	2a07c <__malloc_unlock>
   245bc:	020000f4 	movhi	r8,3
   245c0:	4233b604 	addi	r8,r8,-12584
   245c4:	3a3faf1e 	bne	r7,r8,24484 <_free_r+0x7c>
   245c8:	29800515 	stw	r6,20(r5)
   245cc:	29800415 	stw	r6,16(r5)
   245d0:	11000054 	ori	r4,r2,1
   245d4:	3087883a 	add	r3,r6,r2
   245d8:	31c00315 	stw	r7,12(r6)
   245dc:	31c00215 	stw	r7,8(r6)
   245e0:	31000115 	stw	r4,4(r6)
   245e4:	18800015 	stw	r2,0(r3)
   245e8:	003fc806 	br	2450c <_free_r+0x104>
   245ec:	4200004c 	andi	r8,r8,1
   245f0:	3885883a 	add	r2,r7,r2
   245f4:	4000071e 	bne	r8,zero,24614 <_free_r+0x20c>
   245f8:	81fffe17 	ldw	r7,-8(r16)
   245fc:	31cdc83a 	sub	r6,r6,r7
   24600:	30c00317 	ldw	r3,12(r6)
   24604:	31000217 	ldw	r4,8(r6)
   24608:	11c5883a 	add	r2,r2,r7
   2460c:	20c00315 	stw	r3,12(r4)
   24610:	19000215 	stw	r4,8(r3)
   24614:	00c000f4 	movhi	r3,3
   24618:	18f93c04 	addi	r3,r3,-6928
   2461c:	18c00017 	ldw	r3,0(r3)
   24620:	11000054 	ori	r4,r2,1
   24624:	31000115 	stw	r4,4(r6)
   24628:	29800215 	stw	r6,8(r5)
   2462c:	10ffb736 	bltu	r2,r3,2450c <_free_r+0x104>
   24630:	008000f4 	movhi	r2,3
   24634:	10bfe204 	addi	r2,r2,-120
   24638:	11400017 	ldw	r5,0(r2)
   2463c:	8809883a 	mov	r4,r17
   24640:	00242cc0 	call	242cc <_malloc_trim_r>
   24644:	003fb106 	br	2450c <_free_r+0x104>
   24648:	01000044 	movi	r4,1
   2464c:	003f8606 	br	24468 <_free_r+0x60>
   24650:	01000504 	movi	r4,20
   24654:	20c00b36 	bltu	r4,r3,24684 <_free_r+0x27c>
   24658:	190016c4 	addi	r4,r3,91
   2465c:	210f883a 	add	r7,r4,r4
   24660:	003f9806 	br	244c4 <_free_r+0xbc>
   24664:	2009d0ba 	srai	r4,r4,2
   24668:	00800044 	movi	r2,1
   2466c:	29c00117 	ldw	r7,4(r5)
   24670:	1108983a 	sll	r4,r2,r4
   24674:	1805883a 	mov	r2,r3
   24678:	21c8b03a 	or	r4,r4,r7
   2467c:	29000115 	stw	r4,4(r5)
   24680:	003f9e06 	br	244fc <_free_r+0xf4>
   24684:	01001504 	movi	r4,84
   24688:	20c00436 	bltu	r4,r3,2469c <_free_r+0x294>
   2468c:	1008d33a 	srli	r4,r2,12
   24690:	21001b84 	addi	r4,r4,110
   24694:	210f883a 	add	r7,r4,r4
   24698:	003f8a06 	br	244c4 <_free_r+0xbc>
   2469c:	01005504 	movi	r4,340
   246a0:	20c00436 	bltu	r4,r3,246b4 <_free_r+0x2ac>
   246a4:	1008d3fa 	srli	r4,r2,15
   246a8:	21001dc4 	addi	r4,r4,119
   246ac:	210f883a 	add	r7,r4,r4
   246b0:	003f8406 	br	244c4 <_free_r+0xbc>
   246b4:	01015504 	movi	r4,1364
   246b8:	20c00436 	bltu	r4,r3,246cc <_free_r+0x2c4>
   246bc:	1008d4ba 	srli	r4,r2,18
   246c0:	21001f04 	addi	r4,r4,124
   246c4:	210f883a 	add	r7,r4,r4
   246c8:	003f7e06 	br	244c4 <_free_r+0xbc>
   246cc:	01c03f04 	movi	r7,252
   246d0:	01001f84 	movi	r4,126
   246d4:	003f7b06 	br	244c4 <_free_r+0xbc>

000246d8 <__sfvwrite_r>:
   246d8:	30800217 	ldw	r2,8(r6)
   246dc:	defff504 	addi	sp,sp,-44
   246e0:	dd400615 	stw	r21,24(sp)
   246e4:	dd000515 	stw	r20,20(sp)
   246e8:	dc000115 	stw	r16,4(sp)
   246ec:	dfc00a15 	stw	ra,40(sp)
   246f0:	df000915 	stw	fp,36(sp)
   246f4:	ddc00815 	stw	r23,32(sp)
   246f8:	dd800715 	stw	r22,28(sp)
   246fc:	dcc00415 	stw	r19,16(sp)
   24700:	dc800315 	stw	r18,12(sp)
   24704:	dc400215 	stw	r17,8(sp)
   24708:	3029883a 	mov	r20,r6
   2470c:	202b883a 	mov	r21,r4
   24710:	2821883a 	mov	r16,r5
   24714:	10002126 	beq	r2,zero,2479c <__sfvwrite_r+0xc4>
   24718:	2880030b 	ldhu	r2,12(r5)
   2471c:	10c0020c 	andi	r3,r2,8
   24720:	18ffffcc 	andi	r3,r3,65535
   24724:	18e0001c 	xori	r3,r3,32768
   24728:	18e00004 	addi	r3,r3,-32768
   2472c:	18002826 	beq	r3,zero,247d0 <__sfvwrite_r+0xf8>
   24730:	28c00417 	ldw	r3,16(r5)
   24734:	18002626 	beq	r3,zero,247d0 <__sfvwrite_r+0xf8>
   24738:	10c0008c 	andi	r3,r2,2
   2473c:	18ffffcc 	andi	r3,r3,65535
   24740:	18e0001c 	xori	r3,r3,32768
   24744:	18e00004 	addi	r3,r3,-32768
   24748:	a4400017 	ldw	r17,0(r20)
   2474c:	18002b26 	beq	r3,zero,247fc <__sfvwrite_r+0x124>
   24750:	0027883a 	mov	r19,zero
   24754:	0025883a 	mov	r18,zero
   24758:	05810004 	movi	r22,1024
   2475c:	980d883a 	mov	r6,r19
   24760:	a809883a 	mov	r4,r21
   24764:	90004f26 	beq	r18,zero,248a4 <__sfvwrite_r+0x1cc>
   24768:	900f883a 	mov	r7,r18
   2476c:	81400717 	ldw	r5,28(r16)
   24770:	b480012e 	bgeu	r22,r18,24778 <__sfvwrite_r+0xa0>
   24774:	01c10004 	movi	r7,1024
   24778:	80800917 	ldw	r2,36(r16)
   2477c:	103ee83a 	callr	r2
   24780:	0080540e 	bge	zero,r2,248d4 <__sfvwrite_r+0x1fc>
   24784:	a0c00217 	ldw	r3,8(r20)
   24788:	98a7883a 	add	r19,r19,r2
   2478c:	90a5c83a 	sub	r18,r18,r2
   24790:	1885c83a 	sub	r2,r3,r2
   24794:	a0800215 	stw	r2,8(r20)
   24798:	103ff01e 	bne	r2,zero,2475c <__sfvwrite_r+0x84>
   2479c:	0005883a 	mov	r2,zero
   247a0:	dfc00a17 	ldw	ra,40(sp)
   247a4:	df000917 	ldw	fp,36(sp)
   247a8:	ddc00817 	ldw	r23,32(sp)
   247ac:	dd800717 	ldw	r22,28(sp)
   247b0:	dd400617 	ldw	r21,24(sp)
   247b4:	dd000517 	ldw	r20,20(sp)
   247b8:	dcc00417 	ldw	r19,16(sp)
   247bc:	dc800317 	ldw	r18,12(sp)
   247c0:	dc400217 	ldw	r17,8(sp)
   247c4:	dc000117 	ldw	r16,4(sp)
   247c8:	dec00b04 	addi	sp,sp,44
   247cc:	f800283a 	ret
   247d0:	a809883a 	mov	r4,r21
   247d4:	800b883a 	mov	r5,r16
   247d8:	00223fc0 	call	223fc <__swsetup_r>
   247dc:	1000f01e 	bne	r2,zero,24ba0 <__sfvwrite_r+0x4c8>
   247e0:	8080030b 	ldhu	r2,12(r16)
   247e4:	a4400017 	ldw	r17,0(r20)
   247e8:	10c0008c 	andi	r3,r2,2
   247ec:	18ffffcc 	andi	r3,r3,65535
   247f0:	18e0001c 	xori	r3,r3,32768
   247f4:	18e00004 	addi	r3,r3,-32768
   247f8:	183fd51e 	bne	r3,zero,24750 <__sfvwrite_r+0x78>
   247fc:	10c0004c 	andi	r3,r2,1
   24800:	002d883a 	mov	r22,zero
   24804:	1800381e 	bne	r3,zero,248e8 <__sfvwrite_r+0x210>
   24808:	0025883a 	mov	r18,zero
   2480c:	90002126 	beq	r18,zero,24894 <__sfvwrite_r+0x1bc>
   24810:	10c0800c 	andi	r3,r2,512
   24814:	18ffffcc 	andi	r3,r3,65535
   24818:	18e0001c 	xori	r3,r3,32768
   2481c:	18e00004 	addi	r3,r3,-32768
   24820:	84c00217 	ldw	r19,8(r16)
   24824:	18006b26 	beq	r3,zero,249d4 <__sfvwrite_r+0x2fc>
   24828:	980f883a 	mov	r7,r19
   2482c:	94c08636 	bltu	r18,r19,24a48 <__sfvwrite_r+0x370>
   24830:	10c1200c 	andi	r3,r2,1152
   24834:	18009f1e 	bne	r3,zero,24ab4 <__sfvwrite_r+0x3dc>
   24838:	81000017 	ldw	r4,0(r16)
   2483c:	982f883a 	mov	r23,r19
   24840:	9039883a 	mov	fp,r18
   24844:	9027883a 	mov	r19,r18
   24848:	380d883a 	mov	r6,r7
   2484c:	b00b883a 	mov	r5,r22
   24850:	d9c00015 	stw	r7,0(sp)
   24854:	002595c0 	call	2595c <memmove>
   24858:	d9c00017 	ldw	r7,0(sp)
   2485c:	81000217 	ldw	r4,8(r16)
   24860:	80800017 	ldw	r2,0(r16)
   24864:	25efc83a 	sub	r23,r4,r23
   24868:	11cf883a 	add	r7,r2,r7
   2486c:	85c00215 	stw	r23,8(r16)
   24870:	81c00015 	stw	r7,0(r16)
   24874:	a0800217 	ldw	r2,8(r20)
   24878:	b72d883a 	add	r22,r22,fp
   2487c:	9725c83a 	sub	r18,r18,fp
   24880:	14e7c83a 	sub	r19,r2,r19
   24884:	a4c00215 	stw	r19,8(r20)
   24888:	983fc426 	beq	r19,zero,2479c <__sfvwrite_r+0xc4>
   2488c:	8080030b 	ldhu	r2,12(r16)
   24890:	903fdf1e 	bne	r18,zero,24810 <__sfvwrite_r+0x138>
   24894:	8d800017 	ldw	r22,0(r17)
   24898:	8c800117 	ldw	r18,4(r17)
   2489c:	8c400204 	addi	r17,r17,8
   248a0:	003fda06 	br	2480c <__sfvwrite_r+0x134>
   248a4:	8cc00017 	ldw	r19,0(r17)
   248a8:	8c800117 	ldw	r18,4(r17)
   248ac:	8c400204 	addi	r17,r17,8
   248b0:	003faa06 	br	2475c <__sfvwrite_r+0x84>
   248b4:	0026c140 	call	26c14 <_realloc_r>
   248b8:	102f883a 	mov	r23,r2
   248bc:	10009f1e 	bne	r2,zero,24b3c <__sfvwrite_r+0x464>
   248c0:	81400417 	ldw	r5,16(r16)
   248c4:	a809883a 	mov	r4,r21
   248c8:	00244080 	call	24408 <_free_r>
   248cc:	00800304 	movi	r2,12
   248d0:	a8800015 	stw	r2,0(r21)
   248d4:	80c0030b 	ldhu	r3,12(r16)
   248d8:	00bfffc4 	movi	r2,-1
   248dc:	18c01014 	ori	r3,r3,64
   248e0:	80c0030d 	sth	r3,12(r16)
   248e4:	003fae06 	br	247a0 <__sfvwrite_r+0xc8>
   248e8:	0007883a 	mov	r3,zero
   248ec:	0039883a 	mov	fp,zero
   248f0:	0025883a 	mov	r18,zero
   248f4:	90001e26 	beq	r18,zero,24970 <__sfvwrite_r+0x298>
   248f8:	18006526 	beq	r3,zero,24a90 <__sfvwrite_r+0x3b8>
   248fc:	b02f883a 	mov	r23,r22
   24900:	9580012e 	bgeu	r18,r22,24908 <__sfvwrite_r+0x230>
   24904:	902f883a 	mov	r23,r18
   24908:	81000017 	ldw	r4,0(r16)
   2490c:	80800417 	ldw	r2,16(r16)
   24910:	84c00217 	ldw	r19,8(r16)
   24914:	81c00517 	ldw	r7,20(r16)
   24918:	1100022e 	bgeu	r2,r4,24924 <__sfvwrite_r+0x24c>
   2491c:	99e7883a 	add	r19,r19,r7
   24920:	9dc01816 	blt	r19,r23,24984 <__sfvwrite_r+0x2ac>
   24924:	b9c03b16 	blt	r23,r7,24a14 <__sfvwrite_r+0x33c>
   24928:	80800917 	ldw	r2,36(r16)
   2492c:	81400717 	ldw	r5,28(r16)
   24930:	a809883a 	mov	r4,r21
   24934:	d8c00015 	stw	r3,0(sp)
   24938:	e00d883a 	mov	r6,fp
   2493c:	103ee83a 	callr	r2
   24940:	1027883a 	mov	r19,r2
   24944:	d8c00017 	ldw	r3,0(sp)
   24948:	00bfe20e 	bge	zero,r2,248d4 <__sfvwrite_r+0x1fc>
   2494c:	b4edc83a 	sub	r22,r22,r19
   24950:	b0001a26 	beq	r22,zero,249bc <__sfvwrite_r+0x2e4>
   24954:	a0800217 	ldw	r2,8(r20)
   24958:	e4f9883a 	add	fp,fp,r19
   2495c:	94e5c83a 	sub	r18,r18,r19
   24960:	14e7c83a 	sub	r19,r2,r19
   24964:	a4c00215 	stw	r19,8(r20)
   24968:	983f8c26 	beq	r19,zero,2479c <__sfvwrite_r+0xc4>
   2496c:	903fe21e 	bne	r18,zero,248f8 <__sfvwrite_r+0x220>
   24970:	8f000017 	ldw	fp,0(r17)
   24974:	8c800117 	ldw	r18,4(r17)
   24978:	0007883a 	mov	r3,zero
   2497c:	8c400204 	addi	r17,r17,8
   24980:	003fdc06 	br	248f4 <__sfvwrite_r+0x21c>
   24984:	e00b883a 	mov	r5,fp
   24988:	980d883a 	mov	r6,r19
   2498c:	d8c00015 	stw	r3,0(sp)
   24990:	002595c0 	call	2595c <memmove>
   24994:	80800017 	ldw	r2,0(r16)
   24998:	a809883a 	mov	r4,r21
   2499c:	800b883a 	mov	r5,r16
   249a0:	14c5883a 	add	r2,r2,r19
   249a4:	80800015 	stw	r2,0(r16)
   249a8:	0023dc80 	call	23dc8 <_fflush_r>
   249ac:	d8c00017 	ldw	r3,0(sp)
   249b0:	103fc81e 	bne	r2,zero,248d4 <__sfvwrite_r+0x1fc>
   249b4:	b4edc83a 	sub	r22,r22,r19
   249b8:	b03fe61e 	bne	r22,zero,24954 <__sfvwrite_r+0x27c>
   249bc:	a809883a 	mov	r4,r21
   249c0:	800b883a 	mov	r5,r16
   249c4:	0023dc80 	call	23dc8 <_fflush_r>
   249c8:	103fc21e 	bne	r2,zero,248d4 <__sfvwrite_r+0x1fc>
   249cc:	0007883a 	mov	r3,zero
   249d0:	003fe006 	br	24954 <__sfvwrite_r+0x27c>
   249d4:	81000017 	ldw	r4,0(r16)
   249d8:	80800417 	ldw	r2,16(r16)
   249dc:	1100022e 	bgeu	r2,r4,249e8 <__sfvwrite_r+0x310>
   249e0:	9839883a 	mov	fp,r19
   249e4:	9c806036 	bltu	r19,r18,24b68 <__sfvwrite_r+0x490>
   249e8:	81c00517 	ldw	r7,20(r16)
   249ec:	91c01c36 	bltu	r18,r7,24a60 <__sfvwrite_r+0x388>
   249f0:	80800917 	ldw	r2,36(r16)
   249f4:	81400717 	ldw	r5,28(r16)
   249f8:	a809883a 	mov	r4,r21
   249fc:	b00d883a 	mov	r6,r22
   24a00:	103ee83a 	callr	r2
   24a04:	1027883a 	mov	r19,r2
   24a08:	00bfb20e 	bge	zero,r2,248d4 <__sfvwrite_r+0x1fc>
   24a0c:	1039883a 	mov	fp,r2
   24a10:	003f9806 	br	24874 <__sfvwrite_r+0x19c>
   24a14:	b80d883a 	mov	r6,r23
   24a18:	e00b883a 	mov	r5,fp
   24a1c:	d8c00015 	stw	r3,0(sp)
   24a20:	002595c0 	call	2595c <memmove>
   24a24:	80800217 	ldw	r2,8(r16)
   24a28:	81000017 	ldw	r4,0(r16)
   24a2c:	b827883a 	mov	r19,r23
   24a30:	15c5c83a 	sub	r2,r2,r23
   24a34:	25ef883a 	add	r23,r4,r23
   24a38:	80800215 	stw	r2,8(r16)
   24a3c:	85c00015 	stw	r23,0(r16)
   24a40:	d8c00017 	ldw	r3,0(sp)
   24a44:	003fc106 	br	2494c <__sfvwrite_r+0x274>
   24a48:	81000017 	ldw	r4,0(r16)
   24a4c:	902f883a 	mov	r23,r18
   24a50:	9039883a 	mov	fp,r18
   24a54:	9027883a 	mov	r19,r18
   24a58:	900f883a 	mov	r7,r18
   24a5c:	003f7a06 	br	24848 <__sfvwrite_r+0x170>
   24a60:	b00b883a 	mov	r5,r22
   24a64:	900d883a 	mov	r6,r18
   24a68:	002595c0 	call	2595c <memmove>
   24a6c:	80c00217 	ldw	r3,8(r16)
   24a70:	80800017 	ldw	r2,0(r16)
   24a74:	9027883a 	mov	r19,r18
   24a78:	1c87c83a 	sub	r3,r3,r18
   24a7c:	1485883a 	add	r2,r2,r18
   24a80:	80c00215 	stw	r3,8(r16)
   24a84:	80800015 	stw	r2,0(r16)
   24a88:	9039883a 	mov	fp,r18
   24a8c:	003f7906 	br	24874 <__sfvwrite_r+0x19c>
   24a90:	e009883a 	mov	r4,fp
   24a94:	01400284 	movi	r5,10
   24a98:	900d883a 	mov	r6,r18
   24a9c:	00257240 	call	25724 <memchr>
   24aa0:	10003c26 	beq	r2,zero,24b94 <__sfvwrite_r+0x4bc>
   24aa4:	15800044 	addi	r22,r2,1
   24aa8:	b72dc83a 	sub	r22,r22,fp
   24aac:	00c00044 	movi	r3,1
   24ab0:	003f9206 	br	248fc <__sfvwrite_r+0x224>
   24ab4:	81000517 	ldw	r4,20(r16)
   24ab8:	81400417 	ldw	r5,16(r16)
   24abc:	80c00017 	ldw	r3,0(r16)
   24ac0:	210d883a 	add	r6,r4,r4
   24ac4:	3109883a 	add	r4,r6,r4
   24ac8:	2026d7fa 	srli	r19,r4,31
   24acc:	1979c83a 	sub	fp,r3,r5
   24ad0:	e1800044 	addi	r6,fp,1
   24ad4:	9909883a 	add	r4,r19,r4
   24ad8:	2027d07a 	srai	r19,r4,1
   24adc:	3489883a 	add	r4,r6,r18
   24ae0:	980d883a 	mov	r6,r19
   24ae4:	9900022e 	bgeu	r19,r4,24af0 <__sfvwrite_r+0x418>
   24ae8:	2027883a 	mov	r19,r4
   24aec:	200d883a 	mov	r6,r4
   24af0:	1081000c 	andi	r2,r2,1024
   24af4:	10bfffcc 	andi	r2,r2,65535
   24af8:	10a0001c 	xori	r2,r2,32768
   24afc:	10a00004 	addi	r2,r2,-32768
   24b00:	a809883a 	mov	r4,r21
   24b04:	103f6b26 	beq	r2,zero,248b4 <__sfvwrite_r+0x1dc>
   24b08:	300b883a 	mov	r5,r6
   24b0c:	0024fa00 	call	24fa0 <_malloc_r>
   24b10:	102f883a 	mov	r23,r2
   24b14:	103f6d26 	beq	r2,zero,248cc <__sfvwrite_r+0x1f4>
   24b18:	81400417 	ldw	r5,16(r16)
   24b1c:	1009883a 	mov	r4,r2
   24b20:	e00d883a 	mov	r6,fp
   24b24:	002581c0 	call	2581c <memcpy>
   24b28:	8080030b 	ldhu	r2,12(r16)
   24b2c:	00fedfc4 	movi	r3,-1153
   24b30:	10c4703a 	and	r2,r2,r3
   24b34:	10802014 	ori	r2,r2,128
   24b38:	8080030d 	sth	r2,12(r16)
   24b3c:	bf09883a 	add	r4,r23,fp
   24b40:	9f07c83a 	sub	r3,r19,fp
   24b44:	85c00415 	stw	r23,16(r16)
   24b48:	84c00515 	stw	r19,20(r16)
   24b4c:	81000015 	stw	r4,0(r16)
   24b50:	902f883a 	mov	r23,r18
   24b54:	80c00215 	stw	r3,8(r16)
   24b58:	9039883a 	mov	fp,r18
   24b5c:	9027883a 	mov	r19,r18
   24b60:	900f883a 	mov	r7,r18
   24b64:	003f3806 	br	24848 <__sfvwrite_r+0x170>
   24b68:	b00b883a 	mov	r5,r22
   24b6c:	980d883a 	mov	r6,r19
   24b70:	002595c0 	call	2595c <memmove>
   24b74:	80800017 	ldw	r2,0(r16)
   24b78:	a809883a 	mov	r4,r21
   24b7c:	800b883a 	mov	r5,r16
   24b80:	14c5883a 	add	r2,r2,r19
   24b84:	80800015 	stw	r2,0(r16)
   24b88:	0023dc80 	call	23dc8 <_fflush_r>
   24b8c:	103f3926 	beq	r2,zero,24874 <__sfvwrite_r+0x19c>
   24b90:	003f5006 	br	248d4 <__sfvwrite_r+0x1fc>
   24b94:	95800044 	addi	r22,r18,1
   24b98:	00c00044 	movi	r3,1
   24b9c:	003f5706 	br	248fc <__sfvwrite_r+0x224>
   24ba0:	80c0030b 	ldhu	r3,12(r16)
   24ba4:	00bfffc4 	movi	r2,-1
   24ba8:	18c01014 	ori	r3,r3,64
   24bac:	80c0030d 	sth	r3,12(r16)
   24bb0:	00c00244 	movi	r3,9
   24bb4:	a8c00015 	stw	r3,0(r21)
   24bb8:	003ef906 	br	247a0 <__sfvwrite_r+0xc8>

00024bbc <_fwalk>:
   24bbc:	defff904 	addi	sp,sp,-28
   24bc0:	dcc00315 	stw	r19,12(sp)
   24bc4:	24c0b804 	addi	r19,r4,736
   24bc8:	dd400515 	stw	r21,20(sp)
   24bcc:	dd000415 	stw	r20,16(sp)
   24bd0:	dfc00615 	stw	ra,24(sp)
   24bd4:	dc800215 	stw	r18,8(sp)
   24bd8:	dc400115 	stw	r17,4(sp)
   24bdc:	dc000015 	stw	r16,0(sp)
   24be0:	282b883a 	mov	r21,r5
   24be4:	0029883a 	mov	r20,zero
   24be8:	002428c0 	call	2428c <__sfp_lock_acquire>
   24bec:	98001226 	beq	r19,zero,24c38 <_fwalk+0x7c>
   24bf0:	04bfffc4 	movi	r18,-1
   24bf4:	9c400117 	ldw	r17,4(r19)
   24bf8:	9c000217 	ldw	r16,8(r19)
   24bfc:	8c7fffc4 	addi	r17,r17,-1
   24c00:	88000b16 	blt	r17,zero,24c30 <_fwalk+0x74>
   24c04:	84000304 	addi	r16,r16,12
   24c08:	80c0000f 	ldh	r3,0(r16)
   24c0c:	8c7fffc4 	addi	r17,r17,-1
   24c10:	813ffd04 	addi	r4,r16,-12
   24c14:	18000426 	beq	r3,zero,24c28 <_fwalk+0x6c>
   24c18:	80c0008f 	ldh	r3,2(r16)
   24c1c:	1c800226 	beq	r3,r18,24c28 <_fwalk+0x6c>
   24c20:	a83ee83a 	callr	r21
   24c24:	a0a8b03a 	or	r20,r20,r2
   24c28:	84001704 	addi	r16,r16,92
   24c2c:	8cbff61e 	bne	r17,r18,24c08 <_fwalk+0x4c>
   24c30:	9cc00017 	ldw	r19,0(r19)
   24c34:	983fef1e 	bne	r19,zero,24bf4 <_fwalk+0x38>
   24c38:	00242900 	call	24290 <__sfp_lock_release>
   24c3c:	a005883a 	mov	r2,r20
   24c40:	dfc00617 	ldw	ra,24(sp)
   24c44:	dd400517 	ldw	r21,20(sp)
   24c48:	dd000417 	ldw	r20,16(sp)
   24c4c:	dcc00317 	ldw	r19,12(sp)
   24c50:	dc800217 	ldw	r18,8(sp)
   24c54:	dc400117 	ldw	r17,4(sp)
   24c58:	dc000017 	ldw	r16,0(sp)
   24c5c:	dec00704 	addi	sp,sp,28
   24c60:	f800283a 	ret

00024c64 <_fwalk_reent>:
   24c64:	defff804 	addi	sp,sp,-32
   24c68:	dcc00315 	stw	r19,12(sp)
   24c6c:	24c0b804 	addi	r19,r4,736
   24c70:	dd800615 	stw	r22,24(sp)
   24c74:	dd400515 	stw	r21,20(sp)
   24c78:	dd000415 	stw	r20,16(sp)
   24c7c:	dfc00715 	stw	ra,28(sp)
   24c80:	dc800215 	stw	r18,8(sp)
   24c84:	dc400115 	stw	r17,4(sp)
   24c88:	dc000015 	stw	r16,0(sp)
   24c8c:	2029883a 	mov	r20,r4
   24c90:	282b883a 	mov	r21,r5
   24c94:	002d883a 	mov	r22,zero
   24c98:	002428c0 	call	2428c <__sfp_lock_acquire>
   24c9c:	98001326 	beq	r19,zero,24cec <_fwalk_reent+0x88>
   24ca0:	04bfffc4 	movi	r18,-1
   24ca4:	9c400117 	ldw	r17,4(r19)
   24ca8:	9c000217 	ldw	r16,8(r19)
   24cac:	8c7fffc4 	addi	r17,r17,-1
   24cb0:	88000c16 	blt	r17,zero,24ce4 <_fwalk_reent+0x80>
   24cb4:	84000304 	addi	r16,r16,12
   24cb8:	80c0000f 	ldh	r3,0(r16)
   24cbc:	8c7fffc4 	addi	r17,r17,-1
   24cc0:	817ffd04 	addi	r5,r16,-12
   24cc4:	18000526 	beq	r3,zero,24cdc <_fwalk_reent+0x78>
   24cc8:	80c0008f 	ldh	r3,2(r16)
   24ccc:	a009883a 	mov	r4,r20
   24cd0:	1c800226 	beq	r3,r18,24cdc <_fwalk_reent+0x78>
   24cd4:	a83ee83a 	callr	r21
   24cd8:	b0acb03a 	or	r22,r22,r2
   24cdc:	84001704 	addi	r16,r16,92
   24ce0:	8cbff51e 	bne	r17,r18,24cb8 <_fwalk_reent+0x54>
   24ce4:	9cc00017 	ldw	r19,0(r19)
   24ce8:	983fee1e 	bne	r19,zero,24ca4 <_fwalk_reent+0x40>
   24cec:	00242900 	call	24290 <__sfp_lock_release>
   24cf0:	b005883a 	mov	r2,r22
   24cf4:	dfc00717 	ldw	ra,28(sp)
   24cf8:	dd800617 	ldw	r22,24(sp)
   24cfc:	dd400517 	ldw	r21,20(sp)
   24d00:	dd000417 	ldw	r20,16(sp)
   24d04:	dcc00317 	ldw	r19,12(sp)
   24d08:	dc800217 	ldw	r18,8(sp)
   24d0c:	dc400117 	ldw	r17,4(sp)
   24d10:	dc000017 	ldw	r16,0(sp)
   24d14:	dec00804 	addi	sp,sp,32
   24d18:	f800283a 	ret

00024d1c <_setlocale_r>:
   24d1c:	defffc04 	addi	sp,sp,-16
   24d20:	dc800215 	stw	r18,8(sp)
   24d24:	dc400115 	stw	r17,4(sp)
   24d28:	dc000015 	stw	r16,0(sp)
   24d2c:	dfc00315 	stw	ra,12(sp)
   24d30:	3021883a 	mov	r16,r6
   24d34:	2023883a 	mov	r17,r4
   24d38:	2825883a 	mov	r18,r5
   24d3c:	30001626 	beq	r6,zero,24d98 <_setlocale_r+0x7c>
   24d40:	3009883a 	mov	r4,r6
   24d44:	014000f4 	movhi	r5,3
   24d48:	29720504 	addi	r5,r5,-14316
   24d4c:	00274180 	call	27418 <strcmp>
   24d50:	10000a1e 	bne	r2,zero,24d7c <_setlocale_r+0x60>
   24d54:	8c800c15 	stw	r18,48(r17)
   24d58:	8c000d15 	stw	r16,52(r17)
   24d5c:	008000f4 	movhi	r2,3
   24d60:	10b20504 	addi	r2,r2,-14316
   24d64:	dfc00317 	ldw	ra,12(sp)
   24d68:	dc800217 	ldw	r18,8(sp)
   24d6c:	dc400117 	ldw	r17,4(sp)
   24d70:	dc000017 	ldw	r16,0(sp)
   24d74:	dec00404 	addi	sp,sp,16
   24d78:	f800283a 	ret
   24d7c:	8009883a 	mov	r4,r16
   24d80:	014000f4 	movhi	r5,3
   24d84:	2971f004 	addi	r5,r5,-14400
   24d88:	00274180 	call	27418 <strcmp>
   24d8c:	103ff126 	beq	r2,zero,24d54 <_setlocale_r+0x38>
   24d90:	0005883a 	mov	r2,zero
   24d94:	003ff306 	br	24d64 <_setlocale_r+0x48>
   24d98:	008000f4 	movhi	r2,3
   24d9c:	10b20504 	addi	r2,r2,-14316
   24da0:	dfc00317 	ldw	ra,12(sp)
   24da4:	dc800217 	ldw	r18,8(sp)
   24da8:	dc400117 	ldw	r17,4(sp)
   24dac:	dc000017 	ldw	r16,0(sp)
   24db0:	dec00404 	addi	sp,sp,16
   24db4:	f800283a 	ret

00024db8 <__locale_charset>:
   24db8:	008000f4 	movhi	r2,3
   24dbc:	10b20604 	addi	r2,r2,-14312
   24dc0:	f800283a 	ret

00024dc4 <_localeconv_r>:
   24dc4:	008000f4 	movhi	r2,3
   24dc8:	10b20a04 	addi	r2,r2,-14296
   24dcc:	f800283a 	ret

00024dd0 <setlocale>:
   24dd0:	00c000f4 	movhi	r3,3
   24dd4:	18f93904 	addi	r3,r3,-6940
   24dd8:	2005883a 	mov	r2,r4
   24ddc:	19000017 	ldw	r4,0(r3)
   24de0:	280d883a 	mov	r6,r5
   24de4:	100b883a 	mov	r5,r2
   24de8:	0024d1c1 	jmpi	24d1c <_setlocale_r>

00024dec <localeconv>:
   24dec:	008000f4 	movhi	r2,3
   24df0:	10b20a04 	addi	r2,r2,-14296
   24df4:	f800283a 	ret

00024df8 <__smakebuf_r>:
   24df8:	2880030b 	ldhu	r2,12(r5)
   24dfc:	deffed04 	addi	sp,sp,-76
   24e00:	dc401015 	stw	r17,64(sp)
   24e04:	10c0008c 	andi	r3,r2,2
   24e08:	18ffffcc 	andi	r3,r3,65535
   24e0c:	18e0001c 	xori	r3,r3,32768
   24e10:	dc000f15 	stw	r16,60(sp)
   24e14:	dfc01215 	stw	ra,72(sp)
   24e18:	dc801115 	stw	r18,68(sp)
   24e1c:	18e00004 	addi	r3,r3,-32768
   24e20:	2821883a 	mov	r16,r5
   24e24:	2023883a 	mov	r17,r4
   24e28:	1800381e 	bne	r3,zero,24f0c <__smakebuf_r+0x114>
   24e2c:	2940038f 	ldh	r5,14(r5)
   24e30:	28002d16 	blt	r5,zero,24ee8 <__smakebuf_r+0xf0>
   24e34:	d80d883a 	mov	r6,sp
   24e38:	00277a80 	call	277a8 <_fstat_r>
   24e3c:	10002916 	blt	r2,zero,24ee4 <__smakebuf_r+0xec>
   24e40:	d8800117 	ldw	r2,4(sp)
   24e44:	00e00014 	movui	r3,32768
   24e48:	10bc000c 	andi	r2,r2,61440
   24e4c:	10c03c26 	beq	r2,r3,24f40 <__smakebuf_r+0x148>
   24e50:	80c0030b 	ldhu	r3,12(r16)
   24e54:	18c20014 	ori	r3,r3,2048
   24e58:	80c0030d 	sth	r3,12(r16)
   24e5c:	00c80004 	movi	r3,8192
   24e60:	10c00c1e 	bne	r2,r3,24e94 <__smakebuf_r+0x9c>
   24e64:	8140038f 	ldh	r5,14(r16)
   24e68:	8809883a 	mov	r4,r17
   24e6c:	00278100 	call	27810 <_isatty_r>
   24e70:	10000826 	beq	r2,zero,24e94 <__smakebuf_r+0x9c>
   24e74:	80c0030b 	ldhu	r3,12(r16)
   24e78:	808010c4 	addi	r2,r16,67
   24e7c:	80800015 	stw	r2,0(r16)
   24e80:	18c00054 	ori	r3,r3,1
   24e84:	80800415 	stw	r2,16(r16)
   24e88:	00800044 	movi	r2,1
   24e8c:	80c0030d 	sth	r3,12(r16)
   24e90:	80800515 	stw	r2,20(r16)
   24e94:	04810004 	movi	r18,1024
   24e98:	8809883a 	mov	r4,r17
   24e9c:	900b883a 	mov	r5,r18
   24ea0:	0024fa00 	call	24fa0 <_malloc_r>
   24ea4:	10003026 	beq	r2,zero,24f68 <__smakebuf_r+0x170>
   24ea8:	80c0030b 	ldhu	r3,12(r16)
   24eac:	010000b4 	movhi	r4,2
   24eb0:	210ffc04 	addi	r4,r4,16368
   24eb4:	89000f15 	stw	r4,60(r17)
   24eb8:	18c02014 	ori	r3,r3,128
   24ebc:	80c0030d 	sth	r3,12(r16)
   24ec0:	80800015 	stw	r2,0(r16)
   24ec4:	80800415 	stw	r2,16(r16)
   24ec8:	84800515 	stw	r18,20(r16)
   24ecc:	dfc01217 	ldw	ra,72(sp)
   24ed0:	dc801117 	ldw	r18,68(sp)
   24ed4:	dc401017 	ldw	r17,64(sp)
   24ed8:	dc000f17 	ldw	r16,60(sp)
   24edc:	dec01304 	addi	sp,sp,76
   24ee0:	f800283a 	ret
   24ee4:	8080030b 	ldhu	r2,12(r16)
   24ee8:	10c0200c 	andi	r3,r2,128
   24eec:	18ffffcc 	andi	r3,r3,65535
   24ef0:	18e0001c 	xori	r3,r3,32768
   24ef4:	18e00004 	addi	r3,r3,-32768
   24ef8:	18000f1e 	bne	r3,zero,24f38 <__smakebuf_r+0x140>
   24efc:	04810004 	movi	r18,1024
   24f00:	10820014 	ori	r2,r2,2048
   24f04:	8080030d 	sth	r2,12(r16)
   24f08:	003fe306 	br	24e98 <__smakebuf_r+0xa0>
   24f0c:	288010c4 	addi	r2,r5,67
   24f10:	28800015 	stw	r2,0(r5)
   24f14:	28800415 	stw	r2,16(r5)
   24f18:	00800044 	movi	r2,1
   24f1c:	28800515 	stw	r2,20(r5)
   24f20:	dfc01217 	ldw	ra,72(sp)
   24f24:	dc801117 	ldw	r18,68(sp)
   24f28:	dc401017 	ldw	r17,64(sp)
   24f2c:	dc000f17 	ldw	r16,60(sp)
   24f30:	dec01304 	addi	sp,sp,76
   24f34:	f800283a 	ret
   24f38:	04801004 	movi	r18,64
   24f3c:	003ff006 	br	24f00 <__smakebuf_r+0x108>
   24f40:	81000a17 	ldw	r4,40(r16)
   24f44:	00c000b4 	movhi	r3,2
   24f48:	18dced04 	addi	r3,r3,29620
   24f4c:	20ffc01e 	bne	r4,r3,24e50 <__smakebuf_r+0x58>
   24f50:	8080030b 	ldhu	r2,12(r16)
   24f54:	00c10004 	movi	r3,1024
   24f58:	80c01315 	stw	r3,76(r16)
   24f5c:	10c4b03a 	or	r2,r2,r3
   24f60:	8080030d 	sth	r2,12(r16)
   24f64:	003fcb06 	br	24e94 <__smakebuf_r+0x9c>
   24f68:	8080030b 	ldhu	r2,12(r16)
   24f6c:	10c0800c 	andi	r3,r2,512
   24f70:	18ffffcc 	andi	r3,r3,65535
   24f74:	18e0001c 	xori	r3,r3,32768
   24f78:	18e00004 	addi	r3,r3,-32768
   24f7c:	183fd31e 	bne	r3,zero,24ecc <__smakebuf_r+0xd4>
   24f80:	10800094 	ori	r2,r2,2
   24f84:	80c010c4 	addi	r3,r16,67
   24f88:	8080030d 	sth	r2,12(r16)
   24f8c:	00800044 	movi	r2,1
   24f90:	80c00015 	stw	r3,0(r16)
   24f94:	80c00415 	stw	r3,16(r16)
   24f98:	80800515 	stw	r2,20(r16)
   24f9c:	003fcb06 	br	24ecc <__smakebuf_r+0xd4>

00024fa0 <_malloc_r>:
   24fa0:	defff604 	addi	sp,sp,-40
   24fa4:	dc800215 	stw	r18,8(sp)
   24fa8:	dfc00915 	stw	ra,36(sp)
   24fac:	df000815 	stw	fp,32(sp)
   24fb0:	ddc00715 	stw	r23,28(sp)
   24fb4:	dd800615 	stw	r22,24(sp)
   24fb8:	dd400515 	stw	r21,20(sp)
   24fbc:	dd000415 	stw	r20,16(sp)
   24fc0:	dcc00315 	stw	r19,12(sp)
   24fc4:	dc400115 	stw	r17,4(sp)
   24fc8:	dc000015 	stw	r16,0(sp)
   24fcc:	288002c4 	addi	r2,r5,11
   24fd0:	00c00584 	movi	r3,22
   24fd4:	2025883a 	mov	r18,r4
   24fd8:	18802b2e 	bgeu	r3,r2,25088 <_malloc_r+0xe8>
   24fdc:	047ffe04 	movi	r17,-8
   24fe0:	1462703a 	and	r17,r2,r17
   24fe4:	88002a16 	blt	r17,zero,25090 <_malloc_r+0xf0>
   24fe8:	89402936 	bltu	r17,r5,25090 <_malloc_r+0xf0>
   24fec:	9009883a 	mov	r4,r18
   24ff0:	002a05c0 	call	2a05c <__malloc_lock>
   24ff4:	00807dc4 	movi	r2,503
   24ff8:	14402936 	bltu	r2,r17,250a0 <_malloc_r+0x100>
   24ffc:	8808d0fa 	srli	r4,r17,3
   25000:	04c000f4 	movhi	r19,3
   25004:	9cf3b404 	addi	r19,r19,-12592
   25008:	2105883a 	add	r2,r4,r4
   2500c:	1085883a 	add	r2,r2,r2
   25010:	1085883a 	add	r2,r2,r2
   25014:	9885883a 	add	r2,r19,r2
   25018:	14000317 	ldw	r16,12(r2)
   2501c:	80815526 	beq	r16,r2,25574 <_malloc_r+0x5d4>
   25020:	81000117 	ldw	r4,4(r16)
   25024:	00bfff04 	movi	r2,-4
   25028:	80c00317 	ldw	r3,12(r16)
   2502c:	2084703a 	and	r2,r4,r2
   25030:	8085883a 	add	r2,r16,r2
   25034:	11800117 	ldw	r6,4(r2)
   25038:	81400217 	ldw	r5,8(r16)
   2503c:	9009883a 	mov	r4,r18
   25040:	31800054 	ori	r6,r6,1
   25044:	11800115 	stw	r6,4(r2)
   25048:	28c00315 	stw	r3,12(r5)
   2504c:	19400215 	stw	r5,8(r3)
   25050:	002a07c0 	call	2a07c <__malloc_unlock>
   25054:	80800204 	addi	r2,r16,8
   25058:	dfc00917 	ldw	ra,36(sp)
   2505c:	df000817 	ldw	fp,32(sp)
   25060:	ddc00717 	ldw	r23,28(sp)
   25064:	dd800617 	ldw	r22,24(sp)
   25068:	dd400517 	ldw	r21,20(sp)
   2506c:	dd000417 	ldw	r20,16(sp)
   25070:	dcc00317 	ldw	r19,12(sp)
   25074:	dc800217 	ldw	r18,8(sp)
   25078:	dc400117 	ldw	r17,4(sp)
   2507c:	dc000017 	ldw	r16,0(sp)
   25080:	dec00a04 	addi	sp,sp,40
   25084:	f800283a 	ret
   25088:	04400404 	movi	r17,16
   2508c:	897fd72e 	bgeu	r17,r5,24fec <_malloc_r+0x4c>
   25090:	00800304 	movi	r2,12
   25094:	90800015 	stw	r2,0(r18)
   25098:	0005883a 	mov	r2,zero
   2509c:	003fee06 	br	25058 <_malloc_r+0xb8>
   250a0:	8808d27a 	srli	r4,r17,9
   250a4:	20007126 	beq	r4,zero,2526c <_malloc_r+0x2cc>
   250a8:	00800104 	movi	r2,4
   250ac:	1100eb36 	bltu	r2,r4,2545c <_malloc_r+0x4bc>
   250b0:	8808d1ba 	srli	r4,r17,6
   250b4:	21000e04 	addi	r4,r4,56
   250b8:	210b883a 	add	r5,r4,r4
   250bc:	294b883a 	add	r5,r5,r5
   250c0:	294b883a 	add	r5,r5,r5
   250c4:	04c000f4 	movhi	r19,3
   250c8:	9cf3b404 	addi	r19,r19,-12592
   250cc:	994b883a 	add	r5,r19,r5
   250d0:	2c000317 	ldw	r16,12(r5)
   250d4:	2c000e26 	beq	r5,r16,25110 <_malloc_r+0x170>
   250d8:	80c00117 	ldw	r3,4(r16)
   250dc:	01ffff04 	movi	r7,-4
   250e0:	018003c4 	movi	r6,15
   250e4:	19c6703a 	and	r3,r3,r7
   250e8:	1c45c83a 	sub	r2,r3,r17
   250ec:	30800716 	blt	r6,r2,2510c <_malloc_r+0x16c>
   250f0:	1000610e 	bge	r2,zero,25278 <_malloc_r+0x2d8>
   250f4:	84000317 	ldw	r16,12(r16)
   250f8:	2c000526 	beq	r5,r16,25110 <_malloc_r+0x170>
   250fc:	80c00117 	ldw	r3,4(r16)
   25100:	19c6703a 	and	r3,r3,r7
   25104:	1c45c83a 	sub	r2,r3,r17
   25108:	30bff90e 	bge	r6,r2,250f0 <_malloc_r+0x150>
   2510c:	213fffc4 	addi	r4,r4,-1
   25110:	21000044 	addi	r4,r4,1
   25114:	9c000417 	ldw	r16,16(r19)
   25118:	00c000f4 	movhi	r3,3
   2511c:	18f3b404 	addi	r3,r3,-12592
   25120:	1a400204 	addi	r9,r3,8
   25124:	8240ff26 	beq	r16,r9,25524 <_malloc_r+0x584>
   25128:	81400117 	ldw	r5,4(r16)
   2512c:	00bfff04 	movi	r2,-4
   25130:	018003c4 	movi	r6,15
   25134:	2884703a 	and	r2,r5,r2
   25138:	144bc83a 	sub	r5,r2,r17
   2513c:	3140ea16 	blt	r6,r5,254e8 <_malloc_r+0x548>
   25140:	1a400515 	stw	r9,20(r3)
   25144:	1a400415 	stw	r9,16(r3)
   25148:	2800570e 	bge	r5,zero,252a8 <_malloc_r+0x308>
   2514c:	01407fc4 	movi	r5,511
   25150:	2880ca36 	bltu	r5,r2,2547c <_malloc_r+0x4dc>
   25154:	1004d0fa 	srli	r2,r2,3
   25158:	02000044 	movi	r8,1
   2515c:	19c00117 	ldw	r7,4(r3)
   25160:	108b883a 	add	r5,r2,r2
   25164:	294b883a 	add	r5,r5,r5
   25168:	1005d0ba 	srai	r2,r2,2
   2516c:	294b883a 	add	r5,r5,r5
   25170:	28cb883a 	add	r5,r5,r3
   25174:	29800217 	ldw	r6,8(r5)
   25178:	4084983a 	sll	r2,r8,r2
   2517c:	81400315 	stw	r5,12(r16)
   25180:	81800215 	stw	r6,8(r16)
   25184:	11c4b03a 	or	r2,r2,r7
   25188:	18800115 	stw	r2,4(r3)
   2518c:	2c000215 	stw	r16,8(r5)
   25190:	34000315 	stw	r16,12(r6)
   25194:	200bd0ba 	srai	r5,r4,2
   25198:	00c00044 	movi	r3,1
   2519c:	194a983a 	sll	r5,r3,r5
   251a0:	11404936 	bltu	r2,r5,252c8 <_malloc_r+0x328>
   251a4:	1146703a 	and	r3,r2,r5
   251a8:	18000a1e 	bne	r3,zero,251d4 <_malloc_r+0x234>
   251ac:	00ffff04 	movi	r3,-4
   251b0:	294b883a 	add	r5,r5,r5
   251b4:	20c8703a 	and	r4,r4,r3
   251b8:	1146703a 	and	r3,r2,r5
   251bc:	21000104 	addi	r4,r4,4
   251c0:	1800041e 	bne	r3,zero,251d4 <_malloc_r+0x234>
   251c4:	294b883a 	add	r5,r5,r5
   251c8:	1146703a 	and	r3,r2,r5
   251cc:	21000104 	addi	r4,r4,4
   251d0:	183ffc26 	beq	r3,zero,251c4 <_malloc_r+0x224>
   251d4:	023fff04 	movi	r8,-4
   251d8:	01c003c4 	movi	r7,15
   251dc:	2105883a 	add	r2,r4,r4
   251e0:	1085883a 	add	r2,r2,r2
   251e4:	1085883a 	add	r2,r2,r2
   251e8:	9899883a 	add	r12,r19,r2
   251ec:	62800304 	addi	r10,r12,12
   251f0:	2017883a 	mov	r11,r4
   251f4:	54000017 	ldw	r16,0(r10)
   251f8:	51bffd04 	addi	r6,r10,-12
   251fc:	8180041e 	bne	r16,r6,25210 <_malloc_r+0x270>
   25200:	0000ca06 	br	2552c <_malloc_r+0x58c>
   25204:	10001c0e 	bge	r2,zero,25278 <_malloc_r+0x2d8>
   25208:	84000317 	ldw	r16,12(r16)
   2520c:	8180c726 	beq	r16,r6,2552c <_malloc_r+0x58c>
   25210:	80c00117 	ldw	r3,4(r16)
   25214:	1a06703a 	and	r3,r3,r8
   25218:	1c45c83a 	sub	r2,r3,r17
   2521c:	38bff90e 	bge	r7,r2,25204 <_malloc_r+0x264>
   25220:	81000317 	ldw	r4,12(r16)
   25224:	81400217 	ldw	r5,8(r16)
   25228:	8447883a 	add	r3,r16,r17
   2522c:	8c400054 	ori	r17,r17,1
   25230:	29000315 	stw	r4,12(r5)
   25234:	21400215 	stw	r5,8(r4)
   25238:	84400115 	stw	r17,4(r16)
   2523c:	1889883a 	add	r4,r3,r2
   25240:	11400054 	ori	r5,r2,1
   25244:	98c00515 	stw	r3,20(r19)
   25248:	98c00415 	stw	r3,16(r19)
   2524c:	20800015 	stw	r2,0(r4)
   25250:	1a400315 	stw	r9,12(r3)
   25254:	1a400215 	stw	r9,8(r3)
   25258:	19400115 	stw	r5,4(r3)
   2525c:	9009883a 	mov	r4,r18
   25260:	002a07c0 	call	2a07c <__malloc_unlock>
   25264:	80800204 	addi	r2,r16,8
   25268:	003f7b06 	br	25058 <_malloc_r+0xb8>
   2526c:	8808d0fa 	srli	r4,r17,3
   25270:	210b883a 	add	r5,r4,r4
   25274:	003f9106 	br	250bc <_malloc_r+0x11c>
   25278:	80c7883a 	add	r3,r16,r3
   2527c:	19400117 	ldw	r5,4(r3)
   25280:	80800317 	ldw	r2,12(r16)
   25284:	81000217 	ldw	r4,8(r16)
   25288:	29400054 	ori	r5,r5,1
   2528c:	19400115 	stw	r5,4(r3)
   25290:	20800315 	stw	r2,12(r4)
   25294:	11000215 	stw	r4,8(r2)
   25298:	9009883a 	mov	r4,r18
   2529c:	002a07c0 	call	2a07c <__malloc_unlock>
   252a0:	80800204 	addi	r2,r16,8
   252a4:	003f6c06 	br	25058 <_malloc_r+0xb8>
   252a8:	8085883a 	add	r2,r16,r2
   252ac:	10c00117 	ldw	r3,4(r2)
   252b0:	9009883a 	mov	r4,r18
   252b4:	18c00054 	ori	r3,r3,1
   252b8:	10c00115 	stw	r3,4(r2)
   252bc:	002a07c0 	call	2a07c <__malloc_unlock>
   252c0:	80800204 	addi	r2,r16,8
   252c4:	003f6406 	br	25058 <_malloc_r+0xb8>
   252c8:	9c000217 	ldw	r16,8(r19)
   252cc:	00bfff04 	movi	r2,-4
   252d0:	85400117 	ldw	r21,4(r16)
   252d4:	a8aa703a 	and	r21,r21,r2
   252d8:	ac400336 	bltu	r21,r17,252e8 <_malloc_r+0x348>
   252dc:	ac45c83a 	sub	r2,r21,r17
   252e0:	00c003c4 	movi	r3,15
   252e4:	18805316 	blt	r3,r2,25434 <_malloc_r+0x494>
   252e8:	d5e6aa17 	ldw	r23,-25944(gp)
   252ec:	d0e00317 	ldw	r3,-32756(gp)
   252f0:	00bfffc4 	movi	r2,-1
   252f4:	8579883a 	add	fp,r16,r21
   252f8:	8def883a 	add	r23,r17,r23
   252fc:	1880d226 	beq	r3,r2,25648 <_malloc_r+0x6a8>
   25300:	bdc403c4 	addi	r23,r23,4111
   25304:	00bc0004 	movi	r2,-4096
   25308:	b8ae703a 	and	r23,r23,r2
   2530c:	9009883a 	mov	r4,r18
   25310:	b80b883a 	mov	r5,r23
   25314:	00272740 	call	27274 <_sbrk_r>
   25318:	1029883a 	mov	r20,r2
   2531c:	00bfffc4 	movi	r2,-1
   25320:	a080d126 	beq	r20,r2,25668 <_malloc_r+0x6c8>
   25324:	a7009f36 	bltu	r20,fp,255a4 <_malloc_r+0x604>
   25328:	058000f4 	movhi	r22,3
   2532c:	b5bfea04 	addi	r22,r22,-88
   25330:	b0800017 	ldw	r2,0(r22)
   25334:	b885883a 	add	r2,r23,r2
   25338:	b0800015 	stw	r2,0(r22)
   2533c:	e500cf26 	beq	fp,r20,2567c <_malloc_r+0x6dc>
   25340:	d1200317 	ldw	r4,-32756(gp)
   25344:	00ffffc4 	movi	r3,-1
   25348:	20c0e026 	beq	r4,r3,256cc <_malloc_r+0x72c>
   2534c:	a739c83a 	sub	fp,r20,fp
   25350:	1705883a 	add	r2,r2,fp
   25354:	b0800015 	stw	r2,0(r22)
   25358:	a08001cc 	andi	r2,r20,7
   2535c:	1000a526 	beq	r2,zero,255f4 <_malloc_r+0x654>
   25360:	a0a9c83a 	sub	r20,r20,r2
   25364:	00c40204 	movi	r3,4104
   25368:	a5000204 	addi	r20,r20,8
   2536c:	1885c83a 	sub	r2,r3,r2
   25370:	a5c7883a 	add	r3,r20,r23
   25374:	18c3ffcc 	andi	r3,r3,4095
   25378:	10efc83a 	sub	r23,r2,r3
   2537c:	9009883a 	mov	r4,r18
   25380:	b80b883a 	mov	r5,r23
   25384:	00272740 	call	27274 <_sbrk_r>
   25388:	00ffffc4 	movi	r3,-1
   2538c:	10c0cc26 	beq	r2,r3,256c0 <_malloc_r+0x720>
   25390:	1505c83a 	sub	r2,r2,r20
   25394:	b887883a 	add	r3,r23,r2
   25398:	18c00054 	ori	r3,r3,1
   2539c:	b0800017 	ldw	r2,0(r22)
   253a0:	9d000215 	stw	r20,8(r19)
   253a4:	a0c00115 	stw	r3,4(r20)
   253a8:	b885883a 	add	r2,r23,r2
   253ac:	b0800015 	stw	r2,0(r22)
   253b0:	84c00e26 	beq	r16,r19,253ec <_malloc_r+0x44c>
   253b4:	00c003c4 	movi	r3,15
   253b8:	1d40902e 	bgeu	r3,r21,255fc <_malloc_r+0x65c>
   253bc:	ad7ffd04 	addi	r21,r21,-12
   253c0:	013ffe04 	movi	r4,-8
   253c4:	a908703a 	and	r4,r21,r4
   253c8:	810b883a 	add	r5,r16,r4
   253cc:	01800144 	movi	r6,5
   253d0:	29800115 	stw	r6,4(r5)
   253d4:	29800215 	stw	r6,8(r5)
   253d8:	81400117 	ldw	r5,4(r16)
   253dc:	2940004c 	andi	r5,r5,1
   253e0:	214ab03a 	or	r5,r4,r5
   253e4:	81400115 	stw	r5,4(r16)
   253e8:	1900ae36 	bltu	r3,r4,256a4 <_malloc_r+0x704>
   253ec:	d0e6a917 	ldw	r3,-25948(gp)
   253f0:	1880012e 	bgeu	r3,r2,253f8 <_malloc_r+0x458>
   253f4:	d0a6a915 	stw	r2,-25948(gp)
   253f8:	d0e6a817 	ldw	r3,-25952(gp)
   253fc:	9c000217 	ldw	r16,8(r19)
   25400:	1880012e 	bgeu	r3,r2,25408 <_malloc_r+0x468>
   25404:	d0a6a815 	stw	r2,-25952(gp)
   25408:	80c00117 	ldw	r3,4(r16)
   2540c:	00bfff04 	movi	r2,-4
   25410:	1886703a 	and	r3,r3,r2
   25414:	1c45c83a 	sub	r2,r3,r17
   25418:	1c400236 	bltu	r3,r17,25424 <_malloc_r+0x484>
   2541c:	00c003c4 	movi	r3,15
   25420:	18800416 	blt	r3,r2,25434 <_malloc_r+0x494>
   25424:	9009883a 	mov	r4,r18
   25428:	002a07c0 	call	2a07c <__malloc_unlock>
   2542c:	0005883a 	mov	r2,zero
   25430:	003f0906 	br	25058 <_malloc_r+0xb8>
   25434:	88c00054 	ori	r3,r17,1
   25438:	10800054 	ori	r2,r2,1
   2543c:	80c00115 	stw	r3,4(r16)
   25440:	8463883a 	add	r17,r16,r17
   25444:	88800115 	stw	r2,4(r17)
   25448:	9009883a 	mov	r4,r18
   2544c:	9c400215 	stw	r17,8(r19)
   25450:	002a07c0 	call	2a07c <__malloc_unlock>
   25454:	80800204 	addi	r2,r16,8
   25458:	003eff06 	br	25058 <_malloc_r+0xb8>
   2545c:	00800504 	movi	r2,20
   25460:	1100492e 	bgeu	r2,r4,25588 <_malloc_r+0x5e8>
   25464:	00801504 	movi	r2,84
   25468:	11005c36 	bltu	r2,r4,255dc <_malloc_r+0x63c>
   2546c:	8808d33a 	srli	r4,r17,12
   25470:	21001b84 	addi	r4,r4,110
   25474:	210b883a 	add	r5,r4,r4
   25478:	003f1006 	br	250bc <_malloc_r+0x11c>
   2547c:	1006d27a 	srli	r3,r2,9
   25480:	01400104 	movi	r5,4
   25484:	28c0432e 	bgeu	r5,r3,25594 <_malloc_r+0x5f4>
   25488:	01400504 	movi	r5,20
   2548c:	28c07036 	bltu	r5,r3,25650 <_malloc_r+0x6b0>
   25490:	194016c4 	addi	r5,r3,91
   25494:	294d883a 	add	r6,r5,r5
   25498:	318d883a 	add	r6,r6,r6
   2549c:	318d883a 	add	r6,r6,r6
   254a0:	998d883a 	add	r6,r19,r6
   254a4:	30c00217 	ldw	r3,8(r6)
   254a8:	01c000f4 	movhi	r7,3
   254ac:	39f3b404 	addi	r7,r7,-12592
   254b0:	19805726 	beq	r3,r6,25610 <_malloc_r+0x670>
   254b4:	01ffff04 	movi	r7,-4
   254b8:	19400117 	ldw	r5,4(r3)
   254bc:	29ca703a 	and	r5,r5,r7
   254c0:	1140022e 	bgeu	r2,r5,254cc <_malloc_r+0x52c>
   254c4:	18c00217 	ldw	r3,8(r3)
   254c8:	30fffb1e 	bne	r6,r3,254b8 <_malloc_r+0x518>
   254cc:	19400317 	ldw	r5,12(r3)
   254d0:	98800117 	ldw	r2,4(r19)
   254d4:	81400315 	stw	r5,12(r16)
   254d8:	80c00215 	stw	r3,8(r16)
   254dc:	2c000215 	stw	r16,8(r5)
   254e0:	1c000315 	stw	r16,12(r3)
   254e4:	003f2b06 	br	25194 <_malloc_r+0x1f4>
   254e8:	8445883a 	add	r2,r16,r17
   254ec:	8c400054 	ori	r17,r17,1
   254f0:	18800515 	stw	r2,20(r3)
   254f4:	18800415 	stw	r2,16(r3)
   254f8:	29000054 	ori	r4,r5,1
   254fc:	1147883a 	add	r3,r2,r5
   25500:	84400115 	stw	r17,4(r16)
   25504:	11000115 	stw	r4,4(r2)
   25508:	12400315 	stw	r9,12(r2)
   2550c:	12400215 	stw	r9,8(r2)
   25510:	19400015 	stw	r5,0(r3)
   25514:	9009883a 	mov	r4,r18
   25518:	002a07c0 	call	2a07c <__malloc_unlock>
   2551c:	80800204 	addi	r2,r16,8
   25520:	003ecd06 	br	25058 <_malloc_r+0xb8>
   25524:	18800117 	ldw	r2,4(r3)
   25528:	003f1a06 	br	25194 <_malloc_r+0x1f4>
   2552c:	5ac00044 	addi	r11,r11,1
   25530:	588000cc 	andi	r2,r11,3
   25534:	52800204 	addi	r10,r10,8
   25538:	103f2e1e 	bne	r2,zero,251f4 <_malloc_r+0x254>
   2553c:	20c000cc 	andi	r3,r4,3
   25540:	60bffe04 	addi	r2,r12,-8
   25544:	18006f26 	beq	r3,zero,25704 <_malloc_r+0x764>
   25548:	63000017 	ldw	r12,0(r12)
   2554c:	213fffc4 	addi	r4,r4,-1
   25550:	60bffa26 	beq	r12,r2,2553c <_malloc_r+0x59c>
   25554:	98800117 	ldw	r2,4(r19)
   25558:	294b883a 	add	r5,r5,r5
   2555c:	117f5a36 	bltu	r2,r5,252c8 <_malloc_r+0x328>
   25560:	283f5926 	beq	r5,zero,252c8 <_malloc_r+0x328>
   25564:	1146703a 	and	r3,r2,r5
   25568:	18001626 	beq	r3,zero,255c4 <_malloc_r+0x624>
   2556c:	5809883a 	mov	r4,r11
   25570:	003f1a06 	br	251dc <_malloc_r+0x23c>
   25574:	80800204 	addi	r2,r16,8
   25578:	84000517 	ldw	r16,20(r16)
   2557c:	143ea81e 	bne	r2,r16,25020 <_malloc_r+0x80>
   25580:	21000084 	addi	r4,r4,2
   25584:	003ee306 	br	25114 <_malloc_r+0x174>
   25588:	210016c4 	addi	r4,r4,91
   2558c:	210b883a 	add	r5,r4,r4
   25590:	003eca06 	br	250bc <_malloc_r+0x11c>
   25594:	100ad1ba 	srli	r5,r2,6
   25598:	29400e04 	addi	r5,r5,56
   2559c:	294d883a 	add	r6,r5,r5
   255a0:	003fbd06 	br	25498 <_malloc_r+0x4f8>
   255a4:	84ff6026 	beq	r16,r19,25328 <_malloc_r+0x388>
   255a8:	008000f4 	movhi	r2,3
   255ac:	10b3b404 	addi	r2,r2,-12592
   255b0:	14000217 	ldw	r16,8(r2)
   255b4:	00bfff04 	movi	r2,-4
   255b8:	80c00117 	ldw	r3,4(r16)
   255bc:	1886703a 	and	r3,r3,r2
   255c0:	003f9406 	br	25414 <_malloc_r+0x474>
   255c4:	294b883a 	add	r5,r5,r5
   255c8:	1146703a 	and	r3,r2,r5
   255cc:	5ac00104 	addi	r11,r11,4
   255d0:	183ffc26 	beq	r3,zero,255c4 <_malloc_r+0x624>
   255d4:	5809883a 	mov	r4,r11
   255d8:	003f0006 	br	251dc <_malloc_r+0x23c>
   255dc:	00805504 	movi	r2,340
   255e0:	11001336 	bltu	r2,r4,25630 <_malloc_r+0x690>
   255e4:	8808d3fa 	srli	r4,r17,15
   255e8:	21001dc4 	addi	r4,r4,119
   255ec:	210b883a 	add	r5,r4,r4
   255f0:	003eb206 	br	250bc <_malloc_r+0x11c>
   255f4:	00840004 	movi	r2,4096
   255f8:	003f5d06 	br	25370 <_malloc_r+0x3d0>
   255fc:	00800044 	movi	r2,1
   25600:	a0800115 	stw	r2,4(r20)
   25604:	a021883a 	mov	r16,r20
   25608:	0007883a 	mov	r3,zero
   2560c:	003f8106 	br	25414 <_malloc_r+0x474>
   25610:	280bd0ba 	srai	r5,r5,2
   25614:	01800044 	movi	r6,1
   25618:	38800117 	ldw	r2,4(r7)
   2561c:	314c983a 	sll	r6,r6,r5
   25620:	180b883a 	mov	r5,r3
   25624:	3084b03a 	or	r2,r6,r2
   25628:	38800115 	stw	r2,4(r7)
   2562c:	003fa906 	br	254d4 <_malloc_r+0x534>
   25630:	00815504 	movi	r2,1364
   25634:	11001836 	bltu	r2,r4,25698 <_malloc_r+0x6f8>
   25638:	8808d4ba 	srli	r4,r17,18
   2563c:	21001f04 	addi	r4,r4,124
   25640:	210b883a 	add	r5,r4,r4
   25644:	003e9d06 	br	250bc <_malloc_r+0x11c>
   25648:	bdc00404 	addi	r23,r23,16
   2564c:	003f2f06 	br	2530c <_malloc_r+0x36c>
   25650:	01401504 	movi	r5,84
   25654:	28c01f36 	bltu	r5,r3,256d4 <_malloc_r+0x734>
   25658:	100ad33a 	srli	r5,r2,12
   2565c:	29401b84 	addi	r5,r5,110
   25660:	294d883a 	add	r6,r5,r5
   25664:	003f8c06 	br	25498 <_malloc_r+0x4f8>
   25668:	9c000217 	ldw	r16,8(r19)
   2566c:	00bfff04 	movi	r2,-4
   25670:	80c00117 	ldw	r3,4(r16)
   25674:	1886703a 	and	r3,r3,r2
   25678:	003f6606 	br	25414 <_malloc_r+0x474>
   2567c:	e0c3ffcc 	andi	r3,fp,4095
   25680:	183f2f1e 	bne	r3,zero,25340 <_malloc_r+0x3a0>
   25684:	98c00217 	ldw	r3,8(r19)
   25688:	bd49883a 	add	r4,r23,r21
   2568c:	21000054 	ori	r4,r4,1
   25690:	19000115 	stw	r4,4(r3)
   25694:	003f5506 	br	253ec <_malloc_r+0x44c>
   25698:	01403f04 	movi	r5,252
   2569c:	01001f84 	movi	r4,126
   256a0:	003e8606 	br	250bc <_malloc_r+0x11c>
   256a4:	9009883a 	mov	r4,r18
   256a8:	81400204 	addi	r5,r16,8
   256ac:	00244080 	call	24408 <_free_r>
   256b0:	008000f4 	movhi	r2,3
   256b4:	10bfea04 	addi	r2,r2,-88
   256b8:	10800017 	ldw	r2,0(r2)
   256bc:	003f4b06 	br	253ec <_malloc_r+0x44c>
   256c0:	00c00044 	movi	r3,1
   256c4:	002f883a 	mov	r23,zero
   256c8:	003f3406 	br	2539c <_malloc_r+0x3fc>
   256cc:	d5200315 	stw	r20,-32756(gp)
   256d0:	003f2106 	br	25358 <_malloc_r+0x3b8>
   256d4:	01405504 	movi	r5,340
   256d8:	28c00436 	bltu	r5,r3,256ec <_malloc_r+0x74c>
   256dc:	100ad3fa 	srli	r5,r2,15
   256e0:	29401dc4 	addi	r5,r5,119
   256e4:	294d883a 	add	r6,r5,r5
   256e8:	003f6b06 	br	25498 <_malloc_r+0x4f8>
   256ec:	01415504 	movi	r5,1364
   256f0:	28c00936 	bltu	r5,r3,25718 <_malloc_r+0x778>
   256f4:	100ad4ba 	srli	r5,r2,18
   256f8:	29401f04 	addi	r5,r5,124
   256fc:	294d883a 	add	r6,r5,r5
   25700:	003f6506 	br	25498 <_malloc_r+0x4f8>
   25704:	98800117 	ldw	r2,4(r19)
   25708:	0146303a 	nor	r3,zero,r5
   2570c:	1884703a 	and	r2,r3,r2
   25710:	98800115 	stw	r2,4(r19)
   25714:	003f9006 	br	25558 <_malloc_r+0x5b8>
   25718:	01803f04 	movi	r6,252
   2571c:	01401f84 	movi	r5,126
   25720:	003f5d06 	br	25498 <_malloc_r+0x4f8>

00025724 <memchr>:
   25724:	008000c4 	movi	r2,3
   25728:	29403fcc 	andi	r5,r5,255
   2572c:	1180282e 	bgeu	r2,r6,257d0 <memchr+0xac>
   25730:	2086703a 	and	r3,r4,r2
   25734:	1800351e 	bne	r3,zero,2580c <memchr+0xe8>
   25738:	2816923a 	slli	r11,r5,8
   2573c:	2093883a 	add	r9,r4,r2
   25740:	22000084 	addi	r8,r4,2
   25744:	5957883a 	add	r11,r11,r5
   25748:	5816923a 	slli	r11,r11,8
   2574c:	20c00044 	addi	r3,r4,1
   25750:	037fbff4 	movhi	r13,65279
   25754:	6b7fbfc4 	addi	r13,r13,-257
   25758:	5957883a 	add	r11,r11,r5
   2575c:	5816923a 	slli	r11,r11,8
   25760:	03202074 	movhi	r12,32897
   25764:	63202004 	addi	r12,r12,-32640
   25768:	101d883a 	mov	r14,r2
   2576c:	5957883a 	add	r11,r11,r5
   25770:	21c00017 	ldw	r7,0(r4)
   25774:	31bfff04 	addi	r6,r6,-4
   25778:	1805883a 	mov	r2,r3
   2577c:	3acef03a 	xor	r7,r7,r11
   25780:	3b55883a 	add	r10,r7,r13
   25784:	01ce303a 	nor	r7,zero,r7
   25788:	51ce703a 	and	r7,r10,r7
   2578c:	3b0e703a 	and	r7,r7,r12
   25790:	38000a26 	beq	r7,zero,257bc <memchr+0x98>
   25794:	21c00003 	ldbu	r7,0(r4)
   25798:	39401e26 	beq	r7,r5,25814 <memchr+0xf0>
   2579c:	19c00003 	ldbu	r7,0(r3)
   257a0:	39401926 	beq	r7,r5,25808 <memchr+0xe4>
   257a4:	41c00003 	ldbu	r7,0(r8)
   257a8:	4005883a 	mov	r2,r8
   257ac:	39401626 	beq	r7,r5,25808 <memchr+0xe4>
   257b0:	49c00003 	ldbu	r7,0(r9)
   257b4:	4805883a 	mov	r2,r9
   257b8:	39401326 	beq	r7,r5,25808 <memchr+0xe4>
   257bc:	21000104 	addi	r4,r4,4
   257c0:	4a400104 	addi	r9,r9,4
   257c4:	42000104 	addi	r8,r8,4
   257c8:	18c00104 	addi	r3,r3,4
   257cc:	71bfe836 	bltu	r14,r6,25770 <memchr+0x4c>
   257d0:	2005883a 	mov	r2,r4
   257d4:	30000a26 	beq	r6,zero,25800 <memchr+0xdc>
   257d8:	10c00003 	ldbu	r3,0(r2)
   257dc:	19400a26 	beq	r3,r5,25808 <memchr+0xe4>
   257e0:	10c00044 	addi	r3,r2,1
   257e4:	118d883a 	add	r6,r2,r6
   257e8:	00000306 	br	257f8 <memchr+0xd4>
   257ec:	11000003 	ldbu	r4,0(r2)
   257f0:	18c00044 	addi	r3,r3,1
   257f4:	21400426 	beq	r4,r5,25808 <memchr+0xe4>
   257f8:	1805883a 	mov	r2,r3
   257fc:	19bffb1e 	bne	r3,r6,257ec <memchr+0xc8>
   25800:	0005883a 	mov	r2,zero
   25804:	f800283a 	ret
   25808:	f800283a 	ret
   2580c:	2005883a 	mov	r2,r4
   25810:	003ff106 	br	257d8 <memchr+0xb4>
   25814:	2005883a 	mov	r2,r4
   25818:	f800283a 	ret

0002581c <memcpy>:
   2581c:	defffb04 	addi	sp,sp,-20
   25820:	dc000015 	stw	r16,0(sp)
   25824:	dfc00415 	stw	ra,16(sp)
   25828:	dcc00315 	stw	r19,12(sp)
   2582c:	dc800215 	stw	r18,8(sp)
   25830:	dc400115 	stw	r17,4(sp)
   25834:	00c003c4 	movi	r3,15
   25838:	2021883a 	mov	r16,r4
   2583c:	3005883a 	mov	r2,r6
   25840:	1980032e 	bgeu	r3,r6,25850 <memcpy+0x34>
   25844:	2906b03a 	or	r3,r5,r4
   25848:	18c000cc 	andi	r3,r3,3
   2584c:	18001026 	beq	r3,zero,25890 <memcpy+0x74>
   25850:	8007883a 	mov	r3,r16
   25854:	288f883a 	add	r7,r5,r2
   25858:	10000526 	beq	r2,zero,25870 <memcpy+0x54>
   2585c:	29800003 	ldbu	r6,0(r5)
   25860:	18c00044 	addi	r3,r3,1
   25864:	29400044 	addi	r5,r5,1
   25868:	19bfffc5 	stb	r6,-1(r3)
   2586c:	29fffb1e 	bne	r5,r7,2585c <memcpy+0x40>
   25870:	8005883a 	mov	r2,r16
   25874:	dfc00417 	ldw	ra,16(sp)
   25878:	dcc00317 	ldw	r19,12(sp)
   2587c:	dc800217 	ldw	r18,8(sp)
   25880:	dc400117 	ldw	r17,4(sp)
   25884:	dc000017 	ldw	r16,0(sp)
   25888:	dec00504 	addi	sp,sp,20
   2588c:	f800283a 	ret
   25890:	32bffc04 	addi	r10,r6,-16
   25894:	5014d13a 	srli	r10,r10,4
   25898:	20800404 	addi	r2,r4,16
   2589c:	2007883a 	mov	r3,r4
   258a0:	5008913a 	slli	r4,r10,4
   258a4:	280f883a 	mov	r7,r5
   258a8:	1105883a 	add	r2,r2,r4
   258ac:	3a000017 	ldw	r8,0(r7)
   258b0:	18c00404 	addi	r3,r3,16
   258b4:	39c00404 	addi	r7,r7,16
   258b8:	1a3ffc15 	stw	r8,-16(r3)
   258bc:	3a3ffd17 	ldw	r8,-12(r7)
   258c0:	1a3ffd15 	stw	r8,-12(r3)
   258c4:	3a3ffe17 	ldw	r8,-8(r7)
   258c8:	1a3ffe15 	stw	r8,-8(r3)
   258cc:	3a3fff17 	ldw	r8,-4(r7)
   258d0:	1a3fff15 	stw	r8,-4(r3)
   258d4:	18bff51e 	bne	r3,r2,258ac <memcpy+0x90>
   258d8:	52800044 	addi	r10,r10,1
   258dc:	5014913a 	slli	r10,r10,4
   258e0:	308003cc 	andi	r2,r6,15
   258e4:	010000c4 	movi	r4,3
   258e8:	8287883a 	add	r3,r16,r10
   258ec:	2a95883a 	add	r10,r5,r10
   258f0:	2080182e 	bgeu	r4,r2,25954 <memcpy+0x138>
   258f4:	147fff04 	addi	r17,r2,-4
   258f8:	8808d0ba 	srli	r4,r17,2
   258fc:	1a400104 	addi	r9,r3,4
   25900:	180d883a 	mov	r6,r3
   25904:	2105883a 	add	r2,r4,r4
   25908:	1085883a 	add	r2,r2,r2
   2590c:	4893883a 	add	r9,r9,r2
   25910:	500f883a 	mov	r7,r10
   25914:	3a000017 	ldw	r8,0(r7)
   25918:	31800104 	addi	r6,r6,4
   2591c:	39c00104 	addi	r7,r7,4
   25920:	323fff15 	stw	r8,-4(r6)
   25924:	327ffb1e 	bne	r6,r9,25914 <memcpy+0xf8>
   25928:	20800044 	addi	r2,r4,1
   2592c:	1085883a 	add	r2,r2,r2
   25930:	1085883a 	add	r2,r2,r2
   25934:	017fff04 	movi	r5,-4
   25938:	18a5883a 	add	r18,r3,r2
   2593c:	50a7883a 	add	r19,r10,r2
   25940:	00294340 	call	29434 <__mulsi3>
   25944:	1445883a 	add	r2,r2,r17
   25948:	980b883a 	mov	r5,r19
   2594c:	9007883a 	mov	r3,r18
   25950:	003fc006 	br	25854 <memcpy+0x38>
   25954:	500b883a 	mov	r5,r10
   25958:	003fbe06 	br	25854 <memcpy+0x38>

0002595c <memmove>:
   2595c:	defffb04 	addi	sp,sp,-20
   25960:	dc000015 	stw	r16,0(sp)
   25964:	dfc00415 	stw	ra,16(sp)
   25968:	dcc00315 	stw	r19,12(sp)
   2596c:	dc800215 	stw	r18,8(sp)
   25970:	dc400115 	stw	r17,4(sp)
   25974:	2021883a 	mov	r16,r4
   25978:	300f883a 	mov	r7,r6
   2597c:	2900122e 	bgeu	r5,r4,259c8 <memmove+0x6c>
   25980:	2987883a 	add	r3,r5,r6
   25984:	20c0102e 	bgeu	r4,r3,259c8 <memmove+0x6c>
   25988:	218b883a 	add	r5,r4,r6
   2598c:	1989c83a 	sub	r4,r3,r6
   25990:	30000526 	beq	r6,zero,259a8 <memmove+0x4c>
   25994:	18ffffc4 	addi	r3,r3,-1
   25998:	18800003 	ldbu	r2,0(r3)
   2599c:	297fffc4 	addi	r5,r5,-1
   259a0:	28800005 	stb	r2,0(r5)
   259a4:	193ffb1e 	bne	r3,r4,25994 <memmove+0x38>
   259a8:	8005883a 	mov	r2,r16
   259ac:	dfc00417 	ldw	ra,16(sp)
   259b0:	dcc00317 	ldw	r19,12(sp)
   259b4:	dc800217 	ldw	r18,8(sp)
   259b8:	dc400117 	ldw	r17,4(sp)
   259bc:	dc000017 	ldw	r16,0(sp)
   259c0:	dec00504 	addi	sp,sp,20
   259c4:	f800283a 	ret
   259c8:	008003c4 	movi	r2,15
   259cc:	1180422e 	bgeu	r2,r6,25ad8 <memmove+0x17c>
   259d0:	2c04b03a 	or	r2,r5,r16
   259d4:	108000cc 	andi	r2,r2,3
   259d8:	10003f1e 	bne	r2,zero,25ad8 <memmove+0x17c>
   259dc:	32bffc04 	addi	r10,r6,-16
   259e0:	5014d13a 	srli	r10,r10,4
   259e4:	81000404 	addi	r4,r16,16
   259e8:	8007883a 	mov	r3,r16
   259ec:	5004913a 	slli	r2,r10,4
   259f0:	280f883a 	mov	r7,r5
   259f4:	2089883a 	add	r4,r4,r2
   259f8:	38800017 	ldw	r2,0(r7)
   259fc:	18c00404 	addi	r3,r3,16
   25a00:	39c00404 	addi	r7,r7,16
   25a04:	18bffc15 	stw	r2,-16(r3)
   25a08:	38bffd17 	ldw	r2,-12(r7)
   25a0c:	18bffd15 	stw	r2,-12(r3)
   25a10:	38bffe17 	ldw	r2,-8(r7)
   25a14:	18bffe15 	stw	r2,-8(r3)
   25a18:	38bfff17 	ldw	r2,-4(r7)
   25a1c:	18bfff15 	stw	r2,-4(r3)
   25a20:	193ff51e 	bne	r3,r4,259f8 <memmove+0x9c>
   25a24:	52800044 	addi	r10,r10,1
   25a28:	5014913a 	slli	r10,r10,4
   25a2c:	31c003cc 	andi	r7,r6,15
   25a30:	008000c4 	movi	r2,3
   25a34:	8287883a 	add	r3,r16,r10
   25a38:	2a95883a 	add	r10,r5,r10
   25a3c:	11c0282e 	bgeu	r2,r7,25ae0 <memmove+0x184>
   25a40:	3c7fff04 	addi	r17,r7,-4
   25a44:	8808d0ba 	srli	r4,r17,2
   25a48:	1a400104 	addi	r9,r3,4
   25a4c:	180d883a 	mov	r6,r3
   25a50:	2105883a 	add	r2,r4,r4
   25a54:	1085883a 	add	r2,r2,r2
   25a58:	4893883a 	add	r9,r9,r2
   25a5c:	5005883a 	mov	r2,r10
   25a60:	12000017 	ldw	r8,0(r2)
   25a64:	31800104 	addi	r6,r6,4
   25a68:	10800104 	addi	r2,r2,4
   25a6c:	323fff15 	stw	r8,-4(r6)
   25a70:	327ffb1e 	bne	r6,r9,25a60 <memmove+0x104>
   25a74:	20800044 	addi	r2,r4,1
   25a78:	1085883a 	add	r2,r2,r2
   25a7c:	1085883a 	add	r2,r2,r2
   25a80:	017fff04 	movi	r5,-4
   25a84:	18a5883a 	add	r18,r3,r2
   25a88:	50a7883a 	add	r19,r10,r2
   25a8c:	00294340 	call	29434 <__mulsi3>
   25a90:	144f883a 	add	r7,r2,r17
   25a94:	980b883a 	mov	r5,r19
   25a98:	9007883a 	mov	r3,r18
   25a9c:	383fc226 	beq	r7,zero,259a8 <memmove+0x4c>
   25aa0:	19cf883a 	add	r7,r3,r7
   25aa4:	29800003 	ldbu	r6,0(r5)
   25aa8:	18c00044 	addi	r3,r3,1
   25aac:	29400044 	addi	r5,r5,1
   25ab0:	19bfffc5 	stb	r6,-1(r3)
   25ab4:	19fffb1e 	bne	r3,r7,25aa4 <memmove+0x148>
   25ab8:	8005883a 	mov	r2,r16
   25abc:	dfc00417 	ldw	ra,16(sp)
   25ac0:	dcc00317 	ldw	r19,12(sp)
   25ac4:	dc800217 	ldw	r18,8(sp)
   25ac8:	dc400117 	ldw	r17,4(sp)
   25acc:	dc000017 	ldw	r16,0(sp)
   25ad0:	dec00504 	addi	sp,sp,20
   25ad4:	f800283a 	ret
   25ad8:	8007883a 	mov	r3,r16
   25adc:	003fef06 	br	25a9c <memmove+0x140>
   25ae0:	500b883a 	mov	r5,r10
   25ae4:	003fed06 	br	25a9c <memmove+0x140>

00025ae8 <memset>:
   25ae8:	00c000c4 	movi	r3,3
   25aec:	2005883a 	mov	r2,r4
   25af0:	29403fcc 	andi	r5,r5,255
   25af4:	19802d2e 	bgeu	r3,r6,25bac <memset+0xc4>
   25af8:	20c6703a 	and	r3,r4,r3
   25afc:	18002e1e 	bne	r3,zero,25bb8 <memset+0xd0>
   25b00:	2806923a 	slli	r3,r5,8
   25b04:	010003c4 	movi	r4,15
   25b08:	3011883a 	mov	r8,r6
   25b0c:	1946b03a 	or	r3,r3,r5
   25b10:	180e943a 	slli	r7,r3,16
   25b14:	38ceb03a 	or	r7,r7,r3
   25b18:	1007883a 	mov	r3,r2
   25b1c:	21800f2e 	bgeu	r4,r6,25b5c <memset+0x74>
   25b20:	19c00015 	stw	r7,0(r3)
   25b24:	19c00115 	stw	r7,4(r3)
   25b28:	19c00215 	stw	r7,8(r3)
   25b2c:	19c00315 	stw	r7,12(r3)
   25b30:	423ffc04 	addi	r8,r8,-16
   25b34:	18c00404 	addi	r3,r3,16
   25b38:	223ff936 	bltu	r4,r8,25b20 <memset+0x38>
   25b3c:	30fffc04 	addi	r3,r6,-16
   25b40:	1806d13a 	srli	r3,r3,4
   25b44:	318003cc 	andi	r6,r6,15
   25b48:	010000c4 	movi	r4,3
   25b4c:	18c00044 	addi	r3,r3,1
   25b50:	1806913a 	slli	r3,r3,4
   25b54:	10c7883a 	add	r3,r2,r3
   25b58:	21800e2e 	bgeu	r4,r6,25b94 <memset+0xac>
   25b5c:	1813883a 	mov	r9,r3
   25b60:	3011883a 	mov	r8,r6
   25b64:	010000c4 	movi	r4,3
   25b68:	49c00015 	stw	r7,0(r9)
   25b6c:	423fff04 	addi	r8,r8,-4
   25b70:	4a400104 	addi	r9,r9,4
   25b74:	223ffc36 	bltu	r4,r8,25b68 <memset+0x80>
   25b78:	313fff04 	addi	r4,r6,-4
   25b7c:	2008d0ba 	srli	r4,r4,2
   25b80:	318000cc 	andi	r6,r6,3
   25b84:	21000044 	addi	r4,r4,1
   25b88:	2109883a 	add	r4,r4,r4
   25b8c:	2109883a 	add	r4,r4,r4
   25b90:	1907883a 	add	r3,r3,r4
   25b94:	30000a26 	beq	r6,zero,25bc0 <memset+0xd8>
   25b98:	198d883a 	add	r6,r3,r6
   25b9c:	19400005 	stb	r5,0(r3)
   25ba0:	18c00044 	addi	r3,r3,1
   25ba4:	19bffd1e 	bne	r3,r6,25b9c <memset+0xb4>
   25ba8:	f800283a 	ret
   25bac:	2007883a 	mov	r3,r4
   25bb0:	303ff91e 	bne	r6,zero,25b98 <memset+0xb0>
   25bb4:	00000206 	br	25bc0 <memset+0xd8>
   25bb8:	2007883a 	mov	r3,r4
   25bbc:	003ff606 	br	25b98 <memset+0xb0>
   25bc0:	f800283a 	ret

00025bc4 <_Balloc>:
   25bc4:	20801317 	ldw	r2,76(r4)
   25bc8:	defffc04 	addi	sp,sp,-16
   25bcc:	dc400115 	stw	r17,4(sp)
   25bd0:	dc000015 	stw	r16,0(sp)
   25bd4:	dfc00315 	stw	ra,12(sp)
   25bd8:	dc800215 	stw	r18,8(sp)
   25bdc:	2023883a 	mov	r17,r4
   25be0:	2821883a 	mov	r16,r5
   25be4:	10000f26 	beq	r2,zero,25c24 <_Balloc+0x60>
   25be8:	8407883a 	add	r3,r16,r16
   25bec:	18c7883a 	add	r3,r3,r3
   25bf0:	10c7883a 	add	r3,r2,r3
   25bf4:	18800017 	ldw	r2,0(r3)
   25bf8:	10001126 	beq	r2,zero,25c40 <_Balloc+0x7c>
   25bfc:	11000017 	ldw	r4,0(r2)
   25c00:	19000015 	stw	r4,0(r3)
   25c04:	10000415 	stw	zero,16(r2)
   25c08:	10000315 	stw	zero,12(r2)
   25c0c:	dfc00317 	ldw	ra,12(sp)
   25c10:	dc800217 	ldw	r18,8(sp)
   25c14:	dc400117 	ldw	r17,4(sp)
   25c18:	dc000017 	ldw	r16,0(sp)
   25c1c:	dec00404 	addi	sp,sp,16
   25c20:	f800283a 	ret
   25c24:	01400104 	movi	r5,4
   25c28:	01800404 	movi	r6,16
   25c2c:	00275280 	call	27528 <_calloc_r>
   25c30:	88801315 	stw	r2,76(r17)
   25c34:	103fec1e 	bne	r2,zero,25be8 <_Balloc+0x24>
   25c38:	0005883a 	mov	r2,zero
   25c3c:	003ff306 	br	25c0c <_Balloc+0x48>
   25c40:	01400044 	movi	r5,1
   25c44:	2c24983a 	sll	r18,r5,r16
   25c48:	8809883a 	mov	r4,r17
   25c4c:	91800144 	addi	r6,r18,5
   25c50:	318d883a 	add	r6,r6,r6
   25c54:	318d883a 	add	r6,r6,r6
   25c58:	00275280 	call	27528 <_calloc_r>
   25c5c:	103ff626 	beq	r2,zero,25c38 <_Balloc+0x74>
   25c60:	14000115 	stw	r16,4(r2)
   25c64:	14800215 	stw	r18,8(r2)
   25c68:	003fe606 	br	25c04 <_Balloc+0x40>

00025c6c <_Bfree>:
   25c6c:	28000826 	beq	r5,zero,25c90 <_Bfree+0x24>
   25c70:	28c00117 	ldw	r3,4(r5)
   25c74:	20801317 	ldw	r2,76(r4)
   25c78:	18c7883a 	add	r3,r3,r3
   25c7c:	18c7883a 	add	r3,r3,r3
   25c80:	10c5883a 	add	r2,r2,r3
   25c84:	10c00017 	ldw	r3,0(r2)
   25c88:	28c00015 	stw	r3,0(r5)
   25c8c:	11400015 	stw	r5,0(r2)
   25c90:	f800283a 	ret

00025c94 <__multadd>:
   25c94:	defff604 	addi	sp,sp,-40
   25c98:	dd400515 	stw	r21,20(sp)
   25c9c:	2d400417 	ldw	r21,16(r5)
   25ca0:	df000815 	stw	fp,32(sp)
   25ca4:	ddc00715 	stw	r23,28(sp)
   25ca8:	dd800615 	stw	r22,24(sp)
   25cac:	dd000415 	stw	r20,16(sp)
   25cb0:	dc400115 	stw	r17,4(sp)
   25cb4:	dc000015 	stw	r16,0(sp)
   25cb8:	dfc00915 	stw	ra,36(sp)
   25cbc:	dcc00315 	stw	r19,12(sp)
   25cc0:	dc800215 	stw	r18,8(sp)
   25cc4:	282d883a 	mov	r22,r5
   25cc8:	202f883a 	mov	r23,r4
   25ccc:	3029883a 	mov	r20,r6
   25cd0:	3839883a 	mov	fp,r7
   25cd4:	2c000504 	addi	r16,r5,20
   25cd8:	0023883a 	mov	r17,zero
   25cdc:	84c00017 	ldw	r19,0(r16)
   25ce0:	a00b883a 	mov	r5,r20
   25ce4:	8c400044 	addi	r17,r17,1
   25ce8:	993fffcc 	andi	r4,r19,65535
   25cec:	00294340 	call	29434 <__mulsi3>
   25cf0:	1725883a 	add	r18,r2,fp
   25cf4:	9808d43a 	srli	r4,r19,16
   25cf8:	9026d43a 	srli	r19,r18,16
   25cfc:	a00b883a 	mov	r5,r20
   25d00:	00294340 	call	29434 <__mulsi3>
   25d04:	988f883a 	add	r7,r19,r2
   25d08:	3804943a 	slli	r2,r7,16
   25d0c:	94bfffcc 	andi	r18,r18,65535
   25d10:	3838d43a 	srli	fp,r7,16
   25d14:	14a5883a 	add	r18,r2,r18
   25d18:	84800015 	stw	r18,0(r16)
   25d1c:	84000104 	addi	r16,r16,4
   25d20:	8d7fee16 	blt	r17,r21,25cdc <__multadd+0x48>
   25d24:	e0000926 	beq	fp,zero,25d4c <__multadd+0xb8>
   25d28:	b0800217 	ldw	r2,8(r22)
   25d2c:	a880140e 	bge	r21,r2,25d80 <__multadd+0xec>
   25d30:	a8800144 	addi	r2,r21,5
   25d34:	1085883a 	add	r2,r2,r2
   25d38:	1085883a 	add	r2,r2,r2
   25d3c:	b085883a 	add	r2,r22,r2
   25d40:	ad400044 	addi	r21,r21,1
   25d44:	17000015 	stw	fp,0(r2)
   25d48:	b5400415 	stw	r21,16(r22)
   25d4c:	b005883a 	mov	r2,r22
   25d50:	dfc00917 	ldw	ra,36(sp)
   25d54:	df000817 	ldw	fp,32(sp)
   25d58:	ddc00717 	ldw	r23,28(sp)
   25d5c:	dd800617 	ldw	r22,24(sp)
   25d60:	dd400517 	ldw	r21,20(sp)
   25d64:	dd000417 	ldw	r20,16(sp)
   25d68:	dcc00317 	ldw	r19,12(sp)
   25d6c:	dc800217 	ldw	r18,8(sp)
   25d70:	dc400117 	ldw	r17,4(sp)
   25d74:	dc000017 	ldw	r16,0(sp)
   25d78:	dec00a04 	addi	sp,sp,40
   25d7c:	f800283a 	ret
   25d80:	b1400117 	ldw	r5,4(r22)
   25d84:	b809883a 	mov	r4,r23
   25d88:	29400044 	addi	r5,r5,1
   25d8c:	0025bc40 	call	25bc4 <_Balloc>
   25d90:	b1800417 	ldw	r6,16(r22)
   25d94:	b1400304 	addi	r5,r22,12
   25d98:	11000304 	addi	r4,r2,12
   25d9c:	31800084 	addi	r6,r6,2
   25da0:	318d883a 	add	r6,r6,r6
   25da4:	318d883a 	add	r6,r6,r6
   25da8:	1021883a 	mov	r16,r2
   25dac:	002581c0 	call	2581c <memcpy>
   25db0:	b0c00117 	ldw	r3,4(r22)
   25db4:	b8801317 	ldw	r2,76(r23)
   25db8:	18c7883a 	add	r3,r3,r3
   25dbc:	18c7883a 	add	r3,r3,r3
   25dc0:	10c5883a 	add	r2,r2,r3
   25dc4:	10c00017 	ldw	r3,0(r2)
   25dc8:	b0c00015 	stw	r3,0(r22)
   25dcc:	15800015 	stw	r22,0(r2)
   25dd0:	802d883a 	mov	r22,r16
   25dd4:	003fd606 	br	25d30 <__multadd+0x9c>

00025dd8 <__s2b>:
   25dd8:	defff904 	addi	sp,sp,-28
   25ddc:	dd000415 	stw	r20,16(sp)
   25de0:	dc400115 	stw	r17,4(sp)
   25de4:	2829883a 	mov	r20,r5
   25de8:	2023883a 	mov	r17,r4
   25dec:	01400244 	movi	r5,9
   25df0:	39000204 	addi	r4,r7,8
   25df4:	dcc00315 	stw	r19,12(sp)
   25df8:	dc800215 	stw	r18,8(sp)
   25dfc:	dfc00615 	stw	ra,24(sp)
   25e00:	dd400515 	stw	r21,20(sp)
   25e04:	dc000015 	stw	r16,0(sp)
   25e08:	3825883a 	mov	r18,r7
   25e0c:	3027883a 	mov	r19,r6
   25e10:	00293780 	call	29378 <__divsi3>
   25e14:	00c00044 	movi	r3,1
   25e18:	000b883a 	mov	r5,zero
   25e1c:	1880030e 	bge	r3,r2,25e2c <__s2b+0x54>
   25e20:	18c7883a 	add	r3,r3,r3
   25e24:	29400044 	addi	r5,r5,1
   25e28:	18bffd16 	blt	r3,r2,25e20 <__s2b+0x48>
   25e2c:	8809883a 	mov	r4,r17
   25e30:	0025bc40 	call	25bc4 <_Balloc>
   25e34:	d8c00717 	ldw	r3,28(sp)
   25e38:	10c00515 	stw	r3,20(r2)
   25e3c:	00c00044 	movi	r3,1
   25e40:	10c00415 	stw	r3,16(r2)
   25e44:	00c00244 	movi	r3,9
   25e48:	1cc0210e 	bge	r3,r19,25ed0 <__s2b+0xf8>
   25e4c:	a0eb883a 	add	r21,r20,r3
   25e50:	a821883a 	mov	r16,r21
   25e54:	a4e9883a 	add	r20,r20,r19
   25e58:	81c00007 	ldb	r7,0(r16)
   25e5c:	8809883a 	mov	r4,r17
   25e60:	84000044 	addi	r16,r16,1
   25e64:	100b883a 	mov	r5,r2
   25e68:	01800284 	movi	r6,10
   25e6c:	39fff404 	addi	r7,r7,-48
   25e70:	0025c940 	call	25c94 <__multadd>
   25e74:	853ff81e 	bne	r16,r20,25e58 <__s2b+0x80>
   25e78:	ace1883a 	add	r16,r21,r19
   25e7c:	843ffe04 	addi	r16,r16,-8
   25e80:	9c800a0e 	bge	r19,r18,25eac <__s2b+0xd4>
   25e84:	94e5c83a 	sub	r18,r18,r19
   25e88:	84a5883a 	add	r18,r16,r18
   25e8c:	81c00007 	ldb	r7,0(r16)
   25e90:	8809883a 	mov	r4,r17
   25e94:	84000044 	addi	r16,r16,1
   25e98:	100b883a 	mov	r5,r2
   25e9c:	01800284 	movi	r6,10
   25ea0:	39fff404 	addi	r7,r7,-48
   25ea4:	0025c940 	call	25c94 <__multadd>
   25ea8:	84bff81e 	bne	r16,r18,25e8c <__s2b+0xb4>
   25eac:	dfc00617 	ldw	ra,24(sp)
   25eb0:	dd400517 	ldw	r21,20(sp)
   25eb4:	dd000417 	ldw	r20,16(sp)
   25eb8:	dcc00317 	ldw	r19,12(sp)
   25ebc:	dc800217 	ldw	r18,8(sp)
   25ec0:	dc400117 	ldw	r17,4(sp)
   25ec4:	dc000017 	ldw	r16,0(sp)
   25ec8:	dec00704 	addi	sp,sp,28
   25ecc:	f800283a 	ret
   25ed0:	a4000284 	addi	r16,r20,10
   25ed4:	1827883a 	mov	r19,r3
   25ed8:	003fe906 	br	25e80 <__s2b+0xa8>

00025edc <__hi0bits>:
   25edc:	20bfffec 	andhi	r2,r4,65535
   25ee0:	1000141e 	bne	r2,zero,25f34 <__hi0bits+0x58>
   25ee4:	2008943a 	slli	r4,r4,16
   25ee8:	00800404 	movi	r2,16
   25eec:	20ffc02c 	andhi	r3,r4,65280
   25ef0:	1800021e 	bne	r3,zero,25efc <__hi0bits+0x20>
   25ef4:	2008923a 	slli	r4,r4,8
   25ef8:	10800204 	addi	r2,r2,8
   25efc:	20fc002c 	andhi	r3,r4,61440
   25f00:	1800021e 	bne	r3,zero,25f0c <__hi0bits+0x30>
   25f04:	2008913a 	slli	r4,r4,4
   25f08:	10800104 	addi	r2,r2,4
   25f0c:	20f0002c 	andhi	r3,r4,49152
   25f10:	1800031e 	bne	r3,zero,25f20 <__hi0bits+0x44>
   25f14:	2109883a 	add	r4,r4,r4
   25f18:	10800084 	addi	r2,r2,2
   25f1c:	2109883a 	add	r4,r4,r4
   25f20:	20000316 	blt	r4,zero,25f30 <__hi0bits+0x54>
   25f24:	2110002c 	andhi	r4,r4,16384
   25f28:	2000041e 	bne	r4,zero,25f3c <__hi0bits+0x60>
   25f2c:	00800804 	movi	r2,32
   25f30:	f800283a 	ret
   25f34:	0005883a 	mov	r2,zero
   25f38:	003fec06 	br	25eec <__hi0bits+0x10>
   25f3c:	10800044 	addi	r2,r2,1
   25f40:	f800283a 	ret

00025f44 <__lo0bits>:
   25f44:	20c00017 	ldw	r3,0(r4)
   25f48:	188001cc 	andi	r2,r3,7
   25f4c:	10000826 	beq	r2,zero,25f70 <__lo0bits+0x2c>
   25f50:	1880004c 	andi	r2,r3,1
   25f54:	1000211e 	bne	r2,zero,25fdc <__lo0bits+0x98>
   25f58:	1880008c 	andi	r2,r3,2
   25f5c:	1000211e 	bne	r2,zero,25fe4 <__lo0bits+0xa0>
   25f60:	1806d0ba 	srli	r3,r3,2
   25f64:	00800084 	movi	r2,2
   25f68:	20c00015 	stw	r3,0(r4)
   25f6c:	f800283a 	ret
   25f70:	18bfffcc 	andi	r2,r3,65535
   25f74:	10001326 	beq	r2,zero,25fc4 <__lo0bits+0x80>
   25f78:	0005883a 	mov	r2,zero
   25f7c:	19403fcc 	andi	r5,r3,255
   25f80:	2800021e 	bne	r5,zero,25f8c <__lo0bits+0x48>
   25f84:	1806d23a 	srli	r3,r3,8
   25f88:	10800204 	addi	r2,r2,8
   25f8c:	194003cc 	andi	r5,r3,15
   25f90:	2800021e 	bne	r5,zero,25f9c <__lo0bits+0x58>
   25f94:	1806d13a 	srli	r3,r3,4
   25f98:	10800104 	addi	r2,r2,4
   25f9c:	194000cc 	andi	r5,r3,3
   25fa0:	2800021e 	bne	r5,zero,25fac <__lo0bits+0x68>
   25fa4:	1806d0ba 	srli	r3,r3,2
   25fa8:	10800084 	addi	r2,r2,2
   25fac:	1940004c 	andi	r5,r3,1
   25fb0:	2800081e 	bne	r5,zero,25fd4 <__lo0bits+0x90>
   25fb4:	1806d07a 	srli	r3,r3,1
   25fb8:	1800051e 	bne	r3,zero,25fd0 <__lo0bits+0x8c>
   25fbc:	00800804 	movi	r2,32
   25fc0:	f800283a 	ret
   25fc4:	1806d43a 	srli	r3,r3,16
   25fc8:	00800404 	movi	r2,16
   25fcc:	003feb06 	br	25f7c <__lo0bits+0x38>
   25fd0:	10800044 	addi	r2,r2,1
   25fd4:	20c00015 	stw	r3,0(r4)
   25fd8:	f800283a 	ret
   25fdc:	0005883a 	mov	r2,zero
   25fe0:	f800283a 	ret
   25fe4:	1806d07a 	srli	r3,r3,1
   25fe8:	00800044 	movi	r2,1
   25fec:	20c00015 	stw	r3,0(r4)
   25ff0:	f800283a 	ret

00025ff4 <__i2b>:
   25ff4:	defffd04 	addi	sp,sp,-12
   25ff8:	dc000015 	stw	r16,0(sp)
   25ffc:	04000044 	movi	r16,1
   26000:	dc400115 	stw	r17,4(sp)
   26004:	2823883a 	mov	r17,r5
   26008:	800b883a 	mov	r5,r16
   2600c:	dfc00215 	stw	ra,8(sp)
   26010:	0025bc40 	call	25bc4 <_Balloc>
   26014:	14400515 	stw	r17,20(r2)
   26018:	14000415 	stw	r16,16(r2)
   2601c:	dfc00217 	ldw	ra,8(sp)
   26020:	dc400117 	ldw	r17,4(sp)
   26024:	dc000017 	ldw	r16,0(sp)
   26028:	dec00304 	addi	sp,sp,12
   2602c:	f800283a 	ret

00026030 <__multiply>:
   26030:	defff004 	addi	sp,sp,-64
   26034:	dc800815 	stw	r18,32(sp)
   26038:	dc400715 	stw	r17,28(sp)
   2603c:	34800417 	ldw	r18,16(r6)
   26040:	2c400417 	ldw	r17,16(r5)
   26044:	ddc00d15 	stw	r23,52(sp)
   26048:	dc000615 	stw	r16,24(sp)
   2604c:	dfc00f15 	stw	ra,60(sp)
   26050:	df000e15 	stw	fp,56(sp)
   26054:	dd800c15 	stw	r22,48(sp)
   26058:	dd400b15 	stw	r21,44(sp)
   2605c:	dd000a15 	stw	r20,40(sp)
   26060:	dcc00915 	stw	r19,36(sp)
   26064:	2821883a 	mov	r16,r5
   26068:	302f883a 	mov	r23,r6
   2606c:	8c80050e 	bge	r17,r18,26084 <__multiply+0x54>
   26070:	8807883a 	mov	r3,r17
   26074:	3021883a 	mov	r16,r6
   26078:	9023883a 	mov	r17,r18
   2607c:	282f883a 	mov	r23,r5
   26080:	1825883a 	mov	r18,r3
   26084:	80800217 	ldw	r2,8(r16)
   26088:	8c87883a 	add	r3,r17,r18
   2608c:	d8c00115 	stw	r3,4(sp)
   26090:	81400117 	ldw	r5,4(r16)
   26094:	10c0010e 	bge	r2,r3,2609c <__multiply+0x6c>
   26098:	29400044 	addi	r5,r5,1
   2609c:	0025bc40 	call	25bc4 <_Balloc>
   260a0:	d8c00117 	ldw	r3,4(sp)
   260a4:	d8800515 	stw	r2,20(sp)
   260a8:	14c00504 	addi	r19,r2,20
   260ac:	1d400144 	addi	r21,r3,5
   260b0:	ad6b883a 	add	r21,r21,r21
   260b4:	ad6b883a 	add	r21,r21,r21
   260b8:	156b883a 	add	r21,r2,r21
   260bc:	dd400215 	stw	r21,8(sp)
   260c0:	9805883a 	mov	r2,r19
   260c4:	9d40042e 	bgeu	r19,r21,260d8 <__multiply+0xa8>
   260c8:	d8c00217 	ldw	r3,8(sp)
   260cc:	10000015 	stw	zero,0(r2)
   260d0:	10800104 	addi	r2,r2,4
   260d4:	10fffc36 	bltu	r2,r3,260c8 <__multiply+0x98>
   260d8:	94800144 	addi	r18,r18,5
   260dc:	94a5883a 	add	r18,r18,r18
   260e0:	94ad883a 	add	r22,r18,r18
   260e4:	8c400144 	addi	r17,r17,5
   260e8:	8c63883a 	add	r17,r17,r17
   260ec:	bdad883a 	add	r22,r23,r22
   260f0:	80c00504 	addi	r3,r16,20
   260f4:	8c63883a 	add	r17,r17,r17
   260f8:	bc800504 	addi	r18,r23,20
   260fc:	dd800315 	stw	r22,12(sp)
   26100:	d8c00415 	stw	r3,16(sp)
   26104:	dcc00015 	stw	r19,0(sp)
   26108:	8463883a 	add	r17,r16,r17
   2610c:	9580412e 	bgeu	r18,r22,26214 <__multiply+0x1e4>
   26110:	90800017 	ldw	r2,0(r18)
   26114:	173fffcc 	andi	fp,r2,65535
   26118:	e0001a26 	beq	fp,zero,26184 <__multiply+0x154>
   2611c:	dd000017 	ldw	r20,0(sp)
   26120:	dd800417 	ldw	r22,16(sp)
   26124:	002b883a 	mov	r21,zero
   26128:	b4c00017 	ldw	r19,0(r22)
   2612c:	a4000017 	ldw	r16,0(r20)
   26130:	e00b883a 	mov	r5,fp
   26134:	993fffcc 	andi	r4,r19,65535
   26138:	00294340 	call	29434 <__mulsi3>
   2613c:	9808d43a 	srli	r4,r19,16
   26140:	817fffcc 	andi	r5,r16,65535
   26144:	1145883a 	add	r2,r2,r5
   26148:	e00b883a 	mov	r5,fp
   2614c:	1567883a 	add	r19,r2,r21
   26150:	8020d43a 	srli	r16,r16,16
   26154:	00294340 	call	29434 <__mulsi3>
   26158:	9808d43a 	srli	r4,r19,16
   2615c:	1405883a 	add	r2,r2,r16
   26160:	a4c0000d 	sth	r19,0(r20)
   26164:	110f883a 	add	r7,r2,r4
   26168:	a1c0008d 	sth	r7,2(r20)
   2616c:	b5800104 	addi	r22,r22,4
   26170:	382ad43a 	srli	r21,r7,16
   26174:	a5000104 	addi	r20,r20,4
   26178:	b47feb36 	bltu	r22,r17,26128 <__multiply+0xf8>
   2617c:	a5400015 	stw	r21,0(r20)
   26180:	90800017 	ldw	r2,0(r18)
   26184:	1038d43a 	srli	fp,r2,16
   26188:	e0001c26 	beq	fp,zero,261fc <__multiply+0x1cc>
   2618c:	d8c00017 	ldw	r3,0(sp)
   26190:	dd000417 	ldw	r20,16(sp)
   26194:	002b883a 	mov	r21,zero
   26198:	1d800017 	ldw	r22,0(r3)
   2619c:	182f883a 	mov	r23,r3
   261a0:	b021883a 	mov	r16,r22
   261a4:	a4c00017 	ldw	r19,0(r20)
   261a8:	8020d43a 	srli	r16,r16,16
   261ac:	e00b883a 	mov	r5,fp
   261b0:	993fffcc 	andi	r4,r19,65535
   261b4:	00294340 	call	29434 <__mulsi3>
   261b8:	1405883a 	add	r2,r2,r16
   261bc:	9808d43a 	srli	r4,r19,16
   261c0:	156b883a 	add	r21,r2,r21
   261c4:	bdc00104 	addi	r23,r23,4
   261c8:	bdbfff0d 	sth	r22,-4(r23)
   261cc:	bd7fff8d 	sth	r21,-2(r23)
   261d0:	bc000017 	ldw	r16,0(r23)
   261d4:	e00b883a 	mov	r5,fp
   261d8:	00294340 	call	29434 <__mulsi3>
   261dc:	a80ed43a 	srli	r7,r21,16
   261e0:	813fffcc 	andi	r4,r16,65535
   261e4:	2085883a 	add	r2,r4,r2
   261e8:	11ed883a 	add	r22,r2,r7
   261ec:	a5000104 	addi	r20,r20,4
   261f0:	b02ad43a 	srli	r21,r22,16
   261f4:	a47feb36 	bltu	r20,r17,261a4 <__multiply+0x174>
   261f8:	bd800015 	stw	r22,0(r23)
   261fc:	d8c00017 	ldw	r3,0(sp)
   26200:	94800104 	addi	r18,r18,4
   26204:	18c00104 	addi	r3,r3,4
   26208:	d8c00015 	stw	r3,0(sp)
   2620c:	d8c00317 	ldw	r3,12(sp)
   26210:	90ffbf36 	bltu	r18,r3,26110 <__multiply+0xe0>
   26214:	d8c00117 	ldw	r3,4(sp)
   26218:	00c00c0e 	bge	zero,r3,2624c <__multiply+0x21c>
   2621c:	d8c00217 	ldw	r3,8(sp)
   26220:	18bfff17 	ldw	r2,-4(r3)
   26224:	1d7fff04 	addi	r21,r3,-4
   26228:	10000326 	beq	r2,zero,26238 <__multiply+0x208>
   2622c:	00000706 	br	2624c <__multiply+0x21c>
   26230:	a8800017 	ldw	r2,0(r21)
   26234:	1000051e 	bne	r2,zero,2624c <__multiply+0x21c>
   26238:	d8c00117 	ldw	r3,4(sp)
   2623c:	ad7fff04 	addi	r21,r21,-4
   26240:	18ffffc4 	addi	r3,r3,-1
   26244:	d8c00115 	stw	r3,4(sp)
   26248:	183ff91e 	bne	r3,zero,26230 <__multiply+0x200>
   2624c:	d8800517 	ldw	r2,20(sp)
   26250:	d8c00117 	ldw	r3,4(sp)
   26254:	10c00415 	stw	r3,16(r2)
   26258:	dfc00f17 	ldw	ra,60(sp)
   2625c:	df000e17 	ldw	fp,56(sp)
   26260:	ddc00d17 	ldw	r23,52(sp)
   26264:	dd800c17 	ldw	r22,48(sp)
   26268:	dd400b17 	ldw	r21,44(sp)
   2626c:	dd000a17 	ldw	r20,40(sp)
   26270:	dcc00917 	ldw	r19,36(sp)
   26274:	dc800817 	ldw	r18,32(sp)
   26278:	dc400717 	ldw	r17,28(sp)
   2627c:	dc000617 	ldw	r16,24(sp)
   26280:	dec01004 	addi	sp,sp,64
   26284:	f800283a 	ret

00026288 <__pow5mult>:
   26288:	defffb04 	addi	sp,sp,-20
   2628c:	dcc00315 	stw	r19,12(sp)
   26290:	dc800215 	stw	r18,8(sp)
   26294:	dc000015 	stw	r16,0(sp)
   26298:	dfc00415 	stw	ra,16(sp)
   2629c:	dc400115 	stw	r17,4(sp)
   262a0:	308000cc 	andi	r2,r6,3
   262a4:	3021883a 	mov	r16,r6
   262a8:	2027883a 	mov	r19,r4
   262ac:	2825883a 	mov	r18,r5
   262b0:	10002e1e 	bne	r2,zero,2636c <__pow5mult+0xe4>
   262b4:	8021d0ba 	srai	r16,r16,2
   262b8:	80001a26 	beq	r16,zero,26324 <__pow5mult+0x9c>
   262bc:	9c401217 	ldw	r17,72(r19)
   262c0:	8800061e 	bne	r17,zero,262dc <__pow5mult+0x54>
   262c4:	00003406 	br	26398 <__pow5mult+0x110>
   262c8:	8021d07a 	srai	r16,r16,1
   262cc:	80001526 	beq	r16,zero,26324 <__pow5mult+0x9c>
   262d0:	88c00017 	ldw	r3,0(r17)
   262d4:	18001b26 	beq	r3,zero,26344 <__pow5mult+0xbc>
   262d8:	1823883a 	mov	r17,r3
   262dc:	80c0004c 	andi	r3,r16,1
   262e0:	183ff926 	beq	r3,zero,262c8 <__pow5mult+0x40>
   262e4:	900b883a 	mov	r5,r18
   262e8:	880d883a 	mov	r6,r17
   262ec:	9809883a 	mov	r4,r19
   262f0:	00260300 	call	26030 <__multiply>
   262f4:	90001b26 	beq	r18,zero,26364 <__pow5mult+0xdc>
   262f8:	91000117 	ldw	r4,4(r18)
   262fc:	98c01317 	ldw	r3,76(r19)
   26300:	8021d07a 	srai	r16,r16,1
   26304:	2109883a 	add	r4,r4,r4
   26308:	2109883a 	add	r4,r4,r4
   2630c:	1907883a 	add	r3,r3,r4
   26310:	19000017 	ldw	r4,0(r3)
   26314:	91000015 	stw	r4,0(r18)
   26318:	1c800015 	stw	r18,0(r3)
   2631c:	1025883a 	mov	r18,r2
   26320:	803feb1e 	bne	r16,zero,262d0 <__pow5mult+0x48>
   26324:	9005883a 	mov	r2,r18
   26328:	dfc00417 	ldw	ra,16(sp)
   2632c:	dcc00317 	ldw	r19,12(sp)
   26330:	dc800217 	ldw	r18,8(sp)
   26334:	dc400117 	ldw	r17,4(sp)
   26338:	dc000017 	ldw	r16,0(sp)
   2633c:	dec00504 	addi	sp,sp,20
   26340:	f800283a 	ret
   26344:	880b883a 	mov	r5,r17
   26348:	880d883a 	mov	r6,r17
   2634c:	9809883a 	mov	r4,r19
   26350:	00260300 	call	26030 <__multiply>
   26354:	88800015 	stw	r2,0(r17)
   26358:	10000015 	stw	zero,0(r2)
   2635c:	1023883a 	mov	r17,r2
   26360:	003fde06 	br	262dc <__pow5mult+0x54>
   26364:	1025883a 	mov	r18,r2
   26368:	003fd706 	br	262c8 <__pow5mult+0x40>
   2636c:	10bfffc4 	addi	r2,r2,-1
   26370:	1085883a 	add	r2,r2,r2
   26374:	00c000f4 	movhi	r3,3
   26378:	18f25c04 	addi	r3,r3,-13968
   2637c:	1085883a 	add	r2,r2,r2
   26380:	1885883a 	add	r2,r3,r2
   26384:	11800017 	ldw	r6,0(r2)
   26388:	000f883a 	mov	r7,zero
   2638c:	0025c940 	call	25c94 <__multadd>
   26390:	1025883a 	mov	r18,r2
   26394:	003fc706 	br	262b4 <__pow5mult+0x2c>
   26398:	9809883a 	mov	r4,r19
   2639c:	01409c44 	movi	r5,625
   263a0:	0025ff40 	call	25ff4 <__i2b>
   263a4:	98801215 	stw	r2,72(r19)
   263a8:	1023883a 	mov	r17,r2
   263ac:	10000015 	stw	zero,0(r2)
   263b0:	003fca06 	br	262dc <__pow5mult+0x54>

000263b4 <__lshift>:
   263b4:	defff904 	addi	sp,sp,-28
   263b8:	dd400515 	stw	r21,20(sp)
   263bc:	dc400115 	stw	r17,4(sp)
   263c0:	2d400417 	ldw	r21,16(r5)
   263c4:	3023d17a 	srai	r17,r6,5
   263c8:	28800217 	ldw	r2,8(r5)
   263cc:	dd000415 	stw	r20,16(sp)
   263d0:	8d6b883a 	add	r21,r17,r21
   263d4:	dcc00315 	stw	r19,12(sp)
   263d8:	dc800215 	stw	r18,8(sp)
   263dc:	dc000015 	stw	r16,0(sp)
   263e0:	dfc00615 	stw	ra,24(sp)
   263e4:	ac000044 	addi	r16,r21,1
   263e8:	2825883a 	mov	r18,r5
   263ec:	3029883a 	mov	r20,r6
   263f0:	2027883a 	mov	r19,r4
   263f4:	29400117 	ldw	r5,4(r5)
   263f8:	1400030e 	bge	r2,r16,26408 <__lshift+0x54>
   263fc:	1085883a 	add	r2,r2,r2
   26400:	29400044 	addi	r5,r5,1
   26404:	143ffd16 	blt	r2,r16,263fc <__lshift+0x48>
   26408:	9809883a 	mov	r4,r19
   2640c:	0025bc40 	call	25bc4 <_Balloc>
   26410:	10c00504 	addi	r3,r2,20
   26414:	0440090e 	bge	zero,r17,2643c <__lshift+0x88>
   26418:	000f883a 	mov	r7,zero
   2641c:	18000015 	stw	zero,0(r3)
   26420:	39c00044 	addi	r7,r7,1
   26424:	18c00104 	addi	r3,r3,4
   26428:	3c7ffc1e 	bne	r7,r17,2641c <__lshift+0x68>
   2642c:	38c00144 	addi	r3,r7,5
   26430:	18c7883a 	add	r3,r3,r3
   26434:	18c7883a 	add	r3,r3,r3
   26438:	10c7883a 	add	r3,r2,r3
   2643c:	92000417 	ldw	r8,16(r18)
   26440:	a18007cc 	andi	r6,r20,31
   26444:	91c00504 	addi	r7,r18,20
   26448:	42000144 	addi	r8,r8,5
   2644c:	4211883a 	add	r8,r8,r8
   26450:	4211883a 	add	r8,r8,r8
   26454:	9211883a 	add	r8,r18,r8
   26458:	30002226 	beq	r6,zero,264e4 <__lshift+0x130>
   2645c:	02800804 	movi	r10,32
   26460:	5195c83a 	sub	r10,r10,r6
   26464:	000b883a 	mov	r5,zero
   26468:	3a400017 	ldw	r9,0(r7)
   2646c:	18c00104 	addi	r3,r3,4
   26470:	39c00104 	addi	r7,r7,4
   26474:	4992983a 	sll	r9,r9,r6
   26478:	2a4ab03a 	or	r5,r5,r9
   2647c:	197fff15 	stw	r5,-4(r3)
   26480:	397fff17 	ldw	r5,-4(r7)
   26484:	2a8ad83a 	srl	r5,r5,r10
   26488:	3a3ff736 	bltu	r7,r8,26468 <__lshift+0xb4>
   2648c:	19400015 	stw	r5,0(r3)
   26490:	28000126 	beq	r5,zero,26498 <__lshift+0xe4>
   26494:	ac000084 	addi	r16,r21,2
   26498:	91000117 	ldw	r4,4(r18)
   2649c:	98c01317 	ldw	r3,76(r19)
   264a0:	843fffc4 	addi	r16,r16,-1
   264a4:	2109883a 	add	r4,r4,r4
   264a8:	2109883a 	add	r4,r4,r4
   264ac:	1907883a 	add	r3,r3,r4
   264b0:	19000017 	ldw	r4,0(r3)
   264b4:	14000415 	stw	r16,16(r2)
   264b8:	91000015 	stw	r4,0(r18)
   264bc:	1c800015 	stw	r18,0(r3)
   264c0:	dfc00617 	ldw	ra,24(sp)
   264c4:	dd400517 	ldw	r21,20(sp)
   264c8:	dd000417 	ldw	r20,16(sp)
   264cc:	dcc00317 	ldw	r19,12(sp)
   264d0:	dc800217 	ldw	r18,8(sp)
   264d4:	dc400117 	ldw	r17,4(sp)
   264d8:	dc000017 	ldw	r16,0(sp)
   264dc:	dec00704 	addi	sp,sp,28
   264e0:	f800283a 	ret
   264e4:	39400017 	ldw	r5,0(r7)
   264e8:	18c00104 	addi	r3,r3,4
   264ec:	39c00104 	addi	r7,r7,4
   264f0:	197fff15 	stw	r5,-4(r3)
   264f4:	3a3fe82e 	bgeu	r7,r8,26498 <__lshift+0xe4>
   264f8:	39400017 	ldw	r5,0(r7)
   264fc:	18c00104 	addi	r3,r3,4
   26500:	39c00104 	addi	r7,r7,4
   26504:	197fff15 	stw	r5,-4(r3)
   26508:	3a3ff636 	bltu	r7,r8,264e4 <__lshift+0x130>
   2650c:	003fe206 	br	26498 <__lshift+0xe4>

00026510 <__mcmp>:
   26510:	20800417 	ldw	r2,16(r4)
   26514:	28c00417 	ldw	r3,16(r5)
   26518:	10c5c83a 	sub	r2,r2,r3
   2651c:	10000f1e 	bne	r2,zero,2655c <__mcmp+0x4c>
   26520:	18c00144 	addi	r3,r3,5
   26524:	18c7883a 	add	r3,r3,r3
   26528:	18c7883a 	add	r3,r3,r3
   2652c:	21c00504 	addi	r7,r4,20
   26530:	28cb883a 	add	r5,r5,r3
   26534:	20c9883a 	add	r4,r4,r3
   26538:	213fff04 	addi	r4,r4,-4
   2653c:	297fff04 	addi	r5,r5,-4
   26540:	21800017 	ldw	r6,0(r4)
   26544:	28c00017 	ldw	r3,0(r5)
   26548:	30c0021e 	bne	r6,r3,26554 <__mcmp+0x44>
   2654c:	393ffa36 	bltu	r7,r4,26538 <__mcmp+0x28>
   26550:	f800283a 	ret
   26554:	30c00236 	bltu	r6,r3,26560 <__mcmp+0x50>
   26558:	00800044 	movi	r2,1
   2655c:	f800283a 	ret
   26560:	00bfffc4 	movi	r2,-1
   26564:	f800283a 	ret

00026568 <__mdiff>:
   26568:	defffb04 	addi	sp,sp,-20
   2656c:	dc000015 	stw	r16,0(sp)
   26570:	2821883a 	mov	r16,r5
   26574:	dc800215 	stw	r18,8(sp)
   26578:	300b883a 	mov	r5,r6
   2657c:	2025883a 	mov	r18,r4
   26580:	8009883a 	mov	r4,r16
   26584:	dc400115 	stw	r17,4(sp)
   26588:	dfc00415 	stw	ra,16(sp)
   2658c:	dcc00315 	stw	r19,12(sp)
   26590:	3023883a 	mov	r17,r6
   26594:	00265100 	call	26510 <__mcmp>
   26598:	10005026 	beq	r2,zero,266dc <__mdiff+0x174>
   2659c:	10004a16 	blt	r2,zero,266c8 <__mdiff+0x160>
   265a0:	0027883a 	mov	r19,zero
   265a4:	81400117 	ldw	r5,4(r16)
   265a8:	9009883a 	mov	r4,r18
   265ac:	0025bc40 	call	25bc4 <_Balloc>
   265b0:	82400417 	ldw	r9,16(r16)
   265b4:	89800417 	ldw	r6,16(r17)
   265b8:	14c00315 	stw	r19,12(r2)
   265bc:	4b800144 	addi	r14,r9,5
   265c0:	31800144 	addi	r6,r6,5
   265c4:	739d883a 	add	r14,r14,r14
   265c8:	318d883a 	add	r6,r6,r6
   265cc:	739d883a 	add	r14,r14,r14
   265d0:	318d883a 	add	r6,r6,r6
   265d4:	81c00504 	addi	r7,r16,20
   265d8:	839d883a 	add	r14,r16,r14
   265dc:	8a000504 	addi	r8,r17,20
   265e0:	898d883a 	add	r6,r17,r6
   265e4:	10c00504 	addi	r3,r2,20
   265e8:	0009883a 	mov	r4,zero
   265ec:	3b000017 	ldw	r12,0(r7)
   265f0:	42c00017 	ldw	r11,0(r8)
   265f4:	42000104 	addi	r8,r8,4
   265f8:	62bfffcc 	andi	r10,r12,65535
   265fc:	5b7fffcc 	andi	r13,r11,65535
   26600:	5109883a 	add	r4,r10,r4
   26604:	2355c83a 	sub	r10,r4,r13
   26608:	5816d43a 	srli	r11,r11,16
   2660c:	6008d43a 	srli	r4,r12,16
   26610:	501bd43a 	srai	r13,r10,16
   26614:	1a80000d 	sth	r10,0(r3)
   26618:	22c9c83a 	sub	r4,r4,r11
   2661c:	2349883a 	add	r4,r4,r13
   26620:	1900008d 	sth	r4,2(r3)
   26624:	39c00104 	addi	r7,r7,4
   26628:	2009d43a 	srai	r4,r4,16
   2662c:	18c00104 	addi	r3,r3,4
   26630:	41bfee36 	bltu	r8,r6,265ec <__mdiff+0x84>
   26634:	180b883a 	mov	r5,r3
   26638:	3815883a 	mov	r10,r7
   2663c:	3b80132e 	bgeu	r7,r14,2668c <__mdiff+0x124>
   26640:	3a000017 	ldw	r8,0(r7)
   26644:	18c00104 	addi	r3,r3,4
   26648:	39c00104 	addi	r7,r7,4
   2664c:	41bfffcc 	andi	r6,r8,65535
   26650:	310d883a 	add	r6,r6,r4
   26654:	3009d43a 	srai	r4,r6,16
   26658:	4010d43a 	srli	r8,r8,16
   2665c:	19bfff0d 	sth	r6,-4(r3)
   26660:	2209883a 	add	r4,r4,r8
   26664:	193fff8d 	sth	r4,-2(r3)
   26668:	2009d43a 	srai	r4,r4,16
   2666c:	3bbff436 	bltu	r7,r14,26640 <__mdiff+0xd8>
   26670:	0286303a 	nor	r3,zero,r10
   26674:	1b87883a 	add	r3,r3,r14
   26678:	1806d0ba 	srli	r3,r3,2
   2667c:	18c00044 	addi	r3,r3,1
   26680:	18c7883a 	add	r3,r3,r3
   26684:	18c7883a 	add	r3,r3,r3
   26688:	28c7883a 	add	r3,r5,r3
   2668c:	193fff17 	ldw	r4,-4(r3)
   26690:	18ffff04 	addi	r3,r3,-4
   26694:	2000041e 	bne	r4,zero,266a8 <__mdiff+0x140>
   26698:	18ffff04 	addi	r3,r3,-4
   2669c:	19000017 	ldw	r4,0(r3)
   266a0:	4a7fffc4 	addi	r9,r9,-1
   266a4:	203ffc26 	beq	r4,zero,26698 <__mdiff+0x130>
   266a8:	12400415 	stw	r9,16(r2)
   266ac:	dfc00417 	ldw	ra,16(sp)
   266b0:	dcc00317 	ldw	r19,12(sp)
   266b4:	dc800217 	ldw	r18,8(sp)
   266b8:	dc400117 	ldw	r17,4(sp)
   266bc:	dc000017 	ldw	r16,0(sp)
   266c0:	dec00504 	addi	sp,sp,20
   266c4:	f800283a 	ret
   266c8:	8005883a 	mov	r2,r16
   266cc:	04c00044 	movi	r19,1
   266d0:	8821883a 	mov	r16,r17
   266d4:	1023883a 	mov	r17,r2
   266d8:	003fb206 	br	265a4 <__mdiff+0x3c>
   266dc:	9009883a 	mov	r4,r18
   266e0:	000b883a 	mov	r5,zero
   266e4:	0025bc40 	call	25bc4 <_Balloc>
   266e8:	00c00044 	movi	r3,1
   266ec:	10c00415 	stw	r3,16(r2)
   266f0:	10000515 	stw	zero,20(r2)
   266f4:	dfc00417 	ldw	ra,16(sp)
   266f8:	dcc00317 	ldw	r19,12(sp)
   266fc:	dc800217 	ldw	r18,8(sp)
   26700:	dc400117 	ldw	r17,4(sp)
   26704:	dc000017 	ldw	r16,0(sp)
   26708:	dec00504 	addi	sp,sp,20
   2670c:	f800283a 	ret

00026710 <__ulp>:
   26710:	295ffc2c 	andhi	r5,r5,32752
   26714:	00bf3034 	movhi	r2,64704
   26718:	2887883a 	add	r3,r5,r2
   2671c:	00c0020e 	bge	zero,r3,26728 <__ulp+0x18>
   26720:	0005883a 	mov	r2,zero
   26724:	f800283a 	ret
   26728:	00c7c83a 	sub	r3,zero,r3
   2672c:	1805d53a 	srai	r2,r3,20
   26730:	00c004c4 	movi	r3,19
   26734:	18800a0e 	bge	r3,r2,26760 <__ulp+0x50>
   26738:	01000c84 	movi	r4,50
   2673c:	0007883a 	mov	r3,zero
   26740:	20800516 	blt	r4,r2,26758 <__ulp+0x48>
   26744:	01000cc4 	movi	r4,51
   26748:	2085c83a 	sub	r2,r4,r2
   2674c:	01000044 	movi	r4,1
   26750:	2084983a 	sll	r2,r4,r2
   26754:	f800283a 	ret
   26758:	00800044 	movi	r2,1
   2675c:	f800283a 	ret
   26760:	00c00234 	movhi	r3,8
   26764:	1887d83a 	sra	r3,r3,r2
   26768:	0005883a 	mov	r2,zero
   2676c:	f800283a 	ret

00026770 <__b2d>:
   26770:	defffa04 	addi	sp,sp,-24
   26774:	dc000015 	stw	r16,0(sp)
   26778:	24000417 	ldw	r16,16(r4)
   2677c:	dc400115 	stw	r17,4(sp)
   26780:	dcc00315 	stw	r19,12(sp)
   26784:	84000144 	addi	r16,r16,5
   26788:	8421883a 	add	r16,r16,r16
   2678c:	8421883a 	add	r16,r16,r16
   26790:	2421883a 	add	r16,r4,r16
   26794:	847fff17 	ldw	r17,-4(r16)
   26798:	24c00504 	addi	r19,r4,20
   2679c:	dd000415 	stw	r20,16(sp)
   267a0:	8809883a 	mov	r4,r17
   267a4:	dc800215 	stw	r18,8(sp)
   267a8:	2829883a 	mov	r20,r5
   267ac:	dfc00515 	stw	ra,20(sp)
   267b0:	0025edc0 	call	25edc <__hi0bits>
   267b4:	00c00804 	movi	r3,32
   267b8:	1887c83a 	sub	r3,r3,r2
   267bc:	a0c00015 	stw	r3,0(r20)
   267c0:	00c00284 	movi	r3,10
   267c4:	84bfff04 	addi	r18,r16,-4
   267c8:	18801216 	blt	r3,r2,26814 <__b2d+0xa4>
   267cc:	010002c4 	movi	r4,11
   267d0:	2089c83a 	sub	r4,r4,r2
   267d4:	8906d83a 	srl	r3,r17,r4
   267d8:	18cffc34 	orhi	r3,r3,16368
   267dc:	9c80322e 	bgeu	r19,r18,268a8 <__b2d+0x138>
   267e0:	817ffe17 	ldw	r5,-8(r16)
   267e4:	2908d83a 	srl	r4,r5,r4
   267e8:	10800544 	addi	r2,r2,21
   267ec:	88a2983a 	sll	r17,r17,r2
   267f0:	2444b03a 	or	r2,r4,r17
   267f4:	dfc00517 	ldw	ra,20(sp)
   267f8:	dd000417 	ldw	r20,16(sp)
   267fc:	dcc00317 	ldw	r19,12(sp)
   26800:	dc800217 	ldw	r18,8(sp)
   26804:	dc400117 	ldw	r17,4(sp)
   26808:	dc000017 	ldw	r16,0(sp)
   2680c:	dec00604 	addi	sp,sp,24
   26810:	f800283a 	ret
   26814:	9c801636 	bltu	r19,r18,26870 <__b2d+0x100>
   26818:	113ffd44 	addi	r4,r2,-11
   2681c:	000b883a 	mov	r5,zero
   26820:	20001726 	beq	r4,zero,26880 <__b2d+0x110>
   26824:	00c00ac4 	movi	r3,43
   26828:	1885c83a 	sub	r2,r3,r2
   2682c:	8906983a 	sll	r3,r17,r4
   26830:	288cd83a 	srl	r6,r5,r2
   26834:	18cffc34 	orhi	r3,r3,16368
   26838:	1986b03a 	or	r3,r3,r6
   2683c:	9c801c2e 	bgeu	r19,r18,268b0 <__b2d+0x140>
   26840:	91bfff17 	ldw	r6,-4(r18)
   26844:	3084d83a 	srl	r2,r6,r2
   26848:	2908983a 	sll	r4,r5,r4
   2684c:	1104b03a 	or	r2,r2,r4
   26850:	dfc00517 	ldw	ra,20(sp)
   26854:	dd000417 	ldw	r20,16(sp)
   26858:	dcc00317 	ldw	r19,12(sp)
   2685c:	dc800217 	ldw	r18,8(sp)
   26860:	dc400117 	ldw	r17,4(sp)
   26864:	dc000017 	ldw	r16,0(sp)
   26868:	dec00604 	addi	sp,sp,24
   2686c:	f800283a 	ret
   26870:	113ffd44 	addi	r4,r2,-11
   26874:	84bffe04 	addi	r18,r16,-8
   26878:	817ffe17 	ldw	r5,-8(r16)
   2687c:	203fe91e 	bne	r4,zero,26824 <__b2d+0xb4>
   26880:	88cffc34 	orhi	r3,r17,16368
   26884:	2805883a 	mov	r2,r5
   26888:	dfc00517 	ldw	ra,20(sp)
   2688c:	dd000417 	ldw	r20,16(sp)
   26890:	dcc00317 	ldw	r19,12(sp)
   26894:	dc800217 	ldw	r18,8(sp)
   26898:	dc400117 	ldw	r17,4(sp)
   2689c:	dc000017 	ldw	r16,0(sp)
   268a0:	dec00604 	addi	sp,sp,24
   268a4:	f800283a 	ret
   268a8:	0009883a 	mov	r4,zero
   268ac:	003fce06 	br	267e8 <__b2d+0x78>
   268b0:	0005883a 	mov	r2,zero
   268b4:	003fe406 	br	26848 <__b2d+0xd8>

000268b8 <__d2b>:
   268b8:	defff804 	addi	sp,sp,-32
   268bc:	dc400315 	stw	r17,12(sp)
   268c0:	3023883a 	mov	r17,r6
   268c4:	dc800415 	stw	r18,16(sp)
   268c8:	8824907a 	slli	r18,r17,1
   268cc:	dcc00515 	stw	r19,20(sp)
   268d0:	2827883a 	mov	r19,r5
   268d4:	9024d57a 	srli	r18,r18,21
   268d8:	01400044 	movi	r5,1
   268dc:	dd000615 	stw	r20,24(sp)
   268e0:	dc000215 	stw	r16,8(sp)
   268e4:	dfc00715 	stw	ra,28(sp)
   268e8:	3829883a 	mov	r20,r7
   268ec:	0025bc40 	call	25bc4 <_Balloc>
   268f0:	1021883a 	mov	r16,r2
   268f4:	00800434 	movhi	r2,16
   268f8:	10bfffc4 	addi	r2,r2,-1
   268fc:	88a2703a 	and	r17,r17,r2
   26900:	90000126 	beq	r18,zero,26908 <__d2b+0x50>
   26904:	8c400434 	orhi	r17,r17,16
   26908:	dc400015 	stw	r17,0(sp)
   2690c:	98002226 	beq	r19,zero,26998 <__d2b+0xe0>
   26910:	d9000104 	addi	r4,sp,4
   26914:	dcc00115 	stw	r19,4(sp)
   26918:	0025f440 	call	25f44 <__lo0bits>
   2691c:	d8c00017 	ldw	r3,0(sp)
   26920:	10002d1e 	bne	r2,zero,269d8 <__d2b+0x120>
   26924:	d9000117 	ldw	r4,4(sp)
   26928:	81000515 	stw	r4,20(r16)
   2692c:	1823003a 	cmpeq	r17,r3,zero
   26930:	01000084 	movi	r4,2
   26934:	2463c83a 	sub	r17,r4,r17
   26938:	80c00615 	stw	r3,24(r16)
   2693c:	84400415 	stw	r17,16(r16)
   26940:	90001d1e 	bne	r18,zero,269b8 <__d2b+0x100>
   26944:	88c00104 	addi	r3,r17,4
   26948:	18c7883a 	add	r3,r3,r3
   2694c:	18c7883a 	add	r3,r3,r3
   26950:	80c7883a 	add	r3,r16,r3
   26954:	19000017 	ldw	r4,0(r3)
   26958:	10bef384 	addi	r2,r2,-1074
   2695c:	a0800015 	stw	r2,0(r20)
   26960:	0025edc0 	call	25edc <__hi0bits>
   26964:	8822917a 	slli	r17,r17,5
   26968:	d8c00817 	ldw	r3,32(sp)
   2696c:	8885c83a 	sub	r2,r17,r2
   26970:	18800015 	stw	r2,0(r3)
   26974:	8005883a 	mov	r2,r16
   26978:	dfc00717 	ldw	ra,28(sp)
   2697c:	dd000617 	ldw	r20,24(sp)
   26980:	dcc00517 	ldw	r19,20(sp)
   26984:	dc800417 	ldw	r18,16(sp)
   26988:	dc400317 	ldw	r17,12(sp)
   2698c:	dc000217 	ldw	r16,8(sp)
   26990:	dec00804 	addi	sp,sp,32
   26994:	f800283a 	ret
   26998:	d809883a 	mov	r4,sp
   2699c:	0025f440 	call	25f44 <__lo0bits>
   269a0:	d8c00017 	ldw	r3,0(sp)
   269a4:	04400044 	movi	r17,1
   269a8:	84400415 	stw	r17,16(r16)
   269ac:	80c00515 	stw	r3,20(r16)
   269b0:	10800804 	addi	r2,r2,32
   269b4:	903fe326 	beq	r18,zero,26944 <__d2b+0x8c>
   269b8:	00c00d44 	movi	r3,53
   269bc:	94bef344 	addi	r18,r18,-1075
   269c0:	90a5883a 	add	r18,r18,r2
   269c4:	1885c83a 	sub	r2,r3,r2
   269c8:	d8c00817 	ldw	r3,32(sp)
   269cc:	a4800015 	stw	r18,0(r20)
   269d0:	18800015 	stw	r2,0(r3)
   269d4:	003fe706 	br	26974 <__d2b+0xbc>
   269d8:	01000804 	movi	r4,32
   269dc:	2089c83a 	sub	r4,r4,r2
   269e0:	1908983a 	sll	r4,r3,r4
   269e4:	d9400117 	ldw	r5,4(sp)
   269e8:	1886d83a 	srl	r3,r3,r2
   269ec:	2148b03a 	or	r4,r4,r5
   269f0:	81000515 	stw	r4,20(r16)
   269f4:	d8c00015 	stw	r3,0(sp)
   269f8:	003fcc06 	br	2692c <__d2b+0x74>

000269fc <__ratio>:
   269fc:	defff904 	addi	sp,sp,-28
   26a00:	dc400315 	stw	r17,12(sp)
   26a04:	2823883a 	mov	r17,r5
   26a08:	d9400104 	addi	r5,sp,4
   26a0c:	dfc00615 	stw	ra,24(sp)
   26a10:	dcc00515 	stw	r19,20(sp)
   26a14:	dc800415 	stw	r18,16(sp)
   26a18:	2027883a 	mov	r19,r4
   26a1c:	dc000215 	stw	r16,8(sp)
   26a20:	00267700 	call	26770 <__b2d>
   26a24:	8809883a 	mov	r4,r17
   26a28:	d80b883a 	mov	r5,sp
   26a2c:	1025883a 	mov	r18,r2
   26a30:	1821883a 	mov	r16,r3
   26a34:	00267700 	call	26770 <__b2d>
   26a38:	99400417 	ldw	r5,16(r19)
   26a3c:	89000417 	ldw	r4,16(r17)
   26a40:	d9800117 	ldw	r6,4(sp)
   26a44:	2909c83a 	sub	r4,r5,r4
   26a48:	d9400017 	ldw	r5,0(sp)
   26a4c:	2008917a 	slli	r4,r4,5
   26a50:	314bc83a 	sub	r5,r6,r5
   26a54:	290b883a 	add	r5,r5,r4
   26a58:	01400e0e 	bge	zero,r5,26a94 <__ratio+0x98>
   26a5c:	280a953a 	slli	r5,r5,20
   26a60:	2c21883a 	add	r16,r5,r16
   26a64:	9009883a 	mov	r4,r18
   26a68:	800b883a 	mov	r5,r16
   26a6c:	100d883a 	mov	r6,r2
   26a70:	180f883a 	mov	r7,r3
   26a74:	0028cb00 	call	28cb0 <__divdf3>
   26a78:	dfc00617 	ldw	ra,24(sp)
   26a7c:	dcc00517 	ldw	r19,20(sp)
   26a80:	dc800417 	ldw	r18,16(sp)
   26a84:	dc400317 	ldw	r17,12(sp)
   26a88:	dc000217 	ldw	r16,8(sp)
   26a8c:	dec00704 	addi	sp,sp,28
   26a90:	f800283a 	ret
   26a94:	280a953a 	slli	r5,r5,20
   26a98:	1947c83a 	sub	r3,r3,r5
   26a9c:	003ff106 	br	26a64 <__ratio+0x68>

00026aa0 <_mprec_log10>:
   26aa0:	defffe04 	addi	sp,sp,-8
   26aa4:	dc000015 	stw	r16,0(sp)
   26aa8:	dfc00115 	stw	ra,4(sp)
   26aac:	008005c4 	movi	r2,23
   26ab0:	2021883a 	mov	r16,r4
   26ab4:	11000d0e 	bge	r2,r4,26aec <_mprec_log10+0x4c>
   26ab8:	0005883a 	mov	r2,zero
   26abc:	00cffc34 	movhi	r3,16368
   26ac0:	843fffc4 	addi	r16,r16,-1
   26ac4:	1009883a 	mov	r4,r2
   26ac8:	180b883a 	mov	r5,r3
   26acc:	000d883a 	mov	r6,zero
   26ad0:	01d00934 	movhi	r7,16420
   26ad4:	00289cc0 	call	289cc <__muldf3>
   26ad8:	803ff91e 	bne	r16,zero,26ac0 <_mprec_log10+0x20>
   26adc:	dfc00117 	ldw	ra,4(sp)
   26ae0:	dc000017 	ldw	r16,0(sp)
   26ae4:	dec00204 	addi	sp,sp,8
   26ae8:	f800283a 	ret
   26aec:	202090fa 	slli	r16,r4,3
   26af0:	008000f4 	movhi	r2,3
   26af4:	10b22a04 	addi	r2,r2,-14168
   26af8:	1421883a 	add	r16,r2,r16
   26afc:	80800017 	ldw	r2,0(r16)
   26b00:	80c00117 	ldw	r3,4(r16)
   26b04:	dfc00117 	ldw	ra,4(sp)
   26b08:	dc000017 	ldw	r16,0(sp)
   26b0c:	dec00204 	addi	sp,sp,8
   26b10:	f800283a 	ret

00026b14 <__copybits>:
   26b14:	297fffc4 	addi	r5,r5,-1
   26b18:	31c00417 	ldw	r7,16(r6)
   26b1c:	2811d17a 	srai	r8,r5,5
   26b20:	30800504 	addi	r2,r6,20
   26b24:	39c00144 	addi	r7,r7,5
   26b28:	42000044 	addi	r8,r8,1
   26b2c:	39cf883a 	add	r7,r7,r7
   26b30:	4211883a 	add	r8,r8,r8
   26b34:	39cf883a 	add	r7,r7,r7
   26b38:	4211883a 	add	r8,r8,r8
   26b3c:	31cf883a 	add	r7,r6,r7
   26b40:	2211883a 	add	r8,r4,r8
   26b44:	11c00d2e 	bgeu	r2,r7,26b7c <__copybits+0x68>
   26b48:	2007883a 	mov	r3,r4
   26b4c:	11400017 	ldw	r5,0(r2)
   26b50:	18c00104 	addi	r3,r3,4
   26b54:	10800104 	addi	r2,r2,4
   26b58:	197fff15 	stw	r5,-4(r3)
   26b5c:	11fffb36 	bltu	r2,r7,26b4c <__copybits+0x38>
   26b60:	3985c83a 	sub	r2,r7,r6
   26b64:	10bffac4 	addi	r2,r2,-21
   26b68:	1004d0ba 	srli	r2,r2,2
   26b6c:	10800044 	addi	r2,r2,1
   26b70:	1085883a 	add	r2,r2,r2
   26b74:	1085883a 	add	r2,r2,r2
   26b78:	2089883a 	add	r4,r4,r2
   26b7c:	2200032e 	bgeu	r4,r8,26b8c <__copybits+0x78>
   26b80:	20000015 	stw	zero,0(r4)
   26b84:	21000104 	addi	r4,r4,4
   26b88:	223ffd36 	bltu	r4,r8,26b80 <__copybits+0x6c>
   26b8c:	f800283a 	ret

00026b90 <__any_on>:
   26b90:	21800417 	ldw	r6,16(r4)
   26b94:	2805d17a 	srai	r2,r5,5
   26b98:	20c00504 	addi	r3,r4,20
   26b9c:	30800f0e 	bge	r6,r2,26bdc <__any_on+0x4c>
   26ba0:	3005883a 	mov	r2,r6
   26ba4:	10800144 	addi	r2,r2,5
   26ba8:	1085883a 	add	r2,r2,r2
   26bac:	1085883a 	add	r2,r2,r2
   26bb0:	2089883a 	add	r4,r4,r2
   26bb4:	1900152e 	bgeu	r3,r4,26c0c <__any_on+0x7c>
   26bb8:	20bfff17 	ldw	r2,-4(r4)
   26bbc:	213fff04 	addi	r4,r4,-4
   26bc0:	1000041e 	bne	r2,zero,26bd4 <__any_on+0x44>
   26bc4:	1900112e 	bgeu	r3,r4,26c0c <__any_on+0x7c>
   26bc8:	213fff04 	addi	r4,r4,-4
   26bcc:	20800017 	ldw	r2,0(r4)
   26bd0:	103ffc26 	beq	r2,zero,26bc4 <__any_on+0x34>
   26bd4:	00800044 	movi	r2,1
   26bd8:	f800283a 	ret
   26bdc:	11bff10e 	bge	r2,r6,26ba4 <__any_on+0x14>
   26be0:	294007cc 	andi	r5,r5,31
   26be4:	283fef26 	beq	r5,zero,26ba4 <__any_on+0x14>
   26be8:	11800144 	addi	r6,r2,5
   26bec:	318d883a 	add	r6,r6,r6
   26bf0:	318d883a 	add	r6,r6,r6
   26bf4:	218d883a 	add	r6,r4,r6
   26bf8:	31800017 	ldw	r6,0(r6)
   26bfc:	314ed83a 	srl	r7,r6,r5
   26c00:	394a983a 	sll	r5,r7,r5
   26c04:	29bff31e 	bne	r5,r6,26bd4 <__any_on+0x44>
   26c08:	003fe606 	br	26ba4 <__any_on+0x14>
   26c0c:	0005883a 	mov	r2,zero
   26c10:	f800283a 	ret

00026c14 <_realloc_r>:
   26c14:	defff504 	addi	sp,sp,-44
   26c18:	dd400615 	stw	r21,24(sp)
   26c1c:	dc800315 	stw	r18,12(sp)
   26c20:	dc000115 	stw	r16,4(sp)
   26c24:	dfc00a15 	stw	ra,40(sp)
   26c28:	df000915 	stw	fp,36(sp)
   26c2c:	ddc00815 	stw	r23,32(sp)
   26c30:	dd800715 	stw	r22,28(sp)
   26c34:	dd000515 	stw	r20,20(sp)
   26c38:	dcc00415 	stw	r19,16(sp)
   26c3c:	dc400215 	stw	r17,8(sp)
   26c40:	2821883a 	mov	r16,r5
   26c44:	202b883a 	mov	r21,r4
   26c48:	3025883a 	mov	r18,r6
   26c4c:	28009626 	beq	r5,zero,26ea8 <_realloc_r+0x294>
   26c50:	002a05c0 	call	2a05c <__malloc_lock>
   26c54:	80bfff17 	ldw	r2,-4(r16)
   26c58:	04ffff04 	movi	r19,-4
   26c5c:	90c002c4 	addi	r3,r18,11
   26c60:	01000584 	movi	r4,22
   26c64:	85bffe04 	addi	r22,r16,-8
   26c68:	14e6703a 	and	r19,r2,r19
   26c6c:	20c0372e 	bgeu	r4,r3,26d4c <_realloc_r+0x138>
   26c70:	047ffe04 	movi	r17,-8
   26c74:	1c62703a 	and	r17,r3,r17
   26c78:	8807883a 	mov	r3,r17
   26c7c:	88005a16 	blt	r17,zero,26de8 <_realloc_r+0x1d4>
   26c80:	8c805936 	bltu	r17,r18,26de8 <_realloc_r+0x1d4>
   26c84:	98c0340e 	bge	r19,r3,26d58 <_realloc_r+0x144>
   26c88:	070000f4 	movhi	fp,3
   26c8c:	e733b404 	addi	fp,fp,-12592
   26c90:	e1400217 	ldw	r5,8(fp)
   26c94:	b4c9883a 	add	r4,r22,r19
   26c98:	29009026 	beq	r5,r4,26edc <_realloc_r+0x2c8>
   26c9c:	21800117 	ldw	r6,4(r4)
   26ca0:	01ffff84 	movi	r7,-2
   26ca4:	31ce703a 	and	r7,r6,r7
   26ca8:	21cf883a 	add	r7,r4,r7
   26cac:	39c00117 	ldw	r7,4(r7)
   26cb0:	39c0004c 	andi	r7,r7,1
   26cb4:	38004326 	beq	r7,zero,26dc4 <_realloc_r+0x1b0>
   26cb8:	000d883a 	mov	r6,zero
   26cbc:	0009883a 	mov	r4,zero
   26cc0:	1080004c 	andi	r2,r2,1
   26cc4:	10005a1e 	bne	r2,zero,26e30 <_realloc_r+0x21c>
   26cc8:	85fffe17 	ldw	r23,-8(r16)
   26ccc:	00bfff04 	movi	r2,-4
   26cd0:	b5efc83a 	sub	r23,r22,r23
   26cd4:	b9c00117 	ldw	r7,4(r23)
   26cd8:	388e703a 	and	r7,r7,r2
   26cdc:	3ccf883a 	add	r7,r7,r19
   26ce0:	20005226 	beq	r4,zero,26e2c <_realloc_r+0x218>
   26ce4:	31e9883a 	add	r20,r6,r7
   26ce8:	2140c726 	beq	r4,r5,27008 <_realloc_r+0x3f4>
   26cec:	a0c04f16 	blt	r20,r3,26e2c <_realloc_r+0x218>
   26cf0:	20800317 	ldw	r2,12(r4)
   26cf4:	20c00217 	ldw	r3,8(r4)
   26cf8:	99bfff04 	addi	r6,r19,-4
   26cfc:	01000904 	movi	r4,36
   26d00:	18800315 	stw	r2,12(r3)
   26d04:	10c00215 	stw	r3,8(r2)
   26d08:	b8c00217 	ldw	r3,8(r23)
   26d0c:	b8800317 	ldw	r2,12(r23)
   26d10:	bc800204 	addi	r18,r23,8
   26d14:	18800315 	stw	r2,12(r3)
   26d18:	10c00215 	stw	r3,8(r2)
   26d1c:	2180ed36 	bltu	r4,r6,270d4 <_realloc_r+0x4c0>
   26d20:	008004c4 	movi	r2,19
   26d24:	11809b2e 	bgeu	r2,r6,26f94 <_realloc_r+0x380>
   26d28:	80800017 	ldw	r2,0(r16)
   26d2c:	b8800215 	stw	r2,8(r23)
   26d30:	80800117 	ldw	r2,4(r16)
   26d34:	b8800315 	stw	r2,12(r23)
   26d38:	008006c4 	movi	r2,27
   26d3c:	1180f936 	bltu	r2,r6,27124 <_realloc_r+0x510>
   26d40:	b8800404 	addi	r2,r23,16
   26d44:	80c00204 	addi	r3,r16,8
   26d48:	00009406 	br	26f9c <_realloc_r+0x388>
   26d4c:	00c00404 	movi	r3,16
   26d50:	1823883a 	mov	r17,r3
   26d54:	003fca06 	br	26c80 <_realloc_r+0x6c>
   26d58:	9829883a 	mov	r20,r19
   26d5c:	a447c83a 	sub	r3,r20,r17
   26d60:	010003c4 	movi	r4,15
   26d64:	1080004c 	andi	r2,r2,1
   26d68:	20c02336 	bltu	r4,r3,26df8 <_realloc_r+0x1e4>
   26d6c:	1504b03a 	or	r2,r2,r20
   26d70:	b0800115 	stw	r2,4(r22)
   26d74:	b52d883a 	add	r22,r22,r20
   26d78:	b0800117 	ldw	r2,4(r22)
   26d7c:	10800054 	ori	r2,r2,1
   26d80:	b0800115 	stw	r2,4(r22)
   26d84:	a809883a 	mov	r4,r21
   26d88:	002a07c0 	call	2a07c <__malloc_unlock>
   26d8c:	8025883a 	mov	r18,r16
   26d90:	9005883a 	mov	r2,r18
   26d94:	dfc00a17 	ldw	ra,40(sp)
   26d98:	df000917 	ldw	fp,36(sp)
   26d9c:	ddc00817 	ldw	r23,32(sp)
   26da0:	dd800717 	ldw	r22,28(sp)
   26da4:	dd400617 	ldw	r21,24(sp)
   26da8:	dd000517 	ldw	r20,20(sp)
   26dac:	dcc00417 	ldw	r19,16(sp)
   26db0:	dc800317 	ldw	r18,12(sp)
   26db4:	dc400217 	ldw	r17,8(sp)
   26db8:	dc000117 	ldw	r16,4(sp)
   26dbc:	dec00b04 	addi	sp,sp,44
   26dc0:	f800283a 	ret
   26dc4:	01ffff04 	movi	r7,-4
   26dc8:	31cc703a 	and	r6,r6,r7
   26dcc:	34e9883a 	add	r20,r6,r19
   26dd0:	a0ffbb16 	blt	r20,r3,26cc0 <_realloc_r+0xac>
   26dd4:	20c00317 	ldw	r3,12(r4)
   26dd8:	21000217 	ldw	r4,8(r4)
   26ddc:	20c00315 	stw	r3,12(r4)
   26de0:	19000215 	stw	r4,8(r3)
   26de4:	003fdd06 	br	26d5c <_realloc_r+0x148>
   26de8:	00800304 	movi	r2,12
   26dec:	a8800015 	stw	r2,0(r21)
   26df0:	0025883a 	mov	r18,zero
   26df4:	003fe606 	br	26d90 <_realloc_r+0x17c>
   26df8:	1444b03a 	or	r2,r2,r17
   26dfc:	b0800115 	stw	r2,4(r22)
   26e00:	b44b883a 	add	r5,r22,r17
   26e04:	18800054 	ori	r2,r3,1
   26e08:	28800115 	stw	r2,4(r5)
   26e0c:	28c7883a 	add	r3,r5,r3
   26e10:	18800117 	ldw	r2,4(r3)
   26e14:	a809883a 	mov	r4,r21
   26e18:	29400204 	addi	r5,r5,8
   26e1c:	10800054 	ori	r2,r2,1
   26e20:	18800115 	stw	r2,4(r3)
   26e24:	00244080 	call	24408 <_free_r>
   26e28:	003fd606 	br	26d84 <_realloc_r+0x170>
   26e2c:	38c0330e 	bge	r7,r3,26efc <_realloc_r+0x2e8>
   26e30:	900b883a 	mov	r5,r18
   26e34:	a809883a 	mov	r4,r21
   26e38:	0024fa00 	call	24fa0 <_malloc_r>
   26e3c:	1025883a 	mov	r18,r2
   26e40:	10001626 	beq	r2,zero,26e9c <_realloc_r+0x288>
   26e44:	80bfff17 	ldw	r2,-4(r16)
   26e48:	00ffff84 	movi	r3,-2
   26e4c:	913ffe04 	addi	r4,r18,-8
   26e50:	10c6703a 	and	r3,r2,r3
   26e54:	b0c7883a 	add	r3,r22,r3
   26e58:	20c09926 	beq	r4,r3,270c0 <_realloc_r+0x4ac>
   26e5c:	99bfff04 	addi	r6,r19,-4
   26e60:	00800904 	movi	r2,36
   26e64:	11806436 	bltu	r2,r6,26ff8 <_realloc_r+0x3e4>
   26e68:	00c004c4 	movi	r3,19
   26e6c:	19804036 	bltu	r3,r6,26f70 <_realloc_r+0x35c>
   26e70:	9005883a 	mov	r2,r18
   26e74:	8007883a 	mov	r3,r16
   26e78:	19000017 	ldw	r4,0(r3)
   26e7c:	11000015 	stw	r4,0(r2)
   26e80:	19000117 	ldw	r4,4(r3)
   26e84:	11000115 	stw	r4,4(r2)
   26e88:	18c00217 	ldw	r3,8(r3)
   26e8c:	10c00215 	stw	r3,8(r2)
   26e90:	a809883a 	mov	r4,r21
   26e94:	800b883a 	mov	r5,r16
   26e98:	00244080 	call	24408 <_free_r>
   26e9c:	a809883a 	mov	r4,r21
   26ea0:	002a07c0 	call	2a07c <__malloc_unlock>
   26ea4:	003fba06 	br	26d90 <_realloc_r+0x17c>
   26ea8:	300b883a 	mov	r5,r6
   26eac:	dfc00a17 	ldw	ra,40(sp)
   26eb0:	df000917 	ldw	fp,36(sp)
   26eb4:	ddc00817 	ldw	r23,32(sp)
   26eb8:	dd800717 	ldw	r22,28(sp)
   26ebc:	dd400617 	ldw	r21,24(sp)
   26ec0:	dd000517 	ldw	r20,20(sp)
   26ec4:	dcc00417 	ldw	r19,16(sp)
   26ec8:	dc800317 	ldw	r18,12(sp)
   26ecc:	dc400217 	ldw	r17,8(sp)
   26ed0:	dc000117 	ldw	r16,4(sp)
   26ed4:	dec00b04 	addi	sp,sp,44
   26ed8:	0024fa01 	jmpi	24fa0 <_malloc_r>
   26edc:	29800117 	ldw	r6,4(r5)
   26ee0:	013fff04 	movi	r4,-4
   26ee4:	89c00404 	addi	r7,r17,16
   26ee8:	310c703a 	and	r6,r6,r4
   26eec:	34c9883a 	add	r4,r6,r19
   26ef0:	21c0340e 	bge	r4,r7,26fc4 <_realloc_r+0x3b0>
   26ef4:	2809883a 	mov	r4,r5
   26ef8:	003f7106 	br	26cc0 <_realloc_r+0xac>
   26efc:	b8800317 	ldw	r2,12(r23)
   26f00:	b8c00217 	ldw	r3,8(r23)
   26f04:	99bfff04 	addi	r6,r19,-4
   26f08:	01000904 	movi	r4,36
   26f0c:	18800315 	stw	r2,12(r3)
   26f10:	10c00215 	stw	r3,8(r2)
   26f14:	bc800204 	addi	r18,r23,8
   26f18:	21807836 	bltu	r4,r6,270fc <_realloc_r+0x4e8>
   26f1c:	008004c4 	movi	r2,19
   26f20:	1180732e 	bgeu	r2,r6,270f0 <_realloc_r+0x4dc>
   26f24:	80800017 	ldw	r2,0(r16)
   26f28:	b8800215 	stw	r2,8(r23)
   26f2c:	80800117 	ldw	r2,4(r16)
   26f30:	b8800315 	stw	r2,12(r23)
   26f34:	008006c4 	movi	r2,27
   26f38:	11808936 	bltu	r2,r6,27160 <_realloc_r+0x54c>
   26f3c:	b8800404 	addi	r2,r23,16
   26f40:	80c00204 	addi	r3,r16,8
   26f44:	19000017 	ldw	r4,0(r3)
   26f48:	9021883a 	mov	r16,r18
   26f4c:	3829883a 	mov	r20,r7
   26f50:	11000015 	stw	r4,0(r2)
   26f54:	19000117 	ldw	r4,4(r3)
   26f58:	b82d883a 	mov	r22,r23
   26f5c:	11000115 	stw	r4,4(r2)
   26f60:	18c00217 	ldw	r3,8(r3)
   26f64:	10c00215 	stw	r3,8(r2)
   26f68:	b8800117 	ldw	r2,4(r23)
   26f6c:	003f7b06 	br	26d5c <_realloc_r+0x148>
   26f70:	80c00017 	ldw	r3,0(r16)
   26f74:	90c00015 	stw	r3,0(r18)
   26f78:	80c00117 	ldw	r3,4(r16)
   26f7c:	90c00115 	stw	r3,4(r18)
   26f80:	00c006c4 	movi	r3,27
   26f84:	19804636 	bltu	r3,r6,270a0 <_realloc_r+0x48c>
   26f88:	90800204 	addi	r2,r18,8
   26f8c:	80c00204 	addi	r3,r16,8
   26f90:	003fb906 	br	26e78 <_realloc_r+0x264>
   26f94:	9005883a 	mov	r2,r18
   26f98:	8007883a 	mov	r3,r16
   26f9c:	19000017 	ldw	r4,0(r3)
   26fa0:	9021883a 	mov	r16,r18
   26fa4:	b82d883a 	mov	r22,r23
   26fa8:	11000015 	stw	r4,0(r2)
   26fac:	19000117 	ldw	r4,4(r3)
   26fb0:	11000115 	stw	r4,4(r2)
   26fb4:	18c00217 	ldw	r3,8(r3)
   26fb8:	10c00215 	stw	r3,8(r2)
   26fbc:	b8800117 	ldw	r2,4(r23)
   26fc0:	003f6606 	br	26d5c <_realloc_r+0x148>
   26fc4:	2445c83a 	sub	r2,r4,r17
   26fc8:	b46d883a 	add	r22,r22,r17
   26fcc:	10800054 	ori	r2,r2,1
   26fd0:	b0800115 	stw	r2,4(r22)
   26fd4:	80bfff17 	ldw	r2,-4(r16)
   26fd8:	a809883a 	mov	r4,r21
   26fdc:	e5800215 	stw	r22,8(fp)
   26fe0:	1080004c 	andi	r2,r2,1
   26fe4:	88a2b03a 	or	r17,r17,r2
   26fe8:	847fff15 	stw	r17,-4(r16)
   26fec:	002a07c0 	call	2a07c <__malloc_unlock>
   26ff0:	8025883a 	mov	r18,r16
   26ff4:	003f6606 	br	26d90 <_realloc_r+0x17c>
   26ff8:	9009883a 	mov	r4,r18
   26ffc:	800b883a 	mov	r5,r16
   27000:	002595c0 	call	2595c <memmove>
   27004:	003fa206 	br	26e90 <_realloc_r+0x27c>
   27008:	88800404 	addi	r2,r17,16
   2700c:	a0bf8716 	blt	r20,r2,26e2c <_realloc_r+0x218>
   27010:	b8800317 	ldw	r2,12(r23)
   27014:	b8c00217 	ldw	r3,8(r23)
   27018:	99bfff04 	addi	r6,r19,-4
   2701c:	01000904 	movi	r4,36
   27020:	18800315 	stw	r2,12(r3)
   27024:	10c00215 	stw	r3,8(r2)
   27028:	bc800204 	addi	r18,r23,8
   2702c:	21806536 	bltu	r4,r6,271c4 <_realloc_r+0x5b0>
   27030:	008004c4 	movi	r2,19
   27034:	1180592e 	bgeu	r2,r6,2719c <_realloc_r+0x588>
   27038:	80800017 	ldw	r2,0(r16)
   2703c:	b8800215 	stw	r2,8(r23)
   27040:	80800117 	ldw	r2,4(r16)
   27044:	b8800315 	stw	r2,12(r23)
   27048:	008006c4 	movi	r2,27
   2704c:	11806136 	bltu	r2,r6,271d4 <_realloc_r+0x5c0>
   27050:	b8800404 	addi	r2,r23,16
   27054:	80c00204 	addi	r3,r16,8
   27058:	19000017 	ldw	r4,0(r3)
   2705c:	11000015 	stw	r4,0(r2)
   27060:	19000117 	ldw	r4,4(r3)
   27064:	11000115 	stw	r4,4(r2)
   27068:	18c00217 	ldw	r3,8(r3)
   2706c:	10c00215 	stw	r3,8(r2)
   27070:	a447c83a 	sub	r3,r20,r17
   27074:	bc45883a 	add	r2,r23,r17
   27078:	18c00054 	ori	r3,r3,1
   2707c:	10c00115 	stw	r3,4(r2)
   27080:	b8c00117 	ldw	r3,4(r23)
   27084:	e0800215 	stw	r2,8(fp)
   27088:	a809883a 	mov	r4,r21
   2708c:	1880004c 	andi	r2,r3,1
   27090:	88a2b03a 	or	r17,r17,r2
   27094:	bc400115 	stw	r17,4(r23)
   27098:	002a07c0 	call	2a07c <__malloc_unlock>
   2709c:	003f3c06 	br	26d90 <_realloc_r+0x17c>
   270a0:	80c00217 	ldw	r3,8(r16)
   270a4:	90c00215 	stw	r3,8(r18)
   270a8:	80c00317 	ldw	r3,12(r16)
   270ac:	90c00315 	stw	r3,12(r18)
   270b0:	30802426 	beq	r6,r2,27144 <_realloc_r+0x530>
   270b4:	90800404 	addi	r2,r18,16
   270b8:	80c00404 	addi	r3,r16,16
   270bc:	003f6e06 	br	26e78 <_realloc_r+0x264>
   270c0:	953fff17 	ldw	r20,-4(r18)
   270c4:	00ffff04 	movi	r3,-4
   270c8:	a0e8703a 	and	r20,r20,r3
   270cc:	a4e9883a 	add	r20,r20,r19
   270d0:	003f2206 	br	26d5c <_realloc_r+0x148>
   270d4:	800b883a 	mov	r5,r16
   270d8:	9009883a 	mov	r4,r18
   270dc:	002595c0 	call	2595c <memmove>
   270e0:	9021883a 	mov	r16,r18
   270e4:	b8800117 	ldw	r2,4(r23)
   270e8:	b82d883a 	mov	r22,r23
   270ec:	003f1b06 	br	26d5c <_realloc_r+0x148>
   270f0:	9005883a 	mov	r2,r18
   270f4:	8007883a 	mov	r3,r16
   270f8:	003f9206 	br	26f44 <_realloc_r+0x330>
   270fc:	800b883a 	mov	r5,r16
   27100:	9009883a 	mov	r4,r18
   27104:	d9c00015 	stw	r7,0(sp)
   27108:	002595c0 	call	2595c <memmove>
   2710c:	d9c00017 	ldw	r7,0(sp)
   27110:	9021883a 	mov	r16,r18
   27114:	b8800117 	ldw	r2,4(r23)
   27118:	3829883a 	mov	r20,r7
   2711c:	b82d883a 	mov	r22,r23
   27120:	003f0e06 	br	26d5c <_realloc_r+0x148>
   27124:	80800217 	ldw	r2,8(r16)
   27128:	b8800415 	stw	r2,16(r23)
   2712c:	80800317 	ldw	r2,12(r16)
   27130:	b8800515 	stw	r2,20(r23)
   27134:	31001226 	beq	r6,r4,27180 <_realloc_r+0x56c>
   27138:	b8800604 	addi	r2,r23,24
   2713c:	80c00404 	addi	r3,r16,16
   27140:	003f9606 	br	26f9c <_realloc_r+0x388>
   27144:	81000417 	ldw	r4,16(r16)
   27148:	90800604 	addi	r2,r18,24
   2714c:	80c00604 	addi	r3,r16,24
   27150:	91000415 	stw	r4,16(r18)
   27154:	81000517 	ldw	r4,20(r16)
   27158:	91000515 	stw	r4,20(r18)
   2715c:	003f4606 	br	26e78 <_realloc_r+0x264>
   27160:	80800217 	ldw	r2,8(r16)
   27164:	b8800415 	stw	r2,16(r23)
   27168:	80800317 	ldw	r2,12(r16)
   2716c:	b8800515 	stw	r2,20(r23)
   27170:	31000d26 	beq	r6,r4,271a8 <_realloc_r+0x594>
   27174:	b8800604 	addi	r2,r23,24
   27178:	80c00404 	addi	r3,r16,16
   2717c:	003f7106 	br	26f44 <_realloc_r+0x330>
   27180:	81000417 	ldw	r4,16(r16)
   27184:	b8800804 	addi	r2,r23,32
   27188:	80c00604 	addi	r3,r16,24
   2718c:	b9000615 	stw	r4,24(r23)
   27190:	81000517 	ldw	r4,20(r16)
   27194:	b9000715 	stw	r4,28(r23)
   27198:	003f8006 	br	26f9c <_realloc_r+0x388>
   2719c:	9005883a 	mov	r2,r18
   271a0:	8007883a 	mov	r3,r16
   271a4:	003fac06 	br	27058 <_realloc_r+0x444>
   271a8:	81000417 	ldw	r4,16(r16)
   271ac:	b8800804 	addi	r2,r23,32
   271b0:	80c00604 	addi	r3,r16,24
   271b4:	b9000615 	stw	r4,24(r23)
   271b8:	81000517 	ldw	r4,20(r16)
   271bc:	b9000715 	stw	r4,28(r23)
   271c0:	003f6006 	br	26f44 <_realloc_r+0x330>
   271c4:	9009883a 	mov	r4,r18
   271c8:	800b883a 	mov	r5,r16
   271cc:	002595c0 	call	2595c <memmove>
   271d0:	003fa706 	br	27070 <_realloc_r+0x45c>
   271d4:	80800217 	ldw	r2,8(r16)
   271d8:	b8800415 	stw	r2,16(r23)
   271dc:	80800317 	ldw	r2,12(r16)
   271e0:	b8800515 	stw	r2,20(r23)
   271e4:	31000326 	beq	r6,r4,271f4 <_realloc_r+0x5e0>
   271e8:	b8800604 	addi	r2,r23,24
   271ec:	80c00404 	addi	r3,r16,16
   271f0:	003f9906 	br	27058 <_realloc_r+0x444>
   271f4:	81000417 	ldw	r4,16(r16)
   271f8:	b8800804 	addi	r2,r23,32
   271fc:	80c00604 	addi	r3,r16,24
   27200:	b9000615 	stw	r4,24(r23)
   27204:	81000517 	ldw	r4,20(r16)
   27208:	b9000715 	stw	r4,28(r23)
   2720c:	003f9206 	br	27058 <_realloc_r+0x444>

00027210 <__isinfd>:
   27210:	0105c83a 	sub	r2,zero,r4
   27214:	1108b03a 	or	r4,r2,r4
   27218:	2004d7fa 	srli	r2,r4,31
   2721c:	00e00034 	movhi	r3,32768
   27220:	18ffffc4 	addi	r3,r3,-1
   27224:	28ca703a 	and	r5,r5,r3
   27228:	1144b03a 	or	r2,r2,r5
   2722c:	00dffc34 	movhi	r3,32752
   27230:	1885c83a 	sub	r2,r3,r2
   27234:	0087c83a 	sub	r3,zero,r2
   27238:	1884b03a 	or	r2,r3,r2
   2723c:	1005d7fa 	srai	r2,r2,31
   27240:	10800044 	addi	r2,r2,1
   27244:	f800283a 	ret

00027248 <__isnand>:
   27248:	0105c83a 	sub	r2,zero,r4
   2724c:	1108b03a 	or	r4,r2,r4
   27250:	2004d7fa 	srli	r2,r4,31
   27254:	00e00034 	movhi	r3,32768
   27258:	18ffffc4 	addi	r3,r3,-1
   2725c:	28ca703a 	and	r5,r5,r3
   27260:	1144b03a 	or	r2,r2,r5
   27264:	00dffc34 	movhi	r3,32752
   27268:	1885c83a 	sub	r2,r3,r2
   2726c:	1004d7fa 	srli	r2,r2,31
   27270:	f800283a 	ret

00027274 <_sbrk_r>:
   27274:	defffd04 	addi	sp,sp,-12
   27278:	dc400115 	stw	r17,4(sp)
   2727c:	dc000015 	stw	r16,0(sp)
   27280:	2023883a 	mov	r17,r4
   27284:	040000f4 	movhi	r16,3
   27288:	843fe304 	addi	r16,r16,-116
   2728c:	2809883a 	mov	r4,r5
   27290:	dfc00215 	stw	ra,8(sp)
   27294:	80000015 	stw	zero,0(r16)
   27298:	002a2600 	call	2a260 <sbrk>
   2729c:	00ffffc4 	movi	r3,-1
   272a0:	10c00526 	beq	r2,r3,272b8 <_sbrk_r+0x44>
   272a4:	dfc00217 	ldw	ra,8(sp)
   272a8:	dc400117 	ldw	r17,4(sp)
   272ac:	dc000017 	ldw	r16,0(sp)
   272b0:	dec00304 	addi	sp,sp,12
   272b4:	f800283a 	ret
   272b8:	80c00017 	ldw	r3,0(r16)
   272bc:	183ff926 	beq	r3,zero,272a4 <_sbrk_r+0x30>
   272c0:	88c00015 	stw	r3,0(r17)
   272c4:	dfc00217 	ldw	ra,8(sp)
   272c8:	dc400117 	ldw	r17,4(sp)
   272cc:	dc000017 	ldw	r16,0(sp)
   272d0:	dec00304 	addi	sp,sp,12
   272d4:	f800283a 	ret

000272d8 <__sread>:
   272d8:	defffe04 	addi	sp,sp,-8
   272dc:	dc000015 	stw	r16,0(sp)
   272e0:	2821883a 	mov	r16,r5
   272e4:	2940038f 	ldh	r5,14(r5)
   272e8:	dfc00115 	stw	ra,4(sp)
   272ec:	00278e00 	call	278e0 <_read_r>
   272f0:	10000716 	blt	r2,zero,27310 <__sread+0x38>
   272f4:	80c01417 	ldw	r3,80(r16)
   272f8:	1887883a 	add	r3,r3,r2
   272fc:	80c01415 	stw	r3,80(r16)
   27300:	dfc00117 	ldw	ra,4(sp)
   27304:	dc000017 	ldw	r16,0(sp)
   27308:	dec00204 	addi	sp,sp,8
   2730c:	f800283a 	ret
   27310:	80c0030b 	ldhu	r3,12(r16)
   27314:	18fbffcc 	andi	r3,r3,61439
   27318:	80c0030d 	sth	r3,12(r16)
   2731c:	dfc00117 	ldw	ra,4(sp)
   27320:	dc000017 	ldw	r16,0(sp)
   27324:	dec00204 	addi	sp,sp,8
   27328:	f800283a 	ret

0002732c <__swrite>:
   2732c:	2880030b 	ldhu	r2,12(r5)
   27330:	defffb04 	addi	sp,sp,-20
   27334:	dcc00315 	stw	r19,12(sp)
   27338:	10c0400c 	andi	r3,r2,256
   2733c:	18ffffcc 	andi	r3,r3,65535
   27340:	18e0001c 	xori	r3,r3,32768
   27344:	dc800215 	stw	r18,8(sp)
   27348:	dc400115 	stw	r17,4(sp)
   2734c:	dc000015 	stw	r16,0(sp)
   27350:	dfc00415 	stw	ra,16(sp)
   27354:	18e00004 	addi	r3,r3,-32768
   27358:	2821883a 	mov	r16,r5
   2735c:	2027883a 	mov	r19,r4
   27360:	3025883a 	mov	r18,r6
   27364:	3823883a 	mov	r17,r7
   27368:	18000526 	beq	r3,zero,27380 <__swrite+0x54>
   2736c:	2940038f 	ldh	r5,14(r5)
   27370:	000d883a 	mov	r6,zero
   27374:	01c00084 	movi	r7,2
   27378:	00278740 	call	27874 <_lseek_r>
   2737c:	8080030b 	ldhu	r2,12(r16)
   27380:	8140038f 	ldh	r5,14(r16)
   27384:	10bbffcc 	andi	r2,r2,61439
   27388:	9809883a 	mov	r4,r19
   2738c:	900d883a 	mov	r6,r18
   27390:	880f883a 	mov	r7,r17
   27394:	8080030d 	sth	r2,12(r16)
   27398:	dfc00417 	ldw	ra,16(sp)
   2739c:	dcc00317 	ldw	r19,12(sp)
   273a0:	dc800217 	ldw	r18,8(sp)
   273a4:	dc400117 	ldw	r17,4(sp)
   273a8:	dc000017 	ldw	r16,0(sp)
   273ac:	dec00504 	addi	sp,sp,20
   273b0:	00274bc1 	jmpi	274bc <_write_r>

000273b4 <__sseek>:
   273b4:	defffe04 	addi	sp,sp,-8
   273b8:	dc000015 	stw	r16,0(sp)
   273bc:	2821883a 	mov	r16,r5
   273c0:	2940038f 	ldh	r5,14(r5)
   273c4:	dfc00115 	stw	ra,4(sp)
   273c8:	00278740 	call	27874 <_lseek_r>
   273cc:	00ffffc4 	movi	r3,-1
   273d0:	10c00826 	beq	r2,r3,273f4 <__sseek+0x40>
   273d4:	80c0030b 	ldhu	r3,12(r16)
   273d8:	80801415 	stw	r2,80(r16)
   273dc:	18c40014 	ori	r3,r3,4096
   273e0:	80c0030d 	sth	r3,12(r16)
   273e4:	dfc00117 	ldw	ra,4(sp)
   273e8:	dc000017 	ldw	r16,0(sp)
   273ec:	dec00204 	addi	sp,sp,8
   273f0:	f800283a 	ret
   273f4:	80c0030b 	ldhu	r3,12(r16)
   273f8:	18fbffcc 	andi	r3,r3,61439
   273fc:	80c0030d 	sth	r3,12(r16)
   27400:	dfc00117 	ldw	ra,4(sp)
   27404:	dc000017 	ldw	r16,0(sp)
   27408:	dec00204 	addi	sp,sp,8
   2740c:	f800283a 	ret

00027410 <__sclose>:
   27410:	2940038f 	ldh	r5,14(r5)
   27414:	00275f41 	jmpi	275f4 <_close_r>

00027418 <strcmp>:
   27418:	2904b03a 	or	r2,r5,r4
   2741c:	108000cc 	andi	r2,r2,3
   27420:	1000171e 	bne	r2,zero,27480 <strcmp+0x68>
   27424:	20800017 	ldw	r2,0(r4)
   27428:	28c00017 	ldw	r3,0(r5)
   2742c:	10c0141e 	bne	r2,r3,27480 <strcmp+0x68>
   27430:	027fbff4 	movhi	r9,65279
   27434:	4a7fbfc4 	addi	r9,r9,-257
   27438:	1247883a 	add	r3,r2,r9
   2743c:	0084303a 	nor	r2,zero,r2
   27440:	1884703a 	and	r2,r3,r2
   27444:	02202074 	movhi	r8,32897
   27448:	42202004 	addi	r8,r8,-32640
   2744c:	1204703a 	and	r2,r2,r8
   27450:	10000226 	beq	r2,zero,2745c <strcmp+0x44>
   27454:	00001706 	br	274b4 <strcmp+0x9c>
   27458:	3000161e 	bne	r6,zero,274b4 <strcmp+0x9c>
   2745c:	21000104 	addi	r4,r4,4
   27460:	20800017 	ldw	r2,0(r4)
   27464:	29400104 	addi	r5,r5,4
   27468:	28c00017 	ldw	r3,0(r5)
   2746c:	124f883a 	add	r7,r2,r9
   27470:	008c303a 	nor	r6,zero,r2
   27474:	398c703a 	and	r6,r7,r6
   27478:	320c703a 	and	r6,r6,r8
   2747c:	10fff626 	beq	r2,r3,27458 <strcmp+0x40>
   27480:	20800007 	ldb	r2,0(r4)
   27484:	1000051e 	bne	r2,zero,2749c <strcmp+0x84>
   27488:	00000606 	br	274a4 <strcmp+0x8c>
   2748c:	21000044 	addi	r4,r4,1
   27490:	20800007 	ldb	r2,0(r4)
   27494:	29400044 	addi	r5,r5,1
   27498:	10000226 	beq	r2,zero,274a4 <strcmp+0x8c>
   2749c:	28c00007 	ldb	r3,0(r5)
   274a0:	10fffa26 	beq	r2,r3,2748c <strcmp+0x74>
   274a4:	20c00003 	ldbu	r3,0(r4)
   274a8:	28800003 	ldbu	r2,0(r5)
   274ac:	1885c83a 	sub	r2,r3,r2
   274b0:	f800283a 	ret
   274b4:	0005883a 	mov	r2,zero
   274b8:	f800283a 	ret

000274bc <_write_r>:
   274bc:	defffd04 	addi	sp,sp,-12
   274c0:	dc400115 	stw	r17,4(sp)
   274c4:	dc000015 	stw	r16,0(sp)
   274c8:	2023883a 	mov	r17,r4
   274cc:	040000f4 	movhi	r16,3
   274d0:	843fe304 	addi	r16,r16,-116
   274d4:	2809883a 	mov	r4,r5
   274d8:	300b883a 	mov	r5,r6
   274dc:	380d883a 	mov	r6,r7
   274e0:	dfc00215 	stw	ra,8(sp)
   274e4:	80000015 	stw	zero,0(r16)
   274e8:	002a3600 	call	2a360 <write>
   274ec:	00ffffc4 	movi	r3,-1
   274f0:	10c00526 	beq	r2,r3,27508 <_write_r+0x4c>
   274f4:	dfc00217 	ldw	ra,8(sp)
   274f8:	dc400117 	ldw	r17,4(sp)
   274fc:	dc000017 	ldw	r16,0(sp)
   27500:	dec00304 	addi	sp,sp,12
   27504:	f800283a 	ret
   27508:	80c00017 	ldw	r3,0(r16)
   2750c:	183ff926 	beq	r3,zero,274f4 <_write_r+0x38>
   27510:	88c00015 	stw	r3,0(r17)
   27514:	dfc00217 	ldw	ra,8(sp)
   27518:	dc400117 	ldw	r17,4(sp)
   2751c:	dc000017 	ldw	r16,0(sp)
   27520:	dec00304 	addi	sp,sp,12
   27524:	f800283a 	ret

00027528 <_calloc_r>:
   27528:	defffe04 	addi	sp,sp,-8
   2752c:	dc000015 	stw	r16,0(sp)
   27530:	2021883a 	mov	r16,r4
   27534:	3009883a 	mov	r4,r6
   27538:	dfc00115 	stw	ra,4(sp)
   2753c:	00294340 	call	29434 <__mulsi3>
   27540:	8009883a 	mov	r4,r16
   27544:	100b883a 	mov	r5,r2
   27548:	0024fa00 	call	24fa0 <_malloc_r>
   2754c:	1021883a 	mov	r16,r2
   27550:	10000c26 	beq	r2,zero,27584 <_calloc_r+0x5c>
   27554:	11bfff17 	ldw	r6,-4(r2)
   27558:	00ffff04 	movi	r3,-4
   2755c:	00800904 	movi	r2,36
   27560:	30cc703a 	and	r6,r6,r3
   27564:	30cd883a 	add	r6,r6,r3
   27568:	11801436 	bltu	r2,r6,275bc <_calloc_r+0x94>
   2756c:	00c004c4 	movi	r3,19
   27570:	19800936 	bltu	r3,r6,27598 <_calloc_r+0x70>
   27574:	8005883a 	mov	r2,r16
   27578:	10000015 	stw	zero,0(r2)
   2757c:	10000115 	stw	zero,4(r2)
   27580:	10000215 	stw	zero,8(r2)
   27584:	8005883a 	mov	r2,r16
   27588:	dfc00117 	ldw	ra,4(sp)
   2758c:	dc000017 	ldw	r16,0(sp)
   27590:	dec00204 	addi	sp,sp,8
   27594:	f800283a 	ret
   27598:	80000015 	stw	zero,0(r16)
   2759c:	80000115 	stw	zero,4(r16)
   275a0:	00c006c4 	movi	r3,27
   275a4:	19800d2e 	bgeu	r3,r6,275dc <_calloc_r+0xb4>
   275a8:	80000215 	stw	zero,8(r16)
   275ac:	80000315 	stw	zero,12(r16)
   275b0:	30800c26 	beq	r6,r2,275e4 <_calloc_r+0xbc>
   275b4:	80800404 	addi	r2,r16,16
   275b8:	003fef06 	br	27578 <_calloc_r+0x50>
   275bc:	8009883a 	mov	r4,r16
   275c0:	000b883a 	mov	r5,zero
   275c4:	0025ae80 	call	25ae8 <memset>
   275c8:	8005883a 	mov	r2,r16
   275cc:	dfc00117 	ldw	ra,4(sp)
   275d0:	dc000017 	ldw	r16,0(sp)
   275d4:	dec00204 	addi	sp,sp,8
   275d8:	f800283a 	ret
   275dc:	80800204 	addi	r2,r16,8
   275e0:	003fe506 	br	27578 <_calloc_r+0x50>
   275e4:	80000415 	stw	zero,16(r16)
   275e8:	80000515 	stw	zero,20(r16)
   275ec:	80800604 	addi	r2,r16,24
   275f0:	003fe106 	br	27578 <_calloc_r+0x50>

000275f4 <_close_r>:
   275f4:	defffd04 	addi	sp,sp,-12
   275f8:	dc400115 	stw	r17,4(sp)
   275fc:	dc000015 	stw	r16,0(sp)
   27600:	2023883a 	mov	r17,r4
   27604:	040000f4 	movhi	r16,3
   27608:	843fe304 	addi	r16,r16,-116
   2760c:	2809883a 	mov	r4,r5
   27610:	dfc00215 	stw	ra,8(sp)
   27614:	80000015 	stw	zero,0(r16)
   27618:	0029ae80 	call	29ae8 <close>
   2761c:	00ffffc4 	movi	r3,-1
   27620:	10c00526 	beq	r2,r3,27638 <_close_r+0x44>
   27624:	dfc00217 	ldw	ra,8(sp)
   27628:	dc400117 	ldw	r17,4(sp)
   2762c:	dc000017 	ldw	r16,0(sp)
   27630:	dec00304 	addi	sp,sp,12
   27634:	f800283a 	ret
   27638:	80c00017 	ldw	r3,0(r16)
   2763c:	183ff926 	beq	r3,zero,27624 <_close_r+0x30>
   27640:	88c00015 	stw	r3,0(r17)
   27644:	dfc00217 	ldw	ra,8(sp)
   27648:	dc400117 	ldw	r17,4(sp)
   2764c:	dc000017 	ldw	r16,0(sp)
   27650:	dec00304 	addi	sp,sp,12
   27654:	f800283a 	ret

00027658 <_fclose_r>:
   27658:	defffc04 	addi	sp,sp,-16
   2765c:	dc400115 	stw	r17,4(sp)
   27660:	dc000015 	stw	r16,0(sp)
   27664:	dfc00315 	stw	ra,12(sp)
   27668:	dc800215 	stw	r18,8(sp)
   2766c:	2821883a 	mov	r16,r5
   27670:	2023883a 	mov	r17,r4
   27674:	28003426 	beq	r5,zero,27748 <_fclose_r+0xf0>
   27678:	002428c0 	call	2428c <__sfp_lock_acquire>
   2767c:	88000226 	beq	r17,zero,27688 <_fclose_r+0x30>
   27680:	88800e17 	ldw	r2,56(r17)
   27684:	10003826 	beq	r2,zero,27768 <_fclose_r+0x110>
   27688:	8080030f 	ldh	r2,12(r16)
   2768c:	10002526 	beq	r2,zero,27724 <_fclose_r+0xcc>
   27690:	8809883a 	mov	r4,r17
   27694:	800b883a 	mov	r5,r16
   27698:	0023dc80 	call	23dc8 <_fflush_r>
   2769c:	1025883a 	mov	r18,r2
   276a0:	80800b17 	ldw	r2,44(r16)
   276a4:	10000426 	beq	r2,zero,276b8 <_fclose_r+0x60>
   276a8:	81400717 	ldw	r5,28(r16)
   276ac:	8809883a 	mov	r4,r17
   276b0:	103ee83a 	callr	r2
   276b4:	10003516 	blt	r2,zero,2778c <_fclose_r+0x134>
   276b8:	8080030b 	ldhu	r2,12(r16)
   276bc:	1080200c 	andi	r2,r2,128
   276c0:	10bfffcc 	andi	r2,r2,65535
   276c4:	10a0001c 	xori	r2,r2,32768
   276c8:	10a00004 	addi	r2,r2,-32768
   276cc:	10002b1e 	bne	r2,zero,2777c <_fclose_r+0x124>
   276d0:	81400c17 	ldw	r5,48(r16)
   276d4:	28000526 	beq	r5,zero,276ec <_fclose_r+0x94>
   276d8:	80801004 	addi	r2,r16,64
   276dc:	28800226 	beq	r5,r2,276e8 <_fclose_r+0x90>
   276e0:	8809883a 	mov	r4,r17
   276e4:	00244080 	call	24408 <_free_r>
   276e8:	80000c15 	stw	zero,48(r16)
   276ec:	81401117 	ldw	r5,68(r16)
   276f0:	28000326 	beq	r5,zero,27700 <_fclose_r+0xa8>
   276f4:	8809883a 	mov	r4,r17
   276f8:	00244080 	call	24408 <_free_r>
   276fc:	80001115 	stw	zero,68(r16)
   27700:	8000030d 	sth	zero,12(r16)
   27704:	00242900 	call	24290 <__sfp_lock_release>
   27708:	9005883a 	mov	r2,r18
   2770c:	dfc00317 	ldw	ra,12(sp)
   27710:	dc800217 	ldw	r18,8(sp)
   27714:	dc400117 	ldw	r17,4(sp)
   27718:	dc000017 	ldw	r16,0(sp)
   2771c:	dec00404 	addi	sp,sp,16
   27720:	f800283a 	ret
   27724:	00242900 	call	24290 <__sfp_lock_release>
   27728:	0025883a 	mov	r18,zero
   2772c:	9005883a 	mov	r2,r18
   27730:	dfc00317 	ldw	ra,12(sp)
   27734:	dc800217 	ldw	r18,8(sp)
   27738:	dc400117 	ldw	r17,4(sp)
   2773c:	dc000017 	ldw	r16,0(sp)
   27740:	dec00404 	addi	sp,sp,16
   27744:	f800283a 	ret
   27748:	0025883a 	mov	r18,zero
   2774c:	9005883a 	mov	r2,r18
   27750:	dfc00317 	ldw	ra,12(sp)
   27754:	dc800217 	ldw	r18,8(sp)
   27758:	dc400117 	ldw	r17,4(sp)
   2775c:	dc000017 	ldw	r16,0(sp)
   27760:	dec00404 	addi	sp,sp,16
   27764:	f800283a 	ret
   27768:	8809883a 	mov	r4,r17
   2776c:	00240840 	call	24084 <__sinit>
   27770:	8080030f 	ldh	r2,12(r16)
   27774:	103fc61e 	bne	r2,zero,27690 <_fclose_r+0x38>
   27778:	003fea06 	br	27724 <_fclose_r+0xcc>
   2777c:	81400417 	ldw	r5,16(r16)
   27780:	8809883a 	mov	r4,r17
   27784:	00244080 	call	24408 <_free_r>
   27788:	003fd106 	br	276d0 <_fclose_r+0x78>
   2778c:	04bfffc4 	movi	r18,-1
   27790:	003fc906 	br	276b8 <_fclose_r+0x60>

00027794 <fclose>:
   27794:	008000f4 	movhi	r2,3
   27798:	10b93904 	addi	r2,r2,-6940
   2779c:	200b883a 	mov	r5,r4
   277a0:	11000017 	ldw	r4,0(r2)
   277a4:	00276581 	jmpi	27658 <_fclose_r>

000277a8 <_fstat_r>:
   277a8:	defffd04 	addi	sp,sp,-12
   277ac:	dc400115 	stw	r17,4(sp)
   277b0:	dc000015 	stw	r16,0(sp)
   277b4:	2023883a 	mov	r17,r4
   277b8:	040000f4 	movhi	r16,3
   277bc:	843fe304 	addi	r16,r16,-116
   277c0:	2809883a 	mov	r4,r5
   277c4:	300b883a 	mov	r5,r6
   277c8:	dfc00215 	stw	ra,8(sp)
   277cc:	80000015 	stw	zero,0(r16)
   277d0:	0029c300 	call	29c30 <fstat>
   277d4:	00ffffc4 	movi	r3,-1
   277d8:	10c00526 	beq	r2,r3,277f0 <_fstat_r+0x48>
   277dc:	dfc00217 	ldw	ra,8(sp)
   277e0:	dc400117 	ldw	r17,4(sp)
   277e4:	dc000017 	ldw	r16,0(sp)
   277e8:	dec00304 	addi	sp,sp,12
   277ec:	f800283a 	ret
   277f0:	80c00017 	ldw	r3,0(r16)
   277f4:	183ff926 	beq	r3,zero,277dc <_fstat_r+0x34>
   277f8:	88c00015 	stw	r3,0(r17)
   277fc:	dfc00217 	ldw	ra,8(sp)
   27800:	dc400117 	ldw	r17,4(sp)
   27804:	dc000017 	ldw	r16,0(sp)
   27808:	dec00304 	addi	sp,sp,12
   2780c:	f800283a 	ret

00027810 <_isatty_r>:
   27810:	defffd04 	addi	sp,sp,-12
   27814:	dc400115 	stw	r17,4(sp)
   27818:	dc000015 	stw	r16,0(sp)
   2781c:	2023883a 	mov	r17,r4
   27820:	040000f4 	movhi	r16,3
   27824:	843fe304 	addi	r16,r16,-116
   27828:	2809883a 	mov	r4,r5
   2782c:	dfc00215 	stw	ra,8(sp)
   27830:	80000015 	stw	zero,0(r16)
   27834:	0029d300 	call	29d30 <isatty>
   27838:	00ffffc4 	movi	r3,-1
   2783c:	10c00526 	beq	r2,r3,27854 <_isatty_r+0x44>
   27840:	dfc00217 	ldw	ra,8(sp)
   27844:	dc400117 	ldw	r17,4(sp)
   27848:	dc000017 	ldw	r16,0(sp)
   2784c:	dec00304 	addi	sp,sp,12
   27850:	f800283a 	ret
   27854:	80c00017 	ldw	r3,0(r16)
   27858:	183ff926 	beq	r3,zero,27840 <_isatty_r+0x30>
   2785c:	88c00015 	stw	r3,0(r17)
   27860:	dfc00217 	ldw	ra,8(sp)
   27864:	dc400117 	ldw	r17,4(sp)
   27868:	dc000017 	ldw	r16,0(sp)
   2786c:	dec00304 	addi	sp,sp,12
   27870:	f800283a 	ret

00027874 <_lseek_r>:
   27874:	defffd04 	addi	sp,sp,-12
   27878:	dc400115 	stw	r17,4(sp)
   2787c:	dc000015 	stw	r16,0(sp)
   27880:	2023883a 	mov	r17,r4
   27884:	040000f4 	movhi	r16,3
   27888:	843fe304 	addi	r16,r16,-116
   2788c:	2809883a 	mov	r4,r5
   27890:	300b883a 	mov	r5,r6
   27894:	380d883a 	mov	r6,r7
   27898:	dfc00215 	stw	ra,8(sp)
   2789c:	80000015 	stw	zero,0(r16)
   278a0:	0029f100 	call	29f10 <lseek>
   278a4:	00ffffc4 	movi	r3,-1
   278a8:	10c00526 	beq	r2,r3,278c0 <_lseek_r+0x4c>
   278ac:	dfc00217 	ldw	ra,8(sp)
   278b0:	dc400117 	ldw	r17,4(sp)
   278b4:	dc000017 	ldw	r16,0(sp)
   278b8:	dec00304 	addi	sp,sp,12
   278bc:	f800283a 	ret
   278c0:	80c00017 	ldw	r3,0(r16)
   278c4:	183ff926 	beq	r3,zero,278ac <_lseek_r+0x38>
   278c8:	88c00015 	stw	r3,0(r17)
   278cc:	dfc00217 	ldw	ra,8(sp)
   278d0:	dc400117 	ldw	r17,4(sp)
   278d4:	dc000017 	ldw	r16,0(sp)
   278d8:	dec00304 	addi	sp,sp,12
   278dc:	f800283a 	ret

000278e0 <_read_r>:
   278e0:	defffd04 	addi	sp,sp,-12
   278e4:	dc400115 	stw	r17,4(sp)
   278e8:	dc000015 	stw	r16,0(sp)
   278ec:	2023883a 	mov	r17,r4
   278f0:	040000f4 	movhi	r16,3
   278f4:	843fe304 	addi	r16,r16,-116
   278f8:	2809883a 	mov	r4,r5
   278fc:	300b883a 	mov	r5,r6
   27900:	380d883a 	mov	r6,r7
   27904:	dfc00215 	stw	ra,8(sp)
   27908:	80000015 	stw	zero,0(r16)
   2790c:	002a0ec0 	call	2a0ec <read>
   27910:	00ffffc4 	movi	r3,-1
   27914:	10c00526 	beq	r2,r3,2792c <_read_r+0x4c>
   27918:	dfc00217 	ldw	ra,8(sp)
   2791c:	dc400117 	ldw	r17,4(sp)
   27920:	dc000017 	ldw	r16,0(sp)
   27924:	dec00304 	addi	sp,sp,12
   27928:	f800283a 	ret
   2792c:	80c00017 	ldw	r3,0(r16)
   27930:	183ff926 	beq	r3,zero,27918 <_read_r+0x38>
   27934:	88c00015 	stw	r3,0(r17)
   27938:	dfc00217 	ldw	ra,8(sp)
   2793c:	dc400117 	ldw	r17,4(sp)
   27940:	dc000017 	ldw	r16,0(sp)
   27944:	dec00304 	addi	sp,sp,12
   27948:	f800283a 	ret

0002794c <__udivdi3>:
   2794c:	defff504 	addi	sp,sp,-44
   27950:	dd000515 	stw	r20,20(sp)
   27954:	dcc00415 	stw	r19,16(sp)
   27958:	dc800315 	stw	r18,12(sp)
   2795c:	dc400215 	stw	r17,8(sp)
   27960:	dc000115 	stw	r16,4(sp)
   27964:	dfc00a15 	stw	ra,40(sp)
   27968:	df000915 	stw	fp,36(sp)
   2796c:	ddc00815 	stw	r23,32(sp)
   27970:	dd800715 	stw	r22,28(sp)
   27974:	dd400615 	stw	r21,24(sp)
   27978:	2025883a 	mov	r18,r4
   2797c:	2823883a 	mov	r17,r5
   27980:	3021883a 	mov	r16,r6
   27984:	2027883a 	mov	r19,r4
   27988:	2829883a 	mov	r20,r5
   2798c:	3800451e 	bne	r7,zero,27aa4 <__udivdi3+0x158>
   27990:	2980652e 	bgeu	r5,r6,27b28 <__udivdi3+0x1dc>
   27994:	00bfffd4 	movui	r2,65535
   27998:	1180b436 	bltu	r2,r6,27c6c <__udivdi3+0x320>
   2799c:	00803fc4 	movi	r2,255
   279a0:	11816636 	bltu	r2,r6,27f3c <__udivdi3+0x5f0>
   279a4:	0005883a 	mov	r2,zero
   279a8:	0007883a 	mov	r3,zero
   279ac:	3084d83a 	srl	r2,r6,r2
   279b0:	010000f4 	movhi	r4,3
   279b4:	21326404 	addi	r4,r4,-13936
   279b8:	2085883a 	add	r2,r4,r2
   279bc:	10800003 	ldbu	r2,0(r2)
   279c0:	10c7883a 	add	r3,r2,r3
   279c4:	00800804 	movi	r2,32
   279c8:	10c5c83a 	sub	r2,r2,r3
   279cc:	10000526 	beq	r2,zero,279e4 <__udivdi3+0x98>
   279d0:	88a2983a 	sll	r17,r17,r2
   279d4:	90c6d83a 	srl	r3,r18,r3
   279d8:	30a0983a 	sll	r16,r6,r2
   279dc:	90a6983a 	sll	r19,r18,r2
   279e0:	88e8b03a 	or	r20,r17,r3
   279e4:	8022d43a 	srli	r17,r16,16
   279e8:	a009883a 	mov	r4,r20
   279ec:	857fffcc 	andi	r21,r16,65535
   279f0:	880b883a 	mov	r5,r17
   279f4:	002942c0 	call	2942c <__umodsi3>
   279f8:	a009883a 	mov	r4,r20
   279fc:	880b883a 	mov	r5,r17
   27a00:	102d883a 	mov	r22,r2
   27a04:	00294240 	call	29424 <__udivsi3>
   27a08:	1009883a 	mov	r4,r2
   27a0c:	a80b883a 	mov	r5,r21
   27a10:	1025883a 	mov	r18,r2
   27a14:	00294340 	call	29434 <__mulsi3>
   27a18:	1009883a 	mov	r4,r2
   27a1c:	b006943a 	slli	r3,r22,16
   27a20:	9804d43a 	srli	r2,r19,16
   27a24:	1886b03a 	or	r3,r3,r2
   27a28:	1900052e 	bgeu	r3,r4,27a40 <__udivdi3+0xf4>
   27a2c:	1c07883a 	add	r3,r3,r16
   27a30:	90bfffc4 	addi	r2,r18,-1
   27a34:	1c000136 	bltu	r3,r16,27a3c <__udivdi3+0xf0>
   27a38:	19015536 	bltu	r3,r4,27f90 <__udivdi3+0x644>
   27a3c:	1025883a 	mov	r18,r2
   27a40:	1929c83a 	sub	r20,r3,r4
   27a44:	880b883a 	mov	r5,r17
   27a48:	a009883a 	mov	r4,r20
   27a4c:	002942c0 	call	2942c <__umodsi3>
   27a50:	102d883a 	mov	r22,r2
   27a54:	880b883a 	mov	r5,r17
   27a58:	a009883a 	mov	r4,r20
   27a5c:	b02c943a 	slli	r22,r22,16
   27a60:	00294240 	call	29424 <__udivsi3>
   27a64:	1009883a 	mov	r4,r2
   27a68:	a80b883a 	mov	r5,r21
   27a6c:	9cffffcc 	andi	r19,r19,65535
   27a70:	1023883a 	mov	r17,r2
   27a74:	b4e6b03a 	or	r19,r22,r19
   27a78:	00294340 	call	29434 <__mulsi3>
   27a7c:	9880052e 	bgeu	r19,r2,27a94 <__udivdi3+0x148>
   27a80:	9c27883a 	add	r19,r19,r16
   27a84:	88ffffc4 	addi	r3,r17,-1
   27a88:	9c011436 	bltu	r19,r16,27edc <__udivdi3+0x590>
   27a8c:	9881132e 	bgeu	r19,r2,27edc <__udivdi3+0x590>
   27a90:	8c7fff84 	addi	r17,r17,-2
   27a94:	9004943a 	slli	r2,r18,16
   27a98:	0007883a 	mov	r3,zero
   27a9c:	8884b03a 	or	r2,r17,r2
   27aa0:	00001506 	br	27af8 <__udivdi3+0x1ac>
   27aa4:	29c06a36 	bltu	r5,r7,27c50 <__udivdi3+0x304>
   27aa8:	00bfffd4 	movui	r2,65535
   27aac:	11c06a2e 	bgeu	r2,r7,27c58 <__udivdi3+0x30c>
   27ab0:	00804034 	movhi	r2,256
   27ab4:	10bfffc4 	addi	r2,r2,-1
   27ab8:	11c11436 	bltu	r2,r7,27f0c <__udivdi3+0x5c0>
   27abc:	00c00404 	movi	r3,16
   27ac0:	180b883a 	mov	r5,r3
   27ac4:	38c6d83a 	srl	r3,r7,r3
   27ac8:	010000f4 	movhi	r4,3
   27acc:	21326404 	addi	r4,r4,-13936
   27ad0:	04000804 	movi	r16,32
   27ad4:	20c7883a 	add	r3,r4,r3
   27ad8:	18800003 	ldbu	r2,0(r3)
   27adc:	1145883a 	add	r2,r2,r5
   27ae0:	80a1c83a 	sub	r16,r16,r2
   27ae4:	80006e1e 	bne	r16,zero,27ca0 <__udivdi3+0x354>
   27ae8:	0007883a 	mov	r3,zero
   27aec:	3c406a36 	bltu	r7,r17,27c98 <__udivdi3+0x34c>
   27af0:	9180692e 	bgeu	r18,r6,27c98 <__udivdi3+0x34c>
   27af4:	0005883a 	mov	r2,zero
   27af8:	dfc00a17 	ldw	ra,40(sp)
   27afc:	df000917 	ldw	fp,36(sp)
   27b00:	ddc00817 	ldw	r23,32(sp)
   27b04:	dd800717 	ldw	r22,28(sp)
   27b08:	dd400617 	ldw	r21,24(sp)
   27b0c:	dd000517 	ldw	r20,20(sp)
   27b10:	dcc00417 	ldw	r19,16(sp)
   27b14:	dc800317 	ldw	r18,12(sp)
   27b18:	dc400217 	ldw	r17,8(sp)
   27b1c:	dc000117 	ldw	r16,4(sp)
   27b20:	dec00b04 	addi	sp,sp,44
   27b24:	f800283a 	ret
   27b28:	3000041e 	bne	r6,zero,27b3c <__udivdi3+0x1f0>
   27b2c:	01000044 	movi	r4,1
   27b30:	000b883a 	mov	r5,zero
   27b34:	00294240 	call	29424 <__udivsi3>
   27b38:	1021883a 	mov	r16,r2
   27b3c:	00bfffd4 	movui	r2,65535
   27b40:	1400502e 	bgeu	r2,r16,27c84 <__udivdi3+0x338>
   27b44:	00804034 	movhi	r2,256
   27b48:	10bfffc4 	addi	r2,r2,-1
   27b4c:	1400f536 	bltu	r2,r16,27f24 <__udivdi3+0x5d8>
   27b50:	00800404 	movi	r2,16
   27b54:	1007883a 	mov	r3,r2
   27b58:	8084d83a 	srl	r2,r16,r2
   27b5c:	010000f4 	movhi	r4,3
   27b60:	21326404 	addi	r4,r4,-13936
   27b64:	2085883a 	add	r2,r4,r2
   27b68:	10800003 	ldbu	r2,0(r2)
   27b6c:	10c7883a 	add	r3,r2,r3
   27b70:	00800804 	movi	r2,32
   27b74:	10c5c83a 	sub	r2,r2,r3
   27b78:	1000a01e 	bne	r2,zero,27dfc <__udivdi3+0x4b0>
   27b7c:	8028d43a 	srli	r20,r16,16
   27b80:	8c23c83a 	sub	r17,r17,r16
   27b84:	857fffcc 	andi	r21,r16,65535
   27b88:	00c00044 	movi	r3,1
   27b8c:	8809883a 	mov	r4,r17
   27b90:	a00b883a 	mov	r5,r20
   27b94:	d8c00015 	stw	r3,0(sp)
   27b98:	002942c0 	call	2942c <__umodsi3>
   27b9c:	8809883a 	mov	r4,r17
   27ba0:	a00b883a 	mov	r5,r20
   27ba4:	102d883a 	mov	r22,r2
   27ba8:	00294240 	call	29424 <__udivsi3>
   27bac:	1009883a 	mov	r4,r2
   27bb0:	a80b883a 	mov	r5,r21
   27bb4:	1025883a 	mov	r18,r2
   27bb8:	00294340 	call	29434 <__mulsi3>
   27bbc:	1009883a 	mov	r4,r2
   27bc0:	b00c943a 	slli	r6,r22,16
   27bc4:	9804d43a 	srli	r2,r19,16
   27bc8:	d8c00017 	ldw	r3,0(sp)
   27bcc:	308cb03a 	or	r6,r6,r2
   27bd0:	3100052e 	bgeu	r6,r4,27be8 <__udivdi3+0x29c>
   27bd4:	340d883a 	add	r6,r6,r16
   27bd8:	90bfffc4 	addi	r2,r18,-1
   27bdc:	34000136 	bltu	r6,r16,27be4 <__udivdi3+0x298>
   27be0:	3100e836 	bltu	r6,r4,27f84 <__udivdi3+0x638>
   27be4:	1025883a 	mov	r18,r2
   27be8:	3123c83a 	sub	r17,r6,r4
   27bec:	8809883a 	mov	r4,r17
   27bf0:	a00b883a 	mov	r5,r20
   27bf4:	d8c00015 	stw	r3,0(sp)
   27bf8:	002942c0 	call	2942c <__umodsi3>
   27bfc:	102d883a 	mov	r22,r2
   27c00:	8809883a 	mov	r4,r17
   27c04:	a00b883a 	mov	r5,r20
   27c08:	b02c943a 	slli	r22,r22,16
   27c0c:	00294240 	call	29424 <__udivsi3>
   27c10:	1009883a 	mov	r4,r2
   27c14:	a80b883a 	mov	r5,r21
   27c18:	9cffffcc 	andi	r19,r19,65535
   27c1c:	1023883a 	mov	r17,r2
   27c20:	b4e6b03a 	or	r19,r22,r19
   27c24:	00294340 	call	29434 <__mulsi3>
   27c28:	d8c00017 	ldw	r3,0(sp)
   27c2c:	9880052e 	bgeu	r19,r2,27c44 <__udivdi3+0x2f8>
   27c30:	9c27883a 	add	r19,r19,r16
   27c34:	893fffc4 	addi	r4,r17,-1
   27c38:	9c00aa36 	bltu	r19,r16,27ee4 <__udivdi3+0x598>
   27c3c:	9880a92e 	bgeu	r19,r2,27ee4 <__udivdi3+0x598>
   27c40:	8c7fff84 	addi	r17,r17,-2
   27c44:	9004943a 	slli	r2,r18,16
   27c48:	8884b03a 	or	r2,r17,r2
   27c4c:	003faa06 	br	27af8 <__udivdi3+0x1ac>
   27c50:	0007883a 	mov	r3,zero
   27c54:	003fa706 	br	27af4 <__udivdi3+0x1a8>
   27c58:	00803fc4 	movi	r2,255
   27c5c:	11c0ae36 	bltu	r2,r7,27f18 <__udivdi3+0x5cc>
   27c60:	0007883a 	mov	r3,zero
   27c64:	000b883a 	mov	r5,zero
   27c68:	003f9606 	br	27ac4 <__udivdi3+0x178>
   27c6c:	00804034 	movhi	r2,256
   27c70:	10bfffc4 	addi	r2,r2,-1
   27c74:	1180ae36 	bltu	r2,r6,27f30 <__udivdi3+0x5e4>
   27c78:	00800404 	movi	r2,16
   27c7c:	1007883a 	mov	r3,r2
   27c80:	003f4a06 	br	279ac <__udivdi3+0x60>
   27c84:	00803fc4 	movi	r2,255
   27c88:	1400af36 	bltu	r2,r16,27f48 <__udivdi3+0x5fc>
   27c8c:	0005883a 	mov	r2,zero
   27c90:	0007883a 	mov	r3,zero
   27c94:	003fb006 	br	27b58 <__udivdi3+0x20c>
   27c98:	00800044 	movi	r2,1
   27c9c:	003f9606 	br	27af8 <__udivdi3+0x1ac>
   27ca0:	3c0e983a 	sll	r7,r7,r16
   27ca4:	3086d83a 	srl	r3,r6,r2
   27ca8:	88aed83a 	srl	r23,r17,r2
   27cac:	9084d83a 	srl	r2,r18,r2
   27cb0:	38e6b03a 	or	r19,r7,r3
   27cb4:	9828d43a 	srli	r20,r19,16
   27cb8:	8c22983a 	sll	r17,r17,r16
   27cbc:	b809883a 	mov	r4,r23
   27cc0:	a00b883a 	mov	r5,r20
   27cc4:	342a983a 	sll	r21,r6,r16
   27cc8:	88a2b03a 	or	r17,r17,r2
   27ccc:	002942c0 	call	2942c <__umodsi3>
   27cd0:	b809883a 	mov	r4,r23
   27cd4:	a00b883a 	mov	r5,r20
   27cd8:	1039883a 	mov	fp,r2
   27cdc:	9dbfffcc 	andi	r22,r19,65535
   27ce0:	00294240 	call	29424 <__udivsi3>
   27ce4:	1009883a 	mov	r4,r2
   27ce8:	b00b883a 	mov	r5,r22
   27cec:	102f883a 	mov	r23,r2
   27cf0:	00294340 	call	29434 <__mulsi3>
   27cf4:	1009883a 	mov	r4,r2
   27cf8:	e00e943a 	slli	r7,fp,16
   27cfc:	8804d43a 	srli	r2,r17,16
   27d00:	388eb03a 	or	r7,r7,r2
   27d04:	3900042e 	bgeu	r7,r4,27d18 <__udivdi3+0x3cc>
   27d08:	3ccf883a 	add	r7,r7,r19
   27d0c:	b8bfffc4 	addi	r2,r23,-1
   27d10:	3cc0942e 	bgeu	r7,r19,27f64 <__udivdi3+0x618>
   27d14:	102f883a 	mov	r23,r2
   27d18:	3939c83a 	sub	fp,r7,r4
   27d1c:	a00b883a 	mov	r5,r20
   27d20:	e009883a 	mov	r4,fp
   27d24:	002942c0 	call	2942c <__umodsi3>
   27d28:	a00b883a 	mov	r5,r20
   27d2c:	e009883a 	mov	r4,fp
   27d30:	d8800015 	stw	r2,0(sp)
   27d34:	00294240 	call	29424 <__udivsi3>
   27d38:	1009883a 	mov	r4,r2
   27d3c:	b00b883a 	mov	r5,r22
   27d40:	1029883a 	mov	r20,r2
   27d44:	00294340 	call	29434 <__mulsi3>
   27d48:	d8c00017 	ldw	r3,0(sp)
   27d4c:	8c7fffcc 	andi	r17,r17,65535
   27d50:	1806943a 	slli	r3,r3,16
   27d54:	1c46b03a 	or	r3,r3,r17
   27d58:	1880042e 	bgeu	r3,r2,27d6c <__udivdi3+0x420>
   27d5c:	1cc7883a 	add	r3,r3,r19
   27d60:	a13fffc4 	addi	r4,r20,-1
   27d64:	1cc07b2e 	bgeu	r3,r19,27f54 <__udivdi3+0x608>
   27d68:	2029883a 	mov	r20,r4
   27d6c:	b82e943a 	slli	r23,r23,16
   27d70:	a822d43a 	srli	r17,r21,16
   27d74:	ad7fffcc 	andi	r21,r21,65535
   27d78:	a5e8b03a 	or	r20,r20,r23
   27d7c:	a5bfffcc 	andi	r22,r20,65535
   27d80:	b009883a 	mov	r4,r22
   27d84:	a80b883a 	mov	r5,r21
   27d88:	18afc83a 	sub	r23,r3,r2
   27d8c:	a026d43a 	srli	r19,r20,16
   27d90:	00294340 	call	29434 <__mulsi3>
   27d94:	b009883a 	mov	r4,r22
   27d98:	880b883a 	mov	r5,r17
   27d9c:	1039883a 	mov	fp,r2
   27da0:	00294340 	call	29434 <__mulsi3>
   27da4:	a80b883a 	mov	r5,r21
   27da8:	9809883a 	mov	r4,r19
   27dac:	102d883a 	mov	r22,r2
   27db0:	00294340 	call	29434 <__mulsi3>
   27db4:	9809883a 	mov	r4,r19
   27db8:	880b883a 	mov	r5,r17
   27dbc:	102b883a 	mov	r21,r2
   27dc0:	00294340 	call	29434 <__mulsi3>
   27dc4:	100b883a 	mov	r5,r2
   27dc8:	e004d43a 	srli	r2,fp,16
   27dcc:	ad89883a 	add	r4,r21,r22
   27dd0:	2089883a 	add	r4,r4,r2
   27dd4:	2540022e 	bgeu	r4,r21,27de0 <__udivdi3+0x494>
   27dd8:	00800074 	movhi	r2,1
   27ddc:	288b883a 	add	r5,r5,r2
   27de0:	2004d43a 	srli	r2,r4,16
   27de4:	288b883a 	add	r5,r5,r2
   27de8:	b9404536 	bltu	r23,r5,27f00 <__udivdi3+0x5b4>
   27dec:	b9403f26 	beq	r23,r5,27eec <__udivdi3+0x5a0>
   27df0:	a005883a 	mov	r2,r20
   27df4:	0007883a 	mov	r3,zero
   27df8:	003f3f06 	br	27af8 <__udivdi3+0x1ac>
   27dfc:	80a0983a 	sll	r16,r16,r2
   27e00:	88eed83a 	srl	r23,r17,r3
   27e04:	90c6d83a 	srl	r3,r18,r3
   27e08:	8028d43a 	srli	r20,r16,16
   27e0c:	88a2983a 	sll	r17,r17,r2
   27e10:	b809883a 	mov	r4,r23
   27e14:	a00b883a 	mov	r5,r20
   27e18:	88ecb03a 	or	r22,r17,r3
   27e1c:	90a6983a 	sll	r19,r18,r2
   27e20:	002942c0 	call	2942c <__umodsi3>
   27e24:	b809883a 	mov	r4,r23
   27e28:	a00b883a 	mov	r5,r20
   27e2c:	1023883a 	mov	r17,r2
   27e30:	857fffcc 	andi	r21,r16,65535
   27e34:	00294240 	call	29424 <__udivsi3>
   27e38:	1009883a 	mov	r4,r2
   27e3c:	a80b883a 	mov	r5,r21
   27e40:	102f883a 	mov	r23,r2
   27e44:	00294340 	call	29434 <__mulsi3>
   27e48:	1009883a 	mov	r4,r2
   27e4c:	880a943a 	slli	r5,r17,16
   27e50:	b004d43a 	srli	r2,r22,16
   27e54:	288ab03a 	or	r5,r5,r2
   27e58:	2900062e 	bgeu	r5,r4,27e74 <__udivdi3+0x528>
   27e5c:	2c0b883a 	add	r5,r5,r16
   27e60:	b8bfffc4 	addi	r2,r23,-1
   27e64:	2c004536 	bltu	r5,r16,27f7c <__udivdi3+0x630>
   27e68:	2900442e 	bgeu	r5,r4,27f7c <__udivdi3+0x630>
   27e6c:	bdffff84 	addi	r23,r23,-2
   27e70:	2c0b883a 	add	r5,r5,r16
   27e74:	2925c83a 	sub	r18,r5,r4
   27e78:	9009883a 	mov	r4,r18
   27e7c:	a00b883a 	mov	r5,r20
   27e80:	002942c0 	call	2942c <__umodsi3>
   27e84:	1023883a 	mov	r17,r2
   27e88:	9009883a 	mov	r4,r18
   27e8c:	a00b883a 	mov	r5,r20
   27e90:	8822943a 	slli	r17,r17,16
   27e94:	00294240 	call	29424 <__udivsi3>
   27e98:	1009883a 	mov	r4,r2
   27e9c:	a80b883a 	mov	r5,r21
   27ea0:	b5bfffcc 	andi	r22,r22,65535
   27ea4:	1025883a 	mov	r18,r2
   27ea8:	8da2b03a 	or	r17,r17,r22
   27eac:	00294340 	call	29434 <__mulsi3>
   27eb0:	8880062e 	bgeu	r17,r2,27ecc <__udivdi3+0x580>
   27eb4:	8c23883a 	add	r17,r17,r16
   27eb8:	90ffffc4 	addi	r3,r18,-1
   27ebc:	8c002d36 	bltu	r17,r16,27f74 <__udivdi3+0x628>
   27ec0:	88802c2e 	bgeu	r17,r2,27f74 <__udivdi3+0x628>
   27ec4:	94bfff84 	addi	r18,r18,-2
   27ec8:	8c23883a 	add	r17,r17,r16
   27ecc:	b806943a 	slli	r3,r23,16
   27ed0:	88a3c83a 	sub	r17,r17,r2
   27ed4:	90c6b03a 	or	r3,r18,r3
   27ed8:	003f2c06 	br	27b8c <__udivdi3+0x240>
   27edc:	1823883a 	mov	r17,r3
   27ee0:	003eec06 	br	27a94 <__udivdi3+0x148>
   27ee4:	2023883a 	mov	r17,r4
   27ee8:	003f5606 	br	27c44 <__udivdi3+0x2f8>
   27eec:	2008943a 	slli	r4,r4,16
   27ef0:	9420983a 	sll	r16,r18,r16
   27ef4:	e73fffcc 	andi	fp,fp,65535
   27ef8:	2709883a 	add	r4,r4,fp
   27efc:	813fbc2e 	bgeu	r16,r4,27df0 <__udivdi3+0x4a4>
   27f00:	a0bfffc4 	addi	r2,r20,-1
   27f04:	0007883a 	mov	r3,zero
   27f08:	003efb06 	br	27af8 <__udivdi3+0x1ac>
   27f0c:	00c00604 	movi	r3,24
   27f10:	180b883a 	mov	r5,r3
   27f14:	003eeb06 	br	27ac4 <__udivdi3+0x178>
   27f18:	00c00204 	movi	r3,8
   27f1c:	180b883a 	mov	r5,r3
   27f20:	003ee806 	br	27ac4 <__udivdi3+0x178>
   27f24:	00800604 	movi	r2,24
   27f28:	1007883a 	mov	r3,r2
   27f2c:	003f0a06 	br	27b58 <__udivdi3+0x20c>
   27f30:	00800604 	movi	r2,24
   27f34:	1007883a 	mov	r3,r2
   27f38:	003e9c06 	br	279ac <__udivdi3+0x60>
   27f3c:	00800204 	movi	r2,8
   27f40:	1007883a 	mov	r3,r2
   27f44:	003e9906 	br	279ac <__udivdi3+0x60>
   27f48:	00800204 	movi	r2,8
   27f4c:	1007883a 	mov	r3,r2
   27f50:	003f0106 	br	27b58 <__udivdi3+0x20c>
   27f54:	18bf842e 	bgeu	r3,r2,27d68 <__udivdi3+0x41c>
   27f58:	a53fff84 	addi	r20,r20,-2
   27f5c:	1cc7883a 	add	r3,r3,r19
   27f60:	003f8206 	br	27d6c <__udivdi3+0x420>
   27f64:	393f6b2e 	bgeu	r7,r4,27d14 <__udivdi3+0x3c8>
   27f68:	bdffff84 	addi	r23,r23,-2
   27f6c:	3ccf883a 	add	r7,r7,r19
   27f70:	003f6906 	br	27d18 <__udivdi3+0x3cc>
   27f74:	1825883a 	mov	r18,r3
   27f78:	003fd406 	br	27ecc <__udivdi3+0x580>
   27f7c:	102f883a 	mov	r23,r2
   27f80:	003fbc06 	br	27e74 <__udivdi3+0x528>
   27f84:	94bfff84 	addi	r18,r18,-2
   27f88:	340d883a 	add	r6,r6,r16
   27f8c:	003f1606 	br	27be8 <__udivdi3+0x29c>
   27f90:	94bfff84 	addi	r18,r18,-2
   27f94:	1c07883a 	add	r3,r3,r16
   27f98:	003ea906 	br	27a40 <__udivdi3+0xf4>

00027f9c <__umoddi3>:
   27f9c:	defff304 	addi	sp,sp,-52
   27fa0:	dd000715 	stw	r20,28(sp)
   27fa4:	dcc00615 	stw	r19,24(sp)
   27fa8:	dc800515 	stw	r18,20(sp)
   27fac:	dc400415 	stw	r17,16(sp)
   27fb0:	dc000315 	stw	r16,12(sp)
   27fb4:	dfc00c15 	stw	ra,48(sp)
   27fb8:	df000b15 	stw	fp,44(sp)
   27fbc:	ddc00a15 	stw	r23,40(sp)
   27fc0:	dd800915 	stw	r22,36(sp)
   27fc4:	dd400815 	stw	r21,32(sp)
   27fc8:	2025883a 	mov	r18,r4
   27fcc:	2823883a 	mov	r17,r5
   27fd0:	3021883a 	mov	r16,r6
   27fd4:	2027883a 	mov	r19,r4
   27fd8:	2829883a 	mov	r20,r5
   27fdc:	38003a1e 	bne	r7,zero,280c8 <__umoddi3+0x12c>
   27fe0:	2980522e 	bgeu	r5,r6,2812c <__umoddi3+0x190>
   27fe4:	00bfffd4 	movui	r2,65535
   27fe8:	1180a436 	bltu	r2,r6,2827c <__umoddi3+0x2e0>
   27fec:	00803fc4 	movi	r2,255
   27ff0:	11816036 	bltu	r2,r6,28574 <__umoddi3+0x5d8>
   27ff4:	0005883a 	mov	r2,zero
   27ff8:	0009883a 	mov	r4,zero
   27ffc:	3084d83a 	srl	r2,r6,r2
   28000:	00c000f4 	movhi	r3,3
   28004:	18f26404 	addi	r3,r3,-13936
   28008:	05400804 	movi	r21,32
   2800c:	1885883a 	add	r2,r3,r2
   28010:	10800003 	ldbu	r2,0(r2)
   28014:	1109883a 	add	r4,r2,r4
   28018:	a92bc83a 	sub	r21,r21,r4
   2801c:	a8010e26 	beq	r21,zero,28458 <__umoddi3+0x4bc>
   28020:	8d62983a 	sll	r17,r17,r21
   28024:	9108d83a 	srl	r4,r18,r4
   28028:	3560983a 	sll	r16,r6,r21
   2802c:	9566983a 	sll	r19,r18,r21
   28030:	8928b03a 	or	r20,r17,r4
   28034:	8022d43a 	srli	r17,r16,16
   28038:	a009883a 	mov	r4,r20
   2803c:	84bfffcc 	andi	r18,r16,65535
   28040:	880b883a 	mov	r5,r17
   28044:	002942c0 	call	2942c <__umodsi3>
   28048:	a009883a 	mov	r4,r20
   2804c:	880b883a 	mov	r5,r17
   28050:	102d883a 	mov	r22,r2
   28054:	00294240 	call	29424 <__udivsi3>
   28058:	1009883a 	mov	r4,r2
   2805c:	900b883a 	mov	r5,r18
   28060:	00294340 	call	29434 <__mulsi3>
   28064:	1009883a 	mov	r4,r2
   28068:	b006943a 	slli	r3,r22,16
   2806c:	9804d43a 	srli	r2,r19,16
   28070:	1886b03a 	or	r3,r3,r2
   28074:	1900042e 	bgeu	r3,r4,28088 <__umoddi3+0xec>
   28078:	1c07883a 	add	r3,r3,r16
   2807c:	1c000236 	bltu	r3,r16,28088 <__umoddi3+0xec>
   28080:	1900012e 	bgeu	r3,r4,28088 <__umoddi3+0xec>
   28084:	1c07883a 	add	r3,r3,r16
   28088:	1929c83a 	sub	r20,r3,r4
   2808c:	a009883a 	mov	r4,r20
   28090:	880b883a 	mov	r5,r17
   28094:	002942c0 	call	2942c <__umodsi3>
   28098:	102d883a 	mov	r22,r2
   2809c:	a009883a 	mov	r4,r20
   280a0:	880b883a 	mov	r5,r17
   280a4:	b02c943a 	slli	r22,r22,16
   280a8:	00294240 	call	29424 <__udivsi3>
   280ac:	1009883a 	mov	r4,r2
   280b0:	900b883a 	mov	r5,r18
   280b4:	9cffffcc 	andi	r19,r19,65535
   280b8:	00294340 	call	29434 <__mulsi3>
   280bc:	b4e6b03a 	or	r19,r22,r19
   280c0:	9880572e 	bgeu	r19,r2,28220 <__umoddi3+0x284>
   280c4:	00005206 	br	28210 <__umoddi3+0x274>
   280c8:	29c05936 	bltu	r5,r7,28230 <__umoddi3+0x294>
   280cc:	00bfffd4 	movui	r2,65535
   280d0:	11c0652e 	bgeu	r2,r7,28268 <__umoddi3+0x2cc>
   280d4:	00804034 	movhi	r2,256
   280d8:	10bfffc4 	addi	r2,r2,-1
   280dc:	11c11936 	bltu	r2,r7,28544 <__umoddi3+0x5a8>
   280e0:	00c00404 	movi	r3,16
   280e4:	1827883a 	mov	r19,r3
   280e8:	38c6d83a 	srl	r3,r7,r3
   280ec:	010000f4 	movhi	r4,3
   280f0:	21326404 	addi	r4,r4,-13936
   280f4:	04000804 	movi	r16,32
   280f8:	20c7883a 	add	r3,r4,r3
   280fc:	18800003 	ldbu	r2,0(r3)
   28100:	14e7883a 	add	r19,r2,r19
   28104:	84e1c83a 	sub	r16,r16,r19
   28108:	8000671e 	bne	r16,zero,282a8 <__umoddi3+0x30c>
   2810c:	3c400136 	bltu	r7,r17,28114 <__umoddi3+0x178>
   28110:	91812536 	bltu	r18,r6,285a8 <__umoddi3+0x60c>
   28114:	9185c83a 	sub	r2,r18,r6
   28118:	89e3c83a 	sub	r17,r17,r7
   2811c:	90a5803a 	cmpltu	r18,r18,r2
   28120:	8ca9c83a 	sub	r20,r17,r18
   28124:	a007883a 	mov	r3,r20
   28128:	00004306 	br	28238 <__umoddi3+0x29c>
   2812c:	3000041e 	bne	r6,zero,28140 <__umoddi3+0x1a4>
   28130:	01000044 	movi	r4,1
   28134:	000b883a 	mov	r5,zero
   28138:	00294240 	call	29424 <__udivsi3>
   2813c:	1021883a 	mov	r16,r2
   28140:	00bfffd4 	movui	r2,65535
   28144:	1400532e 	bgeu	r2,r16,28294 <__umoddi3+0x2f8>
   28148:	00804034 	movhi	r2,256
   2814c:	10bfffc4 	addi	r2,r2,-1
   28150:	14010536 	bltu	r2,r16,28568 <__umoddi3+0x5cc>
   28154:	00800404 	movi	r2,16
   28158:	1007883a 	mov	r3,r2
   2815c:	8084d83a 	srl	r2,r16,r2
   28160:	010000f4 	movhi	r4,3
   28164:	21326404 	addi	r4,r4,-13936
   28168:	05400804 	movi	r21,32
   2816c:	2085883a 	add	r2,r4,r2
   28170:	10800003 	ldbu	r2,0(r2)
   28174:	10c7883a 	add	r3,r2,r3
   28178:	a8ebc83a 	sub	r21,r21,r3
   2817c:	a800b81e 	bne	r21,zero,28460 <__umoddi3+0x4c4>
   28180:	8028d43a 	srli	r20,r16,16
   28184:	8c23c83a 	sub	r17,r17,r16
   28188:	85bfffcc 	andi	r22,r16,65535
   2818c:	8809883a 	mov	r4,r17
   28190:	a00b883a 	mov	r5,r20
   28194:	002942c0 	call	2942c <__umodsi3>
   28198:	8809883a 	mov	r4,r17
   2819c:	a00b883a 	mov	r5,r20
   281a0:	1025883a 	mov	r18,r2
   281a4:	00294240 	call	29424 <__udivsi3>
   281a8:	1009883a 	mov	r4,r2
   281ac:	b00b883a 	mov	r5,r22
   281b0:	00294340 	call	29434 <__mulsi3>
   281b4:	1009883a 	mov	r4,r2
   281b8:	9006943a 	slli	r3,r18,16
   281bc:	9804d43a 	srli	r2,r19,16
   281c0:	1886b03a 	or	r3,r3,r2
   281c4:	1900032e 	bgeu	r3,r4,281d4 <__umoddi3+0x238>
   281c8:	1c07883a 	add	r3,r3,r16
   281cc:	1c000136 	bltu	r3,r16,281d4 <__umoddi3+0x238>
   281d0:	1900f336 	bltu	r3,r4,285a0 <__umoddi3+0x604>
   281d4:	1923c83a 	sub	r17,r3,r4
   281d8:	8809883a 	mov	r4,r17
   281dc:	a00b883a 	mov	r5,r20
   281e0:	002942c0 	call	2942c <__umodsi3>
   281e4:	102f883a 	mov	r23,r2
   281e8:	8809883a 	mov	r4,r17
   281ec:	a00b883a 	mov	r5,r20
   281f0:	b82e943a 	slli	r23,r23,16
   281f4:	00294240 	call	29424 <__udivsi3>
   281f8:	1009883a 	mov	r4,r2
   281fc:	b00b883a 	mov	r5,r22
   28200:	9cffffcc 	andi	r19,r19,65535
   28204:	00294340 	call	29434 <__mulsi3>
   28208:	bce6b03a 	or	r19,r23,r19
   2820c:	9880042e 	bgeu	r19,r2,28220 <__umoddi3+0x284>
   28210:	9c27883a 	add	r19,r19,r16
   28214:	9c000236 	bltu	r19,r16,28220 <__umoddi3+0x284>
   28218:	9880012e 	bgeu	r19,r2,28220 <__umoddi3+0x284>
   2821c:	9c27883a 	add	r19,r19,r16
   28220:	9885c83a 	sub	r2,r19,r2
   28224:	1544d83a 	srl	r2,r2,r21
   28228:	0007883a 	mov	r3,zero
   2822c:	00000206 	br	28238 <__umoddi3+0x29c>
   28230:	2005883a 	mov	r2,r4
   28234:	2807883a 	mov	r3,r5
   28238:	dfc00c17 	ldw	ra,48(sp)
   2823c:	df000b17 	ldw	fp,44(sp)
   28240:	ddc00a17 	ldw	r23,40(sp)
   28244:	dd800917 	ldw	r22,36(sp)
   28248:	dd400817 	ldw	r21,32(sp)
   2824c:	dd000717 	ldw	r20,28(sp)
   28250:	dcc00617 	ldw	r19,24(sp)
   28254:	dc800517 	ldw	r18,20(sp)
   28258:	dc400417 	ldw	r17,16(sp)
   2825c:	dc000317 	ldw	r16,12(sp)
   28260:	dec00d04 	addi	sp,sp,52
   28264:	f800283a 	ret
   28268:	00803fc4 	movi	r2,255
   2826c:	11c0b236 	bltu	r2,r7,28538 <__umoddi3+0x59c>
   28270:	0007883a 	mov	r3,zero
   28274:	0027883a 	mov	r19,zero
   28278:	003f9b06 	br	280e8 <__umoddi3+0x14c>
   2827c:	00804034 	movhi	r2,256
   28280:	10bfffc4 	addi	r2,r2,-1
   28284:	1180b236 	bltu	r2,r6,28550 <__umoddi3+0x5b4>
   28288:	00800404 	movi	r2,16
   2828c:	1009883a 	mov	r4,r2
   28290:	003f5a06 	br	27ffc <__umoddi3+0x60>
   28294:	00803fc4 	movi	r2,255
   28298:	1400b036 	bltu	r2,r16,2855c <__umoddi3+0x5c0>
   2829c:	0005883a 	mov	r2,zero
   282a0:	0007883a 	mov	r3,zero
   282a4:	003fad06 	br	2815c <__umoddi3+0x1c0>
   282a8:	34c4d83a 	srl	r2,r6,r19
   282ac:	3c0e983a 	sll	r7,r7,r16
   282b0:	8cf8d83a 	srl	fp,r17,r19
   282b4:	8c22983a 	sll	r17,r17,r16
   282b8:	38a8b03a 	or	r20,r7,r2
   282bc:	a02ad43a 	srli	r21,r20,16
   282c0:	94c4d83a 	srl	r2,r18,r19
   282c4:	e009883a 	mov	r4,fp
   282c8:	a80b883a 	mov	r5,r21
   282cc:	342c983a 	sll	r22,r6,r16
   282d0:	88a2b03a 	or	r17,r17,r2
   282d4:	002942c0 	call	2942c <__umodsi3>
   282d8:	e009883a 	mov	r4,fp
   282dc:	a80b883a 	mov	r5,r21
   282e0:	a5ffffcc 	andi	r23,r20,65535
   282e4:	d8800215 	stw	r2,8(sp)
   282e8:	00294240 	call	29424 <__udivsi3>
   282ec:	1009883a 	mov	r4,r2
   282f0:	b80b883a 	mov	r5,r23
   282f4:	1039883a 	mov	fp,r2
   282f8:	00294340 	call	29434 <__mulsi3>
   282fc:	d8c00217 	ldw	r3,8(sp)
   28300:	1009883a 	mov	r4,r2
   28304:	8804d43a 	srli	r2,r17,16
   28308:	1806943a 	slli	r3,r3,16
   2830c:	9424983a 	sll	r18,r18,r16
   28310:	1886b03a 	or	r3,r3,r2
   28314:	1900042e 	bgeu	r3,r4,28328 <__umoddi3+0x38c>
   28318:	1d07883a 	add	r3,r3,r20
   2831c:	e0bfffc4 	addi	r2,fp,-1
   28320:	1d009b2e 	bgeu	r3,r20,28590 <__umoddi3+0x5f4>
   28324:	1039883a 	mov	fp,r2
   28328:	1907c83a 	sub	r3,r3,r4
   2832c:	1809883a 	mov	r4,r3
   28330:	a80b883a 	mov	r5,r21
   28334:	d8c00215 	stw	r3,8(sp)
   28338:	002942c0 	call	2942c <__umodsi3>
   2833c:	d8c00217 	ldw	r3,8(sp)
   28340:	a80b883a 	mov	r5,r21
   28344:	d8800015 	stw	r2,0(sp)
   28348:	1809883a 	mov	r4,r3
   2834c:	00294240 	call	29424 <__udivsi3>
   28350:	1009883a 	mov	r4,r2
   28354:	b80b883a 	mov	r5,r23
   28358:	102b883a 	mov	r21,r2
   2835c:	00294340 	call	29434 <__mulsi3>
   28360:	d9c00017 	ldw	r7,0(sp)
   28364:	8c7fffcc 	andi	r17,r17,65535
   28368:	380e943a 	slli	r7,r7,16
   2836c:	3c4eb03a 	or	r7,r7,r17
   28370:	3880042e 	bgeu	r7,r2,28384 <__umoddi3+0x3e8>
   28374:	3d0f883a 	add	r7,r7,r20
   28378:	a8ffffc4 	addi	r3,r21,-1
   2837c:	3d00802e 	bgeu	r7,r20,28580 <__umoddi3+0x5e4>
   28380:	182b883a 	mov	r21,r3
   28384:	e038943a 	slli	fp,fp,16
   28388:	b010d43a 	srli	r8,r22,16
   2838c:	b1bfffcc 	andi	r6,r22,65535
   28390:	af2ab03a 	or	r21,r21,fp
   28394:	a82ed43a 	srli	r23,r21,16
   28398:	ad7fffcc 	andi	r21,r21,65535
   2839c:	300b883a 	mov	r5,r6
   283a0:	a809883a 	mov	r4,r21
   283a4:	38a3c83a 	sub	r17,r7,r2
   283a8:	d9800115 	stw	r6,4(sp)
   283ac:	da000015 	stw	r8,0(sp)
   283b0:	00294340 	call	29434 <__mulsi3>
   283b4:	da000017 	ldw	r8,0(sp)
   283b8:	a809883a 	mov	r4,r21
   283bc:	1039883a 	mov	fp,r2
   283c0:	400b883a 	mov	r5,r8
   283c4:	da000215 	stw	r8,8(sp)
   283c8:	00294340 	call	29434 <__mulsi3>
   283cc:	d9800117 	ldw	r6,4(sp)
   283d0:	b809883a 	mov	r4,r23
   283d4:	d8800015 	stw	r2,0(sp)
   283d8:	300b883a 	mov	r5,r6
   283dc:	00294340 	call	29434 <__mulsi3>
   283e0:	d8c00217 	ldw	r3,8(sp)
   283e4:	b809883a 	mov	r4,r23
   283e8:	102b883a 	mov	r21,r2
   283ec:	180b883a 	mov	r5,r3
   283f0:	00294340 	call	29434 <__mulsi3>
   283f4:	d9c00017 	ldw	r7,0(sp)
   283f8:	1007883a 	mov	r3,r2
   283fc:	e004d43a 	srli	r2,fp,16
   28400:	a9c9883a 	add	r4,r21,r7
   28404:	2089883a 	add	r4,r4,r2
   28408:	2540022e 	bgeu	r4,r21,28414 <__umoddi3+0x478>
   2840c:	00800074 	movhi	r2,1
   28410:	1887883a 	add	r3,r3,r2
   28414:	2004d43a 	srli	r2,r4,16
   28418:	2008943a 	slli	r4,r4,16
   2841c:	e73fffcc 	andi	fp,fp,65535
   28420:	1887883a 	add	r3,r3,r2
   28424:	2709883a 	add	r4,r4,fp
   28428:	88c03d36 	bltu	r17,r3,28520 <__umoddi3+0x584>
   2842c:	88c06126 	beq	r17,r3,285b4 <__umoddi3+0x618>
   28430:	88c7c83a 	sub	r3,r17,r3
   28434:	202d883a 	mov	r22,r4
   28438:	95adc83a 	sub	r22,r18,r22
   2843c:	95a5803a 	cmpltu	r18,r18,r22
   28440:	1c87c83a 	sub	r3,r3,r18
   28444:	1cc4983a 	sll	r2,r3,r19
   28448:	b42cd83a 	srl	r22,r22,r16
   2844c:	1c06d83a 	srl	r3,r3,r16
   28450:	1584b03a 	or	r2,r2,r22
   28454:	003f7806 	br	28238 <__umoddi3+0x29c>
   28458:	002b883a 	mov	r21,zero
   2845c:	003ef506 	br	28034 <__umoddi3+0x98>
   28460:	8560983a 	sll	r16,r16,r21
   28464:	88e6d83a 	srl	r19,r17,r3
   28468:	90c6d83a 	srl	r3,r18,r3
   2846c:	8028d43a 	srli	r20,r16,16
   28470:	8d62983a 	sll	r17,r17,r21
   28474:	9809883a 	mov	r4,r19
   28478:	a00b883a 	mov	r5,r20
   2847c:	88eeb03a 	or	r23,r17,r3
   28480:	002942c0 	call	2942c <__umodsi3>
   28484:	9809883a 	mov	r4,r19
   28488:	a00b883a 	mov	r5,r20
   2848c:	1023883a 	mov	r17,r2
   28490:	85bfffcc 	andi	r22,r16,65535
   28494:	00294240 	call	29424 <__udivsi3>
   28498:	1009883a 	mov	r4,r2
   2849c:	b00b883a 	mov	r5,r22
   284a0:	00294340 	call	29434 <__mulsi3>
   284a4:	1007883a 	mov	r3,r2
   284a8:	8808943a 	slli	r4,r17,16
   284ac:	b804d43a 	srli	r2,r23,16
   284b0:	9566983a 	sll	r19,r18,r21
   284b4:	2088b03a 	or	r4,r4,r2
   284b8:	20c0042e 	bgeu	r4,r3,284cc <__umoddi3+0x530>
   284bc:	2409883a 	add	r4,r4,r16
   284c0:	24000236 	bltu	r4,r16,284cc <__umoddi3+0x530>
   284c4:	20c0012e 	bgeu	r4,r3,284cc <__umoddi3+0x530>
   284c8:	2409883a 	add	r4,r4,r16
   284cc:	20e5c83a 	sub	r18,r4,r3
   284d0:	9009883a 	mov	r4,r18
   284d4:	a00b883a 	mov	r5,r20
   284d8:	002942c0 	call	2942c <__umodsi3>
   284dc:	1023883a 	mov	r17,r2
   284e0:	9009883a 	mov	r4,r18
   284e4:	a00b883a 	mov	r5,r20
   284e8:	8822943a 	slli	r17,r17,16
   284ec:	00294240 	call	29424 <__udivsi3>
   284f0:	1009883a 	mov	r4,r2
   284f4:	b00b883a 	mov	r5,r22
   284f8:	bdffffcc 	andi	r23,r23,65535
   284fc:	00294340 	call	29434 <__mulsi3>
   28500:	8de2b03a 	or	r17,r17,r23
   28504:	8880042e 	bgeu	r17,r2,28518 <__umoddi3+0x57c>
   28508:	8c23883a 	add	r17,r17,r16
   2850c:	8c000236 	bltu	r17,r16,28518 <__umoddi3+0x57c>
   28510:	8880012e 	bgeu	r17,r2,28518 <__umoddi3+0x57c>
   28514:	8c23883a 	add	r17,r17,r16
   28518:	88a3c83a 	sub	r17,r17,r2
   2851c:	003f1b06 	br	2818c <__umoddi3+0x1f0>
   28520:	25adc83a 	sub	r22,r4,r22
   28524:	1d07c83a 	sub	r3,r3,r20
   28528:	2589803a 	cmpltu	r4,r4,r22
   2852c:	1907c83a 	sub	r3,r3,r4
   28530:	88c7c83a 	sub	r3,r17,r3
   28534:	003fc006 	br	28438 <__umoddi3+0x49c>
   28538:	00c00204 	movi	r3,8
   2853c:	1827883a 	mov	r19,r3
   28540:	003ee906 	br	280e8 <__umoddi3+0x14c>
   28544:	00c00604 	movi	r3,24
   28548:	1827883a 	mov	r19,r3
   2854c:	003ee606 	br	280e8 <__umoddi3+0x14c>
   28550:	00800604 	movi	r2,24
   28554:	1009883a 	mov	r4,r2
   28558:	003ea806 	br	27ffc <__umoddi3+0x60>
   2855c:	00800204 	movi	r2,8
   28560:	1007883a 	mov	r3,r2
   28564:	003efd06 	br	2815c <__umoddi3+0x1c0>
   28568:	00800604 	movi	r2,24
   2856c:	1007883a 	mov	r3,r2
   28570:	003efa06 	br	2815c <__umoddi3+0x1c0>
   28574:	00800204 	movi	r2,8
   28578:	1009883a 	mov	r4,r2
   2857c:	003e9f06 	br	27ffc <__umoddi3+0x60>
   28580:	38bf7f2e 	bgeu	r7,r2,28380 <__umoddi3+0x3e4>
   28584:	ad7fff84 	addi	r21,r21,-2
   28588:	3d0f883a 	add	r7,r7,r20
   2858c:	003f7d06 	br	28384 <__umoddi3+0x3e8>
   28590:	193f642e 	bgeu	r3,r4,28324 <__umoddi3+0x388>
   28594:	e73fff84 	addi	fp,fp,-2
   28598:	1d07883a 	add	r3,r3,r20
   2859c:	003f6206 	br	28328 <__umoddi3+0x38c>
   285a0:	1c07883a 	add	r3,r3,r16
   285a4:	003f0b06 	br	281d4 <__umoddi3+0x238>
   285a8:	9005883a 	mov	r2,r18
   285ac:	a007883a 	mov	r3,r20
   285b0:	003f2106 	br	28238 <__umoddi3+0x29c>
   285b4:	913fda36 	bltu	r18,r4,28520 <__umoddi3+0x584>
   285b8:	202d883a 	mov	r22,r4
   285bc:	0007883a 	mov	r3,zero
   285c0:	003f9d06 	br	28438 <__umoddi3+0x49c>

000285c4 <_fpadd_parts>:
   285c4:	2005883a 	mov	r2,r4
   285c8:	21000017 	ldw	r4,0(r4)
   285cc:	01c00044 	movi	r7,1
   285d0:	3900622e 	bgeu	r7,r4,2875c <_fpadd_parts+0x198>
   285d4:	28c00017 	ldw	r3,0(r5)
   285d8:	38c05f2e 	bgeu	r7,r3,28758 <_fpadd_parts+0x194>
   285dc:	01c00104 	movi	r7,4
   285e0:	21c0c626 	beq	r4,r7,288fc <_fpadd_parts+0x338>
   285e4:	19c05c26 	beq	r3,r7,28758 <_fpadd_parts+0x194>
   285e8:	01c00084 	movi	r7,2
   285ec:	19c06b26 	beq	r3,r7,2879c <_fpadd_parts+0x1d8>
   285f0:	21c05926 	beq	r4,r7,28758 <_fpadd_parts+0x194>
   285f4:	11c00217 	ldw	r7,8(r2)
   285f8:	2ac00217 	ldw	r11,8(r5)
   285fc:	13000317 	ldw	r12,12(r2)
   28600:	13400417 	ldw	r13,16(r2)
   28604:	3ac9c83a 	sub	r4,r7,r11
   28608:	2a000317 	ldw	r8,12(r5)
   2860c:	2a400417 	ldw	r9,16(r5)
   28610:	2015883a 	mov	r10,r4
   28614:	20007516 	blt	r4,zero,287ec <_fpadd_parts+0x228>
   28618:	00c00fc4 	movi	r3,63
   2861c:	1a805016 	blt	r3,r10,28760 <_fpadd_parts+0x19c>
   28620:	0100870e 	bge	zero,r4,28840 <_fpadd_parts+0x27c>
   28624:	50fff804 	addi	r3,r10,-32
   28628:	18009916 	blt	r3,zero,28890 <_fpadd_parts+0x2cc>
   2862c:	48d6d83a 	srl	r11,r9,r3
   28630:	001d883a 	mov	r14,zero
   28634:	18009e16 	blt	r3,zero,288b0 <_fpadd_parts+0x2ec>
   28638:	01000044 	movi	r4,1
   2863c:	20c6983a 	sll	r3,r4,r3
   28640:	0015883a 	mov	r10,zero
   28644:	513fffc4 	addi	r4,r10,-1
   28648:	2295403a 	cmpgeu	r10,r4,r10
   2864c:	1a87c83a 	sub	r3,r3,r10
   28650:	1a52703a 	and	r9,r3,r9
   28654:	2210703a 	and	r8,r4,r8
   28658:	4250b03a 	or	r8,r8,r9
   2865c:	4010c03a 	cmpne	r8,r8,zero
   28660:	42d0b03a 	or	r8,r8,r11
   28664:	7013883a 	mov	r9,r14
   28668:	11000117 	ldw	r4,4(r2)
   2866c:	28800117 	ldw	r2,4(r5)
   28670:	20804126 	beq	r4,r2,28778 <_fpadd_parts+0x1b4>
   28674:	20006326 	beq	r4,zero,28804 <_fpadd_parts+0x240>
   28678:	4305c83a 	sub	r2,r8,r12
   2867c:	4091803a 	cmpltu	r8,r8,r2
   28680:	4b47c83a 	sub	r3,r9,r13
   28684:	1a07c83a 	sub	r3,r3,r8
   28688:	18006316 	blt	r3,zero,28818 <_fpadd_parts+0x254>
   2868c:	30000115 	stw	zero,4(r6)
   28690:	31c00215 	stw	r7,8(r6)
   28694:	30800315 	stw	r2,12(r6)
   28698:	30c00415 	stw	r3,16(r6)
   2869c:	11ffffc4 	addi	r7,r2,-1
   286a0:	388b403a 	cmpgeu	r5,r7,r2
   286a4:	194bc83a 	sub	r5,r3,r5
   286a8:	01040034 	movhi	r4,4096
   286ac:	213fffc4 	addi	r4,r4,-1
   286b0:	21401736 	bltu	r4,r5,28710 <_fpadd_parts+0x14c>
   286b4:	29008226 	beq	r5,r4,288c0 <_fpadd_parts+0x2fc>
   286b8:	31400217 	ldw	r5,8(r6)
   286bc:	02840034 	movhi	r10,4096
   286c0:	52bfffc4 	addi	r10,r10,-1
   286c4:	033fff84 	movi	r12,-2
   286c8:	297fffc4 	addi	r5,r5,-1
   286cc:	00000106 	br	286d4 <_fpadd_parts+0x110>
   286d0:	3a804a26 	beq	r7,r10,287fc <_fpadd_parts+0x238>
   286d4:	1089883a 	add	r4,r2,r2
   286d8:	2091803a 	cmpltu	r8,r4,r2
   286dc:	18c7883a 	add	r3,r3,r3
   286e0:	227fffc4 	addi	r9,r4,-1
   286e4:	40d1883a 	add	r8,r8,r3
   286e8:	490f403a 	cmpgeu	r7,r9,r4
   286ec:	41cfc83a 	sub	r7,r8,r7
   286f0:	2817883a 	mov	r11,r5
   286f4:	2005883a 	mov	r2,r4
   286f8:	4007883a 	mov	r3,r8
   286fc:	297fffc4 	addi	r5,r5,-1
   28700:	51fff32e 	bgeu	r10,r7,286d0 <_fpadd_parts+0x10c>
   28704:	31000315 	stw	r4,12(r6)
   28708:	32000415 	stw	r8,16(r6)
   2870c:	32c00215 	stw	r11,8(r6)
   28710:	010000c4 	movi	r4,3
   28714:	31000015 	stw	r4,0(r6)
   28718:	01080034 	movhi	r4,8192
   2871c:	213fffc4 	addi	r4,r4,-1
   28720:	20c00b2e 	bgeu	r4,r3,28750 <_fpadd_parts+0x18c>
   28724:	180e97fa 	slli	r7,r3,31
   28728:	1008d07a 	srli	r4,r2,1
   2872c:	31400217 	ldw	r5,8(r6)
   28730:	1806d07a 	srli	r3,r3,1
   28734:	1080004c 	andi	r2,r2,1
   28738:	3908b03a 	or	r4,r7,r4
   2873c:	1108b03a 	or	r4,r2,r4
   28740:	29400044 	addi	r5,r5,1
   28744:	31000315 	stw	r4,12(r6)
   28748:	30c00415 	stw	r3,16(r6)
   2874c:	31400215 	stw	r5,8(r6)
   28750:	3005883a 	mov	r2,r6
   28754:	f800283a 	ret
   28758:	2805883a 	mov	r2,r5
   2875c:	f800283a 	ret
   28760:	59c01e0e 	bge	r11,r7,287dc <_fpadd_parts+0x218>
   28764:	11000117 	ldw	r4,4(r2)
   28768:	28800117 	ldw	r2,4(r5)
   2876c:	0011883a 	mov	r8,zero
   28770:	0013883a 	mov	r9,zero
   28774:	20bfbf1e 	bne	r4,r2,28674 <_fpadd_parts+0xb0>
   28778:	4305883a 	add	r2,r8,r12
   2877c:	1207803a 	cmpltu	r3,r2,r8
   28780:	4b53883a 	add	r9,r9,r13
   28784:	1a47883a 	add	r3,r3,r9
   28788:	31000115 	stw	r4,4(r6)
   2878c:	31c00215 	stw	r7,8(r6)
   28790:	30800315 	stw	r2,12(r6)
   28794:	30c00415 	stw	r3,16(r6)
   28798:	003fdd06 	br	28710 <_fpadd_parts+0x14c>
   2879c:	20ffef1e 	bne	r4,r3,2875c <_fpadd_parts+0x198>
   287a0:	31000015 	stw	r4,0(r6)
   287a4:	10c00117 	ldw	r3,4(r2)
   287a8:	30c00115 	stw	r3,4(r6)
   287ac:	10c00217 	ldw	r3,8(r2)
   287b0:	11000117 	ldw	r4,4(r2)
   287b4:	29400117 	ldw	r5,4(r5)
   287b8:	30c00215 	stw	r3,8(r6)
   287bc:	10c00317 	ldw	r3,12(r2)
   287c0:	2908703a 	and	r4,r5,r4
   287c4:	30c00315 	stw	r3,12(r6)
   287c8:	10c00417 	ldw	r3,16(r2)
   287cc:	31000115 	stw	r4,4(r6)
   287d0:	3005883a 	mov	r2,r6
   287d4:	30c00415 	stw	r3,16(r6)
   287d8:	f800283a 	ret
   287dc:	580f883a 	mov	r7,r11
   287e0:	0019883a 	mov	r12,zero
   287e4:	001b883a 	mov	r13,zero
   287e8:	003f9f06 	br	28668 <_fpadd_parts+0xa4>
   287ec:	0115c83a 	sub	r10,zero,r4
   287f0:	00c00fc4 	movi	r3,63
   287f4:	1abfda16 	blt	r3,r10,28760 <_fpadd_parts+0x19c>
   287f8:	003f8906 	br	28620 <_fpadd_parts+0x5c>
   287fc:	627fb52e 	bgeu	r12,r9,286d4 <_fpadd_parts+0x110>
   28800:	003fc006 	br	28704 <_fpadd_parts+0x140>
   28804:	6205c83a 	sub	r2,r12,r8
   28808:	6099803a 	cmpltu	r12,r12,r2
   2880c:	6a47c83a 	sub	r3,r13,r9
   28810:	1b07c83a 	sub	r3,r3,r12
   28814:	183f9d0e 	bge	r3,zero,2868c <_fpadd_parts+0xc8>
   28818:	0085c83a 	sub	r2,zero,r2
   2881c:	1008c03a 	cmpne	r4,r2,zero
   28820:	00c7c83a 	sub	r3,zero,r3
   28824:	1907c83a 	sub	r3,r3,r4
   28828:	01000044 	movi	r4,1
   2882c:	31000115 	stw	r4,4(r6)
   28830:	31c00215 	stw	r7,8(r6)
   28834:	30800315 	stw	r2,12(r6)
   28838:	30c00415 	stw	r3,16(r6)
   2883c:	003f9706 	br	2869c <_fpadd_parts+0xd8>
   28840:	203f8926 	beq	r4,zero,28668 <_fpadd_parts+0xa4>
   28844:	50fff804 	addi	r3,r10,-32
   28848:	3a8f883a 	add	r7,r7,r10
   2884c:	18002316 	blt	r3,zero,288dc <_fpadd_parts+0x318>
   28850:	68d6d83a 	srl	r11,r13,r3
   28854:	001d883a 	mov	r14,zero
   28858:	18001c16 	blt	r3,zero,288cc <_fpadd_parts+0x308>
   2885c:	01000044 	movi	r4,1
   28860:	20c6983a 	sll	r3,r4,r3
   28864:	0015883a 	mov	r10,zero
   28868:	513fffc4 	addi	r4,r10,-1
   2886c:	2295403a 	cmpgeu	r10,r4,r10
   28870:	1a87c83a 	sub	r3,r3,r10
   28874:	1b5a703a 	and	r13,r3,r13
   28878:	2318703a 	and	r12,r4,r12
   2887c:	6358b03a 	or	r12,r12,r13
   28880:	6018c03a 	cmpne	r12,r12,zero
   28884:	62d8b03a 	or	r12,r12,r11
   28888:	701b883a 	mov	r13,r14
   2888c:	003f7606 	br	28668 <_fpadd_parts+0xa4>
   28890:	4808907a 	slli	r4,r9,1
   28894:	02c007c4 	movi	r11,31
   28898:	5a97c83a 	sub	r11,r11,r10
   2889c:	22c8983a 	sll	r4,r4,r11
   288a0:	4296d83a 	srl	r11,r8,r10
   288a4:	4a9cd83a 	srl	r14,r9,r10
   288a8:	22d6b03a 	or	r11,r4,r11
   288ac:	003f6106 	br	28634 <_fpadd_parts+0x70>
   288b0:	00c00044 	movi	r3,1
   288b4:	1a94983a 	sll	r10,r3,r10
   288b8:	0007883a 	mov	r3,zero
   288bc:	003f6106 	br	28644 <_fpadd_parts+0x80>
   288c0:	013fff84 	movi	r4,-2
   288c4:	21ff7c2e 	bgeu	r4,r7,286b8 <_fpadd_parts+0xf4>
   288c8:	003f9106 	br	28710 <_fpadd_parts+0x14c>
   288cc:	00c00044 	movi	r3,1
   288d0:	1a94983a 	sll	r10,r3,r10
   288d4:	0007883a 	mov	r3,zero
   288d8:	003fe306 	br	28868 <_fpadd_parts+0x2a4>
   288dc:	6816907a 	slli	r11,r13,1
   288e0:	010007c4 	movi	r4,31
   288e4:	2289c83a 	sub	r4,r4,r10
   288e8:	5908983a 	sll	r4,r11,r4
   288ec:	6296d83a 	srl	r11,r12,r10
   288f0:	6a9cd83a 	srl	r14,r13,r10
   288f4:	22d6b03a 	or	r11,r4,r11
   288f8:	003fd706 	br	28858 <_fpadd_parts+0x294>
   288fc:	193f971e 	bne	r3,r4,2875c <_fpadd_parts+0x198>
   28900:	11000117 	ldw	r4,4(r2)
   28904:	28c00117 	ldw	r3,4(r5)
   28908:	20ff9426 	beq	r4,r3,2875c <_fpadd_parts+0x198>
   2890c:	008000f4 	movhi	r2,3
   28910:	10b25f04 	addi	r2,r2,-13956
   28914:	f800283a 	ret

00028918 <__adddf3>:
   28918:	deffec04 	addi	sp,sp,-80
   2891c:	d9001115 	stw	r4,68(sp)
   28920:	d9401215 	stw	r5,72(sp)
   28924:	d9001104 	addi	r4,sp,68
   28928:	d9400a04 	addi	r5,sp,40
   2892c:	dfc01315 	stw	ra,76(sp)
   28930:	d9c01015 	stw	r7,64(sp)
   28934:	d9800f15 	stw	r6,60(sp)
   28938:	002983c0 	call	2983c <__unpack_d>
   2893c:	d9000f04 	addi	r4,sp,60
   28940:	d9400504 	addi	r5,sp,20
   28944:	002983c0 	call	2983c <__unpack_d>
   28948:	d9000a04 	addi	r4,sp,40
   2894c:	d9400504 	addi	r5,sp,20
   28950:	d80d883a 	mov	r6,sp
   28954:	00285c40 	call	285c4 <_fpadd_parts>
   28958:	1009883a 	mov	r4,r2
   2895c:	00296180 	call	29618 <__pack_d>
   28960:	dfc01317 	ldw	ra,76(sp)
   28964:	dec01404 	addi	sp,sp,80
   28968:	f800283a 	ret

0002896c <__subdf3>:
   2896c:	deffec04 	addi	sp,sp,-80
   28970:	d9001115 	stw	r4,68(sp)
   28974:	d9401215 	stw	r5,72(sp)
   28978:	d9001104 	addi	r4,sp,68
   2897c:	d9400a04 	addi	r5,sp,40
   28980:	dfc01315 	stw	ra,76(sp)
   28984:	d9c01015 	stw	r7,64(sp)
   28988:	d9800f15 	stw	r6,60(sp)
   2898c:	002983c0 	call	2983c <__unpack_d>
   28990:	d9000f04 	addi	r4,sp,60
   28994:	d9400504 	addi	r5,sp,20
   28998:	002983c0 	call	2983c <__unpack_d>
   2899c:	d8800617 	ldw	r2,24(sp)
   289a0:	d9000a04 	addi	r4,sp,40
   289a4:	d9400504 	addi	r5,sp,20
   289a8:	d80d883a 	mov	r6,sp
   289ac:	1080005c 	xori	r2,r2,1
   289b0:	d8800615 	stw	r2,24(sp)
   289b4:	00285c40 	call	285c4 <_fpadd_parts>
   289b8:	1009883a 	mov	r4,r2
   289bc:	00296180 	call	29618 <__pack_d>
   289c0:	dfc01317 	ldw	ra,76(sp)
   289c4:	dec01404 	addi	sp,sp,80
   289c8:	f800283a 	ret

000289cc <__muldf3>:
   289cc:	deffe404 	addi	sp,sp,-112
   289d0:	d9001115 	stw	r4,68(sp)
   289d4:	d9401215 	stw	r5,72(sp)
   289d8:	d9001104 	addi	r4,sp,68
   289dc:	d9400a04 	addi	r5,sp,40
   289e0:	dfc01b15 	stw	ra,108(sp)
   289e4:	d9800f15 	stw	r6,60(sp)
   289e8:	d9c01015 	stw	r7,64(sp)
   289ec:	ddc01a15 	stw	r23,104(sp)
   289f0:	dd801915 	stw	r22,100(sp)
   289f4:	dd401815 	stw	r21,96(sp)
   289f8:	dd001715 	stw	r20,92(sp)
   289fc:	dcc01615 	stw	r19,88(sp)
   28a00:	dc801515 	stw	r18,84(sp)
   28a04:	dc401415 	stw	r17,80(sp)
   28a08:	dc001315 	stw	r16,76(sp)
   28a0c:	002983c0 	call	2983c <__unpack_d>
   28a10:	d9000f04 	addi	r4,sp,60
   28a14:	d9400504 	addi	r5,sp,20
   28a18:	002983c0 	call	2983c <__unpack_d>
   28a1c:	d8c00a17 	ldw	r3,40(sp)
   28a20:	00800044 	movi	r2,1
   28a24:	10c01136 	bltu	r2,r3,28a6c <__muldf3+0xa0>
   28a28:	d8c00b17 	ldw	r3,44(sp)
   28a2c:	d8800617 	ldw	r2,24(sp)
   28a30:	d9000a04 	addi	r4,sp,40
   28a34:	1884c03a 	cmpne	r2,r3,r2
   28a38:	d8800b15 	stw	r2,44(sp)
   28a3c:	00296180 	call	29618 <__pack_d>
   28a40:	dfc01b17 	ldw	ra,108(sp)
   28a44:	ddc01a17 	ldw	r23,104(sp)
   28a48:	dd801917 	ldw	r22,100(sp)
   28a4c:	dd401817 	ldw	r21,96(sp)
   28a50:	dd001717 	ldw	r20,92(sp)
   28a54:	dcc01617 	ldw	r19,88(sp)
   28a58:	dc801517 	ldw	r18,84(sp)
   28a5c:	dc401417 	ldw	r17,80(sp)
   28a60:	dc001317 	ldw	r16,76(sp)
   28a64:	dec01c04 	addi	sp,sp,112
   28a68:	f800283a 	ret
   28a6c:	d9000517 	ldw	r4,20(sp)
   28a70:	11000636 	bltu	r2,r4,28a8c <__muldf3+0xc0>
   28a74:	d8800617 	ldw	r2,24(sp)
   28a78:	d8c00b17 	ldw	r3,44(sp)
   28a7c:	d9000504 	addi	r4,sp,20
   28a80:	1884c03a 	cmpne	r2,r3,r2
   28a84:	d8800615 	stw	r2,24(sp)
   28a88:	003fec06 	br	28a3c <__muldf3+0x70>
   28a8c:	00800104 	movi	r2,4
   28a90:	1880051e 	bne	r3,r2,28aa8 <__muldf3+0xdc>
   28a94:	00800084 	movi	r2,2
   28a98:	20bfe31e 	bne	r4,r2,28a28 <__muldf3+0x5c>
   28a9c:	010000f4 	movhi	r4,3
   28aa0:	21325f04 	addi	r4,r4,-13956
   28aa4:	003fe506 	br	28a3c <__muldf3+0x70>
   28aa8:	2080031e 	bne	r4,r2,28ab8 <__muldf3+0xec>
   28aac:	00800084 	movi	r2,2
   28ab0:	18bffa26 	beq	r3,r2,28a9c <__muldf3+0xd0>
   28ab4:	003fef06 	br	28a74 <__muldf3+0xa8>
   28ab8:	00800084 	movi	r2,2
   28abc:	18bfda26 	beq	r3,r2,28a28 <__muldf3+0x5c>
   28ac0:	20bfec26 	beq	r4,r2,28a74 <__muldf3+0xa8>
   28ac4:	dc000d17 	ldw	r16,52(sp)
   28ac8:	dd000817 	ldw	r20,32(sp)
   28acc:	dc800917 	ldw	r18,36(sp)
   28ad0:	8009883a 	mov	r4,r16
   28ad4:	000b883a 	mov	r5,zero
   28ad8:	a00d883a 	mov	r6,r20
   28adc:	000f883a 	mov	r7,zero
   28ae0:	002945c0 	call	2945c <__muldi3>
   28ae4:	dc400e17 	ldw	r17,56(sp)
   28ae8:	9009883a 	mov	r4,r18
   28aec:	800d883a 	mov	r6,r16
   28af0:	000b883a 	mov	r5,zero
   28af4:	000f883a 	mov	r7,zero
   28af8:	102f883a 	mov	r23,r2
   28afc:	1827883a 	mov	r19,r3
   28b00:	002945c0 	call	2945c <__muldi3>
   28b04:	900d883a 	mov	r6,r18
   28b08:	8809883a 	mov	r4,r17
   28b0c:	000b883a 	mov	r5,zero
   28b10:	000f883a 	mov	r7,zero
   28b14:	102b883a 	mov	r21,r2
   28b18:	1821883a 	mov	r16,r3
   28b1c:	002945c0 	call	2945c <__muldi3>
   28b20:	8809883a 	mov	r4,r17
   28b24:	000b883a 	mov	r5,zero
   28b28:	a00d883a 	mov	r6,r20
   28b2c:	000f883a 	mov	r7,zero
   28b30:	102d883a 	mov	r22,r2
   28b34:	1825883a 	mov	r18,r3
   28b38:	002945c0 	call	2945c <__muldi3>
   28b3c:	154b883a 	add	r5,r2,r21
   28b40:	2889803a 	cmpltu	r4,r5,r2
   28b44:	1c07883a 	add	r3,r3,r16
   28b48:	20c9883a 	add	r4,r4,r3
   28b4c:	24004b36 	bltu	r4,r16,28c7c <__muldf3+0x2b0>
   28b50:	8100011e 	bne	r16,r4,28b58 <__muldf3+0x18c>
   28b54:	2d404936 	bltu	r5,r21,28c7c <__muldf3+0x2b0>
   28b58:	0011883a 	mov	r8,zero
   28b5c:	0007883a 	mov	r3,zero
   28b60:	2ccb883a 	add	r5,r5,r19
   28b64:	b80d883a 	mov	r6,r23
   28b68:	2cc0012e 	bgeu	r5,r19,28b70 <__muldf3+0x1a4>
   28b6c:	02000044 	movi	r8,1
   28b70:	258f883a 	add	r7,r4,r22
   28b74:	3909803a 	cmpltu	r4,r7,r4
   28b78:	da400c17 	ldw	r9,48(sp)
   28b7c:	2489883a 	add	r4,r4,r18
   28b80:	d8800717 	ldw	r2,28(sp)
   28b84:	20c9883a 	add	r4,r4,r3
   28b88:	da800b17 	ldw	r10,44(sp)
   28b8c:	d8c00617 	ldw	r3,24(sp)
   28b90:	3a11883a 	add	r8,r7,r8
   28b94:	4885883a 	add	r2,r9,r2
   28b98:	50c6c03a 	cmpne	r3,r10,r3
   28b9c:	41cf803a 	cmpltu	r7,r8,r7
   28ba0:	12400104 	addi	r9,r2,4
   28ba4:	d8c00115 	stw	r3,4(sp)
   28ba8:	3909883a 	add	r4,r7,r4
   28bac:	da400215 	stw	r9,8(sp)
   28bb0:	03480034 	movhi	r13,8192
   28bb4:	6b7fffc4 	addi	r13,r13,-1
   28bb8:	4007883a 	mov	r3,r8
   28bbc:	6900102e 	bgeu	r13,r4,28c00 <__muldf3+0x234>
   28bc0:	10800144 	addi	r2,r2,5
   28bc4:	180ed07a 	srli	r7,r3,1
   28bc8:	18c0004c 	andi	r3,r3,1
   28bcc:	201097fa 	slli	r8,r4,31
   28bd0:	281697fa 	slli	r11,r5,31
   28bd4:	2008d07a 	srli	r4,r4,1
   28bd8:	3014d07a 	srli	r10,r6,1
   28bdc:	2812d07a 	srli	r9,r5,1
   28be0:	1019883a 	mov	r12,r2
   28be4:	18000226 	beq	r3,zero,28bf0 <__muldf3+0x224>
   28be8:	5a8cb03a 	or	r6,r11,r10
   28bec:	49600034 	orhi	r5,r9,32768
   28bf0:	41c6b03a 	or	r3,r8,r7
   28bf4:	10800044 	addi	r2,r2,1
   28bf8:	693ff236 	bltu	r13,r4,28bc4 <__muldf3+0x1f8>
   28bfc:	db000215 	stw	r12,8(sp)
   28c00:	03440034 	movhi	r13,4096
   28c04:	6b7fffc4 	addi	r13,r13,-1
   28c08:	69001336 	bltu	r13,r4,28c58 <__muldf3+0x28c>
   28c0c:	d8800217 	ldw	r2,8(sp)
   28c10:	10bfffc4 	addi	r2,r2,-1
   28c14:	18d3883a 	add	r9,r3,r3
   28c18:	48c7803a 	cmpltu	r3,r9,r3
   28c1c:	2109883a 	add	r4,r4,r4
   28c20:	190f883a 	add	r7,r3,r4
   28c24:	3191883a 	add	r8,r6,r6
   28c28:	4197803a 	cmpltu	r11,r8,r6
   28c2c:	2955883a 	add	r10,r5,r5
   28c30:	1019883a 	mov	r12,r2
   28c34:	4807883a 	mov	r3,r9
   28c38:	3809883a 	mov	r4,r7
   28c3c:	2800010e 	bge	r5,zero,28c44 <__muldf3+0x278>
   28c40:	48c00054 	ori	r3,r9,1
   28c44:	400d883a 	mov	r6,r8
   28c48:	5a8b883a 	add	r5,r11,r10
   28c4c:	10bfffc4 	addi	r2,r2,-1
   28c50:	69fff02e 	bgeu	r13,r7,28c14 <__muldf3+0x248>
   28c54:	db000215 	stw	r12,8(sp)
   28c58:	18803fcc 	andi	r2,r3,255
   28c5c:	01c02004 	movi	r7,128
   28c60:	11c00926 	beq	r2,r7,28c88 <__muldf3+0x2bc>
   28c64:	008000c4 	movi	r2,3
   28c68:	d9000415 	stw	r4,16(sp)
   28c6c:	d8c00315 	stw	r3,12(sp)
   28c70:	d8800015 	stw	r2,0(sp)
   28c74:	d809883a 	mov	r4,sp
   28c78:	003f7006 	br	28a3c <__muldf3+0x70>
   28c7c:	0011883a 	mov	r8,zero
   28c80:	00c00044 	movi	r3,1
   28c84:	003fb606 	br	28b60 <__muldf3+0x194>
   28c88:	19c0400c 	andi	r7,r3,256
   28c8c:	383ff51e 	bne	r7,zero,28c64 <__muldf3+0x298>
   28c90:	314ab03a 	or	r5,r6,r5
   28c94:	283ff326 	beq	r5,zero,28c64 <__muldf3+0x298>
   28c98:	1885883a 	add	r2,r3,r2
   28c9c:	10cb803a 	cmpltu	r5,r2,r3
   28ca0:	00ffc004 	movi	r3,-256
   28ca4:	10c6703a 	and	r3,r2,r3
   28ca8:	2909883a 	add	r4,r5,r4
   28cac:	003fed06 	br	28c64 <__muldf3+0x298>

00028cb0 <__divdf3>:
   28cb0:	defff104 	addi	sp,sp,-60
   28cb4:	d9000c15 	stw	r4,48(sp)
   28cb8:	d9400d15 	stw	r5,52(sp)
   28cbc:	d9000c04 	addi	r4,sp,48
   28cc0:	d9400504 	addi	r5,sp,20
   28cc4:	dfc00e15 	stw	ra,56(sp)
   28cc8:	d9800a15 	stw	r6,40(sp)
   28ccc:	d9c00b15 	stw	r7,44(sp)
   28cd0:	002983c0 	call	2983c <__unpack_d>
   28cd4:	d9000a04 	addi	r4,sp,40
   28cd8:	d80b883a 	mov	r5,sp
   28cdc:	002983c0 	call	2983c <__unpack_d>
   28ce0:	d8c00517 	ldw	r3,20(sp)
   28ce4:	00800044 	movi	r2,1
   28ce8:	10c00536 	bltu	r2,r3,28d00 <__divdf3+0x50>
   28cec:	d9000504 	addi	r4,sp,20
   28cf0:	00296180 	call	29618 <__pack_d>
   28cf4:	dfc00e17 	ldw	ra,56(sp)
   28cf8:	dec00f04 	addi	sp,sp,60
   28cfc:	f800283a 	ret
   28d00:	d9000017 	ldw	r4,0(sp)
   28d04:	11000536 	bltu	r2,r4,28d1c <__divdf3+0x6c>
   28d08:	d809883a 	mov	r4,sp
   28d0c:	00296180 	call	29618 <__pack_d>
   28d10:	dfc00e17 	ldw	ra,56(sp)
   28d14:	dec00f04 	addi	sp,sp,60
   28d18:	f800283a 	ret
   28d1c:	d9800617 	ldw	r6,24(sp)
   28d20:	d9400117 	ldw	r5,4(sp)
   28d24:	00800104 	movi	r2,4
   28d28:	314af03a 	xor	r5,r6,r5
   28d2c:	d9400615 	stw	r5,24(sp)
   28d30:	18800226 	beq	r3,r2,28d3c <__divdf3+0x8c>
   28d34:	01400084 	movi	r5,2
   28d38:	1940041e 	bne	r3,r5,28d4c <__divdf3+0x9c>
   28d3c:	193feb1e 	bne	r3,r4,28cec <__divdf3+0x3c>
   28d40:	010000f4 	movhi	r4,3
   28d44:	21325f04 	addi	r4,r4,-13956
   28d48:	003fe906 	br	28cf0 <__divdf3+0x40>
   28d4c:	20803326 	beq	r4,r2,28e1c <__divdf3+0x16c>
   28d50:	21403726 	beq	r4,r5,28e30 <__divdf3+0x180>
   28d54:	d8800217 	ldw	r2,8(sp)
   28d58:	d9000717 	ldw	r4,28(sp)
   28d5c:	d8c00917 	ldw	r3,36(sp)
   28d60:	da000417 	ldw	r8,16(sp)
   28d64:	2089c83a 	sub	r4,r4,r2
   28d68:	d9000715 	stw	r4,28(sp)
   28d6c:	d8800817 	ldw	r2,32(sp)
   28d70:	dbc00317 	ldw	r15,12(sp)
   28d74:	1a000236 	bltu	r3,r8,28d80 <__divdf3+0xd0>
   28d78:	40c0081e 	bne	r8,r3,28d9c <__divdf3+0xec>
   28d7c:	13c0072e 	bgeu	r2,r15,28d9c <__divdf3+0xec>
   28d80:	108b883a 	add	r5,r2,r2
   28d84:	288d803a 	cmpltu	r6,r5,r2
   28d88:	18c7883a 	add	r3,r3,r3
   28d8c:	213fffc4 	addi	r4,r4,-1
   28d90:	2805883a 	mov	r2,r5
   28d94:	30c7883a 	add	r3,r6,r3
   28d98:	d9000715 	stw	r4,28(sp)
   28d9c:	01400f44 	movi	r5,61
   28da0:	000f883a 	mov	r7,zero
   28da4:	01040034 	movhi	r4,4096
   28da8:	0019883a 	mov	r12,zero
   28dac:	001b883a 	mov	r13,zero
   28db0:	201697fa 	slli	r11,r4,31
   28db4:	3814d07a 	srli	r10,r7,1
   28db8:	297fffc4 	addi	r5,r5,-1
   28dbc:	1a000936 	bltu	r3,r8,28de4 <__divdf3+0x134>
   28dc0:	13cdc83a 	sub	r6,r2,r15
   28dc4:	1193803a 	cmpltu	r9,r2,r6
   28dc8:	1a1dc83a 	sub	r14,r3,r8
   28dcc:	40c0011e 	bne	r8,r3,28dd4 <__divdf3+0x124>
   28dd0:	13c00436 	bltu	r2,r15,28de4 <__divdf3+0x134>
   28dd4:	3005883a 	mov	r2,r6
   28dd8:	7247c83a 	sub	r3,r14,r9
   28ddc:	61d8b03a 	or	r12,r12,r7
   28de0:	691ab03a 	or	r13,r13,r4
   28de4:	108d883a 	add	r6,r2,r2
   28de8:	3093803a 	cmpltu	r9,r6,r2
   28dec:	18c7883a 	add	r3,r3,r3
   28df0:	5a8eb03a 	or	r7,r11,r10
   28df4:	2008d07a 	srli	r4,r4,1
   28df8:	3005883a 	mov	r2,r6
   28dfc:	48c7883a 	add	r3,r9,r3
   28e00:	283feb1e 	bne	r5,zero,28db0 <__divdf3+0x100>
   28e04:	61003fcc 	andi	r4,r12,255
   28e08:	01402004 	movi	r5,128
   28e0c:	21400b26 	beq	r4,r5,28e3c <__divdf3+0x18c>
   28e10:	db000815 	stw	r12,32(sp)
   28e14:	db400915 	stw	r13,36(sp)
   28e18:	003fb406 	br	28cec <__divdf3+0x3c>
   28e1c:	d8000815 	stw	zero,32(sp)
   28e20:	d8000915 	stw	zero,36(sp)
   28e24:	d8000715 	stw	zero,28(sp)
   28e28:	d9000504 	addi	r4,sp,20
   28e2c:	003fb006 	br	28cf0 <__divdf3+0x40>
   28e30:	d8800515 	stw	r2,20(sp)
   28e34:	d9000504 	addi	r4,sp,20
   28e38:	003fad06 	br	28cf0 <__divdf3+0x40>
   28e3c:	6140400c 	andi	r5,r12,256
   28e40:	283ff31e 	bne	r5,zero,28e10 <__divdf3+0x160>
   28e44:	30c4b03a 	or	r2,r6,r3
   28e48:	103ff126 	beq	r2,zero,28e10 <__divdf3+0x160>
   28e4c:	6109883a 	add	r4,r12,r4
   28e50:	2305803a 	cmpltu	r2,r4,r12
   28e54:	033fc004 	movi	r12,-256
   28e58:	2318703a 	and	r12,r4,r12
   28e5c:	135b883a 	add	r13,r2,r13
   28e60:	003feb06 	br	28e10 <__divdf3+0x160>

00028e64 <__eqdf2>:
   28e64:	defff104 	addi	sp,sp,-60
   28e68:	d9000c15 	stw	r4,48(sp)
   28e6c:	d9400d15 	stw	r5,52(sp)
   28e70:	d9000c04 	addi	r4,sp,48
   28e74:	d9400504 	addi	r5,sp,20
   28e78:	dfc00e15 	stw	ra,56(sp)
   28e7c:	d9800a15 	stw	r6,40(sp)
   28e80:	d9c00b15 	stw	r7,44(sp)
   28e84:	002983c0 	call	2983c <__unpack_d>
   28e88:	d9000a04 	addi	r4,sp,40
   28e8c:	d80b883a 	mov	r5,sp
   28e90:	002983c0 	call	2983c <__unpack_d>
   28e94:	d8c00517 	ldw	r3,20(sp)
   28e98:	00800044 	movi	r2,1
   28e9c:	10c0052e 	bgeu	r2,r3,28eb4 <__eqdf2+0x50>
   28ea0:	d8c00017 	ldw	r3,0(sp)
   28ea4:	10c0032e 	bgeu	r2,r3,28eb4 <__eqdf2+0x50>
   28ea8:	d9000504 	addi	r4,sp,20
   28eac:	d80b883a 	mov	r5,sp
   28eb0:	00299400 	call	29940 <__fpcmp_parts_d>
   28eb4:	dfc00e17 	ldw	ra,56(sp)
   28eb8:	dec00f04 	addi	sp,sp,60
   28ebc:	f800283a 	ret

00028ec0 <__nedf2>:
   28ec0:	defff104 	addi	sp,sp,-60
   28ec4:	d9000c15 	stw	r4,48(sp)
   28ec8:	d9400d15 	stw	r5,52(sp)
   28ecc:	d9000c04 	addi	r4,sp,48
   28ed0:	d9400504 	addi	r5,sp,20
   28ed4:	dfc00e15 	stw	ra,56(sp)
   28ed8:	d9800a15 	stw	r6,40(sp)
   28edc:	d9c00b15 	stw	r7,44(sp)
   28ee0:	002983c0 	call	2983c <__unpack_d>
   28ee4:	d9000a04 	addi	r4,sp,40
   28ee8:	d80b883a 	mov	r5,sp
   28eec:	002983c0 	call	2983c <__unpack_d>
   28ef0:	d8c00517 	ldw	r3,20(sp)
   28ef4:	00800044 	movi	r2,1
   28ef8:	10c0052e 	bgeu	r2,r3,28f10 <__nedf2+0x50>
   28efc:	d8c00017 	ldw	r3,0(sp)
   28f00:	10c0032e 	bgeu	r2,r3,28f10 <__nedf2+0x50>
   28f04:	d9000504 	addi	r4,sp,20
   28f08:	d80b883a 	mov	r5,sp
   28f0c:	00299400 	call	29940 <__fpcmp_parts_d>
   28f10:	dfc00e17 	ldw	ra,56(sp)
   28f14:	dec00f04 	addi	sp,sp,60
   28f18:	f800283a 	ret

00028f1c <__gtdf2>:
   28f1c:	defff104 	addi	sp,sp,-60
   28f20:	d9000c15 	stw	r4,48(sp)
   28f24:	d9400d15 	stw	r5,52(sp)
   28f28:	d9000c04 	addi	r4,sp,48
   28f2c:	d9400504 	addi	r5,sp,20
   28f30:	dfc00e15 	stw	ra,56(sp)
   28f34:	d9800a15 	stw	r6,40(sp)
   28f38:	d9c00b15 	stw	r7,44(sp)
   28f3c:	002983c0 	call	2983c <__unpack_d>
   28f40:	d9000a04 	addi	r4,sp,40
   28f44:	d80b883a 	mov	r5,sp
   28f48:	002983c0 	call	2983c <__unpack_d>
   28f4c:	d8c00517 	ldw	r3,20(sp)
   28f50:	00800044 	movi	r2,1
   28f54:	10c0082e 	bgeu	r2,r3,28f78 <__gtdf2+0x5c>
   28f58:	d8c00017 	ldw	r3,0(sp)
   28f5c:	10c0062e 	bgeu	r2,r3,28f78 <__gtdf2+0x5c>
   28f60:	d9000504 	addi	r4,sp,20
   28f64:	d80b883a 	mov	r5,sp
   28f68:	00299400 	call	29940 <__fpcmp_parts_d>
   28f6c:	dfc00e17 	ldw	ra,56(sp)
   28f70:	dec00f04 	addi	sp,sp,60
   28f74:	f800283a 	ret
   28f78:	00bfffc4 	movi	r2,-1
   28f7c:	003ffb06 	br	28f6c <__gtdf2+0x50>

00028f80 <__gedf2>:
   28f80:	defff104 	addi	sp,sp,-60
   28f84:	d9000c15 	stw	r4,48(sp)
   28f88:	d9400d15 	stw	r5,52(sp)
   28f8c:	d9000c04 	addi	r4,sp,48
   28f90:	d9400504 	addi	r5,sp,20
   28f94:	dfc00e15 	stw	ra,56(sp)
   28f98:	d9800a15 	stw	r6,40(sp)
   28f9c:	d9c00b15 	stw	r7,44(sp)
   28fa0:	002983c0 	call	2983c <__unpack_d>
   28fa4:	d9000a04 	addi	r4,sp,40
   28fa8:	d80b883a 	mov	r5,sp
   28fac:	002983c0 	call	2983c <__unpack_d>
   28fb0:	d8c00517 	ldw	r3,20(sp)
   28fb4:	00800044 	movi	r2,1
   28fb8:	10c0082e 	bgeu	r2,r3,28fdc <__gedf2+0x5c>
   28fbc:	d8c00017 	ldw	r3,0(sp)
   28fc0:	10c0062e 	bgeu	r2,r3,28fdc <__gedf2+0x5c>
   28fc4:	d9000504 	addi	r4,sp,20
   28fc8:	d80b883a 	mov	r5,sp
   28fcc:	00299400 	call	29940 <__fpcmp_parts_d>
   28fd0:	dfc00e17 	ldw	ra,56(sp)
   28fd4:	dec00f04 	addi	sp,sp,60
   28fd8:	f800283a 	ret
   28fdc:	00bfffc4 	movi	r2,-1
   28fe0:	003ffb06 	br	28fd0 <__gedf2+0x50>

00028fe4 <__ltdf2>:
   28fe4:	defff104 	addi	sp,sp,-60
   28fe8:	d9000c15 	stw	r4,48(sp)
   28fec:	d9400d15 	stw	r5,52(sp)
   28ff0:	d9000c04 	addi	r4,sp,48
   28ff4:	d9400504 	addi	r5,sp,20
   28ff8:	dfc00e15 	stw	ra,56(sp)
   28ffc:	d9800a15 	stw	r6,40(sp)
   29000:	d9c00b15 	stw	r7,44(sp)
   29004:	002983c0 	call	2983c <__unpack_d>
   29008:	d9000a04 	addi	r4,sp,40
   2900c:	d80b883a 	mov	r5,sp
   29010:	002983c0 	call	2983c <__unpack_d>
   29014:	d8c00517 	ldw	r3,20(sp)
   29018:	00800044 	movi	r2,1
   2901c:	10c0052e 	bgeu	r2,r3,29034 <__ltdf2+0x50>
   29020:	d8c00017 	ldw	r3,0(sp)
   29024:	10c0032e 	bgeu	r2,r3,29034 <__ltdf2+0x50>
   29028:	d9000504 	addi	r4,sp,20
   2902c:	d80b883a 	mov	r5,sp
   29030:	00299400 	call	29940 <__fpcmp_parts_d>
   29034:	dfc00e17 	ldw	ra,56(sp)
   29038:	dec00f04 	addi	sp,sp,60
   2903c:	f800283a 	ret

00029040 <__floatsidf>:
   29040:	2004d7fa 	srli	r2,r4,31
   29044:	defff904 	addi	sp,sp,-28
   29048:	00c000c4 	movi	r3,3
   2904c:	dfc00615 	stw	ra,24(sp)
   29050:	dc000515 	stw	r16,20(sp)
   29054:	d8c00015 	stw	r3,0(sp)
   29058:	d8800115 	stw	r2,4(sp)
   2905c:	2000081e 	bne	r4,zero,29080 <__floatsidf+0x40>
   29060:	00800084 	movi	r2,2
   29064:	d8800015 	stw	r2,0(sp)
   29068:	d809883a 	mov	r4,sp
   2906c:	00296180 	call	29618 <__pack_d>
   29070:	dfc00617 	ldw	ra,24(sp)
   29074:	dc000517 	ldw	r16,20(sp)
   29078:	dec00704 	addi	sp,sp,28
   2907c:	f800283a 	ret
   29080:	00c00f04 	movi	r3,60
   29084:	d8c00215 	stw	r3,8(sp)
   29088:	10000f1e 	bne	r2,zero,290c8 <__floatsidf+0x88>
   2908c:	2021883a 	mov	r16,r4
   29090:	8009883a 	mov	r4,r16
   29094:	002956c0 	call	2956c <__clzsi2>
   29098:	11000744 	addi	r4,r2,29
   2909c:	0100110e 	bge	zero,r4,290e4 <__floatsidf+0xa4>
   290a0:	10ffff44 	addi	r3,r2,-3
   290a4:	18001216 	blt	r3,zero,290f0 <__floatsidf+0xb0>
   290a8:	80c6983a 	sll	r3,r16,r3
   290ac:	0009883a 	mov	r4,zero
   290b0:	014007c4 	movi	r5,31
   290b4:	2885c83a 	sub	r2,r5,r2
   290b8:	d9000315 	stw	r4,12(sp)
   290bc:	d8c00415 	stw	r3,16(sp)
   290c0:	d8800215 	stw	r2,8(sp)
   290c4:	003fe806 	br	29068 <__floatsidf+0x28>
   290c8:	00a00034 	movhi	r2,32768
   290cc:	20800e26 	beq	r4,r2,29108 <__floatsidf+0xc8>
   290d0:	0121c83a 	sub	r16,zero,r4
   290d4:	8009883a 	mov	r4,r16
   290d8:	002956c0 	call	2956c <__clzsi2>
   290dc:	11000744 	addi	r4,r2,29
   290e0:	013fef16 	blt	zero,r4,290a0 <__floatsidf+0x60>
   290e4:	dc000315 	stw	r16,12(sp)
   290e8:	d8000415 	stw	zero,16(sp)
   290ec:	003fde06 	br	29068 <__floatsidf+0x28>
   290f0:	800ad07a 	srli	r5,r16,1
   290f4:	00c007c4 	movi	r3,31
   290f8:	1907c83a 	sub	r3,r3,r4
   290fc:	28c6d83a 	srl	r3,r5,r3
   29100:	8108983a 	sll	r4,r16,r4
   29104:	003fea06 	br	290b0 <__floatsidf+0x70>
   29108:	0005883a 	mov	r2,zero
   2910c:	00f07834 	movhi	r3,49632
   29110:	003fd706 	br	29070 <__floatsidf+0x30>

00029114 <__fixdfsi>:
   29114:	defff804 	addi	sp,sp,-32
   29118:	d9000515 	stw	r4,20(sp)
   2911c:	d9400615 	stw	r5,24(sp)
   29120:	d9000504 	addi	r4,sp,20
   29124:	d80b883a 	mov	r5,sp
   29128:	dfc00715 	stw	ra,28(sp)
   2912c:	002983c0 	call	2983c <__unpack_d>
   29130:	d8800017 	ldw	r2,0(sp)
   29134:	00c00084 	movi	r3,2
   29138:	10c01c26 	beq	r2,r3,291ac <__fixdfsi+0x98>
   2913c:	00c00044 	movi	r3,1
   29140:	18801a2e 	bgeu	r3,r2,291ac <__fixdfsi+0x98>
   29144:	00c00104 	movi	r3,4
   29148:	10c01126 	beq	r2,r3,29190 <__fixdfsi+0x7c>
   2914c:	d8800217 	ldw	r2,8(sp)
   29150:	10001616 	blt	r2,zero,291ac <__fixdfsi+0x98>
   29154:	00c00784 	movi	r3,30
   29158:	18800d16 	blt	r3,r2,29190 <__fixdfsi+0x7c>
   2915c:	00c00f04 	movi	r3,60
   29160:	1885c83a 	sub	r2,r3,r2
   29164:	10fff804 	addi	r3,r2,-32
   29168:	d9400317 	ldw	r5,12(sp)
   2916c:	d9000417 	ldw	r4,16(sp)
   29170:	18001616 	blt	r3,zero,291cc <__fixdfsi+0xb8>
   29174:	20c4d83a 	srl	r2,r4,r3
   29178:	d8c00117 	ldw	r3,4(sp)
   2917c:	18000126 	beq	r3,zero,29184 <__fixdfsi+0x70>
   29180:	0085c83a 	sub	r2,zero,r2
   29184:	dfc00717 	ldw	ra,28(sp)
   29188:	dec00804 	addi	sp,sp,32
   2918c:	f800283a 	ret
   29190:	d8800117 	ldw	r2,4(sp)
   29194:	1000091e 	bne	r2,zero,291bc <__fixdfsi+0xa8>
   29198:	00a00034 	movhi	r2,32768
   2919c:	10bfffc4 	addi	r2,r2,-1
   291a0:	dfc00717 	ldw	ra,28(sp)
   291a4:	dec00804 	addi	sp,sp,32
   291a8:	f800283a 	ret
   291ac:	0005883a 	mov	r2,zero
   291b0:	dfc00717 	ldw	ra,28(sp)
   291b4:	dec00804 	addi	sp,sp,32
   291b8:	f800283a 	ret
   291bc:	00a00034 	movhi	r2,32768
   291c0:	dfc00717 	ldw	ra,28(sp)
   291c4:	dec00804 	addi	sp,sp,32
   291c8:	f800283a 	ret
   291cc:	2008907a 	slli	r4,r4,1
   291d0:	018007c4 	movi	r6,31
   291d4:	308dc83a 	sub	r6,r6,r2
   291d8:	2188983a 	sll	r4,r4,r6
   291dc:	2884d83a 	srl	r2,r5,r2
   291e0:	2084b03a 	or	r2,r4,r2
   291e4:	003fe406 	br	29178 <__fixdfsi+0x64>

000291e8 <__floatunsidf>:
   291e8:	defff904 	addi	sp,sp,-28
   291ec:	dc000515 	stw	r16,20(sp)
   291f0:	dfc00615 	stw	ra,24(sp)
   291f4:	d8000115 	stw	zero,4(sp)
   291f8:	2021883a 	mov	r16,r4
   291fc:	20001726 	beq	r4,zero,2925c <__floatunsidf+0x74>
   29200:	008000c4 	movi	r2,3
   29204:	d8800015 	stw	r2,0(sp)
   29208:	00800f04 	movi	r2,60
   2920c:	d8800215 	stw	r2,8(sp)
   29210:	002956c0 	call	2956c <__clzsi2>
   29214:	10c00744 	addi	r3,r2,29
   29218:	18001816 	blt	r3,zero,2927c <__floatunsidf+0x94>
   2921c:	18002d26 	beq	r3,zero,292d4 <__floatunsidf+0xec>
   29220:	113fff44 	addi	r4,r2,-3
   29224:	20002e16 	blt	r4,zero,292e0 <__floatunsidf+0xf8>
   29228:	8108983a 	sll	r4,r16,r4
   2922c:	0021883a 	mov	r16,zero
   29230:	014007c4 	movi	r5,31
   29234:	2885c83a 	sub	r2,r5,r2
   29238:	dc000315 	stw	r16,12(sp)
   2923c:	d9000415 	stw	r4,16(sp)
   29240:	d8800215 	stw	r2,8(sp)
   29244:	d809883a 	mov	r4,sp
   29248:	00296180 	call	29618 <__pack_d>
   2924c:	dfc00617 	ldw	ra,24(sp)
   29250:	dc000517 	ldw	r16,20(sp)
   29254:	dec00704 	addi	sp,sp,28
   29258:	f800283a 	ret
   2925c:	00800084 	movi	r2,2
   29260:	d809883a 	mov	r4,sp
   29264:	d8800015 	stw	r2,0(sp)
   29268:	00296180 	call	29618 <__pack_d>
   2926c:	dfc00617 	ldw	ra,24(sp)
   29270:	dc000517 	ldw	r16,20(sp)
   29274:	dec00704 	addi	sp,sp,28
   29278:	f800283a 	ret
   2927c:	00c7c83a 	sub	r3,zero,r3
   29280:	193ff804 	addi	r4,r3,-32
   29284:	20001c16 	blt	r4,zero,292f8 <__floatunsidf+0x110>
   29288:	000b883a 	mov	r5,zero
   2928c:	2009d7fa 	srai	r4,r4,31
   29290:	80c6d83a 	srl	r3,r16,r3
   29294:	297fffc4 	addi	r5,r5,-1
   29298:	2c20703a 	and	r16,r5,r16
   2929c:	8020c03a 	cmpne	r16,r16,zero
   292a0:	1906703a 	and	r3,r3,r4
   292a4:	010007c4 	movi	r4,31
   292a8:	80c6b03a 	or	r3,r16,r3
   292ac:	2085c83a 	sub	r2,r4,r2
   292b0:	d809883a 	mov	r4,sp
   292b4:	d8c00315 	stw	r3,12(sp)
   292b8:	d8000415 	stw	zero,16(sp)
   292bc:	d8800215 	stw	r2,8(sp)
   292c0:	00296180 	call	29618 <__pack_d>
   292c4:	dfc00617 	ldw	ra,24(sp)
   292c8:	dc000517 	ldw	r16,20(sp)
   292cc:	dec00704 	addi	sp,sp,28
   292d0:	f800283a 	ret
   292d4:	dc000315 	stw	r16,12(sp)
   292d8:	d8000415 	stw	zero,16(sp)
   292dc:	003fd906 	br	29244 <__floatunsidf+0x5c>
   292e0:	800ad07a 	srli	r5,r16,1
   292e4:	010007c4 	movi	r4,31
   292e8:	20c9c83a 	sub	r4,r4,r3
   292ec:	2908d83a 	srl	r4,r5,r4
   292f0:	80e0983a 	sll	r16,r16,r3
   292f4:	003fce06 	br	29230 <__floatunsidf+0x48>
   292f8:	01400044 	movi	r5,1
   292fc:	28ca983a 	sll	r5,r5,r3
   29300:	003fe206 	br	2928c <__floatunsidf+0xa4>

00029304 <udivmodsi4>:
   29304:	2005883a 	mov	r2,r4
   29308:	2900182e 	bgeu	r5,r4,2936c <udivmodsi4+0x68>
   2930c:	28001716 	blt	r5,zero,2936c <udivmodsi4+0x68>
   29310:	01000804 	movi	r4,32
   29314:	00c00044 	movi	r3,1
   29318:	00000206 	br	29324 <udivmodsi4+0x20>
   2931c:	20001126 	beq	r4,zero,29364 <udivmodsi4+0x60>
   29320:	28000516 	blt	r5,zero,29338 <udivmodsi4+0x34>
   29324:	294b883a 	add	r5,r5,r5
   29328:	213fffc4 	addi	r4,r4,-1
   2932c:	18c7883a 	add	r3,r3,r3
   29330:	28bffa36 	bltu	r5,r2,2931c <udivmodsi4+0x18>
   29334:	18000b26 	beq	r3,zero,29364 <udivmodsi4+0x60>
   29338:	0009883a 	mov	r4,zero
   2933c:	11400236 	bltu	r2,r5,29348 <udivmodsi4+0x44>
   29340:	1145c83a 	sub	r2,r2,r5
   29344:	20c8b03a 	or	r4,r4,r3
   29348:	1806d07a 	srli	r3,r3,1
   2934c:	280ad07a 	srli	r5,r5,1
   29350:	183ffa1e 	bne	r3,zero,2933c <udivmodsi4+0x38>
   29354:	3000021e 	bne	r6,zero,29360 <udivmodsi4+0x5c>
   29358:	2005883a 	mov	r2,r4
   2935c:	f800283a 	ret
   29360:	f800283a 	ret
   29364:	0009883a 	mov	r4,zero
   29368:	003ffa06 	br	29354 <udivmodsi4+0x50>
   2936c:	00c00044 	movi	r3,1
   29370:	0009883a 	mov	r4,zero
   29374:	003ff106 	br	2933c <udivmodsi4+0x38>

00029378 <__divsi3>:
   29378:	defffe04 	addi	sp,sp,-8
   2937c:	dfc00115 	stw	ra,4(sp)
   29380:	dc000015 	stw	r16,0(sp)
   29384:	20000a16 	blt	r4,zero,293b0 <__divsi3+0x38>
   29388:	0021883a 	mov	r16,zero
   2938c:	28000b16 	blt	r5,zero,293bc <__divsi3+0x44>
   29390:	000d883a 	mov	r6,zero
   29394:	00293040 	call	29304 <udivmodsi4>
   29398:	80000126 	beq	r16,zero,293a0 <__divsi3+0x28>
   2939c:	0085c83a 	sub	r2,zero,r2
   293a0:	dfc00117 	ldw	ra,4(sp)
   293a4:	dc000017 	ldw	r16,0(sp)
   293a8:	dec00204 	addi	sp,sp,8
   293ac:	f800283a 	ret
   293b0:	0109c83a 	sub	r4,zero,r4
   293b4:	04000044 	movi	r16,1
   293b8:	283ff50e 	bge	r5,zero,29390 <__divsi3+0x18>
   293bc:	014bc83a 	sub	r5,zero,r5
   293c0:	8400005c 	xori	r16,r16,1
   293c4:	003ff206 	br	29390 <__divsi3+0x18>

000293c8 <__modsi3>:
   293c8:	deffff04 	addi	sp,sp,-4
   293cc:	dfc00015 	stw	ra,0(sp)
   293d0:	20000516 	blt	r4,zero,293e8 <__modsi3+0x20>
   293d4:	28000c16 	blt	r5,zero,29408 <__modsi3+0x40>
   293d8:	01800044 	movi	r6,1
   293dc:	dfc00017 	ldw	ra,0(sp)
   293e0:	dec00104 	addi	sp,sp,4
   293e4:	00293041 	jmpi	29304 <udivmodsi4>
   293e8:	0109c83a 	sub	r4,zero,r4
   293ec:	28000b16 	blt	r5,zero,2941c <__modsi3+0x54>
   293f0:	01800044 	movi	r6,1
   293f4:	00293040 	call	29304 <udivmodsi4>
   293f8:	0085c83a 	sub	r2,zero,r2
   293fc:	dfc00017 	ldw	ra,0(sp)
   29400:	dec00104 	addi	sp,sp,4
   29404:	f800283a 	ret
   29408:	014bc83a 	sub	r5,zero,r5
   2940c:	01800044 	movi	r6,1
   29410:	dfc00017 	ldw	ra,0(sp)
   29414:	dec00104 	addi	sp,sp,4
   29418:	00293041 	jmpi	29304 <udivmodsi4>
   2941c:	014bc83a 	sub	r5,zero,r5
   29420:	003ff306 	br	293f0 <__modsi3+0x28>

00029424 <__udivsi3>:
   29424:	000d883a 	mov	r6,zero
   29428:	00293041 	jmpi	29304 <udivmodsi4>

0002942c <__umodsi3>:
   2942c:	01800044 	movi	r6,1
   29430:	00293041 	jmpi	29304 <udivmodsi4>

00029434 <__mulsi3>:
   29434:	0005883a 	mov	r2,zero
   29438:	20000726 	beq	r4,zero,29458 <__mulsi3+0x24>
   2943c:	20c0004c 	andi	r3,r4,1
   29440:	2008d07a 	srli	r4,r4,1
   29444:	18000126 	beq	r3,zero,2944c <__mulsi3+0x18>
   29448:	1145883a 	add	r2,r2,r5
   2944c:	294b883a 	add	r5,r5,r5
   29450:	203ffa1e 	bne	r4,zero,2943c <__mulsi3+0x8>
   29454:	f800283a 	ret
   29458:	f800283a 	ret

0002945c <__muldi3>:
   2945c:	defff604 	addi	sp,sp,-40
   29460:	dd400515 	stw	r21,20(sp)
   29464:	dd000415 	stw	r20,16(sp)
   29468:	257fffcc 	andi	r21,r4,65535
   2946c:	353fffcc 	andi	r20,r6,65535
   29470:	dcc00315 	stw	r19,12(sp)
   29474:	3026d43a 	srli	r19,r6,16
   29478:	dd800615 	stw	r22,24(sp)
   2947c:	dc800215 	stw	r18,8(sp)
   29480:	dc400115 	stw	r17,4(sp)
   29484:	2024d43a 	srli	r18,r4,16
   29488:	2023883a 	mov	r17,r4
   2948c:	282d883a 	mov	r22,r5
   29490:	a009883a 	mov	r4,r20
   29494:	a80b883a 	mov	r5,r21
   29498:	dfc00915 	stw	ra,36(sp)
   2949c:	df000815 	stw	fp,32(sp)
   294a0:	ddc00715 	stw	r23,28(sp)
   294a4:	3839883a 	mov	fp,r7
   294a8:	dc000015 	stw	r16,0(sp)
   294ac:	3021883a 	mov	r16,r6
   294b0:	00294340 	call	29434 <__mulsi3>
   294b4:	a80b883a 	mov	r5,r21
   294b8:	9809883a 	mov	r4,r19
   294bc:	102f883a 	mov	r23,r2
   294c0:	00294340 	call	29434 <__mulsi3>
   294c4:	a009883a 	mov	r4,r20
   294c8:	900b883a 	mov	r5,r18
   294cc:	102b883a 	mov	r21,r2
   294d0:	00294340 	call	29434 <__mulsi3>
   294d4:	9809883a 	mov	r4,r19
   294d8:	900b883a 	mov	r5,r18
   294dc:	1029883a 	mov	r20,r2
   294e0:	00294340 	call	29434 <__mulsi3>
   294e4:	1007883a 	mov	r3,r2
   294e8:	b804d43a 	srli	r2,r23,16
   294ec:	a549883a 	add	r4,r20,r21
   294f0:	2089883a 	add	r4,r4,r2
   294f4:	2500022e 	bgeu	r4,r20,29500 <__muldi3+0xa4>
   294f8:	00800074 	movhi	r2,1
   294fc:	1887883a 	add	r3,r3,r2
   29500:	200cd43a 	srli	r6,r4,16
   29504:	2004943a 	slli	r2,r4,16
   29508:	e00b883a 	mov	r5,fp
   2950c:	8809883a 	mov	r4,r17
   29510:	bdffffcc 	andi	r23,r23,65535
   29514:	19a3883a 	add	r17,r3,r6
   29518:	15ef883a 	add	r23,r2,r23
   2951c:	00294340 	call	29434 <__mulsi3>
   29520:	8009883a 	mov	r4,r16
   29524:	b00b883a 	mov	r5,r22
   29528:	1025883a 	mov	r18,r2
   2952c:	00294340 	call	29434 <__mulsi3>
   29530:	9085883a 	add	r2,r18,r2
   29534:	1447883a 	add	r3,r2,r17
   29538:	b805883a 	mov	r2,r23
   2953c:	dfc00917 	ldw	ra,36(sp)
   29540:	df000817 	ldw	fp,32(sp)
   29544:	ddc00717 	ldw	r23,28(sp)
   29548:	dd800617 	ldw	r22,24(sp)
   2954c:	dd400517 	ldw	r21,20(sp)
   29550:	dd000417 	ldw	r20,16(sp)
   29554:	dcc00317 	ldw	r19,12(sp)
   29558:	dc800217 	ldw	r18,8(sp)
   2955c:	dc400117 	ldw	r17,4(sp)
   29560:	dc000017 	ldw	r16,0(sp)
   29564:	dec00a04 	addi	sp,sp,40
   29568:	f800283a 	ret

0002956c <__clzsi2>:
   2956c:	00bfffd4 	movui	r2,65535
   29570:	11000b36 	bltu	r2,r4,295a0 <__clzsi2+0x34>
   29574:	00803fc4 	movi	r2,255
   29578:	11001e2e 	bgeu	r2,r4,295f4 <__clzsi2+0x88>
   2957c:	00c00204 	movi	r3,8
   29580:	20c8d83a 	srl	r4,r4,r3
   29584:	00c000f4 	movhi	r3,3
   29588:	18f26404 	addi	r3,r3,-13936
   2958c:	00800604 	movi	r2,24
   29590:	1909883a 	add	r4,r3,r4
   29594:	20c00003 	ldbu	r3,0(r4)
   29598:	10c5c83a 	sub	r2,r2,r3
   2959c:	f800283a 	ret
   295a0:	00804034 	movhi	r2,256
   295a4:	10bfffc4 	addi	r2,r2,-1
   295a8:	11000936 	bltu	r2,r4,295d0 <__clzsi2+0x64>
   295ac:	00800404 	movi	r2,16
   295b0:	1007883a 	mov	r3,r2
   295b4:	20c8d83a 	srl	r4,r4,r3
   295b8:	00c000f4 	movhi	r3,3
   295bc:	18f26404 	addi	r3,r3,-13936
   295c0:	1909883a 	add	r4,r3,r4
   295c4:	20c00003 	ldbu	r3,0(r4)
   295c8:	10c5c83a 	sub	r2,r2,r3
   295cc:	f800283a 	ret
   295d0:	00c00604 	movi	r3,24
   295d4:	20c8d83a 	srl	r4,r4,r3
   295d8:	00c000f4 	movhi	r3,3
   295dc:	18f26404 	addi	r3,r3,-13936
   295e0:	00800204 	movi	r2,8
   295e4:	1909883a 	add	r4,r3,r4
   295e8:	20c00003 	ldbu	r3,0(r4)
   295ec:	10c5c83a 	sub	r2,r2,r3
   295f0:	f800283a 	ret
   295f4:	0007883a 	mov	r3,zero
   295f8:	20c8d83a 	srl	r4,r4,r3
   295fc:	00c000f4 	movhi	r3,3
   29600:	18f26404 	addi	r3,r3,-13936
   29604:	00800804 	movi	r2,32
   29608:	1909883a 	add	r4,r3,r4
   2960c:	20c00003 	ldbu	r3,0(r4)
   29610:	10c5c83a 	sub	r2,r2,r3
   29614:	f800283a 	ret

00029618 <__pack_d>:
   29618:	20800017 	ldw	r2,0(r4)
   2961c:	defff804 	addi	sp,sp,-32
   29620:	dcc00315 	stw	r19,12(sp)
   29624:	dc800215 	stw	r18,8(sp)
   29628:	dfc00715 	stw	ra,28(sp)
   2962c:	dd800615 	stw	r22,24(sp)
   29630:	dd400515 	stw	r21,20(sp)
   29634:	dd000415 	stw	r20,16(sp)
   29638:	dc400115 	stw	r17,4(sp)
   2963c:	dc000015 	stw	r16,0(sp)
   29640:	04800044 	movi	r18,1
   29644:	24400317 	ldw	r17,12(r4)
   29648:	24000417 	ldw	r16,16(r4)
   2964c:	24c00117 	ldw	r19,4(r4)
   29650:	9080422e 	bgeu	r18,r2,2975c <__pack_d+0x144>
   29654:	00c00104 	movi	r3,4
   29658:	10c03c26 	beq	r2,r3,2974c <__pack_d+0x134>
   2965c:	00c00084 	movi	r3,2
   29660:	10c01926 	beq	r2,r3,296c8 <__pack_d+0xb0>
   29664:	8c04b03a 	or	r2,r17,r16
   29668:	10001726 	beq	r2,zero,296c8 <__pack_d+0xb0>
   2966c:	21000217 	ldw	r4,8(r4)
   29670:	00bf0084 	movi	r2,-1022
   29674:	20804016 	blt	r4,r2,29778 <__pack_d+0x160>
   29678:	0080ffc4 	movi	r2,1023
   2967c:	11003316 	blt	r2,r4,2974c <__pack_d+0x134>
   29680:	88803fcc 	andi	r2,r17,255
   29684:	00c02004 	movi	r3,128
   29688:	10c02926 	beq	r2,r3,29730 <__pack_d+0x118>
   2968c:	88801fc4 	addi	r2,r17,127
   29690:	1463803a 	cmpltu	r17,r2,r17
   29694:	8c21883a 	add	r16,r17,r16
   29698:	1023883a 	mov	r17,r2
   2969c:	00880034 	movhi	r2,8192
   296a0:	10bfffc4 	addi	r2,r2,-1
   296a4:	14001c36 	bltu	r2,r16,29718 <__pack_d+0x100>
   296a8:	2100ffc4 	addi	r4,r4,1023
   296ac:	8006963a 	slli	r3,r16,24
   296b0:	8804d23a 	srli	r2,r17,8
   296b4:	8020913a 	slli	r16,r16,4
   296b8:	2101ffcc 	andi	r4,r4,2047
   296bc:	1884b03a 	or	r2,r3,r2
   296c0:	8020d33a 	srli	r16,r16,12
   296c4:	00000306 	br	296d4 <__pack_d+0xbc>
   296c8:	0009883a 	mov	r4,zero
   296cc:	0005883a 	mov	r2,zero
   296d0:	0021883a 	mov	r16,zero
   296d4:	2008953a 	slli	r4,r4,20
   296d8:	982697fa 	slli	r19,r19,31
   296dc:	00c00434 	movhi	r3,16
   296e0:	18ffffc4 	addi	r3,r3,-1
   296e4:	80e0703a 	and	r16,r16,r3
   296e8:	8106b03a 	or	r3,r16,r4
   296ec:	1cc6b03a 	or	r3,r3,r19
   296f0:	dfc00717 	ldw	ra,28(sp)
   296f4:	dd800617 	ldw	r22,24(sp)
   296f8:	dd400517 	ldw	r21,20(sp)
   296fc:	dd000417 	ldw	r20,16(sp)
   29700:	dcc00317 	ldw	r19,12(sp)
   29704:	dc800217 	ldw	r18,8(sp)
   29708:	dc400117 	ldw	r17,4(sp)
   2970c:	dc000017 	ldw	r16,0(sp)
   29710:	dec00804 	addi	sp,sp,32
   29714:	f800283a 	ret
   29718:	800697fa 	slli	r3,r16,31
   2971c:	8804d07a 	srli	r2,r17,1
   29720:	21010004 	addi	r4,r4,1024
   29724:	8020d07a 	srli	r16,r16,1
   29728:	18a2b03a 	or	r17,r3,r2
   2972c:	003fdf06 	br	296ac <__pack_d+0x94>
   29730:	88c0400c 	andi	r3,r17,256
   29734:	183fd926 	beq	r3,zero,2969c <__pack_d+0x84>
   29738:	8885883a 	add	r2,r17,r2
   2973c:	1463803a 	cmpltu	r17,r2,r17
   29740:	8c21883a 	add	r16,r17,r16
   29744:	1023883a 	mov	r17,r2
   29748:	003fd406 	br	2969c <__pack_d+0x84>
   2974c:	0101ffc4 	movi	r4,2047
   29750:	0005883a 	mov	r2,zero
   29754:	0021883a 	mov	r16,zero
   29758:	003fde06 	br	296d4 <__pack_d+0xbc>
   2975c:	84000234 	orhi	r16,r16,8
   29760:	00c00434 	movhi	r3,16
   29764:	18ffffc4 	addi	r3,r3,-1
   29768:	8805883a 	mov	r2,r17
   2976c:	80e0703a 	and	r16,r16,r3
   29770:	0101ffc4 	movi	r4,2047
   29774:	003fd706 	br	296d4 <__pack_d+0xbc>
   29778:	1129c83a 	sub	r20,r2,r4
   2977c:	00800e04 	movi	r2,56
   29780:	15002716 	blt	r2,r20,29820 <__pack_d+0x208>
   29784:	800b883a 	mov	r5,r16
   29788:	a00d883a 	mov	r6,r20
   2978c:	8809883a 	mov	r4,r17
   29790:	0029a100 	call	29a10 <__lshrdi3>
   29794:	9009883a 	mov	r4,r18
   29798:	000b883a 	mov	r5,zero
   2979c:	a00d883a 	mov	r6,r20
   297a0:	102d883a 	mov	r22,r2
   297a4:	182b883a 	mov	r21,r3
   297a8:	0029a540 	call	29a54 <__ashldi3>
   297ac:	1009003a 	cmpeq	r4,r2,zero
   297b0:	1907c83a 	sub	r3,r3,r4
   297b4:	10bfffc4 	addi	r2,r2,-1
   297b8:	1c20703a 	and	r16,r3,r16
   297bc:	1444703a 	and	r2,r2,r17
   297c0:	1404b03a 	or	r2,r2,r16
   297c4:	1004c03a 	cmpne	r2,r2,zero
   297c8:	1584b03a 	or	r2,r2,r22
   297cc:	11003fcc 	andi	r4,r2,255
   297d0:	01402004 	movi	r5,128
   297d4:	a807883a 	mov	r3,r21
   297d8:	2140131e 	bne	r4,r5,29828 <__pack_d+0x210>
   297dc:	1140400c 	andi	r5,r2,256
   297e0:	28000426 	beq	r5,zero,297f4 <__pack_d+0x1dc>
   297e4:	1109883a 	add	r4,r2,r4
   297e8:	2085803a 	cmpltu	r2,r4,r2
   297ec:	1547883a 	add	r3,r2,r21
   297f0:	2005883a 	mov	r2,r4
   297f4:	1808963a 	slli	r4,r3,24
   297f8:	1004d23a 	srli	r2,r2,8
   297fc:	1820913a 	slli	r16,r3,4
   29800:	01440034 	movhi	r5,4096
   29804:	297fffc4 	addi	r5,r5,-1
   29808:	2084b03a 	or	r2,r4,r2
   2980c:	8020d33a 	srli	r16,r16,12
   29810:	01000044 	movi	r4,1
   29814:	28ffaf36 	bltu	r5,r3,296d4 <__pack_d+0xbc>
   29818:	0009883a 	mov	r4,zero
   2981c:	003fad06 	br	296d4 <__pack_d+0xbc>
   29820:	0005883a 	mov	r2,zero
   29824:	0007883a 	mov	r3,zero
   29828:	11001fc4 	addi	r4,r2,127
   2982c:	2085803a 	cmpltu	r2,r4,r2
   29830:	10c7883a 	add	r3,r2,r3
   29834:	2005883a 	mov	r2,r4
   29838:	003fee06 	br	297f4 <__pack_d+0x1dc>

0002983c <__unpack_d>:
   2983c:	21800117 	ldw	r6,4(r4)
   29840:	20c00017 	ldw	r3,0(r4)
   29844:	3004d7fa 	srli	r2,r6,31
   29848:	3008d53a 	srli	r4,r6,20
   2984c:	28800115 	stw	r2,4(r5)
   29850:	2101ffcc 	andi	r4,r4,2047
   29854:	00800434 	movhi	r2,16
   29858:	10bfffc4 	addi	r2,r2,-1
   2985c:	3084703a 	and	r2,r6,r2
   29860:	20001a1e 	bne	r4,zero,298cc <__unpack_d+0x90>
   29864:	1888b03a 	or	r4,r3,r2
   29868:	20002626 	beq	r4,zero,29904 <__unpack_d+0xc8>
   2986c:	1808d63a 	srli	r4,r3,24
   29870:	1004923a 	slli	r2,r2,8
   29874:	01bf0084 	movi	r6,-1022
   29878:	29800215 	stw	r6,8(r5)
   2987c:	2084b03a 	or	r2,r4,r2
   29880:	010000c4 	movi	r4,3
   29884:	29000015 	stw	r4,0(r5)
   29888:	02040034 	movhi	r8,4096
   2988c:	423fffc4 	addi	r8,r8,-1
   29890:	1806923a 	slli	r3,r3,8
   29894:	40801836 	bltu	r8,r2,298f8 <__unpack_d+0xbc>
   29898:	013f0044 	movi	r4,-1023
   2989c:	18cd883a 	add	r6,r3,r3
   298a0:	30c7803a 	cmpltu	r3,r6,r3
   298a4:	1085883a 	add	r2,r2,r2
   298a8:	1885883a 	add	r2,r3,r2
   298ac:	200f883a 	mov	r7,r4
   298b0:	3007883a 	mov	r3,r6
   298b4:	213fffc4 	addi	r4,r4,-1
   298b8:	40bff82e 	bgeu	r8,r2,2989c <__unpack_d+0x60>
   298bc:	29c00215 	stw	r7,8(r5)
   298c0:	28c00315 	stw	r3,12(r5)
   298c4:	28800415 	stw	r2,16(r5)
   298c8:	f800283a 	ret
   298cc:	01c1ffc4 	movi	r7,2047
   298d0:	21c00f26 	beq	r4,r7,29910 <__unpack_d+0xd4>
   298d4:	180cd63a 	srli	r6,r3,24
   298d8:	1004923a 	slli	r2,r2,8
   298dc:	213f0044 	addi	r4,r4,-1023
   298e0:	1806923a 	slli	r3,r3,8
   298e4:	3084b03a 	or	r2,r6,r2
   298e8:	29000215 	stw	r4,8(r5)
   298ec:	010000c4 	movi	r4,3
   298f0:	10840034 	orhi	r2,r2,4096
   298f4:	29000015 	stw	r4,0(r5)
   298f8:	28c00315 	stw	r3,12(r5)
   298fc:	28800415 	stw	r2,16(r5)
   29900:	f800283a 	ret
   29904:	00800084 	movi	r2,2
   29908:	28800015 	stw	r2,0(r5)
   2990c:	f800283a 	ret
   29910:	1888b03a 	or	r4,r3,r2
   29914:	20000526 	beq	r4,zero,2992c <__unpack_d+0xf0>
   29918:	3180022c 	andhi	r6,r6,8
   2991c:	30000626 	beq	r6,zero,29938 <__unpack_d+0xfc>
   29920:	01000044 	movi	r4,1
   29924:	29000015 	stw	r4,0(r5)
   29928:	003ff306 	br	298f8 <__unpack_d+0xbc>
   2992c:	00800104 	movi	r2,4
   29930:	28800015 	stw	r2,0(r5)
   29934:	f800283a 	ret
   29938:	28000015 	stw	zero,0(r5)
   2993c:	003fee06 	br	298f8 <__unpack_d+0xbc>

00029940 <__fpcmp_parts_d>:
   29940:	20c00017 	ldw	r3,0(r4)
   29944:	00800044 	movi	r2,1
   29948:	10c0142e 	bgeu	r2,r3,2999c <__fpcmp_parts_d+0x5c>
   2994c:	29800017 	ldw	r6,0(r5)
   29950:	1180122e 	bgeu	r2,r6,2999c <__fpcmp_parts_d+0x5c>
   29954:	01c00104 	movi	r7,4
   29958:	19c02826 	beq	r3,r7,299fc <__fpcmp_parts_d+0xbc>
   2995c:	31c00926 	beq	r6,r7,29984 <__fpcmp_parts_d+0x44>
   29960:	01c00084 	movi	r7,2
   29964:	19c00626 	beq	r3,r7,29980 <__fpcmp_parts_d+0x40>
   29968:	31c00a26 	beq	r6,r7,29994 <__fpcmp_parts_d+0x54>
   2996c:	20c00117 	ldw	r3,4(r4)
   29970:	29800117 	ldw	r6,4(r5)
   29974:	19800b26 	beq	r3,r6,299a4 <__fpcmp_parts_d+0x64>
   29978:	1800041e 	bne	r3,zero,2998c <__fpcmp_parts_d+0x4c>
   2997c:	f800283a 	ret
   29980:	30c01a26 	beq	r6,r3,299ec <__fpcmp_parts_d+0xac>
   29984:	28800117 	ldw	r2,4(r5)
   29988:	1000041e 	bne	r2,zero,2999c <__fpcmp_parts_d+0x5c>
   2998c:	00bfffc4 	movi	r2,-1
   29990:	f800283a 	ret
   29994:	20800117 	ldw	r2,4(r4)
   29998:	103ffc1e 	bne	r2,zero,2998c <__fpcmp_parts_d+0x4c>
   2999c:	00800044 	movi	r2,1
   299a0:	f800283a 	ret
   299a4:	21c00217 	ldw	r7,8(r4)
   299a8:	29800217 	ldw	r6,8(r5)
   299ac:	31c0020e 	bge	r6,r7,299b8 <__fpcmp_parts_d+0x78>
   299b0:	183ff61e 	bne	r3,zero,2998c <__fpcmp_parts_d+0x4c>
   299b4:	f800283a 	ret
   299b8:	39800a16 	blt	r7,r6,299e4 <__fpcmp_parts_d+0xa4>
   299bc:	20800417 	ldw	r2,16(r4)
   299c0:	29800417 	ldw	r6,16(r5)
   299c4:	21c00317 	ldw	r7,12(r4)
   299c8:	29000317 	ldw	r4,12(r5)
   299cc:	30800936 	bltu	r6,r2,299f4 <__fpcmp_parts_d+0xb4>
   299d0:	1180011e 	bne	r2,r6,299d8 <__fpcmp_parts_d+0x98>
   299d4:	21c00736 	bltu	r4,r7,299f4 <__fpcmp_parts_d+0xb4>
   299d8:	11800236 	bltu	r2,r6,299e4 <__fpcmp_parts_d+0xa4>
   299dc:	3080031e 	bne	r6,r2,299ec <__fpcmp_parts_d+0xac>
   299e0:	3900022e 	bgeu	r7,r4,299ec <__fpcmp_parts_d+0xac>
   299e4:	183fe926 	beq	r3,zero,2998c <__fpcmp_parts_d+0x4c>
   299e8:	003fec06 	br	2999c <__fpcmp_parts_d+0x5c>
   299ec:	0005883a 	mov	r2,zero
   299f0:	f800283a 	ret
   299f4:	183fe926 	beq	r3,zero,2999c <__fpcmp_parts_d+0x5c>
   299f8:	003fe406 	br	2998c <__fpcmp_parts_d+0x4c>
   299fc:	30ffe51e 	bne	r6,r3,29994 <__fpcmp_parts_d+0x54>
   29a00:	28c00117 	ldw	r3,4(r5)
   29a04:	20800117 	ldw	r2,4(r4)
   29a08:	1885c83a 	sub	r2,r3,r2
   29a0c:	f800283a 	ret

00029a10 <__lshrdi3>:
   29a10:	2005883a 	mov	r2,r4
   29a14:	2807883a 	mov	r3,r5
   29a18:	30000826 	beq	r6,zero,29a3c <__lshrdi3+0x2c>
   29a1c:	01000804 	movi	r4,32
   29a20:	2189c83a 	sub	r4,r4,r6
   29a24:	0100060e 	bge	zero,r4,29a40 <__lshrdi3+0x30>
   29a28:	1184d83a 	srl	r2,r2,r6
   29a2c:	2908983a 	sll	r4,r5,r4
   29a30:	298cd83a 	srl	r6,r5,r6
   29a34:	2084b03a 	or	r2,r4,r2
   29a38:	3007883a 	mov	r3,r6
   29a3c:	f800283a 	ret
   29a40:	0105c83a 	sub	r2,zero,r4
   29a44:	000d883a 	mov	r6,zero
   29a48:	2884d83a 	srl	r2,r5,r2
   29a4c:	3007883a 	mov	r3,r6
   29a50:	003ffa06 	br	29a3c <__lshrdi3+0x2c>

00029a54 <__ashldi3>:
   29a54:	2005883a 	mov	r2,r4
   29a58:	2807883a 	mov	r3,r5
   29a5c:	30000826 	beq	r6,zero,29a80 <__ashldi3+0x2c>
   29a60:	01000804 	movi	r4,32
   29a64:	2189c83a 	sub	r4,r4,r6
   29a68:	0100060e 	bge	zero,r4,29a84 <__ashldi3+0x30>
   29a6c:	1108d83a 	srl	r4,r2,r4
   29a70:	2986983a 	sll	r3,r5,r6
   29a74:	118c983a 	sll	r6,r2,r6
   29a78:	20c6b03a 	or	r3,r4,r3
   29a7c:	3005883a 	mov	r2,r6
   29a80:	f800283a 	ret
   29a84:	0107c83a 	sub	r3,zero,r4
   29a88:	000d883a 	mov	r6,zero
   29a8c:	10c6983a 	sll	r3,r2,r3
   29a90:	3005883a 	mov	r2,r6
   29a94:	003ffa06 	br	29a80 <__ashldi3+0x2c>

00029a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29a98:	defffe04 	addi	sp,sp,-8
   29a9c:	dfc00115 	stw	ra,4(sp)
   29aa0:	df000015 	stw	fp,0(sp)
   29aa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29aa8:	008000f4 	movhi	r2,3
   29aac:	10b94204 	addi	r2,r2,-6904
   29ab0:	10800017 	ldw	r2,0(r2)
   29ab4:	10000526 	beq	r2,zero,29acc <alt_get_errno+0x34>
   29ab8:	008000f4 	movhi	r2,3
   29abc:	10b94204 	addi	r2,r2,-6904
   29ac0:	10800017 	ldw	r2,0(r2)
   29ac4:	103ee83a 	callr	r2
   29ac8:	00000206 	br	29ad4 <alt_get_errno+0x3c>
   29acc:	008000f4 	movhi	r2,3
   29ad0:	10bfe304 	addi	r2,r2,-116
}
   29ad4:	e037883a 	mov	sp,fp
   29ad8:	dfc00117 	ldw	ra,4(sp)
   29adc:	df000017 	ldw	fp,0(sp)
   29ae0:	dec00204 	addi	sp,sp,8
   29ae4:	f800283a 	ret

00029ae8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   29ae8:	defffb04 	addi	sp,sp,-20
   29aec:	dfc00415 	stw	ra,16(sp)
   29af0:	df000315 	stw	fp,12(sp)
   29af4:	df000304 	addi	fp,sp,12
   29af8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   29afc:	e0bfff17 	ldw	r2,-4(fp)
   29b00:	10000716 	blt	r2,zero,29b20 <close+0x38>
   29b04:	e13fff17 	ldw	r4,-4(fp)
   29b08:	01400304 	movi	r5,12
   29b0c:	00294340 	call	29434 <__mulsi3>
   29b10:	00c000f4 	movhi	r3,3
   29b14:	18f4c004 	addi	r3,r3,-11520
   29b18:	10c5883a 	add	r2,r2,r3
   29b1c:	00000106 	br	29b24 <close+0x3c>
   29b20:	0005883a 	mov	r2,zero
   29b24:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   29b28:	e0bffd17 	ldw	r2,-12(fp)
   29b2c:	10001826 	beq	r2,zero,29b90 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   29b30:	e0bffd17 	ldw	r2,-12(fp)
   29b34:	10800017 	ldw	r2,0(r2)
   29b38:	10800417 	ldw	r2,16(r2)
   29b3c:	10000626 	beq	r2,zero,29b58 <close+0x70>
   29b40:	e0bffd17 	ldw	r2,-12(fp)
   29b44:	10800017 	ldw	r2,0(r2)
   29b48:	10800417 	ldw	r2,16(r2)
   29b4c:	e13ffd17 	ldw	r4,-12(fp)
   29b50:	103ee83a 	callr	r2
   29b54:	00000106 	br	29b5c <close+0x74>
   29b58:	0005883a 	mov	r2,zero
   29b5c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   29b60:	e13fff17 	ldw	r4,-4(fp)
   29b64:	002a1e00 	call	2a1e0 <alt_release_fd>
    if (rval < 0)
   29b68:	e0bffe17 	ldw	r2,-8(fp)
   29b6c:	1000060e 	bge	r2,zero,29b88 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   29b70:	0029a980 	call	29a98 <alt_get_errno>
   29b74:	e0fffe17 	ldw	r3,-8(fp)
   29b78:	00c7c83a 	sub	r3,zero,r3
   29b7c:	10c00015 	stw	r3,0(r2)
      return -1;
   29b80:	00bfffc4 	movi	r2,-1
   29b84:	00000606 	br	29ba0 <close+0xb8>
    }
    return 0;
   29b88:	0005883a 	mov	r2,zero
   29b8c:	00000406 	br	29ba0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29b90:	0029a980 	call	29a98 <alt_get_errno>
   29b94:	00c01444 	movi	r3,81
   29b98:	10c00015 	stw	r3,0(r2)
    return -1;
   29b9c:	00bfffc4 	movi	r2,-1
  }
}
   29ba0:	e037883a 	mov	sp,fp
   29ba4:	dfc00117 	ldw	ra,4(sp)
   29ba8:	df000017 	ldw	fp,0(sp)
   29bac:	dec00204 	addi	sp,sp,8
   29bb0:	f800283a 	ret

00029bb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   29bb4:	defffc04 	addi	sp,sp,-16
   29bb8:	df000315 	stw	fp,12(sp)
   29bbc:	df000304 	addi	fp,sp,12
   29bc0:	e13ffd15 	stw	r4,-12(fp)
   29bc4:	e17ffe15 	stw	r5,-8(fp)
   29bc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   29bcc:	e0bfff17 	ldw	r2,-4(fp)
}
   29bd0:	e037883a 	mov	sp,fp
   29bd4:	df000017 	ldw	fp,0(sp)
   29bd8:	dec00104 	addi	sp,sp,4
   29bdc:	f800283a 	ret

00029be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29be0:	defffe04 	addi	sp,sp,-8
   29be4:	dfc00115 	stw	ra,4(sp)
   29be8:	df000015 	stw	fp,0(sp)
   29bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29bf0:	008000f4 	movhi	r2,3
   29bf4:	10b94204 	addi	r2,r2,-6904
   29bf8:	10800017 	ldw	r2,0(r2)
   29bfc:	10000526 	beq	r2,zero,29c14 <alt_get_errno+0x34>
   29c00:	008000f4 	movhi	r2,3
   29c04:	10b94204 	addi	r2,r2,-6904
   29c08:	10800017 	ldw	r2,0(r2)
   29c0c:	103ee83a 	callr	r2
   29c10:	00000206 	br	29c1c <alt_get_errno+0x3c>
   29c14:	008000f4 	movhi	r2,3
   29c18:	10bfe304 	addi	r2,r2,-116
}
   29c1c:	e037883a 	mov	sp,fp
   29c20:	dfc00117 	ldw	ra,4(sp)
   29c24:	df000017 	ldw	fp,0(sp)
   29c28:	dec00204 	addi	sp,sp,8
   29c2c:	f800283a 	ret

00029c30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   29c30:	defffb04 	addi	sp,sp,-20
   29c34:	dfc00415 	stw	ra,16(sp)
   29c38:	df000315 	stw	fp,12(sp)
   29c3c:	df000304 	addi	fp,sp,12
   29c40:	e13ffe15 	stw	r4,-8(fp)
   29c44:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29c48:	e0bffe17 	ldw	r2,-8(fp)
   29c4c:	10000716 	blt	r2,zero,29c6c <fstat+0x3c>
   29c50:	e13ffe17 	ldw	r4,-8(fp)
   29c54:	01400304 	movi	r5,12
   29c58:	00294340 	call	29434 <__mulsi3>
   29c5c:	00c000f4 	movhi	r3,3
   29c60:	18f4c004 	addi	r3,r3,-11520
   29c64:	10c5883a 	add	r2,r2,r3
   29c68:	00000106 	br	29c70 <fstat+0x40>
   29c6c:	0005883a 	mov	r2,zero
   29c70:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   29c74:	e0bffd17 	ldw	r2,-12(fp)
   29c78:	10001026 	beq	r2,zero,29cbc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   29c7c:	e0bffd17 	ldw	r2,-12(fp)
   29c80:	10800017 	ldw	r2,0(r2)
   29c84:	10800817 	ldw	r2,32(r2)
   29c88:	10000726 	beq	r2,zero,29ca8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   29c8c:	e0bffd17 	ldw	r2,-12(fp)
   29c90:	10800017 	ldw	r2,0(r2)
   29c94:	10800817 	ldw	r2,32(r2)
   29c98:	e13ffd17 	ldw	r4,-12(fp)
   29c9c:	e17fff17 	ldw	r5,-4(fp)
   29ca0:	103ee83a 	callr	r2
   29ca4:	00000906 	br	29ccc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   29ca8:	e0bfff17 	ldw	r2,-4(fp)
   29cac:	00c80004 	movi	r3,8192
   29cb0:	10c00115 	stw	r3,4(r2)
      return 0;
   29cb4:	0005883a 	mov	r2,zero
   29cb8:	00000406 	br	29ccc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29cbc:	0029be00 	call	29be0 <alt_get_errno>
   29cc0:	00c01444 	movi	r3,81
   29cc4:	10c00015 	stw	r3,0(r2)
    return -1;
   29cc8:	00bfffc4 	movi	r2,-1
  }
}
   29ccc:	e037883a 	mov	sp,fp
   29cd0:	dfc00117 	ldw	ra,4(sp)
   29cd4:	df000017 	ldw	fp,0(sp)
   29cd8:	dec00204 	addi	sp,sp,8
   29cdc:	f800283a 	ret

00029ce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29ce0:	defffe04 	addi	sp,sp,-8
   29ce4:	dfc00115 	stw	ra,4(sp)
   29ce8:	df000015 	stw	fp,0(sp)
   29cec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29cf0:	008000f4 	movhi	r2,3
   29cf4:	10b94204 	addi	r2,r2,-6904
   29cf8:	10800017 	ldw	r2,0(r2)
   29cfc:	10000526 	beq	r2,zero,29d14 <alt_get_errno+0x34>
   29d00:	008000f4 	movhi	r2,3
   29d04:	10b94204 	addi	r2,r2,-6904
   29d08:	10800017 	ldw	r2,0(r2)
   29d0c:	103ee83a 	callr	r2
   29d10:	00000206 	br	29d1c <alt_get_errno+0x3c>
   29d14:	008000f4 	movhi	r2,3
   29d18:	10bfe304 	addi	r2,r2,-116
}
   29d1c:	e037883a 	mov	sp,fp
   29d20:	dfc00117 	ldw	ra,4(sp)
   29d24:	df000017 	ldw	fp,0(sp)
   29d28:	dec00204 	addi	sp,sp,8
   29d2c:	f800283a 	ret

00029d30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   29d30:	deffed04 	addi	sp,sp,-76
   29d34:	dfc01215 	stw	ra,72(sp)
   29d38:	df001115 	stw	fp,68(sp)
   29d3c:	df001104 	addi	fp,sp,68
   29d40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29d44:	e0bfff17 	ldw	r2,-4(fp)
   29d48:	10000716 	blt	r2,zero,29d68 <isatty+0x38>
   29d4c:	e13fff17 	ldw	r4,-4(fp)
   29d50:	01400304 	movi	r5,12
   29d54:	00294340 	call	29434 <__mulsi3>
   29d58:	00c000f4 	movhi	r3,3
   29d5c:	18f4c004 	addi	r3,r3,-11520
   29d60:	10c5883a 	add	r2,r2,r3
   29d64:	00000106 	br	29d6c <isatty+0x3c>
   29d68:	0005883a 	mov	r2,zero
   29d6c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   29d70:	e0bfef17 	ldw	r2,-68(fp)
   29d74:	10000e26 	beq	r2,zero,29db0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   29d78:	e0bfef17 	ldw	r2,-68(fp)
   29d7c:	10800017 	ldw	r2,0(r2)
   29d80:	10800817 	ldw	r2,32(r2)
   29d84:	1000021e 	bne	r2,zero,29d90 <isatty+0x60>
    {
      return 1;
   29d88:	00800044 	movi	r2,1
   29d8c:	00000c06 	br	29dc0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   29d90:	e0bff004 	addi	r2,fp,-64
   29d94:	e13fff17 	ldw	r4,-4(fp)
   29d98:	100b883a 	mov	r5,r2
   29d9c:	0029c300 	call	29c30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   29da0:	e0bff117 	ldw	r2,-60(fp)
   29da4:	10880020 	cmpeqi	r2,r2,8192
   29da8:	10803fcc 	andi	r2,r2,255
   29dac:	00000406 	br	29dc0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29db0:	0029ce00 	call	29ce0 <alt_get_errno>
   29db4:	00c01444 	movi	r3,81
   29db8:	10c00015 	stw	r3,0(r2)
    return 0;
   29dbc:	0005883a 	mov	r2,zero
  }
}
   29dc0:	e037883a 	mov	sp,fp
   29dc4:	dfc00117 	ldw	ra,4(sp)
   29dc8:	df000017 	ldw	fp,0(sp)
   29dcc:	dec00204 	addi	sp,sp,8
   29dd0:	f800283a 	ret

00029dd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   29dd4:	defffc04 	addi	sp,sp,-16
   29dd8:	df000315 	stw	fp,12(sp)
   29ddc:	df000304 	addi	fp,sp,12
   29de0:	e13ffd15 	stw	r4,-12(fp)
   29de4:	e17ffe15 	stw	r5,-8(fp)
   29de8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   29dec:	e0fffe17 	ldw	r3,-8(fp)
   29df0:	e0bffd17 	ldw	r2,-12(fp)
   29df4:	18800e26 	beq	r3,r2,29e30 <alt_load_section+0x5c>
  {
    while( to != end )
   29df8:	00000a06 	br	29e24 <alt_load_section+0x50>
    {
      *to++ = *from++;
   29dfc:	e0bffd17 	ldw	r2,-12(fp)
   29e00:	10c00017 	ldw	r3,0(r2)
   29e04:	e0bffe17 	ldw	r2,-8(fp)
   29e08:	10c00015 	stw	r3,0(r2)
   29e0c:	e0bffe17 	ldw	r2,-8(fp)
   29e10:	10800104 	addi	r2,r2,4
   29e14:	e0bffe15 	stw	r2,-8(fp)
   29e18:	e0bffd17 	ldw	r2,-12(fp)
   29e1c:	10800104 	addi	r2,r2,4
   29e20:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   29e24:	e0fffe17 	ldw	r3,-8(fp)
   29e28:	e0bfff17 	ldw	r2,-4(fp)
   29e2c:	18bff31e 	bne	r3,r2,29dfc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   29e30:	e037883a 	mov	sp,fp
   29e34:	df000017 	ldw	fp,0(sp)
   29e38:	dec00104 	addi	sp,sp,4
   29e3c:	f800283a 	ret

00029e40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   29e40:	defffe04 	addi	sp,sp,-8
   29e44:	dfc00115 	stw	ra,4(sp)
   29e48:	df000015 	stw	fp,0(sp)
   29e4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   29e50:	010000f4 	movhi	r4,3
   29e54:	21394704 	addi	r4,r4,-6884
   29e58:	014000f4 	movhi	r5,3
   29e5c:	2972b104 	addi	r5,r5,-13628
   29e60:	018000f4 	movhi	r6,3
   29e64:	31b94704 	addi	r6,r6,-6884
   29e68:	0029dd40 	call	29dd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   29e6c:	010000b4 	movhi	r4,2
   29e70:	21000804 	addi	r4,r4,32
   29e74:	014000b4 	movhi	r5,2
   29e78:	29400804 	addi	r5,r5,32
   29e7c:	018000b4 	movhi	r6,2
   29e80:	31806e04 	addi	r6,r6,440
   29e84:	0029dd40 	call	29dd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   29e88:	010000f4 	movhi	r4,3
   29e8c:	2131d404 	addi	r4,r4,-14512
   29e90:	014000f4 	movhi	r5,3
   29e94:	2971d404 	addi	r5,r5,-14512
   29e98:	018000f4 	movhi	r6,3
   29e9c:	31b2b104 	addi	r6,r6,-13628
   29ea0:	0029dd40 	call	29dd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   29ea4:	002b6b00 	call	2b6b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   29ea8:	002b8740 	call	2b874 <alt_icache_flush_all>
}
   29eac:	e037883a 	mov	sp,fp
   29eb0:	dfc00117 	ldw	ra,4(sp)
   29eb4:	df000017 	ldw	fp,0(sp)
   29eb8:	dec00204 	addi	sp,sp,8
   29ebc:	f800283a 	ret

00029ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29ec0:	defffe04 	addi	sp,sp,-8
   29ec4:	dfc00115 	stw	ra,4(sp)
   29ec8:	df000015 	stw	fp,0(sp)
   29ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29ed0:	008000f4 	movhi	r2,3
   29ed4:	10b94204 	addi	r2,r2,-6904
   29ed8:	10800017 	ldw	r2,0(r2)
   29edc:	10000526 	beq	r2,zero,29ef4 <alt_get_errno+0x34>
   29ee0:	008000f4 	movhi	r2,3
   29ee4:	10b94204 	addi	r2,r2,-6904
   29ee8:	10800017 	ldw	r2,0(r2)
   29eec:	103ee83a 	callr	r2
   29ef0:	00000206 	br	29efc <alt_get_errno+0x3c>
   29ef4:	008000f4 	movhi	r2,3
   29ef8:	10bfe304 	addi	r2,r2,-116
}
   29efc:	e037883a 	mov	sp,fp
   29f00:	dfc00117 	ldw	ra,4(sp)
   29f04:	df000017 	ldw	fp,0(sp)
   29f08:	dec00204 	addi	sp,sp,8
   29f0c:	f800283a 	ret

00029f10 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   29f10:	defff904 	addi	sp,sp,-28
   29f14:	dfc00615 	stw	ra,24(sp)
   29f18:	df000515 	stw	fp,20(sp)
   29f1c:	df000504 	addi	fp,sp,20
   29f20:	e13ffd15 	stw	r4,-12(fp)
   29f24:	e17ffe15 	stw	r5,-8(fp)
   29f28:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   29f2c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29f30:	e0bffd17 	ldw	r2,-12(fp)
   29f34:	10000716 	blt	r2,zero,29f54 <lseek+0x44>
   29f38:	e13ffd17 	ldw	r4,-12(fp)
   29f3c:	01400304 	movi	r5,12
   29f40:	00294340 	call	29434 <__mulsi3>
   29f44:	00c000f4 	movhi	r3,3
   29f48:	18f4c004 	addi	r3,r3,-11520
   29f4c:	10c5883a 	add	r2,r2,r3
   29f50:	00000106 	br	29f58 <lseek+0x48>
   29f54:	0005883a 	mov	r2,zero
   29f58:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   29f5c:	e0bffc17 	ldw	r2,-16(fp)
   29f60:	10001026 	beq	r2,zero,29fa4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   29f64:	e0bffc17 	ldw	r2,-16(fp)
   29f68:	10800017 	ldw	r2,0(r2)
   29f6c:	10800717 	ldw	r2,28(r2)
   29f70:	10000926 	beq	r2,zero,29f98 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   29f74:	e0bffc17 	ldw	r2,-16(fp)
   29f78:	10800017 	ldw	r2,0(r2)
   29f7c:	10800717 	ldw	r2,28(r2)
   29f80:	e13ffc17 	ldw	r4,-16(fp)
   29f84:	e17ffe17 	ldw	r5,-8(fp)
   29f88:	e1bfff17 	ldw	r6,-4(fp)
   29f8c:	103ee83a 	callr	r2
   29f90:	e0bffb15 	stw	r2,-20(fp)
   29f94:	00000506 	br	29fac <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   29f98:	00bfde84 	movi	r2,-134
   29f9c:	e0bffb15 	stw	r2,-20(fp)
   29fa0:	00000206 	br	29fac <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   29fa4:	00bfebc4 	movi	r2,-81
   29fa8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   29fac:	e0bffb17 	ldw	r2,-20(fp)
   29fb0:	1000060e 	bge	r2,zero,29fcc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   29fb4:	0029ec00 	call	29ec0 <alt_get_errno>
   29fb8:	e0fffb17 	ldw	r3,-20(fp)
   29fbc:	00c7c83a 	sub	r3,zero,r3
   29fc0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   29fc4:	00bfffc4 	movi	r2,-1
   29fc8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   29fcc:	e0bffb17 	ldw	r2,-20(fp)
}
   29fd0:	e037883a 	mov	sp,fp
   29fd4:	dfc00117 	ldw	ra,4(sp)
   29fd8:	df000017 	ldw	fp,0(sp)
   29fdc:	dec00204 	addi	sp,sp,8
   29fe0:	f800283a 	ret

00029fe4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   29fe4:	defffd04 	addi	sp,sp,-12
   29fe8:	dfc00215 	stw	ra,8(sp)
   29fec:	df000115 	stw	fp,4(sp)
   29ff0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   29ff4:	0009883a 	mov	r4,zero
   29ff8:	002a4880 	call	2a488 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   29ffc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2a000:	002a4bc0 	call	2a4bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2a004:	010000f4 	movhi	r4,3
   2a008:	2132a704 	addi	r4,r4,-13668
   2a00c:	014000f4 	movhi	r5,3
   2a010:	2972a704 	addi	r5,r5,-13668
   2a014:	018000f4 	movhi	r6,3
   2a018:	31b2a704 	addi	r6,r6,-13668
   2a01c:	002bc380 	call	2bc38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2a020:	002b7bc0 	call	2b7bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2a024:	010000f4 	movhi	r4,3
   2a028:	212e0604 	addi	r4,r4,-18408
   2a02c:	002c37c0 	call	2c37c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2a030:	d126ac17 	ldw	r4,-25936(gp)
   2a034:	d0e6ad17 	ldw	r3,-25932(gp)
   2a038:	d0a6ae17 	ldw	r2,-25928(gp)
   2a03c:	180b883a 	mov	r5,r3
   2a040:	100d883a 	mov	r6,r2
   2a044:	00202b00 	call	202b0 <main>
   2a048:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2a04c:	01000044 	movi	r4,1
   2a050:	0029ae80 	call	29ae8 <close>
  exit (result);
   2a054:	e13fff17 	ldw	r4,-4(fp)
   2a058:	002c3900 	call	2c390 <exit>

0002a05c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2a05c:	defffe04 	addi	sp,sp,-8
   2a060:	df000115 	stw	fp,4(sp)
   2a064:	df000104 	addi	fp,sp,4
   2a068:	e13fff15 	stw	r4,-4(fp)
}
   2a06c:	e037883a 	mov	sp,fp
   2a070:	df000017 	ldw	fp,0(sp)
   2a074:	dec00104 	addi	sp,sp,4
   2a078:	f800283a 	ret

0002a07c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2a07c:	defffe04 	addi	sp,sp,-8
   2a080:	df000115 	stw	fp,4(sp)
   2a084:	df000104 	addi	fp,sp,4
   2a088:	e13fff15 	stw	r4,-4(fp)
}
   2a08c:	e037883a 	mov	sp,fp
   2a090:	df000017 	ldw	fp,0(sp)
   2a094:	dec00104 	addi	sp,sp,4
   2a098:	f800283a 	ret

0002a09c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a09c:	defffe04 	addi	sp,sp,-8
   2a0a0:	dfc00115 	stw	ra,4(sp)
   2a0a4:	df000015 	stw	fp,0(sp)
   2a0a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a0ac:	008000f4 	movhi	r2,3
   2a0b0:	10b94204 	addi	r2,r2,-6904
   2a0b4:	10800017 	ldw	r2,0(r2)
   2a0b8:	10000526 	beq	r2,zero,2a0d0 <alt_get_errno+0x34>
   2a0bc:	008000f4 	movhi	r2,3
   2a0c0:	10b94204 	addi	r2,r2,-6904
   2a0c4:	10800017 	ldw	r2,0(r2)
   2a0c8:	103ee83a 	callr	r2
   2a0cc:	00000206 	br	2a0d8 <alt_get_errno+0x3c>
   2a0d0:	008000f4 	movhi	r2,3
   2a0d4:	10bfe304 	addi	r2,r2,-116
}
   2a0d8:	e037883a 	mov	sp,fp
   2a0dc:	dfc00117 	ldw	ra,4(sp)
   2a0e0:	df000017 	ldw	fp,0(sp)
   2a0e4:	dec00204 	addi	sp,sp,8
   2a0e8:	f800283a 	ret

0002a0ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2a0ec:	defff904 	addi	sp,sp,-28
   2a0f0:	dfc00615 	stw	ra,24(sp)
   2a0f4:	df000515 	stw	fp,20(sp)
   2a0f8:	df000504 	addi	fp,sp,20
   2a0fc:	e13ffd15 	stw	r4,-12(fp)
   2a100:	e17ffe15 	stw	r5,-8(fp)
   2a104:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a108:	e0bffd17 	ldw	r2,-12(fp)
   2a10c:	10000716 	blt	r2,zero,2a12c <read+0x40>
   2a110:	e13ffd17 	ldw	r4,-12(fp)
   2a114:	01400304 	movi	r5,12
   2a118:	00294340 	call	29434 <__mulsi3>
   2a11c:	00c000f4 	movhi	r3,3
   2a120:	18f4c004 	addi	r3,r3,-11520
   2a124:	10c5883a 	add	r2,r2,r3
   2a128:	00000106 	br	2a130 <read+0x44>
   2a12c:	0005883a 	mov	r2,zero
   2a130:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a134:	e0bffb17 	ldw	r2,-20(fp)
   2a138:	10002026 	beq	r2,zero,2a1bc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a13c:	e0bffb17 	ldw	r2,-20(fp)
   2a140:	10800217 	ldw	r2,8(r2)
   2a144:	108000cc 	andi	r2,r2,3
   2a148:	10800060 	cmpeqi	r2,r2,1
   2a14c:	1000171e 	bne	r2,zero,2a1ac <read+0xc0>
        (fd->dev->read))
   2a150:	e0bffb17 	ldw	r2,-20(fp)
   2a154:	10800017 	ldw	r2,0(r2)
   2a158:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a15c:	10001326 	beq	r2,zero,2a1ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2a160:	e0bffb17 	ldw	r2,-20(fp)
   2a164:	10800017 	ldw	r2,0(r2)
   2a168:	10c00517 	ldw	r3,20(r2)
   2a16c:	e0bfff17 	ldw	r2,-4(fp)
   2a170:	e13ffb17 	ldw	r4,-20(fp)
   2a174:	e17ffe17 	ldw	r5,-8(fp)
   2a178:	100d883a 	mov	r6,r2
   2a17c:	183ee83a 	callr	r3
   2a180:	e0bffc15 	stw	r2,-16(fp)
   2a184:	e0bffc17 	ldw	r2,-16(fp)
   2a188:	1000060e 	bge	r2,zero,2a1a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2a18c:	002a09c0 	call	2a09c <alt_get_errno>
   2a190:	e0fffc17 	ldw	r3,-16(fp)
   2a194:	00c7c83a 	sub	r3,zero,r3
   2a198:	10c00015 	stw	r3,0(r2)
          return -1;
   2a19c:	00bfffc4 	movi	r2,-1
   2a1a0:	00000a06 	br	2a1cc <read+0xe0>
        }
        return rval;
   2a1a4:	e0bffc17 	ldw	r2,-16(fp)
   2a1a8:	00000806 	br	2a1cc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2a1ac:	002a09c0 	call	2a09c <alt_get_errno>
   2a1b0:	00c00344 	movi	r3,13
   2a1b4:	10c00015 	stw	r3,0(r2)
   2a1b8:	00000306 	br	2a1c8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2a1bc:	002a09c0 	call	2a09c <alt_get_errno>
   2a1c0:	00c01444 	movi	r3,81
   2a1c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a1c8:	00bfffc4 	movi	r2,-1
}
   2a1cc:	e037883a 	mov	sp,fp
   2a1d0:	dfc00117 	ldw	ra,4(sp)
   2a1d4:	df000017 	ldw	fp,0(sp)
   2a1d8:	dec00204 	addi	sp,sp,8
   2a1dc:	f800283a 	ret

0002a1e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2a1e0:	defffc04 	addi	sp,sp,-16
   2a1e4:	dfc00315 	stw	ra,12(sp)
   2a1e8:	df000215 	stw	fp,8(sp)
   2a1ec:	dc000115 	stw	r16,4(sp)
   2a1f0:	df000104 	addi	fp,sp,4
   2a1f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2a1f8:	e0bfff17 	ldw	r2,-4(fp)
   2a1fc:	108000d0 	cmplti	r2,r2,3
   2a200:	1000111e 	bne	r2,zero,2a248 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2a204:	040000f4 	movhi	r16,3
   2a208:	8434c004 	addi	r16,r16,-11520
   2a20c:	e0bfff17 	ldw	r2,-4(fp)
   2a210:	1009883a 	mov	r4,r2
   2a214:	01400304 	movi	r5,12
   2a218:	00294340 	call	29434 <__mulsi3>
   2a21c:	8085883a 	add	r2,r16,r2
   2a220:	10800204 	addi	r2,r2,8
   2a224:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2a228:	040000f4 	movhi	r16,3
   2a22c:	8434c004 	addi	r16,r16,-11520
   2a230:	e0bfff17 	ldw	r2,-4(fp)
   2a234:	1009883a 	mov	r4,r2
   2a238:	01400304 	movi	r5,12
   2a23c:	00294340 	call	29434 <__mulsi3>
   2a240:	8085883a 	add	r2,r16,r2
   2a244:	10000015 	stw	zero,0(r2)
  }
}
   2a248:	e037883a 	mov	sp,fp
   2a24c:	dfc00217 	ldw	ra,8(sp)
   2a250:	df000117 	ldw	fp,4(sp)
   2a254:	dc000017 	ldw	r16,0(sp)
   2a258:	dec00304 	addi	sp,sp,12
   2a25c:	f800283a 	ret

0002a260 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2a260:	defff904 	addi	sp,sp,-28
   2a264:	df000615 	stw	fp,24(sp)
   2a268:	df000604 	addi	fp,sp,24
   2a26c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a270:	0005303a 	rdctl	r2,status
   2a274:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a278:	e0fffc17 	ldw	r3,-16(fp)
   2a27c:	00bfff84 	movi	r2,-2
   2a280:	1884703a 	and	r2,r3,r2
   2a284:	1001703a 	wrctl	status,r2
  
  return context;
   2a288:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2a28c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2a290:	d0a00b17 	ldw	r2,-32724(gp)
   2a294:	10c000c4 	addi	r3,r2,3
   2a298:	00bfff04 	movi	r2,-4
   2a29c:	1884703a 	and	r2,r3,r2
   2a2a0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2a2a4:	d0e00b17 	ldw	r3,-32724(gp)
   2a2a8:	e0bfff17 	ldw	r2,-4(fp)
   2a2ac:	1885883a 	add	r2,r3,r2
   2a2b0:	00c00134 	movhi	r3,4
   2a2b4:	18c00004 	addi	r3,r3,0
   2a2b8:	1880062e 	bgeu	r3,r2,2a2d4 <sbrk+0x74>
   2a2bc:	e0bffa17 	ldw	r2,-24(fp)
   2a2c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a2c4:	e0bffd17 	ldw	r2,-12(fp)
   2a2c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2a2cc:	00bfffc4 	movi	r2,-1
   2a2d0:	00000b06 	br	2a300 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2a2d4:	d0a00b17 	ldw	r2,-32724(gp)
   2a2d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2a2dc:	d0e00b17 	ldw	r3,-32724(gp)
   2a2e0:	e0bfff17 	ldw	r2,-4(fp)
   2a2e4:	1885883a 	add	r2,r3,r2
   2a2e8:	d0a00b15 	stw	r2,-32724(gp)
   2a2ec:	e0bffa17 	ldw	r2,-24(fp)
   2a2f0:	e0bffe15 	stw	r2,-8(fp)
   2a2f4:	e0bffe17 	ldw	r2,-8(fp)
   2a2f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2a2fc:	e0bffb17 	ldw	r2,-20(fp)
} 
   2a300:	e037883a 	mov	sp,fp
   2a304:	df000017 	ldw	fp,0(sp)
   2a308:	dec00104 	addi	sp,sp,4
   2a30c:	f800283a 	ret

0002a310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a310:	defffe04 	addi	sp,sp,-8
   2a314:	dfc00115 	stw	ra,4(sp)
   2a318:	df000015 	stw	fp,0(sp)
   2a31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a320:	008000f4 	movhi	r2,3
   2a324:	10b94204 	addi	r2,r2,-6904
   2a328:	10800017 	ldw	r2,0(r2)
   2a32c:	10000526 	beq	r2,zero,2a344 <alt_get_errno+0x34>
   2a330:	008000f4 	movhi	r2,3
   2a334:	10b94204 	addi	r2,r2,-6904
   2a338:	10800017 	ldw	r2,0(r2)
   2a33c:	103ee83a 	callr	r2
   2a340:	00000206 	br	2a34c <alt_get_errno+0x3c>
   2a344:	008000f4 	movhi	r2,3
   2a348:	10bfe304 	addi	r2,r2,-116
}
   2a34c:	e037883a 	mov	sp,fp
   2a350:	dfc00117 	ldw	ra,4(sp)
   2a354:	df000017 	ldw	fp,0(sp)
   2a358:	dec00204 	addi	sp,sp,8
   2a35c:	f800283a 	ret

0002a360 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2a360:	defff904 	addi	sp,sp,-28
   2a364:	dfc00615 	stw	ra,24(sp)
   2a368:	df000515 	stw	fp,20(sp)
   2a36c:	df000504 	addi	fp,sp,20
   2a370:	e13ffd15 	stw	r4,-12(fp)
   2a374:	e17ffe15 	stw	r5,-8(fp)
   2a378:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a37c:	e0bffd17 	ldw	r2,-12(fp)
   2a380:	10000716 	blt	r2,zero,2a3a0 <write+0x40>
   2a384:	e13ffd17 	ldw	r4,-12(fp)
   2a388:	01400304 	movi	r5,12
   2a38c:	00294340 	call	29434 <__mulsi3>
   2a390:	00c000f4 	movhi	r3,3
   2a394:	18f4c004 	addi	r3,r3,-11520
   2a398:	10c5883a 	add	r2,r2,r3
   2a39c:	00000106 	br	2a3a4 <write+0x44>
   2a3a0:	0005883a 	mov	r2,zero
   2a3a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a3a8:	e0bffb17 	ldw	r2,-20(fp)
   2a3ac:	10001f26 	beq	r2,zero,2a42c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2a3b0:	e0bffb17 	ldw	r2,-20(fp)
   2a3b4:	10800217 	ldw	r2,8(r2)
   2a3b8:	108000cc 	andi	r2,r2,3
   2a3bc:	10001726 	beq	r2,zero,2a41c <write+0xbc>
   2a3c0:	e0bffb17 	ldw	r2,-20(fp)
   2a3c4:	10800017 	ldw	r2,0(r2)
   2a3c8:	10800617 	ldw	r2,24(r2)
   2a3cc:	10001326 	beq	r2,zero,2a41c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2a3d0:	e0bffb17 	ldw	r2,-20(fp)
   2a3d4:	10800017 	ldw	r2,0(r2)
   2a3d8:	10c00617 	ldw	r3,24(r2)
   2a3dc:	e0bfff17 	ldw	r2,-4(fp)
   2a3e0:	e13ffb17 	ldw	r4,-20(fp)
   2a3e4:	e17ffe17 	ldw	r5,-8(fp)
   2a3e8:	100d883a 	mov	r6,r2
   2a3ec:	183ee83a 	callr	r3
   2a3f0:	e0bffc15 	stw	r2,-16(fp)
   2a3f4:	e0bffc17 	ldw	r2,-16(fp)
   2a3f8:	1000060e 	bge	r2,zero,2a414 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2a3fc:	002a3100 	call	2a310 <alt_get_errno>
   2a400:	e0fffc17 	ldw	r3,-16(fp)
   2a404:	00c7c83a 	sub	r3,zero,r3
   2a408:	10c00015 	stw	r3,0(r2)
        return -1;
   2a40c:	00bfffc4 	movi	r2,-1
   2a410:	00000a06 	br	2a43c <write+0xdc>
      }
      return rval;
   2a414:	e0bffc17 	ldw	r2,-16(fp)
   2a418:	00000806 	br	2a43c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2a41c:	002a3100 	call	2a310 <alt_get_errno>
   2a420:	00c00344 	movi	r3,13
   2a424:	10c00015 	stw	r3,0(r2)
   2a428:	00000306 	br	2a438 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2a42c:	002a3100 	call	2a310 <alt_get_errno>
   2a430:	00c01444 	movi	r3,81
   2a434:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a438:	00bfffc4 	movi	r2,-1
}
   2a43c:	e037883a 	mov	sp,fp
   2a440:	dfc00117 	ldw	ra,4(sp)
   2a444:	df000017 	ldw	fp,0(sp)
   2a448:	dec00204 	addi	sp,sp,8
   2a44c:	f800283a 	ret

0002a450 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2a450:	defffd04 	addi	sp,sp,-12
   2a454:	dfc00215 	stw	ra,8(sp)
   2a458:	df000115 	stw	fp,4(sp)
   2a45c:	df000104 	addi	fp,sp,4
   2a460:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2a464:	e13fff17 	ldw	r4,-4(fp)
   2a468:	014000f4 	movhi	r5,3
   2a46c:	29793f04 	addi	r5,r5,-6916
   2a470:	002b71c0 	call	2b71c <alt_dev_llist_insert>
}
   2a474:	e037883a 	mov	sp,fp
   2a478:	dfc00117 	ldw	ra,4(sp)
   2a47c:	df000017 	ldw	fp,0(sp)
   2a480:	dec00204 	addi	sp,sp,8
   2a484:	f800283a 	ret

0002a488 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2a488:	defffd04 	addi	sp,sp,-12
   2a48c:	dfc00215 	stw	ra,8(sp)
   2a490:	df000115 	stw	fp,4(sp)
   2a494:	df000104 	addi	fp,sp,4
   2a498:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   2a49c:	002c0e40 	call	2c0e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2a4a0:	00800044 	movi	r2,1
   2a4a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2a4a8:	e037883a 	mov	sp,fp
   2a4ac:	dfc00117 	ldw	ra,4(sp)
   2a4b0:	df000017 	ldw	fp,0(sp)
   2a4b4:	dec00204 	addi	sp,sp,8
   2a4b8:	f800283a 	ret

0002a4bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2a4bc:	defffe04 	addi	sp,sp,-8
   2a4c0:	dfc00115 	stw	ra,4(sp)
   2a4c4:	df000015 	stw	fp,0(sp)
   2a4c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   2a4cc:	01000134 	movhi	r4,4
   2a4d0:	21040804 	addi	r4,r4,4128
   2a4d4:	000b883a 	mov	r5,zero
   2a4d8:	01800044 	movi	r6,1
   2a4dc:	01c0fa04 	movi	r7,1000
   2a4e0:	002b4e80 	call	2b4e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_SHARED, fifo_shared);
   2a4e4:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   2a4e8:	010000f4 	movhi	r4,3
   2a4ec:	21352a04 	addi	r4,r4,-11096
   2a4f0:	000b883a 	mov	r5,zero
   2a4f4:	01800404 	movi	r6,16
   2a4f8:	002ab740 	call	2ab74 <altera_avalon_jtag_uart_init>
   2a4fc:	010000f4 	movhi	r4,3
   2a500:	21352004 	addi	r4,r4,-11136
   2a504:	002a4500 	call	2a450 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1, sysid_1);
   2a508:	0001883a 	nop
}
   2a50c:	e037883a 	mov	sp,fp
   2a510:	dfc00117 	ldw	ra,4(sp)
   2a514:	df000017 	ldw	fp,0(sp)
   2a518:	dec00204 	addi	sp,sp,8
   2a51c:	f800283a 	ret

0002a520 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   2a520:	defffa04 	addi	sp,sp,-24
   2a524:	dfc00515 	stw	ra,20(sp)
   2a528:	df000415 	stw	fp,16(sp)
   2a52c:	df000404 	addi	fp,sp,16
   2a530:	e13ffc15 	stw	r4,-16(fp)
   2a534:	e17ffd15 	stw	r5,-12(fp)
   2a538:	e1bffe15 	stw	r6,-8(fp)
   2a53c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   2a540:	e13ffc17 	ldw	r4,-16(fp)
   2a544:	01400fc4 	movi	r5,63
   2a548:	002a6ec0 	call	2a6ec <altera_avalon_fifo_clear_event>
   2a54c:	10000226 	beq	r2,zero,2a558 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2a550:	00bfffc4 	movi	r2,-1
   2a554:	00001306 	br	2a5a4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   2a558:	e13ffc17 	ldw	r4,-16(fp)
   2a55c:	e17ffd17 	ldw	r5,-12(fp)
   2a560:	002a7480 	call	2a748 <altera_avalon_fifo_write_ienable>
   2a564:	10000226 	beq	r2,zero,2a570 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2a568:	00bfff84 	movi	r2,-2
   2a56c:	00000d06 	br	2a5a4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   2a570:	e13ffc17 	ldw	r4,-16(fp)
   2a574:	e17fff17 	ldw	r5,-4(fp)
   2a578:	002a7a00 	call	2a7a0 <altera_avalon_fifo_write_almostfull>
   2a57c:	10000226 	beq	r2,zero,2a588 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a580:	00bfff44 	movi	r2,-3
   2a584:	00000706 	br	2a5a4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   2a588:	e13ffc17 	ldw	r4,-16(fp)
   2a58c:	e17ffe17 	ldw	r5,-8(fp)
   2a590:	002a7f80 	call	2a7f8 <altera_avalon_fifo_write_almostempty>
   2a594:	10000226 	beq	r2,zero,2a5a0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a598:	00bfff44 	movi	r2,-3
   2a59c:	00000106 	br	2a5a4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   2a5a0:	0005883a 	mov	r2,zero
}
   2a5a4:	e037883a 	mov	sp,fp
   2a5a8:	dfc00117 	ldw	ra,4(sp)
   2a5ac:	df000017 	ldw	fp,0(sp)
   2a5b0:	dec00204 	addi	sp,sp,8
   2a5b4:	f800283a 	ret

0002a5b8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   2a5b8:	defffd04 	addi	sp,sp,-12
   2a5bc:	df000215 	stw	fp,8(sp)
   2a5c0:	df000204 	addi	fp,sp,8
   2a5c4:	e13ffe15 	stw	r4,-8(fp)
   2a5c8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   2a5cc:	e0bffe17 	ldw	r2,-8(fp)
   2a5d0:	10800104 	addi	r2,r2,4
   2a5d4:	10800037 	ldwio	r2,0(r2)
   2a5d8:	1007883a 	mov	r3,r2
   2a5dc:	e0bfff17 	ldw	r2,-4(fp)
   2a5e0:	1884703a 	and	r2,r3,r2
}
   2a5e4:	e037883a 	mov	sp,fp
   2a5e8:	df000017 	ldw	fp,0(sp)
   2a5ec:	dec00104 	addi	sp,sp,4
   2a5f0:	f800283a 	ret

0002a5f4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   2a5f4:	defffd04 	addi	sp,sp,-12
   2a5f8:	df000215 	stw	fp,8(sp)
   2a5fc:	df000204 	addi	fp,sp,8
   2a600:	e13ffe15 	stw	r4,-8(fp)
   2a604:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   2a608:	e0bffe17 	ldw	r2,-8(fp)
   2a60c:	10800304 	addi	r2,r2,12
   2a610:	10800037 	ldwio	r2,0(r2)
   2a614:	1007883a 	mov	r3,r2
   2a618:	e0bfff17 	ldw	r2,-4(fp)
   2a61c:	1884703a 	and	r2,r3,r2
}
   2a620:	e037883a 	mov	sp,fp
   2a624:	df000017 	ldw	fp,0(sp)
   2a628:	dec00104 	addi	sp,sp,4
   2a62c:	f800283a 	ret

0002a630 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   2a630:	defffe04 	addi	sp,sp,-8
   2a634:	df000115 	stw	fp,4(sp)
   2a638:	df000104 	addi	fp,sp,4
   2a63c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   2a640:	e0bfff17 	ldw	r2,-4(fp)
   2a644:	10800404 	addi	r2,r2,16
   2a648:	10800037 	ldwio	r2,0(r2)
}
   2a64c:	e037883a 	mov	sp,fp
   2a650:	df000017 	ldw	fp,0(sp)
   2a654:	dec00104 	addi	sp,sp,4
   2a658:	f800283a 	ret

0002a65c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   2a65c:	defffe04 	addi	sp,sp,-8
   2a660:	df000115 	stw	fp,4(sp)
   2a664:	df000104 	addi	fp,sp,4
   2a668:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   2a66c:	e0bfff17 	ldw	r2,-4(fp)
   2a670:	10800504 	addi	r2,r2,20
   2a674:	10800037 	ldwio	r2,0(r2)
}
   2a678:	e037883a 	mov	sp,fp
   2a67c:	df000017 	ldw	fp,0(sp)
   2a680:	dec00104 	addi	sp,sp,4
   2a684:	f800283a 	ret

0002a688 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   2a688:	defffd04 	addi	sp,sp,-12
   2a68c:	df000215 	stw	fp,8(sp)
   2a690:	df000204 	addi	fp,sp,8
   2a694:	e13ffe15 	stw	r4,-8(fp)
   2a698:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   2a69c:	e0bffe17 	ldw	r2,-8(fp)
   2a6a0:	10800204 	addi	r2,r2,8
   2a6a4:	10800037 	ldwio	r2,0(r2)
   2a6a8:	1007883a 	mov	r3,r2
   2a6ac:	e0bfff17 	ldw	r2,-4(fp)
   2a6b0:	1884703a 	and	r2,r3,r2
}
   2a6b4:	e037883a 	mov	sp,fp
   2a6b8:	df000017 	ldw	fp,0(sp)
   2a6bc:	dec00104 	addi	sp,sp,4
   2a6c0:	f800283a 	ret

0002a6c4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   2a6c4:	defffe04 	addi	sp,sp,-8
   2a6c8:	df000115 	stw	fp,4(sp)
   2a6cc:	df000104 	addi	fp,sp,4
   2a6d0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   2a6d4:	e0bfff17 	ldw	r2,-4(fp)
   2a6d8:	10800037 	ldwio	r2,0(r2)
}
   2a6dc:	e037883a 	mov	sp,fp
   2a6e0:	df000017 	ldw	fp,0(sp)
   2a6e4:	dec00104 	addi	sp,sp,4
   2a6e8:	f800283a 	ret

0002a6ec <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   2a6ec:	defffd04 	addi	sp,sp,-12
   2a6f0:	df000215 	stw	fp,8(sp)
   2a6f4:	df000204 	addi	fp,sp,8
   2a6f8:	e13ffe15 	stw	r4,-8(fp)
   2a6fc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   2a700:	e0bffe17 	ldw	r2,-8(fp)
   2a704:	10800204 	addi	r2,r2,8
   2a708:	e0ffff17 	ldw	r3,-4(fp)
   2a70c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   2a710:	e0bffe17 	ldw	r2,-8(fp)
   2a714:	10800204 	addi	r2,r2,8
   2a718:	10800037 	ldwio	r2,0(r2)
   2a71c:	1007883a 	mov	r3,r2
   2a720:	e0bfff17 	ldw	r2,-4(fp)
   2a724:	1884703a 	and	r2,r3,r2
   2a728:	1000021e 	bne	r2,zero,2a734 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   2a72c:	0005883a 	mov	r2,zero
   2a730:	00000106 	br	2a738 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2a734:	00bfffc4 	movi	r2,-1
}
   2a738:	e037883a 	mov	sp,fp
   2a73c:	df000017 	ldw	fp,0(sp)
   2a740:	dec00104 	addi	sp,sp,4
   2a744:	f800283a 	ret

0002a748 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   2a748:	defffd04 	addi	sp,sp,-12
   2a74c:	df000215 	stw	fp,8(sp)
   2a750:	df000204 	addi	fp,sp,8
   2a754:	e13ffe15 	stw	r4,-8(fp)
   2a758:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   2a75c:	e0bffe17 	ldw	r2,-8(fp)
   2a760:	10800304 	addi	r2,r2,12
   2a764:	e0ffff17 	ldw	r3,-4(fp)
   2a768:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   2a76c:	e0bffe17 	ldw	r2,-8(fp)
   2a770:	10800304 	addi	r2,r2,12
   2a774:	10800037 	ldwio	r2,0(r2)
   2a778:	1007883a 	mov	r3,r2
   2a77c:	e0bfff17 	ldw	r2,-4(fp)
   2a780:	1880021e 	bne	r3,r2,2a78c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a784:	0005883a 	mov	r2,zero
   2a788:	00000106 	br	2a790 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2a78c:	00bfff84 	movi	r2,-2
}
   2a790:	e037883a 	mov	sp,fp
   2a794:	df000017 	ldw	fp,0(sp)
   2a798:	dec00104 	addi	sp,sp,4
   2a79c:	f800283a 	ret

0002a7a0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   2a7a0:	defffd04 	addi	sp,sp,-12
   2a7a4:	df000215 	stw	fp,8(sp)
   2a7a8:	df000204 	addi	fp,sp,8
   2a7ac:	e13ffe15 	stw	r4,-8(fp)
   2a7b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   2a7b4:	e0bffe17 	ldw	r2,-8(fp)
   2a7b8:	10800404 	addi	r2,r2,16
   2a7bc:	e0ffff17 	ldw	r3,-4(fp)
   2a7c0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   2a7c4:	e0bffe17 	ldw	r2,-8(fp)
   2a7c8:	10800404 	addi	r2,r2,16
   2a7cc:	10800037 	ldwio	r2,0(r2)
   2a7d0:	1007883a 	mov	r3,r2
   2a7d4:	e0bfff17 	ldw	r2,-4(fp)
   2a7d8:	1880021e 	bne	r3,r2,2a7e4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a7dc:	0005883a 	mov	r2,zero
   2a7e0:	00000106 	br	2a7e8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a7e4:	00bfff44 	movi	r2,-3
}
   2a7e8:	e037883a 	mov	sp,fp
   2a7ec:	df000017 	ldw	fp,0(sp)
   2a7f0:	dec00104 	addi	sp,sp,4
   2a7f4:	f800283a 	ret

0002a7f8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   2a7f8:	defffd04 	addi	sp,sp,-12
   2a7fc:	df000215 	stw	fp,8(sp)
   2a800:	df000204 	addi	fp,sp,8
   2a804:	e13ffe15 	stw	r4,-8(fp)
   2a808:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   2a80c:	e0bffe17 	ldw	r2,-8(fp)
   2a810:	10800504 	addi	r2,r2,20
   2a814:	e0ffff17 	ldw	r3,-4(fp)
   2a818:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   2a81c:	e0bffe17 	ldw	r2,-8(fp)
   2a820:	10800504 	addi	r2,r2,20
   2a824:	10800037 	ldwio	r2,0(r2)
   2a828:	1007883a 	mov	r3,r2
   2a82c:	e0bfff17 	ldw	r2,-4(fp)
   2a830:	1880021e 	bne	r3,r2,2a83c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a834:	0005883a 	mov	r2,zero
   2a838:	00000106 	br	2a840 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a83c:	00bfff44 	movi	r2,-3
}
   2a840:	e037883a 	mov	sp,fp
   2a844:	df000017 	ldw	fp,0(sp)
   2a848:	dec00104 	addi	sp,sp,4
   2a84c:	f800283a 	ret

0002a850 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   2a850:	defffb04 	addi	sp,sp,-20
   2a854:	dfc00415 	stw	ra,16(sp)
   2a858:	df000315 	stw	fp,12(sp)
   2a85c:	df000304 	addi	fp,sp,12
   2a860:	e13ffd15 	stw	r4,-12(fp)
   2a864:	e17ffe15 	stw	r5,-8(fp)
   2a868:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2a86c:	e13ffe17 	ldw	r4,-8(fp)
   2a870:	01400044 	movi	r5,1
   2a874:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2a878:	1000051e 	bne	r2,zero,2a890 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   2a87c:	e0bffd17 	ldw	r2,-12(fp)
   2a880:	e0ffff17 	ldw	r3,-4(fp)
   2a884:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   2a888:	0005883a 	mov	r2,zero
   2a88c:	00000106 	br	2a894 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   2a890:	00bfff04 	movi	r2,-4
    }
}
   2a894:	e037883a 	mov	sp,fp
   2a898:	dfc00117 	ldw	ra,4(sp)
   2a89c:	df000017 	ldw	fp,0(sp)
   2a8a0:	dec00204 	addi	sp,sp,8
   2a8a4:	f800283a 	ret

0002a8a8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   2a8a8:	defffa04 	addi	sp,sp,-24
   2a8ac:	dfc00515 	stw	ra,20(sp)
   2a8b0:	df000415 	stw	fp,16(sp)
   2a8b4:	df000404 	addi	fp,sp,16
   2a8b8:	e13ffd15 	stw	r4,-12(fp)
   2a8bc:	e17ffe15 	stw	r5,-8(fp)
   2a8c0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   2a8c4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   2a8c8:	e0bfff17 	ldw	r2,-4(fp)
   2a8cc:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2a8d0:	e13ffe17 	ldw	r4,-8(fp)
   2a8d4:	01400084 	movi	r5,2
   2a8d8:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2a8dc:	1000071e 	bne	r2,zero,2a8fc <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   2a8e0:	e13ffe17 	ldw	r4,-8(fp)
   2a8e4:	002a6c40 	call	2a6c4 <altera_avalon_fifo_read_level>
   2a8e8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2a8ec:	e0bffd17 	ldw	r2,-12(fp)
   2a8f0:	10c00037 	ldwio	r3,0(r2)
   2a8f4:	e0bfff17 	ldw	r2,-4(fp)
   2a8f8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   2a8fc:	e0bffc17 	ldw	r2,-16(fp)
}
   2a900:	e037883a 	mov	sp,fp
   2a904:	dfc00117 	ldw	ra,4(sp)
   2a908:	df000017 	ldw	fp,0(sp)
   2a90c:	dec00204 	addi	sp,sp,8
   2a910:	f800283a 	ret

0002a914 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   2a914:	defffc04 	addi	sp,sp,-16
   2a918:	dfc00315 	stw	ra,12(sp)
   2a91c:	df000215 	stw	fp,8(sp)
   2a920:	df000204 	addi	fp,sp,8
   2a924:	e13ffe15 	stw	r4,-8(fp)
   2a928:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2a92c:	e13fff17 	ldw	r4,-4(fp)
   2a930:	01400084 	movi	r5,2
   2a934:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2a938:	1000031e 	bne	r2,zero,2a948 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2a93c:	e0bffe17 	ldw	r2,-8(fp)
   2a940:	10800037 	ldwio	r2,0(r2)
   2a944:	00000106 	br	2a94c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   2a948:	0005883a 	mov	r2,zero
}
   2a94c:	e037883a 	mov	sp,fp
   2a950:	dfc00117 	ldw	ra,4(sp)
   2a954:	df000017 	ldw	fp,0(sp)
   2a958:	dec00204 	addi	sp,sp,8
   2a95c:	f800283a 	ret

0002a960 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   2a960:	defffb04 	addi	sp,sp,-20
   2a964:	dfc00415 	stw	ra,16(sp)
   2a968:	df000315 	stw	fp,12(sp)
   2a96c:	df000304 	addi	fp,sp,12
   2a970:	e13ffd15 	stw	r4,-12(fp)
   2a974:	e17ffe15 	stw	r5,-8(fp)
   2a978:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2a97c:	e13ffe17 	ldw	r4,-8(fp)
   2a980:	01400044 	movi	r5,1
   2a984:	002a5b80 	call	2a5b8 <altera_avalon_fifo_read_status>
   2a988:	1000061e 	bne	r2,zero,2a9a4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   2a98c:	e0bffd17 	ldw	r2,-12(fp)
   2a990:	10800104 	addi	r2,r2,4
   2a994:	e0ffff17 	ldw	r3,-4(fp)
   2a998:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   2a99c:	0005883a 	mov	r2,zero
   2a9a0:	00000106 	br	2a9a8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   2a9a4:	00bfff04 	movi	r2,-4
    }
}
   2a9a8:	e037883a 	mov	sp,fp
   2a9ac:	dfc00117 	ldw	ra,4(sp)
   2a9b0:	df000017 	ldw	fp,0(sp)
   2a9b4:	dec00204 	addi	sp,sp,8
   2a9b8:	f800283a 	ret

0002a9bc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   2a9bc:	defffe04 	addi	sp,sp,-8
   2a9c0:	df000115 	stw	fp,4(sp)
   2a9c4:	df000104 	addi	fp,sp,4
   2a9c8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   2a9cc:	e0bfff17 	ldw	r2,-4(fp)
   2a9d0:	10800104 	addi	r2,r2,4
   2a9d4:	10800037 	ldwio	r2,0(r2)
}
   2a9d8:	e037883a 	mov	sp,fp
   2a9dc:	df000017 	ldw	fp,0(sp)
   2a9e0:	dec00104 	addi	sp,sp,4
   2a9e4:	f800283a 	ret

0002a9e8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   2a9e8:	defffe04 	addi	sp,sp,-8
   2a9ec:	df000115 	stw	fp,4(sp)
   2a9f0:	df000104 	addi	fp,sp,4
   2a9f4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   2a9f8:	e0bfff17 	ldw	r2,-4(fp)
   2a9fc:	10800037 	ldwio	r2,0(r2)
}
   2aa00:	e037883a 	mov	sp,fp
   2aa04:	df000017 	ldw	fp,0(sp)
   2aa08:	dec00104 	addi	sp,sp,4
   2aa0c:	f800283a 	ret

0002aa10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2aa10:	defffa04 	addi	sp,sp,-24
   2aa14:	dfc00515 	stw	ra,20(sp)
   2aa18:	df000415 	stw	fp,16(sp)
   2aa1c:	df000404 	addi	fp,sp,16
   2aa20:	e13ffd15 	stw	r4,-12(fp)
   2aa24:	e17ffe15 	stw	r5,-8(fp)
   2aa28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aa2c:	e0bffd17 	ldw	r2,-12(fp)
   2aa30:	10800017 	ldw	r2,0(r2)
   2aa34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2aa38:	e0bffc17 	ldw	r2,-16(fp)
   2aa3c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2aa40:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2aa44:	10800217 	ldw	r2,8(r2)
   2aa48:	1809883a 	mov	r4,r3
   2aa4c:	e17ffe17 	ldw	r5,-8(fp)
   2aa50:	e1bfff17 	ldw	r6,-4(fp)
   2aa54:	100f883a 	mov	r7,r2
   2aa58:	002b0380 	call	2b038 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2aa5c:	e037883a 	mov	sp,fp
   2aa60:	dfc00117 	ldw	ra,4(sp)
   2aa64:	df000017 	ldw	fp,0(sp)
   2aa68:	dec00204 	addi	sp,sp,8
   2aa6c:	f800283a 	ret

0002aa70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2aa70:	defffa04 	addi	sp,sp,-24
   2aa74:	dfc00515 	stw	ra,20(sp)
   2aa78:	df000415 	stw	fp,16(sp)
   2aa7c:	df000404 	addi	fp,sp,16
   2aa80:	e13ffd15 	stw	r4,-12(fp)
   2aa84:	e17ffe15 	stw	r5,-8(fp)
   2aa88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aa8c:	e0bffd17 	ldw	r2,-12(fp)
   2aa90:	10800017 	ldw	r2,0(r2)
   2aa94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2aa98:	e0bffc17 	ldw	r2,-16(fp)
   2aa9c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2aaa0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2aaa4:	10800217 	ldw	r2,8(r2)
   2aaa8:	1809883a 	mov	r4,r3
   2aaac:	e17ffe17 	ldw	r5,-8(fp)
   2aab0:	e1bfff17 	ldw	r6,-4(fp)
   2aab4:	100f883a 	mov	r7,r2
   2aab8:	002b2500 	call	2b250 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2aabc:	e037883a 	mov	sp,fp
   2aac0:	dfc00117 	ldw	ra,4(sp)
   2aac4:	df000017 	ldw	fp,0(sp)
   2aac8:	dec00204 	addi	sp,sp,8
   2aacc:	f800283a 	ret

0002aad0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2aad0:	defffc04 	addi	sp,sp,-16
   2aad4:	dfc00315 	stw	ra,12(sp)
   2aad8:	df000215 	stw	fp,8(sp)
   2aadc:	df000204 	addi	fp,sp,8
   2aae0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aae4:	e0bfff17 	ldw	r2,-4(fp)
   2aae8:	10800017 	ldw	r2,0(r2)
   2aaec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2aaf0:	e0bffe17 	ldw	r2,-8(fp)
   2aaf4:	10c00a04 	addi	r3,r2,40
   2aaf8:	e0bfff17 	ldw	r2,-4(fp)
   2aafc:	10800217 	ldw	r2,8(r2)
   2ab00:	1809883a 	mov	r4,r3
   2ab04:	100b883a 	mov	r5,r2
   2ab08:	002aedc0 	call	2aedc <altera_avalon_jtag_uart_close>
}
   2ab0c:	e037883a 	mov	sp,fp
   2ab10:	dfc00117 	ldw	ra,4(sp)
   2ab14:	df000017 	ldw	fp,0(sp)
   2ab18:	dec00204 	addi	sp,sp,8
   2ab1c:	f800283a 	ret

0002ab20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2ab20:	defffa04 	addi	sp,sp,-24
   2ab24:	dfc00515 	stw	ra,20(sp)
   2ab28:	df000415 	stw	fp,16(sp)
   2ab2c:	df000404 	addi	fp,sp,16
   2ab30:	e13ffd15 	stw	r4,-12(fp)
   2ab34:	e17ffe15 	stw	r5,-8(fp)
   2ab38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2ab3c:	e0bffd17 	ldw	r2,-12(fp)
   2ab40:	10800017 	ldw	r2,0(r2)
   2ab44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2ab48:	e0bffc17 	ldw	r2,-16(fp)
   2ab4c:	10800a04 	addi	r2,r2,40
   2ab50:	1009883a 	mov	r4,r2
   2ab54:	e17ffe17 	ldw	r5,-8(fp)
   2ab58:	e1bfff17 	ldw	r6,-4(fp)
   2ab5c:	002af440 	call	2af44 <altera_avalon_jtag_uart_ioctl>
}
   2ab60:	e037883a 	mov	sp,fp
   2ab64:	dfc00117 	ldw	ra,4(sp)
   2ab68:	df000017 	ldw	fp,0(sp)
   2ab6c:	dec00204 	addi	sp,sp,8
   2ab70:	f800283a 	ret

0002ab74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2ab74:	defffa04 	addi	sp,sp,-24
   2ab78:	dfc00515 	stw	ra,20(sp)
   2ab7c:	df000415 	stw	fp,16(sp)
   2ab80:	df000404 	addi	fp,sp,16
   2ab84:	e13ffd15 	stw	r4,-12(fp)
   2ab88:	e17ffe15 	stw	r5,-8(fp)
   2ab8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ab90:	e0bffd17 	ldw	r2,-12(fp)
   2ab94:	00c00044 	movi	r3,1
   2ab98:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2ab9c:	e0bffd17 	ldw	r2,-12(fp)
   2aba0:	10800017 	ldw	r2,0(r2)
   2aba4:	10800104 	addi	r2,r2,4
   2aba8:	e0fffd17 	ldw	r3,-12(fp)
   2abac:	18c00817 	ldw	r3,32(r3)
   2abb0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2abb4:	e0fffe17 	ldw	r3,-8(fp)
   2abb8:	e0bfff17 	ldw	r2,-4(fp)
   2abbc:	d8000015 	stw	zero,0(sp)
   2abc0:	1809883a 	mov	r4,r3
   2abc4:	100b883a 	mov	r5,r2
   2abc8:	018000f4 	movhi	r6,3
   2abcc:	31ab0d04 	addi	r6,r6,-21452
   2abd0:	e1fffd17 	ldw	r7,-12(fp)
   2abd4:	002b8900 	call	2b890 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2abd8:	e0bffd17 	ldw	r2,-12(fp)
   2abdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2abe0:	e0bffd17 	ldw	r2,-12(fp)
   2abe4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2abe8:	008000f4 	movhi	r2,3
   2abec:	10bfe804 	addi	r2,r2,-96
   2abf0:	10800017 	ldw	r2,0(r2)
   2abf4:	1809883a 	mov	r4,r3
   2abf8:	100b883a 	mov	r5,r2
   2abfc:	018000f4 	movhi	r6,3
   2ac00:	31ab8e04 	addi	r6,r6,-20936
   2ac04:	e1fffd17 	ldw	r7,-12(fp)
   2ac08:	002b5700 	call	2b570 <alt_alarm_start>
   2ac0c:	1000040e 	bge	r2,zero,2ac20 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2ac10:	e0bffd17 	ldw	r2,-12(fp)
   2ac14:	00e00034 	movhi	r3,32768
   2ac18:	18ffffc4 	addi	r3,r3,-1
   2ac1c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2ac20:	e037883a 	mov	sp,fp
   2ac24:	dfc00117 	ldw	ra,4(sp)
   2ac28:	df000017 	ldw	fp,0(sp)
   2ac2c:	dec00204 	addi	sp,sp,8
   2ac30:	f800283a 	ret

0002ac34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2ac34:	defff804 	addi	sp,sp,-32
   2ac38:	df000715 	stw	fp,28(sp)
   2ac3c:	df000704 	addi	fp,sp,28
   2ac40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2ac44:	e0bfff17 	ldw	r2,-4(fp)
   2ac48:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2ac4c:	e0bffb17 	ldw	r2,-20(fp)
   2ac50:	10800017 	ldw	r2,0(r2)
   2ac54:	e0bffc15 	stw	r2,-16(fp)
   2ac58:	00000106 	br	2ac60 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2ac5c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ac60:	e0bffc17 	ldw	r2,-16(fp)
   2ac64:	10800104 	addi	r2,r2,4
   2ac68:	10800037 	ldwio	r2,0(r2)
   2ac6c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2ac70:	e0bffd17 	ldw	r2,-12(fp)
   2ac74:	1080c00c 	andi	r2,r2,768
   2ac78:	10006a26 	beq	r2,zero,2ae24 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2ac7c:	e0bffd17 	ldw	r2,-12(fp)
   2ac80:	1080400c 	andi	r2,r2,256
   2ac84:	10003326 	beq	r2,zero,2ad54 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2ac88:	00800074 	movhi	r2,1
   2ac8c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ac90:	e0bffb17 	ldw	r2,-20(fp)
   2ac94:	10800a17 	ldw	r2,40(r2)
   2ac98:	10800044 	addi	r2,r2,1
   2ac9c:	1081ffcc 	andi	r2,r2,2047
   2aca0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2aca4:	e0bffb17 	ldw	r2,-20(fp)
   2aca8:	10c00b17 	ldw	r3,44(r2)
   2acac:	e0bffe17 	ldw	r2,-8(fp)
   2acb0:	18801426 	beq	r3,r2,2ad04 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2acb4:	e0bffc17 	ldw	r2,-16(fp)
   2acb8:	10800037 	ldwio	r2,0(r2)
   2acbc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2acc0:	e0bff917 	ldw	r2,-28(fp)
   2acc4:	10a0000c 	andi	r2,r2,32768
   2acc8:	10001026 	beq	r2,zero,2ad0c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2accc:	e0bffb17 	ldw	r2,-20(fp)
   2acd0:	10800a17 	ldw	r2,40(r2)
   2acd4:	e0fff917 	ldw	r3,-28(fp)
   2acd8:	e13ffb17 	ldw	r4,-20(fp)
   2acdc:	2085883a 	add	r2,r4,r2
   2ace0:	10800e04 	addi	r2,r2,56
   2ace4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ace8:	e0bffb17 	ldw	r2,-20(fp)
   2acec:	10800a17 	ldw	r2,40(r2)
   2acf0:	10800044 	addi	r2,r2,1
   2acf4:	10c1ffcc 	andi	r3,r2,2047
   2acf8:	e0bffb17 	ldw	r2,-20(fp)
   2acfc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2ad00:	003fe306 	br	2ac90 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2ad04:	0001883a 	nop
   2ad08:	00000106 	br	2ad10 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2ad0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2ad10:	e0bff917 	ldw	r2,-28(fp)
   2ad14:	10bfffec 	andhi	r2,r2,65535
   2ad18:	10000e26 	beq	r2,zero,2ad54 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ad1c:	e0bffb17 	ldw	r2,-20(fp)
   2ad20:	10c00817 	ldw	r3,32(r2)
   2ad24:	00bfff84 	movi	r2,-2
   2ad28:	1886703a 	and	r3,r3,r2
   2ad2c:	e0bffb17 	ldw	r2,-20(fp)
   2ad30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2ad34:	e0bffc17 	ldw	r2,-16(fp)
   2ad38:	10800104 	addi	r2,r2,4
   2ad3c:	e0fffb17 	ldw	r3,-20(fp)
   2ad40:	18c00817 	ldw	r3,32(r3)
   2ad44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ad48:	e0bffc17 	ldw	r2,-16(fp)
   2ad4c:	10800104 	addi	r2,r2,4
   2ad50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2ad54:	e0bffd17 	ldw	r2,-12(fp)
   2ad58:	1080800c 	andi	r2,r2,512
   2ad5c:	103fbf26 	beq	r2,zero,2ac5c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2ad60:	e0bffd17 	ldw	r2,-12(fp)
   2ad64:	1004d43a 	srli	r2,r2,16
   2ad68:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ad6c:	00001406 	br	2adc0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2ad70:	e0bffc17 	ldw	r2,-16(fp)
   2ad74:	e0fffb17 	ldw	r3,-20(fp)
   2ad78:	18c00d17 	ldw	r3,52(r3)
   2ad7c:	e13ffb17 	ldw	r4,-20(fp)
   2ad80:	20c7883a 	add	r3,r4,r3
   2ad84:	18c20e04 	addi	r3,r3,2104
   2ad88:	18c00003 	ldbu	r3,0(r3)
   2ad8c:	18c03fcc 	andi	r3,r3,255
   2ad90:	18c0201c 	xori	r3,r3,128
   2ad94:	18ffe004 	addi	r3,r3,-128
   2ad98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ad9c:	e0bffb17 	ldw	r2,-20(fp)
   2ada0:	10800d17 	ldw	r2,52(r2)
   2ada4:	10800044 	addi	r2,r2,1
   2ada8:	10c1ffcc 	andi	r3,r2,2047
   2adac:	e0bffb17 	ldw	r2,-20(fp)
   2adb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2adb4:	e0bffa17 	ldw	r2,-24(fp)
   2adb8:	10bfffc4 	addi	r2,r2,-1
   2adbc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2adc0:	e0bffa17 	ldw	r2,-24(fp)
   2adc4:	10000526 	beq	r2,zero,2addc <altera_avalon_jtag_uart_irq+0x1a8>
   2adc8:	e0bffb17 	ldw	r2,-20(fp)
   2adcc:	10c00d17 	ldw	r3,52(r2)
   2add0:	e0bffb17 	ldw	r2,-20(fp)
   2add4:	10800c17 	ldw	r2,48(r2)
   2add8:	18bfe51e 	bne	r3,r2,2ad70 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2addc:	e0bffa17 	ldw	r2,-24(fp)
   2ade0:	103f9e26 	beq	r2,zero,2ac5c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ade4:	e0bffb17 	ldw	r2,-20(fp)
   2ade8:	10c00817 	ldw	r3,32(r2)
   2adec:	00bfff44 	movi	r2,-3
   2adf0:	1886703a 	and	r3,r3,r2
   2adf4:	e0bffb17 	ldw	r2,-20(fp)
   2adf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2adfc:	e0bffb17 	ldw	r2,-20(fp)
   2ae00:	10800017 	ldw	r2,0(r2)
   2ae04:	10800104 	addi	r2,r2,4
   2ae08:	e0fffb17 	ldw	r3,-20(fp)
   2ae0c:	18c00817 	ldw	r3,32(r3)
   2ae10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ae14:	e0bffc17 	ldw	r2,-16(fp)
   2ae18:	10800104 	addi	r2,r2,4
   2ae1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ae20:	003f8e06 	br	2ac5c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ae24:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ae28:	e037883a 	mov	sp,fp
   2ae2c:	df000017 	ldw	fp,0(sp)
   2ae30:	dec00104 	addi	sp,sp,4
   2ae34:	f800283a 	ret

0002ae38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2ae38:	defffc04 	addi	sp,sp,-16
   2ae3c:	df000315 	stw	fp,12(sp)
   2ae40:	df000304 	addi	fp,sp,12
   2ae44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2ae48:	e0bfff17 	ldw	r2,-4(fp)
   2ae4c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2ae50:	e0bffd17 	ldw	r2,-12(fp)
   2ae54:	10800017 	ldw	r2,0(r2)
   2ae58:	10800104 	addi	r2,r2,4
   2ae5c:	10800037 	ldwio	r2,0(r2)
   2ae60:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2ae64:	e0bffe17 	ldw	r2,-8(fp)
   2ae68:	1081000c 	andi	r2,r2,1024
   2ae6c:	10000a26 	beq	r2,zero,2ae98 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2ae70:	e0bffd17 	ldw	r2,-12(fp)
   2ae74:	10800017 	ldw	r2,0(r2)
   2ae78:	10800104 	addi	r2,r2,4
   2ae7c:	e0fffd17 	ldw	r3,-12(fp)
   2ae80:	18c00817 	ldw	r3,32(r3)
   2ae84:	18c10014 	ori	r3,r3,1024
   2ae88:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2ae8c:	e0bffd17 	ldw	r2,-12(fp)
   2ae90:	10000915 	stw	zero,36(r2)
   2ae94:	00000a06 	br	2aec0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2ae98:	e0bffd17 	ldw	r2,-12(fp)
   2ae9c:	10800917 	ldw	r2,36(r2)
   2aea0:	00e00034 	movhi	r3,32768
   2aea4:	18ffff04 	addi	r3,r3,-4
   2aea8:	18800536 	bltu	r3,r2,2aec0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2aeac:	e0bffd17 	ldw	r2,-12(fp)
   2aeb0:	10800917 	ldw	r2,36(r2)
   2aeb4:	10c00044 	addi	r3,r2,1
   2aeb8:	e0bffd17 	ldw	r2,-12(fp)
   2aebc:	10c00915 	stw	r3,36(r2)
   2aec0:	008000f4 	movhi	r2,3
   2aec4:	10bfe804 	addi	r2,r2,-96
   2aec8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2aecc:	e037883a 	mov	sp,fp
   2aed0:	df000017 	ldw	fp,0(sp)
   2aed4:	dec00104 	addi	sp,sp,4
   2aed8:	f800283a 	ret

0002aedc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2aedc:	defffd04 	addi	sp,sp,-12
   2aee0:	df000215 	stw	fp,8(sp)
   2aee4:	df000204 	addi	fp,sp,8
   2aee8:	e13ffe15 	stw	r4,-8(fp)
   2aeec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2aef0:	00000506 	br	2af08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2aef4:	e0bfff17 	ldw	r2,-4(fp)
   2aef8:	1090000c 	andi	r2,r2,16384
   2aefc:	10000226 	beq	r2,zero,2af08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2af00:	00bffd44 	movi	r2,-11
   2af04:	00000b06 	br	2af34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2af08:	e0bffe17 	ldw	r2,-8(fp)
   2af0c:	10c00d17 	ldw	r3,52(r2)
   2af10:	e0bffe17 	ldw	r2,-8(fp)
   2af14:	10800c17 	ldw	r2,48(r2)
   2af18:	18800526 	beq	r3,r2,2af30 <altera_avalon_jtag_uart_close+0x54>
   2af1c:	e0bffe17 	ldw	r2,-8(fp)
   2af20:	10c00917 	ldw	r3,36(r2)
   2af24:	e0bffe17 	ldw	r2,-8(fp)
   2af28:	10800117 	ldw	r2,4(r2)
   2af2c:	18bff136 	bltu	r3,r2,2aef4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2af30:	0005883a 	mov	r2,zero
}
   2af34:	e037883a 	mov	sp,fp
   2af38:	df000017 	ldw	fp,0(sp)
   2af3c:	dec00104 	addi	sp,sp,4
   2af40:	f800283a 	ret

0002af44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2af44:	defffa04 	addi	sp,sp,-24
   2af48:	df000515 	stw	fp,20(sp)
   2af4c:	df000504 	addi	fp,sp,20
   2af50:	e13ffd15 	stw	r4,-12(fp)
   2af54:	e17ffe15 	stw	r5,-8(fp)
   2af58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2af5c:	00bff9c4 	movi	r2,-25
   2af60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2af64:	e0bffe17 	ldw	r2,-8(fp)
   2af68:	10da8060 	cmpeqi	r3,r2,27137
   2af6c:	1800031e 	bne	r3,zero,2af7c <altera_avalon_jtag_uart_ioctl+0x38>
   2af70:	109a80a0 	cmpeqi	r2,r2,27138
   2af74:	1000181e 	bne	r2,zero,2afd8 <altera_avalon_jtag_uart_ioctl+0x94>
   2af78:	00002606 	br	2b014 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2af7c:	e0bffd17 	ldw	r2,-12(fp)
   2af80:	10c00117 	ldw	r3,4(r2)
   2af84:	00a00034 	movhi	r2,32768
   2af88:	10bfffc4 	addi	r2,r2,-1
   2af8c:	18802226 	beq	r3,r2,2b018 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   2af90:	e0bfff17 	ldw	r2,-4(fp)
   2af94:	10800017 	ldw	r2,0(r2)
   2af98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2af9c:	e0bffc17 	ldw	r2,-16(fp)
   2afa0:	10800090 	cmplti	r2,r2,2
   2afa4:	1000061e 	bne	r2,zero,2afc0 <altera_avalon_jtag_uart_ioctl+0x7c>
   2afa8:	e0fffc17 	ldw	r3,-16(fp)
   2afac:	00a00034 	movhi	r2,32768
   2afb0:	10bfffc4 	addi	r2,r2,-1
   2afb4:	18800226 	beq	r3,r2,2afc0 <altera_avalon_jtag_uart_ioctl+0x7c>
   2afb8:	e0bffc17 	ldw	r2,-16(fp)
   2afbc:	00000206 	br	2afc8 <altera_avalon_jtag_uart_ioctl+0x84>
   2afc0:	00a00034 	movhi	r2,32768
   2afc4:	10bfff84 	addi	r2,r2,-2
   2afc8:	e0fffd17 	ldw	r3,-12(fp)
   2afcc:	18800115 	stw	r2,4(r3)
      rc = 0;
   2afd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2afd4:	00001006 	br	2b018 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2afd8:	e0bffd17 	ldw	r2,-12(fp)
   2afdc:	10c00117 	ldw	r3,4(r2)
   2afe0:	00a00034 	movhi	r2,32768
   2afe4:	10bfffc4 	addi	r2,r2,-1
   2afe8:	18800d26 	beq	r3,r2,2b020 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2afec:	e0bffd17 	ldw	r2,-12(fp)
   2aff0:	10c00917 	ldw	r3,36(r2)
   2aff4:	e0bffd17 	ldw	r2,-12(fp)
   2aff8:	10800117 	ldw	r2,4(r2)
   2affc:	1885803a 	cmpltu	r2,r3,r2
   2b000:	10c03fcc 	andi	r3,r2,255
   2b004:	e0bfff17 	ldw	r2,-4(fp)
   2b008:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2b00c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2b010:	00000306 	br	2b020 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   2b014:	00000306 	br	2b024 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2b018:	0001883a 	nop
   2b01c:	00000106 	br	2b024 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2b020:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2b024:	e0bffb17 	ldw	r2,-20(fp)
}
   2b028:	e037883a 	mov	sp,fp
   2b02c:	df000017 	ldw	fp,0(sp)
   2b030:	dec00104 	addi	sp,sp,4
   2b034:	f800283a 	ret

0002b038 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2b038:	defff304 	addi	sp,sp,-52
   2b03c:	dfc00c15 	stw	ra,48(sp)
   2b040:	df000b15 	stw	fp,44(sp)
   2b044:	df000b04 	addi	fp,sp,44
   2b048:	e13ffc15 	stw	r4,-16(fp)
   2b04c:	e17ffd15 	stw	r5,-12(fp)
   2b050:	e1bffe15 	stw	r6,-8(fp)
   2b054:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2b058:	e0bffd17 	ldw	r2,-12(fp)
   2b05c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b060:	00004706 	br	2b180 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2b064:	e0bffc17 	ldw	r2,-16(fp)
   2b068:	10800a17 	ldw	r2,40(r2)
   2b06c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2b070:	e0bffc17 	ldw	r2,-16(fp)
   2b074:	10800b17 	ldw	r2,44(r2)
   2b078:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2b07c:	e0fff717 	ldw	r3,-36(fp)
   2b080:	e0bff817 	ldw	r2,-32(fp)
   2b084:	18800536 	bltu	r3,r2,2b09c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2b088:	e0fff717 	ldw	r3,-36(fp)
   2b08c:	e0bff817 	ldw	r2,-32(fp)
   2b090:	1885c83a 	sub	r2,r3,r2
   2b094:	e0bff615 	stw	r2,-40(fp)
   2b098:	00000406 	br	2b0ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2b09c:	00c20004 	movi	r3,2048
   2b0a0:	e0bff817 	ldw	r2,-32(fp)
   2b0a4:	1885c83a 	sub	r2,r3,r2
   2b0a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b0ac:	e0bff617 	ldw	r2,-40(fp)
   2b0b0:	10001e26 	beq	r2,zero,2b12c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2b0b4:	e0fffe17 	ldw	r3,-8(fp)
   2b0b8:	e0bff617 	ldw	r2,-40(fp)
   2b0bc:	1880022e 	bgeu	r3,r2,2b0c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2b0c0:	e0bffe17 	ldw	r2,-8(fp)
   2b0c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2b0c8:	e0bff817 	ldw	r2,-32(fp)
   2b0cc:	10800e04 	addi	r2,r2,56
   2b0d0:	e0fffc17 	ldw	r3,-16(fp)
   2b0d4:	1885883a 	add	r2,r3,r2
   2b0d8:	e13ff517 	ldw	r4,-44(fp)
   2b0dc:	100b883a 	mov	r5,r2
   2b0e0:	e1bff617 	ldw	r6,-40(fp)
   2b0e4:	002581c0 	call	2581c <memcpy>
      ptr   += n;
   2b0e8:	e0fff517 	ldw	r3,-44(fp)
   2b0ec:	e0bff617 	ldw	r2,-40(fp)
   2b0f0:	1885883a 	add	r2,r3,r2
   2b0f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2b0f8:	e0fffe17 	ldw	r3,-8(fp)
   2b0fc:	e0bff617 	ldw	r2,-40(fp)
   2b100:	1885c83a 	sub	r2,r3,r2
   2b104:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b108:	e0fff817 	ldw	r3,-32(fp)
   2b10c:	e0bff617 	ldw	r2,-40(fp)
   2b110:	1885883a 	add	r2,r3,r2
   2b114:	10c1ffcc 	andi	r3,r2,2047
   2b118:	e0bffc17 	ldw	r2,-16(fp)
   2b11c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2b120:	e0bffe17 	ldw	r2,-8(fp)
   2b124:	00bfcf16 	blt	zero,r2,2b064 <altera_avalon_jtag_uart_read+0x2c>
   2b128:	00000106 	br	2b130 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2b12c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2b130:	e0fff517 	ldw	r3,-44(fp)
   2b134:	e0bffd17 	ldw	r2,-12(fp)
   2b138:	1880141e 	bne	r3,r2,2b18c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2b13c:	e0bfff17 	ldw	r2,-4(fp)
   2b140:	1090000c 	andi	r2,r2,16384
   2b144:	1000131e 	bne	r2,zero,2b194 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2b148:	0001883a 	nop
   2b14c:	e0bffc17 	ldw	r2,-16(fp)
   2b150:	10c00a17 	ldw	r3,40(r2)
   2b154:	e0bff717 	ldw	r2,-36(fp)
   2b158:	1880051e 	bne	r3,r2,2b170 <altera_avalon_jtag_uart_read+0x138>
   2b15c:	e0bffc17 	ldw	r2,-16(fp)
   2b160:	10c00917 	ldw	r3,36(r2)
   2b164:	e0bffc17 	ldw	r2,-16(fp)
   2b168:	10800117 	ldw	r2,4(r2)
   2b16c:	18bff736 	bltu	r3,r2,2b14c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2b170:	e0bffc17 	ldw	r2,-16(fp)
   2b174:	10c00a17 	ldw	r3,40(r2)
   2b178:	e0bff717 	ldw	r2,-36(fp)
   2b17c:	18800726 	beq	r3,r2,2b19c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b180:	e0bffe17 	ldw	r2,-8(fp)
   2b184:	00bfb716 	blt	zero,r2,2b064 <altera_avalon_jtag_uart_read+0x2c>
   2b188:	00000506 	br	2b1a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2b18c:	0001883a 	nop
   2b190:	00000306 	br	2b1a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2b194:	0001883a 	nop
   2b198:	00000106 	br	2b1a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2b19c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2b1a0:	e0fff517 	ldw	r3,-44(fp)
   2b1a4:	e0bffd17 	ldw	r2,-12(fp)
   2b1a8:	18801726 	beq	r3,r2,2b208 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b1ac:	0005303a 	rdctl	r2,status
   2b1b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b1b4:	e0fffa17 	ldw	r3,-24(fp)
   2b1b8:	00bfff84 	movi	r2,-2
   2b1bc:	1884703a 	and	r2,r3,r2
   2b1c0:	1001703a 	wrctl	status,r2
  
  return context;
   2b1c4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2b1c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b1cc:	e0bffc17 	ldw	r2,-16(fp)
   2b1d0:	10800817 	ldw	r2,32(r2)
   2b1d4:	10c00054 	ori	r3,r2,1
   2b1d8:	e0bffc17 	ldw	r2,-16(fp)
   2b1dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b1e0:	e0bffc17 	ldw	r2,-16(fp)
   2b1e4:	10800017 	ldw	r2,0(r2)
   2b1e8:	10800104 	addi	r2,r2,4
   2b1ec:	e0fffc17 	ldw	r3,-16(fp)
   2b1f0:	18c00817 	ldw	r3,32(r3)
   2b1f4:	10c00035 	stwio	r3,0(r2)
   2b1f8:	e0bff917 	ldw	r2,-28(fp)
   2b1fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b200:	e0bffb17 	ldw	r2,-20(fp)
   2b204:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2b208:	e0fff517 	ldw	r3,-44(fp)
   2b20c:	e0bffd17 	ldw	r2,-12(fp)
   2b210:	18800426 	beq	r3,r2,2b224 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   2b214:	e0fff517 	ldw	r3,-44(fp)
   2b218:	e0bffd17 	ldw	r2,-12(fp)
   2b21c:	1885c83a 	sub	r2,r3,r2
   2b220:	00000606 	br	2b23c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   2b224:	e0bfff17 	ldw	r2,-4(fp)
   2b228:	1090000c 	andi	r2,r2,16384
   2b22c:	10000226 	beq	r2,zero,2b238 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   2b230:	00bffd44 	movi	r2,-11
   2b234:	00000106 	br	2b23c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   2b238:	00bffec4 	movi	r2,-5
}
   2b23c:	e037883a 	mov	sp,fp
   2b240:	dfc00117 	ldw	ra,4(sp)
   2b244:	df000017 	ldw	fp,0(sp)
   2b248:	dec00204 	addi	sp,sp,8
   2b24c:	f800283a 	ret

0002b250 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2b250:	defff304 	addi	sp,sp,-52
   2b254:	dfc00c15 	stw	ra,48(sp)
   2b258:	df000b15 	stw	fp,44(sp)
   2b25c:	df000b04 	addi	fp,sp,44
   2b260:	e13ffc15 	stw	r4,-16(fp)
   2b264:	e17ffd15 	stw	r5,-12(fp)
   2b268:	e1bffe15 	stw	r6,-8(fp)
   2b26c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2b270:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2b274:	e0bffd17 	ldw	r2,-12(fp)
   2b278:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b27c:	00003706 	br	2b35c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2b280:	e0bffc17 	ldw	r2,-16(fp)
   2b284:	10800c17 	ldw	r2,48(r2)
   2b288:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2b28c:	e0bffc17 	ldw	r2,-16(fp)
   2b290:	10800d17 	ldw	r2,52(r2)
   2b294:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2b298:	e0fff817 	ldw	r3,-32(fp)
   2b29c:	e0bff517 	ldw	r2,-44(fp)
   2b2a0:	1880062e 	bgeu	r3,r2,2b2bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2b2a4:	e0fff517 	ldw	r3,-44(fp)
   2b2a8:	e0bff817 	ldw	r2,-32(fp)
   2b2ac:	1885c83a 	sub	r2,r3,r2
   2b2b0:	10bfffc4 	addi	r2,r2,-1
   2b2b4:	e0bff615 	stw	r2,-40(fp)
   2b2b8:	00000b06 	br	2b2e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2b2bc:	e0bff517 	ldw	r2,-44(fp)
   2b2c0:	10000526 	beq	r2,zero,2b2d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2b2c4:	00c20004 	movi	r3,2048
   2b2c8:	e0bff817 	ldw	r2,-32(fp)
   2b2cc:	1885c83a 	sub	r2,r3,r2
   2b2d0:	e0bff615 	stw	r2,-40(fp)
   2b2d4:	00000406 	br	2b2e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2b2d8:	00c1ffc4 	movi	r3,2047
   2b2dc:	e0bff817 	ldw	r2,-32(fp)
   2b2e0:	1885c83a 	sub	r2,r3,r2
   2b2e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b2e8:	e0bff617 	ldw	r2,-40(fp)
   2b2ec:	10001e26 	beq	r2,zero,2b368 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2b2f0:	e0fffe17 	ldw	r3,-8(fp)
   2b2f4:	e0bff617 	ldw	r2,-40(fp)
   2b2f8:	1880022e 	bgeu	r3,r2,2b304 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2b2fc:	e0bffe17 	ldw	r2,-8(fp)
   2b300:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2b304:	e0bff817 	ldw	r2,-32(fp)
   2b308:	10820e04 	addi	r2,r2,2104
   2b30c:	e0fffc17 	ldw	r3,-16(fp)
   2b310:	1885883a 	add	r2,r3,r2
   2b314:	1009883a 	mov	r4,r2
   2b318:	e17ffd17 	ldw	r5,-12(fp)
   2b31c:	e1bff617 	ldw	r6,-40(fp)
   2b320:	002581c0 	call	2581c <memcpy>
      ptr   += n;
   2b324:	e0fffd17 	ldw	r3,-12(fp)
   2b328:	e0bff617 	ldw	r2,-40(fp)
   2b32c:	1885883a 	add	r2,r3,r2
   2b330:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2b334:	e0fffe17 	ldw	r3,-8(fp)
   2b338:	e0bff617 	ldw	r2,-40(fp)
   2b33c:	1885c83a 	sub	r2,r3,r2
   2b340:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b344:	e0fff817 	ldw	r3,-32(fp)
   2b348:	e0bff617 	ldw	r2,-40(fp)
   2b34c:	1885883a 	add	r2,r3,r2
   2b350:	10c1ffcc 	andi	r3,r2,2047
   2b354:	e0bffc17 	ldw	r2,-16(fp)
   2b358:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b35c:	e0bffe17 	ldw	r2,-8(fp)
   2b360:	00bfc716 	blt	zero,r2,2b280 <altera_avalon_jtag_uart_write+0x30>
   2b364:	00000106 	br	2b36c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2b368:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b36c:	0005303a 	rdctl	r2,status
   2b370:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b374:	e0fffa17 	ldw	r3,-24(fp)
   2b378:	00bfff84 	movi	r2,-2
   2b37c:	1884703a 	and	r2,r3,r2
   2b380:	1001703a 	wrctl	status,r2
  
  return context;
   2b384:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2b388:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b38c:	e0bffc17 	ldw	r2,-16(fp)
   2b390:	10800817 	ldw	r2,32(r2)
   2b394:	10c00094 	ori	r3,r2,2
   2b398:	e0bffc17 	ldw	r2,-16(fp)
   2b39c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b3a0:	e0bffc17 	ldw	r2,-16(fp)
   2b3a4:	10800017 	ldw	r2,0(r2)
   2b3a8:	10800104 	addi	r2,r2,4
   2b3ac:	e0fffc17 	ldw	r3,-16(fp)
   2b3b0:	18c00817 	ldw	r3,32(r3)
   2b3b4:	10c00035 	stwio	r3,0(r2)
   2b3b8:	e0bff917 	ldw	r2,-28(fp)
   2b3bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b3c0:	e0bffb17 	ldw	r2,-20(fp)
   2b3c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2b3c8:	e0bffe17 	ldw	r2,-8(fp)
   2b3cc:	0080110e 	bge	zero,r2,2b414 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2b3d0:	e0bfff17 	ldw	r2,-4(fp)
   2b3d4:	1090000c 	andi	r2,r2,16384
   2b3d8:	1000111e 	bne	r2,zero,2b420 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2b3dc:	0001883a 	nop
   2b3e0:	e0bffc17 	ldw	r2,-16(fp)
   2b3e4:	10c00d17 	ldw	r3,52(r2)
   2b3e8:	e0bff517 	ldw	r2,-44(fp)
   2b3ec:	1880051e 	bne	r3,r2,2b404 <altera_avalon_jtag_uart_write+0x1b4>
   2b3f0:	e0bffc17 	ldw	r2,-16(fp)
   2b3f4:	10c00917 	ldw	r3,36(r2)
   2b3f8:	e0bffc17 	ldw	r2,-16(fp)
   2b3fc:	10800117 	ldw	r2,4(r2)
   2b400:	18bff736 	bltu	r3,r2,2b3e0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2b404:	e0bffc17 	ldw	r2,-16(fp)
   2b408:	10c00d17 	ldw	r3,52(r2)
   2b40c:	e0bff517 	ldw	r2,-44(fp)
   2b410:	18800526 	beq	r3,r2,2b428 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2b414:	e0bffe17 	ldw	r2,-8(fp)
   2b418:	00bfd016 	blt	zero,r2,2b35c <altera_avalon_jtag_uart_write+0x10c>
   2b41c:	00000306 	br	2b42c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2b420:	0001883a 	nop
   2b424:	00000106 	br	2b42c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   2b428:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2b42c:	e0fffd17 	ldw	r3,-12(fp)
   2b430:	e0bff717 	ldw	r2,-36(fp)
   2b434:	18800426 	beq	r3,r2,2b448 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2b438:	e0fffd17 	ldw	r3,-12(fp)
   2b43c:	e0bff717 	ldw	r2,-36(fp)
   2b440:	1885c83a 	sub	r2,r3,r2
   2b444:	00000606 	br	2b460 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2b448:	e0bfff17 	ldw	r2,-4(fp)
   2b44c:	1090000c 	andi	r2,r2,16384
   2b450:	10000226 	beq	r2,zero,2b45c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2b454:	00bffd44 	movi	r2,-11
   2b458:	00000106 	br	2b460 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2b45c:	00bffec4 	movi	r2,-5
}
   2b460:	e037883a 	mov	sp,fp
   2b464:	dfc00117 	ldw	ra,4(sp)
   2b468:	df000017 	ldw	fp,0(sp)
   2b46c:	dec00204 	addi	sp,sp,8
   2b470:	f800283a 	ret

0002b474 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2b474:	defffa04 	addi	sp,sp,-24
   2b478:	dfc00515 	stw	ra,20(sp)
   2b47c:	df000415 	stw	fp,16(sp)
   2b480:	df000404 	addi	fp,sp,16
   2b484:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2b488:	0007883a 	mov	r3,zero
   2b48c:	e0bfff17 	ldw	r2,-4(fp)
   2b490:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2b494:	e0bfff17 	ldw	r2,-4(fp)
   2b498:	10800104 	addi	r2,r2,4
   2b49c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b4a0:	0005303a 	rdctl	r2,status
   2b4a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b4a8:	e0fffd17 	ldw	r3,-12(fp)
   2b4ac:	00bfff84 	movi	r2,-2
   2b4b0:	1884703a 	and	r2,r3,r2
   2b4b4:	1001703a 	wrctl	status,r2
  
  return context;
   2b4b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2b4bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2b4c0:	002bfe00 	call	2bfe0 <alt_tick>
   2b4c4:	e0bffc17 	ldw	r2,-16(fp)
   2b4c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b4cc:	e0bffe17 	ldw	r2,-8(fp)
   2b4d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2b4d4:	e037883a 	mov	sp,fp
   2b4d8:	dfc00117 	ldw	ra,4(sp)
   2b4dc:	df000017 	ldw	fp,0(sp)
   2b4e0:	dec00204 	addi	sp,sp,8
   2b4e4:	f800283a 	ret

0002b4e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2b4e8:	defff804 	addi	sp,sp,-32
   2b4ec:	dfc00715 	stw	ra,28(sp)
   2b4f0:	df000615 	stw	fp,24(sp)
   2b4f4:	df000604 	addi	fp,sp,24
   2b4f8:	e13ffc15 	stw	r4,-16(fp)
   2b4fc:	e17ffd15 	stw	r5,-12(fp)
   2b500:	e1bffe15 	stw	r6,-8(fp)
   2b504:	e1ffff15 	stw	r7,-4(fp)
   2b508:	e0bfff17 	ldw	r2,-4(fp)
   2b50c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2b510:	008000f4 	movhi	r2,3
   2b514:	10bfe804 	addi	r2,r2,-96
   2b518:	10800017 	ldw	r2,0(r2)
   2b51c:	1000041e 	bne	r2,zero,2b530 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2b520:	008000f4 	movhi	r2,3
   2b524:	10bfe804 	addi	r2,r2,-96
   2b528:	e0fffb17 	ldw	r3,-20(fp)
   2b52c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2b530:	e0bffc17 	ldw	r2,-16(fp)
   2b534:	10800104 	addi	r2,r2,4
   2b538:	00c001c4 	movi	r3,7
   2b53c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2b540:	d8000015 	stw	zero,0(sp)
   2b544:	e13ffd17 	ldw	r4,-12(fp)
   2b548:	e17ffe17 	ldw	r5,-8(fp)
   2b54c:	018000f4 	movhi	r6,3
   2b550:	31ad1d04 	addi	r6,r6,-19340
   2b554:	e1fffc17 	ldw	r7,-16(fp)
   2b558:	002b8900 	call	2b890 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2b55c:	e037883a 	mov	sp,fp
   2b560:	dfc00117 	ldw	ra,4(sp)
   2b564:	df000017 	ldw	fp,0(sp)
   2b568:	dec00204 	addi	sp,sp,8
   2b56c:	f800283a 	ret

0002b570 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2b570:	defff504 	addi	sp,sp,-44
   2b574:	df000a15 	stw	fp,40(sp)
   2b578:	df000a04 	addi	fp,sp,40
   2b57c:	e13ffc15 	stw	r4,-16(fp)
   2b580:	e17ffd15 	stw	r5,-12(fp)
   2b584:	e1bffe15 	stw	r6,-8(fp)
   2b588:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2b58c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b590:	008000f4 	movhi	r2,3
   2b594:	10bfe804 	addi	r2,r2,-96
   2b598:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2b59c:	10003f26 	beq	r2,zero,2b69c <alt_alarm_start+0x12c>
  {
    if (alarm)
   2b5a0:	e0bffc17 	ldw	r2,-16(fp)
   2b5a4:	10003b26 	beq	r2,zero,2b694 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2b5a8:	e0bffc17 	ldw	r2,-16(fp)
   2b5ac:	e0fffe17 	ldw	r3,-8(fp)
   2b5b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2b5b4:	e0bffc17 	ldw	r2,-16(fp)
   2b5b8:	e0ffff17 	ldw	r3,-4(fp)
   2b5bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b5c0:	0005303a 	rdctl	r2,status
   2b5c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b5c8:	e0fff817 	ldw	r3,-32(fp)
   2b5cc:	00bfff84 	movi	r2,-2
   2b5d0:	1884703a 	and	r2,r3,r2
   2b5d4:	1001703a 	wrctl	status,r2
  
  return context;
   2b5d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2b5dc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2b5e0:	008000f4 	movhi	r2,3
   2b5e4:	10bfe904 	addi	r2,r2,-92
   2b5e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2b5ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2b5f0:	e0fffd17 	ldw	r3,-12(fp)
   2b5f4:	e0bff617 	ldw	r2,-40(fp)
   2b5f8:	1885883a 	add	r2,r3,r2
   2b5fc:	10c00044 	addi	r3,r2,1
   2b600:	e0bffc17 	ldw	r2,-16(fp)
   2b604:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2b608:	e0bffc17 	ldw	r2,-16(fp)
   2b60c:	10c00217 	ldw	r3,8(r2)
   2b610:	e0bff617 	ldw	r2,-40(fp)
   2b614:	1880042e 	bgeu	r3,r2,2b628 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2b618:	e0bffc17 	ldw	r2,-16(fp)
   2b61c:	00c00044 	movi	r3,1
   2b620:	10c00405 	stb	r3,16(r2)
   2b624:	00000206 	br	2b630 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2b628:	e0bffc17 	ldw	r2,-16(fp)
   2b62c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2b630:	e0bffc17 	ldw	r2,-16(fp)
   2b634:	00c000f4 	movhi	r3,3
   2b638:	18f94504 	addi	r3,r3,-6892
   2b63c:	e0fff915 	stw	r3,-28(fp)
   2b640:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b644:	e0bffa17 	ldw	r2,-24(fp)
   2b648:	e0fff917 	ldw	r3,-28(fp)
   2b64c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b650:	e0bff917 	ldw	r2,-28(fp)
   2b654:	10c00017 	ldw	r3,0(r2)
   2b658:	e0bffa17 	ldw	r2,-24(fp)
   2b65c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b660:	e0bff917 	ldw	r2,-28(fp)
   2b664:	10800017 	ldw	r2,0(r2)
   2b668:	e0fffa17 	ldw	r3,-24(fp)
   2b66c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b670:	e0bff917 	ldw	r2,-28(fp)
   2b674:	e0fffa17 	ldw	r3,-24(fp)
   2b678:	10c00015 	stw	r3,0(r2)
   2b67c:	e0bff717 	ldw	r2,-36(fp)
   2b680:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b684:	e0bffb17 	ldw	r2,-20(fp)
   2b688:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2b68c:	0005883a 	mov	r2,zero
   2b690:	00000306 	br	2b6a0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2b694:	00bffa84 	movi	r2,-22
   2b698:	00000106 	br	2b6a0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2b69c:	00bfde84 	movi	r2,-134
  }
}
   2b6a0:	e037883a 	mov	sp,fp
   2b6a4:	df000017 	ldw	fp,0(sp)
   2b6a8:	dec00104 	addi	sp,sp,4
   2b6ac:	f800283a 	ret

0002b6b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2b6b0:	deffff04 	addi	sp,sp,-4
   2b6b4:	df000015 	stw	fp,0(sp)
   2b6b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2b6bc:	e037883a 	mov	sp,fp
   2b6c0:	df000017 	ldw	fp,0(sp)
   2b6c4:	dec00104 	addi	sp,sp,4
   2b6c8:	f800283a 	ret

0002b6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b6cc:	defffe04 	addi	sp,sp,-8
   2b6d0:	dfc00115 	stw	ra,4(sp)
   2b6d4:	df000015 	stw	fp,0(sp)
   2b6d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b6dc:	008000f4 	movhi	r2,3
   2b6e0:	10b94204 	addi	r2,r2,-6904
   2b6e4:	10800017 	ldw	r2,0(r2)
   2b6e8:	10000526 	beq	r2,zero,2b700 <alt_get_errno+0x34>
   2b6ec:	008000f4 	movhi	r2,3
   2b6f0:	10b94204 	addi	r2,r2,-6904
   2b6f4:	10800017 	ldw	r2,0(r2)
   2b6f8:	103ee83a 	callr	r2
   2b6fc:	00000206 	br	2b708 <alt_get_errno+0x3c>
   2b700:	008000f4 	movhi	r2,3
   2b704:	10bfe304 	addi	r2,r2,-116
}
   2b708:	e037883a 	mov	sp,fp
   2b70c:	dfc00117 	ldw	ra,4(sp)
   2b710:	df000017 	ldw	fp,0(sp)
   2b714:	dec00204 	addi	sp,sp,8
   2b718:	f800283a 	ret

0002b71c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2b71c:	defffa04 	addi	sp,sp,-24
   2b720:	dfc00515 	stw	ra,20(sp)
   2b724:	df000415 	stw	fp,16(sp)
   2b728:	df000404 	addi	fp,sp,16
   2b72c:	e13ffe15 	stw	r4,-8(fp)
   2b730:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2b734:	e0bffe17 	ldw	r2,-8(fp)
   2b738:	10000326 	beq	r2,zero,2b748 <alt_dev_llist_insert+0x2c>
   2b73c:	e0bffe17 	ldw	r2,-8(fp)
   2b740:	10800217 	ldw	r2,8(r2)
   2b744:	1000051e 	bne	r2,zero,2b75c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2b748:	002b6cc0 	call	2b6cc <alt_get_errno>
   2b74c:	00c00584 	movi	r3,22
   2b750:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2b754:	00bffa84 	movi	r2,-22
   2b758:	00001306 	br	2b7a8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2b75c:	e0bffe17 	ldw	r2,-8(fp)
   2b760:	e0ffff17 	ldw	r3,-4(fp)
   2b764:	e0fffc15 	stw	r3,-16(fp)
   2b768:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b76c:	e0bffd17 	ldw	r2,-12(fp)
   2b770:	e0fffc17 	ldw	r3,-16(fp)
   2b774:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b778:	e0bffc17 	ldw	r2,-16(fp)
   2b77c:	10c00017 	ldw	r3,0(r2)
   2b780:	e0bffd17 	ldw	r2,-12(fp)
   2b784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b788:	e0bffc17 	ldw	r2,-16(fp)
   2b78c:	10800017 	ldw	r2,0(r2)
   2b790:	e0fffd17 	ldw	r3,-12(fp)
   2b794:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b798:	e0bffc17 	ldw	r2,-16(fp)
   2b79c:	e0fffd17 	ldw	r3,-12(fp)
   2b7a0:	10c00015 	stw	r3,0(r2)

  return 0;  
   2b7a4:	0005883a 	mov	r2,zero
}
   2b7a8:	e037883a 	mov	sp,fp
   2b7ac:	dfc00117 	ldw	ra,4(sp)
   2b7b0:	df000017 	ldw	fp,0(sp)
   2b7b4:	dec00204 	addi	sp,sp,8
   2b7b8:	f800283a 	ret

0002b7bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2b7bc:	defffd04 	addi	sp,sp,-12
   2b7c0:	dfc00215 	stw	ra,8(sp)
   2b7c4:	df000115 	stw	fp,4(sp)
   2b7c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b7cc:	008000f4 	movhi	r2,3
   2b7d0:	10b1d304 	addi	r2,r2,-14516
   2b7d4:	e0bfff15 	stw	r2,-4(fp)
   2b7d8:	00000606 	br	2b7f4 <_do_ctors+0x38>
        (*ctor) (); 
   2b7dc:	e0bfff17 	ldw	r2,-4(fp)
   2b7e0:	10800017 	ldw	r2,0(r2)
   2b7e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b7e8:	e0bfff17 	ldw	r2,-4(fp)
   2b7ec:	10bfff04 	addi	r2,r2,-4
   2b7f0:	e0bfff15 	stw	r2,-4(fp)
   2b7f4:	e0ffff17 	ldw	r3,-4(fp)
   2b7f8:	008000f4 	movhi	r2,3
   2b7fc:	10b1d404 	addi	r2,r2,-14512
   2b800:	18bff62e 	bgeu	r3,r2,2b7dc <_do_ctors+0x20>
        (*ctor) (); 
}
   2b804:	e037883a 	mov	sp,fp
   2b808:	dfc00117 	ldw	ra,4(sp)
   2b80c:	df000017 	ldw	fp,0(sp)
   2b810:	dec00204 	addi	sp,sp,8
   2b814:	f800283a 	ret

0002b818 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2b818:	defffd04 	addi	sp,sp,-12
   2b81c:	dfc00215 	stw	ra,8(sp)
   2b820:	df000115 	stw	fp,4(sp)
   2b824:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b828:	008000f4 	movhi	r2,3
   2b82c:	10b1d304 	addi	r2,r2,-14516
   2b830:	e0bfff15 	stw	r2,-4(fp)
   2b834:	00000606 	br	2b850 <_do_dtors+0x38>
        (*dtor) (); 
   2b838:	e0bfff17 	ldw	r2,-4(fp)
   2b83c:	10800017 	ldw	r2,0(r2)
   2b840:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b844:	e0bfff17 	ldw	r2,-4(fp)
   2b848:	10bfff04 	addi	r2,r2,-4
   2b84c:	e0bfff15 	stw	r2,-4(fp)
   2b850:	e0ffff17 	ldw	r3,-4(fp)
   2b854:	008000f4 	movhi	r2,3
   2b858:	10b1d404 	addi	r2,r2,-14512
   2b85c:	18bff62e 	bgeu	r3,r2,2b838 <_do_dtors+0x20>
        (*dtor) (); 
}
   2b860:	e037883a 	mov	sp,fp
   2b864:	dfc00117 	ldw	ra,4(sp)
   2b868:	df000017 	ldw	fp,0(sp)
   2b86c:	dec00204 	addi	sp,sp,8
   2b870:	f800283a 	ret

0002b874 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2b874:	deffff04 	addi	sp,sp,-4
   2b878:	df000015 	stw	fp,0(sp)
   2b87c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2b880:	e037883a 	mov	sp,fp
   2b884:	df000017 	ldw	fp,0(sp)
   2b888:	dec00104 	addi	sp,sp,4
   2b88c:	f800283a 	ret

0002b890 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2b890:	defff904 	addi	sp,sp,-28
   2b894:	dfc00615 	stw	ra,24(sp)
   2b898:	df000515 	stw	fp,20(sp)
   2b89c:	df000504 	addi	fp,sp,20
   2b8a0:	e13ffc15 	stw	r4,-16(fp)
   2b8a4:	e17ffd15 	stw	r5,-12(fp)
   2b8a8:	e1bffe15 	stw	r6,-8(fp)
   2b8ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2b8b0:	e0800217 	ldw	r2,8(fp)
   2b8b4:	d8800015 	stw	r2,0(sp)
   2b8b8:	e13ffc17 	ldw	r4,-16(fp)
   2b8bc:	e17ffd17 	ldw	r5,-12(fp)
   2b8c0:	e1bffe17 	ldw	r6,-8(fp)
   2b8c4:	e1ffff17 	ldw	r7,-4(fp)
   2b8c8:	002ba680 	call	2ba68 <alt_iic_isr_register>
}  
   2b8cc:	e037883a 	mov	sp,fp
   2b8d0:	dfc00117 	ldw	ra,4(sp)
   2b8d4:	df000017 	ldw	fp,0(sp)
   2b8d8:	dec00204 	addi	sp,sp,8
   2b8dc:	f800283a 	ret

0002b8e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2b8e0:	defff904 	addi	sp,sp,-28
   2b8e4:	df000615 	stw	fp,24(sp)
   2b8e8:	df000604 	addi	fp,sp,24
   2b8ec:	e13ffe15 	stw	r4,-8(fp)
   2b8f0:	e17fff15 	stw	r5,-4(fp)
   2b8f4:	e0bfff17 	ldw	r2,-4(fp)
   2b8f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b8fc:	0005303a 	rdctl	r2,status
   2b900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b904:	e0fffb17 	ldw	r3,-20(fp)
   2b908:	00bfff84 	movi	r2,-2
   2b90c:	1884703a 	and	r2,r3,r2
   2b910:	1001703a 	wrctl	status,r2
  
  return context;
   2b914:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b918:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2b91c:	e0bffa17 	ldw	r2,-24(fp)
   2b920:	00c00044 	movi	r3,1
   2b924:	1884983a 	sll	r2,r3,r2
   2b928:	1007883a 	mov	r3,r2
   2b92c:	008000f4 	movhi	r2,3
   2b930:	10bfe704 	addi	r2,r2,-100
   2b934:	10800017 	ldw	r2,0(r2)
   2b938:	1886b03a 	or	r3,r3,r2
   2b93c:	008000f4 	movhi	r2,3
   2b940:	10bfe704 	addi	r2,r2,-100
   2b944:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b948:	008000f4 	movhi	r2,3
   2b94c:	10bfe704 	addi	r2,r2,-100
   2b950:	10800017 	ldw	r2,0(r2)
   2b954:	100170fa 	wrctl	ienable,r2
   2b958:	e0bffc17 	ldw	r2,-16(fp)
   2b95c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b960:	e0bffd17 	ldw	r2,-12(fp)
   2b964:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2b968:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2b96c:	e037883a 	mov	sp,fp
   2b970:	df000017 	ldw	fp,0(sp)
   2b974:	dec00104 	addi	sp,sp,4
   2b978:	f800283a 	ret

0002b97c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2b97c:	defff904 	addi	sp,sp,-28
   2b980:	df000615 	stw	fp,24(sp)
   2b984:	df000604 	addi	fp,sp,24
   2b988:	e13ffe15 	stw	r4,-8(fp)
   2b98c:	e17fff15 	stw	r5,-4(fp)
   2b990:	e0bfff17 	ldw	r2,-4(fp)
   2b994:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b998:	0005303a 	rdctl	r2,status
   2b99c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b9a0:	e0fffb17 	ldw	r3,-20(fp)
   2b9a4:	00bfff84 	movi	r2,-2
   2b9a8:	1884703a 	and	r2,r3,r2
   2b9ac:	1001703a 	wrctl	status,r2
  
  return context;
   2b9b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b9b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2b9b8:	e0bffa17 	ldw	r2,-24(fp)
   2b9bc:	00c00044 	movi	r3,1
   2b9c0:	1884983a 	sll	r2,r3,r2
   2b9c4:	0084303a 	nor	r2,zero,r2
   2b9c8:	1007883a 	mov	r3,r2
   2b9cc:	008000f4 	movhi	r2,3
   2b9d0:	10bfe704 	addi	r2,r2,-100
   2b9d4:	10800017 	ldw	r2,0(r2)
   2b9d8:	1886703a 	and	r3,r3,r2
   2b9dc:	008000f4 	movhi	r2,3
   2b9e0:	10bfe704 	addi	r2,r2,-100
   2b9e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b9e8:	008000f4 	movhi	r2,3
   2b9ec:	10bfe704 	addi	r2,r2,-100
   2b9f0:	10800017 	ldw	r2,0(r2)
   2b9f4:	100170fa 	wrctl	ienable,r2
   2b9f8:	e0bffc17 	ldw	r2,-16(fp)
   2b9fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ba00:	e0bffd17 	ldw	r2,-12(fp)
   2ba04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ba08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2ba0c:	e037883a 	mov	sp,fp
   2ba10:	df000017 	ldw	fp,0(sp)
   2ba14:	dec00104 	addi	sp,sp,4
   2ba18:	f800283a 	ret

0002ba1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2ba1c:	defffc04 	addi	sp,sp,-16
   2ba20:	df000315 	stw	fp,12(sp)
   2ba24:	df000304 	addi	fp,sp,12
   2ba28:	e13ffe15 	stw	r4,-8(fp)
   2ba2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2ba30:	000530fa 	rdctl	r2,ienable
   2ba34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2ba38:	e0bfff17 	ldw	r2,-4(fp)
   2ba3c:	00c00044 	movi	r3,1
   2ba40:	1884983a 	sll	r2,r3,r2
   2ba44:	1007883a 	mov	r3,r2
   2ba48:	e0bffd17 	ldw	r2,-12(fp)
   2ba4c:	1884703a 	and	r2,r3,r2
   2ba50:	1004c03a 	cmpne	r2,r2,zero
   2ba54:	10803fcc 	andi	r2,r2,255
}
   2ba58:	e037883a 	mov	sp,fp
   2ba5c:	df000017 	ldw	fp,0(sp)
   2ba60:	dec00104 	addi	sp,sp,4
   2ba64:	f800283a 	ret

0002ba68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ba68:	defff504 	addi	sp,sp,-44
   2ba6c:	dfc00a15 	stw	ra,40(sp)
   2ba70:	df000915 	stw	fp,36(sp)
   2ba74:	df000904 	addi	fp,sp,36
   2ba78:	e13ffc15 	stw	r4,-16(fp)
   2ba7c:	e17ffd15 	stw	r5,-12(fp)
   2ba80:	e1bffe15 	stw	r6,-8(fp)
   2ba84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2ba88:	00bffa84 	movi	r2,-22
   2ba8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2ba90:	e0bffd17 	ldw	r2,-12(fp)
   2ba94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2ba98:	e0bff817 	ldw	r2,-32(fp)
   2ba9c:	10800808 	cmpgei	r2,r2,32
   2baa0:	1000271e 	bne	r2,zero,2bb40 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2baa4:	0005303a 	rdctl	r2,status
   2baa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2baac:	e0fffa17 	ldw	r3,-24(fp)
   2bab0:	00bfff84 	movi	r2,-2
   2bab4:	1884703a 	and	r2,r3,r2
   2bab8:	1001703a 	wrctl	status,r2
  
  return context;
   2babc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2bac0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2bac4:	00c000f4 	movhi	r3,3
   2bac8:	18fff404 	addi	r3,r3,-48
   2bacc:	e0bff817 	ldw	r2,-32(fp)
   2bad0:	100490fa 	slli	r2,r2,3
   2bad4:	1885883a 	add	r2,r3,r2
   2bad8:	e0fffe17 	ldw	r3,-8(fp)
   2badc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2bae0:	00c000f4 	movhi	r3,3
   2bae4:	18fff404 	addi	r3,r3,-48
   2bae8:	e0bff817 	ldw	r2,-32(fp)
   2baec:	100490fa 	slli	r2,r2,3
   2baf0:	1885883a 	add	r2,r3,r2
   2baf4:	10800104 	addi	r2,r2,4
   2baf8:	e0ffff17 	ldw	r3,-4(fp)
   2bafc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2bb00:	e0bffe17 	ldw	r2,-8(fp)
   2bb04:	10000526 	beq	r2,zero,2bb1c <alt_iic_isr_register+0xb4>
   2bb08:	e0bff817 	ldw	r2,-32(fp)
   2bb0c:	e13ffc17 	ldw	r4,-16(fp)
   2bb10:	100b883a 	mov	r5,r2
   2bb14:	002b8e00 	call	2b8e0 <alt_ic_irq_enable>
   2bb18:	00000406 	br	2bb2c <alt_iic_isr_register+0xc4>
   2bb1c:	e0bff817 	ldw	r2,-32(fp)
   2bb20:	e13ffc17 	ldw	r4,-16(fp)
   2bb24:	100b883a 	mov	r5,r2
   2bb28:	002b97c0 	call	2b97c <alt_ic_irq_disable>
   2bb2c:	e0bff715 	stw	r2,-36(fp)
   2bb30:	e0bff917 	ldw	r2,-28(fp)
   2bb34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bb38:	e0bffb17 	ldw	r2,-20(fp)
   2bb3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2bb40:	e0bff717 	ldw	r2,-36(fp)
}
   2bb44:	e037883a 	mov	sp,fp
   2bb48:	dfc00117 	ldw	ra,4(sp)
   2bb4c:	df000017 	ldw	fp,0(sp)
   2bb50:	dec00204 	addi	sp,sp,8
   2bb54:	f800283a 	ret

0002bb58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2bb58:	defff804 	addi	sp,sp,-32
   2bb5c:	dfc00715 	stw	ra,28(sp)
   2bb60:	df000615 	stw	fp,24(sp)
   2bb64:	dc000515 	stw	r16,20(sp)
   2bb68:	df000504 	addi	fp,sp,20
   2bb6c:	e13ffc15 	stw	r4,-16(fp)
   2bb70:	e17ffd15 	stw	r5,-12(fp)
   2bb74:	e1bffe15 	stw	r6,-8(fp)
   2bb78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2bb7c:	e13ffd17 	ldw	r4,-12(fp)
   2bb80:	e17ffe17 	ldw	r5,-8(fp)
   2bb84:	e1bfff17 	ldw	r6,-4(fp)
   2bb88:	002bdf00 	call	2bdf0 <open>
   2bb8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2bb90:	e0bffb17 	ldw	r2,-20(fp)
   2bb94:	10002216 	blt	r2,zero,2bc20 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2bb98:	040000f4 	movhi	r16,3
   2bb9c:	8434c004 	addi	r16,r16,-11520
   2bba0:	e0bffb17 	ldw	r2,-20(fp)
   2bba4:	1009883a 	mov	r4,r2
   2bba8:	01400304 	movi	r5,12
   2bbac:	00294340 	call	29434 <__mulsi3>
   2bbb0:	8085883a 	add	r2,r16,r2
   2bbb4:	10c00017 	ldw	r3,0(r2)
   2bbb8:	e0bffc17 	ldw	r2,-16(fp)
   2bbbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2bbc0:	040000f4 	movhi	r16,3
   2bbc4:	8434c004 	addi	r16,r16,-11520
   2bbc8:	e0bffb17 	ldw	r2,-20(fp)
   2bbcc:	1009883a 	mov	r4,r2
   2bbd0:	01400304 	movi	r5,12
   2bbd4:	00294340 	call	29434 <__mulsi3>
   2bbd8:	8085883a 	add	r2,r16,r2
   2bbdc:	10800104 	addi	r2,r2,4
   2bbe0:	10c00017 	ldw	r3,0(r2)
   2bbe4:	e0bffc17 	ldw	r2,-16(fp)
   2bbe8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2bbec:	040000f4 	movhi	r16,3
   2bbf0:	8434c004 	addi	r16,r16,-11520
   2bbf4:	e0bffb17 	ldw	r2,-20(fp)
   2bbf8:	1009883a 	mov	r4,r2
   2bbfc:	01400304 	movi	r5,12
   2bc00:	00294340 	call	29434 <__mulsi3>
   2bc04:	8085883a 	add	r2,r16,r2
   2bc08:	10800204 	addi	r2,r2,8
   2bc0c:	10c00017 	ldw	r3,0(r2)
   2bc10:	e0bffc17 	ldw	r2,-16(fp)
   2bc14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2bc18:	e13ffb17 	ldw	r4,-20(fp)
   2bc1c:	002a1e00 	call	2a1e0 <alt_release_fd>
  }
} 
   2bc20:	e037883a 	mov	sp,fp
   2bc24:	dfc00217 	ldw	ra,8(sp)
   2bc28:	df000117 	ldw	fp,4(sp)
   2bc2c:	dc000017 	ldw	r16,0(sp)
   2bc30:	dec00304 	addi	sp,sp,12
   2bc34:	f800283a 	ret

0002bc38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2bc38:	defffb04 	addi	sp,sp,-20
   2bc3c:	dfc00415 	stw	ra,16(sp)
   2bc40:	df000315 	stw	fp,12(sp)
   2bc44:	df000304 	addi	fp,sp,12
   2bc48:	e13ffd15 	stw	r4,-12(fp)
   2bc4c:	e17ffe15 	stw	r5,-8(fp)
   2bc50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2bc54:	010000f4 	movhi	r4,3
   2bc58:	2134c304 	addi	r4,r4,-11508
   2bc5c:	e17ffd17 	ldw	r5,-12(fp)
   2bc60:	01800044 	movi	r6,1
   2bc64:	01c07fc4 	movi	r7,511
   2bc68:	002bb580 	call	2bb58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2bc6c:	010000f4 	movhi	r4,3
   2bc70:	2134c004 	addi	r4,r4,-11520
   2bc74:	e17ffe17 	ldw	r5,-8(fp)
   2bc78:	000d883a 	mov	r6,zero
   2bc7c:	01c07fc4 	movi	r7,511
   2bc80:	002bb580 	call	2bb58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2bc84:	010000f4 	movhi	r4,3
   2bc88:	2134c604 	addi	r4,r4,-11496
   2bc8c:	e17fff17 	ldw	r5,-4(fp)
   2bc90:	01800044 	movi	r6,1
   2bc94:	01c07fc4 	movi	r7,511
   2bc98:	002bb580 	call	2bb58 <alt_open_fd>
}  
   2bc9c:	e037883a 	mov	sp,fp
   2bca0:	dfc00117 	ldw	ra,4(sp)
   2bca4:	df000017 	ldw	fp,0(sp)
   2bca8:	dec00204 	addi	sp,sp,8
   2bcac:	f800283a 	ret

0002bcb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bcb0:	defffe04 	addi	sp,sp,-8
   2bcb4:	dfc00115 	stw	ra,4(sp)
   2bcb8:	df000015 	stw	fp,0(sp)
   2bcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bcc0:	008000f4 	movhi	r2,3
   2bcc4:	10b94204 	addi	r2,r2,-6904
   2bcc8:	10800017 	ldw	r2,0(r2)
   2bccc:	10000526 	beq	r2,zero,2bce4 <alt_get_errno+0x34>
   2bcd0:	008000f4 	movhi	r2,3
   2bcd4:	10b94204 	addi	r2,r2,-6904
   2bcd8:	10800017 	ldw	r2,0(r2)
   2bcdc:	103ee83a 	callr	r2
   2bce0:	00000206 	br	2bcec <alt_get_errno+0x3c>
   2bce4:	008000f4 	movhi	r2,3
   2bce8:	10bfe304 	addi	r2,r2,-116
}
   2bcec:	e037883a 	mov	sp,fp
   2bcf0:	dfc00117 	ldw	ra,4(sp)
   2bcf4:	df000017 	ldw	fp,0(sp)
   2bcf8:	dec00204 	addi	sp,sp,8
   2bcfc:	f800283a 	ret

0002bd00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2bd00:	defffb04 	addi	sp,sp,-20
   2bd04:	dfc00415 	stw	ra,16(sp)
   2bd08:	df000315 	stw	fp,12(sp)
   2bd0c:	dc000215 	stw	r16,8(sp)
   2bd10:	df000204 	addi	fp,sp,8
   2bd14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2bd18:	e0bfff17 	ldw	r2,-4(fp)
   2bd1c:	10800217 	ldw	r2,8(r2)
   2bd20:	10d00034 	orhi	r3,r2,16384
   2bd24:	e0bfff17 	ldw	r2,-4(fp)
   2bd28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bd2c:	e03ffe15 	stw	zero,-8(fp)
   2bd30:	00002206 	br	2bdbc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bd34:	040000f4 	movhi	r16,3
   2bd38:	8434c004 	addi	r16,r16,-11520
   2bd3c:	e0bffe17 	ldw	r2,-8(fp)
   2bd40:	1009883a 	mov	r4,r2
   2bd44:	01400304 	movi	r5,12
   2bd48:	00294340 	call	29434 <__mulsi3>
   2bd4c:	8085883a 	add	r2,r16,r2
   2bd50:	10c00017 	ldw	r3,0(r2)
   2bd54:	e0bfff17 	ldw	r2,-4(fp)
   2bd58:	10800017 	ldw	r2,0(r2)
   2bd5c:	1880141e 	bne	r3,r2,2bdb0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bd60:	040000f4 	movhi	r16,3
   2bd64:	8434c004 	addi	r16,r16,-11520
   2bd68:	e0bffe17 	ldw	r2,-8(fp)
   2bd6c:	1009883a 	mov	r4,r2
   2bd70:	01400304 	movi	r5,12
   2bd74:	00294340 	call	29434 <__mulsi3>
   2bd78:	8085883a 	add	r2,r16,r2
   2bd7c:	10800204 	addi	r2,r2,8
   2bd80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bd84:	10000a0e 	bge	r2,zero,2bdb0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2bd88:	e13ffe17 	ldw	r4,-8(fp)
   2bd8c:	01400304 	movi	r5,12
   2bd90:	00294340 	call	29434 <__mulsi3>
   2bd94:	00c000f4 	movhi	r3,3
   2bd98:	18f4c004 	addi	r3,r3,-11520
   2bd9c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bda0:	e0bfff17 	ldw	r2,-4(fp)
   2bda4:	18800226 	beq	r3,r2,2bdb0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2bda8:	00bffcc4 	movi	r2,-13
   2bdac:	00000a06 	br	2bdd8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bdb0:	e0bffe17 	ldw	r2,-8(fp)
   2bdb4:	10800044 	addi	r2,r2,1
   2bdb8:	e0bffe15 	stw	r2,-8(fp)
   2bdbc:	008000f4 	movhi	r2,3
   2bdc0:	10b94104 	addi	r2,r2,-6908
   2bdc4:	10800017 	ldw	r2,0(r2)
   2bdc8:	1007883a 	mov	r3,r2
   2bdcc:	e0bffe17 	ldw	r2,-8(fp)
   2bdd0:	18bfd82e 	bgeu	r3,r2,2bd34 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2bdd4:	0005883a 	mov	r2,zero
}
   2bdd8:	e037883a 	mov	sp,fp
   2bddc:	dfc00217 	ldw	ra,8(sp)
   2bde0:	df000117 	ldw	fp,4(sp)
   2bde4:	dc000017 	ldw	r16,0(sp)
   2bde8:	dec00304 	addi	sp,sp,12
   2bdec:	f800283a 	ret

0002bdf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2bdf0:	defff604 	addi	sp,sp,-40
   2bdf4:	dfc00915 	stw	ra,36(sp)
   2bdf8:	df000815 	stw	fp,32(sp)
   2bdfc:	df000804 	addi	fp,sp,32
   2be00:	e13ffd15 	stw	r4,-12(fp)
   2be04:	e17ffe15 	stw	r5,-8(fp)
   2be08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2be0c:	00bfffc4 	movi	r2,-1
   2be10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2be14:	00bffb44 	movi	r2,-19
   2be18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2be1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2be20:	e13ffd17 	ldw	r4,-12(fp)
   2be24:	014000f4 	movhi	r5,3
   2be28:	29793f04 	addi	r5,r5,-6916
   2be2c:	002c1040 	call	2c104 <alt_find_dev>
   2be30:	e0bff815 	stw	r2,-32(fp)
   2be34:	e0bff817 	ldw	r2,-32(fp)
   2be38:	1000051e 	bne	r2,zero,2be50 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2be3c:	e13ffd17 	ldw	r4,-12(fp)
   2be40:	002c1940 	call	2c194 <alt_find_file>
   2be44:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2be48:	00800044 	movi	r2,1
   2be4c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2be50:	e0bff817 	ldw	r2,-32(fp)
   2be54:	10002a26 	beq	r2,zero,2bf00 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2be58:	e13ff817 	ldw	r4,-32(fp)
   2be5c:	002c2a80 	call	2c2a8 <alt_get_fd>
   2be60:	e0bff915 	stw	r2,-28(fp)
   2be64:	e0bff917 	ldw	r2,-28(fp)
   2be68:	1000030e 	bge	r2,zero,2be78 <open+0x88>
    {
      status = index;
   2be6c:	e0bff917 	ldw	r2,-28(fp)
   2be70:	e0bffa15 	stw	r2,-24(fp)
   2be74:	00002406 	br	2bf08 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2be78:	e13ff917 	ldw	r4,-28(fp)
   2be7c:	01400304 	movi	r5,12
   2be80:	00294340 	call	29434 <__mulsi3>
   2be84:	00c000f4 	movhi	r3,3
   2be88:	18f4c004 	addi	r3,r3,-11520
   2be8c:	10c5883a 	add	r2,r2,r3
   2be90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2be94:	e0fffe17 	ldw	r3,-8(fp)
   2be98:	00900034 	movhi	r2,16384
   2be9c:	10bfffc4 	addi	r2,r2,-1
   2bea0:	1886703a 	and	r3,r3,r2
   2bea4:	e0bffc17 	ldw	r2,-16(fp)
   2bea8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2beac:	e0bffb17 	ldw	r2,-20(fp)
   2beb0:	1000051e 	bne	r2,zero,2bec8 <open+0xd8>
   2beb4:	e13ffc17 	ldw	r4,-16(fp)
   2beb8:	002bd000 	call	2bd00 <alt_file_locked>
   2bebc:	e0bffa15 	stw	r2,-24(fp)
   2bec0:	e0bffa17 	ldw	r2,-24(fp)
   2bec4:	10001016 	blt	r2,zero,2bf08 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2bec8:	e0bff817 	ldw	r2,-32(fp)
   2becc:	10800317 	ldw	r2,12(r2)
   2bed0:	10000826 	beq	r2,zero,2bef4 <open+0x104>
   2bed4:	e0bff817 	ldw	r2,-32(fp)
   2bed8:	10800317 	ldw	r2,12(r2)
   2bedc:	e13ffc17 	ldw	r4,-16(fp)
   2bee0:	e17ffd17 	ldw	r5,-12(fp)
   2bee4:	e1bffe17 	ldw	r6,-8(fp)
   2bee8:	e1ffff17 	ldw	r7,-4(fp)
   2beec:	103ee83a 	callr	r2
   2bef0:	00000106 	br	2bef8 <open+0x108>
   2bef4:	0005883a 	mov	r2,zero
   2bef8:	e0bffa15 	stw	r2,-24(fp)
   2befc:	00000206 	br	2bf08 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2bf00:	00bffb44 	movi	r2,-19
   2bf04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2bf08:	e0bffa17 	ldw	r2,-24(fp)
   2bf0c:	1000080e 	bge	r2,zero,2bf30 <open+0x140>
  {
    alt_release_fd (index);  
   2bf10:	e13ff917 	ldw	r4,-28(fp)
   2bf14:	002a1e00 	call	2a1e0 <alt_release_fd>
    ALT_ERRNO = -status;
   2bf18:	002bcb00 	call	2bcb0 <alt_get_errno>
   2bf1c:	e0fffa17 	ldw	r3,-24(fp)
   2bf20:	00c7c83a 	sub	r3,zero,r3
   2bf24:	10c00015 	stw	r3,0(r2)
    return -1;
   2bf28:	00bfffc4 	movi	r2,-1
   2bf2c:	00000106 	br	2bf34 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2bf30:	e0bff917 	ldw	r2,-28(fp)
}
   2bf34:	e037883a 	mov	sp,fp
   2bf38:	dfc00117 	ldw	ra,4(sp)
   2bf3c:	df000017 	ldw	fp,0(sp)
   2bf40:	dec00204 	addi	sp,sp,8
   2bf44:	f800283a 	ret

0002bf48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2bf48:	defffa04 	addi	sp,sp,-24
   2bf4c:	df000515 	stw	fp,20(sp)
   2bf50:	df000504 	addi	fp,sp,20
   2bf54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bf58:	0005303a 	rdctl	r2,status
   2bf5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bf60:	e0fffc17 	ldw	r3,-16(fp)
   2bf64:	00bfff84 	movi	r2,-2
   2bf68:	1884703a 	and	r2,r3,r2
   2bf6c:	1001703a 	wrctl	status,r2
  
  return context;
   2bf70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2bf74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2bf78:	e0bfff17 	ldw	r2,-4(fp)
   2bf7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2bf80:	e0bffd17 	ldw	r2,-12(fp)
   2bf84:	10800017 	ldw	r2,0(r2)
   2bf88:	e0fffd17 	ldw	r3,-12(fp)
   2bf8c:	18c00117 	ldw	r3,4(r3)
   2bf90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2bf94:	e0bffd17 	ldw	r2,-12(fp)
   2bf98:	10800117 	ldw	r2,4(r2)
   2bf9c:	e0fffd17 	ldw	r3,-12(fp)
   2bfa0:	18c00017 	ldw	r3,0(r3)
   2bfa4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2bfa8:	e0bffd17 	ldw	r2,-12(fp)
   2bfac:	e0fffd17 	ldw	r3,-12(fp)
   2bfb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2bfb4:	e0bffd17 	ldw	r2,-12(fp)
   2bfb8:	e0fffd17 	ldw	r3,-12(fp)
   2bfbc:	10c00015 	stw	r3,0(r2)
   2bfc0:	e0bffb17 	ldw	r2,-20(fp)
   2bfc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bfc8:	e0bffe17 	ldw	r2,-8(fp)
   2bfcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2bfd0:	e037883a 	mov	sp,fp
   2bfd4:	df000017 	ldw	fp,0(sp)
   2bfd8:	dec00104 	addi	sp,sp,4
   2bfdc:	f800283a 	ret

0002bfe0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2bfe0:	defffb04 	addi	sp,sp,-20
   2bfe4:	dfc00415 	stw	ra,16(sp)
   2bfe8:	df000315 	stw	fp,12(sp)
   2bfec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2bff0:	d0a00d17 	ldw	r2,-32716(gp)
   2bff4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2bff8:	d0a6b117 	ldw	r2,-25916(gp)
   2bffc:	10800044 	addi	r2,r2,1
   2c000:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c004:	00002e06 	br	2c0c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2c008:	e0bffd17 	ldw	r2,-12(fp)
   2c00c:	10800017 	ldw	r2,0(r2)
   2c010:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2c014:	e0bffd17 	ldw	r2,-12(fp)
   2c018:	10800403 	ldbu	r2,16(r2)
   2c01c:	10803fcc 	andi	r2,r2,255
   2c020:	10000426 	beq	r2,zero,2c034 <alt_tick+0x54>
   2c024:	d0a6b117 	ldw	r2,-25916(gp)
   2c028:	1000021e 	bne	r2,zero,2c034 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2c02c:	e0bffd17 	ldw	r2,-12(fp)
   2c030:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2c034:	e0bffd17 	ldw	r2,-12(fp)
   2c038:	10800217 	ldw	r2,8(r2)
   2c03c:	d0e6b117 	ldw	r3,-25916(gp)
   2c040:	18801d36 	bltu	r3,r2,2c0b8 <alt_tick+0xd8>
   2c044:	e0bffd17 	ldw	r2,-12(fp)
   2c048:	10800403 	ldbu	r2,16(r2)
   2c04c:	10803fcc 	andi	r2,r2,255
   2c050:	1000191e 	bne	r2,zero,2c0b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2c054:	e0bffd17 	ldw	r2,-12(fp)
   2c058:	10c00317 	ldw	r3,12(r2)
   2c05c:	e0bffd17 	ldw	r2,-12(fp)
   2c060:	10800517 	ldw	r2,20(r2)
   2c064:	1009883a 	mov	r4,r2
   2c068:	183ee83a 	callr	r3
   2c06c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2c070:	e0bfff17 	ldw	r2,-4(fp)
   2c074:	1000031e 	bne	r2,zero,2c084 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2c078:	e13ffd17 	ldw	r4,-12(fp)
   2c07c:	002bf480 	call	2bf48 <alt_alarm_stop>
   2c080:	00000d06 	br	2c0b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2c084:	e0bffd17 	ldw	r2,-12(fp)
   2c088:	10c00217 	ldw	r3,8(r2)
   2c08c:	e0bfff17 	ldw	r2,-4(fp)
   2c090:	1887883a 	add	r3,r3,r2
   2c094:	e0bffd17 	ldw	r2,-12(fp)
   2c098:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2c09c:	e0bffd17 	ldw	r2,-12(fp)
   2c0a0:	10c00217 	ldw	r3,8(r2)
   2c0a4:	d0a6b117 	ldw	r2,-25916(gp)
   2c0a8:	1880032e 	bgeu	r3,r2,2c0b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2c0ac:	e0bffd17 	ldw	r2,-12(fp)
   2c0b0:	00c00044 	movi	r3,1
   2c0b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2c0b8:	e0bffe17 	ldw	r2,-8(fp)
   2c0bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c0c0:	e0fffd17 	ldw	r3,-12(fp)
   2c0c4:	d0a00d04 	addi	r2,gp,-32716
   2c0c8:	18bfcf1e 	bne	r3,r2,2c008 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2c0cc:	0001883a 	nop
}
   2c0d0:	e037883a 	mov	sp,fp
   2c0d4:	dfc00117 	ldw	ra,4(sp)
   2c0d8:	df000017 	ldw	fp,0(sp)
   2c0dc:	dec00204 	addi	sp,sp,8
   2c0e0:	f800283a 	ret

0002c0e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2c0e4:	deffff04 	addi	sp,sp,-4
   2c0e8:	df000015 	stw	fp,0(sp)
   2c0ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2c0f0:	000170fa 	wrctl	ienable,zero
}
   2c0f4:	e037883a 	mov	sp,fp
   2c0f8:	df000017 	ldw	fp,0(sp)
   2c0fc:	dec00104 	addi	sp,sp,4
   2c100:	f800283a 	ret

0002c104 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2c104:	defffa04 	addi	sp,sp,-24
   2c108:	dfc00515 	stw	ra,20(sp)
   2c10c:	df000415 	stw	fp,16(sp)
   2c110:	df000404 	addi	fp,sp,16
   2c114:	e13ffe15 	stw	r4,-8(fp)
   2c118:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2c11c:	e0bfff17 	ldw	r2,-4(fp)
   2c120:	10800017 	ldw	r2,0(r2)
   2c124:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2c128:	e13ffe17 	ldw	r4,-8(fp)
   2c12c:	002049c0 	call	2049c <strlen>
   2c130:	10800044 	addi	r2,r2,1
   2c134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c138:	00000d06 	br	2c170 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2c13c:	e0bffc17 	ldw	r2,-16(fp)
   2c140:	10c00217 	ldw	r3,8(r2)
   2c144:	e0bffd17 	ldw	r2,-12(fp)
   2c148:	1809883a 	mov	r4,r3
   2c14c:	e17ffe17 	ldw	r5,-8(fp)
   2c150:	100d883a 	mov	r6,r2
   2c154:	002c3c80 	call	2c3c8 <memcmp>
   2c158:	1000021e 	bne	r2,zero,2c164 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2c15c:	e0bffc17 	ldw	r2,-16(fp)
   2c160:	00000706 	br	2c180 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2c164:	e0bffc17 	ldw	r2,-16(fp)
   2c168:	10800017 	ldw	r2,0(r2)
   2c16c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c170:	e0fffc17 	ldw	r3,-16(fp)
   2c174:	e0bfff17 	ldw	r2,-4(fp)
   2c178:	18bff01e 	bne	r3,r2,2c13c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2c17c:	0005883a 	mov	r2,zero
}
   2c180:	e037883a 	mov	sp,fp
   2c184:	dfc00117 	ldw	ra,4(sp)
   2c188:	df000017 	ldw	fp,0(sp)
   2c18c:	dec00204 	addi	sp,sp,8
   2c190:	f800283a 	ret

0002c194 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2c194:	defffb04 	addi	sp,sp,-20
   2c198:	dfc00415 	stw	ra,16(sp)
   2c19c:	df000315 	stw	fp,12(sp)
   2c1a0:	df000304 	addi	fp,sp,12
   2c1a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2c1a8:	008000f4 	movhi	r2,3
   2c1ac:	10b93d04 	addi	r2,r2,-6924
   2c1b0:	10800017 	ldw	r2,0(r2)
   2c1b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c1b8:	00003106 	br	2c280 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2c1bc:	e0bffd17 	ldw	r2,-12(fp)
   2c1c0:	10800217 	ldw	r2,8(r2)
   2c1c4:	1009883a 	mov	r4,r2
   2c1c8:	002049c0 	call	2049c <strlen>
   2c1cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2c1d0:	e0bffd17 	ldw	r2,-12(fp)
   2c1d4:	10c00217 	ldw	r3,8(r2)
   2c1d8:	e0bffe17 	ldw	r2,-8(fp)
   2c1dc:	10bfffc4 	addi	r2,r2,-1
   2c1e0:	1885883a 	add	r2,r3,r2
   2c1e4:	10800003 	ldbu	r2,0(r2)
   2c1e8:	10803fcc 	andi	r2,r2,255
   2c1ec:	1080201c 	xori	r2,r2,128
   2c1f0:	10bfe004 	addi	r2,r2,-128
   2c1f4:	10800bd8 	cmpnei	r2,r2,47
   2c1f8:	1000031e 	bne	r2,zero,2c208 <alt_find_file+0x74>
    {
      len -= 1;
   2c1fc:	e0bffe17 	ldw	r2,-8(fp)
   2c200:	10bfffc4 	addi	r2,r2,-1
   2c204:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c208:	e0bffe17 	ldw	r2,-8(fp)
   2c20c:	e0ffff17 	ldw	r3,-4(fp)
   2c210:	1885883a 	add	r2,r3,r2
   2c214:	10800003 	ldbu	r2,0(r2)
   2c218:	10803fcc 	andi	r2,r2,255
   2c21c:	1080201c 	xori	r2,r2,128
   2c220:	10bfe004 	addi	r2,r2,-128
   2c224:	10800be0 	cmpeqi	r2,r2,47
   2c228:	1000081e 	bne	r2,zero,2c24c <alt_find_file+0xb8>
   2c22c:	e0bffe17 	ldw	r2,-8(fp)
   2c230:	e0ffff17 	ldw	r3,-4(fp)
   2c234:	1885883a 	add	r2,r3,r2
   2c238:	10800003 	ldbu	r2,0(r2)
   2c23c:	10803fcc 	andi	r2,r2,255
   2c240:	1080201c 	xori	r2,r2,128
   2c244:	10bfe004 	addi	r2,r2,-128
   2c248:	10000a1e 	bne	r2,zero,2c274 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2c24c:	e0bffd17 	ldw	r2,-12(fp)
   2c250:	10c00217 	ldw	r3,8(r2)
   2c254:	e0bffe17 	ldw	r2,-8(fp)
   2c258:	1809883a 	mov	r4,r3
   2c25c:	e17fff17 	ldw	r5,-4(fp)
   2c260:	100d883a 	mov	r6,r2
   2c264:	002c3c80 	call	2c3c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c268:	1000021e 	bne	r2,zero,2c274 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2c26c:	e0bffd17 	ldw	r2,-12(fp)
   2c270:	00000806 	br	2c294 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2c274:	e0bffd17 	ldw	r2,-12(fp)
   2c278:	10800017 	ldw	r2,0(r2)
   2c27c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c280:	e0fffd17 	ldw	r3,-12(fp)
   2c284:	008000f4 	movhi	r2,3
   2c288:	10b93d04 	addi	r2,r2,-6924
   2c28c:	18bfcb1e 	bne	r3,r2,2c1bc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2c290:	0005883a 	mov	r2,zero
}
   2c294:	e037883a 	mov	sp,fp
   2c298:	dfc00117 	ldw	ra,4(sp)
   2c29c:	df000017 	ldw	fp,0(sp)
   2c2a0:	dec00204 	addi	sp,sp,8
   2c2a4:	f800283a 	ret

0002c2a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2c2a8:	defffa04 	addi	sp,sp,-24
   2c2ac:	dfc00515 	stw	ra,20(sp)
   2c2b0:	df000415 	stw	fp,16(sp)
   2c2b4:	dc000315 	stw	r16,12(sp)
   2c2b8:	df000304 	addi	fp,sp,12
   2c2bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2c2c0:	00bffa04 	movi	r2,-24
   2c2c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c2c8:	e03ffd15 	stw	zero,-12(fp)
   2c2cc:	00002106 	br	2c354 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2c2d0:	040000f4 	movhi	r16,3
   2c2d4:	8434c004 	addi	r16,r16,-11520
   2c2d8:	e0bffd17 	ldw	r2,-12(fp)
   2c2dc:	1009883a 	mov	r4,r2
   2c2e0:	01400304 	movi	r5,12
   2c2e4:	00294340 	call	29434 <__mulsi3>
   2c2e8:	8085883a 	add	r2,r16,r2
   2c2ec:	10800017 	ldw	r2,0(r2)
   2c2f0:	1000151e 	bne	r2,zero,2c348 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2c2f4:	040000f4 	movhi	r16,3
   2c2f8:	8434c004 	addi	r16,r16,-11520
   2c2fc:	e0bffd17 	ldw	r2,-12(fp)
   2c300:	1009883a 	mov	r4,r2
   2c304:	01400304 	movi	r5,12
   2c308:	00294340 	call	29434 <__mulsi3>
   2c30c:	8085883a 	add	r2,r16,r2
   2c310:	e0ffff17 	ldw	r3,-4(fp)
   2c314:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2c318:	008000f4 	movhi	r2,3
   2c31c:	10b94104 	addi	r2,r2,-6908
   2c320:	10c00017 	ldw	r3,0(r2)
   2c324:	e0bffd17 	ldw	r2,-12(fp)
   2c328:	1880040e 	bge	r3,r2,2c33c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2c32c:	008000f4 	movhi	r2,3
   2c330:	10b94104 	addi	r2,r2,-6908
   2c334:	e0fffd17 	ldw	r3,-12(fp)
   2c338:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2c33c:	e0bffd17 	ldw	r2,-12(fp)
   2c340:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2c344:	00000606 	br	2c360 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c348:	e0bffd17 	ldw	r2,-12(fp)
   2c34c:	10800044 	addi	r2,r2,1
   2c350:	e0bffd15 	stw	r2,-12(fp)
   2c354:	e0bffd17 	ldw	r2,-12(fp)
   2c358:	10800810 	cmplti	r2,r2,32
   2c35c:	103fdc1e 	bne	r2,zero,2c2d0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2c360:	e0bffe17 	ldw	r2,-8(fp)
}
   2c364:	e037883a 	mov	sp,fp
   2c368:	dfc00217 	ldw	ra,8(sp)
   2c36c:	df000117 	ldw	fp,4(sp)
   2c370:	dc000017 	ldw	r16,0(sp)
   2c374:	dec00304 	addi	sp,sp,12
   2c378:	f800283a 	ret

0002c37c <atexit>:
   2c37c:	200b883a 	mov	r5,r4
   2c380:	000d883a 	mov	r6,zero
   2c384:	0009883a 	mov	r4,zero
   2c388:	000f883a 	mov	r7,zero
   2c38c:	002c4441 	jmpi	2c444 <__register_exitproc>

0002c390 <exit>:
   2c390:	defffe04 	addi	sp,sp,-8
   2c394:	000b883a 	mov	r5,zero
   2c398:	dc000015 	stw	r16,0(sp)
   2c39c:	dfc00115 	stw	ra,4(sp)
   2c3a0:	2021883a 	mov	r16,r4
   2c3a4:	002c5740 	call	2c574 <__call_exitprocs>
   2c3a8:	008000f4 	movhi	r2,3
   2c3ac:	10b93804 	addi	r2,r2,-6944
   2c3b0:	11000017 	ldw	r4,0(r2)
   2c3b4:	20800f17 	ldw	r2,60(r4)
   2c3b8:	10000126 	beq	r2,zero,2c3c0 <exit+0x30>
   2c3bc:	103ee83a 	callr	r2
   2c3c0:	8009883a 	mov	r4,r16
   2c3c4:	002c7140 	call	2c714 <_exit>

0002c3c8 <memcmp>:
   2c3c8:	01c000c4 	movi	r7,3
   2c3cc:	3980192e 	bgeu	r7,r6,2c434 <memcmp+0x6c>
   2c3d0:	2904b03a 	or	r2,r5,r4
   2c3d4:	11c4703a 	and	r2,r2,r7
   2c3d8:	10000f26 	beq	r2,zero,2c418 <memcmp+0x50>
   2c3dc:	20c00003 	ldbu	r3,0(r4)
   2c3e0:	28800003 	ldbu	r2,0(r5)
   2c3e4:	1880151e 	bne	r3,r2,2c43c <memcmp+0x74>
   2c3e8:	31bfff84 	addi	r6,r6,-2
   2c3ec:	01ffffc4 	movi	r7,-1
   2c3f0:	00000406 	br	2c404 <memcmp+0x3c>
   2c3f4:	20c00003 	ldbu	r3,0(r4)
   2c3f8:	28800003 	ldbu	r2,0(r5)
   2c3fc:	31bfffc4 	addi	r6,r6,-1
   2c400:	18800e1e 	bne	r3,r2,2c43c <memcmp+0x74>
   2c404:	21000044 	addi	r4,r4,1
   2c408:	29400044 	addi	r5,r5,1
   2c40c:	31fff91e 	bne	r6,r7,2c3f4 <memcmp+0x2c>
   2c410:	0005883a 	mov	r2,zero
   2c414:	f800283a 	ret
   2c418:	20c00017 	ldw	r3,0(r4)
   2c41c:	28800017 	ldw	r2,0(r5)
   2c420:	1880041e 	bne	r3,r2,2c434 <memcmp+0x6c>
   2c424:	31bfff04 	addi	r6,r6,-4
   2c428:	21000104 	addi	r4,r4,4
   2c42c:	29400104 	addi	r5,r5,4
   2c430:	39bff936 	bltu	r7,r6,2c418 <memcmp+0x50>
   2c434:	303fe91e 	bne	r6,zero,2c3dc <memcmp+0x14>
   2c438:	003ff506 	br	2c410 <memcmp+0x48>
   2c43c:	1885c83a 	sub	r2,r3,r2
   2c440:	f800283a 	ret

0002c444 <__register_exitproc>:
   2c444:	defffa04 	addi	sp,sp,-24
   2c448:	008000f4 	movhi	r2,3
   2c44c:	10b93804 	addi	r2,r2,-6944
   2c450:	dc000315 	stw	r16,12(sp)
   2c454:	14000017 	ldw	r16,0(r2)
   2c458:	dc400415 	stw	r17,16(sp)
   2c45c:	dfc00515 	stw	ra,20(sp)
   2c460:	80805217 	ldw	r2,328(r16)
   2c464:	2023883a 	mov	r17,r4
   2c468:	10003e26 	beq	r2,zero,2c564 <__register_exitproc+0x120>
   2c46c:	10c00117 	ldw	r3,4(r2)
   2c470:	020007c4 	movi	r8,31
   2c474:	40c0180e 	bge	r8,r3,2c4d8 <__register_exitproc+0x94>
   2c478:	00800034 	movhi	r2,0
   2c47c:	10800004 	addi	r2,r2,0
   2c480:	1000061e 	bne	r2,zero,2c49c <__register_exitproc+0x58>
   2c484:	00bfffc4 	movi	r2,-1
   2c488:	dfc00517 	ldw	ra,20(sp)
   2c48c:	dc400417 	ldw	r17,16(sp)
   2c490:	dc000317 	ldw	r16,12(sp)
   2c494:	dec00604 	addi	sp,sp,24
   2c498:	f800283a 	ret
   2c49c:	01006404 	movi	r4,400
   2c4a0:	d9400015 	stw	r5,0(sp)
   2c4a4:	d9800115 	stw	r6,4(sp)
   2c4a8:	d9c00215 	stw	r7,8(sp)
   2c4ac:	00000000 	call	0 <__alt_mem_onchip_mem_c1-0x20000>
   2c4b0:	d9400017 	ldw	r5,0(sp)
   2c4b4:	d9800117 	ldw	r6,4(sp)
   2c4b8:	d9c00217 	ldw	r7,8(sp)
   2c4bc:	103ff126 	beq	r2,zero,2c484 <__register_exitproc+0x40>
   2c4c0:	80c05217 	ldw	r3,328(r16)
   2c4c4:	10000115 	stw	zero,4(r2)
   2c4c8:	10c00015 	stw	r3,0(r2)
   2c4cc:	80805215 	stw	r2,328(r16)
   2c4d0:	10006215 	stw	zero,392(r2)
   2c4d4:	10006315 	stw	zero,396(r2)
   2c4d8:	10c00117 	ldw	r3,4(r2)
   2c4dc:	88000d1e 	bne	r17,zero,2c514 <__register_exitproc+0xd0>
   2c4e0:	19000084 	addi	r4,r3,2
   2c4e4:	2109883a 	add	r4,r4,r4
   2c4e8:	18c00044 	addi	r3,r3,1
   2c4ec:	2109883a 	add	r4,r4,r4
   2c4f0:	1109883a 	add	r4,r2,r4
   2c4f4:	10c00115 	stw	r3,4(r2)
   2c4f8:	0005883a 	mov	r2,zero
   2c4fc:	21400015 	stw	r5,0(r4)
   2c500:	dfc00517 	ldw	ra,20(sp)
   2c504:	dc400417 	ldw	r17,16(sp)
   2c508:	dc000317 	ldw	r16,12(sp)
   2c50c:	dec00604 	addi	sp,sp,24
   2c510:	f800283a 	ret
   2c514:	02400044 	movi	r9,1
   2c518:	12806217 	ldw	r10,392(r2)
   2c51c:	48d2983a 	sll	r9,r9,r3
   2c520:	19000804 	addi	r4,r3,32
   2c524:	18d1883a 	add	r8,r3,r3
   2c528:	2109883a 	add	r4,r4,r4
   2c52c:	4211883a 	add	r8,r8,r8
   2c530:	2109883a 	add	r4,r4,r4
   2c534:	1109883a 	add	r4,r2,r4
   2c538:	1211883a 	add	r8,r2,r8
   2c53c:	5254b03a 	or	r10,r10,r9
   2c540:	21c02215 	stw	r7,136(r4)
   2c544:	41802215 	stw	r6,136(r8)
   2c548:	12806215 	stw	r10,392(r2)
   2c54c:	01000084 	movi	r4,2
   2c550:	893fe31e 	bne	r17,r4,2c4e0 <__register_exitproc+0x9c>
   2c554:	11006317 	ldw	r4,396(r2)
   2c558:	2252b03a 	or	r9,r4,r9
   2c55c:	12406315 	stw	r9,396(r2)
   2c560:	003fdf06 	br	2c4e0 <__register_exitproc+0x9c>
   2c564:	008000f4 	movhi	r2,3
   2c568:	10803404 	addi	r2,r2,208
   2c56c:	80805215 	stw	r2,328(r16)
   2c570:	003fbe06 	br	2c46c <__register_exitproc+0x28>

0002c574 <__call_exitprocs>:
   2c574:	008000f4 	movhi	r2,3
   2c578:	10b93804 	addi	r2,r2,-6944
   2c57c:	10800017 	ldw	r2,0(r2)
   2c580:	defff304 	addi	sp,sp,-52
   2c584:	df000b15 	stw	fp,44(sp)
   2c588:	d8800015 	stw	r2,0(sp)
   2c58c:	10805204 	addi	r2,r2,328
   2c590:	dd400815 	stw	r21,32(sp)
   2c594:	dfc00c15 	stw	ra,48(sp)
   2c598:	ddc00a15 	stw	r23,40(sp)
   2c59c:	dd800915 	stw	r22,36(sp)
   2c5a0:	dd000715 	stw	r20,28(sp)
   2c5a4:	dcc00615 	stw	r19,24(sp)
   2c5a8:	dc800515 	stw	r18,20(sp)
   2c5ac:	dc400415 	stw	r17,16(sp)
   2c5b0:	dc000315 	stw	r16,12(sp)
   2c5b4:	d9000115 	stw	r4,4(sp)
   2c5b8:	2839883a 	mov	fp,r5
   2c5bc:	d8800215 	stw	r2,8(sp)
   2c5c0:	057fffc4 	movi	r21,-1
   2c5c4:	d8800017 	ldw	r2,0(sp)
   2c5c8:	ddc00217 	ldw	r23,8(sp)
   2c5cc:	14805217 	ldw	r18,328(r2)
   2c5d0:	90001726 	beq	r18,zero,2c630 <__call_exitprocs+0xbc>
   2c5d4:	94400117 	ldw	r17,4(r18)
   2c5d8:	8c3fffc4 	addi	r16,r17,-1
   2c5dc:	80001116 	blt	r16,zero,2c624 <__call_exitprocs+0xb0>
   2c5e0:	8c400044 	addi	r17,r17,1
   2c5e4:	8427883a 	add	r19,r16,r16
   2c5e8:	8c63883a 	add	r17,r17,r17
   2c5ec:	95802204 	addi	r22,r18,136
   2c5f0:	9ce7883a 	add	r19,r19,r19
   2c5f4:	8c63883a 	add	r17,r17,r17
   2c5f8:	b4e7883a 	add	r19,r22,r19
   2c5fc:	9463883a 	add	r17,r18,r17
   2c600:	e0001726 	beq	fp,zero,2c660 <__call_exitprocs+0xec>
   2c604:	8c87c83a 	sub	r3,r17,r18
   2c608:	b0c7883a 	add	r3,r22,r3
   2c60c:	18c01e17 	ldw	r3,120(r3)
   2c610:	1f001326 	beq	r3,fp,2c660 <__call_exitprocs+0xec>
   2c614:	843fffc4 	addi	r16,r16,-1
   2c618:	9cffff04 	addi	r19,r19,-4
   2c61c:	8c7fff04 	addi	r17,r17,-4
   2c620:	857ff71e 	bne	r16,r21,2c600 <__call_exitprocs+0x8c>
   2c624:	00800034 	movhi	r2,0
   2c628:	10800004 	addi	r2,r2,0
   2c62c:	10002a1e 	bne	r2,zero,2c6d8 <__call_exitprocs+0x164>
   2c630:	dfc00c17 	ldw	ra,48(sp)
   2c634:	df000b17 	ldw	fp,44(sp)
   2c638:	ddc00a17 	ldw	r23,40(sp)
   2c63c:	dd800917 	ldw	r22,36(sp)
   2c640:	dd400817 	ldw	r21,32(sp)
   2c644:	dd000717 	ldw	r20,28(sp)
   2c648:	dcc00617 	ldw	r19,24(sp)
   2c64c:	dc800517 	ldw	r18,20(sp)
   2c650:	dc400417 	ldw	r17,16(sp)
   2c654:	dc000317 	ldw	r16,12(sp)
   2c658:	dec00d04 	addi	sp,sp,52
   2c65c:	f800283a 	ret
   2c660:	91000117 	ldw	r4,4(r18)
   2c664:	88c00017 	ldw	r3,0(r17)
   2c668:	213fffc4 	addi	r4,r4,-1
   2c66c:	24001526 	beq	r4,r16,2c6c4 <__call_exitprocs+0x150>
   2c670:	88000015 	stw	zero,0(r17)
   2c674:	183fe726 	beq	r3,zero,2c614 <__call_exitprocs+0xa0>
   2c678:	00800044 	movi	r2,1
   2c67c:	1408983a 	sll	r4,r2,r16
   2c680:	91406217 	ldw	r5,392(r18)
   2c684:	95000117 	ldw	r20,4(r18)
   2c688:	214a703a 	and	r5,r4,r5
   2c68c:	28000b26 	beq	r5,zero,2c6bc <__call_exitprocs+0x148>
   2c690:	91406317 	ldw	r5,396(r18)
   2c694:	2148703a 	and	r4,r4,r5
   2c698:	20000c1e 	bne	r4,zero,2c6cc <__call_exitprocs+0x158>
   2c69c:	99400017 	ldw	r5,0(r19)
   2c6a0:	d9000117 	ldw	r4,4(sp)
   2c6a4:	183ee83a 	callr	r3
   2c6a8:	90c00117 	ldw	r3,4(r18)
   2c6ac:	1d3fc51e 	bne	r3,r20,2c5c4 <__call_exitprocs+0x50>
   2c6b0:	b8c00017 	ldw	r3,0(r23)
   2c6b4:	1cbfd726 	beq	r3,r18,2c614 <__call_exitprocs+0xa0>
   2c6b8:	003fc206 	br	2c5c4 <__call_exitprocs+0x50>
   2c6bc:	183ee83a 	callr	r3
   2c6c0:	003ff906 	br	2c6a8 <__call_exitprocs+0x134>
   2c6c4:	94000115 	stw	r16,4(r18)
   2c6c8:	003fea06 	br	2c674 <__call_exitprocs+0x100>
   2c6cc:	99000017 	ldw	r4,0(r19)
   2c6d0:	183ee83a 	callr	r3
   2c6d4:	003ff406 	br	2c6a8 <__call_exitprocs+0x134>
   2c6d8:	90c00117 	ldw	r3,4(r18)
   2c6dc:	1800071e 	bne	r3,zero,2c6fc <__call_exitprocs+0x188>
   2c6e0:	90c00017 	ldw	r3,0(r18)
   2c6e4:	18000926 	beq	r3,zero,2c70c <__call_exitprocs+0x198>
   2c6e8:	9009883a 	mov	r4,r18
   2c6ec:	b8c00015 	stw	r3,0(r23)
   2c6f0:	00000000 	call	0 <__alt_mem_onchip_mem_c1-0x20000>
   2c6f4:	bc800017 	ldw	r18,0(r23)
   2c6f8:	003fb506 	br	2c5d0 <__call_exitprocs+0x5c>
   2c6fc:	90c00017 	ldw	r3,0(r18)
   2c700:	902f883a 	mov	r23,r18
   2c704:	1825883a 	mov	r18,r3
   2c708:	003fb106 	br	2c5d0 <__call_exitprocs+0x5c>
   2c70c:	0007883a 	mov	r3,zero
   2c710:	003ffb06 	br	2c700 <__call_exitprocs+0x18c>

0002c714 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2c714:	defffc04 	addi	sp,sp,-16
   2c718:	df000315 	stw	fp,12(sp)
   2c71c:	df000304 	addi	fp,sp,12
   2c720:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2c724:	0001883a 	nop
   2c728:	e0bfff17 	ldw	r2,-4(fp)
   2c72c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2c730:	e0bffd17 	ldw	r2,-12(fp)
   2c734:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2c738:	e0bffe17 	ldw	r2,-8(fp)
   2c73c:	10000226 	beq	r2,zero,2c748 <_exit+0x34>
    ALT_SIM_FAIL();
   2c740:	002af070 	cmpltui	zero,zero,43969
   2c744:	00000106 	br	2c74c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2c748:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2c74c:	003fff06 	br	2c74c <_exit+0x38>


producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000ca98 memsz 0x0000ca98 flags r-x
    LOAD off    0x0000dab8 vaddr 0x0002cab8 paddr 0x0002e510 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000ff68 vaddr 0x0002ff68 paddr 0x0002ff68 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c59c  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000364  0002c754  0002c754  0000d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0002cab8  0002e510  0000dab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0002ff68  0002ff68  0000ff68  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f510  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000f538  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022cc6  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f5e  00000000  00000000  00032f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a157  00000000  00000000  0003bedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a48  00000000  00000000  00046034  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002fe1  00000000  00000000  00047a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010fd6  00000000  00000000  0004aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005ba34  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005ba48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005f76c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005f76f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005f773  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005f774  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005f775  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005f779  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005f77d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005f781  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005f78c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005f797  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  0005f7a2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000021  00000000  00000000  0005f7ac  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006ae73  00000000  00000000  0005f7cd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0002c754 l    d  .rodata	00000000 .rodata
0002cab8 l    d  .rwdata	00000000 .rwdata
0002ff68 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../producer_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002052c l     F .text	00000034 __sprint_r
0002c7d6 l     O .rodata	00000010 blanks.3515
0002c7e6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022574 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00023fe4 l     F .text	00000008 __fp_lock
00023fec l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002cab8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0002c81c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002c964 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000285c8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00029308 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00029a9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00029bb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00029be4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00029ce4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00029dd8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00029ec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002a0a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002e500 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002a314 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002a454 l     F .text	00000038 alt_dev_reg
0002d474 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002ac38 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002ae3c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002b478 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002b6d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002bb5c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002bcb4 l     F .text	00000050 alt_get_errno
0002bd04 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00026aa4 g     F .text	00000074 _mprec_log10
00026b94 g     F .text	00000084 __any_on
00027814 g     F .text	00000064 _isatty_r
0002c84c g     O .rodata	00000028 __mprec_tinytens
00029fe8 g     F .text	00000078 alt_main
00029a58 g     F .text	00000044 __ashldi3
00020408 g     F .text	00000084 _puts_r
0002ffc4 g     O .bss	00000100 alt_irq
00027878 g     F .text	0000006c _lseek_r
0002a7a4 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0002e510 g       *ABS*	00000000 __flash_rwdata_start
00028e68 g     F .text	0000005c __eqdf2
00030254 g       *ABS*	00000000 __alt_heap_start
000203cc g     F .text	0000003c printf
000273b8 g     F .text	0000005c __sseek
00024088 g     F .text	0000010c __sinit
00024d20 g     F .text	0000009c _setlocale_r
00024000 g     F .text	00000078 __sfmoreglue
0002a080 g     F .text	00000020 __malloc_unlock
00025960 g     F .text	0000018c memmove
0002a524 g     F .text	00000098 altera_avalon_fifo_init
00024078 g     F .text	00000010 _cleanup
0002a854 g     F .text	00000058 altera_avalon_fifo_write_fifo
00025bc8 g     F .text	000000a8 _Balloc
00028f20 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
0002a9ec g     F .text	00000028 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
000277ac g     F .text	00000068 _fstat_r
0002ff80 g     O .bss	00000004 errno
0002ff88 g     O .bss	00000004 alt_argv
000364d4 g       *ABS*	00000000 _gp
0002a6f0 g     F .text	0000005c altera_avalon_fifo_clear_event
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem_c0
0002d2f4 g     O .rwdata	00000180 alt_fd_list
0002c108 g     F .text	00000090 alt_find_dev
00025820 g     F .text	00000140 memcpy
00023ff4 g     F .text	0000000c _cleanup_r
00029044 g     F .text	000000d4 __floatsidf
0002bc3c g     F .text	00000078 alt_io_redirect
00028fe8 g     F .text	0000005c __ltdf2
0002c754 g       *ABS*	00000000 __DTOR_END__
0002048c g     F .text	00000014 puts
00026a00 g     F .text	000000a4 __ratio
0002b03c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000203a0 g     F .text	0000002c _printf_r
00029428 g     F .text	00000008 __udivsi3
00029d34 g     F .text	000000a4 isatty
0002c89c g     O .rodata	000000c8 __mprec_tens
00024dbc g     F .text	0000000c __locale_charset
0002ff7c g     O .bss	00000004 __malloc_top_pad
0002e4dc g     O .rwdata	00000004 __mb_cur_max
00024dc8 g     F .text	0000000c _localeconv_r
00025ff8 g     F .text	0000003c __i2b
000246dc g     F .text	000004e4 __sfvwrite_r
00027278 g     F .text	00000064 _sbrk_r
000278e4 g     F .text	0000006c _read_r
0002ceb8 g     O .rwdata	0000000c __lc_ctype
0002e4f8 g     O .rwdata	00000004 alt_max_fd
00029840 g     F .text	00000104 __unpack_d
0002765c g     F .text	0000013c _fclose_r
00023fb4 g     F .text	00000030 fflush
0002ff78 g     O .bss	00000004 __malloc_max_sbrked_mem
0002891c g     F .text	00000054 __adddf3
00026774 g     F .text	00000148 __b2d
00027fa0 g     F .text	00000628 __umoddi3
00029f14 g     F .text	000000d4 lseek
0002e4d4 g     O .rwdata	00000004 _global_impure_ptr
00026c18 g     F .text	000005fc _realloc_r
00030254 g       *ABS*	00000000 __bss_end
0002ba6c g     F .text	000000f0 alt_iic_isr_register
0002bfe4 g     F .text	00000104 alt_tick
00027950 g     F .text	00000650 __udivdi3
0002c874 g     O .rodata	00000028 __mprec_bigtens
00025ddc g     F .text	00000104 __s2b
000291ec g     F .text	0000011c __floatunsidf
00026514 g     F .text	00000058 __mcmp
000242a0 g     F .text	00000018 __fp_lock_all
0002ba20 g     F .text	0000004c alt_ic_irq_enabled
000202c8 g     F .text	00000098 producer
0002bf4c g     F .text	00000098 alt_alarm_stop
0002ff90 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
0002d2cc g     O .rwdata	00000028 alt_dev_null
0002b6b4 g     F .text	0000001c alt_dcache_flush_all
00025ee0 g     F .text	00000068 __hi0bits
00029118 g     F .text	000000d4 __fixdfsi
0002a74c g     F .text	00000058 altera_avalon_fifo_write_ienable
0002e510 g       *ABS*	00000000 __ram_rwdata_end
0002a660 g     F .text	0000002c altera_avalon_fifo_read_almostempty
0002e4f0 g     O .rwdata	00000008 alt_dev_list
0002a364 g     F .text	000000f0 write
0002cab8 g       *ABS*	00000000 __ram_rodata_end
00029c34 g     F .text	000000b0 fstat
00029a14 g     F .text	00000044 __lshrdi3
0002628c g     F .text	0000012c __pow5mult
0002ff70 g     O .bss	00000004 __nlocale_changed
00029430 g     F .text	00000008 __umodsi3
00030254 g       *ABS*	00000000 end
0002ab78 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002a68c g     F .text	0000003c altera_avalon_fifo_read_event
0002c754 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002b4ec g     F .text	00000088 alt_avalon_timer_sc_init
00029570 g     F .text	000000ac __clzsi2
0002b254 g     F .text	00000224 altera_avalon_jtag_uart_write
00024290 g     F .text	00000004 __sfp_lock_acquire
0002a918 g     F .text	0000004c altera_avalon_fifo_read_fifo
00025728 g     F .text	000000f8 memchr
00020560 g     F .text	00001e7c ___vfprintf_internal_r
0002440c g     F .text	000002d0 _free_r
0002c578 g     F .text	000001a0 __call_exitprocs
0002ff6c g     O .bss	00000004 __mlocale_changed
0002e4e0 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
0002ff94 g     O .bss	00000004 _alt_tick_rate
000263b8 g     F .text	0000015c __lshift
0002ff98 g     O .bss	00000004 _alt_nticks
0002a0f0 g     F .text	000000f4 read
0002a4c0 g     F .text	00000064 alt_sys_init
0002c448 g     F .text	00000130 __register_exitproc
00026034 g     F .text	00000258 __multiply
0002aee0 g     F .text	00000068 altera_avalon_jtag_uart_close
00029438 g     F .text	00000028 __mulsi3
0002cab8 g       *ABS*	00000000 __ram_rwdata_start
0002c754 g       *ABS*	00000000 __ram_rodata_start
0002ff9c g     O .bss	00000028 __malloc_current_mallinfo
000268bc g     F .text	00000144 __d2b
0002aa14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002c2ac g     F .text	000000d4 alt_get_fd
00029944 g     F .text	000000d0 __fpcmp_parts_d
000275f8 g     F .text	00000064 _close_r
0002c3cc g     F .text	0000007c memcmp
0002aad4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00030254 g       *ABS*	00000000 __alt_stack_base
0002ab24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022400 g     F .text	00000174 __swsetup_r
0002a5bc g     F .text	0000003c altera_avalon_fifo_read_status
00028cb4 g     F .text	000001b4 __divdf3
00024194 g     F .text	000000fc __sfp
00026b18 g     F .text	0000007c __copybits
0002cec4 g     O .rwdata	00000408 __malloc_av_
0002429c g     F .text	00000004 __sinit_lock_release
000289d0 g     F .text	000002e4 __muldf3
000272dc g     F .text	00000054 __sread
0002a9c0 g     F .text	0000002c altera_avalon_fifo_read_other_info
0002c198 g     F .text	00000114 alt_find_file
0002b720 g     F .text	000000a0 alt_dev_llist_insert
0002a060 g     F .text	00000020 __malloc_lock
0002a264 g     F .text	000000b0 sbrk
00023dcc g     F .text	000001e8 _fflush_r
0002752c g     F .text	000000cc _calloc_r
0002ff68 g       *ABS*	00000000 __bss_start
00025aec g     F .text	000000dc memset
000202b0 g     F .text	00000018 main
0002ff8c g     O .bss	00000004 alt_envp
0002ff74 g     O .bss	00000004 __malloc_max_total_mem
0002aa74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a6c8 g     F .text	00000028 altera_avalon_fifo_read_level
00027414 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00027798 g     F .text	00000014 fclose
000300c4 g     O .bss	00000190 _atexit0
000227b0 g     F .text	0000161c _dtoa_r
00024fa4 g     F .text	00000784 _malloc_r
0002e4fc g     O .rwdata	00000004 alt_errno
00024bc0 g     F .text	000000a8 _fwalk
000201f4 g     F .text	00000060 WRITE_FIFO_1
0002937c g     F .text	00000050 __divsi3
0002c970 g     O .rodata	00000014 __thenan_df
000242d0 g     F .text	0000013c _malloc_trim_r
0002c754 g       *ABS*	00000000 __CTOR_END__
0002741c g     F .text	000000a4 strcmp
0002c754 g       *ABS*	00000000 __flash_rodata_start
0002c754 g       *ABS*	00000000 __DTOR_LIST__
00020360 g     F .text	00000040 delay
00028ec4 g     F .text	0000005c __nedf2
0002a48c g     F .text	00000034 alt_irq_init
0002a1e4 g     F .text	00000080 alt_release_fd
0002c984 g     O .rodata	00000100 __clz_tab
0002ff68 g     O .bss	00000004 _PathLocale
0002c380 g     F .text	00000014 atexit
000274c0 g     F .text	0000006c _write_r
00024dd4 g     F .text	0000001c setlocale
0002e4d8 g     O .rwdata	00000004 _impure_ptr
0002ff84 g     O .bss	00000004 alt_argc
0002b81c g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00026714 g     F .text	00000060 __ulp
00027214 g     F .text	00000038 __isinfd
000242b8 g     F .text	00000018 __fp_unlock_all
0002e4e8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024df0 g     F .text	0000000c localeconv
0002a964 g     F .text	0000005c altera_avalon_fifo_write_other_info
0002b894 g     F .text	00000050 alt_ic_isr_register
0002e510 g       *ABS*	00000000 _edata
00030254 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002af48 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002b980 g     F .text	000000a0 alt_ic_irq_disable
00027330 g     F .text	00000088 __swrite
0002e4e4 g     O .rwdata	00000004 __malloc_trim_threshold
0002c0e8 g     F .text	00000020 altera_nios2_qsys_irq_init
0002c394 g     F .text	00000038 exit
00024c68 g     F .text	000000b8 _fwalk_reent
0002656c g     F .text	000001a8 __mdiff
000293cc g     F .text	0000005c __modsi3
0002a5f8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024294 g     F .text	00000004 __sfp_lock_release
0002c718 g     F .text	0000003c _exit
0002724c g     F .text	0000002c __isnand
0002b574 g     F .text	00000140 alt_alarm_start
00029460 g     F .text	00000110 __muldi3
0002a634 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00024dfc g     F .text	000001a8 __smakebuf_r
000204a0 g     F .text	0000008c strlen
0002bdf4 g     F .text	00000158 open
0002a8ac g     F .text	0000006c altera_avalon_read_fifo
00028f84 g     F .text	00000064 __gedf2
00020254 g     F .text	0000005c READ_FIFO_1
0002b878 g     F .text	0000001c alt_icache_flush_all
0002e504 g     O .rwdata	00000004 alt_priority_mask
0002b8e4 g     F .text	0000009c alt_ic_irq_enable
000223dc g     F .text	00000024 __vfprintf_internal
00028970 g     F .text	00000060 __subdf3
00025f48 g     F .text	000000b0 __lo0bits
0002a7fc g     F .text	00000058 altera_avalon_fifo_write_almostempty
0002e508 g     O .rwdata	00000008 alt_alarm_list
0002b7c0 g     F .text	0000005c _do_ctors
00029aec g     F .text	000000cc close
00029e44 g     F .text	00000080 alt_load
0002961c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00024298 g     F .text	00000004 __sinit_lock_acquire
00025c98 g     F .text	00000144 __multadd
00025c70 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18fff104 	addi	r3,r3,-60
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	213ff104 	addi	r4,r4,-60
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   201c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c4:	d6993514 	ori	gp,gp,25812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201cc:	10bfda14 	ori	r2,r2,65384

    movhi r3, %hi(__bss_end)
   201d0:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201d4:	18c09514 	ori	r3,r3,596

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	0029e440 	call	29e44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	0029fe80 	call	29fe8 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO_1>:
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   201f4:	defffd04 	addi	sp,sp,-12
   201f8:	dfc00215 	stw	ra,8(sp)
   201fc:	df000115 	stw	fp,4(sp)
   20200:	df000104 	addi	fp,sp,4
   20204:	e13fff15 	stw	r4,-4(fp)

	// Wait if the fifo is full
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<0) != 0)
   20208:	0001883a 	nop
   2020c:	01000134 	movhi	r4,4
   20210:	21040004 	addi	r4,r4,4096
   20214:	01400044 	movi	r5,1
   20218:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2021c:	103ffb1e 	bne	r2,zero,2020c <WRITE_FIFO_1+0x18>
	{}

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(MEM_BASE,CTRL_BASE,(int)*buffer);
   20220:	e0bfff17 	ldw	r2,-4(fp)
   20224:	10800017 	ldw	r2,0(r2)
   20228:	01000134 	movhi	r4,4
   2022c:	21041404 	addi	r4,r4,4176
   20230:	01400134 	movhi	r5,4
   20234:	29440004 	addi	r5,r5,4096
   20238:	100d883a 	mov	r6,r2
   2023c:	002a8540 	call	2a854 <altera_avalon_fifo_write_fifo>
}
   20240:	e037883a 	mov	sp,fp
   20244:	dfc00117 	ldw	ra,4(sp)
   20248:	df000017 	ldw	fp,0(sp)
   2024c:	dec00204 	addi	sp,sp,8
   20250:	f800283a 	ret

00020254 <READ_FIFO_1>:

void READ_FIFO_1(int *buffer)
{
   20254:	defffd04 	addi	sp,sp,-12
   20258:	dfc00215 	stw	ra,8(sp)
   2025c:	df000115 	stw	fp,4(sp)
   20260:	df000104 	addi	fp,sp,4
   20264:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(CTRL_BASE,1<<1) != 0)
   20268:	0001883a 	nop
   2026c:	01000134 	movhi	r4,4
   20270:	21040004 	addi	r4,r4,4096
   20274:	01400084 	movi	r5,2
   20278:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2027c:	103ffb1e 	bne	r2,zero,2026c <READ_FIFO_1+0x18>
	{}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(MEM_BASE,CTRL_BASE);
   20280:	01000134 	movhi	r4,4
   20284:	21041404 	addi	r4,r4,4176
   20288:	01400134 	movhi	r5,4
   2028c:	29440004 	addi	r5,r5,4096
   20290:	002a9180 	call	2a918 <altera_avalon_fifo_read_fifo>
   20294:	e0ffff17 	ldw	r3,-4(fp)
   20298:	18800015 	stw	r2,0(r3)

}
   2029c:	e037883a 	mov	sp,fp
   202a0:	dfc00117 	ldw	ra,4(sp)
   202a4:	df000017 	ldw	fp,0(sp)
   202a8:	dec00204 	addi	sp,sp,8
   202ac:	f800283a 	ret

000202b0 <main>:
void delay(int n);
int producer();


int main()
{
   202b0:	defffe04 	addi	sp,sp,-8
   202b4:	dfc00115 	stw	ra,4(sp)
   202b8:	df000015 	stw	fp,0(sp)
   202bc:	d839883a 	mov	fp,sp
	producer();
   202c0:	00202c80 	call	202c8 <producer>

	while(1) { }
   202c4:	003fff06 	br	202c4 <main+0x14>

000202c8 <producer>:
	return 0;
}


int producer()
{
   202c8:	defffd04 	addi	sp,sp,-12
   202cc:	dfc00215 	stw	ra,8(sp)
   202d0:	df000115 	stw	fp,4(sp)
   202d4:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   202d8:	010000f4 	movhi	r4,3
   202dc:	2131d504 	addi	r4,r4,-14508
   202e0:	002048c0 	call	2048c <puts>

//	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
   202e4:	00800144 	movi	r2,5
   202e8:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   202ec:	00001006 	br	20330 <producer+0x68>
	{
		delay(100000);
   202f0:	010000b4 	movhi	r4,2
   202f4:	2121a804 	addi	r4,r4,-31072
   202f8:	00203600 	call	20360 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   202fc:	e13fff04 	addi	r4,fp,-4
   20300:	00201f40 	call	201f4 <WRITE_FIFO_1>
		delay(100000);
   20304:	010000b4 	movhi	r4,2
   20308:	2121a804 	addi	r4,r4,-31072
   2030c:	00203600 	call	20360 <delay>

		printf("Producer sent [%i]\n",j);
   20310:	e0bfff17 	ldw	r2,-4(fp)
   20314:	010000f4 	movhi	r4,3
   20318:	2131da04 	addi	r4,r4,-14488
   2031c:	100b883a 	mov	r5,r2
   20320:	00203cc0 	call	203cc <printf>
		j+=10;
   20324:	e0bfff17 	ldw	r2,-4(fp)
   20328:	10800284 	addi	r2,r2,10
   2032c:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

//	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   20330:	e0bfff17 	ldw	r2,-4(fp)
   20334:	10807d50 	cmplti	r2,r2,501
   20338:	103fed1e 	bne	r2,zero,202f0 <producer+0x28>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
   2033c:	010000f4 	movhi	r4,3
   20340:	2131df04 	addi	r4,r4,-14468
   20344:	002048c0 	call	2048c <puts>
	return 0;
   20348:	0005883a 	mov	r2,zero
}
   2034c:	e037883a 	mov	sp,fp
   20350:	dfc00117 	ldw	ra,4(sp)
   20354:	df000017 	ldw	fp,0(sp)
   20358:	dec00204 	addi	sp,sp,8
   2035c:	f800283a 	ret

00020360 <delay>:


void delay(int n)
{
   20360:	defffd04 	addi	sp,sp,-12
   20364:	df000215 	stw	fp,8(sp)
   20368:	df000204 	addi	fp,sp,8
   2036c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   20370:	e0bfff17 	ldw	r2,-4(fp)
   20374:	e0bffe15 	stw	r2,-8(fp)
   20378:	00000306 	br	20388 <delay+0x28>
   2037c:	e0bffe17 	ldw	r2,-8(fp)
   20380:	10bfffc4 	addi	r2,r2,-1
   20384:	e0bffe15 	stw	r2,-8(fp)
   20388:	e0bffe17 	ldw	r2,-8(fp)
   2038c:	00bffb16 	blt	zero,r2,2037c <delay+0x1c>
	{
		continue;
	}
}
   20390:	e037883a 	mov	sp,fp
   20394:	df000017 	ldw	fp,0(sp)
   20398:	dec00104 	addi	sp,sp,4
   2039c:	f800283a 	ret

000203a0 <_printf_r>:
   203a0:	defffd04 	addi	sp,sp,-12
   203a4:	dfc00015 	stw	ra,0(sp)
   203a8:	d9800115 	stw	r6,4(sp)
   203ac:	d9c00215 	stw	r7,8(sp)
   203b0:	280d883a 	mov	r6,r5
   203b4:	21400217 	ldw	r5,8(r4)
   203b8:	d9c00104 	addi	r7,sp,4
   203bc:	00205600 	call	20560 <___vfprintf_internal_r>
   203c0:	dfc00017 	ldw	ra,0(sp)
   203c4:	dec00304 	addi	sp,sp,12
   203c8:	f800283a 	ret

000203cc <printf>:
   203cc:	defffc04 	addi	sp,sp,-16
   203d0:	dfc00015 	stw	ra,0(sp)
   203d4:	d9400115 	stw	r5,4(sp)
   203d8:	d9800215 	stw	r6,8(sp)
   203dc:	d9c00315 	stw	r7,12(sp)
   203e0:	008000f4 	movhi	r2,3
   203e4:	10b93604 	addi	r2,r2,-6952
   203e8:	10800017 	ldw	r2,0(r2)
   203ec:	200b883a 	mov	r5,r4
   203f0:	d9800104 	addi	r6,sp,4
   203f4:	11000217 	ldw	r4,8(r2)
   203f8:	00223dc0 	call	223dc <__vfprintf_internal>
   203fc:	dfc00017 	ldw	ra,0(sp)
   20400:	dec00404 	addi	sp,sp,16
   20404:	f800283a 	ret

00020408 <_puts_r>:
   20408:	defff604 	addi	sp,sp,-40
   2040c:	dc400815 	stw	r17,32(sp)
   20410:	2023883a 	mov	r17,r4
   20414:	2809883a 	mov	r4,r5
   20418:	dc000715 	stw	r16,28(sp)
   2041c:	dfc00915 	stw	ra,36(sp)
   20420:	2821883a 	mov	r16,r5
   20424:	00204a00 	call	204a0 <strlen>
   20428:	10c00044 	addi	r3,r2,1
   2042c:	d8800115 	stw	r2,4(sp)
   20430:	89400217 	ldw	r5,8(r17)
   20434:	008000f4 	movhi	r2,3
   20438:	10b1e404 	addi	r2,r2,-14448
   2043c:	d8800215 	stw	r2,8(sp)
   20440:	00800044 	movi	r2,1
   20444:	d8800315 	stw	r2,12(sp)
   20448:	8809883a 	mov	r4,r17
   2044c:	00800084 	movi	r2,2
   20450:	d9800404 	addi	r6,sp,16
   20454:	dc000015 	stw	r16,0(sp)
   20458:	d8c00615 	stw	r3,24(sp)
   2045c:	dec00415 	stw	sp,16(sp)
   20460:	d8800515 	stw	r2,20(sp)
   20464:	00246dc0 	call	246dc <__sfvwrite_r>
   20468:	1000061e 	bne	r2,zero,20484 <_puts_r+0x7c>
   2046c:	00800284 	movi	r2,10
   20470:	dfc00917 	ldw	ra,36(sp)
   20474:	dc400817 	ldw	r17,32(sp)
   20478:	dc000717 	ldw	r16,28(sp)
   2047c:	dec00a04 	addi	sp,sp,40
   20480:	f800283a 	ret
   20484:	00bfffc4 	movi	r2,-1
   20488:	003ff906 	br	20470 <_puts_r+0x68>

0002048c <puts>:
   2048c:	008000f4 	movhi	r2,3
   20490:	10b93604 	addi	r2,r2,-6952
   20494:	200b883a 	mov	r5,r4
   20498:	11000017 	ldw	r4,0(r2)
   2049c:	00204081 	jmpi	20408 <_puts_r>

000204a0 <strlen>:
   204a0:	208000cc 	andi	r2,r4,3
   204a4:	10001f1e 	bne	r2,zero,20524 <strlen+0x84>
   204a8:	20800017 	ldw	r2,0(r4)
   204ac:	01ffbff4 	movhi	r7,65279
   204b0:	39ffbfc4 	addi	r7,r7,-257
   204b4:	01a02074 	movhi	r6,32897
   204b8:	31a02004 	addi	r6,r6,-32640
   204bc:	11c7883a 	add	r3,r2,r7
   204c0:	0084303a 	nor	r2,zero,r2
   204c4:	1886703a 	and	r3,r3,r2
   204c8:	1986703a 	and	r3,r3,r6
   204cc:	2005883a 	mov	r2,r4
   204d0:	1800101e 	bne	r3,zero,20514 <strlen+0x74>
   204d4:	10800104 	addi	r2,r2,4
   204d8:	10c00017 	ldw	r3,0(r2)
   204dc:	19cb883a 	add	r5,r3,r7
   204e0:	00c6303a 	nor	r3,zero,r3
   204e4:	28c6703a 	and	r3,r5,r3
   204e8:	1986703a 	and	r3,r3,r6
   204ec:	1800091e 	bne	r3,zero,20514 <strlen+0x74>
   204f0:	10800104 	addi	r2,r2,4
   204f4:	10c00017 	ldw	r3,0(r2)
   204f8:	19cb883a 	add	r5,r3,r7
   204fc:	00c6303a 	nor	r3,zero,r3
   20500:	28c6703a 	and	r3,r5,r3
   20504:	1986703a 	and	r3,r3,r6
   20508:	183ff226 	beq	r3,zero,204d4 <strlen+0x34>
   2050c:	00000106 	br	20514 <strlen+0x74>
   20510:	10800044 	addi	r2,r2,1
   20514:	10c00007 	ldb	r3,0(r2)
   20518:	183ffd1e 	bne	r3,zero,20510 <strlen+0x70>
   2051c:	1105c83a 	sub	r2,r2,r4
   20520:	f800283a 	ret
   20524:	2005883a 	mov	r2,r4
   20528:	003ffa06 	br	20514 <strlen+0x74>

0002052c <__sprint_r>:
   2052c:	30800217 	ldw	r2,8(r6)
   20530:	defffe04 	addi	sp,sp,-8
   20534:	dc000015 	stw	r16,0(sp)
   20538:	dfc00115 	stw	ra,4(sp)
   2053c:	3021883a 	mov	r16,r6
   20540:	10000226 	beq	r2,zero,2054c <__sprint_r+0x20>
   20544:	00246dc0 	call	246dc <__sfvwrite_r>
   20548:	80000215 	stw	zero,8(r16)
   2054c:	80000115 	stw	zero,4(r16)
   20550:	dfc00117 	ldw	ra,4(sp)
   20554:	dc000017 	ldw	r16,0(sp)
   20558:	dec00204 	addi	sp,sp,8
   2055c:	f800283a 	ret

00020560 <___vfprintf_internal_r>:
   20560:	defeb904 	addi	sp,sp,-1308
   20564:	dc013d15 	stw	r16,1268(sp)
   20568:	d9013015 	stw	r4,1216(sp)
   2056c:	dfc14615 	stw	ra,1304(sp)
   20570:	df014515 	stw	fp,1300(sp)
   20574:	ddc14415 	stw	r23,1296(sp)
   20578:	dd814315 	stw	r22,1292(sp)
   2057c:	dd414215 	stw	r21,1288(sp)
   20580:	dd014115 	stw	r20,1284(sp)
   20584:	dcc14015 	stw	r19,1280(sp)
   20588:	dc813f15 	stw	r18,1276(sp)
   2058c:	dc413e15 	stw	r17,1272(sp)
   20590:	d9412915 	stw	r5,1188(sp)
   20594:	3021883a 	mov	r16,r6
   20598:	d9c12d15 	stw	r7,1204(sp)
   2059c:	0024dc80 	call	24dc8 <_localeconv_r>
   205a0:	10800017 	ldw	r2,0(r2)
   205a4:	d9013017 	ldw	r4,1216(sp)
   205a8:	d8013315 	stw	zero,1228(sp)
   205ac:	d8813715 	stw	r2,1244(sp)
   205b0:	d8013415 	stw	zero,1232(sp)
   205b4:	20000226 	beq	r4,zero,205c0 <___vfprintf_internal_r+0x60>
   205b8:	20800e17 	ldw	r2,56(r4)
   205bc:	10014b26 	beq	r2,zero,20aec <___vfprintf_internal_r+0x58c>
   205c0:	d8c12917 	ldw	r3,1188(sp)
   205c4:	1880030b 	ldhu	r2,12(r3)
   205c8:	10c0020c 	andi	r3,r2,8
   205cc:	18ffffcc 	andi	r3,r3,65535
   205d0:	18e0001c 	xori	r3,r3,32768
   205d4:	18e00004 	addi	r3,r3,-32768
   205d8:	1800ed26 	beq	r3,zero,20990 <___vfprintf_internal_r+0x430>
   205dc:	d9012917 	ldw	r4,1188(sp)
   205e0:	20c00417 	ldw	r3,16(r4)
   205e4:	1800ea26 	beq	r3,zero,20990 <___vfprintf_internal_r+0x430>
   205e8:	1100068c 	andi	r4,r2,26
   205ec:	00c00284 	movi	r3,10
   205f0:	20c0f026 	beq	r4,r3,209b4 <___vfprintf_internal_r+0x454>
   205f4:	d9010dc4 	addi	r4,sp,1079
   205f8:	d8810e04 	addi	r2,sp,1080
   205fc:	dc413017 	ldw	r17,1216(sp)
   20600:	d8c00404 	addi	r3,sp,16
   20604:	d9012615 	stw	r4,1176(sp)
   20608:	1109c83a 	sub	r4,r2,r4
   2060c:	d8812715 	stw	r2,1180(sp)
   20610:	d8c11b15 	stw	r3,1132(sp)
   20614:	d8011d15 	stw	zero,1140(sp)
   20618:	d8011c15 	stw	zero,1136(sp)
   2061c:	802b883a 	mov	r21,r16
   20620:	d8013215 	stw	zero,1224(sp)
   20624:	d8013615 	stw	zero,1240(sp)
   20628:	d8013515 	stw	zero,1236(sp)
   2062c:	d8012c15 	stw	zero,1200(sp)
   20630:	1813883a 	mov	r9,r3
   20634:	d9013915 	stw	r4,1252(sp)
   20638:	a8800007 	ldb	r2,0(r21)
   2063c:	1002f326 	beq	r2,zero,2120c <___vfprintf_internal_r+0xcac>
   20640:	00c00944 	movi	r3,37
   20644:	a825883a 	mov	r18,r21
   20648:	10c0021e 	bne	r2,r3,20654 <___vfprintf_internal_r+0xf4>
   2064c:	00001406 	br	206a0 <___vfprintf_internal_r+0x140>
   20650:	10c00326 	beq	r2,r3,20660 <___vfprintf_internal_r+0x100>
   20654:	94800044 	addi	r18,r18,1
   20658:	90800007 	ldb	r2,0(r18)
   2065c:	103ffc1e 	bne	r2,zero,20650 <___vfprintf_internal_r+0xf0>
   20660:	9561c83a 	sub	r16,r18,r21
   20664:	80000e26 	beq	r16,zero,206a0 <___vfprintf_internal_r+0x140>
   20668:	da011d17 	ldw	r8,1140(sp)
   2066c:	d8c11c17 	ldw	r3,1136(sp)
   20670:	4d400015 	stw	r21,0(r9)
   20674:	4c000115 	stw	r16,4(r9)
   20678:	4411883a 	add	r8,r8,r16
   2067c:	18c00044 	addi	r3,r3,1
   20680:	da011d15 	stw	r8,1140(sp)
   20684:	d8c11c15 	stw	r3,1136(sp)
   20688:	008001c4 	movi	r2,7
   2068c:	10c11016 	blt	r2,r3,20ad0 <___vfprintf_internal_r+0x570>
   20690:	4a400204 	addi	r9,r9,8
   20694:	d8812c17 	ldw	r2,1200(sp)
   20698:	1405883a 	add	r2,r2,r16
   2069c:	d8812c15 	stw	r2,1200(sp)
   206a0:	90800007 	ldb	r2,0(r18)
   206a4:	1000ee26 	beq	r2,zero,20a60 <___vfprintf_internal_r+0x500>
   206a8:	95400044 	addi	r21,r18,1
   206ac:	94800047 	ldb	r18,1(r18)
   206b0:	073fffc4 	movi	fp,-1
   206b4:	e007883a 	mov	r3,fp
   206b8:	d8012585 	stb	zero,1174(sp)
   206bc:	d8012e15 	stw	zero,1208(sp)
   206c0:	0021883a 	mov	r16,zero
   206c4:	05001604 	movi	r20,88
   206c8:	04c00244 	movi	r19,9
   206cc:	4839883a 	mov	fp,r9
   206d0:	ad400044 	addi	r21,r21,1
   206d4:	90bff804 	addi	r2,r18,-32
   206d8:	a080462e 	bgeu	r20,r2,207f4 <___vfprintf_internal_r+0x294>
   206dc:	e013883a 	mov	r9,fp
   206e0:	9000df26 	beq	r18,zero,20a60 <___vfprintf_internal_r+0x500>
   206e4:	00c00044 	movi	r3,1
   206e8:	d8c12815 	stw	r3,1184(sp)
   206ec:	dc810405 	stb	r18,1040(sp)
   206f0:	d8012585 	stb	zero,1174(sp)
   206f4:	d8c12b15 	stw	r3,1196(sp)
   206f8:	dcc10404 	addi	r19,sp,1040
   206fc:	d8013115 	stw	zero,1220(sp)
   20700:	80c0008c 	andi	r3,r16,2
   20704:	d8c12a15 	stw	r3,1192(sp)
   20708:	18000326 	beq	r3,zero,20718 <___vfprintf_internal_r+0x1b8>
   2070c:	d8c12817 	ldw	r3,1184(sp)
   20710:	18c00084 	addi	r3,r3,2
   20714:	d8c12815 	stw	r3,1184(sp)
   20718:	80c0210c 	andi	r3,r16,132
   2071c:	d8c12f15 	stw	r3,1212(sp)
   20720:	1802251e 	bne	r3,zero,20fb8 <___vfprintf_internal_r+0xa58>
   20724:	d9012e17 	ldw	r4,1208(sp)
   20728:	d8c12817 	ldw	r3,1184(sp)
   2072c:	20edc83a 	sub	r22,r4,r3
   20730:	0582210e 	bge	zero,r22,20fb8 <___vfprintf_internal_r+0xa58>
   20734:	02800404 	movi	r10,16
   20738:	da011d17 	ldw	r8,1140(sp)
   2073c:	d8c11c17 	ldw	r3,1136(sp)
   20740:	05c000f4 	movhi	r23,3
   20744:	bdf1f584 	addi	r23,r23,-14378
   20748:	5580200e 	bge	r10,r22,207cc <___vfprintf_internal_r+0x26c>
   2074c:	dc813815 	stw	r18,1248(sp)
   20750:	5039883a 	mov	fp,r10
   20754:	b825883a 	mov	r18,r23
   20758:	050001c4 	movi	r20,7
   2075c:	b02f883a 	mov	r23,r22
   20760:	802d883a 	mov	r22,r16
   20764:	dc012917 	ldw	r16,1188(sp)
   20768:	00000306 	br	20778 <___vfprintf_internal_r+0x218>
   2076c:	bdfffc04 	addi	r23,r23,-16
   20770:	4a400204 	addi	r9,r9,8
   20774:	e5c0110e 	bge	fp,r23,207bc <___vfprintf_internal_r+0x25c>
   20778:	4c800015 	stw	r18,0(r9)
   2077c:	4f000115 	stw	fp,4(r9)
   20780:	42000404 	addi	r8,r8,16
   20784:	18c00044 	addi	r3,r3,1
   20788:	da011d15 	stw	r8,1140(sp)
   2078c:	d8c11c15 	stw	r3,1136(sp)
   20790:	a0fff60e 	bge	r20,r3,2076c <___vfprintf_internal_r+0x20c>
   20794:	8809883a 	mov	r4,r17
   20798:	800b883a 	mov	r5,r16
   2079c:	d9811b04 	addi	r6,sp,1132
   207a0:	002052c0 	call	2052c <__sprint_r>
   207a4:	1000b41e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   207a8:	bdfffc04 	addi	r23,r23,-16
   207ac:	da011d17 	ldw	r8,1140(sp)
   207b0:	d8c11c17 	ldw	r3,1136(sp)
   207b4:	da400404 	addi	r9,sp,16
   207b8:	e5ffef16 	blt	fp,r23,20778 <___vfprintf_internal_r+0x218>
   207bc:	b021883a 	mov	r16,r22
   207c0:	b82d883a 	mov	r22,r23
   207c4:	902f883a 	mov	r23,r18
   207c8:	dc813817 	ldw	r18,1248(sp)
   207cc:	4dc00015 	stw	r23,0(r9)
   207d0:	4d800115 	stw	r22,4(r9)
   207d4:	4591883a 	add	r8,r8,r22
   207d8:	18c00044 	addi	r3,r3,1
   207dc:	da011d15 	stw	r8,1140(sp)
   207e0:	d8c11c15 	stw	r3,1136(sp)
   207e4:	008001c4 	movi	r2,7
   207e8:	10c3fe16 	blt	r2,r3,217e4 <___vfprintf_internal_r+0x1284>
   207ec:	4a400204 	addi	r9,r9,8
   207f0:	0001f306 	br	20fc0 <___vfprintf_internal_r+0xa60>
   207f4:	1085883a 	add	r2,r2,r2
   207f8:	1085883a 	add	r2,r2,r2
   207fc:	010000b4 	movhi	r4,2
   20800:	21020404 	addi	r4,r4,2064
   20804:	1105883a 	add	r2,r2,r4
   20808:	10800017 	ldw	r2,0(r2)
   2080c:	1000683a 	jmp	r2
   20810:	00020eec 	andhi	zero,zero,2107
   20814:	000206dc 	xori	zero,zero,2075
   20818:	000206dc 	xori	zero,zero,2075
   2081c:	00020f04 	movi	zero,2108
   20820:	000206dc 	xori	zero,zero,2075
   20824:	000206dc 	xori	zero,zero,2075
   20828:	000206dc 	xori	zero,zero,2075
   2082c:	000206dc 	xori	zero,zero,2075
   20830:	000206dc 	xori	zero,zero,2075
   20834:	000206dc 	xori	zero,zero,2075
   20838:	00020dbc 	xorhi	zero,zero,2102
   2083c:	00020f50 	cmplti	zero,zero,2109
   20840:	000206dc 	xori	zero,zero,2075
   20844:	00020984 	movi	zero,2086
   20848:	00020d24 	muli	zero,zero,2100
   2084c:	000206dc 	xori	zero,zero,2075
   20850:	00020f10 	cmplti	zero,zero,2108
   20854:	00020f1c 	xori	zero,zero,2108
   20858:	00020f1c 	xori	zero,zero,2108
   2085c:	00020f1c 	xori	zero,zero,2108
   20860:	00020f1c 	xori	zero,zero,2108
   20864:	00020f1c 	xori	zero,zero,2108
   20868:	00020f1c 	xori	zero,zero,2108
   2086c:	00020f1c 	xori	zero,zero,2108
   20870:	00020f1c 	xori	zero,zero,2108
   20874:	00020f1c 	xori	zero,zero,2108
   20878:	000206dc 	xori	zero,zero,2075
   2087c:	000206dc 	xori	zero,zero,2075
   20880:	000206dc 	xori	zero,zero,2075
   20884:	000206dc 	xori	zero,zero,2075
   20888:	000206dc 	xori	zero,zero,2075
   2088c:	000206dc 	xori	zero,zero,2075
   20890:	000206dc 	xori	zero,zero,2075
   20894:	000206dc 	xori	zero,zero,2075
   20898:	000206dc 	xori	zero,zero,2075
   2089c:	000206dc 	xori	zero,zero,2075
   208a0:	00020af4 	movhi	zero,2091
   208a4:	00020bb4 	movhi	zero,2094
   208a8:	000206dc 	xori	zero,zero,2075
   208ac:	00020bb4 	movhi	zero,2094
   208b0:	000206dc 	xori	zero,zero,2075
   208b4:	000206dc 	xori	zero,zero,2075
   208b8:	000206dc 	xori	zero,zero,2075
   208bc:	000206dc 	xori	zero,zero,2075
   208c0:	00020c48 	cmpgei	zero,zero,2097
   208c4:	000206dc 	xori	zero,zero,2075
   208c8:	000206dc 	xori	zero,zero,2075
   208cc:	00020c54 	movui	zero,2097
   208d0:	000206dc 	xori	zero,zero,2075
   208d4:	000206dc 	xori	zero,zero,2075
   208d8:	000206dc 	xori	zero,zero,2075
   208dc:	000206dc 	xori	zero,zero,2075
   208e0:	000206dc 	xori	zero,zero,2075
   208e4:	00020c8c 	andi	zero,zero,2098
   208e8:	000206dc 	xori	zero,zero,2075
   208ec:	000206dc 	xori	zero,zero,2075
   208f0:	00020cc8 	cmpgei	zero,zero,2099
   208f4:	000206dc 	xori	zero,zero,2075
   208f8:	000206dc 	xori	zero,zero,2075
   208fc:	000206dc 	xori	zero,zero,2075
   20900:	000206dc 	xori	zero,zero,2075
   20904:	000206dc 	xori	zero,zero,2075
   20908:	000206dc 	xori	zero,zero,2075
   2090c:	000206dc 	xori	zero,zero,2075
   20910:	000206dc 	xori	zero,zero,2075
   20914:	000206dc 	xori	zero,zero,2075
   20918:	000206dc 	xori	zero,zero,2075
   2091c:	00020f60 	cmpeqi	zero,zero,2109
   20920:	00020f94 	movui	zero,2110
   20924:	00020bb4 	movhi	zero,2094
   20928:	00020bb4 	movhi	zero,2094
   2092c:	00020bb4 	movhi	zero,2094
   20930:	00020ee0 	cmpeqi	zero,zero,2107
   20934:	00020f94 	movui	zero,2110
   20938:	000206dc 	xori	zero,zero,2075
   2093c:	000206dc 	xori	zero,zero,2075
   20940:	00020d6c 	andhi	zero,zero,2101
   20944:	000206dc 	xori	zero,zero,2075
   20948:	00020d84 	movi	zero,2102
   2094c:	00020fa0 	cmpeqi	zero,zero,2110
   20950:	00020de4 	muli	zero,zero,2103
   20954:	00020e34 	movhi	zero,2104
   20958:	000206dc 	xori	zero,zero,2075
   2095c:	00020e40 	call	20e4 <__alt_mem_onchip_mem_c0-0x1df1c>
   20960:	000206dc 	xori	zero,zero,2075
   20964:	00020fac 	andhi	zero,zero,2110
   20968:	000206dc 	xori	zero,zero,2075
   2096c:	000206dc 	xori	zero,zero,2075
   20970:	00020ea4 	muli	zero,zero,2106
   20974:	d9012e17 	ldw	r4,1208(sp)
   20978:	d8812d15 	stw	r2,1204(sp)
   2097c:	0109c83a 	sub	r4,zero,r4
   20980:	d9012e15 	stw	r4,1208(sp)
   20984:	84000114 	ori	r16,r16,4
   20988:	ac800007 	ldb	r18,0(r21)
   2098c:	003f5006 	br	206d0 <___vfprintf_internal_r+0x170>
   20990:	d9013017 	ldw	r4,1216(sp)
   20994:	d9412917 	ldw	r5,1188(sp)
   20998:	00224000 	call	22400 <__swsetup_r>
   2099c:	10003d1e 	bne	r2,zero,20a94 <___vfprintf_internal_r+0x534>
   209a0:	d8c12917 	ldw	r3,1188(sp)
   209a4:	1880030b 	ldhu	r2,12(r3)
   209a8:	00c00284 	movi	r3,10
   209ac:	1100068c 	andi	r4,r2,26
   209b0:	20ff101e 	bne	r4,r3,205f4 <___vfprintf_internal_r+0x94>
   209b4:	d9012917 	ldw	r4,1188(sp)
   209b8:	20c0038b 	ldhu	r3,14(r4)
   209bc:	193fffcc 	andi	r4,r3,65535
   209c0:	2120001c 	xori	r4,r4,32768
   209c4:	21200004 	addi	r4,r4,-32768
   209c8:	203f0a16 	blt	r4,zero,205f4 <___vfprintf_internal_r+0x94>
   209cc:	d9012917 	ldw	r4,1188(sp)
   209d0:	d9c12d17 	ldw	r7,1204(sp)
   209d4:	10bfff4c 	andi	r2,r2,65533
   209d8:	22800717 	ldw	r10,28(r4)
   209dc:	22400917 	ldw	r9,36(r4)
   209e0:	d9013017 	ldw	r4,1216(sp)
   209e4:	02010004 	movi	r8,1024
   209e8:	d881070d 	sth	r2,1052(sp)
   209ec:	d9410404 	addi	r5,sp,1040
   209f0:	d8800404 	addi	r2,sp,16
   209f4:	800d883a 	mov	r6,r16
   209f8:	d8c1078d 	sth	r3,1054(sp)
   209fc:	da810b15 	stw	r10,1068(sp)
   20a00:	da410d15 	stw	r9,1076(sp)
   20a04:	d8810415 	stw	r2,1040(sp)
   20a08:	d8810815 	stw	r2,1056(sp)
   20a0c:	da010615 	stw	r8,1048(sp)
   20a10:	da010915 	stw	r8,1060(sp)
   20a14:	d8010a15 	stw	zero,1064(sp)
   20a18:	00205600 	call	20560 <___vfprintf_internal_r>
   20a1c:	d8812c15 	stw	r2,1200(sp)
   20a20:	10000416 	blt	r2,zero,20a34 <___vfprintf_internal_r+0x4d4>
   20a24:	d9013017 	ldw	r4,1216(sp)
   20a28:	d9410404 	addi	r5,sp,1040
   20a2c:	0023dcc0 	call	23dcc <_fflush_r>
   20a30:	1006501e 	bne	r2,zero,22374 <___vfprintf_internal_r+0x1e14>
   20a34:	d881070b 	ldhu	r2,1052(sp)
   20a38:	1080100c 	andi	r2,r2,64
   20a3c:	10bfffcc 	andi	r2,r2,65535
   20a40:	10a0001c 	xori	r2,r2,32768
   20a44:	10a00004 	addi	r2,r2,-32768
   20a48:	10001426 	beq	r2,zero,20a9c <___vfprintf_internal_r+0x53c>
   20a4c:	d8c12917 	ldw	r3,1188(sp)
   20a50:	1880030b 	ldhu	r2,12(r3)
   20a54:	10801014 	ori	r2,r2,64
   20a58:	1880030d 	sth	r2,12(r3)
   20a5c:	00000f06 	br	20a9c <___vfprintf_internal_r+0x53c>
   20a60:	d8811d17 	ldw	r2,1140(sp)
   20a64:	10000426 	beq	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   20a68:	d9013017 	ldw	r4,1216(sp)
   20a6c:	d9412917 	ldw	r5,1188(sp)
   20a70:	d9811b04 	addi	r6,sp,1132
   20a74:	002052c0 	call	2052c <__sprint_r>
   20a78:	d8c12917 	ldw	r3,1188(sp)
   20a7c:	1880030b 	ldhu	r2,12(r3)
   20a80:	1080100c 	andi	r2,r2,64
   20a84:	10bfffcc 	andi	r2,r2,65535
   20a88:	10a0001c 	xori	r2,r2,32768
   20a8c:	10a00004 	addi	r2,r2,-32768
   20a90:	10000226 	beq	r2,zero,20a9c <___vfprintf_internal_r+0x53c>
   20a94:	00bfffc4 	movi	r2,-1
   20a98:	d8812c15 	stw	r2,1200(sp)
   20a9c:	d8812c17 	ldw	r2,1200(sp)
   20aa0:	dfc14617 	ldw	ra,1304(sp)
   20aa4:	df014517 	ldw	fp,1300(sp)
   20aa8:	ddc14417 	ldw	r23,1296(sp)
   20aac:	dd814317 	ldw	r22,1292(sp)
   20ab0:	dd414217 	ldw	r21,1288(sp)
   20ab4:	dd014117 	ldw	r20,1284(sp)
   20ab8:	dcc14017 	ldw	r19,1280(sp)
   20abc:	dc813f17 	ldw	r18,1276(sp)
   20ac0:	dc413e17 	ldw	r17,1272(sp)
   20ac4:	dc013d17 	ldw	r16,1268(sp)
   20ac8:	dec14704 	addi	sp,sp,1308
   20acc:	f800283a 	ret
   20ad0:	d9412917 	ldw	r5,1188(sp)
   20ad4:	8809883a 	mov	r4,r17
   20ad8:	d9811b04 	addi	r6,sp,1132
   20adc:	002052c0 	call	2052c <__sprint_r>
   20ae0:	103fe51e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   20ae4:	da400404 	addi	r9,sp,16
   20ae8:	003eea06 	br	20694 <___vfprintf_internal_r+0x134>
   20aec:	00240880 	call	24088 <__sinit>
   20af0:	003eb306 	br	205c0 <___vfprintf_internal_r+0x60>
   20af4:	e013883a 	mov	r9,fp
   20af8:	84000414 	ori	r16,r16,16
   20afc:	1839883a 	mov	fp,r3
   20b00:	8080080c 	andi	r2,r16,32
   20b04:	10034426 	beq	r2,zero,21818 <___vfprintf_internal_r+0x12b8>
   20b08:	d8c12d17 	ldw	r3,1204(sp)
   20b0c:	18800117 	ldw	r2,4(r3)
   20b10:	1dc00017 	ldw	r23,0(r3)
   20b14:	18c00204 	addi	r3,r3,8
   20b18:	d8c12d15 	stw	r3,1204(sp)
   20b1c:	102d883a 	mov	r22,r2
   20b20:	1003020e 	bge	r2,zero,2172c <___vfprintf_internal_r+0x11cc>
   20b24:	05efc83a 	sub	r23,zero,r23
   20b28:	b804c03a 	cmpne	r2,r23,zero
   20b2c:	05adc83a 	sub	r22,zero,r22
   20b30:	b0adc83a 	sub	r22,r22,r2
   20b34:	00800b44 	movi	r2,45
   20b38:	d8812585 	stb	r2,1174(sp)
   20b3c:	00c00044 	movi	r3,1
   20b40:	bd84b03a 	or	r2,r23,r22
   20b44:	e0000216 	blt	fp,zero,20b50 <___vfprintf_internal_r+0x5f0>
   20b48:	013fdfc4 	movi	r4,-129
   20b4c:	8120703a 	and	r16,r16,r4
   20b50:	1001cc1e 	bne	r2,zero,21284 <___vfprintf_internal_r+0xd24>
   20b54:	e001cb1e 	bne	fp,zero,21284 <___vfprintf_internal_r+0xd24>
   20b58:	18c03fcc 	andi	r3,r3,255
   20b5c:	1802ca1e 	bne	r3,zero,21688 <___vfprintf_internal_r+0x1128>
   20b60:	8080004c 	andi	r2,r16,1
   20b64:	1002c826 	beq	r2,zero,21688 <___vfprintf_internal_r+0x1128>
   20b68:	d8c13917 	ldw	r3,1252(sp)
   20b6c:	00800c04 	movi	r2,48
   20b70:	d8810dc5 	stb	r2,1079(sp)
   20b74:	d8c12b15 	stw	r3,1196(sp)
   20b78:	dcc10dc4 	addi	r19,sp,1079
   20b7c:	d8812b17 	ldw	r2,1196(sp)
   20b80:	d8812815 	stw	r2,1184(sp)
   20b84:	1700010e 	bge	r2,fp,20b8c <___vfprintf_internal_r+0x62c>
   20b88:	df012815 	stw	fp,1184(sp)
   20b8c:	d8812583 	ldbu	r2,1174(sp)
   20b90:	df013115 	stw	fp,1220(sp)
   20b94:	10803fcc 	andi	r2,r2,255
   20b98:	1080201c 	xori	r2,r2,128
   20b9c:	10bfe004 	addi	r2,r2,-128
   20ba0:	103ed726 	beq	r2,zero,20700 <___vfprintf_internal_r+0x1a0>
   20ba4:	d8c12817 	ldw	r3,1184(sp)
   20ba8:	18c00044 	addi	r3,r3,1
   20bac:	d8c12815 	stw	r3,1184(sp)
   20bb0:	003ed306 	br	20700 <___vfprintf_internal_r+0x1a0>
   20bb4:	8080020c 	andi	r2,r16,8
   20bb8:	e013883a 	mov	r9,fp
   20bbc:	1839883a 	mov	fp,r3
   20bc0:	1003a626 	beq	r2,zero,21a5c <___vfprintf_internal_r+0x14fc>
   20bc4:	d9012d17 	ldw	r4,1204(sp)
   20bc8:	25800017 	ldw	r22,0(r4)
   20bcc:	25000117 	ldw	r20,4(r4)
   20bd0:	21000204 	addi	r4,r4,8
   20bd4:	d9012d15 	stw	r4,1204(sp)
   20bd8:	dd813315 	stw	r22,1228(sp)
   20bdc:	dd013415 	stw	r20,1232(sp)
   20be0:	b009883a 	mov	r4,r22
   20be4:	a00b883a 	mov	r5,r20
   20be8:	da413c15 	stw	r9,1264(sp)
   20bec:	00272140 	call	27214 <__isinfd>
   20bf0:	da413c17 	ldw	r9,1264(sp)
   20bf4:	b009883a 	mov	r4,r22
   20bf8:	a00b883a 	mov	r5,r20
   20bfc:	10041d26 	beq	r2,zero,21c74 <___vfprintf_internal_r+0x1714>
   20c00:	000d883a 	mov	r6,zero
   20c04:	000f883a 	mov	r7,zero
   20c08:	0028fe80 	call	28fe8 <__ltdf2>
   20c0c:	da413c17 	ldw	r9,1264(sp)
   20c10:	1004da16 	blt	r2,zero,21f7c <___vfprintf_internal_r+0x1a1c>
   20c14:	d8812583 	ldbu	r2,1174(sp)
   20c18:	00c011c4 	movi	r3,71
   20c1c:	1c83d116 	blt	r3,r18,21b64 <___vfprintf_internal_r+0x1604>
   20c20:	04c000f4 	movhi	r19,3
   20c24:	9cf1e504 	addi	r19,r19,-14444
   20c28:	00c000c4 	movi	r3,3
   20c2c:	d8c12815 	stw	r3,1184(sp)
   20c30:	00ffdfc4 	movi	r3,-129
   20c34:	80e0703a 	and	r16,r16,r3
   20c38:	d8c12817 	ldw	r3,1184(sp)
   20c3c:	d8013115 	stw	zero,1220(sp)
   20c40:	d8c12b15 	stw	r3,1196(sp)
   20c44:	003fd306 	br	20b94 <___vfprintf_internal_r+0x634>
   20c48:	84000214 	ori	r16,r16,8
   20c4c:	ac800007 	ldb	r18,0(r21)
   20c50:	003e9f06 	br	206d0 <___vfprintf_internal_r+0x170>
   20c54:	e013883a 	mov	r9,fp
   20c58:	84000414 	ori	r16,r16,16
   20c5c:	1839883a 	mov	fp,r3
   20c60:	8080080c 	andi	r2,r16,32
   20c64:	10031d26 	beq	r2,zero,218dc <___vfprintf_internal_r+0x137c>
   20c68:	d8812d17 	ldw	r2,1204(sp)
   20c6c:	0007883a 	mov	r3,zero
   20c70:	15c00017 	ldw	r23,0(r2)
   20c74:	15800117 	ldw	r22,4(r2)
   20c78:	10800204 	addi	r2,r2,8
   20c7c:	d8812d15 	stw	r2,1204(sp)
   20c80:	d8012585 	stb	zero,1174(sp)
   20c84:	bd84b03a 	or	r2,r23,r22
   20c88:	003fae06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   20c8c:	e013883a 	mov	r9,fp
   20c90:	84000414 	ori	r16,r16,16
   20c94:	1839883a 	mov	fp,r3
   20c98:	8080080c 	andi	r2,r16,32
   20c9c:	1002e726 	beq	r2,zero,2183c <___vfprintf_internal_r+0x12dc>
   20ca0:	d8c12d17 	ldw	r3,1204(sp)
   20ca4:	d9012d17 	ldw	r4,1204(sp)
   20ca8:	1dc00017 	ldw	r23,0(r3)
   20cac:	1d800117 	ldw	r22,4(r3)
   20cb0:	21000204 	addi	r4,r4,8
   20cb4:	00c00044 	movi	r3,1
   20cb8:	d9012d15 	stw	r4,1204(sp)
   20cbc:	bd84b03a 	or	r2,r23,r22
   20cc0:	d8012585 	stb	zero,1174(sp)
   20cc4:	003f9f06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   20cc8:	e013883a 	mov	r9,fp
   20ccc:	1839883a 	mov	fp,r3
   20cd0:	00c000f4 	movhi	r3,3
   20cd4:	18f1e904 	addi	r3,r3,-14428
   20cd8:	d8c13615 	stw	r3,1240(sp)
   20cdc:	8080080c 	andi	r2,r16,32
   20ce0:	10007726 	beq	r2,zero,20ec0 <___vfprintf_internal_r+0x960>
   20ce4:	d9012d17 	ldw	r4,1204(sp)
   20ce8:	25c00017 	ldw	r23,0(r4)
   20cec:	25800117 	ldw	r22,4(r4)
   20cf0:	21000204 	addi	r4,r4,8
   20cf4:	d9012d15 	stw	r4,1204(sp)
   20cf8:	8080004c 	andi	r2,r16,1
   20cfc:	1002c226 	beq	r2,zero,21808 <___vfprintf_internal_r+0x12a8>
   20d00:	bd84b03a 	or	r2,r23,r22
   20d04:	10035d26 	beq	r2,zero,21a7c <___vfprintf_internal_r+0x151c>
   20d08:	00c00c04 	movi	r3,48
   20d0c:	d8c12505 	stb	r3,1172(sp)
   20d10:	dc812545 	stb	r18,1173(sp)
   20d14:	84000094 	ori	r16,r16,2
   20d18:	00c00084 	movi	r3,2
   20d1c:	d8012585 	stb	zero,1174(sp)
   20d20:	003f8806 	br	20b44 <___vfprintf_internal_r+0x5e4>
   20d24:	ac800007 	ldb	r18,0(r21)
   20d28:	00c00a84 	movi	r3,42
   20d2c:	adc00044 	addi	r23,r21,1
   20d30:	90c57526 	beq	r18,r3,22308 <___vfprintf_internal_r+0x1da8>
   20d34:	95bff404 	addi	r22,r18,-48
   20d38:	0009883a 	mov	r4,zero
   20d3c:	9d84ff36 	bltu	r19,r22,2213c <___vfprintf_internal_r+0x1bdc>
   20d40:	01400284 	movi	r5,10
   20d44:	00294380 	call	29438 <__mulsi3>
   20d48:	bc800007 	ldb	r18,0(r23)
   20d4c:	b089883a 	add	r4,r22,r2
   20d50:	bdc00044 	addi	r23,r23,1
   20d54:	95bff404 	addi	r22,r18,-48
   20d58:	9dbff92e 	bgeu	r19,r22,20d40 <___vfprintf_internal_r+0x7e0>
   20d5c:	2007883a 	mov	r3,r4
   20d60:	20044316 	blt	r4,zero,21e70 <___vfprintf_internal_r+0x1910>
   20d64:	b82b883a 	mov	r21,r23
   20d68:	003e5a06 	br	206d4 <___vfprintf_internal_r+0x174>
   20d6c:	ac800007 	ldb	r18,0(r21)
   20d70:	01001b04 	movi	r4,108
   20d74:	a805883a 	mov	r2,r21
   20d78:	91045526 	beq	r18,r4,21ed0 <___vfprintf_internal_r+0x1970>
   20d7c:	84000414 	ori	r16,r16,16
   20d80:	003e5306 	br	206d0 <___vfprintf_internal_r+0x170>
   20d84:	8080080c 	andi	r2,r16,32
   20d88:	e013883a 	mov	r9,fp
   20d8c:	10034026 	beq	r2,zero,21a90 <___vfprintf_internal_r+0x1530>
   20d90:	d9012d17 	ldw	r4,1204(sp)
   20d94:	20800017 	ldw	r2,0(r4)
   20d98:	d9012c17 	ldw	r4,1200(sp)
   20d9c:	2007d7fa 	srai	r3,r4,31
   20da0:	d9012d17 	ldw	r4,1204(sp)
   20da4:	10c00115 	stw	r3,4(r2)
   20da8:	21000104 	addi	r4,r4,4
   20dac:	d9012d15 	stw	r4,1204(sp)
   20db0:	d9012c17 	ldw	r4,1200(sp)
   20db4:	11000015 	stw	r4,0(r2)
   20db8:	003e1f06 	br	20638 <___vfprintf_internal_r+0xd8>
   20dbc:	d9012d17 	ldw	r4,1204(sp)
   20dc0:	21000017 	ldw	r4,0(r4)
   20dc4:	d9012e15 	stw	r4,1208(sp)
   20dc8:	d9012d17 	ldw	r4,1204(sp)
   20dcc:	20800104 	addi	r2,r4,4
   20dd0:	d9012e17 	ldw	r4,1208(sp)
   20dd4:	203ee716 	blt	r4,zero,20974 <___vfprintf_internal_r+0x414>
   20dd8:	d8812d15 	stw	r2,1204(sp)
   20ddc:	ac800007 	ldb	r18,0(r21)
   20de0:	003e3b06 	br	206d0 <___vfprintf_internal_r+0x170>
   20de4:	e013883a 	mov	r9,fp
   20de8:	1839883a 	mov	fp,r3
   20dec:	d8c12d17 	ldw	r3,1204(sp)
   20df0:	00800c04 	movi	r2,48
   20df4:	010000f4 	movhi	r4,3
   20df8:	2131ee04 	addi	r4,r4,-14408
   20dfc:	1dc00017 	ldw	r23,0(r3)
   20e00:	18c00104 	addi	r3,r3,4
   20e04:	d8812505 	stb	r2,1172(sp)
   20e08:	00801e04 	movi	r2,120
   20e0c:	d8812545 	stb	r2,1173(sp)
   20e10:	d8c12d15 	stw	r3,1204(sp)
   20e14:	002d883a 	mov	r22,zero
   20e18:	84000094 	ori	r16,r16,2
   20e1c:	d9013615 	stw	r4,1240(sp)
   20e20:	00c00084 	movi	r3,2
   20e24:	04801e04 	movi	r18,120
   20e28:	b805883a 	mov	r2,r23
   20e2c:	d8012585 	stb	zero,1174(sp)
   20e30:	003f4406 	br	20b44 <___vfprintf_internal_r+0x5e4>
   20e34:	84000814 	ori	r16,r16,32
   20e38:	ac800007 	ldb	r18,0(r21)
   20e3c:	003e2406 	br	206d0 <___vfprintf_internal_r+0x170>
   20e40:	d8812d17 	ldw	r2,1204(sp)
   20e44:	d8012585 	stb	zero,1174(sp)
   20e48:	e013883a 	mov	r9,fp
   20e4c:	14c00017 	ldw	r19,0(r2)
   20e50:	1839883a 	mov	fp,r3
   20e54:	15c00104 	addi	r23,r2,4
   20e58:	98045526 	beq	r19,zero,21fb0 <___vfprintf_internal_r+0x1a50>
   20e5c:	9809883a 	mov	r4,r19
   20e60:	18043116 	blt	r3,zero,21f28 <___vfprintf_internal_r+0x19c8>
   20e64:	000b883a 	mov	r5,zero
   20e68:	180d883a 	mov	r6,r3
   20e6c:	da413c15 	stw	r9,1264(sp)
   20e70:	00257280 	call	25728 <memchr>
   20e74:	da413c17 	ldw	r9,1264(sp)
   20e78:	10047a26 	beq	r2,zero,22064 <___vfprintf_internal_r+0x1b04>
   20e7c:	14c5c83a 	sub	r2,r2,r19
   20e80:	d8812b15 	stw	r2,1196(sp)
   20e84:	e083d40e 	bge	fp,r2,21dd8 <___vfprintf_internal_r+0x1878>
   20e88:	df012815 	stw	fp,1184(sp)
   20e8c:	e004e416 	blt	fp,zero,22220 <___vfprintf_internal_r+0x1cc0>
   20e90:	d8812583 	ldbu	r2,1174(sp)
   20e94:	df012b15 	stw	fp,1196(sp)
   20e98:	ddc12d15 	stw	r23,1204(sp)
   20e9c:	d8013115 	stw	zero,1220(sp)
   20ea0:	003f3c06 	br	20b94 <___vfprintf_internal_r+0x634>
   20ea4:	008000f4 	movhi	r2,3
   20ea8:	10b1ee04 	addi	r2,r2,-14408
   20eac:	d8813615 	stw	r2,1240(sp)
   20eb0:	8080080c 	andi	r2,r16,32
   20eb4:	e013883a 	mov	r9,fp
   20eb8:	1839883a 	mov	fp,r3
   20ebc:	103f891e 	bne	r2,zero,20ce4 <___vfprintf_internal_r+0x784>
   20ec0:	8080040c 	andi	r2,r16,16
   20ec4:	1002c326 	beq	r2,zero,219d4 <___vfprintf_internal_r+0x1474>
   20ec8:	d8812d17 	ldw	r2,1204(sp)
   20ecc:	002d883a 	mov	r22,zero
   20ed0:	15c00017 	ldw	r23,0(r2)
   20ed4:	10800104 	addi	r2,r2,4
   20ed8:	d8812d15 	stw	r2,1204(sp)
   20edc:	003f8606 	br	20cf8 <___vfprintf_internal_r+0x798>
   20ee0:	84001014 	ori	r16,r16,64
   20ee4:	ac800007 	ldb	r18,0(r21)
   20ee8:	003df906 	br	206d0 <___vfprintf_internal_r+0x170>
   20eec:	d8812587 	ldb	r2,1174(sp)
   20ef0:	1002e51e 	bne	r2,zero,21a88 <___vfprintf_internal_r+0x1528>
   20ef4:	00800804 	movi	r2,32
   20ef8:	d8812585 	stb	r2,1174(sp)
   20efc:	ac800007 	ldb	r18,0(r21)
   20f00:	003df306 	br	206d0 <___vfprintf_internal_r+0x170>
   20f04:	84000054 	ori	r16,r16,1
   20f08:	ac800007 	ldb	r18,0(r21)
   20f0c:	003df006 	br	206d0 <___vfprintf_internal_r+0x170>
   20f10:	84002014 	ori	r16,r16,128
   20f14:	ac800007 	ldb	r18,0(r21)
   20f18:	003ded06 	br	206d0 <___vfprintf_internal_r+0x170>
   20f1c:	0009883a 	mov	r4,zero
   20f20:	95bff404 	addi	r22,r18,-48
   20f24:	182f883a 	mov	r23,r3
   20f28:	01400284 	movi	r5,10
   20f2c:	00294380 	call	29438 <__mulsi3>
   20f30:	ac800007 	ldb	r18,0(r21)
   20f34:	1589883a 	add	r4,r2,r22
   20f38:	ad400044 	addi	r21,r21,1
   20f3c:	95bff404 	addi	r22,r18,-48
   20f40:	9dbff92e 	bgeu	r19,r22,20f28 <___vfprintf_internal_r+0x9c8>
   20f44:	b807883a 	mov	r3,r23
   20f48:	d9012e15 	stw	r4,1208(sp)
   20f4c:	003de106 	br	206d4 <___vfprintf_internal_r+0x174>
   20f50:	00800ac4 	movi	r2,43
   20f54:	d8812585 	stb	r2,1174(sp)
   20f58:	ac800007 	ldb	r18,0(r21)
   20f5c:	003ddc06 	br	206d0 <___vfprintf_internal_r+0x170>
   20f60:	d8c12d17 	ldw	r3,1204(sp)
   20f64:	d9012d17 	ldw	r4,1204(sp)
   20f68:	e013883a 	mov	r9,fp
   20f6c:	18800017 	ldw	r2,0(r3)
   20f70:	21000104 	addi	r4,r4,4
   20f74:	00c00044 	movi	r3,1
   20f78:	d8c12815 	stw	r3,1184(sp)
   20f7c:	d8012585 	stb	zero,1174(sp)
   20f80:	d8810405 	stb	r2,1040(sp)
   20f84:	d9012d15 	stw	r4,1204(sp)
   20f88:	d8c12b15 	stw	r3,1196(sp)
   20f8c:	dcc10404 	addi	r19,sp,1040
   20f90:	003dda06 	br	206fc <___vfprintf_internal_r+0x19c>
   20f94:	e013883a 	mov	r9,fp
   20f98:	1839883a 	mov	fp,r3
   20f9c:	003ed806 	br	20b00 <___vfprintf_internal_r+0x5a0>
   20fa0:	e013883a 	mov	r9,fp
   20fa4:	1839883a 	mov	fp,r3
   20fa8:	003f2d06 	br	20c60 <___vfprintf_internal_r+0x700>
   20fac:	e013883a 	mov	r9,fp
   20fb0:	1839883a 	mov	fp,r3
   20fb4:	003f3806 	br	20c98 <___vfprintf_internal_r+0x738>
   20fb8:	da011d17 	ldw	r8,1140(sp)
   20fbc:	d8c11c17 	ldw	r3,1136(sp)
   20fc0:	d8812587 	ldb	r2,1174(sp)
   20fc4:	10000b26 	beq	r2,zero,20ff4 <___vfprintf_internal_r+0xa94>
   20fc8:	d8812584 	addi	r2,sp,1174
   20fcc:	48800015 	stw	r2,0(r9)
   20fd0:	00800044 	movi	r2,1
   20fd4:	48800115 	stw	r2,4(r9)
   20fd8:	4091883a 	add	r8,r8,r2
   20fdc:	1887883a 	add	r3,r3,r2
   20fe0:	da011d15 	stw	r8,1140(sp)
   20fe4:	d8c11c15 	stw	r3,1136(sp)
   20fe8:	008001c4 	movi	r2,7
   20fec:	10c18e16 	blt	r2,r3,21628 <___vfprintf_internal_r+0x10c8>
   20ff0:	4a400204 	addi	r9,r9,8
   20ff4:	d9012a17 	ldw	r4,1192(sp)
   20ff8:	20000b26 	beq	r4,zero,21028 <___vfprintf_internal_r+0xac8>
   20ffc:	d8812504 	addi	r2,sp,1172
   21000:	48800015 	stw	r2,0(r9)
   21004:	00800084 	movi	r2,2
   21008:	48800115 	stw	r2,4(r9)
   2100c:	4091883a 	add	r8,r8,r2
   21010:	18c00044 	addi	r3,r3,1
   21014:	da011d15 	stw	r8,1140(sp)
   21018:	d8c11c15 	stw	r3,1136(sp)
   2101c:	008001c4 	movi	r2,7
   21020:	10c17816 	blt	r2,r3,21604 <___vfprintf_internal_r+0x10a4>
   21024:	4a400204 	addi	r9,r9,8
   21028:	d9012f17 	ldw	r4,1212(sp)
   2102c:	00802004 	movi	r2,128
   21030:	2080fc26 	beq	r4,r2,21424 <___vfprintf_internal_r+0xec4>
   21034:	d8813117 	ldw	r2,1220(sp)
   21038:	d9012b17 	ldw	r4,1196(sp)
   2103c:	112fc83a 	sub	r23,r2,r4
   21040:	05c02a0e 	bge	zero,r23,210ec <___vfprintf_internal_r+0xb8c>
   21044:	07000404 	movi	fp,16
   21048:	050000f4 	movhi	r20,3
   2104c:	a531f984 	addi	r20,r20,-14362
   21050:	e5c01d0e 	bge	fp,r23,210c8 <___vfprintf_internal_r+0xb68>
   21054:	dc812a15 	stw	r18,1192(sp)
   21058:	058001c4 	movi	r22,7
   2105c:	a025883a 	mov	r18,r20
   21060:	8029883a 	mov	r20,r16
   21064:	dc012917 	ldw	r16,1188(sp)
   21068:	00000306 	br	21078 <___vfprintf_internal_r+0xb18>
   2106c:	bdfffc04 	addi	r23,r23,-16
   21070:	4a400204 	addi	r9,r9,8
   21074:	e5c0110e 	bge	fp,r23,210bc <___vfprintf_internal_r+0xb5c>
   21078:	4c800015 	stw	r18,0(r9)
   2107c:	4f000115 	stw	fp,4(r9)
   21080:	42000404 	addi	r8,r8,16
   21084:	18c00044 	addi	r3,r3,1
   21088:	da011d15 	stw	r8,1140(sp)
   2108c:	d8c11c15 	stw	r3,1136(sp)
   21090:	b0fff60e 	bge	r22,r3,2106c <___vfprintf_internal_r+0xb0c>
   21094:	8809883a 	mov	r4,r17
   21098:	800b883a 	mov	r5,r16
   2109c:	d9811b04 	addi	r6,sp,1132
   210a0:	002052c0 	call	2052c <__sprint_r>
   210a4:	103e741e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   210a8:	bdfffc04 	addi	r23,r23,-16
   210ac:	da011d17 	ldw	r8,1140(sp)
   210b0:	d8c11c17 	ldw	r3,1136(sp)
   210b4:	da400404 	addi	r9,sp,16
   210b8:	e5ffef16 	blt	fp,r23,21078 <___vfprintf_internal_r+0xb18>
   210bc:	a021883a 	mov	r16,r20
   210c0:	9029883a 	mov	r20,r18
   210c4:	dc812a17 	ldw	r18,1192(sp)
   210c8:	4d000015 	stw	r20,0(r9)
   210cc:	4dc00115 	stw	r23,4(r9)
   210d0:	45d1883a 	add	r8,r8,r23
   210d4:	18c00044 	addi	r3,r3,1
   210d8:	da011d15 	stw	r8,1140(sp)
   210dc:	d8c11c15 	stw	r3,1136(sp)
   210e0:	008001c4 	movi	r2,7
   210e4:	10c13e16 	blt	r2,r3,215e0 <___vfprintf_internal_r+0x1080>
   210e8:	4a400204 	addi	r9,r9,8
   210ec:	8080400c 	andi	r2,r16,256
   210f0:	1000831e 	bne	r2,zero,21300 <___vfprintf_internal_r+0xda0>
   210f4:	d8812b17 	ldw	r2,1196(sp)
   210f8:	4cc00015 	stw	r19,0(r9)
   210fc:	48800115 	stw	r2,4(r9)
   21100:	4091883a 	add	r8,r8,r2
   21104:	18c00044 	addi	r3,r3,1
   21108:	da011d15 	stw	r8,1140(sp)
   2110c:	d8c11c15 	stw	r3,1136(sp)
   21110:	008001c4 	movi	r2,7
   21114:	10c05316 	blt	r2,r3,21264 <___vfprintf_internal_r+0xd04>
   21118:	4a400204 	addi	r9,r9,8
   2111c:	8400010c 	andi	r16,r16,4
   21120:	80002e26 	beq	r16,zero,211dc <___vfprintf_internal_r+0xc7c>
   21124:	d8812e17 	ldw	r2,1208(sp)
   21128:	d8c12817 	ldw	r3,1184(sp)
   2112c:	10e1c83a 	sub	r16,r2,r3
   21130:	04002a0e 	bge	zero,r16,211dc <___vfprintf_internal_r+0xc7c>
   21134:	04800404 	movi	r18,16
   21138:	d8c11c17 	ldw	r3,1136(sp)
   2113c:	05c000f4 	movhi	r23,3
   21140:	bdf1f584 	addi	r23,r23,-14378
   21144:	9400170e 	bge	r18,r16,211a4 <___vfprintf_internal_r+0xc44>
   21148:	04c001c4 	movi	r19,7
   2114c:	dd012917 	ldw	r20,1188(sp)
   21150:	00000306 	br	21160 <___vfprintf_internal_r+0xc00>
   21154:	843ffc04 	addi	r16,r16,-16
   21158:	4a400204 	addi	r9,r9,8
   2115c:	9400110e 	bge	r18,r16,211a4 <___vfprintf_internal_r+0xc44>
   21160:	4dc00015 	stw	r23,0(r9)
   21164:	4c800115 	stw	r18,4(r9)
   21168:	42000404 	addi	r8,r8,16
   2116c:	18c00044 	addi	r3,r3,1
   21170:	da011d15 	stw	r8,1140(sp)
   21174:	d8c11c15 	stw	r3,1136(sp)
   21178:	98fff60e 	bge	r19,r3,21154 <___vfprintf_internal_r+0xbf4>
   2117c:	8809883a 	mov	r4,r17
   21180:	a00b883a 	mov	r5,r20
   21184:	d9811b04 	addi	r6,sp,1132
   21188:	002052c0 	call	2052c <__sprint_r>
   2118c:	103e3a1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21190:	843ffc04 	addi	r16,r16,-16
   21194:	da011d17 	ldw	r8,1140(sp)
   21198:	d8c11c17 	ldw	r3,1136(sp)
   2119c:	da400404 	addi	r9,sp,16
   211a0:	943fef16 	blt	r18,r16,21160 <___vfprintf_internal_r+0xc00>
   211a4:	4dc00015 	stw	r23,0(r9)
   211a8:	4c000115 	stw	r16,4(r9)
   211ac:	8211883a 	add	r8,r16,r8
   211b0:	18c00044 	addi	r3,r3,1
   211b4:	da011d15 	stw	r8,1140(sp)
   211b8:	d8c11c15 	stw	r3,1136(sp)
   211bc:	008001c4 	movi	r2,7
   211c0:	10c0060e 	bge	r2,r3,211dc <___vfprintf_internal_r+0xc7c>
   211c4:	d9412917 	ldw	r5,1188(sp)
   211c8:	8809883a 	mov	r4,r17
   211cc:	d9811b04 	addi	r6,sp,1132
   211d0:	002052c0 	call	2052c <__sprint_r>
   211d4:	103e281e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   211d8:	da011d17 	ldw	r8,1140(sp)
   211dc:	dd012817 	ldw	r20,1184(sp)
   211e0:	d9012e17 	ldw	r4,1208(sp)
   211e4:	a100010e 	bge	r20,r4,211ec <___vfprintf_internal_r+0xc8c>
   211e8:	2029883a 	mov	r20,r4
   211ec:	d8812c17 	ldw	r2,1200(sp)
   211f0:	1505883a 	add	r2,r2,r20
   211f4:	d8812c15 	stw	r2,1200(sp)
   211f8:	4000b91e 	bne	r8,zero,214e0 <___vfprintf_internal_r+0xf80>
   211fc:	d8011c15 	stw	zero,1136(sp)
   21200:	a8800007 	ldb	r2,0(r21)
   21204:	da400404 	addi	r9,sp,16
   21208:	103d0d1e 	bne	r2,zero,20640 <___vfprintf_internal_r+0xe0>
   2120c:	a825883a 	mov	r18,r21
   21210:	003d2306 	br	206a0 <___vfprintf_internal_r+0x140>
   21214:	d9412917 	ldw	r5,1188(sp)
   21218:	8809883a 	mov	r4,r17
   2121c:	d9811b04 	addi	r6,sp,1132
   21220:	002052c0 	call	2052c <__sprint_r>
   21224:	103e141e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21228:	da011d17 	ldw	r8,1140(sp)
   2122c:	da400404 	addi	r9,sp,16
   21230:	8080004c 	andi	r2,r16,1
   21234:	103fb926 	beq	r2,zero,2111c <___vfprintf_internal_r+0xbbc>
   21238:	d8c11c17 	ldw	r3,1136(sp)
   2123c:	d9013717 	ldw	r4,1244(sp)
   21240:	00800044 	movi	r2,1
   21244:	48800115 	stw	r2,4(r9)
   21248:	49000015 	stw	r4,0(r9)
   2124c:	4091883a 	add	r8,r8,r2
   21250:	1887883a 	add	r3,r3,r2
   21254:	da011d15 	stw	r8,1140(sp)
   21258:	d8c11c15 	stw	r3,1136(sp)
   2125c:	008001c4 	movi	r2,7
   21260:	10ffad0e 	bge	r2,r3,21118 <___vfprintf_internal_r+0xbb8>
   21264:	d9412917 	ldw	r5,1188(sp)
   21268:	8809883a 	mov	r4,r17
   2126c:	d9811b04 	addi	r6,sp,1132
   21270:	002052c0 	call	2052c <__sprint_r>
   21274:	103e001e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21278:	da400404 	addi	r9,sp,16
   2127c:	da011d17 	ldw	r8,1140(sp)
   21280:	003fa606 	br	2111c <___vfprintf_internal_r+0xbbc>
   21284:	18803fcc 	andi	r2,r3,255
   21288:	00c00044 	movi	r3,1
   2128c:	10c10126 	beq	r2,r3,21694 <___vfprintf_internal_r+0x1134>
   21290:	00c00084 	movi	r3,2
   21294:	10c0ed26 	beq	r2,r3,2164c <___vfprintf_internal_r+0x10ec>
   21298:	d8c10dc4 	addi	r3,sp,1079
   2129c:	b808d0fa 	srli	r4,r23,3
   212a0:	b00a977a 	slli	r5,r22,29
   212a4:	b02cd0fa 	srli	r22,r22,3
   212a8:	bdc001cc 	andi	r23,r23,7
   212ac:	b8800c04 	addi	r2,r23,48
   212b0:	292eb03a 	or	r23,r5,r4
   212b4:	18800005 	stb	r2,0(r3)
   212b8:	bd88b03a 	or	r4,r23,r22
   212bc:	1827883a 	mov	r19,r3
   212c0:	18ffffc4 	addi	r3,r3,-1
   212c4:	203ff51e 	bne	r4,zero,2129c <___vfprintf_internal_r+0xd3c>
   212c8:	8100004c 	andi	r4,r16,1
   212cc:	980b883a 	mov	r5,r19
   212d0:	20000726 	beq	r4,zero,212f0 <___vfprintf_internal_r+0xd90>
   212d4:	10803fcc 	andi	r2,r2,255
   212d8:	1080201c 	xori	r2,r2,128
   212dc:	10bfe004 	addi	r2,r2,-128
   212e0:	01000c04 	movi	r4,48
   212e4:	11000226 	beq	r2,r4,212f0 <___vfprintf_internal_r+0xd90>
   212e8:	1827883a 	mov	r19,r3
   212ec:	293fffc5 	stb	r4,-1(r5)
   212f0:	d8812717 	ldw	r2,1180(sp)
   212f4:	14c5c83a 	sub	r2,r2,r19
   212f8:	d8812b15 	stw	r2,1196(sp)
   212fc:	003e1f06 	br	20b7c <___vfprintf_internal_r+0x61c>
   21300:	00801944 	movi	r2,101
   21304:	14807c0e 	bge	r2,r18,214f8 <___vfprintf_internal_r+0xf98>
   21308:	d9013317 	ldw	r4,1228(sp)
   2130c:	d9413417 	ldw	r5,1232(sp)
   21310:	000d883a 	mov	r6,zero
   21314:	000f883a 	mov	r7,zero
   21318:	d8c13b15 	stw	r3,1260(sp)
   2131c:	da013a15 	stw	r8,1256(sp)
   21320:	da413c15 	stw	r9,1264(sp)
   21324:	0028e680 	call	28e68 <__eqdf2>
   21328:	d8c13b17 	ldw	r3,1260(sp)
   2132c:	da013a17 	ldw	r8,1256(sp)
   21330:	da413c17 	ldw	r9,1264(sp)
   21334:	1001001e 	bne	r2,zero,21738 <___vfprintf_internal_r+0x11d8>
   21338:	008000f4 	movhi	r2,3
   2133c:	10b1f504 	addi	r2,r2,-14380
   21340:	48800015 	stw	r2,0(r9)
   21344:	00800044 	movi	r2,1
   21348:	48800115 	stw	r2,4(r9)
   2134c:	4091883a 	add	r8,r8,r2
   21350:	1887883a 	add	r3,r3,r2
   21354:	da011d15 	stw	r8,1140(sp)
   21358:	d8c11c15 	stw	r3,1136(sp)
   2135c:	008001c4 	movi	r2,7
   21360:	10c20316 	blt	r2,r3,21b70 <___vfprintf_internal_r+0x1610>
   21364:	4a400204 	addi	r9,r9,8
   21368:	d8812417 	ldw	r2,1168(sp)
   2136c:	d8c13217 	ldw	r3,1224(sp)
   21370:	10c00216 	blt	r2,r3,2137c <___vfprintf_internal_r+0xe1c>
   21374:	8080004c 	andi	r2,r16,1
   21378:	103f6826 	beq	r2,zero,2111c <___vfprintf_internal_r+0xbbc>
   2137c:	d8c11c17 	ldw	r3,1136(sp)
   21380:	d9013717 	ldw	r4,1244(sp)
   21384:	00800044 	movi	r2,1
   21388:	48800115 	stw	r2,4(r9)
   2138c:	49000015 	stw	r4,0(r9)
   21390:	4091883a 	add	r8,r8,r2
   21394:	1887883a 	add	r3,r3,r2
   21398:	da011d15 	stw	r8,1140(sp)
   2139c:	d8c11c15 	stw	r3,1136(sp)
   213a0:	008001c4 	movi	r2,7
   213a4:	10c2ce16 	blt	r2,r3,21ee0 <___vfprintf_internal_r+0x1980>
   213a8:	4a400204 	addi	r9,r9,8
   213ac:	d8813217 	ldw	r2,1224(sp)
   213b0:	14bfffc4 	addi	r18,r2,-1
   213b4:	04bf590e 	bge	zero,r18,2111c <___vfprintf_internal_r+0xbbc>
   213b8:	04c00404 	movi	r19,16
   213bc:	d8c11c17 	ldw	r3,1136(sp)
   213c0:	050000f4 	movhi	r20,3
   213c4:	a531f984 	addi	r20,r20,-14362
   213c8:	9c818a0e 	bge	r19,r18,219f4 <___vfprintf_internal_r+0x1494>
   213cc:	058001c4 	movi	r22,7
   213d0:	ddc12917 	ldw	r23,1188(sp)
   213d4:	00000306 	br	213e4 <___vfprintf_internal_r+0xe84>
   213d8:	4a400204 	addi	r9,r9,8
   213dc:	94bffc04 	addi	r18,r18,-16
   213e0:	9c81840e 	bge	r19,r18,219f4 <___vfprintf_internal_r+0x1494>
   213e4:	4d000015 	stw	r20,0(r9)
   213e8:	4cc00115 	stw	r19,4(r9)
   213ec:	42000404 	addi	r8,r8,16
   213f0:	18c00044 	addi	r3,r3,1
   213f4:	da011d15 	stw	r8,1140(sp)
   213f8:	d8c11c15 	stw	r3,1136(sp)
   213fc:	b0fff60e 	bge	r22,r3,213d8 <___vfprintf_internal_r+0xe78>
   21400:	8809883a 	mov	r4,r17
   21404:	b80b883a 	mov	r5,r23
   21408:	d9811b04 	addi	r6,sp,1132
   2140c:	002052c0 	call	2052c <__sprint_r>
   21410:	103d991e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21414:	da011d17 	ldw	r8,1140(sp)
   21418:	d8c11c17 	ldw	r3,1136(sp)
   2141c:	da400404 	addi	r9,sp,16
   21420:	003fee06 	br	213dc <___vfprintf_internal_r+0xe7c>
   21424:	d8812e17 	ldw	r2,1208(sp)
   21428:	d9012817 	ldw	r4,1184(sp)
   2142c:	112fc83a 	sub	r23,r2,r4
   21430:	05ff000e 	bge	zero,r23,21034 <___vfprintf_internal_r+0xad4>
   21434:	07000404 	movi	fp,16
   21438:	050000f4 	movhi	r20,3
   2143c:	a531f984 	addi	r20,r20,-14362
   21440:	e5c01d0e 	bge	fp,r23,214b8 <___vfprintf_internal_r+0xf58>
   21444:	dc812a15 	stw	r18,1192(sp)
   21448:	058001c4 	movi	r22,7
   2144c:	a025883a 	mov	r18,r20
   21450:	8029883a 	mov	r20,r16
   21454:	dc012917 	ldw	r16,1188(sp)
   21458:	00000306 	br	21468 <___vfprintf_internal_r+0xf08>
   2145c:	bdfffc04 	addi	r23,r23,-16
   21460:	4a400204 	addi	r9,r9,8
   21464:	e5c0110e 	bge	fp,r23,214ac <___vfprintf_internal_r+0xf4c>
   21468:	4c800015 	stw	r18,0(r9)
   2146c:	4f000115 	stw	fp,4(r9)
   21470:	42000404 	addi	r8,r8,16
   21474:	18c00044 	addi	r3,r3,1
   21478:	da011d15 	stw	r8,1140(sp)
   2147c:	d8c11c15 	stw	r3,1136(sp)
   21480:	b0fff60e 	bge	r22,r3,2145c <___vfprintf_internal_r+0xefc>
   21484:	8809883a 	mov	r4,r17
   21488:	800b883a 	mov	r5,r16
   2148c:	d9811b04 	addi	r6,sp,1132
   21490:	002052c0 	call	2052c <__sprint_r>
   21494:	103d781e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21498:	bdfffc04 	addi	r23,r23,-16
   2149c:	da011d17 	ldw	r8,1140(sp)
   214a0:	d8c11c17 	ldw	r3,1136(sp)
   214a4:	da400404 	addi	r9,sp,16
   214a8:	e5ffef16 	blt	fp,r23,21468 <___vfprintf_internal_r+0xf08>
   214ac:	a021883a 	mov	r16,r20
   214b0:	9029883a 	mov	r20,r18
   214b4:	dc812a17 	ldw	r18,1192(sp)
   214b8:	4d000015 	stw	r20,0(r9)
   214bc:	4dc00115 	stw	r23,4(r9)
   214c0:	45d1883a 	add	r8,r8,r23
   214c4:	18c00044 	addi	r3,r3,1
   214c8:	da011d15 	stw	r8,1140(sp)
   214cc:	d8c11c15 	stw	r3,1136(sp)
   214d0:	008001c4 	movi	r2,7
   214d4:	10c13616 	blt	r2,r3,219b0 <___vfprintf_internal_r+0x1450>
   214d8:	4a400204 	addi	r9,r9,8
   214dc:	003ed506 	br	21034 <___vfprintf_internal_r+0xad4>
   214e0:	d9412917 	ldw	r5,1188(sp)
   214e4:	8809883a 	mov	r4,r17
   214e8:	d9811b04 	addi	r6,sp,1132
   214ec:	002052c0 	call	2052c <__sprint_r>
   214f0:	103f4226 	beq	r2,zero,211fc <___vfprintf_internal_r+0xc9c>
   214f4:	003d6006 	br	20a78 <___vfprintf_internal_r+0x518>
   214f8:	d9013217 	ldw	r4,1224(sp)
   214fc:	00800044 	movi	r2,1
   21500:	4cc00015 	stw	r19,0(r9)
   21504:	1101000e 	bge	r2,r4,21908 <___vfprintf_internal_r+0x13a8>
   21508:	00800044 	movi	r2,1
   2150c:	48800115 	stw	r2,4(r9)
   21510:	4091883a 	add	r8,r8,r2
   21514:	1887883a 	add	r3,r3,r2
   21518:	da011d15 	stw	r8,1140(sp)
   2151c:	d8c11c15 	stw	r3,1136(sp)
   21520:	008001c4 	movi	r2,7
   21524:	10c10c16 	blt	r2,r3,21958 <___vfprintf_internal_r+0x13f8>
   21528:	4a400204 	addi	r9,r9,8
   2152c:	d8813717 	ldw	r2,1244(sp)
   21530:	48800015 	stw	r2,0(r9)
   21534:	00800044 	movi	r2,1
   21538:	48800115 	stw	r2,4(r9)
   2153c:	4091883a 	add	r8,r8,r2
   21540:	1887883a 	add	r3,r3,r2
   21544:	da011d15 	stw	r8,1140(sp)
   21548:	d8c11c15 	stw	r3,1136(sp)
   2154c:	008001c4 	movi	r2,7
   21550:	10c10a16 	blt	r2,r3,2197c <___vfprintf_internal_r+0x141c>
   21554:	4c800204 	addi	r18,r9,8
   21558:	d9013317 	ldw	r4,1228(sp)
   2155c:	d9413417 	ldw	r5,1232(sp)
   21560:	000d883a 	mov	r6,zero
   21564:	000f883a 	mov	r7,zero
   21568:	d8c13b15 	stw	r3,1260(sp)
   2156c:	da013a15 	stw	r8,1256(sp)
   21570:	0028ec40 	call	28ec4 <__nedf2>
   21574:	d8c13b17 	ldw	r3,1260(sp)
   21578:	da013a17 	ldw	r8,1256(sp)
   2157c:	1000ba26 	beq	r2,zero,21868 <___vfprintf_internal_r+0x1308>
   21580:	d9013217 	ldw	r4,1224(sp)
   21584:	9cc00044 	addi	r19,r19,1
   21588:	94c00015 	stw	r19,0(r18)
   2158c:	20bfffc4 	addi	r2,r4,-1
   21590:	90800115 	stw	r2,4(r18)
   21594:	4091883a 	add	r8,r8,r2
   21598:	18c00044 	addi	r3,r3,1
   2159c:	da011d15 	stw	r8,1140(sp)
   215a0:	d8c11c15 	stw	r3,1136(sp)
   215a4:	008001c4 	movi	r2,7
   215a8:	10c0e216 	blt	r2,r3,21934 <___vfprintf_internal_r+0x13d4>
   215ac:	94800204 	addi	r18,r18,8
   215b0:	d9013517 	ldw	r4,1236(sp)
   215b4:	d8811fc4 	addi	r2,sp,1151
   215b8:	90800015 	stw	r2,0(r18)
   215bc:	91000115 	stw	r4,4(r18)
   215c0:	4111883a 	add	r8,r8,r4
   215c4:	18c00044 	addi	r3,r3,1
   215c8:	da011d15 	stw	r8,1140(sp)
   215cc:	d8c11c15 	stw	r3,1136(sp)
   215d0:	008001c4 	movi	r2,7
   215d4:	10ff2316 	blt	r2,r3,21264 <___vfprintf_internal_r+0xd04>
   215d8:	92400204 	addi	r9,r18,8
   215dc:	003ecf06 	br	2111c <___vfprintf_internal_r+0xbbc>
   215e0:	d9412917 	ldw	r5,1188(sp)
   215e4:	8809883a 	mov	r4,r17
   215e8:	d9811b04 	addi	r6,sp,1132
   215ec:	002052c0 	call	2052c <__sprint_r>
   215f0:	103d211e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   215f4:	da011d17 	ldw	r8,1140(sp)
   215f8:	d8c11c17 	ldw	r3,1136(sp)
   215fc:	da400404 	addi	r9,sp,16
   21600:	003eba06 	br	210ec <___vfprintf_internal_r+0xb8c>
   21604:	d9412917 	ldw	r5,1188(sp)
   21608:	8809883a 	mov	r4,r17
   2160c:	d9811b04 	addi	r6,sp,1132
   21610:	002052c0 	call	2052c <__sprint_r>
   21614:	103d181e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21618:	da011d17 	ldw	r8,1140(sp)
   2161c:	d8c11c17 	ldw	r3,1136(sp)
   21620:	da400404 	addi	r9,sp,16
   21624:	003e8006 	br	21028 <___vfprintf_internal_r+0xac8>
   21628:	d9412917 	ldw	r5,1188(sp)
   2162c:	8809883a 	mov	r4,r17
   21630:	d9811b04 	addi	r6,sp,1132
   21634:	002052c0 	call	2052c <__sprint_r>
   21638:	103d0f1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   2163c:	da011d17 	ldw	r8,1140(sp)
   21640:	d8c11c17 	ldw	r3,1136(sp)
   21644:	da400404 	addi	r9,sp,16
   21648:	003e6a06 	br	20ff4 <___vfprintf_internal_r+0xa94>
   2164c:	d9413617 	ldw	r5,1240(sp)
   21650:	d8810dc4 	addi	r2,sp,1079
   21654:	b8c003cc 	andi	r3,r23,15
   21658:	b008973a 	slli	r4,r22,28
   2165c:	28c7883a 	add	r3,r5,r3
   21660:	b82ed13a 	srli	r23,r23,4
   21664:	18c00003 	ldbu	r3,0(r3)
   21668:	b02cd13a 	srli	r22,r22,4
   2166c:	25eeb03a 	or	r23,r4,r23
   21670:	10c00005 	stb	r3,0(r2)
   21674:	bd86b03a 	or	r3,r23,r22
   21678:	1027883a 	mov	r19,r2
   2167c:	10bfffc4 	addi	r2,r2,-1
   21680:	183ff41e 	bne	r3,zero,21654 <___vfprintf_internal_r+0x10f4>
   21684:	003f1a06 	br	212f0 <___vfprintf_internal_r+0xd90>
   21688:	d8012b15 	stw	zero,1196(sp)
   2168c:	dcc10e04 	addi	r19,sp,1080
   21690:	003d3a06 	br	20b7c <___vfprintf_internal_r+0x61c>
   21694:	b0025426 	beq	r22,zero,21fe8 <___vfprintf_internal_r+0x1a88>
   21698:	b807883a 	mov	r3,r23
   2169c:	d8810dc4 	addi	r2,sp,1079
   216a0:	882f883a 	mov	r23,r17
   216a4:	04c00244 	movi	r19,9
   216a8:	8023883a 	mov	r17,r16
   216ac:	da412815 	stw	r9,1184(sp)
   216b0:	1821883a 	mov	r16,r3
   216b4:	8009883a 	mov	r4,r16
   216b8:	b00b883a 	mov	r5,r22
   216bc:	01800284 	movi	r6,10
   216c0:	000f883a 	mov	r7,zero
   216c4:	1029883a 	mov	r20,r2
   216c8:	0027fa00 	call	27fa0 <__umoddi3>
   216cc:	10800c04 	addi	r2,r2,48
   216d0:	8009883a 	mov	r4,r16
   216d4:	b00b883a 	mov	r5,r22
   216d8:	a0800005 	stb	r2,0(r20)
   216dc:	01800284 	movi	r6,10
   216e0:	000f883a 	mov	r7,zero
   216e4:	00279500 	call	27950 <__udivdi3>
   216e8:	1021883a 	mov	r16,r2
   216ec:	182d883a 	mov	r22,r3
   216f0:	a0bfffc4 	addi	r2,r20,-1
   216f4:	183fef1e 	bne	r3,zero,216b4 <___vfprintf_internal_r+0x1154>
   216f8:	9c3fee36 	bltu	r19,r16,216b4 <___vfprintf_internal_r+0x1154>
   216fc:	da412817 	ldw	r9,1184(sp)
   21700:	8005883a 	mov	r2,r16
   21704:	8821883a 	mov	r16,r17
   21708:	b823883a 	mov	r17,r23
   2170c:	102f883a 	mov	r23,r2
   21710:	d8812717 	ldw	r2,1180(sp)
   21714:	a4ffffc4 	addi	r19,r20,-1
   21718:	bdc00c04 	addi	r23,r23,48
   2171c:	14c5c83a 	sub	r2,r2,r19
   21720:	a5ffffc5 	stb	r23,-1(r20)
   21724:	d8812b15 	stw	r2,1196(sp)
   21728:	003d1406 	br	20b7c <___vfprintf_internal_r+0x61c>
   2172c:	00c00044 	movi	r3,1
   21730:	bd84b03a 	or	r2,r23,r22
   21734:	003d0306 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21738:	dc812417 	ldw	r18,1168(sp)
   2173c:	0481140e 	bge	zero,r18,21b90 <___vfprintf_internal_r+0x1630>
   21740:	d9013217 	ldw	r4,1224(sp)
   21744:	4cc00015 	stw	r19,0(r9)
   21748:	9100ec16 	blt	r18,r4,21afc <___vfprintf_internal_r+0x159c>
   2174c:	49000115 	stw	r4,4(r9)
   21750:	4111883a 	add	r8,r8,r4
   21754:	18c00044 	addi	r3,r3,1
   21758:	da011d15 	stw	r8,1140(sp)
   2175c:	d8c11c15 	stw	r3,1136(sp)
   21760:	008001c4 	movi	r2,7
   21764:	10c23616 	blt	r2,r3,22040 <___vfprintf_internal_r+0x1ae0>
   21768:	4a400204 	addi	r9,r9,8
   2176c:	d8813217 	ldw	r2,1224(sp)
   21770:	90a5c83a 	sub	r18,r18,r2
   21774:	04beae0e 	bge	zero,r18,21230 <___vfprintf_internal_r+0xcd0>
   21778:	04c00404 	movi	r19,16
   2177c:	d8c11c17 	ldw	r3,1136(sp)
   21780:	050000f4 	movhi	r20,3
   21784:	a531f984 	addi	r20,r20,-14362
   21788:	9c81dd0e 	bge	r19,r18,21f00 <___vfprintf_internal_r+0x19a0>
   2178c:	058001c4 	movi	r22,7
   21790:	ddc12917 	ldw	r23,1188(sp)
   21794:	00000306 	br	217a4 <___vfprintf_internal_r+0x1244>
   21798:	4a400204 	addi	r9,r9,8
   2179c:	94bffc04 	addi	r18,r18,-16
   217a0:	9c81d70e 	bge	r19,r18,21f00 <___vfprintf_internal_r+0x19a0>
   217a4:	4d000015 	stw	r20,0(r9)
   217a8:	4cc00115 	stw	r19,4(r9)
   217ac:	42000404 	addi	r8,r8,16
   217b0:	18c00044 	addi	r3,r3,1
   217b4:	da011d15 	stw	r8,1140(sp)
   217b8:	d8c11c15 	stw	r3,1136(sp)
   217bc:	b0fff60e 	bge	r22,r3,21798 <___vfprintf_internal_r+0x1238>
   217c0:	8809883a 	mov	r4,r17
   217c4:	b80b883a 	mov	r5,r23
   217c8:	d9811b04 	addi	r6,sp,1132
   217cc:	002052c0 	call	2052c <__sprint_r>
   217d0:	103ca91e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   217d4:	da011d17 	ldw	r8,1140(sp)
   217d8:	d8c11c17 	ldw	r3,1136(sp)
   217dc:	da400404 	addi	r9,sp,16
   217e0:	003fee06 	br	2179c <___vfprintf_internal_r+0x123c>
   217e4:	d9412917 	ldw	r5,1188(sp)
   217e8:	8809883a 	mov	r4,r17
   217ec:	d9811b04 	addi	r6,sp,1132
   217f0:	002052c0 	call	2052c <__sprint_r>
   217f4:	103ca01e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   217f8:	da011d17 	ldw	r8,1140(sp)
   217fc:	d8c11c17 	ldw	r3,1136(sp)
   21800:	da400404 	addi	r9,sp,16
   21804:	003dee06 	br	20fc0 <___vfprintf_internal_r+0xa60>
   21808:	00c00084 	movi	r3,2
   2180c:	bd84b03a 	or	r2,r23,r22
   21810:	d8012585 	stb	zero,1174(sp)
   21814:	003ccb06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21818:	8080040c 	andi	r2,r16,16
   2181c:	1000ae26 	beq	r2,zero,21ad8 <___vfprintf_internal_r+0x1578>
   21820:	d9012d17 	ldw	r4,1204(sp)
   21824:	25c00017 	ldw	r23,0(r4)
   21828:	21000104 	addi	r4,r4,4
   2182c:	d9012d15 	stw	r4,1204(sp)
   21830:	b82dd7fa 	srai	r22,r23,31
   21834:	b005883a 	mov	r2,r22
   21838:	003cb906 	br	20b20 <___vfprintf_internal_r+0x5c0>
   2183c:	8080040c 	andi	r2,r16,16
   21840:	10007026 	beq	r2,zero,21a04 <___vfprintf_internal_r+0x14a4>
   21844:	d8812d17 	ldw	r2,1204(sp)
   21848:	002d883a 	mov	r22,zero
   2184c:	00c00044 	movi	r3,1
   21850:	15c00017 	ldw	r23,0(r2)
   21854:	10800104 	addi	r2,r2,4
   21858:	d8812d15 	stw	r2,1204(sp)
   2185c:	d8012585 	stb	zero,1174(sp)
   21860:	b805883a 	mov	r2,r23
   21864:	003cb706 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21868:	d8813217 	ldw	r2,1224(sp)
   2186c:	14ffffc4 	addi	r19,r2,-1
   21870:	04ff4f0e 	bge	zero,r19,215b0 <___vfprintf_internal_r+0x1050>
   21874:	05800404 	movi	r22,16
   21878:	050000f4 	movhi	r20,3
   2187c:	a531f984 	addi	r20,r20,-14362
   21880:	b4c0470e 	bge	r22,r19,219a0 <___vfprintf_internal_r+0x1440>
   21884:	05c001c4 	movi	r23,7
   21888:	df012917 	ldw	fp,1188(sp)
   2188c:	00000306 	br	2189c <___vfprintf_internal_r+0x133c>
   21890:	94800204 	addi	r18,r18,8
   21894:	9cfffc04 	addi	r19,r19,-16
   21898:	b4c0410e 	bge	r22,r19,219a0 <___vfprintf_internal_r+0x1440>
   2189c:	95000015 	stw	r20,0(r18)
   218a0:	95800115 	stw	r22,4(r18)
   218a4:	42000404 	addi	r8,r8,16
   218a8:	18c00044 	addi	r3,r3,1
   218ac:	da011d15 	stw	r8,1140(sp)
   218b0:	d8c11c15 	stw	r3,1136(sp)
   218b4:	b8fff60e 	bge	r23,r3,21890 <___vfprintf_internal_r+0x1330>
   218b8:	8809883a 	mov	r4,r17
   218bc:	e00b883a 	mov	r5,fp
   218c0:	d9811b04 	addi	r6,sp,1132
   218c4:	002052c0 	call	2052c <__sprint_r>
   218c8:	103c6b1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   218cc:	da011d17 	ldw	r8,1140(sp)
   218d0:	d8c11c17 	ldw	r3,1136(sp)
   218d4:	dc800404 	addi	r18,sp,16
   218d8:	003fee06 	br	21894 <___vfprintf_internal_r+0x1334>
   218dc:	8080040c 	andi	r2,r16,16
   218e0:	10005326 	beq	r2,zero,21a30 <___vfprintf_internal_r+0x14d0>
   218e4:	d8c12d17 	ldw	r3,1204(sp)
   218e8:	002d883a 	mov	r22,zero
   218ec:	1dc00017 	ldw	r23,0(r3)
   218f0:	18c00104 	addi	r3,r3,4
   218f4:	d8c12d15 	stw	r3,1204(sp)
   218f8:	b805883a 	mov	r2,r23
   218fc:	0007883a 	mov	r3,zero
   21900:	d8012585 	stb	zero,1174(sp)
   21904:	003c8f06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21908:	8088703a 	and	r4,r16,r2
   2190c:	203efe1e 	bne	r4,zero,21508 <___vfprintf_internal_r+0xfa8>
   21910:	48800115 	stw	r2,4(r9)
   21914:	42000044 	addi	r8,r8,1
   21918:	18c00044 	addi	r3,r3,1
   2191c:	da011d15 	stw	r8,1140(sp)
   21920:	d8c11c15 	stw	r3,1136(sp)
   21924:	008001c4 	movi	r2,7
   21928:	10c00216 	blt	r2,r3,21934 <___vfprintf_internal_r+0x13d4>
   2192c:	4c800204 	addi	r18,r9,8
   21930:	003f1f06 	br	215b0 <___vfprintf_internal_r+0x1050>
   21934:	d9412917 	ldw	r5,1188(sp)
   21938:	8809883a 	mov	r4,r17
   2193c:	d9811b04 	addi	r6,sp,1132
   21940:	002052c0 	call	2052c <__sprint_r>
   21944:	103c4c1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21948:	dc800404 	addi	r18,sp,16
   2194c:	da011d17 	ldw	r8,1140(sp)
   21950:	d8c11c17 	ldw	r3,1136(sp)
   21954:	003f1606 	br	215b0 <___vfprintf_internal_r+0x1050>
   21958:	d9412917 	ldw	r5,1188(sp)
   2195c:	8809883a 	mov	r4,r17
   21960:	d9811b04 	addi	r6,sp,1132
   21964:	002052c0 	call	2052c <__sprint_r>
   21968:	103c431e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   2196c:	da011d17 	ldw	r8,1140(sp)
   21970:	d8c11c17 	ldw	r3,1136(sp)
   21974:	da400404 	addi	r9,sp,16
   21978:	003eec06 	br	2152c <___vfprintf_internal_r+0xfcc>
   2197c:	d9412917 	ldw	r5,1188(sp)
   21980:	8809883a 	mov	r4,r17
   21984:	d9811b04 	addi	r6,sp,1132
   21988:	002052c0 	call	2052c <__sprint_r>
   2198c:	103c3a1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21990:	da011d17 	ldw	r8,1140(sp)
   21994:	d8c11c17 	ldw	r3,1136(sp)
   21998:	dc800404 	addi	r18,sp,16
   2199c:	003eee06 	br	21558 <___vfprintf_internal_r+0xff8>
   219a0:	95000015 	stw	r20,0(r18)
   219a4:	94c00115 	stw	r19,4(r18)
   219a8:	44d1883a 	add	r8,r8,r19
   219ac:	003efa06 	br	21598 <___vfprintf_internal_r+0x1038>
   219b0:	d9412917 	ldw	r5,1188(sp)
   219b4:	8809883a 	mov	r4,r17
   219b8:	d9811b04 	addi	r6,sp,1132
   219bc:	002052c0 	call	2052c <__sprint_r>
   219c0:	103c2d1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   219c4:	da011d17 	ldw	r8,1140(sp)
   219c8:	d8c11c17 	ldw	r3,1136(sp)
   219cc:	da400404 	addi	r9,sp,16
   219d0:	003d9806 	br	21034 <___vfprintf_internal_r+0xad4>
   219d4:	8080100c 	andi	r2,r16,64
   219d8:	10011626 	beq	r2,zero,21e34 <___vfprintf_internal_r+0x18d4>
   219dc:	d8c12d17 	ldw	r3,1204(sp)
   219e0:	002d883a 	mov	r22,zero
   219e4:	1dc0000b 	ldhu	r23,0(r3)
   219e8:	18c00104 	addi	r3,r3,4
   219ec:	d8c12d15 	stw	r3,1204(sp)
   219f0:	003cc106 	br	20cf8 <___vfprintf_internal_r+0x798>
   219f4:	4d000015 	stw	r20,0(r9)
   219f8:	4c800115 	stw	r18,4(r9)
   219fc:	4491883a 	add	r8,r8,r18
   21a00:	003dc006 	br	21104 <___vfprintf_internal_r+0xba4>
   21a04:	8080100c 	andi	r2,r16,64
   21a08:	10010126 	beq	r2,zero,21e10 <___vfprintf_internal_r+0x18b0>
   21a0c:	d8c12d17 	ldw	r3,1204(sp)
   21a10:	002d883a 	mov	r22,zero
   21a14:	1dc0000b 	ldhu	r23,0(r3)
   21a18:	18c00104 	addi	r3,r3,4
   21a1c:	d8c12d15 	stw	r3,1204(sp)
   21a20:	b805883a 	mov	r2,r23
   21a24:	00c00044 	movi	r3,1
   21a28:	d8012585 	stb	zero,1174(sp)
   21a2c:	003c4506 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21a30:	8080100c 	andi	r2,r16,64
   21a34:	10010526 	beq	r2,zero,21e4c <___vfprintf_internal_r+0x18ec>
   21a38:	d9012d17 	ldw	r4,1204(sp)
   21a3c:	002d883a 	mov	r22,zero
   21a40:	0007883a 	mov	r3,zero
   21a44:	25c0000b 	ldhu	r23,0(r4)
   21a48:	21000104 	addi	r4,r4,4
   21a4c:	d9012d15 	stw	r4,1204(sp)
   21a50:	b805883a 	mov	r2,r23
   21a54:	d8012585 	stb	zero,1174(sp)
   21a58:	003c3a06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21a5c:	d8812d17 	ldw	r2,1204(sp)
   21a60:	15800017 	ldw	r22,0(r2)
   21a64:	15000117 	ldw	r20,4(r2)
   21a68:	10800204 	addi	r2,r2,8
   21a6c:	d8812d15 	stw	r2,1204(sp)
   21a70:	dd813315 	stw	r22,1228(sp)
   21a74:	dd013415 	stw	r20,1232(sp)
   21a78:	003c5906 	br	20be0 <___vfprintf_internal_r+0x680>
   21a7c:	00c00084 	movi	r3,2
   21a80:	d8012585 	stb	zero,1174(sp)
   21a84:	003c2f06 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21a88:	ac800007 	ldb	r18,0(r21)
   21a8c:	003b1006 	br	206d0 <___vfprintf_internal_r+0x170>
   21a90:	8080040c 	andi	r2,r16,16
   21a94:	1000091e 	bne	r2,zero,21abc <___vfprintf_internal_r+0x155c>
   21a98:	8400100c 	andi	r16,r16,64
   21a9c:	80000726 	beq	r16,zero,21abc <___vfprintf_internal_r+0x155c>
   21aa0:	d8c12d17 	ldw	r3,1204(sp)
   21aa4:	d9012c17 	ldw	r4,1200(sp)
   21aa8:	18800017 	ldw	r2,0(r3)
   21aac:	18c00104 	addi	r3,r3,4
   21ab0:	d8c12d15 	stw	r3,1204(sp)
   21ab4:	1100000d 	sth	r4,0(r2)
   21ab8:	003adf06 	br	20638 <___vfprintf_internal_r+0xd8>
   21abc:	d8c12d17 	ldw	r3,1204(sp)
   21ac0:	d9012c17 	ldw	r4,1200(sp)
   21ac4:	18800017 	ldw	r2,0(r3)
   21ac8:	18c00104 	addi	r3,r3,4
   21acc:	d8c12d15 	stw	r3,1204(sp)
   21ad0:	11000015 	stw	r4,0(r2)
   21ad4:	003ad806 	br	20638 <___vfprintf_internal_r+0xd8>
   21ad8:	8080100c 	andi	r2,r16,64
   21adc:	1000c526 	beq	r2,zero,21df4 <___vfprintf_internal_r+0x1894>
   21ae0:	d8812d17 	ldw	r2,1204(sp)
   21ae4:	15c0000f 	ldh	r23,0(r2)
   21ae8:	10800104 	addi	r2,r2,4
   21aec:	d8812d15 	stw	r2,1204(sp)
   21af0:	b82dd7fa 	srai	r22,r23,31
   21af4:	b005883a 	mov	r2,r22
   21af8:	003c0906 	br	20b20 <___vfprintf_internal_r+0x5c0>
   21afc:	4c800115 	stw	r18,4(r9)
   21b00:	9211883a 	add	r8,r18,r8
   21b04:	18c00044 	addi	r3,r3,1
   21b08:	da011d15 	stw	r8,1140(sp)
   21b0c:	d8c11c15 	stw	r3,1136(sp)
   21b10:	008001c4 	movi	r2,7
   21b14:	10c14016 	blt	r2,r3,22018 <___vfprintf_internal_r+0x1ab8>
   21b18:	4a400204 	addi	r9,r9,8
   21b1c:	d8813717 	ldw	r2,1244(sp)
   21b20:	9ca7883a 	add	r19,r19,r18
   21b24:	48800015 	stw	r2,0(r9)
   21b28:	00800044 	movi	r2,1
   21b2c:	48800115 	stw	r2,4(r9)
   21b30:	4091883a 	add	r8,r8,r2
   21b34:	1887883a 	add	r3,r3,r2
   21b38:	da011d15 	stw	r8,1140(sp)
   21b3c:	d8c11c15 	stw	r3,1136(sp)
   21b40:	008001c4 	movi	r2,7
   21b44:	10c12c16 	blt	r2,r3,21ff8 <___vfprintf_internal_r+0x1a98>
   21b48:	4a400204 	addi	r9,r9,8
   21b4c:	d9013217 	ldw	r4,1224(sp)
   21b50:	da011d17 	ldw	r8,1140(sp)
   21b54:	d8c11c17 	ldw	r3,1136(sp)
   21b58:	24a5c83a 	sub	r18,r4,r18
   21b5c:	4cc00015 	stw	r19,0(r9)
   21b60:	003fa506 	br	219f8 <___vfprintf_internal_r+0x1498>
   21b64:	04c000f4 	movhi	r19,3
   21b68:	9cf1e604 	addi	r19,r19,-14440
   21b6c:	003c2e06 	br	20c28 <___vfprintf_internal_r+0x6c8>
   21b70:	d9412917 	ldw	r5,1188(sp)
   21b74:	8809883a 	mov	r4,r17
   21b78:	d9811b04 	addi	r6,sp,1132
   21b7c:	002052c0 	call	2052c <__sprint_r>
   21b80:	103bbd1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21b84:	da011d17 	ldw	r8,1140(sp)
   21b88:	da400404 	addi	r9,sp,16
   21b8c:	003df606 	br	21368 <___vfprintf_internal_r+0xe08>
   21b90:	008000f4 	movhi	r2,3
   21b94:	10b1f504 	addi	r2,r2,-14380
   21b98:	48800015 	stw	r2,0(r9)
   21b9c:	00800044 	movi	r2,1
   21ba0:	48800115 	stw	r2,4(r9)
   21ba4:	4091883a 	add	r8,r8,r2
   21ba8:	1887883a 	add	r3,r3,r2
   21bac:	da011d15 	stw	r8,1140(sp)
   21bb0:	d8c11c15 	stw	r3,1136(sp)
   21bb4:	008001c4 	movi	r2,7
   21bb8:	10c0bc16 	blt	r2,r3,21eac <___vfprintf_internal_r+0x194c>
   21bbc:	4a400204 	addi	r9,r9,8
   21bc0:	9000041e 	bne	r18,zero,21bd4 <___vfprintf_internal_r+0x1674>
   21bc4:	d8c13217 	ldw	r3,1224(sp)
   21bc8:	1800021e 	bne	r3,zero,21bd4 <___vfprintf_internal_r+0x1674>
   21bcc:	8080004c 	andi	r2,r16,1
   21bd0:	103d5226 	beq	r2,zero,2111c <___vfprintf_internal_r+0xbbc>
   21bd4:	d8c11c17 	ldw	r3,1136(sp)
   21bd8:	d9013717 	ldw	r4,1244(sp)
   21bdc:	00800044 	movi	r2,1
   21be0:	48800115 	stw	r2,4(r9)
   21be4:	49000015 	stw	r4,0(r9)
   21be8:	4091883a 	add	r8,r8,r2
   21bec:	1887883a 	add	r3,r3,r2
   21bf0:	da011d15 	stw	r8,1140(sp)
   21bf4:	d8c11c15 	stw	r3,1136(sp)
   21bf8:	008001c4 	movi	r2,7
   21bfc:	10c14516 	blt	r2,r3,22114 <___vfprintf_internal_r+0x1bb4>
   21c00:	4a400204 	addi	r9,r9,8
   21c04:	04a5c83a 	sub	r18,zero,r18
   21c08:	0480d70e 	bge	zero,r18,21f68 <___vfprintf_internal_r+0x1a08>
   21c0c:	05800404 	movi	r22,16
   21c10:	050000f4 	movhi	r20,3
   21c14:	a531f984 	addi	r20,r20,-14362
   21c18:	b480db0e 	bge	r22,r18,21f88 <___vfprintf_internal_r+0x1a28>
   21c1c:	05c001c4 	movi	r23,7
   21c20:	df012917 	ldw	fp,1188(sp)
   21c24:	00000306 	br	21c34 <___vfprintf_internal_r+0x16d4>
   21c28:	4a400204 	addi	r9,r9,8
   21c2c:	94bffc04 	addi	r18,r18,-16
   21c30:	b480d50e 	bge	r22,r18,21f88 <___vfprintf_internal_r+0x1a28>
   21c34:	4d000015 	stw	r20,0(r9)
   21c38:	4d800115 	stw	r22,4(r9)
   21c3c:	42000404 	addi	r8,r8,16
   21c40:	18c00044 	addi	r3,r3,1
   21c44:	da011d15 	stw	r8,1140(sp)
   21c48:	d8c11c15 	stw	r3,1136(sp)
   21c4c:	b8fff60e 	bge	r23,r3,21c28 <___vfprintf_internal_r+0x16c8>
   21c50:	8809883a 	mov	r4,r17
   21c54:	e00b883a 	mov	r5,fp
   21c58:	d9811b04 	addi	r6,sp,1132
   21c5c:	002052c0 	call	2052c <__sprint_r>
   21c60:	103b851e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21c64:	da011d17 	ldw	r8,1140(sp)
   21c68:	d8c11c17 	ldw	r3,1136(sp)
   21c6c:	da400404 	addi	r9,sp,16
   21c70:	003fee06 	br	21c2c <___vfprintf_internal_r+0x16cc>
   21c74:	da413c15 	stw	r9,1264(sp)
   21c78:	002724c0 	call	2724c <__isnand>
   21c7c:	da413c17 	ldw	r9,1264(sp)
   21c80:	10007e1e 	bne	r2,zero,21e7c <___vfprintf_internal_r+0x191c>
   21c84:	00bfffc4 	movi	r2,-1
   21c88:	e0816a26 	beq	fp,r2,22234 <___vfprintf_internal_r+0x1cd4>
   21c8c:	008019c4 	movi	r2,103
   21c90:	90816526 	beq	r18,r2,22228 <___vfprintf_internal_r+0x1cc8>
   21c94:	008011c4 	movi	r2,71
   21c98:	90816326 	beq	r18,r2,22228 <___vfprintf_internal_r+0x1cc8>
   21c9c:	80c04014 	ori	r3,r16,256
   21ca0:	d8c12a15 	stw	r3,1192(sp)
   21ca4:	a0016516 	blt	r20,zero,2223c <___vfprintf_internal_r+0x1cdc>
   21ca8:	d8012f05 	stb	zero,1212(sp)
   21cac:	00801984 	movi	r2,102
   21cb0:	9080f226 	beq	r18,r2,2207c <___vfprintf_internal_r+0x1b1c>
   21cb4:	00801184 	movi	r2,70
   21cb8:	9080f026 	beq	r18,r2,2207c <___vfprintf_internal_r+0x1b1c>
   21cbc:	00801944 	movi	r2,101
   21cc0:	90818d26 	beq	r18,r2,222f8 <___vfprintf_internal_r+0x1d98>
   21cc4:	00801144 	movi	r2,69
   21cc8:	90818b26 	beq	r18,r2,222f8 <___vfprintf_internal_r+0x1d98>
   21ccc:	e02f883a 	mov	r23,fp
   21cd0:	d8812404 	addi	r2,sp,1168
   21cd4:	d8800115 	stw	r2,4(sp)
   21cd8:	d8812304 	addi	r2,sp,1164
   21cdc:	d8800215 	stw	r2,8(sp)
   21ce0:	d8812204 	addi	r2,sp,1160
   21ce4:	ddc00015 	stw	r23,0(sp)
   21ce8:	d8800315 	stw	r2,12(sp)
   21cec:	8809883a 	mov	r4,r17
   21cf0:	b00b883a 	mov	r5,r22
   21cf4:	a00d883a 	mov	r6,r20
   21cf8:	01c00084 	movi	r7,2
   21cfc:	da413c15 	stw	r9,1264(sp)
   21d00:	00227b00 	call	227b0 <_dtoa_r>
   21d04:	1027883a 	mov	r19,r2
   21d08:	008019c4 	movi	r2,103
   21d0c:	da413c17 	ldw	r9,1264(sp)
   21d10:	9081951e 	bne	r18,r2,22368 <___vfprintf_internal_r+0x1e08>
   21d14:	8080004c 	andi	r2,r16,1
   21d18:	10017926 	beq	r2,zero,22300 <___vfprintf_internal_r+0x1da0>
   21d1c:	00801184 	movi	r2,70
   21d20:	9dc7883a 	add	r3,r19,r23
   21d24:	9080e626 	beq	r18,r2,220c0 <___vfprintf_internal_r+0x1b60>
   21d28:	b009883a 	mov	r4,r22
   21d2c:	a00b883a 	mov	r5,r20
   21d30:	000d883a 	mov	r6,zero
   21d34:	000f883a 	mov	r7,zero
   21d38:	d8c13b15 	stw	r3,1260(sp)
   21d3c:	da413c15 	stw	r9,1264(sp)
   21d40:	0028e680 	call	28e68 <__eqdf2>
   21d44:	d8c13b17 	ldw	r3,1260(sp)
   21d48:	da413c17 	ldw	r9,1264(sp)
   21d4c:	10000726 	beq	r2,zero,21d6c <___vfprintf_internal_r+0x180c>
   21d50:	d8812217 	ldw	r2,1160(sp)
   21d54:	10c18a2e 	bgeu	r2,r3,22380 <___vfprintf_internal_r+0x1e20>
   21d58:	01000c04 	movi	r4,48
   21d5c:	11000005 	stb	r4,0(r2)
   21d60:	10800044 	addi	r2,r2,1
   21d64:	d8812215 	stw	r2,1160(sp)
   21d68:	10fffc1e 	bne	r2,r3,21d5c <___vfprintf_internal_r+0x17fc>
   21d6c:	1cc7c83a 	sub	r3,r3,r19
   21d70:	d8c13215 	stw	r3,1224(sp)
   21d74:	008019c4 	movi	r2,103
   21d78:	9080fa26 	beq	r18,r2,22164 <___vfprintf_internal_r+0x1c04>
   21d7c:	008011c4 	movi	r2,71
   21d80:	9080f826 	beq	r18,r2,22164 <___vfprintf_internal_r+0x1c04>
   21d84:	00801984 	movi	r2,102
   21d88:	90818e1e 	bne	r18,r2,223c4 <___vfprintf_internal_r+0x1e64>
   21d8c:	d8812417 	ldw	r2,1168(sp)
   21d90:	d8812b15 	stw	r2,1196(sp)
   21d94:	00817c0e 	bge	zero,r2,22388 <___vfprintf_internal_r+0x1e28>
   21d98:	e000021e 	bne	fp,zero,21da4 <___vfprintf_internal_r+0x1844>
   21d9c:	8400004c 	andi	r16,r16,1
   21da0:	80000426 	beq	r16,zero,21db4 <___vfprintf_internal_r+0x1854>
   21da4:	d8812b17 	ldw	r2,1196(sp)
   21da8:	e2000044 	addi	r8,fp,1
   21dac:	1205883a 	add	r2,r2,r8
   21db0:	d8812b15 	stw	r2,1196(sp)
   21db4:	d8812815 	stw	r2,1184(sp)
   21db8:	10010b16 	blt	r2,zero,221e8 <___vfprintf_internal_r+0x1c88>
   21dbc:	ddc12f07 	ldb	r23,1212(sp)
   21dc0:	b800e426 	beq	r23,zero,22154 <___vfprintf_internal_r+0x1bf4>
   21dc4:	00800b44 	movi	r2,45
   21dc8:	d8812585 	stb	r2,1174(sp)
   21dcc:	dc012a17 	ldw	r16,1192(sp)
   21dd0:	d8013115 	stw	zero,1220(sp)
   21dd4:	003b7306 	br	20ba4 <___vfprintf_internal_r+0x644>
   21dd8:	d8812b17 	ldw	r2,1196(sp)
   21ddc:	d8812815 	stw	r2,1184(sp)
   21de0:	10005716 	blt	r2,zero,21f40 <___vfprintf_internal_r+0x19e0>
   21de4:	d8812583 	ldbu	r2,1174(sp)
   21de8:	ddc12d15 	stw	r23,1204(sp)
   21dec:	d8013115 	stw	zero,1220(sp)
   21df0:	003b6806 	br	20b94 <___vfprintf_internal_r+0x634>
   21df4:	d8c12d17 	ldw	r3,1204(sp)
   21df8:	1dc00017 	ldw	r23,0(r3)
   21dfc:	18c00104 	addi	r3,r3,4
   21e00:	d8c12d15 	stw	r3,1204(sp)
   21e04:	b82dd7fa 	srai	r22,r23,31
   21e08:	b005883a 	mov	r2,r22
   21e0c:	003b4406 	br	20b20 <___vfprintf_internal_r+0x5c0>
   21e10:	d9012d17 	ldw	r4,1204(sp)
   21e14:	002d883a 	mov	r22,zero
   21e18:	00c00044 	movi	r3,1
   21e1c:	25c00017 	ldw	r23,0(r4)
   21e20:	21000104 	addi	r4,r4,4
   21e24:	d9012d15 	stw	r4,1204(sp)
   21e28:	b805883a 	mov	r2,r23
   21e2c:	d8012585 	stb	zero,1174(sp)
   21e30:	003b4406 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21e34:	d9012d17 	ldw	r4,1204(sp)
   21e38:	002d883a 	mov	r22,zero
   21e3c:	25c00017 	ldw	r23,0(r4)
   21e40:	21000104 	addi	r4,r4,4
   21e44:	d9012d15 	stw	r4,1204(sp)
   21e48:	003bab06 	br	20cf8 <___vfprintf_internal_r+0x798>
   21e4c:	d8812d17 	ldw	r2,1204(sp)
   21e50:	002d883a 	mov	r22,zero
   21e54:	0007883a 	mov	r3,zero
   21e58:	15c00017 	ldw	r23,0(r2)
   21e5c:	10800104 	addi	r2,r2,4
   21e60:	d8812d15 	stw	r2,1204(sp)
   21e64:	d8012585 	stb	zero,1174(sp)
   21e68:	b805883a 	mov	r2,r23
   21e6c:	003b3506 	br	20b44 <___vfprintf_internal_r+0x5e4>
   21e70:	00ffffc4 	movi	r3,-1
   21e74:	b82b883a 	mov	r21,r23
   21e78:	003a1606 	br	206d4 <___vfprintf_internal_r+0x174>
   21e7c:	008011c4 	movi	r2,71
   21e80:	1480b116 	blt	r2,r18,22148 <___vfprintf_internal_r+0x1be8>
   21e84:	04c000f4 	movhi	r19,3
   21e88:	9cf1e704 	addi	r19,r19,-14436
   21e8c:	00c000c4 	movi	r3,3
   21e90:	00bfdfc4 	movi	r2,-129
   21e94:	80a0703a 	and	r16,r16,r2
   21e98:	d8c12815 	stw	r3,1184(sp)
   21e9c:	d8812583 	ldbu	r2,1174(sp)
   21ea0:	d8c12b15 	stw	r3,1196(sp)
   21ea4:	d8013115 	stw	zero,1220(sp)
   21ea8:	003b3a06 	br	20b94 <___vfprintf_internal_r+0x634>
   21eac:	d9412917 	ldw	r5,1188(sp)
   21eb0:	8809883a 	mov	r4,r17
   21eb4:	d9811b04 	addi	r6,sp,1132
   21eb8:	002052c0 	call	2052c <__sprint_r>
   21ebc:	103aee1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21ec0:	dc812417 	ldw	r18,1168(sp)
   21ec4:	da011d17 	ldw	r8,1140(sp)
   21ec8:	da400404 	addi	r9,sp,16
   21ecc:	003f3c06 	br	21bc0 <___vfprintf_internal_r+0x1660>
   21ed0:	ad400044 	addi	r21,r21,1
   21ed4:	84000814 	ori	r16,r16,32
   21ed8:	14800047 	ldb	r18,1(r2)
   21edc:	0039fc06 	br	206d0 <___vfprintf_internal_r+0x170>
   21ee0:	d9412917 	ldw	r5,1188(sp)
   21ee4:	8809883a 	mov	r4,r17
   21ee8:	d9811b04 	addi	r6,sp,1132
   21eec:	002052c0 	call	2052c <__sprint_r>
   21ef0:	103ae11e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21ef4:	da011d17 	ldw	r8,1140(sp)
   21ef8:	da400404 	addi	r9,sp,16
   21efc:	003d2b06 	br	213ac <___vfprintf_internal_r+0xe4c>
   21f00:	4d000015 	stw	r20,0(r9)
   21f04:	4c800115 	stw	r18,4(r9)
   21f08:	4491883a 	add	r8,r8,r18
   21f0c:	18c00044 	addi	r3,r3,1
   21f10:	da011d15 	stw	r8,1140(sp)
   21f14:	d8c11c15 	stw	r3,1136(sp)
   21f18:	008001c4 	movi	r2,7
   21f1c:	10fcbd16 	blt	r2,r3,21214 <___vfprintf_internal_r+0xcb4>
   21f20:	4a400204 	addi	r9,r9,8
   21f24:	003cc206 	br	21230 <___vfprintf_internal_r+0xcd0>
   21f28:	da413c15 	stw	r9,1264(sp)
   21f2c:	00204a00 	call	204a0 <strlen>
   21f30:	d8812b15 	stw	r2,1196(sp)
   21f34:	d8812815 	stw	r2,1184(sp)
   21f38:	da413c17 	ldw	r9,1264(sp)
   21f3c:	103fa90e 	bge	r2,zero,21de4 <___vfprintf_internal_r+0x1884>
   21f40:	d8012815 	stw	zero,1184(sp)
   21f44:	003fa706 	br	21de4 <___vfprintf_internal_r+0x1884>
   21f48:	d9412917 	ldw	r5,1188(sp)
   21f4c:	8809883a 	mov	r4,r17
   21f50:	d9811b04 	addi	r6,sp,1132
   21f54:	002052c0 	call	2052c <__sprint_r>
   21f58:	103ac71e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   21f5c:	da011d17 	ldw	r8,1140(sp)
   21f60:	d8c11c17 	ldw	r3,1136(sp)
   21f64:	da400404 	addi	r9,sp,16
   21f68:	d8813217 	ldw	r2,1224(sp)
   21f6c:	4cc00015 	stw	r19,0(r9)
   21f70:	48800115 	stw	r2,4(r9)
   21f74:	4091883a 	add	r8,r8,r2
   21f78:	003c6206 	br	21104 <___vfprintf_internal_r+0xba4>
   21f7c:	00800b44 	movi	r2,45
   21f80:	d8812585 	stb	r2,1174(sp)
   21f84:	003b2406 	br	20c18 <___vfprintf_internal_r+0x6b8>
   21f88:	4d000015 	stw	r20,0(r9)
   21f8c:	4c800115 	stw	r18,4(r9)
   21f90:	4491883a 	add	r8,r8,r18
   21f94:	18c00044 	addi	r3,r3,1
   21f98:	da011d15 	stw	r8,1140(sp)
   21f9c:	d8c11c15 	stw	r3,1136(sp)
   21fa0:	008001c4 	movi	r2,7
   21fa4:	10ffe816 	blt	r2,r3,21f48 <___vfprintf_internal_r+0x19e8>
   21fa8:	4a400204 	addi	r9,r9,8
   21fac:	003fee06 	br	21f68 <___vfprintf_internal_r+0x1a08>
   21fb0:	d8c12b15 	stw	r3,1196(sp)
   21fb4:	00800184 	movi	r2,6
   21fb8:	10c0062e 	bgeu	r2,r3,21fd4 <___vfprintf_internal_r+0x1a74>
   21fbc:	d8812b15 	stw	r2,1196(sp)
   21fc0:	d8812815 	stw	r2,1184(sp)
   21fc4:	ddc12d15 	stw	r23,1204(sp)
   21fc8:	04c000f4 	movhi	r19,3
   21fcc:	9cf1f304 	addi	r19,r19,-14388
   21fd0:	0039ca06 	br	206fc <___vfprintf_internal_r+0x19c>
   21fd4:	d8812b17 	ldw	r2,1196(sp)
   21fd8:	d8812815 	stw	r2,1184(sp)
   21fdc:	103ff90e 	bge	r2,zero,21fc4 <___vfprintf_internal_r+0x1a64>
   21fe0:	d8012815 	stw	zero,1184(sp)
   21fe4:	003ff706 	br	21fc4 <___vfprintf_internal_r+0x1a64>
   21fe8:	00800244 	movi	r2,9
   21fec:	15fdaa36 	bltu	r2,r23,21698 <___vfprintf_internal_r+0x1138>
   21ff0:	dd010e04 	addi	r20,sp,1080
   21ff4:	003dc606 	br	21710 <___vfprintf_internal_r+0x11b0>
   21ff8:	d9412917 	ldw	r5,1188(sp)
   21ffc:	8809883a 	mov	r4,r17
   22000:	d9811b04 	addi	r6,sp,1132
   22004:	002052c0 	call	2052c <__sprint_r>
   22008:	103a9b1e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   2200c:	dc812417 	ldw	r18,1168(sp)
   22010:	da400404 	addi	r9,sp,16
   22014:	003ecd06 	br	21b4c <___vfprintf_internal_r+0x15ec>
   22018:	d9412917 	ldw	r5,1188(sp)
   2201c:	8809883a 	mov	r4,r17
   22020:	d9811b04 	addi	r6,sp,1132
   22024:	002052c0 	call	2052c <__sprint_r>
   22028:	103a931e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   2202c:	dc812417 	ldw	r18,1168(sp)
   22030:	da011d17 	ldw	r8,1140(sp)
   22034:	d8c11c17 	ldw	r3,1136(sp)
   22038:	da400404 	addi	r9,sp,16
   2203c:	003eb706 	br	21b1c <___vfprintf_internal_r+0x15bc>
   22040:	d9412917 	ldw	r5,1188(sp)
   22044:	8809883a 	mov	r4,r17
   22048:	d9811b04 	addi	r6,sp,1132
   2204c:	002052c0 	call	2052c <__sprint_r>
   22050:	103a891e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   22054:	dc812417 	ldw	r18,1168(sp)
   22058:	da011d17 	ldw	r8,1140(sp)
   2205c:	da400404 	addi	r9,sp,16
   22060:	003dc206 	br	2176c <___vfprintf_internal_r+0x120c>
   22064:	df012815 	stw	fp,1184(sp)
   22068:	d8812583 	ldbu	r2,1174(sp)
   2206c:	df012b15 	stw	fp,1196(sp)
   22070:	ddc12d15 	stw	r23,1204(sp)
   22074:	d8013115 	stw	zero,1220(sp)
   22078:	003ac606 	br	20b94 <___vfprintf_internal_r+0x634>
   2207c:	d8812404 	addi	r2,sp,1168
   22080:	d8800115 	stw	r2,4(sp)
   22084:	d8812304 	addi	r2,sp,1164
   22088:	d8800215 	stw	r2,8(sp)
   2208c:	d8812204 	addi	r2,sp,1160
   22090:	df000015 	stw	fp,0(sp)
   22094:	d8800315 	stw	r2,12(sp)
   22098:	8809883a 	mov	r4,r17
   2209c:	b00b883a 	mov	r5,r22
   220a0:	a00d883a 	mov	r6,r20
   220a4:	01c000c4 	movi	r7,3
   220a8:	da413c15 	stw	r9,1264(sp)
   220ac:	00227b00 	call	227b0 <_dtoa_r>
   220b0:	da413c17 	ldw	r9,1264(sp)
   220b4:	1027883a 	mov	r19,r2
   220b8:	1707883a 	add	r3,r2,fp
   220bc:	e02f883a 	mov	r23,fp
   220c0:	99000007 	ldb	r4,0(r19)
   220c4:	00800c04 	movi	r2,48
   220c8:	20800326 	beq	r4,r2,220d8 <___vfprintf_internal_r+0x1b78>
   220cc:	da812417 	ldw	r10,1168(sp)
   220d0:	1a87883a 	add	r3,r3,r10
   220d4:	003f1406 	br	21d28 <___vfprintf_internal_r+0x17c8>
   220d8:	b009883a 	mov	r4,r22
   220dc:	a00b883a 	mov	r5,r20
   220e0:	000d883a 	mov	r6,zero
   220e4:	000f883a 	mov	r7,zero
   220e8:	d8c13b15 	stw	r3,1260(sp)
   220ec:	da413c15 	stw	r9,1264(sp)
   220f0:	0028ec40 	call	28ec4 <__nedf2>
   220f4:	d8c13b17 	ldw	r3,1260(sp)
   220f8:	da413c17 	ldw	r9,1264(sp)
   220fc:	103ff326 	beq	r2,zero,220cc <___vfprintf_internal_r+0x1b6c>
   22100:	00800044 	movi	r2,1
   22104:	15d5c83a 	sub	r10,r2,r23
   22108:	da812415 	stw	r10,1168(sp)
   2210c:	1a87883a 	add	r3,r3,r10
   22110:	003f0506 	br	21d28 <___vfprintf_internal_r+0x17c8>
   22114:	d9412917 	ldw	r5,1188(sp)
   22118:	8809883a 	mov	r4,r17
   2211c:	d9811b04 	addi	r6,sp,1132
   22120:	002052c0 	call	2052c <__sprint_r>
   22124:	103a541e 	bne	r2,zero,20a78 <___vfprintf_internal_r+0x518>
   22128:	dc812417 	ldw	r18,1168(sp)
   2212c:	da011d17 	ldw	r8,1140(sp)
   22130:	d8c11c17 	ldw	r3,1136(sp)
   22134:	da400404 	addi	r9,sp,16
   22138:	003eb206 	br	21c04 <___vfprintf_internal_r+0x16a4>
   2213c:	b82b883a 	mov	r21,r23
   22140:	0007883a 	mov	r3,zero
   22144:	00396306 	br	206d4 <___vfprintf_internal_r+0x174>
   22148:	04c000f4 	movhi	r19,3
   2214c:	9cf1e804 	addi	r19,r19,-14432
   22150:	003f4e06 	br	21e8c <___vfprintf_internal_r+0x192c>
   22154:	d8812583 	ldbu	r2,1174(sp)
   22158:	dc012a17 	ldw	r16,1192(sp)
   2215c:	d8013115 	stw	zero,1220(sp)
   22160:	003a8c06 	br	20b94 <___vfprintf_internal_r+0x634>
   22164:	d8812417 	ldw	r2,1168(sp)
   22168:	d8812b15 	stw	r2,1196(sp)
   2216c:	1029883a 	mov	r20,r2
   22170:	00bfff44 	movi	r2,-3
   22174:	a0800116 	blt	r20,r2,2217c <___vfprintf_internal_r+0x1c1c>
   22178:	e5001d0e 	bge	fp,r20,221f0 <___vfprintf_internal_r+0x1c90>
   2217c:	94bfff84 	addi	r18,r18,-2
   22180:	a53fffc4 	addi	r20,r20,-1
   22184:	dd012415 	stw	r20,1168(sp)
   22188:	dc811fc5 	stb	r18,1151(sp)
   2218c:	a0007216 	blt	r20,zero,22358 <___vfprintf_internal_r+0x1df8>
   22190:	00800ac4 	movi	r2,43
   22194:	d8812005 	stb	r2,1152(sp)
   22198:	00800244 	movi	r2,9
   2219c:	15003516 	blt	r2,r20,22274 <___vfprintf_internal_r+0x1d14>
   221a0:	00800c04 	movi	r2,48
   221a4:	a5000c04 	addi	r20,r20,48
   221a8:	d8812045 	stb	r2,1153(sp)
   221ac:	dd012085 	stb	r20,1154(sp)
   221b0:	d8c120c4 	addi	r3,sp,1155
   221b4:	d8811fc4 	addi	r2,sp,1151
   221b8:	1885c83a 	sub	r2,r3,r2
   221bc:	d8c13217 	ldw	r3,1224(sp)
   221c0:	d8813515 	stw	r2,1236(sp)
   221c4:	1885883a 	add	r2,r3,r2
   221c8:	d8812b15 	stw	r2,1196(sp)
   221cc:	00800044 	movi	r2,1
   221d0:	10c0580e 	bge	r2,r3,22334 <___vfprintf_internal_r+0x1dd4>
   221d4:	d8812b17 	ldw	r2,1196(sp)
   221d8:	10800044 	addi	r2,r2,1
   221dc:	d8812b15 	stw	r2,1196(sp)
   221e0:	d8812815 	stw	r2,1184(sp)
   221e4:	103ef50e 	bge	r2,zero,21dbc <___vfprintf_internal_r+0x185c>
   221e8:	d8012815 	stw	zero,1184(sp)
   221ec:	003ef306 	br	21dbc <___vfprintf_internal_r+0x185c>
   221f0:	d8812b17 	ldw	r2,1196(sp)
   221f4:	d8c13217 	ldw	r3,1224(sp)
   221f8:	10c01416 	blt	r2,r3,2224c <___vfprintf_internal_r+0x1cec>
   221fc:	8400004c 	andi	r16,r16,1
   22200:	80000326 	beq	r16,zero,22210 <___vfprintf_internal_r+0x1cb0>
   22204:	d8812b17 	ldw	r2,1196(sp)
   22208:	10800044 	addi	r2,r2,1
   2220c:	d8812b15 	stw	r2,1196(sp)
   22210:	d8812815 	stw	r2,1184(sp)
   22214:	10001416 	blt	r2,zero,22268 <___vfprintf_internal_r+0x1d08>
   22218:	048019c4 	movi	r18,103
   2221c:	003ee706 	br	21dbc <___vfprintf_internal_r+0x185c>
   22220:	d8012815 	stw	zero,1184(sp)
   22224:	003b1a06 	br	20e90 <___vfprintf_internal_r+0x930>
   22228:	e03e9c1e 	bne	fp,zero,21c9c <___vfprintf_internal_r+0x173c>
   2222c:	07000044 	movi	fp,1
   22230:	003e9a06 	br	21c9c <___vfprintf_internal_r+0x173c>
   22234:	07000184 	movi	fp,6
   22238:	003e9806 	br	21c9c <___vfprintf_internal_r+0x173c>
   2223c:	00c00b44 	movi	r3,45
   22240:	a520003c 	xorhi	r20,r20,32768
   22244:	d8c12f05 	stb	r3,1212(sp)
   22248:	003e9806 	br	21cac <___vfprintf_internal_r+0x174c>
   2224c:	05003f0e 	bge	zero,r20,2234c <___vfprintf_internal_r+0x1dec>
   22250:	05000044 	movi	r20,1
   22254:	d8c13217 	ldw	r3,1224(sp)
   22258:	a0e9883a 	add	r20,r20,r3
   2225c:	dd012b15 	stw	r20,1196(sp)
   22260:	dd012815 	stw	r20,1184(sp)
   22264:	a03fec0e 	bge	r20,zero,22218 <___vfprintf_internal_r+0x1cb8>
   22268:	d8012815 	stw	zero,1184(sp)
   2226c:	048019c4 	movi	r18,103
   22270:	003ed206 	br	21dbc <___vfprintf_internal_r+0x185c>
   22274:	d8c11f84 	addi	r3,sp,1150
   22278:	102f883a 	mov	r23,r2
   2227c:	4839883a 	mov	fp,r9
   22280:	a009883a 	mov	r4,r20
   22284:	01400284 	movi	r5,10
   22288:	182d883a 	mov	r22,r3
   2228c:	00293cc0 	call	293cc <__modsi3>
   22290:	10800c04 	addi	r2,r2,48
   22294:	a009883a 	mov	r4,r20
   22298:	b0800005 	stb	r2,0(r22)
   2229c:	01400284 	movi	r5,10
   222a0:	002937c0 	call	2937c <__divsi3>
   222a4:	1029883a 	mov	r20,r2
   222a8:	b0ffffc4 	addi	r3,r22,-1
   222ac:	b8bff416 	blt	r23,r2,22280 <___vfprintf_internal_r+0x1d20>
   222b0:	11400c04 	addi	r5,r2,48
   222b4:	b17fffc5 	stb	r5,-1(r22)
   222b8:	d8811fc4 	addi	r2,sp,1151
   222bc:	e013883a 	mov	r9,fp
   222c0:	18803e2e 	bgeu	r3,r2,223bc <___vfprintf_internal_r+0x1e5c>
   222c4:	b007883a 	mov	r3,r22
   222c8:	d9012044 	addi	r4,sp,1153
   222cc:	00000206 	br	222d8 <___vfprintf_internal_r+0x1d78>
   222d0:	19400003 	ldbu	r5,0(r3)
   222d4:	18c00044 	addi	r3,r3,1
   222d8:	21400005 	stb	r5,0(r4)
   222dc:	21000044 	addi	r4,r4,1
   222e0:	10fffb1e 	bne	r2,r3,222d0 <___vfprintf_internal_r+0x1d70>
   222e4:	d8c12004 	addi	r3,sp,1152
   222e8:	1d87c83a 	sub	r3,r3,r22
   222ec:	d9012044 	addi	r4,sp,1153
   222f0:	20c7883a 	add	r3,r4,r3
   222f4:	003fb006 	br	221b8 <___vfprintf_internal_r+0x1c58>
   222f8:	e5c00044 	addi	r23,fp,1
   222fc:	003e7406 	br	21cd0 <___vfprintf_internal_r+0x1770>
   22300:	d8c12217 	ldw	r3,1160(sp)
   22304:	003e9906 	br	21d6c <___vfprintf_internal_r+0x180c>
   22308:	d9012d17 	ldw	r4,1204(sp)
   2230c:	ac800043 	ldbu	r18,1(r21)
   22310:	b82b883a 	mov	r21,r23
   22314:	20c00017 	ldw	r3,0(r4)
   22318:	20800104 	addi	r2,r4,4
   2231c:	d8812d15 	stw	r2,1204(sp)
   22320:	18002116 	blt	r3,zero,223a8 <___vfprintf_internal_r+0x1e48>
   22324:	94803fcc 	andi	r18,r18,255
   22328:	9480201c 	xori	r18,r18,128
   2232c:	94bfe004 	addi	r18,r18,-128
   22330:	0038e706 	br	206d0 <___vfprintf_internal_r+0x170>
   22334:	80a0703a 	and	r16,r16,r2
   22338:	803fa61e 	bne	r16,zero,221d4 <___vfprintf_internal_r+0x1c74>
   2233c:	d8812b17 	ldw	r2,1196(sp)
   22340:	d8812815 	stw	r2,1184(sp)
   22344:	103e9d0e 	bge	r2,zero,21dbc <___vfprintf_internal_r+0x185c>
   22348:	003fa706 	br	221e8 <___vfprintf_internal_r+0x1c88>
   2234c:	00800084 	movi	r2,2
   22350:	1529c83a 	sub	r20,r2,r20
   22354:	003fbf06 	br	22254 <___vfprintf_internal_r+0x1cf4>
   22358:	00800b44 	movi	r2,45
   2235c:	0529c83a 	sub	r20,zero,r20
   22360:	d8812005 	stb	r2,1152(sp)
   22364:	003f8c06 	br	22198 <___vfprintf_internal_r+0x1c38>
   22368:	008011c4 	movi	r2,71
   2236c:	90be6926 	beq	r18,r2,21d14 <___vfprintf_internal_r+0x17b4>
   22370:	003e6a06 	br	21d1c <___vfprintf_internal_r+0x17bc>
   22374:	00bfffc4 	movi	r2,-1
   22378:	d8812c15 	stw	r2,1200(sp)
   2237c:	0039ad06 	br	20a34 <___vfprintf_internal_r+0x4d4>
   22380:	1007883a 	mov	r3,r2
   22384:	003e7906 	br	21d6c <___vfprintf_internal_r+0x180c>
   22388:	e000021e 	bne	fp,zero,22394 <___vfprintf_internal_r+0x1e34>
   2238c:	8400004c 	andi	r16,r16,1
   22390:	80000e26 	beq	r16,zero,223cc <___vfprintf_internal_r+0x1e6c>
   22394:	e7000084 	addi	fp,fp,2
   22398:	df012b15 	stw	fp,1196(sp)
   2239c:	df012815 	stw	fp,1184(sp)
   223a0:	e03e860e 	bge	fp,zero,21dbc <___vfprintf_internal_r+0x185c>
   223a4:	003f9006 	br	221e8 <___vfprintf_internal_r+0x1c88>
   223a8:	94803fcc 	andi	r18,r18,255
   223ac:	9480201c 	xori	r18,r18,128
   223b0:	00ffffc4 	movi	r3,-1
   223b4:	94bfe004 	addi	r18,r18,-128
   223b8:	0038c506 	br	206d0 <___vfprintf_internal_r+0x170>
   223bc:	d8c12044 	addi	r3,sp,1153
   223c0:	003f7d06 	br	221b8 <___vfprintf_internal_r+0x1c58>
   223c4:	dd012417 	ldw	r20,1168(sp)
   223c8:	003f6d06 	br	22180 <___vfprintf_internal_r+0x1c20>
   223cc:	00c00044 	movi	r3,1
   223d0:	d8c12815 	stw	r3,1184(sp)
   223d4:	d8c12b15 	stw	r3,1196(sp)
   223d8:	003e7806 	br	21dbc <___vfprintf_internal_r+0x185c>

000223dc <__vfprintf_internal>:
   223dc:	008000f4 	movhi	r2,3
   223e0:	10b93604 	addi	r2,r2,-6952
   223e4:	2007883a 	mov	r3,r4
   223e8:	11000017 	ldw	r4,0(r2)
   223ec:	2805883a 	mov	r2,r5
   223f0:	300f883a 	mov	r7,r6
   223f4:	180b883a 	mov	r5,r3
   223f8:	100d883a 	mov	r6,r2
   223fc:	00205601 	jmpi	20560 <___vfprintf_internal_r>

00022400 <__swsetup_r>:
   22400:	008000f4 	movhi	r2,3
   22404:	10b93604 	addi	r2,r2,-6952
   22408:	10800017 	ldw	r2,0(r2)
   2240c:	defffd04 	addi	sp,sp,-12
   22410:	dc400115 	stw	r17,4(sp)
   22414:	dc000015 	stw	r16,0(sp)
   22418:	dfc00215 	stw	ra,8(sp)
   2241c:	2023883a 	mov	r17,r4
   22420:	2821883a 	mov	r16,r5
   22424:	10000226 	beq	r2,zero,22430 <__swsetup_r+0x30>
   22428:	10c00e17 	ldw	r3,56(r2)
   2242c:	18003d26 	beq	r3,zero,22524 <__swsetup_r+0x124>
   22430:	8080030b 	ldhu	r2,12(r16)
   22434:	10c0020c 	andi	r3,r2,8
   22438:	18ffffcc 	andi	r3,r3,65535
   2243c:	18e0001c 	xori	r3,r3,32768
   22440:	18e00004 	addi	r3,r3,-32768
   22444:	18001226 	beq	r3,zero,22490 <__swsetup_r+0x90>
   22448:	80c00417 	ldw	r3,16(r16)
   2244c:	18001f26 	beq	r3,zero,224cc <__swsetup_r+0xcc>
   22450:	1100004c 	andi	r4,r2,1
   22454:	2000261e 	bne	r4,zero,224f0 <__swsetup_r+0xf0>
   22458:	1080008c 	andi	r2,r2,2
   2245c:	10bfffcc 	andi	r2,r2,65535
   22460:	10a0001c 	xori	r2,r2,32768
   22464:	10a00004 	addi	r2,r2,-32768
   22468:	1000311e 	bne	r2,zero,22530 <__swsetup_r+0x130>
   2246c:	80800517 	ldw	r2,20(r16)
   22470:	80800215 	stw	r2,8(r16)
   22474:	18002326 	beq	r3,zero,22504 <__swsetup_r+0x104>
   22478:	0005883a 	mov	r2,zero
   2247c:	dfc00217 	ldw	ra,8(sp)
   22480:	dc400117 	ldw	r17,4(sp)
   22484:	dc000017 	ldw	r16,0(sp)
   22488:	dec00304 	addi	sp,sp,12
   2248c:	f800283a 	ret
   22490:	10c0040c 	andi	r3,r2,16
   22494:	18ffffcc 	andi	r3,r3,65535
   22498:	18e0001c 	xori	r3,r3,32768
   2249c:	18e00004 	addi	r3,r3,-32768
   224a0:	18001e26 	beq	r3,zero,2251c <__swsetup_r+0x11c>
   224a4:	10c0010c 	andi	r3,r2,4
   224a8:	18ffffcc 	andi	r3,r3,65535
   224ac:	18e0001c 	xori	r3,r3,32768
   224b0:	18e00004 	addi	r3,r3,-32768
   224b4:	1800211e 	bne	r3,zero,2253c <__swsetup_r+0x13c>
   224b8:	80c00417 	ldw	r3,16(r16)
   224bc:	11400214 	ori	r5,r2,8
   224c0:	8140030d 	sth	r5,12(r16)
   224c4:	2805883a 	mov	r2,r5
   224c8:	183fe11e 	bne	r3,zero,22450 <__swsetup_r+0x50>
   224cc:	1140a00c 	andi	r5,r2,640
   224d0:	01008004 	movi	r4,512
   224d4:	293fde26 	beq	r5,r4,22450 <__swsetup_r+0x50>
   224d8:	8809883a 	mov	r4,r17
   224dc:	800b883a 	mov	r5,r16
   224e0:	0024dfc0 	call	24dfc <__smakebuf_r>
   224e4:	8080030b 	ldhu	r2,12(r16)
   224e8:	80c00417 	ldw	r3,16(r16)
   224ec:	003fd806 	br	22450 <__swsetup_r+0x50>
   224f0:	80800517 	ldw	r2,20(r16)
   224f4:	80000215 	stw	zero,8(r16)
   224f8:	0085c83a 	sub	r2,zero,r2
   224fc:	80800615 	stw	r2,24(r16)
   22500:	183fdd1e 	bne	r3,zero,22478 <__swsetup_r+0x78>
   22504:	8080030b 	ldhu	r2,12(r16)
   22508:	1080200c 	andi	r2,r2,128
   2250c:	10bfffcc 	andi	r2,r2,65535
   22510:	10a0001c 	xori	r2,r2,32768
   22514:	10a00004 	addi	r2,r2,-32768
   22518:	103fd826 	beq	r2,zero,2247c <__swsetup_r+0x7c>
   2251c:	00bfffc4 	movi	r2,-1
   22520:	003fd606 	br	2247c <__swsetup_r+0x7c>
   22524:	1009883a 	mov	r4,r2
   22528:	00240880 	call	24088 <__sinit>
   2252c:	003fc006 	br	22430 <__swsetup_r+0x30>
   22530:	0005883a 	mov	r2,zero
   22534:	80800215 	stw	r2,8(r16)
   22538:	003fce06 	br	22474 <__swsetup_r+0x74>
   2253c:	81400c17 	ldw	r5,48(r16)
   22540:	28000626 	beq	r5,zero,2255c <__swsetup_r+0x15c>
   22544:	80c01004 	addi	r3,r16,64
   22548:	28c00326 	beq	r5,r3,22558 <__swsetup_r+0x158>
   2254c:	8809883a 	mov	r4,r17
   22550:	002440c0 	call	2440c <_free_r>
   22554:	8080030b 	ldhu	r2,12(r16)
   22558:	80000c15 	stw	zero,48(r16)
   2255c:	80c00417 	ldw	r3,16(r16)
   22560:	013ff6c4 	movi	r4,-37
   22564:	2084703a 	and	r2,r4,r2
   22568:	80000115 	stw	zero,4(r16)
   2256c:	80c00015 	stw	r3,0(r16)
   22570:	003fd206 	br	224bc <__swsetup_r+0xbc>

00022574 <quorem>:
   22574:	defff204 	addi	sp,sp,-56
   22578:	dd000815 	stw	r20,32(sp)
   2257c:	20800417 	ldw	r2,16(r4)
   22580:	2d000417 	ldw	r20,16(r5)
   22584:	dcc00715 	stw	r19,28(sp)
   22588:	dfc00d15 	stw	ra,52(sp)
   2258c:	df000c15 	stw	fp,48(sp)
   22590:	ddc00b15 	stw	r23,44(sp)
   22594:	dd800a15 	stw	r22,40(sp)
   22598:	dd400915 	stw	r21,36(sp)
   2259c:	dc800615 	stw	r18,24(sp)
   225a0:	dc400515 	stw	r17,20(sp)
   225a4:	dc000415 	stw	r16,16(sp)
   225a8:	d9400015 	stw	r5,0(sp)
   225ac:	2027883a 	mov	r19,r4
   225b0:	15007d16 	blt	r2,r20,227a8 <quorem+0x234>
   225b4:	a0800104 	addi	r2,r20,4
   225b8:	1085883a 	add	r2,r2,r2
   225bc:	1085883a 	add	r2,r2,r2
   225c0:	28ad883a 	add	r22,r5,r2
   225c4:	2085883a 	add	r2,r4,r2
   225c8:	10800017 	ldw	r2,0(r2)
   225cc:	b1400017 	ldw	r5,0(r22)
   225d0:	a53fffc4 	addi	r20,r20,-1
   225d4:	1009883a 	mov	r4,r2
   225d8:	29400044 	addi	r5,r5,1
   225dc:	d8800115 	stw	r2,4(sp)
   225e0:	00294280 	call	29428 <__udivsi3>
   225e4:	1025883a 	mov	r18,r2
   225e8:	d8800017 	ldw	r2,0(sp)
   225ec:	9f000504 	addi	fp,r19,20
   225f0:	14000504 	addi	r16,r2,20
   225f4:	90003626 	beq	r18,zero,226d0 <quorem+0x15c>
   225f8:	802b883a 	mov	r21,r16
   225fc:	e023883a 	mov	r17,fp
   22600:	0007883a 	mov	r3,zero
   22604:	002f883a 	mov	r23,zero
   22608:	a9800017 	ldw	r6,0(r21)
   2260c:	900b883a 	mov	r5,r18
   22610:	d8c00315 	stw	r3,12(sp)
   22614:	313fffcc 	andi	r4,r6,65535
   22618:	d9800215 	stw	r6,8(sp)
   2261c:	00294380 	call	29438 <__mulsi3>
   22620:	d9800217 	ldw	r6,8(sp)
   22624:	d8c00317 	ldw	r3,12(sp)
   22628:	900b883a 	mov	r5,r18
   2262c:	3008d43a 	srli	r4,r6,16
   22630:	1887883a 	add	r3,r3,r2
   22634:	d8c00315 	stw	r3,12(sp)
   22638:	00294380 	call	29438 <__mulsi3>
   2263c:	89400017 	ldw	r5,0(r17)
   22640:	d8c00317 	ldw	r3,12(sp)
   22644:	ad400104 	addi	r21,r21,4
   22648:	293fffcc 	andi	r4,r5,65535
   2264c:	1810d43a 	srli	r8,r3,16
   22650:	25c9883a 	add	r4,r4,r23
   22654:	18ffffcc 	andi	r3,r3,65535
   22658:	20c9c83a 	sub	r4,r4,r3
   2265c:	280cd43a 	srli	r6,r5,16
   22660:	4085883a 	add	r2,r8,r2
   22664:	2007d43a 	srai	r3,r4,16
   22668:	117fffcc 	andi	r5,r2,65535
   2266c:	314bc83a 	sub	r5,r6,r5
   22670:	28cb883a 	add	r5,r5,r3
   22674:	8940008d 	sth	r5,2(r17)
   22678:	8900000d 	sth	r4,0(r17)
   2267c:	1006d43a 	srli	r3,r2,16
   22680:	282fd43a 	srai	r23,r5,16
   22684:	8c400104 	addi	r17,r17,4
   22688:	b57fdf2e 	bgeu	r22,r21,22608 <quorem+0x94>
   2268c:	d8c00117 	ldw	r3,4(sp)
   22690:	18000f1e 	bne	r3,zero,226d0 <quorem+0x15c>
   22694:	a0800144 	addi	r2,r20,5
   22698:	1085883a 	add	r2,r2,r2
   2269c:	1085883a 	add	r2,r2,r2
   226a0:	9887883a 	add	r3,r19,r2
   226a4:	18bfff04 	addi	r2,r3,-4
   226a8:	e080082e 	bgeu	fp,r2,226cc <quorem+0x158>
   226ac:	18ffff17 	ldw	r3,-4(r3)
   226b0:	18000326 	beq	r3,zero,226c0 <quorem+0x14c>
   226b4:	00000506 	br	226cc <quorem+0x158>
   226b8:	10c00017 	ldw	r3,0(r2)
   226bc:	1800031e 	bne	r3,zero,226cc <quorem+0x158>
   226c0:	10bfff04 	addi	r2,r2,-4
   226c4:	a53fffc4 	addi	r20,r20,-1
   226c8:	e0bffb36 	bltu	fp,r2,226b8 <quorem+0x144>
   226cc:	9d000415 	stw	r20,16(r19)
   226d0:	d9400017 	ldw	r5,0(sp)
   226d4:	9809883a 	mov	r4,r19
   226d8:	00265140 	call	26514 <__mcmp>
   226dc:	10002516 	blt	r2,zero,22774 <quorem+0x200>
   226e0:	94800044 	addi	r18,r18,1
   226e4:	e007883a 	mov	r3,fp
   226e8:	000d883a 	mov	r6,zero
   226ec:	18800017 	ldw	r2,0(r3)
   226f0:	82000017 	ldw	r8,0(r16)
   226f4:	84000104 	addi	r16,r16,4
   226f8:	11ffffcc 	andi	r7,r2,65535
   226fc:	413fffcc 	andi	r4,r8,65535
   22700:	398d883a 	add	r6,r7,r6
   22704:	310fc83a 	sub	r7,r6,r4
   22708:	4010d43a 	srli	r8,r8,16
   2270c:	100cd43a 	srli	r6,r2,16
   22710:	3809d43a 	srai	r4,r7,16
   22714:	19c0000d 	sth	r7,0(r3)
   22718:	320dc83a 	sub	r6,r6,r8
   2271c:	310d883a 	add	r6,r6,r4
   22720:	1980008d 	sth	r6,2(r3)
   22724:	300dd43a 	srai	r6,r6,16
   22728:	18c00104 	addi	r3,r3,4
   2272c:	b43fef2e 	bgeu	r22,r16,226ec <quorem+0x178>
   22730:	a0800144 	addi	r2,r20,5
   22734:	1085883a 	add	r2,r2,r2
   22738:	1085883a 	add	r2,r2,r2
   2273c:	9885883a 	add	r2,r19,r2
   22740:	10c00017 	ldw	r3,0(r2)
   22744:	18000b1e 	bne	r3,zero,22774 <quorem+0x200>
   22748:	10ffff04 	addi	r3,r2,-4
   2274c:	e0c0082e 	bgeu	fp,r3,22770 <quorem+0x1fc>
   22750:	10bfff17 	ldw	r2,-4(r2)
   22754:	10000326 	beq	r2,zero,22764 <quorem+0x1f0>
   22758:	00000506 	br	22770 <quorem+0x1fc>
   2275c:	18800017 	ldw	r2,0(r3)
   22760:	1000031e 	bne	r2,zero,22770 <quorem+0x1fc>
   22764:	18ffff04 	addi	r3,r3,-4
   22768:	a53fffc4 	addi	r20,r20,-1
   2276c:	e0fffb36 	bltu	fp,r3,2275c <quorem+0x1e8>
   22770:	9d000415 	stw	r20,16(r19)
   22774:	9005883a 	mov	r2,r18
   22778:	dfc00d17 	ldw	ra,52(sp)
   2277c:	df000c17 	ldw	fp,48(sp)
   22780:	ddc00b17 	ldw	r23,44(sp)
   22784:	dd800a17 	ldw	r22,40(sp)
   22788:	dd400917 	ldw	r21,36(sp)
   2278c:	dd000817 	ldw	r20,32(sp)
   22790:	dcc00717 	ldw	r19,28(sp)
   22794:	dc800617 	ldw	r18,24(sp)
   22798:	dc400517 	ldw	r17,20(sp)
   2279c:	dc000417 	ldw	r16,16(sp)
   227a0:	dec00e04 	addi	sp,sp,56
   227a4:	f800283a 	ret
   227a8:	0005883a 	mov	r2,zero
   227ac:	003ff206 	br	22778 <quorem+0x204>

000227b0 <_dtoa_r>:
   227b0:	20801017 	ldw	r2,64(r4)
   227b4:	deffdf04 	addi	sp,sp,-132
   227b8:	dcc01a15 	stw	r19,104(sp)
   227bc:	dc801915 	stw	r18,100(sp)
   227c0:	dc401815 	stw	r17,96(sp)
   227c4:	dc001715 	stw	r16,92(sp)
   227c8:	dfc02015 	stw	ra,128(sp)
   227cc:	df001f15 	stw	fp,124(sp)
   227d0:	ddc01e15 	stw	r23,120(sp)
   227d4:	dd801d15 	stw	r22,116(sp)
   227d8:	dd401c15 	stw	r21,112(sp)
   227dc:	dd001b15 	stw	r20,108(sp)
   227e0:	d9400315 	stw	r5,12(sp)
   227e4:	d9c00415 	stw	r7,16(sp)
   227e8:	2021883a 	mov	r16,r4
   227ec:	3025883a 	mov	r18,r6
   227f0:	dcc02317 	ldw	r19,140(sp)
   227f4:	3023883a 	mov	r17,r6
   227f8:	10000826 	beq	r2,zero,2281c <_dtoa_r+0x6c>
   227fc:	20c01117 	ldw	r3,68(r4)
   22800:	01800044 	movi	r6,1
   22804:	100b883a 	mov	r5,r2
   22808:	30cc983a 	sll	r6,r6,r3
   2280c:	10c00115 	stw	r3,4(r2)
   22810:	11800215 	stw	r6,8(r2)
   22814:	0025c700 	call	25c70 <_Bfree>
   22818:	80001015 	stw	zero,64(r16)
   2281c:	90002f16 	blt	r18,zero,228dc <_dtoa_r+0x12c>
   22820:	98000015 	stw	zero,0(r19)
   22824:	90dffc2c 	andhi	r3,r18,32752
   22828:	009ffc34 	movhi	r2,32752
   2282c:	18801c26 	beq	r3,r2,228a0 <_dtoa_r+0xf0>
   22830:	d9000317 	ldw	r4,12(sp)
   22834:	880b883a 	mov	r5,r17
   22838:	000d883a 	mov	r6,zero
   2283c:	000f883a 	mov	r7,zero
   22840:	0028e680 	call	28e68 <__eqdf2>
   22844:	10002c1e 	bne	r2,zero,228f8 <_dtoa_r+0x148>
   22848:	d9002217 	ldw	r4,136(sp)
   2284c:	d9c02417 	ldw	r7,144(sp)
   22850:	00800044 	movi	r2,1
   22854:	20800015 	stw	r2,0(r4)
   22858:	38019426 	beq	r7,zero,22eac <_dtoa_r+0x6fc>
   2285c:	008000f4 	movhi	r2,3
   22860:	10b1f544 	addi	r2,r2,-14379
   22864:	38800015 	stw	r2,0(r7)
   22868:	15ffffc4 	addi	r23,r2,-1
   2286c:	b805883a 	mov	r2,r23
   22870:	dfc02017 	ldw	ra,128(sp)
   22874:	df001f17 	ldw	fp,124(sp)
   22878:	ddc01e17 	ldw	r23,120(sp)
   2287c:	dd801d17 	ldw	r22,116(sp)
   22880:	dd401c17 	ldw	r21,112(sp)
   22884:	dd001b17 	ldw	r20,108(sp)
   22888:	dcc01a17 	ldw	r19,104(sp)
   2288c:	dc801917 	ldw	r18,100(sp)
   22890:	dc401817 	ldw	r17,96(sp)
   22894:	dc001717 	ldw	r16,92(sp)
   22898:	dec02104 	addi	sp,sp,132
   2289c:	f800283a 	ret
   228a0:	d8c02217 	ldw	r3,136(sp)
   228a4:	d9000317 	ldw	r4,12(sp)
   228a8:	0089c3c4 	movi	r2,9999
   228ac:	18800015 	stw	r2,0(r3)
   228b0:	20016c26 	beq	r4,zero,22e64 <_dtoa_r+0x6b4>
   228b4:	05c000f4 	movhi	r23,3
   228b8:	bdf20104 	addi	r23,r23,-14332
   228bc:	d9c02417 	ldw	r7,144(sp)
   228c0:	383fea26 	beq	r7,zero,2286c <_dtoa_r+0xbc>
   228c4:	b88000c7 	ldb	r2,3(r23)
   228c8:	10016d1e 	bne	r2,zero,22e80 <_dtoa_r+0x6d0>
   228cc:	b88000c4 	addi	r2,r23,3
   228d0:	d8c02417 	ldw	r3,144(sp)
   228d4:	18800015 	stw	r2,0(r3)
   228d8:	003fe406 	br	2286c <_dtoa_r+0xbc>
   228dc:	04600034 	movhi	r17,32768
   228e0:	8c7fffc4 	addi	r17,r17,-1
   228e4:	9462703a 	and	r17,r18,r17
   228e8:	00800044 	movi	r2,1
   228ec:	98800015 	stw	r2,0(r19)
   228f0:	8825883a 	mov	r18,r17
   228f4:	003fcb06 	br	22824 <_dtoa_r+0x74>
   228f8:	d9400317 	ldw	r5,12(sp)
   228fc:	9028d53a 	srli	r20,r18,20
   22900:	d8800204 	addi	r2,sp,8
   22904:	d8800015 	stw	r2,0(sp)
   22908:	8009883a 	mov	r4,r16
   2290c:	880d883a 	mov	r6,r17
   22910:	d9c00104 	addi	r7,sp,4
   22914:	00268bc0 	call	268bc <__d2b>
   22918:	a501ffcc 	andi	r20,r20,2047
   2291c:	1039883a 	mov	fp,r2
   22920:	a001591e 	bne	r20,zero,22e88 <_dtoa_r+0x6d8>
   22924:	dd400217 	ldw	r21,8(sp)
   22928:	dd000117 	ldw	r20,4(sp)
   2292c:	00befbc4 	movi	r2,-1041
   22930:	ad29883a 	add	r20,r21,r20
   22934:	a082d216 	blt	r20,r2,23480 <_dtoa_r+0xcd0>
   22938:	d8c00317 	ldw	r3,12(sp)
   2293c:	013f0384 	movi	r4,-1010
   22940:	2509c83a 	sub	r4,r4,r20
   22944:	a0810484 	addi	r2,r20,1042
   22948:	9124983a 	sll	r18,r18,r4
   2294c:	1884d83a 	srl	r2,r3,r2
   22950:	9088b03a 	or	r4,r18,r2
   22954:	00291ec0 	call	291ec <__floatunsidf>
   22958:	1009883a 	mov	r4,r2
   2295c:	017f8434 	movhi	r5,65040
   22960:	00800044 	movi	r2,1
   22964:	194b883a 	add	r5,r3,r5
   22968:	a53fffc4 	addi	r20,r20,-1
   2296c:	d8800f15 	stw	r2,60(sp)
   22970:	000d883a 	mov	r6,zero
   22974:	01cffe34 	movhi	r7,16376
   22978:	00289700 	call	28970 <__subdf3>
   2297c:	1009883a 	mov	r4,r2
   22980:	180b883a 	mov	r5,r3
   22984:	0198dbf4 	movhi	r6,25455
   22988:	3190d844 	addi	r6,r6,17249
   2298c:	01cff4f4 	movhi	r7,16339
   22990:	39e1e9c4 	addi	r7,r7,-30809
   22994:	00289d00 	call	289d0 <__muldf3>
   22998:	180b883a 	mov	r5,r3
   2299c:	01a2d874 	movhi	r6,35681
   229a0:	31b22cc4 	addi	r6,r6,-14157
   229a4:	01cff1f4 	movhi	r7,16327
   229a8:	39e28a04 	addi	r7,r7,-30168
   229ac:	1009883a 	mov	r4,r2
   229b0:	002891c0 	call	2891c <__adddf3>
   229b4:	a009883a 	mov	r4,r20
   229b8:	1027883a 	mov	r19,r2
   229bc:	1825883a 	mov	r18,r3
   229c0:	00290440 	call	29044 <__floatsidf>
   229c4:	1009883a 	mov	r4,r2
   229c8:	180b883a 	mov	r5,r3
   229cc:	019427f4 	movhi	r6,20639
   229d0:	319e7ec4 	addi	r6,r6,31227
   229d4:	01cff4f4 	movhi	r7,16339
   229d8:	39d104c4 	addi	r7,r7,17427
   229dc:	00289d00 	call	289d0 <__muldf3>
   229e0:	9809883a 	mov	r4,r19
   229e4:	900b883a 	mov	r5,r18
   229e8:	100d883a 	mov	r6,r2
   229ec:	180f883a 	mov	r7,r3
   229f0:	002891c0 	call	2891c <__adddf3>
   229f4:	1009883a 	mov	r4,r2
   229f8:	180b883a 	mov	r5,r3
   229fc:	1027883a 	mov	r19,r2
   22a00:	1825883a 	mov	r18,r3
   22a04:	00291180 	call	29118 <__fixdfsi>
   22a08:	9809883a 	mov	r4,r19
   22a0c:	900b883a 	mov	r5,r18
   22a10:	000d883a 	mov	r6,zero
   22a14:	000f883a 	mov	r7,zero
   22a18:	d8800615 	stw	r2,24(sp)
   22a1c:	0028fe80 	call	28fe8 <__ltdf2>
   22a20:	10027e16 	blt	r2,zero,2341c <_dtoa_r+0xc6c>
   22a24:	d8c00617 	ldw	r3,24(sp)
   22a28:	00800584 	movi	r2,22
   22a2c:	10c26c36 	bltu	r2,r3,233e0 <_dtoa_r+0xc30>
   22a30:	180490fa 	slli	r2,r3,3
   22a34:	00c000f4 	movhi	r3,3
   22a38:	18f22704 	addi	r3,r3,-14180
   22a3c:	d9800317 	ldw	r6,12(sp)
   22a40:	1885883a 	add	r2,r3,r2
   22a44:	11000017 	ldw	r4,0(r2)
   22a48:	11400117 	ldw	r5,4(r2)
   22a4c:	880f883a 	mov	r7,r17
   22a50:	0028f200 	call	28f20 <__gtdf2>
   22a54:	00828f0e 	bge	zero,r2,23494 <_dtoa_r+0xce4>
   22a58:	d8800617 	ldw	r2,24(sp)
   22a5c:	d8000d15 	stw	zero,52(sp)
   22a60:	10bfffc4 	addi	r2,r2,-1
   22a64:	d8800615 	stw	r2,24(sp)
   22a68:	ad29c83a 	sub	r20,r21,r20
   22a6c:	a53fffc4 	addi	r20,r20,-1
   22a70:	a0026616 	blt	r20,zero,2340c <_dtoa_r+0xc5c>
   22a74:	dd000715 	stw	r20,28(sp)
   22a78:	d8000815 	stw	zero,32(sp)
   22a7c:	d8800617 	ldw	r2,24(sp)
   22a80:	10025a16 	blt	r2,zero,233ec <_dtoa_r+0xc3c>
   22a84:	d8c00717 	ldw	r3,28(sp)
   22a88:	d8800b15 	stw	r2,44(sp)
   22a8c:	d8000a15 	stw	zero,40(sp)
   22a90:	1887883a 	add	r3,r3,r2
   22a94:	d8c00715 	stw	r3,28(sp)
   22a98:	d9c00417 	ldw	r7,16(sp)
   22a9c:	00800244 	movi	r2,9
   22aa0:	11c10536 	bltu	r2,r7,22eb8 <_dtoa_r+0x708>
   22aa4:	00800144 	movi	r2,5
   22aa8:	11c4c60e 	bge	r2,r7,23dc4 <_dtoa_r+0x1614>
   22aac:	39ffff04 	addi	r7,r7,-4
   22ab0:	d9c00415 	stw	r7,16(sp)
   22ab4:	0027883a 	mov	r19,zero
   22ab8:	d9c00417 	ldw	r7,16(sp)
   22abc:	008000c4 	movi	r2,3
   22ac0:	3883a226 	beq	r7,r2,2394c <_dtoa_r+0x119c>
   22ac4:	11c2bc16 	blt	r2,r7,235b8 <_dtoa_r+0xe08>
   22ac8:	00800084 	movi	r2,2
   22acc:	3880fb1e 	bne	r7,r2,22ebc <_dtoa_r+0x70c>
   22ad0:	d8000c15 	stw	zero,48(sp)
   22ad4:	d9002117 	ldw	r4,132(sp)
   22ad8:	0103ae0e 	bge	zero,r4,23994 <_dtoa_r+0x11e4>
   22adc:	2025883a 	mov	r18,r4
   22ae0:	d9000e15 	stw	r4,56(sp)
   22ae4:	d9000915 	stw	r4,36(sp)
   22ae8:	80001115 	stw	zero,68(r16)
   22aec:	008005c4 	movi	r2,23
   22af0:	1484b22e 	bgeu	r2,r18,23dbc <_dtoa_r+0x160c>
   22af4:	00c00044 	movi	r3,1
   22af8:	00800104 	movi	r2,4
   22afc:	1085883a 	add	r2,r2,r2
   22b00:	11000504 	addi	r4,r2,20
   22b04:	180b883a 	mov	r5,r3
   22b08:	18c00044 	addi	r3,r3,1
   22b0c:	913ffb2e 	bgeu	r18,r4,22afc <_dtoa_r+0x34c>
   22b10:	81401115 	stw	r5,68(r16)
   22b14:	8009883a 	mov	r4,r16
   22b18:	0025bc80 	call	25bc8 <_Balloc>
   22b1c:	102f883a 	mov	r23,r2
   22b20:	80801015 	stw	r2,64(r16)
   22b24:	00800384 	movi	r2,14
   22b28:	1480f036 	bltu	r2,r18,22eec <_dtoa_r+0x73c>
   22b2c:	9800ef26 	beq	r19,zero,22eec <_dtoa_r+0x73c>
   22b30:	d8800617 	ldw	r2,24(sp)
   22b34:	00839c0e 	bge	zero,r2,239a8 <_dtoa_r+0x11f8>
   22b38:	d8c00617 	ldw	r3,24(sp)
   22b3c:	108003cc 	andi	r2,r2,15
   22b40:	100490fa 	slli	r2,r2,3
   22b44:	182bd13a 	srai	r21,r3,4
   22b48:	00c000f4 	movhi	r3,3
   22b4c:	18f22704 	addi	r3,r3,-14180
   22b50:	1885883a 	add	r2,r3,r2
   22b54:	a8c0040c 	andi	r3,r21,16
   22b58:	12800017 	ldw	r10,0(r2)
   22b5c:	15800117 	ldw	r22,4(r2)
   22b60:	18038726 	beq	r3,zero,23980 <_dtoa_r+0x11d0>
   22b64:	008000f4 	movhi	r2,3
   22b68:	10b21d04 	addi	r2,r2,-14220
   22b6c:	11800817 	ldw	r6,32(r2)
   22b70:	11c00917 	ldw	r7,36(r2)
   22b74:	d9000317 	ldw	r4,12(sp)
   22b78:	880b883a 	mov	r5,r17
   22b7c:	da801515 	stw	r10,84(sp)
   22b80:	0028cb40 	call	28cb4 <__divdf3>
   22b84:	da801517 	ldw	r10,84(sp)
   22b88:	d8801015 	stw	r2,64(sp)
   22b8c:	1829883a 	mov	r20,r3
   22b90:	ad4003cc 	andi	r21,r21,15
   22b94:	048000c4 	movi	r18,3
   22b98:	a8001126 	beq	r21,zero,22be0 <_dtoa_r+0x430>
   22b9c:	04c000f4 	movhi	r19,3
   22ba0:	9cf21d04 	addi	r19,r19,-14220
   22ba4:	5005883a 	mov	r2,r10
   22ba8:	b007883a 	mov	r3,r22
   22bac:	a980004c 	andi	r6,r21,1
   22bb0:	1009883a 	mov	r4,r2
   22bb4:	a82bd07a 	srai	r21,r21,1
   22bb8:	180b883a 	mov	r5,r3
   22bbc:	30000426 	beq	r6,zero,22bd0 <_dtoa_r+0x420>
   22bc0:	99800017 	ldw	r6,0(r19)
   22bc4:	99c00117 	ldw	r7,4(r19)
   22bc8:	94800044 	addi	r18,r18,1
   22bcc:	00289d00 	call	289d0 <__muldf3>
   22bd0:	9cc00204 	addi	r19,r19,8
   22bd4:	a83ff51e 	bne	r21,zero,22bac <_dtoa_r+0x3fc>
   22bd8:	1015883a 	mov	r10,r2
   22bdc:	182d883a 	mov	r22,r3
   22be0:	d9001017 	ldw	r4,64(sp)
   22be4:	a00b883a 	mov	r5,r20
   22be8:	500d883a 	mov	r6,r10
   22bec:	b00f883a 	mov	r7,r22
   22bf0:	0028cb40 	call	28cb4 <__divdf3>
   22bf4:	1027883a 	mov	r19,r2
   22bf8:	1829883a 	mov	r20,r3
   22bfc:	d8c00d17 	ldw	r3,52(sp)
   22c00:	18000626 	beq	r3,zero,22c1c <_dtoa_r+0x46c>
   22c04:	9809883a 	mov	r4,r19
   22c08:	a00b883a 	mov	r5,r20
   22c0c:	000d883a 	mov	r6,zero
   22c10:	01cffc34 	movhi	r7,16368
   22c14:	0028fe80 	call	28fe8 <__ltdf2>
   22c18:	10040e16 	blt	r2,zero,23c54 <_dtoa_r+0x14a4>
   22c1c:	9009883a 	mov	r4,r18
   22c20:	00290440 	call	29044 <__floatsidf>
   22c24:	1009883a 	mov	r4,r2
   22c28:	180b883a 	mov	r5,r3
   22c2c:	980d883a 	mov	r6,r19
   22c30:	a00f883a 	mov	r7,r20
   22c34:	00289d00 	call	289d0 <__muldf3>
   22c38:	1009883a 	mov	r4,r2
   22c3c:	180b883a 	mov	r5,r3
   22c40:	000d883a 	mov	r6,zero
   22c44:	01d00734 	movhi	r7,16412
   22c48:	002891c0 	call	2891c <__adddf3>
   22c4c:	057f3034 	movhi	r21,64704
   22c50:	1d6b883a 	add	r21,r3,r21
   22c54:	d8c00917 	ldw	r3,36(sp)
   22c58:	1025883a 	mov	r18,r2
   22c5c:	18031f26 	beq	r3,zero,238dc <_dtoa_r+0x112c>
   22c60:	d8800617 	ldw	r2,24(sp)
   22c64:	dac00917 	ldw	r11,36(sp)
   22c68:	d8801315 	stw	r2,76(sp)
   22c6c:	d8c00c17 	ldw	r3,48(sp)
   22c70:	18039026 	beq	r3,zero,23ab4 <_dtoa_r+0x1304>
   22c74:	58bfffc4 	addi	r2,r11,-1
   22c78:	100490fa 	slli	r2,r2,3
   22c7c:	00c000f4 	movhi	r3,3
   22c80:	18f22704 	addi	r3,r3,-14180
   22c84:	0009883a 	mov	r4,zero
   22c88:	1885883a 	add	r2,r3,r2
   22c8c:	11800017 	ldw	r6,0(r2)
   22c90:	11c00117 	ldw	r7,4(r2)
   22c94:	014ff834 	movhi	r5,16352
   22c98:	dac01615 	stw	r11,88(sp)
   22c9c:	0028cb40 	call	28cb4 <__divdf3>
   22ca0:	900d883a 	mov	r6,r18
   22ca4:	a80f883a 	mov	r7,r21
   22ca8:	1009883a 	mov	r4,r2
   22cac:	180b883a 	mov	r5,r3
   22cb0:	00289700 	call	28970 <__subdf3>
   22cb4:	a00b883a 	mov	r5,r20
   22cb8:	9809883a 	mov	r4,r19
   22cbc:	182b883a 	mov	r21,r3
   22cc0:	d8801015 	stw	r2,64(sp)
   22cc4:	00291180 	call	29118 <__fixdfsi>
   22cc8:	1009883a 	mov	r4,r2
   22ccc:	d8801515 	stw	r2,84(sp)
   22cd0:	00290440 	call	29044 <__floatsidf>
   22cd4:	9809883a 	mov	r4,r19
   22cd8:	a00b883a 	mov	r5,r20
   22cdc:	100d883a 	mov	r6,r2
   22ce0:	180f883a 	mov	r7,r3
   22ce4:	00289700 	call	28970 <__subdf3>
   22ce8:	da401517 	ldw	r9,84(sp)
   22cec:	d9001017 	ldw	r4,64(sp)
   22cf0:	a80b883a 	mov	r5,r21
   22cf4:	4d000c04 	addi	r20,r9,48
   22cf8:	bd000005 	stb	r20,0(r23)
   22cfc:	100d883a 	mov	r6,r2
   22d00:	180f883a 	mov	r7,r3
   22d04:	bd800044 	addi	r22,r23,1
   22d08:	1025883a 	mov	r18,r2
   22d0c:	1827883a 	mov	r19,r3
   22d10:	0028f200 	call	28f20 <__gtdf2>
   22d14:	00842216 	blt	zero,r2,23da0 <_dtoa_r+0x15f0>
   22d18:	0009883a 	mov	r4,zero
   22d1c:	014ffc34 	movhi	r5,16368
   22d20:	900d883a 	mov	r6,r18
   22d24:	980f883a 	mov	r7,r19
   22d28:	00289700 	call	28970 <__subdf3>
   22d2c:	d9001017 	ldw	r4,64(sp)
   22d30:	a80b883a 	mov	r5,r21
   22d34:	100d883a 	mov	r6,r2
   22d38:	180f883a 	mov	r7,r3
   22d3c:	0028f200 	call	28f20 <__gtdf2>
   22d40:	dac01617 	ldw	r11,88(sp)
   22d44:	00841316 	blt	zero,r2,23d94 <_dtoa_r+0x15e4>
   22d48:	00800044 	movi	r2,1
   22d4c:	12c0670e 	bge	r2,r11,22eec <_dtoa_r+0x73c>
   22d50:	bad7883a 	add	r11,r23,r11
   22d54:	df001115 	stw	fp,68(sp)
   22d58:	dc401215 	stw	r17,72(sp)
   22d5c:	5839883a 	mov	fp,r11
   22d60:	dc401017 	ldw	r17,64(sp)
   22d64:	00000806 	br	22d88 <_dtoa_r+0x5d8>
   22d68:	00289700 	call	28970 <__subdf3>
   22d6c:	1009883a 	mov	r4,r2
   22d70:	180b883a 	mov	r5,r3
   22d74:	880d883a 	mov	r6,r17
   22d78:	a80f883a 	mov	r7,r21
   22d7c:	0028fe80 	call	28fe8 <__ltdf2>
   22d80:	1003ee16 	blt	r2,zero,23d3c <_dtoa_r+0x158c>
   22d84:	b703f126 	beq	r22,fp,23d4c <_dtoa_r+0x159c>
   22d88:	8809883a 	mov	r4,r17
   22d8c:	a80b883a 	mov	r5,r21
   22d90:	000d883a 	mov	r6,zero
   22d94:	01d00934 	movhi	r7,16420
   22d98:	00289d00 	call	289d0 <__muldf3>
   22d9c:	000d883a 	mov	r6,zero
   22da0:	01d00934 	movhi	r7,16420
   22da4:	9009883a 	mov	r4,r18
   22da8:	980b883a 	mov	r5,r19
   22dac:	1023883a 	mov	r17,r2
   22db0:	182b883a 	mov	r21,r3
   22db4:	00289d00 	call	289d0 <__muldf3>
   22db8:	180b883a 	mov	r5,r3
   22dbc:	1009883a 	mov	r4,r2
   22dc0:	1825883a 	mov	r18,r3
   22dc4:	1027883a 	mov	r19,r2
   22dc8:	00291180 	call	29118 <__fixdfsi>
   22dcc:	1009883a 	mov	r4,r2
   22dd0:	1029883a 	mov	r20,r2
   22dd4:	00290440 	call	29044 <__floatsidf>
   22dd8:	9809883a 	mov	r4,r19
   22ddc:	900b883a 	mov	r5,r18
   22de0:	100d883a 	mov	r6,r2
   22de4:	180f883a 	mov	r7,r3
   22de8:	00289700 	call	28970 <__subdf3>
   22dec:	a5000c04 	addi	r20,r20,48
   22df0:	b5000005 	stb	r20,0(r22)
   22df4:	1009883a 	mov	r4,r2
   22df8:	180b883a 	mov	r5,r3
   22dfc:	880d883a 	mov	r6,r17
   22e00:	a80f883a 	mov	r7,r21
   22e04:	1025883a 	mov	r18,r2
   22e08:	1827883a 	mov	r19,r3
   22e0c:	0028fe80 	call	28fe8 <__ltdf2>
   22e10:	b5800044 	addi	r22,r22,1
   22e14:	0009883a 	mov	r4,zero
   22e18:	014ffc34 	movhi	r5,16368
   22e1c:	900d883a 	mov	r6,r18
   22e20:	980f883a 	mov	r7,r19
   22e24:	103fd00e 	bge	r2,zero,22d68 <_dtoa_r+0x5b8>
   22e28:	d9001317 	ldw	r4,76(sp)
   22e2c:	df001117 	ldw	fp,68(sp)
   22e30:	d9000615 	stw	r4,24(sp)
   22e34:	8009883a 	mov	r4,r16
   22e38:	e00b883a 	mov	r5,fp
   22e3c:	0025c700 	call	25c70 <_Bfree>
   22e40:	d9c00617 	ldw	r7,24(sp)
   22e44:	d8c02217 	ldw	r3,136(sp)
   22e48:	d9002417 	ldw	r4,144(sp)
   22e4c:	b0000005 	stb	zero,0(r22)
   22e50:	38800044 	addi	r2,r7,1
   22e54:	18800015 	stw	r2,0(r3)
   22e58:	203e8426 	beq	r4,zero,2286c <_dtoa_r+0xbc>
   22e5c:	25800015 	stw	r22,0(r4)
   22e60:	003e8206 	br	2286c <_dtoa_r+0xbc>
   22e64:	00800434 	movhi	r2,16
   22e68:	10bfffc4 	addi	r2,r2,-1
   22e6c:	90a4703a 	and	r18,r18,r2
   22e70:	903e901e 	bne	r18,zero,228b4 <_dtoa_r+0x104>
   22e74:	05c000f4 	movhi	r23,3
   22e78:	bdf1fe04 	addi	r23,r23,-14344
   22e7c:	003e8f06 	br	228bc <_dtoa_r+0x10c>
   22e80:	b8800204 	addi	r2,r23,8
   22e84:	003e9206 	br	228d0 <_dtoa_r+0x120>
   22e88:	01400434 	movhi	r5,16
   22e8c:	297fffc4 	addi	r5,r5,-1
   22e90:	894a703a 	and	r5,r17,r5
   22e94:	d9000317 	ldw	r4,12(sp)
   22e98:	294ffc34 	orhi	r5,r5,16368
   22e9c:	a53f0044 	addi	r20,r20,-1023
   22ea0:	dd400217 	ldw	r21,8(sp)
   22ea4:	d8000f15 	stw	zero,60(sp)
   22ea8:	003eb106 	br	22970 <_dtoa_r+0x1c0>
   22eac:	05c000f4 	movhi	r23,3
   22eb0:	bdf1f504 	addi	r23,r23,-14380
   22eb4:	003e6d06 	br	2286c <_dtoa_r+0xbc>
   22eb8:	d8000415 	stw	zero,16(sp)
   22ebc:	80001115 	stw	zero,68(r16)
   22ec0:	8009883a 	mov	r4,r16
   22ec4:	000b883a 	mov	r5,zero
   22ec8:	0025bc80 	call	25bc8 <_Balloc>
   22ecc:	01ffffc4 	movi	r7,-1
   22ed0:	102f883a 	mov	r23,r2
   22ed4:	80801015 	stw	r2,64(r16)
   22ed8:	00800044 	movi	r2,1
   22edc:	d9c00915 	stw	r7,36(sp)
   22ee0:	d8002115 	stw	zero,132(sp)
   22ee4:	d9c00e15 	stw	r7,56(sp)
   22ee8:	d8800c15 	stw	r2,48(sp)
   22eec:	d8800117 	ldw	r2,4(sp)
   22ef0:	10008b16 	blt	r2,zero,23120 <_dtoa_r+0x970>
   22ef4:	d9000617 	ldw	r4,24(sp)
   22ef8:	00c00384 	movi	r3,14
   22efc:	19008816 	blt	r3,r4,23120 <_dtoa_r+0x970>
   22f00:	200490fa 	slli	r2,r4,3
   22f04:	d9c02117 	ldw	r7,132(sp)
   22f08:	00c000f4 	movhi	r3,3
   22f0c:	18f22704 	addi	r3,r3,-14180
   22f10:	1885883a 	add	r2,r3,r2
   22f14:	14800017 	ldw	r18,0(r2)
   22f18:	14c00117 	ldw	r19,4(r2)
   22f1c:	3801c916 	blt	r7,zero,23644 <_dtoa_r+0xe94>
   22f20:	d9000317 	ldw	r4,12(sp)
   22f24:	900d883a 	mov	r6,r18
   22f28:	980f883a 	mov	r7,r19
   22f2c:	880b883a 	mov	r5,r17
   22f30:	0028cb40 	call	28cb4 <__divdf3>
   22f34:	180b883a 	mov	r5,r3
   22f38:	1009883a 	mov	r4,r2
   22f3c:	00291180 	call	29118 <__fixdfsi>
   22f40:	1009883a 	mov	r4,r2
   22f44:	102b883a 	mov	r21,r2
   22f48:	00290440 	call	29044 <__floatsidf>
   22f4c:	1009883a 	mov	r4,r2
   22f50:	180b883a 	mov	r5,r3
   22f54:	900d883a 	mov	r6,r18
   22f58:	980f883a 	mov	r7,r19
   22f5c:	00289d00 	call	289d0 <__muldf3>
   22f60:	d9000317 	ldw	r4,12(sp)
   22f64:	880b883a 	mov	r5,r17
   22f68:	100d883a 	mov	r6,r2
   22f6c:	180f883a 	mov	r7,r3
   22f70:	00289700 	call	28970 <__subdf3>
   22f74:	d9c00917 	ldw	r7,36(sp)
   22f78:	1009883a 	mov	r4,r2
   22f7c:	a8800c04 	addi	r2,r21,48
   22f80:	b8800005 	stb	r2,0(r23)
   22f84:	01800044 	movi	r6,1
   22f88:	180b883a 	mov	r5,r3
   22f8c:	2005883a 	mov	r2,r4
   22f90:	bd800044 	addi	r22,r23,1
   22f94:	39803726 	beq	r7,r6,23074 <_dtoa_r+0x8c4>
   22f98:	000d883a 	mov	r6,zero
   22f9c:	01d00934 	movhi	r7,16420
   22fa0:	00289d00 	call	289d0 <__muldf3>
   22fa4:	1009883a 	mov	r4,r2
   22fa8:	180b883a 	mov	r5,r3
   22fac:	000d883a 	mov	r6,zero
   22fb0:	000f883a 	mov	r7,zero
   22fb4:	1029883a 	mov	r20,r2
   22fb8:	1823883a 	mov	r17,r3
   22fbc:	0028e680 	call	28e68 <__eqdf2>
   22fc0:	103f9c26 	beq	r2,zero,22e34 <_dtoa_r+0x684>
   22fc4:	dd400917 	ldw	r21,36(sp)
   22fc8:	dc000415 	stw	r16,16(sp)
   22fcc:	00000906 	br	22ff4 <_dtoa_r+0x844>
   22fd0:	00289d00 	call	289d0 <__muldf3>
   22fd4:	1009883a 	mov	r4,r2
   22fd8:	180b883a 	mov	r5,r3
   22fdc:	000d883a 	mov	r6,zero
   22fe0:	000f883a 	mov	r7,zero
   22fe4:	1029883a 	mov	r20,r2
   22fe8:	1823883a 	mov	r17,r3
   22fec:	0028e680 	call	28e68 <__eqdf2>
   22ff0:	10022926 	beq	r2,zero,23898 <_dtoa_r+0x10e8>
   22ff4:	900d883a 	mov	r6,r18
   22ff8:	980f883a 	mov	r7,r19
   22ffc:	a009883a 	mov	r4,r20
   23000:	880b883a 	mov	r5,r17
   23004:	0028cb40 	call	28cb4 <__divdf3>
   23008:	180b883a 	mov	r5,r3
   2300c:	1009883a 	mov	r4,r2
   23010:	00291180 	call	29118 <__fixdfsi>
   23014:	1009883a 	mov	r4,r2
   23018:	1021883a 	mov	r16,r2
   2301c:	00290440 	call	29044 <__floatsidf>
   23020:	1009883a 	mov	r4,r2
   23024:	180b883a 	mov	r5,r3
   23028:	900d883a 	mov	r6,r18
   2302c:	980f883a 	mov	r7,r19
   23030:	00289d00 	call	289d0 <__muldf3>
   23034:	a009883a 	mov	r4,r20
   23038:	880b883a 	mov	r5,r17
   2303c:	100d883a 	mov	r6,r2
   23040:	180f883a 	mov	r7,r3
   23044:	00289700 	call	28970 <__subdf3>
   23048:	82400c04 	addi	r9,r16,48
   2304c:	b2400005 	stb	r9,0(r22)
   23050:	b5800044 	addi	r22,r22,1
   23054:	b5d3c83a 	sub	r9,r22,r23
   23058:	000d883a 	mov	r6,zero
   2305c:	01d00934 	movhi	r7,16420
   23060:	1009883a 	mov	r4,r2
   23064:	180b883a 	mov	r5,r3
   23068:	aa7fd91e 	bne	r21,r9,22fd0 <_dtoa_r+0x820>
   2306c:	802b883a 	mov	r21,r16
   23070:	dc000417 	ldw	r16,16(sp)
   23074:	1009883a 	mov	r4,r2
   23078:	180b883a 	mov	r5,r3
   2307c:	100d883a 	mov	r6,r2
   23080:	180f883a 	mov	r7,r3
   23084:	002891c0 	call	2891c <__adddf3>
   23088:	9009883a 	mov	r4,r18
   2308c:	980b883a 	mov	r5,r19
   23090:	100d883a 	mov	r6,r2
   23094:	180f883a 	mov	r7,r3
   23098:	1023883a 	mov	r17,r2
   2309c:	1829883a 	mov	r20,r3
   230a0:	0028fe80 	call	28fe8 <__ltdf2>
   230a4:	10000816 	blt	r2,zero,230c8 <_dtoa_r+0x918>
   230a8:	9009883a 	mov	r4,r18
   230ac:	980b883a 	mov	r5,r19
   230b0:	880d883a 	mov	r6,r17
   230b4:	a00f883a 	mov	r7,r20
   230b8:	0028e680 	call	28e68 <__eqdf2>
   230bc:	103f5d1e 	bne	r2,zero,22e34 <_dtoa_r+0x684>
   230c0:	ad40004c 	andi	r21,r21,1
   230c4:	a83f5b26 	beq	r21,zero,22e34 <_dtoa_r+0x684>
   230c8:	b53fffc3 	ldbu	r20,-1(r22)
   230cc:	b0ffff84 	addi	r3,r22,-2
   230d0:	01400e44 	movi	r5,57
   230d4:	00000306 	br	230e4 <_dtoa_r+0x934>
   230d8:	1d000003 	ldbu	r20,0(r3)
   230dc:	102d883a 	mov	r22,r2
   230e0:	18ffffc4 	addi	r3,r3,-1
   230e4:	a1003fcc 	andi	r4,r20,255
   230e8:	2100201c 	xori	r4,r4,128
   230ec:	213fe004 	addi	r4,r4,-128
   230f0:	b0bfffc4 	addi	r2,r22,-1
   230f4:	2142ca1e 	bne	r4,r5,23c20 <_dtoa_r+0x1470>
   230f8:	b8bff71e 	bne	r23,r2,230d8 <_dtoa_r+0x928>
   230fc:	d8800617 	ldw	r2,24(sp)
   23100:	05000c44 	movi	r20,49
   23104:	10800044 	addi	r2,r2,1
   23108:	d8800615 	stw	r2,24(sp)
   2310c:	00800c04 	movi	r2,48
   23110:	b8800005 	stb	r2,0(r23)
   23114:	b805883a 	mov	r2,r23
   23118:	15000005 	stb	r20,0(r2)
   2311c:	003f4506 	br	22e34 <_dtoa_r+0x684>
   23120:	d9c00c17 	ldw	r7,48(sp)
   23124:	3800c926 	beq	r7,zero,2344c <_dtoa_r+0xc9c>
   23128:	d9c00417 	ldw	r7,16(sp)
   2312c:	00c00044 	movi	r3,1
   23130:	19c16c0e 	bge	r3,r7,236e4 <_dtoa_r+0xf34>
   23134:	d9000917 	ldw	r4,36(sp)
   23138:	d9c00a17 	ldw	r7,40(sp)
   2313c:	24ffffc4 	addi	r19,r4,-1
   23140:	3cc20716 	blt	r7,r19,23960 <_dtoa_r+0x11b0>
   23144:	3ce7c83a 	sub	r19,r7,r19
   23148:	d9c00917 	ldw	r7,36(sp)
   2314c:	3802ae16 	blt	r7,zero,23c08 <_dtoa_r+0x1458>
   23150:	dc800817 	ldw	r18,32(sp)
   23154:	d8800917 	ldw	r2,36(sp)
   23158:	d8c00817 	ldw	r3,32(sp)
   2315c:	d9c00717 	ldw	r7,28(sp)
   23160:	8009883a 	mov	r4,r16
   23164:	1887883a 	add	r3,r3,r2
   23168:	388f883a 	add	r7,r7,r2
   2316c:	01400044 	movi	r5,1
   23170:	d8c00815 	stw	r3,32(sp)
   23174:	d9c00715 	stw	r7,28(sp)
   23178:	0025ff80 	call	25ff8 <__i2b>
   2317c:	102b883a 	mov	r21,r2
   23180:	90000a26 	beq	r18,zero,231ac <_dtoa_r+0x9fc>
   23184:	d8800717 	ldw	r2,28(sp)
   23188:	0080080e 	bge	zero,r2,231ac <_dtoa_r+0x9fc>
   2318c:	90812b16 	blt	r18,r2,2363c <_dtoa_r+0xe8c>
   23190:	d8c00817 	ldw	r3,32(sp)
   23194:	d9000717 	ldw	r4,28(sp)
   23198:	90a5c83a 	sub	r18,r18,r2
   2319c:	1887c83a 	sub	r3,r3,r2
   231a0:	2089c83a 	sub	r4,r4,r2
   231a4:	d8c00815 	stw	r3,32(sp)
   231a8:	d9000715 	stw	r4,28(sp)
   231ac:	d9c00a17 	ldw	r7,40(sp)
   231b0:	01c0140e 	bge	zero,r7,23204 <_dtoa_r+0xa54>
   231b4:	d8800c17 	ldw	r2,48(sp)
   231b8:	1001de26 	beq	r2,zero,23934 <_dtoa_r+0x1184>
   231bc:	04c00e0e 	bge	zero,r19,231f8 <_dtoa_r+0xa48>
   231c0:	a80b883a 	mov	r5,r21
   231c4:	8009883a 	mov	r4,r16
   231c8:	980d883a 	mov	r6,r19
   231cc:	002628c0 	call	2628c <__pow5mult>
   231d0:	e00d883a 	mov	r6,fp
   231d4:	8009883a 	mov	r4,r16
   231d8:	100b883a 	mov	r5,r2
   231dc:	102b883a 	mov	r21,r2
   231e0:	00260340 	call	26034 <__multiply>
   231e4:	1029883a 	mov	r20,r2
   231e8:	e00b883a 	mov	r5,fp
   231ec:	8009883a 	mov	r4,r16
   231f0:	0025c700 	call	25c70 <_Bfree>
   231f4:	a039883a 	mov	fp,r20
   231f8:	d8c00a17 	ldw	r3,40(sp)
   231fc:	1ccdc83a 	sub	r6,r3,r19
   23200:	3001291e 	bne	r6,zero,236a8 <_dtoa_r+0xef8>
   23204:	8009883a 	mov	r4,r16
   23208:	01400044 	movi	r5,1
   2320c:	0025ff80 	call	25ff8 <__i2b>
   23210:	d9000b17 	ldw	r4,44(sp)
   23214:	1029883a 	mov	r20,r2
   23218:	0100050e 	bge	zero,r4,23230 <_dtoa_r+0xa80>
   2321c:	d9800b17 	ldw	r6,44(sp)
   23220:	8009883a 	mov	r4,r16
   23224:	100b883a 	mov	r5,r2
   23228:	002628c0 	call	2628c <__pow5mult>
   2322c:	1029883a 	mov	r20,r2
   23230:	d9c00417 	ldw	r7,16(sp)
   23234:	00800044 	movi	r2,1
   23238:	11c0f00e 	bge	r2,r7,235fc <_dtoa_r+0xe4c>
   2323c:	0023883a 	mov	r17,zero
   23240:	d8800b17 	ldw	r2,44(sp)
   23244:	1001741e 	bne	r2,zero,23818 <_dtoa_r+0x1068>
   23248:	00800044 	movi	r2,1
   2324c:	d8c00717 	ldw	r3,28(sp)
   23250:	10c5883a 	add	r2,r2,r3
   23254:	108007cc 	andi	r2,r2,31
   23258:	10008026 	beq	r2,zero,2345c <_dtoa_r+0xcac>
   2325c:	01000804 	movi	r4,32
   23260:	2089c83a 	sub	r4,r4,r2
   23264:	00c00104 	movi	r3,4
   23268:	1902d00e 	bge	r3,r4,23dac <_dtoa_r+0x15fc>
   2326c:	d9000817 	ldw	r4,32(sp)
   23270:	d9c00717 	ldw	r7,28(sp)
   23274:	00c00704 	movi	r3,28
   23278:	1885c83a 	sub	r2,r3,r2
   2327c:	2089883a 	add	r4,r4,r2
   23280:	388f883a 	add	r7,r7,r2
   23284:	d9000815 	stw	r4,32(sp)
   23288:	90a5883a 	add	r18,r18,r2
   2328c:	d9c00715 	stw	r7,28(sp)
   23290:	d9c00817 	ldw	r7,32(sp)
   23294:	01c0050e 	bge	zero,r7,232ac <_dtoa_r+0xafc>
   23298:	e00b883a 	mov	r5,fp
   2329c:	8009883a 	mov	r4,r16
   232a0:	380d883a 	mov	r6,r7
   232a4:	00263b80 	call	263b8 <__lshift>
   232a8:	1039883a 	mov	fp,r2
   232ac:	d8800717 	ldw	r2,28(sp)
   232b0:	0080050e 	bge	zero,r2,232c8 <_dtoa_r+0xb18>
   232b4:	a00b883a 	mov	r5,r20
   232b8:	8009883a 	mov	r4,r16
   232bc:	100d883a 	mov	r6,r2
   232c0:	00263b80 	call	263b8 <__lshift>
   232c4:	1029883a 	mov	r20,r2
   232c8:	d8c00d17 	ldw	r3,52(sp)
   232cc:	1801401e 	bne	r3,zero,237d0 <_dtoa_r+0x1020>
   232d0:	d8800917 	ldw	r2,36(sp)
   232d4:	00815a0e 	bge	zero,r2,23840 <_dtoa_r+0x1090>
   232d8:	d8c00c17 	ldw	r3,48(sp)
   232dc:	18006f1e 	bne	r3,zero,2349c <_dtoa_r+0xcec>
   232e0:	b823883a 	mov	r17,r23
   232e4:	dc800917 	ldw	r18,36(sp)
   232e8:	00000206 	br	232f4 <_dtoa_r+0xb44>
   232ec:	0025c980 	call	25c98 <__multadd>
   232f0:	1039883a 	mov	fp,r2
   232f4:	e009883a 	mov	r4,fp
   232f8:	a00b883a 	mov	r5,r20
   232fc:	00225740 	call	22574 <quorem>
   23300:	10800c04 	addi	r2,r2,48
   23304:	88800005 	stb	r2,0(r17)
   23308:	8c400044 	addi	r17,r17,1
   2330c:	8dc7c83a 	sub	r3,r17,r23
   23310:	8009883a 	mov	r4,r16
   23314:	e00b883a 	mov	r5,fp
   23318:	01800284 	movi	r6,10
   2331c:	000f883a 	mov	r7,zero
   23320:	1cbff216 	blt	r3,r18,232ec <_dtoa_r+0xb3c>
   23324:	dd800917 	ldw	r22,36(sp)
   23328:	1007883a 	mov	r3,r2
   2332c:	05823a0e 	bge	zero,r22,23c18 <_dtoa_r+0x1468>
   23330:	bdad883a 	add	r22,r23,r22
   23334:	0023883a 	mov	r17,zero
   23338:	e00b883a 	mov	r5,fp
   2333c:	01800044 	movi	r6,1
   23340:	8009883a 	mov	r4,r16
   23344:	d8c01515 	stw	r3,84(sp)
   23348:	00263b80 	call	263b8 <__lshift>
   2334c:	1009883a 	mov	r4,r2
   23350:	a00b883a 	mov	r5,r20
   23354:	1039883a 	mov	fp,r2
   23358:	00265140 	call	26514 <__mcmp>
   2335c:	d8c01517 	ldw	r3,84(sp)
   23360:	0080d60e 	bge	zero,r2,236bc <_dtoa_r+0xf0c>
   23364:	b13fffc3 	ldbu	r4,-1(r22)
   23368:	b0ffff84 	addi	r3,r22,-2
   2336c:	01800e44 	movi	r6,57
   23370:	00000306 	br	23380 <_dtoa_r+0xbd0>
   23374:	19000003 	ldbu	r4,0(r3)
   23378:	102d883a 	mov	r22,r2
   2337c:	18ffffc4 	addi	r3,r3,-1
   23380:	21403fcc 	andi	r5,r4,255
   23384:	2940201c 	xori	r5,r5,128
   23388:	297fe004 	addi	r5,r5,-128
   2338c:	b0bfffc4 	addi	r2,r22,-1
   23390:	2981a71e 	bne	r5,r6,23a30 <_dtoa_r+0x1280>
   23394:	b8bff71e 	bne	r23,r2,23374 <_dtoa_r+0xbc4>
   23398:	d8800617 	ldw	r2,24(sp)
   2339c:	10800044 	addi	r2,r2,1
   233a0:	d8800615 	stw	r2,24(sp)
   233a4:	00800c44 	movi	r2,49
   233a8:	b8800005 	stb	r2,0(r23)
   233ac:	8009883a 	mov	r4,r16
   233b0:	a00b883a 	mov	r5,r20
   233b4:	0025c700 	call	25c70 <_Bfree>
   233b8:	a83e9e26 	beq	r21,zero,22e34 <_dtoa_r+0x684>
   233bc:	88000426 	beq	r17,zero,233d0 <_dtoa_r+0xc20>
   233c0:	8d400326 	beq	r17,r21,233d0 <_dtoa_r+0xc20>
   233c4:	8009883a 	mov	r4,r16
   233c8:	880b883a 	mov	r5,r17
   233cc:	0025c700 	call	25c70 <_Bfree>
   233d0:	8009883a 	mov	r4,r16
   233d4:	a80b883a 	mov	r5,r21
   233d8:	0025c700 	call	25c70 <_Bfree>
   233dc:	003e9506 	br	22e34 <_dtoa_r+0x684>
   233e0:	00c00044 	movi	r3,1
   233e4:	d8c00d15 	stw	r3,52(sp)
   233e8:	003d9f06 	br	22a68 <_dtoa_r+0x2b8>
   233ec:	d9000817 	ldw	r4,32(sp)
   233f0:	d8800617 	ldw	r2,24(sp)
   233f4:	d8000b15 	stw	zero,44(sp)
   233f8:	2089c83a 	sub	r4,r4,r2
   233fc:	0087c83a 	sub	r3,zero,r2
   23400:	d9000815 	stw	r4,32(sp)
   23404:	d8c00a15 	stw	r3,40(sp)
   23408:	003da306 	br	22a98 <_dtoa_r+0x2e8>
   2340c:	0529c83a 	sub	r20,zero,r20
   23410:	dd000815 	stw	r20,32(sp)
   23414:	d8000715 	stw	zero,28(sp)
   23418:	003d9806 	br	22a7c <_dtoa_r+0x2cc>
   2341c:	d9000617 	ldw	r4,24(sp)
   23420:	00290440 	call	29044 <__floatsidf>
   23424:	1009883a 	mov	r4,r2
   23428:	180b883a 	mov	r5,r3
   2342c:	980d883a 	mov	r6,r19
   23430:	900f883a 	mov	r7,r18
   23434:	0028ec40 	call	28ec4 <__nedf2>
   23438:	103d7a26 	beq	r2,zero,22a24 <_dtoa_r+0x274>
   2343c:	d8800617 	ldw	r2,24(sp)
   23440:	10bfffc4 	addi	r2,r2,-1
   23444:	d8800615 	stw	r2,24(sp)
   23448:	003d7606 	br	22a24 <_dtoa_r+0x274>
   2344c:	dcc00a17 	ldw	r19,40(sp)
   23450:	dc800817 	ldw	r18,32(sp)
   23454:	002b883a 	mov	r21,zero
   23458:	003f4906 	br	23180 <_dtoa_r+0x9d0>
   2345c:	00800704 	movi	r2,28
   23460:	d8c00817 	ldw	r3,32(sp)
   23464:	d9000717 	ldw	r4,28(sp)
   23468:	90a5883a 	add	r18,r18,r2
   2346c:	1887883a 	add	r3,r3,r2
   23470:	2089883a 	add	r4,r4,r2
   23474:	d8c00815 	stw	r3,32(sp)
   23478:	d9000715 	stw	r4,28(sp)
   2347c:	003f8406 	br	23290 <_dtoa_r+0xae0>
   23480:	d9c00317 	ldw	r7,12(sp)
   23484:	013efb84 	movi	r4,-1042
   23488:	2509c83a 	sub	r4,r4,r20
   2348c:	3908983a 	sll	r4,r7,r4
   23490:	003d3006 	br	22954 <_dtoa_r+0x1a4>
   23494:	d8000d15 	stw	zero,52(sp)
   23498:	003d7306 	br	22a68 <_dtoa_r+0x2b8>
   2349c:	0480050e 	bge	zero,r18,234b4 <_dtoa_r+0xd04>
   234a0:	a80b883a 	mov	r5,r21
   234a4:	8009883a 	mov	r4,r16
   234a8:	900d883a 	mov	r6,r18
   234ac:	00263b80 	call	263b8 <__lshift>
   234b0:	102b883a 	mov	r21,r2
   234b4:	8801611e 	bne	r17,zero,23a3c <_dtoa_r+0x128c>
   234b8:	a827883a 	mov	r19,r21
   234bc:	d8c00317 	ldw	r3,12(sp)
   234c0:	d9000917 	ldw	r4,36(sp)
   234c4:	b8bfffc4 	addi	r2,r23,-1
   234c8:	18c0004c 	andi	r3,r3,1
   234cc:	1105883a 	add	r2,r2,r4
   234d0:	b825883a 	mov	r18,r23
   234d4:	d8800515 	stw	r2,20(sp)
   234d8:	a823883a 	mov	r17,r21
   234dc:	d8c00315 	stw	r3,12(sp)
   234e0:	ddc00715 	stw	r23,28(sp)
   234e4:	e009883a 	mov	r4,fp
   234e8:	a00b883a 	mov	r5,r20
   234ec:	00225740 	call	22574 <quorem>
   234f0:	e009883a 	mov	r4,fp
   234f4:	880b883a 	mov	r5,r17
   234f8:	102d883a 	mov	r22,r2
   234fc:	00265140 	call	26514 <__mcmp>
   23500:	980d883a 	mov	r6,r19
   23504:	8009883a 	mov	r4,r16
   23508:	a00b883a 	mov	r5,r20
   2350c:	102b883a 	mov	r21,r2
   23510:	002656c0 	call	2656c <__mdiff>
   23514:	100d883a 	mov	r6,r2
   23518:	10800317 	ldw	r2,12(r2)
   2351c:	b5c00c04 	addi	r23,r22,48
   23520:	10008c26 	beq	r2,zero,23754 <_dtoa_r+0xfa4>
   23524:	8009883a 	mov	r4,r16
   23528:	300b883a 	mov	r5,r6
   2352c:	0025c700 	call	25c70 <_Bfree>
   23530:	00800044 	movi	r2,1
   23534:	a8007116 	blt	r21,zero,236fc <_dtoa_r+0xf4c>
   23538:	a800041e 	bne	r21,zero,2354c <_dtoa_r+0xd9c>
   2353c:	d9c00417 	ldw	r7,16(sp)
   23540:	3800021e 	bne	r7,zero,2354c <_dtoa_r+0xd9c>
   23544:	d8c00317 	ldw	r3,12(sp)
   23548:	18006c26 	beq	r3,zero,236fc <_dtoa_r+0xf4c>
   2354c:	00814c16 	blt	zero,r2,23a80 <_dtoa_r+0x12d0>
   23550:	d8c00517 	ldw	r3,20(sp)
   23554:	95400044 	addi	r21,r18,1
   23558:	95c00005 	stb	r23,0(r18)
   2355c:	a82d883a 	mov	r22,r21
   23560:	90c14d26 	beq	r18,r3,23a98 <_dtoa_r+0x12e8>
   23564:	e00b883a 	mov	r5,fp
   23568:	8009883a 	mov	r4,r16
   2356c:	01800284 	movi	r6,10
   23570:	000f883a 	mov	r7,zero
   23574:	0025c980 	call	25c98 <__multadd>
   23578:	1039883a 	mov	fp,r2
   2357c:	8cc08b26 	beq	r17,r19,237ac <_dtoa_r+0xffc>
   23580:	880b883a 	mov	r5,r17
   23584:	01800284 	movi	r6,10
   23588:	000f883a 	mov	r7,zero
   2358c:	8009883a 	mov	r4,r16
   23590:	0025c980 	call	25c98 <__multadd>
   23594:	980b883a 	mov	r5,r19
   23598:	8009883a 	mov	r4,r16
   2359c:	01800284 	movi	r6,10
   235a0:	000f883a 	mov	r7,zero
   235a4:	1023883a 	mov	r17,r2
   235a8:	0025c980 	call	25c98 <__multadd>
   235ac:	1027883a 	mov	r19,r2
   235b0:	a825883a 	mov	r18,r21
   235b4:	003fcb06 	br	234e4 <_dtoa_r+0xd34>
   235b8:	d9c00417 	ldw	r7,16(sp)
   235bc:	00800104 	movi	r2,4
   235c0:	3880e426 	beq	r7,r2,23954 <_dtoa_r+0x11a4>
   235c4:	00800144 	movi	r2,5
   235c8:	38be3c1e 	bne	r7,r2,22ebc <_dtoa_r+0x70c>
   235cc:	00c00044 	movi	r3,1
   235d0:	d8c00c15 	stw	r3,48(sp)
   235d4:	d9c02117 	ldw	r7,132(sp)
   235d8:	d8800617 	ldw	r2,24(sp)
   235dc:	388f883a 	add	r7,r7,r2
   235e0:	3c800044 	addi	r18,r7,1
   235e4:	d9c00e15 	stw	r7,56(sp)
   235e8:	dc800915 	stw	r18,36(sp)
   235ec:	04bd3e16 	blt	zero,r18,22ae8 <_dtoa_r+0x338>
   235f0:	80001115 	stw	zero,68(r16)
   235f4:	000b883a 	mov	r5,zero
   235f8:	003d4606 	br	22b14 <_dtoa_r+0x364>
   235fc:	d8c00317 	ldw	r3,12(sp)
   23600:	183f0e1e 	bne	r3,zero,2323c <_dtoa_r+0xa8c>
   23604:	00c00434 	movhi	r3,16
   23608:	18ffffc4 	addi	r3,r3,-1
   2360c:	88c6703a 	and	r3,r17,r3
   23610:	183f0a1e 	bne	r3,zero,2323c <_dtoa_r+0xa8c>
   23614:	8c5ffc2c 	andhi	r17,r17,32752
   23618:	883f0826 	beq	r17,zero,2323c <_dtoa_r+0xa8c>
   2361c:	d9000817 	ldw	r4,32(sp)
   23620:	d9c00717 	ldw	r7,28(sp)
   23624:	1023883a 	mov	r17,r2
   23628:	2089883a 	add	r4,r4,r2
   2362c:	388f883a 	add	r7,r7,r2
   23630:	d9000815 	stw	r4,32(sp)
   23634:	d9c00715 	stw	r7,28(sp)
   23638:	003f0106 	br	23240 <_dtoa_r+0xa90>
   2363c:	9005883a 	mov	r2,r18
   23640:	003ed306 	br	23190 <_dtoa_r+0x9e0>
   23644:	d8800917 	ldw	r2,36(sp)
   23648:	00be3516 	blt	zero,r2,22f20 <_dtoa_r+0x770>
   2364c:	1000b61e 	bne	r2,zero,23928 <_dtoa_r+0x1178>
   23650:	9009883a 	mov	r4,r18
   23654:	980b883a 	mov	r5,r19
   23658:	000d883a 	mov	r6,zero
   2365c:	01d00534 	movhi	r7,16404
   23660:	00289d00 	call	289d0 <__muldf3>
   23664:	d9800317 	ldw	r6,12(sp)
   23668:	1009883a 	mov	r4,r2
   2366c:	180b883a 	mov	r5,r3
   23670:	880f883a 	mov	r7,r17
   23674:	0028f840 	call	28f84 <__gedf2>
   23678:	0029883a 	mov	r20,zero
   2367c:	002b883a 	mov	r21,zero
   23680:	10007e16 	blt	r2,zero,2387c <_dtoa_r+0x10cc>
   23684:	d8802117 	ldw	r2,132(sp)
   23688:	b82d883a 	mov	r22,r23
   2368c:	0084303a 	nor	r2,zero,r2
   23690:	d8800615 	stw	r2,24(sp)
   23694:	8009883a 	mov	r4,r16
   23698:	a00b883a 	mov	r5,r20
   2369c:	0025c700 	call	25c70 <_Bfree>
   236a0:	a83f4b1e 	bne	r21,zero,233d0 <_dtoa_r+0xc20>
   236a4:	003de306 	br	22e34 <_dtoa_r+0x684>
   236a8:	e00b883a 	mov	r5,fp
   236ac:	8009883a 	mov	r4,r16
   236b0:	002628c0 	call	2628c <__pow5mult>
   236b4:	1039883a 	mov	fp,r2
   236b8:	003ed206 	br	23204 <_dtoa_r+0xa54>
   236bc:	1000021e 	bne	r2,zero,236c8 <_dtoa_r+0xf18>
   236c0:	18c0004c 	andi	r3,r3,1
   236c4:	183f271e 	bne	r3,zero,23364 <_dtoa_r+0xbb4>
   236c8:	01000c04 	movi	r4,48
   236cc:	00000106 	br	236d4 <_dtoa_r+0xf24>
   236d0:	102d883a 	mov	r22,r2
   236d4:	b0bfffc4 	addi	r2,r22,-1
   236d8:	10c00007 	ldb	r3,0(r2)
   236dc:	193ffc26 	beq	r3,r4,236d0 <_dtoa_r+0xf20>
   236e0:	003f3206 	br	233ac <_dtoa_r+0xbfc>
   236e4:	d8c00f17 	ldw	r3,60(sp)
   236e8:	18015026 	beq	r3,zero,23c2c <_dtoa_r+0x147c>
   236ec:	10810cc4 	addi	r2,r2,1075
   236f0:	dcc00a17 	ldw	r19,40(sp)
   236f4:	dc800817 	ldw	r18,32(sp)
   236f8:	003e9706 	br	23158 <_dtoa_r+0x9a8>
   236fc:	b807883a 	mov	r3,r23
   23700:	182b883a 	mov	r21,r3
   23704:	ddc00717 	ldw	r23,28(sp)
   23708:	00800e0e 	bge	zero,r2,23744 <_dtoa_r+0xf94>
   2370c:	e00b883a 	mov	r5,fp
   23710:	01800044 	movi	r6,1
   23714:	8009883a 	mov	r4,r16
   23718:	d8c01515 	stw	r3,84(sp)
   2371c:	00263b80 	call	263b8 <__lshift>
   23720:	1009883a 	mov	r4,r2
   23724:	a00b883a 	mov	r5,r20
   23728:	1039883a 	mov	fp,r2
   2372c:	00265140 	call	26514 <__mcmp>
   23730:	d8c01517 	ldw	r3,84(sp)
   23734:	0081880e 	bge	zero,r2,23d58 <_dtoa_r+0x15a8>
   23738:	00800e44 	movi	r2,57
   2373c:	b0c00c44 	addi	r3,r22,49
   23740:	a8816326 	beq	r21,r2,23cd0 <_dtoa_r+0x1520>
   23744:	90c00005 	stb	r3,0(r18)
   23748:	95800044 	addi	r22,r18,1
   2374c:	982b883a 	mov	r21,r19
   23750:	003f1606 	br	233ac <_dtoa_r+0xbfc>
   23754:	300b883a 	mov	r5,r6
   23758:	e009883a 	mov	r4,fp
   2375c:	d9801515 	stw	r6,84(sp)
   23760:	00265140 	call	26514 <__mcmp>
   23764:	d9801517 	ldw	r6,84(sp)
   23768:	8009883a 	mov	r4,r16
   2376c:	d8801515 	stw	r2,84(sp)
   23770:	300b883a 	mov	r5,r6
   23774:	0025c700 	call	25c70 <_Bfree>
   23778:	d8801517 	ldw	r2,84(sp)
   2377c:	103f6d1e 	bne	r2,zero,23534 <_dtoa_r+0xd84>
   23780:	d9c00417 	ldw	r7,16(sp)
   23784:	383f6b1e 	bne	r7,zero,23534 <_dtoa_r+0xd84>
   23788:	d8c00317 	ldw	r3,12(sp)
   2378c:	183f691e 	bne	r3,zero,23534 <_dtoa_r+0xd84>
   23790:	b807883a 	mov	r3,r23
   23794:	00800e44 	movi	r2,57
   23798:	ddc00717 	ldw	r23,28(sp)
   2379c:	18814c26 	beq	r3,r2,23cd0 <_dtoa_r+0x1520>
   237a0:	057fe80e 	bge	zero,r21,23744 <_dtoa_r+0xf94>
   237a4:	b0c00c44 	addi	r3,r22,49
   237a8:	003fe606 	br	23744 <_dtoa_r+0xf94>
   237ac:	880b883a 	mov	r5,r17
   237b0:	8009883a 	mov	r4,r16
   237b4:	01800284 	movi	r6,10
   237b8:	000f883a 	mov	r7,zero
   237bc:	0025c980 	call	25c98 <__multadd>
   237c0:	1023883a 	mov	r17,r2
   237c4:	1027883a 	mov	r19,r2
   237c8:	a825883a 	mov	r18,r21
   237cc:	003f4506 	br	234e4 <_dtoa_r+0xd34>
   237d0:	e009883a 	mov	r4,fp
   237d4:	a00b883a 	mov	r5,r20
   237d8:	00265140 	call	26514 <__mcmp>
   237dc:	103ebc0e 	bge	r2,zero,232d0 <_dtoa_r+0xb20>
   237e0:	e00b883a 	mov	r5,fp
   237e4:	8009883a 	mov	r4,r16
   237e8:	01800284 	movi	r6,10
   237ec:	000f883a 	mov	r7,zero
   237f0:	0025c980 	call	25c98 <__multadd>
   237f4:	1039883a 	mov	fp,r2
   237f8:	d8800617 	ldw	r2,24(sp)
   237fc:	d8c00c17 	ldw	r3,48(sp)
   23800:	10bfffc4 	addi	r2,r2,-1
   23804:	d8800615 	stw	r2,24(sp)
   23808:	1801571e 	bne	r3,zero,23d68 <_dtoa_r+0x15b8>
   2380c:	d9c00e17 	ldw	r7,56(sp)
   23810:	d9c00915 	stw	r7,36(sp)
   23814:	003eae06 	br	232d0 <_dtoa_r+0xb20>
   23818:	a0800417 	ldw	r2,16(r20)
   2381c:	10800104 	addi	r2,r2,4
   23820:	1085883a 	add	r2,r2,r2
   23824:	1085883a 	add	r2,r2,r2
   23828:	a085883a 	add	r2,r20,r2
   2382c:	11000017 	ldw	r4,0(r2)
   23830:	0025ee00 	call	25ee0 <__hi0bits>
   23834:	00c00804 	movi	r3,32
   23838:	1885c83a 	sub	r2,r3,r2
   2383c:	003e8306 	br	2324c <_dtoa_r+0xa9c>
   23840:	d9c00417 	ldw	r7,16(sp)
   23844:	00800084 	movi	r2,2
   23848:	11fea30e 	bge	r2,r7,232d8 <_dtoa_r+0xb28>
   2384c:	d8800917 	ldw	r2,36(sp)
   23850:	103f8c1e 	bne	r2,zero,23684 <_dtoa_r+0xed4>
   23854:	a00b883a 	mov	r5,r20
   23858:	8009883a 	mov	r4,r16
   2385c:	01800144 	movi	r6,5
   23860:	000f883a 	mov	r7,zero
   23864:	0025c980 	call	25c98 <__multadd>
   23868:	e009883a 	mov	r4,fp
   2386c:	100b883a 	mov	r5,r2
   23870:	1029883a 	mov	r20,r2
   23874:	00265140 	call	26514 <__mcmp>
   23878:	00bf820e 	bge	zero,r2,23684 <_dtoa_r+0xed4>
   2387c:	00800c44 	movi	r2,49
   23880:	b8800005 	stb	r2,0(r23)
   23884:	d8800617 	ldw	r2,24(sp)
   23888:	bd800044 	addi	r22,r23,1
   2388c:	10800044 	addi	r2,r2,1
   23890:	d8800615 	stw	r2,24(sp)
   23894:	003f7f06 	br	23694 <_dtoa_r+0xee4>
   23898:	dc000417 	ldw	r16,16(sp)
   2389c:	003d6506 	br	22e34 <_dtoa_r+0x684>
   238a0:	9009883a 	mov	r4,r18
   238a4:	00290440 	call	29044 <__floatsidf>
   238a8:	1009883a 	mov	r4,r2
   238ac:	180b883a 	mov	r5,r3
   238b0:	980d883a 	mov	r6,r19
   238b4:	a00f883a 	mov	r7,r20
   238b8:	00289d00 	call	289d0 <__muldf3>
   238bc:	1009883a 	mov	r4,r2
   238c0:	180b883a 	mov	r5,r3
   238c4:	000d883a 	mov	r6,zero
   238c8:	01d00734 	movhi	r7,16412
   238cc:	002891c0 	call	2891c <__adddf3>
   238d0:	057f3034 	movhi	r21,64704
   238d4:	1025883a 	mov	r18,r2
   238d8:	1d6b883a 	add	r21,r3,r21
   238dc:	9809883a 	mov	r4,r19
   238e0:	a00b883a 	mov	r5,r20
   238e4:	000d883a 	mov	r6,zero
   238e8:	01d00534 	movhi	r7,16404
   238ec:	00289700 	call	28970 <__subdf3>
   238f0:	1009883a 	mov	r4,r2
   238f4:	180b883a 	mov	r5,r3
   238f8:	900d883a 	mov	r6,r18
   238fc:	a80f883a 	mov	r7,r21
   23900:	1027883a 	mov	r19,r2
   23904:	1829883a 	mov	r20,r3
   23908:	0028f200 	call	28f20 <__gtdf2>
   2390c:	00806616 	blt	zero,r2,23aa8 <_dtoa_r+0x12f8>
   23910:	a9e0003c 	xorhi	r7,r21,32768
   23914:	9809883a 	mov	r4,r19
   23918:	a00b883a 	mov	r5,r20
   2391c:	900d883a 	mov	r6,r18
   23920:	0028fe80 	call	28fe8 <__ltdf2>
   23924:	103d710e 	bge	r2,zero,22eec <_dtoa_r+0x73c>
   23928:	0029883a 	mov	r20,zero
   2392c:	002b883a 	mov	r21,zero
   23930:	003f5406 	br	23684 <_dtoa_r+0xed4>
   23934:	d9800a17 	ldw	r6,40(sp)
   23938:	e00b883a 	mov	r5,fp
   2393c:	8009883a 	mov	r4,r16
   23940:	002628c0 	call	2628c <__pow5mult>
   23944:	1039883a 	mov	fp,r2
   23948:	003e2e06 	br	23204 <_dtoa_r+0xa54>
   2394c:	d8000c15 	stw	zero,48(sp)
   23950:	003f2006 	br	235d4 <_dtoa_r+0xe24>
   23954:	00800044 	movi	r2,1
   23958:	d8800c15 	stw	r2,48(sp)
   2395c:	003c5d06 	br	22ad4 <_dtoa_r+0x324>
   23960:	d8c00a17 	ldw	r3,40(sp)
   23964:	d9000b17 	ldw	r4,44(sp)
   23968:	dcc00a15 	stw	r19,40(sp)
   2396c:	98c5c83a 	sub	r2,r19,r3
   23970:	2089883a 	add	r4,r4,r2
   23974:	d9000b15 	stw	r4,44(sp)
   23978:	0027883a 	mov	r19,zero
   2397c:	003df206 	br	23148 <_dtoa_r+0x998>
   23980:	d9000317 	ldw	r4,12(sp)
   23984:	8829883a 	mov	r20,r17
   23988:	04800084 	movi	r18,2
   2398c:	d9001015 	stw	r4,64(sp)
   23990:	003c8106 	br	22b98 <_dtoa_r+0x3e8>
   23994:	04800044 	movi	r18,1
   23998:	dc800e15 	stw	r18,56(sp)
   2399c:	dc800915 	stw	r18,36(sp)
   239a0:	dc802115 	stw	r18,132(sp)
   239a4:	003f1206 	br	235f0 <_dtoa_r+0xe40>
   239a8:	d8800617 	ldw	r2,24(sp)
   239ac:	00abc83a 	sub	r21,zero,r2
   239b0:	a800a426 	beq	r21,zero,23c44 <_dtoa_r+0x1494>
   239b4:	a88003cc 	andi	r2,r21,15
   239b8:	100490fa 	slli	r2,r2,3
   239bc:	00c000f4 	movhi	r3,3
   239c0:	18f22704 	addi	r3,r3,-14180
   239c4:	d9000317 	ldw	r4,12(sp)
   239c8:	1885883a 	add	r2,r3,r2
   239cc:	11800017 	ldw	r6,0(r2)
   239d0:	11c00117 	ldw	r7,4(r2)
   239d4:	a82bd13a 	srai	r21,r21,4
   239d8:	880b883a 	mov	r5,r17
   239dc:	00289d00 	call	289d0 <__muldf3>
   239e0:	1027883a 	mov	r19,r2
   239e4:	1829883a 	mov	r20,r3
   239e8:	a800e826 	beq	r21,zero,23d8c <_dtoa_r+0x15dc>
   239ec:	058000f4 	movhi	r22,3
   239f0:	b5b21d04 	addi	r22,r22,-14220
   239f4:	04800084 	movi	r18,2
   239f8:	a980004c 	andi	r6,r21,1
   239fc:	1009883a 	mov	r4,r2
   23a00:	a82bd07a 	srai	r21,r21,1
   23a04:	180b883a 	mov	r5,r3
   23a08:	30000426 	beq	r6,zero,23a1c <_dtoa_r+0x126c>
   23a0c:	b1800017 	ldw	r6,0(r22)
   23a10:	b1c00117 	ldw	r7,4(r22)
   23a14:	94800044 	addi	r18,r18,1
   23a18:	00289d00 	call	289d0 <__muldf3>
   23a1c:	b5800204 	addi	r22,r22,8
   23a20:	a83ff51e 	bne	r21,zero,239f8 <_dtoa_r+0x1248>
   23a24:	1027883a 	mov	r19,r2
   23a28:	1829883a 	mov	r20,r3
   23a2c:	003c7306 	br	22bfc <_dtoa_r+0x44c>
   23a30:	21000044 	addi	r4,r4,1
   23a34:	11000005 	stb	r4,0(r2)
   23a38:	003e5c06 	br	233ac <_dtoa_r+0xbfc>
   23a3c:	a9400117 	ldw	r5,4(r21)
   23a40:	8009883a 	mov	r4,r16
   23a44:	0025bc80 	call	25bc8 <_Balloc>
   23a48:	a9800417 	ldw	r6,16(r21)
   23a4c:	11000304 	addi	r4,r2,12
   23a50:	a9400304 	addi	r5,r21,12
   23a54:	31800084 	addi	r6,r6,2
   23a58:	318d883a 	add	r6,r6,r6
   23a5c:	318d883a 	add	r6,r6,r6
   23a60:	1023883a 	mov	r17,r2
   23a64:	00258200 	call	25820 <memcpy>
   23a68:	8009883a 	mov	r4,r16
   23a6c:	880b883a 	mov	r5,r17
   23a70:	01800044 	movi	r6,1
   23a74:	00263b80 	call	263b8 <__lshift>
   23a78:	1027883a 	mov	r19,r2
   23a7c:	003e8f06 	br	234bc <_dtoa_r+0xd0c>
   23a80:	b807883a 	mov	r3,r23
   23a84:	00800e44 	movi	r2,57
   23a88:	ddc00717 	ldw	r23,28(sp)
   23a8c:	18809026 	beq	r3,r2,23cd0 <_dtoa_r+0x1520>
   23a90:	18c00044 	addi	r3,r3,1
   23a94:	003f2b06 	br	23744 <_dtoa_r+0xf94>
   23a98:	b807883a 	mov	r3,r23
   23a9c:	982b883a 	mov	r21,r19
   23aa0:	ddc00717 	ldw	r23,28(sp)
   23aa4:	003e2406 	br	23338 <_dtoa_r+0xb88>
   23aa8:	0029883a 	mov	r20,zero
   23aac:	002b883a 	mov	r21,zero
   23ab0:	003f7206 	br	2387c <_dtoa_r+0x10cc>
   23ab4:	593fffc4 	addi	r4,r11,-1
   23ab8:	200490fa 	slli	r2,r4,3
   23abc:	00c000f4 	movhi	r3,3
   23ac0:	18f22704 	addi	r3,r3,-14180
   23ac4:	d9001015 	stw	r4,64(sp)
   23ac8:	1885883a 	add	r2,r3,r2
   23acc:	11000017 	ldw	r4,0(r2)
   23ad0:	11400117 	ldw	r5,4(r2)
   23ad4:	900d883a 	mov	r6,r18
   23ad8:	a80f883a 	mov	r7,r21
   23adc:	dac01615 	stw	r11,88(sp)
   23ae0:	00289d00 	call	289d0 <__muldf3>
   23ae4:	a00b883a 	mov	r5,r20
   23ae8:	9809883a 	mov	r4,r19
   23aec:	d8c01215 	stw	r3,72(sp)
   23af0:	d8801115 	stw	r2,68(sp)
   23af4:	00291180 	call	29118 <__fixdfsi>
   23af8:	1009883a 	mov	r4,r2
   23afc:	1025883a 	mov	r18,r2
   23b00:	00290440 	call	29044 <__floatsidf>
   23b04:	9809883a 	mov	r4,r19
   23b08:	a00b883a 	mov	r5,r20
   23b0c:	100d883a 	mov	r6,r2
   23b10:	180f883a 	mov	r7,r3
   23b14:	94800c04 	addi	r18,r18,48
   23b18:	00289700 	call	28970 <__subdf3>
   23b1c:	bc800005 	stb	r18,0(r23)
   23b20:	dac01617 	ldw	r11,88(sp)
   23b24:	102b883a 	mov	r21,r2
   23b28:	00800044 	movi	r2,1
   23b2c:	bd800044 	addi	r22,r23,1
   23b30:	1815883a 	mov	r10,r3
   23b34:	58802226 	beq	r11,r2,23bc0 <_dtoa_r+0x1410>
   23b38:	bad7883a 	add	r11,r23,r11
   23b3c:	dc001415 	stw	r16,80(sp)
   23b40:	a805883a 	mov	r2,r21
   23b44:	b027883a 	mov	r19,r22
   23b48:	5821883a 	mov	r16,r11
   23b4c:	882b883a 	mov	r21,r17
   23b50:	000d883a 	mov	r6,zero
   23b54:	01d00934 	movhi	r7,16420
   23b58:	1009883a 	mov	r4,r2
   23b5c:	180b883a 	mov	r5,r3
   23b60:	00289d00 	call	289d0 <__muldf3>
   23b64:	180b883a 	mov	r5,r3
   23b68:	1009883a 	mov	r4,r2
   23b6c:	1829883a 	mov	r20,r3
   23b70:	1023883a 	mov	r17,r2
   23b74:	00291180 	call	29118 <__fixdfsi>
   23b78:	1009883a 	mov	r4,r2
   23b7c:	1025883a 	mov	r18,r2
   23b80:	00290440 	call	29044 <__floatsidf>
   23b84:	8809883a 	mov	r4,r17
   23b88:	a00b883a 	mov	r5,r20
   23b8c:	100d883a 	mov	r6,r2
   23b90:	180f883a 	mov	r7,r3
   23b94:	94800c04 	addi	r18,r18,48
   23b98:	00289700 	call	28970 <__subdf3>
   23b9c:	9cc00044 	addi	r19,r19,1
   23ba0:	9cbfffc5 	stb	r18,-1(r19)
   23ba4:	9c3fea1e 	bne	r19,r16,23b50 <_dtoa_r+0x13a0>
   23ba8:	1815883a 	mov	r10,r3
   23bac:	d8c01017 	ldw	r3,64(sp)
   23bb0:	dc001417 	ldw	r16,80(sp)
   23bb4:	a823883a 	mov	r17,r21
   23bb8:	b0ed883a 	add	r22,r22,r3
   23bbc:	102b883a 	mov	r21,r2
   23bc0:	d9001117 	ldw	r4,68(sp)
   23bc4:	d9401217 	ldw	r5,72(sp)
   23bc8:	000d883a 	mov	r6,zero
   23bcc:	01cff834 	movhi	r7,16352
   23bd0:	da801515 	stw	r10,84(sp)
   23bd4:	002891c0 	call	2891c <__adddf3>
   23bd8:	da801517 	ldw	r10,84(sp)
   23bdc:	1009883a 	mov	r4,r2
   23be0:	180b883a 	mov	r5,r3
   23be4:	500f883a 	mov	r7,r10
   23be8:	a80d883a 	mov	r6,r21
   23bec:	0028fe80 	call	28fe8 <__ltdf2>
   23bf0:	da801517 	ldw	r10,84(sp)
   23bf4:	10003b0e 	bge	r2,zero,23ce4 <_dtoa_r+0x1534>
   23bf8:	d9c01317 	ldw	r7,76(sp)
   23bfc:	b53fffc3 	ldbu	r20,-1(r22)
   23c00:	d9c00615 	stw	r7,24(sp)
   23c04:	003d3106 	br	230cc <_dtoa_r+0x91c>
   23c08:	d8800817 	ldw	r2,32(sp)
   23c0c:	11e5c83a 	sub	r18,r2,r7
   23c10:	0005883a 	mov	r2,zero
   23c14:	003d5006 	br	23158 <_dtoa_r+0x9a8>
   23c18:	05800044 	movi	r22,1
   23c1c:	003dc406 	br	23330 <_dtoa_r+0xb80>
   23c20:	a5000044 	addi	r20,r20,1
   23c24:	15000005 	stb	r20,0(r2)
   23c28:	003c8206 	br	22e34 <_dtoa_r+0x684>
   23c2c:	d8800217 	ldw	r2,8(sp)
   23c30:	00c00d84 	movi	r3,54
   23c34:	dcc00a17 	ldw	r19,40(sp)
   23c38:	1885c83a 	sub	r2,r3,r2
   23c3c:	dc800817 	ldw	r18,32(sp)
   23c40:	003d4506 	br	23158 <_dtoa_r+0x9a8>
   23c44:	dcc00317 	ldw	r19,12(sp)
   23c48:	8829883a 	mov	r20,r17
   23c4c:	04800084 	movi	r18,2
   23c50:	003bea06 	br	22bfc <_dtoa_r+0x44c>
   23c54:	d9000917 	ldw	r4,36(sp)
   23c58:	203f1126 	beq	r4,zero,238a0 <_dtoa_r+0x10f0>
   23c5c:	d9c00e17 	ldw	r7,56(sp)
   23c60:	01fca20e 	bge	zero,r7,22eec <_dtoa_r+0x73c>
   23c64:	a00b883a 	mov	r5,r20
   23c68:	9809883a 	mov	r4,r19
   23c6c:	000d883a 	mov	r6,zero
   23c70:	01d00934 	movhi	r7,16420
   23c74:	00289d00 	call	289d0 <__muldf3>
   23c78:	91000044 	addi	r4,r18,1
   23c7c:	1027883a 	mov	r19,r2
   23c80:	1829883a 	mov	r20,r3
   23c84:	00290440 	call	29044 <__floatsidf>
   23c88:	9809883a 	mov	r4,r19
   23c8c:	a00b883a 	mov	r5,r20
   23c90:	100d883a 	mov	r6,r2
   23c94:	180f883a 	mov	r7,r3
   23c98:	00289d00 	call	289d0 <__muldf3>
   23c9c:	1009883a 	mov	r4,r2
   23ca0:	180b883a 	mov	r5,r3
   23ca4:	000d883a 	mov	r6,zero
   23ca8:	01d00734 	movhi	r7,16412
   23cac:	002891c0 	call	2891c <__adddf3>
   23cb0:	1025883a 	mov	r18,r2
   23cb4:	d8800617 	ldw	r2,24(sp)
   23cb8:	057f3034 	movhi	r21,64704
   23cbc:	1d6b883a 	add	r21,r3,r21
   23cc0:	10bfffc4 	addi	r2,r2,-1
   23cc4:	d8801315 	stw	r2,76(sp)
   23cc8:	dac00e17 	ldw	r11,56(sp)
   23ccc:	003be706 	br	22c6c <_dtoa_r+0x4bc>
   23cd0:	01000e44 	movi	r4,57
   23cd4:	91000005 	stb	r4,0(r18)
   23cd8:	95800044 	addi	r22,r18,1
   23cdc:	982b883a 	mov	r21,r19
   23ce0:	003da106 	br	23368 <_dtoa_r+0xbb8>
   23ce4:	d9801117 	ldw	r6,68(sp)
   23ce8:	d9c01217 	ldw	r7,72(sp)
   23cec:	0009883a 	mov	r4,zero
   23cf0:	014ff834 	movhi	r5,16352
   23cf4:	da801515 	stw	r10,84(sp)
   23cf8:	00289700 	call	28970 <__subdf3>
   23cfc:	da801517 	ldw	r10,84(sp)
   23d00:	1009883a 	mov	r4,r2
   23d04:	180b883a 	mov	r5,r3
   23d08:	a80d883a 	mov	r6,r21
   23d0c:	500f883a 	mov	r7,r10
   23d10:	0028f200 	call	28f20 <__gtdf2>
   23d14:	00bc750e 	bge	zero,r2,22eec <_dtoa_r+0x73c>
   23d18:	01000c04 	movi	r4,48
   23d1c:	00000106 	br	23d24 <_dtoa_r+0x1574>
   23d20:	102d883a 	mov	r22,r2
   23d24:	b0bfffc4 	addi	r2,r22,-1
   23d28:	10c00007 	ldb	r3,0(r2)
   23d2c:	193ffc26 	beq	r3,r4,23d20 <_dtoa_r+0x1570>
   23d30:	d8801317 	ldw	r2,76(sp)
   23d34:	d8800615 	stw	r2,24(sp)
   23d38:	003c3e06 	br	22e34 <_dtoa_r+0x684>
   23d3c:	d9001317 	ldw	r4,76(sp)
   23d40:	df001117 	ldw	fp,68(sp)
   23d44:	d9000615 	stw	r4,24(sp)
   23d48:	003ce006 	br	230cc <_dtoa_r+0x91c>
   23d4c:	df001117 	ldw	fp,68(sp)
   23d50:	dc401217 	ldw	r17,72(sp)
   23d54:	003c6506 	br	22eec <_dtoa_r+0x73c>
   23d58:	103e7a1e 	bne	r2,zero,23744 <_dtoa_r+0xf94>
   23d5c:	1880004c 	andi	r2,r3,1
   23d60:	103e7826 	beq	r2,zero,23744 <_dtoa_r+0xf94>
   23d64:	003e7406 	br	23738 <_dtoa_r+0xf88>
   23d68:	8009883a 	mov	r4,r16
   23d6c:	a80b883a 	mov	r5,r21
   23d70:	01800284 	movi	r6,10
   23d74:	000f883a 	mov	r7,zero
   23d78:	0025c980 	call	25c98 <__multadd>
   23d7c:	d9000e17 	ldw	r4,56(sp)
   23d80:	102b883a 	mov	r21,r2
   23d84:	d9000915 	stw	r4,36(sp)
   23d88:	003d5106 	br	232d0 <_dtoa_r+0xb20>
   23d8c:	04800084 	movi	r18,2
   23d90:	003b9a06 	br	22bfc <_dtoa_r+0x44c>
   23d94:	d8c01317 	ldw	r3,76(sp)
   23d98:	d8c00615 	stw	r3,24(sp)
   23d9c:	003ccb06 	br	230cc <_dtoa_r+0x91c>
   23da0:	d8c01317 	ldw	r3,76(sp)
   23da4:	d8c00615 	stw	r3,24(sp)
   23da8:	003c2206 	br	22e34 <_dtoa_r+0x684>
   23dac:	20fd3826 	beq	r4,r3,23290 <_dtoa_r+0xae0>
   23db0:	00c00f04 	movi	r3,60
   23db4:	1885c83a 	sub	r2,r3,r2
   23db8:	003da906 	br	23460 <_dtoa_r+0xcb0>
   23dbc:	000b883a 	mov	r5,zero
   23dc0:	003b5406 	br	22b14 <_dtoa_r+0x364>
   23dc4:	04c00044 	movi	r19,1
   23dc8:	003b3b06 	br	22ab8 <_dtoa_r+0x308>

00023dcc <_fflush_r>:
   23dcc:	defffb04 	addi	sp,sp,-20
   23dd0:	dcc00315 	stw	r19,12(sp)
   23dd4:	dc400115 	stw	r17,4(sp)
   23dd8:	dfc00415 	stw	ra,16(sp)
   23ddc:	dc800215 	stw	r18,8(sp)
   23de0:	dc000015 	stw	r16,0(sp)
   23de4:	2027883a 	mov	r19,r4
   23de8:	2823883a 	mov	r17,r5
   23dec:	20000226 	beq	r4,zero,23df8 <_fflush_r+0x2c>
   23df0:	20800e17 	ldw	r2,56(r4)
   23df4:	10005726 	beq	r2,zero,23f54 <_fflush_r+0x188>
   23df8:	8880030b 	ldhu	r2,12(r17)
   23dfc:	10c0020c 	andi	r3,r2,8
   23e00:	18ffffcc 	andi	r3,r3,65535
   23e04:	18e0001c 	xori	r3,r3,32768
   23e08:	18e00004 	addi	r3,r3,-32768
   23e0c:	1800311e 	bne	r3,zero,23ed4 <_fflush_r+0x108>
   23e10:	89000117 	ldw	r4,4(r17)
   23e14:	10c20014 	ori	r3,r2,2048
   23e18:	88c0030d 	sth	r3,12(r17)
   23e1c:	180b883a 	mov	r5,r3
   23e20:	0100520e 	bge	zero,r4,23f6c <_fflush_r+0x1a0>
   23e24:	88c00a17 	ldw	r3,40(r17)
   23e28:	18002226 	beq	r3,zero,23eb4 <_fflush_r+0xe8>
   23e2c:	1084000c 	andi	r2,r2,4096
   23e30:	10bfffcc 	andi	r2,r2,65535
   23e34:	10a0001c 	xori	r2,r2,32768
   23e38:	10a00004 	addi	r2,r2,-32768
   23e3c:	10004e26 	beq	r2,zero,23f78 <_fflush_r+0x1ac>
   23e40:	8c001417 	ldw	r16,80(r17)
   23e44:	2940010c 	andi	r5,r5,4
   23e48:	297fffcc 	andi	r5,r5,65535
   23e4c:	2960001c 	xori	r5,r5,32768
   23e50:	29600004 	addi	r5,r5,-32768
   23e54:	28000626 	beq	r5,zero,23e70 <_fflush_r+0xa4>
   23e58:	89000117 	ldw	r4,4(r17)
   23e5c:	88800c17 	ldw	r2,48(r17)
   23e60:	8121c83a 	sub	r16,r16,r4
   23e64:	10000226 	beq	r2,zero,23e70 <_fflush_r+0xa4>
   23e68:	88800f17 	ldw	r2,60(r17)
   23e6c:	80a1c83a 	sub	r16,r16,r2
   23e70:	89400717 	ldw	r5,28(r17)
   23e74:	9809883a 	mov	r4,r19
   23e78:	800d883a 	mov	r6,r16
   23e7c:	000f883a 	mov	r7,zero
   23e80:	183ee83a 	callr	r3
   23e84:	8080281e 	bne	r16,r2,23f28 <_fflush_r+0x15c>
   23e88:	8880030b 	ldhu	r2,12(r17)
   23e8c:	88c00417 	ldw	r3,16(r17)
   23e90:	88000115 	stw	zero,4(r17)
   23e94:	113dffcc 	andi	r4,r2,63487
   23e98:	1084000c 	andi	r2,r2,4096
   23e9c:	10bfffcc 	andi	r2,r2,65535
   23ea0:	10a0001c 	xori	r2,r2,32768
   23ea4:	8900030d 	sth	r4,12(r17)
   23ea8:	88c00015 	stw	r3,0(r17)
   23eac:	10a00004 	addi	r2,r2,-32768
   23eb0:	10002c1e 	bne	r2,zero,23f64 <_fflush_r+0x198>
   23eb4:	0005883a 	mov	r2,zero
   23eb8:	dfc00417 	ldw	ra,16(sp)
   23ebc:	dcc00317 	ldw	r19,12(sp)
   23ec0:	dc800217 	ldw	r18,8(sp)
   23ec4:	dc400117 	ldw	r17,4(sp)
   23ec8:	dc000017 	ldw	r16,0(sp)
   23ecc:	dec00504 	addi	sp,sp,20
   23ed0:	f800283a 	ret
   23ed4:	8c800417 	ldw	r18,16(r17)
   23ed8:	903ff626 	beq	r18,zero,23eb4 <_fflush_r+0xe8>
   23edc:	8c000017 	ldw	r16,0(r17)
   23ee0:	108000cc 	andi	r2,r2,3
   23ee4:	8c800015 	stw	r18,0(r17)
   23ee8:	84a1c83a 	sub	r16,r16,r18
   23eec:	10001b1e 	bne	r2,zero,23f5c <_fflush_r+0x190>
   23ef0:	88800517 	ldw	r2,20(r17)
   23ef4:	88800215 	stw	r2,8(r17)
   23ef8:	04000316 	blt	zero,r16,23f08 <_fflush_r+0x13c>
   23efc:	003fed06 	br	23eb4 <_fflush_r+0xe8>
   23f00:	90a5883a 	add	r18,r18,r2
   23f04:	043feb0e 	bge	zero,r16,23eb4 <_fflush_r+0xe8>
   23f08:	88800917 	ldw	r2,36(r17)
   23f0c:	89400717 	ldw	r5,28(r17)
   23f10:	800f883a 	mov	r7,r16
   23f14:	900d883a 	mov	r6,r18
   23f18:	9809883a 	mov	r4,r19
   23f1c:	103ee83a 	callr	r2
   23f20:	80a1c83a 	sub	r16,r16,r2
   23f24:	00bff616 	blt	zero,r2,23f00 <_fflush_r+0x134>
   23f28:	88c0030b 	ldhu	r3,12(r17)
   23f2c:	00bfffc4 	movi	r2,-1
   23f30:	18c01014 	ori	r3,r3,64
   23f34:	88c0030d 	sth	r3,12(r17)
   23f38:	dfc00417 	ldw	ra,16(sp)
   23f3c:	dcc00317 	ldw	r19,12(sp)
   23f40:	dc800217 	ldw	r18,8(sp)
   23f44:	dc400117 	ldw	r17,4(sp)
   23f48:	dc000017 	ldw	r16,0(sp)
   23f4c:	dec00504 	addi	sp,sp,20
   23f50:	f800283a 	ret
   23f54:	00240880 	call	24088 <__sinit>
   23f58:	003fa706 	br	23df8 <_fflush_r+0x2c>
   23f5c:	0005883a 	mov	r2,zero
   23f60:	003fe406 	br	23ef4 <_fflush_r+0x128>
   23f64:	8c001415 	stw	r16,80(r17)
   23f68:	003fd206 	br	23eb4 <_fflush_r+0xe8>
   23f6c:	88c00f17 	ldw	r3,60(r17)
   23f70:	00ffac16 	blt	zero,r3,23e24 <_fflush_r+0x58>
   23f74:	003fcf06 	br	23eb4 <_fflush_r+0xe8>
   23f78:	89400717 	ldw	r5,28(r17)
   23f7c:	9809883a 	mov	r4,r19
   23f80:	000d883a 	mov	r6,zero
   23f84:	01c00044 	movi	r7,1
   23f88:	183ee83a 	callr	r3
   23f8c:	1021883a 	mov	r16,r2
   23f90:	00bfffc4 	movi	r2,-1
   23f94:	80800326 	beq	r16,r2,23fa4 <_fflush_r+0x1d8>
   23f98:	8940030b 	ldhu	r5,12(r17)
   23f9c:	88c00a17 	ldw	r3,40(r17)
   23fa0:	003fa806 	br	23e44 <_fflush_r+0x78>
   23fa4:	98c00017 	ldw	r3,0(r19)
   23fa8:	00800744 	movi	r2,29
   23fac:	18bfde1e 	bne	r3,r2,23f28 <_fflush_r+0x15c>
   23fb0:	003fc006 	br	23eb4 <_fflush_r+0xe8>

00023fb4 <fflush>:
   23fb4:	200b883a 	mov	r5,r4
   23fb8:	20000426 	beq	r4,zero,23fcc <fflush+0x18>
   23fbc:	008000f4 	movhi	r2,3
   23fc0:	10b93604 	addi	r2,r2,-6952
   23fc4:	11000017 	ldw	r4,0(r2)
   23fc8:	0023dcc1 	jmpi	23dcc <_fflush_r>
   23fcc:	008000f4 	movhi	r2,3
   23fd0:	10b93504 	addi	r2,r2,-6956
   23fd4:	11000017 	ldw	r4,0(r2)
   23fd8:	014000b4 	movhi	r5,2
   23fdc:	294f7304 	addi	r5,r5,15820
   23fe0:	0024c681 	jmpi	24c68 <_fwalk_reent>

00023fe4 <__fp_lock>:
   23fe4:	0005883a 	mov	r2,zero
   23fe8:	f800283a 	ret

00023fec <__fp_unlock>:
   23fec:	0005883a 	mov	r2,zero
   23ff0:	f800283a 	ret

00023ff4 <_cleanup_r>:
   23ff4:	014000b4 	movhi	r5,2
   23ff8:	295de604 	addi	r5,r5,30616
   23ffc:	0024bc01 	jmpi	24bc0 <_fwalk>

00024000 <__sfmoreglue>:
   24000:	defffc04 	addi	sp,sp,-16
   24004:	dc800215 	stw	r18,8(sp)
   24008:	2825883a 	mov	r18,r5
   2400c:	dc000015 	stw	r16,0(sp)
   24010:	01401704 	movi	r5,92
   24014:	2021883a 	mov	r16,r4
   24018:	9009883a 	mov	r4,r18
   2401c:	dfc00315 	stw	ra,12(sp)
   24020:	dc400115 	stw	r17,4(sp)
   24024:	00294380 	call	29438 <__mulsi3>
   24028:	8009883a 	mov	r4,r16
   2402c:	11400304 	addi	r5,r2,12
   24030:	1023883a 	mov	r17,r2
   24034:	0024fa40 	call	24fa4 <_malloc_r>
   24038:	1021883a 	mov	r16,r2
   2403c:	10000726 	beq	r2,zero,2405c <__sfmoreglue+0x5c>
   24040:	11000304 	addi	r4,r2,12
   24044:	10000015 	stw	zero,0(r2)
   24048:	14800115 	stw	r18,4(r2)
   2404c:	11000215 	stw	r4,8(r2)
   24050:	000b883a 	mov	r5,zero
   24054:	880d883a 	mov	r6,r17
   24058:	0025aec0 	call	25aec <memset>
   2405c:	8005883a 	mov	r2,r16
   24060:	dfc00317 	ldw	ra,12(sp)
   24064:	dc800217 	ldw	r18,8(sp)
   24068:	dc400117 	ldw	r17,4(sp)
   2406c:	dc000017 	ldw	r16,0(sp)
   24070:	dec00404 	addi	sp,sp,16
   24074:	f800283a 	ret

00024078 <_cleanup>:
   24078:	008000f4 	movhi	r2,3
   2407c:	10b93504 	addi	r2,r2,-6956
   24080:	11000017 	ldw	r4,0(r2)
   24084:	0023ff41 	jmpi	23ff4 <_cleanup_r>

00024088 <__sinit>:
   24088:	20800e17 	ldw	r2,56(r4)
   2408c:	1000401e 	bne	r2,zero,24190 <__sinit+0x108>
   24090:	21400117 	ldw	r5,4(r4)
   24094:	018000b4 	movhi	r6,2
   24098:	318ffd04 	addi	r6,r6,16372
   2409c:	20c00217 	ldw	r3,8(r4)
   240a0:	21800f15 	stw	r6,60(r4)
   240a4:	2080bb04 	addi	r2,r4,748
   240a8:	02400044 	movi	r9,1
   240ac:	018000c4 	movi	r6,3
   240b0:	2180b915 	stw	r6,740(r4)
   240b4:	2080ba15 	stw	r2,744(r4)
   240b8:	22400e15 	stw	r9,56(r4)
   240bc:	20800317 	ldw	r2,12(r4)
   240c0:	2000b815 	stw	zero,736(r4)
   240c4:	020000b4 	movhi	r8,2
   240c8:	421cb704 	addi	r8,r8,29404
   240cc:	01c000b4 	movhi	r7,2
   240d0:	39dccc04 	addi	r7,r7,29488
   240d4:	018000b4 	movhi	r6,2
   240d8:	319cee04 	addi	r6,r6,29624
   240dc:	010000b4 	movhi	r4,2
   240e0:	211d0504 	addi	r4,r4,29716
   240e4:	02800104 	movi	r10,4
   240e8:	28000015 	stw	zero,0(r5)
   240ec:	28000115 	stw	zero,4(r5)
   240f0:	28000215 	stw	zero,8(r5)
   240f4:	2a80030d 	sth	r10,12(r5)
   240f8:	2800038d 	sth	zero,14(r5)
   240fc:	28000415 	stw	zero,16(r5)
   24100:	28000515 	stw	zero,20(r5)
   24104:	28000615 	stw	zero,24(r5)
   24108:	29400715 	stw	r5,28(r5)
   2410c:	2a000815 	stw	r8,32(r5)
   24110:	29c00915 	stw	r7,36(r5)
   24114:	29800a15 	stw	r6,40(r5)
   24118:	29000b15 	stw	r4,44(r5)
   2411c:	01400284 	movi	r5,10
   24120:	18000015 	stw	zero,0(r3)
   24124:	18000115 	stw	zero,4(r3)
   24128:	18000215 	stw	zero,8(r3)
   2412c:	1940030d 	sth	r5,12(r3)
   24130:	1a40038d 	sth	r9,14(r3)
   24134:	18000415 	stw	zero,16(r3)
   24138:	18000515 	stw	zero,20(r3)
   2413c:	18000615 	stw	zero,24(r3)
   24140:	18c00715 	stw	r3,28(r3)
   24144:	1a000815 	stw	r8,32(r3)
   24148:	19c00915 	stw	r7,36(r3)
   2414c:	19800a15 	stw	r6,40(r3)
   24150:	19000b15 	stw	r4,44(r3)
   24154:	00c00484 	movi	r3,18
   24158:	10c0030d 	sth	r3,12(r2)
   2415c:	00c00084 	movi	r3,2
   24160:	10000015 	stw	zero,0(r2)
   24164:	10000115 	stw	zero,4(r2)
   24168:	10000215 	stw	zero,8(r2)
   2416c:	10c0038d 	sth	r3,14(r2)
   24170:	10000415 	stw	zero,16(r2)
   24174:	10000515 	stw	zero,20(r2)
   24178:	10000615 	stw	zero,24(r2)
   2417c:	10800715 	stw	r2,28(r2)
   24180:	12000815 	stw	r8,32(r2)
   24184:	11c00915 	stw	r7,36(r2)
   24188:	11800a15 	stw	r6,40(r2)
   2418c:	11000b15 	stw	r4,44(r2)
   24190:	f800283a 	ret

00024194 <__sfp>:
   24194:	defffc04 	addi	sp,sp,-16
   24198:	008000f4 	movhi	r2,3
   2419c:	10b93504 	addi	r2,r2,-6956
   241a0:	dc400115 	stw	r17,4(sp)
   241a4:	14400017 	ldw	r17,0(r2)
   241a8:	dc800215 	stw	r18,8(sp)
   241ac:	dfc00315 	stw	ra,12(sp)
   241b0:	88800e17 	ldw	r2,56(r17)
   241b4:	dc000015 	stw	r16,0(sp)
   241b8:	2025883a 	mov	r18,r4
   241bc:	10002826 	beq	r2,zero,24260 <__sfp+0xcc>
   241c0:	8c40b804 	addi	r17,r17,736
   241c4:	043fffc4 	movi	r16,-1
   241c8:	89400117 	ldw	r5,4(r17)
   241cc:	88800217 	ldw	r2,8(r17)
   241d0:	297fffc4 	addi	r5,r5,-1
   241d4:	28000a16 	blt	r5,zero,24200 <__sfp+0x6c>
   241d8:	10c0030f 	ldh	r3,12(r2)
   241dc:	18000c26 	beq	r3,zero,24210 <__sfp+0x7c>
   241e0:	10c01a04 	addi	r3,r2,104
   241e4:	00000206 	br	241f0 <__sfp+0x5c>
   241e8:	19bfe90f 	ldh	r6,-92(r3)
   241ec:	30000826 	beq	r6,zero,24210 <__sfp+0x7c>
   241f0:	297fffc4 	addi	r5,r5,-1
   241f4:	18bffd04 	addi	r2,r3,-12
   241f8:	18c01704 	addi	r3,r3,92
   241fc:	2c3ffa1e 	bne	r5,r16,241e8 <__sfp+0x54>
   24200:	88800017 	ldw	r2,0(r17)
   24204:	10001926 	beq	r2,zero,2426c <__sfp+0xd8>
   24208:	1023883a 	mov	r17,r2
   2420c:	003fee06 	br	241c8 <__sfp+0x34>
   24210:	00ffffc4 	movi	r3,-1
   24214:	10c0038d 	sth	r3,14(r2)
   24218:	00c00044 	movi	r3,1
   2421c:	10c0030d 	sth	r3,12(r2)
   24220:	10000015 	stw	zero,0(r2)
   24224:	10000215 	stw	zero,8(r2)
   24228:	10000115 	stw	zero,4(r2)
   2422c:	10000415 	stw	zero,16(r2)
   24230:	10000515 	stw	zero,20(r2)
   24234:	10000615 	stw	zero,24(r2)
   24238:	10000c15 	stw	zero,48(r2)
   2423c:	10000d15 	stw	zero,52(r2)
   24240:	10001115 	stw	zero,68(r2)
   24244:	10001215 	stw	zero,72(r2)
   24248:	dfc00317 	ldw	ra,12(sp)
   2424c:	dc800217 	ldw	r18,8(sp)
   24250:	dc400117 	ldw	r17,4(sp)
   24254:	dc000017 	ldw	r16,0(sp)
   24258:	dec00404 	addi	sp,sp,16
   2425c:	f800283a 	ret
   24260:	8809883a 	mov	r4,r17
   24264:	00240880 	call	24088 <__sinit>
   24268:	003fd506 	br	241c0 <__sfp+0x2c>
   2426c:	9009883a 	mov	r4,r18
   24270:	01400104 	movi	r5,4
   24274:	00240000 	call	24000 <__sfmoreglue>
   24278:	88800015 	stw	r2,0(r17)
   2427c:	103fe21e 	bne	r2,zero,24208 <__sfp+0x74>
   24280:	00800304 	movi	r2,12
   24284:	90800015 	stw	r2,0(r18)
   24288:	0005883a 	mov	r2,zero
   2428c:	003fee06 	br	24248 <__sfp+0xb4>

00024290 <__sfp_lock_acquire>:
   24290:	f800283a 	ret

00024294 <__sfp_lock_release>:
   24294:	f800283a 	ret

00024298 <__sinit_lock_acquire>:
   24298:	f800283a 	ret

0002429c <__sinit_lock_release>:
   2429c:	f800283a 	ret

000242a0 <__fp_lock_all>:
   242a0:	008000f4 	movhi	r2,3
   242a4:	10b93604 	addi	r2,r2,-6952
   242a8:	11000017 	ldw	r4,0(r2)
   242ac:	014000b4 	movhi	r5,2
   242b0:	294ff904 	addi	r5,r5,16356
   242b4:	0024bc01 	jmpi	24bc0 <_fwalk>

000242b8 <__fp_unlock_all>:
   242b8:	008000f4 	movhi	r2,3
   242bc:	10b93604 	addi	r2,r2,-6952
   242c0:	11000017 	ldw	r4,0(r2)
   242c4:	014000b4 	movhi	r5,2
   242c8:	294ffb04 	addi	r5,r5,16364
   242cc:	0024bc01 	jmpi	24bc0 <_fwalk>

000242d0 <_malloc_trim_r>:
   242d0:	defffb04 	addi	sp,sp,-20
   242d4:	dcc00315 	stw	r19,12(sp)
   242d8:	dc800215 	stw	r18,8(sp)
   242dc:	dc400115 	stw	r17,4(sp)
   242e0:	dc000015 	stw	r16,0(sp)
   242e4:	2827883a 	mov	r19,r5
   242e8:	dfc00415 	stw	ra,16(sp)
   242ec:	044000f4 	movhi	r17,3
   242f0:	8c73b104 	addi	r17,r17,-12604
   242f4:	2021883a 	mov	r16,r4
   242f8:	002a0600 	call	2a060 <__malloc_lock>
   242fc:	88800217 	ldw	r2,8(r17)
   24300:	14800117 	ldw	r18,4(r2)
   24304:	00bfff04 	movi	r2,-4
   24308:	90a4703a 	and	r18,r18,r2
   2430c:	9083fbc4 	addi	r2,r18,4079
   24310:	14e7c83a 	sub	r19,r2,r19
   24314:	9826d33a 	srli	r19,r19,12
   24318:	0083ffc4 	movi	r2,4095
   2431c:	9cffffc4 	addi	r19,r19,-1
   24320:	9826933a 	slli	r19,r19,12
   24324:	14c0060e 	bge	r2,r19,24340 <_malloc_trim_r+0x70>
   24328:	8009883a 	mov	r4,r16
   2432c:	000b883a 	mov	r5,zero
   24330:	00272780 	call	27278 <_sbrk_r>
   24334:	88c00217 	ldw	r3,8(r17)
   24338:	1c87883a 	add	r3,r3,r18
   2433c:	10c00a26 	beq	r2,r3,24368 <_malloc_trim_r+0x98>
   24340:	8009883a 	mov	r4,r16
   24344:	002a0800 	call	2a080 <__malloc_unlock>
   24348:	0005883a 	mov	r2,zero
   2434c:	dfc00417 	ldw	ra,16(sp)
   24350:	dcc00317 	ldw	r19,12(sp)
   24354:	dc800217 	ldw	r18,8(sp)
   24358:	dc400117 	ldw	r17,4(sp)
   2435c:	dc000017 	ldw	r16,0(sp)
   24360:	dec00504 	addi	sp,sp,20
   24364:	f800283a 	ret
   24368:	8009883a 	mov	r4,r16
   2436c:	04cbc83a 	sub	r5,zero,r19
   24370:	00272780 	call	27278 <_sbrk_r>
   24374:	00ffffc4 	movi	r3,-1
   24378:	10c01326 	beq	r2,r3,243c8 <_malloc_trim_r+0xf8>
   2437c:	008000f4 	movhi	r2,3
   24380:	10bfe704 	addi	r2,r2,-100
   24384:	11000017 	ldw	r4,0(r2)
   24388:	88c00217 	ldw	r3,8(r17)
   2438c:	94e5c83a 	sub	r18,r18,r19
   24390:	94800054 	ori	r18,r18,1
   24394:	24e7c83a 	sub	r19,r4,r19
   24398:	1c800115 	stw	r18,4(r3)
   2439c:	8009883a 	mov	r4,r16
   243a0:	14c00015 	stw	r19,0(r2)
   243a4:	002a0800 	call	2a080 <__malloc_unlock>
   243a8:	00800044 	movi	r2,1
   243ac:	dfc00417 	ldw	ra,16(sp)
   243b0:	dcc00317 	ldw	r19,12(sp)
   243b4:	dc800217 	ldw	r18,8(sp)
   243b8:	dc400117 	ldw	r17,4(sp)
   243bc:	dc000017 	ldw	r16,0(sp)
   243c0:	dec00504 	addi	sp,sp,20
   243c4:	f800283a 	ret
   243c8:	8009883a 	mov	r4,r16
   243cc:	000b883a 	mov	r5,zero
   243d0:	00272780 	call	27278 <_sbrk_r>
   243d4:	88c00217 	ldw	r3,8(r17)
   243d8:	014003c4 	movi	r5,15
   243dc:	10c9c83a 	sub	r4,r2,r3
   243e0:	293fd70e 	bge	r5,r4,24340 <_malloc_trim_r+0x70>
   243e4:	014000f4 	movhi	r5,3
   243e8:	29793804 	addi	r5,r5,-6944
   243ec:	29400017 	ldw	r5,0(r5)
   243f0:	21000054 	ori	r4,r4,1
   243f4:	19000115 	stw	r4,4(r3)
   243f8:	1145c83a 	sub	r2,r2,r5
   243fc:	014000f4 	movhi	r5,3
   24400:	297fe704 	addi	r5,r5,-100
   24404:	28800015 	stw	r2,0(r5)
   24408:	003fcd06 	br	24340 <_malloc_trim_r+0x70>

0002440c <_free_r>:
   2440c:	defffd04 	addi	sp,sp,-12
   24410:	dc400115 	stw	r17,4(sp)
   24414:	dc000015 	stw	r16,0(sp)
   24418:	dfc00215 	stw	ra,8(sp)
   2441c:	2821883a 	mov	r16,r5
   24420:	2023883a 	mov	r17,r4
   24424:	28004b26 	beq	r5,zero,24554 <_free_r+0x148>
   24428:	002a0600 	call	2a060 <__malloc_lock>
   2442c:	823fff17 	ldw	r8,-4(r16)
   24430:	00bfff84 	movi	r2,-2
   24434:	81bffe04 	addi	r6,r16,-8
   24438:	4084703a 	and	r2,r8,r2
   2443c:	3087883a 	add	r3,r6,r2
   24440:	014000f4 	movhi	r5,3
   24444:	2973b104 	addi	r5,r5,-12604
   24448:	1a400117 	ldw	r9,4(r3)
   2444c:	29000217 	ldw	r4,8(r5)
   24450:	01ffff04 	movi	r7,-4
   24454:	49ce703a 	and	r7,r9,r7
   24458:	20c06526 	beq	r4,r3,245f0 <_free_r+0x1e4>
   2445c:	19c00115 	stw	r7,4(r3)
   24460:	4200004c 	andi	r8,r8,1
   24464:	40003026 	beq	r8,zero,24528 <_free_r+0x11c>
   24468:	0009883a 	mov	r4,zero
   2446c:	19d1883a 	add	r8,r3,r7
   24470:	42000117 	ldw	r8,4(r8)
   24474:	4200004c 	andi	r8,r8,1
   24478:	4000061e 	bne	r8,zero,24494 <_free_r+0x88>
   2447c:	11c5883a 	add	r2,r2,r7
   24480:	19c00217 	ldw	r7,8(r3)
   24484:	20004e26 	beq	r4,zero,245c0 <_free_r+0x1b4>
   24488:	18c00317 	ldw	r3,12(r3)
   2448c:	38c00315 	stw	r3,12(r7)
   24490:	19c00215 	stw	r7,8(r3)
   24494:	11c00054 	ori	r7,r2,1
   24498:	3087883a 	add	r3,r6,r2
   2449c:	31c00115 	stw	r7,4(r6)
   244a0:	18800015 	stw	r2,0(r3)
   244a4:	20001a1e 	bne	r4,zero,24510 <_free_r+0x104>
   244a8:	00c07fc4 	movi	r3,511
   244ac:	18802e2e 	bgeu	r3,r2,24568 <_free_r+0x15c>
   244b0:	1006d27a 	srli	r3,r2,9
   244b4:	01000104 	movi	r4,4
   244b8:	20c06636 	bltu	r4,r3,24654 <_free_r+0x248>
   244bc:	1008d1ba 	srli	r4,r2,6
   244c0:	21000e04 	addi	r4,r4,56
   244c4:	210f883a 	add	r7,r4,r4
   244c8:	39cf883a 	add	r7,r7,r7
   244cc:	39cf883a 	add	r7,r7,r7
   244d0:	29cf883a 	add	r7,r5,r7
   244d4:	38c00217 	ldw	r3,8(r7)
   244d8:	014000f4 	movhi	r5,3
   244dc:	2973b104 	addi	r5,r5,-12604
   244e0:	19c06126 	beq	r3,r7,24668 <_free_r+0x25c>
   244e4:	013fff04 	movi	r4,-4
   244e8:	19400117 	ldw	r5,4(r3)
   244ec:	290a703a 	and	r5,r5,r4
   244f0:	1140022e 	bgeu	r2,r5,244fc <_free_r+0xf0>
   244f4:	18c00217 	ldw	r3,8(r3)
   244f8:	38fffb1e 	bne	r7,r3,244e8 <_free_r+0xdc>
   244fc:	18800317 	ldw	r2,12(r3)
   24500:	30800315 	stw	r2,12(r6)
   24504:	30c00215 	stw	r3,8(r6)
   24508:	11800215 	stw	r6,8(r2)
   2450c:	19800315 	stw	r6,12(r3)
   24510:	8809883a 	mov	r4,r17
   24514:	dfc00217 	ldw	ra,8(sp)
   24518:	dc400117 	ldw	r17,4(sp)
   2451c:	dc000017 	ldw	r16,0(sp)
   24520:	dec00304 	addi	sp,sp,12
   24524:	002a0801 	jmpi	2a080 <__malloc_unlock>
   24528:	813ffe17 	ldw	r4,-8(r16)
   2452c:	2a400204 	addi	r9,r5,8
   24530:	310dc83a 	sub	r6,r6,r4
   24534:	32000217 	ldw	r8,8(r6)
   24538:	1105883a 	add	r2,r2,r4
   2453c:	42404326 	beq	r8,r9,2464c <_free_r+0x240>
   24540:	32400317 	ldw	r9,12(r6)
   24544:	0009883a 	mov	r4,zero
   24548:	42400315 	stw	r9,12(r8)
   2454c:	4a000215 	stw	r8,8(r9)
   24550:	003fc606 	br	2446c <_free_r+0x60>
   24554:	dfc00217 	ldw	ra,8(sp)
   24558:	dc400117 	ldw	r17,4(sp)
   2455c:	dc000017 	ldw	r16,0(sp)
   24560:	dec00304 	addi	sp,sp,12
   24564:	f800283a 	ret
   24568:	1004d0fa 	srli	r2,r2,3
   2456c:	02000044 	movi	r8,1
   24570:	29c00117 	ldw	r7,4(r5)
   24574:	1087883a 	add	r3,r2,r2
   24578:	18c7883a 	add	r3,r3,r3
   2457c:	1005d0ba 	srai	r2,r2,2
   24580:	18c7883a 	add	r3,r3,r3
   24584:	28c7883a 	add	r3,r5,r3
   24588:	19000217 	ldw	r4,8(r3)
   2458c:	4084983a 	sll	r2,r8,r2
   24590:	30c00315 	stw	r3,12(r6)
   24594:	31000215 	stw	r4,8(r6)
   24598:	11c4b03a 	or	r2,r2,r7
   2459c:	21800315 	stw	r6,12(r4)
   245a0:	8809883a 	mov	r4,r17
   245a4:	28800115 	stw	r2,4(r5)
   245a8:	19800215 	stw	r6,8(r3)
   245ac:	dfc00217 	ldw	ra,8(sp)
   245b0:	dc400117 	ldw	r17,4(sp)
   245b4:	dc000017 	ldw	r16,0(sp)
   245b8:	dec00304 	addi	sp,sp,12
   245bc:	002a0801 	jmpi	2a080 <__malloc_unlock>
   245c0:	020000f4 	movhi	r8,3
   245c4:	4233b304 	addi	r8,r8,-12596
   245c8:	3a3faf1e 	bne	r7,r8,24488 <_free_r+0x7c>
   245cc:	29800515 	stw	r6,20(r5)
   245d0:	29800415 	stw	r6,16(r5)
   245d4:	11000054 	ori	r4,r2,1
   245d8:	3087883a 	add	r3,r6,r2
   245dc:	31c00315 	stw	r7,12(r6)
   245e0:	31c00215 	stw	r7,8(r6)
   245e4:	31000115 	stw	r4,4(r6)
   245e8:	18800015 	stw	r2,0(r3)
   245ec:	003fc806 	br	24510 <_free_r+0x104>
   245f0:	4200004c 	andi	r8,r8,1
   245f4:	3885883a 	add	r2,r7,r2
   245f8:	4000071e 	bne	r8,zero,24618 <_free_r+0x20c>
   245fc:	81fffe17 	ldw	r7,-8(r16)
   24600:	31cdc83a 	sub	r6,r6,r7
   24604:	30c00317 	ldw	r3,12(r6)
   24608:	31000217 	ldw	r4,8(r6)
   2460c:	11c5883a 	add	r2,r2,r7
   24610:	20c00315 	stw	r3,12(r4)
   24614:	19000215 	stw	r4,8(r3)
   24618:	00c000f4 	movhi	r3,3
   2461c:	18f93904 	addi	r3,r3,-6940
   24620:	18c00017 	ldw	r3,0(r3)
   24624:	11000054 	ori	r4,r2,1
   24628:	31000115 	stw	r4,4(r6)
   2462c:	29800215 	stw	r6,8(r5)
   24630:	10ffb736 	bltu	r2,r3,24510 <_free_r+0x104>
   24634:	008000f4 	movhi	r2,3
   24638:	10bfdf04 	addi	r2,r2,-132
   2463c:	11400017 	ldw	r5,0(r2)
   24640:	8809883a 	mov	r4,r17
   24644:	00242d00 	call	242d0 <_malloc_trim_r>
   24648:	003fb106 	br	24510 <_free_r+0x104>
   2464c:	01000044 	movi	r4,1
   24650:	003f8606 	br	2446c <_free_r+0x60>
   24654:	01000504 	movi	r4,20
   24658:	20c00b36 	bltu	r4,r3,24688 <_free_r+0x27c>
   2465c:	190016c4 	addi	r4,r3,91
   24660:	210f883a 	add	r7,r4,r4
   24664:	003f9806 	br	244c8 <_free_r+0xbc>
   24668:	2009d0ba 	srai	r4,r4,2
   2466c:	00800044 	movi	r2,1
   24670:	29c00117 	ldw	r7,4(r5)
   24674:	1108983a 	sll	r4,r2,r4
   24678:	1805883a 	mov	r2,r3
   2467c:	21c8b03a 	or	r4,r4,r7
   24680:	29000115 	stw	r4,4(r5)
   24684:	003f9e06 	br	24500 <_free_r+0xf4>
   24688:	01001504 	movi	r4,84
   2468c:	20c00436 	bltu	r4,r3,246a0 <_free_r+0x294>
   24690:	1008d33a 	srli	r4,r2,12
   24694:	21001b84 	addi	r4,r4,110
   24698:	210f883a 	add	r7,r4,r4
   2469c:	003f8a06 	br	244c8 <_free_r+0xbc>
   246a0:	01005504 	movi	r4,340
   246a4:	20c00436 	bltu	r4,r3,246b8 <_free_r+0x2ac>
   246a8:	1008d3fa 	srli	r4,r2,15
   246ac:	21001dc4 	addi	r4,r4,119
   246b0:	210f883a 	add	r7,r4,r4
   246b4:	003f8406 	br	244c8 <_free_r+0xbc>
   246b8:	01015504 	movi	r4,1364
   246bc:	20c00436 	bltu	r4,r3,246d0 <_free_r+0x2c4>
   246c0:	1008d4ba 	srli	r4,r2,18
   246c4:	21001f04 	addi	r4,r4,124
   246c8:	210f883a 	add	r7,r4,r4
   246cc:	003f7e06 	br	244c8 <_free_r+0xbc>
   246d0:	01c03f04 	movi	r7,252
   246d4:	01001f84 	movi	r4,126
   246d8:	003f7b06 	br	244c8 <_free_r+0xbc>

000246dc <__sfvwrite_r>:
   246dc:	30800217 	ldw	r2,8(r6)
   246e0:	defff504 	addi	sp,sp,-44
   246e4:	dd400615 	stw	r21,24(sp)
   246e8:	dd000515 	stw	r20,20(sp)
   246ec:	dc000115 	stw	r16,4(sp)
   246f0:	dfc00a15 	stw	ra,40(sp)
   246f4:	df000915 	stw	fp,36(sp)
   246f8:	ddc00815 	stw	r23,32(sp)
   246fc:	dd800715 	stw	r22,28(sp)
   24700:	dcc00415 	stw	r19,16(sp)
   24704:	dc800315 	stw	r18,12(sp)
   24708:	dc400215 	stw	r17,8(sp)
   2470c:	3029883a 	mov	r20,r6
   24710:	202b883a 	mov	r21,r4
   24714:	2821883a 	mov	r16,r5
   24718:	10002126 	beq	r2,zero,247a0 <__sfvwrite_r+0xc4>
   2471c:	2880030b 	ldhu	r2,12(r5)
   24720:	10c0020c 	andi	r3,r2,8
   24724:	18ffffcc 	andi	r3,r3,65535
   24728:	18e0001c 	xori	r3,r3,32768
   2472c:	18e00004 	addi	r3,r3,-32768
   24730:	18002826 	beq	r3,zero,247d4 <__sfvwrite_r+0xf8>
   24734:	28c00417 	ldw	r3,16(r5)
   24738:	18002626 	beq	r3,zero,247d4 <__sfvwrite_r+0xf8>
   2473c:	10c0008c 	andi	r3,r2,2
   24740:	18ffffcc 	andi	r3,r3,65535
   24744:	18e0001c 	xori	r3,r3,32768
   24748:	18e00004 	addi	r3,r3,-32768
   2474c:	a4400017 	ldw	r17,0(r20)
   24750:	18002b26 	beq	r3,zero,24800 <__sfvwrite_r+0x124>
   24754:	0027883a 	mov	r19,zero
   24758:	0025883a 	mov	r18,zero
   2475c:	05810004 	movi	r22,1024
   24760:	980d883a 	mov	r6,r19
   24764:	a809883a 	mov	r4,r21
   24768:	90004f26 	beq	r18,zero,248a8 <__sfvwrite_r+0x1cc>
   2476c:	900f883a 	mov	r7,r18
   24770:	81400717 	ldw	r5,28(r16)
   24774:	b480012e 	bgeu	r22,r18,2477c <__sfvwrite_r+0xa0>
   24778:	01c10004 	movi	r7,1024
   2477c:	80800917 	ldw	r2,36(r16)
   24780:	103ee83a 	callr	r2
   24784:	0080540e 	bge	zero,r2,248d8 <__sfvwrite_r+0x1fc>
   24788:	a0c00217 	ldw	r3,8(r20)
   2478c:	98a7883a 	add	r19,r19,r2
   24790:	90a5c83a 	sub	r18,r18,r2
   24794:	1885c83a 	sub	r2,r3,r2
   24798:	a0800215 	stw	r2,8(r20)
   2479c:	103ff01e 	bne	r2,zero,24760 <__sfvwrite_r+0x84>
   247a0:	0005883a 	mov	r2,zero
   247a4:	dfc00a17 	ldw	ra,40(sp)
   247a8:	df000917 	ldw	fp,36(sp)
   247ac:	ddc00817 	ldw	r23,32(sp)
   247b0:	dd800717 	ldw	r22,28(sp)
   247b4:	dd400617 	ldw	r21,24(sp)
   247b8:	dd000517 	ldw	r20,20(sp)
   247bc:	dcc00417 	ldw	r19,16(sp)
   247c0:	dc800317 	ldw	r18,12(sp)
   247c4:	dc400217 	ldw	r17,8(sp)
   247c8:	dc000117 	ldw	r16,4(sp)
   247cc:	dec00b04 	addi	sp,sp,44
   247d0:	f800283a 	ret
   247d4:	a809883a 	mov	r4,r21
   247d8:	800b883a 	mov	r5,r16
   247dc:	00224000 	call	22400 <__swsetup_r>
   247e0:	1000f01e 	bne	r2,zero,24ba4 <__sfvwrite_r+0x4c8>
   247e4:	8080030b 	ldhu	r2,12(r16)
   247e8:	a4400017 	ldw	r17,0(r20)
   247ec:	10c0008c 	andi	r3,r2,2
   247f0:	18ffffcc 	andi	r3,r3,65535
   247f4:	18e0001c 	xori	r3,r3,32768
   247f8:	18e00004 	addi	r3,r3,-32768
   247fc:	183fd51e 	bne	r3,zero,24754 <__sfvwrite_r+0x78>
   24800:	10c0004c 	andi	r3,r2,1
   24804:	002d883a 	mov	r22,zero
   24808:	1800381e 	bne	r3,zero,248ec <__sfvwrite_r+0x210>
   2480c:	0025883a 	mov	r18,zero
   24810:	90002126 	beq	r18,zero,24898 <__sfvwrite_r+0x1bc>
   24814:	10c0800c 	andi	r3,r2,512
   24818:	18ffffcc 	andi	r3,r3,65535
   2481c:	18e0001c 	xori	r3,r3,32768
   24820:	18e00004 	addi	r3,r3,-32768
   24824:	84c00217 	ldw	r19,8(r16)
   24828:	18006b26 	beq	r3,zero,249d8 <__sfvwrite_r+0x2fc>
   2482c:	980f883a 	mov	r7,r19
   24830:	94c08636 	bltu	r18,r19,24a4c <__sfvwrite_r+0x370>
   24834:	10c1200c 	andi	r3,r2,1152
   24838:	18009f1e 	bne	r3,zero,24ab8 <__sfvwrite_r+0x3dc>
   2483c:	81000017 	ldw	r4,0(r16)
   24840:	982f883a 	mov	r23,r19
   24844:	9039883a 	mov	fp,r18
   24848:	9027883a 	mov	r19,r18
   2484c:	380d883a 	mov	r6,r7
   24850:	b00b883a 	mov	r5,r22
   24854:	d9c00015 	stw	r7,0(sp)
   24858:	00259600 	call	25960 <memmove>
   2485c:	d9c00017 	ldw	r7,0(sp)
   24860:	81000217 	ldw	r4,8(r16)
   24864:	80800017 	ldw	r2,0(r16)
   24868:	25efc83a 	sub	r23,r4,r23
   2486c:	11cf883a 	add	r7,r2,r7
   24870:	85c00215 	stw	r23,8(r16)
   24874:	81c00015 	stw	r7,0(r16)
   24878:	a0800217 	ldw	r2,8(r20)
   2487c:	b72d883a 	add	r22,r22,fp
   24880:	9725c83a 	sub	r18,r18,fp
   24884:	14e7c83a 	sub	r19,r2,r19
   24888:	a4c00215 	stw	r19,8(r20)
   2488c:	983fc426 	beq	r19,zero,247a0 <__sfvwrite_r+0xc4>
   24890:	8080030b 	ldhu	r2,12(r16)
   24894:	903fdf1e 	bne	r18,zero,24814 <__sfvwrite_r+0x138>
   24898:	8d800017 	ldw	r22,0(r17)
   2489c:	8c800117 	ldw	r18,4(r17)
   248a0:	8c400204 	addi	r17,r17,8
   248a4:	003fda06 	br	24810 <__sfvwrite_r+0x134>
   248a8:	8cc00017 	ldw	r19,0(r17)
   248ac:	8c800117 	ldw	r18,4(r17)
   248b0:	8c400204 	addi	r17,r17,8
   248b4:	003faa06 	br	24760 <__sfvwrite_r+0x84>
   248b8:	0026c180 	call	26c18 <_realloc_r>
   248bc:	102f883a 	mov	r23,r2
   248c0:	10009f1e 	bne	r2,zero,24b40 <__sfvwrite_r+0x464>
   248c4:	81400417 	ldw	r5,16(r16)
   248c8:	a809883a 	mov	r4,r21
   248cc:	002440c0 	call	2440c <_free_r>
   248d0:	00800304 	movi	r2,12
   248d4:	a8800015 	stw	r2,0(r21)
   248d8:	80c0030b 	ldhu	r3,12(r16)
   248dc:	00bfffc4 	movi	r2,-1
   248e0:	18c01014 	ori	r3,r3,64
   248e4:	80c0030d 	sth	r3,12(r16)
   248e8:	003fae06 	br	247a4 <__sfvwrite_r+0xc8>
   248ec:	0007883a 	mov	r3,zero
   248f0:	0039883a 	mov	fp,zero
   248f4:	0025883a 	mov	r18,zero
   248f8:	90001e26 	beq	r18,zero,24974 <__sfvwrite_r+0x298>
   248fc:	18006526 	beq	r3,zero,24a94 <__sfvwrite_r+0x3b8>
   24900:	b02f883a 	mov	r23,r22
   24904:	9580012e 	bgeu	r18,r22,2490c <__sfvwrite_r+0x230>
   24908:	902f883a 	mov	r23,r18
   2490c:	81000017 	ldw	r4,0(r16)
   24910:	80800417 	ldw	r2,16(r16)
   24914:	84c00217 	ldw	r19,8(r16)
   24918:	81c00517 	ldw	r7,20(r16)
   2491c:	1100022e 	bgeu	r2,r4,24928 <__sfvwrite_r+0x24c>
   24920:	99e7883a 	add	r19,r19,r7
   24924:	9dc01816 	blt	r19,r23,24988 <__sfvwrite_r+0x2ac>
   24928:	b9c03b16 	blt	r23,r7,24a18 <__sfvwrite_r+0x33c>
   2492c:	80800917 	ldw	r2,36(r16)
   24930:	81400717 	ldw	r5,28(r16)
   24934:	a809883a 	mov	r4,r21
   24938:	d8c00015 	stw	r3,0(sp)
   2493c:	e00d883a 	mov	r6,fp
   24940:	103ee83a 	callr	r2
   24944:	1027883a 	mov	r19,r2
   24948:	d8c00017 	ldw	r3,0(sp)
   2494c:	00bfe20e 	bge	zero,r2,248d8 <__sfvwrite_r+0x1fc>
   24950:	b4edc83a 	sub	r22,r22,r19
   24954:	b0001a26 	beq	r22,zero,249c0 <__sfvwrite_r+0x2e4>
   24958:	a0800217 	ldw	r2,8(r20)
   2495c:	e4f9883a 	add	fp,fp,r19
   24960:	94e5c83a 	sub	r18,r18,r19
   24964:	14e7c83a 	sub	r19,r2,r19
   24968:	a4c00215 	stw	r19,8(r20)
   2496c:	983f8c26 	beq	r19,zero,247a0 <__sfvwrite_r+0xc4>
   24970:	903fe21e 	bne	r18,zero,248fc <__sfvwrite_r+0x220>
   24974:	8f000017 	ldw	fp,0(r17)
   24978:	8c800117 	ldw	r18,4(r17)
   2497c:	0007883a 	mov	r3,zero
   24980:	8c400204 	addi	r17,r17,8
   24984:	003fdc06 	br	248f8 <__sfvwrite_r+0x21c>
   24988:	e00b883a 	mov	r5,fp
   2498c:	980d883a 	mov	r6,r19
   24990:	d8c00015 	stw	r3,0(sp)
   24994:	00259600 	call	25960 <memmove>
   24998:	80800017 	ldw	r2,0(r16)
   2499c:	a809883a 	mov	r4,r21
   249a0:	800b883a 	mov	r5,r16
   249a4:	14c5883a 	add	r2,r2,r19
   249a8:	80800015 	stw	r2,0(r16)
   249ac:	0023dcc0 	call	23dcc <_fflush_r>
   249b0:	d8c00017 	ldw	r3,0(sp)
   249b4:	103fc81e 	bne	r2,zero,248d8 <__sfvwrite_r+0x1fc>
   249b8:	b4edc83a 	sub	r22,r22,r19
   249bc:	b03fe61e 	bne	r22,zero,24958 <__sfvwrite_r+0x27c>
   249c0:	a809883a 	mov	r4,r21
   249c4:	800b883a 	mov	r5,r16
   249c8:	0023dcc0 	call	23dcc <_fflush_r>
   249cc:	103fc21e 	bne	r2,zero,248d8 <__sfvwrite_r+0x1fc>
   249d0:	0007883a 	mov	r3,zero
   249d4:	003fe006 	br	24958 <__sfvwrite_r+0x27c>
   249d8:	81000017 	ldw	r4,0(r16)
   249dc:	80800417 	ldw	r2,16(r16)
   249e0:	1100022e 	bgeu	r2,r4,249ec <__sfvwrite_r+0x310>
   249e4:	9839883a 	mov	fp,r19
   249e8:	9c806036 	bltu	r19,r18,24b6c <__sfvwrite_r+0x490>
   249ec:	81c00517 	ldw	r7,20(r16)
   249f0:	91c01c36 	bltu	r18,r7,24a64 <__sfvwrite_r+0x388>
   249f4:	80800917 	ldw	r2,36(r16)
   249f8:	81400717 	ldw	r5,28(r16)
   249fc:	a809883a 	mov	r4,r21
   24a00:	b00d883a 	mov	r6,r22
   24a04:	103ee83a 	callr	r2
   24a08:	1027883a 	mov	r19,r2
   24a0c:	00bfb20e 	bge	zero,r2,248d8 <__sfvwrite_r+0x1fc>
   24a10:	1039883a 	mov	fp,r2
   24a14:	003f9806 	br	24878 <__sfvwrite_r+0x19c>
   24a18:	b80d883a 	mov	r6,r23
   24a1c:	e00b883a 	mov	r5,fp
   24a20:	d8c00015 	stw	r3,0(sp)
   24a24:	00259600 	call	25960 <memmove>
   24a28:	80800217 	ldw	r2,8(r16)
   24a2c:	81000017 	ldw	r4,0(r16)
   24a30:	b827883a 	mov	r19,r23
   24a34:	15c5c83a 	sub	r2,r2,r23
   24a38:	25ef883a 	add	r23,r4,r23
   24a3c:	80800215 	stw	r2,8(r16)
   24a40:	85c00015 	stw	r23,0(r16)
   24a44:	d8c00017 	ldw	r3,0(sp)
   24a48:	003fc106 	br	24950 <__sfvwrite_r+0x274>
   24a4c:	81000017 	ldw	r4,0(r16)
   24a50:	902f883a 	mov	r23,r18
   24a54:	9039883a 	mov	fp,r18
   24a58:	9027883a 	mov	r19,r18
   24a5c:	900f883a 	mov	r7,r18
   24a60:	003f7a06 	br	2484c <__sfvwrite_r+0x170>
   24a64:	b00b883a 	mov	r5,r22
   24a68:	900d883a 	mov	r6,r18
   24a6c:	00259600 	call	25960 <memmove>
   24a70:	80c00217 	ldw	r3,8(r16)
   24a74:	80800017 	ldw	r2,0(r16)
   24a78:	9027883a 	mov	r19,r18
   24a7c:	1c87c83a 	sub	r3,r3,r18
   24a80:	1485883a 	add	r2,r2,r18
   24a84:	80c00215 	stw	r3,8(r16)
   24a88:	80800015 	stw	r2,0(r16)
   24a8c:	9039883a 	mov	fp,r18
   24a90:	003f7906 	br	24878 <__sfvwrite_r+0x19c>
   24a94:	e009883a 	mov	r4,fp
   24a98:	01400284 	movi	r5,10
   24a9c:	900d883a 	mov	r6,r18
   24aa0:	00257280 	call	25728 <memchr>
   24aa4:	10003c26 	beq	r2,zero,24b98 <__sfvwrite_r+0x4bc>
   24aa8:	15800044 	addi	r22,r2,1
   24aac:	b72dc83a 	sub	r22,r22,fp
   24ab0:	00c00044 	movi	r3,1
   24ab4:	003f9206 	br	24900 <__sfvwrite_r+0x224>
   24ab8:	81000517 	ldw	r4,20(r16)
   24abc:	81400417 	ldw	r5,16(r16)
   24ac0:	80c00017 	ldw	r3,0(r16)
   24ac4:	210d883a 	add	r6,r4,r4
   24ac8:	3109883a 	add	r4,r6,r4
   24acc:	2026d7fa 	srli	r19,r4,31
   24ad0:	1979c83a 	sub	fp,r3,r5
   24ad4:	e1800044 	addi	r6,fp,1
   24ad8:	9909883a 	add	r4,r19,r4
   24adc:	2027d07a 	srai	r19,r4,1
   24ae0:	3489883a 	add	r4,r6,r18
   24ae4:	980d883a 	mov	r6,r19
   24ae8:	9900022e 	bgeu	r19,r4,24af4 <__sfvwrite_r+0x418>
   24aec:	2027883a 	mov	r19,r4
   24af0:	200d883a 	mov	r6,r4
   24af4:	1081000c 	andi	r2,r2,1024
   24af8:	10bfffcc 	andi	r2,r2,65535
   24afc:	10a0001c 	xori	r2,r2,32768
   24b00:	10a00004 	addi	r2,r2,-32768
   24b04:	a809883a 	mov	r4,r21
   24b08:	103f6b26 	beq	r2,zero,248b8 <__sfvwrite_r+0x1dc>
   24b0c:	300b883a 	mov	r5,r6
   24b10:	0024fa40 	call	24fa4 <_malloc_r>
   24b14:	102f883a 	mov	r23,r2
   24b18:	103f6d26 	beq	r2,zero,248d0 <__sfvwrite_r+0x1f4>
   24b1c:	81400417 	ldw	r5,16(r16)
   24b20:	1009883a 	mov	r4,r2
   24b24:	e00d883a 	mov	r6,fp
   24b28:	00258200 	call	25820 <memcpy>
   24b2c:	8080030b 	ldhu	r2,12(r16)
   24b30:	00fedfc4 	movi	r3,-1153
   24b34:	10c4703a 	and	r2,r2,r3
   24b38:	10802014 	ori	r2,r2,128
   24b3c:	8080030d 	sth	r2,12(r16)
   24b40:	bf09883a 	add	r4,r23,fp
   24b44:	9f07c83a 	sub	r3,r19,fp
   24b48:	85c00415 	stw	r23,16(r16)
   24b4c:	84c00515 	stw	r19,20(r16)
   24b50:	81000015 	stw	r4,0(r16)
   24b54:	902f883a 	mov	r23,r18
   24b58:	80c00215 	stw	r3,8(r16)
   24b5c:	9039883a 	mov	fp,r18
   24b60:	9027883a 	mov	r19,r18
   24b64:	900f883a 	mov	r7,r18
   24b68:	003f3806 	br	2484c <__sfvwrite_r+0x170>
   24b6c:	b00b883a 	mov	r5,r22
   24b70:	980d883a 	mov	r6,r19
   24b74:	00259600 	call	25960 <memmove>
   24b78:	80800017 	ldw	r2,0(r16)
   24b7c:	a809883a 	mov	r4,r21
   24b80:	800b883a 	mov	r5,r16
   24b84:	14c5883a 	add	r2,r2,r19
   24b88:	80800015 	stw	r2,0(r16)
   24b8c:	0023dcc0 	call	23dcc <_fflush_r>
   24b90:	103f3926 	beq	r2,zero,24878 <__sfvwrite_r+0x19c>
   24b94:	003f5006 	br	248d8 <__sfvwrite_r+0x1fc>
   24b98:	95800044 	addi	r22,r18,1
   24b9c:	00c00044 	movi	r3,1
   24ba0:	003f5706 	br	24900 <__sfvwrite_r+0x224>
   24ba4:	80c0030b 	ldhu	r3,12(r16)
   24ba8:	00bfffc4 	movi	r2,-1
   24bac:	18c01014 	ori	r3,r3,64
   24bb0:	80c0030d 	sth	r3,12(r16)
   24bb4:	00c00244 	movi	r3,9
   24bb8:	a8c00015 	stw	r3,0(r21)
   24bbc:	003ef906 	br	247a4 <__sfvwrite_r+0xc8>

00024bc0 <_fwalk>:
   24bc0:	defff904 	addi	sp,sp,-28
   24bc4:	dcc00315 	stw	r19,12(sp)
   24bc8:	24c0b804 	addi	r19,r4,736
   24bcc:	dd400515 	stw	r21,20(sp)
   24bd0:	dd000415 	stw	r20,16(sp)
   24bd4:	dfc00615 	stw	ra,24(sp)
   24bd8:	dc800215 	stw	r18,8(sp)
   24bdc:	dc400115 	stw	r17,4(sp)
   24be0:	dc000015 	stw	r16,0(sp)
   24be4:	282b883a 	mov	r21,r5
   24be8:	0029883a 	mov	r20,zero
   24bec:	00242900 	call	24290 <__sfp_lock_acquire>
   24bf0:	98001226 	beq	r19,zero,24c3c <_fwalk+0x7c>
   24bf4:	04bfffc4 	movi	r18,-1
   24bf8:	9c400117 	ldw	r17,4(r19)
   24bfc:	9c000217 	ldw	r16,8(r19)
   24c00:	8c7fffc4 	addi	r17,r17,-1
   24c04:	88000b16 	blt	r17,zero,24c34 <_fwalk+0x74>
   24c08:	84000304 	addi	r16,r16,12
   24c0c:	80c0000f 	ldh	r3,0(r16)
   24c10:	8c7fffc4 	addi	r17,r17,-1
   24c14:	813ffd04 	addi	r4,r16,-12
   24c18:	18000426 	beq	r3,zero,24c2c <_fwalk+0x6c>
   24c1c:	80c0008f 	ldh	r3,2(r16)
   24c20:	1c800226 	beq	r3,r18,24c2c <_fwalk+0x6c>
   24c24:	a83ee83a 	callr	r21
   24c28:	a0a8b03a 	or	r20,r20,r2
   24c2c:	84001704 	addi	r16,r16,92
   24c30:	8cbff61e 	bne	r17,r18,24c0c <_fwalk+0x4c>
   24c34:	9cc00017 	ldw	r19,0(r19)
   24c38:	983fef1e 	bne	r19,zero,24bf8 <_fwalk+0x38>
   24c3c:	00242940 	call	24294 <__sfp_lock_release>
   24c40:	a005883a 	mov	r2,r20
   24c44:	dfc00617 	ldw	ra,24(sp)
   24c48:	dd400517 	ldw	r21,20(sp)
   24c4c:	dd000417 	ldw	r20,16(sp)
   24c50:	dcc00317 	ldw	r19,12(sp)
   24c54:	dc800217 	ldw	r18,8(sp)
   24c58:	dc400117 	ldw	r17,4(sp)
   24c5c:	dc000017 	ldw	r16,0(sp)
   24c60:	dec00704 	addi	sp,sp,28
   24c64:	f800283a 	ret

00024c68 <_fwalk_reent>:
   24c68:	defff804 	addi	sp,sp,-32
   24c6c:	dcc00315 	stw	r19,12(sp)
   24c70:	24c0b804 	addi	r19,r4,736
   24c74:	dd800615 	stw	r22,24(sp)
   24c78:	dd400515 	stw	r21,20(sp)
   24c7c:	dd000415 	stw	r20,16(sp)
   24c80:	dfc00715 	stw	ra,28(sp)
   24c84:	dc800215 	stw	r18,8(sp)
   24c88:	dc400115 	stw	r17,4(sp)
   24c8c:	dc000015 	stw	r16,0(sp)
   24c90:	2029883a 	mov	r20,r4
   24c94:	282b883a 	mov	r21,r5
   24c98:	002d883a 	mov	r22,zero
   24c9c:	00242900 	call	24290 <__sfp_lock_acquire>
   24ca0:	98001326 	beq	r19,zero,24cf0 <_fwalk_reent+0x88>
   24ca4:	04bfffc4 	movi	r18,-1
   24ca8:	9c400117 	ldw	r17,4(r19)
   24cac:	9c000217 	ldw	r16,8(r19)
   24cb0:	8c7fffc4 	addi	r17,r17,-1
   24cb4:	88000c16 	blt	r17,zero,24ce8 <_fwalk_reent+0x80>
   24cb8:	84000304 	addi	r16,r16,12
   24cbc:	80c0000f 	ldh	r3,0(r16)
   24cc0:	8c7fffc4 	addi	r17,r17,-1
   24cc4:	817ffd04 	addi	r5,r16,-12
   24cc8:	18000526 	beq	r3,zero,24ce0 <_fwalk_reent+0x78>
   24ccc:	80c0008f 	ldh	r3,2(r16)
   24cd0:	a009883a 	mov	r4,r20
   24cd4:	1c800226 	beq	r3,r18,24ce0 <_fwalk_reent+0x78>
   24cd8:	a83ee83a 	callr	r21
   24cdc:	b0acb03a 	or	r22,r22,r2
   24ce0:	84001704 	addi	r16,r16,92
   24ce4:	8cbff51e 	bne	r17,r18,24cbc <_fwalk_reent+0x54>
   24ce8:	9cc00017 	ldw	r19,0(r19)
   24cec:	983fee1e 	bne	r19,zero,24ca8 <_fwalk_reent+0x40>
   24cf0:	00242940 	call	24294 <__sfp_lock_release>
   24cf4:	b005883a 	mov	r2,r22
   24cf8:	dfc00717 	ldw	ra,28(sp)
   24cfc:	dd800617 	ldw	r22,24(sp)
   24d00:	dd400517 	ldw	r21,20(sp)
   24d04:	dd000417 	ldw	r20,16(sp)
   24d08:	dcc00317 	ldw	r19,12(sp)
   24d0c:	dc800217 	ldw	r18,8(sp)
   24d10:	dc400117 	ldw	r17,4(sp)
   24d14:	dc000017 	ldw	r16,0(sp)
   24d18:	dec00804 	addi	sp,sp,32
   24d1c:	f800283a 	ret

00024d20 <_setlocale_r>:
   24d20:	defffc04 	addi	sp,sp,-16
   24d24:	dc800215 	stw	r18,8(sp)
   24d28:	dc400115 	stw	r17,4(sp)
   24d2c:	dc000015 	stw	r16,0(sp)
   24d30:	dfc00315 	stw	ra,12(sp)
   24d34:	3021883a 	mov	r16,r6
   24d38:	2023883a 	mov	r17,r4
   24d3c:	2825883a 	mov	r18,r5
   24d40:	30001626 	beq	r6,zero,24d9c <_setlocale_r+0x7c>
   24d44:	3009883a 	mov	r4,r6
   24d48:	014000f4 	movhi	r5,3
   24d4c:	29720204 	addi	r5,r5,-14328
   24d50:	002741c0 	call	2741c <strcmp>
   24d54:	10000a1e 	bne	r2,zero,24d80 <_setlocale_r+0x60>
   24d58:	8c800c15 	stw	r18,48(r17)
   24d5c:	8c000d15 	stw	r16,52(r17)
   24d60:	008000f4 	movhi	r2,3
   24d64:	10b20204 	addi	r2,r2,-14328
   24d68:	dfc00317 	ldw	ra,12(sp)
   24d6c:	dc800217 	ldw	r18,8(sp)
   24d70:	dc400117 	ldw	r17,4(sp)
   24d74:	dc000017 	ldw	r16,0(sp)
   24d78:	dec00404 	addi	sp,sp,16
   24d7c:	f800283a 	ret
   24d80:	8009883a 	mov	r4,r16
   24d84:	014000f4 	movhi	r5,3
   24d88:	2971ed04 	addi	r5,r5,-14412
   24d8c:	002741c0 	call	2741c <strcmp>
   24d90:	103ff126 	beq	r2,zero,24d58 <_setlocale_r+0x38>
   24d94:	0005883a 	mov	r2,zero
   24d98:	003ff306 	br	24d68 <_setlocale_r+0x48>
   24d9c:	008000f4 	movhi	r2,3
   24da0:	10b20204 	addi	r2,r2,-14328
   24da4:	dfc00317 	ldw	ra,12(sp)
   24da8:	dc800217 	ldw	r18,8(sp)
   24dac:	dc400117 	ldw	r17,4(sp)
   24db0:	dc000017 	ldw	r16,0(sp)
   24db4:	dec00404 	addi	sp,sp,16
   24db8:	f800283a 	ret

00024dbc <__locale_charset>:
   24dbc:	008000f4 	movhi	r2,3
   24dc0:	10b20304 	addi	r2,r2,-14324
   24dc4:	f800283a 	ret

00024dc8 <_localeconv_r>:
   24dc8:	008000f4 	movhi	r2,3
   24dcc:	10b20704 	addi	r2,r2,-14308
   24dd0:	f800283a 	ret

00024dd4 <setlocale>:
   24dd4:	00c000f4 	movhi	r3,3
   24dd8:	18f93604 	addi	r3,r3,-6952
   24ddc:	2005883a 	mov	r2,r4
   24de0:	19000017 	ldw	r4,0(r3)
   24de4:	280d883a 	mov	r6,r5
   24de8:	100b883a 	mov	r5,r2
   24dec:	0024d201 	jmpi	24d20 <_setlocale_r>

00024df0 <localeconv>:
   24df0:	008000f4 	movhi	r2,3
   24df4:	10b20704 	addi	r2,r2,-14308
   24df8:	f800283a 	ret

00024dfc <__smakebuf_r>:
   24dfc:	2880030b 	ldhu	r2,12(r5)
   24e00:	deffed04 	addi	sp,sp,-76
   24e04:	dc401015 	stw	r17,64(sp)
   24e08:	10c0008c 	andi	r3,r2,2
   24e0c:	18ffffcc 	andi	r3,r3,65535
   24e10:	18e0001c 	xori	r3,r3,32768
   24e14:	dc000f15 	stw	r16,60(sp)
   24e18:	dfc01215 	stw	ra,72(sp)
   24e1c:	dc801115 	stw	r18,68(sp)
   24e20:	18e00004 	addi	r3,r3,-32768
   24e24:	2821883a 	mov	r16,r5
   24e28:	2023883a 	mov	r17,r4
   24e2c:	1800381e 	bne	r3,zero,24f10 <__smakebuf_r+0x114>
   24e30:	2940038f 	ldh	r5,14(r5)
   24e34:	28002d16 	blt	r5,zero,24eec <__smakebuf_r+0xf0>
   24e38:	d80d883a 	mov	r6,sp
   24e3c:	00277ac0 	call	277ac <_fstat_r>
   24e40:	10002916 	blt	r2,zero,24ee8 <__smakebuf_r+0xec>
   24e44:	d8800117 	ldw	r2,4(sp)
   24e48:	00e00014 	movui	r3,32768
   24e4c:	10bc000c 	andi	r2,r2,61440
   24e50:	10c03c26 	beq	r2,r3,24f44 <__smakebuf_r+0x148>
   24e54:	80c0030b 	ldhu	r3,12(r16)
   24e58:	18c20014 	ori	r3,r3,2048
   24e5c:	80c0030d 	sth	r3,12(r16)
   24e60:	00c80004 	movi	r3,8192
   24e64:	10c00c1e 	bne	r2,r3,24e98 <__smakebuf_r+0x9c>
   24e68:	8140038f 	ldh	r5,14(r16)
   24e6c:	8809883a 	mov	r4,r17
   24e70:	00278140 	call	27814 <_isatty_r>
   24e74:	10000826 	beq	r2,zero,24e98 <__smakebuf_r+0x9c>
   24e78:	80c0030b 	ldhu	r3,12(r16)
   24e7c:	808010c4 	addi	r2,r16,67
   24e80:	80800015 	stw	r2,0(r16)
   24e84:	18c00054 	ori	r3,r3,1
   24e88:	80800415 	stw	r2,16(r16)
   24e8c:	00800044 	movi	r2,1
   24e90:	80c0030d 	sth	r3,12(r16)
   24e94:	80800515 	stw	r2,20(r16)
   24e98:	04810004 	movi	r18,1024
   24e9c:	8809883a 	mov	r4,r17
   24ea0:	900b883a 	mov	r5,r18
   24ea4:	0024fa40 	call	24fa4 <_malloc_r>
   24ea8:	10003026 	beq	r2,zero,24f6c <__smakebuf_r+0x170>
   24eac:	80c0030b 	ldhu	r3,12(r16)
   24eb0:	010000b4 	movhi	r4,2
   24eb4:	210ffd04 	addi	r4,r4,16372
   24eb8:	89000f15 	stw	r4,60(r17)
   24ebc:	18c02014 	ori	r3,r3,128
   24ec0:	80c0030d 	sth	r3,12(r16)
   24ec4:	80800015 	stw	r2,0(r16)
   24ec8:	80800415 	stw	r2,16(r16)
   24ecc:	84800515 	stw	r18,20(r16)
   24ed0:	dfc01217 	ldw	ra,72(sp)
   24ed4:	dc801117 	ldw	r18,68(sp)
   24ed8:	dc401017 	ldw	r17,64(sp)
   24edc:	dc000f17 	ldw	r16,60(sp)
   24ee0:	dec01304 	addi	sp,sp,76
   24ee4:	f800283a 	ret
   24ee8:	8080030b 	ldhu	r2,12(r16)
   24eec:	10c0200c 	andi	r3,r2,128
   24ef0:	18ffffcc 	andi	r3,r3,65535
   24ef4:	18e0001c 	xori	r3,r3,32768
   24ef8:	18e00004 	addi	r3,r3,-32768
   24efc:	18000f1e 	bne	r3,zero,24f3c <__smakebuf_r+0x140>
   24f00:	04810004 	movi	r18,1024
   24f04:	10820014 	ori	r2,r2,2048
   24f08:	8080030d 	sth	r2,12(r16)
   24f0c:	003fe306 	br	24e9c <__smakebuf_r+0xa0>
   24f10:	288010c4 	addi	r2,r5,67
   24f14:	28800015 	stw	r2,0(r5)
   24f18:	28800415 	stw	r2,16(r5)
   24f1c:	00800044 	movi	r2,1
   24f20:	28800515 	stw	r2,20(r5)
   24f24:	dfc01217 	ldw	ra,72(sp)
   24f28:	dc801117 	ldw	r18,68(sp)
   24f2c:	dc401017 	ldw	r17,64(sp)
   24f30:	dc000f17 	ldw	r16,60(sp)
   24f34:	dec01304 	addi	sp,sp,76
   24f38:	f800283a 	ret
   24f3c:	04801004 	movi	r18,64
   24f40:	003ff006 	br	24f04 <__smakebuf_r+0x108>
   24f44:	81000a17 	ldw	r4,40(r16)
   24f48:	00c000b4 	movhi	r3,2
   24f4c:	18dcee04 	addi	r3,r3,29624
   24f50:	20ffc01e 	bne	r4,r3,24e54 <__smakebuf_r+0x58>
   24f54:	8080030b 	ldhu	r2,12(r16)
   24f58:	00c10004 	movi	r3,1024
   24f5c:	80c01315 	stw	r3,76(r16)
   24f60:	10c4b03a 	or	r2,r2,r3
   24f64:	8080030d 	sth	r2,12(r16)
   24f68:	003fcb06 	br	24e98 <__smakebuf_r+0x9c>
   24f6c:	8080030b 	ldhu	r2,12(r16)
   24f70:	10c0800c 	andi	r3,r2,512
   24f74:	18ffffcc 	andi	r3,r3,65535
   24f78:	18e0001c 	xori	r3,r3,32768
   24f7c:	18e00004 	addi	r3,r3,-32768
   24f80:	183fd31e 	bne	r3,zero,24ed0 <__smakebuf_r+0xd4>
   24f84:	10800094 	ori	r2,r2,2
   24f88:	80c010c4 	addi	r3,r16,67
   24f8c:	8080030d 	sth	r2,12(r16)
   24f90:	00800044 	movi	r2,1
   24f94:	80c00015 	stw	r3,0(r16)
   24f98:	80c00415 	stw	r3,16(r16)
   24f9c:	80800515 	stw	r2,20(r16)
   24fa0:	003fcb06 	br	24ed0 <__smakebuf_r+0xd4>

00024fa4 <_malloc_r>:
   24fa4:	defff604 	addi	sp,sp,-40
   24fa8:	dc800215 	stw	r18,8(sp)
   24fac:	dfc00915 	stw	ra,36(sp)
   24fb0:	df000815 	stw	fp,32(sp)
   24fb4:	ddc00715 	stw	r23,28(sp)
   24fb8:	dd800615 	stw	r22,24(sp)
   24fbc:	dd400515 	stw	r21,20(sp)
   24fc0:	dd000415 	stw	r20,16(sp)
   24fc4:	dcc00315 	stw	r19,12(sp)
   24fc8:	dc400115 	stw	r17,4(sp)
   24fcc:	dc000015 	stw	r16,0(sp)
   24fd0:	288002c4 	addi	r2,r5,11
   24fd4:	00c00584 	movi	r3,22
   24fd8:	2025883a 	mov	r18,r4
   24fdc:	18802b2e 	bgeu	r3,r2,2508c <_malloc_r+0xe8>
   24fe0:	047ffe04 	movi	r17,-8
   24fe4:	1462703a 	and	r17,r2,r17
   24fe8:	88002a16 	blt	r17,zero,25094 <_malloc_r+0xf0>
   24fec:	89402936 	bltu	r17,r5,25094 <_malloc_r+0xf0>
   24ff0:	9009883a 	mov	r4,r18
   24ff4:	002a0600 	call	2a060 <__malloc_lock>
   24ff8:	00807dc4 	movi	r2,503
   24ffc:	14402936 	bltu	r2,r17,250a4 <_malloc_r+0x100>
   25000:	8808d0fa 	srli	r4,r17,3
   25004:	04c000f4 	movhi	r19,3
   25008:	9cf3b104 	addi	r19,r19,-12604
   2500c:	2105883a 	add	r2,r4,r4
   25010:	1085883a 	add	r2,r2,r2
   25014:	1085883a 	add	r2,r2,r2
   25018:	9885883a 	add	r2,r19,r2
   2501c:	14000317 	ldw	r16,12(r2)
   25020:	80815526 	beq	r16,r2,25578 <_malloc_r+0x5d4>
   25024:	81000117 	ldw	r4,4(r16)
   25028:	00bfff04 	movi	r2,-4
   2502c:	80c00317 	ldw	r3,12(r16)
   25030:	2084703a 	and	r2,r4,r2
   25034:	8085883a 	add	r2,r16,r2
   25038:	11800117 	ldw	r6,4(r2)
   2503c:	81400217 	ldw	r5,8(r16)
   25040:	9009883a 	mov	r4,r18
   25044:	31800054 	ori	r6,r6,1
   25048:	11800115 	stw	r6,4(r2)
   2504c:	28c00315 	stw	r3,12(r5)
   25050:	19400215 	stw	r5,8(r3)
   25054:	002a0800 	call	2a080 <__malloc_unlock>
   25058:	80800204 	addi	r2,r16,8
   2505c:	dfc00917 	ldw	ra,36(sp)
   25060:	df000817 	ldw	fp,32(sp)
   25064:	ddc00717 	ldw	r23,28(sp)
   25068:	dd800617 	ldw	r22,24(sp)
   2506c:	dd400517 	ldw	r21,20(sp)
   25070:	dd000417 	ldw	r20,16(sp)
   25074:	dcc00317 	ldw	r19,12(sp)
   25078:	dc800217 	ldw	r18,8(sp)
   2507c:	dc400117 	ldw	r17,4(sp)
   25080:	dc000017 	ldw	r16,0(sp)
   25084:	dec00a04 	addi	sp,sp,40
   25088:	f800283a 	ret
   2508c:	04400404 	movi	r17,16
   25090:	897fd72e 	bgeu	r17,r5,24ff0 <_malloc_r+0x4c>
   25094:	00800304 	movi	r2,12
   25098:	90800015 	stw	r2,0(r18)
   2509c:	0005883a 	mov	r2,zero
   250a0:	003fee06 	br	2505c <_malloc_r+0xb8>
   250a4:	8808d27a 	srli	r4,r17,9
   250a8:	20007126 	beq	r4,zero,25270 <_malloc_r+0x2cc>
   250ac:	00800104 	movi	r2,4
   250b0:	1100eb36 	bltu	r2,r4,25460 <_malloc_r+0x4bc>
   250b4:	8808d1ba 	srli	r4,r17,6
   250b8:	21000e04 	addi	r4,r4,56
   250bc:	210b883a 	add	r5,r4,r4
   250c0:	294b883a 	add	r5,r5,r5
   250c4:	294b883a 	add	r5,r5,r5
   250c8:	04c000f4 	movhi	r19,3
   250cc:	9cf3b104 	addi	r19,r19,-12604
   250d0:	994b883a 	add	r5,r19,r5
   250d4:	2c000317 	ldw	r16,12(r5)
   250d8:	2c000e26 	beq	r5,r16,25114 <_malloc_r+0x170>
   250dc:	80c00117 	ldw	r3,4(r16)
   250e0:	01ffff04 	movi	r7,-4
   250e4:	018003c4 	movi	r6,15
   250e8:	19c6703a 	and	r3,r3,r7
   250ec:	1c45c83a 	sub	r2,r3,r17
   250f0:	30800716 	blt	r6,r2,25110 <_malloc_r+0x16c>
   250f4:	1000610e 	bge	r2,zero,2527c <_malloc_r+0x2d8>
   250f8:	84000317 	ldw	r16,12(r16)
   250fc:	2c000526 	beq	r5,r16,25114 <_malloc_r+0x170>
   25100:	80c00117 	ldw	r3,4(r16)
   25104:	19c6703a 	and	r3,r3,r7
   25108:	1c45c83a 	sub	r2,r3,r17
   2510c:	30bff90e 	bge	r6,r2,250f4 <_malloc_r+0x150>
   25110:	213fffc4 	addi	r4,r4,-1
   25114:	21000044 	addi	r4,r4,1
   25118:	9c000417 	ldw	r16,16(r19)
   2511c:	00c000f4 	movhi	r3,3
   25120:	18f3b104 	addi	r3,r3,-12604
   25124:	1a400204 	addi	r9,r3,8
   25128:	8240ff26 	beq	r16,r9,25528 <_malloc_r+0x584>
   2512c:	81400117 	ldw	r5,4(r16)
   25130:	00bfff04 	movi	r2,-4
   25134:	018003c4 	movi	r6,15
   25138:	2884703a 	and	r2,r5,r2
   2513c:	144bc83a 	sub	r5,r2,r17
   25140:	3140ea16 	blt	r6,r5,254ec <_malloc_r+0x548>
   25144:	1a400515 	stw	r9,20(r3)
   25148:	1a400415 	stw	r9,16(r3)
   2514c:	2800570e 	bge	r5,zero,252ac <_malloc_r+0x308>
   25150:	01407fc4 	movi	r5,511
   25154:	2880ca36 	bltu	r5,r2,25480 <_malloc_r+0x4dc>
   25158:	1004d0fa 	srli	r2,r2,3
   2515c:	02000044 	movi	r8,1
   25160:	19c00117 	ldw	r7,4(r3)
   25164:	108b883a 	add	r5,r2,r2
   25168:	294b883a 	add	r5,r5,r5
   2516c:	1005d0ba 	srai	r2,r2,2
   25170:	294b883a 	add	r5,r5,r5
   25174:	28cb883a 	add	r5,r5,r3
   25178:	29800217 	ldw	r6,8(r5)
   2517c:	4084983a 	sll	r2,r8,r2
   25180:	81400315 	stw	r5,12(r16)
   25184:	81800215 	stw	r6,8(r16)
   25188:	11c4b03a 	or	r2,r2,r7
   2518c:	18800115 	stw	r2,4(r3)
   25190:	2c000215 	stw	r16,8(r5)
   25194:	34000315 	stw	r16,12(r6)
   25198:	200bd0ba 	srai	r5,r4,2
   2519c:	00c00044 	movi	r3,1
   251a0:	194a983a 	sll	r5,r3,r5
   251a4:	11404936 	bltu	r2,r5,252cc <_malloc_r+0x328>
   251a8:	1146703a 	and	r3,r2,r5
   251ac:	18000a1e 	bne	r3,zero,251d8 <_malloc_r+0x234>
   251b0:	00ffff04 	movi	r3,-4
   251b4:	294b883a 	add	r5,r5,r5
   251b8:	20c8703a 	and	r4,r4,r3
   251bc:	1146703a 	and	r3,r2,r5
   251c0:	21000104 	addi	r4,r4,4
   251c4:	1800041e 	bne	r3,zero,251d8 <_malloc_r+0x234>
   251c8:	294b883a 	add	r5,r5,r5
   251cc:	1146703a 	and	r3,r2,r5
   251d0:	21000104 	addi	r4,r4,4
   251d4:	183ffc26 	beq	r3,zero,251c8 <_malloc_r+0x224>
   251d8:	023fff04 	movi	r8,-4
   251dc:	01c003c4 	movi	r7,15
   251e0:	2105883a 	add	r2,r4,r4
   251e4:	1085883a 	add	r2,r2,r2
   251e8:	1085883a 	add	r2,r2,r2
   251ec:	9899883a 	add	r12,r19,r2
   251f0:	62800304 	addi	r10,r12,12
   251f4:	2017883a 	mov	r11,r4
   251f8:	54000017 	ldw	r16,0(r10)
   251fc:	51bffd04 	addi	r6,r10,-12
   25200:	8180041e 	bne	r16,r6,25214 <_malloc_r+0x270>
   25204:	0000ca06 	br	25530 <_malloc_r+0x58c>
   25208:	10001c0e 	bge	r2,zero,2527c <_malloc_r+0x2d8>
   2520c:	84000317 	ldw	r16,12(r16)
   25210:	8180c726 	beq	r16,r6,25530 <_malloc_r+0x58c>
   25214:	80c00117 	ldw	r3,4(r16)
   25218:	1a06703a 	and	r3,r3,r8
   2521c:	1c45c83a 	sub	r2,r3,r17
   25220:	38bff90e 	bge	r7,r2,25208 <_malloc_r+0x264>
   25224:	81000317 	ldw	r4,12(r16)
   25228:	81400217 	ldw	r5,8(r16)
   2522c:	8447883a 	add	r3,r16,r17
   25230:	8c400054 	ori	r17,r17,1
   25234:	29000315 	stw	r4,12(r5)
   25238:	21400215 	stw	r5,8(r4)
   2523c:	84400115 	stw	r17,4(r16)
   25240:	1889883a 	add	r4,r3,r2
   25244:	11400054 	ori	r5,r2,1
   25248:	98c00515 	stw	r3,20(r19)
   2524c:	98c00415 	stw	r3,16(r19)
   25250:	20800015 	stw	r2,0(r4)
   25254:	1a400315 	stw	r9,12(r3)
   25258:	1a400215 	stw	r9,8(r3)
   2525c:	19400115 	stw	r5,4(r3)
   25260:	9009883a 	mov	r4,r18
   25264:	002a0800 	call	2a080 <__malloc_unlock>
   25268:	80800204 	addi	r2,r16,8
   2526c:	003f7b06 	br	2505c <_malloc_r+0xb8>
   25270:	8808d0fa 	srli	r4,r17,3
   25274:	210b883a 	add	r5,r4,r4
   25278:	003f9106 	br	250c0 <_malloc_r+0x11c>
   2527c:	80c7883a 	add	r3,r16,r3
   25280:	19400117 	ldw	r5,4(r3)
   25284:	80800317 	ldw	r2,12(r16)
   25288:	81000217 	ldw	r4,8(r16)
   2528c:	29400054 	ori	r5,r5,1
   25290:	19400115 	stw	r5,4(r3)
   25294:	20800315 	stw	r2,12(r4)
   25298:	11000215 	stw	r4,8(r2)
   2529c:	9009883a 	mov	r4,r18
   252a0:	002a0800 	call	2a080 <__malloc_unlock>
   252a4:	80800204 	addi	r2,r16,8
   252a8:	003f6c06 	br	2505c <_malloc_r+0xb8>
   252ac:	8085883a 	add	r2,r16,r2
   252b0:	10c00117 	ldw	r3,4(r2)
   252b4:	9009883a 	mov	r4,r18
   252b8:	18c00054 	ori	r3,r3,1
   252bc:	10c00115 	stw	r3,4(r2)
   252c0:	002a0800 	call	2a080 <__malloc_unlock>
   252c4:	80800204 	addi	r2,r16,8
   252c8:	003f6406 	br	2505c <_malloc_r+0xb8>
   252cc:	9c000217 	ldw	r16,8(r19)
   252d0:	00bfff04 	movi	r2,-4
   252d4:	85400117 	ldw	r21,4(r16)
   252d8:	a8aa703a 	and	r21,r21,r2
   252dc:	ac400336 	bltu	r21,r17,252ec <_malloc_r+0x348>
   252e0:	ac45c83a 	sub	r2,r21,r17
   252e4:	00c003c4 	movi	r3,15
   252e8:	18805316 	blt	r3,r2,25438 <_malloc_r+0x494>
   252ec:	d5e6aa17 	ldw	r23,-25944(gp)
   252f0:	d0e00317 	ldw	r3,-32756(gp)
   252f4:	00bfffc4 	movi	r2,-1
   252f8:	8579883a 	add	fp,r16,r21
   252fc:	8def883a 	add	r23,r17,r23
   25300:	1880d226 	beq	r3,r2,2564c <_malloc_r+0x6a8>
   25304:	bdc403c4 	addi	r23,r23,4111
   25308:	00bc0004 	movi	r2,-4096
   2530c:	b8ae703a 	and	r23,r23,r2
   25310:	9009883a 	mov	r4,r18
   25314:	b80b883a 	mov	r5,r23
   25318:	00272780 	call	27278 <_sbrk_r>
   2531c:	1029883a 	mov	r20,r2
   25320:	00bfffc4 	movi	r2,-1
   25324:	a080d126 	beq	r20,r2,2566c <_malloc_r+0x6c8>
   25328:	a7009f36 	bltu	r20,fp,255a8 <_malloc_r+0x604>
   2532c:	058000f4 	movhi	r22,3
   25330:	b5bfe704 	addi	r22,r22,-100
   25334:	b0800017 	ldw	r2,0(r22)
   25338:	b885883a 	add	r2,r23,r2
   2533c:	b0800015 	stw	r2,0(r22)
   25340:	e500cf26 	beq	fp,r20,25680 <_malloc_r+0x6dc>
   25344:	d1200317 	ldw	r4,-32756(gp)
   25348:	00ffffc4 	movi	r3,-1
   2534c:	20c0e026 	beq	r4,r3,256d0 <_malloc_r+0x72c>
   25350:	a739c83a 	sub	fp,r20,fp
   25354:	1705883a 	add	r2,r2,fp
   25358:	b0800015 	stw	r2,0(r22)
   2535c:	a08001cc 	andi	r2,r20,7
   25360:	1000a526 	beq	r2,zero,255f8 <_malloc_r+0x654>
   25364:	a0a9c83a 	sub	r20,r20,r2
   25368:	00c40204 	movi	r3,4104
   2536c:	a5000204 	addi	r20,r20,8
   25370:	1885c83a 	sub	r2,r3,r2
   25374:	a5c7883a 	add	r3,r20,r23
   25378:	18c3ffcc 	andi	r3,r3,4095
   2537c:	10efc83a 	sub	r23,r2,r3
   25380:	9009883a 	mov	r4,r18
   25384:	b80b883a 	mov	r5,r23
   25388:	00272780 	call	27278 <_sbrk_r>
   2538c:	00ffffc4 	movi	r3,-1
   25390:	10c0cc26 	beq	r2,r3,256c4 <_malloc_r+0x720>
   25394:	1505c83a 	sub	r2,r2,r20
   25398:	b887883a 	add	r3,r23,r2
   2539c:	18c00054 	ori	r3,r3,1
   253a0:	b0800017 	ldw	r2,0(r22)
   253a4:	9d000215 	stw	r20,8(r19)
   253a8:	a0c00115 	stw	r3,4(r20)
   253ac:	b885883a 	add	r2,r23,r2
   253b0:	b0800015 	stw	r2,0(r22)
   253b4:	84c00e26 	beq	r16,r19,253f0 <_malloc_r+0x44c>
   253b8:	00c003c4 	movi	r3,15
   253bc:	1d40902e 	bgeu	r3,r21,25600 <_malloc_r+0x65c>
   253c0:	ad7ffd04 	addi	r21,r21,-12
   253c4:	013ffe04 	movi	r4,-8
   253c8:	a908703a 	and	r4,r21,r4
   253cc:	810b883a 	add	r5,r16,r4
   253d0:	01800144 	movi	r6,5
   253d4:	29800115 	stw	r6,4(r5)
   253d8:	29800215 	stw	r6,8(r5)
   253dc:	81400117 	ldw	r5,4(r16)
   253e0:	2940004c 	andi	r5,r5,1
   253e4:	214ab03a 	or	r5,r4,r5
   253e8:	81400115 	stw	r5,4(r16)
   253ec:	1900ae36 	bltu	r3,r4,256a8 <_malloc_r+0x704>
   253f0:	d0e6a917 	ldw	r3,-25948(gp)
   253f4:	1880012e 	bgeu	r3,r2,253fc <_malloc_r+0x458>
   253f8:	d0a6a915 	stw	r2,-25948(gp)
   253fc:	d0e6a817 	ldw	r3,-25952(gp)
   25400:	9c000217 	ldw	r16,8(r19)
   25404:	1880012e 	bgeu	r3,r2,2540c <_malloc_r+0x468>
   25408:	d0a6a815 	stw	r2,-25952(gp)
   2540c:	80c00117 	ldw	r3,4(r16)
   25410:	00bfff04 	movi	r2,-4
   25414:	1886703a 	and	r3,r3,r2
   25418:	1c45c83a 	sub	r2,r3,r17
   2541c:	1c400236 	bltu	r3,r17,25428 <_malloc_r+0x484>
   25420:	00c003c4 	movi	r3,15
   25424:	18800416 	blt	r3,r2,25438 <_malloc_r+0x494>
   25428:	9009883a 	mov	r4,r18
   2542c:	002a0800 	call	2a080 <__malloc_unlock>
   25430:	0005883a 	mov	r2,zero
   25434:	003f0906 	br	2505c <_malloc_r+0xb8>
   25438:	88c00054 	ori	r3,r17,1
   2543c:	10800054 	ori	r2,r2,1
   25440:	80c00115 	stw	r3,4(r16)
   25444:	8463883a 	add	r17,r16,r17
   25448:	88800115 	stw	r2,4(r17)
   2544c:	9009883a 	mov	r4,r18
   25450:	9c400215 	stw	r17,8(r19)
   25454:	002a0800 	call	2a080 <__malloc_unlock>
   25458:	80800204 	addi	r2,r16,8
   2545c:	003eff06 	br	2505c <_malloc_r+0xb8>
   25460:	00800504 	movi	r2,20
   25464:	1100492e 	bgeu	r2,r4,2558c <_malloc_r+0x5e8>
   25468:	00801504 	movi	r2,84
   2546c:	11005c36 	bltu	r2,r4,255e0 <_malloc_r+0x63c>
   25470:	8808d33a 	srli	r4,r17,12
   25474:	21001b84 	addi	r4,r4,110
   25478:	210b883a 	add	r5,r4,r4
   2547c:	003f1006 	br	250c0 <_malloc_r+0x11c>
   25480:	1006d27a 	srli	r3,r2,9
   25484:	01400104 	movi	r5,4
   25488:	28c0432e 	bgeu	r5,r3,25598 <_malloc_r+0x5f4>
   2548c:	01400504 	movi	r5,20
   25490:	28c07036 	bltu	r5,r3,25654 <_malloc_r+0x6b0>
   25494:	194016c4 	addi	r5,r3,91
   25498:	294d883a 	add	r6,r5,r5
   2549c:	318d883a 	add	r6,r6,r6
   254a0:	318d883a 	add	r6,r6,r6
   254a4:	998d883a 	add	r6,r19,r6
   254a8:	30c00217 	ldw	r3,8(r6)
   254ac:	01c000f4 	movhi	r7,3
   254b0:	39f3b104 	addi	r7,r7,-12604
   254b4:	19805726 	beq	r3,r6,25614 <_malloc_r+0x670>
   254b8:	01ffff04 	movi	r7,-4
   254bc:	19400117 	ldw	r5,4(r3)
   254c0:	29ca703a 	and	r5,r5,r7
   254c4:	1140022e 	bgeu	r2,r5,254d0 <_malloc_r+0x52c>
   254c8:	18c00217 	ldw	r3,8(r3)
   254cc:	30fffb1e 	bne	r6,r3,254bc <_malloc_r+0x518>
   254d0:	19400317 	ldw	r5,12(r3)
   254d4:	98800117 	ldw	r2,4(r19)
   254d8:	81400315 	stw	r5,12(r16)
   254dc:	80c00215 	stw	r3,8(r16)
   254e0:	2c000215 	stw	r16,8(r5)
   254e4:	1c000315 	stw	r16,12(r3)
   254e8:	003f2b06 	br	25198 <_malloc_r+0x1f4>
   254ec:	8445883a 	add	r2,r16,r17
   254f0:	8c400054 	ori	r17,r17,1
   254f4:	18800515 	stw	r2,20(r3)
   254f8:	18800415 	stw	r2,16(r3)
   254fc:	29000054 	ori	r4,r5,1
   25500:	1147883a 	add	r3,r2,r5
   25504:	84400115 	stw	r17,4(r16)
   25508:	11000115 	stw	r4,4(r2)
   2550c:	12400315 	stw	r9,12(r2)
   25510:	12400215 	stw	r9,8(r2)
   25514:	19400015 	stw	r5,0(r3)
   25518:	9009883a 	mov	r4,r18
   2551c:	002a0800 	call	2a080 <__malloc_unlock>
   25520:	80800204 	addi	r2,r16,8
   25524:	003ecd06 	br	2505c <_malloc_r+0xb8>
   25528:	18800117 	ldw	r2,4(r3)
   2552c:	003f1a06 	br	25198 <_malloc_r+0x1f4>
   25530:	5ac00044 	addi	r11,r11,1
   25534:	588000cc 	andi	r2,r11,3
   25538:	52800204 	addi	r10,r10,8
   2553c:	103f2e1e 	bne	r2,zero,251f8 <_malloc_r+0x254>
   25540:	20c000cc 	andi	r3,r4,3
   25544:	60bffe04 	addi	r2,r12,-8
   25548:	18006f26 	beq	r3,zero,25708 <_malloc_r+0x764>
   2554c:	63000017 	ldw	r12,0(r12)
   25550:	213fffc4 	addi	r4,r4,-1
   25554:	60bffa26 	beq	r12,r2,25540 <_malloc_r+0x59c>
   25558:	98800117 	ldw	r2,4(r19)
   2555c:	294b883a 	add	r5,r5,r5
   25560:	117f5a36 	bltu	r2,r5,252cc <_malloc_r+0x328>
   25564:	283f5926 	beq	r5,zero,252cc <_malloc_r+0x328>
   25568:	1146703a 	and	r3,r2,r5
   2556c:	18001626 	beq	r3,zero,255c8 <_malloc_r+0x624>
   25570:	5809883a 	mov	r4,r11
   25574:	003f1a06 	br	251e0 <_malloc_r+0x23c>
   25578:	80800204 	addi	r2,r16,8
   2557c:	84000517 	ldw	r16,20(r16)
   25580:	143ea81e 	bne	r2,r16,25024 <_malloc_r+0x80>
   25584:	21000084 	addi	r4,r4,2
   25588:	003ee306 	br	25118 <_malloc_r+0x174>
   2558c:	210016c4 	addi	r4,r4,91
   25590:	210b883a 	add	r5,r4,r4
   25594:	003eca06 	br	250c0 <_malloc_r+0x11c>
   25598:	100ad1ba 	srli	r5,r2,6
   2559c:	29400e04 	addi	r5,r5,56
   255a0:	294d883a 	add	r6,r5,r5
   255a4:	003fbd06 	br	2549c <_malloc_r+0x4f8>
   255a8:	84ff6026 	beq	r16,r19,2532c <_malloc_r+0x388>
   255ac:	008000f4 	movhi	r2,3
   255b0:	10b3b104 	addi	r2,r2,-12604
   255b4:	14000217 	ldw	r16,8(r2)
   255b8:	00bfff04 	movi	r2,-4
   255bc:	80c00117 	ldw	r3,4(r16)
   255c0:	1886703a 	and	r3,r3,r2
   255c4:	003f9406 	br	25418 <_malloc_r+0x474>
   255c8:	294b883a 	add	r5,r5,r5
   255cc:	1146703a 	and	r3,r2,r5
   255d0:	5ac00104 	addi	r11,r11,4
   255d4:	183ffc26 	beq	r3,zero,255c8 <_malloc_r+0x624>
   255d8:	5809883a 	mov	r4,r11
   255dc:	003f0006 	br	251e0 <_malloc_r+0x23c>
   255e0:	00805504 	movi	r2,340
   255e4:	11001336 	bltu	r2,r4,25634 <_malloc_r+0x690>
   255e8:	8808d3fa 	srli	r4,r17,15
   255ec:	21001dc4 	addi	r4,r4,119
   255f0:	210b883a 	add	r5,r4,r4
   255f4:	003eb206 	br	250c0 <_malloc_r+0x11c>
   255f8:	00840004 	movi	r2,4096
   255fc:	003f5d06 	br	25374 <_malloc_r+0x3d0>
   25600:	00800044 	movi	r2,1
   25604:	a0800115 	stw	r2,4(r20)
   25608:	a021883a 	mov	r16,r20
   2560c:	0007883a 	mov	r3,zero
   25610:	003f8106 	br	25418 <_malloc_r+0x474>
   25614:	280bd0ba 	srai	r5,r5,2
   25618:	01800044 	movi	r6,1
   2561c:	38800117 	ldw	r2,4(r7)
   25620:	314c983a 	sll	r6,r6,r5
   25624:	180b883a 	mov	r5,r3
   25628:	3084b03a 	or	r2,r6,r2
   2562c:	38800115 	stw	r2,4(r7)
   25630:	003fa906 	br	254d8 <_malloc_r+0x534>
   25634:	00815504 	movi	r2,1364
   25638:	11001836 	bltu	r2,r4,2569c <_malloc_r+0x6f8>
   2563c:	8808d4ba 	srli	r4,r17,18
   25640:	21001f04 	addi	r4,r4,124
   25644:	210b883a 	add	r5,r4,r4
   25648:	003e9d06 	br	250c0 <_malloc_r+0x11c>
   2564c:	bdc00404 	addi	r23,r23,16
   25650:	003f2f06 	br	25310 <_malloc_r+0x36c>
   25654:	01401504 	movi	r5,84
   25658:	28c01f36 	bltu	r5,r3,256d8 <_malloc_r+0x734>
   2565c:	100ad33a 	srli	r5,r2,12
   25660:	29401b84 	addi	r5,r5,110
   25664:	294d883a 	add	r6,r5,r5
   25668:	003f8c06 	br	2549c <_malloc_r+0x4f8>
   2566c:	9c000217 	ldw	r16,8(r19)
   25670:	00bfff04 	movi	r2,-4
   25674:	80c00117 	ldw	r3,4(r16)
   25678:	1886703a 	and	r3,r3,r2
   2567c:	003f6606 	br	25418 <_malloc_r+0x474>
   25680:	e0c3ffcc 	andi	r3,fp,4095
   25684:	183f2f1e 	bne	r3,zero,25344 <_malloc_r+0x3a0>
   25688:	98c00217 	ldw	r3,8(r19)
   2568c:	bd49883a 	add	r4,r23,r21
   25690:	21000054 	ori	r4,r4,1
   25694:	19000115 	stw	r4,4(r3)
   25698:	003f5506 	br	253f0 <_malloc_r+0x44c>
   2569c:	01403f04 	movi	r5,252
   256a0:	01001f84 	movi	r4,126
   256a4:	003e8606 	br	250c0 <_malloc_r+0x11c>
   256a8:	9009883a 	mov	r4,r18
   256ac:	81400204 	addi	r5,r16,8
   256b0:	002440c0 	call	2440c <_free_r>
   256b4:	008000f4 	movhi	r2,3
   256b8:	10bfe704 	addi	r2,r2,-100
   256bc:	10800017 	ldw	r2,0(r2)
   256c0:	003f4b06 	br	253f0 <_malloc_r+0x44c>
   256c4:	00c00044 	movi	r3,1
   256c8:	002f883a 	mov	r23,zero
   256cc:	003f3406 	br	253a0 <_malloc_r+0x3fc>
   256d0:	d5200315 	stw	r20,-32756(gp)
   256d4:	003f2106 	br	2535c <_malloc_r+0x3b8>
   256d8:	01405504 	movi	r5,340
   256dc:	28c00436 	bltu	r5,r3,256f0 <_malloc_r+0x74c>
   256e0:	100ad3fa 	srli	r5,r2,15
   256e4:	29401dc4 	addi	r5,r5,119
   256e8:	294d883a 	add	r6,r5,r5
   256ec:	003f6b06 	br	2549c <_malloc_r+0x4f8>
   256f0:	01415504 	movi	r5,1364
   256f4:	28c00936 	bltu	r5,r3,2571c <_malloc_r+0x778>
   256f8:	100ad4ba 	srli	r5,r2,18
   256fc:	29401f04 	addi	r5,r5,124
   25700:	294d883a 	add	r6,r5,r5
   25704:	003f6506 	br	2549c <_malloc_r+0x4f8>
   25708:	98800117 	ldw	r2,4(r19)
   2570c:	0146303a 	nor	r3,zero,r5
   25710:	1884703a 	and	r2,r3,r2
   25714:	98800115 	stw	r2,4(r19)
   25718:	003f9006 	br	2555c <_malloc_r+0x5b8>
   2571c:	01803f04 	movi	r6,252
   25720:	01401f84 	movi	r5,126
   25724:	003f5d06 	br	2549c <_malloc_r+0x4f8>

00025728 <memchr>:
   25728:	008000c4 	movi	r2,3
   2572c:	29403fcc 	andi	r5,r5,255
   25730:	1180282e 	bgeu	r2,r6,257d4 <memchr+0xac>
   25734:	2086703a 	and	r3,r4,r2
   25738:	1800351e 	bne	r3,zero,25810 <memchr+0xe8>
   2573c:	2816923a 	slli	r11,r5,8
   25740:	2093883a 	add	r9,r4,r2
   25744:	22000084 	addi	r8,r4,2
   25748:	5957883a 	add	r11,r11,r5
   2574c:	5816923a 	slli	r11,r11,8
   25750:	20c00044 	addi	r3,r4,1
   25754:	037fbff4 	movhi	r13,65279
   25758:	6b7fbfc4 	addi	r13,r13,-257
   2575c:	5957883a 	add	r11,r11,r5
   25760:	5816923a 	slli	r11,r11,8
   25764:	03202074 	movhi	r12,32897
   25768:	63202004 	addi	r12,r12,-32640
   2576c:	101d883a 	mov	r14,r2
   25770:	5957883a 	add	r11,r11,r5
   25774:	21c00017 	ldw	r7,0(r4)
   25778:	31bfff04 	addi	r6,r6,-4
   2577c:	1805883a 	mov	r2,r3
   25780:	3acef03a 	xor	r7,r7,r11
   25784:	3b55883a 	add	r10,r7,r13
   25788:	01ce303a 	nor	r7,zero,r7
   2578c:	51ce703a 	and	r7,r10,r7
   25790:	3b0e703a 	and	r7,r7,r12
   25794:	38000a26 	beq	r7,zero,257c0 <memchr+0x98>
   25798:	21c00003 	ldbu	r7,0(r4)
   2579c:	39401e26 	beq	r7,r5,25818 <memchr+0xf0>
   257a0:	19c00003 	ldbu	r7,0(r3)
   257a4:	39401926 	beq	r7,r5,2580c <memchr+0xe4>
   257a8:	41c00003 	ldbu	r7,0(r8)
   257ac:	4005883a 	mov	r2,r8
   257b0:	39401626 	beq	r7,r5,2580c <memchr+0xe4>
   257b4:	49c00003 	ldbu	r7,0(r9)
   257b8:	4805883a 	mov	r2,r9
   257bc:	39401326 	beq	r7,r5,2580c <memchr+0xe4>
   257c0:	21000104 	addi	r4,r4,4
   257c4:	4a400104 	addi	r9,r9,4
   257c8:	42000104 	addi	r8,r8,4
   257cc:	18c00104 	addi	r3,r3,4
   257d0:	71bfe836 	bltu	r14,r6,25774 <memchr+0x4c>
   257d4:	2005883a 	mov	r2,r4
   257d8:	30000a26 	beq	r6,zero,25804 <memchr+0xdc>
   257dc:	10c00003 	ldbu	r3,0(r2)
   257e0:	19400a26 	beq	r3,r5,2580c <memchr+0xe4>
   257e4:	10c00044 	addi	r3,r2,1
   257e8:	118d883a 	add	r6,r2,r6
   257ec:	00000306 	br	257fc <memchr+0xd4>
   257f0:	11000003 	ldbu	r4,0(r2)
   257f4:	18c00044 	addi	r3,r3,1
   257f8:	21400426 	beq	r4,r5,2580c <memchr+0xe4>
   257fc:	1805883a 	mov	r2,r3
   25800:	19bffb1e 	bne	r3,r6,257f0 <memchr+0xc8>
   25804:	0005883a 	mov	r2,zero
   25808:	f800283a 	ret
   2580c:	f800283a 	ret
   25810:	2005883a 	mov	r2,r4
   25814:	003ff106 	br	257dc <memchr+0xb4>
   25818:	2005883a 	mov	r2,r4
   2581c:	f800283a 	ret

00025820 <memcpy>:
   25820:	defffb04 	addi	sp,sp,-20
   25824:	dc000015 	stw	r16,0(sp)
   25828:	dfc00415 	stw	ra,16(sp)
   2582c:	dcc00315 	stw	r19,12(sp)
   25830:	dc800215 	stw	r18,8(sp)
   25834:	dc400115 	stw	r17,4(sp)
   25838:	00c003c4 	movi	r3,15
   2583c:	2021883a 	mov	r16,r4
   25840:	3005883a 	mov	r2,r6
   25844:	1980032e 	bgeu	r3,r6,25854 <memcpy+0x34>
   25848:	2906b03a 	or	r3,r5,r4
   2584c:	18c000cc 	andi	r3,r3,3
   25850:	18001026 	beq	r3,zero,25894 <memcpy+0x74>
   25854:	8007883a 	mov	r3,r16
   25858:	288f883a 	add	r7,r5,r2
   2585c:	10000526 	beq	r2,zero,25874 <memcpy+0x54>
   25860:	29800003 	ldbu	r6,0(r5)
   25864:	18c00044 	addi	r3,r3,1
   25868:	29400044 	addi	r5,r5,1
   2586c:	19bfffc5 	stb	r6,-1(r3)
   25870:	29fffb1e 	bne	r5,r7,25860 <memcpy+0x40>
   25874:	8005883a 	mov	r2,r16
   25878:	dfc00417 	ldw	ra,16(sp)
   2587c:	dcc00317 	ldw	r19,12(sp)
   25880:	dc800217 	ldw	r18,8(sp)
   25884:	dc400117 	ldw	r17,4(sp)
   25888:	dc000017 	ldw	r16,0(sp)
   2588c:	dec00504 	addi	sp,sp,20
   25890:	f800283a 	ret
   25894:	32bffc04 	addi	r10,r6,-16
   25898:	5014d13a 	srli	r10,r10,4
   2589c:	20800404 	addi	r2,r4,16
   258a0:	2007883a 	mov	r3,r4
   258a4:	5008913a 	slli	r4,r10,4
   258a8:	280f883a 	mov	r7,r5
   258ac:	1105883a 	add	r2,r2,r4
   258b0:	3a000017 	ldw	r8,0(r7)
   258b4:	18c00404 	addi	r3,r3,16
   258b8:	39c00404 	addi	r7,r7,16
   258bc:	1a3ffc15 	stw	r8,-16(r3)
   258c0:	3a3ffd17 	ldw	r8,-12(r7)
   258c4:	1a3ffd15 	stw	r8,-12(r3)
   258c8:	3a3ffe17 	ldw	r8,-8(r7)
   258cc:	1a3ffe15 	stw	r8,-8(r3)
   258d0:	3a3fff17 	ldw	r8,-4(r7)
   258d4:	1a3fff15 	stw	r8,-4(r3)
   258d8:	18bff51e 	bne	r3,r2,258b0 <memcpy+0x90>
   258dc:	52800044 	addi	r10,r10,1
   258e0:	5014913a 	slli	r10,r10,4
   258e4:	308003cc 	andi	r2,r6,15
   258e8:	010000c4 	movi	r4,3
   258ec:	8287883a 	add	r3,r16,r10
   258f0:	2a95883a 	add	r10,r5,r10
   258f4:	2080182e 	bgeu	r4,r2,25958 <memcpy+0x138>
   258f8:	147fff04 	addi	r17,r2,-4
   258fc:	8808d0ba 	srli	r4,r17,2
   25900:	1a400104 	addi	r9,r3,4
   25904:	180d883a 	mov	r6,r3
   25908:	2105883a 	add	r2,r4,r4
   2590c:	1085883a 	add	r2,r2,r2
   25910:	4893883a 	add	r9,r9,r2
   25914:	500f883a 	mov	r7,r10
   25918:	3a000017 	ldw	r8,0(r7)
   2591c:	31800104 	addi	r6,r6,4
   25920:	39c00104 	addi	r7,r7,4
   25924:	323fff15 	stw	r8,-4(r6)
   25928:	327ffb1e 	bne	r6,r9,25918 <memcpy+0xf8>
   2592c:	20800044 	addi	r2,r4,1
   25930:	1085883a 	add	r2,r2,r2
   25934:	1085883a 	add	r2,r2,r2
   25938:	017fff04 	movi	r5,-4
   2593c:	18a5883a 	add	r18,r3,r2
   25940:	50a7883a 	add	r19,r10,r2
   25944:	00294380 	call	29438 <__mulsi3>
   25948:	1445883a 	add	r2,r2,r17
   2594c:	980b883a 	mov	r5,r19
   25950:	9007883a 	mov	r3,r18
   25954:	003fc006 	br	25858 <memcpy+0x38>
   25958:	500b883a 	mov	r5,r10
   2595c:	003fbe06 	br	25858 <memcpy+0x38>

00025960 <memmove>:
   25960:	defffb04 	addi	sp,sp,-20
   25964:	dc000015 	stw	r16,0(sp)
   25968:	dfc00415 	stw	ra,16(sp)
   2596c:	dcc00315 	stw	r19,12(sp)
   25970:	dc800215 	stw	r18,8(sp)
   25974:	dc400115 	stw	r17,4(sp)
   25978:	2021883a 	mov	r16,r4
   2597c:	300f883a 	mov	r7,r6
   25980:	2900122e 	bgeu	r5,r4,259cc <memmove+0x6c>
   25984:	2987883a 	add	r3,r5,r6
   25988:	20c0102e 	bgeu	r4,r3,259cc <memmove+0x6c>
   2598c:	218b883a 	add	r5,r4,r6
   25990:	1989c83a 	sub	r4,r3,r6
   25994:	30000526 	beq	r6,zero,259ac <memmove+0x4c>
   25998:	18ffffc4 	addi	r3,r3,-1
   2599c:	18800003 	ldbu	r2,0(r3)
   259a0:	297fffc4 	addi	r5,r5,-1
   259a4:	28800005 	stb	r2,0(r5)
   259a8:	193ffb1e 	bne	r3,r4,25998 <memmove+0x38>
   259ac:	8005883a 	mov	r2,r16
   259b0:	dfc00417 	ldw	ra,16(sp)
   259b4:	dcc00317 	ldw	r19,12(sp)
   259b8:	dc800217 	ldw	r18,8(sp)
   259bc:	dc400117 	ldw	r17,4(sp)
   259c0:	dc000017 	ldw	r16,0(sp)
   259c4:	dec00504 	addi	sp,sp,20
   259c8:	f800283a 	ret
   259cc:	008003c4 	movi	r2,15
   259d0:	1180422e 	bgeu	r2,r6,25adc <memmove+0x17c>
   259d4:	2c04b03a 	or	r2,r5,r16
   259d8:	108000cc 	andi	r2,r2,3
   259dc:	10003f1e 	bne	r2,zero,25adc <memmove+0x17c>
   259e0:	32bffc04 	addi	r10,r6,-16
   259e4:	5014d13a 	srli	r10,r10,4
   259e8:	81000404 	addi	r4,r16,16
   259ec:	8007883a 	mov	r3,r16
   259f0:	5004913a 	slli	r2,r10,4
   259f4:	280f883a 	mov	r7,r5
   259f8:	2089883a 	add	r4,r4,r2
   259fc:	38800017 	ldw	r2,0(r7)
   25a00:	18c00404 	addi	r3,r3,16
   25a04:	39c00404 	addi	r7,r7,16
   25a08:	18bffc15 	stw	r2,-16(r3)
   25a0c:	38bffd17 	ldw	r2,-12(r7)
   25a10:	18bffd15 	stw	r2,-12(r3)
   25a14:	38bffe17 	ldw	r2,-8(r7)
   25a18:	18bffe15 	stw	r2,-8(r3)
   25a1c:	38bfff17 	ldw	r2,-4(r7)
   25a20:	18bfff15 	stw	r2,-4(r3)
   25a24:	193ff51e 	bne	r3,r4,259fc <memmove+0x9c>
   25a28:	52800044 	addi	r10,r10,1
   25a2c:	5014913a 	slli	r10,r10,4
   25a30:	31c003cc 	andi	r7,r6,15
   25a34:	008000c4 	movi	r2,3
   25a38:	8287883a 	add	r3,r16,r10
   25a3c:	2a95883a 	add	r10,r5,r10
   25a40:	11c0282e 	bgeu	r2,r7,25ae4 <memmove+0x184>
   25a44:	3c7fff04 	addi	r17,r7,-4
   25a48:	8808d0ba 	srli	r4,r17,2
   25a4c:	1a400104 	addi	r9,r3,4
   25a50:	180d883a 	mov	r6,r3
   25a54:	2105883a 	add	r2,r4,r4
   25a58:	1085883a 	add	r2,r2,r2
   25a5c:	4893883a 	add	r9,r9,r2
   25a60:	5005883a 	mov	r2,r10
   25a64:	12000017 	ldw	r8,0(r2)
   25a68:	31800104 	addi	r6,r6,4
   25a6c:	10800104 	addi	r2,r2,4
   25a70:	323fff15 	stw	r8,-4(r6)
   25a74:	327ffb1e 	bne	r6,r9,25a64 <memmove+0x104>
   25a78:	20800044 	addi	r2,r4,1
   25a7c:	1085883a 	add	r2,r2,r2
   25a80:	1085883a 	add	r2,r2,r2
   25a84:	017fff04 	movi	r5,-4
   25a88:	18a5883a 	add	r18,r3,r2
   25a8c:	50a7883a 	add	r19,r10,r2
   25a90:	00294380 	call	29438 <__mulsi3>
   25a94:	144f883a 	add	r7,r2,r17
   25a98:	980b883a 	mov	r5,r19
   25a9c:	9007883a 	mov	r3,r18
   25aa0:	383fc226 	beq	r7,zero,259ac <memmove+0x4c>
   25aa4:	19cf883a 	add	r7,r3,r7
   25aa8:	29800003 	ldbu	r6,0(r5)
   25aac:	18c00044 	addi	r3,r3,1
   25ab0:	29400044 	addi	r5,r5,1
   25ab4:	19bfffc5 	stb	r6,-1(r3)
   25ab8:	19fffb1e 	bne	r3,r7,25aa8 <memmove+0x148>
   25abc:	8005883a 	mov	r2,r16
   25ac0:	dfc00417 	ldw	ra,16(sp)
   25ac4:	dcc00317 	ldw	r19,12(sp)
   25ac8:	dc800217 	ldw	r18,8(sp)
   25acc:	dc400117 	ldw	r17,4(sp)
   25ad0:	dc000017 	ldw	r16,0(sp)
   25ad4:	dec00504 	addi	sp,sp,20
   25ad8:	f800283a 	ret
   25adc:	8007883a 	mov	r3,r16
   25ae0:	003fef06 	br	25aa0 <memmove+0x140>
   25ae4:	500b883a 	mov	r5,r10
   25ae8:	003fed06 	br	25aa0 <memmove+0x140>

00025aec <memset>:
   25aec:	00c000c4 	movi	r3,3
   25af0:	2005883a 	mov	r2,r4
   25af4:	29403fcc 	andi	r5,r5,255
   25af8:	19802d2e 	bgeu	r3,r6,25bb0 <memset+0xc4>
   25afc:	20c6703a 	and	r3,r4,r3
   25b00:	18002e1e 	bne	r3,zero,25bbc <memset+0xd0>
   25b04:	2806923a 	slli	r3,r5,8
   25b08:	010003c4 	movi	r4,15
   25b0c:	3011883a 	mov	r8,r6
   25b10:	1946b03a 	or	r3,r3,r5
   25b14:	180e943a 	slli	r7,r3,16
   25b18:	38ceb03a 	or	r7,r7,r3
   25b1c:	1007883a 	mov	r3,r2
   25b20:	21800f2e 	bgeu	r4,r6,25b60 <memset+0x74>
   25b24:	19c00015 	stw	r7,0(r3)
   25b28:	19c00115 	stw	r7,4(r3)
   25b2c:	19c00215 	stw	r7,8(r3)
   25b30:	19c00315 	stw	r7,12(r3)
   25b34:	423ffc04 	addi	r8,r8,-16
   25b38:	18c00404 	addi	r3,r3,16
   25b3c:	223ff936 	bltu	r4,r8,25b24 <memset+0x38>
   25b40:	30fffc04 	addi	r3,r6,-16
   25b44:	1806d13a 	srli	r3,r3,4
   25b48:	318003cc 	andi	r6,r6,15
   25b4c:	010000c4 	movi	r4,3
   25b50:	18c00044 	addi	r3,r3,1
   25b54:	1806913a 	slli	r3,r3,4
   25b58:	10c7883a 	add	r3,r2,r3
   25b5c:	21800e2e 	bgeu	r4,r6,25b98 <memset+0xac>
   25b60:	1813883a 	mov	r9,r3
   25b64:	3011883a 	mov	r8,r6
   25b68:	010000c4 	movi	r4,3
   25b6c:	49c00015 	stw	r7,0(r9)
   25b70:	423fff04 	addi	r8,r8,-4
   25b74:	4a400104 	addi	r9,r9,4
   25b78:	223ffc36 	bltu	r4,r8,25b6c <memset+0x80>
   25b7c:	313fff04 	addi	r4,r6,-4
   25b80:	2008d0ba 	srli	r4,r4,2
   25b84:	318000cc 	andi	r6,r6,3
   25b88:	21000044 	addi	r4,r4,1
   25b8c:	2109883a 	add	r4,r4,r4
   25b90:	2109883a 	add	r4,r4,r4
   25b94:	1907883a 	add	r3,r3,r4
   25b98:	30000a26 	beq	r6,zero,25bc4 <memset+0xd8>
   25b9c:	198d883a 	add	r6,r3,r6
   25ba0:	19400005 	stb	r5,0(r3)
   25ba4:	18c00044 	addi	r3,r3,1
   25ba8:	19bffd1e 	bne	r3,r6,25ba0 <memset+0xb4>
   25bac:	f800283a 	ret
   25bb0:	2007883a 	mov	r3,r4
   25bb4:	303ff91e 	bne	r6,zero,25b9c <memset+0xb0>
   25bb8:	00000206 	br	25bc4 <memset+0xd8>
   25bbc:	2007883a 	mov	r3,r4
   25bc0:	003ff606 	br	25b9c <memset+0xb0>
   25bc4:	f800283a 	ret

00025bc8 <_Balloc>:
   25bc8:	20801317 	ldw	r2,76(r4)
   25bcc:	defffc04 	addi	sp,sp,-16
   25bd0:	dc400115 	stw	r17,4(sp)
   25bd4:	dc000015 	stw	r16,0(sp)
   25bd8:	dfc00315 	stw	ra,12(sp)
   25bdc:	dc800215 	stw	r18,8(sp)
   25be0:	2023883a 	mov	r17,r4
   25be4:	2821883a 	mov	r16,r5
   25be8:	10000f26 	beq	r2,zero,25c28 <_Balloc+0x60>
   25bec:	8407883a 	add	r3,r16,r16
   25bf0:	18c7883a 	add	r3,r3,r3
   25bf4:	10c7883a 	add	r3,r2,r3
   25bf8:	18800017 	ldw	r2,0(r3)
   25bfc:	10001126 	beq	r2,zero,25c44 <_Balloc+0x7c>
   25c00:	11000017 	ldw	r4,0(r2)
   25c04:	19000015 	stw	r4,0(r3)
   25c08:	10000415 	stw	zero,16(r2)
   25c0c:	10000315 	stw	zero,12(r2)
   25c10:	dfc00317 	ldw	ra,12(sp)
   25c14:	dc800217 	ldw	r18,8(sp)
   25c18:	dc400117 	ldw	r17,4(sp)
   25c1c:	dc000017 	ldw	r16,0(sp)
   25c20:	dec00404 	addi	sp,sp,16
   25c24:	f800283a 	ret
   25c28:	01400104 	movi	r5,4
   25c2c:	01800404 	movi	r6,16
   25c30:	002752c0 	call	2752c <_calloc_r>
   25c34:	88801315 	stw	r2,76(r17)
   25c38:	103fec1e 	bne	r2,zero,25bec <_Balloc+0x24>
   25c3c:	0005883a 	mov	r2,zero
   25c40:	003ff306 	br	25c10 <_Balloc+0x48>
   25c44:	01400044 	movi	r5,1
   25c48:	2c24983a 	sll	r18,r5,r16
   25c4c:	8809883a 	mov	r4,r17
   25c50:	91800144 	addi	r6,r18,5
   25c54:	318d883a 	add	r6,r6,r6
   25c58:	318d883a 	add	r6,r6,r6
   25c5c:	002752c0 	call	2752c <_calloc_r>
   25c60:	103ff626 	beq	r2,zero,25c3c <_Balloc+0x74>
   25c64:	14000115 	stw	r16,4(r2)
   25c68:	14800215 	stw	r18,8(r2)
   25c6c:	003fe606 	br	25c08 <_Balloc+0x40>

00025c70 <_Bfree>:
   25c70:	28000826 	beq	r5,zero,25c94 <_Bfree+0x24>
   25c74:	28c00117 	ldw	r3,4(r5)
   25c78:	20801317 	ldw	r2,76(r4)
   25c7c:	18c7883a 	add	r3,r3,r3
   25c80:	18c7883a 	add	r3,r3,r3
   25c84:	10c5883a 	add	r2,r2,r3
   25c88:	10c00017 	ldw	r3,0(r2)
   25c8c:	28c00015 	stw	r3,0(r5)
   25c90:	11400015 	stw	r5,0(r2)
   25c94:	f800283a 	ret

00025c98 <__multadd>:
   25c98:	defff604 	addi	sp,sp,-40
   25c9c:	dd400515 	stw	r21,20(sp)
   25ca0:	2d400417 	ldw	r21,16(r5)
   25ca4:	df000815 	stw	fp,32(sp)
   25ca8:	ddc00715 	stw	r23,28(sp)
   25cac:	dd800615 	stw	r22,24(sp)
   25cb0:	dd000415 	stw	r20,16(sp)
   25cb4:	dc400115 	stw	r17,4(sp)
   25cb8:	dc000015 	stw	r16,0(sp)
   25cbc:	dfc00915 	stw	ra,36(sp)
   25cc0:	dcc00315 	stw	r19,12(sp)
   25cc4:	dc800215 	stw	r18,8(sp)
   25cc8:	282d883a 	mov	r22,r5
   25ccc:	202f883a 	mov	r23,r4
   25cd0:	3029883a 	mov	r20,r6
   25cd4:	3839883a 	mov	fp,r7
   25cd8:	2c000504 	addi	r16,r5,20
   25cdc:	0023883a 	mov	r17,zero
   25ce0:	84c00017 	ldw	r19,0(r16)
   25ce4:	a00b883a 	mov	r5,r20
   25ce8:	8c400044 	addi	r17,r17,1
   25cec:	993fffcc 	andi	r4,r19,65535
   25cf0:	00294380 	call	29438 <__mulsi3>
   25cf4:	1725883a 	add	r18,r2,fp
   25cf8:	9808d43a 	srli	r4,r19,16
   25cfc:	9026d43a 	srli	r19,r18,16
   25d00:	a00b883a 	mov	r5,r20
   25d04:	00294380 	call	29438 <__mulsi3>
   25d08:	988f883a 	add	r7,r19,r2
   25d0c:	3804943a 	slli	r2,r7,16
   25d10:	94bfffcc 	andi	r18,r18,65535
   25d14:	3838d43a 	srli	fp,r7,16
   25d18:	14a5883a 	add	r18,r2,r18
   25d1c:	84800015 	stw	r18,0(r16)
   25d20:	84000104 	addi	r16,r16,4
   25d24:	8d7fee16 	blt	r17,r21,25ce0 <__multadd+0x48>
   25d28:	e0000926 	beq	fp,zero,25d50 <__multadd+0xb8>
   25d2c:	b0800217 	ldw	r2,8(r22)
   25d30:	a880140e 	bge	r21,r2,25d84 <__multadd+0xec>
   25d34:	a8800144 	addi	r2,r21,5
   25d38:	1085883a 	add	r2,r2,r2
   25d3c:	1085883a 	add	r2,r2,r2
   25d40:	b085883a 	add	r2,r22,r2
   25d44:	ad400044 	addi	r21,r21,1
   25d48:	17000015 	stw	fp,0(r2)
   25d4c:	b5400415 	stw	r21,16(r22)
   25d50:	b005883a 	mov	r2,r22
   25d54:	dfc00917 	ldw	ra,36(sp)
   25d58:	df000817 	ldw	fp,32(sp)
   25d5c:	ddc00717 	ldw	r23,28(sp)
   25d60:	dd800617 	ldw	r22,24(sp)
   25d64:	dd400517 	ldw	r21,20(sp)
   25d68:	dd000417 	ldw	r20,16(sp)
   25d6c:	dcc00317 	ldw	r19,12(sp)
   25d70:	dc800217 	ldw	r18,8(sp)
   25d74:	dc400117 	ldw	r17,4(sp)
   25d78:	dc000017 	ldw	r16,0(sp)
   25d7c:	dec00a04 	addi	sp,sp,40
   25d80:	f800283a 	ret
   25d84:	b1400117 	ldw	r5,4(r22)
   25d88:	b809883a 	mov	r4,r23
   25d8c:	29400044 	addi	r5,r5,1
   25d90:	0025bc80 	call	25bc8 <_Balloc>
   25d94:	b1800417 	ldw	r6,16(r22)
   25d98:	b1400304 	addi	r5,r22,12
   25d9c:	11000304 	addi	r4,r2,12
   25da0:	31800084 	addi	r6,r6,2
   25da4:	318d883a 	add	r6,r6,r6
   25da8:	318d883a 	add	r6,r6,r6
   25dac:	1021883a 	mov	r16,r2
   25db0:	00258200 	call	25820 <memcpy>
   25db4:	b0c00117 	ldw	r3,4(r22)
   25db8:	b8801317 	ldw	r2,76(r23)
   25dbc:	18c7883a 	add	r3,r3,r3
   25dc0:	18c7883a 	add	r3,r3,r3
   25dc4:	10c5883a 	add	r2,r2,r3
   25dc8:	10c00017 	ldw	r3,0(r2)
   25dcc:	b0c00015 	stw	r3,0(r22)
   25dd0:	15800015 	stw	r22,0(r2)
   25dd4:	802d883a 	mov	r22,r16
   25dd8:	003fd606 	br	25d34 <__multadd+0x9c>

00025ddc <__s2b>:
   25ddc:	defff904 	addi	sp,sp,-28
   25de0:	dd000415 	stw	r20,16(sp)
   25de4:	dc400115 	stw	r17,4(sp)
   25de8:	2829883a 	mov	r20,r5
   25dec:	2023883a 	mov	r17,r4
   25df0:	01400244 	movi	r5,9
   25df4:	39000204 	addi	r4,r7,8
   25df8:	dcc00315 	stw	r19,12(sp)
   25dfc:	dc800215 	stw	r18,8(sp)
   25e00:	dfc00615 	stw	ra,24(sp)
   25e04:	dd400515 	stw	r21,20(sp)
   25e08:	dc000015 	stw	r16,0(sp)
   25e0c:	3825883a 	mov	r18,r7
   25e10:	3027883a 	mov	r19,r6
   25e14:	002937c0 	call	2937c <__divsi3>
   25e18:	00c00044 	movi	r3,1
   25e1c:	000b883a 	mov	r5,zero
   25e20:	1880030e 	bge	r3,r2,25e30 <__s2b+0x54>
   25e24:	18c7883a 	add	r3,r3,r3
   25e28:	29400044 	addi	r5,r5,1
   25e2c:	18bffd16 	blt	r3,r2,25e24 <__s2b+0x48>
   25e30:	8809883a 	mov	r4,r17
   25e34:	0025bc80 	call	25bc8 <_Balloc>
   25e38:	d8c00717 	ldw	r3,28(sp)
   25e3c:	10c00515 	stw	r3,20(r2)
   25e40:	00c00044 	movi	r3,1
   25e44:	10c00415 	stw	r3,16(r2)
   25e48:	00c00244 	movi	r3,9
   25e4c:	1cc0210e 	bge	r3,r19,25ed4 <__s2b+0xf8>
   25e50:	a0eb883a 	add	r21,r20,r3
   25e54:	a821883a 	mov	r16,r21
   25e58:	a4e9883a 	add	r20,r20,r19
   25e5c:	81c00007 	ldb	r7,0(r16)
   25e60:	8809883a 	mov	r4,r17
   25e64:	84000044 	addi	r16,r16,1
   25e68:	100b883a 	mov	r5,r2
   25e6c:	01800284 	movi	r6,10
   25e70:	39fff404 	addi	r7,r7,-48
   25e74:	0025c980 	call	25c98 <__multadd>
   25e78:	853ff81e 	bne	r16,r20,25e5c <__s2b+0x80>
   25e7c:	ace1883a 	add	r16,r21,r19
   25e80:	843ffe04 	addi	r16,r16,-8
   25e84:	9c800a0e 	bge	r19,r18,25eb0 <__s2b+0xd4>
   25e88:	94e5c83a 	sub	r18,r18,r19
   25e8c:	84a5883a 	add	r18,r16,r18
   25e90:	81c00007 	ldb	r7,0(r16)
   25e94:	8809883a 	mov	r4,r17
   25e98:	84000044 	addi	r16,r16,1
   25e9c:	100b883a 	mov	r5,r2
   25ea0:	01800284 	movi	r6,10
   25ea4:	39fff404 	addi	r7,r7,-48
   25ea8:	0025c980 	call	25c98 <__multadd>
   25eac:	84bff81e 	bne	r16,r18,25e90 <__s2b+0xb4>
   25eb0:	dfc00617 	ldw	ra,24(sp)
   25eb4:	dd400517 	ldw	r21,20(sp)
   25eb8:	dd000417 	ldw	r20,16(sp)
   25ebc:	dcc00317 	ldw	r19,12(sp)
   25ec0:	dc800217 	ldw	r18,8(sp)
   25ec4:	dc400117 	ldw	r17,4(sp)
   25ec8:	dc000017 	ldw	r16,0(sp)
   25ecc:	dec00704 	addi	sp,sp,28
   25ed0:	f800283a 	ret
   25ed4:	a4000284 	addi	r16,r20,10
   25ed8:	1827883a 	mov	r19,r3
   25edc:	003fe906 	br	25e84 <__s2b+0xa8>

00025ee0 <__hi0bits>:
   25ee0:	20bfffec 	andhi	r2,r4,65535
   25ee4:	1000141e 	bne	r2,zero,25f38 <__hi0bits+0x58>
   25ee8:	2008943a 	slli	r4,r4,16
   25eec:	00800404 	movi	r2,16
   25ef0:	20ffc02c 	andhi	r3,r4,65280
   25ef4:	1800021e 	bne	r3,zero,25f00 <__hi0bits+0x20>
   25ef8:	2008923a 	slli	r4,r4,8
   25efc:	10800204 	addi	r2,r2,8
   25f00:	20fc002c 	andhi	r3,r4,61440
   25f04:	1800021e 	bne	r3,zero,25f10 <__hi0bits+0x30>
   25f08:	2008913a 	slli	r4,r4,4
   25f0c:	10800104 	addi	r2,r2,4
   25f10:	20f0002c 	andhi	r3,r4,49152
   25f14:	1800031e 	bne	r3,zero,25f24 <__hi0bits+0x44>
   25f18:	2109883a 	add	r4,r4,r4
   25f1c:	10800084 	addi	r2,r2,2
   25f20:	2109883a 	add	r4,r4,r4
   25f24:	20000316 	blt	r4,zero,25f34 <__hi0bits+0x54>
   25f28:	2110002c 	andhi	r4,r4,16384
   25f2c:	2000041e 	bne	r4,zero,25f40 <__hi0bits+0x60>
   25f30:	00800804 	movi	r2,32
   25f34:	f800283a 	ret
   25f38:	0005883a 	mov	r2,zero
   25f3c:	003fec06 	br	25ef0 <__hi0bits+0x10>
   25f40:	10800044 	addi	r2,r2,1
   25f44:	f800283a 	ret

00025f48 <__lo0bits>:
   25f48:	20c00017 	ldw	r3,0(r4)
   25f4c:	188001cc 	andi	r2,r3,7
   25f50:	10000826 	beq	r2,zero,25f74 <__lo0bits+0x2c>
   25f54:	1880004c 	andi	r2,r3,1
   25f58:	1000211e 	bne	r2,zero,25fe0 <__lo0bits+0x98>
   25f5c:	1880008c 	andi	r2,r3,2
   25f60:	1000211e 	bne	r2,zero,25fe8 <__lo0bits+0xa0>
   25f64:	1806d0ba 	srli	r3,r3,2
   25f68:	00800084 	movi	r2,2
   25f6c:	20c00015 	stw	r3,0(r4)
   25f70:	f800283a 	ret
   25f74:	18bfffcc 	andi	r2,r3,65535
   25f78:	10001326 	beq	r2,zero,25fc8 <__lo0bits+0x80>
   25f7c:	0005883a 	mov	r2,zero
   25f80:	19403fcc 	andi	r5,r3,255
   25f84:	2800021e 	bne	r5,zero,25f90 <__lo0bits+0x48>
   25f88:	1806d23a 	srli	r3,r3,8
   25f8c:	10800204 	addi	r2,r2,8
   25f90:	194003cc 	andi	r5,r3,15
   25f94:	2800021e 	bne	r5,zero,25fa0 <__lo0bits+0x58>
   25f98:	1806d13a 	srli	r3,r3,4
   25f9c:	10800104 	addi	r2,r2,4
   25fa0:	194000cc 	andi	r5,r3,3
   25fa4:	2800021e 	bne	r5,zero,25fb0 <__lo0bits+0x68>
   25fa8:	1806d0ba 	srli	r3,r3,2
   25fac:	10800084 	addi	r2,r2,2
   25fb0:	1940004c 	andi	r5,r3,1
   25fb4:	2800081e 	bne	r5,zero,25fd8 <__lo0bits+0x90>
   25fb8:	1806d07a 	srli	r3,r3,1
   25fbc:	1800051e 	bne	r3,zero,25fd4 <__lo0bits+0x8c>
   25fc0:	00800804 	movi	r2,32
   25fc4:	f800283a 	ret
   25fc8:	1806d43a 	srli	r3,r3,16
   25fcc:	00800404 	movi	r2,16
   25fd0:	003feb06 	br	25f80 <__lo0bits+0x38>
   25fd4:	10800044 	addi	r2,r2,1
   25fd8:	20c00015 	stw	r3,0(r4)
   25fdc:	f800283a 	ret
   25fe0:	0005883a 	mov	r2,zero
   25fe4:	f800283a 	ret
   25fe8:	1806d07a 	srli	r3,r3,1
   25fec:	00800044 	movi	r2,1
   25ff0:	20c00015 	stw	r3,0(r4)
   25ff4:	f800283a 	ret

00025ff8 <__i2b>:
   25ff8:	defffd04 	addi	sp,sp,-12
   25ffc:	dc000015 	stw	r16,0(sp)
   26000:	04000044 	movi	r16,1
   26004:	dc400115 	stw	r17,4(sp)
   26008:	2823883a 	mov	r17,r5
   2600c:	800b883a 	mov	r5,r16
   26010:	dfc00215 	stw	ra,8(sp)
   26014:	0025bc80 	call	25bc8 <_Balloc>
   26018:	14400515 	stw	r17,20(r2)
   2601c:	14000415 	stw	r16,16(r2)
   26020:	dfc00217 	ldw	ra,8(sp)
   26024:	dc400117 	ldw	r17,4(sp)
   26028:	dc000017 	ldw	r16,0(sp)
   2602c:	dec00304 	addi	sp,sp,12
   26030:	f800283a 	ret

00026034 <__multiply>:
   26034:	defff004 	addi	sp,sp,-64
   26038:	dc800815 	stw	r18,32(sp)
   2603c:	dc400715 	stw	r17,28(sp)
   26040:	34800417 	ldw	r18,16(r6)
   26044:	2c400417 	ldw	r17,16(r5)
   26048:	ddc00d15 	stw	r23,52(sp)
   2604c:	dc000615 	stw	r16,24(sp)
   26050:	dfc00f15 	stw	ra,60(sp)
   26054:	df000e15 	stw	fp,56(sp)
   26058:	dd800c15 	stw	r22,48(sp)
   2605c:	dd400b15 	stw	r21,44(sp)
   26060:	dd000a15 	stw	r20,40(sp)
   26064:	dcc00915 	stw	r19,36(sp)
   26068:	2821883a 	mov	r16,r5
   2606c:	302f883a 	mov	r23,r6
   26070:	8c80050e 	bge	r17,r18,26088 <__multiply+0x54>
   26074:	8807883a 	mov	r3,r17
   26078:	3021883a 	mov	r16,r6
   2607c:	9023883a 	mov	r17,r18
   26080:	282f883a 	mov	r23,r5
   26084:	1825883a 	mov	r18,r3
   26088:	80800217 	ldw	r2,8(r16)
   2608c:	8c87883a 	add	r3,r17,r18
   26090:	d8c00115 	stw	r3,4(sp)
   26094:	81400117 	ldw	r5,4(r16)
   26098:	10c0010e 	bge	r2,r3,260a0 <__multiply+0x6c>
   2609c:	29400044 	addi	r5,r5,1
   260a0:	0025bc80 	call	25bc8 <_Balloc>
   260a4:	d8c00117 	ldw	r3,4(sp)
   260a8:	d8800515 	stw	r2,20(sp)
   260ac:	14c00504 	addi	r19,r2,20
   260b0:	1d400144 	addi	r21,r3,5
   260b4:	ad6b883a 	add	r21,r21,r21
   260b8:	ad6b883a 	add	r21,r21,r21
   260bc:	156b883a 	add	r21,r2,r21
   260c0:	dd400215 	stw	r21,8(sp)
   260c4:	9805883a 	mov	r2,r19
   260c8:	9d40042e 	bgeu	r19,r21,260dc <__multiply+0xa8>
   260cc:	d8c00217 	ldw	r3,8(sp)
   260d0:	10000015 	stw	zero,0(r2)
   260d4:	10800104 	addi	r2,r2,4
   260d8:	10fffc36 	bltu	r2,r3,260cc <__multiply+0x98>
   260dc:	94800144 	addi	r18,r18,5
   260e0:	94a5883a 	add	r18,r18,r18
   260e4:	94ad883a 	add	r22,r18,r18
   260e8:	8c400144 	addi	r17,r17,5
   260ec:	8c63883a 	add	r17,r17,r17
   260f0:	bdad883a 	add	r22,r23,r22
   260f4:	80c00504 	addi	r3,r16,20
   260f8:	8c63883a 	add	r17,r17,r17
   260fc:	bc800504 	addi	r18,r23,20
   26100:	dd800315 	stw	r22,12(sp)
   26104:	d8c00415 	stw	r3,16(sp)
   26108:	dcc00015 	stw	r19,0(sp)
   2610c:	8463883a 	add	r17,r16,r17
   26110:	9580412e 	bgeu	r18,r22,26218 <__multiply+0x1e4>
   26114:	90800017 	ldw	r2,0(r18)
   26118:	173fffcc 	andi	fp,r2,65535
   2611c:	e0001a26 	beq	fp,zero,26188 <__multiply+0x154>
   26120:	dd000017 	ldw	r20,0(sp)
   26124:	dd800417 	ldw	r22,16(sp)
   26128:	002b883a 	mov	r21,zero
   2612c:	b4c00017 	ldw	r19,0(r22)
   26130:	a4000017 	ldw	r16,0(r20)
   26134:	e00b883a 	mov	r5,fp
   26138:	993fffcc 	andi	r4,r19,65535
   2613c:	00294380 	call	29438 <__mulsi3>
   26140:	9808d43a 	srli	r4,r19,16
   26144:	817fffcc 	andi	r5,r16,65535
   26148:	1145883a 	add	r2,r2,r5
   2614c:	e00b883a 	mov	r5,fp
   26150:	1567883a 	add	r19,r2,r21
   26154:	8020d43a 	srli	r16,r16,16
   26158:	00294380 	call	29438 <__mulsi3>
   2615c:	9808d43a 	srli	r4,r19,16
   26160:	1405883a 	add	r2,r2,r16
   26164:	a4c0000d 	sth	r19,0(r20)
   26168:	110f883a 	add	r7,r2,r4
   2616c:	a1c0008d 	sth	r7,2(r20)
   26170:	b5800104 	addi	r22,r22,4
   26174:	382ad43a 	srli	r21,r7,16
   26178:	a5000104 	addi	r20,r20,4
   2617c:	b47feb36 	bltu	r22,r17,2612c <__multiply+0xf8>
   26180:	a5400015 	stw	r21,0(r20)
   26184:	90800017 	ldw	r2,0(r18)
   26188:	1038d43a 	srli	fp,r2,16
   2618c:	e0001c26 	beq	fp,zero,26200 <__multiply+0x1cc>
   26190:	d8c00017 	ldw	r3,0(sp)
   26194:	dd000417 	ldw	r20,16(sp)
   26198:	002b883a 	mov	r21,zero
   2619c:	1d800017 	ldw	r22,0(r3)
   261a0:	182f883a 	mov	r23,r3
   261a4:	b021883a 	mov	r16,r22
   261a8:	a4c00017 	ldw	r19,0(r20)
   261ac:	8020d43a 	srli	r16,r16,16
   261b0:	e00b883a 	mov	r5,fp
   261b4:	993fffcc 	andi	r4,r19,65535
   261b8:	00294380 	call	29438 <__mulsi3>
   261bc:	1405883a 	add	r2,r2,r16
   261c0:	9808d43a 	srli	r4,r19,16
   261c4:	156b883a 	add	r21,r2,r21
   261c8:	bdc00104 	addi	r23,r23,4
   261cc:	bdbfff0d 	sth	r22,-4(r23)
   261d0:	bd7fff8d 	sth	r21,-2(r23)
   261d4:	bc000017 	ldw	r16,0(r23)
   261d8:	e00b883a 	mov	r5,fp
   261dc:	00294380 	call	29438 <__mulsi3>
   261e0:	a80ed43a 	srli	r7,r21,16
   261e4:	813fffcc 	andi	r4,r16,65535
   261e8:	2085883a 	add	r2,r4,r2
   261ec:	11ed883a 	add	r22,r2,r7
   261f0:	a5000104 	addi	r20,r20,4
   261f4:	b02ad43a 	srli	r21,r22,16
   261f8:	a47feb36 	bltu	r20,r17,261a8 <__multiply+0x174>
   261fc:	bd800015 	stw	r22,0(r23)
   26200:	d8c00017 	ldw	r3,0(sp)
   26204:	94800104 	addi	r18,r18,4
   26208:	18c00104 	addi	r3,r3,4
   2620c:	d8c00015 	stw	r3,0(sp)
   26210:	d8c00317 	ldw	r3,12(sp)
   26214:	90ffbf36 	bltu	r18,r3,26114 <__multiply+0xe0>
   26218:	d8c00117 	ldw	r3,4(sp)
   2621c:	00c00c0e 	bge	zero,r3,26250 <__multiply+0x21c>
   26220:	d8c00217 	ldw	r3,8(sp)
   26224:	18bfff17 	ldw	r2,-4(r3)
   26228:	1d7fff04 	addi	r21,r3,-4
   2622c:	10000326 	beq	r2,zero,2623c <__multiply+0x208>
   26230:	00000706 	br	26250 <__multiply+0x21c>
   26234:	a8800017 	ldw	r2,0(r21)
   26238:	1000051e 	bne	r2,zero,26250 <__multiply+0x21c>
   2623c:	d8c00117 	ldw	r3,4(sp)
   26240:	ad7fff04 	addi	r21,r21,-4
   26244:	18ffffc4 	addi	r3,r3,-1
   26248:	d8c00115 	stw	r3,4(sp)
   2624c:	183ff91e 	bne	r3,zero,26234 <__multiply+0x200>
   26250:	d8800517 	ldw	r2,20(sp)
   26254:	d8c00117 	ldw	r3,4(sp)
   26258:	10c00415 	stw	r3,16(r2)
   2625c:	dfc00f17 	ldw	ra,60(sp)
   26260:	df000e17 	ldw	fp,56(sp)
   26264:	ddc00d17 	ldw	r23,52(sp)
   26268:	dd800c17 	ldw	r22,48(sp)
   2626c:	dd400b17 	ldw	r21,44(sp)
   26270:	dd000a17 	ldw	r20,40(sp)
   26274:	dcc00917 	ldw	r19,36(sp)
   26278:	dc800817 	ldw	r18,32(sp)
   2627c:	dc400717 	ldw	r17,28(sp)
   26280:	dc000617 	ldw	r16,24(sp)
   26284:	dec01004 	addi	sp,sp,64
   26288:	f800283a 	ret

0002628c <__pow5mult>:
   2628c:	defffb04 	addi	sp,sp,-20
   26290:	dcc00315 	stw	r19,12(sp)
   26294:	dc800215 	stw	r18,8(sp)
   26298:	dc000015 	stw	r16,0(sp)
   2629c:	dfc00415 	stw	ra,16(sp)
   262a0:	dc400115 	stw	r17,4(sp)
   262a4:	308000cc 	andi	r2,r6,3
   262a8:	3021883a 	mov	r16,r6
   262ac:	2027883a 	mov	r19,r4
   262b0:	2825883a 	mov	r18,r5
   262b4:	10002e1e 	bne	r2,zero,26370 <__pow5mult+0xe4>
   262b8:	8021d0ba 	srai	r16,r16,2
   262bc:	80001a26 	beq	r16,zero,26328 <__pow5mult+0x9c>
   262c0:	9c401217 	ldw	r17,72(r19)
   262c4:	8800061e 	bne	r17,zero,262e0 <__pow5mult+0x54>
   262c8:	00003406 	br	2639c <__pow5mult+0x110>
   262cc:	8021d07a 	srai	r16,r16,1
   262d0:	80001526 	beq	r16,zero,26328 <__pow5mult+0x9c>
   262d4:	88c00017 	ldw	r3,0(r17)
   262d8:	18001b26 	beq	r3,zero,26348 <__pow5mult+0xbc>
   262dc:	1823883a 	mov	r17,r3
   262e0:	80c0004c 	andi	r3,r16,1
   262e4:	183ff926 	beq	r3,zero,262cc <__pow5mult+0x40>
   262e8:	900b883a 	mov	r5,r18
   262ec:	880d883a 	mov	r6,r17
   262f0:	9809883a 	mov	r4,r19
   262f4:	00260340 	call	26034 <__multiply>
   262f8:	90001b26 	beq	r18,zero,26368 <__pow5mult+0xdc>
   262fc:	91000117 	ldw	r4,4(r18)
   26300:	98c01317 	ldw	r3,76(r19)
   26304:	8021d07a 	srai	r16,r16,1
   26308:	2109883a 	add	r4,r4,r4
   2630c:	2109883a 	add	r4,r4,r4
   26310:	1907883a 	add	r3,r3,r4
   26314:	19000017 	ldw	r4,0(r3)
   26318:	91000015 	stw	r4,0(r18)
   2631c:	1c800015 	stw	r18,0(r3)
   26320:	1025883a 	mov	r18,r2
   26324:	803feb1e 	bne	r16,zero,262d4 <__pow5mult+0x48>
   26328:	9005883a 	mov	r2,r18
   2632c:	dfc00417 	ldw	ra,16(sp)
   26330:	dcc00317 	ldw	r19,12(sp)
   26334:	dc800217 	ldw	r18,8(sp)
   26338:	dc400117 	ldw	r17,4(sp)
   2633c:	dc000017 	ldw	r16,0(sp)
   26340:	dec00504 	addi	sp,sp,20
   26344:	f800283a 	ret
   26348:	880b883a 	mov	r5,r17
   2634c:	880d883a 	mov	r6,r17
   26350:	9809883a 	mov	r4,r19
   26354:	00260340 	call	26034 <__multiply>
   26358:	88800015 	stw	r2,0(r17)
   2635c:	10000015 	stw	zero,0(r2)
   26360:	1023883a 	mov	r17,r2
   26364:	003fde06 	br	262e0 <__pow5mult+0x54>
   26368:	1025883a 	mov	r18,r2
   2636c:	003fd706 	br	262cc <__pow5mult+0x40>
   26370:	10bfffc4 	addi	r2,r2,-1
   26374:	1085883a 	add	r2,r2,r2
   26378:	00c000f4 	movhi	r3,3
   2637c:	18f25904 	addi	r3,r3,-13980
   26380:	1085883a 	add	r2,r2,r2
   26384:	1885883a 	add	r2,r3,r2
   26388:	11800017 	ldw	r6,0(r2)
   2638c:	000f883a 	mov	r7,zero
   26390:	0025c980 	call	25c98 <__multadd>
   26394:	1025883a 	mov	r18,r2
   26398:	003fc706 	br	262b8 <__pow5mult+0x2c>
   2639c:	9809883a 	mov	r4,r19
   263a0:	01409c44 	movi	r5,625
   263a4:	0025ff80 	call	25ff8 <__i2b>
   263a8:	98801215 	stw	r2,72(r19)
   263ac:	1023883a 	mov	r17,r2
   263b0:	10000015 	stw	zero,0(r2)
   263b4:	003fca06 	br	262e0 <__pow5mult+0x54>

000263b8 <__lshift>:
   263b8:	defff904 	addi	sp,sp,-28
   263bc:	dd400515 	stw	r21,20(sp)
   263c0:	dc400115 	stw	r17,4(sp)
   263c4:	2d400417 	ldw	r21,16(r5)
   263c8:	3023d17a 	srai	r17,r6,5
   263cc:	28800217 	ldw	r2,8(r5)
   263d0:	dd000415 	stw	r20,16(sp)
   263d4:	8d6b883a 	add	r21,r17,r21
   263d8:	dcc00315 	stw	r19,12(sp)
   263dc:	dc800215 	stw	r18,8(sp)
   263e0:	dc000015 	stw	r16,0(sp)
   263e4:	dfc00615 	stw	ra,24(sp)
   263e8:	ac000044 	addi	r16,r21,1
   263ec:	2825883a 	mov	r18,r5
   263f0:	3029883a 	mov	r20,r6
   263f4:	2027883a 	mov	r19,r4
   263f8:	29400117 	ldw	r5,4(r5)
   263fc:	1400030e 	bge	r2,r16,2640c <__lshift+0x54>
   26400:	1085883a 	add	r2,r2,r2
   26404:	29400044 	addi	r5,r5,1
   26408:	143ffd16 	blt	r2,r16,26400 <__lshift+0x48>
   2640c:	9809883a 	mov	r4,r19
   26410:	0025bc80 	call	25bc8 <_Balloc>
   26414:	10c00504 	addi	r3,r2,20
   26418:	0440090e 	bge	zero,r17,26440 <__lshift+0x88>
   2641c:	000f883a 	mov	r7,zero
   26420:	18000015 	stw	zero,0(r3)
   26424:	39c00044 	addi	r7,r7,1
   26428:	18c00104 	addi	r3,r3,4
   2642c:	3c7ffc1e 	bne	r7,r17,26420 <__lshift+0x68>
   26430:	38c00144 	addi	r3,r7,5
   26434:	18c7883a 	add	r3,r3,r3
   26438:	18c7883a 	add	r3,r3,r3
   2643c:	10c7883a 	add	r3,r2,r3
   26440:	92000417 	ldw	r8,16(r18)
   26444:	a18007cc 	andi	r6,r20,31
   26448:	91c00504 	addi	r7,r18,20
   2644c:	42000144 	addi	r8,r8,5
   26450:	4211883a 	add	r8,r8,r8
   26454:	4211883a 	add	r8,r8,r8
   26458:	9211883a 	add	r8,r18,r8
   2645c:	30002226 	beq	r6,zero,264e8 <__lshift+0x130>
   26460:	02800804 	movi	r10,32
   26464:	5195c83a 	sub	r10,r10,r6
   26468:	000b883a 	mov	r5,zero
   2646c:	3a400017 	ldw	r9,0(r7)
   26470:	18c00104 	addi	r3,r3,4
   26474:	39c00104 	addi	r7,r7,4
   26478:	4992983a 	sll	r9,r9,r6
   2647c:	2a4ab03a 	or	r5,r5,r9
   26480:	197fff15 	stw	r5,-4(r3)
   26484:	397fff17 	ldw	r5,-4(r7)
   26488:	2a8ad83a 	srl	r5,r5,r10
   2648c:	3a3ff736 	bltu	r7,r8,2646c <__lshift+0xb4>
   26490:	19400015 	stw	r5,0(r3)
   26494:	28000126 	beq	r5,zero,2649c <__lshift+0xe4>
   26498:	ac000084 	addi	r16,r21,2
   2649c:	91000117 	ldw	r4,4(r18)
   264a0:	98c01317 	ldw	r3,76(r19)
   264a4:	843fffc4 	addi	r16,r16,-1
   264a8:	2109883a 	add	r4,r4,r4
   264ac:	2109883a 	add	r4,r4,r4
   264b0:	1907883a 	add	r3,r3,r4
   264b4:	19000017 	ldw	r4,0(r3)
   264b8:	14000415 	stw	r16,16(r2)
   264bc:	91000015 	stw	r4,0(r18)
   264c0:	1c800015 	stw	r18,0(r3)
   264c4:	dfc00617 	ldw	ra,24(sp)
   264c8:	dd400517 	ldw	r21,20(sp)
   264cc:	dd000417 	ldw	r20,16(sp)
   264d0:	dcc00317 	ldw	r19,12(sp)
   264d4:	dc800217 	ldw	r18,8(sp)
   264d8:	dc400117 	ldw	r17,4(sp)
   264dc:	dc000017 	ldw	r16,0(sp)
   264e0:	dec00704 	addi	sp,sp,28
   264e4:	f800283a 	ret
   264e8:	39400017 	ldw	r5,0(r7)
   264ec:	18c00104 	addi	r3,r3,4
   264f0:	39c00104 	addi	r7,r7,4
   264f4:	197fff15 	stw	r5,-4(r3)
   264f8:	3a3fe82e 	bgeu	r7,r8,2649c <__lshift+0xe4>
   264fc:	39400017 	ldw	r5,0(r7)
   26500:	18c00104 	addi	r3,r3,4
   26504:	39c00104 	addi	r7,r7,4
   26508:	197fff15 	stw	r5,-4(r3)
   2650c:	3a3ff636 	bltu	r7,r8,264e8 <__lshift+0x130>
   26510:	003fe206 	br	2649c <__lshift+0xe4>

00026514 <__mcmp>:
   26514:	20800417 	ldw	r2,16(r4)
   26518:	28c00417 	ldw	r3,16(r5)
   2651c:	10c5c83a 	sub	r2,r2,r3
   26520:	10000f1e 	bne	r2,zero,26560 <__mcmp+0x4c>
   26524:	18c00144 	addi	r3,r3,5
   26528:	18c7883a 	add	r3,r3,r3
   2652c:	18c7883a 	add	r3,r3,r3
   26530:	21c00504 	addi	r7,r4,20
   26534:	28cb883a 	add	r5,r5,r3
   26538:	20c9883a 	add	r4,r4,r3
   2653c:	213fff04 	addi	r4,r4,-4
   26540:	297fff04 	addi	r5,r5,-4
   26544:	21800017 	ldw	r6,0(r4)
   26548:	28c00017 	ldw	r3,0(r5)
   2654c:	30c0021e 	bne	r6,r3,26558 <__mcmp+0x44>
   26550:	393ffa36 	bltu	r7,r4,2653c <__mcmp+0x28>
   26554:	f800283a 	ret
   26558:	30c00236 	bltu	r6,r3,26564 <__mcmp+0x50>
   2655c:	00800044 	movi	r2,1
   26560:	f800283a 	ret
   26564:	00bfffc4 	movi	r2,-1
   26568:	f800283a 	ret

0002656c <__mdiff>:
   2656c:	defffb04 	addi	sp,sp,-20
   26570:	dc000015 	stw	r16,0(sp)
   26574:	2821883a 	mov	r16,r5
   26578:	dc800215 	stw	r18,8(sp)
   2657c:	300b883a 	mov	r5,r6
   26580:	2025883a 	mov	r18,r4
   26584:	8009883a 	mov	r4,r16
   26588:	dc400115 	stw	r17,4(sp)
   2658c:	dfc00415 	stw	ra,16(sp)
   26590:	dcc00315 	stw	r19,12(sp)
   26594:	3023883a 	mov	r17,r6
   26598:	00265140 	call	26514 <__mcmp>
   2659c:	10005026 	beq	r2,zero,266e0 <__mdiff+0x174>
   265a0:	10004a16 	blt	r2,zero,266cc <__mdiff+0x160>
   265a4:	0027883a 	mov	r19,zero
   265a8:	81400117 	ldw	r5,4(r16)
   265ac:	9009883a 	mov	r4,r18
   265b0:	0025bc80 	call	25bc8 <_Balloc>
   265b4:	82400417 	ldw	r9,16(r16)
   265b8:	89800417 	ldw	r6,16(r17)
   265bc:	14c00315 	stw	r19,12(r2)
   265c0:	4b800144 	addi	r14,r9,5
   265c4:	31800144 	addi	r6,r6,5
   265c8:	739d883a 	add	r14,r14,r14
   265cc:	318d883a 	add	r6,r6,r6
   265d0:	739d883a 	add	r14,r14,r14
   265d4:	318d883a 	add	r6,r6,r6
   265d8:	81c00504 	addi	r7,r16,20
   265dc:	839d883a 	add	r14,r16,r14
   265e0:	8a000504 	addi	r8,r17,20
   265e4:	898d883a 	add	r6,r17,r6
   265e8:	10c00504 	addi	r3,r2,20
   265ec:	0009883a 	mov	r4,zero
   265f0:	3b000017 	ldw	r12,0(r7)
   265f4:	42c00017 	ldw	r11,0(r8)
   265f8:	42000104 	addi	r8,r8,4
   265fc:	62bfffcc 	andi	r10,r12,65535
   26600:	5b7fffcc 	andi	r13,r11,65535
   26604:	5109883a 	add	r4,r10,r4
   26608:	2355c83a 	sub	r10,r4,r13
   2660c:	5816d43a 	srli	r11,r11,16
   26610:	6008d43a 	srli	r4,r12,16
   26614:	501bd43a 	srai	r13,r10,16
   26618:	1a80000d 	sth	r10,0(r3)
   2661c:	22c9c83a 	sub	r4,r4,r11
   26620:	2349883a 	add	r4,r4,r13
   26624:	1900008d 	sth	r4,2(r3)
   26628:	39c00104 	addi	r7,r7,4
   2662c:	2009d43a 	srai	r4,r4,16
   26630:	18c00104 	addi	r3,r3,4
   26634:	41bfee36 	bltu	r8,r6,265f0 <__mdiff+0x84>
   26638:	180b883a 	mov	r5,r3
   2663c:	3815883a 	mov	r10,r7
   26640:	3b80132e 	bgeu	r7,r14,26690 <__mdiff+0x124>
   26644:	3a000017 	ldw	r8,0(r7)
   26648:	18c00104 	addi	r3,r3,4
   2664c:	39c00104 	addi	r7,r7,4
   26650:	41bfffcc 	andi	r6,r8,65535
   26654:	310d883a 	add	r6,r6,r4
   26658:	3009d43a 	srai	r4,r6,16
   2665c:	4010d43a 	srli	r8,r8,16
   26660:	19bfff0d 	sth	r6,-4(r3)
   26664:	2209883a 	add	r4,r4,r8
   26668:	193fff8d 	sth	r4,-2(r3)
   2666c:	2009d43a 	srai	r4,r4,16
   26670:	3bbff436 	bltu	r7,r14,26644 <__mdiff+0xd8>
   26674:	0286303a 	nor	r3,zero,r10
   26678:	1b87883a 	add	r3,r3,r14
   2667c:	1806d0ba 	srli	r3,r3,2
   26680:	18c00044 	addi	r3,r3,1
   26684:	18c7883a 	add	r3,r3,r3
   26688:	18c7883a 	add	r3,r3,r3
   2668c:	28c7883a 	add	r3,r5,r3
   26690:	193fff17 	ldw	r4,-4(r3)
   26694:	18ffff04 	addi	r3,r3,-4
   26698:	2000041e 	bne	r4,zero,266ac <__mdiff+0x140>
   2669c:	18ffff04 	addi	r3,r3,-4
   266a0:	19000017 	ldw	r4,0(r3)
   266a4:	4a7fffc4 	addi	r9,r9,-1
   266a8:	203ffc26 	beq	r4,zero,2669c <__mdiff+0x130>
   266ac:	12400415 	stw	r9,16(r2)
   266b0:	dfc00417 	ldw	ra,16(sp)
   266b4:	dcc00317 	ldw	r19,12(sp)
   266b8:	dc800217 	ldw	r18,8(sp)
   266bc:	dc400117 	ldw	r17,4(sp)
   266c0:	dc000017 	ldw	r16,0(sp)
   266c4:	dec00504 	addi	sp,sp,20
   266c8:	f800283a 	ret
   266cc:	8005883a 	mov	r2,r16
   266d0:	04c00044 	movi	r19,1
   266d4:	8821883a 	mov	r16,r17
   266d8:	1023883a 	mov	r17,r2
   266dc:	003fb206 	br	265a8 <__mdiff+0x3c>
   266e0:	9009883a 	mov	r4,r18
   266e4:	000b883a 	mov	r5,zero
   266e8:	0025bc80 	call	25bc8 <_Balloc>
   266ec:	00c00044 	movi	r3,1
   266f0:	10c00415 	stw	r3,16(r2)
   266f4:	10000515 	stw	zero,20(r2)
   266f8:	dfc00417 	ldw	ra,16(sp)
   266fc:	dcc00317 	ldw	r19,12(sp)
   26700:	dc800217 	ldw	r18,8(sp)
   26704:	dc400117 	ldw	r17,4(sp)
   26708:	dc000017 	ldw	r16,0(sp)
   2670c:	dec00504 	addi	sp,sp,20
   26710:	f800283a 	ret

00026714 <__ulp>:
   26714:	295ffc2c 	andhi	r5,r5,32752
   26718:	00bf3034 	movhi	r2,64704
   2671c:	2887883a 	add	r3,r5,r2
   26720:	00c0020e 	bge	zero,r3,2672c <__ulp+0x18>
   26724:	0005883a 	mov	r2,zero
   26728:	f800283a 	ret
   2672c:	00c7c83a 	sub	r3,zero,r3
   26730:	1805d53a 	srai	r2,r3,20
   26734:	00c004c4 	movi	r3,19
   26738:	18800a0e 	bge	r3,r2,26764 <__ulp+0x50>
   2673c:	01000c84 	movi	r4,50
   26740:	0007883a 	mov	r3,zero
   26744:	20800516 	blt	r4,r2,2675c <__ulp+0x48>
   26748:	01000cc4 	movi	r4,51
   2674c:	2085c83a 	sub	r2,r4,r2
   26750:	01000044 	movi	r4,1
   26754:	2084983a 	sll	r2,r4,r2
   26758:	f800283a 	ret
   2675c:	00800044 	movi	r2,1
   26760:	f800283a 	ret
   26764:	00c00234 	movhi	r3,8
   26768:	1887d83a 	sra	r3,r3,r2
   2676c:	0005883a 	mov	r2,zero
   26770:	f800283a 	ret

00026774 <__b2d>:
   26774:	defffa04 	addi	sp,sp,-24
   26778:	dc000015 	stw	r16,0(sp)
   2677c:	24000417 	ldw	r16,16(r4)
   26780:	dc400115 	stw	r17,4(sp)
   26784:	dcc00315 	stw	r19,12(sp)
   26788:	84000144 	addi	r16,r16,5
   2678c:	8421883a 	add	r16,r16,r16
   26790:	8421883a 	add	r16,r16,r16
   26794:	2421883a 	add	r16,r4,r16
   26798:	847fff17 	ldw	r17,-4(r16)
   2679c:	24c00504 	addi	r19,r4,20
   267a0:	dd000415 	stw	r20,16(sp)
   267a4:	8809883a 	mov	r4,r17
   267a8:	dc800215 	stw	r18,8(sp)
   267ac:	2829883a 	mov	r20,r5
   267b0:	dfc00515 	stw	ra,20(sp)
   267b4:	0025ee00 	call	25ee0 <__hi0bits>
   267b8:	00c00804 	movi	r3,32
   267bc:	1887c83a 	sub	r3,r3,r2
   267c0:	a0c00015 	stw	r3,0(r20)
   267c4:	00c00284 	movi	r3,10
   267c8:	84bfff04 	addi	r18,r16,-4
   267cc:	18801216 	blt	r3,r2,26818 <__b2d+0xa4>
   267d0:	010002c4 	movi	r4,11
   267d4:	2089c83a 	sub	r4,r4,r2
   267d8:	8906d83a 	srl	r3,r17,r4
   267dc:	18cffc34 	orhi	r3,r3,16368
   267e0:	9c80322e 	bgeu	r19,r18,268ac <__b2d+0x138>
   267e4:	817ffe17 	ldw	r5,-8(r16)
   267e8:	2908d83a 	srl	r4,r5,r4
   267ec:	10800544 	addi	r2,r2,21
   267f0:	88a2983a 	sll	r17,r17,r2
   267f4:	2444b03a 	or	r2,r4,r17
   267f8:	dfc00517 	ldw	ra,20(sp)
   267fc:	dd000417 	ldw	r20,16(sp)
   26800:	dcc00317 	ldw	r19,12(sp)
   26804:	dc800217 	ldw	r18,8(sp)
   26808:	dc400117 	ldw	r17,4(sp)
   2680c:	dc000017 	ldw	r16,0(sp)
   26810:	dec00604 	addi	sp,sp,24
   26814:	f800283a 	ret
   26818:	9c801636 	bltu	r19,r18,26874 <__b2d+0x100>
   2681c:	113ffd44 	addi	r4,r2,-11
   26820:	000b883a 	mov	r5,zero
   26824:	20001726 	beq	r4,zero,26884 <__b2d+0x110>
   26828:	00c00ac4 	movi	r3,43
   2682c:	1885c83a 	sub	r2,r3,r2
   26830:	8906983a 	sll	r3,r17,r4
   26834:	288cd83a 	srl	r6,r5,r2
   26838:	18cffc34 	orhi	r3,r3,16368
   2683c:	1986b03a 	or	r3,r3,r6
   26840:	9c801c2e 	bgeu	r19,r18,268b4 <__b2d+0x140>
   26844:	91bfff17 	ldw	r6,-4(r18)
   26848:	3084d83a 	srl	r2,r6,r2
   2684c:	2908983a 	sll	r4,r5,r4
   26850:	1104b03a 	or	r2,r2,r4
   26854:	dfc00517 	ldw	ra,20(sp)
   26858:	dd000417 	ldw	r20,16(sp)
   2685c:	dcc00317 	ldw	r19,12(sp)
   26860:	dc800217 	ldw	r18,8(sp)
   26864:	dc400117 	ldw	r17,4(sp)
   26868:	dc000017 	ldw	r16,0(sp)
   2686c:	dec00604 	addi	sp,sp,24
   26870:	f800283a 	ret
   26874:	113ffd44 	addi	r4,r2,-11
   26878:	84bffe04 	addi	r18,r16,-8
   2687c:	817ffe17 	ldw	r5,-8(r16)
   26880:	203fe91e 	bne	r4,zero,26828 <__b2d+0xb4>
   26884:	88cffc34 	orhi	r3,r17,16368
   26888:	2805883a 	mov	r2,r5
   2688c:	dfc00517 	ldw	ra,20(sp)
   26890:	dd000417 	ldw	r20,16(sp)
   26894:	dcc00317 	ldw	r19,12(sp)
   26898:	dc800217 	ldw	r18,8(sp)
   2689c:	dc400117 	ldw	r17,4(sp)
   268a0:	dc000017 	ldw	r16,0(sp)
   268a4:	dec00604 	addi	sp,sp,24
   268a8:	f800283a 	ret
   268ac:	0009883a 	mov	r4,zero
   268b0:	003fce06 	br	267ec <__b2d+0x78>
   268b4:	0005883a 	mov	r2,zero
   268b8:	003fe406 	br	2684c <__b2d+0xd8>

000268bc <__d2b>:
   268bc:	defff804 	addi	sp,sp,-32
   268c0:	dc400315 	stw	r17,12(sp)
   268c4:	3023883a 	mov	r17,r6
   268c8:	dc800415 	stw	r18,16(sp)
   268cc:	8824907a 	slli	r18,r17,1
   268d0:	dcc00515 	stw	r19,20(sp)
   268d4:	2827883a 	mov	r19,r5
   268d8:	9024d57a 	srli	r18,r18,21
   268dc:	01400044 	movi	r5,1
   268e0:	dd000615 	stw	r20,24(sp)
   268e4:	dc000215 	stw	r16,8(sp)
   268e8:	dfc00715 	stw	ra,28(sp)
   268ec:	3829883a 	mov	r20,r7
   268f0:	0025bc80 	call	25bc8 <_Balloc>
   268f4:	1021883a 	mov	r16,r2
   268f8:	00800434 	movhi	r2,16
   268fc:	10bfffc4 	addi	r2,r2,-1
   26900:	88a2703a 	and	r17,r17,r2
   26904:	90000126 	beq	r18,zero,2690c <__d2b+0x50>
   26908:	8c400434 	orhi	r17,r17,16
   2690c:	dc400015 	stw	r17,0(sp)
   26910:	98002226 	beq	r19,zero,2699c <__d2b+0xe0>
   26914:	d9000104 	addi	r4,sp,4
   26918:	dcc00115 	stw	r19,4(sp)
   2691c:	0025f480 	call	25f48 <__lo0bits>
   26920:	d8c00017 	ldw	r3,0(sp)
   26924:	10002d1e 	bne	r2,zero,269dc <__d2b+0x120>
   26928:	d9000117 	ldw	r4,4(sp)
   2692c:	81000515 	stw	r4,20(r16)
   26930:	1823003a 	cmpeq	r17,r3,zero
   26934:	01000084 	movi	r4,2
   26938:	2463c83a 	sub	r17,r4,r17
   2693c:	80c00615 	stw	r3,24(r16)
   26940:	84400415 	stw	r17,16(r16)
   26944:	90001d1e 	bne	r18,zero,269bc <__d2b+0x100>
   26948:	88c00104 	addi	r3,r17,4
   2694c:	18c7883a 	add	r3,r3,r3
   26950:	18c7883a 	add	r3,r3,r3
   26954:	80c7883a 	add	r3,r16,r3
   26958:	19000017 	ldw	r4,0(r3)
   2695c:	10bef384 	addi	r2,r2,-1074
   26960:	a0800015 	stw	r2,0(r20)
   26964:	0025ee00 	call	25ee0 <__hi0bits>
   26968:	8822917a 	slli	r17,r17,5
   2696c:	d8c00817 	ldw	r3,32(sp)
   26970:	8885c83a 	sub	r2,r17,r2
   26974:	18800015 	stw	r2,0(r3)
   26978:	8005883a 	mov	r2,r16
   2697c:	dfc00717 	ldw	ra,28(sp)
   26980:	dd000617 	ldw	r20,24(sp)
   26984:	dcc00517 	ldw	r19,20(sp)
   26988:	dc800417 	ldw	r18,16(sp)
   2698c:	dc400317 	ldw	r17,12(sp)
   26990:	dc000217 	ldw	r16,8(sp)
   26994:	dec00804 	addi	sp,sp,32
   26998:	f800283a 	ret
   2699c:	d809883a 	mov	r4,sp
   269a0:	0025f480 	call	25f48 <__lo0bits>
   269a4:	d8c00017 	ldw	r3,0(sp)
   269a8:	04400044 	movi	r17,1
   269ac:	84400415 	stw	r17,16(r16)
   269b0:	80c00515 	stw	r3,20(r16)
   269b4:	10800804 	addi	r2,r2,32
   269b8:	903fe326 	beq	r18,zero,26948 <__d2b+0x8c>
   269bc:	00c00d44 	movi	r3,53
   269c0:	94bef344 	addi	r18,r18,-1075
   269c4:	90a5883a 	add	r18,r18,r2
   269c8:	1885c83a 	sub	r2,r3,r2
   269cc:	d8c00817 	ldw	r3,32(sp)
   269d0:	a4800015 	stw	r18,0(r20)
   269d4:	18800015 	stw	r2,0(r3)
   269d8:	003fe706 	br	26978 <__d2b+0xbc>
   269dc:	01000804 	movi	r4,32
   269e0:	2089c83a 	sub	r4,r4,r2
   269e4:	1908983a 	sll	r4,r3,r4
   269e8:	d9400117 	ldw	r5,4(sp)
   269ec:	1886d83a 	srl	r3,r3,r2
   269f0:	2148b03a 	or	r4,r4,r5
   269f4:	81000515 	stw	r4,20(r16)
   269f8:	d8c00015 	stw	r3,0(sp)
   269fc:	003fcc06 	br	26930 <__d2b+0x74>

00026a00 <__ratio>:
   26a00:	defff904 	addi	sp,sp,-28
   26a04:	dc400315 	stw	r17,12(sp)
   26a08:	2823883a 	mov	r17,r5
   26a0c:	d9400104 	addi	r5,sp,4
   26a10:	dfc00615 	stw	ra,24(sp)
   26a14:	dcc00515 	stw	r19,20(sp)
   26a18:	dc800415 	stw	r18,16(sp)
   26a1c:	2027883a 	mov	r19,r4
   26a20:	dc000215 	stw	r16,8(sp)
   26a24:	00267740 	call	26774 <__b2d>
   26a28:	8809883a 	mov	r4,r17
   26a2c:	d80b883a 	mov	r5,sp
   26a30:	1025883a 	mov	r18,r2
   26a34:	1821883a 	mov	r16,r3
   26a38:	00267740 	call	26774 <__b2d>
   26a3c:	99400417 	ldw	r5,16(r19)
   26a40:	89000417 	ldw	r4,16(r17)
   26a44:	d9800117 	ldw	r6,4(sp)
   26a48:	2909c83a 	sub	r4,r5,r4
   26a4c:	d9400017 	ldw	r5,0(sp)
   26a50:	2008917a 	slli	r4,r4,5
   26a54:	314bc83a 	sub	r5,r6,r5
   26a58:	290b883a 	add	r5,r5,r4
   26a5c:	01400e0e 	bge	zero,r5,26a98 <__ratio+0x98>
   26a60:	280a953a 	slli	r5,r5,20
   26a64:	2c21883a 	add	r16,r5,r16
   26a68:	9009883a 	mov	r4,r18
   26a6c:	800b883a 	mov	r5,r16
   26a70:	100d883a 	mov	r6,r2
   26a74:	180f883a 	mov	r7,r3
   26a78:	0028cb40 	call	28cb4 <__divdf3>
   26a7c:	dfc00617 	ldw	ra,24(sp)
   26a80:	dcc00517 	ldw	r19,20(sp)
   26a84:	dc800417 	ldw	r18,16(sp)
   26a88:	dc400317 	ldw	r17,12(sp)
   26a8c:	dc000217 	ldw	r16,8(sp)
   26a90:	dec00704 	addi	sp,sp,28
   26a94:	f800283a 	ret
   26a98:	280a953a 	slli	r5,r5,20
   26a9c:	1947c83a 	sub	r3,r3,r5
   26aa0:	003ff106 	br	26a68 <__ratio+0x68>

00026aa4 <_mprec_log10>:
   26aa4:	defffe04 	addi	sp,sp,-8
   26aa8:	dc000015 	stw	r16,0(sp)
   26aac:	dfc00115 	stw	ra,4(sp)
   26ab0:	008005c4 	movi	r2,23
   26ab4:	2021883a 	mov	r16,r4
   26ab8:	11000d0e 	bge	r2,r4,26af0 <_mprec_log10+0x4c>
   26abc:	0005883a 	mov	r2,zero
   26ac0:	00cffc34 	movhi	r3,16368
   26ac4:	843fffc4 	addi	r16,r16,-1
   26ac8:	1009883a 	mov	r4,r2
   26acc:	180b883a 	mov	r5,r3
   26ad0:	000d883a 	mov	r6,zero
   26ad4:	01d00934 	movhi	r7,16420
   26ad8:	00289d00 	call	289d0 <__muldf3>
   26adc:	803ff91e 	bne	r16,zero,26ac4 <_mprec_log10+0x20>
   26ae0:	dfc00117 	ldw	ra,4(sp)
   26ae4:	dc000017 	ldw	r16,0(sp)
   26ae8:	dec00204 	addi	sp,sp,8
   26aec:	f800283a 	ret
   26af0:	202090fa 	slli	r16,r4,3
   26af4:	008000f4 	movhi	r2,3
   26af8:	10b22704 	addi	r2,r2,-14180
   26afc:	1421883a 	add	r16,r2,r16
   26b00:	80800017 	ldw	r2,0(r16)
   26b04:	80c00117 	ldw	r3,4(r16)
   26b08:	dfc00117 	ldw	ra,4(sp)
   26b0c:	dc000017 	ldw	r16,0(sp)
   26b10:	dec00204 	addi	sp,sp,8
   26b14:	f800283a 	ret

00026b18 <__copybits>:
   26b18:	297fffc4 	addi	r5,r5,-1
   26b1c:	31c00417 	ldw	r7,16(r6)
   26b20:	2811d17a 	srai	r8,r5,5
   26b24:	30800504 	addi	r2,r6,20
   26b28:	39c00144 	addi	r7,r7,5
   26b2c:	42000044 	addi	r8,r8,1
   26b30:	39cf883a 	add	r7,r7,r7
   26b34:	4211883a 	add	r8,r8,r8
   26b38:	39cf883a 	add	r7,r7,r7
   26b3c:	4211883a 	add	r8,r8,r8
   26b40:	31cf883a 	add	r7,r6,r7
   26b44:	2211883a 	add	r8,r4,r8
   26b48:	11c00d2e 	bgeu	r2,r7,26b80 <__copybits+0x68>
   26b4c:	2007883a 	mov	r3,r4
   26b50:	11400017 	ldw	r5,0(r2)
   26b54:	18c00104 	addi	r3,r3,4
   26b58:	10800104 	addi	r2,r2,4
   26b5c:	197fff15 	stw	r5,-4(r3)
   26b60:	11fffb36 	bltu	r2,r7,26b50 <__copybits+0x38>
   26b64:	3985c83a 	sub	r2,r7,r6
   26b68:	10bffac4 	addi	r2,r2,-21
   26b6c:	1004d0ba 	srli	r2,r2,2
   26b70:	10800044 	addi	r2,r2,1
   26b74:	1085883a 	add	r2,r2,r2
   26b78:	1085883a 	add	r2,r2,r2
   26b7c:	2089883a 	add	r4,r4,r2
   26b80:	2200032e 	bgeu	r4,r8,26b90 <__copybits+0x78>
   26b84:	20000015 	stw	zero,0(r4)
   26b88:	21000104 	addi	r4,r4,4
   26b8c:	223ffd36 	bltu	r4,r8,26b84 <__copybits+0x6c>
   26b90:	f800283a 	ret

00026b94 <__any_on>:
   26b94:	21800417 	ldw	r6,16(r4)
   26b98:	2805d17a 	srai	r2,r5,5
   26b9c:	20c00504 	addi	r3,r4,20
   26ba0:	30800f0e 	bge	r6,r2,26be0 <__any_on+0x4c>
   26ba4:	3005883a 	mov	r2,r6
   26ba8:	10800144 	addi	r2,r2,5
   26bac:	1085883a 	add	r2,r2,r2
   26bb0:	1085883a 	add	r2,r2,r2
   26bb4:	2089883a 	add	r4,r4,r2
   26bb8:	1900152e 	bgeu	r3,r4,26c10 <__any_on+0x7c>
   26bbc:	20bfff17 	ldw	r2,-4(r4)
   26bc0:	213fff04 	addi	r4,r4,-4
   26bc4:	1000041e 	bne	r2,zero,26bd8 <__any_on+0x44>
   26bc8:	1900112e 	bgeu	r3,r4,26c10 <__any_on+0x7c>
   26bcc:	213fff04 	addi	r4,r4,-4
   26bd0:	20800017 	ldw	r2,0(r4)
   26bd4:	103ffc26 	beq	r2,zero,26bc8 <__any_on+0x34>
   26bd8:	00800044 	movi	r2,1
   26bdc:	f800283a 	ret
   26be0:	11bff10e 	bge	r2,r6,26ba8 <__any_on+0x14>
   26be4:	294007cc 	andi	r5,r5,31
   26be8:	283fef26 	beq	r5,zero,26ba8 <__any_on+0x14>
   26bec:	11800144 	addi	r6,r2,5
   26bf0:	318d883a 	add	r6,r6,r6
   26bf4:	318d883a 	add	r6,r6,r6
   26bf8:	218d883a 	add	r6,r4,r6
   26bfc:	31800017 	ldw	r6,0(r6)
   26c00:	314ed83a 	srl	r7,r6,r5
   26c04:	394a983a 	sll	r5,r7,r5
   26c08:	29bff31e 	bne	r5,r6,26bd8 <__any_on+0x44>
   26c0c:	003fe606 	br	26ba8 <__any_on+0x14>
   26c10:	0005883a 	mov	r2,zero
   26c14:	f800283a 	ret

00026c18 <_realloc_r>:
   26c18:	defff504 	addi	sp,sp,-44
   26c1c:	dd400615 	stw	r21,24(sp)
   26c20:	dc800315 	stw	r18,12(sp)
   26c24:	dc000115 	stw	r16,4(sp)
   26c28:	dfc00a15 	stw	ra,40(sp)
   26c2c:	df000915 	stw	fp,36(sp)
   26c30:	ddc00815 	stw	r23,32(sp)
   26c34:	dd800715 	stw	r22,28(sp)
   26c38:	dd000515 	stw	r20,20(sp)
   26c3c:	dcc00415 	stw	r19,16(sp)
   26c40:	dc400215 	stw	r17,8(sp)
   26c44:	2821883a 	mov	r16,r5
   26c48:	202b883a 	mov	r21,r4
   26c4c:	3025883a 	mov	r18,r6
   26c50:	28009626 	beq	r5,zero,26eac <_realloc_r+0x294>
   26c54:	002a0600 	call	2a060 <__malloc_lock>
   26c58:	80bfff17 	ldw	r2,-4(r16)
   26c5c:	04ffff04 	movi	r19,-4
   26c60:	90c002c4 	addi	r3,r18,11
   26c64:	01000584 	movi	r4,22
   26c68:	85bffe04 	addi	r22,r16,-8
   26c6c:	14e6703a 	and	r19,r2,r19
   26c70:	20c0372e 	bgeu	r4,r3,26d50 <_realloc_r+0x138>
   26c74:	047ffe04 	movi	r17,-8
   26c78:	1c62703a 	and	r17,r3,r17
   26c7c:	8807883a 	mov	r3,r17
   26c80:	88005a16 	blt	r17,zero,26dec <_realloc_r+0x1d4>
   26c84:	8c805936 	bltu	r17,r18,26dec <_realloc_r+0x1d4>
   26c88:	98c0340e 	bge	r19,r3,26d5c <_realloc_r+0x144>
   26c8c:	070000f4 	movhi	fp,3
   26c90:	e733b104 	addi	fp,fp,-12604
   26c94:	e1400217 	ldw	r5,8(fp)
   26c98:	b4c9883a 	add	r4,r22,r19
   26c9c:	29009026 	beq	r5,r4,26ee0 <_realloc_r+0x2c8>
   26ca0:	21800117 	ldw	r6,4(r4)
   26ca4:	01ffff84 	movi	r7,-2
   26ca8:	31ce703a 	and	r7,r6,r7
   26cac:	21cf883a 	add	r7,r4,r7
   26cb0:	39c00117 	ldw	r7,4(r7)
   26cb4:	39c0004c 	andi	r7,r7,1
   26cb8:	38004326 	beq	r7,zero,26dc8 <_realloc_r+0x1b0>
   26cbc:	000d883a 	mov	r6,zero
   26cc0:	0009883a 	mov	r4,zero
   26cc4:	1080004c 	andi	r2,r2,1
   26cc8:	10005a1e 	bne	r2,zero,26e34 <_realloc_r+0x21c>
   26ccc:	85fffe17 	ldw	r23,-8(r16)
   26cd0:	00bfff04 	movi	r2,-4
   26cd4:	b5efc83a 	sub	r23,r22,r23
   26cd8:	b9c00117 	ldw	r7,4(r23)
   26cdc:	388e703a 	and	r7,r7,r2
   26ce0:	3ccf883a 	add	r7,r7,r19
   26ce4:	20005226 	beq	r4,zero,26e30 <_realloc_r+0x218>
   26ce8:	31e9883a 	add	r20,r6,r7
   26cec:	2140c726 	beq	r4,r5,2700c <_realloc_r+0x3f4>
   26cf0:	a0c04f16 	blt	r20,r3,26e30 <_realloc_r+0x218>
   26cf4:	20800317 	ldw	r2,12(r4)
   26cf8:	20c00217 	ldw	r3,8(r4)
   26cfc:	99bfff04 	addi	r6,r19,-4
   26d00:	01000904 	movi	r4,36
   26d04:	18800315 	stw	r2,12(r3)
   26d08:	10c00215 	stw	r3,8(r2)
   26d0c:	b8c00217 	ldw	r3,8(r23)
   26d10:	b8800317 	ldw	r2,12(r23)
   26d14:	bc800204 	addi	r18,r23,8
   26d18:	18800315 	stw	r2,12(r3)
   26d1c:	10c00215 	stw	r3,8(r2)
   26d20:	2180ed36 	bltu	r4,r6,270d8 <_realloc_r+0x4c0>
   26d24:	008004c4 	movi	r2,19
   26d28:	11809b2e 	bgeu	r2,r6,26f98 <_realloc_r+0x380>
   26d2c:	80800017 	ldw	r2,0(r16)
   26d30:	b8800215 	stw	r2,8(r23)
   26d34:	80800117 	ldw	r2,4(r16)
   26d38:	b8800315 	stw	r2,12(r23)
   26d3c:	008006c4 	movi	r2,27
   26d40:	1180f936 	bltu	r2,r6,27128 <_realloc_r+0x510>
   26d44:	b8800404 	addi	r2,r23,16
   26d48:	80c00204 	addi	r3,r16,8
   26d4c:	00009406 	br	26fa0 <_realloc_r+0x388>
   26d50:	00c00404 	movi	r3,16
   26d54:	1823883a 	mov	r17,r3
   26d58:	003fca06 	br	26c84 <_realloc_r+0x6c>
   26d5c:	9829883a 	mov	r20,r19
   26d60:	a447c83a 	sub	r3,r20,r17
   26d64:	010003c4 	movi	r4,15
   26d68:	1080004c 	andi	r2,r2,1
   26d6c:	20c02336 	bltu	r4,r3,26dfc <_realloc_r+0x1e4>
   26d70:	1504b03a 	or	r2,r2,r20
   26d74:	b0800115 	stw	r2,4(r22)
   26d78:	b52d883a 	add	r22,r22,r20
   26d7c:	b0800117 	ldw	r2,4(r22)
   26d80:	10800054 	ori	r2,r2,1
   26d84:	b0800115 	stw	r2,4(r22)
   26d88:	a809883a 	mov	r4,r21
   26d8c:	002a0800 	call	2a080 <__malloc_unlock>
   26d90:	8025883a 	mov	r18,r16
   26d94:	9005883a 	mov	r2,r18
   26d98:	dfc00a17 	ldw	ra,40(sp)
   26d9c:	df000917 	ldw	fp,36(sp)
   26da0:	ddc00817 	ldw	r23,32(sp)
   26da4:	dd800717 	ldw	r22,28(sp)
   26da8:	dd400617 	ldw	r21,24(sp)
   26dac:	dd000517 	ldw	r20,20(sp)
   26db0:	dcc00417 	ldw	r19,16(sp)
   26db4:	dc800317 	ldw	r18,12(sp)
   26db8:	dc400217 	ldw	r17,8(sp)
   26dbc:	dc000117 	ldw	r16,4(sp)
   26dc0:	dec00b04 	addi	sp,sp,44
   26dc4:	f800283a 	ret
   26dc8:	01ffff04 	movi	r7,-4
   26dcc:	31cc703a 	and	r6,r6,r7
   26dd0:	34e9883a 	add	r20,r6,r19
   26dd4:	a0ffbb16 	blt	r20,r3,26cc4 <_realloc_r+0xac>
   26dd8:	20c00317 	ldw	r3,12(r4)
   26ddc:	21000217 	ldw	r4,8(r4)
   26de0:	20c00315 	stw	r3,12(r4)
   26de4:	19000215 	stw	r4,8(r3)
   26de8:	003fdd06 	br	26d60 <_realloc_r+0x148>
   26dec:	00800304 	movi	r2,12
   26df0:	a8800015 	stw	r2,0(r21)
   26df4:	0025883a 	mov	r18,zero
   26df8:	003fe606 	br	26d94 <_realloc_r+0x17c>
   26dfc:	1444b03a 	or	r2,r2,r17
   26e00:	b0800115 	stw	r2,4(r22)
   26e04:	b44b883a 	add	r5,r22,r17
   26e08:	18800054 	ori	r2,r3,1
   26e0c:	28800115 	stw	r2,4(r5)
   26e10:	28c7883a 	add	r3,r5,r3
   26e14:	18800117 	ldw	r2,4(r3)
   26e18:	a809883a 	mov	r4,r21
   26e1c:	29400204 	addi	r5,r5,8
   26e20:	10800054 	ori	r2,r2,1
   26e24:	18800115 	stw	r2,4(r3)
   26e28:	002440c0 	call	2440c <_free_r>
   26e2c:	003fd606 	br	26d88 <_realloc_r+0x170>
   26e30:	38c0330e 	bge	r7,r3,26f00 <_realloc_r+0x2e8>
   26e34:	900b883a 	mov	r5,r18
   26e38:	a809883a 	mov	r4,r21
   26e3c:	0024fa40 	call	24fa4 <_malloc_r>
   26e40:	1025883a 	mov	r18,r2
   26e44:	10001626 	beq	r2,zero,26ea0 <_realloc_r+0x288>
   26e48:	80bfff17 	ldw	r2,-4(r16)
   26e4c:	00ffff84 	movi	r3,-2
   26e50:	913ffe04 	addi	r4,r18,-8
   26e54:	10c6703a 	and	r3,r2,r3
   26e58:	b0c7883a 	add	r3,r22,r3
   26e5c:	20c09926 	beq	r4,r3,270c4 <_realloc_r+0x4ac>
   26e60:	99bfff04 	addi	r6,r19,-4
   26e64:	00800904 	movi	r2,36
   26e68:	11806436 	bltu	r2,r6,26ffc <_realloc_r+0x3e4>
   26e6c:	00c004c4 	movi	r3,19
   26e70:	19804036 	bltu	r3,r6,26f74 <_realloc_r+0x35c>
   26e74:	9005883a 	mov	r2,r18
   26e78:	8007883a 	mov	r3,r16
   26e7c:	19000017 	ldw	r4,0(r3)
   26e80:	11000015 	stw	r4,0(r2)
   26e84:	19000117 	ldw	r4,4(r3)
   26e88:	11000115 	stw	r4,4(r2)
   26e8c:	18c00217 	ldw	r3,8(r3)
   26e90:	10c00215 	stw	r3,8(r2)
   26e94:	a809883a 	mov	r4,r21
   26e98:	800b883a 	mov	r5,r16
   26e9c:	002440c0 	call	2440c <_free_r>
   26ea0:	a809883a 	mov	r4,r21
   26ea4:	002a0800 	call	2a080 <__malloc_unlock>
   26ea8:	003fba06 	br	26d94 <_realloc_r+0x17c>
   26eac:	300b883a 	mov	r5,r6
   26eb0:	dfc00a17 	ldw	ra,40(sp)
   26eb4:	df000917 	ldw	fp,36(sp)
   26eb8:	ddc00817 	ldw	r23,32(sp)
   26ebc:	dd800717 	ldw	r22,28(sp)
   26ec0:	dd400617 	ldw	r21,24(sp)
   26ec4:	dd000517 	ldw	r20,20(sp)
   26ec8:	dcc00417 	ldw	r19,16(sp)
   26ecc:	dc800317 	ldw	r18,12(sp)
   26ed0:	dc400217 	ldw	r17,8(sp)
   26ed4:	dc000117 	ldw	r16,4(sp)
   26ed8:	dec00b04 	addi	sp,sp,44
   26edc:	0024fa41 	jmpi	24fa4 <_malloc_r>
   26ee0:	29800117 	ldw	r6,4(r5)
   26ee4:	013fff04 	movi	r4,-4
   26ee8:	89c00404 	addi	r7,r17,16
   26eec:	310c703a 	and	r6,r6,r4
   26ef0:	34c9883a 	add	r4,r6,r19
   26ef4:	21c0340e 	bge	r4,r7,26fc8 <_realloc_r+0x3b0>
   26ef8:	2809883a 	mov	r4,r5
   26efc:	003f7106 	br	26cc4 <_realloc_r+0xac>
   26f00:	b8800317 	ldw	r2,12(r23)
   26f04:	b8c00217 	ldw	r3,8(r23)
   26f08:	99bfff04 	addi	r6,r19,-4
   26f0c:	01000904 	movi	r4,36
   26f10:	18800315 	stw	r2,12(r3)
   26f14:	10c00215 	stw	r3,8(r2)
   26f18:	bc800204 	addi	r18,r23,8
   26f1c:	21807836 	bltu	r4,r6,27100 <_realloc_r+0x4e8>
   26f20:	008004c4 	movi	r2,19
   26f24:	1180732e 	bgeu	r2,r6,270f4 <_realloc_r+0x4dc>
   26f28:	80800017 	ldw	r2,0(r16)
   26f2c:	b8800215 	stw	r2,8(r23)
   26f30:	80800117 	ldw	r2,4(r16)
   26f34:	b8800315 	stw	r2,12(r23)
   26f38:	008006c4 	movi	r2,27
   26f3c:	11808936 	bltu	r2,r6,27164 <_realloc_r+0x54c>
   26f40:	b8800404 	addi	r2,r23,16
   26f44:	80c00204 	addi	r3,r16,8
   26f48:	19000017 	ldw	r4,0(r3)
   26f4c:	9021883a 	mov	r16,r18
   26f50:	3829883a 	mov	r20,r7
   26f54:	11000015 	stw	r4,0(r2)
   26f58:	19000117 	ldw	r4,4(r3)
   26f5c:	b82d883a 	mov	r22,r23
   26f60:	11000115 	stw	r4,4(r2)
   26f64:	18c00217 	ldw	r3,8(r3)
   26f68:	10c00215 	stw	r3,8(r2)
   26f6c:	b8800117 	ldw	r2,4(r23)
   26f70:	003f7b06 	br	26d60 <_realloc_r+0x148>
   26f74:	80c00017 	ldw	r3,0(r16)
   26f78:	90c00015 	stw	r3,0(r18)
   26f7c:	80c00117 	ldw	r3,4(r16)
   26f80:	90c00115 	stw	r3,4(r18)
   26f84:	00c006c4 	movi	r3,27
   26f88:	19804636 	bltu	r3,r6,270a4 <_realloc_r+0x48c>
   26f8c:	90800204 	addi	r2,r18,8
   26f90:	80c00204 	addi	r3,r16,8
   26f94:	003fb906 	br	26e7c <_realloc_r+0x264>
   26f98:	9005883a 	mov	r2,r18
   26f9c:	8007883a 	mov	r3,r16
   26fa0:	19000017 	ldw	r4,0(r3)
   26fa4:	9021883a 	mov	r16,r18
   26fa8:	b82d883a 	mov	r22,r23
   26fac:	11000015 	stw	r4,0(r2)
   26fb0:	19000117 	ldw	r4,4(r3)
   26fb4:	11000115 	stw	r4,4(r2)
   26fb8:	18c00217 	ldw	r3,8(r3)
   26fbc:	10c00215 	stw	r3,8(r2)
   26fc0:	b8800117 	ldw	r2,4(r23)
   26fc4:	003f6606 	br	26d60 <_realloc_r+0x148>
   26fc8:	2445c83a 	sub	r2,r4,r17
   26fcc:	b46d883a 	add	r22,r22,r17
   26fd0:	10800054 	ori	r2,r2,1
   26fd4:	b0800115 	stw	r2,4(r22)
   26fd8:	80bfff17 	ldw	r2,-4(r16)
   26fdc:	a809883a 	mov	r4,r21
   26fe0:	e5800215 	stw	r22,8(fp)
   26fe4:	1080004c 	andi	r2,r2,1
   26fe8:	88a2b03a 	or	r17,r17,r2
   26fec:	847fff15 	stw	r17,-4(r16)
   26ff0:	002a0800 	call	2a080 <__malloc_unlock>
   26ff4:	8025883a 	mov	r18,r16
   26ff8:	003f6606 	br	26d94 <_realloc_r+0x17c>
   26ffc:	9009883a 	mov	r4,r18
   27000:	800b883a 	mov	r5,r16
   27004:	00259600 	call	25960 <memmove>
   27008:	003fa206 	br	26e94 <_realloc_r+0x27c>
   2700c:	88800404 	addi	r2,r17,16
   27010:	a0bf8716 	blt	r20,r2,26e30 <_realloc_r+0x218>
   27014:	b8800317 	ldw	r2,12(r23)
   27018:	b8c00217 	ldw	r3,8(r23)
   2701c:	99bfff04 	addi	r6,r19,-4
   27020:	01000904 	movi	r4,36
   27024:	18800315 	stw	r2,12(r3)
   27028:	10c00215 	stw	r3,8(r2)
   2702c:	bc800204 	addi	r18,r23,8
   27030:	21806536 	bltu	r4,r6,271c8 <_realloc_r+0x5b0>
   27034:	008004c4 	movi	r2,19
   27038:	1180592e 	bgeu	r2,r6,271a0 <_realloc_r+0x588>
   2703c:	80800017 	ldw	r2,0(r16)
   27040:	b8800215 	stw	r2,8(r23)
   27044:	80800117 	ldw	r2,4(r16)
   27048:	b8800315 	stw	r2,12(r23)
   2704c:	008006c4 	movi	r2,27
   27050:	11806136 	bltu	r2,r6,271d8 <_realloc_r+0x5c0>
   27054:	b8800404 	addi	r2,r23,16
   27058:	80c00204 	addi	r3,r16,8
   2705c:	19000017 	ldw	r4,0(r3)
   27060:	11000015 	stw	r4,0(r2)
   27064:	19000117 	ldw	r4,4(r3)
   27068:	11000115 	stw	r4,4(r2)
   2706c:	18c00217 	ldw	r3,8(r3)
   27070:	10c00215 	stw	r3,8(r2)
   27074:	a447c83a 	sub	r3,r20,r17
   27078:	bc45883a 	add	r2,r23,r17
   2707c:	18c00054 	ori	r3,r3,1
   27080:	10c00115 	stw	r3,4(r2)
   27084:	b8c00117 	ldw	r3,4(r23)
   27088:	e0800215 	stw	r2,8(fp)
   2708c:	a809883a 	mov	r4,r21
   27090:	1880004c 	andi	r2,r3,1
   27094:	88a2b03a 	or	r17,r17,r2
   27098:	bc400115 	stw	r17,4(r23)
   2709c:	002a0800 	call	2a080 <__malloc_unlock>
   270a0:	003f3c06 	br	26d94 <_realloc_r+0x17c>
   270a4:	80c00217 	ldw	r3,8(r16)
   270a8:	90c00215 	stw	r3,8(r18)
   270ac:	80c00317 	ldw	r3,12(r16)
   270b0:	90c00315 	stw	r3,12(r18)
   270b4:	30802426 	beq	r6,r2,27148 <_realloc_r+0x530>
   270b8:	90800404 	addi	r2,r18,16
   270bc:	80c00404 	addi	r3,r16,16
   270c0:	003f6e06 	br	26e7c <_realloc_r+0x264>
   270c4:	953fff17 	ldw	r20,-4(r18)
   270c8:	00ffff04 	movi	r3,-4
   270cc:	a0e8703a 	and	r20,r20,r3
   270d0:	a4e9883a 	add	r20,r20,r19
   270d4:	003f2206 	br	26d60 <_realloc_r+0x148>
   270d8:	800b883a 	mov	r5,r16
   270dc:	9009883a 	mov	r4,r18
   270e0:	00259600 	call	25960 <memmove>
   270e4:	9021883a 	mov	r16,r18
   270e8:	b8800117 	ldw	r2,4(r23)
   270ec:	b82d883a 	mov	r22,r23
   270f0:	003f1b06 	br	26d60 <_realloc_r+0x148>
   270f4:	9005883a 	mov	r2,r18
   270f8:	8007883a 	mov	r3,r16
   270fc:	003f9206 	br	26f48 <_realloc_r+0x330>
   27100:	800b883a 	mov	r5,r16
   27104:	9009883a 	mov	r4,r18
   27108:	d9c00015 	stw	r7,0(sp)
   2710c:	00259600 	call	25960 <memmove>
   27110:	d9c00017 	ldw	r7,0(sp)
   27114:	9021883a 	mov	r16,r18
   27118:	b8800117 	ldw	r2,4(r23)
   2711c:	3829883a 	mov	r20,r7
   27120:	b82d883a 	mov	r22,r23
   27124:	003f0e06 	br	26d60 <_realloc_r+0x148>
   27128:	80800217 	ldw	r2,8(r16)
   2712c:	b8800415 	stw	r2,16(r23)
   27130:	80800317 	ldw	r2,12(r16)
   27134:	b8800515 	stw	r2,20(r23)
   27138:	31001226 	beq	r6,r4,27184 <_realloc_r+0x56c>
   2713c:	b8800604 	addi	r2,r23,24
   27140:	80c00404 	addi	r3,r16,16
   27144:	003f9606 	br	26fa0 <_realloc_r+0x388>
   27148:	81000417 	ldw	r4,16(r16)
   2714c:	90800604 	addi	r2,r18,24
   27150:	80c00604 	addi	r3,r16,24
   27154:	91000415 	stw	r4,16(r18)
   27158:	81000517 	ldw	r4,20(r16)
   2715c:	91000515 	stw	r4,20(r18)
   27160:	003f4606 	br	26e7c <_realloc_r+0x264>
   27164:	80800217 	ldw	r2,8(r16)
   27168:	b8800415 	stw	r2,16(r23)
   2716c:	80800317 	ldw	r2,12(r16)
   27170:	b8800515 	stw	r2,20(r23)
   27174:	31000d26 	beq	r6,r4,271ac <_realloc_r+0x594>
   27178:	b8800604 	addi	r2,r23,24
   2717c:	80c00404 	addi	r3,r16,16
   27180:	003f7106 	br	26f48 <_realloc_r+0x330>
   27184:	81000417 	ldw	r4,16(r16)
   27188:	b8800804 	addi	r2,r23,32
   2718c:	80c00604 	addi	r3,r16,24
   27190:	b9000615 	stw	r4,24(r23)
   27194:	81000517 	ldw	r4,20(r16)
   27198:	b9000715 	stw	r4,28(r23)
   2719c:	003f8006 	br	26fa0 <_realloc_r+0x388>
   271a0:	9005883a 	mov	r2,r18
   271a4:	8007883a 	mov	r3,r16
   271a8:	003fac06 	br	2705c <_realloc_r+0x444>
   271ac:	81000417 	ldw	r4,16(r16)
   271b0:	b8800804 	addi	r2,r23,32
   271b4:	80c00604 	addi	r3,r16,24
   271b8:	b9000615 	stw	r4,24(r23)
   271bc:	81000517 	ldw	r4,20(r16)
   271c0:	b9000715 	stw	r4,28(r23)
   271c4:	003f6006 	br	26f48 <_realloc_r+0x330>
   271c8:	9009883a 	mov	r4,r18
   271cc:	800b883a 	mov	r5,r16
   271d0:	00259600 	call	25960 <memmove>
   271d4:	003fa706 	br	27074 <_realloc_r+0x45c>
   271d8:	80800217 	ldw	r2,8(r16)
   271dc:	b8800415 	stw	r2,16(r23)
   271e0:	80800317 	ldw	r2,12(r16)
   271e4:	b8800515 	stw	r2,20(r23)
   271e8:	31000326 	beq	r6,r4,271f8 <_realloc_r+0x5e0>
   271ec:	b8800604 	addi	r2,r23,24
   271f0:	80c00404 	addi	r3,r16,16
   271f4:	003f9906 	br	2705c <_realloc_r+0x444>
   271f8:	81000417 	ldw	r4,16(r16)
   271fc:	b8800804 	addi	r2,r23,32
   27200:	80c00604 	addi	r3,r16,24
   27204:	b9000615 	stw	r4,24(r23)
   27208:	81000517 	ldw	r4,20(r16)
   2720c:	b9000715 	stw	r4,28(r23)
   27210:	003f9206 	br	2705c <_realloc_r+0x444>

00027214 <__isinfd>:
   27214:	0105c83a 	sub	r2,zero,r4
   27218:	1108b03a 	or	r4,r2,r4
   2721c:	2004d7fa 	srli	r2,r4,31
   27220:	00e00034 	movhi	r3,32768
   27224:	18ffffc4 	addi	r3,r3,-1
   27228:	28ca703a 	and	r5,r5,r3
   2722c:	1144b03a 	or	r2,r2,r5
   27230:	00dffc34 	movhi	r3,32752
   27234:	1885c83a 	sub	r2,r3,r2
   27238:	0087c83a 	sub	r3,zero,r2
   2723c:	1884b03a 	or	r2,r3,r2
   27240:	1005d7fa 	srai	r2,r2,31
   27244:	10800044 	addi	r2,r2,1
   27248:	f800283a 	ret

0002724c <__isnand>:
   2724c:	0105c83a 	sub	r2,zero,r4
   27250:	1108b03a 	or	r4,r2,r4
   27254:	2004d7fa 	srli	r2,r4,31
   27258:	00e00034 	movhi	r3,32768
   2725c:	18ffffc4 	addi	r3,r3,-1
   27260:	28ca703a 	and	r5,r5,r3
   27264:	1144b03a 	or	r2,r2,r5
   27268:	00dffc34 	movhi	r3,32752
   2726c:	1885c83a 	sub	r2,r3,r2
   27270:	1004d7fa 	srli	r2,r2,31
   27274:	f800283a 	ret

00027278 <_sbrk_r>:
   27278:	defffd04 	addi	sp,sp,-12
   2727c:	dc400115 	stw	r17,4(sp)
   27280:	dc000015 	stw	r16,0(sp)
   27284:	2023883a 	mov	r17,r4
   27288:	040000f4 	movhi	r16,3
   2728c:	843fe004 	addi	r16,r16,-128
   27290:	2809883a 	mov	r4,r5
   27294:	dfc00215 	stw	ra,8(sp)
   27298:	80000015 	stw	zero,0(r16)
   2729c:	002a2640 	call	2a264 <sbrk>
   272a0:	00ffffc4 	movi	r3,-1
   272a4:	10c00526 	beq	r2,r3,272bc <_sbrk_r+0x44>
   272a8:	dfc00217 	ldw	ra,8(sp)
   272ac:	dc400117 	ldw	r17,4(sp)
   272b0:	dc000017 	ldw	r16,0(sp)
   272b4:	dec00304 	addi	sp,sp,12
   272b8:	f800283a 	ret
   272bc:	80c00017 	ldw	r3,0(r16)
   272c0:	183ff926 	beq	r3,zero,272a8 <_sbrk_r+0x30>
   272c4:	88c00015 	stw	r3,0(r17)
   272c8:	dfc00217 	ldw	ra,8(sp)
   272cc:	dc400117 	ldw	r17,4(sp)
   272d0:	dc000017 	ldw	r16,0(sp)
   272d4:	dec00304 	addi	sp,sp,12
   272d8:	f800283a 	ret

000272dc <__sread>:
   272dc:	defffe04 	addi	sp,sp,-8
   272e0:	dc000015 	stw	r16,0(sp)
   272e4:	2821883a 	mov	r16,r5
   272e8:	2940038f 	ldh	r5,14(r5)
   272ec:	dfc00115 	stw	ra,4(sp)
   272f0:	00278e40 	call	278e4 <_read_r>
   272f4:	10000716 	blt	r2,zero,27314 <__sread+0x38>
   272f8:	80c01417 	ldw	r3,80(r16)
   272fc:	1887883a 	add	r3,r3,r2
   27300:	80c01415 	stw	r3,80(r16)
   27304:	dfc00117 	ldw	ra,4(sp)
   27308:	dc000017 	ldw	r16,0(sp)
   2730c:	dec00204 	addi	sp,sp,8
   27310:	f800283a 	ret
   27314:	80c0030b 	ldhu	r3,12(r16)
   27318:	18fbffcc 	andi	r3,r3,61439
   2731c:	80c0030d 	sth	r3,12(r16)
   27320:	dfc00117 	ldw	ra,4(sp)
   27324:	dc000017 	ldw	r16,0(sp)
   27328:	dec00204 	addi	sp,sp,8
   2732c:	f800283a 	ret

00027330 <__swrite>:
   27330:	2880030b 	ldhu	r2,12(r5)
   27334:	defffb04 	addi	sp,sp,-20
   27338:	dcc00315 	stw	r19,12(sp)
   2733c:	10c0400c 	andi	r3,r2,256
   27340:	18ffffcc 	andi	r3,r3,65535
   27344:	18e0001c 	xori	r3,r3,32768
   27348:	dc800215 	stw	r18,8(sp)
   2734c:	dc400115 	stw	r17,4(sp)
   27350:	dc000015 	stw	r16,0(sp)
   27354:	dfc00415 	stw	ra,16(sp)
   27358:	18e00004 	addi	r3,r3,-32768
   2735c:	2821883a 	mov	r16,r5
   27360:	2027883a 	mov	r19,r4
   27364:	3025883a 	mov	r18,r6
   27368:	3823883a 	mov	r17,r7
   2736c:	18000526 	beq	r3,zero,27384 <__swrite+0x54>
   27370:	2940038f 	ldh	r5,14(r5)
   27374:	000d883a 	mov	r6,zero
   27378:	01c00084 	movi	r7,2
   2737c:	00278780 	call	27878 <_lseek_r>
   27380:	8080030b 	ldhu	r2,12(r16)
   27384:	8140038f 	ldh	r5,14(r16)
   27388:	10bbffcc 	andi	r2,r2,61439
   2738c:	9809883a 	mov	r4,r19
   27390:	900d883a 	mov	r6,r18
   27394:	880f883a 	mov	r7,r17
   27398:	8080030d 	sth	r2,12(r16)
   2739c:	dfc00417 	ldw	ra,16(sp)
   273a0:	dcc00317 	ldw	r19,12(sp)
   273a4:	dc800217 	ldw	r18,8(sp)
   273a8:	dc400117 	ldw	r17,4(sp)
   273ac:	dc000017 	ldw	r16,0(sp)
   273b0:	dec00504 	addi	sp,sp,20
   273b4:	00274c01 	jmpi	274c0 <_write_r>

000273b8 <__sseek>:
   273b8:	defffe04 	addi	sp,sp,-8
   273bc:	dc000015 	stw	r16,0(sp)
   273c0:	2821883a 	mov	r16,r5
   273c4:	2940038f 	ldh	r5,14(r5)
   273c8:	dfc00115 	stw	ra,4(sp)
   273cc:	00278780 	call	27878 <_lseek_r>
   273d0:	00ffffc4 	movi	r3,-1
   273d4:	10c00826 	beq	r2,r3,273f8 <__sseek+0x40>
   273d8:	80c0030b 	ldhu	r3,12(r16)
   273dc:	80801415 	stw	r2,80(r16)
   273e0:	18c40014 	ori	r3,r3,4096
   273e4:	80c0030d 	sth	r3,12(r16)
   273e8:	dfc00117 	ldw	ra,4(sp)
   273ec:	dc000017 	ldw	r16,0(sp)
   273f0:	dec00204 	addi	sp,sp,8
   273f4:	f800283a 	ret
   273f8:	80c0030b 	ldhu	r3,12(r16)
   273fc:	18fbffcc 	andi	r3,r3,61439
   27400:	80c0030d 	sth	r3,12(r16)
   27404:	dfc00117 	ldw	ra,4(sp)
   27408:	dc000017 	ldw	r16,0(sp)
   2740c:	dec00204 	addi	sp,sp,8
   27410:	f800283a 	ret

00027414 <__sclose>:
   27414:	2940038f 	ldh	r5,14(r5)
   27418:	00275f81 	jmpi	275f8 <_close_r>

0002741c <strcmp>:
   2741c:	2904b03a 	or	r2,r5,r4
   27420:	108000cc 	andi	r2,r2,3
   27424:	1000171e 	bne	r2,zero,27484 <strcmp+0x68>
   27428:	20800017 	ldw	r2,0(r4)
   2742c:	28c00017 	ldw	r3,0(r5)
   27430:	10c0141e 	bne	r2,r3,27484 <strcmp+0x68>
   27434:	027fbff4 	movhi	r9,65279
   27438:	4a7fbfc4 	addi	r9,r9,-257
   2743c:	1247883a 	add	r3,r2,r9
   27440:	0084303a 	nor	r2,zero,r2
   27444:	1884703a 	and	r2,r3,r2
   27448:	02202074 	movhi	r8,32897
   2744c:	42202004 	addi	r8,r8,-32640
   27450:	1204703a 	and	r2,r2,r8
   27454:	10000226 	beq	r2,zero,27460 <strcmp+0x44>
   27458:	00001706 	br	274b8 <strcmp+0x9c>
   2745c:	3000161e 	bne	r6,zero,274b8 <strcmp+0x9c>
   27460:	21000104 	addi	r4,r4,4
   27464:	20800017 	ldw	r2,0(r4)
   27468:	29400104 	addi	r5,r5,4
   2746c:	28c00017 	ldw	r3,0(r5)
   27470:	124f883a 	add	r7,r2,r9
   27474:	008c303a 	nor	r6,zero,r2
   27478:	398c703a 	and	r6,r7,r6
   2747c:	320c703a 	and	r6,r6,r8
   27480:	10fff626 	beq	r2,r3,2745c <strcmp+0x40>
   27484:	20800007 	ldb	r2,0(r4)
   27488:	1000051e 	bne	r2,zero,274a0 <strcmp+0x84>
   2748c:	00000606 	br	274a8 <strcmp+0x8c>
   27490:	21000044 	addi	r4,r4,1
   27494:	20800007 	ldb	r2,0(r4)
   27498:	29400044 	addi	r5,r5,1
   2749c:	10000226 	beq	r2,zero,274a8 <strcmp+0x8c>
   274a0:	28c00007 	ldb	r3,0(r5)
   274a4:	10fffa26 	beq	r2,r3,27490 <strcmp+0x74>
   274a8:	20c00003 	ldbu	r3,0(r4)
   274ac:	28800003 	ldbu	r2,0(r5)
   274b0:	1885c83a 	sub	r2,r3,r2
   274b4:	f800283a 	ret
   274b8:	0005883a 	mov	r2,zero
   274bc:	f800283a 	ret

000274c0 <_write_r>:
   274c0:	defffd04 	addi	sp,sp,-12
   274c4:	dc400115 	stw	r17,4(sp)
   274c8:	dc000015 	stw	r16,0(sp)
   274cc:	2023883a 	mov	r17,r4
   274d0:	040000f4 	movhi	r16,3
   274d4:	843fe004 	addi	r16,r16,-128
   274d8:	2809883a 	mov	r4,r5
   274dc:	300b883a 	mov	r5,r6
   274e0:	380d883a 	mov	r6,r7
   274e4:	dfc00215 	stw	ra,8(sp)
   274e8:	80000015 	stw	zero,0(r16)
   274ec:	002a3640 	call	2a364 <write>
   274f0:	00ffffc4 	movi	r3,-1
   274f4:	10c00526 	beq	r2,r3,2750c <_write_r+0x4c>
   274f8:	dfc00217 	ldw	ra,8(sp)
   274fc:	dc400117 	ldw	r17,4(sp)
   27500:	dc000017 	ldw	r16,0(sp)
   27504:	dec00304 	addi	sp,sp,12
   27508:	f800283a 	ret
   2750c:	80c00017 	ldw	r3,0(r16)
   27510:	183ff926 	beq	r3,zero,274f8 <_write_r+0x38>
   27514:	88c00015 	stw	r3,0(r17)
   27518:	dfc00217 	ldw	ra,8(sp)
   2751c:	dc400117 	ldw	r17,4(sp)
   27520:	dc000017 	ldw	r16,0(sp)
   27524:	dec00304 	addi	sp,sp,12
   27528:	f800283a 	ret

0002752c <_calloc_r>:
   2752c:	defffe04 	addi	sp,sp,-8
   27530:	dc000015 	stw	r16,0(sp)
   27534:	2021883a 	mov	r16,r4
   27538:	3009883a 	mov	r4,r6
   2753c:	dfc00115 	stw	ra,4(sp)
   27540:	00294380 	call	29438 <__mulsi3>
   27544:	8009883a 	mov	r4,r16
   27548:	100b883a 	mov	r5,r2
   2754c:	0024fa40 	call	24fa4 <_malloc_r>
   27550:	1021883a 	mov	r16,r2
   27554:	10000c26 	beq	r2,zero,27588 <_calloc_r+0x5c>
   27558:	11bfff17 	ldw	r6,-4(r2)
   2755c:	00ffff04 	movi	r3,-4
   27560:	00800904 	movi	r2,36
   27564:	30cc703a 	and	r6,r6,r3
   27568:	30cd883a 	add	r6,r6,r3
   2756c:	11801436 	bltu	r2,r6,275c0 <_calloc_r+0x94>
   27570:	00c004c4 	movi	r3,19
   27574:	19800936 	bltu	r3,r6,2759c <_calloc_r+0x70>
   27578:	8005883a 	mov	r2,r16
   2757c:	10000015 	stw	zero,0(r2)
   27580:	10000115 	stw	zero,4(r2)
   27584:	10000215 	stw	zero,8(r2)
   27588:	8005883a 	mov	r2,r16
   2758c:	dfc00117 	ldw	ra,4(sp)
   27590:	dc000017 	ldw	r16,0(sp)
   27594:	dec00204 	addi	sp,sp,8
   27598:	f800283a 	ret
   2759c:	80000015 	stw	zero,0(r16)
   275a0:	80000115 	stw	zero,4(r16)
   275a4:	00c006c4 	movi	r3,27
   275a8:	19800d2e 	bgeu	r3,r6,275e0 <_calloc_r+0xb4>
   275ac:	80000215 	stw	zero,8(r16)
   275b0:	80000315 	stw	zero,12(r16)
   275b4:	30800c26 	beq	r6,r2,275e8 <_calloc_r+0xbc>
   275b8:	80800404 	addi	r2,r16,16
   275bc:	003fef06 	br	2757c <_calloc_r+0x50>
   275c0:	8009883a 	mov	r4,r16
   275c4:	000b883a 	mov	r5,zero
   275c8:	0025aec0 	call	25aec <memset>
   275cc:	8005883a 	mov	r2,r16
   275d0:	dfc00117 	ldw	ra,4(sp)
   275d4:	dc000017 	ldw	r16,0(sp)
   275d8:	dec00204 	addi	sp,sp,8
   275dc:	f800283a 	ret
   275e0:	80800204 	addi	r2,r16,8
   275e4:	003fe506 	br	2757c <_calloc_r+0x50>
   275e8:	80000415 	stw	zero,16(r16)
   275ec:	80000515 	stw	zero,20(r16)
   275f0:	80800604 	addi	r2,r16,24
   275f4:	003fe106 	br	2757c <_calloc_r+0x50>

000275f8 <_close_r>:
   275f8:	defffd04 	addi	sp,sp,-12
   275fc:	dc400115 	stw	r17,4(sp)
   27600:	dc000015 	stw	r16,0(sp)
   27604:	2023883a 	mov	r17,r4
   27608:	040000f4 	movhi	r16,3
   2760c:	843fe004 	addi	r16,r16,-128
   27610:	2809883a 	mov	r4,r5
   27614:	dfc00215 	stw	ra,8(sp)
   27618:	80000015 	stw	zero,0(r16)
   2761c:	0029aec0 	call	29aec <close>
   27620:	00ffffc4 	movi	r3,-1
   27624:	10c00526 	beq	r2,r3,2763c <_close_r+0x44>
   27628:	dfc00217 	ldw	ra,8(sp)
   2762c:	dc400117 	ldw	r17,4(sp)
   27630:	dc000017 	ldw	r16,0(sp)
   27634:	dec00304 	addi	sp,sp,12
   27638:	f800283a 	ret
   2763c:	80c00017 	ldw	r3,0(r16)
   27640:	183ff926 	beq	r3,zero,27628 <_close_r+0x30>
   27644:	88c00015 	stw	r3,0(r17)
   27648:	dfc00217 	ldw	ra,8(sp)
   2764c:	dc400117 	ldw	r17,4(sp)
   27650:	dc000017 	ldw	r16,0(sp)
   27654:	dec00304 	addi	sp,sp,12
   27658:	f800283a 	ret

0002765c <_fclose_r>:
   2765c:	defffc04 	addi	sp,sp,-16
   27660:	dc400115 	stw	r17,4(sp)
   27664:	dc000015 	stw	r16,0(sp)
   27668:	dfc00315 	stw	ra,12(sp)
   2766c:	dc800215 	stw	r18,8(sp)
   27670:	2821883a 	mov	r16,r5
   27674:	2023883a 	mov	r17,r4
   27678:	28003426 	beq	r5,zero,2774c <_fclose_r+0xf0>
   2767c:	00242900 	call	24290 <__sfp_lock_acquire>
   27680:	88000226 	beq	r17,zero,2768c <_fclose_r+0x30>
   27684:	88800e17 	ldw	r2,56(r17)
   27688:	10003826 	beq	r2,zero,2776c <_fclose_r+0x110>
   2768c:	8080030f 	ldh	r2,12(r16)
   27690:	10002526 	beq	r2,zero,27728 <_fclose_r+0xcc>
   27694:	8809883a 	mov	r4,r17
   27698:	800b883a 	mov	r5,r16
   2769c:	0023dcc0 	call	23dcc <_fflush_r>
   276a0:	1025883a 	mov	r18,r2
   276a4:	80800b17 	ldw	r2,44(r16)
   276a8:	10000426 	beq	r2,zero,276bc <_fclose_r+0x60>
   276ac:	81400717 	ldw	r5,28(r16)
   276b0:	8809883a 	mov	r4,r17
   276b4:	103ee83a 	callr	r2
   276b8:	10003516 	blt	r2,zero,27790 <_fclose_r+0x134>
   276bc:	8080030b 	ldhu	r2,12(r16)
   276c0:	1080200c 	andi	r2,r2,128
   276c4:	10bfffcc 	andi	r2,r2,65535
   276c8:	10a0001c 	xori	r2,r2,32768
   276cc:	10a00004 	addi	r2,r2,-32768
   276d0:	10002b1e 	bne	r2,zero,27780 <_fclose_r+0x124>
   276d4:	81400c17 	ldw	r5,48(r16)
   276d8:	28000526 	beq	r5,zero,276f0 <_fclose_r+0x94>
   276dc:	80801004 	addi	r2,r16,64
   276e0:	28800226 	beq	r5,r2,276ec <_fclose_r+0x90>
   276e4:	8809883a 	mov	r4,r17
   276e8:	002440c0 	call	2440c <_free_r>
   276ec:	80000c15 	stw	zero,48(r16)
   276f0:	81401117 	ldw	r5,68(r16)
   276f4:	28000326 	beq	r5,zero,27704 <_fclose_r+0xa8>
   276f8:	8809883a 	mov	r4,r17
   276fc:	002440c0 	call	2440c <_free_r>
   27700:	80001115 	stw	zero,68(r16)
   27704:	8000030d 	sth	zero,12(r16)
   27708:	00242940 	call	24294 <__sfp_lock_release>
   2770c:	9005883a 	mov	r2,r18
   27710:	dfc00317 	ldw	ra,12(sp)
   27714:	dc800217 	ldw	r18,8(sp)
   27718:	dc400117 	ldw	r17,4(sp)
   2771c:	dc000017 	ldw	r16,0(sp)
   27720:	dec00404 	addi	sp,sp,16
   27724:	f800283a 	ret
   27728:	00242940 	call	24294 <__sfp_lock_release>
   2772c:	0025883a 	mov	r18,zero
   27730:	9005883a 	mov	r2,r18
   27734:	dfc00317 	ldw	ra,12(sp)
   27738:	dc800217 	ldw	r18,8(sp)
   2773c:	dc400117 	ldw	r17,4(sp)
   27740:	dc000017 	ldw	r16,0(sp)
   27744:	dec00404 	addi	sp,sp,16
   27748:	f800283a 	ret
   2774c:	0025883a 	mov	r18,zero
   27750:	9005883a 	mov	r2,r18
   27754:	dfc00317 	ldw	ra,12(sp)
   27758:	dc800217 	ldw	r18,8(sp)
   2775c:	dc400117 	ldw	r17,4(sp)
   27760:	dc000017 	ldw	r16,0(sp)
   27764:	dec00404 	addi	sp,sp,16
   27768:	f800283a 	ret
   2776c:	8809883a 	mov	r4,r17
   27770:	00240880 	call	24088 <__sinit>
   27774:	8080030f 	ldh	r2,12(r16)
   27778:	103fc61e 	bne	r2,zero,27694 <_fclose_r+0x38>
   2777c:	003fea06 	br	27728 <_fclose_r+0xcc>
   27780:	81400417 	ldw	r5,16(r16)
   27784:	8809883a 	mov	r4,r17
   27788:	002440c0 	call	2440c <_free_r>
   2778c:	003fd106 	br	276d4 <_fclose_r+0x78>
   27790:	04bfffc4 	movi	r18,-1
   27794:	003fc906 	br	276bc <_fclose_r+0x60>

00027798 <fclose>:
   27798:	008000f4 	movhi	r2,3
   2779c:	10b93604 	addi	r2,r2,-6952
   277a0:	200b883a 	mov	r5,r4
   277a4:	11000017 	ldw	r4,0(r2)
   277a8:	002765c1 	jmpi	2765c <_fclose_r>

000277ac <_fstat_r>:
   277ac:	defffd04 	addi	sp,sp,-12
   277b0:	dc400115 	stw	r17,4(sp)
   277b4:	dc000015 	stw	r16,0(sp)
   277b8:	2023883a 	mov	r17,r4
   277bc:	040000f4 	movhi	r16,3
   277c0:	843fe004 	addi	r16,r16,-128
   277c4:	2809883a 	mov	r4,r5
   277c8:	300b883a 	mov	r5,r6
   277cc:	dfc00215 	stw	ra,8(sp)
   277d0:	80000015 	stw	zero,0(r16)
   277d4:	0029c340 	call	29c34 <fstat>
   277d8:	00ffffc4 	movi	r3,-1
   277dc:	10c00526 	beq	r2,r3,277f4 <_fstat_r+0x48>
   277e0:	dfc00217 	ldw	ra,8(sp)
   277e4:	dc400117 	ldw	r17,4(sp)
   277e8:	dc000017 	ldw	r16,0(sp)
   277ec:	dec00304 	addi	sp,sp,12
   277f0:	f800283a 	ret
   277f4:	80c00017 	ldw	r3,0(r16)
   277f8:	183ff926 	beq	r3,zero,277e0 <_fstat_r+0x34>
   277fc:	88c00015 	stw	r3,0(r17)
   27800:	dfc00217 	ldw	ra,8(sp)
   27804:	dc400117 	ldw	r17,4(sp)
   27808:	dc000017 	ldw	r16,0(sp)
   2780c:	dec00304 	addi	sp,sp,12
   27810:	f800283a 	ret

00027814 <_isatty_r>:
   27814:	defffd04 	addi	sp,sp,-12
   27818:	dc400115 	stw	r17,4(sp)
   2781c:	dc000015 	stw	r16,0(sp)
   27820:	2023883a 	mov	r17,r4
   27824:	040000f4 	movhi	r16,3
   27828:	843fe004 	addi	r16,r16,-128
   2782c:	2809883a 	mov	r4,r5
   27830:	dfc00215 	stw	ra,8(sp)
   27834:	80000015 	stw	zero,0(r16)
   27838:	0029d340 	call	29d34 <isatty>
   2783c:	00ffffc4 	movi	r3,-1
   27840:	10c00526 	beq	r2,r3,27858 <_isatty_r+0x44>
   27844:	dfc00217 	ldw	ra,8(sp)
   27848:	dc400117 	ldw	r17,4(sp)
   2784c:	dc000017 	ldw	r16,0(sp)
   27850:	dec00304 	addi	sp,sp,12
   27854:	f800283a 	ret
   27858:	80c00017 	ldw	r3,0(r16)
   2785c:	183ff926 	beq	r3,zero,27844 <_isatty_r+0x30>
   27860:	88c00015 	stw	r3,0(r17)
   27864:	dfc00217 	ldw	ra,8(sp)
   27868:	dc400117 	ldw	r17,4(sp)
   2786c:	dc000017 	ldw	r16,0(sp)
   27870:	dec00304 	addi	sp,sp,12
   27874:	f800283a 	ret

00027878 <_lseek_r>:
   27878:	defffd04 	addi	sp,sp,-12
   2787c:	dc400115 	stw	r17,4(sp)
   27880:	dc000015 	stw	r16,0(sp)
   27884:	2023883a 	mov	r17,r4
   27888:	040000f4 	movhi	r16,3
   2788c:	843fe004 	addi	r16,r16,-128
   27890:	2809883a 	mov	r4,r5
   27894:	300b883a 	mov	r5,r6
   27898:	380d883a 	mov	r6,r7
   2789c:	dfc00215 	stw	ra,8(sp)
   278a0:	80000015 	stw	zero,0(r16)
   278a4:	0029f140 	call	29f14 <lseek>
   278a8:	00ffffc4 	movi	r3,-1
   278ac:	10c00526 	beq	r2,r3,278c4 <_lseek_r+0x4c>
   278b0:	dfc00217 	ldw	ra,8(sp)
   278b4:	dc400117 	ldw	r17,4(sp)
   278b8:	dc000017 	ldw	r16,0(sp)
   278bc:	dec00304 	addi	sp,sp,12
   278c0:	f800283a 	ret
   278c4:	80c00017 	ldw	r3,0(r16)
   278c8:	183ff926 	beq	r3,zero,278b0 <_lseek_r+0x38>
   278cc:	88c00015 	stw	r3,0(r17)
   278d0:	dfc00217 	ldw	ra,8(sp)
   278d4:	dc400117 	ldw	r17,4(sp)
   278d8:	dc000017 	ldw	r16,0(sp)
   278dc:	dec00304 	addi	sp,sp,12
   278e0:	f800283a 	ret

000278e4 <_read_r>:
   278e4:	defffd04 	addi	sp,sp,-12
   278e8:	dc400115 	stw	r17,4(sp)
   278ec:	dc000015 	stw	r16,0(sp)
   278f0:	2023883a 	mov	r17,r4
   278f4:	040000f4 	movhi	r16,3
   278f8:	843fe004 	addi	r16,r16,-128
   278fc:	2809883a 	mov	r4,r5
   27900:	300b883a 	mov	r5,r6
   27904:	380d883a 	mov	r6,r7
   27908:	dfc00215 	stw	ra,8(sp)
   2790c:	80000015 	stw	zero,0(r16)
   27910:	002a0f00 	call	2a0f0 <read>
   27914:	00ffffc4 	movi	r3,-1
   27918:	10c00526 	beq	r2,r3,27930 <_read_r+0x4c>
   2791c:	dfc00217 	ldw	ra,8(sp)
   27920:	dc400117 	ldw	r17,4(sp)
   27924:	dc000017 	ldw	r16,0(sp)
   27928:	dec00304 	addi	sp,sp,12
   2792c:	f800283a 	ret
   27930:	80c00017 	ldw	r3,0(r16)
   27934:	183ff926 	beq	r3,zero,2791c <_read_r+0x38>
   27938:	88c00015 	stw	r3,0(r17)
   2793c:	dfc00217 	ldw	ra,8(sp)
   27940:	dc400117 	ldw	r17,4(sp)
   27944:	dc000017 	ldw	r16,0(sp)
   27948:	dec00304 	addi	sp,sp,12
   2794c:	f800283a 	ret

00027950 <__udivdi3>:
   27950:	defff504 	addi	sp,sp,-44
   27954:	dd000515 	stw	r20,20(sp)
   27958:	dcc00415 	stw	r19,16(sp)
   2795c:	dc800315 	stw	r18,12(sp)
   27960:	dc400215 	stw	r17,8(sp)
   27964:	dc000115 	stw	r16,4(sp)
   27968:	dfc00a15 	stw	ra,40(sp)
   2796c:	df000915 	stw	fp,36(sp)
   27970:	ddc00815 	stw	r23,32(sp)
   27974:	dd800715 	stw	r22,28(sp)
   27978:	dd400615 	stw	r21,24(sp)
   2797c:	2025883a 	mov	r18,r4
   27980:	2823883a 	mov	r17,r5
   27984:	3021883a 	mov	r16,r6
   27988:	2027883a 	mov	r19,r4
   2798c:	2829883a 	mov	r20,r5
   27990:	3800451e 	bne	r7,zero,27aa8 <__udivdi3+0x158>
   27994:	2980652e 	bgeu	r5,r6,27b2c <__udivdi3+0x1dc>
   27998:	00bfffd4 	movui	r2,65535
   2799c:	1180b436 	bltu	r2,r6,27c70 <__udivdi3+0x320>
   279a0:	00803fc4 	movi	r2,255
   279a4:	11816636 	bltu	r2,r6,27f40 <__udivdi3+0x5f0>
   279a8:	0005883a 	mov	r2,zero
   279ac:	0007883a 	mov	r3,zero
   279b0:	3084d83a 	srl	r2,r6,r2
   279b4:	010000f4 	movhi	r4,3
   279b8:	21326104 	addi	r4,r4,-13948
   279bc:	2085883a 	add	r2,r4,r2
   279c0:	10800003 	ldbu	r2,0(r2)
   279c4:	10c7883a 	add	r3,r2,r3
   279c8:	00800804 	movi	r2,32
   279cc:	10c5c83a 	sub	r2,r2,r3
   279d0:	10000526 	beq	r2,zero,279e8 <__udivdi3+0x98>
   279d4:	88a2983a 	sll	r17,r17,r2
   279d8:	90c6d83a 	srl	r3,r18,r3
   279dc:	30a0983a 	sll	r16,r6,r2
   279e0:	90a6983a 	sll	r19,r18,r2
   279e4:	88e8b03a 	or	r20,r17,r3
   279e8:	8022d43a 	srli	r17,r16,16
   279ec:	a009883a 	mov	r4,r20
   279f0:	857fffcc 	andi	r21,r16,65535
   279f4:	880b883a 	mov	r5,r17
   279f8:	00294300 	call	29430 <__umodsi3>
   279fc:	a009883a 	mov	r4,r20
   27a00:	880b883a 	mov	r5,r17
   27a04:	102d883a 	mov	r22,r2
   27a08:	00294280 	call	29428 <__udivsi3>
   27a0c:	1009883a 	mov	r4,r2
   27a10:	a80b883a 	mov	r5,r21
   27a14:	1025883a 	mov	r18,r2
   27a18:	00294380 	call	29438 <__mulsi3>
   27a1c:	1009883a 	mov	r4,r2
   27a20:	b006943a 	slli	r3,r22,16
   27a24:	9804d43a 	srli	r2,r19,16
   27a28:	1886b03a 	or	r3,r3,r2
   27a2c:	1900052e 	bgeu	r3,r4,27a44 <__udivdi3+0xf4>
   27a30:	1c07883a 	add	r3,r3,r16
   27a34:	90bfffc4 	addi	r2,r18,-1
   27a38:	1c000136 	bltu	r3,r16,27a40 <__udivdi3+0xf0>
   27a3c:	19015536 	bltu	r3,r4,27f94 <__udivdi3+0x644>
   27a40:	1025883a 	mov	r18,r2
   27a44:	1929c83a 	sub	r20,r3,r4
   27a48:	880b883a 	mov	r5,r17
   27a4c:	a009883a 	mov	r4,r20
   27a50:	00294300 	call	29430 <__umodsi3>
   27a54:	102d883a 	mov	r22,r2
   27a58:	880b883a 	mov	r5,r17
   27a5c:	a009883a 	mov	r4,r20
   27a60:	b02c943a 	slli	r22,r22,16
   27a64:	00294280 	call	29428 <__udivsi3>
   27a68:	1009883a 	mov	r4,r2
   27a6c:	a80b883a 	mov	r5,r21
   27a70:	9cffffcc 	andi	r19,r19,65535
   27a74:	1023883a 	mov	r17,r2
   27a78:	b4e6b03a 	or	r19,r22,r19
   27a7c:	00294380 	call	29438 <__mulsi3>
   27a80:	9880052e 	bgeu	r19,r2,27a98 <__udivdi3+0x148>
   27a84:	9c27883a 	add	r19,r19,r16
   27a88:	88ffffc4 	addi	r3,r17,-1
   27a8c:	9c011436 	bltu	r19,r16,27ee0 <__udivdi3+0x590>
   27a90:	9881132e 	bgeu	r19,r2,27ee0 <__udivdi3+0x590>
   27a94:	8c7fff84 	addi	r17,r17,-2
   27a98:	9004943a 	slli	r2,r18,16
   27a9c:	0007883a 	mov	r3,zero
   27aa0:	8884b03a 	or	r2,r17,r2
   27aa4:	00001506 	br	27afc <__udivdi3+0x1ac>
   27aa8:	29c06a36 	bltu	r5,r7,27c54 <__udivdi3+0x304>
   27aac:	00bfffd4 	movui	r2,65535
   27ab0:	11c06a2e 	bgeu	r2,r7,27c5c <__udivdi3+0x30c>
   27ab4:	00804034 	movhi	r2,256
   27ab8:	10bfffc4 	addi	r2,r2,-1
   27abc:	11c11436 	bltu	r2,r7,27f10 <__udivdi3+0x5c0>
   27ac0:	00c00404 	movi	r3,16
   27ac4:	180b883a 	mov	r5,r3
   27ac8:	38c6d83a 	srl	r3,r7,r3
   27acc:	010000f4 	movhi	r4,3
   27ad0:	21326104 	addi	r4,r4,-13948
   27ad4:	04000804 	movi	r16,32
   27ad8:	20c7883a 	add	r3,r4,r3
   27adc:	18800003 	ldbu	r2,0(r3)
   27ae0:	1145883a 	add	r2,r2,r5
   27ae4:	80a1c83a 	sub	r16,r16,r2
   27ae8:	80006e1e 	bne	r16,zero,27ca4 <__udivdi3+0x354>
   27aec:	0007883a 	mov	r3,zero
   27af0:	3c406a36 	bltu	r7,r17,27c9c <__udivdi3+0x34c>
   27af4:	9180692e 	bgeu	r18,r6,27c9c <__udivdi3+0x34c>
   27af8:	0005883a 	mov	r2,zero
   27afc:	dfc00a17 	ldw	ra,40(sp)
   27b00:	df000917 	ldw	fp,36(sp)
   27b04:	ddc00817 	ldw	r23,32(sp)
   27b08:	dd800717 	ldw	r22,28(sp)
   27b0c:	dd400617 	ldw	r21,24(sp)
   27b10:	dd000517 	ldw	r20,20(sp)
   27b14:	dcc00417 	ldw	r19,16(sp)
   27b18:	dc800317 	ldw	r18,12(sp)
   27b1c:	dc400217 	ldw	r17,8(sp)
   27b20:	dc000117 	ldw	r16,4(sp)
   27b24:	dec00b04 	addi	sp,sp,44
   27b28:	f800283a 	ret
   27b2c:	3000041e 	bne	r6,zero,27b40 <__udivdi3+0x1f0>
   27b30:	01000044 	movi	r4,1
   27b34:	000b883a 	mov	r5,zero
   27b38:	00294280 	call	29428 <__udivsi3>
   27b3c:	1021883a 	mov	r16,r2
   27b40:	00bfffd4 	movui	r2,65535
   27b44:	1400502e 	bgeu	r2,r16,27c88 <__udivdi3+0x338>
   27b48:	00804034 	movhi	r2,256
   27b4c:	10bfffc4 	addi	r2,r2,-1
   27b50:	1400f536 	bltu	r2,r16,27f28 <__udivdi3+0x5d8>
   27b54:	00800404 	movi	r2,16
   27b58:	1007883a 	mov	r3,r2
   27b5c:	8084d83a 	srl	r2,r16,r2
   27b60:	010000f4 	movhi	r4,3
   27b64:	21326104 	addi	r4,r4,-13948
   27b68:	2085883a 	add	r2,r4,r2
   27b6c:	10800003 	ldbu	r2,0(r2)
   27b70:	10c7883a 	add	r3,r2,r3
   27b74:	00800804 	movi	r2,32
   27b78:	10c5c83a 	sub	r2,r2,r3
   27b7c:	1000a01e 	bne	r2,zero,27e00 <__udivdi3+0x4b0>
   27b80:	8028d43a 	srli	r20,r16,16
   27b84:	8c23c83a 	sub	r17,r17,r16
   27b88:	857fffcc 	andi	r21,r16,65535
   27b8c:	00c00044 	movi	r3,1
   27b90:	8809883a 	mov	r4,r17
   27b94:	a00b883a 	mov	r5,r20
   27b98:	d8c00015 	stw	r3,0(sp)
   27b9c:	00294300 	call	29430 <__umodsi3>
   27ba0:	8809883a 	mov	r4,r17
   27ba4:	a00b883a 	mov	r5,r20
   27ba8:	102d883a 	mov	r22,r2
   27bac:	00294280 	call	29428 <__udivsi3>
   27bb0:	1009883a 	mov	r4,r2
   27bb4:	a80b883a 	mov	r5,r21
   27bb8:	1025883a 	mov	r18,r2
   27bbc:	00294380 	call	29438 <__mulsi3>
   27bc0:	1009883a 	mov	r4,r2
   27bc4:	b00c943a 	slli	r6,r22,16
   27bc8:	9804d43a 	srli	r2,r19,16
   27bcc:	d8c00017 	ldw	r3,0(sp)
   27bd0:	308cb03a 	or	r6,r6,r2
   27bd4:	3100052e 	bgeu	r6,r4,27bec <__udivdi3+0x29c>
   27bd8:	340d883a 	add	r6,r6,r16
   27bdc:	90bfffc4 	addi	r2,r18,-1
   27be0:	34000136 	bltu	r6,r16,27be8 <__udivdi3+0x298>
   27be4:	3100e836 	bltu	r6,r4,27f88 <__udivdi3+0x638>
   27be8:	1025883a 	mov	r18,r2
   27bec:	3123c83a 	sub	r17,r6,r4
   27bf0:	8809883a 	mov	r4,r17
   27bf4:	a00b883a 	mov	r5,r20
   27bf8:	d8c00015 	stw	r3,0(sp)
   27bfc:	00294300 	call	29430 <__umodsi3>
   27c00:	102d883a 	mov	r22,r2
   27c04:	8809883a 	mov	r4,r17
   27c08:	a00b883a 	mov	r5,r20
   27c0c:	b02c943a 	slli	r22,r22,16
   27c10:	00294280 	call	29428 <__udivsi3>
   27c14:	1009883a 	mov	r4,r2
   27c18:	a80b883a 	mov	r5,r21
   27c1c:	9cffffcc 	andi	r19,r19,65535
   27c20:	1023883a 	mov	r17,r2
   27c24:	b4e6b03a 	or	r19,r22,r19
   27c28:	00294380 	call	29438 <__mulsi3>
   27c2c:	d8c00017 	ldw	r3,0(sp)
   27c30:	9880052e 	bgeu	r19,r2,27c48 <__udivdi3+0x2f8>
   27c34:	9c27883a 	add	r19,r19,r16
   27c38:	893fffc4 	addi	r4,r17,-1
   27c3c:	9c00aa36 	bltu	r19,r16,27ee8 <__udivdi3+0x598>
   27c40:	9880a92e 	bgeu	r19,r2,27ee8 <__udivdi3+0x598>
   27c44:	8c7fff84 	addi	r17,r17,-2
   27c48:	9004943a 	slli	r2,r18,16
   27c4c:	8884b03a 	or	r2,r17,r2
   27c50:	003faa06 	br	27afc <__udivdi3+0x1ac>
   27c54:	0007883a 	mov	r3,zero
   27c58:	003fa706 	br	27af8 <__udivdi3+0x1a8>
   27c5c:	00803fc4 	movi	r2,255
   27c60:	11c0ae36 	bltu	r2,r7,27f1c <__udivdi3+0x5cc>
   27c64:	0007883a 	mov	r3,zero
   27c68:	000b883a 	mov	r5,zero
   27c6c:	003f9606 	br	27ac8 <__udivdi3+0x178>
   27c70:	00804034 	movhi	r2,256
   27c74:	10bfffc4 	addi	r2,r2,-1
   27c78:	1180ae36 	bltu	r2,r6,27f34 <__udivdi3+0x5e4>
   27c7c:	00800404 	movi	r2,16
   27c80:	1007883a 	mov	r3,r2
   27c84:	003f4a06 	br	279b0 <__udivdi3+0x60>
   27c88:	00803fc4 	movi	r2,255
   27c8c:	1400af36 	bltu	r2,r16,27f4c <__udivdi3+0x5fc>
   27c90:	0005883a 	mov	r2,zero
   27c94:	0007883a 	mov	r3,zero
   27c98:	003fb006 	br	27b5c <__udivdi3+0x20c>
   27c9c:	00800044 	movi	r2,1
   27ca0:	003f9606 	br	27afc <__udivdi3+0x1ac>
   27ca4:	3c0e983a 	sll	r7,r7,r16
   27ca8:	3086d83a 	srl	r3,r6,r2
   27cac:	88aed83a 	srl	r23,r17,r2
   27cb0:	9084d83a 	srl	r2,r18,r2
   27cb4:	38e6b03a 	or	r19,r7,r3
   27cb8:	9828d43a 	srli	r20,r19,16
   27cbc:	8c22983a 	sll	r17,r17,r16
   27cc0:	b809883a 	mov	r4,r23
   27cc4:	a00b883a 	mov	r5,r20
   27cc8:	342a983a 	sll	r21,r6,r16
   27ccc:	88a2b03a 	or	r17,r17,r2
   27cd0:	00294300 	call	29430 <__umodsi3>
   27cd4:	b809883a 	mov	r4,r23
   27cd8:	a00b883a 	mov	r5,r20
   27cdc:	1039883a 	mov	fp,r2
   27ce0:	9dbfffcc 	andi	r22,r19,65535
   27ce4:	00294280 	call	29428 <__udivsi3>
   27ce8:	1009883a 	mov	r4,r2
   27cec:	b00b883a 	mov	r5,r22
   27cf0:	102f883a 	mov	r23,r2
   27cf4:	00294380 	call	29438 <__mulsi3>
   27cf8:	1009883a 	mov	r4,r2
   27cfc:	e00e943a 	slli	r7,fp,16
   27d00:	8804d43a 	srli	r2,r17,16
   27d04:	388eb03a 	or	r7,r7,r2
   27d08:	3900042e 	bgeu	r7,r4,27d1c <__udivdi3+0x3cc>
   27d0c:	3ccf883a 	add	r7,r7,r19
   27d10:	b8bfffc4 	addi	r2,r23,-1
   27d14:	3cc0942e 	bgeu	r7,r19,27f68 <__udivdi3+0x618>
   27d18:	102f883a 	mov	r23,r2
   27d1c:	3939c83a 	sub	fp,r7,r4
   27d20:	a00b883a 	mov	r5,r20
   27d24:	e009883a 	mov	r4,fp
   27d28:	00294300 	call	29430 <__umodsi3>
   27d2c:	a00b883a 	mov	r5,r20
   27d30:	e009883a 	mov	r4,fp
   27d34:	d8800015 	stw	r2,0(sp)
   27d38:	00294280 	call	29428 <__udivsi3>
   27d3c:	1009883a 	mov	r4,r2
   27d40:	b00b883a 	mov	r5,r22
   27d44:	1029883a 	mov	r20,r2
   27d48:	00294380 	call	29438 <__mulsi3>
   27d4c:	d8c00017 	ldw	r3,0(sp)
   27d50:	8c7fffcc 	andi	r17,r17,65535
   27d54:	1806943a 	slli	r3,r3,16
   27d58:	1c46b03a 	or	r3,r3,r17
   27d5c:	1880042e 	bgeu	r3,r2,27d70 <__udivdi3+0x420>
   27d60:	1cc7883a 	add	r3,r3,r19
   27d64:	a13fffc4 	addi	r4,r20,-1
   27d68:	1cc07b2e 	bgeu	r3,r19,27f58 <__udivdi3+0x608>
   27d6c:	2029883a 	mov	r20,r4
   27d70:	b82e943a 	slli	r23,r23,16
   27d74:	a822d43a 	srli	r17,r21,16
   27d78:	ad7fffcc 	andi	r21,r21,65535
   27d7c:	a5e8b03a 	or	r20,r20,r23
   27d80:	a5bfffcc 	andi	r22,r20,65535
   27d84:	b009883a 	mov	r4,r22
   27d88:	a80b883a 	mov	r5,r21
   27d8c:	18afc83a 	sub	r23,r3,r2
   27d90:	a026d43a 	srli	r19,r20,16
   27d94:	00294380 	call	29438 <__mulsi3>
   27d98:	b009883a 	mov	r4,r22
   27d9c:	880b883a 	mov	r5,r17
   27da0:	1039883a 	mov	fp,r2
   27da4:	00294380 	call	29438 <__mulsi3>
   27da8:	a80b883a 	mov	r5,r21
   27dac:	9809883a 	mov	r4,r19
   27db0:	102d883a 	mov	r22,r2
   27db4:	00294380 	call	29438 <__mulsi3>
   27db8:	9809883a 	mov	r4,r19
   27dbc:	880b883a 	mov	r5,r17
   27dc0:	102b883a 	mov	r21,r2
   27dc4:	00294380 	call	29438 <__mulsi3>
   27dc8:	100b883a 	mov	r5,r2
   27dcc:	e004d43a 	srli	r2,fp,16
   27dd0:	ad89883a 	add	r4,r21,r22
   27dd4:	2089883a 	add	r4,r4,r2
   27dd8:	2540022e 	bgeu	r4,r21,27de4 <__udivdi3+0x494>
   27ddc:	00800074 	movhi	r2,1
   27de0:	288b883a 	add	r5,r5,r2
   27de4:	2004d43a 	srli	r2,r4,16
   27de8:	288b883a 	add	r5,r5,r2
   27dec:	b9404536 	bltu	r23,r5,27f04 <__udivdi3+0x5b4>
   27df0:	b9403f26 	beq	r23,r5,27ef0 <__udivdi3+0x5a0>
   27df4:	a005883a 	mov	r2,r20
   27df8:	0007883a 	mov	r3,zero
   27dfc:	003f3f06 	br	27afc <__udivdi3+0x1ac>
   27e00:	80a0983a 	sll	r16,r16,r2
   27e04:	88eed83a 	srl	r23,r17,r3
   27e08:	90c6d83a 	srl	r3,r18,r3
   27e0c:	8028d43a 	srli	r20,r16,16
   27e10:	88a2983a 	sll	r17,r17,r2
   27e14:	b809883a 	mov	r4,r23
   27e18:	a00b883a 	mov	r5,r20
   27e1c:	88ecb03a 	or	r22,r17,r3
   27e20:	90a6983a 	sll	r19,r18,r2
   27e24:	00294300 	call	29430 <__umodsi3>
   27e28:	b809883a 	mov	r4,r23
   27e2c:	a00b883a 	mov	r5,r20
   27e30:	1023883a 	mov	r17,r2
   27e34:	857fffcc 	andi	r21,r16,65535
   27e38:	00294280 	call	29428 <__udivsi3>
   27e3c:	1009883a 	mov	r4,r2
   27e40:	a80b883a 	mov	r5,r21
   27e44:	102f883a 	mov	r23,r2
   27e48:	00294380 	call	29438 <__mulsi3>
   27e4c:	1009883a 	mov	r4,r2
   27e50:	880a943a 	slli	r5,r17,16
   27e54:	b004d43a 	srli	r2,r22,16
   27e58:	288ab03a 	or	r5,r5,r2
   27e5c:	2900062e 	bgeu	r5,r4,27e78 <__udivdi3+0x528>
   27e60:	2c0b883a 	add	r5,r5,r16
   27e64:	b8bfffc4 	addi	r2,r23,-1
   27e68:	2c004536 	bltu	r5,r16,27f80 <__udivdi3+0x630>
   27e6c:	2900442e 	bgeu	r5,r4,27f80 <__udivdi3+0x630>
   27e70:	bdffff84 	addi	r23,r23,-2
   27e74:	2c0b883a 	add	r5,r5,r16
   27e78:	2925c83a 	sub	r18,r5,r4
   27e7c:	9009883a 	mov	r4,r18
   27e80:	a00b883a 	mov	r5,r20
   27e84:	00294300 	call	29430 <__umodsi3>
   27e88:	1023883a 	mov	r17,r2
   27e8c:	9009883a 	mov	r4,r18
   27e90:	a00b883a 	mov	r5,r20
   27e94:	8822943a 	slli	r17,r17,16
   27e98:	00294280 	call	29428 <__udivsi3>
   27e9c:	1009883a 	mov	r4,r2
   27ea0:	a80b883a 	mov	r5,r21
   27ea4:	b5bfffcc 	andi	r22,r22,65535
   27ea8:	1025883a 	mov	r18,r2
   27eac:	8da2b03a 	or	r17,r17,r22
   27eb0:	00294380 	call	29438 <__mulsi3>
   27eb4:	8880062e 	bgeu	r17,r2,27ed0 <__udivdi3+0x580>
   27eb8:	8c23883a 	add	r17,r17,r16
   27ebc:	90ffffc4 	addi	r3,r18,-1
   27ec0:	8c002d36 	bltu	r17,r16,27f78 <__udivdi3+0x628>
   27ec4:	88802c2e 	bgeu	r17,r2,27f78 <__udivdi3+0x628>
   27ec8:	94bfff84 	addi	r18,r18,-2
   27ecc:	8c23883a 	add	r17,r17,r16
   27ed0:	b806943a 	slli	r3,r23,16
   27ed4:	88a3c83a 	sub	r17,r17,r2
   27ed8:	90c6b03a 	or	r3,r18,r3
   27edc:	003f2c06 	br	27b90 <__udivdi3+0x240>
   27ee0:	1823883a 	mov	r17,r3
   27ee4:	003eec06 	br	27a98 <__udivdi3+0x148>
   27ee8:	2023883a 	mov	r17,r4
   27eec:	003f5606 	br	27c48 <__udivdi3+0x2f8>
   27ef0:	2008943a 	slli	r4,r4,16
   27ef4:	9420983a 	sll	r16,r18,r16
   27ef8:	e73fffcc 	andi	fp,fp,65535
   27efc:	2709883a 	add	r4,r4,fp
   27f00:	813fbc2e 	bgeu	r16,r4,27df4 <__udivdi3+0x4a4>
   27f04:	a0bfffc4 	addi	r2,r20,-1
   27f08:	0007883a 	mov	r3,zero
   27f0c:	003efb06 	br	27afc <__udivdi3+0x1ac>
   27f10:	00c00604 	movi	r3,24
   27f14:	180b883a 	mov	r5,r3
   27f18:	003eeb06 	br	27ac8 <__udivdi3+0x178>
   27f1c:	00c00204 	movi	r3,8
   27f20:	180b883a 	mov	r5,r3
   27f24:	003ee806 	br	27ac8 <__udivdi3+0x178>
   27f28:	00800604 	movi	r2,24
   27f2c:	1007883a 	mov	r3,r2
   27f30:	003f0a06 	br	27b5c <__udivdi3+0x20c>
   27f34:	00800604 	movi	r2,24
   27f38:	1007883a 	mov	r3,r2
   27f3c:	003e9c06 	br	279b0 <__udivdi3+0x60>
   27f40:	00800204 	movi	r2,8
   27f44:	1007883a 	mov	r3,r2
   27f48:	003e9906 	br	279b0 <__udivdi3+0x60>
   27f4c:	00800204 	movi	r2,8
   27f50:	1007883a 	mov	r3,r2
   27f54:	003f0106 	br	27b5c <__udivdi3+0x20c>
   27f58:	18bf842e 	bgeu	r3,r2,27d6c <__udivdi3+0x41c>
   27f5c:	a53fff84 	addi	r20,r20,-2
   27f60:	1cc7883a 	add	r3,r3,r19
   27f64:	003f8206 	br	27d70 <__udivdi3+0x420>
   27f68:	393f6b2e 	bgeu	r7,r4,27d18 <__udivdi3+0x3c8>
   27f6c:	bdffff84 	addi	r23,r23,-2
   27f70:	3ccf883a 	add	r7,r7,r19
   27f74:	003f6906 	br	27d1c <__udivdi3+0x3cc>
   27f78:	1825883a 	mov	r18,r3
   27f7c:	003fd406 	br	27ed0 <__udivdi3+0x580>
   27f80:	102f883a 	mov	r23,r2
   27f84:	003fbc06 	br	27e78 <__udivdi3+0x528>
   27f88:	94bfff84 	addi	r18,r18,-2
   27f8c:	340d883a 	add	r6,r6,r16
   27f90:	003f1606 	br	27bec <__udivdi3+0x29c>
   27f94:	94bfff84 	addi	r18,r18,-2
   27f98:	1c07883a 	add	r3,r3,r16
   27f9c:	003ea906 	br	27a44 <__udivdi3+0xf4>

00027fa0 <__umoddi3>:
   27fa0:	defff304 	addi	sp,sp,-52
   27fa4:	dd000715 	stw	r20,28(sp)
   27fa8:	dcc00615 	stw	r19,24(sp)
   27fac:	dc800515 	stw	r18,20(sp)
   27fb0:	dc400415 	stw	r17,16(sp)
   27fb4:	dc000315 	stw	r16,12(sp)
   27fb8:	dfc00c15 	stw	ra,48(sp)
   27fbc:	df000b15 	stw	fp,44(sp)
   27fc0:	ddc00a15 	stw	r23,40(sp)
   27fc4:	dd800915 	stw	r22,36(sp)
   27fc8:	dd400815 	stw	r21,32(sp)
   27fcc:	2025883a 	mov	r18,r4
   27fd0:	2823883a 	mov	r17,r5
   27fd4:	3021883a 	mov	r16,r6
   27fd8:	2027883a 	mov	r19,r4
   27fdc:	2829883a 	mov	r20,r5
   27fe0:	38003a1e 	bne	r7,zero,280cc <__umoddi3+0x12c>
   27fe4:	2980522e 	bgeu	r5,r6,28130 <__umoddi3+0x190>
   27fe8:	00bfffd4 	movui	r2,65535
   27fec:	1180a436 	bltu	r2,r6,28280 <__umoddi3+0x2e0>
   27ff0:	00803fc4 	movi	r2,255
   27ff4:	11816036 	bltu	r2,r6,28578 <__umoddi3+0x5d8>
   27ff8:	0005883a 	mov	r2,zero
   27ffc:	0009883a 	mov	r4,zero
   28000:	3084d83a 	srl	r2,r6,r2
   28004:	00c000f4 	movhi	r3,3
   28008:	18f26104 	addi	r3,r3,-13948
   2800c:	05400804 	movi	r21,32
   28010:	1885883a 	add	r2,r3,r2
   28014:	10800003 	ldbu	r2,0(r2)
   28018:	1109883a 	add	r4,r2,r4
   2801c:	a92bc83a 	sub	r21,r21,r4
   28020:	a8010e26 	beq	r21,zero,2845c <__umoddi3+0x4bc>
   28024:	8d62983a 	sll	r17,r17,r21
   28028:	9108d83a 	srl	r4,r18,r4
   2802c:	3560983a 	sll	r16,r6,r21
   28030:	9566983a 	sll	r19,r18,r21
   28034:	8928b03a 	or	r20,r17,r4
   28038:	8022d43a 	srli	r17,r16,16
   2803c:	a009883a 	mov	r4,r20
   28040:	84bfffcc 	andi	r18,r16,65535
   28044:	880b883a 	mov	r5,r17
   28048:	00294300 	call	29430 <__umodsi3>
   2804c:	a009883a 	mov	r4,r20
   28050:	880b883a 	mov	r5,r17
   28054:	102d883a 	mov	r22,r2
   28058:	00294280 	call	29428 <__udivsi3>
   2805c:	1009883a 	mov	r4,r2
   28060:	900b883a 	mov	r5,r18
   28064:	00294380 	call	29438 <__mulsi3>
   28068:	1009883a 	mov	r4,r2
   2806c:	b006943a 	slli	r3,r22,16
   28070:	9804d43a 	srli	r2,r19,16
   28074:	1886b03a 	or	r3,r3,r2
   28078:	1900042e 	bgeu	r3,r4,2808c <__umoddi3+0xec>
   2807c:	1c07883a 	add	r3,r3,r16
   28080:	1c000236 	bltu	r3,r16,2808c <__umoddi3+0xec>
   28084:	1900012e 	bgeu	r3,r4,2808c <__umoddi3+0xec>
   28088:	1c07883a 	add	r3,r3,r16
   2808c:	1929c83a 	sub	r20,r3,r4
   28090:	a009883a 	mov	r4,r20
   28094:	880b883a 	mov	r5,r17
   28098:	00294300 	call	29430 <__umodsi3>
   2809c:	102d883a 	mov	r22,r2
   280a0:	a009883a 	mov	r4,r20
   280a4:	880b883a 	mov	r5,r17
   280a8:	b02c943a 	slli	r22,r22,16
   280ac:	00294280 	call	29428 <__udivsi3>
   280b0:	1009883a 	mov	r4,r2
   280b4:	900b883a 	mov	r5,r18
   280b8:	9cffffcc 	andi	r19,r19,65535
   280bc:	00294380 	call	29438 <__mulsi3>
   280c0:	b4e6b03a 	or	r19,r22,r19
   280c4:	9880572e 	bgeu	r19,r2,28224 <__umoddi3+0x284>
   280c8:	00005206 	br	28214 <__umoddi3+0x274>
   280cc:	29c05936 	bltu	r5,r7,28234 <__umoddi3+0x294>
   280d0:	00bfffd4 	movui	r2,65535
   280d4:	11c0652e 	bgeu	r2,r7,2826c <__umoddi3+0x2cc>
   280d8:	00804034 	movhi	r2,256
   280dc:	10bfffc4 	addi	r2,r2,-1
   280e0:	11c11936 	bltu	r2,r7,28548 <__umoddi3+0x5a8>
   280e4:	00c00404 	movi	r3,16
   280e8:	1827883a 	mov	r19,r3
   280ec:	38c6d83a 	srl	r3,r7,r3
   280f0:	010000f4 	movhi	r4,3
   280f4:	21326104 	addi	r4,r4,-13948
   280f8:	04000804 	movi	r16,32
   280fc:	20c7883a 	add	r3,r4,r3
   28100:	18800003 	ldbu	r2,0(r3)
   28104:	14e7883a 	add	r19,r2,r19
   28108:	84e1c83a 	sub	r16,r16,r19
   2810c:	8000671e 	bne	r16,zero,282ac <__umoddi3+0x30c>
   28110:	3c400136 	bltu	r7,r17,28118 <__umoddi3+0x178>
   28114:	91812536 	bltu	r18,r6,285ac <__umoddi3+0x60c>
   28118:	9185c83a 	sub	r2,r18,r6
   2811c:	89e3c83a 	sub	r17,r17,r7
   28120:	90a5803a 	cmpltu	r18,r18,r2
   28124:	8ca9c83a 	sub	r20,r17,r18
   28128:	a007883a 	mov	r3,r20
   2812c:	00004306 	br	2823c <__umoddi3+0x29c>
   28130:	3000041e 	bne	r6,zero,28144 <__umoddi3+0x1a4>
   28134:	01000044 	movi	r4,1
   28138:	000b883a 	mov	r5,zero
   2813c:	00294280 	call	29428 <__udivsi3>
   28140:	1021883a 	mov	r16,r2
   28144:	00bfffd4 	movui	r2,65535
   28148:	1400532e 	bgeu	r2,r16,28298 <__umoddi3+0x2f8>
   2814c:	00804034 	movhi	r2,256
   28150:	10bfffc4 	addi	r2,r2,-1
   28154:	14010536 	bltu	r2,r16,2856c <__umoddi3+0x5cc>
   28158:	00800404 	movi	r2,16
   2815c:	1007883a 	mov	r3,r2
   28160:	8084d83a 	srl	r2,r16,r2
   28164:	010000f4 	movhi	r4,3
   28168:	21326104 	addi	r4,r4,-13948
   2816c:	05400804 	movi	r21,32
   28170:	2085883a 	add	r2,r4,r2
   28174:	10800003 	ldbu	r2,0(r2)
   28178:	10c7883a 	add	r3,r2,r3
   2817c:	a8ebc83a 	sub	r21,r21,r3
   28180:	a800b81e 	bne	r21,zero,28464 <__umoddi3+0x4c4>
   28184:	8028d43a 	srli	r20,r16,16
   28188:	8c23c83a 	sub	r17,r17,r16
   2818c:	85bfffcc 	andi	r22,r16,65535
   28190:	8809883a 	mov	r4,r17
   28194:	a00b883a 	mov	r5,r20
   28198:	00294300 	call	29430 <__umodsi3>
   2819c:	8809883a 	mov	r4,r17
   281a0:	a00b883a 	mov	r5,r20
   281a4:	1025883a 	mov	r18,r2
   281a8:	00294280 	call	29428 <__udivsi3>
   281ac:	1009883a 	mov	r4,r2
   281b0:	b00b883a 	mov	r5,r22
   281b4:	00294380 	call	29438 <__mulsi3>
   281b8:	1009883a 	mov	r4,r2
   281bc:	9006943a 	slli	r3,r18,16
   281c0:	9804d43a 	srli	r2,r19,16
   281c4:	1886b03a 	or	r3,r3,r2
   281c8:	1900032e 	bgeu	r3,r4,281d8 <__umoddi3+0x238>
   281cc:	1c07883a 	add	r3,r3,r16
   281d0:	1c000136 	bltu	r3,r16,281d8 <__umoddi3+0x238>
   281d4:	1900f336 	bltu	r3,r4,285a4 <__umoddi3+0x604>
   281d8:	1923c83a 	sub	r17,r3,r4
   281dc:	8809883a 	mov	r4,r17
   281e0:	a00b883a 	mov	r5,r20
   281e4:	00294300 	call	29430 <__umodsi3>
   281e8:	102f883a 	mov	r23,r2
   281ec:	8809883a 	mov	r4,r17
   281f0:	a00b883a 	mov	r5,r20
   281f4:	b82e943a 	slli	r23,r23,16
   281f8:	00294280 	call	29428 <__udivsi3>
   281fc:	1009883a 	mov	r4,r2
   28200:	b00b883a 	mov	r5,r22
   28204:	9cffffcc 	andi	r19,r19,65535
   28208:	00294380 	call	29438 <__mulsi3>
   2820c:	bce6b03a 	or	r19,r23,r19
   28210:	9880042e 	bgeu	r19,r2,28224 <__umoddi3+0x284>
   28214:	9c27883a 	add	r19,r19,r16
   28218:	9c000236 	bltu	r19,r16,28224 <__umoddi3+0x284>
   2821c:	9880012e 	bgeu	r19,r2,28224 <__umoddi3+0x284>
   28220:	9c27883a 	add	r19,r19,r16
   28224:	9885c83a 	sub	r2,r19,r2
   28228:	1544d83a 	srl	r2,r2,r21
   2822c:	0007883a 	mov	r3,zero
   28230:	00000206 	br	2823c <__umoddi3+0x29c>
   28234:	2005883a 	mov	r2,r4
   28238:	2807883a 	mov	r3,r5
   2823c:	dfc00c17 	ldw	ra,48(sp)
   28240:	df000b17 	ldw	fp,44(sp)
   28244:	ddc00a17 	ldw	r23,40(sp)
   28248:	dd800917 	ldw	r22,36(sp)
   2824c:	dd400817 	ldw	r21,32(sp)
   28250:	dd000717 	ldw	r20,28(sp)
   28254:	dcc00617 	ldw	r19,24(sp)
   28258:	dc800517 	ldw	r18,20(sp)
   2825c:	dc400417 	ldw	r17,16(sp)
   28260:	dc000317 	ldw	r16,12(sp)
   28264:	dec00d04 	addi	sp,sp,52
   28268:	f800283a 	ret
   2826c:	00803fc4 	movi	r2,255
   28270:	11c0b236 	bltu	r2,r7,2853c <__umoddi3+0x59c>
   28274:	0007883a 	mov	r3,zero
   28278:	0027883a 	mov	r19,zero
   2827c:	003f9b06 	br	280ec <__umoddi3+0x14c>
   28280:	00804034 	movhi	r2,256
   28284:	10bfffc4 	addi	r2,r2,-1
   28288:	1180b236 	bltu	r2,r6,28554 <__umoddi3+0x5b4>
   2828c:	00800404 	movi	r2,16
   28290:	1009883a 	mov	r4,r2
   28294:	003f5a06 	br	28000 <__umoddi3+0x60>
   28298:	00803fc4 	movi	r2,255
   2829c:	1400b036 	bltu	r2,r16,28560 <__umoddi3+0x5c0>
   282a0:	0005883a 	mov	r2,zero
   282a4:	0007883a 	mov	r3,zero
   282a8:	003fad06 	br	28160 <__umoddi3+0x1c0>
   282ac:	34c4d83a 	srl	r2,r6,r19
   282b0:	3c0e983a 	sll	r7,r7,r16
   282b4:	8cf8d83a 	srl	fp,r17,r19
   282b8:	8c22983a 	sll	r17,r17,r16
   282bc:	38a8b03a 	or	r20,r7,r2
   282c0:	a02ad43a 	srli	r21,r20,16
   282c4:	94c4d83a 	srl	r2,r18,r19
   282c8:	e009883a 	mov	r4,fp
   282cc:	a80b883a 	mov	r5,r21
   282d0:	342c983a 	sll	r22,r6,r16
   282d4:	88a2b03a 	or	r17,r17,r2
   282d8:	00294300 	call	29430 <__umodsi3>
   282dc:	e009883a 	mov	r4,fp
   282e0:	a80b883a 	mov	r5,r21
   282e4:	a5ffffcc 	andi	r23,r20,65535
   282e8:	d8800215 	stw	r2,8(sp)
   282ec:	00294280 	call	29428 <__udivsi3>
   282f0:	1009883a 	mov	r4,r2
   282f4:	b80b883a 	mov	r5,r23
   282f8:	1039883a 	mov	fp,r2
   282fc:	00294380 	call	29438 <__mulsi3>
   28300:	d8c00217 	ldw	r3,8(sp)
   28304:	1009883a 	mov	r4,r2
   28308:	8804d43a 	srli	r2,r17,16
   2830c:	1806943a 	slli	r3,r3,16
   28310:	9424983a 	sll	r18,r18,r16
   28314:	1886b03a 	or	r3,r3,r2
   28318:	1900042e 	bgeu	r3,r4,2832c <__umoddi3+0x38c>
   2831c:	1d07883a 	add	r3,r3,r20
   28320:	e0bfffc4 	addi	r2,fp,-1
   28324:	1d009b2e 	bgeu	r3,r20,28594 <__umoddi3+0x5f4>
   28328:	1039883a 	mov	fp,r2
   2832c:	1907c83a 	sub	r3,r3,r4
   28330:	1809883a 	mov	r4,r3
   28334:	a80b883a 	mov	r5,r21
   28338:	d8c00215 	stw	r3,8(sp)
   2833c:	00294300 	call	29430 <__umodsi3>
   28340:	d8c00217 	ldw	r3,8(sp)
   28344:	a80b883a 	mov	r5,r21
   28348:	d8800015 	stw	r2,0(sp)
   2834c:	1809883a 	mov	r4,r3
   28350:	00294280 	call	29428 <__udivsi3>
   28354:	1009883a 	mov	r4,r2
   28358:	b80b883a 	mov	r5,r23
   2835c:	102b883a 	mov	r21,r2
   28360:	00294380 	call	29438 <__mulsi3>
   28364:	d9c00017 	ldw	r7,0(sp)
   28368:	8c7fffcc 	andi	r17,r17,65535
   2836c:	380e943a 	slli	r7,r7,16
   28370:	3c4eb03a 	or	r7,r7,r17
   28374:	3880042e 	bgeu	r7,r2,28388 <__umoddi3+0x3e8>
   28378:	3d0f883a 	add	r7,r7,r20
   2837c:	a8ffffc4 	addi	r3,r21,-1
   28380:	3d00802e 	bgeu	r7,r20,28584 <__umoddi3+0x5e4>
   28384:	182b883a 	mov	r21,r3
   28388:	e038943a 	slli	fp,fp,16
   2838c:	b010d43a 	srli	r8,r22,16
   28390:	b1bfffcc 	andi	r6,r22,65535
   28394:	af2ab03a 	or	r21,r21,fp
   28398:	a82ed43a 	srli	r23,r21,16
   2839c:	ad7fffcc 	andi	r21,r21,65535
   283a0:	300b883a 	mov	r5,r6
   283a4:	a809883a 	mov	r4,r21
   283a8:	38a3c83a 	sub	r17,r7,r2
   283ac:	d9800115 	stw	r6,4(sp)
   283b0:	da000015 	stw	r8,0(sp)
   283b4:	00294380 	call	29438 <__mulsi3>
   283b8:	da000017 	ldw	r8,0(sp)
   283bc:	a809883a 	mov	r4,r21
   283c0:	1039883a 	mov	fp,r2
   283c4:	400b883a 	mov	r5,r8
   283c8:	da000215 	stw	r8,8(sp)
   283cc:	00294380 	call	29438 <__mulsi3>
   283d0:	d9800117 	ldw	r6,4(sp)
   283d4:	b809883a 	mov	r4,r23
   283d8:	d8800015 	stw	r2,0(sp)
   283dc:	300b883a 	mov	r5,r6
   283e0:	00294380 	call	29438 <__mulsi3>
   283e4:	d8c00217 	ldw	r3,8(sp)
   283e8:	b809883a 	mov	r4,r23
   283ec:	102b883a 	mov	r21,r2
   283f0:	180b883a 	mov	r5,r3
   283f4:	00294380 	call	29438 <__mulsi3>
   283f8:	d9c00017 	ldw	r7,0(sp)
   283fc:	1007883a 	mov	r3,r2
   28400:	e004d43a 	srli	r2,fp,16
   28404:	a9c9883a 	add	r4,r21,r7
   28408:	2089883a 	add	r4,r4,r2
   2840c:	2540022e 	bgeu	r4,r21,28418 <__umoddi3+0x478>
   28410:	00800074 	movhi	r2,1
   28414:	1887883a 	add	r3,r3,r2
   28418:	2004d43a 	srli	r2,r4,16
   2841c:	2008943a 	slli	r4,r4,16
   28420:	e73fffcc 	andi	fp,fp,65535
   28424:	1887883a 	add	r3,r3,r2
   28428:	2709883a 	add	r4,r4,fp
   2842c:	88c03d36 	bltu	r17,r3,28524 <__umoddi3+0x584>
   28430:	88c06126 	beq	r17,r3,285b8 <__umoddi3+0x618>
   28434:	88c7c83a 	sub	r3,r17,r3
   28438:	202d883a 	mov	r22,r4
   2843c:	95adc83a 	sub	r22,r18,r22
   28440:	95a5803a 	cmpltu	r18,r18,r22
   28444:	1c87c83a 	sub	r3,r3,r18
   28448:	1cc4983a 	sll	r2,r3,r19
   2844c:	b42cd83a 	srl	r22,r22,r16
   28450:	1c06d83a 	srl	r3,r3,r16
   28454:	1584b03a 	or	r2,r2,r22
   28458:	003f7806 	br	2823c <__umoddi3+0x29c>
   2845c:	002b883a 	mov	r21,zero
   28460:	003ef506 	br	28038 <__umoddi3+0x98>
   28464:	8560983a 	sll	r16,r16,r21
   28468:	88e6d83a 	srl	r19,r17,r3
   2846c:	90c6d83a 	srl	r3,r18,r3
   28470:	8028d43a 	srli	r20,r16,16
   28474:	8d62983a 	sll	r17,r17,r21
   28478:	9809883a 	mov	r4,r19
   2847c:	a00b883a 	mov	r5,r20
   28480:	88eeb03a 	or	r23,r17,r3
   28484:	00294300 	call	29430 <__umodsi3>
   28488:	9809883a 	mov	r4,r19
   2848c:	a00b883a 	mov	r5,r20
   28490:	1023883a 	mov	r17,r2
   28494:	85bfffcc 	andi	r22,r16,65535
   28498:	00294280 	call	29428 <__udivsi3>
   2849c:	1009883a 	mov	r4,r2
   284a0:	b00b883a 	mov	r5,r22
   284a4:	00294380 	call	29438 <__mulsi3>
   284a8:	1007883a 	mov	r3,r2
   284ac:	8808943a 	slli	r4,r17,16
   284b0:	b804d43a 	srli	r2,r23,16
   284b4:	9566983a 	sll	r19,r18,r21
   284b8:	2088b03a 	or	r4,r4,r2
   284bc:	20c0042e 	bgeu	r4,r3,284d0 <__umoddi3+0x530>
   284c0:	2409883a 	add	r4,r4,r16
   284c4:	24000236 	bltu	r4,r16,284d0 <__umoddi3+0x530>
   284c8:	20c0012e 	bgeu	r4,r3,284d0 <__umoddi3+0x530>
   284cc:	2409883a 	add	r4,r4,r16
   284d0:	20e5c83a 	sub	r18,r4,r3
   284d4:	9009883a 	mov	r4,r18
   284d8:	a00b883a 	mov	r5,r20
   284dc:	00294300 	call	29430 <__umodsi3>
   284e0:	1023883a 	mov	r17,r2
   284e4:	9009883a 	mov	r4,r18
   284e8:	a00b883a 	mov	r5,r20
   284ec:	8822943a 	slli	r17,r17,16
   284f0:	00294280 	call	29428 <__udivsi3>
   284f4:	1009883a 	mov	r4,r2
   284f8:	b00b883a 	mov	r5,r22
   284fc:	bdffffcc 	andi	r23,r23,65535
   28500:	00294380 	call	29438 <__mulsi3>
   28504:	8de2b03a 	or	r17,r17,r23
   28508:	8880042e 	bgeu	r17,r2,2851c <__umoddi3+0x57c>
   2850c:	8c23883a 	add	r17,r17,r16
   28510:	8c000236 	bltu	r17,r16,2851c <__umoddi3+0x57c>
   28514:	8880012e 	bgeu	r17,r2,2851c <__umoddi3+0x57c>
   28518:	8c23883a 	add	r17,r17,r16
   2851c:	88a3c83a 	sub	r17,r17,r2
   28520:	003f1b06 	br	28190 <__umoddi3+0x1f0>
   28524:	25adc83a 	sub	r22,r4,r22
   28528:	1d07c83a 	sub	r3,r3,r20
   2852c:	2589803a 	cmpltu	r4,r4,r22
   28530:	1907c83a 	sub	r3,r3,r4
   28534:	88c7c83a 	sub	r3,r17,r3
   28538:	003fc006 	br	2843c <__umoddi3+0x49c>
   2853c:	00c00204 	movi	r3,8
   28540:	1827883a 	mov	r19,r3
   28544:	003ee906 	br	280ec <__umoddi3+0x14c>
   28548:	00c00604 	movi	r3,24
   2854c:	1827883a 	mov	r19,r3
   28550:	003ee606 	br	280ec <__umoddi3+0x14c>
   28554:	00800604 	movi	r2,24
   28558:	1009883a 	mov	r4,r2
   2855c:	003ea806 	br	28000 <__umoddi3+0x60>
   28560:	00800204 	movi	r2,8
   28564:	1007883a 	mov	r3,r2
   28568:	003efd06 	br	28160 <__umoddi3+0x1c0>
   2856c:	00800604 	movi	r2,24
   28570:	1007883a 	mov	r3,r2
   28574:	003efa06 	br	28160 <__umoddi3+0x1c0>
   28578:	00800204 	movi	r2,8
   2857c:	1009883a 	mov	r4,r2
   28580:	003e9f06 	br	28000 <__umoddi3+0x60>
   28584:	38bf7f2e 	bgeu	r7,r2,28384 <__umoddi3+0x3e4>
   28588:	ad7fff84 	addi	r21,r21,-2
   2858c:	3d0f883a 	add	r7,r7,r20
   28590:	003f7d06 	br	28388 <__umoddi3+0x3e8>
   28594:	193f642e 	bgeu	r3,r4,28328 <__umoddi3+0x388>
   28598:	e73fff84 	addi	fp,fp,-2
   2859c:	1d07883a 	add	r3,r3,r20
   285a0:	003f6206 	br	2832c <__umoddi3+0x38c>
   285a4:	1c07883a 	add	r3,r3,r16
   285a8:	003f0b06 	br	281d8 <__umoddi3+0x238>
   285ac:	9005883a 	mov	r2,r18
   285b0:	a007883a 	mov	r3,r20
   285b4:	003f2106 	br	2823c <__umoddi3+0x29c>
   285b8:	913fda36 	bltu	r18,r4,28524 <__umoddi3+0x584>
   285bc:	202d883a 	mov	r22,r4
   285c0:	0007883a 	mov	r3,zero
   285c4:	003f9d06 	br	2843c <__umoddi3+0x49c>

000285c8 <_fpadd_parts>:
   285c8:	2005883a 	mov	r2,r4
   285cc:	21000017 	ldw	r4,0(r4)
   285d0:	01c00044 	movi	r7,1
   285d4:	3900622e 	bgeu	r7,r4,28760 <_fpadd_parts+0x198>
   285d8:	28c00017 	ldw	r3,0(r5)
   285dc:	38c05f2e 	bgeu	r7,r3,2875c <_fpadd_parts+0x194>
   285e0:	01c00104 	movi	r7,4
   285e4:	21c0c626 	beq	r4,r7,28900 <_fpadd_parts+0x338>
   285e8:	19c05c26 	beq	r3,r7,2875c <_fpadd_parts+0x194>
   285ec:	01c00084 	movi	r7,2
   285f0:	19c06b26 	beq	r3,r7,287a0 <_fpadd_parts+0x1d8>
   285f4:	21c05926 	beq	r4,r7,2875c <_fpadd_parts+0x194>
   285f8:	11c00217 	ldw	r7,8(r2)
   285fc:	2ac00217 	ldw	r11,8(r5)
   28600:	13000317 	ldw	r12,12(r2)
   28604:	13400417 	ldw	r13,16(r2)
   28608:	3ac9c83a 	sub	r4,r7,r11
   2860c:	2a000317 	ldw	r8,12(r5)
   28610:	2a400417 	ldw	r9,16(r5)
   28614:	2015883a 	mov	r10,r4
   28618:	20007516 	blt	r4,zero,287f0 <_fpadd_parts+0x228>
   2861c:	00c00fc4 	movi	r3,63
   28620:	1a805016 	blt	r3,r10,28764 <_fpadd_parts+0x19c>
   28624:	0100870e 	bge	zero,r4,28844 <_fpadd_parts+0x27c>
   28628:	50fff804 	addi	r3,r10,-32
   2862c:	18009916 	blt	r3,zero,28894 <_fpadd_parts+0x2cc>
   28630:	48d6d83a 	srl	r11,r9,r3
   28634:	001d883a 	mov	r14,zero
   28638:	18009e16 	blt	r3,zero,288b4 <_fpadd_parts+0x2ec>
   2863c:	01000044 	movi	r4,1
   28640:	20c6983a 	sll	r3,r4,r3
   28644:	0015883a 	mov	r10,zero
   28648:	513fffc4 	addi	r4,r10,-1
   2864c:	2295403a 	cmpgeu	r10,r4,r10
   28650:	1a87c83a 	sub	r3,r3,r10
   28654:	1a52703a 	and	r9,r3,r9
   28658:	2210703a 	and	r8,r4,r8
   2865c:	4250b03a 	or	r8,r8,r9
   28660:	4010c03a 	cmpne	r8,r8,zero
   28664:	42d0b03a 	or	r8,r8,r11
   28668:	7013883a 	mov	r9,r14
   2866c:	11000117 	ldw	r4,4(r2)
   28670:	28800117 	ldw	r2,4(r5)
   28674:	20804126 	beq	r4,r2,2877c <_fpadd_parts+0x1b4>
   28678:	20006326 	beq	r4,zero,28808 <_fpadd_parts+0x240>
   2867c:	4305c83a 	sub	r2,r8,r12
   28680:	4091803a 	cmpltu	r8,r8,r2
   28684:	4b47c83a 	sub	r3,r9,r13
   28688:	1a07c83a 	sub	r3,r3,r8
   2868c:	18006316 	blt	r3,zero,2881c <_fpadd_parts+0x254>
   28690:	30000115 	stw	zero,4(r6)
   28694:	31c00215 	stw	r7,8(r6)
   28698:	30800315 	stw	r2,12(r6)
   2869c:	30c00415 	stw	r3,16(r6)
   286a0:	11ffffc4 	addi	r7,r2,-1
   286a4:	388b403a 	cmpgeu	r5,r7,r2
   286a8:	194bc83a 	sub	r5,r3,r5
   286ac:	01040034 	movhi	r4,4096
   286b0:	213fffc4 	addi	r4,r4,-1
   286b4:	21401736 	bltu	r4,r5,28714 <_fpadd_parts+0x14c>
   286b8:	29008226 	beq	r5,r4,288c4 <_fpadd_parts+0x2fc>
   286bc:	31400217 	ldw	r5,8(r6)
   286c0:	02840034 	movhi	r10,4096
   286c4:	52bfffc4 	addi	r10,r10,-1
   286c8:	033fff84 	movi	r12,-2
   286cc:	297fffc4 	addi	r5,r5,-1
   286d0:	00000106 	br	286d8 <_fpadd_parts+0x110>
   286d4:	3a804a26 	beq	r7,r10,28800 <_fpadd_parts+0x238>
   286d8:	1089883a 	add	r4,r2,r2
   286dc:	2091803a 	cmpltu	r8,r4,r2
   286e0:	18c7883a 	add	r3,r3,r3
   286e4:	227fffc4 	addi	r9,r4,-1
   286e8:	40d1883a 	add	r8,r8,r3
   286ec:	490f403a 	cmpgeu	r7,r9,r4
   286f0:	41cfc83a 	sub	r7,r8,r7
   286f4:	2817883a 	mov	r11,r5
   286f8:	2005883a 	mov	r2,r4
   286fc:	4007883a 	mov	r3,r8
   28700:	297fffc4 	addi	r5,r5,-1
   28704:	51fff32e 	bgeu	r10,r7,286d4 <_fpadd_parts+0x10c>
   28708:	31000315 	stw	r4,12(r6)
   2870c:	32000415 	stw	r8,16(r6)
   28710:	32c00215 	stw	r11,8(r6)
   28714:	010000c4 	movi	r4,3
   28718:	31000015 	stw	r4,0(r6)
   2871c:	01080034 	movhi	r4,8192
   28720:	213fffc4 	addi	r4,r4,-1
   28724:	20c00b2e 	bgeu	r4,r3,28754 <_fpadd_parts+0x18c>
   28728:	180e97fa 	slli	r7,r3,31
   2872c:	1008d07a 	srli	r4,r2,1
   28730:	31400217 	ldw	r5,8(r6)
   28734:	1806d07a 	srli	r3,r3,1
   28738:	1080004c 	andi	r2,r2,1
   2873c:	3908b03a 	or	r4,r7,r4
   28740:	1108b03a 	or	r4,r2,r4
   28744:	29400044 	addi	r5,r5,1
   28748:	31000315 	stw	r4,12(r6)
   2874c:	30c00415 	stw	r3,16(r6)
   28750:	31400215 	stw	r5,8(r6)
   28754:	3005883a 	mov	r2,r6
   28758:	f800283a 	ret
   2875c:	2805883a 	mov	r2,r5
   28760:	f800283a 	ret
   28764:	59c01e0e 	bge	r11,r7,287e0 <_fpadd_parts+0x218>
   28768:	11000117 	ldw	r4,4(r2)
   2876c:	28800117 	ldw	r2,4(r5)
   28770:	0011883a 	mov	r8,zero
   28774:	0013883a 	mov	r9,zero
   28778:	20bfbf1e 	bne	r4,r2,28678 <_fpadd_parts+0xb0>
   2877c:	4305883a 	add	r2,r8,r12
   28780:	1207803a 	cmpltu	r3,r2,r8
   28784:	4b53883a 	add	r9,r9,r13
   28788:	1a47883a 	add	r3,r3,r9
   2878c:	31000115 	stw	r4,4(r6)
   28790:	31c00215 	stw	r7,8(r6)
   28794:	30800315 	stw	r2,12(r6)
   28798:	30c00415 	stw	r3,16(r6)
   2879c:	003fdd06 	br	28714 <_fpadd_parts+0x14c>
   287a0:	20ffef1e 	bne	r4,r3,28760 <_fpadd_parts+0x198>
   287a4:	31000015 	stw	r4,0(r6)
   287a8:	10c00117 	ldw	r3,4(r2)
   287ac:	30c00115 	stw	r3,4(r6)
   287b0:	10c00217 	ldw	r3,8(r2)
   287b4:	11000117 	ldw	r4,4(r2)
   287b8:	29400117 	ldw	r5,4(r5)
   287bc:	30c00215 	stw	r3,8(r6)
   287c0:	10c00317 	ldw	r3,12(r2)
   287c4:	2908703a 	and	r4,r5,r4
   287c8:	30c00315 	stw	r3,12(r6)
   287cc:	10c00417 	ldw	r3,16(r2)
   287d0:	31000115 	stw	r4,4(r6)
   287d4:	3005883a 	mov	r2,r6
   287d8:	30c00415 	stw	r3,16(r6)
   287dc:	f800283a 	ret
   287e0:	580f883a 	mov	r7,r11
   287e4:	0019883a 	mov	r12,zero
   287e8:	001b883a 	mov	r13,zero
   287ec:	003f9f06 	br	2866c <_fpadd_parts+0xa4>
   287f0:	0115c83a 	sub	r10,zero,r4
   287f4:	00c00fc4 	movi	r3,63
   287f8:	1abfda16 	blt	r3,r10,28764 <_fpadd_parts+0x19c>
   287fc:	003f8906 	br	28624 <_fpadd_parts+0x5c>
   28800:	627fb52e 	bgeu	r12,r9,286d8 <_fpadd_parts+0x110>
   28804:	003fc006 	br	28708 <_fpadd_parts+0x140>
   28808:	6205c83a 	sub	r2,r12,r8
   2880c:	6099803a 	cmpltu	r12,r12,r2
   28810:	6a47c83a 	sub	r3,r13,r9
   28814:	1b07c83a 	sub	r3,r3,r12
   28818:	183f9d0e 	bge	r3,zero,28690 <_fpadd_parts+0xc8>
   2881c:	0085c83a 	sub	r2,zero,r2
   28820:	1008c03a 	cmpne	r4,r2,zero
   28824:	00c7c83a 	sub	r3,zero,r3
   28828:	1907c83a 	sub	r3,r3,r4
   2882c:	01000044 	movi	r4,1
   28830:	31000115 	stw	r4,4(r6)
   28834:	31c00215 	stw	r7,8(r6)
   28838:	30800315 	stw	r2,12(r6)
   2883c:	30c00415 	stw	r3,16(r6)
   28840:	003f9706 	br	286a0 <_fpadd_parts+0xd8>
   28844:	203f8926 	beq	r4,zero,2866c <_fpadd_parts+0xa4>
   28848:	50fff804 	addi	r3,r10,-32
   2884c:	3a8f883a 	add	r7,r7,r10
   28850:	18002316 	blt	r3,zero,288e0 <_fpadd_parts+0x318>
   28854:	68d6d83a 	srl	r11,r13,r3
   28858:	001d883a 	mov	r14,zero
   2885c:	18001c16 	blt	r3,zero,288d0 <_fpadd_parts+0x308>
   28860:	01000044 	movi	r4,1
   28864:	20c6983a 	sll	r3,r4,r3
   28868:	0015883a 	mov	r10,zero
   2886c:	513fffc4 	addi	r4,r10,-1
   28870:	2295403a 	cmpgeu	r10,r4,r10
   28874:	1a87c83a 	sub	r3,r3,r10
   28878:	1b5a703a 	and	r13,r3,r13
   2887c:	2318703a 	and	r12,r4,r12
   28880:	6358b03a 	or	r12,r12,r13
   28884:	6018c03a 	cmpne	r12,r12,zero
   28888:	62d8b03a 	or	r12,r12,r11
   2888c:	701b883a 	mov	r13,r14
   28890:	003f7606 	br	2866c <_fpadd_parts+0xa4>
   28894:	4808907a 	slli	r4,r9,1
   28898:	02c007c4 	movi	r11,31
   2889c:	5a97c83a 	sub	r11,r11,r10
   288a0:	22c8983a 	sll	r4,r4,r11
   288a4:	4296d83a 	srl	r11,r8,r10
   288a8:	4a9cd83a 	srl	r14,r9,r10
   288ac:	22d6b03a 	or	r11,r4,r11
   288b0:	003f6106 	br	28638 <_fpadd_parts+0x70>
   288b4:	00c00044 	movi	r3,1
   288b8:	1a94983a 	sll	r10,r3,r10
   288bc:	0007883a 	mov	r3,zero
   288c0:	003f6106 	br	28648 <_fpadd_parts+0x80>
   288c4:	013fff84 	movi	r4,-2
   288c8:	21ff7c2e 	bgeu	r4,r7,286bc <_fpadd_parts+0xf4>
   288cc:	003f9106 	br	28714 <_fpadd_parts+0x14c>
   288d0:	00c00044 	movi	r3,1
   288d4:	1a94983a 	sll	r10,r3,r10
   288d8:	0007883a 	mov	r3,zero
   288dc:	003fe306 	br	2886c <_fpadd_parts+0x2a4>
   288e0:	6816907a 	slli	r11,r13,1
   288e4:	010007c4 	movi	r4,31
   288e8:	2289c83a 	sub	r4,r4,r10
   288ec:	5908983a 	sll	r4,r11,r4
   288f0:	6296d83a 	srl	r11,r12,r10
   288f4:	6a9cd83a 	srl	r14,r13,r10
   288f8:	22d6b03a 	or	r11,r4,r11
   288fc:	003fd706 	br	2885c <_fpadd_parts+0x294>
   28900:	193f971e 	bne	r3,r4,28760 <_fpadd_parts+0x198>
   28904:	11000117 	ldw	r4,4(r2)
   28908:	28c00117 	ldw	r3,4(r5)
   2890c:	20ff9426 	beq	r4,r3,28760 <_fpadd_parts+0x198>
   28910:	008000f4 	movhi	r2,3
   28914:	10b25c04 	addi	r2,r2,-13968
   28918:	f800283a 	ret

0002891c <__adddf3>:
   2891c:	deffec04 	addi	sp,sp,-80
   28920:	d9001115 	stw	r4,68(sp)
   28924:	d9401215 	stw	r5,72(sp)
   28928:	d9001104 	addi	r4,sp,68
   2892c:	d9400a04 	addi	r5,sp,40
   28930:	dfc01315 	stw	ra,76(sp)
   28934:	d9c01015 	stw	r7,64(sp)
   28938:	d9800f15 	stw	r6,60(sp)
   2893c:	00298400 	call	29840 <__unpack_d>
   28940:	d9000f04 	addi	r4,sp,60
   28944:	d9400504 	addi	r5,sp,20
   28948:	00298400 	call	29840 <__unpack_d>
   2894c:	d9000a04 	addi	r4,sp,40
   28950:	d9400504 	addi	r5,sp,20
   28954:	d80d883a 	mov	r6,sp
   28958:	00285c80 	call	285c8 <_fpadd_parts>
   2895c:	1009883a 	mov	r4,r2
   28960:	002961c0 	call	2961c <__pack_d>
   28964:	dfc01317 	ldw	ra,76(sp)
   28968:	dec01404 	addi	sp,sp,80
   2896c:	f800283a 	ret

00028970 <__subdf3>:
   28970:	deffec04 	addi	sp,sp,-80
   28974:	d9001115 	stw	r4,68(sp)
   28978:	d9401215 	stw	r5,72(sp)
   2897c:	d9001104 	addi	r4,sp,68
   28980:	d9400a04 	addi	r5,sp,40
   28984:	dfc01315 	stw	ra,76(sp)
   28988:	d9c01015 	stw	r7,64(sp)
   2898c:	d9800f15 	stw	r6,60(sp)
   28990:	00298400 	call	29840 <__unpack_d>
   28994:	d9000f04 	addi	r4,sp,60
   28998:	d9400504 	addi	r5,sp,20
   2899c:	00298400 	call	29840 <__unpack_d>
   289a0:	d8800617 	ldw	r2,24(sp)
   289a4:	d9000a04 	addi	r4,sp,40
   289a8:	d9400504 	addi	r5,sp,20
   289ac:	d80d883a 	mov	r6,sp
   289b0:	1080005c 	xori	r2,r2,1
   289b4:	d8800615 	stw	r2,24(sp)
   289b8:	00285c80 	call	285c8 <_fpadd_parts>
   289bc:	1009883a 	mov	r4,r2
   289c0:	002961c0 	call	2961c <__pack_d>
   289c4:	dfc01317 	ldw	ra,76(sp)
   289c8:	dec01404 	addi	sp,sp,80
   289cc:	f800283a 	ret

000289d0 <__muldf3>:
   289d0:	deffe404 	addi	sp,sp,-112
   289d4:	d9001115 	stw	r4,68(sp)
   289d8:	d9401215 	stw	r5,72(sp)
   289dc:	d9001104 	addi	r4,sp,68
   289e0:	d9400a04 	addi	r5,sp,40
   289e4:	dfc01b15 	stw	ra,108(sp)
   289e8:	d9800f15 	stw	r6,60(sp)
   289ec:	d9c01015 	stw	r7,64(sp)
   289f0:	ddc01a15 	stw	r23,104(sp)
   289f4:	dd801915 	stw	r22,100(sp)
   289f8:	dd401815 	stw	r21,96(sp)
   289fc:	dd001715 	stw	r20,92(sp)
   28a00:	dcc01615 	stw	r19,88(sp)
   28a04:	dc801515 	stw	r18,84(sp)
   28a08:	dc401415 	stw	r17,80(sp)
   28a0c:	dc001315 	stw	r16,76(sp)
   28a10:	00298400 	call	29840 <__unpack_d>
   28a14:	d9000f04 	addi	r4,sp,60
   28a18:	d9400504 	addi	r5,sp,20
   28a1c:	00298400 	call	29840 <__unpack_d>
   28a20:	d8c00a17 	ldw	r3,40(sp)
   28a24:	00800044 	movi	r2,1
   28a28:	10c01136 	bltu	r2,r3,28a70 <__muldf3+0xa0>
   28a2c:	d8c00b17 	ldw	r3,44(sp)
   28a30:	d8800617 	ldw	r2,24(sp)
   28a34:	d9000a04 	addi	r4,sp,40
   28a38:	1884c03a 	cmpne	r2,r3,r2
   28a3c:	d8800b15 	stw	r2,44(sp)
   28a40:	002961c0 	call	2961c <__pack_d>
   28a44:	dfc01b17 	ldw	ra,108(sp)
   28a48:	ddc01a17 	ldw	r23,104(sp)
   28a4c:	dd801917 	ldw	r22,100(sp)
   28a50:	dd401817 	ldw	r21,96(sp)
   28a54:	dd001717 	ldw	r20,92(sp)
   28a58:	dcc01617 	ldw	r19,88(sp)
   28a5c:	dc801517 	ldw	r18,84(sp)
   28a60:	dc401417 	ldw	r17,80(sp)
   28a64:	dc001317 	ldw	r16,76(sp)
   28a68:	dec01c04 	addi	sp,sp,112
   28a6c:	f800283a 	ret
   28a70:	d9000517 	ldw	r4,20(sp)
   28a74:	11000636 	bltu	r2,r4,28a90 <__muldf3+0xc0>
   28a78:	d8800617 	ldw	r2,24(sp)
   28a7c:	d8c00b17 	ldw	r3,44(sp)
   28a80:	d9000504 	addi	r4,sp,20
   28a84:	1884c03a 	cmpne	r2,r3,r2
   28a88:	d8800615 	stw	r2,24(sp)
   28a8c:	003fec06 	br	28a40 <__muldf3+0x70>
   28a90:	00800104 	movi	r2,4
   28a94:	1880051e 	bne	r3,r2,28aac <__muldf3+0xdc>
   28a98:	00800084 	movi	r2,2
   28a9c:	20bfe31e 	bne	r4,r2,28a2c <__muldf3+0x5c>
   28aa0:	010000f4 	movhi	r4,3
   28aa4:	21325c04 	addi	r4,r4,-13968
   28aa8:	003fe506 	br	28a40 <__muldf3+0x70>
   28aac:	2080031e 	bne	r4,r2,28abc <__muldf3+0xec>
   28ab0:	00800084 	movi	r2,2
   28ab4:	18bffa26 	beq	r3,r2,28aa0 <__muldf3+0xd0>
   28ab8:	003fef06 	br	28a78 <__muldf3+0xa8>
   28abc:	00800084 	movi	r2,2
   28ac0:	18bfda26 	beq	r3,r2,28a2c <__muldf3+0x5c>
   28ac4:	20bfec26 	beq	r4,r2,28a78 <__muldf3+0xa8>
   28ac8:	dc000d17 	ldw	r16,52(sp)
   28acc:	dd000817 	ldw	r20,32(sp)
   28ad0:	dc800917 	ldw	r18,36(sp)
   28ad4:	8009883a 	mov	r4,r16
   28ad8:	000b883a 	mov	r5,zero
   28adc:	a00d883a 	mov	r6,r20
   28ae0:	000f883a 	mov	r7,zero
   28ae4:	00294600 	call	29460 <__muldi3>
   28ae8:	dc400e17 	ldw	r17,56(sp)
   28aec:	9009883a 	mov	r4,r18
   28af0:	800d883a 	mov	r6,r16
   28af4:	000b883a 	mov	r5,zero
   28af8:	000f883a 	mov	r7,zero
   28afc:	102f883a 	mov	r23,r2
   28b00:	1827883a 	mov	r19,r3
   28b04:	00294600 	call	29460 <__muldi3>
   28b08:	900d883a 	mov	r6,r18
   28b0c:	8809883a 	mov	r4,r17
   28b10:	000b883a 	mov	r5,zero
   28b14:	000f883a 	mov	r7,zero
   28b18:	102b883a 	mov	r21,r2
   28b1c:	1821883a 	mov	r16,r3
   28b20:	00294600 	call	29460 <__muldi3>
   28b24:	8809883a 	mov	r4,r17
   28b28:	000b883a 	mov	r5,zero
   28b2c:	a00d883a 	mov	r6,r20
   28b30:	000f883a 	mov	r7,zero
   28b34:	102d883a 	mov	r22,r2
   28b38:	1825883a 	mov	r18,r3
   28b3c:	00294600 	call	29460 <__muldi3>
   28b40:	154b883a 	add	r5,r2,r21
   28b44:	2889803a 	cmpltu	r4,r5,r2
   28b48:	1c07883a 	add	r3,r3,r16
   28b4c:	20c9883a 	add	r4,r4,r3
   28b50:	24004b36 	bltu	r4,r16,28c80 <__muldf3+0x2b0>
   28b54:	8100011e 	bne	r16,r4,28b5c <__muldf3+0x18c>
   28b58:	2d404936 	bltu	r5,r21,28c80 <__muldf3+0x2b0>
   28b5c:	0011883a 	mov	r8,zero
   28b60:	0007883a 	mov	r3,zero
   28b64:	2ccb883a 	add	r5,r5,r19
   28b68:	b80d883a 	mov	r6,r23
   28b6c:	2cc0012e 	bgeu	r5,r19,28b74 <__muldf3+0x1a4>
   28b70:	02000044 	movi	r8,1
   28b74:	258f883a 	add	r7,r4,r22
   28b78:	3909803a 	cmpltu	r4,r7,r4
   28b7c:	da400c17 	ldw	r9,48(sp)
   28b80:	2489883a 	add	r4,r4,r18
   28b84:	d8800717 	ldw	r2,28(sp)
   28b88:	20c9883a 	add	r4,r4,r3
   28b8c:	da800b17 	ldw	r10,44(sp)
   28b90:	d8c00617 	ldw	r3,24(sp)
   28b94:	3a11883a 	add	r8,r7,r8
   28b98:	4885883a 	add	r2,r9,r2
   28b9c:	50c6c03a 	cmpne	r3,r10,r3
   28ba0:	41cf803a 	cmpltu	r7,r8,r7
   28ba4:	12400104 	addi	r9,r2,4
   28ba8:	d8c00115 	stw	r3,4(sp)
   28bac:	3909883a 	add	r4,r7,r4
   28bb0:	da400215 	stw	r9,8(sp)
   28bb4:	03480034 	movhi	r13,8192
   28bb8:	6b7fffc4 	addi	r13,r13,-1
   28bbc:	4007883a 	mov	r3,r8
   28bc0:	6900102e 	bgeu	r13,r4,28c04 <__muldf3+0x234>
   28bc4:	10800144 	addi	r2,r2,5
   28bc8:	180ed07a 	srli	r7,r3,1
   28bcc:	18c0004c 	andi	r3,r3,1
   28bd0:	201097fa 	slli	r8,r4,31
   28bd4:	281697fa 	slli	r11,r5,31
   28bd8:	2008d07a 	srli	r4,r4,1
   28bdc:	3014d07a 	srli	r10,r6,1
   28be0:	2812d07a 	srli	r9,r5,1
   28be4:	1019883a 	mov	r12,r2
   28be8:	18000226 	beq	r3,zero,28bf4 <__muldf3+0x224>
   28bec:	5a8cb03a 	or	r6,r11,r10
   28bf0:	49600034 	orhi	r5,r9,32768
   28bf4:	41c6b03a 	or	r3,r8,r7
   28bf8:	10800044 	addi	r2,r2,1
   28bfc:	693ff236 	bltu	r13,r4,28bc8 <__muldf3+0x1f8>
   28c00:	db000215 	stw	r12,8(sp)
   28c04:	03440034 	movhi	r13,4096
   28c08:	6b7fffc4 	addi	r13,r13,-1
   28c0c:	69001336 	bltu	r13,r4,28c5c <__muldf3+0x28c>
   28c10:	d8800217 	ldw	r2,8(sp)
   28c14:	10bfffc4 	addi	r2,r2,-1
   28c18:	18d3883a 	add	r9,r3,r3
   28c1c:	48c7803a 	cmpltu	r3,r9,r3
   28c20:	2109883a 	add	r4,r4,r4
   28c24:	190f883a 	add	r7,r3,r4
   28c28:	3191883a 	add	r8,r6,r6
   28c2c:	4197803a 	cmpltu	r11,r8,r6
   28c30:	2955883a 	add	r10,r5,r5
   28c34:	1019883a 	mov	r12,r2
   28c38:	4807883a 	mov	r3,r9
   28c3c:	3809883a 	mov	r4,r7
   28c40:	2800010e 	bge	r5,zero,28c48 <__muldf3+0x278>
   28c44:	48c00054 	ori	r3,r9,1
   28c48:	400d883a 	mov	r6,r8
   28c4c:	5a8b883a 	add	r5,r11,r10
   28c50:	10bfffc4 	addi	r2,r2,-1
   28c54:	69fff02e 	bgeu	r13,r7,28c18 <__muldf3+0x248>
   28c58:	db000215 	stw	r12,8(sp)
   28c5c:	18803fcc 	andi	r2,r3,255
   28c60:	01c02004 	movi	r7,128
   28c64:	11c00926 	beq	r2,r7,28c8c <__muldf3+0x2bc>
   28c68:	008000c4 	movi	r2,3
   28c6c:	d9000415 	stw	r4,16(sp)
   28c70:	d8c00315 	stw	r3,12(sp)
   28c74:	d8800015 	stw	r2,0(sp)
   28c78:	d809883a 	mov	r4,sp
   28c7c:	003f7006 	br	28a40 <__muldf3+0x70>
   28c80:	0011883a 	mov	r8,zero
   28c84:	00c00044 	movi	r3,1
   28c88:	003fb606 	br	28b64 <__muldf3+0x194>
   28c8c:	19c0400c 	andi	r7,r3,256
   28c90:	383ff51e 	bne	r7,zero,28c68 <__muldf3+0x298>
   28c94:	314ab03a 	or	r5,r6,r5
   28c98:	283ff326 	beq	r5,zero,28c68 <__muldf3+0x298>
   28c9c:	1885883a 	add	r2,r3,r2
   28ca0:	10cb803a 	cmpltu	r5,r2,r3
   28ca4:	00ffc004 	movi	r3,-256
   28ca8:	10c6703a 	and	r3,r2,r3
   28cac:	2909883a 	add	r4,r5,r4
   28cb0:	003fed06 	br	28c68 <__muldf3+0x298>

00028cb4 <__divdf3>:
   28cb4:	defff104 	addi	sp,sp,-60
   28cb8:	d9000c15 	stw	r4,48(sp)
   28cbc:	d9400d15 	stw	r5,52(sp)
   28cc0:	d9000c04 	addi	r4,sp,48
   28cc4:	d9400504 	addi	r5,sp,20
   28cc8:	dfc00e15 	stw	ra,56(sp)
   28ccc:	d9800a15 	stw	r6,40(sp)
   28cd0:	d9c00b15 	stw	r7,44(sp)
   28cd4:	00298400 	call	29840 <__unpack_d>
   28cd8:	d9000a04 	addi	r4,sp,40
   28cdc:	d80b883a 	mov	r5,sp
   28ce0:	00298400 	call	29840 <__unpack_d>
   28ce4:	d8c00517 	ldw	r3,20(sp)
   28ce8:	00800044 	movi	r2,1
   28cec:	10c00536 	bltu	r2,r3,28d04 <__divdf3+0x50>
   28cf0:	d9000504 	addi	r4,sp,20
   28cf4:	002961c0 	call	2961c <__pack_d>
   28cf8:	dfc00e17 	ldw	ra,56(sp)
   28cfc:	dec00f04 	addi	sp,sp,60
   28d00:	f800283a 	ret
   28d04:	d9000017 	ldw	r4,0(sp)
   28d08:	11000536 	bltu	r2,r4,28d20 <__divdf3+0x6c>
   28d0c:	d809883a 	mov	r4,sp
   28d10:	002961c0 	call	2961c <__pack_d>
   28d14:	dfc00e17 	ldw	ra,56(sp)
   28d18:	dec00f04 	addi	sp,sp,60
   28d1c:	f800283a 	ret
   28d20:	d9800617 	ldw	r6,24(sp)
   28d24:	d9400117 	ldw	r5,4(sp)
   28d28:	00800104 	movi	r2,4
   28d2c:	314af03a 	xor	r5,r6,r5
   28d30:	d9400615 	stw	r5,24(sp)
   28d34:	18800226 	beq	r3,r2,28d40 <__divdf3+0x8c>
   28d38:	01400084 	movi	r5,2
   28d3c:	1940041e 	bne	r3,r5,28d50 <__divdf3+0x9c>
   28d40:	193feb1e 	bne	r3,r4,28cf0 <__divdf3+0x3c>
   28d44:	010000f4 	movhi	r4,3
   28d48:	21325c04 	addi	r4,r4,-13968
   28d4c:	003fe906 	br	28cf4 <__divdf3+0x40>
   28d50:	20803326 	beq	r4,r2,28e20 <__divdf3+0x16c>
   28d54:	21403726 	beq	r4,r5,28e34 <__divdf3+0x180>
   28d58:	d8800217 	ldw	r2,8(sp)
   28d5c:	d9000717 	ldw	r4,28(sp)
   28d60:	d8c00917 	ldw	r3,36(sp)
   28d64:	da000417 	ldw	r8,16(sp)
   28d68:	2089c83a 	sub	r4,r4,r2
   28d6c:	d9000715 	stw	r4,28(sp)
   28d70:	d8800817 	ldw	r2,32(sp)
   28d74:	dbc00317 	ldw	r15,12(sp)
   28d78:	1a000236 	bltu	r3,r8,28d84 <__divdf3+0xd0>
   28d7c:	40c0081e 	bne	r8,r3,28da0 <__divdf3+0xec>
   28d80:	13c0072e 	bgeu	r2,r15,28da0 <__divdf3+0xec>
   28d84:	108b883a 	add	r5,r2,r2
   28d88:	288d803a 	cmpltu	r6,r5,r2
   28d8c:	18c7883a 	add	r3,r3,r3
   28d90:	213fffc4 	addi	r4,r4,-1
   28d94:	2805883a 	mov	r2,r5
   28d98:	30c7883a 	add	r3,r6,r3
   28d9c:	d9000715 	stw	r4,28(sp)
   28da0:	01400f44 	movi	r5,61
   28da4:	000f883a 	mov	r7,zero
   28da8:	01040034 	movhi	r4,4096
   28dac:	0019883a 	mov	r12,zero
   28db0:	001b883a 	mov	r13,zero
   28db4:	201697fa 	slli	r11,r4,31
   28db8:	3814d07a 	srli	r10,r7,1
   28dbc:	297fffc4 	addi	r5,r5,-1
   28dc0:	1a000936 	bltu	r3,r8,28de8 <__divdf3+0x134>
   28dc4:	13cdc83a 	sub	r6,r2,r15
   28dc8:	1193803a 	cmpltu	r9,r2,r6
   28dcc:	1a1dc83a 	sub	r14,r3,r8
   28dd0:	40c0011e 	bne	r8,r3,28dd8 <__divdf3+0x124>
   28dd4:	13c00436 	bltu	r2,r15,28de8 <__divdf3+0x134>
   28dd8:	3005883a 	mov	r2,r6
   28ddc:	7247c83a 	sub	r3,r14,r9
   28de0:	61d8b03a 	or	r12,r12,r7
   28de4:	691ab03a 	or	r13,r13,r4
   28de8:	108d883a 	add	r6,r2,r2
   28dec:	3093803a 	cmpltu	r9,r6,r2
   28df0:	18c7883a 	add	r3,r3,r3
   28df4:	5a8eb03a 	or	r7,r11,r10
   28df8:	2008d07a 	srli	r4,r4,1
   28dfc:	3005883a 	mov	r2,r6
   28e00:	48c7883a 	add	r3,r9,r3
   28e04:	283feb1e 	bne	r5,zero,28db4 <__divdf3+0x100>
   28e08:	61003fcc 	andi	r4,r12,255
   28e0c:	01402004 	movi	r5,128
   28e10:	21400b26 	beq	r4,r5,28e40 <__divdf3+0x18c>
   28e14:	db000815 	stw	r12,32(sp)
   28e18:	db400915 	stw	r13,36(sp)
   28e1c:	003fb406 	br	28cf0 <__divdf3+0x3c>
   28e20:	d8000815 	stw	zero,32(sp)
   28e24:	d8000915 	stw	zero,36(sp)
   28e28:	d8000715 	stw	zero,28(sp)
   28e2c:	d9000504 	addi	r4,sp,20
   28e30:	003fb006 	br	28cf4 <__divdf3+0x40>
   28e34:	d8800515 	stw	r2,20(sp)
   28e38:	d9000504 	addi	r4,sp,20
   28e3c:	003fad06 	br	28cf4 <__divdf3+0x40>
   28e40:	6140400c 	andi	r5,r12,256
   28e44:	283ff31e 	bne	r5,zero,28e14 <__divdf3+0x160>
   28e48:	30c4b03a 	or	r2,r6,r3
   28e4c:	103ff126 	beq	r2,zero,28e14 <__divdf3+0x160>
   28e50:	6109883a 	add	r4,r12,r4
   28e54:	2305803a 	cmpltu	r2,r4,r12
   28e58:	033fc004 	movi	r12,-256
   28e5c:	2318703a 	and	r12,r4,r12
   28e60:	135b883a 	add	r13,r2,r13
   28e64:	003feb06 	br	28e14 <__divdf3+0x160>

00028e68 <__eqdf2>:
   28e68:	defff104 	addi	sp,sp,-60
   28e6c:	d9000c15 	stw	r4,48(sp)
   28e70:	d9400d15 	stw	r5,52(sp)
   28e74:	d9000c04 	addi	r4,sp,48
   28e78:	d9400504 	addi	r5,sp,20
   28e7c:	dfc00e15 	stw	ra,56(sp)
   28e80:	d9800a15 	stw	r6,40(sp)
   28e84:	d9c00b15 	stw	r7,44(sp)
   28e88:	00298400 	call	29840 <__unpack_d>
   28e8c:	d9000a04 	addi	r4,sp,40
   28e90:	d80b883a 	mov	r5,sp
   28e94:	00298400 	call	29840 <__unpack_d>
   28e98:	d8c00517 	ldw	r3,20(sp)
   28e9c:	00800044 	movi	r2,1
   28ea0:	10c0052e 	bgeu	r2,r3,28eb8 <__eqdf2+0x50>
   28ea4:	d8c00017 	ldw	r3,0(sp)
   28ea8:	10c0032e 	bgeu	r2,r3,28eb8 <__eqdf2+0x50>
   28eac:	d9000504 	addi	r4,sp,20
   28eb0:	d80b883a 	mov	r5,sp
   28eb4:	00299440 	call	29944 <__fpcmp_parts_d>
   28eb8:	dfc00e17 	ldw	ra,56(sp)
   28ebc:	dec00f04 	addi	sp,sp,60
   28ec0:	f800283a 	ret

00028ec4 <__nedf2>:
   28ec4:	defff104 	addi	sp,sp,-60
   28ec8:	d9000c15 	stw	r4,48(sp)
   28ecc:	d9400d15 	stw	r5,52(sp)
   28ed0:	d9000c04 	addi	r4,sp,48
   28ed4:	d9400504 	addi	r5,sp,20
   28ed8:	dfc00e15 	stw	ra,56(sp)
   28edc:	d9800a15 	stw	r6,40(sp)
   28ee0:	d9c00b15 	stw	r7,44(sp)
   28ee4:	00298400 	call	29840 <__unpack_d>
   28ee8:	d9000a04 	addi	r4,sp,40
   28eec:	d80b883a 	mov	r5,sp
   28ef0:	00298400 	call	29840 <__unpack_d>
   28ef4:	d8c00517 	ldw	r3,20(sp)
   28ef8:	00800044 	movi	r2,1
   28efc:	10c0052e 	bgeu	r2,r3,28f14 <__nedf2+0x50>
   28f00:	d8c00017 	ldw	r3,0(sp)
   28f04:	10c0032e 	bgeu	r2,r3,28f14 <__nedf2+0x50>
   28f08:	d9000504 	addi	r4,sp,20
   28f0c:	d80b883a 	mov	r5,sp
   28f10:	00299440 	call	29944 <__fpcmp_parts_d>
   28f14:	dfc00e17 	ldw	ra,56(sp)
   28f18:	dec00f04 	addi	sp,sp,60
   28f1c:	f800283a 	ret

00028f20 <__gtdf2>:
   28f20:	defff104 	addi	sp,sp,-60
   28f24:	d9000c15 	stw	r4,48(sp)
   28f28:	d9400d15 	stw	r5,52(sp)
   28f2c:	d9000c04 	addi	r4,sp,48
   28f30:	d9400504 	addi	r5,sp,20
   28f34:	dfc00e15 	stw	ra,56(sp)
   28f38:	d9800a15 	stw	r6,40(sp)
   28f3c:	d9c00b15 	stw	r7,44(sp)
   28f40:	00298400 	call	29840 <__unpack_d>
   28f44:	d9000a04 	addi	r4,sp,40
   28f48:	d80b883a 	mov	r5,sp
   28f4c:	00298400 	call	29840 <__unpack_d>
   28f50:	d8c00517 	ldw	r3,20(sp)
   28f54:	00800044 	movi	r2,1
   28f58:	10c0082e 	bgeu	r2,r3,28f7c <__gtdf2+0x5c>
   28f5c:	d8c00017 	ldw	r3,0(sp)
   28f60:	10c0062e 	bgeu	r2,r3,28f7c <__gtdf2+0x5c>
   28f64:	d9000504 	addi	r4,sp,20
   28f68:	d80b883a 	mov	r5,sp
   28f6c:	00299440 	call	29944 <__fpcmp_parts_d>
   28f70:	dfc00e17 	ldw	ra,56(sp)
   28f74:	dec00f04 	addi	sp,sp,60
   28f78:	f800283a 	ret
   28f7c:	00bfffc4 	movi	r2,-1
   28f80:	003ffb06 	br	28f70 <__gtdf2+0x50>

00028f84 <__gedf2>:
   28f84:	defff104 	addi	sp,sp,-60
   28f88:	d9000c15 	stw	r4,48(sp)
   28f8c:	d9400d15 	stw	r5,52(sp)
   28f90:	d9000c04 	addi	r4,sp,48
   28f94:	d9400504 	addi	r5,sp,20
   28f98:	dfc00e15 	stw	ra,56(sp)
   28f9c:	d9800a15 	stw	r6,40(sp)
   28fa0:	d9c00b15 	stw	r7,44(sp)
   28fa4:	00298400 	call	29840 <__unpack_d>
   28fa8:	d9000a04 	addi	r4,sp,40
   28fac:	d80b883a 	mov	r5,sp
   28fb0:	00298400 	call	29840 <__unpack_d>
   28fb4:	d8c00517 	ldw	r3,20(sp)
   28fb8:	00800044 	movi	r2,1
   28fbc:	10c0082e 	bgeu	r2,r3,28fe0 <__gedf2+0x5c>
   28fc0:	d8c00017 	ldw	r3,0(sp)
   28fc4:	10c0062e 	bgeu	r2,r3,28fe0 <__gedf2+0x5c>
   28fc8:	d9000504 	addi	r4,sp,20
   28fcc:	d80b883a 	mov	r5,sp
   28fd0:	00299440 	call	29944 <__fpcmp_parts_d>
   28fd4:	dfc00e17 	ldw	ra,56(sp)
   28fd8:	dec00f04 	addi	sp,sp,60
   28fdc:	f800283a 	ret
   28fe0:	00bfffc4 	movi	r2,-1
   28fe4:	003ffb06 	br	28fd4 <__gedf2+0x50>

00028fe8 <__ltdf2>:
   28fe8:	defff104 	addi	sp,sp,-60
   28fec:	d9000c15 	stw	r4,48(sp)
   28ff0:	d9400d15 	stw	r5,52(sp)
   28ff4:	d9000c04 	addi	r4,sp,48
   28ff8:	d9400504 	addi	r5,sp,20
   28ffc:	dfc00e15 	stw	ra,56(sp)
   29000:	d9800a15 	stw	r6,40(sp)
   29004:	d9c00b15 	stw	r7,44(sp)
   29008:	00298400 	call	29840 <__unpack_d>
   2900c:	d9000a04 	addi	r4,sp,40
   29010:	d80b883a 	mov	r5,sp
   29014:	00298400 	call	29840 <__unpack_d>
   29018:	d8c00517 	ldw	r3,20(sp)
   2901c:	00800044 	movi	r2,1
   29020:	10c0052e 	bgeu	r2,r3,29038 <__ltdf2+0x50>
   29024:	d8c00017 	ldw	r3,0(sp)
   29028:	10c0032e 	bgeu	r2,r3,29038 <__ltdf2+0x50>
   2902c:	d9000504 	addi	r4,sp,20
   29030:	d80b883a 	mov	r5,sp
   29034:	00299440 	call	29944 <__fpcmp_parts_d>
   29038:	dfc00e17 	ldw	ra,56(sp)
   2903c:	dec00f04 	addi	sp,sp,60
   29040:	f800283a 	ret

00029044 <__floatsidf>:
   29044:	2004d7fa 	srli	r2,r4,31
   29048:	defff904 	addi	sp,sp,-28
   2904c:	00c000c4 	movi	r3,3
   29050:	dfc00615 	stw	ra,24(sp)
   29054:	dc000515 	stw	r16,20(sp)
   29058:	d8c00015 	stw	r3,0(sp)
   2905c:	d8800115 	stw	r2,4(sp)
   29060:	2000081e 	bne	r4,zero,29084 <__floatsidf+0x40>
   29064:	00800084 	movi	r2,2
   29068:	d8800015 	stw	r2,0(sp)
   2906c:	d809883a 	mov	r4,sp
   29070:	002961c0 	call	2961c <__pack_d>
   29074:	dfc00617 	ldw	ra,24(sp)
   29078:	dc000517 	ldw	r16,20(sp)
   2907c:	dec00704 	addi	sp,sp,28
   29080:	f800283a 	ret
   29084:	00c00f04 	movi	r3,60
   29088:	d8c00215 	stw	r3,8(sp)
   2908c:	10000f1e 	bne	r2,zero,290cc <__floatsidf+0x88>
   29090:	2021883a 	mov	r16,r4
   29094:	8009883a 	mov	r4,r16
   29098:	00295700 	call	29570 <__clzsi2>
   2909c:	11000744 	addi	r4,r2,29
   290a0:	0100110e 	bge	zero,r4,290e8 <__floatsidf+0xa4>
   290a4:	10ffff44 	addi	r3,r2,-3
   290a8:	18001216 	blt	r3,zero,290f4 <__floatsidf+0xb0>
   290ac:	80c6983a 	sll	r3,r16,r3
   290b0:	0009883a 	mov	r4,zero
   290b4:	014007c4 	movi	r5,31
   290b8:	2885c83a 	sub	r2,r5,r2
   290bc:	d9000315 	stw	r4,12(sp)
   290c0:	d8c00415 	stw	r3,16(sp)
   290c4:	d8800215 	stw	r2,8(sp)
   290c8:	003fe806 	br	2906c <__floatsidf+0x28>
   290cc:	00a00034 	movhi	r2,32768
   290d0:	20800e26 	beq	r4,r2,2910c <__floatsidf+0xc8>
   290d4:	0121c83a 	sub	r16,zero,r4
   290d8:	8009883a 	mov	r4,r16
   290dc:	00295700 	call	29570 <__clzsi2>
   290e0:	11000744 	addi	r4,r2,29
   290e4:	013fef16 	blt	zero,r4,290a4 <__floatsidf+0x60>
   290e8:	dc000315 	stw	r16,12(sp)
   290ec:	d8000415 	stw	zero,16(sp)
   290f0:	003fde06 	br	2906c <__floatsidf+0x28>
   290f4:	800ad07a 	srli	r5,r16,1
   290f8:	00c007c4 	movi	r3,31
   290fc:	1907c83a 	sub	r3,r3,r4
   29100:	28c6d83a 	srl	r3,r5,r3
   29104:	8108983a 	sll	r4,r16,r4
   29108:	003fea06 	br	290b4 <__floatsidf+0x70>
   2910c:	0005883a 	mov	r2,zero
   29110:	00f07834 	movhi	r3,49632
   29114:	003fd706 	br	29074 <__floatsidf+0x30>

00029118 <__fixdfsi>:
   29118:	defff804 	addi	sp,sp,-32
   2911c:	d9000515 	stw	r4,20(sp)
   29120:	d9400615 	stw	r5,24(sp)
   29124:	d9000504 	addi	r4,sp,20
   29128:	d80b883a 	mov	r5,sp
   2912c:	dfc00715 	stw	ra,28(sp)
   29130:	00298400 	call	29840 <__unpack_d>
   29134:	d8800017 	ldw	r2,0(sp)
   29138:	00c00084 	movi	r3,2
   2913c:	10c01c26 	beq	r2,r3,291b0 <__fixdfsi+0x98>
   29140:	00c00044 	movi	r3,1
   29144:	18801a2e 	bgeu	r3,r2,291b0 <__fixdfsi+0x98>
   29148:	00c00104 	movi	r3,4
   2914c:	10c01126 	beq	r2,r3,29194 <__fixdfsi+0x7c>
   29150:	d8800217 	ldw	r2,8(sp)
   29154:	10001616 	blt	r2,zero,291b0 <__fixdfsi+0x98>
   29158:	00c00784 	movi	r3,30
   2915c:	18800d16 	blt	r3,r2,29194 <__fixdfsi+0x7c>
   29160:	00c00f04 	movi	r3,60
   29164:	1885c83a 	sub	r2,r3,r2
   29168:	10fff804 	addi	r3,r2,-32
   2916c:	d9400317 	ldw	r5,12(sp)
   29170:	d9000417 	ldw	r4,16(sp)
   29174:	18001616 	blt	r3,zero,291d0 <__fixdfsi+0xb8>
   29178:	20c4d83a 	srl	r2,r4,r3
   2917c:	d8c00117 	ldw	r3,4(sp)
   29180:	18000126 	beq	r3,zero,29188 <__fixdfsi+0x70>
   29184:	0085c83a 	sub	r2,zero,r2
   29188:	dfc00717 	ldw	ra,28(sp)
   2918c:	dec00804 	addi	sp,sp,32
   29190:	f800283a 	ret
   29194:	d8800117 	ldw	r2,4(sp)
   29198:	1000091e 	bne	r2,zero,291c0 <__fixdfsi+0xa8>
   2919c:	00a00034 	movhi	r2,32768
   291a0:	10bfffc4 	addi	r2,r2,-1
   291a4:	dfc00717 	ldw	ra,28(sp)
   291a8:	dec00804 	addi	sp,sp,32
   291ac:	f800283a 	ret
   291b0:	0005883a 	mov	r2,zero
   291b4:	dfc00717 	ldw	ra,28(sp)
   291b8:	dec00804 	addi	sp,sp,32
   291bc:	f800283a 	ret
   291c0:	00a00034 	movhi	r2,32768
   291c4:	dfc00717 	ldw	ra,28(sp)
   291c8:	dec00804 	addi	sp,sp,32
   291cc:	f800283a 	ret
   291d0:	2008907a 	slli	r4,r4,1
   291d4:	018007c4 	movi	r6,31
   291d8:	308dc83a 	sub	r6,r6,r2
   291dc:	2188983a 	sll	r4,r4,r6
   291e0:	2884d83a 	srl	r2,r5,r2
   291e4:	2084b03a 	or	r2,r4,r2
   291e8:	003fe406 	br	2917c <__fixdfsi+0x64>

000291ec <__floatunsidf>:
   291ec:	defff904 	addi	sp,sp,-28
   291f0:	dc000515 	stw	r16,20(sp)
   291f4:	dfc00615 	stw	ra,24(sp)
   291f8:	d8000115 	stw	zero,4(sp)
   291fc:	2021883a 	mov	r16,r4
   29200:	20001726 	beq	r4,zero,29260 <__floatunsidf+0x74>
   29204:	008000c4 	movi	r2,3
   29208:	d8800015 	stw	r2,0(sp)
   2920c:	00800f04 	movi	r2,60
   29210:	d8800215 	stw	r2,8(sp)
   29214:	00295700 	call	29570 <__clzsi2>
   29218:	10c00744 	addi	r3,r2,29
   2921c:	18001816 	blt	r3,zero,29280 <__floatunsidf+0x94>
   29220:	18002d26 	beq	r3,zero,292d8 <__floatunsidf+0xec>
   29224:	113fff44 	addi	r4,r2,-3
   29228:	20002e16 	blt	r4,zero,292e4 <__floatunsidf+0xf8>
   2922c:	8108983a 	sll	r4,r16,r4
   29230:	0021883a 	mov	r16,zero
   29234:	014007c4 	movi	r5,31
   29238:	2885c83a 	sub	r2,r5,r2
   2923c:	dc000315 	stw	r16,12(sp)
   29240:	d9000415 	stw	r4,16(sp)
   29244:	d8800215 	stw	r2,8(sp)
   29248:	d809883a 	mov	r4,sp
   2924c:	002961c0 	call	2961c <__pack_d>
   29250:	dfc00617 	ldw	ra,24(sp)
   29254:	dc000517 	ldw	r16,20(sp)
   29258:	dec00704 	addi	sp,sp,28
   2925c:	f800283a 	ret
   29260:	00800084 	movi	r2,2
   29264:	d809883a 	mov	r4,sp
   29268:	d8800015 	stw	r2,0(sp)
   2926c:	002961c0 	call	2961c <__pack_d>
   29270:	dfc00617 	ldw	ra,24(sp)
   29274:	dc000517 	ldw	r16,20(sp)
   29278:	dec00704 	addi	sp,sp,28
   2927c:	f800283a 	ret
   29280:	00c7c83a 	sub	r3,zero,r3
   29284:	193ff804 	addi	r4,r3,-32
   29288:	20001c16 	blt	r4,zero,292fc <__floatunsidf+0x110>
   2928c:	000b883a 	mov	r5,zero
   29290:	2009d7fa 	srai	r4,r4,31
   29294:	80c6d83a 	srl	r3,r16,r3
   29298:	297fffc4 	addi	r5,r5,-1
   2929c:	2c20703a 	and	r16,r5,r16
   292a0:	8020c03a 	cmpne	r16,r16,zero
   292a4:	1906703a 	and	r3,r3,r4
   292a8:	010007c4 	movi	r4,31
   292ac:	80c6b03a 	or	r3,r16,r3
   292b0:	2085c83a 	sub	r2,r4,r2
   292b4:	d809883a 	mov	r4,sp
   292b8:	d8c00315 	stw	r3,12(sp)
   292bc:	d8000415 	stw	zero,16(sp)
   292c0:	d8800215 	stw	r2,8(sp)
   292c4:	002961c0 	call	2961c <__pack_d>
   292c8:	dfc00617 	ldw	ra,24(sp)
   292cc:	dc000517 	ldw	r16,20(sp)
   292d0:	dec00704 	addi	sp,sp,28
   292d4:	f800283a 	ret
   292d8:	dc000315 	stw	r16,12(sp)
   292dc:	d8000415 	stw	zero,16(sp)
   292e0:	003fd906 	br	29248 <__floatunsidf+0x5c>
   292e4:	800ad07a 	srli	r5,r16,1
   292e8:	010007c4 	movi	r4,31
   292ec:	20c9c83a 	sub	r4,r4,r3
   292f0:	2908d83a 	srl	r4,r5,r4
   292f4:	80e0983a 	sll	r16,r16,r3
   292f8:	003fce06 	br	29234 <__floatunsidf+0x48>
   292fc:	01400044 	movi	r5,1
   29300:	28ca983a 	sll	r5,r5,r3
   29304:	003fe206 	br	29290 <__floatunsidf+0xa4>

00029308 <udivmodsi4>:
   29308:	2005883a 	mov	r2,r4
   2930c:	2900182e 	bgeu	r5,r4,29370 <udivmodsi4+0x68>
   29310:	28001716 	blt	r5,zero,29370 <udivmodsi4+0x68>
   29314:	01000804 	movi	r4,32
   29318:	00c00044 	movi	r3,1
   2931c:	00000206 	br	29328 <udivmodsi4+0x20>
   29320:	20001126 	beq	r4,zero,29368 <udivmodsi4+0x60>
   29324:	28000516 	blt	r5,zero,2933c <udivmodsi4+0x34>
   29328:	294b883a 	add	r5,r5,r5
   2932c:	213fffc4 	addi	r4,r4,-1
   29330:	18c7883a 	add	r3,r3,r3
   29334:	28bffa36 	bltu	r5,r2,29320 <udivmodsi4+0x18>
   29338:	18000b26 	beq	r3,zero,29368 <udivmodsi4+0x60>
   2933c:	0009883a 	mov	r4,zero
   29340:	11400236 	bltu	r2,r5,2934c <udivmodsi4+0x44>
   29344:	1145c83a 	sub	r2,r2,r5
   29348:	20c8b03a 	or	r4,r4,r3
   2934c:	1806d07a 	srli	r3,r3,1
   29350:	280ad07a 	srli	r5,r5,1
   29354:	183ffa1e 	bne	r3,zero,29340 <udivmodsi4+0x38>
   29358:	3000021e 	bne	r6,zero,29364 <udivmodsi4+0x5c>
   2935c:	2005883a 	mov	r2,r4
   29360:	f800283a 	ret
   29364:	f800283a 	ret
   29368:	0009883a 	mov	r4,zero
   2936c:	003ffa06 	br	29358 <udivmodsi4+0x50>
   29370:	00c00044 	movi	r3,1
   29374:	0009883a 	mov	r4,zero
   29378:	003ff106 	br	29340 <udivmodsi4+0x38>

0002937c <__divsi3>:
   2937c:	defffe04 	addi	sp,sp,-8
   29380:	dfc00115 	stw	ra,4(sp)
   29384:	dc000015 	stw	r16,0(sp)
   29388:	20000a16 	blt	r4,zero,293b4 <__divsi3+0x38>
   2938c:	0021883a 	mov	r16,zero
   29390:	28000b16 	blt	r5,zero,293c0 <__divsi3+0x44>
   29394:	000d883a 	mov	r6,zero
   29398:	00293080 	call	29308 <udivmodsi4>
   2939c:	80000126 	beq	r16,zero,293a4 <__divsi3+0x28>
   293a0:	0085c83a 	sub	r2,zero,r2
   293a4:	dfc00117 	ldw	ra,4(sp)
   293a8:	dc000017 	ldw	r16,0(sp)
   293ac:	dec00204 	addi	sp,sp,8
   293b0:	f800283a 	ret
   293b4:	0109c83a 	sub	r4,zero,r4
   293b8:	04000044 	movi	r16,1
   293bc:	283ff50e 	bge	r5,zero,29394 <__divsi3+0x18>
   293c0:	014bc83a 	sub	r5,zero,r5
   293c4:	8400005c 	xori	r16,r16,1
   293c8:	003ff206 	br	29394 <__divsi3+0x18>

000293cc <__modsi3>:
   293cc:	deffff04 	addi	sp,sp,-4
   293d0:	dfc00015 	stw	ra,0(sp)
   293d4:	20000516 	blt	r4,zero,293ec <__modsi3+0x20>
   293d8:	28000c16 	blt	r5,zero,2940c <__modsi3+0x40>
   293dc:	01800044 	movi	r6,1
   293e0:	dfc00017 	ldw	ra,0(sp)
   293e4:	dec00104 	addi	sp,sp,4
   293e8:	00293081 	jmpi	29308 <udivmodsi4>
   293ec:	0109c83a 	sub	r4,zero,r4
   293f0:	28000b16 	blt	r5,zero,29420 <__modsi3+0x54>
   293f4:	01800044 	movi	r6,1
   293f8:	00293080 	call	29308 <udivmodsi4>
   293fc:	0085c83a 	sub	r2,zero,r2
   29400:	dfc00017 	ldw	ra,0(sp)
   29404:	dec00104 	addi	sp,sp,4
   29408:	f800283a 	ret
   2940c:	014bc83a 	sub	r5,zero,r5
   29410:	01800044 	movi	r6,1
   29414:	dfc00017 	ldw	ra,0(sp)
   29418:	dec00104 	addi	sp,sp,4
   2941c:	00293081 	jmpi	29308 <udivmodsi4>
   29420:	014bc83a 	sub	r5,zero,r5
   29424:	003ff306 	br	293f4 <__modsi3+0x28>

00029428 <__udivsi3>:
   29428:	000d883a 	mov	r6,zero
   2942c:	00293081 	jmpi	29308 <udivmodsi4>

00029430 <__umodsi3>:
   29430:	01800044 	movi	r6,1
   29434:	00293081 	jmpi	29308 <udivmodsi4>

00029438 <__mulsi3>:
   29438:	0005883a 	mov	r2,zero
   2943c:	20000726 	beq	r4,zero,2945c <__mulsi3+0x24>
   29440:	20c0004c 	andi	r3,r4,1
   29444:	2008d07a 	srli	r4,r4,1
   29448:	18000126 	beq	r3,zero,29450 <__mulsi3+0x18>
   2944c:	1145883a 	add	r2,r2,r5
   29450:	294b883a 	add	r5,r5,r5
   29454:	203ffa1e 	bne	r4,zero,29440 <__mulsi3+0x8>
   29458:	f800283a 	ret
   2945c:	f800283a 	ret

00029460 <__muldi3>:
   29460:	defff604 	addi	sp,sp,-40
   29464:	dd400515 	stw	r21,20(sp)
   29468:	dd000415 	stw	r20,16(sp)
   2946c:	257fffcc 	andi	r21,r4,65535
   29470:	353fffcc 	andi	r20,r6,65535
   29474:	dcc00315 	stw	r19,12(sp)
   29478:	3026d43a 	srli	r19,r6,16
   2947c:	dd800615 	stw	r22,24(sp)
   29480:	dc800215 	stw	r18,8(sp)
   29484:	dc400115 	stw	r17,4(sp)
   29488:	2024d43a 	srli	r18,r4,16
   2948c:	2023883a 	mov	r17,r4
   29490:	282d883a 	mov	r22,r5
   29494:	a009883a 	mov	r4,r20
   29498:	a80b883a 	mov	r5,r21
   2949c:	dfc00915 	stw	ra,36(sp)
   294a0:	df000815 	stw	fp,32(sp)
   294a4:	ddc00715 	stw	r23,28(sp)
   294a8:	3839883a 	mov	fp,r7
   294ac:	dc000015 	stw	r16,0(sp)
   294b0:	3021883a 	mov	r16,r6
   294b4:	00294380 	call	29438 <__mulsi3>
   294b8:	a80b883a 	mov	r5,r21
   294bc:	9809883a 	mov	r4,r19
   294c0:	102f883a 	mov	r23,r2
   294c4:	00294380 	call	29438 <__mulsi3>
   294c8:	a009883a 	mov	r4,r20
   294cc:	900b883a 	mov	r5,r18
   294d0:	102b883a 	mov	r21,r2
   294d4:	00294380 	call	29438 <__mulsi3>
   294d8:	9809883a 	mov	r4,r19
   294dc:	900b883a 	mov	r5,r18
   294e0:	1029883a 	mov	r20,r2
   294e4:	00294380 	call	29438 <__mulsi3>
   294e8:	1007883a 	mov	r3,r2
   294ec:	b804d43a 	srli	r2,r23,16
   294f0:	a549883a 	add	r4,r20,r21
   294f4:	2089883a 	add	r4,r4,r2
   294f8:	2500022e 	bgeu	r4,r20,29504 <__muldi3+0xa4>
   294fc:	00800074 	movhi	r2,1
   29500:	1887883a 	add	r3,r3,r2
   29504:	200cd43a 	srli	r6,r4,16
   29508:	2004943a 	slli	r2,r4,16
   2950c:	e00b883a 	mov	r5,fp
   29510:	8809883a 	mov	r4,r17
   29514:	bdffffcc 	andi	r23,r23,65535
   29518:	19a3883a 	add	r17,r3,r6
   2951c:	15ef883a 	add	r23,r2,r23
   29520:	00294380 	call	29438 <__mulsi3>
   29524:	8009883a 	mov	r4,r16
   29528:	b00b883a 	mov	r5,r22
   2952c:	1025883a 	mov	r18,r2
   29530:	00294380 	call	29438 <__mulsi3>
   29534:	9085883a 	add	r2,r18,r2
   29538:	1447883a 	add	r3,r2,r17
   2953c:	b805883a 	mov	r2,r23
   29540:	dfc00917 	ldw	ra,36(sp)
   29544:	df000817 	ldw	fp,32(sp)
   29548:	ddc00717 	ldw	r23,28(sp)
   2954c:	dd800617 	ldw	r22,24(sp)
   29550:	dd400517 	ldw	r21,20(sp)
   29554:	dd000417 	ldw	r20,16(sp)
   29558:	dcc00317 	ldw	r19,12(sp)
   2955c:	dc800217 	ldw	r18,8(sp)
   29560:	dc400117 	ldw	r17,4(sp)
   29564:	dc000017 	ldw	r16,0(sp)
   29568:	dec00a04 	addi	sp,sp,40
   2956c:	f800283a 	ret

00029570 <__clzsi2>:
   29570:	00bfffd4 	movui	r2,65535
   29574:	11000b36 	bltu	r2,r4,295a4 <__clzsi2+0x34>
   29578:	00803fc4 	movi	r2,255
   2957c:	11001e2e 	bgeu	r2,r4,295f8 <__clzsi2+0x88>
   29580:	00c00204 	movi	r3,8
   29584:	20c8d83a 	srl	r4,r4,r3
   29588:	00c000f4 	movhi	r3,3
   2958c:	18f26104 	addi	r3,r3,-13948
   29590:	00800604 	movi	r2,24
   29594:	1909883a 	add	r4,r3,r4
   29598:	20c00003 	ldbu	r3,0(r4)
   2959c:	10c5c83a 	sub	r2,r2,r3
   295a0:	f800283a 	ret
   295a4:	00804034 	movhi	r2,256
   295a8:	10bfffc4 	addi	r2,r2,-1
   295ac:	11000936 	bltu	r2,r4,295d4 <__clzsi2+0x64>
   295b0:	00800404 	movi	r2,16
   295b4:	1007883a 	mov	r3,r2
   295b8:	20c8d83a 	srl	r4,r4,r3
   295bc:	00c000f4 	movhi	r3,3
   295c0:	18f26104 	addi	r3,r3,-13948
   295c4:	1909883a 	add	r4,r3,r4
   295c8:	20c00003 	ldbu	r3,0(r4)
   295cc:	10c5c83a 	sub	r2,r2,r3
   295d0:	f800283a 	ret
   295d4:	00c00604 	movi	r3,24
   295d8:	20c8d83a 	srl	r4,r4,r3
   295dc:	00c000f4 	movhi	r3,3
   295e0:	18f26104 	addi	r3,r3,-13948
   295e4:	00800204 	movi	r2,8
   295e8:	1909883a 	add	r4,r3,r4
   295ec:	20c00003 	ldbu	r3,0(r4)
   295f0:	10c5c83a 	sub	r2,r2,r3
   295f4:	f800283a 	ret
   295f8:	0007883a 	mov	r3,zero
   295fc:	20c8d83a 	srl	r4,r4,r3
   29600:	00c000f4 	movhi	r3,3
   29604:	18f26104 	addi	r3,r3,-13948
   29608:	00800804 	movi	r2,32
   2960c:	1909883a 	add	r4,r3,r4
   29610:	20c00003 	ldbu	r3,0(r4)
   29614:	10c5c83a 	sub	r2,r2,r3
   29618:	f800283a 	ret

0002961c <__pack_d>:
   2961c:	20800017 	ldw	r2,0(r4)
   29620:	defff804 	addi	sp,sp,-32
   29624:	dcc00315 	stw	r19,12(sp)
   29628:	dc800215 	stw	r18,8(sp)
   2962c:	dfc00715 	stw	ra,28(sp)
   29630:	dd800615 	stw	r22,24(sp)
   29634:	dd400515 	stw	r21,20(sp)
   29638:	dd000415 	stw	r20,16(sp)
   2963c:	dc400115 	stw	r17,4(sp)
   29640:	dc000015 	stw	r16,0(sp)
   29644:	04800044 	movi	r18,1
   29648:	24400317 	ldw	r17,12(r4)
   2964c:	24000417 	ldw	r16,16(r4)
   29650:	24c00117 	ldw	r19,4(r4)
   29654:	9080422e 	bgeu	r18,r2,29760 <__pack_d+0x144>
   29658:	00c00104 	movi	r3,4
   2965c:	10c03c26 	beq	r2,r3,29750 <__pack_d+0x134>
   29660:	00c00084 	movi	r3,2
   29664:	10c01926 	beq	r2,r3,296cc <__pack_d+0xb0>
   29668:	8c04b03a 	or	r2,r17,r16
   2966c:	10001726 	beq	r2,zero,296cc <__pack_d+0xb0>
   29670:	21000217 	ldw	r4,8(r4)
   29674:	00bf0084 	movi	r2,-1022
   29678:	20804016 	blt	r4,r2,2977c <__pack_d+0x160>
   2967c:	0080ffc4 	movi	r2,1023
   29680:	11003316 	blt	r2,r4,29750 <__pack_d+0x134>
   29684:	88803fcc 	andi	r2,r17,255
   29688:	00c02004 	movi	r3,128
   2968c:	10c02926 	beq	r2,r3,29734 <__pack_d+0x118>
   29690:	88801fc4 	addi	r2,r17,127
   29694:	1463803a 	cmpltu	r17,r2,r17
   29698:	8c21883a 	add	r16,r17,r16
   2969c:	1023883a 	mov	r17,r2
   296a0:	00880034 	movhi	r2,8192
   296a4:	10bfffc4 	addi	r2,r2,-1
   296a8:	14001c36 	bltu	r2,r16,2971c <__pack_d+0x100>
   296ac:	2100ffc4 	addi	r4,r4,1023
   296b0:	8006963a 	slli	r3,r16,24
   296b4:	8804d23a 	srli	r2,r17,8
   296b8:	8020913a 	slli	r16,r16,4
   296bc:	2101ffcc 	andi	r4,r4,2047
   296c0:	1884b03a 	or	r2,r3,r2
   296c4:	8020d33a 	srli	r16,r16,12
   296c8:	00000306 	br	296d8 <__pack_d+0xbc>
   296cc:	0009883a 	mov	r4,zero
   296d0:	0005883a 	mov	r2,zero
   296d4:	0021883a 	mov	r16,zero
   296d8:	2008953a 	slli	r4,r4,20
   296dc:	982697fa 	slli	r19,r19,31
   296e0:	00c00434 	movhi	r3,16
   296e4:	18ffffc4 	addi	r3,r3,-1
   296e8:	80e0703a 	and	r16,r16,r3
   296ec:	8106b03a 	or	r3,r16,r4
   296f0:	1cc6b03a 	or	r3,r3,r19
   296f4:	dfc00717 	ldw	ra,28(sp)
   296f8:	dd800617 	ldw	r22,24(sp)
   296fc:	dd400517 	ldw	r21,20(sp)
   29700:	dd000417 	ldw	r20,16(sp)
   29704:	dcc00317 	ldw	r19,12(sp)
   29708:	dc800217 	ldw	r18,8(sp)
   2970c:	dc400117 	ldw	r17,4(sp)
   29710:	dc000017 	ldw	r16,0(sp)
   29714:	dec00804 	addi	sp,sp,32
   29718:	f800283a 	ret
   2971c:	800697fa 	slli	r3,r16,31
   29720:	8804d07a 	srli	r2,r17,1
   29724:	21010004 	addi	r4,r4,1024
   29728:	8020d07a 	srli	r16,r16,1
   2972c:	18a2b03a 	or	r17,r3,r2
   29730:	003fdf06 	br	296b0 <__pack_d+0x94>
   29734:	88c0400c 	andi	r3,r17,256
   29738:	183fd926 	beq	r3,zero,296a0 <__pack_d+0x84>
   2973c:	8885883a 	add	r2,r17,r2
   29740:	1463803a 	cmpltu	r17,r2,r17
   29744:	8c21883a 	add	r16,r17,r16
   29748:	1023883a 	mov	r17,r2
   2974c:	003fd406 	br	296a0 <__pack_d+0x84>
   29750:	0101ffc4 	movi	r4,2047
   29754:	0005883a 	mov	r2,zero
   29758:	0021883a 	mov	r16,zero
   2975c:	003fde06 	br	296d8 <__pack_d+0xbc>
   29760:	84000234 	orhi	r16,r16,8
   29764:	00c00434 	movhi	r3,16
   29768:	18ffffc4 	addi	r3,r3,-1
   2976c:	8805883a 	mov	r2,r17
   29770:	80e0703a 	and	r16,r16,r3
   29774:	0101ffc4 	movi	r4,2047
   29778:	003fd706 	br	296d8 <__pack_d+0xbc>
   2977c:	1129c83a 	sub	r20,r2,r4
   29780:	00800e04 	movi	r2,56
   29784:	15002716 	blt	r2,r20,29824 <__pack_d+0x208>
   29788:	800b883a 	mov	r5,r16
   2978c:	a00d883a 	mov	r6,r20
   29790:	8809883a 	mov	r4,r17
   29794:	0029a140 	call	29a14 <__lshrdi3>
   29798:	9009883a 	mov	r4,r18
   2979c:	000b883a 	mov	r5,zero
   297a0:	a00d883a 	mov	r6,r20
   297a4:	102d883a 	mov	r22,r2
   297a8:	182b883a 	mov	r21,r3
   297ac:	0029a580 	call	29a58 <__ashldi3>
   297b0:	1009003a 	cmpeq	r4,r2,zero
   297b4:	1907c83a 	sub	r3,r3,r4
   297b8:	10bfffc4 	addi	r2,r2,-1
   297bc:	1c20703a 	and	r16,r3,r16
   297c0:	1444703a 	and	r2,r2,r17
   297c4:	1404b03a 	or	r2,r2,r16
   297c8:	1004c03a 	cmpne	r2,r2,zero
   297cc:	1584b03a 	or	r2,r2,r22
   297d0:	11003fcc 	andi	r4,r2,255
   297d4:	01402004 	movi	r5,128
   297d8:	a807883a 	mov	r3,r21
   297dc:	2140131e 	bne	r4,r5,2982c <__pack_d+0x210>
   297e0:	1140400c 	andi	r5,r2,256
   297e4:	28000426 	beq	r5,zero,297f8 <__pack_d+0x1dc>
   297e8:	1109883a 	add	r4,r2,r4
   297ec:	2085803a 	cmpltu	r2,r4,r2
   297f0:	1547883a 	add	r3,r2,r21
   297f4:	2005883a 	mov	r2,r4
   297f8:	1808963a 	slli	r4,r3,24
   297fc:	1004d23a 	srli	r2,r2,8
   29800:	1820913a 	slli	r16,r3,4
   29804:	01440034 	movhi	r5,4096
   29808:	297fffc4 	addi	r5,r5,-1
   2980c:	2084b03a 	or	r2,r4,r2
   29810:	8020d33a 	srli	r16,r16,12
   29814:	01000044 	movi	r4,1
   29818:	28ffaf36 	bltu	r5,r3,296d8 <__pack_d+0xbc>
   2981c:	0009883a 	mov	r4,zero
   29820:	003fad06 	br	296d8 <__pack_d+0xbc>
   29824:	0005883a 	mov	r2,zero
   29828:	0007883a 	mov	r3,zero
   2982c:	11001fc4 	addi	r4,r2,127
   29830:	2085803a 	cmpltu	r2,r4,r2
   29834:	10c7883a 	add	r3,r2,r3
   29838:	2005883a 	mov	r2,r4
   2983c:	003fee06 	br	297f8 <__pack_d+0x1dc>

00029840 <__unpack_d>:
   29840:	21800117 	ldw	r6,4(r4)
   29844:	20c00017 	ldw	r3,0(r4)
   29848:	3004d7fa 	srli	r2,r6,31
   2984c:	3008d53a 	srli	r4,r6,20
   29850:	28800115 	stw	r2,4(r5)
   29854:	2101ffcc 	andi	r4,r4,2047
   29858:	00800434 	movhi	r2,16
   2985c:	10bfffc4 	addi	r2,r2,-1
   29860:	3084703a 	and	r2,r6,r2
   29864:	20001a1e 	bne	r4,zero,298d0 <__unpack_d+0x90>
   29868:	1888b03a 	or	r4,r3,r2
   2986c:	20002626 	beq	r4,zero,29908 <__unpack_d+0xc8>
   29870:	1808d63a 	srli	r4,r3,24
   29874:	1004923a 	slli	r2,r2,8
   29878:	01bf0084 	movi	r6,-1022
   2987c:	29800215 	stw	r6,8(r5)
   29880:	2084b03a 	or	r2,r4,r2
   29884:	010000c4 	movi	r4,3
   29888:	29000015 	stw	r4,0(r5)
   2988c:	02040034 	movhi	r8,4096
   29890:	423fffc4 	addi	r8,r8,-1
   29894:	1806923a 	slli	r3,r3,8
   29898:	40801836 	bltu	r8,r2,298fc <__unpack_d+0xbc>
   2989c:	013f0044 	movi	r4,-1023
   298a0:	18cd883a 	add	r6,r3,r3
   298a4:	30c7803a 	cmpltu	r3,r6,r3
   298a8:	1085883a 	add	r2,r2,r2
   298ac:	1885883a 	add	r2,r3,r2
   298b0:	200f883a 	mov	r7,r4
   298b4:	3007883a 	mov	r3,r6
   298b8:	213fffc4 	addi	r4,r4,-1
   298bc:	40bff82e 	bgeu	r8,r2,298a0 <__unpack_d+0x60>
   298c0:	29c00215 	stw	r7,8(r5)
   298c4:	28c00315 	stw	r3,12(r5)
   298c8:	28800415 	stw	r2,16(r5)
   298cc:	f800283a 	ret
   298d0:	01c1ffc4 	movi	r7,2047
   298d4:	21c00f26 	beq	r4,r7,29914 <__unpack_d+0xd4>
   298d8:	180cd63a 	srli	r6,r3,24
   298dc:	1004923a 	slli	r2,r2,8
   298e0:	213f0044 	addi	r4,r4,-1023
   298e4:	1806923a 	slli	r3,r3,8
   298e8:	3084b03a 	or	r2,r6,r2
   298ec:	29000215 	stw	r4,8(r5)
   298f0:	010000c4 	movi	r4,3
   298f4:	10840034 	orhi	r2,r2,4096
   298f8:	29000015 	stw	r4,0(r5)
   298fc:	28c00315 	stw	r3,12(r5)
   29900:	28800415 	stw	r2,16(r5)
   29904:	f800283a 	ret
   29908:	00800084 	movi	r2,2
   2990c:	28800015 	stw	r2,0(r5)
   29910:	f800283a 	ret
   29914:	1888b03a 	or	r4,r3,r2
   29918:	20000526 	beq	r4,zero,29930 <__unpack_d+0xf0>
   2991c:	3180022c 	andhi	r6,r6,8
   29920:	30000626 	beq	r6,zero,2993c <__unpack_d+0xfc>
   29924:	01000044 	movi	r4,1
   29928:	29000015 	stw	r4,0(r5)
   2992c:	003ff306 	br	298fc <__unpack_d+0xbc>
   29930:	00800104 	movi	r2,4
   29934:	28800015 	stw	r2,0(r5)
   29938:	f800283a 	ret
   2993c:	28000015 	stw	zero,0(r5)
   29940:	003fee06 	br	298fc <__unpack_d+0xbc>

00029944 <__fpcmp_parts_d>:
   29944:	20c00017 	ldw	r3,0(r4)
   29948:	00800044 	movi	r2,1
   2994c:	10c0142e 	bgeu	r2,r3,299a0 <__fpcmp_parts_d+0x5c>
   29950:	29800017 	ldw	r6,0(r5)
   29954:	1180122e 	bgeu	r2,r6,299a0 <__fpcmp_parts_d+0x5c>
   29958:	01c00104 	movi	r7,4
   2995c:	19c02826 	beq	r3,r7,29a00 <__fpcmp_parts_d+0xbc>
   29960:	31c00926 	beq	r6,r7,29988 <__fpcmp_parts_d+0x44>
   29964:	01c00084 	movi	r7,2
   29968:	19c00626 	beq	r3,r7,29984 <__fpcmp_parts_d+0x40>
   2996c:	31c00a26 	beq	r6,r7,29998 <__fpcmp_parts_d+0x54>
   29970:	20c00117 	ldw	r3,4(r4)
   29974:	29800117 	ldw	r6,4(r5)
   29978:	19800b26 	beq	r3,r6,299a8 <__fpcmp_parts_d+0x64>
   2997c:	1800041e 	bne	r3,zero,29990 <__fpcmp_parts_d+0x4c>
   29980:	f800283a 	ret
   29984:	30c01a26 	beq	r6,r3,299f0 <__fpcmp_parts_d+0xac>
   29988:	28800117 	ldw	r2,4(r5)
   2998c:	1000041e 	bne	r2,zero,299a0 <__fpcmp_parts_d+0x5c>
   29990:	00bfffc4 	movi	r2,-1
   29994:	f800283a 	ret
   29998:	20800117 	ldw	r2,4(r4)
   2999c:	103ffc1e 	bne	r2,zero,29990 <__fpcmp_parts_d+0x4c>
   299a0:	00800044 	movi	r2,1
   299a4:	f800283a 	ret
   299a8:	21c00217 	ldw	r7,8(r4)
   299ac:	29800217 	ldw	r6,8(r5)
   299b0:	31c0020e 	bge	r6,r7,299bc <__fpcmp_parts_d+0x78>
   299b4:	183ff61e 	bne	r3,zero,29990 <__fpcmp_parts_d+0x4c>
   299b8:	f800283a 	ret
   299bc:	39800a16 	blt	r7,r6,299e8 <__fpcmp_parts_d+0xa4>
   299c0:	20800417 	ldw	r2,16(r4)
   299c4:	29800417 	ldw	r6,16(r5)
   299c8:	21c00317 	ldw	r7,12(r4)
   299cc:	29000317 	ldw	r4,12(r5)
   299d0:	30800936 	bltu	r6,r2,299f8 <__fpcmp_parts_d+0xb4>
   299d4:	1180011e 	bne	r2,r6,299dc <__fpcmp_parts_d+0x98>
   299d8:	21c00736 	bltu	r4,r7,299f8 <__fpcmp_parts_d+0xb4>
   299dc:	11800236 	bltu	r2,r6,299e8 <__fpcmp_parts_d+0xa4>
   299e0:	3080031e 	bne	r6,r2,299f0 <__fpcmp_parts_d+0xac>
   299e4:	3900022e 	bgeu	r7,r4,299f0 <__fpcmp_parts_d+0xac>
   299e8:	183fe926 	beq	r3,zero,29990 <__fpcmp_parts_d+0x4c>
   299ec:	003fec06 	br	299a0 <__fpcmp_parts_d+0x5c>
   299f0:	0005883a 	mov	r2,zero
   299f4:	f800283a 	ret
   299f8:	183fe926 	beq	r3,zero,299a0 <__fpcmp_parts_d+0x5c>
   299fc:	003fe406 	br	29990 <__fpcmp_parts_d+0x4c>
   29a00:	30ffe51e 	bne	r6,r3,29998 <__fpcmp_parts_d+0x54>
   29a04:	28c00117 	ldw	r3,4(r5)
   29a08:	20800117 	ldw	r2,4(r4)
   29a0c:	1885c83a 	sub	r2,r3,r2
   29a10:	f800283a 	ret

00029a14 <__lshrdi3>:
   29a14:	2005883a 	mov	r2,r4
   29a18:	2807883a 	mov	r3,r5
   29a1c:	30000826 	beq	r6,zero,29a40 <__lshrdi3+0x2c>
   29a20:	01000804 	movi	r4,32
   29a24:	2189c83a 	sub	r4,r4,r6
   29a28:	0100060e 	bge	zero,r4,29a44 <__lshrdi3+0x30>
   29a2c:	1184d83a 	srl	r2,r2,r6
   29a30:	2908983a 	sll	r4,r5,r4
   29a34:	298cd83a 	srl	r6,r5,r6
   29a38:	2084b03a 	or	r2,r4,r2
   29a3c:	3007883a 	mov	r3,r6
   29a40:	f800283a 	ret
   29a44:	0105c83a 	sub	r2,zero,r4
   29a48:	000d883a 	mov	r6,zero
   29a4c:	2884d83a 	srl	r2,r5,r2
   29a50:	3007883a 	mov	r3,r6
   29a54:	003ffa06 	br	29a40 <__lshrdi3+0x2c>

00029a58 <__ashldi3>:
   29a58:	2005883a 	mov	r2,r4
   29a5c:	2807883a 	mov	r3,r5
   29a60:	30000826 	beq	r6,zero,29a84 <__ashldi3+0x2c>
   29a64:	01000804 	movi	r4,32
   29a68:	2189c83a 	sub	r4,r4,r6
   29a6c:	0100060e 	bge	zero,r4,29a88 <__ashldi3+0x30>
   29a70:	1108d83a 	srl	r4,r2,r4
   29a74:	2986983a 	sll	r3,r5,r6
   29a78:	118c983a 	sll	r6,r2,r6
   29a7c:	20c6b03a 	or	r3,r4,r3
   29a80:	3005883a 	mov	r2,r6
   29a84:	f800283a 	ret
   29a88:	0107c83a 	sub	r3,zero,r4
   29a8c:	000d883a 	mov	r6,zero
   29a90:	10c6983a 	sll	r3,r2,r3
   29a94:	3005883a 	mov	r2,r6
   29a98:	003ffa06 	br	29a84 <__ashldi3+0x2c>

00029a9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29a9c:	defffe04 	addi	sp,sp,-8
   29aa0:	dfc00115 	stw	ra,4(sp)
   29aa4:	df000015 	stw	fp,0(sp)
   29aa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29aac:	008000f4 	movhi	r2,3
   29ab0:	10b93f04 	addi	r2,r2,-6916
   29ab4:	10800017 	ldw	r2,0(r2)
   29ab8:	10000526 	beq	r2,zero,29ad0 <alt_get_errno+0x34>
   29abc:	008000f4 	movhi	r2,3
   29ac0:	10b93f04 	addi	r2,r2,-6916
   29ac4:	10800017 	ldw	r2,0(r2)
   29ac8:	103ee83a 	callr	r2
   29acc:	00000206 	br	29ad8 <alt_get_errno+0x3c>
   29ad0:	008000f4 	movhi	r2,3
   29ad4:	10bfe004 	addi	r2,r2,-128
}
   29ad8:	e037883a 	mov	sp,fp
   29adc:	dfc00117 	ldw	ra,4(sp)
   29ae0:	df000017 	ldw	fp,0(sp)
   29ae4:	dec00204 	addi	sp,sp,8
   29ae8:	f800283a 	ret

00029aec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   29aec:	defffb04 	addi	sp,sp,-20
   29af0:	dfc00415 	stw	ra,16(sp)
   29af4:	df000315 	stw	fp,12(sp)
   29af8:	df000304 	addi	fp,sp,12
   29afc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   29b00:	e0bfff17 	ldw	r2,-4(fp)
   29b04:	10000716 	blt	r2,zero,29b24 <close+0x38>
   29b08:	e13fff17 	ldw	r4,-4(fp)
   29b0c:	01400304 	movi	r5,12
   29b10:	00294380 	call	29438 <__mulsi3>
   29b14:	00c000f4 	movhi	r3,3
   29b18:	18f4bd04 	addi	r3,r3,-11532
   29b1c:	10c5883a 	add	r2,r2,r3
   29b20:	00000106 	br	29b28 <close+0x3c>
   29b24:	0005883a 	mov	r2,zero
   29b28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   29b2c:	e0bffd17 	ldw	r2,-12(fp)
   29b30:	10001826 	beq	r2,zero,29b94 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   29b34:	e0bffd17 	ldw	r2,-12(fp)
   29b38:	10800017 	ldw	r2,0(r2)
   29b3c:	10800417 	ldw	r2,16(r2)
   29b40:	10000626 	beq	r2,zero,29b5c <close+0x70>
   29b44:	e0bffd17 	ldw	r2,-12(fp)
   29b48:	10800017 	ldw	r2,0(r2)
   29b4c:	10800417 	ldw	r2,16(r2)
   29b50:	e13ffd17 	ldw	r4,-12(fp)
   29b54:	103ee83a 	callr	r2
   29b58:	00000106 	br	29b60 <close+0x74>
   29b5c:	0005883a 	mov	r2,zero
   29b60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   29b64:	e13fff17 	ldw	r4,-4(fp)
   29b68:	002a1e40 	call	2a1e4 <alt_release_fd>
    if (rval < 0)
   29b6c:	e0bffe17 	ldw	r2,-8(fp)
   29b70:	1000060e 	bge	r2,zero,29b8c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   29b74:	0029a9c0 	call	29a9c <alt_get_errno>
   29b78:	e0fffe17 	ldw	r3,-8(fp)
   29b7c:	00c7c83a 	sub	r3,zero,r3
   29b80:	10c00015 	stw	r3,0(r2)
      return -1;
   29b84:	00bfffc4 	movi	r2,-1
   29b88:	00000606 	br	29ba4 <close+0xb8>
    }
    return 0;
   29b8c:	0005883a 	mov	r2,zero
   29b90:	00000406 	br	29ba4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29b94:	0029a9c0 	call	29a9c <alt_get_errno>
   29b98:	00c01444 	movi	r3,81
   29b9c:	10c00015 	stw	r3,0(r2)
    return -1;
   29ba0:	00bfffc4 	movi	r2,-1
  }
}
   29ba4:	e037883a 	mov	sp,fp
   29ba8:	dfc00117 	ldw	ra,4(sp)
   29bac:	df000017 	ldw	fp,0(sp)
   29bb0:	dec00204 	addi	sp,sp,8
   29bb4:	f800283a 	ret

00029bb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   29bb8:	defffc04 	addi	sp,sp,-16
   29bbc:	df000315 	stw	fp,12(sp)
   29bc0:	df000304 	addi	fp,sp,12
   29bc4:	e13ffd15 	stw	r4,-12(fp)
   29bc8:	e17ffe15 	stw	r5,-8(fp)
   29bcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   29bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   29bd4:	e037883a 	mov	sp,fp
   29bd8:	df000017 	ldw	fp,0(sp)
   29bdc:	dec00104 	addi	sp,sp,4
   29be0:	f800283a 	ret

00029be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29be4:	defffe04 	addi	sp,sp,-8
   29be8:	dfc00115 	stw	ra,4(sp)
   29bec:	df000015 	stw	fp,0(sp)
   29bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29bf4:	008000f4 	movhi	r2,3
   29bf8:	10b93f04 	addi	r2,r2,-6916
   29bfc:	10800017 	ldw	r2,0(r2)
   29c00:	10000526 	beq	r2,zero,29c18 <alt_get_errno+0x34>
   29c04:	008000f4 	movhi	r2,3
   29c08:	10b93f04 	addi	r2,r2,-6916
   29c0c:	10800017 	ldw	r2,0(r2)
   29c10:	103ee83a 	callr	r2
   29c14:	00000206 	br	29c20 <alt_get_errno+0x3c>
   29c18:	008000f4 	movhi	r2,3
   29c1c:	10bfe004 	addi	r2,r2,-128
}
   29c20:	e037883a 	mov	sp,fp
   29c24:	dfc00117 	ldw	ra,4(sp)
   29c28:	df000017 	ldw	fp,0(sp)
   29c2c:	dec00204 	addi	sp,sp,8
   29c30:	f800283a 	ret

00029c34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   29c34:	defffb04 	addi	sp,sp,-20
   29c38:	dfc00415 	stw	ra,16(sp)
   29c3c:	df000315 	stw	fp,12(sp)
   29c40:	df000304 	addi	fp,sp,12
   29c44:	e13ffe15 	stw	r4,-8(fp)
   29c48:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29c4c:	e0bffe17 	ldw	r2,-8(fp)
   29c50:	10000716 	blt	r2,zero,29c70 <fstat+0x3c>
   29c54:	e13ffe17 	ldw	r4,-8(fp)
   29c58:	01400304 	movi	r5,12
   29c5c:	00294380 	call	29438 <__mulsi3>
   29c60:	00c000f4 	movhi	r3,3
   29c64:	18f4bd04 	addi	r3,r3,-11532
   29c68:	10c5883a 	add	r2,r2,r3
   29c6c:	00000106 	br	29c74 <fstat+0x40>
   29c70:	0005883a 	mov	r2,zero
   29c74:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   29c78:	e0bffd17 	ldw	r2,-12(fp)
   29c7c:	10001026 	beq	r2,zero,29cc0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   29c80:	e0bffd17 	ldw	r2,-12(fp)
   29c84:	10800017 	ldw	r2,0(r2)
   29c88:	10800817 	ldw	r2,32(r2)
   29c8c:	10000726 	beq	r2,zero,29cac <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   29c90:	e0bffd17 	ldw	r2,-12(fp)
   29c94:	10800017 	ldw	r2,0(r2)
   29c98:	10800817 	ldw	r2,32(r2)
   29c9c:	e13ffd17 	ldw	r4,-12(fp)
   29ca0:	e17fff17 	ldw	r5,-4(fp)
   29ca4:	103ee83a 	callr	r2
   29ca8:	00000906 	br	29cd0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   29cac:	e0bfff17 	ldw	r2,-4(fp)
   29cb0:	00c80004 	movi	r3,8192
   29cb4:	10c00115 	stw	r3,4(r2)
      return 0;
   29cb8:	0005883a 	mov	r2,zero
   29cbc:	00000406 	br	29cd0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29cc0:	0029be40 	call	29be4 <alt_get_errno>
   29cc4:	00c01444 	movi	r3,81
   29cc8:	10c00015 	stw	r3,0(r2)
    return -1;
   29ccc:	00bfffc4 	movi	r2,-1
  }
}
   29cd0:	e037883a 	mov	sp,fp
   29cd4:	dfc00117 	ldw	ra,4(sp)
   29cd8:	df000017 	ldw	fp,0(sp)
   29cdc:	dec00204 	addi	sp,sp,8
   29ce0:	f800283a 	ret

00029ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29ce4:	defffe04 	addi	sp,sp,-8
   29ce8:	dfc00115 	stw	ra,4(sp)
   29cec:	df000015 	stw	fp,0(sp)
   29cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29cf4:	008000f4 	movhi	r2,3
   29cf8:	10b93f04 	addi	r2,r2,-6916
   29cfc:	10800017 	ldw	r2,0(r2)
   29d00:	10000526 	beq	r2,zero,29d18 <alt_get_errno+0x34>
   29d04:	008000f4 	movhi	r2,3
   29d08:	10b93f04 	addi	r2,r2,-6916
   29d0c:	10800017 	ldw	r2,0(r2)
   29d10:	103ee83a 	callr	r2
   29d14:	00000206 	br	29d20 <alt_get_errno+0x3c>
   29d18:	008000f4 	movhi	r2,3
   29d1c:	10bfe004 	addi	r2,r2,-128
}
   29d20:	e037883a 	mov	sp,fp
   29d24:	dfc00117 	ldw	ra,4(sp)
   29d28:	df000017 	ldw	fp,0(sp)
   29d2c:	dec00204 	addi	sp,sp,8
   29d30:	f800283a 	ret

00029d34 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   29d34:	deffed04 	addi	sp,sp,-76
   29d38:	dfc01215 	stw	ra,72(sp)
   29d3c:	df001115 	stw	fp,68(sp)
   29d40:	df001104 	addi	fp,sp,68
   29d44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29d48:	e0bfff17 	ldw	r2,-4(fp)
   29d4c:	10000716 	blt	r2,zero,29d6c <isatty+0x38>
   29d50:	e13fff17 	ldw	r4,-4(fp)
   29d54:	01400304 	movi	r5,12
   29d58:	00294380 	call	29438 <__mulsi3>
   29d5c:	00c000f4 	movhi	r3,3
   29d60:	18f4bd04 	addi	r3,r3,-11532
   29d64:	10c5883a 	add	r2,r2,r3
   29d68:	00000106 	br	29d70 <isatty+0x3c>
   29d6c:	0005883a 	mov	r2,zero
   29d70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   29d74:	e0bfef17 	ldw	r2,-68(fp)
   29d78:	10000e26 	beq	r2,zero,29db4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   29d7c:	e0bfef17 	ldw	r2,-68(fp)
   29d80:	10800017 	ldw	r2,0(r2)
   29d84:	10800817 	ldw	r2,32(r2)
   29d88:	1000021e 	bne	r2,zero,29d94 <isatty+0x60>
    {
      return 1;
   29d8c:	00800044 	movi	r2,1
   29d90:	00000c06 	br	29dc4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   29d94:	e0bff004 	addi	r2,fp,-64
   29d98:	e13fff17 	ldw	r4,-4(fp)
   29d9c:	100b883a 	mov	r5,r2
   29da0:	0029c340 	call	29c34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   29da4:	e0bff117 	ldw	r2,-60(fp)
   29da8:	10880020 	cmpeqi	r2,r2,8192
   29dac:	10803fcc 	andi	r2,r2,255
   29db0:	00000406 	br	29dc4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29db4:	0029ce40 	call	29ce4 <alt_get_errno>
   29db8:	00c01444 	movi	r3,81
   29dbc:	10c00015 	stw	r3,0(r2)
    return 0;
   29dc0:	0005883a 	mov	r2,zero
  }
}
   29dc4:	e037883a 	mov	sp,fp
   29dc8:	dfc00117 	ldw	ra,4(sp)
   29dcc:	df000017 	ldw	fp,0(sp)
   29dd0:	dec00204 	addi	sp,sp,8
   29dd4:	f800283a 	ret

00029dd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   29dd8:	defffc04 	addi	sp,sp,-16
   29ddc:	df000315 	stw	fp,12(sp)
   29de0:	df000304 	addi	fp,sp,12
   29de4:	e13ffd15 	stw	r4,-12(fp)
   29de8:	e17ffe15 	stw	r5,-8(fp)
   29dec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   29df0:	e0fffe17 	ldw	r3,-8(fp)
   29df4:	e0bffd17 	ldw	r2,-12(fp)
   29df8:	18800e26 	beq	r3,r2,29e34 <alt_load_section+0x5c>
  {
    while( to != end )
   29dfc:	00000a06 	br	29e28 <alt_load_section+0x50>
    {
      *to++ = *from++;
   29e00:	e0bffd17 	ldw	r2,-12(fp)
   29e04:	10c00017 	ldw	r3,0(r2)
   29e08:	e0bffe17 	ldw	r2,-8(fp)
   29e0c:	10c00015 	stw	r3,0(r2)
   29e10:	e0bffe17 	ldw	r2,-8(fp)
   29e14:	10800104 	addi	r2,r2,4
   29e18:	e0bffe15 	stw	r2,-8(fp)
   29e1c:	e0bffd17 	ldw	r2,-12(fp)
   29e20:	10800104 	addi	r2,r2,4
   29e24:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   29e28:	e0fffe17 	ldw	r3,-8(fp)
   29e2c:	e0bfff17 	ldw	r2,-4(fp)
   29e30:	18bff31e 	bne	r3,r2,29e00 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   29e34:	e037883a 	mov	sp,fp
   29e38:	df000017 	ldw	fp,0(sp)
   29e3c:	dec00104 	addi	sp,sp,4
   29e40:	f800283a 	ret

00029e44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   29e44:	defffe04 	addi	sp,sp,-8
   29e48:	dfc00115 	stw	ra,4(sp)
   29e4c:	df000015 	stw	fp,0(sp)
   29e50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   29e54:	010000f4 	movhi	r4,3
   29e58:	21394404 	addi	r4,r4,-6896
   29e5c:	014000f4 	movhi	r5,3
   29e60:	2972ae04 	addi	r5,r5,-13640
   29e64:	018000f4 	movhi	r6,3
   29e68:	31b94404 	addi	r6,r6,-6896
   29e6c:	0029dd80 	call	29dd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   29e70:	010000b4 	movhi	r4,2
   29e74:	21000804 	addi	r4,r4,32
   29e78:	014000b4 	movhi	r5,2
   29e7c:	29400804 	addi	r5,r5,32
   29e80:	018000b4 	movhi	r6,2
   29e84:	31806e04 	addi	r6,r6,440
   29e88:	0029dd80 	call	29dd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   29e8c:	010000f4 	movhi	r4,3
   29e90:	2131d504 	addi	r4,r4,-14508
   29e94:	014000f4 	movhi	r5,3
   29e98:	2971d504 	addi	r5,r5,-14508
   29e9c:	018000f4 	movhi	r6,3
   29ea0:	31b2ae04 	addi	r6,r6,-13640
   29ea4:	0029dd80 	call	29dd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   29ea8:	002b6b40 	call	2b6b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   29eac:	002b8780 	call	2b878 <alt_icache_flush_all>
}
   29eb0:	e037883a 	mov	sp,fp
   29eb4:	dfc00117 	ldw	ra,4(sp)
   29eb8:	df000017 	ldw	fp,0(sp)
   29ebc:	dec00204 	addi	sp,sp,8
   29ec0:	f800283a 	ret

00029ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29ec4:	defffe04 	addi	sp,sp,-8
   29ec8:	dfc00115 	stw	ra,4(sp)
   29ecc:	df000015 	stw	fp,0(sp)
   29ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29ed4:	008000f4 	movhi	r2,3
   29ed8:	10b93f04 	addi	r2,r2,-6916
   29edc:	10800017 	ldw	r2,0(r2)
   29ee0:	10000526 	beq	r2,zero,29ef8 <alt_get_errno+0x34>
   29ee4:	008000f4 	movhi	r2,3
   29ee8:	10b93f04 	addi	r2,r2,-6916
   29eec:	10800017 	ldw	r2,0(r2)
   29ef0:	103ee83a 	callr	r2
   29ef4:	00000206 	br	29f00 <alt_get_errno+0x3c>
   29ef8:	008000f4 	movhi	r2,3
   29efc:	10bfe004 	addi	r2,r2,-128
}
   29f00:	e037883a 	mov	sp,fp
   29f04:	dfc00117 	ldw	ra,4(sp)
   29f08:	df000017 	ldw	fp,0(sp)
   29f0c:	dec00204 	addi	sp,sp,8
   29f10:	f800283a 	ret

00029f14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   29f14:	defff904 	addi	sp,sp,-28
   29f18:	dfc00615 	stw	ra,24(sp)
   29f1c:	df000515 	stw	fp,20(sp)
   29f20:	df000504 	addi	fp,sp,20
   29f24:	e13ffd15 	stw	r4,-12(fp)
   29f28:	e17ffe15 	stw	r5,-8(fp)
   29f2c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   29f30:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   29f34:	e0bffd17 	ldw	r2,-12(fp)
   29f38:	10000716 	blt	r2,zero,29f58 <lseek+0x44>
   29f3c:	e13ffd17 	ldw	r4,-12(fp)
   29f40:	01400304 	movi	r5,12
   29f44:	00294380 	call	29438 <__mulsi3>
   29f48:	00c000f4 	movhi	r3,3
   29f4c:	18f4bd04 	addi	r3,r3,-11532
   29f50:	10c5883a 	add	r2,r2,r3
   29f54:	00000106 	br	29f5c <lseek+0x48>
   29f58:	0005883a 	mov	r2,zero
   29f5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   29f60:	e0bffc17 	ldw	r2,-16(fp)
   29f64:	10001026 	beq	r2,zero,29fa8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   29f68:	e0bffc17 	ldw	r2,-16(fp)
   29f6c:	10800017 	ldw	r2,0(r2)
   29f70:	10800717 	ldw	r2,28(r2)
   29f74:	10000926 	beq	r2,zero,29f9c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   29f78:	e0bffc17 	ldw	r2,-16(fp)
   29f7c:	10800017 	ldw	r2,0(r2)
   29f80:	10800717 	ldw	r2,28(r2)
   29f84:	e13ffc17 	ldw	r4,-16(fp)
   29f88:	e17ffe17 	ldw	r5,-8(fp)
   29f8c:	e1bfff17 	ldw	r6,-4(fp)
   29f90:	103ee83a 	callr	r2
   29f94:	e0bffb15 	stw	r2,-20(fp)
   29f98:	00000506 	br	29fb0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   29f9c:	00bfde84 	movi	r2,-134
   29fa0:	e0bffb15 	stw	r2,-20(fp)
   29fa4:	00000206 	br	29fb0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   29fa8:	00bfebc4 	movi	r2,-81
   29fac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   29fb0:	e0bffb17 	ldw	r2,-20(fp)
   29fb4:	1000060e 	bge	r2,zero,29fd0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   29fb8:	0029ec40 	call	29ec4 <alt_get_errno>
   29fbc:	e0fffb17 	ldw	r3,-20(fp)
   29fc0:	00c7c83a 	sub	r3,zero,r3
   29fc4:	10c00015 	stw	r3,0(r2)
    rc = -1;
   29fc8:	00bfffc4 	movi	r2,-1
   29fcc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   29fd0:	e0bffb17 	ldw	r2,-20(fp)
}
   29fd4:	e037883a 	mov	sp,fp
   29fd8:	dfc00117 	ldw	ra,4(sp)
   29fdc:	df000017 	ldw	fp,0(sp)
   29fe0:	dec00204 	addi	sp,sp,8
   29fe4:	f800283a 	ret

00029fe8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   29fe8:	defffd04 	addi	sp,sp,-12
   29fec:	dfc00215 	stw	ra,8(sp)
   29ff0:	df000115 	stw	fp,4(sp)
   29ff4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   29ff8:	0009883a 	mov	r4,zero
   29ffc:	002a48c0 	call	2a48c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2a000:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2a004:	002a4c00 	call	2a4c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2a008:	010000f4 	movhi	r4,3
   2a00c:	2132a404 	addi	r4,r4,-13680
   2a010:	014000f4 	movhi	r5,3
   2a014:	2972a404 	addi	r5,r5,-13680
   2a018:	018000f4 	movhi	r6,3
   2a01c:	31b2a404 	addi	r6,r6,-13680
   2a020:	002bc3c0 	call	2bc3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2a024:	002b7c00 	call	2b7c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2a028:	010000f4 	movhi	r4,3
   2a02c:	212e0704 	addi	r4,r4,-18404
   2a030:	002c3800 	call	2c380 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2a034:	d126ac17 	ldw	r4,-25936(gp)
   2a038:	d0e6ad17 	ldw	r3,-25932(gp)
   2a03c:	d0a6ae17 	ldw	r2,-25928(gp)
   2a040:	180b883a 	mov	r5,r3
   2a044:	100d883a 	mov	r6,r2
   2a048:	00202b00 	call	202b0 <main>
   2a04c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2a050:	01000044 	movi	r4,1
   2a054:	0029aec0 	call	29aec <close>
  exit (result);
   2a058:	e13fff17 	ldw	r4,-4(fp)
   2a05c:	002c3940 	call	2c394 <exit>

0002a060 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2a060:	defffe04 	addi	sp,sp,-8
   2a064:	df000115 	stw	fp,4(sp)
   2a068:	df000104 	addi	fp,sp,4
   2a06c:	e13fff15 	stw	r4,-4(fp)
}
   2a070:	e037883a 	mov	sp,fp
   2a074:	df000017 	ldw	fp,0(sp)
   2a078:	dec00104 	addi	sp,sp,4
   2a07c:	f800283a 	ret

0002a080 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2a080:	defffe04 	addi	sp,sp,-8
   2a084:	df000115 	stw	fp,4(sp)
   2a088:	df000104 	addi	fp,sp,4
   2a08c:	e13fff15 	stw	r4,-4(fp)
}
   2a090:	e037883a 	mov	sp,fp
   2a094:	df000017 	ldw	fp,0(sp)
   2a098:	dec00104 	addi	sp,sp,4
   2a09c:	f800283a 	ret

0002a0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a0a0:	defffe04 	addi	sp,sp,-8
   2a0a4:	dfc00115 	stw	ra,4(sp)
   2a0a8:	df000015 	stw	fp,0(sp)
   2a0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a0b0:	008000f4 	movhi	r2,3
   2a0b4:	10b93f04 	addi	r2,r2,-6916
   2a0b8:	10800017 	ldw	r2,0(r2)
   2a0bc:	10000526 	beq	r2,zero,2a0d4 <alt_get_errno+0x34>
   2a0c0:	008000f4 	movhi	r2,3
   2a0c4:	10b93f04 	addi	r2,r2,-6916
   2a0c8:	10800017 	ldw	r2,0(r2)
   2a0cc:	103ee83a 	callr	r2
   2a0d0:	00000206 	br	2a0dc <alt_get_errno+0x3c>
   2a0d4:	008000f4 	movhi	r2,3
   2a0d8:	10bfe004 	addi	r2,r2,-128
}
   2a0dc:	e037883a 	mov	sp,fp
   2a0e0:	dfc00117 	ldw	ra,4(sp)
   2a0e4:	df000017 	ldw	fp,0(sp)
   2a0e8:	dec00204 	addi	sp,sp,8
   2a0ec:	f800283a 	ret

0002a0f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2a0f0:	defff904 	addi	sp,sp,-28
   2a0f4:	dfc00615 	stw	ra,24(sp)
   2a0f8:	df000515 	stw	fp,20(sp)
   2a0fc:	df000504 	addi	fp,sp,20
   2a100:	e13ffd15 	stw	r4,-12(fp)
   2a104:	e17ffe15 	stw	r5,-8(fp)
   2a108:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a10c:	e0bffd17 	ldw	r2,-12(fp)
   2a110:	10000716 	blt	r2,zero,2a130 <read+0x40>
   2a114:	e13ffd17 	ldw	r4,-12(fp)
   2a118:	01400304 	movi	r5,12
   2a11c:	00294380 	call	29438 <__mulsi3>
   2a120:	00c000f4 	movhi	r3,3
   2a124:	18f4bd04 	addi	r3,r3,-11532
   2a128:	10c5883a 	add	r2,r2,r3
   2a12c:	00000106 	br	2a134 <read+0x44>
   2a130:	0005883a 	mov	r2,zero
   2a134:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a138:	e0bffb17 	ldw	r2,-20(fp)
   2a13c:	10002026 	beq	r2,zero,2a1c0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a140:	e0bffb17 	ldw	r2,-20(fp)
   2a144:	10800217 	ldw	r2,8(r2)
   2a148:	108000cc 	andi	r2,r2,3
   2a14c:	10800060 	cmpeqi	r2,r2,1
   2a150:	1000171e 	bne	r2,zero,2a1b0 <read+0xc0>
        (fd->dev->read))
   2a154:	e0bffb17 	ldw	r2,-20(fp)
   2a158:	10800017 	ldw	r2,0(r2)
   2a15c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a160:	10001326 	beq	r2,zero,2a1b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2a164:	e0bffb17 	ldw	r2,-20(fp)
   2a168:	10800017 	ldw	r2,0(r2)
   2a16c:	10c00517 	ldw	r3,20(r2)
   2a170:	e0bfff17 	ldw	r2,-4(fp)
   2a174:	e13ffb17 	ldw	r4,-20(fp)
   2a178:	e17ffe17 	ldw	r5,-8(fp)
   2a17c:	100d883a 	mov	r6,r2
   2a180:	183ee83a 	callr	r3
   2a184:	e0bffc15 	stw	r2,-16(fp)
   2a188:	e0bffc17 	ldw	r2,-16(fp)
   2a18c:	1000060e 	bge	r2,zero,2a1a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2a190:	002a0a00 	call	2a0a0 <alt_get_errno>
   2a194:	e0fffc17 	ldw	r3,-16(fp)
   2a198:	00c7c83a 	sub	r3,zero,r3
   2a19c:	10c00015 	stw	r3,0(r2)
          return -1;
   2a1a0:	00bfffc4 	movi	r2,-1
   2a1a4:	00000a06 	br	2a1d0 <read+0xe0>
        }
        return rval;
   2a1a8:	e0bffc17 	ldw	r2,-16(fp)
   2a1ac:	00000806 	br	2a1d0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2a1b0:	002a0a00 	call	2a0a0 <alt_get_errno>
   2a1b4:	00c00344 	movi	r3,13
   2a1b8:	10c00015 	stw	r3,0(r2)
   2a1bc:	00000306 	br	2a1cc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2a1c0:	002a0a00 	call	2a0a0 <alt_get_errno>
   2a1c4:	00c01444 	movi	r3,81
   2a1c8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a1cc:	00bfffc4 	movi	r2,-1
}
   2a1d0:	e037883a 	mov	sp,fp
   2a1d4:	dfc00117 	ldw	ra,4(sp)
   2a1d8:	df000017 	ldw	fp,0(sp)
   2a1dc:	dec00204 	addi	sp,sp,8
   2a1e0:	f800283a 	ret

0002a1e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2a1e4:	defffc04 	addi	sp,sp,-16
   2a1e8:	dfc00315 	stw	ra,12(sp)
   2a1ec:	df000215 	stw	fp,8(sp)
   2a1f0:	dc000115 	stw	r16,4(sp)
   2a1f4:	df000104 	addi	fp,sp,4
   2a1f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2a1fc:	e0bfff17 	ldw	r2,-4(fp)
   2a200:	108000d0 	cmplti	r2,r2,3
   2a204:	1000111e 	bne	r2,zero,2a24c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2a208:	040000f4 	movhi	r16,3
   2a20c:	8434bd04 	addi	r16,r16,-11532
   2a210:	e0bfff17 	ldw	r2,-4(fp)
   2a214:	1009883a 	mov	r4,r2
   2a218:	01400304 	movi	r5,12
   2a21c:	00294380 	call	29438 <__mulsi3>
   2a220:	8085883a 	add	r2,r16,r2
   2a224:	10800204 	addi	r2,r2,8
   2a228:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2a22c:	040000f4 	movhi	r16,3
   2a230:	8434bd04 	addi	r16,r16,-11532
   2a234:	e0bfff17 	ldw	r2,-4(fp)
   2a238:	1009883a 	mov	r4,r2
   2a23c:	01400304 	movi	r5,12
   2a240:	00294380 	call	29438 <__mulsi3>
   2a244:	8085883a 	add	r2,r16,r2
   2a248:	10000015 	stw	zero,0(r2)
  }
}
   2a24c:	e037883a 	mov	sp,fp
   2a250:	dfc00217 	ldw	ra,8(sp)
   2a254:	df000117 	ldw	fp,4(sp)
   2a258:	dc000017 	ldw	r16,0(sp)
   2a25c:	dec00304 	addi	sp,sp,12
   2a260:	f800283a 	ret

0002a264 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2a264:	defff904 	addi	sp,sp,-28
   2a268:	df000615 	stw	fp,24(sp)
   2a26c:	df000604 	addi	fp,sp,24
   2a270:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a274:	0005303a 	rdctl	r2,status
   2a278:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a27c:	e0fffc17 	ldw	r3,-16(fp)
   2a280:	00bfff84 	movi	r2,-2
   2a284:	1884703a 	and	r2,r3,r2
   2a288:	1001703a 	wrctl	status,r2
  
  return context;
   2a28c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2a290:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2a294:	d0a00b17 	ldw	r2,-32724(gp)
   2a298:	10c000c4 	addi	r3,r2,3
   2a29c:	00bfff04 	movi	r2,-4
   2a2a0:	1884703a 	and	r2,r3,r2
   2a2a4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2a2a8:	d0e00b17 	ldw	r3,-32724(gp)
   2a2ac:	e0bfff17 	ldw	r2,-4(fp)
   2a2b0:	1885883a 	add	r2,r3,r2
   2a2b4:	00c00134 	movhi	r3,4
   2a2b8:	18c00004 	addi	r3,r3,0
   2a2bc:	1880062e 	bgeu	r3,r2,2a2d8 <sbrk+0x74>
   2a2c0:	e0bffa17 	ldw	r2,-24(fp)
   2a2c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a2c8:	e0bffd17 	ldw	r2,-12(fp)
   2a2cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2a2d0:	00bfffc4 	movi	r2,-1
   2a2d4:	00000b06 	br	2a304 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2a2d8:	d0a00b17 	ldw	r2,-32724(gp)
   2a2dc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2a2e0:	d0e00b17 	ldw	r3,-32724(gp)
   2a2e4:	e0bfff17 	ldw	r2,-4(fp)
   2a2e8:	1885883a 	add	r2,r3,r2
   2a2ec:	d0a00b15 	stw	r2,-32724(gp)
   2a2f0:	e0bffa17 	ldw	r2,-24(fp)
   2a2f4:	e0bffe15 	stw	r2,-8(fp)
   2a2f8:	e0bffe17 	ldw	r2,-8(fp)
   2a2fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2a300:	e0bffb17 	ldw	r2,-20(fp)
} 
   2a304:	e037883a 	mov	sp,fp
   2a308:	df000017 	ldw	fp,0(sp)
   2a30c:	dec00104 	addi	sp,sp,4
   2a310:	f800283a 	ret

0002a314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a314:	defffe04 	addi	sp,sp,-8
   2a318:	dfc00115 	stw	ra,4(sp)
   2a31c:	df000015 	stw	fp,0(sp)
   2a320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2a324:	008000f4 	movhi	r2,3
   2a328:	10b93f04 	addi	r2,r2,-6916
   2a32c:	10800017 	ldw	r2,0(r2)
   2a330:	10000526 	beq	r2,zero,2a348 <alt_get_errno+0x34>
   2a334:	008000f4 	movhi	r2,3
   2a338:	10b93f04 	addi	r2,r2,-6916
   2a33c:	10800017 	ldw	r2,0(r2)
   2a340:	103ee83a 	callr	r2
   2a344:	00000206 	br	2a350 <alt_get_errno+0x3c>
   2a348:	008000f4 	movhi	r2,3
   2a34c:	10bfe004 	addi	r2,r2,-128
}
   2a350:	e037883a 	mov	sp,fp
   2a354:	dfc00117 	ldw	ra,4(sp)
   2a358:	df000017 	ldw	fp,0(sp)
   2a35c:	dec00204 	addi	sp,sp,8
   2a360:	f800283a 	ret

0002a364 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2a364:	defff904 	addi	sp,sp,-28
   2a368:	dfc00615 	stw	ra,24(sp)
   2a36c:	df000515 	stw	fp,20(sp)
   2a370:	df000504 	addi	fp,sp,20
   2a374:	e13ffd15 	stw	r4,-12(fp)
   2a378:	e17ffe15 	stw	r5,-8(fp)
   2a37c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a380:	e0bffd17 	ldw	r2,-12(fp)
   2a384:	10000716 	blt	r2,zero,2a3a4 <write+0x40>
   2a388:	e13ffd17 	ldw	r4,-12(fp)
   2a38c:	01400304 	movi	r5,12
   2a390:	00294380 	call	29438 <__mulsi3>
   2a394:	00c000f4 	movhi	r3,3
   2a398:	18f4bd04 	addi	r3,r3,-11532
   2a39c:	10c5883a 	add	r2,r2,r3
   2a3a0:	00000106 	br	2a3a8 <write+0x44>
   2a3a4:	0005883a 	mov	r2,zero
   2a3a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a3ac:	e0bffb17 	ldw	r2,-20(fp)
   2a3b0:	10001f26 	beq	r2,zero,2a430 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2a3b4:	e0bffb17 	ldw	r2,-20(fp)
   2a3b8:	10800217 	ldw	r2,8(r2)
   2a3bc:	108000cc 	andi	r2,r2,3
   2a3c0:	10001726 	beq	r2,zero,2a420 <write+0xbc>
   2a3c4:	e0bffb17 	ldw	r2,-20(fp)
   2a3c8:	10800017 	ldw	r2,0(r2)
   2a3cc:	10800617 	ldw	r2,24(r2)
   2a3d0:	10001326 	beq	r2,zero,2a420 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2a3d4:	e0bffb17 	ldw	r2,-20(fp)
   2a3d8:	10800017 	ldw	r2,0(r2)
   2a3dc:	10c00617 	ldw	r3,24(r2)
   2a3e0:	e0bfff17 	ldw	r2,-4(fp)
   2a3e4:	e13ffb17 	ldw	r4,-20(fp)
   2a3e8:	e17ffe17 	ldw	r5,-8(fp)
   2a3ec:	100d883a 	mov	r6,r2
   2a3f0:	183ee83a 	callr	r3
   2a3f4:	e0bffc15 	stw	r2,-16(fp)
   2a3f8:	e0bffc17 	ldw	r2,-16(fp)
   2a3fc:	1000060e 	bge	r2,zero,2a418 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2a400:	002a3140 	call	2a314 <alt_get_errno>
   2a404:	e0fffc17 	ldw	r3,-16(fp)
   2a408:	00c7c83a 	sub	r3,zero,r3
   2a40c:	10c00015 	stw	r3,0(r2)
        return -1;
   2a410:	00bfffc4 	movi	r2,-1
   2a414:	00000a06 	br	2a440 <write+0xdc>
      }
      return rval;
   2a418:	e0bffc17 	ldw	r2,-16(fp)
   2a41c:	00000806 	br	2a440 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2a420:	002a3140 	call	2a314 <alt_get_errno>
   2a424:	00c00344 	movi	r3,13
   2a428:	10c00015 	stw	r3,0(r2)
   2a42c:	00000306 	br	2a43c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2a430:	002a3140 	call	2a314 <alt_get_errno>
   2a434:	00c01444 	movi	r3,81
   2a438:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2a43c:	00bfffc4 	movi	r2,-1
}
   2a440:	e037883a 	mov	sp,fp
   2a444:	dfc00117 	ldw	ra,4(sp)
   2a448:	df000017 	ldw	fp,0(sp)
   2a44c:	dec00204 	addi	sp,sp,8
   2a450:	f800283a 	ret

0002a454 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2a454:	defffd04 	addi	sp,sp,-12
   2a458:	dfc00215 	stw	ra,8(sp)
   2a45c:	df000115 	stw	fp,4(sp)
   2a460:	df000104 	addi	fp,sp,4
   2a464:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2a468:	e13fff17 	ldw	r4,-4(fp)
   2a46c:	014000f4 	movhi	r5,3
   2a470:	29793c04 	addi	r5,r5,-6928
   2a474:	002b7200 	call	2b720 <alt_dev_llist_insert>
}
   2a478:	e037883a 	mov	sp,fp
   2a47c:	dfc00117 	ldw	ra,4(sp)
   2a480:	df000017 	ldw	fp,0(sp)
   2a484:	dec00204 	addi	sp,sp,8
   2a488:	f800283a 	ret

0002a48c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2a48c:	defffd04 	addi	sp,sp,-12
   2a490:	dfc00215 	stw	ra,8(sp)
   2a494:	df000115 	stw	fp,4(sp)
   2a498:	df000104 	addi	fp,sp,4
   2a49c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   2a4a0:	002c0e80 	call	2c0e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2a4a4:	00800044 	movi	r2,1
   2a4a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2a4ac:	e037883a 	mov	sp,fp
   2a4b0:	dfc00117 	ldw	ra,4(sp)
   2a4b4:	df000017 	ldw	fp,0(sp)
   2a4b8:	dec00204 	addi	sp,sp,8
   2a4bc:	f800283a 	ret

0002a4c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2a4c0:	defffe04 	addi	sp,sp,-8
   2a4c4:	dfc00115 	stw	ra,4(sp)
   2a4c8:	df000015 	stw	fp,0(sp)
   2a4cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2a4d0:	01000134 	movhi	r4,4
   2a4d4:	21040804 	addi	r4,r4,4128
   2a4d8:	000b883a 	mov	r5,zero
   2a4dc:	01800044 	movi	r6,1
   2a4e0:	01c0fa04 	movi	r7,1000
   2a4e4:	002b4ec0 	call	2b4ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_SHARED, fifo_shared);
   2a4e8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2a4ec:	010000f4 	movhi	r4,3
   2a4f0:	21352704 	addi	r4,r4,-11108
   2a4f4:	000b883a 	mov	r5,zero
   2a4f8:	01800404 	movi	r6,16
   2a4fc:	002ab780 	call	2ab78 <altera_avalon_jtag_uart_init>
   2a500:	010000f4 	movhi	r4,3
   2a504:	21351d04 	addi	r4,r4,-11148
   2a508:	002a4540 	call	2a454 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_0, sysid_0);
   2a50c:	0001883a 	nop
}
   2a510:	e037883a 	mov	sp,fp
   2a514:	dfc00117 	ldw	ra,4(sp)
   2a518:	df000017 	ldw	fp,0(sp)
   2a51c:	dec00204 	addi	sp,sp,8
   2a520:	f800283a 	ret

0002a524 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   2a524:	defffa04 	addi	sp,sp,-24
   2a528:	dfc00515 	stw	ra,20(sp)
   2a52c:	df000415 	stw	fp,16(sp)
   2a530:	df000404 	addi	fp,sp,16
   2a534:	e13ffc15 	stw	r4,-16(fp)
   2a538:	e17ffd15 	stw	r5,-12(fp)
   2a53c:	e1bffe15 	stw	r6,-8(fp)
   2a540:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   2a544:	e13ffc17 	ldw	r4,-16(fp)
   2a548:	01400fc4 	movi	r5,63
   2a54c:	002a6f00 	call	2a6f0 <altera_avalon_fifo_clear_event>
   2a550:	10000226 	beq	r2,zero,2a55c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2a554:	00bfffc4 	movi	r2,-1
   2a558:	00001306 	br	2a5a8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   2a55c:	e13ffc17 	ldw	r4,-16(fp)
   2a560:	e17ffd17 	ldw	r5,-12(fp)
   2a564:	002a74c0 	call	2a74c <altera_avalon_fifo_write_ienable>
   2a568:	10000226 	beq	r2,zero,2a574 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2a56c:	00bfff84 	movi	r2,-2
   2a570:	00000d06 	br	2a5a8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   2a574:	e13ffc17 	ldw	r4,-16(fp)
   2a578:	e17fff17 	ldw	r5,-4(fp)
   2a57c:	002a7a40 	call	2a7a4 <altera_avalon_fifo_write_almostfull>
   2a580:	10000226 	beq	r2,zero,2a58c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a584:	00bfff44 	movi	r2,-3
   2a588:	00000706 	br	2a5a8 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   2a58c:	e13ffc17 	ldw	r4,-16(fp)
   2a590:	e17ffe17 	ldw	r5,-8(fp)
   2a594:	002a7fc0 	call	2a7fc <altera_avalon_fifo_write_almostempty>
   2a598:	10000226 	beq	r2,zero,2a5a4 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a59c:	00bfff44 	movi	r2,-3
   2a5a0:	00000106 	br	2a5a8 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   2a5a4:	0005883a 	mov	r2,zero
}
   2a5a8:	e037883a 	mov	sp,fp
   2a5ac:	dfc00117 	ldw	ra,4(sp)
   2a5b0:	df000017 	ldw	fp,0(sp)
   2a5b4:	dec00204 	addi	sp,sp,8
   2a5b8:	f800283a 	ret

0002a5bc <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   2a5bc:	defffd04 	addi	sp,sp,-12
   2a5c0:	df000215 	stw	fp,8(sp)
   2a5c4:	df000204 	addi	fp,sp,8
   2a5c8:	e13ffe15 	stw	r4,-8(fp)
   2a5cc:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   2a5d0:	e0bffe17 	ldw	r2,-8(fp)
   2a5d4:	10800104 	addi	r2,r2,4
   2a5d8:	10800037 	ldwio	r2,0(r2)
   2a5dc:	1007883a 	mov	r3,r2
   2a5e0:	e0bfff17 	ldw	r2,-4(fp)
   2a5e4:	1884703a 	and	r2,r3,r2
}
   2a5e8:	e037883a 	mov	sp,fp
   2a5ec:	df000017 	ldw	fp,0(sp)
   2a5f0:	dec00104 	addi	sp,sp,4
   2a5f4:	f800283a 	ret

0002a5f8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   2a5f8:	defffd04 	addi	sp,sp,-12
   2a5fc:	df000215 	stw	fp,8(sp)
   2a600:	df000204 	addi	fp,sp,8
   2a604:	e13ffe15 	stw	r4,-8(fp)
   2a608:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   2a60c:	e0bffe17 	ldw	r2,-8(fp)
   2a610:	10800304 	addi	r2,r2,12
   2a614:	10800037 	ldwio	r2,0(r2)
   2a618:	1007883a 	mov	r3,r2
   2a61c:	e0bfff17 	ldw	r2,-4(fp)
   2a620:	1884703a 	and	r2,r3,r2
}
   2a624:	e037883a 	mov	sp,fp
   2a628:	df000017 	ldw	fp,0(sp)
   2a62c:	dec00104 	addi	sp,sp,4
   2a630:	f800283a 	ret

0002a634 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   2a634:	defffe04 	addi	sp,sp,-8
   2a638:	df000115 	stw	fp,4(sp)
   2a63c:	df000104 	addi	fp,sp,4
   2a640:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   2a644:	e0bfff17 	ldw	r2,-4(fp)
   2a648:	10800404 	addi	r2,r2,16
   2a64c:	10800037 	ldwio	r2,0(r2)
}
   2a650:	e037883a 	mov	sp,fp
   2a654:	df000017 	ldw	fp,0(sp)
   2a658:	dec00104 	addi	sp,sp,4
   2a65c:	f800283a 	ret

0002a660 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   2a660:	defffe04 	addi	sp,sp,-8
   2a664:	df000115 	stw	fp,4(sp)
   2a668:	df000104 	addi	fp,sp,4
   2a66c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   2a670:	e0bfff17 	ldw	r2,-4(fp)
   2a674:	10800504 	addi	r2,r2,20
   2a678:	10800037 	ldwio	r2,0(r2)
}
   2a67c:	e037883a 	mov	sp,fp
   2a680:	df000017 	ldw	fp,0(sp)
   2a684:	dec00104 	addi	sp,sp,4
   2a688:	f800283a 	ret

0002a68c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   2a68c:	defffd04 	addi	sp,sp,-12
   2a690:	df000215 	stw	fp,8(sp)
   2a694:	df000204 	addi	fp,sp,8
   2a698:	e13ffe15 	stw	r4,-8(fp)
   2a69c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   2a6a0:	e0bffe17 	ldw	r2,-8(fp)
   2a6a4:	10800204 	addi	r2,r2,8
   2a6a8:	10800037 	ldwio	r2,0(r2)
   2a6ac:	1007883a 	mov	r3,r2
   2a6b0:	e0bfff17 	ldw	r2,-4(fp)
   2a6b4:	1884703a 	and	r2,r3,r2
}
   2a6b8:	e037883a 	mov	sp,fp
   2a6bc:	df000017 	ldw	fp,0(sp)
   2a6c0:	dec00104 	addi	sp,sp,4
   2a6c4:	f800283a 	ret

0002a6c8 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   2a6c8:	defffe04 	addi	sp,sp,-8
   2a6cc:	df000115 	stw	fp,4(sp)
   2a6d0:	df000104 	addi	fp,sp,4
   2a6d4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   2a6d8:	e0bfff17 	ldw	r2,-4(fp)
   2a6dc:	10800037 	ldwio	r2,0(r2)
}
   2a6e0:	e037883a 	mov	sp,fp
   2a6e4:	df000017 	ldw	fp,0(sp)
   2a6e8:	dec00104 	addi	sp,sp,4
   2a6ec:	f800283a 	ret

0002a6f0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   2a6f0:	defffd04 	addi	sp,sp,-12
   2a6f4:	df000215 	stw	fp,8(sp)
   2a6f8:	df000204 	addi	fp,sp,8
   2a6fc:	e13ffe15 	stw	r4,-8(fp)
   2a700:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   2a704:	e0bffe17 	ldw	r2,-8(fp)
   2a708:	10800204 	addi	r2,r2,8
   2a70c:	e0ffff17 	ldw	r3,-4(fp)
   2a710:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   2a714:	e0bffe17 	ldw	r2,-8(fp)
   2a718:	10800204 	addi	r2,r2,8
   2a71c:	10800037 	ldwio	r2,0(r2)
   2a720:	1007883a 	mov	r3,r2
   2a724:	e0bfff17 	ldw	r2,-4(fp)
   2a728:	1884703a 	and	r2,r3,r2
   2a72c:	1000021e 	bne	r2,zero,2a738 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   2a730:	0005883a 	mov	r2,zero
   2a734:	00000106 	br	2a73c <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2a738:	00bfffc4 	movi	r2,-1
}
   2a73c:	e037883a 	mov	sp,fp
   2a740:	df000017 	ldw	fp,0(sp)
   2a744:	dec00104 	addi	sp,sp,4
   2a748:	f800283a 	ret

0002a74c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   2a74c:	defffd04 	addi	sp,sp,-12
   2a750:	df000215 	stw	fp,8(sp)
   2a754:	df000204 	addi	fp,sp,8
   2a758:	e13ffe15 	stw	r4,-8(fp)
   2a75c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   2a760:	e0bffe17 	ldw	r2,-8(fp)
   2a764:	10800304 	addi	r2,r2,12
   2a768:	e0ffff17 	ldw	r3,-4(fp)
   2a76c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   2a770:	e0bffe17 	ldw	r2,-8(fp)
   2a774:	10800304 	addi	r2,r2,12
   2a778:	10800037 	ldwio	r2,0(r2)
   2a77c:	1007883a 	mov	r3,r2
   2a780:	e0bfff17 	ldw	r2,-4(fp)
   2a784:	1880021e 	bne	r3,r2,2a790 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a788:	0005883a 	mov	r2,zero
   2a78c:	00000106 	br	2a794 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2a790:	00bfff84 	movi	r2,-2
}
   2a794:	e037883a 	mov	sp,fp
   2a798:	df000017 	ldw	fp,0(sp)
   2a79c:	dec00104 	addi	sp,sp,4
   2a7a0:	f800283a 	ret

0002a7a4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   2a7a4:	defffd04 	addi	sp,sp,-12
   2a7a8:	df000215 	stw	fp,8(sp)
   2a7ac:	df000204 	addi	fp,sp,8
   2a7b0:	e13ffe15 	stw	r4,-8(fp)
   2a7b4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   2a7b8:	e0bffe17 	ldw	r2,-8(fp)
   2a7bc:	10800404 	addi	r2,r2,16
   2a7c0:	e0ffff17 	ldw	r3,-4(fp)
   2a7c4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   2a7c8:	e0bffe17 	ldw	r2,-8(fp)
   2a7cc:	10800404 	addi	r2,r2,16
   2a7d0:	10800037 	ldwio	r2,0(r2)
   2a7d4:	1007883a 	mov	r3,r2
   2a7d8:	e0bfff17 	ldw	r2,-4(fp)
   2a7dc:	1880021e 	bne	r3,r2,2a7e8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a7e0:	0005883a 	mov	r2,zero
   2a7e4:	00000106 	br	2a7ec <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a7e8:	00bfff44 	movi	r2,-3
}
   2a7ec:	e037883a 	mov	sp,fp
   2a7f0:	df000017 	ldw	fp,0(sp)
   2a7f4:	dec00104 	addi	sp,sp,4
   2a7f8:	f800283a 	ret

0002a7fc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   2a7fc:	defffd04 	addi	sp,sp,-12
   2a800:	df000215 	stw	fp,8(sp)
   2a804:	df000204 	addi	fp,sp,8
   2a808:	e13ffe15 	stw	r4,-8(fp)
   2a80c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   2a810:	e0bffe17 	ldw	r2,-8(fp)
   2a814:	10800504 	addi	r2,r2,20
   2a818:	e0ffff17 	ldw	r3,-4(fp)
   2a81c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   2a820:	e0bffe17 	ldw	r2,-8(fp)
   2a824:	10800504 	addi	r2,r2,20
   2a828:	10800037 	ldwio	r2,0(r2)
   2a82c:	1007883a 	mov	r3,r2
   2a830:	e0bfff17 	ldw	r2,-4(fp)
   2a834:	1880021e 	bne	r3,r2,2a840 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2a838:	0005883a 	mov	r2,zero
   2a83c:	00000106 	br	2a844 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2a840:	00bfff44 	movi	r2,-3
}
   2a844:	e037883a 	mov	sp,fp
   2a848:	df000017 	ldw	fp,0(sp)
   2a84c:	dec00104 	addi	sp,sp,4
   2a850:	f800283a 	ret

0002a854 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   2a854:	defffb04 	addi	sp,sp,-20
   2a858:	dfc00415 	stw	ra,16(sp)
   2a85c:	df000315 	stw	fp,12(sp)
   2a860:	df000304 	addi	fp,sp,12
   2a864:	e13ffd15 	stw	r4,-12(fp)
   2a868:	e17ffe15 	stw	r5,-8(fp)
   2a86c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2a870:	e13ffe17 	ldw	r4,-8(fp)
   2a874:	01400044 	movi	r5,1
   2a878:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2a87c:	1000051e 	bne	r2,zero,2a894 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   2a880:	e0bffd17 	ldw	r2,-12(fp)
   2a884:	e0ffff17 	ldw	r3,-4(fp)
   2a888:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   2a88c:	0005883a 	mov	r2,zero
   2a890:	00000106 	br	2a898 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   2a894:	00bfff04 	movi	r2,-4
    }
}
   2a898:	e037883a 	mov	sp,fp
   2a89c:	dfc00117 	ldw	ra,4(sp)
   2a8a0:	df000017 	ldw	fp,0(sp)
   2a8a4:	dec00204 	addi	sp,sp,8
   2a8a8:	f800283a 	ret

0002a8ac <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   2a8ac:	defffa04 	addi	sp,sp,-24
   2a8b0:	dfc00515 	stw	ra,20(sp)
   2a8b4:	df000415 	stw	fp,16(sp)
   2a8b8:	df000404 	addi	fp,sp,16
   2a8bc:	e13ffd15 	stw	r4,-12(fp)
   2a8c0:	e17ffe15 	stw	r5,-8(fp)
   2a8c4:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   2a8c8:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   2a8cc:	e0bfff17 	ldw	r2,-4(fp)
   2a8d0:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2a8d4:	e13ffe17 	ldw	r4,-8(fp)
   2a8d8:	01400084 	movi	r5,2
   2a8dc:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2a8e0:	1000071e 	bne	r2,zero,2a900 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   2a8e4:	e13ffe17 	ldw	r4,-8(fp)
   2a8e8:	002a6c80 	call	2a6c8 <altera_avalon_fifo_read_level>
   2a8ec:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2a8f0:	e0bffd17 	ldw	r2,-12(fp)
   2a8f4:	10c00037 	ldwio	r3,0(r2)
   2a8f8:	e0bfff17 	ldw	r2,-4(fp)
   2a8fc:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   2a900:	e0bffc17 	ldw	r2,-16(fp)
}
   2a904:	e037883a 	mov	sp,fp
   2a908:	dfc00117 	ldw	ra,4(sp)
   2a90c:	df000017 	ldw	fp,0(sp)
   2a910:	dec00204 	addi	sp,sp,8
   2a914:	f800283a 	ret

0002a918 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   2a918:	defffc04 	addi	sp,sp,-16
   2a91c:	dfc00315 	stw	ra,12(sp)
   2a920:	df000215 	stw	fp,8(sp)
   2a924:	df000204 	addi	fp,sp,8
   2a928:	e13ffe15 	stw	r4,-8(fp)
   2a92c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2a930:	e13fff17 	ldw	r4,-4(fp)
   2a934:	01400084 	movi	r5,2
   2a938:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2a93c:	1000031e 	bne	r2,zero,2a94c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2a940:	e0bffe17 	ldw	r2,-8(fp)
   2a944:	10800037 	ldwio	r2,0(r2)
   2a948:	00000106 	br	2a950 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   2a94c:	0005883a 	mov	r2,zero
}
   2a950:	e037883a 	mov	sp,fp
   2a954:	dfc00117 	ldw	ra,4(sp)
   2a958:	df000017 	ldw	fp,0(sp)
   2a95c:	dec00204 	addi	sp,sp,8
   2a960:	f800283a 	ret

0002a964 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   2a964:	defffb04 	addi	sp,sp,-20
   2a968:	dfc00415 	stw	ra,16(sp)
   2a96c:	df000315 	stw	fp,12(sp)
   2a970:	df000304 	addi	fp,sp,12
   2a974:	e13ffd15 	stw	r4,-12(fp)
   2a978:	e17ffe15 	stw	r5,-8(fp)
   2a97c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2a980:	e13ffe17 	ldw	r4,-8(fp)
   2a984:	01400044 	movi	r5,1
   2a988:	002a5bc0 	call	2a5bc <altera_avalon_fifo_read_status>
   2a98c:	1000061e 	bne	r2,zero,2a9a8 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   2a990:	e0bffd17 	ldw	r2,-12(fp)
   2a994:	10800104 	addi	r2,r2,4
   2a998:	e0ffff17 	ldw	r3,-4(fp)
   2a99c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   2a9a0:	0005883a 	mov	r2,zero
   2a9a4:	00000106 	br	2a9ac <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   2a9a8:	00bfff04 	movi	r2,-4
    }
}
   2a9ac:	e037883a 	mov	sp,fp
   2a9b0:	dfc00117 	ldw	ra,4(sp)
   2a9b4:	df000017 	ldw	fp,0(sp)
   2a9b8:	dec00204 	addi	sp,sp,8
   2a9bc:	f800283a 	ret

0002a9c0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   2a9c0:	defffe04 	addi	sp,sp,-8
   2a9c4:	df000115 	stw	fp,4(sp)
   2a9c8:	df000104 	addi	fp,sp,4
   2a9cc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   2a9d0:	e0bfff17 	ldw	r2,-4(fp)
   2a9d4:	10800104 	addi	r2,r2,4
   2a9d8:	10800037 	ldwio	r2,0(r2)
}
   2a9dc:	e037883a 	mov	sp,fp
   2a9e0:	df000017 	ldw	fp,0(sp)
   2a9e4:	dec00104 	addi	sp,sp,4
   2a9e8:	f800283a 	ret

0002a9ec <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   2a9ec:	defffe04 	addi	sp,sp,-8
   2a9f0:	df000115 	stw	fp,4(sp)
   2a9f4:	df000104 	addi	fp,sp,4
   2a9f8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   2a9fc:	e0bfff17 	ldw	r2,-4(fp)
   2aa00:	10800037 	ldwio	r2,0(r2)
}
   2aa04:	e037883a 	mov	sp,fp
   2aa08:	df000017 	ldw	fp,0(sp)
   2aa0c:	dec00104 	addi	sp,sp,4
   2aa10:	f800283a 	ret

0002aa14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2aa14:	defffa04 	addi	sp,sp,-24
   2aa18:	dfc00515 	stw	ra,20(sp)
   2aa1c:	df000415 	stw	fp,16(sp)
   2aa20:	df000404 	addi	fp,sp,16
   2aa24:	e13ffd15 	stw	r4,-12(fp)
   2aa28:	e17ffe15 	stw	r5,-8(fp)
   2aa2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aa30:	e0bffd17 	ldw	r2,-12(fp)
   2aa34:	10800017 	ldw	r2,0(r2)
   2aa38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2aa3c:	e0bffc17 	ldw	r2,-16(fp)
   2aa40:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2aa44:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2aa48:	10800217 	ldw	r2,8(r2)
   2aa4c:	1809883a 	mov	r4,r3
   2aa50:	e17ffe17 	ldw	r5,-8(fp)
   2aa54:	e1bfff17 	ldw	r6,-4(fp)
   2aa58:	100f883a 	mov	r7,r2
   2aa5c:	002b03c0 	call	2b03c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2aa60:	e037883a 	mov	sp,fp
   2aa64:	dfc00117 	ldw	ra,4(sp)
   2aa68:	df000017 	ldw	fp,0(sp)
   2aa6c:	dec00204 	addi	sp,sp,8
   2aa70:	f800283a 	ret

0002aa74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2aa74:	defffa04 	addi	sp,sp,-24
   2aa78:	dfc00515 	stw	ra,20(sp)
   2aa7c:	df000415 	stw	fp,16(sp)
   2aa80:	df000404 	addi	fp,sp,16
   2aa84:	e13ffd15 	stw	r4,-12(fp)
   2aa88:	e17ffe15 	stw	r5,-8(fp)
   2aa8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aa90:	e0bffd17 	ldw	r2,-12(fp)
   2aa94:	10800017 	ldw	r2,0(r2)
   2aa98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2aa9c:	e0bffc17 	ldw	r2,-16(fp)
   2aaa0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2aaa4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2aaa8:	10800217 	ldw	r2,8(r2)
   2aaac:	1809883a 	mov	r4,r3
   2aab0:	e17ffe17 	ldw	r5,-8(fp)
   2aab4:	e1bfff17 	ldw	r6,-4(fp)
   2aab8:	100f883a 	mov	r7,r2
   2aabc:	002b2540 	call	2b254 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2aac0:	e037883a 	mov	sp,fp
   2aac4:	dfc00117 	ldw	ra,4(sp)
   2aac8:	df000017 	ldw	fp,0(sp)
   2aacc:	dec00204 	addi	sp,sp,8
   2aad0:	f800283a 	ret

0002aad4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2aad4:	defffc04 	addi	sp,sp,-16
   2aad8:	dfc00315 	stw	ra,12(sp)
   2aadc:	df000215 	stw	fp,8(sp)
   2aae0:	df000204 	addi	fp,sp,8
   2aae4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aae8:	e0bfff17 	ldw	r2,-4(fp)
   2aaec:	10800017 	ldw	r2,0(r2)
   2aaf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2aaf4:	e0bffe17 	ldw	r2,-8(fp)
   2aaf8:	10c00a04 	addi	r3,r2,40
   2aafc:	e0bfff17 	ldw	r2,-4(fp)
   2ab00:	10800217 	ldw	r2,8(r2)
   2ab04:	1809883a 	mov	r4,r3
   2ab08:	100b883a 	mov	r5,r2
   2ab0c:	002aee00 	call	2aee0 <altera_avalon_jtag_uart_close>
}
   2ab10:	e037883a 	mov	sp,fp
   2ab14:	dfc00117 	ldw	ra,4(sp)
   2ab18:	df000017 	ldw	fp,0(sp)
   2ab1c:	dec00204 	addi	sp,sp,8
   2ab20:	f800283a 	ret

0002ab24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2ab24:	defffa04 	addi	sp,sp,-24
   2ab28:	dfc00515 	stw	ra,20(sp)
   2ab2c:	df000415 	stw	fp,16(sp)
   2ab30:	df000404 	addi	fp,sp,16
   2ab34:	e13ffd15 	stw	r4,-12(fp)
   2ab38:	e17ffe15 	stw	r5,-8(fp)
   2ab3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2ab40:	e0bffd17 	ldw	r2,-12(fp)
   2ab44:	10800017 	ldw	r2,0(r2)
   2ab48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2ab4c:	e0bffc17 	ldw	r2,-16(fp)
   2ab50:	10800a04 	addi	r2,r2,40
   2ab54:	1009883a 	mov	r4,r2
   2ab58:	e17ffe17 	ldw	r5,-8(fp)
   2ab5c:	e1bfff17 	ldw	r6,-4(fp)
   2ab60:	002af480 	call	2af48 <altera_avalon_jtag_uart_ioctl>
}
   2ab64:	e037883a 	mov	sp,fp
   2ab68:	dfc00117 	ldw	ra,4(sp)
   2ab6c:	df000017 	ldw	fp,0(sp)
   2ab70:	dec00204 	addi	sp,sp,8
   2ab74:	f800283a 	ret

0002ab78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2ab78:	defffa04 	addi	sp,sp,-24
   2ab7c:	dfc00515 	stw	ra,20(sp)
   2ab80:	df000415 	stw	fp,16(sp)
   2ab84:	df000404 	addi	fp,sp,16
   2ab88:	e13ffd15 	stw	r4,-12(fp)
   2ab8c:	e17ffe15 	stw	r5,-8(fp)
   2ab90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ab94:	e0bffd17 	ldw	r2,-12(fp)
   2ab98:	00c00044 	movi	r3,1
   2ab9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2aba0:	e0bffd17 	ldw	r2,-12(fp)
   2aba4:	10800017 	ldw	r2,0(r2)
   2aba8:	10800104 	addi	r2,r2,4
   2abac:	e0fffd17 	ldw	r3,-12(fp)
   2abb0:	18c00817 	ldw	r3,32(r3)
   2abb4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2abb8:	e0fffe17 	ldw	r3,-8(fp)
   2abbc:	e0bfff17 	ldw	r2,-4(fp)
   2abc0:	d8000015 	stw	zero,0(sp)
   2abc4:	1809883a 	mov	r4,r3
   2abc8:	100b883a 	mov	r5,r2
   2abcc:	018000f4 	movhi	r6,3
   2abd0:	31ab0e04 	addi	r6,r6,-21448
   2abd4:	e1fffd17 	ldw	r7,-12(fp)
   2abd8:	002b8940 	call	2b894 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2abdc:	e0bffd17 	ldw	r2,-12(fp)
   2abe0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2abe4:	e0bffd17 	ldw	r2,-12(fp)
   2abe8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2abec:	008000f4 	movhi	r2,3
   2abf0:	10bfe504 	addi	r2,r2,-108
   2abf4:	10800017 	ldw	r2,0(r2)
   2abf8:	1809883a 	mov	r4,r3
   2abfc:	100b883a 	mov	r5,r2
   2ac00:	018000f4 	movhi	r6,3
   2ac04:	31ab8f04 	addi	r6,r6,-20932
   2ac08:	e1fffd17 	ldw	r7,-12(fp)
   2ac0c:	002b5740 	call	2b574 <alt_alarm_start>
   2ac10:	1000040e 	bge	r2,zero,2ac24 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2ac14:	e0bffd17 	ldw	r2,-12(fp)
   2ac18:	00e00034 	movhi	r3,32768
   2ac1c:	18ffffc4 	addi	r3,r3,-1
   2ac20:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2ac24:	e037883a 	mov	sp,fp
   2ac28:	dfc00117 	ldw	ra,4(sp)
   2ac2c:	df000017 	ldw	fp,0(sp)
   2ac30:	dec00204 	addi	sp,sp,8
   2ac34:	f800283a 	ret

0002ac38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2ac38:	defff804 	addi	sp,sp,-32
   2ac3c:	df000715 	stw	fp,28(sp)
   2ac40:	df000704 	addi	fp,sp,28
   2ac44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2ac48:	e0bfff17 	ldw	r2,-4(fp)
   2ac4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2ac50:	e0bffb17 	ldw	r2,-20(fp)
   2ac54:	10800017 	ldw	r2,0(r2)
   2ac58:	e0bffc15 	stw	r2,-16(fp)
   2ac5c:	00000106 	br	2ac64 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2ac60:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ac64:	e0bffc17 	ldw	r2,-16(fp)
   2ac68:	10800104 	addi	r2,r2,4
   2ac6c:	10800037 	ldwio	r2,0(r2)
   2ac70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2ac74:	e0bffd17 	ldw	r2,-12(fp)
   2ac78:	1080c00c 	andi	r2,r2,768
   2ac7c:	10006a26 	beq	r2,zero,2ae28 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2ac80:	e0bffd17 	ldw	r2,-12(fp)
   2ac84:	1080400c 	andi	r2,r2,256
   2ac88:	10003326 	beq	r2,zero,2ad58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2ac8c:	00800074 	movhi	r2,1
   2ac90:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ac94:	e0bffb17 	ldw	r2,-20(fp)
   2ac98:	10800a17 	ldw	r2,40(r2)
   2ac9c:	10800044 	addi	r2,r2,1
   2aca0:	1081ffcc 	andi	r2,r2,2047
   2aca4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2aca8:	e0bffb17 	ldw	r2,-20(fp)
   2acac:	10c00b17 	ldw	r3,44(r2)
   2acb0:	e0bffe17 	ldw	r2,-8(fp)
   2acb4:	18801426 	beq	r3,r2,2ad08 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2acb8:	e0bffc17 	ldw	r2,-16(fp)
   2acbc:	10800037 	ldwio	r2,0(r2)
   2acc0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2acc4:	e0bff917 	ldw	r2,-28(fp)
   2acc8:	10a0000c 	andi	r2,r2,32768
   2accc:	10001026 	beq	r2,zero,2ad10 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2acd0:	e0bffb17 	ldw	r2,-20(fp)
   2acd4:	10800a17 	ldw	r2,40(r2)
   2acd8:	e0fff917 	ldw	r3,-28(fp)
   2acdc:	e13ffb17 	ldw	r4,-20(fp)
   2ace0:	2085883a 	add	r2,r4,r2
   2ace4:	10800e04 	addi	r2,r2,56
   2ace8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2acec:	e0bffb17 	ldw	r2,-20(fp)
   2acf0:	10800a17 	ldw	r2,40(r2)
   2acf4:	10800044 	addi	r2,r2,1
   2acf8:	10c1ffcc 	andi	r3,r2,2047
   2acfc:	e0bffb17 	ldw	r2,-20(fp)
   2ad00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2ad04:	003fe306 	br	2ac94 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2ad08:	0001883a 	nop
   2ad0c:	00000106 	br	2ad14 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2ad10:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2ad14:	e0bff917 	ldw	r2,-28(fp)
   2ad18:	10bfffec 	andhi	r2,r2,65535
   2ad1c:	10000e26 	beq	r2,zero,2ad58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ad20:	e0bffb17 	ldw	r2,-20(fp)
   2ad24:	10c00817 	ldw	r3,32(r2)
   2ad28:	00bfff84 	movi	r2,-2
   2ad2c:	1886703a 	and	r3,r3,r2
   2ad30:	e0bffb17 	ldw	r2,-20(fp)
   2ad34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2ad38:	e0bffc17 	ldw	r2,-16(fp)
   2ad3c:	10800104 	addi	r2,r2,4
   2ad40:	e0fffb17 	ldw	r3,-20(fp)
   2ad44:	18c00817 	ldw	r3,32(r3)
   2ad48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ad4c:	e0bffc17 	ldw	r2,-16(fp)
   2ad50:	10800104 	addi	r2,r2,4
   2ad54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2ad58:	e0bffd17 	ldw	r2,-12(fp)
   2ad5c:	1080800c 	andi	r2,r2,512
   2ad60:	103fbf26 	beq	r2,zero,2ac60 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2ad64:	e0bffd17 	ldw	r2,-12(fp)
   2ad68:	1004d43a 	srli	r2,r2,16
   2ad6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ad70:	00001406 	br	2adc4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2ad74:	e0bffc17 	ldw	r2,-16(fp)
   2ad78:	e0fffb17 	ldw	r3,-20(fp)
   2ad7c:	18c00d17 	ldw	r3,52(r3)
   2ad80:	e13ffb17 	ldw	r4,-20(fp)
   2ad84:	20c7883a 	add	r3,r4,r3
   2ad88:	18c20e04 	addi	r3,r3,2104
   2ad8c:	18c00003 	ldbu	r3,0(r3)
   2ad90:	18c03fcc 	andi	r3,r3,255
   2ad94:	18c0201c 	xori	r3,r3,128
   2ad98:	18ffe004 	addi	r3,r3,-128
   2ad9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ada0:	e0bffb17 	ldw	r2,-20(fp)
   2ada4:	10800d17 	ldw	r2,52(r2)
   2ada8:	10800044 	addi	r2,r2,1
   2adac:	10c1ffcc 	andi	r3,r2,2047
   2adb0:	e0bffb17 	ldw	r2,-20(fp)
   2adb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2adb8:	e0bffa17 	ldw	r2,-24(fp)
   2adbc:	10bfffc4 	addi	r2,r2,-1
   2adc0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2adc4:	e0bffa17 	ldw	r2,-24(fp)
   2adc8:	10000526 	beq	r2,zero,2ade0 <altera_avalon_jtag_uart_irq+0x1a8>
   2adcc:	e0bffb17 	ldw	r2,-20(fp)
   2add0:	10c00d17 	ldw	r3,52(r2)
   2add4:	e0bffb17 	ldw	r2,-20(fp)
   2add8:	10800c17 	ldw	r2,48(r2)
   2addc:	18bfe51e 	bne	r3,r2,2ad74 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2ade0:	e0bffa17 	ldw	r2,-24(fp)
   2ade4:	103f9e26 	beq	r2,zero,2ac60 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ade8:	e0bffb17 	ldw	r2,-20(fp)
   2adec:	10c00817 	ldw	r3,32(r2)
   2adf0:	00bfff44 	movi	r2,-3
   2adf4:	1886703a 	and	r3,r3,r2
   2adf8:	e0bffb17 	ldw	r2,-20(fp)
   2adfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ae00:	e0bffb17 	ldw	r2,-20(fp)
   2ae04:	10800017 	ldw	r2,0(r2)
   2ae08:	10800104 	addi	r2,r2,4
   2ae0c:	e0fffb17 	ldw	r3,-20(fp)
   2ae10:	18c00817 	ldw	r3,32(r3)
   2ae14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ae18:	e0bffc17 	ldw	r2,-16(fp)
   2ae1c:	10800104 	addi	r2,r2,4
   2ae20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ae24:	003f8e06 	br	2ac60 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ae28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ae2c:	e037883a 	mov	sp,fp
   2ae30:	df000017 	ldw	fp,0(sp)
   2ae34:	dec00104 	addi	sp,sp,4
   2ae38:	f800283a 	ret

0002ae3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2ae3c:	defffc04 	addi	sp,sp,-16
   2ae40:	df000315 	stw	fp,12(sp)
   2ae44:	df000304 	addi	fp,sp,12
   2ae48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2ae4c:	e0bfff17 	ldw	r2,-4(fp)
   2ae50:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2ae54:	e0bffd17 	ldw	r2,-12(fp)
   2ae58:	10800017 	ldw	r2,0(r2)
   2ae5c:	10800104 	addi	r2,r2,4
   2ae60:	10800037 	ldwio	r2,0(r2)
   2ae64:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2ae68:	e0bffe17 	ldw	r2,-8(fp)
   2ae6c:	1081000c 	andi	r2,r2,1024
   2ae70:	10000a26 	beq	r2,zero,2ae9c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2ae74:	e0bffd17 	ldw	r2,-12(fp)
   2ae78:	10800017 	ldw	r2,0(r2)
   2ae7c:	10800104 	addi	r2,r2,4
   2ae80:	e0fffd17 	ldw	r3,-12(fp)
   2ae84:	18c00817 	ldw	r3,32(r3)
   2ae88:	18c10014 	ori	r3,r3,1024
   2ae8c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2ae90:	e0bffd17 	ldw	r2,-12(fp)
   2ae94:	10000915 	stw	zero,36(r2)
   2ae98:	00000a06 	br	2aec4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2ae9c:	e0bffd17 	ldw	r2,-12(fp)
   2aea0:	10800917 	ldw	r2,36(r2)
   2aea4:	00e00034 	movhi	r3,32768
   2aea8:	18ffff04 	addi	r3,r3,-4
   2aeac:	18800536 	bltu	r3,r2,2aec4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2aeb0:	e0bffd17 	ldw	r2,-12(fp)
   2aeb4:	10800917 	ldw	r2,36(r2)
   2aeb8:	10c00044 	addi	r3,r2,1
   2aebc:	e0bffd17 	ldw	r2,-12(fp)
   2aec0:	10c00915 	stw	r3,36(r2)
   2aec4:	008000f4 	movhi	r2,3
   2aec8:	10bfe504 	addi	r2,r2,-108
   2aecc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2aed0:	e037883a 	mov	sp,fp
   2aed4:	df000017 	ldw	fp,0(sp)
   2aed8:	dec00104 	addi	sp,sp,4
   2aedc:	f800283a 	ret

0002aee0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2aee0:	defffd04 	addi	sp,sp,-12
   2aee4:	df000215 	stw	fp,8(sp)
   2aee8:	df000204 	addi	fp,sp,8
   2aeec:	e13ffe15 	stw	r4,-8(fp)
   2aef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2aef4:	00000506 	br	2af0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2aef8:	e0bfff17 	ldw	r2,-4(fp)
   2aefc:	1090000c 	andi	r2,r2,16384
   2af00:	10000226 	beq	r2,zero,2af0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2af04:	00bffd44 	movi	r2,-11
   2af08:	00000b06 	br	2af38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2af0c:	e0bffe17 	ldw	r2,-8(fp)
   2af10:	10c00d17 	ldw	r3,52(r2)
   2af14:	e0bffe17 	ldw	r2,-8(fp)
   2af18:	10800c17 	ldw	r2,48(r2)
   2af1c:	18800526 	beq	r3,r2,2af34 <altera_avalon_jtag_uart_close+0x54>
   2af20:	e0bffe17 	ldw	r2,-8(fp)
   2af24:	10c00917 	ldw	r3,36(r2)
   2af28:	e0bffe17 	ldw	r2,-8(fp)
   2af2c:	10800117 	ldw	r2,4(r2)
   2af30:	18bff136 	bltu	r3,r2,2aef8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2af34:	0005883a 	mov	r2,zero
}
   2af38:	e037883a 	mov	sp,fp
   2af3c:	df000017 	ldw	fp,0(sp)
   2af40:	dec00104 	addi	sp,sp,4
   2af44:	f800283a 	ret

0002af48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2af48:	defffa04 	addi	sp,sp,-24
   2af4c:	df000515 	stw	fp,20(sp)
   2af50:	df000504 	addi	fp,sp,20
   2af54:	e13ffd15 	stw	r4,-12(fp)
   2af58:	e17ffe15 	stw	r5,-8(fp)
   2af5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2af60:	00bff9c4 	movi	r2,-25
   2af64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2af68:	e0bffe17 	ldw	r2,-8(fp)
   2af6c:	10da8060 	cmpeqi	r3,r2,27137
   2af70:	1800031e 	bne	r3,zero,2af80 <altera_avalon_jtag_uart_ioctl+0x38>
   2af74:	109a80a0 	cmpeqi	r2,r2,27138
   2af78:	1000181e 	bne	r2,zero,2afdc <altera_avalon_jtag_uart_ioctl+0x94>
   2af7c:	00002606 	br	2b018 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2af80:	e0bffd17 	ldw	r2,-12(fp)
   2af84:	10c00117 	ldw	r3,4(r2)
   2af88:	00a00034 	movhi	r2,32768
   2af8c:	10bfffc4 	addi	r2,r2,-1
   2af90:	18802226 	beq	r3,r2,2b01c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   2af94:	e0bfff17 	ldw	r2,-4(fp)
   2af98:	10800017 	ldw	r2,0(r2)
   2af9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2afa0:	e0bffc17 	ldw	r2,-16(fp)
   2afa4:	10800090 	cmplti	r2,r2,2
   2afa8:	1000061e 	bne	r2,zero,2afc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   2afac:	e0fffc17 	ldw	r3,-16(fp)
   2afb0:	00a00034 	movhi	r2,32768
   2afb4:	10bfffc4 	addi	r2,r2,-1
   2afb8:	18800226 	beq	r3,r2,2afc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   2afbc:	e0bffc17 	ldw	r2,-16(fp)
   2afc0:	00000206 	br	2afcc <altera_avalon_jtag_uart_ioctl+0x84>
   2afc4:	00a00034 	movhi	r2,32768
   2afc8:	10bfff84 	addi	r2,r2,-2
   2afcc:	e0fffd17 	ldw	r3,-12(fp)
   2afd0:	18800115 	stw	r2,4(r3)
      rc = 0;
   2afd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2afd8:	00001006 	br	2b01c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2afdc:	e0bffd17 	ldw	r2,-12(fp)
   2afe0:	10c00117 	ldw	r3,4(r2)
   2afe4:	00a00034 	movhi	r2,32768
   2afe8:	10bfffc4 	addi	r2,r2,-1
   2afec:	18800d26 	beq	r3,r2,2b024 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2aff0:	e0bffd17 	ldw	r2,-12(fp)
   2aff4:	10c00917 	ldw	r3,36(r2)
   2aff8:	e0bffd17 	ldw	r2,-12(fp)
   2affc:	10800117 	ldw	r2,4(r2)
   2b000:	1885803a 	cmpltu	r2,r3,r2
   2b004:	10c03fcc 	andi	r3,r2,255
   2b008:	e0bfff17 	ldw	r2,-4(fp)
   2b00c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2b010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2b014:	00000306 	br	2b024 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   2b018:	00000306 	br	2b028 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2b01c:	0001883a 	nop
   2b020:	00000106 	br	2b028 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2b024:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2b028:	e0bffb17 	ldw	r2,-20(fp)
}
   2b02c:	e037883a 	mov	sp,fp
   2b030:	df000017 	ldw	fp,0(sp)
   2b034:	dec00104 	addi	sp,sp,4
   2b038:	f800283a 	ret

0002b03c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2b03c:	defff304 	addi	sp,sp,-52
   2b040:	dfc00c15 	stw	ra,48(sp)
   2b044:	df000b15 	stw	fp,44(sp)
   2b048:	df000b04 	addi	fp,sp,44
   2b04c:	e13ffc15 	stw	r4,-16(fp)
   2b050:	e17ffd15 	stw	r5,-12(fp)
   2b054:	e1bffe15 	stw	r6,-8(fp)
   2b058:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2b05c:	e0bffd17 	ldw	r2,-12(fp)
   2b060:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b064:	00004706 	br	2b184 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2b068:	e0bffc17 	ldw	r2,-16(fp)
   2b06c:	10800a17 	ldw	r2,40(r2)
   2b070:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2b074:	e0bffc17 	ldw	r2,-16(fp)
   2b078:	10800b17 	ldw	r2,44(r2)
   2b07c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2b080:	e0fff717 	ldw	r3,-36(fp)
   2b084:	e0bff817 	ldw	r2,-32(fp)
   2b088:	18800536 	bltu	r3,r2,2b0a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2b08c:	e0fff717 	ldw	r3,-36(fp)
   2b090:	e0bff817 	ldw	r2,-32(fp)
   2b094:	1885c83a 	sub	r2,r3,r2
   2b098:	e0bff615 	stw	r2,-40(fp)
   2b09c:	00000406 	br	2b0b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2b0a0:	00c20004 	movi	r3,2048
   2b0a4:	e0bff817 	ldw	r2,-32(fp)
   2b0a8:	1885c83a 	sub	r2,r3,r2
   2b0ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b0b0:	e0bff617 	ldw	r2,-40(fp)
   2b0b4:	10001e26 	beq	r2,zero,2b130 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2b0b8:	e0fffe17 	ldw	r3,-8(fp)
   2b0bc:	e0bff617 	ldw	r2,-40(fp)
   2b0c0:	1880022e 	bgeu	r3,r2,2b0cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2b0c4:	e0bffe17 	ldw	r2,-8(fp)
   2b0c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2b0cc:	e0bff817 	ldw	r2,-32(fp)
   2b0d0:	10800e04 	addi	r2,r2,56
   2b0d4:	e0fffc17 	ldw	r3,-16(fp)
   2b0d8:	1885883a 	add	r2,r3,r2
   2b0dc:	e13ff517 	ldw	r4,-44(fp)
   2b0e0:	100b883a 	mov	r5,r2
   2b0e4:	e1bff617 	ldw	r6,-40(fp)
   2b0e8:	00258200 	call	25820 <memcpy>
      ptr   += n;
   2b0ec:	e0fff517 	ldw	r3,-44(fp)
   2b0f0:	e0bff617 	ldw	r2,-40(fp)
   2b0f4:	1885883a 	add	r2,r3,r2
   2b0f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2b0fc:	e0fffe17 	ldw	r3,-8(fp)
   2b100:	e0bff617 	ldw	r2,-40(fp)
   2b104:	1885c83a 	sub	r2,r3,r2
   2b108:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b10c:	e0fff817 	ldw	r3,-32(fp)
   2b110:	e0bff617 	ldw	r2,-40(fp)
   2b114:	1885883a 	add	r2,r3,r2
   2b118:	10c1ffcc 	andi	r3,r2,2047
   2b11c:	e0bffc17 	ldw	r2,-16(fp)
   2b120:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2b124:	e0bffe17 	ldw	r2,-8(fp)
   2b128:	00bfcf16 	blt	zero,r2,2b068 <altera_avalon_jtag_uart_read+0x2c>
   2b12c:	00000106 	br	2b134 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2b130:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2b134:	e0fff517 	ldw	r3,-44(fp)
   2b138:	e0bffd17 	ldw	r2,-12(fp)
   2b13c:	1880141e 	bne	r3,r2,2b190 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2b140:	e0bfff17 	ldw	r2,-4(fp)
   2b144:	1090000c 	andi	r2,r2,16384
   2b148:	1000131e 	bne	r2,zero,2b198 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2b14c:	0001883a 	nop
   2b150:	e0bffc17 	ldw	r2,-16(fp)
   2b154:	10c00a17 	ldw	r3,40(r2)
   2b158:	e0bff717 	ldw	r2,-36(fp)
   2b15c:	1880051e 	bne	r3,r2,2b174 <altera_avalon_jtag_uart_read+0x138>
   2b160:	e0bffc17 	ldw	r2,-16(fp)
   2b164:	10c00917 	ldw	r3,36(r2)
   2b168:	e0bffc17 	ldw	r2,-16(fp)
   2b16c:	10800117 	ldw	r2,4(r2)
   2b170:	18bff736 	bltu	r3,r2,2b150 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2b174:	e0bffc17 	ldw	r2,-16(fp)
   2b178:	10c00a17 	ldw	r3,40(r2)
   2b17c:	e0bff717 	ldw	r2,-36(fp)
   2b180:	18800726 	beq	r3,r2,2b1a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b184:	e0bffe17 	ldw	r2,-8(fp)
   2b188:	00bfb716 	blt	zero,r2,2b068 <altera_avalon_jtag_uart_read+0x2c>
   2b18c:	00000506 	br	2b1a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2b190:	0001883a 	nop
   2b194:	00000306 	br	2b1a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2b198:	0001883a 	nop
   2b19c:	00000106 	br	2b1a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2b1a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2b1a4:	e0fff517 	ldw	r3,-44(fp)
   2b1a8:	e0bffd17 	ldw	r2,-12(fp)
   2b1ac:	18801726 	beq	r3,r2,2b20c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b1b0:	0005303a 	rdctl	r2,status
   2b1b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b1b8:	e0fffa17 	ldw	r3,-24(fp)
   2b1bc:	00bfff84 	movi	r2,-2
   2b1c0:	1884703a 	and	r2,r3,r2
   2b1c4:	1001703a 	wrctl	status,r2
  
  return context;
   2b1c8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2b1cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b1d0:	e0bffc17 	ldw	r2,-16(fp)
   2b1d4:	10800817 	ldw	r2,32(r2)
   2b1d8:	10c00054 	ori	r3,r2,1
   2b1dc:	e0bffc17 	ldw	r2,-16(fp)
   2b1e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b1e4:	e0bffc17 	ldw	r2,-16(fp)
   2b1e8:	10800017 	ldw	r2,0(r2)
   2b1ec:	10800104 	addi	r2,r2,4
   2b1f0:	e0fffc17 	ldw	r3,-16(fp)
   2b1f4:	18c00817 	ldw	r3,32(r3)
   2b1f8:	10c00035 	stwio	r3,0(r2)
   2b1fc:	e0bff917 	ldw	r2,-28(fp)
   2b200:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b204:	e0bffb17 	ldw	r2,-20(fp)
   2b208:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2b20c:	e0fff517 	ldw	r3,-44(fp)
   2b210:	e0bffd17 	ldw	r2,-12(fp)
   2b214:	18800426 	beq	r3,r2,2b228 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   2b218:	e0fff517 	ldw	r3,-44(fp)
   2b21c:	e0bffd17 	ldw	r2,-12(fp)
   2b220:	1885c83a 	sub	r2,r3,r2
   2b224:	00000606 	br	2b240 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   2b228:	e0bfff17 	ldw	r2,-4(fp)
   2b22c:	1090000c 	andi	r2,r2,16384
   2b230:	10000226 	beq	r2,zero,2b23c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   2b234:	00bffd44 	movi	r2,-11
   2b238:	00000106 	br	2b240 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   2b23c:	00bffec4 	movi	r2,-5
}
   2b240:	e037883a 	mov	sp,fp
   2b244:	dfc00117 	ldw	ra,4(sp)
   2b248:	df000017 	ldw	fp,0(sp)
   2b24c:	dec00204 	addi	sp,sp,8
   2b250:	f800283a 	ret

0002b254 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2b254:	defff304 	addi	sp,sp,-52
   2b258:	dfc00c15 	stw	ra,48(sp)
   2b25c:	df000b15 	stw	fp,44(sp)
   2b260:	df000b04 	addi	fp,sp,44
   2b264:	e13ffc15 	stw	r4,-16(fp)
   2b268:	e17ffd15 	stw	r5,-12(fp)
   2b26c:	e1bffe15 	stw	r6,-8(fp)
   2b270:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2b274:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2b278:	e0bffd17 	ldw	r2,-12(fp)
   2b27c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b280:	00003706 	br	2b360 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2b284:	e0bffc17 	ldw	r2,-16(fp)
   2b288:	10800c17 	ldw	r2,48(r2)
   2b28c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2b290:	e0bffc17 	ldw	r2,-16(fp)
   2b294:	10800d17 	ldw	r2,52(r2)
   2b298:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2b29c:	e0fff817 	ldw	r3,-32(fp)
   2b2a0:	e0bff517 	ldw	r2,-44(fp)
   2b2a4:	1880062e 	bgeu	r3,r2,2b2c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2b2a8:	e0fff517 	ldw	r3,-44(fp)
   2b2ac:	e0bff817 	ldw	r2,-32(fp)
   2b2b0:	1885c83a 	sub	r2,r3,r2
   2b2b4:	10bfffc4 	addi	r2,r2,-1
   2b2b8:	e0bff615 	stw	r2,-40(fp)
   2b2bc:	00000b06 	br	2b2ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2b2c0:	e0bff517 	ldw	r2,-44(fp)
   2b2c4:	10000526 	beq	r2,zero,2b2dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2b2c8:	00c20004 	movi	r3,2048
   2b2cc:	e0bff817 	ldw	r2,-32(fp)
   2b2d0:	1885c83a 	sub	r2,r3,r2
   2b2d4:	e0bff615 	stw	r2,-40(fp)
   2b2d8:	00000406 	br	2b2ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2b2dc:	00c1ffc4 	movi	r3,2047
   2b2e0:	e0bff817 	ldw	r2,-32(fp)
   2b2e4:	1885c83a 	sub	r2,r3,r2
   2b2e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2b2ec:	e0bff617 	ldw	r2,-40(fp)
   2b2f0:	10001e26 	beq	r2,zero,2b36c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2b2f4:	e0fffe17 	ldw	r3,-8(fp)
   2b2f8:	e0bff617 	ldw	r2,-40(fp)
   2b2fc:	1880022e 	bgeu	r3,r2,2b308 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2b300:	e0bffe17 	ldw	r2,-8(fp)
   2b304:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2b308:	e0bff817 	ldw	r2,-32(fp)
   2b30c:	10820e04 	addi	r2,r2,2104
   2b310:	e0fffc17 	ldw	r3,-16(fp)
   2b314:	1885883a 	add	r2,r3,r2
   2b318:	1009883a 	mov	r4,r2
   2b31c:	e17ffd17 	ldw	r5,-12(fp)
   2b320:	e1bff617 	ldw	r6,-40(fp)
   2b324:	00258200 	call	25820 <memcpy>
      ptr   += n;
   2b328:	e0fffd17 	ldw	r3,-12(fp)
   2b32c:	e0bff617 	ldw	r2,-40(fp)
   2b330:	1885883a 	add	r2,r3,r2
   2b334:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2b338:	e0fffe17 	ldw	r3,-8(fp)
   2b33c:	e0bff617 	ldw	r2,-40(fp)
   2b340:	1885c83a 	sub	r2,r3,r2
   2b344:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b348:	e0fff817 	ldw	r3,-32(fp)
   2b34c:	e0bff617 	ldw	r2,-40(fp)
   2b350:	1885883a 	add	r2,r3,r2
   2b354:	10c1ffcc 	andi	r3,r2,2047
   2b358:	e0bffc17 	ldw	r2,-16(fp)
   2b35c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b360:	e0bffe17 	ldw	r2,-8(fp)
   2b364:	00bfc716 	blt	zero,r2,2b284 <altera_avalon_jtag_uart_write+0x30>
   2b368:	00000106 	br	2b370 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2b36c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b370:	0005303a 	rdctl	r2,status
   2b374:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b378:	e0fffa17 	ldw	r3,-24(fp)
   2b37c:	00bfff84 	movi	r2,-2
   2b380:	1884703a 	and	r2,r3,r2
   2b384:	1001703a 	wrctl	status,r2
  
  return context;
   2b388:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2b38c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b390:	e0bffc17 	ldw	r2,-16(fp)
   2b394:	10800817 	ldw	r2,32(r2)
   2b398:	10c00094 	ori	r3,r2,2
   2b39c:	e0bffc17 	ldw	r2,-16(fp)
   2b3a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b3a4:	e0bffc17 	ldw	r2,-16(fp)
   2b3a8:	10800017 	ldw	r2,0(r2)
   2b3ac:	10800104 	addi	r2,r2,4
   2b3b0:	e0fffc17 	ldw	r3,-16(fp)
   2b3b4:	18c00817 	ldw	r3,32(r3)
   2b3b8:	10c00035 	stwio	r3,0(r2)
   2b3bc:	e0bff917 	ldw	r2,-28(fp)
   2b3c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b3c4:	e0bffb17 	ldw	r2,-20(fp)
   2b3c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2b3cc:	e0bffe17 	ldw	r2,-8(fp)
   2b3d0:	0080110e 	bge	zero,r2,2b418 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2b3d4:	e0bfff17 	ldw	r2,-4(fp)
   2b3d8:	1090000c 	andi	r2,r2,16384
   2b3dc:	1000111e 	bne	r2,zero,2b424 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2b3e0:	0001883a 	nop
   2b3e4:	e0bffc17 	ldw	r2,-16(fp)
   2b3e8:	10c00d17 	ldw	r3,52(r2)
   2b3ec:	e0bff517 	ldw	r2,-44(fp)
   2b3f0:	1880051e 	bne	r3,r2,2b408 <altera_avalon_jtag_uart_write+0x1b4>
   2b3f4:	e0bffc17 	ldw	r2,-16(fp)
   2b3f8:	10c00917 	ldw	r3,36(r2)
   2b3fc:	e0bffc17 	ldw	r2,-16(fp)
   2b400:	10800117 	ldw	r2,4(r2)
   2b404:	18bff736 	bltu	r3,r2,2b3e4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2b408:	e0bffc17 	ldw	r2,-16(fp)
   2b40c:	10c00d17 	ldw	r3,52(r2)
   2b410:	e0bff517 	ldw	r2,-44(fp)
   2b414:	18800526 	beq	r3,r2,2b42c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2b418:	e0bffe17 	ldw	r2,-8(fp)
   2b41c:	00bfd016 	blt	zero,r2,2b360 <altera_avalon_jtag_uart_write+0x10c>
   2b420:	00000306 	br	2b430 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2b424:	0001883a 	nop
   2b428:	00000106 	br	2b430 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   2b42c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2b430:	e0fffd17 	ldw	r3,-12(fp)
   2b434:	e0bff717 	ldw	r2,-36(fp)
   2b438:	18800426 	beq	r3,r2,2b44c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2b43c:	e0fffd17 	ldw	r3,-12(fp)
   2b440:	e0bff717 	ldw	r2,-36(fp)
   2b444:	1885c83a 	sub	r2,r3,r2
   2b448:	00000606 	br	2b464 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2b44c:	e0bfff17 	ldw	r2,-4(fp)
   2b450:	1090000c 	andi	r2,r2,16384
   2b454:	10000226 	beq	r2,zero,2b460 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2b458:	00bffd44 	movi	r2,-11
   2b45c:	00000106 	br	2b464 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2b460:	00bffec4 	movi	r2,-5
}
   2b464:	e037883a 	mov	sp,fp
   2b468:	dfc00117 	ldw	ra,4(sp)
   2b46c:	df000017 	ldw	fp,0(sp)
   2b470:	dec00204 	addi	sp,sp,8
   2b474:	f800283a 	ret

0002b478 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2b478:	defffa04 	addi	sp,sp,-24
   2b47c:	dfc00515 	stw	ra,20(sp)
   2b480:	df000415 	stw	fp,16(sp)
   2b484:	df000404 	addi	fp,sp,16
   2b488:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2b48c:	0007883a 	mov	r3,zero
   2b490:	e0bfff17 	ldw	r2,-4(fp)
   2b494:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2b498:	e0bfff17 	ldw	r2,-4(fp)
   2b49c:	10800104 	addi	r2,r2,4
   2b4a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b4a4:	0005303a 	rdctl	r2,status
   2b4a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b4ac:	e0fffd17 	ldw	r3,-12(fp)
   2b4b0:	00bfff84 	movi	r2,-2
   2b4b4:	1884703a 	and	r2,r3,r2
   2b4b8:	1001703a 	wrctl	status,r2
  
  return context;
   2b4bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2b4c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2b4c4:	002bfe40 	call	2bfe4 <alt_tick>
   2b4c8:	e0bffc17 	ldw	r2,-16(fp)
   2b4cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b4d0:	e0bffe17 	ldw	r2,-8(fp)
   2b4d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2b4d8:	e037883a 	mov	sp,fp
   2b4dc:	dfc00117 	ldw	ra,4(sp)
   2b4e0:	df000017 	ldw	fp,0(sp)
   2b4e4:	dec00204 	addi	sp,sp,8
   2b4e8:	f800283a 	ret

0002b4ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2b4ec:	defff804 	addi	sp,sp,-32
   2b4f0:	dfc00715 	stw	ra,28(sp)
   2b4f4:	df000615 	stw	fp,24(sp)
   2b4f8:	df000604 	addi	fp,sp,24
   2b4fc:	e13ffc15 	stw	r4,-16(fp)
   2b500:	e17ffd15 	stw	r5,-12(fp)
   2b504:	e1bffe15 	stw	r6,-8(fp)
   2b508:	e1ffff15 	stw	r7,-4(fp)
   2b50c:	e0bfff17 	ldw	r2,-4(fp)
   2b510:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2b514:	008000f4 	movhi	r2,3
   2b518:	10bfe504 	addi	r2,r2,-108
   2b51c:	10800017 	ldw	r2,0(r2)
   2b520:	1000041e 	bne	r2,zero,2b534 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2b524:	008000f4 	movhi	r2,3
   2b528:	10bfe504 	addi	r2,r2,-108
   2b52c:	e0fffb17 	ldw	r3,-20(fp)
   2b530:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2b534:	e0bffc17 	ldw	r2,-16(fp)
   2b538:	10800104 	addi	r2,r2,4
   2b53c:	00c001c4 	movi	r3,7
   2b540:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2b544:	d8000015 	stw	zero,0(sp)
   2b548:	e13ffd17 	ldw	r4,-12(fp)
   2b54c:	e17ffe17 	ldw	r5,-8(fp)
   2b550:	018000f4 	movhi	r6,3
   2b554:	31ad1e04 	addi	r6,r6,-19336
   2b558:	e1fffc17 	ldw	r7,-16(fp)
   2b55c:	002b8940 	call	2b894 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2b560:	e037883a 	mov	sp,fp
   2b564:	dfc00117 	ldw	ra,4(sp)
   2b568:	df000017 	ldw	fp,0(sp)
   2b56c:	dec00204 	addi	sp,sp,8
   2b570:	f800283a 	ret

0002b574 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2b574:	defff504 	addi	sp,sp,-44
   2b578:	df000a15 	stw	fp,40(sp)
   2b57c:	df000a04 	addi	fp,sp,40
   2b580:	e13ffc15 	stw	r4,-16(fp)
   2b584:	e17ffd15 	stw	r5,-12(fp)
   2b588:	e1bffe15 	stw	r6,-8(fp)
   2b58c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2b590:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b594:	008000f4 	movhi	r2,3
   2b598:	10bfe504 	addi	r2,r2,-108
   2b59c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2b5a0:	10003f26 	beq	r2,zero,2b6a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2b5a4:	e0bffc17 	ldw	r2,-16(fp)
   2b5a8:	10003b26 	beq	r2,zero,2b698 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2b5ac:	e0bffc17 	ldw	r2,-16(fp)
   2b5b0:	e0fffe17 	ldw	r3,-8(fp)
   2b5b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2b5b8:	e0bffc17 	ldw	r2,-16(fp)
   2b5bc:	e0ffff17 	ldw	r3,-4(fp)
   2b5c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b5c4:	0005303a 	rdctl	r2,status
   2b5c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b5cc:	e0fff817 	ldw	r3,-32(fp)
   2b5d0:	00bfff84 	movi	r2,-2
   2b5d4:	1884703a 	and	r2,r3,r2
   2b5d8:	1001703a 	wrctl	status,r2
  
  return context;
   2b5dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2b5e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2b5e4:	008000f4 	movhi	r2,3
   2b5e8:	10bfe604 	addi	r2,r2,-104
   2b5ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2b5f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2b5f4:	e0fffd17 	ldw	r3,-12(fp)
   2b5f8:	e0bff617 	ldw	r2,-40(fp)
   2b5fc:	1885883a 	add	r2,r3,r2
   2b600:	10c00044 	addi	r3,r2,1
   2b604:	e0bffc17 	ldw	r2,-16(fp)
   2b608:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2b60c:	e0bffc17 	ldw	r2,-16(fp)
   2b610:	10c00217 	ldw	r3,8(r2)
   2b614:	e0bff617 	ldw	r2,-40(fp)
   2b618:	1880042e 	bgeu	r3,r2,2b62c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2b61c:	e0bffc17 	ldw	r2,-16(fp)
   2b620:	00c00044 	movi	r3,1
   2b624:	10c00405 	stb	r3,16(r2)
   2b628:	00000206 	br	2b634 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2b62c:	e0bffc17 	ldw	r2,-16(fp)
   2b630:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2b634:	e0bffc17 	ldw	r2,-16(fp)
   2b638:	00c000f4 	movhi	r3,3
   2b63c:	18f94204 	addi	r3,r3,-6904
   2b640:	e0fff915 	stw	r3,-28(fp)
   2b644:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b648:	e0bffa17 	ldw	r2,-24(fp)
   2b64c:	e0fff917 	ldw	r3,-28(fp)
   2b650:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b654:	e0bff917 	ldw	r2,-28(fp)
   2b658:	10c00017 	ldw	r3,0(r2)
   2b65c:	e0bffa17 	ldw	r2,-24(fp)
   2b660:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b664:	e0bff917 	ldw	r2,-28(fp)
   2b668:	10800017 	ldw	r2,0(r2)
   2b66c:	e0fffa17 	ldw	r3,-24(fp)
   2b670:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b674:	e0bff917 	ldw	r2,-28(fp)
   2b678:	e0fffa17 	ldw	r3,-24(fp)
   2b67c:	10c00015 	stw	r3,0(r2)
   2b680:	e0bff717 	ldw	r2,-36(fp)
   2b684:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b688:	e0bffb17 	ldw	r2,-20(fp)
   2b68c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2b690:	0005883a 	mov	r2,zero
   2b694:	00000306 	br	2b6a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2b698:	00bffa84 	movi	r2,-22
   2b69c:	00000106 	br	2b6a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2b6a0:	00bfde84 	movi	r2,-134
  }
}
   2b6a4:	e037883a 	mov	sp,fp
   2b6a8:	df000017 	ldw	fp,0(sp)
   2b6ac:	dec00104 	addi	sp,sp,4
   2b6b0:	f800283a 	ret

0002b6b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2b6b4:	deffff04 	addi	sp,sp,-4
   2b6b8:	df000015 	stw	fp,0(sp)
   2b6bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2b6c0:	e037883a 	mov	sp,fp
   2b6c4:	df000017 	ldw	fp,0(sp)
   2b6c8:	dec00104 	addi	sp,sp,4
   2b6cc:	f800283a 	ret

0002b6d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b6d0:	defffe04 	addi	sp,sp,-8
   2b6d4:	dfc00115 	stw	ra,4(sp)
   2b6d8:	df000015 	stw	fp,0(sp)
   2b6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b6e0:	008000f4 	movhi	r2,3
   2b6e4:	10b93f04 	addi	r2,r2,-6916
   2b6e8:	10800017 	ldw	r2,0(r2)
   2b6ec:	10000526 	beq	r2,zero,2b704 <alt_get_errno+0x34>
   2b6f0:	008000f4 	movhi	r2,3
   2b6f4:	10b93f04 	addi	r2,r2,-6916
   2b6f8:	10800017 	ldw	r2,0(r2)
   2b6fc:	103ee83a 	callr	r2
   2b700:	00000206 	br	2b70c <alt_get_errno+0x3c>
   2b704:	008000f4 	movhi	r2,3
   2b708:	10bfe004 	addi	r2,r2,-128
}
   2b70c:	e037883a 	mov	sp,fp
   2b710:	dfc00117 	ldw	ra,4(sp)
   2b714:	df000017 	ldw	fp,0(sp)
   2b718:	dec00204 	addi	sp,sp,8
   2b71c:	f800283a 	ret

0002b720 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2b720:	defffa04 	addi	sp,sp,-24
   2b724:	dfc00515 	stw	ra,20(sp)
   2b728:	df000415 	stw	fp,16(sp)
   2b72c:	df000404 	addi	fp,sp,16
   2b730:	e13ffe15 	stw	r4,-8(fp)
   2b734:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2b738:	e0bffe17 	ldw	r2,-8(fp)
   2b73c:	10000326 	beq	r2,zero,2b74c <alt_dev_llist_insert+0x2c>
   2b740:	e0bffe17 	ldw	r2,-8(fp)
   2b744:	10800217 	ldw	r2,8(r2)
   2b748:	1000051e 	bne	r2,zero,2b760 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2b74c:	002b6d00 	call	2b6d0 <alt_get_errno>
   2b750:	00c00584 	movi	r3,22
   2b754:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2b758:	00bffa84 	movi	r2,-22
   2b75c:	00001306 	br	2b7ac <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2b760:	e0bffe17 	ldw	r2,-8(fp)
   2b764:	e0ffff17 	ldw	r3,-4(fp)
   2b768:	e0fffc15 	stw	r3,-16(fp)
   2b76c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b770:	e0bffd17 	ldw	r2,-12(fp)
   2b774:	e0fffc17 	ldw	r3,-16(fp)
   2b778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2b77c:	e0bffc17 	ldw	r2,-16(fp)
   2b780:	10c00017 	ldw	r3,0(r2)
   2b784:	e0bffd17 	ldw	r2,-12(fp)
   2b788:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b78c:	e0bffc17 	ldw	r2,-16(fp)
   2b790:	10800017 	ldw	r2,0(r2)
   2b794:	e0fffd17 	ldw	r3,-12(fp)
   2b798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2b79c:	e0bffc17 	ldw	r2,-16(fp)
   2b7a0:	e0fffd17 	ldw	r3,-12(fp)
   2b7a4:	10c00015 	stw	r3,0(r2)

  return 0;  
   2b7a8:	0005883a 	mov	r2,zero
}
   2b7ac:	e037883a 	mov	sp,fp
   2b7b0:	dfc00117 	ldw	ra,4(sp)
   2b7b4:	df000017 	ldw	fp,0(sp)
   2b7b8:	dec00204 	addi	sp,sp,8
   2b7bc:	f800283a 	ret

0002b7c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2b7c0:	defffd04 	addi	sp,sp,-12
   2b7c4:	dfc00215 	stw	ra,8(sp)
   2b7c8:	df000115 	stw	fp,4(sp)
   2b7cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b7d0:	008000f4 	movhi	r2,3
   2b7d4:	10b1d404 	addi	r2,r2,-14512
   2b7d8:	e0bfff15 	stw	r2,-4(fp)
   2b7dc:	00000606 	br	2b7f8 <_do_ctors+0x38>
        (*ctor) (); 
   2b7e0:	e0bfff17 	ldw	r2,-4(fp)
   2b7e4:	10800017 	ldw	r2,0(r2)
   2b7e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2b7ec:	e0bfff17 	ldw	r2,-4(fp)
   2b7f0:	10bfff04 	addi	r2,r2,-4
   2b7f4:	e0bfff15 	stw	r2,-4(fp)
   2b7f8:	e0ffff17 	ldw	r3,-4(fp)
   2b7fc:	008000f4 	movhi	r2,3
   2b800:	10b1d504 	addi	r2,r2,-14508
   2b804:	18bff62e 	bgeu	r3,r2,2b7e0 <_do_ctors+0x20>
        (*ctor) (); 
}
   2b808:	e037883a 	mov	sp,fp
   2b80c:	dfc00117 	ldw	ra,4(sp)
   2b810:	df000017 	ldw	fp,0(sp)
   2b814:	dec00204 	addi	sp,sp,8
   2b818:	f800283a 	ret

0002b81c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2b81c:	defffd04 	addi	sp,sp,-12
   2b820:	dfc00215 	stw	ra,8(sp)
   2b824:	df000115 	stw	fp,4(sp)
   2b828:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b82c:	008000f4 	movhi	r2,3
   2b830:	10b1d404 	addi	r2,r2,-14512
   2b834:	e0bfff15 	stw	r2,-4(fp)
   2b838:	00000606 	br	2b854 <_do_dtors+0x38>
        (*dtor) (); 
   2b83c:	e0bfff17 	ldw	r2,-4(fp)
   2b840:	10800017 	ldw	r2,0(r2)
   2b844:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2b848:	e0bfff17 	ldw	r2,-4(fp)
   2b84c:	10bfff04 	addi	r2,r2,-4
   2b850:	e0bfff15 	stw	r2,-4(fp)
   2b854:	e0ffff17 	ldw	r3,-4(fp)
   2b858:	008000f4 	movhi	r2,3
   2b85c:	10b1d504 	addi	r2,r2,-14508
   2b860:	18bff62e 	bgeu	r3,r2,2b83c <_do_dtors+0x20>
        (*dtor) (); 
}
   2b864:	e037883a 	mov	sp,fp
   2b868:	dfc00117 	ldw	ra,4(sp)
   2b86c:	df000017 	ldw	fp,0(sp)
   2b870:	dec00204 	addi	sp,sp,8
   2b874:	f800283a 	ret

0002b878 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2b878:	deffff04 	addi	sp,sp,-4
   2b87c:	df000015 	stw	fp,0(sp)
   2b880:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2b884:	e037883a 	mov	sp,fp
   2b888:	df000017 	ldw	fp,0(sp)
   2b88c:	dec00104 	addi	sp,sp,4
   2b890:	f800283a 	ret

0002b894 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2b894:	defff904 	addi	sp,sp,-28
   2b898:	dfc00615 	stw	ra,24(sp)
   2b89c:	df000515 	stw	fp,20(sp)
   2b8a0:	df000504 	addi	fp,sp,20
   2b8a4:	e13ffc15 	stw	r4,-16(fp)
   2b8a8:	e17ffd15 	stw	r5,-12(fp)
   2b8ac:	e1bffe15 	stw	r6,-8(fp)
   2b8b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2b8b4:	e0800217 	ldw	r2,8(fp)
   2b8b8:	d8800015 	stw	r2,0(sp)
   2b8bc:	e13ffc17 	ldw	r4,-16(fp)
   2b8c0:	e17ffd17 	ldw	r5,-12(fp)
   2b8c4:	e1bffe17 	ldw	r6,-8(fp)
   2b8c8:	e1ffff17 	ldw	r7,-4(fp)
   2b8cc:	002ba6c0 	call	2ba6c <alt_iic_isr_register>
}  
   2b8d0:	e037883a 	mov	sp,fp
   2b8d4:	dfc00117 	ldw	ra,4(sp)
   2b8d8:	df000017 	ldw	fp,0(sp)
   2b8dc:	dec00204 	addi	sp,sp,8
   2b8e0:	f800283a 	ret

0002b8e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2b8e4:	defff904 	addi	sp,sp,-28
   2b8e8:	df000615 	stw	fp,24(sp)
   2b8ec:	df000604 	addi	fp,sp,24
   2b8f0:	e13ffe15 	stw	r4,-8(fp)
   2b8f4:	e17fff15 	stw	r5,-4(fp)
   2b8f8:	e0bfff17 	ldw	r2,-4(fp)
   2b8fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b900:	0005303a 	rdctl	r2,status
   2b904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b908:	e0fffb17 	ldw	r3,-20(fp)
   2b90c:	00bfff84 	movi	r2,-2
   2b910:	1884703a 	and	r2,r3,r2
   2b914:	1001703a 	wrctl	status,r2
  
  return context;
   2b918:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b91c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2b920:	e0bffa17 	ldw	r2,-24(fp)
   2b924:	00c00044 	movi	r3,1
   2b928:	1884983a 	sll	r2,r3,r2
   2b92c:	1007883a 	mov	r3,r2
   2b930:	008000f4 	movhi	r2,3
   2b934:	10bfe404 	addi	r2,r2,-112
   2b938:	10800017 	ldw	r2,0(r2)
   2b93c:	1886b03a 	or	r3,r3,r2
   2b940:	008000f4 	movhi	r2,3
   2b944:	10bfe404 	addi	r2,r2,-112
   2b948:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b94c:	008000f4 	movhi	r2,3
   2b950:	10bfe404 	addi	r2,r2,-112
   2b954:	10800017 	ldw	r2,0(r2)
   2b958:	100170fa 	wrctl	ienable,r2
   2b95c:	e0bffc17 	ldw	r2,-16(fp)
   2b960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b964:	e0bffd17 	ldw	r2,-12(fp)
   2b968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2b96c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2b970:	e037883a 	mov	sp,fp
   2b974:	df000017 	ldw	fp,0(sp)
   2b978:	dec00104 	addi	sp,sp,4
   2b97c:	f800283a 	ret

0002b980 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2b980:	defff904 	addi	sp,sp,-28
   2b984:	df000615 	stw	fp,24(sp)
   2b988:	df000604 	addi	fp,sp,24
   2b98c:	e13ffe15 	stw	r4,-8(fp)
   2b990:	e17fff15 	stw	r5,-4(fp)
   2b994:	e0bfff17 	ldw	r2,-4(fp)
   2b998:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b99c:	0005303a 	rdctl	r2,status
   2b9a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b9a4:	e0fffb17 	ldw	r3,-20(fp)
   2b9a8:	00bfff84 	movi	r2,-2
   2b9ac:	1884703a 	and	r2,r3,r2
   2b9b0:	1001703a 	wrctl	status,r2
  
  return context;
   2b9b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2b9b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2b9bc:	e0bffa17 	ldw	r2,-24(fp)
   2b9c0:	00c00044 	movi	r3,1
   2b9c4:	1884983a 	sll	r2,r3,r2
   2b9c8:	0084303a 	nor	r2,zero,r2
   2b9cc:	1007883a 	mov	r3,r2
   2b9d0:	008000f4 	movhi	r2,3
   2b9d4:	10bfe404 	addi	r2,r2,-112
   2b9d8:	10800017 	ldw	r2,0(r2)
   2b9dc:	1886703a 	and	r3,r3,r2
   2b9e0:	008000f4 	movhi	r2,3
   2b9e4:	10bfe404 	addi	r2,r2,-112
   2b9e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2b9ec:	008000f4 	movhi	r2,3
   2b9f0:	10bfe404 	addi	r2,r2,-112
   2b9f4:	10800017 	ldw	r2,0(r2)
   2b9f8:	100170fa 	wrctl	ienable,r2
   2b9fc:	e0bffc17 	ldw	r2,-16(fp)
   2ba00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ba04:	e0bffd17 	ldw	r2,-12(fp)
   2ba08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ba0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2ba10:	e037883a 	mov	sp,fp
   2ba14:	df000017 	ldw	fp,0(sp)
   2ba18:	dec00104 	addi	sp,sp,4
   2ba1c:	f800283a 	ret

0002ba20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2ba20:	defffc04 	addi	sp,sp,-16
   2ba24:	df000315 	stw	fp,12(sp)
   2ba28:	df000304 	addi	fp,sp,12
   2ba2c:	e13ffe15 	stw	r4,-8(fp)
   2ba30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2ba34:	000530fa 	rdctl	r2,ienable
   2ba38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2ba3c:	e0bfff17 	ldw	r2,-4(fp)
   2ba40:	00c00044 	movi	r3,1
   2ba44:	1884983a 	sll	r2,r3,r2
   2ba48:	1007883a 	mov	r3,r2
   2ba4c:	e0bffd17 	ldw	r2,-12(fp)
   2ba50:	1884703a 	and	r2,r3,r2
   2ba54:	1004c03a 	cmpne	r2,r2,zero
   2ba58:	10803fcc 	andi	r2,r2,255
}
   2ba5c:	e037883a 	mov	sp,fp
   2ba60:	df000017 	ldw	fp,0(sp)
   2ba64:	dec00104 	addi	sp,sp,4
   2ba68:	f800283a 	ret

0002ba6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ba6c:	defff504 	addi	sp,sp,-44
   2ba70:	dfc00a15 	stw	ra,40(sp)
   2ba74:	df000915 	stw	fp,36(sp)
   2ba78:	df000904 	addi	fp,sp,36
   2ba7c:	e13ffc15 	stw	r4,-16(fp)
   2ba80:	e17ffd15 	stw	r5,-12(fp)
   2ba84:	e1bffe15 	stw	r6,-8(fp)
   2ba88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2ba8c:	00bffa84 	movi	r2,-22
   2ba90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2ba94:	e0bffd17 	ldw	r2,-12(fp)
   2ba98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2ba9c:	e0bff817 	ldw	r2,-32(fp)
   2baa0:	10800808 	cmpgei	r2,r2,32
   2baa4:	1000271e 	bne	r2,zero,2bb44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2baa8:	0005303a 	rdctl	r2,status
   2baac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bab0:	e0fffa17 	ldw	r3,-24(fp)
   2bab4:	00bfff84 	movi	r2,-2
   2bab8:	1884703a 	and	r2,r3,r2
   2babc:	1001703a 	wrctl	status,r2
  
  return context;
   2bac0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2bac4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2bac8:	00c000f4 	movhi	r3,3
   2bacc:	18fff104 	addi	r3,r3,-60
   2bad0:	e0bff817 	ldw	r2,-32(fp)
   2bad4:	100490fa 	slli	r2,r2,3
   2bad8:	1885883a 	add	r2,r3,r2
   2badc:	e0fffe17 	ldw	r3,-8(fp)
   2bae0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2bae4:	00c000f4 	movhi	r3,3
   2bae8:	18fff104 	addi	r3,r3,-60
   2baec:	e0bff817 	ldw	r2,-32(fp)
   2baf0:	100490fa 	slli	r2,r2,3
   2baf4:	1885883a 	add	r2,r3,r2
   2baf8:	10800104 	addi	r2,r2,4
   2bafc:	e0ffff17 	ldw	r3,-4(fp)
   2bb00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2bb04:	e0bffe17 	ldw	r2,-8(fp)
   2bb08:	10000526 	beq	r2,zero,2bb20 <alt_iic_isr_register+0xb4>
   2bb0c:	e0bff817 	ldw	r2,-32(fp)
   2bb10:	e13ffc17 	ldw	r4,-16(fp)
   2bb14:	100b883a 	mov	r5,r2
   2bb18:	002b8e40 	call	2b8e4 <alt_ic_irq_enable>
   2bb1c:	00000406 	br	2bb30 <alt_iic_isr_register+0xc4>
   2bb20:	e0bff817 	ldw	r2,-32(fp)
   2bb24:	e13ffc17 	ldw	r4,-16(fp)
   2bb28:	100b883a 	mov	r5,r2
   2bb2c:	002b9800 	call	2b980 <alt_ic_irq_disable>
   2bb30:	e0bff715 	stw	r2,-36(fp)
   2bb34:	e0bff917 	ldw	r2,-28(fp)
   2bb38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bb3c:	e0bffb17 	ldw	r2,-20(fp)
   2bb40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2bb44:	e0bff717 	ldw	r2,-36(fp)
}
   2bb48:	e037883a 	mov	sp,fp
   2bb4c:	dfc00117 	ldw	ra,4(sp)
   2bb50:	df000017 	ldw	fp,0(sp)
   2bb54:	dec00204 	addi	sp,sp,8
   2bb58:	f800283a 	ret

0002bb5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2bb5c:	defff804 	addi	sp,sp,-32
   2bb60:	dfc00715 	stw	ra,28(sp)
   2bb64:	df000615 	stw	fp,24(sp)
   2bb68:	dc000515 	stw	r16,20(sp)
   2bb6c:	df000504 	addi	fp,sp,20
   2bb70:	e13ffc15 	stw	r4,-16(fp)
   2bb74:	e17ffd15 	stw	r5,-12(fp)
   2bb78:	e1bffe15 	stw	r6,-8(fp)
   2bb7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2bb80:	e13ffd17 	ldw	r4,-12(fp)
   2bb84:	e17ffe17 	ldw	r5,-8(fp)
   2bb88:	e1bfff17 	ldw	r6,-4(fp)
   2bb8c:	002bdf40 	call	2bdf4 <open>
   2bb90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2bb94:	e0bffb17 	ldw	r2,-20(fp)
   2bb98:	10002216 	blt	r2,zero,2bc24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2bb9c:	040000f4 	movhi	r16,3
   2bba0:	8434bd04 	addi	r16,r16,-11532
   2bba4:	e0bffb17 	ldw	r2,-20(fp)
   2bba8:	1009883a 	mov	r4,r2
   2bbac:	01400304 	movi	r5,12
   2bbb0:	00294380 	call	29438 <__mulsi3>
   2bbb4:	8085883a 	add	r2,r16,r2
   2bbb8:	10c00017 	ldw	r3,0(r2)
   2bbbc:	e0bffc17 	ldw	r2,-16(fp)
   2bbc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2bbc4:	040000f4 	movhi	r16,3
   2bbc8:	8434bd04 	addi	r16,r16,-11532
   2bbcc:	e0bffb17 	ldw	r2,-20(fp)
   2bbd0:	1009883a 	mov	r4,r2
   2bbd4:	01400304 	movi	r5,12
   2bbd8:	00294380 	call	29438 <__mulsi3>
   2bbdc:	8085883a 	add	r2,r16,r2
   2bbe0:	10800104 	addi	r2,r2,4
   2bbe4:	10c00017 	ldw	r3,0(r2)
   2bbe8:	e0bffc17 	ldw	r2,-16(fp)
   2bbec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2bbf0:	040000f4 	movhi	r16,3
   2bbf4:	8434bd04 	addi	r16,r16,-11532
   2bbf8:	e0bffb17 	ldw	r2,-20(fp)
   2bbfc:	1009883a 	mov	r4,r2
   2bc00:	01400304 	movi	r5,12
   2bc04:	00294380 	call	29438 <__mulsi3>
   2bc08:	8085883a 	add	r2,r16,r2
   2bc0c:	10800204 	addi	r2,r2,8
   2bc10:	10c00017 	ldw	r3,0(r2)
   2bc14:	e0bffc17 	ldw	r2,-16(fp)
   2bc18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2bc1c:	e13ffb17 	ldw	r4,-20(fp)
   2bc20:	002a1e40 	call	2a1e4 <alt_release_fd>
  }
} 
   2bc24:	e037883a 	mov	sp,fp
   2bc28:	dfc00217 	ldw	ra,8(sp)
   2bc2c:	df000117 	ldw	fp,4(sp)
   2bc30:	dc000017 	ldw	r16,0(sp)
   2bc34:	dec00304 	addi	sp,sp,12
   2bc38:	f800283a 	ret

0002bc3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2bc3c:	defffb04 	addi	sp,sp,-20
   2bc40:	dfc00415 	stw	ra,16(sp)
   2bc44:	df000315 	stw	fp,12(sp)
   2bc48:	df000304 	addi	fp,sp,12
   2bc4c:	e13ffd15 	stw	r4,-12(fp)
   2bc50:	e17ffe15 	stw	r5,-8(fp)
   2bc54:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2bc58:	010000f4 	movhi	r4,3
   2bc5c:	2134c004 	addi	r4,r4,-11520
   2bc60:	e17ffd17 	ldw	r5,-12(fp)
   2bc64:	01800044 	movi	r6,1
   2bc68:	01c07fc4 	movi	r7,511
   2bc6c:	002bb5c0 	call	2bb5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2bc70:	010000f4 	movhi	r4,3
   2bc74:	2134bd04 	addi	r4,r4,-11532
   2bc78:	e17ffe17 	ldw	r5,-8(fp)
   2bc7c:	000d883a 	mov	r6,zero
   2bc80:	01c07fc4 	movi	r7,511
   2bc84:	002bb5c0 	call	2bb5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2bc88:	010000f4 	movhi	r4,3
   2bc8c:	2134c304 	addi	r4,r4,-11508
   2bc90:	e17fff17 	ldw	r5,-4(fp)
   2bc94:	01800044 	movi	r6,1
   2bc98:	01c07fc4 	movi	r7,511
   2bc9c:	002bb5c0 	call	2bb5c <alt_open_fd>
}  
   2bca0:	e037883a 	mov	sp,fp
   2bca4:	dfc00117 	ldw	ra,4(sp)
   2bca8:	df000017 	ldw	fp,0(sp)
   2bcac:	dec00204 	addi	sp,sp,8
   2bcb0:	f800283a 	ret

0002bcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bcb4:	defffe04 	addi	sp,sp,-8
   2bcb8:	dfc00115 	stw	ra,4(sp)
   2bcbc:	df000015 	stw	fp,0(sp)
   2bcc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bcc4:	008000f4 	movhi	r2,3
   2bcc8:	10b93f04 	addi	r2,r2,-6916
   2bccc:	10800017 	ldw	r2,0(r2)
   2bcd0:	10000526 	beq	r2,zero,2bce8 <alt_get_errno+0x34>
   2bcd4:	008000f4 	movhi	r2,3
   2bcd8:	10b93f04 	addi	r2,r2,-6916
   2bcdc:	10800017 	ldw	r2,0(r2)
   2bce0:	103ee83a 	callr	r2
   2bce4:	00000206 	br	2bcf0 <alt_get_errno+0x3c>
   2bce8:	008000f4 	movhi	r2,3
   2bcec:	10bfe004 	addi	r2,r2,-128
}
   2bcf0:	e037883a 	mov	sp,fp
   2bcf4:	dfc00117 	ldw	ra,4(sp)
   2bcf8:	df000017 	ldw	fp,0(sp)
   2bcfc:	dec00204 	addi	sp,sp,8
   2bd00:	f800283a 	ret

0002bd04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2bd04:	defffb04 	addi	sp,sp,-20
   2bd08:	dfc00415 	stw	ra,16(sp)
   2bd0c:	df000315 	stw	fp,12(sp)
   2bd10:	dc000215 	stw	r16,8(sp)
   2bd14:	df000204 	addi	fp,sp,8
   2bd18:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2bd1c:	e0bfff17 	ldw	r2,-4(fp)
   2bd20:	10800217 	ldw	r2,8(r2)
   2bd24:	10d00034 	orhi	r3,r2,16384
   2bd28:	e0bfff17 	ldw	r2,-4(fp)
   2bd2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bd30:	e03ffe15 	stw	zero,-8(fp)
   2bd34:	00002206 	br	2bdc0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bd38:	040000f4 	movhi	r16,3
   2bd3c:	8434bd04 	addi	r16,r16,-11532
   2bd40:	e0bffe17 	ldw	r2,-8(fp)
   2bd44:	1009883a 	mov	r4,r2
   2bd48:	01400304 	movi	r5,12
   2bd4c:	00294380 	call	29438 <__mulsi3>
   2bd50:	8085883a 	add	r2,r16,r2
   2bd54:	10c00017 	ldw	r3,0(r2)
   2bd58:	e0bfff17 	ldw	r2,-4(fp)
   2bd5c:	10800017 	ldw	r2,0(r2)
   2bd60:	1880141e 	bne	r3,r2,2bdb4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bd64:	040000f4 	movhi	r16,3
   2bd68:	8434bd04 	addi	r16,r16,-11532
   2bd6c:	e0bffe17 	ldw	r2,-8(fp)
   2bd70:	1009883a 	mov	r4,r2
   2bd74:	01400304 	movi	r5,12
   2bd78:	00294380 	call	29438 <__mulsi3>
   2bd7c:	8085883a 	add	r2,r16,r2
   2bd80:	10800204 	addi	r2,r2,8
   2bd84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bd88:	10000a0e 	bge	r2,zero,2bdb4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2bd8c:	e13ffe17 	ldw	r4,-8(fp)
   2bd90:	01400304 	movi	r5,12
   2bd94:	00294380 	call	29438 <__mulsi3>
   2bd98:	00c000f4 	movhi	r3,3
   2bd9c:	18f4bd04 	addi	r3,r3,-11532
   2bda0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bda4:	e0bfff17 	ldw	r2,-4(fp)
   2bda8:	18800226 	beq	r3,r2,2bdb4 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2bdac:	00bffcc4 	movi	r2,-13
   2bdb0:	00000a06 	br	2bddc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bdb4:	e0bffe17 	ldw	r2,-8(fp)
   2bdb8:	10800044 	addi	r2,r2,1
   2bdbc:	e0bffe15 	stw	r2,-8(fp)
   2bdc0:	008000f4 	movhi	r2,3
   2bdc4:	10b93e04 	addi	r2,r2,-6920
   2bdc8:	10800017 	ldw	r2,0(r2)
   2bdcc:	1007883a 	mov	r3,r2
   2bdd0:	e0bffe17 	ldw	r2,-8(fp)
   2bdd4:	18bfd82e 	bgeu	r3,r2,2bd38 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2bdd8:	0005883a 	mov	r2,zero
}
   2bddc:	e037883a 	mov	sp,fp
   2bde0:	dfc00217 	ldw	ra,8(sp)
   2bde4:	df000117 	ldw	fp,4(sp)
   2bde8:	dc000017 	ldw	r16,0(sp)
   2bdec:	dec00304 	addi	sp,sp,12
   2bdf0:	f800283a 	ret

0002bdf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2bdf4:	defff604 	addi	sp,sp,-40
   2bdf8:	dfc00915 	stw	ra,36(sp)
   2bdfc:	df000815 	stw	fp,32(sp)
   2be00:	df000804 	addi	fp,sp,32
   2be04:	e13ffd15 	stw	r4,-12(fp)
   2be08:	e17ffe15 	stw	r5,-8(fp)
   2be0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2be10:	00bfffc4 	movi	r2,-1
   2be14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2be18:	00bffb44 	movi	r2,-19
   2be1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2be20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2be24:	e13ffd17 	ldw	r4,-12(fp)
   2be28:	014000f4 	movhi	r5,3
   2be2c:	29793c04 	addi	r5,r5,-6928
   2be30:	002c1080 	call	2c108 <alt_find_dev>
   2be34:	e0bff815 	stw	r2,-32(fp)
   2be38:	e0bff817 	ldw	r2,-32(fp)
   2be3c:	1000051e 	bne	r2,zero,2be54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2be40:	e13ffd17 	ldw	r4,-12(fp)
   2be44:	002c1980 	call	2c198 <alt_find_file>
   2be48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2be4c:	00800044 	movi	r2,1
   2be50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2be54:	e0bff817 	ldw	r2,-32(fp)
   2be58:	10002a26 	beq	r2,zero,2bf04 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2be5c:	e13ff817 	ldw	r4,-32(fp)
   2be60:	002c2ac0 	call	2c2ac <alt_get_fd>
   2be64:	e0bff915 	stw	r2,-28(fp)
   2be68:	e0bff917 	ldw	r2,-28(fp)
   2be6c:	1000030e 	bge	r2,zero,2be7c <open+0x88>
    {
      status = index;
   2be70:	e0bff917 	ldw	r2,-28(fp)
   2be74:	e0bffa15 	stw	r2,-24(fp)
   2be78:	00002406 	br	2bf0c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2be7c:	e13ff917 	ldw	r4,-28(fp)
   2be80:	01400304 	movi	r5,12
   2be84:	00294380 	call	29438 <__mulsi3>
   2be88:	00c000f4 	movhi	r3,3
   2be8c:	18f4bd04 	addi	r3,r3,-11532
   2be90:	10c5883a 	add	r2,r2,r3
   2be94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2be98:	e0fffe17 	ldw	r3,-8(fp)
   2be9c:	00900034 	movhi	r2,16384
   2bea0:	10bfffc4 	addi	r2,r2,-1
   2bea4:	1886703a 	and	r3,r3,r2
   2bea8:	e0bffc17 	ldw	r2,-16(fp)
   2beac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2beb0:	e0bffb17 	ldw	r2,-20(fp)
   2beb4:	1000051e 	bne	r2,zero,2becc <open+0xd8>
   2beb8:	e13ffc17 	ldw	r4,-16(fp)
   2bebc:	002bd040 	call	2bd04 <alt_file_locked>
   2bec0:	e0bffa15 	stw	r2,-24(fp)
   2bec4:	e0bffa17 	ldw	r2,-24(fp)
   2bec8:	10001016 	blt	r2,zero,2bf0c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2becc:	e0bff817 	ldw	r2,-32(fp)
   2bed0:	10800317 	ldw	r2,12(r2)
   2bed4:	10000826 	beq	r2,zero,2bef8 <open+0x104>
   2bed8:	e0bff817 	ldw	r2,-32(fp)
   2bedc:	10800317 	ldw	r2,12(r2)
   2bee0:	e13ffc17 	ldw	r4,-16(fp)
   2bee4:	e17ffd17 	ldw	r5,-12(fp)
   2bee8:	e1bffe17 	ldw	r6,-8(fp)
   2beec:	e1ffff17 	ldw	r7,-4(fp)
   2bef0:	103ee83a 	callr	r2
   2bef4:	00000106 	br	2befc <open+0x108>
   2bef8:	0005883a 	mov	r2,zero
   2befc:	e0bffa15 	stw	r2,-24(fp)
   2bf00:	00000206 	br	2bf0c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2bf04:	00bffb44 	movi	r2,-19
   2bf08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2bf0c:	e0bffa17 	ldw	r2,-24(fp)
   2bf10:	1000080e 	bge	r2,zero,2bf34 <open+0x140>
  {
    alt_release_fd (index);  
   2bf14:	e13ff917 	ldw	r4,-28(fp)
   2bf18:	002a1e40 	call	2a1e4 <alt_release_fd>
    ALT_ERRNO = -status;
   2bf1c:	002bcb40 	call	2bcb4 <alt_get_errno>
   2bf20:	e0fffa17 	ldw	r3,-24(fp)
   2bf24:	00c7c83a 	sub	r3,zero,r3
   2bf28:	10c00015 	stw	r3,0(r2)
    return -1;
   2bf2c:	00bfffc4 	movi	r2,-1
   2bf30:	00000106 	br	2bf38 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2bf34:	e0bff917 	ldw	r2,-28(fp)
}
   2bf38:	e037883a 	mov	sp,fp
   2bf3c:	dfc00117 	ldw	ra,4(sp)
   2bf40:	df000017 	ldw	fp,0(sp)
   2bf44:	dec00204 	addi	sp,sp,8
   2bf48:	f800283a 	ret

0002bf4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2bf4c:	defffa04 	addi	sp,sp,-24
   2bf50:	df000515 	stw	fp,20(sp)
   2bf54:	df000504 	addi	fp,sp,20
   2bf58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bf5c:	0005303a 	rdctl	r2,status
   2bf60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bf64:	e0fffc17 	ldw	r3,-16(fp)
   2bf68:	00bfff84 	movi	r2,-2
   2bf6c:	1884703a 	and	r2,r3,r2
   2bf70:	1001703a 	wrctl	status,r2
  
  return context;
   2bf74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2bf78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2bf7c:	e0bfff17 	ldw	r2,-4(fp)
   2bf80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2bf84:	e0bffd17 	ldw	r2,-12(fp)
   2bf88:	10800017 	ldw	r2,0(r2)
   2bf8c:	e0fffd17 	ldw	r3,-12(fp)
   2bf90:	18c00117 	ldw	r3,4(r3)
   2bf94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2bf98:	e0bffd17 	ldw	r2,-12(fp)
   2bf9c:	10800117 	ldw	r2,4(r2)
   2bfa0:	e0fffd17 	ldw	r3,-12(fp)
   2bfa4:	18c00017 	ldw	r3,0(r3)
   2bfa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2bfac:	e0bffd17 	ldw	r2,-12(fp)
   2bfb0:	e0fffd17 	ldw	r3,-12(fp)
   2bfb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2bfb8:	e0bffd17 	ldw	r2,-12(fp)
   2bfbc:	e0fffd17 	ldw	r3,-12(fp)
   2bfc0:	10c00015 	stw	r3,0(r2)
   2bfc4:	e0bffb17 	ldw	r2,-20(fp)
   2bfc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bfcc:	e0bffe17 	ldw	r2,-8(fp)
   2bfd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2bfd4:	e037883a 	mov	sp,fp
   2bfd8:	df000017 	ldw	fp,0(sp)
   2bfdc:	dec00104 	addi	sp,sp,4
   2bfe0:	f800283a 	ret

0002bfe4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2bfe4:	defffb04 	addi	sp,sp,-20
   2bfe8:	dfc00415 	stw	ra,16(sp)
   2bfec:	df000315 	stw	fp,12(sp)
   2bff0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2bff4:	d0a00d17 	ldw	r2,-32716(gp)
   2bff8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2bffc:	d0a6b117 	ldw	r2,-25916(gp)
   2c000:	10800044 	addi	r2,r2,1
   2c004:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c008:	00002e06 	br	2c0c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2c00c:	e0bffd17 	ldw	r2,-12(fp)
   2c010:	10800017 	ldw	r2,0(r2)
   2c014:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2c018:	e0bffd17 	ldw	r2,-12(fp)
   2c01c:	10800403 	ldbu	r2,16(r2)
   2c020:	10803fcc 	andi	r2,r2,255
   2c024:	10000426 	beq	r2,zero,2c038 <alt_tick+0x54>
   2c028:	d0a6b117 	ldw	r2,-25916(gp)
   2c02c:	1000021e 	bne	r2,zero,2c038 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2c030:	e0bffd17 	ldw	r2,-12(fp)
   2c034:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2c038:	e0bffd17 	ldw	r2,-12(fp)
   2c03c:	10800217 	ldw	r2,8(r2)
   2c040:	d0e6b117 	ldw	r3,-25916(gp)
   2c044:	18801d36 	bltu	r3,r2,2c0bc <alt_tick+0xd8>
   2c048:	e0bffd17 	ldw	r2,-12(fp)
   2c04c:	10800403 	ldbu	r2,16(r2)
   2c050:	10803fcc 	andi	r2,r2,255
   2c054:	1000191e 	bne	r2,zero,2c0bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2c058:	e0bffd17 	ldw	r2,-12(fp)
   2c05c:	10c00317 	ldw	r3,12(r2)
   2c060:	e0bffd17 	ldw	r2,-12(fp)
   2c064:	10800517 	ldw	r2,20(r2)
   2c068:	1009883a 	mov	r4,r2
   2c06c:	183ee83a 	callr	r3
   2c070:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2c074:	e0bfff17 	ldw	r2,-4(fp)
   2c078:	1000031e 	bne	r2,zero,2c088 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2c07c:	e13ffd17 	ldw	r4,-12(fp)
   2c080:	002bf4c0 	call	2bf4c <alt_alarm_stop>
   2c084:	00000d06 	br	2c0bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2c088:	e0bffd17 	ldw	r2,-12(fp)
   2c08c:	10c00217 	ldw	r3,8(r2)
   2c090:	e0bfff17 	ldw	r2,-4(fp)
   2c094:	1887883a 	add	r3,r3,r2
   2c098:	e0bffd17 	ldw	r2,-12(fp)
   2c09c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2c0a0:	e0bffd17 	ldw	r2,-12(fp)
   2c0a4:	10c00217 	ldw	r3,8(r2)
   2c0a8:	d0a6b117 	ldw	r2,-25916(gp)
   2c0ac:	1880032e 	bgeu	r3,r2,2c0bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2c0b0:	e0bffd17 	ldw	r2,-12(fp)
   2c0b4:	00c00044 	movi	r3,1
   2c0b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2c0bc:	e0bffe17 	ldw	r2,-8(fp)
   2c0c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c0c4:	e0fffd17 	ldw	r3,-12(fp)
   2c0c8:	d0a00d04 	addi	r2,gp,-32716
   2c0cc:	18bfcf1e 	bne	r3,r2,2c00c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2c0d0:	0001883a 	nop
}
   2c0d4:	e037883a 	mov	sp,fp
   2c0d8:	dfc00117 	ldw	ra,4(sp)
   2c0dc:	df000017 	ldw	fp,0(sp)
   2c0e0:	dec00204 	addi	sp,sp,8
   2c0e4:	f800283a 	ret

0002c0e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2c0e8:	deffff04 	addi	sp,sp,-4
   2c0ec:	df000015 	stw	fp,0(sp)
   2c0f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2c0f4:	000170fa 	wrctl	ienable,zero
}
   2c0f8:	e037883a 	mov	sp,fp
   2c0fc:	df000017 	ldw	fp,0(sp)
   2c100:	dec00104 	addi	sp,sp,4
   2c104:	f800283a 	ret

0002c108 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2c108:	defffa04 	addi	sp,sp,-24
   2c10c:	dfc00515 	stw	ra,20(sp)
   2c110:	df000415 	stw	fp,16(sp)
   2c114:	df000404 	addi	fp,sp,16
   2c118:	e13ffe15 	stw	r4,-8(fp)
   2c11c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2c120:	e0bfff17 	ldw	r2,-4(fp)
   2c124:	10800017 	ldw	r2,0(r2)
   2c128:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2c12c:	e13ffe17 	ldw	r4,-8(fp)
   2c130:	00204a00 	call	204a0 <strlen>
   2c134:	10800044 	addi	r2,r2,1
   2c138:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c13c:	00000d06 	br	2c174 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2c140:	e0bffc17 	ldw	r2,-16(fp)
   2c144:	10c00217 	ldw	r3,8(r2)
   2c148:	e0bffd17 	ldw	r2,-12(fp)
   2c14c:	1809883a 	mov	r4,r3
   2c150:	e17ffe17 	ldw	r5,-8(fp)
   2c154:	100d883a 	mov	r6,r2
   2c158:	002c3cc0 	call	2c3cc <memcmp>
   2c15c:	1000021e 	bne	r2,zero,2c168 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2c160:	e0bffc17 	ldw	r2,-16(fp)
   2c164:	00000706 	br	2c184 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2c168:	e0bffc17 	ldw	r2,-16(fp)
   2c16c:	10800017 	ldw	r2,0(r2)
   2c170:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c174:	e0fffc17 	ldw	r3,-16(fp)
   2c178:	e0bfff17 	ldw	r2,-4(fp)
   2c17c:	18bff01e 	bne	r3,r2,2c140 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2c180:	0005883a 	mov	r2,zero
}
   2c184:	e037883a 	mov	sp,fp
   2c188:	dfc00117 	ldw	ra,4(sp)
   2c18c:	df000017 	ldw	fp,0(sp)
   2c190:	dec00204 	addi	sp,sp,8
   2c194:	f800283a 	ret

0002c198 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2c198:	defffb04 	addi	sp,sp,-20
   2c19c:	dfc00415 	stw	ra,16(sp)
   2c1a0:	df000315 	stw	fp,12(sp)
   2c1a4:	df000304 	addi	fp,sp,12
   2c1a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2c1ac:	008000f4 	movhi	r2,3
   2c1b0:	10b93a04 	addi	r2,r2,-6936
   2c1b4:	10800017 	ldw	r2,0(r2)
   2c1b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c1bc:	00003106 	br	2c284 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2c1c0:	e0bffd17 	ldw	r2,-12(fp)
   2c1c4:	10800217 	ldw	r2,8(r2)
   2c1c8:	1009883a 	mov	r4,r2
   2c1cc:	00204a00 	call	204a0 <strlen>
   2c1d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2c1d4:	e0bffd17 	ldw	r2,-12(fp)
   2c1d8:	10c00217 	ldw	r3,8(r2)
   2c1dc:	e0bffe17 	ldw	r2,-8(fp)
   2c1e0:	10bfffc4 	addi	r2,r2,-1
   2c1e4:	1885883a 	add	r2,r3,r2
   2c1e8:	10800003 	ldbu	r2,0(r2)
   2c1ec:	10803fcc 	andi	r2,r2,255
   2c1f0:	1080201c 	xori	r2,r2,128
   2c1f4:	10bfe004 	addi	r2,r2,-128
   2c1f8:	10800bd8 	cmpnei	r2,r2,47
   2c1fc:	1000031e 	bne	r2,zero,2c20c <alt_find_file+0x74>
    {
      len -= 1;
   2c200:	e0bffe17 	ldw	r2,-8(fp)
   2c204:	10bfffc4 	addi	r2,r2,-1
   2c208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c20c:	e0bffe17 	ldw	r2,-8(fp)
   2c210:	e0ffff17 	ldw	r3,-4(fp)
   2c214:	1885883a 	add	r2,r3,r2
   2c218:	10800003 	ldbu	r2,0(r2)
   2c21c:	10803fcc 	andi	r2,r2,255
   2c220:	1080201c 	xori	r2,r2,128
   2c224:	10bfe004 	addi	r2,r2,-128
   2c228:	10800be0 	cmpeqi	r2,r2,47
   2c22c:	1000081e 	bne	r2,zero,2c250 <alt_find_file+0xb8>
   2c230:	e0bffe17 	ldw	r2,-8(fp)
   2c234:	e0ffff17 	ldw	r3,-4(fp)
   2c238:	1885883a 	add	r2,r3,r2
   2c23c:	10800003 	ldbu	r2,0(r2)
   2c240:	10803fcc 	andi	r2,r2,255
   2c244:	1080201c 	xori	r2,r2,128
   2c248:	10bfe004 	addi	r2,r2,-128
   2c24c:	10000a1e 	bne	r2,zero,2c278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2c250:	e0bffd17 	ldw	r2,-12(fp)
   2c254:	10c00217 	ldw	r3,8(r2)
   2c258:	e0bffe17 	ldw	r2,-8(fp)
   2c25c:	1809883a 	mov	r4,r3
   2c260:	e17fff17 	ldw	r5,-4(fp)
   2c264:	100d883a 	mov	r6,r2
   2c268:	002c3cc0 	call	2c3cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c26c:	1000021e 	bne	r2,zero,2c278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2c270:	e0bffd17 	ldw	r2,-12(fp)
   2c274:	00000806 	br	2c298 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2c278:	e0bffd17 	ldw	r2,-12(fp)
   2c27c:	10800017 	ldw	r2,0(r2)
   2c280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c284:	e0fffd17 	ldw	r3,-12(fp)
   2c288:	008000f4 	movhi	r2,3
   2c28c:	10b93a04 	addi	r2,r2,-6936
   2c290:	18bfcb1e 	bne	r3,r2,2c1c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2c294:	0005883a 	mov	r2,zero
}
   2c298:	e037883a 	mov	sp,fp
   2c29c:	dfc00117 	ldw	ra,4(sp)
   2c2a0:	df000017 	ldw	fp,0(sp)
   2c2a4:	dec00204 	addi	sp,sp,8
   2c2a8:	f800283a 	ret

0002c2ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2c2ac:	defffa04 	addi	sp,sp,-24
   2c2b0:	dfc00515 	stw	ra,20(sp)
   2c2b4:	df000415 	stw	fp,16(sp)
   2c2b8:	dc000315 	stw	r16,12(sp)
   2c2bc:	df000304 	addi	fp,sp,12
   2c2c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2c2c4:	00bffa04 	movi	r2,-24
   2c2c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c2cc:	e03ffd15 	stw	zero,-12(fp)
   2c2d0:	00002106 	br	2c358 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2c2d4:	040000f4 	movhi	r16,3
   2c2d8:	8434bd04 	addi	r16,r16,-11532
   2c2dc:	e0bffd17 	ldw	r2,-12(fp)
   2c2e0:	1009883a 	mov	r4,r2
   2c2e4:	01400304 	movi	r5,12
   2c2e8:	00294380 	call	29438 <__mulsi3>
   2c2ec:	8085883a 	add	r2,r16,r2
   2c2f0:	10800017 	ldw	r2,0(r2)
   2c2f4:	1000151e 	bne	r2,zero,2c34c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2c2f8:	040000f4 	movhi	r16,3
   2c2fc:	8434bd04 	addi	r16,r16,-11532
   2c300:	e0bffd17 	ldw	r2,-12(fp)
   2c304:	1009883a 	mov	r4,r2
   2c308:	01400304 	movi	r5,12
   2c30c:	00294380 	call	29438 <__mulsi3>
   2c310:	8085883a 	add	r2,r16,r2
   2c314:	e0ffff17 	ldw	r3,-4(fp)
   2c318:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2c31c:	008000f4 	movhi	r2,3
   2c320:	10b93e04 	addi	r2,r2,-6920
   2c324:	10c00017 	ldw	r3,0(r2)
   2c328:	e0bffd17 	ldw	r2,-12(fp)
   2c32c:	1880040e 	bge	r3,r2,2c340 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2c330:	008000f4 	movhi	r2,3
   2c334:	10b93e04 	addi	r2,r2,-6920
   2c338:	e0fffd17 	ldw	r3,-12(fp)
   2c33c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2c340:	e0bffd17 	ldw	r2,-12(fp)
   2c344:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2c348:	00000606 	br	2c364 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c34c:	e0bffd17 	ldw	r2,-12(fp)
   2c350:	10800044 	addi	r2,r2,1
   2c354:	e0bffd15 	stw	r2,-12(fp)
   2c358:	e0bffd17 	ldw	r2,-12(fp)
   2c35c:	10800810 	cmplti	r2,r2,32
   2c360:	103fdc1e 	bne	r2,zero,2c2d4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2c364:	e0bffe17 	ldw	r2,-8(fp)
}
   2c368:	e037883a 	mov	sp,fp
   2c36c:	dfc00217 	ldw	ra,8(sp)
   2c370:	df000117 	ldw	fp,4(sp)
   2c374:	dc000017 	ldw	r16,0(sp)
   2c378:	dec00304 	addi	sp,sp,12
   2c37c:	f800283a 	ret

0002c380 <atexit>:
   2c380:	200b883a 	mov	r5,r4
   2c384:	000d883a 	mov	r6,zero
   2c388:	0009883a 	mov	r4,zero
   2c38c:	000f883a 	mov	r7,zero
   2c390:	002c4481 	jmpi	2c448 <__register_exitproc>

0002c394 <exit>:
   2c394:	defffe04 	addi	sp,sp,-8
   2c398:	000b883a 	mov	r5,zero
   2c39c:	dc000015 	stw	r16,0(sp)
   2c3a0:	dfc00115 	stw	ra,4(sp)
   2c3a4:	2021883a 	mov	r16,r4
   2c3a8:	002c5780 	call	2c578 <__call_exitprocs>
   2c3ac:	008000f4 	movhi	r2,3
   2c3b0:	10b93504 	addi	r2,r2,-6956
   2c3b4:	11000017 	ldw	r4,0(r2)
   2c3b8:	20800f17 	ldw	r2,60(r4)
   2c3bc:	10000126 	beq	r2,zero,2c3c4 <exit+0x30>
   2c3c0:	103ee83a 	callr	r2
   2c3c4:	8009883a 	mov	r4,r16
   2c3c8:	002c7180 	call	2c718 <_exit>

0002c3cc <memcmp>:
   2c3cc:	01c000c4 	movi	r7,3
   2c3d0:	3980192e 	bgeu	r7,r6,2c438 <memcmp+0x6c>
   2c3d4:	2904b03a 	or	r2,r5,r4
   2c3d8:	11c4703a 	and	r2,r2,r7
   2c3dc:	10000f26 	beq	r2,zero,2c41c <memcmp+0x50>
   2c3e0:	20c00003 	ldbu	r3,0(r4)
   2c3e4:	28800003 	ldbu	r2,0(r5)
   2c3e8:	1880151e 	bne	r3,r2,2c440 <memcmp+0x74>
   2c3ec:	31bfff84 	addi	r6,r6,-2
   2c3f0:	01ffffc4 	movi	r7,-1
   2c3f4:	00000406 	br	2c408 <memcmp+0x3c>
   2c3f8:	20c00003 	ldbu	r3,0(r4)
   2c3fc:	28800003 	ldbu	r2,0(r5)
   2c400:	31bfffc4 	addi	r6,r6,-1
   2c404:	18800e1e 	bne	r3,r2,2c440 <memcmp+0x74>
   2c408:	21000044 	addi	r4,r4,1
   2c40c:	29400044 	addi	r5,r5,1
   2c410:	31fff91e 	bne	r6,r7,2c3f8 <memcmp+0x2c>
   2c414:	0005883a 	mov	r2,zero
   2c418:	f800283a 	ret
   2c41c:	20c00017 	ldw	r3,0(r4)
   2c420:	28800017 	ldw	r2,0(r5)
   2c424:	1880041e 	bne	r3,r2,2c438 <memcmp+0x6c>
   2c428:	31bfff04 	addi	r6,r6,-4
   2c42c:	21000104 	addi	r4,r4,4
   2c430:	29400104 	addi	r5,r5,4
   2c434:	39bff936 	bltu	r7,r6,2c41c <memcmp+0x50>
   2c438:	303fe91e 	bne	r6,zero,2c3e0 <memcmp+0x14>
   2c43c:	003ff506 	br	2c414 <memcmp+0x48>
   2c440:	1885c83a 	sub	r2,r3,r2
   2c444:	f800283a 	ret

0002c448 <__register_exitproc>:
   2c448:	defffa04 	addi	sp,sp,-24
   2c44c:	008000f4 	movhi	r2,3
   2c450:	10b93504 	addi	r2,r2,-6956
   2c454:	dc000315 	stw	r16,12(sp)
   2c458:	14000017 	ldw	r16,0(r2)
   2c45c:	dc400415 	stw	r17,16(sp)
   2c460:	dfc00515 	stw	ra,20(sp)
   2c464:	80805217 	ldw	r2,328(r16)
   2c468:	2023883a 	mov	r17,r4
   2c46c:	10003e26 	beq	r2,zero,2c568 <__register_exitproc+0x120>
   2c470:	10c00117 	ldw	r3,4(r2)
   2c474:	020007c4 	movi	r8,31
   2c478:	40c0180e 	bge	r8,r3,2c4dc <__register_exitproc+0x94>
   2c47c:	00800034 	movhi	r2,0
   2c480:	10800004 	addi	r2,r2,0
   2c484:	1000061e 	bne	r2,zero,2c4a0 <__register_exitproc+0x58>
   2c488:	00bfffc4 	movi	r2,-1
   2c48c:	dfc00517 	ldw	ra,20(sp)
   2c490:	dc400417 	ldw	r17,16(sp)
   2c494:	dc000317 	ldw	r16,12(sp)
   2c498:	dec00604 	addi	sp,sp,24
   2c49c:	f800283a 	ret
   2c4a0:	01006404 	movi	r4,400
   2c4a4:	d9400015 	stw	r5,0(sp)
   2c4a8:	d9800115 	stw	r6,4(sp)
   2c4ac:	d9c00215 	stw	r7,8(sp)
   2c4b0:	00000000 	call	0 <__alt_mem_onchip_mem_c0-0x20000>
   2c4b4:	d9400017 	ldw	r5,0(sp)
   2c4b8:	d9800117 	ldw	r6,4(sp)
   2c4bc:	d9c00217 	ldw	r7,8(sp)
   2c4c0:	103ff126 	beq	r2,zero,2c488 <__register_exitproc+0x40>
   2c4c4:	80c05217 	ldw	r3,328(r16)
   2c4c8:	10000115 	stw	zero,4(r2)
   2c4cc:	10c00015 	stw	r3,0(r2)
   2c4d0:	80805215 	stw	r2,328(r16)
   2c4d4:	10006215 	stw	zero,392(r2)
   2c4d8:	10006315 	stw	zero,396(r2)
   2c4dc:	10c00117 	ldw	r3,4(r2)
   2c4e0:	88000d1e 	bne	r17,zero,2c518 <__register_exitproc+0xd0>
   2c4e4:	19000084 	addi	r4,r3,2
   2c4e8:	2109883a 	add	r4,r4,r4
   2c4ec:	18c00044 	addi	r3,r3,1
   2c4f0:	2109883a 	add	r4,r4,r4
   2c4f4:	1109883a 	add	r4,r2,r4
   2c4f8:	10c00115 	stw	r3,4(r2)
   2c4fc:	0005883a 	mov	r2,zero
   2c500:	21400015 	stw	r5,0(r4)
   2c504:	dfc00517 	ldw	ra,20(sp)
   2c508:	dc400417 	ldw	r17,16(sp)
   2c50c:	dc000317 	ldw	r16,12(sp)
   2c510:	dec00604 	addi	sp,sp,24
   2c514:	f800283a 	ret
   2c518:	02400044 	movi	r9,1
   2c51c:	12806217 	ldw	r10,392(r2)
   2c520:	48d2983a 	sll	r9,r9,r3
   2c524:	19000804 	addi	r4,r3,32
   2c528:	18d1883a 	add	r8,r3,r3
   2c52c:	2109883a 	add	r4,r4,r4
   2c530:	4211883a 	add	r8,r8,r8
   2c534:	2109883a 	add	r4,r4,r4
   2c538:	1109883a 	add	r4,r2,r4
   2c53c:	1211883a 	add	r8,r2,r8
   2c540:	5254b03a 	or	r10,r10,r9
   2c544:	21c02215 	stw	r7,136(r4)
   2c548:	41802215 	stw	r6,136(r8)
   2c54c:	12806215 	stw	r10,392(r2)
   2c550:	01000084 	movi	r4,2
   2c554:	893fe31e 	bne	r17,r4,2c4e4 <__register_exitproc+0x9c>
   2c558:	11006317 	ldw	r4,396(r2)
   2c55c:	2252b03a 	or	r9,r4,r9
   2c560:	12406315 	stw	r9,396(r2)
   2c564:	003fdf06 	br	2c4e4 <__register_exitproc+0x9c>
   2c568:	008000f4 	movhi	r2,3
   2c56c:	10803104 	addi	r2,r2,196
   2c570:	80805215 	stw	r2,328(r16)
   2c574:	003fbe06 	br	2c470 <__register_exitproc+0x28>

0002c578 <__call_exitprocs>:
   2c578:	008000f4 	movhi	r2,3
   2c57c:	10b93504 	addi	r2,r2,-6956
   2c580:	10800017 	ldw	r2,0(r2)
   2c584:	defff304 	addi	sp,sp,-52
   2c588:	df000b15 	stw	fp,44(sp)
   2c58c:	d8800015 	stw	r2,0(sp)
   2c590:	10805204 	addi	r2,r2,328
   2c594:	dd400815 	stw	r21,32(sp)
   2c598:	dfc00c15 	stw	ra,48(sp)
   2c59c:	ddc00a15 	stw	r23,40(sp)
   2c5a0:	dd800915 	stw	r22,36(sp)
   2c5a4:	dd000715 	stw	r20,28(sp)
   2c5a8:	dcc00615 	stw	r19,24(sp)
   2c5ac:	dc800515 	stw	r18,20(sp)
   2c5b0:	dc400415 	stw	r17,16(sp)
   2c5b4:	dc000315 	stw	r16,12(sp)
   2c5b8:	d9000115 	stw	r4,4(sp)
   2c5bc:	2839883a 	mov	fp,r5
   2c5c0:	d8800215 	stw	r2,8(sp)
   2c5c4:	057fffc4 	movi	r21,-1
   2c5c8:	d8800017 	ldw	r2,0(sp)
   2c5cc:	ddc00217 	ldw	r23,8(sp)
   2c5d0:	14805217 	ldw	r18,328(r2)
   2c5d4:	90001726 	beq	r18,zero,2c634 <__call_exitprocs+0xbc>
   2c5d8:	94400117 	ldw	r17,4(r18)
   2c5dc:	8c3fffc4 	addi	r16,r17,-1
   2c5e0:	80001116 	blt	r16,zero,2c628 <__call_exitprocs+0xb0>
   2c5e4:	8c400044 	addi	r17,r17,1
   2c5e8:	8427883a 	add	r19,r16,r16
   2c5ec:	8c63883a 	add	r17,r17,r17
   2c5f0:	95802204 	addi	r22,r18,136
   2c5f4:	9ce7883a 	add	r19,r19,r19
   2c5f8:	8c63883a 	add	r17,r17,r17
   2c5fc:	b4e7883a 	add	r19,r22,r19
   2c600:	9463883a 	add	r17,r18,r17
   2c604:	e0001726 	beq	fp,zero,2c664 <__call_exitprocs+0xec>
   2c608:	8c87c83a 	sub	r3,r17,r18
   2c60c:	b0c7883a 	add	r3,r22,r3
   2c610:	18c01e17 	ldw	r3,120(r3)
   2c614:	1f001326 	beq	r3,fp,2c664 <__call_exitprocs+0xec>
   2c618:	843fffc4 	addi	r16,r16,-1
   2c61c:	9cffff04 	addi	r19,r19,-4
   2c620:	8c7fff04 	addi	r17,r17,-4
   2c624:	857ff71e 	bne	r16,r21,2c604 <__call_exitprocs+0x8c>
   2c628:	00800034 	movhi	r2,0
   2c62c:	10800004 	addi	r2,r2,0
   2c630:	10002a1e 	bne	r2,zero,2c6dc <__call_exitprocs+0x164>
   2c634:	dfc00c17 	ldw	ra,48(sp)
   2c638:	df000b17 	ldw	fp,44(sp)
   2c63c:	ddc00a17 	ldw	r23,40(sp)
   2c640:	dd800917 	ldw	r22,36(sp)
   2c644:	dd400817 	ldw	r21,32(sp)
   2c648:	dd000717 	ldw	r20,28(sp)
   2c64c:	dcc00617 	ldw	r19,24(sp)
   2c650:	dc800517 	ldw	r18,20(sp)
   2c654:	dc400417 	ldw	r17,16(sp)
   2c658:	dc000317 	ldw	r16,12(sp)
   2c65c:	dec00d04 	addi	sp,sp,52
   2c660:	f800283a 	ret
   2c664:	91000117 	ldw	r4,4(r18)
   2c668:	88c00017 	ldw	r3,0(r17)
   2c66c:	213fffc4 	addi	r4,r4,-1
   2c670:	24001526 	beq	r4,r16,2c6c8 <__call_exitprocs+0x150>
   2c674:	88000015 	stw	zero,0(r17)
   2c678:	183fe726 	beq	r3,zero,2c618 <__call_exitprocs+0xa0>
   2c67c:	00800044 	movi	r2,1
   2c680:	1408983a 	sll	r4,r2,r16
   2c684:	91406217 	ldw	r5,392(r18)
   2c688:	95000117 	ldw	r20,4(r18)
   2c68c:	214a703a 	and	r5,r4,r5
   2c690:	28000b26 	beq	r5,zero,2c6c0 <__call_exitprocs+0x148>
   2c694:	91406317 	ldw	r5,396(r18)
   2c698:	2148703a 	and	r4,r4,r5
   2c69c:	20000c1e 	bne	r4,zero,2c6d0 <__call_exitprocs+0x158>
   2c6a0:	99400017 	ldw	r5,0(r19)
   2c6a4:	d9000117 	ldw	r4,4(sp)
   2c6a8:	183ee83a 	callr	r3
   2c6ac:	90c00117 	ldw	r3,4(r18)
   2c6b0:	1d3fc51e 	bne	r3,r20,2c5c8 <__call_exitprocs+0x50>
   2c6b4:	b8c00017 	ldw	r3,0(r23)
   2c6b8:	1cbfd726 	beq	r3,r18,2c618 <__call_exitprocs+0xa0>
   2c6bc:	003fc206 	br	2c5c8 <__call_exitprocs+0x50>
   2c6c0:	183ee83a 	callr	r3
   2c6c4:	003ff906 	br	2c6ac <__call_exitprocs+0x134>
   2c6c8:	94000115 	stw	r16,4(r18)
   2c6cc:	003fea06 	br	2c678 <__call_exitprocs+0x100>
   2c6d0:	99000017 	ldw	r4,0(r19)
   2c6d4:	183ee83a 	callr	r3
   2c6d8:	003ff406 	br	2c6ac <__call_exitprocs+0x134>
   2c6dc:	90c00117 	ldw	r3,4(r18)
   2c6e0:	1800071e 	bne	r3,zero,2c700 <__call_exitprocs+0x188>
   2c6e4:	90c00017 	ldw	r3,0(r18)
   2c6e8:	18000926 	beq	r3,zero,2c710 <__call_exitprocs+0x198>
   2c6ec:	9009883a 	mov	r4,r18
   2c6f0:	b8c00015 	stw	r3,0(r23)
   2c6f4:	00000000 	call	0 <__alt_mem_onchip_mem_c0-0x20000>
   2c6f8:	bc800017 	ldw	r18,0(r23)
   2c6fc:	003fb506 	br	2c5d4 <__call_exitprocs+0x5c>
   2c700:	90c00017 	ldw	r3,0(r18)
   2c704:	902f883a 	mov	r23,r18
   2c708:	1825883a 	mov	r18,r3
   2c70c:	003fb106 	br	2c5d4 <__call_exitprocs+0x5c>
   2c710:	0007883a 	mov	r3,zero
   2c714:	003ffb06 	br	2c704 <__call_exitprocs+0x18c>

0002c718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2c718:	defffc04 	addi	sp,sp,-16
   2c71c:	df000315 	stw	fp,12(sp)
   2c720:	df000304 	addi	fp,sp,12
   2c724:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2c728:	0001883a 	nop
   2c72c:	e0bfff17 	ldw	r2,-4(fp)
   2c730:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2c734:	e0bffd17 	ldw	r2,-12(fp)
   2c738:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2c73c:	e0bffe17 	ldw	r2,-8(fp)
   2c740:	10000226 	beq	r2,zero,2c74c <_exit+0x34>
    ALT_SIM_FAIL();
   2c744:	002af070 	cmpltui	zero,zero,43969
   2c748:	00000106 	br	2c750 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2c74c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2c750:	003fff06 	br	2c750 <_exit+0x38>

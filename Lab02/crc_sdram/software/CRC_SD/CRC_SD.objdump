
CRC_SD.elf:     file format elf32-littlenios2
CRC_SD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d630 memsz 0x0000d630 flags r-x
    LOAD off    0x0000e650 vaddr 0x0000d650 paddr 0x0000f0a8 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x00010b00 vaddr 0x00010b00 paddr 0x00010b00 align 2**12
         filesz 0x00000000 memsz 0x000026f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cb40  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000958  0000ccf8  0000ccf8  0000dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0000d650  0000f0a8  0000e650  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000026f4  00010b00  00010b00  00010b00  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  000100d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022d04  00000000  00000000  00010e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000090fa  00000000  00000000  00033b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a392  00000000  00000000  0003cc86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000018f0  00000000  00000000  00047018  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002eed  00000000  00000000  00048908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010d9b  00000000  00000000  0004b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005c590  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000600d8  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000600db  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000600de  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000600df  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000600e0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000600e4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000600e8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000600ec  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000600f5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000600fe  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  00060107  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  0006010f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00049f88  00000000  00000000  0006012c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0000ccf8 l    d  .rodata	00000000 .rodata
0000d650 l    d  .rwdata	00000000 .rwdata
00010b00 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CRC_SD_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
000002f4 l     F .text	0000008c reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000cd0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000d650 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000fec l     F .text	00000034 __sprint_r
0000d37a l     O .rodata	00000010 blanks.3515
0000d38a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000031d4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c44 l     F .text	00000008 __fp_lock
00004c4c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0000d3bc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d504 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00009228 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a5a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a6c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a728 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a828 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a91c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000aa08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000abe4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f098 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ae58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000af98 l     F .text	00000038 alt_dev_reg
0000e00c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b2b0 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000b4b4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000baf0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000be88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c314 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c46c l     F .text	00000050 alt_get_errno
0000c4bc l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
00007704 g     F .text	00000074 _mprec_log10
000077f4 g     F .text	00000084 __any_on
00008474 g     F .text	00000064 _isatty_r
0000d3ec g     O .rodata	00000028 __mprec_tinytens
0000ab2c g     F .text	00000078 alt_main
0000a560 g     F .text	00000044 __ashldi3
00000ec8 g     F .text	00000084 _puts_r
00012f64 g     O .bss	00000100 alt_irq
000084d8 g     F .text	0000006c _lseek_r
0000f0a8 g       *ABS*	00000000 __flash_rwdata_start
00009ac8 g     F .text	0000005c __eqdf2
000131f4 g       *ABS*	00000000 __alt_heap_start
00000e8c g     F .text	0000003c printf
00008018 g     F .text	0000005c __sseek
00004ce8 g     F .text	0000010c __sinit
00005980 g     F .text	0000009c _setlocale_r
00004c60 g     F .text	00000078 __sfmoreglue
0000abc4 g     F .text	00000020 __malloc_unlock
00010b2c g     O .bss	00000004 altera_avalon_timer_ts_freq
000065c0 g     F .text	0000018c memmove
00004cd8 g     F .text	00000010 _cleanup
00006828 g     F .text	000000a8 _Balloc
00009b80 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000840c g     F .text	00000068 _fstat_r
00010b18 g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
00010b20 g     O .bss	00000004 alt_argv
0001706c g       *ABS*	00000000 _gp
0000de8c g     O .rwdata	00000180 alt_fd_list
0000c8c0 g     F .text	00000090 alt_find_dev
00006480 g     F .text	00000140 memcpy
00004c54 g     F .text	0000000c _cleanup_r
00009ca4 g     F .text	000000d4 __floatsidf
0000c3f4 g     F .text	00000078 alt_io_redirect
00009c48 g     F .text	0000005c __ltdf2
0000ccf8 g       *ABS*	00000000 __DTOR_END__
00000f4c g     F .text	00000014 puts
00007660 g     F .text	000000a4 __ratio
0000b6b4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000e60 g     F .text	0000002c _printf_r
00000df0 g     F .text	00000008 __udivsi3
0000a878 g     F .text	000000a4 isatty
0000d43c g     O .rodata	000000c8 __mprec_tens
00005a1c g     F .text	0000000c __locale_charset
00010b14 g     O .bss	00000004 __malloc_top_pad
0000f074 g     O .rwdata	00000004 __mb_cur_max
00005a28 g     F .text	0000000c _localeconv_r
00006c58 g     F .text	0000003c __i2b
0000533c g     F .text	000004e4 __sfvwrite_r
00007ed8 g     F .text	00000064 _sbrk_r
00008544 g     F .text	0000006c _read_r
0000da50 g     O .rwdata	0000000c __lc_ctype
0000f090 g     O .rwdata	00000004 alt_max_fd
0000a348 g     F .text	00000104 __unpack_d
000082bc g     F .text	0000013c _fclose_r
00004c14 g     F .text	00000030 fflush
00010b10 g     O .bss	00000004 __malloc_max_sbrked_mem
0000957c g     F .text	00000054 __adddf3
000073d4 g     F .text	00000148 __b2d
00008c00 g     F .text	00000628 __umoddi3
0000aa58 g     F .text	000000d4 lseek
0000f06c g     O .rwdata	00000004 _global_impure_ptr
00007878 g     F .text	000005fc _realloc_r
000131f4 g       *ABS*	00000000 __bss_end
0000c224 g     F .text	000000f0 alt_iic_isr_register
0000c79c g     F .text	00000104 alt_tick
000085b0 g     F .text	00000650 __udivdi3
0000d414 g     O .rodata	00000028 __mprec_bigtens
00006a3c g     F .text	00000104 __s2b
00009e4c g     F .text	0000011c __floatunsidf
00007174 g     F .text	00000058 __mcmp
00004f00 g     F .text	00000018 __fp_lock_all
0000c1d8 g     F .text	0000004c alt_ic_irq_enabled
0000c704 g     F .text	00000098 alt_alarm_stop
00010b30 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
0000de64 g     O .rwdata	00000028 alt_dev_null
0000be6c g     F .text	0000001c alt_dcache_flush_all
00006b40 g     F .text	00000068 __hi0bits
00009d78 g     F .text	000000d4 __fixdfsi
0000f0a8 g       *ABS*	00000000 __ram_rwdata_end
0000f088 g     O .rwdata	00000008 alt_dev_list
0000aea8 g     F .text	000000f0 write
00000380 g     F .text	000000ec crcSlow
0000bd04 g     F .text	00000028 alt_timestamp_freq
0000d650 g       *ABS*	00000000 __ram_rodata_end
0000a778 g     F .text	000000b0 fstat
0000a51c g     F .text	00000044 __lshrdi3
00006eec g     F .text	0000012c __pow5mult
00010b08 g     O .bss	00000004 __nlocale_changed
00000df8 g     F .text	00000008 __umodsi3
000131f4 g       *ABS*	00000000 end
00010f64 g     O .bss	00002000 data_buffer_region
0000b1f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000ccf8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000bb64 g     F .text	00000088 alt_avalon_timer_sc_init
0000a078 g     F .text	000000ac __clzsi2
0000b8cc g     F .text	00000224 altera_avalon_jtag_uart_write
00004ef0 g     F .text	00000004 __sfp_lock_acquire
00006388 g     F .text	000000f8 memchr
00001020 g     F .text	00001e7c ___vfprintf_internal_r
0000506c g     F .text	000002d0 _free_r
00003034 g     F .text	000001a0 __call_exitprocs
00010b04 g     O .bss	00000004 __mlocale_changed
0000f078 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00010b34 g     O .bss	00000004 _alt_tick_rate
00007018 g     F .text	0000015c __lshift
00010b38 g     O .bss	00000004 _alt_nticks
0000ac34 g     F .text	000000f4 read
0000b004 g     F .text	00000088 alt_sys_init
0000cbc8 g     F .text	00000130 __register_exitproc
00006c94 g     F .text	00000258 __multiply
0000b558 g     F .text	00000068 altera_avalon_jtag_uart_close
00000e00 g     F .text	00000028 __mulsi3
0000d650 g       *ABS*	00000000 __ram_rwdata_start
0000ccf8 g       *ABS*	00000000 __ram_rodata_start
00010b3c g     O .bss	00000028 __malloc_current_mallinfo
0000751c g     F .text	00000144 __d2b
0000b08c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000ca64 g     F .text	000000d4 alt_get_fd
0000a44c g     F .text	000000d0 __fpcmp_parts_d
00008258 g     F .text	00000064 _close_r
0000cb4c g     F .text	0000007c memcmp
0000b14c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000131f4 g       *ABS*	00000000 __alt_stack_base
0000b19c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002ec0 g     F .text	00000174 __swsetup_r
00009914 g     F .text	000001b4 __divdf3
0000046c g     F .text	000000bc crcInit
00004df4 g     F .text	000000fc __sfp
00007778 g     F .text	0000007c __copybits
0000da5c g     O .rwdata	00000408 __malloc_av_
00004efc g     F .text	00000004 __sinit_lock_release
00009630 g     F .text	000002e4 __muldf3
00007f3c g     F .text	00000054 __sread
000001f4 g     F .text	00000100 crcCI
0000c950 g     F .text	00000114 alt_find_file
0000bed8 g     F .text	000000a0 alt_dev_llist_insert
0000aba4 g     F .text	00000020 __malloc_lock
0000ada8 g     F .text	000000b0 sbrk
00004a2c g     F .text	000001e8 _fflush_r
0000818c g     F .text	000000cc _calloc_r
00010b00 g       *ABS*	00000000 __bss_start
0000674c g     F .text	000000dc memset
000005ec g     F .text	000006e4 main
00010b24 g     O .bss	00000004 alt_envp
00010b0c g     O .bss	00000004 __malloc_max_total_mem
0000b0ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008074 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000083f8 g     F .text	00000014 fclose
0000bbec g     F .text	00000088 alt_timestamp_start
00013064 g     O .bss	00000190 _atexit0
00003410 g     F .text	0000161c _dtoa_r
00005c04 g     F .text	00000784 _malloc_r
0000f094 g     O .rwdata	00000004 alt_errno
00005820 g     F .text	000000a8 _fwalk
00000d44 g     F .text	00000050 __divsi3
0000d510 g     O .rodata	00000014 __thenan_df
00004f30 g     F .text	0000013c _malloc_trim_r
0000ccf8 g       *ABS*	00000000 __CTOR_END__
0000807c g     F .text	000000a4 strcmp
0000ccf8 g       *ABS*	00000000 __flash_rodata_start
0000ccf8 g       *ABS*	00000000 __DTOR_LIST__
00009b24 g     F .text	0000005c __nedf2
0000afd0 g     F .text	00000034 alt_irq_init
0000ad28 g     F .text	00000080 alt_release_fd
0000d524 g     O .rodata	00000100 __clz_tab
00010b00 g     O .bss	00000004 _PathLocale
0000cb38 g     F .text	00000014 atexit
00008120 g     F .text	0000006c _write_r
00005a34 g     F .text	0000001c setlocale
0000f070 g     O .rwdata	00000004 _impure_ptr
00010b1c g     O .bss	00000004 alt_argc
00010b28 g     O .bss	00000004 altera_avalon_timer_ts_base
0000bfd4 g     F .text	0000005c _do_dtors
00000528 g     F .text	000000c4 crcFast
00000020 g       .exceptions	00000000 alt_irq_entry
00007374 g     F .text	00000060 __ulp
00007e74 g     F .text	00000038 __isinfd
00004f18 g     F .text	00000018 __fp_unlock_all
0000f080 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005a50 g     F .text	0000000c localeconv
0000bc74 g     F .text	00000090 alt_timestamp
0000c04c g     F .text	00000050 alt_ic_isr_register
0000f0a8 g       *ABS*	00000000 _edata
000131f4 g       *ABS*	00000000 _end
00010b64 g     O .bss	00000400 crcTable
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000b5c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c138 g     F .text	000000a0 alt_ic_irq_disable
00007f90 g     F .text	00000088 __swrite
0000f07c g     O .rwdata	00000004 __malloc_trim_threshold
0000c8a0 g     F .text	00000020 altera_nios2_qsys_irq_init
00000e28 g     F .text	00000038 exit
000058c8 g     F .text	000000b8 _fwalk_reent
000071cc g     F .text	000001a8 __mdiff
00000d94 g     F .text	0000005c __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004ef4 g     F .text	00000004 __sfp_lock_release
00007eac g     F .text	0000002c __isnand
0000a6ec g     F .text	0000003c _exit
0000bd2c g     F .text	00000140 alt_alarm_start
00009f68 g     F .text	00000110 __muldi3
00005a5c g     F .text	000001a8 __smakebuf_r
00000f60 g     F .text	0000008c strlen
0000c5ac g     F .text	00000158 open
00009be4 g     F .text	00000064 __gedf2
0000c030 g     F .text	0000001c alt_icache_flush_all
0000f09c g     O .rwdata	00000004 alt_priority_mask
0000c09c g     F .text	0000009c alt_ic_irq_enable
00002e9c g     F .text	00000024 __vfprintf_internal
000095d0 g     F .text	00000060 __subdf3
00006ba8 g     F .text	000000b0 __lo0bits
0000f0a0 g     O .rwdata	00000008 alt_alarm_list
0000bf78 g     F .text	0000005c _do_ctors
0000a5f4 g     F .text	000000cc close
0000a988 g     F .text	00000080 alt_load
0000a124 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00004ef8 g     F .text	00000004 __sinit_lock_acquire
000068f8 g     F .text	00000144 __multadd
000068d0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00074 	movhi	r3,1
 130:	18cbd904 	addi	r3,r3,12132
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000074 	movhi	r4,1
 148:	210bd904 	addi	r4,r4,12132
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d69c1b14 	ori	gp,gp,28780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	1082c014 	ori	r2,r2,2816

    movhi r3, %hi(__bss_end)
     1d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d4:	18cc7d14 	ori	r3,r3,12788

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000a9880 	call	a988 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000ab2c0 	call	ab2c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A)        __builtin_custom_ini(ALT_CI_CRC_0_N + (n & 0x7), (A))

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	df000415 	stw	fp,16(sp)
     1fc:	df000404 	addi	fp,sp,16
     200:	e13ffe15 	stw	r4,-8(fp)
     204:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
     208:	e0bffe17 	ldw	r2,-8(fp)
     20c:	e0bffd15 	stw	r2,-12(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
     210:	0005883a 	mov	r2,zero
     214:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
     218:	e03ffc15 	stw	zero,-16(fp)
     21c:	00000906 	br	244 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
     220:	e0bffd17 	ldw	r2,-12(fp)
     224:	10800017 	ldw	r2,0(r2)
     228:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
     22c:	e0bffd17 	ldw	r2,-12(fp)
     230:	10800104 	addi	r2,r2,4
     234:	e0bffd15 	stw	r2,-12(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
     238:	e0bffc17 	ldw	r2,-16(fp)
     23c:	10800104 	addi	r2,r2,4
     240:	e0bffc15 	stw	r2,-16(fp)
     244:	e0ffff17 	ldw	r3,-4(fp)
     248:	00bfff04 	movi	r2,-4
     24c:	1884703a 	and	r2,r3,r2
     250:	e0fffc17 	ldw	r3,-16(fp)
     254:	18bff236 	bltu	r3,r2,220 <crcCI+0x2c>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
     258:	e0bfff17 	ldw	r2,-4(fp)
     25c:	108000cc 	andi	r2,r2,3
     260:	108000d8 	cmpnei	r2,r2,3
     264:	10000c1e 	bne	r2,zero,298 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
     268:	e0bffd17 	ldw	r2,-12(fp)
     26c:	1080000b 	ldhu	r2,0(r2)
     270:	10bfffcc 	andi	r2,r2,65535
     274:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
     278:	e0bffd17 	ldw	r2,-12(fp)
     27c:	10800084 	addi	r2,r2,2
     280:	e0bffd15 	stw	r2,-12(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
     284:	e0bffd17 	ldw	r2,-12(fp)
     288:	10800003 	ldbu	r2,0(r2)
     28c:	10803fcc 	andi	r2,r2,255
     290:	1005c072 	custom	1,r2,r2,zero
     294:	00001106 	br	2dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
     298:	e0bfff17 	ldw	r2,-4(fp)
     29c:	108000cc 	andi	r2,r2,3
     2a0:	10800098 	cmpnei	r2,r2,2
     2a4:	1000051e 	bne	r2,zero,2bc <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	1080000b 	ldhu	r2,0(r2)
     2b0:	10bfffcc 	andi	r2,r2,65535
     2b4:	1005c0b2 	custom	2,r2,r2,zero
     2b8:	00000806 	br	2dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	108000cc 	andi	r2,r2,3
     2c4:	10800058 	cmpnei	r2,r2,1
     2c8:	1000041e 	bne	r2,zero,2dc <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
     2cc:	e0bffd17 	ldw	r2,-12(fp)
     2d0:	10800003 	ldbu	r2,0(r2)
     2d4:	10803fcc 	andi	r2,r2,255
     2d8:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
     2dc:	0005883a 	mov	r2,zero
     2e0:	1005c132 	custom	4,r2,r2,zero
}
     2e4:	e037883a 	mov	sp,fp
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00104 	addi	sp,sp,4
     2f0:	f800283a 	ret

000002f4 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
     2f4:	defffb04 	addi	sp,sp,-20
     2f8:	df000415 	stw	fp,16(sp)
     2fc:	df000404 	addi	fp,sp,16
     300:	e13ffe15 	stw	r4,-8(fp)
     304:	2805883a 	mov	r2,r5
     308:	e0bfff05 	stb	r2,-4(fp)
  unsigned long  reflection = 0x00000000;
     30c:	e03ffc15 	stw	zero,-16(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
     310:	e03ffd05 	stb	zero,-12(fp)
     314:	00001206 	br	360 <reflect+0x6c>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	1080004c 	andi	r2,r2,1
     320:	10000926 	beq	r2,zero,348 <reflect+0x54>
    {
      reflection |= (1 << ((nBits - 1) - bit));
     324:	e0bfff03 	ldbu	r2,-4(fp)
     328:	10ffffc4 	addi	r3,r2,-1
     32c:	e0bffd03 	ldbu	r2,-12(fp)
     330:	1885c83a 	sub	r2,r3,r2
     334:	00c00044 	movi	r3,1
     338:	1884983a 	sll	r2,r3,r2
     33c:	e0fffc17 	ldw	r3,-16(fp)
     340:	1884b03a 	or	r2,r3,r2
     344:	e0bffc15 	stw	r2,-16(fp)
    }

    data = (data >> 1);
     348:	e0bffe17 	ldw	r2,-8(fp)
     34c:	1004d07a 	srli	r2,r2,1
     350:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
     354:	e0bffd03 	ldbu	r2,-12(fp)
     358:	10800044 	addi	r2,r2,1
     35c:	e0bffd05 	stb	r2,-12(fp)
     360:	e0fffd03 	ldbu	r3,-12(fp)
     364:	e0bfff03 	ldbu	r2,-4(fp)
     368:	18bfeb36 	bltu	r3,r2,318 <reflect+0x24>
    }

    data = (data >> 1);
  }

  return (reflection);
     36c:	e0bffc17 	ldw	r2,-16(fp)

} /* reflect() */
     370:	e037883a 	mov	sp,fp
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00104 	addi	sp,sp,4
     37c:	f800283a 	ret

00000380 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
     380:	defff904 	addi	sp,sp,-28
     384:	dfc00615 	stw	ra,24(sp)
     388:	df000515 	stw	fp,20(sp)
     38c:	df000504 	addi	fp,sp,20
     390:	e13ffe15 	stw	r4,-8(fp)
     394:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
     398:	00bfffc4 	movi	r2,-1
     39c:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     3a0:	e03ffc15 	stw	zero,-16(fp)
     3a4:	00002506 	br	43c <crcSlow+0xbc>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
     3a8:	e0bffc17 	ldw	r2,-16(fp)
     3ac:	e0fffe17 	ldw	r3,-8(fp)
     3b0:	1885883a 	add	r2,r3,r2
     3b4:	10800003 	ldbu	r2,0(r2)
     3b8:	10803fcc 	andi	r2,r2,255
     3bc:	1009883a 	mov	r4,r2
     3c0:	01400204 	movi	r5,8
     3c4:	00002f40 	call	2f4 <reflect>
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	1004963a 	slli	r2,r2,24
     3d0:	e0fffb17 	ldw	r3,-20(fp)
     3d4:	1884f03a 	xor	r2,r3,r2
     3d8:	e0bffb15 	stw	r2,-20(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     3dc:	00800204 	movi	r2,8
     3e0:	e0bffd05 	stb	r2,-12(fp)
     3e4:	00001006 	br	428 <crcSlow+0xa8>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
     3e8:	e0bffb17 	ldw	r2,-20(fp)
     3ec:	1000080e 	bge	r2,zero,410 <crcSlow+0x90>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
     3f0:	e0bffb17 	ldw	r2,-20(fp)
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1007883a 	mov	r3,r2
     3fc:	00813074 	movhi	r2,1217
     400:	10876dc4 	addi	r2,r2,7607
     404:	1884f03a 	xor	r2,r3,r2
     408:	e0bffb15 	stw	r2,-20(fp)
     40c:	00000306 	br	41c <crcSlow+0x9c>
            }
            else
            {
                remainder = (remainder << 1);
     410:	e0bffb17 	ldw	r2,-20(fp)
     414:	1085883a 	add	r2,r2,r2
     418:	e0bffb15 	stw	r2,-20(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     41c:	e0bffd03 	ldbu	r2,-12(fp)
     420:	10bfffc4 	addi	r2,r2,-1
     424:	e0bffd05 	stb	r2,-12(fp)
     428:	e0bffd03 	ldbu	r2,-12(fp)
     42c:	103fee1e 	bne	r2,zero,3e8 <crcSlow+0x68>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     430:	e0bffc17 	ldw	r2,-16(fp)
     434:	10800044 	addi	r2,r2,1
     438:	e0bffc15 	stw	r2,-16(fp)
     43c:	e0fffc17 	ldw	r3,-16(fp)
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	18bfd816 	blt	r3,r2,3a8 <crcSlow+0x28>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
     448:	e13ffb17 	ldw	r4,-20(fp)
     44c:	01400804 	movi	r5,32
     450:	00002f40 	call	2f4 <reflect>
     454:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
     458:	e037883a 	mov	sp,fp
     45c:	dfc00117 	ldw	ra,4(sp)
     460:	df000017 	ldw	fp,0(sp)
     464:	dec00204 	addi	sp,sp,8
     468:	f800283a 	ret

0000046c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
     46c:	defffc04 	addi	sp,sp,-16
     470:	df000315 	stw	fp,12(sp)
     474:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     478:	e03ffe15 	stw	zero,-8(fp)
     47c:	00002306 	br	50c <crcInit+0xa0>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
     480:	e0bffe17 	ldw	r2,-8(fp)
     484:	1004963a 	slli	r2,r2,24
     488:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     48c:	00800204 	movi	r2,8
     490:	e0bfff05 	stb	r2,-4(fp)
     494:	00001006 	br	4d8 <crcInit+0x6c>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	1000080e 	bge	r2,zero,4c0 <crcInit+0x54>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
     4a0:	e0bffd17 	ldw	r2,-12(fp)
     4a4:	1085883a 	add	r2,r2,r2
     4a8:	1007883a 	mov	r3,r2
     4ac:	00813074 	movhi	r2,1217
     4b0:	10876dc4 	addi	r2,r2,7607
     4b4:	1884f03a 	xor	r2,r3,r2
     4b8:	e0bffd15 	stw	r2,-12(fp)
     4bc:	00000306 	br	4cc <crcInit+0x60>
            }
            else
            {
                remainder = (remainder << 1);
     4c0:	e0bffd17 	ldw	r2,-12(fp)
     4c4:	1085883a 	add	r2,r2,r2
     4c8:	e0bffd15 	stw	r2,-12(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     4cc:	e0bfff03 	ldbu	r2,-4(fp)
     4d0:	10bfffc4 	addi	r2,r2,-1
     4d4:	e0bfff05 	stb	r2,-4(fp)
     4d8:	e0bfff03 	ldbu	r2,-4(fp)
     4dc:	103fee1e 	bne	r2,zero,498 <crcInit+0x2c>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
     4e0:	00c00074 	movhi	r3,1
     4e4:	18c2d904 	addi	r3,r3,2916
     4e8:	e0bffe17 	ldw	r2,-8(fp)
     4ec:	1085883a 	add	r2,r2,r2
     4f0:	1085883a 	add	r2,r2,r2
     4f4:	1885883a 	add	r2,r3,r2
     4f8:	e0fffd17 	ldw	r3,-12(fp)
     4fc:	10c00015 	stw	r3,0(r2)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10800044 	addi	r2,r2,1
     508:	e0bffe15 	stw	r2,-8(fp)
     50c:	e0bffe17 	ldw	r2,-8(fp)
     510:	10804010 	cmplti	r2,r2,256
     514:	103fda1e 	bne	r2,zero,480 <crcInit+0x14>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
     518:	e037883a 	mov	sp,fp
     51c:	df000017 	ldw	fp,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
     528:	defff904 	addi	sp,sp,-28
     52c:	dfc00615 	stw	ra,24(sp)
     530:	df000515 	stw	fp,20(sp)
     534:	df000504 	addi	fp,sp,20
     538:	e13ffe15 	stw	r4,-8(fp)
     53c:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
     540:	00bfffc4 	movi	r2,-1
     544:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     548:	e03ffc15 	stw	zero,-16(fp)
     54c:	00001b06 	br	5bc <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
     550:	e0bffc17 	ldw	r2,-16(fp)
     554:	e0fffe17 	ldw	r3,-8(fp)
     558:	1885883a 	add	r2,r3,r2
     55c:	10800003 	ldbu	r2,0(r2)
     560:	10803fcc 	andi	r2,r2,255
     564:	1009883a 	mov	r4,r2
     568:	01400204 	movi	r5,8
     56c:	00002f40 	call	2f4 <reflect>
     570:	1007883a 	mov	r3,r2
     574:	e0bffb17 	ldw	r2,-20(fp)
     578:	1004d63a 	srli	r2,r2,24
     57c:	1884f03a 	xor	r2,r3,r2
     580:	e0bffd05 	stb	r2,-12(fp)
      remainder = crcTable[data] ^ (remainder << 8);
     584:	e0bffd03 	ldbu	r2,-12(fp)
     588:	00c00074 	movhi	r3,1
     58c:	18c2d904 	addi	r3,r3,2916
     590:	1085883a 	add	r2,r2,r2
     594:	1085883a 	add	r2,r2,r2
     598:	1885883a 	add	r2,r3,r2
     59c:	10c00017 	ldw	r3,0(r2)
     5a0:	e0bffb17 	ldw	r2,-20(fp)
     5a4:	1004923a 	slli	r2,r2,8
     5a8:	1884f03a 	xor	r2,r3,r2
     5ac:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     5b0:	e0bffc17 	ldw	r2,-16(fp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	e0bffc15 	stw	r2,-16(fp)
     5bc:	e0fffc17 	ldw	r3,-16(fp)
     5c0:	e0bfff17 	ldw	r2,-4(fp)
     5c4:	18bfe216 	blt	r3,r2,550 <crcFast+0x28>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
     5c8:	e13ffb17 	ldw	r4,-20(fp)
     5cc:	01400804 	movi	r5,32
     5d0:	00002f40 	call	2f4 <reflect>
     5d4:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
     5d8:	e037883a 	mov	sp,fp
     5dc:	dfc00117 	ldw	ra,4(sp)
     5e0:	df000017 	ldw	fp,0(sp)
     5e4:	dec00204 	addi	sp,sp,8
     5e8:	f800283a 	ret

000005ec <main>:




int main()
{
     5ec:	deff9404 	addi	sp,sp,-432
     5f0:	dfc06b15 	stw	ra,428(sp)
     5f4:	df006a15 	stw	fp,424(sp)
     5f8:	dc006915 	stw	r16,420(sp)
     5fc:	df006904 	addi	fp,sp,420
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
     600:	00801684 	movi	r2,90
     604:	e0bf9905 	stb	r2,-412(fp)
  alt_u32 sw_slow_timeA, sw_slow_timeB;
  alt_u32 sw_fast_timeA, sw_fast_timeB;
  alt_u32 ci_timeA, ci_timeB;


  printf("+-----------------------------------------------------------+\n");
     608:	01000074 	movhi	r4,1
     60c:	21333e04 	addi	r4,r4,-13064
     610:	0000f4c0 	call	f4c <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
     614:	01000074 	movhi	r4,1
     618:	21334e04 	addi	r4,r4,-13000
     61c:	0000f4c0 	call	f4c <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
     620:	01000074 	movhi	r4,1
     624:	21335e04 	addi	r4,r4,-12936
     628:	0000f4c0 	call	f4c <puts>
  
  printf("System specification\n");
     62c:	01000074 	movhi	r4,1
     630:	21336e04 	addi	r4,r4,-12872
     634:	0000f4c0 	call	f4c <puts>
  printf("--------------------\n");
     638:	01000074 	movhi	r4,1
     63c:	21337404 	addi	r4,r4,-12848
     640:	0000f4c0 	call	f4c <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ /(unsigned long)1000000);
     644:	01000074 	movhi	r4,1
     648:	21337a04 	addi	r4,r4,-12824
     64c:	01400c84 	movi	r5,50
     650:	0000e8c0 	call	e8c <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
     654:	01000074 	movhi	r4,1
     658:	21338204 	addi	r4,r4,-12792
     65c:	01400804 	movi	r5,32
     660:	0000e8c0 	call	e8c <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
     664:	01000074 	movhi	r4,1
     668:	21338b04 	addi	r4,r4,-12756
     66c:	01404004 	movi	r5,256
     670:	0000e8c0 	call	e8c <printf>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
     674:	01000074 	movhi	r4,1
     678:	21339404 	addi	r4,r4,-12720
     67c:	0000f4c0 	call	f4c <puts>
  printf("-------------------------------------------------------\n");
     680:	01000074 	movhi	r4,1
     684:	2133a204 	addi	r4,r4,-12664
     688:	0000f4c0 	call	f4c <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     68c:	e03f9715 	stw	zero,-420(fp)
     690:	00001d06 	br	708 <main+0x11c>
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
     694:	e03f9815 	stw	zero,-416(fp)
     698:	00001506 	br	6f0 <main+0x104>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
     69c:	00c00074 	movhi	r3,1
     6a0:	18c3d904 	addi	r3,r3,3940
     6a4:	e0bf9717 	ldw	r2,-420(fp)
     6a8:	1008923a 	slli	r4,r2,8
     6ac:	e0bf9817 	ldw	r2,-416(fp)
     6b0:	2085883a 	add	r2,r4,r2
     6b4:	1885883a 	add	r2,r3,r2
     6b8:	e0ff9903 	ldbu	r3,-412(fp)
     6bc:	10c00005 	stb	r3,0(r2)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
     6c0:	e0bf9903 	ldbu	r2,-412(fp)
     6c4:	10c03fcc 	andi	r3,r2,255
     6c8:	1806d13a 	srli	r3,r3,4
     6cc:	1004913a 	slli	r2,r2,4
     6d0:	1884b03a 	or	r2,r3,r2
     6d4:	1007883a 	mov	r3,r2
     6d8:	e0bf9817 	ldw	r2,-416(fp)
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	e0bf9905 	stb	r2,-412(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
     6e4:	e0bf9817 	ldw	r2,-416(fp)
     6e8:	10800044 	addi	r2,r2,1
     6ec:	e0bf9815 	stw	r2,-416(fp)
     6f0:	e0bf9817 	ldw	r2,-416(fp)
     6f4:	10804030 	cmpltui	r2,r2,256
     6f8:	103fe81e 	bne	r2,zero,69c <main+0xb0>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     6fc:	e0bf9717 	ldw	r2,-420(fp)
     700:	10800044 	addi	r2,r2,1
     704:	e0bf9715 	stw	r2,-420(fp)
     708:	e0bf9717 	ldw	r2,-420(fp)
     70c:	10800830 	cmpltui	r2,r2,32
     710:	103fe01e 	bne	r2,zero,694 <main+0xa8>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
     714:	01000074 	movhi	r4,1
     718:	2133b004 	addi	r4,r4,-12608
     71c:	0000f4c0 	call	f4c <puts>


  if(alt_timestamp_start() < 0) // starts the timestamp timer
     720:	000bbec0 	call	bbec <alt_timestamp_start>
     724:	1000050e 	bge	r2,zero,73c <main+0x150>
  {
    printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
     728:	01000074 	movhi	r4,1
     72c:	2133b704 	addi	r4,r4,-12580
     730:	0000f4c0 	call	f4c <puts>
    exit(1);
     734:	01000044 	movi	r4,1
     738:	0000e280 	call	e28 <exit>
  }


  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
     73c:	01000074 	movhi	r4,1
     740:	2133d004 	addi	r4,r4,-12480
     744:	0000f4c0 	call	f4c <puts>
  printf("------------------------\n");
     748:	01000074 	movhi	r4,1
     74c:	2133d704 	addi	r4,r4,-12452
     750:	0000f4c0 	call	f4c <puts>
  sw_slow_timeA = alt_timestamp();
     754:	000bc740 	call	bc74 <alt_timestamp>
     758:	e0bf9a15 	stw	r2,-408(fp)

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     75c:	e03f9715 	stw	zero,-420(fp)
     760:	00001306 	br	7b0 <main+0x1c4>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
     764:	e0bf9717 	ldw	r2,-420(fp)
     768:	1006923a 	slli	r3,r2,8
     76c:	00800074 	movhi	r2,1
     770:	1083d904 	addi	r2,r2,3940
     774:	1885883a 	add	r2,r3,r2
     778:	1009883a 	mov	r4,r2
     77c:	01404004 	movi	r5,256
     780:	00003800 	call	380 <crcSlow>
     784:	1007883a 	mov	r3,r2
     788:	e0bf9717 	ldw	r2,-420(fp)
     78c:	1085883a 	add	r2,r2,r2
     790:	1085883a 	add	r2,r2,r2
     794:	e13f9704 	addi	r4,fp,-420
     798:	2085883a 	add	r2,r4,r2
     79c:	10800904 	addi	r2,r2,36
     7a0:	10c00015 	stw	r3,0(r2)
  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
  printf("------------------------\n");
  sw_slow_timeA = alt_timestamp();

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     7a4:	e0bf9717 	ldw	r2,-420(fp)
     7a8:	10800044 	addi	r2,r2,1
     7ac:	e0bf9715 	stw	r2,-420(fp)
     7b0:	e0bf9717 	ldw	r2,-420(fp)
     7b4:	10800830 	cmpltui	r2,r2,32
     7b8:	103fea1e 	bne	r2,zero,764 <main+0x178>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_slow_timeB = alt_timestamp();
     7bc:	000bc740 	call	bc74 <alt_timestamp>
     7c0:	e0bf9b15 	stw	r2,-404(fp)

  printf("Completed\n\n\n");
     7c4:	01000074 	movhi	r4,1
     7c8:	2133de04 	addi	r4,r4,-12424
     7cc:	0000f4c0 	call	f4c <puts>


  /* Fast software CRC based on a lookup table implementation */
  crcInit();
     7d0:	000046c0 	call	46c <crcInit>
  printf("Running the optimized software CRC\n");
     7d4:	01000074 	movhi	r4,1
     7d8:	2133e104 	addi	r4,r4,-12412
     7dc:	0000f4c0 	call	f4c <puts>
  printf("----------------------------------\n");
     7e0:	01000074 	movhi	r4,1
     7e4:	2133ea04 	addi	r4,r4,-12376
     7e8:	0000f4c0 	call	f4c <puts>
  sw_fast_timeA = alt_timestamp();
     7ec:	000bc740 	call	bc74 <alt_timestamp>
     7f0:	e0bf9c15 	stw	r2,-400(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     7f4:	e03f9715 	stw	zero,-420(fp)
     7f8:	00001306 	br	848 <main+0x25c>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
     7fc:	e0bf9717 	ldw	r2,-420(fp)
     800:	1006923a 	slli	r3,r2,8
     804:	00800074 	movhi	r2,1
     808:	1083d904 	addi	r2,r2,3940
     80c:	1885883a 	add	r2,r3,r2
     810:	1009883a 	mov	r4,r2
     814:	01404004 	movi	r5,256
     818:	00005280 	call	528 <crcFast>
     81c:	1007883a 	mov	r3,r2
     820:	e0bf9717 	ldw	r2,-420(fp)
     824:	1085883a 	add	r2,r2,r2
     828:	1085883a 	add	r2,r2,r2
     82c:	e17f9704 	addi	r5,fp,-420
     830:	2885883a 	add	r2,r5,r2
     834:	10802904 	addi	r2,r2,164
     838:	10c00015 	stw	r3,0(r2)
  /* Fast software CRC based on a lookup table implementation */
  crcInit();
  printf("Running the optimized software CRC\n");
  printf("----------------------------------\n");
  sw_fast_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     83c:	e0bf9717 	ldw	r2,-420(fp)
     840:	10800044 	addi	r2,r2,1
     844:	e0bf9715 	stw	r2,-420(fp)
     848:	e0bf9717 	ldw	r2,-420(fp)
     84c:	10800830 	cmpltui	r2,r2,32
     850:	103fea1e 	bne	r2,zero,7fc <main+0x210>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_fast_timeB = alt_timestamp();
     854:	000bc740 	call	bc74 <alt_timestamp>
     858:	e0bf9d15 	stw	r2,-396(fp)
  printf("Completed\n\n\n");
     85c:	01000074 	movhi	r4,1
     860:	2133de04 	addi	r4,r4,-12424
     864:	0000f4c0 	call	f4c <puts>


  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
     868:	01000074 	movhi	r4,1
     86c:	2133f304 	addi	r4,r4,-12340
     870:	0000f4c0 	call	f4c <puts>
  printf("----------------------------------\n");
     874:	01000074 	movhi	r4,1
     878:	2133ea04 	addi	r4,r4,-12376
     87c:	0000f4c0 	call	f4c <puts>
 ci_timeA = alt_timestamp();
     880:	000bc740 	call	bc74 <alt_timestamp>
     884:	e0bf9e15 	stw	r2,-392(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     888:	e03f9715 	stw	zero,-420(fp)
     88c:	00001306 	br	8dc <main+0x2f0>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
     890:	e0bf9717 	ldw	r2,-420(fp)
     894:	1006923a 	slli	r3,r2,8
     898:	00800074 	movhi	r2,1
     89c:	1083d904 	addi	r2,r2,3940
     8a0:	1885883a 	add	r2,r3,r2
     8a4:	1009883a 	mov	r4,r2
     8a8:	01404004 	movi	r5,256
     8ac:	00001f40 	call	1f4 <crcCI>
     8b0:	1007883a 	mov	r3,r2
     8b4:	e0bf9717 	ldw	r2,-420(fp)
     8b8:	1085883a 	add	r2,r2,r2
     8bc:	1085883a 	add	r2,r2,r2
     8c0:	e13f9704 	addi	r4,fp,-420
     8c4:	2085883a 	add	r2,r4,r2
     8c8:	10804904 	addi	r2,r2,292
     8cc:	10c00015 	stw	r3,0(r2)

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
  printf("----------------------------------\n");
 ci_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     8d0:	e0bf9717 	ldw	r2,-420(fp)
     8d4:	10800044 	addi	r2,r2,1
     8d8:	e0bf9715 	stw	r2,-420(fp)
     8dc:	e0bf9717 	ldw	r2,-420(fp)
     8e0:	10800830 	cmpltui	r2,r2,32
     8e4:	103fea1e 	bne	r2,zero,890 <main+0x2a4>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  ci_timeB = alt_timestamp();
     8e8:	000bc740 	call	bc74 <alt_timestamp>
     8ec:	e0bf9f15 	stw	r2,-388(fp)
  printf("Completed\n\n\n");
     8f0:	01000074 	movhi	r4,1
     8f4:	2133de04 	addi	r4,r4,-12424
     8f8:	0000f4c0 	call	f4c <puts>

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
     8fc:	01000074 	movhi	r4,1
     900:	2133fc04 	addi	r4,r4,-12304
     904:	0000f4c0 	call	f4c <puts>
  printf("----------------------------------------------------\n");
     908:	01000074 	movhi	r4,1
     90c:	21340904 	addi	r4,r4,-12252
     910:	0000f4c0 	call	f4c <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     914:	e03f9715 	stw	zero,-420(fp)
     918:	00004106 	br	a20 <main+0x434>
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
     91c:	e0bf9717 	ldw	r2,-420(fp)
     920:	1085883a 	add	r2,r2,r2
     924:	1085883a 	add	r2,r2,r2
     928:	e17f9704 	addi	r5,fp,-420
     92c:	2885883a 	add	r2,r5,r2
     930:	10800904 	addi	r2,r2,36
     934:	10c00017 	ldw	r3,0(r2)
     938:	e0bf9717 	ldw	r2,-420(fp)
     93c:	1085883a 	add	r2,r2,r2
     940:	1085883a 	add	r2,r2,r2
     944:	e13f9704 	addi	r4,fp,-420
     948:	2085883a 	add	r2,r4,r2
     94c:	10804904 	addi	r2,r2,292
     950:	10800017 	ldw	r2,0(r2)
     954:	1884c03a 	cmpne	r2,r3,r2
     958:	1007883a 	mov	r3,r2
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
     95c:	e0bf9717 	ldw	r2,-420(fp)
     960:	1085883a 	add	r2,r2,r2
     964:	1085883a 	add	r2,r2,r2
     968:	e17f9704 	addi	r5,fp,-420
     96c:	2885883a 	add	r2,r5,r2
     970:	10802904 	addi	r2,r2,164
     974:	11000017 	ldw	r4,0(r2)
     978:	e0bf9717 	ldw	r2,-420(fp)
     97c:	1085883a 	add	r2,r2,r2
     980:	1085883a 	add	r2,r2,r2
     984:	e17f9704 	addi	r5,fp,-420
     988:	2885883a 	add	r2,r5,r2
     98c:	10804904 	addi	r2,r2,292
     990:	10800017 	ldw	r2,0(r2)
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
     994:	2084c03a 	cmpne	r2,r4,r2
     998:	1884b03a 	or	r2,r3,r2
     99c:	10803fcc 	andi	r2,r2,255
     9a0:	10001c26 	beq	r2,zero,a14 <main+0x428>
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
     9a4:	e0bf9717 	ldw	r2,-420(fp)
     9a8:	1085883a 	add	r2,r2,r2
     9ac:	1085883a 	add	r2,r2,r2
     9b0:	e0ff9704 	addi	r3,fp,-420
     9b4:	1885883a 	add	r2,r3,r2
     9b8:	10800904 	addi	r2,r2,36
     9bc:	11400017 	ldw	r5,0(r2)
     9c0:	e0bf9717 	ldw	r2,-420(fp)
     9c4:	1085883a 	add	r2,r2,r2
     9c8:	1085883a 	add	r2,r2,r2
     9cc:	e13f9704 	addi	r4,fp,-420
     9d0:	2085883a 	add	r2,r4,r2
     9d4:	10802904 	addi	r2,r2,164
     9d8:	10c00017 	ldw	r3,0(r2)
     9dc:	e0bf9717 	ldw	r2,-420(fp)
     9e0:	1085883a 	add	r2,r2,r2
     9e4:	1085883a 	add	r2,r2,r2
     9e8:	e13f9704 	addi	r4,fp,-420
     9ec:	2085883a 	add	r2,r4,r2
     9f0:	10804904 	addi	r2,r2,292
     9f4:	10800017 	ldw	r2,0(r2)
     9f8:	01000074 	movhi	r4,1
     9fc:	21341704 	addi	r4,r4,-12196
     a00:	180d883a 	mov	r6,r3
     a04:	100f883a 	mov	r7,r2
     a08:	0000e8c0 	call	e8c <printf>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
     a0c:	01000044 	movi	r4,1
     a10:	0000e280 	call	e28 <exit>
  printf("Completed\n\n\n");

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     a14:	e0bf9717 	ldw	r2,-420(fp)
     a18:	10800044 	addi	r2,r2,1
     a1c:	e0bf9715 	stw	r2,-420(fp)
     a20:	e0bf9717 	ldw	r2,-420(fp)
     a24:	10800830 	cmpltui	r2,r2,32
     a28:	103fbc1e 	bne	r2,zero,91c <main+0x330>
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
     a2c:	01000074 	movhi	r4,1
     a30:	21343004 	addi	r4,r4,-12096
     a34:	0000f4c0 	call	f4c <puts>


  // Report processing times
  printf("Processing time for each implementation\n");
     a38:	01000074 	movhi	r4,1
     a3c:	21343d04 	addi	r4,r4,-12044
     a40:	0000f4c0 	call	f4c <puts>
  printf("---------------------------------------\n");
     a44:	01000074 	movhi	r4,1
     a48:	21344704 	addi	r4,r4,-12004
     a4c:	0000f4c0 	call	f4c <puts>
  printf("Software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)alt_timestamp_freq()));
     a50:	e0ff9b17 	ldw	r3,-404(fp)
     a54:	e0bf9a17 	ldw	r2,-408(fp)
     a58:	1885c83a 	sub	r2,r3,r2
     a5c:	1009883a 	mov	r4,r2
     a60:	0140fa04 	movi	r5,1000
     a64:	0000e000 	call	e00 <__mulsi3>
     a68:	1021883a 	mov	r16,r2
     a6c:	000bd040 	call	bd04 <alt_timestamp_freq>
     a70:	8009883a 	mov	r4,r16
     a74:	100b883a 	mov	r5,r2
     a78:	0000df00 	call	df0 <__udivsi3>
     a7c:	01000074 	movhi	r4,1
     a80:	21345104 	addi	r4,r4,-11964
     a84:	100b883a 	mov	r5,r2
     a88:	0000e8c0 	call	e8c <printf>
  printf("Optimized software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
     a8c:	e0ff9d17 	ldw	r3,-396(fp)
     a90:	e0bf9c17 	ldw	r2,-400(fp)
     a94:	1885c83a 	sub	r2,r3,r2
     a98:	1009883a 	mov	r4,r2
     a9c:	0140fa04 	movi	r5,1000
     aa0:	0000e000 	call	e00 <__mulsi3>
     aa4:	1021883a 	mov	r16,r2
     aa8:	000bd040 	call	bd04 <alt_timestamp_freq>
     aac:	8009883a 	mov	r4,r16
     ab0:	100b883a 	mov	r5,r2
     ab4:	0000df00 	call	df0 <__udivsi3>
     ab8:	01000074 	movhi	r4,1
     abc:	21345804 	addi	r4,r4,-11936
     ac0:	100b883a 	mov	r5,r2
     ac4:	0000e8c0 	call	e8c <printf>
  printf("Custom instruction CRC = %.2lu ms\n\n\n", 1000*((unsigned long)(ci_timeB-ci_timeA))/((unsigned long)alt_timestamp_freq()));
     ac8:	e0ff9f17 	ldw	r3,-388(fp)
     acc:	e0bf9e17 	ldw	r2,-392(fp)
     ad0:	1885c83a 	sub	r2,r3,r2
     ad4:	1009883a 	mov	r4,r2
     ad8:	0140fa04 	movi	r5,1000
     adc:	0000e000 	call	e00 <__mulsi3>
     ae0:	1021883a 	mov	r16,r2
     ae4:	000bd040 	call	bd04 <alt_timestamp_freq>
     ae8:	8009883a 	mov	r4,r16
     aec:	100b883a 	mov	r5,r2
     af0:	0000df00 	call	df0 <__udivsi3>
     af4:	01000074 	movhi	r4,1
     af8:	21346104 	addi	r4,r4,-11900
     afc:	100b883a 	mov	r5,r2
     b00:	0000e8c0 	call	e8c <printf>

  printf("Processing throughput for each implementation\n"); // throughput = total bits / (time(s) * 1000000)
     b04:	01000074 	movhi	r4,1
     b08:	21346b04 	addi	r4,r4,-11860
     b0c:	0000f4c0 	call	f4c <puts>
  printf("---------------------------------------------\n");
     b10:	01000074 	movhi	r4,1
     b14:	21347704 	addi	r4,r4,-11812
     b18:	0000f4c0 	call	f4c <puts>
  printf("Software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_slow_timeB-sw_slow_timeA)/((unsigned long)alt_timestamp_freq())));
     b1c:	e0ff9b17 	ldw	r3,-404(fp)
     b20:	e0bf9a17 	ldw	r2,-408(fp)
     b24:	1885c83a 	sub	r2,r3,r2
     b28:	1009883a 	mov	r4,r2
     b2c:	014003f4 	movhi	r5,15
     b30:	29509004 	addi	r5,r5,16960
     b34:	0000e000 	call	e00 <__mulsi3>
     b38:	1021883a 	mov	r16,r2
     b3c:	000bd040 	call	bd04 <alt_timestamp_freq>
     b40:	8009883a 	mov	r4,r16
     b44:	100b883a 	mov	r5,r2
     b48:	0000df00 	call	df0 <__udivsi3>
     b4c:	01000074 	movhi	r4,1
     b50:	100b883a 	mov	r5,r2
     b54:	0000df00 	call	df0 <__udivsi3>
     b58:	01000074 	movhi	r4,1
     b5c:	21348304 	addi	r4,r4,-11764
     b60:	100b883a 	mov	r5,r2
     b64:	0000e8c0 	call	e8c <printf>
  printf("Optimized software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_fast_timeB-sw_fast_timeA)/((unsigned long)alt_timestamp_freq())));
     b68:	e0ff9d17 	ldw	r3,-396(fp)
     b6c:	e0bf9c17 	ldw	r2,-400(fp)
     b70:	1885c83a 	sub	r2,r3,r2
     b74:	1009883a 	mov	r4,r2
     b78:	014003f4 	movhi	r5,15
     b7c:	29509004 	addi	r5,r5,16960
     b80:	0000e000 	call	e00 <__mulsi3>
     b84:	1021883a 	mov	r16,r2
     b88:	000bd040 	call	bd04 <alt_timestamp_freq>
     b8c:	8009883a 	mov	r4,r16
     b90:	100b883a 	mov	r5,r2
     b94:	0000df00 	call	df0 <__udivsi3>
     b98:	01000074 	movhi	r4,1
     b9c:	100b883a 	mov	r5,r2
     ba0:	0000df00 	call	df0 <__udivsi3>
     ba4:	01000074 	movhi	r4,1
     ba8:	21348a04 	addi	r4,r4,-11736
     bac:	100b883a 	mov	r5,r2
     bb0:	0000e8c0 	call	e8c <printf>
  printf("Custom instruction CRC = %.2lu Mbps\n\n\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(ci_timeB-ci_timeA)/((unsigned long)alt_timestamp_freq())));
     bb4:	e0ff9f17 	ldw	r3,-388(fp)
     bb8:	e0bf9e17 	ldw	r2,-392(fp)
     bbc:	1885c83a 	sub	r2,r3,r2
     bc0:	1009883a 	mov	r4,r2
     bc4:	014003f4 	movhi	r5,15
     bc8:	29509004 	addi	r5,r5,16960
     bcc:	0000e000 	call	e00 <__mulsi3>
     bd0:	1021883a 	mov	r16,r2
     bd4:	000bd040 	call	bd04 <alt_timestamp_freq>
     bd8:	8009883a 	mov	r4,r16
     bdc:	100b883a 	mov	r5,r2
     be0:	0000df00 	call	df0 <__udivsi3>
     be4:	01000074 	movhi	r4,1
     be8:	100b883a 	mov	r5,r2
     bec:	0000df00 	call	df0 <__udivsi3>
     bf0:	01000074 	movhi	r4,1
     bf4:	21349404 	addi	r4,r4,-11696
     bf8:	100b883a 	mov	r5,r2
     bfc:	0000e8c0 	call	e8c <printf>

  printf("Speedup ratio\n");
     c00:	01000074 	movhi	r4,1
     c04:	21349e04 	addi	r4,r4,-11656
     c08:	0000f4c0 	call	f4c <puts>
  printf("-------------\n");
     c0c:	01000074 	movhi	r4,1
     c10:	2134a204 	addi	r4,r4,-11640
     c14:	0000f4c0 	call	f4c <puts>
  printf("Custom instruction CRC vs software CRC = %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
     c18:	e0ff9b17 	ldw	r3,-404(fp)
     c1c:	e0bf9a17 	ldw	r2,-408(fp)
     c20:	1887c83a 	sub	r3,r3,r2
     c24:	e13f9f17 	ldw	r4,-388(fp)
     c28:	e0bf9e17 	ldw	r2,-392(fp)
     c2c:	2085c83a 	sub	r2,r4,r2
     c30:	1809883a 	mov	r4,r3
     c34:	100b883a 	mov	r5,r2
     c38:	0000df00 	call	df0 <__udivsi3>
     c3c:	01000074 	movhi	r4,1
     c40:	2134a604 	addi	r4,r4,-11624
     c44:	100b883a 	mov	r5,r2
     c48:	0000e8c0 	call	e8c <printf>
  printf("Custom instruction CRC vs optimized software CRC = %lu\n", ((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
     c4c:	e0ff9d17 	ldw	r3,-396(fp)
     c50:	e0bf9c17 	ldw	r2,-400(fp)
     c54:	1887c83a 	sub	r3,r3,r2
     c58:	e13f9f17 	ldw	r4,-388(fp)
     c5c:	e0bf9e17 	ldw	r2,-392(fp)
     c60:	2085c83a 	sub	r2,r4,r2
     c64:	1809883a 	mov	r4,r3
     c68:	100b883a 	mov	r5,r2
     c6c:	0000df00 	call	df0 <__udivsi3>
     c70:	01000074 	movhi	r4,1
     c74:	2134b204 	addi	r4,r4,-11576
     c78:	100b883a 	mov	r5,r2
     c7c:	0000e8c0 	call	e8c <printf>
  printf("Optimized software CRC vs software CRC= %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(sw_fast_timeB-sw_fast_timeA)));
     c80:	e0ff9b17 	ldw	r3,-404(fp)
     c84:	e0bf9a17 	ldw	r2,-408(fp)
     c88:	1887c83a 	sub	r3,r3,r2
     c8c:	e13f9d17 	ldw	r4,-396(fp)
     c90:	e0bf9c17 	ldw	r2,-400(fp)
     c94:	2085c83a 	sub	r2,r4,r2
     c98:	1809883a 	mov	r4,r3
     c9c:	100b883a 	mov	r5,r2
     ca0:	0000df00 	call	df0 <__udivsi3>
     ca4:	01000074 	movhi	r4,1
     ca8:	2134c004 	addi	r4,r4,-11520
     cac:	100b883a 	mov	r5,r2
     cb0:	0000e8c0 	call	e8c <printf>
  return 0;
     cb4:	0005883a 	mov	r2,zero
}
     cb8:	e037883a 	mov	sp,fp
     cbc:	dfc00217 	ldw	ra,8(sp)
     cc0:	df000117 	ldw	fp,4(sp)
     cc4:	dc000017 	ldw	r16,0(sp)
     cc8:	dec00304 	addi	sp,sp,12
     ccc:	f800283a 	ret

00000cd0 <udivmodsi4>:
     cd0:	2005883a 	mov	r2,r4
     cd4:	2900182e 	bgeu	r5,r4,d38 <udivmodsi4+0x68>
     cd8:	28001716 	blt	r5,zero,d38 <udivmodsi4+0x68>
     cdc:	01000804 	movi	r4,32
     ce0:	00c00044 	movi	r3,1
     ce4:	00000206 	br	cf0 <udivmodsi4+0x20>
     ce8:	20001126 	beq	r4,zero,d30 <udivmodsi4+0x60>
     cec:	28000516 	blt	r5,zero,d04 <udivmodsi4+0x34>
     cf0:	294b883a 	add	r5,r5,r5
     cf4:	213fffc4 	addi	r4,r4,-1
     cf8:	18c7883a 	add	r3,r3,r3
     cfc:	28bffa36 	bltu	r5,r2,ce8 <udivmodsi4+0x18>
     d00:	18000b26 	beq	r3,zero,d30 <udivmodsi4+0x60>
     d04:	0009883a 	mov	r4,zero
     d08:	11400236 	bltu	r2,r5,d14 <udivmodsi4+0x44>
     d0c:	1145c83a 	sub	r2,r2,r5
     d10:	20c8b03a 	or	r4,r4,r3
     d14:	1806d07a 	srli	r3,r3,1
     d18:	280ad07a 	srli	r5,r5,1
     d1c:	183ffa1e 	bne	r3,zero,d08 <udivmodsi4+0x38>
     d20:	3000021e 	bne	r6,zero,d2c <udivmodsi4+0x5c>
     d24:	2005883a 	mov	r2,r4
     d28:	f800283a 	ret
     d2c:	f800283a 	ret
     d30:	0009883a 	mov	r4,zero
     d34:	003ffa06 	br	d20 <udivmodsi4+0x50>
     d38:	00c00044 	movi	r3,1
     d3c:	0009883a 	mov	r4,zero
     d40:	003ff106 	br	d08 <udivmodsi4+0x38>

00000d44 <__divsi3>:
     d44:	defffe04 	addi	sp,sp,-8
     d48:	dfc00115 	stw	ra,4(sp)
     d4c:	dc000015 	stw	r16,0(sp)
     d50:	20000a16 	blt	r4,zero,d7c <__divsi3+0x38>
     d54:	0021883a 	mov	r16,zero
     d58:	28000b16 	blt	r5,zero,d88 <__divsi3+0x44>
     d5c:	000d883a 	mov	r6,zero
     d60:	0000cd00 	call	cd0 <udivmodsi4>
     d64:	80000126 	beq	r16,zero,d6c <__divsi3+0x28>
     d68:	0085c83a 	sub	r2,zero,r2
     d6c:	dfc00117 	ldw	ra,4(sp)
     d70:	dc000017 	ldw	r16,0(sp)
     d74:	dec00204 	addi	sp,sp,8
     d78:	f800283a 	ret
     d7c:	0109c83a 	sub	r4,zero,r4
     d80:	04000044 	movi	r16,1
     d84:	283ff50e 	bge	r5,zero,d5c <__divsi3+0x18>
     d88:	014bc83a 	sub	r5,zero,r5
     d8c:	8400005c 	xori	r16,r16,1
     d90:	003ff206 	br	d5c <__divsi3+0x18>

00000d94 <__modsi3>:
     d94:	deffff04 	addi	sp,sp,-4
     d98:	dfc00015 	stw	ra,0(sp)
     d9c:	20000516 	blt	r4,zero,db4 <__modsi3+0x20>
     da0:	28000c16 	blt	r5,zero,dd4 <__modsi3+0x40>
     da4:	01800044 	movi	r6,1
     da8:	dfc00017 	ldw	ra,0(sp)
     dac:	dec00104 	addi	sp,sp,4
     db0:	0000cd01 	jmpi	cd0 <udivmodsi4>
     db4:	0109c83a 	sub	r4,zero,r4
     db8:	28000b16 	blt	r5,zero,de8 <__modsi3+0x54>
     dbc:	01800044 	movi	r6,1
     dc0:	0000cd00 	call	cd0 <udivmodsi4>
     dc4:	0085c83a 	sub	r2,zero,r2
     dc8:	dfc00017 	ldw	ra,0(sp)
     dcc:	dec00104 	addi	sp,sp,4
     dd0:	f800283a 	ret
     dd4:	014bc83a 	sub	r5,zero,r5
     dd8:	01800044 	movi	r6,1
     ddc:	dfc00017 	ldw	ra,0(sp)
     de0:	dec00104 	addi	sp,sp,4
     de4:	0000cd01 	jmpi	cd0 <udivmodsi4>
     de8:	014bc83a 	sub	r5,zero,r5
     dec:	003ff306 	br	dbc <__modsi3+0x28>

00000df0 <__udivsi3>:
     df0:	000d883a 	mov	r6,zero
     df4:	0000cd01 	jmpi	cd0 <udivmodsi4>

00000df8 <__umodsi3>:
     df8:	01800044 	movi	r6,1
     dfc:	0000cd01 	jmpi	cd0 <udivmodsi4>

00000e00 <__mulsi3>:
     e00:	0005883a 	mov	r2,zero
     e04:	20000726 	beq	r4,zero,e24 <__mulsi3+0x24>
     e08:	20c0004c 	andi	r3,r4,1
     e0c:	2008d07a 	srli	r4,r4,1
     e10:	18000126 	beq	r3,zero,e18 <__mulsi3+0x18>
     e14:	1145883a 	add	r2,r2,r5
     e18:	294b883a 	add	r5,r5,r5
     e1c:	203ffa1e 	bne	r4,zero,e08 <__mulsi3+0x8>
     e20:	f800283a 	ret
     e24:	f800283a 	ret

00000e28 <exit>:
     e28:	defffe04 	addi	sp,sp,-8
     e2c:	000b883a 	mov	r5,zero
     e30:	dc000015 	stw	r16,0(sp)
     e34:	dfc00115 	stw	ra,4(sp)
     e38:	2021883a 	mov	r16,r4
     e3c:	00030340 	call	3034 <__call_exitprocs>
     e40:	00800074 	movhi	r2,1
     e44:	10bc1b04 	addi	r2,r2,-3988
     e48:	11000017 	ldw	r4,0(r2)
     e4c:	20800f17 	ldw	r2,60(r4)
     e50:	10000126 	beq	r2,zero,e58 <exit+0x30>
     e54:	103ee83a 	callr	r2
     e58:	8009883a 	mov	r4,r16
     e5c:	000a6ec0 	call	a6ec <_exit>

00000e60 <_printf_r>:
     e60:	defffd04 	addi	sp,sp,-12
     e64:	dfc00015 	stw	ra,0(sp)
     e68:	d9800115 	stw	r6,4(sp)
     e6c:	d9c00215 	stw	r7,8(sp)
     e70:	280d883a 	mov	r6,r5
     e74:	21400217 	ldw	r5,8(r4)
     e78:	d9c00104 	addi	r7,sp,4
     e7c:	00010200 	call	1020 <___vfprintf_internal_r>
     e80:	dfc00017 	ldw	ra,0(sp)
     e84:	dec00304 	addi	sp,sp,12
     e88:	f800283a 	ret

00000e8c <printf>:
     e8c:	defffc04 	addi	sp,sp,-16
     e90:	dfc00015 	stw	ra,0(sp)
     e94:	d9400115 	stw	r5,4(sp)
     e98:	d9800215 	stw	r6,8(sp)
     e9c:	d9c00315 	stw	r7,12(sp)
     ea0:	00800074 	movhi	r2,1
     ea4:	10bc1c04 	addi	r2,r2,-3984
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	200b883a 	mov	r5,r4
     eb0:	d9800104 	addi	r6,sp,4
     eb4:	11000217 	ldw	r4,8(r2)
     eb8:	0002e9c0 	call	2e9c <__vfprintf_internal>
     ebc:	dfc00017 	ldw	ra,0(sp)
     ec0:	dec00404 	addi	sp,sp,16
     ec4:	f800283a 	ret

00000ec8 <_puts_r>:
     ec8:	defff604 	addi	sp,sp,-40
     ecc:	dc400815 	stw	r17,32(sp)
     ed0:	2023883a 	mov	r17,r4
     ed4:	2809883a 	mov	r4,r5
     ed8:	dc000715 	stw	r16,28(sp)
     edc:	dfc00915 	stw	ra,36(sp)
     ee0:	2821883a 	mov	r16,r5
     ee4:	0000f600 	call	f60 <strlen>
     ee8:	10c00044 	addi	r3,r2,1
     eec:	d8800115 	stw	r2,4(sp)
     ef0:	89400217 	ldw	r5,8(r17)
     ef4:	00800074 	movhi	r2,1
     ef8:	10b4cd04 	addi	r2,r2,-11468
     efc:	d8800215 	stw	r2,8(sp)
     f00:	00800044 	movi	r2,1
     f04:	d8800315 	stw	r2,12(sp)
     f08:	8809883a 	mov	r4,r17
     f0c:	00800084 	movi	r2,2
     f10:	d9800404 	addi	r6,sp,16
     f14:	dc000015 	stw	r16,0(sp)
     f18:	d8c00615 	stw	r3,24(sp)
     f1c:	dec00415 	stw	sp,16(sp)
     f20:	d8800515 	stw	r2,20(sp)
     f24:	000533c0 	call	533c <__sfvwrite_r>
     f28:	1000061e 	bne	r2,zero,f44 <_puts_r+0x7c>
     f2c:	00800284 	movi	r2,10
     f30:	dfc00917 	ldw	ra,36(sp)
     f34:	dc400817 	ldw	r17,32(sp)
     f38:	dc000717 	ldw	r16,28(sp)
     f3c:	dec00a04 	addi	sp,sp,40
     f40:	f800283a 	ret
     f44:	00bfffc4 	movi	r2,-1
     f48:	003ff906 	br	f30 <_puts_r+0x68>

00000f4c <puts>:
     f4c:	00800074 	movhi	r2,1
     f50:	10bc1c04 	addi	r2,r2,-3984
     f54:	200b883a 	mov	r5,r4
     f58:	11000017 	ldw	r4,0(r2)
     f5c:	0000ec81 	jmpi	ec8 <_puts_r>

00000f60 <strlen>:
     f60:	208000cc 	andi	r2,r4,3
     f64:	10001f1e 	bne	r2,zero,fe4 <strlen+0x84>
     f68:	20800017 	ldw	r2,0(r4)
     f6c:	01ffbff4 	movhi	r7,65279
     f70:	39ffbfc4 	addi	r7,r7,-257
     f74:	01a02074 	movhi	r6,32897
     f78:	31a02004 	addi	r6,r6,-32640
     f7c:	11c7883a 	add	r3,r2,r7
     f80:	0084303a 	nor	r2,zero,r2
     f84:	1886703a 	and	r3,r3,r2
     f88:	1986703a 	and	r3,r3,r6
     f8c:	2005883a 	mov	r2,r4
     f90:	1800101e 	bne	r3,zero,fd4 <strlen+0x74>
     f94:	10800104 	addi	r2,r2,4
     f98:	10c00017 	ldw	r3,0(r2)
     f9c:	19cb883a 	add	r5,r3,r7
     fa0:	00c6303a 	nor	r3,zero,r3
     fa4:	28c6703a 	and	r3,r5,r3
     fa8:	1986703a 	and	r3,r3,r6
     fac:	1800091e 	bne	r3,zero,fd4 <strlen+0x74>
     fb0:	10800104 	addi	r2,r2,4
     fb4:	10c00017 	ldw	r3,0(r2)
     fb8:	19cb883a 	add	r5,r3,r7
     fbc:	00c6303a 	nor	r3,zero,r3
     fc0:	28c6703a 	and	r3,r5,r3
     fc4:	1986703a 	and	r3,r3,r6
     fc8:	183ff226 	beq	r3,zero,f94 <strlen+0x34>
     fcc:	00000106 	br	fd4 <strlen+0x74>
     fd0:	10800044 	addi	r2,r2,1
     fd4:	10c00007 	ldb	r3,0(r2)
     fd8:	183ffd1e 	bne	r3,zero,fd0 <strlen+0x70>
     fdc:	1105c83a 	sub	r2,r2,r4
     fe0:	f800283a 	ret
     fe4:	2005883a 	mov	r2,r4
     fe8:	003ffa06 	br	fd4 <strlen+0x74>

00000fec <__sprint_r>:
     fec:	30800217 	ldw	r2,8(r6)
     ff0:	defffe04 	addi	sp,sp,-8
     ff4:	dc000015 	stw	r16,0(sp)
     ff8:	dfc00115 	stw	ra,4(sp)
     ffc:	3021883a 	mov	r16,r6
    1000:	10000226 	beq	r2,zero,100c <__sprint_r+0x20>
    1004:	000533c0 	call	533c <__sfvwrite_r>
    1008:	80000215 	stw	zero,8(r16)
    100c:	80000115 	stw	zero,4(r16)
    1010:	dfc00117 	ldw	ra,4(sp)
    1014:	dc000017 	ldw	r16,0(sp)
    1018:	dec00204 	addi	sp,sp,8
    101c:	f800283a 	ret

00001020 <___vfprintf_internal_r>:
    1020:	defeb904 	addi	sp,sp,-1308
    1024:	dc013d15 	stw	r16,1268(sp)
    1028:	d9013015 	stw	r4,1216(sp)
    102c:	dfc14615 	stw	ra,1304(sp)
    1030:	df014515 	stw	fp,1300(sp)
    1034:	ddc14415 	stw	r23,1296(sp)
    1038:	dd814315 	stw	r22,1292(sp)
    103c:	dd414215 	stw	r21,1288(sp)
    1040:	dd014115 	stw	r20,1284(sp)
    1044:	dcc14015 	stw	r19,1280(sp)
    1048:	dc813f15 	stw	r18,1276(sp)
    104c:	dc413e15 	stw	r17,1272(sp)
    1050:	d9412915 	stw	r5,1188(sp)
    1054:	3021883a 	mov	r16,r6
    1058:	d9c12d15 	stw	r7,1204(sp)
    105c:	0005a280 	call	5a28 <_localeconv_r>
    1060:	10800017 	ldw	r2,0(r2)
    1064:	d9013017 	ldw	r4,1216(sp)
    1068:	d8013315 	stw	zero,1228(sp)
    106c:	d8813715 	stw	r2,1244(sp)
    1070:	d8013415 	stw	zero,1232(sp)
    1074:	20000226 	beq	r4,zero,1080 <___vfprintf_internal_r+0x60>
    1078:	20800e17 	ldw	r2,56(r4)
    107c:	10014b26 	beq	r2,zero,15ac <___vfprintf_internal_r+0x58c>
    1080:	d8c12917 	ldw	r3,1188(sp)
    1084:	1880030b 	ldhu	r2,12(r3)
    1088:	10c0020c 	andi	r3,r2,8
    108c:	18ffffcc 	andi	r3,r3,65535
    1090:	18e0001c 	xori	r3,r3,32768
    1094:	18e00004 	addi	r3,r3,-32768
    1098:	1800ed26 	beq	r3,zero,1450 <___vfprintf_internal_r+0x430>
    109c:	d9012917 	ldw	r4,1188(sp)
    10a0:	20c00417 	ldw	r3,16(r4)
    10a4:	1800ea26 	beq	r3,zero,1450 <___vfprintf_internal_r+0x430>
    10a8:	1100068c 	andi	r4,r2,26
    10ac:	00c00284 	movi	r3,10
    10b0:	20c0f026 	beq	r4,r3,1474 <___vfprintf_internal_r+0x454>
    10b4:	d9010dc4 	addi	r4,sp,1079
    10b8:	d8810e04 	addi	r2,sp,1080
    10bc:	dc413017 	ldw	r17,1216(sp)
    10c0:	d8c00404 	addi	r3,sp,16
    10c4:	d9012615 	stw	r4,1176(sp)
    10c8:	1109c83a 	sub	r4,r2,r4
    10cc:	d8812715 	stw	r2,1180(sp)
    10d0:	d8c11b15 	stw	r3,1132(sp)
    10d4:	d8011d15 	stw	zero,1140(sp)
    10d8:	d8011c15 	stw	zero,1136(sp)
    10dc:	802b883a 	mov	r21,r16
    10e0:	d8013215 	stw	zero,1224(sp)
    10e4:	d8013615 	stw	zero,1240(sp)
    10e8:	d8013515 	stw	zero,1236(sp)
    10ec:	d8012c15 	stw	zero,1200(sp)
    10f0:	1813883a 	mov	r9,r3
    10f4:	d9013915 	stw	r4,1252(sp)
    10f8:	a8800007 	ldb	r2,0(r21)
    10fc:	1002f326 	beq	r2,zero,1ccc <___vfprintf_internal_r+0xcac>
    1100:	00c00944 	movi	r3,37
    1104:	a825883a 	mov	r18,r21
    1108:	10c0021e 	bne	r2,r3,1114 <___vfprintf_internal_r+0xf4>
    110c:	00001406 	br	1160 <___vfprintf_internal_r+0x140>
    1110:	10c00326 	beq	r2,r3,1120 <___vfprintf_internal_r+0x100>
    1114:	94800044 	addi	r18,r18,1
    1118:	90800007 	ldb	r2,0(r18)
    111c:	103ffc1e 	bne	r2,zero,1110 <___vfprintf_internal_r+0xf0>
    1120:	9561c83a 	sub	r16,r18,r21
    1124:	80000e26 	beq	r16,zero,1160 <___vfprintf_internal_r+0x140>
    1128:	da011d17 	ldw	r8,1140(sp)
    112c:	d8c11c17 	ldw	r3,1136(sp)
    1130:	4d400015 	stw	r21,0(r9)
    1134:	4c000115 	stw	r16,4(r9)
    1138:	4411883a 	add	r8,r8,r16
    113c:	18c00044 	addi	r3,r3,1
    1140:	da011d15 	stw	r8,1140(sp)
    1144:	d8c11c15 	stw	r3,1136(sp)
    1148:	008001c4 	movi	r2,7
    114c:	10c11016 	blt	r2,r3,1590 <___vfprintf_internal_r+0x570>
    1150:	4a400204 	addi	r9,r9,8
    1154:	d8812c17 	ldw	r2,1200(sp)
    1158:	1405883a 	add	r2,r2,r16
    115c:	d8812c15 	stw	r2,1200(sp)
    1160:	90800007 	ldb	r2,0(r18)
    1164:	1000ee26 	beq	r2,zero,1520 <___vfprintf_internal_r+0x500>
    1168:	95400044 	addi	r21,r18,1
    116c:	94800047 	ldb	r18,1(r18)
    1170:	073fffc4 	movi	fp,-1
    1174:	e007883a 	mov	r3,fp
    1178:	d8012585 	stb	zero,1174(sp)
    117c:	d8012e15 	stw	zero,1208(sp)
    1180:	0021883a 	mov	r16,zero
    1184:	05001604 	movi	r20,88
    1188:	04c00244 	movi	r19,9
    118c:	4839883a 	mov	fp,r9
    1190:	ad400044 	addi	r21,r21,1
    1194:	90bff804 	addi	r2,r18,-32
    1198:	a080462e 	bgeu	r20,r2,12b4 <___vfprintf_internal_r+0x294>
    119c:	e013883a 	mov	r9,fp
    11a0:	9000df26 	beq	r18,zero,1520 <___vfprintf_internal_r+0x500>
    11a4:	00c00044 	movi	r3,1
    11a8:	d8c12815 	stw	r3,1184(sp)
    11ac:	dc810405 	stb	r18,1040(sp)
    11b0:	d8012585 	stb	zero,1174(sp)
    11b4:	d8c12b15 	stw	r3,1196(sp)
    11b8:	dcc10404 	addi	r19,sp,1040
    11bc:	d8013115 	stw	zero,1220(sp)
    11c0:	80c0008c 	andi	r3,r16,2
    11c4:	d8c12a15 	stw	r3,1192(sp)
    11c8:	18000326 	beq	r3,zero,11d8 <___vfprintf_internal_r+0x1b8>
    11cc:	d8c12817 	ldw	r3,1184(sp)
    11d0:	18c00084 	addi	r3,r3,2
    11d4:	d8c12815 	stw	r3,1184(sp)
    11d8:	80c0210c 	andi	r3,r16,132
    11dc:	d8c12f15 	stw	r3,1212(sp)
    11e0:	1802251e 	bne	r3,zero,1a78 <___vfprintf_internal_r+0xa58>
    11e4:	d9012e17 	ldw	r4,1208(sp)
    11e8:	d8c12817 	ldw	r3,1184(sp)
    11ec:	20edc83a 	sub	r22,r4,r3
    11f0:	0582210e 	bge	zero,r22,1a78 <___vfprintf_internal_r+0xa58>
    11f4:	02800404 	movi	r10,16
    11f8:	da011d17 	ldw	r8,1140(sp)
    11fc:	d8c11c17 	ldw	r3,1136(sp)
    1200:	05c00074 	movhi	r23,1
    1204:	bdf4de84 	addi	r23,r23,-11398
    1208:	5580200e 	bge	r10,r22,128c <___vfprintf_internal_r+0x26c>
    120c:	dc813815 	stw	r18,1248(sp)
    1210:	5039883a 	mov	fp,r10
    1214:	b825883a 	mov	r18,r23
    1218:	050001c4 	movi	r20,7
    121c:	b02f883a 	mov	r23,r22
    1220:	802d883a 	mov	r22,r16
    1224:	dc012917 	ldw	r16,1188(sp)
    1228:	00000306 	br	1238 <___vfprintf_internal_r+0x218>
    122c:	bdfffc04 	addi	r23,r23,-16
    1230:	4a400204 	addi	r9,r9,8
    1234:	e5c0110e 	bge	fp,r23,127c <___vfprintf_internal_r+0x25c>
    1238:	4c800015 	stw	r18,0(r9)
    123c:	4f000115 	stw	fp,4(r9)
    1240:	42000404 	addi	r8,r8,16
    1244:	18c00044 	addi	r3,r3,1
    1248:	da011d15 	stw	r8,1140(sp)
    124c:	d8c11c15 	stw	r3,1136(sp)
    1250:	a0fff60e 	bge	r20,r3,122c <___vfprintf_internal_r+0x20c>
    1254:	8809883a 	mov	r4,r17
    1258:	800b883a 	mov	r5,r16
    125c:	d9811b04 	addi	r6,sp,1132
    1260:	0000fec0 	call	fec <__sprint_r>
    1264:	1000b41e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1268:	bdfffc04 	addi	r23,r23,-16
    126c:	da011d17 	ldw	r8,1140(sp)
    1270:	d8c11c17 	ldw	r3,1136(sp)
    1274:	da400404 	addi	r9,sp,16
    1278:	e5ffef16 	blt	fp,r23,1238 <___vfprintf_internal_r+0x218>
    127c:	b021883a 	mov	r16,r22
    1280:	b82d883a 	mov	r22,r23
    1284:	902f883a 	mov	r23,r18
    1288:	dc813817 	ldw	r18,1248(sp)
    128c:	4dc00015 	stw	r23,0(r9)
    1290:	4d800115 	stw	r22,4(r9)
    1294:	4591883a 	add	r8,r8,r22
    1298:	18c00044 	addi	r3,r3,1
    129c:	da011d15 	stw	r8,1140(sp)
    12a0:	d8c11c15 	stw	r3,1136(sp)
    12a4:	008001c4 	movi	r2,7
    12a8:	10c3fe16 	blt	r2,r3,22a4 <___vfprintf_internal_r+0x1284>
    12ac:	4a400204 	addi	r9,r9,8
    12b0:	0001f306 	br	1a80 <___vfprintf_internal_r+0xa60>
    12b4:	1085883a 	add	r2,r2,r2
    12b8:	1085883a 	add	r2,r2,r2
    12bc:	01000034 	movhi	r4,0
    12c0:	2104b404 	addi	r4,r4,4816
    12c4:	1105883a 	add	r2,r2,r4
    12c8:	10800017 	ldw	r2,0(r2)
    12cc:	1000683a 	jmp	r2
    12d0:	000019ac 	andhi	zero,zero,102
    12d4:	0000119c 	xori	zero,zero,70
    12d8:	0000119c 	xori	zero,zero,70
    12dc:	000019c4 	movi	zero,103
    12e0:	0000119c 	xori	zero,zero,70
    12e4:	0000119c 	xori	zero,zero,70
    12e8:	0000119c 	xori	zero,zero,70
    12ec:	0000119c 	xori	zero,zero,70
    12f0:	0000119c 	xori	zero,zero,70
    12f4:	0000119c 	xori	zero,zero,70
    12f8:	0000187c 	xorhi	zero,zero,97
    12fc:	00001a10 	cmplti	zero,zero,104
    1300:	0000119c 	xori	zero,zero,70
    1304:	00001444 	movi	zero,81
    1308:	000017e4 	muli	zero,zero,95
    130c:	0000119c 	xori	zero,zero,70
    1310:	000019d0 	cmplti	zero,zero,103
    1314:	000019dc 	xori	zero,zero,103
    1318:	000019dc 	xori	zero,zero,103
    131c:	000019dc 	xori	zero,zero,103
    1320:	000019dc 	xori	zero,zero,103
    1324:	000019dc 	xori	zero,zero,103
    1328:	000019dc 	xori	zero,zero,103
    132c:	000019dc 	xori	zero,zero,103
    1330:	000019dc 	xori	zero,zero,103
    1334:	000019dc 	xori	zero,zero,103
    1338:	0000119c 	xori	zero,zero,70
    133c:	0000119c 	xori	zero,zero,70
    1340:	0000119c 	xori	zero,zero,70
    1344:	0000119c 	xori	zero,zero,70
    1348:	0000119c 	xori	zero,zero,70
    134c:	0000119c 	xori	zero,zero,70
    1350:	0000119c 	xori	zero,zero,70
    1354:	0000119c 	xori	zero,zero,70
    1358:	0000119c 	xori	zero,zero,70
    135c:	0000119c 	xori	zero,zero,70
    1360:	000015b4 	movhi	zero,86
    1364:	00001674 	movhi	zero,89
    1368:	0000119c 	xori	zero,zero,70
    136c:	00001674 	movhi	zero,89
    1370:	0000119c 	xori	zero,zero,70
    1374:	0000119c 	xori	zero,zero,70
    1378:	0000119c 	xori	zero,zero,70
    137c:	0000119c 	xori	zero,zero,70
    1380:	00001708 	cmpgei	zero,zero,92
    1384:	0000119c 	xori	zero,zero,70
    1388:	0000119c 	xori	zero,zero,70
    138c:	00001714 	movui	zero,92
    1390:	0000119c 	xori	zero,zero,70
    1394:	0000119c 	xori	zero,zero,70
    1398:	0000119c 	xori	zero,zero,70
    139c:	0000119c 	xori	zero,zero,70
    13a0:	0000119c 	xori	zero,zero,70
    13a4:	0000174c 	andi	zero,zero,93
    13a8:	0000119c 	xori	zero,zero,70
    13ac:	0000119c 	xori	zero,zero,70
    13b0:	00001788 	cmpgei	zero,zero,94
    13b4:	0000119c 	xori	zero,zero,70
    13b8:	0000119c 	xori	zero,zero,70
    13bc:	0000119c 	xori	zero,zero,70
    13c0:	0000119c 	xori	zero,zero,70
    13c4:	0000119c 	xori	zero,zero,70
    13c8:	0000119c 	xori	zero,zero,70
    13cc:	0000119c 	xori	zero,zero,70
    13d0:	0000119c 	xori	zero,zero,70
    13d4:	0000119c 	xori	zero,zero,70
    13d8:	0000119c 	xori	zero,zero,70
    13dc:	00001a20 	cmpeqi	zero,zero,104
    13e0:	00001a54 	movui	zero,105
    13e4:	00001674 	movhi	zero,89
    13e8:	00001674 	movhi	zero,89
    13ec:	00001674 	movhi	zero,89
    13f0:	000019a0 	cmpeqi	zero,zero,102
    13f4:	00001a54 	movui	zero,105
    13f8:	0000119c 	xori	zero,zero,70
    13fc:	0000119c 	xori	zero,zero,70
    1400:	0000182c 	andhi	zero,zero,96
    1404:	0000119c 	xori	zero,zero,70
    1408:	00001844 	movi	zero,97
    140c:	00001a60 	cmpeqi	zero,zero,105
    1410:	000018a4 	muli	zero,zero,98
    1414:	000018f4 	movhi	zero,99
    1418:	0000119c 	xori	zero,zero,70
    141c:	00001900 	call	190 <alt_irq_handler+0xa4>
    1420:	0000119c 	xori	zero,zero,70
    1424:	00001a6c 	andhi	zero,zero,105
    1428:	0000119c 	xori	zero,zero,70
    142c:	0000119c 	xori	zero,zero,70
    1430:	00001964 	muli	zero,zero,101
    1434:	d9012e17 	ldw	r4,1208(sp)
    1438:	d8812d15 	stw	r2,1204(sp)
    143c:	0109c83a 	sub	r4,zero,r4
    1440:	d9012e15 	stw	r4,1208(sp)
    1444:	84000114 	ori	r16,r16,4
    1448:	ac800007 	ldb	r18,0(r21)
    144c:	003f5006 	br	1190 <___vfprintf_internal_r+0x170>
    1450:	d9013017 	ldw	r4,1216(sp)
    1454:	d9412917 	ldw	r5,1188(sp)
    1458:	0002ec00 	call	2ec0 <__swsetup_r>
    145c:	10003d1e 	bne	r2,zero,1554 <___vfprintf_internal_r+0x534>
    1460:	d8c12917 	ldw	r3,1188(sp)
    1464:	1880030b 	ldhu	r2,12(r3)
    1468:	00c00284 	movi	r3,10
    146c:	1100068c 	andi	r4,r2,26
    1470:	20ff101e 	bne	r4,r3,10b4 <___vfprintf_internal_r+0x94>
    1474:	d9012917 	ldw	r4,1188(sp)
    1478:	20c0038b 	ldhu	r3,14(r4)
    147c:	193fffcc 	andi	r4,r3,65535
    1480:	2120001c 	xori	r4,r4,32768
    1484:	21200004 	addi	r4,r4,-32768
    1488:	203f0a16 	blt	r4,zero,10b4 <___vfprintf_internal_r+0x94>
    148c:	d9012917 	ldw	r4,1188(sp)
    1490:	d9c12d17 	ldw	r7,1204(sp)
    1494:	10bfff4c 	andi	r2,r2,65533
    1498:	22800717 	ldw	r10,28(r4)
    149c:	22400917 	ldw	r9,36(r4)
    14a0:	d9013017 	ldw	r4,1216(sp)
    14a4:	02010004 	movi	r8,1024
    14a8:	d881070d 	sth	r2,1052(sp)
    14ac:	d9410404 	addi	r5,sp,1040
    14b0:	d8800404 	addi	r2,sp,16
    14b4:	800d883a 	mov	r6,r16
    14b8:	d8c1078d 	sth	r3,1054(sp)
    14bc:	da810b15 	stw	r10,1068(sp)
    14c0:	da410d15 	stw	r9,1076(sp)
    14c4:	d8810415 	stw	r2,1040(sp)
    14c8:	d8810815 	stw	r2,1056(sp)
    14cc:	da010615 	stw	r8,1048(sp)
    14d0:	da010915 	stw	r8,1060(sp)
    14d4:	d8010a15 	stw	zero,1064(sp)
    14d8:	00010200 	call	1020 <___vfprintf_internal_r>
    14dc:	d8812c15 	stw	r2,1200(sp)
    14e0:	10000416 	blt	r2,zero,14f4 <___vfprintf_internal_r+0x4d4>
    14e4:	d9013017 	ldw	r4,1216(sp)
    14e8:	d9410404 	addi	r5,sp,1040
    14ec:	0004a2c0 	call	4a2c <_fflush_r>
    14f0:	1006501e 	bne	r2,zero,2e34 <___vfprintf_internal_r+0x1e14>
    14f4:	d881070b 	ldhu	r2,1052(sp)
    14f8:	1080100c 	andi	r2,r2,64
    14fc:	10bfffcc 	andi	r2,r2,65535
    1500:	10a0001c 	xori	r2,r2,32768
    1504:	10a00004 	addi	r2,r2,-32768
    1508:	10001426 	beq	r2,zero,155c <___vfprintf_internal_r+0x53c>
    150c:	d8c12917 	ldw	r3,1188(sp)
    1510:	1880030b 	ldhu	r2,12(r3)
    1514:	10801014 	ori	r2,r2,64
    1518:	1880030d 	sth	r2,12(r3)
    151c:	00000f06 	br	155c <___vfprintf_internal_r+0x53c>
    1520:	d8811d17 	ldw	r2,1140(sp)
    1524:	10000426 	beq	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1528:	d9013017 	ldw	r4,1216(sp)
    152c:	d9412917 	ldw	r5,1188(sp)
    1530:	d9811b04 	addi	r6,sp,1132
    1534:	0000fec0 	call	fec <__sprint_r>
    1538:	d8c12917 	ldw	r3,1188(sp)
    153c:	1880030b 	ldhu	r2,12(r3)
    1540:	1080100c 	andi	r2,r2,64
    1544:	10bfffcc 	andi	r2,r2,65535
    1548:	10a0001c 	xori	r2,r2,32768
    154c:	10a00004 	addi	r2,r2,-32768
    1550:	10000226 	beq	r2,zero,155c <___vfprintf_internal_r+0x53c>
    1554:	00bfffc4 	movi	r2,-1
    1558:	d8812c15 	stw	r2,1200(sp)
    155c:	d8812c17 	ldw	r2,1200(sp)
    1560:	dfc14617 	ldw	ra,1304(sp)
    1564:	df014517 	ldw	fp,1300(sp)
    1568:	ddc14417 	ldw	r23,1296(sp)
    156c:	dd814317 	ldw	r22,1292(sp)
    1570:	dd414217 	ldw	r21,1288(sp)
    1574:	dd014117 	ldw	r20,1284(sp)
    1578:	dcc14017 	ldw	r19,1280(sp)
    157c:	dc813f17 	ldw	r18,1276(sp)
    1580:	dc413e17 	ldw	r17,1272(sp)
    1584:	dc013d17 	ldw	r16,1268(sp)
    1588:	dec14704 	addi	sp,sp,1308
    158c:	f800283a 	ret
    1590:	d9412917 	ldw	r5,1188(sp)
    1594:	8809883a 	mov	r4,r17
    1598:	d9811b04 	addi	r6,sp,1132
    159c:	0000fec0 	call	fec <__sprint_r>
    15a0:	103fe51e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    15a4:	da400404 	addi	r9,sp,16
    15a8:	003eea06 	br	1154 <___vfprintf_internal_r+0x134>
    15ac:	0004ce80 	call	4ce8 <__sinit>
    15b0:	003eb306 	br	1080 <___vfprintf_internal_r+0x60>
    15b4:	e013883a 	mov	r9,fp
    15b8:	84000414 	ori	r16,r16,16
    15bc:	1839883a 	mov	fp,r3
    15c0:	8080080c 	andi	r2,r16,32
    15c4:	10034426 	beq	r2,zero,22d8 <___vfprintf_internal_r+0x12b8>
    15c8:	d8c12d17 	ldw	r3,1204(sp)
    15cc:	18800117 	ldw	r2,4(r3)
    15d0:	1dc00017 	ldw	r23,0(r3)
    15d4:	18c00204 	addi	r3,r3,8
    15d8:	d8c12d15 	stw	r3,1204(sp)
    15dc:	102d883a 	mov	r22,r2
    15e0:	1003020e 	bge	r2,zero,21ec <___vfprintf_internal_r+0x11cc>
    15e4:	05efc83a 	sub	r23,zero,r23
    15e8:	b804c03a 	cmpne	r2,r23,zero
    15ec:	05adc83a 	sub	r22,zero,r22
    15f0:	b0adc83a 	sub	r22,r22,r2
    15f4:	00800b44 	movi	r2,45
    15f8:	d8812585 	stb	r2,1174(sp)
    15fc:	00c00044 	movi	r3,1
    1600:	bd84b03a 	or	r2,r23,r22
    1604:	e0000216 	blt	fp,zero,1610 <___vfprintf_internal_r+0x5f0>
    1608:	013fdfc4 	movi	r4,-129
    160c:	8120703a 	and	r16,r16,r4
    1610:	1001cc1e 	bne	r2,zero,1d44 <___vfprintf_internal_r+0xd24>
    1614:	e001cb1e 	bne	fp,zero,1d44 <___vfprintf_internal_r+0xd24>
    1618:	18c03fcc 	andi	r3,r3,255
    161c:	1802ca1e 	bne	r3,zero,2148 <___vfprintf_internal_r+0x1128>
    1620:	8080004c 	andi	r2,r16,1
    1624:	1002c826 	beq	r2,zero,2148 <___vfprintf_internal_r+0x1128>
    1628:	d8c13917 	ldw	r3,1252(sp)
    162c:	00800c04 	movi	r2,48
    1630:	d8810dc5 	stb	r2,1079(sp)
    1634:	d8c12b15 	stw	r3,1196(sp)
    1638:	dcc10dc4 	addi	r19,sp,1079
    163c:	d8812b17 	ldw	r2,1196(sp)
    1640:	d8812815 	stw	r2,1184(sp)
    1644:	1700010e 	bge	r2,fp,164c <___vfprintf_internal_r+0x62c>
    1648:	df012815 	stw	fp,1184(sp)
    164c:	d8812583 	ldbu	r2,1174(sp)
    1650:	df013115 	stw	fp,1220(sp)
    1654:	10803fcc 	andi	r2,r2,255
    1658:	1080201c 	xori	r2,r2,128
    165c:	10bfe004 	addi	r2,r2,-128
    1660:	103ed726 	beq	r2,zero,11c0 <___vfprintf_internal_r+0x1a0>
    1664:	d8c12817 	ldw	r3,1184(sp)
    1668:	18c00044 	addi	r3,r3,1
    166c:	d8c12815 	stw	r3,1184(sp)
    1670:	003ed306 	br	11c0 <___vfprintf_internal_r+0x1a0>
    1674:	8080020c 	andi	r2,r16,8
    1678:	e013883a 	mov	r9,fp
    167c:	1839883a 	mov	fp,r3
    1680:	1003a626 	beq	r2,zero,251c <___vfprintf_internal_r+0x14fc>
    1684:	d9012d17 	ldw	r4,1204(sp)
    1688:	25800017 	ldw	r22,0(r4)
    168c:	25000117 	ldw	r20,4(r4)
    1690:	21000204 	addi	r4,r4,8
    1694:	d9012d15 	stw	r4,1204(sp)
    1698:	dd813315 	stw	r22,1228(sp)
    169c:	dd013415 	stw	r20,1232(sp)
    16a0:	b009883a 	mov	r4,r22
    16a4:	a00b883a 	mov	r5,r20
    16a8:	da413c15 	stw	r9,1264(sp)
    16ac:	0007e740 	call	7e74 <__isinfd>
    16b0:	da413c17 	ldw	r9,1264(sp)
    16b4:	b009883a 	mov	r4,r22
    16b8:	a00b883a 	mov	r5,r20
    16bc:	10041d26 	beq	r2,zero,2734 <___vfprintf_internal_r+0x1714>
    16c0:	000d883a 	mov	r6,zero
    16c4:	000f883a 	mov	r7,zero
    16c8:	0009c480 	call	9c48 <__ltdf2>
    16cc:	da413c17 	ldw	r9,1264(sp)
    16d0:	1004da16 	blt	r2,zero,2a3c <___vfprintf_internal_r+0x1a1c>
    16d4:	d8812583 	ldbu	r2,1174(sp)
    16d8:	00c011c4 	movi	r3,71
    16dc:	1c83d116 	blt	r3,r18,2624 <___vfprintf_internal_r+0x1604>
    16e0:	04c00074 	movhi	r19,1
    16e4:	9cf4ce04 	addi	r19,r19,-11464
    16e8:	00c000c4 	movi	r3,3
    16ec:	d8c12815 	stw	r3,1184(sp)
    16f0:	00ffdfc4 	movi	r3,-129
    16f4:	80e0703a 	and	r16,r16,r3
    16f8:	d8c12817 	ldw	r3,1184(sp)
    16fc:	d8013115 	stw	zero,1220(sp)
    1700:	d8c12b15 	stw	r3,1196(sp)
    1704:	003fd306 	br	1654 <___vfprintf_internal_r+0x634>
    1708:	84000214 	ori	r16,r16,8
    170c:	ac800007 	ldb	r18,0(r21)
    1710:	003e9f06 	br	1190 <___vfprintf_internal_r+0x170>
    1714:	e013883a 	mov	r9,fp
    1718:	84000414 	ori	r16,r16,16
    171c:	1839883a 	mov	fp,r3
    1720:	8080080c 	andi	r2,r16,32
    1724:	10031d26 	beq	r2,zero,239c <___vfprintf_internal_r+0x137c>
    1728:	d8812d17 	ldw	r2,1204(sp)
    172c:	0007883a 	mov	r3,zero
    1730:	15c00017 	ldw	r23,0(r2)
    1734:	15800117 	ldw	r22,4(r2)
    1738:	10800204 	addi	r2,r2,8
    173c:	d8812d15 	stw	r2,1204(sp)
    1740:	d8012585 	stb	zero,1174(sp)
    1744:	bd84b03a 	or	r2,r23,r22
    1748:	003fae06 	br	1604 <___vfprintf_internal_r+0x5e4>
    174c:	e013883a 	mov	r9,fp
    1750:	84000414 	ori	r16,r16,16
    1754:	1839883a 	mov	fp,r3
    1758:	8080080c 	andi	r2,r16,32
    175c:	1002e726 	beq	r2,zero,22fc <___vfprintf_internal_r+0x12dc>
    1760:	d8c12d17 	ldw	r3,1204(sp)
    1764:	d9012d17 	ldw	r4,1204(sp)
    1768:	1dc00017 	ldw	r23,0(r3)
    176c:	1d800117 	ldw	r22,4(r3)
    1770:	21000204 	addi	r4,r4,8
    1774:	00c00044 	movi	r3,1
    1778:	d9012d15 	stw	r4,1204(sp)
    177c:	bd84b03a 	or	r2,r23,r22
    1780:	d8012585 	stb	zero,1174(sp)
    1784:	003f9f06 	br	1604 <___vfprintf_internal_r+0x5e4>
    1788:	e013883a 	mov	r9,fp
    178c:	1839883a 	mov	fp,r3
    1790:	00c00074 	movhi	r3,1
    1794:	18f4d204 	addi	r3,r3,-11448
    1798:	d8c13615 	stw	r3,1240(sp)
    179c:	8080080c 	andi	r2,r16,32
    17a0:	10007726 	beq	r2,zero,1980 <___vfprintf_internal_r+0x960>
    17a4:	d9012d17 	ldw	r4,1204(sp)
    17a8:	25c00017 	ldw	r23,0(r4)
    17ac:	25800117 	ldw	r22,4(r4)
    17b0:	21000204 	addi	r4,r4,8
    17b4:	d9012d15 	stw	r4,1204(sp)
    17b8:	8080004c 	andi	r2,r16,1
    17bc:	1002c226 	beq	r2,zero,22c8 <___vfprintf_internal_r+0x12a8>
    17c0:	bd84b03a 	or	r2,r23,r22
    17c4:	10035d26 	beq	r2,zero,253c <___vfprintf_internal_r+0x151c>
    17c8:	00c00c04 	movi	r3,48
    17cc:	d8c12505 	stb	r3,1172(sp)
    17d0:	dc812545 	stb	r18,1173(sp)
    17d4:	84000094 	ori	r16,r16,2
    17d8:	00c00084 	movi	r3,2
    17dc:	d8012585 	stb	zero,1174(sp)
    17e0:	003f8806 	br	1604 <___vfprintf_internal_r+0x5e4>
    17e4:	ac800007 	ldb	r18,0(r21)
    17e8:	00c00a84 	movi	r3,42
    17ec:	adc00044 	addi	r23,r21,1
    17f0:	90c57526 	beq	r18,r3,2dc8 <___vfprintf_internal_r+0x1da8>
    17f4:	95bff404 	addi	r22,r18,-48
    17f8:	0009883a 	mov	r4,zero
    17fc:	9d84ff36 	bltu	r19,r22,2bfc <___vfprintf_internal_r+0x1bdc>
    1800:	01400284 	movi	r5,10
    1804:	0000e000 	call	e00 <__mulsi3>
    1808:	bc800007 	ldb	r18,0(r23)
    180c:	b089883a 	add	r4,r22,r2
    1810:	bdc00044 	addi	r23,r23,1
    1814:	95bff404 	addi	r22,r18,-48
    1818:	9dbff92e 	bgeu	r19,r22,1800 <___vfprintf_internal_r+0x7e0>
    181c:	2007883a 	mov	r3,r4
    1820:	20044316 	blt	r4,zero,2930 <___vfprintf_internal_r+0x1910>
    1824:	b82b883a 	mov	r21,r23
    1828:	003e5a06 	br	1194 <___vfprintf_internal_r+0x174>
    182c:	ac800007 	ldb	r18,0(r21)
    1830:	01001b04 	movi	r4,108
    1834:	a805883a 	mov	r2,r21
    1838:	91045526 	beq	r18,r4,2990 <___vfprintf_internal_r+0x1970>
    183c:	84000414 	ori	r16,r16,16
    1840:	003e5306 	br	1190 <___vfprintf_internal_r+0x170>
    1844:	8080080c 	andi	r2,r16,32
    1848:	e013883a 	mov	r9,fp
    184c:	10034026 	beq	r2,zero,2550 <___vfprintf_internal_r+0x1530>
    1850:	d9012d17 	ldw	r4,1204(sp)
    1854:	20800017 	ldw	r2,0(r4)
    1858:	d9012c17 	ldw	r4,1200(sp)
    185c:	2007d7fa 	srai	r3,r4,31
    1860:	d9012d17 	ldw	r4,1204(sp)
    1864:	10c00115 	stw	r3,4(r2)
    1868:	21000104 	addi	r4,r4,4
    186c:	d9012d15 	stw	r4,1204(sp)
    1870:	d9012c17 	ldw	r4,1200(sp)
    1874:	11000015 	stw	r4,0(r2)
    1878:	003e1f06 	br	10f8 <___vfprintf_internal_r+0xd8>
    187c:	d9012d17 	ldw	r4,1204(sp)
    1880:	21000017 	ldw	r4,0(r4)
    1884:	d9012e15 	stw	r4,1208(sp)
    1888:	d9012d17 	ldw	r4,1204(sp)
    188c:	20800104 	addi	r2,r4,4
    1890:	d9012e17 	ldw	r4,1208(sp)
    1894:	203ee716 	blt	r4,zero,1434 <___vfprintf_internal_r+0x414>
    1898:	d8812d15 	stw	r2,1204(sp)
    189c:	ac800007 	ldb	r18,0(r21)
    18a0:	003e3b06 	br	1190 <___vfprintf_internal_r+0x170>
    18a4:	e013883a 	mov	r9,fp
    18a8:	1839883a 	mov	fp,r3
    18ac:	d8c12d17 	ldw	r3,1204(sp)
    18b0:	00800c04 	movi	r2,48
    18b4:	01000074 	movhi	r4,1
    18b8:	2134d704 	addi	r4,r4,-11428
    18bc:	1dc00017 	ldw	r23,0(r3)
    18c0:	18c00104 	addi	r3,r3,4
    18c4:	d8812505 	stb	r2,1172(sp)
    18c8:	00801e04 	movi	r2,120
    18cc:	d8812545 	stb	r2,1173(sp)
    18d0:	d8c12d15 	stw	r3,1204(sp)
    18d4:	002d883a 	mov	r22,zero
    18d8:	84000094 	ori	r16,r16,2
    18dc:	d9013615 	stw	r4,1240(sp)
    18e0:	00c00084 	movi	r3,2
    18e4:	04801e04 	movi	r18,120
    18e8:	b805883a 	mov	r2,r23
    18ec:	d8012585 	stb	zero,1174(sp)
    18f0:	003f4406 	br	1604 <___vfprintf_internal_r+0x5e4>
    18f4:	84000814 	ori	r16,r16,32
    18f8:	ac800007 	ldb	r18,0(r21)
    18fc:	003e2406 	br	1190 <___vfprintf_internal_r+0x170>
    1900:	d8812d17 	ldw	r2,1204(sp)
    1904:	d8012585 	stb	zero,1174(sp)
    1908:	e013883a 	mov	r9,fp
    190c:	14c00017 	ldw	r19,0(r2)
    1910:	1839883a 	mov	fp,r3
    1914:	15c00104 	addi	r23,r2,4
    1918:	98045526 	beq	r19,zero,2a70 <___vfprintf_internal_r+0x1a50>
    191c:	9809883a 	mov	r4,r19
    1920:	18043116 	blt	r3,zero,29e8 <___vfprintf_internal_r+0x19c8>
    1924:	000b883a 	mov	r5,zero
    1928:	180d883a 	mov	r6,r3
    192c:	da413c15 	stw	r9,1264(sp)
    1930:	00063880 	call	6388 <memchr>
    1934:	da413c17 	ldw	r9,1264(sp)
    1938:	10047a26 	beq	r2,zero,2b24 <___vfprintf_internal_r+0x1b04>
    193c:	14c5c83a 	sub	r2,r2,r19
    1940:	d8812b15 	stw	r2,1196(sp)
    1944:	e083d40e 	bge	fp,r2,2898 <___vfprintf_internal_r+0x1878>
    1948:	df012815 	stw	fp,1184(sp)
    194c:	e004e416 	blt	fp,zero,2ce0 <___vfprintf_internal_r+0x1cc0>
    1950:	d8812583 	ldbu	r2,1174(sp)
    1954:	df012b15 	stw	fp,1196(sp)
    1958:	ddc12d15 	stw	r23,1204(sp)
    195c:	d8013115 	stw	zero,1220(sp)
    1960:	003f3c06 	br	1654 <___vfprintf_internal_r+0x634>
    1964:	00800074 	movhi	r2,1
    1968:	10b4d704 	addi	r2,r2,-11428
    196c:	d8813615 	stw	r2,1240(sp)
    1970:	8080080c 	andi	r2,r16,32
    1974:	e013883a 	mov	r9,fp
    1978:	1839883a 	mov	fp,r3
    197c:	103f891e 	bne	r2,zero,17a4 <___vfprintf_internal_r+0x784>
    1980:	8080040c 	andi	r2,r16,16
    1984:	1002c326 	beq	r2,zero,2494 <___vfprintf_internal_r+0x1474>
    1988:	d8812d17 	ldw	r2,1204(sp)
    198c:	002d883a 	mov	r22,zero
    1990:	15c00017 	ldw	r23,0(r2)
    1994:	10800104 	addi	r2,r2,4
    1998:	d8812d15 	stw	r2,1204(sp)
    199c:	003f8606 	br	17b8 <___vfprintf_internal_r+0x798>
    19a0:	84001014 	ori	r16,r16,64
    19a4:	ac800007 	ldb	r18,0(r21)
    19a8:	003df906 	br	1190 <___vfprintf_internal_r+0x170>
    19ac:	d8812587 	ldb	r2,1174(sp)
    19b0:	1002e51e 	bne	r2,zero,2548 <___vfprintf_internal_r+0x1528>
    19b4:	00800804 	movi	r2,32
    19b8:	d8812585 	stb	r2,1174(sp)
    19bc:	ac800007 	ldb	r18,0(r21)
    19c0:	003df306 	br	1190 <___vfprintf_internal_r+0x170>
    19c4:	84000054 	ori	r16,r16,1
    19c8:	ac800007 	ldb	r18,0(r21)
    19cc:	003df006 	br	1190 <___vfprintf_internal_r+0x170>
    19d0:	84002014 	ori	r16,r16,128
    19d4:	ac800007 	ldb	r18,0(r21)
    19d8:	003ded06 	br	1190 <___vfprintf_internal_r+0x170>
    19dc:	0009883a 	mov	r4,zero
    19e0:	95bff404 	addi	r22,r18,-48
    19e4:	182f883a 	mov	r23,r3
    19e8:	01400284 	movi	r5,10
    19ec:	0000e000 	call	e00 <__mulsi3>
    19f0:	ac800007 	ldb	r18,0(r21)
    19f4:	1589883a 	add	r4,r2,r22
    19f8:	ad400044 	addi	r21,r21,1
    19fc:	95bff404 	addi	r22,r18,-48
    1a00:	9dbff92e 	bgeu	r19,r22,19e8 <___vfprintf_internal_r+0x9c8>
    1a04:	b807883a 	mov	r3,r23
    1a08:	d9012e15 	stw	r4,1208(sp)
    1a0c:	003de106 	br	1194 <___vfprintf_internal_r+0x174>
    1a10:	00800ac4 	movi	r2,43
    1a14:	d8812585 	stb	r2,1174(sp)
    1a18:	ac800007 	ldb	r18,0(r21)
    1a1c:	003ddc06 	br	1190 <___vfprintf_internal_r+0x170>
    1a20:	d8c12d17 	ldw	r3,1204(sp)
    1a24:	d9012d17 	ldw	r4,1204(sp)
    1a28:	e013883a 	mov	r9,fp
    1a2c:	18800017 	ldw	r2,0(r3)
    1a30:	21000104 	addi	r4,r4,4
    1a34:	00c00044 	movi	r3,1
    1a38:	d8c12815 	stw	r3,1184(sp)
    1a3c:	d8012585 	stb	zero,1174(sp)
    1a40:	d8810405 	stb	r2,1040(sp)
    1a44:	d9012d15 	stw	r4,1204(sp)
    1a48:	d8c12b15 	stw	r3,1196(sp)
    1a4c:	dcc10404 	addi	r19,sp,1040
    1a50:	003dda06 	br	11bc <___vfprintf_internal_r+0x19c>
    1a54:	e013883a 	mov	r9,fp
    1a58:	1839883a 	mov	fp,r3
    1a5c:	003ed806 	br	15c0 <___vfprintf_internal_r+0x5a0>
    1a60:	e013883a 	mov	r9,fp
    1a64:	1839883a 	mov	fp,r3
    1a68:	003f2d06 	br	1720 <___vfprintf_internal_r+0x700>
    1a6c:	e013883a 	mov	r9,fp
    1a70:	1839883a 	mov	fp,r3
    1a74:	003f3806 	br	1758 <___vfprintf_internal_r+0x738>
    1a78:	da011d17 	ldw	r8,1140(sp)
    1a7c:	d8c11c17 	ldw	r3,1136(sp)
    1a80:	d8812587 	ldb	r2,1174(sp)
    1a84:	10000b26 	beq	r2,zero,1ab4 <___vfprintf_internal_r+0xa94>
    1a88:	d8812584 	addi	r2,sp,1174
    1a8c:	48800015 	stw	r2,0(r9)
    1a90:	00800044 	movi	r2,1
    1a94:	48800115 	stw	r2,4(r9)
    1a98:	4091883a 	add	r8,r8,r2
    1a9c:	1887883a 	add	r3,r3,r2
    1aa0:	da011d15 	stw	r8,1140(sp)
    1aa4:	d8c11c15 	stw	r3,1136(sp)
    1aa8:	008001c4 	movi	r2,7
    1aac:	10c18e16 	blt	r2,r3,20e8 <___vfprintf_internal_r+0x10c8>
    1ab0:	4a400204 	addi	r9,r9,8
    1ab4:	d9012a17 	ldw	r4,1192(sp)
    1ab8:	20000b26 	beq	r4,zero,1ae8 <___vfprintf_internal_r+0xac8>
    1abc:	d8812504 	addi	r2,sp,1172
    1ac0:	48800015 	stw	r2,0(r9)
    1ac4:	00800084 	movi	r2,2
    1ac8:	48800115 	stw	r2,4(r9)
    1acc:	4091883a 	add	r8,r8,r2
    1ad0:	18c00044 	addi	r3,r3,1
    1ad4:	da011d15 	stw	r8,1140(sp)
    1ad8:	d8c11c15 	stw	r3,1136(sp)
    1adc:	008001c4 	movi	r2,7
    1ae0:	10c17816 	blt	r2,r3,20c4 <___vfprintf_internal_r+0x10a4>
    1ae4:	4a400204 	addi	r9,r9,8
    1ae8:	d9012f17 	ldw	r4,1212(sp)
    1aec:	00802004 	movi	r2,128
    1af0:	2080fc26 	beq	r4,r2,1ee4 <___vfprintf_internal_r+0xec4>
    1af4:	d8813117 	ldw	r2,1220(sp)
    1af8:	d9012b17 	ldw	r4,1196(sp)
    1afc:	112fc83a 	sub	r23,r2,r4
    1b00:	05c02a0e 	bge	zero,r23,1bac <___vfprintf_internal_r+0xb8c>
    1b04:	07000404 	movi	fp,16
    1b08:	05000074 	movhi	r20,1
    1b0c:	a534e284 	addi	r20,r20,-11382
    1b10:	e5c01d0e 	bge	fp,r23,1b88 <___vfprintf_internal_r+0xb68>
    1b14:	dc812a15 	stw	r18,1192(sp)
    1b18:	058001c4 	movi	r22,7
    1b1c:	a025883a 	mov	r18,r20
    1b20:	8029883a 	mov	r20,r16
    1b24:	dc012917 	ldw	r16,1188(sp)
    1b28:	00000306 	br	1b38 <___vfprintf_internal_r+0xb18>
    1b2c:	bdfffc04 	addi	r23,r23,-16
    1b30:	4a400204 	addi	r9,r9,8
    1b34:	e5c0110e 	bge	fp,r23,1b7c <___vfprintf_internal_r+0xb5c>
    1b38:	4c800015 	stw	r18,0(r9)
    1b3c:	4f000115 	stw	fp,4(r9)
    1b40:	42000404 	addi	r8,r8,16
    1b44:	18c00044 	addi	r3,r3,1
    1b48:	da011d15 	stw	r8,1140(sp)
    1b4c:	d8c11c15 	stw	r3,1136(sp)
    1b50:	b0fff60e 	bge	r22,r3,1b2c <___vfprintf_internal_r+0xb0c>
    1b54:	8809883a 	mov	r4,r17
    1b58:	800b883a 	mov	r5,r16
    1b5c:	d9811b04 	addi	r6,sp,1132
    1b60:	0000fec0 	call	fec <__sprint_r>
    1b64:	103e741e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1b68:	bdfffc04 	addi	r23,r23,-16
    1b6c:	da011d17 	ldw	r8,1140(sp)
    1b70:	d8c11c17 	ldw	r3,1136(sp)
    1b74:	da400404 	addi	r9,sp,16
    1b78:	e5ffef16 	blt	fp,r23,1b38 <___vfprintf_internal_r+0xb18>
    1b7c:	a021883a 	mov	r16,r20
    1b80:	9029883a 	mov	r20,r18
    1b84:	dc812a17 	ldw	r18,1192(sp)
    1b88:	4d000015 	stw	r20,0(r9)
    1b8c:	4dc00115 	stw	r23,4(r9)
    1b90:	45d1883a 	add	r8,r8,r23
    1b94:	18c00044 	addi	r3,r3,1
    1b98:	da011d15 	stw	r8,1140(sp)
    1b9c:	d8c11c15 	stw	r3,1136(sp)
    1ba0:	008001c4 	movi	r2,7
    1ba4:	10c13e16 	blt	r2,r3,20a0 <___vfprintf_internal_r+0x1080>
    1ba8:	4a400204 	addi	r9,r9,8
    1bac:	8080400c 	andi	r2,r16,256
    1bb0:	1000831e 	bne	r2,zero,1dc0 <___vfprintf_internal_r+0xda0>
    1bb4:	d8812b17 	ldw	r2,1196(sp)
    1bb8:	4cc00015 	stw	r19,0(r9)
    1bbc:	48800115 	stw	r2,4(r9)
    1bc0:	4091883a 	add	r8,r8,r2
    1bc4:	18c00044 	addi	r3,r3,1
    1bc8:	da011d15 	stw	r8,1140(sp)
    1bcc:	d8c11c15 	stw	r3,1136(sp)
    1bd0:	008001c4 	movi	r2,7
    1bd4:	10c05316 	blt	r2,r3,1d24 <___vfprintf_internal_r+0xd04>
    1bd8:	4a400204 	addi	r9,r9,8
    1bdc:	8400010c 	andi	r16,r16,4
    1be0:	80002e26 	beq	r16,zero,1c9c <___vfprintf_internal_r+0xc7c>
    1be4:	d8812e17 	ldw	r2,1208(sp)
    1be8:	d8c12817 	ldw	r3,1184(sp)
    1bec:	10e1c83a 	sub	r16,r2,r3
    1bf0:	04002a0e 	bge	zero,r16,1c9c <___vfprintf_internal_r+0xc7c>
    1bf4:	04800404 	movi	r18,16
    1bf8:	d8c11c17 	ldw	r3,1136(sp)
    1bfc:	05c00074 	movhi	r23,1
    1c00:	bdf4de84 	addi	r23,r23,-11398
    1c04:	9400170e 	bge	r18,r16,1c64 <___vfprintf_internal_r+0xc44>
    1c08:	04c001c4 	movi	r19,7
    1c0c:	dd012917 	ldw	r20,1188(sp)
    1c10:	00000306 	br	1c20 <___vfprintf_internal_r+0xc00>
    1c14:	843ffc04 	addi	r16,r16,-16
    1c18:	4a400204 	addi	r9,r9,8
    1c1c:	9400110e 	bge	r18,r16,1c64 <___vfprintf_internal_r+0xc44>
    1c20:	4dc00015 	stw	r23,0(r9)
    1c24:	4c800115 	stw	r18,4(r9)
    1c28:	42000404 	addi	r8,r8,16
    1c2c:	18c00044 	addi	r3,r3,1
    1c30:	da011d15 	stw	r8,1140(sp)
    1c34:	d8c11c15 	stw	r3,1136(sp)
    1c38:	98fff60e 	bge	r19,r3,1c14 <___vfprintf_internal_r+0xbf4>
    1c3c:	8809883a 	mov	r4,r17
    1c40:	a00b883a 	mov	r5,r20
    1c44:	d9811b04 	addi	r6,sp,1132
    1c48:	0000fec0 	call	fec <__sprint_r>
    1c4c:	103e3a1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1c50:	843ffc04 	addi	r16,r16,-16
    1c54:	da011d17 	ldw	r8,1140(sp)
    1c58:	d8c11c17 	ldw	r3,1136(sp)
    1c5c:	da400404 	addi	r9,sp,16
    1c60:	943fef16 	blt	r18,r16,1c20 <___vfprintf_internal_r+0xc00>
    1c64:	4dc00015 	stw	r23,0(r9)
    1c68:	4c000115 	stw	r16,4(r9)
    1c6c:	8211883a 	add	r8,r16,r8
    1c70:	18c00044 	addi	r3,r3,1
    1c74:	da011d15 	stw	r8,1140(sp)
    1c78:	d8c11c15 	stw	r3,1136(sp)
    1c7c:	008001c4 	movi	r2,7
    1c80:	10c0060e 	bge	r2,r3,1c9c <___vfprintf_internal_r+0xc7c>
    1c84:	d9412917 	ldw	r5,1188(sp)
    1c88:	8809883a 	mov	r4,r17
    1c8c:	d9811b04 	addi	r6,sp,1132
    1c90:	0000fec0 	call	fec <__sprint_r>
    1c94:	103e281e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1c98:	da011d17 	ldw	r8,1140(sp)
    1c9c:	dd012817 	ldw	r20,1184(sp)
    1ca0:	d9012e17 	ldw	r4,1208(sp)
    1ca4:	a100010e 	bge	r20,r4,1cac <___vfprintf_internal_r+0xc8c>
    1ca8:	2029883a 	mov	r20,r4
    1cac:	d8812c17 	ldw	r2,1200(sp)
    1cb0:	1505883a 	add	r2,r2,r20
    1cb4:	d8812c15 	stw	r2,1200(sp)
    1cb8:	4000b91e 	bne	r8,zero,1fa0 <___vfprintf_internal_r+0xf80>
    1cbc:	d8011c15 	stw	zero,1136(sp)
    1cc0:	a8800007 	ldb	r2,0(r21)
    1cc4:	da400404 	addi	r9,sp,16
    1cc8:	103d0d1e 	bne	r2,zero,1100 <___vfprintf_internal_r+0xe0>
    1ccc:	a825883a 	mov	r18,r21
    1cd0:	003d2306 	br	1160 <___vfprintf_internal_r+0x140>
    1cd4:	d9412917 	ldw	r5,1188(sp)
    1cd8:	8809883a 	mov	r4,r17
    1cdc:	d9811b04 	addi	r6,sp,1132
    1ce0:	0000fec0 	call	fec <__sprint_r>
    1ce4:	103e141e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1ce8:	da011d17 	ldw	r8,1140(sp)
    1cec:	da400404 	addi	r9,sp,16
    1cf0:	8080004c 	andi	r2,r16,1
    1cf4:	103fb926 	beq	r2,zero,1bdc <___vfprintf_internal_r+0xbbc>
    1cf8:	d8c11c17 	ldw	r3,1136(sp)
    1cfc:	d9013717 	ldw	r4,1244(sp)
    1d00:	00800044 	movi	r2,1
    1d04:	48800115 	stw	r2,4(r9)
    1d08:	49000015 	stw	r4,0(r9)
    1d0c:	4091883a 	add	r8,r8,r2
    1d10:	1887883a 	add	r3,r3,r2
    1d14:	da011d15 	stw	r8,1140(sp)
    1d18:	d8c11c15 	stw	r3,1136(sp)
    1d1c:	008001c4 	movi	r2,7
    1d20:	10ffad0e 	bge	r2,r3,1bd8 <___vfprintf_internal_r+0xbb8>
    1d24:	d9412917 	ldw	r5,1188(sp)
    1d28:	8809883a 	mov	r4,r17
    1d2c:	d9811b04 	addi	r6,sp,1132
    1d30:	0000fec0 	call	fec <__sprint_r>
    1d34:	103e001e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1d38:	da400404 	addi	r9,sp,16
    1d3c:	da011d17 	ldw	r8,1140(sp)
    1d40:	003fa606 	br	1bdc <___vfprintf_internal_r+0xbbc>
    1d44:	18803fcc 	andi	r2,r3,255
    1d48:	00c00044 	movi	r3,1
    1d4c:	10c10126 	beq	r2,r3,2154 <___vfprintf_internal_r+0x1134>
    1d50:	00c00084 	movi	r3,2
    1d54:	10c0ed26 	beq	r2,r3,210c <___vfprintf_internal_r+0x10ec>
    1d58:	d8c10dc4 	addi	r3,sp,1079
    1d5c:	b808d0fa 	srli	r4,r23,3
    1d60:	b00a977a 	slli	r5,r22,29
    1d64:	b02cd0fa 	srli	r22,r22,3
    1d68:	bdc001cc 	andi	r23,r23,7
    1d6c:	b8800c04 	addi	r2,r23,48
    1d70:	292eb03a 	or	r23,r5,r4
    1d74:	18800005 	stb	r2,0(r3)
    1d78:	bd88b03a 	or	r4,r23,r22
    1d7c:	1827883a 	mov	r19,r3
    1d80:	18ffffc4 	addi	r3,r3,-1
    1d84:	203ff51e 	bne	r4,zero,1d5c <___vfprintf_internal_r+0xd3c>
    1d88:	8100004c 	andi	r4,r16,1
    1d8c:	980b883a 	mov	r5,r19
    1d90:	20000726 	beq	r4,zero,1db0 <___vfprintf_internal_r+0xd90>
    1d94:	10803fcc 	andi	r2,r2,255
    1d98:	1080201c 	xori	r2,r2,128
    1d9c:	10bfe004 	addi	r2,r2,-128
    1da0:	01000c04 	movi	r4,48
    1da4:	11000226 	beq	r2,r4,1db0 <___vfprintf_internal_r+0xd90>
    1da8:	1827883a 	mov	r19,r3
    1dac:	293fffc5 	stb	r4,-1(r5)
    1db0:	d8812717 	ldw	r2,1180(sp)
    1db4:	14c5c83a 	sub	r2,r2,r19
    1db8:	d8812b15 	stw	r2,1196(sp)
    1dbc:	003e1f06 	br	163c <___vfprintf_internal_r+0x61c>
    1dc0:	00801944 	movi	r2,101
    1dc4:	14807c0e 	bge	r2,r18,1fb8 <___vfprintf_internal_r+0xf98>
    1dc8:	d9013317 	ldw	r4,1228(sp)
    1dcc:	d9413417 	ldw	r5,1232(sp)
    1dd0:	000d883a 	mov	r6,zero
    1dd4:	000f883a 	mov	r7,zero
    1dd8:	d8c13b15 	stw	r3,1260(sp)
    1ddc:	da013a15 	stw	r8,1256(sp)
    1de0:	da413c15 	stw	r9,1264(sp)
    1de4:	0009ac80 	call	9ac8 <__eqdf2>
    1de8:	d8c13b17 	ldw	r3,1260(sp)
    1dec:	da013a17 	ldw	r8,1256(sp)
    1df0:	da413c17 	ldw	r9,1264(sp)
    1df4:	1001001e 	bne	r2,zero,21f8 <___vfprintf_internal_r+0x11d8>
    1df8:	00800074 	movhi	r2,1
    1dfc:	10b4de04 	addi	r2,r2,-11400
    1e00:	48800015 	stw	r2,0(r9)
    1e04:	00800044 	movi	r2,1
    1e08:	48800115 	stw	r2,4(r9)
    1e0c:	4091883a 	add	r8,r8,r2
    1e10:	1887883a 	add	r3,r3,r2
    1e14:	da011d15 	stw	r8,1140(sp)
    1e18:	d8c11c15 	stw	r3,1136(sp)
    1e1c:	008001c4 	movi	r2,7
    1e20:	10c20316 	blt	r2,r3,2630 <___vfprintf_internal_r+0x1610>
    1e24:	4a400204 	addi	r9,r9,8
    1e28:	d8812417 	ldw	r2,1168(sp)
    1e2c:	d8c13217 	ldw	r3,1224(sp)
    1e30:	10c00216 	blt	r2,r3,1e3c <___vfprintf_internal_r+0xe1c>
    1e34:	8080004c 	andi	r2,r16,1
    1e38:	103f6826 	beq	r2,zero,1bdc <___vfprintf_internal_r+0xbbc>
    1e3c:	d8c11c17 	ldw	r3,1136(sp)
    1e40:	d9013717 	ldw	r4,1244(sp)
    1e44:	00800044 	movi	r2,1
    1e48:	48800115 	stw	r2,4(r9)
    1e4c:	49000015 	stw	r4,0(r9)
    1e50:	4091883a 	add	r8,r8,r2
    1e54:	1887883a 	add	r3,r3,r2
    1e58:	da011d15 	stw	r8,1140(sp)
    1e5c:	d8c11c15 	stw	r3,1136(sp)
    1e60:	008001c4 	movi	r2,7
    1e64:	10c2ce16 	blt	r2,r3,29a0 <___vfprintf_internal_r+0x1980>
    1e68:	4a400204 	addi	r9,r9,8
    1e6c:	d8813217 	ldw	r2,1224(sp)
    1e70:	14bfffc4 	addi	r18,r2,-1
    1e74:	04bf590e 	bge	zero,r18,1bdc <___vfprintf_internal_r+0xbbc>
    1e78:	04c00404 	movi	r19,16
    1e7c:	d8c11c17 	ldw	r3,1136(sp)
    1e80:	05000074 	movhi	r20,1
    1e84:	a534e284 	addi	r20,r20,-11382
    1e88:	9c818a0e 	bge	r19,r18,24b4 <___vfprintf_internal_r+0x1494>
    1e8c:	058001c4 	movi	r22,7
    1e90:	ddc12917 	ldw	r23,1188(sp)
    1e94:	00000306 	br	1ea4 <___vfprintf_internal_r+0xe84>
    1e98:	4a400204 	addi	r9,r9,8
    1e9c:	94bffc04 	addi	r18,r18,-16
    1ea0:	9c81840e 	bge	r19,r18,24b4 <___vfprintf_internal_r+0x1494>
    1ea4:	4d000015 	stw	r20,0(r9)
    1ea8:	4cc00115 	stw	r19,4(r9)
    1eac:	42000404 	addi	r8,r8,16
    1eb0:	18c00044 	addi	r3,r3,1
    1eb4:	da011d15 	stw	r8,1140(sp)
    1eb8:	d8c11c15 	stw	r3,1136(sp)
    1ebc:	b0fff60e 	bge	r22,r3,1e98 <___vfprintf_internal_r+0xe78>
    1ec0:	8809883a 	mov	r4,r17
    1ec4:	b80b883a 	mov	r5,r23
    1ec8:	d9811b04 	addi	r6,sp,1132
    1ecc:	0000fec0 	call	fec <__sprint_r>
    1ed0:	103d991e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1ed4:	da011d17 	ldw	r8,1140(sp)
    1ed8:	d8c11c17 	ldw	r3,1136(sp)
    1edc:	da400404 	addi	r9,sp,16
    1ee0:	003fee06 	br	1e9c <___vfprintf_internal_r+0xe7c>
    1ee4:	d8812e17 	ldw	r2,1208(sp)
    1ee8:	d9012817 	ldw	r4,1184(sp)
    1eec:	112fc83a 	sub	r23,r2,r4
    1ef0:	05ff000e 	bge	zero,r23,1af4 <___vfprintf_internal_r+0xad4>
    1ef4:	07000404 	movi	fp,16
    1ef8:	05000074 	movhi	r20,1
    1efc:	a534e284 	addi	r20,r20,-11382
    1f00:	e5c01d0e 	bge	fp,r23,1f78 <___vfprintf_internal_r+0xf58>
    1f04:	dc812a15 	stw	r18,1192(sp)
    1f08:	058001c4 	movi	r22,7
    1f0c:	a025883a 	mov	r18,r20
    1f10:	8029883a 	mov	r20,r16
    1f14:	dc012917 	ldw	r16,1188(sp)
    1f18:	00000306 	br	1f28 <___vfprintf_internal_r+0xf08>
    1f1c:	bdfffc04 	addi	r23,r23,-16
    1f20:	4a400204 	addi	r9,r9,8
    1f24:	e5c0110e 	bge	fp,r23,1f6c <___vfprintf_internal_r+0xf4c>
    1f28:	4c800015 	stw	r18,0(r9)
    1f2c:	4f000115 	stw	fp,4(r9)
    1f30:	42000404 	addi	r8,r8,16
    1f34:	18c00044 	addi	r3,r3,1
    1f38:	da011d15 	stw	r8,1140(sp)
    1f3c:	d8c11c15 	stw	r3,1136(sp)
    1f40:	b0fff60e 	bge	r22,r3,1f1c <___vfprintf_internal_r+0xefc>
    1f44:	8809883a 	mov	r4,r17
    1f48:	800b883a 	mov	r5,r16
    1f4c:	d9811b04 	addi	r6,sp,1132
    1f50:	0000fec0 	call	fec <__sprint_r>
    1f54:	103d781e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    1f58:	bdfffc04 	addi	r23,r23,-16
    1f5c:	da011d17 	ldw	r8,1140(sp)
    1f60:	d8c11c17 	ldw	r3,1136(sp)
    1f64:	da400404 	addi	r9,sp,16
    1f68:	e5ffef16 	blt	fp,r23,1f28 <___vfprintf_internal_r+0xf08>
    1f6c:	a021883a 	mov	r16,r20
    1f70:	9029883a 	mov	r20,r18
    1f74:	dc812a17 	ldw	r18,1192(sp)
    1f78:	4d000015 	stw	r20,0(r9)
    1f7c:	4dc00115 	stw	r23,4(r9)
    1f80:	45d1883a 	add	r8,r8,r23
    1f84:	18c00044 	addi	r3,r3,1
    1f88:	da011d15 	stw	r8,1140(sp)
    1f8c:	d8c11c15 	stw	r3,1136(sp)
    1f90:	008001c4 	movi	r2,7
    1f94:	10c13616 	blt	r2,r3,2470 <___vfprintf_internal_r+0x1450>
    1f98:	4a400204 	addi	r9,r9,8
    1f9c:	003ed506 	br	1af4 <___vfprintf_internal_r+0xad4>
    1fa0:	d9412917 	ldw	r5,1188(sp)
    1fa4:	8809883a 	mov	r4,r17
    1fa8:	d9811b04 	addi	r6,sp,1132
    1fac:	0000fec0 	call	fec <__sprint_r>
    1fb0:	103f4226 	beq	r2,zero,1cbc <___vfprintf_internal_r+0xc9c>
    1fb4:	003d6006 	br	1538 <___vfprintf_internal_r+0x518>
    1fb8:	d9013217 	ldw	r4,1224(sp)
    1fbc:	00800044 	movi	r2,1
    1fc0:	4cc00015 	stw	r19,0(r9)
    1fc4:	1101000e 	bge	r2,r4,23c8 <___vfprintf_internal_r+0x13a8>
    1fc8:	00800044 	movi	r2,1
    1fcc:	48800115 	stw	r2,4(r9)
    1fd0:	4091883a 	add	r8,r8,r2
    1fd4:	1887883a 	add	r3,r3,r2
    1fd8:	da011d15 	stw	r8,1140(sp)
    1fdc:	d8c11c15 	stw	r3,1136(sp)
    1fe0:	008001c4 	movi	r2,7
    1fe4:	10c10c16 	blt	r2,r3,2418 <___vfprintf_internal_r+0x13f8>
    1fe8:	4a400204 	addi	r9,r9,8
    1fec:	d8813717 	ldw	r2,1244(sp)
    1ff0:	48800015 	stw	r2,0(r9)
    1ff4:	00800044 	movi	r2,1
    1ff8:	48800115 	stw	r2,4(r9)
    1ffc:	4091883a 	add	r8,r8,r2
    2000:	1887883a 	add	r3,r3,r2
    2004:	da011d15 	stw	r8,1140(sp)
    2008:	d8c11c15 	stw	r3,1136(sp)
    200c:	008001c4 	movi	r2,7
    2010:	10c10a16 	blt	r2,r3,243c <___vfprintf_internal_r+0x141c>
    2014:	4c800204 	addi	r18,r9,8
    2018:	d9013317 	ldw	r4,1228(sp)
    201c:	d9413417 	ldw	r5,1232(sp)
    2020:	000d883a 	mov	r6,zero
    2024:	000f883a 	mov	r7,zero
    2028:	d8c13b15 	stw	r3,1260(sp)
    202c:	da013a15 	stw	r8,1256(sp)
    2030:	0009b240 	call	9b24 <__nedf2>
    2034:	d8c13b17 	ldw	r3,1260(sp)
    2038:	da013a17 	ldw	r8,1256(sp)
    203c:	1000ba26 	beq	r2,zero,2328 <___vfprintf_internal_r+0x1308>
    2040:	d9013217 	ldw	r4,1224(sp)
    2044:	9cc00044 	addi	r19,r19,1
    2048:	94c00015 	stw	r19,0(r18)
    204c:	20bfffc4 	addi	r2,r4,-1
    2050:	90800115 	stw	r2,4(r18)
    2054:	4091883a 	add	r8,r8,r2
    2058:	18c00044 	addi	r3,r3,1
    205c:	da011d15 	stw	r8,1140(sp)
    2060:	d8c11c15 	stw	r3,1136(sp)
    2064:	008001c4 	movi	r2,7
    2068:	10c0e216 	blt	r2,r3,23f4 <___vfprintf_internal_r+0x13d4>
    206c:	94800204 	addi	r18,r18,8
    2070:	d9013517 	ldw	r4,1236(sp)
    2074:	d8811fc4 	addi	r2,sp,1151
    2078:	90800015 	stw	r2,0(r18)
    207c:	91000115 	stw	r4,4(r18)
    2080:	4111883a 	add	r8,r8,r4
    2084:	18c00044 	addi	r3,r3,1
    2088:	da011d15 	stw	r8,1140(sp)
    208c:	d8c11c15 	stw	r3,1136(sp)
    2090:	008001c4 	movi	r2,7
    2094:	10ff2316 	blt	r2,r3,1d24 <___vfprintf_internal_r+0xd04>
    2098:	92400204 	addi	r9,r18,8
    209c:	003ecf06 	br	1bdc <___vfprintf_internal_r+0xbbc>
    20a0:	d9412917 	ldw	r5,1188(sp)
    20a4:	8809883a 	mov	r4,r17
    20a8:	d9811b04 	addi	r6,sp,1132
    20ac:	0000fec0 	call	fec <__sprint_r>
    20b0:	103d211e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    20b4:	da011d17 	ldw	r8,1140(sp)
    20b8:	d8c11c17 	ldw	r3,1136(sp)
    20bc:	da400404 	addi	r9,sp,16
    20c0:	003eba06 	br	1bac <___vfprintf_internal_r+0xb8c>
    20c4:	d9412917 	ldw	r5,1188(sp)
    20c8:	8809883a 	mov	r4,r17
    20cc:	d9811b04 	addi	r6,sp,1132
    20d0:	0000fec0 	call	fec <__sprint_r>
    20d4:	103d181e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    20d8:	da011d17 	ldw	r8,1140(sp)
    20dc:	d8c11c17 	ldw	r3,1136(sp)
    20e0:	da400404 	addi	r9,sp,16
    20e4:	003e8006 	br	1ae8 <___vfprintf_internal_r+0xac8>
    20e8:	d9412917 	ldw	r5,1188(sp)
    20ec:	8809883a 	mov	r4,r17
    20f0:	d9811b04 	addi	r6,sp,1132
    20f4:	0000fec0 	call	fec <__sprint_r>
    20f8:	103d0f1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    20fc:	da011d17 	ldw	r8,1140(sp)
    2100:	d8c11c17 	ldw	r3,1136(sp)
    2104:	da400404 	addi	r9,sp,16
    2108:	003e6a06 	br	1ab4 <___vfprintf_internal_r+0xa94>
    210c:	d9413617 	ldw	r5,1240(sp)
    2110:	d8810dc4 	addi	r2,sp,1079
    2114:	b8c003cc 	andi	r3,r23,15
    2118:	b008973a 	slli	r4,r22,28
    211c:	28c7883a 	add	r3,r5,r3
    2120:	b82ed13a 	srli	r23,r23,4
    2124:	18c00003 	ldbu	r3,0(r3)
    2128:	b02cd13a 	srli	r22,r22,4
    212c:	25eeb03a 	or	r23,r4,r23
    2130:	10c00005 	stb	r3,0(r2)
    2134:	bd86b03a 	or	r3,r23,r22
    2138:	1027883a 	mov	r19,r2
    213c:	10bfffc4 	addi	r2,r2,-1
    2140:	183ff41e 	bne	r3,zero,2114 <___vfprintf_internal_r+0x10f4>
    2144:	003f1a06 	br	1db0 <___vfprintf_internal_r+0xd90>
    2148:	d8012b15 	stw	zero,1196(sp)
    214c:	dcc10e04 	addi	r19,sp,1080
    2150:	003d3a06 	br	163c <___vfprintf_internal_r+0x61c>
    2154:	b0025426 	beq	r22,zero,2aa8 <___vfprintf_internal_r+0x1a88>
    2158:	b807883a 	mov	r3,r23
    215c:	d8810dc4 	addi	r2,sp,1079
    2160:	882f883a 	mov	r23,r17
    2164:	04c00244 	movi	r19,9
    2168:	8023883a 	mov	r17,r16
    216c:	da412815 	stw	r9,1184(sp)
    2170:	1821883a 	mov	r16,r3
    2174:	8009883a 	mov	r4,r16
    2178:	b00b883a 	mov	r5,r22
    217c:	01800284 	movi	r6,10
    2180:	000f883a 	mov	r7,zero
    2184:	1029883a 	mov	r20,r2
    2188:	0008c000 	call	8c00 <__umoddi3>
    218c:	10800c04 	addi	r2,r2,48
    2190:	8009883a 	mov	r4,r16
    2194:	b00b883a 	mov	r5,r22
    2198:	a0800005 	stb	r2,0(r20)
    219c:	01800284 	movi	r6,10
    21a0:	000f883a 	mov	r7,zero
    21a4:	00085b00 	call	85b0 <__udivdi3>
    21a8:	1021883a 	mov	r16,r2
    21ac:	182d883a 	mov	r22,r3
    21b0:	a0bfffc4 	addi	r2,r20,-1
    21b4:	183fef1e 	bne	r3,zero,2174 <___vfprintf_internal_r+0x1154>
    21b8:	9c3fee36 	bltu	r19,r16,2174 <___vfprintf_internal_r+0x1154>
    21bc:	da412817 	ldw	r9,1184(sp)
    21c0:	8005883a 	mov	r2,r16
    21c4:	8821883a 	mov	r16,r17
    21c8:	b823883a 	mov	r17,r23
    21cc:	102f883a 	mov	r23,r2
    21d0:	d8812717 	ldw	r2,1180(sp)
    21d4:	a4ffffc4 	addi	r19,r20,-1
    21d8:	bdc00c04 	addi	r23,r23,48
    21dc:	14c5c83a 	sub	r2,r2,r19
    21e0:	a5ffffc5 	stb	r23,-1(r20)
    21e4:	d8812b15 	stw	r2,1196(sp)
    21e8:	003d1406 	br	163c <___vfprintf_internal_r+0x61c>
    21ec:	00c00044 	movi	r3,1
    21f0:	bd84b03a 	or	r2,r23,r22
    21f4:	003d0306 	br	1604 <___vfprintf_internal_r+0x5e4>
    21f8:	dc812417 	ldw	r18,1168(sp)
    21fc:	0481140e 	bge	zero,r18,2650 <___vfprintf_internal_r+0x1630>
    2200:	d9013217 	ldw	r4,1224(sp)
    2204:	4cc00015 	stw	r19,0(r9)
    2208:	9100ec16 	blt	r18,r4,25bc <___vfprintf_internal_r+0x159c>
    220c:	49000115 	stw	r4,4(r9)
    2210:	4111883a 	add	r8,r8,r4
    2214:	18c00044 	addi	r3,r3,1
    2218:	da011d15 	stw	r8,1140(sp)
    221c:	d8c11c15 	stw	r3,1136(sp)
    2220:	008001c4 	movi	r2,7
    2224:	10c23616 	blt	r2,r3,2b00 <___vfprintf_internal_r+0x1ae0>
    2228:	4a400204 	addi	r9,r9,8
    222c:	d8813217 	ldw	r2,1224(sp)
    2230:	90a5c83a 	sub	r18,r18,r2
    2234:	04beae0e 	bge	zero,r18,1cf0 <___vfprintf_internal_r+0xcd0>
    2238:	04c00404 	movi	r19,16
    223c:	d8c11c17 	ldw	r3,1136(sp)
    2240:	05000074 	movhi	r20,1
    2244:	a534e284 	addi	r20,r20,-11382
    2248:	9c81dd0e 	bge	r19,r18,29c0 <___vfprintf_internal_r+0x19a0>
    224c:	058001c4 	movi	r22,7
    2250:	ddc12917 	ldw	r23,1188(sp)
    2254:	00000306 	br	2264 <___vfprintf_internal_r+0x1244>
    2258:	4a400204 	addi	r9,r9,8
    225c:	94bffc04 	addi	r18,r18,-16
    2260:	9c81d70e 	bge	r19,r18,29c0 <___vfprintf_internal_r+0x19a0>
    2264:	4d000015 	stw	r20,0(r9)
    2268:	4cc00115 	stw	r19,4(r9)
    226c:	42000404 	addi	r8,r8,16
    2270:	18c00044 	addi	r3,r3,1
    2274:	da011d15 	stw	r8,1140(sp)
    2278:	d8c11c15 	stw	r3,1136(sp)
    227c:	b0fff60e 	bge	r22,r3,2258 <___vfprintf_internal_r+0x1238>
    2280:	8809883a 	mov	r4,r17
    2284:	b80b883a 	mov	r5,r23
    2288:	d9811b04 	addi	r6,sp,1132
    228c:	0000fec0 	call	fec <__sprint_r>
    2290:	103ca91e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2294:	da011d17 	ldw	r8,1140(sp)
    2298:	d8c11c17 	ldw	r3,1136(sp)
    229c:	da400404 	addi	r9,sp,16
    22a0:	003fee06 	br	225c <___vfprintf_internal_r+0x123c>
    22a4:	d9412917 	ldw	r5,1188(sp)
    22a8:	8809883a 	mov	r4,r17
    22ac:	d9811b04 	addi	r6,sp,1132
    22b0:	0000fec0 	call	fec <__sprint_r>
    22b4:	103ca01e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    22b8:	da011d17 	ldw	r8,1140(sp)
    22bc:	d8c11c17 	ldw	r3,1136(sp)
    22c0:	da400404 	addi	r9,sp,16
    22c4:	003dee06 	br	1a80 <___vfprintf_internal_r+0xa60>
    22c8:	00c00084 	movi	r3,2
    22cc:	bd84b03a 	or	r2,r23,r22
    22d0:	d8012585 	stb	zero,1174(sp)
    22d4:	003ccb06 	br	1604 <___vfprintf_internal_r+0x5e4>
    22d8:	8080040c 	andi	r2,r16,16
    22dc:	1000ae26 	beq	r2,zero,2598 <___vfprintf_internal_r+0x1578>
    22e0:	d9012d17 	ldw	r4,1204(sp)
    22e4:	25c00017 	ldw	r23,0(r4)
    22e8:	21000104 	addi	r4,r4,4
    22ec:	d9012d15 	stw	r4,1204(sp)
    22f0:	b82dd7fa 	srai	r22,r23,31
    22f4:	b005883a 	mov	r2,r22
    22f8:	003cb906 	br	15e0 <___vfprintf_internal_r+0x5c0>
    22fc:	8080040c 	andi	r2,r16,16
    2300:	10007026 	beq	r2,zero,24c4 <___vfprintf_internal_r+0x14a4>
    2304:	d8812d17 	ldw	r2,1204(sp)
    2308:	002d883a 	mov	r22,zero
    230c:	00c00044 	movi	r3,1
    2310:	15c00017 	ldw	r23,0(r2)
    2314:	10800104 	addi	r2,r2,4
    2318:	d8812d15 	stw	r2,1204(sp)
    231c:	d8012585 	stb	zero,1174(sp)
    2320:	b805883a 	mov	r2,r23
    2324:	003cb706 	br	1604 <___vfprintf_internal_r+0x5e4>
    2328:	d8813217 	ldw	r2,1224(sp)
    232c:	14ffffc4 	addi	r19,r2,-1
    2330:	04ff4f0e 	bge	zero,r19,2070 <___vfprintf_internal_r+0x1050>
    2334:	05800404 	movi	r22,16
    2338:	05000074 	movhi	r20,1
    233c:	a534e284 	addi	r20,r20,-11382
    2340:	b4c0470e 	bge	r22,r19,2460 <___vfprintf_internal_r+0x1440>
    2344:	05c001c4 	movi	r23,7
    2348:	df012917 	ldw	fp,1188(sp)
    234c:	00000306 	br	235c <___vfprintf_internal_r+0x133c>
    2350:	94800204 	addi	r18,r18,8
    2354:	9cfffc04 	addi	r19,r19,-16
    2358:	b4c0410e 	bge	r22,r19,2460 <___vfprintf_internal_r+0x1440>
    235c:	95000015 	stw	r20,0(r18)
    2360:	95800115 	stw	r22,4(r18)
    2364:	42000404 	addi	r8,r8,16
    2368:	18c00044 	addi	r3,r3,1
    236c:	da011d15 	stw	r8,1140(sp)
    2370:	d8c11c15 	stw	r3,1136(sp)
    2374:	b8fff60e 	bge	r23,r3,2350 <___vfprintf_internal_r+0x1330>
    2378:	8809883a 	mov	r4,r17
    237c:	e00b883a 	mov	r5,fp
    2380:	d9811b04 	addi	r6,sp,1132
    2384:	0000fec0 	call	fec <__sprint_r>
    2388:	103c6b1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    238c:	da011d17 	ldw	r8,1140(sp)
    2390:	d8c11c17 	ldw	r3,1136(sp)
    2394:	dc800404 	addi	r18,sp,16
    2398:	003fee06 	br	2354 <___vfprintf_internal_r+0x1334>
    239c:	8080040c 	andi	r2,r16,16
    23a0:	10005326 	beq	r2,zero,24f0 <___vfprintf_internal_r+0x14d0>
    23a4:	d8c12d17 	ldw	r3,1204(sp)
    23a8:	002d883a 	mov	r22,zero
    23ac:	1dc00017 	ldw	r23,0(r3)
    23b0:	18c00104 	addi	r3,r3,4
    23b4:	d8c12d15 	stw	r3,1204(sp)
    23b8:	b805883a 	mov	r2,r23
    23bc:	0007883a 	mov	r3,zero
    23c0:	d8012585 	stb	zero,1174(sp)
    23c4:	003c8f06 	br	1604 <___vfprintf_internal_r+0x5e4>
    23c8:	8088703a 	and	r4,r16,r2
    23cc:	203efe1e 	bne	r4,zero,1fc8 <___vfprintf_internal_r+0xfa8>
    23d0:	48800115 	stw	r2,4(r9)
    23d4:	42000044 	addi	r8,r8,1
    23d8:	18c00044 	addi	r3,r3,1
    23dc:	da011d15 	stw	r8,1140(sp)
    23e0:	d8c11c15 	stw	r3,1136(sp)
    23e4:	008001c4 	movi	r2,7
    23e8:	10c00216 	blt	r2,r3,23f4 <___vfprintf_internal_r+0x13d4>
    23ec:	4c800204 	addi	r18,r9,8
    23f0:	003f1f06 	br	2070 <___vfprintf_internal_r+0x1050>
    23f4:	d9412917 	ldw	r5,1188(sp)
    23f8:	8809883a 	mov	r4,r17
    23fc:	d9811b04 	addi	r6,sp,1132
    2400:	0000fec0 	call	fec <__sprint_r>
    2404:	103c4c1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2408:	dc800404 	addi	r18,sp,16
    240c:	da011d17 	ldw	r8,1140(sp)
    2410:	d8c11c17 	ldw	r3,1136(sp)
    2414:	003f1606 	br	2070 <___vfprintf_internal_r+0x1050>
    2418:	d9412917 	ldw	r5,1188(sp)
    241c:	8809883a 	mov	r4,r17
    2420:	d9811b04 	addi	r6,sp,1132
    2424:	0000fec0 	call	fec <__sprint_r>
    2428:	103c431e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    242c:	da011d17 	ldw	r8,1140(sp)
    2430:	d8c11c17 	ldw	r3,1136(sp)
    2434:	da400404 	addi	r9,sp,16
    2438:	003eec06 	br	1fec <___vfprintf_internal_r+0xfcc>
    243c:	d9412917 	ldw	r5,1188(sp)
    2440:	8809883a 	mov	r4,r17
    2444:	d9811b04 	addi	r6,sp,1132
    2448:	0000fec0 	call	fec <__sprint_r>
    244c:	103c3a1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2450:	da011d17 	ldw	r8,1140(sp)
    2454:	d8c11c17 	ldw	r3,1136(sp)
    2458:	dc800404 	addi	r18,sp,16
    245c:	003eee06 	br	2018 <___vfprintf_internal_r+0xff8>
    2460:	95000015 	stw	r20,0(r18)
    2464:	94c00115 	stw	r19,4(r18)
    2468:	44d1883a 	add	r8,r8,r19
    246c:	003efa06 	br	2058 <___vfprintf_internal_r+0x1038>
    2470:	d9412917 	ldw	r5,1188(sp)
    2474:	8809883a 	mov	r4,r17
    2478:	d9811b04 	addi	r6,sp,1132
    247c:	0000fec0 	call	fec <__sprint_r>
    2480:	103c2d1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2484:	da011d17 	ldw	r8,1140(sp)
    2488:	d8c11c17 	ldw	r3,1136(sp)
    248c:	da400404 	addi	r9,sp,16
    2490:	003d9806 	br	1af4 <___vfprintf_internal_r+0xad4>
    2494:	8080100c 	andi	r2,r16,64
    2498:	10011626 	beq	r2,zero,28f4 <___vfprintf_internal_r+0x18d4>
    249c:	d8c12d17 	ldw	r3,1204(sp)
    24a0:	002d883a 	mov	r22,zero
    24a4:	1dc0000b 	ldhu	r23,0(r3)
    24a8:	18c00104 	addi	r3,r3,4
    24ac:	d8c12d15 	stw	r3,1204(sp)
    24b0:	003cc106 	br	17b8 <___vfprintf_internal_r+0x798>
    24b4:	4d000015 	stw	r20,0(r9)
    24b8:	4c800115 	stw	r18,4(r9)
    24bc:	4491883a 	add	r8,r8,r18
    24c0:	003dc006 	br	1bc4 <___vfprintf_internal_r+0xba4>
    24c4:	8080100c 	andi	r2,r16,64
    24c8:	10010126 	beq	r2,zero,28d0 <___vfprintf_internal_r+0x18b0>
    24cc:	d8c12d17 	ldw	r3,1204(sp)
    24d0:	002d883a 	mov	r22,zero
    24d4:	1dc0000b 	ldhu	r23,0(r3)
    24d8:	18c00104 	addi	r3,r3,4
    24dc:	d8c12d15 	stw	r3,1204(sp)
    24e0:	b805883a 	mov	r2,r23
    24e4:	00c00044 	movi	r3,1
    24e8:	d8012585 	stb	zero,1174(sp)
    24ec:	003c4506 	br	1604 <___vfprintf_internal_r+0x5e4>
    24f0:	8080100c 	andi	r2,r16,64
    24f4:	10010526 	beq	r2,zero,290c <___vfprintf_internal_r+0x18ec>
    24f8:	d9012d17 	ldw	r4,1204(sp)
    24fc:	002d883a 	mov	r22,zero
    2500:	0007883a 	mov	r3,zero
    2504:	25c0000b 	ldhu	r23,0(r4)
    2508:	21000104 	addi	r4,r4,4
    250c:	d9012d15 	stw	r4,1204(sp)
    2510:	b805883a 	mov	r2,r23
    2514:	d8012585 	stb	zero,1174(sp)
    2518:	003c3a06 	br	1604 <___vfprintf_internal_r+0x5e4>
    251c:	d8812d17 	ldw	r2,1204(sp)
    2520:	15800017 	ldw	r22,0(r2)
    2524:	15000117 	ldw	r20,4(r2)
    2528:	10800204 	addi	r2,r2,8
    252c:	d8812d15 	stw	r2,1204(sp)
    2530:	dd813315 	stw	r22,1228(sp)
    2534:	dd013415 	stw	r20,1232(sp)
    2538:	003c5906 	br	16a0 <___vfprintf_internal_r+0x680>
    253c:	00c00084 	movi	r3,2
    2540:	d8012585 	stb	zero,1174(sp)
    2544:	003c2f06 	br	1604 <___vfprintf_internal_r+0x5e4>
    2548:	ac800007 	ldb	r18,0(r21)
    254c:	003b1006 	br	1190 <___vfprintf_internal_r+0x170>
    2550:	8080040c 	andi	r2,r16,16
    2554:	1000091e 	bne	r2,zero,257c <___vfprintf_internal_r+0x155c>
    2558:	8400100c 	andi	r16,r16,64
    255c:	80000726 	beq	r16,zero,257c <___vfprintf_internal_r+0x155c>
    2560:	d8c12d17 	ldw	r3,1204(sp)
    2564:	d9012c17 	ldw	r4,1200(sp)
    2568:	18800017 	ldw	r2,0(r3)
    256c:	18c00104 	addi	r3,r3,4
    2570:	d8c12d15 	stw	r3,1204(sp)
    2574:	1100000d 	sth	r4,0(r2)
    2578:	003adf06 	br	10f8 <___vfprintf_internal_r+0xd8>
    257c:	d8c12d17 	ldw	r3,1204(sp)
    2580:	d9012c17 	ldw	r4,1200(sp)
    2584:	18800017 	ldw	r2,0(r3)
    2588:	18c00104 	addi	r3,r3,4
    258c:	d8c12d15 	stw	r3,1204(sp)
    2590:	11000015 	stw	r4,0(r2)
    2594:	003ad806 	br	10f8 <___vfprintf_internal_r+0xd8>
    2598:	8080100c 	andi	r2,r16,64
    259c:	1000c526 	beq	r2,zero,28b4 <___vfprintf_internal_r+0x1894>
    25a0:	d8812d17 	ldw	r2,1204(sp)
    25a4:	15c0000f 	ldh	r23,0(r2)
    25a8:	10800104 	addi	r2,r2,4
    25ac:	d8812d15 	stw	r2,1204(sp)
    25b0:	b82dd7fa 	srai	r22,r23,31
    25b4:	b005883a 	mov	r2,r22
    25b8:	003c0906 	br	15e0 <___vfprintf_internal_r+0x5c0>
    25bc:	4c800115 	stw	r18,4(r9)
    25c0:	9211883a 	add	r8,r18,r8
    25c4:	18c00044 	addi	r3,r3,1
    25c8:	da011d15 	stw	r8,1140(sp)
    25cc:	d8c11c15 	stw	r3,1136(sp)
    25d0:	008001c4 	movi	r2,7
    25d4:	10c14016 	blt	r2,r3,2ad8 <___vfprintf_internal_r+0x1ab8>
    25d8:	4a400204 	addi	r9,r9,8
    25dc:	d8813717 	ldw	r2,1244(sp)
    25e0:	9ca7883a 	add	r19,r19,r18
    25e4:	48800015 	stw	r2,0(r9)
    25e8:	00800044 	movi	r2,1
    25ec:	48800115 	stw	r2,4(r9)
    25f0:	4091883a 	add	r8,r8,r2
    25f4:	1887883a 	add	r3,r3,r2
    25f8:	da011d15 	stw	r8,1140(sp)
    25fc:	d8c11c15 	stw	r3,1136(sp)
    2600:	008001c4 	movi	r2,7
    2604:	10c12c16 	blt	r2,r3,2ab8 <___vfprintf_internal_r+0x1a98>
    2608:	4a400204 	addi	r9,r9,8
    260c:	d9013217 	ldw	r4,1224(sp)
    2610:	da011d17 	ldw	r8,1140(sp)
    2614:	d8c11c17 	ldw	r3,1136(sp)
    2618:	24a5c83a 	sub	r18,r4,r18
    261c:	4cc00015 	stw	r19,0(r9)
    2620:	003fa506 	br	24b8 <___vfprintf_internal_r+0x1498>
    2624:	04c00074 	movhi	r19,1
    2628:	9cf4cf04 	addi	r19,r19,-11460
    262c:	003c2e06 	br	16e8 <___vfprintf_internal_r+0x6c8>
    2630:	d9412917 	ldw	r5,1188(sp)
    2634:	8809883a 	mov	r4,r17
    2638:	d9811b04 	addi	r6,sp,1132
    263c:	0000fec0 	call	fec <__sprint_r>
    2640:	103bbd1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2644:	da011d17 	ldw	r8,1140(sp)
    2648:	da400404 	addi	r9,sp,16
    264c:	003df606 	br	1e28 <___vfprintf_internal_r+0xe08>
    2650:	00800074 	movhi	r2,1
    2654:	10b4de04 	addi	r2,r2,-11400
    2658:	48800015 	stw	r2,0(r9)
    265c:	00800044 	movi	r2,1
    2660:	48800115 	stw	r2,4(r9)
    2664:	4091883a 	add	r8,r8,r2
    2668:	1887883a 	add	r3,r3,r2
    266c:	da011d15 	stw	r8,1140(sp)
    2670:	d8c11c15 	stw	r3,1136(sp)
    2674:	008001c4 	movi	r2,7
    2678:	10c0bc16 	blt	r2,r3,296c <___vfprintf_internal_r+0x194c>
    267c:	4a400204 	addi	r9,r9,8
    2680:	9000041e 	bne	r18,zero,2694 <___vfprintf_internal_r+0x1674>
    2684:	d8c13217 	ldw	r3,1224(sp)
    2688:	1800021e 	bne	r3,zero,2694 <___vfprintf_internal_r+0x1674>
    268c:	8080004c 	andi	r2,r16,1
    2690:	103d5226 	beq	r2,zero,1bdc <___vfprintf_internal_r+0xbbc>
    2694:	d8c11c17 	ldw	r3,1136(sp)
    2698:	d9013717 	ldw	r4,1244(sp)
    269c:	00800044 	movi	r2,1
    26a0:	48800115 	stw	r2,4(r9)
    26a4:	49000015 	stw	r4,0(r9)
    26a8:	4091883a 	add	r8,r8,r2
    26ac:	1887883a 	add	r3,r3,r2
    26b0:	da011d15 	stw	r8,1140(sp)
    26b4:	d8c11c15 	stw	r3,1136(sp)
    26b8:	008001c4 	movi	r2,7
    26bc:	10c14516 	blt	r2,r3,2bd4 <___vfprintf_internal_r+0x1bb4>
    26c0:	4a400204 	addi	r9,r9,8
    26c4:	04a5c83a 	sub	r18,zero,r18
    26c8:	0480d70e 	bge	zero,r18,2a28 <___vfprintf_internal_r+0x1a08>
    26cc:	05800404 	movi	r22,16
    26d0:	05000074 	movhi	r20,1
    26d4:	a534e284 	addi	r20,r20,-11382
    26d8:	b480db0e 	bge	r22,r18,2a48 <___vfprintf_internal_r+0x1a28>
    26dc:	05c001c4 	movi	r23,7
    26e0:	df012917 	ldw	fp,1188(sp)
    26e4:	00000306 	br	26f4 <___vfprintf_internal_r+0x16d4>
    26e8:	4a400204 	addi	r9,r9,8
    26ec:	94bffc04 	addi	r18,r18,-16
    26f0:	b480d50e 	bge	r22,r18,2a48 <___vfprintf_internal_r+0x1a28>
    26f4:	4d000015 	stw	r20,0(r9)
    26f8:	4d800115 	stw	r22,4(r9)
    26fc:	42000404 	addi	r8,r8,16
    2700:	18c00044 	addi	r3,r3,1
    2704:	da011d15 	stw	r8,1140(sp)
    2708:	d8c11c15 	stw	r3,1136(sp)
    270c:	b8fff60e 	bge	r23,r3,26e8 <___vfprintf_internal_r+0x16c8>
    2710:	8809883a 	mov	r4,r17
    2714:	e00b883a 	mov	r5,fp
    2718:	d9811b04 	addi	r6,sp,1132
    271c:	0000fec0 	call	fec <__sprint_r>
    2720:	103b851e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2724:	da011d17 	ldw	r8,1140(sp)
    2728:	d8c11c17 	ldw	r3,1136(sp)
    272c:	da400404 	addi	r9,sp,16
    2730:	003fee06 	br	26ec <___vfprintf_internal_r+0x16cc>
    2734:	da413c15 	stw	r9,1264(sp)
    2738:	0007eac0 	call	7eac <__isnand>
    273c:	da413c17 	ldw	r9,1264(sp)
    2740:	10007e1e 	bne	r2,zero,293c <___vfprintf_internal_r+0x191c>
    2744:	00bfffc4 	movi	r2,-1
    2748:	e0816a26 	beq	fp,r2,2cf4 <___vfprintf_internal_r+0x1cd4>
    274c:	008019c4 	movi	r2,103
    2750:	90816526 	beq	r18,r2,2ce8 <___vfprintf_internal_r+0x1cc8>
    2754:	008011c4 	movi	r2,71
    2758:	90816326 	beq	r18,r2,2ce8 <___vfprintf_internal_r+0x1cc8>
    275c:	80c04014 	ori	r3,r16,256
    2760:	d8c12a15 	stw	r3,1192(sp)
    2764:	a0016516 	blt	r20,zero,2cfc <___vfprintf_internal_r+0x1cdc>
    2768:	d8012f05 	stb	zero,1212(sp)
    276c:	00801984 	movi	r2,102
    2770:	9080f226 	beq	r18,r2,2b3c <___vfprintf_internal_r+0x1b1c>
    2774:	00801184 	movi	r2,70
    2778:	9080f026 	beq	r18,r2,2b3c <___vfprintf_internal_r+0x1b1c>
    277c:	00801944 	movi	r2,101
    2780:	90818d26 	beq	r18,r2,2db8 <___vfprintf_internal_r+0x1d98>
    2784:	00801144 	movi	r2,69
    2788:	90818b26 	beq	r18,r2,2db8 <___vfprintf_internal_r+0x1d98>
    278c:	e02f883a 	mov	r23,fp
    2790:	d8812404 	addi	r2,sp,1168
    2794:	d8800115 	stw	r2,4(sp)
    2798:	d8812304 	addi	r2,sp,1164
    279c:	d8800215 	stw	r2,8(sp)
    27a0:	d8812204 	addi	r2,sp,1160
    27a4:	ddc00015 	stw	r23,0(sp)
    27a8:	d8800315 	stw	r2,12(sp)
    27ac:	8809883a 	mov	r4,r17
    27b0:	b00b883a 	mov	r5,r22
    27b4:	a00d883a 	mov	r6,r20
    27b8:	01c00084 	movi	r7,2
    27bc:	da413c15 	stw	r9,1264(sp)
    27c0:	00034100 	call	3410 <_dtoa_r>
    27c4:	1027883a 	mov	r19,r2
    27c8:	008019c4 	movi	r2,103
    27cc:	da413c17 	ldw	r9,1264(sp)
    27d0:	9081951e 	bne	r18,r2,2e28 <___vfprintf_internal_r+0x1e08>
    27d4:	8080004c 	andi	r2,r16,1
    27d8:	10017926 	beq	r2,zero,2dc0 <___vfprintf_internal_r+0x1da0>
    27dc:	00801184 	movi	r2,70
    27e0:	9dc7883a 	add	r3,r19,r23
    27e4:	9080e626 	beq	r18,r2,2b80 <___vfprintf_internal_r+0x1b60>
    27e8:	b009883a 	mov	r4,r22
    27ec:	a00b883a 	mov	r5,r20
    27f0:	000d883a 	mov	r6,zero
    27f4:	000f883a 	mov	r7,zero
    27f8:	d8c13b15 	stw	r3,1260(sp)
    27fc:	da413c15 	stw	r9,1264(sp)
    2800:	0009ac80 	call	9ac8 <__eqdf2>
    2804:	d8c13b17 	ldw	r3,1260(sp)
    2808:	da413c17 	ldw	r9,1264(sp)
    280c:	10000726 	beq	r2,zero,282c <___vfprintf_internal_r+0x180c>
    2810:	d8812217 	ldw	r2,1160(sp)
    2814:	10c18a2e 	bgeu	r2,r3,2e40 <___vfprintf_internal_r+0x1e20>
    2818:	01000c04 	movi	r4,48
    281c:	11000005 	stb	r4,0(r2)
    2820:	10800044 	addi	r2,r2,1
    2824:	d8812215 	stw	r2,1160(sp)
    2828:	10fffc1e 	bne	r2,r3,281c <___vfprintf_internal_r+0x17fc>
    282c:	1cc7c83a 	sub	r3,r3,r19
    2830:	d8c13215 	stw	r3,1224(sp)
    2834:	008019c4 	movi	r2,103
    2838:	9080fa26 	beq	r18,r2,2c24 <___vfprintf_internal_r+0x1c04>
    283c:	008011c4 	movi	r2,71
    2840:	9080f826 	beq	r18,r2,2c24 <___vfprintf_internal_r+0x1c04>
    2844:	00801984 	movi	r2,102
    2848:	90818e1e 	bne	r18,r2,2e84 <___vfprintf_internal_r+0x1e64>
    284c:	d8812417 	ldw	r2,1168(sp)
    2850:	d8812b15 	stw	r2,1196(sp)
    2854:	00817c0e 	bge	zero,r2,2e48 <___vfprintf_internal_r+0x1e28>
    2858:	e000021e 	bne	fp,zero,2864 <___vfprintf_internal_r+0x1844>
    285c:	8400004c 	andi	r16,r16,1
    2860:	80000426 	beq	r16,zero,2874 <___vfprintf_internal_r+0x1854>
    2864:	d8812b17 	ldw	r2,1196(sp)
    2868:	e2000044 	addi	r8,fp,1
    286c:	1205883a 	add	r2,r2,r8
    2870:	d8812b15 	stw	r2,1196(sp)
    2874:	d8812815 	stw	r2,1184(sp)
    2878:	10010b16 	blt	r2,zero,2ca8 <___vfprintf_internal_r+0x1c88>
    287c:	ddc12f07 	ldb	r23,1212(sp)
    2880:	b800e426 	beq	r23,zero,2c14 <___vfprintf_internal_r+0x1bf4>
    2884:	00800b44 	movi	r2,45
    2888:	d8812585 	stb	r2,1174(sp)
    288c:	dc012a17 	ldw	r16,1192(sp)
    2890:	d8013115 	stw	zero,1220(sp)
    2894:	003b7306 	br	1664 <___vfprintf_internal_r+0x644>
    2898:	d8812b17 	ldw	r2,1196(sp)
    289c:	d8812815 	stw	r2,1184(sp)
    28a0:	10005716 	blt	r2,zero,2a00 <___vfprintf_internal_r+0x19e0>
    28a4:	d8812583 	ldbu	r2,1174(sp)
    28a8:	ddc12d15 	stw	r23,1204(sp)
    28ac:	d8013115 	stw	zero,1220(sp)
    28b0:	003b6806 	br	1654 <___vfprintf_internal_r+0x634>
    28b4:	d8c12d17 	ldw	r3,1204(sp)
    28b8:	1dc00017 	ldw	r23,0(r3)
    28bc:	18c00104 	addi	r3,r3,4
    28c0:	d8c12d15 	stw	r3,1204(sp)
    28c4:	b82dd7fa 	srai	r22,r23,31
    28c8:	b005883a 	mov	r2,r22
    28cc:	003b4406 	br	15e0 <___vfprintf_internal_r+0x5c0>
    28d0:	d9012d17 	ldw	r4,1204(sp)
    28d4:	002d883a 	mov	r22,zero
    28d8:	00c00044 	movi	r3,1
    28dc:	25c00017 	ldw	r23,0(r4)
    28e0:	21000104 	addi	r4,r4,4
    28e4:	d9012d15 	stw	r4,1204(sp)
    28e8:	b805883a 	mov	r2,r23
    28ec:	d8012585 	stb	zero,1174(sp)
    28f0:	003b4406 	br	1604 <___vfprintf_internal_r+0x5e4>
    28f4:	d9012d17 	ldw	r4,1204(sp)
    28f8:	002d883a 	mov	r22,zero
    28fc:	25c00017 	ldw	r23,0(r4)
    2900:	21000104 	addi	r4,r4,4
    2904:	d9012d15 	stw	r4,1204(sp)
    2908:	003bab06 	br	17b8 <___vfprintf_internal_r+0x798>
    290c:	d8812d17 	ldw	r2,1204(sp)
    2910:	002d883a 	mov	r22,zero
    2914:	0007883a 	mov	r3,zero
    2918:	15c00017 	ldw	r23,0(r2)
    291c:	10800104 	addi	r2,r2,4
    2920:	d8812d15 	stw	r2,1204(sp)
    2924:	d8012585 	stb	zero,1174(sp)
    2928:	b805883a 	mov	r2,r23
    292c:	003b3506 	br	1604 <___vfprintf_internal_r+0x5e4>
    2930:	00ffffc4 	movi	r3,-1
    2934:	b82b883a 	mov	r21,r23
    2938:	003a1606 	br	1194 <___vfprintf_internal_r+0x174>
    293c:	008011c4 	movi	r2,71
    2940:	1480b116 	blt	r2,r18,2c08 <___vfprintf_internal_r+0x1be8>
    2944:	04c00074 	movhi	r19,1
    2948:	9cf4d004 	addi	r19,r19,-11456
    294c:	00c000c4 	movi	r3,3
    2950:	00bfdfc4 	movi	r2,-129
    2954:	80a0703a 	and	r16,r16,r2
    2958:	d8c12815 	stw	r3,1184(sp)
    295c:	d8812583 	ldbu	r2,1174(sp)
    2960:	d8c12b15 	stw	r3,1196(sp)
    2964:	d8013115 	stw	zero,1220(sp)
    2968:	003b3a06 	br	1654 <___vfprintf_internal_r+0x634>
    296c:	d9412917 	ldw	r5,1188(sp)
    2970:	8809883a 	mov	r4,r17
    2974:	d9811b04 	addi	r6,sp,1132
    2978:	0000fec0 	call	fec <__sprint_r>
    297c:	103aee1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2980:	dc812417 	ldw	r18,1168(sp)
    2984:	da011d17 	ldw	r8,1140(sp)
    2988:	da400404 	addi	r9,sp,16
    298c:	003f3c06 	br	2680 <___vfprintf_internal_r+0x1660>
    2990:	ad400044 	addi	r21,r21,1
    2994:	84000814 	ori	r16,r16,32
    2998:	14800047 	ldb	r18,1(r2)
    299c:	0039fc06 	br	1190 <___vfprintf_internal_r+0x170>
    29a0:	d9412917 	ldw	r5,1188(sp)
    29a4:	8809883a 	mov	r4,r17
    29a8:	d9811b04 	addi	r6,sp,1132
    29ac:	0000fec0 	call	fec <__sprint_r>
    29b0:	103ae11e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    29b4:	da011d17 	ldw	r8,1140(sp)
    29b8:	da400404 	addi	r9,sp,16
    29bc:	003d2b06 	br	1e6c <___vfprintf_internal_r+0xe4c>
    29c0:	4d000015 	stw	r20,0(r9)
    29c4:	4c800115 	stw	r18,4(r9)
    29c8:	4491883a 	add	r8,r8,r18
    29cc:	18c00044 	addi	r3,r3,1
    29d0:	da011d15 	stw	r8,1140(sp)
    29d4:	d8c11c15 	stw	r3,1136(sp)
    29d8:	008001c4 	movi	r2,7
    29dc:	10fcbd16 	blt	r2,r3,1cd4 <___vfprintf_internal_r+0xcb4>
    29e0:	4a400204 	addi	r9,r9,8
    29e4:	003cc206 	br	1cf0 <___vfprintf_internal_r+0xcd0>
    29e8:	da413c15 	stw	r9,1264(sp)
    29ec:	0000f600 	call	f60 <strlen>
    29f0:	d8812b15 	stw	r2,1196(sp)
    29f4:	d8812815 	stw	r2,1184(sp)
    29f8:	da413c17 	ldw	r9,1264(sp)
    29fc:	103fa90e 	bge	r2,zero,28a4 <___vfprintf_internal_r+0x1884>
    2a00:	d8012815 	stw	zero,1184(sp)
    2a04:	003fa706 	br	28a4 <___vfprintf_internal_r+0x1884>
    2a08:	d9412917 	ldw	r5,1188(sp)
    2a0c:	8809883a 	mov	r4,r17
    2a10:	d9811b04 	addi	r6,sp,1132
    2a14:	0000fec0 	call	fec <__sprint_r>
    2a18:	103ac71e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2a1c:	da011d17 	ldw	r8,1140(sp)
    2a20:	d8c11c17 	ldw	r3,1136(sp)
    2a24:	da400404 	addi	r9,sp,16
    2a28:	d8813217 	ldw	r2,1224(sp)
    2a2c:	4cc00015 	stw	r19,0(r9)
    2a30:	48800115 	stw	r2,4(r9)
    2a34:	4091883a 	add	r8,r8,r2
    2a38:	003c6206 	br	1bc4 <___vfprintf_internal_r+0xba4>
    2a3c:	00800b44 	movi	r2,45
    2a40:	d8812585 	stb	r2,1174(sp)
    2a44:	003b2406 	br	16d8 <___vfprintf_internal_r+0x6b8>
    2a48:	4d000015 	stw	r20,0(r9)
    2a4c:	4c800115 	stw	r18,4(r9)
    2a50:	4491883a 	add	r8,r8,r18
    2a54:	18c00044 	addi	r3,r3,1
    2a58:	da011d15 	stw	r8,1140(sp)
    2a5c:	d8c11c15 	stw	r3,1136(sp)
    2a60:	008001c4 	movi	r2,7
    2a64:	10ffe816 	blt	r2,r3,2a08 <___vfprintf_internal_r+0x19e8>
    2a68:	4a400204 	addi	r9,r9,8
    2a6c:	003fee06 	br	2a28 <___vfprintf_internal_r+0x1a08>
    2a70:	d8c12b15 	stw	r3,1196(sp)
    2a74:	00800184 	movi	r2,6
    2a78:	10c0062e 	bgeu	r2,r3,2a94 <___vfprintf_internal_r+0x1a74>
    2a7c:	d8812b15 	stw	r2,1196(sp)
    2a80:	d8812815 	stw	r2,1184(sp)
    2a84:	ddc12d15 	stw	r23,1204(sp)
    2a88:	04c00074 	movhi	r19,1
    2a8c:	9cf4dc04 	addi	r19,r19,-11408
    2a90:	0039ca06 	br	11bc <___vfprintf_internal_r+0x19c>
    2a94:	d8812b17 	ldw	r2,1196(sp)
    2a98:	d8812815 	stw	r2,1184(sp)
    2a9c:	103ff90e 	bge	r2,zero,2a84 <___vfprintf_internal_r+0x1a64>
    2aa0:	d8012815 	stw	zero,1184(sp)
    2aa4:	003ff706 	br	2a84 <___vfprintf_internal_r+0x1a64>
    2aa8:	00800244 	movi	r2,9
    2aac:	15fdaa36 	bltu	r2,r23,2158 <___vfprintf_internal_r+0x1138>
    2ab0:	dd010e04 	addi	r20,sp,1080
    2ab4:	003dc606 	br	21d0 <___vfprintf_internal_r+0x11b0>
    2ab8:	d9412917 	ldw	r5,1188(sp)
    2abc:	8809883a 	mov	r4,r17
    2ac0:	d9811b04 	addi	r6,sp,1132
    2ac4:	0000fec0 	call	fec <__sprint_r>
    2ac8:	103a9b1e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2acc:	dc812417 	ldw	r18,1168(sp)
    2ad0:	da400404 	addi	r9,sp,16
    2ad4:	003ecd06 	br	260c <___vfprintf_internal_r+0x15ec>
    2ad8:	d9412917 	ldw	r5,1188(sp)
    2adc:	8809883a 	mov	r4,r17
    2ae0:	d9811b04 	addi	r6,sp,1132
    2ae4:	0000fec0 	call	fec <__sprint_r>
    2ae8:	103a931e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2aec:	dc812417 	ldw	r18,1168(sp)
    2af0:	da011d17 	ldw	r8,1140(sp)
    2af4:	d8c11c17 	ldw	r3,1136(sp)
    2af8:	da400404 	addi	r9,sp,16
    2afc:	003eb706 	br	25dc <___vfprintf_internal_r+0x15bc>
    2b00:	d9412917 	ldw	r5,1188(sp)
    2b04:	8809883a 	mov	r4,r17
    2b08:	d9811b04 	addi	r6,sp,1132
    2b0c:	0000fec0 	call	fec <__sprint_r>
    2b10:	103a891e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2b14:	dc812417 	ldw	r18,1168(sp)
    2b18:	da011d17 	ldw	r8,1140(sp)
    2b1c:	da400404 	addi	r9,sp,16
    2b20:	003dc206 	br	222c <___vfprintf_internal_r+0x120c>
    2b24:	df012815 	stw	fp,1184(sp)
    2b28:	d8812583 	ldbu	r2,1174(sp)
    2b2c:	df012b15 	stw	fp,1196(sp)
    2b30:	ddc12d15 	stw	r23,1204(sp)
    2b34:	d8013115 	stw	zero,1220(sp)
    2b38:	003ac606 	br	1654 <___vfprintf_internal_r+0x634>
    2b3c:	d8812404 	addi	r2,sp,1168
    2b40:	d8800115 	stw	r2,4(sp)
    2b44:	d8812304 	addi	r2,sp,1164
    2b48:	d8800215 	stw	r2,8(sp)
    2b4c:	d8812204 	addi	r2,sp,1160
    2b50:	df000015 	stw	fp,0(sp)
    2b54:	d8800315 	stw	r2,12(sp)
    2b58:	8809883a 	mov	r4,r17
    2b5c:	b00b883a 	mov	r5,r22
    2b60:	a00d883a 	mov	r6,r20
    2b64:	01c000c4 	movi	r7,3
    2b68:	da413c15 	stw	r9,1264(sp)
    2b6c:	00034100 	call	3410 <_dtoa_r>
    2b70:	da413c17 	ldw	r9,1264(sp)
    2b74:	1027883a 	mov	r19,r2
    2b78:	1707883a 	add	r3,r2,fp
    2b7c:	e02f883a 	mov	r23,fp
    2b80:	99000007 	ldb	r4,0(r19)
    2b84:	00800c04 	movi	r2,48
    2b88:	20800326 	beq	r4,r2,2b98 <___vfprintf_internal_r+0x1b78>
    2b8c:	da812417 	ldw	r10,1168(sp)
    2b90:	1a87883a 	add	r3,r3,r10
    2b94:	003f1406 	br	27e8 <___vfprintf_internal_r+0x17c8>
    2b98:	b009883a 	mov	r4,r22
    2b9c:	a00b883a 	mov	r5,r20
    2ba0:	000d883a 	mov	r6,zero
    2ba4:	000f883a 	mov	r7,zero
    2ba8:	d8c13b15 	stw	r3,1260(sp)
    2bac:	da413c15 	stw	r9,1264(sp)
    2bb0:	0009b240 	call	9b24 <__nedf2>
    2bb4:	d8c13b17 	ldw	r3,1260(sp)
    2bb8:	da413c17 	ldw	r9,1264(sp)
    2bbc:	103ff326 	beq	r2,zero,2b8c <___vfprintf_internal_r+0x1b6c>
    2bc0:	00800044 	movi	r2,1
    2bc4:	15d5c83a 	sub	r10,r2,r23
    2bc8:	da812415 	stw	r10,1168(sp)
    2bcc:	1a87883a 	add	r3,r3,r10
    2bd0:	003f0506 	br	27e8 <___vfprintf_internal_r+0x17c8>
    2bd4:	d9412917 	ldw	r5,1188(sp)
    2bd8:	8809883a 	mov	r4,r17
    2bdc:	d9811b04 	addi	r6,sp,1132
    2be0:	0000fec0 	call	fec <__sprint_r>
    2be4:	103a541e 	bne	r2,zero,1538 <___vfprintf_internal_r+0x518>
    2be8:	dc812417 	ldw	r18,1168(sp)
    2bec:	da011d17 	ldw	r8,1140(sp)
    2bf0:	d8c11c17 	ldw	r3,1136(sp)
    2bf4:	da400404 	addi	r9,sp,16
    2bf8:	003eb206 	br	26c4 <___vfprintf_internal_r+0x16a4>
    2bfc:	b82b883a 	mov	r21,r23
    2c00:	0007883a 	mov	r3,zero
    2c04:	00396306 	br	1194 <___vfprintf_internal_r+0x174>
    2c08:	04c00074 	movhi	r19,1
    2c0c:	9cf4d104 	addi	r19,r19,-11452
    2c10:	003f4e06 	br	294c <___vfprintf_internal_r+0x192c>
    2c14:	d8812583 	ldbu	r2,1174(sp)
    2c18:	dc012a17 	ldw	r16,1192(sp)
    2c1c:	d8013115 	stw	zero,1220(sp)
    2c20:	003a8c06 	br	1654 <___vfprintf_internal_r+0x634>
    2c24:	d8812417 	ldw	r2,1168(sp)
    2c28:	d8812b15 	stw	r2,1196(sp)
    2c2c:	1029883a 	mov	r20,r2
    2c30:	00bfff44 	movi	r2,-3
    2c34:	a0800116 	blt	r20,r2,2c3c <___vfprintf_internal_r+0x1c1c>
    2c38:	e5001d0e 	bge	fp,r20,2cb0 <___vfprintf_internal_r+0x1c90>
    2c3c:	94bfff84 	addi	r18,r18,-2
    2c40:	a53fffc4 	addi	r20,r20,-1
    2c44:	dd012415 	stw	r20,1168(sp)
    2c48:	dc811fc5 	stb	r18,1151(sp)
    2c4c:	a0007216 	blt	r20,zero,2e18 <___vfprintf_internal_r+0x1df8>
    2c50:	00800ac4 	movi	r2,43
    2c54:	d8812005 	stb	r2,1152(sp)
    2c58:	00800244 	movi	r2,9
    2c5c:	15003516 	blt	r2,r20,2d34 <___vfprintf_internal_r+0x1d14>
    2c60:	00800c04 	movi	r2,48
    2c64:	a5000c04 	addi	r20,r20,48
    2c68:	d8812045 	stb	r2,1153(sp)
    2c6c:	dd012085 	stb	r20,1154(sp)
    2c70:	d8c120c4 	addi	r3,sp,1155
    2c74:	d8811fc4 	addi	r2,sp,1151
    2c78:	1885c83a 	sub	r2,r3,r2
    2c7c:	d8c13217 	ldw	r3,1224(sp)
    2c80:	d8813515 	stw	r2,1236(sp)
    2c84:	1885883a 	add	r2,r3,r2
    2c88:	d8812b15 	stw	r2,1196(sp)
    2c8c:	00800044 	movi	r2,1
    2c90:	10c0580e 	bge	r2,r3,2df4 <___vfprintf_internal_r+0x1dd4>
    2c94:	d8812b17 	ldw	r2,1196(sp)
    2c98:	10800044 	addi	r2,r2,1
    2c9c:	d8812b15 	stw	r2,1196(sp)
    2ca0:	d8812815 	stw	r2,1184(sp)
    2ca4:	103ef50e 	bge	r2,zero,287c <___vfprintf_internal_r+0x185c>
    2ca8:	d8012815 	stw	zero,1184(sp)
    2cac:	003ef306 	br	287c <___vfprintf_internal_r+0x185c>
    2cb0:	d8812b17 	ldw	r2,1196(sp)
    2cb4:	d8c13217 	ldw	r3,1224(sp)
    2cb8:	10c01416 	blt	r2,r3,2d0c <___vfprintf_internal_r+0x1cec>
    2cbc:	8400004c 	andi	r16,r16,1
    2cc0:	80000326 	beq	r16,zero,2cd0 <___vfprintf_internal_r+0x1cb0>
    2cc4:	d8812b17 	ldw	r2,1196(sp)
    2cc8:	10800044 	addi	r2,r2,1
    2ccc:	d8812b15 	stw	r2,1196(sp)
    2cd0:	d8812815 	stw	r2,1184(sp)
    2cd4:	10001416 	blt	r2,zero,2d28 <___vfprintf_internal_r+0x1d08>
    2cd8:	048019c4 	movi	r18,103
    2cdc:	003ee706 	br	287c <___vfprintf_internal_r+0x185c>
    2ce0:	d8012815 	stw	zero,1184(sp)
    2ce4:	003b1a06 	br	1950 <___vfprintf_internal_r+0x930>
    2ce8:	e03e9c1e 	bne	fp,zero,275c <___vfprintf_internal_r+0x173c>
    2cec:	07000044 	movi	fp,1
    2cf0:	003e9a06 	br	275c <___vfprintf_internal_r+0x173c>
    2cf4:	07000184 	movi	fp,6
    2cf8:	003e9806 	br	275c <___vfprintf_internal_r+0x173c>
    2cfc:	00c00b44 	movi	r3,45
    2d00:	a520003c 	xorhi	r20,r20,32768
    2d04:	d8c12f05 	stb	r3,1212(sp)
    2d08:	003e9806 	br	276c <___vfprintf_internal_r+0x174c>
    2d0c:	05003f0e 	bge	zero,r20,2e0c <___vfprintf_internal_r+0x1dec>
    2d10:	05000044 	movi	r20,1
    2d14:	d8c13217 	ldw	r3,1224(sp)
    2d18:	a0e9883a 	add	r20,r20,r3
    2d1c:	dd012b15 	stw	r20,1196(sp)
    2d20:	dd012815 	stw	r20,1184(sp)
    2d24:	a03fec0e 	bge	r20,zero,2cd8 <___vfprintf_internal_r+0x1cb8>
    2d28:	d8012815 	stw	zero,1184(sp)
    2d2c:	048019c4 	movi	r18,103
    2d30:	003ed206 	br	287c <___vfprintf_internal_r+0x185c>
    2d34:	d8c11f84 	addi	r3,sp,1150
    2d38:	102f883a 	mov	r23,r2
    2d3c:	4839883a 	mov	fp,r9
    2d40:	a009883a 	mov	r4,r20
    2d44:	01400284 	movi	r5,10
    2d48:	182d883a 	mov	r22,r3
    2d4c:	0000d940 	call	d94 <__modsi3>
    2d50:	10800c04 	addi	r2,r2,48
    2d54:	a009883a 	mov	r4,r20
    2d58:	b0800005 	stb	r2,0(r22)
    2d5c:	01400284 	movi	r5,10
    2d60:	0000d440 	call	d44 <__divsi3>
    2d64:	1029883a 	mov	r20,r2
    2d68:	b0ffffc4 	addi	r3,r22,-1
    2d6c:	b8bff416 	blt	r23,r2,2d40 <___vfprintf_internal_r+0x1d20>
    2d70:	11400c04 	addi	r5,r2,48
    2d74:	b17fffc5 	stb	r5,-1(r22)
    2d78:	d8811fc4 	addi	r2,sp,1151
    2d7c:	e013883a 	mov	r9,fp
    2d80:	18803e2e 	bgeu	r3,r2,2e7c <___vfprintf_internal_r+0x1e5c>
    2d84:	b007883a 	mov	r3,r22
    2d88:	d9012044 	addi	r4,sp,1153
    2d8c:	00000206 	br	2d98 <___vfprintf_internal_r+0x1d78>
    2d90:	19400003 	ldbu	r5,0(r3)
    2d94:	18c00044 	addi	r3,r3,1
    2d98:	21400005 	stb	r5,0(r4)
    2d9c:	21000044 	addi	r4,r4,1
    2da0:	10fffb1e 	bne	r2,r3,2d90 <___vfprintf_internal_r+0x1d70>
    2da4:	d8c12004 	addi	r3,sp,1152
    2da8:	1d87c83a 	sub	r3,r3,r22
    2dac:	d9012044 	addi	r4,sp,1153
    2db0:	20c7883a 	add	r3,r4,r3
    2db4:	003fb006 	br	2c78 <___vfprintf_internal_r+0x1c58>
    2db8:	e5c00044 	addi	r23,fp,1
    2dbc:	003e7406 	br	2790 <___vfprintf_internal_r+0x1770>
    2dc0:	d8c12217 	ldw	r3,1160(sp)
    2dc4:	003e9906 	br	282c <___vfprintf_internal_r+0x180c>
    2dc8:	d9012d17 	ldw	r4,1204(sp)
    2dcc:	ac800043 	ldbu	r18,1(r21)
    2dd0:	b82b883a 	mov	r21,r23
    2dd4:	20c00017 	ldw	r3,0(r4)
    2dd8:	20800104 	addi	r2,r4,4
    2ddc:	d8812d15 	stw	r2,1204(sp)
    2de0:	18002116 	blt	r3,zero,2e68 <___vfprintf_internal_r+0x1e48>
    2de4:	94803fcc 	andi	r18,r18,255
    2de8:	9480201c 	xori	r18,r18,128
    2dec:	94bfe004 	addi	r18,r18,-128
    2df0:	0038e706 	br	1190 <___vfprintf_internal_r+0x170>
    2df4:	80a0703a 	and	r16,r16,r2
    2df8:	803fa61e 	bne	r16,zero,2c94 <___vfprintf_internal_r+0x1c74>
    2dfc:	d8812b17 	ldw	r2,1196(sp)
    2e00:	d8812815 	stw	r2,1184(sp)
    2e04:	103e9d0e 	bge	r2,zero,287c <___vfprintf_internal_r+0x185c>
    2e08:	003fa706 	br	2ca8 <___vfprintf_internal_r+0x1c88>
    2e0c:	00800084 	movi	r2,2
    2e10:	1529c83a 	sub	r20,r2,r20
    2e14:	003fbf06 	br	2d14 <___vfprintf_internal_r+0x1cf4>
    2e18:	00800b44 	movi	r2,45
    2e1c:	0529c83a 	sub	r20,zero,r20
    2e20:	d8812005 	stb	r2,1152(sp)
    2e24:	003f8c06 	br	2c58 <___vfprintf_internal_r+0x1c38>
    2e28:	008011c4 	movi	r2,71
    2e2c:	90be6926 	beq	r18,r2,27d4 <___vfprintf_internal_r+0x17b4>
    2e30:	003e6a06 	br	27dc <___vfprintf_internal_r+0x17bc>
    2e34:	00bfffc4 	movi	r2,-1
    2e38:	d8812c15 	stw	r2,1200(sp)
    2e3c:	0039ad06 	br	14f4 <___vfprintf_internal_r+0x4d4>
    2e40:	1007883a 	mov	r3,r2
    2e44:	003e7906 	br	282c <___vfprintf_internal_r+0x180c>
    2e48:	e000021e 	bne	fp,zero,2e54 <___vfprintf_internal_r+0x1e34>
    2e4c:	8400004c 	andi	r16,r16,1
    2e50:	80000e26 	beq	r16,zero,2e8c <___vfprintf_internal_r+0x1e6c>
    2e54:	e7000084 	addi	fp,fp,2
    2e58:	df012b15 	stw	fp,1196(sp)
    2e5c:	df012815 	stw	fp,1184(sp)
    2e60:	e03e860e 	bge	fp,zero,287c <___vfprintf_internal_r+0x185c>
    2e64:	003f9006 	br	2ca8 <___vfprintf_internal_r+0x1c88>
    2e68:	94803fcc 	andi	r18,r18,255
    2e6c:	9480201c 	xori	r18,r18,128
    2e70:	00ffffc4 	movi	r3,-1
    2e74:	94bfe004 	addi	r18,r18,-128
    2e78:	0038c506 	br	1190 <___vfprintf_internal_r+0x170>
    2e7c:	d8c12044 	addi	r3,sp,1153
    2e80:	003f7d06 	br	2c78 <___vfprintf_internal_r+0x1c58>
    2e84:	dd012417 	ldw	r20,1168(sp)
    2e88:	003f6d06 	br	2c40 <___vfprintf_internal_r+0x1c20>
    2e8c:	00c00044 	movi	r3,1
    2e90:	d8c12815 	stw	r3,1184(sp)
    2e94:	d8c12b15 	stw	r3,1196(sp)
    2e98:	003e7806 	br	287c <___vfprintf_internal_r+0x185c>

00002e9c <__vfprintf_internal>:
    2e9c:	00800074 	movhi	r2,1
    2ea0:	10bc1c04 	addi	r2,r2,-3984
    2ea4:	2007883a 	mov	r3,r4
    2ea8:	11000017 	ldw	r4,0(r2)
    2eac:	2805883a 	mov	r2,r5
    2eb0:	300f883a 	mov	r7,r6
    2eb4:	180b883a 	mov	r5,r3
    2eb8:	100d883a 	mov	r6,r2
    2ebc:	00010201 	jmpi	1020 <___vfprintf_internal_r>

00002ec0 <__swsetup_r>:
    2ec0:	00800074 	movhi	r2,1
    2ec4:	10bc1c04 	addi	r2,r2,-3984
    2ec8:	10800017 	ldw	r2,0(r2)
    2ecc:	defffd04 	addi	sp,sp,-12
    2ed0:	dc400115 	stw	r17,4(sp)
    2ed4:	dc000015 	stw	r16,0(sp)
    2ed8:	dfc00215 	stw	ra,8(sp)
    2edc:	2023883a 	mov	r17,r4
    2ee0:	2821883a 	mov	r16,r5
    2ee4:	10000226 	beq	r2,zero,2ef0 <__swsetup_r+0x30>
    2ee8:	10c00e17 	ldw	r3,56(r2)
    2eec:	18003d26 	beq	r3,zero,2fe4 <__swsetup_r+0x124>
    2ef0:	8080030b 	ldhu	r2,12(r16)
    2ef4:	10c0020c 	andi	r3,r2,8
    2ef8:	18ffffcc 	andi	r3,r3,65535
    2efc:	18e0001c 	xori	r3,r3,32768
    2f00:	18e00004 	addi	r3,r3,-32768
    2f04:	18001226 	beq	r3,zero,2f50 <__swsetup_r+0x90>
    2f08:	80c00417 	ldw	r3,16(r16)
    2f0c:	18001f26 	beq	r3,zero,2f8c <__swsetup_r+0xcc>
    2f10:	1100004c 	andi	r4,r2,1
    2f14:	2000261e 	bne	r4,zero,2fb0 <__swsetup_r+0xf0>
    2f18:	1080008c 	andi	r2,r2,2
    2f1c:	10bfffcc 	andi	r2,r2,65535
    2f20:	10a0001c 	xori	r2,r2,32768
    2f24:	10a00004 	addi	r2,r2,-32768
    2f28:	1000311e 	bne	r2,zero,2ff0 <__swsetup_r+0x130>
    2f2c:	80800517 	ldw	r2,20(r16)
    2f30:	80800215 	stw	r2,8(r16)
    2f34:	18002326 	beq	r3,zero,2fc4 <__swsetup_r+0x104>
    2f38:	0005883a 	mov	r2,zero
    2f3c:	dfc00217 	ldw	ra,8(sp)
    2f40:	dc400117 	ldw	r17,4(sp)
    2f44:	dc000017 	ldw	r16,0(sp)
    2f48:	dec00304 	addi	sp,sp,12
    2f4c:	f800283a 	ret
    2f50:	10c0040c 	andi	r3,r2,16
    2f54:	18ffffcc 	andi	r3,r3,65535
    2f58:	18e0001c 	xori	r3,r3,32768
    2f5c:	18e00004 	addi	r3,r3,-32768
    2f60:	18001e26 	beq	r3,zero,2fdc <__swsetup_r+0x11c>
    2f64:	10c0010c 	andi	r3,r2,4
    2f68:	18ffffcc 	andi	r3,r3,65535
    2f6c:	18e0001c 	xori	r3,r3,32768
    2f70:	18e00004 	addi	r3,r3,-32768
    2f74:	1800211e 	bne	r3,zero,2ffc <__swsetup_r+0x13c>
    2f78:	80c00417 	ldw	r3,16(r16)
    2f7c:	11400214 	ori	r5,r2,8
    2f80:	8140030d 	sth	r5,12(r16)
    2f84:	2805883a 	mov	r2,r5
    2f88:	183fe11e 	bne	r3,zero,2f10 <__swsetup_r+0x50>
    2f8c:	1140a00c 	andi	r5,r2,640
    2f90:	01008004 	movi	r4,512
    2f94:	293fde26 	beq	r5,r4,2f10 <__swsetup_r+0x50>
    2f98:	8809883a 	mov	r4,r17
    2f9c:	800b883a 	mov	r5,r16
    2fa0:	0005a5c0 	call	5a5c <__smakebuf_r>
    2fa4:	8080030b 	ldhu	r2,12(r16)
    2fa8:	80c00417 	ldw	r3,16(r16)
    2fac:	003fd806 	br	2f10 <__swsetup_r+0x50>
    2fb0:	80800517 	ldw	r2,20(r16)
    2fb4:	80000215 	stw	zero,8(r16)
    2fb8:	0085c83a 	sub	r2,zero,r2
    2fbc:	80800615 	stw	r2,24(r16)
    2fc0:	183fdd1e 	bne	r3,zero,2f38 <__swsetup_r+0x78>
    2fc4:	8080030b 	ldhu	r2,12(r16)
    2fc8:	1080200c 	andi	r2,r2,128
    2fcc:	10bfffcc 	andi	r2,r2,65535
    2fd0:	10a0001c 	xori	r2,r2,32768
    2fd4:	10a00004 	addi	r2,r2,-32768
    2fd8:	103fd826 	beq	r2,zero,2f3c <__swsetup_r+0x7c>
    2fdc:	00bfffc4 	movi	r2,-1
    2fe0:	003fd606 	br	2f3c <__swsetup_r+0x7c>
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	0004ce80 	call	4ce8 <__sinit>
    2fec:	003fc006 	br	2ef0 <__swsetup_r+0x30>
    2ff0:	0005883a 	mov	r2,zero
    2ff4:	80800215 	stw	r2,8(r16)
    2ff8:	003fce06 	br	2f34 <__swsetup_r+0x74>
    2ffc:	81400c17 	ldw	r5,48(r16)
    3000:	28000626 	beq	r5,zero,301c <__swsetup_r+0x15c>
    3004:	80c01004 	addi	r3,r16,64
    3008:	28c00326 	beq	r5,r3,3018 <__swsetup_r+0x158>
    300c:	8809883a 	mov	r4,r17
    3010:	000506c0 	call	506c <_free_r>
    3014:	8080030b 	ldhu	r2,12(r16)
    3018:	80000c15 	stw	zero,48(r16)
    301c:	80c00417 	ldw	r3,16(r16)
    3020:	013ff6c4 	movi	r4,-37
    3024:	2084703a 	and	r2,r4,r2
    3028:	80000115 	stw	zero,4(r16)
    302c:	80c00015 	stw	r3,0(r16)
    3030:	003fd206 	br	2f7c <__swsetup_r+0xbc>

00003034 <__call_exitprocs>:
    3034:	00800074 	movhi	r2,1
    3038:	10bc1b04 	addi	r2,r2,-3988
    303c:	10800017 	ldw	r2,0(r2)
    3040:	defff304 	addi	sp,sp,-52
    3044:	df000b15 	stw	fp,44(sp)
    3048:	d8800015 	stw	r2,0(sp)
    304c:	10805204 	addi	r2,r2,328
    3050:	dd400815 	stw	r21,32(sp)
    3054:	dfc00c15 	stw	ra,48(sp)
    3058:	ddc00a15 	stw	r23,40(sp)
    305c:	dd800915 	stw	r22,36(sp)
    3060:	dd000715 	stw	r20,28(sp)
    3064:	dcc00615 	stw	r19,24(sp)
    3068:	dc800515 	stw	r18,20(sp)
    306c:	dc400415 	stw	r17,16(sp)
    3070:	dc000315 	stw	r16,12(sp)
    3074:	d9000115 	stw	r4,4(sp)
    3078:	2839883a 	mov	fp,r5
    307c:	d8800215 	stw	r2,8(sp)
    3080:	057fffc4 	movi	r21,-1
    3084:	d8800017 	ldw	r2,0(sp)
    3088:	ddc00217 	ldw	r23,8(sp)
    308c:	14805217 	ldw	r18,328(r2)
    3090:	90001726 	beq	r18,zero,30f0 <__call_exitprocs+0xbc>
    3094:	94400117 	ldw	r17,4(r18)
    3098:	8c3fffc4 	addi	r16,r17,-1
    309c:	80001116 	blt	r16,zero,30e4 <__call_exitprocs+0xb0>
    30a0:	8c400044 	addi	r17,r17,1
    30a4:	8427883a 	add	r19,r16,r16
    30a8:	8c63883a 	add	r17,r17,r17
    30ac:	95802204 	addi	r22,r18,136
    30b0:	9ce7883a 	add	r19,r19,r19
    30b4:	8c63883a 	add	r17,r17,r17
    30b8:	b4e7883a 	add	r19,r22,r19
    30bc:	9463883a 	add	r17,r18,r17
    30c0:	e0001726 	beq	fp,zero,3120 <__call_exitprocs+0xec>
    30c4:	8c87c83a 	sub	r3,r17,r18
    30c8:	b0c7883a 	add	r3,r22,r3
    30cc:	18c01e17 	ldw	r3,120(r3)
    30d0:	1f001326 	beq	r3,fp,3120 <__call_exitprocs+0xec>
    30d4:	843fffc4 	addi	r16,r16,-1
    30d8:	9cffff04 	addi	r19,r19,-4
    30dc:	8c7fff04 	addi	r17,r17,-4
    30e0:	857ff71e 	bne	r16,r21,30c0 <__call_exitprocs+0x8c>
    30e4:	00800034 	movhi	r2,0
    30e8:	10800004 	addi	r2,r2,0
    30ec:	10002a1e 	bne	r2,zero,3198 <__call_exitprocs+0x164>
    30f0:	dfc00c17 	ldw	ra,48(sp)
    30f4:	df000b17 	ldw	fp,44(sp)
    30f8:	ddc00a17 	ldw	r23,40(sp)
    30fc:	dd800917 	ldw	r22,36(sp)
    3100:	dd400817 	ldw	r21,32(sp)
    3104:	dd000717 	ldw	r20,28(sp)
    3108:	dcc00617 	ldw	r19,24(sp)
    310c:	dc800517 	ldw	r18,20(sp)
    3110:	dc400417 	ldw	r17,16(sp)
    3114:	dc000317 	ldw	r16,12(sp)
    3118:	dec00d04 	addi	sp,sp,52
    311c:	f800283a 	ret
    3120:	91000117 	ldw	r4,4(r18)
    3124:	88c00017 	ldw	r3,0(r17)
    3128:	213fffc4 	addi	r4,r4,-1
    312c:	24001526 	beq	r4,r16,3184 <__call_exitprocs+0x150>
    3130:	88000015 	stw	zero,0(r17)
    3134:	183fe726 	beq	r3,zero,30d4 <__call_exitprocs+0xa0>
    3138:	00800044 	movi	r2,1
    313c:	1408983a 	sll	r4,r2,r16
    3140:	91406217 	ldw	r5,392(r18)
    3144:	95000117 	ldw	r20,4(r18)
    3148:	214a703a 	and	r5,r4,r5
    314c:	28000b26 	beq	r5,zero,317c <__call_exitprocs+0x148>
    3150:	91406317 	ldw	r5,396(r18)
    3154:	2148703a 	and	r4,r4,r5
    3158:	20000c1e 	bne	r4,zero,318c <__call_exitprocs+0x158>
    315c:	99400017 	ldw	r5,0(r19)
    3160:	d9000117 	ldw	r4,4(sp)
    3164:	183ee83a 	callr	r3
    3168:	90c00117 	ldw	r3,4(r18)
    316c:	1d3fc51e 	bne	r3,r20,3084 <__call_exitprocs+0x50>
    3170:	b8c00017 	ldw	r3,0(r23)
    3174:	1cbfd726 	beq	r3,r18,30d4 <__call_exitprocs+0xa0>
    3178:	003fc206 	br	3084 <__call_exitprocs+0x50>
    317c:	183ee83a 	callr	r3
    3180:	003ff906 	br	3168 <__call_exitprocs+0x134>
    3184:	94000115 	stw	r16,4(r18)
    3188:	003fea06 	br	3134 <__call_exitprocs+0x100>
    318c:	99000017 	ldw	r4,0(r19)
    3190:	183ee83a 	callr	r3
    3194:	003ff406 	br	3168 <__call_exitprocs+0x134>
    3198:	90c00117 	ldw	r3,4(r18)
    319c:	1800071e 	bne	r3,zero,31bc <__call_exitprocs+0x188>
    31a0:	90c00017 	ldw	r3,0(r18)
    31a4:	18000926 	beq	r3,zero,31cc <__call_exitprocs+0x198>
    31a8:	9009883a 	mov	r4,r18
    31ac:	b8c00015 	stw	r3,0(r23)
    31b0:	00000000 	call	0 <__alt_mem_sdram_controller>
    31b4:	bc800017 	ldw	r18,0(r23)
    31b8:	003fb506 	br	3090 <__call_exitprocs+0x5c>
    31bc:	90c00017 	ldw	r3,0(r18)
    31c0:	902f883a 	mov	r23,r18
    31c4:	1825883a 	mov	r18,r3
    31c8:	003fb106 	br	3090 <__call_exitprocs+0x5c>
    31cc:	0007883a 	mov	r3,zero
    31d0:	003ffb06 	br	31c0 <__call_exitprocs+0x18c>

000031d4 <quorem>:
    31d4:	defff204 	addi	sp,sp,-56
    31d8:	dd000815 	stw	r20,32(sp)
    31dc:	20800417 	ldw	r2,16(r4)
    31e0:	2d000417 	ldw	r20,16(r5)
    31e4:	dcc00715 	stw	r19,28(sp)
    31e8:	dfc00d15 	stw	ra,52(sp)
    31ec:	df000c15 	stw	fp,48(sp)
    31f0:	ddc00b15 	stw	r23,44(sp)
    31f4:	dd800a15 	stw	r22,40(sp)
    31f8:	dd400915 	stw	r21,36(sp)
    31fc:	dc800615 	stw	r18,24(sp)
    3200:	dc400515 	stw	r17,20(sp)
    3204:	dc000415 	stw	r16,16(sp)
    3208:	d9400015 	stw	r5,0(sp)
    320c:	2027883a 	mov	r19,r4
    3210:	15007d16 	blt	r2,r20,3408 <quorem+0x234>
    3214:	a0800104 	addi	r2,r20,4
    3218:	1085883a 	add	r2,r2,r2
    321c:	1085883a 	add	r2,r2,r2
    3220:	28ad883a 	add	r22,r5,r2
    3224:	2085883a 	add	r2,r4,r2
    3228:	10800017 	ldw	r2,0(r2)
    322c:	b1400017 	ldw	r5,0(r22)
    3230:	a53fffc4 	addi	r20,r20,-1
    3234:	1009883a 	mov	r4,r2
    3238:	29400044 	addi	r5,r5,1
    323c:	d8800115 	stw	r2,4(sp)
    3240:	0000df00 	call	df0 <__udivsi3>
    3244:	1025883a 	mov	r18,r2
    3248:	d8800017 	ldw	r2,0(sp)
    324c:	9f000504 	addi	fp,r19,20
    3250:	14000504 	addi	r16,r2,20
    3254:	90003626 	beq	r18,zero,3330 <quorem+0x15c>
    3258:	802b883a 	mov	r21,r16
    325c:	e023883a 	mov	r17,fp
    3260:	0007883a 	mov	r3,zero
    3264:	002f883a 	mov	r23,zero
    3268:	a9800017 	ldw	r6,0(r21)
    326c:	900b883a 	mov	r5,r18
    3270:	d8c00315 	stw	r3,12(sp)
    3274:	313fffcc 	andi	r4,r6,65535
    3278:	d9800215 	stw	r6,8(sp)
    327c:	0000e000 	call	e00 <__mulsi3>
    3280:	d9800217 	ldw	r6,8(sp)
    3284:	d8c00317 	ldw	r3,12(sp)
    3288:	900b883a 	mov	r5,r18
    328c:	3008d43a 	srli	r4,r6,16
    3290:	1887883a 	add	r3,r3,r2
    3294:	d8c00315 	stw	r3,12(sp)
    3298:	0000e000 	call	e00 <__mulsi3>
    329c:	89400017 	ldw	r5,0(r17)
    32a0:	d8c00317 	ldw	r3,12(sp)
    32a4:	ad400104 	addi	r21,r21,4
    32a8:	293fffcc 	andi	r4,r5,65535
    32ac:	1810d43a 	srli	r8,r3,16
    32b0:	25c9883a 	add	r4,r4,r23
    32b4:	18ffffcc 	andi	r3,r3,65535
    32b8:	20c9c83a 	sub	r4,r4,r3
    32bc:	280cd43a 	srli	r6,r5,16
    32c0:	4085883a 	add	r2,r8,r2
    32c4:	2007d43a 	srai	r3,r4,16
    32c8:	117fffcc 	andi	r5,r2,65535
    32cc:	314bc83a 	sub	r5,r6,r5
    32d0:	28cb883a 	add	r5,r5,r3
    32d4:	8940008d 	sth	r5,2(r17)
    32d8:	8900000d 	sth	r4,0(r17)
    32dc:	1006d43a 	srli	r3,r2,16
    32e0:	282fd43a 	srai	r23,r5,16
    32e4:	8c400104 	addi	r17,r17,4
    32e8:	b57fdf2e 	bgeu	r22,r21,3268 <quorem+0x94>
    32ec:	d8c00117 	ldw	r3,4(sp)
    32f0:	18000f1e 	bne	r3,zero,3330 <quorem+0x15c>
    32f4:	a0800144 	addi	r2,r20,5
    32f8:	1085883a 	add	r2,r2,r2
    32fc:	1085883a 	add	r2,r2,r2
    3300:	9887883a 	add	r3,r19,r2
    3304:	18bfff04 	addi	r2,r3,-4
    3308:	e080082e 	bgeu	fp,r2,332c <quorem+0x158>
    330c:	18ffff17 	ldw	r3,-4(r3)
    3310:	18000326 	beq	r3,zero,3320 <quorem+0x14c>
    3314:	00000506 	br	332c <quorem+0x158>
    3318:	10c00017 	ldw	r3,0(r2)
    331c:	1800031e 	bne	r3,zero,332c <quorem+0x158>
    3320:	10bfff04 	addi	r2,r2,-4
    3324:	a53fffc4 	addi	r20,r20,-1
    3328:	e0bffb36 	bltu	fp,r2,3318 <quorem+0x144>
    332c:	9d000415 	stw	r20,16(r19)
    3330:	d9400017 	ldw	r5,0(sp)
    3334:	9809883a 	mov	r4,r19
    3338:	00071740 	call	7174 <__mcmp>
    333c:	10002516 	blt	r2,zero,33d4 <quorem+0x200>
    3340:	94800044 	addi	r18,r18,1
    3344:	e007883a 	mov	r3,fp
    3348:	000d883a 	mov	r6,zero
    334c:	18800017 	ldw	r2,0(r3)
    3350:	82000017 	ldw	r8,0(r16)
    3354:	84000104 	addi	r16,r16,4
    3358:	11ffffcc 	andi	r7,r2,65535
    335c:	413fffcc 	andi	r4,r8,65535
    3360:	398d883a 	add	r6,r7,r6
    3364:	310fc83a 	sub	r7,r6,r4
    3368:	4010d43a 	srli	r8,r8,16
    336c:	100cd43a 	srli	r6,r2,16
    3370:	3809d43a 	srai	r4,r7,16
    3374:	19c0000d 	sth	r7,0(r3)
    3378:	320dc83a 	sub	r6,r6,r8
    337c:	310d883a 	add	r6,r6,r4
    3380:	1980008d 	sth	r6,2(r3)
    3384:	300dd43a 	srai	r6,r6,16
    3388:	18c00104 	addi	r3,r3,4
    338c:	b43fef2e 	bgeu	r22,r16,334c <quorem+0x178>
    3390:	a0800144 	addi	r2,r20,5
    3394:	1085883a 	add	r2,r2,r2
    3398:	1085883a 	add	r2,r2,r2
    339c:	9885883a 	add	r2,r19,r2
    33a0:	10c00017 	ldw	r3,0(r2)
    33a4:	18000b1e 	bne	r3,zero,33d4 <quorem+0x200>
    33a8:	10ffff04 	addi	r3,r2,-4
    33ac:	e0c0082e 	bgeu	fp,r3,33d0 <quorem+0x1fc>
    33b0:	10bfff17 	ldw	r2,-4(r2)
    33b4:	10000326 	beq	r2,zero,33c4 <quorem+0x1f0>
    33b8:	00000506 	br	33d0 <quorem+0x1fc>
    33bc:	18800017 	ldw	r2,0(r3)
    33c0:	1000031e 	bne	r2,zero,33d0 <quorem+0x1fc>
    33c4:	18ffff04 	addi	r3,r3,-4
    33c8:	a53fffc4 	addi	r20,r20,-1
    33cc:	e0fffb36 	bltu	fp,r3,33bc <quorem+0x1e8>
    33d0:	9d000415 	stw	r20,16(r19)
    33d4:	9005883a 	mov	r2,r18
    33d8:	dfc00d17 	ldw	ra,52(sp)
    33dc:	df000c17 	ldw	fp,48(sp)
    33e0:	ddc00b17 	ldw	r23,44(sp)
    33e4:	dd800a17 	ldw	r22,40(sp)
    33e8:	dd400917 	ldw	r21,36(sp)
    33ec:	dd000817 	ldw	r20,32(sp)
    33f0:	dcc00717 	ldw	r19,28(sp)
    33f4:	dc800617 	ldw	r18,24(sp)
    33f8:	dc400517 	ldw	r17,20(sp)
    33fc:	dc000417 	ldw	r16,16(sp)
    3400:	dec00e04 	addi	sp,sp,56
    3404:	f800283a 	ret
    3408:	0005883a 	mov	r2,zero
    340c:	003ff206 	br	33d8 <quorem+0x204>

00003410 <_dtoa_r>:
    3410:	20801017 	ldw	r2,64(r4)
    3414:	deffdf04 	addi	sp,sp,-132
    3418:	dcc01a15 	stw	r19,104(sp)
    341c:	dc801915 	stw	r18,100(sp)
    3420:	dc401815 	stw	r17,96(sp)
    3424:	dc001715 	stw	r16,92(sp)
    3428:	dfc02015 	stw	ra,128(sp)
    342c:	df001f15 	stw	fp,124(sp)
    3430:	ddc01e15 	stw	r23,120(sp)
    3434:	dd801d15 	stw	r22,116(sp)
    3438:	dd401c15 	stw	r21,112(sp)
    343c:	dd001b15 	stw	r20,108(sp)
    3440:	d9400315 	stw	r5,12(sp)
    3444:	d9c00415 	stw	r7,16(sp)
    3448:	2021883a 	mov	r16,r4
    344c:	3025883a 	mov	r18,r6
    3450:	dcc02317 	ldw	r19,140(sp)
    3454:	3023883a 	mov	r17,r6
    3458:	10000826 	beq	r2,zero,347c <_dtoa_r+0x6c>
    345c:	20c01117 	ldw	r3,68(r4)
    3460:	01800044 	movi	r6,1
    3464:	100b883a 	mov	r5,r2
    3468:	30cc983a 	sll	r6,r6,r3
    346c:	10c00115 	stw	r3,4(r2)
    3470:	11800215 	stw	r6,8(r2)
    3474:	00068d00 	call	68d0 <_Bfree>
    3478:	80001015 	stw	zero,64(r16)
    347c:	90002f16 	blt	r18,zero,353c <_dtoa_r+0x12c>
    3480:	98000015 	stw	zero,0(r19)
    3484:	90dffc2c 	andhi	r3,r18,32752
    3488:	009ffc34 	movhi	r2,32752
    348c:	18801c26 	beq	r3,r2,3500 <_dtoa_r+0xf0>
    3490:	d9000317 	ldw	r4,12(sp)
    3494:	880b883a 	mov	r5,r17
    3498:	000d883a 	mov	r6,zero
    349c:	000f883a 	mov	r7,zero
    34a0:	0009ac80 	call	9ac8 <__eqdf2>
    34a4:	10002c1e 	bne	r2,zero,3558 <_dtoa_r+0x148>
    34a8:	d9002217 	ldw	r4,136(sp)
    34ac:	d9c02417 	ldw	r7,144(sp)
    34b0:	00800044 	movi	r2,1
    34b4:	20800015 	stw	r2,0(r4)
    34b8:	38019426 	beq	r7,zero,3b0c <_dtoa_r+0x6fc>
    34bc:	00800074 	movhi	r2,1
    34c0:	10b4de44 	addi	r2,r2,-11399
    34c4:	38800015 	stw	r2,0(r7)
    34c8:	15ffffc4 	addi	r23,r2,-1
    34cc:	b805883a 	mov	r2,r23
    34d0:	dfc02017 	ldw	ra,128(sp)
    34d4:	df001f17 	ldw	fp,124(sp)
    34d8:	ddc01e17 	ldw	r23,120(sp)
    34dc:	dd801d17 	ldw	r22,116(sp)
    34e0:	dd401c17 	ldw	r21,112(sp)
    34e4:	dd001b17 	ldw	r20,108(sp)
    34e8:	dcc01a17 	ldw	r19,104(sp)
    34ec:	dc801917 	ldw	r18,100(sp)
    34f0:	dc401817 	ldw	r17,96(sp)
    34f4:	dc001717 	ldw	r16,92(sp)
    34f8:	dec02104 	addi	sp,sp,132
    34fc:	f800283a 	ret
    3500:	d8c02217 	ldw	r3,136(sp)
    3504:	d9000317 	ldw	r4,12(sp)
    3508:	0089c3c4 	movi	r2,9999
    350c:	18800015 	stw	r2,0(r3)
    3510:	20016c26 	beq	r4,zero,3ac4 <_dtoa_r+0x6b4>
    3514:	05c00074 	movhi	r23,1
    3518:	bdf4ea04 	addi	r23,r23,-11352
    351c:	d9c02417 	ldw	r7,144(sp)
    3520:	383fea26 	beq	r7,zero,34cc <_dtoa_r+0xbc>
    3524:	b88000c7 	ldb	r2,3(r23)
    3528:	10016d1e 	bne	r2,zero,3ae0 <_dtoa_r+0x6d0>
    352c:	b88000c4 	addi	r2,r23,3
    3530:	d8c02417 	ldw	r3,144(sp)
    3534:	18800015 	stw	r2,0(r3)
    3538:	003fe406 	br	34cc <_dtoa_r+0xbc>
    353c:	04600034 	movhi	r17,32768
    3540:	8c7fffc4 	addi	r17,r17,-1
    3544:	9462703a 	and	r17,r18,r17
    3548:	00800044 	movi	r2,1
    354c:	98800015 	stw	r2,0(r19)
    3550:	8825883a 	mov	r18,r17
    3554:	003fcb06 	br	3484 <_dtoa_r+0x74>
    3558:	d9400317 	ldw	r5,12(sp)
    355c:	9028d53a 	srli	r20,r18,20
    3560:	d8800204 	addi	r2,sp,8
    3564:	d8800015 	stw	r2,0(sp)
    3568:	8009883a 	mov	r4,r16
    356c:	880d883a 	mov	r6,r17
    3570:	d9c00104 	addi	r7,sp,4
    3574:	000751c0 	call	751c <__d2b>
    3578:	a501ffcc 	andi	r20,r20,2047
    357c:	1039883a 	mov	fp,r2
    3580:	a001591e 	bne	r20,zero,3ae8 <_dtoa_r+0x6d8>
    3584:	dd400217 	ldw	r21,8(sp)
    3588:	dd000117 	ldw	r20,4(sp)
    358c:	00befbc4 	movi	r2,-1041
    3590:	ad29883a 	add	r20,r21,r20
    3594:	a082d216 	blt	r20,r2,40e0 <_dtoa_r+0xcd0>
    3598:	d8c00317 	ldw	r3,12(sp)
    359c:	013f0384 	movi	r4,-1010
    35a0:	2509c83a 	sub	r4,r4,r20
    35a4:	a0810484 	addi	r2,r20,1042
    35a8:	9124983a 	sll	r18,r18,r4
    35ac:	1884d83a 	srl	r2,r3,r2
    35b0:	9088b03a 	or	r4,r18,r2
    35b4:	0009e4c0 	call	9e4c <__floatunsidf>
    35b8:	1009883a 	mov	r4,r2
    35bc:	017f8434 	movhi	r5,65040
    35c0:	00800044 	movi	r2,1
    35c4:	194b883a 	add	r5,r3,r5
    35c8:	a53fffc4 	addi	r20,r20,-1
    35cc:	d8800f15 	stw	r2,60(sp)
    35d0:	000d883a 	mov	r6,zero
    35d4:	01cffe34 	movhi	r7,16376
    35d8:	00095d00 	call	95d0 <__subdf3>
    35dc:	1009883a 	mov	r4,r2
    35e0:	180b883a 	mov	r5,r3
    35e4:	0198dbf4 	movhi	r6,25455
    35e8:	3190d844 	addi	r6,r6,17249
    35ec:	01cff4f4 	movhi	r7,16339
    35f0:	39e1e9c4 	addi	r7,r7,-30809
    35f4:	00096300 	call	9630 <__muldf3>
    35f8:	180b883a 	mov	r5,r3
    35fc:	01a2d874 	movhi	r6,35681
    3600:	31b22cc4 	addi	r6,r6,-14157
    3604:	01cff1f4 	movhi	r7,16327
    3608:	39e28a04 	addi	r7,r7,-30168
    360c:	1009883a 	mov	r4,r2
    3610:	000957c0 	call	957c <__adddf3>
    3614:	a009883a 	mov	r4,r20
    3618:	1027883a 	mov	r19,r2
    361c:	1825883a 	mov	r18,r3
    3620:	0009ca40 	call	9ca4 <__floatsidf>
    3624:	1009883a 	mov	r4,r2
    3628:	180b883a 	mov	r5,r3
    362c:	019427f4 	movhi	r6,20639
    3630:	319e7ec4 	addi	r6,r6,31227
    3634:	01cff4f4 	movhi	r7,16339
    3638:	39d104c4 	addi	r7,r7,17427
    363c:	00096300 	call	9630 <__muldf3>
    3640:	9809883a 	mov	r4,r19
    3644:	900b883a 	mov	r5,r18
    3648:	100d883a 	mov	r6,r2
    364c:	180f883a 	mov	r7,r3
    3650:	000957c0 	call	957c <__adddf3>
    3654:	1009883a 	mov	r4,r2
    3658:	180b883a 	mov	r5,r3
    365c:	1027883a 	mov	r19,r2
    3660:	1825883a 	mov	r18,r3
    3664:	0009d780 	call	9d78 <__fixdfsi>
    3668:	9809883a 	mov	r4,r19
    366c:	900b883a 	mov	r5,r18
    3670:	000d883a 	mov	r6,zero
    3674:	000f883a 	mov	r7,zero
    3678:	d8800615 	stw	r2,24(sp)
    367c:	0009c480 	call	9c48 <__ltdf2>
    3680:	10027e16 	blt	r2,zero,407c <_dtoa_r+0xc6c>
    3684:	d8c00617 	ldw	r3,24(sp)
    3688:	00800584 	movi	r2,22
    368c:	10c26c36 	bltu	r2,r3,4040 <_dtoa_r+0xc30>
    3690:	180490fa 	slli	r2,r3,3
    3694:	00c00074 	movhi	r3,1
    3698:	18f50f04 	addi	r3,r3,-11204
    369c:	d9800317 	ldw	r6,12(sp)
    36a0:	1885883a 	add	r2,r3,r2
    36a4:	11000017 	ldw	r4,0(r2)
    36a8:	11400117 	ldw	r5,4(r2)
    36ac:	880f883a 	mov	r7,r17
    36b0:	0009b800 	call	9b80 <__gtdf2>
    36b4:	00828f0e 	bge	zero,r2,40f4 <_dtoa_r+0xce4>
    36b8:	d8800617 	ldw	r2,24(sp)
    36bc:	d8000d15 	stw	zero,52(sp)
    36c0:	10bfffc4 	addi	r2,r2,-1
    36c4:	d8800615 	stw	r2,24(sp)
    36c8:	ad29c83a 	sub	r20,r21,r20
    36cc:	a53fffc4 	addi	r20,r20,-1
    36d0:	a0026616 	blt	r20,zero,406c <_dtoa_r+0xc5c>
    36d4:	dd000715 	stw	r20,28(sp)
    36d8:	d8000815 	stw	zero,32(sp)
    36dc:	d8800617 	ldw	r2,24(sp)
    36e0:	10025a16 	blt	r2,zero,404c <_dtoa_r+0xc3c>
    36e4:	d8c00717 	ldw	r3,28(sp)
    36e8:	d8800b15 	stw	r2,44(sp)
    36ec:	d8000a15 	stw	zero,40(sp)
    36f0:	1887883a 	add	r3,r3,r2
    36f4:	d8c00715 	stw	r3,28(sp)
    36f8:	d9c00417 	ldw	r7,16(sp)
    36fc:	00800244 	movi	r2,9
    3700:	11c10536 	bltu	r2,r7,3b18 <_dtoa_r+0x708>
    3704:	00800144 	movi	r2,5
    3708:	11c4c60e 	bge	r2,r7,4a24 <_dtoa_r+0x1614>
    370c:	39ffff04 	addi	r7,r7,-4
    3710:	d9c00415 	stw	r7,16(sp)
    3714:	0027883a 	mov	r19,zero
    3718:	d9c00417 	ldw	r7,16(sp)
    371c:	008000c4 	movi	r2,3
    3720:	3883a226 	beq	r7,r2,45ac <_dtoa_r+0x119c>
    3724:	11c2bc16 	blt	r2,r7,4218 <_dtoa_r+0xe08>
    3728:	00800084 	movi	r2,2
    372c:	3880fb1e 	bne	r7,r2,3b1c <_dtoa_r+0x70c>
    3730:	d8000c15 	stw	zero,48(sp)
    3734:	d9002117 	ldw	r4,132(sp)
    3738:	0103ae0e 	bge	zero,r4,45f4 <_dtoa_r+0x11e4>
    373c:	2025883a 	mov	r18,r4
    3740:	d9000e15 	stw	r4,56(sp)
    3744:	d9000915 	stw	r4,36(sp)
    3748:	80001115 	stw	zero,68(r16)
    374c:	008005c4 	movi	r2,23
    3750:	1484b22e 	bgeu	r2,r18,4a1c <_dtoa_r+0x160c>
    3754:	00c00044 	movi	r3,1
    3758:	00800104 	movi	r2,4
    375c:	1085883a 	add	r2,r2,r2
    3760:	11000504 	addi	r4,r2,20
    3764:	180b883a 	mov	r5,r3
    3768:	18c00044 	addi	r3,r3,1
    376c:	913ffb2e 	bgeu	r18,r4,375c <_dtoa_r+0x34c>
    3770:	81401115 	stw	r5,68(r16)
    3774:	8009883a 	mov	r4,r16
    3778:	00068280 	call	6828 <_Balloc>
    377c:	102f883a 	mov	r23,r2
    3780:	80801015 	stw	r2,64(r16)
    3784:	00800384 	movi	r2,14
    3788:	1480f036 	bltu	r2,r18,3b4c <_dtoa_r+0x73c>
    378c:	9800ef26 	beq	r19,zero,3b4c <_dtoa_r+0x73c>
    3790:	d8800617 	ldw	r2,24(sp)
    3794:	00839c0e 	bge	zero,r2,4608 <_dtoa_r+0x11f8>
    3798:	d8c00617 	ldw	r3,24(sp)
    379c:	108003cc 	andi	r2,r2,15
    37a0:	100490fa 	slli	r2,r2,3
    37a4:	182bd13a 	srai	r21,r3,4
    37a8:	00c00074 	movhi	r3,1
    37ac:	18f50f04 	addi	r3,r3,-11204
    37b0:	1885883a 	add	r2,r3,r2
    37b4:	a8c0040c 	andi	r3,r21,16
    37b8:	12800017 	ldw	r10,0(r2)
    37bc:	15800117 	ldw	r22,4(r2)
    37c0:	18038726 	beq	r3,zero,45e0 <_dtoa_r+0x11d0>
    37c4:	00800074 	movhi	r2,1
    37c8:	10b50504 	addi	r2,r2,-11244
    37cc:	11800817 	ldw	r6,32(r2)
    37d0:	11c00917 	ldw	r7,36(r2)
    37d4:	d9000317 	ldw	r4,12(sp)
    37d8:	880b883a 	mov	r5,r17
    37dc:	da801515 	stw	r10,84(sp)
    37e0:	00099140 	call	9914 <__divdf3>
    37e4:	da801517 	ldw	r10,84(sp)
    37e8:	d8801015 	stw	r2,64(sp)
    37ec:	1829883a 	mov	r20,r3
    37f0:	ad4003cc 	andi	r21,r21,15
    37f4:	048000c4 	movi	r18,3
    37f8:	a8001126 	beq	r21,zero,3840 <_dtoa_r+0x430>
    37fc:	04c00074 	movhi	r19,1
    3800:	9cf50504 	addi	r19,r19,-11244
    3804:	5005883a 	mov	r2,r10
    3808:	b007883a 	mov	r3,r22
    380c:	a980004c 	andi	r6,r21,1
    3810:	1009883a 	mov	r4,r2
    3814:	a82bd07a 	srai	r21,r21,1
    3818:	180b883a 	mov	r5,r3
    381c:	30000426 	beq	r6,zero,3830 <_dtoa_r+0x420>
    3820:	99800017 	ldw	r6,0(r19)
    3824:	99c00117 	ldw	r7,4(r19)
    3828:	94800044 	addi	r18,r18,1
    382c:	00096300 	call	9630 <__muldf3>
    3830:	9cc00204 	addi	r19,r19,8
    3834:	a83ff51e 	bne	r21,zero,380c <_dtoa_r+0x3fc>
    3838:	1015883a 	mov	r10,r2
    383c:	182d883a 	mov	r22,r3
    3840:	d9001017 	ldw	r4,64(sp)
    3844:	a00b883a 	mov	r5,r20
    3848:	500d883a 	mov	r6,r10
    384c:	b00f883a 	mov	r7,r22
    3850:	00099140 	call	9914 <__divdf3>
    3854:	1027883a 	mov	r19,r2
    3858:	1829883a 	mov	r20,r3
    385c:	d8c00d17 	ldw	r3,52(sp)
    3860:	18000626 	beq	r3,zero,387c <_dtoa_r+0x46c>
    3864:	9809883a 	mov	r4,r19
    3868:	a00b883a 	mov	r5,r20
    386c:	000d883a 	mov	r6,zero
    3870:	01cffc34 	movhi	r7,16368
    3874:	0009c480 	call	9c48 <__ltdf2>
    3878:	10040e16 	blt	r2,zero,48b4 <_dtoa_r+0x14a4>
    387c:	9009883a 	mov	r4,r18
    3880:	0009ca40 	call	9ca4 <__floatsidf>
    3884:	1009883a 	mov	r4,r2
    3888:	180b883a 	mov	r5,r3
    388c:	980d883a 	mov	r6,r19
    3890:	a00f883a 	mov	r7,r20
    3894:	00096300 	call	9630 <__muldf3>
    3898:	1009883a 	mov	r4,r2
    389c:	180b883a 	mov	r5,r3
    38a0:	000d883a 	mov	r6,zero
    38a4:	01d00734 	movhi	r7,16412
    38a8:	000957c0 	call	957c <__adddf3>
    38ac:	057f3034 	movhi	r21,64704
    38b0:	1d6b883a 	add	r21,r3,r21
    38b4:	d8c00917 	ldw	r3,36(sp)
    38b8:	1025883a 	mov	r18,r2
    38bc:	18031f26 	beq	r3,zero,453c <_dtoa_r+0x112c>
    38c0:	d8800617 	ldw	r2,24(sp)
    38c4:	dac00917 	ldw	r11,36(sp)
    38c8:	d8801315 	stw	r2,76(sp)
    38cc:	d8c00c17 	ldw	r3,48(sp)
    38d0:	18039026 	beq	r3,zero,4714 <_dtoa_r+0x1304>
    38d4:	58bfffc4 	addi	r2,r11,-1
    38d8:	100490fa 	slli	r2,r2,3
    38dc:	00c00074 	movhi	r3,1
    38e0:	18f50f04 	addi	r3,r3,-11204
    38e4:	0009883a 	mov	r4,zero
    38e8:	1885883a 	add	r2,r3,r2
    38ec:	11800017 	ldw	r6,0(r2)
    38f0:	11c00117 	ldw	r7,4(r2)
    38f4:	014ff834 	movhi	r5,16352
    38f8:	dac01615 	stw	r11,88(sp)
    38fc:	00099140 	call	9914 <__divdf3>
    3900:	900d883a 	mov	r6,r18
    3904:	a80f883a 	mov	r7,r21
    3908:	1009883a 	mov	r4,r2
    390c:	180b883a 	mov	r5,r3
    3910:	00095d00 	call	95d0 <__subdf3>
    3914:	a00b883a 	mov	r5,r20
    3918:	9809883a 	mov	r4,r19
    391c:	182b883a 	mov	r21,r3
    3920:	d8801015 	stw	r2,64(sp)
    3924:	0009d780 	call	9d78 <__fixdfsi>
    3928:	1009883a 	mov	r4,r2
    392c:	d8801515 	stw	r2,84(sp)
    3930:	0009ca40 	call	9ca4 <__floatsidf>
    3934:	9809883a 	mov	r4,r19
    3938:	a00b883a 	mov	r5,r20
    393c:	100d883a 	mov	r6,r2
    3940:	180f883a 	mov	r7,r3
    3944:	00095d00 	call	95d0 <__subdf3>
    3948:	da401517 	ldw	r9,84(sp)
    394c:	d9001017 	ldw	r4,64(sp)
    3950:	a80b883a 	mov	r5,r21
    3954:	4d000c04 	addi	r20,r9,48
    3958:	bd000005 	stb	r20,0(r23)
    395c:	100d883a 	mov	r6,r2
    3960:	180f883a 	mov	r7,r3
    3964:	bd800044 	addi	r22,r23,1
    3968:	1025883a 	mov	r18,r2
    396c:	1827883a 	mov	r19,r3
    3970:	0009b800 	call	9b80 <__gtdf2>
    3974:	00842216 	blt	zero,r2,4a00 <_dtoa_r+0x15f0>
    3978:	0009883a 	mov	r4,zero
    397c:	014ffc34 	movhi	r5,16368
    3980:	900d883a 	mov	r6,r18
    3984:	980f883a 	mov	r7,r19
    3988:	00095d00 	call	95d0 <__subdf3>
    398c:	d9001017 	ldw	r4,64(sp)
    3990:	a80b883a 	mov	r5,r21
    3994:	100d883a 	mov	r6,r2
    3998:	180f883a 	mov	r7,r3
    399c:	0009b800 	call	9b80 <__gtdf2>
    39a0:	dac01617 	ldw	r11,88(sp)
    39a4:	00841316 	blt	zero,r2,49f4 <_dtoa_r+0x15e4>
    39a8:	00800044 	movi	r2,1
    39ac:	12c0670e 	bge	r2,r11,3b4c <_dtoa_r+0x73c>
    39b0:	bad7883a 	add	r11,r23,r11
    39b4:	df001115 	stw	fp,68(sp)
    39b8:	dc401215 	stw	r17,72(sp)
    39bc:	5839883a 	mov	fp,r11
    39c0:	dc401017 	ldw	r17,64(sp)
    39c4:	00000806 	br	39e8 <_dtoa_r+0x5d8>
    39c8:	00095d00 	call	95d0 <__subdf3>
    39cc:	1009883a 	mov	r4,r2
    39d0:	180b883a 	mov	r5,r3
    39d4:	880d883a 	mov	r6,r17
    39d8:	a80f883a 	mov	r7,r21
    39dc:	0009c480 	call	9c48 <__ltdf2>
    39e0:	1003ee16 	blt	r2,zero,499c <_dtoa_r+0x158c>
    39e4:	b703f126 	beq	r22,fp,49ac <_dtoa_r+0x159c>
    39e8:	8809883a 	mov	r4,r17
    39ec:	a80b883a 	mov	r5,r21
    39f0:	000d883a 	mov	r6,zero
    39f4:	01d00934 	movhi	r7,16420
    39f8:	00096300 	call	9630 <__muldf3>
    39fc:	000d883a 	mov	r6,zero
    3a00:	01d00934 	movhi	r7,16420
    3a04:	9009883a 	mov	r4,r18
    3a08:	980b883a 	mov	r5,r19
    3a0c:	1023883a 	mov	r17,r2
    3a10:	182b883a 	mov	r21,r3
    3a14:	00096300 	call	9630 <__muldf3>
    3a18:	180b883a 	mov	r5,r3
    3a1c:	1009883a 	mov	r4,r2
    3a20:	1825883a 	mov	r18,r3
    3a24:	1027883a 	mov	r19,r2
    3a28:	0009d780 	call	9d78 <__fixdfsi>
    3a2c:	1009883a 	mov	r4,r2
    3a30:	1029883a 	mov	r20,r2
    3a34:	0009ca40 	call	9ca4 <__floatsidf>
    3a38:	9809883a 	mov	r4,r19
    3a3c:	900b883a 	mov	r5,r18
    3a40:	100d883a 	mov	r6,r2
    3a44:	180f883a 	mov	r7,r3
    3a48:	00095d00 	call	95d0 <__subdf3>
    3a4c:	a5000c04 	addi	r20,r20,48
    3a50:	b5000005 	stb	r20,0(r22)
    3a54:	1009883a 	mov	r4,r2
    3a58:	180b883a 	mov	r5,r3
    3a5c:	880d883a 	mov	r6,r17
    3a60:	a80f883a 	mov	r7,r21
    3a64:	1025883a 	mov	r18,r2
    3a68:	1827883a 	mov	r19,r3
    3a6c:	0009c480 	call	9c48 <__ltdf2>
    3a70:	b5800044 	addi	r22,r22,1
    3a74:	0009883a 	mov	r4,zero
    3a78:	014ffc34 	movhi	r5,16368
    3a7c:	900d883a 	mov	r6,r18
    3a80:	980f883a 	mov	r7,r19
    3a84:	103fd00e 	bge	r2,zero,39c8 <_dtoa_r+0x5b8>
    3a88:	d9001317 	ldw	r4,76(sp)
    3a8c:	df001117 	ldw	fp,68(sp)
    3a90:	d9000615 	stw	r4,24(sp)
    3a94:	8009883a 	mov	r4,r16
    3a98:	e00b883a 	mov	r5,fp
    3a9c:	00068d00 	call	68d0 <_Bfree>
    3aa0:	d9c00617 	ldw	r7,24(sp)
    3aa4:	d8c02217 	ldw	r3,136(sp)
    3aa8:	d9002417 	ldw	r4,144(sp)
    3aac:	b0000005 	stb	zero,0(r22)
    3ab0:	38800044 	addi	r2,r7,1
    3ab4:	18800015 	stw	r2,0(r3)
    3ab8:	203e8426 	beq	r4,zero,34cc <_dtoa_r+0xbc>
    3abc:	25800015 	stw	r22,0(r4)
    3ac0:	003e8206 	br	34cc <_dtoa_r+0xbc>
    3ac4:	00800434 	movhi	r2,16
    3ac8:	10bfffc4 	addi	r2,r2,-1
    3acc:	90a4703a 	and	r18,r18,r2
    3ad0:	903e901e 	bne	r18,zero,3514 <_dtoa_r+0x104>
    3ad4:	05c00074 	movhi	r23,1
    3ad8:	bdf4e704 	addi	r23,r23,-11364
    3adc:	003e8f06 	br	351c <_dtoa_r+0x10c>
    3ae0:	b8800204 	addi	r2,r23,8
    3ae4:	003e9206 	br	3530 <_dtoa_r+0x120>
    3ae8:	01400434 	movhi	r5,16
    3aec:	297fffc4 	addi	r5,r5,-1
    3af0:	894a703a 	and	r5,r17,r5
    3af4:	d9000317 	ldw	r4,12(sp)
    3af8:	294ffc34 	orhi	r5,r5,16368
    3afc:	a53f0044 	addi	r20,r20,-1023
    3b00:	dd400217 	ldw	r21,8(sp)
    3b04:	d8000f15 	stw	zero,60(sp)
    3b08:	003eb106 	br	35d0 <_dtoa_r+0x1c0>
    3b0c:	05c00074 	movhi	r23,1
    3b10:	bdf4de04 	addi	r23,r23,-11400
    3b14:	003e6d06 	br	34cc <_dtoa_r+0xbc>
    3b18:	d8000415 	stw	zero,16(sp)
    3b1c:	80001115 	stw	zero,68(r16)
    3b20:	8009883a 	mov	r4,r16
    3b24:	000b883a 	mov	r5,zero
    3b28:	00068280 	call	6828 <_Balloc>
    3b2c:	01ffffc4 	movi	r7,-1
    3b30:	102f883a 	mov	r23,r2
    3b34:	80801015 	stw	r2,64(r16)
    3b38:	00800044 	movi	r2,1
    3b3c:	d9c00915 	stw	r7,36(sp)
    3b40:	d8002115 	stw	zero,132(sp)
    3b44:	d9c00e15 	stw	r7,56(sp)
    3b48:	d8800c15 	stw	r2,48(sp)
    3b4c:	d8800117 	ldw	r2,4(sp)
    3b50:	10008b16 	blt	r2,zero,3d80 <_dtoa_r+0x970>
    3b54:	d9000617 	ldw	r4,24(sp)
    3b58:	00c00384 	movi	r3,14
    3b5c:	19008816 	blt	r3,r4,3d80 <_dtoa_r+0x970>
    3b60:	200490fa 	slli	r2,r4,3
    3b64:	d9c02117 	ldw	r7,132(sp)
    3b68:	00c00074 	movhi	r3,1
    3b6c:	18f50f04 	addi	r3,r3,-11204
    3b70:	1885883a 	add	r2,r3,r2
    3b74:	14800017 	ldw	r18,0(r2)
    3b78:	14c00117 	ldw	r19,4(r2)
    3b7c:	3801c916 	blt	r7,zero,42a4 <_dtoa_r+0xe94>
    3b80:	d9000317 	ldw	r4,12(sp)
    3b84:	900d883a 	mov	r6,r18
    3b88:	980f883a 	mov	r7,r19
    3b8c:	880b883a 	mov	r5,r17
    3b90:	00099140 	call	9914 <__divdf3>
    3b94:	180b883a 	mov	r5,r3
    3b98:	1009883a 	mov	r4,r2
    3b9c:	0009d780 	call	9d78 <__fixdfsi>
    3ba0:	1009883a 	mov	r4,r2
    3ba4:	102b883a 	mov	r21,r2
    3ba8:	0009ca40 	call	9ca4 <__floatsidf>
    3bac:	1009883a 	mov	r4,r2
    3bb0:	180b883a 	mov	r5,r3
    3bb4:	900d883a 	mov	r6,r18
    3bb8:	980f883a 	mov	r7,r19
    3bbc:	00096300 	call	9630 <__muldf3>
    3bc0:	d9000317 	ldw	r4,12(sp)
    3bc4:	880b883a 	mov	r5,r17
    3bc8:	100d883a 	mov	r6,r2
    3bcc:	180f883a 	mov	r7,r3
    3bd0:	00095d00 	call	95d0 <__subdf3>
    3bd4:	d9c00917 	ldw	r7,36(sp)
    3bd8:	1009883a 	mov	r4,r2
    3bdc:	a8800c04 	addi	r2,r21,48
    3be0:	b8800005 	stb	r2,0(r23)
    3be4:	01800044 	movi	r6,1
    3be8:	180b883a 	mov	r5,r3
    3bec:	2005883a 	mov	r2,r4
    3bf0:	bd800044 	addi	r22,r23,1
    3bf4:	39803726 	beq	r7,r6,3cd4 <_dtoa_r+0x8c4>
    3bf8:	000d883a 	mov	r6,zero
    3bfc:	01d00934 	movhi	r7,16420
    3c00:	00096300 	call	9630 <__muldf3>
    3c04:	1009883a 	mov	r4,r2
    3c08:	180b883a 	mov	r5,r3
    3c0c:	000d883a 	mov	r6,zero
    3c10:	000f883a 	mov	r7,zero
    3c14:	1029883a 	mov	r20,r2
    3c18:	1823883a 	mov	r17,r3
    3c1c:	0009ac80 	call	9ac8 <__eqdf2>
    3c20:	103f9c26 	beq	r2,zero,3a94 <_dtoa_r+0x684>
    3c24:	dd400917 	ldw	r21,36(sp)
    3c28:	dc000415 	stw	r16,16(sp)
    3c2c:	00000906 	br	3c54 <_dtoa_r+0x844>
    3c30:	00096300 	call	9630 <__muldf3>
    3c34:	1009883a 	mov	r4,r2
    3c38:	180b883a 	mov	r5,r3
    3c3c:	000d883a 	mov	r6,zero
    3c40:	000f883a 	mov	r7,zero
    3c44:	1029883a 	mov	r20,r2
    3c48:	1823883a 	mov	r17,r3
    3c4c:	0009ac80 	call	9ac8 <__eqdf2>
    3c50:	10022926 	beq	r2,zero,44f8 <_dtoa_r+0x10e8>
    3c54:	900d883a 	mov	r6,r18
    3c58:	980f883a 	mov	r7,r19
    3c5c:	a009883a 	mov	r4,r20
    3c60:	880b883a 	mov	r5,r17
    3c64:	00099140 	call	9914 <__divdf3>
    3c68:	180b883a 	mov	r5,r3
    3c6c:	1009883a 	mov	r4,r2
    3c70:	0009d780 	call	9d78 <__fixdfsi>
    3c74:	1009883a 	mov	r4,r2
    3c78:	1021883a 	mov	r16,r2
    3c7c:	0009ca40 	call	9ca4 <__floatsidf>
    3c80:	1009883a 	mov	r4,r2
    3c84:	180b883a 	mov	r5,r3
    3c88:	900d883a 	mov	r6,r18
    3c8c:	980f883a 	mov	r7,r19
    3c90:	00096300 	call	9630 <__muldf3>
    3c94:	a009883a 	mov	r4,r20
    3c98:	880b883a 	mov	r5,r17
    3c9c:	100d883a 	mov	r6,r2
    3ca0:	180f883a 	mov	r7,r3
    3ca4:	00095d00 	call	95d0 <__subdf3>
    3ca8:	82400c04 	addi	r9,r16,48
    3cac:	b2400005 	stb	r9,0(r22)
    3cb0:	b5800044 	addi	r22,r22,1
    3cb4:	b5d3c83a 	sub	r9,r22,r23
    3cb8:	000d883a 	mov	r6,zero
    3cbc:	01d00934 	movhi	r7,16420
    3cc0:	1009883a 	mov	r4,r2
    3cc4:	180b883a 	mov	r5,r3
    3cc8:	aa7fd91e 	bne	r21,r9,3c30 <_dtoa_r+0x820>
    3ccc:	802b883a 	mov	r21,r16
    3cd0:	dc000417 	ldw	r16,16(sp)
    3cd4:	1009883a 	mov	r4,r2
    3cd8:	180b883a 	mov	r5,r3
    3cdc:	100d883a 	mov	r6,r2
    3ce0:	180f883a 	mov	r7,r3
    3ce4:	000957c0 	call	957c <__adddf3>
    3ce8:	9009883a 	mov	r4,r18
    3cec:	980b883a 	mov	r5,r19
    3cf0:	100d883a 	mov	r6,r2
    3cf4:	180f883a 	mov	r7,r3
    3cf8:	1023883a 	mov	r17,r2
    3cfc:	1829883a 	mov	r20,r3
    3d00:	0009c480 	call	9c48 <__ltdf2>
    3d04:	10000816 	blt	r2,zero,3d28 <_dtoa_r+0x918>
    3d08:	9009883a 	mov	r4,r18
    3d0c:	980b883a 	mov	r5,r19
    3d10:	880d883a 	mov	r6,r17
    3d14:	a00f883a 	mov	r7,r20
    3d18:	0009ac80 	call	9ac8 <__eqdf2>
    3d1c:	103f5d1e 	bne	r2,zero,3a94 <_dtoa_r+0x684>
    3d20:	ad40004c 	andi	r21,r21,1
    3d24:	a83f5b26 	beq	r21,zero,3a94 <_dtoa_r+0x684>
    3d28:	b53fffc3 	ldbu	r20,-1(r22)
    3d2c:	b0ffff84 	addi	r3,r22,-2
    3d30:	01400e44 	movi	r5,57
    3d34:	00000306 	br	3d44 <_dtoa_r+0x934>
    3d38:	1d000003 	ldbu	r20,0(r3)
    3d3c:	102d883a 	mov	r22,r2
    3d40:	18ffffc4 	addi	r3,r3,-1
    3d44:	a1003fcc 	andi	r4,r20,255
    3d48:	2100201c 	xori	r4,r4,128
    3d4c:	213fe004 	addi	r4,r4,-128
    3d50:	b0bfffc4 	addi	r2,r22,-1
    3d54:	2142ca1e 	bne	r4,r5,4880 <_dtoa_r+0x1470>
    3d58:	b8bff71e 	bne	r23,r2,3d38 <_dtoa_r+0x928>
    3d5c:	d8800617 	ldw	r2,24(sp)
    3d60:	05000c44 	movi	r20,49
    3d64:	10800044 	addi	r2,r2,1
    3d68:	d8800615 	stw	r2,24(sp)
    3d6c:	00800c04 	movi	r2,48
    3d70:	b8800005 	stb	r2,0(r23)
    3d74:	b805883a 	mov	r2,r23
    3d78:	15000005 	stb	r20,0(r2)
    3d7c:	003f4506 	br	3a94 <_dtoa_r+0x684>
    3d80:	d9c00c17 	ldw	r7,48(sp)
    3d84:	3800c926 	beq	r7,zero,40ac <_dtoa_r+0xc9c>
    3d88:	d9c00417 	ldw	r7,16(sp)
    3d8c:	00c00044 	movi	r3,1
    3d90:	19c16c0e 	bge	r3,r7,4344 <_dtoa_r+0xf34>
    3d94:	d9000917 	ldw	r4,36(sp)
    3d98:	d9c00a17 	ldw	r7,40(sp)
    3d9c:	24ffffc4 	addi	r19,r4,-1
    3da0:	3cc20716 	blt	r7,r19,45c0 <_dtoa_r+0x11b0>
    3da4:	3ce7c83a 	sub	r19,r7,r19
    3da8:	d9c00917 	ldw	r7,36(sp)
    3dac:	3802ae16 	blt	r7,zero,4868 <_dtoa_r+0x1458>
    3db0:	dc800817 	ldw	r18,32(sp)
    3db4:	d8800917 	ldw	r2,36(sp)
    3db8:	d8c00817 	ldw	r3,32(sp)
    3dbc:	d9c00717 	ldw	r7,28(sp)
    3dc0:	8009883a 	mov	r4,r16
    3dc4:	1887883a 	add	r3,r3,r2
    3dc8:	388f883a 	add	r7,r7,r2
    3dcc:	01400044 	movi	r5,1
    3dd0:	d8c00815 	stw	r3,32(sp)
    3dd4:	d9c00715 	stw	r7,28(sp)
    3dd8:	0006c580 	call	6c58 <__i2b>
    3ddc:	102b883a 	mov	r21,r2
    3de0:	90000a26 	beq	r18,zero,3e0c <_dtoa_r+0x9fc>
    3de4:	d8800717 	ldw	r2,28(sp)
    3de8:	0080080e 	bge	zero,r2,3e0c <_dtoa_r+0x9fc>
    3dec:	90812b16 	blt	r18,r2,429c <_dtoa_r+0xe8c>
    3df0:	d8c00817 	ldw	r3,32(sp)
    3df4:	d9000717 	ldw	r4,28(sp)
    3df8:	90a5c83a 	sub	r18,r18,r2
    3dfc:	1887c83a 	sub	r3,r3,r2
    3e00:	2089c83a 	sub	r4,r4,r2
    3e04:	d8c00815 	stw	r3,32(sp)
    3e08:	d9000715 	stw	r4,28(sp)
    3e0c:	d9c00a17 	ldw	r7,40(sp)
    3e10:	01c0140e 	bge	zero,r7,3e64 <_dtoa_r+0xa54>
    3e14:	d8800c17 	ldw	r2,48(sp)
    3e18:	1001de26 	beq	r2,zero,4594 <_dtoa_r+0x1184>
    3e1c:	04c00e0e 	bge	zero,r19,3e58 <_dtoa_r+0xa48>
    3e20:	a80b883a 	mov	r5,r21
    3e24:	8009883a 	mov	r4,r16
    3e28:	980d883a 	mov	r6,r19
    3e2c:	0006eec0 	call	6eec <__pow5mult>
    3e30:	e00d883a 	mov	r6,fp
    3e34:	8009883a 	mov	r4,r16
    3e38:	100b883a 	mov	r5,r2
    3e3c:	102b883a 	mov	r21,r2
    3e40:	0006c940 	call	6c94 <__multiply>
    3e44:	1029883a 	mov	r20,r2
    3e48:	e00b883a 	mov	r5,fp
    3e4c:	8009883a 	mov	r4,r16
    3e50:	00068d00 	call	68d0 <_Bfree>
    3e54:	a039883a 	mov	fp,r20
    3e58:	d8c00a17 	ldw	r3,40(sp)
    3e5c:	1ccdc83a 	sub	r6,r3,r19
    3e60:	3001291e 	bne	r6,zero,4308 <_dtoa_r+0xef8>
    3e64:	8009883a 	mov	r4,r16
    3e68:	01400044 	movi	r5,1
    3e6c:	0006c580 	call	6c58 <__i2b>
    3e70:	d9000b17 	ldw	r4,44(sp)
    3e74:	1029883a 	mov	r20,r2
    3e78:	0100050e 	bge	zero,r4,3e90 <_dtoa_r+0xa80>
    3e7c:	d9800b17 	ldw	r6,44(sp)
    3e80:	8009883a 	mov	r4,r16
    3e84:	100b883a 	mov	r5,r2
    3e88:	0006eec0 	call	6eec <__pow5mult>
    3e8c:	1029883a 	mov	r20,r2
    3e90:	d9c00417 	ldw	r7,16(sp)
    3e94:	00800044 	movi	r2,1
    3e98:	11c0f00e 	bge	r2,r7,425c <_dtoa_r+0xe4c>
    3e9c:	0023883a 	mov	r17,zero
    3ea0:	d8800b17 	ldw	r2,44(sp)
    3ea4:	1001741e 	bne	r2,zero,4478 <_dtoa_r+0x1068>
    3ea8:	00800044 	movi	r2,1
    3eac:	d8c00717 	ldw	r3,28(sp)
    3eb0:	10c5883a 	add	r2,r2,r3
    3eb4:	108007cc 	andi	r2,r2,31
    3eb8:	10008026 	beq	r2,zero,40bc <_dtoa_r+0xcac>
    3ebc:	01000804 	movi	r4,32
    3ec0:	2089c83a 	sub	r4,r4,r2
    3ec4:	00c00104 	movi	r3,4
    3ec8:	1902d00e 	bge	r3,r4,4a0c <_dtoa_r+0x15fc>
    3ecc:	d9000817 	ldw	r4,32(sp)
    3ed0:	d9c00717 	ldw	r7,28(sp)
    3ed4:	00c00704 	movi	r3,28
    3ed8:	1885c83a 	sub	r2,r3,r2
    3edc:	2089883a 	add	r4,r4,r2
    3ee0:	388f883a 	add	r7,r7,r2
    3ee4:	d9000815 	stw	r4,32(sp)
    3ee8:	90a5883a 	add	r18,r18,r2
    3eec:	d9c00715 	stw	r7,28(sp)
    3ef0:	d9c00817 	ldw	r7,32(sp)
    3ef4:	01c0050e 	bge	zero,r7,3f0c <_dtoa_r+0xafc>
    3ef8:	e00b883a 	mov	r5,fp
    3efc:	8009883a 	mov	r4,r16
    3f00:	380d883a 	mov	r6,r7
    3f04:	00070180 	call	7018 <__lshift>
    3f08:	1039883a 	mov	fp,r2
    3f0c:	d8800717 	ldw	r2,28(sp)
    3f10:	0080050e 	bge	zero,r2,3f28 <_dtoa_r+0xb18>
    3f14:	a00b883a 	mov	r5,r20
    3f18:	8009883a 	mov	r4,r16
    3f1c:	100d883a 	mov	r6,r2
    3f20:	00070180 	call	7018 <__lshift>
    3f24:	1029883a 	mov	r20,r2
    3f28:	d8c00d17 	ldw	r3,52(sp)
    3f2c:	1801401e 	bne	r3,zero,4430 <_dtoa_r+0x1020>
    3f30:	d8800917 	ldw	r2,36(sp)
    3f34:	00815a0e 	bge	zero,r2,44a0 <_dtoa_r+0x1090>
    3f38:	d8c00c17 	ldw	r3,48(sp)
    3f3c:	18006f1e 	bne	r3,zero,40fc <_dtoa_r+0xcec>
    3f40:	b823883a 	mov	r17,r23
    3f44:	dc800917 	ldw	r18,36(sp)
    3f48:	00000206 	br	3f54 <_dtoa_r+0xb44>
    3f4c:	00068f80 	call	68f8 <__multadd>
    3f50:	1039883a 	mov	fp,r2
    3f54:	e009883a 	mov	r4,fp
    3f58:	a00b883a 	mov	r5,r20
    3f5c:	00031d40 	call	31d4 <quorem>
    3f60:	10800c04 	addi	r2,r2,48
    3f64:	88800005 	stb	r2,0(r17)
    3f68:	8c400044 	addi	r17,r17,1
    3f6c:	8dc7c83a 	sub	r3,r17,r23
    3f70:	8009883a 	mov	r4,r16
    3f74:	e00b883a 	mov	r5,fp
    3f78:	01800284 	movi	r6,10
    3f7c:	000f883a 	mov	r7,zero
    3f80:	1cbff216 	blt	r3,r18,3f4c <_dtoa_r+0xb3c>
    3f84:	dd800917 	ldw	r22,36(sp)
    3f88:	1007883a 	mov	r3,r2
    3f8c:	05823a0e 	bge	zero,r22,4878 <_dtoa_r+0x1468>
    3f90:	bdad883a 	add	r22,r23,r22
    3f94:	0023883a 	mov	r17,zero
    3f98:	e00b883a 	mov	r5,fp
    3f9c:	01800044 	movi	r6,1
    3fa0:	8009883a 	mov	r4,r16
    3fa4:	d8c01515 	stw	r3,84(sp)
    3fa8:	00070180 	call	7018 <__lshift>
    3fac:	1009883a 	mov	r4,r2
    3fb0:	a00b883a 	mov	r5,r20
    3fb4:	1039883a 	mov	fp,r2
    3fb8:	00071740 	call	7174 <__mcmp>
    3fbc:	d8c01517 	ldw	r3,84(sp)
    3fc0:	0080d60e 	bge	zero,r2,431c <_dtoa_r+0xf0c>
    3fc4:	b13fffc3 	ldbu	r4,-1(r22)
    3fc8:	b0ffff84 	addi	r3,r22,-2
    3fcc:	01800e44 	movi	r6,57
    3fd0:	00000306 	br	3fe0 <_dtoa_r+0xbd0>
    3fd4:	19000003 	ldbu	r4,0(r3)
    3fd8:	102d883a 	mov	r22,r2
    3fdc:	18ffffc4 	addi	r3,r3,-1
    3fe0:	21403fcc 	andi	r5,r4,255
    3fe4:	2940201c 	xori	r5,r5,128
    3fe8:	297fe004 	addi	r5,r5,-128
    3fec:	b0bfffc4 	addi	r2,r22,-1
    3ff0:	2981a71e 	bne	r5,r6,4690 <_dtoa_r+0x1280>
    3ff4:	b8bff71e 	bne	r23,r2,3fd4 <_dtoa_r+0xbc4>
    3ff8:	d8800617 	ldw	r2,24(sp)
    3ffc:	10800044 	addi	r2,r2,1
    4000:	d8800615 	stw	r2,24(sp)
    4004:	00800c44 	movi	r2,49
    4008:	b8800005 	stb	r2,0(r23)
    400c:	8009883a 	mov	r4,r16
    4010:	a00b883a 	mov	r5,r20
    4014:	00068d00 	call	68d0 <_Bfree>
    4018:	a83e9e26 	beq	r21,zero,3a94 <_dtoa_r+0x684>
    401c:	88000426 	beq	r17,zero,4030 <_dtoa_r+0xc20>
    4020:	8d400326 	beq	r17,r21,4030 <_dtoa_r+0xc20>
    4024:	8009883a 	mov	r4,r16
    4028:	880b883a 	mov	r5,r17
    402c:	00068d00 	call	68d0 <_Bfree>
    4030:	8009883a 	mov	r4,r16
    4034:	a80b883a 	mov	r5,r21
    4038:	00068d00 	call	68d0 <_Bfree>
    403c:	003e9506 	br	3a94 <_dtoa_r+0x684>
    4040:	00c00044 	movi	r3,1
    4044:	d8c00d15 	stw	r3,52(sp)
    4048:	003d9f06 	br	36c8 <_dtoa_r+0x2b8>
    404c:	d9000817 	ldw	r4,32(sp)
    4050:	d8800617 	ldw	r2,24(sp)
    4054:	d8000b15 	stw	zero,44(sp)
    4058:	2089c83a 	sub	r4,r4,r2
    405c:	0087c83a 	sub	r3,zero,r2
    4060:	d9000815 	stw	r4,32(sp)
    4064:	d8c00a15 	stw	r3,40(sp)
    4068:	003da306 	br	36f8 <_dtoa_r+0x2e8>
    406c:	0529c83a 	sub	r20,zero,r20
    4070:	dd000815 	stw	r20,32(sp)
    4074:	d8000715 	stw	zero,28(sp)
    4078:	003d9806 	br	36dc <_dtoa_r+0x2cc>
    407c:	d9000617 	ldw	r4,24(sp)
    4080:	0009ca40 	call	9ca4 <__floatsidf>
    4084:	1009883a 	mov	r4,r2
    4088:	180b883a 	mov	r5,r3
    408c:	980d883a 	mov	r6,r19
    4090:	900f883a 	mov	r7,r18
    4094:	0009b240 	call	9b24 <__nedf2>
    4098:	103d7a26 	beq	r2,zero,3684 <_dtoa_r+0x274>
    409c:	d8800617 	ldw	r2,24(sp)
    40a0:	10bfffc4 	addi	r2,r2,-1
    40a4:	d8800615 	stw	r2,24(sp)
    40a8:	003d7606 	br	3684 <_dtoa_r+0x274>
    40ac:	dcc00a17 	ldw	r19,40(sp)
    40b0:	dc800817 	ldw	r18,32(sp)
    40b4:	002b883a 	mov	r21,zero
    40b8:	003f4906 	br	3de0 <_dtoa_r+0x9d0>
    40bc:	00800704 	movi	r2,28
    40c0:	d8c00817 	ldw	r3,32(sp)
    40c4:	d9000717 	ldw	r4,28(sp)
    40c8:	90a5883a 	add	r18,r18,r2
    40cc:	1887883a 	add	r3,r3,r2
    40d0:	2089883a 	add	r4,r4,r2
    40d4:	d8c00815 	stw	r3,32(sp)
    40d8:	d9000715 	stw	r4,28(sp)
    40dc:	003f8406 	br	3ef0 <_dtoa_r+0xae0>
    40e0:	d9c00317 	ldw	r7,12(sp)
    40e4:	013efb84 	movi	r4,-1042
    40e8:	2509c83a 	sub	r4,r4,r20
    40ec:	3908983a 	sll	r4,r7,r4
    40f0:	003d3006 	br	35b4 <_dtoa_r+0x1a4>
    40f4:	d8000d15 	stw	zero,52(sp)
    40f8:	003d7306 	br	36c8 <_dtoa_r+0x2b8>
    40fc:	0480050e 	bge	zero,r18,4114 <_dtoa_r+0xd04>
    4100:	a80b883a 	mov	r5,r21
    4104:	8009883a 	mov	r4,r16
    4108:	900d883a 	mov	r6,r18
    410c:	00070180 	call	7018 <__lshift>
    4110:	102b883a 	mov	r21,r2
    4114:	8801611e 	bne	r17,zero,469c <_dtoa_r+0x128c>
    4118:	a827883a 	mov	r19,r21
    411c:	d8c00317 	ldw	r3,12(sp)
    4120:	d9000917 	ldw	r4,36(sp)
    4124:	b8bfffc4 	addi	r2,r23,-1
    4128:	18c0004c 	andi	r3,r3,1
    412c:	1105883a 	add	r2,r2,r4
    4130:	b825883a 	mov	r18,r23
    4134:	d8800515 	stw	r2,20(sp)
    4138:	a823883a 	mov	r17,r21
    413c:	d8c00315 	stw	r3,12(sp)
    4140:	ddc00715 	stw	r23,28(sp)
    4144:	e009883a 	mov	r4,fp
    4148:	a00b883a 	mov	r5,r20
    414c:	00031d40 	call	31d4 <quorem>
    4150:	e009883a 	mov	r4,fp
    4154:	880b883a 	mov	r5,r17
    4158:	102d883a 	mov	r22,r2
    415c:	00071740 	call	7174 <__mcmp>
    4160:	980d883a 	mov	r6,r19
    4164:	8009883a 	mov	r4,r16
    4168:	a00b883a 	mov	r5,r20
    416c:	102b883a 	mov	r21,r2
    4170:	00071cc0 	call	71cc <__mdiff>
    4174:	100d883a 	mov	r6,r2
    4178:	10800317 	ldw	r2,12(r2)
    417c:	b5c00c04 	addi	r23,r22,48
    4180:	10008c26 	beq	r2,zero,43b4 <_dtoa_r+0xfa4>
    4184:	8009883a 	mov	r4,r16
    4188:	300b883a 	mov	r5,r6
    418c:	00068d00 	call	68d0 <_Bfree>
    4190:	00800044 	movi	r2,1
    4194:	a8007116 	blt	r21,zero,435c <_dtoa_r+0xf4c>
    4198:	a800041e 	bne	r21,zero,41ac <_dtoa_r+0xd9c>
    419c:	d9c00417 	ldw	r7,16(sp)
    41a0:	3800021e 	bne	r7,zero,41ac <_dtoa_r+0xd9c>
    41a4:	d8c00317 	ldw	r3,12(sp)
    41a8:	18006c26 	beq	r3,zero,435c <_dtoa_r+0xf4c>
    41ac:	00814c16 	blt	zero,r2,46e0 <_dtoa_r+0x12d0>
    41b0:	d8c00517 	ldw	r3,20(sp)
    41b4:	95400044 	addi	r21,r18,1
    41b8:	95c00005 	stb	r23,0(r18)
    41bc:	a82d883a 	mov	r22,r21
    41c0:	90c14d26 	beq	r18,r3,46f8 <_dtoa_r+0x12e8>
    41c4:	e00b883a 	mov	r5,fp
    41c8:	8009883a 	mov	r4,r16
    41cc:	01800284 	movi	r6,10
    41d0:	000f883a 	mov	r7,zero
    41d4:	00068f80 	call	68f8 <__multadd>
    41d8:	1039883a 	mov	fp,r2
    41dc:	8cc08b26 	beq	r17,r19,440c <_dtoa_r+0xffc>
    41e0:	880b883a 	mov	r5,r17
    41e4:	01800284 	movi	r6,10
    41e8:	000f883a 	mov	r7,zero
    41ec:	8009883a 	mov	r4,r16
    41f0:	00068f80 	call	68f8 <__multadd>
    41f4:	980b883a 	mov	r5,r19
    41f8:	8009883a 	mov	r4,r16
    41fc:	01800284 	movi	r6,10
    4200:	000f883a 	mov	r7,zero
    4204:	1023883a 	mov	r17,r2
    4208:	00068f80 	call	68f8 <__multadd>
    420c:	1027883a 	mov	r19,r2
    4210:	a825883a 	mov	r18,r21
    4214:	003fcb06 	br	4144 <_dtoa_r+0xd34>
    4218:	d9c00417 	ldw	r7,16(sp)
    421c:	00800104 	movi	r2,4
    4220:	3880e426 	beq	r7,r2,45b4 <_dtoa_r+0x11a4>
    4224:	00800144 	movi	r2,5
    4228:	38be3c1e 	bne	r7,r2,3b1c <_dtoa_r+0x70c>
    422c:	00c00044 	movi	r3,1
    4230:	d8c00c15 	stw	r3,48(sp)
    4234:	d9c02117 	ldw	r7,132(sp)
    4238:	d8800617 	ldw	r2,24(sp)
    423c:	388f883a 	add	r7,r7,r2
    4240:	3c800044 	addi	r18,r7,1
    4244:	d9c00e15 	stw	r7,56(sp)
    4248:	dc800915 	stw	r18,36(sp)
    424c:	04bd3e16 	blt	zero,r18,3748 <_dtoa_r+0x338>
    4250:	80001115 	stw	zero,68(r16)
    4254:	000b883a 	mov	r5,zero
    4258:	003d4606 	br	3774 <_dtoa_r+0x364>
    425c:	d8c00317 	ldw	r3,12(sp)
    4260:	183f0e1e 	bne	r3,zero,3e9c <_dtoa_r+0xa8c>
    4264:	00c00434 	movhi	r3,16
    4268:	18ffffc4 	addi	r3,r3,-1
    426c:	88c6703a 	and	r3,r17,r3
    4270:	183f0a1e 	bne	r3,zero,3e9c <_dtoa_r+0xa8c>
    4274:	8c5ffc2c 	andhi	r17,r17,32752
    4278:	883f0826 	beq	r17,zero,3e9c <_dtoa_r+0xa8c>
    427c:	d9000817 	ldw	r4,32(sp)
    4280:	d9c00717 	ldw	r7,28(sp)
    4284:	1023883a 	mov	r17,r2
    4288:	2089883a 	add	r4,r4,r2
    428c:	388f883a 	add	r7,r7,r2
    4290:	d9000815 	stw	r4,32(sp)
    4294:	d9c00715 	stw	r7,28(sp)
    4298:	003f0106 	br	3ea0 <_dtoa_r+0xa90>
    429c:	9005883a 	mov	r2,r18
    42a0:	003ed306 	br	3df0 <_dtoa_r+0x9e0>
    42a4:	d8800917 	ldw	r2,36(sp)
    42a8:	00be3516 	blt	zero,r2,3b80 <_dtoa_r+0x770>
    42ac:	1000b61e 	bne	r2,zero,4588 <_dtoa_r+0x1178>
    42b0:	9009883a 	mov	r4,r18
    42b4:	980b883a 	mov	r5,r19
    42b8:	000d883a 	mov	r6,zero
    42bc:	01d00534 	movhi	r7,16404
    42c0:	00096300 	call	9630 <__muldf3>
    42c4:	d9800317 	ldw	r6,12(sp)
    42c8:	1009883a 	mov	r4,r2
    42cc:	180b883a 	mov	r5,r3
    42d0:	880f883a 	mov	r7,r17
    42d4:	0009be40 	call	9be4 <__gedf2>
    42d8:	0029883a 	mov	r20,zero
    42dc:	002b883a 	mov	r21,zero
    42e0:	10007e16 	blt	r2,zero,44dc <_dtoa_r+0x10cc>
    42e4:	d8802117 	ldw	r2,132(sp)
    42e8:	b82d883a 	mov	r22,r23
    42ec:	0084303a 	nor	r2,zero,r2
    42f0:	d8800615 	stw	r2,24(sp)
    42f4:	8009883a 	mov	r4,r16
    42f8:	a00b883a 	mov	r5,r20
    42fc:	00068d00 	call	68d0 <_Bfree>
    4300:	a83f4b1e 	bne	r21,zero,4030 <_dtoa_r+0xc20>
    4304:	003de306 	br	3a94 <_dtoa_r+0x684>
    4308:	e00b883a 	mov	r5,fp
    430c:	8009883a 	mov	r4,r16
    4310:	0006eec0 	call	6eec <__pow5mult>
    4314:	1039883a 	mov	fp,r2
    4318:	003ed206 	br	3e64 <_dtoa_r+0xa54>
    431c:	1000021e 	bne	r2,zero,4328 <_dtoa_r+0xf18>
    4320:	18c0004c 	andi	r3,r3,1
    4324:	183f271e 	bne	r3,zero,3fc4 <_dtoa_r+0xbb4>
    4328:	01000c04 	movi	r4,48
    432c:	00000106 	br	4334 <_dtoa_r+0xf24>
    4330:	102d883a 	mov	r22,r2
    4334:	b0bfffc4 	addi	r2,r22,-1
    4338:	10c00007 	ldb	r3,0(r2)
    433c:	193ffc26 	beq	r3,r4,4330 <_dtoa_r+0xf20>
    4340:	003f3206 	br	400c <_dtoa_r+0xbfc>
    4344:	d8c00f17 	ldw	r3,60(sp)
    4348:	18015026 	beq	r3,zero,488c <_dtoa_r+0x147c>
    434c:	10810cc4 	addi	r2,r2,1075
    4350:	dcc00a17 	ldw	r19,40(sp)
    4354:	dc800817 	ldw	r18,32(sp)
    4358:	003e9706 	br	3db8 <_dtoa_r+0x9a8>
    435c:	b807883a 	mov	r3,r23
    4360:	182b883a 	mov	r21,r3
    4364:	ddc00717 	ldw	r23,28(sp)
    4368:	00800e0e 	bge	zero,r2,43a4 <_dtoa_r+0xf94>
    436c:	e00b883a 	mov	r5,fp
    4370:	01800044 	movi	r6,1
    4374:	8009883a 	mov	r4,r16
    4378:	d8c01515 	stw	r3,84(sp)
    437c:	00070180 	call	7018 <__lshift>
    4380:	1009883a 	mov	r4,r2
    4384:	a00b883a 	mov	r5,r20
    4388:	1039883a 	mov	fp,r2
    438c:	00071740 	call	7174 <__mcmp>
    4390:	d8c01517 	ldw	r3,84(sp)
    4394:	0081880e 	bge	zero,r2,49b8 <_dtoa_r+0x15a8>
    4398:	00800e44 	movi	r2,57
    439c:	b0c00c44 	addi	r3,r22,49
    43a0:	a8816326 	beq	r21,r2,4930 <_dtoa_r+0x1520>
    43a4:	90c00005 	stb	r3,0(r18)
    43a8:	95800044 	addi	r22,r18,1
    43ac:	982b883a 	mov	r21,r19
    43b0:	003f1606 	br	400c <_dtoa_r+0xbfc>
    43b4:	300b883a 	mov	r5,r6
    43b8:	e009883a 	mov	r4,fp
    43bc:	d9801515 	stw	r6,84(sp)
    43c0:	00071740 	call	7174 <__mcmp>
    43c4:	d9801517 	ldw	r6,84(sp)
    43c8:	8009883a 	mov	r4,r16
    43cc:	d8801515 	stw	r2,84(sp)
    43d0:	300b883a 	mov	r5,r6
    43d4:	00068d00 	call	68d0 <_Bfree>
    43d8:	d8801517 	ldw	r2,84(sp)
    43dc:	103f6d1e 	bne	r2,zero,4194 <_dtoa_r+0xd84>
    43e0:	d9c00417 	ldw	r7,16(sp)
    43e4:	383f6b1e 	bne	r7,zero,4194 <_dtoa_r+0xd84>
    43e8:	d8c00317 	ldw	r3,12(sp)
    43ec:	183f691e 	bne	r3,zero,4194 <_dtoa_r+0xd84>
    43f0:	b807883a 	mov	r3,r23
    43f4:	00800e44 	movi	r2,57
    43f8:	ddc00717 	ldw	r23,28(sp)
    43fc:	18814c26 	beq	r3,r2,4930 <_dtoa_r+0x1520>
    4400:	057fe80e 	bge	zero,r21,43a4 <_dtoa_r+0xf94>
    4404:	b0c00c44 	addi	r3,r22,49
    4408:	003fe606 	br	43a4 <_dtoa_r+0xf94>
    440c:	880b883a 	mov	r5,r17
    4410:	8009883a 	mov	r4,r16
    4414:	01800284 	movi	r6,10
    4418:	000f883a 	mov	r7,zero
    441c:	00068f80 	call	68f8 <__multadd>
    4420:	1023883a 	mov	r17,r2
    4424:	1027883a 	mov	r19,r2
    4428:	a825883a 	mov	r18,r21
    442c:	003f4506 	br	4144 <_dtoa_r+0xd34>
    4430:	e009883a 	mov	r4,fp
    4434:	a00b883a 	mov	r5,r20
    4438:	00071740 	call	7174 <__mcmp>
    443c:	103ebc0e 	bge	r2,zero,3f30 <_dtoa_r+0xb20>
    4440:	e00b883a 	mov	r5,fp
    4444:	8009883a 	mov	r4,r16
    4448:	01800284 	movi	r6,10
    444c:	000f883a 	mov	r7,zero
    4450:	00068f80 	call	68f8 <__multadd>
    4454:	1039883a 	mov	fp,r2
    4458:	d8800617 	ldw	r2,24(sp)
    445c:	d8c00c17 	ldw	r3,48(sp)
    4460:	10bfffc4 	addi	r2,r2,-1
    4464:	d8800615 	stw	r2,24(sp)
    4468:	1801571e 	bne	r3,zero,49c8 <_dtoa_r+0x15b8>
    446c:	d9c00e17 	ldw	r7,56(sp)
    4470:	d9c00915 	stw	r7,36(sp)
    4474:	003eae06 	br	3f30 <_dtoa_r+0xb20>
    4478:	a0800417 	ldw	r2,16(r20)
    447c:	10800104 	addi	r2,r2,4
    4480:	1085883a 	add	r2,r2,r2
    4484:	1085883a 	add	r2,r2,r2
    4488:	a085883a 	add	r2,r20,r2
    448c:	11000017 	ldw	r4,0(r2)
    4490:	0006b400 	call	6b40 <__hi0bits>
    4494:	00c00804 	movi	r3,32
    4498:	1885c83a 	sub	r2,r3,r2
    449c:	003e8306 	br	3eac <_dtoa_r+0xa9c>
    44a0:	d9c00417 	ldw	r7,16(sp)
    44a4:	00800084 	movi	r2,2
    44a8:	11fea30e 	bge	r2,r7,3f38 <_dtoa_r+0xb28>
    44ac:	d8800917 	ldw	r2,36(sp)
    44b0:	103f8c1e 	bne	r2,zero,42e4 <_dtoa_r+0xed4>
    44b4:	a00b883a 	mov	r5,r20
    44b8:	8009883a 	mov	r4,r16
    44bc:	01800144 	movi	r6,5
    44c0:	000f883a 	mov	r7,zero
    44c4:	00068f80 	call	68f8 <__multadd>
    44c8:	e009883a 	mov	r4,fp
    44cc:	100b883a 	mov	r5,r2
    44d0:	1029883a 	mov	r20,r2
    44d4:	00071740 	call	7174 <__mcmp>
    44d8:	00bf820e 	bge	zero,r2,42e4 <_dtoa_r+0xed4>
    44dc:	00800c44 	movi	r2,49
    44e0:	b8800005 	stb	r2,0(r23)
    44e4:	d8800617 	ldw	r2,24(sp)
    44e8:	bd800044 	addi	r22,r23,1
    44ec:	10800044 	addi	r2,r2,1
    44f0:	d8800615 	stw	r2,24(sp)
    44f4:	003f7f06 	br	42f4 <_dtoa_r+0xee4>
    44f8:	dc000417 	ldw	r16,16(sp)
    44fc:	003d6506 	br	3a94 <_dtoa_r+0x684>
    4500:	9009883a 	mov	r4,r18
    4504:	0009ca40 	call	9ca4 <__floatsidf>
    4508:	1009883a 	mov	r4,r2
    450c:	180b883a 	mov	r5,r3
    4510:	980d883a 	mov	r6,r19
    4514:	a00f883a 	mov	r7,r20
    4518:	00096300 	call	9630 <__muldf3>
    451c:	1009883a 	mov	r4,r2
    4520:	180b883a 	mov	r5,r3
    4524:	000d883a 	mov	r6,zero
    4528:	01d00734 	movhi	r7,16412
    452c:	000957c0 	call	957c <__adddf3>
    4530:	057f3034 	movhi	r21,64704
    4534:	1025883a 	mov	r18,r2
    4538:	1d6b883a 	add	r21,r3,r21
    453c:	9809883a 	mov	r4,r19
    4540:	a00b883a 	mov	r5,r20
    4544:	000d883a 	mov	r6,zero
    4548:	01d00534 	movhi	r7,16404
    454c:	00095d00 	call	95d0 <__subdf3>
    4550:	1009883a 	mov	r4,r2
    4554:	180b883a 	mov	r5,r3
    4558:	900d883a 	mov	r6,r18
    455c:	a80f883a 	mov	r7,r21
    4560:	1027883a 	mov	r19,r2
    4564:	1829883a 	mov	r20,r3
    4568:	0009b800 	call	9b80 <__gtdf2>
    456c:	00806616 	blt	zero,r2,4708 <_dtoa_r+0x12f8>
    4570:	a9e0003c 	xorhi	r7,r21,32768
    4574:	9809883a 	mov	r4,r19
    4578:	a00b883a 	mov	r5,r20
    457c:	900d883a 	mov	r6,r18
    4580:	0009c480 	call	9c48 <__ltdf2>
    4584:	103d710e 	bge	r2,zero,3b4c <_dtoa_r+0x73c>
    4588:	0029883a 	mov	r20,zero
    458c:	002b883a 	mov	r21,zero
    4590:	003f5406 	br	42e4 <_dtoa_r+0xed4>
    4594:	d9800a17 	ldw	r6,40(sp)
    4598:	e00b883a 	mov	r5,fp
    459c:	8009883a 	mov	r4,r16
    45a0:	0006eec0 	call	6eec <__pow5mult>
    45a4:	1039883a 	mov	fp,r2
    45a8:	003e2e06 	br	3e64 <_dtoa_r+0xa54>
    45ac:	d8000c15 	stw	zero,48(sp)
    45b0:	003f2006 	br	4234 <_dtoa_r+0xe24>
    45b4:	00800044 	movi	r2,1
    45b8:	d8800c15 	stw	r2,48(sp)
    45bc:	003c5d06 	br	3734 <_dtoa_r+0x324>
    45c0:	d8c00a17 	ldw	r3,40(sp)
    45c4:	d9000b17 	ldw	r4,44(sp)
    45c8:	dcc00a15 	stw	r19,40(sp)
    45cc:	98c5c83a 	sub	r2,r19,r3
    45d0:	2089883a 	add	r4,r4,r2
    45d4:	d9000b15 	stw	r4,44(sp)
    45d8:	0027883a 	mov	r19,zero
    45dc:	003df206 	br	3da8 <_dtoa_r+0x998>
    45e0:	d9000317 	ldw	r4,12(sp)
    45e4:	8829883a 	mov	r20,r17
    45e8:	04800084 	movi	r18,2
    45ec:	d9001015 	stw	r4,64(sp)
    45f0:	003c8106 	br	37f8 <_dtoa_r+0x3e8>
    45f4:	04800044 	movi	r18,1
    45f8:	dc800e15 	stw	r18,56(sp)
    45fc:	dc800915 	stw	r18,36(sp)
    4600:	dc802115 	stw	r18,132(sp)
    4604:	003f1206 	br	4250 <_dtoa_r+0xe40>
    4608:	d8800617 	ldw	r2,24(sp)
    460c:	00abc83a 	sub	r21,zero,r2
    4610:	a800a426 	beq	r21,zero,48a4 <_dtoa_r+0x1494>
    4614:	a88003cc 	andi	r2,r21,15
    4618:	100490fa 	slli	r2,r2,3
    461c:	00c00074 	movhi	r3,1
    4620:	18f50f04 	addi	r3,r3,-11204
    4624:	d9000317 	ldw	r4,12(sp)
    4628:	1885883a 	add	r2,r3,r2
    462c:	11800017 	ldw	r6,0(r2)
    4630:	11c00117 	ldw	r7,4(r2)
    4634:	a82bd13a 	srai	r21,r21,4
    4638:	880b883a 	mov	r5,r17
    463c:	00096300 	call	9630 <__muldf3>
    4640:	1027883a 	mov	r19,r2
    4644:	1829883a 	mov	r20,r3
    4648:	a800e826 	beq	r21,zero,49ec <_dtoa_r+0x15dc>
    464c:	05800074 	movhi	r22,1
    4650:	b5b50504 	addi	r22,r22,-11244
    4654:	04800084 	movi	r18,2
    4658:	a980004c 	andi	r6,r21,1
    465c:	1009883a 	mov	r4,r2
    4660:	a82bd07a 	srai	r21,r21,1
    4664:	180b883a 	mov	r5,r3
    4668:	30000426 	beq	r6,zero,467c <_dtoa_r+0x126c>
    466c:	b1800017 	ldw	r6,0(r22)
    4670:	b1c00117 	ldw	r7,4(r22)
    4674:	94800044 	addi	r18,r18,1
    4678:	00096300 	call	9630 <__muldf3>
    467c:	b5800204 	addi	r22,r22,8
    4680:	a83ff51e 	bne	r21,zero,4658 <_dtoa_r+0x1248>
    4684:	1027883a 	mov	r19,r2
    4688:	1829883a 	mov	r20,r3
    468c:	003c7306 	br	385c <_dtoa_r+0x44c>
    4690:	21000044 	addi	r4,r4,1
    4694:	11000005 	stb	r4,0(r2)
    4698:	003e5c06 	br	400c <_dtoa_r+0xbfc>
    469c:	a9400117 	ldw	r5,4(r21)
    46a0:	8009883a 	mov	r4,r16
    46a4:	00068280 	call	6828 <_Balloc>
    46a8:	a9800417 	ldw	r6,16(r21)
    46ac:	11000304 	addi	r4,r2,12
    46b0:	a9400304 	addi	r5,r21,12
    46b4:	31800084 	addi	r6,r6,2
    46b8:	318d883a 	add	r6,r6,r6
    46bc:	318d883a 	add	r6,r6,r6
    46c0:	1023883a 	mov	r17,r2
    46c4:	00064800 	call	6480 <memcpy>
    46c8:	8009883a 	mov	r4,r16
    46cc:	880b883a 	mov	r5,r17
    46d0:	01800044 	movi	r6,1
    46d4:	00070180 	call	7018 <__lshift>
    46d8:	1027883a 	mov	r19,r2
    46dc:	003e8f06 	br	411c <_dtoa_r+0xd0c>
    46e0:	b807883a 	mov	r3,r23
    46e4:	00800e44 	movi	r2,57
    46e8:	ddc00717 	ldw	r23,28(sp)
    46ec:	18809026 	beq	r3,r2,4930 <_dtoa_r+0x1520>
    46f0:	18c00044 	addi	r3,r3,1
    46f4:	003f2b06 	br	43a4 <_dtoa_r+0xf94>
    46f8:	b807883a 	mov	r3,r23
    46fc:	982b883a 	mov	r21,r19
    4700:	ddc00717 	ldw	r23,28(sp)
    4704:	003e2406 	br	3f98 <_dtoa_r+0xb88>
    4708:	0029883a 	mov	r20,zero
    470c:	002b883a 	mov	r21,zero
    4710:	003f7206 	br	44dc <_dtoa_r+0x10cc>
    4714:	593fffc4 	addi	r4,r11,-1
    4718:	200490fa 	slli	r2,r4,3
    471c:	00c00074 	movhi	r3,1
    4720:	18f50f04 	addi	r3,r3,-11204
    4724:	d9001015 	stw	r4,64(sp)
    4728:	1885883a 	add	r2,r3,r2
    472c:	11000017 	ldw	r4,0(r2)
    4730:	11400117 	ldw	r5,4(r2)
    4734:	900d883a 	mov	r6,r18
    4738:	a80f883a 	mov	r7,r21
    473c:	dac01615 	stw	r11,88(sp)
    4740:	00096300 	call	9630 <__muldf3>
    4744:	a00b883a 	mov	r5,r20
    4748:	9809883a 	mov	r4,r19
    474c:	d8c01215 	stw	r3,72(sp)
    4750:	d8801115 	stw	r2,68(sp)
    4754:	0009d780 	call	9d78 <__fixdfsi>
    4758:	1009883a 	mov	r4,r2
    475c:	1025883a 	mov	r18,r2
    4760:	0009ca40 	call	9ca4 <__floatsidf>
    4764:	9809883a 	mov	r4,r19
    4768:	a00b883a 	mov	r5,r20
    476c:	100d883a 	mov	r6,r2
    4770:	180f883a 	mov	r7,r3
    4774:	94800c04 	addi	r18,r18,48
    4778:	00095d00 	call	95d0 <__subdf3>
    477c:	bc800005 	stb	r18,0(r23)
    4780:	dac01617 	ldw	r11,88(sp)
    4784:	102b883a 	mov	r21,r2
    4788:	00800044 	movi	r2,1
    478c:	bd800044 	addi	r22,r23,1
    4790:	1815883a 	mov	r10,r3
    4794:	58802226 	beq	r11,r2,4820 <_dtoa_r+0x1410>
    4798:	bad7883a 	add	r11,r23,r11
    479c:	dc001415 	stw	r16,80(sp)
    47a0:	a805883a 	mov	r2,r21
    47a4:	b027883a 	mov	r19,r22
    47a8:	5821883a 	mov	r16,r11
    47ac:	882b883a 	mov	r21,r17
    47b0:	000d883a 	mov	r6,zero
    47b4:	01d00934 	movhi	r7,16420
    47b8:	1009883a 	mov	r4,r2
    47bc:	180b883a 	mov	r5,r3
    47c0:	00096300 	call	9630 <__muldf3>
    47c4:	180b883a 	mov	r5,r3
    47c8:	1009883a 	mov	r4,r2
    47cc:	1829883a 	mov	r20,r3
    47d0:	1023883a 	mov	r17,r2
    47d4:	0009d780 	call	9d78 <__fixdfsi>
    47d8:	1009883a 	mov	r4,r2
    47dc:	1025883a 	mov	r18,r2
    47e0:	0009ca40 	call	9ca4 <__floatsidf>
    47e4:	8809883a 	mov	r4,r17
    47e8:	a00b883a 	mov	r5,r20
    47ec:	100d883a 	mov	r6,r2
    47f0:	180f883a 	mov	r7,r3
    47f4:	94800c04 	addi	r18,r18,48
    47f8:	00095d00 	call	95d0 <__subdf3>
    47fc:	9cc00044 	addi	r19,r19,1
    4800:	9cbfffc5 	stb	r18,-1(r19)
    4804:	9c3fea1e 	bne	r19,r16,47b0 <_dtoa_r+0x13a0>
    4808:	1815883a 	mov	r10,r3
    480c:	d8c01017 	ldw	r3,64(sp)
    4810:	dc001417 	ldw	r16,80(sp)
    4814:	a823883a 	mov	r17,r21
    4818:	b0ed883a 	add	r22,r22,r3
    481c:	102b883a 	mov	r21,r2
    4820:	d9001117 	ldw	r4,68(sp)
    4824:	d9401217 	ldw	r5,72(sp)
    4828:	000d883a 	mov	r6,zero
    482c:	01cff834 	movhi	r7,16352
    4830:	da801515 	stw	r10,84(sp)
    4834:	000957c0 	call	957c <__adddf3>
    4838:	da801517 	ldw	r10,84(sp)
    483c:	1009883a 	mov	r4,r2
    4840:	180b883a 	mov	r5,r3
    4844:	500f883a 	mov	r7,r10
    4848:	a80d883a 	mov	r6,r21
    484c:	0009c480 	call	9c48 <__ltdf2>
    4850:	da801517 	ldw	r10,84(sp)
    4854:	10003b0e 	bge	r2,zero,4944 <_dtoa_r+0x1534>
    4858:	d9c01317 	ldw	r7,76(sp)
    485c:	b53fffc3 	ldbu	r20,-1(r22)
    4860:	d9c00615 	stw	r7,24(sp)
    4864:	003d3106 	br	3d2c <_dtoa_r+0x91c>
    4868:	d8800817 	ldw	r2,32(sp)
    486c:	11e5c83a 	sub	r18,r2,r7
    4870:	0005883a 	mov	r2,zero
    4874:	003d5006 	br	3db8 <_dtoa_r+0x9a8>
    4878:	05800044 	movi	r22,1
    487c:	003dc406 	br	3f90 <_dtoa_r+0xb80>
    4880:	a5000044 	addi	r20,r20,1
    4884:	15000005 	stb	r20,0(r2)
    4888:	003c8206 	br	3a94 <_dtoa_r+0x684>
    488c:	d8800217 	ldw	r2,8(sp)
    4890:	00c00d84 	movi	r3,54
    4894:	dcc00a17 	ldw	r19,40(sp)
    4898:	1885c83a 	sub	r2,r3,r2
    489c:	dc800817 	ldw	r18,32(sp)
    48a0:	003d4506 	br	3db8 <_dtoa_r+0x9a8>
    48a4:	dcc00317 	ldw	r19,12(sp)
    48a8:	8829883a 	mov	r20,r17
    48ac:	04800084 	movi	r18,2
    48b0:	003bea06 	br	385c <_dtoa_r+0x44c>
    48b4:	d9000917 	ldw	r4,36(sp)
    48b8:	203f1126 	beq	r4,zero,4500 <_dtoa_r+0x10f0>
    48bc:	d9c00e17 	ldw	r7,56(sp)
    48c0:	01fca20e 	bge	zero,r7,3b4c <_dtoa_r+0x73c>
    48c4:	a00b883a 	mov	r5,r20
    48c8:	9809883a 	mov	r4,r19
    48cc:	000d883a 	mov	r6,zero
    48d0:	01d00934 	movhi	r7,16420
    48d4:	00096300 	call	9630 <__muldf3>
    48d8:	91000044 	addi	r4,r18,1
    48dc:	1027883a 	mov	r19,r2
    48e0:	1829883a 	mov	r20,r3
    48e4:	0009ca40 	call	9ca4 <__floatsidf>
    48e8:	9809883a 	mov	r4,r19
    48ec:	a00b883a 	mov	r5,r20
    48f0:	100d883a 	mov	r6,r2
    48f4:	180f883a 	mov	r7,r3
    48f8:	00096300 	call	9630 <__muldf3>
    48fc:	1009883a 	mov	r4,r2
    4900:	180b883a 	mov	r5,r3
    4904:	000d883a 	mov	r6,zero
    4908:	01d00734 	movhi	r7,16412
    490c:	000957c0 	call	957c <__adddf3>
    4910:	1025883a 	mov	r18,r2
    4914:	d8800617 	ldw	r2,24(sp)
    4918:	057f3034 	movhi	r21,64704
    491c:	1d6b883a 	add	r21,r3,r21
    4920:	10bfffc4 	addi	r2,r2,-1
    4924:	d8801315 	stw	r2,76(sp)
    4928:	dac00e17 	ldw	r11,56(sp)
    492c:	003be706 	br	38cc <_dtoa_r+0x4bc>
    4930:	01000e44 	movi	r4,57
    4934:	91000005 	stb	r4,0(r18)
    4938:	95800044 	addi	r22,r18,1
    493c:	982b883a 	mov	r21,r19
    4940:	003da106 	br	3fc8 <_dtoa_r+0xbb8>
    4944:	d9801117 	ldw	r6,68(sp)
    4948:	d9c01217 	ldw	r7,72(sp)
    494c:	0009883a 	mov	r4,zero
    4950:	014ff834 	movhi	r5,16352
    4954:	da801515 	stw	r10,84(sp)
    4958:	00095d00 	call	95d0 <__subdf3>
    495c:	da801517 	ldw	r10,84(sp)
    4960:	1009883a 	mov	r4,r2
    4964:	180b883a 	mov	r5,r3
    4968:	a80d883a 	mov	r6,r21
    496c:	500f883a 	mov	r7,r10
    4970:	0009b800 	call	9b80 <__gtdf2>
    4974:	00bc750e 	bge	zero,r2,3b4c <_dtoa_r+0x73c>
    4978:	01000c04 	movi	r4,48
    497c:	00000106 	br	4984 <_dtoa_r+0x1574>
    4980:	102d883a 	mov	r22,r2
    4984:	b0bfffc4 	addi	r2,r22,-1
    4988:	10c00007 	ldb	r3,0(r2)
    498c:	193ffc26 	beq	r3,r4,4980 <_dtoa_r+0x1570>
    4990:	d8801317 	ldw	r2,76(sp)
    4994:	d8800615 	stw	r2,24(sp)
    4998:	003c3e06 	br	3a94 <_dtoa_r+0x684>
    499c:	d9001317 	ldw	r4,76(sp)
    49a0:	df001117 	ldw	fp,68(sp)
    49a4:	d9000615 	stw	r4,24(sp)
    49a8:	003ce006 	br	3d2c <_dtoa_r+0x91c>
    49ac:	df001117 	ldw	fp,68(sp)
    49b0:	dc401217 	ldw	r17,72(sp)
    49b4:	003c6506 	br	3b4c <_dtoa_r+0x73c>
    49b8:	103e7a1e 	bne	r2,zero,43a4 <_dtoa_r+0xf94>
    49bc:	1880004c 	andi	r2,r3,1
    49c0:	103e7826 	beq	r2,zero,43a4 <_dtoa_r+0xf94>
    49c4:	003e7406 	br	4398 <_dtoa_r+0xf88>
    49c8:	8009883a 	mov	r4,r16
    49cc:	a80b883a 	mov	r5,r21
    49d0:	01800284 	movi	r6,10
    49d4:	000f883a 	mov	r7,zero
    49d8:	00068f80 	call	68f8 <__multadd>
    49dc:	d9000e17 	ldw	r4,56(sp)
    49e0:	102b883a 	mov	r21,r2
    49e4:	d9000915 	stw	r4,36(sp)
    49e8:	003d5106 	br	3f30 <_dtoa_r+0xb20>
    49ec:	04800084 	movi	r18,2
    49f0:	003b9a06 	br	385c <_dtoa_r+0x44c>
    49f4:	d8c01317 	ldw	r3,76(sp)
    49f8:	d8c00615 	stw	r3,24(sp)
    49fc:	003ccb06 	br	3d2c <_dtoa_r+0x91c>
    4a00:	d8c01317 	ldw	r3,76(sp)
    4a04:	d8c00615 	stw	r3,24(sp)
    4a08:	003c2206 	br	3a94 <_dtoa_r+0x684>
    4a0c:	20fd3826 	beq	r4,r3,3ef0 <_dtoa_r+0xae0>
    4a10:	00c00f04 	movi	r3,60
    4a14:	1885c83a 	sub	r2,r3,r2
    4a18:	003da906 	br	40c0 <_dtoa_r+0xcb0>
    4a1c:	000b883a 	mov	r5,zero
    4a20:	003b5406 	br	3774 <_dtoa_r+0x364>
    4a24:	04c00044 	movi	r19,1
    4a28:	003b3b06 	br	3718 <_dtoa_r+0x308>

00004a2c <_fflush_r>:
    4a2c:	defffb04 	addi	sp,sp,-20
    4a30:	dcc00315 	stw	r19,12(sp)
    4a34:	dc400115 	stw	r17,4(sp)
    4a38:	dfc00415 	stw	ra,16(sp)
    4a3c:	dc800215 	stw	r18,8(sp)
    4a40:	dc000015 	stw	r16,0(sp)
    4a44:	2027883a 	mov	r19,r4
    4a48:	2823883a 	mov	r17,r5
    4a4c:	20000226 	beq	r4,zero,4a58 <_fflush_r+0x2c>
    4a50:	20800e17 	ldw	r2,56(r4)
    4a54:	10005726 	beq	r2,zero,4bb4 <_fflush_r+0x188>
    4a58:	8880030b 	ldhu	r2,12(r17)
    4a5c:	10c0020c 	andi	r3,r2,8
    4a60:	18ffffcc 	andi	r3,r3,65535
    4a64:	18e0001c 	xori	r3,r3,32768
    4a68:	18e00004 	addi	r3,r3,-32768
    4a6c:	1800311e 	bne	r3,zero,4b34 <_fflush_r+0x108>
    4a70:	89000117 	ldw	r4,4(r17)
    4a74:	10c20014 	ori	r3,r2,2048
    4a78:	88c0030d 	sth	r3,12(r17)
    4a7c:	180b883a 	mov	r5,r3
    4a80:	0100520e 	bge	zero,r4,4bcc <_fflush_r+0x1a0>
    4a84:	88c00a17 	ldw	r3,40(r17)
    4a88:	18002226 	beq	r3,zero,4b14 <_fflush_r+0xe8>
    4a8c:	1084000c 	andi	r2,r2,4096
    4a90:	10bfffcc 	andi	r2,r2,65535
    4a94:	10a0001c 	xori	r2,r2,32768
    4a98:	10a00004 	addi	r2,r2,-32768
    4a9c:	10004e26 	beq	r2,zero,4bd8 <_fflush_r+0x1ac>
    4aa0:	8c001417 	ldw	r16,80(r17)
    4aa4:	2940010c 	andi	r5,r5,4
    4aa8:	297fffcc 	andi	r5,r5,65535
    4aac:	2960001c 	xori	r5,r5,32768
    4ab0:	29600004 	addi	r5,r5,-32768
    4ab4:	28000626 	beq	r5,zero,4ad0 <_fflush_r+0xa4>
    4ab8:	89000117 	ldw	r4,4(r17)
    4abc:	88800c17 	ldw	r2,48(r17)
    4ac0:	8121c83a 	sub	r16,r16,r4
    4ac4:	10000226 	beq	r2,zero,4ad0 <_fflush_r+0xa4>
    4ac8:	88800f17 	ldw	r2,60(r17)
    4acc:	80a1c83a 	sub	r16,r16,r2
    4ad0:	89400717 	ldw	r5,28(r17)
    4ad4:	9809883a 	mov	r4,r19
    4ad8:	800d883a 	mov	r6,r16
    4adc:	000f883a 	mov	r7,zero
    4ae0:	183ee83a 	callr	r3
    4ae4:	8080281e 	bne	r16,r2,4b88 <_fflush_r+0x15c>
    4ae8:	8880030b 	ldhu	r2,12(r17)
    4aec:	88c00417 	ldw	r3,16(r17)
    4af0:	88000115 	stw	zero,4(r17)
    4af4:	113dffcc 	andi	r4,r2,63487
    4af8:	1084000c 	andi	r2,r2,4096
    4afc:	10bfffcc 	andi	r2,r2,65535
    4b00:	10a0001c 	xori	r2,r2,32768
    4b04:	8900030d 	sth	r4,12(r17)
    4b08:	88c00015 	stw	r3,0(r17)
    4b0c:	10a00004 	addi	r2,r2,-32768
    4b10:	10002c1e 	bne	r2,zero,4bc4 <_fflush_r+0x198>
    4b14:	0005883a 	mov	r2,zero
    4b18:	dfc00417 	ldw	ra,16(sp)
    4b1c:	dcc00317 	ldw	r19,12(sp)
    4b20:	dc800217 	ldw	r18,8(sp)
    4b24:	dc400117 	ldw	r17,4(sp)
    4b28:	dc000017 	ldw	r16,0(sp)
    4b2c:	dec00504 	addi	sp,sp,20
    4b30:	f800283a 	ret
    4b34:	8c800417 	ldw	r18,16(r17)
    4b38:	903ff626 	beq	r18,zero,4b14 <_fflush_r+0xe8>
    4b3c:	8c000017 	ldw	r16,0(r17)
    4b40:	108000cc 	andi	r2,r2,3
    4b44:	8c800015 	stw	r18,0(r17)
    4b48:	84a1c83a 	sub	r16,r16,r18
    4b4c:	10001b1e 	bne	r2,zero,4bbc <_fflush_r+0x190>
    4b50:	88800517 	ldw	r2,20(r17)
    4b54:	88800215 	stw	r2,8(r17)
    4b58:	04000316 	blt	zero,r16,4b68 <_fflush_r+0x13c>
    4b5c:	003fed06 	br	4b14 <_fflush_r+0xe8>
    4b60:	90a5883a 	add	r18,r18,r2
    4b64:	043feb0e 	bge	zero,r16,4b14 <_fflush_r+0xe8>
    4b68:	88800917 	ldw	r2,36(r17)
    4b6c:	89400717 	ldw	r5,28(r17)
    4b70:	800f883a 	mov	r7,r16
    4b74:	900d883a 	mov	r6,r18
    4b78:	9809883a 	mov	r4,r19
    4b7c:	103ee83a 	callr	r2
    4b80:	80a1c83a 	sub	r16,r16,r2
    4b84:	00bff616 	blt	zero,r2,4b60 <_fflush_r+0x134>
    4b88:	88c0030b 	ldhu	r3,12(r17)
    4b8c:	00bfffc4 	movi	r2,-1
    4b90:	18c01014 	ori	r3,r3,64
    4b94:	88c0030d 	sth	r3,12(r17)
    4b98:	dfc00417 	ldw	ra,16(sp)
    4b9c:	dcc00317 	ldw	r19,12(sp)
    4ba0:	dc800217 	ldw	r18,8(sp)
    4ba4:	dc400117 	ldw	r17,4(sp)
    4ba8:	dc000017 	ldw	r16,0(sp)
    4bac:	dec00504 	addi	sp,sp,20
    4bb0:	f800283a 	ret
    4bb4:	0004ce80 	call	4ce8 <__sinit>
    4bb8:	003fa706 	br	4a58 <_fflush_r+0x2c>
    4bbc:	0005883a 	mov	r2,zero
    4bc0:	003fe406 	br	4b54 <_fflush_r+0x128>
    4bc4:	8c001415 	stw	r16,80(r17)
    4bc8:	003fd206 	br	4b14 <_fflush_r+0xe8>
    4bcc:	88c00f17 	ldw	r3,60(r17)
    4bd0:	00ffac16 	blt	zero,r3,4a84 <_fflush_r+0x58>
    4bd4:	003fcf06 	br	4b14 <_fflush_r+0xe8>
    4bd8:	89400717 	ldw	r5,28(r17)
    4bdc:	9809883a 	mov	r4,r19
    4be0:	000d883a 	mov	r6,zero
    4be4:	01c00044 	movi	r7,1
    4be8:	183ee83a 	callr	r3
    4bec:	1021883a 	mov	r16,r2
    4bf0:	00bfffc4 	movi	r2,-1
    4bf4:	80800326 	beq	r16,r2,4c04 <_fflush_r+0x1d8>
    4bf8:	8940030b 	ldhu	r5,12(r17)
    4bfc:	88c00a17 	ldw	r3,40(r17)
    4c00:	003fa806 	br	4aa4 <_fflush_r+0x78>
    4c04:	98c00017 	ldw	r3,0(r19)
    4c08:	00800744 	movi	r2,29
    4c0c:	18bfde1e 	bne	r3,r2,4b88 <_fflush_r+0x15c>
    4c10:	003fc006 	br	4b14 <_fflush_r+0xe8>

00004c14 <fflush>:
    4c14:	200b883a 	mov	r5,r4
    4c18:	20000426 	beq	r4,zero,4c2c <fflush+0x18>
    4c1c:	00800074 	movhi	r2,1
    4c20:	10bc1c04 	addi	r2,r2,-3984
    4c24:	11000017 	ldw	r4,0(r2)
    4c28:	0004a2c1 	jmpi	4a2c <_fflush_r>
    4c2c:	00800074 	movhi	r2,1
    4c30:	10bc1b04 	addi	r2,r2,-3988
    4c34:	11000017 	ldw	r4,0(r2)
    4c38:	01400034 	movhi	r5,0
    4c3c:	29528b04 	addi	r5,r5,18988
    4c40:	00058c81 	jmpi	58c8 <_fwalk_reent>

00004c44 <__fp_lock>:
    4c44:	0005883a 	mov	r2,zero
    4c48:	f800283a 	ret

00004c4c <__fp_unlock>:
    4c4c:	0005883a 	mov	r2,zero
    4c50:	f800283a 	ret

00004c54 <_cleanup_r>:
    4c54:	01400074 	movhi	r5,1
    4c58:	2960fe04 	addi	r5,r5,-31752
    4c5c:	00058201 	jmpi	5820 <_fwalk>

00004c60 <__sfmoreglue>:
    4c60:	defffc04 	addi	sp,sp,-16
    4c64:	dc800215 	stw	r18,8(sp)
    4c68:	2825883a 	mov	r18,r5
    4c6c:	dc000015 	stw	r16,0(sp)
    4c70:	01401704 	movi	r5,92
    4c74:	2021883a 	mov	r16,r4
    4c78:	9009883a 	mov	r4,r18
    4c7c:	dfc00315 	stw	ra,12(sp)
    4c80:	dc400115 	stw	r17,4(sp)
    4c84:	0000e000 	call	e00 <__mulsi3>
    4c88:	8009883a 	mov	r4,r16
    4c8c:	11400304 	addi	r5,r2,12
    4c90:	1023883a 	mov	r17,r2
    4c94:	0005c040 	call	5c04 <_malloc_r>
    4c98:	1021883a 	mov	r16,r2
    4c9c:	10000726 	beq	r2,zero,4cbc <__sfmoreglue+0x5c>
    4ca0:	11000304 	addi	r4,r2,12
    4ca4:	10000015 	stw	zero,0(r2)
    4ca8:	14800115 	stw	r18,4(r2)
    4cac:	11000215 	stw	r4,8(r2)
    4cb0:	000b883a 	mov	r5,zero
    4cb4:	880d883a 	mov	r6,r17
    4cb8:	000674c0 	call	674c <memset>
    4cbc:	8005883a 	mov	r2,r16
    4cc0:	dfc00317 	ldw	ra,12(sp)
    4cc4:	dc800217 	ldw	r18,8(sp)
    4cc8:	dc400117 	ldw	r17,4(sp)
    4ccc:	dc000017 	ldw	r16,0(sp)
    4cd0:	dec00404 	addi	sp,sp,16
    4cd4:	f800283a 	ret

00004cd8 <_cleanup>:
    4cd8:	00800074 	movhi	r2,1
    4cdc:	10bc1b04 	addi	r2,r2,-3988
    4ce0:	11000017 	ldw	r4,0(r2)
    4ce4:	0004c541 	jmpi	4c54 <_cleanup_r>

00004ce8 <__sinit>:
    4ce8:	20800e17 	ldw	r2,56(r4)
    4cec:	1000401e 	bne	r2,zero,4df0 <__sinit+0x108>
    4cf0:	21400117 	ldw	r5,4(r4)
    4cf4:	01800034 	movhi	r6,0
    4cf8:	31931504 	addi	r6,r6,19540
    4cfc:	20c00217 	ldw	r3,8(r4)
    4d00:	21800f15 	stw	r6,60(r4)
    4d04:	2080bb04 	addi	r2,r4,748
    4d08:	02400044 	movi	r9,1
    4d0c:	018000c4 	movi	r6,3
    4d10:	2180b915 	stw	r6,740(r4)
    4d14:	2080ba15 	stw	r2,744(r4)
    4d18:	22400e15 	stw	r9,56(r4)
    4d1c:	20800317 	ldw	r2,12(r4)
    4d20:	2000b815 	stw	zero,736(r4)
    4d24:	02000034 	movhi	r8,0
    4d28:	421fcf04 	addi	r8,r8,32572
    4d2c:	01c00034 	movhi	r7,0
    4d30:	39dfe404 	addi	r7,r7,32656
    4d34:	01800074 	movhi	r6,1
    4d38:	31a00604 	addi	r6,r6,-32744
    4d3c:	01000074 	movhi	r4,1
    4d40:	21201d04 	addi	r4,r4,-32652
    4d44:	02800104 	movi	r10,4
    4d48:	28000015 	stw	zero,0(r5)
    4d4c:	28000115 	stw	zero,4(r5)
    4d50:	28000215 	stw	zero,8(r5)
    4d54:	2a80030d 	sth	r10,12(r5)
    4d58:	2800038d 	sth	zero,14(r5)
    4d5c:	28000415 	stw	zero,16(r5)
    4d60:	28000515 	stw	zero,20(r5)
    4d64:	28000615 	stw	zero,24(r5)
    4d68:	29400715 	stw	r5,28(r5)
    4d6c:	2a000815 	stw	r8,32(r5)
    4d70:	29c00915 	stw	r7,36(r5)
    4d74:	29800a15 	stw	r6,40(r5)
    4d78:	29000b15 	stw	r4,44(r5)
    4d7c:	01400284 	movi	r5,10
    4d80:	18000015 	stw	zero,0(r3)
    4d84:	18000115 	stw	zero,4(r3)
    4d88:	18000215 	stw	zero,8(r3)
    4d8c:	1940030d 	sth	r5,12(r3)
    4d90:	1a40038d 	sth	r9,14(r3)
    4d94:	18000415 	stw	zero,16(r3)
    4d98:	18000515 	stw	zero,20(r3)
    4d9c:	18000615 	stw	zero,24(r3)
    4da0:	18c00715 	stw	r3,28(r3)
    4da4:	1a000815 	stw	r8,32(r3)
    4da8:	19c00915 	stw	r7,36(r3)
    4dac:	19800a15 	stw	r6,40(r3)
    4db0:	19000b15 	stw	r4,44(r3)
    4db4:	00c00484 	movi	r3,18
    4db8:	10c0030d 	sth	r3,12(r2)
    4dbc:	00c00084 	movi	r3,2
    4dc0:	10000015 	stw	zero,0(r2)
    4dc4:	10000115 	stw	zero,4(r2)
    4dc8:	10000215 	stw	zero,8(r2)
    4dcc:	10c0038d 	sth	r3,14(r2)
    4dd0:	10000415 	stw	zero,16(r2)
    4dd4:	10000515 	stw	zero,20(r2)
    4dd8:	10000615 	stw	zero,24(r2)
    4ddc:	10800715 	stw	r2,28(r2)
    4de0:	12000815 	stw	r8,32(r2)
    4de4:	11c00915 	stw	r7,36(r2)
    4de8:	11800a15 	stw	r6,40(r2)
    4dec:	11000b15 	stw	r4,44(r2)
    4df0:	f800283a 	ret

00004df4 <__sfp>:
    4df4:	defffc04 	addi	sp,sp,-16
    4df8:	00800074 	movhi	r2,1
    4dfc:	10bc1b04 	addi	r2,r2,-3988
    4e00:	dc400115 	stw	r17,4(sp)
    4e04:	14400017 	ldw	r17,0(r2)
    4e08:	dc800215 	stw	r18,8(sp)
    4e0c:	dfc00315 	stw	ra,12(sp)
    4e10:	88800e17 	ldw	r2,56(r17)
    4e14:	dc000015 	stw	r16,0(sp)
    4e18:	2025883a 	mov	r18,r4
    4e1c:	10002826 	beq	r2,zero,4ec0 <__sfp+0xcc>
    4e20:	8c40b804 	addi	r17,r17,736
    4e24:	043fffc4 	movi	r16,-1
    4e28:	89400117 	ldw	r5,4(r17)
    4e2c:	88800217 	ldw	r2,8(r17)
    4e30:	297fffc4 	addi	r5,r5,-1
    4e34:	28000a16 	blt	r5,zero,4e60 <__sfp+0x6c>
    4e38:	10c0030f 	ldh	r3,12(r2)
    4e3c:	18000c26 	beq	r3,zero,4e70 <__sfp+0x7c>
    4e40:	10c01a04 	addi	r3,r2,104
    4e44:	00000206 	br	4e50 <__sfp+0x5c>
    4e48:	19bfe90f 	ldh	r6,-92(r3)
    4e4c:	30000826 	beq	r6,zero,4e70 <__sfp+0x7c>
    4e50:	297fffc4 	addi	r5,r5,-1
    4e54:	18bffd04 	addi	r2,r3,-12
    4e58:	18c01704 	addi	r3,r3,92
    4e5c:	2c3ffa1e 	bne	r5,r16,4e48 <__sfp+0x54>
    4e60:	88800017 	ldw	r2,0(r17)
    4e64:	10001926 	beq	r2,zero,4ecc <__sfp+0xd8>
    4e68:	1023883a 	mov	r17,r2
    4e6c:	003fee06 	br	4e28 <__sfp+0x34>
    4e70:	00ffffc4 	movi	r3,-1
    4e74:	10c0038d 	sth	r3,14(r2)
    4e78:	00c00044 	movi	r3,1
    4e7c:	10c0030d 	sth	r3,12(r2)
    4e80:	10000015 	stw	zero,0(r2)
    4e84:	10000215 	stw	zero,8(r2)
    4e88:	10000115 	stw	zero,4(r2)
    4e8c:	10000415 	stw	zero,16(r2)
    4e90:	10000515 	stw	zero,20(r2)
    4e94:	10000615 	stw	zero,24(r2)
    4e98:	10000c15 	stw	zero,48(r2)
    4e9c:	10000d15 	stw	zero,52(r2)
    4ea0:	10001115 	stw	zero,68(r2)
    4ea4:	10001215 	stw	zero,72(r2)
    4ea8:	dfc00317 	ldw	ra,12(sp)
    4eac:	dc800217 	ldw	r18,8(sp)
    4eb0:	dc400117 	ldw	r17,4(sp)
    4eb4:	dc000017 	ldw	r16,0(sp)
    4eb8:	dec00404 	addi	sp,sp,16
    4ebc:	f800283a 	ret
    4ec0:	8809883a 	mov	r4,r17
    4ec4:	0004ce80 	call	4ce8 <__sinit>
    4ec8:	003fd506 	br	4e20 <__sfp+0x2c>
    4ecc:	9009883a 	mov	r4,r18
    4ed0:	01400104 	movi	r5,4
    4ed4:	0004c600 	call	4c60 <__sfmoreglue>
    4ed8:	88800015 	stw	r2,0(r17)
    4edc:	103fe21e 	bne	r2,zero,4e68 <__sfp+0x74>
    4ee0:	00800304 	movi	r2,12
    4ee4:	90800015 	stw	r2,0(r18)
    4ee8:	0005883a 	mov	r2,zero
    4eec:	003fee06 	br	4ea8 <__sfp+0xb4>

00004ef0 <__sfp_lock_acquire>:
    4ef0:	f800283a 	ret

00004ef4 <__sfp_lock_release>:
    4ef4:	f800283a 	ret

00004ef8 <__sinit_lock_acquire>:
    4ef8:	f800283a 	ret

00004efc <__sinit_lock_release>:
    4efc:	f800283a 	ret

00004f00 <__fp_lock_all>:
    4f00:	00800074 	movhi	r2,1
    4f04:	10bc1c04 	addi	r2,r2,-3984
    4f08:	11000017 	ldw	r4,0(r2)
    4f0c:	01400034 	movhi	r5,0
    4f10:	29531104 	addi	r5,r5,19524
    4f14:	00058201 	jmpi	5820 <_fwalk>

00004f18 <__fp_unlock_all>:
    4f18:	00800074 	movhi	r2,1
    4f1c:	10bc1c04 	addi	r2,r2,-3984
    4f20:	11000017 	ldw	r4,0(r2)
    4f24:	01400034 	movhi	r5,0
    4f28:	29531304 	addi	r5,r5,19532
    4f2c:	00058201 	jmpi	5820 <_fwalk>

00004f30 <_malloc_trim_r>:
    4f30:	defffb04 	addi	sp,sp,-20
    4f34:	dcc00315 	stw	r19,12(sp)
    4f38:	dc800215 	stw	r18,8(sp)
    4f3c:	dc400115 	stw	r17,4(sp)
    4f40:	dc000015 	stw	r16,0(sp)
    4f44:	2827883a 	mov	r19,r5
    4f48:	dfc00415 	stw	ra,16(sp)
    4f4c:	04400074 	movhi	r17,1
    4f50:	8c769704 	addi	r17,r17,-9636
    4f54:	2021883a 	mov	r16,r4
    4f58:	000aba40 	call	aba4 <__malloc_lock>
    4f5c:	88800217 	ldw	r2,8(r17)
    4f60:	14800117 	ldw	r18,4(r2)
    4f64:	00bfff04 	movi	r2,-4
    4f68:	90a4703a 	and	r18,r18,r2
    4f6c:	9083fbc4 	addi	r2,r18,4079
    4f70:	14e7c83a 	sub	r19,r2,r19
    4f74:	9826d33a 	srli	r19,r19,12
    4f78:	0083ffc4 	movi	r2,4095
    4f7c:	9cffffc4 	addi	r19,r19,-1
    4f80:	9826933a 	slli	r19,r19,12
    4f84:	14c0060e 	bge	r2,r19,4fa0 <_malloc_trim_r+0x70>
    4f88:	8009883a 	mov	r4,r16
    4f8c:	000b883a 	mov	r5,zero
    4f90:	0007ed80 	call	7ed8 <_sbrk_r>
    4f94:	88c00217 	ldw	r3,8(r17)
    4f98:	1c87883a 	add	r3,r3,r18
    4f9c:	10c00a26 	beq	r2,r3,4fc8 <_malloc_trim_r+0x98>
    4fa0:	8009883a 	mov	r4,r16
    4fa4:	000abc40 	call	abc4 <__malloc_unlock>
    4fa8:	0005883a 	mov	r2,zero
    4fac:	dfc00417 	ldw	ra,16(sp)
    4fb0:	dcc00317 	ldw	r19,12(sp)
    4fb4:	dc800217 	ldw	r18,8(sp)
    4fb8:	dc400117 	ldw	r17,4(sp)
    4fbc:	dc000017 	ldw	r16,0(sp)
    4fc0:	dec00504 	addi	sp,sp,20
    4fc4:	f800283a 	ret
    4fc8:	8009883a 	mov	r4,r16
    4fcc:	04cbc83a 	sub	r5,zero,r19
    4fd0:	0007ed80 	call	7ed8 <_sbrk_r>
    4fd4:	00ffffc4 	movi	r3,-1
    4fd8:	10c01326 	beq	r2,r3,5028 <_malloc_trim_r+0xf8>
    4fdc:	00800074 	movhi	r2,1
    4fe0:	1082cf04 	addi	r2,r2,2876
    4fe4:	11000017 	ldw	r4,0(r2)
    4fe8:	88c00217 	ldw	r3,8(r17)
    4fec:	94e5c83a 	sub	r18,r18,r19
    4ff0:	94800054 	ori	r18,r18,1
    4ff4:	24e7c83a 	sub	r19,r4,r19
    4ff8:	1c800115 	stw	r18,4(r3)
    4ffc:	8009883a 	mov	r4,r16
    5000:	14c00015 	stw	r19,0(r2)
    5004:	000abc40 	call	abc4 <__malloc_unlock>
    5008:	00800044 	movi	r2,1
    500c:	dfc00417 	ldw	ra,16(sp)
    5010:	dcc00317 	ldw	r19,12(sp)
    5014:	dc800217 	ldw	r18,8(sp)
    5018:	dc400117 	ldw	r17,4(sp)
    501c:	dc000017 	ldw	r16,0(sp)
    5020:	dec00504 	addi	sp,sp,20
    5024:	f800283a 	ret
    5028:	8009883a 	mov	r4,r16
    502c:	000b883a 	mov	r5,zero
    5030:	0007ed80 	call	7ed8 <_sbrk_r>
    5034:	88c00217 	ldw	r3,8(r17)
    5038:	014003c4 	movi	r5,15
    503c:	10c9c83a 	sub	r4,r2,r3
    5040:	293fd70e 	bge	r5,r4,4fa0 <_malloc_trim_r+0x70>
    5044:	01400074 	movhi	r5,1
    5048:	297c1e04 	addi	r5,r5,-3976
    504c:	29400017 	ldw	r5,0(r5)
    5050:	21000054 	ori	r4,r4,1
    5054:	19000115 	stw	r4,4(r3)
    5058:	1145c83a 	sub	r2,r2,r5
    505c:	01400074 	movhi	r5,1
    5060:	2942cf04 	addi	r5,r5,2876
    5064:	28800015 	stw	r2,0(r5)
    5068:	003fcd06 	br	4fa0 <_malloc_trim_r+0x70>

0000506c <_free_r>:
    506c:	defffd04 	addi	sp,sp,-12
    5070:	dc400115 	stw	r17,4(sp)
    5074:	dc000015 	stw	r16,0(sp)
    5078:	dfc00215 	stw	ra,8(sp)
    507c:	2821883a 	mov	r16,r5
    5080:	2023883a 	mov	r17,r4
    5084:	28004b26 	beq	r5,zero,51b4 <_free_r+0x148>
    5088:	000aba40 	call	aba4 <__malloc_lock>
    508c:	823fff17 	ldw	r8,-4(r16)
    5090:	00bfff84 	movi	r2,-2
    5094:	81bffe04 	addi	r6,r16,-8
    5098:	4084703a 	and	r2,r8,r2
    509c:	3087883a 	add	r3,r6,r2
    50a0:	01400074 	movhi	r5,1
    50a4:	29769704 	addi	r5,r5,-9636
    50a8:	1a400117 	ldw	r9,4(r3)
    50ac:	29000217 	ldw	r4,8(r5)
    50b0:	01ffff04 	movi	r7,-4
    50b4:	49ce703a 	and	r7,r9,r7
    50b8:	20c06526 	beq	r4,r3,5250 <_free_r+0x1e4>
    50bc:	19c00115 	stw	r7,4(r3)
    50c0:	4200004c 	andi	r8,r8,1
    50c4:	40003026 	beq	r8,zero,5188 <_free_r+0x11c>
    50c8:	0009883a 	mov	r4,zero
    50cc:	19d1883a 	add	r8,r3,r7
    50d0:	42000117 	ldw	r8,4(r8)
    50d4:	4200004c 	andi	r8,r8,1
    50d8:	4000061e 	bne	r8,zero,50f4 <_free_r+0x88>
    50dc:	11c5883a 	add	r2,r2,r7
    50e0:	19c00217 	ldw	r7,8(r3)
    50e4:	20004e26 	beq	r4,zero,5220 <_free_r+0x1b4>
    50e8:	18c00317 	ldw	r3,12(r3)
    50ec:	38c00315 	stw	r3,12(r7)
    50f0:	19c00215 	stw	r7,8(r3)
    50f4:	11c00054 	ori	r7,r2,1
    50f8:	3087883a 	add	r3,r6,r2
    50fc:	31c00115 	stw	r7,4(r6)
    5100:	18800015 	stw	r2,0(r3)
    5104:	20001a1e 	bne	r4,zero,5170 <_free_r+0x104>
    5108:	00c07fc4 	movi	r3,511
    510c:	18802e2e 	bgeu	r3,r2,51c8 <_free_r+0x15c>
    5110:	1006d27a 	srli	r3,r2,9
    5114:	01000104 	movi	r4,4
    5118:	20c06636 	bltu	r4,r3,52b4 <_free_r+0x248>
    511c:	1008d1ba 	srli	r4,r2,6
    5120:	21000e04 	addi	r4,r4,56
    5124:	210f883a 	add	r7,r4,r4
    5128:	39cf883a 	add	r7,r7,r7
    512c:	39cf883a 	add	r7,r7,r7
    5130:	29cf883a 	add	r7,r5,r7
    5134:	38c00217 	ldw	r3,8(r7)
    5138:	01400074 	movhi	r5,1
    513c:	29769704 	addi	r5,r5,-9636
    5140:	19c06126 	beq	r3,r7,52c8 <_free_r+0x25c>
    5144:	013fff04 	movi	r4,-4
    5148:	19400117 	ldw	r5,4(r3)
    514c:	290a703a 	and	r5,r5,r4
    5150:	1140022e 	bgeu	r2,r5,515c <_free_r+0xf0>
    5154:	18c00217 	ldw	r3,8(r3)
    5158:	38fffb1e 	bne	r7,r3,5148 <_free_r+0xdc>
    515c:	18800317 	ldw	r2,12(r3)
    5160:	30800315 	stw	r2,12(r6)
    5164:	30c00215 	stw	r3,8(r6)
    5168:	11800215 	stw	r6,8(r2)
    516c:	19800315 	stw	r6,12(r3)
    5170:	8809883a 	mov	r4,r17
    5174:	dfc00217 	ldw	ra,8(sp)
    5178:	dc400117 	ldw	r17,4(sp)
    517c:	dc000017 	ldw	r16,0(sp)
    5180:	dec00304 	addi	sp,sp,12
    5184:	000abc41 	jmpi	abc4 <__malloc_unlock>
    5188:	813ffe17 	ldw	r4,-8(r16)
    518c:	2a400204 	addi	r9,r5,8
    5190:	310dc83a 	sub	r6,r6,r4
    5194:	32000217 	ldw	r8,8(r6)
    5198:	1105883a 	add	r2,r2,r4
    519c:	42404326 	beq	r8,r9,52ac <_free_r+0x240>
    51a0:	32400317 	ldw	r9,12(r6)
    51a4:	0009883a 	mov	r4,zero
    51a8:	42400315 	stw	r9,12(r8)
    51ac:	4a000215 	stw	r8,8(r9)
    51b0:	003fc606 	br	50cc <_free_r+0x60>
    51b4:	dfc00217 	ldw	ra,8(sp)
    51b8:	dc400117 	ldw	r17,4(sp)
    51bc:	dc000017 	ldw	r16,0(sp)
    51c0:	dec00304 	addi	sp,sp,12
    51c4:	f800283a 	ret
    51c8:	1004d0fa 	srli	r2,r2,3
    51cc:	02000044 	movi	r8,1
    51d0:	29c00117 	ldw	r7,4(r5)
    51d4:	1087883a 	add	r3,r2,r2
    51d8:	18c7883a 	add	r3,r3,r3
    51dc:	1005d0ba 	srai	r2,r2,2
    51e0:	18c7883a 	add	r3,r3,r3
    51e4:	28c7883a 	add	r3,r5,r3
    51e8:	19000217 	ldw	r4,8(r3)
    51ec:	4084983a 	sll	r2,r8,r2
    51f0:	30c00315 	stw	r3,12(r6)
    51f4:	31000215 	stw	r4,8(r6)
    51f8:	11c4b03a 	or	r2,r2,r7
    51fc:	21800315 	stw	r6,12(r4)
    5200:	8809883a 	mov	r4,r17
    5204:	28800115 	stw	r2,4(r5)
    5208:	19800215 	stw	r6,8(r3)
    520c:	dfc00217 	ldw	ra,8(sp)
    5210:	dc400117 	ldw	r17,4(sp)
    5214:	dc000017 	ldw	r16,0(sp)
    5218:	dec00304 	addi	sp,sp,12
    521c:	000abc41 	jmpi	abc4 <__malloc_unlock>
    5220:	02000074 	movhi	r8,1
    5224:	42369904 	addi	r8,r8,-9628
    5228:	3a3faf1e 	bne	r7,r8,50e8 <_free_r+0x7c>
    522c:	29800515 	stw	r6,20(r5)
    5230:	29800415 	stw	r6,16(r5)
    5234:	11000054 	ori	r4,r2,1
    5238:	3087883a 	add	r3,r6,r2
    523c:	31c00315 	stw	r7,12(r6)
    5240:	31c00215 	stw	r7,8(r6)
    5244:	31000115 	stw	r4,4(r6)
    5248:	18800015 	stw	r2,0(r3)
    524c:	003fc806 	br	5170 <_free_r+0x104>
    5250:	4200004c 	andi	r8,r8,1
    5254:	3885883a 	add	r2,r7,r2
    5258:	4000071e 	bne	r8,zero,5278 <_free_r+0x20c>
    525c:	81fffe17 	ldw	r7,-8(r16)
    5260:	31cdc83a 	sub	r6,r6,r7
    5264:	30c00317 	ldw	r3,12(r6)
    5268:	31000217 	ldw	r4,8(r6)
    526c:	11c5883a 	add	r2,r2,r7
    5270:	20c00315 	stw	r3,12(r4)
    5274:	19000215 	stw	r4,8(r3)
    5278:	00c00074 	movhi	r3,1
    527c:	18fc1f04 	addi	r3,r3,-3972
    5280:	18c00017 	ldw	r3,0(r3)
    5284:	11000054 	ori	r4,r2,1
    5288:	31000115 	stw	r4,4(r6)
    528c:	29800215 	stw	r6,8(r5)
    5290:	10ffb736 	bltu	r2,r3,5170 <_free_r+0x104>
    5294:	00800074 	movhi	r2,1
    5298:	1082c504 	addi	r2,r2,2836
    529c:	11400017 	ldw	r5,0(r2)
    52a0:	8809883a 	mov	r4,r17
    52a4:	0004f300 	call	4f30 <_malloc_trim_r>
    52a8:	003fb106 	br	5170 <_free_r+0x104>
    52ac:	01000044 	movi	r4,1
    52b0:	003f8606 	br	50cc <_free_r+0x60>
    52b4:	01000504 	movi	r4,20
    52b8:	20c00b36 	bltu	r4,r3,52e8 <_free_r+0x27c>
    52bc:	190016c4 	addi	r4,r3,91
    52c0:	210f883a 	add	r7,r4,r4
    52c4:	003f9806 	br	5128 <_free_r+0xbc>
    52c8:	2009d0ba 	srai	r4,r4,2
    52cc:	00800044 	movi	r2,1
    52d0:	29c00117 	ldw	r7,4(r5)
    52d4:	1108983a 	sll	r4,r2,r4
    52d8:	1805883a 	mov	r2,r3
    52dc:	21c8b03a 	or	r4,r4,r7
    52e0:	29000115 	stw	r4,4(r5)
    52e4:	003f9e06 	br	5160 <_free_r+0xf4>
    52e8:	01001504 	movi	r4,84
    52ec:	20c00436 	bltu	r4,r3,5300 <_free_r+0x294>
    52f0:	1008d33a 	srli	r4,r2,12
    52f4:	21001b84 	addi	r4,r4,110
    52f8:	210f883a 	add	r7,r4,r4
    52fc:	003f8a06 	br	5128 <_free_r+0xbc>
    5300:	01005504 	movi	r4,340
    5304:	20c00436 	bltu	r4,r3,5318 <_free_r+0x2ac>
    5308:	1008d3fa 	srli	r4,r2,15
    530c:	21001dc4 	addi	r4,r4,119
    5310:	210f883a 	add	r7,r4,r4
    5314:	003f8406 	br	5128 <_free_r+0xbc>
    5318:	01015504 	movi	r4,1364
    531c:	20c00436 	bltu	r4,r3,5330 <_free_r+0x2c4>
    5320:	1008d4ba 	srli	r4,r2,18
    5324:	21001f04 	addi	r4,r4,124
    5328:	210f883a 	add	r7,r4,r4
    532c:	003f7e06 	br	5128 <_free_r+0xbc>
    5330:	01c03f04 	movi	r7,252
    5334:	01001f84 	movi	r4,126
    5338:	003f7b06 	br	5128 <_free_r+0xbc>

0000533c <__sfvwrite_r>:
    533c:	30800217 	ldw	r2,8(r6)
    5340:	defff504 	addi	sp,sp,-44
    5344:	dd400615 	stw	r21,24(sp)
    5348:	dd000515 	stw	r20,20(sp)
    534c:	dc000115 	stw	r16,4(sp)
    5350:	dfc00a15 	stw	ra,40(sp)
    5354:	df000915 	stw	fp,36(sp)
    5358:	ddc00815 	stw	r23,32(sp)
    535c:	dd800715 	stw	r22,28(sp)
    5360:	dcc00415 	stw	r19,16(sp)
    5364:	dc800315 	stw	r18,12(sp)
    5368:	dc400215 	stw	r17,8(sp)
    536c:	3029883a 	mov	r20,r6
    5370:	202b883a 	mov	r21,r4
    5374:	2821883a 	mov	r16,r5
    5378:	10002126 	beq	r2,zero,5400 <__sfvwrite_r+0xc4>
    537c:	2880030b 	ldhu	r2,12(r5)
    5380:	10c0020c 	andi	r3,r2,8
    5384:	18ffffcc 	andi	r3,r3,65535
    5388:	18e0001c 	xori	r3,r3,32768
    538c:	18e00004 	addi	r3,r3,-32768
    5390:	18002826 	beq	r3,zero,5434 <__sfvwrite_r+0xf8>
    5394:	28c00417 	ldw	r3,16(r5)
    5398:	18002626 	beq	r3,zero,5434 <__sfvwrite_r+0xf8>
    539c:	10c0008c 	andi	r3,r2,2
    53a0:	18ffffcc 	andi	r3,r3,65535
    53a4:	18e0001c 	xori	r3,r3,32768
    53a8:	18e00004 	addi	r3,r3,-32768
    53ac:	a4400017 	ldw	r17,0(r20)
    53b0:	18002b26 	beq	r3,zero,5460 <__sfvwrite_r+0x124>
    53b4:	0027883a 	mov	r19,zero
    53b8:	0025883a 	mov	r18,zero
    53bc:	05810004 	movi	r22,1024
    53c0:	980d883a 	mov	r6,r19
    53c4:	a809883a 	mov	r4,r21
    53c8:	90004f26 	beq	r18,zero,5508 <__sfvwrite_r+0x1cc>
    53cc:	900f883a 	mov	r7,r18
    53d0:	81400717 	ldw	r5,28(r16)
    53d4:	b480012e 	bgeu	r22,r18,53dc <__sfvwrite_r+0xa0>
    53d8:	01c10004 	movi	r7,1024
    53dc:	80800917 	ldw	r2,36(r16)
    53e0:	103ee83a 	callr	r2
    53e4:	0080540e 	bge	zero,r2,5538 <__sfvwrite_r+0x1fc>
    53e8:	a0c00217 	ldw	r3,8(r20)
    53ec:	98a7883a 	add	r19,r19,r2
    53f0:	90a5c83a 	sub	r18,r18,r2
    53f4:	1885c83a 	sub	r2,r3,r2
    53f8:	a0800215 	stw	r2,8(r20)
    53fc:	103ff01e 	bne	r2,zero,53c0 <__sfvwrite_r+0x84>
    5400:	0005883a 	mov	r2,zero
    5404:	dfc00a17 	ldw	ra,40(sp)
    5408:	df000917 	ldw	fp,36(sp)
    540c:	ddc00817 	ldw	r23,32(sp)
    5410:	dd800717 	ldw	r22,28(sp)
    5414:	dd400617 	ldw	r21,24(sp)
    5418:	dd000517 	ldw	r20,20(sp)
    541c:	dcc00417 	ldw	r19,16(sp)
    5420:	dc800317 	ldw	r18,12(sp)
    5424:	dc400217 	ldw	r17,8(sp)
    5428:	dc000117 	ldw	r16,4(sp)
    542c:	dec00b04 	addi	sp,sp,44
    5430:	f800283a 	ret
    5434:	a809883a 	mov	r4,r21
    5438:	800b883a 	mov	r5,r16
    543c:	0002ec00 	call	2ec0 <__swsetup_r>
    5440:	1000f01e 	bne	r2,zero,5804 <__sfvwrite_r+0x4c8>
    5444:	8080030b 	ldhu	r2,12(r16)
    5448:	a4400017 	ldw	r17,0(r20)
    544c:	10c0008c 	andi	r3,r2,2
    5450:	18ffffcc 	andi	r3,r3,65535
    5454:	18e0001c 	xori	r3,r3,32768
    5458:	18e00004 	addi	r3,r3,-32768
    545c:	183fd51e 	bne	r3,zero,53b4 <__sfvwrite_r+0x78>
    5460:	10c0004c 	andi	r3,r2,1
    5464:	002d883a 	mov	r22,zero
    5468:	1800381e 	bne	r3,zero,554c <__sfvwrite_r+0x210>
    546c:	0025883a 	mov	r18,zero
    5470:	90002126 	beq	r18,zero,54f8 <__sfvwrite_r+0x1bc>
    5474:	10c0800c 	andi	r3,r2,512
    5478:	18ffffcc 	andi	r3,r3,65535
    547c:	18e0001c 	xori	r3,r3,32768
    5480:	18e00004 	addi	r3,r3,-32768
    5484:	84c00217 	ldw	r19,8(r16)
    5488:	18006b26 	beq	r3,zero,5638 <__sfvwrite_r+0x2fc>
    548c:	980f883a 	mov	r7,r19
    5490:	94c08636 	bltu	r18,r19,56ac <__sfvwrite_r+0x370>
    5494:	10c1200c 	andi	r3,r2,1152
    5498:	18009f1e 	bne	r3,zero,5718 <__sfvwrite_r+0x3dc>
    549c:	81000017 	ldw	r4,0(r16)
    54a0:	982f883a 	mov	r23,r19
    54a4:	9039883a 	mov	fp,r18
    54a8:	9027883a 	mov	r19,r18
    54ac:	380d883a 	mov	r6,r7
    54b0:	b00b883a 	mov	r5,r22
    54b4:	d9c00015 	stw	r7,0(sp)
    54b8:	00065c00 	call	65c0 <memmove>
    54bc:	d9c00017 	ldw	r7,0(sp)
    54c0:	81000217 	ldw	r4,8(r16)
    54c4:	80800017 	ldw	r2,0(r16)
    54c8:	25efc83a 	sub	r23,r4,r23
    54cc:	11cf883a 	add	r7,r2,r7
    54d0:	85c00215 	stw	r23,8(r16)
    54d4:	81c00015 	stw	r7,0(r16)
    54d8:	a0800217 	ldw	r2,8(r20)
    54dc:	b72d883a 	add	r22,r22,fp
    54e0:	9725c83a 	sub	r18,r18,fp
    54e4:	14e7c83a 	sub	r19,r2,r19
    54e8:	a4c00215 	stw	r19,8(r20)
    54ec:	983fc426 	beq	r19,zero,5400 <__sfvwrite_r+0xc4>
    54f0:	8080030b 	ldhu	r2,12(r16)
    54f4:	903fdf1e 	bne	r18,zero,5474 <__sfvwrite_r+0x138>
    54f8:	8d800017 	ldw	r22,0(r17)
    54fc:	8c800117 	ldw	r18,4(r17)
    5500:	8c400204 	addi	r17,r17,8
    5504:	003fda06 	br	5470 <__sfvwrite_r+0x134>
    5508:	8cc00017 	ldw	r19,0(r17)
    550c:	8c800117 	ldw	r18,4(r17)
    5510:	8c400204 	addi	r17,r17,8
    5514:	003faa06 	br	53c0 <__sfvwrite_r+0x84>
    5518:	00078780 	call	7878 <_realloc_r>
    551c:	102f883a 	mov	r23,r2
    5520:	10009f1e 	bne	r2,zero,57a0 <__sfvwrite_r+0x464>
    5524:	81400417 	ldw	r5,16(r16)
    5528:	a809883a 	mov	r4,r21
    552c:	000506c0 	call	506c <_free_r>
    5530:	00800304 	movi	r2,12
    5534:	a8800015 	stw	r2,0(r21)
    5538:	80c0030b 	ldhu	r3,12(r16)
    553c:	00bfffc4 	movi	r2,-1
    5540:	18c01014 	ori	r3,r3,64
    5544:	80c0030d 	sth	r3,12(r16)
    5548:	003fae06 	br	5404 <__sfvwrite_r+0xc8>
    554c:	0007883a 	mov	r3,zero
    5550:	0039883a 	mov	fp,zero
    5554:	0025883a 	mov	r18,zero
    5558:	90001e26 	beq	r18,zero,55d4 <__sfvwrite_r+0x298>
    555c:	18006526 	beq	r3,zero,56f4 <__sfvwrite_r+0x3b8>
    5560:	b02f883a 	mov	r23,r22
    5564:	9580012e 	bgeu	r18,r22,556c <__sfvwrite_r+0x230>
    5568:	902f883a 	mov	r23,r18
    556c:	81000017 	ldw	r4,0(r16)
    5570:	80800417 	ldw	r2,16(r16)
    5574:	84c00217 	ldw	r19,8(r16)
    5578:	81c00517 	ldw	r7,20(r16)
    557c:	1100022e 	bgeu	r2,r4,5588 <__sfvwrite_r+0x24c>
    5580:	99e7883a 	add	r19,r19,r7
    5584:	9dc01816 	blt	r19,r23,55e8 <__sfvwrite_r+0x2ac>
    5588:	b9c03b16 	blt	r23,r7,5678 <__sfvwrite_r+0x33c>
    558c:	80800917 	ldw	r2,36(r16)
    5590:	81400717 	ldw	r5,28(r16)
    5594:	a809883a 	mov	r4,r21
    5598:	d8c00015 	stw	r3,0(sp)
    559c:	e00d883a 	mov	r6,fp
    55a0:	103ee83a 	callr	r2
    55a4:	1027883a 	mov	r19,r2
    55a8:	d8c00017 	ldw	r3,0(sp)
    55ac:	00bfe20e 	bge	zero,r2,5538 <__sfvwrite_r+0x1fc>
    55b0:	b4edc83a 	sub	r22,r22,r19
    55b4:	b0001a26 	beq	r22,zero,5620 <__sfvwrite_r+0x2e4>
    55b8:	a0800217 	ldw	r2,8(r20)
    55bc:	e4f9883a 	add	fp,fp,r19
    55c0:	94e5c83a 	sub	r18,r18,r19
    55c4:	14e7c83a 	sub	r19,r2,r19
    55c8:	a4c00215 	stw	r19,8(r20)
    55cc:	983f8c26 	beq	r19,zero,5400 <__sfvwrite_r+0xc4>
    55d0:	903fe21e 	bne	r18,zero,555c <__sfvwrite_r+0x220>
    55d4:	8f000017 	ldw	fp,0(r17)
    55d8:	8c800117 	ldw	r18,4(r17)
    55dc:	0007883a 	mov	r3,zero
    55e0:	8c400204 	addi	r17,r17,8
    55e4:	003fdc06 	br	5558 <__sfvwrite_r+0x21c>
    55e8:	e00b883a 	mov	r5,fp
    55ec:	980d883a 	mov	r6,r19
    55f0:	d8c00015 	stw	r3,0(sp)
    55f4:	00065c00 	call	65c0 <memmove>
    55f8:	80800017 	ldw	r2,0(r16)
    55fc:	a809883a 	mov	r4,r21
    5600:	800b883a 	mov	r5,r16
    5604:	14c5883a 	add	r2,r2,r19
    5608:	80800015 	stw	r2,0(r16)
    560c:	0004a2c0 	call	4a2c <_fflush_r>
    5610:	d8c00017 	ldw	r3,0(sp)
    5614:	103fc81e 	bne	r2,zero,5538 <__sfvwrite_r+0x1fc>
    5618:	b4edc83a 	sub	r22,r22,r19
    561c:	b03fe61e 	bne	r22,zero,55b8 <__sfvwrite_r+0x27c>
    5620:	a809883a 	mov	r4,r21
    5624:	800b883a 	mov	r5,r16
    5628:	0004a2c0 	call	4a2c <_fflush_r>
    562c:	103fc21e 	bne	r2,zero,5538 <__sfvwrite_r+0x1fc>
    5630:	0007883a 	mov	r3,zero
    5634:	003fe006 	br	55b8 <__sfvwrite_r+0x27c>
    5638:	81000017 	ldw	r4,0(r16)
    563c:	80800417 	ldw	r2,16(r16)
    5640:	1100022e 	bgeu	r2,r4,564c <__sfvwrite_r+0x310>
    5644:	9839883a 	mov	fp,r19
    5648:	9c806036 	bltu	r19,r18,57cc <__sfvwrite_r+0x490>
    564c:	81c00517 	ldw	r7,20(r16)
    5650:	91c01c36 	bltu	r18,r7,56c4 <__sfvwrite_r+0x388>
    5654:	80800917 	ldw	r2,36(r16)
    5658:	81400717 	ldw	r5,28(r16)
    565c:	a809883a 	mov	r4,r21
    5660:	b00d883a 	mov	r6,r22
    5664:	103ee83a 	callr	r2
    5668:	1027883a 	mov	r19,r2
    566c:	00bfb20e 	bge	zero,r2,5538 <__sfvwrite_r+0x1fc>
    5670:	1039883a 	mov	fp,r2
    5674:	003f9806 	br	54d8 <__sfvwrite_r+0x19c>
    5678:	b80d883a 	mov	r6,r23
    567c:	e00b883a 	mov	r5,fp
    5680:	d8c00015 	stw	r3,0(sp)
    5684:	00065c00 	call	65c0 <memmove>
    5688:	80800217 	ldw	r2,8(r16)
    568c:	81000017 	ldw	r4,0(r16)
    5690:	b827883a 	mov	r19,r23
    5694:	15c5c83a 	sub	r2,r2,r23
    5698:	25ef883a 	add	r23,r4,r23
    569c:	80800215 	stw	r2,8(r16)
    56a0:	85c00015 	stw	r23,0(r16)
    56a4:	d8c00017 	ldw	r3,0(sp)
    56a8:	003fc106 	br	55b0 <__sfvwrite_r+0x274>
    56ac:	81000017 	ldw	r4,0(r16)
    56b0:	902f883a 	mov	r23,r18
    56b4:	9039883a 	mov	fp,r18
    56b8:	9027883a 	mov	r19,r18
    56bc:	900f883a 	mov	r7,r18
    56c0:	003f7a06 	br	54ac <__sfvwrite_r+0x170>
    56c4:	b00b883a 	mov	r5,r22
    56c8:	900d883a 	mov	r6,r18
    56cc:	00065c00 	call	65c0 <memmove>
    56d0:	80c00217 	ldw	r3,8(r16)
    56d4:	80800017 	ldw	r2,0(r16)
    56d8:	9027883a 	mov	r19,r18
    56dc:	1c87c83a 	sub	r3,r3,r18
    56e0:	1485883a 	add	r2,r2,r18
    56e4:	80c00215 	stw	r3,8(r16)
    56e8:	80800015 	stw	r2,0(r16)
    56ec:	9039883a 	mov	fp,r18
    56f0:	003f7906 	br	54d8 <__sfvwrite_r+0x19c>
    56f4:	e009883a 	mov	r4,fp
    56f8:	01400284 	movi	r5,10
    56fc:	900d883a 	mov	r6,r18
    5700:	00063880 	call	6388 <memchr>
    5704:	10003c26 	beq	r2,zero,57f8 <__sfvwrite_r+0x4bc>
    5708:	15800044 	addi	r22,r2,1
    570c:	b72dc83a 	sub	r22,r22,fp
    5710:	00c00044 	movi	r3,1
    5714:	003f9206 	br	5560 <__sfvwrite_r+0x224>
    5718:	81000517 	ldw	r4,20(r16)
    571c:	81400417 	ldw	r5,16(r16)
    5720:	80c00017 	ldw	r3,0(r16)
    5724:	210d883a 	add	r6,r4,r4
    5728:	3109883a 	add	r4,r6,r4
    572c:	2026d7fa 	srli	r19,r4,31
    5730:	1979c83a 	sub	fp,r3,r5
    5734:	e1800044 	addi	r6,fp,1
    5738:	9909883a 	add	r4,r19,r4
    573c:	2027d07a 	srai	r19,r4,1
    5740:	3489883a 	add	r4,r6,r18
    5744:	980d883a 	mov	r6,r19
    5748:	9900022e 	bgeu	r19,r4,5754 <__sfvwrite_r+0x418>
    574c:	2027883a 	mov	r19,r4
    5750:	200d883a 	mov	r6,r4
    5754:	1081000c 	andi	r2,r2,1024
    5758:	10bfffcc 	andi	r2,r2,65535
    575c:	10a0001c 	xori	r2,r2,32768
    5760:	10a00004 	addi	r2,r2,-32768
    5764:	a809883a 	mov	r4,r21
    5768:	103f6b26 	beq	r2,zero,5518 <__sfvwrite_r+0x1dc>
    576c:	300b883a 	mov	r5,r6
    5770:	0005c040 	call	5c04 <_malloc_r>
    5774:	102f883a 	mov	r23,r2
    5778:	103f6d26 	beq	r2,zero,5530 <__sfvwrite_r+0x1f4>
    577c:	81400417 	ldw	r5,16(r16)
    5780:	1009883a 	mov	r4,r2
    5784:	e00d883a 	mov	r6,fp
    5788:	00064800 	call	6480 <memcpy>
    578c:	8080030b 	ldhu	r2,12(r16)
    5790:	00fedfc4 	movi	r3,-1153
    5794:	10c4703a 	and	r2,r2,r3
    5798:	10802014 	ori	r2,r2,128
    579c:	8080030d 	sth	r2,12(r16)
    57a0:	bf09883a 	add	r4,r23,fp
    57a4:	9f07c83a 	sub	r3,r19,fp
    57a8:	85c00415 	stw	r23,16(r16)
    57ac:	84c00515 	stw	r19,20(r16)
    57b0:	81000015 	stw	r4,0(r16)
    57b4:	902f883a 	mov	r23,r18
    57b8:	80c00215 	stw	r3,8(r16)
    57bc:	9039883a 	mov	fp,r18
    57c0:	9027883a 	mov	r19,r18
    57c4:	900f883a 	mov	r7,r18
    57c8:	003f3806 	br	54ac <__sfvwrite_r+0x170>
    57cc:	b00b883a 	mov	r5,r22
    57d0:	980d883a 	mov	r6,r19
    57d4:	00065c00 	call	65c0 <memmove>
    57d8:	80800017 	ldw	r2,0(r16)
    57dc:	a809883a 	mov	r4,r21
    57e0:	800b883a 	mov	r5,r16
    57e4:	14c5883a 	add	r2,r2,r19
    57e8:	80800015 	stw	r2,0(r16)
    57ec:	0004a2c0 	call	4a2c <_fflush_r>
    57f0:	103f3926 	beq	r2,zero,54d8 <__sfvwrite_r+0x19c>
    57f4:	003f5006 	br	5538 <__sfvwrite_r+0x1fc>
    57f8:	95800044 	addi	r22,r18,1
    57fc:	00c00044 	movi	r3,1
    5800:	003f5706 	br	5560 <__sfvwrite_r+0x224>
    5804:	80c0030b 	ldhu	r3,12(r16)
    5808:	00bfffc4 	movi	r2,-1
    580c:	18c01014 	ori	r3,r3,64
    5810:	80c0030d 	sth	r3,12(r16)
    5814:	00c00244 	movi	r3,9
    5818:	a8c00015 	stw	r3,0(r21)
    581c:	003ef906 	br	5404 <__sfvwrite_r+0xc8>

00005820 <_fwalk>:
    5820:	defff904 	addi	sp,sp,-28
    5824:	dcc00315 	stw	r19,12(sp)
    5828:	24c0b804 	addi	r19,r4,736
    582c:	dd400515 	stw	r21,20(sp)
    5830:	dd000415 	stw	r20,16(sp)
    5834:	dfc00615 	stw	ra,24(sp)
    5838:	dc800215 	stw	r18,8(sp)
    583c:	dc400115 	stw	r17,4(sp)
    5840:	dc000015 	stw	r16,0(sp)
    5844:	282b883a 	mov	r21,r5
    5848:	0029883a 	mov	r20,zero
    584c:	0004ef00 	call	4ef0 <__sfp_lock_acquire>
    5850:	98001226 	beq	r19,zero,589c <_fwalk+0x7c>
    5854:	04bfffc4 	movi	r18,-1
    5858:	9c400117 	ldw	r17,4(r19)
    585c:	9c000217 	ldw	r16,8(r19)
    5860:	8c7fffc4 	addi	r17,r17,-1
    5864:	88000b16 	blt	r17,zero,5894 <_fwalk+0x74>
    5868:	84000304 	addi	r16,r16,12
    586c:	80c0000f 	ldh	r3,0(r16)
    5870:	8c7fffc4 	addi	r17,r17,-1
    5874:	813ffd04 	addi	r4,r16,-12
    5878:	18000426 	beq	r3,zero,588c <_fwalk+0x6c>
    587c:	80c0008f 	ldh	r3,2(r16)
    5880:	1c800226 	beq	r3,r18,588c <_fwalk+0x6c>
    5884:	a83ee83a 	callr	r21
    5888:	a0a8b03a 	or	r20,r20,r2
    588c:	84001704 	addi	r16,r16,92
    5890:	8cbff61e 	bne	r17,r18,586c <_fwalk+0x4c>
    5894:	9cc00017 	ldw	r19,0(r19)
    5898:	983fef1e 	bne	r19,zero,5858 <_fwalk+0x38>
    589c:	0004ef40 	call	4ef4 <__sfp_lock_release>
    58a0:	a005883a 	mov	r2,r20
    58a4:	dfc00617 	ldw	ra,24(sp)
    58a8:	dd400517 	ldw	r21,20(sp)
    58ac:	dd000417 	ldw	r20,16(sp)
    58b0:	dcc00317 	ldw	r19,12(sp)
    58b4:	dc800217 	ldw	r18,8(sp)
    58b8:	dc400117 	ldw	r17,4(sp)
    58bc:	dc000017 	ldw	r16,0(sp)
    58c0:	dec00704 	addi	sp,sp,28
    58c4:	f800283a 	ret

000058c8 <_fwalk_reent>:
    58c8:	defff804 	addi	sp,sp,-32
    58cc:	dcc00315 	stw	r19,12(sp)
    58d0:	24c0b804 	addi	r19,r4,736
    58d4:	dd800615 	stw	r22,24(sp)
    58d8:	dd400515 	stw	r21,20(sp)
    58dc:	dd000415 	stw	r20,16(sp)
    58e0:	dfc00715 	stw	ra,28(sp)
    58e4:	dc800215 	stw	r18,8(sp)
    58e8:	dc400115 	stw	r17,4(sp)
    58ec:	dc000015 	stw	r16,0(sp)
    58f0:	2029883a 	mov	r20,r4
    58f4:	282b883a 	mov	r21,r5
    58f8:	002d883a 	mov	r22,zero
    58fc:	0004ef00 	call	4ef0 <__sfp_lock_acquire>
    5900:	98001326 	beq	r19,zero,5950 <_fwalk_reent+0x88>
    5904:	04bfffc4 	movi	r18,-1
    5908:	9c400117 	ldw	r17,4(r19)
    590c:	9c000217 	ldw	r16,8(r19)
    5910:	8c7fffc4 	addi	r17,r17,-1
    5914:	88000c16 	blt	r17,zero,5948 <_fwalk_reent+0x80>
    5918:	84000304 	addi	r16,r16,12
    591c:	80c0000f 	ldh	r3,0(r16)
    5920:	8c7fffc4 	addi	r17,r17,-1
    5924:	817ffd04 	addi	r5,r16,-12
    5928:	18000526 	beq	r3,zero,5940 <_fwalk_reent+0x78>
    592c:	80c0008f 	ldh	r3,2(r16)
    5930:	a009883a 	mov	r4,r20
    5934:	1c800226 	beq	r3,r18,5940 <_fwalk_reent+0x78>
    5938:	a83ee83a 	callr	r21
    593c:	b0acb03a 	or	r22,r22,r2
    5940:	84001704 	addi	r16,r16,92
    5944:	8cbff51e 	bne	r17,r18,591c <_fwalk_reent+0x54>
    5948:	9cc00017 	ldw	r19,0(r19)
    594c:	983fee1e 	bne	r19,zero,5908 <_fwalk_reent+0x40>
    5950:	0004ef40 	call	4ef4 <__sfp_lock_release>
    5954:	b005883a 	mov	r2,r22
    5958:	dfc00717 	ldw	ra,28(sp)
    595c:	dd800617 	ldw	r22,24(sp)
    5960:	dd400517 	ldw	r21,20(sp)
    5964:	dd000417 	ldw	r20,16(sp)
    5968:	dcc00317 	ldw	r19,12(sp)
    596c:	dc800217 	ldw	r18,8(sp)
    5970:	dc400117 	ldw	r17,4(sp)
    5974:	dc000017 	ldw	r16,0(sp)
    5978:	dec00804 	addi	sp,sp,32
    597c:	f800283a 	ret

00005980 <_setlocale_r>:
    5980:	defffc04 	addi	sp,sp,-16
    5984:	dc800215 	stw	r18,8(sp)
    5988:	dc400115 	stw	r17,4(sp)
    598c:	dc000015 	stw	r16,0(sp)
    5990:	dfc00315 	stw	ra,12(sp)
    5994:	3021883a 	mov	r16,r6
    5998:	2023883a 	mov	r17,r4
    599c:	2825883a 	mov	r18,r5
    59a0:	30001626 	beq	r6,zero,59fc <_setlocale_r+0x7c>
    59a4:	3009883a 	mov	r4,r6
    59a8:	01400074 	movhi	r5,1
    59ac:	2974cc04 	addi	r5,r5,-11472
    59b0:	000807c0 	call	807c <strcmp>
    59b4:	10000a1e 	bne	r2,zero,59e0 <_setlocale_r+0x60>
    59b8:	8c800c15 	stw	r18,48(r17)
    59bc:	8c000d15 	stw	r16,52(r17)
    59c0:	00800074 	movhi	r2,1
    59c4:	10b4cc04 	addi	r2,r2,-11472
    59c8:	dfc00317 	ldw	ra,12(sp)
    59cc:	dc800217 	ldw	r18,8(sp)
    59d0:	dc400117 	ldw	r17,4(sp)
    59d4:	dc000017 	ldw	r16,0(sp)
    59d8:	dec00404 	addi	sp,sp,16
    59dc:	f800283a 	ret
    59e0:	8009883a 	mov	r4,r16
    59e4:	01400074 	movhi	r5,1
    59e8:	2974d604 	addi	r5,r5,-11432
    59ec:	000807c0 	call	807c <strcmp>
    59f0:	103ff126 	beq	r2,zero,59b8 <_setlocale_r+0x38>
    59f4:	0005883a 	mov	r2,zero
    59f8:	003ff306 	br	59c8 <_setlocale_r+0x48>
    59fc:	00800074 	movhi	r2,1
    5a00:	10b4cc04 	addi	r2,r2,-11472
    5a04:	dfc00317 	ldw	ra,12(sp)
    5a08:	dc800217 	ldw	r18,8(sp)
    5a0c:	dc400117 	ldw	r17,4(sp)
    5a10:	dc000017 	ldw	r16,0(sp)
    5a14:	dec00404 	addi	sp,sp,16
    5a18:	f800283a 	ret

00005a1c <__locale_charset>:
    5a1c:	00800074 	movhi	r2,1
    5a20:	10b4eb04 	addi	r2,r2,-11348
    5a24:	f800283a 	ret

00005a28 <_localeconv_r>:
    5a28:	00800074 	movhi	r2,1
    5a2c:	10b4ef04 	addi	r2,r2,-11332
    5a30:	f800283a 	ret

00005a34 <setlocale>:
    5a34:	00c00074 	movhi	r3,1
    5a38:	18fc1c04 	addi	r3,r3,-3984
    5a3c:	2005883a 	mov	r2,r4
    5a40:	19000017 	ldw	r4,0(r3)
    5a44:	280d883a 	mov	r6,r5
    5a48:	100b883a 	mov	r5,r2
    5a4c:	00059801 	jmpi	5980 <_setlocale_r>

00005a50 <localeconv>:
    5a50:	00800074 	movhi	r2,1
    5a54:	10b4ef04 	addi	r2,r2,-11332
    5a58:	f800283a 	ret

00005a5c <__smakebuf_r>:
    5a5c:	2880030b 	ldhu	r2,12(r5)
    5a60:	deffed04 	addi	sp,sp,-76
    5a64:	dc401015 	stw	r17,64(sp)
    5a68:	10c0008c 	andi	r3,r2,2
    5a6c:	18ffffcc 	andi	r3,r3,65535
    5a70:	18e0001c 	xori	r3,r3,32768
    5a74:	dc000f15 	stw	r16,60(sp)
    5a78:	dfc01215 	stw	ra,72(sp)
    5a7c:	dc801115 	stw	r18,68(sp)
    5a80:	18e00004 	addi	r3,r3,-32768
    5a84:	2821883a 	mov	r16,r5
    5a88:	2023883a 	mov	r17,r4
    5a8c:	1800381e 	bne	r3,zero,5b70 <__smakebuf_r+0x114>
    5a90:	2940038f 	ldh	r5,14(r5)
    5a94:	28002d16 	blt	r5,zero,5b4c <__smakebuf_r+0xf0>
    5a98:	d80d883a 	mov	r6,sp
    5a9c:	000840c0 	call	840c <_fstat_r>
    5aa0:	10002916 	blt	r2,zero,5b48 <__smakebuf_r+0xec>
    5aa4:	d8800117 	ldw	r2,4(sp)
    5aa8:	00e00014 	movui	r3,32768
    5aac:	10bc000c 	andi	r2,r2,61440
    5ab0:	10c03c26 	beq	r2,r3,5ba4 <__smakebuf_r+0x148>
    5ab4:	80c0030b 	ldhu	r3,12(r16)
    5ab8:	18c20014 	ori	r3,r3,2048
    5abc:	80c0030d 	sth	r3,12(r16)
    5ac0:	00c80004 	movi	r3,8192
    5ac4:	10c00c1e 	bne	r2,r3,5af8 <__smakebuf_r+0x9c>
    5ac8:	8140038f 	ldh	r5,14(r16)
    5acc:	8809883a 	mov	r4,r17
    5ad0:	00084740 	call	8474 <_isatty_r>
    5ad4:	10000826 	beq	r2,zero,5af8 <__smakebuf_r+0x9c>
    5ad8:	80c0030b 	ldhu	r3,12(r16)
    5adc:	808010c4 	addi	r2,r16,67
    5ae0:	80800015 	stw	r2,0(r16)
    5ae4:	18c00054 	ori	r3,r3,1
    5ae8:	80800415 	stw	r2,16(r16)
    5aec:	00800044 	movi	r2,1
    5af0:	80c0030d 	sth	r3,12(r16)
    5af4:	80800515 	stw	r2,20(r16)
    5af8:	04810004 	movi	r18,1024
    5afc:	8809883a 	mov	r4,r17
    5b00:	900b883a 	mov	r5,r18
    5b04:	0005c040 	call	5c04 <_malloc_r>
    5b08:	10003026 	beq	r2,zero,5bcc <__smakebuf_r+0x170>
    5b0c:	80c0030b 	ldhu	r3,12(r16)
    5b10:	01000034 	movhi	r4,0
    5b14:	21131504 	addi	r4,r4,19540
    5b18:	89000f15 	stw	r4,60(r17)
    5b1c:	18c02014 	ori	r3,r3,128
    5b20:	80c0030d 	sth	r3,12(r16)
    5b24:	80800015 	stw	r2,0(r16)
    5b28:	80800415 	stw	r2,16(r16)
    5b2c:	84800515 	stw	r18,20(r16)
    5b30:	dfc01217 	ldw	ra,72(sp)
    5b34:	dc801117 	ldw	r18,68(sp)
    5b38:	dc401017 	ldw	r17,64(sp)
    5b3c:	dc000f17 	ldw	r16,60(sp)
    5b40:	dec01304 	addi	sp,sp,76
    5b44:	f800283a 	ret
    5b48:	8080030b 	ldhu	r2,12(r16)
    5b4c:	10c0200c 	andi	r3,r2,128
    5b50:	18ffffcc 	andi	r3,r3,65535
    5b54:	18e0001c 	xori	r3,r3,32768
    5b58:	18e00004 	addi	r3,r3,-32768
    5b5c:	18000f1e 	bne	r3,zero,5b9c <__smakebuf_r+0x140>
    5b60:	04810004 	movi	r18,1024
    5b64:	10820014 	ori	r2,r2,2048
    5b68:	8080030d 	sth	r2,12(r16)
    5b6c:	003fe306 	br	5afc <__smakebuf_r+0xa0>
    5b70:	288010c4 	addi	r2,r5,67
    5b74:	28800015 	stw	r2,0(r5)
    5b78:	28800415 	stw	r2,16(r5)
    5b7c:	00800044 	movi	r2,1
    5b80:	28800515 	stw	r2,20(r5)
    5b84:	dfc01217 	ldw	ra,72(sp)
    5b88:	dc801117 	ldw	r18,68(sp)
    5b8c:	dc401017 	ldw	r17,64(sp)
    5b90:	dc000f17 	ldw	r16,60(sp)
    5b94:	dec01304 	addi	sp,sp,76
    5b98:	f800283a 	ret
    5b9c:	04801004 	movi	r18,64
    5ba0:	003ff006 	br	5b64 <__smakebuf_r+0x108>
    5ba4:	81000a17 	ldw	r4,40(r16)
    5ba8:	00c00074 	movhi	r3,1
    5bac:	18e00604 	addi	r3,r3,-32744
    5bb0:	20ffc01e 	bne	r4,r3,5ab4 <__smakebuf_r+0x58>
    5bb4:	8080030b 	ldhu	r2,12(r16)
    5bb8:	00c10004 	movi	r3,1024
    5bbc:	80c01315 	stw	r3,76(r16)
    5bc0:	10c4b03a 	or	r2,r2,r3
    5bc4:	8080030d 	sth	r2,12(r16)
    5bc8:	003fcb06 	br	5af8 <__smakebuf_r+0x9c>
    5bcc:	8080030b 	ldhu	r2,12(r16)
    5bd0:	10c0800c 	andi	r3,r2,512
    5bd4:	18ffffcc 	andi	r3,r3,65535
    5bd8:	18e0001c 	xori	r3,r3,32768
    5bdc:	18e00004 	addi	r3,r3,-32768
    5be0:	183fd31e 	bne	r3,zero,5b30 <__smakebuf_r+0xd4>
    5be4:	10800094 	ori	r2,r2,2
    5be8:	80c010c4 	addi	r3,r16,67
    5bec:	8080030d 	sth	r2,12(r16)
    5bf0:	00800044 	movi	r2,1
    5bf4:	80c00015 	stw	r3,0(r16)
    5bf8:	80c00415 	stw	r3,16(r16)
    5bfc:	80800515 	stw	r2,20(r16)
    5c00:	003fcb06 	br	5b30 <__smakebuf_r+0xd4>

00005c04 <_malloc_r>:
    5c04:	defff604 	addi	sp,sp,-40
    5c08:	dc800215 	stw	r18,8(sp)
    5c0c:	dfc00915 	stw	ra,36(sp)
    5c10:	df000815 	stw	fp,32(sp)
    5c14:	ddc00715 	stw	r23,28(sp)
    5c18:	dd800615 	stw	r22,24(sp)
    5c1c:	dd400515 	stw	r21,20(sp)
    5c20:	dd000415 	stw	r20,16(sp)
    5c24:	dcc00315 	stw	r19,12(sp)
    5c28:	dc400115 	stw	r17,4(sp)
    5c2c:	dc000015 	stw	r16,0(sp)
    5c30:	288002c4 	addi	r2,r5,11
    5c34:	00c00584 	movi	r3,22
    5c38:	2025883a 	mov	r18,r4
    5c3c:	18802b2e 	bgeu	r3,r2,5cec <_malloc_r+0xe8>
    5c40:	047ffe04 	movi	r17,-8
    5c44:	1462703a 	and	r17,r2,r17
    5c48:	88002a16 	blt	r17,zero,5cf4 <_malloc_r+0xf0>
    5c4c:	89402936 	bltu	r17,r5,5cf4 <_malloc_r+0xf0>
    5c50:	9009883a 	mov	r4,r18
    5c54:	000aba40 	call	aba4 <__malloc_lock>
    5c58:	00807dc4 	movi	r2,503
    5c5c:	14402936 	bltu	r2,r17,5d04 <_malloc_r+0x100>
    5c60:	8808d0fa 	srli	r4,r17,3
    5c64:	04c00074 	movhi	r19,1
    5c68:	9cf69704 	addi	r19,r19,-9636
    5c6c:	2105883a 	add	r2,r4,r4
    5c70:	1085883a 	add	r2,r2,r2
    5c74:	1085883a 	add	r2,r2,r2
    5c78:	9885883a 	add	r2,r19,r2
    5c7c:	14000317 	ldw	r16,12(r2)
    5c80:	80815526 	beq	r16,r2,61d8 <_malloc_r+0x5d4>
    5c84:	81000117 	ldw	r4,4(r16)
    5c88:	00bfff04 	movi	r2,-4
    5c8c:	80c00317 	ldw	r3,12(r16)
    5c90:	2084703a 	and	r2,r4,r2
    5c94:	8085883a 	add	r2,r16,r2
    5c98:	11800117 	ldw	r6,4(r2)
    5c9c:	81400217 	ldw	r5,8(r16)
    5ca0:	9009883a 	mov	r4,r18
    5ca4:	31800054 	ori	r6,r6,1
    5ca8:	11800115 	stw	r6,4(r2)
    5cac:	28c00315 	stw	r3,12(r5)
    5cb0:	19400215 	stw	r5,8(r3)
    5cb4:	000abc40 	call	abc4 <__malloc_unlock>
    5cb8:	80800204 	addi	r2,r16,8
    5cbc:	dfc00917 	ldw	ra,36(sp)
    5cc0:	df000817 	ldw	fp,32(sp)
    5cc4:	ddc00717 	ldw	r23,28(sp)
    5cc8:	dd800617 	ldw	r22,24(sp)
    5ccc:	dd400517 	ldw	r21,20(sp)
    5cd0:	dd000417 	ldw	r20,16(sp)
    5cd4:	dcc00317 	ldw	r19,12(sp)
    5cd8:	dc800217 	ldw	r18,8(sp)
    5cdc:	dc400117 	ldw	r17,4(sp)
    5ce0:	dc000017 	ldw	r16,0(sp)
    5ce4:	dec00a04 	addi	sp,sp,40
    5ce8:	f800283a 	ret
    5cec:	04400404 	movi	r17,16
    5cf0:	897fd72e 	bgeu	r17,r5,5c50 <_malloc_r+0x4c>
    5cf4:	00800304 	movi	r2,12
    5cf8:	90800015 	stw	r2,0(r18)
    5cfc:	0005883a 	mov	r2,zero
    5d00:	003fee06 	br	5cbc <_malloc_r+0xb8>
    5d04:	8808d27a 	srli	r4,r17,9
    5d08:	20007126 	beq	r4,zero,5ed0 <_malloc_r+0x2cc>
    5d0c:	00800104 	movi	r2,4
    5d10:	1100eb36 	bltu	r2,r4,60c0 <_malloc_r+0x4bc>
    5d14:	8808d1ba 	srli	r4,r17,6
    5d18:	21000e04 	addi	r4,r4,56
    5d1c:	210b883a 	add	r5,r4,r4
    5d20:	294b883a 	add	r5,r5,r5
    5d24:	294b883a 	add	r5,r5,r5
    5d28:	04c00074 	movhi	r19,1
    5d2c:	9cf69704 	addi	r19,r19,-9636
    5d30:	994b883a 	add	r5,r19,r5
    5d34:	2c000317 	ldw	r16,12(r5)
    5d38:	2c000e26 	beq	r5,r16,5d74 <_malloc_r+0x170>
    5d3c:	80c00117 	ldw	r3,4(r16)
    5d40:	01ffff04 	movi	r7,-4
    5d44:	018003c4 	movi	r6,15
    5d48:	19c6703a 	and	r3,r3,r7
    5d4c:	1c45c83a 	sub	r2,r3,r17
    5d50:	30800716 	blt	r6,r2,5d70 <_malloc_r+0x16c>
    5d54:	1000610e 	bge	r2,zero,5edc <_malloc_r+0x2d8>
    5d58:	84000317 	ldw	r16,12(r16)
    5d5c:	2c000526 	beq	r5,r16,5d74 <_malloc_r+0x170>
    5d60:	80c00117 	ldw	r3,4(r16)
    5d64:	19c6703a 	and	r3,r3,r7
    5d68:	1c45c83a 	sub	r2,r3,r17
    5d6c:	30bff90e 	bge	r6,r2,5d54 <_malloc_r+0x150>
    5d70:	213fffc4 	addi	r4,r4,-1
    5d74:	21000044 	addi	r4,r4,1
    5d78:	9c000417 	ldw	r16,16(r19)
    5d7c:	00c00074 	movhi	r3,1
    5d80:	18f69704 	addi	r3,r3,-9636
    5d84:	1a400204 	addi	r9,r3,8
    5d88:	8240ff26 	beq	r16,r9,6188 <_malloc_r+0x584>
    5d8c:	81400117 	ldw	r5,4(r16)
    5d90:	00bfff04 	movi	r2,-4
    5d94:	018003c4 	movi	r6,15
    5d98:	2884703a 	and	r2,r5,r2
    5d9c:	144bc83a 	sub	r5,r2,r17
    5da0:	3140ea16 	blt	r6,r5,614c <_malloc_r+0x548>
    5da4:	1a400515 	stw	r9,20(r3)
    5da8:	1a400415 	stw	r9,16(r3)
    5dac:	2800570e 	bge	r5,zero,5f0c <_malloc_r+0x308>
    5db0:	01407fc4 	movi	r5,511
    5db4:	2880ca36 	bltu	r5,r2,60e0 <_malloc_r+0x4dc>
    5db8:	1004d0fa 	srli	r2,r2,3
    5dbc:	02000044 	movi	r8,1
    5dc0:	19c00117 	ldw	r7,4(r3)
    5dc4:	108b883a 	add	r5,r2,r2
    5dc8:	294b883a 	add	r5,r5,r5
    5dcc:	1005d0ba 	srai	r2,r2,2
    5dd0:	294b883a 	add	r5,r5,r5
    5dd4:	28cb883a 	add	r5,r5,r3
    5dd8:	29800217 	ldw	r6,8(r5)
    5ddc:	4084983a 	sll	r2,r8,r2
    5de0:	81400315 	stw	r5,12(r16)
    5de4:	81800215 	stw	r6,8(r16)
    5de8:	11c4b03a 	or	r2,r2,r7
    5dec:	18800115 	stw	r2,4(r3)
    5df0:	2c000215 	stw	r16,8(r5)
    5df4:	34000315 	stw	r16,12(r6)
    5df8:	200bd0ba 	srai	r5,r4,2
    5dfc:	00c00044 	movi	r3,1
    5e00:	194a983a 	sll	r5,r3,r5
    5e04:	11404936 	bltu	r2,r5,5f2c <_malloc_r+0x328>
    5e08:	1146703a 	and	r3,r2,r5
    5e0c:	18000a1e 	bne	r3,zero,5e38 <_malloc_r+0x234>
    5e10:	00ffff04 	movi	r3,-4
    5e14:	294b883a 	add	r5,r5,r5
    5e18:	20c8703a 	and	r4,r4,r3
    5e1c:	1146703a 	and	r3,r2,r5
    5e20:	21000104 	addi	r4,r4,4
    5e24:	1800041e 	bne	r3,zero,5e38 <_malloc_r+0x234>
    5e28:	294b883a 	add	r5,r5,r5
    5e2c:	1146703a 	and	r3,r2,r5
    5e30:	21000104 	addi	r4,r4,4
    5e34:	183ffc26 	beq	r3,zero,5e28 <_malloc_r+0x224>
    5e38:	023fff04 	movi	r8,-4
    5e3c:	01c003c4 	movi	r7,15
    5e40:	2105883a 	add	r2,r4,r4
    5e44:	1085883a 	add	r2,r2,r2
    5e48:	1085883a 	add	r2,r2,r2
    5e4c:	9899883a 	add	r12,r19,r2
    5e50:	62800304 	addi	r10,r12,12
    5e54:	2017883a 	mov	r11,r4
    5e58:	54000017 	ldw	r16,0(r10)
    5e5c:	51bffd04 	addi	r6,r10,-12
    5e60:	8180041e 	bne	r16,r6,5e74 <_malloc_r+0x270>
    5e64:	0000ca06 	br	6190 <_malloc_r+0x58c>
    5e68:	10001c0e 	bge	r2,zero,5edc <_malloc_r+0x2d8>
    5e6c:	84000317 	ldw	r16,12(r16)
    5e70:	8180c726 	beq	r16,r6,6190 <_malloc_r+0x58c>
    5e74:	80c00117 	ldw	r3,4(r16)
    5e78:	1a06703a 	and	r3,r3,r8
    5e7c:	1c45c83a 	sub	r2,r3,r17
    5e80:	38bff90e 	bge	r7,r2,5e68 <_malloc_r+0x264>
    5e84:	81000317 	ldw	r4,12(r16)
    5e88:	81400217 	ldw	r5,8(r16)
    5e8c:	8447883a 	add	r3,r16,r17
    5e90:	8c400054 	ori	r17,r17,1
    5e94:	29000315 	stw	r4,12(r5)
    5e98:	21400215 	stw	r5,8(r4)
    5e9c:	84400115 	stw	r17,4(r16)
    5ea0:	1889883a 	add	r4,r3,r2
    5ea4:	11400054 	ori	r5,r2,1
    5ea8:	98c00515 	stw	r3,20(r19)
    5eac:	98c00415 	stw	r3,16(r19)
    5eb0:	20800015 	stw	r2,0(r4)
    5eb4:	1a400315 	stw	r9,12(r3)
    5eb8:	1a400215 	stw	r9,8(r3)
    5ebc:	19400115 	stw	r5,4(r3)
    5ec0:	9009883a 	mov	r4,r18
    5ec4:	000abc40 	call	abc4 <__malloc_unlock>
    5ec8:	80800204 	addi	r2,r16,8
    5ecc:	003f7b06 	br	5cbc <_malloc_r+0xb8>
    5ed0:	8808d0fa 	srli	r4,r17,3
    5ed4:	210b883a 	add	r5,r4,r4
    5ed8:	003f9106 	br	5d20 <_malloc_r+0x11c>
    5edc:	80c7883a 	add	r3,r16,r3
    5ee0:	19400117 	ldw	r5,4(r3)
    5ee4:	80800317 	ldw	r2,12(r16)
    5ee8:	81000217 	ldw	r4,8(r16)
    5eec:	29400054 	ori	r5,r5,1
    5ef0:	19400115 	stw	r5,4(r3)
    5ef4:	20800315 	stw	r2,12(r4)
    5ef8:	11000215 	stw	r4,8(r2)
    5efc:	9009883a 	mov	r4,r18
    5f00:	000abc40 	call	abc4 <__malloc_unlock>
    5f04:	80800204 	addi	r2,r16,8
    5f08:	003f6c06 	br	5cbc <_malloc_r+0xb8>
    5f0c:	8085883a 	add	r2,r16,r2
    5f10:	10c00117 	ldw	r3,4(r2)
    5f14:	9009883a 	mov	r4,r18
    5f18:	18c00054 	ori	r3,r3,1
    5f1c:	10c00115 	stw	r3,4(r2)
    5f20:	000abc40 	call	abc4 <__malloc_unlock>
    5f24:	80800204 	addi	r2,r16,8
    5f28:	003f6406 	br	5cbc <_malloc_r+0xb8>
    5f2c:	9c000217 	ldw	r16,8(r19)
    5f30:	00bfff04 	movi	r2,-4
    5f34:	85400117 	ldw	r21,4(r16)
    5f38:	a8aa703a 	and	r21,r21,r2
    5f3c:	ac400336 	bltu	r21,r17,5f4c <_malloc_r+0x348>
    5f40:	ac45c83a 	sub	r2,r21,r17
    5f44:	00c003c4 	movi	r3,15
    5f48:	18805316 	blt	r3,r2,6098 <_malloc_r+0x494>
    5f4c:	d5e6aa17 	ldw	r23,-25944(gp)
    5f50:	d0e00317 	ldw	r3,-32756(gp)
    5f54:	00bfffc4 	movi	r2,-1
    5f58:	8579883a 	add	fp,r16,r21
    5f5c:	8def883a 	add	r23,r17,r23
    5f60:	1880d226 	beq	r3,r2,62ac <_malloc_r+0x6a8>
    5f64:	bdc403c4 	addi	r23,r23,4111
    5f68:	00bc0004 	movi	r2,-4096
    5f6c:	b8ae703a 	and	r23,r23,r2
    5f70:	9009883a 	mov	r4,r18
    5f74:	b80b883a 	mov	r5,r23
    5f78:	0007ed80 	call	7ed8 <_sbrk_r>
    5f7c:	1029883a 	mov	r20,r2
    5f80:	00bfffc4 	movi	r2,-1
    5f84:	a080d126 	beq	r20,r2,62cc <_malloc_r+0x6c8>
    5f88:	a7009f36 	bltu	r20,fp,6208 <_malloc_r+0x604>
    5f8c:	05800074 	movhi	r22,1
    5f90:	b582cf04 	addi	r22,r22,2876
    5f94:	b0800017 	ldw	r2,0(r22)
    5f98:	b885883a 	add	r2,r23,r2
    5f9c:	b0800015 	stw	r2,0(r22)
    5fa0:	e500cf26 	beq	fp,r20,62e0 <_malloc_r+0x6dc>
    5fa4:	d1200317 	ldw	r4,-32756(gp)
    5fa8:	00ffffc4 	movi	r3,-1
    5fac:	20c0e026 	beq	r4,r3,6330 <_malloc_r+0x72c>
    5fb0:	a739c83a 	sub	fp,r20,fp
    5fb4:	1705883a 	add	r2,r2,fp
    5fb8:	b0800015 	stw	r2,0(r22)
    5fbc:	a08001cc 	andi	r2,r20,7
    5fc0:	1000a526 	beq	r2,zero,6258 <_malloc_r+0x654>
    5fc4:	a0a9c83a 	sub	r20,r20,r2
    5fc8:	00c40204 	movi	r3,4104
    5fcc:	a5000204 	addi	r20,r20,8
    5fd0:	1885c83a 	sub	r2,r3,r2
    5fd4:	a5c7883a 	add	r3,r20,r23
    5fd8:	18c3ffcc 	andi	r3,r3,4095
    5fdc:	10efc83a 	sub	r23,r2,r3
    5fe0:	9009883a 	mov	r4,r18
    5fe4:	b80b883a 	mov	r5,r23
    5fe8:	0007ed80 	call	7ed8 <_sbrk_r>
    5fec:	00ffffc4 	movi	r3,-1
    5ff0:	10c0cc26 	beq	r2,r3,6324 <_malloc_r+0x720>
    5ff4:	1505c83a 	sub	r2,r2,r20
    5ff8:	b887883a 	add	r3,r23,r2
    5ffc:	18c00054 	ori	r3,r3,1
    6000:	b0800017 	ldw	r2,0(r22)
    6004:	9d000215 	stw	r20,8(r19)
    6008:	a0c00115 	stw	r3,4(r20)
    600c:	b885883a 	add	r2,r23,r2
    6010:	b0800015 	stw	r2,0(r22)
    6014:	84c00e26 	beq	r16,r19,6050 <_malloc_r+0x44c>
    6018:	00c003c4 	movi	r3,15
    601c:	1d40902e 	bgeu	r3,r21,6260 <_malloc_r+0x65c>
    6020:	ad7ffd04 	addi	r21,r21,-12
    6024:	013ffe04 	movi	r4,-8
    6028:	a908703a 	and	r4,r21,r4
    602c:	810b883a 	add	r5,r16,r4
    6030:	01800144 	movi	r6,5
    6034:	29800115 	stw	r6,4(r5)
    6038:	29800215 	stw	r6,8(r5)
    603c:	81400117 	ldw	r5,4(r16)
    6040:	2940004c 	andi	r5,r5,1
    6044:	214ab03a 	or	r5,r4,r5
    6048:	81400115 	stw	r5,4(r16)
    604c:	1900ae36 	bltu	r3,r4,6308 <_malloc_r+0x704>
    6050:	d0e6a917 	ldw	r3,-25948(gp)
    6054:	1880012e 	bgeu	r3,r2,605c <_malloc_r+0x458>
    6058:	d0a6a915 	stw	r2,-25948(gp)
    605c:	d0e6a817 	ldw	r3,-25952(gp)
    6060:	9c000217 	ldw	r16,8(r19)
    6064:	1880012e 	bgeu	r3,r2,606c <_malloc_r+0x468>
    6068:	d0a6a815 	stw	r2,-25952(gp)
    606c:	80c00117 	ldw	r3,4(r16)
    6070:	00bfff04 	movi	r2,-4
    6074:	1886703a 	and	r3,r3,r2
    6078:	1c45c83a 	sub	r2,r3,r17
    607c:	1c400236 	bltu	r3,r17,6088 <_malloc_r+0x484>
    6080:	00c003c4 	movi	r3,15
    6084:	18800416 	blt	r3,r2,6098 <_malloc_r+0x494>
    6088:	9009883a 	mov	r4,r18
    608c:	000abc40 	call	abc4 <__malloc_unlock>
    6090:	0005883a 	mov	r2,zero
    6094:	003f0906 	br	5cbc <_malloc_r+0xb8>
    6098:	88c00054 	ori	r3,r17,1
    609c:	10800054 	ori	r2,r2,1
    60a0:	80c00115 	stw	r3,4(r16)
    60a4:	8463883a 	add	r17,r16,r17
    60a8:	88800115 	stw	r2,4(r17)
    60ac:	9009883a 	mov	r4,r18
    60b0:	9c400215 	stw	r17,8(r19)
    60b4:	000abc40 	call	abc4 <__malloc_unlock>
    60b8:	80800204 	addi	r2,r16,8
    60bc:	003eff06 	br	5cbc <_malloc_r+0xb8>
    60c0:	00800504 	movi	r2,20
    60c4:	1100492e 	bgeu	r2,r4,61ec <_malloc_r+0x5e8>
    60c8:	00801504 	movi	r2,84
    60cc:	11005c36 	bltu	r2,r4,6240 <_malloc_r+0x63c>
    60d0:	8808d33a 	srli	r4,r17,12
    60d4:	21001b84 	addi	r4,r4,110
    60d8:	210b883a 	add	r5,r4,r4
    60dc:	003f1006 	br	5d20 <_malloc_r+0x11c>
    60e0:	1006d27a 	srli	r3,r2,9
    60e4:	01400104 	movi	r5,4
    60e8:	28c0432e 	bgeu	r5,r3,61f8 <_malloc_r+0x5f4>
    60ec:	01400504 	movi	r5,20
    60f0:	28c07036 	bltu	r5,r3,62b4 <_malloc_r+0x6b0>
    60f4:	194016c4 	addi	r5,r3,91
    60f8:	294d883a 	add	r6,r5,r5
    60fc:	318d883a 	add	r6,r6,r6
    6100:	318d883a 	add	r6,r6,r6
    6104:	998d883a 	add	r6,r19,r6
    6108:	30c00217 	ldw	r3,8(r6)
    610c:	01c00074 	movhi	r7,1
    6110:	39f69704 	addi	r7,r7,-9636
    6114:	19805726 	beq	r3,r6,6274 <_malloc_r+0x670>
    6118:	01ffff04 	movi	r7,-4
    611c:	19400117 	ldw	r5,4(r3)
    6120:	29ca703a 	and	r5,r5,r7
    6124:	1140022e 	bgeu	r2,r5,6130 <_malloc_r+0x52c>
    6128:	18c00217 	ldw	r3,8(r3)
    612c:	30fffb1e 	bne	r6,r3,611c <_malloc_r+0x518>
    6130:	19400317 	ldw	r5,12(r3)
    6134:	98800117 	ldw	r2,4(r19)
    6138:	81400315 	stw	r5,12(r16)
    613c:	80c00215 	stw	r3,8(r16)
    6140:	2c000215 	stw	r16,8(r5)
    6144:	1c000315 	stw	r16,12(r3)
    6148:	003f2b06 	br	5df8 <_malloc_r+0x1f4>
    614c:	8445883a 	add	r2,r16,r17
    6150:	8c400054 	ori	r17,r17,1
    6154:	18800515 	stw	r2,20(r3)
    6158:	18800415 	stw	r2,16(r3)
    615c:	29000054 	ori	r4,r5,1
    6160:	1147883a 	add	r3,r2,r5
    6164:	84400115 	stw	r17,4(r16)
    6168:	11000115 	stw	r4,4(r2)
    616c:	12400315 	stw	r9,12(r2)
    6170:	12400215 	stw	r9,8(r2)
    6174:	19400015 	stw	r5,0(r3)
    6178:	9009883a 	mov	r4,r18
    617c:	000abc40 	call	abc4 <__malloc_unlock>
    6180:	80800204 	addi	r2,r16,8
    6184:	003ecd06 	br	5cbc <_malloc_r+0xb8>
    6188:	18800117 	ldw	r2,4(r3)
    618c:	003f1a06 	br	5df8 <_malloc_r+0x1f4>
    6190:	5ac00044 	addi	r11,r11,1
    6194:	588000cc 	andi	r2,r11,3
    6198:	52800204 	addi	r10,r10,8
    619c:	103f2e1e 	bne	r2,zero,5e58 <_malloc_r+0x254>
    61a0:	20c000cc 	andi	r3,r4,3
    61a4:	60bffe04 	addi	r2,r12,-8
    61a8:	18006f26 	beq	r3,zero,6368 <_malloc_r+0x764>
    61ac:	63000017 	ldw	r12,0(r12)
    61b0:	213fffc4 	addi	r4,r4,-1
    61b4:	60bffa26 	beq	r12,r2,61a0 <_malloc_r+0x59c>
    61b8:	98800117 	ldw	r2,4(r19)
    61bc:	294b883a 	add	r5,r5,r5
    61c0:	117f5a36 	bltu	r2,r5,5f2c <_malloc_r+0x328>
    61c4:	283f5926 	beq	r5,zero,5f2c <_malloc_r+0x328>
    61c8:	1146703a 	and	r3,r2,r5
    61cc:	18001626 	beq	r3,zero,6228 <_malloc_r+0x624>
    61d0:	5809883a 	mov	r4,r11
    61d4:	003f1a06 	br	5e40 <_malloc_r+0x23c>
    61d8:	80800204 	addi	r2,r16,8
    61dc:	84000517 	ldw	r16,20(r16)
    61e0:	143ea81e 	bne	r2,r16,5c84 <_malloc_r+0x80>
    61e4:	21000084 	addi	r4,r4,2
    61e8:	003ee306 	br	5d78 <_malloc_r+0x174>
    61ec:	210016c4 	addi	r4,r4,91
    61f0:	210b883a 	add	r5,r4,r4
    61f4:	003eca06 	br	5d20 <_malloc_r+0x11c>
    61f8:	100ad1ba 	srli	r5,r2,6
    61fc:	29400e04 	addi	r5,r5,56
    6200:	294d883a 	add	r6,r5,r5
    6204:	003fbd06 	br	60fc <_malloc_r+0x4f8>
    6208:	84ff6026 	beq	r16,r19,5f8c <_malloc_r+0x388>
    620c:	00800074 	movhi	r2,1
    6210:	10b69704 	addi	r2,r2,-9636
    6214:	14000217 	ldw	r16,8(r2)
    6218:	00bfff04 	movi	r2,-4
    621c:	80c00117 	ldw	r3,4(r16)
    6220:	1886703a 	and	r3,r3,r2
    6224:	003f9406 	br	6078 <_malloc_r+0x474>
    6228:	294b883a 	add	r5,r5,r5
    622c:	1146703a 	and	r3,r2,r5
    6230:	5ac00104 	addi	r11,r11,4
    6234:	183ffc26 	beq	r3,zero,6228 <_malloc_r+0x624>
    6238:	5809883a 	mov	r4,r11
    623c:	003f0006 	br	5e40 <_malloc_r+0x23c>
    6240:	00805504 	movi	r2,340
    6244:	11001336 	bltu	r2,r4,6294 <_malloc_r+0x690>
    6248:	8808d3fa 	srli	r4,r17,15
    624c:	21001dc4 	addi	r4,r4,119
    6250:	210b883a 	add	r5,r4,r4
    6254:	003eb206 	br	5d20 <_malloc_r+0x11c>
    6258:	00840004 	movi	r2,4096
    625c:	003f5d06 	br	5fd4 <_malloc_r+0x3d0>
    6260:	00800044 	movi	r2,1
    6264:	a0800115 	stw	r2,4(r20)
    6268:	a021883a 	mov	r16,r20
    626c:	0007883a 	mov	r3,zero
    6270:	003f8106 	br	6078 <_malloc_r+0x474>
    6274:	280bd0ba 	srai	r5,r5,2
    6278:	01800044 	movi	r6,1
    627c:	38800117 	ldw	r2,4(r7)
    6280:	314c983a 	sll	r6,r6,r5
    6284:	180b883a 	mov	r5,r3
    6288:	3084b03a 	or	r2,r6,r2
    628c:	38800115 	stw	r2,4(r7)
    6290:	003fa906 	br	6138 <_malloc_r+0x534>
    6294:	00815504 	movi	r2,1364
    6298:	11001836 	bltu	r2,r4,62fc <_malloc_r+0x6f8>
    629c:	8808d4ba 	srli	r4,r17,18
    62a0:	21001f04 	addi	r4,r4,124
    62a4:	210b883a 	add	r5,r4,r4
    62a8:	003e9d06 	br	5d20 <_malloc_r+0x11c>
    62ac:	bdc00404 	addi	r23,r23,16
    62b0:	003f2f06 	br	5f70 <_malloc_r+0x36c>
    62b4:	01401504 	movi	r5,84
    62b8:	28c01f36 	bltu	r5,r3,6338 <_malloc_r+0x734>
    62bc:	100ad33a 	srli	r5,r2,12
    62c0:	29401b84 	addi	r5,r5,110
    62c4:	294d883a 	add	r6,r5,r5
    62c8:	003f8c06 	br	60fc <_malloc_r+0x4f8>
    62cc:	9c000217 	ldw	r16,8(r19)
    62d0:	00bfff04 	movi	r2,-4
    62d4:	80c00117 	ldw	r3,4(r16)
    62d8:	1886703a 	and	r3,r3,r2
    62dc:	003f6606 	br	6078 <_malloc_r+0x474>
    62e0:	e0c3ffcc 	andi	r3,fp,4095
    62e4:	183f2f1e 	bne	r3,zero,5fa4 <_malloc_r+0x3a0>
    62e8:	98c00217 	ldw	r3,8(r19)
    62ec:	bd49883a 	add	r4,r23,r21
    62f0:	21000054 	ori	r4,r4,1
    62f4:	19000115 	stw	r4,4(r3)
    62f8:	003f5506 	br	6050 <_malloc_r+0x44c>
    62fc:	01403f04 	movi	r5,252
    6300:	01001f84 	movi	r4,126
    6304:	003e8606 	br	5d20 <_malloc_r+0x11c>
    6308:	9009883a 	mov	r4,r18
    630c:	81400204 	addi	r5,r16,8
    6310:	000506c0 	call	506c <_free_r>
    6314:	00800074 	movhi	r2,1
    6318:	1082cf04 	addi	r2,r2,2876
    631c:	10800017 	ldw	r2,0(r2)
    6320:	003f4b06 	br	6050 <_malloc_r+0x44c>
    6324:	00c00044 	movi	r3,1
    6328:	002f883a 	mov	r23,zero
    632c:	003f3406 	br	6000 <_malloc_r+0x3fc>
    6330:	d5200315 	stw	r20,-32756(gp)
    6334:	003f2106 	br	5fbc <_malloc_r+0x3b8>
    6338:	01405504 	movi	r5,340
    633c:	28c00436 	bltu	r5,r3,6350 <_malloc_r+0x74c>
    6340:	100ad3fa 	srli	r5,r2,15
    6344:	29401dc4 	addi	r5,r5,119
    6348:	294d883a 	add	r6,r5,r5
    634c:	003f6b06 	br	60fc <_malloc_r+0x4f8>
    6350:	01415504 	movi	r5,1364
    6354:	28c00936 	bltu	r5,r3,637c <_malloc_r+0x778>
    6358:	100ad4ba 	srli	r5,r2,18
    635c:	29401f04 	addi	r5,r5,124
    6360:	294d883a 	add	r6,r5,r5
    6364:	003f6506 	br	60fc <_malloc_r+0x4f8>
    6368:	98800117 	ldw	r2,4(r19)
    636c:	0146303a 	nor	r3,zero,r5
    6370:	1884703a 	and	r2,r3,r2
    6374:	98800115 	stw	r2,4(r19)
    6378:	003f9006 	br	61bc <_malloc_r+0x5b8>
    637c:	01803f04 	movi	r6,252
    6380:	01401f84 	movi	r5,126
    6384:	003f5d06 	br	60fc <_malloc_r+0x4f8>

00006388 <memchr>:
    6388:	008000c4 	movi	r2,3
    638c:	29403fcc 	andi	r5,r5,255
    6390:	1180282e 	bgeu	r2,r6,6434 <memchr+0xac>
    6394:	2086703a 	and	r3,r4,r2
    6398:	1800351e 	bne	r3,zero,6470 <memchr+0xe8>
    639c:	2816923a 	slli	r11,r5,8
    63a0:	2093883a 	add	r9,r4,r2
    63a4:	22000084 	addi	r8,r4,2
    63a8:	5957883a 	add	r11,r11,r5
    63ac:	5816923a 	slli	r11,r11,8
    63b0:	20c00044 	addi	r3,r4,1
    63b4:	037fbff4 	movhi	r13,65279
    63b8:	6b7fbfc4 	addi	r13,r13,-257
    63bc:	5957883a 	add	r11,r11,r5
    63c0:	5816923a 	slli	r11,r11,8
    63c4:	03202074 	movhi	r12,32897
    63c8:	63202004 	addi	r12,r12,-32640
    63cc:	101d883a 	mov	r14,r2
    63d0:	5957883a 	add	r11,r11,r5
    63d4:	21c00017 	ldw	r7,0(r4)
    63d8:	31bfff04 	addi	r6,r6,-4
    63dc:	1805883a 	mov	r2,r3
    63e0:	3acef03a 	xor	r7,r7,r11
    63e4:	3b55883a 	add	r10,r7,r13
    63e8:	01ce303a 	nor	r7,zero,r7
    63ec:	51ce703a 	and	r7,r10,r7
    63f0:	3b0e703a 	and	r7,r7,r12
    63f4:	38000a26 	beq	r7,zero,6420 <memchr+0x98>
    63f8:	21c00003 	ldbu	r7,0(r4)
    63fc:	39401e26 	beq	r7,r5,6478 <memchr+0xf0>
    6400:	19c00003 	ldbu	r7,0(r3)
    6404:	39401926 	beq	r7,r5,646c <memchr+0xe4>
    6408:	41c00003 	ldbu	r7,0(r8)
    640c:	4005883a 	mov	r2,r8
    6410:	39401626 	beq	r7,r5,646c <memchr+0xe4>
    6414:	49c00003 	ldbu	r7,0(r9)
    6418:	4805883a 	mov	r2,r9
    641c:	39401326 	beq	r7,r5,646c <memchr+0xe4>
    6420:	21000104 	addi	r4,r4,4
    6424:	4a400104 	addi	r9,r9,4
    6428:	42000104 	addi	r8,r8,4
    642c:	18c00104 	addi	r3,r3,4
    6430:	71bfe836 	bltu	r14,r6,63d4 <memchr+0x4c>
    6434:	2005883a 	mov	r2,r4
    6438:	30000a26 	beq	r6,zero,6464 <memchr+0xdc>
    643c:	10c00003 	ldbu	r3,0(r2)
    6440:	19400a26 	beq	r3,r5,646c <memchr+0xe4>
    6444:	10c00044 	addi	r3,r2,1
    6448:	118d883a 	add	r6,r2,r6
    644c:	00000306 	br	645c <memchr+0xd4>
    6450:	11000003 	ldbu	r4,0(r2)
    6454:	18c00044 	addi	r3,r3,1
    6458:	21400426 	beq	r4,r5,646c <memchr+0xe4>
    645c:	1805883a 	mov	r2,r3
    6460:	19bffb1e 	bne	r3,r6,6450 <memchr+0xc8>
    6464:	0005883a 	mov	r2,zero
    6468:	f800283a 	ret
    646c:	f800283a 	ret
    6470:	2005883a 	mov	r2,r4
    6474:	003ff106 	br	643c <memchr+0xb4>
    6478:	2005883a 	mov	r2,r4
    647c:	f800283a 	ret

00006480 <memcpy>:
    6480:	defffb04 	addi	sp,sp,-20
    6484:	dc000015 	stw	r16,0(sp)
    6488:	dfc00415 	stw	ra,16(sp)
    648c:	dcc00315 	stw	r19,12(sp)
    6490:	dc800215 	stw	r18,8(sp)
    6494:	dc400115 	stw	r17,4(sp)
    6498:	00c003c4 	movi	r3,15
    649c:	2021883a 	mov	r16,r4
    64a0:	3005883a 	mov	r2,r6
    64a4:	1980032e 	bgeu	r3,r6,64b4 <memcpy+0x34>
    64a8:	2906b03a 	or	r3,r5,r4
    64ac:	18c000cc 	andi	r3,r3,3
    64b0:	18001026 	beq	r3,zero,64f4 <memcpy+0x74>
    64b4:	8007883a 	mov	r3,r16
    64b8:	288f883a 	add	r7,r5,r2
    64bc:	10000526 	beq	r2,zero,64d4 <memcpy+0x54>
    64c0:	29800003 	ldbu	r6,0(r5)
    64c4:	18c00044 	addi	r3,r3,1
    64c8:	29400044 	addi	r5,r5,1
    64cc:	19bfffc5 	stb	r6,-1(r3)
    64d0:	29fffb1e 	bne	r5,r7,64c0 <memcpy+0x40>
    64d4:	8005883a 	mov	r2,r16
    64d8:	dfc00417 	ldw	ra,16(sp)
    64dc:	dcc00317 	ldw	r19,12(sp)
    64e0:	dc800217 	ldw	r18,8(sp)
    64e4:	dc400117 	ldw	r17,4(sp)
    64e8:	dc000017 	ldw	r16,0(sp)
    64ec:	dec00504 	addi	sp,sp,20
    64f0:	f800283a 	ret
    64f4:	32bffc04 	addi	r10,r6,-16
    64f8:	5014d13a 	srli	r10,r10,4
    64fc:	20800404 	addi	r2,r4,16
    6500:	2007883a 	mov	r3,r4
    6504:	5008913a 	slli	r4,r10,4
    6508:	280f883a 	mov	r7,r5
    650c:	1105883a 	add	r2,r2,r4
    6510:	3a000017 	ldw	r8,0(r7)
    6514:	18c00404 	addi	r3,r3,16
    6518:	39c00404 	addi	r7,r7,16
    651c:	1a3ffc15 	stw	r8,-16(r3)
    6520:	3a3ffd17 	ldw	r8,-12(r7)
    6524:	1a3ffd15 	stw	r8,-12(r3)
    6528:	3a3ffe17 	ldw	r8,-8(r7)
    652c:	1a3ffe15 	stw	r8,-8(r3)
    6530:	3a3fff17 	ldw	r8,-4(r7)
    6534:	1a3fff15 	stw	r8,-4(r3)
    6538:	18bff51e 	bne	r3,r2,6510 <memcpy+0x90>
    653c:	52800044 	addi	r10,r10,1
    6540:	5014913a 	slli	r10,r10,4
    6544:	308003cc 	andi	r2,r6,15
    6548:	010000c4 	movi	r4,3
    654c:	8287883a 	add	r3,r16,r10
    6550:	2a95883a 	add	r10,r5,r10
    6554:	2080182e 	bgeu	r4,r2,65b8 <memcpy+0x138>
    6558:	147fff04 	addi	r17,r2,-4
    655c:	8808d0ba 	srli	r4,r17,2
    6560:	1a400104 	addi	r9,r3,4
    6564:	180d883a 	mov	r6,r3
    6568:	2105883a 	add	r2,r4,r4
    656c:	1085883a 	add	r2,r2,r2
    6570:	4893883a 	add	r9,r9,r2
    6574:	500f883a 	mov	r7,r10
    6578:	3a000017 	ldw	r8,0(r7)
    657c:	31800104 	addi	r6,r6,4
    6580:	39c00104 	addi	r7,r7,4
    6584:	323fff15 	stw	r8,-4(r6)
    6588:	327ffb1e 	bne	r6,r9,6578 <memcpy+0xf8>
    658c:	20800044 	addi	r2,r4,1
    6590:	1085883a 	add	r2,r2,r2
    6594:	1085883a 	add	r2,r2,r2
    6598:	017fff04 	movi	r5,-4
    659c:	18a5883a 	add	r18,r3,r2
    65a0:	50a7883a 	add	r19,r10,r2
    65a4:	0000e000 	call	e00 <__mulsi3>
    65a8:	1445883a 	add	r2,r2,r17
    65ac:	980b883a 	mov	r5,r19
    65b0:	9007883a 	mov	r3,r18
    65b4:	003fc006 	br	64b8 <memcpy+0x38>
    65b8:	500b883a 	mov	r5,r10
    65bc:	003fbe06 	br	64b8 <memcpy+0x38>

000065c0 <memmove>:
    65c0:	defffb04 	addi	sp,sp,-20
    65c4:	dc000015 	stw	r16,0(sp)
    65c8:	dfc00415 	stw	ra,16(sp)
    65cc:	dcc00315 	stw	r19,12(sp)
    65d0:	dc800215 	stw	r18,8(sp)
    65d4:	dc400115 	stw	r17,4(sp)
    65d8:	2021883a 	mov	r16,r4
    65dc:	300f883a 	mov	r7,r6
    65e0:	2900122e 	bgeu	r5,r4,662c <memmove+0x6c>
    65e4:	2987883a 	add	r3,r5,r6
    65e8:	20c0102e 	bgeu	r4,r3,662c <memmove+0x6c>
    65ec:	218b883a 	add	r5,r4,r6
    65f0:	1989c83a 	sub	r4,r3,r6
    65f4:	30000526 	beq	r6,zero,660c <memmove+0x4c>
    65f8:	18ffffc4 	addi	r3,r3,-1
    65fc:	18800003 	ldbu	r2,0(r3)
    6600:	297fffc4 	addi	r5,r5,-1
    6604:	28800005 	stb	r2,0(r5)
    6608:	193ffb1e 	bne	r3,r4,65f8 <memmove+0x38>
    660c:	8005883a 	mov	r2,r16
    6610:	dfc00417 	ldw	ra,16(sp)
    6614:	dcc00317 	ldw	r19,12(sp)
    6618:	dc800217 	ldw	r18,8(sp)
    661c:	dc400117 	ldw	r17,4(sp)
    6620:	dc000017 	ldw	r16,0(sp)
    6624:	dec00504 	addi	sp,sp,20
    6628:	f800283a 	ret
    662c:	008003c4 	movi	r2,15
    6630:	1180422e 	bgeu	r2,r6,673c <memmove+0x17c>
    6634:	2c04b03a 	or	r2,r5,r16
    6638:	108000cc 	andi	r2,r2,3
    663c:	10003f1e 	bne	r2,zero,673c <memmove+0x17c>
    6640:	32bffc04 	addi	r10,r6,-16
    6644:	5014d13a 	srli	r10,r10,4
    6648:	81000404 	addi	r4,r16,16
    664c:	8007883a 	mov	r3,r16
    6650:	5004913a 	slli	r2,r10,4
    6654:	280f883a 	mov	r7,r5
    6658:	2089883a 	add	r4,r4,r2
    665c:	38800017 	ldw	r2,0(r7)
    6660:	18c00404 	addi	r3,r3,16
    6664:	39c00404 	addi	r7,r7,16
    6668:	18bffc15 	stw	r2,-16(r3)
    666c:	38bffd17 	ldw	r2,-12(r7)
    6670:	18bffd15 	stw	r2,-12(r3)
    6674:	38bffe17 	ldw	r2,-8(r7)
    6678:	18bffe15 	stw	r2,-8(r3)
    667c:	38bfff17 	ldw	r2,-4(r7)
    6680:	18bfff15 	stw	r2,-4(r3)
    6684:	193ff51e 	bne	r3,r4,665c <memmove+0x9c>
    6688:	52800044 	addi	r10,r10,1
    668c:	5014913a 	slli	r10,r10,4
    6690:	31c003cc 	andi	r7,r6,15
    6694:	008000c4 	movi	r2,3
    6698:	8287883a 	add	r3,r16,r10
    669c:	2a95883a 	add	r10,r5,r10
    66a0:	11c0282e 	bgeu	r2,r7,6744 <memmove+0x184>
    66a4:	3c7fff04 	addi	r17,r7,-4
    66a8:	8808d0ba 	srli	r4,r17,2
    66ac:	1a400104 	addi	r9,r3,4
    66b0:	180d883a 	mov	r6,r3
    66b4:	2105883a 	add	r2,r4,r4
    66b8:	1085883a 	add	r2,r2,r2
    66bc:	4893883a 	add	r9,r9,r2
    66c0:	5005883a 	mov	r2,r10
    66c4:	12000017 	ldw	r8,0(r2)
    66c8:	31800104 	addi	r6,r6,4
    66cc:	10800104 	addi	r2,r2,4
    66d0:	323fff15 	stw	r8,-4(r6)
    66d4:	327ffb1e 	bne	r6,r9,66c4 <memmove+0x104>
    66d8:	20800044 	addi	r2,r4,1
    66dc:	1085883a 	add	r2,r2,r2
    66e0:	1085883a 	add	r2,r2,r2
    66e4:	017fff04 	movi	r5,-4
    66e8:	18a5883a 	add	r18,r3,r2
    66ec:	50a7883a 	add	r19,r10,r2
    66f0:	0000e000 	call	e00 <__mulsi3>
    66f4:	144f883a 	add	r7,r2,r17
    66f8:	980b883a 	mov	r5,r19
    66fc:	9007883a 	mov	r3,r18
    6700:	383fc226 	beq	r7,zero,660c <memmove+0x4c>
    6704:	19cf883a 	add	r7,r3,r7
    6708:	29800003 	ldbu	r6,0(r5)
    670c:	18c00044 	addi	r3,r3,1
    6710:	29400044 	addi	r5,r5,1
    6714:	19bfffc5 	stb	r6,-1(r3)
    6718:	19fffb1e 	bne	r3,r7,6708 <memmove+0x148>
    671c:	8005883a 	mov	r2,r16
    6720:	dfc00417 	ldw	ra,16(sp)
    6724:	dcc00317 	ldw	r19,12(sp)
    6728:	dc800217 	ldw	r18,8(sp)
    672c:	dc400117 	ldw	r17,4(sp)
    6730:	dc000017 	ldw	r16,0(sp)
    6734:	dec00504 	addi	sp,sp,20
    6738:	f800283a 	ret
    673c:	8007883a 	mov	r3,r16
    6740:	003fef06 	br	6700 <memmove+0x140>
    6744:	500b883a 	mov	r5,r10
    6748:	003fed06 	br	6700 <memmove+0x140>

0000674c <memset>:
    674c:	00c000c4 	movi	r3,3
    6750:	2005883a 	mov	r2,r4
    6754:	29403fcc 	andi	r5,r5,255
    6758:	19802d2e 	bgeu	r3,r6,6810 <memset+0xc4>
    675c:	20c6703a 	and	r3,r4,r3
    6760:	18002e1e 	bne	r3,zero,681c <memset+0xd0>
    6764:	2806923a 	slli	r3,r5,8
    6768:	010003c4 	movi	r4,15
    676c:	3011883a 	mov	r8,r6
    6770:	1946b03a 	or	r3,r3,r5
    6774:	180e943a 	slli	r7,r3,16
    6778:	38ceb03a 	or	r7,r7,r3
    677c:	1007883a 	mov	r3,r2
    6780:	21800f2e 	bgeu	r4,r6,67c0 <memset+0x74>
    6784:	19c00015 	stw	r7,0(r3)
    6788:	19c00115 	stw	r7,4(r3)
    678c:	19c00215 	stw	r7,8(r3)
    6790:	19c00315 	stw	r7,12(r3)
    6794:	423ffc04 	addi	r8,r8,-16
    6798:	18c00404 	addi	r3,r3,16
    679c:	223ff936 	bltu	r4,r8,6784 <memset+0x38>
    67a0:	30fffc04 	addi	r3,r6,-16
    67a4:	1806d13a 	srli	r3,r3,4
    67a8:	318003cc 	andi	r6,r6,15
    67ac:	010000c4 	movi	r4,3
    67b0:	18c00044 	addi	r3,r3,1
    67b4:	1806913a 	slli	r3,r3,4
    67b8:	10c7883a 	add	r3,r2,r3
    67bc:	21800e2e 	bgeu	r4,r6,67f8 <memset+0xac>
    67c0:	1813883a 	mov	r9,r3
    67c4:	3011883a 	mov	r8,r6
    67c8:	010000c4 	movi	r4,3
    67cc:	49c00015 	stw	r7,0(r9)
    67d0:	423fff04 	addi	r8,r8,-4
    67d4:	4a400104 	addi	r9,r9,4
    67d8:	223ffc36 	bltu	r4,r8,67cc <memset+0x80>
    67dc:	313fff04 	addi	r4,r6,-4
    67e0:	2008d0ba 	srli	r4,r4,2
    67e4:	318000cc 	andi	r6,r6,3
    67e8:	21000044 	addi	r4,r4,1
    67ec:	2109883a 	add	r4,r4,r4
    67f0:	2109883a 	add	r4,r4,r4
    67f4:	1907883a 	add	r3,r3,r4
    67f8:	30000a26 	beq	r6,zero,6824 <memset+0xd8>
    67fc:	198d883a 	add	r6,r3,r6
    6800:	19400005 	stb	r5,0(r3)
    6804:	18c00044 	addi	r3,r3,1
    6808:	19bffd1e 	bne	r3,r6,6800 <memset+0xb4>
    680c:	f800283a 	ret
    6810:	2007883a 	mov	r3,r4
    6814:	303ff91e 	bne	r6,zero,67fc <memset+0xb0>
    6818:	00000206 	br	6824 <memset+0xd8>
    681c:	2007883a 	mov	r3,r4
    6820:	003ff606 	br	67fc <memset+0xb0>
    6824:	f800283a 	ret

00006828 <_Balloc>:
    6828:	20801317 	ldw	r2,76(r4)
    682c:	defffc04 	addi	sp,sp,-16
    6830:	dc400115 	stw	r17,4(sp)
    6834:	dc000015 	stw	r16,0(sp)
    6838:	dfc00315 	stw	ra,12(sp)
    683c:	dc800215 	stw	r18,8(sp)
    6840:	2023883a 	mov	r17,r4
    6844:	2821883a 	mov	r16,r5
    6848:	10000f26 	beq	r2,zero,6888 <_Balloc+0x60>
    684c:	8407883a 	add	r3,r16,r16
    6850:	18c7883a 	add	r3,r3,r3
    6854:	10c7883a 	add	r3,r2,r3
    6858:	18800017 	ldw	r2,0(r3)
    685c:	10001126 	beq	r2,zero,68a4 <_Balloc+0x7c>
    6860:	11000017 	ldw	r4,0(r2)
    6864:	19000015 	stw	r4,0(r3)
    6868:	10000415 	stw	zero,16(r2)
    686c:	10000315 	stw	zero,12(r2)
    6870:	dfc00317 	ldw	ra,12(sp)
    6874:	dc800217 	ldw	r18,8(sp)
    6878:	dc400117 	ldw	r17,4(sp)
    687c:	dc000017 	ldw	r16,0(sp)
    6880:	dec00404 	addi	sp,sp,16
    6884:	f800283a 	ret
    6888:	01400104 	movi	r5,4
    688c:	01800404 	movi	r6,16
    6890:	000818c0 	call	818c <_calloc_r>
    6894:	88801315 	stw	r2,76(r17)
    6898:	103fec1e 	bne	r2,zero,684c <_Balloc+0x24>
    689c:	0005883a 	mov	r2,zero
    68a0:	003ff306 	br	6870 <_Balloc+0x48>
    68a4:	01400044 	movi	r5,1
    68a8:	2c24983a 	sll	r18,r5,r16
    68ac:	8809883a 	mov	r4,r17
    68b0:	91800144 	addi	r6,r18,5
    68b4:	318d883a 	add	r6,r6,r6
    68b8:	318d883a 	add	r6,r6,r6
    68bc:	000818c0 	call	818c <_calloc_r>
    68c0:	103ff626 	beq	r2,zero,689c <_Balloc+0x74>
    68c4:	14000115 	stw	r16,4(r2)
    68c8:	14800215 	stw	r18,8(r2)
    68cc:	003fe606 	br	6868 <_Balloc+0x40>

000068d0 <_Bfree>:
    68d0:	28000826 	beq	r5,zero,68f4 <_Bfree+0x24>
    68d4:	28c00117 	ldw	r3,4(r5)
    68d8:	20801317 	ldw	r2,76(r4)
    68dc:	18c7883a 	add	r3,r3,r3
    68e0:	18c7883a 	add	r3,r3,r3
    68e4:	10c5883a 	add	r2,r2,r3
    68e8:	10c00017 	ldw	r3,0(r2)
    68ec:	28c00015 	stw	r3,0(r5)
    68f0:	11400015 	stw	r5,0(r2)
    68f4:	f800283a 	ret

000068f8 <__multadd>:
    68f8:	defff604 	addi	sp,sp,-40
    68fc:	dd400515 	stw	r21,20(sp)
    6900:	2d400417 	ldw	r21,16(r5)
    6904:	df000815 	stw	fp,32(sp)
    6908:	ddc00715 	stw	r23,28(sp)
    690c:	dd800615 	stw	r22,24(sp)
    6910:	dd000415 	stw	r20,16(sp)
    6914:	dc400115 	stw	r17,4(sp)
    6918:	dc000015 	stw	r16,0(sp)
    691c:	dfc00915 	stw	ra,36(sp)
    6920:	dcc00315 	stw	r19,12(sp)
    6924:	dc800215 	stw	r18,8(sp)
    6928:	282d883a 	mov	r22,r5
    692c:	202f883a 	mov	r23,r4
    6930:	3029883a 	mov	r20,r6
    6934:	3839883a 	mov	fp,r7
    6938:	2c000504 	addi	r16,r5,20
    693c:	0023883a 	mov	r17,zero
    6940:	84c00017 	ldw	r19,0(r16)
    6944:	a00b883a 	mov	r5,r20
    6948:	8c400044 	addi	r17,r17,1
    694c:	993fffcc 	andi	r4,r19,65535
    6950:	0000e000 	call	e00 <__mulsi3>
    6954:	1725883a 	add	r18,r2,fp
    6958:	9808d43a 	srli	r4,r19,16
    695c:	9026d43a 	srli	r19,r18,16
    6960:	a00b883a 	mov	r5,r20
    6964:	0000e000 	call	e00 <__mulsi3>
    6968:	988f883a 	add	r7,r19,r2
    696c:	3804943a 	slli	r2,r7,16
    6970:	94bfffcc 	andi	r18,r18,65535
    6974:	3838d43a 	srli	fp,r7,16
    6978:	14a5883a 	add	r18,r2,r18
    697c:	84800015 	stw	r18,0(r16)
    6980:	84000104 	addi	r16,r16,4
    6984:	8d7fee16 	blt	r17,r21,6940 <__multadd+0x48>
    6988:	e0000926 	beq	fp,zero,69b0 <__multadd+0xb8>
    698c:	b0800217 	ldw	r2,8(r22)
    6990:	a880140e 	bge	r21,r2,69e4 <__multadd+0xec>
    6994:	a8800144 	addi	r2,r21,5
    6998:	1085883a 	add	r2,r2,r2
    699c:	1085883a 	add	r2,r2,r2
    69a0:	b085883a 	add	r2,r22,r2
    69a4:	ad400044 	addi	r21,r21,1
    69a8:	17000015 	stw	fp,0(r2)
    69ac:	b5400415 	stw	r21,16(r22)
    69b0:	b005883a 	mov	r2,r22
    69b4:	dfc00917 	ldw	ra,36(sp)
    69b8:	df000817 	ldw	fp,32(sp)
    69bc:	ddc00717 	ldw	r23,28(sp)
    69c0:	dd800617 	ldw	r22,24(sp)
    69c4:	dd400517 	ldw	r21,20(sp)
    69c8:	dd000417 	ldw	r20,16(sp)
    69cc:	dcc00317 	ldw	r19,12(sp)
    69d0:	dc800217 	ldw	r18,8(sp)
    69d4:	dc400117 	ldw	r17,4(sp)
    69d8:	dc000017 	ldw	r16,0(sp)
    69dc:	dec00a04 	addi	sp,sp,40
    69e0:	f800283a 	ret
    69e4:	b1400117 	ldw	r5,4(r22)
    69e8:	b809883a 	mov	r4,r23
    69ec:	29400044 	addi	r5,r5,1
    69f0:	00068280 	call	6828 <_Balloc>
    69f4:	b1800417 	ldw	r6,16(r22)
    69f8:	b1400304 	addi	r5,r22,12
    69fc:	11000304 	addi	r4,r2,12
    6a00:	31800084 	addi	r6,r6,2
    6a04:	318d883a 	add	r6,r6,r6
    6a08:	318d883a 	add	r6,r6,r6
    6a0c:	1021883a 	mov	r16,r2
    6a10:	00064800 	call	6480 <memcpy>
    6a14:	b0c00117 	ldw	r3,4(r22)
    6a18:	b8801317 	ldw	r2,76(r23)
    6a1c:	18c7883a 	add	r3,r3,r3
    6a20:	18c7883a 	add	r3,r3,r3
    6a24:	10c5883a 	add	r2,r2,r3
    6a28:	10c00017 	ldw	r3,0(r2)
    6a2c:	b0c00015 	stw	r3,0(r22)
    6a30:	15800015 	stw	r22,0(r2)
    6a34:	802d883a 	mov	r22,r16
    6a38:	003fd606 	br	6994 <__multadd+0x9c>

00006a3c <__s2b>:
    6a3c:	defff904 	addi	sp,sp,-28
    6a40:	dd000415 	stw	r20,16(sp)
    6a44:	dc400115 	stw	r17,4(sp)
    6a48:	2829883a 	mov	r20,r5
    6a4c:	2023883a 	mov	r17,r4
    6a50:	01400244 	movi	r5,9
    6a54:	39000204 	addi	r4,r7,8
    6a58:	dcc00315 	stw	r19,12(sp)
    6a5c:	dc800215 	stw	r18,8(sp)
    6a60:	dfc00615 	stw	ra,24(sp)
    6a64:	dd400515 	stw	r21,20(sp)
    6a68:	dc000015 	stw	r16,0(sp)
    6a6c:	3825883a 	mov	r18,r7
    6a70:	3027883a 	mov	r19,r6
    6a74:	0000d440 	call	d44 <__divsi3>
    6a78:	00c00044 	movi	r3,1
    6a7c:	000b883a 	mov	r5,zero
    6a80:	1880030e 	bge	r3,r2,6a90 <__s2b+0x54>
    6a84:	18c7883a 	add	r3,r3,r3
    6a88:	29400044 	addi	r5,r5,1
    6a8c:	18bffd16 	blt	r3,r2,6a84 <__s2b+0x48>
    6a90:	8809883a 	mov	r4,r17
    6a94:	00068280 	call	6828 <_Balloc>
    6a98:	d8c00717 	ldw	r3,28(sp)
    6a9c:	10c00515 	stw	r3,20(r2)
    6aa0:	00c00044 	movi	r3,1
    6aa4:	10c00415 	stw	r3,16(r2)
    6aa8:	00c00244 	movi	r3,9
    6aac:	1cc0210e 	bge	r3,r19,6b34 <__s2b+0xf8>
    6ab0:	a0eb883a 	add	r21,r20,r3
    6ab4:	a821883a 	mov	r16,r21
    6ab8:	a4e9883a 	add	r20,r20,r19
    6abc:	81c00007 	ldb	r7,0(r16)
    6ac0:	8809883a 	mov	r4,r17
    6ac4:	84000044 	addi	r16,r16,1
    6ac8:	100b883a 	mov	r5,r2
    6acc:	01800284 	movi	r6,10
    6ad0:	39fff404 	addi	r7,r7,-48
    6ad4:	00068f80 	call	68f8 <__multadd>
    6ad8:	853ff81e 	bne	r16,r20,6abc <__s2b+0x80>
    6adc:	ace1883a 	add	r16,r21,r19
    6ae0:	843ffe04 	addi	r16,r16,-8
    6ae4:	9c800a0e 	bge	r19,r18,6b10 <__s2b+0xd4>
    6ae8:	94e5c83a 	sub	r18,r18,r19
    6aec:	84a5883a 	add	r18,r16,r18
    6af0:	81c00007 	ldb	r7,0(r16)
    6af4:	8809883a 	mov	r4,r17
    6af8:	84000044 	addi	r16,r16,1
    6afc:	100b883a 	mov	r5,r2
    6b00:	01800284 	movi	r6,10
    6b04:	39fff404 	addi	r7,r7,-48
    6b08:	00068f80 	call	68f8 <__multadd>
    6b0c:	84bff81e 	bne	r16,r18,6af0 <__s2b+0xb4>
    6b10:	dfc00617 	ldw	ra,24(sp)
    6b14:	dd400517 	ldw	r21,20(sp)
    6b18:	dd000417 	ldw	r20,16(sp)
    6b1c:	dcc00317 	ldw	r19,12(sp)
    6b20:	dc800217 	ldw	r18,8(sp)
    6b24:	dc400117 	ldw	r17,4(sp)
    6b28:	dc000017 	ldw	r16,0(sp)
    6b2c:	dec00704 	addi	sp,sp,28
    6b30:	f800283a 	ret
    6b34:	a4000284 	addi	r16,r20,10
    6b38:	1827883a 	mov	r19,r3
    6b3c:	003fe906 	br	6ae4 <__s2b+0xa8>

00006b40 <__hi0bits>:
    6b40:	20bfffec 	andhi	r2,r4,65535
    6b44:	1000141e 	bne	r2,zero,6b98 <__hi0bits+0x58>
    6b48:	2008943a 	slli	r4,r4,16
    6b4c:	00800404 	movi	r2,16
    6b50:	20ffc02c 	andhi	r3,r4,65280
    6b54:	1800021e 	bne	r3,zero,6b60 <__hi0bits+0x20>
    6b58:	2008923a 	slli	r4,r4,8
    6b5c:	10800204 	addi	r2,r2,8
    6b60:	20fc002c 	andhi	r3,r4,61440
    6b64:	1800021e 	bne	r3,zero,6b70 <__hi0bits+0x30>
    6b68:	2008913a 	slli	r4,r4,4
    6b6c:	10800104 	addi	r2,r2,4
    6b70:	20f0002c 	andhi	r3,r4,49152
    6b74:	1800031e 	bne	r3,zero,6b84 <__hi0bits+0x44>
    6b78:	2109883a 	add	r4,r4,r4
    6b7c:	10800084 	addi	r2,r2,2
    6b80:	2109883a 	add	r4,r4,r4
    6b84:	20000316 	blt	r4,zero,6b94 <__hi0bits+0x54>
    6b88:	2110002c 	andhi	r4,r4,16384
    6b8c:	2000041e 	bne	r4,zero,6ba0 <__hi0bits+0x60>
    6b90:	00800804 	movi	r2,32
    6b94:	f800283a 	ret
    6b98:	0005883a 	mov	r2,zero
    6b9c:	003fec06 	br	6b50 <__hi0bits+0x10>
    6ba0:	10800044 	addi	r2,r2,1
    6ba4:	f800283a 	ret

00006ba8 <__lo0bits>:
    6ba8:	20c00017 	ldw	r3,0(r4)
    6bac:	188001cc 	andi	r2,r3,7
    6bb0:	10000826 	beq	r2,zero,6bd4 <__lo0bits+0x2c>
    6bb4:	1880004c 	andi	r2,r3,1
    6bb8:	1000211e 	bne	r2,zero,6c40 <__lo0bits+0x98>
    6bbc:	1880008c 	andi	r2,r3,2
    6bc0:	1000211e 	bne	r2,zero,6c48 <__lo0bits+0xa0>
    6bc4:	1806d0ba 	srli	r3,r3,2
    6bc8:	00800084 	movi	r2,2
    6bcc:	20c00015 	stw	r3,0(r4)
    6bd0:	f800283a 	ret
    6bd4:	18bfffcc 	andi	r2,r3,65535
    6bd8:	10001326 	beq	r2,zero,6c28 <__lo0bits+0x80>
    6bdc:	0005883a 	mov	r2,zero
    6be0:	19403fcc 	andi	r5,r3,255
    6be4:	2800021e 	bne	r5,zero,6bf0 <__lo0bits+0x48>
    6be8:	1806d23a 	srli	r3,r3,8
    6bec:	10800204 	addi	r2,r2,8
    6bf0:	194003cc 	andi	r5,r3,15
    6bf4:	2800021e 	bne	r5,zero,6c00 <__lo0bits+0x58>
    6bf8:	1806d13a 	srli	r3,r3,4
    6bfc:	10800104 	addi	r2,r2,4
    6c00:	194000cc 	andi	r5,r3,3
    6c04:	2800021e 	bne	r5,zero,6c10 <__lo0bits+0x68>
    6c08:	1806d0ba 	srli	r3,r3,2
    6c0c:	10800084 	addi	r2,r2,2
    6c10:	1940004c 	andi	r5,r3,1
    6c14:	2800081e 	bne	r5,zero,6c38 <__lo0bits+0x90>
    6c18:	1806d07a 	srli	r3,r3,1
    6c1c:	1800051e 	bne	r3,zero,6c34 <__lo0bits+0x8c>
    6c20:	00800804 	movi	r2,32
    6c24:	f800283a 	ret
    6c28:	1806d43a 	srli	r3,r3,16
    6c2c:	00800404 	movi	r2,16
    6c30:	003feb06 	br	6be0 <__lo0bits+0x38>
    6c34:	10800044 	addi	r2,r2,1
    6c38:	20c00015 	stw	r3,0(r4)
    6c3c:	f800283a 	ret
    6c40:	0005883a 	mov	r2,zero
    6c44:	f800283a 	ret
    6c48:	1806d07a 	srli	r3,r3,1
    6c4c:	00800044 	movi	r2,1
    6c50:	20c00015 	stw	r3,0(r4)
    6c54:	f800283a 	ret

00006c58 <__i2b>:
    6c58:	defffd04 	addi	sp,sp,-12
    6c5c:	dc000015 	stw	r16,0(sp)
    6c60:	04000044 	movi	r16,1
    6c64:	dc400115 	stw	r17,4(sp)
    6c68:	2823883a 	mov	r17,r5
    6c6c:	800b883a 	mov	r5,r16
    6c70:	dfc00215 	stw	ra,8(sp)
    6c74:	00068280 	call	6828 <_Balloc>
    6c78:	14400515 	stw	r17,20(r2)
    6c7c:	14000415 	stw	r16,16(r2)
    6c80:	dfc00217 	ldw	ra,8(sp)
    6c84:	dc400117 	ldw	r17,4(sp)
    6c88:	dc000017 	ldw	r16,0(sp)
    6c8c:	dec00304 	addi	sp,sp,12
    6c90:	f800283a 	ret

00006c94 <__multiply>:
    6c94:	defff004 	addi	sp,sp,-64
    6c98:	dc800815 	stw	r18,32(sp)
    6c9c:	dc400715 	stw	r17,28(sp)
    6ca0:	34800417 	ldw	r18,16(r6)
    6ca4:	2c400417 	ldw	r17,16(r5)
    6ca8:	ddc00d15 	stw	r23,52(sp)
    6cac:	dc000615 	stw	r16,24(sp)
    6cb0:	dfc00f15 	stw	ra,60(sp)
    6cb4:	df000e15 	stw	fp,56(sp)
    6cb8:	dd800c15 	stw	r22,48(sp)
    6cbc:	dd400b15 	stw	r21,44(sp)
    6cc0:	dd000a15 	stw	r20,40(sp)
    6cc4:	dcc00915 	stw	r19,36(sp)
    6cc8:	2821883a 	mov	r16,r5
    6ccc:	302f883a 	mov	r23,r6
    6cd0:	8c80050e 	bge	r17,r18,6ce8 <__multiply+0x54>
    6cd4:	8807883a 	mov	r3,r17
    6cd8:	3021883a 	mov	r16,r6
    6cdc:	9023883a 	mov	r17,r18
    6ce0:	282f883a 	mov	r23,r5
    6ce4:	1825883a 	mov	r18,r3
    6ce8:	80800217 	ldw	r2,8(r16)
    6cec:	8c87883a 	add	r3,r17,r18
    6cf0:	d8c00115 	stw	r3,4(sp)
    6cf4:	81400117 	ldw	r5,4(r16)
    6cf8:	10c0010e 	bge	r2,r3,6d00 <__multiply+0x6c>
    6cfc:	29400044 	addi	r5,r5,1
    6d00:	00068280 	call	6828 <_Balloc>
    6d04:	d8c00117 	ldw	r3,4(sp)
    6d08:	d8800515 	stw	r2,20(sp)
    6d0c:	14c00504 	addi	r19,r2,20
    6d10:	1d400144 	addi	r21,r3,5
    6d14:	ad6b883a 	add	r21,r21,r21
    6d18:	ad6b883a 	add	r21,r21,r21
    6d1c:	156b883a 	add	r21,r2,r21
    6d20:	dd400215 	stw	r21,8(sp)
    6d24:	9805883a 	mov	r2,r19
    6d28:	9d40042e 	bgeu	r19,r21,6d3c <__multiply+0xa8>
    6d2c:	d8c00217 	ldw	r3,8(sp)
    6d30:	10000015 	stw	zero,0(r2)
    6d34:	10800104 	addi	r2,r2,4
    6d38:	10fffc36 	bltu	r2,r3,6d2c <__multiply+0x98>
    6d3c:	94800144 	addi	r18,r18,5
    6d40:	94a5883a 	add	r18,r18,r18
    6d44:	94ad883a 	add	r22,r18,r18
    6d48:	8c400144 	addi	r17,r17,5
    6d4c:	8c63883a 	add	r17,r17,r17
    6d50:	bdad883a 	add	r22,r23,r22
    6d54:	80c00504 	addi	r3,r16,20
    6d58:	8c63883a 	add	r17,r17,r17
    6d5c:	bc800504 	addi	r18,r23,20
    6d60:	dd800315 	stw	r22,12(sp)
    6d64:	d8c00415 	stw	r3,16(sp)
    6d68:	dcc00015 	stw	r19,0(sp)
    6d6c:	8463883a 	add	r17,r16,r17
    6d70:	9580412e 	bgeu	r18,r22,6e78 <__multiply+0x1e4>
    6d74:	90800017 	ldw	r2,0(r18)
    6d78:	173fffcc 	andi	fp,r2,65535
    6d7c:	e0001a26 	beq	fp,zero,6de8 <__multiply+0x154>
    6d80:	dd000017 	ldw	r20,0(sp)
    6d84:	dd800417 	ldw	r22,16(sp)
    6d88:	002b883a 	mov	r21,zero
    6d8c:	b4c00017 	ldw	r19,0(r22)
    6d90:	a4000017 	ldw	r16,0(r20)
    6d94:	e00b883a 	mov	r5,fp
    6d98:	993fffcc 	andi	r4,r19,65535
    6d9c:	0000e000 	call	e00 <__mulsi3>
    6da0:	9808d43a 	srli	r4,r19,16
    6da4:	817fffcc 	andi	r5,r16,65535
    6da8:	1145883a 	add	r2,r2,r5
    6dac:	e00b883a 	mov	r5,fp
    6db0:	1567883a 	add	r19,r2,r21
    6db4:	8020d43a 	srli	r16,r16,16
    6db8:	0000e000 	call	e00 <__mulsi3>
    6dbc:	9808d43a 	srli	r4,r19,16
    6dc0:	1405883a 	add	r2,r2,r16
    6dc4:	a4c0000d 	sth	r19,0(r20)
    6dc8:	110f883a 	add	r7,r2,r4
    6dcc:	a1c0008d 	sth	r7,2(r20)
    6dd0:	b5800104 	addi	r22,r22,4
    6dd4:	382ad43a 	srli	r21,r7,16
    6dd8:	a5000104 	addi	r20,r20,4
    6ddc:	b47feb36 	bltu	r22,r17,6d8c <__multiply+0xf8>
    6de0:	a5400015 	stw	r21,0(r20)
    6de4:	90800017 	ldw	r2,0(r18)
    6de8:	1038d43a 	srli	fp,r2,16
    6dec:	e0001c26 	beq	fp,zero,6e60 <__multiply+0x1cc>
    6df0:	d8c00017 	ldw	r3,0(sp)
    6df4:	dd000417 	ldw	r20,16(sp)
    6df8:	002b883a 	mov	r21,zero
    6dfc:	1d800017 	ldw	r22,0(r3)
    6e00:	182f883a 	mov	r23,r3
    6e04:	b021883a 	mov	r16,r22
    6e08:	a4c00017 	ldw	r19,0(r20)
    6e0c:	8020d43a 	srli	r16,r16,16
    6e10:	e00b883a 	mov	r5,fp
    6e14:	993fffcc 	andi	r4,r19,65535
    6e18:	0000e000 	call	e00 <__mulsi3>
    6e1c:	1405883a 	add	r2,r2,r16
    6e20:	9808d43a 	srli	r4,r19,16
    6e24:	156b883a 	add	r21,r2,r21
    6e28:	bdc00104 	addi	r23,r23,4
    6e2c:	bdbfff0d 	sth	r22,-4(r23)
    6e30:	bd7fff8d 	sth	r21,-2(r23)
    6e34:	bc000017 	ldw	r16,0(r23)
    6e38:	e00b883a 	mov	r5,fp
    6e3c:	0000e000 	call	e00 <__mulsi3>
    6e40:	a80ed43a 	srli	r7,r21,16
    6e44:	813fffcc 	andi	r4,r16,65535
    6e48:	2085883a 	add	r2,r4,r2
    6e4c:	11ed883a 	add	r22,r2,r7
    6e50:	a5000104 	addi	r20,r20,4
    6e54:	b02ad43a 	srli	r21,r22,16
    6e58:	a47feb36 	bltu	r20,r17,6e08 <__multiply+0x174>
    6e5c:	bd800015 	stw	r22,0(r23)
    6e60:	d8c00017 	ldw	r3,0(sp)
    6e64:	94800104 	addi	r18,r18,4
    6e68:	18c00104 	addi	r3,r3,4
    6e6c:	d8c00015 	stw	r3,0(sp)
    6e70:	d8c00317 	ldw	r3,12(sp)
    6e74:	90ffbf36 	bltu	r18,r3,6d74 <__multiply+0xe0>
    6e78:	d8c00117 	ldw	r3,4(sp)
    6e7c:	00c00c0e 	bge	zero,r3,6eb0 <__multiply+0x21c>
    6e80:	d8c00217 	ldw	r3,8(sp)
    6e84:	18bfff17 	ldw	r2,-4(r3)
    6e88:	1d7fff04 	addi	r21,r3,-4
    6e8c:	10000326 	beq	r2,zero,6e9c <__multiply+0x208>
    6e90:	00000706 	br	6eb0 <__multiply+0x21c>
    6e94:	a8800017 	ldw	r2,0(r21)
    6e98:	1000051e 	bne	r2,zero,6eb0 <__multiply+0x21c>
    6e9c:	d8c00117 	ldw	r3,4(sp)
    6ea0:	ad7fff04 	addi	r21,r21,-4
    6ea4:	18ffffc4 	addi	r3,r3,-1
    6ea8:	d8c00115 	stw	r3,4(sp)
    6eac:	183ff91e 	bne	r3,zero,6e94 <__multiply+0x200>
    6eb0:	d8800517 	ldw	r2,20(sp)
    6eb4:	d8c00117 	ldw	r3,4(sp)
    6eb8:	10c00415 	stw	r3,16(r2)
    6ebc:	dfc00f17 	ldw	ra,60(sp)
    6ec0:	df000e17 	ldw	fp,56(sp)
    6ec4:	ddc00d17 	ldw	r23,52(sp)
    6ec8:	dd800c17 	ldw	r22,48(sp)
    6ecc:	dd400b17 	ldw	r21,44(sp)
    6ed0:	dd000a17 	ldw	r20,40(sp)
    6ed4:	dcc00917 	ldw	r19,36(sp)
    6ed8:	dc800817 	ldw	r18,32(sp)
    6edc:	dc400717 	ldw	r17,28(sp)
    6ee0:	dc000617 	ldw	r16,24(sp)
    6ee4:	dec01004 	addi	sp,sp,64
    6ee8:	f800283a 	ret

00006eec <__pow5mult>:
    6eec:	defffb04 	addi	sp,sp,-20
    6ef0:	dcc00315 	stw	r19,12(sp)
    6ef4:	dc800215 	stw	r18,8(sp)
    6ef8:	dc000015 	stw	r16,0(sp)
    6efc:	dfc00415 	stw	ra,16(sp)
    6f00:	dc400115 	stw	r17,4(sp)
    6f04:	308000cc 	andi	r2,r6,3
    6f08:	3021883a 	mov	r16,r6
    6f0c:	2027883a 	mov	r19,r4
    6f10:	2825883a 	mov	r18,r5
    6f14:	10002e1e 	bne	r2,zero,6fd0 <__pow5mult+0xe4>
    6f18:	8021d0ba 	srai	r16,r16,2
    6f1c:	80001a26 	beq	r16,zero,6f88 <__pow5mult+0x9c>
    6f20:	9c401217 	ldw	r17,72(r19)
    6f24:	8800061e 	bne	r17,zero,6f40 <__pow5mult+0x54>
    6f28:	00003406 	br	6ffc <__pow5mult+0x110>
    6f2c:	8021d07a 	srai	r16,r16,1
    6f30:	80001526 	beq	r16,zero,6f88 <__pow5mult+0x9c>
    6f34:	88c00017 	ldw	r3,0(r17)
    6f38:	18001b26 	beq	r3,zero,6fa8 <__pow5mult+0xbc>
    6f3c:	1823883a 	mov	r17,r3
    6f40:	80c0004c 	andi	r3,r16,1
    6f44:	183ff926 	beq	r3,zero,6f2c <__pow5mult+0x40>
    6f48:	900b883a 	mov	r5,r18
    6f4c:	880d883a 	mov	r6,r17
    6f50:	9809883a 	mov	r4,r19
    6f54:	0006c940 	call	6c94 <__multiply>
    6f58:	90001b26 	beq	r18,zero,6fc8 <__pow5mult+0xdc>
    6f5c:	91000117 	ldw	r4,4(r18)
    6f60:	98c01317 	ldw	r3,76(r19)
    6f64:	8021d07a 	srai	r16,r16,1
    6f68:	2109883a 	add	r4,r4,r4
    6f6c:	2109883a 	add	r4,r4,r4
    6f70:	1907883a 	add	r3,r3,r4
    6f74:	19000017 	ldw	r4,0(r3)
    6f78:	91000015 	stw	r4,0(r18)
    6f7c:	1c800015 	stw	r18,0(r3)
    6f80:	1025883a 	mov	r18,r2
    6f84:	803feb1e 	bne	r16,zero,6f34 <__pow5mult+0x48>
    6f88:	9005883a 	mov	r2,r18
    6f8c:	dfc00417 	ldw	ra,16(sp)
    6f90:	dcc00317 	ldw	r19,12(sp)
    6f94:	dc800217 	ldw	r18,8(sp)
    6f98:	dc400117 	ldw	r17,4(sp)
    6f9c:	dc000017 	ldw	r16,0(sp)
    6fa0:	dec00504 	addi	sp,sp,20
    6fa4:	f800283a 	ret
    6fa8:	880b883a 	mov	r5,r17
    6fac:	880d883a 	mov	r6,r17
    6fb0:	9809883a 	mov	r4,r19
    6fb4:	0006c940 	call	6c94 <__multiply>
    6fb8:	88800015 	stw	r2,0(r17)
    6fbc:	10000015 	stw	zero,0(r2)
    6fc0:	1023883a 	mov	r17,r2
    6fc4:	003fde06 	br	6f40 <__pow5mult+0x54>
    6fc8:	1025883a 	mov	r18,r2
    6fcc:	003fd706 	br	6f2c <__pow5mult+0x40>
    6fd0:	10bfffc4 	addi	r2,r2,-1
    6fd4:	1085883a 	add	r2,r2,r2
    6fd8:	00c00074 	movhi	r3,1
    6fdc:	18f54104 	addi	r3,r3,-11004
    6fe0:	1085883a 	add	r2,r2,r2
    6fe4:	1885883a 	add	r2,r3,r2
    6fe8:	11800017 	ldw	r6,0(r2)
    6fec:	000f883a 	mov	r7,zero
    6ff0:	00068f80 	call	68f8 <__multadd>
    6ff4:	1025883a 	mov	r18,r2
    6ff8:	003fc706 	br	6f18 <__pow5mult+0x2c>
    6ffc:	9809883a 	mov	r4,r19
    7000:	01409c44 	movi	r5,625
    7004:	0006c580 	call	6c58 <__i2b>
    7008:	98801215 	stw	r2,72(r19)
    700c:	1023883a 	mov	r17,r2
    7010:	10000015 	stw	zero,0(r2)
    7014:	003fca06 	br	6f40 <__pow5mult+0x54>

00007018 <__lshift>:
    7018:	defff904 	addi	sp,sp,-28
    701c:	dd400515 	stw	r21,20(sp)
    7020:	dc400115 	stw	r17,4(sp)
    7024:	2d400417 	ldw	r21,16(r5)
    7028:	3023d17a 	srai	r17,r6,5
    702c:	28800217 	ldw	r2,8(r5)
    7030:	dd000415 	stw	r20,16(sp)
    7034:	8d6b883a 	add	r21,r17,r21
    7038:	dcc00315 	stw	r19,12(sp)
    703c:	dc800215 	stw	r18,8(sp)
    7040:	dc000015 	stw	r16,0(sp)
    7044:	dfc00615 	stw	ra,24(sp)
    7048:	ac000044 	addi	r16,r21,1
    704c:	2825883a 	mov	r18,r5
    7050:	3029883a 	mov	r20,r6
    7054:	2027883a 	mov	r19,r4
    7058:	29400117 	ldw	r5,4(r5)
    705c:	1400030e 	bge	r2,r16,706c <__lshift+0x54>
    7060:	1085883a 	add	r2,r2,r2
    7064:	29400044 	addi	r5,r5,1
    7068:	143ffd16 	blt	r2,r16,7060 <__lshift+0x48>
    706c:	9809883a 	mov	r4,r19
    7070:	00068280 	call	6828 <_Balloc>
    7074:	10c00504 	addi	r3,r2,20
    7078:	0440090e 	bge	zero,r17,70a0 <__lshift+0x88>
    707c:	000f883a 	mov	r7,zero
    7080:	18000015 	stw	zero,0(r3)
    7084:	39c00044 	addi	r7,r7,1
    7088:	18c00104 	addi	r3,r3,4
    708c:	3c7ffc1e 	bne	r7,r17,7080 <__lshift+0x68>
    7090:	38c00144 	addi	r3,r7,5
    7094:	18c7883a 	add	r3,r3,r3
    7098:	18c7883a 	add	r3,r3,r3
    709c:	10c7883a 	add	r3,r2,r3
    70a0:	92000417 	ldw	r8,16(r18)
    70a4:	a18007cc 	andi	r6,r20,31
    70a8:	91c00504 	addi	r7,r18,20
    70ac:	42000144 	addi	r8,r8,5
    70b0:	4211883a 	add	r8,r8,r8
    70b4:	4211883a 	add	r8,r8,r8
    70b8:	9211883a 	add	r8,r18,r8
    70bc:	30002226 	beq	r6,zero,7148 <__lshift+0x130>
    70c0:	02800804 	movi	r10,32
    70c4:	5195c83a 	sub	r10,r10,r6
    70c8:	000b883a 	mov	r5,zero
    70cc:	3a400017 	ldw	r9,0(r7)
    70d0:	18c00104 	addi	r3,r3,4
    70d4:	39c00104 	addi	r7,r7,4
    70d8:	4992983a 	sll	r9,r9,r6
    70dc:	2a4ab03a 	or	r5,r5,r9
    70e0:	197fff15 	stw	r5,-4(r3)
    70e4:	397fff17 	ldw	r5,-4(r7)
    70e8:	2a8ad83a 	srl	r5,r5,r10
    70ec:	3a3ff736 	bltu	r7,r8,70cc <__lshift+0xb4>
    70f0:	19400015 	stw	r5,0(r3)
    70f4:	28000126 	beq	r5,zero,70fc <__lshift+0xe4>
    70f8:	ac000084 	addi	r16,r21,2
    70fc:	91000117 	ldw	r4,4(r18)
    7100:	98c01317 	ldw	r3,76(r19)
    7104:	843fffc4 	addi	r16,r16,-1
    7108:	2109883a 	add	r4,r4,r4
    710c:	2109883a 	add	r4,r4,r4
    7110:	1907883a 	add	r3,r3,r4
    7114:	19000017 	ldw	r4,0(r3)
    7118:	14000415 	stw	r16,16(r2)
    711c:	91000015 	stw	r4,0(r18)
    7120:	1c800015 	stw	r18,0(r3)
    7124:	dfc00617 	ldw	ra,24(sp)
    7128:	dd400517 	ldw	r21,20(sp)
    712c:	dd000417 	ldw	r20,16(sp)
    7130:	dcc00317 	ldw	r19,12(sp)
    7134:	dc800217 	ldw	r18,8(sp)
    7138:	dc400117 	ldw	r17,4(sp)
    713c:	dc000017 	ldw	r16,0(sp)
    7140:	dec00704 	addi	sp,sp,28
    7144:	f800283a 	ret
    7148:	39400017 	ldw	r5,0(r7)
    714c:	18c00104 	addi	r3,r3,4
    7150:	39c00104 	addi	r7,r7,4
    7154:	197fff15 	stw	r5,-4(r3)
    7158:	3a3fe82e 	bgeu	r7,r8,70fc <__lshift+0xe4>
    715c:	39400017 	ldw	r5,0(r7)
    7160:	18c00104 	addi	r3,r3,4
    7164:	39c00104 	addi	r7,r7,4
    7168:	197fff15 	stw	r5,-4(r3)
    716c:	3a3ff636 	bltu	r7,r8,7148 <__lshift+0x130>
    7170:	003fe206 	br	70fc <__lshift+0xe4>

00007174 <__mcmp>:
    7174:	20800417 	ldw	r2,16(r4)
    7178:	28c00417 	ldw	r3,16(r5)
    717c:	10c5c83a 	sub	r2,r2,r3
    7180:	10000f1e 	bne	r2,zero,71c0 <__mcmp+0x4c>
    7184:	18c00144 	addi	r3,r3,5
    7188:	18c7883a 	add	r3,r3,r3
    718c:	18c7883a 	add	r3,r3,r3
    7190:	21c00504 	addi	r7,r4,20
    7194:	28cb883a 	add	r5,r5,r3
    7198:	20c9883a 	add	r4,r4,r3
    719c:	213fff04 	addi	r4,r4,-4
    71a0:	297fff04 	addi	r5,r5,-4
    71a4:	21800017 	ldw	r6,0(r4)
    71a8:	28c00017 	ldw	r3,0(r5)
    71ac:	30c0021e 	bne	r6,r3,71b8 <__mcmp+0x44>
    71b0:	393ffa36 	bltu	r7,r4,719c <__mcmp+0x28>
    71b4:	f800283a 	ret
    71b8:	30c00236 	bltu	r6,r3,71c4 <__mcmp+0x50>
    71bc:	00800044 	movi	r2,1
    71c0:	f800283a 	ret
    71c4:	00bfffc4 	movi	r2,-1
    71c8:	f800283a 	ret

000071cc <__mdiff>:
    71cc:	defffb04 	addi	sp,sp,-20
    71d0:	dc000015 	stw	r16,0(sp)
    71d4:	2821883a 	mov	r16,r5
    71d8:	dc800215 	stw	r18,8(sp)
    71dc:	300b883a 	mov	r5,r6
    71e0:	2025883a 	mov	r18,r4
    71e4:	8009883a 	mov	r4,r16
    71e8:	dc400115 	stw	r17,4(sp)
    71ec:	dfc00415 	stw	ra,16(sp)
    71f0:	dcc00315 	stw	r19,12(sp)
    71f4:	3023883a 	mov	r17,r6
    71f8:	00071740 	call	7174 <__mcmp>
    71fc:	10005026 	beq	r2,zero,7340 <__mdiff+0x174>
    7200:	10004a16 	blt	r2,zero,732c <__mdiff+0x160>
    7204:	0027883a 	mov	r19,zero
    7208:	81400117 	ldw	r5,4(r16)
    720c:	9009883a 	mov	r4,r18
    7210:	00068280 	call	6828 <_Balloc>
    7214:	82400417 	ldw	r9,16(r16)
    7218:	89800417 	ldw	r6,16(r17)
    721c:	14c00315 	stw	r19,12(r2)
    7220:	4b800144 	addi	r14,r9,5
    7224:	31800144 	addi	r6,r6,5
    7228:	739d883a 	add	r14,r14,r14
    722c:	318d883a 	add	r6,r6,r6
    7230:	739d883a 	add	r14,r14,r14
    7234:	318d883a 	add	r6,r6,r6
    7238:	81c00504 	addi	r7,r16,20
    723c:	839d883a 	add	r14,r16,r14
    7240:	8a000504 	addi	r8,r17,20
    7244:	898d883a 	add	r6,r17,r6
    7248:	10c00504 	addi	r3,r2,20
    724c:	0009883a 	mov	r4,zero
    7250:	3b000017 	ldw	r12,0(r7)
    7254:	42c00017 	ldw	r11,0(r8)
    7258:	42000104 	addi	r8,r8,4
    725c:	62bfffcc 	andi	r10,r12,65535
    7260:	5b7fffcc 	andi	r13,r11,65535
    7264:	5109883a 	add	r4,r10,r4
    7268:	2355c83a 	sub	r10,r4,r13
    726c:	5816d43a 	srli	r11,r11,16
    7270:	6008d43a 	srli	r4,r12,16
    7274:	501bd43a 	srai	r13,r10,16
    7278:	1a80000d 	sth	r10,0(r3)
    727c:	22c9c83a 	sub	r4,r4,r11
    7280:	2349883a 	add	r4,r4,r13
    7284:	1900008d 	sth	r4,2(r3)
    7288:	39c00104 	addi	r7,r7,4
    728c:	2009d43a 	srai	r4,r4,16
    7290:	18c00104 	addi	r3,r3,4
    7294:	41bfee36 	bltu	r8,r6,7250 <__mdiff+0x84>
    7298:	180b883a 	mov	r5,r3
    729c:	3815883a 	mov	r10,r7
    72a0:	3b80132e 	bgeu	r7,r14,72f0 <__mdiff+0x124>
    72a4:	3a000017 	ldw	r8,0(r7)
    72a8:	18c00104 	addi	r3,r3,4
    72ac:	39c00104 	addi	r7,r7,4
    72b0:	41bfffcc 	andi	r6,r8,65535
    72b4:	310d883a 	add	r6,r6,r4
    72b8:	3009d43a 	srai	r4,r6,16
    72bc:	4010d43a 	srli	r8,r8,16
    72c0:	19bfff0d 	sth	r6,-4(r3)
    72c4:	2209883a 	add	r4,r4,r8
    72c8:	193fff8d 	sth	r4,-2(r3)
    72cc:	2009d43a 	srai	r4,r4,16
    72d0:	3bbff436 	bltu	r7,r14,72a4 <__mdiff+0xd8>
    72d4:	0286303a 	nor	r3,zero,r10
    72d8:	1b87883a 	add	r3,r3,r14
    72dc:	1806d0ba 	srli	r3,r3,2
    72e0:	18c00044 	addi	r3,r3,1
    72e4:	18c7883a 	add	r3,r3,r3
    72e8:	18c7883a 	add	r3,r3,r3
    72ec:	28c7883a 	add	r3,r5,r3
    72f0:	193fff17 	ldw	r4,-4(r3)
    72f4:	18ffff04 	addi	r3,r3,-4
    72f8:	2000041e 	bne	r4,zero,730c <__mdiff+0x140>
    72fc:	18ffff04 	addi	r3,r3,-4
    7300:	19000017 	ldw	r4,0(r3)
    7304:	4a7fffc4 	addi	r9,r9,-1
    7308:	203ffc26 	beq	r4,zero,72fc <__mdiff+0x130>
    730c:	12400415 	stw	r9,16(r2)
    7310:	dfc00417 	ldw	ra,16(sp)
    7314:	dcc00317 	ldw	r19,12(sp)
    7318:	dc800217 	ldw	r18,8(sp)
    731c:	dc400117 	ldw	r17,4(sp)
    7320:	dc000017 	ldw	r16,0(sp)
    7324:	dec00504 	addi	sp,sp,20
    7328:	f800283a 	ret
    732c:	8005883a 	mov	r2,r16
    7330:	04c00044 	movi	r19,1
    7334:	8821883a 	mov	r16,r17
    7338:	1023883a 	mov	r17,r2
    733c:	003fb206 	br	7208 <__mdiff+0x3c>
    7340:	9009883a 	mov	r4,r18
    7344:	000b883a 	mov	r5,zero
    7348:	00068280 	call	6828 <_Balloc>
    734c:	00c00044 	movi	r3,1
    7350:	10c00415 	stw	r3,16(r2)
    7354:	10000515 	stw	zero,20(r2)
    7358:	dfc00417 	ldw	ra,16(sp)
    735c:	dcc00317 	ldw	r19,12(sp)
    7360:	dc800217 	ldw	r18,8(sp)
    7364:	dc400117 	ldw	r17,4(sp)
    7368:	dc000017 	ldw	r16,0(sp)
    736c:	dec00504 	addi	sp,sp,20
    7370:	f800283a 	ret

00007374 <__ulp>:
    7374:	295ffc2c 	andhi	r5,r5,32752
    7378:	00bf3034 	movhi	r2,64704
    737c:	2887883a 	add	r3,r5,r2
    7380:	00c0020e 	bge	zero,r3,738c <__ulp+0x18>
    7384:	0005883a 	mov	r2,zero
    7388:	f800283a 	ret
    738c:	00c7c83a 	sub	r3,zero,r3
    7390:	1805d53a 	srai	r2,r3,20
    7394:	00c004c4 	movi	r3,19
    7398:	18800a0e 	bge	r3,r2,73c4 <__ulp+0x50>
    739c:	01000c84 	movi	r4,50
    73a0:	0007883a 	mov	r3,zero
    73a4:	20800516 	blt	r4,r2,73bc <__ulp+0x48>
    73a8:	01000cc4 	movi	r4,51
    73ac:	2085c83a 	sub	r2,r4,r2
    73b0:	01000044 	movi	r4,1
    73b4:	2084983a 	sll	r2,r4,r2
    73b8:	f800283a 	ret
    73bc:	00800044 	movi	r2,1
    73c0:	f800283a 	ret
    73c4:	00c00234 	movhi	r3,8
    73c8:	1887d83a 	sra	r3,r3,r2
    73cc:	0005883a 	mov	r2,zero
    73d0:	f800283a 	ret

000073d4 <__b2d>:
    73d4:	defffa04 	addi	sp,sp,-24
    73d8:	dc000015 	stw	r16,0(sp)
    73dc:	24000417 	ldw	r16,16(r4)
    73e0:	dc400115 	stw	r17,4(sp)
    73e4:	dcc00315 	stw	r19,12(sp)
    73e8:	84000144 	addi	r16,r16,5
    73ec:	8421883a 	add	r16,r16,r16
    73f0:	8421883a 	add	r16,r16,r16
    73f4:	2421883a 	add	r16,r4,r16
    73f8:	847fff17 	ldw	r17,-4(r16)
    73fc:	24c00504 	addi	r19,r4,20
    7400:	dd000415 	stw	r20,16(sp)
    7404:	8809883a 	mov	r4,r17
    7408:	dc800215 	stw	r18,8(sp)
    740c:	2829883a 	mov	r20,r5
    7410:	dfc00515 	stw	ra,20(sp)
    7414:	0006b400 	call	6b40 <__hi0bits>
    7418:	00c00804 	movi	r3,32
    741c:	1887c83a 	sub	r3,r3,r2
    7420:	a0c00015 	stw	r3,0(r20)
    7424:	00c00284 	movi	r3,10
    7428:	84bfff04 	addi	r18,r16,-4
    742c:	18801216 	blt	r3,r2,7478 <__b2d+0xa4>
    7430:	010002c4 	movi	r4,11
    7434:	2089c83a 	sub	r4,r4,r2
    7438:	8906d83a 	srl	r3,r17,r4
    743c:	18cffc34 	orhi	r3,r3,16368
    7440:	9c80322e 	bgeu	r19,r18,750c <__b2d+0x138>
    7444:	817ffe17 	ldw	r5,-8(r16)
    7448:	2908d83a 	srl	r4,r5,r4
    744c:	10800544 	addi	r2,r2,21
    7450:	88a2983a 	sll	r17,r17,r2
    7454:	2444b03a 	or	r2,r4,r17
    7458:	dfc00517 	ldw	ra,20(sp)
    745c:	dd000417 	ldw	r20,16(sp)
    7460:	dcc00317 	ldw	r19,12(sp)
    7464:	dc800217 	ldw	r18,8(sp)
    7468:	dc400117 	ldw	r17,4(sp)
    746c:	dc000017 	ldw	r16,0(sp)
    7470:	dec00604 	addi	sp,sp,24
    7474:	f800283a 	ret
    7478:	9c801636 	bltu	r19,r18,74d4 <__b2d+0x100>
    747c:	113ffd44 	addi	r4,r2,-11
    7480:	000b883a 	mov	r5,zero
    7484:	20001726 	beq	r4,zero,74e4 <__b2d+0x110>
    7488:	00c00ac4 	movi	r3,43
    748c:	1885c83a 	sub	r2,r3,r2
    7490:	8906983a 	sll	r3,r17,r4
    7494:	288cd83a 	srl	r6,r5,r2
    7498:	18cffc34 	orhi	r3,r3,16368
    749c:	1986b03a 	or	r3,r3,r6
    74a0:	9c801c2e 	bgeu	r19,r18,7514 <__b2d+0x140>
    74a4:	91bfff17 	ldw	r6,-4(r18)
    74a8:	3084d83a 	srl	r2,r6,r2
    74ac:	2908983a 	sll	r4,r5,r4
    74b0:	1104b03a 	or	r2,r2,r4
    74b4:	dfc00517 	ldw	ra,20(sp)
    74b8:	dd000417 	ldw	r20,16(sp)
    74bc:	dcc00317 	ldw	r19,12(sp)
    74c0:	dc800217 	ldw	r18,8(sp)
    74c4:	dc400117 	ldw	r17,4(sp)
    74c8:	dc000017 	ldw	r16,0(sp)
    74cc:	dec00604 	addi	sp,sp,24
    74d0:	f800283a 	ret
    74d4:	113ffd44 	addi	r4,r2,-11
    74d8:	84bffe04 	addi	r18,r16,-8
    74dc:	817ffe17 	ldw	r5,-8(r16)
    74e0:	203fe91e 	bne	r4,zero,7488 <__b2d+0xb4>
    74e4:	88cffc34 	orhi	r3,r17,16368
    74e8:	2805883a 	mov	r2,r5
    74ec:	dfc00517 	ldw	ra,20(sp)
    74f0:	dd000417 	ldw	r20,16(sp)
    74f4:	dcc00317 	ldw	r19,12(sp)
    74f8:	dc800217 	ldw	r18,8(sp)
    74fc:	dc400117 	ldw	r17,4(sp)
    7500:	dc000017 	ldw	r16,0(sp)
    7504:	dec00604 	addi	sp,sp,24
    7508:	f800283a 	ret
    750c:	0009883a 	mov	r4,zero
    7510:	003fce06 	br	744c <__b2d+0x78>
    7514:	0005883a 	mov	r2,zero
    7518:	003fe406 	br	74ac <__b2d+0xd8>

0000751c <__d2b>:
    751c:	defff804 	addi	sp,sp,-32
    7520:	dc400315 	stw	r17,12(sp)
    7524:	3023883a 	mov	r17,r6
    7528:	dc800415 	stw	r18,16(sp)
    752c:	8824907a 	slli	r18,r17,1
    7530:	dcc00515 	stw	r19,20(sp)
    7534:	2827883a 	mov	r19,r5
    7538:	9024d57a 	srli	r18,r18,21
    753c:	01400044 	movi	r5,1
    7540:	dd000615 	stw	r20,24(sp)
    7544:	dc000215 	stw	r16,8(sp)
    7548:	dfc00715 	stw	ra,28(sp)
    754c:	3829883a 	mov	r20,r7
    7550:	00068280 	call	6828 <_Balloc>
    7554:	1021883a 	mov	r16,r2
    7558:	00800434 	movhi	r2,16
    755c:	10bfffc4 	addi	r2,r2,-1
    7560:	88a2703a 	and	r17,r17,r2
    7564:	90000126 	beq	r18,zero,756c <__d2b+0x50>
    7568:	8c400434 	orhi	r17,r17,16
    756c:	dc400015 	stw	r17,0(sp)
    7570:	98002226 	beq	r19,zero,75fc <__d2b+0xe0>
    7574:	d9000104 	addi	r4,sp,4
    7578:	dcc00115 	stw	r19,4(sp)
    757c:	0006ba80 	call	6ba8 <__lo0bits>
    7580:	d8c00017 	ldw	r3,0(sp)
    7584:	10002d1e 	bne	r2,zero,763c <__d2b+0x120>
    7588:	d9000117 	ldw	r4,4(sp)
    758c:	81000515 	stw	r4,20(r16)
    7590:	1823003a 	cmpeq	r17,r3,zero
    7594:	01000084 	movi	r4,2
    7598:	2463c83a 	sub	r17,r4,r17
    759c:	80c00615 	stw	r3,24(r16)
    75a0:	84400415 	stw	r17,16(r16)
    75a4:	90001d1e 	bne	r18,zero,761c <__d2b+0x100>
    75a8:	88c00104 	addi	r3,r17,4
    75ac:	18c7883a 	add	r3,r3,r3
    75b0:	18c7883a 	add	r3,r3,r3
    75b4:	80c7883a 	add	r3,r16,r3
    75b8:	19000017 	ldw	r4,0(r3)
    75bc:	10bef384 	addi	r2,r2,-1074
    75c0:	a0800015 	stw	r2,0(r20)
    75c4:	0006b400 	call	6b40 <__hi0bits>
    75c8:	8822917a 	slli	r17,r17,5
    75cc:	d8c00817 	ldw	r3,32(sp)
    75d0:	8885c83a 	sub	r2,r17,r2
    75d4:	18800015 	stw	r2,0(r3)
    75d8:	8005883a 	mov	r2,r16
    75dc:	dfc00717 	ldw	ra,28(sp)
    75e0:	dd000617 	ldw	r20,24(sp)
    75e4:	dcc00517 	ldw	r19,20(sp)
    75e8:	dc800417 	ldw	r18,16(sp)
    75ec:	dc400317 	ldw	r17,12(sp)
    75f0:	dc000217 	ldw	r16,8(sp)
    75f4:	dec00804 	addi	sp,sp,32
    75f8:	f800283a 	ret
    75fc:	d809883a 	mov	r4,sp
    7600:	0006ba80 	call	6ba8 <__lo0bits>
    7604:	d8c00017 	ldw	r3,0(sp)
    7608:	04400044 	movi	r17,1
    760c:	84400415 	stw	r17,16(r16)
    7610:	80c00515 	stw	r3,20(r16)
    7614:	10800804 	addi	r2,r2,32
    7618:	903fe326 	beq	r18,zero,75a8 <__d2b+0x8c>
    761c:	00c00d44 	movi	r3,53
    7620:	94bef344 	addi	r18,r18,-1075
    7624:	90a5883a 	add	r18,r18,r2
    7628:	1885c83a 	sub	r2,r3,r2
    762c:	d8c00817 	ldw	r3,32(sp)
    7630:	a4800015 	stw	r18,0(r20)
    7634:	18800015 	stw	r2,0(r3)
    7638:	003fe706 	br	75d8 <__d2b+0xbc>
    763c:	01000804 	movi	r4,32
    7640:	2089c83a 	sub	r4,r4,r2
    7644:	1908983a 	sll	r4,r3,r4
    7648:	d9400117 	ldw	r5,4(sp)
    764c:	1886d83a 	srl	r3,r3,r2
    7650:	2148b03a 	or	r4,r4,r5
    7654:	81000515 	stw	r4,20(r16)
    7658:	d8c00015 	stw	r3,0(sp)
    765c:	003fcc06 	br	7590 <__d2b+0x74>

00007660 <__ratio>:
    7660:	defff904 	addi	sp,sp,-28
    7664:	dc400315 	stw	r17,12(sp)
    7668:	2823883a 	mov	r17,r5
    766c:	d9400104 	addi	r5,sp,4
    7670:	dfc00615 	stw	ra,24(sp)
    7674:	dcc00515 	stw	r19,20(sp)
    7678:	dc800415 	stw	r18,16(sp)
    767c:	2027883a 	mov	r19,r4
    7680:	dc000215 	stw	r16,8(sp)
    7684:	00073d40 	call	73d4 <__b2d>
    7688:	8809883a 	mov	r4,r17
    768c:	d80b883a 	mov	r5,sp
    7690:	1025883a 	mov	r18,r2
    7694:	1821883a 	mov	r16,r3
    7698:	00073d40 	call	73d4 <__b2d>
    769c:	99400417 	ldw	r5,16(r19)
    76a0:	89000417 	ldw	r4,16(r17)
    76a4:	d9800117 	ldw	r6,4(sp)
    76a8:	2909c83a 	sub	r4,r5,r4
    76ac:	d9400017 	ldw	r5,0(sp)
    76b0:	2008917a 	slli	r4,r4,5
    76b4:	314bc83a 	sub	r5,r6,r5
    76b8:	290b883a 	add	r5,r5,r4
    76bc:	01400e0e 	bge	zero,r5,76f8 <__ratio+0x98>
    76c0:	280a953a 	slli	r5,r5,20
    76c4:	2c21883a 	add	r16,r5,r16
    76c8:	9009883a 	mov	r4,r18
    76cc:	800b883a 	mov	r5,r16
    76d0:	100d883a 	mov	r6,r2
    76d4:	180f883a 	mov	r7,r3
    76d8:	00099140 	call	9914 <__divdf3>
    76dc:	dfc00617 	ldw	ra,24(sp)
    76e0:	dcc00517 	ldw	r19,20(sp)
    76e4:	dc800417 	ldw	r18,16(sp)
    76e8:	dc400317 	ldw	r17,12(sp)
    76ec:	dc000217 	ldw	r16,8(sp)
    76f0:	dec00704 	addi	sp,sp,28
    76f4:	f800283a 	ret
    76f8:	280a953a 	slli	r5,r5,20
    76fc:	1947c83a 	sub	r3,r3,r5
    7700:	003ff106 	br	76c8 <__ratio+0x68>

00007704 <_mprec_log10>:
    7704:	defffe04 	addi	sp,sp,-8
    7708:	dc000015 	stw	r16,0(sp)
    770c:	dfc00115 	stw	ra,4(sp)
    7710:	008005c4 	movi	r2,23
    7714:	2021883a 	mov	r16,r4
    7718:	11000d0e 	bge	r2,r4,7750 <_mprec_log10+0x4c>
    771c:	0005883a 	mov	r2,zero
    7720:	00cffc34 	movhi	r3,16368
    7724:	843fffc4 	addi	r16,r16,-1
    7728:	1009883a 	mov	r4,r2
    772c:	180b883a 	mov	r5,r3
    7730:	000d883a 	mov	r6,zero
    7734:	01d00934 	movhi	r7,16420
    7738:	00096300 	call	9630 <__muldf3>
    773c:	803ff91e 	bne	r16,zero,7724 <_mprec_log10+0x20>
    7740:	dfc00117 	ldw	ra,4(sp)
    7744:	dc000017 	ldw	r16,0(sp)
    7748:	dec00204 	addi	sp,sp,8
    774c:	f800283a 	ret
    7750:	202090fa 	slli	r16,r4,3
    7754:	00800074 	movhi	r2,1
    7758:	10b50f04 	addi	r2,r2,-11204
    775c:	1421883a 	add	r16,r2,r16
    7760:	80800017 	ldw	r2,0(r16)
    7764:	80c00117 	ldw	r3,4(r16)
    7768:	dfc00117 	ldw	ra,4(sp)
    776c:	dc000017 	ldw	r16,0(sp)
    7770:	dec00204 	addi	sp,sp,8
    7774:	f800283a 	ret

00007778 <__copybits>:
    7778:	297fffc4 	addi	r5,r5,-1
    777c:	31c00417 	ldw	r7,16(r6)
    7780:	2811d17a 	srai	r8,r5,5
    7784:	30800504 	addi	r2,r6,20
    7788:	39c00144 	addi	r7,r7,5
    778c:	42000044 	addi	r8,r8,1
    7790:	39cf883a 	add	r7,r7,r7
    7794:	4211883a 	add	r8,r8,r8
    7798:	39cf883a 	add	r7,r7,r7
    779c:	4211883a 	add	r8,r8,r8
    77a0:	31cf883a 	add	r7,r6,r7
    77a4:	2211883a 	add	r8,r4,r8
    77a8:	11c00d2e 	bgeu	r2,r7,77e0 <__copybits+0x68>
    77ac:	2007883a 	mov	r3,r4
    77b0:	11400017 	ldw	r5,0(r2)
    77b4:	18c00104 	addi	r3,r3,4
    77b8:	10800104 	addi	r2,r2,4
    77bc:	197fff15 	stw	r5,-4(r3)
    77c0:	11fffb36 	bltu	r2,r7,77b0 <__copybits+0x38>
    77c4:	3985c83a 	sub	r2,r7,r6
    77c8:	10bffac4 	addi	r2,r2,-21
    77cc:	1004d0ba 	srli	r2,r2,2
    77d0:	10800044 	addi	r2,r2,1
    77d4:	1085883a 	add	r2,r2,r2
    77d8:	1085883a 	add	r2,r2,r2
    77dc:	2089883a 	add	r4,r4,r2
    77e0:	2200032e 	bgeu	r4,r8,77f0 <__copybits+0x78>
    77e4:	20000015 	stw	zero,0(r4)
    77e8:	21000104 	addi	r4,r4,4
    77ec:	223ffd36 	bltu	r4,r8,77e4 <__copybits+0x6c>
    77f0:	f800283a 	ret

000077f4 <__any_on>:
    77f4:	21800417 	ldw	r6,16(r4)
    77f8:	2805d17a 	srai	r2,r5,5
    77fc:	20c00504 	addi	r3,r4,20
    7800:	30800f0e 	bge	r6,r2,7840 <__any_on+0x4c>
    7804:	3005883a 	mov	r2,r6
    7808:	10800144 	addi	r2,r2,5
    780c:	1085883a 	add	r2,r2,r2
    7810:	1085883a 	add	r2,r2,r2
    7814:	2089883a 	add	r4,r4,r2
    7818:	1900152e 	bgeu	r3,r4,7870 <__any_on+0x7c>
    781c:	20bfff17 	ldw	r2,-4(r4)
    7820:	213fff04 	addi	r4,r4,-4
    7824:	1000041e 	bne	r2,zero,7838 <__any_on+0x44>
    7828:	1900112e 	bgeu	r3,r4,7870 <__any_on+0x7c>
    782c:	213fff04 	addi	r4,r4,-4
    7830:	20800017 	ldw	r2,0(r4)
    7834:	103ffc26 	beq	r2,zero,7828 <__any_on+0x34>
    7838:	00800044 	movi	r2,1
    783c:	f800283a 	ret
    7840:	11bff10e 	bge	r2,r6,7808 <__any_on+0x14>
    7844:	294007cc 	andi	r5,r5,31
    7848:	283fef26 	beq	r5,zero,7808 <__any_on+0x14>
    784c:	11800144 	addi	r6,r2,5
    7850:	318d883a 	add	r6,r6,r6
    7854:	318d883a 	add	r6,r6,r6
    7858:	218d883a 	add	r6,r4,r6
    785c:	31800017 	ldw	r6,0(r6)
    7860:	314ed83a 	srl	r7,r6,r5
    7864:	394a983a 	sll	r5,r7,r5
    7868:	29bff31e 	bne	r5,r6,7838 <__any_on+0x44>
    786c:	003fe606 	br	7808 <__any_on+0x14>
    7870:	0005883a 	mov	r2,zero
    7874:	f800283a 	ret

00007878 <_realloc_r>:
    7878:	defff504 	addi	sp,sp,-44
    787c:	dd400615 	stw	r21,24(sp)
    7880:	dc800315 	stw	r18,12(sp)
    7884:	dc000115 	stw	r16,4(sp)
    7888:	dfc00a15 	stw	ra,40(sp)
    788c:	df000915 	stw	fp,36(sp)
    7890:	ddc00815 	stw	r23,32(sp)
    7894:	dd800715 	stw	r22,28(sp)
    7898:	dd000515 	stw	r20,20(sp)
    789c:	dcc00415 	stw	r19,16(sp)
    78a0:	dc400215 	stw	r17,8(sp)
    78a4:	2821883a 	mov	r16,r5
    78a8:	202b883a 	mov	r21,r4
    78ac:	3025883a 	mov	r18,r6
    78b0:	28009626 	beq	r5,zero,7b0c <_realloc_r+0x294>
    78b4:	000aba40 	call	aba4 <__malloc_lock>
    78b8:	80bfff17 	ldw	r2,-4(r16)
    78bc:	04ffff04 	movi	r19,-4
    78c0:	90c002c4 	addi	r3,r18,11
    78c4:	01000584 	movi	r4,22
    78c8:	85bffe04 	addi	r22,r16,-8
    78cc:	14e6703a 	and	r19,r2,r19
    78d0:	20c0372e 	bgeu	r4,r3,79b0 <_realloc_r+0x138>
    78d4:	047ffe04 	movi	r17,-8
    78d8:	1c62703a 	and	r17,r3,r17
    78dc:	8807883a 	mov	r3,r17
    78e0:	88005a16 	blt	r17,zero,7a4c <_realloc_r+0x1d4>
    78e4:	8c805936 	bltu	r17,r18,7a4c <_realloc_r+0x1d4>
    78e8:	98c0340e 	bge	r19,r3,79bc <_realloc_r+0x144>
    78ec:	07000074 	movhi	fp,1
    78f0:	e7369704 	addi	fp,fp,-9636
    78f4:	e1400217 	ldw	r5,8(fp)
    78f8:	b4c9883a 	add	r4,r22,r19
    78fc:	29009026 	beq	r5,r4,7b40 <_realloc_r+0x2c8>
    7900:	21800117 	ldw	r6,4(r4)
    7904:	01ffff84 	movi	r7,-2
    7908:	31ce703a 	and	r7,r6,r7
    790c:	21cf883a 	add	r7,r4,r7
    7910:	39c00117 	ldw	r7,4(r7)
    7914:	39c0004c 	andi	r7,r7,1
    7918:	38004326 	beq	r7,zero,7a28 <_realloc_r+0x1b0>
    791c:	000d883a 	mov	r6,zero
    7920:	0009883a 	mov	r4,zero
    7924:	1080004c 	andi	r2,r2,1
    7928:	10005a1e 	bne	r2,zero,7a94 <_realloc_r+0x21c>
    792c:	85fffe17 	ldw	r23,-8(r16)
    7930:	00bfff04 	movi	r2,-4
    7934:	b5efc83a 	sub	r23,r22,r23
    7938:	b9c00117 	ldw	r7,4(r23)
    793c:	388e703a 	and	r7,r7,r2
    7940:	3ccf883a 	add	r7,r7,r19
    7944:	20005226 	beq	r4,zero,7a90 <_realloc_r+0x218>
    7948:	31e9883a 	add	r20,r6,r7
    794c:	2140c726 	beq	r4,r5,7c6c <_realloc_r+0x3f4>
    7950:	a0c04f16 	blt	r20,r3,7a90 <_realloc_r+0x218>
    7954:	20800317 	ldw	r2,12(r4)
    7958:	20c00217 	ldw	r3,8(r4)
    795c:	99bfff04 	addi	r6,r19,-4
    7960:	01000904 	movi	r4,36
    7964:	18800315 	stw	r2,12(r3)
    7968:	10c00215 	stw	r3,8(r2)
    796c:	b8c00217 	ldw	r3,8(r23)
    7970:	b8800317 	ldw	r2,12(r23)
    7974:	bc800204 	addi	r18,r23,8
    7978:	18800315 	stw	r2,12(r3)
    797c:	10c00215 	stw	r3,8(r2)
    7980:	2180ed36 	bltu	r4,r6,7d38 <_realloc_r+0x4c0>
    7984:	008004c4 	movi	r2,19
    7988:	11809b2e 	bgeu	r2,r6,7bf8 <_realloc_r+0x380>
    798c:	80800017 	ldw	r2,0(r16)
    7990:	b8800215 	stw	r2,8(r23)
    7994:	80800117 	ldw	r2,4(r16)
    7998:	b8800315 	stw	r2,12(r23)
    799c:	008006c4 	movi	r2,27
    79a0:	1180f936 	bltu	r2,r6,7d88 <_realloc_r+0x510>
    79a4:	b8800404 	addi	r2,r23,16
    79a8:	80c00204 	addi	r3,r16,8
    79ac:	00009406 	br	7c00 <_realloc_r+0x388>
    79b0:	00c00404 	movi	r3,16
    79b4:	1823883a 	mov	r17,r3
    79b8:	003fca06 	br	78e4 <_realloc_r+0x6c>
    79bc:	9829883a 	mov	r20,r19
    79c0:	a447c83a 	sub	r3,r20,r17
    79c4:	010003c4 	movi	r4,15
    79c8:	1080004c 	andi	r2,r2,1
    79cc:	20c02336 	bltu	r4,r3,7a5c <_realloc_r+0x1e4>
    79d0:	1504b03a 	or	r2,r2,r20
    79d4:	b0800115 	stw	r2,4(r22)
    79d8:	b52d883a 	add	r22,r22,r20
    79dc:	b0800117 	ldw	r2,4(r22)
    79e0:	10800054 	ori	r2,r2,1
    79e4:	b0800115 	stw	r2,4(r22)
    79e8:	a809883a 	mov	r4,r21
    79ec:	000abc40 	call	abc4 <__malloc_unlock>
    79f0:	8025883a 	mov	r18,r16
    79f4:	9005883a 	mov	r2,r18
    79f8:	dfc00a17 	ldw	ra,40(sp)
    79fc:	df000917 	ldw	fp,36(sp)
    7a00:	ddc00817 	ldw	r23,32(sp)
    7a04:	dd800717 	ldw	r22,28(sp)
    7a08:	dd400617 	ldw	r21,24(sp)
    7a0c:	dd000517 	ldw	r20,20(sp)
    7a10:	dcc00417 	ldw	r19,16(sp)
    7a14:	dc800317 	ldw	r18,12(sp)
    7a18:	dc400217 	ldw	r17,8(sp)
    7a1c:	dc000117 	ldw	r16,4(sp)
    7a20:	dec00b04 	addi	sp,sp,44
    7a24:	f800283a 	ret
    7a28:	01ffff04 	movi	r7,-4
    7a2c:	31cc703a 	and	r6,r6,r7
    7a30:	34e9883a 	add	r20,r6,r19
    7a34:	a0ffbb16 	blt	r20,r3,7924 <_realloc_r+0xac>
    7a38:	20c00317 	ldw	r3,12(r4)
    7a3c:	21000217 	ldw	r4,8(r4)
    7a40:	20c00315 	stw	r3,12(r4)
    7a44:	19000215 	stw	r4,8(r3)
    7a48:	003fdd06 	br	79c0 <_realloc_r+0x148>
    7a4c:	00800304 	movi	r2,12
    7a50:	a8800015 	stw	r2,0(r21)
    7a54:	0025883a 	mov	r18,zero
    7a58:	003fe606 	br	79f4 <_realloc_r+0x17c>
    7a5c:	1444b03a 	or	r2,r2,r17
    7a60:	b0800115 	stw	r2,4(r22)
    7a64:	b44b883a 	add	r5,r22,r17
    7a68:	18800054 	ori	r2,r3,1
    7a6c:	28800115 	stw	r2,4(r5)
    7a70:	28c7883a 	add	r3,r5,r3
    7a74:	18800117 	ldw	r2,4(r3)
    7a78:	a809883a 	mov	r4,r21
    7a7c:	29400204 	addi	r5,r5,8
    7a80:	10800054 	ori	r2,r2,1
    7a84:	18800115 	stw	r2,4(r3)
    7a88:	000506c0 	call	506c <_free_r>
    7a8c:	003fd606 	br	79e8 <_realloc_r+0x170>
    7a90:	38c0330e 	bge	r7,r3,7b60 <_realloc_r+0x2e8>
    7a94:	900b883a 	mov	r5,r18
    7a98:	a809883a 	mov	r4,r21
    7a9c:	0005c040 	call	5c04 <_malloc_r>
    7aa0:	1025883a 	mov	r18,r2
    7aa4:	10001626 	beq	r2,zero,7b00 <_realloc_r+0x288>
    7aa8:	80bfff17 	ldw	r2,-4(r16)
    7aac:	00ffff84 	movi	r3,-2
    7ab0:	913ffe04 	addi	r4,r18,-8
    7ab4:	10c6703a 	and	r3,r2,r3
    7ab8:	b0c7883a 	add	r3,r22,r3
    7abc:	20c09926 	beq	r4,r3,7d24 <_realloc_r+0x4ac>
    7ac0:	99bfff04 	addi	r6,r19,-4
    7ac4:	00800904 	movi	r2,36
    7ac8:	11806436 	bltu	r2,r6,7c5c <_realloc_r+0x3e4>
    7acc:	00c004c4 	movi	r3,19
    7ad0:	19804036 	bltu	r3,r6,7bd4 <_realloc_r+0x35c>
    7ad4:	9005883a 	mov	r2,r18
    7ad8:	8007883a 	mov	r3,r16
    7adc:	19000017 	ldw	r4,0(r3)
    7ae0:	11000015 	stw	r4,0(r2)
    7ae4:	19000117 	ldw	r4,4(r3)
    7ae8:	11000115 	stw	r4,4(r2)
    7aec:	18c00217 	ldw	r3,8(r3)
    7af0:	10c00215 	stw	r3,8(r2)
    7af4:	a809883a 	mov	r4,r21
    7af8:	800b883a 	mov	r5,r16
    7afc:	000506c0 	call	506c <_free_r>
    7b00:	a809883a 	mov	r4,r21
    7b04:	000abc40 	call	abc4 <__malloc_unlock>
    7b08:	003fba06 	br	79f4 <_realloc_r+0x17c>
    7b0c:	300b883a 	mov	r5,r6
    7b10:	dfc00a17 	ldw	ra,40(sp)
    7b14:	df000917 	ldw	fp,36(sp)
    7b18:	ddc00817 	ldw	r23,32(sp)
    7b1c:	dd800717 	ldw	r22,28(sp)
    7b20:	dd400617 	ldw	r21,24(sp)
    7b24:	dd000517 	ldw	r20,20(sp)
    7b28:	dcc00417 	ldw	r19,16(sp)
    7b2c:	dc800317 	ldw	r18,12(sp)
    7b30:	dc400217 	ldw	r17,8(sp)
    7b34:	dc000117 	ldw	r16,4(sp)
    7b38:	dec00b04 	addi	sp,sp,44
    7b3c:	0005c041 	jmpi	5c04 <_malloc_r>
    7b40:	29800117 	ldw	r6,4(r5)
    7b44:	013fff04 	movi	r4,-4
    7b48:	89c00404 	addi	r7,r17,16
    7b4c:	310c703a 	and	r6,r6,r4
    7b50:	34c9883a 	add	r4,r6,r19
    7b54:	21c0340e 	bge	r4,r7,7c28 <_realloc_r+0x3b0>
    7b58:	2809883a 	mov	r4,r5
    7b5c:	003f7106 	br	7924 <_realloc_r+0xac>
    7b60:	b8800317 	ldw	r2,12(r23)
    7b64:	b8c00217 	ldw	r3,8(r23)
    7b68:	99bfff04 	addi	r6,r19,-4
    7b6c:	01000904 	movi	r4,36
    7b70:	18800315 	stw	r2,12(r3)
    7b74:	10c00215 	stw	r3,8(r2)
    7b78:	bc800204 	addi	r18,r23,8
    7b7c:	21807836 	bltu	r4,r6,7d60 <_realloc_r+0x4e8>
    7b80:	008004c4 	movi	r2,19
    7b84:	1180732e 	bgeu	r2,r6,7d54 <_realloc_r+0x4dc>
    7b88:	80800017 	ldw	r2,0(r16)
    7b8c:	b8800215 	stw	r2,8(r23)
    7b90:	80800117 	ldw	r2,4(r16)
    7b94:	b8800315 	stw	r2,12(r23)
    7b98:	008006c4 	movi	r2,27
    7b9c:	11808936 	bltu	r2,r6,7dc4 <_realloc_r+0x54c>
    7ba0:	b8800404 	addi	r2,r23,16
    7ba4:	80c00204 	addi	r3,r16,8
    7ba8:	19000017 	ldw	r4,0(r3)
    7bac:	9021883a 	mov	r16,r18
    7bb0:	3829883a 	mov	r20,r7
    7bb4:	11000015 	stw	r4,0(r2)
    7bb8:	19000117 	ldw	r4,4(r3)
    7bbc:	b82d883a 	mov	r22,r23
    7bc0:	11000115 	stw	r4,4(r2)
    7bc4:	18c00217 	ldw	r3,8(r3)
    7bc8:	10c00215 	stw	r3,8(r2)
    7bcc:	b8800117 	ldw	r2,4(r23)
    7bd0:	003f7b06 	br	79c0 <_realloc_r+0x148>
    7bd4:	80c00017 	ldw	r3,0(r16)
    7bd8:	90c00015 	stw	r3,0(r18)
    7bdc:	80c00117 	ldw	r3,4(r16)
    7be0:	90c00115 	stw	r3,4(r18)
    7be4:	00c006c4 	movi	r3,27
    7be8:	19804636 	bltu	r3,r6,7d04 <_realloc_r+0x48c>
    7bec:	90800204 	addi	r2,r18,8
    7bf0:	80c00204 	addi	r3,r16,8
    7bf4:	003fb906 	br	7adc <_realloc_r+0x264>
    7bf8:	9005883a 	mov	r2,r18
    7bfc:	8007883a 	mov	r3,r16
    7c00:	19000017 	ldw	r4,0(r3)
    7c04:	9021883a 	mov	r16,r18
    7c08:	b82d883a 	mov	r22,r23
    7c0c:	11000015 	stw	r4,0(r2)
    7c10:	19000117 	ldw	r4,4(r3)
    7c14:	11000115 	stw	r4,4(r2)
    7c18:	18c00217 	ldw	r3,8(r3)
    7c1c:	10c00215 	stw	r3,8(r2)
    7c20:	b8800117 	ldw	r2,4(r23)
    7c24:	003f6606 	br	79c0 <_realloc_r+0x148>
    7c28:	2445c83a 	sub	r2,r4,r17
    7c2c:	b46d883a 	add	r22,r22,r17
    7c30:	10800054 	ori	r2,r2,1
    7c34:	b0800115 	stw	r2,4(r22)
    7c38:	80bfff17 	ldw	r2,-4(r16)
    7c3c:	a809883a 	mov	r4,r21
    7c40:	e5800215 	stw	r22,8(fp)
    7c44:	1080004c 	andi	r2,r2,1
    7c48:	88a2b03a 	or	r17,r17,r2
    7c4c:	847fff15 	stw	r17,-4(r16)
    7c50:	000abc40 	call	abc4 <__malloc_unlock>
    7c54:	8025883a 	mov	r18,r16
    7c58:	003f6606 	br	79f4 <_realloc_r+0x17c>
    7c5c:	9009883a 	mov	r4,r18
    7c60:	800b883a 	mov	r5,r16
    7c64:	00065c00 	call	65c0 <memmove>
    7c68:	003fa206 	br	7af4 <_realloc_r+0x27c>
    7c6c:	88800404 	addi	r2,r17,16
    7c70:	a0bf8716 	blt	r20,r2,7a90 <_realloc_r+0x218>
    7c74:	b8800317 	ldw	r2,12(r23)
    7c78:	b8c00217 	ldw	r3,8(r23)
    7c7c:	99bfff04 	addi	r6,r19,-4
    7c80:	01000904 	movi	r4,36
    7c84:	18800315 	stw	r2,12(r3)
    7c88:	10c00215 	stw	r3,8(r2)
    7c8c:	bc800204 	addi	r18,r23,8
    7c90:	21806536 	bltu	r4,r6,7e28 <_realloc_r+0x5b0>
    7c94:	008004c4 	movi	r2,19
    7c98:	1180592e 	bgeu	r2,r6,7e00 <_realloc_r+0x588>
    7c9c:	80800017 	ldw	r2,0(r16)
    7ca0:	b8800215 	stw	r2,8(r23)
    7ca4:	80800117 	ldw	r2,4(r16)
    7ca8:	b8800315 	stw	r2,12(r23)
    7cac:	008006c4 	movi	r2,27
    7cb0:	11806136 	bltu	r2,r6,7e38 <_realloc_r+0x5c0>
    7cb4:	b8800404 	addi	r2,r23,16
    7cb8:	80c00204 	addi	r3,r16,8
    7cbc:	19000017 	ldw	r4,0(r3)
    7cc0:	11000015 	stw	r4,0(r2)
    7cc4:	19000117 	ldw	r4,4(r3)
    7cc8:	11000115 	stw	r4,4(r2)
    7ccc:	18c00217 	ldw	r3,8(r3)
    7cd0:	10c00215 	stw	r3,8(r2)
    7cd4:	a447c83a 	sub	r3,r20,r17
    7cd8:	bc45883a 	add	r2,r23,r17
    7cdc:	18c00054 	ori	r3,r3,1
    7ce0:	10c00115 	stw	r3,4(r2)
    7ce4:	b8c00117 	ldw	r3,4(r23)
    7ce8:	e0800215 	stw	r2,8(fp)
    7cec:	a809883a 	mov	r4,r21
    7cf0:	1880004c 	andi	r2,r3,1
    7cf4:	88a2b03a 	or	r17,r17,r2
    7cf8:	bc400115 	stw	r17,4(r23)
    7cfc:	000abc40 	call	abc4 <__malloc_unlock>
    7d00:	003f3c06 	br	79f4 <_realloc_r+0x17c>
    7d04:	80c00217 	ldw	r3,8(r16)
    7d08:	90c00215 	stw	r3,8(r18)
    7d0c:	80c00317 	ldw	r3,12(r16)
    7d10:	90c00315 	stw	r3,12(r18)
    7d14:	30802426 	beq	r6,r2,7da8 <_realloc_r+0x530>
    7d18:	90800404 	addi	r2,r18,16
    7d1c:	80c00404 	addi	r3,r16,16
    7d20:	003f6e06 	br	7adc <_realloc_r+0x264>
    7d24:	953fff17 	ldw	r20,-4(r18)
    7d28:	00ffff04 	movi	r3,-4
    7d2c:	a0e8703a 	and	r20,r20,r3
    7d30:	a4e9883a 	add	r20,r20,r19
    7d34:	003f2206 	br	79c0 <_realloc_r+0x148>
    7d38:	800b883a 	mov	r5,r16
    7d3c:	9009883a 	mov	r4,r18
    7d40:	00065c00 	call	65c0 <memmove>
    7d44:	9021883a 	mov	r16,r18
    7d48:	b8800117 	ldw	r2,4(r23)
    7d4c:	b82d883a 	mov	r22,r23
    7d50:	003f1b06 	br	79c0 <_realloc_r+0x148>
    7d54:	9005883a 	mov	r2,r18
    7d58:	8007883a 	mov	r3,r16
    7d5c:	003f9206 	br	7ba8 <_realloc_r+0x330>
    7d60:	800b883a 	mov	r5,r16
    7d64:	9009883a 	mov	r4,r18
    7d68:	d9c00015 	stw	r7,0(sp)
    7d6c:	00065c00 	call	65c0 <memmove>
    7d70:	d9c00017 	ldw	r7,0(sp)
    7d74:	9021883a 	mov	r16,r18
    7d78:	b8800117 	ldw	r2,4(r23)
    7d7c:	3829883a 	mov	r20,r7
    7d80:	b82d883a 	mov	r22,r23
    7d84:	003f0e06 	br	79c0 <_realloc_r+0x148>
    7d88:	80800217 	ldw	r2,8(r16)
    7d8c:	b8800415 	stw	r2,16(r23)
    7d90:	80800317 	ldw	r2,12(r16)
    7d94:	b8800515 	stw	r2,20(r23)
    7d98:	31001226 	beq	r6,r4,7de4 <_realloc_r+0x56c>
    7d9c:	b8800604 	addi	r2,r23,24
    7da0:	80c00404 	addi	r3,r16,16
    7da4:	003f9606 	br	7c00 <_realloc_r+0x388>
    7da8:	81000417 	ldw	r4,16(r16)
    7dac:	90800604 	addi	r2,r18,24
    7db0:	80c00604 	addi	r3,r16,24
    7db4:	91000415 	stw	r4,16(r18)
    7db8:	81000517 	ldw	r4,20(r16)
    7dbc:	91000515 	stw	r4,20(r18)
    7dc0:	003f4606 	br	7adc <_realloc_r+0x264>
    7dc4:	80800217 	ldw	r2,8(r16)
    7dc8:	b8800415 	stw	r2,16(r23)
    7dcc:	80800317 	ldw	r2,12(r16)
    7dd0:	b8800515 	stw	r2,20(r23)
    7dd4:	31000d26 	beq	r6,r4,7e0c <_realloc_r+0x594>
    7dd8:	b8800604 	addi	r2,r23,24
    7ddc:	80c00404 	addi	r3,r16,16
    7de0:	003f7106 	br	7ba8 <_realloc_r+0x330>
    7de4:	81000417 	ldw	r4,16(r16)
    7de8:	b8800804 	addi	r2,r23,32
    7dec:	80c00604 	addi	r3,r16,24
    7df0:	b9000615 	stw	r4,24(r23)
    7df4:	81000517 	ldw	r4,20(r16)
    7df8:	b9000715 	stw	r4,28(r23)
    7dfc:	003f8006 	br	7c00 <_realloc_r+0x388>
    7e00:	9005883a 	mov	r2,r18
    7e04:	8007883a 	mov	r3,r16
    7e08:	003fac06 	br	7cbc <_realloc_r+0x444>
    7e0c:	81000417 	ldw	r4,16(r16)
    7e10:	b8800804 	addi	r2,r23,32
    7e14:	80c00604 	addi	r3,r16,24
    7e18:	b9000615 	stw	r4,24(r23)
    7e1c:	81000517 	ldw	r4,20(r16)
    7e20:	b9000715 	stw	r4,28(r23)
    7e24:	003f6006 	br	7ba8 <_realloc_r+0x330>
    7e28:	9009883a 	mov	r4,r18
    7e2c:	800b883a 	mov	r5,r16
    7e30:	00065c00 	call	65c0 <memmove>
    7e34:	003fa706 	br	7cd4 <_realloc_r+0x45c>
    7e38:	80800217 	ldw	r2,8(r16)
    7e3c:	b8800415 	stw	r2,16(r23)
    7e40:	80800317 	ldw	r2,12(r16)
    7e44:	b8800515 	stw	r2,20(r23)
    7e48:	31000326 	beq	r6,r4,7e58 <_realloc_r+0x5e0>
    7e4c:	b8800604 	addi	r2,r23,24
    7e50:	80c00404 	addi	r3,r16,16
    7e54:	003f9906 	br	7cbc <_realloc_r+0x444>
    7e58:	81000417 	ldw	r4,16(r16)
    7e5c:	b8800804 	addi	r2,r23,32
    7e60:	80c00604 	addi	r3,r16,24
    7e64:	b9000615 	stw	r4,24(r23)
    7e68:	81000517 	ldw	r4,20(r16)
    7e6c:	b9000715 	stw	r4,28(r23)
    7e70:	003f9206 	br	7cbc <_realloc_r+0x444>

00007e74 <__isinfd>:
    7e74:	0105c83a 	sub	r2,zero,r4
    7e78:	1108b03a 	or	r4,r2,r4
    7e7c:	2004d7fa 	srli	r2,r4,31
    7e80:	00e00034 	movhi	r3,32768
    7e84:	18ffffc4 	addi	r3,r3,-1
    7e88:	28ca703a 	and	r5,r5,r3
    7e8c:	1144b03a 	or	r2,r2,r5
    7e90:	00dffc34 	movhi	r3,32752
    7e94:	1885c83a 	sub	r2,r3,r2
    7e98:	0087c83a 	sub	r3,zero,r2
    7e9c:	1884b03a 	or	r2,r3,r2
    7ea0:	1005d7fa 	srai	r2,r2,31
    7ea4:	10800044 	addi	r2,r2,1
    7ea8:	f800283a 	ret

00007eac <__isnand>:
    7eac:	0105c83a 	sub	r2,zero,r4
    7eb0:	1108b03a 	or	r4,r2,r4
    7eb4:	2004d7fa 	srli	r2,r4,31
    7eb8:	00e00034 	movhi	r3,32768
    7ebc:	18ffffc4 	addi	r3,r3,-1
    7ec0:	28ca703a 	and	r5,r5,r3
    7ec4:	1144b03a 	or	r2,r2,r5
    7ec8:	00dffc34 	movhi	r3,32752
    7ecc:	1885c83a 	sub	r2,r3,r2
    7ed0:	1004d7fa 	srli	r2,r2,31
    7ed4:	f800283a 	ret

00007ed8 <_sbrk_r>:
    7ed8:	defffd04 	addi	sp,sp,-12
    7edc:	dc400115 	stw	r17,4(sp)
    7ee0:	dc000015 	stw	r16,0(sp)
    7ee4:	2023883a 	mov	r17,r4
    7ee8:	04000074 	movhi	r16,1
    7eec:	8402c604 	addi	r16,r16,2840
    7ef0:	2809883a 	mov	r4,r5
    7ef4:	dfc00215 	stw	ra,8(sp)
    7ef8:	80000015 	stw	zero,0(r16)
    7efc:	000ada80 	call	ada8 <sbrk>
    7f00:	00ffffc4 	movi	r3,-1
    7f04:	10c00526 	beq	r2,r3,7f1c <_sbrk_r+0x44>
    7f08:	dfc00217 	ldw	ra,8(sp)
    7f0c:	dc400117 	ldw	r17,4(sp)
    7f10:	dc000017 	ldw	r16,0(sp)
    7f14:	dec00304 	addi	sp,sp,12
    7f18:	f800283a 	ret
    7f1c:	80c00017 	ldw	r3,0(r16)
    7f20:	183ff926 	beq	r3,zero,7f08 <_sbrk_r+0x30>
    7f24:	88c00015 	stw	r3,0(r17)
    7f28:	dfc00217 	ldw	ra,8(sp)
    7f2c:	dc400117 	ldw	r17,4(sp)
    7f30:	dc000017 	ldw	r16,0(sp)
    7f34:	dec00304 	addi	sp,sp,12
    7f38:	f800283a 	ret

00007f3c <__sread>:
    7f3c:	defffe04 	addi	sp,sp,-8
    7f40:	dc000015 	stw	r16,0(sp)
    7f44:	2821883a 	mov	r16,r5
    7f48:	2940038f 	ldh	r5,14(r5)
    7f4c:	dfc00115 	stw	ra,4(sp)
    7f50:	00085440 	call	8544 <_read_r>
    7f54:	10000716 	blt	r2,zero,7f74 <__sread+0x38>
    7f58:	80c01417 	ldw	r3,80(r16)
    7f5c:	1887883a 	add	r3,r3,r2
    7f60:	80c01415 	stw	r3,80(r16)
    7f64:	dfc00117 	ldw	ra,4(sp)
    7f68:	dc000017 	ldw	r16,0(sp)
    7f6c:	dec00204 	addi	sp,sp,8
    7f70:	f800283a 	ret
    7f74:	80c0030b 	ldhu	r3,12(r16)
    7f78:	18fbffcc 	andi	r3,r3,61439
    7f7c:	80c0030d 	sth	r3,12(r16)
    7f80:	dfc00117 	ldw	ra,4(sp)
    7f84:	dc000017 	ldw	r16,0(sp)
    7f88:	dec00204 	addi	sp,sp,8
    7f8c:	f800283a 	ret

00007f90 <__swrite>:
    7f90:	2880030b 	ldhu	r2,12(r5)
    7f94:	defffb04 	addi	sp,sp,-20
    7f98:	dcc00315 	stw	r19,12(sp)
    7f9c:	10c0400c 	andi	r3,r2,256
    7fa0:	18ffffcc 	andi	r3,r3,65535
    7fa4:	18e0001c 	xori	r3,r3,32768
    7fa8:	dc800215 	stw	r18,8(sp)
    7fac:	dc400115 	stw	r17,4(sp)
    7fb0:	dc000015 	stw	r16,0(sp)
    7fb4:	dfc00415 	stw	ra,16(sp)
    7fb8:	18e00004 	addi	r3,r3,-32768
    7fbc:	2821883a 	mov	r16,r5
    7fc0:	2027883a 	mov	r19,r4
    7fc4:	3025883a 	mov	r18,r6
    7fc8:	3823883a 	mov	r17,r7
    7fcc:	18000526 	beq	r3,zero,7fe4 <__swrite+0x54>
    7fd0:	2940038f 	ldh	r5,14(r5)
    7fd4:	000d883a 	mov	r6,zero
    7fd8:	01c00084 	movi	r7,2
    7fdc:	00084d80 	call	84d8 <_lseek_r>
    7fe0:	8080030b 	ldhu	r2,12(r16)
    7fe4:	8140038f 	ldh	r5,14(r16)
    7fe8:	10bbffcc 	andi	r2,r2,61439
    7fec:	9809883a 	mov	r4,r19
    7ff0:	900d883a 	mov	r6,r18
    7ff4:	880f883a 	mov	r7,r17
    7ff8:	8080030d 	sth	r2,12(r16)
    7ffc:	dfc00417 	ldw	ra,16(sp)
    8000:	dcc00317 	ldw	r19,12(sp)
    8004:	dc800217 	ldw	r18,8(sp)
    8008:	dc400117 	ldw	r17,4(sp)
    800c:	dc000017 	ldw	r16,0(sp)
    8010:	dec00504 	addi	sp,sp,20
    8014:	00081201 	jmpi	8120 <_write_r>

00008018 <__sseek>:
    8018:	defffe04 	addi	sp,sp,-8
    801c:	dc000015 	stw	r16,0(sp)
    8020:	2821883a 	mov	r16,r5
    8024:	2940038f 	ldh	r5,14(r5)
    8028:	dfc00115 	stw	ra,4(sp)
    802c:	00084d80 	call	84d8 <_lseek_r>
    8030:	00ffffc4 	movi	r3,-1
    8034:	10c00826 	beq	r2,r3,8058 <__sseek+0x40>
    8038:	80c0030b 	ldhu	r3,12(r16)
    803c:	80801415 	stw	r2,80(r16)
    8040:	18c40014 	ori	r3,r3,4096
    8044:	80c0030d 	sth	r3,12(r16)
    8048:	dfc00117 	ldw	ra,4(sp)
    804c:	dc000017 	ldw	r16,0(sp)
    8050:	dec00204 	addi	sp,sp,8
    8054:	f800283a 	ret
    8058:	80c0030b 	ldhu	r3,12(r16)
    805c:	18fbffcc 	andi	r3,r3,61439
    8060:	80c0030d 	sth	r3,12(r16)
    8064:	dfc00117 	ldw	ra,4(sp)
    8068:	dc000017 	ldw	r16,0(sp)
    806c:	dec00204 	addi	sp,sp,8
    8070:	f800283a 	ret

00008074 <__sclose>:
    8074:	2940038f 	ldh	r5,14(r5)
    8078:	00082581 	jmpi	8258 <_close_r>

0000807c <strcmp>:
    807c:	2904b03a 	or	r2,r5,r4
    8080:	108000cc 	andi	r2,r2,3
    8084:	1000171e 	bne	r2,zero,80e4 <strcmp+0x68>
    8088:	20800017 	ldw	r2,0(r4)
    808c:	28c00017 	ldw	r3,0(r5)
    8090:	10c0141e 	bne	r2,r3,80e4 <strcmp+0x68>
    8094:	027fbff4 	movhi	r9,65279
    8098:	4a7fbfc4 	addi	r9,r9,-257
    809c:	1247883a 	add	r3,r2,r9
    80a0:	0084303a 	nor	r2,zero,r2
    80a4:	1884703a 	and	r2,r3,r2
    80a8:	02202074 	movhi	r8,32897
    80ac:	42202004 	addi	r8,r8,-32640
    80b0:	1204703a 	and	r2,r2,r8
    80b4:	10000226 	beq	r2,zero,80c0 <strcmp+0x44>
    80b8:	00001706 	br	8118 <strcmp+0x9c>
    80bc:	3000161e 	bne	r6,zero,8118 <strcmp+0x9c>
    80c0:	21000104 	addi	r4,r4,4
    80c4:	20800017 	ldw	r2,0(r4)
    80c8:	29400104 	addi	r5,r5,4
    80cc:	28c00017 	ldw	r3,0(r5)
    80d0:	124f883a 	add	r7,r2,r9
    80d4:	008c303a 	nor	r6,zero,r2
    80d8:	398c703a 	and	r6,r7,r6
    80dc:	320c703a 	and	r6,r6,r8
    80e0:	10fff626 	beq	r2,r3,80bc <strcmp+0x40>
    80e4:	20800007 	ldb	r2,0(r4)
    80e8:	1000051e 	bne	r2,zero,8100 <strcmp+0x84>
    80ec:	00000606 	br	8108 <strcmp+0x8c>
    80f0:	21000044 	addi	r4,r4,1
    80f4:	20800007 	ldb	r2,0(r4)
    80f8:	29400044 	addi	r5,r5,1
    80fc:	10000226 	beq	r2,zero,8108 <strcmp+0x8c>
    8100:	28c00007 	ldb	r3,0(r5)
    8104:	10fffa26 	beq	r2,r3,80f0 <strcmp+0x74>
    8108:	20c00003 	ldbu	r3,0(r4)
    810c:	28800003 	ldbu	r2,0(r5)
    8110:	1885c83a 	sub	r2,r3,r2
    8114:	f800283a 	ret
    8118:	0005883a 	mov	r2,zero
    811c:	f800283a 	ret

00008120 <_write_r>:
    8120:	defffd04 	addi	sp,sp,-12
    8124:	dc400115 	stw	r17,4(sp)
    8128:	dc000015 	stw	r16,0(sp)
    812c:	2023883a 	mov	r17,r4
    8130:	04000074 	movhi	r16,1
    8134:	8402c604 	addi	r16,r16,2840
    8138:	2809883a 	mov	r4,r5
    813c:	300b883a 	mov	r5,r6
    8140:	380d883a 	mov	r6,r7
    8144:	dfc00215 	stw	ra,8(sp)
    8148:	80000015 	stw	zero,0(r16)
    814c:	000aea80 	call	aea8 <write>
    8150:	00ffffc4 	movi	r3,-1
    8154:	10c00526 	beq	r2,r3,816c <_write_r+0x4c>
    8158:	dfc00217 	ldw	ra,8(sp)
    815c:	dc400117 	ldw	r17,4(sp)
    8160:	dc000017 	ldw	r16,0(sp)
    8164:	dec00304 	addi	sp,sp,12
    8168:	f800283a 	ret
    816c:	80c00017 	ldw	r3,0(r16)
    8170:	183ff926 	beq	r3,zero,8158 <_write_r+0x38>
    8174:	88c00015 	stw	r3,0(r17)
    8178:	dfc00217 	ldw	ra,8(sp)
    817c:	dc400117 	ldw	r17,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00304 	addi	sp,sp,12
    8188:	f800283a 	ret

0000818c <_calloc_r>:
    818c:	defffe04 	addi	sp,sp,-8
    8190:	dc000015 	stw	r16,0(sp)
    8194:	2021883a 	mov	r16,r4
    8198:	3009883a 	mov	r4,r6
    819c:	dfc00115 	stw	ra,4(sp)
    81a0:	0000e000 	call	e00 <__mulsi3>
    81a4:	8009883a 	mov	r4,r16
    81a8:	100b883a 	mov	r5,r2
    81ac:	0005c040 	call	5c04 <_malloc_r>
    81b0:	1021883a 	mov	r16,r2
    81b4:	10000c26 	beq	r2,zero,81e8 <_calloc_r+0x5c>
    81b8:	11bfff17 	ldw	r6,-4(r2)
    81bc:	00ffff04 	movi	r3,-4
    81c0:	00800904 	movi	r2,36
    81c4:	30cc703a 	and	r6,r6,r3
    81c8:	30cd883a 	add	r6,r6,r3
    81cc:	11801436 	bltu	r2,r6,8220 <_calloc_r+0x94>
    81d0:	00c004c4 	movi	r3,19
    81d4:	19800936 	bltu	r3,r6,81fc <_calloc_r+0x70>
    81d8:	8005883a 	mov	r2,r16
    81dc:	10000015 	stw	zero,0(r2)
    81e0:	10000115 	stw	zero,4(r2)
    81e4:	10000215 	stw	zero,8(r2)
    81e8:	8005883a 	mov	r2,r16
    81ec:	dfc00117 	ldw	ra,4(sp)
    81f0:	dc000017 	ldw	r16,0(sp)
    81f4:	dec00204 	addi	sp,sp,8
    81f8:	f800283a 	ret
    81fc:	80000015 	stw	zero,0(r16)
    8200:	80000115 	stw	zero,4(r16)
    8204:	00c006c4 	movi	r3,27
    8208:	19800d2e 	bgeu	r3,r6,8240 <_calloc_r+0xb4>
    820c:	80000215 	stw	zero,8(r16)
    8210:	80000315 	stw	zero,12(r16)
    8214:	30800c26 	beq	r6,r2,8248 <_calloc_r+0xbc>
    8218:	80800404 	addi	r2,r16,16
    821c:	003fef06 	br	81dc <_calloc_r+0x50>
    8220:	8009883a 	mov	r4,r16
    8224:	000b883a 	mov	r5,zero
    8228:	000674c0 	call	674c <memset>
    822c:	8005883a 	mov	r2,r16
    8230:	dfc00117 	ldw	ra,4(sp)
    8234:	dc000017 	ldw	r16,0(sp)
    8238:	dec00204 	addi	sp,sp,8
    823c:	f800283a 	ret
    8240:	80800204 	addi	r2,r16,8
    8244:	003fe506 	br	81dc <_calloc_r+0x50>
    8248:	80000415 	stw	zero,16(r16)
    824c:	80000515 	stw	zero,20(r16)
    8250:	80800604 	addi	r2,r16,24
    8254:	003fe106 	br	81dc <_calloc_r+0x50>

00008258 <_close_r>:
    8258:	defffd04 	addi	sp,sp,-12
    825c:	dc400115 	stw	r17,4(sp)
    8260:	dc000015 	stw	r16,0(sp)
    8264:	2023883a 	mov	r17,r4
    8268:	04000074 	movhi	r16,1
    826c:	8402c604 	addi	r16,r16,2840
    8270:	2809883a 	mov	r4,r5
    8274:	dfc00215 	stw	ra,8(sp)
    8278:	80000015 	stw	zero,0(r16)
    827c:	000a5f40 	call	a5f4 <close>
    8280:	00ffffc4 	movi	r3,-1
    8284:	10c00526 	beq	r2,r3,829c <_close_r+0x44>
    8288:	dfc00217 	ldw	ra,8(sp)
    828c:	dc400117 	ldw	r17,4(sp)
    8290:	dc000017 	ldw	r16,0(sp)
    8294:	dec00304 	addi	sp,sp,12
    8298:	f800283a 	ret
    829c:	80c00017 	ldw	r3,0(r16)
    82a0:	183ff926 	beq	r3,zero,8288 <_close_r+0x30>
    82a4:	88c00015 	stw	r3,0(r17)
    82a8:	dfc00217 	ldw	ra,8(sp)
    82ac:	dc400117 	ldw	r17,4(sp)
    82b0:	dc000017 	ldw	r16,0(sp)
    82b4:	dec00304 	addi	sp,sp,12
    82b8:	f800283a 	ret

000082bc <_fclose_r>:
    82bc:	defffc04 	addi	sp,sp,-16
    82c0:	dc400115 	stw	r17,4(sp)
    82c4:	dc000015 	stw	r16,0(sp)
    82c8:	dfc00315 	stw	ra,12(sp)
    82cc:	dc800215 	stw	r18,8(sp)
    82d0:	2821883a 	mov	r16,r5
    82d4:	2023883a 	mov	r17,r4
    82d8:	28003426 	beq	r5,zero,83ac <_fclose_r+0xf0>
    82dc:	0004ef00 	call	4ef0 <__sfp_lock_acquire>
    82e0:	88000226 	beq	r17,zero,82ec <_fclose_r+0x30>
    82e4:	88800e17 	ldw	r2,56(r17)
    82e8:	10003826 	beq	r2,zero,83cc <_fclose_r+0x110>
    82ec:	8080030f 	ldh	r2,12(r16)
    82f0:	10002526 	beq	r2,zero,8388 <_fclose_r+0xcc>
    82f4:	8809883a 	mov	r4,r17
    82f8:	800b883a 	mov	r5,r16
    82fc:	0004a2c0 	call	4a2c <_fflush_r>
    8300:	1025883a 	mov	r18,r2
    8304:	80800b17 	ldw	r2,44(r16)
    8308:	10000426 	beq	r2,zero,831c <_fclose_r+0x60>
    830c:	81400717 	ldw	r5,28(r16)
    8310:	8809883a 	mov	r4,r17
    8314:	103ee83a 	callr	r2
    8318:	10003516 	blt	r2,zero,83f0 <_fclose_r+0x134>
    831c:	8080030b 	ldhu	r2,12(r16)
    8320:	1080200c 	andi	r2,r2,128
    8324:	10bfffcc 	andi	r2,r2,65535
    8328:	10a0001c 	xori	r2,r2,32768
    832c:	10a00004 	addi	r2,r2,-32768
    8330:	10002b1e 	bne	r2,zero,83e0 <_fclose_r+0x124>
    8334:	81400c17 	ldw	r5,48(r16)
    8338:	28000526 	beq	r5,zero,8350 <_fclose_r+0x94>
    833c:	80801004 	addi	r2,r16,64
    8340:	28800226 	beq	r5,r2,834c <_fclose_r+0x90>
    8344:	8809883a 	mov	r4,r17
    8348:	000506c0 	call	506c <_free_r>
    834c:	80000c15 	stw	zero,48(r16)
    8350:	81401117 	ldw	r5,68(r16)
    8354:	28000326 	beq	r5,zero,8364 <_fclose_r+0xa8>
    8358:	8809883a 	mov	r4,r17
    835c:	000506c0 	call	506c <_free_r>
    8360:	80001115 	stw	zero,68(r16)
    8364:	8000030d 	sth	zero,12(r16)
    8368:	0004ef40 	call	4ef4 <__sfp_lock_release>
    836c:	9005883a 	mov	r2,r18
    8370:	dfc00317 	ldw	ra,12(sp)
    8374:	dc800217 	ldw	r18,8(sp)
    8378:	dc400117 	ldw	r17,4(sp)
    837c:	dc000017 	ldw	r16,0(sp)
    8380:	dec00404 	addi	sp,sp,16
    8384:	f800283a 	ret
    8388:	0004ef40 	call	4ef4 <__sfp_lock_release>
    838c:	0025883a 	mov	r18,zero
    8390:	9005883a 	mov	r2,r18
    8394:	dfc00317 	ldw	ra,12(sp)
    8398:	dc800217 	ldw	r18,8(sp)
    839c:	dc400117 	ldw	r17,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00404 	addi	sp,sp,16
    83a8:	f800283a 	ret
    83ac:	0025883a 	mov	r18,zero
    83b0:	9005883a 	mov	r2,r18
    83b4:	dfc00317 	ldw	ra,12(sp)
    83b8:	dc800217 	ldw	r18,8(sp)
    83bc:	dc400117 	ldw	r17,4(sp)
    83c0:	dc000017 	ldw	r16,0(sp)
    83c4:	dec00404 	addi	sp,sp,16
    83c8:	f800283a 	ret
    83cc:	8809883a 	mov	r4,r17
    83d0:	0004ce80 	call	4ce8 <__sinit>
    83d4:	8080030f 	ldh	r2,12(r16)
    83d8:	103fc61e 	bne	r2,zero,82f4 <_fclose_r+0x38>
    83dc:	003fea06 	br	8388 <_fclose_r+0xcc>
    83e0:	81400417 	ldw	r5,16(r16)
    83e4:	8809883a 	mov	r4,r17
    83e8:	000506c0 	call	506c <_free_r>
    83ec:	003fd106 	br	8334 <_fclose_r+0x78>
    83f0:	04bfffc4 	movi	r18,-1
    83f4:	003fc906 	br	831c <_fclose_r+0x60>

000083f8 <fclose>:
    83f8:	00800074 	movhi	r2,1
    83fc:	10bc1c04 	addi	r2,r2,-3984
    8400:	200b883a 	mov	r5,r4
    8404:	11000017 	ldw	r4,0(r2)
    8408:	00082bc1 	jmpi	82bc <_fclose_r>

0000840c <_fstat_r>:
    840c:	defffd04 	addi	sp,sp,-12
    8410:	dc400115 	stw	r17,4(sp)
    8414:	dc000015 	stw	r16,0(sp)
    8418:	2023883a 	mov	r17,r4
    841c:	04000074 	movhi	r16,1
    8420:	8402c604 	addi	r16,r16,2840
    8424:	2809883a 	mov	r4,r5
    8428:	300b883a 	mov	r5,r6
    842c:	dfc00215 	stw	ra,8(sp)
    8430:	80000015 	stw	zero,0(r16)
    8434:	000a7780 	call	a778 <fstat>
    8438:	00ffffc4 	movi	r3,-1
    843c:	10c00526 	beq	r2,r3,8454 <_fstat_r+0x48>
    8440:	dfc00217 	ldw	ra,8(sp)
    8444:	dc400117 	ldw	r17,4(sp)
    8448:	dc000017 	ldw	r16,0(sp)
    844c:	dec00304 	addi	sp,sp,12
    8450:	f800283a 	ret
    8454:	80c00017 	ldw	r3,0(r16)
    8458:	183ff926 	beq	r3,zero,8440 <_fstat_r+0x34>
    845c:	88c00015 	stw	r3,0(r17)
    8460:	dfc00217 	ldw	ra,8(sp)
    8464:	dc400117 	ldw	r17,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00304 	addi	sp,sp,12
    8470:	f800283a 	ret

00008474 <_isatty_r>:
    8474:	defffd04 	addi	sp,sp,-12
    8478:	dc400115 	stw	r17,4(sp)
    847c:	dc000015 	stw	r16,0(sp)
    8480:	2023883a 	mov	r17,r4
    8484:	04000074 	movhi	r16,1
    8488:	8402c604 	addi	r16,r16,2840
    848c:	2809883a 	mov	r4,r5
    8490:	dfc00215 	stw	ra,8(sp)
    8494:	80000015 	stw	zero,0(r16)
    8498:	000a8780 	call	a878 <isatty>
    849c:	00ffffc4 	movi	r3,-1
    84a0:	10c00526 	beq	r2,r3,84b8 <_isatty_r+0x44>
    84a4:	dfc00217 	ldw	ra,8(sp)
    84a8:	dc400117 	ldw	r17,4(sp)
    84ac:	dc000017 	ldw	r16,0(sp)
    84b0:	dec00304 	addi	sp,sp,12
    84b4:	f800283a 	ret
    84b8:	80c00017 	ldw	r3,0(r16)
    84bc:	183ff926 	beq	r3,zero,84a4 <_isatty_r+0x30>
    84c0:	88c00015 	stw	r3,0(r17)
    84c4:	dfc00217 	ldw	ra,8(sp)
    84c8:	dc400117 	ldw	r17,4(sp)
    84cc:	dc000017 	ldw	r16,0(sp)
    84d0:	dec00304 	addi	sp,sp,12
    84d4:	f800283a 	ret

000084d8 <_lseek_r>:
    84d8:	defffd04 	addi	sp,sp,-12
    84dc:	dc400115 	stw	r17,4(sp)
    84e0:	dc000015 	stw	r16,0(sp)
    84e4:	2023883a 	mov	r17,r4
    84e8:	04000074 	movhi	r16,1
    84ec:	8402c604 	addi	r16,r16,2840
    84f0:	2809883a 	mov	r4,r5
    84f4:	300b883a 	mov	r5,r6
    84f8:	380d883a 	mov	r6,r7
    84fc:	dfc00215 	stw	ra,8(sp)
    8500:	80000015 	stw	zero,0(r16)
    8504:	000aa580 	call	aa58 <lseek>
    8508:	00ffffc4 	movi	r3,-1
    850c:	10c00526 	beq	r2,r3,8524 <_lseek_r+0x4c>
    8510:	dfc00217 	ldw	ra,8(sp)
    8514:	dc400117 	ldw	r17,4(sp)
    8518:	dc000017 	ldw	r16,0(sp)
    851c:	dec00304 	addi	sp,sp,12
    8520:	f800283a 	ret
    8524:	80c00017 	ldw	r3,0(r16)
    8528:	183ff926 	beq	r3,zero,8510 <_lseek_r+0x38>
    852c:	88c00015 	stw	r3,0(r17)
    8530:	dfc00217 	ldw	ra,8(sp)
    8534:	dc400117 	ldw	r17,4(sp)
    8538:	dc000017 	ldw	r16,0(sp)
    853c:	dec00304 	addi	sp,sp,12
    8540:	f800283a 	ret

00008544 <_read_r>:
    8544:	defffd04 	addi	sp,sp,-12
    8548:	dc400115 	stw	r17,4(sp)
    854c:	dc000015 	stw	r16,0(sp)
    8550:	2023883a 	mov	r17,r4
    8554:	04000074 	movhi	r16,1
    8558:	8402c604 	addi	r16,r16,2840
    855c:	2809883a 	mov	r4,r5
    8560:	300b883a 	mov	r5,r6
    8564:	380d883a 	mov	r6,r7
    8568:	dfc00215 	stw	ra,8(sp)
    856c:	80000015 	stw	zero,0(r16)
    8570:	000ac340 	call	ac34 <read>
    8574:	00ffffc4 	movi	r3,-1
    8578:	10c00526 	beq	r2,r3,8590 <_read_r+0x4c>
    857c:	dfc00217 	ldw	ra,8(sp)
    8580:	dc400117 	ldw	r17,4(sp)
    8584:	dc000017 	ldw	r16,0(sp)
    8588:	dec00304 	addi	sp,sp,12
    858c:	f800283a 	ret
    8590:	80c00017 	ldw	r3,0(r16)
    8594:	183ff926 	beq	r3,zero,857c <_read_r+0x38>
    8598:	88c00015 	stw	r3,0(r17)
    859c:	dfc00217 	ldw	ra,8(sp)
    85a0:	dc400117 	ldw	r17,4(sp)
    85a4:	dc000017 	ldw	r16,0(sp)
    85a8:	dec00304 	addi	sp,sp,12
    85ac:	f800283a 	ret

000085b0 <__udivdi3>:
    85b0:	defff504 	addi	sp,sp,-44
    85b4:	dd000515 	stw	r20,20(sp)
    85b8:	dcc00415 	stw	r19,16(sp)
    85bc:	dc800315 	stw	r18,12(sp)
    85c0:	dc400215 	stw	r17,8(sp)
    85c4:	dc000115 	stw	r16,4(sp)
    85c8:	dfc00a15 	stw	ra,40(sp)
    85cc:	df000915 	stw	fp,36(sp)
    85d0:	ddc00815 	stw	r23,32(sp)
    85d4:	dd800715 	stw	r22,28(sp)
    85d8:	dd400615 	stw	r21,24(sp)
    85dc:	2025883a 	mov	r18,r4
    85e0:	2823883a 	mov	r17,r5
    85e4:	3021883a 	mov	r16,r6
    85e8:	2027883a 	mov	r19,r4
    85ec:	2829883a 	mov	r20,r5
    85f0:	3800451e 	bne	r7,zero,8708 <__udivdi3+0x158>
    85f4:	2980652e 	bgeu	r5,r6,878c <__udivdi3+0x1dc>
    85f8:	00bfffd4 	movui	r2,65535
    85fc:	1180b436 	bltu	r2,r6,88d0 <__udivdi3+0x320>
    8600:	00803fc4 	movi	r2,255
    8604:	11816636 	bltu	r2,r6,8ba0 <__udivdi3+0x5f0>
    8608:	0005883a 	mov	r2,zero
    860c:	0007883a 	mov	r3,zero
    8610:	3084d83a 	srl	r2,r6,r2
    8614:	01000074 	movhi	r4,1
    8618:	21354904 	addi	r4,r4,-10972
    861c:	2085883a 	add	r2,r4,r2
    8620:	10800003 	ldbu	r2,0(r2)
    8624:	10c7883a 	add	r3,r2,r3
    8628:	00800804 	movi	r2,32
    862c:	10c5c83a 	sub	r2,r2,r3
    8630:	10000526 	beq	r2,zero,8648 <__udivdi3+0x98>
    8634:	88a2983a 	sll	r17,r17,r2
    8638:	90c6d83a 	srl	r3,r18,r3
    863c:	30a0983a 	sll	r16,r6,r2
    8640:	90a6983a 	sll	r19,r18,r2
    8644:	88e8b03a 	or	r20,r17,r3
    8648:	8022d43a 	srli	r17,r16,16
    864c:	a009883a 	mov	r4,r20
    8650:	857fffcc 	andi	r21,r16,65535
    8654:	880b883a 	mov	r5,r17
    8658:	0000df80 	call	df8 <__umodsi3>
    865c:	a009883a 	mov	r4,r20
    8660:	880b883a 	mov	r5,r17
    8664:	102d883a 	mov	r22,r2
    8668:	0000df00 	call	df0 <__udivsi3>
    866c:	1009883a 	mov	r4,r2
    8670:	a80b883a 	mov	r5,r21
    8674:	1025883a 	mov	r18,r2
    8678:	0000e000 	call	e00 <__mulsi3>
    867c:	1009883a 	mov	r4,r2
    8680:	b006943a 	slli	r3,r22,16
    8684:	9804d43a 	srli	r2,r19,16
    8688:	1886b03a 	or	r3,r3,r2
    868c:	1900052e 	bgeu	r3,r4,86a4 <__udivdi3+0xf4>
    8690:	1c07883a 	add	r3,r3,r16
    8694:	90bfffc4 	addi	r2,r18,-1
    8698:	1c000136 	bltu	r3,r16,86a0 <__udivdi3+0xf0>
    869c:	19015536 	bltu	r3,r4,8bf4 <__udivdi3+0x644>
    86a0:	1025883a 	mov	r18,r2
    86a4:	1929c83a 	sub	r20,r3,r4
    86a8:	880b883a 	mov	r5,r17
    86ac:	a009883a 	mov	r4,r20
    86b0:	0000df80 	call	df8 <__umodsi3>
    86b4:	102d883a 	mov	r22,r2
    86b8:	880b883a 	mov	r5,r17
    86bc:	a009883a 	mov	r4,r20
    86c0:	b02c943a 	slli	r22,r22,16
    86c4:	0000df00 	call	df0 <__udivsi3>
    86c8:	1009883a 	mov	r4,r2
    86cc:	a80b883a 	mov	r5,r21
    86d0:	9cffffcc 	andi	r19,r19,65535
    86d4:	1023883a 	mov	r17,r2
    86d8:	b4e6b03a 	or	r19,r22,r19
    86dc:	0000e000 	call	e00 <__mulsi3>
    86e0:	9880052e 	bgeu	r19,r2,86f8 <__udivdi3+0x148>
    86e4:	9c27883a 	add	r19,r19,r16
    86e8:	88ffffc4 	addi	r3,r17,-1
    86ec:	9c011436 	bltu	r19,r16,8b40 <__udivdi3+0x590>
    86f0:	9881132e 	bgeu	r19,r2,8b40 <__udivdi3+0x590>
    86f4:	8c7fff84 	addi	r17,r17,-2
    86f8:	9004943a 	slli	r2,r18,16
    86fc:	0007883a 	mov	r3,zero
    8700:	8884b03a 	or	r2,r17,r2
    8704:	00001506 	br	875c <__udivdi3+0x1ac>
    8708:	29c06a36 	bltu	r5,r7,88b4 <__udivdi3+0x304>
    870c:	00bfffd4 	movui	r2,65535
    8710:	11c06a2e 	bgeu	r2,r7,88bc <__udivdi3+0x30c>
    8714:	00804034 	movhi	r2,256
    8718:	10bfffc4 	addi	r2,r2,-1
    871c:	11c11436 	bltu	r2,r7,8b70 <__udivdi3+0x5c0>
    8720:	00c00404 	movi	r3,16
    8724:	180b883a 	mov	r5,r3
    8728:	38c6d83a 	srl	r3,r7,r3
    872c:	01000074 	movhi	r4,1
    8730:	21354904 	addi	r4,r4,-10972
    8734:	04000804 	movi	r16,32
    8738:	20c7883a 	add	r3,r4,r3
    873c:	18800003 	ldbu	r2,0(r3)
    8740:	1145883a 	add	r2,r2,r5
    8744:	80a1c83a 	sub	r16,r16,r2
    8748:	80006e1e 	bne	r16,zero,8904 <__udivdi3+0x354>
    874c:	0007883a 	mov	r3,zero
    8750:	3c406a36 	bltu	r7,r17,88fc <__udivdi3+0x34c>
    8754:	9180692e 	bgeu	r18,r6,88fc <__udivdi3+0x34c>
    8758:	0005883a 	mov	r2,zero
    875c:	dfc00a17 	ldw	ra,40(sp)
    8760:	df000917 	ldw	fp,36(sp)
    8764:	ddc00817 	ldw	r23,32(sp)
    8768:	dd800717 	ldw	r22,28(sp)
    876c:	dd400617 	ldw	r21,24(sp)
    8770:	dd000517 	ldw	r20,20(sp)
    8774:	dcc00417 	ldw	r19,16(sp)
    8778:	dc800317 	ldw	r18,12(sp)
    877c:	dc400217 	ldw	r17,8(sp)
    8780:	dc000117 	ldw	r16,4(sp)
    8784:	dec00b04 	addi	sp,sp,44
    8788:	f800283a 	ret
    878c:	3000041e 	bne	r6,zero,87a0 <__udivdi3+0x1f0>
    8790:	01000044 	movi	r4,1
    8794:	000b883a 	mov	r5,zero
    8798:	0000df00 	call	df0 <__udivsi3>
    879c:	1021883a 	mov	r16,r2
    87a0:	00bfffd4 	movui	r2,65535
    87a4:	1400502e 	bgeu	r2,r16,88e8 <__udivdi3+0x338>
    87a8:	00804034 	movhi	r2,256
    87ac:	10bfffc4 	addi	r2,r2,-1
    87b0:	1400f536 	bltu	r2,r16,8b88 <__udivdi3+0x5d8>
    87b4:	00800404 	movi	r2,16
    87b8:	1007883a 	mov	r3,r2
    87bc:	8084d83a 	srl	r2,r16,r2
    87c0:	01000074 	movhi	r4,1
    87c4:	21354904 	addi	r4,r4,-10972
    87c8:	2085883a 	add	r2,r4,r2
    87cc:	10800003 	ldbu	r2,0(r2)
    87d0:	10c7883a 	add	r3,r2,r3
    87d4:	00800804 	movi	r2,32
    87d8:	10c5c83a 	sub	r2,r2,r3
    87dc:	1000a01e 	bne	r2,zero,8a60 <__udivdi3+0x4b0>
    87e0:	8028d43a 	srli	r20,r16,16
    87e4:	8c23c83a 	sub	r17,r17,r16
    87e8:	857fffcc 	andi	r21,r16,65535
    87ec:	00c00044 	movi	r3,1
    87f0:	8809883a 	mov	r4,r17
    87f4:	a00b883a 	mov	r5,r20
    87f8:	d8c00015 	stw	r3,0(sp)
    87fc:	0000df80 	call	df8 <__umodsi3>
    8800:	8809883a 	mov	r4,r17
    8804:	a00b883a 	mov	r5,r20
    8808:	102d883a 	mov	r22,r2
    880c:	0000df00 	call	df0 <__udivsi3>
    8810:	1009883a 	mov	r4,r2
    8814:	a80b883a 	mov	r5,r21
    8818:	1025883a 	mov	r18,r2
    881c:	0000e000 	call	e00 <__mulsi3>
    8820:	1009883a 	mov	r4,r2
    8824:	b00c943a 	slli	r6,r22,16
    8828:	9804d43a 	srli	r2,r19,16
    882c:	d8c00017 	ldw	r3,0(sp)
    8830:	308cb03a 	or	r6,r6,r2
    8834:	3100052e 	bgeu	r6,r4,884c <__udivdi3+0x29c>
    8838:	340d883a 	add	r6,r6,r16
    883c:	90bfffc4 	addi	r2,r18,-1
    8840:	34000136 	bltu	r6,r16,8848 <__udivdi3+0x298>
    8844:	3100e836 	bltu	r6,r4,8be8 <__udivdi3+0x638>
    8848:	1025883a 	mov	r18,r2
    884c:	3123c83a 	sub	r17,r6,r4
    8850:	8809883a 	mov	r4,r17
    8854:	a00b883a 	mov	r5,r20
    8858:	d8c00015 	stw	r3,0(sp)
    885c:	0000df80 	call	df8 <__umodsi3>
    8860:	102d883a 	mov	r22,r2
    8864:	8809883a 	mov	r4,r17
    8868:	a00b883a 	mov	r5,r20
    886c:	b02c943a 	slli	r22,r22,16
    8870:	0000df00 	call	df0 <__udivsi3>
    8874:	1009883a 	mov	r4,r2
    8878:	a80b883a 	mov	r5,r21
    887c:	9cffffcc 	andi	r19,r19,65535
    8880:	1023883a 	mov	r17,r2
    8884:	b4e6b03a 	or	r19,r22,r19
    8888:	0000e000 	call	e00 <__mulsi3>
    888c:	d8c00017 	ldw	r3,0(sp)
    8890:	9880052e 	bgeu	r19,r2,88a8 <__udivdi3+0x2f8>
    8894:	9c27883a 	add	r19,r19,r16
    8898:	893fffc4 	addi	r4,r17,-1
    889c:	9c00aa36 	bltu	r19,r16,8b48 <__udivdi3+0x598>
    88a0:	9880a92e 	bgeu	r19,r2,8b48 <__udivdi3+0x598>
    88a4:	8c7fff84 	addi	r17,r17,-2
    88a8:	9004943a 	slli	r2,r18,16
    88ac:	8884b03a 	or	r2,r17,r2
    88b0:	003faa06 	br	875c <__udivdi3+0x1ac>
    88b4:	0007883a 	mov	r3,zero
    88b8:	003fa706 	br	8758 <__udivdi3+0x1a8>
    88bc:	00803fc4 	movi	r2,255
    88c0:	11c0ae36 	bltu	r2,r7,8b7c <__udivdi3+0x5cc>
    88c4:	0007883a 	mov	r3,zero
    88c8:	000b883a 	mov	r5,zero
    88cc:	003f9606 	br	8728 <__udivdi3+0x178>
    88d0:	00804034 	movhi	r2,256
    88d4:	10bfffc4 	addi	r2,r2,-1
    88d8:	1180ae36 	bltu	r2,r6,8b94 <__udivdi3+0x5e4>
    88dc:	00800404 	movi	r2,16
    88e0:	1007883a 	mov	r3,r2
    88e4:	003f4a06 	br	8610 <__udivdi3+0x60>
    88e8:	00803fc4 	movi	r2,255
    88ec:	1400af36 	bltu	r2,r16,8bac <__udivdi3+0x5fc>
    88f0:	0005883a 	mov	r2,zero
    88f4:	0007883a 	mov	r3,zero
    88f8:	003fb006 	br	87bc <__udivdi3+0x20c>
    88fc:	00800044 	movi	r2,1
    8900:	003f9606 	br	875c <__udivdi3+0x1ac>
    8904:	3c0e983a 	sll	r7,r7,r16
    8908:	3086d83a 	srl	r3,r6,r2
    890c:	88aed83a 	srl	r23,r17,r2
    8910:	9084d83a 	srl	r2,r18,r2
    8914:	38e6b03a 	or	r19,r7,r3
    8918:	9828d43a 	srli	r20,r19,16
    891c:	8c22983a 	sll	r17,r17,r16
    8920:	b809883a 	mov	r4,r23
    8924:	a00b883a 	mov	r5,r20
    8928:	342a983a 	sll	r21,r6,r16
    892c:	88a2b03a 	or	r17,r17,r2
    8930:	0000df80 	call	df8 <__umodsi3>
    8934:	b809883a 	mov	r4,r23
    8938:	a00b883a 	mov	r5,r20
    893c:	1039883a 	mov	fp,r2
    8940:	9dbfffcc 	andi	r22,r19,65535
    8944:	0000df00 	call	df0 <__udivsi3>
    8948:	1009883a 	mov	r4,r2
    894c:	b00b883a 	mov	r5,r22
    8950:	102f883a 	mov	r23,r2
    8954:	0000e000 	call	e00 <__mulsi3>
    8958:	1009883a 	mov	r4,r2
    895c:	e00e943a 	slli	r7,fp,16
    8960:	8804d43a 	srli	r2,r17,16
    8964:	388eb03a 	or	r7,r7,r2
    8968:	3900042e 	bgeu	r7,r4,897c <__udivdi3+0x3cc>
    896c:	3ccf883a 	add	r7,r7,r19
    8970:	b8bfffc4 	addi	r2,r23,-1
    8974:	3cc0942e 	bgeu	r7,r19,8bc8 <__udivdi3+0x618>
    8978:	102f883a 	mov	r23,r2
    897c:	3939c83a 	sub	fp,r7,r4
    8980:	a00b883a 	mov	r5,r20
    8984:	e009883a 	mov	r4,fp
    8988:	0000df80 	call	df8 <__umodsi3>
    898c:	a00b883a 	mov	r5,r20
    8990:	e009883a 	mov	r4,fp
    8994:	d8800015 	stw	r2,0(sp)
    8998:	0000df00 	call	df0 <__udivsi3>
    899c:	1009883a 	mov	r4,r2
    89a0:	b00b883a 	mov	r5,r22
    89a4:	1029883a 	mov	r20,r2
    89a8:	0000e000 	call	e00 <__mulsi3>
    89ac:	d8c00017 	ldw	r3,0(sp)
    89b0:	8c7fffcc 	andi	r17,r17,65535
    89b4:	1806943a 	slli	r3,r3,16
    89b8:	1c46b03a 	or	r3,r3,r17
    89bc:	1880042e 	bgeu	r3,r2,89d0 <__udivdi3+0x420>
    89c0:	1cc7883a 	add	r3,r3,r19
    89c4:	a13fffc4 	addi	r4,r20,-1
    89c8:	1cc07b2e 	bgeu	r3,r19,8bb8 <__udivdi3+0x608>
    89cc:	2029883a 	mov	r20,r4
    89d0:	b82e943a 	slli	r23,r23,16
    89d4:	a822d43a 	srli	r17,r21,16
    89d8:	ad7fffcc 	andi	r21,r21,65535
    89dc:	a5e8b03a 	or	r20,r20,r23
    89e0:	a5bfffcc 	andi	r22,r20,65535
    89e4:	b009883a 	mov	r4,r22
    89e8:	a80b883a 	mov	r5,r21
    89ec:	18afc83a 	sub	r23,r3,r2
    89f0:	a026d43a 	srli	r19,r20,16
    89f4:	0000e000 	call	e00 <__mulsi3>
    89f8:	b009883a 	mov	r4,r22
    89fc:	880b883a 	mov	r5,r17
    8a00:	1039883a 	mov	fp,r2
    8a04:	0000e000 	call	e00 <__mulsi3>
    8a08:	a80b883a 	mov	r5,r21
    8a0c:	9809883a 	mov	r4,r19
    8a10:	102d883a 	mov	r22,r2
    8a14:	0000e000 	call	e00 <__mulsi3>
    8a18:	9809883a 	mov	r4,r19
    8a1c:	880b883a 	mov	r5,r17
    8a20:	102b883a 	mov	r21,r2
    8a24:	0000e000 	call	e00 <__mulsi3>
    8a28:	100b883a 	mov	r5,r2
    8a2c:	e004d43a 	srli	r2,fp,16
    8a30:	ad89883a 	add	r4,r21,r22
    8a34:	2089883a 	add	r4,r4,r2
    8a38:	2540022e 	bgeu	r4,r21,8a44 <__udivdi3+0x494>
    8a3c:	00800074 	movhi	r2,1
    8a40:	288b883a 	add	r5,r5,r2
    8a44:	2004d43a 	srli	r2,r4,16
    8a48:	288b883a 	add	r5,r5,r2
    8a4c:	b9404536 	bltu	r23,r5,8b64 <__udivdi3+0x5b4>
    8a50:	b9403f26 	beq	r23,r5,8b50 <__udivdi3+0x5a0>
    8a54:	a005883a 	mov	r2,r20
    8a58:	0007883a 	mov	r3,zero
    8a5c:	003f3f06 	br	875c <__udivdi3+0x1ac>
    8a60:	80a0983a 	sll	r16,r16,r2
    8a64:	88eed83a 	srl	r23,r17,r3
    8a68:	90c6d83a 	srl	r3,r18,r3
    8a6c:	8028d43a 	srli	r20,r16,16
    8a70:	88a2983a 	sll	r17,r17,r2
    8a74:	b809883a 	mov	r4,r23
    8a78:	a00b883a 	mov	r5,r20
    8a7c:	88ecb03a 	or	r22,r17,r3
    8a80:	90a6983a 	sll	r19,r18,r2
    8a84:	0000df80 	call	df8 <__umodsi3>
    8a88:	b809883a 	mov	r4,r23
    8a8c:	a00b883a 	mov	r5,r20
    8a90:	1023883a 	mov	r17,r2
    8a94:	857fffcc 	andi	r21,r16,65535
    8a98:	0000df00 	call	df0 <__udivsi3>
    8a9c:	1009883a 	mov	r4,r2
    8aa0:	a80b883a 	mov	r5,r21
    8aa4:	102f883a 	mov	r23,r2
    8aa8:	0000e000 	call	e00 <__mulsi3>
    8aac:	1009883a 	mov	r4,r2
    8ab0:	880a943a 	slli	r5,r17,16
    8ab4:	b004d43a 	srli	r2,r22,16
    8ab8:	288ab03a 	or	r5,r5,r2
    8abc:	2900062e 	bgeu	r5,r4,8ad8 <__udivdi3+0x528>
    8ac0:	2c0b883a 	add	r5,r5,r16
    8ac4:	b8bfffc4 	addi	r2,r23,-1
    8ac8:	2c004536 	bltu	r5,r16,8be0 <__udivdi3+0x630>
    8acc:	2900442e 	bgeu	r5,r4,8be0 <__udivdi3+0x630>
    8ad0:	bdffff84 	addi	r23,r23,-2
    8ad4:	2c0b883a 	add	r5,r5,r16
    8ad8:	2925c83a 	sub	r18,r5,r4
    8adc:	9009883a 	mov	r4,r18
    8ae0:	a00b883a 	mov	r5,r20
    8ae4:	0000df80 	call	df8 <__umodsi3>
    8ae8:	1023883a 	mov	r17,r2
    8aec:	9009883a 	mov	r4,r18
    8af0:	a00b883a 	mov	r5,r20
    8af4:	8822943a 	slli	r17,r17,16
    8af8:	0000df00 	call	df0 <__udivsi3>
    8afc:	1009883a 	mov	r4,r2
    8b00:	a80b883a 	mov	r5,r21
    8b04:	b5bfffcc 	andi	r22,r22,65535
    8b08:	1025883a 	mov	r18,r2
    8b0c:	8da2b03a 	or	r17,r17,r22
    8b10:	0000e000 	call	e00 <__mulsi3>
    8b14:	8880062e 	bgeu	r17,r2,8b30 <__udivdi3+0x580>
    8b18:	8c23883a 	add	r17,r17,r16
    8b1c:	90ffffc4 	addi	r3,r18,-1
    8b20:	8c002d36 	bltu	r17,r16,8bd8 <__udivdi3+0x628>
    8b24:	88802c2e 	bgeu	r17,r2,8bd8 <__udivdi3+0x628>
    8b28:	94bfff84 	addi	r18,r18,-2
    8b2c:	8c23883a 	add	r17,r17,r16
    8b30:	b806943a 	slli	r3,r23,16
    8b34:	88a3c83a 	sub	r17,r17,r2
    8b38:	90c6b03a 	or	r3,r18,r3
    8b3c:	003f2c06 	br	87f0 <__udivdi3+0x240>
    8b40:	1823883a 	mov	r17,r3
    8b44:	003eec06 	br	86f8 <__udivdi3+0x148>
    8b48:	2023883a 	mov	r17,r4
    8b4c:	003f5606 	br	88a8 <__udivdi3+0x2f8>
    8b50:	2008943a 	slli	r4,r4,16
    8b54:	9420983a 	sll	r16,r18,r16
    8b58:	e73fffcc 	andi	fp,fp,65535
    8b5c:	2709883a 	add	r4,r4,fp
    8b60:	813fbc2e 	bgeu	r16,r4,8a54 <__udivdi3+0x4a4>
    8b64:	a0bfffc4 	addi	r2,r20,-1
    8b68:	0007883a 	mov	r3,zero
    8b6c:	003efb06 	br	875c <__udivdi3+0x1ac>
    8b70:	00c00604 	movi	r3,24
    8b74:	180b883a 	mov	r5,r3
    8b78:	003eeb06 	br	8728 <__udivdi3+0x178>
    8b7c:	00c00204 	movi	r3,8
    8b80:	180b883a 	mov	r5,r3
    8b84:	003ee806 	br	8728 <__udivdi3+0x178>
    8b88:	00800604 	movi	r2,24
    8b8c:	1007883a 	mov	r3,r2
    8b90:	003f0a06 	br	87bc <__udivdi3+0x20c>
    8b94:	00800604 	movi	r2,24
    8b98:	1007883a 	mov	r3,r2
    8b9c:	003e9c06 	br	8610 <__udivdi3+0x60>
    8ba0:	00800204 	movi	r2,8
    8ba4:	1007883a 	mov	r3,r2
    8ba8:	003e9906 	br	8610 <__udivdi3+0x60>
    8bac:	00800204 	movi	r2,8
    8bb0:	1007883a 	mov	r3,r2
    8bb4:	003f0106 	br	87bc <__udivdi3+0x20c>
    8bb8:	18bf842e 	bgeu	r3,r2,89cc <__udivdi3+0x41c>
    8bbc:	a53fff84 	addi	r20,r20,-2
    8bc0:	1cc7883a 	add	r3,r3,r19
    8bc4:	003f8206 	br	89d0 <__udivdi3+0x420>
    8bc8:	393f6b2e 	bgeu	r7,r4,8978 <__udivdi3+0x3c8>
    8bcc:	bdffff84 	addi	r23,r23,-2
    8bd0:	3ccf883a 	add	r7,r7,r19
    8bd4:	003f6906 	br	897c <__udivdi3+0x3cc>
    8bd8:	1825883a 	mov	r18,r3
    8bdc:	003fd406 	br	8b30 <__udivdi3+0x580>
    8be0:	102f883a 	mov	r23,r2
    8be4:	003fbc06 	br	8ad8 <__udivdi3+0x528>
    8be8:	94bfff84 	addi	r18,r18,-2
    8bec:	340d883a 	add	r6,r6,r16
    8bf0:	003f1606 	br	884c <__udivdi3+0x29c>
    8bf4:	94bfff84 	addi	r18,r18,-2
    8bf8:	1c07883a 	add	r3,r3,r16
    8bfc:	003ea906 	br	86a4 <__udivdi3+0xf4>

00008c00 <__umoddi3>:
    8c00:	defff304 	addi	sp,sp,-52
    8c04:	dd000715 	stw	r20,28(sp)
    8c08:	dcc00615 	stw	r19,24(sp)
    8c0c:	dc800515 	stw	r18,20(sp)
    8c10:	dc400415 	stw	r17,16(sp)
    8c14:	dc000315 	stw	r16,12(sp)
    8c18:	dfc00c15 	stw	ra,48(sp)
    8c1c:	df000b15 	stw	fp,44(sp)
    8c20:	ddc00a15 	stw	r23,40(sp)
    8c24:	dd800915 	stw	r22,36(sp)
    8c28:	dd400815 	stw	r21,32(sp)
    8c2c:	2025883a 	mov	r18,r4
    8c30:	2823883a 	mov	r17,r5
    8c34:	3021883a 	mov	r16,r6
    8c38:	2027883a 	mov	r19,r4
    8c3c:	2829883a 	mov	r20,r5
    8c40:	38003a1e 	bne	r7,zero,8d2c <__umoddi3+0x12c>
    8c44:	2980522e 	bgeu	r5,r6,8d90 <__umoddi3+0x190>
    8c48:	00bfffd4 	movui	r2,65535
    8c4c:	1180a436 	bltu	r2,r6,8ee0 <__umoddi3+0x2e0>
    8c50:	00803fc4 	movi	r2,255
    8c54:	11816036 	bltu	r2,r6,91d8 <__umoddi3+0x5d8>
    8c58:	0005883a 	mov	r2,zero
    8c5c:	0009883a 	mov	r4,zero
    8c60:	3084d83a 	srl	r2,r6,r2
    8c64:	00c00074 	movhi	r3,1
    8c68:	18f54904 	addi	r3,r3,-10972
    8c6c:	05400804 	movi	r21,32
    8c70:	1885883a 	add	r2,r3,r2
    8c74:	10800003 	ldbu	r2,0(r2)
    8c78:	1109883a 	add	r4,r2,r4
    8c7c:	a92bc83a 	sub	r21,r21,r4
    8c80:	a8010e26 	beq	r21,zero,90bc <__umoddi3+0x4bc>
    8c84:	8d62983a 	sll	r17,r17,r21
    8c88:	9108d83a 	srl	r4,r18,r4
    8c8c:	3560983a 	sll	r16,r6,r21
    8c90:	9566983a 	sll	r19,r18,r21
    8c94:	8928b03a 	or	r20,r17,r4
    8c98:	8022d43a 	srli	r17,r16,16
    8c9c:	a009883a 	mov	r4,r20
    8ca0:	84bfffcc 	andi	r18,r16,65535
    8ca4:	880b883a 	mov	r5,r17
    8ca8:	0000df80 	call	df8 <__umodsi3>
    8cac:	a009883a 	mov	r4,r20
    8cb0:	880b883a 	mov	r5,r17
    8cb4:	102d883a 	mov	r22,r2
    8cb8:	0000df00 	call	df0 <__udivsi3>
    8cbc:	1009883a 	mov	r4,r2
    8cc0:	900b883a 	mov	r5,r18
    8cc4:	0000e000 	call	e00 <__mulsi3>
    8cc8:	1009883a 	mov	r4,r2
    8ccc:	b006943a 	slli	r3,r22,16
    8cd0:	9804d43a 	srli	r2,r19,16
    8cd4:	1886b03a 	or	r3,r3,r2
    8cd8:	1900042e 	bgeu	r3,r4,8cec <__umoddi3+0xec>
    8cdc:	1c07883a 	add	r3,r3,r16
    8ce0:	1c000236 	bltu	r3,r16,8cec <__umoddi3+0xec>
    8ce4:	1900012e 	bgeu	r3,r4,8cec <__umoddi3+0xec>
    8ce8:	1c07883a 	add	r3,r3,r16
    8cec:	1929c83a 	sub	r20,r3,r4
    8cf0:	a009883a 	mov	r4,r20
    8cf4:	880b883a 	mov	r5,r17
    8cf8:	0000df80 	call	df8 <__umodsi3>
    8cfc:	102d883a 	mov	r22,r2
    8d00:	a009883a 	mov	r4,r20
    8d04:	880b883a 	mov	r5,r17
    8d08:	b02c943a 	slli	r22,r22,16
    8d0c:	0000df00 	call	df0 <__udivsi3>
    8d10:	1009883a 	mov	r4,r2
    8d14:	900b883a 	mov	r5,r18
    8d18:	9cffffcc 	andi	r19,r19,65535
    8d1c:	0000e000 	call	e00 <__mulsi3>
    8d20:	b4e6b03a 	or	r19,r22,r19
    8d24:	9880572e 	bgeu	r19,r2,8e84 <__umoddi3+0x284>
    8d28:	00005206 	br	8e74 <__umoddi3+0x274>
    8d2c:	29c05936 	bltu	r5,r7,8e94 <__umoddi3+0x294>
    8d30:	00bfffd4 	movui	r2,65535
    8d34:	11c0652e 	bgeu	r2,r7,8ecc <__umoddi3+0x2cc>
    8d38:	00804034 	movhi	r2,256
    8d3c:	10bfffc4 	addi	r2,r2,-1
    8d40:	11c11936 	bltu	r2,r7,91a8 <__umoddi3+0x5a8>
    8d44:	00c00404 	movi	r3,16
    8d48:	1827883a 	mov	r19,r3
    8d4c:	38c6d83a 	srl	r3,r7,r3
    8d50:	01000074 	movhi	r4,1
    8d54:	21354904 	addi	r4,r4,-10972
    8d58:	04000804 	movi	r16,32
    8d5c:	20c7883a 	add	r3,r4,r3
    8d60:	18800003 	ldbu	r2,0(r3)
    8d64:	14e7883a 	add	r19,r2,r19
    8d68:	84e1c83a 	sub	r16,r16,r19
    8d6c:	8000671e 	bne	r16,zero,8f0c <__umoddi3+0x30c>
    8d70:	3c400136 	bltu	r7,r17,8d78 <__umoddi3+0x178>
    8d74:	91812536 	bltu	r18,r6,920c <__umoddi3+0x60c>
    8d78:	9185c83a 	sub	r2,r18,r6
    8d7c:	89e3c83a 	sub	r17,r17,r7
    8d80:	90a5803a 	cmpltu	r18,r18,r2
    8d84:	8ca9c83a 	sub	r20,r17,r18
    8d88:	a007883a 	mov	r3,r20
    8d8c:	00004306 	br	8e9c <__umoddi3+0x29c>
    8d90:	3000041e 	bne	r6,zero,8da4 <__umoddi3+0x1a4>
    8d94:	01000044 	movi	r4,1
    8d98:	000b883a 	mov	r5,zero
    8d9c:	0000df00 	call	df0 <__udivsi3>
    8da0:	1021883a 	mov	r16,r2
    8da4:	00bfffd4 	movui	r2,65535
    8da8:	1400532e 	bgeu	r2,r16,8ef8 <__umoddi3+0x2f8>
    8dac:	00804034 	movhi	r2,256
    8db0:	10bfffc4 	addi	r2,r2,-1
    8db4:	14010536 	bltu	r2,r16,91cc <__umoddi3+0x5cc>
    8db8:	00800404 	movi	r2,16
    8dbc:	1007883a 	mov	r3,r2
    8dc0:	8084d83a 	srl	r2,r16,r2
    8dc4:	01000074 	movhi	r4,1
    8dc8:	21354904 	addi	r4,r4,-10972
    8dcc:	05400804 	movi	r21,32
    8dd0:	2085883a 	add	r2,r4,r2
    8dd4:	10800003 	ldbu	r2,0(r2)
    8dd8:	10c7883a 	add	r3,r2,r3
    8ddc:	a8ebc83a 	sub	r21,r21,r3
    8de0:	a800b81e 	bne	r21,zero,90c4 <__umoddi3+0x4c4>
    8de4:	8028d43a 	srli	r20,r16,16
    8de8:	8c23c83a 	sub	r17,r17,r16
    8dec:	85bfffcc 	andi	r22,r16,65535
    8df0:	8809883a 	mov	r4,r17
    8df4:	a00b883a 	mov	r5,r20
    8df8:	0000df80 	call	df8 <__umodsi3>
    8dfc:	8809883a 	mov	r4,r17
    8e00:	a00b883a 	mov	r5,r20
    8e04:	1025883a 	mov	r18,r2
    8e08:	0000df00 	call	df0 <__udivsi3>
    8e0c:	1009883a 	mov	r4,r2
    8e10:	b00b883a 	mov	r5,r22
    8e14:	0000e000 	call	e00 <__mulsi3>
    8e18:	1009883a 	mov	r4,r2
    8e1c:	9006943a 	slli	r3,r18,16
    8e20:	9804d43a 	srli	r2,r19,16
    8e24:	1886b03a 	or	r3,r3,r2
    8e28:	1900032e 	bgeu	r3,r4,8e38 <__umoddi3+0x238>
    8e2c:	1c07883a 	add	r3,r3,r16
    8e30:	1c000136 	bltu	r3,r16,8e38 <__umoddi3+0x238>
    8e34:	1900f336 	bltu	r3,r4,9204 <__umoddi3+0x604>
    8e38:	1923c83a 	sub	r17,r3,r4
    8e3c:	8809883a 	mov	r4,r17
    8e40:	a00b883a 	mov	r5,r20
    8e44:	0000df80 	call	df8 <__umodsi3>
    8e48:	102f883a 	mov	r23,r2
    8e4c:	8809883a 	mov	r4,r17
    8e50:	a00b883a 	mov	r5,r20
    8e54:	b82e943a 	slli	r23,r23,16
    8e58:	0000df00 	call	df0 <__udivsi3>
    8e5c:	1009883a 	mov	r4,r2
    8e60:	b00b883a 	mov	r5,r22
    8e64:	9cffffcc 	andi	r19,r19,65535
    8e68:	0000e000 	call	e00 <__mulsi3>
    8e6c:	bce6b03a 	or	r19,r23,r19
    8e70:	9880042e 	bgeu	r19,r2,8e84 <__umoddi3+0x284>
    8e74:	9c27883a 	add	r19,r19,r16
    8e78:	9c000236 	bltu	r19,r16,8e84 <__umoddi3+0x284>
    8e7c:	9880012e 	bgeu	r19,r2,8e84 <__umoddi3+0x284>
    8e80:	9c27883a 	add	r19,r19,r16
    8e84:	9885c83a 	sub	r2,r19,r2
    8e88:	1544d83a 	srl	r2,r2,r21
    8e8c:	0007883a 	mov	r3,zero
    8e90:	00000206 	br	8e9c <__umoddi3+0x29c>
    8e94:	2005883a 	mov	r2,r4
    8e98:	2807883a 	mov	r3,r5
    8e9c:	dfc00c17 	ldw	ra,48(sp)
    8ea0:	df000b17 	ldw	fp,44(sp)
    8ea4:	ddc00a17 	ldw	r23,40(sp)
    8ea8:	dd800917 	ldw	r22,36(sp)
    8eac:	dd400817 	ldw	r21,32(sp)
    8eb0:	dd000717 	ldw	r20,28(sp)
    8eb4:	dcc00617 	ldw	r19,24(sp)
    8eb8:	dc800517 	ldw	r18,20(sp)
    8ebc:	dc400417 	ldw	r17,16(sp)
    8ec0:	dc000317 	ldw	r16,12(sp)
    8ec4:	dec00d04 	addi	sp,sp,52
    8ec8:	f800283a 	ret
    8ecc:	00803fc4 	movi	r2,255
    8ed0:	11c0b236 	bltu	r2,r7,919c <__umoddi3+0x59c>
    8ed4:	0007883a 	mov	r3,zero
    8ed8:	0027883a 	mov	r19,zero
    8edc:	003f9b06 	br	8d4c <__umoddi3+0x14c>
    8ee0:	00804034 	movhi	r2,256
    8ee4:	10bfffc4 	addi	r2,r2,-1
    8ee8:	1180b236 	bltu	r2,r6,91b4 <__umoddi3+0x5b4>
    8eec:	00800404 	movi	r2,16
    8ef0:	1009883a 	mov	r4,r2
    8ef4:	003f5a06 	br	8c60 <__umoddi3+0x60>
    8ef8:	00803fc4 	movi	r2,255
    8efc:	1400b036 	bltu	r2,r16,91c0 <__umoddi3+0x5c0>
    8f00:	0005883a 	mov	r2,zero
    8f04:	0007883a 	mov	r3,zero
    8f08:	003fad06 	br	8dc0 <__umoddi3+0x1c0>
    8f0c:	34c4d83a 	srl	r2,r6,r19
    8f10:	3c0e983a 	sll	r7,r7,r16
    8f14:	8cf8d83a 	srl	fp,r17,r19
    8f18:	8c22983a 	sll	r17,r17,r16
    8f1c:	38a8b03a 	or	r20,r7,r2
    8f20:	a02ad43a 	srli	r21,r20,16
    8f24:	94c4d83a 	srl	r2,r18,r19
    8f28:	e009883a 	mov	r4,fp
    8f2c:	a80b883a 	mov	r5,r21
    8f30:	342c983a 	sll	r22,r6,r16
    8f34:	88a2b03a 	or	r17,r17,r2
    8f38:	0000df80 	call	df8 <__umodsi3>
    8f3c:	e009883a 	mov	r4,fp
    8f40:	a80b883a 	mov	r5,r21
    8f44:	a5ffffcc 	andi	r23,r20,65535
    8f48:	d8800215 	stw	r2,8(sp)
    8f4c:	0000df00 	call	df0 <__udivsi3>
    8f50:	1009883a 	mov	r4,r2
    8f54:	b80b883a 	mov	r5,r23
    8f58:	1039883a 	mov	fp,r2
    8f5c:	0000e000 	call	e00 <__mulsi3>
    8f60:	d8c00217 	ldw	r3,8(sp)
    8f64:	1009883a 	mov	r4,r2
    8f68:	8804d43a 	srli	r2,r17,16
    8f6c:	1806943a 	slli	r3,r3,16
    8f70:	9424983a 	sll	r18,r18,r16
    8f74:	1886b03a 	or	r3,r3,r2
    8f78:	1900042e 	bgeu	r3,r4,8f8c <__umoddi3+0x38c>
    8f7c:	1d07883a 	add	r3,r3,r20
    8f80:	e0bfffc4 	addi	r2,fp,-1
    8f84:	1d009b2e 	bgeu	r3,r20,91f4 <__umoddi3+0x5f4>
    8f88:	1039883a 	mov	fp,r2
    8f8c:	1907c83a 	sub	r3,r3,r4
    8f90:	1809883a 	mov	r4,r3
    8f94:	a80b883a 	mov	r5,r21
    8f98:	d8c00215 	stw	r3,8(sp)
    8f9c:	0000df80 	call	df8 <__umodsi3>
    8fa0:	d8c00217 	ldw	r3,8(sp)
    8fa4:	a80b883a 	mov	r5,r21
    8fa8:	d8800015 	stw	r2,0(sp)
    8fac:	1809883a 	mov	r4,r3
    8fb0:	0000df00 	call	df0 <__udivsi3>
    8fb4:	1009883a 	mov	r4,r2
    8fb8:	b80b883a 	mov	r5,r23
    8fbc:	102b883a 	mov	r21,r2
    8fc0:	0000e000 	call	e00 <__mulsi3>
    8fc4:	d9c00017 	ldw	r7,0(sp)
    8fc8:	8c7fffcc 	andi	r17,r17,65535
    8fcc:	380e943a 	slli	r7,r7,16
    8fd0:	3c4eb03a 	or	r7,r7,r17
    8fd4:	3880042e 	bgeu	r7,r2,8fe8 <__umoddi3+0x3e8>
    8fd8:	3d0f883a 	add	r7,r7,r20
    8fdc:	a8ffffc4 	addi	r3,r21,-1
    8fe0:	3d00802e 	bgeu	r7,r20,91e4 <__umoddi3+0x5e4>
    8fe4:	182b883a 	mov	r21,r3
    8fe8:	e038943a 	slli	fp,fp,16
    8fec:	b010d43a 	srli	r8,r22,16
    8ff0:	b1bfffcc 	andi	r6,r22,65535
    8ff4:	af2ab03a 	or	r21,r21,fp
    8ff8:	a82ed43a 	srli	r23,r21,16
    8ffc:	ad7fffcc 	andi	r21,r21,65535
    9000:	300b883a 	mov	r5,r6
    9004:	a809883a 	mov	r4,r21
    9008:	38a3c83a 	sub	r17,r7,r2
    900c:	d9800115 	stw	r6,4(sp)
    9010:	da000015 	stw	r8,0(sp)
    9014:	0000e000 	call	e00 <__mulsi3>
    9018:	da000017 	ldw	r8,0(sp)
    901c:	a809883a 	mov	r4,r21
    9020:	1039883a 	mov	fp,r2
    9024:	400b883a 	mov	r5,r8
    9028:	da000215 	stw	r8,8(sp)
    902c:	0000e000 	call	e00 <__mulsi3>
    9030:	d9800117 	ldw	r6,4(sp)
    9034:	b809883a 	mov	r4,r23
    9038:	d8800015 	stw	r2,0(sp)
    903c:	300b883a 	mov	r5,r6
    9040:	0000e000 	call	e00 <__mulsi3>
    9044:	d8c00217 	ldw	r3,8(sp)
    9048:	b809883a 	mov	r4,r23
    904c:	102b883a 	mov	r21,r2
    9050:	180b883a 	mov	r5,r3
    9054:	0000e000 	call	e00 <__mulsi3>
    9058:	d9c00017 	ldw	r7,0(sp)
    905c:	1007883a 	mov	r3,r2
    9060:	e004d43a 	srli	r2,fp,16
    9064:	a9c9883a 	add	r4,r21,r7
    9068:	2089883a 	add	r4,r4,r2
    906c:	2540022e 	bgeu	r4,r21,9078 <__umoddi3+0x478>
    9070:	00800074 	movhi	r2,1
    9074:	1887883a 	add	r3,r3,r2
    9078:	2004d43a 	srli	r2,r4,16
    907c:	2008943a 	slli	r4,r4,16
    9080:	e73fffcc 	andi	fp,fp,65535
    9084:	1887883a 	add	r3,r3,r2
    9088:	2709883a 	add	r4,r4,fp
    908c:	88c03d36 	bltu	r17,r3,9184 <__umoddi3+0x584>
    9090:	88c06126 	beq	r17,r3,9218 <__umoddi3+0x618>
    9094:	88c7c83a 	sub	r3,r17,r3
    9098:	202d883a 	mov	r22,r4
    909c:	95adc83a 	sub	r22,r18,r22
    90a0:	95a5803a 	cmpltu	r18,r18,r22
    90a4:	1c87c83a 	sub	r3,r3,r18
    90a8:	1cc4983a 	sll	r2,r3,r19
    90ac:	b42cd83a 	srl	r22,r22,r16
    90b0:	1c06d83a 	srl	r3,r3,r16
    90b4:	1584b03a 	or	r2,r2,r22
    90b8:	003f7806 	br	8e9c <__umoddi3+0x29c>
    90bc:	002b883a 	mov	r21,zero
    90c0:	003ef506 	br	8c98 <__umoddi3+0x98>
    90c4:	8560983a 	sll	r16,r16,r21
    90c8:	88e6d83a 	srl	r19,r17,r3
    90cc:	90c6d83a 	srl	r3,r18,r3
    90d0:	8028d43a 	srli	r20,r16,16
    90d4:	8d62983a 	sll	r17,r17,r21
    90d8:	9809883a 	mov	r4,r19
    90dc:	a00b883a 	mov	r5,r20
    90e0:	88eeb03a 	or	r23,r17,r3
    90e4:	0000df80 	call	df8 <__umodsi3>
    90e8:	9809883a 	mov	r4,r19
    90ec:	a00b883a 	mov	r5,r20
    90f0:	1023883a 	mov	r17,r2
    90f4:	85bfffcc 	andi	r22,r16,65535
    90f8:	0000df00 	call	df0 <__udivsi3>
    90fc:	1009883a 	mov	r4,r2
    9100:	b00b883a 	mov	r5,r22
    9104:	0000e000 	call	e00 <__mulsi3>
    9108:	1007883a 	mov	r3,r2
    910c:	8808943a 	slli	r4,r17,16
    9110:	b804d43a 	srli	r2,r23,16
    9114:	9566983a 	sll	r19,r18,r21
    9118:	2088b03a 	or	r4,r4,r2
    911c:	20c0042e 	bgeu	r4,r3,9130 <__umoddi3+0x530>
    9120:	2409883a 	add	r4,r4,r16
    9124:	24000236 	bltu	r4,r16,9130 <__umoddi3+0x530>
    9128:	20c0012e 	bgeu	r4,r3,9130 <__umoddi3+0x530>
    912c:	2409883a 	add	r4,r4,r16
    9130:	20e5c83a 	sub	r18,r4,r3
    9134:	9009883a 	mov	r4,r18
    9138:	a00b883a 	mov	r5,r20
    913c:	0000df80 	call	df8 <__umodsi3>
    9140:	1023883a 	mov	r17,r2
    9144:	9009883a 	mov	r4,r18
    9148:	a00b883a 	mov	r5,r20
    914c:	8822943a 	slli	r17,r17,16
    9150:	0000df00 	call	df0 <__udivsi3>
    9154:	1009883a 	mov	r4,r2
    9158:	b00b883a 	mov	r5,r22
    915c:	bdffffcc 	andi	r23,r23,65535
    9160:	0000e000 	call	e00 <__mulsi3>
    9164:	8de2b03a 	or	r17,r17,r23
    9168:	8880042e 	bgeu	r17,r2,917c <__umoddi3+0x57c>
    916c:	8c23883a 	add	r17,r17,r16
    9170:	8c000236 	bltu	r17,r16,917c <__umoddi3+0x57c>
    9174:	8880012e 	bgeu	r17,r2,917c <__umoddi3+0x57c>
    9178:	8c23883a 	add	r17,r17,r16
    917c:	88a3c83a 	sub	r17,r17,r2
    9180:	003f1b06 	br	8df0 <__umoddi3+0x1f0>
    9184:	25adc83a 	sub	r22,r4,r22
    9188:	1d07c83a 	sub	r3,r3,r20
    918c:	2589803a 	cmpltu	r4,r4,r22
    9190:	1907c83a 	sub	r3,r3,r4
    9194:	88c7c83a 	sub	r3,r17,r3
    9198:	003fc006 	br	909c <__umoddi3+0x49c>
    919c:	00c00204 	movi	r3,8
    91a0:	1827883a 	mov	r19,r3
    91a4:	003ee906 	br	8d4c <__umoddi3+0x14c>
    91a8:	00c00604 	movi	r3,24
    91ac:	1827883a 	mov	r19,r3
    91b0:	003ee606 	br	8d4c <__umoddi3+0x14c>
    91b4:	00800604 	movi	r2,24
    91b8:	1009883a 	mov	r4,r2
    91bc:	003ea806 	br	8c60 <__umoddi3+0x60>
    91c0:	00800204 	movi	r2,8
    91c4:	1007883a 	mov	r3,r2
    91c8:	003efd06 	br	8dc0 <__umoddi3+0x1c0>
    91cc:	00800604 	movi	r2,24
    91d0:	1007883a 	mov	r3,r2
    91d4:	003efa06 	br	8dc0 <__umoddi3+0x1c0>
    91d8:	00800204 	movi	r2,8
    91dc:	1009883a 	mov	r4,r2
    91e0:	003e9f06 	br	8c60 <__umoddi3+0x60>
    91e4:	38bf7f2e 	bgeu	r7,r2,8fe4 <__umoddi3+0x3e4>
    91e8:	ad7fff84 	addi	r21,r21,-2
    91ec:	3d0f883a 	add	r7,r7,r20
    91f0:	003f7d06 	br	8fe8 <__umoddi3+0x3e8>
    91f4:	193f642e 	bgeu	r3,r4,8f88 <__umoddi3+0x388>
    91f8:	e73fff84 	addi	fp,fp,-2
    91fc:	1d07883a 	add	r3,r3,r20
    9200:	003f6206 	br	8f8c <__umoddi3+0x38c>
    9204:	1c07883a 	add	r3,r3,r16
    9208:	003f0b06 	br	8e38 <__umoddi3+0x238>
    920c:	9005883a 	mov	r2,r18
    9210:	a007883a 	mov	r3,r20
    9214:	003f2106 	br	8e9c <__umoddi3+0x29c>
    9218:	913fda36 	bltu	r18,r4,9184 <__umoddi3+0x584>
    921c:	202d883a 	mov	r22,r4
    9220:	0007883a 	mov	r3,zero
    9224:	003f9d06 	br	909c <__umoddi3+0x49c>

00009228 <_fpadd_parts>:
    9228:	2005883a 	mov	r2,r4
    922c:	21000017 	ldw	r4,0(r4)
    9230:	01c00044 	movi	r7,1
    9234:	3900622e 	bgeu	r7,r4,93c0 <_fpadd_parts+0x198>
    9238:	28c00017 	ldw	r3,0(r5)
    923c:	38c05f2e 	bgeu	r7,r3,93bc <_fpadd_parts+0x194>
    9240:	01c00104 	movi	r7,4
    9244:	21c0c626 	beq	r4,r7,9560 <_fpadd_parts+0x338>
    9248:	19c05c26 	beq	r3,r7,93bc <_fpadd_parts+0x194>
    924c:	01c00084 	movi	r7,2
    9250:	19c06b26 	beq	r3,r7,9400 <_fpadd_parts+0x1d8>
    9254:	21c05926 	beq	r4,r7,93bc <_fpadd_parts+0x194>
    9258:	11c00217 	ldw	r7,8(r2)
    925c:	2ac00217 	ldw	r11,8(r5)
    9260:	13000317 	ldw	r12,12(r2)
    9264:	13400417 	ldw	r13,16(r2)
    9268:	3ac9c83a 	sub	r4,r7,r11
    926c:	2a000317 	ldw	r8,12(r5)
    9270:	2a400417 	ldw	r9,16(r5)
    9274:	2015883a 	mov	r10,r4
    9278:	20007516 	blt	r4,zero,9450 <_fpadd_parts+0x228>
    927c:	00c00fc4 	movi	r3,63
    9280:	1a805016 	blt	r3,r10,93c4 <_fpadd_parts+0x19c>
    9284:	0100870e 	bge	zero,r4,94a4 <_fpadd_parts+0x27c>
    9288:	50fff804 	addi	r3,r10,-32
    928c:	18009916 	blt	r3,zero,94f4 <_fpadd_parts+0x2cc>
    9290:	48d6d83a 	srl	r11,r9,r3
    9294:	001d883a 	mov	r14,zero
    9298:	18009e16 	blt	r3,zero,9514 <_fpadd_parts+0x2ec>
    929c:	01000044 	movi	r4,1
    92a0:	20c6983a 	sll	r3,r4,r3
    92a4:	0015883a 	mov	r10,zero
    92a8:	513fffc4 	addi	r4,r10,-1
    92ac:	2295403a 	cmpgeu	r10,r4,r10
    92b0:	1a87c83a 	sub	r3,r3,r10
    92b4:	1a52703a 	and	r9,r3,r9
    92b8:	2210703a 	and	r8,r4,r8
    92bc:	4250b03a 	or	r8,r8,r9
    92c0:	4010c03a 	cmpne	r8,r8,zero
    92c4:	42d0b03a 	or	r8,r8,r11
    92c8:	7013883a 	mov	r9,r14
    92cc:	11000117 	ldw	r4,4(r2)
    92d0:	28800117 	ldw	r2,4(r5)
    92d4:	20804126 	beq	r4,r2,93dc <_fpadd_parts+0x1b4>
    92d8:	20006326 	beq	r4,zero,9468 <_fpadd_parts+0x240>
    92dc:	4305c83a 	sub	r2,r8,r12
    92e0:	4091803a 	cmpltu	r8,r8,r2
    92e4:	4b47c83a 	sub	r3,r9,r13
    92e8:	1a07c83a 	sub	r3,r3,r8
    92ec:	18006316 	blt	r3,zero,947c <_fpadd_parts+0x254>
    92f0:	30000115 	stw	zero,4(r6)
    92f4:	31c00215 	stw	r7,8(r6)
    92f8:	30800315 	stw	r2,12(r6)
    92fc:	30c00415 	stw	r3,16(r6)
    9300:	11ffffc4 	addi	r7,r2,-1
    9304:	388b403a 	cmpgeu	r5,r7,r2
    9308:	194bc83a 	sub	r5,r3,r5
    930c:	01040034 	movhi	r4,4096
    9310:	213fffc4 	addi	r4,r4,-1
    9314:	21401736 	bltu	r4,r5,9374 <_fpadd_parts+0x14c>
    9318:	29008226 	beq	r5,r4,9524 <_fpadd_parts+0x2fc>
    931c:	31400217 	ldw	r5,8(r6)
    9320:	02840034 	movhi	r10,4096
    9324:	52bfffc4 	addi	r10,r10,-1
    9328:	033fff84 	movi	r12,-2
    932c:	297fffc4 	addi	r5,r5,-1
    9330:	00000106 	br	9338 <_fpadd_parts+0x110>
    9334:	3a804a26 	beq	r7,r10,9460 <_fpadd_parts+0x238>
    9338:	1089883a 	add	r4,r2,r2
    933c:	2091803a 	cmpltu	r8,r4,r2
    9340:	18c7883a 	add	r3,r3,r3
    9344:	227fffc4 	addi	r9,r4,-1
    9348:	40d1883a 	add	r8,r8,r3
    934c:	490f403a 	cmpgeu	r7,r9,r4
    9350:	41cfc83a 	sub	r7,r8,r7
    9354:	2817883a 	mov	r11,r5
    9358:	2005883a 	mov	r2,r4
    935c:	4007883a 	mov	r3,r8
    9360:	297fffc4 	addi	r5,r5,-1
    9364:	51fff32e 	bgeu	r10,r7,9334 <_fpadd_parts+0x10c>
    9368:	31000315 	stw	r4,12(r6)
    936c:	32000415 	stw	r8,16(r6)
    9370:	32c00215 	stw	r11,8(r6)
    9374:	010000c4 	movi	r4,3
    9378:	31000015 	stw	r4,0(r6)
    937c:	01080034 	movhi	r4,8192
    9380:	213fffc4 	addi	r4,r4,-1
    9384:	20c00b2e 	bgeu	r4,r3,93b4 <_fpadd_parts+0x18c>
    9388:	180e97fa 	slli	r7,r3,31
    938c:	1008d07a 	srli	r4,r2,1
    9390:	31400217 	ldw	r5,8(r6)
    9394:	1806d07a 	srli	r3,r3,1
    9398:	1080004c 	andi	r2,r2,1
    939c:	3908b03a 	or	r4,r7,r4
    93a0:	1108b03a 	or	r4,r2,r4
    93a4:	29400044 	addi	r5,r5,1
    93a8:	31000315 	stw	r4,12(r6)
    93ac:	30c00415 	stw	r3,16(r6)
    93b0:	31400215 	stw	r5,8(r6)
    93b4:	3005883a 	mov	r2,r6
    93b8:	f800283a 	ret
    93bc:	2805883a 	mov	r2,r5
    93c0:	f800283a 	ret
    93c4:	59c01e0e 	bge	r11,r7,9440 <_fpadd_parts+0x218>
    93c8:	11000117 	ldw	r4,4(r2)
    93cc:	28800117 	ldw	r2,4(r5)
    93d0:	0011883a 	mov	r8,zero
    93d4:	0013883a 	mov	r9,zero
    93d8:	20bfbf1e 	bne	r4,r2,92d8 <_fpadd_parts+0xb0>
    93dc:	4305883a 	add	r2,r8,r12
    93e0:	1207803a 	cmpltu	r3,r2,r8
    93e4:	4b53883a 	add	r9,r9,r13
    93e8:	1a47883a 	add	r3,r3,r9
    93ec:	31000115 	stw	r4,4(r6)
    93f0:	31c00215 	stw	r7,8(r6)
    93f4:	30800315 	stw	r2,12(r6)
    93f8:	30c00415 	stw	r3,16(r6)
    93fc:	003fdd06 	br	9374 <_fpadd_parts+0x14c>
    9400:	20ffef1e 	bne	r4,r3,93c0 <_fpadd_parts+0x198>
    9404:	31000015 	stw	r4,0(r6)
    9408:	10c00117 	ldw	r3,4(r2)
    940c:	30c00115 	stw	r3,4(r6)
    9410:	10c00217 	ldw	r3,8(r2)
    9414:	11000117 	ldw	r4,4(r2)
    9418:	29400117 	ldw	r5,4(r5)
    941c:	30c00215 	stw	r3,8(r6)
    9420:	10c00317 	ldw	r3,12(r2)
    9424:	2908703a 	and	r4,r5,r4
    9428:	30c00315 	stw	r3,12(r6)
    942c:	10c00417 	ldw	r3,16(r2)
    9430:	31000115 	stw	r4,4(r6)
    9434:	3005883a 	mov	r2,r6
    9438:	30c00415 	stw	r3,16(r6)
    943c:	f800283a 	ret
    9440:	580f883a 	mov	r7,r11
    9444:	0019883a 	mov	r12,zero
    9448:	001b883a 	mov	r13,zero
    944c:	003f9f06 	br	92cc <_fpadd_parts+0xa4>
    9450:	0115c83a 	sub	r10,zero,r4
    9454:	00c00fc4 	movi	r3,63
    9458:	1abfda16 	blt	r3,r10,93c4 <_fpadd_parts+0x19c>
    945c:	003f8906 	br	9284 <_fpadd_parts+0x5c>
    9460:	627fb52e 	bgeu	r12,r9,9338 <_fpadd_parts+0x110>
    9464:	003fc006 	br	9368 <_fpadd_parts+0x140>
    9468:	6205c83a 	sub	r2,r12,r8
    946c:	6099803a 	cmpltu	r12,r12,r2
    9470:	6a47c83a 	sub	r3,r13,r9
    9474:	1b07c83a 	sub	r3,r3,r12
    9478:	183f9d0e 	bge	r3,zero,92f0 <_fpadd_parts+0xc8>
    947c:	0085c83a 	sub	r2,zero,r2
    9480:	1008c03a 	cmpne	r4,r2,zero
    9484:	00c7c83a 	sub	r3,zero,r3
    9488:	1907c83a 	sub	r3,r3,r4
    948c:	01000044 	movi	r4,1
    9490:	31000115 	stw	r4,4(r6)
    9494:	31c00215 	stw	r7,8(r6)
    9498:	30800315 	stw	r2,12(r6)
    949c:	30c00415 	stw	r3,16(r6)
    94a0:	003f9706 	br	9300 <_fpadd_parts+0xd8>
    94a4:	203f8926 	beq	r4,zero,92cc <_fpadd_parts+0xa4>
    94a8:	50fff804 	addi	r3,r10,-32
    94ac:	3a8f883a 	add	r7,r7,r10
    94b0:	18002316 	blt	r3,zero,9540 <_fpadd_parts+0x318>
    94b4:	68d6d83a 	srl	r11,r13,r3
    94b8:	001d883a 	mov	r14,zero
    94bc:	18001c16 	blt	r3,zero,9530 <_fpadd_parts+0x308>
    94c0:	01000044 	movi	r4,1
    94c4:	20c6983a 	sll	r3,r4,r3
    94c8:	0015883a 	mov	r10,zero
    94cc:	513fffc4 	addi	r4,r10,-1
    94d0:	2295403a 	cmpgeu	r10,r4,r10
    94d4:	1a87c83a 	sub	r3,r3,r10
    94d8:	1b5a703a 	and	r13,r3,r13
    94dc:	2318703a 	and	r12,r4,r12
    94e0:	6358b03a 	or	r12,r12,r13
    94e4:	6018c03a 	cmpne	r12,r12,zero
    94e8:	62d8b03a 	or	r12,r12,r11
    94ec:	701b883a 	mov	r13,r14
    94f0:	003f7606 	br	92cc <_fpadd_parts+0xa4>
    94f4:	4808907a 	slli	r4,r9,1
    94f8:	02c007c4 	movi	r11,31
    94fc:	5a97c83a 	sub	r11,r11,r10
    9500:	22c8983a 	sll	r4,r4,r11
    9504:	4296d83a 	srl	r11,r8,r10
    9508:	4a9cd83a 	srl	r14,r9,r10
    950c:	22d6b03a 	or	r11,r4,r11
    9510:	003f6106 	br	9298 <_fpadd_parts+0x70>
    9514:	00c00044 	movi	r3,1
    9518:	1a94983a 	sll	r10,r3,r10
    951c:	0007883a 	mov	r3,zero
    9520:	003f6106 	br	92a8 <_fpadd_parts+0x80>
    9524:	013fff84 	movi	r4,-2
    9528:	21ff7c2e 	bgeu	r4,r7,931c <_fpadd_parts+0xf4>
    952c:	003f9106 	br	9374 <_fpadd_parts+0x14c>
    9530:	00c00044 	movi	r3,1
    9534:	1a94983a 	sll	r10,r3,r10
    9538:	0007883a 	mov	r3,zero
    953c:	003fe306 	br	94cc <_fpadd_parts+0x2a4>
    9540:	6816907a 	slli	r11,r13,1
    9544:	010007c4 	movi	r4,31
    9548:	2289c83a 	sub	r4,r4,r10
    954c:	5908983a 	sll	r4,r11,r4
    9550:	6296d83a 	srl	r11,r12,r10
    9554:	6a9cd83a 	srl	r14,r13,r10
    9558:	22d6b03a 	or	r11,r4,r11
    955c:	003fd706 	br	94bc <_fpadd_parts+0x294>
    9560:	193f971e 	bne	r3,r4,93c0 <_fpadd_parts+0x198>
    9564:	11000117 	ldw	r4,4(r2)
    9568:	28c00117 	ldw	r3,4(r5)
    956c:	20ff9426 	beq	r4,r3,93c0 <_fpadd_parts+0x198>
    9570:	00800074 	movhi	r2,1
    9574:	10b54404 	addi	r2,r2,-10992
    9578:	f800283a 	ret

0000957c <__adddf3>:
    957c:	deffec04 	addi	sp,sp,-80
    9580:	d9001115 	stw	r4,68(sp)
    9584:	d9401215 	stw	r5,72(sp)
    9588:	d9001104 	addi	r4,sp,68
    958c:	d9400a04 	addi	r5,sp,40
    9590:	dfc01315 	stw	ra,76(sp)
    9594:	d9c01015 	stw	r7,64(sp)
    9598:	d9800f15 	stw	r6,60(sp)
    959c:	000a3480 	call	a348 <__unpack_d>
    95a0:	d9000f04 	addi	r4,sp,60
    95a4:	d9400504 	addi	r5,sp,20
    95a8:	000a3480 	call	a348 <__unpack_d>
    95ac:	d9000a04 	addi	r4,sp,40
    95b0:	d9400504 	addi	r5,sp,20
    95b4:	d80d883a 	mov	r6,sp
    95b8:	00092280 	call	9228 <_fpadd_parts>
    95bc:	1009883a 	mov	r4,r2
    95c0:	000a1240 	call	a124 <__pack_d>
    95c4:	dfc01317 	ldw	ra,76(sp)
    95c8:	dec01404 	addi	sp,sp,80
    95cc:	f800283a 	ret

000095d0 <__subdf3>:
    95d0:	deffec04 	addi	sp,sp,-80
    95d4:	d9001115 	stw	r4,68(sp)
    95d8:	d9401215 	stw	r5,72(sp)
    95dc:	d9001104 	addi	r4,sp,68
    95e0:	d9400a04 	addi	r5,sp,40
    95e4:	dfc01315 	stw	ra,76(sp)
    95e8:	d9c01015 	stw	r7,64(sp)
    95ec:	d9800f15 	stw	r6,60(sp)
    95f0:	000a3480 	call	a348 <__unpack_d>
    95f4:	d9000f04 	addi	r4,sp,60
    95f8:	d9400504 	addi	r5,sp,20
    95fc:	000a3480 	call	a348 <__unpack_d>
    9600:	d8800617 	ldw	r2,24(sp)
    9604:	d9000a04 	addi	r4,sp,40
    9608:	d9400504 	addi	r5,sp,20
    960c:	d80d883a 	mov	r6,sp
    9610:	1080005c 	xori	r2,r2,1
    9614:	d8800615 	stw	r2,24(sp)
    9618:	00092280 	call	9228 <_fpadd_parts>
    961c:	1009883a 	mov	r4,r2
    9620:	000a1240 	call	a124 <__pack_d>
    9624:	dfc01317 	ldw	ra,76(sp)
    9628:	dec01404 	addi	sp,sp,80
    962c:	f800283a 	ret

00009630 <__muldf3>:
    9630:	deffe404 	addi	sp,sp,-112
    9634:	d9001115 	stw	r4,68(sp)
    9638:	d9401215 	stw	r5,72(sp)
    963c:	d9001104 	addi	r4,sp,68
    9640:	d9400a04 	addi	r5,sp,40
    9644:	dfc01b15 	stw	ra,108(sp)
    9648:	d9800f15 	stw	r6,60(sp)
    964c:	d9c01015 	stw	r7,64(sp)
    9650:	ddc01a15 	stw	r23,104(sp)
    9654:	dd801915 	stw	r22,100(sp)
    9658:	dd401815 	stw	r21,96(sp)
    965c:	dd001715 	stw	r20,92(sp)
    9660:	dcc01615 	stw	r19,88(sp)
    9664:	dc801515 	stw	r18,84(sp)
    9668:	dc401415 	stw	r17,80(sp)
    966c:	dc001315 	stw	r16,76(sp)
    9670:	000a3480 	call	a348 <__unpack_d>
    9674:	d9000f04 	addi	r4,sp,60
    9678:	d9400504 	addi	r5,sp,20
    967c:	000a3480 	call	a348 <__unpack_d>
    9680:	d8c00a17 	ldw	r3,40(sp)
    9684:	00800044 	movi	r2,1
    9688:	10c01136 	bltu	r2,r3,96d0 <__muldf3+0xa0>
    968c:	d8c00b17 	ldw	r3,44(sp)
    9690:	d8800617 	ldw	r2,24(sp)
    9694:	d9000a04 	addi	r4,sp,40
    9698:	1884c03a 	cmpne	r2,r3,r2
    969c:	d8800b15 	stw	r2,44(sp)
    96a0:	000a1240 	call	a124 <__pack_d>
    96a4:	dfc01b17 	ldw	ra,108(sp)
    96a8:	ddc01a17 	ldw	r23,104(sp)
    96ac:	dd801917 	ldw	r22,100(sp)
    96b0:	dd401817 	ldw	r21,96(sp)
    96b4:	dd001717 	ldw	r20,92(sp)
    96b8:	dcc01617 	ldw	r19,88(sp)
    96bc:	dc801517 	ldw	r18,84(sp)
    96c0:	dc401417 	ldw	r17,80(sp)
    96c4:	dc001317 	ldw	r16,76(sp)
    96c8:	dec01c04 	addi	sp,sp,112
    96cc:	f800283a 	ret
    96d0:	d9000517 	ldw	r4,20(sp)
    96d4:	11000636 	bltu	r2,r4,96f0 <__muldf3+0xc0>
    96d8:	d8800617 	ldw	r2,24(sp)
    96dc:	d8c00b17 	ldw	r3,44(sp)
    96e0:	d9000504 	addi	r4,sp,20
    96e4:	1884c03a 	cmpne	r2,r3,r2
    96e8:	d8800615 	stw	r2,24(sp)
    96ec:	003fec06 	br	96a0 <__muldf3+0x70>
    96f0:	00800104 	movi	r2,4
    96f4:	1880051e 	bne	r3,r2,970c <__muldf3+0xdc>
    96f8:	00800084 	movi	r2,2
    96fc:	20bfe31e 	bne	r4,r2,968c <__muldf3+0x5c>
    9700:	01000074 	movhi	r4,1
    9704:	21354404 	addi	r4,r4,-10992
    9708:	003fe506 	br	96a0 <__muldf3+0x70>
    970c:	2080031e 	bne	r4,r2,971c <__muldf3+0xec>
    9710:	00800084 	movi	r2,2
    9714:	18bffa26 	beq	r3,r2,9700 <__muldf3+0xd0>
    9718:	003fef06 	br	96d8 <__muldf3+0xa8>
    971c:	00800084 	movi	r2,2
    9720:	18bfda26 	beq	r3,r2,968c <__muldf3+0x5c>
    9724:	20bfec26 	beq	r4,r2,96d8 <__muldf3+0xa8>
    9728:	dc000d17 	ldw	r16,52(sp)
    972c:	dd000817 	ldw	r20,32(sp)
    9730:	dc800917 	ldw	r18,36(sp)
    9734:	8009883a 	mov	r4,r16
    9738:	000b883a 	mov	r5,zero
    973c:	a00d883a 	mov	r6,r20
    9740:	000f883a 	mov	r7,zero
    9744:	0009f680 	call	9f68 <__muldi3>
    9748:	dc400e17 	ldw	r17,56(sp)
    974c:	9009883a 	mov	r4,r18
    9750:	800d883a 	mov	r6,r16
    9754:	000b883a 	mov	r5,zero
    9758:	000f883a 	mov	r7,zero
    975c:	102f883a 	mov	r23,r2
    9760:	1827883a 	mov	r19,r3
    9764:	0009f680 	call	9f68 <__muldi3>
    9768:	900d883a 	mov	r6,r18
    976c:	8809883a 	mov	r4,r17
    9770:	000b883a 	mov	r5,zero
    9774:	000f883a 	mov	r7,zero
    9778:	102b883a 	mov	r21,r2
    977c:	1821883a 	mov	r16,r3
    9780:	0009f680 	call	9f68 <__muldi3>
    9784:	8809883a 	mov	r4,r17
    9788:	000b883a 	mov	r5,zero
    978c:	a00d883a 	mov	r6,r20
    9790:	000f883a 	mov	r7,zero
    9794:	102d883a 	mov	r22,r2
    9798:	1825883a 	mov	r18,r3
    979c:	0009f680 	call	9f68 <__muldi3>
    97a0:	154b883a 	add	r5,r2,r21
    97a4:	2889803a 	cmpltu	r4,r5,r2
    97a8:	1c07883a 	add	r3,r3,r16
    97ac:	20c9883a 	add	r4,r4,r3
    97b0:	24004b36 	bltu	r4,r16,98e0 <__muldf3+0x2b0>
    97b4:	8100011e 	bne	r16,r4,97bc <__muldf3+0x18c>
    97b8:	2d404936 	bltu	r5,r21,98e0 <__muldf3+0x2b0>
    97bc:	0011883a 	mov	r8,zero
    97c0:	0007883a 	mov	r3,zero
    97c4:	2ccb883a 	add	r5,r5,r19
    97c8:	b80d883a 	mov	r6,r23
    97cc:	2cc0012e 	bgeu	r5,r19,97d4 <__muldf3+0x1a4>
    97d0:	02000044 	movi	r8,1
    97d4:	258f883a 	add	r7,r4,r22
    97d8:	3909803a 	cmpltu	r4,r7,r4
    97dc:	da400c17 	ldw	r9,48(sp)
    97e0:	2489883a 	add	r4,r4,r18
    97e4:	d8800717 	ldw	r2,28(sp)
    97e8:	20c9883a 	add	r4,r4,r3
    97ec:	da800b17 	ldw	r10,44(sp)
    97f0:	d8c00617 	ldw	r3,24(sp)
    97f4:	3a11883a 	add	r8,r7,r8
    97f8:	4885883a 	add	r2,r9,r2
    97fc:	50c6c03a 	cmpne	r3,r10,r3
    9800:	41cf803a 	cmpltu	r7,r8,r7
    9804:	12400104 	addi	r9,r2,4
    9808:	d8c00115 	stw	r3,4(sp)
    980c:	3909883a 	add	r4,r7,r4
    9810:	da400215 	stw	r9,8(sp)
    9814:	03480034 	movhi	r13,8192
    9818:	6b7fffc4 	addi	r13,r13,-1
    981c:	4007883a 	mov	r3,r8
    9820:	6900102e 	bgeu	r13,r4,9864 <__muldf3+0x234>
    9824:	10800144 	addi	r2,r2,5
    9828:	180ed07a 	srli	r7,r3,1
    982c:	18c0004c 	andi	r3,r3,1
    9830:	201097fa 	slli	r8,r4,31
    9834:	281697fa 	slli	r11,r5,31
    9838:	2008d07a 	srli	r4,r4,1
    983c:	3014d07a 	srli	r10,r6,1
    9840:	2812d07a 	srli	r9,r5,1
    9844:	1019883a 	mov	r12,r2
    9848:	18000226 	beq	r3,zero,9854 <__muldf3+0x224>
    984c:	5a8cb03a 	or	r6,r11,r10
    9850:	49600034 	orhi	r5,r9,32768
    9854:	41c6b03a 	or	r3,r8,r7
    9858:	10800044 	addi	r2,r2,1
    985c:	693ff236 	bltu	r13,r4,9828 <__muldf3+0x1f8>
    9860:	db000215 	stw	r12,8(sp)
    9864:	03440034 	movhi	r13,4096
    9868:	6b7fffc4 	addi	r13,r13,-1
    986c:	69001336 	bltu	r13,r4,98bc <__muldf3+0x28c>
    9870:	d8800217 	ldw	r2,8(sp)
    9874:	10bfffc4 	addi	r2,r2,-1
    9878:	18d3883a 	add	r9,r3,r3
    987c:	48c7803a 	cmpltu	r3,r9,r3
    9880:	2109883a 	add	r4,r4,r4
    9884:	190f883a 	add	r7,r3,r4
    9888:	3191883a 	add	r8,r6,r6
    988c:	4197803a 	cmpltu	r11,r8,r6
    9890:	2955883a 	add	r10,r5,r5
    9894:	1019883a 	mov	r12,r2
    9898:	4807883a 	mov	r3,r9
    989c:	3809883a 	mov	r4,r7
    98a0:	2800010e 	bge	r5,zero,98a8 <__muldf3+0x278>
    98a4:	48c00054 	ori	r3,r9,1
    98a8:	400d883a 	mov	r6,r8
    98ac:	5a8b883a 	add	r5,r11,r10
    98b0:	10bfffc4 	addi	r2,r2,-1
    98b4:	69fff02e 	bgeu	r13,r7,9878 <__muldf3+0x248>
    98b8:	db000215 	stw	r12,8(sp)
    98bc:	18803fcc 	andi	r2,r3,255
    98c0:	01c02004 	movi	r7,128
    98c4:	11c00926 	beq	r2,r7,98ec <__muldf3+0x2bc>
    98c8:	008000c4 	movi	r2,3
    98cc:	d9000415 	stw	r4,16(sp)
    98d0:	d8c00315 	stw	r3,12(sp)
    98d4:	d8800015 	stw	r2,0(sp)
    98d8:	d809883a 	mov	r4,sp
    98dc:	003f7006 	br	96a0 <__muldf3+0x70>
    98e0:	0011883a 	mov	r8,zero
    98e4:	00c00044 	movi	r3,1
    98e8:	003fb606 	br	97c4 <__muldf3+0x194>
    98ec:	19c0400c 	andi	r7,r3,256
    98f0:	383ff51e 	bne	r7,zero,98c8 <__muldf3+0x298>
    98f4:	314ab03a 	or	r5,r6,r5
    98f8:	283ff326 	beq	r5,zero,98c8 <__muldf3+0x298>
    98fc:	1885883a 	add	r2,r3,r2
    9900:	10cb803a 	cmpltu	r5,r2,r3
    9904:	00ffc004 	movi	r3,-256
    9908:	10c6703a 	and	r3,r2,r3
    990c:	2909883a 	add	r4,r5,r4
    9910:	003fed06 	br	98c8 <__muldf3+0x298>

00009914 <__divdf3>:
    9914:	defff104 	addi	sp,sp,-60
    9918:	d9000c15 	stw	r4,48(sp)
    991c:	d9400d15 	stw	r5,52(sp)
    9920:	d9000c04 	addi	r4,sp,48
    9924:	d9400504 	addi	r5,sp,20
    9928:	dfc00e15 	stw	ra,56(sp)
    992c:	d9800a15 	stw	r6,40(sp)
    9930:	d9c00b15 	stw	r7,44(sp)
    9934:	000a3480 	call	a348 <__unpack_d>
    9938:	d9000a04 	addi	r4,sp,40
    993c:	d80b883a 	mov	r5,sp
    9940:	000a3480 	call	a348 <__unpack_d>
    9944:	d8c00517 	ldw	r3,20(sp)
    9948:	00800044 	movi	r2,1
    994c:	10c00536 	bltu	r2,r3,9964 <__divdf3+0x50>
    9950:	d9000504 	addi	r4,sp,20
    9954:	000a1240 	call	a124 <__pack_d>
    9958:	dfc00e17 	ldw	ra,56(sp)
    995c:	dec00f04 	addi	sp,sp,60
    9960:	f800283a 	ret
    9964:	d9000017 	ldw	r4,0(sp)
    9968:	11000536 	bltu	r2,r4,9980 <__divdf3+0x6c>
    996c:	d809883a 	mov	r4,sp
    9970:	000a1240 	call	a124 <__pack_d>
    9974:	dfc00e17 	ldw	ra,56(sp)
    9978:	dec00f04 	addi	sp,sp,60
    997c:	f800283a 	ret
    9980:	d9800617 	ldw	r6,24(sp)
    9984:	d9400117 	ldw	r5,4(sp)
    9988:	00800104 	movi	r2,4
    998c:	314af03a 	xor	r5,r6,r5
    9990:	d9400615 	stw	r5,24(sp)
    9994:	18800226 	beq	r3,r2,99a0 <__divdf3+0x8c>
    9998:	01400084 	movi	r5,2
    999c:	1940041e 	bne	r3,r5,99b0 <__divdf3+0x9c>
    99a0:	193feb1e 	bne	r3,r4,9950 <__divdf3+0x3c>
    99a4:	01000074 	movhi	r4,1
    99a8:	21354404 	addi	r4,r4,-10992
    99ac:	003fe906 	br	9954 <__divdf3+0x40>
    99b0:	20803326 	beq	r4,r2,9a80 <__divdf3+0x16c>
    99b4:	21403726 	beq	r4,r5,9a94 <__divdf3+0x180>
    99b8:	d8800217 	ldw	r2,8(sp)
    99bc:	d9000717 	ldw	r4,28(sp)
    99c0:	d8c00917 	ldw	r3,36(sp)
    99c4:	da000417 	ldw	r8,16(sp)
    99c8:	2089c83a 	sub	r4,r4,r2
    99cc:	d9000715 	stw	r4,28(sp)
    99d0:	d8800817 	ldw	r2,32(sp)
    99d4:	dbc00317 	ldw	r15,12(sp)
    99d8:	1a000236 	bltu	r3,r8,99e4 <__divdf3+0xd0>
    99dc:	40c0081e 	bne	r8,r3,9a00 <__divdf3+0xec>
    99e0:	13c0072e 	bgeu	r2,r15,9a00 <__divdf3+0xec>
    99e4:	108b883a 	add	r5,r2,r2
    99e8:	288d803a 	cmpltu	r6,r5,r2
    99ec:	18c7883a 	add	r3,r3,r3
    99f0:	213fffc4 	addi	r4,r4,-1
    99f4:	2805883a 	mov	r2,r5
    99f8:	30c7883a 	add	r3,r6,r3
    99fc:	d9000715 	stw	r4,28(sp)
    9a00:	01400f44 	movi	r5,61
    9a04:	000f883a 	mov	r7,zero
    9a08:	01040034 	movhi	r4,4096
    9a0c:	0019883a 	mov	r12,zero
    9a10:	001b883a 	mov	r13,zero
    9a14:	201697fa 	slli	r11,r4,31
    9a18:	3814d07a 	srli	r10,r7,1
    9a1c:	297fffc4 	addi	r5,r5,-1
    9a20:	1a000936 	bltu	r3,r8,9a48 <__divdf3+0x134>
    9a24:	13cdc83a 	sub	r6,r2,r15
    9a28:	1193803a 	cmpltu	r9,r2,r6
    9a2c:	1a1dc83a 	sub	r14,r3,r8
    9a30:	40c0011e 	bne	r8,r3,9a38 <__divdf3+0x124>
    9a34:	13c00436 	bltu	r2,r15,9a48 <__divdf3+0x134>
    9a38:	3005883a 	mov	r2,r6
    9a3c:	7247c83a 	sub	r3,r14,r9
    9a40:	61d8b03a 	or	r12,r12,r7
    9a44:	691ab03a 	or	r13,r13,r4
    9a48:	108d883a 	add	r6,r2,r2
    9a4c:	3093803a 	cmpltu	r9,r6,r2
    9a50:	18c7883a 	add	r3,r3,r3
    9a54:	5a8eb03a 	or	r7,r11,r10
    9a58:	2008d07a 	srli	r4,r4,1
    9a5c:	3005883a 	mov	r2,r6
    9a60:	48c7883a 	add	r3,r9,r3
    9a64:	283feb1e 	bne	r5,zero,9a14 <__divdf3+0x100>
    9a68:	61003fcc 	andi	r4,r12,255
    9a6c:	01402004 	movi	r5,128
    9a70:	21400b26 	beq	r4,r5,9aa0 <__divdf3+0x18c>
    9a74:	db000815 	stw	r12,32(sp)
    9a78:	db400915 	stw	r13,36(sp)
    9a7c:	003fb406 	br	9950 <__divdf3+0x3c>
    9a80:	d8000815 	stw	zero,32(sp)
    9a84:	d8000915 	stw	zero,36(sp)
    9a88:	d8000715 	stw	zero,28(sp)
    9a8c:	d9000504 	addi	r4,sp,20
    9a90:	003fb006 	br	9954 <__divdf3+0x40>
    9a94:	d8800515 	stw	r2,20(sp)
    9a98:	d9000504 	addi	r4,sp,20
    9a9c:	003fad06 	br	9954 <__divdf3+0x40>
    9aa0:	6140400c 	andi	r5,r12,256
    9aa4:	283ff31e 	bne	r5,zero,9a74 <__divdf3+0x160>
    9aa8:	30c4b03a 	or	r2,r6,r3
    9aac:	103ff126 	beq	r2,zero,9a74 <__divdf3+0x160>
    9ab0:	6109883a 	add	r4,r12,r4
    9ab4:	2305803a 	cmpltu	r2,r4,r12
    9ab8:	033fc004 	movi	r12,-256
    9abc:	2318703a 	and	r12,r4,r12
    9ac0:	135b883a 	add	r13,r2,r13
    9ac4:	003feb06 	br	9a74 <__divdf3+0x160>

00009ac8 <__eqdf2>:
    9ac8:	defff104 	addi	sp,sp,-60
    9acc:	d9000c15 	stw	r4,48(sp)
    9ad0:	d9400d15 	stw	r5,52(sp)
    9ad4:	d9000c04 	addi	r4,sp,48
    9ad8:	d9400504 	addi	r5,sp,20
    9adc:	dfc00e15 	stw	ra,56(sp)
    9ae0:	d9800a15 	stw	r6,40(sp)
    9ae4:	d9c00b15 	stw	r7,44(sp)
    9ae8:	000a3480 	call	a348 <__unpack_d>
    9aec:	d9000a04 	addi	r4,sp,40
    9af0:	d80b883a 	mov	r5,sp
    9af4:	000a3480 	call	a348 <__unpack_d>
    9af8:	d8c00517 	ldw	r3,20(sp)
    9afc:	00800044 	movi	r2,1
    9b00:	10c0052e 	bgeu	r2,r3,9b18 <__eqdf2+0x50>
    9b04:	d8c00017 	ldw	r3,0(sp)
    9b08:	10c0032e 	bgeu	r2,r3,9b18 <__eqdf2+0x50>
    9b0c:	d9000504 	addi	r4,sp,20
    9b10:	d80b883a 	mov	r5,sp
    9b14:	000a44c0 	call	a44c <__fpcmp_parts_d>
    9b18:	dfc00e17 	ldw	ra,56(sp)
    9b1c:	dec00f04 	addi	sp,sp,60
    9b20:	f800283a 	ret

00009b24 <__nedf2>:
    9b24:	defff104 	addi	sp,sp,-60
    9b28:	d9000c15 	stw	r4,48(sp)
    9b2c:	d9400d15 	stw	r5,52(sp)
    9b30:	d9000c04 	addi	r4,sp,48
    9b34:	d9400504 	addi	r5,sp,20
    9b38:	dfc00e15 	stw	ra,56(sp)
    9b3c:	d9800a15 	stw	r6,40(sp)
    9b40:	d9c00b15 	stw	r7,44(sp)
    9b44:	000a3480 	call	a348 <__unpack_d>
    9b48:	d9000a04 	addi	r4,sp,40
    9b4c:	d80b883a 	mov	r5,sp
    9b50:	000a3480 	call	a348 <__unpack_d>
    9b54:	d8c00517 	ldw	r3,20(sp)
    9b58:	00800044 	movi	r2,1
    9b5c:	10c0052e 	bgeu	r2,r3,9b74 <__nedf2+0x50>
    9b60:	d8c00017 	ldw	r3,0(sp)
    9b64:	10c0032e 	bgeu	r2,r3,9b74 <__nedf2+0x50>
    9b68:	d9000504 	addi	r4,sp,20
    9b6c:	d80b883a 	mov	r5,sp
    9b70:	000a44c0 	call	a44c <__fpcmp_parts_d>
    9b74:	dfc00e17 	ldw	ra,56(sp)
    9b78:	dec00f04 	addi	sp,sp,60
    9b7c:	f800283a 	ret

00009b80 <__gtdf2>:
    9b80:	defff104 	addi	sp,sp,-60
    9b84:	d9000c15 	stw	r4,48(sp)
    9b88:	d9400d15 	stw	r5,52(sp)
    9b8c:	d9000c04 	addi	r4,sp,48
    9b90:	d9400504 	addi	r5,sp,20
    9b94:	dfc00e15 	stw	ra,56(sp)
    9b98:	d9800a15 	stw	r6,40(sp)
    9b9c:	d9c00b15 	stw	r7,44(sp)
    9ba0:	000a3480 	call	a348 <__unpack_d>
    9ba4:	d9000a04 	addi	r4,sp,40
    9ba8:	d80b883a 	mov	r5,sp
    9bac:	000a3480 	call	a348 <__unpack_d>
    9bb0:	d8c00517 	ldw	r3,20(sp)
    9bb4:	00800044 	movi	r2,1
    9bb8:	10c0082e 	bgeu	r2,r3,9bdc <__gtdf2+0x5c>
    9bbc:	d8c00017 	ldw	r3,0(sp)
    9bc0:	10c0062e 	bgeu	r2,r3,9bdc <__gtdf2+0x5c>
    9bc4:	d9000504 	addi	r4,sp,20
    9bc8:	d80b883a 	mov	r5,sp
    9bcc:	000a44c0 	call	a44c <__fpcmp_parts_d>
    9bd0:	dfc00e17 	ldw	ra,56(sp)
    9bd4:	dec00f04 	addi	sp,sp,60
    9bd8:	f800283a 	ret
    9bdc:	00bfffc4 	movi	r2,-1
    9be0:	003ffb06 	br	9bd0 <__gtdf2+0x50>

00009be4 <__gedf2>:
    9be4:	defff104 	addi	sp,sp,-60
    9be8:	d9000c15 	stw	r4,48(sp)
    9bec:	d9400d15 	stw	r5,52(sp)
    9bf0:	d9000c04 	addi	r4,sp,48
    9bf4:	d9400504 	addi	r5,sp,20
    9bf8:	dfc00e15 	stw	ra,56(sp)
    9bfc:	d9800a15 	stw	r6,40(sp)
    9c00:	d9c00b15 	stw	r7,44(sp)
    9c04:	000a3480 	call	a348 <__unpack_d>
    9c08:	d9000a04 	addi	r4,sp,40
    9c0c:	d80b883a 	mov	r5,sp
    9c10:	000a3480 	call	a348 <__unpack_d>
    9c14:	d8c00517 	ldw	r3,20(sp)
    9c18:	00800044 	movi	r2,1
    9c1c:	10c0082e 	bgeu	r2,r3,9c40 <__gedf2+0x5c>
    9c20:	d8c00017 	ldw	r3,0(sp)
    9c24:	10c0062e 	bgeu	r2,r3,9c40 <__gedf2+0x5c>
    9c28:	d9000504 	addi	r4,sp,20
    9c2c:	d80b883a 	mov	r5,sp
    9c30:	000a44c0 	call	a44c <__fpcmp_parts_d>
    9c34:	dfc00e17 	ldw	ra,56(sp)
    9c38:	dec00f04 	addi	sp,sp,60
    9c3c:	f800283a 	ret
    9c40:	00bfffc4 	movi	r2,-1
    9c44:	003ffb06 	br	9c34 <__gedf2+0x50>

00009c48 <__ltdf2>:
    9c48:	defff104 	addi	sp,sp,-60
    9c4c:	d9000c15 	stw	r4,48(sp)
    9c50:	d9400d15 	stw	r5,52(sp)
    9c54:	d9000c04 	addi	r4,sp,48
    9c58:	d9400504 	addi	r5,sp,20
    9c5c:	dfc00e15 	stw	ra,56(sp)
    9c60:	d9800a15 	stw	r6,40(sp)
    9c64:	d9c00b15 	stw	r7,44(sp)
    9c68:	000a3480 	call	a348 <__unpack_d>
    9c6c:	d9000a04 	addi	r4,sp,40
    9c70:	d80b883a 	mov	r5,sp
    9c74:	000a3480 	call	a348 <__unpack_d>
    9c78:	d8c00517 	ldw	r3,20(sp)
    9c7c:	00800044 	movi	r2,1
    9c80:	10c0052e 	bgeu	r2,r3,9c98 <__ltdf2+0x50>
    9c84:	d8c00017 	ldw	r3,0(sp)
    9c88:	10c0032e 	bgeu	r2,r3,9c98 <__ltdf2+0x50>
    9c8c:	d9000504 	addi	r4,sp,20
    9c90:	d80b883a 	mov	r5,sp
    9c94:	000a44c0 	call	a44c <__fpcmp_parts_d>
    9c98:	dfc00e17 	ldw	ra,56(sp)
    9c9c:	dec00f04 	addi	sp,sp,60
    9ca0:	f800283a 	ret

00009ca4 <__floatsidf>:
    9ca4:	2004d7fa 	srli	r2,r4,31
    9ca8:	defff904 	addi	sp,sp,-28
    9cac:	00c000c4 	movi	r3,3
    9cb0:	dfc00615 	stw	ra,24(sp)
    9cb4:	dc000515 	stw	r16,20(sp)
    9cb8:	d8c00015 	stw	r3,0(sp)
    9cbc:	d8800115 	stw	r2,4(sp)
    9cc0:	2000081e 	bne	r4,zero,9ce4 <__floatsidf+0x40>
    9cc4:	00800084 	movi	r2,2
    9cc8:	d8800015 	stw	r2,0(sp)
    9ccc:	d809883a 	mov	r4,sp
    9cd0:	000a1240 	call	a124 <__pack_d>
    9cd4:	dfc00617 	ldw	ra,24(sp)
    9cd8:	dc000517 	ldw	r16,20(sp)
    9cdc:	dec00704 	addi	sp,sp,28
    9ce0:	f800283a 	ret
    9ce4:	00c00f04 	movi	r3,60
    9ce8:	d8c00215 	stw	r3,8(sp)
    9cec:	10000f1e 	bne	r2,zero,9d2c <__floatsidf+0x88>
    9cf0:	2021883a 	mov	r16,r4
    9cf4:	8009883a 	mov	r4,r16
    9cf8:	000a0780 	call	a078 <__clzsi2>
    9cfc:	11000744 	addi	r4,r2,29
    9d00:	0100110e 	bge	zero,r4,9d48 <__floatsidf+0xa4>
    9d04:	10ffff44 	addi	r3,r2,-3
    9d08:	18001216 	blt	r3,zero,9d54 <__floatsidf+0xb0>
    9d0c:	80c6983a 	sll	r3,r16,r3
    9d10:	0009883a 	mov	r4,zero
    9d14:	014007c4 	movi	r5,31
    9d18:	2885c83a 	sub	r2,r5,r2
    9d1c:	d9000315 	stw	r4,12(sp)
    9d20:	d8c00415 	stw	r3,16(sp)
    9d24:	d8800215 	stw	r2,8(sp)
    9d28:	003fe806 	br	9ccc <__floatsidf+0x28>
    9d2c:	00a00034 	movhi	r2,32768
    9d30:	20800e26 	beq	r4,r2,9d6c <__floatsidf+0xc8>
    9d34:	0121c83a 	sub	r16,zero,r4
    9d38:	8009883a 	mov	r4,r16
    9d3c:	000a0780 	call	a078 <__clzsi2>
    9d40:	11000744 	addi	r4,r2,29
    9d44:	013fef16 	blt	zero,r4,9d04 <__floatsidf+0x60>
    9d48:	dc000315 	stw	r16,12(sp)
    9d4c:	d8000415 	stw	zero,16(sp)
    9d50:	003fde06 	br	9ccc <__floatsidf+0x28>
    9d54:	800ad07a 	srli	r5,r16,1
    9d58:	00c007c4 	movi	r3,31
    9d5c:	1907c83a 	sub	r3,r3,r4
    9d60:	28c6d83a 	srl	r3,r5,r3
    9d64:	8108983a 	sll	r4,r16,r4
    9d68:	003fea06 	br	9d14 <__floatsidf+0x70>
    9d6c:	0005883a 	mov	r2,zero
    9d70:	00f07834 	movhi	r3,49632
    9d74:	003fd706 	br	9cd4 <__floatsidf+0x30>

00009d78 <__fixdfsi>:
    9d78:	defff804 	addi	sp,sp,-32
    9d7c:	d9000515 	stw	r4,20(sp)
    9d80:	d9400615 	stw	r5,24(sp)
    9d84:	d9000504 	addi	r4,sp,20
    9d88:	d80b883a 	mov	r5,sp
    9d8c:	dfc00715 	stw	ra,28(sp)
    9d90:	000a3480 	call	a348 <__unpack_d>
    9d94:	d8800017 	ldw	r2,0(sp)
    9d98:	00c00084 	movi	r3,2
    9d9c:	10c01c26 	beq	r2,r3,9e10 <__fixdfsi+0x98>
    9da0:	00c00044 	movi	r3,1
    9da4:	18801a2e 	bgeu	r3,r2,9e10 <__fixdfsi+0x98>
    9da8:	00c00104 	movi	r3,4
    9dac:	10c01126 	beq	r2,r3,9df4 <__fixdfsi+0x7c>
    9db0:	d8800217 	ldw	r2,8(sp)
    9db4:	10001616 	blt	r2,zero,9e10 <__fixdfsi+0x98>
    9db8:	00c00784 	movi	r3,30
    9dbc:	18800d16 	blt	r3,r2,9df4 <__fixdfsi+0x7c>
    9dc0:	00c00f04 	movi	r3,60
    9dc4:	1885c83a 	sub	r2,r3,r2
    9dc8:	10fff804 	addi	r3,r2,-32
    9dcc:	d9400317 	ldw	r5,12(sp)
    9dd0:	d9000417 	ldw	r4,16(sp)
    9dd4:	18001616 	blt	r3,zero,9e30 <__fixdfsi+0xb8>
    9dd8:	20c4d83a 	srl	r2,r4,r3
    9ddc:	d8c00117 	ldw	r3,4(sp)
    9de0:	18000126 	beq	r3,zero,9de8 <__fixdfsi+0x70>
    9de4:	0085c83a 	sub	r2,zero,r2
    9de8:	dfc00717 	ldw	ra,28(sp)
    9dec:	dec00804 	addi	sp,sp,32
    9df0:	f800283a 	ret
    9df4:	d8800117 	ldw	r2,4(sp)
    9df8:	1000091e 	bne	r2,zero,9e20 <__fixdfsi+0xa8>
    9dfc:	00a00034 	movhi	r2,32768
    9e00:	10bfffc4 	addi	r2,r2,-1
    9e04:	dfc00717 	ldw	ra,28(sp)
    9e08:	dec00804 	addi	sp,sp,32
    9e0c:	f800283a 	ret
    9e10:	0005883a 	mov	r2,zero
    9e14:	dfc00717 	ldw	ra,28(sp)
    9e18:	dec00804 	addi	sp,sp,32
    9e1c:	f800283a 	ret
    9e20:	00a00034 	movhi	r2,32768
    9e24:	dfc00717 	ldw	ra,28(sp)
    9e28:	dec00804 	addi	sp,sp,32
    9e2c:	f800283a 	ret
    9e30:	2008907a 	slli	r4,r4,1
    9e34:	018007c4 	movi	r6,31
    9e38:	308dc83a 	sub	r6,r6,r2
    9e3c:	2188983a 	sll	r4,r4,r6
    9e40:	2884d83a 	srl	r2,r5,r2
    9e44:	2084b03a 	or	r2,r4,r2
    9e48:	003fe406 	br	9ddc <__fixdfsi+0x64>

00009e4c <__floatunsidf>:
    9e4c:	defff904 	addi	sp,sp,-28
    9e50:	dc000515 	stw	r16,20(sp)
    9e54:	dfc00615 	stw	ra,24(sp)
    9e58:	d8000115 	stw	zero,4(sp)
    9e5c:	2021883a 	mov	r16,r4
    9e60:	20001726 	beq	r4,zero,9ec0 <__floatunsidf+0x74>
    9e64:	008000c4 	movi	r2,3
    9e68:	d8800015 	stw	r2,0(sp)
    9e6c:	00800f04 	movi	r2,60
    9e70:	d8800215 	stw	r2,8(sp)
    9e74:	000a0780 	call	a078 <__clzsi2>
    9e78:	10c00744 	addi	r3,r2,29
    9e7c:	18001816 	blt	r3,zero,9ee0 <__floatunsidf+0x94>
    9e80:	18002d26 	beq	r3,zero,9f38 <__floatunsidf+0xec>
    9e84:	113fff44 	addi	r4,r2,-3
    9e88:	20002e16 	blt	r4,zero,9f44 <__floatunsidf+0xf8>
    9e8c:	8108983a 	sll	r4,r16,r4
    9e90:	0021883a 	mov	r16,zero
    9e94:	014007c4 	movi	r5,31
    9e98:	2885c83a 	sub	r2,r5,r2
    9e9c:	dc000315 	stw	r16,12(sp)
    9ea0:	d9000415 	stw	r4,16(sp)
    9ea4:	d8800215 	stw	r2,8(sp)
    9ea8:	d809883a 	mov	r4,sp
    9eac:	000a1240 	call	a124 <__pack_d>
    9eb0:	dfc00617 	ldw	ra,24(sp)
    9eb4:	dc000517 	ldw	r16,20(sp)
    9eb8:	dec00704 	addi	sp,sp,28
    9ebc:	f800283a 	ret
    9ec0:	00800084 	movi	r2,2
    9ec4:	d809883a 	mov	r4,sp
    9ec8:	d8800015 	stw	r2,0(sp)
    9ecc:	000a1240 	call	a124 <__pack_d>
    9ed0:	dfc00617 	ldw	ra,24(sp)
    9ed4:	dc000517 	ldw	r16,20(sp)
    9ed8:	dec00704 	addi	sp,sp,28
    9edc:	f800283a 	ret
    9ee0:	00c7c83a 	sub	r3,zero,r3
    9ee4:	193ff804 	addi	r4,r3,-32
    9ee8:	20001c16 	blt	r4,zero,9f5c <__floatunsidf+0x110>
    9eec:	000b883a 	mov	r5,zero
    9ef0:	2009d7fa 	srai	r4,r4,31
    9ef4:	80c6d83a 	srl	r3,r16,r3
    9ef8:	297fffc4 	addi	r5,r5,-1
    9efc:	2c20703a 	and	r16,r5,r16
    9f00:	8020c03a 	cmpne	r16,r16,zero
    9f04:	1906703a 	and	r3,r3,r4
    9f08:	010007c4 	movi	r4,31
    9f0c:	80c6b03a 	or	r3,r16,r3
    9f10:	2085c83a 	sub	r2,r4,r2
    9f14:	d809883a 	mov	r4,sp
    9f18:	d8c00315 	stw	r3,12(sp)
    9f1c:	d8000415 	stw	zero,16(sp)
    9f20:	d8800215 	stw	r2,8(sp)
    9f24:	000a1240 	call	a124 <__pack_d>
    9f28:	dfc00617 	ldw	ra,24(sp)
    9f2c:	dc000517 	ldw	r16,20(sp)
    9f30:	dec00704 	addi	sp,sp,28
    9f34:	f800283a 	ret
    9f38:	dc000315 	stw	r16,12(sp)
    9f3c:	d8000415 	stw	zero,16(sp)
    9f40:	003fd906 	br	9ea8 <__floatunsidf+0x5c>
    9f44:	800ad07a 	srli	r5,r16,1
    9f48:	010007c4 	movi	r4,31
    9f4c:	20c9c83a 	sub	r4,r4,r3
    9f50:	2908d83a 	srl	r4,r5,r4
    9f54:	80e0983a 	sll	r16,r16,r3
    9f58:	003fce06 	br	9e94 <__floatunsidf+0x48>
    9f5c:	01400044 	movi	r5,1
    9f60:	28ca983a 	sll	r5,r5,r3
    9f64:	003fe206 	br	9ef0 <__floatunsidf+0xa4>

00009f68 <__muldi3>:
    9f68:	defff604 	addi	sp,sp,-40
    9f6c:	dd400515 	stw	r21,20(sp)
    9f70:	dd000415 	stw	r20,16(sp)
    9f74:	257fffcc 	andi	r21,r4,65535
    9f78:	353fffcc 	andi	r20,r6,65535
    9f7c:	dcc00315 	stw	r19,12(sp)
    9f80:	3026d43a 	srli	r19,r6,16
    9f84:	dd800615 	stw	r22,24(sp)
    9f88:	dc800215 	stw	r18,8(sp)
    9f8c:	dc400115 	stw	r17,4(sp)
    9f90:	2024d43a 	srli	r18,r4,16
    9f94:	2023883a 	mov	r17,r4
    9f98:	282d883a 	mov	r22,r5
    9f9c:	a009883a 	mov	r4,r20
    9fa0:	a80b883a 	mov	r5,r21
    9fa4:	dfc00915 	stw	ra,36(sp)
    9fa8:	df000815 	stw	fp,32(sp)
    9fac:	ddc00715 	stw	r23,28(sp)
    9fb0:	3839883a 	mov	fp,r7
    9fb4:	dc000015 	stw	r16,0(sp)
    9fb8:	3021883a 	mov	r16,r6
    9fbc:	0000e000 	call	e00 <__mulsi3>
    9fc0:	a80b883a 	mov	r5,r21
    9fc4:	9809883a 	mov	r4,r19
    9fc8:	102f883a 	mov	r23,r2
    9fcc:	0000e000 	call	e00 <__mulsi3>
    9fd0:	a009883a 	mov	r4,r20
    9fd4:	900b883a 	mov	r5,r18
    9fd8:	102b883a 	mov	r21,r2
    9fdc:	0000e000 	call	e00 <__mulsi3>
    9fe0:	9809883a 	mov	r4,r19
    9fe4:	900b883a 	mov	r5,r18
    9fe8:	1029883a 	mov	r20,r2
    9fec:	0000e000 	call	e00 <__mulsi3>
    9ff0:	1007883a 	mov	r3,r2
    9ff4:	b804d43a 	srli	r2,r23,16
    9ff8:	a549883a 	add	r4,r20,r21
    9ffc:	2089883a 	add	r4,r4,r2
    a000:	2500022e 	bgeu	r4,r20,a00c <__muldi3+0xa4>
    a004:	00800074 	movhi	r2,1
    a008:	1887883a 	add	r3,r3,r2
    a00c:	200cd43a 	srli	r6,r4,16
    a010:	2004943a 	slli	r2,r4,16
    a014:	e00b883a 	mov	r5,fp
    a018:	8809883a 	mov	r4,r17
    a01c:	bdffffcc 	andi	r23,r23,65535
    a020:	19a3883a 	add	r17,r3,r6
    a024:	15ef883a 	add	r23,r2,r23
    a028:	0000e000 	call	e00 <__mulsi3>
    a02c:	8009883a 	mov	r4,r16
    a030:	b00b883a 	mov	r5,r22
    a034:	1025883a 	mov	r18,r2
    a038:	0000e000 	call	e00 <__mulsi3>
    a03c:	9085883a 	add	r2,r18,r2
    a040:	1447883a 	add	r3,r2,r17
    a044:	b805883a 	mov	r2,r23
    a048:	dfc00917 	ldw	ra,36(sp)
    a04c:	df000817 	ldw	fp,32(sp)
    a050:	ddc00717 	ldw	r23,28(sp)
    a054:	dd800617 	ldw	r22,24(sp)
    a058:	dd400517 	ldw	r21,20(sp)
    a05c:	dd000417 	ldw	r20,16(sp)
    a060:	dcc00317 	ldw	r19,12(sp)
    a064:	dc800217 	ldw	r18,8(sp)
    a068:	dc400117 	ldw	r17,4(sp)
    a06c:	dc000017 	ldw	r16,0(sp)
    a070:	dec00a04 	addi	sp,sp,40
    a074:	f800283a 	ret

0000a078 <__clzsi2>:
    a078:	00bfffd4 	movui	r2,65535
    a07c:	11000b36 	bltu	r2,r4,a0ac <__clzsi2+0x34>
    a080:	00803fc4 	movi	r2,255
    a084:	11001e2e 	bgeu	r2,r4,a100 <__clzsi2+0x88>
    a088:	00c00204 	movi	r3,8
    a08c:	20c8d83a 	srl	r4,r4,r3
    a090:	00c00074 	movhi	r3,1
    a094:	18f54904 	addi	r3,r3,-10972
    a098:	00800604 	movi	r2,24
    a09c:	1909883a 	add	r4,r3,r4
    a0a0:	20c00003 	ldbu	r3,0(r4)
    a0a4:	10c5c83a 	sub	r2,r2,r3
    a0a8:	f800283a 	ret
    a0ac:	00804034 	movhi	r2,256
    a0b0:	10bfffc4 	addi	r2,r2,-1
    a0b4:	11000936 	bltu	r2,r4,a0dc <__clzsi2+0x64>
    a0b8:	00800404 	movi	r2,16
    a0bc:	1007883a 	mov	r3,r2
    a0c0:	20c8d83a 	srl	r4,r4,r3
    a0c4:	00c00074 	movhi	r3,1
    a0c8:	18f54904 	addi	r3,r3,-10972
    a0cc:	1909883a 	add	r4,r3,r4
    a0d0:	20c00003 	ldbu	r3,0(r4)
    a0d4:	10c5c83a 	sub	r2,r2,r3
    a0d8:	f800283a 	ret
    a0dc:	00c00604 	movi	r3,24
    a0e0:	20c8d83a 	srl	r4,r4,r3
    a0e4:	00c00074 	movhi	r3,1
    a0e8:	18f54904 	addi	r3,r3,-10972
    a0ec:	00800204 	movi	r2,8
    a0f0:	1909883a 	add	r4,r3,r4
    a0f4:	20c00003 	ldbu	r3,0(r4)
    a0f8:	10c5c83a 	sub	r2,r2,r3
    a0fc:	f800283a 	ret
    a100:	0007883a 	mov	r3,zero
    a104:	20c8d83a 	srl	r4,r4,r3
    a108:	00c00074 	movhi	r3,1
    a10c:	18f54904 	addi	r3,r3,-10972
    a110:	00800804 	movi	r2,32
    a114:	1909883a 	add	r4,r3,r4
    a118:	20c00003 	ldbu	r3,0(r4)
    a11c:	10c5c83a 	sub	r2,r2,r3
    a120:	f800283a 	ret

0000a124 <__pack_d>:
    a124:	20800017 	ldw	r2,0(r4)
    a128:	defff804 	addi	sp,sp,-32
    a12c:	dcc00315 	stw	r19,12(sp)
    a130:	dc800215 	stw	r18,8(sp)
    a134:	dfc00715 	stw	ra,28(sp)
    a138:	dd800615 	stw	r22,24(sp)
    a13c:	dd400515 	stw	r21,20(sp)
    a140:	dd000415 	stw	r20,16(sp)
    a144:	dc400115 	stw	r17,4(sp)
    a148:	dc000015 	stw	r16,0(sp)
    a14c:	04800044 	movi	r18,1
    a150:	24400317 	ldw	r17,12(r4)
    a154:	24000417 	ldw	r16,16(r4)
    a158:	24c00117 	ldw	r19,4(r4)
    a15c:	9080422e 	bgeu	r18,r2,a268 <__pack_d+0x144>
    a160:	00c00104 	movi	r3,4
    a164:	10c03c26 	beq	r2,r3,a258 <__pack_d+0x134>
    a168:	00c00084 	movi	r3,2
    a16c:	10c01926 	beq	r2,r3,a1d4 <__pack_d+0xb0>
    a170:	8c04b03a 	or	r2,r17,r16
    a174:	10001726 	beq	r2,zero,a1d4 <__pack_d+0xb0>
    a178:	21000217 	ldw	r4,8(r4)
    a17c:	00bf0084 	movi	r2,-1022
    a180:	20804016 	blt	r4,r2,a284 <__pack_d+0x160>
    a184:	0080ffc4 	movi	r2,1023
    a188:	11003316 	blt	r2,r4,a258 <__pack_d+0x134>
    a18c:	88803fcc 	andi	r2,r17,255
    a190:	00c02004 	movi	r3,128
    a194:	10c02926 	beq	r2,r3,a23c <__pack_d+0x118>
    a198:	88801fc4 	addi	r2,r17,127
    a19c:	1463803a 	cmpltu	r17,r2,r17
    a1a0:	8c21883a 	add	r16,r17,r16
    a1a4:	1023883a 	mov	r17,r2
    a1a8:	00880034 	movhi	r2,8192
    a1ac:	10bfffc4 	addi	r2,r2,-1
    a1b0:	14001c36 	bltu	r2,r16,a224 <__pack_d+0x100>
    a1b4:	2100ffc4 	addi	r4,r4,1023
    a1b8:	8006963a 	slli	r3,r16,24
    a1bc:	8804d23a 	srli	r2,r17,8
    a1c0:	8020913a 	slli	r16,r16,4
    a1c4:	2101ffcc 	andi	r4,r4,2047
    a1c8:	1884b03a 	or	r2,r3,r2
    a1cc:	8020d33a 	srli	r16,r16,12
    a1d0:	00000306 	br	a1e0 <__pack_d+0xbc>
    a1d4:	0009883a 	mov	r4,zero
    a1d8:	0005883a 	mov	r2,zero
    a1dc:	0021883a 	mov	r16,zero
    a1e0:	2008953a 	slli	r4,r4,20
    a1e4:	982697fa 	slli	r19,r19,31
    a1e8:	00c00434 	movhi	r3,16
    a1ec:	18ffffc4 	addi	r3,r3,-1
    a1f0:	80e0703a 	and	r16,r16,r3
    a1f4:	8106b03a 	or	r3,r16,r4
    a1f8:	1cc6b03a 	or	r3,r3,r19
    a1fc:	dfc00717 	ldw	ra,28(sp)
    a200:	dd800617 	ldw	r22,24(sp)
    a204:	dd400517 	ldw	r21,20(sp)
    a208:	dd000417 	ldw	r20,16(sp)
    a20c:	dcc00317 	ldw	r19,12(sp)
    a210:	dc800217 	ldw	r18,8(sp)
    a214:	dc400117 	ldw	r17,4(sp)
    a218:	dc000017 	ldw	r16,0(sp)
    a21c:	dec00804 	addi	sp,sp,32
    a220:	f800283a 	ret
    a224:	800697fa 	slli	r3,r16,31
    a228:	8804d07a 	srli	r2,r17,1
    a22c:	21010004 	addi	r4,r4,1024
    a230:	8020d07a 	srli	r16,r16,1
    a234:	18a2b03a 	or	r17,r3,r2
    a238:	003fdf06 	br	a1b8 <__pack_d+0x94>
    a23c:	88c0400c 	andi	r3,r17,256
    a240:	183fd926 	beq	r3,zero,a1a8 <__pack_d+0x84>
    a244:	8885883a 	add	r2,r17,r2
    a248:	1463803a 	cmpltu	r17,r2,r17
    a24c:	8c21883a 	add	r16,r17,r16
    a250:	1023883a 	mov	r17,r2
    a254:	003fd406 	br	a1a8 <__pack_d+0x84>
    a258:	0101ffc4 	movi	r4,2047
    a25c:	0005883a 	mov	r2,zero
    a260:	0021883a 	mov	r16,zero
    a264:	003fde06 	br	a1e0 <__pack_d+0xbc>
    a268:	84000234 	orhi	r16,r16,8
    a26c:	00c00434 	movhi	r3,16
    a270:	18ffffc4 	addi	r3,r3,-1
    a274:	8805883a 	mov	r2,r17
    a278:	80e0703a 	and	r16,r16,r3
    a27c:	0101ffc4 	movi	r4,2047
    a280:	003fd706 	br	a1e0 <__pack_d+0xbc>
    a284:	1129c83a 	sub	r20,r2,r4
    a288:	00800e04 	movi	r2,56
    a28c:	15002716 	blt	r2,r20,a32c <__pack_d+0x208>
    a290:	800b883a 	mov	r5,r16
    a294:	a00d883a 	mov	r6,r20
    a298:	8809883a 	mov	r4,r17
    a29c:	000a51c0 	call	a51c <__lshrdi3>
    a2a0:	9009883a 	mov	r4,r18
    a2a4:	000b883a 	mov	r5,zero
    a2a8:	a00d883a 	mov	r6,r20
    a2ac:	102d883a 	mov	r22,r2
    a2b0:	182b883a 	mov	r21,r3
    a2b4:	000a5600 	call	a560 <__ashldi3>
    a2b8:	1009003a 	cmpeq	r4,r2,zero
    a2bc:	1907c83a 	sub	r3,r3,r4
    a2c0:	10bfffc4 	addi	r2,r2,-1
    a2c4:	1c20703a 	and	r16,r3,r16
    a2c8:	1444703a 	and	r2,r2,r17
    a2cc:	1404b03a 	or	r2,r2,r16
    a2d0:	1004c03a 	cmpne	r2,r2,zero
    a2d4:	1584b03a 	or	r2,r2,r22
    a2d8:	11003fcc 	andi	r4,r2,255
    a2dc:	01402004 	movi	r5,128
    a2e0:	a807883a 	mov	r3,r21
    a2e4:	2140131e 	bne	r4,r5,a334 <__pack_d+0x210>
    a2e8:	1140400c 	andi	r5,r2,256
    a2ec:	28000426 	beq	r5,zero,a300 <__pack_d+0x1dc>
    a2f0:	1109883a 	add	r4,r2,r4
    a2f4:	2085803a 	cmpltu	r2,r4,r2
    a2f8:	1547883a 	add	r3,r2,r21
    a2fc:	2005883a 	mov	r2,r4
    a300:	1808963a 	slli	r4,r3,24
    a304:	1004d23a 	srli	r2,r2,8
    a308:	1820913a 	slli	r16,r3,4
    a30c:	01440034 	movhi	r5,4096
    a310:	297fffc4 	addi	r5,r5,-1
    a314:	2084b03a 	or	r2,r4,r2
    a318:	8020d33a 	srli	r16,r16,12
    a31c:	01000044 	movi	r4,1
    a320:	28ffaf36 	bltu	r5,r3,a1e0 <__pack_d+0xbc>
    a324:	0009883a 	mov	r4,zero
    a328:	003fad06 	br	a1e0 <__pack_d+0xbc>
    a32c:	0005883a 	mov	r2,zero
    a330:	0007883a 	mov	r3,zero
    a334:	11001fc4 	addi	r4,r2,127
    a338:	2085803a 	cmpltu	r2,r4,r2
    a33c:	10c7883a 	add	r3,r2,r3
    a340:	2005883a 	mov	r2,r4
    a344:	003fee06 	br	a300 <__pack_d+0x1dc>

0000a348 <__unpack_d>:
    a348:	21800117 	ldw	r6,4(r4)
    a34c:	20c00017 	ldw	r3,0(r4)
    a350:	3004d7fa 	srli	r2,r6,31
    a354:	3008d53a 	srli	r4,r6,20
    a358:	28800115 	stw	r2,4(r5)
    a35c:	2101ffcc 	andi	r4,r4,2047
    a360:	00800434 	movhi	r2,16
    a364:	10bfffc4 	addi	r2,r2,-1
    a368:	3084703a 	and	r2,r6,r2
    a36c:	20001a1e 	bne	r4,zero,a3d8 <__unpack_d+0x90>
    a370:	1888b03a 	or	r4,r3,r2
    a374:	20002626 	beq	r4,zero,a410 <__unpack_d+0xc8>
    a378:	1808d63a 	srli	r4,r3,24
    a37c:	1004923a 	slli	r2,r2,8
    a380:	01bf0084 	movi	r6,-1022
    a384:	29800215 	stw	r6,8(r5)
    a388:	2084b03a 	or	r2,r4,r2
    a38c:	010000c4 	movi	r4,3
    a390:	29000015 	stw	r4,0(r5)
    a394:	02040034 	movhi	r8,4096
    a398:	423fffc4 	addi	r8,r8,-1
    a39c:	1806923a 	slli	r3,r3,8
    a3a0:	40801836 	bltu	r8,r2,a404 <__unpack_d+0xbc>
    a3a4:	013f0044 	movi	r4,-1023
    a3a8:	18cd883a 	add	r6,r3,r3
    a3ac:	30c7803a 	cmpltu	r3,r6,r3
    a3b0:	1085883a 	add	r2,r2,r2
    a3b4:	1885883a 	add	r2,r3,r2
    a3b8:	200f883a 	mov	r7,r4
    a3bc:	3007883a 	mov	r3,r6
    a3c0:	213fffc4 	addi	r4,r4,-1
    a3c4:	40bff82e 	bgeu	r8,r2,a3a8 <__unpack_d+0x60>
    a3c8:	29c00215 	stw	r7,8(r5)
    a3cc:	28c00315 	stw	r3,12(r5)
    a3d0:	28800415 	stw	r2,16(r5)
    a3d4:	f800283a 	ret
    a3d8:	01c1ffc4 	movi	r7,2047
    a3dc:	21c00f26 	beq	r4,r7,a41c <__unpack_d+0xd4>
    a3e0:	180cd63a 	srli	r6,r3,24
    a3e4:	1004923a 	slli	r2,r2,8
    a3e8:	213f0044 	addi	r4,r4,-1023
    a3ec:	1806923a 	slli	r3,r3,8
    a3f0:	3084b03a 	or	r2,r6,r2
    a3f4:	29000215 	stw	r4,8(r5)
    a3f8:	010000c4 	movi	r4,3
    a3fc:	10840034 	orhi	r2,r2,4096
    a400:	29000015 	stw	r4,0(r5)
    a404:	28c00315 	stw	r3,12(r5)
    a408:	28800415 	stw	r2,16(r5)
    a40c:	f800283a 	ret
    a410:	00800084 	movi	r2,2
    a414:	28800015 	stw	r2,0(r5)
    a418:	f800283a 	ret
    a41c:	1888b03a 	or	r4,r3,r2
    a420:	20000526 	beq	r4,zero,a438 <__unpack_d+0xf0>
    a424:	3180022c 	andhi	r6,r6,8
    a428:	30000626 	beq	r6,zero,a444 <__unpack_d+0xfc>
    a42c:	01000044 	movi	r4,1
    a430:	29000015 	stw	r4,0(r5)
    a434:	003ff306 	br	a404 <__unpack_d+0xbc>
    a438:	00800104 	movi	r2,4
    a43c:	28800015 	stw	r2,0(r5)
    a440:	f800283a 	ret
    a444:	28000015 	stw	zero,0(r5)
    a448:	003fee06 	br	a404 <__unpack_d+0xbc>

0000a44c <__fpcmp_parts_d>:
    a44c:	20c00017 	ldw	r3,0(r4)
    a450:	00800044 	movi	r2,1
    a454:	10c0142e 	bgeu	r2,r3,a4a8 <__fpcmp_parts_d+0x5c>
    a458:	29800017 	ldw	r6,0(r5)
    a45c:	1180122e 	bgeu	r2,r6,a4a8 <__fpcmp_parts_d+0x5c>
    a460:	01c00104 	movi	r7,4
    a464:	19c02826 	beq	r3,r7,a508 <__fpcmp_parts_d+0xbc>
    a468:	31c00926 	beq	r6,r7,a490 <__fpcmp_parts_d+0x44>
    a46c:	01c00084 	movi	r7,2
    a470:	19c00626 	beq	r3,r7,a48c <__fpcmp_parts_d+0x40>
    a474:	31c00a26 	beq	r6,r7,a4a0 <__fpcmp_parts_d+0x54>
    a478:	20c00117 	ldw	r3,4(r4)
    a47c:	29800117 	ldw	r6,4(r5)
    a480:	19800b26 	beq	r3,r6,a4b0 <__fpcmp_parts_d+0x64>
    a484:	1800041e 	bne	r3,zero,a498 <__fpcmp_parts_d+0x4c>
    a488:	f800283a 	ret
    a48c:	30c01a26 	beq	r6,r3,a4f8 <__fpcmp_parts_d+0xac>
    a490:	28800117 	ldw	r2,4(r5)
    a494:	1000041e 	bne	r2,zero,a4a8 <__fpcmp_parts_d+0x5c>
    a498:	00bfffc4 	movi	r2,-1
    a49c:	f800283a 	ret
    a4a0:	20800117 	ldw	r2,4(r4)
    a4a4:	103ffc1e 	bne	r2,zero,a498 <__fpcmp_parts_d+0x4c>
    a4a8:	00800044 	movi	r2,1
    a4ac:	f800283a 	ret
    a4b0:	21c00217 	ldw	r7,8(r4)
    a4b4:	29800217 	ldw	r6,8(r5)
    a4b8:	31c0020e 	bge	r6,r7,a4c4 <__fpcmp_parts_d+0x78>
    a4bc:	183ff61e 	bne	r3,zero,a498 <__fpcmp_parts_d+0x4c>
    a4c0:	f800283a 	ret
    a4c4:	39800a16 	blt	r7,r6,a4f0 <__fpcmp_parts_d+0xa4>
    a4c8:	20800417 	ldw	r2,16(r4)
    a4cc:	29800417 	ldw	r6,16(r5)
    a4d0:	21c00317 	ldw	r7,12(r4)
    a4d4:	29000317 	ldw	r4,12(r5)
    a4d8:	30800936 	bltu	r6,r2,a500 <__fpcmp_parts_d+0xb4>
    a4dc:	1180011e 	bne	r2,r6,a4e4 <__fpcmp_parts_d+0x98>
    a4e0:	21c00736 	bltu	r4,r7,a500 <__fpcmp_parts_d+0xb4>
    a4e4:	11800236 	bltu	r2,r6,a4f0 <__fpcmp_parts_d+0xa4>
    a4e8:	3080031e 	bne	r6,r2,a4f8 <__fpcmp_parts_d+0xac>
    a4ec:	3900022e 	bgeu	r7,r4,a4f8 <__fpcmp_parts_d+0xac>
    a4f0:	183fe926 	beq	r3,zero,a498 <__fpcmp_parts_d+0x4c>
    a4f4:	003fec06 	br	a4a8 <__fpcmp_parts_d+0x5c>
    a4f8:	0005883a 	mov	r2,zero
    a4fc:	f800283a 	ret
    a500:	183fe926 	beq	r3,zero,a4a8 <__fpcmp_parts_d+0x5c>
    a504:	003fe406 	br	a498 <__fpcmp_parts_d+0x4c>
    a508:	30ffe51e 	bne	r6,r3,a4a0 <__fpcmp_parts_d+0x54>
    a50c:	28c00117 	ldw	r3,4(r5)
    a510:	20800117 	ldw	r2,4(r4)
    a514:	1885c83a 	sub	r2,r3,r2
    a518:	f800283a 	ret

0000a51c <__lshrdi3>:
    a51c:	2005883a 	mov	r2,r4
    a520:	2807883a 	mov	r3,r5
    a524:	30000826 	beq	r6,zero,a548 <__lshrdi3+0x2c>
    a528:	01000804 	movi	r4,32
    a52c:	2189c83a 	sub	r4,r4,r6
    a530:	0100060e 	bge	zero,r4,a54c <__lshrdi3+0x30>
    a534:	1184d83a 	srl	r2,r2,r6
    a538:	2908983a 	sll	r4,r5,r4
    a53c:	298cd83a 	srl	r6,r5,r6
    a540:	2084b03a 	or	r2,r4,r2
    a544:	3007883a 	mov	r3,r6
    a548:	f800283a 	ret
    a54c:	0105c83a 	sub	r2,zero,r4
    a550:	000d883a 	mov	r6,zero
    a554:	2884d83a 	srl	r2,r5,r2
    a558:	3007883a 	mov	r3,r6
    a55c:	003ffa06 	br	a548 <__lshrdi3+0x2c>

0000a560 <__ashldi3>:
    a560:	2005883a 	mov	r2,r4
    a564:	2807883a 	mov	r3,r5
    a568:	30000826 	beq	r6,zero,a58c <__ashldi3+0x2c>
    a56c:	01000804 	movi	r4,32
    a570:	2189c83a 	sub	r4,r4,r6
    a574:	0100060e 	bge	zero,r4,a590 <__ashldi3+0x30>
    a578:	1108d83a 	srl	r4,r2,r4
    a57c:	2986983a 	sll	r3,r5,r6
    a580:	118c983a 	sll	r6,r2,r6
    a584:	20c6b03a 	or	r3,r4,r3
    a588:	3005883a 	mov	r2,r6
    a58c:	f800283a 	ret
    a590:	0107c83a 	sub	r3,zero,r4
    a594:	000d883a 	mov	r6,zero
    a598:	10c6983a 	sll	r3,r2,r3
    a59c:	3005883a 	mov	r2,r6
    a5a0:	003ffa06 	br	a58c <__ashldi3+0x2c>

0000a5a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a5a4:	defffe04 	addi	sp,sp,-8
    a5a8:	dfc00115 	stw	ra,4(sp)
    a5ac:	df000015 	stw	fp,0(sp)
    a5b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a5b4:	00800074 	movhi	r2,1
    a5b8:	10bc2504 	addi	r2,r2,-3948
    a5bc:	10800017 	ldw	r2,0(r2)
    a5c0:	10000526 	beq	r2,zero,a5d8 <alt_get_errno+0x34>
    a5c4:	00800074 	movhi	r2,1
    a5c8:	10bc2504 	addi	r2,r2,-3948
    a5cc:	10800017 	ldw	r2,0(r2)
    a5d0:	103ee83a 	callr	r2
    a5d4:	00000206 	br	a5e0 <alt_get_errno+0x3c>
    a5d8:	00800074 	movhi	r2,1
    a5dc:	1082c604 	addi	r2,r2,2840
}
    a5e0:	e037883a 	mov	sp,fp
    a5e4:	dfc00117 	ldw	ra,4(sp)
    a5e8:	df000017 	ldw	fp,0(sp)
    a5ec:	dec00204 	addi	sp,sp,8
    a5f0:	f800283a 	ret

0000a5f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a5f4:	defffb04 	addi	sp,sp,-20
    a5f8:	dfc00415 	stw	ra,16(sp)
    a5fc:	df000315 	stw	fp,12(sp)
    a600:	df000304 	addi	fp,sp,12
    a604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a608:	e0bfff17 	ldw	r2,-4(fp)
    a60c:	10000716 	blt	r2,zero,a62c <close+0x38>
    a610:	e13fff17 	ldw	r4,-4(fp)
    a614:	01400304 	movi	r5,12
    a618:	0000e000 	call	e00 <__mulsi3>
    a61c:	00c00074 	movhi	r3,1
    a620:	18f7a304 	addi	r3,r3,-8564
    a624:	10c5883a 	add	r2,r2,r3
    a628:	00000106 	br	a630 <close+0x3c>
    a62c:	0005883a 	mov	r2,zero
    a630:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    a634:	e0bffd17 	ldw	r2,-12(fp)
    a638:	10001826 	beq	r2,zero,a69c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a63c:	e0bffd17 	ldw	r2,-12(fp)
    a640:	10800017 	ldw	r2,0(r2)
    a644:	10800417 	ldw	r2,16(r2)
    a648:	10000626 	beq	r2,zero,a664 <close+0x70>
    a64c:	e0bffd17 	ldw	r2,-12(fp)
    a650:	10800017 	ldw	r2,0(r2)
    a654:	10800417 	ldw	r2,16(r2)
    a658:	e13ffd17 	ldw	r4,-12(fp)
    a65c:	103ee83a 	callr	r2
    a660:	00000106 	br	a668 <close+0x74>
    a664:	0005883a 	mov	r2,zero
    a668:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a66c:	e13fff17 	ldw	r4,-4(fp)
    a670:	000ad280 	call	ad28 <alt_release_fd>
    if (rval < 0)
    a674:	e0bffe17 	ldw	r2,-8(fp)
    a678:	1000060e 	bge	r2,zero,a694 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    a67c:	000a5a40 	call	a5a4 <alt_get_errno>
    a680:	e0fffe17 	ldw	r3,-8(fp)
    a684:	00c7c83a 	sub	r3,zero,r3
    a688:	10c00015 	stw	r3,0(r2)
      return -1;
    a68c:	00bfffc4 	movi	r2,-1
    a690:	00000606 	br	a6ac <close+0xb8>
    }
    return 0;
    a694:	0005883a 	mov	r2,zero
    a698:	00000406 	br	a6ac <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a69c:	000a5a40 	call	a5a4 <alt_get_errno>
    a6a0:	00c01444 	movi	r3,81
    a6a4:	10c00015 	stw	r3,0(r2)
    return -1;
    a6a8:	00bfffc4 	movi	r2,-1
  }
}
    a6ac:	e037883a 	mov	sp,fp
    a6b0:	dfc00117 	ldw	ra,4(sp)
    a6b4:	df000017 	ldw	fp,0(sp)
    a6b8:	dec00204 	addi	sp,sp,8
    a6bc:	f800283a 	ret

0000a6c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a6c0:	defffc04 	addi	sp,sp,-16
    a6c4:	df000315 	stw	fp,12(sp)
    a6c8:	df000304 	addi	fp,sp,12
    a6cc:	e13ffd15 	stw	r4,-12(fp)
    a6d0:	e17ffe15 	stw	r5,-8(fp)
    a6d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a6d8:	e0bfff17 	ldw	r2,-4(fp)
}
    a6dc:	e037883a 	mov	sp,fp
    a6e0:	df000017 	ldw	fp,0(sp)
    a6e4:	dec00104 	addi	sp,sp,4
    a6e8:	f800283a 	ret

0000a6ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a6ec:	defffc04 	addi	sp,sp,-16
    a6f0:	df000315 	stw	fp,12(sp)
    a6f4:	df000304 	addi	fp,sp,12
    a6f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a6fc:	0001883a 	nop
    a700:	e0bfff17 	ldw	r2,-4(fp)
    a704:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    a708:	e0bffd17 	ldw	r2,-12(fp)
    a70c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a710:	e0bffe17 	ldw	r2,-8(fp)
    a714:	10000226 	beq	r2,zero,a720 <_exit+0x34>
    ALT_SIM_FAIL();
    a718:	002af070 	cmpltui	zero,zero,43969
    a71c:	00000106 	br	a724 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    a720:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a724:	003fff06 	br	a724 <_exit+0x38>

0000a728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a728:	defffe04 	addi	sp,sp,-8
    a72c:	dfc00115 	stw	ra,4(sp)
    a730:	df000015 	stw	fp,0(sp)
    a734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a738:	00800074 	movhi	r2,1
    a73c:	10bc2504 	addi	r2,r2,-3948
    a740:	10800017 	ldw	r2,0(r2)
    a744:	10000526 	beq	r2,zero,a75c <alt_get_errno+0x34>
    a748:	00800074 	movhi	r2,1
    a74c:	10bc2504 	addi	r2,r2,-3948
    a750:	10800017 	ldw	r2,0(r2)
    a754:	103ee83a 	callr	r2
    a758:	00000206 	br	a764 <alt_get_errno+0x3c>
    a75c:	00800074 	movhi	r2,1
    a760:	1082c604 	addi	r2,r2,2840
}
    a764:	e037883a 	mov	sp,fp
    a768:	dfc00117 	ldw	ra,4(sp)
    a76c:	df000017 	ldw	fp,0(sp)
    a770:	dec00204 	addi	sp,sp,8
    a774:	f800283a 	ret

0000a778 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a778:	defffb04 	addi	sp,sp,-20
    a77c:	dfc00415 	stw	ra,16(sp)
    a780:	df000315 	stw	fp,12(sp)
    a784:	df000304 	addi	fp,sp,12
    a788:	e13ffe15 	stw	r4,-8(fp)
    a78c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a790:	e0bffe17 	ldw	r2,-8(fp)
    a794:	10000716 	blt	r2,zero,a7b4 <fstat+0x3c>
    a798:	e13ffe17 	ldw	r4,-8(fp)
    a79c:	01400304 	movi	r5,12
    a7a0:	0000e000 	call	e00 <__mulsi3>
    a7a4:	00c00074 	movhi	r3,1
    a7a8:	18f7a304 	addi	r3,r3,-8564
    a7ac:	10c5883a 	add	r2,r2,r3
    a7b0:	00000106 	br	a7b8 <fstat+0x40>
    a7b4:	0005883a 	mov	r2,zero
    a7b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    a7bc:	e0bffd17 	ldw	r2,-12(fp)
    a7c0:	10001026 	beq	r2,zero,a804 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a7c4:	e0bffd17 	ldw	r2,-12(fp)
    a7c8:	10800017 	ldw	r2,0(r2)
    a7cc:	10800817 	ldw	r2,32(r2)
    a7d0:	10000726 	beq	r2,zero,a7f0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    a7d4:	e0bffd17 	ldw	r2,-12(fp)
    a7d8:	10800017 	ldw	r2,0(r2)
    a7dc:	10800817 	ldw	r2,32(r2)
    a7e0:	e13ffd17 	ldw	r4,-12(fp)
    a7e4:	e17fff17 	ldw	r5,-4(fp)
    a7e8:	103ee83a 	callr	r2
    a7ec:	00000906 	br	a814 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a7f0:	e0bfff17 	ldw	r2,-4(fp)
    a7f4:	00c80004 	movi	r3,8192
    a7f8:	10c00115 	stw	r3,4(r2)
      return 0;
    a7fc:	0005883a 	mov	r2,zero
    a800:	00000406 	br	a814 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a804:	000a7280 	call	a728 <alt_get_errno>
    a808:	00c01444 	movi	r3,81
    a80c:	10c00015 	stw	r3,0(r2)
    return -1;
    a810:	00bfffc4 	movi	r2,-1
  }
}
    a814:	e037883a 	mov	sp,fp
    a818:	dfc00117 	ldw	ra,4(sp)
    a81c:	df000017 	ldw	fp,0(sp)
    a820:	dec00204 	addi	sp,sp,8
    a824:	f800283a 	ret

0000a828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a828:	defffe04 	addi	sp,sp,-8
    a82c:	dfc00115 	stw	ra,4(sp)
    a830:	df000015 	stw	fp,0(sp)
    a834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a838:	00800074 	movhi	r2,1
    a83c:	10bc2504 	addi	r2,r2,-3948
    a840:	10800017 	ldw	r2,0(r2)
    a844:	10000526 	beq	r2,zero,a85c <alt_get_errno+0x34>
    a848:	00800074 	movhi	r2,1
    a84c:	10bc2504 	addi	r2,r2,-3948
    a850:	10800017 	ldw	r2,0(r2)
    a854:	103ee83a 	callr	r2
    a858:	00000206 	br	a864 <alt_get_errno+0x3c>
    a85c:	00800074 	movhi	r2,1
    a860:	1082c604 	addi	r2,r2,2840
}
    a864:	e037883a 	mov	sp,fp
    a868:	dfc00117 	ldw	ra,4(sp)
    a86c:	df000017 	ldw	fp,0(sp)
    a870:	dec00204 	addi	sp,sp,8
    a874:	f800283a 	ret

0000a878 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a878:	deffed04 	addi	sp,sp,-76
    a87c:	dfc01215 	stw	ra,72(sp)
    a880:	df001115 	stw	fp,68(sp)
    a884:	df001104 	addi	fp,sp,68
    a888:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	10000716 	blt	r2,zero,a8b0 <isatty+0x38>
    a894:	e13fff17 	ldw	r4,-4(fp)
    a898:	01400304 	movi	r5,12
    a89c:	0000e000 	call	e00 <__mulsi3>
    a8a0:	00c00074 	movhi	r3,1
    a8a4:	18f7a304 	addi	r3,r3,-8564
    a8a8:	10c5883a 	add	r2,r2,r3
    a8ac:	00000106 	br	a8b4 <isatty+0x3c>
    a8b0:	0005883a 	mov	r2,zero
    a8b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    a8b8:	e0bfef17 	ldw	r2,-68(fp)
    a8bc:	10000e26 	beq	r2,zero,a8f8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a8c0:	e0bfef17 	ldw	r2,-68(fp)
    a8c4:	10800017 	ldw	r2,0(r2)
    a8c8:	10800817 	ldw	r2,32(r2)
    a8cc:	1000021e 	bne	r2,zero,a8d8 <isatty+0x60>
    {
      return 1;
    a8d0:	00800044 	movi	r2,1
    a8d4:	00000c06 	br	a908 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a8d8:	e0bff004 	addi	r2,fp,-64
    a8dc:	e13fff17 	ldw	r4,-4(fp)
    a8e0:	100b883a 	mov	r5,r2
    a8e4:	000a7780 	call	a778 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a8e8:	e0bff117 	ldw	r2,-60(fp)
    a8ec:	10880020 	cmpeqi	r2,r2,8192
    a8f0:	10803fcc 	andi	r2,r2,255
    a8f4:	00000406 	br	a908 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a8f8:	000a8280 	call	a828 <alt_get_errno>
    a8fc:	00c01444 	movi	r3,81
    a900:	10c00015 	stw	r3,0(r2)
    return 0;
    a904:	0005883a 	mov	r2,zero
  }
}
    a908:	e037883a 	mov	sp,fp
    a90c:	dfc00117 	ldw	ra,4(sp)
    a910:	df000017 	ldw	fp,0(sp)
    a914:	dec00204 	addi	sp,sp,8
    a918:	f800283a 	ret

0000a91c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a91c:	defffc04 	addi	sp,sp,-16
    a920:	df000315 	stw	fp,12(sp)
    a924:	df000304 	addi	fp,sp,12
    a928:	e13ffd15 	stw	r4,-12(fp)
    a92c:	e17ffe15 	stw	r5,-8(fp)
    a930:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a934:	e0fffe17 	ldw	r3,-8(fp)
    a938:	e0bffd17 	ldw	r2,-12(fp)
    a93c:	18800e26 	beq	r3,r2,a978 <alt_load_section+0x5c>
  {
    while( to != end )
    a940:	00000a06 	br	a96c <alt_load_section+0x50>
    {
      *to++ = *from++;
    a944:	e0bffd17 	ldw	r2,-12(fp)
    a948:	10c00017 	ldw	r3,0(r2)
    a94c:	e0bffe17 	ldw	r2,-8(fp)
    a950:	10c00015 	stw	r3,0(r2)
    a954:	e0bffe17 	ldw	r2,-8(fp)
    a958:	10800104 	addi	r2,r2,4
    a95c:	e0bffe15 	stw	r2,-8(fp)
    a960:	e0bffd17 	ldw	r2,-12(fp)
    a964:	10800104 	addi	r2,r2,4
    a968:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a96c:	e0fffe17 	ldw	r3,-8(fp)
    a970:	e0bfff17 	ldw	r2,-4(fp)
    a974:	18bff31e 	bne	r3,r2,a944 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a978:	e037883a 	mov	sp,fp
    a97c:	df000017 	ldw	fp,0(sp)
    a980:	dec00104 	addi	sp,sp,4
    a984:	f800283a 	ret

0000a988 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a988:	defffe04 	addi	sp,sp,-8
    a98c:	dfc00115 	stw	ra,4(sp)
    a990:	df000015 	stw	fp,0(sp)
    a994:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a998:	01000074 	movhi	r4,1
    a99c:	213c2a04 	addi	r4,r4,-3928
    a9a0:	01400074 	movhi	r5,1
    a9a4:	29759404 	addi	r5,r5,-10672
    a9a8:	01800074 	movhi	r6,1
    a9ac:	31bc2a04 	addi	r6,r6,-3928
    a9b0:	000a91c0 	call	a91c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a9b4:	01000034 	movhi	r4,0
    a9b8:	21000804 	addi	r4,r4,32
    a9bc:	01400034 	movhi	r5,0
    a9c0:	29400804 	addi	r5,r5,32
    a9c4:	01800034 	movhi	r6,0
    a9c8:	31806e04 	addi	r6,r6,440
    a9cc:	000a91c0 	call	a91c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a9d0:	01000074 	movhi	r4,1
    a9d4:	21333e04 	addi	r4,r4,-13064
    a9d8:	01400074 	movhi	r5,1
    a9dc:	29733e04 	addi	r5,r5,-13064
    a9e0:	01800074 	movhi	r6,1
    a9e4:	31b59404 	addi	r6,r6,-10672
    a9e8:	000a91c0 	call	a91c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a9ec:	000be6c0 	call	be6c <alt_dcache_flush_all>
  alt_icache_flush_all();
    a9f0:	000c0300 	call	c030 <alt_icache_flush_all>
}
    a9f4:	e037883a 	mov	sp,fp
    a9f8:	dfc00117 	ldw	ra,4(sp)
    a9fc:	df000017 	ldw	fp,0(sp)
    aa00:	dec00204 	addi	sp,sp,8
    aa04:	f800283a 	ret

0000aa08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa08:	defffe04 	addi	sp,sp,-8
    aa0c:	dfc00115 	stw	ra,4(sp)
    aa10:	df000015 	stw	fp,0(sp)
    aa14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aa18:	00800074 	movhi	r2,1
    aa1c:	10bc2504 	addi	r2,r2,-3948
    aa20:	10800017 	ldw	r2,0(r2)
    aa24:	10000526 	beq	r2,zero,aa3c <alt_get_errno+0x34>
    aa28:	00800074 	movhi	r2,1
    aa2c:	10bc2504 	addi	r2,r2,-3948
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	103ee83a 	callr	r2
    aa38:	00000206 	br	aa44 <alt_get_errno+0x3c>
    aa3c:	00800074 	movhi	r2,1
    aa40:	1082c604 	addi	r2,r2,2840
}
    aa44:	e037883a 	mov	sp,fp
    aa48:	dfc00117 	ldw	ra,4(sp)
    aa4c:	df000017 	ldw	fp,0(sp)
    aa50:	dec00204 	addi	sp,sp,8
    aa54:	f800283a 	ret

0000aa58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    aa58:	defff904 	addi	sp,sp,-28
    aa5c:	dfc00615 	stw	ra,24(sp)
    aa60:	df000515 	stw	fp,20(sp)
    aa64:	df000504 	addi	fp,sp,20
    aa68:	e13ffd15 	stw	r4,-12(fp)
    aa6c:	e17ffe15 	stw	r5,-8(fp)
    aa70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    aa74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aa78:	e0bffd17 	ldw	r2,-12(fp)
    aa7c:	10000716 	blt	r2,zero,aa9c <lseek+0x44>
    aa80:	e13ffd17 	ldw	r4,-12(fp)
    aa84:	01400304 	movi	r5,12
    aa88:	0000e000 	call	e00 <__mulsi3>
    aa8c:	00c00074 	movhi	r3,1
    aa90:	18f7a304 	addi	r3,r3,-8564
    aa94:	10c5883a 	add	r2,r2,r3
    aa98:	00000106 	br	aaa0 <lseek+0x48>
    aa9c:	0005883a 	mov	r2,zero
    aaa0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    aaa4:	e0bffc17 	ldw	r2,-16(fp)
    aaa8:	10001026 	beq	r2,zero,aaec <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    aaac:	e0bffc17 	ldw	r2,-16(fp)
    aab0:	10800017 	ldw	r2,0(r2)
    aab4:	10800717 	ldw	r2,28(r2)
    aab8:	10000926 	beq	r2,zero,aae0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    aabc:	e0bffc17 	ldw	r2,-16(fp)
    aac0:	10800017 	ldw	r2,0(r2)
    aac4:	10800717 	ldw	r2,28(r2)
    aac8:	e13ffc17 	ldw	r4,-16(fp)
    aacc:	e17ffe17 	ldw	r5,-8(fp)
    aad0:	e1bfff17 	ldw	r6,-4(fp)
    aad4:	103ee83a 	callr	r2
    aad8:	e0bffb15 	stw	r2,-20(fp)
    aadc:	00000506 	br	aaf4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    aae0:	00bfde84 	movi	r2,-134
    aae4:	e0bffb15 	stw	r2,-20(fp)
    aae8:	00000206 	br	aaf4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    aaec:	00bfebc4 	movi	r2,-81
    aaf0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    aaf4:	e0bffb17 	ldw	r2,-20(fp)
    aaf8:	1000060e 	bge	r2,zero,ab14 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    aafc:	000aa080 	call	aa08 <alt_get_errno>
    ab00:	e0fffb17 	ldw	r3,-20(fp)
    ab04:	00c7c83a 	sub	r3,zero,r3
    ab08:	10c00015 	stw	r3,0(r2)
    rc = -1;
    ab0c:	00bfffc4 	movi	r2,-1
    ab10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ab14:	e0bffb17 	ldw	r2,-20(fp)
}
    ab18:	e037883a 	mov	sp,fp
    ab1c:	dfc00117 	ldw	ra,4(sp)
    ab20:	df000017 	ldw	fp,0(sp)
    ab24:	dec00204 	addi	sp,sp,8
    ab28:	f800283a 	ret

0000ab2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ab2c:	defffd04 	addi	sp,sp,-12
    ab30:	dfc00215 	stw	ra,8(sp)
    ab34:	df000115 	stw	fp,4(sp)
    ab38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ab3c:	0009883a 	mov	r4,zero
    ab40:	000afd00 	call	afd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ab44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ab48:	000b0040 	call	b004 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ab4c:	01000074 	movhi	r4,1
    ab50:	21358c04 	addi	r4,r4,-10704
    ab54:	01400074 	movhi	r5,1
    ab58:	29758c04 	addi	r5,r5,-10704
    ab5c:	01800074 	movhi	r6,1
    ab60:	31b58c04 	addi	r6,r6,-10704
    ab64:	000c3f40 	call	c3f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ab68:	000bf780 	call	bf78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ab6c:	01000074 	movhi	r4,1
    ab70:	212ff504 	addi	r4,r4,-16428
    ab74:	000cb380 	call	cb38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ab78:	d126ac17 	ldw	r4,-25936(gp)
    ab7c:	d0e6ad17 	ldw	r3,-25932(gp)
    ab80:	d0a6ae17 	ldw	r2,-25928(gp)
    ab84:	180b883a 	mov	r5,r3
    ab88:	100d883a 	mov	r6,r2
    ab8c:	00005ec0 	call	5ec <main>
    ab90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ab94:	01000044 	movi	r4,1
    ab98:	000a5f40 	call	a5f4 <close>
  exit (result);
    ab9c:	e13fff17 	ldw	r4,-4(fp)
    aba0:	0000e280 	call	e28 <exit>

0000aba4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    aba4:	defffe04 	addi	sp,sp,-8
    aba8:	df000115 	stw	fp,4(sp)
    abac:	df000104 	addi	fp,sp,4
    abb0:	e13fff15 	stw	r4,-4(fp)
}
    abb4:	e037883a 	mov	sp,fp
    abb8:	df000017 	ldw	fp,0(sp)
    abbc:	dec00104 	addi	sp,sp,4
    abc0:	f800283a 	ret

0000abc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    abc4:	defffe04 	addi	sp,sp,-8
    abc8:	df000115 	stw	fp,4(sp)
    abcc:	df000104 	addi	fp,sp,4
    abd0:	e13fff15 	stw	r4,-4(fp)
}
    abd4:	e037883a 	mov	sp,fp
    abd8:	df000017 	ldw	fp,0(sp)
    abdc:	dec00104 	addi	sp,sp,4
    abe0:	f800283a 	ret

0000abe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    abe4:	defffe04 	addi	sp,sp,-8
    abe8:	dfc00115 	stw	ra,4(sp)
    abec:	df000015 	stw	fp,0(sp)
    abf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    abf4:	00800074 	movhi	r2,1
    abf8:	10bc2504 	addi	r2,r2,-3948
    abfc:	10800017 	ldw	r2,0(r2)
    ac00:	10000526 	beq	r2,zero,ac18 <alt_get_errno+0x34>
    ac04:	00800074 	movhi	r2,1
    ac08:	10bc2504 	addi	r2,r2,-3948
    ac0c:	10800017 	ldw	r2,0(r2)
    ac10:	103ee83a 	callr	r2
    ac14:	00000206 	br	ac20 <alt_get_errno+0x3c>
    ac18:	00800074 	movhi	r2,1
    ac1c:	1082c604 	addi	r2,r2,2840
}
    ac20:	e037883a 	mov	sp,fp
    ac24:	dfc00117 	ldw	ra,4(sp)
    ac28:	df000017 	ldw	fp,0(sp)
    ac2c:	dec00204 	addi	sp,sp,8
    ac30:	f800283a 	ret

0000ac34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ac34:	defff904 	addi	sp,sp,-28
    ac38:	dfc00615 	stw	ra,24(sp)
    ac3c:	df000515 	stw	fp,20(sp)
    ac40:	df000504 	addi	fp,sp,20
    ac44:	e13ffd15 	stw	r4,-12(fp)
    ac48:	e17ffe15 	stw	r5,-8(fp)
    ac4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ac50:	e0bffd17 	ldw	r2,-12(fp)
    ac54:	10000716 	blt	r2,zero,ac74 <read+0x40>
    ac58:	e13ffd17 	ldw	r4,-12(fp)
    ac5c:	01400304 	movi	r5,12
    ac60:	0000e000 	call	e00 <__mulsi3>
    ac64:	00c00074 	movhi	r3,1
    ac68:	18f7a304 	addi	r3,r3,-8564
    ac6c:	10c5883a 	add	r2,r2,r3
    ac70:	00000106 	br	ac78 <read+0x44>
    ac74:	0005883a 	mov	r2,zero
    ac78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ac7c:	e0bffb17 	ldw	r2,-20(fp)
    ac80:	10002026 	beq	r2,zero,ad04 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ac84:	e0bffb17 	ldw	r2,-20(fp)
    ac88:	10800217 	ldw	r2,8(r2)
    ac8c:	108000cc 	andi	r2,r2,3
    ac90:	10800060 	cmpeqi	r2,r2,1
    ac94:	1000171e 	bne	r2,zero,acf4 <read+0xc0>
        (fd->dev->read))
    ac98:	e0bffb17 	ldw	r2,-20(fp)
    ac9c:	10800017 	ldw	r2,0(r2)
    aca0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    aca4:	10001326 	beq	r2,zero,acf4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    aca8:	e0bffb17 	ldw	r2,-20(fp)
    acac:	10800017 	ldw	r2,0(r2)
    acb0:	10c00517 	ldw	r3,20(r2)
    acb4:	e0bfff17 	ldw	r2,-4(fp)
    acb8:	e13ffb17 	ldw	r4,-20(fp)
    acbc:	e17ffe17 	ldw	r5,-8(fp)
    acc0:	100d883a 	mov	r6,r2
    acc4:	183ee83a 	callr	r3
    acc8:	e0bffc15 	stw	r2,-16(fp)
    accc:	e0bffc17 	ldw	r2,-16(fp)
    acd0:	1000060e 	bge	r2,zero,acec <read+0xb8>
        {
          ALT_ERRNO = -rval;
    acd4:	000abe40 	call	abe4 <alt_get_errno>
    acd8:	e0fffc17 	ldw	r3,-16(fp)
    acdc:	00c7c83a 	sub	r3,zero,r3
    ace0:	10c00015 	stw	r3,0(r2)
          return -1;
    ace4:	00bfffc4 	movi	r2,-1
    ace8:	00000a06 	br	ad14 <read+0xe0>
        }
        return rval;
    acec:	e0bffc17 	ldw	r2,-16(fp)
    acf0:	00000806 	br	ad14 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    acf4:	000abe40 	call	abe4 <alt_get_errno>
    acf8:	00c00344 	movi	r3,13
    acfc:	10c00015 	stw	r3,0(r2)
    ad00:	00000306 	br	ad10 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ad04:	000abe40 	call	abe4 <alt_get_errno>
    ad08:	00c01444 	movi	r3,81
    ad0c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ad10:	00bfffc4 	movi	r2,-1
}
    ad14:	e037883a 	mov	sp,fp
    ad18:	dfc00117 	ldw	ra,4(sp)
    ad1c:	df000017 	ldw	fp,0(sp)
    ad20:	dec00204 	addi	sp,sp,8
    ad24:	f800283a 	ret

0000ad28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ad28:	defffc04 	addi	sp,sp,-16
    ad2c:	dfc00315 	stw	ra,12(sp)
    ad30:	df000215 	stw	fp,8(sp)
    ad34:	dc000115 	stw	r16,4(sp)
    ad38:	df000104 	addi	fp,sp,4
    ad3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ad40:	e0bfff17 	ldw	r2,-4(fp)
    ad44:	108000d0 	cmplti	r2,r2,3
    ad48:	1000111e 	bne	r2,zero,ad90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    ad4c:	04000074 	movhi	r16,1
    ad50:	8437a304 	addi	r16,r16,-8564
    ad54:	e0bfff17 	ldw	r2,-4(fp)
    ad58:	1009883a 	mov	r4,r2
    ad5c:	01400304 	movi	r5,12
    ad60:	0000e000 	call	e00 <__mulsi3>
    ad64:	8085883a 	add	r2,r16,r2
    ad68:	10800204 	addi	r2,r2,8
    ad6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ad70:	04000074 	movhi	r16,1
    ad74:	8437a304 	addi	r16,r16,-8564
    ad78:	e0bfff17 	ldw	r2,-4(fp)
    ad7c:	1009883a 	mov	r4,r2
    ad80:	01400304 	movi	r5,12
    ad84:	0000e000 	call	e00 <__mulsi3>
    ad88:	8085883a 	add	r2,r16,r2
    ad8c:	10000015 	stw	zero,0(r2)
  }
}
    ad90:	e037883a 	mov	sp,fp
    ad94:	dfc00217 	ldw	ra,8(sp)
    ad98:	df000117 	ldw	fp,4(sp)
    ad9c:	dc000017 	ldw	r16,0(sp)
    ada0:	dec00304 	addi	sp,sp,12
    ada4:	f800283a 	ret

0000ada8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ada8:	defff904 	addi	sp,sp,-28
    adac:	df000615 	stw	fp,24(sp)
    adb0:	df000604 	addi	fp,sp,24
    adb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    adb8:	0005303a 	rdctl	r2,status
    adbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    adc0:	e0fffc17 	ldw	r3,-16(fp)
    adc4:	00bfff84 	movi	r2,-2
    adc8:	1884703a 	and	r2,r3,r2
    adcc:	1001703a 	wrctl	status,r2
  
  return context;
    add0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    add4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    add8:	d0a00b17 	ldw	r2,-32724(gp)
    addc:	10c000c4 	addi	r3,r2,3
    ade0:	00bfff04 	movi	r2,-4
    ade4:	1884703a 	and	r2,r3,r2
    ade8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    adec:	d0e00b17 	ldw	r3,-32724(gp)
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	1885883a 	add	r2,r3,r2
    adf8:	00c20034 	movhi	r3,2048
    adfc:	18c00004 	addi	r3,r3,0
    ae00:	1880062e 	bgeu	r3,r2,ae1c <sbrk+0x74>
    ae04:	e0bffa17 	ldw	r2,-24(fp)
    ae08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae0c:	e0bffd17 	ldw	r2,-12(fp)
    ae10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ae14:	00bfffc4 	movi	r2,-1
    ae18:	00000b06 	br	ae48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ae1c:	d0a00b17 	ldw	r2,-32724(gp)
    ae20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    ae24:	d0e00b17 	ldw	r3,-32724(gp)
    ae28:	e0bfff17 	ldw	r2,-4(fp)
    ae2c:	1885883a 	add	r2,r3,r2
    ae30:	d0a00b15 	stw	r2,-32724(gp)
    ae34:	e0bffa17 	ldw	r2,-24(fp)
    ae38:	e0bffe15 	stw	r2,-8(fp)
    ae3c:	e0bffe17 	ldw	r2,-8(fp)
    ae40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ae44:	e0bffb17 	ldw	r2,-20(fp)
} 
    ae48:	e037883a 	mov	sp,fp
    ae4c:	df000017 	ldw	fp,0(sp)
    ae50:	dec00104 	addi	sp,sp,4
    ae54:	f800283a 	ret

0000ae58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ae58:	defffe04 	addi	sp,sp,-8
    ae5c:	dfc00115 	stw	ra,4(sp)
    ae60:	df000015 	stw	fp,0(sp)
    ae64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ae68:	00800074 	movhi	r2,1
    ae6c:	10bc2504 	addi	r2,r2,-3948
    ae70:	10800017 	ldw	r2,0(r2)
    ae74:	10000526 	beq	r2,zero,ae8c <alt_get_errno+0x34>
    ae78:	00800074 	movhi	r2,1
    ae7c:	10bc2504 	addi	r2,r2,-3948
    ae80:	10800017 	ldw	r2,0(r2)
    ae84:	103ee83a 	callr	r2
    ae88:	00000206 	br	ae94 <alt_get_errno+0x3c>
    ae8c:	00800074 	movhi	r2,1
    ae90:	1082c604 	addi	r2,r2,2840
}
    ae94:	e037883a 	mov	sp,fp
    ae98:	dfc00117 	ldw	ra,4(sp)
    ae9c:	df000017 	ldw	fp,0(sp)
    aea0:	dec00204 	addi	sp,sp,8
    aea4:	f800283a 	ret

0000aea8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    aea8:	defff904 	addi	sp,sp,-28
    aeac:	dfc00615 	stw	ra,24(sp)
    aeb0:	df000515 	stw	fp,20(sp)
    aeb4:	df000504 	addi	fp,sp,20
    aeb8:	e13ffd15 	stw	r4,-12(fp)
    aebc:	e17ffe15 	stw	r5,-8(fp)
    aec0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aec4:	e0bffd17 	ldw	r2,-12(fp)
    aec8:	10000716 	blt	r2,zero,aee8 <write+0x40>
    aecc:	e13ffd17 	ldw	r4,-12(fp)
    aed0:	01400304 	movi	r5,12
    aed4:	0000e000 	call	e00 <__mulsi3>
    aed8:	00c00074 	movhi	r3,1
    aedc:	18f7a304 	addi	r3,r3,-8564
    aee0:	10c5883a 	add	r2,r2,r3
    aee4:	00000106 	br	aeec <write+0x44>
    aee8:	0005883a 	mov	r2,zero
    aeec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    aef0:	e0bffb17 	ldw	r2,-20(fp)
    aef4:	10001f26 	beq	r2,zero,af74 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    aef8:	e0bffb17 	ldw	r2,-20(fp)
    aefc:	10800217 	ldw	r2,8(r2)
    af00:	108000cc 	andi	r2,r2,3
    af04:	10001726 	beq	r2,zero,af64 <write+0xbc>
    af08:	e0bffb17 	ldw	r2,-20(fp)
    af0c:	10800017 	ldw	r2,0(r2)
    af10:	10800617 	ldw	r2,24(r2)
    af14:	10001326 	beq	r2,zero,af64 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    af18:	e0bffb17 	ldw	r2,-20(fp)
    af1c:	10800017 	ldw	r2,0(r2)
    af20:	10c00617 	ldw	r3,24(r2)
    af24:	e0bfff17 	ldw	r2,-4(fp)
    af28:	e13ffb17 	ldw	r4,-20(fp)
    af2c:	e17ffe17 	ldw	r5,-8(fp)
    af30:	100d883a 	mov	r6,r2
    af34:	183ee83a 	callr	r3
    af38:	e0bffc15 	stw	r2,-16(fp)
    af3c:	e0bffc17 	ldw	r2,-16(fp)
    af40:	1000060e 	bge	r2,zero,af5c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    af44:	000ae580 	call	ae58 <alt_get_errno>
    af48:	e0fffc17 	ldw	r3,-16(fp)
    af4c:	00c7c83a 	sub	r3,zero,r3
    af50:	10c00015 	stw	r3,0(r2)
        return -1;
    af54:	00bfffc4 	movi	r2,-1
    af58:	00000a06 	br	af84 <write+0xdc>
      }
      return rval;
    af5c:	e0bffc17 	ldw	r2,-16(fp)
    af60:	00000806 	br	af84 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    af64:	000ae580 	call	ae58 <alt_get_errno>
    af68:	00c00344 	movi	r3,13
    af6c:	10c00015 	stw	r3,0(r2)
    af70:	00000306 	br	af80 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    af74:	000ae580 	call	ae58 <alt_get_errno>
    af78:	00c01444 	movi	r3,81
    af7c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    af80:	00bfffc4 	movi	r2,-1
}
    af84:	e037883a 	mov	sp,fp
    af88:	dfc00117 	ldw	ra,4(sp)
    af8c:	df000017 	ldw	fp,0(sp)
    af90:	dec00204 	addi	sp,sp,8
    af94:	f800283a 	ret

0000af98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    af98:	defffd04 	addi	sp,sp,-12
    af9c:	dfc00215 	stw	ra,8(sp)
    afa0:	df000115 	stw	fp,4(sp)
    afa4:	df000104 	addi	fp,sp,4
    afa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    afac:	e13fff17 	ldw	r4,-4(fp)
    afb0:	01400074 	movhi	r5,1
    afb4:	297c2204 	addi	r5,r5,-3960
    afb8:	000bed80 	call	bed8 <alt_dev_llist_insert>
}
    afbc:	e037883a 	mov	sp,fp
    afc0:	dfc00117 	ldw	ra,4(sp)
    afc4:	df000017 	ldw	fp,0(sp)
    afc8:	dec00204 	addi	sp,sp,8
    afcc:	f800283a 	ret

0000afd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    afd0:	defffd04 	addi	sp,sp,-12
    afd4:	dfc00215 	stw	ra,8(sp)
    afd8:	df000115 	stw	fp,4(sp)
    afdc:	df000104 	addi	fp,sp,4
    afe0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    afe4:	000c8a00 	call	c8a0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    afe8:	00800044 	movi	r2,1
    afec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    aff0:	e037883a 	mov	sp,fp
    aff4:	dfc00117 	ldw	ra,4(sp)
    aff8:	df000017 	ldw	fp,0(sp)
    affc:	dec00204 	addi	sp,sp,8
    b000:	f800283a 	ret

0000b004 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b004:	defffe04 	addi	sp,sp,-8
    b008:	dfc00115 	stw	ra,4(sp)
    b00c:	df000015 	stw	fp,0(sp)
    b010:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ALT_TIMER, alt_timer);
    b014:	00800074 	movhi	r2,1
    b018:	1082ca04 	addi	r2,r2,2856
    b01c:	00c20034 	movhi	r3,2048
    b020:	18c40004 	addi	r3,r3,4096
    b024:	10c00015 	stw	r3,0(r2)
    b028:	00800074 	movhi	r2,1
    b02c:	1082cb04 	addi	r2,r2,2860
    b030:	00c0bef4 	movhi	r3,763
    b034:	18fc2004 	addi	r3,r3,-3968
    b038:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    b03c:	01020034 	movhi	r4,2048
    b040:	21040804 	addi	r4,r4,4128
    b044:	000b883a 	mov	r5,zero
    b048:	01800044 	movi	r6,1
    b04c:	01c0fa04 	movi	r7,1000
    b050:	000bb640 	call	bb64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b054:	01000074 	movhi	r4,1
    b058:	21380d04 	addi	r4,r4,-8140
    b05c:	000b883a 	mov	r5,zero
    b060:	01800404 	movi	r6,16
    b064:	000b1f00 	call	b1f0 <altera_avalon_jtag_uart_init>
    b068:	01000074 	movhi	r4,1
    b06c:	21380304 	addi	r4,r4,-8180
    b070:	000af980 	call	af98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
    b074:	0001883a 	nop
}
    b078:	e037883a 	mov	sp,fp
    b07c:	dfc00117 	ldw	ra,4(sp)
    b080:	df000017 	ldw	fp,0(sp)
    b084:	dec00204 	addi	sp,sp,8
    b088:	f800283a 	ret

0000b08c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b08c:	defffa04 	addi	sp,sp,-24
    b090:	dfc00515 	stw	ra,20(sp)
    b094:	df000415 	stw	fp,16(sp)
    b098:	df000404 	addi	fp,sp,16
    b09c:	e13ffd15 	stw	r4,-12(fp)
    b0a0:	e17ffe15 	stw	r5,-8(fp)
    b0a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b0a8:	e0bffd17 	ldw	r2,-12(fp)
    b0ac:	10800017 	ldw	r2,0(r2)
    b0b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b0b4:	e0bffc17 	ldw	r2,-16(fp)
    b0b8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b0bc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b0c0:	10800217 	ldw	r2,8(r2)
    b0c4:	1809883a 	mov	r4,r3
    b0c8:	e17ffe17 	ldw	r5,-8(fp)
    b0cc:	e1bfff17 	ldw	r6,-4(fp)
    b0d0:	100f883a 	mov	r7,r2
    b0d4:	000b6b40 	call	b6b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b0d8:	e037883a 	mov	sp,fp
    b0dc:	dfc00117 	ldw	ra,4(sp)
    b0e0:	df000017 	ldw	fp,0(sp)
    b0e4:	dec00204 	addi	sp,sp,8
    b0e8:	f800283a 	ret

0000b0ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b0ec:	defffa04 	addi	sp,sp,-24
    b0f0:	dfc00515 	stw	ra,20(sp)
    b0f4:	df000415 	stw	fp,16(sp)
    b0f8:	df000404 	addi	fp,sp,16
    b0fc:	e13ffd15 	stw	r4,-12(fp)
    b100:	e17ffe15 	stw	r5,-8(fp)
    b104:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b108:	e0bffd17 	ldw	r2,-12(fp)
    b10c:	10800017 	ldw	r2,0(r2)
    b110:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b114:	e0bffc17 	ldw	r2,-16(fp)
    b118:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b11c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b120:	10800217 	ldw	r2,8(r2)
    b124:	1809883a 	mov	r4,r3
    b128:	e17ffe17 	ldw	r5,-8(fp)
    b12c:	e1bfff17 	ldw	r6,-4(fp)
    b130:	100f883a 	mov	r7,r2
    b134:	000b8cc0 	call	b8cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b138:	e037883a 	mov	sp,fp
    b13c:	dfc00117 	ldw	ra,4(sp)
    b140:	df000017 	ldw	fp,0(sp)
    b144:	dec00204 	addi	sp,sp,8
    b148:	f800283a 	ret

0000b14c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b14c:	defffc04 	addi	sp,sp,-16
    b150:	dfc00315 	stw	ra,12(sp)
    b154:	df000215 	stw	fp,8(sp)
    b158:	df000204 	addi	fp,sp,8
    b15c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b160:	e0bfff17 	ldw	r2,-4(fp)
    b164:	10800017 	ldw	r2,0(r2)
    b168:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b16c:	e0bffe17 	ldw	r2,-8(fp)
    b170:	10c00a04 	addi	r3,r2,40
    b174:	e0bfff17 	ldw	r2,-4(fp)
    b178:	10800217 	ldw	r2,8(r2)
    b17c:	1809883a 	mov	r4,r3
    b180:	100b883a 	mov	r5,r2
    b184:	000b5580 	call	b558 <altera_avalon_jtag_uart_close>
}
    b188:	e037883a 	mov	sp,fp
    b18c:	dfc00117 	ldw	ra,4(sp)
    b190:	df000017 	ldw	fp,0(sp)
    b194:	dec00204 	addi	sp,sp,8
    b198:	f800283a 	ret

0000b19c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b19c:	defffa04 	addi	sp,sp,-24
    b1a0:	dfc00515 	stw	ra,20(sp)
    b1a4:	df000415 	stw	fp,16(sp)
    b1a8:	df000404 	addi	fp,sp,16
    b1ac:	e13ffd15 	stw	r4,-12(fp)
    b1b0:	e17ffe15 	stw	r5,-8(fp)
    b1b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b1b8:	e0bffd17 	ldw	r2,-12(fp)
    b1bc:	10800017 	ldw	r2,0(r2)
    b1c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b1c4:	e0bffc17 	ldw	r2,-16(fp)
    b1c8:	10800a04 	addi	r2,r2,40
    b1cc:	1009883a 	mov	r4,r2
    b1d0:	e17ffe17 	ldw	r5,-8(fp)
    b1d4:	e1bfff17 	ldw	r6,-4(fp)
    b1d8:	000b5c00 	call	b5c0 <altera_avalon_jtag_uart_ioctl>
}
    b1dc:	e037883a 	mov	sp,fp
    b1e0:	dfc00117 	ldw	ra,4(sp)
    b1e4:	df000017 	ldw	fp,0(sp)
    b1e8:	dec00204 	addi	sp,sp,8
    b1ec:	f800283a 	ret

0000b1f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b1f0:	defffa04 	addi	sp,sp,-24
    b1f4:	dfc00515 	stw	ra,20(sp)
    b1f8:	df000415 	stw	fp,16(sp)
    b1fc:	df000404 	addi	fp,sp,16
    b200:	e13ffd15 	stw	r4,-12(fp)
    b204:	e17ffe15 	stw	r5,-8(fp)
    b208:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b20c:	e0bffd17 	ldw	r2,-12(fp)
    b210:	00c00044 	movi	r3,1
    b214:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b218:	e0bffd17 	ldw	r2,-12(fp)
    b21c:	10800017 	ldw	r2,0(r2)
    b220:	10800104 	addi	r2,r2,4
    b224:	e0fffd17 	ldw	r3,-12(fp)
    b228:	18c00817 	ldw	r3,32(r3)
    b22c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b230:	e0fffe17 	ldw	r3,-8(fp)
    b234:	e0bfff17 	ldw	r2,-4(fp)
    b238:	d8000015 	stw	zero,0(sp)
    b23c:	1809883a 	mov	r4,r3
    b240:	100b883a 	mov	r5,r2
    b244:	01800074 	movhi	r6,1
    b248:	31acac04 	addi	r6,r6,-19792
    b24c:	e1fffd17 	ldw	r7,-12(fp)
    b250:	000c04c0 	call	c04c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b254:	e0bffd17 	ldw	r2,-12(fp)
    b258:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b25c:	e0bffd17 	ldw	r2,-12(fp)
    b260:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b264:	00800074 	movhi	r2,1
    b268:	1082cd04 	addi	r2,r2,2868
    b26c:	10800017 	ldw	r2,0(r2)
    b270:	1809883a 	mov	r4,r3
    b274:	100b883a 	mov	r5,r2
    b278:	01800074 	movhi	r6,1
    b27c:	31ad2d04 	addi	r6,r6,-19276
    b280:	e1fffd17 	ldw	r7,-12(fp)
    b284:	000bd2c0 	call	bd2c <alt_alarm_start>
    b288:	1000040e 	bge	r2,zero,b29c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b28c:	e0bffd17 	ldw	r2,-12(fp)
    b290:	00e00034 	movhi	r3,32768
    b294:	18ffffc4 	addi	r3,r3,-1
    b298:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b29c:	e037883a 	mov	sp,fp
    b2a0:	dfc00117 	ldw	ra,4(sp)
    b2a4:	df000017 	ldw	fp,0(sp)
    b2a8:	dec00204 	addi	sp,sp,8
    b2ac:	f800283a 	ret

0000b2b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b2b0:	defff804 	addi	sp,sp,-32
    b2b4:	df000715 	stw	fp,28(sp)
    b2b8:	df000704 	addi	fp,sp,28
    b2bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b2c0:	e0bfff17 	ldw	r2,-4(fp)
    b2c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    b2c8:	e0bffb17 	ldw	r2,-20(fp)
    b2cc:	10800017 	ldw	r2,0(r2)
    b2d0:	e0bffc15 	stw	r2,-16(fp)
    b2d4:	00000106 	br	b2dc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    b2d8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b2dc:	e0bffc17 	ldw	r2,-16(fp)
    b2e0:	10800104 	addi	r2,r2,4
    b2e4:	10800037 	ldwio	r2,0(r2)
    b2e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b2ec:	e0bffd17 	ldw	r2,-12(fp)
    b2f0:	1080c00c 	andi	r2,r2,768
    b2f4:	10006a26 	beq	r2,zero,b4a0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b2f8:	e0bffd17 	ldw	r2,-12(fp)
    b2fc:	1080400c 	andi	r2,r2,256
    b300:	10003326 	beq	r2,zero,b3d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b304:	00800074 	movhi	r2,1
    b308:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b30c:	e0bffb17 	ldw	r2,-20(fp)
    b310:	10800a17 	ldw	r2,40(r2)
    b314:	10800044 	addi	r2,r2,1
    b318:	1081ffcc 	andi	r2,r2,2047
    b31c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    b320:	e0bffb17 	ldw	r2,-20(fp)
    b324:	10c00b17 	ldw	r3,44(r2)
    b328:	e0bffe17 	ldw	r2,-8(fp)
    b32c:	18801426 	beq	r3,r2,b380 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b330:	e0bffc17 	ldw	r2,-16(fp)
    b334:	10800037 	ldwio	r2,0(r2)
    b338:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b33c:	e0bff917 	ldw	r2,-28(fp)
    b340:	10a0000c 	andi	r2,r2,32768
    b344:	10001026 	beq	r2,zero,b388 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b348:	e0bffb17 	ldw	r2,-20(fp)
    b34c:	10800a17 	ldw	r2,40(r2)
    b350:	e0fff917 	ldw	r3,-28(fp)
    b354:	e13ffb17 	ldw	r4,-20(fp)
    b358:	2085883a 	add	r2,r4,r2
    b35c:	10800e04 	addi	r2,r2,56
    b360:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b364:	e0bffb17 	ldw	r2,-20(fp)
    b368:	10800a17 	ldw	r2,40(r2)
    b36c:	10800044 	addi	r2,r2,1
    b370:	10c1ffcc 	andi	r3,r2,2047
    b374:	e0bffb17 	ldw	r2,-20(fp)
    b378:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b37c:	003fe306 	br	b30c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    b380:	0001883a 	nop
    b384:	00000106 	br	b38c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    b388:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b38c:	e0bff917 	ldw	r2,-28(fp)
    b390:	10bfffec 	andhi	r2,r2,65535
    b394:	10000e26 	beq	r2,zero,b3d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b398:	e0bffb17 	ldw	r2,-20(fp)
    b39c:	10c00817 	ldw	r3,32(r2)
    b3a0:	00bfff84 	movi	r2,-2
    b3a4:	1886703a 	and	r3,r3,r2
    b3a8:	e0bffb17 	ldw	r2,-20(fp)
    b3ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b3b0:	e0bffc17 	ldw	r2,-16(fp)
    b3b4:	10800104 	addi	r2,r2,4
    b3b8:	e0fffb17 	ldw	r3,-20(fp)
    b3bc:	18c00817 	ldw	r3,32(r3)
    b3c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b3c4:	e0bffc17 	ldw	r2,-16(fp)
    b3c8:	10800104 	addi	r2,r2,4
    b3cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b3d0:	e0bffd17 	ldw	r2,-12(fp)
    b3d4:	1080800c 	andi	r2,r2,512
    b3d8:	103fbf26 	beq	r2,zero,b2d8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b3dc:	e0bffd17 	ldw	r2,-12(fp)
    b3e0:	1004d43a 	srli	r2,r2,16
    b3e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b3e8:	00001406 	br	b43c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b3ec:	e0bffc17 	ldw	r2,-16(fp)
    b3f0:	e0fffb17 	ldw	r3,-20(fp)
    b3f4:	18c00d17 	ldw	r3,52(r3)
    b3f8:	e13ffb17 	ldw	r4,-20(fp)
    b3fc:	20c7883a 	add	r3,r4,r3
    b400:	18c20e04 	addi	r3,r3,2104
    b404:	18c00003 	ldbu	r3,0(r3)
    b408:	18c03fcc 	andi	r3,r3,255
    b40c:	18c0201c 	xori	r3,r3,128
    b410:	18ffe004 	addi	r3,r3,-128
    b414:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b418:	e0bffb17 	ldw	r2,-20(fp)
    b41c:	10800d17 	ldw	r2,52(r2)
    b420:	10800044 	addi	r2,r2,1
    b424:	10c1ffcc 	andi	r3,r2,2047
    b428:	e0bffb17 	ldw	r2,-20(fp)
    b42c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b430:	e0bffa17 	ldw	r2,-24(fp)
    b434:	10bfffc4 	addi	r2,r2,-1
    b438:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b43c:	e0bffa17 	ldw	r2,-24(fp)
    b440:	10000526 	beq	r2,zero,b458 <altera_avalon_jtag_uart_irq+0x1a8>
    b444:	e0bffb17 	ldw	r2,-20(fp)
    b448:	10c00d17 	ldw	r3,52(r2)
    b44c:	e0bffb17 	ldw	r2,-20(fp)
    b450:	10800c17 	ldw	r2,48(r2)
    b454:	18bfe51e 	bne	r3,r2,b3ec <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b458:	e0bffa17 	ldw	r2,-24(fp)
    b45c:	103f9e26 	beq	r2,zero,b2d8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b460:	e0bffb17 	ldw	r2,-20(fp)
    b464:	10c00817 	ldw	r3,32(r2)
    b468:	00bfff44 	movi	r2,-3
    b46c:	1886703a 	and	r3,r3,r2
    b470:	e0bffb17 	ldw	r2,-20(fp)
    b474:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b478:	e0bffb17 	ldw	r2,-20(fp)
    b47c:	10800017 	ldw	r2,0(r2)
    b480:	10800104 	addi	r2,r2,4
    b484:	e0fffb17 	ldw	r3,-20(fp)
    b488:	18c00817 	ldw	r3,32(r3)
    b48c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b490:	e0bffc17 	ldw	r2,-16(fp)
    b494:	10800104 	addi	r2,r2,4
    b498:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b49c:	003f8e06 	br	b2d8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    b4a0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    b4a4:	e037883a 	mov	sp,fp
    b4a8:	df000017 	ldw	fp,0(sp)
    b4ac:	dec00104 	addi	sp,sp,4
    b4b0:	f800283a 	ret

0000b4b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b4b4:	defffc04 	addi	sp,sp,-16
    b4b8:	df000315 	stw	fp,12(sp)
    b4bc:	df000304 	addi	fp,sp,12
    b4c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b4c4:	e0bfff17 	ldw	r2,-4(fp)
    b4c8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b4cc:	e0bffd17 	ldw	r2,-12(fp)
    b4d0:	10800017 	ldw	r2,0(r2)
    b4d4:	10800104 	addi	r2,r2,4
    b4d8:	10800037 	ldwio	r2,0(r2)
    b4dc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b4e0:	e0bffe17 	ldw	r2,-8(fp)
    b4e4:	1081000c 	andi	r2,r2,1024
    b4e8:	10000a26 	beq	r2,zero,b514 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b4ec:	e0bffd17 	ldw	r2,-12(fp)
    b4f0:	10800017 	ldw	r2,0(r2)
    b4f4:	10800104 	addi	r2,r2,4
    b4f8:	e0fffd17 	ldw	r3,-12(fp)
    b4fc:	18c00817 	ldw	r3,32(r3)
    b500:	18c10014 	ori	r3,r3,1024
    b504:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b508:	e0bffd17 	ldw	r2,-12(fp)
    b50c:	10000915 	stw	zero,36(r2)
    b510:	00000a06 	br	b53c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b514:	e0bffd17 	ldw	r2,-12(fp)
    b518:	10800917 	ldw	r2,36(r2)
    b51c:	00e00034 	movhi	r3,32768
    b520:	18ffff04 	addi	r3,r3,-4
    b524:	18800536 	bltu	r3,r2,b53c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    b528:	e0bffd17 	ldw	r2,-12(fp)
    b52c:	10800917 	ldw	r2,36(r2)
    b530:	10c00044 	addi	r3,r2,1
    b534:	e0bffd17 	ldw	r2,-12(fp)
    b538:	10c00915 	stw	r3,36(r2)
    b53c:	00800074 	movhi	r2,1
    b540:	1082cd04 	addi	r2,r2,2868
    b544:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b548:	e037883a 	mov	sp,fp
    b54c:	df000017 	ldw	fp,0(sp)
    b550:	dec00104 	addi	sp,sp,4
    b554:	f800283a 	ret

0000b558 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b558:	defffd04 	addi	sp,sp,-12
    b55c:	df000215 	stw	fp,8(sp)
    b560:	df000204 	addi	fp,sp,8
    b564:	e13ffe15 	stw	r4,-8(fp)
    b568:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b56c:	00000506 	br	b584 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    b570:	e0bfff17 	ldw	r2,-4(fp)
    b574:	1090000c 	andi	r2,r2,16384
    b578:	10000226 	beq	r2,zero,b584 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b57c:	00bffd44 	movi	r2,-11
    b580:	00000b06 	br	b5b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	10c00d17 	ldw	r3,52(r2)
    b58c:	e0bffe17 	ldw	r2,-8(fp)
    b590:	10800c17 	ldw	r2,48(r2)
    b594:	18800526 	beq	r3,r2,b5ac <altera_avalon_jtag_uart_close+0x54>
    b598:	e0bffe17 	ldw	r2,-8(fp)
    b59c:	10c00917 	ldw	r3,36(r2)
    b5a0:	e0bffe17 	ldw	r2,-8(fp)
    b5a4:	10800117 	ldw	r2,4(r2)
    b5a8:	18bff136 	bltu	r3,r2,b570 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b5ac:	0005883a 	mov	r2,zero
}
    b5b0:	e037883a 	mov	sp,fp
    b5b4:	df000017 	ldw	fp,0(sp)
    b5b8:	dec00104 	addi	sp,sp,4
    b5bc:	f800283a 	ret

0000b5c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b5c0:	defffa04 	addi	sp,sp,-24
    b5c4:	df000515 	stw	fp,20(sp)
    b5c8:	df000504 	addi	fp,sp,20
    b5cc:	e13ffd15 	stw	r4,-12(fp)
    b5d0:	e17ffe15 	stw	r5,-8(fp)
    b5d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b5d8:	00bff9c4 	movi	r2,-25
    b5dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b5e0:	e0bffe17 	ldw	r2,-8(fp)
    b5e4:	10da8060 	cmpeqi	r3,r2,27137
    b5e8:	1800031e 	bne	r3,zero,b5f8 <altera_avalon_jtag_uart_ioctl+0x38>
    b5ec:	109a80a0 	cmpeqi	r2,r2,27138
    b5f0:	1000181e 	bne	r2,zero,b654 <altera_avalon_jtag_uart_ioctl+0x94>
    b5f4:	00002606 	br	b690 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b5f8:	e0bffd17 	ldw	r2,-12(fp)
    b5fc:	10c00117 	ldw	r3,4(r2)
    b600:	00a00034 	movhi	r2,32768
    b604:	10bfffc4 	addi	r2,r2,-1
    b608:	18802226 	beq	r3,r2,b694 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    b60c:	e0bfff17 	ldw	r2,-4(fp)
    b610:	10800017 	ldw	r2,0(r2)
    b614:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b618:	e0bffc17 	ldw	r2,-16(fp)
    b61c:	10800090 	cmplti	r2,r2,2
    b620:	1000061e 	bne	r2,zero,b63c <altera_avalon_jtag_uart_ioctl+0x7c>
    b624:	e0fffc17 	ldw	r3,-16(fp)
    b628:	00a00034 	movhi	r2,32768
    b62c:	10bfffc4 	addi	r2,r2,-1
    b630:	18800226 	beq	r3,r2,b63c <altera_avalon_jtag_uart_ioctl+0x7c>
    b634:	e0bffc17 	ldw	r2,-16(fp)
    b638:	00000206 	br	b644 <altera_avalon_jtag_uart_ioctl+0x84>
    b63c:	00a00034 	movhi	r2,32768
    b640:	10bfff84 	addi	r2,r2,-2
    b644:	e0fffd17 	ldw	r3,-12(fp)
    b648:	18800115 	stw	r2,4(r3)
      rc = 0;
    b64c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b650:	00001006 	br	b694 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b654:	e0bffd17 	ldw	r2,-12(fp)
    b658:	10c00117 	ldw	r3,4(r2)
    b65c:	00a00034 	movhi	r2,32768
    b660:	10bfffc4 	addi	r2,r2,-1
    b664:	18800d26 	beq	r3,r2,b69c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b668:	e0bffd17 	ldw	r2,-12(fp)
    b66c:	10c00917 	ldw	r3,36(r2)
    b670:	e0bffd17 	ldw	r2,-12(fp)
    b674:	10800117 	ldw	r2,4(r2)
    b678:	1885803a 	cmpltu	r2,r3,r2
    b67c:	10c03fcc 	andi	r3,r2,255
    b680:	e0bfff17 	ldw	r2,-4(fp)
    b684:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b688:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b68c:	00000306 	br	b69c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    b690:	00000306 	br	b6a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b694:	0001883a 	nop
    b698:	00000106 	br	b6a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b69c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b6a0:	e0bffb17 	ldw	r2,-20(fp)
}
    b6a4:	e037883a 	mov	sp,fp
    b6a8:	df000017 	ldw	fp,0(sp)
    b6ac:	dec00104 	addi	sp,sp,4
    b6b0:	f800283a 	ret

0000b6b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b6b4:	defff304 	addi	sp,sp,-52
    b6b8:	dfc00c15 	stw	ra,48(sp)
    b6bc:	df000b15 	stw	fp,44(sp)
    b6c0:	df000b04 	addi	fp,sp,44
    b6c4:	e13ffc15 	stw	r4,-16(fp)
    b6c8:	e17ffd15 	stw	r5,-12(fp)
    b6cc:	e1bffe15 	stw	r6,-8(fp)
    b6d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b6d4:	e0bffd17 	ldw	r2,-12(fp)
    b6d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b6dc:	00004706 	br	b7fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b6e0:	e0bffc17 	ldw	r2,-16(fp)
    b6e4:	10800a17 	ldw	r2,40(r2)
    b6e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b6ec:	e0bffc17 	ldw	r2,-16(fp)
    b6f0:	10800b17 	ldw	r2,44(r2)
    b6f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    b6f8:	e0fff717 	ldw	r3,-36(fp)
    b6fc:	e0bff817 	ldw	r2,-32(fp)
    b700:	18800536 	bltu	r3,r2,b718 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b704:	e0fff717 	ldw	r3,-36(fp)
    b708:	e0bff817 	ldw	r2,-32(fp)
    b70c:	1885c83a 	sub	r2,r3,r2
    b710:	e0bff615 	stw	r2,-40(fp)
    b714:	00000406 	br	b728 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b718:	00c20004 	movi	r3,2048
    b71c:	e0bff817 	ldw	r2,-32(fp)
    b720:	1885c83a 	sub	r2,r3,r2
    b724:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b728:	e0bff617 	ldw	r2,-40(fp)
    b72c:	10001e26 	beq	r2,zero,b7a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    b730:	e0fffe17 	ldw	r3,-8(fp)
    b734:	e0bff617 	ldw	r2,-40(fp)
    b738:	1880022e 	bgeu	r3,r2,b744 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    b73c:	e0bffe17 	ldw	r2,-8(fp)
    b740:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b744:	e0bff817 	ldw	r2,-32(fp)
    b748:	10800e04 	addi	r2,r2,56
    b74c:	e0fffc17 	ldw	r3,-16(fp)
    b750:	1885883a 	add	r2,r3,r2
    b754:	e13ff517 	ldw	r4,-44(fp)
    b758:	100b883a 	mov	r5,r2
    b75c:	e1bff617 	ldw	r6,-40(fp)
    b760:	00064800 	call	6480 <memcpy>
      ptr   += n;
    b764:	e0fff517 	ldw	r3,-44(fp)
    b768:	e0bff617 	ldw	r2,-40(fp)
    b76c:	1885883a 	add	r2,r3,r2
    b770:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    b774:	e0fffe17 	ldw	r3,-8(fp)
    b778:	e0bff617 	ldw	r2,-40(fp)
    b77c:	1885c83a 	sub	r2,r3,r2
    b780:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b784:	e0fff817 	ldw	r3,-32(fp)
    b788:	e0bff617 	ldw	r2,-40(fp)
    b78c:	1885883a 	add	r2,r3,r2
    b790:	10c1ffcc 	andi	r3,r2,2047
    b794:	e0bffc17 	ldw	r2,-16(fp)
    b798:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b79c:	e0bffe17 	ldw	r2,-8(fp)
    b7a0:	00bfcf16 	blt	zero,r2,b6e0 <altera_avalon_jtag_uart_read+0x2c>
    b7a4:	00000106 	br	b7ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b7a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b7ac:	e0fff517 	ldw	r3,-44(fp)
    b7b0:	e0bffd17 	ldw	r2,-12(fp)
    b7b4:	1880141e 	bne	r3,r2,b808 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b7b8:	e0bfff17 	ldw	r2,-4(fp)
    b7bc:	1090000c 	andi	r2,r2,16384
    b7c0:	1000131e 	bne	r2,zero,b810 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b7c4:	0001883a 	nop
    b7c8:	e0bffc17 	ldw	r2,-16(fp)
    b7cc:	10c00a17 	ldw	r3,40(r2)
    b7d0:	e0bff717 	ldw	r2,-36(fp)
    b7d4:	1880051e 	bne	r3,r2,b7ec <altera_avalon_jtag_uart_read+0x138>
    b7d8:	e0bffc17 	ldw	r2,-16(fp)
    b7dc:	10c00917 	ldw	r3,36(r2)
    b7e0:	e0bffc17 	ldw	r2,-16(fp)
    b7e4:	10800117 	ldw	r2,4(r2)
    b7e8:	18bff736 	bltu	r3,r2,b7c8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b7ec:	e0bffc17 	ldw	r2,-16(fp)
    b7f0:	10c00a17 	ldw	r3,40(r2)
    b7f4:	e0bff717 	ldw	r2,-36(fp)
    b7f8:	18800726 	beq	r3,r2,b818 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b7fc:	e0bffe17 	ldw	r2,-8(fp)
    b800:	00bfb716 	blt	zero,r2,b6e0 <altera_avalon_jtag_uart_read+0x2c>
    b804:	00000506 	br	b81c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b808:	0001883a 	nop
    b80c:	00000306 	br	b81c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b810:	0001883a 	nop
    b814:	00000106 	br	b81c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b818:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b81c:	e0fff517 	ldw	r3,-44(fp)
    b820:	e0bffd17 	ldw	r2,-12(fp)
    b824:	18801726 	beq	r3,r2,b884 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b828:	0005303a 	rdctl	r2,status
    b82c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b830:	e0fffa17 	ldw	r3,-24(fp)
    b834:	00bfff84 	movi	r2,-2
    b838:	1884703a 	and	r2,r3,r2
    b83c:	1001703a 	wrctl	status,r2
  
  return context;
    b840:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b844:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b848:	e0bffc17 	ldw	r2,-16(fp)
    b84c:	10800817 	ldw	r2,32(r2)
    b850:	10c00054 	ori	r3,r2,1
    b854:	e0bffc17 	ldw	r2,-16(fp)
    b858:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b85c:	e0bffc17 	ldw	r2,-16(fp)
    b860:	10800017 	ldw	r2,0(r2)
    b864:	10800104 	addi	r2,r2,4
    b868:	e0fffc17 	ldw	r3,-16(fp)
    b86c:	18c00817 	ldw	r3,32(r3)
    b870:	10c00035 	stwio	r3,0(r2)
    b874:	e0bff917 	ldw	r2,-28(fp)
    b878:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b87c:	e0bffb17 	ldw	r2,-20(fp)
    b880:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b884:	e0fff517 	ldw	r3,-44(fp)
    b888:	e0bffd17 	ldw	r2,-12(fp)
    b88c:	18800426 	beq	r3,r2,b8a0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    b890:	e0fff517 	ldw	r3,-44(fp)
    b894:	e0bffd17 	ldw	r2,-12(fp)
    b898:	1885c83a 	sub	r2,r3,r2
    b89c:	00000606 	br	b8b8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    b8a0:	e0bfff17 	ldw	r2,-4(fp)
    b8a4:	1090000c 	andi	r2,r2,16384
    b8a8:	10000226 	beq	r2,zero,b8b4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    b8ac:	00bffd44 	movi	r2,-11
    b8b0:	00000106 	br	b8b8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    b8b4:	00bffec4 	movi	r2,-5
}
    b8b8:	e037883a 	mov	sp,fp
    b8bc:	dfc00117 	ldw	ra,4(sp)
    b8c0:	df000017 	ldw	fp,0(sp)
    b8c4:	dec00204 	addi	sp,sp,8
    b8c8:	f800283a 	ret

0000b8cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b8cc:	defff304 	addi	sp,sp,-52
    b8d0:	dfc00c15 	stw	ra,48(sp)
    b8d4:	df000b15 	stw	fp,44(sp)
    b8d8:	df000b04 	addi	fp,sp,44
    b8dc:	e13ffc15 	stw	r4,-16(fp)
    b8e0:	e17ffd15 	stw	r5,-12(fp)
    b8e4:	e1bffe15 	stw	r6,-8(fp)
    b8e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b8ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b8f0:	e0bffd17 	ldw	r2,-12(fp)
    b8f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b8f8:	00003706 	br	b9d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b8fc:	e0bffc17 	ldw	r2,-16(fp)
    b900:	10800c17 	ldw	r2,48(r2)
    b904:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    b908:	e0bffc17 	ldw	r2,-16(fp)
    b90c:	10800d17 	ldw	r2,52(r2)
    b910:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    b914:	e0fff817 	ldw	r3,-32(fp)
    b918:	e0bff517 	ldw	r2,-44(fp)
    b91c:	1880062e 	bgeu	r3,r2,b938 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b920:	e0fff517 	ldw	r3,-44(fp)
    b924:	e0bff817 	ldw	r2,-32(fp)
    b928:	1885c83a 	sub	r2,r3,r2
    b92c:	10bfffc4 	addi	r2,r2,-1
    b930:	e0bff615 	stw	r2,-40(fp)
    b934:	00000b06 	br	b964 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    b938:	e0bff517 	ldw	r2,-44(fp)
    b93c:	10000526 	beq	r2,zero,b954 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b940:	00c20004 	movi	r3,2048
    b944:	e0bff817 	ldw	r2,-32(fp)
    b948:	1885c83a 	sub	r2,r3,r2
    b94c:	e0bff615 	stw	r2,-40(fp)
    b950:	00000406 	br	b964 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b954:	00c1ffc4 	movi	r3,2047
    b958:	e0bff817 	ldw	r2,-32(fp)
    b95c:	1885c83a 	sub	r2,r3,r2
    b960:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b964:	e0bff617 	ldw	r2,-40(fp)
    b968:	10001e26 	beq	r2,zero,b9e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    b96c:	e0fffe17 	ldw	r3,-8(fp)
    b970:	e0bff617 	ldw	r2,-40(fp)
    b974:	1880022e 	bgeu	r3,r2,b980 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    b978:	e0bffe17 	ldw	r2,-8(fp)
    b97c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b980:	e0bff817 	ldw	r2,-32(fp)
    b984:	10820e04 	addi	r2,r2,2104
    b988:	e0fffc17 	ldw	r3,-16(fp)
    b98c:	1885883a 	add	r2,r3,r2
    b990:	1009883a 	mov	r4,r2
    b994:	e17ffd17 	ldw	r5,-12(fp)
    b998:	e1bff617 	ldw	r6,-40(fp)
    b99c:	00064800 	call	6480 <memcpy>
      ptr   += n;
    b9a0:	e0fffd17 	ldw	r3,-12(fp)
    b9a4:	e0bff617 	ldw	r2,-40(fp)
    b9a8:	1885883a 	add	r2,r3,r2
    b9ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b9b0:	e0fffe17 	ldw	r3,-8(fp)
    b9b4:	e0bff617 	ldw	r2,-40(fp)
    b9b8:	1885c83a 	sub	r2,r3,r2
    b9bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b9c0:	e0fff817 	ldw	r3,-32(fp)
    b9c4:	e0bff617 	ldw	r2,-40(fp)
    b9c8:	1885883a 	add	r2,r3,r2
    b9cc:	10c1ffcc 	andi	r3,r2,2047
    b9d0:	e0bffc17 	ldw	r2,-16(fp)
    b9d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b9d8:	e0bffe17 	ldw	r2,-8(fp)
    b9dc:	00bfc716 	blt	zero,r2,b8fc <altera_avalon_jtag_uart_write+0x30>
    b9e0:	00000106 	br	b9e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b9e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9e8:	0005303a 	rdctl	r2,status
    b9ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9f0:	e0fffa17 	ldw	r3,-24(fp)
    b9f4:	00bfff84 	movi	r2,-2
    b9f8:	1884703a 	and	r2,r3,r2
    b9fc:	1001703a 	wrctl	status,r2
  
  return context;
    ba00:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ba04:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ba08:	e0bffc17 	ldw	r2,-16(fp)
    ba0c:	10800817 	ldw	r2,32(r2)
    ba10:	10c00094 	ori	r3,r2,2
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ba1c:	e0bffc17 	ldw	r2,-16(fp)
    ba20:	10800017 	ldw	r2,0(r2)
    ba24:	10800104 	addi	r2,r2,4
    ba28:	e0fffc17 	ldw	r3,-16(fp)
    ba2c:	18c00817 	ldw	r3,32(r3)
    ba30:	10c00035 	stwio	r3,0(r2)
    ba34:	e0bff917 	ldw	r2,-28(fp)
    ba38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba3c:	e0bffb17 	ldw	r2,-20(fp)
    ba40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ba44:	e0bffe17 	ldw	r2,-8(fp)
    ba48:	0080110e 	bge	zero,r2,ba90 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ba4c:	e0bfff17 	ldw	r2,-4(fp)
    ba50:	1090000c 	andi	r2,r2,16384
    ba54:	1000111e 	bne	r2,zero,ba9c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ba58:	0001883a 	nop
    ba5c:	e0bffc17 	ldw	r2,-16(fp)
    ba60:	10c00d17 	ldw	r3,52(r2)
    ba64:	e0bff517 	ldw	r2,-44(fp)
    ba68:	1880051e 	bne	r3,r2,ba80 <altera_avalon_jtag_uart_write+0x1b4>
    ba6c:	e0bffc17 	ldw	r2,-16(fp)
    ba70:	10c00917 	ldw	r3,36(r2)
    ba74:	e0bffc17 	ldw	r2,-16(fp)
    ba78:	10800117 	ldw	r2,4(r2)
    ba7c:	18bff736 	bltu	r3,r2,ba5c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    ba80:	e0bffc17 	ldw	r2,-16(fp)
    ba84:	10c00d17 	ldw	r3,52(r2)
    ba88:	e0bff517 	ldw	r2,-44(fp)
    ba8c:	18800526 	beq	r3,r2,baa4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ba90:	e0bffe17 	ldw	r2,-8(fp)
    ba94:	00bfd016 	blt	zero,r2,b9d8 <altera_avalon_jtag_uart_write+0x10c>
    ba98:	00000306 	br	baa8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ba9c:	0001883a 	nop
    baa0:	00000106 	br	baa8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    baa4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    baa8:	e0fffd17 	ldw	r3,-12(fp)
    baac:	e0bff717 	ldw	r2,-36(fp)
    bab0:	18800426 	beq	r3,r2,bac4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    bab4:	e0fffd17 	ldw	r3,-12(fp)
    bab8:	e0bff717 	ldw	r2,-36(fp)
    babc:	1885c83a 	sub	r2,r3,r2
    bac0:	00000606 	br	badc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    bac4:	e0bfff17 	ldw	r2,-4(fp)
    bac8:	1090000c 	andi	r2,r2,16384
    bacc:	10000226 	beq	r2,zero,bad8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    bad0:	00bffd44 	movi	r2,-11
    bad4:	00000106 	br	badc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    bad8:	00bffec4 	movi	r2,-5
}
    badc:	e037883a 	mov	sp,fp
    bae0:	dfc00117 	ldw	ra,4(sp)
    bae4:	df000017 	ldw	fp,0(sp)
    bae8:	dec00204 	addi	sp,sp,8
    baec:	f800283a 	ret

0000baf0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    baf0:	defffa04 	addi	sp,sp,-24
    baf4:	dfc00515 	stw	ra,20(sp)
    baf8:	df000415 	stw	fp,16(sp)
    bafc:	df000404 	addi	fp,sp,16
    bb00:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bb04:	0007883a 	mov	r3,zero
    bb08:	e0bfff17 	ldw	r2,-4(fp)
    bb0c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bb10:	e0bfff17 	ldw	r2,-4(fp)
    bb14:	10800104 	addi	r2,r2,4
    bb18:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb1c:	0005303a 	rdctl	r2,status
    bb20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb24:	e0fffd17 	ldw	r3,-12(fp)
    bb28:	00bfff84 	movi	r2,-2
    bb2c:	1884703a 	and	r2,r3,r2
    bb30:	1001703a 	wrctl	status,r2
  
  return context;
    bb34:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bb38:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    bb3c:	000c79c0 	call	c79c <alt_tick>
    bb40:	e0bffc17 	ldw	r2,-16(fp)
    bb44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb48:	e0bffe17 	ldw	r2,-8(fp)
    bb4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bb50:	e037883a 	mov	sp,fp
    bb54:	dfc00117 	ldw	ra,4(sp)
    bb58:	df000017 	ldw	fp,0(sp)
    bb5c:	dec00204 	addi	sp,sp,8
    bb60:	f800283a 	ret

0000bb64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bb64:	defff804 	addi	sp,sp,-32
    bb68:	dfc00715 	stw	ra,28(sp)
    bb6c:	df000615 	stw	fp,24(sp)
    bb70:	df000604 	addi	fp,sp,24
    bb74:	e13ffc15 	stw	r4,-16(fp)
    bb78:	e17ffd15 	stw	r5,-12(fp)
    bb7c:	e1bffe15 	stw	r6,-8(fp)
    bb80:	e1ffff15 	stw	r7,-4(fp)
    bb84:	e0bfff17 	ldw	r2,-4(fp)
    bb88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bb8c:	00800074 	movhi	r2,1
    bb90:	1082cd04 	addi	r2,r2,2868
    bb94:	10800017 	ldw	r2,0(r2)
    bb98:	1000041e 	bne	r2,zero,bbac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    bb9c:	00800074 	movhi	r2,1
    bba0:	1082cd04 	addi	r2,r2,2868
    bba4:	e0fffb17 	ldw	r3,-20(fp)
    bba8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bbac:	e0bffc17 	ldw	r2,-16(fp)
    bbb0:	10800104 	addi	r2,r2,4
    bbb4:	00c001c4 	movi	r3,7
    bbb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    bbbc:	d8000015 	stw	zero,0(sp)
    bbc0:	e13ffd17 	ldw	r4,-12(fp)
    bbc4:	e17ffe17 	ldw	r5,-8(fp)
    bbc8:	01800074 	movhi	r6,1
    bbcc:	31aebc04 	addi	r6,r6,-17680
    bbd0:	e1fffc17 	ldw	r7,-16(fp)
    bbd4:	000c04c0 	call	c04c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    bbd8:	e037883a 	mov	sp,fp
    bbdc:	dfc00117 	ldw	ra,4(sp)
    bbe0:	df000017 	ldw	fp,0(sp)
    bbe4:	dec00204 	addi	sp,sp,8
    bbe8:	f800283a 	ret

0000bbec <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    bbec:	defffe04 	addi	sp,sp,-8
    bbf0:	df000115 	stw	fp,4(sp)
    bbf4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    bbf8:	00800074 	movhi	r2,1
    bbfc:	1082ca04 	addi	r2,r2,2856
    bc00:	10800017 	ldw	r2,0(r2)
    bc04:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    bc08:	00800074 	movhi	r2,1
    bc0c:	1082cb04 	addi	r2,r2,2860
    bc10:	10800017 	ldw	r2,0(r2)
    bc14:	1000021e 	bne	r2,zero,bc20 <alt_timestamp_start+0x34>
  {
    return -1;
    bc18:	00bfffc4 	movi	r2,-1
    bc1c:	00001106 	br	bc64 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    bc20:	e0bfff17 	ldw	r2,-4(fp)
    bc24:	10800104 	addi	r2,r2,4
    bc28:	00c00204 	movi	r3,8
    bc2c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    bc30:	e0bfff17 	ldw	r2,-4(fp)
    bc34:	10800204 	addi	r2,r2,8
    bc38:	00ffffd4 	movui	r3,65535
    bc3c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    bc40:	e0bfff17 	ldw	r2,-4(fp)
    bc44:	10800304 	addi	r2,r2,12
    bc48:	00ffffd4 	movui	r3,65535
    bc4c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    bc50:	e0bfff17 	ldw	r2,-4(fp)
    bc54:	10800104 	addi	r2,r2,4
    bc58:	00c00104 	movi	r3,4
    bc5c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    bc60:	0005883a 	mov	r2,zero
}
    bc64:	e037883a 	mov	sp,fp
    bc68:	df000017 	ldw	fp,0(sp)
    bc6c:	dec00104 	addi	sp,sp,4
    bc70:	f800283a 	ret

0000bc74 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    bc74:	defffc04 	addi	sp,sp,-16
    bc78:	df000315 	stw	fp,12(sp)
    bc7c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    bc80:	00800074 	movhi	r2,1
    bc84:	1082ca04 	addi	r2,r2,2856
    bc88:	10800017 	ldw	r2,0(r2)
    bc8c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    bc90:	00800074 	movhi	r2,1
    bc94:	1082cb04 	addi	r2,r2,2860
    bc98:	10800017 	ldw	r2,0(r2)
    bc9c:	1000021e 	bne	r2,zero,bca8 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    bca0:	00bfffc4 	movi	r2,-1
    bca4:	00001306 	br	bcf4 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    bca8:	e0bffd17 	ldw	r2,-12(fp)
    bcac:	10800404 	addi	r2,r2,16
    bcb0:	0007883a 	mov	r3,zero
    bcb4:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    bcb8:	e0bffd17 	ldw	r2,-12(fp)
    bcbc:	10800404 	addi	r2,r2,16
    bcc0:	10800037 	ldwio	r2,0(r2)
    bcc4:	10bfffcc 	andi	r2,r2,65535
    bcc8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    bccc:	e0bffd17 	ldw	r2,-12(fp)
    bcd0:	10800504 	addi	r2,r2,20
    bcd4:	10800037 	ldwio	r2,0(r2)
    bcd8:	10bfffcc 	andi	r2,r2,65535
    bcdc:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    bce0:	e0bfff17 	ldw	r2,-4(fp)
    bce4:	1006943a 	slli	r3,r2,16
    bce8:	e0bffe17 	ldw	r2,-8(fp)
    bcec:	1884b03a 	or	r2,r3,r2
    bcf0:	0084303a 	nor	r2,zero,r2
    }  
  }
}
    bcf4:	e037883a 	mov	sp,fp
    bcf8:	df000017 	ldw	fp,0(sp)
    bcfc:	dec00104 	addi	sp,sp,4
    bd00:	f800283a 	ret

0000bd04 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    bd04:	deffff04 	addi	sp,sp,-4
    bd08:	df000015 	stw	fp,0(sp)
    bd0c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    bd10:	00800074 	movhi	r2,1
    bd14:	1082cb04 	addi	r2,r2,2860
    bd18:	10800017 	ldw	r2,0(r2)
}
    bd1c:	e037883a 	mov	sp,fp
    bd20:	df000017 	ldw	fp,0(sp)
    bd24:	dec00104 	addi	sp,sp,4
    bd28:	f800283a 	ret

0000bd2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bd2c:	defff504 	addi	sp,sp,-44
    bd30:	df000a15 	stw	fp,40(sp)
    bd34:	df000a04 	addi	fp,sp,40
    bd38:	e13ffc15 	stw	r4,-16(fp)
    bd3c:	e17ffd15 	stw	r5,-12(fp)
    bd40:	e1bffe15 	stw	r6,-8(fp)
    bd44:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bd48:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bd4c:	00800074 	movhi	r2,1
    bd50:	1082cd04 	addi	r2,r2,2868
    bd54:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    bd58:	10003f26 	beq	r2,zero,be58 <alt_alarm_start+0x12c>
  {
    if (alarm)
    bd5c:	e0bffc17 	ldw	r2,-16(fp)
    bd60:	10003b26 	beq	r2,zero,be50 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    bd64:	e0bffc17 	ldw	r2,-16(fp)
    bd68:	e0fffe17 	ldw	r3,-8(fp)
    bd6c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    bd70:	e0bffc17 	ldw	r2,-16(fp)
    bd74:	e0ffff17 	ldw	r3,-4(fp)
    bd78:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd7c:	0005303a 	rdctl	r2,status
    bd80:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd84:	e0fff817 	ldw	r3,-32(fp)
    bd88:	00bfff84 	movi	r2,-2
    bd8c:	1884703a 	and	r2,r3,r2
    bd90:	1001703a 	wrctl	status,r2
  
  return context;
    bd94:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bd98:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bd9c:	00800074 	movhi	r2,1
    bda0:	1082ce04 	addi	r2,r2,2872
    bda4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bda8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bdac:	e0fffd17 	ldw	r3,-12(fp)
    bdb0:	e0bff617 	ldw	r2,-40(fp)
    bdb4:	1885883a 	add	r2,r3,r2
    bdb8:	10c00044 	addi	r3,r2,1
    bdbc:	e0bffc17 	ldw	r2,-16(fp)
    bdc0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bdc4:	e0bffc17 	ldw	r2,-16(fp)
    bdc8:	10c00217 	ldw	r3,8(r2)
    bdcc:	e0bff617 	ldw	r2,-40(fp)
    bdd0:	1880042e 	bgeu	r3,r2,bde4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    bdd4:	e0bffc17 	ldw	r2,-16(fp)
    bdd8:	00c00044 	movi	r3,1
    bddc:	10c00405 	stb	r3,16(r2)
    bde0:	00000206 	br	bdec <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    bde4:	e0bffc17 	ldw	r2,-16(fp)
    bde8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bdec:	e0bffc17 	ldw	r2,-16(fp)
    bdf0:	00c00074 	movhi	r3,1
    bdf4:	18fc2804 	addi	r3,r3,-3936
    bdf8:	e0fff915 	stw	r3,-28(fp)
    bdfc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    be00:	e0bffa17 	ldw	r2,-24(fp)
    be04:	e0fff917 	ldw	r3,-28(fp)
    be08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    be0c:	e0bff917 	ldw	r2,-28(fp)
    be10:	10c00017 	ldw	r3,0(r2)
    be14:	e0bffa17 	ldw	r2,-24(fp)
    be18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    be1c:	e0bff917 	ldw	r2,-28(fp)
    be20:	10800017 	ldw	r2,0(r2)
    be24:	e0fffa17 	ldw	r3,-24(fp)
    be28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    be2c:	e0bff917 	ldw	r2,-28(fp)
    be30:	e0fffa17 	ldw	r3,-24(fp)
    be34:	10c00015 	stw	r3,0(r2)
    be38:	e0bff717 	ldw	r2,-36(fp)
    be3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be40:	e0bffb17 	ldw	r2,-20(fp)
    be44:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    be48:	0005883a 	mov	r2,zero
    be4c:	00000306 	br	be5c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    be50:	00bffa84 	movi	r2,-22
    be54:	00000106 	br	be5c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    be58:	00bfde84 	movi	r2,-134
  }
}
    be5c:	e037883a 	mov	sp,fp
    be60:	df000017 	ldw	fp,0(sp)
    be64:	dec00104 	addi	sp,sp,4
    be68:	f800283a 	ret

0000be6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    be6c:	deffff04 	addi	sp,sp,-4
    be70:	df000015 	stw	fp,0(sp)
    be74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    be78:	e037883a 	mov	sp,fp
    be7c:	df000017 	ldw	fp,0(sp)
    be80:	dec00104 	addi	sp,sp,4
    be84:	f800283a 	ret

0000be88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be88:	defffe04 	addi	sp,sp,-8
    be8c:	dfc00115 	stw	ra,4(sp)
    be90:	df000015 	stw	fp,0(sp)
    be94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    be98:	00800074 	movhi	r2,1
    be9c:	10bc2504 	addi	r2,r2,-3948
    bea0:	10800017 	ldw	r2,0(r2)
    bea4:	10000526 	beq	r2,zero,bebc <alt_get_errno+0x34>
    bea8:	00800074 	movhi	r2,1
    beac:	10bc2504 	addi	r2,r2,-3948
    beb0:	10800017 	ldw	r2,0(r2)
    beb4:	103ee83a 	callr	r2
    beb8:	00000206 	br	bec4 <alt_get_errno+0x3c>
    bebc:	00800074 	movhi	r2,1
    bec0:	1082c604 	addi	r2,r2,2840
}
    bec4:	e037883a 	mov	sp,fp
    bec8:	dfc00117 	ldw	ra,4(sp)
    becc:	df000017 	ldw	fp,0(sp)
    bed0:	dec00204 	addi	sp,sp,8
    bed4:	f800283a 	ret

0000bed8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bed8:	defffa04 	addi	sp,sp,-24
    bedc:	dfc00515 	stw	ra,20(sp)
    bee0:	df000415 	stw	fp,16(sp)
    bee4:	df000404 	addi	fp,sp,16
    bee8:	e13ffe15 	stw	r4,-8(fp)
    beec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bef0:	e0bffe17 	ldw	r2,-8(fp)
    bef4:	10000326 	beq	r2,zero,bf04 <alt_dev_llist_insert+0x2c>
    bef8:	e0bffe17 	ldw	r2,-8(fp)
    befc:	10800217 	ldw	r2,8(r2)
    bf00:	1000051e 	bne	r2,zero,bf18 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    bf04:	000be880 	call	be88 <alt_get_errno>
    bf08:	00c00584 	movi	r3,22
    bf0c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    bf10:	00bffa84 	movi	r2,-22
    bf14:	00001306 	br	bf64 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bf18:	e0bffe17 	ldw	r2,-8(fp)
    bf1c:	e0ffff17 	ldw	r3,-4(fp)
    bf20:	e0fffc15 	stw	r3,-16(fp)
    bf24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bf28:	e0bffd17 	ldw	r2,-12(fp)
    bf2c:	e0fffc17 	ldw	r3,-16(fp)
    bf30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bf34:	e0bffc17 	ldw	r2,-16(fp)
    bf38:	10c00017 	ldw	r3,0(r2)
    bf3c:	e0bffd17 	ldw	r2,-12(fp)
    bf40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bf44:	e0bffc17 	ldw	r2,-16(fp)
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	e0fffd17 	ldw	r3,-12(fp)
    bf50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bf54:	e0bffc17 	ldw	r2,-16(fp)
    bf58:	e0fffd17 	ldw	r3,-12(fp)
    bf5c:	10c00015 	stw	r3,0(r2)

  return 0;  
    bf60:	0005883a 	mov	r2,zero
}
    bf64:	e037883a 	mov	sp,fp
    bf68:	dfc00117 	ldw	ra,4(sp)
    bf6c:	df000017 	ldw	fp,0(sp)
    bf70:	dec00204 	addi	sp,sp,8
    bf74:	f800283a 	ret

0000bf78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bf78:	defffd04 	addi	sp,sp,-12
    bf7c:	dfc00215 	stw	ra,8(sp)
    bf80:	df000115 	stw	fp,4(sp)
    bf84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bf88:	00800074 	movhi	r2,1
    bf8c:	10b33d04 	addi	r2,r2,-13068
    bf90:	e0bfff15 	stw	r2,-4(fp)
    bf94:	00000606 	br	bfb0 <_do_ctors+0x38>
        (*ctor) (); 
    bf98:	e0bfff17 	ldw	r2,-4(fp)
    bf9c:	10800017 	ldw	r2,0(r2)
    bfa0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bfa4:	e0bfff17 	ldw	r2,-4(fp)
    bfa8:	10bfff04 	addi	r2,r2,-4
    bfac:	e0bfff15 	stw	r2,-4(fp)
    bfb0:	e0ffff17 	ldw	r3,-4(fp)
    bfb4:	00800074 	movhi	r2,1
    bfb8:	10b33e04 	addi	r2,r2,-13064
    bfbc:	18bff62e 	bgeu	r3,r2,bf98 <_do_ctors+0x20>
        (*ctor) (); 
}
    bfc0:	e037883a 	mov	sp,fp
    bfc4:	dfc00117 	ldw	ra,4(sp)
    bfc8:	df000017 	ldw	fp,0(sp)
    bfcc:	dec00204 	addi	sp,sp,8
    bfd0:	f800283a 	ret

0000bfd4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bfd4:	defffd04 	addi	sp,sp,-12
    bfd8:	dfc00215 	stw	ra,8(sp)
    bfdc:	df000115 	stw	fp,4(sp)
    bfe0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bfe4:	00800074 	movhi	r2,1
    bfe8:	10b33d04 	addi	r2,r2,-13068
    bfec:	e0bfff15 	stw	r2,-4(fp)
    bff0:	00000606 	br	c00c <_do_dtors+0x38>
        (*dtor) (); 
    bff4:	e0bfff17 	ldw	r2,-4(fp)
    bff8:	10800017 	ldw	r2,0(r2)
    bffc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c000:	e0bfff17 	ldw	r2,-4(fp)
    c004:	10bfff04 	addi	r2,r2,-4
    c008:	e0bfff15 	stw	r2,-4(fp)
    c00c:	e0ffff17 	ldw	r3,-4(fp)
    c010:	00800074 	movhi	r2,1
    c014:	10b33e04 	addi	r2,r2,-13064
    c018:	18bff62e 	bgeu	r3,r2,bff4 <_do_dtors+0x20>
        (*dtor) (); 
}
    c01c:	e037883a 	mov	sp,fp
    c020:	dfc00117 	ldw	ra,4(sp)
    c024:	df000017 	ldw	fp,0(sp)
    c028:	dec00204 	addi	sp,sp,8
    c02c:	f800283a 	ret

0000c030 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c030:	deffff04 	addi	sp,sp,-4
    c034:	df000015 	stw	fp,0(sp)
    c038:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c03c:	e037883a 	mov	sp,fp
    c040:	df000017 	ldw	fp,0(sp)
    c044:	dec00104 	addi	sp,sp,4
    c048:	f800283a 	ret

0000c04c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c04c:	defff904 	addi	sp,sp,-28
    c050:	dfc00615 	stw	ra,24(sp)
    c054:	df000515 	stw	fp,20(sp)
    c058:	df000504 	addi	fp,sp,20
    c05c:	e13ffc15 	stw	r4,-16(fp)
    c060:	e17ffd15 	stw	r5,-12(fp)
    c064:	e1bffe15 	stw	r6,-8(fp)
    c068:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c06c:	e0800217 	ldw	r2,8(fp)
    c070:	d8800015 	stw	r2,0(sp)
    c074:	e13ffc17 	ldw	r4,-16(fp)
    c078:	e17ffd17 	ldw	r5,-12(fp)
    c07c:	e1bffe17 	ldw	r6,-8(fp)
    c080:	e1ffff17 	ldw	r7,-4(fp)
    c084:	000c2240 	call	c224 <alt_iic_isr_register>
}  
    c088:	e037883a 	mov	sp,fp
    c08c:	dfc00117 	ldw	ra,4(sp)
    c090:	df000017 	ldw	fp,0(sp)
    c094:	dec00204 	addi	sp,sp,8
    c098:	f800283a 	ret

0000c09c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c09c:	defff904 	addi	sp,sp,-28
    c0a0:	df000615 	stw	fp,24(sp)
    c0a4:	df000604 	addi	fp,sp,24
    c0a8:	e13ffe15 	stw	r4,-8(fp)
    c0ac:	e17fff15 	stw	r5,-4(fp)
    c0b0:	e0bfff17 	ldw	r2,-4(fp)
    c0b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0b8:	0005303a 	rdctl	r2,status
    c0bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0c0:	e0fffb17 	ldw	r3,-20(fp)
    c0c4:	00bfff84 	movi	r2,-2
    c0c8:	1884703a 	and	r2,r3,r2
    c0cc:	1001703a 	wrctl	status,r2
  
  return context;
    c0d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c0d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    c0d8:	e0bffa17 	ldw	r2,-24(fp)
    c0dc:	00c00044 	movi	r3,1
    c0e0:	1884983a 	sll	r2,r3,r2
    c0e4:	1007883a 	mov	r3,r2
    c0e8:	00800074 	movhi	r2,1
    c0ec:	1082cc04 	addi	r2,r2,2864
    c0f0:	10800017 	ldw	r2,0(r2)
    c0f4:	1886b03a 	or	r3,r3,r2
    c0f8:	00800074 	movhi	r2,1
    c0fc:	1082cc04 	addi	r2,r2,2864
    c100:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c104:	00800074 	movhi	r2,1
    c108:	1082cc04 	addi	r2,r2,2864
    c10c:	10800017 	ldw	r2,0(r2)
    c110:	100170fa 	wrctl	ienable,r2
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c11c:	e0bffd17 	ldw	r2,-12(fp)
    c120:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c124:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c128:	e037883a 	mov	sp,fp
    c12c:	df000017 	ldw	fp,0(sp)
    c130:	dec00104 	addi	sp,sp,4
    c134:	f800283a 	ret

0000c138 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c138:	defff904 	addi	sp,sp,-28
    c13c:	df000615 	stw	fp,24(sp)
    c140:	df000604 	addi	fp,sp,24
    c144:	e13ffe15 	stw	r4,-8(fp)
    c148:	e17fff15 	stw	r5,-4(fp)
    c14c:	e0bfff17 	ldw	r2,-4(fp)
    c150:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c154:	0005303a 	rdctl	r2,status
    c158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c15c:	e0fffb17 	ldw	r3,-20(fp)
    c160:	00bfff84 	movi	r2,-2
    c164:	1884703a 	and	r2,r3,r2
    c168:	1001703a 	wrctl	status,r2
  
  return context;
    c16c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c170:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    c174:	e0bffa17 	ldw	r2,-24(fp)
    c178:	00c00044 	movi	r3,1
    c17c:	1884983a 	sll	r2,r3,r2
    c180:	0084303a 	nor	r2,zero,r2
    c184:	1007883a 	mov	r3,r2
    c188:	00800074 	movhi	r2,1
    c18c:	1082cc04 	addi	r2,r2,2864
    c190:	10800017 	ldw	r2,0(r2)
    c194:	1886703a 	and	r3,r3,r2
    c198:	00800074 	movhi	r2,1
    c19c:	1082cc04 	addi	r2,r2,2864
    c1a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c1a4:	00800074 	movhi	r2,1
    c1a8:	1082cc04 	addi	r2,r2,2864
    c1ac:	10800017 	ldw	r2,0(r2)
    c1b0:	100170fa 	wrctl	ienable,r2
    c1b4:	e0bffc17 	ldw	r2,-16(fp)
    c1b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1bc:	e0bffd17 	ldw	r2,-12(fp)
    c1c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c1c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c1c8:	e037883a 	mov	sp,fp
    c1cc:	df000017 	ldw	fp,0(sp)
    c1d0:	dec00104 	addi	sp,sp,4
    c1d4:	f800283a 	ret

0000c1d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c1d8:	defffc04 	addi	sp,sp,-16
    c1dc:	df000315 	stw	fp,12(sp)
    c1e0:	df000304 	addi	fp,sp,12
    c1e4:	e13ffe15 	stw	r4,-8(fp)
    c1e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c1ec:	000530fa 	rdctl	r2,ienable
    c1f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c1f4:	e0bfff17 	ldw	r2,-4(fp)
    c1f8:	00c00044 	movi	r3,1
    c1fc:	1884983a 	sll	r2,r3,r2
    c200:	1007883a 	mov	r3,r2
    c204:	e0bffd17 	ldw	r2,-12(fp)
    c208:	1884703a 	and	r2,r3,r2
    c20c:	1004c03a 	cmpne	r2,r2,zero
    c210:	10803fcc 	andi	r2,r2,255
}
    c214:	e037883a 	mov	sp,fp
    c218:	df000017 	ldw	fp,0(sp)
    c21c:	dec00104 	addi	sp,sp,4
    c220:	f800283a 	ret

0000c224 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c224:	defff504 	addi	sp,sp,-44
    c228:	dfc00a15 	stw	ra,40(sp)
    c22c:	df000915 	stw	fp,36(sp)
    c230:	df000904 	addi	fp,sp,36
    c234:	e13ffc15 	stw	r4,-16(fp)
    c238:	e17ffd15 	stw	r5,-12(fp)
    c23c:	e1bffe15 	stw	r6,-8(fp)
    c240:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    c244:	00bffa84 	movi	r2,-22
    c248:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c24c:	e0bffd17 	ldw	r2,-12(fp)
    c250:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c254:	e0bff817 	ldw	r2,-32(fp)
    c258:	10800808 	cmpgei	r2,r2,32
    c25c:	1000271e 	bne	r2,zero,c2fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c260:	0005303a 	rdctl	r2,status
    c264:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c268:	e0fffa17 	ldw	r3,-24(fp)
    c26c:	00bfff84 	movi	r2,-2
    c270:	1884703a 	and	r2,r3,r2
    c274:	1001703a 	wrctl	status,r2
  
  return context;
    c278:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c27c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    c280:	00c00074 	movhi	r3,1
    c284:	18cbd904 	addi	r3,r3,12132
    c288:	e0bff817 	ldw	r2,-32(fp)
    c28c:	100490fa 	slli	r2,r2,3
    c290:	1885883a 	add	r2,r3,r2
    c294:	e0fffe17 	ldw	r3,-8(fp)
    c298:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    c29c:	00c00074 	movhi	r3,1
    c2a0:	18cbd904 	addi	r3,r3,12132
    c2a4:	e0bff817 	ldw	r2,-32(fp)
    c2a8:	100490fa 	slli	r2,r2,3
    c2ac:	1885883a 	add	r2,r3,r2
    c2b0:	10800104 	addi	r2,r2,4
    c2b4:	e0ffff17 	ldw	r3,-4(fp)
    c2b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c2bc:	e0bffe17 	ldw	r2,-8(fp)
    c2c0:	10000526 	beq	r2,zero,c2d8 <alt_iic_isr_register+0xb4>
    c2c4:	e0bff817 	ldw	r2,-32(fp)
    c2c8:	e13ffc17 	ldw	r4,-16(fp)
    c2cc:	100b883a 	mov	r5,r2
    c2d0:	000c09c0 	call	c09c <alt_ic_irq_enable>
    c2d4:	00000406 	br	c2e8 <alt_iic_isr_register+0xc4>
    c2d8:	e0bff817 	ldw	r2,-32(fp)
    c2dc:	e13ffc17 	ldw	r4,-16(fp)
    c2e0:	100b883a 	mov	r5,r2
    c2e4:	000c1380 	call	c138 <alt_ic_irq_disable>
    c2e8:	e0bff715 	stw	r2,-36(fp)
    c2ec:	e0bff917 	ldw	r2,-28(fp)
    c2f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2f4:	e0bffb17 	ldw	r2,-20(fp)
    c2f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c2fc:	e0bff717 	ldw	r2,-36(fp)
}
    c300:	e037883a 	mov	sp,fp
    c304:	dfc00117 	ldw	ra,4(sp)
    c308:	df000017 	ldw	fp,0(sp)
    c30c:	dec00204 	addi	sp,sp,8
    c310:	f800283a 	ret

0000c314 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c314:	defff804 	addi	sp,sp,-32
    c318:	dfc00715 	stw	ra,28(sp)
    c31c:	df000615 	stw	fp,24(sp)
    c320:	dc000515 	stw	r16,20(sp)
    c324:	df000504 	addi	fp,sp,20
    c328:	e13ffc15 	stw	r4,-16(fp)
    c32c:	e17ffd15 	stw	r5,-12(fp)
    c330:	e1bffe15 	stw	r6,-8(fp)
    c334:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c338:	e13ffd17 	ldw	r4,-12(fp)
    c33c:	e17ffe17 	ldw	r5,-8(fp)
    c340:	e1bfff17 	ldw	r6,-4(fp)
    c344:	000c5ac0 	call	c5ac <open>
    c348:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c34c:	e0bffb17 	ldw	r2,-20(fp)
    c350:	10002216 	blt	r2,zero,c3dc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c354:	04000074 	movhi	r16,1
    c358:	8437a304 	addi	r16,r16,-8564
    c35c:	e0bffb17 	ldw	r2,-20(fp)
    c360:	1009883a 	mov	r4,r2
    c364:	01400304 	movi	r5,12
    c368:	0000e000 	call	e00 <__mulsi3>
    c36c:	8085883a 	add	r2,r16,r2
    c370:	10c00017 	ldw	r3,0(r2)
    c374:	e0bffc17 	ldw	r2,-16(fp)
    c378:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c37c:	04000074 	movhi	r16,1
    c380:	8437a304 	addi	r16,r16,-8564
    c384:	e0bffb17 	ldw	r2,-20(fp)
    c388:	1009883a 	mov	r4,r2
    c38c:	01400304 	movi	r5,12
    c390:	0000e000 	call	e00 <__mulsi3>
    c394:	8085883a 	add	r2,r16,r2
    c398:	10800104 	addi	r2,r2,4
    c39c:	10c00017 	ldw	r3,0(r2)
    c3a0:	e0bffc17 	ldw	r2,-16(fp)
    c3a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c3a8:	04000074 	movhi	r16,1
    c3ac:	8437a304 	addi	r16,r16,-8564
    c3b0:	e0bffb17 	ldw	r2,-20(fp)
    c3b4:	1009883a 	mov	r4,r2
    c3b8:	01400304 	movi	r5,12
    c3bc:	0000e000 	call	e00 <__mulsi3>
    c3c0:	8085883a 	add	r2,r16,r2
    c3c4:	10800204 	addi	r2,r2,8
    c3c8:	10c00017 	ldw	r3,0(r2)
    c3cc:	e0bffc17 	ldw	r2,-16(fp)
    c3d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c3d4:	e13ffb17 	ldw	r4,-20(fp)
    c3d8:	000ad280 	call	ad28 <alt_release_fd>
  }
} 
    c3dc:	e037883a 	mov	sp,fp
    c3e0:	dfc00217 	ldw	ra,8(sp)
    c3e4:	df000117 	ldw	fp,4(sp)
    c3e8:	dc000017 	ldw	r16,0(sp)
    c3ec:	dec00304 	addi	sp,sp,12
    c3f0:	f800283a 	ret

0000c3f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c3f4:	defffb04 	addi	sp,sp,-20
    c3f8:	dfc00415 	stw	ra,16(sp)
    c3fc:	df000315 	stw	fp,12(sp)
    c400:	df000304 	addi	fp,sp,12
    c404:	e13ffd15 	stw	r4,-12(fp)
    c408:	e17ffe15 	stw	r5,-8(fp)
    c40c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c410:	01000074 	movhi	r4,1
    c414:	2137a604 	addi	r4,r4,-8552
    c418:	e17ffd17 	ldw	r5,-12(fp)
    c41c:	01800044 	movi	r6,1
    c420:	01c07fc4 	movi	r7,511
    c424:	000c3140 	call	c314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c428:	01000074 	movhi	r4,1
    c42c:	2137a304 	addi	r4,r4,-8564
    c430:	e17ffe17 	ldw	r5,-8(fp)
    c434:	000d883a 	mov	r6,zero
    c438:	01c07fc4 	movi	r7,511
    c43c:	000c3140 	call	c314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c440:	01000074 	movhi	r4,1
    c444:	2137a904 	addi	r4,r4,-8540
    c448:	e17fff17 	ldw	r5,-4(fp)
    c44c:	01800044 	movi	r6,1
    c450:	01c07fc4 	movi	r7,511
    c454:	000c3140 	call	c314 <alt_open_fd>
}  
    c458:	e037883a 	mov	sp,fp
    c45c:	dfc00117 	ldw	ra,4(sp)
    c460:	df000017 	ldw	fp,0(sp)
    c464:	dec00204 	addi	sp,sp,8
    c468:	f800283a 	ret

0000c46c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c46c:	defffe04 	addi	sp,sp,-8
    c470:	dfc00115 	stw	ra,4(sp)
    c474:	df000015 	stw	fp,0(sp)
    c478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c47c:	00800074 	movhi	r2,1
    c480:	10bc2504 	addi	r2,r2,-3948
    c484:	10800017 	ldw	r2,0(r2)
    c488:	10000526 	beq	r2,zero,c4a0 <alt_get_errno+0x34>
    c48c:	00800074 	movhi	r2,1
    c490:	10bc2504 	addi	r2,r2,-3948
    c494:	10800017 	ldw	r2,0(r2)
    c498:	103ee83a 	callr	r2
    c49c:	00000206 	br	c4a8 <alt_get_errno+0x3c>
    c4a0:	00800074 	movhi	r2,1
    c4a4:	1082c604 	addi	r2,r2,2840
}
    c4a8:	e037883a 	mov	sp,fp
    c4ac:	dfc00117 	ldw	ra,4(sp)
    c4b0:	df000017 	ldw	fp,0(sp)
    c4b4:	dec00204 	addi	sp,sp,8
    c4b8:	f800283a 	ret

0000c4bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c4bc:	defffb04 	addi	sp,sp,-20
    c4c0:	dfc00415 	stw	ra,16(sp)
    c4c4:	df000315 	stw	fp,12(sp)
    c4c8:	dc000215 	stw	r16,8(sp)
    c4cc:	df000204 	addi	fp,sp,8
    c4d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c4d4:	e0bfff17 	ldw	r2,-4(fp)
    c4d8:	10800217 	ldw	r2,8(r2)
    c4dc:	10d00034 	orhi	r3,r2,16384
    c4e0:	e0bfff17 	ldw	r2,-4(fp)
    c4e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c4e8:	e03ffe15 	stw	zero,-8(fp)
    c4ec:	00002206 	br	c578 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c4f0:	04000074 	movhi	r16,1
    c4f4:	8437a304 	addi	r16,r16,-8564
    c4f8:	e0bffe17 	ldw	r2,-8(fp)
    c4fc:	1009883a 	mov	r4,r2
    c500:	01400304 	movi	r5,12
    c504:	0000e000 	call	e00 <__mulsi3>
    c508:	8085883a 	add	r2,r16,r2
    c50c:	10c00017 	ldw	r3,0(r2)
    c510:	e0bfff17 	ldw	r2,-4(fp)
    c514:	10800017 	ldw	r2,0(r2)
    c518:	1880141e 	bne	r3,r2,c56c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c51c:	04000074 	movhi	r16,1
    c520:	8437a304 	addi	r16,r16,-8564
    c524:	e0bffe17 	ldw	r2,-8(fp)
    c528:	1009883a 	mov	r4,r2
    c52c:	01400304 	movi	r5,12
    c530:	0000e000 	call	e00 <__mulsi3>
    c534:	8085883a 	add	r2,r16,r2
    c538:	10800204 	addi	r2,r2,8
    c53c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c540:	10000a0e 	bge	r2,zero,c56c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c544:	e13ffe17 	ldw	r4,-8(fp)
    c548:	01400304 	movi	r5,12
    c54c:	0000e000 	call	e00 <__mulsi3>
    c550:	00c00074 	movhi	r3,1
    c554:	18f7a304 	addi	r3,r3,-8564
    c558:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c55c:	e0bfff17 	ldw	r2,-4(fp)
    c560:	18800226 	beq	r3,r2,c56c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c564:	00bffcc4 	movi	r2,-13
    c568:	00000a06 	br	c594 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c56c:	e0bffe17 	ldw	r2,-8(fp)
    c570:	10800044 	addi	r2,r2,1
    c574:	e0bffe15 	stw	r2,-8(fp)
    c578:	00800074 	movhi	r2,1
    c57c:	10bc2404 	addi	r2,r2,-3952
    c580:	10800017 	ldw	r2,0(r2)
    c584:	1007883a 	mov	r3,r2
    c588:	e0bffe17 	ldw	r2,-8(fp)
    c58c:	18bfd82e 	bgeu	r3,r2,c4f0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c590:	0005883a 	mov	r2,zero
}
    c594:	e037883a 	mov	sp,fp
    c598:	dfc00217 	ldw	ra,8(sp)
    c59c:	df000117 	ldw	fp,4(sp)
    c5a0:	dc000017 	ldw	r16,0(sp)
    c5a4:	dec00304 	addi	sp,sp,12
    c5a8:	f800283a 	ret

0000c5ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c5ac:	defff604 	addi	sp,sp,-40
    c5b0:	dfc00915 	stw	ra,36(sp)
    c5b4:	df000815 	stw	fp,32(sp)
    c5b8:	df000804 	addi	fp,sp,32
    c5bc:	e13ffd15 	stw	r4,-12(fp)
    c5c0:	e17ffe15 	stw	r5,-8(fp)
    c5c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c5c8:	00bfffc4 	movi	r2,-1
    c5cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c5d0:	00bffb44 	movi	r2,-19
    c5d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c5d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c5dc:	e13ffd17 	ldw	r4,-12(fp)
    c5e0:	01400074 	movhi	r5,1
    c5e4:	297c2204 	addi	r5,r5,-3960
    c5e8:	000c8c00 	call	c8c0 <alt_find_dev>
    c5ec:	e0bff815 	stw	r2,-32(fp)
    c5f0:	e0bff817 	ldw	r2,-32(fp)
    c5f4:	1000051e 	bne	r2,zero,c60c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c5f8:	e13ffd17 	ldw	r4,-12(fp)
    c5fc:	000c9500 	call	c950 <alt_find_file>
    c600:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c604:	00800044 	movi	r2,1
    c608:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c60c:	e0bff817 	ldw	r2,-32(fp)
    c610:	10002a26 	beq	r2,zero,c6bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c614:	e13ff817 	ldw	r4,-32(fp)
    c618:	000ca640 	call	ca64 <alt_get_fd>
    c61c:	e0bff915 	stw	r2,-28(fp)
    c620:	e0bff917 	ldw	r2,-28(fp)
    c624:	1000030e 	bge	r2,zero,c634 <open+0x88>
    {
      status = index;
    c628:	e0bff917 	ldw	r2,-28(fp)
    c62c:	e0bffa15 	stw	r2,-24(fp)
    c630:	00002406 	br	c6c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c634:	e13ff917 	ldw	r4,-28(fp)
    c638:	01400304 	movi	r5,12
    c63c:	0000e000 	call	e00 <__mulsi3>
    c640:	00c00074 	movhi	r3,1
    c644:	18f7a304 	addi	r3,r3,-8564
    c648:	10c5883a 	add	r2,r2,r3
    c64c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c650:	e0fffe17 	ldw	r3,-8(fp)
    c654:	00900034 	movhi	r2,16384
    c658:	10bfffc4 	addi	r2,r2,-1
    c65c:	1886703a 	and	r3,r3,r2
    c660:	e0bffc17 	ldw	r2,-16(fp)
    c664:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c668:	e0bffb17 	ldw	r2,-20(fp)
    c66c:	1000051e 	bne	r2,zero,c684 <open+0xd8>
    c670:	e13ffc17 	ldw	r4,-16(fp)
    c674:	000c4bc0 	call	c4bc <alt_file_locked>
    c678:	e0bffa15 	stw	r2,-24(fp)
    c67c:	e0bffa17 	ldw	r2,-24(fp)
    c680:	10001016 	blt	r2,zero,c6c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c684:	e0bff817 	ldw	r2,-32(fp)
    c688:	10800317 	ldw	r2,12(r2)
    c68c:	10000826 	beq	r2,zero,c6b0 <open+0x104>
    c690:	e0bff817 	ldw	r2,-32(fp)
    c694:	10800317 	ldw	r2,12(r2)
    c698:	e13ffc17 	ldw	r4,-16(fp)
    c69c:	e17ffd17 	ldw	r5,-12(fp)
    c6a0:	e1bffe17 	ldw	r6,-8(fp)
    c6a4:	e1ffff17 	ldw	r7,-4(fp)
    c6a8:	103ee83a 	callr	r2
    c6ac:	00000106 	br	c6b4 <open+0x108>
    c6b0:	0005883a 	mov	r2,zero
    c6b4:	e0bffa15 	stw	r2,-24(fp)
    c6b8:	00000206 	br	c6c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c6bc:	00bffb44 	movi	r2,-19
    c6c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c6c4:	e0bffa17 	ldw	r2,-24(fp)
    c6c8:	1000080e 	bge	r2,zero,c6ec <open+0x140>
  {
    alt_release_fd (index);  
    c6cc:	e13ff917 	ldw	r4,-28(fp)
    c6d0:	000ad280 	call	ad28 <alt_release_fd>
    ALT_ERRNO = -status;
    c6d4:	000c46c0 	call	c46c <alt_get_errno>
    c6d8:	e0fffa17 	ldw	r3,-24(fp)
    c6dc:	00c7c83a 	sub	r3,zero,r3
    c6e0:	10c00015 	stw	r3,0(r2)
    return -1;
    c6e4:	00bfffc4 	movi	r2,-1
    c6e8:	00000106 	br	c6f0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c6ec:	e0bff917 	ldw	r2,-28(fp)
}
    c6f0:	e037883a 	mov	sp,fp
    c6f4:	dfc00117 	ldw	ra,4(sp)
    c6f8:	df000017 	ldw	fp,0(sp)
    c6fc:	dec00204 	addi	sp,sp,8
    c700:	f800283a 	ret

0000c704 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c704:	defffa04 	addi	sp,sp,-24
    c708:	df000515 	stw	fp,20(sp)
    c70c:	df000504 	addi	fp,sp,20
    c710:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c714:	0005303a 	rdctl	r2,status
    c718:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c71c:	e0fffc17 	ldw	r3,-16(fp)
    c720:	00bfff84 	movi	r2,-2
    c724:	1884703a 	and	r2,r3,r2
    c728:	1001703a 	wrctl	status,r2
  
  return context;
    c72c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c730:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c734:	e0bfff17 	ldw	r2,-4(fp)
    c738:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c73c:	e0bffd17 	ldw	r2,-12(fp)
    c740:	10800017 	ldw	r2,0(r2)
    c744:	e0fffd17 	ldw	r3,-12(fp)
    c748:	18c00117 	ldw	r3,4(r3)
    c74c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c750:	e0bffd17 	ldw	r2,-12(fp)
    c754:	10800117 	ldw	r2,4(r2)
    c758:	e0fffd17 	ldw	r3,-12(fp)
    c75c:	18c00017 	ldw	r3,0(r3)
    c760:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c764:	e0bffd17 	ldw	r2,-12(fp)
    c768:	e0fffd17 	ldw	r3,-12(fp)
    c76c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c770:	e0bffd17 	ldw	r2,-12(fp)
    c774:	e0fffd17 	ldw	r3,-12(fp)
    c778:	10c00015 	stw	r3,0(r2)
    c77c:	e0bffb17 	ldw	r2,-20(fp)
    c780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c784:	e0bffe17 	ldw	r2,-8(fp)
    c788:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c78c:	e037883a 	mov	sp,fp
    c790:	df000017 	ldw	fp,0(sp)
    c794:	dec00104 	addi	sp,sp,4
    c798:	f800283a 	ret

0000c79c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c79c:	defffb04 	addi	sp,sp,-20
    c7a0:	dfc00415 	stw	ra,16(sp)
    c7a4:	df000315 	stw	fp,12(sp)
    c7a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c7ac:	d0a00d17 	ldw	r2,-32716(gp)
    c7b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c7b4:	d0a6b317 	ldw	r2,-25908(gp)
    c7b8:	10800044 	addi	r2,r2,1
    c7bc:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c7c0:	00002e06 	br	c87c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c7c4:	e0bffd17 	ldw	r2,-12(fp)
    c7c8:	10800017 	ldw	r2,0(r2)
    c7cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c7d0:	e0bffd17 	ldw	r2,-12(fp)
    c7d4:	10800403 	ldbu	r2,16(r2)
    c7d8:	10803fcc 	andi	r2,r2,255
    c7dc:	10000426 	beq	r2,zero,c7f0 <alt_tick+0x54>
    c7e0:	d0a6b317 	ldw	r2,-25908(gp)
    c7e4:	1000021e 	bne	r2,zero,c7f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c7e8:	e0bffd17 	ldw	r2,-12(fp)
    c7ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c7f0:	e0bffd17 	ldw	r2,-12(fp)
    c7f4:	10800217 	ldw	r2,8(r2)
    c7f8:	d0e6b317 	ldw	r3,-25908(gp)
    c7fc:	18801d36 	bltu	r3,r2,c874 <alt_tick+0xd8>
    c800:	e0bffd17 	ldw	r2,-12(fp)
    c804:	10800403 	ldbu	r2,16(r2)
    c808:	10803fcc 	andi	r2,r2,255
    c80c:	1000191e 	bne	r2,zero,c874 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c810:	e0bffd17 	ldw	r2,-12(fp)
    c814:	10c00317 	ldw	r3,12(r2)
    c818:	e0bffd17 	ldw	r2,-12(fp)
    c81c:	10800517 	ldw	r2,20(r2)
    c820:	1009883a 	mov	r4,r2
    c824:	183ee83a 	callr	r3
    c828:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	1000031e 	bne	r2,zero,c840 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c834:	e13ffd17 	ldw	r4,-12(fp)
    c838:	000c7040 	call	c704 <alt_alarm_stop>
    c83c:	00000d06 	br	c874 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c840:	e0bffd17 	ldw	r2,-12(fp)
    c844:	10c00217 	ldw	r3,8(r2)
    c848:	e0bfff17 	ldw	r2,-4(fp)
    c84c:	1887883a 	add	r3,r3,r2
    c850:	e0bffd17 	ldw	r2,-12(fp)
    c854:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c858:	e0bffd17 	ldw	r2,-12(fp)
    c85c:	10c00217 	ldw	r3,8(r2)
    c860:	d0a6b317 	ldw	r2,-25908(gp)
    c864:	1880032e 	bgeu	r3,r2,c874 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c868:	e0bffd17 	ldw	r2,-12(fp)
    c86c:	00c00044 	movi	r3,1
    c870:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c874:	e0bffe17 	ldw	r2,-8(fp)
    c878:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c87c:	e0fffd17 	ldw	r3,-12(fp)
    c880:	d0a00d04 	addi	r2,gp,-32716
    c884:	18bfcf1e 	bne	r3,r2,c7c4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c888:	0001883a 	nop
}
    c88c:	e037883a 	mov	sp,fp
    c890:	dfc00117 	ldw	ra,4(sp)
    c894:	df000017 	ldw	fp,0(sp)
    c898:	dec00204 	addi	sp,sp,8
    c89c:	f800283a 	ret

0000c8a0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c8a0:	deffff04 	addi	sp,sp,-4
    c8a4:	df000015 	stw	fp,0(sp)
    c8a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c8ac:	000170fa 	wrctl	ienable,zero
}
    c8b0:	e037883a 	mov	sp,fp
    c8b4:	df000017 	ldw	fp,0(sp)
    c8b8:	dec00104 	addi	sp,sp,4
    c8bc:	f800283a 	ret

0000c8c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c8c0:	defffa04 	addi	sp,sp,-24
    c8c4:	dfc00515 	stw	ra,20(sp)
    c8c8:	df000415 	stw	fp,16(sp)
    c8cc:	df000404 	addi	fp,sp,16
    c8d0:	e13ffe15 	stw	r4,-8(fp)
    c8d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c8d8:	e0bfff17 	ldw	r2,-4(fp)
    c8dc:	10800017 	ldw	r2,0(r2)
    c8e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c8e4:	e13ffe17 	ldw	r4,-8(fp)
    c8e8:	0000f600 	call	f60 <strlen>
    c8ec:	10800044 	addi	r2,r2,1
    c8f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c8f4:	00000d06 	br	c92c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c8f8:	e0bffc17 	ldw	r2,-16(fp)
    c8fc:	10c00217 	ldw	r3,8(r2)
    c900:	e0bffd17 	ldw	r2,-12(fp)
    c904:	1809883a 	mov	r4,r3
    c908:	e17ffe17 	ldw	r5,-8(fp)
    c90c:	100d883a 	mov	r6,r2
    c910:	000cb4c0 	call	cb4c <memcmp>
    c914:	1000021e 	bne	r2,zero,c920 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c918:	e0bffc17 	ldw	r2,-16(fp)
    c91c:	00000706 	br	c93c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c920:	e0bffc17 	ldw	r2,-16(fp)
    c924:	10800017 	ldw	r2,0(r2)
    c928:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c92c:	e0fffc17 	ldw	r3,-16(fp)
    c930:	e0bfff17 	ldw	r2,-4(fp)
    c934:	18bff01e 	bne	r3,r2,c8f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c938:	0005883a 	mov	r2,zero
}
    c93c:	e037883a 	mov	sp,fp
    c940:	dfc00117 	ldw	ra,4(sp)
    c944:	df000017 	ldw	fp,0(sp)
    c948:	dec00204 	addi	sp,sp,8
    c94c:	f800283a 	ret

0000c950 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c950:	defffb04 	addi	sp,sp,-20
    c954:	dfc00415 	stw	ra,16(sp)
    c958:	df000315 	stw	fp,12(sp)
    c95c:	df000304 	addi	fp,sp,12
    c960:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c964:	00800074 	movhi	r2,1
    c968:	10bc2004 	addi	r2,r2,-3968
    c96c:	10800017 	ldw	r2,0(r2)
    c970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c974:	00003106 	br	ca3c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c978:	e0bffd17 	ldw	r2,-12(fp)
    c97c:	10800217 	ldw	r2,8(r2)
    c980:	1009883a 	mov	r4,r2
    c984:	0000f600 	call	f60 <strlen>
    c988:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c98c:	e0bffd17 	ldw	r2,-12(fp)
    c990:	10c00217 	ldw	r3,8(r2)
    c994:	e0bffe17 	ldw	r2,-8(fp)
    c998:	10bfffc4 	addi	r2,r2,-1
    c99c:	1885883a 	add	r2,r3,r2
    c9a0:	10800003 	ldbu	r2,0(r2)
    c9a4:	10803fcc 	andi	r2,r2,255
    c9a8:	1080201c 	xori	r2,r2,128
    c9ac:	10bfe004 	addi	r2,r2,-128
    c9b0:	10800bd8 	cmpnei	r2,r2,47
    c9b4:	1000031e 	bne	r2,zero,c9c4 <alt_find_file+0x74>
    {
      len -= 1;
    c9b8:	e0bffe17 	ldw	r2,-8(fp)
    c9bc:	10bfffc4 	addi	r2,r2,-1
    c9c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c9c4:	e0bffe17 	ldw	r2,-8(fp)
    c9c8:	e0ffff17 	ldw	r3,-4(fp)
    c9cc:	1885883a 	add	r2,r3,r2
    c9d0:	10800003 	ldbu	r2,0(r2)
    c9d4:	10803fcc 	andi	r2,r2,255
    c9d8:	1080201c 	xori	r2,r2,128
    c9dc:	10bfe004 	addi	r2,r2,-128
    c9e0:	10800be0 	cmpeqi	r2,r2,47
    c9e4:	1000081e 	bne	r2,zero,ca08 <alt_find_file+0xb8>
    c9e8:	e0bffe17 	ldw	r2,-8(fp)
    c9ec:	e0ffff17 	ldw	r3,-4(fp)
    c9f0:	1885883a 	add	r2,r3,r2
    c9f4:	10800003 	ldbu	r2,0(r2)
    c9f8:	10803fcc 	andi	r2,r2,255
    c9fc:	1080201c 	xori	r2,r2,128
    ca00:	10bfe004 	addi	r2,r2,-128
    ca04:	10000a1e 	bne	r2,zero,ca30 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ca08:	e0bffd17 	ldw	r2,-12(fp)
    ca0c:	10c00217 	ldw	r3,8(r2)
    ca10:	e0bffe17 	ldw	r2,-8(fp)
    ca14:	1809883a 	mov	r4,r3
    ca18:	e17fff17 	ldw	r5,-4(fp)
    ca1c:	100d883a 	mov	r6,r2
    ca20:	000cb4c0 	call	cb4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ca24:	1000021e 	bne	r2,zero,ca30 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ca28:	e0bffd17 	ldw	r2,-12(fp)
    ca2c:	00000806 	br	ca50 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ca30:	e0bffd17 	ldw	r2,-12(fp)
    ca34:	10800017 	ldw	r2,0(r2)
    ca38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ca3c:	e0fffd17 	ldw	r3,-12(fp)
    ca40:	00800074 	movhi	r2,1
    ca44:	10bc2004 	addi	r2,r2,-3968
    ca48:	18bfcb1e 	bne	r3,r2,c978 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ca4c:	0005883a 	mov	r2,zero
}
    ca50:	e037883a 	mov	sp,fp
    ca54:	dfc00117 	ldw	ra,4(sp)
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00204 	addi	sp,sp,8
    ca60:	f800283a 	ret

0000ca64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ca64:	defffa04 	addi	sp,sp,-24
    ca68:	dfc00515 	stw	ra,20(sp)
    ca6c:	df000415 	stw	fp,16(sp)
    ca70:	dc000315 	stw	r16,12(sp)
    ca74:	df000304 	addi	fp,sp,12
    ca78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ca7c:	00bffa04 	movi	r2,-24
    ca80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca84:	e03ffd15 	stw	zero,-12(fp)
    ca88:	00002106 	br	cb10 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    ca8c:	04000074 	movhi	r16,1
    ca90:	8437a304 	addi	r16,r16,-8564
    ca94:	e0bffd17 	ldw	r2,-12(fp)
    ca98:	1009883a 	mov	r4,r2
    ca9c:	01400304 	movi	r5,12
    caa0:	0000e000 	call	e00 <__mulsi3>
    caa4:	8085883a 	add	r2,r16,r2
    caa8:	10800017 	ldw	r2,0(r2)
    caac:	1000151e 	bne	r2,zero,cb04 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    cab0:	04000074 	movhi	r16,1
    cab4:	8437a304 	addi	r16,r16,-8564
    cab8:	e0bffd17 	ldw	r2,-12(fp)
    cabc:	1009883a 	mov	r4,r2
    cac0:	01400304 	movi	r5,12
    cac4:	0000e000 	call	e00 <__mulsi3>
    cac8:	8085883a 	add	r2,r16,r2
    cacc:	e0ffff17 	ldw	r3,-4(fp)
    cad0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    cad4:	00800074 	movhi	r2,1
    cad8:	10bc2404 	addi	r2,r2,-3952
    cadc:	10c00017 	ldw	r3,0(r2)
    cae0:	e0bffd17 	ldw	r2,-12(fp)
    cae4:	1880040e 	bge	r3,r2,caf8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    cae8:	00800074 	movhi	r2,1
    caec:	10bc2404 	addi	r2,r2,-3952
    caf0:	e0fffd17 	ldw	r3,-12(fp)
    caf4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    caf8:	e0bffd17 	ldw	r2,-12(fp)
    cafc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    cb00:	00000606 	br	cb1c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cb04:	e0bffd17 	ldw	r2,-12(fp)
    cb08:	10800044 	addi	r2,r2,1
    cb0c:	e0bffd15 	stw	r2,-12(fp)
    cb10:	e0bffd17 	ldw	r2,-12(fp)
    cb14:	10800810 	cmplti	r2,r2,32
    cb18:	103fdc1e 	bne	r2,zero,ca8c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cb1c:	e0bffe17 	ldw	r2,-8(fp)
}
    cb20:	e037883a 	mov	sp,fp
    cb24:	dfc00217 	ldw	ra,8(sp)
    cb28:	df000117 	ldw	fp,4(sp)
    cb2c:	dc000017 	ldw	r16,0(sp)
    cb30:	dec00304 	addi	sp,sp,12
    cb34:	f800283a 	ret

0000cb38 <atexit>:
    cb38:	200b883a 	mov	r5,r4
    cb3c:	000d883a 	mov	r6,zero
    cb40:	0009883a 	mov	r4,zero
    cb44:	000f883a 	mov	r7,zero
    cb48:	000cbc81 	jmpi	cbc8 <__register_exitproc>

0000cb4c <memcmp>:
    cb4c:	01c000c4 	movi	r7,3
    cb50:	3980192e 	bgeu	r7,r6,cbb8 <memcmp+0x6c>
    cb54:	2904b03a 	or	r2,r5,r4
    cb58:	11c4703a 	and	r2,r2,r7
    cb5c:	10000f26 	beq	r2,zero,cb9c <memcmp+0x50>
    cb60:	20c00003 	ldbu	r3,0(r4)
    cb64:	28800003 	ldbu	r2,0(r5)
    cb68:	1880151e 	bne	r3,r2,cbc0 <memcmp+0x74>
    cb6c:	31bfff84 	addi	r6,r6,-2
    cb70:	01ffffc4 	movi	r7,-1
    cb74:	00000406 	br	cb88 <memcmp+0x3c>
    cb78:	20c00003 	ldbu	r3,0(r4)
    cb7c:	28800003 	ldbu	r2,0(r5)
    cb80:	31bfffc4 	addi	r6,r6,-1
    cb84:	18800e1e 	bne	r3,r2,cbc0 <memcmp+0x74>
    cb88:	21000044 	addi	r4,r4,1
    cb8c:	29400044 	addi	r5,r5,1
    cb90:	31fff91e 	bne	r6,r7,cb78 <memcmp+0x2c>
    cb94:	0005883a 	mov	r2,zero
    cb98:	f800283a 	ret
    cb9c:	20c00017 	ldw	r3,0(r4)
    cba0:	28800017 	ldw	r2,0(r5)
    cba4:	1880041e 	bne	r3,r2,cbb8 <memcmp+0x6c>
    cba8:	31bfff04 	addi	r6,r6,-4
    cbac:	21000104 	addi	r4,r4,4
    cbb0:	29400104 	addi	r5,r5,4
    cbb4:	39bff936 	bltu	r7,r6,cb9c <memcmp+0x50>
    cbb8:	303fe91e 	bne	r6,zero,cb60 <memcmp+0x14>
    cbbc:	003ff506 	br	cb94 <memcmp+0x48>
    cbc0:	1885c83a 	sub	r2,r3,r2
    cbc4:	f800283a 	ret

0000cbc8 <__register_exitproc>:
    cbc8:	defffa04 	addi	sp,sp,-24
    cbcc:	00800074 	movhi	r2,1
    cbd0:	10bc1b04 	addi	r2,r2,-3988
    cbd4:	dc000315 	stw	r16,12(sp)
    cbd8:	14000017 	ldw	r16,0(r2)
    cbdc:	dc400415 	stw	r17,16(sp)
    cbe0:	dfc00515 	stw	ra,20(sp)
    cbe4:	80805217 	ldw	r2,328(r16)
    cbe8:	2023883a 	mov	r17,r4
    cbec:	10003e26 	beq	r2,zero,cce8 <__register_exitproc+0x120>
    cbf0:	10c00117 	ldw	r3,4(r2)
    cbf4:	020007c4 	movi	r8,31
    cbf8:	40c0180e 	bge	r8,r3,cc5c <__register_exitproc+0x94>
    cbfc:	00800034 	movhi	r2,0
    cc00:	10800004 	addi	r2,r2,0
    cc04:	1000061e 	bne	r2,zero,cc20 <__register_exitproc+0x58>
    cc08:	00bfffc4 	movi	r2,-1
    cc0c:	dfc00517 	ldw	ra,20(sp)
    cc10:	dc400417 	ldw	r17,16(sp)
    cc14:	dc000317 	ldw	r16,12(sp)
    cc18:	dec00604 	addi	sp,sp,24
    cc1c:	f800283a 	ret
    cc20:	01006404 	movi	r4,400
    cc24:	d9400015 	stw	r5,0(sp)
    cc28:	d9800115 	stw	r6,4(sp)
    cc2c:	d9c00215 	stw	r7,8(sp)
    cc30:	00000000 	call	0 <__alt_mem_sdram_controller>
    cc34:	d9400017 	ldw	r5,0(sp)
    cc38:	d9800117 	ldw	r6,4(sp)
    cc3c:	d9c00217 	ldw	r7,8(sp)
    cc40:	103ff126 	beq	r2,zero,cc08 <__register_exitproc+0x40>
    cc44:	80c05217 	ldw	r3,328(r16)
    cc48:	10000115 	stw	zero,4(r2)
    cc4c:	10c00015 	stw	r3,0(r2)
    cc50:	80805215 	stw	r2,328(r16)
    cc54:	10006215 	stw	zero,392(r2)
    cc58:	10006315 	stw	zero,396(r2)
    cc5c:	10c00117 	ldw	r3,4(r2)
    cc60:	88000d1e 	bne	r17,zero,cc98 <__register_exitproc+0xd0>
    cc64:	19000084 	addi	r4,r3,2
    cc68:	2109883a 	add	r4,r4,r4
    cc6c:	18c00044 	addi	r3,r3,1
    cc70:	2109883a 	add	r4,r4,r4
    cc74:	1109883a 	add	r4,r2,r4
    cc78:	10c00115 	stw	r3,4(r2)
    cc7c:	0005883a 	mov	r2,zero
    cc80:	21400015 	stw	r5,0(r4)
    cc84:	dfc00517 	ldw	ra,20(sp)
    cc88:	dc400417 	ldw	r17,16(sp)
    cc8c:	dc000317 	ldw	r16,12(sp)
    cc90:	dec00604 	addi	sp,sp,24
    cc94:	f800283a 	ret
    cc98:	02400044 	movi	r9,1
    cc9c:	12806217 	ldw	r10,392(r2)
    cca0:	48d2983a 	sll	r9,r9,r3
    cca4:	19000804 	addi	r4,r3,32
    cca8:	18d1883a 	add	r8,r3,r3
    ccac:	2109883a 	add	r4,r4,r4
    ccb0:	4211883a 	add	r8,r8,r8
    ccb4:	2109883a 	add	r4,r4,r4
    ccb8:	1109883a 	add	r4,r2,r4
    ccbc:	1211883a 	add	r8,r2,r8
    ccc0:	5254b03a 	or	r10,r10,r9
    ccc4:	21c02215 	stw	r7,136(r4)
    ccc8:	41802215 	stw	r6,136(r8)
    cccc:	12806215 	stw	r10,392(r2)
    ccd0:	01000084 	movi	r4,2
    ccd4:	893fe31e 	bne	r17,r4,cc64 <__register_exitproc+0x9c>
    ccd8:	11006317 	ldw	r4,396(r2)
    ccdc:	2252b03a 	or	r9,r4,r9
    cce0:	12406315 	stw	r9,396(r2)
    cce4:	003fdf06 	br	cc64 <__register_exitproc+0x9c>
    cce8:	00800074 	movhi	r2,1
    ccec:	108c1904 	addi	r2,r2,12388
    ccf0:	80805215 	stw	r2,328(r16)
    ccf4:	003fbe06 	br	cbf0 <__register_exitproc+0x28>

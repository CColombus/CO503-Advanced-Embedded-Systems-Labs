// FTOP_MSOC_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module FTOP_MSOC_mm_interconnect_0 (
		input  wire        clock_clk_clk,                                         //                                       clock_clk.clk
		input  wire        pll_c0_clk,                                            //                                          pll_c0.clk
		input  wire        cpu_1a_reset_reset_bridge_in_reset_reset,              //              cpu_1a_reset_reset_bridge_in_reset.reset
		input  wire        pll_inclk_interface_reset_reset_bridge_in_reset_reset, // pll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire [27:0] cpu_1a_data_master_address,                            //                              cpu_1a_data_master.address
		output wire        cpu_1a_data_master_waitrequest,                        //                                                .waitrequest
		input  wire [3:0]  cpu_1a_data_master_byteenable,                         //                                                .byteenable
		input  wire        cpu_1a_data_master_read,                               //                                                .read
		output wire [31:0] cpu_1a_data_master_readdata,                           //                                                .readdata
		input  wire        cpu_1a_data_master_write,                              //                                                .write
		input  wire [31:0] cpu_1a_data_master_writedata,                          //                                                .writedata
		input  wire        cpu_1a_data_master_debugaccess,                        //                                                .debugaccess
		input  wire [27:0] cpu_1a_instruction_master_address,                     //                       cpu_1a_instruction_master.address
		output wire        cpu_1a_instruction_master_waitrequest,                 //                                                .waitrequest
		input  wire        cpu_1a_instruction_master_read,                        //                                                .read
		output wire [31:0] cpu_1a_instruction_master_readdata,                    //                                                .readdata
		input  wire [16:0] CPU_1b_p1_mm_bridge_0_m0_address,                      //                        CPU_1b_p1_mm_bridge_0_m0.address
		output wire        CPU_1b_p1_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1b_p1_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1b_p1_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1b_p1_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1b_p1_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1b_p1_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1b_p1_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1b_p1_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1b_p1_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1b_p2_mm_bridge_0_m0_address,                      //                        CPU_1b_p2_mm_bridge_0_m0.address
		output wire        CPU_1b_p2_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1b_p2_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1b_p2_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1b_p2_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1b_p2_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1b_p2_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1b_p2_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1b_p2_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1b_p2_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1b_p3_mm_bridge_0_m0_address,                      //                        CPU_1b_p3_mm_bridge_0_m0.address
		output wire        CPU_1b_p3_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1b_p3_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1b_p3_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1b_p3_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1b_p3_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1b_p3_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1b_p3_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1b_p3_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1b_p3_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1c_p1_mm_bridge_0_m0_address,                      //                        CPU_1c_p1_mm_bridge_0_m0.address
		output wire        CPU_1c_p1_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1c_p1_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1c_p1_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1c_p1_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1c_p1_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1c_p1_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1c_p1_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1c_p1_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1c_p1_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1c_p2_mm_bridge_0_m0_address,                      //                        CPU_1c_p2_mm_bridge_0_m0.address
		output wire        CPU_1c_p2_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1c_p2_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1c_p2_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1c_p2_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1c_p2_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1c_p2_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1c_p2_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1c_p2_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1c_p2_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1c_p3_mm_bridge_0_m0_address,                      //                        CPU_1c_p3_mm_bridge_0_m0.address
		output wire        CPU_1c_p3_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1c_p3_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1c_p3_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1c_p3_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1c_p3_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1c_p3_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1c_p3_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1c_p3_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1c_p3_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1d_p1_mm_bridge_0_m0_address,                      //                        CPU_1d_p1_mm_bridge_0_m0.address
		output wire        CPU_1d_p1_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1d_p1_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1d_p1_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1d_p1_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1d_p1_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1d_p1_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1d_p1_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1d_p1_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1d_p1_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1d_p2_mm_bridge_0_m0_address,                      //                        CPU_1d_p2_mm_bridge_0_m0.address
		output wire        CPU_1d_p2_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1d_p2_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1d_p2_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1d_p2_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1d_p2_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1d_p2_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1d_p2_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1d_p2_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1d_p2_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1d_p3_mm_bridge_0_m0_address,                      //                        CPU_1d_p3_mm_bridge_0_m0.address
		output wire        CPU_1d_p3_mm_bridge_0_m0_waitrequest,                  //                                                .waitrequest
		input  wire [0:0]  CPU_1d_p3_mm_bridge_0_m0_burstcount,                   //                                                .burstcount
		input  wire [3:0]  CPU_1d_p3_mm_bridge_0_m0_byteenable,                   //                                                .byteenable
		input  wire        CPU_1d_p3_mm_bridge_0_m0_read,                         //                                                .read
		output wire [31:0] CPU_1d_p3_mm_bridge_0_m0_readdata,                     //                                                .readdata
		output wire        CPU_1d_p3_mm_bridge_0_m0_readdatavalid,                //                                                .readdatavalid
		input  wire        CPU_1d_p3_mm_bridge_0_m0_write,                        //                                                .write
		input  wire [31:0] CPU_1d_p3_mm_bridge_0_m0_writedata,                    //                                                .writedata
		input  wire        CPU_1d_p3_mm_bridge_0_m0_debugaccess,                  //                                                .debugaccess
		input  wire [16:0] CPU_1e_mm_bridge_0_m0_address,                         //                           CPU_1e_mm_bridge_0_m0.address
		output wire        CPU_1e_mm_bridge_0_m0_waitrequest,                     //                                                .waitrequest
		input  wire [0:0]  CPU_1e_mm_bridge_0_m0_burstcount,                      //                                                .burstcount
		input  wire [3:0]  CPU_1e_mm_bridge_0_m0_byteenable,                      //                                                .byteenable
		input  wire        CPU_1e_mm_bridge_0_m0_read,                            //                                                .read
		output wire [31:0] CPU_1e_mm_bridge_0_m0_readdata,                        //                                                .readdata
		output wire        CPU_1e_mm_bridge_0_m0_readdatavalid,                   //                                                .readdatavalid
		input  wire        CPU_1e_mm_bridge_0_m0_write,                           //                                                .write
		input  wire [31:0] CPU_1e_mm_bridge_0_m0_writedata,                       //                                                .writedata
		input  wire        CPU_1e_mm_bridge_0_m0_debugaccess,                     //                                                .debugaccess
		input  wire [27:0] cpu_1f_data_master_address,                            //                              cpu_1f_data_master.address
		output wire        cpu_1f_data_master_waitrequest,                        //                                                .waitrequest
		input  wire [3:0]  cpu_1f_data_master_byteenable,                         //                                                .byteenable
		input  wire        cpu_1f_data_master_read,                               //                                                .read
		output wire [31:0] cpu_1f_data_master_readdata,                           //                                                .readdata
		input  wire        cpu_1f_data_master_write,                              //                                                .write
		input  wire [31:0] cpu_1f_data_master_writedata,                          //                                                .writedata
		input  wire        cpu_1f_data_master_debugaccess,                        //                                                .debugaccess
		input  wire [27:0] cpu_1f_instruction_master_address,                     //                       cpu_1f_instruction_master.address
		output wire        cpu_1f_instruction_master_waitrequest,                 //                                                .waitrequest
		input  wire        cpu_1f_instruction_master_read,                        //                                                .read
		output wire [31:0] cpu_1f_instruction_master_readdata,                    //                                                .readdata
		output wire [8:0]  cpu_1a_debug_mem_slave_address,                        //                          cpu_1a_debug_mem_slave.address
		output wire        cpu_1a_debug_mem_slave_write,                          //                                                .write
		output wire        cpu_1a_debug_mem_slave_read,                           //                                                .read
		input  wire [31:0] cpu_1a_debug_mem_slave_readdata,                       //                                                .readdata
		output wire [31:0] cpu_1a_debug_mem_slave_writedata,                      //                                                .writedata
		output wire [3:0]  cpu_1a_debug_mem_slave_byteenable,                     //                                                .byteenable
		input  wire        cpu_1a_debug_mem_slave_waitrequest,                    //                                                .waitrequest
		output wire        cpu_1a_debug_mem_slave_debugaccess,                    //                                                .debugaccess
		output wire [8:0]  cpu_1f_debug_mem_slave_address,                        //                          cpu_1f_debug_mem_slave.address
		output wire        cpu_1f_debug_mem_slave_write,                          //                                                .write
		output wire        cpu_1f_debug_mem_slave_read,                           //                                                .read
		input  wire [31:0] cpu_1f_debug_mem_slave_readdata,                       //                                                .readdata
		output wire [31:0] cpu_1f_debug_mem_slave_writedata,                      //                                                .writedata
		output wire [3:0]  cpu_1f_debug_mem_slave_byteenable,                     //                                                .byteenable
		input  wire        cpu_1f_debug_mem_slave_waitrequest,                    //                                                .waitrequest
		output wire        cpu_1f_debug_mem_slave_debugaccess,                    //                                                .debugaccess
		output wire        fifo_qa_p1_in_write,                                   //                                   fifo_qa_p1_in.write
		output wire [31:0] fifo_qa_p1_in_writedata,                               //                                                .writedata
		input  wire        fifo_qa_p1_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qa_p1_in_csr_address,                             //                               fifo_qa_p1_in_csr.address
		output wire        fifo_qa_p1_in_csr_write,                               //                                                .write
		output wire        fifo_qa_p1_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qa_p1_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qa_p1_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qa_p1_out_read,                                   //                                  fifo_qa_p1_out.read
		input  wire [31:0] fifo_qa_p1_out_readdata,                               //                                                .readdata
		input  wire        fifo_qa_p1_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qa_p2_in_write,                                   //                                   fifo_qa_p2_in.write
		output wire [31:0] fifo_qa_p2_in_writedata,                               //                                                .writedata
		input  wire        fifo_qa_p2_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qa_p2_in_csr_address,                             //                               fifo_qa_p2_in_csr.address
		output wire        fifo_qa_p2_in_csr_write,                               //                                                .write
		output wire        fifo_qa_p2_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qa_p2_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qa_p2_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qa_p2_out_read,                                   //                                  fifo_qa_p2_out.read
		input  wire [31:0] fifo_qa_p2_out_readdata,                               //                                                .readdata
		input  wire        fifo_qa_p2_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qa_p3_in_write,                                   //                                   fifo_qa_p3_in.write
		output wire [31:0] fifo_qa_p3_in_writedata,                               //                                                .writedata
		input  wire        fifo_qa_p3_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qa_p3_in_csr_address,                             //                               fifo_qa_p3_in_csr.address
		output wire        fifo_qa_p3_in_csr_write,                               //                                                .write
		output wire        fifo_qa_p3_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qa_p3_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qa_p3_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qa_p3_out_read,                                   //                                  fifo_qa_p3_out.read
		input  wire [31:0] fifo_qa_p3_out_readdata,                               //                                                .readdata
		input  wire        fifo_qa_p3_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qb_p1_in_write,                                   //                                   fifo_qb_p1_in.write
		output wire [31:0] fifo_qb_p1_in_writedata,                               //                                                .writedata
		input  wire        fifo_qb_p1_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qb_p1_in_csr_address,                             //                               fifo_qb_p1_in_csr.address
		output wire        fifo_qb_p1_in_csr_write,                               //                                                .write
		output wire        fifo_qb_p1_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qb_p1_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qb_p1_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qb_p1_out_read,                                   //                                  fifo_qb_p1_out.read
		input  wire [31:0] fifo_qb_p1_out_readdata,                               //                                                .readdata
		input  wire        fifo_qb_p1_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qb_p2_in_write,                                   //                                   fifo_qb_p2_in.write
		output wire [31:0] fifo_qb_p2_in_writedata,                               //                                                .writedata
		input  wire        fifo_qb_p2_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qb_p2_in_csr_address,                             //                               fifo_qb_p2_in_csr.address
		output wire        fifo_qb_p2_in_csr_write,                               //                                                .write
		output wire        fifo_qb_p2_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qb_p2_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qb_p2_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qb_p2_out_read,                                   //                                  fifo_qb_p2_out.read
		input  wire [31:0] fifo_qb_p2_out_readdata,                               //                                                .readdata
		input  wire        fifo_qb_p2_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qb_p3_in_write,                                   //                                   fifo_qb_p3_in.write
		output wire [31:0] fifo_qb_p3_in_writedata,                               //                                                .writedata
		input  wire        fifo_qb_p3_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qb_p3_in_csr_address,                             //                               fifo_qb_p3_in_csr.address
		output wire        fifo_qb_p3_in_csr_write,                               //                                                .write
		output wire        fifo_qb_p3_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qb_p3_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qb_p3_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qb_p3_out_read,                                   //                                  fifo_qb_p3_out.read
		input  wire [31:0] fifo_qb_p3_out_readdata,                               //                                                .readdata
		input  wire        fifo_qb_p3_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qc_p1_in_write,                                   //                                   fifo_qc_p1_in.write
		output wire [31:0] fifo_qc_p1_in_writedata,                               //                                                .writedata
		input  wire        fifo_qc_p1_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qc_p1_in_csr_address,                             //                               fifo_qc_p1_in_csr.address
		output wire        fifo_qc_p1_in_csr_write,                               //                                                .write
		output wire        fifo_qc_p1_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qc_p1_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qc_p1_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qc_p1_out_read,                                   //                                  fifo_qc_p1_out.read
		input  wire [31:0] fifo_qc_p1_out_readdata,                               //                                                .readdata
		input  wire        fifo_qc_p1_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qc_p2_in_write,                                   //                                   fifo_qc_p2_in.write
		output wire [31:0] fifo_qc_p2_in_writedata,                               //                                                .writedata
		input  wire        fifo_qc_p2_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qc_p2_in_csr_address,                             //                               fifo_qc_p2_in_csr.address
		output wire        fifo_qc_p2_in_csr_write,                               //                                                .write
		output wire        fifo_qc_p2_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qc_p2_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qc_p2_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qc_p2_out_read,                                   //                                  fifo_qc_p2_out.read
		input  wire [31:0] fifo_qc_p2_out_readdata,                               //                                                .readdata
		input  wire        fifo_qc_p2_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qc_p3_in_write,                                   //                                   fifo_qc_p3_in.write
		output wire [31:0] fifo_qc_p3_in_writedata,                               //                                                .writedata
		input  wire        fifo_qc_p3_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qc_p3_in_csr_address,                             //                               fifo_qc_p3_in_csr.address
		output wire        fifo_qc_p3_in_csr_write,                               //                                                .write
		output wire        fifo_qc_p3_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qc_p3_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qc_p3_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qc_p3_out_read,                                   //                                  fifo_qc_p3_out.read
		input  wire [31:0] fifo_qc_p3_out_readdata,                               //                                                .readdata
		input  wire        fifo_qc_p3_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qd_p1_in_write,                                   //                                   fifo_qd_p1_in.write
		output wire [31:0] fifo_qd_p1_in_writedata,                               //                                                .writedata
		input  wire        fifo_qd_p1_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qd_p1_in_csr_address,                             //                               fifo_qd_p1_in_csr.address
		output wire        fifo_qd_p1_in_csr_write,                               //                                                .write
		output wire        fifo_qd_p1_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qd_p1_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qd_p1_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qd_p1_out_read,                                   //                                  fifo_qd_p1_out.read
		input  wire [31:0] fifo_qd_p1_out_readdata,                               //                                                .readdata
		input  wire        fifo_qd_p1_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qd_p2_in_write,                                   //                                   fifo_qd_p2_in.write
		output wire [31:0] fifo_qd_p2_in_writedata,                               //                                                .writedata
		input  wire        fifo_qd_p2_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qd_p2_in_csr_address,                             //                               fifo_qd_p2_in_csr.address
		output wire        fifo_qd_p2_in_csr_write,                               //                                                .write
		output wire        fifo_qd_p2_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qd_p2_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qd_p2_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qd_p2_out_read,                                   //                                  fifo_qd_p2_out.read
		input  wire [31:0] fifo_qd_p2_out_readdata,                               //                                                .readdata
		input  wire        fifo_qd_p2_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qd_p3_in_write,                                   //                                   fifo_qd_p3_in.write
		output wire [31:0] fifo_qd_p3_in_writedata,                               //                                                .writedata
		input  wire        fifo_qd_p3_in_waitrequest,                             //                                                .waitrequest
		output wire [2:0]  fifo_qd_p3_in_csr_address,                             //                               fifo_qd_p3_in_csr.address
		output wire        fifo_qd_p3_in_csr_write,                               //                                                .write
		output wire        fifo_qd_p3_in_csr_read,                                //                                                .read
		input  wire [31:0] fifo_qd_p3_in_csr_readdata,                            //                                                .readdata
		output wire [31:0] fifo_qd_p3_in_csr_writedata,                           //                                                .writedata
		output wire        fifo_qd_p3_out_read,                                   //                                  fifo_qd_p3_out.read
		input  wire [31:0] fifo_qd_p3_out_readdata,                               //                                                .readdata
		input  wire        fifo_qd_p3_out_waitrequest,                            //                                                .waitrequest
		output wire        fifo_qe_in_write,                                      //                                      fifo_qe_in.write
		output wire [31:0] fifo_qe_in_writedata,                                  //                                                .writedata
		input  wire        fifo_qe_in_waitrequest,                                //                                                .waitrequest
		output wire [2:0]  fifo_qe_in_csr_address,                                //                                  fifo_qe_in_csr.address
		output wire        fifo_qe_in_csr_write,                                  //                                                .write
		output wire        fifo_qe_in_csr_read,                                   //                                                .read
		input  wire [31:0] fifo_qe_in_csr_readdata,                               //                                                .readdata
		output wire [31:0] fifo_qe_in_csr_writedata,                              //                                                .writedata
		output wire        fifo_qe_out_read,                                      //                                     fifo_qe_out.read
		input  wire [31:0] fifo_qe_out_readdata,                                  //                                                .readdata
		input  wire        fifo_qe_out_waitrequest,                               //                                                .waitrequest
		output wire [0:0]  jtag_uart_1a_avalon_jtag_slave_address,                //                  jtag_uart_1a_avalon_jtag_slave.address
		output wire        jtag_uart_1a_avalon_jtag_slave_write,                  //                                                .write
		output wire        jtag_uart_1a_avalon_jtag_slave_read,                   //                                                .read
		input  wire [31:0] jtag_uart_1a_avalon_jtag_slave_readdata,               //                                                .readdata
		output wire [31:0] jtag_uart_1a_avalon_jtag_slave_writedata,              //                                                .writedata
		input  wire        jtag_uart_1a_avalon_jtag_slave_waitrequest,            //                                                .waitrequest
		output wire        jtag_uart_1a_avalon_jtag_slave_chipselect,             //                                                .chipselect
		output wire [0:0]  jtag_uart_1f_avalon_jtag_slave_address,                //                  jtag_uart_1f_avalon_jtag_slave.address
		output wire        jtag_uart_1f_avalon_jtag_slave_write,                  //                                                .write
		output wire        jtag_uart_1f_avalon_jtag_slave_read,                   //                                                .read
		input  wire [31:0] jtag_uart_1f_avalon_jtag_slave_readdata,               //                                                .readdata
		output wire [31:0] jtag_uart_1f_avalon_jtag_slave_writedata,              //                                                .writedata
		input  wire        jtag_uart_1f_avalon_jtag_slave_waitrequest,            //                                                .waitrequest
		output wire        jtag_uart_1f_avalon_jtag_slave_chipselect,             //                                                .chipselect
		output wire [7:0]  mem_info_s1_address,                                   //                                     mem_info_s1.address
		output wire        mem_info_s1_write,                                     //                                                .write
		input  wire [31:0] mem_info_s1_readdata,                                  //                                                .readdata
		output wire [31:0] mem_info_s1_writedata,                                 //                                                .writedata
		output wire [3:0]  mem_info_s1_byteenable,                                //                                                .byteenable
		output wire        mem_info_s1_chipselect,                                //                                                .chipselect
		output wire        mem_info_s1_clken,                                     //                                                .clken
		output wire [1:0]  pll_pll_slave_address,                                 //                                   pll_pll_slave.address
		output wire        pll_pll_slave_write,                                   //                                                .write
		output wire        pll_pll_slave_read,                                    //                                                .read
		input  wire [31:0] pll_pll_slave_readdata,                                //                                                .readdata
		output wire [31:0] pll_pll_slave_writedata,                               //                                                .writedata
		output wire [24:0] sdram_controller_s1_address,                           //                             sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                             //                                                .write
		output wire        sdram_controller_s1_read,                              //                                                .read
		input  wire [31:0] sdram_controller_s1_readdata,                          //                                                .readdata
		output wire [31:0] sdram_controller_s1_writedata,                         //                                                .writedata
		output wire [3:0]  sdram_controller_s1_byteenable,                        //                                                .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                     //                                                .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                       //                                                .waitrequest
		output wire        sdram_controller_s1_chipselect,                        //                                                .chipselect
		output wire [0:0]  sys_id_1a_control_slave_address,                       //                         sys_id_1a_control_slave.address
		input  wire [31:0] sys_id_1a_control_slave_readdata,                      //                                                .readdata
		output wire [0:0]  sysid_1f_control_slave_address,                        //                          sysid_1f_control_slave.address
		input  wire [31:0] sysid_1f_control_slave_readdata,                       //                                                .readdata
		output wire [2:0]  timer_1a_s1_address,                                   //                                     timer_1a_s1.address
		output wire        timer_1a_s1_write,                                     //                                                .write
		input  wire [15:0] timer_1a_s1_readdata,                                  //                                                .readdata
		output wire [15:0] timer_1a_s1_writedata,                                 //                                                .writedata
		output wire        timer_1a_s1_chipselect,                                //                                                .chipselect
		output wire [2:0]  timer_1f_s1_address,                                   //                                     timer_1f_s1.address
		output wire        timer_1f_s1_write,                                     //                                                .write
		input  wire [15:0] timer_1f_s1_readdata,                                  //                                                .readdata
		output wire [15:0] timer_1f_s1_writedata,                                 //                                                .writedata
		output wire        timer_1f_s1_chipselect                                 //                                                .chipselect
	);

	wire          cpu_1a_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_1a_data_master_agent:av_waitrequest -> cpu_1a_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_1a_data_master_translator_avalon_universal_master_0_readdata;             // cpu_1a_data_master_agent:av_readdata -> cpu_1a_data_master_translator:uav_readdata
	wire          cpu_1a_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_1a_data_master_translator:uav_debugaccess -> cpu_1a_data_master_agent:av_debugaccess
	wire   [27:0] cpu_1a_data_master_translator_avalon_universal_master_0_address;              // cpu_1a_data_master_translator:uav_address -> cpu_1a_data_master_agent:av_address
	wire          cpu_1a_data_master_translator_avalon_universal_master_0_read;                 // cpu_1a_data_master_translator:uav_read -> cpu_1a_data_master_agent:av_read
	wire    [3:0] cpu_1a_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_1a_data_master_translator:uav_byteenable -> cpu_1a_data_master_agent:av_byteenable
	wire          cpu_1a_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_1a_data_master_agent:av_readdatavalid -> cpu_1a_data_master_translator:uav_readdatavalid
	wire          cpu_1a_data_master_translator_avalon_universal_master_0_lock;                 // cpu_1a_data_master_translator:uav_lock -> cpu_1a_data_master_agent:av_lock
	wire          cpu_1a_data_master_translator_avalon_universal_master_0_write;                // cpu_1a_data_master_translator:uav_write -> cpu_1a_data_master_agent:av_write
	wire   [31:0] cpu_1a_data_master_translator_avalon_universal_master_0_writedata;            // cpu_1a_data_master_translator:uav_writedata -> cpu_1a_data_master_agent:av_writedata
	wire    [2:0] cpu_1a_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_1a_data_master_translator:uav_burstcount -> cpu_1a_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> cpu_1a_data_master_agent:rp_valid
	wire  [109:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> cpu_1a_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                            // cpu_1a_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [49:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> cpu_1a_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> cpu_1a_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> cpu_1a_data_master_agent:rp_endofpacket
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_1f_data_master_agent:av_waitrequest -> cpu_1f_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_1f_data_master_translator_avalon_universal_master_0_readdata;             // cpu_1f_data_master_agent:av_readdata -> cpu_1f_data_master_translator:uav_readdata
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_1f_data_master_translator:uav_debugaccess -> cpu_1f_data_master_agent:av_debugaccess
	wire   [27:0] cpu_1f_data_master_translator_avalon_universal_master_0_address;              // cpu_1f_data_master_translator:uav_address -> cpu_1f_data_master_agent:av_address
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_read;                 // cpu_1f_data_master_translator:uav_read -> cpu_1f_data_master_agent:av_read
	wire    [3:0] cpu_1f_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_1f_data_master_translator:uav_byteenable -> cpu_1f_data_master_agent:av_byteenable
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_1f_data_master_agent:av_readdatavalid -> cpu_1f_data_master_translator:uav_readdatavalid
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_lock;                 // cpu_1f_data_master_translator:uav_lock -> cpu_1f_data_master_agent:av_lock
	wire          cpu_1f_data_master_translator_avalon_universal_master_0_write;                // cpu_1f_data_master_translator:uav_write -> cpu_1f_data_master_agent:av_write
	wire   [31:0] cpu_1f_data_master_translator_avalon_universal_master_0_writedata;            // cpu_1f_data_master_translator:uav_writedata -> cpu_1f_data_master_agent:av_writedata
	wire    [2:0] cpu_1f_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_1f_data_master_translator:uav_burstcount -> cpu_1f_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> cpu_1f_data_master_agent:rp_valid
	wire  [109:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> cpu_1f_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                        // cpu_1f_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [49:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> cpu_1f_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> cpu_1f_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> cpu_1f_data_master_agent:rp_endofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1b_p1_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1b_p1_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1b_p1_mm_bridge_0_m0_agent:av_readdata -> CPU_1b_p1_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1b_p1_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1b_p1_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1b_p1_mm_bridge_0_m0_translator:uav_address -> CPU_1b_p1_mm_bridge_0_m0_agent:av_address
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1b_p1_mm_bridge_0_m0_translator:uav_read -> CPU_1b_p1_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1b_p1_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1b_p1_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1b_p1_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1b_p1_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1b_p1_mm_bridge_0_m0_translator:uav_lock -> CPU_1b_p1_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1b_p1_mm_bridge_0_m0_translator:uav_write -> CPU_1b_p1_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1b_p1_mm_bridge_0_m0_translator:uav_writedata -> CPU_1b_p1_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1b_p1_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1b_p1_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;       // CPU_1e_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1e_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;          // CPU_1e_mm_bridge_0_m0_agent:av_readdata -> CPU_1e_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;       // CPU_1e_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1e_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_address;           // CPU_1e_mm_bridge_0_m0_translator:uav_address -> CPU_1e_mm_bridge_0_m0_agent:av_address
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_read;              // CPU_1e_mm_bridge_0_m0_translator:uav_read -> CPU_1e_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;        // CPU_1e_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1e_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;     // CPU_1e_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1e_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;              // CPU_1e_mm_bridge_0_m0_translator:uav_lock -> CPU_1e_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_write;             // CPU_1e_mm_bridge_0_m0_translator:uav_write -> CPU_1e_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;         // CPU_1e_mm_bridge_0_m0_translator:uav_writedata -> CPU_1e_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;        // CPU_1e_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1e_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1d_p1_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1d_p1_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1d_p1_mm_bridge_0_m0_agent:av_readdata -> CPU_1d_p1_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1d_p1_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1d_p1_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1d_p1_mm_bridge_0_m0_translator:uav_address -> CPU_1d_p1_mm_bridge_0_m0_agent:av_address
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1d_p1_mm_bridge_0_m0_translator:uav_read -> CPU_1d_p1_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1d_p1_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1d_p1_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1d_p1_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1d_p1_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1d_p1_mm_bridge_0_m0_translator:uav_lock -> CPU_1d_p1_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1d_p1_mm_bridge_0_m0_translator:uav_write -> CPU_1d_p1_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1d_p1_mm_bridge_0_m0_translator:uav_writedata -> CPU_1d_p1_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1d_p1_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1d_p1_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1c_p1_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1c_p1_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1c_p1_mm_bridge_0_m0_agent:av_readdata -> CPU_1c_p1_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1c_p1_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1c_p1_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1c_p1_mm_bridge_0_m0_translator:uav_address -> CPU_1c_p1_mm_bridge_0_m0_agent:av_address
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1c_p1_mm_bridge_0_m0_translator:uav_read -> CPU_1c_p1_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1c_p1_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1c_p1_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1c_p1_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1c_p1_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1c_p1_mm_bridge_0_m0_translator:uav_lock -> CPU_1c_p1_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1c_p1_mm_bridge_0_m0_translator:uav_write -> CPU_1c_p1_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1c_p1_mm_bridge_0_m0_translator:uav_writedata -> CPU_1c_p1_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1c_p1_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1c_p1_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1b_p2_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1b_p2_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1b_p2_mm_bridge_0_m0_agent:av_readdata -> CPU_1b_p2_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1b_p2_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1b_p2_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1b_p2_mm_bridge_0_m0_translator:uav_address -> CPU_1b_p2_mm_bridge_0_m0_agent:av_address
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1b_p2_mm_bridge_0_m0_translator:uav_read -> CPU_1b_p2_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1b_p2_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1b_p2_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1b_p2_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1b_p2_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1b_p2_mm_bridge_0_m0_translator:uav_lock -> CPU_1b_p2_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1b_p2_mm_bridge_0_m0_translator:uav_write -> CPU_1b_p2_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1b_p2_mm_bridge_0_m0_translator:uav_writedata -> CPU_1b_p2_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1b_p2_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1b_p2_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1b_p3_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1b_p3_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1b_p3_mm_bridge_0_m0_agent:av_readdata -> CPU_1b_p3_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1b_p3_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1b_p3_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1b_p3_mm_bridge_0_m0_translator:uav_address -> CPU_1b_p3_mm_bridge_0_m0_agent:av_address
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1b_p3_mm_bridge_0_m0_translator:uav_read -> CPU_1b_p3_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1b_p3_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1b_p3_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1b_p3_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1b_p3_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1b_p3_mm_bridge_0_m0_translator:uav_lock -> CPU_1b_p3_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1b_p3_mm_bridge_0_m0_translator:uav_write -> CPU_1b_p3_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1b_p3_mm_bridge_0_m0_translator:uav_writedata -> CPU_1b_p3_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1b_p3_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1b_p3_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1c_p2_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1c_p2_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1c_p2_mm_bridge_0_m0_agent:av_readdata -> CPU_1c_p2_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1c_p2_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1c_p2_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1c_p2_mm_bridge_0_m0_translator:uav_address -> CPU_1c_p2_mm_bridge_0_m0_agent:av_address
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1c_p2_mm_bridge_0_m0_translator:uav_read -> CPU_1c_p2_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1c_p2_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1c_p2_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1c_p2_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1c_p2_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1c_p2_mm_bridge_0_m0_translator:uav_lock -> CPU_1c_p2_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1c_p2_mm_bridge_0_m0_translator:uav_write -> CPU_1c_p2_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1c_p2_mm_bridge_0_m0_translator:uav_writedata -> CPU_1c_p2_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1c_p2_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1c_p2_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1c_p3_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1c_p3_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1c_p3_mm_bridge_0_m0_agent:av_readdata -> CPU_1c_p3_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1c_p3_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1c_p3_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1c_p3_mm_bridge_0_m0_translator:uav_address -> CPU_1c_p3_mm_bridge_0_m0_agent:av_address
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1c_p3_mm_bridge_0_m0_translator:uav_read -> CPU_1c_p3_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1c_p3_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1c_p3_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1c_p3_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1c_p3_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1c_p3_mm_bridge_0_m0_translator:uav_lock -> CPU_1c_p3_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1c_p3_mm_bridge_0_m0_translator:uav_write -> CPU_1c_p3_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1c_p3_mm_bridge_0_m0_translator:uav_writedata -> CPU_1c_p3_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1c_p3_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1c_p3_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1d_p2_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1d_p2_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1d_p2_mm_bridge_0_m0_agent:av_readdata -> CPU_1d_p2_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1d_p2_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1d_p2_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1d_p2_mm_bridge_0_m0_translator:uav_address -> CPU_1d_p2_mm_bridge_0_m0_agent:av_address
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1d_p2_mm_bridge_0_m0_translator:uav_read -> CPU_1d_p2_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1d_p2_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1d_p2_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1d_p2_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1d_p2_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1d_p2_mm_bridge_0_m0_translator:uav_lock -> CPU_1d_p2_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1d_p2_mm_bridge_0_m0_translator:uav_write -> CPU_1d_p2_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1d_p2_mm_bridge_0_m0_translator:uav_writedata -> CPU_1d_p2_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1d_p2_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1d_p2_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // CPU_1d_p3_mm_bridge_0_m0_agent:av_waitrequest -> CPU_1d_p3_mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // CPU_1d_p3_mm_bridge_0_m0_agent:av_readdata -> CPU_1d_p3_mm_bridge_0_m0_translator:uav_readdata
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // CPU_1d_p3_mm_bridge_0_m0_translator:uav_debugaccess -> CPU_1d_p3_mm_bridge_0_m0_agent:av_debugaccess
	wire   [27:0] cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // CPU_1d_p3_mm_bridge_0_m0_translator:uav_address -> CPU_1d_p3_mm_bridge_0_m0_agent:av_address
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // CPU_1d_p3_mm_bridge_0_m0_translator:uav_read -> CPU_1d_p3_mm_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // CPU_1d_p3_mm_bridge_0_m0_translator:uav_byteenable -> CPU_1d_p3_mm_bridge_0_m0_agent:av_byteenable
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // CPU_1d_p3_mm_bridge_0_m0_agent:av_readdatavalid -> CPU_1d_p3_mm_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // CPU_1d_p3_mm_bridge_0_m0_translator:uav_lock -> CPU_1d_p3_mm_bridge_0_m0_agent:av_lock
	wire          cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // CPU_1d_p3_mm_bridge_0_m0_translator:uav_write -> CPU_1d_p3_mm_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // CPU_1d_p3_mm_bridge_0_m0_translator:uav_writedata -> CPU_1d_p3_mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // CPU_1d_p3_mm_bridge_0_m0_translator:uav_burstcount -> CPU_1d_p3_mm_bridge_0_m0_agent:av_burstcount
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_1f_instruction_master_agent:av_waitrequest -> cpu_1f_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_1f_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_1f_instruction_master_agent:av_readdata -> cpu_1f_instruction_master_translator:uav_readdata
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_1f_instruction_master_translator:uav_debugaccess -> cpu_1f_instruction_master_agent:av_debugaccess
	wire   [27:0] cpu_1f_instruction_master_translator_avalon_universal_master_0_address;       // cpu_1f_instruction_master_translator:uav_address -> cpu_1f_instruction_master_agent:av_address
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_read;          // cpu_1f_instruction_master_translator:uav_read -> cpu_1f_instruction_master_agent:av_read
	wire    [3:0] cpu_1f_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_1f_instruction_master_translator:uav_byteenable -> cpu_1f_instruction_master_agent:av_byteenable
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_1f_instruction_master_agent:av_readdatavalid -> cpu_1f_instruction_master_translator:uav_readdatavalid
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_1f_instruction_master_translator:uav_lock -> cpu_1f_instruction_master_agent:av_lock
	wire          cpu_1f_instruction_master_translator_avalon_universal_master_0_write;         // cpu_1f_instruction_master_translator:uav_write -> cpu_1f_instruction_master_agent:av_write
	wire   [31:0] cpu_1f_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_1f_instruction_master_translator:uav_writedata -> cpu_1f_instruction_master_agent:av_writedata
	wire    [2:0] cpu_1f_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_1f_instruction_master_translator:uav_burstcount -> cpu_1f_instruction_master_agent:av_burstcount
	wire          rsp_mux_012_src_valid;                                                        // rsp_mux_012:src_valid -> cpu_1f_instruction_master_agent:rp_valid
	wire  [109:0] rsp_mux_012_src_data;                                                         // rsp_mux_012:src_data -> cpu_1f_instruction_master_agent:rp_data
	wire          rsp_mux_012_src_ready;                                                        // cpu_1f_instruction_master_agent:rp_ready -> rsp_mux_012:src_ready
	wire   [49:0] rsp_mux_012_src_channel;                                                      // rsp_mux_012:src_channel -> cpu_1f_instruction_master_agent:rp_channel
	wire          rsp_mux_012_src_startofpacket;                                                // rsp_mux_012:src_startofpacket -> cpu_1f_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_012_src_endofpacket;                                                  // rsp_mux_012:src_endofpacket -> cpu_1f_instruction_master_agent:rp_endofpacket
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_1a_instruction_master_agent:av_waitrequest -> cpu_1a_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_1a_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_1a_instruction_master_agent:av_readdata -> cpu_1a_instruction_master_translator:uav_readdata
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_1a_instruction_master_translator:uav_debugaccess -> cpu_1a_instruction_master_agent:av_debugaccess
	wire   [27:0] cpu_1a_instruction_master_translator_avalon_universal_master_0_address;       // cpu_1a_instruction_master_translator:uav_address -> cpu_1a_instruction_master_agent:av_address
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_read;          // cpu_1a_instruction_master_translator:uav_read -> cpu_1a_instruction_master_agent:av_read
	wire    [3:0] cpu_1a_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_1a_instruction_master_translator:uav_byteenable -> cpu_1a_instruction_master_agent:av_byteenable
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_1a_instruction_master_agent:av_readdatavalid -> cpu_1a_instruction_master_translator:uav_readdatavalid
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_1a_instruction_master_translator:uav_lock -> cpu_1a_instruction_master_agent:av_lock
	wire          cpu_1a_instruction_master_translator_avalon_universal_master_0_write;         // cpu_1a_instruction_master_translator:uav_write -> cpu_1a_instruction_master_agent:av_write
	wire   [31:0] cpu_1a_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_1a_instruction_master_translator:uav_writedata -> cpu_1a_instruction_master_agent:av_writedata
	wire    [2:0] cpu_1a_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_1a_instruction_master_translator:uav_burstcount -> cpu_1a_instruction_master_agent:av_burstcount
	wire          rsp_mux_013_src_valid;                                                        // rsp_mux_013:src_valid -> cpu_1a_instruction_master_agent:rp_valid
	wire  [109:0] rsp_mux_013_src_data;                                                         // rsp_mux_013:src_data -> cpu_1a_instruction_master_agent:rp_data
	wire          rsp_mux_013_src_ready;                                                        // cpu_1a_instruction_master_agent:rp_ready -> rsp_mux_013:src_ready
	wire   [49:0] rsp_mux_013_src_channel;                                                      // rsp_mux_013:src_channel -> cpu_1a_instruction_master_agent:rp_channel
	wire          rsp_mux_013_src_startofpacket;                                                // rsp_mux_013:src_startofpacket -> cpu_1a_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_013_src_endofpacket;                                                  // rsp_mux_013:src_endofpacket -> cpu_1a_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_1a_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_1a_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_1a_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_1a_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_1a_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_1a_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_1a_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_1a_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_1a_avalon_jtag_slave_agent:m0_address -> jtag_uart_1a_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_1a_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_1a_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_1a_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_1a_avalon_jtag_slave_agent:m0_read -> jtag_uart_1a_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_1a_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_1a_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_1a_avalon_jtag_slave_agent:m0_lock -> jtag_uart_1a_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_1a_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_1a_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_1a_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_1a_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_1a_avalon_jtag_slave_agent:m0_write -> jtag_uart_1a_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_1a_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_1a_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_1a_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_1a_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_uart_1a_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_1a_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_1a_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_1a_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_1a_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_1a_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_1a_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_1a_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_1a_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_1a_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> jtag_uart_1a_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> jtag_uart_1a_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                            // jtag_uart_1a_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [49:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> jtag_uart_1a_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> jtag_uart_1a_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> jtag_uart_1a_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sys_id_1a_control_slave_agent_m0_readdata;                                    // sys_id_1a_control_slave_translator:uav_readdata -> sys_id_1a_control_slave_agent:m0_readdata
	wire          sys_id_1a_control_slave_agent_m0_waitrequest;                                 // sys_id_1a_control_slave_translator:uav_waitrequest -> sys_id_1a_control_slave_agent:m0_waitrequest
	wire          sys_id_1a_control_slave_agent_m0_debugaccess;                                 // sys_id_1a_control_slave_agent:m0_debugaccess -> sys_id_1a_control_slave_translator:uav_debugaccess
	wire   [27:0] sys_id_1a_control_slave_agent_m0_address;                                     // sys_id_1a_control_slave_agent:m0_address -> sys_id_1a_control_slave_translator:uav_address
	wire    [3:0] sys_id_1a_control_slave_agent_m0_byteenable;                                  // sys_id_1a_control_slave_agent:m0_byteenable -> sys_id_1a_control_slave_translator:uav_byteenable
	wire          sys_id_1a_control_slave_agent_m0_read;                                        // sys_id_1a_control_slave_agent:m0_read -> sys_id_1a_control_slave_translator:uav_read
	wire          sys_id_1a_control_slave_agent_m0_readdatavalid;                               // sys_id_1a_control_slave_translator:uav_readdatavalid -> sys_id_1a_control_slave_agent:m0_readdatavalid
	wire          sys_id_1a_control_slave_agent_m0_lock;                                        // sys_id_1a_control_slave_agent:m0_lock -> sys_id_1a_control_slave_translator:uav_lock
	wire   [31:0] sys_id_1a_control_slave_agent_m0_writedata;                                   // sys_id_1a_control_slave_agent:m0_writedata -> sys_id_1a_control_slave_translator:uav_writedata
	wire          sys_id_1a_control_slave_agent_m0_write;                                       // sys_id_1a_control_slave_agent:m0_write -> sys_id_1a_control_slave_translator:uav_write
	wire    [2:0] sys_id_1a_control_slave_agent_m0_burstcount;                                  // sys_id_1a_control_slave_agent:m0_burstcount -> sys_id_1a_control_slave_translator:uav_burstcount
	wire          sys_id_1a_control_slave_agent_rf_source_valid;                                // sys_id_1a_control_slave_agent:rf_source_valid -> sys_id_1a_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] sys_id_1a_control_slave_agent_rf_source_data;                                 // sys_id_1a_control_slave_agent:rf_source_data -> sys_id_1a_control_slave_agent_rsp_fifo:in_data
	wire          sys_id_1a_control_slave_agent_rf_source_ready;                                // sys_id_1a_control_slave_agent_rsp_fifo:in_ready -> sys_id_1a_control_slave_agent:rf_source_ready
	wire          sys_id_1a_control_slave_agent_rf_source_startofpacket;                        // sys_id_1a_control_slave_agent:rf_source_startofpacket -> sys_id_1a_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sys_id_1a_control_slave_agent_rf_source_endofpacket;                          // sys_id_1a_control_slave_agent:rf_source_endofpacket -> sys_id_1a_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sys_id_1a_control_slave_agent_rsp_fifo_out_valid;                             // sys_id_1a_control_slave_agent_rsp_fifo:out_valid -> sys_id_1a_control_slave_agent:rf_sink_valid
	wire  [110:0] sys_id_1a_control_slave_agent_rsp_fifo_out_data;                              // sys_id_1a_control_slave_agent_rsp_fifo:out_data -> sys_id_1a_control_slave_agent:rf_sink_data
	wire          sys_id_1a_control_slave_agent_rsp_fifo_out_ready;                             // sys_id_1a_control_slave_agent:rf_sink_ready -> sys_id_1a_control_slave_agent_rsp_fifo:out_ready
	wire          sys_id_1a_control_slave_agent_rsp_fifo_out_startofpacket;                     // sys_id_1a_control_slave_agent_rsp_fifo:out_startofpacket -> sys_id_1a_control_slave_agent:rf_sink_startofpacket
	wire          sys_id_1a_control_slave_agent_rsp_fifo_out_endofpacket;                       // sys_id_1a_control_slave_agent_rsp_fifo:out_endofpacket -> sys_id_1a_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> sys_id_1a_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> sys_id_1a_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                        // sys_id_1a_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [49:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> sys_id_1a_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> sys_id_1a_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> sys_id_1a_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_1a_debug_mem_slave_agent_m0_readdata;                                     // cpu_1a_debug_mem_slave_translator:uav_readdata -> cpu_1a_debug_mem_slave_agent:m0_readdata
	wire          cpu_1a_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_1a_debug_mem_slave_translator:uav_waitrequest -> cpu_1a_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_1a_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_1a_debug_mem_slave_agent:m0_debugaccess -> cpu_1a_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] cpu_1a_debug_mem_slave_agent_m0_address;                                      // cpu_1a_debug_mem_slave_agent:m0_address -> cpu_1a_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_1a_debug_mem_slave_agent_m0_byteenable;                                   // cpu_1a_debug_mem_slave_agent:m0_byteenable -> cpu_1a_debug_mem_slave_translator:uav_byteenable
	wire          cpu_1a_debug_mem_slave_agent_m0_read;                                         // cpu_1a_debug_mem_slave_agent:m0_read -> cpu_1a_debug_mem_slave_translator:uav_read
	wire          cpu_1a_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_1a_debug_mem_slave_translator:uav_readdatavalid -> cpu_1a_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_1a_debug_mem_slave_agent_m0_lock;                                         // cpu_1a_debug_mem_slave_agent:m0_lock -> cpu_1a_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_1a_debug_mem_slave_agent_m0_writedata;                                    // cpu_1a_debug_mem_slave_agent:m0_writedata -> cpu_1a_debug_mem_slave_translator:uav_writedata
	wire          cpu_1a_debug_mem_slave_agent_m0_write;                                        // cpu_1a_debug_mem_slave_agent:m0_write -> cpu_1a_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_1a_debug_mem_slave_agent_m0_burstcount;                                   // cpu_1a_debug_mem_slave_agent:m0_burstcount -> cpu_1a_debug_mem_slave_translator:uav_burstcount
	wire          cpu_1a_debug_mem_slave_agent_rf_source_valid;                                 // cpu_1a_debug_mem_slave_agent:rf_source_valid -> cpu_1a_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [110:0] cpu_1a_debug_mem_slave_agent_rf_source_data;                                  // cpu_1a_debug_mem_slave_agent:rf_source_data -> cpu_1a_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_1a_debug_mem_slave_agent_rf_source_ready;                                 // cpu_1a_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_1a_debug_mem_slave_agent:rf_source_ready
	wire          cpu_1a_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_1a_debug_mem_slave_agent:rf_source_startofpacket -> cpu_1a_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_1a_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_1a_debug_mem_slave_agent:rf_source_endofpacket -> cpu_1a_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_1a_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_1a_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_1a_debug_mem_slave_agent:rf_sink_valid
	wire  [110:0] cpu_1a_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_1a_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_1a_debug_mem_slave_agent:rf_sink_data
	wire          cpu_1a_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_1a_debug_mem_slave_agent:rf_sink_ready -> cpu_1a_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_1a_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_1a_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_1a_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_1a_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_1a_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_1a_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> cpu_1a_debug_mem_slave_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> cpu_1a_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                        // cpu_1a_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [49:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> cpu_1a_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> cpu_1a_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> cpu_1a_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p1_in_agent_m0_readdata;                                              // fifo_qa_p1_in_translator:uav_readdata -> fifo_qa_p1_in_agent:m0_readdata
	wire          fifo_qa_p1_in_agent_m0_waitrequest;                                           // fifo_qa_p1_in_translator:uav_waitrequest -> fifo_qa_p1_in_agent:m0_waitrequest
	wire          fifo_qa_p1_in_agent_m0_debugaccess;                                           // fifo_qa_p1_in_agent:m0_debugaccess -> fifo_qa_p1_in_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p1_in_agent_m0_address;                                               // fifo_qa_p1_in_agent:m0_address -> fifo_qa_p1_in_translator:uav_address
	wire    [3:0] fifo_qa_p1_in_agent_m0_byteenable;                                            // fifo_qa_p1_in_agent:m0_byteenable -> fifo_qa_p1_in_translator:uav_byteenable
	wire          fifo_qa_p1_in_agent_m0_read;                                                  // fifo_qa_p1_in_agent:m0_read -> fifo_qa_p1_in_translator:uav_read
	wire          fifo_qa_p1_in_agent_m0_readdatavalid;                                         // fifo_qa_p1_in_translator:uav_readdatavalid -> fifo_qa_p1_in_agent:m0_readdatavalid
	wire          fifo_qa_p1_in_agent_m0_lock;                                                  // fifo_qa_p1_in_agent:m0_lock -> fifo_qa_p1_in_translator:uav_lock
	wire   [31:0] fifo_qa_p1_in_agent_m0_writedata;                                             // fifo_qa_p1_in_agent:m0_writedata -> fifo_qa_p1_in_translator:uav_writedata
	wire          fifo_qa_p1_in_agent_m0_write;                                                 // fifo_qa_p1_in_agent:m0_write -> fifo_qa_p1_in_translator:uav_write
	wire    [2:0] fifo_qa_p1_in_agent_m0_burstcount;                                            // fifo_qa_p1_in_agent:m0_burstcount -> fifo_qa_p1_in_translator:uav_burstcount
	wire          fifo_qa_p1_in_agent_rf_source_valid;                                          // fifo_qa_p1_in_agent:rf_source_valid -> fifo_qa_p1_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p1_in_agent_rf_source_data;                                           // fifo_qa_p1_in_agent:rf_source_data -> fifo_qa_p1_in_agent_rsp_fifo:in_data
	wire          fifo_qa_p1_in_agent_rf_source_ready;                                          // fifo_qa_p1_in_agent_rsp_fifo:in_ready -> fifo_qa_p1_in_agent:rf_source_ready
	wire          fifo_qa_p1_in_agent_rf_source_startofpacket;                                  // fifo_qa_p1_in_agent:rf_source_startofpacket -> fifo_qa_p1_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p1_in_agent_rf_source_endofpacket;                                    // fifo_qa_p1_in_agent:rf_source_endofpacket -> fifo_qa_p1_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p1_in_agent_rsp_fifo_out_valid;                                       // fifo_qa_p1_in_agent_rsp_fifo:out_valid -> fifo_qa_p1_in_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p1_in_agent_rsp_fifo_out_data;                                        // fifo_qa_p1_in_agent_rsp_fifo:out_data -> fifo_qa_p1_in_agent:rf_sink_data
	wire          fifo_qa_p1_in_agent_rsp_fifo_out_ready;                                       // fifo_qa_p1_in_agent:rf_sink_ready -> fifo_qa_p1_in_agent_rsp_fifo:out_ready
	wire          fifo_qa_p1_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qa_p1_in_agent_rsp_fifo:out_startofpacket -> fifo_qa_p1_in_agent:rf_sink_startofpacket
	wire          fifo_qa_p1_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qa_p1_in_agent_rsp_fifo:out_endofpacket -> fifo_qa_p1_in_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> fifo_qa_p1_in_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> fifo_qa_p1_in_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                        // fifo_qa_p1_in_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [49:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> fifo_qa_p1_in_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> fifo_qa_p1_in_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> fifo_qa_p1_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p2_in_agent_m0_readdata;                                              // fifo_qa_p2_in_translator:uav_readdata -> fifo_qa_p2_in_agent:m0_readdata
	wire          fifo_qa_p2_in_agent_m0_waitrequest;                                           // fifo_qa_p2_in_translator:uav_waitrequest -> fifo_qa_p2_in_agent:m0_waitrequest
	wire          fifo_qa_p2_in_agent_m0_debugaccess;                                           // fifo_qa_p2_in_agent:m0_debugaccess -> fifo_qa_p2_in_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p2_in_agent_m0_address;                                               // fifo_qa_p2_in_agent:m0_address -> fifo_qa_p2_in_translator:uav_address
	wire    [3:0] fifo_qa_p2_in_agent_m0_byteenable;                                            // fifo_qa_p2_in_agent:m0_byteenable -> fifo_qa_p2_in_translator:uav_byteenable
	wire          fifo_qa_p2_in_agent_m0_read;                                                  // fifo_qa_p2_in_agent:m0_read -> fifo_qa_p2_in_translator:uav_read
	wire          fifo_qa_p2_in_agent_m0_readdatavalid;                                         // fifo_qa_p2_in_translator:uav_readdatavalid -> fifo_qa_p2_in_agent:m0_readdatavalid
	wire          fifo_qa_p2_in_agent_m0_lock;                                                  // fifo_qa_p2_in_agent:m0_lock -> fifo_qa_p2_in_translator:uav_lock
	wire   [31:0] fifo_qa_p2_in_agent_m0_writedata;                                             // fifo_qa_p2_in_agent:m0_writedata -> fifo_qa_p2_in_translator:uav_writedata
	wire          fifo_qa_p2_in_agent_m0_write;                                                 // fifo_qa_p2_in_agent:m0_write -> fifo_qa_p2_in_translator:uav_write
	wire    [2:0] fifo_qa_p2_in_agent_m0_burstcount;                                            // fifo_qa_p2_in_agent:m0_burstcount -> fifo_qa_p2_in_translator:uav_burstcount
	wire          fifo_qa_p2_in_agent_rf_source_valid;                                          // fifo_qa_p2_in_agent:rf_source_valid -> fifo_qa_p2_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p2_in_agent_rf_source_data;                                           // fifo_qa_p2_in_agent:rf_source_data -> fifo_qa_p2_in_agent_rsp_fifo:in_data
	wire          fifo_qa_p2_in_agent_rf_source_ready;                                          // fifo_qa_p2_in_agent_rsp_fifo:in_ready -> fifo_qa_p2_in_agent:rf_source_ready
	wire          fifo_qa_p2_in_agent_rf_source_startofpacket;                                  // fifo_qa_p2_in_agent:rf_source_startofpacket -> fifo_qa_p2_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p2_in_agent_rf_source_endofpacket;                                    // fifo_qa_p2_in_agent:rf_source_endofpacket -> fifo_qa_p2_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p2_in_agent_rsp_fifo_out_valid;                                       // fifo_qa_p2_in_agent_rsp_fifo:out_valid -> fifo_qa_p2_in_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p2_in_agent_rsp_fifo_out_data;                                        // fifo_qa_p2_in_agent_rsp_fifo:out_data -> fifo_qa_p2_in_agent:rf_sink_data
	wire          fifo_qa_p2_in_agent_rsp_fifo_out_ready;                                       // fifo_qa_p2_in_agent:rf_sink_ready -> fifo_qa_p2_in_agent_rsp_fifo:out_ready
	wire          fifo_qa_p2_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qa_p2_in_agent_rsp_fifo:out_startofpacket -> fifo_qa_p2_in_agent:rf_sink_startofpacket
	wire          fifo_qa_p2_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qa_p2_in_agent_rsp_fifo:out_endofpacket -> fifo_qa_p2_in_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                        // cmd_mux_004:src_valid -> fifo_qa_p2_in_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                         // cmd_mux_004:src_data -> fifo_qa_p2_in_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                        // fifo_qa_p2_in_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [49:0] cmd_mux_004_src_channel;                                                      // cmd_mux_004:src_channel -> fifo_qa_p2_in_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                // cmd_mux_004:src_startofpacket -> fifo_qa_p2_in_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                  // cmd_mux_004:src_endofpacket -> fifo_qa_p2_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p3_in_agent_m0_readdata;                                              // fifo_qa_p3_in_translator:uav_readdata -> fifo_qa_p3_in_agent:m0_readdata
	wire          fifo_qa_p3_in_agent_m0_waitrequest;                                           // fifo_qa_p3_in_translator:uav_waitrequest -> fifo_qa_p3_in_agent:m0_waitrequest
	wire          fifo_qa_p3_in_agent_m0_debugaccess;                                           // fifo_qa_p3_in_agent:m0_debugaccess -> fifo_qa_p3_in_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p3_in_agent_m0_address;                                               // fifo_qa_p3_in_agent:m0_address -> fifo_qa_p3_in_translator:uav_address
	wire    [3:0] fifo_qa_p3_in_agent_m0_byteenable;                                            // fifo_qa_p3_in_agent:m0_byteenable -> fifo_qa_p3_in_translator:uav_byteenable
	wire          fifo_qa_p3_in_agent_m0_read;                                                  // fifo_qa_p3_in_agent:m0_read -> fifo_qa_p3_in_translator:uav_read
	wire          fifo_qa_p3_in_agent_m0_readdatavalid;                                         // fifo_qa_p3_in_translator:uav_readdatavalid -> fifo_qa_p3_in_agent:m0_readdatavalid
	wire          fifo_qa_p3_in_agent_m0_lock;                                                  // fifo_qa_p3_in_agent:m0_lock -> fifo_qa_p3_in_translator:uav_lock
	wire   [31:0] fifo_qa_p3_in_agent_m0_writedata;                                             // fifo_qa_p3_in_agent:m0_writedata -> fifo_qa_p3_in_translator:uav_writedata
	wire          fifo_qa_p3_in_agent_m0_write;                                                 // fifo_qa_p3_in_agent:m0_write -> fifo_qa_p3_in_translator:uav_write
	wire    [2:0] fifo_qa_p3_in_agent_m0_burstcount;                                            // fifo_qa_p3_in_agent:m0_burstcount -> fifo_qa_p3_in_translator:uav_burstcount
	wire          fifo_qa_p3_in_agent_rf_source_valid;                                          // fifo_qa_p3_in_agent:rf_source_valid -> fifo_qa_p3_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p3_in_agent_rf_source_data;                                           // fifo_qa_p3_in_agent:rf_source_data -> fifo_qa_p3_in_agent_rsp_fifo:in_data
	wire          fifo_qa_p3_in_agent_rf_source_ready;                                          // fifo_qa_p3_in_agent_rsp_fifo:in_ready -> fifo_qa_p3_in_agent:rf_source_ready
	wire          fifo_qa_p3_in_agent_rf_source_startofpacket;                                  // fifo_qa_p3_in_agent:rf_source_startofpacket -> fifo_qa_p3_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p3_in_agent_rf_source_endofpacket;                                    // fifo_qa_p3_in_agent:rf_source_endofpacket -> fifo_qa_p3_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p3_in_agent_rsp_fifo_out_valid;                                       // fifo_qa_p3_in_agent_rsp_fifo:out_valid -> fifo_qa_p3_in_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p3_in_agent_rsp_fifo_out_data;                                        // fifo_qa_p3_in_agent_rsp_fifo:out_data -> fifo_qa_p3_in_agent:rf_sink_data
	wire          fifo_qa_p3_in_agent_rsp_fifo_out_ready;                                       // fifo_qa_p3_in_agent:rf_sink_ready -> fifo_qa_p3_in_agent_rsp_fifo:out_ready
	wire          fifo_qa_p3_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qa_p3_in_agent_rsp_fifo:out_startofpacket -> fifo_qa_p3_in_agent:rf_sink_startofpacket
	wire          fifo_qa_p3_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qa_p3_in_agent_rsp_fifo:out_endofpacket -> fifo_qa_p3_in_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                        // cmd_mux_005:src_valid -> fifo_qa_p3_in_agent:cp_valid
	wire  [109:0] cmd_mux_005_src_data;                                                         // cmd_mux_005:src_data -> fifo_qa_p3_in_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                        // fifo_qa_p3_in_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [49:0] cmd_mux_005_src_channel;                                                      // cmd_mux_005:src_channel -> fifo_qa_p3_in_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                // cmd_mux_005:src_startofpacket -> fifo_qa_p3_in_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                  // cmd_mux_005:src_endofpacket -> fifo_qa_p3_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p1_in_csr_agent_m0_readdata;                                          // fifo_qa_p1_in_csr_translator:uav_readdata -> fifo_qa_p1_in_csr_agent:m0_readdata
	wire          fifo_qa_p1_in_csr_agent_m0_waitrequest;                                       // fifo_qa_p1_in_csr_translator:uav_waitrequest -> fifo_qa_p1_in_csr_agent:m0_waitrequest
	wire          fifo_qa_p1_in_csr_agent_m0_debugaccess;                                       // fifo_qa_p1_in_csr_agent:m0_debugaccess -> fifo_qa_p1_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p1_in_csr_agent_m0_address;                                           // fifo_qa_p1_in_csr_agent:m0_address -> fifo_qa_p1_in_csr_translator:uav_address
	wire    [3:0] fifo_qa_p1_in_csr_agent_m0_byteenable;                                        // fifo_qa_p1_in_csr_agent:m0_byteenable -> fifo_qa_p1_in_csr_translator:uav_byteenable
	wire          fifo_qa_p1_in_csr_agent_m0_read;                                              // fifo_qa_p1_in_csr_agent:m0_read -> fifo_qa_p1_in_csr_translator:uav_read
	wire          fifo_qa_p1_in_csr_agent_m0_readdatavalid;                                     // fifo_qa_p1_in_csr_translator:uav_readdatavalid -> fifo_qa_p1_in_csr_agent:m0_readdatavalid
	wire          fifo_qa_p1_in_csr_agent_m0_lock;                                              // fifo_qa_p1_in_csr_agent:m0_lock -> fifo_qa_p1_in_csr_translator:uav_lock
	wire   [31:0] fifo_qa_p1_in_csr_agent_m0_writedata;                                         // fifo_qa_p1_in_csr_agent:m0_writedata -> fifo_qa_p1_in_csr_translator:uav_writedata
	wire          fifo_qa_p1_in_csr_agent_m0_write;                                             // fifo_qa_p1_in_csr_agent:m0_write -> fifo_qa_p1_in_csr_translator:uav_write
	wire    [2:0] fifo_qa_p1_in_csr_agent_m0_burstcount;                                        // fifo_qa_p1_in_csr_agent:m0_burstcount -> fifo_qa_p1_in_csr_translator:uav_burstcount
	wire          fifo_qa_p1_in_csr_agent_rf_source_valid;                                      // fifo_qa_p1_in_csr_agent:rf_source_valid -> fifo_qa_p1_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p1_in_csr_agent_rf_source_data;                                       // fifo_qa_p1_in_csr_agent:rf_source_data -> fifo_qa_p1_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qa_p1_in_csr_agent_rf_source_ready;                                      // fifo_qa_p1_in_csr_agent_rsp_fifo:in_ready -> fifo_qa_p1_in_csr_agent:rf_source_ready
	wire          fifo_qa_p1_in_csr_agent_rf_source_startofpacket;                              // fifo_qa_p1_in_csr_agent:rf_source_startofpacket -> fifo_qa_p1_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p1_in_csr_agent_rf_source_endofpacket;                                // fifo_qa_p1_in_csr_agent:rf_source_endofpacket -> fifo_qa_p1_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p1_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qa_p1_in_csr_agent_rsp_fifo:out_valid -> fifo_qa_p1_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p1_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qa_p1_in_csr_agent_rsp_fifo:out_data -> fifo_qa_p1_in_csr_agent:rf_sink_data
	wire          fifo_qa_p1_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qa_p1_in_csr_agent:rf_sink_ready -> fifo_qa_p1_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qa_p1_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qa_p1_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qa_p1_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qa_p1_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qa_p1_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qa_p1_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                        // cmd_mux_006:src_valid -> fifo_qa_p1_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_006_src_data;                                                         // cmd_mux_006:src_data -> fifo_qa_p1_in_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                        // fifo_qa_p1_in_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [49:0] cmd_mux_006_src_channel;                                                      // cmd_mux_006:src_channel -> fifo_qa_p1_in_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                // cmd_mux_006:src_startofpacket -> fifo_qa_p1_in_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                  // cmd_mux_006:src_endofpacket -> fifo_qa_p1_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p2_in_csr_agent_m0_readdata;                                          // fifo_qa_p2_in_csr_translator:uav_readdata -> fifo_qa_p2_in_csr_agent:m0_readdata
	wire          fifo_qa_p2_in_csr_agent_m0_waitrequest;                                       // fifo_qa_p2_in_csr_translator:uav_waitrequest -> fifo_qa_p2_in_csr_agent:m0_waitrequest
	wire          fifo_qa_p2_in_csr_agent_m0_debugaccess;                                       // fifo_qa_p2_in_csr_agent:m0_debugaccess -> fifo_qa_p2_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p2_in_csr_agent_m0_address;                                           // fifo_qa_p2_in_csr_agent:m0_address -> fifo_qa_p2_in_csr_translator:uav_address
	wire    [3:0] fifo_qa_p2_in_csr_agent_m0_byteenable;                                        // fifo_qa_p2_in_csr_agent:m0_byteenable -> fifo_qa_p2_in_csr_translator:uav_byteenable
	wire          fifo_qa_p2_in_csr_agent_m0_read;                                              // fifo_qa_p2_in_csr_agent:m0_read -> fifo_qa_p2_in_csr_translator:uav_read
	wire          fifo_qa_p2_in_csr_agent_m0_readdatavalid;                                     // fifo_qa_p2_in_csr_translator:uav_readdatavalid -> fifo_qa_p2_in_csr_agent:m0_readdatavalid
	wire          fifo_qa_p2_in_csr_agent_m0_lock;                                              // fifo_qa_p2_in_csr_agent:m0_lock -> fifo_qa_p2_in_csr_translator:uav_lock
	wire   [31:0] fifo_qa_p2_in_csr_agent_m0_writedata;                                         // fifo_qa_p2_in_csr_agent:m0_writedata -> fifo_qa_p2_in_csr_translator:uav_writedata
	wire          fifo_qa_p2_in_csr_agent_m0_write;                                             // fifo_qa_p2_in_csr_agent:m0_write -> fifo_qa_p2_in_csr_translator:uav_write
	wire    [2:0] fifo_qa_p2_in_csr_agent_m0_burstcount;                                        // fifo_qa_p2_in_csr_agent:m0_burstcount -> fifo_qa_p2_in_csr_translator:uav_burstcount
	wire          fifo_qa_p2_in_csr_agent_rf_source_valid;                                      // fifo_qa_p2_in_csr_agent:rf_source_valid -> fifo_qa_p2_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p2_in_csr_agent_rf_source_data;                                       // fifo_qa_p2_in_csr_agent:rf_source_data -> fifo_qa_p2_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qa_p2_in_csr_agent_rf_source_ready;                                      // fifo_qa_p2_in_csr_agent_rsp_fifo:in_ready -> fifo_qa_p2_in_csr_agent:rf_source_ready
	wire          fifo_qa_p2_in_csr_agent_rf_source_startofpacket;                              // fifo_qa_p2_in_csr_agent:rf_source_startofpacket -> fifo_qa_p2_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p2_in_csr_agent_rf_source_endofpacket;                                // fifo_qa_p2_in_csr_agent:rf_source_endofpacket -> fifo_qa_p2_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p2_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qa_p2_in_csr_agent_rsp_fifo:out_valid -> fifo_qa_p2_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p2_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qa_p2_in_csr_agent_rsp_fifo:out_data -> fifo_qa_p2_in_csr_agent:rf_sink_data
	wire          fifo_qa_p2_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qa_p2_in_csr_agent:rf_sink_ready -> fifo_qa_p2_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qa_p2_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qa_p2_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qa_p2_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qa_p2_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qa_p2_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qa_p2_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                        // cmd_mux_007:src_valid -> fifo_qa_p2_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                         // cmd_mux_007:src_data -> fifo_qa_p2_in_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                        // fifo_qa_p2_in_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [49:0] cmd_mux_007_src_channel;                                                      // cmd_mux_007:src_channel -> fifo_qa_p2_in_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                // cmd_mux_007:src_startofpacket -> fifo_qa_p2_in_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                  // cmd_mux_007:src_endofpacket -> fifo_qa_p2_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p3_in_csr_agent_m0_readdata;                                          // fifo_qa_p3_in_csr_translator:uav_readdata -> fifo_qa_p3_in_csr_agent:m0_readdata
	wire          fifo_qa_p3_in_csr_agent_m0_waitrequest;                                       // fifo_qa_p3_in_csr_translator:uav_waitrequest -> fifo_qa_p3_in_csr_agent:m0_waitrequest
	wire          fifo_qa_p3_in_csr_agent_m0_debugaccess;                                       // fifo_qa_p3_in_csr_agent:m0_debugaccess -> fifo_qa_p3_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p3_in_csr_agent_m0_address;                                           // fifo_qa_p3_in_csr_agent:m0_address -> fifo_qa_p3_in_csr_translator:uav_address
	wire    [3:0] fifo_qa_p3_in_csr_agent_m0_byteenable;                                        // fifo_qa_p3_in_csr_agent:m0_byteenable -> fifo_qa_p3_in_csr_translator:uav_byteenable
	wire          fifo_qa_p3_in_csr_agent_m0_read;                                              // fifo_qa_p3_in_csr_agent:m0_read -> fifo_qa_p3_in_csr_translator:uav_read
	wire          fifo_qa_p3_in_csr_agent_m0_readdatavalid;                                     // fifo_qa_p3_in_csr_translator:uav_readdatavalid -> fifo_qa_p3_in_csr_agent:m0_readdatavalid
	wire          fifo_qa_p3_in_csr_agent_m0_lock;                                              // fifo_qa_p3_in_csr_agent:m0_lock -> fifo_qa_p3_in_csr_translator:uav_lock
	wire   [31:0] fifo_qa_p3_in_csr_agent_m0_writedata;                                         // fifo_qa_p3_in_csr_agent:m0_writedata -> fifo_qa_p3_in_csr_translator:uav_writedata
	wire          fifo_qa_p3_in_csr_agent_m0_write;                                             // fifo_qa_p3_in_csr_agent:m0_write -> fifo_qa_p3_in_csr_translator:uav_write
	wire    [2:0] fifo_qa_p3_in_csr_agent_m0_burstcount;                                        // fifo_qa_p3_in_csr_agent:m0_burstcount -> fifo_qa_p3_in_csr_translator:uav_burstcount
	wire          fifo_qa_p3_in_csr_agent_rf_source_valid;                                      // fifo_qa_p3_in_csr_agent:rf_source_valid -> fifo_qa_p3_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p3_in_csr_agent_rf_source_data;                                       // fifo_qa_p3_in_csr_agent:rf_source_data -> fifo_qa_p3_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qa_p3_in_csr_agent_rf_source_ready;                                      // fifo_qa_p3_in_csr_agent_rsp_fifo:in_ready -> fifo_qa_p3_in_csr_agent:rf_source_ready
	wire          fifo_qa_p3_in_csr_agent_rf_source_startofpacket;                              // fifo_qa_p3_in_csr_agent:rf_source_startofpacket -> fifo_qa_p3_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p3_in_csr_agent_rf_source_endofpacket;                                // fifo_qa_p3_in_csr_agent:rf_source_endofpacket -> fifo_qa_p3_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p3_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qa_p3_in_csr_agent_rsp_fifo:out_valid -> fifo_qa_p3_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p3_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qa_p3_in_csr_agent_rsp_fifo:out_data -> fifo_qa_p3_in_csr_agent:rf_sink_data
	wire          fifo_qa_p3_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qa_p3_in_csr_agent:rf_sink_ready -> fifo_qa_p3_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qa_p3_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qa_p3_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qa_p3_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qa_p3_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qa_p3_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qa_p3_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                        // cmd_mux_008:src_valid -> fifo_qa_p3_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_008_src_data;                                                         // cmd_mux_008:src_data -> fifo_qa_p3_in_csr_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                        // fifo_qa_p3_in_csr_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [49:0] cmd_mux_008_src_channel;                                                      // cmd_mux_008:src_channel -> fifo_qa_p3_in_csr_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                // cmd_mux_008:src_startofpacket -> fifo_qa_p3_in_csr_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                  // cmd_mux_008:src_endofpacket -> fifo_qa_p3_in_csr_agent:cp_endofpacket
	wire   [31:0] pll_pll_slave_agent_m0_readdata;                                              // pll_pll_slave_translator:uav_readdata -> pll_pll_slave_agent:m0_readdata
	wire          pll_pll_slave_agent_m0_waitrequest;                                           // pll_pll_slave_translator:uav_waitrequest -> pll_pll_slave_agent:m0_waitrequest
	wire          pll_pll_slave_agent_m0_debugaccess;                                           // pll_pll_slave_agent:m0_debugaccess -> pll_pll_slave_translator:uav_debugaccess
	wire   [27:0] pll_pll_slave_agent_m0_address;                                               // pll_pll_slave_agent:m0_address -> pll_pll_slave_translator:uav_address
	wire    [3:0] pll_pll_slave_agent_m0_byteenable;                                            // pll_pll_slave_agent:m0_byteenable -> pll_pll_slave_translator:uav_byteenable
	wire          pll_pll_slave_agent_m0_read;                                                  // pll_pll_slave_agent:m0_read -> pll_pll_slave_translator:uav_read
	wire          pll_pll_slave_agent_m0_readdatavalid;                                         // pll_pll_slave_translator:uav_readdatavalid -> pll_pll_slave_agent:m0_readdatavalid
	wire          pll_pll_slave_agent_m0_lock;                                                  // pll_pll_slave_agent:m0_lock -> pll_pll_slave_translator:uav_lock
	wire   [31:0] pll_pll_slave_agent_m0_writedata;                                             // pll_pll_slave_agent:m0_writedata -> pll_pll_slave_translator:uav_writedata
	wire          pll_pll_slave_agent_m0_write;                                                 // pll_pll_slave_agent:m0_write -> pll_pll_slave_translator:uav_write
	wire    [2:0] pll_pll_slave_agent_m0_burstcount;                                            // pll_pll_slave_agent:m0_burstcount -> pll_pll_slave_translator:uav_burstcount
	wire          pll_pll_slave_agent_rf_source_valid;                                          // pll_pll_slave_agent:rf_source_valid -> pll_pll_slave_agent_rsp_fifo:in_valid
	wire  [110:0] pll_pll_slave_agent_rf_source_data;                                           // pll_pll_slave_agent:rf_source_data -> pll_pll_slave_agent_rsp_fifo:in_data
	wire          pll_pll_slave_agent_rf_source_ready;                                          // pll_pll_slave_agent_rsp_fifo:in_ready -> pll_pll_slave_agent:rf_source_ready
	wire          pll_pll_slave_agent_rf_source_startofpacket;                                  // pll_pll_slave_agent:rf_source_startofpacket -> pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          pll_pll_slave_agent_rf_source_endofpacket;                                    // pll_pll_slave_agent:rf_source_endofpacket -> pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          pll_pll_slave_agent_rsp_fifo_out_valid;                                       // pll_pll_slave_agent_rsp_fifo:out_valid -> pll_pll_slave_agent:rf_sink_valid
	wire  [110:0] pll_pll_slave_agent_rsp_fifo_out_data;                                        // pll_pll_slave_agent_rsp_fifo:out_data -> pll_pll_slave_agent:rf_sink_data
	wire          pll_pll_slave_agent_rsp_fifo_out_ready;                                       // pll_pll_slave_agent:rf_sink_ready -> pll_pll_slave_agent_rsp_fifo:out_ready
	wire          pll_pll_slave_agent_rsp_fifo_out_startofpacket;                               // pll_pll_slave_agent_rsp_fifo:out_startofpacket -> pll_pll_slave_agent:rf_sink_startofpacket
	wire          pll_pll_slave_agent_rsp_fifo_out_endofpacket;                                 // pll_pll_slave_agent_rsp_fifo:out_endofpacket -> pll_pll_slave_agent:rf_sink_endofpacket
	wire          pll_pll_slave_agent_rdata_fifo_src_valid;                                     // pll_pll_slave_agent:rdata_fifo_src_valid -> pll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pll_pll_slave_agent_rdata_fifo_src_data;                                      // pll_pll_slave_agent:rdata_fifo_src_data -> pll_pll_slave_agent_rdata_fifo:in_data
	wire          pll_pll_slave_agent_rdata_fifo_src_ready;                                     // pll_pll_slave_agent_rdata_fifo:in_ready -> pll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                        // cmd_mux_009:src_valid -> pll_pll_slave_agent:cp_valid
	wire  [109:0] cmd_mux_009_src_data;                                                         // cmd_mux_009:src_data -> pll_pll_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                        // pll_pll_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [49:0] cmd_mux_009_src_channel;                                                      // cmd_mux_009:src_channel -> pll_pll_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                // cmd_mux_009:src_startofpacket -> pll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                  // cmd_mux_009:src_endofpacket -> pll_pll_slave_agent:cp_endofpacket
	wire   [31:0] sdram_controller_s1_agent_m0_readdata;                                        // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_waitrequest;                                     // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire          sdram_controller_s1_agent_m0_debugaccess;                                     // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire   [27:0] sdram_controller_s1_agent_m0_address;                                         // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire    [3:0] sdram_controller_s1_agent_m0_byteenable;                                      // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_m0_read;                                            // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire          sdram_controller_s1_agent_m0_readdatavalid;                                   // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_lock;                                            // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire   [31:0] sdram_controller_s1_agent_m0_writedata;                                       // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire          sdram_controller_s1_agent_m0_write;                                           // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire    [2:0] sdram_controller_s1_agent_m0_burstcount;                                      // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire          sdram_controller_s1_agent_rf_source_valid;                                    // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire  [110:0] sdram_controller_s1_agent_rf_source_data;                                     // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                                    // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                            // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                              // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                                 // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire  [110:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                  // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                                 // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                         // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                           // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                        // cmd_mux_010:src_valid -> sdram_controller_s1_agent:cp_valid
	wire  [109:0] cmd_mux_010_src_data;                                                         // cmd_mux_010:src_data -> sdram_controller_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                        // sdram_controller_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [49:0] cmd_mux_010_src_channel;                                                      // cmd_mux_010:src_channel -> sdram_controller_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                // cmd_mux_010:src_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                  // cmd_mux_010:src_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire   [31:0] timer_1a_s1_agent_m0_readdata;                                                // timer_1a_s1_translator:uav_readdata -> timer_1a_s1_agent:m0_readdata
	wire          timer_1a_s1_agent_m0_waitrequest;                                             // timer_1a_s1_translator:uav_waitrequest -> timer_1a_s1_agent:m0_waitrequest
	wire          timer_1a_s1_agent_m0_debugaccess;                                             // timer_1a_s1_agent:m0_debugaccess -> timer_1a_s1_translator:uav_debugaccess
	wire   [27:0] timer_1a_s1_agent_m0_address;                                                 // timer_1a_s1_agent:m0_address -> timer_1a_s1_translator:uav_address
	wire    [3:0] timer_1a_s1_agent_m0_byteenable;                                              // timer_1a_s1_agent:m0_byteenable -> timer_1a_s1_translator:uav_byteenable
	wire          timer_1a_s1_agent_m0_read;                                                    // timer_1a_s1_agent:m0_read -> timer_1a_s1_translator:uav_read
	wire          timer_1a_s1_agent_m0_readdatavalid;                                           // timer_1a_s1_translator:uav_readdatavalid -> timer_1a_s1_agent:m0_readdatavalid
	wire          timer_1a_s1_agent_m0_lock;                                                    // timer_1a_s1_agent:m0_lock -> timer_1a_s1_translator:uav_lock
	wire   [31:0] timer_1a_s1_agent_m0_writedata;                                               // timer_1a_s1_agent:m0_writedata -> timer_1a_s1_translator:uav_writedata
	wire          timer_1a_s1_agent_m0_write;                                                   // timer_1a_s1_agent:m0_write -> timer_1a_s1_translator:uav_write
	wire    [2:0] timer_1a_s1_agent_m0_burstcount;                                              // timer_1a_s1_agent:m0_burstcount -> timer_1a_s1_translator:uav_burstcount
	wire          timer_1a_s1_agent_rf_source_valid;                                            // timer_1a_s1_agent:rf_source_valid -> timer_1a_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_1a_s1_agent_rf_source_data;                                             // timer_1a_s1_agent:rf_source_data -> timer_1a_s1_agent_rsp_fifo:in_data
	wire          timer_1a_s1_agent_rf_source_ready;                                            // timer_1a_s1_agent_rsp_fifo:in_ready -> timer_1a_s1_agent:rf_source_ready
	wire          timer_1a_s1_agent_rf_source_startofpacket;                                    // timer_1a_s1_agent:rf_source_startofpacket -> timer_1a_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1a_s1_agent_rf_source_endofpacket;                                      // timer_1a_s1_agent:rf_source_endofpacket -> timer_1a_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1a_s1_agent_rsp_fifo_out_valid;                                         // timer_1a_s1_agent_rsp_fifo:out_valid -> timer_1a_s1_agent:rf_sink_valid
	wire  [110:0] timer_1a_s1_agent_rsp_fifo_out_data;                                          // timer_1a_s1_agent_rsp_fifo:out_data -> timer_1a_s1_agent:rf_sink_data
	wire          timer_1a_s1_agent_rsp_fifo_out_ready;                                         // timer_1a_s1_agent:rf_sink_ready -> timer_1a_s1_agent_rsp_fifo:out_ready
	wire          timer_1a_s1_agent_rsp_fifo_out_startofpacket;                                 // timer_1a_s1_agent_rsp_fifo:out_startofpacket -> timer_1a_s1_agent:rf_sink_startofpacket
	wire          timer_1a_s1_agent_rsp_fifo_out_endofpacket;                                   // timer_1a_s1_agent_rsp_fifo:out_endofpacket -> timer_1a_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                        // cmd_mux_011:src_valid -> timer_1a_s1_agent:cp_valid
	wire  [109:0] cmd_mux_011_src_data;                                                         // cmd_mux_011:src_data -> timer_1a_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                        // timer_1a_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [49:0] cmd_mux_011_src_channel;                                                      // cmd_mux_011:src_channel -> timer_1a_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                // cmd_mux_011:src_startofpacket -> timer_1a_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                  // cmd_mux_011:src_endofpacket -> timer_1a_s1_agent:cp_endofpacket
	wire   [31:0] mem_info_s1_agent_m0_readdata;                                                // mem_info_s1_translator:uav_readdata -> mem_info_s1_agent:m0_readdata
	wire          mem_info_s1_agent_m0_waitrequest;                                             // mem_info_s1_translator:uav_waitrequest -> mem_info_s1_agent:m0_waitrequest
	wire          mem_info_s1_agent_m0_debugaccess;                                             // mem_info_s1_agent:m0_debugaccess -> mem_info_s1_translator:uav_debugaccess
	wire   [27:0] mem_info_s1_agent_m0_address;                                                 // mem_info_s1_agent:m0_address -> mem_info_s1_translator:uav_address
	wire    [3:0] mem_info_s1_agent_m0_byteenable;                                              // mem_info_s1_agent:m0_byteenable -> mem_info_s1_translator:uav_byteenable
	wire          mem_info_s1_agent_m0_read;                                                    // mem_info_s1_agent:m0_read -> mem_info_s1_translator:uav_read
	wire          mem_info_s1_agent_m0_readdatavalid;                                           // mem_info_s1_translator:uav_readdatavalid -> mem_info_s1_agent:m0_readdatavalid
	wire          mem_info_s1_agent_m0_lock;                                                    // mem_info_s1_agent:m0_lock -> mem_info_s1_translator:uav_lock
	wire   [31:0] mem_info_s1_agent_m0_writedata;                                               // mem_info_s1_agent:m0_writedata -> mem_info_s1_translator:uav_writedata
	wire          mem_info_s1_agent_m0_write;                                                   // mem_info_s1_agent:m0_write -> mem_info_s1_translator:uav_write
	wire    [2:0] mem_info_s1_agent_m0_burstcount;                                              // mem_info_s1_agent:m0_burstcount -> mem_info_s1_translator:uav_burstcount
	wire          mem_info_s1_agent_rf_source_valid;                                            // mem_info_s1_agent:rf_source_valid -> mem_info_s1_agent_rsp_fifo:in_valid
	wire  [110:0] mem_info_s1_agent_rf_source_data;                                             // mem_info_s1_agent:rf_source_data -> mem_info_s1_agent_rsp_fifo:in_data
	wire          mem_info_s1_agent_rf_source_ready;                                            // mem_info_s1_agent_rsp_fifo:in_ready -> mem_info_s1_agent:rf_source_ready
	wire          mem_info_s1_agent_rf_source_startofpacket;                                    // mem_info_s1_agent:rf_source_startofpacket -> mem_info_s1_agent_rsp_fifo:in_startofpacket
	wire          mem_info_s1_agent_rf_source_endofpacket;                                      // mem_info_s1_agent:rf_source_endofpacket -> mem_info_s1_agent_rsp_fifo:in_endofpacket
	wire          mem_info_s1_agent_rsp_fifo_out_valid;                                         // mem_info_s1_agent_rsp_fifo:out_valid -> mem_info_s1_agent:rf_sink_valid
	wire  [110:0] mem_info_s1_agent_rsp_fifo_out_data;                                          // mem_info_s1_agent_rsp_fifo:out_data -> mem_info_s1_agent:rf_sink_data
	wire          mem_info_s1_agent_rsp_fifo_out_ready;                                         // mem_info_s1_agent:rf_sink_ready -> mem_info_s1_agent_rsp_fifo:out_ready
	wire          mem_info_s1_agent_rsp_fifo_out_startofpacket;                                 // mem_info_s1_agent_rsp_fifo:out_startofpacket -> mem_info_s1_agent:rf_sink_startofpacket
	wire          mem_info_s1_agent_rsp_fifo_out_endofpacket;                                   // mem_info_s1_agent_rsp_fifo:out_endofpacket -> mem_info_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                        // cmd_mux_012:src_valid -> mem_info_s1_agent:cp_valid
	wire  [109:0] cmd_mux_012_src_data;                                                         // cmd_mux_012:src_data -> mem_info_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                        // mem_info_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [49:0] cmd_mux_012_src_channel;                                                      // cmd_mux_012:src_channel -> mem_info_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                // cmd_mux_012:src_startofpacket -> mem_info_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                  // cmd_mux_012:src_endofpacket -> mem_info_s1_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p3_in_agent_m0_readdata;                                              // fifo_qd_p3_in_translator:uav_readdata -> fifo_qd_p3_in_agent:m0_readdata
	wire          fifo_qd_p3_in_agent_m0_waitrequest;                                           // fifo_qd_p3_in_translator:uav_waitrequest -> fifo_qd_p3_in_agent:m0_waitrequest
	wire          fifo_qd_p3_in_agent_m0_debugaccess;                                           // fifo_qd_p3_in_agent:m0_debugaccess -> fifo_qd_p3_in_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p3_in_agent_m0_address;                                               // fifo_qd_p3_in_agent:m0_address -> fifo_qd_p3_in_translator:uav_address
	wire    [3:0] fifo_qd_p3_in_agent_m0_byteenable;                                            // fifo_qd_p3_in_agent:m0_byteenable -> fifo_qd_p3_in_translator:uav_byteenable
	wire          fifo_qd_p3_in_agent_m0_read;                                                  // fifo_qd_p3_in_agent:m0_read -> fifo_qd_p3_in_translator:uav_read
	wire          fifo_qd_p3_in_agent_m0_readdatavalid;                                         // fifo_qd_p3_in_translator:uav_readdatavalid -> fifo_qd_p3_in_agent:m0_readdatavalid
	wire          fifo_qd_p3_in_agent_m0_lock;                                                  // fifo_qd_p3_in_agent:m0_lock -> fifo_qd_p3_in_translator:uav_lock
	wire   [31:0] fifo_qd_p3_in_agent_m0_writedata;                                             // fifo_qd_p3_in_agent:m0_writedata -> fifo_qd_p3_in_translator:uav_writedata
	wire          fifo_qd_p3_in_agent_m0_write;                                                 // fifo_qd_p3_in_agent:m0_write -> fifo_qd_p3_in_translator:uav_write
	wire    [2:0] fifo_qd_p3_in_agent_m0_burstcount;                                            // fifo_qd_p3_in_agent:m0_burstcount -> fifo_qd_p3_in_translator:uav_burstcount
	wire          fifo_qd_p3_in_agent_rf_source_valid;                                          // fifo_qd_p3_in_agent:rf_source_valid -> fifo_qd_p3_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p3_in_agent_rf_source_data;                                           // fifo_qd_p3_in_agent:rf_source_data -> fifo_qd_p3_in_agent_rsp_fifo:in_data
	wire          fifo_qd_p3_in_agent_rf_source_ready;                                          // fifo_qd_p3_in_agent_rsp_fifo:in_ready -> fifo_qd_p3_in_agent:rf_source_ready
	wire          fifo_qd_p3_in_agent_rf_source_startofpacket;                                  // fifo_qd_p3_in_agent:rf_source_startofpacket -> fifo_qd_p3_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p3_in_agent_rf_source_endofpacket;                                    // fifo_qd_p3_in_agent:rf_source_endofpacket -> fifo_qd_p3_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p3_in_agent_rsp_fifo_out_valid;                                       // fifo_qd_p3_in_agent_rsp_fifo:out_valid -> fifo_qd_p3_in_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p3_in_agent_rsp_fifo_out_data;                                        // fifo_qd_p3_in_agent_rsp_fifo:out_data -> fifo_qd_p3_in_agent:rf_sink_data
	wire          fifo_qd_p3_in_agent_rsp_fifo_out_ready;                                       // fifo_qd_p3_in_agent:rf_sink_ready -> fifo_qd_p3_in_agent_rsp_fifo:out_ready
	wire          fifo_qd_p3_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qd_p3_in_agent_rsp_fifo:out_startofpacket -> fifo_qd_p3_in_agent:rf_sink_startofpacket
	wire          fifo_qd_p3_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qd_p3_in_agent_rsp_fifo:out_endofpacket -> fifo_qd_p3_in_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                        // cmd_mux_013:src_valid -> fifo_qd_p3_in_agent:cp_valid
	wire  [109:0] cmd_mux_013_src_data;                                                         // cmd_mux_013:src_data -> fifo_qd_p3_in_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                        // fifo_qd_p3_in_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [49:0] cmd_mux_013_src_channel;                                                      // cmd_mux_013:src_channel -> fifo_qd_p3_in_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                // cmd_mux_013:src_startofpacket -> fifo_qd_p3_in_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                  // cmd_mux_013:src_endofpacket -> fifo_qd_p3_in_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p3_in_csr_agent_m0_readdata;                                          // fifo_qc_p3_in_csr_translator:uav_readdata -> fifo_qc_p3_in_csr_agent:m0_readdata
	wire          fifo_qc_p3_in_csr_agent_m0_waitrequest;                                       // fifo_qc_p3_in_csr_translator:uav_waitrequest -> fifo_qc_p3_in_csr_agent:m0_waitrequest
	wire          fifo_qc_p3_in_csr_agent_m0_debugaccess;                                       // fifo_qc_p3_in_csr_agent:m0_debugaccess -> fifo_qc_p3_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p3_in_csr_agent_m0_address;                                           // fifo_qc_p3_in_csr_agent:m0_address -> fifo_qc_p3_in_csr_translator:uav_address
	wire    [3:0] fifo_qc_p3_in_csr_agent_m0_byteenable;                                        // fifo_qc_p3_in_csr_agent:m0_byteenable -> fifo_qc_p3_in_csr_translator:uav_byteenable
	wire          fifo_qc_p3_in_csr_agent_m0_read;                                              // fifo_qc_p3_in_csr_agent:m0_read -> fifo_qc_p3_in_csr_translator:uav_read
	wire          fifo_qc_p3_in_csr_agent_m0_readdatavalid;                                     // fifo_qc_p3_in_csr_translator:uav_readdatavalid -> fifo_qc_p3_in_csr_agent:m0_readdatavalid
	wire          fifo_qc_p3_in_csr_agent_m0_lock;                                              // fifo_qc_p3_in_csr_agent:m0_lock -> fifo_qc_p3_in_csr_translator:uav_lock
	wire   [31:0] fifo_qc_p3_in_csr_agent_m0_writedata;                                         // fifo_qc_p3_in_csr_agent:m0_writedata -> fifo_qc_p3_in_csr_translator:uav_writedata
	wire          fifo_qc_p3_in_csr_agent_m0_write;                                             // fifo_qc_p3_in_csr_agent:m0_write -> fifo_qc_p3_in_csr_translator:uav_write
	wire    [2:0] fifo_qc_p3_in_csr_agent_m0_burstcount;                                        // fifo_qc_p3_in_csr_agent:m0_burstcount -> fifo_qc_p3_in_csr_translator:uav_burstcount
	wire          fifo_qc_p3_in_csr_agent_rf_source_valid;                                      // fifo_qc_p3_in_csr_agent:rf_source_valid -> fifo_qc_p3_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p3_in_csr_agent_rf_source_data;                                       // fifo_qc_p3_in_csr_agent:rf_source_data -> fifo_qc_p3_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qc_p3_in_csr_agent_rf_source_ready;                                      // fifo_qc_p3_in_csr_agent_rsp_fifo:in_ready -> fifo_qc_p3_in_csr_agent:rf_source_ready
	wire          fifo_qc_p3_in_csr_agent_rf_source_startofpacket;                              // fifo_qc_p3_in_csr_agent:rf_source_startofpacket -> fifo_qc_p3_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p3_in_csr_agent_rf_source_endofpacket;                                // fifo_qc_p3_in_csr_agent:rf_source_endofpacket -> fifo_qc_p3_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p3_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qc_p3_in_csr_agent_rsp_fifo:out_valid -> fifo_qc_p3_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p3_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qc_p3_in_csr_agent_rsp_fifo:out_data -> fifo_qc_p3_in_csr_agent:rf_sink_data
	wire          fifo_qc_p3_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qc_p3_in_csr_agent:rf_sink_ready -> fifo_qc_p3_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qc_p3_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qc_p3_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qc_p3_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qc_p3_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qc_p3_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qc_p3_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                        // cmd_mux_014:src_valid -> fifo_qc_p3_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_014_src_data;                                                         // cmd_mux_014:src_data -> fifo_qc_p3_in_csr_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                        // fifo_qc_p3_in_csr_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [49:0] cmd_mux_014_src_channel;                                                      // cmd_mux_014:src_channel -> fifo_qc_p3_in_csr_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                // cmd_mux_014:src_startofpacket -> fifo_qc_p3_in_csr_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                  // cmd_mux_014:src_endofpacket -> fifo_qc_p3_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p3_in_csr_agent_m0_readdata;                                          // fifo_qd_p3_in_csr_translator:uav_readdata -> fifo_qd_p3_in_csr_agent:m0_readdata
	wire          fifo_qd_p3_in_csr_agent_m0_waitrequest;                                       // fifo_qd_p3_in_csr_translator:uav_waitrequest -> fifo_qd_p3_in_csr_agent:m0_waitrequest
	wire          fifo_qd_p3_in_csr_agent_m0_debugaccess;                                       // fifo_qd_p3_in_csr_agent:m0_debugaccess -> fifo_qd_p3_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p3_in_csr_agent_m0_address;                                           // fifo_qd_p3_in_csr_agent:m0_address -> fifo_qd_p3_in_csr_translator:uav_address
	wire    [3:0] fifo_qd_p3_in_csr_agent_m0_byteenable;                                        // fifo_qd_p3_in_csr_agent:m0_byteenable -> fifo_qd_p3_in_csr_translator:uav_byteenable
	wire          fifo_qd_p3_in_csr_agent_m0_read;                                              // fifo_qd_p3_in_csr_agent:m0_read -> fifo_qd_p3_in_csr_translator:uav_read
	wire          fifo_qd_p3_in_csr_agent_m0_readdatavalid;                                     // fifo_qd_p3_in_csr_translator:uav_readdatavalid -> fifo_qd_p3_in_csr_agent:m0_readdatavalid
	wire          fifo_qd_p3_in_csr_agent_m0_lock;                                              // fifo_qd_p3_in_csr_agent:m0_lock -> fifo_qd_p3_in_csr_translator:uav_lock
	wire   [31:0] fifo_qd_p3_in_csr_agent_m0_writedata;                                         // fifo_qd_p3_in_csr_agent:m0_writedata -> fifo_qd_p3_in_csr_translator:uav_writedata
	wire          fifo_qd_p3_in_csr_agent_m0_write;                                             // fifo_qd_p3_in_csr_agent:m0_write -> fifo_qd_p3_in_csr_translator:uav_write
	wire    [2:0] fifo_qd_p3_in_csr_agent_m0_burstcount;                                        // fifo_qd_p3_in_csr_agent:m0_burstcount -> fifo_qd_p3_in_csr_translator:uav_burstcount
	wire          fifo_qd_p3_in_csr_agent_rf_source_valid;                                      // fifo_qd_p3_in_csr_agent:rf_source_valid -> fifo_qd_p3_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p3_in_csr_agent_rf_source_data;                                       // fifo_qd_p3_in_csr_agent:rf_source_data -> fifo_qd_p3_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qd_p3_in_csr_agent_rf_source_ready;                                      // fifo_qd_p3_in_csr_agent_rsp_fifo:in_ready -> fifo_qd_p3_in_csr_agent:rf_source_ready
	wire          fifo_qd_p3_in_csr_agent_rf_source_startofpacket;                              // fifo_qd_p3_in_csr_agent:rf_source_startofpacket -> fifo_qd_p3_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p3_in_csr_agent_rf_source_endofpacket;                                // fifo_qd_p3_in_csr_agent:rf_source_endofpacket -> fifo_qd_p3_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p3_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qd_p3_in_csr_agent_rsp_fifo:out_valid -> fifo_qd_p3_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p3_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qd_p3_in_csr_agent_rsp_fifo:out_data -> fifo_qd_p3_in_csr_agent:rf_sink_data
	wire          fifo_qd_p3_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qd_p3_in_csr_agent:rf_sink_ready -> fifo_qd_p3_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qd_p3_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qd_p3_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qd_p3_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qd_p3_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qd_p3_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qd_p3_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                        // cmd_mux_015:src_valid -> fifo_qd_p3_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_015_src_data;                                                         // cmd_mux_015:src_data -> fifo_qd_p3_in_csr_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                        // fifo_qd_p3_in_csr_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [49:0] cmd_mux_015_src_channel;                                                      // cmd_mux_015:src_channel -> fifo_qd_p3_in_csr_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                // cmd_mux_015:src_startofpacket -> fifo_qd_p3_in_csr_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                  // cmd_mux_015:src_endofpacket -> fifo_qd_p3_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p3_out_agent_m0_readdata;                                             // fifo_qc_p3_out_translator:uav_readdata -> fifo_qc_p3_out_agent:m0_readdata
	wire          fifo_qc_p3_out_agent_m0_waitrequest;                                          // fifo_qc_p3_out_translator:uav_waitrequest -> fifo_qc_p3_out_agent:m0_waitrequest
	wire          fifo_qc_p3_out_agent_m0_debugaccess;                                          // fifo_qc_p3_out_agent:m0_debugaccess -> fifo_qc_p3_out_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p3_out_agent_m0_address;                                              // fifo_qc_p3_out_agent:m0_address -> fifo_qc_p3_out_translator:uav_address
	wire    [3:0] fifo_qc_p3_out_agent_m0_byteenable;                                           // fifo_qc_p3_out_agent:m0_byteenable -> fifo_qc_p3_out_translator:uav_byteenable
	wire          fifo_qc_p3_out_agent_m0_read;                                                 // fifo_qc_p3_out_agent:m0_read -> fifo_qc_p3_out_translator:uav_read
	wire          fifo_qc_p3_out_agent_m0_readdatavalid;                                        // fifo_qc_p3_out_translator:uav_readdatavalid -> fifo_qc_p3_out_agent:m0_readdatavalid
	wire          fifo_qc_p3_out_agent_m0_lock;                                                 // fifo_qc_p3_out_agent:m0_lock -> fifo_qc_p3_out_translator:uav_lock
	wire   [31:0] fifo_qc_p3_out_agent_m0_writedata;                                            // fifo_qc_p3_out_agent:m0_writedata -> fifo_qc_p3_out_translator:uav_writedata
	wire          fifo_qc_p3_out_agent_m0_write;                                                // fifo_qc_p3_out_agent:m0_write -> fifo_qc_p3_out_translator:uav_write
	wire    [2:0] fifo_qc_p3_out_agent_m0_burstcount;                                           // fifo_qc_p3_out_agent:m0_burstcount -> fifo_qc_p3_out_translator:uav_burstcount
	wire          fifo_qc_p3_out_agent_rf_source_valid;                                         // fifo_qc_p3_out_agent:rf_source_valid -> fifo_qc_p3_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p3_out_agent_rf_source_data;                                          // fifo_qc_p3_out_agent:rf_source_data -> fifo_qc_p3_out_agent_rsp_fifo:in_data
	wire          fifo_qc_p3_out_agent_rf_source_ready;                                         // fifo_qc_p3_out_agent_rsp_fifo:in_ready -> fifo_qc_p3_out_agent:rf_source_ready
	wire          fifo_qc_p3_out_agent_rf_source_startofpacket;                                 // fifo_qc_p3_out_agent:rf_source_startofpacket -> fifo_qc_p3_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p3_out_agent_rf_source_endofpacket;                                   // fifo_qc_p3_out_agent:rf_source_endofpacket -> fifo_qc_p3_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p3_out_agent_rsp_fifo_out_valid;                                      // fifo_qc_p3_out_agent_rsp_fifo:out_valid -> fifo_qc_p3_out_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p3_out_agent_rsp_fifo_out_data;                                       // fifo_qc_p3_out_agent_rsp_fifo:out_data -> fifo_qc_p3_out_agent:rf_sink_data
	wire          fifo_qc_p3_out_agent_rsp_fifo_out_ready;                                      // fifo_qc_p3_out_agent:rf_sink_ready -> fifo_qc_p3_out_agent_rsp_fifo:out_ready
	wire          fifo_qc_p3_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qc_p3_out_agent_rsp_fifo:out_startofpacket -> fifo_qc_p3_out_agent:rf_sink_startofpacket
	wire          fifo_qc_p3_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qc_p3_out_agent_rsp_fifo:out_endofpacket -> fifo_qc_p3_out_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                        // cmd_mux_016:src_valid -> fifo_qc_p3_out_agent:cp_valid
	wire  [109:0] cmd_mux_016_src_data;                                                         // cmd_mux_016:src_data -> fifo_qc_p3_out_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                        // fifo_qc_p3_out_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [49:0] cmd_mux_016_src_channel;                                                      // cmd_mux_016:src_channel -> fifo_qc_p3_out_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                // cmd_mux_016:src_startofpacket -> fifo_qc_p3_out_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                  // cmd_mux_016:src_endofpacket -> fifo_qc_p3_out_agent:cp_endofpacket
	wire   [31:0] fifo_qe_in_agent_m0_readdata;                                                 // fifo_qe_in_translator:uav_readdata -> fifo_qe_in_agent:m0_readdata
	wire          fifo_qe_in_agent_m0_waitrequest;                                              // fifo_qe_in_translator:uav_waitrequest -> fifo_qe_in_agent:m0_waitrequest
	wire          fifo_qe_in_agent_m0_debugaccess;                                              // fifo_qe_in_agent:m0_debugaccess -> fifo_qe_in_translator:uav_debugaccess
	wire   [27:0] fifo_qe_in_agent_m0_address;                                                  // fifo_qe_in_agent:m0_address -> fifo_qe_in_translator:uav_address
	wire    [3:0] fifo_qe_in_agent_m0_byteenable;                                               // fifo_qe_in_agent:m0_byteenable -> fifo_qe_in_translator:uav_byteenable
	wire          fifo_qe_in_agent_m0_read;                                                     // fifo_qe_in_agent:m0_read -> fifo_qe_in_translator:uav_read
	wire          fifo_qe_in_agent_m0_readdatavalid;                                            // fifo_qe_in_translator:uav_readdatavalid -> fifo_qe_in_agent:m0_readdatavalid
	wire          fifo_qe_in_agent_m0_lock;                                                     // fifo_qe_in_agent:m0_lock -> fifo_qe_in_translator:uav_lock
	wire   [31:0] fifo_qe_in_agent_m0_writedata;                                                // fifo_qe_in_agent:m0_writedata -> fifo_qe_in_translator:uav_writedata
	wire          fifo_qe_in_agent_m0_write;                                                    // fifo_qe_in_agent:m0_write -> fifo_qe_in_translator:uav_write
	wire    [2:0] fifo_qe_in_agent_m0_burstcount;                                               // fifo_qe_in_agent:m0_burstcount -> fifo_qe_in_translator:uav_burstcount
	wire          fifo_qe_in_agent_rf_source_valid;                                             // fifo_qe_in_agent:rf_source_valid -> fifo_qe_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qe_in_agent_rf_source_data;                                              // fifo_qe_in_agent:rf_source_data -> fifo_qe_in_agent_rsp_fifo:in_data
	wire          fifo_qe_in_agent_rf_source_ready;                                             // fifo_qe_in_agent_rsp_fifo:in_ready -> fifo_qe_in_agent:rf_source_ready
	wire          fifo_qe_in_agent_rf_source_startofpacket;                                     // fifo_qe_in_agent:rf_source_startofpacket -> fifo_qe_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qe_in_agent_rf_source_endofpacket;                                       // fifo_qe_in_agent:rf_source_endofpacket -> fifo_qe_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qe_in_agent_rsp_fifo_out_valid;                                          // fifo_qe_in_agent_rsp_fifo:out_valid -> fifo_qe_in_agent:rf_sink_valid
	wire  [110:0] fifo_qe_in_agent_rsp_fifo_out_data;                                           // fifo_qe_in_agent_rsp_fifo:out_data -> fifo_qe_in_agent:rf_sink_data
	wire          fifo_qe_in_agent_rsp_fifo_out_ready;                                          // fifo_qe_in_agent:rf_sink_ready -> fifo_qe_in_agent_rsp_fifo:out_ready
	wire          fifo_qe_in_agent_rsp_fifo_out_startofpacket;                                  // fifo_qe_in_agent_rsp_fifo:out_startofpacket -> fifo_qe_in_agent:rf_sink_startofpacket
	wire          fifo_qe_in_agent_rsp_fifo_out_endofpacket;                                    // fifo_qe_in_agent_rsp_fifo:out_endofpacket -> fifo_qe_in_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                        // cmd_mux_017:src_valid -> fifo_qe_in_agent:cp_valid
	wire  [109:0] cmd_mux_017_src_data;                                                         // cmd_mux_017:src_data -> fifo_qe_in_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                        // fifo_qe_in_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [49:0] cmd_mux_017_src_channel;                                                      // cmd_mux_017:src_channel -> fifo_qe_in_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                // cmd_mux_017:src_startofpacket -> fifo_qe_in_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                  // cmd_mux_017:src_endofpacket -> fifo_qe_in_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p1_in_csr_agent_m0_readdata;                                          // fifo_qd_p1_in_csr_translator:uav_readdata -> fifo_qd_p1_in_csr_agent:m0_readdata
	wire          fifo_qd_p1_in_csr_agent_m0_waitrequest;                                       // fifo_qd_p1_in_csr_translator:uav_waitrequest -> fifo_qd_p1_in_csr_agent:m0_waitrequest
	wire          fifo_qd_p1_in_csr_agent_m0_debugaccess;                                       // fifo_qd_p1_in_csr_agent:m0_debugaccess -> fifo_qd_p1_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p1_in_csr_agent_m0_address;                                           // fifo_qd_p1_in_csr_agent:m0_address -> fifo_qd_p1_in_csr_translator:uav_address
	wire    [3:0] fifo_qd_p1_in_csr_agent_m0_byteenable;                                        // fifo_qd_p1_in_csr_agent:m0_byteenable -> fifo_qd_p1_in_csr_translator:uav_byteenable
	wire          fifo_qd_p1_in_csr_agent_m0_read;                                              // fifo_qd_p1_in_csr_agent:m0_read -> fifo_qd_p1_in_csr_translator:uav_read
	wire          fifo_qd_p1_in_csr_agent_m0_readdatavalid;                                     // fifo_qd_p1_in_csr_translator:uav_readdatavalid -> fifo_qd_p1_in_csr_agent:m0_readdatavalid
	wire          fifo_qd_p1_in_csr_agent_m0_lock;                                              // fifo_qd_p1_in_csr_agent:m0_lock -> fifo_qd_p1_in_csr_translator:uav_lock
	wire   [31:0] fifo_qd_p1_in_csr_agent_m0_writedata;                                         // fifo_qd_p1_in_csr_agent:m0_writedata -> fifo_qd_p1_in_csr_translator:uav_writedata
	wire          fifo_qd_p1_in_csr_agent_m0_write;                                             // fifo_qd_p1_in_csr_agent:m0_write -> fifo_qd_p1_in_csr_translator:uav_write
	wire    [2:0] fifo_qd_p1_in_csr_agent_m0_burstcount;                                        // fifo_qd_p1_in_csr_agent:m0_burstcount -> fifo_qd_p1_in_csr_translator:uav_burstcount
	wire          fifo_qd_p1_in_csr_agent_rf_source_valid;                                      // fifo_qd_p1_in_csr_agent:rf_source_valid -> fifo_qd_p1_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p1_in_csr_agent_rf_source_data;                                       // fifo_qd_p1_in_csr_agent:rf_source_data -> fifo_qd_p1_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qd_p1_in_csr_agent_rf_source_ready;                                      // fifo_qd_p1_in_csr_agent_rsp_fifo:in_ready -> fifo_qd_p1_in_csr_agent:rf_source_ready
	wire          fifo_qd_p1_in_csr_agent_rf_source_startofpacket;                              // fifo_qd_p1_in_csr_agent:rf_source_startofpacket -> fifo_qd_p1_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p1_in_csr_agent_rf_source_endofpacket;                                // fifo_qd_p1_in_csr_agent:rf_source_endofpacket -> fifo_qd_p1_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p1_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qd_p1_in_csr_agent_rsp_fifo:out_valid -> fifo_qd_p1_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p1_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qd_p1_in_csr_agent_rsp_fifo:out_data -> fifo_qd_p1_in_csr_agent:rf_sink_data
	wire          fifo_qd_p1_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qd_p1_in_csr_agent:rf_sink_ready -> fifo_qd_p1_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qd_p1_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qd_p1_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qd_p1_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qd_p1_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qd_p1_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qd_p1_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                        // cmd_mux_018:src_valid -> fifo_qd_p1_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_018_src_data;                                                         // cmd_mux_018:src_data -> fifo_qd_p1_in_csr_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                        // fifo_qd_p1_in_csr_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [49:0] cmd_mux_018_src_channel;                                                      // cmd_mux_018:src_channel -> fifo_qd_p1_in_csr_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                // cmd_mux_018:src_startofpacket -> fifo_qd_p1_in_csr_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                  // cmd_mux_018:src_endofpacket -> fifo_qd_p1_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qe_in_csr_agent_m0_readdata;                                             // fifo_qe_in_csr_translator:uav_readdata -> fifo_qe_in_csr_agent:m0_readdata
	wire          fifo_qe_in_csr_agent_m0_waitrequest;                                          // fifo_qe_in_csr_translator:uav_waitrequest -> fifo_qe_in_csr_agent:m0_waitrequest
	wire          fifo_qe_in_csr_agent_m0_debugaccess;                                          // fifo_qe_in_csr_agent:m0_debugaccess -> fifo_qe_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qe_in_csr_agent_m0_address;                                              // fifo_qe_in_csr_agent:m0_address -> fifo_qe_in_csr_translator:uav_address
	wire    [3:0] fifo_qe_in_csr_agent_m0_byteenable;                                           // fifo_qe_in_csr_agent:m0_byteenable -> fifo_qe_in_csr_translator:uav_byteenable
	wire          fifo_qe_in_csr_agent_m0_read;                                                 // fifo_qe_in_csr_agent:m0_read -> fifo_qe_in_csr_translator:uav_read
	wire          fifo_qe_in_csr_agent_m0_readdatavalid;                                        // fifo_qe_in_csr_translator:uav_readdatavalid -> fifo_qe_in_csr_agent:m0_readdatavalid
	wire          fifo_qe_in_csr_agent_m0_lock;                                                 // fifo_qe_in_csr_agent:m0_lock -> fifo_qe_in_csr_translator:uav_lock
	wire   [31:0] fifo_qe_in_csr_agent_m0_writedata;                                            // fifo_qe_in_csr_agent:m0_writedata -> fifo_qe_in_csr_translator:uav_writedata
	wire          fifo_qe_in_csr_agent_m0_write;                                                // fifo_qe_in_csr_agent:m0_write -> fifo_qe_in_csr_translator:uav_write
	wire    [2:0] fifo_qe_in_csr_agent_m0_burstcount;                                           // fifo_qe_in_csr_agent:m0_burstcount -> fifo_qe_in_csr_translator:uav_burstcount
	wire          fifo_qe_in_csr_agent_rf_source_valid;                                         // fifo_qe_in_csr_agent:rf_source_valid -> fifo_qe_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qe_in_csr_agent_rf_source_data;                                          // fifo_qe_in_csr_agent:rf_source_data -> fifo_qe_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qe_in_csr_agent_rf_source_ready;                                         // fifo_qe_in_csr_agent_rsp_fifo:in_ready -> fifo_qe_in_csr_agent:rf_source_ready
	wire          fifo_qe_in_csr_agent_rf_source_startofpacket;                                 // fifo_qe_in_csr_agent:rf_source_startofpacket -> fifo_qe_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qe_in_csr_agent_rf_source_endofpacket;                                   // fifo_qe_in_csr_agent:rf_source_endofpacket -> fifo_qe_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qe_in_csr_agent_rsp_fifo_out_valid;                                      // fifo_qe_in_csr_agent_rsp_fifo:out_valid -> fifo_qe_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qe_in_csr_agent_rsp_fifo_out_data;                                       // fifo_qe_in_csr_agent_rsp_fifo:out_data -> fifo_qe_in_csr_agent:rf_sink_data
	wire          fifo_qe_in_csr_agent_rsp_fifo_out_ready;                                      // fifo_qe_in_csr_agent:rf_sink_ready -> fifo_qe_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qe_in_csr_agent_rsp_fifo_out_startofpacket;                              // fifo_qe_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qe_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qe_in_csr_agent_rsp_fifo_out_endofpacket;                                // fifo_qe_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qe_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                        // cmd_mux_019:src_valid -> fifo_qe_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_019_src_data;                                                         // cmd_mux_019:src_data -> fifo_qe_in_csr_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                        // fifo_qe_in_csr_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [49:0] cmd_mux_019_src_channel;                                                      // cmd_mux_019:src_channel -> fifo_qe_in_csr_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                // cmd_mux_019:src_startofpacket -> fifo_qe_in_csr_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                  // cmd_mux_019:src_endofpacket -> fifo_qe_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p2_in_csr_agent_m0_readdata;                                          // fifo_qd_p2_in_csr_translator:uav_readdata -> fifo_qd_p2_in_csr_agent:m0_readdata
	wire          fifo_qd_p2_in_csr_agent_m0_waitrequest;                                       // fifo_qd_p2_in_csr_translator:uav_waitrequest -> fifo_qd_p2_in_csr_agent:m0_waitrequest
	wire          fifo_qd_p2_in_csr_agent_m0_debugaccess;                                       // fifo_qd_p2_in_csr_agent:m0_debugaccess -> fifo_qd_p2_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p2_in_csr_agent_m0_address;                                           // fifo_qd_p2_in_csr_agent:m0_address -> fifo_qd_p2_in_csr_translator:uav_address
	wire    [3:0] fifo_qd_p2_in_csr_agent_m0_byteenable;                                        // fifo_qd_p2_in_csr_agent:m0_byteenable -> fifo_qd_p2_in_csr_translator:uav_byteenable
	wire          fifo_qd_p2_in_csr_agent_m0_read;                                              // fifo_qd_p2_in_csr_agent:m0_read -> fifo_qd_p2_in_csr_translator:uav_read
	wire          fifo_qd_p2_in_csr_agent_m0_readdatavalid;                                     // fifo_qd_p2_in_csr_translator:uav_readdatavalid -> fifo_qd_p2_in_csr_agent:m0_readdatavalid
	wire          fifo_qd_p2_in_csr_agent_m0_lock;                                              // fifo_qd_p2_in_csr_agent:m0_lock -> fifo_qd_p2_in_csr_translator:uav_lock
	wire   [31:0] fifo_qd_p2_in_csr_agent_m0_writedata;                                         // fifo_qd_p2_in_csr_agent:m0_writedata -> fifo_qd_p2_in_csr_translator:uav_writedata
	wire          fifo_qd_p2_in_csr_agent_m0_write;                                             // fifo_qd_p2_in_csr_agent:m0_write -> fifo_qd_p2_in_csr_translator:uav_write
	wire    [2:0] fifo_qd_p2_in_csr_agent_m0_burstcount;                                        // fifo_qd_p2_in_csr_agent:m0_burstcount -> fifo_qd_p2_in_csr_translator:uav_burstcount
	wire          fifo_qd_p2_in_csr_agent_rf_source_valid;                                      // fifo_qd_p2_in_csr_agent:rf_source_valid -> fifo_qd_p2_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p2_in_csr_agent_rf_source_data;                                       // fifo_qd_p2_in_csr_agent:rf_source_data -> fifo_qd_p2_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qd_p2_in_csr_agent_rf_source_ready;                                      // fifo_qd_p2_in_csr_agent_rsp_fifo:in_ready -> fifo_qd_p2_in_csr_agent:rf_source_ready
	wire          fifo_qd_p2_in_csr_agent_rf_source_startofpacket;                              // fifo_qd_p2_in_csr_agent:rf_source_startofpacket -> fifo_qd_p2_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p2_in_csr_agent_rf_source_endofpacket;                                // fifo_qd_p2_in_csr_agent:rf_source_endofpacket -> fifo_qd_p2_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p2_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qd_p2_in_csr_agent_rsp_fifo:out_valid -> fifo_qd_p2_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p2_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qd_p2_in_csr_agent_rsp_fifo:out_data -> fifo_qd_p2_in_csr_agent:rf_sink_data
	wire          fifo_qd_p2_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qd_p2_in_csr_agent:rf_sink_ready -> fifo_qd_p2_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qd_p2_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qd_p2_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qd_p2_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qd_p2_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qd_p2_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qd_p2_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                        // cmd_mux_020:src_valid -> fifo_qd_p2_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_020_src_data;                                                         // cmd_mux_020:src_data -> fifo_qd_p2_in_csr_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                        // fifo_qd_p2_in_csr_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [49:0] cmd_mux_020_src_channel;                                                      // cmd_mux_020:src_channel -> fifo_qd_p2_in_csr_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                // cmd_mux_020:src_startofpacket -> fifo_qd_p2_in_csr_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                  // cmd_mux_020:src_endofpacket -> fifo_qd_p2_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p1_out_agent_m0_readdata;                                             // fifo_qd_p1_out_translator:uav_readdata -> fifo_qd_p1_out_agent:m0_readdata
	wire          fifo_qd_p1_out_agent_m0_waitrequest;                                          // fifo_qd_p1_out_translator:uav_waitrequest -> fifo_qd_p1_out_agent:m0_waitrequest
	wire          fifo_qd_p1_out_agent_m0_debugaccess;                                          // fifo_qd_p1_out_agent:m0_debugaccess -> fifo_qd_p1_out_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p1_out_agent_m0_address;                                              // fifo_qd_p1_out_agent:m0_address -> fifo_qd_p1_out_translator:uav_address
	wire    [3:0] fifo_qd_p1_out_agent_m0_byteenable;                                           // fifo_qd_p1_out_agent:m0_byteenable -> fifo_qd_p1_out_translator:uav_byteenable
	wire          fifo_qd_p1_out_agent_m0_read;                                                 // fifo_qd_p1_out_agent:m0_read -> fifo_qd_p1_out_translator:uav_read
	wire          fifo_qd_p1_out_agent_m0_readdatavalid;                                        // fifo_qd_p1_out_translator:uav_readdatavalid -> fifo_qd_p1_out_agent:m0_readdatavalid
	wire          fifo_qd_p1_out_agent_m0_lock;                                                 // fifo_qd_p1_out_agent:m0_lock -> fifo_qd_p1_out_translator:uav_lock
	wire   [31:0] fifo_qd_p1_out_agent_m0_writedata;                                            // fifo_qd_p1_out_agent:m0_writedata -> fifo_qd_p1_out_translator:uav_writedata
	wire          fifo_qd_p1_out_agent_m0_write;                                                // fifo_qd_p1_out_agent:m0_write -> fifo_qd_p1_out_translator:uav_write
	wire    [2:0] fifo_qd_p1_out_agent_m0_burstcount;                                           // fifo_qd_p1_out_agent:m0_burstcount -> fifo_qd_p1_out_translator:uav_burstcount
	wire          fifo_qd_p1_out_agent_rf_source_valid;                                         // fifo_qd_p1_out_agent:rf_source_valid -> fifo_qd_p1_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p1_out_agent_rf_source_data;                                          // fifo_qd_p1_out_agent:rf_source_data -> fifo_qd_p1_out_agent_rsp_fifo:in_data
	wire          fifo_qd_p1_out_agent_rf_source_ready;                                         // fifo_qd_p1_out_agent_rsp_fifo:in_ready -> fifo_qd_p1_out_agent:rf_source_ready
	wire          fifo_qd_p1_out_agent_rf_source_startofpacket;                                 // fifo_qd_p1_out_agent:rf_source_startofpacket -> fifo_qd_p1_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p1_out_agent_rf_source_endofpacket;                                   // fifo_qd_p1_out_agent:rf_source_endofpacket -> fifo_qd_p1_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p1_out_agent_rsp_fifo_out_valid;                                      // fifo_qd_p1_out_agent_rsp_fifo:out_valid -> fifo_qd_p1_out_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p1_out_agent_rsp_fifo_out_data;                                       // fifo_qd_p1_out_agent_rsp_fifo:out_data -> fifo_qd_p1_out_agent:rf_sink_data
	wire          fifo_qd_p1_out_agent_rsp_fifo_out_ready;                                      // fifo_qd_p1_out_agent:rf_sink_ready -> fifo_qd_p1_out_agent_rsp_fifo:out_ready
	wire          fifo_qd_p1_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qd_p1_out_agent_rsp_fifo:out_startofpacket -> fifo_qd_p1_out_agent:rf_sink_startofpacket
	wire          fifo_qd_p1_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qd_p1_out_agent_rsp_fifo:out_endofpacket -> fifo_qd_p1_out_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                        // cmd_mux_021:src_valid -> fifo_qd_p1_out_agent:cp_valid
	wire  [109:0] cmd_mux_021_src_data;                                                         // cmd_mux_021:src_data -> fifo_qd_p1_out_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                        // fifo_qd_p1_out_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [49:0] cmd_mux_021_src_channel;                                                      // cmd_mux_021:src_channel -> fifo_qd_p1_out_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                // cmd_mux_021:src_startofpacket -> fifo_qd_p1_out_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                  // cmd_mux_021:src_endofpacket -> fifo_qd_p1_out_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p2_out_agent_m0_readdata;                                             // fifo_qd_p2_out_translator:uav_readdata -> fifo_qd_p2_out_agent:m0_readdata
	wire          fifo_qd_p2_out_agent_m0_waitrequest;                                          // fifo_qd_p2_out_translator:uav_waitrequest -> fifo_qd_p2_out_agent:m0_waitrequest
	wire          fifo_qd_p2_out_agent_m0_debugaccess;                                          // fifo_qd_p2_out_agent:m0_debugaccess -> fifo_qd_p2_out_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p2_out_agent_m0_address;                                              // fifo_qd_p2_out_agent:m0_address -> fifo_qd_p2_out_translator:uav_address
	wire    [3:0] fifo_qd_p2_out_agent_m0_byteenable;                                           // fifo_qd_p2_out_agent:m0_byteenable -> fifo_qd_p2_out_translator:uav_byteenable
	wire          fifo_qd_p2_out_agent_m0_read;                                                 // fifo_qd_p2_out_agent:m0_read -> fifo_qd_p2_out_translator:uav_read
	wire          fifo_qd_p2_out_agent_m0_readdatavalid;                                        // fifo_qd_p2_out_translator:uav_readdatavalid -> fifo_qd_p2_out_agent:m0_readdatavalid
	wire          fifo_qd_p2_out_agent_m0_lock;                                                 // fifo_qd_p2_out_agent:m0_lock -> fifo_qd_p2_out_translator:uav_lock
	wire   [31:0] fifo_qd_p2_out_agent_m0_writedata;                                            // fifo_qd_p2_out_agent:m0_writedata -> fifo_qd_p2_out_translator:uav_writedata
	wire          fifo_qd_p2_out_agent_m0_write;                                                // fifo_qd_p2_out_agent:m0_write -> fifo_qd_p2_out_translator:uav_write
	wire    [2:0] fifo_qd_p2_out_agent_m0_burstcount;                                           // fifo_qd_p2_out_agent:m0_burstcount -> fifo_qd_p2_out_translator:uav_burstcount
	wire          fifo_qd_p2_out_agent_rf_source_valid;                                         // fifo_qd_p2_out_agent:rf_source_valid -> fifo_qd_p2_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p2_out_agent_rf_source_data;                                          // fifo_qd_p2_out_agent:rf_source_data -> fifo_qd_p2_out_agent_rsp_fifo:in_data
	wire          fifo_qd_p2_out_agent_rf_source_ready;                                         // fifo_qd_p2_out_agent_rsp_fifo:in_ready -> fifo_qd_p2_out_agent:rf_source_ready
	wire          fifo_qd_p2_out_agent_rf_source_startofpacket;                                 // fifo_qd_p2_out_agent:rf_source_startofpacket -> fifo_qd_p2_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p2_out_agent_rf_source_endofpacket;                                   // fifo_qd_p2_out_agent:rf_source_endofpacket -> fifo_qd_p2_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p2_out_agent_rsp_fifo_out_valid;                                      // fifo_qd_p2_out_agent_rsp_fifo:out_valid -> fifo_qd_p2_out_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p2_out_agent_rsp_fifo_out_data;                                       // fifo_qd_p2_out_agent_rsp_fifo:out_data -> fifo_qd_p2_out_agent:rf_sink_data
	wire          fifo_qd_p2_out_agent_rsp_fifo_out_ready;                                      // fifo_qd_p2_out_agent:rf_sink_ready -> fifo_qd_p2_out_agent_rsp_fifo:out_ready
	wire          fifo_qd_p2_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qd_p2_out_agent_rsp_fifo:out_startofpacket -> fifo_qd_p2_out_agent:rf_sink_startofpacket
	wire          fifo_qd_p2_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qd_p2_out_agent_rsp_fifo:out_endofpacket -> fifo_qd_p2_out_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                        // cmd_mux_022:src_valid -> fifo_qd_p2_out_agent:cp_valid
	wire  [109:0] cmd_mux_022_src_data;                                                         // cmd_mux_022:src_data -> fifo_qd_p2_out_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                        // fifo_qd_p2_out_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [49:0] cmd_mux_022_src_channel;                                                      // cmd_mux_022:src_channel -> fifo_qd_p2_out_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                // cmd_mux_022:src_startofpacket -> fifo_qd_p2_out_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                  // cmd_mux_022:src_endofpacket -> fifo_qd_p2_out_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p3_out_agent_m0_readdata;                                             // fifo_qd_p3_out_translator:uav_readdata -> fifo_qd_p3_out_agent:m0_readdata
	wire          fifo_qd_p3_out_agent_m0_waitrequest;                                          // fifo_qd_p3_out_translator:uav_waitrequest -> fifo_qd_p3_out_agent:m0_waitrequest
	wire          fifo_qd_p3_out_agent_m0_debugaccess;                                          // fifo_qd_p3_out_agent:m0_debugaccess -> fifo_qd_p3_out_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p3_out_agent_m0_address;                                              // fifo_qd_p3_out_agent:m0_address -> fifo_qd_p3_out_translator:uav_address
	wire    [3:0] fifo_qd_p3_out_agent_m0_byteenable;                                           // fifo_qd_p3_out_agent:m0_byteenable -> fifo_qd_p3_out_translator:uav_byteenable
	wire          fifo_qd_p3_out_agent_m0_read;                                                 // fifo_qd_p3_out_agent:m0_read -> fifo_qd_p3_out_translator:uav_read
	wire          fifo_qd_p3_out_agent_m0_readdatavalid;                                        // fifo_qd_p3_out_translator:uav_readdatavalid -> fifo_qd_p3_out_agent:m0_readdatavalid
	wire          fifo_qd_p3_out_agent_m0_lock;                                                 // fifo_qd_p3_out_agent:m0_lock -> fifo_qd_p3_out_translator:uav_lock
	wire   [31:0] fifo_qd_p3_out_agent_m0_writedata;                                            // fifo_qd_p3_out_agent:m0_writedata -> fifo_qd_p3_out_translator:uav_writedata
	wire          fifo_qd_p3_out_agent_m0_write;                                                // fifo_qd_p3_out_agent:m0_write -> fifo_qd_p3_out_translator:uav_write
	wire    [2:0] fifo_qd_p3_out_agent_m0_burstcount;                                           // fifo_qd_p3_out_agent:m0_burstcount -> fifo_qd_p3_out_translator:uav_burstcount
	wire          fifo_qd_p3_out_agent_rf_source_valid;                                         // fifo_qd_p3_out_agent:rf_source_valid -> fifo_qd_p3_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p3_out_agent_rf_source_data;                                          // fifo_qd_p3_out_agent:rf_source_data -> fifo_qd_p3_out_agent_rsp_fifo:in_data
	wire          fifo_qd_p3_out_agent_rf_source_ready;                                         // fifo_qd_p3_out_agent_rsp_fifo:in_ready -> fifo_qd_p3_out_agent:rf_source_ready
	wire          fifo_qd_p3_out_agent_rf_source_startofpacket;                                 // fifo_qd_p3_out_agent:rf_source_startofpacket -> fifo_qd_p3_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p3_out_agent_rf_source_endofpacket;                                   // fifo_qd_p3_out_agent:rf_source_endofpacket -> fifo_qd_p3_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p3_out_agent_rsp_fifo_out_valid;                                      // fifo_qd_p3_out_agent_rsp_fifo:out_valid -> fifo_qd_p3_out_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p3_out_agent_rsp_fifo_out_data;                                       // fifo_qd_p3_out_agent_rsp_fifo:out_data -> fifo_qd_p3_out_agent:rf_sink_data
	wire          fifo_qd_p3_out_agent_rsp_fifo_out_ready;                                      // fifo_qd_p3_out_agent:rf_sink_ready -> fifo_qd_p3_out_agent_rsp_fifo:out_ready
	wire          fifo_qd_p3_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qd_p3_out_agent_rsp_fifo:out_startofpacket -> fifo_qd_p3_out_agent:rf_sink_startofpacket
	wire          fifo_qd_p3_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qd_p3_out_agent_rsp_fifo:out_endofpacket -> fifo_qd_p3_out_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                        // cmd_mux_023:src_valid -> fifo_qd_p3_out_agent:cp_valid
	wire  [109:0] cmd_mux_023_src_data;                                                         // cmd_mux_023:src_data -> fifo_qd_p3_out_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                        // fifo_qd_p3_out_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [49:0] cmd_mux_023_src_channel;                                                      // cmd_mux_023:src_channel -> fifo_qd_p3_out_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                // cmd_mux_023:src_startofpacket -> fifo_qd_p3_out_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                  // cmd_mux_023:src_endofpacket -> fifo_qd_p3_out_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p2_in_agent_m0_readdata;                                              // fifo_qd_p2_in_translator:uav_readdata -> fifo_qd_p2_in_agent:m0_readdata
	wire          fifo_qd_p2_in_agent_m0_waitrequest;                                           // fifo_qd_p2_in_translator:uav_waitrequest -> fifo_qd_p2_in_agent:m0_waitrequest
	wire          fifo_qd_p2_in_agent_m0_debugaccess;                                           // fifo_qd_p2_in_agent:m0_debugaccess -> fifo_qd_p2_in_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p2_in_agent_m0_address;                                               // fifo_qd_p2_in_agent:m0_address -> fifo_qd_p2_in_translator:uav_address
	wire    [3:0] fifo_qd_p2_in_agent_m0_byteenable;                                            // fifo_qd_p2_in_agent:m0_byteenable -> fifo_qd_p2_in_translator:uav_byteenable
	wire          fifo_qd_p2_in_agent_m0_read;                                                  // fifo_qd_p2_in_agent:m0_read -> fifo_qd_p2_in_translator:uav_read
	wire          fifo_qd_p2_in_agent_m0_readdatavalid;                                         // fifo_qd_p2_in_translator:uav_readdatavalid -> fifo_qd_p2_in_agent:m0_readdatavalid
	wire          fifo_qd_p2_in_agent_m0_lock;                                                  // fifo_qd_p2_in_agent:m0_lock -> fifo_qd_p2_in_translator:uav_lock
	wire   [31:0] fifo_qd_p2_in_agent_m0_writedata;                                             // fifo_qd_p2_in_agent:m0_writedata -> fifo_qd_p2_in_translator:uav_writedata
	wire          fifo_qd_p2_in_agent_m0_write;                                                 // fifo_qd_p2_in_agent:m0_write -> fifo_qd_p2_in_translator:uav_write
	wire    [2:0] fifo_qd_p2_in_agent_m0_burstcount;                                            // fifo_qd_p2_in_agent:m0_burstcount -> fifo_qd_p2_in_translator:uav_burstcount
	wire          fifo_qd_p2_in_agent_rf_source_valid;                                          // fifo_qd_p2_in_agent:rf_source_valid -> fifo_qd_p2_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p2_in_agent_rf_source_data;                                           // fifo_qd_p2_in_agent:rf_source_data -> fifo_qd_p2_in_agent_rsp_fifo:in_data
	wire          fifo_qd_p2_in_agent_rf_source_ready;                                          // fifo_qd_p2_in_agent_rsp_fifo:in_ready -> fifo_qd_p2_in_agent:rf_source_ready
	wire          fifo_qd_p2_in_agent_rf_source_startofpacket;                                  // fifo_qd_p2_in_agent:rf_source_startofpacket -> fifo_qd_p2_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p2_in_agent_rf_source_endofpacket;                                    // fifo_qd_p2_in_agent:rf_source_endofpacket -> fifo_qd_p2_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p2_in_agent_rsp_fifo_out_valid;                                       // fifo_qd_p2_in_agent_rsp_fifo:out_valid -> fifo_qd_p2_in_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p2_in_agent_rsp_fifo_out_data;                                        // fifo_qd_p2_in_agent_rsp_fifo:out_data -> fifo_qd_p2_in_agent:rf_sink_data
	wire          fifo_qd_p2_in_agent_rsp_fifo_out_ready;                                       // fifo_qd_p2_in_agent:rf_sink_ready -> fifo_qd_p2_in_agent_rsp_fifo:out_ready
	wire          fifo_qd_p2_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qd_p2_in_agent_rsp_fifo:out_startofpacket -> fifo_qd_p2_in_agent:rf_sink_startofpacket
	wire          fifo_qd_p2_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qd_p2_in_agent_rsp_fifo:out_endofpacket -> fifo_qd_p2_in_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                        // cmd_mux_024:src_valid -> fifo_qd_p2_in_agent:cp_valid
	wire  [109:0] cmd_mux_024_src_data;                                                         // cmd_mux_024:src_data -> fifo_qd_p2_in_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                        // fifo_qd_p2_in_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [49:0] cmd_mux_024_src_channel;                                                      // cmd_mux_024:src_channel -> fifo_qd_p2_in_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                // cmd_mux_024:src_startofpacket -> fifo_qd_p2_in_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                  // cmd_mux_024:src_endofpacket -> fifo_qd_p2_in_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p2_in_csr_agent_m0_readdata;                                          // fifo_qc_p2_in_csr_translator:uav_readdata -> fifo_qc_p2_in_csr_agent:m0_readdata
	wire          fifo_qc_p2_in_csr_agent_m0_waitrequest;                                       // fifo_qc_p2_in_csr_translator:uav_waitrequest -> fifo_qc_p2_in_csr_agent:m0_waitrequest
	wire          fifo_qc_p2_in_csr_agent_m0_debugaccess;                                       // fifo_qc_p2_in_csr_agent:m0_debugaccess -> fifo_qc_p2_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p2_in_csr_agent_m0_address;                                           // fifo_qc_p2_in_csr_agent:m0_address -> fifo_qc_p2_in_csr_translator:uav_address
	wire    [3:0] fifo_qc_p2_in_csr_agent_m0_byteenable;                                        // fifo_qc_p2_in_csr_agent:m0_byteenable -> fifo_qc_p2_in_csr_translator:uav_byteenable
	wire          fifo_qc_p2_in_csr_agent_m0_read;                                              // fifo_qc_p2_in_csr_agent:m0_read -> fifo_qc_p2_in_csr_translator:uav_read
	wire          fifo_qc_p2_in_csr_agent_m0_readdatavalid;                                     // fifo_qc_p2_in_csr_translator:uav_readdatavalid -> fifo_qc_p2_in_csr_agent:m0_readdatavalid
	wire          fifo_qc_p2_in_csr_agent_m0_lock;                                              // fifo_qc_p2_in_csr_agent:m0_lock -> fifo_qc_p2_in_csr_translator:uav_lock
	wire   [31:0] fifo_qc_p2_in_csr_agent_m0_writedata;                                         // fifo_qc_p2_in_csr_agent:m0_writedata -> fifo_qc_p2_in_csr_translator:uav_writedata
	wire          fifo_qc_p2_in_csr_agent_m0_write;                                             // fifo_qc_p2_in_csr_agent:m0_write -> fifo_qc_p2_in_csr_translator:uav_write
	wire    [2:0] fifo_qc_p2_in_csr_agent_m0_burstcount;                                        // fifo_qc_p2_in_csr_agent:m0_burstcount -> fifo_qc_p2_in_csr_translator:uav_burstcount
	wire          fifo_qc_p2_in_csr_agent_rf_source_valid;                                      // fifo_qc_p2_in_csr_agent:rf_source_valid -> fifo_qc_p2_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p2_in_csr_agent_rf_source_data;                                       // fifo_qc_p2_in_csr_agent:rf_source_data -> fifo_qc_p2_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qc_p2_in_csr_agent_rf_source_ready;                                      // fifo_qc_p2_in_csr_agent_rsp_fifo:in_ready -> fifo_qc_p2_in_csr_agent:rf_source_ready
	wire          fifo_qc_p2_in_csr_agent_rf_source_startofpacket;                              // fifo_qc_p2_in_csr_agent:rf_source_startofpacket -> fifo_qc_p2_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p2_in_csr_agent_rf_source_endofpacket;                                // fifo_qc_p2_in_csr_agent:rf_source_endofpacket -> fifo_qc_p2_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p2_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qc_p2_in_csr_agent_rsp_fifo:out_valid -> fifo_qc_p2_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p2_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qc_p2_in_csr_agent_rsp_fifo:out_data -> fifo_qc_p2_in_csr_agent:rf_sink_data
	wire          fifo_qc_p2_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qc_p2_in_csr_agent:rf_sink_ready -> fifo_qc_p2_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qc_p2_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qc_p2_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qc_p2_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qc_p2_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qc_p2_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qc_p2_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                        // cmd_mux_025:src_valid -> fifo_qc_p2_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_025_src_data;                                                         // cmd_mux_025:src_data -> fifo_qc_p2_in_csr_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                        // fifo_qc_p2_in_csr_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [49:0] cmd_mux_025_src_channel;                                                      // cmd_mux_025:src_channel -> fifo_qc_p2_in_csr_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                // cmd_mux_025:src_startofpacket -> fifo_qc_p2_in_csr_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                  // cmd_mux_025:src_endofpacket -> fifo_qc_p2_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p2_out_agent_m0_readdata;                                             // fifo_qc_p2_out_translator:uav_readdata -> fifo_qc_p2_out_agent:m0_readdata
	wire          fifo_qc_p2_out_agent_m0_waitrequest;                                          // fifo_qc_p2_out_translator:uav_waitrequest -> fifo_qc_p2_out_agent:m0_waitrequest
	wire          fifo_qc_p2_out_agent_m0_debugaccess;                                          // fifo_qc_p2_out_agent:m0_debugaccess -> fifo_qc_p2_out_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p2_out_agent_m0_address;                                              // fifo_qc_p2_out_agent:m0_address -> fifo_qc_p2_out_translator:uav_address
	wire    [3:0] fifo_qc_p2_out_agent_m0_byteenable;                                           // fifo_qc_p2_out_agent:m0_byteenable -> fifo_qc_p2_out_translator:uav_byteenable
	wire          fifo_qc_p2_out_agent_m0_read;                                                 // fifo_qc_p2_out_agent:m0_read -> fifo_qc_p2_out_translator:uav_read
	wire          fifo_qc_p2_out_agent_m0_readdatavalid;                                        // fifo_qc_p2_out_translator:uav_readdatavalid -> fifo_qc_p2_out_agent:m0_readdatavalid
	wire          fifo_qc_p2_out_agent_m0_lock;                                                 // fifo_qc_p2_out_agent:m0_lock -> fifo_qc_p2_out_translator:uav_lock
	wire   [31:0] fifo_qc_p2_out_agent_m0_writedata;                                            // fifo_qc_p2_out_agent:m0_writedata -> fifo_qc_p2_out_translator:uav_writedata
	wire          fifo_qc_p2_out_agent_m0_write;                                                // fifo_qc_p2_out_agent:m0_write -> fifo_qc_p2_out_translator:uav_write
	wire    [2:0] fifo_qc_p2_out_agent_m0_burstcount;                                           // fifo_qc_p2_out_agent:m0_burstcount -> fifo_qc_p2_out_translator:uav_burstcount
	wire          fifo_qc_p2_out_agent_rf_source_valid;                                         // fifo_qc_p2_out_agent:rf_source_valid -> fifo_qc_p2_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p2_out_agent_rf_source_data;                                          // fifo_qc_p2_out_agent:rf_source_data -> fifo_qc_p2_out_agent_rsp_fifo:in_data
	wire          fifo_qc_p2_out_agent_rf_source_ready;                                         // fifo_qc_p2_out_agent_rsp_fifo:in_ready -> fifo_qc_p2_out_agent:rf_source_ready
	wire          fifo_qc_p2_out_agent_rf_source_startofpacket;                                 // fifo_qc_p2_out_agent:rf_source_startofpacket -> fifo_qc_p2_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p2_out_agent_rf_source_endofpacket;                                   // fifo_qc_p2_out_agent:rf_source_endofpacket -> fifo_qc_p2_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p2_out_agent_rsp_fifo_out_valid;                                      // fifo_qc_p2_out_agent_rsp_fifo:out_valid -> fifo_qc_p2_out_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p2_out_agent_rsp_fifo_out_data;                                       // fifo_qc_p2_out_agent_rsp_fifo:out_data -> fifo_qc_p2_out_agent:rf_sink_data
	wire          fifo_qc_p2_out_agent_rsp_fifo_out_ready;                                      // fifo_qc_p2_out_agent:rf_sink_ready -> fifo_qc_p2_out_agent_rsp_fifo:out_ready
	wire          fifo_qc_p2_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qc_p2_out_agent_rsp_fifo:out_startofpacket -> fifo_qc_p2_out_agent:rf_sink_startofpacket
	wire          fifo_qc_p2_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qc_p2_out_agent_rsp_fifo:out_endofpacket -> fifo_qc_p2_out_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                        // cmd_mux_026:src_valid -> fifo_qc_p2_out_agent:cp_valid
	wire  [109:0] cmd_mux_026_src_data;                                                         // cmd_mux_026:src_data -> fifo_qc_p2_out_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                        // fifo_qc_p2_out_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [49:0] cmd_mux_026_src_channel;                                                      // cmd_mux_026:src_channel -> fifo_qc_p2_out_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                // cmd_mux_026:src_startofpacket -> fifo_qc_p2_out_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                  // cmd_mux_026:src_endofpacket -> fifo_qc_p2_out_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p2_in_agent_m0_readdata;                                              // fifo_qc_p2_in_translator:uav_readdata -> fifo_qc_p2_in_agent:m0_readdata
	wire          fifo_qc_p2_in_agent_m0_waitrequest;                                           // fifo_qc_p2_in_translator:uav_waitrequest -> fifo_qc_p2_in_agent:m0_waitrequest
	wire          fifo_qc_p2_in_agent_m0_debugaccess;                                           // fifo_qc_p2_in_agent:m0_debugaccess -> fifo_qc_p2_in_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p2_in_agent_m0_address;                                               // fifo_qc_p2_in_agent:m0_address -> fifo_qc_p2_in_translator:uav_address
	wire    [3:0] fifo_qc_p2_in_agent_m0_byteenable;                                            // fifo_qc_p2_in_agent:m0_byteenable -> fifo_qc_p2_in_translator:uav_byteenable
	wire          fifo_qc_p2_in_agent_m0_read;                                                  // fifo_qc_p2_in_agent:m0_read -> fifo_qc_p2_in_translator:uav_read
	wire          fifo_qc_p2_in_agent_m0_readdatavalid;                                         // fifo_qc_p2_in_translator:uav_readdatavalid -> fifo_qc_p2_in_agent:m0_readdatavalid
	wire          fifo_qc_p2_in_agent_m0_lock;                                                  // fifo_qc_p2_in_agent:m0_lock -> fifo_qc_p2_in_translator:uav_lock
	wire   [31:0] fifo_qc_p2_in_agent_m0_writedata;                                             // fifo_qc_p2_in_agent:m0_writedata -> fifo_qc_p2_in_translator:uav_writedata
	wire          fifo_qc_p2_in_agent_m0_write;                                                 // fifo_qc_p2_in_agent:m0_write -> fifo_qc_p2_in_translator:uav_write
	wire    [2:0] fifo_qc_p2_in_agent_m0_burstcount;                                            // fifo_qc_p2_in_agent:m0_burstcount -> fifo_qc_p2_in_translator:uav_burstcount
	wire          fifo_qc_p2_in_agent_rf_source_valid;                                          // fifo_qc_p2_in_agent:rf_source_valid -> fifo_qc_p2_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p2_in_agent_rf_source_data;                                           // fifo_qc_p2_in_agent:rf_source_data -> fifo_qc_p2_in_agent_rsp_fifo:in_data
	wire          fifo_qc_p2_in_agent_rf_source_ready;                                          // fifo_qc_p2_in_agent_rsp_fifo:in_ready -> fifo_qc_p2_in_agent:rf_source_ready
	wire          fifo_qc_p2_in_agent_rf_source_startofpacket;                                  // fifo_qc_p2_in_agent:rf_source_startofpacket -> fifo_qc_p2_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p2_in_agent_rf_source_endofpacket;                                    // fifo_qc_p2_in_agent:rf_source_endofpacket -> fifo_qc_p2_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p2_in_agent_rsp_fifo_out_valid;                                       // fifo_qc_p2_in_agent_rsp_fifo:out_valid -> fifo_qc_p2_in_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p2_in_agent_rsp_fifo_out_data;                                        // fifo_qc_p2_in_agent_rsp_fifo:out_data -> fifo_qc_p2_in_agent:rf_sink_data
	wire          fifo_qc_p2_in_agent_rsp_fifo_out_ready;                                       // fifo_qc_p2_in_agent:rf_sink_ready -> fifo_qc_p2_in_agent_rsp_fifo:out_ready
	wire          fifo_qc_p2_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qc_p2_in_agent_rsp_fifo:out_startofpacket -> fifo_qc_p2_in_agent:rf_sink_startofpacket
	wire          fifo_qc_p2_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qc_p2_in_agent_rsp_fifo:out_endofpacket -> fifo_qc_p2_in_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                        // cmd_mux_027:src_valid -> fifo_qc_p2_in_agent:cp_valid
	wire  [109:0] cmd_mux_027_src_data;                                                         // cmd_mux_027:src_data -> fifo_qc_p2_in_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                        // fifo_qc_p2_in_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [49:0] cmd_mux_027_src_channel;                                                      // cmd_mux_027:src_channel -> fifo_qc_p2_in_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                // cmd_mux_027:src_startofpacket -> fifo_qc_p2_in_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                  // cmd_mux_027:src_endofpacket -> fifo_qc_p2_in_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p2_in_csr_agent_m0_readdata;                                          // fifo_qb_p2_in_csr_translator:uav_readdata -> fifo_qb_p2_in_csr_agent:m0_readdata
	wire          fifo_qb_p2_in_csr_agent_m0_waitrequest;                                       // fifo_qb_p2_in_csr_translator:uav_waitrequest -> fifo_qb_p2_in_csr_agent:m0_waitrequest
	wire          fifo_qb_p2_in_csr_agent_m0_debugaccess;                                       // fifo_qb_p2_in_csr_agent:m0_debugaccess -> fifo_qb_p2_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p2_in_csr_agent_m0_address;                                           // fifo_qb_p2_in_csr_agent:m0_address -> fifo_qb_p2_in_csr_translator:uav_address
	wire    [3:0] fifo_qb_p2_in_csr_agent_m0_byteenable;                                        // fifo_qb_p2_in_csr_agent:m0_byteenable -> fifo_qb_p2_in_csr_translator:uav_byteenable
	wire          fifo_qb_p2_in_csr_agent_m0_read;                                              // fifo_qb_p2_in_csr_agent:m0_read -> fifo_qb_p2_in_csr_translator:uav_read
	wire          fifo_qb_p2_in_csr_agent_m0_readdatavalid;                                     // fifo_qb_p2_in_csr_translator:uav_readdatavalid -> fifo_qb_p2_in_csr_agent:m0_readdatavalid
	wire          fifo_qb_p2_in_csr_agent_m0_lock;                                              // fifo_qb_p2_in_csr_agent:m0_lock -> fifo_qb_p2_in_csr_translator:uav_lock
	wire   [31:0] fifo_qb_p2_in_csr_agent_m0_writedata;                                         // fifo_qb_p2_in_csr_agent:m0_writedata -> fifo_qb_p2_in_csr_translator:uav_writedata
	wire          fifo_qb_p2_in_csr_agent_m0_write;                                             // fifo_qb_p2_in_csr_agent:m0_write -> fifo_qb_p2_in_csr_translator:uav_write
	wire    [2:0] fifo_qb_p2_in_csr_agent_m0_burstcount;                                        // fifo_qb_p2_in_csr_agent:m0_burstcount -> fifo_qb_p2_in_csr_translator:uav_burstcount
	wire          fifo_qb_p2_in_csr_agent_rf_source_valid;                                      // fifo_qb_p2_in_csr_agent:rf_source_valid -> fifo_qb_p2_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p2_in_csr_agent_rf_source_data;                                       // fifo_qb_p2_in_csr_agent:rf_source_data -> fifo_qb_p2_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qb_p2_in_csr_agent_rf_source_ready;                                      // fifo_qb_p2_in_csr_agent_rsp_fifo:in_ready -> fifo_qb_p2_in_csr_agent:rf_source_ready
	wire          fifo_qb_p2_in_csr_agent_rf_source_startofpacket;                              // fifo_qb_p2_in_csr_agent:rf_source_startofpacket -> fifo_qb_p2_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p2_in_csr_agent_rf_source_endofpacket;                                // fifo_qb_p2_in_csr_agent:rf_source_endofpacket -> fifo_qb_p2_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p2_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qb_p2_in_csr_agent_rsp_fifo:out_valid -> fifo_qb_p2_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p2_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qb_p2_in_csr_agent_rsp_fifo:out_data -> fifo_qb_p2_in_csr_agent:rf_sink_data
	wire          fifo_qb_p2_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qb_p2_in_csr_agent:rf_sink_ready -> fifo_qb_p2_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qb_p2_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qb_p2_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qb_p2_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qb_p2_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qb_p2_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qb_p2_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_028_src_valid;                                                        // cmd_mux_028:src_valid -> fifo_qb_p2_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_028_src_data;                                                         // cmd_mux_028:src_data -> fifo_qb_p2_in_csr_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                        // fifo_qb_p2_in_csr_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [49:0] cmd_mux_028_src_channel;                                                      // cmd_mux_028:src_channel -> fifo_qb_p2_in_csr_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                // cmd_mux_028:src_startofpacket -> fifo_qb_p2_in_csr_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                  // cmd_mux_028:src_endofpacket -> fifo_qb_p2_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p2_out_agent_m0_readdata;                                             // fifo_qb_p2_out_translator:uav_readdata -> fifo_qb_p2_out_agent:m0_readdata
	wire          fifo_qb_p2_out_agent_m0_waitrequest;                                          // fifo_qb_p2_out_translator:uav_waitrequest -> fifo_qb_p2_out_agent:m0_waitrequest
	wire          fifo_qb_p2_out_agent_m0_debugaccess;                                          // fifo_qb_p2_out_agent:m0_debugaccess -> fifo_qb_p2_out_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p2_out_agent_m0_address;                                              // fifo_qb_p2_out_agent:m0_address -> fifo_qb_p2_out_translator:uav_address
	wire    [3:0] fifo_qb_p2_out_agent_m0_byteenable;                                           // fifo_qb_p2_out_agent:m0_byteenable -> fifo_qb_p2_out_translator:uav_byteenable
	wire          fifo_qb_p2_out_agent_m0_read;                                                 // fifo_qb_p2_out_agent:m0_read -> fifo_qb_p2_out_translator:uav_read
	wire          fifo_qb_p2_out_agent_m0_readdatavalid;                                        // fifo_qb_p2_out_translator:uav_readdatavalid -> fifo_qb_p2_out_agent:m0_readdatavalid
	wire          fifo_qb_p2_out_agent_m0_lock;                                                 // fifo_qb_p2_out_agent:m0_lock -> fifo_qb_p2_out_translator:uav_lock
	wire   [31:0] fifo_qb_p2_out_agent_m0_writedata;                                            // fifo_qb_p2_out_agent:m0_writedata -> fifo_qb_p2_out_translator:uav_writedata
	wire          fifo_qb_p2_out_agent_m0_write;                                                // fifo_qb_p2_out_agent:m0_write -> fifo_qb_p2_out_translator:uav_write
	wire    [2:0] fifo_qb_p2_out_agent_m0_burstcount;                                           // fifo_qb_p2_out_agent:m0_burstcount -> fifo_qb_p2_out_translator:uav_burstcount
	wire          fifo_qb_p2_out_agent_rf_source_valid;                                         // fifo_qb_p2_out_agent:rf_source_valid -> fifo_qb_p2_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p2_out_agent_rf_source_data;                                          // fifo_qb_p2_out_agent:rf_source_data -> fifo_qb_p2_out_agent_rsp_fifo:in_data
	wire          fifo_qb_p2_out_agent_rf_source_ready;                                         // fifo_qb_p2_out_agent_rsp_fifo:in_ready -> fifo_qb_p2_out_agent:rf_source_ready
	wire          fifo_qb_p2_out_agent_rf_source_startofpacket;                                 // fifo_qb_p2_out_agent:rf_source_startofpacket -> fifo_qb_p2_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p2_out_agent_rf_source_endofpacket;                                   // fifo_qb_p2_out_agent:rf_source_endofpacket -> fifo_qb_p2_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p2_out_agent_rsp_fifo_out_valid;                                      // fifo_qb_p2_out_agent_rsp_fifo:out_valid -> fifo_qb_p2_out_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p2_out_agent_rsp_fifo_out_data;                                       // fifo_qb_p2_out_agent_rsp_fifo:out_data -> fifo_qb_p2_out_agent:rf_sink_data
	wire          fifo_qb_p2_out_agent_rsp_fifo_out_ready;                                      // fifo_qb_p2_out_agent:rf_sink_ready -> fifo_qb_p2_out_agent_rsp_fifo:out_ready
	wire          fifo_qb_p2_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qb_p2_out_agent_rsp_fifo:out_startofpacket -> fifo_qb_p2_out_agent:rf_sink_startofpacket
	wire          fifo_qb_p2_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qb_p2_out_agent_rsp_fifo:out_endofpacket -> fifo_qb_p2_out_agent:rf_sink_endofpacket
	wire          cmd_mux_029_src_valid;                                                        // cmd_mux_029:src_valid -> fifo_qb_p2_out_agent:cp_valid
	wire  [109:0] cmd_mux_029_src_data;                                                         // cmd_mux_029:src_data -> fifo_qb_p2_out_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                        // fifo_qb_p2_out_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [49:0] cmd_mux_029_src_channel;                                                      // cmd_mux_029:src_channel -> fifo_qb_p2_out_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                // cmd_mux_029:src_startofpacket -> fifo_qb_p2_out_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                  // cmd_mux_029:src_endofpacket -> fifo_qb_p2_out_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p2_in_agent_m0_readdata;                                              // fifo_qb_p2_in_translator:uav_readdata -> fifo_qb_p2_in_agent:m0_readdata
	wire          fifo_qb_p2_in_agent_m0_waitrequest;                                           // fifo_qb_p2_in_translator:uav_waitrequest -> fifo_qb_p2_in_agent:m0_waitrequest
	wire          fifo_qb_p2_in_agent_m0_debugaccess;                                           // fifo_qb_p2_in_agent:m0_debugaccess -> fifo_qb_p2_in_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p2_in_agent_m0_address;                                               // fifo_qb_p2_in_agent:m0_address -> fifo_qb_p2_in_translator:uav_address
	wire    [3:0] fifo_qb_p2_in_agent_m0_byteenable;                                            // fifo_qb_p2_in_agent:m0_byteenable -> fifo_qb_p2_in_translator:uav_byteenable
	wire          fifo_qb_p2_in_agent_m0_read;                                                  // fifo_qb_p2_in_agent:m0_read -> fifo_qb_p2_in_translator:uav_read
	wire          fifo_qb_p2_in_agent_m0_readdatavalid;                                         // fifo_qb_p2_in_translator:uav_readdatavalid -> fifo_qb_p2_in_agent:m0_readdatavalid
	wire          fifo_qb_p2_in_agent_m0_lock;                                                  // fifo_qb_p2_in_agent:m0_lock -> fifo_qb_p2_in_translator:uav_lock
	wire   [31:0] fifo_qb_p2_in_agent_m0_writedata;                                             // fifo_qb_p2_in_agent:m0_writedata -> fifo_qb_p2_in_translator:uav_writedata
	wire          fifo_qb_p2_in_agent_m0_write;                                                 // fifo_qb_p2_in_agent:m0_write -> fifo_qb_p2_in_translator:uav_write
	wire    [2:0] fifo_qb_p2_in_agent_m0_burstcount;                                            // fifo_qb_p2_in_agent:m0_burstcount -> fifo_qb_p2_in_translator:uav_burstcount
	wire          fifo_qb_p2_in_agent_rf_source_valid;                                          // fifo_qb_p2_in_agent:rf_source_valid -> fifo_qb_p2_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p2_in_agent_rf_source_data;                                           // fifo_qb_p2_in_agent:rf_source_data -> fifo_qb_p2_in_agent_rsp_fifo:in_data
	wire          fifo_qb_p2_in_agent_rf_source_ready;                                          // fifo_qb_p2_in_agent_rsp_fifo:in_ready -> fifo_qb_p2_in_agent:rf_source_ready
	wire          fifo_qb_p2_in_agent_rf_source_startofpacket;                                  // fifo_qb_p2_in_agent:rf_source_startofpacket -> fifo_qb_p2_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p2_in_agent_rf_source_endofpacket;                                    // fifo_qb_p2_in_agent:rf_source_endofpacket -> fifo_qb_p2_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p2_in_agent_rsp_fifo_out_valid;                                       // fifo_qb_p2_in_agent_rsp_fifo:out_valid -> fifo_qb_p2_in_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p2_in_agent_rsp_fifo_out_data;                                        // fifo_qb_p2_in_agent_rsp_fifo:out_data -> fifo_qb_p2_in_agent:rf_sink_data
	wire          fifo_qb_p2_in_agent_rsp_fifo_out_ready;                                       // fifo_qb_p2_in_agent:rf_sink_ready -> fifo_qb_p2_in_agent_rsp_fifo:out_ready
	wire          fifo_qb_p2_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qb_p2_in_agent_rsp_fifo:out_startofpacket -> fifo_qb_p2_in_agent:rf_sink_startofpacket
	wire          fifo_qb_p2_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qb_p2_in_agent_rsp_fifo:out_endofpacket -> fifo_qb_p2_in_agent:rf_sink_endofpacket
	wire          cmd_mux_030_src_valid;                                                        // cmd_mux_030:src_valid -> fifo_qb_p2_in_agent:cp_valid
	wire  [109:0] cmd_mux_030_src_data;                                                         // cmd_mux_030:src_data -> fifo_qb_p2_in_agent:cp_data
	wire          cmd_mux_030_src_ready;                                                        // fifo_qb_p2_in_agent:cp_ready -> cmd_mux_030:src_ready
	wire   [49:0] cmd_mux_030_src_channel;                                                      // cmd_mux_030:src_channel -> fifo_qb_p2_in_agent:cp_channel
	wire          cmd_mux_030_src_startofpacket;                                                // cmd_mux_030:src_startofpacket -> fifo_qb_p2_in_agent:cp_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                  // cmd_mux_030:src_endofpacket -> fifo_qb_p2_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p2_out_agent_m0_readdata;                                             // fifo_qa_p2_out_translator:uav_readdata -> fifo_qa_p2_out_agent:m0_readdata
	wire          fifo_qa_p2_out_agent_m0_waitrequest;                                          // fifo_qa_p2_out_translator:uav_waitrequest -> fifo_qa_p2_out_agent:m0_waitrequest
	wire          fifo_qa_p2_out_agent_m0_debugaccess;                                          // fifo_qa_p2_out_agent:m0_debugaccess -> fifo_qa_p2_out_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p2_out_agent_m0_address;                                              // fifo_qa_p2_out_agent:m0_address -> fifo_qa_p2_out_translator:uav_address
	wire    [3:0] fifo_qa_p2_out_agent_m0_byteenable;                                           // fifo_qa_p2_out_agent:m0_byteenable -> fifo_qa_p2_out_translator:uav_byteenable
	wire          fifo_qa_p2_out_agent_m0_read;                                                 // fifo_qa_p2_out_agent:m0_read -> fifo_qa_p2_out_translator:uav_read
	wire          fifo_qa_p2_out_agent_m0_readdatavalid;                                        // fifo_qa_p2_out_translator:uav_readdatavalid -> fifo_qa_p2_out_agent:m0_readdatavalid
	wire          fifo_qa_p2_out_agent_m0_lock;                                                 // fifo_qa_p2_out_agent:m0_lock -> fifo_qa_p2_out_translator:uav_lock
	wire   [31:0] fifo_qa_p2_out_agent_m0_writedata;                                            // fifo_qa_p2_out_agent:m0_writedata -> fifo_qa_p2_out_translator:uav_writedata
	wire          fifo_qa_p2_out_agent_m0_write;                                                // fifo_qa_p2_out_agent:m0_write -> fifo_qa_p2_out_translator:uav_write
	wire    [2:0] fifo_qa_p2_out_agent_m0_burstcount;                                           // fifo_qa_p2_out_agent:m0_burstcount -> fifo_qa_p2_out_translator:uav_burstcount
	wire          fifo_qa_p2_out_agent_rf_source_valid;                                         // fifo_qa_p2_out_agent:rf_source_valid -> fifo_qa_p2_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p2_out_agent_rf_source_data;                                          // fifo_qa_p2_out_agent:rf_source_data -> fifo_qa_p2_out_agent_rsp_fifo:in_data
	wire          fifo_qa_p2_out_agent_rf_source_ready;                                         // fifo_qa_p2_out_agent_rsp_fifo:in_ready -> fifo_qa_p2_out_agent:rf_source_ready
	wire          fifo_qa_p2_out_agent_rf_source_startofpacket;                                 // fifo_qa_p2_out_agent:rf_source_startofpacket -> fifo_qa_p2_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p2_out_agent_rf_source_endofpacket;                                   // fifo_qa_p2_out_agent:rf_source_endofpacket -> fifo_qa_p2_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p2_out_agent_rsp_fifo_out_valid;                                      // fifo_qa_p2_out_agent_rsp_fifo:out_valid -> fifo_qa_p2_out_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p2_out_agent_rsp_fifo_out_data;                                       // fifo_qa_p2_out_agent_rsp_fifo:out_data -> fifo_qa_p2_out_agent:rf_sink_data
	wire          fifo_qa_p2_out_agent_rsp_fifo_out_ready;                                      // fifo_qa_p2_out_agent:rf_sink_ready -> fifo_qa_p2_out_agent_rsp_fifo:out_ready
	wire          fifo_qa_p2_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qa_p2_out_agent_rsp_fifo:out_startofpacket -> fifo_qa_p2_out_agent:rf_sink_startofpacket
	wire          fifo_qa_p2_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qa_p2_out_agent_rsp_fifo:out_endofpacket -> fifo_qa_p2_out_agent:rf_sink_endofpacket
	wire          cmd_mux_031_src_valid;                                                        // cmd_mux_031:src_valid -> fifo_qa_p2_out_agent:cp_valid
	wire  [109:0] cmd_mux_031_src_data;                                                         // cmd_mux_031:src_data -> fifo_qa_p2_out_agent:cp_data
	wire          cmd_mux_031_src_ready;                                                        // fifo_qa_p2_out_agent:cp_ready -> cmd_mux_031:src_ready
	wire   [49:0] cmd_mux_031_src_channel;                                                      // cmd_mux_031:src_channel -> fifo_qa_p2_out_agent:cp_channel
	wire          cmd_mux_031_src_startofpacket;                                                // cmd_mux_031:src_startofpacket -> fifo_qa_p2_out_agent:cp_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                  // cmd_mux_031:src_endofpacket -> fifo_qa_p2_out_agent:cp_endofpacket
	wire   [31:0] jtag_uart_1f_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_1f_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_1f_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_1f_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_1f_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_1f_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_1f_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_1f_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_1f_avalon_jtag_slave_agent:m0_address -> jtag_uart_1f_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_1f_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_1f_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_1f_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_1f_avalon_jtag_slave_agent:m0_read -> jtag_uart_1f_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_1f_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_1f_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_1f_avalon_jtag_slave_agent:m0_lock -> jtag_uart_1f_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_1f_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_1f_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_1f_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_1f_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_1f_avalon_jtag_slave_agent:m0_write -> jtag_uart_1f_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_1f_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_1f_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_1f_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_1f_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_uart_1f_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_1f_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_1f_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_1f_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_1f_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_1f_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_1f_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_1f_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_1f_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_1f_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_032_src_valid;                                                        // cmd_mux_032:src_valid -> jtag_uart_1f_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_032_src_data;                                                         // cmd_mux_032:src_data -> jtag_uart_1f_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_032_src_ready;                                                        // jtag_uart_1f_avalon_jtag_slave_agent:cp_ready -> cmd_mux_032:src_ready
	wire   [49:0] cmd_mux_032_src_channel;                                                      // cmd_mux_032:src_channel -> jtag_uart_1f_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_032_src_startofpacket;                                                // cmd_mux_032:src_startofpacket -> jtag_uart_1f_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                  // cmd_mux_032:src_endofpacket -> jtag_uart_1f_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_1f_control_slave_agent_m0_readdata;                                     // sysid_1f_control_slave_translator:uav_readdata -> sysid_1f_control_slave_agent:m0_readdata
	wire          sysid_1f_control_slave_agent_m0_waitrequest;                                  // sysid_1f_control_slave_translator:uav_waitrequest -> sysid_1f_control_slave_agent:m0_waitrequest
	wire          sysid_1f_control_slave_agent_m0_debugaccess;                                  // sysid_1f_control_slave_agent:m0_debugaccess -> sysid_1f_control_slave_translator:uav_debugaccess
	wire   [27:0] sysid_1f_control_slave_agent_m0_address;                                      // sysid_1f_control_slave_agent:m0_address -> sysid_1f_control_slave_translator:uav_address
	wire    [3:0] sysid_1f_control_slave_agent_m0_byteenable;                                   // sysid_1f_control_slave_agent:m0_byteenable -> sysid_1f_control_slave_translator:uav_byteenable
	wire          sysid_1f_control_slave_agent_m0_read;                                         // sysid_1f_control_slave_agent:m0_read -> sysid_1f_control_slave_translator:uav_read
	wire          sysid_1f_control_slave_agent_m0_readdatavalid;                                // sysid_1f_control_slave_translator:uav_readdatavalid -> sysid_1f_control_slave_agent:m0_readdatavalid
	wire          sysid_1f_control_slave_agent_m0_lock;                                         // sysid_1f_control_slave_agent:m0_lock -> sysid_1f_control_slave_translator:uav_lock
	wire   [31:0] sysid_1f_control_slave_agent_m0_writedata;                                    // sysid_1f_control_slave_agent:m0_writedata -> sysid_1f_control_slave_translator:uav_writedata
	wire          sysid_1f_control_slave_agent_m0_write;                                        // sysid_1f_control_slave_agent:m0_write -> sysid_1f_control_slave_translator:uav_write
	wire    [2:0] sysid_1f_control_slave_agent_m0_burstcount;                                   // sysid_1f_control_slave_agent:m0_burstcount -> sysid_1f_control_slave_translator:uav_burstcount
	wire          sysid_1f_control_slave_agent_rf_source_valid;                                 // sysid_1f_control_slave_agent:rf_source_valid -> sysid_1f_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] sysid_1f_control_slave_agent_rf_source_data;                                  // sysid_1f_control_slave_agent:rf_source_data -> sysid_1f_control_slave_agent_rsp_fifo:in_data
	wire          sysid_1f_control_slave_agent_rf_source_ready;                                 // sysid_1f_control_slave_agent_rsp_fifo:in_ready -> sysid_1f_control_slave_agent:rf_source_ready
	wire          sysid_1f_control_slave_agent_rf_source_startofpacket;                         // sysid_1f_control_slave_agent:rf_source_startofpacket -> sysid_1f_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_1f_control_slave_agent_rf_source_endofpacket;                           // sysid_1f_control_slave_agent:rf_source_endofpacket -> sysid_1f_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_1f_control_slave_agent_rsp_fifo_out_valid;                              // sysid_1f_control_slave_agent_rsp_fifo:out_valid -> sysid_1f_control_slave_agent:rf_sink_valid
	wire  [110:0] sysid_1f_control_slave_agent_rsp_fifo_out_data;                               // sysid_1f_control_slave_agent_rsp_fifo:out_data -> sysid_1f_control_slave_agent:rf_sink_data
	wire          sysid_1f_control_slave_agent_rsp_fifo_out_ready;                              // sysid_1f_control_slave_agent:rf_sink_ready -> sysid_1f_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_1f_control_slave_agent_rsp_fifo_out_startofpacket;                      // sysid_1f_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_1f_control_slave_agent:rf_sink_startofpacket
	wire          sysid_1f_control_slave_agent_rsp_fifo_out_endofpacket;                        // sysid_1f_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_1f_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_033_src_valid;                                                        // cmd_mux_033:src_valid -> sysid_1f_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_033_src_data;                                                         // cmd_mux_033:src_data -> sysid_1f_control_slave_agent:cp_data
	wire          cmd_mux_033_src_ready;                                                        // sysid_1f_control_slave_agent:cp_ready -> cmd_mux_033:src_ready
	wire   [49:0] cmd_mux_033_src_channel;                                                      // cmd_mux_033:src_channel -> sysid_1f_control_slave_agent:cp_channel
	wire          cmd_mux_033_src_startofpacket;                                                // cmd_mux_033:src_startofpacket -> sysid_1f_control_slave_agent:cp_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                  // cmd_mux_033:src_endofpacket -> sysid_1f_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_1f_debug_mem_slave_agent_m0_readdata;                                     // cpu_1f_debug_mem_slave_translator:uav_readdata -> cpu_1f_debug_mem_slave_agent:m0_readdata
	wire          cpu_1f_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_1f_debug_mem_slave_translator:uav_waitrequest -> cpu_1f_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_1f_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_1f_debug_mem_slave_agent:m0_debugaccess -> cpu_1f_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] cpu_1f_debug_mem_slave_agent_m0_address;                                      // cpu_1f_debug_mem_slave_agent:m0_address -> cpu_1f_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_1f_debug_mem_slave_agent_m0_byteenable;                                   // cpu_1f_debug_mem_slave_agent:m0_byteenable -> cpu_1f_debug_mem_slave_translator:uav_byteenable
	wire          cpu_1f_debug_mem_slave_agent_m0_read;                                         // cpu_1f_debug_mem_slave_agent:m0_read -> cpu_1f_debug_mem_slave_translator:uav_read
	wire          cpu_1f_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_1f_debug_mem_slave_translator:uav_readdatavalid -> cpu_1f_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_1f_debug_mem_slave_agent_m0_lock;                                         // cpu_1f_debug_mem_slave_agent:m0_lock -> cpu_1f_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_1f_debug_mem_slave_agent_m0_writedata;                                    // cpu_1f_debug_mem_slave_agent:m0_writedata -> cpu_1f_debug_mem_slave_translator:uav_writedata
	wire          cpu_1f_debug_mem_slave_agent_m0_write;                                        // cpu_1f_debug_mem_slave_agent:m0_write -> cpu_1f_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_1f_debug_mem_slave_agent_m0_burstcount;                                   // cpu_1f_debug_mem_slave_agent:m0_burstcount -> cpu_1f_debug_mem_slave_translator:uav_burstcount
	wire          cpu_1f_debug_mem_slave_agent_rf_source_valid;                                 // cpu_1f_debug_mem_slave_agent:rf_source_valid -> cpu_1f_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [110:0] cpu_1f_debug_mem_slave_agent_rf_source_data;                                  // cpu_1f_debug_mem_slave_agent:rf_source_data -> cpu_1f_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_1f_debug_mem_slave_agent_rf_source_ready;                                 // cpu_1f_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_1f_debug_mem_slave_agent:rf_source_ready
	wire          cpu_1f_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_1f_debug_mem_slave_agent:rf_source_startofpacket -> cpu_1f_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_1f_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_1f_debug_mem_slave_agent:rf_source_endofpacket -> cpu_1f_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_1f_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_1f_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_1f_debug_mem_slave_agent:rf_sink_valid
	wire  [110:0] cpu_1f_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_1f_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_1f_debug_mem_slave_agent:rf_sink_data
	wire          cpu_1f_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_1f_debug_mem_slave_agent:rf_sink_ready -> cpu_1f_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_1f_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_1f_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_1f_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_1f_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_1f_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_1f_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_034_src_valid;                                                        // cmd_mux_034:src_valid -> cpu_1f_debug_mem_slave_agent:cp_valid
	wire  [109:0] cmd_mux_034_src_data;                                                         // cmd_mux_034:src_data -> cpu_1f_debug_mem_slave_agent:cp_data
	wire          cmd_mux_034_src_ready;                                                        // cpu_1f_debug_mem_slave_agent:cp_ready -> cmd_mux_034:src_ready
	wire   [49:0] cmd_mux_034_src_channel;                                                      // cmd_mux_034:src_channel -> cpu_1f_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_034_src_startofpacket;                                                // cmd_mux_034:src_startofpacket -> cpu_1f_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                  // cmd_mux_034:src_endofpacket -> cpu_1f_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] fifo_qe_out_agent_m0_readdata;                                                // fifo_qe_out_translator:uav_readdata -> fifo_qe_out_agent:m0_readdata
	wire          fifo_qe_out_agent_m0_waitrequest;                                             // fifo_qe_out_translator:uav_waitrequest -> fifo_qe_out_agent:m0_waitrequest
	wire          fifo_qe_out_agent_m0_debugaccess;                                             // fifo_qe_out_agent:m0_debugaccess -> fifo_qe_out_translator:uav_debugaccess
	wire   [27:0] fifo_qe_out_agent_m0_address;                                                 // fifo_qe_out_agent:m0_address -> fifo_qe_out_translator:uav_address
	wire    [3:0] fifo_qe_out_agent_m0_byteenable;                                              // fifo_qe_out_agent:m0_byteenable -> fifo_qe_out_translator:uav_byteenable
	wire          fifo_qe_out_agent_m0_read;                                                    // fifo_qe_out_agent:m0_read -> fifo_qe_out_translator:uav_read
	wire          fifo_qe_out_agent_m0_readdatavalid;                                           // fifo_qe_out_translator:uav_readdatavalid -> fifo_qe_out_agent:m0_readdatavalid
	wire          fifo_qe_out_agent_m0_lock;                                                    // fifo_qe_out_agent:m0_lock -> fifo_qe_out_translator:uav_lock
	wire   [31:0] fifo_qe_out_agent_m0_writedata;                                               // fifo_qe_out_agent:m0_writedata -> fifo_qe_out_translator:uav_writedata
	wire          fifo_qe_out_agent_m0_write;                                                   // fifo_qe_out_agent:m0_write -> fifo_qe_out_translator:uav_write
	wire    [2:0] fifo_qe_out_agent_m0_burstcount;                                              // fifo_qe_out_agent:m0_burstcount -> fifo_qe_out_translator:uav_burstcount
	wire          fifo_qe_out_agent_rf_source_valid;                                            // fifo_qe_out_agent:rf_source_valid -> fifo_qe_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qe_out_agent_rf_source_data;                                             // fifo_qe_out_agent:rf_source_data -> fifo_qe_out_agent_rsp_fifo:in_data
	wire          fifo_qe_out_agent_rf_source_ready;                                            // fifo_qe_out_agent_rsp_fifo:in_ready -> fifo_qe_out_agent:rf_source_ready
	wire          fifo_qe_out_agent_rf_source_startofpacket;                                    // fifo_qe_out_agent:rf_source_startofpacket -> fifo_qe_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qe_out_agent_rf_source_endofpacket;                                      // fifo_qe_out_agent:rf_source_endofpacket -> fifo_qe_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qe_out_agent_rsp_fifo_out_valid;                                         // fifo_qe_out_agent_rsp_fifo:out_valid -> fifo_qe_out_agent:rf_sink_valid
	wire  [110:0] fifo_qe_out_agent_rsp_fifo_out_data;                                          // fifo_qe_out_agent_rsp_fifo:out_data -> fifo_qe_out_agent:rf_sink_data
	wire          fifo_qe_out_agent_rsp_fifo_out_ready;                                         // fifo_qe_out_agent:rf_sink_ready -> fifo_qe_out_agent_rsp_fifo:out_ready
	wire          fifo_qe_out_agent_rsp_fifo_out_startofpacket;                                 // fifo_qe_out_agent_rsp_fifo:out_startofpacket -> fifo_qe_out_agent:rf_sink_startofpacket
	wire          fifo_qe_out_agent_rsp_fifo_out_endofpacket;                                   // fifo_qe_out_agent_rsp_fifo:out_endofpacket -> fifo_qe_out_agent:rf_sink_endofpacket
	wire          cmd_mux_035_src_valid;                                                        // cmd_mux_035:src_valid -> fifo_qe_out_agent:cp_valid
	wire  [109:0] cmd_mux_035_src_data;                                                         // cmd_mux_035:src_data -> fifo_qe_out_agent:cp_data
	wire          cmd_mux_035_src_ready;                                                        // fifo_qe_out_agent:cp_ready -> cmd_mux_035:src_ready
	wire   [49:0] cmd_mux_035_src_channel;                                                      // cmd_mux_035:src_channel -> fifo_qe_out_agent:cp_channel
	wire          cmd_mux_035_src_startofpacket;                                                // cmd_mux_035:src_startofpacket -> fifo_qe_out_agent:cp_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                  // cmd_mux_035:src_endofpacket -> fifo_qe_out_agent:cp_endofpacket
	wire   [31:0] timer_1f_s1_agent_m0_readdata;                                                // timer_1f_s1_translator:uav_readdata -> timer_1f_s1_agent:m0_readdata
	wire          timer_1f_s1_agent_m0_waitrequest;                                             // timer_1f_s1_translator:uav_waitrequest -> timer_1f_s1_agent:m0_waitrequest
	wire          timer_1f_s1_agent_m0_debugaccess;                                             // timer_1f_s1_agent:m0_debugaccess -> timer_1f_s1_translator:uav_debugaccess
	wire   [27:0] timer_1f_s1_agent_m0_address;                                                 // timer_1f_s1_agent:m0_address -> timer_1f_s1_translator:uav_address
	wire    [3:0] timer_1f_s1_agent_m0_byteenable;                                              // timer_1f_s1_agent:m0_byteenable -> timer_1f_s1_translator:uav_byteenable
	wire          timer_1f_s1_agent_m0_read;                                                    // timer_1f_s1_agent:m0_read -> timer_1f_s1_translator:uav_read
	wire          timer_1f_s1_agent_m0_readdatavalid;                                           // timer_1f_s1_translator:uav_readdatavalid -> timer_1f_s1_agent:m0_readdatavalid
	wire          timer_1f_s1_agent_m0_lock;                                                    // timer_1f_s1_agent:m0_lock -> timer_1f_s1_translator:uav_lock
	wire   [31:0] timer_1f_s1_agent_m0_writedata;                                               // timer_1f_s1_agent:m0_writedata -> timer_1f_s1_translator:uav_writedata
	wire          timer_1f_s1_agent_m0_write;                                                   // timer_1f_s1_agent:m0_write -> timer_1f_s1_translator:uav_write
	wire    [2:0] timer_1f_s1_agent_m0_burstcount;                                              // timer_1f_s1_agent:m0_burstcount -> timer_1f_s1_translator:uav_burstcount
	wire          timer_1f_s1_agent_rf_source_valid;                                            // timer_1f_s1_agent:rf_source_valid -> timer_1f_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_1f_s1_agent_rf_source_data;                                             // timer_1f_s1_agent:rf_source_data -> timer_1f_s1_agent_rsp_fifo:in_data
	wire          timer_1f_s1_agent_rf_source_ready;                                            // timer_1f_s1_agent_rsp_fifo:in_ready -> timer_1f_s1_agent:rf_source_ready
	wire          timer_1f_s1_agent_rf_source_startofpacket;                                    // timer_1f_s1_agent:rf_source_startofpacket -> timer_1f_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1f_s1_agent_rf_source_endofpacket;                                      // timer_1f_s1_agent:rf_source_endofpacket -> timer_1f_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1f_s1_agent_rsp_fifo_out_valid;                                         // timer_1f_s1_agent_rsp_fifo:out_valid -> timer_1f_s1_agent:rf_sink_valid
	wire  [110:0] timer_1f_s1_agent_rsp_fifo_out_data;                                          // timer_1f_s1_agent_rsp_fifo:out_data -> timer_1f_s1_agent:rf_sink_data
	wire          timer_1f_s1_agent_rsp_fifo_out_ready;                                         // timer_1f_s1_agent:rf_sink_ready -> timer_1f_s1_agent_rsp_fifo:out_ready
	wire          timer_1f_s1_agent_rsp_fifo_out_startofpacket;                                 // timer_1f_s1_agent_rsp_fifo:out_startofpacket -> timer_1f_s1_agent:rf_sink_startofpacket
	wire          timer_1f_s1_agent_rsp_fifo_out_endofpacket;                                   // timer_1f_s1_agent_rsp_fifo:out_endofpacket -> timer_1f_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_036_src_valid;                                                        // cmd_mux_036:src_valid -> timer_1f_s1_agent:cp_valid
	wire  [109:0] cmd_mux_036_src_data;                                                         // cmd_mux_036:src_data -> timer_1f_s1_agent:cp_data
	wire          cmd_mux_036_src_ready;                                                        // timer_1f_s1_agent:cp_ready -> cmd_mux_036:src_ready
	wire   [49:0] cmd_mux_036_src_channel;                                                      // cmd_mux_036:src_channel -> timer_1f_s1_agent:cp_channel
	wire          cmd_mux_036_src_startofpacket;                                                // cmd_mux_036:src_startofpacket -> timer_1f_s1_agent:cp_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                  // cmd_mux_036:src_endofpacket -> timer_1f_s1_agent:cp_endofpacket
	wire   [31:0] fifo_qd_p1_in_agent_m0_readdata;                                              // fifo_qd_p1_in_translator:uav_readdata -> fifo_qd_p1_in_agent:m0_readdata
	wire          fifo_qd_p1_in_agent_m0_waitrequest;                                           // fifo_qd_p1_in_translator:uav_waitrequest -> fifo_qd_p1_in_agent:m0_waitrequest
	wire          fifo_qd_p1_in_agent_m0_debugaccess;                                           // fifo_qd_p1_in_agent:m0_debugaccess -> fifo_qd_p1_in_translator:uav_debugaccess
	wire   [27:0] fifo_qd_p1_in_agent_m0_address;                                               // fifo_qd_p1_in_agent:m0_address -> fifo_qd_p1_in_translator:uav_address
	wire    [3:0] fifo_qd_p1_in_agent_m0_byteenable;                                            // fifo_qd_p1_in_agent:m0_byteenable -> fifo_qd_p1_in_translator:uav_byteenable
	wire          fifo_qd_p1_in_agent_m0_read;                                                  // fifo_qd_p1_in_agent:m0_read -> fifo_qd_p1_in_translator:uav_read
	wire          fifo_qd_p1_in_agent_m0_readdatavalid;                                         // fifo_qd_p1_in_translator:uav_readdatavalid -> fifo_qd_p1_in_agent:m0_readdatavalid
	wire          fifo_qd_p1_in_agent_m0_lock;                                                  // fifo_qd_p1_in_agent:m0_lock -> fifo_qd_p1_in_translator:uav_lock
	wire   [31:0] fifo_qd_p1_in_agent_m0_writedata;                                             // fifo_qd_p1_in_agent:m0_writedata -> fifo_qd_p1_in_translator:uav_writedata
	wire          fifo_qd_p1_in_agent_m0_write;                                                 // fifo_qd_p1_in_agent:m0_write -> fifo_qd_p1_in_translator:uav_write
	wire    [2:0] fifo_qd_p1_in_agent_m0_burstcount;                                            // fifo_qd_p1_in_agent:m0_burstcount -> fifo_qd_p1_in_translator:uav_burstcount
	wire          fifo_qd_p1_in_agent_rf_source_valid;                                          // fifo_qd_p1_in_agent:rf_source_valid -> fifo_qd_p1_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qd_p1_in_agent_rf_source_data;                                           // fifo_qd_p1_in_agent:rf_source_data -> fifo_qd_p1_in_agent_rsp_fifo:in_data
	wire          fifo_qd_p1_in_agent_rf_source_ready;                                          // fifo_qd_p1_in_agent_rsp_fifo:in_ready -> fifo_qd_p1_in_agent:rf_source_ready
	wire          fifo_qd_p1_in_agent_rf_source_startofpacket;                                  // fifo_qd_p1_in_agent:rf_source_startofpacket -> fifo_qd_p1_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qd_p1_in_agent_rf_source_endofpacket;                                    // fifo_qd_p1_in_agent:rf_source_endofpacket -> fifo_qd_p1_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qd_p1_in_agent_rsp_fifo_out_valid;                                       // fifo_qd_p1_in_agent_rsp_fifo:out_valid -> fifo_qd_p1_in_agent:rf_sink_valid
	wire  [110:0] fifo_qd_p1_in_agent_rsp_fifo_out_data;                                        // fifo_qd_p1_in_agent_rsp_fifo:out_data -> fifo_qd_p1_in_agent:rf_sink_data
	wire          fifo_qd_p1_in_agent_rsp_fifo_out_ready;                                       // fifo_qd_p1_in_agent:rf_sink_ready -> fifo_qd_p1_in_agent_rsp_fifo:out_ready
	wire          fifo_qd_p1_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qd_p1_in_agent_rsp_fifo:out_startofpacket -> fifo_qd_p1_in_agent:rf_sink_startofpacket
	wire          fifo_qd_p1_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qd_p1_in_agent_rsp_fifo:out_endofpacket -> fifo_qd_p1_in_agent:rf_sink_endofpacket
	wire          cmd_mux_037_src_valid;                                                        // cmd_mux_037:src_valid -> fifo_qd_p1_in_agent:cp_valid
	wire  [109:0] cmd_mux_037_src_data;                                                         // cmd_mux_037:src_data -> fifo_qd_p1_in_agent:cp_data
	wire          cmd_mux_037_src_ready;                                                        // fifo_qd_p1_in_agent:cp_ready -> cmd_mux_037:src_ready
	wire   [49:0] cmd_mux_037_src_channel;                                                      // cmd_mux_037:src_channel -> fifo_qd_p1_in_agent:cp_channel
	wire          cmd_mux_037_src_startofpacket;                                                // cmd_mux_037:src_startofpacket -> fifo_qd_p1_in_agent:cp_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                  // cmd_mux_037:src_endofpacket -> fifo_qd_p1_in_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p1_in_csr_agent_m0_readdata;                                          // fifo_qc_p1_in_csr_translator:uav_readdata -> fifo_qc_p1_in_csr_agent:m0_readdata
	wire          fifo_qc_p1_in_csr_agent_m0_waitrequest;                                       // fifo_qc_p1_in_csr_translator:uav_waitrequest -> fifo_qc_p1_in_csr_agent:m0_waitrequest
	wire          fifo_qc_p1_in_csr_agent_m0_debugaccess;                                       // fifo_qc_p1_in_csr_agent:m0_debugaccess -> fifo_qc_p1_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p1_in_csr_agent_m0_address;                                           // fifo_qc_p1_in_csr_agent:m0_address -> fifo_qc_p1_in_csr_translator:uav_address
	wire    [3:0] fifo_qc_p1_in_csr_agent_m0_byteenable;                                        // fifo_qc_p1_in_csr_agent:m0_byteenable -> fifo_qc_p1_in_csr_translator:uav_byteenable
	wire          fifo_qc_p1_in_csr_agent_m0_read;                                              // fifo_qc_p1_in_csr_agent:m0_read -> fifo_qc_p1_in_csr_translator:uav_read
	wire          fifo_qc_p1_in_csr_agent_m0_readdatavalid;                                     // fifo_qc_p1_in_csr_translator:uav_readdatavalid -> fifo_qc_p1_in_csr_agent:m0_readdatavalid
	wire          fifo_qc_p1_in_csr_agent_m0_lock;                                              // fifo_qc_p1_in_csr_agent:m0_lock -> fifo_qc_p1_in_csr_translator:uav_lock
	wire   [31:0] fifo_qc_p1_in_csr_agent_m0_writedata;                                         // fifo_qc_p1_in_csr_agent:m0_writedata -> fifo_qc_p1_in_csr_translator:uav_writedata
	wire          fifo_qc_p1_in_csr_agent_m0_write;                                             // fifo_qc_p1_in_csr_agent:m0_write -> fifo_qc_p1_in_csr_translator:uav_write
	wire    [2:0] fifo_qc_p1_in_csr_agent_m0_burstcount;                                        // fifo_qc_p1_in_csr_agent:m0_burstcount -> fifo_qc_p1_in_csr_translator:uav_burstcount
	wire          fifo_qc_p1_in_csr_agent_rf_source_valid;                                      // fifo_qc_p1_in_csr_agent:rf_source_valid -> fifo_qc_p1_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p1_in_csr_agent_rf_source_data;                                       // fifo_qc_p1_in_csr_agent:rf_source_data -> fifo_qc_p1_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qc_p1_in_csr_agent_rf_source_ready;                                      // fifo_qc_p1_in_csr_agent_rsp_fifo:in_ready -> fifo_qc_p1_in_csr_agent:rf_source_ready
	wire          fifo_qc_p1_in_csr_agent_rf_source_startofpacket;                              // fifo_qc_p1_in_csr_agent:rf_source_startofpacket -> fifo_qc_p1_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p1_in_csr_agent_rf_source_endofpacket;                                // fifo_qc_p1_in_csr_agent:rf_source_endofpacket -> fifo_qc_p1_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p1_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qc_p1_in_csr_agent_rsp_fifo:out_valid -> fifo_qc_p1_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p1_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qc_p1_in_csr_agent_rsp_fifo:out_data -> fifo_qc_p1_in_csr_agent:rf_sink_data
	wire          fifo_qc_p1_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qc_p1_in_csr_agent:rf_sink_ready -> fifo_qc_p1_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qc_p1_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qc_p1_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qc_p1_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qc_p1_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qc_p1_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qc_p1_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_038_src_valid;                                                        // cmd_mux_038:src_valid -> fifo_qc_p1_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_038_src_data;                                                         // cmd_mux_038:src_data -> fifo_qc_p1_in_csr_agent:cp_data
	wire          cmd_mux_038_src_ready;                                                        // fifo_qc_p1_in_csr_agent:cp_ready -> cmd_mux_038:src_ready
	wire   [49:0] cmd_mux_038_src_channel;                                                      // cmd_mux_038:src_channel -> fifo_qc_p1_in_csr_agent:cp_channel
	wire          cmd_mux_038_src_startofpacket;                                                // cmd_mux_038:src_startofpacket -> fifo_qc_p1_in_csr_agent:cp_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                  // cmd_mux_038:src_endofpacket -> fifo_qc_p1_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p1_out_agent_m0_readdata;                                             // fifo_qc_p1_out_translator:uav_readdata -> fifo_qc_p1_out_agent:m0_readdata
	wire          fifo_qc_p1_out_agent_m0_waitrequest;                                          // fifo_qc_p1_out_translator:uav_waitrequest -> fifo_qc_p1_out_agent:m0_waitrequest
	wire          fifo_qc_p1_out_agent_m0_debugaccess;                                          // fifo_qc_p1_out_agent:m0_debugaccess -> fifo_qc_p1_out_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p1_out_agent_m0_address;                                              // fifo_qc_p1_out_agent:m0_address -> fifo_qc_p1_out_translator:uav_address
	wire    [3:0] fifo_qc_p1_out_agent_m0_byteenable;                                           // fifo_qc_p1_out_agent:m0_byteenable -> fifo_qc_p1_out_translator:uav_byteenable
	wire          fifo_qc_p1_out_agent_m0_read;                                                 // fifo_qc_p1_out_agent:m0_read -> fifo_qc_p1_out_translator:uav_read
	wire          fifo_qc_p1_out_agent_m0_readdatavalid;                                        // fifo_qc_p1_out_translator:uav_readdatavalid -> fifo_qc_p1_out_agent:m0_readdatavalid
	wire          fifo_qc_p1_out_agent_m0_lock;                                                 // fifo_qc_p1_out_agent:m0_lock -> fifo_qc_p1_out_translator:uav_lock
	wire   [31:0] fifo_qc_p1_out_agent_m0_writedata;                                            // fifo_qc_p1_out_agent:m0_writedata -> fifo_qc_p1_out_translator:uav_writedata
	wire          fifo_qc_p1_out_agent_m0_write;                                                // fifo_qc_p1_out_agent:m0_write -> fifo_qc_p1_out_translator:uav_write
	wire    [2:0] fifo_qc_p1_out_agent_m0_burstcount;                                           // fifo_qc_p1_out_agent:m0_burstcount -> fifo_qc_p1_out_translator:uav_burstcount
	wire          fifo_qc_p1_out_agent_rf_source_valid;                                         // fifo_qc_p1_out_agent:rf_source_valid -> fifo_qc_p1_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p1_out_agent_rf_source_data;                                          // fifo_qc_p1_out_agent:rf_source_data -> fifo_qc_p1_out_agent_rsp_fifo:in_data
	wire          fifo_qc_p1_out_agent_rf_source_ready;                                         // fifo_qc_p1_out_agent_rsp_fifo:in_ready -> fifo_qc_p1_out_agent:rf_source_ready
	wire          fifo_qc_p1_out_agent_rf_source_startofpacket;                                 // fifo_qc_p1_out_agent:rf_source_startofpacket -> fifo_qc_p1_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p1_out_agent_rf_source_endofpacket;                                   // fifo_qc_p1_out_agent:rf_source_endofpacket -> fifo_qc_p1_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p1_out_agent_rsp_fifo_out_valid;                                      // fifo_qc_p1_out_agent_rsp_fifo:out_valid -> fifo_qc_p1_out_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p1_out_agent_rsp_fifo_out_data;                                       // fifo_qc_p1_out_agent_rsp_fifo:out_data -> fifo_qc_p1_out_agent:rf_sink_data
	wire          fifo_qc_p1_out_agent_rsp_fifo_out_ready;                                      // fifo_qc_p1_out_agent:rf_sink_ready -> fifo_qc_p1_out_agent_rsp_fifo:out_ready
	wire          fifo_qc_p1_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qc_p1_out_agent_rsp_fifo:out_startofpacket -> fifo_qc_p1_out_agent:rf_sink_startofpacket
	wire          fifo_qc_p1_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qc_p1_out_agent_rsp_fifo:out_endofpacket -> fifo_qc_p1_out_agent:rf_sink_endofpacket
	wire          cmd_mux_039_src_valid;                                                        // cmd_mux_039:src_valid -> fifo_qc_p1_out_agent:cp_valid
	wire  [109:0] cmd_mux_039_src_data;                                                         // cmd_mux_039:src_data -> fifo_qc_p1_out_agent:cp_data
	wire          cmd_mux_039_src_ready;                                                        // fifo_qc_p1_out_agent:cp_ready -> cmd_mux_039:src_ready
	wire   [49:0] cmd_mux_039_src_channel;                                                      // cmd_mux_039:src_channel -> fifo_qc_p1_out_agent:cp_channel
	wire          cmd_mux_039_src_startofpacket;                                                // cmd_mux_039:src_startofpacket -> fifo_qc_p1_out_agent:cp_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                  // cmd_mux_039:src_endofpacket -> fifo_qc_p1_out_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p1_in_agent_m0_readdata;                                              // fifo_qc_p1_in_translator:uav_readdata -> fifo_qc_p1_in_agent:m0_readdata
	wire          fifo_qc_p1_in_agent_m0_waitrequest;                                           // fifo_qc_p1_in_translator:uav_waitrequest -> fifo_qc_p1_in_agent:m0_waitrequest
	wire          fifo_qc_p1_in_agent_m0_debugaccess;                                           // fifo_qc_p1_in_agent:m0_debugaccess -> fifo_qc_p1_in_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p1_in_agent_m0_address;                                               // fifo_qc_p1_in_agent:m0_address -> fifo_qc_p1_in_translator:uav_address
	wire    [3:0] fifo_qc_p1_in_agent_m0_byteenable;                                            // fifo_qc_p1_in_agent:m0_byteenable -> fifo_qc_p1_in_translator:uav_byteenable
	wire          fifo_qc_p1_in_agent_m0_read;                                                  // fifo_qc_p1_in_agent:m0_read -> fifo_qc_p1_in_translator:uav_read
	wire          fifo_qc_p1_in_agent_m0_readdatavalid;                                         // fifo_qc_p1_in_translator:uav_readdatavalid -> fifo_qc_p1_in_agent:m0_readdatavalid
	wire          fifo_qc_p1_in_agent_m0_lock;                                                  // fifo_qc_p1_in_agent:m0_lock -> fifo_qc_p1_in_translator:uav_lock
	wire   [31:0] fifo_qc_p1_in_agent_m0_writedata;                                             // fifo_qc_p1_in_agent:m0_writedata -> fifo_qc_p1_in_translator:uav_writedata
	wire          fifo_qc_p1_in_agent_m0_write;                                                 // fifo_qc_p1_in_agent:m0_write -> fifo_qc_p1_in_translator:uav_write
	wire    [2:0] fifo_qc_p1_in_agent_m0_burstcount;                                            // fifo_qc_p1_in_agent:m0_burstcount -> fifo_qc_p1_in_translator:uav_burstcount
	wire          fifo_qc_p1_in_agent_rf_source_valid;                                          // fifo_qc_p1_in_agent:rf_source_valid -> fifo_qc_p1_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p1_in_agent_rf_source_data;                                           // fifo_qc_p1_in_agent:rf_source_data -> fifo_qc_p1_in_agent_rsp_fifo:in_data
	wire          fifo_qc_p1_in_agent_rf_source_ready;                                          // fifo_qc_p1_in_agent_rsp_fifo:in_ready -> fifo_qc_p1_in_agent:rf_source_ready
	wire          fifo_qc_p1_in_agent_rf_source_startofpacket;                                  // fifo_qc_p1_in_agent:rf_source_startofpacket -> fifo_qc_p1_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p1_in_agent_rf_source_endofpacket;                                    // fifo_qc_p1_in_agent:rf_source_endofpacket -> fifo_qc_p1_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p1_in_agent_rsp_fifo_out_valid;                                       // fifo_qc_p1_in_agent_rsp_fifo:out_valid -> fifo_qc_p1_in_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p1_in_agent_rsp_fifo_out_data;                                        // fifo_qc_p1_in_agent_rsp_fifo:out_data -> fifo_qc_p1_in_agent:rf_sink_data
	wire          fifo_qc_p1_in_agent_rsp_fifo_out_ready;                                       // fifo_qc_p1_in_agent:rf_sink_ready -> fifo_qc_p1_in_agent_rsp_fifo:out_ready
	wire          fifo_qc_p1_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qc_p1_in_agent_rsp_fifo:out_startofpacket -> fifo_qc_p1_in_agent:rf_sink_startofpacket
	wire          fifo_qc_p1_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qc_p1_in_agent_rsp_fifo:out_endofpacket -> fifo_qc_p1_in_agent:rf_sink_endofpacket
	wire          cmd_mux_040_src_valid;                                                        // cmd_mux_040:src_valid -> fifo_qc_p1_in_agent:cp_valid
	wire  [109:0] cmd_mux_040_src_data;                                                         // cmd_mux_040:src_data -> fifo_qc_p1_in_agent:cp_data
	wire          cmd_mux_040_src_ready;                                                        // fifo_qc_p1_in_agent:cp_ready -> cmd_mux_040:src_ready
	wire   [49:0] cmd_mux_040_src_channel;                                                      // cmd_mux_040:src_channel -> fifo_qc_p1_in_agent:cp_channel
	wire          cmd_mux_040_src_startofpacket;                                                // cmd_mux_040:src_startofpacket -> fifo_qc_p1_in_agent:cp_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                  // cmd_mux_040:src_endofpacket -> fifo_qc_p1_in_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p1_in_csr_agent_m0_readdata;                                          // fifo_qb_p1_in_csr_translator:uav_readdata -> fifo_qb_p1_in_csr_agent:m0_readdata
	wire          fifo_qb_p1_in_csr_agent_m0_waitrequest;                                       // fifo_qb_p1_in_csr_translator:uav_waitrequest -> fifo_qb_p1_in_csr_agent:m0_waitrequest
	wire          fifo_qb_p1_in_csr_agent_m0_debugaccess;                                       // fifo_qb_p1_in_csr_agent:m0_debugaccess -> fifo_qb_p1_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p1_in_csr_agent_m0_address;                                           // fifo_qb_p1_in_csr_agent:m0_address -> fifo_qb_p1_in_csr_translator:uav_address
	wire    [3:0] fifo_qb_p1_in_csr_agent_m0_byteenable;                                        // fifo_qb_p1_in_csr_agent:m0_byteenable -> fifo_qb_p1_in_csr_translator:uav_byteenable
	wire          fifo_qb_p1_in_csr_agent_m0_read;                                              // fifo_qb_p1_in_csr_agent:m0_read -> fifo_qb_p1_in_csr_translator:uav_read
	wire          fifo_qb_p1_in_csr_agent_m0_readdatavalid;                                     // fifo_qb_p1_in_csr_translator:uav_readdatavalid -> fifo_qb_p1_in_csr_agent:m0_readdatavalid
	wire          fifo_qb_p1_in_csr_agent_m0_lock;                                              // fifo_qb_p1_in_csr_agent:m0_lock -> fifo_qb_p1_in_csr_translator:uav_lock
	wire   [31:0] fifo_qb_p1_in_csr_agent_m0_writedata;                                         // fifo_qb_p1_in_csr_agent:m0_writedata -> fifo_qb_p1_in_csr_translator:uav_writedata
	wire          fifo_qb_p1_in_csr_agent_m0_write;                                             // fifo_qb_p1_in_csr_agent:m0_write -> fifo_qb_p1_in_csr_translator:uav_write
	wire    [2:0] fifo_qb_p1_in_csr_agent_m0_burstcount;                                        // fifo_qb_p1_in_csr_agent:m0_burstcount -> fifo_qb_p1_in_csr_translator:uav_burstcount
	wire          fifo_qb_p1_in_csr_agent_rf_source_valid;                                      // fifo_qb_p1_in_csr_agent:rf_source_valid -> fifo_qb_p1_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p1_in_csr_agent_rf_source_data;                                       // fifo_qb_p1_in_csr_agent:rf_source_data -> fifo_qb_p1_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qb_p1_in_csr_agent_rf_source_ready;                                      // fifo_qb_p1_in_csr_agent_rsp_fifo:in_ready -> fifo_qb_p1_in_csr_agent:rf_source_ready
	wire          fifo_qb_p1_in_csr_agent_rf_source_startofpacket;                              // fifo_qb_p1_in_csr_agent:rf_source_startofpacket -> fifo_qb_p1_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p1_in_csr_agent_rf_source_endofpacket;                                // fifo_qb_p1_in_csr_agent:rf_source_endofpacket -> fifo_qb_p1_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p1_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qb_p1_in_csr_agent_rsp_fifo:out_valid -> fifo_qb_p1_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p1_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qb_p1_in_csr_agent_rsp_fifo:out_data -> fifo_qb_p1_in_csr_agent:rf_sink_data
	wire          fifo_qb_p1_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qb_p1_in_csr_agent:rf_sink_ready -> fifo_qb_p1_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qb_p1_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qb_p1_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qb_p1_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qb_p1_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qb_p1_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qb_p1_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_041_src_valid;                                                        // cmd_mux_041:src_valid -> fifo_qb_p1_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_041_src_data;                                                         // cmd_mux_041:src_data -> fifo_qb_p1_in_csr_agent:cp_data
	wire          cmd_mux_041_src_ready;                                                        // fifo_qb_p1_in_csr_agent:cp_ready -> cmd_mux_041:src_ready
	wire   [49:0] cmd_mux_041_src_channel;                                                      // cmd_mux_041:src_channel -> fifo_qb_p1_in_csr_agent:cp_channel
	wire          cmd_mux_041_src_startofpacket;                                                // cmd_mux_041:src_startofpacket -> fifo_qb_p1_in_csr_agent:cp_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                  // cmd_mux_041:src_endofpacket -> fifo_qb_p1_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p1_out_agent_m0_readdata;                                             // fifo_qb_p1_out_translator:uav_readdata -> fifo_qb_p1_out_agent:m0_readdata
	wire          fifo_qb_p1_out_agent_m0_waitrequest;                                          // fifo_qb_p1_out_translator:uav_waitrequest -> fifo_qb_p1_out_agent:m0_waitrequest
	wire          fifo_qb_p1_out_agent_m0_debugaccess;                                          // fifo_qb_p1_out_agent:m0_debugaccess -> fifo_qb_p1_out_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p1_out_agent_m0_address;                                              // fifo_qb_p1_out_agent:m0_address -> fifo_qb_p1_out_translator:uav_address
	wire    [3:0] fifo_qb_p1_out_agent_m0_byteenable;                                           // fifo_qb_p1_out_agent:m0_byteenable -> fifo_qb_p1_out_translator:uav_byteenable
	wire          fifo_qb_p1_out_agent_m0_read;                                                 // fifo_qb_p1_out_agent:m0_read -> fifo_qb_p1_out_translator:uav_read
	wire          fifo_qb_p1_out_agent_m0_readdatavalid;                                        // fifo_qb_p1_out_translator:uav_readdatavalid -> fifo_qb_p1_out_agent:m0_readdatavalid
	wire          fifo_qb_p1_out_agent_m0_lock;                                                 // fifo_qb_p1_out_agent:m0_lock -> fifo_qb_p1_out_translator:uav_lock
	wire   [31:0] fifo_qb_p1_out_agent_m0_writedata;                                            // fifo_qb_p1_out_agent:m0_writedata -> fifo_qb_p1_out_translator:uav_writedata
	wire          fifo_qb_p1_out_agent_m0_write;                                                // fifo_qb_p1_out_agent:m0_write -> fifo_qb_p1_out_translator:uav_write
	wire    [2:0] fifo_qb_p1_out_agent_m0_burstcount;                                           // fifo_qb_p1_out_agent:m0_burstcount -> fifo_qb_p1_out_translator:uav_burstcount
	wire          fifo_qb_p1_out_agent_rf_source_valid;                                         // fifo_qb_p1_out_agent:rf_source_valid -> fifo_qb_p1_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p1_out_agent_rf_source_data;                                          // fifo_qb_p1_out_agent:rf_source_data -> fifo_qb_p1_out_agent_rsp_fifo:in_data
	wire          fifo_qb_p1_out_agent_rf_source_ready;                                         // fifo_qb_p1_out_agent_rsp_fifo:in_ready -> fifo_qb_p1_out_agent:rf_source_ready
	wire          fifo_qb_p1_out_agent_rf_source_startofpacket;                                 // fifo_qb_p1_out_agent:rf_source_startofpacket -> fifo_qb_p1_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p1_out_agent_rf_source_endofpacket;                                   // fifo_qb_p1_out_agent:rf_source_endofpacket -> fifo_qb_p1_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p1_out_agent_rsp_fifo_out_valid;                                      // fifo_qb_p1_out_agent_rsp_fifo:out_valid -> fifo_qb_p1_out_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p1_out_agent_rsp_fifo_out_data;                                       // fifo_qb_p1_out_agent_rsp_fifo:out_data -> fifo_qb_p1_out_agent:rf_sink_data
	wire          fifo_qb_p1_out_agent_rsp_fifo_out_ready;                                      // fifo_qb_p1_out_agent:rf_sink_ready -> fifo_qb_p1_out_agent_rsp_fifo:out_ready
	wire          fifo_qb_p1_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qb_p1_out_agent_rsp_fifo:out_startofpacket -> fifo_qb_p1_out_agent:rf_sink_startofpacket
	wire          fifo_qb_p1_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qb_p1_out_agent_rsp_fifo:out_endofpacket -> fifo_qb_p1_out_agent:rf_sink_endofpacket
	wire          cmd_mux_042_src_valid;                                                        // cmd_mux_042:src_valid -> fifo_qb_p1_out_agent:cp_valid
	wire  [109:0] cmd_mux_042_src_data;                                                         // cmd_mux_042:src_data -> fifo_qb_p1_out_agent:cp_data
	wire          cmd_mux_042_src_ready;                                                        // fifo_qb_p1_out_agent:cp_ready -> cmd_mux_042:src_ready
	wire   [49:0] cmd_mux_042_src_channel;                                                      // cmd_mux_042:src_channel -> fifo_qb_p1_out_agent:cp_channel
	wire          cmd_mux_042_src_startofpacket;                                                // cmd_mux_042:src_startofpacket -> fifo_qb_p1_out_agent:cp_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                  // cmd_mux_042:src_endofpacket -> fifo_qb_p1_out_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p1_in_agent_m0_readdata;                                              // fifo_qb_p1_in_translator:uav_readdata -> fifo_qb_p1_in_agent:m0_readdata
	wire          fifo_qb_p1_in_agent_m0_waitrequest;                                           // fifo_qb_p1_in_translator:uav_waitrequest -> fifo_qb_p1_in_agent:m0_waitrequest
	wire          fifo_qb_p1_in_agent_m0_debugaccess;                                           // fifo_qb_p1_in_agent:m0_debugaccess -> fifo_qb_p1_in_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p1_in_agent_m0_address;                                               // fifo_qb_p1_in_agent:m0_address -> fifo_qb_p1_in_translator:uav_address
	wire    [3:0] fifo_qb_p1_in_agent_m0_byteenable;                                            // fifo_qb_p1_in_agent:m0_byteenable -> fifo_qb_p1_in_translator:uav_byteenable
	wire          fifo_qb_p1_in_agent_m0_read;                                                  // fifo_qb_p1_in_agent:m0_read -> fifo_qb_p1_in_translator:uav_read
	wire          fifo_qb_p1_in_agent_m0_readdatavalid;                                         // fifo_qb_p1_in_translator:uav_readdatavalid -> fifo_qb_p1_in_agent:m0_readdatavalid
	wire          fifo_qb_p1_in_agent_m0_lock;                                                  // fifo_qb_p1_in_agent:m0_lock -> fifo_qb_p1_in_translator:uav_lock
	wire   [31:0] fifo_qb_p1_in_agent_m0_writedata;                                             // fifo_qb_p1_in_agent:m0_writedata -> fifo_qb_p1_in_translator:uav_writedata
	wire          fifo_qb_p1_in_agent_m0_write;                                                 // fifo_qb_p1_in_agent:m0_write -> fifo_qb_p1_in_translator:uav_write
	wire    [2:0] fifo_qb_p1_in_agent_m0_burstcount;                                            // fifo_qb_p1_in_agent:m0_burstcount -> fifo_qb_p1_in_translator:uav_burstcount
	wire          fifo_qb_p1_in_agent_rf_source_valid;                                          // fifo_qb_p1_in_agent:rf_source_valid -> fifo_qb_p1_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p1_in_agent_rf_source_data;                                           // fifo_qb_p1_in_agent:rf_source_data -> fifo_qb_p1_in_agent_rsp_fifo:in_data
	wire          fifo_qb_p1_in_agent_rf_source_ready;                                          // fifo_qb_p1_in_agent_rsp_fifo:in_ready -> fifo_qb_p1_in_agent:rf_source_ready
	wire          fifo_qb_p1_in_agent_rf_source_startofpacket;                                  // fifo_qb_p1_in_agent:rf_source_startofpacket -> fifo_qb_p1_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p1_in_agent_rf_source_endofpacket;                                    // fifo_qb_p1_in_agent:rf_source_endofpacket -> fifo_qb_p1_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p1_in_agent_rsp_fifo_out_valid;                                       // fifo_qb_p1_in_agent_rsp_fifo:out_valid -> fifo_qb_p1_in_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p1_in_agent_rsp_fifo_out_data;                                        // fifo_qb_p1_in_agent_rsp_fifo:out_data -> fifo_qb_p1_in_agent:rf_sink_data
	wire          fifo_qb_p1_in_agent_rsp_fifo_out_ready;                                       // fifo_qb_p1_in_agent:rf_sink_ready -> fifo_qb_p1_in_agent_rsp_fifo:out_ready
	wire          fifo_qb_p1_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qb_p1_in_agent_rsp_fifo:out_startofpacket -> fifo_qb_p1_in_agent:rf_sink_startofpacket
	wire          fifo_qb_p1_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qb_p1_in_agent_rsp_fifo:out_endofpacket -> fifo_qb_p1_in_agent:rf_sink_endofpacket
	wire          cmd_mux_043_src_valid;                                                        // cmd_mux_043:src_valid -> fifo_qb_p1_in_agent:cp_valid
	wire  [109:0] cmd_mux_043_src_data;                                                         // cmd_mux_043:src_data -> fifo_qb_p1_in_agent:cp_data
	wire          cmd_mux_043_src_ready;                                                        // fifo_qb_p1_in_agent:cp_ready -> cmd_mux_043:src_ready
	wire   [49:0] cmd_mux_043_src_channel;                                                      // cmd_mux_043:src_channel -> fifo_qb_p1_in_agent:cp_channel
	wire          cmd_mux_043_src_startofpacket;                                                // cmd_mux_043:src_startofpacket -> fifo_qb_p1_in_agent:cp_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                  // cmd_mux_043:src_endofpacket -> fifo_qb_p1_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p1_out_agent_m0_readdata;                                             // fifo_qa_p1_out_translator:uav_readdata -> fifo_qa_p1_out_agent:m0_readdata
	wire          fifo_qa_p1_out_agent_m0_waitrequest;                                          // fifo_qa_p1_out_translator:uav_waitrequest -> fifo_qa_p1_out_agent:m0_waitrequest
	wire          fifo_qa_p1_out_agent_m0_debugaccess;                                          // fifo_qa_p1_out_agent:m0_debugaccess -> fifo_qa_p1_out_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p1_out_agent_m0_address;                                              // fifo_qa_p1_out_agent:m0_address -> fifo_qa_p1_out_translator:uav_address
	wire    [3:0] fifo_qa_p1_out_agent_m0_byteenable;                                           // fifo_qa_p1_out_agent:m0_byteenable -> fifo_qa_p1_out_translator:uav_byteenable
	wire          fifo_qa_p1_out_agent_m0_read;                                                 // fifo_qa_p1_out_agent:m0_read -> fifo_qa_p1_out_translator:uav_read
	wire          fifo_qa_p1_out_agent_m0_readdatavalid;                                        // fifo_qa_p1_out_translator:uav_readdatavalid -> fifo_qa_p1_out_agent:m0_readdatavalid
	wire          fifo_qa_p1_out_agent_m0_lock;                                                 // fifo_qa_p1_out_agent:m0_lock -> fifo_qa_p1_out_translator:uav_lock
	wire   [31:0] fifo_qa_p1_out_agent_m0_writedata;                                            // fifo_qa_p1_out_agent:m0_writedata -> fifo_qa_p1_out_translator:uav_writedata
	wire          fifo_qa_p1_out_agent_m0_write;                                                // fifo_qa_p1_out_agent:m0_write -> fifo_qa_p1_out_translator:uav_write
	wire    [2:0] fifo_qa_p1_out_agent_m0_burstcount;                                           // fifo_qa_p1_out_agent:m0_burstcount -> fifo_qa_p1_out_translator:uav_burstcount
	wire          fifo_qa_p1_out_agent_rf_source_valid;                                         // fifo_qa_p1_out_agent:rf_source_valid -> fifo_qa_p1_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p1_out_agent_rf_source_data;                                          // fifo_qa_p1_out_agent:rf_source_data -> fifo_qa_p1_out_agent_rsp_fifo:in_data
	wire          fifo_qa_p1_out_agent_rf_source_ready;                                         // fifo_qa_p1_out_agent_rsp_fifo:in_ready -> fifo_qa_p1_out_agent:rf_source_ready
	wire          fifo_qa_p1_out_agent_rf_source_startofpacket;                                 // fifo_qa_p1_out_agent:rf_source_startofpacket -> fifo_qa_p1_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p1_out_agent_rf_source_endofpacket;                                   // fifo_qa_p1_out_agent:rf_source_endofpacket -> fifo_qa_p1_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p1_out_agent_rsp_fifo_out_valid;                                      // fifo_qa_p1_out_agent_rsp_fifo:out_valid -> fifo_qa_p1_out_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p1_out_agent_rsp_fifo_out_data;                                       // fifo_qa_p1_out_agent_rsp_fifo:out_data -> fifo_qa_p1_out_agent:rf_sink_data
	wire          fifo_qa_p1_out_agent_rsp_fifo_out_ready;                                      // fifo_qa_p1_out_agent:rf_sink_ready -> fifo_qa_p1_out_agent_rsp_fifo:out_ready
	wire          fifo_qa_p1_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qa_p1_out_agent_rsp_fifo:out_startofpacket -> fifo_qa_p1_out_agent:rf_sink_startofpacket
	wire          fifo_qa_p1_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qa_p1_out_agent_rsp_fifo:out_endofpacket -> fifo_qa_p1_out_agent:rf_sink_endofpacket
	wire          cmd_mux_044_src_valid;                                                        // cmd_mux_044:src_valid -> fifo_qa_p1_out_agent:cp_valid
	wire  [109:0] cmd_mux_044_src_data;                                                         // cmd_mux_044:src_data -> fifo_qa_p1_out_agent:cp_data
	wire          cmd_mux_044_src_ready;                                                        // fifo_qa_p1_out_agent:cp_ready -> cmd_mux_044:src_ready
	wire   [49:0] cmd_mux_044_src_channel;                                                      // cmd_mux_044:src_channel -> fifo_qa_p1_out_agent:cp_channel
	wire          cmd_mux_044_src_startofpacket;                                                // cmd_mux_044:src_startofpacket -> fifo_qa_p1_out_agent:cp_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                  // cmd_mux_044:src_endofpacket -> fifo_qa_p1_out_agent:cp_endofpacket
	wire   [31:0] fifo_qc_p3_in_agent_m0_readdata;                                              // fifo_qc_p3_in_translator:uav_readdata -> fifo_qc_p3_in_agent:m0_readdata
	wire          fifo_qc_p3_in_agent_m0_waitrequest;                                           // fifo_qc_p3_in_translator:uav_waitrequest -> fifo_qc_p3_in_agent:m0_waitrequest
	wire          fifo_qc_p3_in_agent_m0_debugaccess;                                           // fifo_qc_p3_in_agent:m0_debugaccess -> fifo_qc_p3_in_translator:uav_debugaccess
	wire   [27:0] fifo_qc_p3_in_agent_m0_address;                                               // fifo_qc_p3_in_agent:m0_address -> fifo_qc_p3_in_translator:uav_address
	wire    [3:0] fifo_qc_p3_in_agent_m0_byteenable;                                            // fifo_qc_p3_in_agent:m0_byteenable -> fifo_qc_p3_in_translator:uav_byteenable
	wire          fifo_qc_p3_in_agent_m0_read;                                                  // fifo_qc_p3_in_agent:m0_read -> fifo_qc_p3_in_translator:uav_read
	wire          fifo_qc_p3_in_agent_m0_readdatavalid;                                         // fifo_qc_p3_in_translator:uav_readdatavalid -> fifo_qc_p3_in_agent:m0_readdatavalid
	wire          fifo_qc_p3_in_agent_m0_lock;                                                  // fifo_qc_p3_in_agent:m0_lock -> fifo_qc_p3_in_translator:uav_lock
	wire   [31:0] fifo_qc_p3_in_agent_m0_writedata;                                             // fifo_qc_p3_in_agent:m0_writedata -> fifo_qc_p3_in_translator:uav_writedata
	wire          fifo_qc_p3_in_agent_m0_write;                                                 // fifo_qc_p3_in_agent:m0_write -> fifo_qc_p3_in_translator:uav_write
	wire    [2:0] fifo_qc_p3_in_agent_m0_burstcount;                                            // fifo_qc_p3_in_agent:m0_burstcount -> fifo_qc_p3_in_translator:uav_burstcount
	wire          fifo_qc_p3_in_agent_rf_source_valid;                                          // fifo_qc_p3_in_agent:rf_source_valid -> fifo_qc_p3_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qc_p3_in_agent_rf_source_data;                                           // fifo_qc_p3_in_agent:rf_source_data -> fifo_qc_p3_in_agent_rsp_fifo:in_data
	wire          fifo_qc_p3_in_agent_rf_source_ready;                                          // fifo_qc_p3_in_agent_rsp_fifo:in_ready -> fifo_qc_p3_in_agent:rf_source_ready
	wire          fifo_qc_p3_in_agent_rf_source_startofpacket;                                  // fifo_qc_p3_in_agent:rf_source_startofpacket -> fifo_qc_p3_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qc_p3_in_agent_rf_source_endofpacket;                                    // fifo_qc_p3_in_agent:rf_source_endofpacket -> fifo_qc_p3_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qc_p3_in_agent_rsp_fifo_out_valid;                                       // fifo_qc_p3_in_agent_rsp_fifo:out_valid -> fifo_qc_p3_in_agent:rf_sink_valid
	wire  [110:0] fifo_qc_p3_in_agent_rsp_fifo_out_data;                                        // fifo_qc_p3_in_agent_rsp_fifo:out_data -> fifo_qc_p3_in_agent:rf_sink_data
	wire          fifo_qc_p3_in_agent_rsp_fifo_out_ready;                                       // fifo_qc_p3_in_agent:rf_sink_ready -> fifo_qc_p3_in_agent_rsp_fifo:out_ready
	wire          fifo_qc_p3_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qc_p3_in_agent_rsp_fifo:out_startofpacket -> fifo_qc_p3_in_agent:rf_sink_startofpacket
	wire          fifo_qc_p3_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qc_p3_in_agent_rsp_fifo:out_endofpacket -> fifo_qc_p3_in_agent:rf_sink_endofpacket
	wire          cmd_mux_045_src_valid;                                                        // cmd_mux_045:src_valid -> fifo_qc_p3_in_agent:cp_valid
	wire  [109:0] cmd_mux_045_src_data;                                                         // cmd_mux_045:src_data -> fifo_qc_p3_in_agent:cp_data
	wire          cmd_mux_045_src_ready;                                                        // fifo_qc_p3_in_agent:cp_ready -> cmd_mux_045:src_ready
	wire   [49:0] cmd_mux_045_src_channel;                                                      // cmd_mux_045:src_channel -> fifo_qc_p3_in_agent:cp_channel
	wire          cmd_mux_045_src_startofpacket;                                                // cmd_mux_045:src_startofpacket -> fifo_qc_p3_in_agent:cp_startofpacket
	wire          cmd_mux_045_src_endofpacket;                                                  // cmd_mux_045:src_endofpacket -> fifo_qc_p3_in_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p3_in_csr_agent_m0_readdata;                                          // fifo_qb_p3_in_csr_translator:uav_readdata -> fifo_qb_p3_in_csr_agent:m0_readdata
	wire          fifo_qb_p3_in_csr_agent_m0_waitrequest;                                       // fifo_qb_p3_in_csr_translator:uav_waitrequest -> fifo_qb_p3_in_csr_agent:m0_waitrequest
	wire          fifo_qb_p3_in_csr_agent_m0_debugaccess;                                       // fifo_qb_p3_in_csr_agent:m0_debugaccess -> fifo_qb_p3_in_csr_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p3_in_csr_agent_m0_address;                                           // fifo_qb_p3_in_csr_agent:m0_address -> fifo_qb_p3_in_csr_translator:uav_address
	wire    [3:0] fifo_qb_p3_in_csr_agent_m0_byteenable;                                        // fifo_qb_p3_in_csr_agent:m0_byteenable -> fifo_qb_p3_in_csr_translator:uav_byteenable
	wire          fifo_qb_p3_in_csr_agent_m0_read;                                              // fifo_qb_p3_in_csr_agent:m0_read -> fifo_qb_p3_in_csr_translator:uav_read
	wire          fifo_qb_p3_in_csr_agent_m0_readdatavalid;                                     // fifo_qb_p3_in_csr_translator:uav_readdatavalid -> fifo_qb_p3_in_csr_agent:m0_readdatavalid
	wire          fifo_qb_p3_in_csr_agent_m0_lock;                                              // fifo_qb_p3_in_csr_agent:m0_lock -> fifo_qb_p3_in_csr_translator:uav_lock
	wire   [31:0] fifo_qb_p3_in_csr_agent_m0_writedata;                                         // fifo_qb_p3_in_csr_agent:m0_writedata -> fifo_qb_p3_in_csr_translator:uav_writedata
	wire          fifo_qb_p3_in_csr_agent_m0_write;                                             // fifo_qb_p3_in_csr_agent:m0_write -> fifo_qb_p3_in_csr_translator:uav_write
	wire    [2:0] fifo_qb_p3_in_csr_agent_m0_burstcount;                                        // fifo_qb_p3_in_csr_agent:m0_burstcount -> fifo_qb_p3_in_csr_translator:uav_burstcount
	wire          fifo_qb_p3_in_csr_agent_rf_source_valid;                                      // fifo_qb_p3_in_csr_agent:rf_source_valid -> fifo_qb_p3_in_csr_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p3_in_csr_agent_rf_source_data;                                       // fifo_qb_p3_in_csr_agent:rf_source_data -> fifo_qb_p3_in_csr_agent_rsp_fifo:in_data
	wire          fifo_qb_p3_in_csr_agent_rf_source_ready;                                      // fifo_qb_p3_in_csr_agent_rsp_fifo:in_ready -> fifo_qb_p3_in_csr_agent:rf_source_ready
	wire          fifo_qb_p3_in_csr_agent_rf_source_startofpacket;                              // fifo_qb_p3_in_csr_agent:rf_source_startofpacket -> fifo_qb_p3_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p3_in_csr_agent_rf_source_endofpacket;                                // fifo_qb_p3_in_csr_agent:rf_source_endofpacket -> fifo_qb_p3_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p3_in_csr_agent_rsp_fifo_out_valid;                                   // fifo_qb_p3_in_csr_agent_rsp_fifo:out_valid -> fifo_qb_p3_in_csr_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p3_in_csr_agent_rsp_fifo_out_data;                                    // fifo_qb_p3_in_csr_agent_rsp_fifo:out_data -> fifo_qb_p3_in_csr_agent:rf_sink_data
	wire          fifo_qb_p3_in_csr_agent_rsp_fifo_out_ready;                                   // fifo_qb_p3_in_csr_agent:rf_sink_ready -> fifo_qb_p3_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_qb_p3_in_csr_agent_rsp_fifo_out_startofpacket;                           // fifo_qb_p3_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_qb_p3_in_csr_agent:rf_sink_startofpacket
	wire          fifo_qb_p3_in_csr_agent_rsp_fifo_out_endofpacket;                             // fifo_qb_p3_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_qb_p3_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_046_src_valid;                                                        // cmd_mux_046:src_valid -> fifo_qb_p3_in_csr_agent:cp_valid
	wire  [109:0] cmd_mux_046_src_data;                                                         // cmd_mux_046:src_data -> fifo_qb_p3_in_csr_agent:cp_data
	wire          cmd_mux_046_src_ready;                                                        // fifo_qb_p3_in_csr_agent:cp_ready -> cmd_mux_046:src_ready
	wire   [49:0] cmd_mux_046_src_channel;                                                      // cmd_mux_046:src_channel -> fifo_qb_p3_in_csr_agent:cp_channel
	wire          cmd_mux_046_src_startofpacket;                                                // cmd_mux_046:src_startofpacket -> fifo_qb_p3_in_csr_agent:cp_startofpacket
	wire          cmd_mux_046_src_endofpacket;                                                  // cmd_mux_046:src_endofpacket -> fifo_qb_p3_in_csr_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p3_out_agent_m0_readdata;                                             // fifo_qb_p3_out_translator:uav_readdata -> fifo_qb_p3_out_agent:m0_readdata
	wire          fifo_qb_p3_out_agent_m0_waitrequest;                                          // fifo_qb_p3_out_translator:uav_waitrequest -> fifo_qb_p3_out_agent:m0_waitrequest
	wire          fifo_qb_p3_out_agent_m0_debugaccess;                                          // fifo_qb_p3_out_agent:m0_debugaccess -> fifo_qb_p3_out_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p3_out_agent_m0_address;                                              // fifo_qb_p3_out_agent:m0_address -> fifo_qb_p3_out_translator:uav_address
	wire    [3:0] fifo_qb_p3_out_agent_m0_byteenable;                                           // fifo_qb_p3_out_agent:m0_byteenable -> fifo_qb_p3_out_translator:uav_byteenable
	wire          fifo_qb_p3_out_agent_m0_read;                                                 // fifo_qb_p3_out_agent:m0_read -> fifo_qb_p3_out_translator:uav_read
	wire          fifo_qb_p3_out_agent_m0_readdatavalid;                                        // fifo_qb_p3_out_translator:uav_readdatavalid -> fifo_qb_p3_out_agent:m0_readdatavalid
	wire          fifo_qb_p3_out_agent_m0_lock;                                                 // fifo_qb_p3_out_agent:m0_lock -> fifo_qb_p3_out_translator:uav_lock
	wire   [31:0] fifo_qb_p3_out_agent_m0_writedata;                                            // fifo_qb_p3_out_agent:m0_writedata -> fifo_qb_p3_out_translator:uav_writedata
	wire          fifo_qb_p3_out_agent_m0_write;                                                // fifo_qb_p3_out_agent:m0_write -> fifo_qb_p3_out_translator:uav_write
	wire    [2:0] fifo_qb_p3_out_agent_m0_burstcount;                                           // fifo_qb_p3_out_agent:m0_burstcount -> fifo_qb_p3_out_translator:uav_burstcount
	wire          fifo_qb_p3_out_agent_rf_source_valid;                                         // fifo_qb_p3_out_agent:rf_source_valid -> fifo_qb_p3_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p3_out_agent_rf_source_data;                                          // fifo_qb_p3_out_agent:rf_source_data -> fifo_qb_p3_out_agent_rsp_fifo:in_data
	wire          fifo_qb_p3_out_agent_rf_source_ready;                                         // fifo_qb_p3_out_agent_rsp_fifo:in_ready -> fifo_qb_p3_out_agent:rf_source_ready
	wire          fifo_qb_p3_out_agent_rf_source_startofpacket;                                 // fifo_qb_p3_out_agent:rf_source_startofpacket -> fifo_qb_p3_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p3_out_agent_rf_source_endofpacket;                                   // fifo_qb_p3_out_agent:rf_source_endofpacket -> fifo_qb_p3_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p3_out_agent_rsp_fifo_out_valid;                                      // fifo_qb_p3_out_agent_rsp_fifo:out_valid -> fifo_qb_p3_out_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p3_out_agent_rsp_fifo_out_data;                                       // fifo_qb_p3_out_agent_rsp_fifo:out_data -> fifo_qb_p3_out_agent:rf_sink_data
	wire          fifo_qb_p3_out_agent_rsp_fifo_out_ready;                                      // fifo_qb_p3_out_agent:rf_sink_ready -> fifo_qb_p3_out_agent_rsp_fifo:out_ready
	wire          fifo_qb_p3_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qb_p3_out_agent_rsp_fifo:out_startofpacket -> fifo_qb_p3_out_agent:rf_sink_startofpacket
	wire          fifo_qb_p3_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qb_p3_out_agent_rsp_fifo:out_endofpacket -> fifo_qb_p3_out_agent:rf_sink_endofpacket
	wire          cmd_mux_047_src_valid;                                                        // cmd_mux_047:src_valid -> fifo_qb_p3_out_agent:cp_valid
	wire  [109:0] cmd_mux_047_src_data;                                                         // cmd_mux_047:src_data -> fifo_qb_p3_out_agent:cp_data
	wire          cmd_mux_047_src_ready;                                                        // fifo_qb_p3_out_agent:cp_ready -> cmd_mux_047:src_ready
	wire   [49:0] cmd_mux_047_src_channel;                                                      // cmd_mux_047:src_channel -> fifo_qb_p3_out_agent:cp_channel
	wire          cmd_mux_047_src_startofpacket;                                                // cmd_mux_047:src_startofpacket -> fifo_qb_p3_out_agent:cp_startofpacket
	wire          cmd_mux_047_src_endofpacket;                                                  // cmd_mux_047:src_endofpacket -> fifo_qb_p3_out_agent:cp_endofpacket
	wire   [31:0] fifo_qb_p3_in_agent_m0_readdata;                                              // fifo_qb_p3_in_translator:uav_readdata -> fifo_qb_p3_in_agent:m0_readdata
	wire          fifo_qb_p3_in_agent_m0_waitrequest;                                           // fifo_qb_p3_in_translator:uav_waitrequest -> fifo_qb_p3_in_agent:m0_waitrequest
	wire          fifo_qb_p3_in_agent_m0_debugaccess;                                           // fifo_qb_p3_in_agent:m0_debugaccess -> fifo_qb_p3_in_translator:uav_debugaccess
	wire   [27:0] fifo_qb_p3_in_agent_m0_address;                                               // fifo_qb_p3_in_agent:m0_address -> fifo_qb_p3_in_translator:uav_address
	wire    [3:0] fifo_qb_p3_in_agent_m0_byteenable;                                            // fifo_qb_p3_in_agent:m0_byteenable -> fifo_qb_p3_in_translator:uav_byteenable
	wire          fifo_qb_p3_in_agent_m0_read;                                                  // fifo_qb_p3_in_agent:m0_read -> fifo_qb_p3_in_translator:uav_read
	wire          fifo_qb_p3_in_agent_m0_readdatavalid;                                         // fifo_qb_p3_in_translator:uav_readdatavalid -> fifo_qb_p3_in_agent:m0_readdatavalid
	wire          fifo_qb_p3_in_agent_m0_lock;                                                  // fifo_qb_p3_in_agent:m0_lock -> fifo_qb_p3_in_translator:uav_lock
	wire   [31:0] fifo_qb_p3_in_agent_m0_writedata;                                             // fifo_qb_p3_in_agent:m0_writedata -> fifo_qb_p3_in_translator:uav_writedata
	wire          fifo_qb_p3_in_agent_m0_write;                                                 // fifo_qb_p3_in_agent:m0_write -> fifo_qb_p3_in_translator:uav_write
	wire    [2:0] fifo_qb_p3_in_agent_m0_burstcount;                                            // fifo_qb_p3_in_agent:m0_burstcount -> fifo_qb_p3_in_translator:uav_burstcount
	wire          fifo_qb_p3_in_agent_rf_source_valid;                                          // fifo_qb_p3_in_agent:rf_source_valid -> fifo_qb_p3_in_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qb_p3_in_agent_rf_source_data;                                           // fifo_qb_p3_in_agent:rf_source_data -> fifo_qb_p3_in_agent_rsp_fifo:in_data
	wire          fifo_qb_p3_in_agent_rf_source_ready;                                          // fifo_qb_p3_in_agent_rsp_fifo:in_ready -> fifo_qb_p3_in_agent:rf_source_ready
	wire          fifo_qb_p3_in_agent_rf_source_startofpacket;                                  // fifo_qb_p3_in_agent:rf_source_startofpacket -> fifo_qb_p3_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_qb_p3_in_agent_rf_source_endofpacket;                                    // fifo_qb_p3_in_agent:rf_source_endofpacket -> fifo_qb_p3_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_qb_p3_in_agent_rsp_fifo_out_valid;                                       // fifo_qb_p3_in_agent_rsp_fifo:out_valid -> fifo_qb_p3_in_agent:rf_sink_valid
	wire  [110:0] fifo_qb_p3_in_agent_rsp_fifo_out_data;                                        // fifo_qb_p3_in_agent_rsp_fifo:out_data -> fifo_qb_p3_in_agent:rf_sink_data
	wire          fifo_qb_p3_in_agent_rsp_fifo_out_ready;                                       // fifo_qb_p3_in_agent:rf_sink_ready -> fifo_qb_p3_in_agent_rsp_fifo:out_ready
	wire          fifo_qb_p3_in_agent_rsp_fifo_out_startofpacket;                               // fifo_qb_p3_in_agent_rsp_fifo:out_startofpacket -> fifo_qb_p3_in_agent:rf_sink_startofpacket
	wire          fifo_qb_p3_in_agent_rsp_fifo_out_endofpacket;                                 // fifo_qb_p3_in_agent_rsp_fifo:out_endofpacket -> fifo_qb_p3_in_agent:rf_sink_endofpacket
	wire          cmd_mux_048_src_valid;                                                        // cmd_mux_048:src_valid -> fifo_qb_p3_in_agent:cp_valid
	wire  [109:0] cmd_mux_048_src_data;                                                         // cmd_mux_048:src_data -> fifo_qb_p3_in_agent:cp_data
	wire          cmd_mux_048_src_ready;                                                        // fifo_qb_p3_in_agent:cp_ready -> cmd_mux_048:src_ready
	wire   [49:0] cmd_mux_048_src_channel;                                                      // cmd_mux_048:src_channel -> fifo_qb_p3_in_agent:cp_channel
	wire          cmd_mux_048_src_startofpacket;                                                // cmd_mux_048:src_startofpacket -> fifo_qb_p3_in_agent:cp_startofpacket
	wire          cmd_mux_048_src_endofpacket;                                                  // cmd_mux_048:src_endofpacket -> fifo_qb_p3_in_agent:cp_endofpacket
	wire   [31:0] fifo_qa_p3_out_agent_m0_readdata;                                             // fifo_qa_p3_out_translator:uav_readdata -> fifo_qa_p3_out_agent:m0_readdata
	wire          fifo_qa_p3_out_agent_m0_waitrequest;                                          // fifo_qa_p3_out_translator:uav_waitrequest -> fifo_qa_p3_out_agent:m0_waitrequest
	wire          fifo_qa_p3_out_agent_m0_debugaccess;                                          // fifo_qa_p3_out_agent:m0_debugaccess -> fifo_qa_p3_out_translator:uav_debugaccess
	wire   [27:0] fifo_qa_p3_out_agent_m0_address;                                              // fifo_qa_p3_out_agent:m0_address -> fifo_qa_p3_out_translator:uav_address
	wire    [3:0] fifo_qa_p3_out_agent_m0_byteenable;                                           // fifo_qa_p3_out_agent:m0_byteenable -> fifo_qa_p3_out_translator:uav_byteenable
	wire          fifo_qa_p3_out_agent_m0_read;                                                 // fifo_qa_p3_out_agent:m0_read -> fifo_qa_p3_out_translator:uav_read
	wire          fifo_qa_p3_out_agent_m0_readdatavalid;                                        // fifo_qa_p3_out_translator:uav_readdatavalid -> fifo_qa_p3_out_agent:m0_readdatavalid
	wire          fifo_qa_p3_out_agent_m0_lock;                                                 // fifo_qa_p3_out_agent:m0_lock -> fifo_qa_p3_out_translator:uav_lock
	wire   [31:0] fifo_qa_p3_out_agent_m0_writedata;                                            // fifo_qa_p3_out_agent:m0_writedata -> fifo_qa_p3_out_translator:uav_writedata
	wire          fifo_qa_p3_out_agent_m0_write;                                                // fifo_qa_p3_out_agent:m0_write -> fifo_qa_p3_out_translator:uav_write
	wire    [2:0] fifo_qa_p3_out_agent_m0_burstcount;                                           // fifo_qa_p3_out_agent:m0_burstcount -> fifo_qa_p3_out_translator:uav_burstcount
	wire          fifo_qa_p3_out_agent_rf_source_valid;                                         // fifo_qa_p3_out_agent:rf_source_valid -> fifo_qa_p3_out_agent_rsp_fifo:in_valid
	wire  [110:0] fifo_qa_p3_out_agent_rf_source_data;                                          // fifo_qa_p3_out_agent:rf_source_data -> fifo_qa_p3_out_agent_rsp_fifo:in_data
	wire          fifo_qa_p3_out_agent_rf_source_ready;                                         // fifo_qa_p3_out_agent_rsp_fifo:in_ready -> fifo_qa_p3_out_agent:rf_source_ready
	wire          fifo_qa_p3_out_agent_rf_source_startofpacket;                                 // fifo_qa_p3_out_agent:rf_source_startofpacket -> fifo_qa_p3_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_qa_p3_out_agent_rf_source_endofpacket;                                   // fifo_qa_p3_out_agent:rf_source_endofpacket -> fifo_qa_p3_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_qa_p3_out_agent_rsp_fifo_out_valid;                                      // fifo_qa_p3_out_agent_rsp_fifo:out_valid -> fifo_qa_p3_out_agent:rf_sink_valid
	wire  [110:0] fifo_qa_p3_out_agent_rsp_fifo_out_data;                                       // fifo_qa_p3_out_agent_rsp_fifo:out_data -> fifo_qa_p3_out_agent:rf_sink_data
	wire          fifo_qa_p3_out_agent_rsp_fifo_out_ready;                                      // fifo_qa_p3_out_agent:rf_sink_ready -> fifo_qa_p3_out_agent_rsp_fifo:out_ready
	wire          fifo_qa_p3_out_agent_rsp_fifo_out_startofpacket;                              // fifo_qa_p3_out_agent_rsp_fifo:out_startofpacket -> fifo_qa_p3_out_agent:rf_sink_startofpacket
	wire          fifo_qa_p3_out_agent_rsp_fifo_out_endofpacket;                                // fifo_qa_p3_out_agent_rsp_fifo:out_endofpacket -> fifo_qa_p3_out_agent:rf_sink_endofpacket
	wire          cmd_mux_049_src_valid;                                                        // cmd_mux_049:src_valid -> fifo_qa_p3_out_agent:cp_valid
	wire  [109:0] cmd_mux_049_src_data;                                                         // cmd_mux_049:src_data -> fifo_qa_p3_out_agent:cp_data
	wire          cmd_mux_049_src_ready;                                                        // fifo_qa_p3_out_agent:cp_ready -> cmd_mux_049:src_ready
	wire   [49:0] cmd_mux_049_src_channel;                                                      // cmd_mux_049:src_channel -> fifo_qa_p3_out_agent:cp_channel
	wire          cmd_mux_049_src_startofpacket;                                                // cmd_mux_049:src_startofpacket -> fifo_qa_p3_out_agent:cp_startofpacket
	wire          cmd_mux_049_src_endofpacket;                                                  // cmd_mux_049:src_endofpacket -> fifo_qa_p3_out_agent:cp_endofpacket
	wire          cpu_1a_data_master_agent_cp_valid;                                            // cpu_1a_data_master_agent:cp_valid -> router:sink_valid
	wire  [109:0] cpu_1a_data_master_agent_cp_data;                                             // cpu_1a_data_master_agent:cp_data -> router:sink_data
	wire          cpu_1a_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_1a_data_master_agent:cp_ready
	wire          cpu_1a_data_master_agent_cp_startofpacket;                                    // cpu_1a_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_1a_data_master_agent_cp_endofpacket;                                      // cpu_1a_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [109:0] router_src_data;                                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                             // cmd_demux:sink_ready -> router:src_ready
	wire   [49:0] router_src_channel;                                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_1f_data_master_agent_cp_valid;                                            // cpu_1f_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] cpu_1f_data_master_agent_cp_data;                                             // cpu_1f_data_master_agent:cp_data -> router_001:sink_data
	wire          cpu_1f_data_master_agent_cp_ready;                                            // router_001:sink_ready -> cpu_1f_data_master_agent:cp_ready
	wire          cpu_1f_data_master_agent_cp_startofpacket;                                    // cpu_1f_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_1f_data_master_agent_cp_endofpacket;                                      // cpu_1f_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [109:0] router_001_src_data;                                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [49:0] router_001_src_channel;                                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1b_p1_mm_bridge_0_m0_agent:cp_valid -> router_002:sink_valid
	wire  [109:0] cpu_1b_p1_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1b_p1_mm_bridge_0_m0_agent:cp_data -> router_002:sink_data
	wire          cpu_1b_p1_mm_bridge_0_m0_agent_cp_ready;                                      // router_002:sink_ready -> CPU_1b_p1_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1b_p1_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1b_p1_mm_bridge_0_m0_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1b_p1_mm_bridge_0_m0_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          cpu_1e_mm_bridge_0_m0_agent_cp_valid;                                         // CPU_1e_mm_bridge_0_m0_agent:cp_valid -> router_003:sink_valid
	wire  [109:0] cpu_1e_mm_bridge_0_m0_agent_cp_data;                                          // CPU_1e_mm_bridge_0_m0_agent:cp_data -> router_003:sink_data
	wire          cpu_1e_mm_bridge_0_m0_agent_cp_ready;                                         // router_003:sink_ready -> CPU_1e_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1e_mm_bridge_0_m0_agent_cp_startofpacket;                                 // CPU_1e_mm_bridge_0_m0_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          cpu_1e_mm_bridge_0_m0_agent_cp_endofpacket;                                   // CPU_1e_mm_bridge_0_m0_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          cpu_1d_p1_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1d_p1_mm_bridge_0_m0_agent:cp_valid -> router_004:sink_valid
	wire  [109:0] cpu_1d_p1_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1d_p1_mm_bridge_0_m0_agent:cp_data -> router_004:sink_data
	wire          cpu_1d_p1_mm_bridge_0_m0_agent_cp_ready;                                      // router_004:sink_ready -> CPU_1d_p1_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1d_p1_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1d_p1_mm_bridge_0_m0_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          cpu_1d_p1_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1d_p1_mm_bridge_0_m0_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          cpu_1c_p1_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1c_p1_mm_bridge_0_m0_agent:cp_valid -> router_005:sink_valid
	wire  [109:0] cpu_1c_p1_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1c_p1_mm_bridge_0_m0_agent:cp_data -> router_005:sink_data
	wire          cpu_1c_p1_mm_bridge_0_m0_agent_cp_ready;                                      // router_005:sink_ready -> CPU_1c_p1_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1c_p1_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1c_p1_mm_bridge_0_m0_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          cpu_1c_p1_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1c_p1_mm_bridge_0_m0_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          cpu_1b_p2_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1b_p2_mm_bridge_0_m0_agent:cp_valid -> router_006:sink_valid
	wire  [109:0] cpu_1b_p2_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1b_p2_mm_bridge_0_m0_agent:cp_data -> router_006:sink_data
	wire          cpu_1b_p2_mm_bridge_0_m0_agent_cp_ready;                                      // router_006:sink_ready -> CPU_1b_p2_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1b_p2_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1b_p2_mm_bridge_0_m0_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          cpu_1b_p2_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1b_p2_mm_bridge_0_m0_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          cpu_1b_p3_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1b_p3_mm_bridge_0_m0_agent:cp_valid -> router_007:sink_valid
	wire  [109:0] cpu_1b_p3_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1b_p3_mm_bridge_0_m0_agent:cp_data -> router_007:sink_data
	wire          cpu_1b_p3_mm_bridge_0_m0_agent_cp_ready;                                      // router_007:sink_ready -> CPU_1b_p3_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1b_p3_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1b_p3_mm_bridge_0_m0_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          cpu_1b_p3_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1b_p3_mm_bridge_0_m0_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          cpu_1c_p2_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1c_p2_mm_bridge_0_m0_agent:cp_valid -> router_008:sink_valid
	wire  [109:0] cpu_1c_p2_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1c_p2_mm_bridge_0_m0_agent:cp_data -> router_008:sink_data
	wire          cpu_1c_p2_mm_bridge_0_m0_agent_cp_ready;                                      // router_008:sink_ready -> CPU_1c_p2_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1c_p2_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1c_p2_mm_bridge_0_m0_agent:cp_startofpacket -> router_008:sink_startofpacket
	wire          cpu_1c_p2_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1c_p2_mm_bridge_0_m0_agent:cp_endofpacket -> router_008:sink_endofpacket
	wire          cpu_1c_p3_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1c_p3_mm_bridge_0_m0_agent:cp_valid -> router_009:sink_valid
	wire  [109:0] cpu_1c_p3_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1c_p3_mm_bridge_0_m0_agent:cp_data -> router_009:sink_data
	wire          cpu_1c_p3_mm_bridge_0_m0_agent_cp_ready;                                      // router_009:sink_ready -> CPU_1c_p3_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1c_p3_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1c_p3_mm_bridge_0_m0_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          cpu_1c_p3_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1c_p3_mm_bridge_0_m0_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          cpu_1d_p2_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1d_p2_mm_bridge_0_m0_agent:cp_valid -> router_010:sink_valid
	wire  [109:0] cpu_1d_p2_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1d_p2_mm_bridge_0_m0_agent:cp_data -> router_010:sink_data
	wire          cpu_1d_p2_mm_bridge_0_m0_agent_cp_ready;                                      // router_010:sink_ready -> CPU_1d_p2_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1d_p2_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1d_p2_mm_bridge_0_m0_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          cpu_1d_p2_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1d_p2_mm_bridge_0_m0_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          cpu_1d_p3_mm_bridge_0_m0_agent_cp_valid;                                      // CPU_1d_p3_mm_bridge_0_m0_agent:cp_valid -> router_011:sink_valid
	wire  [109:0] cpu_1d_p3_mm_bridge_0_m0_agent_cp_data;                                       // CPU_1d_p3_mm_bridge_0_m0_agent:cp_data -> router_011:sink_data
	wire          cpu_1d_p3_mm_bridge_0_m0_agent_cp_ready;                                      // router_011:sink_ready -> CPU_1d_p3_mm_bridge_0_m0_agent:cp_ready
	wire          cpu_1d_p3_mm_bridge_0_m0_agent_cp_startofpacket;                              // CPU_1d_p3_mm_bridge_0_m0_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          cpu_1d_p3_mm_bridge_0_m0_agent_cp_endofpacket;                                // CPU_1d_p3_mm_bridge_0_m0_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          cpu_1f_instruction_master_agent_cp_valid;                                     // cpu_1f_instruction_master_agent:cp_valid -> router_012:sink_valid
	wire  [109:0] cpu_1f_instruction_master_agent_cp_data;                                      // cpu_1f_instruction_master_agent:cp_data -> router_012:sink_data
	wire          cpu_1f_instruction_master_agent_cp_ready;                                     // router_012:sink_ready -> cpu_1f_instruction_master_agent:cp_ready
	wire          cpu_1f_instruction_master_agent_cp_startofpacket;                             // cpu_1f_instruction_master_agent:cp_startofpacket -> router_012:sink_startofpacket
	wire          cpu_1f_instruction_master_agent_cp_endofpacket;                               // cpu_1f_instruction_master_agent:cp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                         // router_012:src_valid -> cmd_demux_012:sink_valid
	wire  [109:0] router_012_src_data;                                                          // router_012:src_data -> cmd_demux_012:sink_data
	wire          router_012_src_ready;                                                         // cmd_demux_012:sink_ready -> router_012:src_ready
	wire   [49:0] router_012_src_channel;                                                       // router_012:src_channel -> cmd_demux_012:sink_channel
	wire          router_012_src_startofpacket;                                                 // router_012:src_startofpacket -> cmd_demux_012:sink_startofpacket
	wire          router_012_src_endofpacket;                                                   // router_012:src_endofpacket -> cmd_demux_012:sink_endofpacket
	wire          cpu_1a_instruction_master_agent_cp_valid;                                     // cpu_1a_instruction_master_agent:cp_valid -> router_013:sink_valid
	wire  [109:0] cpu_1a_instruction_master_agent_cp_data;                                      // cpu_1a_instruction_master_agent:cp_data -> router_013:sink_data
	wire          cpu_1a_instruction_master_agent_cp_ready;                                     // router_013:sink_ready -> cpu_1a_instruction_master_agent:cp_ready
	wire          cpu_1a_instruction_master_agent_cp_startofpacket;                             // cpu_1a_instruction_master_agent:cp_startofpacket -> router_013:sink_startofpacket
	wire          cpu_1a_instruction_master_agent_cp_endofpacket;                               // cpu_1a_instruction_master_agent:cp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                         // router_013:src_valid -> cmd_demux_013:sink_valid
	wire  [109:0] router_013_src_data;                                                          // router_013:src_data -> cmd_demux_013:sink_data
	wire          router_013_src_ready;                                                         // cmd_demux_013:sink_ready -> router_013:src_ready
	wire   [49:0] router_013_src_channel;                                                       // router_013:src_channel -> cmd_demux_013:sink_channel
	wire          router_013_src_startofpacket;                                                 // router_013:src_startofpacket -> cmd_demux_013:sink_startofpacket
	wire          router_013_src_endofpacket;                                                   // router_013:src_endofpacket -> cmd_demux_013:sink_endofpacket
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_1a_avalon_jtag_slave_agent:rp_valid -> router_014:sink_valid
	wire  [109:0] jtag_uart_1a_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_1a_avalon_jtag_slave_agent:rp_data -> router_014:sink_data
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rp_ready;                                // router_014:sink_ready -> jtag_uart_1a_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_1a_avalon_jtag_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_1a_avalon_jtag_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                         // router_014:src_valid -> rsp_demux:sink_valid
	wire  [109:0] router_014_src_data;                                                          // router_014:src_data -> rsp_demux:sink_data
	wire          router_014_src_ready;                                                         // rsp_demux:sink_ready -> router_014:src_ready
	wire   [49:0] router_014_src_channel;                                                       // router_014:src_channel -> rsp_demux:sink_channel
	wire          router_014_src_startofpacket;                                                 // router_014:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_014_src_endofpacket;                                                   // router_014:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sys_id_1a_control_slave_agent_rp_valid;                                       // sys_id_1a_control_slave_agent:rp_valid -> router_015:sink_valid
	wire  [109:0] sys_id_1a_control_slave_agent_rp_data;                                        // sys_id_1a_control_slave_agent:rp_data -> router_015:sink_data
	wire          sys_id_1a_control_slave_agent_rp_ready;                                       // router_015:sink_ready -> sys_id_1a_control_slave_agent:rp_ready
	wire          sys_id_1a_control_slave_agent_rp_startofpacket;                               // sys_id_1a_control_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          sys_id_1a_control_slave_agent_rp_endofpacket;                                 // sys_id_1a_control_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                         // router_015:src_valid -> rsp_demux_001:sink_valid
	wire  [109:0] router_015_src_data;                                                          // router_015:src_data -> rsp_demux_001:sink_data
	wire          router_015_src_ready;                                                         // rsp_demux_001:sink_ready -> router_015:src_ready
	wire   [49:0] router_015_src_channel;                                                       // router_015:src_channel -> rsp_demux_001:sink_channel
	wire          router_015_src_startofpacket;                                                 // router_015:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_015_src_endofpacket;                                                   // router_015:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cpu_1a_debug_mem_slave_agent_rp_valid;                                        // cpu_1a_debug_mem_slave_agent:rp_valid -> router_016:sink_valid
	wire  [109:0] cpu_1a_debug_mem_slave_agent_rp_data;                                         // cpu_1a_debug_mem_slave_agent:rp_data -> router_016:sink_data
	wire          cpu_1a_debug_mem_slave_agent_rp_ready;                                        // router_016:sink_ready -> cpu_1a_debug_mem_slave_agent:rp_ready
	wire          cpu_1a_debug_mem_slave_agent_rp_startofpacket;                                // cpu_1a_debug_mem_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          cpu_1a_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_1a_debug_mem_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                         // router_016:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_016_src_data;                                                          // router_016:src_data -> rsp_demux_002:sink_data
	wire          router_016_src_ready;                                                         // rsp_demux_002:sink_ready -> router_016:src_ready
	wire   [49:0] router_016_src_channel;                                                       // router_016:src_channel -> rsp_demux_002:sink_channel
	wire          router_016_src_startofpacket;                                                 // router_016:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_016_src_endofpacket;                                                   // router_016:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          fifo_qa_p1_in_agent_rp_valid;                                                 // fifo_qa_p1_in_agent:rp_valid -> router_017:sink_valid
	wire  [109:0] fifo_qa_p1_in_agent_rp_data;                                                  // fifo_qa_p1_in_agent:rp_data -> router_017:sink_data
	wire          fifo_qa_p1_in_agent_rp_ready;                                                 // router_017:sink_ready -> fifo_qa_p1_in_agent:rp_ready
	wire          fifo_qa_p1_in_agent_rp_startofpacket;                                         // fifo_qa_p1_in_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          fifo_qa_p1_in_agent_rp_endofpacket;                                           // fifo_qa_p1_in_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                         // router_017:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_017_src_data;                                                          // router_017:src_data -> rsp_demux_003:sink_data
	wire          router_017_src_ready;                                                         // rsp_demux_003:sink_ready -> router_017:src_ready
	wire   [49:0] router_017_src_channel;                                                       // router_017:src_channel -> rsp_demux_003:sink_channel
	wire          router_017_src_startofpacket;                                                 // router_017:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_017_src_endofpacket;                                                   // router_017:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          fifo_qa_p2_in_agent_rp_valid;                                                 // fifo_qa_p2_in_agent:rp_valid -> router_018:sink_valid
	wire  [109:0] fifo_qa_p2_in_agent_rp_data;                                                  // fifo_qa_p2_in_agent:rp_data -> router_018:sink_data
	wire          fifo_qa_p2_in_agent_rp_ready;                                                 // router_018:sink_ready -> fifo_qa_p2_in_agent:rp_ready
	wire          fifo_qa_p2_in_agent_rp_startofpacket;                                         // fifo_qa_p2_in_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          fifo_qa_p2_in_agent_rp_endofpacket;                                           // fifo_qa_p2_in_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                         // router_018:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_018_src_data;                                                          // router_018:src_data -> rsp_demux_004:sink_data
	wire          router_018_src_ready;                                                         // rsp_demux_004:sink_ready -> router_018:src_ready
	wire   [49:0] router_018_src_channel;                                                       // router_018:src_channel -> rsp_demux_004:sink_channel
	wire          router_018_src_startofpacket;                                                 // router_018:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_018_src_endofpacket;                                                   // router_018:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          fifo_qa_p3_in_agent_rp_valid;                                                 // fifo_qa_p3_in_agent:rp_valid -> router_019:sink_valid
	wire  [109:0] fifo_qa_p3_in_agent_rp_data;                                                  // fifo_qa_p3_in_agent:rp_data -> router_019:sink_data
	wire          fifo_qa_p3_in_agent_rp_ready;                                                 // router_019:sink_ready -> fifo_qa_p3_in_agent:rp_ready
	wire          fifo_qa_p3_in_agent_rp_startofpacket;                                         // fifo_qa_p3_in_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          fifo_qa_p3_in_agent_rp_endofpacket;                                           // fifo_qa_p3_in_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                         // router_019:src_valid -> rsp_demux_005:sink_valid
	wire  [109:0] router_019_src_data;                                                          // router_019:src_data -> rsp_demux_005:sink_data
	wire          router_019_src_ready;                                                         // rsp_demux_005:sink_ready -> router_019:src_ready
	wire   [49:0] router_019_src_channel;                                                       // router_019:src_channel -> rsp_demux_005:sink_channel
	wire          router_019_src_startofpacket;                                                 // router_019:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_019_src_endofpacket;                                                   // router_019:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          fifo_qa_p1_in_csr_agent_rp_valid;                                             // fifo_qa_p1_in_csr_agent:rp_valid -> router_020:sink_valid
	wire  [109:0] fifo_qa_p1_in_csr_agent_rp_data;                                              // fifo_qa_p1_in_csr_agent:rp_data -> router_020:sink_data
	wire          fifo_qa_p1_in_csr_agent_rp_ready;                                             // router_020:sink_ready -> fifo_qa_p1_in_csr_agent:rp_ready
	wire          fifo_qa_p1_in_csr_agent_rp_startofpacket;                                     // fifo_qa_p1_in_csr_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          fifo_qa_p1_in_csr_agent_rp_endofpacket;                                       // fifo_qa_p1_in_csr_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                         // router_020:src_valid -> rsp_demux_006:sink_valid
	wire  [109:0] router_020_src_data;                                                          // router_020:src_data -> rsp_demux_006:sink_data
	wire          router_020_src_ready;                                                         // rsp_demux_006:sink_ready -> router_020:src_ready
	wire   [49:0] router_020_src_channel;                                                       // router_020:src_channel -> rsp_demux_006:sink_channel
	wire          router_020_src_startofpacket;                                                 // router_020:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_020_src_endofpacket;                                                   // router_020:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          fifo_qa_p2_in_csr_agent_rp_valid;                                             // fifo_qa_p2_in_csr_agent:rp_valid -> router_021:sink_valid
	wire  [109:0] fifo_qa_p2_in_csr_agent_rp_data;                                              // fifo_qa_p2_in_csr_agent:rp_data -> router_021:sink_data
	wire          fifo_qa_p2_in_csr_agent_rp_ready;                                             // router_021:sink_ready -> fifo_qa_p2_in_csr_agent:rp_ready
	wire          fifo_qa_p2_in_csr_agent_rp_startofpacket;                                     // fifo_qa_p2_in_csr_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          fifo_qa_p2_in_csr_agent_rp_endofpacket;                                       // fifo_qa_p2_in_csr_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                         // router_021:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_021_src_data;                                                          // router_021:src_data -> rsp_demux_007:sink_data
	wire          router_021_src_ready;                                                         // rsp_demux_007:sink_ready -> router_021:src_ready
	wire   [49:0] router_021_src_channel;                                                       // router_021:src_channel -> rsp_demux_007:sink_channel
	wire          router_021_src_startofpacket;                                                 // router_021:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_021_src_endofpacket;                                                   // router_021:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          fifo_qa_p3_in_csr_agent_rp_valid;                                             // fifo_qa_p3_in_csr_agent:rp_valid -> router_022:sink_valid
	wire  [109:0] fifo_qa_p3_in_csr_agent_rp_data;                                              // fifo_qa_p3_in_csr_agent:rp_data -> router_022:sink_data
	wire          fifo_qa_p3_in_csr_agent_rp_ready;                                             // router_022:sink_ready -> fifo_qa_p3_in_csr_agent:rp_ready
	wire          fifo_qa_p3_in_csr_agent_rp_startofpacket;                                     // fifo_qa_p3_in_csr_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          fifo_qa_p3_in_csr_agent_rp_endofpacket;                                       // fifo_qa_p3_in_csr_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                         // router_022:src_valid -> rsp_demux_008:sink_valid
	wire  [109:0] router_022_src_data;                                                          // router_022:src_data -> rsp_demux_008:sink_data
	wire          router_022_src_ready;                                                         // rsp_demux_008:sink_ready -> router_022:src_ready
	wire   [49:0] router_022_src_channel;                                                       // router_022:src_channel -> rsp_demux_008:sink_channel
	wire          router_022_src_startofpacket;                                                 // router_022:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_022_src_endofpacket;                                                   // router_022:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          pll_pll_slave_agent_rp_valid;                                                 // pll_pll_slave_agent:rp_valid -> router_023:sink_valid
	wire  [109:0] pll_pll_slave_agent_rp_data;                                                  // pll_pll_slave_agent:rp_data -> router_023:sink_data
	wire          pll_pll_slave_agent_rp_ready;                                                 // router_023:sink_ready -> pll_pll_slave_agent:rp_ready
	wire          pll_pll_slave_agent_rp_startofpacket;                                         // pll_pll_slave_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          pll_pll_slave_agent_rp_endofpacket;                                           // pll_pll_slave_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                         // router_023:src_valid -> rsp_demux_009:sink_valid
	wire  [109:0] router_023_src_data;                                                          // router_023:src_data -> rsp_demux_009:sink_data
	wire          router_023_src_ready;                                                         // rsp_demux_009:sink_ready -> router_023:src_ready
	wire   [49:0] router_023_src_channel;                                                       // router_023:src_channel -> rsp_demux_009:sink_channel
	wire          router_023_src_startofpacket;                                                 // router_023:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_023_src_endofpacket;                                                   // router_023:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                           // sdram_controller_s1_agent:rp_valid -> router_024:sink_valid
	wire  [109:0] sdram_controller_s1_agent_rp_data;                                            // sdram_controller_s1_agent:rp_data -> router_024:sink_data
	wire          sdram_controller_s1_agent_rp_ready;                                           // router_024:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire          sdram_controller_s1_agent_rp_startofpacket;                                   // sdram_controller_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          sdram_controller_s1_agent_rp_endofpacket;                                     // sdram_controller_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                         // router_024:src_valid -> rsp_demux_010:sink_valid
	wire  [109:0] router_024_src_data;                                                          // router_024:src_data -> rsp_demux_010:sink_data
	wire          router_024_src_ready;                                                         // rsp_demux_010:sink_ready -> router_024:src_ready
	wire   [49:0] router_024_src_channel;                                                       // router_024:src_channel -> rsp_demux_010:sink_channel
	wire          router_024_src_startofpacket;                                                 // router_024:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_024_src_endofpacket;                                                   // router_024:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          timer_1a_s1_agent_rp_valid;                                                   // timer_1a_s1_agent:rp_valid -> router_025:sink_valid
	wire  [109:0] timer_1a_s1_agent_rp_data;                                                    // timer_1a_s1_agent:rp_data -> router_025:sink_data
	wire          timer_1a_s1_agent_rp_ready;                                                   // router_025:sink_ready -> timer_1a_s1_agent:rp_ready
	wire          timer_1a_s1_agent_rp_startofpacket;                                           // timer_1a_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          timer_1a_s1_agent_rp_endofpacket;                                             // timer_1a_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                         // router_025:src_valid -> rsp_demux_011:sink_valid
	wire  [109:0] router_025_src_data;                                                          // router_025:src_data -> rsp_demux_011:sink_data
	wire          router_025_src_ready;                                                         // rsp_demux_011:sink_ready -> router_025:src_ready
	wire   [49:0] router_025_src_channel;                                                       // router_025:src_channel -> rsp_demux_011:sink_channel
	wire          router_025_src_startofpacket;                                                 // router_025:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_025_src_endofpacket;                                                   // router_025:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          mem_info_s1_agent_rp_valid;                                                   // mem_info_s1_agent:rp_valid -> router_026:sink_valid
	wire  [109:0] mem_info_s1_agent_rp_data;                                                    // mem_info_s1_agent:rp_data -> router_026:sink_data
	wire          mem_info_s1_agent_rp_ready;                                                   // router_026:sink_ready -> mem_info_s1_agent:rp_ready
	wire          mem_info_s1_agent_rp_startofpacket;                                           // mem_info_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          mem_info_s1_agent_rp_endofpacket;                                             // mem_info_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                         // router_026:src_valid -> rsp_demux_012:sink_valid
	wire  [109:0] router_026_src_data;                                                          // router_026:src_data -> rsp_demux_012:sink_data
	wire          router_026_src_ready;                                                         // rsp_demux_012:sink_ready -> router_026:src_ready
	wire   [49:0] router_026_src_channel;                                                       // router_026:src_channel -> rsp_demux_012:sink_channel
	wire          router_026_src_startofpacket;                                                 // router_026:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_026_src_endofpacket;                                                   // router_026:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          fifo_qd_p3_in_agent_rp_valid;                                                 // fifo_qd_p3_in_agent:rp_valid -> router_027:sink_valid
	wire  [109:0] fifo_qd_p3_in_agent_rp_data;                                                  // fifo_qd_p3_in_agent:rp_data -> router_027:sink_data
	wire          fifo_qd_p3_in_agent_rp_ready;                                                 // router_027:sink_ready -> fifo_qd_p3_in_agent:rp_ready
	wire          fifo_qd_p3_in_agent_rp_startofpacket;                                         // fifo_qd_p3_in_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          fifo_qd_p3_in_agent_rp_endofpacket;                                           // fifo_qd_p3_in_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                         // router_027:src_valid -> rsp_demux_013:sink_valid
	wire  [109:0] router_027_src_data;                                                          // router_027:src_data -> rsp_demux_013:sink_data
	wire          router_027_src_ready;                                                         // rsp_demux_013:sink_ready -> router_027:src_ready
	wire   [49:0] router_027_src_channel;                                                       // router_027:src_channel -> rsp_demux_013:sink_channel
	wire          router_027_src_startofpacket;                                                 // router_027:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_027_src_endofpacket;                                                   // router_027:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          fifo_qc_p3_in_csr_agent_rp_valid;                                             // fifo_qc_p3_in_csr_agent:rp_valid -> router_028:sink_valid
	wire  [109:0] fifo_qc_p3_in_csr_agent_rp_data;                                              // fifo_qc_p3_in_csr_agent:rp_data -> router_028:sink_data
	wire          fifo_qc_p3_in_csr_agent_rp_ready;                                             // router_028:sink_ready -> fifo_qc_p3_in_csr_agent:rp_ready
	wire          fifo_qc_p3_in_csr_agent_rp_startofpacket;                                     // fifo_qc_p3_in_csr_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          fifo_qc_p3_in_csr_agent_rp_endofpacket;                                       // fifo_qc_p3_in_csr_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                         // router_028:src_valid -> rsp_demux_014:sink_valid
	wire  [109:0] router_028_src_data;                                                          // router_028:src_data -> rsp_demux_014:sink_data
	wire          router_028_src_ready;                                                         // rsp_demux_014:sink_ready -> router_028:src_ready
	wire   [49:0] router_028_src_channel;                                                       // router_028:src_channel -> rsp_demux_014:sink_channel
	wire          router_028_src_startofpacket;                                                 // router_028:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_028_src_endofpacket;                                                   // router_028:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          fifo_qd_p3_in_csr_agent_rp_valid;                                             // fifo_qd_p3_in_csr_agent:rp_valid -> router_029:sink_valid
	wire  [109:0] fifo_qd_p3_in_csr_agent_rp_data;                                              // fifo_qd_p3_in_csr_agent:rp_data -> router_029:sink_data
	wire          fifo_qd_p3_in_csr_agent_rp_ready;                                             // router_029:sink_ready -> fifo_qd_p3_in_csr_agent:rp_ready
	wire          fifo_qd_p3_in_csr_agent_rp_startofpacket;                                     // fifo_qd_p3_in_csr_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          fifo_qd_p3_in_csr_agent_rp_endofpacket;                                       // fifo_qd_p3_in_csr_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                         // router_029:src_valid -> rsp_demux_015:sink_valid
	wire  [109:0] router_029_src_data;                                                          // router_029:src_data -> rsp_demux_015:sink_data
	wire          router_029_src_ready;                                                         // rsp_demux_015:sink_ready -> router_029:src_ready
	wire   [49:0] router_029_src_channel;                                                       // router_029:src_channel -> rsp_demux_015:sink_channel
	wire          router_029_src_startofpacket;                                                 // router_029:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_029_src_endofpacket;                                                   // router_029:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          fifo_qc_p3_out_agent_rp_valid;                                                // fifo_qc_p3_out_agent:rp_valid -> router_030:sink_valid
	wire  [109:0] fifo_qc_p3_out_agent_rp_data;                                                 // fifo_qc_p3_out_agent:rp_data -> router_030:sink_data
	wire          fifo_qc_p3_out_agent_rp_ready;                                                // router_030:sink_ready -> fifo_qc_p3_out_agent:rp_ready
	wire          fifo_qc_p3_out_agent_rp_startofpacket;                                        // fifo_qc_p3_out_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          fifo_qc_p3_out_agent_rp_endofpacket;                                          // fifo_qc_p3_out_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                         // router_030:src_valid -> rsp_demux_016:sink_valid
	wire  [109:0] router_030_src_data;                                                          // router_030:src_data -> rsp_demux_016:sink_data
	wire          router_030_src_ready;                                                         // rsp_demux_016:sink_ready -> router_030:src_ready
	wire   [49:0] router_030_src_channel;                                                       // router_030:src_channel -> rsp_demux_016:sink_channel
	wire          router_030_src_startofpacket;                                                 // router_030:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_030_src_endofpacket;                                                   // router_030:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          fifo_qe_in_agent_rp_valid;                                                    // fifo_qe_in_agent:rp_valid -> router_031:sink_valid
	wire  [109:0] fifo_qe_in_agent_rp_data;                                                     // fifo_qe_in_agent:rp_data -> router_031:sink_data
	wire          fifo_qe_in_agent_rp_ready;                                                    // router_031:sink_ready -> fifo_qe_in_agent:rp_ready
	wire          fifo_qe_in_agent_rp_startofpacket;                                            // fifo_qe_in_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          fifo_qe_in_agent_rp_endofpacket;                                              // fifo_qe_in_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                         // router_031:src_valid -> rsp_demux_017:sink_valid
	wire  [109:0] router_031_src_data;                                                          // router_031:src_data -> rsp_demux_017:sink_data
	wire          router_031_src_ready;                                                         // rsp_demux_017:sink_ready -> router_031:src_ready
	wire   [49:0] router_031_src_channel;                                                       // router_031:src_channel -> rsp_demux_017:sink_channel
	wire          router_031_src_startofpacket;                                                 // router_031:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_031_src_endofpacket;                                                   // router_031:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          fifo_qd_p1_in_csr_agent_rp_valid;                                             // fifo_qd_p1_in_csr_agent:rp_valid -> router_032:sink_valid
	wire  [109:0] fifo_qd_p1_in_csr_agent_rp_data;                                              // fifo_qd_p1_in_csr_agent:rp_data -> router_032:sink_data
	wire          fifo_qd_p1_in_csr_agent_rp_ready;                                             // router_032:sink_ready -> fifo_qd_p1_in_csr_agent:rp_ready
	wire          fifo_qd_p1_in_csr_agent_rp_startofpacket;                                     // fifo_qd_p1_in_csr_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          fifo_qd_p1_in_csr_agent_rp_endofpacket;                                       // fifo_qd_p1_in_csr_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                         // router_032:src_valid -> rsp_demux_018:sink_valid
	wire  [109:0] router_032_src_data;                                                          // router_032:src_data -> rsp_demux_018:sink_data
	wire          router_032_src_ready;                                                         // rsp_demux_018:sink_ready -> router_032:src_ready
	wire   [49:0] router_032_src_channel;                                                       // router_032:src_channel -> rsp_demux_018:sink_channel
	wire          router_032_src_startofpacket;                                                 // router_032:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_032_src_endofpacket;                                                   // router_032:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          fifo_qe_in_csr_agent_rp_valid;                                                // fifo_qe_in_csr_agent:rp_valid -> router_033:sink_valid
	wire  [109:0] fifo_qe_in_csr_agent_rp_data;                                                 // fifo_qe_in_csr_agent:rp_data -> router_033:sink_data
	wire          fifo_qe_in_csr_agent_rp_ready;                                                // router_033:sink_ready -> fifo_qe_in_csr_agent:rp_ready
	wire          fifo_qe_in_csr_agent_rp_startofpacket;                                        // fifo_qe_in_csr_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          fifo_qe_in_csr_agent_rp_endofpacket;                                          // fifo_qe_in_csr_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                         // router_033:src_valid -> rsp_demux_019:sink_valid
	wire  [109:0] router_033_src_data;                                                          // router_033:src_data -> rsp_demux_019:sink_data
	wire          router_033_src_ready;                                                         // rsp_demux_019:sink_ready -> router_033:src_ready
	wire   [49:0] router_033_src_channel;                                                       // router_033:src_channel -> rsp_demux_019:sink_channel
	wire          router_033_src_startofpacket;                                                 // router_033:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_033_src_endofpacket;                                                   // router_033:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          fifo_qd_p2_in_csr_agent_rp_valid;                                             // fifo_qd_p2_in_csr_agent:rp_valid -> router_034:sink_valid
	wire  [109:0] fifo_qd_p2_in_csr_agent_rp_data;                                              // fifo_qd_p2_in_csr_agent:rp_data -> router_034:sink_data
	wire          fifo_qd_p2_in_csr_agent_rp_ready;                                             // router_034:sink_ready -> fifo_qd_p2_in_csr_agent:rp_ready
	wire          fifo_qd_p2_in_csr_agent_rp_startofpacket;                                     // fifo_qd_p2_in_csr_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          fifo_qd_p2_in_csr_agent_rp_endofpacket;                                       // fifo_qd_p2_in_csr_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                         // router_034:src_valid -> rsp_demux_020:sink_valid
	wire  [109:0] router_034_src_data;                                                          // router_034:src_data -> rsp_demux_020:sink_data
	wire          router_034_src_ready;                                                         // rsp_demux_020:sink_ready -> router_034:src_ready
	wire   [49:0] router_034_src_channel;                                                       // router_034:src_channel -> rsp_demux_020:sink_channel
	wire          router_034_src_startofpacket;                                                 // router_034:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_034_src_endofpacket;                                                   // router_034:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          fifo_qd_p1_out_agent_rp_valid;                                                // fifo_qd_p1_out_agent:rp_valid -> router_035:sink_valid
	wire  [109:0] fifo_qd_p1_out_agent_rp_data;                                                 // fifo_qd_p1_out_agent:rp_data -> router_035:sink_data
	wire          fifo_qd_p1_out_agent_rp_ready;                                                // router_035:sink_ready -> fifo_qd_p1_out_agent:rp_ready
	wire          fifo_qd_p1_out_agent_rp_startofpacket;                                        // fifo_qd_p1_out_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          fifo_qd_p1_out_agent_rp_endofpacket;                                          // fifo_qd_p1_out_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                         // router_035:src_valid -> rsp_demux_021:sink_valid
	wire  [109:0] router_035_src_data;                                                          // router_035:src_data -> rsp_demux_021:sink_data
	wire          router_035_src_ready;                                                         // rsp_demux_021:sink_ready -> router_035:src_ready
	wire   [49:0] router_035_src_channel;                                                       // router_035:src_channel -> rsp_demux_021:sink_channel
	wire          router_035_src_startofpacket;                                                 // router_035:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_035_src_endofpacket;                                                   // router_035:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          fifo_qd_p2_out_agent_rp_valid;                                                // fifo_qd_p2_out_agent:rp_valid -> router_036:sink_valid
	wire  [109:0] fifo_qd_p2_out_agent_rp_data;                                                 // fifo_qd_p2_out_agent:rp_data -> router_036:sink_data
	wire          fifo_qd_p2_out_agent_rp_ready;                                                // router_036:sink_ready -> fifo_qd_p2_out_agent:rp_ready
	wire          fifo_qd_p2_out_agent_rp_startofpacket;                                        // fifo_qd_p2_out_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          fifo_qd_p2_out_agent_rp_endofpacket;                                          // fifo_qd_p2_out_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                         // router_036:src_valid -> rsp_demux_022:sink_valid
	wire  [109:0] router_036_src_data;                                                          // router_036:src_data -> rsp_demux_022:sink_data
	wire          router_036_src_ready;                                                         // rsp_demux_022:sink_ready -> router_036:src_ready
	wire   [49:0] router_036_src_channel;                                                       // router_036:src_channel -> rsp_demux_022:sink_channel
	wire          router_036_src_startofpacket;                                                 // router_036:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_036_src_endofpacket;                                                   // router_036:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          fifo_qd_p3_out_agent_rp_valid;                                                // fifo_qd_p3_out_agent:rp_valid -> router_037:sink_valid
	wire  [109:0] fifo_qd_p3_out_agent_rp_data;                                                 // fifo_qd_p3_out_agent:rp_data -> router_037:sink_data
	wire          fifo_qd_p3_out_agent_rp_ready;                                                // router_037:sink_ready -> fifo_qd_p3_out_agent:rp_ready
	wire          fifo_qd_p3_out_agent_rp_startofpacket;                                        // fifo_qd_p3_out_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          fifo_qd_p3_out_agent_rp_endofpacket;                                          // fifo_qd_p3_out_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                         // router_037:src_valid -> rsp_demux_023:sink_valid
	wire  [109:0] router_037_src_data;                                                          // router_037:src_data -> rsp_demux_023:sink_data
	wire          router_037_src_ready;                                                         // rsp_demux_023:sink_ready -> router_037:src_ready
	wire   [49:0] router_037_src_channel;                                                       // router_037:src_channel -> rsp_demux_023:sink_channel
	wire          router_037_src_startofpacket;                                                 // router_037:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_037_src_endofpacket;                                                   // router_037:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          fifo_qd_p2_in_agent_rp_valid;                                                 // fifo_qd_p2_in_agent:rp_valid -> router_038:sink_valid
	wire  [109:0] fifo_qd_p2_in_agent_rp_data;                                                  // fifo_qd_p2_in_agent:rp_data -> router_038:sink_data
	wire          fifo_qd_p2_in_agent_rp_ready;                                                 // router_038:sink_ready -> fifo_qd_p2_in_agent:rp_ready
	wire          fifo_qd_p2_in_agent_rp_startofpacket;                                         // fifo_qd_p2_in_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          fifo_qd_p2_in_agent_rp_endofpacket;                                           // fifo_qd_p2_in_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                         // router_038:src_valid -> rsp_demux_024:sink_valid
	wire  [109:0] router_038_src_data;                                                          // router_038:src_data -> rsp_demux_024:sink_data
	wire          router_038_src_ready;                                                         // rsp_demux_024:sink_ready -> router_038:src_ready
	wire   [49:0] router_038_src_channel;                                                       // router_038:src_channel -> rsp_demux_024:sink_channel
	wire          router_038_src_startofpacket;                                                 // router_038:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_038_src_endofpacket;                                                   // router_038:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          fifo_qc_p2_in_csr_agent_rp_valid;                                             // fifo_qc_p2_in_csr_agent:rp_valid -> router_039:sink_valid
	wire  [109:0] fifo_qc_p2_in_csr_agent_rp_data;                                              // fifo_qc_p2_in_csr_agent:rp_data -> router_039:sink_data
	wire          fifo_qc_p2_in_csr_agent_rp_ready;                                             // router_039:sink_ready -> fifo_qc_p2_in_csr_agent:rp_ready
	wire          fifo_qc_p2_in_csr_agent_rp_startofpacket;                                     // fifo_qc_p2_in_csr_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          fifo_qc_p2_in_csr_agent_rp_endofpacket;                                       // fifo_qc_p2_in_csr_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                         // router_039:src_valid -> rsp_demux_025:sink_valid
	wire  [109:0] router_039_src_data;                                                          // router_039:src_data -> rsp_demux_025:sink_data
	wire          router_039_src_ready;                                                         // rsp_demux_025:sink_ready -> router_039:src_ready
	wire   [49:0] router_039_src_channel;                                                       // router_039:src_channel -> rsp_demux_025:sink_channel
	wire          router_039_src_startofpacket;                                                 // router_039:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_039_src_endofpacket;                                                   // router_039:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          fifo_qc_p2_out_agent_rp_valid;                                                // fifo_qc_p2_out_agent:rp_valid -> router_040:sink_valid
	wire  [109:0] fifo_qc_p2_out_agent_rp_data;                                                 // fifo_qc_p2_out_agent:rp_data -> router_040:sink_data
	wire          fifo_qc_p2_out_agent_rp_ready;                                                // router_040:sink_ready -> fifo_qc_p2_out_agent:rp_ready
	wire          fifo_qc_p2_out_agent_rp_startofpacket;                                        // fifo_qc_p2_out_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          fifo_qc_p2_out_agent_rp_endofpacket;                                          // fifo_qc_p2_out_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                         // router_040:src_valid -> rsp_demux_026:sink_valid
	wire  [109:0] router_040_src_data;                                                          // router_040:src_data -> rsp_demux_026:sink_data
	wire          router_040_src_ready;                                                         // rsp_demux_026:sink_ready -> router_040:src_ready
	wire   [49:0] router_040_src_channel;                                                       // router_040:src_channel -> rsp_demux_026:sink_channel
	wire          router_040_src_startofpacket;                                                 // router_040:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_040_src_endofpacket;                                                   // router_040:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          fifo_qc_p2_in_agent_rp_valid;                                                 // fifo_qc_p2_in_agent:rp_valid -> router_041:sink_valid
	wire  [109:0] fifo_qc_p2_in_agent_rp_data;                                                  // fifo_qc_p2_in_agent:rp_data -> router_041:sink_data
	wire          fifo_qc_p2_in_agent_rp_ready;                                                 // router_041:sink_ready -> fifo_qc_p2_in_agent:rp_ready
	wire          fifo_qc_p2_in_agent_rp_startofpacket;                                         // fifo_qc_p2_in_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          fifo_qc_p2_in_agent_rp_endofpacket;                                           // fifo_qc_p2_in_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                         // router_041:src_valid -> rsp_demux_027:sink_valid
	wire  [109:0] router_041_src_data;                                                          // router_041:src_data -> rsp_demux_027:sink_data
	wire          router_041_src_ready;                                                         // rsp_demux_027:sink_ready -> router_041:src_ready
	wire   [49:0] router_041_src_channel;                                                       // router_041:src_channel -> rsp_demux_027:sink_channel
	wire          router_041_src_startofpacket;                                                 // router_041:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_041_src_endofpacket;                                                   // router_041:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          fifo_qb_p2_in_csr_agent_rp_valid;                                             // fifo_qb_p2_in_csr_agent:rp_valid -> router_042:sink_valid
	wire  [109:0] fifo_qb_p2_in_csr_agent_rp_data;                                              // fifo_qb_p2_in_csr_agent:rp_data -> router_042:sink_data
	wire          fifo_qb_p2_in_csr_agent_rp_ready;                                             // router_042:sink_ready -> fifo_qb_p2_in_csr_agent:rp_ready
	wire          fifo_qb_p2_in_csr_agent_rp_startofpacket;                                     // fifo_qb_p2_in_csr_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          fifo_qb_p2_in_csr_agent_rp_endofpacket;                                       // fifo_qb_p2_in_csr_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                         // router_042:src_valid -> rsp_demux_028:sink_valid
	wire  [109:0] router_042_src_data;                                                          // router_042:src_data -> rsp_demux_028:sink_data
	wire          router_042_src_ready;                                                         // rsp_demux_028:sink_ready -> router_042:src_ready
	wire   [49:0] router_042_src_channel;                                                       // router_042:src_channel -> rsp_demux_028:sink_channel
	wire          router_042_src_startofpacket;                                                 // router_042:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_042_src_endofpacket;                                                   // router_042:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          fifo_qb_p2_out_agent_rp_valid;                                                // fifo_qb_p2_out_agent:rp_valid -> router_043:sink_valid
	wire  [109:0] fifo_qb_p2_out_agent_rp_data;                                                 // fifo_qb_p2_out_agent:rp_data -> router_043:sink_data
	wire          fifo_qb_p2_out_agent_rp_ready;                                                // router_043:sink_ready -> fifo_qb_p2_out_agent:rp_ready
	wire          fifo_qb_p2_out_agent_rp_startofpacket;                                        // fifo_qb_p2_out_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          fifo_qb_p2_out_agent_rp_endofpacket;                                          // fifo_qb_p2_out_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                         // router_043:src_valid -> rsp_demux_029:sink_valid
	wire  [109:0] router_043_src_data;                                                          // router_043:src_data -> rsp_demux_029:sink_data
	wire          router_043_src_ready;                                                         // rsp_demux_029:sink_ready -> router_043:src_ready
	wire   [49:0] router_043_src_channel;                                                       // router_043:src_channel -> rsp_demux_029:sink_channel
	wire          router_043_src_startofpacket;                                                 // router_043:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_043_src_endofpacket;                                                   // router_043:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          fifo_qb_p2_in_agent_rp_valid;                                                 // fifo_qb_p2_in_agent:rp_valid -> router_044:sink_valid
	wire  [109:0] fifo_qb_p2_in_agent_rp_data;                                                  // fifo_qb_p2_in_agent:rp_data -> router_044:sink_data
	wire          fifo_qb_p2_in_agent_rp_ready;                                                 // router_044:sink_ready -> fifo_qb_p2_in_agent:rp_ready
	wire          fifo_qb_p2_in_agent_rp_startofpacket;                                         // fifo_qb_p2_in_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          fifo_qb_p2_in_agent_rp_endofpacket;                                           // fifo_qb_p2_in_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                         // router_044:src_valid -> rsp_demux_030:sink_valid
	wire  [109:0] router_044_src_data;                                                          // router_044:src_data -> rsp_demux_030:sink_data
	wire          router_044_src_ready;                                                         // rsp_demux_030:sink_ready -> router_044:src_ready
	wire   [49:0] router_044_src_channel;                                                       // router_044:src_channel -> rsp_demux_030:sink_channel
	wire          router_044_src_startofpacket;                                                 // router_044:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_044_src_endofpacket;                                                   // router_044:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          fifo_qa_p2_out_agent_rp_valid;                                                // fifo_qa_p2_out_agent:rp_valid -> router_045:sink_valid
	wire  [109:0] fifo_qa_p2_out_agent_rp_data;                                                 // fifo_qa_p2_out_agent:rp_data -> router_045:sink_data
	wire          fifo_qa_p2_out_agent_rp_ready;                                                // router_045:sink_ready -> fifo_qa_p2_out_agent:rp_ready
	wire          fifo_qa_p2_out_agent_rp_startofpacket;                                        // fifo_qa_p2_out_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          fifo_qa_p2_out_agent_rp_endofpacket;                                          // fifo_qa_p2_out_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                         // router_045:src_valid -> rsp_demux_031:sink_valid
	wire  [109:0] router_045_src_data;                                                          // router_045:src_data -> rsp_demux_031:sink_data
	wire          router_045_src_ready;                                                         // rsp_demux_031:sink_ready -> router_045:src_ready
	wire   [49:0] router_045_src_channel;                                                       // router_045:src_channel -> rsp_demux_031:sink_channel
	wire          router_045_src_startofpacket;                                                 // router_045:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_045_src_endofpacket;                                                   // router_045:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_1f_avalon_jtag_slave_agent:rp_valid -> router_046:sink_valid
	wire  [109:0] jtag_uart_1f_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_1f_avalon_jtag_slave_agent:rp_data -> router_046:sink_data
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rp_ready;                                // router_046:sink_ready -> jtag_uart_1f_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_1f_avalon_jtag_slave_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_1f_avalon_jtag_slave_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                         // router_046:src_valid -> rsp_demux_032:sink_valid
	wire  [109:0] router_046_src_data;                                                          // router_046:src_data -> rsp_demux_032:sink_data
	wire          router_046_src_ready;                                                         // rsp_demux_032:sink_ready -> router_046:src_ready
	wire   [49:0] router_046_src_channel;                                                       // router_046:src_channel -> rsp_demux_032:sink_channel
	wire          router_046_src_startofpacket;                                                 // router_046:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_046_src_endofpacket;                                                   // router_046:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          sysid_1f_control_slave_agent_rp_valid;                                        // sysid_1f_control_slave_agent:rp_valid -> router_047:sink_valid
	wire  [109:0] sysid_1f_control_slave_agent_rp_data;                                         // sysid_1f_control_slave_agent:rp_data -> router_047:sink_data
	wire          sysid_1f_control_slave_agent_rp_ready;                                        // router_047:sink_ready -> sysid_1f_control_slave_agent:rp_ready
	wire          sysid_1f_control_slave_agent_rp_startofpacket;                                // sysid_1f_control_slave_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          sysid_1f_control_slave_agent_rp_endofpacket;                                  // sysid_1f_control_slave_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                         // router_047:src_valid -> rsp_demux_033:sink_valid
	wire  [109:0] router_047_src_data;                                                          // router_047:src_data -> rsp_demux_033:sink_data
	wire          router_047_src_ready;                                                         // rsp_demux_033:sink_ready -> router_047:src_ready
	wire   [49:0] router_047_src_channel;                                                       // router_047:src_channel -> rsp_demux_033:sink_channel
	wire          router_047_src_startofpacket;                                                 // router_047:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_047_src_endofpacket;                                                   // router_047:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          cpu_1f_debug_mem_slave_agent_rp_valid;                                        // cpu_1f_debug_mem_slave_agent:rp_valid -> router_048:sink_valid
	wire  [109:0] cpu_1f_debug_mem_slave_agent_rp_data;                                         // cpu_1f_debug_mem_slave_agent:rp_data -> router_048:sink_data
	wire          cpu_1f_debug_mem_slave_agent_rp_ready;                                        // router_048:sink_ready -> cpu_1f_debug_mem_slave_agent:rp_ready
	wire          cpu_1f_debug_mem_slave_agent_rp_startofpacket;                                // cpu_1f_debug_mem_slave_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          cpu_1f_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_1f_debug_mem_slave_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                         // router_048:src_valid -> rsp_demux_034:sink_valid
	wire  [109:0] router_048_src_data;                                                          // router_048:src_data -> rsp_demux_034:sink_data
	wire          router_048_src_ready;                                                         // rsp_demux_034:sink_ready -> router_048:src_ready
	wire   [49:0] router_048_src_channel;                                                       // router_048:src_channel -> rsp_demux_034:sink_channel
	wire          router_048_src_startofpacket;                                                 // router_048:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_048_src_endofpacket;                                                   // router_048:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          fifo_qe_out_agent_rp_valid;                                                   // fifo_qe_out_agent:rp_valid -> router_049:sink_valid
	wire  [109:0] fifo_qe_out_agent_rp_data;                                                    // fifo_qe_out_agent:rp_data -> router_049:sink_data
	wire          fifo_qe_out_agent_rp_ready;                                                   // router_049:sink_ready -> fifo_qe_out_agent:rp_ready
	wire          fifo_qe_out_agent_rp_startofpacket;                                           // fifo_qe_out_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          fifo_qe_out_agent_rp_endofpacket;                                             // fifo_qe_out_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                         // router_049:src_valid -> rsp_demux_035:sink_valid
	wire  [109:0] router_049_src_data;                                                          // router_049:src_data -> rsp_demux_035:sink_data
	wire          router_049_src_ready;                                                         // rsp_demux_035:sink_ready -> router_049:src_ready
	wire   [49:0] router_049_src_channel;                                                       // router_049:src_channel -> rsp_demux_035:sink_channel
	wire          router_049_src_startofpacket;                                                 // router_049:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_049_src_endofpacket;                                                   // router_049:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          timer_1f_s1_agent_rp_valid;                                                   // timer_1f_s1_agent:rp_valid -> router_050:sink_valid
	wire  [109:0] timer_1f_s1_agent_rp_data;                                                    // timer_1f_s1_agent:rp_data -> router_050:sink_data
	wire          timer_1f_s1_agent_rp_ready;                                                   // router_050:sink_ready -> timer_1f_s1_agent:rp_ready
	wire          timer_1f_s1_agent_rp_startofpacket;                                           // timer_1f_s1_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          timer_1f_s1_agent_rp_endofpacket;                                             // timer_1f_s1_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                         // router_050:src_valid -> rsp_demux_036:sink_valid
	wire  [109:0] router_050_src_data;                                                          // router_050:src_data -> rsp_demux_036:sink_data
	wire          router_050_src_ready;                                                         // rsp_demux_036:sink_ready -> router_050:src_ready
	wire   [49:0] router_050_src_channel;                                                       // router_050:src_channel -> rsp_demux_036:sink_channel
	wire          router_050_src_startofpacket;                                                 // router_050:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_050_src_endofpacket;                                                   // router_050:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          fifo_qd_p1_in_agent_rp_valid;                                                 // fifo_qd_p1_in_agent:rp_valid -> router_051:sink_valid
	wire  [109:0] fifo_qd_p1_in_agent_rp_data;                                                  // fifo_qd_p1_in_agent:rp_data -> router_051:sink_data
	wire          fifo_qd_p1_in_agent_rp_ready;                                                 // router_051:sink_ready -> fifo_qd_p1_in_agent:rp_ready
	wire          fifo_qd_p1_in_agent_rp_startofpacket;                                         // fifo_qd_p1_in_agent:rp_startofpacket -> router_051:sink_startofpacket
	wire          fifo_qd_p1_in_agent_rp_endofpacket;                                           // fifo_qd_p1_in_agent:rp_endofpacket -> router_051:sink_endofpacket
	wire          router_051_src_valid;                                                         // router_051:src_valid -> rsp_demux_037:sink_valid
	wire  [109:0] router_051_src_data;                                                          // router_051:src_data -> rsp_demux_037:sink_data
	wire          router_051_src_ready;                                                         // rsp_demux_037:sink_ready -> router_051:src_ready
	wire   [49:0] router_051_src_channel;                                                       // router_051:src_channel -> rsp_demux_037:sink_channel
	wire          router_051_src_startofpacket;                                                 // router_051:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_051_src_endofpacket;                                                   // router_051:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          fifo_qc_p1_in_csr_agent_rp_valid;                                             // fifo_qc_p1_in_csr_agent:rp_valid -> router_052:sink_valid
	wire  [109:0] fifo_qc_p1_in_csr_agent_rp_data;                                              // fifo_qc_p1_in_csr_agent:rp_data -> router_052:sink_data
	wire          fifo_qc_p1_in_csr_agent_rp_ready;                                             // router_052:sink_ready -> fifo_qc_p1_in_csr_agent:rp_ready
	wire          fifo_qc_p1_in_csr_agent_rp_startofpacket;                                     // fifo_qc_p1_in_csr_agent:rp_startofpacket -> router_052:sink_startofpacket
	wire          fifo_qc_p1_in_csr_agent_rp_endofpacket;                                       // fifo_qc_p1_in_csr_agent:rp_endofpacket -> router_052:sink_endofpacket
	wire          router_052_src_valid;                                                         // router_052:src_valid -> rsp_demux_038:sink_valid
	wire  [109:0] router_052_src_data;                                                          // router_052:src_data -> rsp_demux_038:sink_data
	wire          router_052_src_ready;                                                         // rsp_demux_038:sink_ready -> router_052:src_ready
	wire   [49:0] router_052_src_channel;                                                       // router_052:src_channel -> rsp_demux_038:sink_channel
	wire          router_052_src_startofpacket;                                                 // router_052:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_052_src_endofpacket;                                                   // router_052:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          fifo_qc_p1_out_agent_rp_valid;                                                // fifo_qc_p1_out_agent:rp_valid -> router_053:sink_valid
	wire  [109:0] fifo_qc_p1_out_agent_rp_data;                                                 // fifo_qc_p1_out_agent:rp_data -> router_053:sink_data
	wire          fifo_qc_p1_out_agent_rp_ready;                                                // router_053:sink_ready -> fifo_qc_p1_out_agent:rp_ready
	wire          fifo_qc_p1_out_agent_rp_startofpacket;                                        // fifo_qc_p1_out_agent:rp_startofpacket -> router_053:sink_startofpacket
	wire          fifo_qc_p1_out_agent_rp_endofpacket;                                          // fifo_qc_p1_out_agent:rp_endofpacket -> router_053:sink_endofpacket
	wire          router_053_src_valid;                                                         // router_053:src_valid -> rsp_demux_039:sink_valid
	wire  [109:0] router_053_src_data;                                                          // router_053:src_data -> rsp_demux_039:sink_data
	wire          router_053_src_ready;                                                         // rsp_demux_039:sink_ready -> router_053:src_ready
	wire   [49:0] router_053_src_channel;                                                       // router_053:src_channel -> rsp_demux_039:sink_channel
	wire          router_053_src_startofpacket;                                                 // router_053:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_053_src_endofpacket;                                                   // router_053:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          fifo_qc_p1_in_agent_rp_valid;                                                 // fifo_qc_p1_in_agent:rp_valid -> router_054:sink_valid
	wire  [109:0] fifo_qc_p1_in_agent_rp_data;                                                  // fifo_qc_p1_in_agent:rp_data -> router_054:sink_data
	wire          fifo_qc_p1_in_agent_rp_ready;                                                 // router_054:sink_ready -> fifo_qc_p1_in_agent:rp_ready
	wire          fifo_qc_p1_in_agent_rp_startofpacket;                                         // fifo_qc_p1_in_agent:rp_startofpacket -> router_054:sink_startofpacket
	wire          fifo_qc_p1_in_agent_rp_endofpacket;                                           // fifo_qc_p1_in_agent:rp_endofpacket -> router_054:sink_endofpacket
	wire          router_054_src_valid;                                                         // router_054:src_valid -> rsp_demux_040:sink_valid
	wire  [109:0] router_054_src_data;                                                          // router_054:src_data -> rsp_demux_040:sink_data
	wire          router_054_src_ready;                                                         // rsp_demux_040:sink_ready -> router_054:src_ready
	wire   [49:0] router_054_src_channel;                                                       // router_054:src_channel -> rsp_demux_040:sink_channel
	wire          router_054_src_startofpacket;                                                 // router_054:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_054_src_endofpacket;                                                   // router_054:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          fifo_qb_p1_in_csr_agent_rp_valid;                                             // fifo_qb_p1_in_csr_agent:rp_valid -> router_055:sink_valid
	wire  [109:0] fifo_qb_p1_in_csr_agent_rp_data;                                              // fifo_qb_p1_in_csr_agent:rp_data -> router_055:sink_data
	wire          fifo_qb_p1_in_csr_agent_rp_ready;                                             // router_055:sink_ready -> fifo_qb_p1_in_csr_agent:rp_ready
	wire          fifo_qb_p1_in_csr_agent_rp_startofpacket;                                     // fifo_qb_p1_in_csr_agent:rp_startofpacket -> router_055:sink_startofpacket
	wire          fifo_qb_p1_in_csr_agent_rp_endofpacket;                                       // fifo_qb_p1_in_csr_agent:rp_endofpacket -> router_055:sink_endofpacket
	wire          router_055_src_valid;                                                         // router_055:src_valid -> rsp_demux_041:sink_valid
	wire  [109:0] router_055_src_data;                                                          // router_055:src_data -> rsp_demux_041:sink_data
	wire          router_055_src_ready;                                                         // rsp_demux_041:sink_ready -> router_055:src_ready
	wire   [49:0] router_055_src_channel;                                                       // router_055:src_channel -> rsp_demux_041:sink_channel
	wire          router_055_src_startofpacket;                                                 // router_055:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_055_src_endofpacket;                                                   // router_055:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          fifo_qb_p1_out_agent_rp_valid;                                                // fifo_qb_p1_out_agent:rp_valid -> router_056:sink_valid
	wire  [109:0] fifo_qb_p1_out_agent_rp_data;                                                 // fifo_qb_p1_out_agent:rp_data -> router_056:sink_data
	wire          fifo_qb_p1_out_agent_rp_ready;                                                // router_056:sink_ready -> fifo_qb_p1_out_agent:rp_ready
	wire          fifo_qb_p1_out_agent_rp_startofpacket;                                        // fifo_qb_p1_out_agent:rp_startofpacket -> router_056:sink_startofpacket
	wire          fifo_qb_p1_out_agent_rp_endofpacket;                                          // fifo_qb_p1_out_agent:rp_endofpacket -> router_056:sink_endofpacket
	wire          router_056_src_valid;                                                         // router_056:src_valid -> rsp_demux_042:sink_valid
	wire  [109:0] router_056_src_data;                                                          // router_056:src_data -> rsp_demux_042:sink_data
	wire          router_056_src_ready;                                                         // rsp_demux_042:sink_ready -> router_056:src_ready
	wire   [49:0] router_056_src_channel;                                                       // router_056:src_channel -> rsp_demux_042:sink_channel
	wire          router_056_src_startofpacket;                                                 // router_056:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_056_src_endofpacket;                                                   // router_056:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          fifo_qb_p1_in_agent_rp_valid;                                                 // fifo_qb_p1_in_agent:rp_valid -> router_057:sink_valid
	wire  [109:0] fifo_qb_p1_in_agent_rp_data;                                                  // fifo_qb_p1_in_agent:rp_data -> router_057:sink_data
	wire          fifo_qb_p1_in_agent_rp_ready;                                                 // router_057:sink_ready -> fifo_qb_p1_in_agent:rp_ready
	wire          fifo_qb_p1_in_agent_rp_startofpacket;                                         // fifo_qb_p1_in_agent:rp_startofpacket -> router_057:sink_startofpacket
	wire          fifo_qb_p1_in_agent_rp_endofpacket;                                           // fifo_qb_p1_in_agent:rp_endofpacket -> router_057:sink_endofpacket
	wire          router_057_src_valid;                                                         // router_057:src_valid -> rsp_demux_043:sink_valid
	wire  [109:0] router_057_src_data;                                                          // router_057:src_data -> rsp_demux_043:sink_data
	wire          router_057_src_ready;                                                         // rsp_demux_043:sink_ready -> router_057:src_ready
	wire   [49:0] router_057_src_channel;                                                       // router_057:src_channel -> rsp_demux_043:sink_channel
	wire          router_057_src_startofpacket;                                                 // router_057:src_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          router_057_src_endofpacket;                                                   // router_057:src_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          fifo_qa_p1_out_agent_rp_valid;                                                // fifo_qa_p1_out_agent:rp_valid -> router_058:sink_valid
	wire  [109:0] fifo_qa_p1_out_agent_rp_data;                                                 // fifo_qa_p1_out_agent:rp_data -> router_058:sink_data
	wire          fifo_qa_p1_out_agent_rp_ready;                                                // router_058:sink_ready -> fifo_qa_p1_out_agent:rp_ready
	wire          fifo_qa_p1_out_agent_rp_startofpacket;                                        // fifo_qa_p1_out_agent:rp_startofpacket -> router_058:sink_startofpacket
	wire          fifo_qa_p1_out_agent_rp_endofpacket;                                          // fifo_qa_p1_out_agent:rp_endofpacket -> router_058:sink_endofpacket
	wire          router_058_src_valid;                                                         // router_058:src_valid -> rsp_demux_044:sink_valid
	wire  [109:0] router_058_src_data;                                                          // router_058:src_data -> rsp_demux_044:sink_data
	wire          router_058_src_ready;                                                         // rsp_demux_044:sink_ready -> router_058:src_ready
	wire   [49:0] router_058_src_channel;                                                       // router_058:src_channel -> rsp_demux_044:sink_channel
	wire          router_058_src_startofpacket;                                                 // router_058:src_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          router_058_src_endofpacket;                                                   // router_058:src_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          fifo_qc_p3_in_agent_rp_valid;                                                 // fifo_qc_p3_in_agent:rp_valid -> router_059:sink_valid
	wire  [109:0] fifo_qc_p3_in_agent_rp_data;                                                  // fifo_qc_p3_in_agent:rp_data -> router_059:sink_data
	wire          fifo_qc_p3_in_agent_rp_ready;                                                 // router_059:sink_ready -> fifo_qc_p3_in_agent:rp_ready
	wire          fifo_qc_p3_in_agent_rp_startofpacket;                                         // fifo_qc_p3_in_agent:rp_startofpacket -> router_059:sink_startofpacket
	wire          fifo_qc_p3_in_agent_rp_endofpacket;                                           // fifo_qc_p3_in_agent:rp_endofpacket -> router_059:sink_endofpacket
	wire          router_059_src_valid;                                                         // router_059:src_valid -> rsp_demux_045:sink_valid
	wire  [109:0] router_059_src_data;                                                          // router_059:src_data -> rsp_demux_045:sink_data
	wire          router_059_src_ready;                                                         // rsp_demux_045:sink_ready -> router_059:src_ready
	wire   [49:0] router_059_src_channel;                                                       // router_059:src_channel -> rsp_demux_045:sink_channel
	wire          router_059_src_startofpacket;                                                 // router_059:src_startofpacket -> rsp_demux_045:sink_startofpacket
	wire          router_059_src_endofpacket;                                                   // router_059:src_endofpacket -> rsp_demux_045:sink_endofpacket
	wire          fifo_qb_p3_in_csr_agent_rp_valid;                                             // fifo_qb_p3_in_csr_agent:rp_valid -> router_060:sink_valid
	wire  [109:0] fifo_qb_p3_in_csr_agent_rp_data;                                              // fifo_qb_p3_in_csr_agent:rp_data -> router_060:sink_data
	wire          fifo_qb_p3_in_csr_agent_rp_ready;                                             // router_060:sink_ready -> fifo_qb_p3_in_csr_agent:rp_ready
	wire          fifo_qb_p3_in_csr_agent_rp_startofpacket;                                     // fifo_qb_p3_in_csr_agent:rp_startofpacket -> router_060:sink_startofpacket
	wire          fifo_qb_p3_in_csr_agent_rp_endofpacket;                                       // fifo_qb_p3_in_csr_agent:rp_endofpacket -> router_060:sink_endofpacket
	wire          router_060_src_valid;                                                         // router_060:src_valid -> rsp_demux_046:sink_valid
	wire  [109:0] router_060_src_data;                                                          // router_060:src_data -> rsp_demux_046:sink_data
	wire          router_060_src_ready;                                                         // rsp_demux_046:sink_ready -> router_060:src_ready
	wire   [49:0] router_060_src_channel;                                                       // router_060:src_channel -> rsp_demux_046:sink_channel
	wire          router_060_src_startofpacket;                                                 // router_060:src_startofpacket -> rsp_demux_046:sink_startofpacket
	wire          router_060_src_endofpacket;                                                   // router_060:src_endofpacket -> rsp_demux_046:sink_endofpacket
	wire          fifo_qb_p3_out_agent_rp_valid;                                                // fifo_qb_p3_out_agent:rp_valid -> router_061:sink_valid
	wire  [109:0] fifo_qb_p3_out_agent_rp_data;                                                 // fifo_qb_p3_out_agent:rp_data -> router_061:sink_data
	wire          fifo_qb_p3_out_agent_rp_ready;                                                // router_061:sink_ready -> fifo_qb_p3_out_agent:rp_ready
	wire          fifo_qb_p3_out_agent_rp_startofpacket;                                        // fifo_qb_p3_out_agent:rp_startofpacket -> router_061:sink_startofpacket
	wire          fifo_qb_p3_out_agent_rp_endofpacket;                                          // fifo_qb_p3_out_agent:rp_endofpacket -> router_061:sink_endofpacket
	wire          router_061_src_valid;                                                         // router_061:src_valid -> rsp_demux_047:sink_valid
	wire  [109:0] router_061_src_data;                                                          // router_061:src_data -> rsp_demux_047:sink_data
	wire          router_061_src_ready;                                                         // rsp_demux_047:sink_ready -> router_061:src_ready
	wire   [49:0] router_061_src_channel;                                                       // router_061:src_channel -> rsp_demux_047:sink_channel
	wire          router_061_src_startofpacket;                                                 // router_061:src_startofpacket -> rsp_demux_047:sink_startofpacket
	wire          router_061_src_endofpacket;                                                   // router_061:src_endofpacket -> rsp_demux_047:sink_endofpacket
	wire          fifo_qb_p3_in_agent_rp_valid;                                                 // fifo_qb_p3_in_agent:rp_valid -> router_062:sink_valid
	wire  [109:0] fifo_qb_p3_in_agent_rp_data;                                                  // fifo_qb_p3_in_agent:rp_data -> router_062:sink_data
	wire          fifo_qb_p3_in_agent_rp_ready;                                                 // router_062:sink_ready -> fifo_qb_p3_in_agent:rp_ready
	wire          fifo_qb_p3_in_agent_rp_startofpacket;                                         // fifo_qb_p3_in_agent:rp_startofpacket -> router_062:sink_startofpacket
	wire          fifo_qb_p3_in_agent_rp_endofpacket;                                           // fifo_qb_p3_in_agent:rp_endofpacket -> router_062:sink_endofpacket
	wire          router_062_src_valid;                                                         // router_062:src_valid -> rsp_demux_048:sink_valid
	wire  [109:0] router_062_src_data;                                                          // router_062:src_data -> rsp_demux_048:sink_data
	wire          router_062_src_ready;                                                         // rsp_demux_048:sink_ready -> router_062:src_ready
	wire   [49:0] router_062_src_channel;                                                       // router_062:src_channel -> rsp_demux_048:sink_channel
	wire          router_062_src_startofpacket;                                                 // router_062:src_startofpacket -> rsp_demux_048:sink_startofpacket
	wire          router_062_src_endofpacket;                                                   // router_062:src_endofpacket -> rsp_demux_048:sink_endofpacket
	wire          fifo_qa_p3_out_agent_rp_valid;                                                // fifo_qa_p3_out_agent:rp_valid -> router_063:sink_valid
	wire  [109:0] fifo_qa_p3_out_agent_rp_data;                                                 // fifo_qa_p3_out_agent:rp_data -> router_063:sink_data
	wire          fifo_qa_p3_out_agent_rp_ready;                                                // router_063:sink_ready -> fifo_qa_p3_out_agent:rp_ready
	wire          fifo_qa_p3_out_agent_rp_startofpacket;                                        // fifo_qa_p3_out_agent:rp_startofpacket -> router_063:sink_startofpacket
	wire          fifo_qa_p3_out_agent_rp_endofpacket;                                          // fifo_qa_p3_out_agent:rp_endofpacket -> router_063:sink_endofpacket
	wire          router_063_src_valid;                                                         // router_063:src_valid -> rsp_demux_049:sink_valid
	wire  [109:0] router_063_src_data;                                                          // router_063:src_data -> rsp_demux_049:sink_data
	wire          router_063_src_ready;                                                         // rsp_demux_049:sink_ready -> router_063:src_ready
	wire   [49:0] router_063_src_channel;                                                       // router_063:src_channel -> rsp_demux_049:sink_channel
	wire          router_063_src_startofpacket;                                                 // router_063:src_startofpacket -> rsp_demux_049:sink_startofpacket
	wire          router_063_src_endofpacket;                                                   // router_063:src_endofpacket -> rsp_demux_049:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_002_src_data;                                                          // router_002:src_data -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                         // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [49:0] router_002_src_channel;                                                       // router_002:src_channel -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_002:sink_ready -> CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                        // rsp_mux_002:src_valid -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_002_src_data;                                                         // rsp_mux_002:src_data -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                        // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [49:0] rsp_mux_002_src_channel;                                                      // rsp_mux_002:src_channel -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                // rsp_mux_002:src_startofpacket -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                  // rsp_mux_002:src_endofpacket -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1b_p1_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1b_p1_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1b_p1_mm_bridge_0_m0_agent:rp_ready -> CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1b_p1_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1b_p1_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1b_p1_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1b_p1_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_003_src_data;                                                          // router_003:src_data -> CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                         // CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [49:0] router_003_src_channel;                                                       // router_003:src_channel -> CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> CPU_1e_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1e_mm_bridge_0_m0_limiter_cmd_src_data;                                   // CPU_1e_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          cpu_1e_mm_bridge_0_m0_limiter_cmd_src_ready;                                  // cmd_demux_003:sink_ready -> CPU_1e_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1e_mm_bridge_0_m0_limiter_cmd_src_channel;                                // CPU_1e_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          cpu_1e_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                          // CPU_1e_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          cpu_1e_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                            // CPU_1e_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                        // rsp_mux_003:src_valid -> CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_003_src_data;                                                         // rsp_mux_003:src_data -> CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                        // CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [49:0] rsp_mux_003_src_channel;                                                      // rsp_mux_003:src_channel -> CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                // rsp_mux_003:src_startofpacket -> CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                  // rsp_mux_003:src_endofpacket -> CPU_1e_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1e_mm_bridge_0_m0_limiter_rsp_src_valid;                                  // CPU_1e_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1e_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1e_mm_bridge_0_m0_limiter_rsp_src_data;                                   // CPU_1e_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1e_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1e_mm_bridge_0_m0_limiter_rsp_src_ready;                                  // CPU_1e_mm_bridge_0_m0_agent:rp_ready -> CPU_1e_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1e_mm_bridge_0_m0_limiter_rsp_src_channel;                                // CPU_1e_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1e_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1e_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                          // CPU_1e_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1e_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1e_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                            // CPU_1e_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1e_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_004_src_data;                                                          // router_004:src_data -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                         // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [49:0] router_004_src_channel;                                                       // router_004:src_channel -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_004:sink_ready -> CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                        // rsp_mux_004:src_valid -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_004_src_data;                                                         // rsp_mux_004:src_data -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                        // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [49:0] rsp_mux_004_src_channel;                                                      // rsp_mux_004:src_channel -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                // rsp_mux_004:src_startofpacket -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                  // rsp_mux_004:src_endofpacket -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1d_p1_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1d_p1_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1d_p1_mm_bridge_0_m0_agent:rp_ready -> CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1d_p1_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1d_p1_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1d_p1_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1d_p1_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_005_src_valid;                                                         // router_005:src_valid -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_005_src_data;                                                          // router_005:src_data -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                         // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [49:0] router_005_src_channel;                                                       // router_005:src_channel -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                 // router_005:src_startofpacket -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                   // router_005:src_endofpacket -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_005:sink_ready -> CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                        // rsp_mux_005:src_valid -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_005_src_data;                                                         // rsp_mux_005:src_data -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                        // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [49:0] rsp_mux_005_src_channel;                                                      // rsp_mux_005:src_channel -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                // rsp_mux_005:src_startofpacket -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                  // rsp_mux_005:src_endofpacket -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1c_p1_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1c_p1_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1c_p1_mm_bridge_0_m0_agent:rp_ready -> CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1c_p1_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1c_p1_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1c_p1_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1c_p1_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_006_src_valid;                                                         // router_006:src_valid -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_006_src_data;                                                          // router_006:src_data -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_006_src_ready;                                                         // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_006:src_ready
	wire   [49:0] router_006_src_channel;                                                       // router_006:src_channel -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_006_src_startofpacket;                                                 // router_006:src_startofpacket -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_006_src_endofpacket;                                                   // router_006:src_endofpacket -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_006:sink_data
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_006:sink_ready -> CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_006:sink_channel
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          rsp_mux_006_src_valid;                                                        // rsp_mux_006:src_valid -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_006_src_data;                                                         // rsp_mux_006:src_data -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_006_src_ready;                                                        // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_006:src_ready
	wire   [49:0] rsp_mux_006_src_channel;                                                      // rsp_mux_006:src_channel -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_006_src_startofpacket;                                                // rsp_mux_006:src_startofpacket -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                  // rsp_mux_006:src_endofpacket -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1b_p2_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1b_p2_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1b_p2_mm_bridge_0_m0_agent:rp_ready -> CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1b_p2_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1b_p2_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1b_p2_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1b_p2_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_007_src_valid;                                                         // router_007:src_valid -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_007_src_data;                                                          // router_007:src_data -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                         // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [49:0] router_007_src_channel;                                                       // router_007:src_channel -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                 // router_007:src_startofpacket -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                   // router_007:src_endofpacket -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_007:sink_ready -> CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                        // rsp_mux_007:src_valid -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_007_src_data;                                                         // rsp_mux_007:src_data -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_007_src_ready;                                                        // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire   [49:0] rsp_mux_007_src_channel;                                                      // rsp_mux_007:src_channel -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_startofpacket;                                                // rsp_mux_007:src_startofpacket -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                  // rsp_mux_007:src_endofpacket -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1b_p3_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1b_p3_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1b_p3_mm_bridge_0_m0_agent:rp_ready -> CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1b_p3_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1b_p3_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1b_p3_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1b_p3_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_008_src_valid;                                                         // router_008:src_valid -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_008_src_data;                                                          // router_008:src_data -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_008_src_ready;                                                         // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_008:src_ready
	wire   [49:0] router_008_src_channel;                                                       // router_008:src_channel -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_008_src_startofpacket;                                                 // router_008:src_startofpacket -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_008_src_endofpacket;                                                   // router_008:src_endofpacket -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_008:sink_data
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_008:sink_ready -> CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_008:sink_channel
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          rsp_mux_008_src_valid;                                                        // rsp_mux_008:src_valid -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_008_src_data;                                                         // rsp_mux_008:src_data -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_008_src_ready;                                                        // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_008:src_ready
	wire   [49:0] rsp_mux_008_src_channel;                                                      // rsp_mux_008:src_channel -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_008_src_startofpacket;                                                // rsp_mux_008:src_startofpacket -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                  // rsp_mux_008:src_endofpacket -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1c_p2_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1c_p2_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1c_p2_mm_bridge_0_m0_agent:rp_ready -> CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1c_p2_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1c_p2_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1c_p2_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1c_p2_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_009_src_valid;                                                         // router_009:src_valid -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_009_src_data;                                                          // router_009:src_data -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_009_src_ready;                                                         // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_009:src_ready
	wire   [49:0] router_009_src_channel;                                                       // router_009:src_channel -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_009_src_startofpacket;                                                 // router_009:src_startofpacket -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_009_src_endofpacket;                                                   // router_009:src_endofpacket -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_009:sink_data
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_009:sink_ready -> CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_009:sink_channel
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          rsp_mux_009_src_valid;                                                        // rsp_mux_009:src_valid -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_009_src_data;                                                         // rsp_mux_009:src_data -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_009_src_ready;                                                        // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_009:src_ready
	wire   [49:0] rsp_mux_009_src_channel;                                                      // rsp_mux_009:src_channel -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_009_src_startofpacket;                                                // rsp_mux_009:src_startofpacket -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                  // rsp_mux_009:src_endofpacket -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1c_p3_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1c_p3_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1c_p3_mm_bridge_0_m0_agent:rp_ready -> CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1c_p3_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1c_p3_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1c_p3_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1c_p3_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_010_src_valid;                                                         // router_010:src_valid -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_010_src_data;                                                          // router_010:src_data -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_010_src_ready;                                                         // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_010:src_ready
	wire   [49:0] router_010_src_channel;                                                       // router_010:src_channel -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_010_src_startofpacket;                                                 // router_010:src_startofpacket -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_010_src_endofpacket;                                                   // router_010:src_endofpacket -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_010:sink_data
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_010:sink_ready -> CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_010:sink_channel
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          rsp_mux_010_src_valid;                                                        // rsp_mux_010:src_valid -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_010_src_data;                                                         // rsp_mux_010:src_data -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_010_src_ready;                                                        // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_010:src_ready
	wire   [49:0] rsp_mux_010_src_channel;                                                      // rsp_mux_010:src_channel -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_010_src_startofpacket;                                                // rsp_mux_010:src_startofpacket -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                  // rsp_mux_010:src_endofpacket -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1d_p2_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1d_p2_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1d_p2_mm_bridge_0_m0_agent:rp_ready -> CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1d_p2_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1d_p2_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1d_p2_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1d_p2_mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_011_src_valid;                                                         // router_011:src_valid -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [109:0] router_011_src_data;                                                          // router_011:src_data -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_011_src_ready;                                                         // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_ready -> router_011:src_ready
	wire   [49:0] router_011_src_channel;                                                       // router_011:src_channel -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_011_src_startofpacket;                                                 // router_011:src_startofpacket -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_011_src_endofpacket;                                                   // router_011:src_endofpacket -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_data;                                // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_011:sink_data
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux_011:sink_ready -> CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [49:0] cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_channel;                             // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_011:sink_channel
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_011:sink_endofpacket
	wire          rsp_mux_011_src_valid;                                                        // rsp_mux_011:src_valid -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_011_src_data;                                                         // rsp_mux_011:src_data -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_011_src_ready;                                                        // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_011:src_ready
	wire   [49:0] rsp_mux_011_src_channel;                                                      // rsp_mux_011:src_channel -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_011_src_startofpacket;                                                // rsp_mux_011:src_startofpacket -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                  // rsp_mux_011:src_endofpacket -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_valid;                               // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_valid -> CPU_1d_p3_mm_bridge_0_m0_agent:rp_valid
	wire  [109:0] cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_data;                                // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_data -> CPU_1d_p3_mm_bridge_0_m0_agent:rp_data
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_ready;                               // CPU_1d_p3_mm_bridge_0_m0_agent:rp_ready -> CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [49:0] cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_channel;                             // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_channel -> CPU_1d_p3_mm_bridge_0_m0_agent:rp_channel
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_startofpacket -> CPU_1d_p3_mm_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // CPU_1d_p3_mm_bridge_0_m0_limiter:rsp_src_endofpacket -> CPU_1d_p3_mm_bridge_0_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [109:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [49:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [109:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [49:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                         // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_src2_data;                                                          // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [49:0] cmd_demux_src2_channel;                                                       // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                 // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                   // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                         // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_src3_data;                                                          // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [49:0] cmd_demux_src3_channel;                                                       // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                 // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                   // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                         // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_src4_data;                                                          // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                         // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [49:0] cmd_demux_src4_channel;                                                       // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                 // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                   // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                         // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [109:0] cmd_demux_src5_data;                                                          // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                         // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [49:0] cmd_demux_src5_channel;                                                       // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                 // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                   // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                         // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [109:0] cmd_demux_src6_data;                                                          // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                         // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [49:0] cmd_demux_src6_channel;                                                       // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                 // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                   // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                         // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_src7_data;                                                          // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                         // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [49:0] cmd_demux_src7_channel;                                                       // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                 // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                   // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                         // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [109:0] cmd_demux_src8_data;                                                          // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                         // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [49:0] cmd_demux_src8_channel;                                                       // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                 // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                   // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                        // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [109:0] cmd_demux_src10_data;                                                         // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                        // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [49:0] cmd_demux_src10_channel;                                                      // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                  // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                        // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [109:0] cmd_demux_src11_data;                                                         // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                        // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [49:0] cmd_demux_src11_channel;                                                      // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                  // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                        // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [109:0] cmd_demux_src12_data;                                                         // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                        // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [49:0] cmd_demux_src12_channel;                                                      // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                  // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux_010:sink1_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux_010:sink1_ready -> cmd_demux_001:src0_ready
	wire   [49:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                     // cmd_demux_001:src1_valid -> cmd_mux_012:sink1_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                      // cmd_demux_001:src1_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src1_ready;                                                     // cmd_mux_012:sink1_ready -> cmd_demux_001:src1_ready
	wire   [49:0] cmd_demux_001_src1_channel;                                                   // cmd_demux_001:src1_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                             // cmd_demux_001:src1_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                               // cmd_demux_001:src1_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                     // cmd_demux_001:src2_valid -> cmd_mux_019:sink0_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                      // cmd_demux_001:src2_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src2_ready;                                                     // cmd_mux_019:sink0_ready -> cmd_demux_001:src2_ready
	wire   [49:0] cmd_demux_001_src2_channel;                                                   // cmd_demux_001:src2_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                             // cmd_demux_001:src2_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                               // cmd_demux_001:src2_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                     // cmd_demux_001:src3_valid -> cmd_mux_032:sink0_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                      // cmd_demux_001:src3_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_001_src3_ready;                                                     // cmd_mux_032:sink0_ready -> cmd_demux_001:src3_ready
	wire   [49:0] cmd_demux_001_src3_channel;                                                   // cmd_demux_001:src3_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                             // cmd_demux_001:src3_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                               // cmd_demux_001:src3_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                     // cmd_demux_001:src4_valid -> cmd_mux_033:sink0_valid
	wire  [109:0] cmd_demux_001_src4_data;                                                      // cmd_demux_001:src4_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_001_src4_ready;                                                     // cmd_mux_033:sink0_ready -> cmd_demux_001:src4_ready
	wire   [49:0] cmd_demux_001_src4_channel;                                                   // cmd_demux_001:src4_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                             // cmd_demux_001:src4_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                               // cmd_demux_001:src4_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                     // cmd_demux_001:src5_valid -> cmd_mux_034:sink0_valid
	wire  [109:0] cmd_demux_001_src5_data;                                                      // cmd_demux_001:src5_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_001_src5_ready;                                                     // cmd_mux_034:sink0_ready -> cmd_demux_001:src5_ready
	wire   [49:0] cmd_demux_001_src5_channel;                                                   // cmd_demux_001:src5_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                             // cmd_demux_001:src5_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                               // cmd_demux_001:src5_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                     // cmd_demux_001:src6_valid -> cmd_mux_035:sink0_valid
	wire  [109:0] cmd_demux_001_src6_data;                                                      // cmd_demux_001:src6_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_001_src6_ready;                                                     // cmd_mux_035:sink0_ready -> cmd_demux_001:src6_ready
	wire   [49:0] cmd_demux_001_src6_channel;                                                   // cmd_demux_001:src6_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                             // cmd_demux_001:src6_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                               // cmd_demux_001:src6_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                     // cmd_demux_001:src7_valid -> cmd_mux_036:sink0_valid
	wire  [109:0] cmd_demux_001_src7_data;                                                      // cmd_demux_001:src7_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_001_src7_ready;                                                     // cmd_mux_036:sink0_ready -> cmd_demux_001:src7_ready
	wire   [49:0] cmd_demux_001_src7_channel;                                                   // cmd_demux_001:src7_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                             // cmd_demux_001:src7_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                               // cmd_demux_001:src7_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                     // cmd_demux_002:src0_valid -> cmd_mux_006:sink1_valid
	wire  [109:0] cmd_demux_002_src0_data;                                                      // cmd_demux_002:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_002_src0_ready;                                                     // cmd_mux_006:sink1_ready -> cmd_demux_002:src0_ready
	wire   [49:0] cmd_demux_002_src0_channel;                                                   // cmd_demux_002:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                             // cmd_demux_002:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                               // cmd_demux_002:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                     // cmd_demux_002:src1_valid -> cmd_mux_012:sink2_valid
	wire  [109:0] cmd_demux_002_src1_data;                                                      // cmd_demux_002:src1_data -> cmd_mux_012:sink2_data
	wire          cmd_demux_002_src1_ready;                                                     // cmd_mux_012:sink2_ready -> cmd_demux_002:src1_ready
	wire   [49:0] cmd_demux_002_src1_channel;                                                   // cmd_demux_002:src1_channel -> cmd_mux_012:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                             // cmd_demux_002:src1_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                               // cmd_demux_002:src1_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                     // cmd_demux_002:src2_valid -> cmd_mux_041:sink0_valid
	wire  [109:0] cmd_demux_002_src2_data;                                                      // cmd_demux_002:src2_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_002_src2_ready;                                                     // cmd_mux_041:sink0_ready -> cmd_demux_002:src2_ready
	wire   [49:0] cmd_demux_002_src2_channel;                                                   // cmd_demux_002:src2_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                             // cmd_demux_002:src2_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                               // cmd_demux_002:src2_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                     // cmd_demux_002:src3_valid -> cmd_mux_043:sink0_valid
	wire  [109:0] cmd_demux_002_src3_data;                                                      // cmd_demux_002:src3_data -> cmd_mux_043:sink0_data
	wire          cmd_demux_002_src3_ready;                                                     // cmd_mux_043:sink0_ready -> cmd_demux_002:src3_ready
	wire   [49:0] cmd_demux_002_src3_channel;                                                   // cmd_demux_002:src3_channel -> cmd_mux_043:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                             // cmd_demux_002:src3_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                               // cmd_demux_002:src3_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                     // cmd_demux_002:src4_valid -> cmd_mux_044:sink0_valid
	wire  [109:0] cmd_demux_002_src4_data;                                                      // cmd_demux_002:src4_data -> cmd_mux_044:sink0_data
	wire          cmd_demux_002_src4_ready;                                                     // cmd_mux_044:sink0_ready -> cmd_demux_002:src4_ready
	wire   [49:0] cmd_demux_002_src4_channel;                                                   // cmd_demux_002:src4_channel -> cmd_mux_044:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                             // cmd_demux_002:src4_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                               // cmd_demux_002:src4_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                     // cmd_demux_003:src0_valid -> cmd_mux_012:sink3_valid
	wire  [109:0] cmd_demux_003_src0_data;                                                      // cmd_demux_003:src0_data -> cmd_mux_012:sink3_data
	wire          cmd_demux_003_src0_ready;                                                     // cmd_mux_012:sink3_ready -> cmd_demux_003:src0_ready
	wire   [49:0] cmd_demux_003_src0_channel;                                                   // cmd_demux_003:src0_channel -> cmd_mux_012:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                             // cmd_demux_003:src0_startofpacket -> cmd_mux_012:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                               // cmd_demux_003:src0_endofpacket -> cmd_mux_012:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                     // cmd_demux_003:src1_valid -> cmd_mux_015:sink0_valid
	wire  [109:0] cmd_demux_003_src1_data;                                                      // cmd_demux_003:src1_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_003_src1_ready;                                                     // cmd_mux_015:sink0_ready -> cmd_demux_003:src1_ready
	wire   [49:0] cmd_demux_003_src1_channel;                                                   // cmd_demux_003:src1_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_003_src1_startofpacket;                                             // cmd_demux_003:src1_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                               // cmd_demux_003:src1_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_003_src2_valid;                                                     // cmd_demux_003:src2_valid -> cmd_mux_017:sink0_valid
	wire  [109:0] cmd_demux_003_src2_data;                                                      // cmd_demux_003:src2_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_003_src2_ready;                                                     // cmd_mux_017:sink0_ready -> cmd_demux_003:src2_ready
	wire   [49:0] cmd_demux_003_src2_channel;                                                   // cmd_demux_003:src2_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_003_src2_startofpacket;                                             // cmd_demux_003:src2_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                               // cmd_demux_003:src2_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_003_src3_valid;                                                     // cmd_demux_003:src3_valid -> cmd_mux_018:sink0_valid
	wire  [109:0] cmd_demux_003_src3_data;                                                      // cmd_demux_003:src3_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_003_src3_ready;                                                     // cmd_mux_018:sink0_ready -> cmd_demux_003:src3_ready
	wire   [49:0] cmd_demux_003_src3_channel;                                                   // cmd_demux_003:src3_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_003_src3_startofpacket;                                             // cmd_demux_003:src3_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                               // cmd_demux_003:src3_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_003_src4_valid;                                                     // cmd_demux_003:src4_valid -> cmd_mux_019:sink1_valid
	wire  [109:0] cmd_demux_003_src4_data;                                                      // cmd_demux_003:src4_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_003_src4_ready;                                                     // cmd_mux_019:sink1_ready -> cmd_demux_003:src4_ready
	wire   [49:0] cmd_demux_003_src4_channel;                                                   // cmd_demux_003:src4_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                             // cmd_demux_003:src4_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                               // cmd_demux_003:src4_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                     // cmd_demux_003:src5_valid -> cmd_mux_020:sink0_valid
	wire  [109:0] cmd_demux_003_src5_data;                                                      // cmd_demux_003:src5_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_003_src5_ready;                                                     // cmd_mux_020:sink0_ready -> cmd_demux_003:src5_ready
	wire   [49:0] cmd_demux_003_src5_channel;                                                   // cmd_demux_003:src5_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_003_src5_startofpacket;                                             // cmd_demux_003:src5_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                               // cmd_demux_003:src5_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_003_src6_valid;                                                     // cmd_demux_003:src6_valid -> cmd_mux_021:sink0_valid
	wire  [109:0] cmd_demux_003_src6_data;                                                      // cmd_demux_003:src6_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_003_src6_ready;                                                     // cmd_mux_021:sink0_ready -> cmd_demux_003:src6_ready
	wire   [49:0] cmd_demux_003_src6_channel;                                                   // cmd_demux_003:src6_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_003_src6_startofpacket;                                             // cmd_demux_003:src6_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                               // cmd_demux_003:src6_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_003_src7_valid;                                                     // cmd_demux_003:src7_valid -> cmd_mux_022:sink0_valid
	wire  [109:0] cmd_demux_003_src7_data;                                                      // cmd_demux_003:src7_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_003_src7_ready;                                                     // cmd_mux_022:sink0_ready -> cmd_demux_003:src7_ready
	wire   [49:0] cmd_demux_003_src7_channel;                                                   // cmd_demux_003:src7_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_003_src7_startofpacket;                                             // cmd_demux_003:src7_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                               // cmd_demux_003:src7_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_003_src8_valid;                                                     // cmd_demux_003:src8_valid -> cmd_mux_023:sink0_valid
	wire  [109:0] cmd_demux_003_src8_data;                                                      // cmd_demux_003:src8_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_003_src8_ready;                                                     // cmd_mux_023:sink0_ready -> cmd_demux_003:src8_ready
	wire   [49:0] cmd_demux_003_src8_channel;                                                   // cmd_demux_003:src8_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_003_src8_startofpacket;                                             // cmd_demux_003:src8_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                               // cmd_demux_003:src8_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                     // cmd_demux_004:src0_valid -> cmd_mux_012:sink4_valid
	wire  [109:0] cmd_demux_004_src0_data;                                                      // cmd_demux_004:src0_data -> cmd_mux_012:sink4_data
	wire          cmd_demux_004_src0_ready;                                                     // cmd_mux_012:sink4_ready -> cmd_demux_004:src0_ready
	wire   [49:0] cmd_demux_004_src0_channel;                                                   // cmd_demux_004:src0_channel -> cmd_mux_012:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                             // cmd_demux_004:src0_startofpacket -> cmd_mux_012:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                               // cmd_demux_004:src0_endofpacket -> cmd_mux_012:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                     // cmd_demux_004:src1_valid -> cmd_mux_018:sink1_valid
	wire  [109:0] cmd_demux_004_src1_data;                                                      // cmd_demux_004:src1_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_004_src1_ready;                                                     // cmd_mux_018:sink1_ready -> cmd_demux_004:src1_ready
	wire   [49:0] cmd_demux_004_src1_channel;                                                   // cmd_demux_004:src1_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_004_src1_startofpacket;                                             // cmd_demux_004:src1_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                               // cmd_demux_004:src1_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_004_src2_valid;                                                     // cmd_demux_004:src2_valid -> cmd_mux_037:sink0_valid
	wire  [109:0] cmd_demux_004_src2_data;                                                      // cmd_demux_004:src2_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_004_src2_ready;                                                     // cmd_mux_037:sink0_ready -> cmd_demux_004:src2_ready
	wire   [49:0] cmd_demux_004_src2_channel;                                                   // cmd_demux_004:src2_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_004_src2_startofpacket;                                             // cmd_demux_004:src2_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                               // cmd_demux_004:src2_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_004_src3_valid;                                                     // cmd_demux_004:src3_valid -> cmd_mux_038:sink0_valid
	wire  [109:0] cmd_demux_004_src3_data;                                                      // cmd_demux_004:src3_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_004_src3_ready;                                                     // cmd_mux_038:sink0_ready -> cmd_demux_004:src3_ready
	wire   [49:0] cmd_demux_004_src3_channel;                                                   // cmd_demux_004:src3_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_004_src3_startofpacket;                                             // cmd_demux_004:src3_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                               // cmd_demux_004:src3_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_004_src4_valid;                                                     // cmd_demux_004:src4_valid -> cmd_mux_039:sink0_valid
	wire  [109:0] cmd_demux_004_src4_data;                                                      // cmd_demux_004:src4_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_004_src4_ready;                                                     // cmd_mux_039:sink0_ready -> cmd_demux_004:src4_ready
	wire   [49:0] cmd_demux_004_src4_channel;                                                   // cmd_demux_004:src4_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_004_src4_startofpacket;                                             // cmd_demux_004:src4_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                               // cmd_demux_004:src4_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_005_src0_valid;                                                     // cmd_demux_005:src0_valid -> cmd_mux_012:sink5_valid
	wire  [109:0] cmd_demux_005_src0_data;                                                      // cmd_demux_005:src0_data -> cmd_mux_012:sink5_data
	wire          cmd_demux_005_src0_ready;                                                     // cmd_mux_012:sink5_ready -> cmd_demux_005:src0_ready
	wire   [49:0] cmd_demux_005_src0_channel;                                                   // cmd_demux_005:src0_channel -> cmd_mux_012:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                             // cmd_demux_005:src0_startofpacket -> cmd_mux_012:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                               // cmd_demux_005:src0_endofpacket -> cmd_mux_012:sink5_endofpacket
	wire          cmd_demux_005_src1_valid;                                                     // cmd_demux_005:src1_valid -> cmd_mux_038:sink1_valid
	wire  [109:0] cmd_demux_005_src1_data;                                                      // cmd_demux_005:src1_data -> cmd_mux_038:sink1_data
	wire          cmd_demux_005_src1_ready;                                                     // cmd_mux_038:sink1_ready -> cmd_demux_005:src1_ready
	wire   [49:0] cmd_demux_005_src1_channel;                                                   // cmd_demux_005:src1_channel -> cmd_mux_038:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                             // cmd_demux_005:src1_startofpacket -> cmd_mux_038:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                               // cmd_demux_005:src1_endofpacket -> cmd_mux_038:sink1_endofpacket
	wire          cmd_demux_005_src2_valid;                                                     // cmd_demux_005:src2_valid -> cmd_mux_040:sink0_valid
	wire  [109:0] cmd_demux_005_src2_data;                                                      // cmd_demux_005:src2_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_005_src2_ready;                                                     // cmd_mux_040:sink0_ready -> cmd_demux_005:src2_ready
	wire   [49:0] cmd_demux_005_src2_channel;                                                   // cmd_demux_005:src2_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_005_src2_startofpacket;                                             // cmd_demux_005:src2_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                               // cmd_demux_005:src2_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_005_src3_valid;                                                     // cmd_demux_005:src3_valid -> cmd_mux_041:sink1_valid
	wire  [109:0] cmd_demux_005_src3_data;                                                      // cmd_demux_005:src3_data -> cmd_mux_041:sink1_data
	wire          cmd_demux_005_src3_ready;                                                     // cmd_mux_041:sink1_ready -> cmd_demux_005:src3_ready
	wire   [49:0] cmd_demux_005_src3_channel;                                                   // cmd_demux_005:src3_channel -> cmd_mux_041:sink1_channel
	wire          cmd_demux_005_src3_startofpacket;                                             // cmd_demux_005:src3_startofpacket -> cmd_mux_041:sink1_startofpacket
	wire          cmd_demux_005_src3_endofpacket;                                               // cmd_demux_005:src3_endofpacket -> cmd_mux_041:sink1_endofpacket
	wire          cmd_demux_005_src4_valid;                                                     // cmd_demux_005:src4_valid -> cmd_mux_042:sink0_valid
	wire  [109:0] cmd_demux_005_src4_data;                                                      // cmd_demux_005:src4_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_005_src4_ready;                                                     // cmd_mux_042:sink0_ready -> cmd_demux_005:src4_ready
	wire   [49:0] cmd_demux_005_src4_channel;                                                   // cmd_demux_005:src4_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_005_src4_startofpacket;                                             // cmd_demux_005:src4_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_005_src4_endofpacket;                                               // cmd_demux_005:src4_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_006_src0_valid;                                                     // cmd_demux_006:src0_valid -> cmd_mux_007:sink1_valid
	wire  [109:0] cmd_demux_006_src0_data;                                                      // cmd_demux_006:src0_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_006_src0_ready;                                                     // cmd_mux_007:sink1_ready -> cmd_demux_006:src0_ready
	wire   [49:0] cmd_demux_006_src0_channel;                                                   // cmd_demux_006:src0_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_006_src0_startofpacket;                                             // cmd_demux_006:src0_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                               // cmd_demux_006:src0_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_006_src1_valid;                                                     // cmd_demux_006:src1_valid -> cmd_mux_012:sink6_valid
	wire  [109:0] cmd_demux_006_src1_data;                                                      // cmd_demux_006:src1_data -> cmd_mux_012:sink6_data
	wire          cmd_demux_006_src1_ready;                                                     // cmd_mux_012:sink6_ready -> cmd_demux_006:src1_ready
	wire   [49:0] cmd_demux_006_src1_channel;                                                   // cmd_demux_006:src1_channel -> cmd_mux_012:sink6_channel
	wire          cmd_demux_006_src1_startofpacket;                                             // cmd_demux_006:src1_startofpacket -> cmd_mux_012:sink6_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                               // cmd_demux_006:src1_endofpacket -> cmd_mux_012:sink6_endofpacket
	wire          cmd_demux_006_src2_valid;                                                     // cmd_demux_006:src2_valid -> cmd_mux_028:sink0_valid
	wire  [109:0] cmd_demux_006_src2_data;                                                      // cmd_demux_006:src2_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_006_src2_ready;                                                     // cmd_mux_028:sink0_ready -> cmd_demux_006:src2_ready
	wire   [49:0] cmd_demux_006_src2_channel;                                                   // cmd_demux_006:src2_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_006_src2_startofpacket;                                             // cmd_demux_006:src2_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_006_src2_endofpacket;                                               // cmd_demux_006:src2_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_006_src3_valid;                                                     // cmd_demux_006:src3_valid -> cmd_mux_030:sink0_valid
	wire  [109:0] cmd_demux_006_src3_data;                                                      // cmd_demux_006:src3_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_006_src3_ready;                                                     // cmd_mux_030:sink0_ready -> cmd_demux_006:src3_ready
	wire   [49:0] cmd_demux_006_src3_channel;                                                   // cmd_demux_006:src3_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_006_src3_startofpacket;                                             // cmd_demux_006:src3_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_006_src3_endofpacket;                                               // cmd_demux_006:src3_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_006_src4_valid;                                                     // cmd_demux_006:src4_valid -> cmd_mux_031:sink0_valid
	wire  [109:0] cmd_demux_006_src4_data;                                                      // cmd_demux_006:src4_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_006_src4_ready;                                                     // cmd_mux_031:sink0_ready -> cmd_demux_006:src4_ready
	wire   [49:0] cmd_demux_006_src4_channel;                                                   // cmd_demux_006:src4_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_006_src4_startofpacket;                                             // cmd_demux_006:src4_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_006_src4_endofpacket;                                               // cmd_demux_006:src4_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_007_src0_valid;                                                     // cmd_demux_007:src0_valid -> cmd_mux_008:sink1_valid
	wire  [109:0] cmd_demux_007_src0_data;                                                      // cmd_demux_007:src0_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_007_src0_ready;                                                     // cmd_mux_008:sink1_ready -> cmd_demux_007:src0_ready
	wire   [49:0] cmd_demux_007_src0_channel;                                                   // cmd_demux_007:src0_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_007_src0_startofpacket;                                             // cmd_demux_007:src0_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                               // cmd_demux_007:src0_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_007_src1_valid;                                                     // cmd_demux_007:src1_valid -> cmd_mux_012:sink7_valid
	wire  [109:0] cmd_demux_007_src1_data;                                                      // cmd_demux_007:src1_data -> cmd_mux_012:sink7_data
	wire          cmd_demux_007_src1_ready;                                                     // cmd_mux_012:sink7_ready -> cmd_demux_007:src1_ready
	wire   [49:0] cmd_demux_007_src1_channel;                                                   // cmd_demux_007:src1_channel -> cmd_mux_012:sink7_channel
	wire          cmd_demux_007_src1_startofpacket;                                             // cmd_demux_007:src1_startofpacket -> cmd_mux_012:sink7_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                               // cmd_demux_007:src1_endofpacket -> cmd_mux_012:sink7_endofpacket
	wire          cmd_demux_007_src2_valid;                                                     // cmd_demux_007:src2_valid -> cmd_mux_046:sink0_valid
	wire  [109:0] cmd_demux_007_src2_data;                                                      // cmd_demux_007:src2_data -> cmd_mux_046:sink0_data
	wire          cmd_demux_007_src2_ready;                                                     // cmd_mux_046:sink0_ready -> cmd_demux_007:src2_ready
	wire   [49:0] cmd_demux_007_src2_channel;                                                   // cmd_demux_007:src2_channel -> cmd_mux_046:sink0_channel
	wire          cmd_demux_007_src2_startofpacket;                                             // cmd_demux_007:src2_startofpacket -> cmd_mux_046:sink0_startofpacket
	wire          cmd_demux_007_src2_endofpacket;                                               // cmd_demux_007:src2_endofpacket -> cmd_mux_046:sink0_endofpacket
	wire          cmd_demux_007_src3_valid;                                                     // cmd_demux_007:src3_valid -> cmd_mux_048:sink0_valid
	wire  [109:0] cmd_demux_007_src3_data;                                                      // cmd_demux_007:src3_data -> cmd_mux_048:sink0_data
	wire          cmd_demux_007_src3_ready;                                                     // cmd_mux_048:sink0_ready -> cmd_demux_007:src3_ready
	wire   [49:0] cmd_demux_007_src3_channel;                                                   // cmd_demux_007:src3_channel -> cmd_mux_048:sink0_channel
	wire          cmd_demux_007_src3_startofpacket;                                             // cmd_demux_007:src3_startofpacket -> cmd_mux_048:sink0_startofpacket
	wire          cmd_demux_007_src3_endofpacket;                                               // cmd_demux_007:src3_endofpacket -> cmd_mux_048:sink0_endofpacket
	wire          cmd_demux_007_src4_valid;                                                     // cmd_demux_007:src4_valid -> cmd_mux_049:sink0_valid
	wire  [109:0] cmd_demux_007_src4_data;                                                      // cmd_demux_007:src4_data -> cmd_mux_049:sink0_data
	wire          cmd_demux_007_src4_ready;                                                     // cmd_mux_049:sink0_ready -> cmd_demux_007:src4_ready
	wire   [49:0] cmd_demux_007_src4_channel;                                                   // cmd_demux_007:src4_channel -> cmd_mux_049:sink0_channel
	wire          cmd_demux_007_src4_startofpacket;                                             // cmd_demux_007:src4_startofpacket -> cmd_mux_049:sink0_startofpacket
	wire          cmd_demux_007_src4_endofpacket;                                               // cmd_demux_007:src4_endofpacket -> cmd_mux_049:sink0_endofpacket
	wire          cmd_demux_008_src0_valid;                                                     // cmd_demux_008:src0_valid -> cmd_mux_012:sink8_valid
	wire  [109:0] cmd_demux_008_src0_data;                                                      // cmd_demux_008:src0_data -> cmd_mux_012:sink8_data
	wire          cmd_demux_008_src0_ready;                                                     // cmd_mux_012:sink8_ready -> cmd_demux_008:src0_ready
	wire   [49:0] cmd_demux_008_src0_channel;                                                   // cmd_demux_008:src0_channel -> cmd_mux_012:sink8_channel
	wire          cmd_demux_008_src0_startofpacket;                                             // cmd_demux_008:src0_startofpacket -> cmd_mux_012:sink8_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                               // cmd_demux_008:src0_endofpacket -> cmd_mux_012:sink8_endofpacket
	wire          cmd_demux_008_src1_valid;                                                     // cmd_demux_008:src1_valid -> cmd_mux_025:sink0_valid
	wire  [109:0] cmd_demux_008_src1_data;                                                      // cmd_demux_008:src1_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_008_src1_ready;                                                     // cmd_mux_025:sink0_ready -> cmd_demux_008:src1_ready
	wire   [49:0] cmd_demux_008_src1_channel;                                                   // cmd_demux_008:src1_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_008_src1_startofpacket;                                             // cmd_demux_008:src1_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_008_src1_endofpacket;                                               // cmd_demux_008:src1_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_008_src2_valid;                                                     // cmd_demux_008:src2_valid -> cmd_mux_027:sink0_valid
	wire  [109:0] cmd_demux_008_src2_data;                                                      // cmd_demux_008:src2_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_008_src2_ready;                                                     // cmd_mux_027:sink0_ready -> cmd_demux_008:src2_ready
	wire   [49:0] cmd_demux_008_src2_channel;                                                   // cmd_demux_008:src2_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_008_src2_startofpacket;                                             // cmd_demux_008:src2_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_008_src2_endofpacket;                                               // cmd_demux_008:src2_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_008_src3_valid;                                                     // cmd_demux_008:src3_valid -> cmd_mux_028:sink1_valid
	wire  [109:0] cmd_demux_008_src3_data;                                                      // cmd_demux_008:src3_data -> cmd_mux_028:sink1_data
	wire          cmd_demux_008_src3_ready;                                                     // cmd_mux_028:sink1_ready -> cmd_demux_008:src3_ready
	wire   [49:0] cmd_demux_008_src3_channel;                                                   // cmd_demux_008:src3_channel -> cmd_mux_028:sink1_channel
	wire          cmd_demux_008_src3_startofpacket;                                             // cmd_demux_008:src3_startofpacket -> cmd_mux_028:sink1_startofpacket
	wire          cmd_demux_008_src3_endofpacket;                                               // cmd_demux_008:src3_endofpacket -> cmd_mux_028:sink1_endofpacket
	wire          cmd_demux_008_src4_valid;                                                     // cmd_demux_008:src4_valid -> cmd_mux_029:sink0_valid
	wire  [109:0] cmd_demux_008_src4_data;                                                      // cmd_demux_008:src4_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_008_src4_ready;                                                     // cmd_mux_029:sink0_ready -> cmd_demux_008:src4_ready
	wire   [49:0] cmd_demux_008_src4_channel;                                                   // cmd_demux_008:src4_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_008_src4_startofpacket;                                             // cmd_demux_008:src4_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_008_src4_endofpacket;                                               // cmd_demux_008:src4_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_009_src0_valid;                                                     // cmd_demux_009:src0_valid -> cmd_mux_012:sink9_valid
	wire  [109:0] cmd_demux_009_src0_data;                                                      // cmd_demux_009:src0_data -> cmd_mux_012:sink9_data
	wire          cmd_demux_009_src0_ready;                                                     // cmd_mux_012:sink9_ready -> cmd_demux_009:src0_ready
	wire   [49:0] cmd_demux_009_src0_channel;                                                   // cmd_demux_009:src0_channel -> cmd_mux_012:sink9_channel
	wire          cmd_demux_009_src0_startofpacket;                                             // cmd_demux_009:src0_startofpacket -> cmd_mux_012:sink9_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                               // cmd_demux_009:src0_endofpacket -> cmd_mux_012:sink9_endofpacket
	wire          cmd_demux_009_src1_valid;                                                     // cmd_demux_009:src1_valid -> cmd_mux_014:sink0_valid
	wire  [109:0] cmd_demux_009_src1_data;                                                      // cmd_demux_009:src1_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_009_src1_ready;                                                     // cmd_mux_014:sink0_ready -> cmd_demux_009:src1_ready
	wire   [49:0] cmd_demux_009_src1_channel;                                                   // cmd_demux_009:src1_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_009_src1_startofpacket;                                             // cmd_demux_009:src1_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_009_src1_endofpacket;                                               // cmd_demux_009:src1_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_009_src2_valid;                                                     // cmd_demux_009:src2_valid -> cmd_mux_045:sink0_valid
	wire  [109:0] cmd_demux_009_src2_data;                                                      // cmd_demux_009:src2_data -> cmd_mux_045:sink0_data
	wire          cmd_demux_009_src2_ready;                                                     // cmd_mux_045:sink0_ready -> cmd_demux_009:src2_ready
	wire   [49:0] cmd_demux_009_src2_channel;                                                   // cmd_demux_009:src2_channel -> cmd_mux_045:sink0_channel
	wire          cmd_demux_009_src2_startofpacket;                                             // cmd_demux_009:src2_startofpacket -> cmd_mux_045:sink0_startofpacket
	wire          cmd_demux_009_src2_endofpacket;                                               // cmd_demux_009:src2_endofpacket -> cmd_mux_045:sink0_endofpacket
	wire          cmd_demux_009_src3_valid;                                                     // cmd_demux_009:src3_valid -> cmd_mux_046:sink1_valid
	wire  [109:0] cmd_demux_009_src3_data;                                                      // cmd_demux_009:src3_data -> cmd_mux_046:sink1_data
	wire          cmd_demux_009_src3_ready;                                                     // cmd_mux_046:sink1_ready -> cmd_demux_009:src3_ready
	wire   [49:0] cmd_demux_009_src3_channel;                                                   // cmd_demux_009:src3_channel -> cmd_mux_046:sink1_channel
	wire          cmd_demux_009_src3_startofpacket;                                             // cmd_demux_009:src3_startofpacket -> cmd_mux_046:sink1_startofpacket
	wire          cmd_demux_009_src3_endofpacket;                                               // cmd_demux_009:src3_endofpacket -> cmd_mux_046:sink1_endofpacket
	wire          cmd_demux_009_src4_valid;                                                     // cmd_demux_009:src4_valid -> cmd_mux_047:sink0_valid
	wire  [109:0] cmd_demux_009_src4_data;                                                      // cmd_demux_009:src4_data -> cmd_mux_047:sink0_data
	wire          cmd_demux_009_src4_ready;                                                     // cmd_mux_047:sink0_ready -> cmd_demux_009:src4_ready
	wire   [49:0] cmd_demux_009_src4_channel;                                                   // cmd_demux_009:src4_channel -> cmd_mux_047:sink0_channel
	wire          cmd_demux_009_src4_startofpacket;                                             // cmd_demux_009:src4_startofpacket -> cmd_mux_047:sink0_startofpacket
	wire          cmd_demux_009_src4_endofpacket;                                               // cmd_demux_009:src4_endofpacket -> cmd_mux_047:sink0_endofpacket
	wire          cmd_demux_010_src0_valid;                                                     // cmd_demux_010:src0_valid -> cmd_mux_012:sink10_valid
	wire  [109:0] cmd_demux_010_src0_data;                                                      // cmd_demux_010:src0_data -> cmd_mux_012:sink10_data
	wire          cmd_demux_010_src0_ready;                                                     // cmd_mux_012:sink10_ready -> cmd_demux_010:src0_ready
	wire   [49:0] cmd_demux_010_src0_channel;                                                   // cmd_demux_010:src0_channel -> cmd_mux_012:sink10_channel
	wire          cmd_demux_010_src0_startofpacket;                                             // cmd_demux_010:src0_startofpacket -> cmd_mux_012:sink10_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                               // cmd_demux_010:src0_endofpacket -> cmd_mux_012:sink10_endofpacket
	wire          cmd_demux_010_src1_valid;                                                     // cmd_demux_010:src1_valid -> cmd_mux_020:sink1_valid
	wire  [109:0] cmd_demux_010_src1_data;                                                      // cmd_demux_010:src1_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_010_src1_ready;                                                     // cmd_mux_020:sink1_ready -> cmd_demux_010:src1_ready
	wire   [49:0] cmd_demux_010_src1_channel;                                                   // cmd_demux_010:src1_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_010_src1_startofpacket;                                             // cmd_demux_010:src1_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_010_src1_endofpacket;                                               // cmd_demux_010:src1_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_010_src2_valid;                                                     // cmd_demux_010:src2_valid -> cmd_mux_024:sink0_valid
	wire  [109:0] cmd_demux_010_src2_data;                                                      // cmd_demux_010:src2_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_010_src2_ready;                                                     // cmd_mux_024:sink0_ready -> cmd_demux_010:src2_ready
	wire   [49:0] cmd_demux_010_src2_channel;                                                   // cmd_demux_010:src2_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_010_src2_startofpacket;                                             // cmd_demux_010:src2_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_010_src2_endofpacket;                                               // cmd_demux_010:src2_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_010_src3_valid;                                                     // cmd_demux_010:src3_valid -> cmd_mux_025:sink1_valid
	wire  [109:0] cmd_demux_010_src3_data;                                                      // cmd_demux_010:src3_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_010_src3_ready;                                                     // cmd_mux_025:sink1_ready -> cmd_demux_010:src3_ready
	wire   [49:0] cmd_demux_010_src3_channel;                                                   // cmd_demux_010:src3_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_010_src3_startofpacket;                                             // cmd_demux_010:src3_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_010_src3_endofpacket;                                               // cmd_demux_010:src3_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_010_src4_valid;                                                     // cmd_demux_010:src4_valid -> cmd_mux_026:sink0_valid
	wire  [109:0] cmd_demux_010_src4_data;                                                      // cmd_demux_010:src4_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_010_src4_ready;                                                     // cmd_mux_026:sink0_ready -> cmd_demux_010:src4_ready
	wire   [49:0] cmd_demux_010_src4_channel;                                                   // cmd_demux_010:src4_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_010_src4_startofpacket;                                             // cmd_demux_010:src4_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_010_src4_endofpacket;                                               // cmd_demux_010:src4_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_011_src0_valid;                                                     // cmd_demux_011:src0_valid -> cmd_mux_012:sink11_valid
	wire  [109:0] cmd_demux_011_src0_data;                                                      // cmd_demux_011:src0_data -> cmd_mux_012:sink11_data
	wire          cmd_demux_011_src0_ready;                                                     // cmd_mux_012:sink11_ready -> cmd_demux_011:src0_ready
	wire   [49:0] cmd_demux_011_src0_channel;                                                   // cmd_demux_011:src0_channel -> cmd_mux_012:sink11_channel
	wire          cmd_demux_011_src0_startofpacket;                                             // cmd_demux_011:src0_startofpacket -> cmd_mux_012:sink11_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                               // cmd_demux_011:src0_endofpacket -> cmd_mux_012:sink11_endofpacket
	wire          cmd_demux_011_src1_valid;                                                     // cmd_demux_011:src1_valid -> cmd_mux_013:sink0_valid
	wire  [109:0] cmd_demux_011_src1_data;                                                      // cmd_demux_011:src1_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_011_src1_ready;                                                     // cmd_mux_013:sink0_ready -> cmd_demux_011:src1_ready
	wire   [49:0] cmd_demux_011_src1_channel;                                                   // cmd_demux_011:src1_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_011_src1_startofpacket;                                             // cmd_demux_011:src1_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_011_src1_endofpacket;                                               // cmd_demux_011:src1_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_011_src2_valid;                                                     // cmd_demux_011:src2_valid -> cmd_mux_014:sink1_valid
	wire  [109:0] cmd_demux_011_src2_data;                                                      // cmd_demux_011:src2_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_011_src2_ready;                                                     // cmd_mux_014:sink1_ready -> cmd_demux_011:src2_ready
	wire   [49:0] cmd_demux_011_src2_channel;                                                   // cmd_demux_011:src2_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_011_src2_startofpacket;                                             // cmd_demux_011:src2_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_011_src2_endofpacket;                                               // cmd_demux_011:src2_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_011_src3_valid;                                                     // cmd_demux_011:src3_valid -> cmd_mux_015:sink1_valid
	wire  [109:0] cmd_demux_011_src3_data;                                                      // cmd_demux_011:src3_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_011_src3_ready;                                                     // cmd_mux_015:sink1_ready -> cmd_demux_011:src3_ready
	wire   [49:0] cmd_demux_011_src3_channel;                                                   // cmd_demux_011:src3_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_011_src3_startofpacket;                                             // cmd_demux_011:src3_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_011_src3_endofpacket;                                               // cmd_demux_011:src3_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_011_src4_valid;                                                     // cmd_demux_011:src4_valid -> cmd_mux_016:sink0_valid
	wire  [109:0] cmd_demux_011_src4_data;                                                      // cmd_demux_011:src4_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_011_src4_ready;                                                     // cmd_mux_016:sink0_ready -> cmd_demux_011:src4_ready
	wire   [49:0] cmd_demux_011_src4_channel;                                                   // cmd_demux_011:src4_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_011_src4_startofpacket;                                             // cmd_demux_011:src4_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_011_src4_endofpacket;                                               // cmd_demux_011:src4_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_012_src0_valid;                                                     // cmd_demux_012:src0_valid -> cmd_mux_010:sink2_valid
	wire  [109:0] cmd_demux_012_src0_data;                                                      // cmd_demux_012:src0_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_012_src0_ready;                                                     // cmd_mux_010:sink2_ready -> cmd_demux_012:src0_ready
	wire   [49:0] cmd_demux_012_src0_channel;                                                   // cmd_demux_012:src0_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_012_src0_startofpacket;                                             // cmd_demux_012:src0_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_012_src0_endofpacket;                                               // cmd_demux_012:src0_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_012_src1_valid;                                                     // cmd_demux_012:src1_valid -> cmd_mux_034:sink1_valid
	wire  [109:0] cmd_demux_012_src1_data;                                                      // cmd_demux_012:src1_data -> cmd_mux_034:sink1_data
	wire          cmd_demux_012_src1_ready;                                                     // cmd_mux_034:sink1_ready -> cmd_demux_012:src1_ready
	wire   [49:0] cmd_demux_012_src1_channel;                                                   // cmd_demux_012:src1_channel -> cmd_mux_034:sink1_channel
	wire          cmd_demux_012_src1_startofpacket;                                             // cmd_demux_012:src1_startofpacket -> cmd_mux_034:sink1_startofpacket
	wire          cmd_demux_012_src1_endofpacket;                                               // cmd_demux_012:src1_endofpacket -> cmd_mux_034:sink1_endofpacket
	wire          cmd_demux_013_src0_valid;                                                     // cmd_demux_013:src0_valid -> cmd_mux_002:sink1_valid
	wire  [109:0] cmd_demux_013_src0_data;                                                      // cmd_demux_013:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_013_src0_ready;                                                     // cmd_mux_002:sink1_ready -> cmd_demux_013:src0_ready
	wire   [49:0] cmd_demux_013_src0_channel;                                                   // cmd_demux_013:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_013_src0_startofpacket;                                             // cmd_demux_013:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_013_src0_endofpacket;                                               // cmd_demux_013:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_013_src1_valid;                                                     // cmd_demux_013:src1_valid -> cmd_mux_010:sink3_valid
	wire  [109:0] cmd_demux_013_src1_data;                                                      // cmd_demux_013:src1_data -> cmd_mux_010:sink3_data
	wire          cmd_demux_013_src1_ready;                                                     // cmd_mux_010:sink3_ready -> cmd_demux_013:src1_ready
	wire   [49:0] cmd_demux_013_src1_channel;                                                   // cmd_demux_013:src1_channel -> cmd_mux_010:sink3_channel
	wire          cmd_demux_013_src1_startofpacket;                                             // cmd_demux_013:src1_startofpacket -> cmd_mux_010:sink3_startofpacket
	wire          cmd_demux_013_src1_endofpacket;                                               // cmd_demux_013:src1_endofpacket -> cmd_mux_010:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [109:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [49:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [109:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [49:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                     // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [49:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                     // rsp_demux_002:src1_valid -> rsp_mux_013:sink0_valid
	wire  [109:0] rsp_demux_002_src1_data;                                                      // rsp_demux_002:src1_data -> rsp_mux_013:sink0_data
	wire          rsp_demux_002_src1_ready;                                                     // rsp_mux_013:sink0_ready -> rsp_demux_002:src1_ready
	wire   [49:0] rsp_demux_002_src1_channel;                                                   // rsp_demux_002:src1_channel -> rsp_mux_013:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                             // rsp_demux_002:src1_startofpacket -> rsp_mux_013:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                               // rsp_demux_002:src1_endofpacket -> rsp_mux_013:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                     // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [49:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                     // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                      // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                     // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [49:0] rsp_demux_004_src0_channel;                                                   // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                             // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                               // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                     // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [109:0] rsp_demux_005_src0_data;                                                      // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                     // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [49:0] rsp_demux_005_src0_channel;                                                   // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                             // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                               // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                     // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [109:0] rsp_demux_006_src0_data;                                                      // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                     // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [49:0] rsp_demux_006_src0_channel;                                                   // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                             // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                               // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                     // rsp_demux_006:src1_valid -> rsp_mux_002:sink0_valid
	wire  [109:0] rsp_demux_006_src1_data;                                                      // rsp_demux_006:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_006_src1_ready;                                                     // rsp_mux_002:sink0_ready -> rsp_demux_006:src1_ready
	wire   [49:0] rsp_demux_006_src1_channel;                                                   // rsp_demux_006:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                             // rsp_demux_006:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                               // rsp_demux_006:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                     // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                      // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                     // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [49:0] rsp_demux_007_src0_channel;                                                   // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                             // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                               // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                     // rsp_demux_007:src1_valid -> rsp_mux_006:sink0_valid
	wire  [109:0] rsp_demux_007_src1_data;                                                      // rsp_demux_007:src1_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_007_src1_ready;                                                     // rsp_mux_006:sink0_ready -> rsp_demux_007:src1_ready
	wire   [49:0] rsp_demux_007_src1_channel;                                                   // rsp_demux_007:src1_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_007_src1_startofpacket;                                             // rsp_demux_007:src1_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                               // rsp_demux_007:src1_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_008_src0_valid;                                                     // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [109:0] rsp_demux_008_src0_data;                                                      // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                     // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [49:0] rsp_demux_008_src0_channel;                                                   // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                             // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                               // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                     // rsp_demux_008:src1_valid -> rsp_mux_007:sink0_valid
	wire  [109:0] rsp_demux_008_src1_data;                                                      // rsp_demux_008:src1_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_008_src1_ready;                                                     // rsp_mux_007:sink0_ready -> rsp_demux_008:src1_ready
	wire   [49:0] rsp_demux_008_src1_channel;                                                   // rsp_demux_008:src1_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_008_src1_startofpacket;                                             // rsp_demux_008:src1_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                               // rsp_demux_008:src1_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_010_src0_valid;                                                     // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [109:0] rsp_demux_010_src0_data;                                                      // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                     // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [49:0] rsp_demux_010_src0_channel;                                                   // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                             // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                               // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                     // rsp_demux_010:src1_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] rsp_demux_010_src1_data;                                                      // rsp_demux_010:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_010_src1_ready;                                                     // rsp_mux_001:sink0_ready -> rsp_demux_010:src1_ready
	wire   [49:0] rsp_demux_010_src1_channel;                                                   // rsp_demux_010:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_010_src1_startofpacket;                                             // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                               // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_010_src2_valid;                                                     // rsp_demux_010:src2_valid -> rsp_mux_012:sink0_valid
	wire  [109:0] rsp_demux_010_src2_data;                                                      // rsp_demux_010:src2_data -> rsp_mux_012:sink0_data
	wire          rsp_demux_010_src2_ready;                                                     // rsp_mux_012:sink0_ready -> rsp_demux_010:src2_ready
	wire   [49:0] rsp_demux_010_src2_channel;                                                   // rsp_demux_010:src2_channel -> rsp_mux_012:sink0_channel
	wire          rsp_demux_010_src2_startofpacket;                                             // rsp_demux_010:src2_startofpacket -> rsp_mux_012:sink0_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                               // rsp_demux_010:src2_endofpacket -> rsp_mux_012:sink0_endofpacket
	wire          rsp_demux_010_src3_valid;                                                     // rsp_demux_010:src3_valid -> rsp_mux_013:sink1_valid
	wire  [109:0] rsp_demux_010_src3_data;                                                      // rsp_demux_010:src3_data -> rsp_mux_013:sink1_data
	wire          rsp_demux_010_src3_ready;                                                     // rsp_mux_013:sink1_ready -> rsp_demux_010:src3_ready
	wire   [49:0] rsp_demux_010_src3_channel;                                                   // rsp_demux_010:src3_channel -> rsp_mux_013:sink1_channel
	wire          rsp_demux_010_src3_startofpacket;                                             // rsp_demux_010:src3_startofpacket -> rsp_mux_013:sink1_startofpacket
	wire          rsp_demux_010_src3_endofpacket;                                               // rsp_demux_010:src3_endofpacket -> rsp_mux_013:sink1_endofpacket
	wire          rsp_demux_011_src0_valid;                                                     // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [109:0] rsp_demux_011_src0_data;                                                      // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                     // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [49:0] rsp_demux_011_src0_channel;                                                   // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                             // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                               // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                     // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [109:0] rsp_demux_012_src0_data;                                                      // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                     // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [49:0] rsp_demux_012_src0_channel;                                                   // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                             // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                               // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                     // rsp_demux_012:src1_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] rsp_demux_012_src1_data;                                                      // rsp_demux_012:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_012_src1_ready;                                                     // rsp_mux_001:sink1_ready -> rsp_demux_012:src1_ready
	wire   [49:0] rsp_demux_012_src1_channel;                                                   // rsp_demux_012:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_012_src1_startofpacket;                                             // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                               // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_012_src2_valid;                                                     // rsp_demux_012:src2_valid -> rsp_mux_002:sink1_valid
	wire  [109:0] rsp_demux_012_src2_data;                                                      // rsp_demux_012:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_012_src2_ready;                                                     // rsp_mux_002:sink1_ready -> rsp_demux_012:src2_ready
	wire   [49:0] rsp_demux_012_src2_channel;                                                   // rsp_demux_012:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_012_src2_startofpacket;                                             // rsp_demux_012:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                               // rsp_demux_012:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_012_src3_valid;                                                     // rsp_demux_012:src3_valid -> rsp_mux_003:sink0_valid
	wire  [109:0] rsp_demux_012_src3_data;                                                      // rsp_demux_012:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_012_src3_ready;                                                     // rsp_mux_003:sink0_ready -> rsp_demux_012:src3_ready
	wire   [49:0] rsp_demux_012_src3_channel;                                                   // rsp_demux_012:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_012_src3_startofpacket;                                             // rsp_demux_012:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_012_src3_endofpacket;                                               // rsp_demux_012:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_012_src4_valid;                                                     // rsp_demux_012:src4_valid -> rsp_mux_004:sink0_valid
	wire  [109:0] rsp_demux_012_src4_data;                                                      // rsp_demux_012:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_012_src4_ready;                                                     // rsp_mux_004:sink0_ready -> rsp_demux_012:src4_ready
	wire   [49:0] rsp_demux_012_src4_channel;                                                   // rsp_demux_012:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_012_src4_startofpacket;                                             // rsp_demux_012:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_012_src4_endofpacket;                                               // rsp_demux_012:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_012_src5_valid;                                                     // rsp_demux_012:src5_valid -> rsp_mux_005:sink0_valid
	wire  [109:0] rsp_demux_012_src5_data;                                                      // rsp_demux_012:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_012_src5_ready;                                                     // rsp_mux_005:sink0_ready -> rsp_demux_012:src5_ready
	wire   [49:0] rsp_demux_012_src5_channel;                                                   // rsp_demux_012:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_012_src5_startofpacket;                                             // rsp_demux_012:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_012_src5_endofpacket;                                               // rsp_demux_012:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_012_src6_valid;                                                     // rsp_demux_012:src6_valid -> rsp_mux_006:sink1_valid
	wire  [109:0] rsp_demux_012_src6_data;                                                      // rsp_demux_012:src6_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_012_src6_ready;                                                     // rsp_mux_006:sink1_ready -> rsp_demux_012:src6_ready
	wire   [49:0] rsp_demux_012_src6_channel;                                                   // rsp_demux_012:src6_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_012_src6_startofpacket;                                             // rsp_demux_012:src6_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_012_src6_endofpacket;                                               // rsp_demux_012:src6_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_012_src7_valid;                                                     // rsp_demux_012:src7_valid -> rsp_mux_007:sink1_valid
	wire  [109:0] rsp_demux_012_src7_data;                                                      // rsp_demux_012:src7_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_012_src7_ready;                                                     // rsp_mux_007:sink1_ready -> rsp_demux_012:src7_ready
	wire   [49:0] rsp_demux_012_src7_channel;                                                   // rsp_demux_012:src7_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_012_src7_startofpacket;                                             // rsp_demux_012:src7_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_012_src7_endofpacket;                                               // rsp_demux_012:src7_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_012_src8_valid;                                                     // rsp_demux_012:src8_valid -> rsp_mux_008:sink0_valid
	wire  [109:0] rsp_demux_012_src8_data;                                                      // rsp_demux_012:src8_data -> rsp_mux_008:sink0_data
	wire          rsp_demux_012_src8_ready;                                                     // rsp_mux_008:sink0_ready -> rsp_demux_012:src8_ready
	wire   [49:0] rsp_demux_012_src8_channel;                                                   // rsp_demux_012:src8_channel -> rsp_mux_008:sink0_channel
	wire          rsp_demux_012_src8_startofpacket;                                             // rsp_demux_012:src8_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          rsp_demux_012_src8_endofpacket;                                               // rsp_demux_012:src8_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_012_src9_valid;                                                     // rsp_demux_012:src9_valid -> rsp_mux_009:sink0_valid
	wire  [109:0] rsp_demux_012_src9_data;                                                      // rsp_demux_012:src9_data -> rsp_mux_009:sink0_data
	wire          rsp_demux_012_src9_ready;                                                     // rsp_mux_009:sink0_ready -> rsp_demux_012:src9_ready
	wire   [49:0] rsp_demux_012_src9_channel;                                                   // rsp_demux_012:src9_channel -> rsp_mux_009:sink0_channel
	wire          rsp_demux_012_src9_startofpacket;                                             // rsp_demux_012:src9_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          rsp_demux_012_src9_endofpacket;                                               // rsp_demux_012:src9_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          rsp_demux_012_src10_valid;                                                    // rsp_demux_012:src10_valid -> rsp_mux_010:sink0_valid
	wire  [109:0] rsp_demux_012_src10_data;                                                     // rsp_demux_012:src10_data -> rsp_mux_010:sink0_data
	wire          rsp_demux_012_src10_ready;                                                    // rsp_mux_010:sink0_ready -> rsp_demux_012:src10_ready
	wire   [49:0] rsp_demux_012_src10_channel;                                                  // rsp_demux_012:src10_channel -> rsp_mux_010:sink0_channel
	wire          rsp_demux_012_src10_startofpacket;                                            // rsp_demux_012:src10_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          rsp_demux_012_src10_endofpacket;                                              // rsp_demux_012:src10_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_012_src11_valid;                                                    // rsp_demux_012:src11_valid -> rsp_mux_011:sink0_valid
	wire  [109:0] rsp_demux_012_src11_data;                                                     // rsp_demux_012:src11_data -> rsp_mux_011:sink0_data
	wire          rsp_demux_012_src11_ready;                                                    // rsp_mux_011:sink0_ready -> rsp_demux_012:src11_ready
	wire   [49:0] rsp_demux_012_src11_channel;                                                  // rsp_demux_012:src11_channel -> rsp_mux_011:sink0_channel
	wire          rsp_demux_012_src11_startofpacket;                                            // rsp_demux_012:src11_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          rsp_demux_012_src11_endofpacket;                                              // rsp_demux_012:src11_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_013_src0_valid;                                                     // rsp_demux_013:src0_valid -> rsp_mux_011:sink1_valid
	wire  [109:0] rsp_demux_013_src0_data;                                                      // rsp_demux_013:src0_data -> rsp_mux_011:sink1_data
	wire          rsp_demux_013_src0_ready;                                                     // rsp_mux_011:sink1_ready -> rsp_demux_013:src0_ready
	wire   [49:0] rsp_demux_013_src0_channel;                                                   // rsp_demux_013:src0_channel -> rsp_mux_011:sink1_channel
	wire          rsp_demux_013_src0_startofpacket;                                             // rsp_demux_013:src0_startofpacket -> rsp_mux_011:sink1_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                               // rsp_demux_013:src0_endofpacket -> rsp_mux_011:sink1_endofpacket
	wire          rsp_demux_014_src0_valid;                                                     // rsp_demux_014:src0_valid -> rsp_mux_009:sink1_valid
	wire  [109:0] rsp_demux_014_src0_data;                                                      // rsp_demux_014:src0_data -> rsp_mux_009:sink1_data
	wire          rsp_demux_014_src0_ready;                                                     // rsp_mux_009:sink1_ready -> rsp_demux_014:src0_ready
	wire   [49:0] rsp_demux_014_src0_channel;                                                   // rsp_demux_014:src0_channel -> rsp_mux_009:sink1_channel
	wire          rsp_demux_014_src0_startofpacket;                                             // rsp_demux_014:src0_startofpacket -> rsp_mux_009:sink1_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                               // rsp_demux_014:src0_endofpacket -> rsp_mux_009:sink1_endofpacket
	wire          rsp_demux_014_src1_valid;                                                     // rsp_demux_014:src1_valid -> rsp_mux_011:sink2_valid
	wire  [109:0] rsp_demux_014_src1_data;                                                      // rsp_demux_014:src1_data -> rsp_mux_011:sink2_data
	wire          rsp_demux_014_src1_ready;                                                     // rsp_mux_011:sink2_ready -> rsp_demux_014:src1_ready
	wire   [49:0] rsp_demux_014_src1_channel;                                                   // rsp_demux_014:src1_channel -> rsp_mux_011:sink2_channel
	wire          rsp_demux_014_src1_startofpacket;                                             // rsp_demux_014:src1_startofpacket -> rsp_mux_011:sink2_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                               // rsp_demux_014:src1_endofpacket -> rsp_mux_011:sink2_endofpacket
	wire          rsp_demux_015_src0_valid;                                                     // rsp_demux_015:src0_valid -> rsp_mux_003:sink1_valid
	wire  [109:0] rsp_demux_015_src0_data;                                                      // rsp_demux_015:src0_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_015_src0_ready;                                                     // rsp_mux_003:sink1_ready -> rsp_demux_015:src0_ready
	wire   [49:0] rsp_demux_015_src0_channel;                                                   // rsp_demux_015:src0_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_015_src0_startofpacket;                                             // rsp_demux_015:src0_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                               // rsp_demux_015:src0_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_015_src1_valid;                                                     // rsp_demux_015:src1_valid -> rsp_mux_011:sink3_valid
	wire  [109:0] rsp_demux_015_src1_data;                                                      // rsp_demux_015:src1_data -> rsp_mux_011:sink3_data
	wire          rsp_demux_015_src1_ready;                                                     // rsp_mux_011:sink3_ready -> rsp_demux_015:src1_ready
	wire   [49:0] rsp_demux_015_src1_channel;                                                   // rsp_demux_015:src1_channel -> rsp_mux_011:sink3_channel
	wire          rsp_demux_015_src1_startofpacket;                                             // rsp_demux_015:src1_startofpacket -> rsp_mux_011:sink3_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                               // rsp_demux_015:src1_endofpacket -> rsp_mux_011:sink3_endofpacket
	wire          rsp_demux_016_src0_valid;                                                     // rsp_demux_016:src0_valid -> rsp_mux_011:sink4_valid
	wire  [109:0] rsp_demux_016_src0_data;                                                      // rsp_demux_016:src0_data -> rsp_mux_011:sink4_data
	wire          rsp_demux_016_src0_ready;                                                     // rsp_mux_011:sink4_ready -> rsp_demux_016:src0_ready
	wire   [49:0] rsp_demux_016_src0_channel;                                                   // rsp_demux_016:src0_channel -> rsp_mux_011:sink4_channel
	wire          rsp_demux_016_src0_startofpacket;                                             // rsp_demux_016:src0_startofpacket -> rsp_mux_011:sink4_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                               // rsp_demux_016:src0_endofpacket -> rsp_mux_011:sink4_endofpacket
	wire          rsp_demux_017_src0_valid;                                                     // rsp_demux_017:src0_valid -> rsp_mux_003:sink2_valid
	wire  [109:0] rsp_demux_017_src0_data;                                                      // rsp_demux_017:src0_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_017_src0_ready;                                                     // rsp_mux_003:sink2_ready -> rsp_demux_017:src0_ready
	wire   [49:0] rsp_demux_017_src0_channel;                                                   // rsp_demux_017:src0_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_017_src0_startofpacket;                                             // rsp_demux_017:src0_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                               // rsp_demux_017:src0_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_018_src0_valid;                                                     // rsp_demux_018:src0_valid -> rsp_mux_003:sink3_valid
	wire  [109:0] rsp_demux_018_src0_data;                                                      // rsp_demux_018:src0_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_018_src0_ready;                                                     // rsp_mux_003:sink3_ready -> rsp_demux_018:src0_ready
	wire   [49:0] rsp_demux_018_src0_channel;                                                   // rsp_demux_018:src0_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_018_src0_startofpacket;                                             // rsp_demux_018:src0_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                               // rsp_demux_018:src0_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_018_src1_valid;                                                     // rsp_demux_018:src1_valid -> rsp_mux_004:sink1_valid
	wire  [109:0] rsp_demux_018_src1_data;                                                      // rsp_demux_018:src1_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_018_src1_ready;                                                     // rsp_mux_004:sink1_ready -> rsp_demux_018:src1_ready
	wire   [49:0] rsp_demux_018_src1_channel;                                                   // rsp_demux_018:src1_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_018_src1_startofpacket;                                             // rsp_demux_018:src1_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                               // rsp_demux_018:src1_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_019_src0_valid;                                                     // rsp_demux_019:src0_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_019_src0_data;                                                      // rsp_demux_019:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_019_src0_ready;                                                     // rsp_mux_001:sink2_ready -> rsp_demux_019:src0_ready
	wire   [49:0] rsp_demux_019_src0_channel;                                                   // rsp_demux_019:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_019_src0_startofpacket;                                             // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                               // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_019_src1_valid;                                                     // rsp_demux_019:src1_valid -> rsp_mux_003:sink4_valid
	wire  [109:0] rsp_demux_019_src1_data;                                                      // rsp_demux_019:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_019_src1_ready;                                                     // rsp_mux_003:sink4_ready -> rsp_demux_019:src1_ready
	wire   [49:0] rsp_demux_019_src1_channel;                                                   // rsp_demux_019:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_019_src1_startofpacket;                                             // rsp_demux_019:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                               // rsp_demux_019:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_020_src0_valid;                                                     // rsp_demux_020:src0_valid -> rsp_mux_003:sink5_valid
	wire  [109:0] rsp_demux_020_src0_data;                                                      // rsp_demux_020:src0_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_020_src0_ready;                                                     // rsp_mux_003:sink5_ready -> rsp_demux_020:src0_ready
	wire   [49:0] rsp_demux_020_src0_channel;                                                   // rsp_demux_020:src0_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_020_src0_startofpacket;                                             // rsp_demux_020:src0_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                               // rsp_demux_020:src0_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_020_src1_valid;                                                     // rsp_demux_020:src1_valid -> rsp_mux_010:sink1_valid
	wire  [109:0] rsp_demux_020_src1_data;                                                      // rsp_demux_020:src1_data -> rsp_mux_010:sink1_data
	wire          rsp_demux_020_src1_ready;                                                     // rsp_mux_010:sink1_ready -> rsp_demux_020:src1_ready
	wire   [49:0] rsp_demux_020_src1_channel;                                                   // rsp_demux_020:src1_channel -> rsp_mux_010:sink1_channel
	wire          rsp_demux_020_src1_startofpacket;                                             // rsp_demux_020:src1_startofpacket -> rsp_mux_010:sink1_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                               // rsp_demux_020:src1_endofpacket -> rsp_mux_010:sink1_endofpacket
	wire          rsp_demux_021_src0_valid;                                                     // rsp_demux_021:src0_valid -> rsp_mux_003:sink6_valid
	wire  [109:0] rsp_demux_021_src0_data;                                                      // rsp_demux_021:src0_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_021_src0_ready;                                                     // rsp_mux_003:sink6_ready -> rsp_demux_021:src0_ready
	wire   [49:0] rsp_demux_021_src0_channel;                                                   // rsp_demux_021:src0_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_021_src0_startofpacket;                                             // rsp_demux_021:src0_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                               // rsp_demux_021:src0_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_022_src0_valid;                                                     // rsp_demux_022:src0_valid -> rsp_mux_003:sink7_valid
	wire  [109:0] rsp_demux_022_src0_data;                                                      // rsp_demux_022:src0_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_022_src0_ready;                                                     // rsp_mux_003:sink7_ready -> rsp_demux_022:src0_ready
	wire   [49:0] rsp_demux_022_src0_channel;                                                   // rsp_demux_022:src0_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_022_src0_startofpacket;                                             // rsp_demux_022:src0_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                               // rsp_demux_022:src0_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_023_src0_valid;                                                     // rsp_demux_023:src0_valid -> rsp_mux_003:sink8_valid
	wire  [109:0] rsp_demux_023_src0_data;                                                      // rsp_demux_023:src0_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_023_src0_ready;                                                     // rsp_mux_003:sink8_ready -> rsp_demux_023:src0_ready
	wire   [49:0] rsp_demux_023_src0_channel;                                                   // rsp_demux_023:src0_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_023_src0_startofpacket;                                             // rsp_demux_023:src0_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                               // rsp_demux_023:src0_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_024_src0_valid;                                                     // rsp_demux_024:src0_valid -> rsp_mux_010:sink2_valid
	wire  [109:0] rsp_demux_024_src0_data;                                                      // rsp_demux_024:src0_data -> rsp_mux_010:sink2_data
	wire          rsp_demux_024_src0_ready;                                                     // rsp_mux_010:sink2_ready -> rsp_demux_024:src0_ready
	wire   [49:0] rsp_demux_024_src0_channel;                                                   // rsp_demux_024:src0_channel -> rsp_mux_010:sink2_channel
	wire          rsp_demux_024_src0_startofpacket;                                             // rsp_demux_024:src0_startofpacket -> rsp_mux_010:sink2_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                               // rsp_demux_024:src0_endofpacket -> rsp_mux_010:sink2_endofpacket
	wire          rsp_demux_025_src0_valid;                                                     // rsp_demux_025:src0_valid -> rsp_mux_008:sink1_valid
	wire  [109:0] rsp_demux_025_src0_data;                                                      // rsp_demux_025:src0_data -> rsp_mux_008:sink1_data
	wire          rsp_demux_025_src0_ready;                                                     // rsp_mux_008:sink1_ready -> rsp_demux_025:src0_ready
	wire   [49:0] rsp_demux_025_src0_channel;                                                   // rsp_demux_025:src0_channel -> rsp_mux_008:sink1_channel
	wire          rsp_demux_025_src0_startofpacket;                                             // rsp_demux_025:src0_startofpacket -> rsp_mux_008:sink1_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                               // rsp_demux_025:src0_endofpacket -> rsp_mux_008:sink1_endofpacket
	wire          rsp_demux_025_src1_valid;                                                     // rsp_demux_025:src1_valid -> rsp_mux_010:sink3_valid
	wire  [109:0] rsp_demux_025_src1_data;                                                      // rsp_demux_025:src1_data -> rsp_mux_010:sink3_data
	wire          rsp_demux_025_src1_ready;                                                     // rsp_mux_010:sink3_ready -> rsp_demux_025:src1_ready
	wire   [49:0] rsp_demux_025_src1_channel;                                                   // rsp_demux_025:src1_channel -> rsp_mux_010:sink3_channel
	wire          rsp_demux_025_src1_startofpacket;                                             // rsp_demux_025:src1_startofpacket -> rsp_mux_010:sink3_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                               // rsp_demux_025:src1_endofpacket -> rsp_mux_010:sink3_endofpacket
	wire          rsp_demux_026_src0_valid;                                                     // rsp_demux_026:src0_valid -> rsp_mux_010:sink4_valid
	wire  [109:0] rsp_demux_026_src0_data;                                                      // rsp_demux_026:src0_data -> rsp_mux_010:sink4_data
	wire          rsp_demux_026_src0_ready;                                                     // rsp_mux_010:sink4_ready -> rsp_demux_026:src0_ready
	wire   [49:0] rsp_demux_026_src0_channel;                                                   // rsp_demux_026:src0_channel -> rsp_mux_010:sink4_channel
	wire          rsp_demux_026_src0_startofpacket;                                             // rsp_demux_026:src0_startofpacket -> rsp_mux_010:sink4_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                               // rsp_demux_026:src0_endofpacket -> rsp_mux_010:sink4_endofpacket
	wire          rsp_demux_027_src0_valid;                                                     // rsp_demux_027:src0_valid -> rsp_mux_008:sink2_valid
	wire  [109:0] rsp_demux_027_src0_data;                                                      // rsp_demux_027:src0_data -> rsp_mux_008:sink2_data
	wire          rsp_demux_027_src0_ready;                                                     // rsp_mux_008:sink2_ready -> rsp_demux_027:src0_ready
	wire   [49:0] rsp_demux_027_src0_channel;                                                   // rsp_demux_027:src0_channel -> rsp_mux_008:sink2_channel
	wire          rsp_demux_027_src0_startofpacket;                                             // rsp_demux_027:src0_startofpacket -> rsp_mux_008:sink2_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                               // rsp_demux_027:src0_endofpacket -> rsp_mux_008:sink2_endofpacket
	wire          rsp_demux_028_src0_valid;                                                     // rsp_demux_028:src0_valid -> rsp_mux_006:sink2_valid
	wire  [109:0] rsp_demux_028_src0_data;                                                      // rsp_demux_028:src0_data -> rsp_mux_006:sink2_data
	wire          rsp_demux_028_src0_ready;                                                     // rsp_mux_006:sink2_ready -> rsp_demux_028:src0_ready
	wire   [49:0] rsp_demux_028_src0_channel;                                                   // rsp_demux_028:src0_channel -> rsp_mux_006:sink2_channel
	wire          rsp_demux_028_src0_startofpacket;                                             // rsp_demux_028:src0_startofpacket -> rsp_mux_006:sink2_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                               // rsp_demux_028:src0_endofpacket -> rsp_mux_006:sink2_endofpacket
	wire          rsp_demux_028_src1_valid;                                                     // rsp_demux_028:src1_valid -> rsp_mux_008:sink3_valid
	wire  [109:0] rsp_demux_028_src1_data;                                                      // rsp_demux_028:src1_data -> rsp_mux_008:sink3_data
	wire          rsp_demux_028_src1_ready;                                                     // rsp_mux_008:sink3_ready -> rsp_demux_028:src1_ready
	wire   [49:0] rsp_demux_028_src1_channel;                                                   // rsp_demux_028:src1_channel -> rsp_mux_008:sink3_channel
	wire          rsp_demux_028_src1_startofpacket;                                             // rsp_demux_028:src1_startofpacket -> rsp_mux_008:sink3_startofpacket
	wire          rsp_demux_028_src1_endofpacket;                                               // rsp_demux_028:src1_endofpacket -> rsp_mux_008:sink3_endofpacket
	wire          rsp_demux_029_src0_valid;                                                     // rsp_demux_029:src0_valid -> rsp_mux_008:sink4_valid
	wire  [109:0] rsp_demux_029_src0_data;                                                      // rsp_demux_029:src0_data -> rsp_mux_008:sink4_data
	wire          rsp_demux_029_src0_ready;                                                     // rsp_mux_008:sink4_ready -> rsp_demux_029:src0_ready
	wire   [49:0] rsp_demux_029_src0_channel;                                                   // rsp_demux_029:src0_channel -> rsp_mux_008:sink4_channel
	wire          rsp_demux_029_src0_startofpacket;                                             // rsp_demux_029:src0_startofpacket -> rsp_mux_008:sink4_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                               // rsp_demux_029:src0_endofpacket -> rsp_mux_008:sink4_endofpacket
	wire          rsp_demux_030_src0_valid;                                                     // rsp_demux_030:src0_valid -> rsp_mux_006:sink3_valid
	wire  [109:0] rsp_demux_030_src0_data;                                                      // rsp_demux_030:src0_data -> rsp_mux_006:sink3_data
	wire          rsp_demux_030_src0_ready;                                                     // rsp_mux_006:sink3_ready -> rsp_demux_030:src0_ready
	wire   [49:0] rsp_demux_030_src0_channel;                                                   // rsp_demux_030:src0_channel -> rsp_mux_006:sink3_channel
	wire          rsp_demux_030_src0_startofpacket;                                             // rsp_demux_030:src0_startofpacket -> rsp_mux_006:sink3_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                               // rsp_demux_030:src0_endofpacket -> rsp_mux_006:sink3_endofpacket
	wire          rsp_demux_031_src0_valid;                                                     // rsp_demux_031:src0_valid -> rsp_mux_006:sink4_valid
	wire  [109:0] rsp_demux_031_src0_data;                                                      // rsp_demux_031:src0_data -> rsp_mux_006:sink4_data
	wire          rsp_demux_031_src0_ready;                                                     // rsp_mux_006:sink4_ready -> rsp_demux_031:src0_ready
	wire   [49:0] rsp_demux_031_src0_channel;                                                   // rsp_demux_031:src0_channel -> rsp_mux_006:sink4_channel
	wire          rsp_demux_031_src0_startofpacket;                                             // rsp_demux_031:src0_startofpacket -> rsp_mux_006:sink4_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                               // rsp_demux_031:src0_endofpacket -> rsp_mux_006:sink4_endofpacket
	wire          rsp_demux_032_src0_valid;                                                     // rsp_demux_032:src0_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_032_src0_data;                                                      // rsp_demux_032:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_032_src0_ready;                                                     // rsp_mux_001:sink3_ready -> rsp_demux_032:src0_ready
	wire   [49:0] rsp_demux_032_src0_channel;                                                   // rsp_demux_032:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_032_src0_startofpacket;                                             // rsp_demux_032:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                               // rsp_demux_032:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_033_src0_valid;                                                     // rsp_demux_033:src0_valid -> rsp_mux_001:sink4_valid
	wire  [109:0] rsp_demux_033_src0_data;                                                      // rsp_demux_033:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_033_src0_ready;                                                     // rsp_mux_001:sink4_ready -> rsp_demux_033:src0_ready
	wire   [49:0] rsp_demux_033_src0_channel;                                                   // rsp_demux_033:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_033_src0_startofpacket;                                             // rsp_demux_033:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                               // rsp_demux_033:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_034_src0_valid;                                                     // rsp_demux_034:src0_valid -> rsp_mux_001:sink5_valid
	wire  [109:0] rsp_demux_034_src0_data;                                                      // rsp_demux_034:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_034_src0_ready;                                                     // rsp_mux_001:sink5_ready -> rsp_demux_034:src0_ready
	wire   [49:0] rsp_demux_034_src0_channel;                                                   // rsp_demux_034:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_034_src0_startofpacket;                                             // rsp_demux_034:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                               // rsp_demux_034:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_034_src1_valid;                                                     // rsp_demux_034:src1_valid -> rsp_mux_012:sink1_valid
	wire  [109:0] rsp_demux_034_src1_data;                                                      // rsp_demux_034:src1_data -> rsp_mux_012:sink1_data
	wire          rsp_demux_034_src1_ready;                                                     // rsp_mux_012:sink1_ready -> rsp_demux_034:src1_ready
	wire   [49:0] rsp_demux_034_src1_channel;                                                   // rsp_demux_034:src1_channel -> rsp_mux_012:sink1_channel
	wire          rsp_demux_034_src1_startofpacket;                                             // rsp_demux_034:src1_startofpacket -> rsp_mux_012:sink1_startofpacket
	wire          rsp_demux_034_src1_endofpacket;                                               // rsp_demux_034:src1_endofpacket -> rsp_mux_012:sink1_endofpacket
	wire          rsp_demux_035_src0_valid;                                                     // rsp_demux_035:src0_valid -> rsp_mux_001:sink6_valid
	wire  [109:0] rsp_demux_035_src0_data;                                                      // rsp_demux_035:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_035_src0_ready;                                                     // rsp_mux_001:sink6_ready -> rsp_demux_035:src0_ready
	wire   [49:0] rsp_demux_035_src0_channel;                                                   // rsp_demux_035:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_035_src0_startofpacket;                                             // rsp_demux_035:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                               // rsp_demux_035:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_036_src0_valid;                                                     // rsp_demux_036:src0_valid -> rsp_mux_001:sink7_valid
	wire  [109:0] rsp_demux_036_src0_data;                                                      // rsp_demux_036:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_036_src0_ready;                                                     // rsp_mux_001:sink7_ready -> rsp_demux_036:src0_ready
	wire   [49:0] rsp_demux_036_src0_channel;                                                   // rsp_demux_036:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_036_src0_startofpacket;                                             // rsp_demux_036:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                               // rsp_demux_036:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_037_src0_valid;                                                     // rsp_demux_037:src0_valid -> rsp_mux_004:sink2_valid
	wire  [109:0] rsp_demux_037_src0_data;                                                      // rsp_demux_037:src0_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_037_src0_ready;                                                     // rsp_mux_004:sink2_ready -> rsp_demux_037:src0_ready
	wire   [49:0] rsp_demux_037_src0_channel;                                                   // rsp_demux_037:src0_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_037_src0_startofpacket;                                             // rsp_demux_037:src0_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                               // rsp_demux_037:src0_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_038_src0_valid;                                                     // rsp_demux_038:src0_valid -> rsp_mux_004:sink3_valid
	wire  [109:0] rsp_demux_038_src0_data;                                                      // rsp_demux_038:src0_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_038_src0_ready;                                                     // rsp_mux_004:sink3_ready -> rsp_demux_038:src0_ready
	wire   [49:0] rsp_demux_038_src0_channel;                                                   // rsp_demux_038:src0_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_038_src0_startofpacket;                                             // rsp_demux_038:src0_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                               // rsp_demux_038:src0_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_038_src1_valid;                                                     // rsp_demux_038:src1_valid -> rsp_mux_005:sink1_valid
	wire  [109:0] rsp_demux_038_src1_data;                                                      // rsp_demux_038:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_038_src1_ready;                                                     // rsp_mux_005:sink1_ready -> rsp_demux_038:src1_ready
	wire   [49:0] rsp_demux_038_src1_channel;                                                   // rsp_demux_038:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_038_src1_startofpacket;                                             // rsp_demux_038:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_038_src1_endofpacket;                                               // rsp_demux_038:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_039_src0_valid;                                                     // rsp_demux_039:src0_valid -> rsp_mux_004:sink4_valid
	wire  [109:0] rsp_demux_039_src0_data;                                                      // rsp_demux_039:src0_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_039_src0_ready;                                                     // rsp_mux_004:sink4_ready -> rsp_demux_039:src0_ready
	wire   [49:0] rsp_demux_039_src0_channel;                                                   // rsp_demux_039:src0_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_039_src0_startofpacket;                                             // rsp_demux_039:src0_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                               // rsp_demux_039:src0_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_040_src0_valid;                                                     // rsp_demux_040:src0_valid -> rsp_mux_005:sink2_valid
	wire  [109:0] rsp_demux_040_src0_data;                                                      // rsp_demux_040:src0_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_040_src0_ready;                                                     // rsp_mux_005:sink2_ready -> rsp_demux_040:src0_ready
	wire   [49:0] rsp_demux_040_src0_channel;                                                   // rsp_demux_040:src0_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_040_src0_startofpacket;                                             // rsp_demux_040:src0_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                               // rsp_demux_040:src0_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_041_src0_valid;                                                     // rsp_demux_041:src0_valid -> rsp_mux_002:sink2_valid
	wire  [109:0] rsp_demux_041_src0_data;                                                      // rsp_demux_041:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_041_src0_ready;                                                     // rsp_mux_002:sink2_ready -> rsp_demux_041:src0_ready
	wire   [49:0] rsp_demux_041_src0_channel;                                                   // rsp_demux_041:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_041_src0_startofpacket;                                             // rsp_demux_041:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                               // rsp_demux_041:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_041_src1_valid;                                                     // rsp_demux_041:src1_valid -> rsp_mux_005:sink3_valid
	wire  [109:0] rsp_demux_041_src1_data;                                                      // rsp_demux_041:src1_data -> rsp_mux_005:sink3_data
	wire          rsp_demux_041_src1_ready;                                                     // rsp_mux_005:sink3_ready -> rsp_demux_041:src1_ready
	wire   [49:0] rsp_demux_041_src1_channel;                                                   // rsp_demux_041:src1_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_041_src1_startofpacket;                                             // rsp_demux_041:src1_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire          rsp_demux_041_src1_endofpacket;                                               // rsp_demux_041:src1_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_042_src0_valid;                                                     // rsp_demux_042:src0_valid -> rsp_mux_005:sink4_valid
	wire  [109:0] rsp_demux_042_src0_data;                                                      // rsp_demux_042:src0_data -> rsp_mux_005:sink4_data
	wire          rsp_demux_042_src0_ready;                                                     // rsp_mux_005:sink4_ready -> rsp_demux_042:src0_ready
	wire   [49:0] rsp_demux_042_src0_channel;                                                   // rsp_demux_042:src0_channel -> rsp_mux_005:sink4_channel
	wire          rsp_demux_042_src0_startofpacket;                                             // rsp_demux_042:src0_startofpacket -> rsp_mux_005:sink4_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                               // rsp_demux_042:src0_endofpacket -> rsp_mux_005:sink4_endofpacket
	wire          rsp_demux_043_src0_valid;                                                     // rsp_demux_043:src0_valid -> rsp_mux_002:sink3_valid
	wire  [109:0] rsp_demux_043_src0_data;                                                      // rsp_demux_043:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_043_src0_ready;                                                     // rsp_mux_002:sink3_ready -> rsp_demux_043:src0_ready
	wire   [49:0] rsp_demux_043_src0_channel;                                                   // rsp_demux_043:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_043_src0_startofpacket;                                             // rsp_demux_043:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                               // rsp_demux_043:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_044_src0_valid;                                                     // rsp_demux_044:src0_valid -> rsp_mux_002:sink4_valid
	wire  [109:0] rsp_demux_044_src0_data;                                                      // rsp_demux_044:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_044_src0_ready;                                                     // rsp_mux_002:sink4_ready -> rsp_demux_044:src0_ready
	wire   [49:0] rsp_demux_044_src0_channel;                                                   // rsp_demux_044:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_044_src0_startofpacket;                                             // rsp_demux_044:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                               // rsp_demux_044:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_045_src0_valid;                                                     // rsp_demux_045:src0_valid -> rsp_mux_009:sink2_valid
	wire  [109:0] rsp_demux_045_src0_data;                                                      // rsp_demux_045:src0_data -> rsp_mux_009:sink2_data
	wire          rsp_demux_045_src0_ready;                                                     // rsp_mux_009:sink2_ready -> rsp_demux_045:src0_ready
	wire   [49:0] rsp_demux_045_src0_channel;                                                   // rsp_demux_045:src0_channel -> rsp_mux_009:sink2_channel
	wire          rsp_demux_045_src0_startofpacket;                                             // rsp_demux_045:src0_startofpacket -> rsp_mux_009:sink2_startofpacket
	wire          rsp_demux_045_src0_endofpacket;                                               // rsp_demux_045:src0_endofpacket -> rsp_mux_009:sink2_endofpacket
	wire          rsp_demux_046_src0_valid;                                                     // rsp_demux_046:src0_valid -> rsp_mux_007:sink2_valid
	wire  [109:0] rsp_demux_046_src0_data;                                                      // rsp_demux_046:src0_data -> rsp_mux_007:sink2_data
	wire          rsp_demux_046_src0_ready;                                                     // rsp_mux_007:sink2_ready -> rsp_demux_046:src0_ready
	wire   [49:0] rsp_demux_046_src0_channel;                                                   // rsp_demux_046:src0_channel -> rsp_mux_007:sink2_channel
	wire          rsp_demux_046_src0_startofpacket;                                             // rsp_demux_046:src0_startofpacket -> rsp_mux_007:sink2_startofpacket
	wire          rsp_demux_046_src0_endofpacket;                                               // rsp_demux_046:src0_endofpacket -> rsp_mux_007:sink2_endofpacket
	wire          rsp_demux_046_src1_valid;                                                     // rsp_demux_046:src1_valid -> rsp_mux_009:sink3_valid
	wire  [109:0] rsp_demux_046_src1_data;                                                      // rsp_demux_046:src1_data -> rsp_mux_009:sink3_data
	wire          rsp_demux_046_src1_ready;                                                     // rsp_mux_009:sink3_ready -> rsp_demux_046:src1_ready
	wire   [49:0] rsp_demux_046_src1_channel;                                                   // rsp_demux_046:src1_channel -> rsp_mux_009:sink3_channel
	wire          rsp_demux_046_src1_startofpacket;                                             // rsp_demux_046:src1_startofpacket -> rsp_mux_009:sink3_startofpacket
	wire          rsp_demux_046_src1_endofpacket;                                               // rsp_demux_046:src1_endofpacket -> rsp_mux_009:sink3_endofpacket
	wire          rsp_demux_047_src0_valid;                                                     // rsp_demux_047:src0_valid -> rsp_mux_009:sink4_valid
	wire  [109:0] rsp_demux_047_src0_data;                                                      // rsp_demux_047:src0_data -> rsp_mux_009:sink4_data
	wire          rsp_demux_047_src0_ready;                                                     // rsp_mux_009:sink4_ready -> rsp_demux_047:src0_ready
	wire   [49:0] rsp_demux_047_src0_channel;                                                   // rsp_demux_047:src0_channel -> rsp_mux_009:sink4_channel
	wire          rsp_demux_047_src0_startofpacket;                                             // rsp_demux_047:src0_startofpacket -> rsp_mux_009:sink4_startofpacket
	wire          rsp_demux_047_src0_endofpacket;                                               // rsp_demux_047:src0_endofpacket -> rsp_mux_009:sink4_endofpacket
	wire          rsp_demux_048_src0_valid;                                                     // rsp_demux_048:src0_valid -> rsp_mux_007:sink3_valid
	wire  [109:0] rsp_demux_048_src0_data;                                                      // rsp_demux_048:src0_data -> rsp_mux_007:sink3_data
	wire          rsp_demux_048_src0_ready;                                                     // rsp_mux_007:sink3_ready -> rsp_demux_048:src0_ready
	wire   [49:0] rsp_demux_048_src0_channel;                                                   // rsp_demux_048:src0_channel -> rsp_mux_007:sink3_channel
	wire          rsp_demux_048_src0_startofpacket;                                             // rsp_demux_048:src0_startofpacket -> rsp_mux_007:sink3_startofpacket
	wire          rsp_demux_048_src0_endofpacket;                                               // rsp_demux_048:src0_endofpacket -> rsp_mux_007:sink3_endofpacket
	wire          rsp_demux_049_src0_valid;                                                     // rsp_demux_049:src0_valid -> rsp_mux_007:sink4_valid
	wire  [109:0] rsp_demux_049_src0_data;                                                      // rsp_demux_049:src0_data -> rsp_mux_007:sink4_data
	wire          rsp_demux_049_src0_ready;                                                     // rsp_mux_007:sink4_ready -> rsp_demux_049:src0_ready
	wire   [49:0] rsp_demux_049_src0_channel;                                                   // rsp_demux_049:src0_channel -> rsp_mux_007:sink4_channel
	wire          rsp_demux_049_src0_startofpacket;                                             // rsp_demux_049:src0_startofpacket -> rsp_mux_007:sink4_startofpacket
	wire          rsp_demux_049_src0_endofpacket;                                               // rsp_demux_049:src0_endofpacket -> rsp_mux_007:sink4_endofpacket
	wire          cmd_demux_src9_valid;                                                         // cmd_demux:src9_valid -> crosser:in_valid
	wire  [109:0] cmd_demux_src9_data;                                                          // cmd_demux:src9_data -> crosser:in_data
	wire          cmd_demux_src9_ready;                                                         // crosser:in_ready -> cmd_demux:src9_ready
	wire   [49:0] cmd_demux_src9_channel;                                                       // cmd_demux:src9_channel -> crosser:in_channel
	wire          cmd_demux_src9_startofpacket;                                                 // cmd_demux:src9_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                   // cmd_demux:src9_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                            // crosser:out_valid -> cmd_mux_009:sink0_valid
	wire  [109:0] crosser_out_data;                                                             // crosser:out_data -> cmd_mux_009:sink0_data
	wire          crosser_out_ready;                                                            // cmd_mux_009:sink0_ready -> crosser:out_ready
	wire   [49:0] crosser_out_channel;                                                          // crosser:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_out_startofpacket;                                                    // crosser:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                      // crosser:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                     // rsp_demux_009:src0_valid -> crosser_001:in_valid
	wire  [109:0] rsp_demux_009_src0_data;                                                      // rsp_demux_009:src0_data -> crosser_001:in_data
	wire          rsp_demux_009_src0_ready;                                                     // crosser_001:in_ready -> rsp_demux_009:src0_ready
	wire   [49:0] rsp_demux_009_src0_channel;                                                   // rsp_demux_009:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                             // rsp_demux_009:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                               // rsp_demux_009:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                        // crosser_001:out_valid -> rsp_mux:sink9_valid
	wire  [109:0] crosser_001_out_data;                                                         // crosser_001:out_data -> rsp_mux:sink9_data
	wire          crosser_001_out_ready;                                                        // rsp_mux:sink9_ready -> crosser_001:out_ready
	wire   [49:0] crosser_001_out_channel;                                                      // crosser_001:out_channel -> rsp_mux:sink9_channel
	wire          crosser_001_out_startofpacket;                                                // crosser_001:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_001_out_endofpacket;                                                  // crosser_001:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire   [49:0] cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1b_p1_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [49:0] cpu_1e_mm_bridge_0_m0_limiter_cmd_valid_data;                                 // CPU_1e_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [49:0] cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1d_p1_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire   [49:0] cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1c_p1_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire   [49:0] cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1b_p2_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_006:sink_valid
	wire   [49:0] cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1b_p3_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_007:sink_valid
	wire   [49:0] cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1c_p2_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_008:sink_valid
	wire   [49:0] cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1c_p3_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_009:sink_valid
	wire   [49:0] cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1d_p2_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_010:sink_valid
	wire   [49:0] cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_valid_data;                              // CPU_1d_p3_mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_011:sink_valid
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // avalon_st_adapter:in_0_ready -> jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> jtag_uart_1a_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sys_id_1a_control_slave_agent_rdata_fifo_src_valid;                           // sys_id_1a_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sys_id_1a_control_slave_agent_rdata_fifo_src_data;                            // sys_id_1a_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sys_id_1a_control_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_001:in_0_ready -> sys_id_1a_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                            // avalon_st_adapter_001:out_0_valid -> sys_id_1a_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                             // avalon_st_adapter_001:out_0_data -> sys_id_1a_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                            // sys_id_1a_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                            // avalon_st_adapter_001:out_0_error -> sys_id_1a_control_slave_agent:rdata_fifo_sink_error
	wire          cpu_1a_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_1a_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] cpu_1a_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_1a_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          cpu_1a_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> cpu_1a_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                            // avalon_st_adapter_002:out_0_valid -> cpu_1a_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                             // avalon_st_adapter_002:out_0_data -> cpu_1a_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                            // cpu_1a_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                            // avalon_st_adapter_002:out_0_error -> cpu_1a_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          fifo_qa_p1_in_agent_rdata_fifo_src_valid;                                     // fifo_qa_p1_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] fifo_qa_p1_in_agent_rdata_fifo_src_data;                                      // fifo_qa_p1_in_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          fifo_qa_p1_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_003:in_0_ready -> fifo_qa_p1_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                            // avalon_st_adapter_003:out_0_valid -> fifo_qa_p1_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                             // avalon_st_adapter_003:out_0_data -> fifo_qa_p1_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                            // fifo_qa_p1_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                            // avalon_st_adapter_003:out_0_error -> fifo_qa_p1_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p2_in_agent_rdata_fifo_src_valid;                                     // fifo_qa_p2_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] fifo_qa_p2_in_agent_rdata_fifo_src_data;                                      // fifo_qa_p2_in_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          fifo_qa_p2_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_004:in_0_ready -> fifo_qa_p2_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                            // avalon_st_adapter_004:out_0_valid -> fifo_qa_p2_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                             // avalon_st_adapter_004:out_0_data -> fifo_qa_p2_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                            // fifo_qa_p2_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                            // avalon_st_adapter_004:out_0_error -> fifo_qa_p2_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p3_in_agent_rdata_fifo_src_valid;                                     // fifo_qa_p3_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] fifo_qa_p3_in_agent_rdata_fifo_src_data;                                      // fifo_qa_p3_in_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          fifo_qa_p3_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_005:in_0_ready -> fifo_qa_p3_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                            // avalon_st_adapter_005:out_0_valid -> fifo_qa_p3_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                             // avalon_st_adapter_005:out_0_data -> fifo_qa_p3_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                            // fifo_qa_p3_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                            // avalon_st_adapter_005:out_0_error -> fifo_qa_p3_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p1_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qa_p1_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] fifo_qa_p1_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qa_p1_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          fifo_qa_p1_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_006:in_0_ready -> fifo_qa_p1_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                            // avalon_st_adapter_006:out_0_valid -> fifo_qa_p1_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                             // avalon_st_adapter_006:out_0_data -> fifo_qa_p1_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                            // fifo_qa_p1_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                            // avalon_st_adapter_006:out_0_error -> fifo_qa_p1_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qa_p2_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qa_p2_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] fifo_qa_p2_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qa_p2_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          fifo_qa_p2_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_007:in_0_ready -> fifo_qa_p2_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                            // avalon_st_adapter_007:out_0_valid -> fifo_qa_p2_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                             // avalon_st_adapter_007:out_0_data -> fifo_qa_p2_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                            // fifo_qa_p2_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                            // avalon_st_adapter_007:out_0_error -> fifo_qa_p2_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qa_p3_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qa_p3_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] fifo_qa_p3_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qa_p3_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          fifo_qa_p3_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_008:in_0_ready -> fifo_qa_p3_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                            // avalon_st_adapter_008:out_0_valid -> fifo_qa_p3_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                             // avalon_st_adapter_008:out_0_data -> fifo_qa_p3_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                            // fifo_qa_p3_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                            // avalon_st_adapter_008:out_0_error -> fifo_qa_p3_in_csr_agent:rdata_fifo_sink_error
	wire          pll_pll_slave_agent_rdata_fifo_out_valid;                                     // pll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] pll_pll_slave_agent_rdata_fifo_out_data;                                      // pll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          pll_pll_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_009:in_0_ready -> pll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                            // avalon_st_adapter_009:out_0_valid -> pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                             // avalon_st_adapter_009:out_0_data -> pll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                            // pll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                            // avalon_st_adapter_009:out_0_error -> pll_pll_slave_agent:rdata_fifo_sink_error
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                               // sdram_controller_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] sdram_controller_s1_agent_rdata_fifo_src_data;                                // sdram_controller_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_010:in_0_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                            // avalon_st_adapter_010:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                             // avalon_st_adapter_010:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                            // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                            // avalon_st_adapter_010:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error
	wire          timer_1a_s1_agent_rdata_fifo_src_valid;                                       // timer_1a_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] timer_1a_s1_agent_rdata_fifo_src_data;                                        // timer_1a_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          timer_1a_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_011:in_0_ready -> timer_1a_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                            // avalon_st_adapter_011:out_0_valid -> timer_1a_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                             // avalon_st_adapter_011:out_0_data -> timer_1a_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                            // timer_1a_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                            // avalon_st_adapter_011:out_0_error -> timer_1a_s1_agent:rdata_fifo_sink_error
	wire          mem_info_s1_agent_rdata_fifo_src_valid;                                       // mem_info_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] mem_info_s1_agent_rdata_fifo_src_data;                                        // mem_info_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          mem_info_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_012:in_0_ready -> mem_info_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                            // avalon_st_adapter_012:out_0_valid -> mem_info_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                             // avalon_st_adapter_012:out_0_data -> mem_info_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                            // mem_info_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                            // avalon_st_adapter_012:out_0_error -> mem_info_s1_agent:rdata_fifo_sink_error
	wire          fifo_qd_p3_in_agent_rdata_fifo_src_valid;                                     // fifo_qd_p3_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] fifo_qd_p3_in_agent_rdata_fifo_src_data;                                      // fifo_qd_p3_in_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          fifo_qd_p3_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_013:in_0_ready -> fifo_qd_p3_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                            // avalon_st_adapter_013:out_0_valid -> fifo_qd_p3_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                             // avalon_st_adapter_013:out_0_data -> fifo_qd_p3_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                            // fifo_qd_p3_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                            // avalon_st_adapter_013:out_0_error -> fifo_qd_p3_in_agent:rdata_fifo_sink_error
	wire          fifo_qc_p3_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qc_p3_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] fifo_qc_p3_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qc_p3_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          fifo_qc_p3_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_014:in_0_ready -> fifo_qc_p3_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                            // avalon_st_adapter_014:out_0_valid -> fifo_qc_p3_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                             // avalon_st_adapter_014:out_0_data -> fifo_qc_p3_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                            // fifo_qc_p3_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                            // avalon_st_adapter_014:out_0_error -> fifo_qc_p3_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qd_p3_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qd_p3_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] fifo_qd_p3_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qd_p3_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          fifo_qd_p3_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_015:in_0_ready -> fifo_qd_p3_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                            // avalon_st_adapter_015:out_0_valid -> fifo_qd_p3_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                             // avalon_st_adapter_015:out_0_data -> fifo_qd_p3_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                            // fifo_qd_p3_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                            // avalon_st_adapter_015:out_0_error -> fifo_qd_p3_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qc_p3_out_agent_rdata_fifo_src_valid;                                    // fifo_qc_p3_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] fifo_qc_p3_out_agent_rdata_fifo_src_data;                                     // fifo_qc_p3_out_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          fifo_qc_p3_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_016:in_0_ready -> fifo_qc_p3_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                            // avalon_st_adapter_016:out_0_valid -> fifo_qc_p3_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                             // avalon_st_adapter_016:out_0_data -> fifo_qc_p3_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                            // fifo_qc_p3_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                            // avalon_st_adapter_016:out_0_error -> fifo_qc_p3_out_agent:rdata_fifo_sink_error
	wire          fifo_qe_in_agent_rdata_fifo_src_valid;                                        // fifo_qe_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] fifo_qe_in_agent_rdata_fifo_src_data;                                         // fifo_qe_in_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          fifo_qe_in_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_017:in_0_ready -> fifo_qe_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                            // avalon_st_adapter_017:out_0_valid -> fifo_qe_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                             // avalon_st_adapter_017:out_0_data -> fifo_qe_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                            // fifo_qe_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                            // avalon_st_adapter_017:out_0_error -> fifo_qe_in_agent:rdata_fifo_sink_error
	wire          fifo_qd_p1_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qd_p1_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] fifo_qd_p1_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qd_p1_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          fifo_qd_p1_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_018:in_0_ready -> fifo_qd_p1_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                            // avalon_st_adapter_018:out_0_valid -> fifo_qd_p1_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                             // avalon_st_adapter_018:out_0_data -> fifo_qd_p1_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                            // fifo_qd_p1_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                            // avalon_st_adapter_018:out_0_error -> fifo_qd_p1_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qe_in_csr_agent_rdata_fifo_src_valid;                                    // fifo_qe_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] fifo_qe_in_csr_agent_rdata_fifo_src_data;                                     // fifo_qe_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          fifo_qe_in_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_019:in_0_ready -> fifo_qe_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                            // avalon_st_adapter_019:out_0_valid -> fifo_qe_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                             // avalon_st_adapter_019:out_0_data -> fifo_qe_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                            // fifo_qe_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                            // avalon_st_adapter_019:out_0_error -> fifo_qe_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qd_p2_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qd_p2_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] fifo_qd_p2_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qd_p2_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          fifo_qd_p2_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_020:in_0_ready -> fifo_qd_p2_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                            // avalon_st_adapter_020:out_0_valid -> fifo_qd_p2_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                             // avalon_st_adapter_020:out_0_data -> fifo_qd_p2_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                            // fifo_qd_p2_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                            // avalon_st_adapter_020:out_0_error -> fifo_qd_p2_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qd_p1_out_agent_rdata_fifo_src_valid;                                    // fifo_qd_p1_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] fifo_qd_p1_out_agent_rdata_fifo_src_data;                                     // fifo_qd_p1_out_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          fifo_qd_p1_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_021:in_0_ready -> fifo_qd_p1_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                            // avalon_st_adapter_021:out_0_valid -> fifo_qd_p1_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                             // avalon_st_adapter_021:out_0_data -> fifo_qd_p1_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                            // fifo_qd_p1_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                            // avalon_st_adapter_021:out_0_error -> fifo_qd_p1_out_agent:rdata_fifo_sink_error
	wire          fifo_qd_p2_out_agent_rdata_fifo_src_valid;                                    // fifo_qd_p2_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] fifo_qd_p2_out_agent_rdata_fifo_src_data;                                     // fifo_qd_p2_out_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          fifo_qd_p2_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_022:in_0_ready -> fifo_qd_p2_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                            // avalon_st_adapter_022:out_0_valid -> fifo_qd_p2_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                             // avalon_st_adapter_022:out_0_data -> fifo_qd_p2_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                            // fifo_qd_p2_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                            // avalon_st_adapter_022:out_0_error -> fifo_qd_p2_out_agent:rdata_fifo_sink_error
	wire          fifo_qd_p3_out_agent_rdata_fifo_src_valid;                                    // fifo_qd_p3_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] fifo_qd_p3_out_agent_rdata_fifo_src_data;                                     // fifo_qd_p3_out_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          fifo_qd_p3_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_023:in_0_ready -> fifo_qd_p3_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                            // avalon_st_adapter_023:out_0_valid -> fifo_qd_p3_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                             // avalon_st_adapter_023:out_0_data -> fifo_qd_p3_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                            // fifo_qd_p3_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                            // avalon_st_adapter_023:out_0_error -> fifo_qd_p3_out_agent:rdata_fifo_sink_error
	wire          fifo_qd_p2_in_agent_rdata_fifo_src_valid;                                     // fifo_qd_p2_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] fifo_qd_p2_in_agent_rdata_fifo_src_data;                                      // fifo_qd_p2_in_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          fifo_qd_p2_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_024:in_0_ready -> fifo_qd_p2_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                            // avalon_st_adapter_024:out_0_valid -> fifo_qd_p2_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                             // avalon_st_adapter_024:out_0_data -> fifo_qd_p2_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                            // fifo_qd_p2_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                            // avalon_st_adapter_024:out_0_error -> fifo_qd_p2_in_agent:rdata_fifo_sink_error
	wire          fifo_qc_p2_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qc_p2_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] fifo_qc_p2_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qc_p2_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          fifo_qc_p2_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_025:in_0_ready -> fifo_qc_p2_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                            // avalon_st_adapter_025:out_0_valid -> fifo_qc_p2_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                             // avalon_st_adapter_025:out_0_data -> fifo_qc_p2_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                            // fifo_qc_p2_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                            // avalon_st_adapter_025:out_0_error -> fifo_qc_p2_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qc_p2_out_agent_rdata_fifo_src_valid;                                    // fifo_qc_p2_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] fifo_qc_p2_out_agent_rdata_fifo_src_data;                                     // fifo_qc_p2_out_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          fifo_qc_p2_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_026:in_0_ready -> fifo_qc_p2_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                            // avalon_st_adapter_026:out_0_valid -> fifo_qc_p2_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                             // avalon_st_adapter_026:out_0_data -> fifo_qc_p2_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                            // fifo_qc_p2_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                            // avalon_st_adapter_026:out_0_error -> fifo_qc_p2_out_agent:rdata_fifo_sink_error
	wire          fifo_qc_p2_in_agent_rdata_fifo_src_valid;                                     // fifo_qc_p2_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] fifo_qc_p2_in_agent_rdata_fifo_src_data;                                      // fifo_qc_p2_in_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          fifo_qc_p2_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_027:in_0_ready -> fifo_qc_p2_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                            // avalon_st_adapter_027:out_0_valid -> fifo_qc_p2_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                             // avalon_st_adapter_027:out_0_data -> fifo_qc_p2_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                            // fifo_qc_p2_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                            // avalon_st_adapter_027:out_0_error -> fifo_qc_p2_in_agent:rdata_fifo_sink_error
	wire          fifo_qb_p2_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qb_p2_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] fifo_qb_p2_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qb_p2_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_028:in_0_data
	wire          fifo_qb_p2_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_028:in_0_ready -> fifo_qb_p2_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_028_out_0_valid;                                            // avalon_st_adapter_028:out_0_valid -> fifo_qb_p2_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                             // avalon_st_adapter_028:out_0_data -> fifo_qb_p2_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                            // fifo_qb_p2_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                            // avalon_st_adapter_028:out_0_error -> fifo_qb_p2_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qb_p2_out_agent_rdata_fifo_src_valid;                                    // fifo_qb_p2_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] fifo_qb_p2_out_agent_rdata_fifo_src_data;                                     // fifo_qb_p2_out_agent:rdata_fifo_src_data -> avalon_st_adapter_029:in_0_data
	wire          fifo_qb_p2_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_029:in_0_ready -> fifo_qb_p2_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_029_out_0_valid;                                            // avalon_st_adapter_029:out_0_valid -> fifo_qb_p2_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                             // avalon_st_adapter_029:out_0_data -> fifo_qb_p2_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                            // fifo_qb_p2_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                            // avalon_st_adapter_029:out_0_error -> fifo_qb_p2_out_agent:rdata_fifo_sink_error
	wire          fifo_qb_p2_in_agent_rdata_fifo_src_valid;                                     // fifo_qb_p2_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] fifo_qb_p2_in_agent_rdata_fifo_src_data;                                      // fifo_qb_p2_in_agent:rdata_fifo_src_data -> avalon_st_adapter_030:in_0_data
	wire          fifo_qb_p2_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_030:in_0_ready -> fifo_qb_p2_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_030_out_0_valid;                                            // avalon_st_adapter_030:out_0_valid -> fifo_qb_p2_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                             // avalon_st_adapter_030:out_0_data -> fifo_qb_p2_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                            // fifo_qb_p2_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                            // avalon_st_adapter_030:out_0_error -> fifo_qb_p2_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p2_out_agent_rdata_fifo_src_valid;                                    // fifo_qa_p2_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] fifo_qa_p2_out_agent_rdata_fifo_src_data;                                     // fifo_qa_p2_out_agent:rdata_fifo_src_data -> avalon_st_adapter_031:in_0_data
	wire          fifo_qa_p2_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_031:in_0_ready -> fifo_qa_p2_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_031_out_0_valid;                                            // avalon_st_adapter_031:out_0_valid -> fifo_qa_p2_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                             // avalon_st_adapter_031:out_0_data -> fifo_qa_p2_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                            // fifo_qa_p2_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                            // avalon_st_adapter_031:out_0_error -> fifo_qa_p2_out_agent:rdata_fifo_sink_error
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_032:in_0_valid
	wire   [33:0] jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_032:in_0_data
	wire          jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // avalon_st_adapter_032:in_0_ready -> jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_032_out_0_valid;                                            // avalon_st_adapter_032:out_0_valid -> jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_032_out_0_data;                                             // avalon_st_adapter_032:out_0_data -> jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                            // jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                            // avalon_st_adapter_032:out_0_error -> jtag_uart_1f_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_1f_control_slave_agent_rdata_fifo_src_valid;                            // sysid_1f_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_033:in_0_valid
	wire   [33:0] sysid_1f_control_slave_agent_rdata_fifo_src_data;                             // sysid_1f_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_033:in_0_data
	wire          sysid_1f_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_033:in_0_ready -> sysid_1f_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_033_out_0_valid;                                            // avalon_st_adapter_033:out_0_valid -> sysid_1f_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_033_out_0_data;                                             // avalon_st_adapter_033:out_0_data -> sysid_1f_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                            // sysid_1f_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                            // avalon_st_adapter_033:out_0_error -> sysid_1f_control_slave_agent:rdata_fifo_sink_error
	wire          cpu_1f_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_1f_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_034:in_0_valid
	wire   [33:0] cpu_1f_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_1f_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_034:in_0_data
	wire          cpu_1f_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_034:in_0_ready -> cpu_1f_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_034_out_0_valid;                                            // avalon_st_adapter_034:out_0_valid -> cpu_1f_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_034_out_0_data;                                             // avalon_st_adapter_034:out_0_data -> cpu_1f_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                            // cpu_1f_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                            // avalon_st_adapter_034:out_0_error -> cpu_1f_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          fifo_qe_out_agent_rdata_fifo_src_valid;                                       // fifo_qe_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_035:in_0_valid
	wire   [33:0] fifo_qe_out_agent_rdata_fifo_src_data;                                        // fifo_qe_out_agent:rdata_fifo_src_data -> avalon_st_adapter_035:in_0_data
	wire          fifo_qe_out_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_035:in_0_ready -> fifo_qe_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_035_out_0_valid;                                            // avalon_st_adapter_035:out_0_valid -> fifo_qe_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_035_out_0_data;                                             // avalon_st_adapter_035:out_0_data -> fifo_qe_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                            // fifo_qe_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                            // avalon_st_adapter_035:out_0_error -> fifo_qe_out_agent:rdata_fifo_sink_error
	wire          timer_1f_s1_agent_rdata_fifo_src_valid;                                       // timer_1f_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_036:in_0_valid
	wire   [33:0] timer_1f_s1_agent_rdata_fifo_src_data;                                        // timer_1f_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_036:in_0_data
	wire          timer_1f_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_036:in_0_ready -> timer_1f_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_036_out_0_valid;                                            // avalon_st_adapter_036:out_0_valid -> timer_1f_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_036_out_0_data;                                             // avalon_st_adapter_036:out_0_data -> timer_1f_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                            // timer_1f_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                            // avalon_st_adapter_036:out_0_error -> timer_1f_s1_agent:rdata_fifo_sink_error
	wire          fifo_qd_p1_in_agent_rdata_fifo_src_valid;                                     // fifo_qd_p1_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_037:in_0_valid
	wire   [33:0] fifo_qd_p1_in_agent_rdata_fifo_src_data;                                      // fifo_qd_p1_in_agent:rdata_fifo_src_data -> avalon_st_adapter_037:in_0_data
	wire          fifo_qd_p1_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_037:in_0_ready -> fifo_qd_p1_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_037_out_0_valid;                                            // avalon_st_adapter_037:out_0_valid -> fifo_qd_p1_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_037_out_0_data;                                             // avalon_st_adapter_037:out_0_data -> fifo_qd_p1_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_037_out_0_ready;                                            // fifo_qd_p1_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_037:out_0_ready
	wire    [0:0] avalon_st_adapter_037_out_0_error;                                            // avalon_st_adapter_037:out_0_error -> fifo_qd_p1_in_agent:rdata_fifo_sink_error
	wire          fifo_qc_p1_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qc_p1_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_038:in_0_valid
	wire   [33:0] fifo_qc_p1_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qc_p1_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_038:in_0_data
	wire          fifo_qc_p1_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_038:in_0_ready -> fifo_qc_p1_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_038_out_0_valid;                                            // avalon_st_adapter_038:out_0_valid -> fifo_qc_p1_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_038_out_0_data;                                             // avalon_st_adapter_038:out_0_data -> fifo_qc_p1_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_038_out_0_ready;                                            // fifo_qc_p1_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_038:out_0_ready
	wire    [0:0] avalon_st_adapter_038_out_0_error;                                            // avalon_st_adapter_038:out_0_error -> fifo_qc_p1_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qc_p1_out_agent_rdata_fifo_src_valid;                                    // fifo_qc_p1_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_039:in_0_valid
	wire   [33:0] fifo_qc_p1_out_agent_rdata_fifo_src_data;                                     // fifo_qc_p1_out_agent:rdata_fifo_src_data -> avalon_st_adapter_039:in_0_data
	wire          fifo_qc_p1_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_039:in_0_ready -> fifo_qc_p1_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_039_out_0_valid;                                            // avalon_st_adapter_039:out_0_valid -> fifo_qc_p1_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_039_out_0_data;                                             // avalon_st_adapter_039:out_0_data -> fifo_qc_p1_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_039_out_0_ready;                                            // fifo_qc_p1_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_039:out_0_ready
	wire    [0:0] avalon_st_adapter_039_out_0_error;                                            // avalon_st_adapter_039:out_0_error -> fifo_qc_p1_out_agent:rdata_fifo_sink_error
	wire          fifo_qc_p1_in_agent_rdata_fifo_src_valid;                                     // fifo_qc_p1_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_040:in_0_valid
	wire   [33:0] fifo_qc_p1_in_agent_rdata_fifo_src_data;                                      // fifo_qc_p1_in_agent:rdata_fifo_src_data -> avalon_st_adapter_040:in_0_data
	wire          fifo_qc_p1_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_040:in_0_ready -> fifo_qc_p1_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_040_out_0_valid;                                            // avalon_st_adapter_040:out_0_valid -> fifo_qc_p1_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_040_out_0_data;                                             // avalon_st_adapter_040:out_0_data -> fifo_qc_p1_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_040_out_0_ready;                                            // fifo_qc_p1_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_040:out_0_ready
	wire    [0:0] avalon_st_adapter_040_out_0_error;                                            // avalon_st_adapter_040:out_0_error -> fifo_qc_p1_in_agent:rdata_fifo_sink_error
	wire          fifo_qb_p1_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qb_p1_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_041:in_0_valid
	wire   [33:0] fifo_qb_p1_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qb_p1_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_041:in_0_data
	wire          fifo_qb_p1_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_041:in_0_ready -> fifo_qb_p1_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_041_out_0_valid;                                            // avalon_st_adapter_041:out_0_valid -> fifo_qb_p1_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_041_out_0_data;                                             // avalon_st_adapter_041:out_0_data -> fifo_qb_p1_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_041_out_0_ready;                                            // fifo_qb_p1_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_041:out_0_ready
	wire    [0:0] avalon_st_adapter_041_out_0_error;                                            // avalon_st_adapter_041:out_0_error -> fifo_qb_p1_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qb_p1_out_agent_rdata_fifo_src_valid;                                    // fifo_qb_p1_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_042:in_0_valid
	wire   [33:0] fifo_qb_p1_out_agent_rdata_fifo_src_data;                                     // fifo_qb_p1_out_agent:rdata_fifo_src_data -> avalon_st_adapter_042:in_0_data
	wire          fifo_qb_p1_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_042:in_0_ready -> fifo_qb_p1_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_042_out_0_valid;                                            // avalon_st_adapter_042:out_0_valid -> fifo_qb_p1_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_042_out_0_data;                                             // avalon_st_adapter_042:out_0_data -> fifo_qb_p1_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_042_out_0_ready;                                            // fifo_qb_p1_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_042:out_0_ready
	wire    [0:0] avalon_st_adapter_042_out_0_error;                                            // avalon_st_adapter_042:out_0_error -> fifo_qb_p1_out_agent:rdata_fifo_sink_error
	wire          fifo_qb_p1_in_agent_rdata_fifo_src_valid;                                     // fifo_qb_p1_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_043:in_0_valid
	wire   [33:0] fifo_qb_p1_in_agent_rdata_fifo_src_data;                                      // fifo_qb_p1_in_agent:rdata_fifo_src_data -> avalon_st_adapter_043:in_0_data
	wire          fifo_qb_p1_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_043:in_0_ready -> fifo_qb_p1_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_043_out_0_valid;                                            // avalon_st_adapter_043:out_0_valid -> fifo_qb_p1_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_043_out_0_data;                                             // avalon_st_adapter_043:out_0_data -> fifo_qb_p1_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_043_out_0_ready;                                            // fifo_qb_p1_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_043:out_0_ready
	wire    [0:0] avalon_st_adapter_043_out_0_error;                                            // avalon_st_adapter_043:out_0_error -> fifo_qb_p1_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p1_out_agent_rdata_fifo_src_valid;                                    // fifo_qa_p1_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_044:in_0_valid
	wire   [33:0] fifo_qa_p1_out_agent_rdata_fifo_src_data;                                     // fifo_qa_p1_out_agent:rdata_fifo_src_data -> avalon_st_adapter_044:in_0_data
	wire          fifo_qa_p1_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_044:in_0_ready -> fifo_qa_p1_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_044_out_0_valid;                                            // avalon_st_adapter_044:out_0_valid -> fifo_qa_p1_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_044_out_0_data;                                             // avalon_st_adapter_044:out_0_data -> fifo_qa_p1_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_044_out_0_ready;                                            // fifo_qa_p1_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_044:out_0_ready
	wire    [0:0] avalon_st_adapter_044_out_0_error;                                            // avalon_st_adapter_044:out_0_error -> fifo_qa_p1_out_agent:rdata_fifo_sink_error
	wire          fifo_qc_p3_in_agent_rdata_fifo_src_valid;                                     // fifo_qc_p3_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_045:in_0_valid
	wire   [33:0] fifo_qc_p3_in_agent_rdata_fifo_src_data;                                      // fifo_qc_p3_in_agent:rdata_fifo_src_data -> avalon_st_adapter_045:in_0_data
	wire          fifo_qc_p3_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_045:in_0_ready -> fifo_qc_p3_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_045_out_0_valid;                                            // avalon_st_adapter_045:out_0_valid -> fifo_qc_p3_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_045_out_0_data;                                             // avalon_st_adapter_045:out_0_data -> fifo_qc_p3_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_045_out_0_ready;                                            // fifo_qc_p3_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_045:out_0_ready
	wire    [0:0] avalon_st_adapter_045_out_0_error;                                            // avalon_st_adapter_045:out_0_error -> fifo_qc_p3_in_agent:rdata_fifo_sink_error
	wire          fifo_qb_p3_in_csr_agent_rdata_fifo_src_valid;                                 // fifo_qb_p3_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_046:in_0_valid
	wire   [33:0] fifo_qb_p3_in_csr_agent_rdata_fifo_src_data;                                  // fifo_qb_p3_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_046:in_0_data
	wire          fifo_qb_p3_in_csr_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_046:in_0_ready -> fifo_qb_p3_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_046_out_0_valid;                                            // avalon_st_adapter_046:out_0_valid -> fifo_qb_p3_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_046_out_0_data;                                             // avalon_st_adapter_046:out_0_data -> fifo_qb_p3_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_046_out_0_ready;                                            // fifo_qb_p3_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_046:out_0_ready
	wire    [0:0] avalon_st_adapter_046_out_0_error;                                            // avalon_st_adapter_046:out_0_error -> fifo_qb_p3_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_qb_p3_out_agent_rdata_fifo_src_valid;                                    // fifo_qb_p3_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_047:in_0_valid
	wire   [33:0] fifo_qb_p3_out_agent_rdata_fifo_src_data;                                     // fifo_qb_p3_out_agent:rdata_fifo_src_data -> avalon_st_adapter_047:in_0_data
	wire          fifo_qb_p3_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_047:in_0_ready -> fifo_qb_p3_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_047_out_0_valid;                                            // avalon_st_adapter_047:out_0_valid -> fifo_qb_p3_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_047_out_0_data;                                             // avalon_st_adapter_047:out_0_data -> fifo_qb_p3_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_047_out_0_ready;                                            // fifo_qb_p3_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_047:out_0_ready
	wire    [0:0] avalon_st_adapter_047_out_0_error;                                            // avalon_st_adapter_047:out_0_error -> fifo_qb_p3_out_agent:rdata_fifo_sink_error
	wire          fifo_qb_p3_in_agent_rdata_fifo_src_valid;                                     // fifo_qb_p3_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_048:in_0_valid
	wire   [33:0] fifo_qb_p3_in_agent_rdata_fifo_src_data;                                      // fifo_qb_p3_in_agent:rdata_fifo_src_data -> avalon_st_adapter_048:in_0_data
	wire          fifo_qb_p3_in_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_048:in_0_ready -> fifo_qb_p3_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_048_out_0_valid;                                            // avalon_st_adapter_048:out_0_valid -> fifo_qb_p3_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_048_out_0_data;                                             // avalon_st_adapter_048:out_0_data -> fifo_qb_p3_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_048_out_0_ready;                                            // fifo_qb_p3_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_048:out_0_ready
	wire    [0:0] avalon_st_adapter_048_out_0_error;                                            // avalon_st_adapter_048:out_0_error -> fifo_qb_p3_in_agent:rdata_fifo_sink_error
	wire          fifo_qa_p3_out_agent_rdata_fifo_src_valid;                                    // fifo_qa_p3_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_049:in_0_valid
	wire   [33:0] fifo_qa_p3_out_agent_rdata_fifo_src_data;                                     // fifo_qa_p3_out_agent:rdata_fifo_src_data -> avalon_st_adapter_049:in_0_data
	wire          fifo_qa_p3_out_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_049:in_0_ready -> fifo_qa_p3_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_049_out_0_valid;                                            // avalon_st_adapter_049:out_0_valid -> fifo_qa_p3_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_049_out_0_data;                                             // avalon_st_adapter_049:out_0_data -> fifo_qa_p3_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_049_out_0_ready;                                            // fifo_qa_p3_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_049:out_0_ready
	wire    [0:0] avalon_st_adapter_049_out_0_error;                                            // avalon_st_adapter_049:out_0_error -> fifo_qa_p3_out_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_1a_data_master_translator (
		.clk                    (pll_c0_clk),                                                            //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_1a_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1a_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1a_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1a_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1a_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1a_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1a_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1a_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1a_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1a_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1a_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1a_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1a_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_1a_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_1a_data_master_read),                                               //                          .read
		.av_readdata            (cpu_1a_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_1a_data_master_write),                                              //                          .write
		.av_writedata           (cpu_1a_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_1a_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_1f_data_master_translator (
		.clk                    (pll_c0_clk),                                                            //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_1f_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1f_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1f_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1f_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1f_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1f_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1f_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1f_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1f_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1f_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1f_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1f_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1f_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_1f_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_1f_data_master_read),                                               //                          .read
		.av_readdata            (cpu_1f_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_1f_data_master_write),                                              //                          .write
		.av_writedata           (cpu_1f_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_1f_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1b_p1_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1b_p1_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1b_p1_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1b_p1_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1b_p1_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1b_p1_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1b_p1_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1b_p1_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1b_p1_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1b_p1_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1b_p1_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1e_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                               //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                 //                     reset.reset
		.uav_address            (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1e_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1e_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1e_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1e_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1e_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1e_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1e_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1e_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1e_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1e_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1d_p1_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1d_p1_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1d_p1_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1d_p1_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1d_p1_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1d_p1_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1d_p1_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1d_p1_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1d_p1_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1d_p1_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1d_p1_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1c_p1_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1c_p1_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1c_p1_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1c_p1_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1c_p1_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1c_p1_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1c_p1_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1c_p1_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1c_p1_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1c_p1_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1c_p1_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1b_p2_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1b_p2_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1b_p2_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1b_p2_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1b_p2_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1b_p2_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1b_p2_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1b_p2_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1b_p2_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1b_p2_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1b_p2_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1b_p3_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1b_p3_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1b_p3_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1b_p3_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1b_p3_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1b_p3_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1b_p3_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1b_p3_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1b_p3_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1b_p3_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1b_p3_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1c_p2_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1c_p2_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1c_p2_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1c_p2_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1c_p2_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1c_p2_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1c_p2_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1c_p2_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1c_p2_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1c_p2_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1c_p2_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1c_p3_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1c_p3_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1c_p3_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1c_p3_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1c_p3_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1c_p3_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1c_p3_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1c_p3_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1c_p3_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1c_p3_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1c_p3_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1d_p2_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1d_p2_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1d_p2_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1d_p2_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1d_p2_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1d_p2_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1d_p2_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1d_p2_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1d_p2_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1d_p2_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1d_p2_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1d_p3_mm_bridge_0_m0_translator (
		.clk                    (pll_c0_clk),                                                                  //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_1d_p3_mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_1d_p3_mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (CPU_1d_p3_mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (CPU_1d_p3_mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (CPU_1d_p3_mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (CPU_1d_p3_mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_1d_p3_mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_1d_p3_mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (CPU_1d_p3_mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_1d_p3_mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1a_instruction_master_translator (
		.clk                    (pll_c0_clk),                                                                   //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_1a_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1a_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1a_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1a_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1a_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1a_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1a_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1a_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1a_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1a_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1a_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1a_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1a_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_1a_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_1a_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1f_instruction_master_translator (
		.clk                    (pll_c0_clk),                                                                   //                       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_1f_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1f_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1f_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1f_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1f_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1f_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1f_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1f_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1f_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1f_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1f_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1f_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1f_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_1f_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_1f_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_1a_avalon_jtag_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_1a_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_1a_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_1a_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_1a_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_1a_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_1a_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_1a_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_1a_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_1a_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_1a_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_1a_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_1a_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_1a_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_1a_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_1a_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_1a_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_1a_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_1a_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_id_1a_control_slave_translator (
		.clk                    (pll_c0_clk),                                     //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (sys_id_1a_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sys_id_1a_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sys_id_1a_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sys_id_1a_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sys_id_1a_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sys_id_1a_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sys_id_1a_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sys_id_1a_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sys_id_1a_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sys_id_1a_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sys_id_1a_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sys_id_1a_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sys_id_1a_control_slave_readdata),               //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_1a_debug_mem_slave_translator (
		.clk                    (pll_c0_clk),                                    //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_1a_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_1a_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_1a_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_1a_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_1a_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_1a_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_1a_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_1a_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_1a_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_1a_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_1a_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_1a_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_1a_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_1a_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_1a_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_1a_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_1a_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_1a_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_1a_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p1_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p1_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p1_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qa_p1_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qa_p1_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qa_p1_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p1_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p1_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qa_p1_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qa_p1_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qa_p1_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qa_p1_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qa_p1_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qa_p1_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qa_p1_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p2_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p2_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p2_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qa_p2_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qa_p2_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qa_p2_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p2_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p2_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qa_p2_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qa_p2_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qa_p2_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qa_p2_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qa_p2_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qa_p2_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qa_p2_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p3_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p3_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p3_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qa_p3_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qa_p3_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qa_p3_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p3_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p3_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qa_p3_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qa_p3_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qa_p3_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qa_p3_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qa_p3_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qa_p3_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qa_p3_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p1_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p1_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p1_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qa_p1_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qa_p1_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qa_p1_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p1_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p1_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qa_p1_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qa_p1_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qa_p1_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qa_p1_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qa_p1_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qa_p1_in_csr_write),                  //                         .write
		.av_read                (fifo_qa_p1_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qa_p1_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qa_p1_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p2_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p2_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p2_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qa_p2_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qa_p2_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qa_p2_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p2_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p2_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qa_p2_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qa_p2_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qa_p2_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qa_p2_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qa_p2_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qa_p2_in_csr_write),                  //                         .write
		.av_read                (fifo_qa_p2_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qa_p2_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qa_p2_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p3_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p3_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p3_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qa_p3_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qa_p3_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qa_p3_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p3_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p3_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qa_p3_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qa_p3_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qa_p3_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qa_p3_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qa_p3_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qa_p3_in_csr_write),                  //                         .write
		.av_read                (fifo_qa_p3_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qa_p3_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qa_p3_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pll_pll_slave_translator (
		.clk                    (clock_clk_clk),                                         //                      clk.clk
		.reset                  (pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (pll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (pll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (pll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (pll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (pll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (pll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (pll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (pll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (pll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (pll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (pll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (pll_pll_slave_write),                                   //                         .write
		.av_read                (pll_pll_slave_read),                                    //                         .read
		.av_readdata            (pll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (pll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (pll_c0_clk),                                 //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),          //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                  //                         .write
		.av_read                (sdram_controller_s1_read),                   //                         .read
		.av_readdata            (sdram_controller_s1_readdata),               //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),              //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),             //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),            //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1a_s1_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1a_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1a_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_1a_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_1a_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_1a_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_1a_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_1a_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_1a_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_1a_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_1a_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_1a_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_1a_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_1a_s1_write),                        //                         .write
		.av_readdata            (timer_1a_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_1a_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_1a_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_info_s1_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_info_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_info_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (mem_info_s1_agent_m0_read),                //                         .read
		.uav_write              (mem_info_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (mem_info_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (mem_info_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (mem_info_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (mem_info_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (mem_info_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (mem_info_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (mem_info_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (mem_info_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (mem_info_s1_write),                        //                         .write
		.av_readdata            (mem_info_s1_readdata),                     //                         .readdata
		.av_writedata           (mem_info_s1_writedata),                    //                         .writedata
		.av_byteenable          (mem_info_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (mem_info_s1_chipselect),                   //                         .chipselect
		.av_clken               (mem_info_s1_clken),                        //                         .clken
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p3_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p3_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p3_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qd_p3_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qd_p3_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qd_p3_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p3_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p3_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qd_p3_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qd_p3_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qd_p3_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qd_p3_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qd_p3_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qd_p3_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qd_p3_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p3_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p3_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p3_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qc_p3_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qc_p3_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qc_p3_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p3_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p3_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qc_p3_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qc_p3_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qc_p3_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qc_p3_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qc_p3_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qc_p3_in_csr_write),                  //                         .write
		.av_read                (fifo_qc_p3_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qc_p3_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qc_p3_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p3_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p3_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p3_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qd_p3_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qd_p3_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qd_p3_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p3_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p3_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qd_p3_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qd_p3_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qd_p3_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qd_p3_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qd_p3_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qd_p3_in_csr_write),                  //                         .write
		.av_read                (fifo_qd_p3_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qd_p3_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qd_p3_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p3_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p3_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p3_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qc_p3_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qc_p3_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qc_p3_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p3_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p3_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qc_p3_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qc_p3_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qc_p3_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qc_p3_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qc_p3_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qc_p3_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qc_p3_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qe_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qe_in_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qe_in_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (fifo_qe_in_agent_m0_read),                 //                         .read
		.uav_write              (fifo_qe_in_agent_m0_write),                //                         .write
		.uav_waitrequest        (fifo_qe_in_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (fifo_qe_in_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (fifo_qe_in_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (fifo_qe_in_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (fifo_qe_in_agent_m0_writedata),            //                         .writedata
		.uav_lock               (fifo_qe_in_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (fifo_qe_in_agent_m0_debugaccess),          //                         .debugaccess
		.av_write               (fifo_qe_in_write),                         //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qe_in_writedata),                     //                         .writedata
		.av_waitrequest         (fifo_qe_in_waitrequest),                   //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p1_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p1_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p1_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qd_p1_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qd_p1_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qd_p1_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p1_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p1_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qd_p1_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qd_p1_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qd_p1_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qd_p1_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qd_p1_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qd_p1_in_csr_write),                  //                         .write
		.av_read                (fifo_qd_p1_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qd_p1_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qd_p1_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qe_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qe_in_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qe_in_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qe_in_csr_agent_m0_read),             //                         .read
		.uav_write              (fifo_qe_in_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qe_in_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qe_in_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qe_in_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qe_in_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qe_in_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qe_in_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qe_in_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (fifo_qe_in_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (fifo_qe_in_csr_write),                     //                         .write
		.av_read                (fifo_qe_in_csr_read),                      //                         .read
		.av_readdata            (fifo_qe_in_csr_readdata),                  //                         .readdata
		.av_writedata           (fifo_qe_in_csr_writedata),                 //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p2_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p2_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p2_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qd_p2_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qd_p2_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qd_p2_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p2_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p2_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qd_p2_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qd_p2_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qd_p2_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qd_p2_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qd_p2_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qd_p2_in_csr_write),                  //                         .write
		.av_read                (fifo_qd_p2_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qd_p2_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qd_p2_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p1_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p1_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p1_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qd_p1_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qd_p1_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qd_p1_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p1_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p1_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qd_p1_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qd_p1_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qd_p1_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qd_p1_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qd_p1_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qd_p1_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qd_p1_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p2_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p2_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p2_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qd_p2_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qd_p2_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qd_p2_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p2_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p2_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qd_p2_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qd_p2_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qd_p2_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qd_p2_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qd_p2_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qd_p2_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qd_p2_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p3_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p3_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p3_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qd_p3_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qd_p3_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qd_p3_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p3_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p3_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qd_p3_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qd_p3_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qd_p3_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qd_p3_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qd_p3_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qd_p3_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qd_p3_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p2_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p2_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p2_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qd_p2_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qd_p2_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qd_p2_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p2_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p2_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qd_p2_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qd_p2_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qd_p2_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qd_p2_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qd_p2_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qd_p2_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qd_p2_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p2_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p2_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p2_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qc_p2_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qc_p2_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qc_p2_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p2_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p2_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qc_p2_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qc_p2_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qc_p2_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qc_p2_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qc_p2_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qc_p2_in_csr_write),                  //                         .write
		.av_read                (fifo_qc_p2_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qc_p2_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qc_p2_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p2_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p2_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p2_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qc_p2_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qc_p2_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qc_p2_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p2_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p2_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qc_p2_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qc_p2_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qc_p2_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qc_p2_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qc_p2_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qc_p2_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qc_p2_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p2_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p2_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p2_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qc_p2_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qc_p2_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qc_p2_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p2_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p2_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qc_p2_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qc_p2_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qc_p2_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qc_p2_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qc_p2_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qc_p2_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qc_p2_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p2_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p2_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p2_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qb_p2_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qb_p2_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qb_p2_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p2_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p2_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qb_p2_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qb_p2_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qb_p2_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qb_p2_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qb_p2_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qb_p2_in_csr_write),                  //                         .write
		.av_read                (fifo_qb_p2_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qb_p2_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qb_p2_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p2_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p2_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p2_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qb_p2_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qb_p2_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qb_p2_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p2_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p2_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qb_p2_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qb_p2_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qb_p2_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qb_p2_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qb_p2_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qb_p2_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qb_p2_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p2_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p2_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p2_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qb_p2_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qb_p2_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qb_p2_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p2_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p2_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qb_p2_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qb_p2_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qb_p2_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qb_p2_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qb_p2_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qb_p2_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qb_p2_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p2_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p2_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p2_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qa_p2_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qa_p2_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qa_p2_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p2_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p2_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qa_p2_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qa_p2_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qa_p2_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qa_p2_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qa_p2_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qa_p2_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qa_p2_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_1f_avalon_jtag_slave_translator (
		.clk                    (pll_c0_clk),                                            //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_1f_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_1f_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_1f_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_1f_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_1f_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_1f_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_1f_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_1f_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_1f_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_1f_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_1f_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_1f_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_1f_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_1f_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_1f_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_1f_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_1f_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_1f_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_1f_control_slave_translator (
		.clk                    (pll_c0_clk),                                    //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (sysid_1f_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_1f_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_1f_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_1f_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_1f_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_1f_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_1f_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_1f_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_1f_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_1f_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_1f_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_1f_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_1f_control_slave_readdata),               //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_1f_debug_mem_slave_translator (
		.clk                    (pll_c0_clk),                                    //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_1f_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_1f_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_1f_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_1f_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_1f_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_1f_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_1f_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_1f_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_1f_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_1f_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_1f_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_1f_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_1f_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_1f_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_1f_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_1f_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_1f_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_1f_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_1f_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qe_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qe_out_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qe_out_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (fifo_qe_out_agent_m0_read),                //                         .read
		.uav_write              (fifo_qe_out_agent_m0_write),               //                         .write
		.uav_waitrequest        (fifo_qe_out_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (fifo_qe_out_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (fifo_qe_out_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (fifo_qe_out_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (fifo_qe_out_agent_m0_writedata),           //                         .writedata
		.uav_lock               (fifo_qe_out_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (fifo_qe_out_agent_m0_debugaccess),         //                         .debugaccess
		.av_read                (fifo_qe_out_read),                         //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qe_out_readdata),                     //                         .readdata
		.av_waitrequest         (fifo_qe_out_waitrequest),                  //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1f_s1_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1f_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1f_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_1f_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_1f_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_1f_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_1f_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_1f_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_1f_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_1f_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_1f_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_1f_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_1f_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_1f_s1_write),                        //                         .write
		.av_readdata            (timer_1f_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_1f_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_1f_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qd_p1_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qd_p1_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qd_p1_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qd_p1_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qd_p1_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qd_p1_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qd_p1_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qd_p1_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qd_p1_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qd_p1_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qd_p1_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qd_p1_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qd_p1_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qd_p1_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qd_p1_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p1_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p1_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p1_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qc_p1_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qc_p1_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qc_p1_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p1_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p1_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qc_p1_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qc_p1_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qc_p1_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qc_p1_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qc_p1_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qc_p1_in_csr_write),                  //                         .write
		.av_read                (fifo_qc_p1_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qc_p1_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qc_p1_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p1_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p1_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p1_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qc_p1_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qc_p1_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qc_p1_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p1_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p1_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qc_p1_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qc_p1_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qc_p1_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qc_p1_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qc_p1_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qc_p1_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qc_p1_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p1_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p1_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p1_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qc_p1_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qc_p1_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qc_p1_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p1_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p1_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qc_p1_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qc_p1_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qc_p1_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qc_p1_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qc_p1_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qc_p1_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qc_p1_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p1_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p1_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p1_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qb_p1_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qb_p1_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qb_p1_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p1_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p1_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qb_p1_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qb_p1_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qb_p1_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qb_p1_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qb_p1_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qb_p1_in_csr_write),                  //                         .write
		.av_read                (fifo_qb_p1_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qb_p1_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qb_p1_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p1_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p1_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p1_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qb_p1_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qb_p1_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qb_p1_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p1_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p1_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qb_p1_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qb_p1_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qb_p1_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qb_p1_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qb_p1_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qb_p1_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qb_p1_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p1_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p1_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p1_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qb_p1_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qb_p1_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qb_p1_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p1_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p1_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qb_p1_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qb_p1_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qb_p1_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qb_p1_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qb_p1_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qb_p1_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qb_p1_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p1_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p1_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p1_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qa_p1_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qa_p1_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qa_p1_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p1_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p1_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qa_p1_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qa_p1_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qa_p1_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qa_p1_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qa_p1_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qa_p1_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qa_p1_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qc_p3_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qc_p3_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qc_p3_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qc_p3_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qc_p3_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qc_p3_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qc_p3_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qc_p3_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qc_p3_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qc_p3_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qc_p3_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qc_p3_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qc_p3_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qc_p3_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qc_p3_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p3_in_csr_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p3_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p3_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_qb_p3_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_qb_p3_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_qb_p3_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p3_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p3_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_qb_p3_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_qb_p3_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_qb_p3_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_qb_p3_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_qb_p3_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_qb_p3_in_csr_write),                  //                         .write
		.av_read                (fifo_qb_p3_in_csr_read),                   //                         .read
		.av_readdata            (fifo_qb_p3_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_qb_p3_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p3_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p3_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p3_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qb_p3_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qb_p3_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qb_p3_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p3_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p3_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qb_p3_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qb_p3_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qb_p3_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qb_p3_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qb_p3_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qb_p3_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qb_p3_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qb_p3_in_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qb_p3_in_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qb_p3_in_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fifo_qb_p3_in_agent_m0_read),              //                         .read
		.uav_write              (fifo_qb_p3_in_agent_m0_write),             //                         .write
		.uav_waitrequest        (fifo_qb_p3_in_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fifo_qb_p3_in_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fifo_qb_p3_in_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fifo_qb_p3_in_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fifo_qb_p3_in_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fifo_qb_p3_in_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fifo_qb_p3_in_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (fifo_qb_p3_in_write),                      //      avalon_anti_slave_0.write
		.av_writedata           (fifo_qb_p3_in_writedata),                  //                         .writedata
		.av_waitrequest         (fifo_qb_p3_in_waitrequest),                //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),     //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_qa_p3_out_translator (
		.clk                    (pll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_qa_p3_out_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_qa_p3_out_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fifo_qa_p3_out_agent_m0_read),             //                         .read
		.uav_write              (fifo_qa_p3_out_agent_m0_write),            //                         .write
		.uav_waitrequest        (fifo_qa_p3_out_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fifo_qa_p3_out_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fifo_qa_p3_out_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fifo_qa_p3_out_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fifo_qa_p3_out_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fifo_qa_p3_out_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fifo_qa_p3_out_agent_m0_debugaccess),      //                         .debugaccess
		.av_read                (fifo_qa_p3_out_read),                      //      avalon_anti_slave_0.read
		.av_readdata            (fifo_qa_p3_out_readdata),                  //                         .readdata
		.av_waitrequest         (fifo_qa_p3_out_waitrequest),               //                         .waitrequest
		.av_address             (),                                         //              (terminated)
		.av_write               (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (10),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1a_data_master_agent (
		.clk                   (pll_c0_clk),                                                            //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_1a_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1a_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1a_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1a_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1a_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1a_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1a_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1a_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1a_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1a_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1a_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1a_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1a_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1a_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1a_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1a_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                     //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (12),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1f_data_master_agent (
		.clk                   (pll_c0_clk),                                                            //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_1f_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1f_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1f_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1f_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1f_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1f_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1f_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1f_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1f_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1f_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1f_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1f_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1f_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1f_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1f_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1f_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1b_p1_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1b_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1b_p1_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1b_p1_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1b_p1_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1b_p1_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1b_p1_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1e_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                               //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.av_address            (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1e_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1e_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1e_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1e_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1e_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1e_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1d_p1_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1d_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1d_p1_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1d_p1_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1d_p1_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1d_p1_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1d_p1_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1c_p1_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1c_p1_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1c_p1_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1c_p1_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1c_p1_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1c_p1_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1c_p1_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1b_p2_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1b_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1b_p2_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1b_p2_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1b_p2_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1b_p2_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1b_p2_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1b_p3_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1b_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1b_p3_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1b_p3_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1b_p3_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1b_p3_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1b_p3_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1c_p2_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1c_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1c_p2_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1c_p2_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1c_p2_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1c_p2_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1c_p2_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1c_p3_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1c_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1c_p3_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1c_p3_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1c_p3_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1c_p3_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1c_p3_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1d_p2_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1d_p2_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1d_p2_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1d_p2_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1d_p2_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1d_p2_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1d_p2_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (8),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1d_p3_mm_bridge_0_m0_agent (
		.clk                   (pll_c0_clk),                                                                  //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1d_p3_mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1d_p3_mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1d_p3_mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1d_p3_mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1d_p3_mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1d_p3_mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (13),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1f_instruction_master_agent (
		.clk                   (pll_c0_clk),                                                                   //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_1f_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1f_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1f_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1f_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1f_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1f_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1f_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1f_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1f_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1f_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1f_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1f_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1f_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1f_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1f_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1f_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_012_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_012_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_012_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_012_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_012_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_012_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (11),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1a_instruction_master_agent (
		.clk                   (pll_c0_clk),                                                                   //       clk.clk
		.reset                 (cpu_1a_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_1a_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1a_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1a_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1a_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1a_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1a_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1a_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1a_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1a_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1a_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1a_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1a_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1a_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1a_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1a_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1a_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_013_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_013_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_013_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_013_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_013_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_013_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_1a_avalon_jtag_slave_agent (
		.clk                     (pll_c0_clk),                                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_1a_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_1a_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_1a_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_1a_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_1a_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_1a_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_1a_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_1a_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_1a_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_1a_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_1a_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_1a_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_1a_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_1a_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_1a_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_1a_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                             //                .channel
		.rf_sink_ready           (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_1a_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_1a_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_id_1a_control_slave_agent (
		.clk                     (pll_c0_clk),                                               //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sys_id_1a_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_id_1a_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_id_1a_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_id_1a_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_id_1a_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_id_1a_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_id_1a_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_id_1a_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_id_1a_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_id_1a_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_id_1a_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_id_1a_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_id_1a_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_id_1a_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_id_1a_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_id_1a_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                  //                .channel
		.rf_sink_ready           (sys_id_1a_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_id_1a_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_id_1a_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_id_1a_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_id_1a_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_id_1a_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_id_1a_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_id_1a_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_id_1a_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_id_1a_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (sys_id_1a_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_id_1a_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_id_1a_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_id_1a_control_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                               //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (sys_id_1a_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sys_id_1a_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_id_1a_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_id_1a_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_id_1a_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_id_1a_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_id_1a_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_id_1a_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_id_1a_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_id_1a_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_1a_debug_mem_slave_agent (
		.clk                     (pll_c0_clk),                                              //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_1a_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_1a_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_1a_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_1a_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_1a_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_1a_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_1a_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_1a_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_1a_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_1a_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_1a_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_1a_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_1a_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_1a_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_1a_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_1a_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                 //                .channel
		.rf_sink_ready           (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_1a_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_1a_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_1a_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_1a_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_1a_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1a_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                              //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_1a_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_1a_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_1a_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_1a_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_1a_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_1a_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p1_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qa_p1_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p1_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p1_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p1_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p1_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p1_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p1_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p1_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p1_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p1_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p1_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p1_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p1_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p1_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p1_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p1_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qa_p1_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p1_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p1_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p1_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p1_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p1_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p1_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p1_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p1_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p1_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qa_p1_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p1_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p1_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p1_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qa_p1_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p1_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p1_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p1_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p1_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p1_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p1_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p1_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p1_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p1_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p2_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qa_p2_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p2_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p2_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p2_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p2_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p2_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p2_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p2_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p2_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p2_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p2_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p2_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p2_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p2_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p2_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p2_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qa_p2_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p2_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p2_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p2_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p2_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p2_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p2_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p2_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p2_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p2_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qa_p2_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p2_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p2_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p2_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qa_p2_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p2_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p2_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p2_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p2_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p2_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p2_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p2_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p2_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p2_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p3_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qa_p3_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p3_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p3_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p3_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p3_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p3_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p3_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p3_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p3_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p3_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p3_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p3_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p3_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p3_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p3_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p3_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qa_p3_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p3_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p3_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p3_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p3_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p3_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p3_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p3_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p3_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p3_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qa_p3_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p3_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p3_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p3_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qa_p3_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p3_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p3_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p3_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p3_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p3_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p3_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p3_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p3_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p3_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p1_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qa_p1_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p1_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p1_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p1_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p1_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p1_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p1_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p1_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p1_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p1_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p1_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p1_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p1_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p1_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p1_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p1_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qa_p1_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p1_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p1_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p1_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p1_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p1_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p1_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p1_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p1_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qa_p1_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p1_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p1_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p1_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qa_p1_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p1_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p1_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p1_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p1_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p1_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p1_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p1_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p1_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p2_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qa_p2_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p2_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p2_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p2_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p2_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p2_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p2_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p2_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p2_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p2_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p2_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p2_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p2_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p2_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p2_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p2_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_007_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qa_p2_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p2_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p2_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p2_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p2_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p2_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p2_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p2_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p2_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qa_p2_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p2_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p2_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p2_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qa_p2_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p2_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p2_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p2_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p2_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p2_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p2_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p2_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p2_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p3_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qa_p3_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p3_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p3_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p3_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p3_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p3_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p3_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p3_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p3_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p3_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p3_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p3_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p3_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p3_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p3_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p3_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qa_p3_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p3_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p3_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p3_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p3_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p3_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p3_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p3_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p3_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qa_p3_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p3_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p3_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p3_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qa_p3_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p3_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p3_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p3_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p3_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p3_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p3_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p3_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p3_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pll_pll_slave_agent (
		.clk                     (clock_clk_clk),                                         //             clk.clk
		.reset                   (pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (pll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (pll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (pll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (pll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (pll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (pll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (pll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (pll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (pll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (pll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (pll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (pll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (pll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (pll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (pll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                               //                .channel
		.rf_sink_ready           (pll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (pll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (pll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (pll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (pll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (pll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (pll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (pll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (pll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (pll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_pll_slave_agent_rsp_fifo (
		.clk               (clock_clk_clk),                                         //       clk.clk
		.reset             (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (pll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (pll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (pll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (pll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (pll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (pll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (pll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_pll_slave_agent_rdata_fifo (
		.clk               (clock_clk_clk),                                         //       clk.clk
		.reset             (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (pll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (pll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (pll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (pll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (pll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (pll_c0_clk),                                           //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                              //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                           //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1a_s1_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_1a_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_1a_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_1a_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_1a_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_1a_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_1a_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_1a_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_1a_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_1a_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_1a_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_1a_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_1a_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_1a_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_1a_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_1a_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_1a_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_011_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                      //                .channel
		.rf_sink_ready           (timer_1a_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_1a_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_1a_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_1a_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_1a_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_1a_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_1a_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_1a_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_1a_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_1a_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_1a_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1a_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_1a_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1a_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_1a_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_1a_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_1a_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_1a_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_1a_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_1a_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_1a_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_1a_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_1a_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_1a_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_info_s1_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (mem_info_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mem_info_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mem_info_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mem_info_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mem_info_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mem_info_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mem_info_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mem_info_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mem_info_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mem_info_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mem_info_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mem_info_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mem_info_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mem_info_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mem_info_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mem_info_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_012_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                      //                .channel
		.rf_sink_ready           (mem_info_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mem_info_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mem_info_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mem_info_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mem_info_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mem_info_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mem_info_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mem_info_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mem_info_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mem_info_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),            //                .error
		.rdata_fifo_src_ready    (mem_info_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_info_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mem_info_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_info_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (mem_info_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mem_info_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mem_info_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mem_info_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mem_info_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mem_info_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mem_info_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mem_info_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mem_info_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mem_info_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p3_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qd_p3_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p3_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p3_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p3_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p3_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p3_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p3_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p3_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p3_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p3_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p3_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p3_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p3_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p3_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p3_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p3_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_013_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qd_p3_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p3_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p3_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p3_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p3_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p3_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p3_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p3_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p3_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p3_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qd_p3_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p3_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p3_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p3_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qd_p3_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p3_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p3_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p3_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p3_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p3_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p3_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p3_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p3_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p3_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p3_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qc_p3_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p3_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p3_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p3_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p3_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p3_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p3_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p3_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p3_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p3_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p3_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p3_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p3_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p3_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p3_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p3_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_014_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qc_p3_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p3_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p3_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p3_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p3_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p3_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p3_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p3_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p3_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qc_p3_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p3_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p3_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p3_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qc_p3_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p3_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p3_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p3_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p3_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p3_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p3_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p3_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p3_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p3_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qd_p3_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p3_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p3_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p3_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p3_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p3_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p3_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p3_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p3_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p3_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p3_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p3_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p3_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p3_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p3_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p3_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_015_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qd_p3_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p3_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p3_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p3_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p3_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p3_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p3_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p3_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p3_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qd_p3_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p3_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p3_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p3_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qd_p3_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p3_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p3_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p3_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p3_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p3_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p3_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p3_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p3_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p3_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qc_p3_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p3_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p3_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p3_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p3_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p3_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p3_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p3_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p3_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p3_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p3_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p3_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p3_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p3_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p3_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p3_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_016_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qc_p3_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p3_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p3_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p3_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p3_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p3_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p3_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p3_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p3_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p3_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qc_p3_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p3_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p3_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p3_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qc_p3_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p3_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p3_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p3_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p3_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p3_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p3_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p3_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p3_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p3_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qe_in_agent (
		.clk                     (pll_c0_clk),                                  //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (fifo_qe_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qe_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qe_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qe_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qe_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qe_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qe_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qe_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qe_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qe_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qe_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qe_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qe_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qe_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qe_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qe_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_017_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                     //                .channel
		.rf_sink_ready           (fifo_qe_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qe_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qe_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qe_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qe_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qe_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qe_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qe_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qe_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qe_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),           //                .error
		.rdata_fifo_src_ready    (fifo_qe_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qe_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qe_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qe_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                  //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fifo_qe_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qe_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qe_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qe_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qe_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qe_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qe_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qe_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qe_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qe_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p1_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qd_p1_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p1_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p1_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p1_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p1_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p1_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p1_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p1_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p1_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p1_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p1_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p1_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p1_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p1_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p1_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p1_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_018_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qd_p1_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p1_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p1_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p1_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p1_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p1_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p1_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p1_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p1_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qd_p1_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p1_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p1_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p1_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qd_p1_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p1_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p1_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p1_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p1_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p1_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p1_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p1_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p1_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qe_in_csr_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qe_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qe_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qe_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qe_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qe_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qe_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qe_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qe_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qe_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qe_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qe_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qe_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qe_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qe_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qe_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qe_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_019_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qe_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qe_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qe_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qe_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qe_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qe_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qe_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qe_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qe_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qe_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qe_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qe_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qe_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qe_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qe_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qe_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qe_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qe_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qe_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qe_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qe_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qe_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qe_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qe_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p2_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qd_p2_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p2_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p2_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p2_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p2_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p2_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p2_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p2_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p2_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p2_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p2_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p2_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p2_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p2_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p2_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p2_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_020_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qd_p2_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p2_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p2_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p2_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p2_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p2_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p2_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p2_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p2_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qd_p2_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p2_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p2_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p2_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qd_p2_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p2_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p2_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p2_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p2_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p2_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p2_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p2_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p2_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p1_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qd_p1_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p1_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p1_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p1_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p1_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p1_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p1_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p1_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p1_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p1_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p1_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p1_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p1_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p1_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p1_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p1_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_021_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qd_p1_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p1_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p1_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p1_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p1_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p1_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p1_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p1_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p1_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p1_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qd_p1_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p1_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p1_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p1_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qd_p1_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p1_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p1_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p1_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p1_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p1_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p1_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p1_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p1_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p1_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p2_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qd_p2_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p2_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p2_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p2_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p2_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p2_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p2_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p2_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p2_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p2_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p2_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p2_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p2_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p2_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p2_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p2_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_022_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qd_p2_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p2_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p2_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p2_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p2_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p2_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p2_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p2_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p2_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p2_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qd_p2_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p2_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p2_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p2_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qd_p2_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p2_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p2_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p2_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p2_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p2_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p2_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p2_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p2_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p2_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p3_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qd_p3_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p3_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p3_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p3_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p3_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p3_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p3_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p3_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p3_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p3_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p3_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p3_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p3_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p3_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p3_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p3_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_023_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qd_p3_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p3_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p3_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p3_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p3_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p3_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p3_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p3_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p3_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p3_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qd_p3_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p3_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p3_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p3_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qd_p3_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p3_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p3_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p3_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p3_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p3_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p3_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p3_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p3_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p3_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p2_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qd_p2_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p2_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p2_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p2_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p2_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p2_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p2_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p2_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p2_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p2_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p2_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p2_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p2_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p2_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p2_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p2_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_024_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qd_p2_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p2_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p2_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p2_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p2_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p2_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p2_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p2_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p2_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p2_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qd_p2_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p2_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p2_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p2_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qd_p2_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p2_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p2_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p2_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p2_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p2_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p2_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p2_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p2_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p2_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p2_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qc_p2_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p2_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p2_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p2_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p2_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p2_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p2_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p2_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p2_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p2_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p2_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p2_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p2_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p2_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p2_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p2_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_025_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qc_p2_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p2_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p2_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p2_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p2_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p2_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p2_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p2_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p2_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qc_p2_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p2_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p2_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p2_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qc_p2_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p2_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p2_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p2_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p2_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p2_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p2_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p2_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p2_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p2_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qc_p2_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p2_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p2_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p2_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p2_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p2_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p2_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p2_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p2_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p2_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p2_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p2_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p2_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p2_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p2_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p2_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_026_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qc_p2_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p2_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p2_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p2_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p2_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p2_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p2_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p2_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p2_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p2_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qc_p2_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p2_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p2_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p2_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qc_p2_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p2_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p2_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p2_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p2_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p2_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p2_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p2_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p2_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p2_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p2_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qc_p2_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p2_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p2_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p2_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p2_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p2_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p2_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p2_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p2_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p2_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p2_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p2_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p2_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p2_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p2_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p2_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_027_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qc_p2_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p2_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p2_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p2_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p2_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p2_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p2_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p2_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p2_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p2_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qc_p2_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p2_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p2_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p2_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qc_p2_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p2_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p2_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p2_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p2_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p2_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p2_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p2_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p2_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p2_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p2_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qb_p2_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p2_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p2_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p2_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p2_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p2_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p2_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p2_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p2_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p2_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p2_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p2_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p2_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p2_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p2_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p2_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_028_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qb_p2_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p2_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p2_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p2_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p2_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p2_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p2_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p2_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p2_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qb_p2_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p2_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p2_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p2_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qb_p2_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p2_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p2_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p2_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p2_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p2_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p2_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p2_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p2_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p2_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p2_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qb_p2_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p2_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p2_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p2_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p2_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p2_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p2_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p2_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p2_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p2_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p2_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p2_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p2_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p2_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p2_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p2_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_029_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qb_p2_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p2_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p2_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p2_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p2_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p2_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p2_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p2_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p2_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p2_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qb_p2_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p2_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p2_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p2_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qb_p2_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p2_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p2_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p2_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p2_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p2_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p2_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p2_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p2_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p2_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p2_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qb_p2_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p2_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p2_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p2_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p2_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p2_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p2_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p2_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p2_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p2_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p2_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p2_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p2_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p2_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p2_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p2_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_030_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_030_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_030_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_030_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_030_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_030_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qb_p2_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p2_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p2_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p2_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p2_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p2_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p2_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p2_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p2_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p2_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qb_p2_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p2_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p2_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p2_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qb_p2_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p2_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p2_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p2_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p2_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p2_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p2_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p2_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p2_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p2_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p2_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qa_p2_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p2_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p2_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p2_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p2_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p2_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p2_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p2_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p2_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p2_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p2_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p2_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p2_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p2_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p2_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p2_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_031_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qa_p2_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p2_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p2_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p2_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p2_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p2_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p2_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p2_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p2_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p2_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qa_p2_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p2_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p2_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p2_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qa_p2_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p2_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p2_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p2_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p2_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p2_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p2_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p2_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p2_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p2_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_1f_avalon_jtag_slave_agent (
		.clk                     (pll_c0_clk),                                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_1f_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_1f_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_1f_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_1f_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_1f_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_1f_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_1f_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_1f_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_1f_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_1f_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_1f_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_1f_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_1f_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_1f_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_1f_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_1f_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_032_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_032_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_032_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_032_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_032_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_032_src_channel),                                         //                .channel
		.rf_sink_ready           (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_1f_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_1f_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_1f_control_slave_agent (
		.clk                     (pll_c0_clk),                                              //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (sysid_1f_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_1f_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_1f_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_1f_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_1f_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_1f_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_1f_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_1f_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_1f_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_1f_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_1f_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_1f_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_1f_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_1f_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_1f_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_1f_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_033_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_033_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_033_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_033_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_033_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_033_src_channel),                                 //                .channel
		.rf_sink_ready           (sysid_1f_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_1f_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_1f_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_1f_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_1f_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_1f_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_1f_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_1f_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_1f_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_1f_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_1f_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_1f_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_1f_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_1f_control_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                              //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (sysid_1f_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_1f_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_1f_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_1f_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_1f_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_1f_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_1f_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_1f_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_1f_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_1f_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_1f_debug_mem_slave_agent (
		.clk                     (pll_c0_clk),                                              //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_1f_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_1f_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_1f_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_1f_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_1f_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_1f_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_1f_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_1f_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_1f_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_1f_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_1f_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_1f_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_1f_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_1f_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_1f_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_1f_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_034_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_034_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_034_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_034_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_034_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_034_src_channel),                                 //                .channel
		.rf_sink_ready           (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_1f_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_1f_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_1f_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_1f_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_1f_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1f_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                              //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_1f_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_1f_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_1f_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_1f_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_1f_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_1f_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qe_out_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (fifo_qe_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qe_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qe_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qe_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qe_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qe_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qe_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qe_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qe_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qe_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qe_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qe_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qe_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qe_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qe_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qe_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_035_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_035_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_035_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_035_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_035_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_035_src_channel),                      //                .channel
		.rf_sink_ready           (fifo_qe_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qe_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qe_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qe_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qe_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qe_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qe_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qe_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qe_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qe_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),            //                .error
		.rdata_fifo_src_ready    (fifo_qe_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qe_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qe_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qe_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (fifo_qe_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qe_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qe_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qe_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qe_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qe_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qe_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qe_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qe_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qe_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1f_s1_agent (
		.clk                     (pll_c0_clk),                                   //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_1f_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_1f_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_1f_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_1f_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_1f_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_1f_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_1f_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_1f_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_1f_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_1f_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_1f_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_1f_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_1f_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_1f_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_1f_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_1f_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_036_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_036_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_036_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_036_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_036_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_036_src_channel),                      //                .channel
		.rf_sink_ready           (timer_1f_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_1f_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_1f_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_1f_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_1f_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_1f_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_1f_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_1f_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_1f_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_1f_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_1f_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1f_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_1f_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1f_s1_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                   //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_1f_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_1f_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_1f_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_1f_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_1f_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_1f_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_1f_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_1f_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_1f_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_1f_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qd_p1_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qd_p1_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qd_p1_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qd_p1_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qd_p1_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qd_p1_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qd_p1_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qd_p1_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qd_p1_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qd_p1_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qd_p1_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qd_p1_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qd_p1_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qd_p1_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qd_p1_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qd_p1_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qd_p1_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_037_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_037_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_037_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_037_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_037_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_037_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qd_p1_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qd_p1_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qd_p1_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qd_p1_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qd_p1_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qd_p1_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qd_p1_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qd_p1_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qd_p1_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qd_p1_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_037_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_037_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_037_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_037_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qd_p1_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qd_p1_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qd_p1_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qd_p1_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qd_p1_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qd_p1_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qd_p1_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qd_p1_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qd_p1_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qd_p1_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qd_p1_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qd_p1_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qd_p1_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qd_p1_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p1_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qc_p1_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p1_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p1_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p1_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p1_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p1_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p1_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p1_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p1_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p1_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p1_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p1_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p1_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p1_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p1_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p1_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_038_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_038_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_038_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_038_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_038_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_038_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qc_p1_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p1_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p1_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p1_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p1_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p1_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p1_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p1_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p1_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_038_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_038_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_038_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_038_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qc_p1_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p1_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p1_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p1_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qc_p1_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p1_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p1_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p1_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p1_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p1_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p1_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p1_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p1_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p1_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qc_p1_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p1_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p1_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p1_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p1_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p1_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p1_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p1_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p1_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p1_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p1_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p1_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p1_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p1_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p1_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p1_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_039_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_039_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_039_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_039_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_039_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_039_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qc_p1_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p1_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p1_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p1_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p1_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p1_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p1_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p1_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p1_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p1_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_039_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_039_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_039_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_039_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qc_p1_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p1_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p1_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p1_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qc_p1_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p1_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p1_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p1_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p1_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p1_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p1_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p1_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p1_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p1_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p1_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qc_p1_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p1_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p1_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p1_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p1_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p1_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p1_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p1_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p1_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p1_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p1_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p1_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p1_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p1_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p1_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p1_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_040_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_040_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_040_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_040_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_040_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_040_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qc_p1_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p1_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p1_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p1_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p1_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p1_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p1_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p1_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p1_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p1_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_040_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_040_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_040_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_040_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qc_p1_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p1_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p1_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p1_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qc_p1_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p1_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p1_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p1_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p1_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p1_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p1_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p1_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p1_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p1_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p1_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qb_p1_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p1_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p1_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p1_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p1_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p1_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p1_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p1_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p1_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p1_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p1_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p1_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p1_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p1_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p1_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p1_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_041_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_041_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_041_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_041_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_041_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_041_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qb_p1_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p1_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p1_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p1_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p1_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p1_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p1_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p1_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p1_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_041_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_041_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_041_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_041_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qb_p1_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p1_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p1_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p1_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qb_p1_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p1_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p1_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p1_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p1_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p1_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p1_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p1_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p1_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p1_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p1_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qb_p1_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p1_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p1_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p1_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p1_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p1_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p1_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p1_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p1_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p1_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p1_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p1_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p1_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p1_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p1_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p1_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_042_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_042_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_042_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_042_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_042_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_042_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qb_p1_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p1_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p1_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p1_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p1_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p1_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p1_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p1_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p1_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p1_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_042_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_042_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_042_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_042_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qb_p1_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p1_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p1_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p1_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qb_p1_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p1_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p1_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p1_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p1_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p1_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p1_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p1_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p1_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p1_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p1_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qb_p1_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p1_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p1_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p1_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p1_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p1_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p1_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p1_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p1_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p1_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p1_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p1_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p1_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p1_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p1_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p1_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_043_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_043_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_043_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_043_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_043_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_043_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qb_p1_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p1_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p1_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p1_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p1_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p1_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p1_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p1_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p1_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p1_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_043_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_043_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_043_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_043_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qb_p1_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p1_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p1_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p1_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qb_p1_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p1_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p1_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p1_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p1_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p1_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p1_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p1_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p1_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p1_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p1_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qa_p1_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p1_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p1_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p1_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p1_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p1_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p1_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p1_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p1_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p1_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p1_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p1_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p1_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p1_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p1_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p1_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_044_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_044_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_044_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_044_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_044_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_044_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qa_p1_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p1_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p1_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p1_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p1_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p1_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p1_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p1_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p1_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p1_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_044_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_044_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_044_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_044_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qa_p1_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p1_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p1_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p1_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qa_p1_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p1_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p1_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p1_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p1_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p1_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p1_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p1_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p1_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p1_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qc_p3_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qc_p3_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qc_p3_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qc_p3_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qc_p3_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qc_p3_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qc_p3_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qc_p3_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qc_p3_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qc_p3_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qc_p3_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qc_p3_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qc_p3_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qc_p3_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qc_p3_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qc_p3_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qc_p3_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_045_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_045_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_045_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_045_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_045_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_045_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qc_p3_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qc_p3_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qc_p3_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qc_p3_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qc_p3_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qc_p3_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qc_p3_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qc_p3_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qc_p3_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qc_p3_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_045_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_045_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_045_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_045_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qc_p3_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qc_p3_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qc_p3_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qc_p3_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qc_p3_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qc_p3_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qc_p3_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qc_p3_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qc_p3_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qc_p3_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qc_p3_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qc_p3_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qc_p3_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qc_p3_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p3_in_csr_agent (
		.clk                     (pll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (fifo_qb_p3_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p3_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p3_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p3_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p3_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p3_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p3_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p3_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p3_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p3_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p3_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p3_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p3_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p3_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p3_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p3_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_046_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_046_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_046_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_046_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_046_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_046_src_channel),                            //                .channel
		.rf_sink_ready           (fifo_qb_p3_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p3_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p3_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p3_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p3_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p3_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p3_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p3_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p3_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_046_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_046_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_046_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_046_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_qb_p3_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p3_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p3_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p3_in_csr_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                         //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (fifo_qb_p3_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p3_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p3_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p3_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p3_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p3_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p3_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p3_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p3_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p3_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p3_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qb_p3_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p3_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p3_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p3_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p3_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p3_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p3_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p3_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p3_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p3_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p3_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p3_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p3_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p3_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p3_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p3_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_047_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_047_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_047_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_047_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_047_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_047_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qb_p3_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p3_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p3_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p3_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p3_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p3_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p3_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p3_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p3_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p3_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_047_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_047_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_047_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_047_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qb_p3_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p3_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p3_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p3_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qb_p3_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p3_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p3_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p3_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p3_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p3_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p3_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p3_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p3_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p3_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qb_p3_in_agent (
		.clk                     (pll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_qb_p3_in_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qb_p3_in_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qb_p3_in_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qb_p3_in_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qb_p3_in_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qb_p3_in_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qb_p3_in_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qb_p3_in_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qb_p3_in_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qb_p3_in_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qb_p3_in_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qb_p3_in_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qb_p3_in_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qb_p3_in_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qb_p3_in_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qb_p3_in_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_048_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_048_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_048_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_048_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_048_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_048_src_channel),                        //                .channel
		.rf_sink_ready           (fifo_qb_p3_in_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qb_p3_in_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qb_p3_in_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qb_p3_in_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qb_p3_in_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qb_p3_in_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qb_p3_in_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qb_p3_in_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qb_p3_in_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qb_p3_in_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_048_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_048_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_048_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_048_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_qb_p3_in_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qb_p3_in_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qb_p3_in_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qb_p3_in_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                     //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fifo_qb_p3_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qb_p3_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qb_p3_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qb_p3_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qb_p3_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qb_p3_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qb_p3_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qb_p3_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qb_p3_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qb_p3_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (50),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_qa_p3_out_agent (
		.clk                     (pll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_1a_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_qa_p3_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_qa_p3_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_qa_p3_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_qa_p3_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_qa_p3_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_qa_p3_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_qa_p3_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_qa_p3_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_qa_p3_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_qa_p3_out_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_qa_p3_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_qa_p3_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_qa_p3_out_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_qa_p3_out_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_qa_p3_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_qa_p3_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_049_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_049_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_049_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_049_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_049_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_049_src_channel),                         //                .channel
		.rf_sink_ready           (fifo_qa_p3_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_qa_p3_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_qa_p3_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_qa_p3_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_qa_p3_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_qa_p3_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_qa_p3_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_qa_p3_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_qa_p3_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_qa_p3_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_049_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_049_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_049_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_049_out_0_error),               //                .error
		.rdata_fifo_src_ready    (fifo_qa_p3_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_qa_p3_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_qa_p3_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_qa_p3_out_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                      //       clk.clk
		.reset             (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_qa_p3_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_qa_p3_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_qa_p3_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_qa_p3_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_qa_p3_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_qa_p3_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_qa_p3_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_qa_p3_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_qa_p3_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_qa_p3_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	FTOP_MSOC_mm_interconnect_0_router router (
		.sink_ready         (cpu_1a_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1a_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1a_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1a_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1a_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                          //       src.ready
		.src_valid          (router_src_valid),                          //          .valid
		.src_data           (router_src_data),                           //          .data
		.src_channel        (router_src_channel),                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                     //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_1f_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1f_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1f_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1f_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1f_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                      //       src.ready
		.src_valid          (router_001_src_valid),                      //          .valid
		.src_data           (router_001_src_data),                       //          .data
		.src_channel        (router_001_src_channel),                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                 //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_1b_p1_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1b_p1_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1b_p1_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1b_p1_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1b_p1_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (cpu_1e_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1e_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1e_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1e_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1e_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                   //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (cpu_1d_p1_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1d_p1_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1d_p1_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1d_p1_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1d_p1_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (cpu_1c_p1_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1c_p1_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1c_p1_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1c_p1_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1c_p1_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_005_src_ready),                            //       src.ready
		.src_valid          (router_005_src_valid),                            //          .valid
		.src_data           (router_005_src_data),                             //          .data
		.src_channel        (router_005_src_channel),                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (cpu_1b_p2_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1b_p2_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1b_p2_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1b_p2_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1b_p2_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (cpu_1b_p3_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1b_p3_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1b_p3_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1b_p3_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1b_p3_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_007_src_ready),                            //       src.ready
		.src_valid          (router_007_src_valid),                            //          .valid
		.src_data           (router_007_src_data),                             //          .data
		.src_channel        (router_007_src_channel),                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (cpu_1c_p2_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1c_p2_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1c_p2_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1c_p2_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1c_p2_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_008_src_ready),                            //       src.ready
		.src_valid          (router_008_src_valid),                            //          .valid
		.src_data           (router_008_src_data),                             //          .data
		.src_channel        (router_008_src_channel),                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (cpu_1c_p3_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1c_p3_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1c_p3_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1c_p3_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1c_p3_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_009_src_ready),                            //       src.ready
		.src_valid          (router_009_src_valid),                            //          .valid
		.src_data           (router_009_src_data),                             //          .data
		.src_channel        (router_009_src_channel),                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (cpu_1d_p2_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1d_p2_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1d_p2_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1d_p2_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1d_p2_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_010_src_ready),                            //       src.ready
		.src_valid          (router_010_src_valid),                            //          .valid
		.src_data           (router_010_src_data),                             //          .data
		.src_channel        (router_010_src_channel),                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (cpu_1d_p3_mm_bridge_0_m0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1d_p3_mm_bridge_0_m0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1d_p3_mm_bridge_0_m0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1d_p3_mm_bridge_0_m0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1d_p3_mm_bridge_0_m0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                      //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_011_src_ready),                            //       src.ready
		.src_valid          (router_011_src_valid),                            //          .valid
		.src_data           (router_011_src_data),                             //          .data
		.src_channel        (router_011_src_channel),                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                       //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (cpu_1f_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1f_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1f_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1f_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1f_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                       //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_012_src_ready),                             //       src.ready
		.src_valid          (router_012_src_valid),                             //          .valid
		.src_data           (router_012_src_data),                              //          .data
		.src_channel        (router_012_src_channel),                           //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                        //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (cpu_1a_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1a_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1a_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1a_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1a_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                       //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_013_src_ready),                             //       src.ready
		.src_valid          (router_013_src_valid),                             //          .valid
		.src_data           (router_013_src_data),                              //          .data
		.src_channel        (router_013_src_channel),                           //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                        //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (jtag_uart_1a_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_1a_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_1a_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_1a_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_1a_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_014_src_ready),                                  //       src.ready
		.src_valid          (router_014_src_valid),                                  //          .valid
		.src_data           (router_014_src_data),                                   //          .data
		.src_channel        (router_014_src_channel),                                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                             //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_015 (
		.sink_ready         (sys_id_1a_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sys_id_1a_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sys_id_1a_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sys_id_1a_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sys_id_1a_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                     //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_015_src_ready),                           //       src.ready
		.src_valid          (router_015_src_valid),                           //          .valid
		.src_data           (router_015_src_data),                            //          .data
		.src_channel        (router_015_src_channel),                         //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                      //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (cpu_1a_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_1a_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_1a_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_1a_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1a_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                    //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_017 (
		.sink_ready         (fifo_qa_p1_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qa_p1_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qa_p1_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qa_p1_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qa_p1_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                     //       src.ready
		.src_valid          (router_017_src_valid),                     //          .valid
		.src_data           (router_017_src_data),                      //          .data
		.src_channel        (router_017_src_channel),                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_018 (
		.sink_ready         (fifo_qa_p2_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qa_p2_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qa_p2_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qa_p2_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qa_p2_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_019 (
		.sink_ready         (fifo_qa_p3_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qa_p3_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qa_p3_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qa_p3_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qa_p3_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                     //       src.ready
		.src_valid          (router_019_src_valid),                     //          .valid
		.src_data           (router_019_src_data),                      //          .data
		.src_channel        (router_019_src_channel),                   //          .channel
		.src_startofpacket  (router_019_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (fifo_qa_p1_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qa_p1_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qa_p1_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qa_p1_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qa_p1_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                     //       src.ready
		.src_valid          (router_020_src_valid),                     //          .valid
		.src_data           (router_020_src_data),                      //          .data
		.src_channel        (router_020_src_channel),                   //          .channel
		.src_startofpacket  (router_020_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (fifo_qa_p2_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qa_p2_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qa_p2_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qa_p2_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qa_p2_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                     //       src.ready
		.src_valid          (router_021_src_valid),                     //          .valid
		.src_data           (router_021_src_data),                      //          .data
		.src_channel        (router_021_src_channel),                   //          .channel
		.src_startofpacket  (router_021_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_022 router_022 (
		.sink_ready         (fifo_qa_p3_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qa_p3_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qa_p3_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qa_p3_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qa_p3_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                     //       src.ready
		.src_valid          (router_022_src_valid),                     //          .valid
		.src_data           (router_022_src_data),                      //          .data
		.src_channel        (router_022_src_channel),                   //          .channel
		.src_startofpacket  (router_022_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_023 (
		.sink_ready         (pll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (pll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (pll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (pll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (pll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clock_clk_clk),                                         //       clk.clk
		.reset              (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                  //       src.ready
		.src_valid          (router_023_src_valid),                                  //          .valid
		.src_data           (router_023_src_data),                                   //          .data
		.src_channel        (router_023_src_channel),                                //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                             //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_024 router_024 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),         //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                 //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_024_src_ready),                       //       src.ready
		.src_valid          (router_024_src_valid),                       //          .valid
		.src_data           (router_024_src_data),                        //          .data
		.src_channel        (router_024_src_channel),                     //          .channel
		.src_startofpacket  (router_024_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                  //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_014 router_025 (
		.sink_ready         (timer_1a_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (timer_1a_s1_agent_rp_valid),               //          .valid
		.sink_data          (timer_1a_s1_agent_rp_data),                //          .data
		.sink_startofpacket (timer_1a_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (timer_1a_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                     //       src.ready
		.src_valid          (router_025_src_valid),                     //          .valid
		.src_data           (router_025_src_data),                      //          .data
		.src_channel        (router_025_src_channel),                   //          .channel
		.src_startofpacket  (router_025_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_026 router_026 (
		.sink_ready         (mem_info_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (mem_info_s1_agent_rp_valid),               //          .valid
		.sink_data          (mem_info_s1_agent_rp_data),                //          .data
		.sink_startofpacket (mem_info_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (mem_info_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                     //       src.ready
		.src_valid          (router_026_src_valid),                     //          .valid
		.src_data           (router_026_src_data),                      //          .data
		.src_channel        (router_026_src_channel),                   //          .channel
		.src_startofpacket  (router_026_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_027 router_027 (
		.sink_ready         (fifo_qd_p3_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qd_p3_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qd_p3_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qd_p3_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qd_p3_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                     //       src.ready
		.src_valid          (router_027_src_valid),                     //          .valid
		.src_data           (router_027_src_data),                      //          .data
		.src_channel        (router_027_src_channel),                   //          .channel
		.src_startofpacket  (router_027_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_028 router_028 (
		.sink_ready         (fifo_qc_p3_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qc_p3_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qc_p3_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qc_p3_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qc_p3_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                     //       src.ready
		.src_valid          (router_028_src_valid),                     //          .valid
		.src_data           (router_028_src_data),                      //          .data
		.src_channel        (router_028_src_channel),                   //          .channel
		.src_startofpacket  (router_028_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_029 router_029 (
		.sink_ready         (fifo_qd_p3_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qd_p3_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qd_p3_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qd_p3_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qd_p3_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                     //       src.ready
		.src_valid          (router_029_src_valid),                     //          .valid
		.src_data           (router_029_src_data),                      //          .data
		.src_channel        (router_029_src_channel),                   //          .channel
		.src_startofpacket  (router_029_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_027 router_030 (
		.sink_ready         (fifo_qc_p3_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qc_p3_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qc_p3_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qc_p3_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qc_p3_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                     //       src.ready
		.src_valid          (router_030_src_valid),                     //          .valid
		.src_data           (router_030_src_data),                      //          .data
		.src_channel        (router_030_src_channel),                   //          .channel
		.src_startofpacket  (router_030_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_031 router_031 (
		.sink_ready         (fifo_qe_in_agent_rp_ready),                //      sink.ready
		.sink_valid         (fifo_qe_in_agent_rp_valid),                //          .valid
		.sink_data          (fifo_qe_in_agent_rp_data),                 //          .data
		.sink_startofpacket (fifo_qe_in_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (fifo_qe_in_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                     //       src.ready
		.src_valid          (router_031_src_valid),                     //          .valid
		.src_data           (router_031_src_data),                      //          .data
		.src_channel        (router_031_src_channel),                   //          .channel
		.src_startofpacket  (router_031_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_032 router_032 (
		.sink_ready         (fifo_qd_p1_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qd_p1_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qd_p1_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qd_p1_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qd_p1_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                     //       src.ready
		.src_valid          (router_032_src_valid),                     //          .valid
		.src_data           (router_032_src_data),                      //          .data
		.src_channel        (router_032_src_channel),                   //          .channel
		.src_startofpacket  (router_032_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_033 router_033 (
		.sink_ready         (fifo_qe_in_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qe_in_csr_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qe_in_csr_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qe_in_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qe_in_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                     //       src.ready
		.src_valid          (router_033_src_valid),                     //          .valid
		.src_data           (router_033_src_data),                      //          .data
		.src_channel        (router_033_src_channel),                   //          .channel
		.src_startofpacket  (router_033_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_034 router_034 (
		.sink_ready         (fifo_qd_p2_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qd_p2_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qd_p2_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qd_p2_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qd_p2_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                     //       src.ready
		.src_valid          (router_034_src_valid),                     //          .valid
		.src_data           (router_034_src_data),                      //          .data
		.src_channel        (router_034_src_channel),                   //          .channel
		.src_startofpacket  (router_034_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_031 router_035 (
		.sink_ready         (fifo_qd_p1_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qd_p1_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qd_p1_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qd_p1_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qd_p1_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                     //       src.ready
		.src_valid          (router_035_src_valid),                     //          .valid
		.src_data           (router_035_src_data),                      //          .data
		.src_channel        (router_035_src_channel),                   //          .channel
		.src_startofpacket  (router_035_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_031 router_036 (
		.sink_ready         (fifo_qd_p2_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qd_p2_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qd_p2_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qd_p2_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qd_p2_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                     //       src.ready
		.src_valid          (router_036_src_valid),                     //          .valid
		.src_data           (router_036_src_data),                      //          .data
		.src_channel        (router_036_src_channel),                   //          .channel
		.src_startofpacket  (router_036_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_031 router_037 (
		.sink_ready         (fifo_qd_p3_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qd_p3_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qd_p3_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qd_p3_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qd_p3_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                     //       src.ready
		.src_valid          (router_037_src_valid),                     //          .valid
		.src_data           (router_037_src_data),                      //          .data
		.src_channel        (router_037_src_channel),                   //          .channel
		.src_startofpacket  (router_037_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_038 router_038 (
		.sink_ready         (fifo_qd_p2_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qd_p2_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qd_p2_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qd_p2_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qd_p2_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                     //       src.ready
		.src_valid          (router_038_src_valid),                     //          .valid
		.src_data           (router_038_src_data),                      //          .data
		.src_channel        (router_038_src_channel),                   //          .channel
		.src_startofpacket  (router_038_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_039 router_039 (
		.sink_ready         (fifo_qc_p2_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qc_p2_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qc_p2_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qc_p2_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qc_p2_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                     //       src.ready
		.src_valid          (router_039_src_valid),                     //          .valid
		.src_data           (router_039_src_data),                      //          .data
		.src_channel        (router_039_src_channel),                   //          .channel
		.src_startofpacket  (router_039_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_038 router_040 (
		.sink_ready         (fifo_qc_p2_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qc_p2_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qc_p2_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qc_p2_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qc_p2_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_040_src_ready),                     //       src.ready
		.src_valid          (router_040_src_valid),                     //          .valid
		.src_data           (router_040_src_data),                      //          .data
		.src_channel        (router_040_src_channel),                   //          .channel
		.src_startofpacket  (router_040_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_041 router_041 (
		.sink_ready         (fifo_qc_p2_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qc_p2_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qc_p2_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qc_p2_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qc_p2_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_041_src_ready),                     //       src.ready
		.src_valid          (router_041_src_valid),                     //          .valid
		.src_data           (router_041_src_data),                      //          .data
		.src_channel        (router_041_src_channel),                   //          .channel
		.src_startofpacket  (router_041_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_042 router_042 (
		.sink_ready         (fifo_qb_p2_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qb_p2_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qb_p2_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qb_p2_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qb_p2_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_042_src_ready),                     //       src.ready
		.src_valid          (router_042_src_valid),                     //          .valid
		.src_data           (router_042_src_data),                      //          .data
		.src_channel        (router_042_src_channel),                   //          .channel
		.src_startofpacket  (router_042_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_041 router_043 (
		.sink_ready         (fifo_qb_p2_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qb_p2_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qb_p2_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qb_p2_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qb_p2_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_043_src_ready),                     //       src.ready
		.src_valid          (router_043_src_valid),                     //          .valid
		.src_data           (router_043_src_data),                      //          .data
		.src_channel        (router_043_src_channel),                   //          .channel
		.src_startofpacket  (router_043_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_044 router_044 (
		.sink_ready         (fifo_qb_p2_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qb_p2_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qb_p2_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qb_p2_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qb_p2_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_044_src_ready),                     //       src.ready
		.src_valid          (router_044_src_valid),                     //          .valid
		.src_data           (router_044_src_data),                      //          .data
		.src_channel        (router_044_src_channel),                   //          .channel
		.src_startofpacket  (router_044_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_044 router_045 (
		.sink_ready         (fifo_qa_p2_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qa_p2_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qa_p2_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qa_p2_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qa_p2_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_045_src_ready),                     //       src.ready
		.src_valid          (router_045_src_valid),                     //          .valid
		.src_data           (router_045_src_data),                      //          .data
		.src_channel        (router_045_src_channel),                   //          .channel
		.src_startofpacket  (router_045_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_046 router_046 (
		.sink_ready         (jtag_uart_1f_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_1f_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_1f_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_1f_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_1f_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                            //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_046_src_ready),                                  //       src.ready
		.src_valid          (router_046_src_valid),                                  //          .valid
		.src_data           (router_046_src_data),                                   //          .data
		.src_channel        (router_046_src_channel),                                //          .channel
		.src_startofpacket  (router_046_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                             //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_046 router_047 (
		.sink_ready         (sysid_1f_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_1f_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_1f_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_1f_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_1f_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                    //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_047_src_ready),                          //       src.ready
		.src_valid          (router_047_src_valid),                          //          .valid
		.src_data           (router_047_src_data),                           //          .data
		.src_channel        (router_047_src_channel),                        //          .channel
		.src_startofpacket  (router_047_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                     //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_048 router_048 (
		.sink_ready         (cpu_1f_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_1f_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_1f_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_1f_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1f_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                    //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_048_src_ready),                          //       src.ready
		.src_valid          (router_048_src_valid),                          //          .valid
		.src_data           (router_048_src_data),                           //          .data
		.src_channel        (router_048_src_channel),                        //          .channel
		.src_startofpacket  (router_048_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                     //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_046 router_049 (
		.sink_ready         (fifo_qe_out_agent_rp_ready),               //      sink.ready
		.sink_valid         (fifo_qe_out_agent_rp_valid),               //          .valid
		.sink_data          (fifo_qe_out_agent_rp_data),                //          .data
		.sink_startofpacket (fifo_qe_out_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (fifo_qe_out_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_049_src_ready),                     //       src.ready
		.src_valid          (router_049_src_valid),                     //          .valid
		.src_data           (router_049_src_data),                      //          .data
		.src_channel        (router_049_src_channel),                   //          .channel
		.src_startofpacket  (router_049_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_046 router_050 (
		.sink_ready         (timer_1f_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (timer_1f_s1_agent_rp_valid),               //          .valid
		.sink_data          (timer_1f_s1_agent_rp_data),                //          .data
		.sink_startofpacket (timer_1f_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (timer_1f_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_050_src_ready),                     //       src.ready
		.src_valid          (router_050_src_valid),                     //          .valid
		.src_data           (router_050_src_data),                      //          .data
		.src_channel        (router_050_src_channel),                   //          .channel
		.src_startofpacket  (router_050_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_051 router_051 (
		.sink_ready         (fifo_qd_p1_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qd_p1_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qd_p1_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qd_p1_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qd_p1_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_051_src_ready),                     //       src.ready
		.src_valid          (router_051_src_valid),                     //          .valid
		.src_data           (router_051_src_data),                      //          .data
		.src_channel        (router_051_src_channel),                   //          .channel
		.src_startofpacket  (router_051_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_051_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_052 router_052 (
		.sink_ready         (fifo_qc_p1_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qc_p1_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qc_p1_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qc_p1_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qc_p1_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_052_src_ready),                     //       src.ready
		.src_valid          (router_052_src_valid),                     //          .valid
		.src_data           (router_052_src_data),                      //          .data
		.src_channel        (router_052_src_channel),                   //          .channel
		.src_startofpacket  (router_052_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_052_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_051 router_053 (
		.sink_ready         (fifo_qc_p1_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qc_p1_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qc_p1_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qc_p1_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qc_p1_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_053_src_ready),                     //       src.ready
		.src_valid          (router_053_src_valid),                     //          .valid
		.src_data           (router_053_src_data),                      //          .data
		.src_channel        (router_053_src_channel),                   //          .channel
		.src_startofpacket  (router_053_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_053_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_054 router_054 (
		.sink_ready         (fifo_qc_p1_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qc_p1_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qc_p1_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qc_p1_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qc_p1_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_054_src_ready),                     //       src.ready
		.src_valid          (router_054_src_valid),                     //          .valid
		.src_data           (router_054_src_data),                      //          .data
		.src_channel        (router_054_src_channel),                   //          .channel
		.src_startofpacket  (router_054_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_054_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_055 router_055 (
		.sink_ready         (fifo_qb_p1_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qb_p1_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qb_p1_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qb_p1_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qb_p1_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_055_src_ready),                     //       src.ready
		.src_valid          (router_055_src_valid),                     //          .valid
		.src_data           (router_055_src_data),                      //          .data
		.src_channel        (router_055_src_channel),                   //          .channel
		.src_startofpacket  (router_055_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_055_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_054 router_056 (
		.sink_ready         (fifo_qb_p1_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qb_p1_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qb_p1_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qb_p1_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qb_p1_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_056_src_ready),                     //       src.ready
		.src_valid          (router_056_src_valid),                     //          .valid
		.src_data           (router_056_src_data),                      //          .data
		.src_channel        (router_056_src_channel),                   //          .channel
		.src_startofpacket  (router_056_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_056_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_057 router_057 (
		.sink_ready         (fifo_qb_p1_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qb_p1_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qb_p1_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qb_p1_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qb_p1_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_057_src_ready),                     //       src.ready
		.src_valid          (router_057_src_valid),                     //          .valid
		.src_data           (router_057_src_data),                      //          .data
		.src_channel        (router_057_src_channel),                   //          .channel
		.src_startofpacket  (router_057_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_057_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_057 router_058 (
		.sink_ready         (fifo_qa_p1_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qa_p1_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qa_p1_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qa_p1_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qa_p1_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_058_src_ready),                     //       src.ready
		.src_valid          (router_058_src_valid),                     //          .valid
		.src_data           (router_058_src_data),                      //          .data
		.src_channel        (router_058_src_channel),                   //          .channel
		.src_startofpacket  (router_058_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_058_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_059 router_059 (
		.sink_ready         (fifo_qc_p3_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qc_p3_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qc_p3_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qc_p3_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qc_p3_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_059_src_ready),                     //       src.ready
		.src_valid          (router_059_src_valid),                     //          .valid
		.src_data           (router_059_src_data),                      //          .data
		.src_channel        (router_059_src_channel),                   //          .channel
		.src_startofpacket  (router_059_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_059_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_060 router_060 (
		.sink_ready         (fifo_qb_p3_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_qb_p3_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_qb_p3_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_qb_p3_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_qb_p3_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_060_src_ready),                     //       src.ready
		.src_valid          (router_060_src_valid),                     //          .valid
		.src_data           (router_060_src_data),                      //          .data
		.src_channel        (router_060_src_channel),                   //          .channel
		.src_startofpacket  (router_060_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_060_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_059 router_061 (
		.sink_ready         (fifo_qb_p3_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qb_p3_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qb_p3_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qb_p3_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qb_p3_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_061_src_ready),                     //       src.ready
		.src_valid          (router_061_src_valid),                     //          .valid
		.src_data           (router_061_src_data),                      //          .data
		.src_channel        (router_061_src_channel),                   //          .channel
		.src_startofpacket  (router_061_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_061_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_062 router_062 (
		.sink_ready         (fifo_qb_p3_in_agent_rp_ready),             //      sink.ready
		.sink_valid         (fifo_qb_p3_in_agent_rp_valid),             //          .valid
		.sink_data          (fifo_qb_p3_in_agent_rp_data),              //          .data
		.sink_startofpacket (fifo_qb_p3_in_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fifo_qb_p3_in_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_062_src_ready),                     //       src.ready
		.src_valid          (router_062_src_valid),                     //          .valid
		.src_data           (router_062_src_data),                      //          .data
		.src_channel        (router_062_src_channel),                   //          .channel
		.src_startofpacket  (router_062_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_062_src_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_router_062 router_063 (
		.sink_ready         (fifo_qa_p3_out_agent_rp_ready),            //      sink.ready
		.sink_valid         (fifo_qa_p3_out_agent_rp_valid),            //          .valid
		.sink_data          (fifo_qa_p3_out_agent_rp_data),             //          .data
		.sink_startofpacket (fifo_qa_p3_out_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fifo_qa_p3_out_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_063_src_ready),                     //       src.ready
		.src_valid          (router_063_src_valid),                     //          .valid
		.src_data           (router_063_src_data),                      //          .data
		.src_channel        (router_063_src_channel),                   //          .channel
		.src_startofpacket  (router_063_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_063_src_endofpacket)                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1b_p1_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                   //          .valid
		.cmd_sink_data          (router_002_src_data),                                    //          .data
		.cmd_sink_channel       (router_002_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1b_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1e_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                          //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                //          .valid
		.cmd_sink_data          (router_003_src_data),                                 //          .data
		.cmd_sink_channel       (router_003_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1e_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1e_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1d_p1_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                   //          .valid
		.cmd_sink_data          (router_004_src_data),                                    //          .data
		.cmd_sink_channel       (router_004_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1d_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1c_p1_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                   //          .valid
		.cmd_sink_data          (router_005_src_data),                                    //          .data
		.cmd_sink_channel       (router_005_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1c_p1_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1b_p2_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_006_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_006_src_valid),                                   //          .valid
		.cmd_sink_data          (router_006_src_data),                                    //          .data
		.cmd_sink_channel       (router_006_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_006_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_006_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_006_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_006_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_006_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_006_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_006_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_006_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1b_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1b_p3_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                   //          .valid
		.cmd_sink_data          (router_007_src_data),                                    //          .data
		.cmd_sink_channel       (router_007_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1b_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1c_p2_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_008_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_008_src_valid),                                   //          .valid
		.cmd_sink_data          (router_008_src_data),                                    //          .data
		.cmd_sink_channel       (router_008_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_008_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_008_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_008_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_008_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_008_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_008_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_008_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_008_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1c_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1c_p3_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_009_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_009_src_valid),                                   //          .valid
		.cmd_sink_data          (router_009_src_data),                                    //          .data
		.cmd_sink_channel       (router_009_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_009_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_009_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_009_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_009_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_009_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_009_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_009_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_009_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1c_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1d_p2_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_010_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_010_src_valid),                                   //          .valid
		.cmd_sink_data          (router_010_src_data),                                    //          .data
		.cmd_sink_channel       (router_010_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_010_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_010_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_010_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_010_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_010_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_010_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_010_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_010_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1d_p2_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (50),
		.VALID_WIDTH               (50),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1d_p3_mm_bridge_0_m0_limiter (
		.clk                    (pll_c0_clk),                                             //       clk.clk
		.reset                  (cpu_1a_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_011_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_011_src_valid),                                   //          .valid
		.cmd_sink_data          (router_011_src_data),                                    //          .data
		.cmd_sink_channel       (router_011_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_011_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_011_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_011_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_011_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_011_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_011_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_011_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_011_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1d_p3_mm_bridge_0_m0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                         //      sink.ready
		.sink_channel        (router_src_channel),                       //          .channel
		.sink_data           (router_src_data),                          //          .data
		.sink_startofpacket  (router_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                   //          .endofpacket
		.sink_valid          (router_src_valid),                         //          .valid
		.src0_ready          (cmd_demux_src0_ready),                     //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                     //          .valid
		.src0_data           (cmd_demux_src0_data),                      //          .data
		.src0_channel        (cmd_demux_src0_channel),                   //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),               //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                     //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                     //          .valid
		.src1_data           (cmd_demux_src1_data),                      //          .data
		.src1_channel        (cmd_demux_src1_channel),                   //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),               //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                     //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                     //          .valid
		.src2_data           (cmd_demux_src2_data),                      //          .data
		.src2_channel        (cmd_demux_src2_channel),                   //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),               //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                     //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                     //          .valid
		.src3_data           (cmd_demux_src3_data),                      //          .data
		.src3_channel        (cmd_demux_src3_channel),                   //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),               //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                     //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                     //          .valid
		.src4_data           (cmd_demux_src4_data),                      //          .data
		.src4_channel        (cmd_demux_src4_channel),                   //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),               //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                     //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                     //          .valid
		.src5_data           (cmd_demux_src5_data),                      //          .data
		.src5_channel        (cmd_demux_src5_channel),                   //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),             //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),               //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                     //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                     //          .valid
		.src6_data           (cmd_demux_src6_data),                      //          .data
		.src6_channel        (cmd_demux_src6_channel),                   //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),             //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),               //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                     //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                     //          .valid
		.src7_data           (cmd_demux_src7_data),                      //          .data
		.src7_channel        (cmd_demux_src7_channel),                   //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),             //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),               //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                     //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                     //          .valid
		.src8_data           (cmd_demux_src8_data),                      //          .data
		.src8_channel        (cmd_demux_src8_channel),                   //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),             //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),               //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                     //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                     //          .valid
		.src9_data           (cmd_demux_src9_data),                      //          .data
		.src9_channel        (cmd_demux_src9_channel),                   //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),             //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),               //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                    //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                    //          .valid
		.src10_data          (cmd_demux_src10_data),                     //          .data
		.src10_channel       (cmd_demux_src10_channel),                  //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),            //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),              //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                    //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                    //          .valid
		.src11_data          (cmd_demux_src11_data),                     //          .data
		.src11_channel       (cmd_demux_src11_channel),                  //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),            //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),              //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                    //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                    //          .valid
		.src12_data          (cmd_demux_src12_data),                     //          .data
		.src12_channel       (cmd_demux_src12_channel),                  //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),            //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket)               //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                     //      sink.ready
		.sink_channel       (router_001_src_channel),                   //          .channel
		.sink_data          (router_001_src_data),                      //          .data
		.sink_startofpacket (router_001_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_001_src_valid),                     //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                 //          .valid
		.src0_data          (cmd_demux_001_src0_data),                  //          .data
		.src0_channel       (cmd_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),           //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                 //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                 //          .valid
		.src1_data          (cmd_demux_001_src1_data),                  //          .data
		.src1_channel       (cmd_demux_001_src1_channel),               //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),           //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                 //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                 //          .valid
		.src2_data          (cmd_demux_001_src2_data),                  //          .data
		.src2_channel       (cmd_demux_001_src2_channel),               //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),         //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),           //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                 //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                 //          .valid
		.src3_data          (cmd_demux_001_src3_data),                  //          .data
		.src3_channel       (cmd_demux_001_src3_channel),               //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),         //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),           //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                 //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                 //          .valid
		.src4_data          (cmd_demux_001_src4_data),                  //          .data
		.src4_channel       (cmd_demux_001_src4_channel),               //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),         //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),           //          .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                 //      src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                 //          .valid
		.src5_data          (cmd_demux_001_src5_data),                  //          .data
		.src5_channel       (cmd_demux_001_src5_channel),               //          .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),         //          .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),           //          .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                 //      src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                 //          .valid
		.src6_data          (cmd_demux_001_src6_data),                  //          .data
		.src6_channel       (cmd_demux_001_src6_channel),               //          .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),         //          .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),           //          .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                 //      src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                 //          .valid
		.src7_data          (cmd_demux_001_src7_data),                  //          .data
		.src7_channel       (cmd_demux_001_src7_channel),               //          .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),         //          .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1b_p1_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (pll_c0_clk),                                          //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),            //  clk_reset.reset
		.sink_ready         (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1e_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1e_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_003_src0_data),                             //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_003_src1_data),                             //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                      //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                            //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                            //           .valid
		.src2_data          (cmd_demux_003_src2_data),                             //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                          //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket),                      //           .endofpacket
		.src3_ready         (cmd_demux_003_src3_ready),                            //       src3.ready
		.src3_valid         (cmd_demux_003_src3_valid),                            //           .valid
		.src3_data          (cmd_demux_003_src3_data),                             //           .data
		.src3_channel       (cmd_demux_003_src3_channel),                          //           .channel
		.src3_startofpacket (cmd_demux_003_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_003_src3_endofpacket),                      //           .endofpacket
		.src4_ready         (cmd_demux_003_src4_ready),                            //       src4.ready
		.src4_valid         (cmd_demux_003_src4_valid),                            //           .valid
		.src4_data          (cmd_demux_003_src4_data),                             //           .data
		.src4_channel       (cmd_demux_003_src4_channel),                          //           .channel
		.src4_startofpacket (cmd_demux_003_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_003_src4_endofpacket),                      //           .endofpacket
		.src5_ready         (cmd_demux_003_src5_ready),                            //       src5.ready
		.src5_valid         (cmd_demux_003_src5_valid),                            //           .valid
		.src5_data          (cmd_demux_003_src5_data),                             //           .data
		.src5_channel       (cmd_demux_003_src5_channel),                          //           .channel
		.src5_startofpacket (cmd_demux_003_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_003_src5_endofpacket),                      //           .endofpacket
		.src6_ready         (cmd_demux_003_src6_ready),                            //       src6.ready
		.src6_valid         (cmd_demux_003_src6_valid),                            //           .valid
		.src6_data          (cmd_demux_003_src6_data),                             //           .data
		.src6_channel       (cmd_demux_003_src6_channel),                          //           .channel
		.src6_startofpacket (cmd_demux_003_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_003_src6_endofpacket),                      //           .endofpacket
		.src7_ready         (cmd_demux_003_src7_ready),                            //       src7.ready
		.src7_valid         (cmd_demux_003_src7_valid),                            //           .valid
		.src7_data          (cmd_demux_003_src7_data),                             //           .data
		.src7_channel       (cmd_demux_003_src7_channel),                          //           .channel
		.src7_startofpacket (cmd_demux_003_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_003_src7_endofpacket),                      //           .endofpacket
		.src8_ready         (cmd_demux_003_src8_ready),                            //       src8.ready
		.src8_valid         (cmd_demux_003_src8_valid),                            //           .valid
		.src8_data          (cmd_demux_003_src8_data),                             //           .data
		.src8_channel       (cmd_demux_003_src8_channel),                          //           .channel
		.src8_startofpacket (cmd_demux_003_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_003_src8_endofpacket)                       //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_004 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1d_p1_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_004_src0_data),                                //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_004_src1_data),                                //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_004_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_004_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_004_src2_data),                                //           .data
		.src2_channel       (cmd_demux_004_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_004_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_004_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_004_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_004_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_004_src3_data),                                //           .data
		.src3_channel       (cmd_demux_004_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_004_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_004_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_004_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_004_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_004_src4_data),                                //           .data
		.src4_channel       (cmd_demux_004_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_004_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_004_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_005 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1c_p1_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_005_src2_data),                                //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_005_src3_data),                                //           .data
		.src3_channel       (cmd_demux_005_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_005_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_005_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_005_src4_data),                                //           .data
		.src4_channel       (cmd_demux_005_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_005_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_005_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_006 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1b_p2_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_006_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_006_src0_data),                                //           .data
		.src0_channel       (cmd_demux_006_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_006_src1_data),                                //           .data
		.src1_channel       (cmd_demux_006_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_006_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_006_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_006_src2_data),                                //           .data
		.src2_channel       (cmd_demux_006_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_006_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_006_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_006_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_006_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_006_src3_data),                                //           .data
		.src3_channel       (cmd_demux_006_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_006_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_006_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_006_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_006_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_006_src4_data),                                //           .data
		.src4_channel       (cmd_demux_006_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_006_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_006_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_007 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1b_p3_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_007_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_007_src0_data),                                //           .data
		.src0_channel       (cmd_demux_007_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_007_src1_data),                                //           .data
		.src1_channel       (cmd_demux_007_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_007_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_007_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_007_src2_data),                                //           .data
		.src2_channel       (cmd_demux_007_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_007_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_007_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_007_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_007_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_007_src3_data),                                //           .data
		.src3_channel       (cmd_demux_007_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_007_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_007_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_007_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_007_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_007_src4_data),                                //           .data
		.src4_channel       (cmd_demux_007_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_007_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_007_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_008 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1c_p2_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_008_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_008_src0_data),                                //           .data
		.src0_channel       (cmd_demux_008_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_008_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_008_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_008_src1_data),                                //           .data
		.src1_channel       (cmd_demux_008_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_008_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_008_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_008_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_008_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_008_src2_data),                                //           .data
		.src2_channel       (cmd_demux_008_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_008_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_008_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_008_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_008_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_008_src3_data),                                //           .data
		.src3_channel       (cmd_demux_008_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_008_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_008_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_008_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_008_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_008_src4_data),                                //           .data
		.src4_channel       (cmd_demux_008_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_008_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_008_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_009 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1c_p3_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_009_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_009_src0_data),                                //           .data
		.src0_channel       (cmd_demux_009_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_009_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_009_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_009_src1_data),                                //           .data
		.src1_channel       (cmd_demux_009_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_009_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_009_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_009_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_009_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_009_src2_data),                                //           .data
		.src2_channel       (cmd_demux_009_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_009_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_009_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_009_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_009_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_009_src3_data),                                //           .data
		.src3_channel       (cmd_demux_009_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_009_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_009_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_009_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_009_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_009_src4_data),                                //           .data
		.src4_channel       (cmd_demux_009_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_009_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_009_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_010 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1d_p2_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_010_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_010_src0_data),                                //           .data
		.src0_channel       (cmd_demux_010_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_010_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_010_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_010_src1_data),                                //           .data
		.src1_channel       (cmd_demux_010_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_010_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_010_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_010_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_010_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_010_src2_data),                                //           .data
		.src2_channel       (cmd_demux_010_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_010_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_010_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_010_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_010_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_010_src3_data),                                //           .data
		.src3_channel       (cmd_demux_010_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_010_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_010_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_010_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_010_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_010_src4_data),                                //           .data
		.src4_channel       (cmd_demux_010_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_010_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_010_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_002 cmd_demux_011 (
		.clk                (pll_c0_clk),                                             //        clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_1d_p3_mm_bridge_0_m0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_011_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_011_src0_data),                                //           .data
		.src0_channel       (cmd_demux_011_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_011_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_011_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_011_src1_data),                                //           .data
		.src1_channel       (cmd_demux_011_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_011_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_011_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_011_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_011_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_011_src2_data),                                //           .data
		.src2_channel       (cmd_demux_011_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_011_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_011_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_011_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_011_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_011_src3_data),                                //           .data
		.src3_channel       (cmd_demux_011_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_011_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_011_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_011_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_011_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_011_src4_data),                                //           .data
		.src4_channel       (cmd_demux_011_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_011_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_011_src4_endofpacket)                          //           .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 cmd_demux_012 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                     //      sink.ready
		.sink_channel       (router_012_src_channel),                   //          .channel
		.sink_data          (router_012_src_data),                      //          .data
		.sink_startofpacket (router_012_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_012_src_valid),                     //          .valid
		.src0_ready         (cmd_demux_012_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_demux_012_src0_valid),                 //          .valid
		.src0_data          (cmd_demux_012_src0_data),                  //          .data
		.src0_channel       (cmd_demux_012_src0_channel),               //          .channel
		.src0_startofpacket (cmd_demux_012_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_demux_012_src0_endofpacket),           //          .endofpacket
		.src1_ready         (cmd_demux_012_src1_ready),                 //      src1.ready
		.src1_valid         (cmd_demux_012_src1_valid),                 //          .valid
		.src1_data          (cmd_demux_012_src1_data),                  //          .data
		.src1_channel       (cmd_demux_012_src1_channel),               //          .channel
		.src1_startofpacket (cmd_demux_012_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (cmd_demux_012_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 cmd_demux_013 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                     //      sink.ready
		.sink_channel       (router_013_src_channel),                   //          .channel
		.sink_data          (router_013_src_data),                      //          .data
		.sink_startofpacket (router_013_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_013_src_valid),                     //          .valid
		.src0_ready         (cmd_demux_013_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_demux_013_src0_valid),                 //          .valid
		.src0_data          (cmd_demux_013_src0_data),                  //          .data
		.src0_channel       (cmd_demux_013_src0_channel),               //          .channel
		.src0_startofpacket (cmd_demux_013_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_demux_013_src0_endofpacket),           //          .endofpacket
		.src1_ready         (cmd_demux_013_src1_ready),                 //      src1.ready
		.src1_valid         (cmd_demux_013_src1_valid),                 //          .valid
		.src1_data          (cmd_demux_013_src1_data),                  //          .data
		.src1_channel       (cmd_demux_013_src1_channel),               //          .channel
		.src1_startofpacket (cmd_demux_013_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (cmd_demux_013_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                        //          .valid
		.src_data            (cmd_mux_src_data),                         //          .data
		.src_channel         (cmd_mux_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                    //          .valid
		.src_data            (cmd_mux_001_src_data),                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                   //          .channel
		.sink0_data          (cmd_demux_src1_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                    //          .valid
		.src_data            (cmd_mux_002_src_data),                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                   //          .channel
		.sink0_data          (cmd_demux_src2_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_013_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_013_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_013_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_013_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_013_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_013_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                    //          .valid
		.src_data            (cmd_mux_003_src_data),                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                   //          .channel
		.sink0_data          (cmd_demux_src3_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                    //          .valid
		.src_data            (cmd_mux_004_src_data),                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                   //          .channel
		.sink0_data          (cmd_demux_src4_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                    //          .valid
		.src_data            (cmd_mux_005_src_data),                     //          .data
		.src_channel         (cmd_mux_005_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                   //          .channel
		.sink0_data          (cmd_demux_src5_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                    //          .valid
		.src_data            (cmd_mux_006_src_data),                     //          .data
		.src_channel         (cmd_mux_006_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                   //          .channel
		.sink0_data          (cmd_demux_src6_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                    //          .valid
		.src_data            (cmd_mux_007_src_data),                     //          .data
		.src_channel         (cmd_mux_007_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                   //          .channel
		.sink0_data          (cmd_demux_src7_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_006_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_006_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_006_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_006_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_006_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                    //          .valid
		.src_data            (cmd_mux_008_src_data),                     //          .data
		.src_channel         (cmd_mux_008_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                   //          .channel
		.sink0_data          (cmd_demux_src8_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_007_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_007_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_007_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_007_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_007_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_007_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clock_clk_clk),                                         //       clk.clk
		.reset               (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                 //          .valid
		.src_data            (cmd_mux_009_src_data),                                  //          .data
		.src_channel         (cmd_mux_009_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                     //          .valid
		.sink0_channel       (crosser_out_channel),                                   //          .channel
		.sink0_data          (crosser_out_data),                                      //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_010 cmd_mux_010 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                    //          .valid
		.src_data            (cmd_mux_010_src_data),                     //          .data
		.src_channel         (cmd_mux_010_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                  //          .channel
		.sink0_data          (cmd_demux_src10_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (cmd_demux_012_src0_ready),                 //     sink2.ready
		.sink2_valid         (cmd_demux_012_src0_valid),                 //          .valid
		.sink2_channel       (cmd_demux_012_src0_channel),               //          .channel
		.sink2_data          (cmd_demux_012_src0_data),                  //          .data
		.sink2_startofpacket (cmd_demux_012_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (cmd_demux_012_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (cmd_demux_013_src1_ready),                 //     sink3.ready
		.sink3_valid         (cmd_demux_013_src1_valid),                 //          .valid
		.sink3_channel       (cmd_demux_013_src1_channel),               //          .channel
		.sink3_data          (cmd_demux_013_src1_data),                  //          .data
		.sink3_startofpacket (cmd_demux_013_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (cmd_demux_013_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                    //          .valid
		.src_data            (cmd_mux_011_src_data),                     //          .data
		.src_channel         (cmd_mux_011_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                  //          .channel
		.sink0_data          (cmd_demux_src11_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)               //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_012 cmd_mux_012 (
		.clk                  (pll_c0_clk),                               //       clk.clk
		.reset                (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (cmd_mux_012_src_ready),                    //       src.ready
		.src_valid            (cmd_mux_012_src_valid),                    //          .valid
		.src_data             (cmd_mux_012_src_data),                     //          .data
		.src_channel          (cmd_mux_012_src_channel),                  //          .channel
		.src_startofpacket    (cmd_mux_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket      (cmd_mux_012_src_endofpacket),              //          .endofpacket
		.sink0_ready          (cmd_demux_src12_ready),                    //     sink0.ready
		.sink0_valid          (cmd_demux_src12_valid),                    //          .valid
		.sink0_channel        (cmd_demux_src12_channel),                  //          .channel
		.sink0_data           (cmd_demux_src12_data),                     //          .data
		.sink0_startofpacket  (cmd_demux_src12_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (cmd_demux_src12_endofpacket),              //          .endofpacket
		.sink1_ready          (cmd_demux_001_src1_ready),                 //     sink1.ready
		.sink1_valid          (cmd_demux_001_src1_valid),                 //          .valid
		.sink1_channel        (cmd_demux_001_src1_channel),               //          .channel
		.sink1_data           (cmd_demux_001_src1_data),                  //          .data
		.sink1_startofpacket  (cmd_demux_001_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (cmd_demux_001_src1_endofpacket),           //          .endofpacket
		.sink2_ready          (cmd_demux_002_src1_ready),                 //     sink2.ready
		.sink2_valid          (cmd_demux_002_src1_valid),                 //          .valid
		.sink2_channel        (cmd_demux_002_src1_channel),               //          .channel
		.sink2_data           (cmd_demux_002_src1_data),                  //          .data
		.sink2_startofpacket  (cmd_demux_002_src1_startofpacket),         //          .startofpacket
		.sink2_endofpacket    (cmd_demux_002_src1_endofpacket),           //          .endofpacket
		.sink3_ready          (cmd_demux_003_src0_ready),                 //     sink3.ready
		.sink3_valid          (cmd_demux_003_src0_valid),                 //          .valid
		.sink3_channel        (cmd_demux_003_src0_channel),               //          .channel
		.sink3_data           (cmd_demux_003_src0_data),                  //          .data
		.sink3_startofpacket  (cmd_demux_003_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket    (cmd_demux_003_src0_endofpacket),           //          .endofpacket
		.sink4_ready          (cmd_demux_004_src0_ready),                 //     sink4.ready
		.sink4_valid          (cmd_demux_004_src0_valid),                 //          .valid
		.sink4_channel        (cmd_demux_004_src0_channel),               //          .channel
		.sink4_data           (cmd_demux_004_src0_data),                  //          .data
		.sink4_startofpacket  (cmd_demux_004_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (cmd_demux_004_src0_endofpacket),           //          .endofpacket
		.sink5_ready          (cmd_demux_005_src0_ready),                 //     sink5.ready
		.sink5_valid          (cmd_demux_005_src0_valid),                 //          .valid
		.sink5_channel        (cmd_demux_005_src0_channel),               //          .channel
		.sink5_data           (cmd_demux_005_src0_data),                  //          .data
		.sink5_startofpacket  (cmd_demux_005_src0_startofpacket),         //          .startofpacket
		.sink5_endofpacket    (cmd_demux_005_src0_endofpacket),           //          .endofpacket
		.sink6_ready          (cmd_demux_006_src1_ready),                 //     sink6.ready
		.sink6_valid          (cmd_demux_006_src1_valid),                 //          .valid
		.sink6_channel        (cmd_demux_006_src1_channel),               //          .channel
		.sink6_data           (cmd_demux_006_src1_data),                  //          .data
		.sink6_startofpacket  (cmd_demux_006_src1_startofpacket),         //          .startofpacket
		.sink6_endofpacket    (cmd_demux_006_src1_endofpacket),           //          .endofpacket
		.sink7_ready          (cmd_demux_007_src1_ready),                 //     sink7.ready
		.sink7_valid          (cmd_demux_007_src1_valid),                 //          .valid
		.sink7_channel        (cmd_demux_007_src1_channel),               //          .channel
		.sink7_data           (cmd_demux_007_src1_data),                  //          .data
		.sink7_startofpacket  (cmd_demux_007_src1_startofpacket),         //          .startofpacket
		.sink7_endofpacket    (cmd_demux_007_src1_endofpacket),           //          .endofpacket
		.sink8_ready          (cmd_demux_008_src0_ready),                 //     sink8.ready
		.sink8_valid          (cmd_demux_008_src0_valid),                 //          .valid
		.sink8_channel        (cmd_demux_008_src0_channel),               //          .channel
		.sink8_data           (cmd_demux_008_src0_data),                  //          .data
		.sink8_startofpacket  (cmd_demux_008_src0_startofpacket),         //          .startofpacket
		.sink8_endofpacket    (cmd_demux_008_src0_endofpacket),           //          .endofpacket
		.sink9_ready          (cmd_demux_009_src0_ready),                 //     sink9.ready
		.sink9_valid          (cmd_demux_009_src0_valid),                 //          .valid
		.sink9_channel        (cmd_demux_009_src0_channel),               //          .channel
		.sink9_data           (cmd_demux_009_src0_data),                  //          .data
		.sink9_startofpacket  (cmd_demux_009_src0_startofpacket),         //          .startofpacket
		.sink9_endofpacket    (cmd_demux_009_src0_endofpacket),           //          .endofpacket
		.sink10_ready         (cmd_demux_010_src0_ready),                 //    sink10.ready
		.sink10_valid         (cmd_demux_010_src0_valid),                 //          .valid
		.sink10_channel       (cmd_demux_010_src0_channel),               //          .channel
		.sink10_data          (cmd_demux_010_src0_data),                  //          .data
		.sink10_startofpacket (cmd_demux_010_src0_startofpacket),         //          .startofpacket
		.sink10_endofpacket   (cmd_demux_010_src0_endofpacket),           //          .endofpacket
		.sink11_ready         (cmd_demux_011_src0_ready),                 //    sink11.ready
		.sink11_valid         (cmd_demux_011_src0_valid),                 //          .valid
		.sink11_channel       (cmd_demux_011_src0_channel),               //          .channel
		.sink11_data          (cmd_demux_011_src0_data),                  //          .data
		.sink11_startofpacket (cmd_demux_011_src0_startofpacket),         //          .startofpacket
		.sink11_endofpacket   (cmd_demux_011_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                    //          .valid
		.src_data            (cmd_mux_013_src_data),                     //          .data
		.src_channel         (cmd_mux_013_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_011_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_011_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_011_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_011_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_011_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_011_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                    //          .valid
		.src_data            (cmd_mux_014_src_data),                     //          .data
		.src_channel         (cmd_mux_014_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_009_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_009_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_009_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_009_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_009_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_009_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_011_src2_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_011_src2_valid),                 //          .valid
		.sink1_channel       (cmd_demux_011_src2_channel),               //          .channel
		.sink1_data          (cmd_demux_011_src2_data),                  //          .data
		.sink1_startofpacket (cmd_demux_011_src2_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_011_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_015 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                    //          .valid
		.src_data            (cmd_mux_015_src_data),                     //          .data
		.src_channel         (cmd_mux_015_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_011_src3_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_011_src3_valid),                 //          .valid
		.sink1_channel       (cmd_demux_011_src3_channel),               //          .channel
		.sink1_data          (cmd_demux_011_src3_data),                  //          .data
		.sink1_startofpacket (cmd_demux_011_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_011_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                    //          .valid
		.src_data            (cmd_mux_016_src_data),                     //          .data
		.src_channel         (cmd_mux_016_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_011_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_011_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_011_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_011_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_011_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_011_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                    //          .valid
		.src_data            (cmd_mux_017_src_data),                     //          .data
		.src_channel         (cmd_mux_017_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_018 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                    //          .valid
		.src_data            (cmd_mux_018_src_data),                     //          .data
		.src_channel         (cmd_mux_018_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src3_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_004_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_004_src1_valid),                 //          .valid
		.sink1_channel       (cmd_demux_004_src1_channel),               //          .channel
		.sink1_data          (cmd_demux_004_src1_data),                  //          .data
		.sink1_startofpacket (cmd_demux_004_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_019 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                    //          .valid
		.src_data            (cmd_mux_019_src_data),                     //          .data
		.src_channel         (cmd_mux_019_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                 //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),               //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                  //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_020 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                    //          .valid
		.src_data            (cmd_mux_020_src_data),                     //          .data
		.src_channel         (cmd_mux_020_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src5_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src5_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src5_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src5_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src5_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src5_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_010_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_010_src1_valid),                 //          .valid
		.sink1_channel       (cmd_demux_010_src1_channel),               //          .channel
		.sink1_data          (cmd_demux_010_src1_data),                  //          .data
		.sink1_startofpacket (cmd_demux_010_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_010_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                    //          .valid
		.src_data            (cmd_mux_021_src_data),                     //          .data
		.src_channel         (cmd_mux_021_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src6_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src6_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src6_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src6_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src6_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src6_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                    //          .valid
		.src_data            (cmd_mux_022_src_data),                     //          .data
		.src_channel         (cmd_mux_022_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src7_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src7_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src7_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src7_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src7_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src7_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                    //          .valid
		.src_data            (cmd_mux_023_src_data),                     //          .data
		.src_channel         (cmd_mux_023_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src8_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src8_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src8_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src8_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src8_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src8_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                    //          .valid
		.src_data            (cmd_mux_024_src_data),                     //          .data
		.src_channel         (cmd_mux_024_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_010_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_010_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_010_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_010_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_010_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_010_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_025 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                    //          .valid
		.src_data            (cmd_mux_025_src_data),                     //          .data
		.src_channel         (cmd_mux_025_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_008_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_008_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_008_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_008_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_008_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_008_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_010_src3_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_010_src3_valid),                 //          .valid
		.sink1_channel       (cmd_demux_010_src3_channel),               //          .channel
		.sink1_data          (cmd_demux_010_src3_data),                  //          .data
		.sink1_startofpacket (cmd_demux_010_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_010_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                    //          .valid
		.src_data            (cmd_mux_026_src_data),                     //          .data
		.src_channel         (cmd_mux_026_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_010_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_010_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_010_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_010_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_010_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_010_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_027 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                    //          .valid
		.src_data            (cmd_mux_027_src_data),                     //          .data
		.src_channel         (cmd_mux_027_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_008_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_008_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_008_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_008_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_008_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_008_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_028 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                    //          .valid
		.src_data            (cmd_mux_028_src_data),                     //          .data
		.src_channel         (cmd_mux_028_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_006_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_006_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_006_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_006_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_006_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_006_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_008_src3_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_008_src3_valid),                 //          .valid
		.sink1_channel       (cmd_demux_008_src3_channel),               //          .channel
		.sink1_data          (cmd_demux_008_src3_data),                  //          .data
		.sink1_startofpacket (cmd_demux_008_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_029 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                    //          .valid
		.src_data            (cmd_mux_029_src_data),                     //          .data
		.src_channel         (cmd_mux_029_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_008_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_008_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_008_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_008_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_008_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_008_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_030 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                    //          .valid
		.src_data            (cmd_mux_030_src_data),                     //          .data
		.src_channel         (cmd_mux_030_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_006_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_006_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_006_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_006_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_006_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_006_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_031 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                    //          .valid
		.src_data            (cmd_mux_031_src_data),                     //          .data
		.src_channel         (cmd_mux_031_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_006_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_006_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_006_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_006_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_006_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_006_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_032 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                    //          .valid
		.src_data            (cmd_mux_032_src_data),                     //          .data
		.src_channel         (cmd_mux_032_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_033 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                    //          .valid
		.src_data            (cmd_mux_033_src_data),                     //          .data
		.src_channel         (cmd_mux_033_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_034 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                    //          .valid
		.src_data            (cmd_mux_034_src_data),                     //          .data
		.src_channel         (cmd_mux_034_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_012_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_012_src1_valid),                 //          .valid
		.sink1_channel       (cmd_demux_012_src1_channel),               //          .channel
		.sink1_data          (cmd_demux_012_src1_data),                  //          .data
		.sink1_startofpacket (cmd_demux_012_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_012_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_035 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                    //          .valid
		.src_data            (cmd_mux_035_src_data),                     //          .data
		.src_channel         (cmd_mux_035_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_036 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                    //          .valid
		.src_data            (cmd_mux_036_src_data),                     //          .data
		.src_channel         (cmd_mux_036_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                 //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),               //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                  //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_037 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_037_src_valid),                    //          .valid
		.src_data            (cmd_mux_037_src_data),                     //          .data
		.src_channel         (cmd_mux_037_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_004_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_004_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_004_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_004_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_004_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_004_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_038 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_038_src_valid),                    //          .valid
		.src_data            (cmd_mux_038_src_data),                     //          .data
		.src_channel         (cmd_mux_038_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_004_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_004_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_004_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_004_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_004_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_004_src3_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                 //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),               //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                  //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_039 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_039_src_valid),                    //          .valid
		.src_data            (cmd_mux_039_src_data),                     //          .data
		.src_channel         (cmd_mux_039_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_004_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_004_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_004_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_004_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_004_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_004_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_040 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_040_src_valid),                    //          .valid
		.src_data            (cmd_mux_040_src_data),                     //          .data
		.src_channel         (cmd_mux_040_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_005_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_005_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_005_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_005_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_005_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_041 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_041_src_valid),                    //          .valid
		.src_data            (cmd_mux_041_src_data),                     //          .data
		.src_channel         (cmd_mux_041_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_005_src3_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_005_src3_valid),                 //          .valid
		.sink1_channel       (cmd_demux_005_src3_channel),               //          .channel
		.sink1_data          (cmd_demux_005_src3_data),                  //          .data
		.sink1_startofpacket (cmd_demux_005_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_042 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_042_src_valid),                    //          .valid
		.src_data            (cmd_mux_042_src_data),                     //          .data
		.src_channel         (cmd_mux_042_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_005_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_005_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_005_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_005_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_005_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_043 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_043_src_valid),                    //          .valid
		.src_data            (cmd_mux_043_src_data),                     //          .data
		.src_channel         (cmd_mux_043_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_044 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_044_src_valid),                    //          .valid
		.src_data            (cmd_mux_044_src_data),                     //          .data
		.src_channel         (cmd_mux_044_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_045 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_045_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_045_src_valid),                    //          .valid
		.src_data            (cmd_mux_045_src_data),                     //          .data
		.src_channel         (cmd_mux_045_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_045_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_045_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_009_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_009_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_009_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_009_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_009_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_009_src2_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux_002 cmd_mux_046 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_046_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_046_src_valid),                    //          .valid
		.src_data            (cmd_mux_046_src_data),                     //          .data
		.src_channel         (cmd_mux_046_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_046_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_046_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_007_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_007_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_007_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_007_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_007_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_009_src3_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_009_src3_valid),                 //          .valid
		.sink1_channel       (cmd_demux_009_src3_channel),               //          .channel
		.sink1_data          (cmd_demux_009_src3_data),                  //          .data
		.sink1_startofpacket (cmd_demux_009_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_009_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_047 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_047_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_047_src_valid),                    //          .valid
		.src_data            (cmd_mux_047_src_data),                     //          .data
		.src_channel         (cmd_mux_047_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_047_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_047_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_009_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_009_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_009_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_009_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_009_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_009_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_048 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_048_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_048_src_valid),                    //          .valid
		.src_data            (cmd_mux_048_src_data),                     //          .data
		.src_channel         (cmd_mux_048_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_048_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_048_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_007_src3_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_007_src3_valid),                 //          .valid
		.sink0_channel       (cmd_demux_007_src3_channel),               //          .channel
		.sink0_data          (cmd_demux_007_src3_data),                  //          .data
		.sink0_startofpacket (cmd_demux_007_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_mux cmd_mux_049 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_049_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_049_src_valid),                    //          .valid
		.src_data            (cmd_mux_049_src_data),                     //          .data
		.src_channel         (cmd_mux_049_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_049_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_049_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_007_src4_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_007_src4_valid),                 //          .valid
		.sink0_channel       (cmd_demux_007_src4_channel),               //          .channel
		.sink0_data          (cmd_demux_007_src4_data),                  //          .data
		.sink0_startofpacket (cmd_demux_007_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src4_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                     //      sink.ready
		.sink_channel       (router_014_src_channel),                   //          .channel
		.sink_data          (router_014_src_data),                      //          .data
		.sink_startofpacket (router_014_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_014_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_src0_data),                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                     //      sink.ready
		.sink_channel       (router_015_src_channel),                   //          .channel
		.sink_data          (router_015_src_data),                      //          .data
		.sink_startofpacket (router_015_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_015_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_002 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                     //      sink.ready
		.sink_channel       (router_016_src_channel),                   //          .channel
		.sink_data          (router_016_src_data),                      //          .data
		.sink_startofpacket (router_016_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_016_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_002_src0_data),                  //          .data
		.src0_channel       (rsp_demux_002_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_002_src1_data),                  //          .data
		.src1_channel       (rsp_demux_002_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                     //      sink.ready
		.sink_channel       (router_017_src_channel),                   //          .channel
		.sink_data          (router_017_src_data),                      //          .data
		.sink_startofpacket (router_017_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_017_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                     //      sink.ready
		.sink_channel       (router_018_src_channel),                   //          .channel
		.sink_data          (router_018_src_data),                      //          .data
		.sink_startofpacket (router_018_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_018_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                     //      sink.ready
		.sink_channel       (router_019_src_channel),                   //          .channel
		.sink_data          (router_019_src_data),                      //          .data
		.sink_startofpacket (router_019_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_019_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_005_src0_data),                  //          .data
		.src0_channel       (rsp_demux_005_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_006 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                     //      sink.ready
		.sink_channel       (router_020_src_channel),                   //          .channel
		.sink_data          (router_020_src_data),                      //          .data
		.sink_startofpacket (router_020_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_020_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_006_src0_data),                  //          .data
		.src0_channel       (rsp_demux_006_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_006_src1_data),                  //          .data
		.src1_channel       (rsp_demux_006_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_007 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                     //      sink.ready
		.sink_channel       (router_021_src_channel),                   //          .channel
		.sink_data          (router_021_src_data),                      //          .data
		.sink_startofpacket (router_021_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_021_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_007_src0_data),                  //          .data
		.src0_channel       (rsp_demux_007_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_007_src1_data),                  //          .data
		.src1_channel       (rsp_demux_007_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_008 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                     //      sink.ready
		.sink_channel       (router_022_src_channel),                   //          .channel
		.sink_data          (router_022_src_data),                      //          .data
		.sink_startofpacket (router_022_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_022_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_008_src0_data),                  //          .data
		.src0_channel       (rsp_demux_008_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_008_src1_data),                  //          .data
		.src1_channel       (rsp_demux_008_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux_009 rsp_demux_009 (
		.clk                (clock_clk_clk),                                         //       clk.clk
		.reset              (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                  //      sink.ready
		.sink_channel       (router_023_src_channel),                                //          .channel
		.sink_data          (router_023_src_data),                                   //          .data
		.sink_startofpacket (router_023_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_023_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                         //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux_010 rsp_demux_010 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                     //      sink.ready
		.sink_channel       (router_024_src_channel),                   //          .channel
		.sink_data          (router_024_src_data),                      //          .data
		.sink_startofpacket (router_024_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_024_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_010_src0_data),                  //          .data
		.src0_channel       (rsp_demux_010_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_010_src1_data),                  //          .data
		.src1_channel       (rsp_demux_010_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),           //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                 //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                 //          .valid
		.src2_data          (rsp_demux_010_src2_data),                  //          .data
		.src2_channel       (rsp_demux_010_src2_channel),               //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),         //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket),           //          .endofpacket
		.src3_ready         (rsp_demux_010_src3_ready),                 //      src3.ready
		.src3_valid         (rsp_demux_010_src3_valid),                 //          .valid
		.src3_data          (rsp_demux_010_src3_data),                  //          .data
		.src3_channel       (rsp_demux_010_src3_channel),               //          .channel
		.src3_startofpacket (rsp_demux_010_src3_startofpacket),         //          .startofpacket
		.src3_endofpacket   (rsp_demux_010_src3_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                     //      sink.ready
		.sink_channel       (router_025_src_channel),                   //          .channel
		.sink_data          (router_025_src_data),                      //          .data
		.sink_startofpacket (router_025_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_025_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_011_src0_data),                  //          .data
		.src0_channel       (rsp_demux_011_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_026_src_ready),                     //      sink.ready
		.sink_channel        (router_026_src_channel),                   //          .channel
		.sink_data           (router_026_src_data),                      //          .data
		.sink_startofpacket  (router_026_src_startofpacket),             //          .startofpacket
		.sink_endofpacket    (router_026_src_endofpacket),               //          .endofpacket
		.sink_valid          (router_026_src_valid),                     //          .valid
		.src0_ready          (rsp_demux_012_src0_ready),                 //      src0.ready
		.src0_valid          (rsp_demux_012_src0_valid),                 //          .valid
		.src0_data           (rsp_demux_012_src0_data),                  //          .data
		.src0_channel        (rsp_demux_012_src0_channel),               //          .channel
		.src0_startofpacket  (rsp_demux_012_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket    (rsp_demux_012_src0_endofpacket),           //          .endofpacket
		.src1_ready          (rsp_demux_012_src1_ready),                 //      src1.ready
		.src1_valid          (rsp_demux_012_src1_valid),                 //          .valid
		.src1_data           (rsp_demux_012_src1_data),                  //          .data
		.src1_channel        (rsp_demux_012_src1_channel),               //          .channel
		.src1_startofpacket  (rsp_demux_012_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket    (rsp_demux_012_src1_endofpacket),           //          .endofpacket
		.src2_ready          (rsp_demux_012_src2_ready),                 //      src2.ready
		.src2_valid          (rsp_demux_012_src2_valid),                 //          .valid
		.src2_data           (rsp_demux_012_src2_data),                  //          .data
		.src2_channel        (rsp_demux_012_src2_channel),               //          .channel
		.src2_startofpacket  (rsp_demux_012_src2_startofpacket),         //          .startofpacket
		.src2_endofpacket    (rsp_demux_012_src2_endofpacket),           //          .endofpacket
		.src3_ready          (rsp_demux_012_src3_ready),                 //      src3.ready
		.src3_valid          (rsp_demux_012_src3_valid),                 //          .valid
		.src3_data           (rsp_demux_012_src3_data),                  //          .data
		.src3_channel        (rsp_demux_012_src3_channel),               //          .channel
		.src3_startofpacket  (rsp_demux_012_src3_startofpacket),         //          .startofpacket
		.src3_endofpacket    (rsp_demux_012_src3_endofpacket),           //          .endofpacket
		.src4_ready          (rsp_demux_012_src4_ready),                 //      src4.ready
		.src4_valid          (rsp_demux_012_src4_valid),                 //          .valid
		.src4_data           (rsp_demux_012_src4_data),                  //          .data
		.src4_channel        (rsp_demux_012_src4_channel),               //          .channel
		.src4_startofpacket  (rsp_demux_012_src4_startofpacket),         //          .startofpacket
		.src4_endofpacket    (rsp_demux_012_src4_endofpacket),           //          .endofpacket
		.src5_ready          (rsp_demux_012_src5_ready),                 //      src5.ready
		.src5_valid          (rsp_demux_012_src5_valid),                 //          .valid
		.src5_data           (rsp_demux_012_src5_data),                  //          .data
		.src5_channel        (rsp_demux_012_src5_channel),               //          .channel
		.src5_startofpacket  (rsp_demux_012_src5_startofpacket),         //          .startofpacket
		.src5_endofpacket    (rsp_demux_012_src5_endofpacket),           //          .endofpacket
		.src6_ready          (rsp_demux_012_src6_ready),                 //      src6.ready
		.src6_valid          (rsp_demux_012_src6_valid),                 //          .valid
		.src6_data           (rsp_demux_012_src6_data),                  //          .data
		.src6_channel        (rsp_demux_012_src6_channel),               //          .channel
		.src6_startofpacket  (rsp_demux_012_src6_startofpacket),         //          .startofpacket
		.src6_endofpacket    (rsp_demux_012_src6_endofpacket),           //          .endofpacket
		.src7_ready          (rsp_demux_012_src7_ready),                 //      src7.ready
		.src7_valid          (rsp_demux_012_src7_valid),                 //          .valid
		.src7_data           (rsp_demux_012_src7_data),                  //          .data
		.src7_channel        (rsp_demux_012_src7_channel),               //          .channel
		.src7_startofpacket  (rsp_demux_012_src7_startofpacket),         //          .startofpacket
		.src7_endofpacket    (rsp_demux_012_src7_endofpacket),           //          .endofpacket
		.src8_ready          (rsp_demux_012_src8_ready),                 //      src8.ready
		.src8_valid          (rsp_demux_012_src8_valid),                 //          .valid
		.src8_data           (rsp_demux_012_src8_data),                  //          .data
		.src8_channel        (rsp_demux_012_src8_channel),               //          .channel
		.src8_startofpacket  (rsp_demux_012_src8_startofpacket),         //          .startofpacket
		.src8_endofpacket    (rsp_demux_012_src8_endofpacket),           //          .endofpacket
		.src9_ready          (rsp_demux_012_src9_ready),                 //      src9.ready
		.src9_valid          (rsp_demux_012_src9_valid),                 //          .valid
		.src9_data           (rsp_demux_012_src9_data),                  //          .data
		.src9_channel        (rsp_demux_012_src9_channel),               //          .channel
		.src9_startofpacket  (rsp_demux_012_src9_startofpacket),         //          .startofpacket
		.src9_endofpacket    (rsp_demux_012_src9_endofpacket),           //          .endofpacket
		.src10_ready         (rsp_demux_012_src10_ready),                //     src10.ready
		.src10_valid         (rsp_demux_012_src10_valid),                //          .valid
		.src10_data          (rsp_demux_012_src10_data),                 //          .data
		.src10_channel       (rsp_demux_012_src10_channel),              //          .channel
		.src10_startofpacket (rsp_demux_012_src10_startofpacket),        //          .startofpacket
		.src10_endofpacket   (rsp_demux_012_src10_endofpacket),          //          .endofpacket
		.src11_ready         (rsp_demux_012_src11_ready),                //     src11.ready
		.src11_valid         (rsp_demux_012_src11_valid),                //          .valid
		.src11_data          (rsp_demux_012_src11_data),                 //          .data
		.src11_channel       (rsp_demux_012_src11_channel),              //          .channel
		.src11_startofpacket (rsp_demux_012_src11_startofpacket),        //          .startofpacket
		.src11_endofpacket   (rsp_demux_012_src11_endofpacket)           //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                     //      sink.ready
		.sink_channel       (router_027_src_channel),                   //          .channel
		.sink_data          (router_027_src_data),                      //          .data
		.sink_startofpacket (router_027_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_027_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_013_src0_data),                  //          .data
		.src0_channel       (rsp_demux_013_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_014 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                     //      sink.ready
		.sink_channel       (router_028_src_channel),                   //          .channel
		.sink_data          (router_028_src_data),                      //          .data
		.sink_startofpacket (router_028_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_028_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_014_src0_data),                  //          .data
		.src0_channel       (rsp_demux_014_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_014_src1_data),                  //          .data
		.src1_channel       (rsp_demux_014_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_015 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                     //      sink.ready
		.sink_channel       (router_029_src_channel),                   //          .channel
		.sink_data          (router_029_src_data),                      //          .data
		.sink_startofpacket (router_029_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_029_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_015_src0_data),                  //          .data
		.src0_channel       (rsp_demux_015_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_015_src1_data),                  //          .data
		.src1_channel       (rsp_demux_015_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                     //      sink.ready
		.sink_channel       (router_030_src_channel),                   //          .channel
		.sink_data          (router_030_src_data),                      //          .data
		.sink_startofpacket (router_030_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_030_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_016_src0_data),                  //          .data
		.src0_channel       (rsp_demux_016_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                     //      sink.ready
		.sink_channel       (router_031_src_channel),                   //          .channel
		.sink_data          (router_031_src_data),                      //          .data
		.sink_startofpacket (router_031_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_031_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_017_src0_data),                  //          .data
		.src0_channel       (rsp_demux_017_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_018 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                     //      sink.ready
		.sink_channel       (router_032_src_channel),                   //          .channel
		.sink_data          (router_032_src_data),                      //          .data
		.sink_startofpacket (router_032_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_032_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_018_src0_data),                  //          .data
		.src0_channel       (rsp_demux_018_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_018_src1_data),                  //          .data
		.src1_channel       (rsp_demux_018_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_019 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                     //      sink.ready
		.sink_channel       (router_033_src_channel),                   //          .channel
		.sink_data          (router_033_src_data),                      //          .data
		.sink_startofpacket (router_033_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_033_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_019_src0_data),                  //          .data
		.src0_channel       (rsp_demux_019_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_019_src1_data),                  //          .data
		.src1_channel       (rsp_demux_019_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_020 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                     //      sink.ready
		.sink_channel       (router_034_src_channel),                   //          .channel
		.sink_data          (router_034_src_data),                      //          .data
		.sink_startofpacket (router_034_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_034_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_020_src0_data),                  //          .data
		.src0_channel       (rsp_demux_020_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_020_src1_data),                  //          .data
		.src1_channel       (rsp_demux_020_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                     //      sink.ready
		.sink_channel       (router_035_src_channel),                   //          .channel
		.sink_data          (router_035_src_data),                      //          .data
		.sink_startofpacket (router_035_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_035_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_021_src0_data),                  //          .data
		.src0_channel       (rsp_demux_021_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                     //      sink.ready
		.sink_channel       (router_036_src_channel),                   //          .channel
		.sink_data          (router_036_src_data),                      //          .data
		.sink_startofpacket (router_036_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_036_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_022_src0_data),                  //          .data
		.src0_channel       (rsp_demux_022_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                     //      sink.ready
		.sink_channel       (router_037_src_channel),                   //          .channel
		.sink_data          (router_037_src_data),                      //          .data
		.sink_startofpacket (router_037_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_037_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_023_src0_data),                  //          .data
		.src0_channel       (rsp_demux_023_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                     //      sink.ready
		.sink_channel       (router_038_src_channel),                   //          .channel
		.sink_data          (router_038_src_data),                      //          .data
		.sink_startofpacket (router_038_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_038_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_024_src0_data),                  //          .data
		.src0_channel       (rsp_demux_024_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_025 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                     //      sink.ready
		.sink_channel       (router_039_src_channel),                   //          .channel
		.sink_data          (router_039_src_data),                      //          .data
		.sink_startofpacket (router_039_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_039_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_025_src0_data),                  //          .data
		.src0_channel       (rsp_demux_025_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_025_src1_data),                  //          .data
		.src1_channel       (rsp_demux_025_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_040_src_ready),                     //      sink.ready
		.sink_channel       (router_040_src_channel),                   //          .channel
		.sink_data          (router_040_src_data),                      //          .data
		.sink_startofpacket (router_040_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_040_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_026_src0_data),                  //          .data
		.src0_channel       (rsp_demux_026_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_027 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_041_src_ready),                     //      sink.ready
		.sink_channel       (router_041_src_channel),                   //          .channel
		.sink_data          (router_041_src_data),                      //          .data
		.sink_startofpacket (router_041_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_041_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_027_src0_data),                  //          .data
		.src0_channel       (rsp_demux_027_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_028 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_042_src_ready),                     //      sink.ready
		.sink_channel       (router_042_src_channel),                   //          .channel
		.sink_data          (router_042_src_data),                      //          .data
		.sink_startofpacket (router_042_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_042_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_028_src0_data),                  //          .data
		.src0_channel       (rsp_demux_028_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_028_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_028_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_028_src1_data),                  //          .data
		.src1_channel       (rsp_demux_028_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_028_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_028_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_029 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_043_src_ready),                     //      sink.ready
		.sink_channel       (router_043_src_channel),                   //          .channel
		.sink_data          (router_043_src_data),                      //          .data
		.sink_startofpacket (router_043_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_043_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_029_src0_data),                  //          .data
		.src0_channel       (rsp_demux_029_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_030 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_044_src_ready),                     //      sink.ready
		.sink_channel       (router_044_src_channel),                   //          .channel
		.sink_data          (router_044_src_data),                      //          .data
		.sink_startofpacket (router_044_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_044_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_030_src0_data),                  //          .data
		.src0_channel       (rsp_demux_030_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_031 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_045_src_ready),                     //      sink.ready
		.sink_channel       (router_045_src_channel),                   //          .channel
		.sink_data          (router_045_src_data),                      //          .data
		.sink_startofpacket (router_045_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_045_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_031_src0_data),                  //          .data
		.src0_channel       (rsp_demux_031_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_032 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_046_src_ready),                     //      sink.ready
		.sink_channel       (router_046_src_channel),                   //          .channel
		.sink_data          (router_046_src_data),                      //          .data
		.sink_startofpacket (router_046_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_046_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_032_src0_data),                  //          .data
		.src0_channel       (rsp_demux_032_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_033 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                     //      sink.ready
		.sink_channel       (router_047_src_channel),                   //          .channel
		.sink_data          (router_047_src_data),                      //          .data
		.sink_startofpacket (router_047_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_047_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_033_src0_data),                  //          .data
		.src0_channel       (rsp_demux_033_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_034 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                     //      sink.ready
		.sink_channel       (router_048_src_channel),                   //          .channel
		.sink_data          (router_048_src_data),                      //          .data
		.sink_startofpacket (router_048_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_048_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_034_src0_data),                  //          .data
		.src0_channel       (rsp_demux_034_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_034_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_034_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_034_src1_data),                  //          .data
		.src1_channel       (rsp_demux_034_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_034_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_034_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_035 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_049_src_ready),                     //      sink.ready
		.sink_channel       (router_049_src_channel),                   //          .channel
		.sink_data          (router_049_src_data),                      //          .data
		.sink_startofpacket (router_049_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_049_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_035_src0_data),                  //          .data
		.src0_channel       (rsp_demux_035_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_036 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_050_src_ready),                     //      sink.ready
		.sink_channel       (router_050_src_channel),                   //          .channel
		.sink_data          (router_050_src_data),                      //          .data
		.sink_startofpacket (router_050_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_050_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_036_src0_data),                  //          .data
		.src0_channel       (rsp_demux_036_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_037 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_051_src_ready),                     //      sink.ready
		.sink_channel       (router_051_src_channel),                   //          .channel
		.sink_data          (router_051_src_data),                      //          .data
		.sink_startofpacket (router_051_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_051_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_051_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_037_src0_data),                  //          .data
		.src0_channel       (rsp_demux_037_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_038 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_052_src_ready),                     //      sink.ready
		.sink_channel       (router_052_src_channel),                   //          .channel
		.sink_data          (router_052_src_data),                      //          .data
		.sink_startofpacket (router_052_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_052_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_052_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_038_src0_data),                  //          .data
		.src0_channel       (rsp_demux_038_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_038_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_038_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_038_src1_data),                  //          .data
		.src1_channel       (rsp_demux_038_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_038_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_038_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_039 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_053_src_ready),                     //      sink.ready
		.sink_channel       (router_053_src_channel),                   //          .channel
		.sink_data          (router_053_src_data),                      //          .data
		.sink_startofpacket (router_053_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_053_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_053_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_039_src0_data),                  //          .data
		.src0_channel       (rsp_demux_039_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_040 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_054_src_ready),                     //      sink.ready
		.sink_channel       (router_054_src_channel),                   //          .channel
		.sink_data          (router_054_src_data),                      //          .data
		.sink_startofpacket (router_054_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_054_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_054_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_040_src0_data),                  //          .data
		.src0_channel       (rsp_demux_040_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_041 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_055_src_ready),                     //      sink.ready
		.sink_channel       (router_055_src_channel),                   //          .channel
		.sink_data          (router_055_src_data),                      //          .data
		.sink_startofpacket (router_055_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_055_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_055_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_041_src0_data),                  //          .data
		.src0_channel       (rsp_demux_041_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_041_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_041_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_041_src1_data),                  //          .data
		.src1_channel       (rsp_demux_041_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_041_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_041_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_042 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_056_src_ready),                     //      sink.ready
		.sink_channel       (router_056_src_channel),                   //          .channel
		.sink_data          (router_056_src_data),                      //          .data
		.sink_startofpacket (router_056_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_056_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_056_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_042_src0_data),                  //          .data
		.src0_channel       (rsp_demux_042_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_043 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_057_src_ready),                     //      sink.ready
		.sink_channel       (router_057_src_channel),                   //          .channel
		.sink_data          (router_057_src_data),                      //          .data
		.sink_startofpacket (router_057_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_057_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_057_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_043_src0_data),                  //          .data
		.src0_channel       (rsp_demux_043_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_044 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_058_src_ready),                     //      sink.ready
		.sink_channel       (router_058_src_channel),                   //          .channel
		.sink_data          (router_058_src_data),                      //          .data
		.sink_startofpacket (router_058_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_058_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_058_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_044_src0_data),                  //          .data
		.src0_channel       (rsp_demux_044_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_045 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_059_src_ready),                     //      sink.ready
		.sink_channel       (router_059_src_channel),                   //          .channel
		.sink_data          (router_059_src_data),                      //          .data
		.sink_startofpacket (router_059_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_059_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_059_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_045_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_045_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_045_src0_data),                  //          .data
		.src0_channel       (rsp_demux_045_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_045_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_045_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_cmd_demux_012 rsp_demux_046 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_060_src_ready),                     //      sink.ready
		.sink_channel       (router_060_src_channel),                   //          .channel
		.sink_data          (router_060_src_data),                      //          .data
		.sink_startofpacket (router_060_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_060_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_060_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_046_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_046_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_046_src0_data),                  //          .data
		.src0_channel       (rsp_demux_046_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_046_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_046_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_046_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_046_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_046_src1_data),                  //          .data
		.src1_channel       (rsp_demux_046_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_046_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_046_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_047 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_061_src_ready),                     //      sink.ready
		.sink_channel       (router_061_src_channel),                   //          .channel
		.sink_data          (router_061_src_data),                      //          .data
		.sink_startofpacket (router_061_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_061_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_061_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_047_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_047_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_047_src0_data),                  //          .data
		.src0_channel       (rsp_demux_047_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_047_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_047_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_048 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_062_src_ready),                     //      sink.ready
		.sink_channel       (router_062_src_channel),                   //          .channel
		.sink_data          (router_062_src_data),                      //          .data
		.sink_startofpacket (router_062_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_062_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_062_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_048_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_048_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_048_src0_data),                  //          .data
		.src0_channel       (rsp_demux_048_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_048_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_048_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_demux rsp_demux_049 (
		.clk                (pll_c0_clk),                               //       clk.clk
		.reset              (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_063_src_ready),                     //      sink.ready
		.sink_channel       (router_063_src_channel),                   //          .channel
		.sink_data          (router_063_src_data),                      //          .data
		.sink_startofpacket (router_063_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_063_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_063_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_049_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_049_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_049_src0_data),                  //          .data
		.src0_channel       (rsp_demux_049_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_049_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_049_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pll_c0_clk),                               //       clk.clk
		.reset                (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                        //          .valid
		.src_data             (rsp_mux_src_data),                         //          .data
		.src_channel          (rsp_mux_src_channel),                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),           //          .endofpacket
		.sink9_ready          (crosser_001_out_ready),                    //     sink9.ready
		.sink9_valid          (crosser_001_out_valid),                    //          .valid
		.sink9_channel        (crosser_001_out_channel),                  //          .channel
		.sink9_data           (crosser_001_out_data),                     //          .data
		.sink9_startofpacket  (crosser_001_out_startofpacket),            //          .startofpacket
		.sink9_endofpacket    (crosser_001_out_endofpacket),              //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                 //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),               //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                  //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                    //          .valid
		.src_data            (rsp_mux_001_src_data),                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_010_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_010_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_010_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_010_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_010_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_010_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_012_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_012_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_012_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_012_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_012_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src1_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_019_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_019_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_019_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_019_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_019_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_019_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_032_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_032_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_032_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_032_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_032_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_032_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_033_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_033_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_033_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_033_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_033_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_033_src0_endofpacket),           //          .endofpacket
		.sink5_ready         (rsp_demux_034_src0_ready),                 //     sink5.ready
		.sink5_valid         (rsp_demux_034_src0_valid),                 //          .valid
		.sink5_channel       (rsp_demux_034_src0_channel),               //          .channel
		.sink5_data          (rsp_demux_034_src0_data),                  //          .data
		.sink5_startofpacket (rsp_demux_034_src0_startofpacket),         //          .startofpacket
		.sink5_endofpacket   (rsp_demux_034_src0_endofpacket),           //          .endofpacket
		.sink6_ready         (rsp_demux_035_src0_ready),                 //     sink6.ready
		.sink6_valid         (rsp_demux_035_src0_valid),                 //          .valid
		.sink6_channel       (rsp_demux_035_src0_channel),               //          .channel
		.sink6_data          (rsp_demux_035_src0_data),                  //          .data
		.sink6_startofpacket (rsp_demux_035_src0_startofpacket),         //          .startofpacket
		.sink6_endofpacket   (rsp_demux_035_src0_endofpacket),           //          .endofpacket
		.sink7_ready         (rsp_demux_036_src0_ready),                 //     sink7.ready
		.sink7_valid         (rsp_demux_036_src0_valid),                 //          .valid
		.sink7_channel       (rsp_demux_036_src0_channel),               //          .channel
		.sink7_data          (rsp_demux_036_src0_data),                  //          .data
		.sink7_startofpacket (rsp_demux_036_src0_startofpacket),         //          .startofpacket
		.sink7_endofpacket   (rsp_demux_036_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                    //          .valid
		.src_data            (rsp_mux_002_src_data),                     //          .data
		.src_channel         (rsp_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_012_src2_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_012_src2_valid),                 //          .valid
		.sink1_channel       (rsp_demux_012_src2_channel),               //          .channel
		.sink1_data          (rsp_demux_012_src2_data),                  //          .data
		.sink1_startofpacket (rsp_demux_012_src2_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src2_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_041_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_041_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_041_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_041_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_041_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_041_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_043_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_043_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_043_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_043_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_043_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_043_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_044_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_044_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_044_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_044_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_044_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_044_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                    //          .valid
		.src_data            (rsp_mux_003_src_data),                     //          .data
		.src_channel         (rsp_mux_003_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src3_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_012_src3_valid),                 //          .valid
		.sink0_channel       (rsp_demux_012_src3_channel),               //          .channel
		.sink0_data          (rsp_demux_012_src3_data),                  //          .data
		.sink0_startofpacket (rsp_demux_012_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src3_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_015_src0_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_015_src0_valid),                 //          .valid
		.sink1_channel       (rsp_demux_015_src0_channel),               //          .channel
		.sink1_data          (rsp_demux_015_src0_data),                  //          .data
		.sink1_startofpacket (rsp_demux_015_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_015_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_017_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_017_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_017_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_017_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_017_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_017_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_018_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_018_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_018_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_018_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_018_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_018_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_019_src1_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_019_src1_valid),                 //          .valid
		.sink4_channel       (rsp_demux_019_src1_channel),               //          .channel
		.sink4_data          (rsp_demux_019_src1_data),                  //          .data
		.sink4_startofpacket (rsp_demux_019_src1_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_019_src1_endofpacket),           //          .endofpacket
		.sink5_ready         (rsp_demux_020_src0_ready),                 //     sink5.ready
		.sink5_valid         (rsp_demux_020_src0_valid),                 //          .valid
		.sink5_channel       (rsp_demux_020_src0_channel),               //          .channel
		.sink5_data          (rsp_demux_020_src0_data),                  //          .data
		.sink5_startofpacket (rsp_demux_020_src0_startofpacket),         //          .startofpacket
		.sink5_endofpacket   (rsp_demux_020_src0_endofpacket),           //          .endofpacket
		.sink6_ready         (rsp_demux_021_src0_ready),                 //     sink6.ready
		.sink6_valid         (rsp_demux_021_src0_valid),                 //          .valid
		.sink6_channel       (rsp_demux_021_src0_channel),               //          .channel
		.sink6_data          (rsp_demux_021_src0_data),                  //          .data
		.sink6_startofpacket (rsp_demux_021_src0_startofpacket),         //          .startofpacket
		.sink6_endofpacket   (rsp_demux_021_src0_endofpacket),           //          .endofpacket
		.sink7_ready         (rsp_demux_022_src0_ready),                 //     sink7.ready
		.sink7_valid         (rsp_demux_022_src0_valid),                 //          .valid
		.sink7_channel       (rsp_demux_022_src0_channel),               //          .channel
		.sink7_data          (rsp_demux_022_src0_data),                  //          .data
		.sink7_startofpacket (rsp_demux_022_src0_startofpacket),         //          .startofpacket
		.sink7_endofpacket   (rsp_demux_022_src0_endofpacket),           //          .endofpacket
		.sink8_ready         (rsp_demux_023_src0_ready),                 //     sink8.ready
		.sink8_valid         (rsp_demux_023_src0_valid),                 //          .valid
		.sink8_channel       (rsp_demux_023_src0_channel),               //          .channel
		.sink8_data          (rsp_demux_023_src0_data),                  //          .data
		.sink8_startofpacket (rsp_demux_023_src0_startofpacket),         //          .startofpacket
		.sink8_endofpacket   (rsp_demux_023_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_004 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                    //          .valid
		.src_data            (rsp_mux_004_src_data),                     //          .data
		.src_channel         (rsp_mux_004_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src4_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_012_src4_valid),                 //          .valid
		.sink0_channel       (rsp_demux_012_src4_channel),               //          .channel
		.sink0_data          (rsp_demux_012_src4_data),                  //          .data
		.sink0_startofpacket (rsp_demux_012_src4_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src4_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_018_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_018_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_018_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_018_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_018_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_018_src1_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_037_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_037_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_037_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_037_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_037_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_037_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_038_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_038_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_038_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_038_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_038_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_038_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_039_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_039_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_039_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_039_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_039_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_039_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_005 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                    //          .valid
		.src_data            (rsp_mux_005_src_data),                     //          .data
		.src_channel         (rsp_mux_005_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src5_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_012_src5_valid),                 //          .valid
		.sink0_channel       (rsp_demux_012_src5_channel),               //          .channel
		.sink0_data          (rsp_demux_012_src5_data),                  //          .data
		.sink0_startofpacket (rsp_demux_012_src5_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src5_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_038_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_038_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_038_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_038_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_038_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_038_src1_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_040_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_040_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_040_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_040_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_040_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_040_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_041_src1_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_041_src1_valid),                 //          .valid
		.sink3_channel       (rsp_demux_041_src1_channel),               //          .channel
		.sink3_data          (rsp_demux_041_src1_data),                  //          .data
		.sink3_startofpacket (rsp_demux_041_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_041_src1_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_042_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_042_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_042_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_042_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_042_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_042_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_006 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                    //          .valid
		.src_data            (rsp_mux_006_src_data),                     //          .data
		.src_channel         (rsp_mux_006_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_007_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_007_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_007_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_007_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_007_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_007_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_012_src6_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_012_src6_valid),                 //          .valid
		.sink1_channel       (rsp_demux_012_src6_channel),               //          .channel
		.sink1_data          (rsp_demux_012_src6_data),                  //          .data
		.sink1_startofpacket (rsp_demux_012_src6_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src6_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_028_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_028_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_028_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_028_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_028_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_028_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_030_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_030_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_030_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_030_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_030_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_030_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_031_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_031_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_031_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_031_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_031_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_031_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_007 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                    //          .valid
		.src_data            (rsp_mux_007_src_data),                     //          .data
		.src_channel         (rsp_mux_007_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_008_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_008_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_008_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_008_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_008_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_012_src7_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_012_src7_valid),                 //          .valid
		.sink1_channel       (rsp_demux_012_src7_channel),               //          .channel
		.sink1_data          (rsp_demux_012_src7_data),                  //          .data
		.sink1_startofpacket (rsp_demux_012_src7_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src7_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_046_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_046_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_046_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_046_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_046_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_046_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_048_src0_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_048_src0_valid),                 //          .valid
		.sink3_channel       (rsp_demux_048_src0_channel),               //          .channel
		.sink3_data          (rsp_demux_048_src0_data),                  //          .data
		.sink3_startofpacket (rsp_demux_048_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_048_src0_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_049_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_049_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_049_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_049_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_049_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_049_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_008 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                    //          .valid
		.src_data            (rsp_mux_008_src_data),                     //          .data
		.src_channel         (rsp_mux_008_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src8_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_012_src8_valid),                 //          .valid
		.sink0_channel       (rsp_demux_012_src8_channel),               //          .channel
		.sink0_data          (rsp_demux_012_src8_data),                  //          .data
		.sink0_startofpacket (rsp_demux_012_src8_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src8_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_025_src0_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_025_src0_valid),                 //          .valid
		.sink1_channel       (rsp_demux_025_src0_channel),               //          .channel
		.sink1_data          (rsp_demux_025_src0_data),                  //          .data
		.sink1_startofpacket (rsp_demux_025_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_025_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_027_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_027_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_027_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_027_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_027_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_027_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_028_src1_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_028_src1_valid),                 //          .valid
		.sink3_channel       (rsp_demux_028_src1_channel),               //          .channel
		.sink3_data          (rsp_demux_028_src1_data),                  //          .data
		.sink3_startofpacket (rsp_demux_028_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_028_src1_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_029_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_029_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_029_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_029_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_029_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_029_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_009 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                    //          .valid
		.src_data            (rsp_mux_009_src_data),                     //          .data
		.src_channel         (rsp_mux_009_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src9_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_012_src9_valid),                 //          .valid
		.sink0_channel       (rsp_demux_012_src9_channel),               //          .channel
		.sink0_data          (rsp_demux_012_src9_data),                  //          .data
		.sink0_startofpacket (rsp_demux_012_src9_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src9_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_014_src0_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_014_src0_valid),                 //          .valid
		.sink1_channel       (rsp_demux_014_src0_channel),               //          .channel
		.sink1_data          (rsp_demux_014_src0_data),                  //          .data
		.sink1_startofpacket (rsp_demux_014_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_014_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_045_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_045_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_045_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_045_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_045_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_045_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_046_src1_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_046_src1_valid),                 //          .valid
		.sink3_channel       (rsp_demux_046_src1_channel),               //          .channel
		.sink3_data          (rsp_demux_046_src1_data),                  //          .data
		.sink3_startofpacket (rsp_demux_046_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_046_src1_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_047_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_047_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_047_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_047_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_047_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_047_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_010 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                    //          .valid
		.src_data            (rsp_mux_010_src_data),                     //          .data
		.src_channel         (rsp_mux_010_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src10_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_012_src10_valid),                //          .valid
		.sink0_channel       (rsp_demux_012_src10_channel),              //          .channel
		.sink0_data          (rsp_demux_012_src10_data),                 //          .data
		.sink0_startofpacket (rsp_demux_012_src10_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src10_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_020_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_020_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_020_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_020_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_020_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_020_src1_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_024_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_024_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_024_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_024_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_024_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_024_src0_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_025_src1_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_025_src1_valid),                 //          .valid
		.sink3_channel       (rsp_demux_025_src1_channel),               //          .channel
		.sink3_data          (rsp_demux_025_src1_data),                  //          .data
		.sink3_startofpacket (rsp_demux_025_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_025_src1_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_026_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_026_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_026_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_026_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_026_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_026_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_002 rsp_mux_011 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                    //          .valid
		.src_data            (rsp_mux_011_src_data),                     //          .data
		.src_channel         (rsp_mux_011_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_012_src11_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_012_src11_valid),                //          .valid
		.sink0_channel       (rsp_demux_012_src11_channel),              //          .channel
		.sink0_data          (rsp_demux_012_src11_data),                 //          .data
		.sink0_startofpacket (rsp_demux_012_src11_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src11_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_013_src0_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_013_src0_valid),                 //          .valid
		.sink1_channel       (rsp_demux_013_src0_channel),               //          .channel
		.sink1_data          (rsp_demux_013_src0_data),                  //          .data
		.sink1_startofpacket (rsp_demux_013_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_014_src1_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_014_src1_valid),                 //          .valid
		.sink2_channel       (rsp_demux_014_src1_channel),               //          .channel
		.sink2_data          (rsp_demux_014_src1_data),                  //          .data
		.sink2_startofpacket (rsp_demux_014_src1_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_014_src1_endofpacket),           //          .endofpacket
		.sink3_ready         (rsp_demux_015_src1_ready),                 //     sink3.ready
		.sink3_valid         (rsp_demux_015_src1_valid),                 //          .valid
		.sink3_channel       (rsp_demux_015_src1_channel),               //          .channel
		.sink3_data          (rsp_demux_015_src1_data),                  //          .data
		.sink3_startofpacket (rsp_demux_015_src1_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_015_src1_endofpacket),           //          .endofpacket
		.sink4_ready         (rsp_demux_016_src0_ready),                 //     sink4.ready
		.sink4_valid         (rsp_demux_016_src0_valid),                 //          .valid
		.sink4_channel       (rsp_demux_016_src0_channel),               //          .channel
		.sink4_data          (rsp_demux_016_src0_data),                  //          .data
		.sink4_startofpacket (rsp_demux_016_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_016_src0_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_012 rsp_mux_012 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_012_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_012_src_valid),                    //          .valid
		.src_data            (rsp_mux_012_src_data),                     //          .data
		.src_channel         (rsp_mux_012_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_012_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_010_src2_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_010_src2_valid),                 //          .valid
		.sink0_channel       (rsp_demux_010_src2_channel),               //          .channel
		.sink0_data          (rsp_demux_010_src2_data),                  //          .data
		.sink0_startofpacket (rsp_demux_010_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_010_src2_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_034_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_034_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_034_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_034_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_034_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_034_src1_endofpacket)            //          .endofpacket
	);

	FTOP_MSOC_mm_interconnect_0_rsp_mux_012 rsp_mux_013 (
		.clk                 (pll_c0_clk),                               //       clk.clk
		.reset               (cpu_1a_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_013_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_013_src_valid),                    //          .valid
		.src_data            (rsp_mux_013_src_data),                     //          .data
		.src_channel         (rsp_mux_013_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_013_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_010_src3_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_010_src3_valid),                 //          .valid
		.sink1_channel       (rsp_demux_010_src3_channel),               //          .channel
		.sink1_data          (rsp_demux_010_src3_data),                  //          .data
		.sink1_startofpacket (rsp_demux_010_src3_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_010_src3_endofpacket)            //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (50),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_c0_clk),                                            //        in_clk.clk
		.in_reset          (cpu_1a_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (clock_clk_clk),                                         //       out_clk.clk
		.out_reset         (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src9_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                                //              .channel
		.in_data           (cmd_demux_src9_data),                                   //              .data
		.out_ready         (crosser_out_ready),                                     //           out.ready
		.out_valid         (crosser_out_valid),                                     //              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_out_channel),                                   //              .channel
		.out_data          (crosser_out_data),                                      //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (110),
		.BITS_PER_SYMBOL     (110),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (50),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clock_clk_clk),                                         //        in_clk.clk
		.in_reset          (pll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                            //       out_clk.clk
		.out_reset         (cpu_1a_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                              //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                            //              .channel
		.in_data           (rsp_demux_009_src0_data),                               //              .data
		.out_ready         (crosser_001_out_ready),                                 //           out.ready
		.out_valid         (crosser_001_out_valid),                                 //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_001_out_channel),                               //              .channel
		.out_data          (crosser_001_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_c0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_1a_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (sys_id_1a_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sys_id_1a_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sys_id_1a_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                   //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_1a_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qa_p1_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p1_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p1_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qa_p2_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p2_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p2_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qa_p3_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p3_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p3_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qa_p1_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p1_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p1_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qa_p2_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p2_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p2_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qa_p3_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p3_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p3_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clock_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (pll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (pll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1a_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (timer_1a_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (timer_1a_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_info_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (mem_info_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (mem_info_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qd_p3_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p3_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p3_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qc_p3_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p3_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p3_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qd_p3_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p3_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p3_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qc_p3_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p3_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p3_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qe_in_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (fifo_qe_in_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (fifo_qe_in_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qd_p1_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p1_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p1_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qe_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qe_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qe_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qd_p2_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p2_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p2_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qd_p1_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p1_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p1_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qd_p2_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p2_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p2_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qd_p3_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p3_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p3_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qd_p2_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p2_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p2_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qc_p2_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p2_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p2_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qc_p2_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p2_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p2_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qc_p2_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p2_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p2_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qb_p2_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p2_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p2_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qb_p2_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p2_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p2_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qb_p2_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p2_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p2_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qa_p2_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p2_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p2_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (pll_c0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_1f_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (pll_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (sysid_1f_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_1f_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_1f_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                  //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (pll_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_1f_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)                  //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qe_out_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (fifo_qe_out_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (fifo_qe_out_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1f_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (timer_1f_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (timer_1f_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_037 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qd_p1_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qd_p1_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qd_p1_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_037_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_037_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_037_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_037_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_038 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qc_p1_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p1_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p1_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_038_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_038_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_038_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_038_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_039 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qc_p1_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p1_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p1_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_039_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_039_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_039_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_039_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_040 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qc_p1_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p1_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p1_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_040_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_040_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_040_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_040_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_041 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qb_p1_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p1_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p1_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_041_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_041_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_041_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_041_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_042 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qb_p1_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p1_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p1_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_042_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_042_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_042_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_042_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_043 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qb_p1_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p1_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p1_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_043_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_043_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_043_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_043_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_044 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qa_p1_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p1_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p1_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_044_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_044_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_044_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_044_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_045 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qc_p3_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qc_p3_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qc_p3_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_045_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_045_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_045_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_045_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_046 (
		.in_clk_0_clk   (pll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (fifo_qb_p3_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p3_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p3_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_046_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_046_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_046_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_046_out_0_error)             //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_047 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qb_p3_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p3_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p3_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_047_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_047_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_047_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_047_out_0_error)          //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_048 (
		.in_clk_0_clk   (pll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_qb_p3_in_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qb_p3_in_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qb_p3_in_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_048_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_048_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_048_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_048_out_0_error)         //         .error
	);

	FTOP_MSOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_049 (
		.in_clk_0_clk   (pll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_1a_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fifo_qa_p3_out_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fifo_qa_p3_out_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fifo_qa_p3_out_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_049_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_049_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_049_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_049_out_0_error)          //         .error
	);

endmodule

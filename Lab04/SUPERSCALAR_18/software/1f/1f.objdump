
1f.elf:     file format elf32-littlenios2
1f.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00011b98 memsz 0x00011b98 flags r-x
    LOAD off    0x00012bb8 vaddr 0x00051bb8 paddr 0x000537b0 align 2**12
         filesz 0x00001bf8 memsz 0x00001bf8 flags rw-
    LOAD off    0x000153a8 vaddr 0x000553a8 paddr 0x000553a8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011548  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  00051778  00051778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf8  00051bb8  000537b0  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000553a8  000553a8  000153a8  2**2
                  ALLOC, SMALL_DATA
  6 .mem_info     00000000  00010000  00010000  000147b0  2**0
                  CONTENTS
  7 .oc_ram_1f    00000000  00055508  00055508  000147b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000147b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001148  00000000  00000000  000147d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b99f  00000000  00000000  00015920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ae6f  00000000  00000000  000412bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d4ff  00000000  00000000  0004c12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002a18  00000000  00000000  00059630  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042c0  00000000  00000000  0005c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018716  00000000  00000000  00060308  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00078a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a38  00000000  00000000  00078a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e0ca  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  0007e0cd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e0d3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e0d4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e0d5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e0d9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e0dd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000c  00000000  00000000  0007e0e1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000c  00000000  00000000  0007e0ed  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000c  00000000  00000000  0007e0f9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007e105  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  0007e10e  2**0
                  CONTENTS, READONLY
 30 .jdi          0003ee89  00000000  00000000  0007e130  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0039e77c  00000000  00000000  000bcfb9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00051778 l    d  .rodata	00000000 .rodata
00051bb8 l    d  .rwdata	00000000 .rwdata
000553a8 l    d  .bss	00000000 .bss
00010000 l    d  .mem_info	00000000 .mem_info
00055508 l    d  .oc_ram_1f	00000000 .oc_ram_1f
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1f_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 mem_info.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00041a84 l     F .text	00000008 __fp_unlock
00041a98 l     F .text	0000019c __sinit.part.1
00041c34 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00051c54 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00043870 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000519f6 l     O .rodata	00000010 zeroes.4404
0004609c l     F .text	000000bc __sbprintf
00051a06 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000464b8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000524a0 l     O .rwdata	00000020 lc_ctype_charset
00052480 l     O .rwdata	00000020 lc_message_charset
000524c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00051a34 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00049fc0 l     F .text	000000fc __sprint_r.part.0
00051b58 l     O .rodata	00000010 zeroes.4349
0004b5fc l     F .text	000000bc __sbprintf
00051b68 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004e50c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004e620 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004e64c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e740 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e828 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004e914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004eaf0 l     F .text	0000003c alt_get_errno
0004eb2c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004ed74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00053758 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0004efe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0004f09c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004f1d8 l     F .text	00000034 alt_dev_reg
000526a0 l     O .rwdata	00001060 jtag_uart_1f
00053700 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004f9dc l     F .text	0000020c altera_avalon_jtag_uart_irq
0004fbe8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00050220 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
0005375c l     O .rwdata	00000009 hcinfo.2538
00053768 l     O .rwdata	0000000a hcinfo.2551
00053774 l     O .rwdata	00000009 hcinfo.2560
00053780 l     O .rwdata	0000000a hcinfo.2573
0005378c l     O .rwdata	0000000a hcinfo.2586
00053798 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000508e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00051020 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000553dc g     O .bss	00000004 alt_instruction_exception_handler
00049734 g     F .text	00000074 _mprec_log10
00049820 g     F .text	0000008c __any_on
000482dc g     F .text	00000054 _isatty_r
00051a40 g     O .rodata	00000028 __mprec_tinytens
0004ea2c g     F .text	0000007c alt_main
00043c74 g     F .text	00000090 strcpy
00040684 g     F .text	00000030 setProgStatus
0004379c g     F .text	000000c0 _puts_r
00055408 g     O .bss	00000100 alt_irq
0004840c g     F .text	00000060 _lseek_r
0004f53c g     F .text	0000005c altera_avalon_fifo_write_almostfull
000537b0 g       *ABS*	00000000 __flash_rwdata_start
00047d68 g     F .text	000000ac __sflags
0004cff0 g     F .text	00000088 .hidden __eqdf2
00055508 g       *ABS*	00000000 __alt_heap_start
000435f8 g     F .text	0000003c printf
0004b99c g     F .text	0000009c _wcrtomb_r
00051c24 g     O .rwdata	0000000c qd_p1
00043b8c g     F .text	0000005c __sseek
00041de4 g     F .text	00000010 __sinit
00046158 g     F .text	00000140 __swbuf_r
00048330 g     F .text	0000007c _setlocale_r
00041c3c g     F .text	00000078 __sfmoreglue
0004eacc g     F .text	00000024 __malloc_unlock
00050314 g     F .text	0000011c alt_hostfs_open
00048698 g     F .text	0000015c memmove
0004f2b4 g     F .text	00000098 altera_avalon_fifo_init
00041dcc g     F .text	00000018 _cleanup
0004f5f4 g     F .text	00000058 altera_avalon_fifo_write_fifo
000487f4 g     F .text	000000a8 _Balloc
0004d078 g     F .text	000000dc .hidden __gtdf2
00051324 g     F .text	00000024 altera_nios2_gen2_irq_init
00051bb8 g     O .rwdata	0000000c qa_p1
00040000 g     F .entry	0000000c __reset
0004f024 g     F .text	00000078 times
0004f790 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042894 g     F .text	0000005c _fstat_r
000553a8 g     O .bss	00000004 errno
00043b08 g     F .text	00000008 __seofread
000553c8 g     O .bss	00000004 alt_argv
0005b728 g       *ABS*	00000000 _gp
0004f480 g     F .text	00000060 altera_avalon_fifo_clear_event
00052520 g     O .rwdata	00000180 alt_fd_list
0004087c g     F .text	00000040 getQualityFactor
0005054c g     F .text	00000068 alt_hostfs_seek
00050a84 g     F .text	00000090 alt_find_dev
00048550 g     F .text	00000148 memcpy
00043d9c g     F .text	00000008 _times_r
000407fc g     F .text	00000040 getWidth
00041a8c g     F .text	0000000c _cleanup_r
0004e430 g     F .text	000000dc .hidden __floatsidf
00050c1c g     F .text	00000080 alt_fs_reg
00051104 g     F .text	0000007c alt_io_redirect
0004d154 g     F .text	000000f4 .hidden __ltdf2
00051778 g       *ABS*	00000000 __DTOR_END__
0004385c g     F .text	00000014 puts
00051348 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00049e70 g     F .text	00000074 __fpclassifyd
00049690 g     F .text	000000a4 __ratio
0004b5e0 g     F .text	0000001c __vfiprintf_internal
0004fde0 g     F .text	0000021c altera_avalon_jtag_uart_read
000435c8 g     F .text	00000030 _printf_r
000415a8 g     F .text	00000064 .hidden __udivsi3
0004e77c g     F .text	000000ac isatty
00051a90 g     O .rodata	000000c8 __mprec_tens
000483ac g     F .text	0000000c __locale_charset
000553b4 g     O .bss	00000004 __malloc_top_pad
00053738 g     O .rwdata	00000004 __mb_cur_max
000483dc g     F .text	0000000c _localeconv_r
00048c28 g     F .text	0000003c __i2b
00047e14 g     F .text	000004c8 __sfvwrite_r
00051c0c g     O .rwdata	0000000c qc_p2
00043a60 g     F .text	00000054 _sbrk_r
00050474 g     F .text	0000006c alt_hostfs_read
00051c30 g     O .rwdata	0000000c qd_p2
000407bc g     F .text	00000040 getIterCount
000498ac g     F .text	00000060 _read_r
00040628 g     F .text	00000020 close_queues
00053750 g     O .rwdata	00000004 alt_max_fd
000416d8 g     F .text	000000f0 _fclose_r
00041a54 g     F .text	00000030 fflush
000553b0 g     O .bss	00000004 __malloc_max_sbrked_mem
0004c744 g     F .text	000008ac .hidden __adddf3
00049438 g     F .text	0000010c __b2d
0004c180 g     F .text	000005c4 .hidden __umoddi3
0004e950 g     F .text	000000dc lseek
00053728 g     O .rwdata	00000004 _global_impure_ptr
0004990c g     F .text	00000564 _realloc_r
00055508 g       *ABS*	00000000 __bss_end
00050f30 g     F .text	000000f0 alt_iic_isr_register
0005121c g     F .text	00000108 alt_tick
0004bb84 g     F .text	000005fc .hidden __udivdi3
0004b8f8 g     F .text	00000024 _fputwc_r
00051a68 g     O .rodata	00000028 __mprec_bigtens
00048a0c g     F .text	00000104 __s2b
000413a4 g     F .text	000000a8 .hidden __floatunsidf
00049178 g     F .text	00000060 __mcmp
00041e04 g     F .text	00000018 __fp_lock_all
00050ee4 g     F .text	0000004c alt_ic_irq_enabled
00051180 g     F .text	0000009c alt_alarm_stop
00051c18 g     O .rwdata	0000000c qc_p3
000553d0 g     O .bss	00000004 alt_irq_active
00042434 g     F .text	00000444 _fseeko_r
000408bc g     F .text	00000040 getImageFormat
00050430 g     F .text	00000044 alt_hostfs_close
000400fc g     F .exceptions	000000d4 alt_irq_handler
000524f8 g     O .rwdata	00000028 alt_dev_null
000508c4 g     F .text	00000020 alt_dcache_flush_all
00048b10 g     F .text	00000068 __hi0bits
0004e3b0 g     F .text	00000080 .hidden __fixdfsi
0004f4e0 g     F .text	0000005c altera_avalon_fifo_write_ienable
000537b0 g       *ABS*	00000000 __ram_rwdata_end
0004f3f0 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00053748 g     O .rwdata	00000008 alt_dev_list
00041f40 g     F .text	00000044 _fputc_r
0004f0d8 g     F .text	00000100 write
00043634 g     F .text	000000a0 _putc_r
00051bb8 g       *ABS*	00000000 __ram_rodata_end
0004e688 g     F .text	000000b8 fstat
00040780 g     F .text	0000003c getFileName
0004d154 g     F .text	000000f4 .hidden __ledf2
00043bf0 g     F .text	00000084 strcat
00040648 g     F .text	0000003c RECV2
00048ef0 g     F .text	00000140 __pow5mult
0004a0d4 g     F .text	0000150c ___vfiprintf_internal_r
000553c0 g     O .bss	00000004 __nlocale_changed
0004160c g     F .text	00000058 .hidden __umodsi3
00055508 g       *ABS*	00000000 end
00042878 g     F .text	0000001c fseeko
00042418 g     F .text	0000001c fseek
0004f91c g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0004f41c g     F .text	0000003c altera_avalon_fifo_read_event
00051778 g       *ABS*	00000000 __CTOR_LIST__
00059000 g       *ABS*	00000000 __alt_stack_pointer
00050298 g     F .text	0000007c alt_avalon_timer_sc_init
0004144c g     F .text	00000064 .hidden __clzsi2
0004fffc g     F .text	00000224 altera_avalon_jtag_uart_write
00041df4 g     F .text	00000004 __sfp_lock_acquire
0004f6b8 g     F .text	0000004c altera_avalon_fifo_read_fifo
0004846c g     F .text	000000e4 memchr
00043da4 g     F .text	000022dc ___vfprintf_internal_r
00042104 g     F .text	00000310 _free_r
000483b8 g     F .text	00000010 __locale_mb_cur_max
000515c4 g     F .text	00000180 __call_exitprocs
00051c00 g     O .rwdata	0000000c qc_p1
000553bc g     O .bss	00000004 __mlocale_changed
00053730 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
000553d4 g     O .bss	00000004 _alt_tick_rate
00051bc4 g     O .rwdata	0000000c qa_p2
00049030 g     F .text	00000148 __lshift
000408fc g     F .text	00000070 enqueueINT32
000553d8 g     O .bss	00000004 _alt_nticks
0004edb0 g     F .text	00000104 read
0004f244 g     F .text	00000070 alt_sys_init
00051c48 g     O .rwdata	0000000c qe
00043568 g     F .text	00000060 _open_r
000514ac g     F .text	00000118 __register_exitproc
00040700 g     F .text	00000080 setMemInfo
000406b4 g     F .text	00000024 getProgStatus
00048c64 g     F .text	0000028c __multiply
0004fc88 g     F .text	00000068 altera_avalon_jtag_uart_close
00040000 g       *ABS*	00000000 __alt_mem_oc_ram_1f
00041664 g     F .text	00000028 .hidden __mulsi3
00051bb8 g       *ABS*	00000000 __ram_rwdata_start
00051778 g       *ABS*	00000000 __ram_rodata_start
000553e0 g     O .bss	00000028 __malloc_current_mallinfo
00049544 g     F .text	0000014c __d2b
0004f7b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050c9c g     F .text	000000c4 alt_get_fd
00046464 g     F .text	00000054 _close_r
00051430 g     F .text	0000007c memcmp
0004f878 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00055508 g       *ABS*	00000000 __alt_stack_base
0004f8c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00046310 g     F .text	00000154 __swsetup_r
0004f34c g     F .text	0000003c altera_avalon_fifo_read_status
000409d4 g     F .text	000009d0 .hidden __divdf3
00041cb4 g     F .text	00000118 __sfp
000497a8 g     F .text	00000078 __copybits
00052078 g     O .rwdata	00000408 __malloc_av_
00041e00 g     F .text	00000004 __sinit_lock_release
0004d248 g     F .text	0000086c .hidden __muldf3
00043ab4 g     F .text	00000054 __sread
0004f764 g     F .text	0000002c altera_avalon_fifo_read_other_info
00050b14 g     F .text	00000108 alt_find_file
00050920 g     F .text	000000a4 alt_dev_llist_insert
0004eaa8 g     F .text	00000024 __malloc_lock
0004ef38 g     F .text	000000b0 sbrk
000419f8 g     F .text	0000005c _fflush_r
0004b6b8 g     F .text	000000dc _calloc_r
00040608 g     F .text	00000020 init_queues
00041f28 g     F .text	00000018 fopen
000553a8 g       *ABS*	00000000 __bss_start
00043440 g     F .text	00000128 memset
0004026c g     F .text	0000039c main
000553cc g     O .bss	00000004 alt_envp
000553ac g     O .bss	00000004 __malloc_max_total_mem
0004f818 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004f458 g     F .text	00000028 altera_avalon_fifo_read_level
00046298 g     F .text	00000018 __swbuf
00051bf4 g     O .rwdata	0000000c qb_p3
00043be8 g     F .text	00000008 __sclose
00059000 g       *ABS*	00000000 __alt_heap_limit
000417c8 g     F .text	00000014 fclose
000466e0 g     F .text	00001688 _dtoa_r
00042c34 g     F .text	0000080c _malloc_r
0004baf8 g     F .text	00000030 __ascii_wctomb
00053754 g     O .rwdata	00000004 alt_errno
000428f0 g     F .text	000000c4 _fwalk
000436d4 g     F .text	000000c8 putc
000414b0 g     F .text	00000084 .hidden __divsi3
00041fe0 g     F .text	00000124 _malloc_trim_r
00051778 g       *ABS*	00000000 __CTOR_END__
00049ee4 g     F .text	000000dc strcmp
00051778 g       *ABS*	00000000 __flash_rodata_start
00051778 g       *ABS*	00000000 __DTOR_LIST__
0004cff0 g     F .text	00000088 .hidden __nedf2
0004f20c g     F .text	00000038 alt_irq_init
0004eeb4 g     F .text	00000084 alt_release_fd
000518ac g     O .rodata	00000100 .hidden __clz_tab
000553b8 g     O .bss	00000004 _PathLocale
000513e4 g     F .text	00000014 atexit
000462b0 g     F .text	00000060 _write_r
000483e8 g     F .text	00000018 setlocale
0005372c g     O .rwdata	00000004 _impure_ptr
000553c4 g     O .bss	00000004 alt_argc
000417dc g     F .text	0000021c __sflush_r
00050a24 g     F .text	00000060 _do_dtors
000483d4 g     F .text	00000008 __locale_cjk_lang
00042414 g     F .text	00000004 _fseek_r
0004388c g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
000493d4 g     F .text	00000064 __ulp
00041e1c g     F .text	00000018 __fp_unlock_all
00041f84 g     F .text	0000005c fputc
00053740 g     O .rwdata	00000008 alt_fs_list
000504e0 g     F .text	0000006c alt_hostfs_write
00051bdc g     O .rwdata	0000000c qb_p1
00051bd0 g     O .rwdata	0000000c qa_p3
00010000 g       *ABS*	00000000 __alt_mem_mem_info
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048400 g     F .text	0000000c localeconv
00051c3c g     O .rwdata	0000000c qd_p3
0004f704 g     F .text	00000060 altera_avalon_fifo_write_other_info
00050d80 g     F .text	00000050 alt_ic_isr_register
000537b0 g       *ABS*	00000000 _edata
00055508 g       *ABS*	00000000 _end
0004b794 g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
0004fcf0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00050e58 g     F .text	0000008c alt_ic_irq_disable
00043b10 g     F .text	0000007c __swrite
00053734 g     O .rwdata	00000004 __malloc_trim_threshold
000483c8 g     F .text	0000000c __locale_msgcharset
000513f8 g     F .text	00000038 exit
000429b4 g     F .text	000000c4 _fwalk_reent
000491d8 g     F .text	000001fc __mdiff
00041534 g     F .text	00000074 .hidden __modsi3
0004f388 g     F .text	0000003c altera_avalon_fifo_read_ienable
00059000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00041df8 g     F .text	00000004 __sfp_lock_release
00051be8 g     O .rwdata	0000000c qb_p2
00041e34 g     F .text	000000f4 _fopen_r
00051744 g     F .text	00000034 _exit
00050798 g     F .text	0000012c alt_alarm_start
0004f3c4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00042a78 g     F .text	000001bc __smakebuf_r
00043d04 g     F .text	00000098 strlen
0004ec18 g     F .text	0000015c open
0004f64c g     F .text	0000006c altera_avalon_read_fifo
0004d078 g     F .text	000000dc .hidden __gedf2
000406d8 g     F .text	00000028 setFileName
0004168c g     F .text	0000004c clock
0004096c g     F .text	00000068 dequeueINT32
0005373c g     O .rwdata	00000004 __wctomb
0004a0bc g     F .text	00000018 __sprint_r
00050d60 g     F .text	00000020 alt_icache_flush_all
000537a4 g     O .rwdata	00000004 alt_priority_mask
00050dd0 g     F .text	00000088 alt_ic_irq_enable
0004083c g     F .text	00000040 getHeight
00046080 g     F .text	0000001c __vfprintf_internal
0004bb28 g     F .text	0000005c _wctomb_r
0004dab4 g     F .text	000008fc .hidden __subdf3
00048b78 g     F .text	000000b0 __lo0bits
0004f598 g     F .text	0000005c altera_avalon_fifo_write_almostempty
000537a8 g     O .rwdata	00000008 alt_alarm_list
000509c4 g     F .text	00000060 _do_ctors
0004ba38 g     F .text	000000c0 wcrtomb
0004e548 g     F .text	000000d8 close
0004e890 g     F .text	00000084 alt_load
0004b91c g     F .text	00000080 fputwc
00041dfc g     F .text	00000004 __sinit_lock_acquire
000488c4 g     F .text	00000148 __multadd
0004889c g     F .text	00000028 _Bfree
000505b4 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10950204 	addi	r2,r2,21512
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10950204 	addi	r2,r2,21512
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <_gp+0xfffe4a04>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <_gp+0xfffe49f8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a72d17 	ldw	r2,-25420(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a72d17 	ldw	r2,-25420(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6adca14 	ori	gp,gp,46888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	1094ea14 	ori	r2,r2,21416

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18d54214 	ori	r3,r3,21768

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <_gp+0xfffe4b2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	004e8900 	call	4e890 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	004ea2c0 	call	4ea2c <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <_gp+0xfffe4b40>

0004026c <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main()
{
   4026c:	deffb104 	addi	sp,sp,-316
   40270:	dfc04e15 	stw	ra,312(sp)
   40274:	df004d15 	stw	fp,308(sp)
   40278:	ddc04c15 	stw	r23,304(sp)
   4027c:	dd804b15 	stw	r22,300(sp)
   40280:	dd404a15 	stw	r21,296(sp)
   40284:	dd004915 	stw	r20,292(sp)
   40288:	dcc04815 	stw	r19,288(sp)
   4028c:	dc804715 	stw	r18,284(sp)
   40290:	dc404615 	stw	r17,280(sp)
   40294:	dc004515 	stw	r16,276(sp)
   40298:	df004d04 	addi	fp,sp,308
	char file_system[80] = "/mnt/host/files/";
   4029c:	009d1bb4 	movhi	r2,29806
   402a0:	109b4bc4 	addi	r2,r2,27951
   402a4:	e0bfbd15 	stw	r2,-268(fp)
   402a8:	009cdbf4 	movhi	r2,29551
   402ac:	109a0bc4 	addi	r2,r2,26671
   402b0:	e0bfbe15 	stw	r2,-264(fp)
   402b4:	009a59b4 	movhi	r2,26982
   402b8:	108bdd04 	addi	r2,r2,12148
   402bc:	e0bfbf15 	stw	r2,-260(fp)
   402c0:	008bdcf4 	movhi	r2,12147
   402c4:	10995b04 	addi	r2,r2,25964
   402c8:	e0bfc015 	stw	r2,-256(fp)
   402cc:	e03fc115 	stw	zero,-252(fp)
   402d0:	e0bfc204 	addi	r2,fp,-248
   402d4:	00c00f04 	movi	r3,60
   402d8:	180d883a 	mov	r6,r3
   402dc:	000b883a 	mov	r5,zero
   402e0:	1009883a 	mov	r4,r2
   402e4:	00434400 	call	43440 <memset>
	FILE *fptr;
	UINT8 out;
	// char filename[150];

	// ! Software implementation
	init_queues();
   402e8:	00406080 	call	40608 <init_queues>

	printf("Final Stage of Superscalar JPEG Encoder\n");
   402ec:	01000174 	movhi	r4,5
   402f0:	2105de04 	addi	r4,r4,6008
   402f4:	004385c0 	call	4385c <puts>

	// Wait for start stage
	while (getProgStatus() != 1)
   402f8:	0001883a 	nop
   402fc:	00406b40 	call	406b4 <getProgStatus>
   40300:	10800058 	cmpnei	r2,r2,1
   40304:	103ffd1e 	bne	r2,zero,402fc <_gp+0xfffe4bd4>
		;

	printf("Start singnal received from First Stage\n");
   40308:	01000174 	movhi	r4,5
   4030c:	2105e804 	addi	r4,r4,6048
   40310:	004385c0 	call	4385c <puts>

	// Read filename from memory
	int length = (int)IORD_32DIRECT(MF_BASE, FILE_NAME_LEN);
   40314:	00800074 	movhi	r2,1
   40318:	10800604 	addi	r2,r2,24
   4031c:	10800037 	ldwio	r2,0(r2)
   40320:	e0bfb415 	stw	r2,-304(fp)
	char filename_mem[length+1];
   40324:	e0bfb417 	ldw	r2,-304(fp)
   40328:	10800044 	addi	r2,r2,1
   4032c:	d807883a 	mov	r3,sp
   40330:	e0fff715 	stw	r3,-36(fp)
   40334:	10ffffc4 	addi	r3,r2,-1
   40338:	e0ffb515 	stw	r3,-300(fp)
   4033c:	1007883a 	mov	r3,r2
   40340:	182d883a 	mov	r22,r3
   40344:	002f883a 	mov	r23,zero
   40348:	b006d77a 	srli	r3,r22,29
   4034c:	b82690fa 	slli	r19,r23,3
   40350:	1ce6b03a 	or	r19,r3,r19
   40354:	b02490fa 	slli	r18,r22,3
   40358:	1007883a 	mov	r3,r2
   4035c:	1829883a 	mov	r20,r3
   40360:	002b883a 	mov	r21,zero
   40364:	a006d77a 	srli	r3,r20,29
   40368:	a82290fa 	slli	r17,r21,3
   4036c:	1c62b03a 	or	r17,r3,r17
   40370:	a02090fa 	slli	r16,r20,3
   40374:	108000c4 	addi	r2,r2,3
   40378:	1004d0ba 	srli	r2,r2,2
   4037c:	1085883a 	add	r2,r2,r2
   40380:	1085883a 	add	r2,r2,r2
   40384:	d8b7c83a 	sub	sp,sp,r2
   40388:	d805883a 	mov	r2,sp
   4038c:	1005883a 	mov	r2,r2
   40390:	e0bfb615 	stw	r2,-296(fp)
	for (int i = 0; i < length; i++)
   40394:	e03fb315 	stw	zero,-308(fp)
   40398:	00000f06 	br	403d8 <main+0x16c>
	{
		filename_mem[i] = (char)IORD_8DIRECT(MF_BASE, FILE_NAME + i);
   4039c:	e0bfb317 	ldw	r2,-308(fp)
   403a0:	10800704 	addi	r2,r2,28
   403a4:	1007883a 	mov	r3,r2
   403a8:	00800074 	movhi	r2,1
   403ac:	1885883a 	add	r2,r3,r2
   403b0:	10800023 	ldbuio	r2,0(r2)
   403b4:	10803fcc 	andi	r2,r2,255
   403b8:	1009883a 	mov	r4,r2
   403bc:	e0ffb617 	ldw	r3,-296(fp)
   403c0:	e0bfb317 	ldw	r2,-308(fp)
   403c4:	1885883a 	add	r2,r3,r2
   403c8:	11000005 	stb	r4,0(r2)
	printf("Start singnal received from First Stage\n");

	// Read filename from memory
	int length = (int)IORD_32DIRECT(MF_BASE, FILE_NAME_LEN);
	char filename_mem[length+1];
	for (int i = 0; i < length; i++)
   403cc:	e0bfb317 	ldw	r2,-308(fp)
   403d0:	10800044 	addi	r2,r2,1
   403d4:	e0bfb315 	stw	r2,-308(fp)
   403d8:	e0ffb317 	ldw	r3,-308(fp)
   403dc:	e0bfb417 	ldw	r2,-304(fp)
   403e0:	18bfee16 	blt	r3,r2,4039c <_gp+0xfffe4c74>
	{
		filename_mem[i] = (char)IORD_8DIRECT(MF_BASE, FILE_NAME + i);
	}
	filename_mem[length] = '\0';
   403e4:	e0ffb617 	ldw	r3,-296(fp)
   403e8:	e0bfb417 	ldw	r2,-304(fp)
   403ec:	1885883a 	add	r2,r3,r2
   403f0:	10000005 	stb	zero,0(r2)

	strcat(filename_mem, ".jpg");
   403f4:	e43fb617 	ldw	r16,-296(fp)
   403f8:	8009883a 	mov	r4,r16
   403fc:	0043d040 	call	43d04 <strlen>
   40400:	8085883a 	add	r2,r16,r2
   40404:	00c00b84 	movi	r3,46
   40408:	10c00005 	stb	r3,0(r2)
   4040c:	00c01a84 	movi	r3,106
   40410:	10c00045 	stb	r3,1(r2)
   40414:	00c01c04 	movi	r3,112
   40418:	10c00085 	stb	r3,2(r2)
   4041c:	00c019c4 	movi	r3,103
   40420:	10c000c5 	stb	r3,3(r2)
   40424:	10000105 	stb	zero,4(r2)
	printf("\nOutput Filename: %s\n", filename_mem);
   40428:	e0bfb617 	ldw	r2,-296(fp)
   4042c:	100b883a 	mov	r5,r2
   40430:	01000174 	movhi	r4,5
   40434:	2105f204 	addi	r4,r4,6088
   40438:	00435f80 	call	435f8 <printf>

	// append file_system to filename
	char input_file_full[150];
	strcpy(input_file_full, file_system);
   4043c:	e0ffbd04 	addi	r3,fp,-268
   40440:	e0bfd104 	addi	r2,fp,-188
   40444:	180b883a 	mov	r5,r3
   40448:	1009883a 	mov	r4,r2
   4044c:	0043c740 	call	43c74 <strcpy>
	strcat(input_file_full, filename_mem);
   40450:	e0ffb617 	ldw	r3,-296(fp)
   40454:	e0bfd104 	addi	r2,fp,-188
   40458:	180b883a 	mov	r5,r3
   4045c:	1009883a 	mov	r4,r2
   40460:	0043bf00 	call	43bf0 <strcat>

	printf("Output file path: %s\n", input_file_full);
   40464:	e0bfd104 	addi	r2,fp,-188
   40468:	100b883a 	mov	r5,r2
   4046c:	01000174 	movhi	r4,5
   40470:	2105f804 	addi	r4,r4,6112
   40474:	00435f80 	call	435f8 <printf>

	fptr = fopen(input_file_full, "wb");
   40478:	e0bfd104 	addi	r2,fp,-188
   4047c:	01400174 	movhi	r5,5
   40480:	2945fe04 	addi	r5,r5,6136
   40484:	1009883a 	mov	r4,r2
   40488:	0041f280 	call	41f28 <fopen>
   4048c:	e0bfb715 	stw	r2,-292(fp)

	if (fptr == NULL)
   40490:	e0bfb717 	ldw	r2,-292(fp)
   40494:	1000051e 	bne	r2,zero,404ac <main+0x240>
	{
		printf("Save File Open Error!\n");
   40498:	01000174 	movhi	r4,5
   4049c:	2105ff04 	addi	r4,r4,6140
   404a0:	004385c0 	call	4385c <puts>
		return 0;
   404a4:	0005883a 	mov	r2,zero
   404a8:	00004906 	br	405d0 <main+0x364>
	}

	clock_t start, end;
	double cpu_time_used;

	start = clock();
   404ac:	004168c0 	call	4168c <clock>
   404b0:	e0bfb815 	stw	r2,-288(fp)
	while (1)
	{

		out = (UINT8)RECV2();
   404b4:	00406480 	call	40648 <RECV2>
   404b8:	e0bfb905 	stb	r2,-284(fp)

		fputc(out, fptr);
   404bc:	e0bfb903 	ldbu	r2,-284(fp)
   404c0:	e17fb717 	ldw	r5,-292(fp)
   404c4:	1009883a 	mov	r4,r2
   404c8:	0041f840 	call	41f84 <fputc>
		if (out == 0xFF)
   404cc:	e0bfb903 	ldbu	r2,-284(fp)
   404d0:	10803fd8 	cmpnei	r2,r2,255
   404d4:	103ff71e 	bne	r2,zero,404b4 <_gp+0xfffe4d8c>
		{
			out = (UINT8)RECV2();
   404d8:	00406480 	call	40648 <RECV2>
   404dc:	e0bfb905 	stb	r2,-284(fp)
			fputc(out, fptr);
   404e0:	e0bfb903 	ldbu	r2,-284(fp)
   404e4:	e17fb717 	ldw	r5,-292(fp)
   404e8:	1009883a 	mov	r4,r2
   404ec:	0041f840 	call	41f84 <fputc>

			if (out == 0xD9)
   404f0:	e0bfb903 	ldbu	r2,-284(fp)
   404f4:	10803658 	cmpnei	r2,r2,217
   404f8:	10000126 	beq	r2,zero,40500 <main+0x294>
				break;
		}
	}
   404fc:	003fed06 	br	404b4 <_gp+0xfffe4d8c>
		{
			out = (UINT8)RECV2();
			fputc(out, fptr);

			if (out == 0xD9)
				break;
   40500:	0001883a 	nop
		}
	}
	end = clock();
   40504:	004168c0 	call	4168c <clock>
   40508:	e0bfba15 	stw	r2,-280(fp)

	fclose(fptr);
   4050c:	e13fb717 	ldw	r4,-292(fp)
   40510:	00417c80 	call	417c8 <fclose>
	printf("\nJPEG conversion complete!\n");
   40514:	01000174 	movhi	r4,5
   40518:	21060504 	addi	r4,r4,6164
   4051c:	004385c0 	call	4385c <puts>

	cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
   40520:	e0ffba17 	ldw	r3,-280(fp)
   40524:	e0bfb817 	ldw	r2,-288(fp)
   40528:	1885c83a 	sub	r2,r3,r2
   4052c:	1009883a 	mov	r4,r2
   40530:	00413a40 	call	413a4 <__floatunsidf>
   40534:	1011883a 	mov	r8,r2
   40538:	1813883a 	mov	r9,r3
   4053c:	000d883a 	mov	r6,zero
   40540:	01d023f4 	movhi	r7,16527
   40544:	39d00004 	addi	r7,r7,16384
   40548:	4009883a 	mov	r4,r8
   4054c:	480b883a 	mov	r5,r9
   40550:	00409d40 	call	409d4 <__divdf3>
   40554:	1009883a 	mov	r4,r2
   40558:	180b883a 	mov	r5,r3
   4055c:	e13fbb15 	stw	r4,-276(fp)
   40560:	e17fbc15 	stw	r5,-272(fp)

	printf("Quality Factor: %d\n", getQualityFactor());
   40564:	004087c0 	call	4087c <getQualityFactor>
   40568:	100b883a 	mov	r5,r2
   4056c:	01000174 	movhi	r4,5
   40570:	21060c04 	addi	r4,r4,6192
   40574:	00435f80 	call	435f8 <printf>
	printf("Image Format: %d\n", getImageFormat());
   40578:	00408bc0 	call	408bc <getImageFormat>
   4057c:	100b883a 	mov	r5,r2
   40580:	01000174 	movhi	r4,5
   40584:	21061104 	addi	r4,r4,6212
   40588:	00435f80 	call	435f8 <printf>
	printf("Image Width: %d\n", getWidth());
   4058c:	00407fc0 	call	407fc <getWidth>
   40590:	100b883a 	mov	r5,r2
   40594:	01000174 	movhi	r4,5
   40598:	21061604 	addi	r4,r4,6232
   4059c:	00435f80 	call	435f8 <printf>
	printf("Image Height: %d\n", getHeight());
   405a0:	004083c0 	call	4083c <getHeight>
   405a4:	100b883a 	mov	r5,r2
   405a8:	01000174 	movhi	r4,5
   405ac:	21061b04 	addi	r4,r4,6252
   405b0:	00435f80 	call	435f8 <printf>
	printf("Time taken for conversion process: %f sec.\n", cpu_time_used);
   405b4:	e17fbb17 	ldw	r5,-276(fp)
   405b8:	e1bfbc17 	ldw	r6,-272(fp)
   405bc:	01000174 	movhi	r4,5
   405c0:	21062004 	addi	r4,r4,6272
   405c4:	00435f80 	call	435f8 <printf>

	// ! Software implementation
	close_queues();
   405c8:	00406280 	call	40628 <close_queues>

	return 0;
   405cc:	0005883a 	mov	r2,zero
   405d0:	e6fff717 	ldw	sp,-36(fp)
}
   405d4:	e6fff804 	addi	sp,fp,-32
   405d8:	dfc00917 	ldw	ra,36(sp)
   405dc:	df000817 	ldw	fp,32(sp)
   405e0:	ddc00717 	ldw	r23,28(sp)
   405e4:	dd800617 	ldw	r22,24(sp)
   405e8:	dd400517 	ldw	r21,20(sp)
   405ec:	dd000417 	ldw	r20,16(sp)
   405f0:	dcc00317 	ldw	r19,12(sp)
   405f4:	dc800217 	ldw	r18,8(sp)
   405f8:	dc400117 	ldw	r17,4(sp)
   405fc:	dc000017 	ldw	r16,0(sp)
   40600:	dec00a04 	addi	sp,sp,40
   40604:	f800283a 	ret

00040608 <init_queues>:

// Queue *qa_fn;
// Queue *qe;

void init_queues()
{
   40608:	deffff04 	addi	sp,sp,-4
   4060c:	df000015 	stw	fp,0(sp)
   40610:	d839883a 	mov	fp,sp
    // qa_fn = InitQueue("qa_fn", 'd');
    // qe = InitQueue("qe", 'd');
}
   40614:	0001883a 	nop
   40618:	e037883a 	mov	sp,fp
   4061c:	df000017 	ldw	fp,0(sp)
   40620:	dec00104 	addi	sp,sp,4
   40624:	f800283a 	ret

00040628 <close_queues>:

void close_queues()
{
   40628:	deffff04 	addi	sp,sp,-4
   4062c:	df000015 	stw	fp,0(sp)
   40630:	d839883a 	mov	fp,sp
    // CloseQueue(qa_fn);
    // CloseQueue(qe);
}
   40634:	0001883a 	nop
   40638:	e037883a 	mov	sp,fp
   4063c:	df000017 	ldw	fp,0(sp)
   40640:	dec00104 	addi	sp,sp,4
   40644:	f800283a 	ret

00040648 <RECV2>:
// {
//     return dequeueINT32(qa_fn);
// }

int RECV2()
{
   40648:	defffe04 	addi	sp,sp,-8
   4064c:	dfc00115 	stw	ra,4(sp)
   40650:	df000015 	stw	fp,0(sp)
   40654:	d839883a 	mov	fp,sp
    return dequeueINT32(qe);
   40658:	00800174 	movhi	r2,5
   4065c:	10871204 	addi	r2,r2,7240
   40660:	11000017 	ldw	r4,0(r2)
   40664:	11400117 	ldw	r5,4(r2)
   40668:	11800217 	ldw	r6,8(r2)
   4066c:	004096c0 	call	4096c <dequeueINT32>
   40670:	e037883a 	mov	sp,fp
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	df000017 	ldw	fp,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
   40680:	f800283a 	ret

00040684 <setProgStatus>:
// TODO: Correctly include this lib
#include <io.h>
// #include <stdio.h>


void setProgStatus(int status){
   40684:	defffe04 	addi	sp,sp,-8
   40688:	df000115 	stw	fp,4(sp)
   4068c:	df000104 	addi	fp,sp,4
   40690:	e13fff15 	stw	r4,-4(fp)
    // write to memory
    IOWR_32DIRECT(MF_BASE, PROG_STATUS, status);
   40694:	00800074 	movhi	r2,1
   40698:	e0ffff17 	ldw	r3,-4(fp)
   4069c:	10c00035 	stwio	r3,0(r2)
}
   406a0:	0001883a 	nop
   406a4:	e037883a 	mov	sp,fp
   406a8:	df000017 	ldw	fp,0(sp)
   406ac:	dec00104 	addi	sp,sp,4
   406b0:	f800283a 	ret

000406b4 <getProgStatus>:

int getProgStatus(){
   406b4:	deffff04 	addi	sp,sp,-4
   406b8:	df000015 	stw	fp,0(sp)
   406bc:	d839883a 	mov	fp,sp
    return (int)IORD_32DIRECT(MF_BASE, PROG_STATUS);
   406c0:	00800074 	movhi	r2,1
   406c4:	10800037 	ldwio	r2,0(r2)
}
   406c8:	e037883a 	mov	sp,fp
   406cc:	df000017 	ldw	fp,0(sp)
   406d0:	dec00104 	addi	sp,sp,4
   406d4:	f800283a 	ret

000406d8 <setFileName>:

void setFileName(int length, char *fileName){
   406d8:	defffd04 	addi	sp,sp,-12
   406dc:	df000215 	stw	fp,8(sp)
   406e0:	df000204 	addi	fp,sp,8
   406e4:	e13ffe15 	stw	r4,-8(fp)
   406e8:	e17fff15 	stw	r5,-4(fp)

}
   406ec:	0001883a 	nop
   406f0:	e037883a 	mov	sp,fp
   406f4:	df000017 	ldw	fp,0(sp)
   406f8:	dec00104 	addi	sp,sp,4
   406fc:	f800283a 	ret

00040700 <setMemInfo>:

void setMemInfo(int iterCount, int width, int height, int qualityFactor, int imageFormat){
   40700:	defffb04 	addi	sp,sp,-20
   40704:	df000415 	stw	fp,16(sp)
   40708:	df000404 	addi	fp,sp,16
   4070c:	e13ffc15 	stw	r4,-16(fp)
   40710:	e17ffd15 	stw	r5,-12(fp)
   40714:	e1bffe15 	stw	r6,-8(fp)
   40718:	e1ffff15 	stw	r7,-4(fp)
    // write to memory
    IOWR_32DIRECT(MF_BASE, ITER_COUNT, iterCount);
   4071c:	00800074 	movhi	r2,1
   40720:	10800104 	addi	r2,r2,4
   40724:	e0fffc17 	ldw	r3,-16(fp)
   40728:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(MF_BASE, WIDTH, width);
   4072c:	00800074 	movhi	r2,1
   40730:	10800204 	addi	r2,r2,8
   40734:	e0fffd17 	ldw	r3,-12(fp)
   40738:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(MF_BASE, HEIGHT, height);
   4073c:	00800074 	movhi	r2,1
   40740:	10800304 	addi	r2,r2,12
   40744:	e0fffe17 	ldw	r3,-8(fp)
   40748:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(MF_BASE, QUALITY_FACTOR, qualityFactor);
   4074c:	00800074 	movhi	r2,1
   40750:	10800404 	addi	r2,r2,16
   40754:	e0ffff17 	ldw	r3,-4(fp)
   40758:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(MF_BASE, IMAGE_FORMAT, imageFormat);
   4075c:	00800074 	movhi	r2,1
   40760:	10800504 	addi	r2,r2,20
   40764:	e0c00117 	ldw	r3,4(fp)
   40768:	10c00035 	stwio	r3,0(r2)
}
   4076c:	0001883a 	nop
   40770:	e037883a 	mov	sp,fp
   40774:	df000017 	ldw	fp,0(sp)
   40778:	dec00104 	addi	sp,sp,4
   4077c:	f800283a 	ret

00040780 <getFileName>:

int getFileName(char *fileptr){
   40780:	defffd04 	addi	sp,sp,-12
   40784:	dfc00215 	stw	ra,8(sp)
   40788:	df000115 	stw	fp,4(sp)
   4078c:	df000104 	addi	fp,sp,4
   40790:	e13fff15 	stw	r4,-4(fp)
    while (getProgStatus() != 1);
   40794:	0001883a 	nop
   40798:	00406b40 	call	406b4 <getProgStatus>
   4079c:	10800058 	cmpnei	r2,r2,1
   407a0:	103ffd1e 	bne	r2,zero,40798 <_gp+0xfffe5070>
    return 0;
   407a4:	0005883a 	mov	r2,zero
    //     // putchar(fileName[i]);
    // }
    // strcpy(fileptr, filename);
    // // putchar('\n');
    // return length;
}
   407a8:	e037883a 	mov	sp,fp
   407ac:	dfc00117 	ldw	ra,4(sp)
   407b0:	df000017 	ldw	fp,0(sp)
   407b4:	dec00204 	addi	sp,sp,8
   407b8:	f800283a 	ret

000407bc <getIterCount>:


int getIterCount(){
   407bc:	defffe04 	addi	sp,sp,-8
   407c0:	dfc00115 	stw	ra,4(sp)
   407c4:	df000015 	stw	fp,0(sp)
   407c8:	d839883a 	mov	fp,sp
    while (getProgStatus() != 1);
   407cc:	0001883a 	nop
   407d0:	00406b40 	call	406b4 <getProgStatus>
   407d4:	10800058 	cmpnei	r2,r2,1
   407d8:	103ffd1e 	bne	r2,zero,407d0 <_gp+0xfffe50a8>

    return (int)IORD_32DIRECT(MF_BASE, ITER_COUNT);
   407dc:	00800074 	movhi	r2,1
   407e0:	10800104 	addi	r2,r2,4
   407e4:	10800037 	ldwio	r2,0(r2)
}
   407e8:	e037883a 	mov	sp,fp
   407ec:	dfc00117 	ldw	ra,4(sp)
   407f0:	df000017 	ldw	fp,0(sp)
   407f4:	dec00204 	addi	sp,sp,8
   407f8:	f800283a 	ret

000407fc <getWidth>:

int getWidth(){
   407fc:	defffe04 	addi	sp,sp,-8
   40800:	dfc00115 	stw	ra,4(sp)
   40804:	df000015 	stw	fp,0(sp)
   40808:	d839883a 	mov	fp,sp
    while (getProgStatus() != 1);
   4080c:	0001883a 	nop
   40810:	00406b40 	call	406b4 <getProgStatus>
   40814:	10800058 	cmpnei	r2,r2,1
   40818:	103ffd1e 	bne	r2,zero,40810 <_gp+0xfffe50e8>

    return (int)IORD_32DIRECT(MF_BASE, WIDTH);
   4081c:	00800074 	movhi	r2,1
   40820:	10800204 	addi	r2,r2,8
   40824:	10800037 	ldwio	r2,0(r2)
}
   40828:	e037883a 	mov	sp,fp
   4082c:	dfc00117 	ldw	ra,4(sp)
   40830:	df000017 	ldw	fp,0(sp)
   40834:	dec00204 	addi	sp,sp,8
   40838:	f800283a 	ret

0004083c <getHeight>:

int getHeight(){
   4083c:	defffe04 	addi	sp,sp,-8
   40840:	dfc00115 	stw	ra,4(sp)
   40844:	df000015 	stw	fp,0(sp)
   40848:	d839883a 	mov	fp,sp
    while (getProgStatus() != 1);
   4084c:	0001883a 	nop
   40850:	00406b40 	call	406b4 <getProgStatus>
   40854:	10800058 	cmpnei	r2,r2,1
   40858:	103ffd1e 	bne	r2,zero,40850 <_gp+0xfffe5128>

    return (int)IORD_32DIRECT(MF_BASE, HEIGHT);
   4085c:	00800074 	movhi	r2,1
   40860:	10800304 	addi	r2,r2,12
   40864:	10800037 	ldwio	r2,0(r2)
}
   40868:	e037883a 	mov	sp,fp
   4086c:	dfc00117 	ldw	ra,4(sp)
   40870:	df000017 	ldw	fp,0(sp)
   40874:	dec00204 	addi	sp,sp,8
   40878:	f800283a 	ret

0004087c <getQualityFactor>:

int getQualityFactor(){
   4087c:	defffe04 	addi	sp,sp,-8
   40880:	dfc00115 	stw	ra,4(sp)
   40884:	df000015 	stw	fp,0(sp)
   40888:	d839883a 	mov	fp,sp
    while (getProgStatus() != 1);
   4088c:	0001883a 	nop
   40890:	00406b40 	call	406b4 <getProgStatus>
   40894:	10800058 	cmpnei	r2,r2,1
   40898:	103ffd1e 	bne	r2,zero,40890 <_gp+0xfffe5168>

    return (int)IORD_32DIRECT(MF_BASE, QUALITY_FACTOR);
   4089c:	00800074 	movhi	r2,1
   408a0:	10800404 	addi	r2,r2,16
   408a4:	10800037 	ldwio	r2,0(r2)
}
   408a8:	e037883a 	mov	sp,fp
   408ac:	dfc00117 	ldw	ra,4(sp)
   408b0:	df000017 	ldw	fp,0(sp)
   408b4:	dec00204 	addi	sp,sp,8
   408b8:	f800283a 	ret

000408bc <getImageFormat>:

int getImageFormat(){
   408bc:	defffe04 	addi	sp,sp,-8
   408c0:	dfc00115 	stw	ra,4(sp)
   408c4:	df000015 	stw	fp,0(sp)
   408c8:	d839883a 	mov	fp,sp
    while (getProgStatus() != 1);
   408cc:	0001883a 	nop
   408d0:	00406b40 	call	406b4 <getProgStatus>
   408d4:	10800058 	cmpnei	r2,r2,1
   408d8:	103ffd1e 	bne	r2,zero,408d0 <_gp+0xfffe51a8>

    return (int)IORD_32DIRECT(MF_BASE, IMAGE_FORMAT);
   408dc:	00800074 	movhi	r2,1
   408e0:	10800504 	addi	r2,r2,20
   408e4:	10800037 	ldwio	r2,0(r2)
}
   408e8:	e037883a 	mov	sp,fp
   408ec:	dfc00117 	ldw	ra,4(sp)
   408f0:	df000017 	ldw	fp,0(sp)
   408f4:	dec00204 	addi	sp,sp,8
   408f8:	f800283a 	ret

000408fc <enqueueINT32>:

//int INIT_USAGE_ENQ = 0;
//int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   408fc:	defffa04 	addi	sp,sp,-24
   40900:	dfc00515 	stw	ra,20(sp)
   40904:	df000415 	stw	fp,16(sp)
   40908:	df000404 	addi	fp,sp,16
   4090c:	e13ffc15 	stw	r4,-16(fp)
   40910:	e17ffd15 	stw	r5,-12(fp)
   40914:	e1bffe15 	stw	r6,-8(fp)
   40918:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   4091c:	0001883a 	nop
   40920:	e0bffe17 	ldw	r2,-8(fp)
   40924:	01400044 	movi	r5,1
   40928:	1009883a 	mov	r4,r2
   4092c:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   40930:	103ffb1e 	bne	r2,zero,40920 <_gp+0xfffe51f8>
//        INIT_USAGE_ENQ = 1;
//        printf("First time using enqueueINT32\n");
//    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   40934:	e0bffc17 	ldw	r2,-16(fp)
   40938:	1007883a 	mov	r3,r2
   4093c:	e0bffe17 	ldw	r2,-8(fp)
   40940:	1009883a 	mov	r4,r2
   40944:	e0bfff17 	ldw	r2,-4(fp)
   40948:	100d883a 	mov	r6,r2
   4094c:	200b883a 	mov	r5,r4
   40950:	1809883a 	mov	r4,r3
   40954:	004f5f40 	call	4f5f4 <altera_avalon_fifo_write_fifo>
}
   40958:	e037883a 	mov	sp,fp
   4095c:	dfc00117 	ldw	ra,4(sp)
   40960:	df000017 	ldw	fp,0(sp)
   40964:	dec00204 	addi	sp,sp,8
   40968:	f800283a 	ret

0004096c <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   4096c:	defffa04 	addi	sp,sp,-24
   40970:	dfc00515 	stw	ra,20(sp)
   40974:	df000415 	stw	fp,16(sp)
   40978:	df000404 	addi	fp,sp,16
   4097c:	e13ffd15 	stw	r4,-12(fp)
   40980:	e17ffe15 	stw	r5,-8(fp)
   40984:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   40988:	0001883a 	nop
   4098c:	e0bfff17 	ldw	r2,-4(fp)
   40990:	01400084 	movi	r5,2
   40994:	1009883a 	mov	r4,r2
   40998:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   4099c:	103ffb1e 	bne	r2,zero,4098c <_gp+0xfffe5264>
//        INIT_USAGE_DEQ = 1;
//        printf("First time using dequeueINT32\n");
//    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   409a0:	e0bffe17 	ldw	r2,-8(fp)
   409a4:	1007883a 	mov	r3,r2
   409a8:	e0bfff17 	ldw	r2,-4(fp)
   409ac:	100b883a 	mov	r5,r2
   409b0:	1809883a 	mov	r4,r3
   409b4:	004f6b80 	call	4f6b8 <altera_avalon_fifo_read_fifo>
   409b8:	e0bffc15 	stw	r2,-16(fp)

	return data;
   409bc:	e0bffc17 	ldw	r2,-16(fp)
}
   409c0:	e037883a 	mov	sp,fp
   409c4:	dfc00117 	ldw	ra,4(sp)
   409c8:	df000017 	ldw	fp,0(sp)
   409cc:	dec00204 	addi	sp,sp,8
   409d0:	f800283a 	ret

000409d4 <__divdf3>:
   409d4:	defff004 	addi	sp,sp,-64
   409d8:	dc800815 	stw	r18,32(sp)
   409dc:	2824d53a 	srli	r18,r5,20
   409e0:	dd800c15 	stw	r22,48(sp)
   409e4:	282cd7fa 	srli	r22,r5,31
   409e8:	dc000615 	stw	r16,24(sp)
   409ec:	04000434 	movhi	r16,16
   409f0:	843fffc4 	addi	r16,r16,-1
   409f4:	dfc00f15 	stw	ra,60(sp)
   409f8:	df000e15 	stw	fp,56(sp)
   409fc:	ddc00d15 	stw	r23,52(sp)
   40a00:	dd400b15 	stw	r21,44(sp)
   40a04:	dd000a15 	stw	r20,40(sp)
   40a08:	dcc00915 	stw	r19,36(sp)
   40a0c:	dc400715 	stw	r17,28(sp)
   40a10:	9481ffcc 	andi	r18,r18,2047
   40a14:	2c20703a 	and	r16,r5,r16
   40a18:	b2003fcc 	andi	r8,r22,255
   40a1c:	90006126 	beq	r18,zero,40ba4 <__divdf3+0x1d0>
   40a20:	0081ffc4 	movi	r2,2047
   40a24:	202b883a 	mov	r21,r4
   40a28:	90803726 	beq	r18,r2,40b08 <__divdf3+0x134>
   40a2c:	80800434 	orhi	r2,r16,16
   40a30:	100490fa 	slli	r2,r2,3
   40a34:	2020d77a 	srli	r16,r4,29
   40a38:	202a90fa 	slli	r21,r4,3
   40a3c:	94bf0044 	addi	r18,r18,-1023
   40a40:	80a0b03a 	or	r16,r16,r2
   40a44:	0013883a 	mov	r9,zero
   40a48:	000b883a 	mov	r5,zero
   40a4c:	3806d53a 	srli	r3,r7,20
   40a50:	382ed7fa 	srli	r23,r7,31
   40a54:	04400434 	movhi	r17,16
   40a58:	8c7fffc4 	addi	r17,r17,-1
   40a5c:	18c1ffcc 	andi	r3,r3,2047
   40a60:	3029883a 	mov	r20,r6
   40a64:	3c62703a 	and	r17,r7,r17
   40a68:	bf003fcc 	andi	fp,r23,255
   40a6c:	18006e26 	beq	r3,zero,40c28 <__divdf3+0x254>
   40a70:	0081ffc4 	movi	r2,2047
   40a74:	18806626 	beq	r3,r2,40c10 <__divdf3+0x23c>
   40a78:	88800434 	orhi	r2,r17,16
   40a7c:	100490fa 	slli	r2,r2,3
   40a80:	3022d77a 	srli	r17,r6,29
   40a84:	302890fa 	slli	r20,r6,3
   40a88:	18ff0044 	addi	r3,r3,-1023
   40a8c:	88a2b03a 	or	r17,r17,r2
   40a90:	000f883a 	mov	r7,zero
   40a94:	b5e6f03a 	xor	r19,r22,r23
   40a98:	3a4cb03a 	or	r6,r7,r9
   40a9c:	008003c4 	movi	r2,15
   40aa0:	9809883a 	mov	r4,r19
   40aa4:	90c7c83a 	sub	r3,r18,r3
   40aa8:	9cc03fcc 	andi	r19,r19,255
   40aac:	11809636 	bltu	r2,r6,40d08 <__divdf3+0x334>
   40ab0:	300c90ba 	slli	r6,r6,2
   40ab4:	00800134 	movhi	r2,4
   40ab8:	1082b204 	addi	r2,r2,2760
   40abc:	308d883a 	add	r6,r6,r2
   40ac0:	30800017 	ldw	r2,0(r6)
   40ac4:	1000683a 	jmp	r2
   40ac8:	00040d08 	cmpgei	zero,zero,4148
   40acc:	00040b40 	call	40b4 <__alt_mem_mem_info-0xbf4c>
   40ad0:	00040cf8 	rdprs	zero,zero,4147
   40ad4:	00040b34 	movhi	zero,4140
   40ad8:	00040cf8 	rdprs	zero,zero,4147
   40adc:	00040ccc 	andi	zero,zero,4147
   40ae0:	00040cf8 	rdprs	zero,zero,4147
   40ae4:	00040b34 	movhi	zero,4140
   40ae8:	00040b40 	call	40b4 <__alt_mem_mem_info-0xbf4c>
   40aec:	00040b40 	call	40b4 <__alt_mem_mem_info-0xbf4c>
   40af0:	00040ccc 	andi	zero,zero,4147
   40af4:	00040b34 	movhi	zero,4140
   40af8:	00040b24 	muli	zero,zero,4140
   40afc:	00040b24 	muli	zero,zero,4140
   40b00:	00040b24 	muli	zero,zero,4140
   40b04:	00041090 	cmplti	zero,zero,4162
   40b08:	2404b03a 	or	r2,r4,r16
   40b0c:	10006c1e 	bne	r2,zero,40cc0 <__divdf3+0x2ec>
   40b10:	02400204 	movi	r9,8
   40b14:	0021883a 	mov	r16,zero
   40b18:	002b883a 	mov	r21,zero
   40b1c:	01400084 	movi	r5,2
   40b20:	003fca06 	br	40a4c <_gp+0xfffe5324>
   40b24:	8023883a 	mov	r17,r16
   40b28:	a829883a 	mov	r20,r21
   40b2c:	4039883a 	mov	fp,r8
   40b30:	280f883a 	mov	r7,r5
   40b34:	00800084 	movi	r2,2
   40b38:	3881601e 	bne	r7,r2,410bc <__divdf3+0x6e8>
   40b3c:	e027883a 	mov	r19,fp
   40b40:	9900004c 	andi	r4,r19,1
   40b44:	0081ffc4 	movi	r2,2047
   40b48:	0021883a 	mov	r16,zero
   40b4c:	002b883a 	mov	r21,zero
   40b50:	1004953a 	slli	r2,r2,20
   40b54:	20c03fcc 	andi	r3,r4,255
   40b58:	01400434 	movhi	r5,16
   40b5c:	297fffc4 	addi	r5,r5,-1
   40b60:	180697fa 	slli	r3,r3,31
   40b64:	8160703a 	and	r16,r16,r5
   40b68:	80a0b03a 	or	r16,r16,r2
   40b6c:	80c6b03a 	or	r3,r16,r3
   40b70:	a805883a 	mov	r2,r21
   40b74:	dfc00f17 	ldw	ra,60(sp)
   40b78:	df000e17 	ldw	fp,56(sp)
   40b7c:	ddc00d17 	ldw	r23,52(sp)
   40b80:	dd800c17 	ldw	r22,48(sp)
   40b84:	dd400b17 	ldw	r21,44(sp)
   40b88:	dd000a17 	ldw	r20,40(sp)
   40b8c:	dcc00917 	ldw	r19,36(sp)
   40b90:	dc800817 	ldw	r18,32(sp)
   40b94:	dc400717 	ldw	r17,28(sp)
   40b98:	dc000617 	ldw	r16,24(sp)
   40b9c:	dec01004 	addi	sp,sp,64
   40ba0:	f800283a 	ret
   40ba4:	2404b03a 	or	r2,r4,r16
   40ba8:	2023883a 	mov	r17,r4
   40bac:	10003f26 	beq	r2,zero,40cac <__divdf3+0x2d8>
   40bb0:	80015e26 	beq	r16,zero,4112c <__divdf3+0x758>
   40bb4:	8009883a 	mov	r4,r16
   40bb8:	d9800215 	stw	r6,8(sp)
   40bbc:	d9c00515 	stw	r7,20(sp)
   40bc0:	da000415 	stw	r8,16(sp)
   40bc4:	004144c0 	call	4144c <__clzsi2>
   40bc8:	d9800217 	ldw	r6,8(sp)
   40bcc:	d9c00517 	ldw	r7,20(sp)
   40bd0:	da000417 	ldw	r8,16(sp)
   40bd4:	113ffd44 	addi	r4,r2,-11
   40bd8:	00c00704 	movi	r3,28
   40bdc:	19014f16 	blt	r3,r4,4111c <__divdf3+0x748>
   40be0:	00c00744 	movi	r3,29
   40be4:	157ffe04 	addi	r21,r2,-8
   40be8:	1907c83a 	sub	r3,r3,r4
   40bec:	8560983a 	sll	r16,r16,r21
   40bf0:	88c6d83a 	srl	r3,r17,r3
   40bf4:	8d6a983a 	sll	r21,r17,r21
   40bf8:	1c20b03a 	or	r16,r3,r16
   40bfc:	1080fcc4 	addi	r2,r2,1011
   40c00:	00a5c83a 	sub	r18,zero,r2
   40c04:	0013883a 	mov	r9,zero
   40c08:	000b883a 	mov	r5,zero
   40c0c:	003f8f06 	br	40a4c <_gp+0xfffe5324>
   40c10:	3444b03a 	or	r2,r6,r17
   40c14:	1000231e 	bne	r2,zero,40ca4 <__divdf3+0x2d0>
   40c18:	0023883a 	mov	r17,zero
   40c1c:	0029883a 	mov	r20,zero
   40c20:	01c00084 	movi	r7,2
   40c24:	003f9b06 	br	40a94 <_gp+0xfffe536c>
   40c28:	3444b03a 	or	r2,r6,r17
   40c2c:	10001926 	beq	r2,zero,40c94 <__divdf3+0x2c0>
   40c30:	88014b26 	beq	r17,zero,41160 <__divdf3+0x78c>
   40c34:	8809883a 	mov	r4,r17
   40c38:	d9400115 	stw	r5,4(sp)
   40c3c:	d9800215 	stw	r6,8(sp)
   40c40:	da000415 	stw	r8,16(sp)
   40c44:	da400315 	stw	r9,12(sp)
   40c48:	004144c0 	call	4144c <__clzsi2>
   40c4c:	d9400117 	ldw	r5,4(sp)
   40c50:	d9800217 	ldw	r6,8(sp)
   40c54:	da000417 	ldw	r8,16(sp)
   40c58:	da400317 	ldw	r9,12(sp)
   40c5c:	113ffd44 	addi	r4,r2,-11
   40c60:	00c00704 	movi	r3,28
   40c64:	19013a16 	blt	r3,r4,41150 <__divdf3+0x77c>
   40c68:	00c00744 	movi	r3,29
   40c6c:	153ffe04 	addi	r20,r2,-8
   40c70:	1907c83a 	sub	r3,r3,r4
   40c74:	8d22983a 	sll	r17,r17,r20
   40c78:	30c6d83a 	srl	r3,r6,r3
   40c7c:	3528983a 	sll	r20,r6,r20
   40c80:	1c62b03a 	or	r17,r3,r17
   40c84:	1080fcc4 	addi	r2,r2,1011
   40c88:	0087c83a 	sub	r3,zero,r2
   40c8c:	000f883a 	mov	r7,zero
   40c90:	003f8006 	br	40a94 <_gp+0xfffe536c>
   40c94:	0023883a 	mov	r17,zero
   40c98:	0029883a 	mov	r20,zero
   40c9c:	01c00044 	movi	r7,1
   40ca0:	003f7c06 	br	40a94 <_gp+0xfffe536c>
   40ca4:	01c000c4 	movi	r7,3
   40ca8:	003f7a06 	br	40a94 <_gp+0xfffe536c>
   40cac:	02400104 	movi	r9,4
   40cb0:	0021883a 	mov	r16,zero
   40cb4:	002b883a 	mov	r21,zero
   40cb8:	01400044 	movi	r5,1
   40cbc:	003f6306 	br	40a4c <_gp+0xfffe5324>
   40cc0:	02400304 	movi	r9,12
   40cc4:	014000c4 	movi	r5,3
   40cc8:	003f6006 	br	40a4c <_gp+0xfffe5324>
   40ccc:	04000434 	movhi	r16,16
   40cd0:	0009883a 	mov	r4,zero
   40cd4:	843fffc4 	addi	r16,r16,-1
   40cd8:	057fffc4 	movi	r21,-1
   40cdc:	0081ffc4 	movi	r2,2047
   40ce0:	003f9b06 	br	40b50 <_gp+0xfffe5428>
   40ce4:	00c00044 	movi	r3,1
   40ce8:	1887c83a 	sub	r3,r3,r2
   40cec:	01000e04 	movi	r4,56
   40cf0:	20c1530e 	bge	r4,r3,41240 <__divdf3+0x86c>
   40cf4:	9900004c 	andi	r4,r19,1
   40cf8:	0005883a 	mov	r2,zero
   40cfc:	0021883a 	mov	r16,zero
   40d00:	002b883a 	mov	r21,zero
   40d04:	003f9206 	br	40b50 <_gp+0xfffe5428>
   40d08:	8c012e36 	bltu	r17,r16,411c4 <__divdf3+0x7f0>
   40d0c:	84412c26 	beq	r16,r17,411c0 <__divdf3+0x7ec>
   40d10:	a82f883a 	mov	r23,r21
   40d14:	18ffffc4 	addi	r3,r3,-1
   40d18:	002b883a 	mov	r21,zero
   40d1c:	a004d63a 	srli	r2,r20,24
   40d20:	8822923a 	slli	r17,r17,8
   40d24:	a028923a 	slli	r20,r20,8
   40d28:	8009883a 	mov	r4,r16
   40d2c:	88acb03a 	or	r22,r17,r2
   40d30:	dd000015 	stw	r20,0(sp)
   40d34:	b028d43a 	srli	r20,r22,16
   40d38:	d8c00215 	stw	r3,8(sp)
   40d3c:	b4bfffcc 	andi	r18,r22,65535
   40d40:	a00b883a 	mov	r5,r20
   40d44:	00415a80 	call	415a8 <__udivsi3>
   40d48:	100b883a 	mov	r5,r2
   40d4c:	9009883a 	mov	r4,r18
   40d50:	1023883a 	mov	r17,r2
   40d54:	00416640 	call	41664 <__mulsi3>
   40d58:	8009883a 	mov	r4,r16
   40d5c:	a00b883a 	mov	r5,r20
   40d60:	1039883a 	mov	fp,r2
   40d64:	004160c0 	call	4160c <__umodsi3>
   40d68:	1004943a 	slli	r2,r2,16
   40d6c:	b808d43a 	srli	r4,r23,16
   40d70:	d8c00217 	ldw	r3,8(sp)
   40d74:	2084b03a 	or	r2,r4,r2
   40d78:	1700062e 	bgeu	r2,fp,40d94 <__divdf3+0x3c0>
   40d7c:	1585883a 	add	r2,r2,r22
   40d80:	893fffc4 	addi	r4,r17,-1
   40d84:	15811d36 	bltu	r2,r22,411fc <__divdf3+0x828>
   40d88:	17011c2e 	bgeu	r2,fp,411fc <__divdf3+0x828>
   40d8c:	8c7fff84 	addi	r17,r17,-2
   40d90:	1585883a 	add	r2,r2,r22
   40d94:	1739c83a 	sub	fp,r2,fp
   40d98:	a00b883a 	mov	r5,r20
   40d9c:	e009883a 	mov	r4,fp
   40da0:	d8c00215 	stw	r3,8(sp)
   40da4:	00415a80 	call	415a8 <__udivsi3>
   40da8:	100b883a 	mov	r5,r2
   40dac:	9009883a 	mov	r4,r18
   40db0:	1021883a 	mov	r16,r2
   40db4:	00416640 	call	41664 <__mulsi3>
   40db8:	a00b883a 	mov	r5,r20
   40dbc:	e009883a 	mov	r4,fp
   40dc0:	d8800415 	stw	r2,16(sp)
   40dc4:	004160c0 	call	4160c <__umodsi3>
   40dc8:	1004943a 	slli	r2,r2,16
   40dcc:	da000417 	ldw	r8,16(sp)
   40dd0:	bdffffcc 	andi	r23,r23,65535
   40dd4:	b884b03a 	or	r2,r23,r2
   40dd8:	d8c00217 	ldw	r3,8(sp)
   40ddc:	1200062e 	bgeu	r2,r8,40df8 <__divdf3+0x424>
   40de0:	1585883a 	add	r2,r2,r22
   40de4:	813fffc4 	addi	r4,r16,-1
   40de8:	15810236 	bltu	r2,r22,411f4 <__divdf3+0x820>
   40dec:	1201012e 	bgeu	r2,r8,411f4 <__divdf3+0x820>
   40df0:	843fff84 	addi	r16,r16,-2
   40df4:	1585883a 	add	r2,r2,r22
   40df8:	8822943a 	slli	r17,r17,16
   40dfc:	d9800017 	ldw	r6,0(sp)
   40e00:	1211c83a 	sub	r8,r2,r8
   40e04:	8c22b03a 	or	r17,r17,r16
   40e08:	373fffcc 	andi	fp,r6,65535
   40e0c:	8abfffcc 	andi	r10,r17,65535
   40e10:	8820d43a 	srli	r16,r17,16
   40e14:	5009883a 	mov	r4,r10
   40e18:	e00b883a 	mov	r5,fp
   40e1c:	302ed43a 	srli	r23,r6,16
   40e20:	d8c00215 	stw	r3,8(sp)
   40e24:	da000415 	stw	r8,16(sp)
   40e28:	da800115 	stw	r10,4(sp)
   40e2c:	00416640 	call	41664 <__mulsi3>
   40e30:	800b883a 	mov	r5,r16
   40e34:	e009883a 	mov	r4,fp
   40e38:	d8800515 	stw	r2,20(sp)
   40e3c:	00416640 	call	41664 <__mulsi3>
   40e40:	8009883a 	mov	r4,r16
   40e44:	b80b883a 	mov	r5,r23
   40e48:	d8800315 	stw	r2,12(sp)
   40e4c:	00416640 	call	41664 <__mulsi3>
   40e50:	da800117 	ldw	r10,4(sp)
   40e54:	b80b883a 	mov	r5,r23
   40e58:	1021883a 	mov	r16,r2
   40e5c:	5009883a 	mov	r4,r10
   40e60:	00416640 	call	41664 <__mulsi3>
   40e64:	d9c00517 	ldw	r7,20(sp)
   40e68:	da400317 	ldw	r9,12(sp)
   40e6c:	d8c00217 	ldw	r3,8(sp)
   40e70:	3808d43a 	srli	r4,r7,16
   40e74:	1245883a 	add	r2,r2,r9
   40e78:	da000417 	ldw	r8,16(sp)
   40e7c:	2085883a 	add	r2,r4,r2
   40e80:	1240022e 	bgeu	r2,r9,40e8c <__divdf3+0x4b8>
   40e84:	01000074 	movhi	r4,1
   40e88:	8121883a 	add	r16,r16,r4
   40e8c:	1008d43a 	srli	r4,r2,16
   40e90:	1004943a 	slli	r2,r2,16
   40e94:	39ffffcc 	andi	r7,r7,65535
   40e98:	2409883a 	add	r4,r4,r16
   40e9c:	11c5883a 	add	r2,r2,r7
   40ea0:	4100bb36 	bltu	r8,r4,41190 <__divdf3+0x7bc>
   40ea4:	4100d726 	beq	r8,r4,41204 <__divdf3+0x830>
   40ea8:	4109c83a 	sub	r4,r8,r4
   40eac:	a8a1c83a 	sub	r16,r21,r2
   40eb0:	ac2b803a 	cmpltu	r21,r21,r16
   40eb4:	256bc83a 	sub	r21,r4,r21
   40eb8:	b540d926 	beq	r22,r21,41220 <__divdf3+0x84c>
   40ebc:	a00b883a 	mov	r5,r20
   40ec0:	a809883a 	mov	r4,r21
   40ec4:	d8c00215 	stw	r3,8(sp)
   40ec8:	00415a80 	call	415a8 <__udivsi3>
   40ecc:	100b883a 	mov	r5,r2
   40ed0:	9009883a 	mov	r4,r18
   40ed4:	d8800515 	stw	r2,20(sp)
   40ed8:	00416640 	call	41664 <__mulsi3>
   40edc:	a809883a 	mov	r4,r21
   40ee0:	a00b883a 	mov	r5,r20
   40ee4:	d8800415 	stw	r2,16(sp)
   40ee8:	004160c0 	call	4160c <__umodsi3>
   40eec:	1004943a 	slli	r2,r2,16
   40ef0:	8008d43a 	srli	r4,r16,16
   40ef4:	da000417 	ldw	r8,16(sp)
   40ef8:	d8c00217 	ldw	r3,8(sp)
   40efc:	2084b03a 	or	r2,r4,r2
   40f00:	d9c00517 	ldw	r7,20(sp)
   40f04:	1200062e 	bgeu	r2,r8,40f20 <__divdf3+0x54c>
   40f08:	1585883a 	add	r2,r2,r22
   40f0c:	393fffc4 	addi	r4,r7,-1
   40f10:	1580c536 	bltu	r2,r22,41228 <__divdf3+0x854>
   40f14:	1200c42e 	bgeu	r2,r8,41228 <__divdf3+0x854>
   40f18:	39ffff84 	addi	r7,r7,-2
   40f1c:	1585883a 	add	r2,r2,r22
   40f20:	122bc83a 	sub	r21,r2,r8
   40f24:	a00b883a 	mov	r5,r20
   40f28:	a809883a 	mov	r4,r21
   40f2c:	d8c00215 	stw	r3,8(sp)
   40f30:	d9c00515 	stw	r7,20(sp)
   40f34:	00415a80 	call	415a8 <__udivsi3>
   40f38:	9009883a 	mov	r4,r18
   40f3c:	100b883a 	mov	r5,r2
   40f40:	d8800415 	stw	r2,16(sp)
   40f44:	00416640 	call	41664 <__mulsi3>
   40f48:	a809883a 	mov	r4,r21
   40f4c:	a00b883a 	mov	r5,r20
   40f50:	1025883a 	mov	r18,r2
   40f54:	004160c0 	call	4160c <__umodsi3>
   40f58:	1004943a 	slli	r2,r2,16
   40f5c:	813fffcc 	andi	r4,r16,65535
   40f60:	d8c00217 	ldw	r3,8(sp)
   40f64:	20a0b03a 	or	r16,r4,r2
   40f68:	d9c00517 	ldw	r7,20(sp)
   40f6c:	da000417 	ldw	r8,16(sp)
   40f70:	8480062e 	bgeu	r16,r18,40f8c <__divdf3+0x5b8>
   40f74:	85a1883a 	add	r16,r16,r22
   40f78:	40bfffc4 	addi	r2,r8,-1
   40f7c:	8580ac36 	bltu	r16,r22,41230 <__divdf3+0x85c>
   40f80:	8480ab2e 	bgeu	r16,r18,41230 <__divdf3+0x85c>
   40f84:	423fff84 	addi	r8,r8,-2
   40f88:	85a1883a 	add	r16,r16,r22
   40f8c:	3804943a 	slli	r2,r7,16
   40f90:	84a1c83a 	sub	r16,r16,r18
   40f94:	e009883a 	mov	r4,fp
   40f98:	1228b03a 	or	r20,r2,r8
   40f9c:	a1ffffcc 	andi	r7,r20,65535
   40fa0:	a024d43a 	srli	r18,r20,16
   40fa4:	380b883a 	mov	r5,r7
   40fa8:	d8c00215 	stw	r3,8(sp)
   40fac:	d9c00515 	stw	r7,20(sp)
   40fb0:	00416640 	call	41664 <__mulsi3>
   40fb4:	900b883a 	mov	r5,r18
   40fb8:	e009883a 	mov	r4,fp
   40fbc:	102b883a 	mov	r21,r2
   40fc0:	00416640 	call	41664 <__mulsi3>
   40fc4:	900b883a 	mov	r5,r18
   40fc8:	b809883a 	mov	r4,r23
   40fcc:	1039883a 	mov	fp,r2
   40fd0:	00416640 	call	41664 <__mulsi3>
   40fd4:	d9c00517 	ldw	r7,20(sp)
   40fd8:	b80b883a 	mov	r5,r23
   40fdc:	1025883a 	mov	r18,r2
   40fe0:	3809883a 	mov	r4,r7
   40fe4:	00416640 	call	41664 <__mulsi3>
   40fe8:	a808d43a 	srli	r4,r21,16
   40fec:	1705883a 	add	r2,r2,fp
   40ff0:	d8c00217 	ldw	r3,8(sp)
   40ff4:	2085883a 	add	r2,r4,r2
   40ff8:	1700022e 	bgeu	r2,fp,41004 <__divdf3+0x630>
   40ffc:	01000074 	movhi	r4,1
   41000:	9125883a 	add	r18,r18,r4
   41004:	1008d43a 	srli	r4,r2,16
   41008:	1004943a 	slli	r2,r2,16
   4100c:	ad7fffcc 	andi	r21,r21,65535
   41010:	2489883a 	add	r4,r4,r18
   41014:	1545883a 	add	r2,r2,r21
   41018:	81003836 	bltu	r16,r4,410fc <__divdf3+0x728>
   4101c:	81003626 	beq	r16,r4,410f8 <__divdf3+0x724>
   41020:	a5000054 	ori	r20,r20,1
   41024:	1880ffc4 	addi	r2,r3,1023
   41028:	00bf2e0e 	bge	zero,r2,40ce4 <_gp+0xfffe55bc>
   4102c:	a10001cc 	andi	r4,r20,7
   41030:	20000726 	beq	r4,zero,41050 <__divdf3+0x67c>
   41034:	a10003cc 	andi	r4,r20,15
   41038:	01400104 	movi	r5,4
   4103c:	21400426 	beq	r4,r5,41050 <__divdf3+0x67c>
   41040:	a149883a 	add	r4,r20,r5
   41044:	2529803a 	cmpltu	r20,r4,r20
   41048:	8d23883a 	add	r17,r17,r20
   4104c:	2029883a 	mov	r20,r4
   41050:	8900402c 	andhi	r4,r17,256
   41054:	20000426 	beq	r4,zero,41068 <__divdf3+0x694>
   41058:	18810004 	addi	r2,r3,1024
   4105c:	00ffc034 	movhi	r3,65280
   41060:	18ffffc4 	addi	r3,r3,-1
   41064:	88e2703a 	and	r17,r17,r3
   41068:	00c1ff84 	movi	r3,2046
   4106c:	18beb416 	blt	r3,r2,40b40 <_gp+0xfffe5418>
   41070:	a028d0fa 	srli	r20,r20,3
   41074:	882a977a 	slli	r21,r17,29
   41078:	8820927a 	slli	r16,r17,9
   4107c:	1081ffcc 	andi	r2,r2,2047
   41080:	ad2ab03a 	or	r21,r21,r20
   41084:	8020d33a 	srli	r16,r16,12
   41088:	9900004c 	andi	r4,r19,1
   4108c:	003eb006 	br	40b50 <_gp+0xfffe5428>
   41090:	8080022c 	andhi	r2,r16,8
   41094:	10001226 	beq	r2,zero,410e0 <__divdf3+0x70c>
   41098:	8880022c 	andhi	r2,r17,8
   4109c:	1000101e 	bne	r2,zero,410e0 <__divdf3+0x70c>
   410a0:	00800434 	movhi	r2,16
   410a4:	8c000234 	orhi	r16,r17,8
   410a8:	10bfffc4 	addi	r2,r2,-1
   410ac:	b809883a 	mov	r4,r23
   410b0:	80a0703a 	and	r16,r16,r2
   410b4:	a02b883a 	mov	r21,r20
   410b8:	003f0806 	br	40cdc <_gp+0xfffe55b4>
   410bc:	008000c4 	movi	r2,3
   410c0:	3880b126 	beq	r7,r2,41388 <__divdf3+0x9b4>
   410c4:	00800044 	movi	r2,1
   410c8:	38805b1e 	bne	r7,r2,41238 <__divdf3+0x864>
   410cc:	e009883a 	mov	r4,fp
   410d0:	0005883a 	mov	r2,zero
   410d4:	0021883a 	mov	r16,zero
   410d8:	002b883a 	mov	r21,zero
   410dc:	003e9c06 	br	40b50 <_gp+0xfffe5428>
   410e0:	00800434 	movhi	r2,16
   410e4:	84000234 	orhi	r16,r16,8
   410e8:	10bfffc4 	addi	r2,r2,-1
   410ec:	b009883a 	mov	r4,r22
   410f0:	80a0703a 	and	r16,r16,r2
   410f4:	003ef906 	br	40cdc <_gp+0xfffe55b4>
   410f8:	103fca26 	beq	r2,zero,41024 <_gp+0xfffe58fc>
   410fc:	b421883a 	add	r16,r22,r16
   41100:	a17fffc4 	addi	r5,r20,-1
   41104:	8580422e 	bgeu	r16,r22,41210 <__divdf3+0x83c>
   41108:	2829883a 	mov	r20,r5
   4110c:	813fc41e 	bne	r16,r4,41020 <_gp+0xfffe58f8>
   41110:	d9800017 	ldw	r6,0(sp)
   41114:	30bfc21e 	bne	r6,r2,41020 <_gp+0xfffe58f8>
   41118:	003fc206 	br	41024 <_gp+0xfffe58fc>
   4111c:	143ff604 	addi	r16,r2,-40
   41120:	8c20983a 	sll	r16,r17,r16
   41124:	002b883a 	mov	r21,zero
   41128:	003eb406 	br	40bfc <_gp+0xfffe54d4>
   4112c:	d9800215 	stw	r6,8(sp)
   41130:	d9c00515 	stw	r7,20(sp)
   41134:	da000415 	stw	r8,16(sp)
   41138:	004144c0 	call	4144c <__clzsi2>
   4113c:	10800804 	addi	r2,r2,32
   41140:	da000417 	ldw	r8,16(sp)
   41144:	d9c00517 	ldw	r7,20(sp)
   41148:	d9800217 	ldw	r6,8(sp)
   4114c:	003ea106 	br	40bd4 <_gp+0xfffe54ac>
   41150:	147ff604 	addi	r17,r2,-40
   41154:	3462983a 	sll	r17,r6,r17
   41158:	0029883a 	mov	r20,zero
   4115c:	003ec906 	br	40c84 <_gp+0xfffe555c>
   41160:	3009883a 	mov	r4,r6
   41164:	d9400115 	stw	r5,4(sp)
   41168:	d9800215 	stw	r6,8(sp)
   4116c:	da000415 	stw	r8,16(sp)
   41170:	da400315 	stw	r9,12(sp)
   41174:	004144c0 	call	4144c <__clzsi2>
   41178:	10800804 	addi	r2,r2,32
   4117c:	da400317 	ldw	r9,12(sp)
   41180:	da000417 	ldw	r8,16(sp)
   41184:	d9800217 	ldw	r6,8(sp)
   41188:	d9400117 	ldw	r5,4(sp)
   4118c:	003eb306 	br	40c5c <_gp+0xfffe5534>
   41190:	d9800017 	ldw	r6,0(sp)
   41194:	a9ab883a 	add	r21,r21,r6
   41198:	a98b803a 	cmpltu	r5,r21,r6
   4119c:	2d8b883a 	add	r5,r5,r22
   411a0:	2a11883a 	add	r8,r5,r8
   411a4:	897fffc4 	addi	r5,r17,-1
   411a8:	b2000c2e 	bgeu	r22,r8,411dc <__divdf3+0x808>
   411ac:	41003f36 	bltu	r8,r4,412ac <__divdf3+0x8d8>
   411b0:	22006c26 	beq	r4,r8,41364 <__divdf3+0x990>
   411b4:	4109c83a 	sub	r4,r8,r4
   411b8:	2823883a 	mov	r17,r5
   411bc:	003f3b06 	br	40eac <_gp+0xfffe5784>
   411c0:	ad3ed336 	bltu	r21,r20,40d10 <_gp+0xfffe55e8>
   411c4:	a804d07a 	srli	r2,r21,1
   411c8:	802e97fa 	slli	r23,r16,31
   411cc:	a82a97fa 	slli	r21,r21,31
   411d0:	8020d07a 	srli	r16,r16,1
   411d4:	b8aeb03a 	or	r23,r23,r2
   411d8:	003ed006 	br	40d1c <_gp+0xfffe55f4>
   411dc:	b23ff51e 	bne	r22,r8,411b4 <_gp+0xfffe5a8c>
   411e0:	d9800017 	ldw	r6,0(sp)
   411e4:	a9bff12e 	bgeu	r21,r6,411ac <_gp+0xfffe5a84>
   411e8:	b109c83a 	sub	r4,r22,r4
   411ec:	2823883a 	mov	r17,r5
   411f0:	003f2e06 	br	40eac <_gp+0xfffe5784>
   411f4:	2021883a 	mov	r16,r4
   411f8:	003eff06 	br	40df8 <_gp+0xfffe56d0>
   411fc:	2023883a 	mov	r17,r4
   41200:	003ee406 	br	40d94 <_gp+0xfffe566c>
   41204:	a8bfe236 	bltu	r21,r2,41190 <_gp+0xfffe5a68>
   41208:	0009883a 	mov	r4,zero
   4120c:	003f2706 	br	40eac <_gp+0xfffe5784>
   41210:	81002d36 	bltu	r16,r4,412c8 <__divdf3+0x8f4>
   41214:	24005626 	beq	r4,r16,41370 <__divdf3+0x99c>
   41218:	2829883a 	mov	r20,r5
   4121c:	003f8006 	br	41020 <_gp+0xfffe58f8>
   41220:	053fffc4 	movi	r20,-1
   41224:	003f7f06 	br	41024 <_gp+0xfffe58fc>
   41228:	200f883a 	mov	r7,r4
   4122c:	003f3c06 	br	40f20 <_gp+0xfffe57f8>
   41230:	1011883a 	mov	r8,r2
   41234:	003f5506 	br	40f8c <_gp+0xfffe5864>
   41238:	e027883a 	mov	r19,fp
   4123c:	003f7906 	br	41024 <_gp+0xfffe58fc>
   41240:	010007c4 	movi	r4,31
   41244:	20c02816 	blt	r4,r3,412e8 <__divdf3+0x914>
   41248:	00800804 	movi	r2,32
   4124c:	10c5c83a 	sub	r2,r2,r3
   41250:	888a983a 	sll	r5,r17,r2
   41254:	a0c8d83a 	srl	r4,r20,r3
   41258:	a084983a 	sll	r2,r20,r2
   4125c:	88e2d83a 	srl	r17,r17,r3
   41260:	2906b03a 	or	r3,r5,r4
   41264:	1004c03a 	cmpne	r2,r2,zero
   41268:	1886b03a 	or	r3,r3,r2
   4126c:	188001cc 	andi	r2,r3,7
   41270:	10000726 	beq	r2,zero,41290 <__divdf3+0x8bc>
   41274:	188003cc 	andi	r2,r3,15
   41278:	01000104 	movi	r4,4
   4127c:	11000426 	beq	r2,r4,41290 <__divdf3+0x8bc>
   41280:	1805883a 	mov	r2,r3
   41284:	10c00104 	addi	r3,r2,4
   41288:	1885803a 	cmpltu	r2,r3,r2
   4128c:	88a3883a 	add	r17,r17,r2
   41290:	8880202c 	andhi	r2,r17,128
   41294:	10002926 	beq	r2,zero,4133c <__divdf3+0x968>
   41298:	9900004c 	andi	r4,r19,1
   4129c:	00800044 	movi	r2,1
   412a0:	0021883a 	mov	r16,zero
   412a4:	002b883a 	mov	r21,zero
   412a8:	003e2906 	br	40b50 <_gp+0xfffe5428>
   412ac:	d9800017 	ldw	r6,0(sp)
   412b0:	8c7fff84 	addi	r17,r17,-2
   412b4:	a9ab883a 	add	r21,r21,r6
   412b8:	a98b803a 	cmpltu	r5,r21,r6
   412bc:	2d8b883a 	add	r5,r5,r22
   412c0:	2a11883a 	add	r8,r5,r8
   412c4:	003ef806 	br	40ea8 <_gp+0xfffe5780>
   412c8:	d9800017 	ldw	r6,0(sp)
   412cc:	318f883a 	add	r7,r6,r6
   412d0:	398b803a 	cmpltu	r5,r7,r6
   412d4:	2d8d883a 	add	r6,r5,r22
   412d8:	81a1883a 	add	r16,r16,r6
   412dc:	a17fff84 	addi	r5,r20,-2
   412e0:	d9c00015 	stw	r7,0(sp)
   412e4:	003f8806 	br	41108 <_gp+0xfffe59e0>
   412e8:	013ff844 	movi	r4,-31
   412ec:	2085c83a 	sub	r2,r4,r2
   412f0:	8888d83a 	srl	r4,r17,r2
   412f4:	00800804 	movi	r2,32
   412f8:	18802126 	beq	r3,r2,41380 <__divdf3+0x9ac>
   412fc:	04001004 	movi	r16,64
   41300:	80c7c83a 	sub	r3,r16,r3
   41304:	88e0983a 	sll	r16,r17,r3
   41308:	8504b03a 	or	r2,r16,r20
   4130c:	1004c03a 	cmpne	r2,r2,zero
   41310:	2084b03a 	or	r2,r4,r2
   41314:	144001cc 	andi	r17,r2,7
   41318:	88000d1e 	bne	r17,zero,41350 <__divdf3+0x97c>
   4131c:	0021883a 	mov	r16,zero
   41320:	102ad0fa 	srli	r21,r2,3
   41324:	9900004c 	andi	r4,r19,1
   41328:	0005883a 	mov	r2,zero
   4132c:	ac6ab03a 	or	r21,r21,r17
   41330:	003e0706 	br	40b50 <_gp+0xfffe5428>
   41334:	1007883a 	mov	r3,r2
   41338:	0023883a 	mov	r17,zero
   4133c:	8820927a 	slli	r16,r17,9
   41340:	1805883a 	mov	r2,r3
   41344:	8822977a 	slli	r17,r17,29
   41348:	8020d33a 	srli	r16,r16,12
   4134c:	003ff406 	br	41320 <_gp+0xfffe5bf8>
   41350:	10c003cc 	andi	r3,r2,15
   41354:	01000104 	movi	r4,4
   41358:	193ff626 	beq	r3,r4,41334 <_gp+0xfffe5c0c>
   4135c:	0023883a 	mov	r17,zero
   41360:	003fc806 	br	41284 <_gp+0xfffe5b5c>
   41364:	a8bfd136 	bltu	r21,r2,412ac <_gp+0xfffe5b84>
   41368:	2823883a 	mov	r17,r5
   4136c:	003fa606 	br	41208 <_gp+0xfffe5ae0>
   41370:	d9800017 	ldw	r6,0(sp)
   41374:	30bfd436 	bltu	r6,r2,412c8 <_gp+0xfffe5ba0>
   41378:	2829883a 	mov	r20,r5
   4137c:	003f6406 	br	41110 <_gp+0xfffe59e8>
   41380:	0021883a 	mov	r16,zero
   41384:	003fe006 	br	41308 <_gp+0xfffe5be0>
   41388:	00800434 	movhi	r2,16
   4138c:	8c000234 	orhi	r16,r17,8
   41390:	10bfffc4 	addi	r2,r2,-1
   41394:	e009883a 	mov	r4,fp
   41398:	80a0703a 	and	r16,r16,r2
   4139c:	a02b883a 	mov	r21,r20
   413a0:	003e4e06 	br	40cdc <_gp+0xfffe55b4>

000413a4 <__floatunsidf>:
   413a4:	defffe04 	addi	sp,sp,-8
   413a8:	dc000015 	stw	r16,0(sp)
   413ac:	dfc00115 	stw	ra,4(sp)
   413b0:	2021883a 	mov	r16,r4
   413b4:	20002226 	beq	r4,zero,41440 <__floatunsidf+0x9c>
   413b8:	004144c0 	call	4144c <__clzsi2>
   413bc:	01010784 	movi	r4,1054
   413c0:	2089c83a 	sub	r4,r4,r2
   413c4:	01810cc4 	movi	r6,1075
   413c8:	310dc83a 	sub	r6,r6,r4
   413cc:	00c007c4 	movi	r3,31
   413d0:	1980120e 	bge	r3,r6,4141c <__floatunsidf+0x78>
   413d4:	00c104c4 	movi	r3,1043
   413d8:	1907c83a 	sub	r3,r3,r4
   413dc:	80ca983a 	sll	r5,r16,r3
   413e0:	00800434 	movhi	r2,16
   413e4:	10bfffc4 	addi	r2,r2,-1
   413e8:	2101ffcc 	andi	r4,r4,2047
   413ec:	0021883a 	mov	r16,zero
   413f0:	288a703a 	and	r5,r5,r2
   413f4:	2008953a 	slli	r4,r4,20
   413f8:	00c00434 	movhi	r3,16
   413fc:	18ffffc4 	addi	r3,r3,-1
   41400:	28c6703a 	and	r3,r5,r3
   41404:	8005883a 	mov	r2,r16
   41408:	1906b03a 	or	r3,r3,r4
   4140c:	dfc00117 	ldw	ra,4(sp)
   41410:	dc000017 	ldw	r16,0(sp)
   41414:	dec00204 	addi	sp,sp,8
   41418:	f800283a 	ret
   4141c:	00c002c4 	movi	r3,11
   41420:	188bc83a 	sub	r5,r3,r2
   41424:	814ad83a 	srl	r5,r16,r5
   41428:	00c00434 	movhi	r3,16
   4142c:	18ffffc4 	addi	r3,r3,-1
   41430:	81a0983a 	sll	r16,r16,r6
   41434:	2101ffcc 	andi	r4,r4,2047
   41438:	28ca703a 	and	r5,r5,r3
   4143c:	003fed06 	br	413f4 <_gp+0xfffe5ccc>
   41440:	0009883a 	mov	r4,zero
   41444:	000b883a 	mov	r5,zero
   41448:	003fea06 	br	413f4 <_gp+0xfffe5ccc>

0004144c <__clzsi2>:
   4144c:	00bfffd4 	movui	r2,65535
   41450:	11000536 	bltu	r2,r4,41468 <__clzsi2+0x1c>
   41454:	00803fc4 	movi	r2,255
   41458:	11000f36 	bltu	r2,r4,41498 <__clzsi2+0x4c>
   4145c:	00800804 	movi	r2,32
   41460:	0007883a 	mov	r3,zero
   41464:	00000506 	br	4147c <__clzsi2+0x30>
   41468:	00804034 	movhi	r2,256
   4146c:	10bfffc4 	addi	r2,r2,-1
   41470:	11000c2e 	bgeu	r2,r4,414a4 <__clzsi2+0x58>
   41474:	00800204 	movi	r2,8
   41478:	00c00604 	movi	r3,24
   4147c:	20c8d83a 	srl	r4,r4,r3
   41480:	00c00174 	movhi	r3,5
   41484:	18c62b04 	addi	r3,r3,6316
   41488:	1909883a 	add	r4,r3,r4
   4148c:	20c00003 	ldbu	r3,0(r4)
   41490:	10c5c83a 	sub	r2,r2,r3
   41494:	f800283a 	ret
   41498:	00800604 	movi	r2,24
   4149c:	00c00204 	movi	r3,8
   414a0:	003ff606 	br	4147c <_gp+0xfffe5d54>
   414a4:	00800404 	movi	r2,16
   414a8:	1007883a 	mov	r3,r2
   414ac:	003ff306 	br	4147c <_gp+0xfffe5d54>

000414b0 <__divsi3>:
   414b0:	20001b16 	blt	r4,zero,41520 <__divsi3+0x70>
   414b4:	000f883a 	mov	r7,zero
   414b8:	28001616 	blt	r5,zero,41514 <__divsi3+0x64>
   414bc:	200d883a 	mov	r6,r4
   414c0:	29001a2e 	bgeu	r5,r4,4152c <__divsi3+0x7c>
   414c4:	00800804 	movi	r2,32
   414c8:	00c00044 	movi	r3,1
   414cc:	00000106 	br	414d4 <__divsi3+0x24>
   414d0:	10000d26 	beq	r2,zero,41508 <__divsi3+0x58>
   414d4:	294b883a 	add	r5,r5,r5
   414d8:	10bfffc4 	addi	r2,r2,-1
   414dc:	18c7883a 	add	r3,r3,r3
   414e0:	293ffb36 	bltu	r5,r4,414d0 <_gp+0xfffe5da8>
   414e4:	0005883a 	mov	r2,zero
   414e8:	18000726 	beq	r3,zero,41508 <__divsi3+0x58>
   414ec:	0005883a 	mov	r2,zero
   414f0:	31400236 	bltu	r6,r5,414fc <__divsi3+0x4c>
   414f4:	314dc83a 	sub	r6,r6,r5
   414f8:	10c4b03a 	or	r2,r2,r3
   414fc:	1806d07a 	srli	r3,r3,1
   41500:	280ad07a 	srli	r5,r5,1
   41504:	183ffa1e 	bne	r3,zero,414f0 <_gp+0xfffe5dc8>
   41508:	38000126 	beq	r7,zero,41510 <__divsi3+0x60>
   4150c:	0085c83a 	sub	r2,zero,r2
   41510:	f800283a 	ret
   41514:	014bc83a 	sub	r5,zero,r5
   41518:	39c0005c 	xori	r7,r7,1
   4151c:	003fe706 	br	414bc <_gp+0xfffe5d94>
   41520:	0109c83a 	sub	r4,zero,r4
   41524:	01c00044 	movi	r7,1
   41528:	003fe306 	br	414b8 <_gp+0xfffe5d90>
   4152c:	00c00044 	movi	r3,1
   41530:	003fee06 	br	414ec <_gp+0xfffe5dc4>

00041534 <__modsi3>:
   41534:	20001716 	blt	r4,zero,41594 <__modsi3+0x60>
   41538:	000f883a 	mov	r7,zero
   4153c:	2005883a 	mov	r2,r4
   41540:	28001216 	blt	r5,zero,4158c <__modsi3+0x58>
   41544:	2900162e 	bgeu	r5,r4,415a0 <__modsi3+0x6c>
   41548:	01800804 	movi	r6,32
   4154c:	00c00044 	movi	r3,1
   41550:	00000106 	br	41558 <__modsi3+0x24>
   41554:	30000a26 	beq	r6,zero,41580 <__modsi3+0x4c>
   41558:	294b883a 	add	r5,r5,r5
   4155c:	31bfffc4 	addi	r6,r6,-1
   41560:	18c7883a 	add	r3,r3,r3
   41564:	293ffb36 	bltu	r5,r4,41554 <_gp+0xfffe5e2c>
   41568:	18000526 	beq	r3,zero,41580 <__modsi3+0x4c>
   4156c:	1806d07a 	srli	r3,r3,1
   41570:	11400136 	bltu	r2,r5,41578 <__modsi3+0x44>
   41574:	1145c83a 	sub	r2,r2,r5
   41578:	280ad07a 	srli	r5,r5,1
   4157c:	183ffb1e 	bne	r3,zero,4156c <_gp+0xfffe5e44>
   41580:	38000126 	beq	r7,zero,41588 <__modsi3+0x54>
   41584:	0085c83a 	sub	r2,zero,r2
   41588:	f800283a 	ret
   4158c:	014bc83a 	sub	r5,zero,r5
   41590:	003fec06 	br	41544 <_gp+0xfffe5e1c>
   41594:	0109c83a 	sub	r4,zero,r4
   41598:	01c00044 	movi	r7,1
   4159c:	003fe706 	br	4153c <_gp+0xfffe5e14>
   415a0:	00c00044 	movi	r3,1
   415a4:	003ff106 	br	4156c <_gp+0xfffe5e44>

000415a8 <__udivsi3>:
   415a8:	200d883a 	mov	r6,r4
   415ac:	2900152e 	bgeu	r5,r4,41604 <__udivsi3+0x5c>
   415b0:	28001416 	blt	r5,zero,41604 <__udivsi3+0x5c>
   415b4:	00800804 	movi	r2,32
   415b8:	00c00044 	movi	r3,1
   415bc:	00000206 	br	415c8 <__udivsi3+0x20>
   415c0:	10000e26 	beq	r2,zero,415fc <__udivsi3+0x54>
   415c4:	28000516 	blt	r5,zero,415dc <__udivsi3+0x34>
   415c8:	294b883a 	add	r5,r5,r5
   415cc:	10bfffc4 	addi	r2,r2,-1
   415d0:	18c7883a 	add	r3,r3,r3
   415d4:	293ffa36 	bltu	r5,r4,415c0 <_gp+0xfffe5e98>
   415d8:	18000826 	beq	r3,zero,415fc <__udivsi3+0x54>
   415dc:	0005883a 	mov	r2,zero
   415e0:	31400236 	bltu	r6,r5,415ec <__udivsi3+0x44>
   415e4:	314dc83a 	sub	r6,r6,r5
   415e8:	10c4b03a 	or	r2,r2,r3
   415ec:	1806d07a 	srli	r3,r3,1
   415f0:	280ad07a 	srli	r5,r5,1
   415f4:	183ffa1e 	bne	r3,zero,415e0 <_gp+0xfffe5eb8>
   415f8:	f800283a 	ret
   415fc:	0005883a 	mov	r2,zero
   41600:	f800283a 	ret
   41604:	00c00044 	movi	r3,1
   41608:	003ff406 	br	415dc <_gp+0xfffe5eb4>

0004160c <__umodsi3>:
   4160c:	2005883a 	mov	r2,r4
   41610:	2900122e 	bgeu	r5,r4,4165c <__umodsi3+0x50>
   41614:	28001116 	blt	r5,zero,4165c <__umodsi3+0x50>
   41618:	01800804 	movi	r6,32
   4161c:	00c00044 	movi	r3,1
   41620:	00000206 	br	4162c <__umodsi3+0x20>
   41624:	30000c26 	beq	r6,zero,41658 <__umodsi3+0x4c>
   41628:	28000516 	blt	r5,zero,41640 <__umodsi3+0x34>
   4162c:	294b883a 	add	r5,r5,r5
   41630:	31bfffc4 	addi	r6,r6,-1
   41634:	18c7883a 	add	r3,r3,r3
   41638:	293ffa36 	bltu	r5,r4,41624 <_gp+0xfffe5efc>
   4163c:	18000626 	beq	r3,zero,41658 <__umodsi3+0x4c>
   41640:	1806d07a 	srli	r3,r3,1
   41644:	11400136 	bltu	r2,r5,4164c <__umodsi3+0x40>
   41648:	1145c83a 	sub	r2,r2,r5
   4164c:	280ad07a 	srli	r5,r5,1
   41650:	183ffb1e 	bne	r3,zero,41640 <_gp+0xfffe5f18>
   41654:	f800283a 	ret
   41658:	f800283a 	ret
   4165c:	00c00044 	movi	r3,1
   41660:	003ff706 	br	41640 <_gp+0xfffe5f18>

00041664 <__mulsi3>:
   41664:	0005883a 	mov	r2,zero
   41668:	20000726 	beq	r4,zero,41688 <__mulsi3+0x24>
   4166c:	20c0004c 	andi	r3,r4,1
   41670:	2008d07a 	srli	r4,r4,1
   41674:	18000126 	beq	r3,zero,4167c <__mulsi3+0x18>
   41678:	1145883a 	add	r2,r2,r5
   4167c:	294b883a 	add	r5,r5,r5
   41680:	203ffa1e 	bne	r4,zero,4166c <_gp+0xfffe5f44>
   41684:	f800283a 	ret
   41688:	f800283a 	ret

0004168c <clock>:
   4168c:	00800174 	movhi	r2,5
   41690:	108dcb04 	addi	r2,r2,14124
   41694:	11000017 	ldw	r4,0(r2)
   41698:	defffb04 	addi	sp,sp,-20
   4169c:	d80b883a 	mov	r5,sp
   416a0:	dfc00415 	stw	ra,16(sp)
   416a4:	0043d9c0 	call	43d9c <_times_r>
   416a8:	00ffffc4 	movi	r3,-1
   416ac:	10c00726 	beq	r2,r3,416cc <clock+0x40>
   416b0:	d8c00017 	ldw	r3,0(sp)
   416b4:	d8800117 	ldw	r2,4(sp)
   416b8:	1885883a 	add	r2,r3,r2
   416bc:	d8c00217 	ldw	r3,8(sp)
   416c0:	10c7883a 	add	r3,r2,r3
   416c4:	d8800317 	ldw	r2,12(sp)
   416c8:	1885883a 	add	r2,r3,r2
   416cc:	dfc00417 	ldw	ra,16(sp)
   416d0:	dec00504 	addi	sp,sp,20
   416d4:	f800283a 	ret

000416d8 <_fclose_r>:
   416d8:	28003926 	beq	r5,zero,417c0 <_fclose_r+0xe8>
   416dc:	defffc04 	addi	sp,sp,-16
   416e0:	dc400115 	stw	r17,4(sp)
   416e4:	dc000015 	stw	r16,0(sp)
   416e8:	dfc00315 	stw	ra,12(sp)
   416ec:	dc800215 	stw	r18,8(sp)
   416f0:	2023883a 	mov	r17,r4
   416f4:	2821883a 	mov	r16,r5
   416f8:	20000226 	beq	r4,zero,41704 <_fclose_r+0x2c>
   416fc:	20800e17 	ldw	r2,56(r4)
   41700:	10002726 	beq	r2,zero,417a0 <_fclose_r+0xc8>
   41704:	8080030f 	ldh	r2,12(r16)
   41708:	1000071e 	bne	r2,zero,41728 <_fclose_r+0x50>
   4170c:	0005883a 	mov	r2,zero
   41710:	dfc00317 	ldw	ra,12(sp)
   41714:	dc800217 	ldw	r18,8(sp)
   41718:	dc400117 	ldw	r17,4(sp)
   4171c:	dc000017 	ldw	r16,0(sp)
   41720:	dec00404 	addi	sp,sp,16
   41724:	f800283a 	ret
   41728:	800b883a 	mov	r5,r16
   4172c:	8809883a 	mov	r4,r17
   41730:	00417dc0 	call	417dc <__sflush_r>
   41734:	1025883a 	mov	r18,r2
   41738:	80800b17 	ldw	r2,44(r16)
   4173c:	10000426 	beq	r2,zero,41750 <_fclose_r+0x78>
   41740:	81400717 	ldw	r5,28(r16)
   41744:	8809883a 	mov	r4,r17
   41748:	103ee83a 	callr	r2
   4174c:	10001616 	blt	r2,zero,417a8 <_fclose_r+0xd0>
   41750:	8080030b 	ldhu	r2,12(r16)
   41754:	1080200c 	andi	r2,r2,128
   41758:	1000151e 	bne	r2,zero,417b0 <_fclose_r+0xd8>
   4175c:	81400c17 	ldw	r5,48(r16)
   41760:	28000526 	beq	r5,zero,41778 <_fclose_r+0xa0>
   41764:	80801004 	addi	r2,r16,64
   41768:	28800226 	beq	r5,r2,41774 <_fclose_r+0x9c>
   4176c:	8809883a 	mov	r4,r17
   41770:	00421040 	call	42104 <_free_r>
   41774:	80000c15 	stw	zero,48(r16)
   41778:	81401117 	ldw	r5,68(r16)
   4177c:	28000326 	beq	r5,zero,4178c <_fclose_r+0xb4>
   41780:	8809883a 	mov	r4,r17
   41784:	00421040 	call	42104 <_free_r>
   41788:	80001115 	stw	zero,68(r16)
   4178c:	0041df40 	call	41df4 <__sfp_lock_acquire>
   41790:	8000030d 	sth	zero,12(r16)
   41794:	0041df80 	call	41df8 <__sfp_lock_release>
   41798:	9005883a 	mov	r2,r18
   4179c:	003fdc06 	br	41710 <_gp+0xfffe5fe8>
   417a0:	0041de40 	call	41de4 <__sinit>
   417a4:	003fd706 	br	41704 <_gp+0xfffe5fdc>
   417a8:	04bfffc4 	movi	r18,-1
   417ac:	003fe806 	br	41750 <_gp+0xfffe6028>
   417b0:	81400417 	ldw	r5,16(r16)
   417b4:	8809883a 	mov	r4,r17
   417b8:	00421040 	call	42104 <_free_r>
   417bc:	003fe706 	br	4175c <_gp+0xfffe6034>
   417c0:	0005883a 	mov	r2,zero
   417c4:	f800283a 	ret

000417c8 <fclose>:
   417c8:	00800174 	movhi	r2,5
   417cc:	108dcb04 	addi	r2,r2,14124
   417d0:	200b883a 	mov	r5,r4
   417d4:	11000017 	ldw	r4,0(r2)
   417d8:	00416d81 	jmpi	416d8 <_fclose_r>

000417dc <__sflush_r>:
   417dc:	2880030b 	ldhu	r2,12(r5)
   417e0:	defffb04 	addi	sp,sp,-20
   417e4:	dcc00315 	stw	r19,12(sp)
   417e8:	dc400115 	stw	r17,4(sp)
   417ec:	dfc00415 	stw	ra,16(sp)
   417f0:	dc800215 	stw	r18,8(sp)
   417f4:	dc000015 	stw	r16,0(sp)
   417f8:	10c0020c 	andi	r3,r2,8
   417fc:	2823883a 	mov	r17,r5
   41800:	2027883a 	mov	r19,r4
   41804:	1800311e 	bne	r3,zero,418cc <__sflush_r+0xf0>
   41808:	28c00117 	ldw	r3,4(r5)
   4180c:	10820014 	ori	r2,r2,2048
   41810:	2880030d 	sth	r2,12(r5)
   41814:	00c04b0e 	bge	zero,r3,41944 <__sflush_r+0x168>
   41818:	8a000a17 	ldw	r8,40(r17)
   4181c:	40002326 	beq	r8,zero,418ac <__sflush_r+0xd0>
   41820:	9c000017 	ldw	r16,0(r19)
   41824:	10c4000c 	andi	r3,r2,4096
   41828:	98000015 	stw	zero,0(r19)
   4182c:	18004826 	beq	r3,zero,41950 <__sflush_r+0x174>
   41830:	89801417 	ldw	r6,80(r17)
   41834:	10c0010c 	andi	r3,r2,4
   41838:	18000626 	beq	r3,zero,41854 <__sflush_r+0x78>
   4183c:	88c00117 	ldw	r3,4(r17)
   41840:	88800c17 	ldw	r2,48(r17)
   41844:	30cdc83a 	sub	r6,r6,r3
   41848:	10000226 	beq	r2,zero,41854 <__sflush_r+0x78>
   4184c:	88800f17 	ldw	r2,60(r17)
   41850:	308dc83a 	sub	r6,r6,r2
   41854:	89400717 	ldw	r5,28(r17)
   41858:	000f883a 	mov	r7,zero
   4185c:	9809883a 	mov	r4,r19
   41860:	403ee83a 	callr	r8
   41864:	00ffffc4 	movi	r3,-1
   41868:	10c04426 	beq	r2,r3,4197c <__sflush_r+0x1a0>
   4186c:	88c0030b 	ldhu	r3,12(r17)
   41870:	89000417 	ldw	r4,16(r17)
   41874:	88000115 	stw	zero,4(r17)
   41878:	197dffcc 	andi	r5,r3,63487
   4187c:	8940030d 	sth	r5,12(r17)
   41880:	89000015 	stw	r4,0(r17)
   41884:	18c4000c 	andi	r3,r3,4096
   41888:	18002c1e 	bne	r3,zero,4193c <__sflush_r+0x160>
   4188c:	89400c17 	ldw	r5,48(r17)
   41890:	9c000015 	stw	r16,0(r19)
   41894:	28000526 	beq	r5,zero,418ac <__sflush_r+0xd0>
   41898:	88801004 	addi	r2,r17,64
   4189c:	28800226 	beq	r5,r2,418a8 <__sflush_r+0xcc>
   418a0:	9809883a 	mov	r4,r19
   418a4:	00421040 	call	42104 <_free_r>
   418a8:	88000c15 	stw	zero,48(r17)
   418ac:	0005883a 	mov	r2,zero
   418b0:	dfc00417 	ldw	ra,16(sp)
   418b4:	dcc00317 	ldw	r19,12(sp)
   418b8:	dc800217 	ldw	r18,8(sp)
   418bc:	dc400117 	ldw	r17,4(sp)
   418c0:	dc000017 	ldw	r16,0(sp)
   418c4:	dec00504 	addi	sp,sp,20
   418c8:	f800283a 	ret
   418cc:	2c800417 	ldw	r18,16(r5)
   418d0:	903ff626 	beq	r18,zero,418ac <_gp+0xfffe6184>
   418d4:	2c000017 	ldw	r16,0(r5)
   418d8:	108000cc 	andi	r2,r2,3
   418dc:	2c800015 	stw	r18,0(r5)
   418e0:	84a1c83a 	sub	r16,r16,r18
   418e4:	1000131e 	bne	r2,zero,41934 <__sflush_r+0x158>
   418e8:	28800517 	ldw	r2,20(r5)
   418ec:	88800215 	stw	r2,8(r17)
   418f0:	04000316 	blt	zero,r16,41900 <__sflush_r+0x124>
   418f4:	003fed06 	br	418ac <_gp+0xfffe6184>
   418f8:	90a5883a 	add	r18,r18,r2
   418fc:	043feb0e 	bge	zero,r16,418ac <_gp+0xfffe6184>
   41900:	88800917 	ldw	r2,36(r17)
   41904:	89400717 	ldw	r5,28(r17)
   41908:	800f883a 	mov	r7,r16
   4190c:	900d883a 	mov	r6,r18
   41910:	9809883a 	mov	r4,r19
   41914:	103ee83a 	callr	r2
   41918:	80a1c83a 	sub	r16,r16,r2
   4191c:	00bff616 	blt	zero,r2,418f8 <_gp+0xfffe61d0>
   41920:	88c0030b 	ldhu	r3,12(r17)
   41924:	00bfffc4 	movi	r2,-1
   41928:	18c01014 	ori	r3,r3,64
   4192c:	88c0030d 	sth	r3,12(r17)
   41930:	003fdf06 	br	418b0 <_gp+0xfffe6188>
   41934:	0005883a 	mov	r2,zero
   41938:	003fec06 	br	418ec <_gp+0xfffe61c4>
   4193c:	88801415 	stw	r2,80(r17)
   41940:	003fd206 	br	4188c <_gp+0xfffe6164>
   41944:	28c00f17 	ldw	r3,60(r5)
   41948:	00ffb316 	blt	zero,r3,41818 <_gp+0xfffe60f0>
   4194c:	003fd706 	br	418ac <_gp+0xfffe6184>
   41950:	89400717 	ldw	r5,28(r17)
   41954:	000d883a 	mov	r6,zero
   41958:	01c00044 	movi	r7,1
   4195c:	9809883a 	mov	r4,r19
   41960:	403ee83a 	callr	r8
   41964:	100d883a 	mov	r6,r2
   41968:	00bfffc4 	movi	r2,-1
   4196c:	30801426 	beq	r6,r2,419c0 <__sflush_r+0x1e4>
   41970:	8880030b 	ldhu	r2,12(r17)
   41974:	8a000a17 	ldw	r8,40(r17)
   41978:	003fae06 	br	41834 <_gp+0xfffe610c>
   4197c:	98c00017 	ldw	r3,0(r19)
   41980:	183fba26 	beq	r3,zero,4186c <_gp+0xfffe6144>
   41984:	01000744 	movi	r4,29
   41988:	19000626 	beq	r3,r4,419a4 <__sflush_r+0x1c8>
   4198c:	01000584 	movi	r4,22
   41990:	19000426 	beq	r3,r4,419a4 <__sflush_r+0x1c8>
   41994:	88c0030b 	ldhu	r3,12(r17)
   41998:	18c01014 	ori	r3,r3,64
   4199c:	88c0030d 	sth	r3,12(r17)
   419a0:	003fc306 	br	418b0 <_gp+0xfffe6188>
   419a4:	8880030b 	ldhu	r2,12(r17)
   419a8:	88c00417 	ldw	r3,16(r17)
   419ac:	88000115 	stw	zero,4(r17)
   419b0:	10bdffcc 	andi	r2,r2,63487
   419b4:	8880030d 	sth	r2,12(r17)
   419b8:	88c00015 	stw	r3,0(r17)
   419bc:	003fb306 	br	4188c <_gp+0xfffe6164>
   419c0:	98800017 	ldw	r2,0(r19)
   419c4:	103fea26 	beq	r2,zero,41970 <_gp+0xfffe6248>
   419c8:	00c00744 	movi	r3,29
   419cc:	10c00226 	beq	r2,r3,419d8 <__sflush_r+0x1fc>
   419d0:	00c00584 	movi	r3,22
   419d4:	10c0031e 	bne	r2,r3,419e4 <__sflush_r+0x208>
   419d8:	9c000015 	stw	r16,0(r19)
   419dc:	0005883a 	mov	r2,zero
   419e0:	003fb306 	br	418b0 <_gp+0xfffe6188>
   419e4:	88c0030b 	ldhu	r3,12(r17)
   419e8:	3005883a 	mov	r2,r6
   419ec:	18c01014 	ori	r3,r3,64
   419f0:	88c0030d 	sth	r3,12(r17)
   419f4:	003fae06 	br	418b0 <_gp+0xfffe6188>

000419f8 <_fflush_r>:
   419f8:	defffd04 	addi	sp,sp,-12
   419fc:	dc000115 	stw	r16,4(sp)
   41a00:	dfc00215 	stw	ra,8(sp)
   41a04:	2021883a 	mov	r16,r4
   41a08:	20000226 	beq	r4,zero,41a14 <_fflush_r+0x1c>
   41a0c:	20800e17 	ldw	r2,56(r4)
   41a10:	10000c26 	beq	r2,zero,41a44 <_fflush_r+0x4c>
   41a14:	2880030f 	ldh	r2,12(r5)
   41a18:	1000051e 	bne	r2,zero,41a30 <_fflush_r+0x38>
   41a1c:	0005883a 	mov	r2,zero
   41a20:	dfc00217 	ldw	ra,8(sp)
   41a24:	dc000117 	ldw	r16,4(sp)
   41a28:	dec00304 	addi	sp,sp,12
   41a2c:	f800283a 	ret
   41a30:	8009883a 	mov	r4,r16
   41a34:	dfc00217 	ldw	ra,8(sp)
   41a38:	dc000117 	ldw	r16,4(sp)
   41a3c:	dec00304 	addi	sp,sp,12
   41a40:	00417dc1 	jmpi	417dc <__sflush_r>
   41a44:	d9400015 	stw	r5,0(sp)
   41a48:	0041de40 	call	41de4 <__sinit>
   41a4c:	d9400017 	ldw	r5,0(sp)
   41a50:	003ff006 	br	41a14 <_gp+0xfffe62ec>

00041a54 <fflush>:
   41a54:	20000526 	beq	r4,zero,41a6c <fflush+0x18>
   41a58:	00800174 	movhi	r2,5
   41a5c:	108dcb04 	addi	r2,r2,14124
   41a60:	200b883a 	mov	r5,r4
   41a64:	11000017 	ldw	r4,0(r2)
   41a68:	00419f81 	jmpi	419f8 <_fflush_r>
   41a6c:	00800174 	movhi	r2,5
   41a70:	108dca04 	addi	r2,r2,14120
   41a74:	11000017 	ldw	r4,0(r2)
   41a78:	01400134 	movhi	r5,4
   41a7c:	29467e04 	addi	r5,r5,6648
   41a80:	00429b41 	jmpi	429b4 <_fwalk_reent>

00041a84 <__fp_unlock>:
   41a84:	0005883a 	mov	r2,zero
   41a88:	f800283a 	ret

00041a8c <_cleanup_r>:
   41a8c:	01400134 	movhi	r5,4
   41a90:	2945b604 	addi	r5,r5,5848
   41a94:	00429b41 	jmpi	429b4 <_fwalk_reent>

00041a98 <__sinit.part.1>:
   41a98:	defff704 	addi	sp,sp,-36
   41a9c:	00c00134 	movhi	r3,4
   41aa0:	dfc00815 	stw	ra,32(sp)
   41aa4:	ddc00715 	stw	r23,28(sp)
   41aa8:	dd800615 	stw	r22,24(sp)
   41aac:	dd400515 	stw	r21,20(sp)
   41ab0:	dd000415 	stw	r20,16(sp)
   41ab4:	dcc00315 	stw	r19,12(sp)
   41ab8:	dc800215 	stw	r18,8(sp)
   41abc:	dc400115 	stw	r17,4(sp)
   41ac0:	dc000015 	stw	r16,0(sp)
   41ac4:	18c6a304 	addi	r3,r3,6796
   41ac8:	24000117 	ldw	r16,4(r4)
   41acc:	20c00f15 	stw	r3,60(r4)
   41ad0:	2080bb04 	addi	r2,r4,748
   41ad4:	00c000c4 	movi	r3,3
   41ad8:	20c0b915 	stw	r3,740(r4)
   41adc:	2080ba15 	stw	r2,744(r4)
   41ae0:	2000b815 	stw	zero,736(r4)
   41ae4:	05c00204 	movi	r23,8
   41ae8:	00800104 	movi	r2,4
   41aec:	2025883a 	mov	r18,r4
   41af0:	b80d883a 	mov	r6,r23
   41af4:	81001704 	addi	r4,r16,92
   41af8:	000b883a 	mov	r5,zero
   41afc:	80000015 	stw	zero,0(r16)
   41b00:	80000115 	stw	zero,4(r16)
   41b04:	80000215 	stw	zero,8(r16)
   41b08:	8080030d 	sth	r2,12(r16)
   41b0c:	80001915 	stw	zero,100(r16)
   41b10:	8000038d 	sth	zero,14(r16)
   41b14:	80000415 	stw	zero,16(r16)
   41b18:	80000515 	stw	zero,20(r16)
   41b1c:	80000615 	stw	zero,24(r16)
   41b20:	00434400 	call	43440 <memset>
   41b24:	05800134 	movhi	r22,4
   41b28:	94400217 	ldw	r17,8(r18)
   41b2c:	05400134 	movhi	r21,4
   41b30:	05000134 	movhi	r20,4
   41b34:	04c00134 	movhi	r19,4
   41b38:	b58ead04 	addi	r22,r22,15028
   41b3c:	ad4ec404 	addi	r21,r21,15120
   41b40:	a50ee304 	addi	r20,r20,15244
   41b44:	9ccefa04 	addi	r19,r19,15336
   41b48:	85800815 	stw	r22,32(r16)
   41b4c:	85400915 	stw	r21,36(r16)
   41b50:	85000a15 	stw	r20,40(r16)
   41b54:	84c00b15 	stw	r19,44(r16)
   41b58:	84000715 	stw	r16,28(r16)
   41b5c:	00800284 	movi	r2,10
   41b60:	8880030d 	sth	r2,12(r17)
   41b64:	00800044 	movi	r2,1
   41b68:	b80d883a 	mov	r6,r23
   41b6c:	89001704 	addi	r4,r17,92
   41b70:	000b883a 	mov	r5,zero
   41b74:	88000015 	stw	zero,0(r17)
   41b78:	88000115 	stw	zero,4(r17)
   41b7c:	88000215 	stw	zero,8(r17)
   41b80:	88001915 	stw	zero,100(r17)
   41b84:	8880038d 	sth	r2,14(r17)
   41b88:	88000415 	stw	zero,16(r17)
   41b8c:	88000515 	stw	zero,20(r17)
   41b90:	88000615 	stw	zero,24(r17)
   41b94:	00434400 	call	43440 <memset>
   41b98:	94000317 	ldw	r16,12(r18)
   41b9c:	00800484 	movi	r2,18
   41ba0:	8c400715 	stw	r17,28(r17)
   41ba4:	8d800815 	stw	r22,32(r17)
   41ba8:	8d400915 	stw	r21,36(r17)
   41bac:	8d000a15 	stw	r20,40(r17)
   41bb0:	8cc00b15 	stw	r19,44(r17)
   41bb4:	8080030d 	sth	r2,12(r16)
   41bb8:	00800084 	movi	r2,2
   41bbc:	80000015 	stw	zero,0(r16)
   41bc0:	80000115 	stw	zero,4(r16)
   41bc4:	80000215 	stw	zero,8(r16)
   41bc8:	80001915 	stw	zero,100(r16)
   41bcc:	8080038d 	sth	r2,14(r16)
   41bd0:	80000415 	stw	zero,16(r16)
   41bd4:	80000515 	stw	zero,20(r16)
   41bd8:	80000615 	stw	zero,24(r16)
   41bdc:	b80d883a 	mov	r6,r23
   41be0:	000b883a 	mov	r5,zero
   41be4:	81001704 	addi	r4,r16,92
   41be8:	00434400 	call	43440 <memset>
   41bec:	00800044 	movi	r2,1
   41bf0:	84000715 	stw	r16,28(r16)
   41bf4:	85800815 	stw	r22,32(r16)
   41bf8:	85400915 	stw	r21,36(r16)
   41bfc:	85000a15 	stw	r20,40(r16)
   41c00:	84c00b15 	stw	r19,44(r16)
   41c04:	90800e15 	stw	r2,56(r18)
   41c08:	dfc00817 	ldw	ra,32(sp)
   41c0c:	ddc00717 	ldw	r23,28(sp)
   41c10:	dd800617 	ldw	r22,24(sp)
   41c14:	dd400517 	ldw	r21,20(sp)
   41c18:	dd000417 	ldw	r20,16(sp)
   41c1c:	dcc00317 	ldw	r19,12(sp)
   41c20:	dc800217 	ldw	r18,8(sp)
   41c24:	dc400117 	ldw	r17,4(sp)
   41c28:	dc000017 	ldw	r16,0(sp)
   41c2c:	dec00904 	addi	sp,sp,36
   41c30:	f800283a 	ret

00041c34 <__fp_lock>:
   41c34:	0005883a 	mov	r2,zero
   41c38:	f800283a 	ret

00041c3c <__sfmoreglue>:
   41c3c:	defffc04 	addi	sp,sp,-16
   41c40:	dc800215 	stw	r18,8(sp)
   41c44:	2825883a 	mov	r18,r5
   41c48:	dc000015 	stw	r16,0(sp)
   41c4c:	01401a04 	movi	r5,104
   41c50:	2021883a 	mov	r16,r4
   41c54:	913fffc4 	addi	r4,r18,-1
   41c58:	dfc00315 	stw	ra,12(sp)
   41c5c:	dc400115 	stw	r17,4(sp)
   41c60:	00416640 	call	41664 <__mulsi3>
   41c64:	8009883a 	mov	r4,r16
   41c68:	11401d04 	addi	r5,r2,116
   41c6c:	1023883a 	mov	r17,r2
   41c70:	0042c340 	call	42c34 <_malloc_r>
   41c74:	1021883a 	mov	r16,r2
   41c78:	10000726 	beq	r2,zero,41c98 <__sfmoreglue+0x5c>
   41c7c:	11000304 	addi	r4,r2,12
   41c80:	10000015 	stw	zero,0(r2)
   41c84:	14800115 	stw	r18,4(r2)
   41c88:	11000215 	stw	r4,8(r2)
   41c8c:	89801a04 	addi	r6,r17,104
   41c90:	000b883a 	mov	r5,zero
   41c94:	00434400 	call	43440 <memset>
   41c98:	8005883a 	mov	r2,r16
   41c9c:	dfc00317 	ldw	ra,12(sp)
   41ca0:	dc800217 	ldw	r18,8(sp)
   41ca4:	dc400117 	ldw	r17,4(sp)
   41ca8:	dc000017 	ldw	r16,0(sp)
   41cac:	dec00404 	addi	sp,sp,16
   41cb0:	f800283a 	ret

00041cb4 <__sfp>:
   41cb4:	defffb04 	addi	sp,sp,-20
   41cb8:	dc000015 	stw	r16,0(sp)
   41cbc:	04000174 	movhi	r16,5
   41cc0:	840dca04 	addi	r16,r16,14120
   41cc4:	dcc00315 	stw	r19,12(sp)
   41cc8:	2027883a 	mov	r19,r4
   41ccc:	81000017 	ldw	r4,0(r16)
   41cd0:	dfc00415 	stw	ra,16(sp)
   41cd4:	dc800215 	stw	r18,8(sp)
   41cd8:	20800e17 	ldw	r2,56(r4)
   41cdc:	dc400115 	stw	r17,4(sp)
   41ce0:	1000021e 	bne	r2,zero,41cec <__sfp+0x38>
   41ce4:	0041a980 	call	41a98 <__sinit.part.1>
   41ce8:	81000017 	ldw	r4,0(r16)
   41cec:	2480b804 	addi	r18,r4,736
   41cf0:	047fffc4 	movi	r17,-1
   41cf4:	91000117 	ldw	r4,4(r18)
   41cf8:	94000217 	ldw	r16,8(r18)
   41cfc:	213fffc4 	addi	r4,r4,-1
   41d00:	20000a16 	blt	r4,zero,41d2c <__sfp+0x78>
   41d04:	8080030f 	ldh	r2,12(r16)
   41d08:	10000c26 	beq	r2,zero,41d3c <__sfp+0x88>
   41d0c:	80c01d04 	addi	r3,r16,116
   41d10:	00000206 	br	41d1c <__sfp+0x68>
   41d14:	18bfe60f 	ldh	r2,-104(r3)
   41d18:	10000826 	beq	r2,zero,41d3c <__sfp+0x88>
   41d1c:	213fffc4 	addi	r4,r4,-1
   41d20:	1c3ffd04 	addi	r16,r3,-12
   41d24:	18c01a04 	addi	r3,r3,104
   41d28:	247ffa1e 	bne	r4,r17,41d14 <_gp+0xfffe65ec>
   41d2c:	90800017 	ldw	r2,0(r18)
   41d30:	10001d26 	beq	r2,zero,41da8 <__sfp+0xf4>
   41d34:	1025883a 	mov	r18,r2
   41d38:	003fee06 	br	41cf4 <_gp+0xfffe65cc>
   41d3c:	00bfffc4 	movi	r2,-1
   41d40:	8080038d 	sth	r2,14(r16)
   41d44:	00800044 	movi	r2,1
   41d48:	8080030d 	sth	r2,12(r16)
   41d4c:	80001915 	stw	zero,100(r16)
   41d50:	80000015 	stw	zero,0(r16)
   41d54:	80000215 	stw	zero,8(r16)
   41d58:	80000115 	stw	zero,4(r16)
   41d5c:	80000415 	stw	zero,16(r16)
   41d60:	80000515 	stw	zero,20(r16)
   41d64:	80000615 	stw	zero,24(r16)
   41d68:	01800204 	movi	r6,8
   41d6c:	000b883a 	mov	r5,zero
   41d70:	81001704 	addi	r4,r16,92
   41d74:	00434400 	call	43440 <memset>
   41d78:	8005883a 	mov	r2,r16
   41d7c:	80000c15 	stw	zero,48(r16)
   41d80:	80000d15 	stw	zero,52(r16)
   41d84:	80001115 	stw	zero,68(r16)
   41d88:	80001215 	stw	zero,72(r16)
   41d8c:	dfc00417 	ldw	ra,16(sp)
   41d90:	dcc00317 	ldw	r19,12(sp)
   41d94:	dc800217 	ldw	r18,8(sp)
   41d98:	dc400117 	ldw	r17,4(sp)
   41d9c:	dc000017 	ldw	r16,0(sp)
   41da0:	dec00504 	addi	sp,sp,20
   41da4:	f800283a 	ret
   41da8:	01400104 	movi	r5,4
   41dac:	9809883a 	mov	r4,r19
   41db0:	0041c3c0 	call	41c3c <__sfmoreglue>
   41db4:	90800015 	stw	r2,0(r18)
   41db8:	103fde1e 	bne	r2,zero,41d34 <_gp+0xfffe660c>
   41dbc:	00800304 	movi	r2,12
   41dc0:	98800015 	stw	r2,0(r19)
   41dc4:	0005883a 	mov	r2,zero
   41dc8:	003ff006 	br	41d8c <_gp+0xfffe6664>

00041dcc <_cleanup>:
   41dcc:	00800174 	movhi	r2,5
   41dd0:	108dca04 	addi	r2,r2,14120
   41dd4:	11000017 	ldw	r4,0(r2)
   41dd8:	01400134 	movhi	r5,4
   41ddc:	2945b604 	addi	r5,r5,5848
   41de0:	00429b41 	jmpi	429b4 <_fwalk_reent>

00041de4 <__sinit>:
   41de4:	20800e17 	ldw	r2,56(r4)
   41de8:	10000126 	beq	r2,zero,41df0 <__sinit+0xc>
   41dec:	f800283a 	ret
   41df0:	0041a981 	jmpi	41a98 <__sinit.part.1>

00041df4 <__sfp_lock_acquire>:
   41df4:	f800283a 	ret

00041df8 <__sfp_lock_release>:
   41df8:	f800283a 	ret

00041dfc <__sinit_lock_acquire>:
   41dfc:	f800283a 	ret

00041e00 <__sinit_lock_release>:
   41e00:	f800283a 	ret

00041e04 <__fp_lock_all>:
   41e04:	00800174 	movhi	r2,5
   41e08:	108dcb04 	addi	r2,r2,14124
   41e0c:	11000017 	ldw	r4,0(r2)
   41e10:	01400134 	movhi	r5,4
   41e14:	29470d04 	addi	r5,r5,7220
   41e18:	00428f01 	jmpi	428f0 <_fwalk>

00041e1c <__fp_unlock_all>:
   41e1c:	00800174 	movhi	r2,5
   41e20:	108dcb04 	addi	r2,r2,14124
   41e24:	11000017 	ldw	r4,0(r2)
   41e28:	01400134 	movhi	r5,4
   41e2c:	2946a104 	addi	r5,r5,6788
   41e30:	00428f01 	jmpi	428f0 <_fwalk>

00041e34 <_fopen_r>:
   41e34:	defffa04 	addi	sp,sp,-24
   41e38:	3005883a 	mov	r2,r6
   41e3c:	dcc00415 	stw	r19,16(sp)
   41e40:	d80d883a 	mov	r6,sp
   41e44:	2827883a 	mov	r19,r5
   41e48:	100b883a 	mov	r5,r2
   41e4c:	dc800315 	stw	r18,12(sp)
   41e50:	dfc00515 	stw	ra,20(sp)
   41e54:	dc400215 	stw	r17,8(sp)
   41e58:	dc000115 	stw	r16,4(sp)
   41e5c:	2025883a 	mov	r18,r4
   41e60:	0047d680 	call	47d68 <__sflags>
   41e64:	10002726 	beq	r2,zero,41f04 <_fopen_r+0xd0>
   41e68:	9009883a 	mov	r4,r18
   41e6c:	1023883a 	mov	r17,r2
   41e70:	0041cb40 	call	41cb4 <__sfp>
   41e74:	1021883a 	mov	r16,r2
   41e78:	10002226 	beq	r2,zero,41f04 <_fopen_r+0xd0>
   41e7c:	d9800017 	ldw	r6,0(sp)
   41e80:	01c06d84 	movi	r7,438
   41e84:	980b883a 	mov	r5,r19
   41e88:	9009883a 	mov	r4,r18
   41e8c:	00435680 	call	43568 <_open_r>
   41e90:	10001916 	blt	r2,zero,41ef8 <_fopen_r+0xc4>
   41e94:	8080038d 	sth	r2,14(r16)
   41e98:	00800134 	movhi	r2,4
   41e9c:	108ead04 	addi	r2,r2,15028
   41ea0:	80800815 	stw	r2,32(r16)
   41ea4:	00800134 	movhi	r2,4
   41ea8:	108ec404 	addi	r2,r2,15120
   41eac:	80800915 	stw	r2,36(r16)
   41eb0:	00800134 	movhi	r2,4
   41eb4:	108ee304 	addi	r2,r2,15244
   41eb8:	80800a15 	stw	r2,40(r16)
   41ebc:	00800134 	movhi	r2,4
   41ec0:	108efa04 	addi	r2,r2,15336
   41ec4:	8440030d 	sth	r17,12(r16)
   41ec8:	84000715 	stw	r16,28(r16)
   41ecc:	80800b15 	stw	r2,44(r16)
   41ed0:	8c40400c 	andi	r17,r17,256
   41ed4:	88000d1e 	bne	r17,zero,41f0c <_fopen_r+0xd8>
   41ed8:	8005883a 	mov	r2,r16
   41edc:	dfc00517 	ldw	ra,20(sp)
   41ee0:	dcc00417 	ldw	r19,16(sp)
   41ee4:	dc800317 	ldw	r18,12(sp)
   41ee8:	dc400217 	ldw	r17,8(sp)
   41eec:	dc000117 	ldw	r16,4(sp)
   41ef0:	dec00604 	addi	sp,sp,24
   41ef4:	f800283a 	ret
   41ef8:	0041df40 	call	41df4 <__sfp_lock_acquire>
   41efc:	8000030d 	sth	zero,12(r16)
   41f00:	0041df80 	call	41df8 <__sfp_lock_release>
   41f04:	0005883a 	mov	r2,zero
   41f08:	003ff406 	br	41edc <_gp+0xfffe67b4>
   41f0c:	01c00084 	movi	r7,2
   41f10:	000d883a 	mov	r6,zero
   41f14:	800b883a 	mov	r5,r16
   41f18:	9009883a 	mov	r4,r18
   41f1c:	00424140 	call	42414 <_fseek_r>
   41f20:	8005883a 	mov	r2,r16
   41f24:	003fed06 	br	41edc <_gp+0xfffe67b4>

00041f28 <fopen>:
   41f28:	00800174 	movhi	r2,5
   41f2c:	108dcb04 	addi	r2,r2,14124
   41f30:	280d883a 	mov	r6,r5
   41f34:	200b883a 	mov	r5,r4
   41f38:	11000017 	ldw	r4,0(r2)
   41f3c:	0041e341 	jmpi	41e34 <_fopen_r>

00041f40 <_fputc_r>:
   41f40:	defffc04 	addi	sp,sp,-16
   41f44:	dc000215 	stw	r16,8(sp)
   41f48:	dfc00315 	stw	ra,12(sp)
   41f4c:	2021883a 	mov	r16,r4
   41f50:	20000726 	beq	r4,zero,41f70 <_fputc_r+0x30>
   41f54:	20800e17 	ldw	r2,56(r4)
   41f58:	1000051e 	bne	r2,zero,41f70 <_fputc_r+0x30>
   41f5c:	d9400015 	stw	r5,0(sp)
   41f60:	d9800115 	stw	r6,4(sp)
   41f64:	0041de40 	call	41de4 <__sinit>
   41f68:	d9800117 	ldw	r6,4(sp)
   41f6c:	d9400017 	ldw	r5,0(sp)
   41f70:	8009883a 	mov	r4,r16
   41f74:	dfc00317 	ldw	ra,12(sp)
   41f78:	dc000217 	ldw	r16,8(sp)
   41f7c:	dec00404 	addi	sp,sp,16
   41f80:	00436341 	jmpi	43634 <_putc_r>

00041f84 <fputc>:
   41f84:	00800174 	movhi	r2,5
   41f88:	defffc04 	addi	sp,sp,-16
   41f8c:	108dcb04 	addi	r2,r2,14124
   41f90:	dc000115 	stw	r16,4(sp)
   41f94:	14000017 	ldw	r16,0(r2)
   41f98:	dc400215 	stw	r17,8(sp)
   41f9c:	dfc00315 	stw	ra,12(sp)
   41fa0:	2023883a 	mov	r17,r4
   41fa4:	80000626 	beq	r16,zero,41fc0 <fputc+0x3c>
   41fa8:	80800e17 	ldw	r2,56(r16)
   41fac:	1000041e 	bne	r2,zero,41fc0 <fputc+0x3c>
   41fb0:	8009883a 	mov	r4,r16
   41fb4:	d9400015 	stw	r5,0(sp)
   41fb8:	0041de40 	call	41de4 <__sinit>
   41fbc:	d9400017 	ldw	r5,0(sp)
   41fc0:	280d883a 	mov	r6,r5
   41fc4:	8009883a 	mov	r4,r16
   41fc8:	880b883a 	mov	r5,r17
   41fcc:	dfc00317 	ldw	ra,12(sp)
   41fd0:	dc400217 	ldw	r17,8(sp)
   41fd4:	dc000117 	ldw	r16,4(sp)
   41fd8:	dec00404 	addi	sp,sp,16
   41fdc:	00436341 	jmpi	43634 <_putc_r>

00041fe0 <_malloc_trim_r>:
   41fe0:	defffb04 	addi	sp,sp,-20
   41fe4:	dcc00315 	stw	r19,12(sp)
   41fe8:	04c00174 	movhi	r19,5
   41fec:	dc800215 	stw	r18,8(sp)
   41ff0:	dc400115 	stw	r17,4(sp)
   41ff4:	dc000015 	stw	r16,0(sp)
   41ff8:	dfc00415 	stw	ra,16(sp)
   41ffc:	2821883a 	mov	r16,r5
   42000:	9cc81e04 	addi	r19,r19,8312
   42004:	2025883a 	mov	r18,r4
   42008:	004eaa80 	call	4eaa8 <__malloc_lock>
   4200c:	98800217 	ldw	r2,8(r19)
   42010:	14400117 	ldw	r17,4(r2)
   42014:	00bfff04 	movi	r2,-4
   42018:	88a2703a 	and	r17,r17,r2
   4201c:	8c21c83a 	sub	r16,r17,r16
   42020:	8403fbc4 	addi	r16,r16,4079
   42024:	8020d33a 	srli	r16,r16,12
   42028:	0083ffc4 	movi	r2,4095
   4202c:	843fffc4 	addi	r16,r16,-1
   42030:	8020933a 	slli	r16,r16,12
   42034:	1400060e 	bge	r2,r16,42050 <_malloc_trim_r+0x70>
   42038:	000b883a 	mov	r5,zero
   4203c:	9009883a 	mov	r4,r18
   42040:	0043a600 	call	43a60 <_sbrk_r>
   42044:	98c00217 	ldw	r3,8(r19)
   42048:	1c47883a 	add	r3,r3,r17
   4204c:	10c00a26 	beq	r2,r3,42078 <_malloc_trim_r+0x98>
   42050:	9009883a 	mov	r4,r18
   42054:	004eacc0 	call	4eacc <__malloc_unlock>
   42058:	0005883a 	mov	r2,zero
   4205c:	dfc00417 	ldw	ra,16(sp)
   42060:	dcc00317 	ldw	r19,12(sp)
   42064:	dc800217 	ldw	r18,8(sp)
   42068:	dc400117 	ldw	r17,4(sp)
   4206c:	dc000017 	ldw	r16,0(sp)
   42070:	dec00504 	addi	sp,sp,20
   42074:	f800283a 	ret
   42078:	040bc83a 	sub	r5,zero,r16
   4207c:	9009883a 	mov	r4,r18
   42080:	0043a600 	call	43a60 <_sbrk_r>
   42084:	00ffffc4 	movi	r3,-1
   42088:	10c00d26 	beq	r2,r3,420c0 <_malloc_trim_r+0xe0>
   4208c:	00c00174 	movhi	r3,5
   42090:	18d4f804 	addi	r3,r3,21472
   42094:	18800017 	ldw	r2,0(r3)
   42098:	99000217 	ldw	r4,8(r19)
   4209c:	8c23c83a 	sub	r17,r17,r16
   420a0:	8c400054 	ori	r17,r17,1
   420a4:	1421c83a 	sub	r16,r2,r16
   420a8:	24400115 	stw	r17,4(r4)
   420ac:	9009883a 	mov	r4,r18
   420b0:	1c000015 	stw	r16,0(r3)
   420b4:	004eacc0 	call	4eacc <__malloc_unlock>
   420b8:	00800044 	movi	r2,1
   420bc:	003fe706 	br	4205c <_gp+0xfffe6934>
   420c0:	000b883a 	mov	r5,zero
   420c4:	9009883a 	mov	r4,r18
   420c8:	0043a600 	call	43a60 <_sbrk_r>
   420cc:	99000217 	ldw	r4,8(r19)
   420d0:	014003c4 	movi	r5,15
   420d4:	1107c83a 	sub	r3,r2,r4
   420d8:	28ffdd0e 	bge	r5,r3,42050 <_gp+0xfffe6928>
   420dc:	01400174 	movhi	r5,5
   420e0:	294dcc04 	addi	r5,r5,14128
   420e4:	29400017 	ldw	r5,0(r5)
   420e8:	18c00054 	ori	r3,r3,1
   420ec:	20c00115 	stw	r3,4(r4)
   420f0:	00c00174 	movhi	r3,5
   420f4:	1145c83a 	sub	r2,r2,r5
   420f8:	18d4f804 	addi	r3,r3,21472
   420fc:	18800015 	stw	r2,0(r3)
   42100:	003fd306 	br	42050 <_gp+0xfffe6928>

00042104 <_free_r>:
   42104:	28004126 	beq	r5,zero,4220c <_free_r+0x108>
   42108:	defffd04 	addi	sp,sp,-12
   4210c:	dc400115 	stw	r17,4(sp)
   42110:	dc000015 	stw	r16,0(sp)
   42114:	2023883a 	mov	r17,r4
   42118:	2821883a 	mov	r16,r5
   4211c:	dfc00215 	stw	ra,8(sp)
   42120:	004eaa80 	call	4eaa8 <__malloc_lock>
   42124:	81ffff17 	ldw	r7,-4(r16)
   42128:	00bfff84 	movi	r2,-2
   4212c:	01000174 	movhi	r4,5
   42130:	81bffe04 	addi	r6,r16,-8
   42134:	3884703a 	and	r2,r7,r2
   42138:	21081e04 	addi	r4,r4,8312
   4213c:	308b883a 	add	r5,r6,r2
   42140:	2a400117 	ldw	r9,4(r5)
   42144:	22000217 	ldw	r8,8(r4)
   42148:	00ffff04 	movi	r3,-4
   4214c:	48c6703a 	and	r3,r9,r3
   42150:	2a005726 	beq	r5,r8,422b0 <_free_r+0x1ac>
   42154:	28c00115 	stw	r3,4(r5)
   42158:	39c0004c 	andi	r7,r7,1
   4215c:	3800091e 	bne	r7,zero,42184 <_free_r+0x80>
   42160:	823ffe17 	ldw	r8,-8(r16)
   42164:	22400204 	addi	r9,r4,8
   42168:	320dc83a 	sub	r6,r6,r8
   4216c:	31c00217 	ldw	r7,8(r6)
   42170:	1205883a 	add	r2,r2,r8
   42174:	3a406526 	beq	r7,r9,4230c <_free_r+0x208>
   42178:	32000317 	ldw	r8,12(r6)
   4217c:	3a000315 	stw	r8,12(r7)
   42180:	41c00215 	stw	r7,8(r8)
   42184:	28cf883a 	add	r7,r5,r3
   42188:	39c00117 	ldw	r7,4(r7)
   4218c:	39c0004c 	andi	r7,r7,1
   42190:	38003a26 	beq	r7,zero,4227c <_free_r+0x178>
   42194:	10c00054 	ori	r3,r2,1
   42198:	30c00115 	stw	r3,4(r6)
   4219c:	3087883a 	add	r3,r6,r2
   421a0:	18800015 	stw	r2,0(r3)
   421a4:	00c07fc4 	movi	r3,511
   421a8:	18801936 	bltu	r3,r2,42210 <_free_r+0x10c>
   421ac:	1004d0fa 	srli	r2,r2,3
   421b0:	01c00044 	movi	r7,1
   421b4:	21400117 	ldw	r5,4(r4)
   421b8:	10c00044 	addi	r3,r2,1
   421bc:	18c7883a 	add	r3,r3,r3
   421c0:	1005d0ba 	srai	r2,r2,2
   421c4:	18c7883a 	add	r3,r3,r3
   421c8:	18c7883a 	add	r3,r3,r3
   421cc:	1907883a 	add	r3,r3,r4
   421d0:	3884983a 	sll	r2,r7,r2
   421d4:	19c00017 	ldw	r7,0(r3)
   421d8:	1a3ffe04 	addi	r8,r3,-8
   421dc:	1144b03a 	or	r2,r2,r5
   421e0:	32000315 	stw	r8,12(r6)
   421e4:	31c00215 	stw	r7,8(r6)
   421e8:	20800115 	stw	r2,4(r4)
   421ec:	19800015 	stw	r6,0(r3)
   421f0:	39800315 	stw	r6,12(r7)
   421f4:	8809883a 	mov	r4,r17
   421f8:	dfc00217 	ldw	ra,8(sp)
   421fc:	dc400117 	ldw	r17,4(sp)
   42200:	dc000017 	ldw	r16,0(sp)
   42204:	dec00304 	addi	sp,sp,12
   42208:	004eacc1 	jmpi	4eacc <__malloc_unlock>
   4220c:	f800283a 	ret
   42210:	100ad27a 	srli	r5,r2,9
   42214:	00c00104 	movi	r3,4
   42218:	19404a36 	bltu	r3,r5,42344 <_free_r+0x240>
   4221c:	100ad1ba 	srli	r5,r2,6
   42220:	28c00e44 	addi	r3,r5,57
   42224:	18c7883a 	add	r3,r3,r3
   42228:	29400e04 	addi	r5,r5,56
   4222c:	18c7883a 	add	r3,r3,r3
   42230:	18c7883a 	add	r3,r3,r3
   42234:	1909883a 	add	r4,r3,r4
   42238:	20c00017 	ldw	r3,0(r4)
   4223c:	01c00174 	movhi	r7,5
   42240:	213ffe04 	addi	r4,r4,-8
   42244:	39c81e04 	addi	r7,r7,8312
   42248:	20c04426 	beq	r4,r3,4235c <_free_r+0x258>
   4224c:	01ffff04 	movi	r7,-4
   42250:	19400117 	ldw	r5,4(r3)
   42254:	29ca703a 	and	r5,r5,r7
   42258:	1140022e 	bgeu	r2,r5,42264 <_free_r+0x160>
   4225c:	18c00217 	ldw	r3,8(r3)
   42260:	20fffb1e 	bne	r4,r3,42250 <_gp+0xfffe6b28>
   42264:	19000317 	ldw	r4,12(r3)
   42268:	31000315 	stw	r4,12(r6)
   4226c:	30c00215 	stw	r3,8(r6)
   42270:	21800215 	stw	r6,8(r4)
   42274:	19800315 	stw	r6,12(r3)
   42278:	003fde06 	br	421f4 <_gp+0xfffe6acc>
   4227c:	29c00217 	ldw	r7,8(r5)
   42280:	10c5883a 	add	r2,r2,r3
   42284:	00c00174 	movhi	r3,5
   42288:	18c82004 	addi	r3,r3,8320
   4228c:	38c03b26 	beq	r7,r3,4237c <_free_r+0x278>
   42290:	2a000317 	ldw	r8,12(r5)
   42294:	11400054 	ori	r5,r2,1
   42298:	3087883a 	add	r3,r6,r2
   4229c:	3a000315 	stw	r8,12(r7)
   422a0:	41c00215 	stw	r7,8(r8)
   422a4:	31400115 	stw	r5,4(r6)
   422a8:	18800015 	stw	r2,0(r3)
   422ac:	003fbd06 	br	421a4 <_gp+0xfffe6a7c>
   422b0:	39c0004c 	andi	r7,r7,1
   422b4:	10c5883a 	add	r2,r2,r3
   422b8:	3800071e 	bne	r7,zero,422d8 <_free_r+0x1d4>
   422bc:	81fffe17 	ldw	r7,-8(r16)
   422c0:	31cdc83a 	sub	r6,r6,r7
   422c4:	30c00317 	ldw	r3,12(r6)
   422c8:	31400217 	ldw	r5,8(r6)
   422cc:	11c5883a 	add	r2,r2,r7
   422d0:	28c00315 	stw	r3,12(r5)
   422d4:	19400215 	stw	r5,8(r3)
   422d8:	10c00054 	ori	r3,r2,1
   422dc:	30c00115 	stw	r3,4(r6)
   422e0:	00c00174 	movhi	r3,5
   422e4:	18cdcd04 	addi	r3,r3,14132
   422e8:	18c00017 	ldw	r3,0(r3)
   422ec:	21800215 	stw	r6,8(r4)
   422f0:	10ffc036 	bltu	r2,r3,421f4 <_gp+0xfffe6acc>
   422f4:	00800174 	movhi	r2,5
   422f8:	1094ed04 	addi	r2,r2,21428
   422fc:	11400017 	ldw	r5,0(r2)
   42300:	8809883a 	mov	r4,r17
   42304:	0041fe00 	call	41fe0 <_malloc_trim_r>
   42308:	003fba06 	br	421f4 <_gp+0xfffe6acc>
   4230c:	28c9883a 	add	r4,r5,r3
   42310:	21000117 	ldw	r4,4(r4)
   42314:	2100004c 	andi	r4,r4,1
   42318:	2000391e 	bne	r4,zero,42400 <_free_r+0x2fc>
   4231c:	29c00217 	ldw	r7,8(r5)
   42320:	29000317 	ldw	r4,12(r5)
   42324:	1885883a 	add	r2,r3,r2
   42328:	10c00054 	ori	r3,r2,1
   4232c:	39000315 	stw	r4,12(r7)
   42330:	21c00215 	stw	r7,8(r4)
   42334:	30c00115 	stw	r3,4(r6)
   42338:	308d883a 	add	r6,r6,r2
   4233c:	30800015 	stw	r2,0(r6)
   42340:	003fac06 	br	421f4 <_gp+0xfffe6acc>
   42344:	00c00504 	movi	r3,20
   42348:	19401536 	bltu	r3,r5,423a0 <_free_r+0x29c>
   4234c:	28c01704 	addi	r3,r5,92
   42350:	18c7883a 	add	r3,r3,r3
   42354:	294016c4 	addi	r5,r5,91
   42358:	003fb406 	br	4222c <_gp+0xfffe6b04>
   4235c:	280bd0ba 	srai	r5,r5,2
   42360:	00c00044 	movi	r3,1
   42364:	38800117 	ldw	r2,4(r7)
   42368:	194a983a 	sll	r5,r3,r5
   4236c:	2007883a 	mov	r3,r4
   42370:	2884b03a 	or	r2,r5,r2
   42374:	38800115 	stw	r2,4(r7)
   42378:	003fbb06 	br	42268 <_gp+0xfffe6b40>
   4237c:	21800515 	stw	r6,20(r4)
   42380:	21800415 	stw	r6,16(r4)
   42384:	10c00054 	ori	r3,r2,1
   42388:	31c00315 	stw	r7,12(r6)
   4238c:	31c00215 	stw	r7,8(r6)
   42390:	30c00115 	stw	r3,4(r6)
   42394:	308d883a 	add	r6,r6,r2
   42398:	30800015 	stw	r2,0(r6)
   4239c:	003f9506 	br	421f4 <_gp+0xfffe6acc>
   423a0:	00c01504 	movi	r3,84
   423a4:	19400536 	bltu	r3,r5,423bc <_free_r+0x2b8>
   423a8:	100ad33a 	srli	r5,r2,12
   423ac:	28c01bc4 	addi	r3,r5,111
   423b0:	18c7883a 	add	r3,r3,r3
   423b4:	29401b84 	addi	r5,r5,110
   423b8:	003f9c06 	br	4222c <_gp+0xfffe6b04>
   423bc:	00c05504 	movi	r3,340
   423c0:	19400536 	bltu	r3,r5,423d8 <_free_r+0x2d4>
   423c4:	100ad3fa 	srli	r5,r2,15
   423c8:	28c01e04 	addi	r3,r5,120
   423cc:	18c7883a 	add	r3,r3,r3
   423d0:	29401dc4 	addi	r5,r5,119
   423d4:	003f9506 	br	4222c <_gp+0xfffe6b04>
   423d8:	00c15504 	movi	r3,1364
   423dc:	19400536 	bltu	r3,r5,423f4 <_free_r+0x2f0>
   423e0:	100ad4ba 	srli	r5,r2,18
   423e4:	28c01f44 	addi	r3,r5,125
   423e8:	18c7883a 	add	r3,r3,r3
   423ec:	29401f04 	addi	r5,r5,124
   423f0:	003f8e06 	br	4222c <_gp+0xfffe6b04>
   423f4:	00c03f84 	movi	r3,254
   423f8:	01401f84 	movi	r5,126
   423fc:	003f8b06 	br	4222c <_gp+0xfffe6b04>
   42400:	10c00054 	ori	r3,r2,1
   42404:	30c00115 	stw	r3,4(r6)
   42408:	308d883a 	add	r6,r6,r2
   4240c:	30800015 	stw	r2,0(r6)
   42410:	003f7806 	br	421f4 <_gp+0xfffe6acc>

00042414 <_fseek_r>:
   42414:	00424341 	jmpi	42434 <_fseeko_r>

00042418 <fseek>:
   42418:	00800174 	movhi	r2,5
   4241c:	108dcb04 	addi	r2,r2,14124
   42420:	300f883a 	mov	r7,r6
   42424:	280d883a 	mov	r6,r5
   42428:	200b883a 	mov	r5,r4
   4242c:	11000017 	ldw	r4,0(r2)
   42430:	00424341 	jmpi	42434 <_fseeko_r>

00042434 <_fseeko_r>:
   42434:	deffe804 	addi	sp,sp,-96
   42438:	dd401415 	stw	r21,80(sp)
   4243c:	dc801115 	stw	r18,68(sp)
   42440:	dc401015 	stw	r17,64(sp)
   42444:	dc000f15 	stw	r16,60(sp)
   42448:	dfc01715 	stw	ra,92(sp)
   4244c:	ddc01615 	stw	r23,88(sp)
   42450:	dd801515 	stw	r22,84(sp)
   42454:	dd001315 	stw	r20,76(sp)
   42458:	dcc01215 	stw	r19,72(sp)
   4245c:	2023883a 	mov	r17,r4
   42460:	2821883a 	mov	r16,r5
   42464:	302b883a 	mov	r21,r6
   42468:	3825883a 	mov	r18,r7
   4246c:	20000226 	beq	r4,zero,42478 <_fseeko_r+0x44>
   42470:	20800e17 	ldw	r2,56(r4)
   42474:	10005a26 	beq	r2,zero,425e0 <_fseeko_r+0x1ac>
   42478:	8080030b 	ldhu	r2,12(r16)
   4247c:	00c04204 	movi	r3,264
   42480:	1080420c 	andi	r2,r2,264
   42484:	10c05b26 	beq	r2,r3,425f4 <_fseeko_r+0x1c0>
   42488:	85000a17 	ldw	r20,40(r16)
   4248c:	a000f626 	beq	r20,zero,42868 <_fseeko_r+0x434>
   42490:	00800044 	movi	r2,1
   42494:	90803e26 	beq	r18,r2,42590 <_fseeko_r+0x15c>
   42498:	00800084 	movi	r2,2
   4249c:	90801026 	beq	r18,r2,424e0 <_fseeko_r+0xac>
   424a0:	90000f26 	beq	r18,zero,424e0 <_fseeko_r+0xac>
   424a4:	00800584 	movi	r2,22
   424a8:	88800015 	stw	r2,0(r17)
   424ac:	04ffffc4 	movi	r19,-1
   424b0:	9805883a 	mov	r2,r19
   424b4:	dfc01717 	ldw	ra,92(sp)
   424b8:	ddc01617 	ldw	r23,88(sp)
   424bc:	dd801517 	ldw	r22,84(sp)
   424c0:	dd401417 	ldw	r21,80(sp)
   424c4:	dd001317 	ldw	r20,76(sp)
   424c8:	dcc01217 	ldw	r19,72(sp)
   424cc:	dc801117 	ldw	r18,68(sp)
   424d0:	dc401017 	ldw	r17,64(sp)
   424d4:	dc000f17 	ldw	r16,60(sp)
   424d8:	dec01804 	addi	sp,sp,96
   424dc:	f800283a 	ret
   424e0:	80800417 	ldw	r2,16(r16)
   424e4:	002f883a 	mov	r23,zero
   424e8:	0027883a 	mov	r19,zero
   424ec:	1000cb26 	beq	r2,zero,4281c <_fseeko_r+0x3e8>
   424f0:	8080030b 	ldhu	r2,12(r16)
   424f4:	10c2068c 	andi	r3,r2,2074
   424f8:	1800071e 	bne	r3,zero,42518 <_fseeko_r+0xe4>
   424fc:	10c1000c 	andi	r3,r2,1024
   42500:	1800451e 	bne	r3,zero,42618 <_fseeko_r+0x1e4>
   42504:	00c00134 	movhi	r3,4
   42508:	18cee304 	addi	r3,r3,15244
   4250c:	a0c0b726 	beq	r20,r3,427ec <_fseeko_r+0x3b8>
   42510:	10820014 	ori	r2,r2,2048
   42514:	8080030d 	sth	r2,12(r16)
   42518:	800b883a 	mov	r5,r16
   4251c:	8809883a 	mov	r4,r17
   42520:	00419f80 	call	419f8 <_fflush_r>
   42524:	1027883a 	mov	r19,r2
   42528:	103fe01e 	bne	r2,zero,424ac <_gp+0xfffe6d84>
   4252c:	81400717 	ldw	r5,28(r16)
   42530:	900f883a 	mov	r7,r18
   42534:	a80d883a 	mov	r6,r21
   42538:	8809883a 	mov	r4,r17
   4253c:	a03ee83a 	callr	r20
   42540:	00ffffc4 	movi	r3,-1
   42544:	10ffd926 	beq	r2,r3,424ac <_gp+0xfffe6d84>
   42548:	81400c17 	ldw	r5,48(r16)
   4254c:	28000526 	beq	r5,zero,42564 <_fseeko_r+0x130>
   42550:	80801004 	addi	r2,r16,64
   42554:	28800226 	beq	r5,r2,42560 <_fseeko_r+0x12c>
   42558:	8809883a 	mov	r4,r17
   4255c:	00421040 	call	42104 <_free_r>
   42560:	80000c15 	stw	zero,48(r16)
   42564:	8080030b 	ldhu	r2,12(r16)
   42568:	80c00417 	ldw	r3,16(r16)
   4256c:	80000115 	stw	zero,4(r16)
   42570:	10bdf7cc 	andi	r2,r2,63455
   42574:	80c00015 	stw	r3,0(r16)
   42578:	8080030d 	sth	r2,12(r16)
   4257c:	01800204 	movi	r6,8
   42580:	000b883a 	mov	r5,zero
   42584:	81001704 	addi	r4,r16,92
   42588:	00434400 	call	43440 <memset>
   4258c:	003fc806 	br	424b0 <_gp+0xfffe6d88>
   42590:	800b883a 	mov	r5,r16
   42594:	8809883a 	mov	r4,r17
   42598:	00419f80 	call	419f8 <_fflush_r>
   4259c:	8080030b 	ldhu	r2,12(r16)
   425a0:	10c4000c 	andi	r3,r2,4096
   425a4:	18008726 	beq	r3,zero,427c4 <_fseeko_r+0x390>
   425a8:	84c01417 	ldw	r19,80(r16)
   425ac:	10c0010c 	andi	r3,r2,4
   425b0:	1800431e 	bne	r3,zero,426c0 <_fseeko_r+0x28c>
   425b4:	1080020c 	andi	r2,r2,8
   425b8:	10008026 	beq	r2,zero,427bc <_fseeko_r+0x388>
   425bc:	80c00017 	ldw	r3,0(r16)
   425c0:	80800417 	ldw	r2,16(r16)
   425c4:	18000226 	beq	r3,zero,425d0 <_fseeko_r+0x19c>
   425c8:	1887c83a 	sub	r3,r3,r2
   425cc:	98e7883a 	add	r19,r19,r3
   425d0:	aceb883a 	add	r21,r21,r19
   425d4:	05c00044 	movi	r23,1
   425d8:	0025883a 	mov	r18,zero
   425dc:	003fc306 	br	424ec <_gp+0xfffe6dc4>
   425e0:	0041de40 	call	41de4 <__sinit>
   425e4:	8080030b 	ldhu	r2,12(r16)
   425e8:	00c04204 	movi	r3,264
   425ec:	1080420c 	andi	r2,r2,264
   425f0:	10ffa51e 	bne	r2,r3,42488 <_gp+0xfffe6d60>
   425f4:	800b883a 	mov	r5,r16
   425f8:	8809883a 	mov	r4,r17
   425fc:	00419f80 	call	419f8 <_fflush_r>
   42600:	003fa106 	br	42488 <_gp+0xfffe6d60>
   42604:	8080030b 	ldhu	r2,12(r16)
   42608:	00c10004 	movi	r3,1024
   4260c:	80c01315 	stw	r3,76(r16)
   42610:	10c4b03a 	or	r2,r2,r3
   42614:	8080030d 	sth	r2,12(r16)
   42618:	9000311e 	bne	r18,zero,426e0 <_fseeko_r+0x2ac>
   4261c:	a82d883a 	mov	r22,r21
   42620:	b800371e 	bne	r23,zero,42700 <_fseeko_r+0x2cc>
   42624:	8080030b 	ldhu	r2,12(r16)
   42628:	1084000c 	andi	r2,r2,4096
   4262c:	10007f26 	beq	r2,zero,4282c <_fseeko_r+0x3f8>
   42630:	80801417 	ldw	r2,80(r16)
   42634:	81800117 	ldw	r6,4(r16)
   42638:	81400c17 	ldw	r5,48(r16)
   4263c:	11a7c83a 	sub	r19,r2,r6
   42640:	28008226 	beq	r5,zero,4284c <_fseeko_r+0x418>
   42644:	81c00f17 	ldw	r7,60(r16)
   42648:	99e7c83a 	sub	r19,r19,r7
   4264c:	81000e17 	ldw	r4,56(r16)
   42650:	80800417 	ldw	r2,16(r16)
   42654:	99a7883a 	add	r19,r19,r6
   42658:	2087c83a 	sub	r3,r4,r2
   4265c:	98e7c83a 	sub	r19,r19,r3
   42660:	38c7883a 	add	r3,r7,r3
   42664:	b4c02b16 	blt	r22,r19,42714 <_fseeko_r+0x2e0>
   42668:	98c9883a 	add	r4,r19,r3
   4266c:	b100292e 	bgeu	r22,r4,42714 <_fseeko_r+0x2e0>
   42670:	b4e7c83a 	sub	r19,r22,r19
   42674:	14c5883a 	add	r2,r2,r19
   42678:	1ce7c83a 	sub	r19,r3,r19
   4267c:	80800015 	stw	r2,0(r16)
   42680:	84c00115 	stw	r19,4(r16)
   42684:	28000526 	beq	r5,zero,4269c <_fseeko_r+0x268>
   42688:	80801004 	addi	r2,r16,64
   4268c:	28800226 	beq	r5,r2,42698 <_fseeko_r+0x264>
   42690:	8809883a 	mov	r4,r17
   42694:	00421040 	call	42104 <_free_r>
   42698:	80000c15 	stw	zero,48(r16)
   4269c:	8080030b 	ldhu	r2,12(r16)
   426a0:	01800204 	movi	r6,8
   426a4:	000b883a 	mov	r5,zero
   426a8:	10bff7cc 	andi	r2,r2,65503
   426ac:	8080030d 	sth	r2,12(r16)
   426b0:	81001704 	addi	r4,r16,92
   426b4:	00434400 	call	43440 <memset>
   426b8:	0027883a 	mov	r19,zero
   426bc:	003f7c06 	br	424b0 <_gp+0xfffe6d88>
   426c0:	80c00117 	ldw	r3,4(r16)
   426c4:	80800c17 	ldw	r2,48(r16)
   426c8:	98e7c83a 	sub	r19,r19,r3
   426cc:	10003b26 	beq	r2,zero,427bc <_fseeko_r+0x388>
   426d0:	80c00f17 	ldw	r3,60(r16)
   426d4:	80800417 	ldw	r2,16(r16)
   426d8:	98e7c83a 	sub	r19,r19,r3
   426dc:	003fbc06 	br	425d0 <_gp+0xfffe6ea8>
   426e0:	8140038f 	ldh	r5,14(r16)
   426e4:	d80d883a 	mov	r6,sp
   426e8:	8809883a 	mov	r4,r17
   426ec:	00428940 	call	42894 <_fstat_r>
   426f0:	103f891e 	bne	r2,zero,42518 <_gp+0xfffe6df0>
   426f4:	dd800417 	ldw	r22,16(sp)
   426f8:	adad883a 	add	r22,r21,r22
   426fc:	b83fc926 	beq	r23,zero,42624 <_gp+0xfffe6efc>
   42700:	81400c17 	ldw	r5,48(r16)
   42704:	81800117 	ldw	r6,4(r16)
   42708:	28005026 	beq	r5,zero,4284c <_fseeko_r+0x418>
   4270c:	81c00f17 	ldw	r7,60(r16)
   42710:	003fce06 	br	4264c <_gp+0xfffe6f24>
   42714:	84c01317 	ldw	r19,76(r16)
   42718:	81400717 	ldw	r5,28(r16)
   4271c:	000f883a 	mov	r7,zero
   42720:	04e7c83a 	sub	r19,zero,r19
   42724:	9da6703a 	and	r19,r19,r22
   42728:	980d883a 	mov	r6,r19
   4272c:	8809883a 	mov	r4,r17
   42730:	a03ee83a 	callr	r20
   42734:	00ffffc4 	movi	r3,-1
   42738:	10ff7726 	beq	r2,r3,42518 <_gp+0xfffe6df0>
   4273c:	80800417 	ldw	r2,16(r16)
   42740:	81400c17 	ldw	r5,48(r16)
   42744:	80000115 	stw	zero,4(r16)
   42748:	80800015 	stw	r2,0(r16)
   4274c:	28000526 	beq	r5,zero,42764 <_fseeko_r+0x330>
   42750:	80801004 	addi	r2,r16,64
   42754:	28800226 	beq	r5,r2,42760 <_fseeko_r+0x32c>
   42758:	8809883a 	mov	r4,r17
   4275c:	00421040 	call	42104 <_free_r>
   42760:	80000c15 	stw	zero,48(r16)
   42764:	8080030b 	ldhu	r2,12(r16)
   42768:	b4e7c83a 	sub	r19,r22,r19
   4276c:	10bff7cc 	andi	r2,r2,65503
   42770:	8080030d 	sth	r2,12(r16)
   42774:	98000b26 	beq	r19,zero,427a4 <_fseeko_r+0x370>
   42778:	800b883a 	mov	r5,r16
   4277c:	8809883a 	mov	r4,r17
   42780:	004388c0 	call	4388c <__srefill_r>
   42784:	103f641e 	bne	r2,zero,42518 <_gp+0xfffe6df0>
   42788:	80800117 	ldw	r2,4(r16)
   4278c:	14ff6236 	bltu	r2,r19,42518 <_gp+0xfffe6df0>
   42790:	80c00017 	ldw	r3,0(r16)
   42794:	14c5c83a 	sub	r2,r2,r19
   42798:	80800115 	stw	r2,4(r16)
   4279c:	1ce7883a 	add	r19,r3,r19
   427a0:	84c00015 	stw	r19,0(r16)
   427a4:	01800204 	movi	r6,8
   427a8:	000b883a 	mov	r5,zero
   427ac:	81001704 	addi	r4,r16,92
   427b0:	00434400 	call	43440 <memset>
   427b4:	0027883a 	mov	r19,zero
   427b8:	003f3d06 	br	424b0 <_gp+0xfffe6d88>
   427bc:	80800417 	ldw	r2,16(r16)
   427c0:	003f8306 	br	425d0 <_gp+0xfffe6ea8>
   427c4:	81400717 	ldw	r5,28(r16)
   427c8:	900f883a 	mov	r7,r18
   427cc:	000d883a 	mov	r6,zero
   427d0:	8809883a 	mov	r4,r17
   427d4:	a03ee83a 	callr	r20
   427d8:	1027883a 	mov	r19,r2
   427dc:	00bfffc4 	movi	r2,-1
   427e0:	98bf3226 	beq	r19,r2,424ac <_gp+0xfffe6d84>
   427e4:	8080030b 	ldhu	r2,12(r16)
   427e8:	003f7006 	br	425ac <_gp+0xfffe6e84>
   427ec:	8140038f 	ldh	r5,14(r16)
   427f0:	283f4716 	blt	r5,zero,42510 <_gp+0xfffe6de8>
   427f4:	d80d883a 	mov	r6,sp
   427f8:	8809883a 	mov	r4,r17
   427fc:	00428940 	call	42894 <_fstat_r>
   42800:	1000041e 	bne	r2,zero,42814 <_fseeko_r+0x3e0>
   42804:	d8800117 	ldw	r2,4(sp)
   42808:	00e00014 	movui	r3,32768
   4280c:	10bc000c 	andi	r2,r2,61440
   42810:	10ff7c26 	beq	r2,r3,42604 <_gp+0xfffe6edc>
   42814:	8080030b 	ldhu	r2,12(r16)
   42818:	003f3d06 	br	42510 <_gp+0xfffe6de8>
   4281c:	800b883a 	mov	r5,r16
   42820:	8809883a 	mov	r4,r17
   42824:	0042a780 	call	42a78 <__smakebuf_r>
   42828:	003f3106 	br	424f0 <_gp+0xfffe6dc8>
   4282c:	81400717 	ldw	r5,28(r16)
   42830:	01c00044 	movi	r7,1
   42834:	000d883a 	mov	r6,zero
   42838:	8809883a 	mov	r4,r17
   4283c:	a03ee83a 	callr	r20
   42840:	00ffffc4 	movi	r3,-1
   42844:	10ff7b1e 	bne	r2,r3,42634 <_gp+0xfffe6f0c>
   42848:	003f3306 	br	42518 <_gp+0xfffe6df0>
   4284c:	80c00017 	ldw	r3,0(r16)
   42850:	80800417 	ldw	r2,16(r16)
   42854:	000b883a 	mov	r5,zero
   42858:	1887c83a 	sub	r3,r3,r2
   4285c:	98e7c83a 	sub	r19,r19,r3
   42860:	30c7883a 	add	r3,r6,r3
   42864:	003f7f06 	br	42664 <_gp+0xfffe6f3c>
   42868:	00800744 	movi	r2,29
   4286c:	88800015 	stw	r2,0(r17)
   42870:	04ffffc4 	movi	r19,-1
   42874:	003f0e06 	br	424b0 <_gp+0xfffe6d88>

00042878 <fseeko>:
   42878:	00800174 	movhi	r2,5
   4287c:	108dcb04 	addi	r2,r2,14124
   42880:	300f883a 	mov	r7,r6
   42884:	280d883a 	mov	r6,r5
   42888:	200b883a 	mov	r5,r4
   4288c:	11000017 	ldw	r4,0(r2)
   42890:	00424341 	jmpi	42434 <_fseeko_r>

00042894 <_fstat_r>:
   42894:	defffd04 	addi	sp,sp,-12
   42898:	2805883a 	mov	r2,r5
   4289c:	dc000015 	stw	r16,0(sp)
   428a0:	04000174 	movhi	r16,5
   428a4:	dc400115 	stw	r17,4(sp)
   428a8:	8414ea04 	addi	r16,r16,21416
   428ac:	2023883a 	mov	r17,r4
   428b0:	300b883a 	mov	r5,r6
   428b4:	1009883a 	mov	r4,r2
   428b8:	dfc00215 	stw	ra,8(sp)
   428bc:	80000015 	stw	zero,0(r16)
   428c0:	004e6880 	call	4e688 <fstat>
   428c4:	00ffffc4 	movi	r3,-1
   428c8:	10c00526 	beq	r2,r3,428e0 <_fstat_r+0x4c>
   428cc:	dfc00217 	ldw	ra,8(sp)
   428d0:	dc400117 	ldw	r17,4(sp)
   428d4:	dc000017 	ldw	r16,0(sp)
   428d8:	dec00304 	addi	sp,sp,12
   428dc:	f800283a 	ret
   428e0:	80c00017 	ldw	r3,0(r16)
   428e4:	183ff926 	beq	r3,zero,428cc <_gp+0xfffe71a4>
   428e8:	88c00015 	stw	r3,0(r17)
   428ec:	003ff706 	br	428cc <_gp+0xfffe71a4>

000428f0 <_fwalk>:
   428f0:	defff704 	addi	sp,sp,-36
   428f4:	dd000415 	stw	r20,16(sp)
   428f8:	dfc00815 	stw	ra,32(sp)
   428fc:	ddc00715 	stw	r23,28(sp)
   42900:	dd800615 	stw	r22,24(sp)
   42904:	dd400515 	stw	r21,20(sp)
   42908:	dcc00315 	stw	r19,12(sp)
   4290c:	dc800215 	stw	r18,8(sp)
   42910:	dc400115 	stw	r17,4(sp)
   42914:	dc000015 	stw	r16,0(sp)
   42918:	2500b804 	addi	r20,r4,736
   4291c:	a0002326 	beq	r20,zero,429ac <_fwalk+0xbc>
   42920:	282b883a 	mov	r21,r5
   42924:	002f883a 	mov	r23,zero
   42928:	05800044 	movi	r22,1
   4292c:	04ffffc4 	movi	r19,-1
   42930:	a4400117 	ldw	r17,4(r20)
   42934:	a4800217 	ldw	r18,8(r20)
   42938:	8c7fffc4 	addi	r17,r17,-1
   4293c:	88000d16 	blt	r17,zero,42974 <_fwalk+0x84>
   42940:	94000304 	addi	r16,r18,12
   42944:	94800384 	addi	r18,r18,14
   42948:	8080000b 	ldhu	r2,0(r16)
   4294c:	8c7fffc4 	addi	r17,r17,-1
   42950:	813ffd04 	addi	r4,r16,-12
   42954:	b080042e 	bgeu	r22,r2,42968 <_fwalk+0x78>
   42958:	9080000f 	ldh	r2,0(r18)
   4295c:	14c00226 	beq	r2,r19,42968 <_fwalk+0x78>
   42960:	a83ee83a 	callr	r21
   42964:	b8aeb03a 	or	r23,r23,r2
   42968:	84001a04 	addi	r16,r16,104
   4296c:	94801a04 	addi	r18,r18,104
   42970:	8cfff51e 	bne	r17,r19,42948 <_gp+0xfffe7220>
   42974:	a5000017 	ldw	r20,0(r20)
   42978:	a03fed1e 	bne	r20,zero,42930 <_gp+0xfffe7208>
   4297c:	b805883a 	mov	r2,r23
   42980:	dfc00817 	ldw	ra,32(sp)
   42984:	ddc00717 	ldw	r23,28(sp)
   42988:	dd800617 	ldw	r22,24(sp)
   4298c:	dd400517 	ldw	r21,20(sp)
   42990:	dd000417 	ldw	r20,16(sp)
   42994:	dcc00317 	ldw	r19,12(sp)
   42998:	dc800217 	ldw	r18,8(sp)
   4299c:	dc400117 	ldw	r17,4(sp)
   429a0:	dc000017 	ldw	r16,0(sp)
   429a4:	dec00904 	addi	sp,sp,36
   429a8:	f800283a 	ret
   429ac:	002f883a 	mov	r23,zero
   429b0:	003ff206 	br	4297c <_gp+0xfffe7254>

000429b4 <_fwalk_reent>:
   429b4:	defff704 	addi	sp,sp,-36
   429b8:	dd000415 	stw	r20,16(sp)
   429bc:	dfc00815 	stw	ra,32(sp)
   429c0:	ddc00715 	stw	r23,28(sp)
   429c4:	dd800615 	stw	r22,24(sp)
   429c8:	dd400515 	stw	r21,20(sp)
   429cc:	dcc00315 	stw	r19,12(sp)
   429d0:	dc800215 	stw	r18,8(sp)
   429d4:	dc400115 	stw	r17,4(sp)
   429d8:	dc000015 	stw	r16,0(sp)
   429dc:	2500b804 	addi	r20,r4,736
   429e0:	a0002326 	beq	r20,zero,42a70 <_fwalk_reent+0xbc>
   429e4:	282b883a 	mov	r21,r5
   429e8:	2027883a 	mov	r19,r4
   429ec:	002f883a 	mov	r23,zero
   429f0:	05800044 	movi	r22,1
   429f4:	04bfffc4 	movi	r18,-1
   429f8:	a4400117 	ldw	r17,4(r20)
   429fc:	a4000217 	ldw	r16,8(r20)
   42a00:	8c7fffc4 	addi	r17,r17,-1
   42a04:	88000c16 	blt	r17,zero,42a38 <_fwalk_reent+0x84>
   42a08:	84000304 	addi	r16,r16,12
   42a0c:	8080000b 	ldhu	r2,0(r16)
   42a10:	8c7fffc4 	addi	r17,r17,-1
   42a14:	817ffd04 	addi	r5,r16,-12
   42a18:	b080052e 	bgeu	r22,r2,42a30 <_fwalk_reent+0x7c>
   42a1c:	8080008f 	ldh	r2,2(r16)
   42a20:	9809883a 	mov	r4,r19
   42a24:	14800226 	beq	r2,r18,42a30 <_fwalk_reent+0x7c>
   42a28:	a83ee83a 	callr	r21
   42a2c:	b8aeb03a 	or	r23,r23,r2
   42a30:	84001a04 	addi	r16,r16,104
   42a34:	8cbff51e 	bne	r17,r18,42a0c <_gp+0xfffe72e4>
   42a38:	a5000017 	ldw	r20,0(r20)
   42a3c:	a03fee1e 	bne	r20,zero,429f8 <_gp+0xfffe72d0>
   42a40:	b805883a 	mov	r2,r23
   42a44:	dfc00817 	ldw	ra,32(sp)
   42a48:	ddc00717 	ldw	r23,28(sp)
   42a4c:	dd800617 	ldw	r22,24(sp)
   42a50:	dd400517 	ldw	r21,20(sp)
   42a54:	dd000417 	ldw	r20,16(sp)
   42a58:	dcc00317 	ldw	r19,12(sp)
   42a5c:	dc800217 	ldw	r18,8(sp)
   42a60:	dc400117 	ldw	r17,4(sp)
   42a64:	dc000017 	ldw	r16,0(sp)
   42a68:	dec00904 	addi	sp,sp,36
   42a6c:	f800283a 	ret
   42a70:	002f883a 	mov	r23,zero
   42a74:	003ff206 	br	42a40 <_gp+0xfffe7318>

00042a78 <__smakebuf_r>:
   42a78:	2880030b 	ldhu	r2,12(r5)
   42a7c:	10c0008c 	andi	r3,r2,2
   42a80:	1800411e 	bne	r3,zero,42b88 <__smakebuf_r+0x110>
   42a84:	deffec04 	addi	sp,sp,-80
   42a88:	dc000f15 	stw	r16,60(sp)
   42a8c:	2821883a 	mov	r16,r5
   42a90:	2940038f 	ldh	r5,14(r5)
   42a94:	dc401015 	stw	r17,64(sp)
   42a98:	dfc01315 	stw	ra,76(sp)
   42a9c:	dcc01215 	stw	r19,72(sp)
   42aa0:	dc801115 	stw	r18,68(sp)
   42aa4:	2023883a 	mov	r17,r4
   42aa8:	28001c16 	blt	r5,zero,42b1c <__smakebuf_r+0xa4>
   42aac:	d80d883a 	mov	r6,sp
   42ab0:	00428940 	call	42894 <_fstat_r>
   42ab4:	10001816 	blt	r2,zero,42b18 <__smakebuf_r+0xa0>
   42ab8:	d8800117 	ldw	r2,4(sp)
   42abc:	00e00014 	movui	r3,32768
   42ac0:	10bc000c 	andi	r2,r2,61440
   42ac4:	14c80020 	cmpeqi	r19,r2,8192
   42ac8:	10c03726 	beq	r2,r3,42ba8 <__smakebuf_r+0x130>
   42acc:	80c0030b 	ldhu	r3,12(r16)
   42ad0:	18c20014 	ori	r3,r3,2048
   42ad4:	80c0030d 	sth	r3,12(r16)
   42ad8:	00c80004 	movi	r3,8192
   42adc:	10c0521e 	bne	r2,r3,42c28 <__smakebuf_r+0x1b0>
   42ae0:	8140038f 	ldh	r5,14(r16)
   42ae4:	8809883a 	mov	r4,r17
   42ae8:	00482dc0 	call	482dc <_isatty_r>
   42aec:	10004c26 	beq	r2,zero,42c20 <__smakebuf_r+0x1a8>
   42af0:	8080030b 	ldhu	r2,12(r16)
   42af4:	80c010c4 	addi	r3,r16,67
   42af8:	80c00015 	stw	r3,0(r16)
   42afc:	10800054 	ori	r2,r2,1
   42b00:	8080030d 	sth	r2,12(r16)
   42b04:	00800044 	movi	r2,1
   42b08:	80c00415 	stw	r3,16(r16)
   42b0c:	80800515 	stw	r2,20(r16)
   42b10:	04810004 	movi	r18,1024
   42b14:	00000706 	br	42b34 <__smakebuf_r+0xbc>
   42b18:	8080030b 	ldhu	r2,12(r16)
   42b1c:	10c0200c 	andi	r3,r2,128
   42b20:	18001f1e 	bne	r3,zero,42ba0 <__smakebuf_r+0x128>
   42b24:	04810004 	movi	r18,1024
   42b28:	10820014 	ori	r2,r2,2048
   42b2c:	8080030d 	sth	r2,12(r16)
   42b30:	0027883a 	mov	r19,zero
   42b34:	900b883a 	mov	r5,r18
   42b38:	8809883a 	mov	r4,r17
   42b3c:	0042c340 	call	42c34 <_malloc_r>
   42b40:	10002c26 	beq	r2,zero,42bf4 <__smakebuf_r+0x17c>
   42b44:	80c0030b 	ldhu	r3,12(r16)
   42b48:	01000134 	movhi	r4,4
   42b4c:	2106a304 	addi	r4,r4,6796
   42b50:	89000f15 	stw	r4,60(r17)
   42b54:	18c02014 	ori	r3,r3,128
   42b58:	80c0030d 	sth	r3,12(r16)
   42b5c:	80800015 	stw	r2,0(r16)
   42b60:	80800415 	stw	r2,16(r16)
   42b64:	84800515 	stw	r18,20(r16)
   42b68:	98001a1e 	bne	r19,zero,42bd4 <__smakebuf_r+0x15c>
   42b6c:	dfc01317 	ldw	ra,76(sp)
   42b70:	dcc01217 	ldw	r19,72(sp)
   42b74:	dc801117 	ldw	r18,68(sp)
   42b78:	dc401017 	ldw	r17,64(sp)
   42b7c:	dc000f17 	ldw	r16,60(sp)
   42b80:	dec01404 	addi	sp,sp,80
   42b84:	f800283a 	ret
   42b88:	288010c4 	addi	r2,r5,67
   42b8c:	28800015 	stw	r2,0(r5)
   42b90:	28800415 	stw	r2,16(r5)
   42b94:	00800044 	movi	r2,1
   42b98:	28800515 	stw	r2,20(r5)
   42b9c:	f800283a 	ret
   42ba0:	04801004 	movi	r18,64
   42ba4:	003fe006 	br	42b28 <_gp+0xfffe7400>
   42ba8:	81000a17 	ldw	r4,40(r16)
   42bac:	00c00134 	movhi	r3,4
   42bb0:	18cee304 	addi	r3,r3,15244
   42bb4:	20ffc51e 	bne	r4,r3,42acc <_gp+0xfffe73a4>
   42bb8:	8080030b 	ldhu	r2,12(r16)
   42bbc:	04810004 	movi	r18,1024
   42bc0:	84801315 	stw	r18,76(r16)
   42bc4:	1484b03a 	or	r2,r2,r18
   42bc8:	8080030d 	sth	r2,12(r16)
   42bcc:	0027883a 	mov	r19,zero
   42bd0:	003fd806 	br	42b34 <_gp+0xfffe740c>
   42bd4:	8140038f 	ldh	r5,14(r16)
   42bd8:	8809883a 	mov	r4,r17
   42bdc:	00482dc0 	call	482dc <_isatty_r>
   42be0:	103fe226 	beq	r2,zero,42b6c <_gp+0xfffe7444>
   42be4:	8080030b 	ldhu	r2,12(r16)
   42be8:	10800054 	ori	r2,r2,1
   42bec:	8080030d 	sth	r2,12(r16)
   42bf0:	003fde06 	br	42b6c <_gp+0xfffe7444>
   42bf4:	8080030b 	ldhu	r2,12(r16)
   42bf8:	10c0800c 	andi	r3,r2,512
   42bfc:	183fdb1e 	bne	r3,zero,42b6c <_gp+0xfffe7444>
   42c00:	10800094 	ori	r2,r2,2
   42c04:	80c010c4 	addi	r3,r16,67
   42c08:	8080030d 	sth	r2,12(r16)
   42c0c:	00800044 	movi	r2,1
   42c10:	80c00015 	stw	r3,0(r16)
   42c14:	80c00415 	stw	r3,16(r16)
   42c18:	80800515 	stw	r2,20(r16)
   42c1c:	003fd306 	br	42b6c <_gp+0xfffe7444>
   42c20:	04810004 	movi	r18,1024
   42c24:	003fc306 	br	42b34 <_gp+0xfffe740c>
   42c28:	0027883a 	mov	r19,zero
   42c2c:	04810004 	movi	r18,1024
   42c30:	003fc006 	br	42b34 <_gp+0xfffe740c>

00042c34 <_malloc_r>:
   42c34:	defff504 	addi	sp,sp,-44
   42c38:	dc800315 	stw	r18,12(sp)
   42c3c:	dfc00a15 	stw	ra,40(sp)
   42c40:	df000915 	stw	fp,36(sp)
   42c44:	ddc00815 	stw	r23,32(sp)
   42c48:	dd800715 	stw	r22,28(sp)
   42c4c:	dd400615 	stw	r21,24(sp)
   42c50:	dd000515 	stw	r20,20(sp)
   42c54:	dcc00415 	stw	r19,16(sp)
   42c58:	dc400215 	stw	r17,8(sp)
   42c5c:	dc000115 	stw	r16,4(sp)
   42c60:	288002c4 	addi	r2,r5,11
   42c64:	00c00584 	movi	r3,22
   42c68:	2025883a 	mov	r18,r4
   42c6c:	18807f2e 	bgeu	r3,r2,42e6c <_malloc_r+0x238>
   42c70:	047ffe04 	movi	r17,-8
   42c74:	1462703a 	and	r17,r2,r17
   42c78:	8800a316 	blt	r17,zero,42f08 <_malloc_r+0x2d4>
   42c7c:	8940a236 	bltu	r17,r5,42f08 <_malloc_r+0x2d4>
   42c80:	004eaa80 	call	4eaa8 <__malloc_lock>
   42c84:	00807dc4 	movi	r2,503
   42c88:	1441e92e 	bgeu	r2,r17,43430 <_malloc_r+0x7fc>
   42c8c:	8804d27a 	srli	r2,r17,9
   42c90:	1000a126 	beq	r2,zero,42f18 <_malloc_r+0x2e4>
   42c94:	00c00104 	movi	r3,4
   42c98:	18811e36 	bltu	r3,r2,43114 <_malloc_r+0x4e0>
   42c9c:	8804d1ba 	srli	r2,r17,6
   42ca0:	12000e44 	addi	r8,r2,57
   42ca4:	11c00e04 	addi	r7,r2,56
   42ca8:	4209883a 	add	r4,r8,r8
   42cac:	04c00174 	movhi	r19,5
   42cb0:	2109883a 	add	r4,r4,r4
   42cb4:	9cc81e04 	addi	r19,r19,8312
   42cb8:	2109883a 	add	r4,r4,r4
   42cbc:	9909883a 	add	r4,r19,r4
   42cc0:	24000117 	ldw	r16,4(r4)
   42cc4:	213ffe04 	addi	r4,r4,-8
   42cc8:	24009726 	beq	r4,r16,42f28 <_malloc_r+0x2f4>
   42ccc:	80800117 	ldw	r2,4(r16)
   42cd0:	01bfff04 	movi	r6,-4
   42cd4:	014003c4 	movi	r5,15
   42cd8:	1184703a 	and	r2,r2,r6
   42cdc:	1447c83a 	sub	r3,r2,r17
   42ce0:	28c00716 	blt	r5,r3,42d00 <_malloc_r+0xcc>
   42ce4:	1800920e 	bge	r3,zero,42f30 <_malloc_r+0x2fc>
   42ce8:	84000317 	ldw	r16,12(r16)
   42cec:	24008e26 	beq	r4,r16,42f28 <_malloc_r+0x2f4>
   42cf0:	80800117 	ldw	r2,4(r16)
   42cf4:	1184703a 	and	r2,r2,r6
   42cf8:	1447c83a 	sub	r3,r2,r17
   42cfc:	28fff90e 	bge	r5,r3,42ce4 <_gp+0xfffe75bc>
   42d00:	3809883a 	mov	r4,r7
   42d04:	01800174 	movhi	r6,5
   42d08:	9c000417 	ldw	r16,16(r19)
   42d0c:	31881e04 	addi	r6,r6,8312
   42d10:	32000204 	addi	r8,r6,8
   42d14:	82013426 	beq	r16,r8,431e8 <_malloc_r+0x5b4>
   42d18:	80c00117 	ldw	r3,4(r16)
   42d1c:	00bfff04 	movi	r2,-4
   42d20:	188e703a 	and	r7,r3,r2
   42d24:	3c45c83a 	sub	r2,r7,r17
   42d28:	00c003c4 	movi	r3,15
   42d2c:	18811f16 	blt	r3,r2,431ac <_malloc_r+0x578>
   42d30:	32000515 	stw	r8,20(r6)
   42d34:	32000415 	stw	r8,16(r6)
   42d38:	10007f0e 	bge	r2,zero,42f38 <_malloc_r+0x304>
   42d3c:	00807fc4 	movi	r2,511
   42d40:	11c0fd36 	bltu	r2,r7,43138 <_malloc_r+0x504>
   42d44:	3806d0fa 	srli	r3,r7,3
   42d48:	01c00044 	movi	r7,1
   42d4c:	30800117 	ldw	r2,4(r6)
   42d50:	19400044 	addi	r5,r3,1
   42d54:	294b883a 	add	r5,r5,r5
   42d58:	1807d0ba 	srai	r3,r3,2
   42d5c:	294b883a 	add	r5,r5,r5
   42d60:	294b883a 	add	r5,r5,r5
   42d64:	298b883a 	add	r5,r5,r6
   42d68:	38c6983a 	sll	r3,r7,r3
   42d6c:	29c00017 	ldw	r7,0(r5)
   42d70:	2a7ffe04 	addi	r9,r5,-8
   42d74:	1886b03a 	or	r3,r3,r2
   42d78:	82400315 	stw	r9,12(r16)
   42d7c:	81c00215 	stw	r7,8(r16)
   42d80:	30c00115 	stw	r3,4(r6)
   42d84:	2c000015 	stw	r16,0(r5)
   42d88:	3c000315 	stw	r16,12(r7)
   42d8c:	2005d0ba 	srai	r2,r4,2
   42d90:	01400044 	movi	r5,1
   42d94:	288a983a 	sll	r5,r5,r2
   42d98:	19406f36 	bltu	r3,r5,42f58 <_malloc_r+0x324>
   42d9c:	28c4703a 	and	r2,r5,r3
   42da0:	10000a1e 	bne	r2,zero,42dcc <_malloc_r+0x198>
   42da4:	00bfff04 	movi	r2,-4
   42da8:	294b883a 	add	r5,r5,r5
   42dac:	2088703a 	and	r4,r4,r2
   42db0:	28c4703a 	and	r2,r5,r3
   42db4:	21000104 	addi	r4,r4,4
   42db8:	1000041e 	bne	r2,zero,42dcc <_malloc_r+0x198>
   42dbc:	294b883a 	add	r5,r5,r5
   42dc0:	28c4703a 	and	r2,r5,r3
   42dc4:	21000104 	addi	r4,r4,4
   42dc8:	103ffc26 	beq	r2,zero,42dbc <_gp+0xfffe7694>
   42dcc:	02bfff04 	movi	r10,-4
   42dd0:	024003c4 	movi	r9,15
   42dd4:	21800044 	addi	r6,r4,1
   42dd8:	318d883a 	add	r6,r6,r6
   42ddc:	318d883a 	add	r6,r6,r6
   42de0:	318d883a 	add	r6,r6,r6
   42de4:	998d883a 	add	r6,r19,r6
   42de8:	333ffe04 	addi	r12,r6,-8
   42dec:	2017883a 	mov	r11,r4
   42df0:	31800104 	addi	r6,r6,4
   42df4:	34000017 	ldw	r16,0(r6)
   42df8:	31fffd04 	addi	r7,r6,-12
   42dfc:	81c0041e 	bne	r16,r7,42e10 <_malloc_r+0x1dc>
   42e00:	0000fb06 	br	431f0 <_malloc_r+0x5bc>
   42e04:	1801030e 	bge	r3,zero,43214 <_malloc_r+0x5e0>
   42e08:	84000317 	ldw	r16,12(r16)
   42e0c:	81c0f826 	beq	r16,r7,431f0 <_malloc_r+0x5bc>
   42e10:	80800117 	ldw	r2,4(r16)
   42e14:	1284703a 	and	r2,r2,r10
   42e18:	1447c83a 	sub	r3,r2,r17
   42e1c:	48fff90e 	bge	r9,r3,42e04 <_gp+0xfffe76dc>
   42e20:	80800317 	ldw	r2,12(r16)
   42e24:	81000217 	ldw	r4,8(r16)
   42e28:	89400054 	ori	r5,r17,1
   42e2c:	81400115 	stw	r5,4(r16)
   42e30:	20800315 	stw	r2,12(r4)
   42e34:	11000215 	stw	r4,8(r2)
   42e38:	8463883a 	add	r17,r16,r17
   42e3c:	9c400515 	stw	r17,20(r19)
   42e40:	9c400415 	stw	r17,16(r19)
   42e44:	18800054 	ori	r2,r3,1
   42e48:	88800115 	stw	r2,4(r17)
   42e4c:	8a000315 	stw	r8,12(r17)
   42e50:	8a000215 	stw	r8,8(r17)
   42e54:	88e3883a 	add	r17,r17,r3
   42e58:	88c00015 	stw	r3,0(r17)
   42e5c:	9009883a 	mov	r4,r18
   42e60:	004eacc0 	call	4eacc <__malloc_unlock>
   42e64:	80800204 	addi	r2,r16,8
   42e68:	00001b06 	br	42ed8 <_malloc_r+0x2a4>
   42e6c:	04400404 	movi	r17,16
   42e70:	89402536 	bltu	r17,r5,42f08 <_malloc_r+0x2d4>
   42e74:	004eaa80 	call	4eaa8 <__malloc_lock>
   42e78:	00800184 	movi	r2,6
   42e7c:	01000084 	movi	r4,2
   42e80:	04c00174 	movhi	r19,5
   42e84:	1085883a 	add	r2,r2,r2
   42e88:	9cc81e04 	addi	r19,r19,8312
   42e8c:	1085883a 	add	r2,r2,r2
   42e90:	9885883a 	add	r2,r19,r2
   42e94:	14000117 	ldw	r16,4(r2)
   42e98:	10fffe04 	addi	r3,r2,-8
   42e9c:	80c0d926 	beq	r16,r3,43204 <_malloc_r+0x5d0>
   42ea0:	80c00117 	ldw	r3,4(r16)
   42ea4:	81000317 	ldw	r4,12(r16)
   42ea8:	00bfff04 	movi	r2,-4
   42eac:	1884703a 	and	r2,r3,r2
   42eb0:	81400217 	ldw	r5,8(r16)
   42eb4:	8085883a 	add	r2,r16,r2
   42eb8:	10c00117 	ldw	r3,4(r2)
   42ebc:	29000315 	stw	r4,12(r5)
   42ec0:	21400215 	stw	r5,8(r4)
   42ec4:	18c00054 	ori	r3,r3,1
   42ec8:	10c00115 	stw	r3,4(r2)
   42ecc:	9009883a 	mov	r4,r18
   42ed0:	004eacc0 	call	4eacc <__malloc_unlock>
   42ed4:	80800204 	addi	r2,r16,8
   42ed8:	dfc00a17 	ldw	ra,40(sp)
   42edc:	df000917 	ldw	fp,36(sp)
   42ee0:	ddc00817 	ldw	r23,32(sp)
   42ee4:	dd800717 	ldw	r22,28(sp)
   42ee8:	dd400617 	ldw	r21,24(sp)
   42eec:	dd000517 	ldw	r20,20(sp)
   42ef0:	dcc00417 	ldw	r19,16(sp)
   42ef4:	dc800317 	ldw	r18,12(sp)
   42ef8:	dc400217 	ldw	r17,8(sp)
   42efc:	dc000117 	ldw	r16,4(sp)
   42f00:	dec00b04 	addi	sp,sp,44
   42f04:	f800283a 	ret
   42f08:	00800304 	movi	r2,12
   42f0c:	90800015 	stw	r2,0(r18)
   42f10:	0005883a 	mov	r2,zero
   42f14:	003ff006 	br	42ed8 <_gp+0xfffe77b0>
   42f18:	01002004 	movi	r4,128
   42f1c:	02001004 	movi	r8,64
   42f20:	01c00fc4 	movi	r7,63
   42f24:	003f6106 	br	42cac <_gp+0xfffe7584>
   42f28:	4009883a 	mov	r4,r8
   42f2c:	003f7506 	br	42d04 <_gp+0xfffe75dc>
   42f30:	81000317 	ldw	r4,12(r16)
   42f34:	003fde06 	br	42eb0 <_gp+0xfffe7788>
   42f38:	81c5883a 	add	r2,r16,r7
   42f3c:	11400117 	ldw	r5,4(r2)
   42f40:	9009883a 	mov	r4,r18
   42f44:	29400054 	ori	r5,r5,1
   42f48:	11400115 	stw	r5,4(r2)
   42f4c:	004eacc0 	call	4eacc <__malloc_unlock>
   42f50:	80800204 	addi	r2,r16,8
   42f54:	003fe006 	br	42ed8 <_gp+0xfffe77b0>
   42f58:	9c000217 	ldw	r16,8(r19)
   42f5c:	00bfff04 	movi	r2,-4
   42f60:	85800117 	ldw	r22,4(r16)
   42f64:	b0ac703a 	and	r22,r22,r2
   42f68:	b4400336 	bltu	r22,r17,42f78 <_malloc_r+0x344>
   42f6c:	b445c83a 	sub	r2,r22,r17
   42f70:	00c003c4 	movi	r3,15
   42f74:	18805d16 	blt	r3,r2,430ec <_malloc_r+0x4b8>
   42f78:	05c00174 	movhi	r23,5
   42f7c:	00800174 	movhi	r2,5
   42f80:	1094ed04 	addi	r2,r2,21428
   42f84:	bdcdcc04 	addi	r23,r23,14128
   42f88:	15400017 	ldw	r21,0(r2)
   42f8c:	b8c00017 	ldw	r3,0(r23)
   42f90:	00bfffc4 	movi	r2,-1
   42f94:	858d883a 	add	r6,r16,r22
   42f98:	8d6b883a 	add	r21,r17,r21
   42f9c:	1880ea26 	beq	r3,r2,43348 <_malloc_r+0x714>
   42fa0:	ad4403c4 	addi	r21,r21,4111
   42fa4:	00bc0004 	movi	r2,-4096
   42fa8:	a8aa703a 	and	r21,r21,r2
   42fac:	a80b883a 	mov	r5,r21
   42fb0:	9009883a 	mov	r4,r18
   42fb4:	d9800015 	stw	r6,0(sp)
   42fb8:	0043a600 	call	43a60 <_sbrk_r>
   42fbc:	1029883a 	mov	r20,r2
   42fc0:	00bfffc4 	movi	r2,-1
   42fc4:	d9800017 	ldw	r6,0(sp)
   42fc8:	a080e826 	beq	r20,r2,4336c <_malloc_r+0x738>
   42fcc:	a180a636 	bltu	r20,r6,43268 <_malloc_r+0x634>
   42fd0:	07000174 	movhi	fp,5
   42fd4:	e714f804 	addi	fp,fp,21472
   42fd8:	e0800017 	ldw	r2,0(fp)
   42fdc:	a887883a 	add	r3,r21,r2
   42fe0:	e0c00015 	stw	r3,0(fp)
   42fe4:	3500e626 	beq	r6,r20,43380 <_malloc_r+0x74c>
   42fe8:	b9000017 	ldw	r4,0(r23)
   42fec:	00bfffc4 	movi	r2,-1
   42ff0:	2080ee26 	beq	r4,r2,433ac <_malloc_r+0x778>
   42ff4:	a185c83a 	sub	r2,r20,r6
   42ff8:	10c5883a 	add	r2,r2,r3
   42ffc:	e0800015 	stw	r2,0(fp)
   43000:	a0c001cc 	andi	r3,r20,7
   43004:	1800bc26 	beq	r3,zero,432f8 <_malloc_r+0x6c4>
   43008:	a0e9c83a 	sub	r20,r20,r3
   4300c:	00840204 	movi	r2,4104
   43010:	a5000204 	addi	r20,r20,8
   43014:	10c7c83a 	sub	r3,r2,r3
   43018:	a545883a 	add	r2,r20,r21
   4301c:	1083ffcc 	andi	r2,r2,4095
   43020:	18abc83a 	sub	r21,r3,r2
   43024:	a80b883a 	mov	r5,r21
   43028:	9009883a 	mov	r4,r18
   4302c:	0043a600 	call	43a60 <_sbrk_r>
   43030:	00ffffc4 	movi	r3,-1
   43034:	10c0e126 	beq	r2,r3,433bc <_malloc_r+0x788>
   43038:	1505c83a 	sub	r2,r2,r20
   4303c:	1545883a 	add	r2,r2,r21
   43040:	10800054 	ori	r2,r2,1
   43044:	e0c00017 	ldw	r3,0(fp)
   43048:	9d000215 	stw	r20,8(r19)
   4304c:	a0800115 	stw	r2,4(r20)
   43050:	a8c7883a 	add	r3,r21,r3
   43054:	e0c00015 	stw	r3,0(fp)
   43058:	84c00e26 	beq	r16,r19,43094 <_malloc_r+0x460>
   4305c:	018003c4 	movi	r6,15
   43060:	3580a72e 	bgeu	r6,r22,43300 <_malloc_r+0x6cc>
   43064:	81400117 	ldw	r5,4(r16)
   43068:	013ffe04 	movi	r4,-8
   4306c:	b0bffd04 	addi	r2,r22,-12
   43070:	1104703a 	and	r2,r2,r4
   43074:	2900004c 	andi	r4,r5,1
   43078:	2088b03a 	or	r4,r4,r2
   4307c:	81000115 	stw	r4,4(r16)
   43080:	01400144 	movi	r5,5
   43084:	8089883a 	add	r4,r16,r2
   43088:	21400115 	stw	r5,4(r4)
   4308c:	21400215 	stw	r5,8(r4)
   43090:	3080cd36 	bltu	r6,r2,433c8 <_malloc_r+0x794>
   43094:	00800174 	movhi	r2,5
   43098:	1094ec04 	addi	r2,r2,21424
   4309c:	11000017 	ldw	r4,0(r2)
   430a0:	20c0012e 	bgeu	r4,r3,430a8 <_malloc_r+0x474>
   430a4:	10c00015 	stw	r3,0(r2)
   430a8:	00800174 	movhi	r2,5
   430ac:	1094eb04 	addi	r2,r2,21420
   430b0:	11000017 	ldw	r4,0(r2)
   430b4:	9c000217 	ldw	r16,8(r19)
   430b8:	20c0012e 	bgeu	r4,r3,430c0 <_malloc_r+0x48c>
   430bc:	10c00015 	stw	r3,0(r2)
   430c0:	80c00117 	ldw	r3,4(r16)
   430c4:	00bfff04 	movi	r2,-4
   430c8:	1886703a 	and	r3,r3,r2
   430cc:	1c45c83a 	sub	r2,r3,r17
   430d0:	1c400236 	bltu	r3,r17,430dc <_malloc_r+0x4a8>
   430d4:	00c003c4 	movi	r3,15
   430d8:	18800416 	blt	r3,r2,430ec <_malloc_r+0x4b8>
   430dc:	9009883a 	mov	r4,r18
   430e0:	004eacc0 	call	4eacc <__malloc_unlock>
   430e4:	0005883a 	mov	r2,zero
   430e8:	003f7b06 	br	42ed8 <_gp+0xfffe77b0>
   430ec:	88c00054 	ori	r3,r17,1
   430f0:	80c00115 	stw	r3,4(r16)
   430f4:	8463883a 	add	r17,r16,r17
   430f8:	10800054 	ori	r2,r2,1
   430fc:	9c400215 	stw	r17,8(r19)
   43100:	88800115 	stw	r2,4(r17)
   43104:	9009883a 	mov	r4,r18
   43108:	004eacc0 	call	4eacc <__malloc_unlock>
   4310c:	80800204 	addi	r2,r16,8
   43110:	003f7106 	br	42ed8 <_gp+0xfffe77b0>
   43114:	00c00504 	movi	r3,20
   43118:	18804a2e 	bgeu	r3,r2,43244 <_malloc_r+0x610>
   4311c:	00c01504 	movi	r3,84
   43120:	18806e36 	bltu	r3,r2,432dc <_malloc_r+0x6a8>
   43124:	8804d33a 	srli	r2,r17,12
   43128:	12001bc4 	addi	r8,r2,111
   4312c:	11c01b84 	addi	r7,r2,110
   43130:	4209883a 	add	r4,r8,r8
   43134:	003edd06 	br	42cac <_gp+0xfffe7584>
   43138:	3804d27a 	srli	r2,r7,9
   4313c:	00c00104 	movi	r3,4
   43140:	1880442e 	bgeu	r3,r2,43254 <_malloc_r+0x620>
   43144:	00c00504 	movi	r3,20
   43148:	18808136 	bltu	r3,r2,43350 <_malloc_r+0x71c>
   4314c:	11401704 	addi	r5,r2,92
   43150:	10c016c4 	addi	r3,r2,91
   43154:	294b883a 	add	r5,r5,r5
   43158:	294b883a 	add	r5,r5,r5
   4315c:	294b883a 	add	r5,r5,r5
   43160:	994b883a 	add	r5,r19,r5
   43164:	28800017 	ldw	r2,0(r5)
   43168:	01800174 	movhi	r6,5
   4316c:	297ffe04 	addi	r5,r5,-8
   43170:	31881e04 	addi	r6,r6,8312
   43174:	28806526 	beq	r5,r2,4330c <_malloc_r+0x6d8>
   43178:	01bfff04 	movi	r6,-4
   4317c:	10c00117 	ldw	r3,4(r2)
   43180:	1986703a 	and	r3,r3,r6
   43184:	38c0022e 	bgeu	r7,r3,43190 <_malloc_r+0x55c>
   43188:	10800217 	ldw	r2,8(r2)
   4318c:	28bffb1e 	bne	r5,r2,4317c <_gp+0xfffe7a54>
   43190:	11400317 	ldw	r5,12(r2)
   43194:	98c00117 	ldw	r3,4(r19)
   43198:	81400315 	stw	r5,12(r16)
   4319c:	80800215 	stw	r2,8(r16)
   431a0:	2c000215 	stw	r16,8(r5)
   431a4:	14000315 	stw	r16,12(r2)
   431a8:	003ef806 	br	42d8c <_gp+0xfffe7664>
   431ac:	88c00054 	ori	r3,r17,1
   431b0:	80c00115 	stw	r3,4(r16)
   431b4:	8463883a 	add	r17,r16,r17
   431b8:	34400515 	stw	r17,20(r6)
   431bc:	34400415 	stw	r17,16(r6)
   431c0:	10c00054 	ori	r3,r2,1
   431c4:	8a000315 	stw	r8,12(r17)
   431c8:	8a000215 	stw	r8,8(r17)
   431cc:	88c00115 	stw	r3,4(r17)
   431d0:	88a3883a 	add	r17,r17,r2
   431d4:	88800015 	stw	r2,0(r17)
   431d8:	9009883a 	mov	r4,r18
   431dc:	004eacc0 	call	4eacc <__malloc_unlock>
   431e0:	80800204 	addi	r2,r16,8
   431e4:	003f3c06 	br	42ed8 <_gp+0xfffe77b0>
   431e8:	30c00117 	ldw	r3,4(r6)
   431ec:	003ee706 	br	42d8c <_gp+0xfffe7664>
   431f0:	5ac00044 	addi	r11,r11,1
   431f4:	588000cc 	andi	r2,r11,3
   431f8:	31800204 	addi	r6,r6,8
   431fc:	103efd1e 	bne	r2,zero,42df4 <_gp+0xfffe76cc>
   43200:	00002406 	br	43294 <_malloc_r+0x660>
   43204:	14000317 	ldw	r16,12(r2)
   43208:	143f251e 	bne	r2,r16,42ea0 <_gp+0xfffe7778>
   4320c:	21000084 	addi	r4,r4,2
   43210:	003ebc06 	br	42d04 <_gp+0xfffe75dc>
   43214:	8085883a 	add	r2,r16,r2
   43218:	10c00117 	ldw	r3,4(r2)
   4321c:	81000317 	ldw	r4,12(r16)
   43220:	81400217 	ldw	r5,8(r16)
   43224:	18c00054 	ori	r3,r3,1
   43228:	10c00115 	stw	r3,4(r2)
   4322c:	29000315 	stw	r4,12(r5)
   43230:	21400215 	stw	r5,8(r4)
   43234:	9009883a 	mov	r4,r18
   43238:	004eacc0 	call	4eacc <__malloc_unlock>
   4323c:	80800204 	addi	r2,r16,8
   43240:	003f2506 	br	42ed8 <_gp+0xfffe77b0>
   43244:	12001704 	addi	r8,r2,92
   43248:	11c016c4 	addi	r7,r2,91
   4324c:	4209883a 	add	r4,r8,r8
   43250:	003e9606 	br	42cac <_gp+0xfffe7584>
   43254:	3804d1ba 	srli	r2,r7,6
   43258:	11400e44 	addi	r5,r2,57
   4325c:	10c00e04 	addi	r3,r2,56
   43260:	294b883a 	add	r5,r5,r5
   43264:	003fbc06 	br	43158 <_gp+0xfffe7a30>
   43268:	84ff5926 	beq	r16,r19,42fd0 <_gp+0xfffe78a8>
   4326c:	00800174 	movhi	r2,5
   43270:	10881e04 	addi	r2,r2,8312
   43274:	14000217 	ldw	r16,8(r2)
   43278:	00bfff04 	movi	r2,-4
   4327c:	80c00117 	ldw	r3,4(r16)
   43280:	1886703a 	and	r3,r3,r2
   43284:	003f9106 	br	430cc <_gp+0xfffe79a4>
   43288:	60800217 	ldw	r2,8(r12)
   4328c:	213fffc4 	addi	r4,r4,-1
   43290:	1300651e 	bne	r2,r12,43428 <_malloc_r+0x7f4>
   43294:	208000cc 	andi	r2,r4,3
   43298:	633ffe04 	addi	r12,r12,-8
   4329c:	103ffa1e 	bne	r2,zero,43288 <_gp+0xfffe7b60>
   432a0:	98800117 	ldw	r2,4(r19)
   432a4:	0146303a 	nor	r3,zero,r5
   432a8:	1884703a 	and	r2,r3,r2
   432ac:	98800115 	stw	r2,4(r19)
   432b0:	294b883a 	add	r5,r5,r5
   432b4:	117f2836 	bltu	r2,r5,42f58 <_gp+0xfffe7830>
   432b8:	283f2726 	beq	r5,zero,42f58 <_gp+0xfffe7830>
   432bc:	2886703a 	and	r3,r5,r2
   432c0:	5809883a 	mov	r4,r11
   432c4:	183ec31e 	bne	r3,zero,42dd4 <_gp+0xfffe76ac>
   432c8:	294b883a 	add	r5,r5,r5
   432cc:	2886703a 	and	r3,r5,r2
   432d0:	21000104 	addi	r4,r4,4
   432d4:	183ffc26 	beq	r3,zero,432c8 <_gp+0xfffe7ba0>
   432d8:	003ebe06 	br	42dd4 <_gp+0xfffe76ac>
   432dc:	00c05504 	movi	r3,340
   432e0:	18801236 	bltu	r3,r2,4332c <_malloc_r+0x6f8>
   432e4:	8804d3fa 	srli	r2,r17,15
   432e8:	12001e04 	addi	r8,r2,120
   432ec:	11c01dc4 	addi	r7,r2,119
   432f0:	4209883a 	add	r4,r8,r8
   432f4:	003e6d06 	br	42cac <_gp+0xfffe7584>
   432f8:	00c40004 	movi	r3,4096
   432fc:	003f4606 	br	43018 <_gp+0xfffe78f0>
   43300:	00800044 	movi	r2,1
   43304:	a0800115 	stw	r2,4(r20)
   43308:	003f7406 	br	430dc <_gp+0xfffe79b4>
   4330c:	1805d0ba 	srai	r2,r3,2
   43310:	01c00044 	movi	r7,1
   43314:	30c00117 	ldw	r3,4(r6)
   43318:	388e983a 	sll	r7,r7,r2
   4331c:	2805883a 	mov	r2,r5
   43320:	38c6b03a 	or	r3,r7,r3
   43324:	30c00115 	stw	r3,4(r6)
   43328:	003f9b06 	br	43198 <_gp+0xfffe7a70>
   4332c:	00c15504 	movi	r3,1364
   43330:	18801a36 	bltu	r3,r2,4339c <_malloc_r+0x768>
   43334:	8804d4ba 	srli	r2,r17,18
   43338:	12001f44 	addi	r8,r2,125
   4333c:	11c01f04 	addi	r7,r2,124
   43340:	4209883a 	add	r4,r8,r8
   43344:	003e5906 	br	42cac <_gp+0xfffe7584>
   43348:	ad400404 	addi	r21,r21,16
   4334c:	003f1706 	br	42fac <_gp+0xfffe7884>
   43350:	00c01504 	movi	r3,84
   43354:	18802336 	bltu	r3,r2,433e4 <_malloc_r+0x7b0>
   43358:	3804d33a 	srli	r2,r7,12
   4335c:	11401bc4 	addi	r5,r2,111
   43360:	10c01b84 	addi	r3,r2,110
   43364:	294b883a 	add	r5,r5,r5
   43368:	003f7b06 	br	43158 <_gp+0xfffe7a30>
   4336c:	9c000217 	ldw	r16,8(r19)
   43370:	00bfff04 	movi	r2,-4
   43374:	80c00117 	ldw	r3,4(r16)
   43378:	1886703a 	and	r3,r3,r2
   4337c:	003f5306 	br	430cc <_gp+0xfffe79a4>
   43380:	3083ffcc 	andi	r2,r6,4095
   43384:	103f181e 	bne	r2,zero,42fe8 <_gp+0xfffe78c0>
   43388:	99000217 	ldw	r4,8(r19)
   4338c:	b545883a 	add	r2,r22,r21
   43390:	10800054 	ori	r2,r2,1
   43394:	20800115 	stw	r2,4(r4)
   43398:	003f3e06 	br	43094 <_gp+0xfffe796c>
   4339c:	01003f84 	movi	r4,254
   433a0:	02001fc4 	movi	r8,127
   433a4:	01c01f84 	movi	r7,126
   433a8:	003e4006 	br	42cac <_gp+0xfffe7584>
   433ac:	00800174 	movhi	r2,5
   433b0:	108dcc04 	addi	r2,r2,14128
   433b4:	15000015 	stw	r20,0(r2)
   433b8:	003f1106 	br	43000 <_gp+0xfffe78d8>
   433bc:	00800044 	movi	r2,1
   433c0:	002b883a 	mov	r21,zero
   433c4:	003f1f06 	br	43044 <_gp+0xfffe791c>
   433c8:	81400204 	addi	r5,r16,8
   433cc:	9009883a 	mov	r4,r18
   433d0:	00421040 	call	42104 <_free_r>
   433d4:	00800174 	movhi	r2,5
   433d8:	1094f804 	addi	r2,r2,21472
   433dc:	10c00017 	ldw	r3,0(r2)
   433e0:	003f2c06 	br	43094 <_gp+0xfffe796c>
   433e4:	00c05504 	movi	r3,340
   433e8:	18800536 	bltu	r3,r2,43400 <_malloc_r+0x7cc>
   433ec:	3804d3fa 	srli	r2,r7,15
   433f0:	11401e04 	addi	r5,r2,120
   433f4:	10c01dc4 	addi	r3,r2,119
   433f8:	294b883a 	add	r5,r5,r5
   433fc:	003f5606 	br	43158 <_gp+0xfffe7a30>
   43400:	00c15504 	movi	r3,1364
   43404:	18800536 	bltu	r3,r2,4341c <_malloc_r+0x7e8>
   43408:	3804d4ba 	srli	r2,r7,18
   4340c:	11401f44 	addi	r5,r2,125
   43410:	10c01f04 	addi	r3,r2,124
   43414:	294b883a 	add	r5,r5,r5
   43418:	003f4f06 	br	43158 <_gp+0xfffe7a30>
   4341c:	01403f84 	movi	r5,254
   43420:	00c01f84 	movi	r3,126
   43424:	003f4c06 	br	43158 <_gp+0xfffe7a30>
   43428:	98800117 	ldw	r2,4(r19)
   4342c:	003fa006 	br	432b0 <_gp+0xfffe7b88>
   43430:	8808d0fa 	srli	r4,r17,3
   43434:	20800044 	addi	r2,r4,1
   43438:	1085883a 	add	r2,r2,r2
   4343c:	003e9006 	br	42e80 <_gp+0xfffe7758>

00043440 <memset>:
   43440:	20c000cc 	andi	r3,r4,3
   43444:	2005883a 	mov	r2,r4
   43448:	18004426 	beq	r3,zero,4355c <memset+0x11c>
   4344c:	31ffffc4 	addi	r7,r6,-1
   43450:	30004026 	beq	r6,zero,43554 <memset+0x114>
   43454:	2813883a 	mov	r9,r5
   43458:	200d883a 	mov	r6,r4
   4345c:	2007883a 	mov	r3,r4
   43460:	00000406 	br	43474 <memset+0x34>
   43464:	3a3fffc4 	addi	r8,r7,-1
   43468:	31800044 	addi	r6,r6,1
   4346c:	38003926 	beq	r7,zero,43554 <memset+0x114>
   43470:	400f883a 	mov	r7,r8
   43474:	18c00044 	addi	r3,r3,1
   43478:	32400005 	stb	r9,0(r6)
   4347c:	1a0000cc 	andi	r8,r3,3
   43480:	403ff81e 	bne	r8,zero,43464 <_gp+0xfffe7d3c>
   43484:	010000c4 	movi	r4,3
   43488:	21c02d2e 	bgeu	r4,r7,43540 <memset+0x100>
   4348c:	29003fcc 	andi	r4,r5,255
   43490:	200c923a 	slli	r6,r4,8
   43494:	3108b03a 	or	r4,r6,r4
   43498:	200c943a 	slli	r6,r4,16
   4349c:	218cb03a 	or	r6,r4,r6
   434a0:	010003c4 	movi	r4,15
   434a4:	21c0182e 	bgeu	r4,r7,43508 <memset+0xc8>
   434a8:	3b3ffc04 	addi	r12,r7,-16
   434ac:	6018d13a 	srli	r12,r12,4
   434b0:	1a000104 	addi	r8,r3,4
   434b4:	1ac00204 	addi	r11,r3,8
   434b8:	6008913a 	slli	r4,r12,4
   434bc:	1a800304 	addi	r10,r3,12
   434c0:	1813883a 	mov	r9,r3
   434c4:	21000504 	addi	r4,r4,20
   434c8:	1909883a 	add	r4,r3,r4
   434cc:	49800015 	stw	r6,0(r9)
   434d0:	41800015 	stw	r6,0(r8)
   434d4:	59800015 	stw	r6,0(r11)
   434d8:	51800015 	stw	r6,0(r10)
   434dc:	42000404 	addi	r8,r8,16
   434e0:	4a400404 	addi	r9,r9,16
   434e4:	5ac00404 	addi	r11,r11,16
   434e8:	52800404 	addi	r10,r10,16
   434ec:	413ff71e 	bne	r8,r4,434cc <_gp+0xfffe7da4>
   434f0:	63000044 	addi	r12,r12,1
   434f4:	6018913a 	slli	r12,r12,4
   434f8:	39c003cc 	andi	r7,r7,15
   434fc:	010000c4 	movi	r4,3
   43500:	1b07883a 	add	r3,r3,r12
   43504:	21c00e2e 	bgeu	r4,r7,43540 <memset+0x100>
   43508:	1813883a 	mov	r9,r3
   4350c:	3811883a 	mov	r8,r7
   43510:	010000c4 	movi	r4,3
   43514:	49800015 	stw	r6,0(r9)
   43518:	423fff04 	addi	r8,r8,-4
   4351c:	4a400104 	addi	r9,r9,4
   43520:	223ffc36 	bltu	r4,r8,43514 <_gp+0xfffe7dec>
   43524:	393fff04 	addi	r4,r7,-4
   43528:	2008d0ba 	srli	r4,r4,2
   4352c:	39c000cc 	andi	r7,r7,3
   43530:	21000044 	addi	r4,r4,1
   43534:	2109883a 	add	r4,r4,r4
   43538:	2109883a 	add	r4,r4,r4
   4353c:	1907883a 	add	r3,r3,r4
   43540:	38000526 	beq	r7,zero,43558 <memset+0x118>
   43544:	19cf883a 	add	r7,r3,r7
   43548:	19400005 	stb	r5,0(r3)
   4354c:	18c00044 	addi	r3,r3,1
   43550:	38fffd1e 	bne	r7,r3,43548 <_gp+0xfffe7e20>
   43554:	f800283a 	ret
   43558:	f800283a 	ret
   4355c:	2007883a 	mov	r3,r4
   43560:	300f883a 	mov	r7,r6
   43564:	003fc706 	br	43484 <_gp+0xfffe7d5c>

00043568 <_open_r>:
   43568:	defffd04 	addi	sp,sp,-12
   4356c:	2805883a 	mov	r2,r5
   43570:	dc000015 	stw	r16,0(sp)
   43574:	04000174 	movhi	r16,5
   43578:	dc400115 	stw	r17,4(sp)
   4357c:	300b883a 	mov	r5,r6
   43580:	8414ea04 	addi	r16,r16,21416
   43584:	2023883a 	mov	r17,r4
   43588:	380d883a 	mov	r6,r7
   4358c:	1009883a 	mov	r4,r2
   43590:	dfc00215 	stw	ra,8(sp)
   43594:	80000015 	stw	zero,0(r16)
   43598:	004ec180 	call	4ec18 <open>
   4359c:	00ffffc4 	movi	r3,-1
   435a0:	10c00526 	beq	r2,r3,435b8 <_open_r+0x50>
   435a4:	dfc00217 	ldw	ra,8(sp)
   435a8:	dc400117 	ldw	r17,4(sp)
   435ac:	dc000017 	ldw	r16,0(sp)
   435b0:	dec00304 	addi	sp,sp,12
   435b4:	f800283a 	ret
   435b8:	80c00017 	ldw	r3,0(r16)
   435bc:	183ff926 	beq	r3,zero,435a4 <_gp+0xfffe7e7c>
   435c0:	88c00015 	stw	r3,0(r17)
   435c4:	003ff706 	br	435a4 <_gp+0xfffe7e7c>

000435c8 <_printf_r>:
   435c8:	defffd04 	addi	sp,sp,-12
   435cc:	2805883a 	mov	r2,r5
   435d0:	dfc00015 	stw	ra,0(sp)
   435d4:	d9800115 	stw	r6,4(sp)
   435d8:	d9c00215 	stw	r7,8(sp)
   435dc:	21400217 	ldw	r5,8(r4)
   435e0:	d9c00104 	addi	r7,sp,4
   435e4:	100d883a 	mov	r6,r2
   435e8:	0043da40 	call	43da4 <___vfprintf_internal_r>
   435ec:	dfc00017 	ldw	ra,0(sp)
   435f0:	dec00304 	addi	sp,sp,12
   435f4:	f800283a 	ret

000435f8 <printf>:
   435f8:	defffc04 	addi	sp,sp,-16
   435fc:	dfc00015 	stw	ra,0(sp)
   43600:	d9400115 	stw	r5,4(sp)
   43604:	d9800215 	stw	r6,8(sp)
   43608:	d9c00315 	stw	r7,12(sp)
   4360c:	00800174 	movhi	r2,5
   43610:	108dcb04 	addi	r2,r2,14124
   43614:	10800017 	ldw	r2,0(r2)
   43618:	200b883a 	mov	r5,r4
   4361c:	d9800104 	addi	r6,sp,4
   43620:	11000217 	ldw	r4,8(r2)
   43624:	00460800 	call	46080 <__vfprintf_internal>
   43628:	dfc00017 	ldw	ra,0(sp)
   4362c:	dec00404 	addi	sp,sp,16
   43630:	f800283a 	ret

00043634 <_putc_r>:
   43634:	defffc04 	addi	sp,sp,-16
   43638:	dc000215 	stw	r16,8(sp)
   4363c:	dfc00315 	stw	ra,12(sp)
   43640:	2021883a 	mov	r16,r4
   43644:	20000226 	beq	r4,zero,43650 <_putc_r+0x1c>
   43648:	20800e17 	ldw	r2,56(r4)
   4364c:	10001b26 	beq	r2,zero,436bc <_putc_r+0x88>
   43650:	30800217 	ldw	r2,8(r6)
   43654:	10bfffc4 	addi	r2,r2,-1
   43658:	30800215 	stw	r2,8(r6)
   4365c:	10000a16 	blt	r2,zero,43688 <_putc_r+0x54>
   43660:	30800017 	ldw	r2,0(r6)
   43664:	11400005 	stb	r5,0(r2)
   43668:	30800017 	ldw	r2,0(r6)
   4366c:	10c00044 	addi	r3,r2,1
   43670:	30c00015 	stw	r3,0(r6)
   43674:	10800003 	ldbu	r2,0(r2)
   43678:	dfc00317 	ldw	ra,12(sp)
   4367c:	dc000217 	ldw	r16,8(sp)
   43680:	dec00404 	addi	sp,sp,16
   43684:	f800283a 	ret
   43688:	30c00617 	ldw	r3,24(r6)
   4368c:	10c00616 	blt	r2,r3,436a8 <_putc_r+0x74>
   43690:	30800017 	ldw	r2,0(r6)
   43694:	00c00284 	movi	r3,10
   43698:	11400005 	stb	r5,0(r2)
   4369c:	30800017 	ldw	r2,0(r6)
   436a0:	11400003 	ldbu	r5,0(r2)
   436a4:	28fff11e 	bne	r5,r3,4366c <_gp+0xfffe7f44>
   436a8:	8009883a 	mov	r4,r16
   436ac:	dfc00317 	ldw	ra,12(sp)
   436b0:	dc000217 	ldw	r16,8(sp)
   436b4:	dec00404 	addi	sp,sp,16
   436b8:	00461581 	jmpi	46158 <__swbuf_r>
   436bc:	d9400015 	stw	r5,0(sp)
   436c0:	d9800115 	stw	r6,4(sp)
   436c4:	0041de40 	call	41de4 <__sinit>
   436c8:	d9800117 	ldw	r6,4(sp)
   436cc:	d9400017 	ldw	r5,0(sp)
   436d0:	003fdf06 	br	43650 <_gp+0xfffe7f28>

000436d4 <putc>:
   436d4:	00800174 	movhi	r2,5
   436d8:	defffc04 	addi	sp,sp,-16
   436dc:	108dcb04 	addi	r2,r2,14124
   436e0:	dc000115 	stw	r16,4(sp)
   436e4:	14000017 	ldw	r16,0(r2)
   436e8:	dc400215 	stw	r17,8(sp)
   436ec:	dfc00315 	stw	ra,12(sp)
   436f0:	2023883a 	mov	r17,r4
   436f4:	80000226 	beq	r16,zero,43700 <putc+0x2c>
   436f8:	80800e17 	ldw	r2,56(r16)
   436fc:	10001a26 	beq	r2,zero,43768 <putc+0x94>
   43700:	28800217 	ldw	r2,8(r5)
   43704:	10bfffc4 	addi	r2,r2,-1
   43708:	28800215 	stw	r2,8(r5)
   4370c:	10000b16 	blt	r2,zero,4373c <putc+0x68>
   43710:	28800017 	ldw	r2,0(r5)
   43714:	14400005 	stb	r17,0(r2)
   43718:	28800017 	ldw	r2,0(r5)
   4371c:	10c00044 	addi	r3,r2,1
   43720:	28c00015 	stw	r3,0(r5)
   43724:	10800003 	ldbu	r2,0(r2)
   43728:	dfc00317 	ldw	ra,12(sp)
   4372c:	dc400217 	ldw	r17,8(sp)
   43730:	dc000117 	ldw	r16,4(sp)
   43734:	dec00404 	addi	sp,sp,16
   43738:	f800283a 	ret
   4373c:	28c00617 	ldw	r3,24(r5)
   43740:	10c00e16 	blt	r2,r3,4377c <putc+0xa8>
   43744:	28800017 	ldw	r2,0(r5)
   43748:	01000284 	movi	r4,10
   4374c:	14400005 	stb	r17,0(r2)
   43750:	28800017 	ldw	r2,0(r5)
   43754:	10c00003 	ldbu	r3,0(r2)
   43758:	193ff01e 	bne	r3,r4,4371c <_gp+0xfffe7ff4>
   4375c:	280d883a 	mov	r6,r5
   43760:	180b883a 	mov	r5,r3
   43764:	00000706 	br	43784 <putc+0xb0>
   43768:	8009883a 	mov	r4,r16
   4376c:	d9400015 	stw	r5,0(sp)
   43770:	0041de40 	call	41de4 <__sinit>
   43774:	d9400017 	ldw	r5,0(sp)
   43778:	003fe106 	br	43700 <_gp+0xfffe7fd8>
   4377c:	280d883a 	mov	r6,r5
   43780:	880b883a 	mov	r5,r17
   43784:	8009883a 	mov	r4,r16
   43788:	dfc00317 	ldw	ra,12(sp)
   4378c:	dc400217 	ldw	r17,8(sp)
   43790:	dc000117 	ldw	r16,4(sp)
   43794:	dec00404 	addi	sp,sp,16
   43798:	00461581 	jmpi	46158 <__swbuf_r>

0004379c <_puts_r>:
   4379c:	defff604 	addi	sp,sp,-40
   437a0:	dc000715 	stw	r16,28(sp)
   437a4:	2021883a 	mov	r16,r4
   437a8:	2809883a 	mov	r4,r5
   437ac:	dc400815 	stw	r17,32(sp)
   437b0:	dfc00915 	stw	ra,36(sp)
   437b4:	2823883a 	mov	r17,r5
   437b8:	0043d040 	call	43d04 <strlen>
   437bc:	10c00044 	addi	r3,r2,1
   437c0:	d8800115 	stw	r2,4(sp)
   437c4:	00800174 	movhi	r2,5
   437c8:	10866c04 	addi	r2,r2,6576
   437cc:	d8800215 	stw	r2,8(sp)
   437d0:	00800044 	movi	r2,1
   437d4:	d8800315 	stw	r2,12(sp)
   437d8:	00800084 	movi	r2,2
   437dc:	dc400015 	stw	r17,0(sp)
   437e0:	d8c00615 	stw	r3,24(sp)
   437e4:	dec00415 	stw	sp,16(sp)
   437e8:	d8800515 	stw	r2,20(sp)
   437ec:	80000226 	beq	r16,zero,437f8 <_puts_r+0x5c>
   437f0:	80800e17 	ldw	r2,56(r16)
   437f4:	10001426 	beq	r2,zero,43848 <_puts_r+0xac>
   437f8:	81400217 	ldw	r5,8(r16)
   437fc:	2880030b 	ldhu	r2,12(r5)
   43800:	10c8000c 	andi	r3,r2,8192
   43804:	1800061e 	bne	r3,zero,43820 <_puts_r+0x84>
   43808:	29001917 	ldw	r4,100(r5)
   4380c:	00f7ffc4 	movi	r3,-8193
   43810:	10880014 	ori	r2,r2,8192
   43814:	20c6703a 	and	r3,r4,r3
   43818:	2880030d 	sth	r2,12(r5)
   4381c:	28c01915 	stw	r3,100(r5)
   43820:	d9800404 	addi	r6,sp,16
   43824:	8009883a 	mov	r4,r16
   43828:	0047e140 	call	47e14 <__sfvwrite_r>
   4382c:	1000091e 	bne	r2,zero,43854 <_puts_r+0xb8>
   43830:	00800284 	movi	r2,10
   43834:	dfc00917 	ldw	ra,36(sp)
   43838:	dc400817 	ldw	r17,32(sp)
   4383c:	dc000717 	ldw	r16,28(sp)
   43840:	dec00a04 	addi	sp,sp,40
   43844:	f800283a 	ret
   43848:	8009883a 	mov	r4,r16
   4384c:	0041de40 	call	41de4 <__sinit>
   43850:	003fe906 	br	437f8 <_gp+0xfffe80d0>
   43854:	00bfffc4 	movi	r2,-1
   43858:	003ff606 	br	43834 <_gp+0xfffe810c>

0004385c <puts>:
   4385c:	00800174 	movhi	r2,5
   43860:	108dcb04 	addi	r2,r2,14124
   43864:	200b883a 	mov	r5,r4
   43868:	11000017 	ldw	r4,0(r2)
   4386c:	004379c1 	jmpi	4379c <_puts_r>

00043870 <lflush>:
   43870:	2080030b 	ldhu	r2,12(r4)
   43874:	00c00244 	movi	r3,9
   43878:	1080024c 	andi	r2,r2,9
   4387c:	10c00226 	beq	r2,r3,43888 <lflush+0x18>
   43880:	0005883a 	mov	r2,zero
   43884:	f800283a 	ret
   43888:	0041a541 	jmpi	41a54 <fflush>

0004388c <__srefill_r>:
   4388c:	defffc04 	addi	sp,sp,-16
   43890:	dc400115 	stw	r17,4(sp)
   43894:	dc000015 	stw	r16,0(sp)
   43898:	dfc00315 	stw	ra,12(sp)
   4389c:	dc800215 	stw	r18,8(sp)
   438a0:	2023883a 	mov	r17,r4
   438a4:	2821883a 	mov	r16,r5
   438a8:	20000226 	beq	r4,zero,438b4 <__srefill_r+0x28>
   438ac:	20800e17 	ldw	r2,56(r4)
   438b0:	10003c26 	beq	r2,zero,439a4 <__srefill_r+0x118>
   438b4:	80c0030b 	ldhu	r3,12(r16)
   438b8:	1908000c 	andi	r4,r3,8192
   438bc:	1805883a 	mov	r2,r3
   438c0:	2000071e 	bne	r4,zero,438e0 <__srefill_r+0x54>
   438c4:	81001917 	ldw	r4,100(r16)
   438c8:	18880014 	ori	r2,r3,8192
   438cc:	00f7ffc4 	movi	r3,-8193
   438d0:	20c8703a 	and	r4,r4,r3
   438d4:	8080030d 	sth	r2,12(r16)
   438d8:	1007883a 	mov	r3,r2
   438dc:	81001915 	stw	r4,100(r16)
   438e0:	80000115 	stw	zero,4(r16)
   438e4:	1100080c 	andi	r4,r2,32
   438e8:	2000571e 	bne	r4,zero,43a48 <__srefill_r+0x1bc>
   438ec:	1100010c 	andi	r4,r2,4
   438f0:	20001f26 	beq	r4,zero,43970 <__srefill_r+0xe4>
   438f4:	81400c17 	ldw	r5,48(r16)
   438f8:	28000826 	beq	r5,zero,4391c <__srefill_r+0x90>
   438fc:	80801004 	addi	r2,r16,64
   43900:	28800226 	beq	r5,r2,4390c <__srefill_r+0x80>
   43904:	8809883a 	mov	r4,r17
   43908:	00421040 	call	42104 <_free_r>
   4390c:	80800f17 	ldw	r2,60(r16)
   43910:	80000c15 	stw	zero,48(r16)
   43914:	80800115 	stw	r2,4(r16)
   43918:	1000391e 	bne	r2,zero,43a00 <__srefill_r+0x174>
   4391c:	80800417 	ldw	r2,16(r16)
   43920:	10004b26 	beq	r2,zero,43a50 <__srefill_r+0x1c4>
   43924:	8480030b 	ldhu	r18,12(r16)
   43928:	908000cc 	andi	r2,r18,3
   4392c:	10001f1e 	bne	r2,zero,439ac <__srefill_r+0x120>
   43930:	81800417 	ldw	r6,16(r16)
   43934:	80800817 	ldw	r2,32(r16)
   43938:	81c00517 	ldw	r7,20(r16)
   4393c:	81400717 	ldw	r5,28(r16)
   43940:	81800015 	stw	r6,0(r16)
   43944:	8809883a 	mov	r4,r17
   43948:	103ee83a 	callr	r2
   4394c:	80800115 	stw	r2,4(r16)
   43950:	00800e0e 	bge	zero,r2,4398c <__srefill_r+0x100>
   43954:	0005883a 	mov	r2,zero
   43958:	dfc00317 	ldw	ra,12(sp)
   4395c:	dc800217 	ldw	r18,8(sp)
   43960:	dc400117 	ldw	r17,4(sp)
   43964:	dc000017 	ldw	r16,0(sp)
   43968:	dec00404 	addi	sp,sp,16
   4396c:	f800283a 	ret
   43970:	1100040c 	andi	r4,r2,16
   43974:	20003026 	beq	r4,zero,43a38 <__srefill_r+0x1ac>
   43978:	1080020c 	andi	r2,r2,8
   4397c:	1000241e 	bne	r2,zero,43a10 <__srefill_r+0x184>
   43980:	18c00114 	ori	r3,r3,4
   43984:	80c0030d 	sth	r3,12(r16)
   43988:	003fe406 	br	4391c <_gp+0xfffe81f4>
   4398c:	80c0030b 	ldhu	r3,12(r16)
   43990:	1000161e 	bne	r2,zero,439ec <__srefill_r+0x160>
   43994:	18c00814 	ori	r3,r3,32
   43998:	00bfffc4 	movi	r2,-1
   4399c:	80c0030d 	sth	r3,12(r16)
   439a0:	003fed06 	br	43958 <_gp+0xfffe8230>
   439a4:	0041de40 	call	41de4 <__sinit>
   439a8:	003fc206 	br	438b4 <_gp+0xfffe818c>
   439ac:	00800174 	movhi	r2,5
   439b0:	108dca04 	addi	r2,r2,14120
   439b4:	11000017 	ldw	r4,0(r2)
   439b8:	01400134 	movhi	r5,4
   439bc:	00800044 	movi	r2,1
   439c0:	294e1c04 	addi	r5,r5,14448
   439c4:	8080030d 	sth	r2,12(r16)
   439c8:	00428f00 	call	428f0 <_fwalk>
   439cc:	00800244 	movi	r2,9
   439d0:	8480030d 	sth	r18,12(r16)
   439d4:	9480024c 	andi	r18,r18,9
   439d8:	90bfd51e 	bne	r18,r2,43930 <_gp+0xfffe8208>
   439dc:	800b883a 	mov	r5,r16
   439e0:	8809883a 	mov	r4,r17
   439e4:	00417dc0 	call	417dc <__sflush_r>
   439e8:	003fd106 	br	43930 <_gp+0xfffe8208>
   439ec:	18c01014 	ori	r3,r3,64
   439f0:	80000115 	stw	zero,4(r16)
   439f4:	00bfffc4 	movi	r2,-1
   439f8:	80c0030d 	sth	r3,12(r16)
   439fc:	003fd606 	br	43958 <_gp+0xfffe8230>
   43a00:	80c00e17 	ldw	r3,56(r16)
   43a04:	0005883a 	mov	r2,zero
   43a08:	80c00015 	stw	r3,0(r16)
   43a0c:	003fd206 	br	43958 <_gp+0xfffe8230>
   43a10:	800b883a 	mov	r5,r16
   43a14:	8809883a 	mov	r4,r17
   43a18:	00419f80 	call	419f8 <_fflush_r>
   43a1c:	10000a1e 	bne	r2,zero,43a48 <__srefill_r+0x1bc>
   43a20:	8080030b 	ldhu	r2,12(r16)
   43a24:	00fffdc4 	movi	r3,-9
   43a28:	80000215 	stw	zero,8(r16)
   43a2c:	1886703a 	and	r3,r3,r2
   43a30:	80000615 	stw	zero,24(r16)
   43a34:	003fd206 	br	43980 <_gp+0xfffe8258>
   43a38:	00800244 	movi	r2,9
   43a3c:	88800015 	stw	r2,0(r17)
   43a40:	18c01014 	ori	r3,r3,64
   43a44:	80c0030d 	sth	r3,12(r16)
   43a48:	00bfffc4 	movi	r2,-1
   43a4c:	003fc206 	br	43958 <_gp+0xfffe8230>
   43a50:	800b883a 	mov	r5,r16
   43a54:	8809883a 	mov	r4,r17
   43a58:	0042a780 	call	42a78 <__smakebuf_r>
   43a5c:	003fb106 	br	43924 <_gp+0xfffe81fc>

00043a60 <_sbrk_r>:
   43a60:	defffd04 	addi	sp,sp,-12
   43a64:	dc000015 	stw	r16,0(sp)
   43a68:	04000174 	movhi	r16,5
   43a6c:	dc400115 	stw	r17,4(sp)
   43a70:	8414ea04 	addi	r16,r16,21416
   43a74:	2023883a 	mov	r17,r4
   43a78:	2809883a 	mov	r4,r5
   43a7c:	dfc00215 	stw	ra,8(sp)
   43a80:	80000015 	stw	zero,0(r16)
   43a84:	004ef380 	call	4ef38 <sbrk>
   43a88:	00ffffc4 	movi	r3,-1
   43a8c:	10c00526 	beq	r2,r3,43aa4 <_sbrk_r+0x44>
   43a90:	dfc00217 	ldw	ra,8(sp)
   43a94:	dc400117 	ldw	r17,4(sp)
   43a98:	dc000017 	ldw	r16,0(sp)
   43a9c:	dec00304 	addi	sp,sp,12
   43aa0:	f800283a 	ret
   43aa4:	80c00017 	ldw	r3,0(r16)
   43aa8:	183ff926 	beq	r3,zero,43a90 <_gp+0xfffe8368>
   43aac:	88c00015 	stw	r3,0(r17)
   43ab0:	003ff706 	br	43a90 <_gp+0xfffe8368>

00043ab4 <__sread>:
   43ab4:	defffe04 	addi	sp,sp,-8
   43ab8:	dc000015 	stw	r16,0(sp)
   43abc:	2821883a 	mov	r16,r5
   43ac0:	2940038f 	ldh	r5,14(r5)
   43ac4:	dfc00115 	stw	ra,4(sp)
   43ac8:	00498ac0 	call	498ac <_read_r>
   43acc:	10000716 	blt	r2,zero,43aec <__sread+0x38>
   43ad0:	80c01417 	ldw	r3,80(r16)
   43ad4:	1887883a 	add	r3,r3,r2
   43ad8:	80c01415 	stw	r3,80(r16)
   43adc:	dfc00117 	ldw	ra,4(sp)
   43ae0:	dc000017 	ldw	r16,0(sp)
   43ae4:	dec00204 	addi	sp,sp,8
   43ae8:	f800283a 	ret
   43aec:	80c0030b 	ldhu	r3,12(r16)
   43af0:	18fbffcc 	andi	r3,r3,61439
   43af4:	80c0030d 	sth	r3,12(r16)
   43af8:	dfc00117 	ldw	ra,4(sp)
   43afc:	dc000017 	ldw	r16,0(sp)
   43b00:	dec00204 	addi	sp,sp,8
   43b04:	f800283a 	ret

00043b08 <__seofread>:
   43b08:	0005883a 	mov	r2,zero
   43b0c:	f800283a 	ret

00043b10 <__swrite>:
   43b10:	2880030b 	ldhu	r2,12(r5)
   43b14:	defffb04 	addi	sp,sp,-20
   43b18:	dcc00315 	stw	r19,12(sp)
   43b1c:	dc800215 	stw	r18,8(sp)
   43b20:	dc400115 	stw	r17,4(sp)
   43b24:	dc000015 	stw	r16,0(sp)
   43b28:	dfc00415 	stw	ra,16(sp)
   43b2c:	10c0400c 	andi	r3,r2,256
   43b30:	2821883a 	mov	r16,r5
   43b34:	2023883a 	mov	r17,r4
   43b38:	3025883a 	mov	r18,r6
   43b3c:	3827883a 	mov	r19,r7
   43b40:	18000526 	beq	r3,zero,43b58 <__swrite+0x48>
   43b44:	2940038f 	ldh	r5,14(r5)
   43b48:	01c00084 	movi	r7,2
   43b4c:	000d883a 	mov	r6,zero
   43b50:	004840c0 	call	4840c <_lseek_r>
   43b54:	8080030b 	ldhu	r2,12(r16)
   43b58:	8140038f 	ldh	r5,14(r16)
   43b5c:	10bbffcc 	andi	r2,r2,61439
   43b60:	980f883a 	mov	r7,r19
   43b64:	900d883a 	mov	r6,r18
   43b68:	8809883a 	mov	r4,r17
   43b6c:	8080030d 	sth	r2,12(r16)
   43b70:	dfc00417 	ldw	ra,16(sp)
   43b74:	dcc00317 	ldw	r19,12(sp)
   43b78:	dc800217 	ldw	r18,8(sp)
   43b7c:	dc400117 	ldw	r17,4(sp)
   43b80:	dc000017 	ldw	r16,0(sp)
   43b84:	dec00504 	addi	sp,sp,20
   43b88:	00462b01 	jmpi	462b0 <_write_r>

00043b8c <__sseek>:
   43b8c:	defffe04 	addi	sp,sp,-8
   43b90:	dc000015 	stw	r16,0(sp)
   43b94:	2821883a 	mov	r16,r5
   43b98:	2940038f 	ldh	r5,14(r5)
   43b9c:	dfc00115 	stw	ra,4(sp)
   43ba0:	004840c0 	call	4840c <_lseek_r>
   43ba4:	00ffffc4 	movi	r3,-1
   43ba8:	10c00826 	beq	r2,r3,43bcc <__sseek+0x40>
   43bac:	80c0030b 	ldhu	r3,12(r16)
   43bb0:	80801415 	stw	r2,80(r16)
   43bb4:	18c40014 	ori	r3,r3,4096
   43bb8:	80c0030d 	sth	r3,12(r16)
   43bbc:	dfc00117 	ldw	ra,4(sp)
   43bc0:	dc000017 	ldw	r16,0(sp)
   43bc4:	dec00204 	addi	sp,sp,8
   43bc8:	f800283a 	ret
   43bcc:	80c0030b 	ldhu	r3,12(r16)
   43bd0:	18fbffcc 	andi	r3,r3,61439
   43bd4:	80c0030d 	sth	r3,12(r16)
   43bd8:	dfc00117 	ldw	ra,4(sp)
   43bdc:	dc000017 	ldw	r16,0(sp)
   43be0:	dec00204 	addi	sp,sp,8
   43be4:	f800283a 	ret

00043be8 <__sclose>:
   43be8:	2940038f 	ldh	r5,14(r5)
   43bec:	00464641 	jmpi	46464 <_close_r>

00043bf0 <strcat>:
   43bf0:	defffe04 	addi	sp,sp,-8
   43bf4:	dc000015 	stw	r16,0(sp)
   43bf8:	dfc00115 	stw	ra,4(sp)
   43bfc:	208000cc 	andi	r2,r4,3
   43c00:	2021883a 	mov	r16,r4
   43c04:	1000131e 	bne	r2,zero,43c54 <strcat+0x64>
   43c08:	20800017 	ldw	r2,0(r4)
   43c0c:	01ffbff4 	movhi	r7,65279
   43c10:	39ffbfc4 	addi	r7,r7,-257
   43c14:	0086303a 	nor	r3,zero,r2
   43c18:	01a02074 	movhi	r6,32897
   43c1c:	11c5883a 	add	r2,r2,r7
   43c20:	31a02004 	addi	r6,r6,-32640
   43c24:	10c4703a 	and	r2,r2,r3
   43c28:	1184703a 	and	r2,r2,r6
   43c2c:	1000091e 	bne	r2,zero,43c54 <strcat+0x64>
   43c30:	21000104 	addi	r4,r4,4
   43c34:	20800017 	ldw	r2,0(r4)
   43c38:	11c7883a 	add	r3,r2,r7
   43c3c:	0084303a 	nor	r2,zero,r2
   43c40:	1884703a 	and	r2,r3,r2
   43c44:	1184703a 	and	r2,r2,r6
   43c48:	103ff926 	beq	r2,zero,43c30 <_gp+0xfffe8508>
   43c4c:	00000106 	br	43c54 <strcat+0x64>
   43c50:	21000044 	addi	r4,r4,1
   43c54:	20800007 	ldb	r2,0(r4)
   43c58:	103ffd1e 	bne	r2,zero,43c50 <_gp+0xfffe8528>
   43c5c:	0043c740 	call	43c74 <strcpy>
   43c60:	8005883a 	mov	r2,r16
   43c64:	dfc00117 	ldw	ra,4(sp)
   43c68:	dc000017 	ldw	r16,0(sp)
   43c6c:	dec00204 	addi	sp,sp,8
   43c70:	f800283a 	ret

00043c74 <strcpy>:
   43c74:	2906b03a 	or	r3,r5,r4
   43c78:	18c000cc 	andi	r3,r3,3
   43c7c:	2005883a 	mov	r2,r4
   43c80:	1800161e 	bne	r3,zero,43cdc <strcpy+0x68>
   43c84:	29c00017 	ldw	r7,0(r5)
   43c88:	02ffbff4 	movhi	r11,65279
   43c8c:	5affbfc4 	addi	r11,r11,-257
   43c90:	02a02074 	movhi	r10,32897
   43c94:	01c6303a 	nor	r3,zero,r7
   43c98:	3ac9883a 	add	r4,r7,r11
   43c9c:	52a02004 	addi	r10,r10,-32640
   43ca0:	20c6703a 	and	r3,r4,r3
   43ca4:	1a86703a 	and	r3,r3,r10
   43ca8:	18000c1e 	bne	r3,zero,43cdc <strcpy+0x68>
   43cac:	1011883a 	mov	r8,r2
   43cb0:	41c00015 	stw	r7,0(r8)
   43cb4:	29400104 	addi	r5,r5,4
   43cb8:	29c00017 	ldw	r7,0(r5)
   43cbc:	41800104 	addi	r6,r8,4
   43cc0:	3011883a 	mov	r8,r6
   43cc4:	3ad3883a 	add	r9,r7,r11
   43cc8:	01c6303a 	nor	r3,zero,r7
   43ccc:	48c6703a 	and	r3,r9,r3
   43cd0:	1a86703a 	and	r3,r3,r10
   43cd4:	183ff626 	beq	r3,zero,43cb0 <_gp+0xfffe8588>
   43cd8:	00000106 	br	43ce0 <strcpy+0x6c>
   43cdc:	100d883a 	mov	r6,r2
   43ce0:	28c00003 	ldbu	r3,0(r5)
   43ce4:	31800044 	addi	r6,r6,1
   43ce8:	29400044 	addi	r5,r5,1
   43cec:	30ffffc5 	stb	r3,-1(r6)
   43cf0:	18c03fcc 	andi	r3,r3,255
   43cf4:	18c0201c 	xori	r3,r3,128
   43cf8:	18ffe004 	addi	r3,r3,-128
   43cfc:	183ff81e 	bne	r3,zero,43ce0 <_gp+0xfffe85b8>
   43d00:	f800283a 	ret

00043d04 <strlen>:
   43d04:	208000cc 	andi	r2,r4,3
   43d08:	10002026 	beq	r2,zero,43d8c <strlen+0x88>
   43d0c:	20800007 	ldb	r2,0(r4)
   43d10:	10002026 	beq	r2,zero,43d94 <strlen+0x90>
   43d14:	2005883a 	mov	r2,r4
   43d18:	00000206 	br	43d24 <strlen+0x20>
   43d1c:	10c00007 	ldb	r3,0(r2)
   43d20:	18001826 	beq	r3,zero,43d84 <strlen+0x80>
   43d24:	10800044 	addi	r2,r2,1
   43d28:	10c000cc 	andi	r3,r2,3
   43d2c:	183ffb1e 	bne	r3,zero,43d1c <_gp+0xfffe85f4>
   43d30:	10c00017 	ldw	r3,0(r2)
   43d34:	01ffbff4 	movhi	r7,65279
   43d38:	39ffbfc4 	addi	r7,r7,-257
   43d3c:	00ca303a 	nor	r5,zero,r3
   43d40:	01a02074 	movhi	r6,32897
   43d44:	19c7883a 	add	r3,r3,r7
   43d48:	31a02004 	addi	r6,r6,-32640
   43d4c:	1946703a 	and	r3,r3,r5
   43d50:	1986703a 	and	r3,r3,r6
   43d54:	1800091e 	bne	r3,zero,43d7c <strlen+0x78>
   43d58:	10800104 	addi	r2,r2,4
   43d5c:	10c00017 	ldw	r3,0(r2)
   43d60:	19cb883a 	add	r5,r3,r7
   43d64:	00c6303a 	nor	r3,zero,r3
   43d68:	28c6703a 	and	r3,r5,r3
   43d6c:	1986703a 	and	r3,r3,r6
   43d70:	183ff926 	beq	r3,zero,43d58 <_gp+0xfffe8630>
   43d74:	00000106 	br	43d7c <strlen+0x78>
   43d78:	10800044 	addi	r2,r2,1
   43d7c:	10c00007 	ldb	r3,0(r2)
   43d80:	183ffd1e 	bne	r3,zero,43d78 <_gp+0xfffe8650>
   43d84:	1105c83a 	sub	r2,r2,r4
   43d88:	f800283a 	ret
   43d8c:	2005883a 	mov	r2,r4
   43d90:	003fe706 	br	43d30 <_gp+0xfffe8608>
   43d94:	0005883a 	mov	r2,zero
   43d98:	f800283a 	ret

00043d9c <_times_r>:
   43d9c:	2809883a 	mov	r4,r5
   43da0:	004f0241 	jmpi	4f024 <times>

00043da4 <___vfprintf_internal_r>:
   43da4:	deffb804 	addi	sp,sp,-288
   43da8:	dfc04715 	stw	ra,284(sp)
   43dac:	ddc04515 	stw	r23,276(sp)
   43db0:	dd404315 	stw	r21,268(sp)
   43db4:	d9002d15 	stw	r4,180(sp)
   43db8:	282f883a 	mov	r23,r5
   43dbc:	302b883a 	mov	r21,r6
   43dc0:	d9c02e15 	stw	r7,184(sp)
   43dc4:	df004615 	stw	fp,280(sp)
   43dc8:	dd804415 	stw	r22,272(sp)
   43dcc:	dd004215 	stw	r20,264(sp)
   43dd0:	dcc04115 	stw	r19,260(sp)
   43dd4:	dc804015 	stw	r18,256(sp)
   43dd8:	dc403f15 	stw	r17,252(sp)
   43ddc:	dc003e15 	stw	r16,248(sp)
   43de0:	00483dc0 	call	483dc <_localeconv_r>
   43de4:	10800017 	ldw	r2,0(r2)
   43de8:	1009883a 	mov	r4,r2
   43dec:	d8803415 	stw	r2,208(sp)
   43df0:	0043d040 	call	43d04 <strlen>
   43df4:	d8803715 	stw	r2,220(sp)
   43df8:	d8802d17 	ldw	r2,180(sp)
   43dfc:	10000226 	beq	r2,zero,43e08 <___vfprintf_internal_r+0x64>
   43e00:	10800e17 	ldw	r2,56(r2)
   43e04:	1000fb26 	beq	r2,zero,441f4 <___vfprintf_internal_r+0x450>
   43e08:	b880030b 	ldhu	r2,12(r23)
   43e0c:	10c8000c 	andi	r3,r2,8192
   43e10:	1800061e 	bne	r3,zero,43e2c <___vfprintf_internal_r+0x88>
   43e14:	b9001917 	ldw	r4,100(r23)
   43e18:	00f7ffc4 	movi	r3,-8193
   43e1c:	10880014 	ori	r2,r2,8192
   43e20:	20c6703a 	and	r3,r4,r3
   43e24:	b880030d 	sth	r2,12(r23)
   43e28:	b8c01915 	stw	r3,100(r23)
   43e2c:	10c0020c 	andi	r3,r2,8
   43e30:	1800c326 	beq	r3,zero,44140 <___vfprintf_internal_r+0x39c>
   43e34:	b8c00417 	ldw	r3,16(r23)
   43e38:	1800c126 	beq	r3,zero,44140 <___vfprintf_internal_r+0x39c>
   43e3c:	1080068c 	andi	r2,r2,26
   43e40:	00c00284 	movi	r3,10
   43e44:	10c0c626 	beq	r2,r3,44160 <___vfprintf_internal_r+0x3bc>
   43e48:	d8c00404 	addi	r3,sp,16
   43e4c:	05000174 	movhi	r20,5
   43e50:	d9001e04 	addi	r4,sp,120
   43e54:	a5067d84 	addi	r20,r20,6646
   43e58:	d8c01e15 	stw	r3,120(sp)
   43e5c:	d8002015 	stw	zero,128(sp)
   43e60:	d8001f15 	stw	zero,124(sp)
   43e64:	d8003315 	stw	zero,204(sp)
   43e68:	d8003615 	stw	zero,216(sp)
   43e6c:	d8003815 	stw	zero,224(sp)
   43e70:	1811883a 	mov	r8,r3
   43e74:	d8003915 	stw	zero,228(sp)
   43e78:	d8003a15 	stw	zero,232(sp)
   43e7c:	d8002f15 	stw	zero,188(sp)
   43e80:	d9002815 	stw	r4,160(sp)
   43e84:	a8800007 	ldb	r2,0(r21)
   43e88:	10028b26 	beq	r2,zero,448b8 <___vfprintf_internal_r+0xb14>
   43e8c:	00c00944 	movi	r3,37
   43e90:	a823883a 	mov	r17,r21
   43e94:	10c0021e 	bne	r2,r3,43ea0 <___vfprintf_internal_r+0xfc>
   43e98:	00001406 	br	43eec <___vfprintf_internal_r+0x148>
   43e9c:	10c00326 	beq	r2,r3,43eac <___vfprintf_internal_r+0x108>
   43ea0:	8c400044 	addi	r17,r17,1
   43ea4:	88800007 	ldb	r2,0(r17)
   43ea8:	103ffc1e 	bne	r2,zero,43e9c <_gp+0xfffe8774>
   43eac:	8d61c83a 	sub	r16,r17,r21
   43eb0:	80000e26 	beq	r16,zero,43eec <___vfprintf_internal_r+0x148>
   43eb4:	d8c02017 	ldw	r3,128(sp)
   43eb8:	d8801f17 	ldw	r2,124(sp)
   43ebc:	45400015 	stw	r21,0(r8)
   43ec0:	1c07883a 	add	r3,r3,r16
   43ec4:	10800044 	addi	r2,r2,1
   43ec8:	d8c02015 	stw	r3,128(sp)
   43ecc:	44000115 	stw	r16,4(r8)
   43ed0:	d8801f15 	stw	r2,124(sp)
   43ed4:	00c001c4 	movi	r3,7
   43ed8:	1880a916 	blt	r3,r2,44180 <___vfprintf_internal_r+0x3dc>
   43edc:	42000204 	addi	r8,r8,8
   43ee0:	d9402f17 	ldw	r5,188(sp)
   43ee4:	2c0b883a 	add	r5,r5,r16
   43ee8:	d9402f15 	stw	r5,188(sp)
   43eec:	88800007 	ldb	r2,0(r17)
   43ef0:	1000aa26 	beq	r2,zero,4419c <___vfprintf_internal_r+0x3f8>
   43ef4:	8d400044 	addi	r21,r17,1
   43ef8:	8c400047 	ldb	r17,1(r17)
   43efc:	0021883a 	mov	r16,zero
   43f00:	00bfffc4 	movi	r2,-1
   43f04:	0025883a 	mov	r18,zero
   43f08:	dc002905 	stb	r16,164(sp)
   43f0c:	d8002785 	stb	zero,158(sp)
   43f10:	d8002b05 	stb	zero,172(sp)
   43f14:	d8802a15 	stw	r2,168(sp)
   43f18:	d8003115 	stw	zero,196(sp)
   43f1c:	04c01604 	movi	r19,88
   43f20:	05800244 	movi	r22,9
   43f24:	9021883a 	mov	r16,r18
   43f28:	4039883a 	mov	fp,r8
   43f2c:	ad400044 	addi	r21,r21,1
   43f30:	88bff804 	addi	r2,r17,-32
   43f34:	98833236 	bltu	r19,r2,44c00 <___vfprintf_internal_r+0xe5c>
   43f38:	100490ba 	slli	r2,r2,2
   43f3c:	00c00134 	movhi	r3,4
   43f40:	18cfd404 	addi	r3,r3,16208
   43f44:	10c5883a 	add	r2,r2,r3
   43f48:	10800017 	ldw	r2,0(r2)
   43f4c:	1000683a 	jmp	r2
   43f50:	00044af8 	rdprs	zero,zero,4395
   43f54:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f58:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f5c:	00044b18 	cmpnei	zero,zero,4396
   43f60:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f64:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f68:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f6c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f70:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f74:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f78:	00044200 	call	4420 <__alt_mem_mem_info-0xbbe0>
   43f7c:	00044a08 	cmpgei	zero,zero,4392
   43f80:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f84:	000440c4 	movi	zero,4355
   43f88:	00044224 	muli	zero,zero,4360
   43f8c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43f90:	00044274 	movhi	zero,4361
   43f94:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43f98:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43f9c:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fa0:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fa4:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fa8:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fac:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fb0:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fb4:	00044280 	call	4428 <__alt_mem_mem_info-0xbbd8>
   43fb8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fbc:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fc0:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fc4:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fc8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fcc:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fd0:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fd4:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fd8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fdc:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fe0:	000442bc 	xorhi	zero,zero,4362
   43fe4:	00044384 	movi	zero,4366
   43fe8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43fec:	00044384 	movi	zero,4366
   43ff0:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43ff4:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43ff8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   43ffc:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44000:	00044430 	cmpltui	zero,zero,4368
   44004:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44008:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4400c:	0004443c 	xorhi	zero,zero,4368
   44010:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44014:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44018:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4401c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44020:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44024:	000448c0 	call	448c <__alt_mem_mem_info-0xbb74>
   44028:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4402c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44030:	0004492c 	andhi	zero,zero,4388
   44034:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44038:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4403c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44040:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44044:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44048:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4404c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44050:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44054:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44058:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4405c:	00044ba4 	muli	zero,zero,4398
   44060:	00044b24 	muli	zero,zero,4396
   44064:	00044384 	movi	zero,4366
   44068:	00044384 	movi	zero,4366
   4406c:	00044384 	movi	zero,4366
   44070:	00044b44 	movi	zero,4397
   44074:	00044b24 	muli	zero,zero,4396
   44078:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4407c:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44080:	00044b50 	cmplti	zero,zero,4397
   44084:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   44088:	00044b64 	muli	zero,zero,4397
   4408c:	000449e8 	cmpgeui	zero,zero,4391
   44090:	000440d0 	cmplti	zero,zero,4355
   44094:	00044a20 	cmpeqi	zero,zero,4392
   44098:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   4409c:	00044a2c 	andhi	zero,zero,4392
   440a0:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   440a4:	00044a90 	cmplti	zero,zero,4394
   440a8:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   440ac:	00044c00 	call	44c0 <__alt_mem_mem_info-0xbb40>
   440b0:	00044ab0 	cmpltui	zero,zero,4394
   440b4:	d8c03117 	ldw	r3,196(sp)
   440b8:	d8802e15 	stw	r2,184(sp)
   440bc:	00c7c83a 	sub	r3,zero,r3
   440c0:	d8c03115 	stw	r3,196(sp)
   440c4:	84000114 	ori	r16,r16,4
   440c8:	ac400007 	ldb	r17,0(r21)
   440cc:	003f9706 	br	43f2c <_gp+0xfffe8804>
   440d0:	00800c04 	movi	r2,48
   440d4:	d8802705 	stb	r2,156(sp)
   440d8:	00801e04 	movi	r2,120
   440dc:	d8802745 	stb	r2,157(sp)
   440e0:	d9002a17 	ldw	r4,168(sp)
   440e4:	d8802e17 	ldw	r2,184(sp)
   440e8:	d8002785 	stb	zero,158(sp)
   440ec:	e011883a 	mov	r8,fp
   440f0:	10c00104 	addi	r3,r2,4
   440f4:	14c00017 	ldw	r19,0(r2)
   440f8:	002d883a 	mov	r22,zero
   440fc:	80800094 	ori	r2,r16,2
   44100:	2002ca16 	blt	r4,zero,44c2c <___vfprintf_internal_r+0xe88>
   44104:	00bfdfc4 	movi	r2,-129
   44108:	80a4703a 	and	r18,r16,r2
   4410c:	d8c02e15 	stw	r3,184(sp)
   44110:	94800094 	ori	r18,r18,2
   44114:	9802b41e 	bne	r19,zero,44be8 <___vfprintf_internal_r+0xe44>
   44118:	01400174 	movhi	r5,5
   4411c:	29467604 	addi	r5,r5,6616
   44120:	d9403915 	stw	r5,228(sp)
   44124:	04401e04 	movi	r17,120
   44128:	d8802a17 	ldw	r2,168(sp)
   4412c:	0039883a 	mov	fp,zero
   44130:	1001fa26 	beq	r2,zero,4491c <___vfprintf_internal_r+0xb78>
   44134:	0027883a 	mov	r19,zero
   44138:	002d883a 	mov	r22,zero
   4413c:	00021906 	br	449a4 <___vfprintf_internal_r+0xc00>
   44140:	d9002d17 	ldw	r4,180(sp)
   44144:	b80b883a 	mov	r5,r23
   44148:	00463100 	call	46310 <__swsetup_r>
   4414c:	1005dc1e 	bne	r2,zero,458c0 <___vfprintf_internal_r+0x1b1c>
   44150:	b880030b 	ldhu	r2,12(r23)
   44154:	00c00284 	movi	r3,10
   44158:	1080068c 	andi	r2,r2,26
   4415c:	10ff3a1e 	bne	r2,r3,43e48 <_gp+0xfffe8720>
   44160:	b880038f 	ldh	r2,14(r23)
   44164:	103f3816 	blt	r2,zero,43e48 <_gp+0xfffe8720>
   44168:	d9c02e17 	ldw	r7,184(sp)
   4416c:	d9002d17 	ldw	r4,180(sp)
   44170:	a80d883a 	mov	r6,r21
   44174:	b80b883a 	mov	r5,r23
   44178:	004609c0 	call	4609c <__sbprintf>
   4417c:	00001106 	br	441c4 <___vfprintf_internal_r+0x420>
   44180:	d9002d17 	ldw	r4,180(sp)
   44184:	d9801e04 	addi	r6,sp,120
   44188:	b80b883a 	mov	r5,r23
   4418c:	004a0bc0 	call	4a0bc <__sprint_r>
   44190:	1000081e 	bne	r2,zero,441b4 <___vfprintf_internal_r+0x410>
   44194:	da000404 	addi	r8,sp,16
   44198:	003f5106 	br	43ee0 <_gp+0xfffe87b8>
   4419c:	d8802017 	ldw	r2,128(sp)
   441a0:	10000426 	beq	r2,zero,441b4 <___vfprintf_internal_r+0x410>
   441a4:	d9002d17 	ldw	r4,180(sp)
   441a8:	d9801e04 	addi	r6,sp,120
   441ac:	b80b883a 	mov	r5,r23
   441b0:	004a0bc0 	call	4a0bc <__sprint_r>
   441b4:	b880030b 	ldhu	r2,12(r23)
   441b8:	1080100c 	andi	r2,r2,64
   441bc:	1005c01e 	bne	r2,zero,458c0 <___vfprintf_internal_r+0x1b1c>
   441c0:	d8802f17 	ldw	r2,188(sp)
   441c4:	dfc04717 	ldw	ra,284(sp)
   441c8:	df004617 	ldw	fp,280(sp)
   441cc:	ddc04517 	ldw	r23,276(sp)
   441d0:	dd804417 	ldw	r22,272(sp)
   441d4:	dd404317 	ldw	r21,268(sp)
   441d8:	dd004217 	ldw	r20,264(sp)
   441dc:	dcc04117 	ldw	r19,260(sp)
   441e0:	dc804017 	ldw	r18,256(sp)
   441e4:	dc403f17 	ldw	r17,252(sp)
   441e8:	dc003e17 	ldw	r16,248(sp)
   441ec:	dec04804 	addi	sp,sp,288
   441f0:	f800283a 	ret
   441f4:	d9002d17 	ldw	r4,180(sp)
   441f8:	0041de40 	call	41de4 <__sinit>
   441fc:	003f0206 	br	43e08 <_gp+0xfffe86e0>
   44200:	d9002e17 	ldw	r4,184(sp)
   44204:	d9402e17 	ldw	r5,184(sp)
   44208:	21000017 	ldw	r4,0(r4)
   4420c:	28800104 	addi	r2,r5,4
   44210:	d9003115 	stw	r4,196(sp)
   44214:	203fa716 	blt	r4,zero,440b4 <_gp+0xfffe898c>
   44218:	d8802e15 	stw	r2,184(sp)
   4421c:	ac400007 	ldb	r17,0(r21)
   44220:	003f4206 	br	43f2c <_gp+0xfffe8804>
   44224:	ac400007 	ldb	r17,0(r21)
   44228:	01000a84 	movi	r4,42
   4422c:	a8c00044 	addi	r3,r21,1
   44230:	89075826 	beq	r17,r4,45f94 <___vfprintf_internal_r+0x21f0>
   44234:	8cbff404 	addi	r18,r17,-48
   44238:	b486ae36 	bltu	r22,r18,45cf4 <___vfprintf_internal_r+0x1f50>
   4423c:	0009883a 	mov	r4,zero
   44240:	1823883a 	mov	r17,r3
   44244:	01400284 	movi	r5,10
   44248:	00416640 	call	41664 <__mulsi3>
   4424c:	88c00007 	ldb	r3,0(r17)
   44250:	1489883a 	add	r4,r2,r18
   44254:	8d400044 	addi	r21,r17,1
   44258:	1cbff404 	addi	r18,r3,-48
   4425c:	a823883a 	mov	r17,r21
   44260:	b4bff82e 	bgeu	r22,r18,44244 <_gp+0xfffe8b1c>
   44264:	1823883a 	mov	r17,r3
   44268:	2005f616 	blt	r4,zero,45a44 <___vfprintf_internal_r+0x1ca0>
   4426c:	d9002a15 	stw	r4,168(sp)
   44270:	003f2f06 	br	43f30 <_gp+0xfffe8808>
   44274:	84002014 	ori	r16,r16,128
   44278:	ac400007 	ldb	r17,0(r21)
   4427c:	003f2b06 	br	43f2c <_gp+0xfffe8804>
   44280:	8cbff404 	addi	r18,r17,-48
   44284:	d8003115 	stw	zero,196(sp)
   44288:	0009883a 	mov	r4,zero
   4428c:	a823883a 	mov	r17,r21
   44290:	01400284 	movi	r5,10
   44294:	00416640 	call	41664 <__mulsi3>
   44298:	88c00007 	ldb	r3,0(r17)
   4429c:	9089883a 	add	r4,r18,r2
   442a0:	ad400044 	addi	r21,r21,1
   442a4:	1cbff404 	addi	r18,r3,-48
   442a8:	a823883a 	mov	r17,r21
   442ac:	b4bff82e 	bgeu	r22,r18,44290 <_gp+0xfffe8b68>
   442b0:	1823883a 	mov	r17,r3
   442b4:	d9003115 	stw	r4,196(sp)
   442b8:	003f1d06 	br	43f30 <_gp+0xfffe8808>
   442bc:	8025883a 	mov	r18,r16
   442c0:	dc002903 	ldbu	r16,164(sp)
   442c4:	e011883a 	mov	r8,fp
   442c8:	84003fcc 	andi	r16,r16,255
   442cc:	8007531e 	bne	r16,zero,4601c <___vfprintf_internal_r+0x2278>
   442d0:	94800414 	ori	r18,r18,16
   442d4:	9080080c 	andi	r2,r18,32
   442d8:	1003a326 	beq	r2,zero,45168 <___vfprintf_internal_r+0x13c4>
   442dc:	d9002e17 	ldw	r4,184(sp)
   442e0:	20800117 	ldw	r2,4(r4)
   442e4:	24c00017 	ldw	r19,0(r4)
   442e8:	21000204 	addi	r4,r4,8
   442ec:	d9002e15 	stw	r4,184(sp)
   442f0:	102d883a 	mov	r22,r2
   442f4:	10047316 	blt	r2,zero,454c4 <___vfprintf_internal_r+0x1720>
   442f8:	d9002a17 	ldw	r4,168(sp)
   442fc:	df002783 	ldbu	fp,158(sp)
   44300:	2003e416 	blt	r4,zero,45294 <___vfprintf_internal_r+0x14f0>
   44304:	00ffdfc4 	movi	r3,-129
   44308:	9d84b03a 	or	r2,r19,r22
   4430c:	90e4703a 	and	r18,r18,r3
   44310:	10018026 	beq	r2,zero,44914 <___vfprintf_internal_r+0xb70>
   44314:	b003ab26 	beq	r22,zero,451c4 <___vfprintf_internal_r+0x1420>
   44318:	dc402915 	stw	r17,164(sp)
   4431c:	dc001e04 	addi	r16,sp,120
   44320:	b023883a 	mov	r17,r22
   44324:	402d883a 	mov	r22,r8
   44328:	9809883a 	mov	r4,r19
   4432c:	880b883a 	mov	r5,r17
   44330:	01800284 	movi	r6,10
   44334:	000f883a 	mov	r7,zero
   44338:	004c1800 	call	4c180 <__umoddi3>
   4433c:	10800c04 	addi	r2,r2,48
   44340:	843fffc4 	addi	r16,r16,-1
   44344:	9809883a 	mov	r4,r19
   44348:	880b883a 	mov	r5,r17
   4434c:	80800005 	stb	r2,0(r16)
   44350:	01800284 	movi	r6,10
   44354:	000f883a 	mov	r7,zero
   44358:	004bb840 	call	4bb84 <__udivdi3>
   4435c:	1027883a 	mov	r19,r2
   44360:	10c4b03a 	or	r2,r2,r3
   44364:	1823883a 	mov	r17,r3
   44368:	103fef1e 	bne	r2,zero,44328 <_gp+0xfffe8c00>
   4436c:	d8c02817 	ldw	r3,160(sp)
   44370:	dc402917 	ldw	r17,164(sp)
   44374:	b011883a 	mov	r8,r22
   44378:	1c07c83a 	sub	r3,r3,r16
   4437c:	d8c02b15 	stw	r3,172(sp)
   44380:	00005f06 	br	44500 <___vfprintf_internal_r+0x75c>
   44384:	8025883a 	mov	r18,r16
   44388:	dc002903 	ldbu	r16,164(sp)
   4438c:	e011883a 	mov	r8,fp
   44390:	84003fcc 	andi	r16,r16,255
   44394:	80071e1e 	bne	r16,zero,46010 <___vfprintf_internal_r+0x226c>
   44398:	9080020c 	andi	r2,r18,8
   4439c:	1004af26 	beq	r2,zero,4565c <___vfprintf_internal_r+0x18b8>
   443a0:	d9002e17 	ldw	r4,184(sp)
   443a4:	d9402e17 	ldw	r5,184(sp)
   443a8:	d8802e17 	ldw	r2,184(sp)
   443ac:	21000017 	ldw	r4,0(r4)
   443b0:	29400117 	ldw	r5,4(r5)
   443b4:	10800204 	addi	r2,r2,8
   443b8:	d9003615 	stw	r4,216(sp)
   443bc:	d9403815 	stw	r5,224(sp)
   443c0:	d8802e15 	stw	r2,184(sp)
   443c4:	d9003617 	ldw	r4,216(sp)
   443c8:	d9403817 	ldw	r5,224(sp)
   443cc:	da003d15 	stw	r8,244(sp)
   443d0:	04000044 	movi	r16,1
   443d4:	0049e700 	call	49e70 <__fpclassifyd>
   443d8:	da003d17 	ldw	r8,244(sp)
   443dc:	1404441e 	bne	r2,r16,454f0 <___vfprintf_internal_r+0x174c>
   443e0:	d9003617 	ldw	r4,216(sp)
   443e4:	d9403817 	ldw	r5,224(sp)
   443e8:	000d883a 	mov	r6,zero
   443ec:	000f883a 	mov	r7,zero
   443f0:	004d1540 	call	4d154 <__ledf2>
   443f4:	da003d17 	ldw	r8,244(sp)
   443f8:	1005e316 	blt	r2,zero,45b88 <___vfprintf_internal_r+0x1de4>
   443fc:	df002783 	ldbu	fp,158(sp)
   44400:	008011c4 	movi	r2,71
   44404:	1445580e 	bge	r2,r17,45968 <___vfprintf_internal_r+0x1bc4>
   44408:	04000174 	movhi	r16,5
   4440c:	84066e04 	addi	r16,r16,6584
   44410:	00c000c4 	movi	r3,3
   44414:	00bfdfc4 	movi	r2,-129
   44418:	d8c02915 	stw	r3,164(sp)
   4441c:	90a4703a 	and	r18,r18,r2
   44420:	d8c02b15 	stw	r3,172(sp)
   44424:	d8002a15 	stw	zero,168(sp)
   44428:	d8003215 	stw	zero,200(sp)
   4442c:	00003a06 	br	44518 <___vfprintf_internal_r+0x774>
   44430:	84000214 	ori	r16,r16,8
   44434:	ac400007 	ldb	r17,0(r21)
   44438:	003ebc06 	br	43f2c <_gp+0xfffe8804>
   4443c:	8025883a 	mov	r18,r16
   44440:	dc002903 	ldbu	r16,164(sp)
   44444:	e011883a 	mov	r8,fp
   44448:	84003fcc 	andi	r16,r16,255
   4444c:	8007001e 	bne	r16,zero,46050 <___vfprintf_internal_r+0x22ac>
   44450:	94800414 	ori	r18,r18,16
   44454:	9080080c 	andi	r2,r18,32
   44458:	1002fa26 	beq	r2,zero,45044 <___vfprintf_internal_r+0x12a0>
   4445c:	d9002e17 	ldw	r4,184(sp)
   44460:	d9402a17 	ldw	r5,168(sp)
   44464:	d8002785 	stb	zero,158(sp)
   44468:	20800204 	addi	r2,r4,8
   4446c:	24c00017 	ldw	r19,0(r4)
   44470:	25800117 	ldw	r22,4(r4)
   44474:	2804b116 	blt	r5,zero,4573c <___vfprintf_internal_r+0x1998>
   44478:	013fdfc4 	movi	r4,-129
   4447c:	9d86b03a 	or	r3,r19,r22
   44480:	d8802e15 	stw	r2,184(sp)
   44484:	9124703a 	and	r18,r18,r4
   44488:	1802fb1e 	bne	r3,zero,45078 <___vfprintf_internal_r+0x12d4>
   4448c:	d8c02a17 	ldw	r3,168(sp)
   44490:	0039883a 	mov	fp,zero
   44494:	1805e526 	beq	r3,zero,45c2c <___vfprintf_internal_r+0x1e88>
   44498:	0027883a 	mov	r19,zero
   4449c:	002d883a 	mov	r22,zero
   444a0:	dc001e04 	addi	r16,sp,120
   444a4:	9806d0fa 	srli	r3,r19,3
   444a8:	b008977a 	slli	r4,r22,29
   444ac:	b02cd0fa 	srli	r22,r22,3
   444b0:	9cc001cc 	andi	r19,r19,7
   444b4:	98800c04 	addi	r2,r19,48
   444b8:	843fffc4 	addi	r16,r16,-1
   444bc:	20e6b03a 	or	r19,r4,r3
   444c0:	80800005 	stb	r2,0(r16)
   444c4:	9d86b03a 	or	r3,r19,r22
   444c8:	183ff61e 	bne	r3,zero,444a4 <_gp+0xfffe8d7c>
   444cc:	90c0004c 	andi	r3,r18,1
   444d0:	18014126 	beq	r3,zero,449d8 <___vfprintf_internal_r+0xc34>
   444d4:	10803fcc 	andi	r2,r2,255
   444d8:	1080201c 	xori	r2,r2,128
   444dc:	10bfe004 	addi	r2,r2,-128
   444e0:	00c00c04 	movi	r3,48
   444e4:	10c13c26 	beq	r2,r3,449d8 <___vfprintf_internal_r+0xc34>
   444e8:	80ffffc5 	stb	r3,-1(r16)
   444ec:	d8c02817 	ldw	r3,160(sp)
   444f0:	80bfffc4 	addi	r2,r16,-1
   444f4:	1021883a 	mov	r16,r2
   444f8:	1887c83a 	sub	r3,r3,r2
   444fc:	d8c02b15 	stw	r3,172(sp)
   44500:	d8802b17 	ldw	r2,172(sp)
   44504:	d9002a17 	ldw	r4,168(sp)
   44508:	1100010e 	bge	r2,r4,44510 <___vfprintf_internal_r+0x76c>
   4450c:	2005883a 	mov	r2,r4
   44510:	d8802915 	stw	r2,164(sp)
   44514:	d8003215 	stw	zero,200(sp)
   44518:	e7003fcc 	andi	fp,fp,255
   4451c:	e700201c 	xori	fp,fp,128
   44520:	e73fe004 	addi	fp,fp,-128
   44524:	e0000326 	beq	fp,zero,44534 <___vfprintf_internal_r+0x790>
   44528:	d8c02917 	ldw	r3,164(sp)
   4452c:	18c00044 	addi	r3,r3,1
   44530:	d8c02915 	stw	r3,164(sp)
   44534:	90c0008c 	andi	r3,r18,2
   44538:	d8c02c15 	stw	r3,176(sp)
   4453c:	18000326 	beq	r3,zero,4454c <___vfprintf_internal_r+0x7a8>
   44540:	d8c02917 	ldw	r3,164(sp)
   44544:	18c00084 	addi	r3,r3,2
   44548:	d8c02915 	stw	r3,164(sp)
   4454c:	90c0210c 	andi	r3,r18,132
   44550:	d8c03015 	stw	r3,192(sp)
   44554:	1801c51e 	bne	r3,zero,44c6c <___vfprintf_internal_r+0xec8>
   44558:	d9003117 	ldw	r4,196(sp)
   4455c:	d8c02917 	ldw	r3,164(sp)
   44560:	20e7c83a 	sub	r19,r4,r3
   44564:	04c1c10e 	bge	zero,r19,44c6c <___vfprintf_internal_r+0xec8>
   44568:	02400404 	movi	r9,16
   4456c:	d8c02017 	ldw	r3,128(sp)
   44570:	d8801f17 	ldw	r2,124(sp)
   44574:	4cc52f0e 	bge	r9,r19,45a34 <___vfprintf_internal_r+0x1c90>
   44578:	01400174 	movhi	r5,5
   4457c:	29468184 	addi	r5,r5,6662
   44580:	dc403b15 	stw	r17,236(sp)
   44584:	d9403515 	stw	r5,212(sp)
   44588:	9823883a 	mov	r17,r19
   4458c:	482d883a 	mov	r22,r9
   44590:	9027883a 	mov	r19,r18
   44594:	070001c4 	movi	fp,7
   44598:	8025883a 	mov	r18,r16
   4459c:	dc002d17 	ldw	r16,180(sp)
   445a0:	00000306 	br	445b0 <___vfprintf_internal_r+0x80c>
   445a4:	8c7ffc04 	addi	r17,r17,-16
   445a8:	42000204 	addi	r8,r8,8
   445ac:	b440130e 	bge	r22,r17,445fc <___vfprintf_internal_r+0x858>
   445b0:	01000174 	movhi	r4,5
   445b4:	18c00404 	addi	r3,r3,16
   445b8:	10800044 	addi	r2,r2,1
   445bc:	21068184 	addi	r4,r4,6662
   445c0:	41000015 	stw	r4,0(r8)
   445c4:	45800115 	stw	r22,4(r8)
   445c8:	d8c02015 	stw	r3,128(sp)
   445cc:	d8801f15 	stw	r2,124(sp)
   445d0:	e0bff40e 	bge	fp,r2,445a4 <_gp+0xfffe8e7c>
   445d4:	d9801e04 	addi	r6,sp,120
   445d8:	b80b883a 	mov	r5,r23
   445dc:	8009883a 	mov	r4,r16
   445e0:	004a0bc0 	call	4a0bc <__sprint_r>
   445e4:	103ef31e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   445e8:	8c7ffc04 	addi	r17,r17,-16
   445ec:	d8c02017 	ldw	r3,128(sp)
   445f0:	d8801f17 	ldw	r2,124(sp)
   445f4:	da000404 	addi	r8,sp,16
   445f8:	b47fed16 	blt	r22,r17,445b0 <_gp+0xfffe8e88>
   445fc:	9021883a 	mov	r16,r18
   44600:	9825883a 	mov	r18,r19
   44604:	8827883a 	mov	r19,r17
   44608:	dc403b17 	ldw	r17,236(sp)
   4460c:	d9403517 	ldw	r5,212(sp)
   44610:	98c7883a 	add	r3,r19,r3
   44614:	10800044 	addi	r2,r2,1
   44618:	41400015 	stw	r5,0(r8)
   4461c:	44c00115 	stw	r19,4(r8)
   44620:	d8c02015 	stw	r3,128(sp)
   44624:	d8801f15 	stw	r2,124(sp)
   44628:	010001c4 	movi	r4,7
   4462c:	2082c516 	blt	r4,r2,45144 <___vfprintf_internal_r+0x13a0>
   44630:	df002787 	ldb	fp,158(sp)
   44634:	42000204 	addi	r8,r8,8
   44638:	e0000c26 	beq	fp,zero,4466c <___vfprintf_internal_r+0x8c8>
   4463c:	d8801f17 	ldw	r2,124(sp)
   44640:	d9002784 	addi	r4,sp,158
   44644:	18c00044 	addi	r3,r3,1
   44648:	10800044 	addi	r2,r2,1
   4464c:	41000015 	stw	r4,0(r8)
   44650:	01000044 	movi	r4,1
   44654:	41000115 	stw	r4,4(r8)
   44658:	d8c02015 	stw	r3,128(sp)
   4465c:	d8801f15 	stw	r2,124(sp)
   44660:	010001c4 	movi	r4,7
   44664:	20825e16 	blt	r4,r2,44fe0 <___vfprintf_internal_r+0x123c>
   44668:	42000204 	addi	r8,r8,8
   4466c:	d8802c17 	ldw	r2,176(sp)
   44670:	10000c26 	beq	r2,zero,446a4 <___vfprintf_internal_r+0x900>
   44674:	d8801f17 	ldw	r2,124(sp)
   44678:	d9002704 	addi	r4,sp,156
   4467c:	18c00084 	addi	r3,r3,2
   44680:	10800044 	addi	r2,r2,1
   44684:	41000015 	stw	r4,0(r8)
   44688:	01000084 	movi	r4,2
   4468c:	41000115 	stw	r4,4(r8)
   44690:	d8c02015 	stw	r3,128(sp)
   44694:	d8801f15 	stw	r2,124(sp)
   44698:	010001c4 	movi	r4,7
   4469c:	20825816 	blt	r4,r2,45000 <___vfprintf_internal_r+0x125c>
   446a0:	42000204 	addi	r8,r8,8
   446a4:	d9003017 	ldw	r4,192(sp)
   446a8:	00802004 	movi	r2,128
   446ac:	2081bb26 	beq	r4,r2,44d9c <___vfprintf_internal_r+0xff8>
   446b0:	d9402a17 	ldw	r5,168(sp)
   446b4:	d8802b17 	ldw	r2,172(sp)
   446b8:	28adc83a 	sub	r22,r5,r2
   446bc:	0580310e 	bge	zero,r22,44784 <___vfprintf_internal_r+0x9e0>
   446c0:	07000404 	movi	fp,16
   446c4:	d8801f17 	ldw	r2,124(sp)
   446c8:	e584360e 	bge	fp,r22,457a4 <___vfprintf_internal_r+0x1a00>
   446cc:	01400174 	movhi	r5,5
   446d0:	29467d84 	addi	r5,r5,6646
   446d4:	dc402a15 	stw	r17,168(sp)
   446d8:	d9402c15 	stw	r5,176(sp)
   446dc:	b023883a 	mov	r17,r22
   446e0:	04c001c4 	movi	r19,7
   446e4:	a82d883a 	mov	r22,r21
   446e8:	902b883a 	mov	r21,r18
   446ec:	8025883a 	mov	r18,r16
   446f0:	dc002d17 	ldw	r16,180(sp)
   446f4:	00000306 	br	44704 <___vfprintf_internal_r+0x960>
   446f8:	8c7ffc04 	addi	r17,r17,-16
   446fc:	42000204 	addi	r8,r8,8
   44700:	e440110e 	bge	fp,r17,44748 <___vfprintf_internal_r+0x9a4>
   44704:	18c00404 	addi	r3,r3,16
   44708:	10800044 	addi	r2,r2,1
   4470c:	45000015 	stw	r20,0(r8)
   44710:	47000115 	stw	fp,4(r8)
   44714:	d8c02015 	stw	r3,128(sp)
   44718:	d8801f15 	stw	r2,124(sp)
   4471c:	98bff60e 	bge	r19,r2,446f8 <_gp+0xfffe8fd0>
   44720:	d9801e04 	addi	r6,sp,120
   44724:	b80b883a 	mov	r5,r23
   44728:	8009883a 	mov	r4,r16
   4472c:	004a0bc0 	call	4a0bc <__sprint_r>
   44730:	103ea01e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44734:	8c7ffc04 	addi	r17,r17,-16
   44738:	d8c02017 	ldw	r3,128(sp)
   4473c:	d8801f17 	ldw	r2,124(sp)
   44740:	da000404 	addi	r8,sp,16
   44744:	e47fef16 	blt	fp,r17,44704 <_gp+0xfffe8fdc>
   44748:	9021883a 	mov	r16,r18
   4474c:	a825883a 	mov	r18,r21
   44750:	b02b883a 	mov	r21,r22
   44754:	882d883a 	mov	r22,r17
   44758:	dc402a17 	ldw	r17,168(sp)
   4475c:	d9002c17 	ldw	r4,176(sp)
   44760:	1d87883a 	add	r3,r3,r22
   44764:	10800044 	addi	r2,r2,1
   44768:	41000015 	stw	r4,0(r8)
   4476c:	45800115 	stw	r22,4(r8)
   44770:	d8c02015 	stw	r3,128(sp)
   44774:	d8801f15 	stw	r2,124(sp)
   44778:	010001c4 	movi	r4,7
   4477c:	20821016 	blt	r4,r2,44fc0 <___vfprintf_internal_r+0x121c>
   44780:	42000204 	addi	r8,r8,8
   44784:	9080400c 	andi	r2,r18,256
   44788:	10013a1e 	bne	r2,zero,44c74 <___vfprintf_internal_r+0xed0>
   4478c:	d9402b17 	ldw	r5,172(sp)
   44790:	d8801f17 	ldw	r2,124(sp)
   44794:	44000015 	stw	r16,0(r8)
   44798:	1947883a 	add	r3,r3,r5
   4479c:	10800044 	addi	r2,r2,1
   447a0:	41400115 	stw	r5,4(r8)
   447a4:	d8c02015 	stw	r3,128(sp)
   447a8:	d8801f15 	stw	r2,124(sp)
   447ac:	010001c4 	movi	r4,7
   447b0:	2081f516 	blt	r4,r2,44f88 <___vfprintf_internal_r+0x11e4>
   447b4:	42000204 	addi	r8,r8,8
   447b8:	9480010c 	andi	r18,r18,4
   447bc:	90003226 	beq	r18,zero,44888 <___vfprintf_internal_r+0xae4>
   447c0:	d9403117 	ldw	r5,196(sp)
   447c4:	d8802917 	ldw	r2,164(sp)
   447c8:	28a1c83a 	sub	r16,r5,r2
   447cc:	04002e0e 	bge	zero,r16,44888 <___vfprintf_internal_r+0xae4>
   447d0:	04400404 	movi	r17,16
   447d4:	d8801f17 	ldw	r2,124(sp)
   447d8:	8c04c40e 	bge	r17,r16,45aec <___vfprintf_internal_r+0x1d48>
   447dc:	01400174 	movhi	r5,5
   447e0:	29468184 	addi	r5,r5,6662
   447e4:	d9403515 	stw	r5,212(sp)
   447e8:	048001c4 	movi	r18,7
   447ec:	dcc02d17 	ldw	r19,180(sp)
   447f0:	00000306 	br	44800 <___vfprintf_internal_r+0xa5c>
   447f4:	843ffc04 	addi	r16,r16,-16
   447f8:	42000204 	addi	r8,r8,8
   447fc:	8c00130e 	bge	r17,r16,4484c <___vfprintf_internal_r+0xaa8>
   44800:	01000174 	movhi	r4,5
   44804:	18c00404 	addi	r3,r3,16
   44808:	10800044 	addi	r2,r2,1
   4480c:	21068184 	addi	r4,r4,6662
   44810:	41000015 	stw	r4,0(r8)
   44814:	44400115 	stw	r17,4(r8)
   44818:	d8c02015 	stw	r3,128(sp)
   4481c:	d8801f15 	stw	r2,124(sp)
   44820:	90bff40e 	bge	r18,r2,447f4 <_gp+0xfffe90cc>
   44824:	d9801e04 	addi	r6,sp,120
   44828:	b80b883a 	mov	r5,r23
   4482c:	9809883a 	mov	r4,r19
   44830:	004a0bc0 	call	4a0bc <__sprint_r>
   44834:	103e5f1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44838:	843ffc04 	addi	r16,r16,-16
   4483c:	d8c02017 	ldw	r3,128(sp)
   44840:	d8801f17 	ldw	r2,124(sp)
   44844:	da000404 	addi	r8,sp,16
   44848:	8c3fed16 	blt	r17,r16,44800 <_gp+0xfffe90d8>
   4484c:	d9403517 	ldw	r5,212(sp)
   44850:	1c07883a 	add	r3,r3,r16
   44854:	10800044 	addi	r2,r2,1
   44858:	41400015 	stw	r5,0(r8)
   4485c:	44000115 	stw	r16,4(r8)
   44860:	d8c02015 	stw	r3,128(sp)
   44864:	d8801f15 	stw	r2,124(sp)
   44868:	010001c4 	movi	r4,7
   4486c:	2080060e 	bge	r4,r2,44888 <___vfprintf_internal_r+0xae4>
   44870:	d9002d17 	ldw	r4,180(sp)
   44874:	d9801e04 	addi	r6,sp,120
   44878:	b80b883a 	mov	r5,r23
   4487c:	004a0bc0 	call	4a0bc <__sprint_r>
   44880:	103e4c1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44884:	d8c02017 	ldw	r3,128(sp)
   44888:	d8803117 	ldw	r2,196(sp)
   4488c:	d9002917 	ldw	r4,164(sp)
   44890:	1100010e 	bge	r2,r4,44898 <___vfprintf_internal_r+0xaf4>
   44894:	2005883a 	mov	r2,r4
   44898:	d9402f17 	ldw	r5,188(sp)
   4489c:	288b883a 	add	r5,r5,r2
   448a0:	d9402f15 	stw	r5,188(sp)
   448a4:	1801c01e 	bne	r3,zero,44fa8 <___vfprintf_internal_r+0x1204>
   448a8:	a8800007 	ldb	r2,0(r21)
   448ac:	d8001f15 	stw	zero,124(sp)
   448b0:	da000404 	addi	r8,sp,16
   448b4:	103d751e 	bne	r2,zero,43e8c <_gp+0xfffe8764>
   448b8:	a823883a 	mov	r17,r21
   448bc:	003d8b06 	br	43eec <_gp+0xfffe87c4>
   448c0:	8025883a 	mov	r18,r16
   448c4:	dc002903 	ldbu	r16,164(sp)
   448c8:	e011883a 	mov	r8,fp
   448cc:	84003fcc 	andi	r16,r16,255
   448d0:	8005e51e 	bne	r16,zero,46068 <___vfprintf_internal_r+0x22c4>
   448d4:	94800414 	ori	r18,r18,16
   448d8:	9080080c 	andi	r2,r18,32
   448dc:	10022b26 	beq	r2,zero,4518c <___vfprintf_internal_r+0x13e8>
   448e0:	d9002e17 	ldw	r4,184(sp)
   448e4:	d9402a17 	ldw	r5,168(sp)
   448e8:	d8002785 	stb	zero,158(sp)
   448ec:	20c00204 	addi	r3,r4,8
   448f0:	24c00017 	ldw	r19,0(r4)
   448f4:	25800117 	ldw	r22,4(r4)
   448f8:	28042e16 	blt	r5,zero,459b4 <___vfprintf_internal_r+0x1c10>
   448fc:	013fdfc4 	movi	r4,-129
   44900:	9d84b03a 	or	r2,r19,r22
   44904:	d8c02e15 	stw	r3,184(sp)
   44908:	9124703a 	and	r18,r18,r4
   4490c:	0039883a 	mov	fp,zero
   44910:	103e801e 	bne	r2,zero,44314 <_gp+0xfffe8bec>
   44914:	d9002a17 	ldw	r4,168(sp)
   44918:	2002e01e 	bne	r4,zero,4549c <___vfprintf_internal_r+0x16f8>
   4491c:	d8002a15 	stw	zero,168(sp)
   44920:	d8002b15 	stw	zero,172(sp)
   44924:	dc001e04 	addi	r16,sp,120
   44928:	003ef506 	br	44500 <_gp+0xfffe8dd8>
   4492c:	8025883a 	mov	r18,r16
   44930:	dc002903 	ldbu	r16,164(sp)
   44934:	e011883a 	mov	r8,fp
   44938:	84003fcc 	andi	r16,r16,255
   4493c:	8005ba1e 	bne	r16,zero,46028 <___vfprintf_internal_r+0x2284>
   44940:	01000174 	movhi	r4,5
   44944:	21067104 	addi	r4,r4,6596
   44948:	d9003915 	stw	r4,228(sp)
   4494c:	9080080c 	andi	r2,r18,32
   44950:	10006126 	beq	r2,zero,44ad8 <___vfprintf_internal_r+0xd34>
   44954:	d9402e17 	ldw	r5,184(sp)
   44958:	2cc00017 	ldw	r19,0(r5)
   4495c:	2d800117 	ldw	r22,4(r5)
   44960:	29400204 	addi	r5,r5,8
   44964:	d9402e15 	stw	r5,184(sp)
   44968:	9080004c 	andi	r2,r18,1
   4496c:	1001ac26 	beq	r2,zero,45020 <___vfprintf_internal_r+0x127c>
   44970:	9d84b03a 	or	r2,r19,r22
   44974:	10038526 	beq	r2,zero,4578c <___vfprintf_internal_r+0x19e8>
   44978:	d8c02a17 	ldw	r3,168(sp)
   4497c:	00800c04 	movi	r2,48
   44980:	d8802705 	stb	r2,156(sp)
   44984:	dc402745 	stb	r17,157(sp)
   44988:	d8002785 	stb	zero,158(sp)
   4498c:	90800094 	ori	r2,r18,2
   44990:	18047916 	blt	r3,zero,45b78 <___vfprintf_internal_r+0x1dd4>
   44994:	00bfdfc4 	movi	r2,-129
   44998:	90a4703a 	and	r18,r18,r2
   4499c:	94800094 	ori	r18,r18,2
   449a0:	0039883a 	mov	fp,zero
   449a4:	d9003917 	ldw	r4,228(sp)
   449a8:	dc001e04 	addi	r16,sp,120
   449ac:	988003cc 	andi	r2,r19,15
   449b0:	b006973a 	slli	r3,r22,28
   449b4:	2085883a 	add	r2,r4,r2
   449b8:	9826d13a 	srli	r19,r19,4
   449bc:	10800003 	ldbu	r2,0(r2)
   449c0:	b02cd13a 	srli	r22,r22,4
   449c4:	843fffc4 	addi	r16,r16,-1
   449c8:	1ce6b03a 	or	r19,r3,r19
   449cc:	80800005 	stb	r2,0(r16)
   449d0:	9d84b03a 	or	r2,r19,r22
   449d4:	103ff51e 	bne	r2,zero,449ac <_gp+0xfffe9284>
   449d8:	d8c02817 	ldw	r3,160(sp)
   449dc:	1c07c83a 	sub	r3,r3,r16
   449e0:	d8c02b15 	stw	r3,172(sp)
   449e4:	003ec606 	br	44500 <_gp+0xfffe8dd8>
   449e8:	8025883a 	mov	r18,r16
   449ec:	dc002903 	ldbu	r16,164(sp)
   449f0:	e011883a 	mov	r8,fp
   449f4:	84003fcc 	andi	r16,r16,255
   449f8:	803e9626 	beq	r16,zero,44454 <_gp+0xfffe8d2c>
   449fc:	d8c02b03 	ldbu	r3,172(sp)
   44a00:	d8c02785 	stb	r3,158(sp)
   44a04:	003e9306 	br	44454 <_gp+0xfffe8d2c>
   44a08:	00c00044 	movi	r3,1
   44a0c:	d8c02905 	stb	r3,164(sp)
   44a10:	00c00ac4 	movi	r3,43
   44a14:	d8c02b05 	stb	r3,172(sp)
   44a18:	ac400007 	ldb	r17,0(r21)
   44a1c:	003d4306 	br	43f2c <_gp+0xfffe8804>
   44a20:	84000814 	ori	r16,r16,32
   44a24:	ac400007 	ldb	r17,0(r21)
   44a28:	003d4006 	br	43f2c <_gp+0xfffe8804>
   44a2c:	d8802e17 	ldw	r2,184(sp)
   44a30:	8025883a 	mov	r18,r16
   44a34:	d8002785 	stb	zero,158(sp)
   44a38:	14000017 	ldw	r16,0(r2)
   44a3c:	e011883a 	mov	r8,fp
   44a40:	14c00104 	addi	r19,r2,4
   44a44:	80042d26 	beq	r16,zero,45afc <___vfprintf_internal_r+0x1d58>
   44a48:	d8c02a17 	ldw	r3,168(sp)
   44a4c:	1803e416 	blt	r3,zero,459e0 <___vfprintf_internal_r+0x1c3c>
   44a50:	180d883a 	mov	r6,r3
   44a54:	000b883a 	mov	r5,zero
   44a58:	8009883a 	mov	r4,r16
   44a5c:	df003d15 	stw	fp,244(sp)
   44a60:	004846c0 	call	4846c <memchr>
   44a64:	da003d17 	ldw	r8,244(sp)
   44a68:	10046826 	beq	r2,zero,45c0c <___vfprintf_internal_r+0x1e68>
   44a6c:	1405c83a 	sub	r2,r2,r16
   44a70:	d8802b15 	stw	r2,172(sp)
   44a74:	1003e016 	blt	r2,zero,459f8 <___vfprintf_internal_r+0x1c54>
   44a78:	df002783 	ldbu	fp,158(sp)
   44a7c:	d8802915 	stw	r2,164(sp)
   44a80:	dcc02e15 	stw	r19,184(sp)
   44a84:	d8002a15 	stw	zero,168(sp)
   44a88:	d8003215 	stw	zero,200(sp)
   44a8c:	003ea206 	br	44518 <_gp+0xfffe8df0>
   44a90:	8025883a 	mov	r18,r16
   44a94:	dc002903 	ldbu	r16,164(sp)
   44a98:	e011883a 	mov	r8,fp
   44a9c:	84003fcc 	andi	r16,r16,255
   44aa0:	803f8d26 	beq	r16,zero,448d8 <_gp+0xfffe91b0>
   44aa4:	d8c02b03 	ldbu	r3,172(sp)
   44aa8:	d8c02785 	stb	r3,158(sp)
   44aac:	003f8a06 	br	448d8 <_gp+0xfffe91b0>
   44ab0:	8025883a 	mov	r18,r16
   44ab4:	dc002903 	ldbu	r16,164(sp)
   44ab8:	e011883a 	mov	r8,fp
   44abc:	84003fcc 	andi	r16,r16,255
   44ac0:	8005661e 	bne	r16,zero,4605c <___vfprintf_internal_r+0x22b8>
   44ac4:	01000174 	movhi	r4,5
   44ac8:	21067604 	addi	r4,r4,6616
   44acc:	d9003915 	stw	r4,228(sp)
   44ad0:	9080080c 	andi	r2,r18,32
   44ad4:	103f9f1e 	bne	r2,zero,44954 <_gp+0xfffe922c>
   44ad8:	9080040c 	andi	r2,r18,16
   44adc:	1002eb26 	beq	r2,zero,4568c <___vfprintf_internal_r+0x18e8>
   44ae0:	d8802e17 	ldw	r2,184(sp)
   44ae4:	002d883a 	mov	r22,zero
   44ae8:	14c00017 	ldw	r19,0(r2)
   44aec:	10800104 	addi	r2,r2,4
   44af0:	d8802e15 	stw	r2,184(sp)
   44af4:	003f9c06 	br	44968 <_gp+0xfffe9240>
   44af8:	d8802b07 	ldb	r2,172(sp)
   44afc:	1002e11e 	bne	r2,zero,45684 <___vfprintf_internal_r+0x18e0>
   44b00:	00c00044 	movi	r3,1
   44b04:	d8c02905 	stb	r3,164(sp)
   44b08:	00c00804 	movi	r3,32
   44b0c:	d8c02b05 	stb	r3,172(sp)
   44b10:	ac400007 	ldb	r17,0(r21)
   44b14:	003d0506 	br	43f2c <_gp+0xfffe8804>
   44b18:	84000054 	ori	r16,r16,1
   44b1c:	ac400007 	ldb	r17,0(r21)
   44b20:	003d0206 	br	43f2c <_gp+0xfffe8804>
   44b24:	8025883a 	mov	r18,r16
   44b28:	dc002903 	ldbu	r16,164(sp)
   44b2c:	e011883a 	mov	r8,fp
   44b30:	84003fcc 	andi	r16,r16,255
   44b34:	803de726 	beq	r16,zero,442d4 <_gp+0xfffe8bac>
   44b38:	d8c02b03 	ldbu	r3,172(sp)
   44b3c:	d8c02785 	stb	r3,158(sp)
   44b40:	003de406 	br	442d4 <_gp+0xfffe8bac>
   44b44:	84001014 	ori	r16,r16,64
   44b48:	ac400007 	ldb	r17,0(r21)
   44b4c:	003cf706 	br	43f2c <_gp+0xfffe8804>
   44b50:	ac400007 	ldb	r17,0(r21)
   44b54:	00801b04 	movi	r2,108
   44b58:	88838f26 	beq	r17,r2,45998 <___vfprintf_internal_r+0x1bf4>
   44b5c:	84000414 	ori	r16,r16,16
   44b60:	003cf206 	br	43f2c <_gp+0xfffe8804>
   44b64:	8025883a 	mov	r18,r16
   44b68:	dc002903 	ldbu	r16,164(sp)
   44b6c:	e011883a 	mov	r8,fp
   44b70:	84003fcc 	andi	r16,r16,255
   44b74:	80053f1e 	bne	r16,zero,46074 <___vfprintf_internal_r+0x22d0>
   44b78:	9080080c 	andi	r2,r18,32
   44b7c:	1002d226 	beq	r2,zero,456c8 <___vfprintf_internal_r+0x1924>
   44b80:	d9002e17 	ldw	r4,184(sp)
   44b84:	d9402f17 	ldw	r5,188(sp)
   44b88:	20800017 	ldw	r2,0(r4)
   44b8c:	2807d7fa 	srai	r3,r5,31
   44b90:	21000104 	addi	r4,r4,4
   44b94:	d9002e15 	stw	r4,184(sp)
   44b98:	11400015 	stw	r5,0(r2)
   44b9c:	10c00115 	stw	r3,4(r2)
   44ba0:	003cb806 	br	43e84 <_gp+0xfffe875c>
   44ba4:	d8c02e17 	ldw	r3,184(sp)
   44ba8:	d9002e17 	ldw	r4,184(sp)
   44bac:	8025883a 	mov	r18,r16
   44bb0:	18800017 	ldw	r2,0(r3)
   44bb4:	21000104 	addi	r4,r4,4
   44bb8:	00c00044 	movi	r3,1
   44bbc:	e011883a 	mov	r8,fp
   44bc0:	d8c02915 	stw	r3,164(sp)
   44bc4:	d8002785 	stb	zero,158(sp)
   44bc8:	d8801405 	stb	r2,80(sp)
   44bcc:	d9002e15 	stw	r4,184(sp)
   44bd0:	d8c02b15 	stw	r3,172(sp)
   44bd4:	d8002a15 	stw	zero,168(sp)
   44bd8:	d8003215 	stw	zero,200(sp)
   44bdc:	dc001404 	addi	r16,sp,80
   44be0:	0039883a 	mov	fp,zero
   44be4:	003e5306 	br	44534 <_gp+0xfffe8e0c>
   44be8:	01000174 	movhi	r4,5
   44bec:	21067604 	addi	r4,r4,6616
   44bf0:	0039883a 	mov	fp,zero
   44bf4:	d9003915 	stw	r4,228(sp)
   44bf8:	04401e04 	movi	r17,120
   44bfc:	003f6906 	br	449a4 <_gp+0xfffe927c>
   44c00:	8025883a 	mov	r18,r16
   44c04:	dc002903 	ldbu	r16,164(sp)
   44c08:	e011883a 	mov	r8,fp
   44c0c:	84003fcc 	andi	r16,r16,255
   44c10:	8005081e 	bne	r16,zero,46034 <___vfprintf_internal_r+0x2290>
   44c14:	883d6126 	beq	r17,zero,4419c <_gp+0xfffe8a74>
   44c18:	00c00044 	movi	r3,1
   44c1c:	d8c02915 	stw	r3,164(sp)
   44c20:	dc401405 	stb	r17,80(sp)
   44c24:	d8002785 	stb	zero,158(sp)
   44c28:	003fe906 	br	44bd0 <_gp+0xfffe94a8>
   44c2c:	01400174 	movhi	r5,5
   44c30:	29467604 	addi	r5,r5,6616
   44c34:	d9403915 	stw	r5,228(sp)
   44c38:	d8c02e15 	stw	r3,184(sp)
   44c3c:	1025883a 	mov	r18,r2
   44c40:	04401e04 	movi	r17,120
   44c44:	9d84b03a 	or	r2,r19,r22
   44c48:	1000fc1e 	bne	r2,zero,4503c <___vfprintf_internal_r+0x1298>
   44c4c:	0039883a 	mov	fp,zero
   44c50:	00800084 	movi	r2,2
   44c54:	10803fcc 	andi	r2,r2,255
   44c58:	00c00044 	movi	r3,1
   44c5c:	10c20f26 	beq	r2,r3,4549c <___vfprintf_internal_r+0x16f8>
   44c60:	00c00084 	movi	r3,2
   44c64:	10fd3326 	beq	r2,r3,44134 <_gp+0xfffe8a0c>
   44c68:	003e0b06 	br	44498 <_gp+0xfffe8d70>
   44c6c:	d8c02017 	ldw	r3,128(sp)
   44c70:	003e7106 	br	44638 <_gp+0xfffe8f10>
   44c74:	00801944 	movi	r2,101
   44c78:	14407e0e 	bge	r2,r17,44e74 <___vfprintf_internal_r+0x10d0>
   44c7c:	d9003617 	ldw	r4,216(sp)
   44c80:	d9403817 	ldw	r5,224(sp)
   44c84:	000d883a 	mov	r6,zero
   44c88:	000f883a 	mov	r7,zero
   44c8c:	d8c03c15 	stw	r3,240(sp)
   44c90:	da003d15 	stw	r8,244(sp)
   44c94:	004cff00 	call	4cff0 <__eqdf2>
   44c98:	d8c03c17 	ldw	r3,240(sp)
   44c9c:	da003d17 	ldw	r8,244(sp)
   44ca0:	1000f71e 	bne	r2,zero,45080 <___vfprintf_internal_r+0x12dc>
   44ca4:	d8801f17 	ldw	r2,124(sp)
   44ca8:	01000174 	movhi	r4,5
   44cac:	21067d04 	addi	r4,r4,6644
   44cb0:	18c00044 	addi	r3,r3,1
   44cb4:	10800044 	addi	r2,r2,1
   44cb8:	41000015 	stw	r4,0(r8)
   44cbc:	01000044 	movi	r4,1
   44cc0:	41000115 	stw	r4,4(r8)
   44cc4:	d8c02015 	stw	r3,128(sp)
   44cc8:	d8801f15 	stw	r2,124(sp)
   44ccc:	010001c4 	movi	r4,7
   44cd0:	2082b816 	blt	r4,r2,457b4 <___vfprintf_internal_r+0x1a10>
   44cd4:	42000204 	addi	r8,r8,8
   44cd8:	d8802617 	ldw	r2,152(sp)
   44cdc:	d9403317 	ldw	r5,204(sp)
   44ce0:	11400216 	blt	r2,r5,44cec <___vfprintf_internal_r+0xf48>
   44ce4:	9080004c 	andi	r2,r18,1
   44ce8:	103eb326 	beq	r2,zero,447b8 <_gp+0xfffe9090>
   44cec:	d8803717 	ldw	r2,220(sp)
   44cf0:	d9003417 	ldw	r4,208(sp)
   44cf4:	d9403717 	ldw	r5,220(sp)
   44cf8:	1887883a 	add	r3,r3,r2
   44cfc:	d8801f17 	ldw	r2,124(sp)
   44d00:	41000015 	stw	r4,0(r8)
   44d04:	41400115 	stw	r5,4(r8)
   44d08:	10800044 	addi	r2,r2,1
   44d0c:	d8c02015 	stw	r3,128(sp)
   44d10:	d8801f15 	stw	r2,124(sp)
   44d14:	010001c4 	movi	r4,7
   44d18:	20832916 	blt	r4,r2,459c0 <___vfprintf_internal_r+0x1c1c>
   44d1c:	42000204 	addi	r8,r8,8
   44d20:	d8803317 	ldw	r2,204(sp)
   44d24:	143fffc4 	addi	r16,r2,-1
   44d28:	043ea30e 	bge	zero,r16,447b8 <_gp+0xfffe9090>
   44d2c:	04400404 	movi	r17,16
   44d30:	d8801f17 	ldw	r2,124(sp)
   44d34:	8c00880e 	bge	r17,r16,44f58 <___vfprintf_internal_r+0x11b4>
   44d38:	01400174 	movhi	r5,5
   44d3c:	29467d84 	addi	r5,r5,6646
   44d40:	d9402c15 	stw	r5,176(sp)
   44d44:	058001c4 	movi	r22,7
   44d48:	dcc02d17 	ldw	r19,180(sp)
   44d4c:	00000306 	br	44d5c <___vfprintf_internal_r+0xfb8>
   44d50:	42000204 	addi	r8,r8,8
   44d54:	843ffc04 	addi	r16,r16,-16
   44d58:	8c00820e 	bge	r17,r16,44f64 <___vfprintf_internal_r+0x11c0>
   44d5c:	18c00404 	addi	r3,r3,16
   44d60:	10800044 	addi	r2,r2,1
   44d64:	45000015 	stw	r20,0(r8)
   44d68:	44400115 	stw	r17,4(r8)
   44d6c:	d8c02015 	stw	r3,128(sp)
   44d70:	d8801f15 	stw	r2,124(sp)
   44d74:	b0bff60e 	bge	r22,r2,44d50 <_gp+0xfffe9628>
   44d78:	d9801e04 	addi	r6,sp,120
   44d7c:	b80b883a 	mov	r5,r23
   44d80:	9809883a 	mov	r4,r19
   44d84:	004a0bc0 	call	4a0bc <__sprint_r>
   44d88:	103d0a1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44d8c:	d8c02017 	ldw	r3,128(sp)
   44d90:	d8801f17 	ldw	r2,124(sp)
   44d94:	da000404 	addi	r8,sp,16
   44d98:	003fee06 	br	44d54 <_gp+0xfffe962c>
   44d9c:	d9403117 	ldw	r5,196(sp)
   44da0:	d8802917 	ldw	r2,164(sp)
   44da4:	28adc83a 	sub	r22,r5,r2
   44da8:	05be410e 	bge	zero,r22,446b0 <_gp+0xfffe8f88>
   44dac:	07000404 	movi	fp,16
   44db0:	d8801f17 	ldw	r2,124(sp)
   44db4:	e5838f0e 	bge	fp,r22,45bf4 <___vfprintf_internal_r+0x1e50>
   44db8:	01400174 	movhi	r5,5
   44dbc:	29467d84 	addi	r5,r5,6646
   44dc0:	dc403015 	stw	r17,192(sp)
   44dc4:	d9402c15 	stw	r5,176(sp)
   44dc8:	b023883a 	mov	r17,r22
   44dcc:	04c001c4 	movi	r19,7
   44dd0:	a82d883a 	mov	r22,r21
   44dd4:	902b883a 	mov	r21,r18
   44dd8:	8025883a 	mov	r18,r16
   44ddc:	dc002d17 	ldw	r16,180(sp)
   44de0:	00000306 	br	44df0 <___vfprintf_internal_r+0x104c>
   44de4:	8c7ffc04 	addi	r17,r17,-16
   44de8:	42000204 	addi	r8,r8,8
   44dec:	e440110e 	bge	fp,r17,44e34 <___vfprintf_internal_r+0x1090>
   44df0:	18c00404 	addi	r3,r3,16
   44df4:	10800044 	addi	r2,r2,1
   44df8:	45000015 	stw	r20,0(r8)
   44dfc:	47000115 	stw	fp,4(r8)
   44e00:	d8c02015 	stw	r3,128(sp)
   44e04:	d8801f15 	stw	r2,124(sp)
   44e08:	98bff60e 	bge	r19,r2,44de4 <_gp+0xfffe96bc>
   44e0c:	d9801e04 	addi	r6,sp,120
   44e10:	b80b883a 	mov	r5,r23
   44e14:	8009883a 	mov	r4,r16
   44e18:	004a0bc0 	call	4a0bc <__sprint_r>
   44e1c:	103ce51e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44e20:	8c7ffc04 	addi	r17,r17,-16
   44e24:	d8c02017 	ldw	r3,128(sp)
   44e28:	d8801f17 	ldw	r2,124(sp)
   44e2c:	da000404 	addi	r8,sp,16
   44e30:	e47fef16 	blt	fp,r17,44df0 <_gp+0xfffe96c8>
   44e34:	9021883a 	mov	r16,r18
   44e38:	a825883a 	mov	r18,r21
   44e3c:	b02b883a 	mov	r21,r22
   44e40:	882d883a 	mov	r22,r17
   44e44:	dc403017 	ldw	r17,192(sp)
   44e48:	d9002c17 	ldw	r4,176(sp)
   44e4c:	1d87883a 	add	r3,r3,r22
   44e50:	10800044 	addi	r2,r2,1
   44e54:	41000015 	stw	r4,0(r8)
   44e58:	45800115 	stw	r22,4(r8)
   44e5c:	d8c02015 	stw	r3,128(sp)
   44e60:	d8801f15 	stw	r2,124(sp)
   44e64:	010001c4 	movi	r4,7
   44e68:	20818e16 	blt	r4,r2,454a4 <___vfprintf_internal_r+0x1700>
   44e6c:	42000204 	addi	r8,r8,8
   44e70:	003e0f06 	br	446b0 <_gp+0xfffe8f88>
   44e74:	d9403317 	ldw	r5,204(sp)
   44e78:	00800044 	movi	r2,1
   44e7c:	18c00044 	addi	r3,r3,1
   44e80:	1141530e 	bge	r2,r5,453d0 <___vfprintf_internal_r+0x162c>
   44e84:	dc401f17 	ldw	r17,124(sp)
   44e88:	00800044 	movi	r2,1
   44e8c:	40800115 	stw	r2,4(r8)
   44e90:	8c400044 	addi	r17,r17,1
   44e94:	44000015 	stw	r16,0(r8)
   44e98:	d8c02015 	stw	r3,128(sp)
   44e9c:	dc401f15 	stw	r17,124(sp)
   44ea0:	008001c4 	movi	r2,7
   44ea4:	14416b16 	blt	r2,r17,45454 <___vfprintf_internal_r+0x16b0>
   44ea8:	42000204 	addi	r8,r8,8
   44eac:	d8803717 	ldw	r2,220(sp)
   44eb0:	d9003417 	ldw	r4,208(sp)
   44eb4:	8c400044 	addi	r17,r17,1
   44eb8:	10c7883a 	add	r3,r2,r3
   44ebc:	40800115 	stw	r2,4(r8)
   44ec0:	41000015 	stw	r4,0(r8)
   44ec4:	d8c02015 	stw	r3,128(sp)
   44ec8:	dc401f15 	stw	r17,124(sp)
   44ecc:	008001c4 	movi	r2,7
   44ed0:	14416916 	blt	r2,r17,45478 <___vfprintf_internal_r+0x16d4>
   44ed4:	45800204 	addi	r22,r8,8
   44ed8:	d9003617 	ldw	r4,216(sp)
   44edc:	d9403817 	ldw	r5,224(sp)
   44ee0:	000d883a 	mov	r6,zero
   44ee4:	000f883a 	mov	r7,zero
   44ee8:	d8c03c15 	stw	r3,240(sp)
   44eec:	004cff00 	call	4cff0 <__eqdf2>
   44ef0:	d8c03c17 	ldw	r3,240(sp)
   44ef4:	1000bc26 	beq	r2,zero,451e8 <___vfprintf_internal_r+0x1444>
   44ef8:	d9403317 	ldw	r5,204(sp)
   44efc:	84000044 	addi	r16,r16,1
   44f00:	8c400044 	addi	r17,r17,1
   44f04:	28bfffc4 	addi	r2,r5,-1
   44f08:	1887883a 	add	r3,r3,r2
   44f0c:	b0800115 	stw	r2,4(r22)
   44f10:	b4000015 	stw	r16,0(r22)
   44f14:	d8c02015 	stw	r3,128(sp)
   44f18:	dc401f15 	stw	r17,124(sp)
   44f1c:	008001c4 	movi	r2,7
   44f20:	14414316 	blt	r2,r17,45430 <___vfprintf_internal_r+0x168c>
   44f24:	b5800204 	addi	r22,r22,8
   44f28:	d9003a17 	ldw	r4,232(sp)
   44f2c:	df0022c4 	addi	fp,sp,139
   44f30:	8c400044 	addi	r17,r17,1
   44f34:	20c7883a 	add	r3,r4,r3
   44f38:	b7000015 	stw	fp,0(r22)
   44f3c:	b1000115 	stw	r4,4(r22)
   44f40:	d8c02015 	stw	r3,128(sp)
   44f44:	dc401f15 	stw	r17,124(sp)
   44f48:	008001c4 	movi	r2,7
   44f4c:	14400e16 	blt	r2,r17,44f88 <___vfprintf_internal_r+0x11e4>
   44f50:	b2000204 	addi	r8,r22,8
   44f54:	003e1806 	br	447b8 <_gp+0xfffe9090>
   44f58:	01000174 	movhi	r4,5
   44f5c:	21067d84 	addi	r4,r4,6646
   44f60:	d9002c15 	stw	r4,176(sp)
   44f64:	d9002c17 	ldw	r4,176(sp)
   44f68:	1c07883a 	add	r3,r3,r16
   44f6c:	44000115 	stw	r16,4(r8)
   44f70:	41000015 	stw	r4,0(r8)
   44f74:	10800044 	addi	r2,r2,1
   44f78:	d8c02015 	stw	r3,128(sp)
   44f7c:	d8801f15 	stw	r2,124(sp)
   44f80:	010001c4 	movi	r4,7
   44f84:	20be0b0e 	bge	r4,r2,447b4 <_gp+0xfffe908c>
   44f88:	d9002d17 	ldw	r4,180(sp)
   44f8c:	d9801e04 	addi	r6,sp,120
   44f90:	b80b883a 	mov	r5,r23
   44f94:	004a0bc0 	call	4a0bc <__sprint_r>
   44f98:	103c861e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44f9c:	d8c02017 	ldw	r3,128(sp)
   44fa0:	da000404 	addi	r8,sp,16
   44fa4:	003e0406 	br	447b8 <_gp+0xfffe9090>
   44fa8:	d9002d17 	ldw	r4,180(sp)
   44fac:	d9801e04 	addi	r6,sp,120
   44fb0:	b80b883a 	mov	r5,r23
   44fb4:	004a0bc0 	call	4a0bc <__sprint_r>
   44fb8:	103e3b26 	beq	r2,zero,448a8 <_gp+0xfffe9180>
   44fbc:	003c7d06 	br	441b4 <_gp+0xfffe8a8c>
   44fc0:	d9002d17 	ldw	r4,180(sp)
   44fc4:	d9801e04 	addi	r6,sp,120
   44fc8:	b80b883a 	mov	r5,r23
   44fcc:	004a0bc0 	call	4a0bc <__sprint_r>
   44fd0:	103c781e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44fd4:	d8c02017 	ldw	r3,128(sp)
   44fd8:	da000404 	addi	r8,sp,16
   44fdc:	003de906 	br	44784 <_gp+0xfffe905c>
   44fe0:	d9002d17 	ldw	r4,180(sp)
   44fe4:	d9801e04 	addi	r6,sp,120
   44fe8:	b80b883a 	mov	r5,r23
   44fec:	004a0bc0 	call	4a0bc <__sprint_r>
   44ff0:	103c701e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   44ff4:	d8c02017 	ldw	r3,128(sp)
   44ff8:	da000404 	addi	r8,sp,16
   44ffc:	003d9b06 	br	4466c <_gp+0xfffe8f44>
   45000:	d9002d17 	ldw	r4,180(sp)
   45004:	d9801e04 	addi	r6,sp,120
   45008:	b80b883a 	mov	r5,r23
   4500c:	004a0bc0 	call	4a0bc <__sprint_r>
   45010:	103c681e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45014:	d8c02017 	ldw	r3,128(sp)
   45018:	da000404 	addi	r8,sp,16
   4501c:	003da106 	br	446a4 <_gp+0xfffe8f7c>
   45020:	d9402a17 	ldw	r5,168(sp)
   45024:	d8002785 	stb	zero,158(sp)
   45028:	283f0616 	blt	r5,zero,44c44 <_gp+0xfffe951c>
   4502c:	00ffdfc4 	movi	r3,-129
   45030:	9d84b03a 	or	r2,r19,r22
   45034:	90e4703a 	and	r18,r18,r3
   45038:	103c3b26 	beq	r2,zero,44128 <_gp+0xfffe8a00>
   4503c:	0039883a 	mov	fp,zero
   45040:	003e5806 	br	449a4 <_gp+0xfffe927c>
   45044:	9080040c 	andi	r2,r18,16
   45048:	1001b326 	beq	r2,zero,45718 <___vfprintf_internal_r+0x1974>
   4504c:	d8c02e17 	ldw	r3,184(sp)
   45050:	d9002a17 	ldw	r4,168(sp)
   45054:	d8002785 	stb	zero,158(sp)
   45058:	18800104 	addi	r2,r3,4
   4505c:	1cc00017 	ldw	r19,0(r3)
   45060:	002d883a 	mov	r22,zero
   45064:	2001b516 	blt	r4,zero,4573c <___vfprintf_internal_r+0x1998>
   45068:	00ffdfc4 	movi	r3,-129
   4506c:	d8802e15 	stw	r2,184(sp)
   45070:	90e4703a 	and	r18,r18,r3
   45074:	983d0526 	beq	r19,zero,4448c <_gp+0xfffe8d64>
   45078:	0039883a 	mov	fp,zero
   4507c:	003d0806 	br	444a0 <_gp+0xfffe8d78>
   45080:	dc402617 	ldw	r17,152(sp)
   45084:	0441d30e 	bge	zero,r17,457d4 <___vfprintf_internal_r+0x1a30>
   45088:	dc403217 	ldw	r17,200(sp)
   4508c:	d8803317 	ldw	r2,204(sp)
   45090:	1440010e 	bge	r2,r17,45098 <___vfprintf_internal_r+0x12f4>
   45094:	1023883a 	mov	r17,r2
   45098:	04400a0e 	bge	zero,r17,450c4 <___vfprintf_internal_r+0x1320>
   4509c:	d8801f17 	ldw	r2,124(sp)
   450a0:	1c47883a 	add	r3,r3,r17
   450a4:	44000015 	stw	r16,0(r8)
   450a8:	10800044 	addi	r2,r2,1
   450ac:	44400115 	stw	r17,4(r8)
   450b0:	d8c02015 	stw	r3,128(sp)
   450b4:	d8801f15 	stw	r2,124(sp)
   450b8:	010001c4 	movi	r4,7
   450bc:	20826516 	blt	r4,r2,45a54 <___vfprintf_internal_r+0x1cb0>
   450c0:	42000204 	addi	r8,r8,8
   450c4:	88026116 	blt	r17,zero,45a4c <___vfprintf_internal_r+0x1ca8>
   450c8:	d9003217 	ldw	r4,200(sp)
   450cc:	2463c83a 	sub	r17,r4,r17
   450d0:	04407b0e 	bge	zero,r17,452c0 <___vfprintf_internal_r+0x151c>
   450d4:	05800404 	movi	r22,16
   450d8:	d8801f17 	ldw	r2,124(sp)
   450dc:	b4419d0e 	bge	r22,r17,45754 <___vfprintf_internal_r+0x19b0>
   450e0:	01000174 	movhi	r4,5
   450e4:	21067d84 	addi	r4,r4,6646
   450e8:	d9002c15 	stw	r4,176(sp)
   450ec:	070001c4 	movi	fp,7
   450f0:	dcc02d17 	ldw	r19,180(sp)
   450f4:	00000306 	br	45104 <___vfprintf_internal_r+0x1360>
   450f8:	42000204 	addi	r8,r8,8
   450fc:	8c7ffc04 	addi	r17,r17,-16
   45100:	b441970e 	bge	r22,r17,45760 <___vfprintf_internal_r+0x19bc>
   45104:	18c00404 	addi	r3,r3,16
   45108:	10800044 	addi	r2,r2,1
   4510c:	45000015 	stw	r20,0(r8)
   45110:	45800115 	stw	r22,4(r8)
   45114:	d8c02015 	stw	r3,128(sp)
   45118:	d8801f15 	stw	r2,124(sp)
   4511c:	e0bff60e 	bge	fp,r2,450f8 <_gp+0xfffe99d0>
   45120:	d9801e04 	addi	r6,sp,120
   45124:	b80b883a 	mov	r5,r23
   45128:	9809883a 	mov	r4,r19
   4512c:	004a0bc0 	call	4a0bc <__sprint_r>
   45130:	103c201e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45134:	d8c02017 	ldw	r3,128(sp)
   45138:	d8801f17 	ldw	r2,124(sp)
   4513c:	da000404 	addi	r8,sp,16
   45140:	003fee06 	br	450fc <_gp+0xfffe99d4>
   45144:	d9002d17 	ldw	r4,180(sp)
   45148:	d9801e04 	addi	r6,sp,120
   4514c:	b80b883a 	mov	r5,r23
   45150:	004a0bc0 	call	4a0bc <__sprint_r>
   45154:	103c171e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45158:	d8c02017 	ldw	r3,128(sp)
   4515c:	df002787 	ldb	fp,158(sp)
   45160:	da000404 	addi	r8,sp,16
   45164:	003d3406 	br	44638 <_gp+0xfffe8f10>
   45168:	9080040c 	andi	r2,r18,16
   4516c:	10016126 	beq	r2,zero,456f4 <___vfprintf_internal_r+0x1950>
   45170:	d9402e17 	ldw	r5,184(sp)
   45174:	2cc00017 	ldw	r19,0(r5)
   45178:	29400104 	addi	r5,r5,4
   4517c:	d9402e15 	stw	r5,184(sp)
   45180:	982dd7fa 	srai	r22,r19,31
   45184:	b005883a 	mov	r2,r22
   45188:	003c5a06 	br	442f4 <_gp+0xfffe8bcc>
   4518c:	9080040c 	andi	r2,r18,16
   45190:	10003526 	beq	r2,zero,45268 <___vfprintf_internal_r+0x14c4>
   45194:	d8c02e17 	ldw	r3,184(sp)
   45198:	d9002a17 	ldw	r4,168(sp)
   4519c:	d8002785 	stb	zero,158(sp)
   451a0:	18800104 	addi	r2,r3,4
   451a4:	1cc00017 	ldw	r19,0(r3)
   451a8:	002d883a 	mov	r22,zero
   451ac:	20003716 	blt	r4,zero,4528c <___vfprintf_internal_r+0x14e8>
   451b0:	00ffdfc4 	movi	r3,-129
   451b4:	d8802e15 	stw	r2,184(sp)
   451b8:	90e4703a 	and	r18,r18,r3
   451bc:	0039883a 	mov	fp,zero
   451c0:	983dd426 	beq	r19,zero,44914 <_gp+0xfffe91ec>
   451c4:	00800244 	movi	r2,9
   451c8:	14fc5336 	bltu	r2,r19,44318 <_gp+0xfffe8bf0>
   451cc:	d8c02817 	ldw	r3,160(sp)
   451d0:	dc001dc4 	addi	r16,sp,119
   451d4:	9cc00c04 	addi	r19,r19,48
   451d8:	1c07c83a 	sub	r3,r3,r16
   451dc:	dcc01dc5 	stb	r19,119(sp)
   451e0:	d8c02b15 	stw	r3,172(sp)
   451e4:	003cc606 	br	44500 <_gp+0xfffe8dd8>
   451e8:	d8803317 	ldw	r2,204(sp)
   451ec:	143fffc4 	addi	r16,r2,-1
   451f0:	043f4d0e 	bge	zero,r16,44f28 <_gp+0xfffe9800>
   451f4:	07000404 	movi	fp,16
   451f8:	e400810e 	bge	fp,r16,45400 <___vfprintf_internal_r+0x165c>
   451fc:	01400174 	movhi	r5,5
   45200:	29467d84 	addi	r5,r5,6646
   45204:	d9402c15 	stw	r5,176(sp)
   45208:	01c001c4 	movi	r7,7
   4520c:	dcc02d17 	ldw	r19,180(sp)
   45210:	00000306 	br	45220 <___vfprintf_internal_r+0x147c>
   45214:	b5800204 	addi	r22,r22,8
   45218:	843ffc04 	addi	r16,r16,-16
   4521c:	e4007b0e 	bge	fp,r16,4540c <___vfprintf_internal_r+0x1668>
   45220:	18c00404 	addi	r3,r3,16
   45224:	8c400044 	addi	r17,r17,1
   45228:	b5000015 	stw	r20,0(r22)
   4522c:	b7000115 	stw	fp,4(r22)
   45230:	d8c02015 	stw	r3,128(sp)
   45234:	dc401f15 	stw	r17,124(sp)
   45238:	3c7ff60e 	bge	r7,r17,45214 <_gp+0xfffe9aec>
   4523c:	d9801e04 	addi	r6,sp,120
   45240:	b80b883a 	mov	r5,r23
   45244:	9809883a 	mov	r4,r19
   45248:	d9c03c15 	stw	r7,240(sp)
   4524c:	004a0bc0 	call	4a0bc <__sprint_r>
   45250:	d9c03c17 	ldw	r7,240(sp)
   45254:	103bd71e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45258:	d8c02017 	ldw	r3,128(sp)
   4525c:	dc401f17 	ldw	r17,124(sp)
   45260:	dd800404 	addi	r22,sp,16
   45264:	003fec06 	br	45218 <_gp+0xfffe9af0>
   45268:	9080100c 	andi	r2,r18,64
   4526c:	d8002785 	stb	zero,158(sp)
   45270:	10010e26 	beq	r2,zero,456ac <___vfprintf_internal_r+0x1908>
   45274:	d9402e17 	ldw	r5,184(sp)
   45278:	d8c02a17 	ldw	r3,168(sp)
   4527c:	002d883a 	mov	r22,zero
   45280:	28800104 	addi	r2,r5,4
   45284:	2cc0000b 	ldhu	r19,0(r5)
   45288:	183fc90e 	bge	r3,zero,451b0 <_gp+0xfffe9a88>
   4528c:	d8802e15 	stw	r2,184(sp)
   45290:	0039883a 	mov	fp,zero
   45294:	9d84b03a 	or	r2,r19,r22
   45298:	103c1e1e 	bne	r2,zero,44314 <_gp+0xfffe8bec>
   4529c:	00800044 	movi	r2,1
   452a0:	003e6c06 	br	44c54 <_gp+0xfffe952c>
   452a4:	d9002d17 	ldw	r4,180(sp)
   452a8:	d9801e04 	addi	r6,sp,120
   452ac:	b80b883a 	mov	r5,r23
   452b0:	004a0bc0 	call	4a0bc <__sprint_r>
   452b4:	103bbf1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   452b8:	d8c02017 	ldw	r3,128(sp)
   452bc:	da000404 	addi	r8,sp,16
   452c0:	d9003217 	ldw	r4,200(sp)
   452c4:	d8802617 	ldw	r2,152(sp)
   452c8:	d9403317 	ldw	r5,204(sp)
   452cc:	8123883a 	add	r17,r16,r4
   452d0:	11400216 	blt	r2,r5,452dc <___vfprintf_internal_r+0x1538>
   452d4:	9100004c 	andi	r4,r18,1
   452d8:	20000d26 	beq	r4,zero,45310 <___vfprintf_internal_r+0x156c>
   452dc:	d9003717 	ldw	r4,220(sp)
   452e0:	d9403417 	ldw	r5,208(sp)
   452e4:	1907883a 	add	r3,r3,r4
   452e8:	d9001f17 	ldw	r4,124(sp)
   452ec:	41400015 	stw	r5,0(r8)
   452f0:	d9403717 	ldw	r5,220(sp)
   452f4:	21000044 	addi	r4,r4,1
   452f8:	d8c02015 	stw	r3,128(sp)
   452fc:	41400115 	stw	r5,4(r8)
   45300:	d9001f15 	stw	r4,124(sp)
   45304:	014001c4 	movi	r5,7
   45308:	2901e816 	blt	r5,r4,45aac <___vfprintf_internal_r+0x1d08>
   4530c:	42000204 	addi	r8,r8,8
   45310:	d9003317 	ldw	r4,204(sp)
   45314:	8121883a 	add	r16,r16,r4
   45318:	2085c83a 	sub	r2,r4,r2
   4531c:	8461c83a 	sub	r16,r16,r17
   45320:	1400010e 	bge	r2,r16,45328 <___vfprintf_internal_r+0x1584>
   45324:	1021883a 	mov	r16,r2
   45328:	04000a0e 	bge	zero,r16,45354 <___vfprintf_internal_r+0x15b0>
   4532c:	d9001f17 	ldw	r4,124(sp)
   45330:	1c07883a 	add	r3,r3,r16
   45334:	44400015 	stw	r17,0(r8)
   45338:	21000044 	addi	r4,r4,1
   4533c:	44000115 	stw	r16,4(r8)
   45340:	d8c02015 	stw	r3,128(sp)
   45344:	d9001f15 	stw	r4,124(sp)
   45348:	014001c4 	movi	r5,7
   4534c:	2901fb16 	blt	r5,r4,45b3c <___vfprintf_internal_r+0x1d98>
   45350:	42000204 	addi	r8,r8,8
   45354:	8001f716 	blt	r16,zero,45b34 <___vfprintf_internal_r+0x1d90>
   45358:	1421c83a 	sub	r16,r2,r16
   4535c:	043d160e 	bge	zero,r16,447b8 <_gp+0xfffe9090>
   45360:	04400404 	movi	r17,16
   45364:	d8801f17 	ldw	r2,124(sp)
   45368:	8c3efb0e 	bge	r17,r16,44f58 <_gp+0xfffe9830>
   4536c:	01400174 	movhi	r5,5
   45370:	29467d84 	addi	r5,r5,6646
   45374:	d9402c15 	stw	r5,176(sp)
   45378:	058001c4 	movi	r22,7
   4537c:	dcc02d17 	ldw	r19,180(sp)
   45380:	00000306 	br	45390 <___vfprintf_internal_r+0x15ec>
   45384:	42000204 	addi	r8,r8,8
   45388:	843ffc04 	addi	r16,r16,-16
   4538c:	8c3ef50e 	bge	r17,r16,44f64 <_gp+0xfffe983c>
   45390:	18c00404 	addi	r3,r3,16
   45394:	10800044 	addi	r2,r2,1
   45398:	45000015 	stw	r20,0(r8)
   4539c:	44400115 	stw	r17,4(r8)
   453a0:	d8c02015 	stw	r3,128(sp)
   453a4:	d8801f15 	stw	r2,124(sp)
   453a8:	b0bff60e 	bge	r22,r2,45384 <_gp+0xfffe9c5c>
   453ac:	d9801e04 	addi	r6,sp,120
   453b0:	b80b883a 	mov	r5,r23
   453b4:	9809883a 	mov	r4,r19
   453b8:	004a0bc0 	call	4a0bc <__sprint_r>
   453bc:	103b7d1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   453c0:	d8c02017 	ldw	r3,128(sp)
   453c4:	d8801f17 	ldw	r2,124(sp)
   453c8:	da000404 	addi	r8,sp,16
   453cc:	003fee06 	br	45388 <_gp+0xfffe9c60>
   453d0:	9088703a 	and	r4,r18,r2
   453d4:	203eab1e 	bne	r4,zero,44e84 <_gp+0xfffe975c>
   453d8:	dc401f17 	ldw	r17,124(sp)
   453dc:	40800115 	stw	r2,4(r8)
   453e0:	44000015 	stw	r16,0(r8)
   453e4:	8c400044 	addi	r17,r17,1
   453e8:	d8c02015 	stw	r3,128(sp)
   453ec:	dc401f15 	stw	r17,124(sp)
   453f0:	008001c4 	movi	r2,7
   453f4:	14400e16 	blt	r2,r17,45430 <___vfprintf_internal_r+0x168c>
   453f8:	45800204 	addi	r22,r8,8
   453fc:	003eca06 	br	44f28 <_gp+0xfffe9800>
   45400:	01000174 	movhi	r4,5
   45404:	21067d84 	addi	r4,r4,6646
   45408:	d9002c15 	stw	r4,176(sp)
   4540c:	d8802c17 	ldw	r2,176(sp)
   45410:	1c07883a 	add	r3,r3,r16
   45414:	8c400044 	addi	r17,r17,1
   45418:	b0800015 	stw	r2,0(r22)
   4541c:	b4000115 	stw	r16,4(r22)
   45420:	d8c02015 	stw	r3,128(sp)
   45424:	dc401f15 	stw	r17,124(sp)
   45428:	008001c4 	movi	r2,7
   4542c:	147ebd0e 	bge	r2,r17,44f24 <_gp+0xfffe97fc>
   45430:	d9002d17 	ldw	r4,180(sp)
   45434:	d9801e04 	addi	r6,sp,120
   45438:	b80b883a 	mov	r5,r23
   4543c:	004a0bc0 	call	4a0bc <__sprint_r>
   45440:	103b5c1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45444:	d8c02017 	ldw	r3,128(sp)
   45448:	dc401f17 	ldw	r17,124(sp)
   4544c:	dd800404 	addi	r22,sp,16
   45450:	003eb506 	br	44f28 <_gp+0xfffe9800>
   45454:	d9002d17 	ldw	r4,180(sp)
   45458:	d9801e04 	addi	r6,sp,120
   4545c:	b80b883a 	mov	r5,r23
   45460:	004a0bc0 	call	4a0bc <__sprint_r>
   45464:	103b531e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45468:	d8c02017 	ldw	r3,128(sp)
   4546c:	dc401f17 	ldw	r17,124(sp)
   45470:	da000404 	addi	r8,sp,16
   45474:	003e8d06 	br	44eac <_gp+0xfffe9784>
   45478:	d9002d17 	ldw	r4,180(sp)
   4547c:	d9801e04 	addi	r6,sp,120
   45480:	b80b883a 	mov	r5,r23
   45484:	004a0bc0 	call	4a0bc <__sprint_r>
   45488:	103b4a1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   4548c:	d8c02017 	ldw	r3,128(sp)
   45490:	dc401f17 	ldw	r17,124(sp)
   45494:	dd800404 	addi	r22,sp,16
   45498:	003e8f06 	br	44ed8 <_gp+0xfffe97b0>
   4549c:	0027883a 	mov	r19,zero
   454a0:	003f4a06 	br	451cc <_gp+0xfffe9aa4>
   454a4:	d9002d17 	ldw	r4,180(sp)
   454a8:	d9801e04 	addi	r6,sp,120
   454ac:	b80b883a 	mov	r5,r23
   454b0:	004a0bc0 	call	4a0bc <__sprint_r>
   454b4:	103b3f1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   454b8:	d8c02017 	ldw	r3,128(sp)
   454bc:	da000404 	addi	r8,sp,16
   454c0:	003c7b06 	br	446b0 <_gp+0xfffe8f88>
   454c4:	d9402a17 	ldw	r5,168(sp)
   454c8:	04e7c83a 	sub	r19,zero,r19
   454cc:	07000b44 	movi	fp,45
   454d0:	9804c03a 	cmpne	r2,r19,zero
   454d4:	05adc83a 	sub	r22,zero,r22
   454d8:	df002785 	stb	fp,158(sp)
   454dc:	b0adc83a 	sub	r22,r22,r2
   454e0:	28017b16 	blt	r5,zero,45ad0 <___vfprintf_internal_r+0x1d2c>
   454e4:	00bfdfc4 	movi	r2,-129
   454e8:	90a4703a 	and	r18,r18,r2
   454ec:	003b8906 	br	44314 <_gp+0xfffe8bec>
   454f0:	d9003617 	ldw	r4,216(sp)
   454f4:	d9403817 	ldw	r5,224(sp)
   454f8:	da003d15 	stw	r8,244(sp)
   454fc:	0049e700 	call	49e70 <__fpclassifyd>
   45500:	da003d17 	ldw	r8,244(sp)
   45504:	1000f026 	beq	r2,zero,458c8 <___vfprintf_internal_r+0x1b24>
   45508:	d9002a17 	ldw	r4,168(sp)
   4550c:	05bff7c4 	movi	r22,-33
   45510:	00bfffc4 	movi	r2,-1
   45514:	8dac703a 	and	r22,r17,r22
   45518:	20820026 	beq	r4,r2,45d1c <___vfprintf_internal_r+0x1f78>
   4551c:	008011c4 	movi	r2,71
   45520:	b081f726 	beq	r22,r2,45d00 <___vfprintf_internal_r+0x1f5c>
   45524:	d9003817 	ldw	r4,224(sp)
   45528:	90c04014 	ori	r3,r18,256
   4552c:	d8c02c15 	stw	r3,176(sp)
   45530:	20021516 	blt	r4,zero,45d88 <___vfprintf_internal_r+0x1fe4>
   45534:	dcc03817 	ldw	r19,224(sp)
   45538:	d8002905 	stb	zero,164(sp)
   4553c:	00801984 	movi	r2,102
   45540:	8881f926 	beq	r17,r2,45d28 <___vfprintf_internal_r+0x1f84>
   45544:	00801184 	movi	r2,70
   45548:	88821c26 	beq	r17,r2,45dbc <___vfprintf_internal_r+0x2018>
   4554c:	00801144 	movi	r2,69
   45550:	b081ef26 	beq	r22,r2,45d10 <___vfprintf_internal_r+0x1f6c>
   45554:	d8c02a17 	ldw	r3,168(sp)
   45558:	d8802104 	addi	r2,sp,132
   4555c:	d8800315 	stw	r2,12(sp)
   45560:	d9403617 	ldw	r5,216(sp)
   45564:	d8802504 	addi	r2,sp,148
   45568:	d9002d17 	ldw	r4,180(sp)
   4556c:	d8800215 	stw	r2,8(sp)
   45570:	d8802604 	addi	r2,sp,152
   45574:	d8c00015 	stw	r3,0(sp)
   45578:	d8800115 	stw	r2,4(sp)
   4557c:	01c00084 	movi	r7,2
   45580:	980d883a 	mov	r6,r19
   45584:	d8c03c15 	stw	r3,240(sp)
   45588:	da003d15 	stw	r8,244(sp)
   4558c:	00466e00 	call	466e0 <_dtoa_r>
   45590:	1021883a 	mov	r16,r2
   45594:	008019c4 	movi	r2,103
   45598:	d8c03c17 	ldw	r3,240(sp)
   4559c:	da003d17 	ldw	r8,244(sp)
   455a0:	88817126 	beq	r17,r2,45b68 <___vfprintf_internal_r+0x1dc4>
   455a4:	008011c4 	movi	r2,71
   455a8:	88829126 	beq	r17,r2,45ff0 <___vfprintf_internal_r+0x224c>
   455ac:	80f9883a 	add	fp,r16,r3
   455b0:	d9003617 	ldw	r4,216(sp)
   455b4:	000d883a 	mov	r6,zero
   455b8:	000f883a 	mov	r7,zero
   455bc:	980b883a 	mov	r5,r19
   455c0:	da003d15 	stw	r8,244(sp)
   455c4:	004cff00 	call	4cff0 <__eqdf2>
   455c8:	da003d17 	ldw	r8,244(sp)
   455cc:	10018d26 	beq	r2,zero,45c04 <___vfprintf_internal_r+0x1e60>
   455d0:	d8802117 	ldw	r2,132(sp)
   455d4:	1700062e 	bgeu	r2,fp,455f0 <___vfprintf_internal_r+0x184c>
   455d8:	01000c04 	movi	r4,48
   455dc:	10c00044 	addi	r3,r2,1
   455e0:	d8c02115 	stw	r3,132(sp)
   455e4:	11000005 	stb	r4,0(r2)
   455e8:	d8802117 	ldw	r2,132(sp)
   455ec:	173ffb36 	bltu	r2,fp,455dc <_gp+0xfffe9eb4>
   455f0:	1405c83a 	sub	r2,r2,r16
   455f4:	d8803315 	stw	r2,204(sp)
   455f8:	008011c4 	movi	r2,71
   455fc:	b0817626 	beq	r22,r2,45bd8 <___vfprintf_internal_r+0x1e34>
   45600:	00801944 	movi	r2,101
   45604:	1442800e 	bge	r2,r17,46008 <___vfprintf_internal_r+0x2264>
   45608:	d8c02617 	ldw	r3,152(sp)
   4560c:	00801984 	movi	r2,102
   45610:	d8c03215 	stw	r3,200(sp)
   45614:	8881fe26 	beq	r17,r2,45e10 <___vfprintf_internal_r+0x206c>
   45618:	d8c03217 	ldw	r3,200(sp)
   4561c:	d9003317 	ldw	r4,204(sp)
   45620:	1901dd16 	blt	r3,r4,45d98 <___vfprintf_internal_r+0x1ff4>
   45624:	9480004c 	andi	r18,r18,1
   45628:	90022b1e 	bne	r18,zero,45ed8 <___vfprintf_internal_r+0x2134>
   4562c:	1805883a 	mov	r2,r3
   45630:	18028316 	blt	r3,zero,46040 <___vfprintf_internal_r+0x229c>
   45634:	d8c03217 	ldw	r3,200(sp)
   45638:	044019c4 	movi	r17,103
   4563c:	d8c02b15 	stw	r3,172(sp)
   45640:	df002907 	ldb	fp,164(sp)
   45644:	e001531e 	bne	fp,zero,45b94 <___vfprintf_internal_r+0x1df0>
   45648:	df002783 	ldbu	fp,158(sp)
   4564c:	d8802915 	stw	r2,164(sp)
   45650:	dc802c17 	ldw	r18,176(sp)
   45654:	d8002a15 	stw	zero,168(sp)
   45658:	003baf06 	br	44518 <_gp+0xfffe8df0>
   4565c:	d8c02e17 	ldw	r3,184(sp)
   45660:	d9002e17 	ldw	r4,184(sp)
   45664:	d9402e17 	ldw	r5,184(sp)
   45668:	18c00017 	ldw	r3,0(r3)
   4566c:	21000117 	ldw	r4,4(r4)
   45670:	29400204 	addi	r5,r5,8
   45674:	d8c03615 	stw	r3,216(sp)
   45678:	d9003815 	stw	r4,224(sp)
   4567c:	d9402e15 	stw	r5,184(sp)
   45680:	003b5006 	br	443c4 <_gp+0xfffe8c9c>
   45684:	ac400007 	ldb	r17,0(r21)
   45688:	003a2806 	br	43f2c <_gp+0xfffe8804>
   4568c:	9080100c 	andi	r2,r18,64
   45690:	1000a826 	beq	r2,zero,45934 <___vfprintf_internal_r+0x1b90>
   45694:	d8c02e17 	ldw	r3,184(sp)
   45698:	002d883a 	mov	r22,zero
   4569c:	1cc0000b 	ldhu	r19,0(r3)
   456a0:	18c00104 	addi	r3,r3,4
   456a4:	d8c02e15 	stw	r3,184(sp)
   456a8:	003caf06 	br	44968 <_gp+0xfffe9240>
   456ac:	d9002e17 	ldw	r4,184(sp)
   456b0:	d9402a17 	ldw	r5,168(sp)
   456b4:	002d883a 	mov	r22,zero
   456b8:	20800104 	addi	r2,r4,4
   456bc:	24c00017 	ldw	r19,0(r4)
   456c0:	283ebb0e 	bge	r5,zero,451b0 <_gp+0xfffe9a88>
   456c4:	003ef106 	br	4528c <_gp+0xfffe9b64>
   456c8:	9080040c 	andi	r2,r18,16
   456cc:	1000921e 	bne	r2,zero,45918 <___vfprintf_internal_r+0x1b74>
   456d0:	9480100c 	andi	r18,r18,64
   456d4:	90013926 	beq	r18,zero,45bbc <___vfprintf_internal_r+0x1e18>
   456d8:	d9402e17 	ldw	r5,184(sp)
   456dc:	d8c02f17 	ldw	r3,188(sp)
   456e0:	28800017 	ldw	r2,0(r5)
   456e4:	29400104 	addi	r5,r5,4
   456e8:	d9402e15 	stw	r5,184(sp)
   456ec:	10c0000d 	sth	r3,0(r2)
   456f0:	0039e406 	br	43e84 <_gp+0xfffe875c>
   456f4:	9080100c 	andi	r2,r18,64
   456f8:	10008026 	beq	r2,zero,458fc <___vfprintf_internal_r+0x1b58>
   456fc:	d8802e17 	ldw	r2,184(sp)
   45700:	14c0000f 	ldh	r19,0(r2)
   45704:	10800104 	addi	r2,r2,4
   45708:	d8802e15 	stw	r2,184(sp)
   4570c:	982dd7fa 	srai	r22,r19,31
   45710:	b005883a 	mov	r2,r22
   45714:	003af706 	br	442f4 <_gp+0xfffe8bcc>
   45718:	9080100c 	andi	r2,r18,64
   4571c:	d8002785 	stb	zero,158(sp)
   45720:	10008a1e 	bne	r2,zero,4594c <___vfprintf_internal_r+0x1ba8>
   45724:	d9002e17 	ldw	r4,184(sp)
   45728:	d9402a17 	ldw	r5,168(sp)
   4572c:	002d883a 	mov	r22,zero
   45730:	20800104 	addi	r2,r4,4
   45734:	24c00017 	ldw	r19,0(r4)
   45738:	283e4b0e 	bge	r5,zero,45068 <_gp+0xfffe9940>
   4573c:	9d86b03a 	or	r3,r19,r22
   45740:	d8802e15 	stw	r2,184(sp)
   45744:	183e4c1e 	bne	r3,zero,45078 <_gp+0xfffe9950>
   45748:	0039883a 	mov	fp,zero
   4574c:	0005883a 	mov	r2,zero
   45750:	003d4006 	br	44c54 <_gp+0xfffe952c>
   45754:	01400174 	movhi	r5,5
   45758:	29467d84 	addi	r5,r5,6646
   4575c:	d9402c15 	stw	r5,176(sp)
   45760:	d9402c17 	ldw	r5,176(sp)
   45764:	1c47883a 	add	r3,r3,r17
   45768:	10800044 	addi	r2,r2,1
   4576c:	41400015 	stw	r5,0(r8)
   45770:	44400115 	stw	r17,4(r8)
   45774:	d8c02015 	stw	r3,128(sp)
   45778:	d8801f15 	stw	r2,124(sp)
   4577c:	010001c4 	movi	r4,7
   45780:	20bec816 	blt	r4,r2,452a4 <_gp+0xfffe9b7c>
   45784:	42000204 	addi	r8,r8,8
   45788:	003ecd06 	br	452c0 <_gp+0xfffe9b98>
   4578c:	d9002a17 	ldw	r4,168(sp)
   45790:	d8002785 	stb	zero,158(sp)
   45794:	203d2d16 	blt	r4,zero,44c4c <_gp+0xfffe9524>
   45798:	00bfdfc4 	movi	r2,-129
   4579c:	90a4703a 	and	r18,r18,r2
   457a0:	003a6106 	br	44128 <_gp+0xfffe8a00>
   457a4:	01000174 	movhi	r4,5
   457a8:	21067d84 	addi	r4,r4,6646
   457ac:	d9002c15 	stw	r4,176(sp)
   457b0:	003bea06 	br	4475c <_gp+0xfffe9034>
   457b4:	d9002d17 	ldw	r4,180(sp)
   457b8:	d9801e04 	addi	r6,sp,120
   457bc:	b80b883a 	mov	r5,r23
   457c0:	004a0bc0 	call	4a0bc <__sprint_r>
   457c4:	103a7b1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   457c8:	d8c02017 	ldw	r3,128(sp)
   457cc:	da000404 	addi	r8,sp,16
   457d0:	003d4106 	br	44cd8 <_gp+0xfffe95b0>
   457d4:	d8801f17 	ldw	r2,124(sp)
   457d8:	01400174 	movhi	r5,5
   457dc:	01000044 	movi	r4,1
   457e0:	18c00044 	addi	r3,r3,1
   457e4:	10800044 	addi	r2,r2,1
   457e8:	29467d04 	addi	r5,r5,6644
   457ec:	41000115 	stw	r4,4(r8)
   457f0:	41400015 	stw	r5,0(r8)
   457f4:	d8c02015 	stw	r3,128(sp)
   457f8:	d8801f15 	stw	r2,124(sp)
   457fc:	010001c4 	movi	r4,7
   45800:	20805c16 	blt	r4,r2,45974 <___vfprintf_internal_r+0x1bd0>
   45804:	42000204 	addi	r8,r8,8
   45808:	8800041e 	bne	r17,zero,4581c <___vfprintf_internal_r+0x1a78>
   4580c:	d8803317 	ldw	r2,204(sp)
   45810:	1000021e 	bne	r2,zero,4581c <___vfprintf_internal_r+0x1a78>
   45814:	9080004c 	andi	r2,r18,1
   45818:	103be726 	beq	r2,zero,447b8 <_gp+0xfffe9090>
   4581c:	d9003717 	ldw	r4,220(sp)
   45820:	d8801f17 	ldw	r2,124(sp)
   45824:	d9403417 	ldw	r5,208(sp)
   45828:	20c7883a 	add	r3,r4,r3
   4582c:	10800044 	addi	r2,r2,1
   45830:	41000115 	stw	r4,4(r8)
   45834:	41400015 	stw	r5,0(r8)
   45838:	d8c02015 	stw	r3,128(sp)
   4583c:	d8801f15 	stw	r2,124(sp)
   45840:	010001c4 	movi	r4,7
   45844:	20812116 	blt	r4,r2,45ccc <___vfprintf_internal_r+0x1f28>
   45848:	42000204 	addi	r8,r8,8
   4584c:	0463c83a 	sub	r17,zero,r17
   45850:	0440730e 	bge	zero,r17,45a20 <___vfprintf_internal_r+0x1c7c>
   45854:	05800404 	movi	r22,16
   45858:	b440860e 	bge	r22,r17,45a74 <___vfprintf_internal_r+0x1cd0>
   4585c:	01400174 	movhi	r5,5
   45860:	29467d84 	addi	r5,r5,6646
   45864:	d9402c15 	stw	r5,176(sp)
   45868:	070001c4 	movi	fp,7
   4586c:	dcc02d17 	ldw	r19,180(sp)
   45870:	00000306 	br	45880 <___vfprintf_internal_r+0x1adc>
   45874:	42000204 	addi	r8,r8,8
   45878:	8c7ffc04 	addi	r17,r17,-16
   4587c:	b440800e 	bge	r22,r17,45a80 <___vfprintf_internal_r+0x1cdc>
   45880:	18c00404 	addi	r3,r3,16
   45884:	10800044 	addi	r2,r2,1
   45888:	45000015 	stw	r20,0(r8)
   4588c:	45800115 	stw	r22,4(r8)
   45890:	d8c02015 	stw	r3,128(sp)
   45894:	d8801f15 	stw	r2,124(sp)
   45898:	e0bff60e 	bge	fp,r2,45874 <_gp+0xfffea14c>
   4589c:	d9801e04 	addi	r6,sp,120
   458a0:	b80b883a 	mov	r5,r23
   458a4:	9809883a 	mov	r4,r19
   458a8:	004a0bc0 	call	4a0bc <__sprint_r>
   458ac:	103a411e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   458b0:	d8c02017 	ldw	r3,128(sp)
   458b4:	d8801f17 	ldw	r2,124(sp)
   458b8:	da000404 	addi	r8,sp,16
   458bc:	003fee06 	br	45878 <_gp+0xfffea150>
   458c0:	00bfffc4 	movi	r2,-1
   458c4:	003a3f06 	br	441c4 <_gp+0xfffe8a9c>
   458c8:	008011c4 	movi	r2,71
   458cc:	1440b816 	blt	r2,r17,45bb0 <___vfprintf_internal_r+0x1e0c>
   458d0:	04000174 	movhi	r16,5
   458d4:	84066f04 	addi	r16,r16,6588
   458d8:	00c000c4 	movi	r3,3
   458dc:	00bfdfc4 	movi	r2,-129
   458e0:	d8c02915 	stw	r3,164(sp)
   458e4:	90a4703a 	and	r18,r18,r2
   458e8:	df002783 	ldbu	fp,158(sp)
   458ec:	d8c02b15 	stw	r3,172(sp)
   458f0:	d8002a15 	stw	zero,168(sp)
   458f4:	d8003215 	stw	zero,200(sp)
   458f8:	003b0706 	br	44518 <_gp+0xfffe8df0>
   458fc:	d8c02e17 	ldw	r3,184(sp)
   45900:	1cc00017 	ldw	r19,0(r3)
   45904:	18c00104 	addi	r3,r3,4
   45908:	d8c02e15 	stw	r3,184(sp)
   4590c:	982dd7fa 	srai	r22,r19,31
   45910:	b005883a 	mov	r2,r22
   45914:	003a7706 	br	442f4 <_gp+0xfffe8bcc>
   45918:	d8c02e17 	ldw	r3,184(sp)
   4591c:	d9002f17 	ldw	r4,188(sp)
   45920:	18800017 	ldw	r2,0(r3)
   45924:	18c00104 	addi	r3,r3,4
   45928:	d8c02e15 	stw	r3,184(sp)
   4592c:	11000015 	stw	r4,0(r2)
   45930:	00395406 	br	43e84 <_gp+0xfffe875c>
   45934:	d9002e17 	ldw	r4,184(sp)
   45938:	002d883a 	mov	r22,zero
   4593c:	24c00017 	ldw	r19,0(r4)
   45940:	21000104 	addi	r4,r4,4
   45944:	d9002e15 	stw	r4,184(sp)
   45948:	003c0706 	br	44968 <_gp+0xfffe9240>
   4594c:	d9402e17 	ldw	r5,184(sp)
   45950:	d8c02a17 	ldw	r3,168(sp)
   45954:	002d883a 	mov	r22,zero
   45958:	28800104 	addi	r2,r5,4
   4595c:	2cc0000b 	ldhu	r19,0(r5)
   45960:	183dc10e 	bge	r3,zero,45068 <_gp+0xfffe9940>
   45964:	003f7506 	br	4573c <_gp+0xfffea014>
   45968:	04000174 	movhi	r16,5
   4596c:	84066d04 	addi	r16,r16,6580
   45970:	003aa706 	br	44410 <_gp+0xfffe8ce8>
   45974:	d9002d17 	ldw	r4,180(sp)
   45978:	d9801e04 	addi	r6,sp,120
   4597c:	b80b883a 	mov	r5,r23
   45980:	004a0bc0 	call	4a0bc <__sprint_r>
   45984:	103a0b1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45988:	dc402617 	ldw	r17,152(sp)
   4598c:	d8c02017 	ldw	r3,128(sp)
   45990:	da000404 	addi	r8,sp,16
   45994:	003f9c06 	br	45808 <_gp+0xfffea0e0>
   45998:	ac400043 	ldbu	r17,1(r21)
   4599c:	84000814 	ori	r16,r16,32
   459a0:	ad400044 	addi	r21,r21,1
   459a4:	8c403fcc 	andi	r17,r17,255
   459a8:	8c40201c 	xori	r17,r17,128
   459ac:	8c7fe004 	addi	r17,r17,-128
   459b0:	00395e06 	br	43f2c <_gp+0xfffe8804>
   459b4:	d8c02e15 	stw	r3,184(sp)
   459b8:	0039883a 	mov	fp,zero
   459bc:	003e3506 	br	45294 <_gp+0xfffe9b6c>
   459c0:	d9002d17 	ldw	r4,180(sp)
   459c4:	d9801e04 	addi	r6,sp,120
   459c8:	b80b883a 	mov	r5,r23
   459cc:	004a0bc0 	call	4a0bc <__sprint_r>
   459d0:	1039f81e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   459d4:	d8c02017 	ldw	r3,128(sp)
   459d8:	da000404 	addi	r8,sp,16
   459dc:	003cd006 	br	44d20 <_gp+0xfffe95f8>
   459e0:	8009883a 	mov	r4,r16
   459e4:	df003d15 	stw	fp,244(sp)
   459e8:	0043d040 	call	43d04 <strlen>
   459ec:	d8802b15 	stw	r2,172(sp)
   459f0:	da003d17 	ldw	r8,244(sp)
   459f4:	103c200e 	bge	r2,zero,44a78 <_gp+0xfffe9350>
   459f8:	0005883a 	mov	r2,zero
   459fc:	003c1e06 	br	44a78 <_gp+0xfffe9350>
   45a00:	d9002d17 	ldw	r4,180(sp)
   45a04:	d9801e04 	addi	r6,sp,120
   45a08:	b80b883a 	mov	r5,r23
   45a0c:	004a0bc0 	call	4a0bc <__sprint_r>
   45a10:	1039e81e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45a14:	d8c02017 	ldw	r3,128(sp)
   45a18:	d8801f17 	ldw	r2,124(sp)
   45a1c:	da000404 	addi	r8,sp,16
   45a20:	d9403317 	ldw	r5,204(sp)
   45a24:	10800044 	addi	r2,r2,1
   45a28:	44000015 	stw	r16,0(r8)
   45a2c:	28c7883a 	add	r3,r5,r3
   45a30:	003b5b06 	br	447a0 <_gp+0xfffe9078>
   45a34:	01000174 	movhi	r4,5
   45a38:	21068184 	addi	r4,r4,6662
   45a3c:	d9003515 	stw	r4,212(sp)
   45a40:	003af206 	br	4460c <_gp+0xfffe8ee4>
   45a44:	013fffc4 	movi	r4,-1
   45a48:	003a0806 	br	4426c <_gp+0xfffe8b44>
   45a4c:	0023883a 	mov	r17,zero
   45a50:	003d9d06 	br	450c8 <_gp+0xfffe99a0>
   45a54:	d9002d17 	ldw	r4,180(sp)
   45a58:	d9801e04 	addi	r6,sp,120
   45a5c:	b80b883a 	mov	r5,r23
   45a60:	004a0bc0 	call	4a0bc <__sprint_r>
   45a64:	1039d31e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45a68:	d8c02017 	ldw	r3,128(sp)
   45a6c:	da000404 	addi	r8,sp,16
   45a70:	003d9406 	br	450c4 <_gp+0xfffe999c>
   45a74:	01000174 	movhi	r4,5
   45a78:	21067d84 	addi	r4,r4,6646
   45a7c:	d9002c15 	stw	r4,176(sp)
   45a80:	d9002c17 	ldw	r4,176(sp)
   45a84:	1c47883a 	add	r3,r3,r17
   45a88:	10800044 	addi	r2,r2,1
   45a8c:	41000015 	stw	r4,0(r8)
   45a90:	44400115 	stw	r17,4(r8)
   45a94:	d8c02015 	stw	r3,128(sp)
   45a98:	d8801f15 	stw	r2,124(sp)
   45a9c:	010001c4 	movi	r4,7
   45aa0:	20bfd716 	blt	r4,r2,45a00 <_gp+0xfffea2d8>
   45aa4:	42000204 	addi	r8,r8,8
   45aa8:	003fdd06 	br	45a20 <_gp+0xfffea2f8>
   45aac:	d9002d17 	ldw	r4,180(sp)
   45ab0:	d9801e04 	addi	r6,sp,120
   45ab4:	b80b883a 	mov	r5,r23
   45ab8:	004a0bc0 	call	4a0bc <__sprint_r>
   45abc:	1039bd1e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45ac0:	d8802617 	ldw	r2,152(sp)
   45ac4:	d8c02017 	ldw	r3,128(sp)
   45ac8:	da000404 	addi	r8,sp,16
   45acc:	003e1006 	br	45310 <_gp+0xfffe9be8>
   45ad0:	00800044 	movi	r2,1
   45ad4:	10803fcc 	andi	r2,r2,255
   45ad8:	00c00044 	movi	r3,1
   45adc:	10fa0d26 	beq	r2,r3,44314 <_gp+0xfffe8bec>
   45ae0:	00c00084 	movi	r3,2
   45ae4:	10fbaf26 	beq	r2,r3,449a4 <_gp+0xfffe927c>
   45ae8:	003a6d06 	br	444a0 <_gp+0xfffe8d78>
   45aec:	01000174 	movhi	r4,5
   45af0:	21068184 	addi	r4,r4,6662
   45af4:	d9003515 	stw	r4,212(sp)
   45af8:	003b5406 	br	4484c <_gp+0xfffe9124>
   45afc:	d8802a17 	ldw	r2,168(sp)
   45b00:	00c00184 	movi	r3,6
   45b04:	1880012e 	bgeu	r3,r2,45b0c <___vfprintf_internal_r+0x1d68>
   45b08:	1805883a 	mov	r2,r3
   45b0c:	d8802b15 	stw	r2,172(sp)
   45b10:	1000ef16 	blt	r2,zero,45ed0 <___vfprintf_internal_r+0x212c>
   45b14:	04000174 	movhi	r16,5
   45b18:	d8802915 	stw	r2,164(sp)
   45b1c:	dcc02e15 	stw	r19,184(sp)
   45b20:	d8002a15 	stw	zero,168(sp)
   45b24:	d8003215 	stw	zero,200(sp)
   45b28:	84067b04 	addi	r16,r16,6636
   45b2c:	0039883a 	mov	fp,zero
   45b30:	003a8006 	br	44534 <_gp+0xfffe8e0c>
   45b34:	0021883a 	mov	r16,zero
   45b38:	003e0706 	br	45358 <_gp+0xfffe9c30>
   45b3c:	d9002d17 	ldw	r4,180(sp)
   45b40:	d9801e04 	addi	r6,sp,120
   45b44:	b80b883a 	mov	r5,r23
   45b48:	004a0bc0 	call	4a0bc <__sprint_r>
   45b4c:	1039991e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45b50:	d8802617 	ldw	r2,152(sp)
   45b54:	d9403317 	ldw	r5,204(sp)
   45b58:	d8c02017 	ldw	r3,128(sp)
   45b5c:	da000404 	addi	r8,sp,16
   45b60:	2885c83a 	sub	r2,r5,r2
   45b64:	003dfb06 	br	45354 <_gp+0xfffe9c2c>
   45b68:	9080004c 	andi	r2,r18,1
   45b6c:	103e8f1e 	bne	r2,zero,455ac <_gp+0xfffe9e84>
   45b70:	d8802117 	ldw	r2,132(sp)
   45b74:	003e9e06 	br	455f0 <_gp+0xfffe9ec8>
   45b78:	1025883a 	mov	r18,r2
   45b7c:	0039883a 	mov	fp,zero
   45b80:	00800084 	movi	r2,2
   45b84:	003fd306 	br	45ad4 <_gp+0xfffea3ac>
   45b88:	07000b44 	movi	fp,45
   45b8c:	df002785 	stb	fp,158(sp)
   45b90:	003a1b06 	br	44400 <_gp+0xfffe8cd8>
   45b94:	00c00b44 	movi	r3,45
   45b98:	d8c02785 	stb	r3,158(sp)
   45b9c:	d8802915 	stw	r2,164(sp)
   45ba0:	dc802c17 	ldw	r18,176(sp)
   45ba4:	d8002a15 	stw	zero,168(sp)
   45ba8:	07000b44 	movi	fp,45
   45bac:	003a5e06 	br	44528 <_gp+0xfffe8e00>
   45bb0:	04000174 	movhi	r16,5
   45bb4:	84067004 	addi	r16,r16,6592
   45bb8:	003f4706 	br	458d8 <_gp+0xfffea1b0>
   45bbc:	d9002e17 	ldw	r4,184(sp)
   45bc0:	d9402f17 	ldw	r5,188(sp)
   45bc4:	20800017 	ldw	r2,0(r4)
   45bc8:	21000104 	addi	r4,r4,4
   45bcc:	d9002e15 	stw	r4,184(sp)
   45bd0:	11400015 	stw	r5,0(r2)
   45bd4:	0038ab06 	br	43e84 <_gp+0xfffe875c>
   45bd8:	dd802617 	ldw	r22,152(sp)
   45bdc:	00bfff44 	movi	r2,-3
   45be0:	b0801c16 	blt	r22,r2,45c54 <___vfprintf_internal_r+0x1eb0>
   45be4:	d9402a17 	ldw	r5,168(sp)
   45be8:	2d801a16 	blt	r5,r22,45c54 <___vfprintf_internal_r+0x1eb0>
   45bec:	dd803215 	stw	r22,200(sp)
   45bf0:	003e8906 	br	45618 <_gp+0xfffe9ef0>
   45bf4:	01000174 	movhi	r4,5
   45bf8:	21067d84 	addi	r4,r4,6646
   45bfc:	d9002c15 	stw	r4,176(sp)
   45c00:	003c9106 	br	44e48 <_gp+0xfffe9720>
   45c04:	e005883a 	mov	r2,fp
   45c08:	003e7906 	br	455f0 <_gp+0xfffe9ec8>
   45c0c:	d9002a17 	ldw	r4,168(sp)
   45c10:	df002783 	ldbu	fp,158(sp)
   45c14:	dcc02e15 	stw	r19,184(sp)
   45c18:	d9002915 	stw	r4,164(sp)
   45c1c:	d9002b15 	stw	r4,172(sp)
   45c20:	d8002a15 	stw	zero,168(sp)
   45c24:	d8003215 	stw	zero,200(sp)
   45c28:	003a3b06 	br	44518 <_gp+0xfffe8df0>
   45c2c:	9080004c 	andi	r2,r18,1
   45c30:	0039883a 	mov	fp,zero
   45c34:	10000426 	beq	r2,zero,45c48 <___vfprintf_internal_r+0x1ea4>
   45c38:	00800c04 	movi	r2,48
   45c3c:	dc001dc4 	addi	r16,sp,119
   45c40:	d8801dc5 	stb	r2,119(sp)
   45c44:	003b6406 	br	449d8 <_gp+0xfffe92b0>
   45c48:	d8002b15 	stw	zero,172(sp)
   45c4c:	dc001e04 	addi	r16,sp,120
   45c50:	003a2b06 	br	44500 <_gp+0xfffe8dd8>
   45c54:	8c7fff84 	addi	r17,r17,-2
   45c58:	b5bfffc4 	addi	r22,r22,-1
   45c5c:	dd802615 	stw	r22,152(sp)
   45c60:	dc4022c5 	stb	r17,139(sp)
   45c64:	b000bf16 	blt	r22,zero,45f64 <___vfprintf_internal_r+0x21c0>
   45c68:	00800ac4 	movi	r2,43
   45c6c:	d8802305 	stb	r2,140(sp)
   45c70:	00800244 	movi	r2,9
   45c74:	15807016 	blt	r2,r22,45e38 <___vfprintf_internal_r+0x2094>
   45c78:	00800c04 	movi	r2,48
   45c7c:	b5800c04 	addi	r22,r22,48
   45c80:	d8802345 	stb	r2,141(sp)
   45c84:	dd802385 	stb	r22,142(sp)
   45c88:	d88023c4 	addi	r2,sp,143
   45c8c:	df0022c4 	addi	fp,sp,139
   45c90:	d8c03317 	ldw	r3,204(sp)
   45c94:	1739c83a 	sub	fp,r2,fp
   45c98:	d9003317 	ldw	r4,204(sp)
   45c9c:	e0c7883a 	add	r3,fp,r3
   45ca0:	df003a15 	stw	fp,232(sp)
   45ca4:	d8c02b15 	stw	r3,172(sp)
   45ca8:	00800044 	movi	r2,1
   45cac:	1100b30e 	bge	r2,r4,45f7c <___vfprintf_internal_r+0x21d8>
   45cb0:	d8c02b17 	ldw	r3,172(sp)
   45cb4:	18c00044 	addi	r3,r3,1
   45cb8:	d8c02b15 	stw	r3,172(sp)
   45cbc:	1805883a 	mov	r2,r3
   45cc0:	1800ac16 	blt	r3,zero,45f74 <___vfprintf_internal_r+0x21d0>
   45cc4:	d8003215 	stw	zero,200(sp)
   45cc8:	003e5d06 	br	45640 <_gp+0xfffe9f18>
   45ccc:	d9002d17 	ldw	r4,180(sp)
   45cd0:	d9801e04 	addi	r6,sp,120
   45cd4:	b80b883a 	mov	r5,r23
   45cd8:	004a0bc0 	call	4a0bc <__sprint_r>
   45cdc:	1039351e 	bne	r2,zero,441b4 <_gp+0xfffe8a8c>
   45ce0:	dc402617 	ldw	r17,152(sp)
   45ce4:	d8c02017 	ldw	r3,128(sp)
   45ce8:	d8801f17 	ldw	r2,124(sp)
   45cec:	da000404 	addi	r8,sp,16
   45cf0:	003ed606 	br	4584c <_gp+0xfffea124>
   45cf4:	182b883a 	mov	r21,r3
   45cf8:	d8002a15 	stw	zero,168(sp)
   45cfc:	00388c06 	br	43f30 <_gp+0xfffe8808>
   45d00:	d8802a17 	ldw	r2,168(sp)
   45d04:	103e071e 	bne	r2,zero,45524 <_gp+0xfffe9dfc>
   45d08:	dc002a15 	stw	r16,168(sp)
   45d0c:	003e0506 	br	45524 <_gp+0xfffe9dfc>
   45d10:	d9002a17 	ldw	r4,168(sp)
   45d14:	20c00044 	addi	r3,r4,1
   45d18:	003e0f06 	br	45558 <_gp+0xfffe9e30>
   45d1c:	01400184 	movi	r5,6
   45d20:	d9402a15 	stw	r5,168(sp)
   45d24:	003dff06 	br	45524 <_gp+0xfffe9dfc>
   45d28:	d8802104 	addi	r2,sp,132
   45d2c:	d8800315 	stw	r2,12(sp)
   45d30:	d8802504 	addi	r2,sp,148
   45d34:	d8800215 	stw	r2,8(sp)
   45d38:	d8802604 	addi	r2,sp,152
   45d3c:	d8800115 	stw	r2,4(sp)
   45d40:	d8802a17 	ldw	r2,168(sp)
   45d44:	d9403617 	ldw	r5,216(sp)
   45d48:	d9002d17 	ldw	r4,180(sp)
   45d4c:	d8800015 	stw	r2,0(sp)
   45d50:	01c000c4 	movi	r7,3
   45d54:	980d883a 	mov	r6,r19
   45d58:	da003d15 	stw	r8,244(sp)
   45d5c:	00466e00 	call	466e0 <_dtoa_r>
   45d60:	d8c02a17 	ldw	r3,168(sp)
   45d64:	da003d17 	ldw	r8,244(sp)
   45d68:	1021883a 	mov	r16,r2
   45d6c:	10f9883a 	add	fp,r2,r3
   45d70:	81000007 	ldb	r4,0(r16)
   45d74:	00800c04 	movi	r2,48
   45d78:	20805e26 	beq	r4,r2,45ef4 <___vfprintf_internal_r+0x2150>
   45d7c:	d8c02617 	ldw	r3,152(sp)
   45d80:	e0f9883a 	add	fp,fp,r3
   45d84:	003e0a06 	br	455b0 <_gp+0xfffe9e88>
   45d88:	00c00b44 	movi	r3,45
   45d8c:	24e0003c 	xorhi	r19,r4,32768
   45d90:	d8c02905 	stb	r3,164(sp)
   45d94:	003de906 	br	4553c <_gp+0xfffe9e14>
   45d98:	d8c03217 	ldw	r3,200(sp)
   45d9c:	00c07a0e 	bge	zero,r3,45f88 <___vfprintf_internal_r+0x21e4>
   45da0:	00800044 	movi	r2,1
   45da4:	d9003317 	ldw	r4,204(sp)
   45da8:	1105883a 	add	r2,r2,r4
   45dac:	d8802b15 	stw	r2,172(sp)
   45db0:	10004e16 	blt	r2,zero,45eec <___vfprintf_internal_r+0x2148>
   45db4:	044019c4 	movi	r17,103
   45db8:	003e2106 	br	45640 <_gp+0xfffe9f18>
   45dbc:	d9002a17 	ldw	r4,168(sp)
   45dc0:	d8802104 	addi	r2,sp,132
   45dc4:	d8800315 	stw	r2,12(sp)
   45dc8:	d9000015 	stw	r4,0(sp)
   45dcc:	d8802504 	addi	r2,sp,148
   45dd0:	d9403617 	ldw	r5,216(sp)
   45dd4:	d9002d17 	ldw	r4,180(sp)
   45dd8:	d8800215 	stw	r2,8(sp)
   45ddc:	d8802604 	addi	r2,sp,152
   45de0:	d8800115 	stw	r2,4(sp)
   45de4:	01c000c4 	movi	r7,3
   45de8:	980d883a 	mov	r6,r19
   45dec:	da003d15 	stw	r8,244(sp)
   45df0:	00466e00 	call	466e0 <_dtoa_r>
   45df4:	d8c02a17 	ldw	r3,168(sp)
   45df8:	da003d17 	ldw	r8,244(sp)
   45dfc:	1021883a 	mov	r16,r2
   45e00:	00801184 	movi	r2,70
   45e04:	80f9883a 	add	fp,r16,r3
   45e08:	88bfd926 	beq	r17,r2,45d70 <_gp+0xfffea648>
   45e0c:	003de806 	br	455b0 <_gp+0xfffe9e88>
   45e10:	d9002a17 	ldw	r4,168(sp)
   45e14:	00c04d0e 	bge	zero,r3,45f4c <___vfprintf_internal_r+0x21a8>
   45e18:	2000441e 	bne	r4,zero,45f2c <___vfprintf_internal_r+0x2188>
   45e1c:	9480004c 	andi	r18,r18,1
   45e20:	9000421e 	bne	r18,zero,45f2c <___vfprintf_internal_r+0x2188>
   45e24:	1805883a 	mov	r2,r3
   45e28:	18006f16 	blt	r3,zero,45fe8 <___vfprintf_internal_r+0x2244>
   45e2c:	d8c03217 	ldw	r3,200(sp)
   45e30:	d8c02b15 	stw	r3,172(sp)
   45e34:	003e0206 	br	45640 <_gp+0xfffe9f18>
   45e38:	df0022c4 	addi	fp,sp,139
   45e3c:	dc002a15 	stw	r16,168(sp)
   45e40:	4027883a 	mov	r19,r8
   45e44:	e021883a 	mov	r16,fp
   45e48:	b009883a 	mov	r4,r22
   45e4c:	01400284 	movi	r5,10
   45e50:	00415340 	call	41534 <__modsi3>
   45e54:	10800c04 	addi	r2,r2,48
   45e58:	843fffc4 	addi	r16,r16,-1
   45e5c:	b009883a 	mov	r4,r22
   45e60:	01400284 	movi	r5,10
   45e64:	80800005 	stb	r2,0(r16)
   45e68:	00414b00 	call	414b0 <__divsi3>
   45e6c:	102d883a 	mov	r22,r2
   45e70:	00800244 	movi	r2,9
   45e74:	15bff416 	blt	r2,r22,45e48 <_gp+0xfffea720>
   45e78:	9811883a 	mov	r8,r19
   45e7c:	b0800c04 	addi	r2,r22,48
   45e80:	8027883a 	mov	r19,r16
   45e84:	997fffc4 	addi	r5,r19,-1
   45e88:	98bfffc5 	stb	r2,-1(r19)
   45e8c:	dc002a17 	ldw	r16,168(sp)
   45e90:	2f006d2e 	bgeu	r5,fp,46048 <___vfprintf_internal_r+0x22a4>
   45e94:	d9c02384 	addi	r7,sp,142
   45e98:	3ccfc83a 	sub	r7,r7,r19
   45e9c:	d9002344 	addi	r4,sp,141
   45ea0:	e1cf883a 	add	r7,fp,r7
   45ea4:	00000106 	br	45eac <___vfprintf_internal_r+0x2108>
   45ea8:	28800003 	ldbu	r2,0(r5)
   45eac:	20800005 	stb	r2,0(r4)
   45eb0:	21000044 	addi	r4,r4,1
   45eb4:	29400044 	addi	r5,r5,1
   45eb8:	393ffb1e 	bne	r7,r4,45ea8 <_gp+0xfffea780>
   45ebc:	d8802304 	addi	r2,sp,140
   45ec0:	14c5c83a 	sub	r2,r2,r19
   45ec4:	d8c02344 	addi	r3,sp,141
   45ec8:	1885883a 	add	r2,r3,r2
   45ecc:	003f7006 	br	45c90 <_gp+0xfffea568>
   45ed0:	0005883a 	mov	r2,zero
   45ed4:	003f0f06 	br	45b14 <_gp+0xfffea3ec>
   45ed8:	d8c03217 	ldw	r3,200(sp)
   45edc:	18c00044 	addi	r3,r3,1
   45ee0:	d8c02b15 	stw	r3,172(sp)
   45ee4:	1805883a 	mov	r2,r3
   45ee8:	183fb20e 	bge	r3,zero,45db4 <_gp+0xfffea68c>
   45eec:	0005883a 	mov	r2,zero
   45ef0:	003fb006 	br	45db4 <_gp+0xfffea68c>
   45ef4:	d9003617 	ldw	r4,216(sp)
   45ef8:	000d883a 	mov	r6,zero
   45efc:	000f883a 	mov	r7,zero
   45f00:	980b883a 	mov	r5,r19
   45f04:	d8c03c15 	stw	r3,240(sp)
   45f08:	da003d15 	stw	r8,244(sp)
   45f0c:	004cff00 	call	4cff0 <__eqdf2>
   45f10:	d8c03c17 	ldw	r3,240(sp)
   45f14:	da003d17 	ldw	r8,244(sp)
   45f18:	103f9826 	beq	r2,zero,45d7c <_gp+0xfffea654>
   45f1c:	00800044 	movi	r2,1
   45f20:	10c7c83a 	sub	r3,r2,r3
   45f24:	d8c02615 	stw	r3,152(sp)
   45f28:	003f9506 	br	45d80 <_gp+0xfffea658>
   45f2c:	d9002a17 	ldw	r4,168(sp)
   45f30:	d8c03217 	ldw	r3,200(sp)
   45f34:	20800044 	addi	r2,r4,1
   45f38:	1885883a 	add	r2,r3,r2
   45f3c:	d8802b15 	stw	r2,172(sp)
   45f40:	103dbf0e 	bge	r2,zero,45640 <_gp+0xfffe9f18>
   45f44:	0005883a 	mov	r2,zero
   45f48:	003dbd06 	br	45640 <_gp+0xfffe9f18>
   45f4c:	2000201e 	bne	r4,zero,45fd0 <___vfprintf_internal_r+0x222c>
   45f50:	9480004c 	andi	r18,r18,1
   45f54:	90001e1e 	bne	r18,zero,45fd0 <___vfprintf_internal_r+0x222c>
   45f58:	00800044 	movi	r2,1
   45f5c:	d8802b15 	stw	r2,172(sp)
   45f60:	003db706 	br	45640 <_gp+0xfffe9f18>
   45f64:	00800b44 	movi	r2,45
   45f68:	05adc83a 	sub	r22,zero,r22
   45f6c:	d8802305 	stb	r2,140(sp)
   45f70:	003f3f06 	br	45c70 <_gp+0xfffea548>
   45f74:	0005883a 	mov	r2,zero
   45f78:	003f5206 	br	45cc4 <_gp+0xfffea59c>
   45f7c:	90a4703a 	and	r18,r18,r2
   45f80:	903f4e26 	beq	r18,zero,45cbc <_gp+0xfffea594>
   45f84:	003f4a06 	br	45cb0 <_gp+0xfffea588>
   45f88:	00800084 	movi	r2,2
   45f8c:	10c5c83a 	sub	r2,r2,r3
   45f90:	003f8406 	br	45da4 <_gp+0xfffea67c>
   45f94:	d9402e17 	ldw	r5,184(sp)
   45f98:	d9002e17 	ldw	r4,184(sp)
   45f9c:	ac400043 	ldbu	r17,1(r21)
   45fa0:	29400017 	ldw	r5,0(r5)
   45fa4:	20800104 	addi	r2,r4,4
   45fa8:	d8802e15 	stw	r2,184(sp)
   45fac:	d9402a15 	stw	r5,168(sp)
   45fb0:	182b883a 	mov	r21,r3
   45fb4:	283e7b0e 	bge	r5,zero,459a4 <_gp+0xfffea27c>
   45fb8:	8c403fcc 	andi	r17,r17,255
   45fbc:	017fffc4 	movi	r5,-1
   45fc0:	8c40201c 	xori	r17,r17,128
   45fc4:	d9402a15 	stw	r5,168(sp)
   45fc8:	8c7fe004 	addi	r17,r17,-128
   45fcc:	0037d706 	br	43f2c <_gp+0xfffe8804>
   45fd0:	d8c02a17 	ldw	r3,168(sp)
   45fd4:	18c00084 	addi	r3,r3,2
   45fd8:	d8c02b15 	stw	r3,172(sp)
   45fdc:	1805883a 	mov	r2,r3
   45fe0:	183d970e 	bge	r3,zero,45640 <_gp+0xfffe9f18>
   45fe4:	003fd706 	br	45f44 <_gp+0xfffea81c>
   45fe8:	0005883a 	mov	r2,zero
   45fec:	003f8f06 	br	45e2c <_gp+0xfffea704>
   45ff0:	9080004c 	andi	r2,r18,1
   45ff4:	103f821e 	bne	r2,zero,45e00 <_gp+0xfffea6d8>
   45ff8:	d8802117 	ldw	r2,132(sp)
   45ffc:	1405c83a 	sub	r2,r2,r16
   46000:	d8803315 	stw	r2,204(sp)
   46004:	b47ef426 	beq	r22,r17,45bd8 <_gp+0xfffea4b0>
   46008:	dd802617 	ldw	r22,152(sp)
   4600c:	003f1206 	br	45c58 <_gp+0xfffea530>
   46010:	d8c02b03 	ldbu	r3,172(sp)
   46014:	d8c02785 	stb	r3,158(sp)
   46018:	0038df06 	br	44398 <_gp+0xfffe8c70>
   4601c:	d8c02b03 	ldbu	r3,172(sp)
   46020:	d8c02785 	stb	r3,158(sp)
   46024:	0038aa06 	br	442d0 <_gp+0xfffe8ba8>
   46028:	d8c02b03 	ldbu	r3,172(sp)
   4602c:	d8c02785 	stb	r3,158(sp)
   46030:	003a4306 	br	44940 <_gp+0xfffe9218>
   46034:	d8c02b03 	ldbu	r3,172(sp)
   46038:	d8c02785 	stb	r3,158(sp)
   4603c:	003af506 	br	44c14 <_gp+0xfffe94ec>
   46040:	0005883a 	mov	r2,zero
   46044:	003d7b06 	br	45634 <_gp+0xfffe9f0c>
   46048:	d8802344 	addi	r2,sp,141
   4604c:	003f1006 	br	45c90 <_gp+0xfffea568>
   46050:	d8c02b03 	ldbu	r3,172(sp)
   46054:	d8c02785 	stb	r3,158(sp)
   46058:	0038fd06 	br	44450 <_gp+0xfffe8d28>
   4605c:	d8c02b03 	ldbu	r3,172(sp)
   46060:	d8c02785 	stb	r3,158(sp)
   46064:	003a9706 	br	44ac4 <_gp+0xfffe939c>
   46068:	d8c02b03 	ldbu	r3,172(sp)
   4606c:	d8c02785 	stb	r3,158(sp)
   46070:	003a1806 	br	448d4 <_gp+0xfffe91ac>
   46074:	d8c02b03 	ldbu	r3,172(sp)
   46078:	d8c02785 	stb	r3,158(sp)
   4607c:	003abe06 	br	44b78 <_gp+0xfffe9450>

00046080 <__vfprintf_internal>:
   46080:	00800174 	movhi	r2,5
   46084:	108dcb04 	addi	r2,r2,14124
   46088:	300f883a 	mov	r7,r6
   4608c:	280d883a 	mov	r6,r5
   46090:	200b883a 	mov	r5,r4
   46094:	11000017 	ldw	r4,0(r2)
   46098:	0043da41 	jmpi	43da4 <___vfprintf_internal_r>

0004609c <__sbprintf>:
   4609c:	2880030b 	ldhu	r2,12(r5)
   460a0:	2ac01917 	ldw	r11,100(r5)
   460a4:	2a80038b 	ldhu	r10,14(r5)
   460a8:	2a400717 	ldw	r9,28(r5)
   460ac:	2a000917 	ldw	r8,36(r5)
   460b0:	defee204 	addi	sp,sp,-1144
   460b4:	00c10004 	movi	r3,1024
   460b8:	dc011a15 	stw	r16,1128(sp)
   460bc:	10bfff4c 	andi	r2,r2,65533
   460c0:	2821883a 	mov	r16,r5
   460c4:	d8cb883a 	add	r5,sp,r3
   460c8:	dc811c15 	stw	r18,1136(sp)
   460cc:	dc411b15 	stw	r17,1132(sp)
   460d0:	dfc11d15 	stw	ra,1140(sp)
   460d4:	2025883a 	mov	r18,r4
   460d8:	d881030d 	sth	r2,1036(sp)
   460dc:	dac11915 	stw	r11,1124(sp)
   460e0:	da81038d 	sth	r10,1038(sp)
   460e4:	da410715 	stw	r9,1052(sp)
   460e8:	da010915 	stw	r8,1060(sp)
   460ec:	dec10015 	stw	sp,1024(sp)
   460f0:	dec10415 	stw	sp,1040(sp)
   460f4:	d8c10215 	stw	r3,1032(sp)
   460f8:	d8c10515 	stw	r3,1044(sp)
   460fc:	d8010615 	stw	zero,1048(sp)
   46100:	0043da40 	call	43da4 <___vfprintf_internal_r>
   46104:	1023883a 	mov	r17,r2
   46108:	10000416 	blt	r2,zero,4611c <__sbprintf+0x80>
   4610c:	d9410004 	addi	r5,sp,1024
   46110:	9009883a 	mov	r4,r18
   46114:	00419f80 	call	419f8 <_fflush_r>
   46118:	10000d1e 	bne	r2,zero,46150 <__sbprintf+0xb4>
   4611c:	d881030b 	ldhu	r2,1036(sp)
   46120:	1080100c 	andi	r2,r2,64
   46124:	10000326 	beq	r2,zero,46134 <__sbprintf+0x98>
   46128:	8080030b 	ldhu	r2,12(r16)
   4612c:	10801014 	ori	r2,r2,64
   46130:	8080030d 	sth	r2,12(r16)
   46134:	8805883a 	mov	r2,r17
   46138:	dfc11d17 	ldw	ra,1140(sp)
   4613c:	dc811c17 	ldw	r18,1136(sp)
   46140:	dc411b17 	ldw	r17,1132(sp)
   46144:	dc011a17 	ldw	r16,1128(sp)
   46148:	dec11e04 	addi	sp,sp,1144
   4614c:	f800283a 	ret
   46150:	047fffc4 	movi	r17,-1
   46154:	003ff106 	br	4611c <_gp+0xfffea9f4>

00046158 <__swbuf_r>:
   46158:	defffb04 	addi	sp,sp,-20
   4615c:	dcc00315 	stw	r19,12(sp)
   46160:	dc800215 	stw	r18,8(sp)
   46164:	dc000015 	stw	r16,0(sp)
   46168:	dfc00415 	stw	ra,16(sp)
   4616c:	dc400115 	stw	r17,4(sp)
   46170:	2025883a 	mov	r18,r4
   46174:	2827883a 	mov	r19,r5
   46178:	3021883a 	mov	r16,r6
   4617c:	20000226 	beq	r4,zero,46188 <__swbuf_r+0x30>
   46180:	20800e17 	ldw	r2,56(r4)
   46184:	10004226 	beq	r2,zero,46290 <__swbuf_r+0x138>
   46188:	80800617 	ldw	r2,24(r16)
   4618c:	8100030b 	ldhu	r4,12(r16)
   46190:	80800215 	stw	r2,8(r16)
   46194:	2080020c 	andi	r2,r4,8
   46198:	10003626 	beq	r2,zero,46274 <__swbuf_r+0x11c>
   4619c:	80c00417 	ldw	r3,16(r16)
   461a0:	18003426 	beq	r3,zero,46274 <__swbuf_r+0x11c>
   461a4:	2088000c 	andi	r2,r4,8192
   461a8:	9c403fcc 	andi	r17,r19,255
   461ac:	10001a26 	beq	r2,zero,46218 <__swbuf_r+0xc0>
   461b0:	80800017 	ldw	r2,0(r16)
   461b4:	81000517 	ldw	r4,20(r16)
   461b8:	10c7c83a 	sub	r3,r2,r3
   461bc:	1900200e 	bge	r3,r4,46240 <__swbuf_r+0xe8>
   461c0:	18c00044 	addi	r3,r3,1
   461c4:	81000217 	ldw	r4,8(r16)
   461c8:	11400044 	addi	r5,r2,1
   461cc:	81400015 	stw	r5,0(r16)
   461d0:	213fffc4 	addi	r4,r4,-1
   461d4:	81000215 	stw	r4,8(r16)
   461d8:	14c00005 	stb	r19,0(r2)
   461dc:	80800517 	ldw	r2,20(r16)
   461e0:	10c01e26 	beq	r2,r3,4625c <__swbuf_r+0x104>
   461e4:	8080030b 	ldhu	r2,12(r16)
   461e8:	1080004c 	andi	r2,r2,1
   461ec:	10000226 	beq	r2,zero,461f8 <__swbuf_r+0xa0>
   461f0:	00800284 	movi	r2,10
   461f4:	88801926 	beq	r17,r2,4625c <__swbuf_r+0x104>
   461f8:	8805883a 	mov	r2,r17
   461fc:	dfc00417 	ldw	ra,16(sp)
   46200:	dcc00317 	ldw	r19,12(sp)
   46204:	dc800217 	ldw	r18,8(sp)
   46208:	dc400117 	ldw	r17,4(sp)
   4620c:	dc000017 	ldw	r16,0(sp)
   46210:	dec00504 	addi	sp,sp,20
   46214:	f800283a 	ret
   46218:	81401917 	ldw	r5,100(r16)
   4621c:	00b7ffc4 	movi	r2,-8193
   46220:	21080014 	ori	r4,r4,8192
   46224:	2884703a 	and	r2,r5,r2
   46228:	80801915 	stw	r2,100(r16)
   4622c:	80800017 	ldw	r2,0(r16)
   46230:	8100030d 	sth	r4,12(r16)
   46234:	81000517 	ldw	r4,20(r16)
   46238:	10c7c83a 	sub	r3,r2,r3
   4623c:	193fe016 	blt	r3,r4,461c0 <_gp+0xfffeaa98>
   46240:	800b883a 	mov	r5,r16
   46244:	9009883a 	mov	r4,r18
   46248:	00419f80 	call	419f8 <_fflush_r>
   4624c:	1000071e 	bne	r2,zero,4626c <__swbuf_r+0x114>
   46250:	80800017 	ldw	r2,0(r16)
   46254:	00c00044 	movi	r3,1
   46258:	003fda06 	br	461c4 <_gp+0xfffeaa9c>
   4625c:	800b883a 	mov	r5,r16
   46260:	9009883a 	mov	r4,r18
   46264:	00419f80 	call	419f8 <_fflush_r>
   46268:	103fe326 	beq	r2,zero,461f8 <_gp+0xfffeaad0>
   4626c:	00bfffc4 	movi	r2,-1
   46270:	003fe206 	br	461fc <_gp+0xfffeaad4>
   46274:	800b883a 	mov	r5,r16
   46278:	9009883a 	mov	r4,r18
   4627c:	00463100 	call	46310 <__swsetup_r>
   46280:	103ffa1e 	bne	r2,zero,4626c <_gp+0xfffeab44>
   46284:	8100030b 	ldhu	r4,12(r16)
   46288:	80c00417 	ldw	r3,16(r16)
   4628c:	003fc506 	br	461a4 <_gp+0xfffeaa7c>
   46290:	0041de40 	call	41de4 <__sinit>
   46294:	003fbc06 	br	46188 <_gp+0xfffeaa60>

00046298 <__swbuf>:
   46298:	00800174 	movhi	r2,5
   4629c:	108dcb04 	addi	r2,r2,14124
   462a0:	280d883a 	mov	r6,r5
   462a4:	200b883a 	mov	r5,r4
   462a8:	11000017 	ldw	r4,0(r2)
   462ac:	00461581 	jmpi	46158 <__swbuf_r>

000462b0 <_write_r>:
   462b0:	defffd04 	addi	sp,sp,-12
   462b4:	2805883a 	mov	r2,r5
   462b8:	dc000015 	stw	r16,0(sp)
   462bc:	04000174 	movhi	r16,5
   462c0:	dc400115 	stw	r17,4(sp)
   462c4:	300b883a 	mov	r5,r6
   462c8:	8414ea04 	addi	r16,r16,21416
   462cc:	2023883a 	mov	r17,r4
   462d0:	380d883a 	mov	r6,r7
   462d4:	1009883a 	mov	r4,r2
   462d8:	dfc00215 	stw	ra,8(sp)
   462dc:	80000015 	stw	zero,0(r16)
   462e0:	004f0d80 	call	4f0d8 <write>
   462e4:	00ffffc4 	movi	r3,-1
   462e8:	10c00526 	beq	r2,r3,46300 <_write_r+0x50>
   462ec:	dfc00217 	ldw	ra,8(sp)
   462f0:	dc400117 	ldw	r17,4(sp)
   462f4:	dc000017 	ldw	r16,0(sp)
   462f8:	dec00304 	addi	sp,sp,12
   462fc:	f800283a 	ret
   46300:	80c00017 	ldw	r3,0(r16)
   46304:	183ff926 	beq	r3,zero,462ec <_gp+0xfffeabc4>
   46308:	88c00015 	stw	r3,0(r17)
   4630c:	003ff706 	br	462ec <_gp+0xfffeabc4>

00046310 <__swsetup_r>:
   46310:	00800174 	movhi	r2,5
   46314:	defffd04 	addi	sp,sp,-12
   46318:	108dcb04 	addi	r2,r2,14124
   4631c:	dc400115 	stw	r17,4(sp)
   46320:	2023883a 	mov	r17,r4
   46324:	11000017 	ldw	r4,0(r2)
   46328:	dc000015 	stw	r16,0(sp)
   4632c:	dfc00215 	stw	ra,8(sp)
   46330:	2821883a 	mov	r16,r5
   46334:	20000226 	beq	r4,zero,46340 <__swsetup_r+0x30>
   46338:	20800e17 	ldw	r2,56(r4)
   4633c:	10003126 	beq	r2,zero,46404 <__swsetup_r+0xf4>
   46340:	8080030b 	ldhu	r2,12(r16)
   46344:	10c0020c 	andi	r3,r2,8
   46348:	1009883a 	mov	r4,r2
   4634c:	18000f26 	beq	r3,zero,4638c <__swsetup_r+0x7c>
   46350:	80c00417 	ldw	r3,16(r16)
   46354:	18001526 	beq	r3,zero,463ac <__swsetup_r+0x9c>
   46358:	1100004c 	andi	r4,r2,1
   4635c:	20001c1e 	bne	r4,zero,463d0 <__swsetup_r+0xc0>
   46360:	1080008c 	andi	r2,r2,2
   46364:	1000291e 	bne	r2,zero,4640c <__swsetup_r+0xfc>
   46368:	80800517 	ldw	r2,20(r16)
   4636c:	80800215 	stw	r2,8(r16)
   46370:	18001c26 	beq	r3,zero,463e4 <__swsetup_r+0xd4>
   46374:	0005883a 	mov	r2,zero
   46378:	dfc00217 	ldw	ra,8(sp)
   4637c:	dc400117 	ldw	r17,4(sp)
   46380:	dc000017 	ldw	r16,0(sp)
   46384:	dec00304 	addi	sp,sp,12
   46388:	f800283a 	ret
   4638c:	2080040c 	andi	r2,r4,16
   46390:	10002e26 	beq	r2,zero,4644c <__swsetup_r+0x13c>
   46394:	2080010c 	andi	r2,r4,4
   46398:	10001e1e 	bne	r2,zero,46414 <__swsetup_r+0x104>
   4639c:	80c00417 	ldw	r3,16(r16)
   463a0:	20800214 	ori	r2,r4,8
   463a4:	8080030d 	sth	r2,12(r16)
   463a8:	183feb1e 	bne	r3,zero,46358 <_gp+0xfffeac30>
   463ac:	1100a00c 	andi	r4,r2,640
   463b0:	01408004 	movi	r5,512
   463b4:	217fe826 	beq	r4,r5,46358 <_gp+0xfffeac30>
   463b8:	800b883a 	mov	r5,r16
   463bc:	8809883a 	mov	r4,r17
   463c0:	0042a780 	call	42a78 <__smakebuf_r>
   463c4:	8080030b 	ldhu	r2,12(r16)
   463c8:	80c00417 	ldw	r3,16(r16)
   463cc:	003fe206 	br	46358 <_gp+0xfffeac30>
   463d0:	80800517 	ldw	r2,20(r16)
   463d4:	80000215 	stw	zero,8(r16)
   463d8:	0085c83a 	sub	r2,zero,r2
   463dc:	80800615 	stw	r2,24(r16)
   463e0:	183fe41e 	bne	r3,zero,46374 <_gp+0xfffeac4c>
   463e4:	80c0030b 	ldhu	r3,12(r16)
   463e8:	0005883a 	mov	r2,zero
   463ec:	1900200c 	andi	r4,r3,128
   463f0:	203fe126 	beq	r4,zero,46378 <_gp+0xfffeac50>
   463f4:	18c01014 	ori	r3,r3,64
   463f8:	80c0030d 	sth	r3,12(r16)
   463fc:	00bfffc4 	movi	r2,-1
   46400:	003fdd06 	br	46378 <_gp+0xfffeac50>
   46404:	0041de40 	call	41de4 <__sinit>
   46408:	003fcd06 	br	46340 <_gp+0xfffeac18>
   4640c:	0005883a 	mov	r2,zero
   46410:	003fd606 	br	4636c <_gp+0xfffeac44>
   46414:	81400c17 	ldw	r5,48(r16)
   46418:	28000626 	beq	r5,zero,46434 <__swsetup_r+0x124>
   4641c:	80801004 	addi	r2,r16,64
   46420:	28800326 	beq	r5,r2,46430 <__swsetup_r+0x120>
   46424:	8809883a 	mov	r4,r17
   46428:	00421040 	call	42104 <_free_r>
   4642c:	8100030b 	ldhu	r4,12(r16)
   46430:	80000c15 	stw	zero,48(r16)
   46434:	80c00417 	ldw	r3,16(r16)
   46438:	00bff6c4 	movi	r2,-37
   4643c:	1108703a 	and	r4,r2,r4
   46440:	80000115 	stw	zero,4(r16)
   46444:	80c00015 	stw	r3,0(r16)
   46448:	003fd506 	br	463a0 <_gp+0xfffeac78>
   4644c:	00800244 	movi	r2,9
   46450:	88800015 	stw	r2,0(r17)
   46454:	20801014 	ori	r2,r4,64
   46458:	8080030d 	sth	r2,12(r16)
   4645c:	00bfffc4 	movi	r2,-1
   46460:	003fc506 	br	46378 <_gp+0xfffeac50>

00046464 <_close_r>:
   46464:	defffd04 	addi	sp,sp,-12
   46468:	dc000015 	stw	r16,0(sp)
   4646c:	04000174 	movhi	r16,5
   46470:	dc400115 	stw	r17,4(sp)
   46474:	8414ea04 	addi	r16,r16,21416
   46478:	2023883a 	mov	r17,r4
   4647c:	2809883a 	mov	r4,r5
   46480:	dfc00215 	stw	ra,8(sp)
   46484:	80000015 	stw	zero,0(r16)
   46488:	004e5480 	call	4e548 <close>
   4648c:	00ffffc4 	movi	r3,-1
   46490:	10c00526 	beq	r2,r3,464a8 <_close_r+0x44>
   46494:	dfc00217 	ldw	ra,8(sp)
   46498:	dc400117 	ldw	r17,4(sp)
   4649c:	dc000017 	ldw	r16,0(sp)
   464a0:	dec00304 	addi	sp,sp,12
   464a4:	f800283a 	ret
   464a8:	80c00017 	ldw	r3,0(r16)
   464ac:	183ff926 	beq	r3,zero,46494 <_gp+0xfffead6c>
   464b0:	88c00015 	stw	r3,0(r17)
   464b4:	003ff706 	br	46494 <_gp+0xfffead6c>

000464b8 <quorem>:
   464b8:	defff204 	addi	sp,sp,-56
   464bc:	ddc00b15 	stw	r23,44(sp)
   464c0:	20800417 	ldw	r2,16(r4)
   464c4:	2dc00417 	ldw	r23,16(r5)
   464c8:	dfc00d15 	stw	ra,52(sp)
   464cc:	df000c15 	stw	fp,48(sp)
   464d0:	dd800a15 	stw	r22,40(sp)
   464d4:	dd400915 	stw	r21,36(sp)
   464d8:	dd000815 	stw	r20,32(sp)
   464dc:	dcc00715 	stw	r19,28(sp)
   464e0:	dc800615 	stw	r18,24(sp)
   464e4:	dc400515 	stw	r17,20(sp)
   464e8:	dc000415 	stw	r16,16(sp)
   464ec:	15c07a16 	blt	r2,r23,466d8 <quorem+0x220>
   464f0:	bdffffc4 	addi	r23,r23,-1
   464f4:	bde9883a 	add	r20,r23,r23
   464f8:	28c00504 	addi	r3,r5,20
   464fc:	a529883a 	add	r20,r20,r20
   46500:	1d39883a 	add	fp,r3,r20
   46504:	24c00504 	addi	r19,r4,20
   46508:	d9400215 	stw	r5,8(sp)
   4650c:	9d29883a 	add	r20,r19,r20
   46510:	e1400017 	ldw	r5,0(fp)
   46514:	d9000015 	stw	r4,0(sp)
   46518:	a1000017 	ldw	r4,0(r20)
   4651c:	29400044 	addi	r5,r5,1
   46520:	d8c00115 	stw	r3,4(sp)
   46524:	dd000315 	stw	r20,12(sp)
   46528:	00415a80 	call	415a8 <__udivsi3>
   4652c:	1025883a 	mov	r18,r2
   46530:	10003026 	beq	r2,zero,465f4 <quorem+0x13c>
   46534:	dc400117 	ldw	r17,4(sp)
   46538:	9829883a 	mov	r20,r19
   4653c:	002d883a 	mov	r22,zero
   46540:	0021883a 	mov	r16,zero
   46544:	8d400017 	ldw	r21,0(r17)
   46548:	900b883a 	mov	r5,r18
   4654c:	8c400104 	addi	r17,r17,4
   46550:	a93fffcc 	andi	r4,r21,65535
   46554:	00416640 	call	41664 <__mulsi3>
   46558:	a808d43a 	srli	r4,r21,16
   4655c:	900b883a 	mov	r5,r18
   46560:	15ad883a 	add	r22,r2,r22
   46564:	00416640 	call	41664 <__mulsi3>
   46568:	a1000017 	ldw	r4,0(r20)
   4656c:	b00cd43a 	srli	r6,r22,16
   46570:	b0ffffcc 	andi	r3,r22,65535
   46574:	217fffcc 	andi	r5,r4,65535
   46578:	2c21883a 	add	r16,r5,r16
   4657c:	80c7c83a 	sub	r3,r16,r3
   46580:	2008d43a 	srli	r4,r4,16
   46584:	1185883a 	add	r2,r2,r6
   46588:	1821d43a 	srai	r16,r3,16
   4658c:	117fffcc 	andi	r5,r2,65535
   46590:	2149c83a 	sub	r4,r4,r5
   46594:	2421883a 	add	r16,r4,r16
   46598:	8008943a 	slli	r4,r16,16
   4659c:	18ffffcc 	andi	r3,r3,65535
   465a0:	102cd43a 	srli	r22,r2,16
   465a4:	20c8b03a 	or	r4,r4,r3
   465a8:	a1000015 	stw	r4,0(r20)
   465ac:	8021d43a 	srai	r16,r16,16
   465b0:	a5000104 	addi	r20,r20,4
   465b4:	e47fe32e 	bgeu	fp,r17,46544 <_gp+0xfffeae1c>
   465b8:	d8c00317 	ldw	r3,12(sp)
   465bc:	18800017 	ldw	r2,0(r3)
   465c0:	10000c1e 	bne	r2,zero,465f4 <quorem+0x13c>
   465c4:	18bfff04 	addi	r2,r3,-4
   465c8:	9880082e 	bgeu	r19,r2,465ec <quorem+0x134>
   465cc:	18ffff17 	ldw	r3,-4(r3)
   465d0:	18000326 	beq	r3,zero,465e0 <quorem+0x128>
   465d4:	00000506 	br	465ec <quorem+0x134>
   465d8:	10c00017 	ldw	r3,0(r2)
   465dc:	1800031e 	bne	r3,zero,465ec <quorem+0x134>
   465e0:	10bfff04 	addi	r2,r2,-4
   465e4:	bdffffc4 	addi	r23,r23,-1
   465e8:	98bffb36 	bltu	r19,r2,465d8 <_gp+0xfffeaeb0>
   465ec:	d8c00017 	ldw	r3,0(sp)
   465f0:	1dc00415 	stw	r23,16(r3)
   465f4:	d9400217 	ldw	r5,8(sp)
   465f8:	d9000017 	ldw	r4,0(sp)
   465fc:	00491780 	call	49178 <__mcmp>
   46600:	10002816 	blt	r2,zero,466a4 <quorem+0x1ec>
   46604:	dc400117 	ldw	r17,4(sp)
   46608:	94800044 	addi	r18,r18,1
   4660c:	980d883a 	mov	r6,r19
   46610:	0007883a 	mov	r3,zero
   46614:	31000017 	ldw	r4,0(r6)
   46618:	89400017 	ldw	r5,0(r17)
   4661c:	31800104 	addi	r6,r6,4
   46620:	20bfffcc 	andi	r2,r4,65535
   46624:	10c7883a 	add	r3,r2,r3
   46628:	28bfffcc 	andi	r2,r5,65535
   4662c:	1885c83a 	sub	r2,r3,r2
   46630:	280ad43a 	srli	r5,r5,16
   46634:	2008d43a 	srli	r4,r4,16
   46638:	1007d43a 	srai	r3,r2,16
   4663c:	10bfffcc 	andi	r2,r2,65535
   46640:	2149c83a 	sub	r4,r4,r5
   46644:	20c9883a 	add	r4,r4,r3
   46648:	200a943a 	slli	r5,r4,16
   4664c:	8c400104 	addi	r17,r17,4
   46650:	2007d43a 	srai	r3,r4,16
   46654:	2884b03a 	or	r2,r5,r2
   46658:	30bfff15 	stw	r2,-4(r6)
   4665c:	e47fed2e 	bgeu	fp,r17,46614 <_gp+0xfffeaeec>
   46660:	bdc5883a 	add	r2,r23,r23
   46664:	1085883a 	add	r2,r2,r2
   46668:	9887883a 	add	r3,r19,r2
   4666c:	18800017 	ldw	r2,0(r3)
   46670:	10000c1e 	bne	r2,zero,466a4 <quorem+0x1ec>
   46674:	18bfff04 	addi	r2,r3,-4
   46678:	9880082e 	bgeu	r19,r2,4669c <quorem+0x1e4>
   4667c:	18ffff17 	ldw	r3,-4(r3)
   46680:	18000326 	beq	r3,zero,46690 <quorem+0x1d8>
   46684:	00000506 	br	4669c <quorem+0x1e4>
   46688:	10c00017 	ldw	r3,0(r2)
   4668c:	1800031e 	bne	r3,zero,4669c <quorem+0x1e4>
   46690:	10bfff04 	addi	r2,r2,-4
   46694:	bdffffc4 	addi	r23,r23,-1
   46698:	98bffb36 	bltu	r19,r2,46688 <_gp+0xfffeaf60>
   4669c:	d8c00017 	ldw	r3,0(sp)
   466a0:	1dc00415 	stw	r23,16(r3)
   466a4:	9005883a 	mov	r2,r18
   466a8:	dfc00d17 	ldw	ra,52(sp)
   466ac:	df000c17 	ldw	fp,48(sp)
   466b0:	ddc00b17 	ldw	r23,44(sp)
   466b4:	dd800a17 	ldw	r22,40(sp)
   466b8:	dd400917 	ldw	r21,36(sp)
   466bc:	dd000817 	ldw	r20,32(sp)
   466c0:	dcc00717 	ldw	r19,28(sp)
   466c4:	dc800617 	ldw	r18,24(sp)
   466c8:	dc400517 	ldw	r17,20(sp)
   466cc:	dc000417 	ldw	r16,16(sp)
   466d0:	dec00e04 	addi	sp,sp,56
   466d4:	f800283a 	ret
   466d8:	0005883a 	mov	r2,zero
   466dc:	003ff206 	br	466a8 <_gp+0xfffeaf80>

000466e0 <_dtoa_r>:
   466e0:	20801017 	ldw	r2,64(r4)
   466e4:	deffde04 	addi	sp,sp,-136
   466e8:	df002015 	stw	fp,128(sp)
   466ec:	dcc01b15 	stw	r19,108(sp)
   466f0:	dc801a15 	stw	r18,104(sp)
   466f4:	dc401915 	stw	r17,100(sp)
   466f8:	dc001815 	stw	r16,96(sp)
   466fc:	dfc02115 	stw	ra,132(sp)
   46700:	ddc01f15 	stw	r23,124(sp)
   46704:	dd801e15 	stw	r22,120(sp)
   46708:	dd401d15 	stw	r21,116(sp)
   4670c:	dd001c15 	stw	r20,112(sp)
   46710:	d9c00315 	stw	r7,12(sp)
   46714:	2039883a 	mov	fp,r4
   46718:	3023883a 	mov	r17,r6
   4671c:	2825883a 	mov	r18,r5
   46720:	dc002417 	ldw	r16,144(sp)
   46724:	3027883a 	mov	r19,r6
   46728:	10000826 	beq	r2,zero,4674c <_dtoa_r+0x6c>
   4672c:	21801117 	ldw	r6,68(r4)
   46730:	00c00044 	movi	r3,1
   46734:	100b883a 	mov	r5,r2
   46738:	1986983a 	sll	r3,r3,r6
   4673c:	11800115 	stw	r6,4(r2)
   46740:	10c00215 	stw	r3,8(r2)
   46744:	004889c0 	call	4889c <_Bfree>
   46748:	e0001015 	stw	zero,64(fp)
   4674c:	88002e16 	blt	r17,zero,46808 <_dtoa_r+0x128>
   46750:	80000015 	stw	zero,0(r16)
   46754:	889ffc2c 	andhi	r2,r17,32752
   46758:	00dffc34 	movhi	r3,32752
   4675c:	10c01c26 	beq	r2,r3,467d0 <_dtoa_r+0xf0>
   46760:	000d883a 	mov	r6,zero
   46764:	000f883a 	mov	r7,zero
   46768:	9009883a 	mov	r4,r18
   4676c:	980b883a 	mov	r5,r19
   46770:	004cff00 	call	4cff0 <__eqdf2>
   46774:	10002b1e 	bne	r2,zero,46824 <_dtoa_r+0x144>
   46778:	d9c02317 	ldw	r7,140(sp)
   4677c:	00800044 	movi	r2,1
   46780:	38800015 	stw	r2,0(r7)
   46784:	d8802517 	ldw	r2,148(sp)
   46788:	10019e26 	beq	r2,zero,46e04 <_dtoa_r+0x724>
   4678c:	d8c02517 	ldw	r3,148(sp)
   46790:	00800174 	movhi	r2,5
   46794:	10867d44 	addi	r2,r2,6645
   46798:	18800015 	stw	r2,0(r3)
   4679c:	10bfffc4 	addi	r2,r2,-1
   467a0:	dfc02117 	ldw	ra,132(sp)
   467a4:	df002017 	ldw	fp,128(sp)
   467a8:	ddc01f17 	ldw	r23,124(sp)
   467ac:	dd801e17 	ldw	r22,120(sp)
   467b0:	dd401d17 	ldw	r21,116(sp)
   467b4:	dd001c17 	ldw	r20,112(sp)
   467b8:	dcc01b17 	ldw	r19,108(sp)
   467bc:	dc801a17 	ldw	r18,104(sp)
   467c0:	dc401917 	ldw	r17,100(sp)
   467c4:	dc001817 	ldw	r16,96(sp)
   467c8:	dec02204 	addi	sp,sp,136
   467cc:	f800283a 	ret
   467d0:	d8c02317 	ldw	r3,140(sp)
   467d4:	0089c3c4 	movi	r2,9999
   467d8:	18800015 	stw	r2,0(r3)
   467dc:	90017726 	beq	r18,zero,46dbc <_dtoa_r+0x6dc>
   467e0:	00800174 	movhi	r2,5
   467e4:	10868904 	addi	r2,r2,6692
   467e8:	d9002517 	ldw	r4,148(sp)
   467ec:	203fec26 	beq	r4,zero,467a0 <_gp+0xfffeb078>
   467f0:	10c000c7 	ldb	r3,3(r2)
   467f4:	1801781e 	bne	r3,zero,46dd8 <_dtoa_r+0x6f8>
   467f8:	10c000c4 	addi	r3,r2,3
   467fc:	d9802517 	ldw	r6,148(sp)
   46800:	30c00015 	stw	r3,0(r6)
   46804:	003fe606 	br	467a0 <_gp+0xfffeb078>
   46808:	04e00034 	movhi	r19,32768
   4680c:	9cffffc4 	addi	r19,r19,-1
   46810:	00800044 	movi	r2,1
   46814:	8ce6703a 	and	r19,r17,r19
   46818:	80800015 	stw	r2,0(r16)
   4681c:	9823883a 	mov	r17,r19
   46820:	003fcc06 	br	46754 <_gp+0xfffeb02c>
   46824:	d8800204 	addi	r2,sp,8
   46828:	d8800015 	stw	r2,0(sp)
   4682c:	d9c00104 	addi	r7,sp,4
   46830:	900b883a 	mov	r5,r18
   46834:	980d883a 	mov	r6,r19
   46838:	e009883a 	mov	r4,fp
   4683c:	8820d53a 	srli	r16,r17,20
   46840:	00495440 	call	49544 <__d2b>
   46844:	d8800915 	stw	r2,36(sp)
   46848:	8001651e 	bne	r16,zero,46de0 <_dtoa_r+0x700>
   4684c:	dd800217 	ldw	r22,8(sp)
   46850:	dc000117 	ldw	r16,4(sp)
   46854:	00800804 	movi	r2,32
   46858:	b421883a 	add	r16,r22,r16
   4685c:	80c10c84 	addi	r3,r16,1074
   46860:	10c2d10e 	bge	r2,r3,473a8 <_dtoa_r+0xcc8>
   46864:	00801004 	movi	r2,64
   46868:	81010484 	addi	r4,r16,1042
   4686c:	10c7c83a 	sub	r3,r2,r3
   46870:	9108d83a 	srl	r4,r18,r4
   46874:	88e2983a 	sll	r17,r17,r3
   46878:	2448b03a 	or	r4,r4,r17
   4687c:	00413a40 	call	413a4 <__floatunsidf>
   46880:	017f8434 	movhi	r5,65040
   46884:	01800044 	movi	r6,1
   46888:	1009883a 	mov	r4,r2
   4688c:	194b883a 	add	r5,r3,r5
   46890:	843fffc4 	addi	r16,r16,-1
   46894:	d9801115 	stw	r6,68(sp)
   46898:	000d883a 	mov	r6,zero
   4689c:	01cffe34 	movhi	r7,16376
   468a0:	004dab40 	call	4dab4 <__subdf3>
   468a4:	0198dbf4 	movhi	r6,25455
   468a8:	01cff4f4 	movhi	r7,16339
   468ac:	3190d844 	addi	r6,r6,17249
   468b0:	39e1e9c4 	addi	r7,r7,-30809
   468b4:	1009883a 	mov	r4,r2
   468b8:	180b883a 	mov	r5,r3
   468bc:	004d2480 	call	4d248 <__muldf3>
   468c0:	01a2d874 	movhi	r6,35681
   468c4:	01cff1f4 	movhi	r7,16327
   468c8:	31b22cc4 	addi	r6,r6,-14157
   468cc:	39e28a04 	addi	r7,r7,-30168
   468d0:	180b883a 	mov	r5,r3
   468d4:	1009883a 	mov	r4,r2
   468d8:	004c7440 	call	4c744 <__adddf3>
   468dc:	8009883a 	mov	r4,r16
   468e0:	1029883a 	mov	r20,r2
   468e4:	1823883a 	mov	r17,r3
   468e8:	004e4300 	call	4e430 <__floatsidf>
   468ec:	019427f4 	movhi	r6,20639
   468f0:	01cff4f4 	movhi	r7,16339
   468f4:	319e7ec4 	addi	r6,r6,31227
   468f8:	39d104c4 	addi	r7,r7,17427
   468fc:	1009883a 	mov	r4,r2
   46900:	180b883a 	mov	r5,r3
   46904:	004d2480 	call	4d248 <__muldf3>
   46908:	100d883a 	mov	r6,r2
   4690c:	180f883a 	mov	r7,r3
   46910:	a009883a 	mov	r4,r20
   46914:	880b883a 	mov	r5,r17
   46918:	004c7440 	call	4c744 <__adddf3>
   4691c:	1009883a 	mov	r4,r2
   46920:	180b883a 	mov	r5,r3
   46924:	1029883a 	mov	r20,r2
   46928:	1823883a 	mov	r17,r3
   4692c:	004e3b00 	call	4e3b0 <__fixdfsi>
   46930:	000d883a 	mov	r6,zero
   46934:	000f883a 	mov	r7,zero
   46938:	a009883a 	mov	r4,r20
   4693c:	880b883a 	mov	r5,r17
   46940:	d8800515 	stw	r2,20(sp)
   46944:	004d1540 	call	4d154 <__ledf2>
   46948:	10028716 	blt	r2,zero,47368 <_dtoa_r+0xc88>
   4694c:	d8c00517 	ldw	r3,20(sp)
   46950:	00800584 	movi	r2,22
   46954:	10c27536 	bltu	r2,r3,4732c <_dtoa_r+0xc4c>
   46958:	180490fa 	slli	r2,r3,3
   4695c:	00c00174 	movhi	r3,5
   46960:	18c6a404 	addi	r3,r3,6800
   46964:	1885883a 	add	r2,r3,r2
   46968:	11000017 	ldw	r4,0(r2)
   4696c:	11400117 	ldw	r5,4(r2)
   46970:	900d883a 	mov	r6,r18
   46974:	980f883a 	mov	r7,r19
   46978:	004d0780 	call	4d078 <__gedf2>
   4697c:	00828d0e 	bge	zero,r2,473b4 <_dtoa_r+0xcd4>
   46980:	d9000517 	ldw	r4,20(sp)
   46984:	d8000e15 	stw	zero,56(sp)
   46988:	213fffc4 	addi	r4,r4,-1
   4698c:	d9000515 	stw	r4,20(sp)
   46990:	b42dc83a 	sub	r22,r22,r16
   46994:	b5bfffc4 	addi	r22,r22,-1
   46998:	b0026f16 	blt	r22,zero,47358 <_dtoa_r+0xc78>
   4699c:	d8000815 	stw	zero,32(sp)
   469a0:	d9c00517 	ldw	r7,20(sp)
   469a4:	38026416 	blt	r7,zero,47338 <_dtoa_r+0xc58>
   469a8:	b1ed883a 	add	r22,r22,r7
   469ac:	d9c00d15 	stw	r7,52(sp)
   469b0:	d8000a15 	stw	zero,40(sp)
   469b4:	d9800317 	ldw	r6,12(sp)
   469b8:	00800244 	movi	r2,9
   469bc:	11811436 	bltu	r2,r6,46e10 <_dtoa_r+0x730>
   469c0:	00800144 	movi	r2,5
   469c4:	1184e10e 	bge	r2,r6,47d4c <_dtoa_r+0x166c>
   469c8:	31bfff04 	addi	r6,r6,-4
   469cc:	d9800315 	stw	r6,12(sp)
   469d0:	0023883a 	mov	r17,zero
   469d4:	d9800317 	ldw	r6,12(sp)
   469d8:	008000c4 	movi	r2,3
   469dc:	30836726 	beq	r6,r2,4777c <_dtoa_r+0x109c>
   469e0:	1183410e 	bge	r2,r6,476e8 <_dtoa_r+0x1008>
   469e4:	d9c00317 	ldw	r7,12(sp)
   469e8:	00800104 	movi	r2,4
   469ec:	38827c26 	beq	r7,r2,473e0 <_dtoa_r+0xd00>
   469f0:	00800144 	movi	r2,5
   469f4:	3884c41e 	bne	r7,r2,47d08 <_dtoa_r+0x1628>
   469f8:	00800044 	movi	r2,1
   469fc:	d8800b15 	stw	r2,44(sp)
   46a00:	d8c00517 	ldw	r3,20(sp)
   46a04:	d9002217 	ldw	r4,136(sp)
   46a08:	1907883a 	add	r3,r3,r4
   46a0c:	19800044 	addi	r6,r3,1
   46a10:	d8c00c15 	stw	r3,48(sp)
   46a14:	d9800615 	stw	r6,24(sp)
   46a18:	0183a40e 	bge	zero,r6,478ac <_dtoa_r+0x11cc>
   46a1c:	d9800617 	ldw	r6,24(sp)
   46a20:	3021883a 	mov	r16,r6
   46a24:	e0001115 	stw	zero,68(fp)
   46a28:	008005c4 	movi	r2,23
   46a2c:	1184c92e 	bgeu	r2,r6,47d54 <_dtoa_r+0x1674>
   46a30:	00c00044 	movi	r3,1
   46a34:	00800104 	movi	r2,4
   46a38:	1085883a 	add	r2,r2,r2
   46a3c:	11000504 	addi	r4,r2,20
   46a40:	180b883a 	mov	r5,r3
   46a44:	18c00044 	addi	r3,r3,1
   46a48:	313ffb2e 	bgeu	r6,r4,46a38 <_gp+0xfffeb310>
   46a4c:	e1401115 	stw	r5,68(fp)
   46a50:	e009883a 	mov	r4,fp
   46a54:	00487f40 	call	487f4 <_Balloc>
   46a58:	d8800715 	stw	r2,28(sp)
   46a5c:	e0801015 	stw	r2,64(fp)
   46a60:	00800384 	movi	r2,14
   46a64:	1400f736 	bltu	r2,r16,46e44 <_dtoa_r+0x764>
   46a68:	8800f626 	beq	r17,zero,46e44 <_dtoa_r+0x764>
   46a6c:	d9c00517 	ldw	r7,20(sp)
   46a70:	01c39a0e 	bge	zero,r7,478dc <_dtoa_r+0x11fc>
   46a74:	388003cc 	andi	r2,r7,15
   46a78:	100490fa 	slli	r2,r2,3
   46a7c:	382bd13a 	srai	r21,r7,4
   46a80:	00c00174 	movhi	r3,5
   46a84:	18c6a404 	addi	r3,r3,6800
   46a88:	1885883a 	add	r2,r3,r2
   46a8c:	a8c0040c 	andi	r3,r21,16
   46a90:	12400017 	ldw	r9,0(r2)
   46a94:	12000117 	ldw	r8,4(r2)
   46a98:	18037926 	beq	r3,zero,47880 <_dtoa_r+0x11a0>
   46a9c:	00800174 	movhi	r2,5
   46aa0:	10869a04 	addi	r2,r2,6760
   46aa4:	11800817 	ldw	r6,32(r2)
   46aa8:	11c00917 	ldw	r7,36(r2)
   46aac:	9009883a 	mov	r4,r18
   46ab0:	980b883a 	mov	r5,r19
   46ab4:	da001715 	stw	r8,92(sp)
   46ab8:	da401615 	stw	r9,88(sp)
   46abc:	00409d40 	call	409d4 <__divdf3>
   46ac0:	da001717 	ldw	r8,92(sp)
   46ac4:	da401617 	ldw	r9,88(sp)
   46ac8:	ad4003cc 	andi	r21,r21,15
   46acc:	040000c4 	movi	r16,3
   46ad0:	1023883a 	mov	r17,r2
   46ad4:	1829883a 	mov	r20,r3
   46ad8:	a8001126 	beq	r21,zero,46b20 <_dtoa_r+0x440>
   46adc:	05c00174 	movhi	r23,5
   46ae0:	bdc69a04 	addi	r23,r23,6760
   46ae4:	4805883a 	mov	r2,r9
   46ae8:	4007883a 	mov	r3,r8
   46aec:	a980004c 	andi	r6,r21,1
   46af0:	1009883a 	mov	r4,r2
   46af4:	a82bd07a 	srai	r21,r21,1
   46af8:	180b883a 	mov	r5,r3
   46afc:	30000426 	beq	r6,zero,46b10 <_dtoa_r+0x430>
   46b00:	b9800017 	ldw	r6,0(r23)
   46b04:	b9c00117 	ldw	r7,4(r23)
   46b08:	84000044 	addi	r16,r16,1
   46b0c:	004d2480 	call	4d248 <__muldf3>
   46b10:	bdc00204 	addi	r23,r23,8
   46b14:	a83ff51e 	bne	r21,zero,46aec <_gp+0xfffeb3c4>
   46b18:	1013883a 	mov	r9,r2
   46b1c:	1811883a 	mov	r8,r3
   46b20:	480d883a 	mov	r6,r9
   46b24:	400f883a 	mov	r7,r8
   46b28:	8809883a 	mov	r4,r17
   46b2c:	a00b883a 	mov	r5,r20
   46b30:	00409d40 	call	409d4 <__divdf3>
   46b34:	d8800f15 	stw	r2,60(sp)
   46b38:	d8c01015 	stw	r3,64(sp)
   46b3c:	d8c00e17 	ldw	r3,56(sp)
   46b40:	18000626 	beq	r3,zero,46b5c <_dtoa_r+0x47c>
   46b44:	d9000f17 	ldw	r4,60(sp)
   46b48:	d9401017 	ldw	r5,64(sp)
   46b4c:	000d883a 	mov	r6,zero
   46b50:	01cffc34 	movhi	r7,16368
   46b54:	004d1540 	call	4d154 <__ledf2>
   46b58:	10040b16 	blt	r2,zero,47b88 <_dtoa_r+0x14a8>
   46b5c:	8009883a 	mov	r4,r16
   46b60:	004e4300 	call	4e430 <__floatsidf>
   46b64:	d9800f17 	ldw	r6,60(sp)
   46b68:	d9c01017 	ldw	r7,64(sp)
   46b6c:	1009883a 	mov	r4,r2
   46b70:	180b883a 	mov	r5,r3
   46b74:	004d2480 	call	4d248 <__muldf3>
   46b78:	000d883a 	mov	r6,zero
   46b7c:	01d00734 	movhi	r7,16412
   46b80:	1009883a 	mov	r4,r2
   46b84:	180b883a 	mov	r5,r3
   46b88:	004c7440 	call	4c744 <__adddf3>
   46b8c:	1021883a 	mov	r16,r2
   46b90:	d8800617 	ldw	r2,24(sp)
   46b94:	047f3034 	movhi	r17,64704
   46b98:	1c63883a 	add	r17,r3,r17
   46b9c:	10031826 	beq	r2,zero,47800 <_dtoa_r+0x1120>
   46ba0:	d8c00517 	ldw	r3,20(sp)
   46ba4:	db000617 	ldw	r12,24(sp)
   46ba8:	d8c01315 	stw	r3,76(sp)
   46bac:	d9000b17 	ldw	r4,44(sp)
   46bb0:	20038f26 	beq	r4,zero,479f0 <_dtoa_r+0x1310>
   46bb4:	60bfffc4 	addi	r2,r12,-1
   46bb8:	100490fa 	slli	r2,r2,3
   46bbc:	00c00174 	movhi	r3,5
   46bc0:	18c6a404 	addi	r3,r3,6800
   46bc4:	1885883a 	add	r2,r3,r2
   46bc8:	11800017 	ldw	r6,0(r2)
   46bcc:	11c00117 	ldw	r7,4(r2)
   46bd0:	d8800717 	ldw	r2,28(sp)
   46bd4:	0009883a 	mov	r4,zero
   46bd8:	014ff834 	movhi	r5,16352
   46bdc:	db001615 	stw	r12,88(sp)
   46be0:	15c00044 	addi	r23,r2,1
   46be4:	00409d40 	call	409d4 <__divdf3>
   46be8:	800d883a 	mov	r6,r16
   46bec:	880f883a 	mov	r7,r17
   46bf0:	1009883a 	mov	r4,r2
   46bf4:	180b883a 	mov	r5,r3
   46bf8:	004dab40 	call	4dab4 <__subdf3>
   46bfc:	d9401017 	ldw	r5,64(sp)
   46c00:	d9000f17 	ldw	r4,60(sp)
   46c04:	102b883a 	mov	r21,r2
   46c08:	d8c01215 	stw	r3,72(sp)
   46c0c:	004e3b00 	call	4e3b0 <__fixdfsi>
   46c10:	1009883a 	mov	r4,r2
   46c14:	1029883a 	mov	r20,r2
   46c18:	004e4300 	call	4e430 <__floatsidf>
   46c1c:	d9000f17 	ldw	r4,60(sp)
   46c20:	d9401017 	ldw	r5,64(sp)
   46c24:	100d883a 	mov	r6,r2
   46c28:	180f883a 	mov	r7,r3
   46c2c:	004dab40 	call	4dab4 <__subdf3>
   46c30:	1823883a 	mov	r17,r3
   46c34:	d8c00717 	ldw	r3,28(sp)
   46c38:	d9401217 	ldw	r5,72(sp)
   46c3c:	a2000c04 	addi	r8,r20,48
   46c40:	1021883a 	mov	r16,r2
   46c44:	1a000005 	stb	r8,0(r3)
   46c48:	800d883a 	mov	r6,r16
   46c4c:	880f883a 	mov	r7,r17
   46c50:	a809883a 	mov	r4,r21
   46c54:	4029883a 	mov	r20,r8
   46c58:	004d0780 	call	4d078 <__gedf2>
   46c5c:	00841d16 	blt	zero,r2,47cd4 <_dtoa_r+0x15f4>
   46c60:	800d883a 	mov	r6,r16
   46c64:	880f883a 	mov	r7,r17
   46c68:	0009883a 	mov	r4,zero
   46c6c:	014ffc34 	movhi	r5,16368
   46c70:	004dab40 	call	4dab4 <__subdf3>
   46c74:	d9401217 	ldw	r5,72(sp)
   46c78:	100d883a 	mov	r6,r2
   46c7c:	180f883a 	mov	r7,r3
   46c80:	a809883a 	mov	r4,r21
   46c84:	004d0780 	call	4d078 <__gedf2>
   46c88:	db001617 	ldw	r12,88(sp)
   46c8c:	00840e16 	blt	zero,r2,47cc8 <_dtoa_r+0x15e8>
   46c90:	00800044 	movi	r2,1
   46c94:	13006b0e 	bge	r2,r12,46e44 <_dtoa_r+0x764>
   46c98:	d9000717 	ldw	r4,28(sp)
   46c9c:	dd800f15 	stw	r22,60(sp)
   46ca0:	dcc01015 	stw	r19,64(sp)
   46ca4:	2319883a 	add	r12,r4,r12
   46ca8:	dcc01217 	ldw	r19,72(sp)
   46cac:	602d883a 	mov	r22,r12
   46cb0:	dc801215 	stw	r18,72(sp)
   46cb4:	b825883a 	mov	r18,r23
   46cb8:	00000906 	br	46ce0 <_dtoa_r+0x600>
   46cbc:	004dab40 	call	4dab4 <__subdf3>
   46cc0:	a80d883a 	mov	r6,r21
   46cc4:	980f883a 	mov	r7,r19
   46cc8:	1009883a 	mov	r4,r2
   46ccc:	180b883a 	mov	r5,r3
   46cd0:	004d1540 	call	4d154 <__ledf2>
   46cd4:	1003e816 	blt	r2,zero,47c78 <_dtoa_r+0x1598>
   46cd8:	b825883a 	mov	r18,r23
   46cdc:	bd83e926 	beq	r23,r22,47c84 <_dtoa_r+0x15a4>
   46ce0:	a809883a 	mov	r4,r21
   46ce4:	980b883a 	mov	r5,r19
   46ce8:	000d883a 	mov	r6,zero
   46cec:	01d00934 	movhi	r7,16420
   46cf0:	004d2480 	call	4d248 <__muldf3>
   46cf4:	000d883a 	mov	r6,zero
   46cf8:	01d00934 	movhi	r7,16420
   46cfc:	8009883a 	mov	r4,r16
   46d00:	880b883a 	mov	r5,r17
   46d04:	102b883a 	mov	r21,r2
   46d08:	1827883a 	mov	r19,r3
   46d0c:	004d2480 	call	4d248 <__muldf3>
   46d10:	180b883a 	mov	r5,r3
   46d14:	1009883a 	mov	r4,r2
   46d18:	1821883a 	mov	r16,r3
   46d1c:	1023883a 	mov	r17,r2
   46d20:	004e3b00 	call	4e3b0 <__fixdfsi>
   46d24:	1009883a 	mov	r4,r2
   46d28:	1029883a 	mov	r20,r2
   46d2c:	004e4300 	call	4e430 <__floatsidf>
   46d30:	8809883a 	mov	r4,r17
   46d34:	800b883a 	mov	r5,r16
   46d38:	100d883a 	mov	r6,r2
   46d3c:	180f883a 	mov	r7,r3
   46d40:	004dab40 	call	4dab4 <__subdf3>
   46d44:	a5000c04 	addi	r20,r20,48
   46d48:	a80d883a 	mov	r6,r21
   46d4c:	980f883a 	mov	r7,r19
   46d50:	1009883a 	mov	r4,r2
   46d54:	180b883a 	mov	r5,r3
   46d58:	95000005 	stb	r20,0(r18)
   46d5c:	1021883a 	mov	r16,r2
   46d60:	1823883a 	mov	r17,r3
   46d64:	004d1540 	call	4d154 <__ledf2>
   46d68:	bdc00044 	addi	r23,r23,1
   46d6c:	800d883a 	mov	r6,r16
   46d70:	880f883a 	mov	r7,r17
   46d74:	0009883a 	mov	r4,zero
   46d78:	014ffc34 	movhi	r5,16368
   46d7c:	103fcf0e 	bge	r2,zero,46cbc <_gp+0xfffeb594>
   46d80:	d8c01317 	ldw	r3,76(sp)
   46d84:	d8c00515 	stw	r3,20(sp)
   46d88:	d9400917 	ldw	r5,36(sp)
   46d8c:	e009883a 	mov	r4,fp
   46d90:	004889c0 	call	4889c <_Bfree>
   46d94:	d9000517 	ldw	r4,20(sp)
   46d98:	d9802317 	ldw	r6,140(sp)
   46d9c:	d9c02517 	ldw	r7,148(sp)
   46da0:	b8000005 	stb	zero,0(r23)
   46da4:	20800044 	addi	r2,r4,1
   46da8:	30800015 	stw	r2,0(r6)
   46dac:	3802aa26 	beq	r7,zero,47858 <_dtoa_r+0x1178>
   46db0:	3dc00015 	stw	r23,0(r7)
   46db4:	d8800717 	ldw	r2,28(sp)
   46db8:	003e7906 	br	467a0 <_gp+0xfffeb078>
   46dbc:	00800434 	movhi	r2,16
   46dc0:	10bfffc4 	addi	r2,r2,-1
   46dc4:	88a2703a 	and	r17,r17,r2
   46dc8:	883e851e 	bne	r17,zero,467e0 <_gp+0xfffeb0b8>
   46dcc:	00800174 	movhi	r2,5
   46dd0:	10868604 	addi	r2,r2,6680
   46dd4:	003e8406 	br	467e8 <_gp+0xfffeb0c0>
   46dd8:	10c00204 	addi	r3,r2,8
   46ddc:	003e8706 	br	467fc <_gp+0xfffeb0d4>
   46de0:	01400434 	movhi	r5,16
   46de4:	297fffc4 	addi	r5,r5,-1
   46de8:	994a703a 	and	r5,r19,r5
   46dec:	9009883a 	mov	r4,r18
   46df0:	843f0044 	addi	r16,r16,-1023
   46df4:	294ffc34 	orhi	r5,r5,16368
   46df8:	dd800217 	ldw	r22,8(sp)
   46dfc:	d8001115 	stw	zero,68(sp)
   46e00:	003ea506 	br	46898 <_gp+0xfffeb170>
   46e04:	00800174 	movhi	r2,5
   46e08:	10867d04 	addi	r2,r2,6644
   46e0c:	003e6406 	br	467a0 <_gp+0xfffeb078>
   46e10:	e0001115 	stw	zero,68(fp)
   46e14:	000b883a 	mov	r5,zero
   46e18:	e009883a 	mov	r4,fp
   46e1c:	00487f40 	call	487f4 <_Balloc>
   46e20:	01bfffc4 	movi	r6,-1
   46e24:	01c00044 	movi	r7,1
   46e28:	d8800715 	stw	r2,28(sp)
   46e2c:	d9800c15 	stw	r6,48(sp)
   46e30:	e0801015 	stw	r2,64(fp)
   46e34:	d8000315 	stw	zero,12(sp)
   46e38:	d9c00b15 	stw	r7,44(sp)
   46e3c:	d9800615 	stw	r6,24(sp)
   46e40:	d8002215 	stw	zero,136(sp)
   46e44:	d8800117 	ldw	r2,4(sp)
   46e48:	10008916 	blt	r2,zero,47070 <_dtoa_r+0x990>
   46e4c:	d9000517 	ldw	r4,20(sp)
   46e50:	00c00384 	movi	r3,14
   46e54:	19008616 	blt	r3,r4,47070 <_dtoa_r+0x990>
   46e58:	200490fa 	slli	r2,r4,3
   46e5c:	00c00174 	movhi	r3,5
   46e60:	d9802217 	ldw	r6,136(sp)
   46e64:	18c6a404 	addi	r3,r3,6800
   46e68:	1885883a 	add	r2,r3,r2
   46e6c:	14000017 	ldw	r16,0(r2)
   46e70:	14400117 	ldw	r17,4(r2)
   46e74:	30016316 	blt	r6,zero,47404 <_dtoa_r+0xd24>
   46e78:	800d883a 	mov	r6,r16
   46e7c:	880f883a 	mov	r7,r17
   46e80:	9009883a 	mov	r4,r18
   46e84:	980b883a 	mov	r5,r19
   46e88:	00409d40 	call	409d4 <__divdf3>
   46e8c:	180b883a 	mov	r5,r3
   46e90:	1009883a 	mov	r4,r2
   46e94:	004e3b00 	call	4e3b0 <__fixdfsi>
   46e98:	1009883a 	mov	r4,r2
   46e9c:	102b883a 	mov	r21,r2
   46ea0:	004e4300 	call	4e430 <__floatsidf>
   46ea4:	800d883a 	mov	r6,r16
   46ea8:	880f883a 	mov	r7,r17
   46eac:	1009883a 	mov	r4,r2
   46eb0:	180b883a 	mov	r5,r3
   46eb4:	004d2480 	call	4d248 <__muldf3>
   46eb8:	100d883a 	mov	r6,r2
   46ebc:	180f883a 	mov	r7,r3
   46ec0:	9009883a 	mov	r4,r18
   46ec4:	980b883a 	mov	r5,r19
   46ec8:	004dab40 	call	4dab4 <__subdf3>
   46ecc:	d9c00717 	ldw	r7,28(sp)
   46ed0:	1009883a 	mov	r4,r2
   46ed4:	a8800c04 	addi	r2,r21,48
   46ed8:	38800005 	stb	r2,0(r7)
   46edc:	3dc00044 	addi	r23,r7,1
   46ee0:	d9c00617 	ldw	r7,24(sp)
   46ee4:	01800044 	movi	r6,1
   46ee8:	180b883a 	mov	r5,r3
   46eec:	2005883a 	mov	r2,r4
   46ef0:	39803826 	beq	r7,r6,46fd4 <_dtoa_r+0x8f4>
   46ef4:	000d883a 	mov	r6,zero
   46ef8:	01d00934 	movhi	r7,16420
   46efc:	004d2480 	call	4d248 <__muldf3>
   46f00:	000d883a 	mov	r6,zero
   46f04:	000f883a 	mov	r7,zero
   46f08:	1009883a 	mov	r4,r2
   46f0c:	180b883a 	mov	r5,r3
   46f10:	1025883a 	mov	r18,r2
   46f14:	1827883a 	mov	r19,r3
   46f18:	004cff00 	call	4cff0 <__eqdf2>
   46f1c:	103f9a26 	beq	r2,zero,46d88 <_gp+0xfffeb660>
   46f20:	d9c00617 	ldw	r7,24(sp)
   46f24:	d8c00717 	ldw	r3,28(sp)
   46f28:	b829883a 	mov	r20,r23
   46f2c:	38bfffc4 	addi	r2,r7,-1
   46f30:	18ad883a 	add	r22,r3,r2
   46f34:	00000a06 	br	46f60 <_dtoa_r+0x880>
   46f38:	004d2480 	call	4d248 <__muldf3>
   46f3c:	000d883a 	mov	r6,zero
   46f40:	000f883a 	mov	r7,zero
   46f44:	1009883a 	mov	r4,r2
   46f48:	180b883a 	mov	r5,r3
   46f4c:	1025883a 	mov	r18,r2
   46f50:	1827883a 	mov	r19,r3
   46f54:	b829883a 	mov	r20,r23
   46f58:	004cff00 	call	4cff0 <__eqdf2>
   46f5c:	103f8a26 	beq	r2,zero,46d88 <_gp+0xfffeb660>
   46f60:	800d883a 	mov	r6,r16
   46f64:	880f883a 	mov	r7,r17
   46f68:	9009883a 	mov	r4,r18
   46f6c:	980b883a 	mov	r5,r19
   46f70:	00409d40 	call	409d4 <__divdf3>
   46f74:	180b883a 	mov	r5,r3
   46f78:	1009883a 	mov	r4,r2
   46f7c:	004e3b00 	call	4e3b0 <__fixdfsi>
   46f80:	1009883a 	mov	r4,r2
   46f84:	102b883a 	mov	r21,r2
   46f88:	004e4300 	call	4e430 <__floatsidf>
   46f8c:	800d883a 	mov	r6,r16
   46f90:	880f883a 	mov	r7,r17
   46f94:	1009883a 	mov	r4,r2
   46f98:	180b883a 	mov	r5,r3
   46f9c:	004d2480 	call	4d248 <__muldf3>
   46fa0:	100d883a 	mov	r6,r2
   46fa4:	180f883a 	mov	r7,r3
   46fa8:	9009883a 	mov	r4,r18
   46fac:	980b883a 	mov	r5,r19
   46fb0:	004dab40 	call	4dab4 <__subdf3>
   46fb4:	aa000c04 	addi	r8,r21,48
   46fb8:	a2000005 	stb	r8,0(r20)
   46fbc:	000d883a 	mov	r6,zero
   46fc0:	01d00934 	movhi	r7,16420
   46fc4:	1009883a 	mov	r4,r2
   46fc8:	180b883a 	mov	r5,r3
   46fcc:	a5c00044 	addi	r23,r20,1
   46fd0:	b53fd91e 	bne	r22,r20,46f38 <_gp+0xfffeb810>
   46fd4:	100d883a 	mov	r6,r2
   46fd8:	180f883a 	mov	r7,r3
   46fdc:	1009883a 	mov	r4,r2
   46fe0:	180b883a 	mov	r5,r3
   46fe4:	004c7440 	call	4c744 <__adddf3>
   46fe8:	100d883a 	mov	r6,r2
   46fec:	180f883a 	mov	r7,r3
   46ff0:	8009883a 	mov	r4,r16
   46ff4:	880b883a 	mov	r5,r17
   46ff8:	1027883a 	mov	r19,r2
   46ffc:	1825883a 	mov	r18,r3
   47000:	004d1540 	call	4d154 <__ledf2>
   47004:	10000816 	blt	r2,zero,47028 <_dtoa_r+0x948>
   47008:	980d883a 	mov	r6,r19
   4700c:	900f883a 	mov	r7,r18
   47010:	8009883a 	mov	r4,r16
   47014:	880b883a 	mov	r5,r17
   47018:	004cff00 	call	4cff0 <__eqdf2>
   4701c:	103f5a1e 	bne	r2,zero,46d88 <_gp+0xfffeb660>
   47020:	ad40004c 	andi	r21,r21,1
   47024:	a83f5826 	beq	r21,zero,46d88 <_gp+0xfffeb660>
   47028:	bd3fffc3 	ldbu	r20,-1(r23)
   4702c:	b8bfffc4 	addi	r2,r23,-1
   47030:	1007883a 	mov	r3,r2
   47034:	01400e44 	movi	r5,57
   47038:	d9800717 	ldw	r6,28(sp)
   4703c:	00000506 	br	47054 <_dtoa_r+0x974>
   47040:	18ffffc4 	addi	r3,r3,-1
   47044:	11824726 	beq	r2,r6,47964 <_dtoa_r+0x1284>
   47048:	1d000003 	ldbu	r20,0(r3)
   4704c:	102f883a 	mov	r23,r2
   47050:	10bfffc4 	addi	r2,r2,-1
   47054:	a1003fcc 	andi	r4,r20,255
   47058:	2100201c 	xori	r4,r4,128
   4705c:	213fe004 	addi	r4,r4,-128
   47060:	217ff726 	beq	r4,r5,47040 <_gp+0xfffeb918>
   47064:	a2000044 	addi	r8,r20,1
   47068:	12000005 	stb	r8,0(r2)
   4706c:	003f4606 	br	46d88 <_gp+0xfffeb660>
   47070:	d9000b17 	ldw	r4,44(sp)
   47074:	2000c826 	beq	r4,zero,47398 <_dtoa_r+0xcb8>
   47078:	d9800317 	ldw	r6,12(sp)
   4707c:	00c00044 	movi	r3,1
   47080:	1980f90e 	bge	r3,r6,47468 <_dtoa_r+0xd88>
   47084:	d8800617 	ldw	r2,24(sp)
   47088:	d8c00a17 	ldw	r3,40(sp)
   4708c:	157fffc4 	addi	r21,r2,-1
   47090:	1d41f316 	blt	r3,r21,47860 <_dtoa_r+0x1180>
   47094:	1d6bc83a 	sub	r21,r3,r21
   47098:	d9c00617 	ldw	r7,24(sp)
   4709c:	3802aa16 	blt	r7,zero,47b48 <_dtoa_r+0x1468>
   470a0:	dd000817 	ldw	r20,32(sp)
   470a4:	d8800617 	ldw	r2,24(sp)
   470a8:	d8c00817 	ldw	r3,32(sp)
   470ac:	01400044 	movi	r5,1
   470b0:	e009883a 	mov	r4,fp
   470b4:	1887883a 	add	r3,r3,r2
   470b8:	d8c00815 	stw	r3,32(sp)
   470bc:	b0ad883a 	add	r22,r22,r2
   470c0:	0048c280 	call	48c28 <__i2b>
   470c4:	1023883a 	mov	r17,r2
   470c8:	a0000826 	beq	r20,zero,470ec <_dtoa_r+0xa0c>
   470cc:	0580070e 	bge	zero,r22,470ec <_dtoa_r+0xa0c>
   470d0:	a005883a 	mov	r2,r20
   470d4:	b500b916 	blt	r22,r20,473bc <_dtoa_r+0xcdc>
   470d8:	d9000817 	ldw	r4,32(sp)
   470dc:	a0a9c83a 	sub	r20,r20,r2
   470e0:	b0adc83a 	sub	r22,r22,r2
   470e4:	2089c83a 	sub	r4,r4,r2
   470e8:	d9000815 	stw	r4,32(sp)
   470ec:	d9800a17 	ldw	r6,40(sp)
   470f0:	0181810e 	bge	zero,r6,476f8 <_dtoa_r+0x1018>
   470f4:	d9c00b17 	ldw	r7,44(sp)
   470f8:	3800b326 	beq	r7,zero,473c8 <_dtoa_r+0xce8>
   470fc:	a800b226 	beq	r21,zero,473c8 <_dtoa_r+0xce8>
   47100:	880b883a 	mov	r5,r17
   47104:	a80d883a 	mov	r6,r21
   47108:	e009883a 	mov	r4,fp
   4710c:	0048ef00 	call	48ef0 <__pow5mult>
   47110:	d9800917 	ldw	r6,36(sp)
   47114:	100b883a 	mov	r5,r2
   47118:	e009883a 	mov	r4,fp
   4711c:	1023883a 	mov	r17,r2
   47120:	0048c640 	call	48c64 <__multiply>
   47124:	1021883a 	mov	r16,r2
   47128:	d8800a17 	ldw	r2,40(sp)
   4712c:	d9400917 	ldw	r5,36(sp)
   47130:	e009883a 	mov	r4,fp
   47134:	1545c83a 	sub	r2,r2,r21
   47138:	d8800a15 	stw	r2,40(sp)
   4713c:	004889c0 	call	4889c <_Bfree>
   47140:	d8c00a17 	ldw	r3,40(sp)
   47144:	18009f1e 	bne	r3,zero,473c4 <_dtoa_r+0xce4>
   47148:	05c00044 	movi	r23,1
   4714c:	e009883a 	mov	r4,fp
   47150:	b80b883a 	mov	r5,r23
   47154:	0048c280 	call	48c28 <__i2b>
   47158:	d9000d17 	ldw	r4,52(sp)
   4715c:	102b883a 	mov	r21,r2
   47160:	2000ce26 	beq	r4,zero,4749c <_dtoa_r+0xdbc>
   47164:	200d883a 	mov	r6,r4
   47168:	100b883a 	mov	r5,r2
   4716c:	e009883a 	mov	r4,fp
   47170:	0048ef00 	call	48ef0 <__pow5mult>
   47174:	d9800317 	ldw	r6,12(sp)
   47178:	102b883a 	mov	r21,r2
   4717c:	b981810e 	bge	r23,r6,47784 <_dtoa_r+0x10a4>
   47180:	0027883a 	mov	r19,zero
   47184:	a8800417 	ldw	r2,16(r21)
   47188:	05c00804 	movi	r23,32
   4718c:	10800104 	addi	r2,r2,4
   47190:	1085883a 	add	r2,r2,r2
   47194:	1085883a 	add	r2,r2,r2
   47198:	a885883a 	add	r2,r21,r2
   4719c:	11000017 	ldw	r4,0(r2)
   471a0:	0048b100 	call	48b10 <__hi0bits>
   471a4:	b885c83a 	sub	r2,r23,r2
   471a8:	1585883a 	add	r2,r2,r22
   471ac:	108007cc 	andi	r2,r2,31
   471b0:	1000b326 	beq	r2,zero,47480 <_dtoa_r+0xda0>
   471b4:	00c00804 	movi	r3,32
   471b8:	1887c83a 	sub	r3,r3,r2
   471bc:	01000104 	movi	r4,4
   471c0:	20c2cd0e 	bge	r4,r3,47cf8 <_dtoa_r+0x1618>
   471c4:	00c00704 	movi	r3,28
   471c8:	1885c83a 	sub	r2,r3,r2
   471cc:	d8c00817 	ldw	r3,32(sp)
   471d0:	a0a9883a 	add	r20,r20,r2
   471d4:	b0ad883a 	add	r22,r22,r2
   471d8:	1887883a 	add	r3,r3,r2
   471dc:	d8c00815 	stw	r3,32(sp)
   471e0:	d9800817 	ldw	r6,32(sp)
   471e4:	0180040e 	bge	zero,r6,471f8 <_dtoa_r+0xb18>
   471e8:	800b883a 	mov	r5,r16
   471ec:	e009883a 	mov	r4,fp
   471f0:	00490300 	call	49030 <__lshift>
   471f4:	1021883a 	mov	r16,r2
   471f8:	0580050e 	bge	zero,r22,47210 <_dtoa_r+0xb30>
   471fc:	a80b883a 	mov	r5,r21
   47200:	b00d883a 	mov	r6,r22
   47204:	e009883a 	mov	r4,fp
   47208:	00490300 	call	49030 <__lshift>
   4720c:	102b883a 	mov	r21,r2
   47210:	d9c00e17 	ldw	r7,56(sp)
   47214:	3801211e 	bne	r7,zero,4769c <_dtoa_r+0xfbc>
   47218:	d9800617 	ldw	r6,24(sp)
   4721c:	0181380e 	bge	zero,r6,47700 <_dtoa_r+0x1020>
   47220:	d8c00b17 	ldw	r3,44(sp)
   47224:	1800ab1e 	bne	r3,zero,474d4 <_dtoa_r+0xdf4>
   47228:	dc800717 	ldw	r18,28(sp)
   4722c:	dcc00617 	ldw	r19,24(sp)
   47230:	9029883a 	mov	r20,r18
   47234:	00000206 	br	47240 <_dtoa_r+0xb60>
   47238:	00488c40 	call	488c4 <__multadd>
   4723c:	1021883a 	mov	r16,r2
   47240:	a80b883a 	mov	r5,r21
   47244:	8009883a 	mov	r4,r16
   47248:	00464b80 	call	464b8 <quorem>
   4724c:	10800c04 	addi	r2,r2,48
   47250:	90800005 	stb	r2,0(r18)
   47254:	94800044 	addi	r18,r18,1
   47258:	9507c83a 	sub	r3,r18,r20
   4725c:	000f883a 	mov	r7,zero
   47260:	01800284 	movi	r6,10
   47264:	800b883a 	mov	r5,r16
   47268:	e009883a 	mov	r4,fp
   4726c:	1cfff216 	blt	r3,r19,47238 <_gp+0xfffebb10>
   47270:	1011883a 	mov	r8,r2
   47274:	d8800617 	ldw	r2,24(sp)
   47278:	0082370e 	bge	zero,r2,47b58 <_dtoa_r+0x1478>
   4727c:	d9000717 	ldw	r4,28(sp)
   47280:	0025883a 	mov	r18,zero
   47284:	20af883a 	add	r23,r4,r2
   47288:	01800044 	movi	r6,1
   4728c:	800b883a 	mov	r5,r16
   47290:	e009883a 	mov	r4,fp
   47294:	da001715 	stw	r8,92(sp)
   47298:	00490300 	call	49030 <__lshift>
   4729c:	a80b883a 	mov	r5,r21
   472a0:	1009883a 	mov	r4,r2
   472a4:	d8800915 	stw	r2,36(sp)
   472a8:	00491780 	call	49178 <__mcmp>
   472ac:	da001717 	ldw	r8,92(sp)
   472b0:	0081800e 	bge	zero,r2,478b4 <_dtoa_r+0x11d4>
   472b4:	b93fffc3 	ldbu	r4,-1(r23)
   472b8:	b8bfffc4 	addi	r2,r23,-1
   472bc:	1007883a 	mov	r3,r2
   472c0:	01800e44 	movi	r6,57
   472c4:	d9c00717 	ldw	r7,28(sp)
   472c8:	00000506 	br	472e0 <_dtoa_r+0xc00>
   472cc:	18ffffc4 	addi	r3,r3,-1
   472d0:	11c12326 	beq	r2,r7,47760 <_dtoa_r+0x1080>
   472d4:	19000003 	ldbu	r4,0(r3)
   472d8:	102f883a 	mov	r23,r2
   472dc:	10bfffc4 	addi	r2,r2,-1
   472e0:	21403fcc 	andi	r5,r4,255
   472e4:	2940201c 	xori	r5,r5,128
   472e8:	297fe004 	addi	r5,r5,-128
   472ec:	29bff726 	beq	r5,r6,472cc <_gp+0xfffebba4>
   472f0:	21000044 	addi	r4,r4,1
   472f4:	11000005 	stb	r4,0(r2)
   472f8:	a80b883a 	mov	r5,r21
   472fc:	e009883a 	mov	r4,fp
   47300:	004889c0 	call	4889c <_Bfree>
   47304:	883ea026 	beq	r17,zero,46d88 <_gp+0xfffeb660>
   47308:	90000426 	beq	r18,zero,4731c <_dtoa_r+0xc3c>
   4730c:	94400326 	beq	r18,r17,4731c <_dtoa_r+0xc3c>
   47310:	900b883a 	mov	r5,r18
   47314:	e009883a 	mov	r4,fp
   47318:	004889c0 	call	4889c <_Bfree>
   4731c:	880b883a 	mov	r5,r17
   47320:	e009883a 	mov	r4,fp
   47324:	004889c0 	call	4889c <_Bfree>
   47328:	003e9706 	br	46d88 <_gp+0xfffeb660>
   4732c:	01800044 	movi	r6,1
   47330:	d9800e15 	stw	r6,56(sp)
   47334:	003d9606 	br	46990 <_gp+0xfffeb268>
   47338:	d8800817 	ldw	r2,32(sp)
   4733c:	d8c00517 	ldw	r3,20(sp)
   47340:	d8000d15 	stw	zero,52(sp)
   47344:	10c5c83a 	sub	r2,r2,r3
   47348:	00c9c83a 	sub	r4,zero,r3
   4734c:	d8800815 	stw	r2,32(sp)
   47350:	d9000a15 	stw	r4,40(sp)
   47354:	003d9706 	br	469b4 <_gp+0xfffeb28c>
   47358:	05adc83a 	sub	r22,zero,r22
   4735c:	dd800815 	stw	r22,32(sp)
   47360:	002d883a 	mov	r22,zero
   47364:	003d8e06 	br	469a0 <_gp+0xfffeb278>
   47368:	d9000517 	ldw	r4,20(sp)
   4736c:	004e4300 	call	4e430 <__floatsidf>
   47370:	100d883a 	mov	r6,r2
   47374:	180f883a 	mov	r7,r3
   47378:	a009883a 	mov	r4,r20
   4737c:	880b883a 	mov	r5,r17
   47380:	004cff00 	call	4cff0 <__eqdf2>
   47384:	103d7126 	beq	r2,zero,4694c <_gp+0xfffeb224>
   47388:	d9c00517 	ldw	r7,20(sp)
   4738c:	39ffffc4 	addi	r7,r7,-1
   47390:	d9c00515 	stw	r7,20(sp)
   47394:	003d6d06 	br	4694c <_gp+0xfffeb224>
   47398:	dd400a17 	ldw	r21,40(sp)
   4739c:	dd000817 	ldw	r20,32(sp)
   473a0:	0023883a 	mov	r17,zero
   473a4:	003f4806 	br	470c8 <_gp+0xfffeb9a0>
   473a8:	10e3c83a 	sub	r17,r2,r3
   473ac:	9448983a 	sll	r4,r18,r17
   473b0:	003d3206 	br	4687c <_gp+0xfffeb154>
   473b4:	d8000e15 	stw	zero,56(sp)
   473b8:	003d7506 	br	46990 <_gp+0xfffeb268>
   473bc:	b005883a 	mov	r2,r22
   473c0:	003f4506 	br	470d8 <_gp+0xfffeb9b0>
   473c4:	dc000915 	stw	r16,36(sp)
   473c8:	d9800a17 	ldw	r6,40(sp)
   473cc:	d9400917 	ldw	r5,36(sp)
   473d0:	e009883a 	mov	r4,fp
   473d4:	0048ef00 	call	48ef0 <__pow5mult>
   473d8:	1021883a 	mov	r16,r2
   473dc:	003f5a06 	br	47148 <_gp+0xfffeba20>
   473e0:	01c00044 	movi	r7,1
   473e4:	d9c00b15 	stw	r7,44(sp)
   473e8:	d8802217 	ldw	r2,136(sp)
   473ec:	0081280e 	bge	zero,r2,47890 <_dtoa_r+0x11b0>
   473f0:	100d883a 	mov	r6,r2
   473f4:	1021883a 	mov	r16,r2
   473f8:	d8800c15 	stw	r2,48(sp)
   473fc:	d8800615 	stw	r2,24(sp)
   47400:	003d8806 	br	46a24 <_gp+0xfffeb2fc>
   47404:	d8800617 	ldw	r2,24(sp)
   47408:	00be9b16 	blt	zero,r2,46e78 <_gp+0xfffeb750>
   4740c:	10010f1e 	bne	r2,zero,4784c <_dtoa_r+0x116c>
   47410:	880b883a 	mov	r5,r17
   47414:	000d883a 	mov	r6,zero
   47418:	01d00534 	movhi	r7,16404
   4741c:	8009883a 	mov	r4,r16
   47420:	004d2480 	call	4d248 <__muldf3>
   47424:	900d883a 	mov	r6,r18
   47428:	980f883a 	mov	r7,r19
   4742c:	1009883a 	mov	r4,r2
   47430:	180b883a 	mov	r5,r3
   47434:	004d0780 	call	4d078 <__gedf2>
   47438:	002b883a 	mov	r21,zero
   4743c:	0023883a 	mov	r17,zero
   47440:	1000bf16 	blt	r2,zero,47740 <_dtoa_r+0x1060>
   47444:	d9802217 	ldw	r6,136(sp)
   47448:	ddc00717 	ldw	r23,28(sp)
   4744c:	018c303a 	nor	r6,zero,r6
   47450:	d9800515 	stw	r6,20(sp)
   47454:	a80b883a 	mov	r5,r21
   47458:	e009883a 	mov	r4,fp
   4745c:	004889c0 	call	4889c <_Bfree>
   47460:	883e4926 	beq	r17,zero,46d88 <_gp+0xfffeb660>
   47464:	003fad06 	br	4731c <_gp+0xfffebbf4>
   47468:	d9c01117 	ldw	r7,68(sp)
   4746c:	3801bc26 	beq	r7,zero,47b60 <_dtoa_r+0x1480>
   47470:	10810cc4 	addi	r2,r2,1075
   47474:	dd400a17 	ldw	r21,40(sp)
   47478:	dd000817 	ldw	r20,32(sp)
   4747c:	003f0a06 	br	470a8 <_gp+0xfffeb980>
   47480:	00800704 	movi	r2,28
   47484:	d9000817 	ldw	r4,32(sp)
   47488:	a0a9883a 	add	r20,r20,r2
   4748c:	b0ad883a 	add	r22,r22,r2
   47490:	2089883a 	add	r4,r4,r2
   47494:	d9000815 	stw	r4,32(sp)
   47498:	003f5106 	br	471e0 <_gp+0xfffebab8>
   4749c:	d8c00317 	ldw	r3,12(sp)
   474a0:	b8c1fc0e 	bge	r23,r3,47c94 <_dtoa_r+0x15b4>
   474a4:	0027883a 	mov	r19,zero
   474a8:	b805883a 	mov	r2,r23
   474ac:	003f3e06 	br	471a8 <_gp+0xfffeba80>
   474b0:	880b883a 	mov	r5,r17
   474b4:	e009883a 	mov	r4,fp
   474b8:	000f883a 	mov	r7,zero
   474bc:	01800284 	movi	r6,10
   474c0:	00488c40 	call	488c4 <__multadd>
   474c4:	d9000c17 	ldw	r4,48(sp)
   474c8:	1023883a 	mov	r17,r2
   474cc:	0102040e 	bge	zero,r4,47ce0 <_dtoa_r+0x1600>
   474d0:	d9000615 	stw	r4,24(sp)
   474d4:	0500050e 	bge	zero,r20,474ec <_dtoa_r+0xe0c>
   474d8:	880b883a 	mov	r5,r17
   474dc:	a00d883a 	mov	r6,r20
   474e0:	e009883a 	mov	r4,fp
   474e4:	00490300 	call	49030 <__lshift>
   474e8:	1023883a 	mov	r17,r2
   474ec:	9801241e 	bne	r19,zero,47980 <_dtoa_r+0x12a0>
   474f0:	8829883a 	mov	r20,r17
   474f4:	d9000617 	ldw	r4,24(sp)
   474f8:	dcc00717 	ldw	r19,28(sp)
   474fc:	9480004c 	andi	r18,r18,1
   47500:	20bfffc4 	addi	r2,r4,-1
   47504:	9885883a 	add	r2,r19,r2
   47508:	d8800415 	stw	r2,16(sp)
   4750c:	dc800615 	stw	r18,24(sp)
   47510:	a80b883a 	mov	r5,r21
   47514:	8009883a 	mov	r4,r16
   47518:	00464b80 	call	464b8 <quorem>
   4751c:	880b883a 	mov	r5,r17
   47520:	8009883a 	mov	r4,r16
   47524:	102f883a 	mov	r23,r2
   47528:	00491780 	call	49178 <__mcmp>
   4752c:	a80b883a 	mov	r5,r21
   47530:	a00d883a 	mov	r6,r20
   47534:	e009883a 	mov	r4,fp
   47538:	102d883a 	mov	r22,r2
   4753c:	00491d80 	call	491d8 <__mdiff>
   47540:	1007883a 	mov	r3,r2
   47544:	10800317 	ldw	r2,12(r2)
   47548:	bc800c04 	addi	r18,r23,48
   4754c:	180b883a 	mov	r5,r3
   47550:	10004e1e 	bne	r2,zero,4768c <_dtoa_r+0xfac>
   47554:	8009883a 	mov	r4,r16
   47558:	d8c01615 	stw	r3,88(sp)
   4755c:	00491780 	call	49178 <__mcmp>
   47560:	d8c01617 	ldw	r3,88(sp)
   47564:	e009883a 	mov	r4,fp
   47568:	d8801615 	stw	r2,88(sp)
   4756c:	180b883a 	mov	r5,r3
   47570:	004889c0 	call	4889c <_Bfree>
   47574:	d8801617 	ldw	r2,88(sp)
   47578:	1000041e 	bne	r2,zero,4758c <_dtoa_r+0xeac>
   4757c:	d9800317 	ldw	r6,12(sp)
   47580:	3000021e 	bne	r6,zero,4758c <_dtoa_r+0xeac>
   47584:	d8c00617 	ldw	r3,24(sp)
   47588:	18003726 	beq	r3,zero,47668 <_dtoa_r+0xf88>
   4758c:	b0002016 	blt	r22,zero,47610 <_dtoa_r+0xf30>
   47590:	b000041e 	bne	r22,zero,475a4 <_dtoa_r+0xec4>
   47594:	d9000317 	ldw	r4,12(sp)
   47598:	2000021e 	bne	r4,zero,475a4 <_dtoa_r+0xec4>
   4759c:	d8c00617 	ldw	r3,24(sp)
   475a0:	18001b26 	beq	r3,zero,47610 <_dtoa_r+0xf30>
   475a4:	00810716 	blt	zero,r2,479c4 <_dtoa_r+0x12e4>
   475a8:	d8c00417 	ldw	r3,16(sp)
   475ac:	9d800044 	addi	r22,r19,1
   475b0:	9c800005 	stb	r18,0(r19)
   475b4:	b02f883a 	mov	r23,r22
   475b8:	98c10626 	beq	r19,r3,479d4 <_dtoa_r+0x12f4>
   475bc:	800b883a 	mov	r5,r16
   475c0:	000f883a 	mov	r7,zero
   475c4:	01800284 	movi	r6,10
   475c8:	e009883a 	mov	r4,fp
   475cc:	00488c40 	call	488c4 <__multadd>
   475d0:	1021883a 	mov	r16,r2
   475d4:	000f883a 	mov	r7,zero
   475d8:	01800284 	movi	r6,10
   475dc:	880b883a 	mov	r5,r17
   475e0:	e009883a 	mov	r4,fp
   475e4:	8d002526 	beq	r17,r20,4767c <_dtoa_r+0xf9c>
   475e8:	00488c40 	call	488c4 <__multadd>
   475ec:	a00b883a 	mov	r5,r20
   475f0:	000f883a 	mov	r7,zero
   475f4:	01800284 	movi	r6,10
   475f8:	e009883a 	mov	r4,fp
   475fc:	1023883a 	mov	r17,r2
   47600:	00488c40 	call	488c4 <__multadd>
   47604:	1029883a 	mov	r20,r2
   47608:	b027883a 	mov	r19,r22
   4760c:	003fc006 	br	47510 <_gp+0xfffebde8>
   47610:	9011883a 	mov	r8,r18
   47614:	00800e0e 	bge	zero,r2,47650 <_dtoa_r+0xf70>
   47618:	800b883a 	mov	r5,r16
   4761c:	01800044 	movi	r6,1
   47620:	e009883a 	mov	r4,fp
   47624:	da001715 	stw	r8,92(sp)
   47628:	00490300 	call	49030 <__lshift>
   4762c:	a80b883a 	mov	r5,r21
   47630:	1009883a 	mov	r4,r2
   47634:	1021883a 	mov	r16,r2
   47638:	00491780 	call	49178 <__mcmp>
   4763c:	da001717 	ldw	r8,92(sp)
   47640:	0081960e 	bge	zero,r2,47c9c <_dtoa_r+0x15bc>
   47644:	00800e44 	movi	r2,57
   47648:	40817026 	beq	r8,r2,47c0c <_dtoa_r+0x152c>
   4764c:	ba000c44 	addi	r8,r23,49
   47650:	8825883a 	mov	r18,r17
   47654:	9dc00044 	addi	r23,r19,1
   47658:	9a000005 	stb	r8,0(r19)
   4765c:	a023883a 	mov	r17,r20
   47660:	dc000915 	stw	r16,36(sp)
   47664:	003f2406 	br	472f8 <_gp+0xfffebbd0>
   47668:	00800e44 	movi	r2,57
   4766c:	9011883a 	mov	r8,r18
   47670:	90816626 	beq	r18,r2,47c0c <_dtoa_r+0x152c>
   47674:	05bff516 	blt	zero,r22,4764c <_gp+0xfffebf24>
   47678:	003ff506 	br	47650 <_gp+0xfffebf28>
   4767c:	00488c40 	call	488c4 <__multadd>
   47680:	1023883a 	mov	r17,r2
   47684:	1029883a 	mov	r20,r2
   47688:	003fdf06 	br	47608 <_gp+0xfffebee0>
   4768c:	e009883a 	mov	r4,fp
   47690:	004889c0 	call	4889c <_Bfree>
   47694:	00800044 	movi	r2,1
   47698:	003fbc06 	br	4758c <_gp+0xfffebe64>
   4769c:	a80b883a 	mov	r5,r21
   476a0:	8009883a 	mov	r4,r16
   476a4:	00491780 	call	49178 <__mcmp>
   476a8:	103edb0e 	bge	r2,zero,47218 <_gp+0xfffebaf0>
   476ac:	800b883a 	mov	r5,r16
   476b0:	000f883a 	mov	r7,zero
   476b4:	01800284 	movi	r6,10
   476b8:	e009883a 	mov	r4,fp
   476bc:	00488c40 	call	488c4 <__multadd>
   476c0:	1021883a 	mov	r16,r2
   476c4:	d8800517 	ldw	r2,20(sp)
   476c8:	d8c00b17 	ldw	r3,44(sp)
   476cc:	10bfffc4 	addi	r2,r2,-1
   476d0:	d8800515 	stw	r2,20(sp)
   476d4:	183f761e 	bne	r3,zero,474b0 <_gp+0xfffebd88>
   476d8:	d9000c17 	ldw	r4,48(sp)
   476dc:	0101730e 	bge	zero,r4,47cac <_dtoa_r+0x15cc>
   476e0:	d9000615 	stw	r4,24(sp)
   476e4:	003ed006 	br	47228 <_gp+0xfffebb00>
   476e8:	00800084 	movi	r2,2
   476ec:	3081861e 	bne	r6,r2,47d08 <_dtoa_r+0x1628>
   476f0:	d8000b15 	stw	zero,44(sp)
   476f4:	003f3c06 	br	473e8 <_gp+0xfffebcc0>
   476f8:	dc000917 	ldw	r16,36(sp)
   476fc:	003e9206 	br	47148 <_gp+0xfffeba20>
   47700:	d9c00317 	ldw	r7,12(sp)
   47704:	00800084 	movi	r2,2
   47708:	11fec50e 	bge	r2,r7,47220 <_gp+0xfffebaf8>
   4770c:	d9000617 	ldw	r4,24(sp)
   47710:	20013c1e 	bne	r4,zero,47c04 <_dtoa_r+0x1524>
   47714:	a80b883a 	mov	r5,r21
   47718:	000f883a 	mov	r7,zero
   4771c:	01800144 	movi	r6,5
   47720:	e009883a 	mov	r4,fp
   47724:	00488c40 	call	488c4 <__multadd>
   47728:	100b883a 	mov	r5,r2
   4772c:	8009883a 	mov	r4,r16
   47730:	102b883a 	mov	r21,r2
   47734:	00491780 	call	49178 <__mcmp>
   47738:	dc000915 	stw	r16,36(sp)
   4773c:	00bf410e 	bge	zero,r2,47444 <_gp+0xfffebd1c>
   47740:	d9c00717 	ldw	r7,28(sp)
   47744:	00800c44 	movi	r2,49
   47748:	38800005 	stb	r2,0(r7)
   4774c:	d8800517 	ldw	r2,20(sp)
   47750:	3dc00044 	addi	r23,r7,1
   47754:	10800044 	addi	r2,r2,1
   47758:	d8800515 	stw	r2,20(sp)
   4775c:	003f3d06 	br	47454 <_gp+0xfffebd2c>
   47760:	d9800517 	ldw	r6,20(sp)
   47764:	d9c00717 	ldw	r7,28(sp)
   47768:	00800c44 	movi	r2,49
   4776c:	31800044 	addi	r6,r6,1
   47770:	d9800515 	stw	r6,20(sp)
   47774:	38800005 	stb	r2,0(r7)
   47778:	003edf06 	br	472f8 <_gp+0xfffebbd0>
   4777c:	d8000b15 	stw	zero,44(sp)
   47780:	003c9f06 	br	46a00 <_gp+0xfffeb2d8>
   47784:	903e7e1e 	bne	r18,zero,47180 <_gp+0xfffeba58>
   47788:	00800434 	movhi	r2,16
   4778c:	10bfffc4 	addi	r2,r2,-1
   47790:	9884703a 	and	r2,r19,r2
   47794:	1000ea1e 	bne	r2,zero,47b40 <_dtoa_r+0x1460>
   47798:	9cdffc2c 	andhi	r19,r19,32752
   4779c:	9800e826 	beq	r19,zero,47b40 <_dtoa_r+0x1460>
   477a0:	d9c00817 	ldw	r7,32(sp)
   477a4:	b5800044 	addi	r22,r22,1
   477a8:	04c00044 	movi	r19,1
   477ac:	39c00044 	addi	r7,r7,1
   477b0:	d9c00815 	stw	r7,32(sp)
   477b4:	d8800d17 	ldw	r2,52(sp)
   477b8:	103e721e 	bne	r2,zero,47184 <_gp+0xfffeba5c>
   477bc:	00800044 	movi	r2,1
   477c0:	003e7906 	br	471a8 <_gp+0xfffeba80>
   477c4:	8009883a 	mov	r4,r16
   477c8:	004e4300 	call	4e430 <__floatsidf>
   477cc:	d9800f17 	ldw	r6,60(sp)
   477d0:	d9c01017 	ldw	r7,64(sp)
   477d4:	1009883a 	mov	r4,r2
   477d8:	180b883a 	mov	r5,r3
   477dc:	004d2480 	call	4d248 <__muldf3>
   477e0:	000d883a 	mov	r6,zero
   477e4:	01d00734 	movhi	r7,16412
   477e8:	1009883a 	mov	r4,r2
   477ec:	180b883a 	mov	r5,r3
   477f0:	004c7440 	call	4c744 <__adddf3>
   477f4:	047f3034 	movhi	r17,64704
   477f8:	1021883a 	mov	r16,r2
   477fc:	1c63883a 	add	r17,r3,r17
   47800:	d9000f17 	ldw	r4,60(sp)
   47804:	d9401017 	ldw	r5,64(sp)
   47808:	000d883a 	mov	r6,zero
   4780c:	01d00534 	movhi	r7,16404
   47810:	004dab40 	call	4dab4 <__subdf3>
   47814:	800d883a 	mov	r6,r16
   47818:	880f883a 	mov	r7,r17
   4781c:	1009883a 	mov	r4,r2
   47820:	180b883a 	mov	r5,r3
   47824:	102b883a 	mov	r21,r2
   47828:	1829883a 	mov	r20,r3
   4782c:	004d0780 	call	4d078 <__gedf2>
   47830:	00806c16 	blt	zero,r2,479e4 <_dtoa_r+0x1304>
   47834:	89e0003c 	xorhi	r7,r17,32768
   47838:	800d883a 	mov	r6,r16
   4783c:	a809883a 	mov	r4,r21
   47840:	a00b883a 	mov	r5,r20
   47844:	004d1540 	call	4d154 <__ledf2>
   47848:	103d7e0e 	bge	r2,zero,46e44 <_gp+0xfffeb71c>
   4784c:	002b883a 	mov	r21,zero
   47850:	0023883a 	mov	r17,zero
   47854:	003efb06 	br	47444 <_gp+0xfffebd1c>
   47858:	d8800717 	ldw	r2,28(sp)
   4785c:	003bd006 	br	467a0 <_gp+0xfffeb078>
   47860:	d9000a17 	ldw	r4,40(sp)
   47864:	d9800d17 	ldw	r6,52(sp)
   47868:	dd400a15 	stw	r21,40(sp)
   4786c:	a905c83a 	sub	r2,r21,r4
   47870:	308d883a 	add	r6,r6,r2
   47874:	d9800d15 	stw	r6,52(sp)
   47878:	002b883a 	mov	r21,zero
   4787c:	003e0606 	br	47098 <_gp+0xfffeb970>
   47880:	9023883a 	mov	r17,r18
   47884:	9829883a 	mov	r20,r19
   47888:	04000084 	movi	r16,2
   4788c:	003c9206 	br	46ad8 <_gp+0xfffeb3b0>
   47890:	04000044 	movi	r16,1
   47894:	dc000c15 	stw	r16,48(sp)
   47898:	dc000615 	stw	r16,24(sp)
   4789c:	dc002215 	stw	r16,136(sp)
   478a0:	e0001115 	stw	zero,68(fp)
   478a4:	000b883a 	mov	r5,zero
   478a8:	003c6906 	br	46a50 <_gp+0xfffeb328>
   478ac:	3021883a 	mov	r16,r6
   478b0:	003ffb06 	br	478a0 <_gp+0xfffec178>
   478b4:	1000021e 	bne	r2,zero,478c0 <_dtoa_r+0x11e0>
   478b8:	4200004c 	andi	r8,r8,1
   478bc:	403e7d1e 	bne	r8,zero,472b4 <_gp+0xfffebb8c>
   478c0:	01000c04 	movi	r4,48
   478c4:	00000106 	br	478cc <_dtoa_r+0x11ec>
   478c8:	102f883a 	mov	r23,r2
   478cc:	b8bfffc4 	addi	r2,r23,-1
   478d0:	10c00007 	ldb	r3,0(r2)
   478d4:	193ffc26 	beq	r3,r4,478c8 <_gp+0xfffec1a0>
   478d8:	003e8706 	br	472f8 <_gp+0xfffebbd0>
   478dc:	d8800517 	ldw	r2,20(sp)
   478e0:	00a3c83a 	sub	r17,zero,r2
   478e4:	8800a426 	beq	r17,zero,47b78 <_dtoa_r+0x1498>
   478e8:	888003cc 	andi	r2,r17,15
   478ec:	100490fa 	slli	r2,r2,3
   478f0:	00c00174 	movhi	r3,5
   478f4:	18c6a404 	addi	r3,r3,6800
   478f8:	1885883a 	add	r2,r3,r2
   478fc:	11800017 	ldw	r6,0(r2)
   47900:	11c00117 	ldw	r7,4(r2)
   47904:	9009883a 	mov	r4,r18
   47908:	980b883a 	mov	r5,r19
   4790c:	8823d13a 	srai	r17,r17,4
   47910:	004d2480 	call	4d248 <__muldf3>
   47914:	d8800f15 	stw	r2,60(sp)
   47918:	d8c01015 	stw	r3,64(sp)
   4791c:	8800e826 	beq	r17,zero,47cc0 <_dtoa_r+0x15e0>
   47920:	05000174 	movhi	r20,5
   47924:	a5069a04 	addi	r20,r20,6760
   47928:	04000084 	movi	r16,2
   4792c:	8980004c 	andi	r6,r17,1
   47930:	1009883a 	mov	r4,r2
   47934:	8823d07a 	srai	r17,r17,1
   47938:	180b883a 	mov	r5,r3
   4793c:	30000426 	beq	r6,zero,47950 <_dtoa_r+0x1270>
   47940:	a1800017 	ldw	r6,0(r20)
   47944:	a1c00117 	ldw	r7,4(r20)
   47948:	84000044 	addi	r16,r16,1
   4794c:	004d2480 	call	4d248 <__muldf3>
   47950:	a5000204 	addi	r20,r20,8
   47954:	883ff51e 	bne	r17,zero,4792c <_gp+0xfffec204>
   47958:	d8800f15 	stw	r2,60(sp)
   4795c:	d8c01015 	stw	r3,64(sp)
   47960:	003c7606 	br	46b3c <_gp+0xfffeb414>
   47964:	00c00c04 	movi	r3,48
   47968:	10c00005 	stb	r3,0(r2)
   4796c:	d8c00517 	ldw	r3,20(sp)
   47970:	bd3fffc3 	ldbu	r20,-1(r23)
   47974:	18c00044 	addi	r3,r3,1
   47978:	d8c00515 	stw	r3,20(sp)
   4797c:	003db906 	br	47064 <_gp+0xfffeb93c>
   47980:	89400117 	ldw	r5,4(r17)
   47984:	e009883a 	mov	r4,fp
   47988:	00487f40 	call	487f4 <_Balloc>
   4798c:	89800417 	ldw	r6,16(r17)
   47990:	89400304 	addi	r5,r17,12
   47994:	11000304 	addi	r4,r2,12
   47998:	31800084 	addi	r6,r6,2
   4799c:	318d883a 	add	r6,r6,r6
   479a0:	318d883a 	add	r6,r6,r6
   479a4:	1027883a 	mov	r19,r2
   479a8:	00485500 	call	48550 <memcpy>
   479ac:	01800044 	movi	r6,1
   479b0:	980b883a 	mov	r5,r19
   479b4:	e009883a 	mov	r4,fp
   479b8:	00490300 	call	49030 <__lshift>
   479bc:	1029883a 	mov	r20,r2
   479c0:	003ecc06 	br	474f4 <_gp+0xfffebdcc>
   479c4:	00800e44 	movi	r2,57
   479c8:	90809026 	beq	r18,r2,47c0c <_dtoa_r+0x152c>
   479cc:	92000044 	addi	r8,r18,1
   479d0:	003f1f06 	br	47650 <_gp+0xfffebf28>
   479d4:	9011883a 	mov	r8,r18
   479d8:	8825883a 	mov	r18,r17
   479dc:	a023883a 	mov	r17,r20
   479e0:	003e2906 	br	47288 <_gp+0xfffebb60>
   479e4:	002b883a 	mov	r21,zero
   479e8:	0023883a 	mov	r17,zero
   479ec:	003f5406 	br	47740 <_gp+0xfffec018>
   479f0:	61bfffc4 	addi	r6,r12,-1
   479f4:	300490fa 	slli	r2,r6,3
   479f8:	00c00174 	movhi	r3,5
   479fc:	18c6a404 	addi	r3,r3,6800
   47a00:	1885883a 	add	r2,r3,r2
   47a04:	11000017 	ldw	r4,0(r2)
   47a08:	11400117 	ldw	r5,4(r2)
   47a0c:	d8800717 	ldw	r2,28(sp)
   47a10:	880f883a 	mov	r7,r17
   47a14:	d9801215 	stw	r6,72(sp)
   47a18:	800d883a 	mov	r6,r16
   47a1c:	db001615 	stw	r12,88(sp)
   47a20:	15c00044 	addi	r23,r2,1
   47a24:	004d2480 	call	4d248 <__muldf3>
   47a28:	d9401017 	ldw	r5,64(sp)
   47a2c:	d9000f17 	ldw	r4,60(sp)
   47a30:	d8c01515 	stw	r3,84(sp)
   47a34:	d8801415 	stw	r2,80(sp)
   47a38:	004e3b00 	call	4e3b0 <__fixdfsi>
   47a3c:	1009883a 	mov	r4,r2
   47a40:	1021883a 	mov	r16,r2
   47a44:	004e4300 	call	4e430 <__floatsidf>
   47a48:	d9000f17 	ldw	r4,60(sp)
   47a4c:	d9401017 	ldw	r5,64(sp)
   47a50:	100d883a 	mov	r6,r2
   47a54:	180f883a 	mov	r7,r3
   47a58:	004dab40 	call	4dab4 <__subdf3>
   47a5c:	1829883a 	mov	r20,r3
   47a60:	d8c00717 	ldw	r3,28(sp)
   47a64:	84000c04 	addi	r16,r16,48
   47a68:	1023883a 	mov	r17,r2
   47a6c:	1c000005 	stb	r16,0(r3)
   47a70:	db001617 	ldw	r12,88(sp)
   47a74:	00800044 	movi	r2,1
   47a78:	60802226 	beq	r12,r2,47b04 <_dtoa_r+0x1424>
   47a7c:	d9c00717 	ldw	r7,28(sp)
   47a80:	8805883a 	mov	r2,r17
   47a84:	b82b883a 	mov	r21,r23
   47a88:	3b19883a 	add	r12,r7,r12
   47a8c:	6023883a 	mov	r17,r12
   47a90:	a007883a 	mov	r3,r20
   47a94:	dc800f15 	stw	r18,60(sp)
   47a98:	000d883a 	mov	r6,zero
   47a9c:	01d00934 	movhi	r7,16420
   47aa0:	1009883a 	mov	r4,r2
   47aa4:	180b883a 	mov	r5,r3
   47aa8:	004d2480 	call	4d248 <__muldf3>
   47aac:	180b883a 	mov	r5,r3
   47ab0:	1009883a 	mov	r4,r2
   47ab4:	1829883a 	mov	r20,r3
   47ab8:	1025883a 	mov	r18,r2
   47abc:	004e3b00 	call	4e3b0 <__fixdfsi>
   47ac0:	1009883a 	mov	r4,r2
   47ac4:	1021883a 	mov	r16,r2
   47ac8:	004e4300 	call	4e430 <__floatsidf>
   47acc:	100d883a 	mov	r6,r2
   47ad0:	180f883a 	mov	r7,r3
   47ad4:	9009883a 	mov	r4,r18
   47ad8:	a00b883a 	mov	r5,r20
   47adc:	84000c04 	addi	r16,r16,48
   47ae0:	004dab40 	call	4dab4 <__subdf3>
   47ae4:	ad400044 	addi	r21,r21,1
   47ae8:	ac3fffc5 	stb	r16,-1(r21)
   47aec:	ac7fea1e 	bne	r21,r17,47a98 <_gp+0xfffec370>
   47af0:	1023883a 	mov	r17,r2
   47af4:	d8801217 	ldw	r2,72(sp)
   47af8:	dc800f17 	ldw	r18,60(sp)
   47afc:	1829883a 	mov	r20,r3
   47b00:	b8af883a 	add	r23,r23,r2
   47b04:	d9001417 	ldw	r4,80(sp)
   47b08:	d9401517 	ldw	r5,84(sp)
   47b0c:	000d883a 	mov	r6,zero
   47b10:	01cff834 	movhi	r7,16352
   47b14:	004c7440 	call	4c744 <__adddf3>
   47b18:	880d883a 	mov	r6,r17
   47b1c:	a00f883a 	mov	r7,r20
   47b20:	1009883a 	mov	r4,r2
   47b24:	180b883a 	mov	r5,r3
   47b28:	004d1540 	call	4d154 <__ledf2>
   47b2c:	10003e0e 	bge	r2,zero,47c28 <_dtoa_r+0x1548>
   47b30:	d9001317 	ldw	r4,76(sp)
   47b34:	bd3fffc3 	ldbu	r20,-1(r23)
   47b38:	d9000515 	stw	r4,20(sp)
   47b3c:	003d3b06 	br	4702c <_gp+0xfffeb904>
   47b40:	0027883a 	mov	r19,zero
   47b44:	003f1b06 	br	477b4 <_gp+0xfffec08c>
   47b48:	d8800817 	ldw	r2,32(sp)
   47b4c:	11e9c83a 	sub	r20,r2,r7
   47b50:	0005883a 	mov	r2,zero
   47b54:	003d5406 	br	470a8 <_gp+0xfffeb980>
   47b58:	00800044 	movi	r2,1
   47b5c:	003dc706 	br	4727c <_gp+0xfffebb54>
   47b60:	d8c00217 	ldw	r3,8(sp)
   47b64:	00800d84 	movi	r2,54
   47b68:	dd400a17 	ldw	r21,40(sp)
   47b6c:	10c5c83a 	sub	r2,r2,r3
   47b70:	dd000817 	ldw	r20,32(sp)
   47b74:	003d4c06 	br	470a8 <_gp+0xfffeb980>
   47b78:	dc800f15 	stw	r18,60(sp)
   47b7c:	dcc01015 	stw	r19,64(sp)
   47b80:	04000084 	movi	r16,2
   47b84:	003bed06 	br	46b3c <_gp+0xfffeb414>
   47b88:	d9000617 	ldw	r4,24(sp)
   47b8c:	203f0d26 	beq	r4,zero,477c4 <_gp+0xfffec09c>
   47b90:	d9800c17 	ldw	r6,48(sp)
   47b94:	01bcab0e 	bge	zero,r6,46e44 <_gp+0xfffeb71c>
   47b98:	d9401017 	ldw	r5,64(sp)
   47b9c:	d9000f17 	ldw	r4,60(sp)
   47ba0:	000d883a 	mov	r6,zero
   47ba4:	01d00934 	movhi	r7,16420
   47ba8:	004d2480 	call	4d248 <__muldf3>
   47bac:	81000044 	addi	r4,r16,1
   47bb0:	d8800f15 	stw	r2,60(sp)
   47bb4:	d8c01015 	stw	r3,64(sp)
   47bb8:	004e4300 	call	4e430 <__floatsidf>
   47bbc:	d9800f17 	ldw	r6,60(sp)
   47bc0:	d9c01017 	ldw	r7,64(sp)
   47bc4:	1009883a 	mov	r4,r2
   47bc8:	180b883a 	mov	r5,r3
   47bcc:	004d2480 	call	4d248 <__muldf3>
   47bd0:	01d00734 	movhi	r7,16412
   47bd4:	000d883a 	mov	r6,zero
   47bd8:	1009883a 	mov	r4,r2
   47bdc:	180b883a 	mov	r5,r3
   47be0:	004c7440 	call	4c744 <__adddf3>
   47be4:	d9c00517 	ldw	r7,20(sp)
   47be8:	047f3034 	movhi	r17,64704
   47bec:	1021883a 	mov	r16,r2
   47bf0:	39ffffc4 	addi	r7,r7,-1
   47bf4:	d9c01315 	stw	r7,76(sp)
   47bf8:	1c63883a 	add	r17,r3,r17
   47bfc:	db000c17 	ldw	r12,48(sp)
   47c00:	003bea06 	br	46bac <_gp+0xfffeb484>
   47c04:	dc000915 	stw	r16,36(sp)
   47c08:	003e0e06 	br	47444 <_gp+0xfffebd1c>
   47c0c:	01000e44 	movi	r4,57
   47c10:	8825883a 	mov	r18,r17
   47c14:	9dc00044 	addi	r23,r19,1
   47c18:	99000005 	stb	r4,0(r19)
   47c1c:	a023883a 	mov	r17,r20
   47c20:	dc000915 	stw	r16,36(sp)
   47c24:	003da406 	br	472b8 <_gp+0xfffebb90>
   47c28:	d9801417 	ldw	r6,80(sp)
   47c2c:	d9c01517 	ldw	r7,84(sp)
   47c30:	0009883a 	mov	r4,zero
   47c34:	014ff834 	movhi	r5,16352
   47c38:	004dab40 	call	4dab4 <__subdf3>
   47c3c:	880d883a 	mov	r6,r17
   47c40:	a00f883a 	mov	r7,r20
   47c44:	1009883a 	mov	r4,r2
   47c48:	180b883a 	mov	r5,r3
   47c4c:	004d0780 	call	4d078 <__gedf2>
   47c50:	00bc7c0e 	bge	zero,r2,46e44 <_gp+0xfffeb71c>
   47c54:	01000c04 	movi	r4,48
   47c58:	00000106 	br	47c60 <_dtoa_r+0x1580>
   47c5c:	102f883a 	mov	r23,r2
   47c60:	b8bfffc4 	addi	r2,r23,-1
   47c64:	10c00007 	ldb	r3,0(r2)
   47c68:	193ffc26 	beq	r3,r4,47c5c <_gp+0xfffec534>
   47c6c:	d9801317 	ldw	r6,76(sp)
   47c70:	d9800515 	stw	r6,20(sp)
   47c74:	003c4406 	br	46d88 <_gp+0xfffeb660>
   47c78:	d9801317 	ldw	r6,76(sp)
   47c7c:	d9800515 	stw	r6,20(sp)
   47c80:	003cea06 	br	4702c <_gp+0xfffeb904>
   47c84:	dd800f17 	ldw	r22,60(sp)
   47c88:	dcc01017 	ldw	r19,64(sp)
   47c8c:	dc801217 	ldw	r18,72(sp)
   47c90:	003c6c06 	br	46e44 <_gp+0xfffeb71c>
   47c94:	903e031e 	bne	r18,zero,474a4 <_gp+0xfffebd7c>
   47c98:	003ebb06 	br	47788 <_gp+0xfffec060>
   47c9c:	103e6c1e 	bne	r2,zero,47650 <_gp+0xfffebf28>
   47ca0:	4080004c 	andi	r2,r8,1
   47ca4:	103e6a26 	beq	r2,zero,47650 <_gp+0xfffebf28>
   47ca8:	003e6606 	br	47644 <_gp+0xfffebf1c>
   47cac:	d8c00317 	ldw	r3,12(sp)
   47cb0:	00800084 	movi	r2,2
   47cb4:	10c02916 	blt	r2,r3,47d5c <_dtoa_r+0x167c>
   47cb8:	d9000c17 	ldw	r4,48(sp)
   47cbc:	003e8806 	br	476e0 <_gp+0xfffebfb8>
   47cc0:	04000084 	movi	r16,2
   47cc4:	003b9d06 	br	46b3c <_gp+0xfffeb414>
   47cc8:	d9001317 	ldw	r4,76(sp)
   47ccc:	d9000515 	stw	r4,20(sp)
   47cd0:	003cd606 	br	4702c <_gp+0xfffeb904>
   47cd4:	d8801317 	ldw	r2,76(sp)
   47cd8:	d8800515 	stw	r2,20(sp)
   47cdc:	003c2a06 	br	46d88 <_gp+0xfffeb660>
   47ce0:	d9800317 	ldw	r6,12(sp)
   47ce4:	00800084 	movi	r2,2
   47ce8:	11801516 	blt	r2,r6,47d40 <_dtoa_r+0x1660>
   47cec:	d9c00c17 	ldw	r7,48(sp)
   47cf0:	d9c00615 	stw	r7,24(sp)
   47cf4:	003df706 	br	474d4 <_gp+0xfffebdac>
   47cf8:	193d3926 	beq	r3,r4,471e0 <_gp+0xfffebab8>
   47cfc:	00c00f04 	movi	r3,60
   47d00:	1885c83a 	sub	r2,r3,r2
   47d04:	003ddf06 	br	47484 <_gp+0xfffebd5c>
   47d08:	e009883a 	mov	r4,fp
   47d0c:	e0001115 	stw	zero,68(fp)
   47d10:	000b883a 	mov	r5,zero
   47d14:	00487f40 	call	487f4 <_Balloc>
   47d18:	d8800715 	stw	r2,28(sp)
   47d1c:	d8c00717 	ldw	r3,28(sp)
   47d20:	00bfffc4 	movi	r2,-1
   47d24:	01000044 	movi	r4,1
   47d28:	d8800c15 	stw	r2,48(sp)
   47d2c:	e0c01015 	stw	r3,64(fp)
   47d30:	d9000b15 	stw	r4,44(sp)
   47d34:	d8800615 	stw	r2,24(sp)
   47d38:	d8002215 	stw	zero,136(sp)
   47d3c:	003c4106 	br	46e44 <_gp+0xfffeb71c>
   47d40:	d8c00c17 	ldw	r3,48(sp)
   47d44:	d8c00615 	stw	r3,24(sp)
   47d48:	003e7006 	br	4770c <_gp+0xfffebfe4>
   47d4c:	04400044 	movi	r17,1
   47d50:	003b2006 	br	469d4 <_gp+0xfffeb2ac>
   47d54:	000b883a 	mov	r5,zero
   47d58:	003b3d06 	br	46a50 <_gp+0xfffeb328>
   47d5c:	d8800c17 	ldw	r2,48(sp)
   47d60:	d8800615 	stw	r2,24(sp)
   47d64:	003e6906 	br	4770c <_gp+0xfffebfe4>

00047d68 <__sflags>:
   47d68:	28800007 	ldb	r2,0(r5)
   47d6c:	00c01c84 	movi	r3,114
   47d70:	10c02426 	beq	r2,r3,47e04 <__sflags+0x9c>
   47d74:	00c01dc4 	movi	r3,119
   47d78:	10c01e26 	beq	r2,r3,47df4 <__sflags+0x8c>
   47d7c:	00c01844 	movi	r3,97
   47d80:	10c00426 	beq	r2,r3,47d94 <__sflags+0x2c>
   47d84:	00800584 	movi	r2,22
   47d88:	20800015 	stw	r2,0(r4)
   47d8c:	0005883a 	mov	r2,zero
   47d90:	f800283a 	ret
   47d94:	02c08204 	movi	r11,520
   47d98:	01000044 	movi	r4,1
   47d9c:	00804204 	movi	r2,264
   47da0:	01c00ac4 	movi	r7,43
   47da4:	02bff8c4 	movi	r10,-29
   47da8:	027fff04 	movi	r9,-4
   47dac:	02001e04 	movi	r8,120
   47db0:	29400044 	addi	r5,r5,1
   47db4:	28c00007 	ldb	r3,0(r5)
   47db8:	18000626 	beq	r3,zero,47dd4 <__sflags+0x6c>
   47dbc:	19c00826 	beq	r3,r7,47de0 <__sflags+0x78>
   47dc0:	1a3ffb1e 	bne	r3,r8,47db0 <_gp+0xfffec688>
   47dc4:	29400044 	addi	r5,r5,1
   47dc8:	28c00007 	ldb	r3,0(r5)
   47dcc:	21020014 	ori	r4,r4,2048
   47dd0:	183ffa1e 	bne	r3,zero,47dbc <_gp+0xfffec694>
   47dd4:	22c8b03a 	or	r4,r4,r11
   47dd8:	31000015 	stw	r4,0(r6)
   47ddc:	f800283a 	ret
   47de0:	1284703a 	and	r2,r2,r10
   47de4:	2248703a 	and	r4,r4,r9
   47de8:	10800414 	ori	r2,r2,16
   47dec:	21000094 	ori	r4,r4,2
   47df0:	003fef06 	br	47db0 <_gp+0xfffec688>
   47df4:	02c18004 	movi	r11,1536
   47df8:	01000044 	movi	r4,1
   47dfc:	00800204 	movi	r2,8
   47e00:	003fe706 	br	47da0 <_gp+0xfffec678>
   47e04:	0017883a 	mov	r11,zero
   47e08:	0009883a 	mov	r4,zero
   47e0c:	00800104 	movi	r2,4
   47e10:	003fe306 	br	47da0 <_gp+0xfffec678>

00047e14 <__sfvwrite_r>:
   47e14:	30800217 	ldw	r2,8(r6)
   47e18:	10006726 	beq	r2,zero,47fb8 <__sfvwrite_r+0x1a4>
   47e1c:	28c0030b 	ldhu	r3,12(r5)
   47e20:	defff404 	addi	sp,sp,-48
   47e24:	dd400715 	stw	r21,28(sp)
   47e28:	dd000615 	stw	r20,24(sp)
   47e2c:	dc000215 	stw	r16,8(sp)
   47e30:	dfc00b15 	stw	ra,44(sp)
   47e34:	df000a15 	stw	fp,40(sp)
   47e38:	ddc00915 	stw	r23,36(sp)
   47e3c:	dd800815 	stw	r22,32(sp)
   47e40:	dcc00515 	stw	r19,20(sp)
   47e44:	dc800415 	stw	r18,16(sp)
   47e48:	dc400315 	stw	r17,12(sp)
   47e4c:	1880020c 	andi	r2,r3,8
   47e50:	2821883a 	mov	r16,r5
   47e54:	202b883a 	mov	r21,r4
   47e58:	3029883a 	mov	r20,r6
   47e5c:	10002726 	beq	r2,zero,47efc <__sfvwrite_r+0xe8>
   47e60:	28800417 	ldw	r2,16(r5)
   47e64:	10002526 	beq	r2,zero,47efc <__sfvwrite_r+0xe8>
   47e68:	1880008c 	andi	r2,r3,2
   47e6c:	a4400017 	ldw	r17,0(r20)
   47e70:	10002a26 	beq	r2,zero,47f1c <__sfvwrite_r+0x108>
   47e74:	05a00034 	movhi	r22,32768
   47e78:	0027883a 	mov	r19,zero
   47e7c:	0025883a 	mov	r18,zero
   47e80:	b5bf0004 	addi	r22,r22,-1024
   47e84:	980d883a 	mov	r6,r19
   47e88:	a809883a 	mov	r4,r21
   47e8c:	90004626 	beq	r18,zero,47fa8 <__sfvwrite_r+0x194>
   47e90:	900f883a 	mov	r7,r18
   47e94:	b480022e 	bgeu	r22,r18,47ea0 <__sfvwrite_r+0x8c>
   47e98:	01e00034 	movhi	r7,32768
   47e9c:	39ff0004 	addi	r7,r7,-1024
   47ea0:	80800917 	ldw	r2,36(r16)
   47ea4:	81400717 	ldw	r5,28(r16)
   47ea8:	103ee83a 	callr	r2
   47eac:	00805a0e 	bge	zero,r2,48018 <__sfvwrite_r+0x204>
   47eb0:	a0c00217 	ldw	r3,8(r20)
   47eb4:	98a7883a 	add	r19,r19,r2
   47eb8:	90a5c83a 	sub	r18,r18,r2
   47ebc:	1885c83a 	sub	r2,r3,r2
   47ec0:	a0800215 	stw	r2,8(r20)
   47ec4:	103fef1e 	bne	r2,zero,47e84 <_gp+0xfffec75c>
   47ec8:	0005883a 	mov	r2,zero
   47ecc:	dfc00b17 	ldw	ra,44(sp)
   47ed0:	df000a17 	ldw	fp,40(sp)
   47ed4:	ddc00917 	ldw	r23,36(sp)
   47ed8:	dd800817 	ldw	r22,32(sp)
   47edc:	dd400717 	ldw	r21,28(sp)
   47ee0:	dd000617 	ldw	r20,24(sp)
   47ee4:	dcc00517 	ldw	r19,20(sp)
   47ee8:	dc800417 	ldw	r18,16(sp)
   47eec:	dc400317 	ldw	r17,12(sp)
   47ef0:	dc000217 	ldw	r16,8(sp)
   47ef4:	dec00c04 	addi	sp,sp,48
   47ef8:	f800283a 	ret
   47efc:	800b883a 	mov	r5,r16
   47f00:	a809883a 	mov	r4,r21
   47f04:	00463100 	call	46310 <__swsetup_r>
   47f08:	1000ee1e 	bne	r2,zero,482c4 <__sfvwrite_r+0x4b0>
   47f0c:	80c0030b 	ldhu	r3,12(r16)
   47f10:	a4400017 	ldw	r17,0(r20)
   47f14:	1880008c 	andi	r2,r3,2
   47f18:	103fd61e 	bne	r2,zero,47e74 <_gp+0xfffec74c>
   47f1c:	1880004c 	andi	r2,r3,1
   47f20:	1000421e 	bne	r2,zero,4802c <__sfvwrite_r+0x218>
   47f24:	0039883a 	mov	fp,zero
   47f28:	0025883a 	mov	r18,zero
   47f2c:	90001a26 	beq	r18,zero,47f98 <__sfvwrite_r+0x184>
   47f30:	1880800c 	andi	r2,r3,512
   47f34:	84c00217 	ldw	r19,8(r16)
   47f38:	10002126 	beq	r2,zero,47fc0 <__sfvwrite_r+0x1ac>
   47f3c:	982f883a 	mov	r23,r19
   47f40:	94c09636 	bltu	r18,r19,4819c <__sfvwrite_r+0x388>
   47f44:	1881200c 	andi	r2,r3,1152
   47f48:	1000a11e 	bne	r2,zero,481d0 <__sfvwrite_r+0x3bc>
   47f4c:	81000017 	ldw	r4,0(r16)
   47f50:	b80d883a 	mov	r6,r23
   47f54:	e00b883a 	mov	r5,fp
   47f58:	00486980 	call	48698 <memmove>
   47f5c:	80c00217 	ldw	r3,8(r16)
   47f60:	81000017 	ldw	r4,0(r16)
   47f64:	9005883a 	mov	r2,r18
   47f68:	1ce7c83a 	sub	r19,r3,r19
   47f6c:	25cf883a 	add	r7,r4,r23
   47f70:	84c00215 	stw	r19,8(r16)
   47f74:	81c00015 	stw	r7,0(r16)
   47f78:	a0c00217 	ldw	r3,8(r20)
   47f7c:	e0b9883a 	add	fp,fp,r2
   47f80:	90a5c83a 	sub	r18,r18,r2
   47f84:	18a7c83a 	sub	r19,r3,r2
   47f88:	a4c00215 	stw	r19,8(r20)
   47f8c:	983fce26 	beq	r19,zero,47ec8 <_gp+0xfffec7a0>
   47f90:	80c0030b 	ldhu	r3,12(r16)
   47f94:	903fe61e 	bne	r18,zero,47f30 <_gp+0xfffec808>
   47f98:	8f000017 	ldw	fp,0(r17)
   47f9c:	8c800117 	ldw	r18,4(r17)
   47fa0:	8c400204 	addi	r17,r17,8
   47fa4:	003fe106 	br	47f2c <_gp+0xfffec804>
   47fa8:	8cc00017 	ldw	r19,0(r17)
   47fac:	8c800117 	ldw	r18,4(r17)
   47fb0:	8c400204 	addi	r17,r17,8
   47fb4:	003fb306 	br	47e84 <_gp+0xfffec75c>
   47fb8:	0005883a 	mov	r2,zero
   47fbc:	f800283a 	ret
   47fc0:	81000017 	ldw	r4,0(r16)
   47fc4:	80800417 	ldw	r2,16(r16)
   47fc8:	11005a36 	bltu	r2,r4,48134 <__sfvwrite_r+0x320>
   47fcc:	85c00517 	ldw	r23,20(r16)
   47fd0:	95c05836 	bltu	r18,r23,48134 <__sfvwrite_r+0x320>
   47fd4:	00a00034 	movhi	r2,32768
   47fd8:	10bfffc4 	addi	r2,r2,-1
   47fdc:	9009883a 	mov	r4,r18
   47fe0:	1480012e 	bgeu	r2,r18,47fe8 <__sfvwrite_r+0x1d4>
   47fe4:	1009883a 	mov	r4,r2
   47fe8:	b80b883a 	mov	r5,r23
   47fec:	00414b00 	call	414b0 <__divsi3>
   47ff0:	b80b883a 	mov	r5,r23
   47ff4:	1009883a 	mov	r4,r2
   47ff8:	00416640 	call	41664 <__mulsi3>
   47ffc:	81400717 	ldw	r5,28(r16)
   48000:	80c00917 	ldw	r3,36(r16)
   48004:	100f883a 	mov	r7,r2
   48008:	e00d883a 	mov	r6,fp
   4800c:	a809883a 	mov	r4,r21
   48010:	183ee83a 	callr	r3
   48014:	00bfd816 	blt	zero,r2,47f78 <_gp+0xfffec850>
   48018:	8080030b 	ldhu	r2,12(r16)
   4801c:	10801014 	ori	r2,r2,64
   48020:	8080030d 	sth	r2,12(r16)
   48024:	00bfffc4 	movi	r2,-1
   48028:	003fa806 	br	47ecc <_gp+0xfffec7a4>
   4802c:	0027883a 	mov	r19,zero
   48030:	0011883a 	mov	r8,zero
   48034:	0039883a 	mov	fp,zero
   48038:	0025883a 	mov	r18,zero
   4803c:	90001f26 	beq	r18,zero,480bc <__sfvwrite_r+0x2a8>
   48040:	40005a26 	beq	r8,zero,481ac <__sfvwrite_r+0x398>
   48044:	982d883a 	mov	r22,r19
   48048:	94c0012e 	bgeu	r18,r19,48050 <__sfvwrite_r+0x23c>
   4804c:	902d883a 	mov	r22,r18
   48050:	81000017 	ldw	r4,0(r16)
   48054:	80800417 	ldw	r2,16(r16)
   48058:	b02f883a 	mov	r23,r22
   4805c:	81c00517 	ldw	r7,20(r16)
   48060:	1100032e 	bgeu	r2,r4,48070 <__sfvwrite_r+0x25c>
   48064:	80c00217 	ldw	r3,8(r16)
   48068:	38c7883a 	add	r3,r7,r3
   4806c:	1d801816 	blt	r3,r22,480d0 <__sfvwrite_r+0x2bc>
   48070:	b1c03e16 	blt	r22,r7,4816c <__sfvwrite_r+0x358>
   48074:	80800917 	ldw	r2,36(r16)
   48078:	81400717 	ldw	r5,28(r16)
   4807c:	e00d883a 	mov	r6,fp
   48080:	da000115 	stw	r8,4(sp)
   48084:	a809883a 	mov	r4,r21
   48088:	103ee83a 	callr	r2
   4808c:	102f883a 	mov	r23,r2
   48090:	da000117 	ldw	r8,4(sp)
   48094:	00bfe00e 	bge	zero,r2,48018 <_gp+0xfffec8f0>
   48098:	9de7c83a 	sub	r19,r19,r23
   4809c:	98001f26 	beq	r19,zero,4811c <__sfvwrite_r+0x308>
   480a0:	a0800217 	ldw	r2,8(r20)
   480a4:	e5f9883a 	add	fp,fp,r23
   480a8:	95e5c83a 	sub	r18,r18,r23
   480ac:	15efc83a 	sub	r23,r2,r23
   480b0:	a5c00215 	stw	r23,8(r20)
   480b4:	b83f8426 	beq	r23,zero,47ec8 <_gp+0xfffec7a0>
   480b8:	903fe11e 	bne	r18,zero,48040 <_gp+0xfffec918>
   480bc:	8f000017 	ldw	fp,0(r17)
   480c0:	8c800117 	ldw	r18,4(r17)
   480c4:	0011883a 	mov	r8,zero
   480c8:	8c400204 	addi	r17,r17,8
   480cc:	003fdb06 	br	4803c <_gp+0xfffec914>
   480d0:	180d883a 	mov	r6,r3
   480d4:	e00b883a 	mov	r5,fp
   480d8:	da000115 	stw	r8,4(sp)
   480dc:	d8c00015 	stw	r3,0(sp)
   480e0:	00486980 	call	48698 <memmove>
   480e4:	d8c00017 	ldw	r3,0(sp)
   480e8:	80800017 	ldw	r2,0(r16)
   480ec:	800b883a 	mov	r5,r16
   480f0:	a809883a 	mov	r4,r21
   480f4:	10c5883a 	add	r2,r2,r3
   480f8:	80800015 	stw	r2,0(r16)
   480fc:	d8c00015 	stw	r3,0(sp)
   48100:	00419f80 	call	419f8 <_fflush_r>
   48104:	d8c00017 	ldw	r3,0(sp)
   48108:	da000117 	ldw	r8,4(sp)
   4810c:	103fc21e 	bne	r2,zero,48018 <_gp+0xfffec8f0>
   48110:	182f883a 	mov	r23,r3
   48114:	9de7c83a 	sub	r19,r19,r23
   48118:	983fe11e 	bne	r19,zero,480a0 <_gp+0xfffec978>
   4811c:	800b883a 	mov	r5,r16
   48120:	a809883a 	mov	r4,r21
   48124:	00419f80 	call	419f8 <_fflush_r>
   48128:	103fbb1e 	bne	r2,zero,48018 <_gp+0xfffec8f0>
   4812c:	0011883a 	mov	r8,zero
   48130:	003fdb06 	br	480a0 <_gp+0xfffec978>
   48134:	94c0012e 	bgeu	r18,r19,4813c <__sfvwrite_r+0x328>
   48138:	9027883a 	mov	r19,r18
   4813c:	980d883a 	mov	r6,r19
   48140:	e00b883a 	mov	r5,fp
   48144:	00486980 	call	48698 <memmove>
   48148:	80800217 	ldw	r2,8(r16)
   4814c:	80c00017 	ldw	r3,0(r16)
   48150:	14c5c83a 	sub	r2,r2,r19
   48154:	1cc7883a 	add	r3,r3,r19
   48158:	80800215 	stw	r2,8(r16)
   4815c:	80c00015 	stw	r3,0(r16)
   48160:	10004326 	beq	r2,zero,48270 <__sfvwrite_r+0x45c>
   48164:	9805883a 	mov	r2,r19
   48168:	003f8306 	br	47f78 <_gp+0xfffec850>
   4816c:	b00d883a 	mov	r6,r22
   48170:	e00b883a 	mov	r5,fp
   48174:	da000115 	stw	r8,4(sp)
   48178:	00486980 	call	48698 <memmove>
   4817c:	80800217 	ldw	r2,8(r16)
   48180:	80c00017 	ldw	r3,0(r16)
   48184:	da000117 	ldw	r8,4(sp)
   48188:	1585c83a 	sub	r2,r2,r22
   4818c:	1dad883a 	add	r22,r3,r22
   48190:	80800215 	stw	r2,8(r16)
   48194:	85800015 	stw	r22,0(r16)
   48198:	003fbf06 	br	48098 <_gp+0xfffec970>
   4819c:	81000017 	ldw	r4,0(r16)
   481a0:	9027883a 	mov	r19,r18
   481a4:	902f883a 	mov	r23,r18
   481a8:	003f6906 	br	47f50 <_gp+0xfffec828>
   481ac:	900d883a 	mov	r6,r18
   481b0:	01400284 	movi	r5,10
   481b4:	e009883a 	mov	r4,fp
   481b8:	004846c0 	call	4846c <memchr>
   481bc:	10003e26 	beq	r2,zero,482b8 <__sfvwrite_r+0x4a4>
   481c0:	10800044 	addi	r2,r2,1
   481c4:	1727c83a 	sub	r19,r2,fp
   481c8:	02000044 	movi	r8,1
   481cc:	003f9d06 	br	48044 <_gp+0xfffec91c>
   481d0:	80800517 	ldw	r2,20(r16)
   481d4:	81400417 	ldw	r5,16(r16)
   481d8:	81c00017 	ldw	r7,0(r16)
   481dc:	10a7883a 	add	r19,r2,r2
   481e0:	9885883a 	add	r2,r19,r2
   481e4:	1026d7fa 	srli	r19,r2,31
   481e8:	396dc83a 	sub	r22,r7,r5
   481ec:	b1000044 	addi	r4,r22,1
   481f0:	9885883a 	add	r2,r19,r2
   481f4:	1027d07a 	srai	r19,r2,1
   481f8:	2485883a 	add	r2,r4,r18
   481fc:	980d883a 	mov	r6,r19
   48200:	9880022e 	bgeu	r19,r2,4820c <__sfvwrite_r+0x3f8>
   48204:	1027883a 	mov	r19,r2
   48208:	100d883a 	mov	r6,r2
   4820c:	18c1000c 	andi	r3,r3,1024
   48210:	18001c26 	beq	r3,zero,48284 <__sfvwrite_r+0x470>
   48214:	300b883a 	mov	r5,r6
   48218:	a809883a 	mov	r4,r21
   4821c:	0042c340 	call	42c34 <_malloc_r>
   48220:	102f883a 	mov	r23,r2
   48224:	10002926 	beq	r2,zero,482cc <__sfvwrite_r+0x4b8>
   48228:	81400417 	ldw	r5,16(r16)
   4822c:	b00d883a 	mov	r6,r22
   48230:	1009883a 	mov	r4,r2
   48234:	00485500 	call	48550 <memcpy>
   48238:	8080030b 	ldhu	r2,12(r16)
   4823c:	00fedfc4 	movi	r3,-1153
   48240:	10c4703a 	and	r2,r2,r3
   48244:	10802014 	ori	r2,r2,128
   48248:	8080030d 	sth	r2,12(r16)
   4824c:	bd89883a 	add	r4,r23,r22
   48250:	9d8fc83a 	sub	r7,r19,r22
   48254:	85c00415 	stw	r23,16(r16)
   48258:	84c00515 	stw	r19,20(r16)
   4825c:	81000015 	stw	r4,0(r16)
   48260:	9027883a 	mov	r19,r18
   48264:	81c00215 	stw	r7,8(r16)
   48268:	902f883a 	mov	r23,r18
   4826c:	003f3806 	br	47f50 <_gp+0xfffec828>
   48270:	800b883a 	mov	r5,r16
   48274:	a809883a 	mov	r4,r21
   48278:	00419f80 	call	419f8 <_fflush_r>
   4827c:	103fb926 	beq	r2,zero,48164 <_gp+0xfffeca3c>
   48280:	003f6506 	br	48018 <_gp+0xfffec8f0>
   48284:	a809883a 	mov	r4,r21
   48288:	004990c0 	call	4990c <_realloc_r>
   4828c:	102f883a 	mov	r23,r2
   48290:	103fee1e 	bne	r2,zero,4824c <_gp+0xfffecb24>
   48294:	81400417 	ldw	r5,16(r16)
   48298:	a809883a 	mov	r4,r21
   4829c:	00421040 	call	42104 <_free_r>
   482a0:	8080030b 	ldhu	r2,12(r16)
   482a4:	00ffdfc4 	movi	r3,-129
   482a8:	1884703a 	and	r2,r3,r2
   482ac:	00c00304 	movi	r3,12
   482b0:	a8c00015 	stw	r3,0(r21)
   482b4:	003f5906 	br	4801c <_gp+0xfffec8f4>
   482b8:	94c00044 	addi	r19,r18,1
   482bc:	02000044 	movi	r8,1
   482c0:	003f6006 	br	48044 <_gp+0xfffec91c>
   482c4:	00bfffc4 	movi	r2,-1
   482c8:	003f0006 	br	47ecc <_gp+0xfffec7a4>
   482cc:	00800304 	movi	r2,12
   482d0:	a8800015 	stw	r2,0(r21)
   482d4:	8080030b 	ldhu	r2,12(r16)
   482d8:	003f5006 	br	4801c <_gp+0xfffec8f4>

000482dc <_isatty_r>:
   482dc:	defffd04 	addi	sp,sp,-12
   482e0:	dc000015 	stw	r16,0(sp)
   482e4:	04000174 	movhi	r16,5
   482e8:	dc400115 	stw	r17,4(sp)
   482ec:	8414ea04 	addi	r16,r16,21416
   482f0:	2023883a 	mov	r17,r4
   482f4:	2809883a 	mov	r4,r5
   482f8:	dfc00215 	stw	ra,8(sp)
   482fc:	80000015 	stw	zero,0(r16)
   48300:	004e77c0 	call	4e77c <isatty>
   48304:	00ffffc4 	movi	r3,-1
   48308:	10c00526 	beq	r2,r3,48320 <_isatty_r+0x44>
   4830c:	dfc00217 	ldw	ra,8(sp)
   48310:	dc400117 	ldw	r17,4(sp)
   48314:	dc000017 	ldw	r16,0(sp)
   48318:	dec00304 	addi	sp,sp,12
   4831c:	f800283a 	ret
   48320:	80c00017 	ldw	r3,0(r16)
   48324:	183ff926 	beq	r3,zero,4830c <_gp+0xfffecbe4>
   48328:	88c00015 	stw	r3,0(r17)
   4832c:	003ff706 	br	4830c <_gp+0xfffecbe4>

00048330 <_setlocale_r>:
   48330:	30001b26 	beq	r6,zero,483a0 <_setlocale_r+0x70>
   48334:	01400174 	movhi	r5,5
   48338:	defffe04 	addi	sp,sp,-8
   4833c:	29468a04 	addi	r5,r5,6696
   48340:	3009883a 	mov	r4,r6
   48344:	dc000015 	stw	r16,0(sp)
   48348:	dfc00115 	stw	ra,4(sp)
   4834c:	3021883a 	mov	r16,r6
   48350:	0049ee40 	call	49ee4 <strcmp>
   48354:	1000061e 	bne	r2,zero,48370 <_setlocale_r+0x40>
   48358:	00800174 	movhi	r2,5
   4835c:	10866b04 	addi	r2,r2,6572
   48360:	dfc00117 	ldw	ra,4(sp)
   48364:	dc000017 	ldw	r16,0(sp)
   48368:	dec00204 	addi	sp,sp,8
   4836c:	f800283a 	ret
   48370:	01400174 	movhi	r5,5
   48374:	29466b04 	addi	r5,r5,6572
   48378:	8009883a 	mov	r4,r16
   4837c:	0049ee40 	call	49ee4 <strcmp>
   48380:	103ff526 	beq	r2,zero,48358 <_gp+0xfffecc30>
   48384:	01400174 	movhi	r5,5
   48388:	29467504 	addi	r5,r5,6612
   4838c:	8009883a 	mov	r4,r16
   48390:	0049ee40 	call	49ee4 <strcmp>
   48394:	103ff026 	beq	r2,zero,48358 <_gp+0xfffecc30>
   48398:	0005883a 	mov	r2,zero
   4839c:	003ff006 	br	48360 <_gp+0xfffecc38>
   483a0:	00800174 	movhi	r2,5
   483a4:	10866b04 	addi	r2,r2,6572
   483a8:	f800283a 	ret

000483ac <__locale_charset>:
   483ac:	00800174 	movhi	r2,5
   483b0:	10892804 	addi	r2,r2,9376
   483b4:	f800283a 	ret

000483b8 <__locale_mb_cur_max>:
   483b8:	00800174 	movhi	r2,5
   483bc:	108dce04 	addi	r2,r2,14136
   483c0:	10800017 	ldw	r2,0(r2)
   483c4:	f800283a 	ret

000483c8 <__locale_msgcharset>:
   483c8:	00800174 	movhi	r2,5
   483cc:	10892004 	addi	r2,r2,9344
   483d0:	f800283a 	ret

000483d4 <__locale_cjk_lang>:
   483d4:	0005883a 	mov	r2,zero
   483d8:	f800283a 	ret

000483dc <_localeconv_r>:
   483dc:	00800174 	movhi	r2,5
   483e0:	10893004 	addi	r2,r2,9408
   483e4:	f800283a 	ret

000483e8 <setlocale>:
   483e8:	00800174 	movhi	r2,5
   483ec:	108dcb04 	addi	r2,r2,14124
   483f0:	280d883a 	mov	r6,r5
   483f4:	200b883a 	mov	r5,r4
   483f8:	11000017 	ldw	r4,0(r2)
   483fc:	00483301 	jmpi	48330 <_setlocale_r>

00048400 <localeconv>:
   48400:	00800174 	movhi	r2,5
   48404:	10893004 	addi	r2,r2,9408
   48408:	f800283a 	ret

0004840c <_lseek_r>:
   4840c:	defffd04 	addi	sp,sp,-12
   48410:	2805883a 	mov	r2,r5
   48414:	dc000015 	stw	r16,0(sp)
   48418:	04000174 	movhi	r16,5
   4841c:	dc400115 	stw	r17,4(sp)
   48420:	300b883a 	mov	r5,r6
   48424:	8414ea04 	addi	r16,r16,21416
   48428:	2023883a 	mov	r17,r4
   4842c:	380d883a 	mov	r6,r7
   48430:	1009883a 	mov	r4,r2
   48434:	dfc00215 	stw	ra,8(sp)
   48438:	80000015 	stw	zero,0(r16)
   4843c:	004e9500 	call	4e950 <lseek>
   48440:	00ffffc4 	movi	r3,-1
   48444:	10c00526 	beq	r2,r3,4845c <_lseek_r+0x50>
   48448:	dfc00217 	ldw	ra,8(sp)
   4844c:	dc400117 	ldw	r17,4(sp)
   48450:	dc000017 	ldw	r16,0(sp)
   48454:	dec00304 	addi	sp,sp,12
   48458:	f800283a 	ret
   4845c:	80c00017 	ldw	r3,0(r16)
   48460:	183ff926 	beq	r3,zero,48448 <_gp+0xfffecd20>
   48464:	88c00015 	stw	r3,0(r17)
   48468:	003ff706 	br	48448 <_gp+0xfffecd20>

0004846c <memchr>:
   4846c:	208000cc 	andi	r2,r4,3
   48470:	280f883a 	mov	r7,r5
   48474:	10003426 	beq	r2,zero,48548 <memchr+0xdc>
   48478:	30bfffc4 	addi	r2,r6,-1
   4847c:	30001a26 	beq	r6,zero,484e8 <memchr+0x7c>
   48480:	20c00003 	ldbu	r3,0(r4)
   48484:	29803fcc 	andi	r6,r5,255
   48488:	30c0051e 	bne	r6,r3,484a0 <memchr+0x34>
   4848c:	00001806 	br	484f0 <memchr+0x84>
   48490:	10001526 	beq	r2,zero,484e8 <memchr+0x7c>
   48494:	20c00003 	ldbu	r3,0(r4)
   48498:	10bfffc4 	addi	r2,r2,-1
   4849c:	30c01426 	beq	r6,r3,484f0 <memchr+0x84>
   484a0:	21000044 	addi	r4,r4,1
   484a4:	20c000cc 	andi	r3,r4,3
   484a8:	183ff91e 	bne	r3,zero,48490 <_gp+0xfffecd68>
   484ac:	020000c4 	movi	r8,3
   484b0:	40801136 	bltu	r8,r2,484f8 <memchr+0x8c>
   484b4:	10000c26 	beq	r2,zero,484e8 <memchr+0x7c>
   484b8:	20c00003 	ldbu	r3,0(r4)
   484bc:	29403fcc 	andi	r5,r5,255
   484c0:	28c00b26 	beq	r5,r3,484f0 <memchr+0x84>
   484c4:	20c00044 	addi	r3,r4,1
   484c8:	39803fcc 	andi	r6,r7,255
   484cc:	2089883a 	add	r4,r4,r2
   484d0:	00000306 	br	484e0 <memchr+0x74>
   484d4:	18c00044 	addi	r3,r3,1
   484d8:	197fffc3 	ldbu	r5,-1(r3)
   484dc:	31400526 	beq	r6,r5,484f4 <memchr+0x88>
   484e0:	1805883a 	mov	r2,r3
   484e4:	20fffb1e 	bne	r4,r3,484d4 <_gp+0xfffecdac>
   484e8:	0005883a 	mov	r2,zero
   484ec:	f800283a 	ret
   484f0:	2005883a 	mov	r2,r4
   484f4:	f800283a 	ret
   484f8:	28c03fcc 	andi	r3,r5,255
   484fc:	1812923a 	slli	r9,r3,8
   48500:	02ffbff4 	movhi	r11,65279
   48504:	02a02074 	movhi	r10,32897
   48508:	48d2b03a 	or	r9,r9,r3
   4850c:	4806943a 	slli	r3,r9,16
   48510:	5affbfc4 	addi	r11,r11,-257
   48514:	52a02004 	addi	r10,r10,-32640
   48518:	48d2b03a 	or	r9,r9,r3
   4851c:	20c00017 	ldw	r3,0(r4)
   48520:	48c6f03a 	xor	r3,r9,r3
   48524:	1acd883a 	add	r6,r3,r11
   48528:	00c6303a 	nor	r3,zero,r3
   4852c:	30c6703a 	and	r3,r6,r3
   48530:	1a86703a 	and	r3,r3,r10
   48534:	183fe01e 	bne	r3,zero,484b8 <_gp+0xfffecd90>
   48538:	10bfff04 	addi	r2,r2,-4
   4853c:	21000104 	addi	r4,r4,4
   48540:	40bff636 	bltu	r8,r2,4851c <_gp+0xfffecdf4>
   48544:	003fdb06 	br	484b4 <_gp+0xfffecd8c>
   48548:	3005883a 	mov	r2,r6
   4854c:	003fd706 	br	484ac <_gp+0xfffecd84>

00048550 <memcpy>:
   48550:	defffd04 	addi	sp,sp,-12
   48554:	dfc00215 	stw	ra,8(sp)
   48558:	dc400115 	stw	r17,4(sp)
   4855c:	dc000015 	stw	r16,0(sp)
   48560:	00c003c4 	movi	r3,15
   48564:	2005883a 	mov	r2,r4
   48568:	1980452e 	bgeu	r3,r6,48680 <memcpy+0x130>
   4856c:	2906b03a 	or	r3,r5,r4
   48570:	18c000cc 	andi	r3,r3,3
   48574:	1800441e 	bne	r3,zero,48688 <memcpy+0x138>
   48578:	347ffc04 	addi	r17,r6,-16
   4857c:	8822d13a 	srli	r17,r17,4
   48580:	28c00104 	addi	r3,r5,4
   48584:	23400104 	addi	r13,r4,4
   48588:	8820913a 	slli	r16,r17,4
   4858c:	2b000204 	addi	r12,r5,8
   48590:	22c00204 	addi	r11,r4,8
   48594:	84000504 	addi	r16,r16,20
   48598:	2a800304 	addi	r10,r5,12
   4859c:	22400304 	addi	r9,r4,12
   485a0:	2c21883a 	add	r16,r5,r16
   485a4:	2811883a 	mov	r8,r5
   485a8:	200f883a 	mov	r7,r4
   485ac:	41000017 	ldw	r4,0(r8)
   485b0:	1fc00017 	ldw	ra,0(r3)
   485b4:	63c00017 	ldw	r15,0(r12)
   485b8:	39000015 	stw	r4,0(r7)
   485bc:	53800017 	ldw	r14,0(r10)
   485c0:	6fc00015 	stw	ra,0(r13)
   485c4:	5bc00015 	stw	r15,0(r11)
   485c8:	4b800015 	stw	r14,0(r9)
   485cc:	18c00404 	addi	r3,r3,16
   485d0:	39c00404 	addi	r7,r7,16
   485d4:	42000404 	addi	r8,r8,16
   485d8:	6b400404 	addi	r13,r13,16
   485dc:	63000404 	addi	r12,r12,16
   485e0:	5ac00404 	addi	r11,r11,16
   485e4:	52800404 	addi	r10,r10,16
   485e8:	4a400404 	addi	r9,r9,16
   485ec:	1c3fef1e 	bne	r3,r16,485ac <_gp+0xfffece84>
   485f0:	89c00044 	addi	r7,r17,1
   485f4:	380e913a 	slli	r7,r7,4
   485f8:	310003cc 	andi	r4,r6,15
   485fc:	02c000c4 	movi	r11,3
   48600:	11c7883a 	add	r3,r2,r7
   48604:	29cb883a 	add	r5,r5,r7
   48608:	5900212e 	bgeu	r11,r4,48690 <memcpy+0x140>
   4860c:	1813883a 	mov	r9,r3
   48610:	2811883a 	mov	r8,r5
   48614:	200f883a 	mov	r7,r4
   48618:	42800017 	ldw	r10,0(r8)
   4861c:	4a400104 	addi	r9,r9,4
   48620:	39ffff04 	addi	r7,r7,-4
   48624:	4abfff15 	stw	r10,-4(r9)
   48628:	42000104 	addi	r8,r8,4
   4862c:	59fffa36 	bltu	r11,r7,48618 <_gp+0xfffecef0>
   48630:	213fff04 	addi	r4,r4,-4
   48634:	2008d0ba 	srli	r4,r4,2
   48638:	318000cc 	andi	r6,r6,3
   4863c:	21000044 	addi	r4,r4,1
   48640:	2109883a 	add	r4,r4,r4
   48644:	2109883a 	add	r4,r4,r4
   48648:	1907883a 	add	r3,r3,r4
   4864c:	290b883a 	add	r5,r5,r4
   48650:	30000626 	beq	r6,zero,4866c <memcpy+0x11c>
   48654:	198d883a 	add	r6,r3,r6
   48658:	29c00003 	ldbu	r7,0(r5)
   4865c:	18c00044 	addi	r3,r3,1
   48660:	29400044 	addi	r5,r5,1
   48664:	19ffffc5 	stb	r7,-1(r3)
   48668:	19bffb1e 	bne	r3,r6,48658 <_gp+0xfffecf30>
   4866c:	dfc00217 	ldw	ra,8(sp)
   48670:	dc400117 	ldw	r17,4(sp)
   48674:	dc000017 	ldw	r16,0(sp)
   48678:	dec00304 	addi	sp,sp,12
   4867c:	f800283a 	ret
   48680:	2007883a 	mov	r3,r4
   48684:	003ff206 	br	48650 <_gp+0xfffecf28>
   48688:	2007883a 	mov	r3,r4
   4868c:	003ff106 	br	48654 <_gp+0xfffecf2c>
   48690:	200d883a 	mov	r6,r4
   48694:	003fee06 	br	48650 <_gp+0xfffecf28>

00048698 <memmove>:
   48698:	2005883a 	mov	r2,r4
   4869c:	29000b2e 	bgeu	r5,r4,486cc <memmove+0x34>
   486a0:	298f883a 	add	r7,r5,r6
   486a4:	21c0092e 	bgeu	r4,r7,486cc <memmove+0x34>
   486a8:	2187883a 	add	r3,r4,r6
   486ac:	198bc83a 	sub	r5,r3,r6
   486b0:	30004826 	beq	r6,zero,487d4 <memmove+0x13c>
   486b4:	39ffffc4 	addi	r7,r7,-1
   486b8:	39000003 	ldbu	r4,0(r7)
   486bc:	18ffffc4 	addi	r3,r3,-1
   486c0:	19000005 	stb	r4,0(r3)
   486c4:	28fffb1e 	bne	r5,r3,486b4 <_gp+0xfffecf8c>
   486c8:	f800283a 	ret
   486cc:	00c003c4 	movi	r3,15
   486d0:	1980412e 	bgeu	r3,r6,487d8 <memmove+0x140>
   486d4:	2886b03a 	or	r3,r5,r2
   486d8:	18c000cc 	andi	r3,r3,3
   486dc:	1800401e 	bne	r3,zero,487e0 <memmove+0x148>
   486e0:	33fffc04 	addi	r15,r6,-16
   486e4:	781ed13a 	srli	r15,r15,4
   486e8:	28c00104 	addi	r3,r5,4
   486ec:	13400104 	addi	r13,r2,4
   486f0:	781c913a 	slli	r14,r15,4
   486f4:	2b000204 	addi	r12,r5,8
   486f8:	12c00204 	addi	r11,r2,8
   486fc:	73800504 	addi	r14,r14,20
   48700:	2a800304 	addi	r10,r5,12
   48704:	12400304 	addi	r9,r2,12
   48708:	2b9d883a 	add	r14,r5,r14
   4870c:	2811883a 	mov	r8,r5
   48710:	100f883a 	mov	r7,r2
   48714:	41000017 	ldw	r4,0(r8)
   48718:	39c00404 	addi	r7,r7,16
   4871c:	18c00404 	addi	r3,r3,16
   48720:	393ffc15 	stw	r4,-16(r7)
   48724:	193ffc17 	ldw	r4,-16(r3)
   48728:	6b400404 	addi	r13,r13,16
   4872c:	5ac00404 	addi	r11,r11,16
   48730:	693ffc15 	stw	r4,-16(r13)
   48734:	61000017 	ldw	r4,0(r12)
   48738:	4a400404 	addi	r9,r9,16
   4873c:	42000404 	addi	r8,r8,16
   48740:	593ffc15 	stw	r4,-16(r11)
   48744:	51000017 	ldw	r4,0(r10)
   48748:	63000404 	addi	r12,r12,16
   4874c:	52800404 	addi	r10,r10,16
   48750:	493ffc15 	stw	r4,-16(r9)
   48754:	1bbfef1e 	bne	r3,r14,48714 <_gp+0xfffecfec>
   48758:	79000044 	addi	r4,r15,1
   4875c:	2008913a 	slli	r4,r4,4
   48760:	328003cc 	andi	r10,r6,15
   48764:	02c000c4 	movi	r11,3
   48768:	1107883a 	add	r3,r2,r4
   4876c:	290b883a 	add	r5,r5,r4
   48770:	5a801e2e 	bgeu	r11,r10,487ec <memmove+0x154>
   48774:	1813883a 	mov	r9,r3
   48778:	2811883a 	mov	r8,r5
   4877c:	500f883a 	mov	r7,r10
   48780:	41000017 	ldw	r4,0(r8)
   48784:	4a400104 	addi	r9,r9,4
   48788:	39ffff04 	addi	r7,r7,-4
   4878c:	493fff15 	stw	r4,-4(r9)
   48790:	42000104 	addi	r8,r8,4
   48794:	59fffa36 	bltu	r11,r7,48780 <_gp+0xfffed058>
   48798:	513fff04 	addi	r4,r10,-4
   4879c:	2008d0ba 	srli	r4,r4,2
   487a0:	318000cc 	andi	r6,r6,3
   487a4:	21000044 	addi	r4,r4,1
   487a8:	2109883a 	add	r4,r4,r4
   487ac:	2109883a 	add	r4,r4,r4
   487b0:	1907883a 	add	r3,r3,r4
   487b4:	290b883a 	add	r5,r5,r4
   487b8:	30000b26 	beq	r6,zero,487e8 <memmove+0x150>
   487bc:	198d883a 	add	r6,r3,r6
   487c0:	29c00003 	ldbu	r7,0(r5)
   487c4:	18c00044 	addi	r3,r3,1
   487c8:	29400044 	addi	r5,r5,1
   487cc:	19ffffc5 	stb	r7,-1(r3)
   487d0:	19bffb1e 	bne	r3,r6,487c0 <_gp+0xfffed098>
   487d4:	f800283a 	ret
   487d8:	1007883a 	mov	r3,r2
   487dc:	003ff606 	br	487b8 <_gp+0xfffed090>
   487e0:	1007883a 	mov	r3,r2
   487e4:	003ff506 	br	487bc <_gp+0xfffed094>
   487e8:	f800283a 	ret
   487ec:	500d883a 	mov	r6,r10
   487f0:	003ff106 	br	487b8 <_gp+0xfffed090>

000487f4 <_Balloc>:
   487f4:	20801317 	ldw	r2,76(r4)
   487f8:	defffc04 	addi	sp,sp,-16
   487fc:	dc400115 	stw	r17,4(sp)
   48800:	dc000015 	stw	r16,0(sp)
   48804:	dfc00315 	stw	ra,12(sp)
   48808:	dc800215 	stw	r18,8(sp)
   4880c:	2023883a 	mov	r17,r4
   48810:	2821883a 	mov	r16,r5
   48814:	10000f26 	beq	r2,zero,48854 <_Balloc+0x60>
   48818:	8407883a 	add	r3,r16,r16
   4881c:	18c7883a 	add	r3,r3,r3
   48820:	10c7883a 	add	r3,r2,r3
   48824:	18800017 	ldw	r2,0(r3)
   48828:	10001126 	beq	r2,zero,48870 <_Balloc+0x7c>
   4882c:	11000017 	ldw	r4,0(r2)
   48830:	19000015 	stw	r4,0(r3)
   48834:	10000415 	stw	zero,16(r2)
   48838:	10000315 	stw	zero,12(r2)
   4883c:	dfc00317 	ldw	ra,12(sp)
   48840:	dc800217 	ldw	r18,8(sp)
   48844:	dc400117 	ldw	r17,4(sp)
   48848:	dc000017 	ldw	r16,0(sp)
   4884c:	dec00404 	addi	sp,sp,16
   48850:	f800283a 	ret
   48854:	01800844 	movi	r6,33
   48858:	01400104 	movi	r5,4
   4885c:	004b6b80 	call	4b6b8 <_calloc_r>
   48860:	88801315 	stw	r2,76(r17)
   48864:	103fec1e 	bne	r2,zero,48818 <_gp+0xfffed0f0>
   48868:	0005883a 	mov	r2,zero
   4886c:	003ff306 	br	4883c <_gp+0xfffed114>
   48870:	01400044 	movi	r5,1
   48874:	2c24983a 	sll	r18,r5,r16
   48878:	8809883a 	mov	r4,r17
   4887c:	91800144 	addi	r6,r18,5
   48880:	318d883a 	add	r6,r6,r6
   48884:	318d883a 	add	r6,r6,r6
   48888:	004b6b80 	call	4b6b8 <_calloc_r>
   4888c:	103ff626 	beq	r2,zero,48868 <_gp+0xfffed140>
   48890:	14000115 	stw	r16,4(r2)
   48894:	14800215 	stw	r18,8(r2)
   48898:	003fe606 	br	48834 <_gp+0xfffed10c>

0004889c <_Bfree>:
   4889c:	28000826 	beq	r5,zero,488c0 <_Bfree+0x24>
   488a0:	28c00117 	ldw	r3,4(r5)
   488a4:	20801317 	ldw	r2,76(r4)
   488a8:	18c7883a 	add	r3,r3,r3
   488ac:	18c7883a 	add	r3,r3,r3
   488b0:	10c5883a 	add	r2,r2,r3
   488b4:	10c00017 	ldw	r3,0(r2)
   488b8:	28c00015 	stw	r3,0(r5)
   488bc:	11400015 	stw	r5,0(r2)
   488c0:	f800283a 	ret

000488c4 <__multadd>:
   488c4:	defff704 	addi	sp,sp,-36
   488c8:	dc800215 	stw	r18,8(sp)
   488cc:	2c800417 	ldw	r18,16(r5)
   488d0:	dd800615 	stw	r22,24(sp)
   488d4:	dd400515 	stw	r21,20(sp)
   488d8:	dd000415 	stw	r20,16(sp)
   488dc:	dcc00315 	stw	r19,12(sp)
   488e0:	dc400115 	stw	r17,4(sp)
   488e4:	dc000015 	stw	r16,0(sp)
   488e8:	dfc00815 	stw	ra,32(sp)
   488ec:	ddc00715 	stw	r23,28(sp)
   488f0:	2827883a 	mov	r19,r5
   488f4:	2029883a 	mov	r20,r4
   488f8:	3023883a 	mov	r17,r6
   488fc:	3821883a 	mov	r16,r7
   48900:	2d400504 	addi	r21,r5,20
   48904:	002d883a 	mov	r22,zero
   48908:	adc00017 	ldw	r23,0(r21)
   4890c:	880b883a 	mov	r5,r17
   48910:	ad400104 	addi	r21,r21,4
   48914:	b93fffcc 	andi	r4,r23,65535
   48918:	00416640 	call	41664 <__mulsi3>
   4891c:	b808d43a 	srli	r4,r23,16
   48920:	880b883a 	mov	r5,r17
   48924:	1421883a 	add	r16,r2,r16
   48928:	00416640 	call	41664 <__mulsi3>
   4892c:	800ed43a 	srli	r7,r16,16
   48930:	80ffffcc 	andi	r3,r16,65535
   48934:	b5800044 	addi	r22,r22,1
   48938:	11c5883a 	add	r2,r2,r7
   4893c:	100e943a 	slli	r7,r2,16
   48940:	1020d43a 	srli	r16,r2,16
   48944:	38c7883a 	add	r3,r7,r3
   48948:	a8ffff15 	stw	r3,-4(r21)
   4894c:	b4bfee16 	blt	r22,r18,48908 <_gp+0xfffed1e0>
   48950:	80000926 	beq	r16,zero,48978 <__multadd+0xb4>
   48954:	98800217 	ldw	r2,8(r19)
   48958:	9080130e 	bge	r18,r2,489a8 <__multadd+0xe4>
   4895c:	90800144 	addi	r2,r18,5
   48960:	1085883a 	add	r2,r2,r2
   48964:	1085883a 	add	r2,r2,r2
   48968:	9885883a 	add	r2,r19,r2
   4896c:	14000015 	stw	r16,0(r2)
   48970:	94800044 	addi	r18,r18,1
   48974:	9c800415 	stw	r18,16(r19)
   48978:	9805883a 	mov	r2,r19
   4897c:	dfc00817 	ldw	ra,32(sp)
   48980:	ddc00717 	ldw	r23,28(sp)
   48984:	dd800617 	ldw	r22,24(sp)
   48988:	dd400517 	ldw	r21,20(sp)
   4898c:	dd000417 	ldw	r20,16(sp)
   48990:	dcc00317 	ldw	r19,12(sp)
   48994:	dc800217 	ldw	r18,8(sp)
   48998:	dc400117 	ldw	r17,4(sp)
   4899c:	dc000017 	ldw	r16,0(sp)
   489a0:	dec00904 	addi	sp,sp,36
   489a4:	f800283a 	ret
   489a8:	99400117 	ldw	r5,4(r19)
   489ac:	a009883a 	mov	r4,r20
   489b0:	29400044 	addi	r5,r5,1
   489b4:	00487f40 	call	487f4 <_Balloc>
   489b8:	99800417 	ldw	r6,16(r19)
   489bc:	99400304 	addi	r5,r19,12
   489c0:	11000304 	addi	r4,r2,12
   489c4:	31800084 	addi	r6,r6,2
   489c8:	318d883a 	add	r6,r6,r6
   489cc:	318d883a 	add	r6,r6,r6
   489d0:	1023883a 	mov	r17,r2
   489d4:	00485500 	call	48550 <memcpy>
   489d8:	98000a26 	beq	r19,zero,48a04 <__multadd+0x140>
   489dc:	98c00117 	ldw	r3,4(r19)
   489e0:	a0801317 	ldw	r2,76(r20)
   489e4:	18c7883a 	add	r3,r3,r3
   489e8:	18c7883a 	add	r3,r3,r3
   489ec:	10c5883a 	add	r2,r2,r3
   489f0:	10c00017 	ldw	r3,0(r2)
   489f4:	98c00015 	stw	r3,0(r19)
   489f8:	14c00015 	stw	r19,0(r2)
   489fc:	8827883a 	mov	r19,r17
   48a00:	003fd606 	br	4895c <_gp+0xfffed234>
   48a04:	8827883a 	mov	r19,r17
   48a08:	003fd406 	br	4895c <_gp+0xfffed234>

00048a0c <__s2b>:
   48a0c:	defff904 	addi	sp,sp,-28
   48a10:	dc400115 	stw	r17,4(sp)
   48a14:	dc000015 	stw	r16,0(sp)
   48a18:	2023883a 	mov	r17,r4
   48a1c:	2821883a 	mov	r16,r5
   48a20:	39000204 	addi	r4,r7,8
   48a24:	01400244 	movi	r5,9
   48a28:	dcc00315 	stw	r19,12(sp)
   48a2c:	dc800215 	stw	r18,8(sp)
   48a30:	dfc00615 	stw	ra,24(sp)
   48a34:	dd400515 	stw	r21,20(sp)
   48a38:	dd000415 	stw	r20,16(sp)
   48a3c:	3825883a 	mov	r18,r7
   48a40:	3027883a 	mov	r19,r6
   48a44:	00414b00 	call	414b0 <__divsi3>
   48a48:	00c00044 	movi	r3,1
   48a4c:	000b883a 	mov	r5,zero
   48a50:	1880030e 	bge	r3,r2,48a60 <__s2b+0x54>
   48a54:	18c7883a 	add	r3,r3,r3
   48a58:	29400044 	addi	r5,r5,1
   48a5c:	18bffd16 	blt	r3,r2,48a54 <_gp+0xfffed32c>
   48a60:	8809883a 	mov	r4,r17
   48a64:	00487f40 	call	487f4 <_Balloc>
   48a68:	d8c00717 	ldw	r3,28(sp)
   48a6c:	10c00515 	stw	r3,20(r2)
   48a70:	00c00044 	movi	r3,1
   48a74:	10c00415 	stw	r3,16(r2)
   48a78:	00c00244 	movi	r3,9
   48a7c:	1cc0210e 	bge	r3,r19,48b04 <__s2b+0xf8>
   48a80:	80eb883a 	add	r21,r16,r3
   48a84:	a829883a 	mov	r20,r21
   48a88:	84e1883a 	add	r16,r16,r19
   48a8c:	a1c00007 	ldb	r7,0(r20)
   48a90:	01800284 	movi	r6,10
   48a94:	a5000044 	addi	r20,r20,1
   48a98:	100b883a 	mov	r5,r2
   48a9c:	39fff404 	addi	r7,r7,-48
   48aa0:	8809883a 	mov	r4,r17
   48aa4:	00488c40 	call	488c4 <__multadd>
   48aa8:	a43ff81e 	bne	r20,r16,48a8c <_gp+0xfffed364>
   48aac:	ace1883a 	add	r16,r21,r19
   48ab0:	843ffe04 	addi	r16,r16,-8
   48ab4:	9c800a0e 	bge	r19,r18,48ae0 <__s2b+0xd4>
   48ab8:	94e5c83a 	sub	r18,r18,r19
   48abc:	84a5883a 	add	r18,r16,r18
   48ac0:	81c00007 	ldb	r7,0(r16)
   48ac4:	01800284 	movi	r6,10
   48ac8:	84000044 	addi	r16,r16,1
   48acc:	100b883a 	mov	r5,r2
   48ad0:	39fff404 	addi	r7,r7,-48
   48ad4:	8809883a 	mov	r4,r17
   48ad8:	00488c40 	call	488c4 <__multadd>
   48adc:	84bff81e 	bne	r16,r18,48ac0 <_gp+0xfffed398>
   48ae0:	dfc00617 	ldw	ra,24(sp)
   48ae4:	dd400517 	ldw	r21,20(sp)
   48ae8:	dd000417 	ldw	r20,16(sp)
   48aec:	dcc00317 	ldw	r19,12(sp)
   48af0:	dc800217 	ldw	r18,8(sp)
   48af4:	dc400117 	ldw	r17,4(sp)
   48af8:	dc000017 	ldw	r16,0(sp)
   48afc:	dec00704 	addi	sp,sp,28
   48b00:	f800283a 	ret
   48b04:	84000284 	addi	r16,r16,10
   48b08:	1827883a 	mov	r19,r3
   48b0c:	003fe906 	br	48ab4 <_gp+0xfffed38c>

00048b10 <__hi0bits>:
   48b10:	20bfffec 	andhi	r2,r4,65535
   48b14:	1000141e 	bne	r2,zero,48b68 <__hi0bits+0x58>
   48b18:	2008943a 	slli	r4,r4,16
   48b1c:	00800404 	movi	r2,16
   48b20:	20ffc02c 	andhi	r3,r4,65280
   48b24:	1800021e 	bne	r3,zero,48b30 <__hi0bits+0x20>
   48b28:	2008923a 	slli	r4,r4,8
   48b2c:	10800204 	addi	r2,r2,8
   48b30:	20fc002c 	andhi	r3,r4,61440
   48b34:	1800021e 	bne	r3,zero,48b40 <__hi0bits+0x30>
   48b38:	2008913a 	slli	r4,r4,4
   48b3c:	10800104 	addi	r2,r2,4
   48b40:	20f0002c 	andhi	r3,r4,49152
   48b44:	1800031e 	bne	r3,zero,48b54 <__hi0bits+0x44>
   48b48:	2109883a 	add	r4,r4,r4
   48b4c:	10800084 	addi	r2,r2,2
   48b50:	2109883a 	add	r4,r4,r4
   48b54:	20000316 	blt	r4,zero,48b64 <__hi0bits+0x54>
   48b58:	2110002c 	andhi	r4,r4,16384
   48b5c:	2000041e 	bne	r4,zero,48b70 <__hi0bits+0x60>
   48b60:	00800804 	movi	r2,32
   48b64:	f800283a 	ret
   48b68:	0005883a 	mov	r2,zero
   48b6c:	003fec06 	br	48b20 <_gp+0xfffed3f8>
   48b70:	10800044 	addi	r2,r2,1
   48b74:	f800283a 	ret

00048b78 <__lo0bits>:
   48b78:	20c00017 	ldw	r3,0(r4)
   48b7c:	188001cc 	andi	r2,r3,7
   48b80:	10000826 	beq	r2,zero,48ba4 <__lo0bits+0x2c>
   48b84:	1880004c 	andi	r2,r3,1
   48b88:	1000211e 	bne	r2,zero,48c10 <__lo0bits+0x98>
   48b8c:	1880008c 	andi	r2,r3,2
   48b90:	1000211e 	bne	r2,zero,48c18 <__lo0bits+0xa0>
   48b94:	1806d0ba 	srli	r3,r3,2
   48b98:	00800084 	movi	r2,2
   48b9c:	20c00015 	stw	r3,0(r4)
   48ba0:	f800283a 	ret
   48ba4:	18bfffcc 	andi	r2,r3,65535
   48ba8:	10001326 	beq	r2,zero,48bf8 <__lo0bits+0x80>
   48bac:	0005883a 	mov	r2,zero
   48bb0:	19403fcc 	andi	r5,r3,255
   48bb4:	2800021e 	bne	r5,zero,48bc0 <__lo0bits+0x48>
   48bb8:	1806d23a 	srli	r3,r3,8
   48bbc:	10800204 	addi	r2,r2,8
   48bc0:	194003cc 	andi	r5,r3,15
   48bc4:	2800021e 	bne	r5,zero,48bd0 <__lo0bits+0x58>
   48bc8:	1806d13a 	srli	r3,r3,4
   48bcc:	10800104 	addi	r2,r2,4
   48bd0:	194000cc 	andi	r5,r3,3
   48bd4:	2800021e 	bne	r5,zero,48be0 <__lo0bits+0x68>
   48bd8:	1806d0ba 	srli	r3,r3,2
   48bdc:	10800084 	addi	r2,r2,2
   48be0:	1940004c 	andi	r5,r3,1
   48be4:	2800081e 	bne	r5,zero,48c08 <__lo0bits+0x90>
   48be8:	1806d07a 	srli	r3,r3,1
   48bec:	1800051e 	bne	r3,zero,48c04 <__lo0bits+0x8c>
   48bf0:	00800804 	movi	r2,32
   48bf4:	f800283a 	ret
   48bf8:	1806d43a 	srli	r3,r3,16
   48bfc:	00800404 	movi	r2,16
   48c00:	003feb06 	br	48bb0 <_gp+0xfffed488>
   48c04:	10800044 	addi	r2,r2,1
   48c08:	20c00015 	stw	r3,0(r4)
   48c0c:	f800283a 	ret
   48c10:	0005883a 	mov	r2,zero
   48c14:	f800283a 	ret
   48c18:	1806d07a 	srli	r3,r3,1
   48c1c:	00800044 	movi	r2,1
   48c20:	20c00015 	stw	r3,0(r4)
   48c24:	f800283a 	ret

00048c28 <__i2b>:
   48c28:	defffd04 	addi	sp,sp,-12
   48c2c:	dc000015 	stw	r16,0(sp)
   48c30:	04000044 	movi	r16,1
   48c34:	dc400115 	stw	r17,4(sp)
   48c38:	2823883a 	mov	r17,r5
   48c3c:	800b883a 	mov	r5,r16
   48c40:	dfc00215 	stw	ra,8(sp)
   48c44:	00487f40 	call	487f4 <_Balloc>
   48c48:	14400515 	stw	r17,20(r2)
   48c4c:	14000415 	stw	r16,16(r2)
   48c50:	dfc00217 	ldw	ra,8(sp)
   48c54:	dc400117 	ldw	r17,4(sp)
   48c58:	dc000017 	ldw	r16,0(sp)
   48c5c:	dec00304 	addi	sp,sp,12
   48c60:	f800283a 	ret

00048c64 <__multiply>:
   48c64:	deffef04 	addi	sp,sp,-68
   48c68:	dc400815 	stw	r17,32(sp)
   48c6c:	dc000715 	stw	r16,28(sp)
   48c70:	34400417 	ldw	r17,16(r6)
   48c74:	2c000417 	ldw	r16,16(r5)
   48c78:	dd800d15 	stw	r22,52(sp)
   48c7c:	dc800915 	stw	r18,36(sp)
   48c80:	dfc01015 	stw	ra,64(sp)
   48c84:	df000f15 	stw	fp,60(sp)
   48c88:	ddc00e15 	stw	r23,56(sp)
   48c8c:	dd400c15 	stw	r21,48(sp)
   48c90:	dd000b15 	stw	r20,44(sp)
   48c94:	dcc00a15 	stw	r19,40(sp)
   48c98:	2825883a 	mov	r18,r5
   48c9c:	302d883a 	mov	r22,r6
   48ca0:	8440050e 	bge	r16,r17,48cb8 <__multiply+0x54>
   48ca4:	8007883a 	mov	r3,r16
   48ca8:	3025883a 	mov	r18,r6
   48cac:	8821883a 	mov	r16,r17
   48cb0:	282d883a 	mov	r22,r5
   48cb4:	1823883a 	mov	r17,r3
   48cb8:	90800217 	ldw	r2,8(r18)
   48cbc:	8447883a 	add	r3,r16,r17
   48cc0:	d8c00215 	stw	r3,8(sp)
   48cc4:	91400117 	ldw	r5,4(r18)
   48cc8:	10c0010e 	bge	r2,r3,48cd0 <__multiply+0x6c>
   48ccc:	29400044 	addi	r5,r5,1
   48cd0:	00487f40 	call	487f4 <_Balloc>
   48cd4:	d8c00217 	ldw	r3,8(sp)
   48cd8:	d8800615 	stw	r2,24(sp)
   48cdc:	18eb883a 	add	r21,r3,r3
   48ce0:	ad6b883a 	add	r21,r21,r21
   48ce4:	10c00504 	addi	r3,r2,20
   48ce8:	1d6b883a 	add	r21,r3,r21
   48cec:	d8c00115 	stw	r3,4(sp)
   48cf0:	dd400315 	stw	r21,12(sp)
   48cf4:	1805883a 	mov	r2,r3
   48cf8:	1d40042e 	bgeu	r3,r21,48d0c <__multiply+0xa8>
   48cfc:	d8c00317 	ldw	r3,12(sp)
   48d00:	10000015 	stw	zero,0(r2)
   48d04:	10800104 	addi	r2,r2,4
   48d08:	10fffc36 	bltu	r2,r3,48cfc <_gp+0xfffed5d4>
   48d0c:	8c63883a 	add	r17,r17,r17
   48d10:	b5800504 	addi	r22,r22,20
   48d14:	8c63883a 	add	r17,r17,r17
   48d18:	94800504 	addi	r18,r18,20
   48d1c:	8421883a 	add	r16,r16,r16
   48d20:	b463883a 	add	r17,r22,r17
   48d24:	8421883a 	add	r16,r16,r16
   48d28:	dd800015 	stw	r22,0(sp)
   48d2c:	dc800415 	stw	r18,16(sp)
   48d30:	dc400515 	stw	r17,20(sp)
   48d34:	9429883a 	add	r20,r18,r16
   48d38:	b4404f2e 	bgeu	r22,r17,48e78 <__multiply+0x214>
   48d3c:	d8c00017 	ldw	r3,0(sp)
   48d40:	1c800017 	ldw	r18,0(r3)
   48d44:	947fffcc 	andi	r17,r18,65535
   48d48:	88001e26 	beq	r17,zero,48dc4 <__multiply+0x160>
   48d4c:	dd800117 	ldw	r22,4(sp)
   48d50:	dd400417 	ldw	r21,16(sp)
   48d54:	0027883a 	mov	r19,zero
   48d58:	ac800017 	ldw	r18,0(r21)
   48d5c:	b4000017 	ldw	r16,0(r22)
   48d60:	880b883a 	mov	r5,r17
   48d64:	913fffcc 	andi	r4,r18,65535
   48d68:	00416640 	call	41664 <__mulsi3>
   48d6c:	9008d43a 	srli	r4,r18,16
   48d70:	84bfffcc 	andi	r18,r16,65535
   48d74:	1485883a 	add	r2,r2,r18
   48d78:	14e5883a 	add	r18,r2,r19
   48d7c:	8020d43a 	srli	r16,r16,16
   48d80:	9026d43a 	srli	r19,r18,16
   48d84:	880b883a 	mov	r5,r17
   48d88:	00416640 	call	41664 <__mulsi3>
   48d8c:	1405883a 	add	r2,r2,r16
   48d90:	14e1883a 	add	r16,r2,r19
   48d94:	90ffffcc 	andi	r3,r18,65535
   48d98:	8024943a 	slli	r18,r16,16
   48d9c:	ad400104 	addi	r21,r21,4
   48da0:	b005883a 	mov	r2,r22
   48da4:	90c6b03a 	or	r3,r18,r3
   48da8:	b0c00015 	stw	r3,0(r22)
   48dac:	8026d43a 	srli	r19,r16,16
   48db0:	b5800104 	addi	r22,r22,4
   48db4:	ad3fe836 	bltu	r21,r20,48d58 <_gp+0xfffed630>
   48db8:	d8c00017 	ldw	r3,0(sp)
   48dbc:	14c00115 	stw	r19,4(r2)
   48dc0:	1c800017 	ldw	r18,0(r3)
   48dc4:	9024d43a 	srli	r18,r18,16
   48dc8:	90002226 	beq	r18,zero,48e54 <__multiply+0x1f0>
   48dcc:	d8c00117 	ldw	r3,4(sp)
   48dd0:	dd800417 	ldw	r22,16(sp)
   48dd4:	002f883a 	mov	r23,zero
   48dd8:	1f000017 	ldw	fp,0(r3)
   48ddc:	1823883a 	mov	r17,r3
   48de0:	182b883a 	mov	r21,r3
   48de4:	e021883a 	mov	r16,fp
   48de8:	00000106 	br	48df0 <__multiply+0x18c>
   48dec:	982b883a 	mov	r21,r19
   48df0:	b100000b 	ldhu	r4,0(r22)
   48df4:	8020d43a 	srli	r16,r16,16
   48df8:	900b883a 	mov	r5,r18
   48dfc:	00416640 	call	41664 <__mulsi3>
   48e00:	1405883a 	add	r2,r2,r16
   48e04:	15ef883a 	add	r23,r2,r23
   48e08:	b804943a 	slli	r2,r23,16
   48e0c:	e0ffffcc 	andi	r3,fp,65535
   48e10:	8c400104 	addi	r17,r17,4
   48e14:	10c6b03a 	or	r3,r2,r3
   48e18:	88ffff15 	stw	r3,-4(r17)
   48e1c:	b5800104 	addi	r22,r22,4
   48e20:	b13fff17 	ldw	r4,-4(r22)
   48e24:	acc00104 	addi	r19,r21,4
   48e28:	900b883a 	mov	r5,r18
   48e2c:	2008d43a 	srli	r4,r4,16
   48e30:	9c000017 	ldw	r16,0(r19)
   48e34:	00416640 	call	41664 <__mulsi3>
   48e38:	b806d43a 	srli	r3,r23,16
   48e3c:	813fffcc 	andi	r4,r16,65535
   48e40:	1105883a 	add	r2,r2,r4
   48e44:	10f9883a 	add	fp,r2,r3
   48e48:	e02ed43a 	srli	r23,fp,16
   48e4c:	b53fe736 	bltu	r22,r20,48dec <_gp+0xfffed6c4>
   48e50:	af000115 	stw	fp,4(r21)
   48e54:	d8c00017 	ldw	r3,0(sp)
   48e58:	d9000517 	ldw	r4,20(sp)
   48e5c:	18c00104 	addi	r3,r3,4
   48e60:	d8c00015 	stw	r3,0(sp)
   48e64:	d8c00117 	ldw	r3,4(sp)
   48e68:	18c00104 	addi	r3,r3,4
   48e6c:	d8c00115 	stw	r3,4(sp)
   48e70:	d8c00017 	ldw	r3,0(sp)
   48e74:	193fb136 	bltu	r3,r4,48d3c <_gp+0xfffed614>
   48e78:	d8c00217 	ldw	r3,8(sp)
   48e7c:	00c00c0e 	bge	zero,r3,48eb0 <__multiply+0x24c>
   48e80:	d8c00317 	ldw	r3,12(sp)
   48e84:	18bfff17 	ldw	r2,-4(r3)
   48e88:	1d7fff04 	addi	r21,r3,-4
   48e8c:	10000326 	beq	r2,zero,48e9c <__multiply+0x238>
   48e90:	00000706 	br	48eb0 <__multiply+0x24c>
   48e94:	a8800017 	ldw	r2,0(r21)
   48e98:	1000051e 	bne	r2,zero,48eb0 <__multiply+0x24c>
   48e9c:	d8c00217 	ldw	r3,8(sp)
   48ea0:	ad7fff04 	addi	r21,r21,-4
   48ea4:	18ffffc4 	addi	r3,r3,-1
   48ea8:	d8c00215 	stw	r3,8(sp)
   48eac:	183ff91e 	bne	r3,zero,48e94 <_gp+0xfffed76c>
   48eb0:	d8c00617 	ldw	r3,24(sp)
   48eb4:	d9000217 	ldw	r4,8(sp)
   48eb8:	1805883a 	mov	r2,r3
   48ebc:	19000415 	stw	r4,16(r3)
   48ec0:	dfc01017 	ldw	ra,64(sp)
   48ec4:	df000f17 	ldw	fp,60(sp)
   48ec8:	ddc00e17 	ldw	r23,56(sp)
   48ecc:	dd800d17 	ldw	r22,52(sp)
   48ed0:	dd400c17 	ldw	r21,48(sp)
   48ed4:	dd000b17 	ldw	r20,44(sp)
   48ed8:	dcc00a17 	ldw	r19,40(sp)
   48edc:	dc800917 	ldw	r18,36(sp)
   48ee0:	dc400817 	ldw	r17,32(sp)
   48ee4:	dc000717 	ldw	r16,28(sp)
   48ee8:	dec01104 	addi	sp,sp,68
   48eec:	f800283a 	ret

00048ef0 <__pow5mult>:
   48ef0:	defffa04 	addi	sp,sp,-24
   48ef4:	dcc00315 	stw	r19,12(sp)
   48ef8:	dc000015 	stw	r16,0(sp)
   48efc:	dfc00515 	stw	ra,20(sp)
   48f00:	dd000415 	stw	r20,16(sp)
   48f04:	dc800215 	stw	r18,8(sp)
   48f08:	dc400115 	stw	r17,4(sp)
   48f0c:	308000cc 	andi	r2,r6,3
   48f10:	3021883a 	mov	r16,r6
   48f14:	2027883a 	mov	r19,r4
   48f18:	10002f1e 	bne	r2,zero,48fd8 <__pow5mult+0xe8>
   48f1c:	2825883a 	mov	r18,r5
   48f20:	8021d0ba 	srai	r16,r16,2
   48f24:	80001a26 	beq	r16,zero,48f90 <__pow5mult+0xa0>
   48f28:	9c401217 	ldw	r17,72(r19)
   48f2c:	8800061e 	bne	r17,zero,48f48 <__pow5mult+0x58>
   48f30:	00003406 	br	49004 <__pow5mult+0x114>
   48f34:	8021d07a 	srai	r16,r16,1
   48f38:	80001526 	beq	r16,zero,48f90 <__pow5mult+0xa0>
   48f3c:	88800017 	ldw	r2,0(r17)
   48f40:	10001c26 	beq	r2,zero,48fb4 <__pow5mult+0xc4>
   48f44:	1023883a 	mov	r17,r2
   48f48:	8080004c 	andi	r2,r16,1
   48f4c:	103ff926 	beq	r2,zero,48f34 <_gp+0xfffed80c>
   48f50:	880d883a 	mov	r6,r17
   48f54:	900b883a 	mov	r5,r18
   48f58:	9809883a 	mov	r4,r19
   48f5c:	0048c640 	call	48c64 <__multiply>
   48f60:	90001b26 	beq	r18,zero,48fd0 <__pow5mult+0xe0>
   48f64:	91000117 	ldw	r4,4(r18)
   48f68:	98c01317 	ldw	r3,76(r19)
   48f6c:	8021d07a 	srai	r16,r16,1
   48f70:	2109883a 	add	r4,r4,r4
   48f74:	2109883a 	add	r4,r4,r4
   48f78:	1907883a 	add	r3,r3,r4
   48f7c:	19000017 	ldw	r4,0(r3)
   48f80:	91000015 	stw	r4,0(r18)
   48f84:	1c800015 	stw	r18,0(r3)
   48f88:	1025883a 	mov	r18,r2
   48f8c:	803feb1e 	bne	r16,zero,48f3c <_gp+0xfffed814>
   48f90:	9005883a 	mov	r2,r18
   48f94:	dfc00517 	ldw	ra,20(sp)
   48f98:	dd000417 	ldw	r20,16(sp)
   48f9c:	dcc00317 	ldw	r19,12(sp)
   48fa0:	dc800217 	ldw	r18,8(sp)
   48fa4:	dc400117 	ldw	r17,4(sp)
   48fa8:	dc000017 	ldw	r16,0(sp)
   48fac:	dec00604 	addi	sp,sp,24
   48fb0:	f800283a 	ret
   48fb4:	880d883a 	mov	r6,r17
   48fb8:	880b883a 	mov	r5,r17
   48fbc:	9809883a 	mov	r4,r19
   48fc0:	0048c640 	call	48c64 <__multiply>
   48fc4:	88800015 	stw	r2,0(r17)
   48fc8:	10000015 	stw	zero,0(r2)
   48fcc:	003fdd06 	br	48f44 <_gp+0xfffed81c>
   48fd0:	1025883a 	mov	r18,r2
   48fd4:	003fd706 	br	48f34 <_gp+0xfffed80c>
   48fd8:	10bfffc4 	addi	r2,r2,-1
   48fdc:	1085883a 	add	r2,r2,r2
   48fe0:	00c00174 	movhi	r3,5
   48fe4:	18c68d04 	addi	r3,r3,6708
   48fe8:	1085883a 	add	r2,r2,r2
   48fec:	1885883a 	add	r2,r3,r2
   48ff0:	11800017 	ldw	r6,0(r2)
   48ff4:	000f883a 	mov	r7,zero
   48ff8:	00488c40 	call	488c4 <__multadd>
   48ffc:	1025883a 	mov	r18,r2
   49000:	003fc706 	br	48f20 <_gp+0xfffed7f8>
   49004:	05000044 	movi	r20,1
   49008:	a00b883a 	mov	r5,r20
   4900c:	9809883a 	mov	r4,r19
   49010:	00487f40 	call	487f4 <_Balloc>
   49014:	1023883a 	mov	r17,r2
   49018:	00809c44 	movi	r2,625
   4901c:	88800515 	stw	r2,20(r17)
   49020:	8d000415 	stw	r20,16(r17)
   49024:	9c401215 	stw	r17,72(r19)
   49028:	88000015 	stw	zero,0(r17)
   4902c:	003fc606 	br	48f48 <_gp+0xfffed820>

00049030 <__lshift>:
   49030:	defff904 	addi	sp,sp,-28
   49034:	dd400515 	stw	r21,20(sp)
   49038:	dcc00315 	stw	r19,12(sp)
   4903c:	302bd17a 	srai	r21,r6,5
   49040:	2cc00417 	ldw	r19,16(r5)
   49044:	28800217 	ldw	r2,8(r5)
   49048:	dd000415 	stw	r20,16(sp)
   4904c:	ace7883a 	add	r19,r21,r19
   49050:	dc800215 	stw	r18,8(sp)
   49054:	dc400115 	stw	r17,4(sp)
   49058:	dc000015 	stw	r16,0(sp)
   4905c:	dfc00615 	stw	ra,24(sp)
   49060:	9c000044 	addi	r16,r19,1
   49064:	2823883a 	mov	r17,r5
   49068:	3029883a 	mov	r20,r6
   4906c:	2025883a 	mov	r18,r4
   49070:	29400117 	ldw	r5,4(r5)
   49074:	1400030e 	bge	r2,r16,49084 <__lshift+0x54>
   49078:	1085883a 	add	r2,r2,r2
   4907c:	29400044 	addi	r5,r5,1
   49080:	143ffd16 	blt	r2,r16,49078 <_gp+0xfffed950>
   49084:	9009883a 	mov	r4,r18
   49088:	00487f40 	call	487f4 <_Balloc>
   4908c:	10c00504 	addi	r3,r2,20
   49090:	0540070e 	bge	zero,r21,490b0 <__lshift+0x80>
   49094:	ad6b883a 	add	r21,r21,r21
   49098:	ad6b883a 	add	r21,r21,r21
   4909c:	1809883a 	mov	r4,r3
   490a0:	1d47883a 	add	r3,r3,r21
   490a4:	20000015 	stw	zero,0(r4)
   490a8:	21000104 	addi	r4,r4,4
   490ac:	193ffd1e 	bne	r3,r4,490a4 <_gp+0xfffed97c>
   490b0:	8a000417 	ldw	r8,16(r17)
   490b4:	89000504 	addi	r4,r17,20
   490b8:	a18007cc 	andi	r6,r20,31
   490bc:	4211883a 	add	r8,r8,r8
   490c0:	4211883a 	add	r8,r8,r8
   490c4:	2211883a 	add	r8,r4,r8
   490c8:	30002326 	beq	r6,zero,49158 <__lshift+0x128>
   490cc:	02400804 	movi	r9,32
   490d0:	4993c83a 	sub	r9,r9,r6
   490d4:	000b883a 	mov	r5,zero
   490d8:	21c00017 	ldw	r7,0(r4)
   490dc:	1815883a 	mov	r10,r3
   490e0:	18c00104 	addi	r3,r3,4
   490e4:	398e983a 	sll	r7,r7,r6
   490e8:	21000104 	addi	r4,r4,4
   490ec:	394ab03a 	or	r5,r7,r5
   490f0:	197fff15 	stw	r5,-4(r3)
   490f4:	217fff17 	ldw	r5,-4(r4)
   490f8:	2a4ad83a 	srl	r5,r5,r9
   490fc:	223ff636 	bltu	r4,r8,490d8 <_gp+0xfffed9b0>
   49100:	51400115 	stw	r5,4(r10)
   49104:	28001a1e 	bne	r5,zero,49170 <__lshift+0x140>
   49108:	843fffc4 	addi	r16,r16,-1
   4910c:	14000415 	stw	r16,16(r2)
   49110:	88000826 	beq	r17,zero,49134 <__lshift+0x104>
   49114:	89000117 	ldw	r4,4(r17)
   49118:	90c01317 	ldw	r3,76(r18)
   4911c:	2109883a 	add	r4,r4,r4
   49120:	2109883a 	add	r4,r4,r4
   49124:	1907883a 	add	r3,r3,r4
   49128:	19000017 	ldw	r4,0(r3)
   4912c:	89000015 	stw	r4,0(r17)
   49130:	1c400015 	stw	r17,0(r3)
   49134:	dfc00617 	ldw	ra,24(sp)
   49138:	dd400517 	ldw	r21,20(sp)
   4913c:	dd000417 	ldw	r20,16(sp)
   49140:	dcc00317 	ldw	r19,12(sp)
   49144:	dc800217 	ldw	r18,8(sp)
   49148:	dc400117 	ldw	r17,4(sp)
   4914c:	dc000017 	ldw	r16,0(sp)
   49150:	dec00704 	addi	sp,sp,28
   49154:	f800283a 	ret
   49158:	21400017 	ldw	r5,0(r4)
   4915c:	18c00104 	addi	r3,r3,4
   49160:	21000104 	addi	r4,r4,4
   49164:	197fff15 	stw	r5,-4(r3)
   49168:	223ffb36 	bltu	r4,r8,49158 <_gp+0xfffeda30>
   4916c:	003fe606 	br	49108 <_gp+0xfffed9e0>
   49170:	9c000084 	addi	r16,r19,2
   49174:	003fe406 	br	49108 <_gp+0xfffed9e0>

00049178 <__mcmp>:
   49178:	20800417 	ldw	r2,16(r4)
   4917c:	28c00417 	ldw	r3,16(r5)
   49180:	10c5c83a 	sub	r2,r2,r3
   49184:	1000111e 	bne	r2,zero,491cc <__mcmp+0x54>
   49188:	18c7883a 	add	r3,r3,r3
   4918c:	18c7883a 	add	r3,r3,r3
   49190:	21000504 	addi	r4,r4,20
   49194:	29400504 	addi	r5,r5,20
   49198:	20c5883a 	add	r2,r4,r3
   4919c:	28cb883a 	add	r5,r5,r3
   491a0:	00000106 	br	491a8 <__mcmp+0x30>
   491a4:	20800a2e 	bgeu	r4,r2,491d0 <__mcmp+0x58>
   491a8:	10bfff04 	addi	r2,r2,-4
   491ac:	297fff04 	addi	r5,r5,-4
   491b0:	11800017 	ldw	r6,0(r2)
   491b4:	28c00017 	ldw	r3,0(r5)
   491b8:	30fffa26 	beq	r6,r3,491a4 <_gp+0xfffeda7c>
   491bc:	30c00236 	bltu	r6,r3,491c8 <__mcmp+0x50>
   491c0:	00800044 	movi	r2,1
   491c4:	f800283a 	ret
   491c8:	00bfffc4 	movi	r2,-1
   491cc:	f800283a 	ret
   491d0:	0005883a 	mov	r2,zero
   491d4:	f800283a 	ret

000491d8 <__mdiff>:
   491d8:	28c00417 	ldw	r3,16(r5)
   491dc:	30800417 	ldw	r2,16(r6)
   491e0:	defffa04 	addi	sp,sp,-24
   491e4:	dcc00315 	stw	r19,12(sp)
   491e8:	dc800215 	stw	r18,8(sp)
   491ec:	dfc00515 	stw	ra,20(sp)
   491f0:	dd000415 	stw	r20,16(sp)
   491f4:	dc400115 	stw	r17,4(sp)
   491f8:	dc000015 	stw	r16,0(sp)
   491fc:	1887c83a 	sub	r3,r3,r2
   49200:	2825883a 	mov	r18,r5
   49204:	3027883a 	mov	r19,r6
   49208:	1800141e 	bne	r3,zero,4925c <__mdiff+0x84>
   4920c:	1085883a 	add	r2,r2,r2
   49210:	1085883a 	add	r2,r2,r2
   49214:	2a000504 	addi	r8,r5,20
   49218:	34000504 	addi	r16,r6,20
   4921c:	4087883a 	add	r3,r8,r2
   49220:	8085883a 	add	r2,r16,r2
   49224:	00000106 	br	4922c <__mdiff+0x54>
   49228:	40c0592e 	bgeu	r8,r3,49390 <__mdiff+0x1b8>
   4922c:	18ffff04 	addi	r3,r3,-4
   49230:	10bfff04 	addi	r2,r2,-4
   49234:	19c00017 	ldw	r7,0(r3)
   49238:	11400017 	ldw	r5,0(r2)
   4923c:	397ffa26 	beq	r7,r5,49228 <_gp+0xfffedb00>
   49240:	3940592e 	bgeu	r7,r5,493a8 <__mdiff+0x1d0>
   49244:	9005883a 	mov	r2,r18
   49248:	4023883a 	mov	r17,r8
   4924c:	9825883a 	mov	r18,r19
   49250:	05000044 	movi	r20,1
   49254:	1027883a 	mov	r19,r2
   49258:	00000406 	br	4926c <__mdiff+0x94>
   4925c:	18005616 	blt	r3,zero,493b8 <__mdiff+0x1e0>
   49260:	34400504 	addi	r17,r6,20
   49264:	2c000504 	addi	r16,r5,20
   49268:	0029883a 	mov	r20,zero
   4926c:	91400117 	ldw	r5,4(r18)
   49270:	00487f40 	call	487f4 <_Balloc>
   49274:	92400417 	ldw	r9,16(r18)
   49278:	9b000417 	ldw	r12,16(r19)
   4927c:	12c00504 	addi	r11,r2,20
   49280:	4a51883a 	add	r8,r9,r9
   49284:	6319883a 	add	r12,r12,r12
   49288:	4211883a 	add	r8,r8,r8
   4928c:	6319883a 	add	r12,r12,r12
   49290:	15000315 	stw	r20,12(r2)
   49294:	8211883a 	add	r8,r16,r8
   49298:	8b19883a 	add	r12,r17,r12
   4929c:	0007883a 	mov	r3,zero
   492a0:	81400017 	ldw	r5,0(r16)
   492a4:	89c00017 	ldw	r7,0(r17)
   492a8:	59800104 	addi	r6,r11,4
   492ac:	293fffcc 	andi	r4,r5,65535
   492b0:	20c7883a 	add	r3,r4,r3
   492b4:	393fffcc 	andi	r4,r7,65535
   492b8:	1909c83a 	sub	r4,r3,r4
   492bc:	280ad43a 	srli	r5,r5,16
   492c0:	380ed43a 	srli	r7,r7,16
   492c4:	2007d43a 	srai	r3,r4,16
   492c8:	213fffcc 	andi	r4,r4,65535
   492cc:	29cbc83a 	sub	r5,r5,r7
   492d0:	28c7883a 	add	r3,r5,r3
   492d4:	180a943a 	slli	r5,r3,16
   492d8:	8c400104 	addi	r17,r17,4
   492dc:	84000104 	addi	r16,r16,4
   492e0:	2908b03a 	or	r4,r5,r4
   492e4:	59000015 	stw	r4,0(r11)
   492e8:	1807d43a 	srai	r3,r3,16
   492ec:	3015883a 	mov	r10,r6
   492f0:	3017883a 	mov	r11,r6
   492f4:	8b3fea36 	bltu	r17,r12,492a0 <_gp+0xfffedb78>
   492f8:	8200162e 	bgeu	r16,r8,49354 <__mdiff+0x17c>
   492fc:	8017883a 	mov	r11,r16
   49300:	59400017 	ldw	r5,0(r11)
   49304:	31800104 	addi	r6,r6,4
   49308:	5ac00104 	addi	r11,r11,4
   4930c:	293fffcc 	andi	r4,r5,65535
   49310:	20c7883a 	add	r3,r4,r3
   49314:	280ed43a 	srli	r7,r5,16
   49318:	180bd43a 	srai	r5,r3,16
   4931c:	193fffcc 	andi	r4,r3,65535
   49320:	3947883a 	add	r3,r7,r5
   49324:	180a943a 	slli	r5,r3,16
   49328:	1807d43a 	srai	r3,r3,16
   4932c:	2908b03a 	or	r4,r5,r4
   49330:	313fff15 	stw	r4,-4(r6)
   49334:	5a3ff236 	bltu	r11,r8,49300 <_gp+0xfffedbd8>
   49338:	0406303a 	nor	r3,zero,r16
   4933c:	1a07883a 	add	r3,r3,r8
   49340:	1806d0ba 	srli	r3,r3,2
   49344:	18c00044 	addi	r3,r3,1
   49348:	18c7883a 	add	r3,r3,r3
   4934c:	18c7883a 	add	r3,r3,r3
   49350:	50d5883a 	add	r10,r10,r3
   49354:	50ffff04 	addi	r3,r10,-4
   49358:	2000041e 	bne	r4,zero,4936c <__mdiff+0x194>
   4935c:	18ffff04 	addi	r3,r3,-4
   49360:	19000017 	ldw	r4,0(r3)
   49364:	4a7fffc4 	addi	r9,r9,-1
   49368:	203ffc26 	beq	r4,zero,4935c <_gp+0xfffedc34>
   4936c:	12400415 	stw	r9,16(r2)
   49370:	dfc00517 	ldw	ra,20(sp)
   49374:	dd000417 	ldw	r20,16(sp)
   49378:	dcc00317 	ldw	r19,12(sp)
   4937c:	dc800217 	ldw	r18,8(sp)
   49380:	dc400117 	ldw	r17,4(sp)
   49384:	dc000017 	ldw	r16,0(sp)
   49388:	dec00604 	addi	sp,sp,24
   4938c:	f800283a 	ret
   49390:	000b883a 	mov	r5,zero
   49394:	00487f40 	call	487f4 <_Balloc>
   49398:	00c00044 	movi	r3,1
   4939c:	10c00415 	stw	r3,16(r2)
   493a0:	10000515 	stw	zero,20(r2)
   493a4:	003ff206 	br	49370 <_gp+0xfffedc48>
   493a8:	8023883a 	mov	r17,r16
   493ac:	0029883a 	mov	r20,zero
   493b0:	4021883a 	mov	r16,r8
   493b4:	003fad06 	br	4926c <_gp+0xfffedb44>
   493b8:	9005883a 	mov	r2,r18
   493bc:	94400504 	addi	r17,r18,20
   493c0:	9c000504 	addi	r16,r19,20
   493c4:	9825883a 	mov	r18,r19
   493c8:	05000044 	movi	r20,1
   493cc:	1027883a 	mov	r19,r2
   493d0:	003fa606 	br	4926c <_gp+0xfffedb44>

000493d4 <__ulp>:
   493d4:	295ffc2c 	andhi	r5,r5,32752
   493d8:	00bf3034 	movhi	r2,64704
   493dc:	2887883a 	add	r3,r5,r2
   493e0:	00c0020e 	bge	zero,r3,493ec <__ulp+0x18>
   493e4:	0005883a 	mov	r2,zero
   493e8:	f800283a 	ret
   493ec:	00c7c83a 	sub	r3,zero,r3
   493f0:	1807d53a 	srai	r3,r3,20
   493f4:	008004c4 	movi	r2,19
   493f8:	10c00b0e 	bge	r2,r3,49428 <__ulp+0x54>
   493fc:	18bffb04 	addi	r2,r3,-20
   49400:	01000784 	movi	r4,30
   49404:	0007883a 	mov	r3,zero
   49408:	20800516 	blt	r4,r2,49420 <__ulp+0x4c>
   4940c:	010007c4 	movi	r4,31
   49410:	2089c83a 	sub	r4,r4,r2
   49414:	00800044 	movi	r2,1
   49418:	1104983a 	sll	r2,r2,r4
   4941c:	f800283a 	ret
   49420:	00800044 	movi	r2,1
   49424:	f800283a 	ret
   49428:	01400234 	movhi	r5,8
   4942c:	28c7d83a 	sra	r3,r5,r3
   49430:	0005883a 	mov	r2,zero
   49434:	f800283a 	ret

00049438 <__b2d>:
   49438:	defffa04 	addi	sp,sp,-24
   4943c:	dc000015 	stw	r16,0(sp)
   49440:	24000417 	ldw	r16,16(r4)
   49444:	dc400115 	stw	r17,4(sp)
   49448:	24400504 	addi	r17,r4,20
   4944c:	8421883a 	add	r16,r16,r16
   49450:	8421883a 	add	r16,r16,r16
   49454:	8c21883a 	add	r16,r17,r16
   49458:	dc800215 	stw	r18,8(sp)
   4945c:	84bfff17 	ldw	r18,-4(r16)
   49460:	dd000415 	stw	r20,16(sp)
   49464:	dcc00315 	stw	r19,12(sp)
   49468:	9009883a 	mov	r4,r18
   4946c:	2829883a 	mov	r20,r5
   49470:	dfc00515 	stw	ra,20(sp)
   49474:	0048b100 	call	48b10 <__hi0bits>
   49478:	00c00804 	movi	r3,32
   4947c:	1889c83a 	sub	r4,r3,r2
   49480:	a1000015 	stw	r4,0(r20)
   49484:	01000284 	movi	r4,10
   49488:	84ffff04 	addi	r19,r16,-4
   4948c:	20801216 	blt	r4,r2,494d8 <__b2d+0xa0>
   49490:	018002c4 	movi	r6,11
   49494:	308dc83a 	sub	r6,r6,r2
   49498:	9186d83a 	srl	r3,r18,r6
   4949c:	18cffc34 	orhi	r3,r3,16368
   494a0:	8cc0212e 	bgeu	r17,r19,49528 <__b2d+0xf0>
   494a4:	813ffe17 	ldw	r4,-8(r16)
   494a8:	218cd83a 	srl	r6,r4,r6
   494ac:	10800544 	addi	r2,r2,21
   494b0:	9084983a 	sll	r2,r18,r2
   494b4:	1184b03a 	or	r2,r2,r6
   494b8:	dfc00517 	ldw	ra,20(sp)
   494bc:	dd000417 	ldw	r20,16(sp)
   494c0:	dcc00317 	ldw	r19,12(sp)
   494c4:	dc800217 	ldw	r18,8(sp)
   494c8:	dc400117 	ldw	r17,4(sp)
   494cc:	dc000017 	ldw	r16,0(sp)
   494d0:	dec00604 	addi	sp,sp,24
   494d4:	f800283a 	ret
   494d8:	8cc00f2e 	bgeu	r17,r19,49518 <__b2d+0xe0>
   494dc:	117ffd44 	addi	r5,r2,-11
   494e0:	80bffe17 	ldw	r2,-8(r16)
   494e4:	28000e26 	beq	r5,zero,49520 <__b2d+0xe8>
   494e8:	1949c83a 	sub	r4,r3,r5
   494ec:	9164983a 	sll	r18,r18,r5
   494f0:	1106d83a 	srl	r3,r2,r4
   494f4:	81bffe04 	addi	r6,r16,-8
   494f8:	948ffc34 	orhi	r18,r18,16368
   494fc:	90c6b03a 	or	r3,r18,r3
   49500:	89800e2e 	bgeu	r17,r6,4953c <__b2d+0x104>
   49504:	81bffd17 	ldw	r6,-12(r16)
   49508:	1144983a 	sll	r2,r2,r5
   4950c:	310ad83a 	srl	r5,r6,r4
   49510:	2884b03a 	or	r2,r5,r2
   49514:	003fe806 	br	494b8 <_gp+0xfffedd90>
   49518:	10bffd44 	addi	r2,r2,-11
   4951c:	1000041e 	bne	r2,zero,49530 <__b2d+0xf8>
   49520:	90cffc34 	orhi	r3,r18,16368
   49524:	003fe406 	br	494b8 <_gp+0xfffedd90>
   49528:	000d883a 	mov	r6,zero
   4952c:	003fdf06 	br	494ac <_gp+0xfffedd84>
   49530:	90a4983a 	sll	r18,r18,r2
   49534:	0005883a 	mov	r2,zero
   49538:	003ff906 	br	49520 <_gp+0xfffeddf8>
   4953c:	1144983a 	sll	r2,r2,r5
   49540:	003fdd06 	br	494b8 <_gp+0xfffedd90>

00049544 <__d2b>:
   49544:	defff804 	addi	sp,sp,-32
   49548:	dc000215 	stw	r16,8(sp)
   4954c:	3021883a 	mov	r16,r6
   49550:	dc400315 	stw	r17,12(sp)
   49554:	8022907a 	slli	r17,r16,1
   49558:	dd000615 	stw	r20,24(sp)
   4955c:	2829883a 	mov	r20,r5
   49560:	01400044 	movi	r5,1
   49564:	dcc00515 	stw	r19,20(sp)
   49568:	dc800415 	stw	r18,16(sp)
   4956c:	dfc00715 	stw	ra,28(sp)
   49570:	3825883a 	mov	r18,r7
   49574:	8822d57a 	srli	r17,r17,21
   49578:	00487f40 	call	487f4 <_Balloc>
   4957c:	1027883a 	mov	r19,r2
   49580:	00800434 	movhi	r2,16
   49584:	10bfffc4 	addi	r2,r2,-1
   49588:	808c703a 	and	r6,r16,r2
   4958c:	88000126 	beq	r17,zero,49594 <__d2b+0x50>
   49590:	31800434 	orhi	r6,r6,16
   49594:	d9800015 	stw	r6,0(sp)
   49598:	a0002426 	beq	r20,zero,4962c <__d2b+0xe8>
   4959c:	d9000104 	addi	r4,sp,4
   495a0:	dd000115 	stw	r20,4(sp)
   495a4:	0048b780 	call	48b78 <__lo0bits>
   495a8:	d8c00017 	ldw	r3,0(sp)
   495ac:	10002f1e 	bne	r2,zero,4966c <__d2b+0x128>
   495b0:	d9000117 	ldw	r4,4(sp)
   495b4:	99000515 	stw	r4,20(r19)
   495b8:	1821003a 	cmpeq	r16,r3,zero
   495bc:	01000084 	movi	r4,2
   495c0:	2421c83a 	sub	r16,r4,r16
   495c4:	98c00615 	stw	r3,24(r19)
   495c8:	9c000415 	stw	r16,16(r19)
   495cc:	88001f1e 	bne	r17,zero,4964c <__d2b+0x108>
   495d0:	10bef384 	addi	r2,r2,-1074
   495d4:	90800015 	stw	r2,0(r18)
   495d8:	00900034 	movhi	r2,16384
   495dc:	10bfffc4 	addi	r2,r2,-1
   495e0:	8085883a 	add	r2,r16,r2
   495e4:	1085883a 	add	r2,r2,r2
   495e8:	1085883a 	add	r2,r2,r2
   495ec:	9885883a 	add	r2,r19,r2
   495f0:	11000517 	ldw	r4,20(r2)
   495f4:	8020917a 	slli	r16,r16,5
   495f8:	0048b100 	call	48b10 <__hi0bits>
   495fc:	d8c00817 	ldw	r3,32(sp)
   49600:	8085c83a 	sub	r2,r16,r2
   49604:	18800015 	stw	r2,0(r3)
   49608:	9805883a 	mov	r2,r19
   4960c:	dfc00717 	ldw	ra,28(sp)
   49610:	dd000617 	ldw	r20,24(sp)
   49614:	dcc00517 	ldw	r19,20(sp)
   49618:	dc800417 	ldw	r18,16(sp)
   4961c:	dc400317 	ldw	r17,12(sp)
   49620:	dc000217 	ldw	r16,8(sp)
   49624:	dec00804 	addi	sp,sp,32
   49628:	f800283a 	ret
   4962c:	d809883a 	mov	r4,sp
   49630:	0048b780 	call	48b78 <__lo0bits>
   49634:	d8c00017 	ldw	r3,0(sp)
   49638:	04000044 	movi	r16,1
   4963c:	9c000415 	stw	r16,16(r19)
   49640:	98c00515 	stw	r3,20(r19)
   49644:	10800804 	addi	r2,r2,32
   49648:	883fe126 	beq	r17,zero,495d0 <_gp+0xfffedea8>
   4964c:	00c00d44 	movi	r3,53
   49650:	8c7ef344 	addi	r17,r17,-1075
   49654:	88a3883a 	add	r17,r17,r2
   49658:	1885c83a 	sub	r2,r3,r2
   4965c:	d8c00817 	ldw	r3,32(sp)
   49660:	94400015 	stw	r17,0(r18)
   49664:	18800015 	stw	r2,0(r3)
   49668:	003fe706 	br	49608 <_gp+0xfffedee0>
   4966c:	01000804 	movi	r4,32
   49670:	2089c83a 	sub	r4,r4,r2
   49674:	1908983a 	sll	r4,r3,r4
   49678:	d9400117 	ldw	r5,4(sp)
   4967c:	1886d83a 	srl	r3,r3,r2
   49680:	2148b03a 	or	r4,r4,r5
   49684:	99000515 	stw	r4,20(r19)
   49688:	d8c00015 	stw	r3,0(sp)
   4968c:	003fca06 	br	495b8 <_gp+0xfffede90>

00049690 <__ratio>:
   49690:	defff904 	addi	sp,sp,-28
   49694:	dc400315 	stw	r17,12(sp)
   49698:	2823883a 	mov	r17,r5
   4969c:	d9400104 	addi	r5,sp,4
   496a0:	dfc00615 	stw	ra,24(sp)
   496a4:	dcc00515 	stw	r19,20(sp)
   496a8:	dc800415 	stw	r18,16(sp)
   496ac:	2027883a 	mov	r19,r4
   496b0:	dc000215 	stw	r16,8(sp)
   496b4:	00494380 	call	49438 <__b2d>
   496b8:	d80b883a 	mov	r5,sp
   496bc:	8809883a 	mov	r4,r17
   496c0:	1025883a 	mov	r18,r2
   496c4:	1821883a 	mov	r16,r3
   496c8:	00494380 	call	49438 <__b2d>
   496cc:	8a000417 	ldw	r8,16(r17)
   496d0:	99000417 	ldw	r4,16(r19)
   496d4:	d9400117 	ldw	r5,4(sp)
   496d8:	2209c83a 	sub	r4,r4,r8
   496dc:	2010917a 	slli	r8,r4,5
   496e0:	d9000017 	ldw	r4,0(sp)
   496e4:	2909c83a 	sub	r4,r5,r4
   496e8:	4109883a 	add	r4,r8,r4
   496ec:	01000e0e 	bge	zero,r4,49728 <__ratio+0x98>
   496f0:	2008953a 	slli	r4,r4,20
   496f4:	2421883a 	add	r16,r4,r16
   496f8:	100d883a 	mov	r6,r2
   496fc:	180f883a 	mov	r7,r3
   49700:	9009883a 	mov	r4,r18
   49704:	800b883a 	mov	r5,r16
   49708:	00409d40 	call	409d4 <__divdf3>
   4970c:	dfc00617 	ldw	ra,24(sp)
   49710:	dcc00517 	ldw	r19,20(sp)
   49714:	dc800417 	ldw	r18,16(sp)
   49718:	dc400317 	ldw	r17,12(sp)
   4971c:	dc000217 	ldw	r16,8(sp)
   49720:	dec00704 	addi	sp,sp,28
   49724:	f800283a 	ret
   49728:	2008953a 	slli	r4,r4,20
   4972c:	1907c83a 	sub	r3,r3,r4
   49730:	003ff106 	br	496f8 <_gp+0xfffedfd0>

00049734 <_mprec_log10>:
   49734:	defffe04 	addi	sp,sp,-8
   49738:	dc000015 	stw	r16,0(sp)
   4973c:	dfc00115 	stw	ra,4(sp)
   49740:	008005c4 	movi	r2,23
   49744:	2021883a 	mov	r16,r4
   49748:	11000d0e 	bge	r2,r4,49780 <_mprec_log10+0x4c>
   4974c:	0005883a 	mov	r2,zero
   49750:	00cffc34 	movhi	r3,16368
   49754:	843fffc4 	addi	r16,r16,-1
   49758:	000d883a 	mov	r6,zero
   4975c:	01d00934 	movhi	r7,16420
   49760:	1009883a 	mov	r4,r2
   49764:	180b883a 	mov	r5,r3
   49768:	004d2480 	call	4d248 <__muldf3>
   4976c:	803ff91e 	bne	r16,zero,49754 <_gp+0xfffee02c>
   49770:	dfc00117 	ldw	ra,4(sp)
   49774:	dc000017 	ldw	r16,0(sp)
   49778:	dec00204 	addi	sp,sp,8
   4977c:	f800283a 	ret
   49780:	202090fa 	slli	r16,r4,3
   49784:	00800174 	movhi	r2,5
   49788:	1086a404 	addi	r2,r2,6800
   4978c:	1421883a 	add	r16,r2,r16
   49790:	80800017 	ldw	r2,0(r16)
   49794:	80c00117 	ldw	r3,4(r16)
   49798:	dfc00117 	ldw	ra,4(sp)
   4979c:	dc000017 	ldw	r16,0(sp)
   497a0:	dec00204 	addi	sp,sp,8
   497a4:	f800283a 	ret

000497a8 <__copybits>:
   497a8:	297fffc4 	addi	r5,r5,-1
   497ac:	280fd17a 	srai	r7,r5,5
   497b0:	30c00417 	ldw	r3,16(r6)
   497b4:	30800504 	addi	r2,r6,20
   497b8:	39c00044 	addi	r7,r7,1
   497bc:	18c7883a 	add	r3,r3,r3
   497c0:	39cf883a 	add	r7,r7,r7
   497c4:	18c7883a 	add	r3,r3,r3
   497c8:	39cf883a 	add	r7,r7,r7
   497cc:	10c7883a 	add	r3,r2,r3
   497d0:	21cf883a 	add	r7,r4,r7
   497d4:	10c00d2e 	bgeu	r2,r3,4980c <__copybits+0x64>
   497d8:	200b883a 	mov	r5,r4
   497dc:	12000017 	ldw	r8,0(r2)
   497e0:	29400104 	addi	r5,r5,4
   497e4:	10800104 	addi	r2,r2,4
   497e8:	2a3fff15 	stw	r8,-4(r5)
   497ec:	10fffb36 	bltu	r2,r3,497dc <_gp+0xfffee0b4>
   497f0:	1985c83a 	sub	r2,r3,r6
   497f4:	10bffac4 	addi	r2,r2,-21
   497f8:	1004d0ba 	srli	r2,r2,2
   497fc:	10800044 	addi	r2,r2,1
   49800:	1085883a 	add	r2,r2,r2
   49804:	1085883a 	add	r2,r2,r2
   49808:	2089883a 	add	r4,r4,r2
   4980c:	21c0032e 	bgeu	r4,r7,4981c <__copybits+0x74>
   49810:	20000015 	stw	zero,0(r4)
   49814:	21000104 	addi	r4,r4,4
   49818:	21fffd36 	bltu	r4,r7,49810 <_gp+0xfffee0e8>
   4981c:	f800283a 	ret

00049820 <__any_on>:
   49820:	20c00417 	ldw	r3,16(r4)
   49824:	2805d17a 	srai	r2,r5,5
   49828:	21000504 	addi	r4,r4,20
   4982c:	18800d0e 	bge	r3,r2,49864 <__any_on+0x44>
   49830:	18c7883a 	add	r3,r3,r3
   49834:	18c7883a 	add	r3,r3,r3
   49838:	20c7883a 	add	r3,r4,r3
   4983c:	20c0192e 	bgeu	r4,r3,498a4 <__any_on+0x84>
   49840:	18bfff17 	ldw	r2,-4(r3)
   49844:	18ffff04 	addi	r3,r3,-4
   49848:	1000041e 	bne	r2,zero,4985c <__any_on+0x3c>
   4984c:	20c0142e 	bgeu	r4,r3,498a0 <__any_on+0x80>
   49850:	18ffff04 	addi	r3,r3,-4
   49854:	19400017 	ldw	r5,0(r3)
   49858:	283ffc26 	beq	r5,zero,4984c <_gp+0xfffee124>
   4985c:	00800044 	movi	r2,1
   49860:	f800283a 	ret
   49864:	10c00a0e 	bge	r2,r3,49890 <__any_on+0x70>
   49868:	1085883a 	add	r2,r2,r2
   4986c:	1085883a 	add	r2,r2,r2
   49870:	294007cc 	andi	r5,r5,31
   49874:	2087883a 	add	r3,r4,r2
   49878:	283ff026 	beq	r5,zero,4983c <_gp+0xfffee114>
   4987c:	19800017 	ldw	r6,0(r3)
   49880:	3144d83a 	srl	r2,r6,r5
   49884:	114a983a 	sll	r5,r2,r5
   49888:	317ff41e 	bne	r6,r5,4985c <_gp+0xfffee134>
   4988c:	003feb06 	br	4983c <_gp+0xfffee114>
   49890:	1085883a 	add	r2,r2,r2
   49894:	1085883a 	add	r2,r2,r2
   49898:	2087883a 	add	r3,r4,r2
   4989c:	003fe706 	br	4983c <_gp+0xfffee114>
   498a0:	f800283a 	ret
   498a4:	0005883a 	mov	r2,zero
   498a8:	f800283a 	ret

000498ac <_read_r>:
   498ac:	defffd04 	addi	sp,sp,-12
   498b0:	2805883a 	mov	r2,r5
   498b4:	dc000015 	stw	r16,0(sp)
   498b8:	04000174 	movhi	r16,5
   498bc:	dc400115 	stw	r17,4(sp)
   498c0:	300b883a 	mov	r5,r6
   498c4:	8414ea04 	addi	r16,r16,21416
   498c8:	2023883a 	mov	r17,r4
   498cc:	380d883a 	mov	r6,r7
   498d0:	1009883a 	mov	r4,r2
   498d4:	dfc00215 	stw	ra,8(sp)
   498d8:	80000015 	stw	zero,0(r16)
   498dc:	004edb00 	call	4edb0 <read>
   498e0:	00ffffc4 	movi	r3,-1
   498e4:	10c00526 	beq	r2,r3,498fc <_read_r+0x50>
   498e8:	dfc00217 	ldw	ra,8(sp)
   498ec:	dc400117 	ldw	r17,4(sp)
   498f0:	dc000017 	ldw	r16,0(sp)
   498f4:	dec00304 	addi	sp,sp,12
   498f8:	f800283a 	ret
   498fc:	80c00017 	ldw	r3,0(r16)
   49900:	183ff926 	beq	r3,zero,498e8 <_gp+0xfffee1c0>
   49904:	88c00015 	stw	r3,0(r17)
   49908:	003ff706 	br	498e8 <_gp+0xfffee1c0>

0004990c <_realloc_r>:
   4990c:	defff604 	addi	sp,sp,-40
   49910:	dc800215 	stw	r18,8(sp)
   49914:	dfc00915 	stw	ra,36(sp)
   49918:	df000815 	stw	fp,32(sp)
   4991c:	ddc00715 	stw	r23,28(sp)
   49920:	dd800615 	stw	r22,24(sp)
   49924:	dd400515 	stw	r21,20(sp)
   49928:	dd000415 	stw	r20,16(sp)
   4992c:	dcc00315 	stw	r19,12(sp)
   49930:	dc400115 	stw	r17,4(sp)
   49934:	dc000015 	stw	r16,0(sp)
   49938:	3025883a 	mov	r18,r6
   4993c:	2800b726 	beq	r5,zero,49c1c <_realloc_r+0x310>
   49940:	282b883a 	mov	r21,r5
   49944:	2029883a 	mov	r20,r4
   49948:	004eaa80 	call	4eaa8 <__malloc_lock>
   4994c:	a8bfff17 	ldw	r2,-4(r21)
   49950:	043fff04 	movi	r16,-4
   49954:	90c002c4 	addi	r3,r18,11
   49958:	01000584 	movi	r4,22
   4995c:	acfffe04 	addi	r19,r21,-8
   49960:	1420703a 	and	r16,r2,r16
   49964:	20c0332e 	bgeu	r4,r3,49a34 <_realloc_r+0x128>
   49968:	047ffe04 	movi	r17,-8
   4996c:	1c62703a 	and	r17,r3,r17
   49970:	8807883a 	mov	r3,r17
   49974:	88005816 	blt	r17,zero,49ad8 <_realloc_r+0x1cc>
   49978:	8c805736 	bltu	r17,r18,49ad8 <_realloc_r+0x1cc>
   4997c:	80c0300e 	bge	r16,r3,49a40 <_realloc_r+0x134>
   49980:	07000174 	movhi	fp,5
   49984:	e7081e04 	addi	fp,fp,8312
   49988:	e1c00217 	ldw	r7,8(fp)
   4998c:	9c09883a 	add	r4,r19,r16
   49990:	22000117 	ldw	r8,4(r4)
   49994:	21c06326 	beq	r4,r7,49b24 <_realloc_r+0x218>
   49998:	017fff84 	movi	r5,-2
   4999c:	414a703a 	and	r5,r8,r5
   499a0:	214b883a 	add	r5,r4,r5
   499a4:	29800117 	ldw	r6,4(r5)
   499a8:	3180004c 	andi	r6,r6,1
   499ac:	30003f26 	beq	r6,zero,49aac <_realloc_r+0x1a0>
   499b0:	1080004c 	andi	r2,r2,1
   499b4:	10008326 	beq	r2,zero,49bc4 <_realloc_r+0x2b8>
   499b8:	900b883a 	mov	r5,r18
   499bc:	a009883a 	mov	r4,r20
   499c0:	0042c340 	call	42c34 <_malloc_r>
   499c4:	1025883a 	mov	r18,r2
   499c8:	10011e26 	beq	r2,zero,49e44 <_realloc_r+0x538>
   499cc:	a93fff17 	ldw	r4,-4(r21)
   499d0:	10fffe04 	addi	r3,r2,-8
   499d4:	00bfff84 	movi	r2,-2
   499d8:	2084703a 	and	r2,r4,r2
   499dc:	9885883a 	add	r2,r19,r2
   499e0:	1880ee26 	beq	r3,r2,49d9c <_realloc_r+0x490>
   499e4:	81bfff04 	addi	r6,r16,-4
   499e8:	00800904 	movi	r2,36
   499ec:	1180b836 	bltu	r2,r6,49cd0 <_realloc_r+0x3c4>
   499f0:	00c004c4 	movi	r3,19
   499f4:	19809636 	bltu	r3,r6,49c50 <_realloc_r+0x344>
   499f8:	9005883a 	mov	r2,r18
   499fc:	a807883a 	mov	r3,r21
   49a00:	19000017 	ldw	r4,0(r3)
   49a04:	11000015 	stw	r4,0(r2)
   49a08:	19000117 	ldw	r4,4(r3)
   49a0c:	11000115 	stw	r4,4(r2)
   49a10:	18c00217 	ldw	r3,8(r3)
   49a14:	10c00215 	stw	r3,8(r2)
   49a18:	a80b883a 	mov	r5,r21
   49a1c:	a009883a 	mov	r4,r20
   49a20:	00421040 	call	42104 <_free_r>
   49a24:	a009883a 	mov	r4,r20
   49a28:	004eacc0 	call	4eacc <__malloc_unlock>
   49a2c:	9005883a 	mov	r2,r18
   49a30:	00001206 	br	49a7c <_realloc_r+0x170>
   49a34:	00c00404 	movi	r3,16
   49a38:	1823883a 	mov	r17,r3
   49a3c:	003fce06 	br	49978 <_gp+0xfffee250>
   49a40:	a825883a 	mov	r18,r21
   49a44:	8445c83a 	sub	r2,r16,r17
   49a48:	00c003c4 	movi	r3,15
   49a4c:	18802636 	bltu	r3,r2,49ae8 <_realloc_r+0x1dc>
   49a50:	99800117 	ldw	r6,4(r19)
   49a54:	9c07883a 	add	r3,r19,r16
   49a58:	3180004c 	andi	r6,r6,1
   49a5c:	3420b03a 	or	r16,r6,r16
   49a60:	9c000115 	stw	r16,4(r19)
   49a64:	18800117 	ldw	r2,4(r3)
   49a68:	10800054 	ori	r2,r2,1
   49a6c:	18800115 	stw	r2,4(r3)
   49a70:	a009883a 	mov	r4,r20
   49a74:	004eacc0 	call	4eacc <__malloc_unlock>
   49a78:	9005883a 	mov	r2,r18
   49a7c:	dfc00917 	ldw	ra,36(sp)
   49a80:	df000817 	ldw	fp,32(sp)
   49a84:	ddc00717 	ldw	r23,28(sp)
   49a88:	dd800617 	ldw	r22,24(sp)
   49a8c:	dd400517 	ldw	r21,20(sp)
   49a90:	dd000417 	ldw	r20,16(sp)
   49a94:	dcc00317 	ldw	r19,12(sp)
   49a98:	dc800217 	ldw	r18,8(sp)
   49a9c:	dc400117 	ldw	r17,4(sp)
   49aa0:	dc000017 	ldw	r16,0(sp)
   49aa4:	dec00a04 	addi	sp,sp,40
   49aa8:	f800283a 	ret
   49aac:	017fff04 	movi	r5,-4
   49ab0:	414a703a 	and	r5,r8,r5
   49ab4:	814d883a 	add	r6,r16,r5
   49ab8:	30c01f16 	blt	r6,r3,49b38 <_realloc_r+0x22c>
   49abc:	20800317 	ldw	r2,12(r4)
   49ac0:	20c00217 	ldw	r3,8(r4)
   49ac4:	a825883a 	mov	r18,r21
   49ac8:	3021883a 	mov	r16,r6
   49acc:	18800315 	stw	r2,12(r3)
   49ad0:	10c00215 	stw	r3,8(r2)
   49ad4:	003fdb06 	br	49a44 <_gp+0xfffee31c>
   49ad8:	00800304 	movi	r2,12
   49adc:	a0800015 	stw	r2,0(r20)
   49ae0:	0005883a 	mov	r2,zero
   49ae4:	003fe506 	br	49a7c <_gp+0xfffee354>
   49ae8:	98c00117 	ldw	r3,4(r19)
   49aec:	9c4b883a 	add	r5,r19,r17
   49af0:	11000054 	ori	r4,r2,1
   49af4:	18c0004c 	andi	r3,r3,1
   49af8:	1c62b03a 	or	r17,r3,r17
   49afc:	9c400115 	stw	r17,4(r19)
   49b00:	29000115 	stw	r4,4(r5)
   49b04:	2885883a 	add	r2,r5,r2
   49b08:	10c00117 	ldw	r3,4(r2)
   49b0c:	29400204 	addi	r5,r5,8
   49b10:	a009883a 	mov	r4,r20
   49b14:	18c00054 	ori	r3,r3,1
   49b18:	10c00115 	stw	r3,4(r2)
   49b1c:	00421040 	call	42104 <_free_r>
   49b20:	003fd306 	br	49a70 <_gp+0xfffee348>
   49b24:	017fff04 	movi	r5,-4
   49b28:	414a703a 	and	r5,r8,r5
   49b2c:	89800404 	addi	r6,r17,16
   49b30:	8151883a 	add	r8,r16,r5
   49b34:	4180590e 	bge	r8,r6,49c9c <_realloc_r+0x390>
   49b38:	1080004c 	andi	r2,r2,1
   49b3c:	103f9e1e 	bne	r2,zero,499b8 <_gp+0xfffee290>
   49b40:	adbffe17 	ldw	r22,-8(r21)
   49b44:	00bfff04 	movi	r2,-4
   49b48:	9dadc83a 	sub	r22,r19,r22
   49b4c:	b1800117 	ldw	r6,4(r22)
   49b50:	3084703a 	and	r2,r6,r2
   49b54:	20002026 	beq	r4,zero,49bd8 <_realloc_r+0x2cc>
   49b58:	80af883a 	add	r23,r16,r2
   49b5c:	b96f883a 	add	r23,r23,r5
   49b60:	21c05f26 	beq	r4,r7,49ce0 <_realloc_r+0x3d4>
   49b64:	b8c01c16 	blt	r23,r3,49bd8 <_realloc_r+0x2cc>
   49b68:	20800317 	ldw	r2,12(r4)
   49b6c:	20c00217 	ldw	r3,8(r4)
   49b70:	81bfff04 	addi	r6,r16,-4
   49b74:	01000904 	movi	r4,36
   49b78:	18800315 	stw	r2,12(r3)
   49b7c:	10c00215 	stw	r3,8(r2)
   49b80:	b0c00217 	ldw	r3,8(r22)
   49b84:	b0800317 	ldw	r2,12(r22)
   49b88:	b4800204 	addi	r18,r22,8
   49b8c:	18800315 	stw	r2,12(r3)
   49b90:	10c00215 	stw	r3,8(r2)
   49b94:	21801b36 	bltu	r4,r6,49c04 <_realloc_r+0x2f8>
   49b98:	008004c4 	movi	r2,19
   49b9c:	1180352e 	bgeu	r2,r6,49c74 <_realloc_r+0x368>
   49ba0:	a8800017 	ldw	r2,0(r21)
   49ba4:	b0800215 	stw	r2,8(r22)
   49ba8:	a8800117 	ldw	r2,4(r21)
   49bac:	b0800315 	stw	r2,12(r22)
   49bb0:	008006c4 	movi	r2,27
   49bb4:	11807f36 	bltu	r2,r6,49db4 <_realloc_r+0x4a8>
   49bb8:	b0800404 	addi	r2,r22,16
   49bbc:	ad400204 	addi	r21,r21,8
   49bc0:	00002d06 	br	49c78 <_realloc_r+0x36c>
   49bc4:	adbffe17 	ldw	r22,-8(r21)
   49bc8:	00bfff04 	movi	r2,-4
   49bcc:	9dadc83a 	sub	r22,r19,r22
   49bd0:	b1000117 	ldw	r4,4(r22)
   49bd4:	2084703a 	and	r2,r4,r2
   49bd8:	b03f7726 	beq	r22,zero,499b8 <_gp+0xfffee290>
   49bdc:	80af883a 	add	r23,r16,r2
   49be0:	b8ff7516 	blt	r23,r3,499b8 <_gp+0xfffee290>
   49be4:	b0800317 	ldw	r2,12(r22)
   49be8:	b0c00217 	ldw	r3,8(r22)
   49bec:	81bfff04 	addi	r6,r16,-4
   49bf0:	01000904 	movi	r4,36
   49bf4:	18800315 	stw	r2,12(r3)
   49bf8:	10c00215 	stw	r3,8(r2)
   49bfc:	b4800204 	addi	r18,r22,8
   49c00:	21bfe52e 	bgeu	r4,r6,49b98 <_gp+0xfffee470>
   49c04:	a80b883a 	mov	r5,r21
   49c08:	9009883a 	mov	r4,r18
   49c0c:	00486980 	call	48698 <memmove>
   49c10:	b821883a 	mov	r16,r23
   49c14:	b027883a 	mov	r19,r22
   49c18:	003f8a06 	br	49a44 <_gp+0xfffee31c>
   49c1c:	300b883a 	mov	r5,r6
   49c20:	dfc00917 	ldw	ra,36(sp)
   49c24:	df000817 	ldw	fp,32(sp)
   49c28:	ddc00717 	ldw	r23,28(sp)
   49c2c:	dd800617 	ldw	r22,24(sp)
   49c30:	dd400517 	ldw	r21,20(sp)
   49c34:	dd000417 	ldw	r20,16(sp)
   49c38:	dcc00317 	ldw	r19,12(sp)
   49c3c:	dc800217 	ldw	r18,8(sp)
   49c40:	dc400117 	ldw	r17,4(sp)
   49c44:	dc000017 	ldw	r16,0(sp)
   49c48:	dec00a04 	addi	sp,sp,40
   49c4c:	0042c341 	jmpi	42c34 <_malloc_r>
   49c50:	a8c00017 	ldw	r3,0(r21)
   49c54:	90c00015 	stw	r3,0(r18)
   49c58:	a8c00117 	ldw	r3,4(r21)
   49c5c:	90c00115 	stw	r3,4(r18)
   49c60:	00c006c4 	movi	r3,27
   49c64:	19804536 	bltu	r3,r6,49d7c <_realloc_r+0x470>
   49c68:	90800204 	addi	r2,r18,8
   49c6c:	a8c00204 	addi	r3,r21,8
   49c70:	003f6306 	br	49a00 <_gp+0xfffee2d8>
   49c74:	9005883a 	mov	r2,r18
   49c78:	a8c00017 	ldw	r3,0(r21)
   49c7c:	b821883a 	mov	r16,r23
   49c80:	b027883a 	mov	r19,r22
   49c84:	10c00015 	stw	r3,0(r2)
   49c88:	a8c00117 	ldw	r3,4(r21)
   49c8c:	10c00115 	stw	r3,4(r2)
   49c90:	a8c00217 	ldw	r3,8(r21)
   49c94:	10c00215 	stw	r3,8(r2)
   49c98:	003f6a06 	br	49a44 <_gp+0xfffee31c>
   49c9c:	9c67883a 	add	r19,r19,r17
   49ca0:	4445c83a 	sub	r2,r8,r17
   49ca4:	e4c00215 	stw	r19,8(fp)
   49ca8:	10800054 	ori	r2,r2,1
   49cac:	98800115 	stw	r2,4(r19)
   49cb0:	a8bfff17 	ldw	r2,-4(r21)
   49cb4:	a009883a 	mov	r4,r20
   49cb8:	1080004c 	andi	r2,r2,1
   49cbc:	1462b03a 	or	r17,r2,r17
   49cc0:	ac7fff15 	stw	r17,-4(r21)
   49cc4:	004eacc0 	call	4eacc <__malloc_unlock>
   49cc8:	a805883a 	mov	r2,r21
   49ccc:	003f6b06 	br	49a7c <_gp+0xfffee354>
   49cd0:	a80b883a 	mov	r5,r21
   49cd4:	9009883a 	mov	r4,r18
   49cd8:	00486980 	call	48698 <memmove>
   49cdc:	003f4e06 	br	49a18 <_gp+0xfffee2f0>
   49ce0:	89000404 	addi	r4,r17,16
   49ce4:	b93fbc16 	blt	r23,r4,49bd8 <_gp+0xfffee4b0>
   49ce8:	b0800317 	ldw	r2,12(r22)
   49cec:	b0c00217 	ldw	r3,8(r22)
   49cf0:	81bfff04 	addi	r6,r16,-4
   49cf4:	01000904 	movi	r4,36
   49cf8:	18800315 	stw	r2,12(r3)
   49cfc:	10c00215 	stw	r3,8(r2)
   49d00:	b4800204 	addi	r18,r22,8
   49d04:	21804336 	bltu	r4,r6,49e14 <_realloc_r+0x508>
   49d08:	008004c4 	movi	r2,19
   49d0c:	11803f2e 	bgeu	r2,r6,49e0c <_realloc_r+0x500>
   49d10:	a8800017 	ldw	r2,0(r21)
   49d14:	b0800215 	stw	r2,8(r22)
   49d18:	a8800117 	ldw	r2,4(r21)
   49d1c:	b0800315 	stw	r2,12(r22)
   49d20:	008006c4 	movi	r2,27
   49d24:	11803f36 	bltu	r2,r6,49e24 <_realloc_r+0x518>
   49d28:	b0800404 	addi	r2,r22,16
   49d2c:	ad400204 	addi	r21,r21,8
   49d30:	a8c00017 	ldw	r3,0(r21)
   49d34:	10c00015 	stw	r3,0(r2)
   49d38:	a8c00117 	ldw	r3,4(r21)
   49d3c:	10c00115 	stw	r3,4(r2)
   49d40:	a8c00217 	ldw	r3,8(r21)
   49d44:	10c00215 	stw	r3,8(r2)
   49d48:	b447883a 	add	r3,r22,r17
   49d4c:	bc45c83a 	sub	r2,r23,r17
   49d50:	e0c00215 	stw	r3,8(fp)
   49d54:	10800054 	ori	r2,r2,1
   49d58:	18800115 	stw	r2,4(r3)
   49d5c:	b0800117 	ldw	r2,4(r22)
   49d60:	a009883a 	mov	r4,r20
   49d64:	1080004c 	andi	r2,r2,1
   49d68:	1462b03a 	or	r17,r2,r17
   49d6c:	b4400115 	stw	r17,4(r22)
   49d70:	004eacc0 	call	4eacc <__malloc_unlock>
   49d74:	9005883a 	mov	r2,r18
   49d78:	003f4006 	br	49a7c <_gp+0xfffee354>
   49d7c:	a8c00217 	ldw	r3,8(r21)
   49d80:	90c00215 	stw	r3,8(r18)
   49d84:	a8c00317 	ldw	r3,12(r21)
   49d88:	90c00315 	stw	r3,12(r18)
   49d8c:	30801126 	beq	r6,r2,49dd4 <_realloc_r+0x4c8>
   49d90:	90800404 	addi	r2,r18,16
   49d94:	a8c00404 	addi	r3,r21,16
   49d98:	003f1906 	br	49a00 <_gp+0xfffee2d8>
   49d9c:	90ffff17 	ldw	r3,-4(r18)
   49da0:	00bfff04 	movi	r2,-4
   49da4:	a825883a 	mov	r18,r21
   49da8:	1884703a 	and	r2,r3,r2
   49dac:	80a1883a 	add	r16,r16,r2
   49db0:	003f2406 	br	49a44 <_gp+0xfffee31c>
   49db4:	a8800217 	ldw	r2,8(r21)
   49db8:	b0800415 	stw	r2,16(r22)
   49dbc:	a8800317 	ldw	r2,12(r21)
   49dc0:	b0800515 	stw	r2,20(r22)
   49dc4:	31000a26 	beq	r6,r4,49df0 <_realloc_r+0x4e4>
   49dc8:	b0800604 	addi	r2,r22,24
   49dcc:	ad400404 	addi	r21,r21,16
   49dd0:	003fa906 	br	49c78 <_gp+0xfffee550>
   49dd4:	a9000417 	ldw	r4,16(r21)
   49dd8:	90800604 	addi	r2,r18,24
   49ddc:	a8c00604 	addi	r3,r21,24
   49de0:	91000415 	stw	r4,16(r18)
   49de4:	a9000517 	ldw	r4,20(r21)
   49de8:	91000515 	stw	r4,20(r18)
   49dec:	003f0406 	br	49a00 <_gp+0xfffee2d8>
   49df0:	a8c00417 	ldw	r3,16(r21)
   49df4:	ad400604 	addi	r21,r21,24
   49df8:	b0800804 	addi	r2,r22,32
   49dfc:	b0c00615 	stw	r3,24(r22)
   49e00:	a8ffff17 	ldw	r3,-4(r21)
   49e04:	b0c00715 	stw	r3,28(r22)
   49e08:	003f9b06 	br	49c78 <_gp+0xfffee550>
   49e0c:	9005883a 	mov	r2,r18
   49e10:	003fc706 	br	49d30 <_gp+0xfffee608>
   49e14:	a80b883a 	mov	r5,r21
   49e18:	9009883a 	mov	r4,r18
   49e1c:	00486980 	call	48698 <memmove>
   49e20:	003fc906 	br	49d48 <_gp+0xfffee620>
   49e24:	a8800217 	ldw	r2,8(r21)
   49e28:	b0800415 	stw	r2,16(r22)
   49e2c:	a8800317 	ldw	r2,12(r21)
   49e30:	b0800515 	stw	r2,20(r22)
   49e34:	31000726 	beq	r6,r4,49e54 <_realloc_r+0x548>
   49e38:	b0800604 	addi	r2,r22,24
   49e3c:	ad400404 	addi	r21,r21,16
   49e40:	003fbb06 	br	49d30 <_gp+0xfffee608>
   49e44:	a009883a 	mov	r4,r20
   49e48:	004eacc0 	call	4eacc <__malloc_unlock>
   49e4c:	0005883a 	mov	r2,zero
   49e50:	003f0a06 	br	49a7c <_gp+0xfffee354>
   49e54:	a8c00417 	ldw	r3,16(r21)
   49e58:	ad400604 	addi	r21,r21,24
   49e5c:	b0800804 	addi	r2,r22,32
   49e60:	b0c00615 	stw	r3,24(r22)
   49e64:	a8ffff17 	ldw	r3,-4(r21)
   49e68:	b0c00715 	stw	r3,28(r22)
   49e6c:	003fb006 	br	49d30 <_gp+0xfffee608>

00049e70 <__fpclassifyd>:
   49e70:	00a00034 	movhi	r2,32768
   49e74:	10bfffc4 	addi	r2,r2,-1
   49e78:	2884703a 	and	r2,r5,r2
   49e7c:	10000726 	beq	r2,zero,49e9c <__fpclassifyd+0x2c>
   49e80:	00fffc34 	movhi	r3,65520
   49e84:	019ff834 	movhi	r6,32736
   49e88:	28c7883a 	add	r3,r5,r3
   49e8c:	31bfffc4 	addi	r6,r6,-1
   49e90:	30c00536 	bltu	r6,r3,49ea8 <__fpclassifyd+0x38>
   49e94:	00800104 	movi	r2,4
   49e98:	f800283a 	ret
   49e9c:	2000021e 	bne	r4,zero,49ea8 <__fpclassifyd+0x38>
   49ea0:	00800084 	movi	r2,2
   49ea4:	f800283a 	ret
   49ea8:	00dffc34 	movhi	r3,32752
   49eac:	019ff834 	movhi	r6,32736
   49eb0:	28cb883a 	add	r5,r5,r3
   49eb4:	31bfffc4 	addi	r6,r6,-1
   49eb8:	317ff62e 	bgeu	r6,r5,49e94 <_gp+0xfffee76c>
   49ebc:	01400434 	movhi	r5,16
   49ec0:	297fffc4 	addi	r5,r5,-1
   49ec4:	28800236 	bltu	r5,r2,49ed0 <__fpclassifyd+0x60>
   49ec8:	008000c4 	movi	r2,3
   49ecc:	f800283a 	ret
   49ed0:	10c00226 	beq	r2,r3,49edc <__fpclassifyd+0x6c>
   49ed4:	0005883a 	mov	r2,zero
   49ed8:	f800283a 	ret
   49edc:	2005003a 	cmpeq	r2,r4,zero
   49ee0:	f800283a 	ret

00049ee4 <strcmp>:
   49ee4:	2144b03a 	or	r2,r4,r5
   49ee8:	108000cc 	andi	r2,r2,3
   49eec:	1000171e 	bne	r2,zero,49f4c <strcmp+0x68>
   49ef0:	20800017 	ldw	r2,0(r4)
   49ef4:	28c00017 	ldw	r3,0(r5)
   49ef8:	10c0141e 	bne	r2,r3,49f4c <strcmp+0x68>
   49efc:	027fbff4 	movhi	r9,65279
   49f00:	4a7fbfc4 	addi	r9,r9,-257
   49f04:	0086303a 	nor	r3,zero,r2
   49f08:	02202074 	movhi	r8,32897
   49f0c:	1245883a 	add	r2,r2,r9
   49f10:	42202004 	addi	r8,r8,-32640
   49f14:	10c4703a 	and	r2,r2,r3
   49f18:	1204703a 	and	r2,r2,r8
   49f1c:	10000226 	beq	r2,zero,49f28 <strcmp+0x44>
   49f20:	00002306 	br	49fb0 <strcmp+0xcc>
   49f24:	1000221e 	bne	r2,zero,49fb0 <strcmp+0xcc>
   49f28:	21000104 	addi	r4,r4,4
   49f2c:	20c00017 	ldw	r3,0(r4)
   49f30:	29400104 	addi	r5,r5,4
   49f34:	29800017 	ldw	r6,0(r5)
   49f38:	1a4f883a 	add	r7,r3,r9
   49f3c:	00c4303a 	nor	r2,zero,r3
   49f40:	3884703a 	and	r2,r7,r2
   49f44:	1204703a 	and	r2,r2,r8
   49f48:	19bff626 	beq	r3,r6,49f24 <_gp+0xfffee7fc>
   49f4c:	20800003 	ldbu	r2,0(r4)
   49f50:	10c03fcc 	andi	r3,r2,255
   49f54:	18c0201c 	xori	r3,r3,128
   49f58:	18ffe004 	addi	r3,r3,-128
   49f5c:	18000c26 	beq	r3,zero,49f90 <strcmp+0xac>
   49f60:	29800007 	ldb	r6,0(r5)
   49f64:	19800326 	beq	r3,r6,49f74 <strcmp+0x90>
   49f68:	00001306 	br	49fb8 <strcmp+0xd4>
   49f6c:	29800007 	ldb	r6,0(r5)
   49f70:	11800b1e 	bne	r2,r6,49fa0 <strcmp+0xbc>
   49f74:	21000044 	addi	r4,r4,1
   49f78:	20c00003 	ldbu	r3,0(r4)
   49f7c:	29400044 	addi	r5,r5,1
   49f80:	18803fcc 	andi	r2,r3,255
   49f84:	1080201c 	xori	r2,r2,128
   49f88:	10bfe004 	addi	r2,r2,-128
   49f8c:	103ff71e 	bne	r2,zero,49f6c <_gp+0xfffee844>
   49f90:	0007883a 	mov	r3,zero
   49f94:	28800003 	ldbu	r2,0(r5)
   49f98:	1885c83a 	sub	r2,r3,r2
   49f9c:	f800283a 	ret
   49fa0:	28800003 	ldbu	r2,0(r5)
   49fa4:	18c03fcc 	andi	r3,r3,255
   49fa8:	1885c83a 	sub	r2,r3,r2
   49fac:	f800283a 	ret
   49fb0:	0005883a 	mov	r2,zero
   49fb4:	f800283a 	ret
   49fb8:	10c03fcc 	andi	r3,r2,255
   49fbc:	003ff506 	br	49f94 <_gp+0xfffee86c>

00049fc0 <__sprint_r.part.0>:
   49fc0:	28801917 	ldw	r2,100(r5)
   49fc4:	defff604 	addi	sp,sp,-40
   49fc8:	dd400515 	stw	r21,20(sp)
   49fcc:	dfc00915 	stw	ra,36(sp)
   49fd0:	df000815 	stw	fp,32(sp)
   49fd4:	ddc00715 	stw	r23,28(sp)
   49fd8:	dd800615 	stw	r22,24(sp)
   49fdc:	dd000415 	stw	r20,16(sp)
   49fe0:	dcc00315 	stw	r19,12(sp)
   49fe4:	dc800215 	stw	r18,8(sp)
   49fe8:	dc400115 	stw	r17,4(sp)
   49fec:	dc000015 	stw	r16,0(sp)
   49ff0:	1088000c 	andi	r2,r2,8192
   49ff4:	302b883a 	mov	r21,r6
   49ff8:	10002e26 	beq	r2,zero,4a0b4 <__sprint_r.part.0+0xf4>
   49ffc:	30800217 	ldw	r2,8(r6)
   4a000:	35800017 	ldw	r22,0(r6)
   4a004:	10002926 	beq	r2,zero,4a0ac <__sprint_r.part.0+0xec>
   4a008:	2827883a 	mov	r19,r5
   4a00c:	2029883a 	mov	r20,r4
   4a010:	b5c00104 	addi	r23,r22,4
   4a014:	04bfffc4 	movi	r18,-1
   4a018:	bc400017 	ldw	r17,0(r23)
   4a01c:	b4000017 	ldw	r16,0(r22)
   4a020:	0039883a 	mov	fp,zero
   4a024:	8822d0ba 	srli	r17,r17,2
   4a028:	8800031e 	bne	r17,zero,4a038 <__sprint_r.part.0+0x78>
   4a02c:	00001806 	br	4a090 <__sprint_r.part.0+0xd0>
   4a030:	84000104 	addi	r16,r16,4
   4a034:	8f001526 	beq	r17,fp,4a08c <__sprint_r.part.0+0xcc>
   4a038:	81400017 	ldw	r5,0(r16)
   4a03c:	980d883a 	mov	r6,r19
   4a040:	a009883a 	mov	r4,r20
   4a044:	004b8f80 	call	4b8f8 <_fputwc_r>
   4a048:	e7000044 	addi	fp,fp,1
   4a04c:	14bff81e 	bne	r2,r18,4a030 <_gp+0xfffee908>
   4a050:	9005883a 	mov	r2,r18
   4a054:	a8000215 	stw	zero,8(r21)
   4a058:	a8000115 	stw	zero,4(r21)
   4a05c:	dfc00917 	ldw	ra,36(sp)
   4a060:	df000817 	ldw	fp,32(sp)
   4a064:	ddc00717 	ldw	r23,28(sp)
   4a068:	dd800617 	ldw	r22,24(sp)
   4a06c:	dd400517 	ldw	r21,20(sp)
   4a070:	dd000417 	ldw	r20,16(sp)
   4a074:	dcc00317 	ldw	r19,12(sp)
   4a078:	dc800217 	ldw	r18,8(sp)
   4a07c:	dc400117 	ldw	r17,4(sp)
   4a080:	dc000017 	ldw	r16,0(sp)
   4a084:	dec00a04 	addi	sp,sp,40
   4a088:	f800283a 	ret
   4a08c:	a8800217 	ldw	r2,8(r21)
   4a090:	8c63883a 	add	r17,r17,r17
   4a094:	8c63883a 	add	r17,r17,r17
   4a098:	1445c83a 	sub	r2,r2,r17
   4a09c:	a8800215 	stw	r2,8(r21)
   4a0a0:	b5800204 	addi	r22,r22,8
   4a0a4:	bdc00204 	addi	r23,r23,8
   4a0a8:	103fdb1e 	bne	r2,zero,4a018 <_gp+0xfffee8f0>
   4a0ac:	0005883a 	mov	r2,zero
   4a0b0:	003fe806 	br	4a054 <_gp+0xfffee92c>
   4a0b4:	0047e140 	call	47e14 <__sfvwrite_r>
   4a0b8:	003fe606 	br	4a054 <_gp+0xfffee92c>

0004a0bc <__sprint_r>:
   4a0bc:	30c00217 	ldw	r3,8(r6)
   4a0c0:	18000126 	beq	r3,zero,4a0c8 <__sprint_r+0xc>
   4a0c4:	0049fc01 	jmpi	49fc0 <__sprint_r.part.0>
   4a0c8:	30000115 	stw	zero,4(r6)
   4a0cc:	0005883a 	mov	r2,zero
   4a0d0:	f800283a 	ret

0004a0d4 <___vfiprintf_internal_r>:
   4a0d4:	deffca04 	addi	sp,sp,-216
   4a0d8:	dd403115 	stw	r21,196(sp)
   4a0dc:	dfc03515 	stw	ra,212(sp)
   4a0e0:	df003415 	stw	fp,208(sp)
   4a0e4:	ddc03315 	stw	r23,204(sp)
   4a0e8:	dd803215 	stw	r22,200(sp)
   4a0ec:	dd003015 	stw	r20,192(sp)
   4a0f0:	dcc02f15 	stw	r19,188(sp)
   4a0f4:	dc802e15 	stw	r18,184(sp)
   4a0f8:	dc402d15 	stw	r17,180(sp)
   4a0fc:	dc002c15 	stw	r16,176(sp)
   4a100:	d9002115 	stw	r4,132(sp)
   4a104:	d9402015 	stw	r5,128(sp)
   4a108:	d9c02215 	stw	r7,136(sp)
   4a10c:	302b883a 	mov	r21,r6
   4a110:	20000226 	beq	r4,zero,4a11c <___vfiprintf_internal_r+0x48>
   4a114:	20800e17 	ldw	r2,56(r4)
   4a118:	1000cf26 	beq	r2,zero,4a458 <___vfiprintf_internal_r+0x384>
   4a11c:	d8c02017 	ldw	r3,128(sp)
   4a120:	1880030b 	ldhu	r2,12(r3)
   4a124:	10c8000c 	andi	r3,r2,8192
   4a128:	1800071e 	bne	r3,zero,4a148 <___vfiprintf_internal_r+0x74>
   4a12c:	d9402017 	ldw	r5,128(sp)
   4a130:	00f7ffc4 	movi	r3,-8193
   4a134:	10880014 	ori	r2,r2,8192
   4a138:	29001917 	ldw	r4,100(r5)
   4a13c:	2880030d 	sth	r2,12(r5)
   4a140:	20c6703a 	and	r3,r4,r3
   4a144:	28c01915 	stw	r3,100(r5)
   4a148:	10c0020c 	andi	r3,r2,8
   4a14c:	1800a526 	beq	r3,zero,4a3e4 <___vfiprintf_internal_r+0x310>
   4a150:	d9002017 	ldw	r4,128(sp)
   4a154:	20c00417 	ldw	r3,16(r4)
   4a158:	1800a226 	beq	r3,zero,4a3e4 <___vfiprintf_internal_r+0x310>
   4a15c:	1080068c 	andi	r2,r2,26
   4a160:	00c00284 	movi	r3,10
   4a164:	10c0a826 	beq	r2,r3,4a408 <___vfiprintf_internal_r+0x334>
   4a168:	d9001a04 	addi	r4,sp,104
   4a16c:	d94019c4 	addi	r5,sp,103
   4a170:	04800174 	movhi	r18,5
   4a174:	2145c83a 	sub	r2,r4,r5
   4a178:	9486d604 	addi	r18,r18,7000
   4a17c:	d9001e15 	stw	r4,120(sp)
   4a180:	d9401f15 	stw	r5,124(sp)
   4a184:	dec01a15 	stw	sp,104(sp)
   4a188:	d8001c15 	stw	zero,112(sp)
   4a18c:	d8001b15 	stw	zero,108(sp)
   4a190:	d811883a 	mov	r8,sp
   4a194:	d8002615 	stw	zero,152(sp)
   4a198:	d8002415 	stw	zero,144(sp)
   4a19c:	d8802815 	stw	r2,160(sp)
   4a1a0:	a82d883a 	mov	r22,r21
   4a1a4:	b0800007 	ldb	r2,0(r22)
   4a1a8:	10040d26 	beq	r2,zero,4b1e0 <___vfiprintf_internal_r+0x110c>
   4a1ac:	00c00944 	movi	r3,37
   4a1b0:	b029883a 	mov	r20,r22
   4a1b4:	10c0021e 	bne	r2,r3,4a1c0 <___vfiprintf_internal_r+0xec>
   4a1b8:	00001606 	br	4a214 <___vfiprintf_internal_r+0x140>
   4a1bc:	10c00326 	beq	r2,r3,4a1cc <___vfiprintf_internal_r+0xf8>
   4a1c0:	a5000044 	addi	r20,r20,1
   4a1c4:	a0800007 	ldb	r2,0(r20)
   4a1c8:	103ffc1e 	bne	r2,zero,4a1bc <_gp+0xfffeea94>
   4a1cc:	a5a1c83a 	sub	r16,r20,r22
   4a1d0:	80001026 	beq	r16,zero,4a214 <___vfiprintf_internal_r+0x140>
   4a1d4:	d8c01c17 	ldw	r3,112(sp)
   4a1d8:	d8801b17 	ldw	r2,108(sp)
   4a1dc:	45800015 	stw	r22,0(r8)
   4a1e0:	80c7883a 	add	r3,r16,r3
   4a1e4:	10800044 	addi	r2,r2,1
   4a1e8:	44000115 	stw	r16,4(r8)
   4a1ec:	d8c01c15 	stw	r3,112(sp)
   4a1f0:	d8801b15 	stw	r2,108(sp)
   4a1f4:	010001c4 	movi	r4,7
   4a1f8:	2080750e 	bge	r4,r2,4a3d0 <___vfiprintf_internal_r+0x2fc>
   4a1fc:	1803951e 	bne	r3,zero,4b054 <___vfiprintf_internal_r+0xf80>
   4a200:	d8c02417 	ldw	r3,144(sp)
   4a204:	d8001b15 	stw	zero,108(sp)
   4a208:	d811883a 	mov	r8,sp
   4a20c:	1c07883a 	add	r3,r3,r16
   4a210:	d8c02415 	stw	r3,144(sp)
   4a214:	a0800007 	ldb	r2,0(r20)
   4a218:	1002e026 	beq	r2,zero,4ad9c <___vfiprintf_internal_r+0xcc8>
   4a21c:	a5800044 	addi	r22,r20,1
   4a220:	a0c00047 	ldb	r3,1(r20)
   4a224:	d8001d85 	stb	zero,118(sp)
   4a228:	0027883a 	mov	r19,zero
   4a22c:	d8002305 	stb	zero,140(sp)
   4a230:	043fffc4 	movi	r16,-1
   4a234:	d8002515 	stw	zero,148(sp)
   4a238:	0023883a 	mov	r17,zero
   4a23c:	05001604 	movi	r20,88
   4a240:	05400244 	movi	r21,9
   4a244:	402f883a 	mov	r23,r8
   4a248:	b5800044 	addi	r22,r22,1
   4a24c:	18bff804 	addi	r2,r3,-32
   4a250:	a0827736 	bltu	r20,r2,4ac30 <___vfiprintf_internal_r+0xb5c>
   4a254:	100490ba 	slli	r2,r2,2
   4a258:	01000174 	movhi	r4,5
   4a25c:	21289b04 	addi	r4,r4,-23956
   4a260:	1105883a 	add	r2,r2,r4
   4a264:	10800017 	ldw	r2,0(r2)
   4a268:	1000683a 	jmp	r2
   4a26c:	0004a930 	cmpltui	zero,zero,4772
   4a270:	0004ac30 	cmpltui	zero,zero,4784
   4a274:	0004ac30 	cmpltui	zero,zero,4784
   4a278:	0004a94c 	andi	zero,zero,4773
   4a27c:	0004ac30 	cmpltui	zero,zero,4784
   4a280:	0004ac30 	cmpltui	zero,zero,4784
   4a284:	0004ac30 	cmpltui	zero,zero,4784
   4a288:	0004ac30 	cmpltui	zero,zero,4784
   4a28c:	0004ac30 	cmpltui	zero,zero,4784
   4a290:	0004ac30 	cmpltui	zero,zero,4784
   4a294:	0004ab54 	movui	zero,4781
   4a298:	0004ab78 	rdprs	zero,zero,4781
   4a29c:	0004ac30 	cmpltui	zero,zero,4784
   4a2a0:	0004a470 	cmpltui	zero,zero,4753
   4a2a4:	0004ab8c 	andi	zero,zero,4782
   4a2a8:	0004ac30 	cmpltui	zero,zero,4784
   4a2ac:	0004a958 	cmpnei	zero,zero,4773
   4a2b0:	0004a964 	muli	zero,zero,4773
   4a2b4:	0004a964 	muli	zero,zero,4773
   4a2b8:	0004a964 	muli	zero,zero,4773
   4a2bc:	0004a964 	muli	zero,zero,4773
   4a2c0:	0004a964 	muli	zero,zero,4773
   4a2c4:	0004a964 	muli	zero,zero,4773
   4a2c8:	0004a964 	muli	zero,zero,4773
   4a2cc:	0004a964 	muli	zero,zero,4773
   4a2d0:	0004a964 	muli	zero,zero,4773
   4a2d4:	0004ac30 	cmpltui	zero,zero,4784
   4a2d8:	0004ac30 	cmpltui	zero,zero,4784
   4a2dc:	0004ac30 	cmpltui	zero,zero,4784
   4a2e0:	0004ac30 	cmpltui	zero,zero,4784
   4a2e4:	0004ac30 	cmpltui	zero,zero,4784
   4a2e8:	0004ac30 	cmpltui	zero,zero,4784
   4a2ec:	0004ac30 	cmpltui	zero,zero,4784
   4a2f0:	0004ac30 	cmpltui	zero,zero,4784
   4a2f4:	0004ac30 	cmpltui	zero,zero,4784
   4a2f8:	0004ac30 	cmpltui	zero,zero,4784
   4a2fc:	0004a9a4 	muli	zero,zero,4774
   4a300:	0004ac30 	cmpltui	zero,zero,4784
   4a304:	0004ac30 	cmpltui	zero,zero,4784
   4a308:	0004ac30 	cmpltui	zero,zero,4784
   4a30c:	0004ac30 	cmpltui	zero,zero,4784
   4a310:	0004ac30 	cmpltui	zero,zero,4784
   4a314:	0004ac30 	cmpltui	zero,zero,4784
   4a318:	0004ac30 	cmpltui	zero,zero,4784
   4a31c:	0004ac30 	cmpltui	zero,zero,4784
   4a320:	0004ac30 	cmpltui	zero,zero,4784
   4a324:	0004ac30 	cmpltui	zero,zero,4784
   4a328:	0004a9e0 	cmpeqi	zero,zero,4775
   4a32c:	0004ac30 	cmpltui	zero,zero,4784
   4a330:	0004ac30 	cmpltui	zero,zero,4784
   4a334:	0004ac30 	cmpltui	zero,zero,4784
   4a338:	0004ac30 	cmpltui	zero,zero,4784
   4a33c:	0004ac30 	cmpltui	zero,zero,4784
   4a340:	0004aa3c 	xorhi	zero,zero,4776
   4a344:	0004ac30 	cmpltui	zero,zero,4784
   4a348:	0004ac30 	cmpltui	zero,zero,4784
   4a34c:	0004aab0 	cmpltui	zero,zero,4778
   4a350:	0004ac30 	cmpltui	zero,zero,4784
   4a354:	0004ac30 	cmpltui	zero,zero,4784
   4a358:	0004ac30 	cmpltui	zero,zero,4784
   4a35c:	0004ac30 	cmpltui	zero,zero,4784
   4a360:	0004ac30 	cmpltui	zero,zero,4784
   4a364:	0004ac30 	cmpltui	zero,zero,4784
   4a368:	0004ac30 	cmpltui	zero,zero,4784
   4a36c:	0004ac30 	cmpltui	zero,zero,4784
   4a370:	0004ac30 	cmpltui	zero,zero,4784
   4a374:	0004ac30 	cmpltui	zero,zero,4784
   4a378:	0004a858 	cmpnei	zero,zero,4769
   4a37c:	0004a888 	cmpgei	zero,zero,4770
   4a380:	0004ac30 	cmpltui	zero,zero,4784
   4a384:	0004ac30 	cmpltui	zero,zero,4784
   4a388:	0004ac30 	cmpltui	zero,zero,4784
   4a38c:	0004abd8 	cmpnei	zero,zero,4783
   4a390:	0004a888 	cmpgei	zero,zero,4770
   4a394:	0004ac30 	cmpltui	zero,zero,4784
   4a398:	0004ac30 	cmpltui	zero,zero,4784
   4a39c:	0004a730 	cmpltui	zero,zero,4764
   4a3a0:	0004ac30 	cmpltui	zero,zero,4784
   4a3a4:	0004a744 	movi	zero,4765
   4a3a8:	0004a77c 	xorhi	zero,zero,4765
   4a3ac:	0004a47c 	xorhi	zero,zero,4753
   4a3b0:	0004a724 	muli	zero,zero,4764
   4a3b4:	0004ac30 	cmpltui	zero,zero,4784
   4a3b8:	0004aaf0 	cmpltui	zero,zero,4779
   4a3bc:	0004ac30 	cmpltui	zero,zero,4784
   4a3c0:	0004ab3c 	xorhi	zero,zero,4780
   4a3c4:	0004ac30 	cmpltui	zero,zero,4784
   4a3c8:	0004ac30 	cmpltui	zero,zero,4784
   4a3cc:	0004a800 	call	4a80 <__alt_mem_mem_info-0xb580>
   4a3d0:	42000204 	addi	r8,r8,8
   4a3d4:	d8c02417 	ldw	r3,144(sp)
   4a3d8:	1c07883a 	add	r3,r3,r16
   4a3dc:	d8c02415 	stw	r3,144(sp)
   4a3e0:	003f8c06 	br	4a214 <_gp+0xfffeeaec>
   4a3e4:	d9402017 	ldw	r5,128(sp)
   4a3e8:	d9002117 	ldw	r4,132(sp)
   4a3ec:	00463100 	call	46310 <__swsetup_r>
   4a3f0:	1003c11e 	bne	r2,zero,4b2f8 <___vfiprintf_internal_r+0x1224>
   4a3f4:	d9402017 	ldw	r5,128(sp)
   4a3f8:	00c00284 	movi	r3,10
   4a3fc:	2880030b 	ldhu	r2,12(r5)
   4a400:	1080068c 	andi	r2,r2,26
   4a404:	10ff581e 	bne	r2,r3,4a168 <_gp+0xfffeea40>
   4a408:	d8c02017 	ldw	r3,128(sp)
   4a40c:	1880038f 	ldh	r2,14(r3)
   4a410:	103f5516 	blt	r2,zero,4a168 <_gp+0xfffeea40>
   4a414:	d9c02217 	ldw	r7,136(sp)
   4a418:	d9002117 	ldw	r4,132(sp)
   4a41c:	a80d883a 	mov	r6,r21
   4a420:	180b883a 	mov	r5,r3
   4a424:	004b5fc0 	call	4b5fc <__sbprintf>
   4a428:	dfc03517 	ldw	ra,212(sp)
   4a42c:	df003417 	ldw	fp,208(sp)
   4a430:	ddc03317 	ldw	r23,204(sp)
   4a434:	dd803217 	ldw	r22,200(sp)
   4a438:	dd403117 	ldw	r21,196(sp)
   4a43c:	dd003017 	ldw	r20,192(sp)
   4a440:	dcc02f17 	ldw	r19,188(sp)
   4a444:	dc802e17 	ldw	r18,184(sp)
   4a448:	dc402d17 	ldw	r17,180(sp)
   4a44c:	dc002c17 	ldw	r16,176(sp)
   4a450:	dec03604 	addi	sp,sp,216
   4a454:	f800283a 	ret
   4a458:	0041de40 	call	41de4 <__sinit>
   4a45c:	003f2f06 	br	4a11c <_gp+0xfffee9f4>
   4a460:	d8c02517 	ldw	r3,148(sp)
   4a464:	d8802215 	stw	r2,136(sp)
   4a468:	00c7c83a 	sub	r3,zero,r3
   4a46c:	d8c02515 	stw	r3,148(sp)
   4a470:	8c400114 	ori	r17,r17,4
   4a474:	b0c00007 	ldb	r3,0(r22)
   4a478:	003f7306 	br	4a248 <_gp+0xfffeeb20>
   4a47c:	00800c04 	movi	r2,48
   4a480:	d9402217 	ldw	r5,136(sp)
   4a484:	d8801d05 	stb	r2,116(sp)
   4a488:	00801e04 	movi	r2,120
   4a48c:	d8801d45 	stb	r2,117(sp)
   4a490:	d8001d85 	stb	zero,118(sp)
   4a494:	b811883a 	mov	r8,r23
   4a498:	28c00104 	addi	r3,r5,4
   4a49c:	2cc00017 	ldw	r19,0(r5)
   4a4a0:	0029883a 	mov	r20,zero
   4a4a4:	88800094 	ori	r2,r17,2
   4a4a8:	80032516 	blt	r16,zero,4b140 <___vfiprintf_internal_r+0x106c>
   4a4ac:	00bfdfc4 	movi	r2,-129
   4a4b0:	88a2703a 	and	r17,r17,r2
   4a4b4:	d8c02215 	stw	r3,136(sp)
   4a4b8:	8c400094 	ori	r17,r17,2
   4a4bc:	98032a1e 	bne	r19,zero,4b168 <___vfiprintf_internal_r+0x1094>
   4a4c0:	00800174 	movhi	r2,5
   4a4c4:	10867604 	addi	r2,r2,6616
   4a4c8:	d8802615 	stw	r2,152(sp)
   4a4cc:	002b883a 	mov	r21,zero
   4a4d0:	8001741e 	bne	r16,zero,4aaa4 <___vfiprintf_internal_r+0x9d0>
   4a4d4:	0021883a 	mov	r16,zero
   4a4d8:	0029883a 	mov	r20,zero
   4a4dc:	ddc01a04 	addi	r23,sp,104
   4a4e0:	8027883a 	mov	r19,r16
   4a4e4:	8500010e 	bge	r16,r20,4a4ec <___vfiprintf_internal_r+0x418>
   4a4e8:	a027883a 	mov	r19,r20
   4a4ec:	ad403fcc 	andi	r21,r21,255
   4a4f0:	ad40201c 	xori	r21,r21,128
   4a4f4:	ad7fe004 	addi	r21,r21,-128
   4a4f8:	a8000126 	beq	r21,zero,4a500 <___vfiprintf_internal_r+0x42c>
   4a4fc:	9cc00044 	addi	r19,r19,1
   4a500:	89c0008c 	andi	r7,r17,2
   4a504:	38000126 	beq	r7,zero,4a50c <___vfiprintf_internal_r+0x438>
   4a508:	9cc00084 	addi	r19,r19,2
   4a50c:	88c0210c 	andi	r3,r17,132
   4a510:	1801dd1e 	bne	r3,zero,4ac88 <___vfiprintf_internal_r+0xbb4>
   4a514:	d9402517 	ldw	r5,148(sp)
   4a518:	2cebc83a 	sub	r21,r5,r19
   4a51c:	0541da0e 	bge	zero,r21,4ac88 <___vfiprintf_internal_r+0xbb4>
   4a520:	07000404 	movi	fp,16
   4a524:	d8801c17 	ldw	r2,112(sp)
   4a528:	e543be0e 	bge	fp,r21,4b424 <___vfiprintf_internal_r+0x1350>
   4a52c:	01400174 	movhi	r5,5
   4a530:	2946da04 	addi	r5,r5,7016
   4a534:	dc002715 	stw	r16,156(sp)
   4a538:	d9801b17 	ldw	r6,108(sp)
   4a53c:	a821883a 	mov	r16,r21
   4a540:	d9402315 	stw	r5,140(sp)
   4a544:	028001c4 	movi	r10,7
   4a548:	d9c02915 	stw	r7,164(sp)
   4a54c:	182b883a 	mov	r21,r3
   4a550:	00000506 	br	4a568 <___vfiprintf_internal_r+0x494>
   4a554:	31000084 	addi	r4,r6,2
   4a558:	42000204 	addi	r8,r8,8
   4a55c:	180d883a 	mov	r6,r3
   4a560:	843ffc04 	addi	r16,r16,-16
   4a564:	e4000f0e 	bge	fp,r16,4a5a4 <___vfiprintf_internal_r+0x4d0>
   4a568:	01000174 	movhi	r4,5
   4a56c:	10800404 	addi	r2,r2,16
   4a570:	30c00044 	addi	r3,r6,1
   4a574:	2106da04 	addi	r4,r4,7016
   4a578:	41000015 	stw	r4,0(r8)
   4a57c:	47000115 	stw	fp,4(r8)
   4a580:	d8801c15 	stw	r2,112(sp)
   4a584:	d8c01b15 	stw	r3,108(sp)
   4a588:	50fff20e 	bge	r10,r3,4a554 <_gp+0xfffeee2c>
   4a58c:	1001b21e 	bne	r2,zero,4ac58 <___vfiprintf_internal_r+0xb84>
   4a590:	843ffc04 	addi	r16,r16,-16
   4a594:	000d883a 	mov	r6,zero
   4a598:	01000044 	movi	r4,1
   4a59c:	d811883a 	mov	r8,sp
   4a5a0:	e43ff116 	blt	fp,r16,4a568 <_gp+0xfffeee40>
   4a5a4:	a807883a 	mov	r3,r21
   4a5a8:	d9c02917 	ldw	r7,164(sp)
   4a5ac:	802b883a 	mov	r21,r16
   4a5b0:	dc002717 	ldw	r16,156(sp)
   4a5b4:	d9402317 	ldw	r5,140(sp)
   4a5b8:	a885883a 	add	r2,r21,r2
   4a5bc:	45400115 	stw	r21,4(r8)
   4a5c0:	41400015 	stw	r5,0(r8)
   4a5c4:	d8801c15 	stw	r2,112(sp)
   4a5c8:	d9001b15 	stw	r4,108(sp)
   4a5cc:	014001c4 	movi	r5,7
   4a5d0:	29026216 	blt	r5,r4,4af5c <___vfiprintf_internal_r+0xe88>
   4a5d4:	d9801d87 	ldb	r6,118(sp)
   4a5d8:	42000204 	addi	r8,r8,8
   4a5dc:	21400044 	addi	r5,r4,1
   4a5e0:	3001ae1e 	bne	r6,zero,4ac9c <___vfiprintf_internal_r+0xbc8>
   4a5e4:	3801bb26 	beq	r7,zero,4acd4 <___vfiprintf_internal_r+0xc00>
   4a5e8:	d9001d04 	addi	r4,sp,116
   4a5ec:	10800084 	addi	r2,r2,2
   4a5f0:	41000015 	stw	r4,0(r8)
   4a5f4:	01000084 	movi	r4,2
   4a5f8:	41000115 	stw	r4,4(r8)
   4a5fc:	d8801c15 	stw	r2,112(sp)
   4a600:	d9401b15 	stw	r5,108(sp)
   4a604:	010001c4 	movi	r4,7
   4a608:	2142680e 	bge	r4,r5,4afac <___vfiprintf_internal_r+0xed8>
   4a60c:	1002b11e 	bne	r2,zero,4b0d4 <___vfiprintf_internal_r+0x1000>
   4a610:	01802004 	movi	r6,128
   4a614:	01400044 	movi	r5,1
   4a618:	0009883a 	mov	r4,zero
   4a61c:	d811883a 	mov	r8,sp
   4a620:	1981ae1e 	bne	r3,r6,4acdc <___vfiprintf_internal_r+0xc08>
   4a624:	d8c02517 	ldw	r3,148(sp)
   4a628:	1cf9c83a 	sub	fp,r3,r19
   4a62c:	0701ab0e 	bge	zero,fp,4acdc <___vfiprintf_internal_r+0xc08>
   4a630:	05400404 	movi	r21,16
   4a634:	af03a90e 	bge	r21,fp,4b4dc <___vfiprintf_internal_r+0x1408>
   4a638:	01400174 	movhi	r5,5
   4a63c:	2946d604 	addi	r5,r5,7000
   4a640:	d9402315 	stw	r5,140(sp)
   4a644:	01c001c4 	movi	r7,7
   4a648:	00000506 	br	4a660 <___vfiprintf_internal_r+0x58c>
   4a64c:	21800084 	addi	r6,r4,2
   4a650:	42000204 	addi	r8,r8,8
   4a654:	1809883a 	mov	r4,r3
   4a658:	e73ffc04 	addi	fp,fp,-16
   4a65c:	af000d0e 	bge	r21,fp,4a694 <___vfiprintf_internal_r+0x5c0>
   4a660:	10800404 	addi	r2,r2,16
   4a664:	20c00044 	addi	r3,r4,1
   4a668:	44800015 	stw	r18,0(r8)
   4a66c:	45400115 	stw	r21,4(r8)
   4a670:	d8801c15 	stw	r2,112(sp)
   4a674:	d8c01b15 	stw	r3,108(sp)
   4a678:	38fff40e 	bge	r7,r3,4a64c <_gp+0xfffeef24>
   4a67c:	10022b1e 	bne	r2,zero,4af2c <___vfiprintf_internal_r+0xe58>
   4a680:	e73ffc04 	addi	fp,fp,-16
   4a684:	01800044 	movi	r6,1
   4a688:	0009883a 	mov	r4,zero
   4a68c:	d811883a 	mov	r8,sp
   4a690:	af3ff316 	blt	r21,fp,4a660 <_gp+0xfffeef38>
   4a694:	d8c02317 	ldw	r3,140(sp)
   4a698:	1705883a 	add	r2,r2,fp
   4a69c:	47000115 	stw	fp,4(r8)
   4a6a0:	40c00015 	stw	r3,0(r8)
   4a6a4:	d8801c15 	stw	r2,112(sp)
   4a6a8:	d9801b15 	stw	r6,108(sp)
   4a6ac:	00c001c4 	movi	r3,7
   4a6b0:	19829416 	blt	r3,r6,4b104 <___vfiprintf_internal_r+0x1030>
   4a6b4:	8521c83a 	sub	r16,r16,r20
   4a6b8:	42000204 	addi	r8,r8,8
   4a6bc:	31400044 	addi	r5,r6,1
   4a6c0:	3009883a 	mov	r4,r6
   4a6c4:	04018716 	blt	zero,r16,4ace4 <___vfiprintf_internal_r+0xc10>
   4a6c8:	a085883a 	add	r2,r20,r2
   4a6cc:	45c00015 	stw	r23,0(r8)
   4a6d0:	45000115 	stw	r20,4(r8)
   4a6d4:	d8801c15 	stw	r2,112(sp)
   4a6d8:	d9401b15 	stw	r5,108(sp)
   4a6dc:	00c001c4 	movi	r3,7
   4a6e0:	1941c20e 	bge	r3,r5,4adec <___vfiprintf_internal_r+0xd18>
   4a6e4:	1002531e 	bne	r2,zero,4b034 <___vfiprintf_internal_r+0xf60>
   4a6e8:	d8001b15 	stw	zero,108(sp)
   4a6ec:	8c40010c 	andi	r17,r17,4
   4a6f0:	88023226 	beq	r17,zero,4afbc <___vfiprintf_internal_r+0xee8>
   4a6f4:	d9002517 	ldw	r4,148(sp)
   4a6f8:	24e3c83a 	sub	r17,r4,r19
   4a6fc:	04432916 	blt	zero,r17,4b3a4 <___vfiprintf_internal_r+0x12d0>
   4a700:	d8802517 	ldw	r2,148(sp)
   4a704:	14c0010e 	bge	r2,r19,4a70c <___vfiprintf_internal_r+0x638>
   4a708:	9805883a 	mov	r2,r19
   4a70c:	d8c02417 	ldw	r3,144(sp)
   4a710:	1887883a 	add	r3,r3,r2
   4a714:	d8c02415 	stw	r3,144(sp)
   4a718:	d8001b15 	stw	zero,108(sp)
   4a71c:	d811883a 	mov	r8,sp
   4a720:	003ea006 	br	4a1a4 <_gp+0xfffeea7c>
   4a724:	8c400814 	ori	r17,r17,32
   4a728:	b0c00007 	ldb	r3,0(r22)
   4a72c:	003ec606 	br	4a248 <_gp+0xfffeeb20>
   4a730:	b0c00007 	ldb	r3,0(r22)
   4a734:	00801b04 	movi	r2,108
   4a738:	18832026 	beq	r3,r2,4b3bc <___vfiprintf_internal_r+0x12e8>
   4a73c:	8c400414 	ori	r17,r17,16
   4a740:	003ec106 	br	4a248 <_gp+0xfffeeb20>
   4a744:	9cc03fcc 	andi	r19,r19,255
   4a748:	b811883a 	mov	r8,r23
   4a74c:	9803981e 	bne	r19,zero,4b5b0 <___vfiprintf_internal_r+0x14dc>
   4a750:	8880080c 	andi	r2,r17,32
   4a754:	1002be26 	beq	r2,zero,4b250 <___vfiprintf_internal_r+0x117c>
   4a758:	d9002217 	ldw	r4,136(sp)
   4a75c:	d9402417 	ldw	r5,144(sp)
   4a760:	20800017 	ldw	r2,0(r4)
   4a764:	2807d7fa 	srai	r3,r5,31
   4a768:	21000104 	addi	r4,r4,4
   4a76c:	d9002215 	stw	r4,136(sp)
   4a770:	11400015 	stw	r5,0(r2)
   4a774:	10c00115 	stw	r3,4(r2)
   4a778:	003e8a06 	br	4a1a4 <_gp+0xfffeea7c>
   4a77c:	9cc03fcc 	andi	r19,r19,255
   4a780:	b811883a 	mov	r8,r23
   4a784:	9803871e 	bne	r19,zero,4b5a4 <___vfiprintf_internal_r+0x14d0>
   4a788:	8880080c 	andi	r2,r17,32
   4a78c:	10009a26 	beq	r2,zero,4a9f8 <___vfiprintf_internal_r+0x924>
   4a790:	d9002217 	ldw	r4,136(sp)
   4a794:	d8001d85 	stb	zero,118(sp)
   4a798:	20800204 	addi	r2,r4,8
   4a79c:	24c00017 	ldw	r19,0(r4)
   4a7a0:	25000117 	ldw	r20,4(r4)
   4a7a4:	8002a416 	blt	r16,zero,4b238 <___vfiprintf_internal_r+0x1164>
   4a7a8:	013fdfc4 	movi	r4,-129
   4a7ac:	9d06b03a 	or	r3,r19,r20
   4a7b0:	d8802215 	stw	r2,136(sp)
   4a7b4:	8922703a 	and	r17,r17,r4
   4a7b8:	18009b26 	beq	r3,zero,4aa28 <___vfiprintf_internal_r+0x954>
   4a7bc:	002b883a 	mov	r21,zero
   4a7c0:	ddc01a04 	addi	r23,sp,104
   4a7c4:	9806d0fa 	srli	r3,r19,3
   4a7c8:	a008977a 	slli	r4,r20,29
   4a7cc:	a028d0fa 	srli	r20,r20,3
   4a7d0:	9cc001cc 	andi	r19,r19,7
   4a7d4:	98800c04 	addi	r2,r19,48
   4a7d8:	bdffffc4 	addi	r23,r23,-1
   4a7dc:	20e6b03a 	or	r19,r4,r3
   4a7e0:	b8800005 	stb	r2,0(r23)
   4a7e4:	9d06b03a 	or	r3,r19,r20
   4a7e8:	183ff61e 	bne	r3,zero,4a7c4 <_gp+0xfffef09c>
   4a7ec:	88c0004c 	andi	r3,r17,1
   4a7f0:	18021f1e 	bne	r3,zero,4b070 <___vfiprintf_internal_r+0xf9c>
   4a7f4:	d9401e17 	ldw	r5,120(sp)
   4a7f8:	2de9c83a 	sub	r20,r5,r23
   4a7fc:	003f3806 	br	4a4e0 <_gp+0xfffeedb8>
   4a800:	9cc03fcc 	andi	r19,r19,255
   4a804:	b811883a 	mov	r8,r23
   4a808:	98034f1e 	bne	r19,zero,4b548 <___vfiprintf_internal_r+0x1474>
   4a80c:	00800174 	movhi	r2,5
   4a810:	10867604 	addi	r2,r2,6616
   4a814:	d8802615 	stw	r2,152(sp)
   4a818:	8880080c 	andi	r2,r17,32
   4a81c:	1000ac26 	beq	r2,zero,4aad0 <___vfiprintf_internal_r+0x9fc>
   4a820:	d9002217 	ldw	r4,136(sp)
   4a824:	24c00017 	ldw	r19,0(r4)
   4a828:	25000117 	ldw	r20,4(r4)
   4a82c:	21000204 	addi	r4,r4,8
   4a830:	d9002215 	stw	r4,136(sp)
   4a834:	8880004c 	andi	r2,r17,1
   4a838:	1001e726 	beq	r2,zero,4afd8 <___vfiprintf_internal_r+0xf04>
   4a83c:	9d04b03a 	or	r2,r19,r20
   4a840:	10025c1e 	bne	r2,zero,4b1b4 <___vfiprintf_internal_r+0x10e0>
   4a844:	d8001d85 	stb	zero,118(sp)
   4a848:	80024416 	blt	r16,zero,4b15c <___vfiprintf_internal_r+0x1088>
   4a84c:	00bfdfc4 	movi	r2,-129
   4a850:	88a2703a 	and	r17,r17,r2
   4a854:	003f1d06 	br	4a4cc <_gp+0xfffeeda4>
   4a858:	d8c02217 	ldw	r3,136(sp)
   4a85c:	04c00044 	movi	r19,1
   4a860:	b811883a 	mov	r8,r23
   4a864:	18800017 	ldw	r2,0(r3)
   4a868:	18c00104 	addi	r3,r3,4
   4a86c:	d8001d85 	stb	zero,118(sp)
   4a870:	d8801005 	stb	r2,64(sp)
   4a874:	d8c02215 	stw	r3,136(sp)
   4a878:	9829883a 	mov	r20,r19
   4a87c:	ddc01004 	addi	r23,sp,64
   4a880:	0021883a 	mov	r16,zero
   4a884:	003f1e06 	br	4a500 <_gp+0xfffeedd8>
   4a888:	9cc03fcc 	andi	r19,r19,255
   4a88c:	b811883a 	mov	r8,r23
   4a890:	9803331e 	bne	r19,zero,4b560 <___vfiprintf_internal_r+0x148c>
   4a894:	8880080c 	andi	r2,r17,32
   4a898:	10004826 	beq	r2,zero,4a9bc <___vfiprintf_internal_r+0x8e8>
   4a89c:	d9002217 	ldw	r4,136(sp)
   4a8a0:	20800117 	ldw	r2,4(r4)
   4a8a4:	24c00017 	ldw	r19,0(r4)
   4a8a8:	21000204 	addi	r4,r4,8
   4a8ac:	d9002215 	stw	r4,136(sp)
   4a8b0:	1029883a 	mov	r20,r2
   4a8b4:	10024c16 	blt	r2,zero,4b1e8 <___vfiprintf_internal_r+0x1114>
   4a8b8:	dd401d83 	ldbu	r21,118(sp)
   4a8bc:	80007116 	blt	r16,zero,4aa84 <___vfiprintf_internal_r+0x9b0>
   4a8c0:	00ffdfc4 	movi	r3,-129
   4a8c4:	9d04b03a 	or	r2,r19,r20
   4a8c8:	88e2703a 	and	r17,r17,r3
   4a8cc:	1000d126 	beq	r2,zero,4ac14 <___vfiprintf_internal_r+0xb40>
   4a8d0:	a0023526 	beq	r20,zero,4b1a8 <___vfiprintf_internal_r+0x10d4>
   4a8d4:	ddc01a04 	addi	r23,sp,104
   4a8d8:	4039883a 	mov	fp,r8
   4a8dc:	9809883a 	mov	r4,r19
   4a8e0:	a00b883a 	mov	r5,r20
   4a8e4:	01800284 	movi	r6,10
   4a8e8:	000f883a 	mov	r7,zero
   4a8ec:	004c1800 	call	4c180 <__umoddi3>
   4a8f0:	10800c04 	addi	r2,r2,48
   4a8f4:	bdffffc4 	addi	r23,r23,-1
   4a8f8:	9809883a 	mov	r4,r19
   4a8fc:	a00b883a 	mov	r5,r20
   4a900:	b8800005 	stb	r2,0(r23)
   4a904:	01800284 	movi	r6,10
   4a908:	000f883a 	mov	r7,zero
   4a90c:	004bb840 	call	4bb84 <__udivdi3>
   4a910:	1027883a 	mov	r19,r2
   4a914:	10c4b03a 	or	r2,r2,r3
   4a918:	1829883a 	mov	r20,r3
   4a91c:	103fef1e 	bne	r2,zero,4a8dc <_gp+0xfffef1b4>
   4a920:	d9001e17 	ldw	r4,120(sp)
   4a924:	e011883a 	mov	r8,fp
   4a928:	25e9c83a 	sub	r20,r4,r23
   4a92c:	003eec06 	br	4a4e0 <_gp+0xfffeedb8>
   4a930:	d8802307 	ldb	r2,140(sp)
   4a934:	1002361e 	bne	r2,zero,4b210 <___vfiprintf_internal_r+0x113c>
   4a938:	00c00804 	movi	r3,32
   4a93c:	d8c02305 	stb	r3,140(sp)
   4a940:	04c00044 	movi	r19,1
   4a944:	b0c00007 	ldb	r3,0(r22)
   4a948:	003e3f06 	br	4a248 <_gp+0xfffeeb20>
   4a94c:	8c400054 	ori	r17,r17,1
   4a950:	b0c00007 	ldb	r3,0(r22)
   4a954:	003e3c06 	br	4a248 <_gp+0xfffeeb20>
   4a958:	8c402014 	ori	r17,r17,128
   4a95c:	b0c00007 	ldb	r3,0(r22)
   4a960:	003e3906 	br	4a248 <_gp+0xfffeeb20>
   4a964:	dc002715 	stw	r16,156(sp)
   4a968:	d8002515 	stw	zero,148(sp)
   4a96c:	1f3ff404 	addi	fp,r3,-48
   4a970:	0009883a 	mov	r4,zero
   4a974:	b021883a 	mov	r16,r22
   4a978:	01400284 	movi	r5,10
   4a97c:	00416640 	call	41664 <__mulsi3>
   4a980:	80c00007 	ldb	r3,0(r16)
   4a984:	e089883a 	add	r4,fp,r2
   4a988:	b5800044 	addi	r22,r22,1
   4a98c:	1f3ff404 	addi	fp,r3,-48
   4a990:	b021883a 	mov	r16,r22
   4a994:	af3ff82e 	bgeu	r21,fp,4a978 <_gp+0xfffef250>
   4a998:	d9002515 	stw	r4,148(sp)
   4a99c:	dc002717 	ldw	r16,156(sp)
   4a9a0:	003e2a06 	br	4a24c <_gp+0xfffeeb24>
   4a9a4:	9cc03fcc 	andi	r19,r19,255
   4a9a8:	b811883a 	mov	r8,r23
   4a9ac:	9802e91e 	bne	r19,zero,4b554 <___vfiprintf_internal_r+0x1480>
   4a9b0:	8c400414 	ori	r17,r17,16
   4a9b4:	8880080c 	andi	r2,r17,32
   4a9b8:	103fb81e 	bne	r2,zero,4a89c <_gp+0xfffef174>
   4a9bc:	8880040c 	andi	r2,r17,16
   4a9c0:	10022e26 	beq	r2,zero,4b27c <___vfiprintf_internal_r+0x11a8>
   4a9c4:	d9402217 	ldw	r5,136(sp)
   4a9c8:	2cc00017 	ldw	r19,0(r5)
   4a9cc:	29400104 	addi	r5,r5,4
   4a9d0:	d9402215 	stw	r5,136(sp)
   4a9d4:	9829d7fa 	srai	r20,r19,31
   4a9d8:	a005883a 	mov	r2,r20
   4a9dc:	003fb506 	br	4a8b4 <_gp+0xfffef18c>
   4a9e0:	9cc03fcc 	andi	r19,r19,255
   4a9e4:	b811883a 	mov	r8,r23
   4a9e8:	9802fa1e 	bne	r19,zero,4b5d4 <___vfiprintf_internal_r+0x1500>
   4a9ec:	8c400414 	ori	r17,r17,16
   4a9f0:	8880080c 	andi	r2,r17,32
   4a9f4:	103f661e 	bne	r2,zero,4a790 <_gp+0xfffef068>
   4a9f8:	8880040c 	andi	r2,r17,16
   4a9fc:	10020626 	beq	r2,zero,4b218 <___vfiprintf_internal_r+0x1144>
   4aa00:	d9402217 	ldw	r5,136(sp)
   4aa04:	d8001d85 	stb	zero,118(sp)
   4aa08:	0029883a 	mov	r20,zero
   4aa0c:	28800104 	addi	r2,r5,4
   4aa10:	2cc00017 	ldw	r19,0(r5)
   4aa14:	80020816 	blt	r16,zero,4b238 <___vfiprintf_internal_r+0x1164>
   4aa18:	00ffdfc4 	movi	r3,-129
   4aa1c:	d8802215 	stw	r2,136(sp)
   4aa20:	88e2703a 	and	r17,r17,r3
   4aa24:	983f651e 	bne	r19,zero,4a7bc <_gp+0xfffef094>
   4aa28:	002b883a 	mov	r21,zero
   4aa2c:	8002cf26 	beq	r16,zero,4b56c <___vfiprintf_internal_r+0x1498>
   4aa30:	0027883a 	mov	r19,zero
   4aa34:	0029883a 	mov	r20,zero
   4aa38:	003f6106 	br	4a7c0 <_gp+0xfffef098>
   4aa3c:	9cc03fcc 	andi	r19,r19,255
   4aa40:	b811883a 	mov	r8,r23
   4aa44:	9802e01e 	bne	r19,zero,4b5c8 <___vfiprintf_internal_r+0x14f4>
   4aa48:	8c400414 	ori	r17,r17,16
   4aa4c:	8880080c 	andi	r2,r17,32
   4aa50:	1000641e 	bne	r2,zero,4abe4 <___vfiprintf_internal_r+0xb10>
   4aa54:	8880040c 	andi	r2,r17,16
   4aa58:	1001c81e 	bne	r2,zero,4b17c <___vfiprintf_internal_r+0x10a8>
   4aa5c:	8880100c 	andi	r2,r17,64
   4aa60:	d8001d85 	stb	zero,118(sp)
   4aa64:	1002281e 	bne	r2,zero,4b308 <___vfiprintf_internal_r+0x1234>
   4aa68:	d9002217 	ldw	r4,136(sp)
   4aa6c:	0029883a 	mov	r20,zero
   4aa70:	20800104 	addi	r2,r4,4
   4aa74:	24c00017 	ldw	r19,0(r4)
   4aa78:	8001c60e 	bge	r16,zero,4b194 <___vfiprintf_internal_r+0x10c0>
   4aa7c:	d8802215 	stw	r2,136(sp)
   4aa80:	002b883a 	mov	r21,zero
   4aa84:	9d04b03a 	or	r2,r19,r20
   4aa88:	103f911e 	bne	r2,zero,4a8d0 <_gp+0xfffef1a8>
   4aa8c:	00800044 	movi	r2,1
   4aa90:	10803fcc 	andi	r2,r2,255
   4aa94:	00c00044 	movi	r3,1
   4aa98:	10c05f26 	beq	r2,r3,4ac18 <___vfiprintf_internal_r+0xb44>
   4aa9c:	00c00084 	movi	r3,2
   4aaa0:	10ffe31e 	bne	r2,r3,4aa30 <_gp+0xfffef308>
   4aaa4:	0027883a 	mov	r19,zero
   4aaa8:	0029883a 	mov	r20,zero
   4aaac:	00015106 	br	4aff4 <___vfiprintf_internal_r+0xf20>
   4aab0:	9cc03fcc 	andi	r19,r19,255
   4aab4:	b811883a 	mov	r8,r23
   4aab8:	9802c01e 	bne	r19,zero,4b5bc <___vfiprintf_internal_r+0x14e8>
   4aabc:	01400174 	movhi	r5,5
   4aac0:	29467104 	addi	r5,r5,6596
   4aac4:	d9402615 	stw	r5,152(sp)
   4aac8:	8880080c 	andi	r2,r17,32
   4aacc:	103f541e 	bne	r2,zero,4a820 <_gp+0xfffef0f8>
   4aad0:	8880040c 	andi	r2,r17,16
   4aad4:	1001f226 	beq	r2,zero,4b2a0 <___vfiprintf_internal_r+0x11cc>
   4aad8:	d9402217 	ldw	r5,136(sp)
   4aadc:	0029883a 	mov	r20,zero
   4aae0:	2cc00017 	ldw	r19,0(r5)
   4aae4:	29400104 	addi	r5,r5,4
   4aae8:	d9402215 	stw	r5,136(sp)
   4aaec:	003f5106 	br	4a834 <_gp+0xfffef10c>
   4aaf0:	d8c02217 	ldw	r3,136(sp)
   4aaf4:	b811883a 	mov	r8,r23
   4aaf8:	d8001d85 	stb	zero,118(sp)
   4aafc:	1dc00017 	ldw	r23,0(r3)
   4ab00:	1f000104 	addi	fp,r3,4
   4ab04:	b8025926 	beq	r23,zero,4b46c <___vfiprintf_internal_r+0x1398>
   4ab08:	80023316 	blt	r16,zero,4b3d8 <___vfiprintf_internal_r+0x1304>
   4ab0c:	800d883a 	mov	r6,r16
   4ab10:	000b883a 	mov	r5,zero
   4ab14:	b809883a 	mov	r4,r23
   4ab18:	da002a15 	stw	r8,168(sp)
   4ab1c:	004846c0 	call	4846c <memchr>
   4ab20:	da002a17 	ldw	r8,168(sp)
   4ab24:	10026826 	beq	r2,zero,4b4c8 <___vfiprintf_internal_r+0x13f4>
   4ab28:	15e9c83a 	sub	r20,r2,r23
   4ab2c:	dd401d83 	ldbu	r21,118(sp)
   4ab30:	df002215 	stw	fp,136(sp)
   4ab34:	0021883a 	mov	r16,zero
   4ab38:	003e6906 	br	4a4e0 <_gp+0xfffeedb8>
   4ab3c:	9cc03fcc 	andi	r19,r19,255
   4ab40:	b811883a 	mov	r8,r23
   4ab44:	983fc126 	beq	r19,zero,4aa4c <_gp+0xfffef324>
   4ab48:	d8c02303 	ldbu	r3,140(sp)
   4ab4c:	d8c01d85 	stb	r3,118(sp)
   4ab50:	003fbe06 	br	4aa4c <_gp+0xfffef324>
   4ab54:	d9002217 	ldw	r4,136(sp)
   4ab58:	d9402217 	ldw	r5,136(sp)
   4ab5c:	21000017 	ldw	r4,0(r4)
   4ab60:	28800104 	addi	r2,r5,4
   4ab64:	d9002515 	stw	r4,148(sp)
   4ab68:	203e3d16 	blt	r4,zero,4a460 <_gp+0xfffeed38>
   4ab6c:	d8802215 	stw	r2,136(sp)
   4ab70:	b0c00007 	ldb	r3,0(r22)
   4ab74:	003db406 	br	4a248 <_gp+0xfffeeb20>
   4ab78:	00c00ac4 	movi	r3,43
   4ab7c:	d8c02305 	stb	r3,140(sp)
   4ab80:	04c00044 	movi	r19,1
   4ab84:	b0c00007 	ldb	r3,0(r22)
   4ab88:	003daf06 	br	4a248 <_gp+0xfffeeb20>
   4ab8c:	b0c00007 	ldb	r3,0(r22)
   4ab90:	01000a84 	movi	r4,42
   4ab94:	b4000044 	addi	r16,r22,1
   4ab98:	19025e26 	beq	r3,r4,4b514 <___vfiprintf_internal_r+0x1440>
   4ab9c:	1f3ff404 	addi	fp,r3,-48
   4aba0:	0009883a 	mov	r4,zero
   4aba4:	af025236 	bltu	r21,fp,4b4f0 <___vfiprintf_internal_r+0x141c>
   4aba8:	01400284 	movi	r5,10
   4abac:	00416640 	call	41664 <__mulsi3>
   4abb0:	80c00007 	ldb	r3,0(r16)
   4abb4:	1709883a 	add	r4,r2,fp
   4abb8:	85800044 	addi	r22,r16,1
   4abbc:	1f3ff404 	addi	fp,r3,-48
   4abc0:	b021883a 	mov	r16,r22
   4abc4:	af3ff82e 	bgeu	r21,fp,4aba8 <_gp+0xfffef480>
   4abc8:	2021883a 	mov	r16,r4
   4abcc:	203d9f0e 	bge	r4,zero,4a24c <_gp+0xfffeeb24>
   4abd0:	043fffc4 	movi	r16,-1
   4abd4:	003d9d06 	br	4a24c <_gp+0xfffeeb24>
   4abd8:	8c401014 	ori	r17,r17,64
   4abdc:	b0c00007 	ldb	r3,0(r22)
   4abe0:	003d9906 	br	4a248 <_gp+0xfffeeb20>
   4abe4:	d9002217 	ldw	r4,136(sp)
   4abe8:	d8001d85 	stb	zero,118(sp)
   4abec:	20c00204 	addi	r3,r4,8
   4abf0:	24c00017 	ldw	r19,0(r4)
   4abf4:	25000117 	ldw	r20,4(r4)
   4abf8:	8001e716 	blt	r16,zero,4b398 <___vfiprintf_internal_r+0x12c4>
   4abfc:	013fdfc4 	movi	r4,-129
   4ac00:	9d04b03a 	or	r2,r19,r20
   4ac04:	d8c02215 	stw	r3,136(sp)
   4ac08:	8922703a 	and	r17,r17,r4
   4ac0c:	002b883a 	mov	r21,zero
   4ac10:	103f2f1e 	bne	r2,zero,4a8d0 <_gp+0xfffef1a8>
   4ac14:	803e2f26 	beq	r16,zero,4a4d4 <_gp+0xfffeedac>
   4ac18:	0027883a 	mov	r19,zero
   4ac1c:	9cc00c04 	addi	r19,r19,48
   4ac20:	dcc019c5 	stb	r19,103(sp)
   4ac24:	dd002817 	ldw	r20,160(sp)
   4ac28:	ddc019c4 	addi	r23,sp,103
   4ac2c:	003e2c06 	br	4a4e0 <_gp+0xfffeedb8>
   4ac30:	9cc03fcc 	andi	r19,r19,255
   4ac34:	b811883a 	mov	r8,r23
   4ac38:	9802571e 	bne	r19,zero,4b598 <___vfiprintf_internal_r+0x14c4>
   4ac3c:	18005726 	beq	r3,zero,4ad9c <___vfiprintf_internal_r+0xcc8>
   4ac40:	04c00044 	movi	r19,1
   4ac44:	d8c01005 	stb	r3,64(sp)
   4ac48:	d8001d85 	stb	zero,118(sp)
   4ac4c:	9829883a 	mov	r20,r19
   4ac50:	ddc01004 	addi	r23,sp,64
   4ac54:	003f0a06 	br	4a880 <_gp+0xfffef158>
   4ac58:	d9402017 	ldw	r5,128(sp)
   4ac5c:	d9002117 	ldw	r4,132(sp)
   4ac60:	d9801a04 	addi	r6,sp,104
   4ac64:	da802a15 	stw	r10,168(sp)
   4ac68:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4ac6c:	da802a17 	ldw	r10,168(sp)
   4ac70:	1000501e 	bne	r2,zero,4adb4 <___vfiprintf_internal_r+0xce0>
   4ac74:	d9801b17 	ldw	r6,108(sp)
   4ac78:	d8801c17 	ldw	r2,112(sp)
   4ac7c:	d811883a 	mov	r8,sp
   4ac80:	31000044 	addi	r4,r6,1
   4ac84:	003e3606 	br	4a560 <_gp+0xfffeee38>
   4ac88:	d9001b17 	ldw	r4,108(sp)
   4ac8c:	d8801c17 	ldw	r2,112(sp)
   4ac90:	21400044 	addi	r5,r4,1
   4ac94:	d9801d87 	ldb	r6,118(sp)
   4ac98:	303e5226 	beq	r6,zero,4a5e4 <_gp+0xfffeeebc>
   4ac9c:	01800044 	movi	r6,1
   4aca0:	d9001d84 	addi	r4,sp,118
   4aca4:	1185883a 	add	r2,r2,r6
   4aca8:	41000015 	stw	r4,0(r8)
   4acac:	41800115 	stw	r6,4(r8)
   4acb0:	d8801c15 	stw	r2,112(sp)
   4acb4:	d9401b15 	stw	r5,108(sp)
   4acb8:	010001c4 	movi	r4,7
   4acbc:	2140b00e 	bge	r4,r5,4af80 <___vfiprintf_internal_r+0xeac>
   4acc0:	1000f61e 	bne	r2,zero,4b09c <___vfiprintf_internal_r+0xfc8>
   4acc4:	3800b31e 	bne	r7,zero,4af94 <___vfiprintf_internal_r+0xec0>
   4acc8:	0009883a 	mov	r4,zero
   4accc:	300b883a 	mov	r5,r6
   4acd0:	d811883a 	mov	r8,sp
   4acd4:	01802004 	movi	r6,128
   4acd8:	19be5226 	beq	r3,r6,4a624 <_gp+0xfffeeefc>
   4acdc:	8521c83a 	sub	r16,r16,r20
   4ace0:	043e790e 	bge	zero,r16,4a6c8 <_gp+0xfffeefa0>
   4ace4:	05400404 	movi	r21,16
   4ace8:	ac01b00e 	bge	r21,r16,4b3ac <___vfiprintf_internal_r+0x12d8>
   4acec:	01400174 	movhi	r5,5
   4acf0:	2946d604 	addi	r5,r5,7000
   4acf4:	d9402315 	stw	r5,140(sp)
   4acf8:	070001c4 	movi	fp,7
   4acfc:	00000506 	br	4ad14 <___vfiprintf_internal_r+0xc40>
   4ad00:	21400084 	addi	r5,r4,2
   4ad04:	42000204 	addi	r8,r8,8
   4ad08:	1809883a 	mov	r4,r3
   4ad0c:	843ffc04 	addi	r16,r16,-16
   4ad10:	ac000d0e 	bge	r21,r16,4ad48 <___vfiprintf_internal_r+0xc74>
   4ad14:	10800404 	addi	r2,r2,16
   4ad18:	20c00044 	addi	r3,r4,1
   4ad1c:	44800015 	stw	r18,0(r8)
   4ad20:	45400115 	stw	r21,4(r8)
   4ad24:	d8801c15 	stw	r2,112(sp)
   4ad28:	d8c01b15 	stw	r3,108(sp)
   4ad2c:	e0fff40e 	bge	fp,r3,4ad00 <_gp+0xfffef5d8>
   4ad30:	1000101e 	bne	r2,zero,4ad74 <___vfiprintf_internal_r+0xca0>
   4ad34:	843ffc04 	addi	r16,r16,-16
   4ad38:	01400044 	movi	r5,1
   4ad3c:	0009883a 	mov	r4,zero
   4ad40:	d811883a 	mov	r8,sp
   4ad44:	ac3ff316 	blt	r21,r16,4ad14 <_gp+0xfffef5ec>
   4ad48:	d8c02317 	ldw	r3,140(sp)
   4ad4c:	1405883a 	add	r2,r2,r16
   4ad50:	44000115 	stw	r16,4(r8)
   4ad54:	40c00015 	stw	r3,0(r8)
   4ad58:	d8801c15 	stw	r2,112(sp)
   4ad5c:	d9401b15 	stw	r5,108(sp)
   4ad60:	00c001c4 	movi	r3,7
   4ad64:	19401916 	blt	r3,r5,4adcc <___vfiprintf_internal_r+0xcf8>
   4ad68:	42000204 	addi	r8,r8,8
   4ad6c:	29400044 	addi	r5,r5,1
   4ad70:	003e5506 	br	4a6c8 <_gp+0xfffeefa0>
   4ad74:	d9402017 	ldw	r5,128(sp)
   4ad78:	d9002117 	ldw	r4,132(sp)
   4ad7c:	d9801a04 	addi	r6,sp,104
   4ad80:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4ad84:	10000b1e 	bne	r2,zero,4adb4 <___vfiprintf_internal_r+0xce0>
   4ad88:	d9001b17 	ldw	r4,108(sp)
   4ad8c:	d8801c17 	ldw	r2,112(sp)
   4ad90:	d811883a 	mov	r8,sp
   4ad94:	21400044 	addi	r5,r4,1
   4ad98:	003fdc06 	br	4ad0c <_gp+0xfffef5e4>
   4ad9c:	d8801c17 	ldw	r2,112(sp)
   4ada0:	10000426 	beq	r2,zero,4adb4 <___vfiprintf_internal_r+0xce0>
   4ada4:	d9402017 	ldw	r5,128(sp)
   4ada8:	d9002117 	ldw	r4,132(sp)
   4adac:	d9801a04 	addi	r6,sp,104
   4adb0:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4adb4:	d9402017 	ldw	r5,128(sp)
   4adb8:	2880030b 	ldhu	r2,12(r5)
   4adbc:	1080100c 	andi	r2,r2,64
   4adc0:	10014d1e 	bne	r2,zero,4b2f8 <___vfiprintf_internal_r+0x1224>
   4adc4:	d8802417 	ldw	r2,144(sp)
   4adc8:	003d9706 	br	4a428 <_gp+0xfffeed00>
   4adcc:	1000d21e 	bne	r2,zero,4b118 <___vfiprintf_internal_r+0x1044>
   4add0:	00c00044 	movi	r3,1
   4add4:	a005883a 	mov	r2,r20
   4add8:	ddc00015 	stw	r23,0(sp)
   4addc:	dd000115 	stw	r20,4(sp)
   4ade0:	dd001c15 	stw	r20,112(sp)
   4ade4:	d8c01b15 	stw	r3,108(sp)
   4ade8:	d811883a 	mov	r8,sp
   4adec:	42000204 	addi	r8,r8,8
   4adf0:	8c40010c 	andi	r17,r17,4
   4adf4:	88004026 	beq	r17,zero,4aef8 <___vfiprintf_internal_r+0xe24>
   4adf8:	d9002517 	ldw	r4,148(sp)
   4adfc:	24e3c83a 	sub	r17,r4,r19
   4ae00:	04403d0e 	bge	zero,r17,4aef8 <___vfiprintf_internal_r+0xe24>
   4ae04:	04000404 	movi	r16,16
   4ae08:	8441a90e 	bge	r16,r17,4b4b0 <___vfiprintf_internal_r+0x13dc>
   4ae0c:	00c00174 	movhi	r3,5
   4ae10:	18c6da04 	addi	r3,r3,7016
   4ae14:	d9001b17 	ldw	r4,108(sp)
   4ae18:	d8c02315 	stw	r3,140(sp)
   4ae1c:	050001c4 	movi	r20,7
   4ae20:	dd402117 	ldw	r21,132(sp)
   4ae24:	ddc02017 	ldw	r23,128(sp)
   4ae28:	00000506 	br	4ae40 <___vfiprintf_internal_r+0xd6c>
   4ae2c:	21400084 	addi	r5,r4,2
   4ae30:	42000204 	addi	r8,r8,8
   4ae34:	1809883a 	mov	r4,r3
   4ae38:	8c7ffc04 	addi	r17,r17,-16
   4ae3c:	84400f0e 	bge	r16,r17,4ae7c <___vfiprintf_internal_r+0xda8>
   4ae40:	01400174 	movhi	r5,5
   4ae44:	10800404 	addi	r2,r2,16
   4ae48:	20c00044 	addi	r3,r4,1
   4ae4c:	2946da04 	addi	r5,r5,7016
   4ae50:	41400015 	stw	r5,0(r8)
   4ae54:	44000115 	stw	r16,4(r8)
   4ae58:	d8801c15 	stw	r2,112(sp)
   4ae5c:	d8c01b15 	stw	r3,108(sp)
   4ae60:	a0fff20e 	bge	r20,r3,4ae2c <_gp+0xfffef704>
   4ae64:	1000141e 	bne	r2,zero,4aeb8 <___vfiprintf_internal_r+0xde4>
   4ae68:	8c7ffc04 	addi	r17,r17,-16
   4ae6c:	01400044 	movi	r5,1
   4ae70:	0009883a 	mov	r4,zero
   4ae74:	d811883a 	mov	r8,sp
   4ae78:	847ff116 	blt	r16,r17,4ae40 <_gp+0xfffef718>
   4ae7c:	d8c02317 	ldw	r3,140(sp)
   4ae80:	1445883a 	add	r2,r2,r17
   4ae84:	44400115 	stw	r17,4(r8)
   4ae88:	40c00015 	stw	r3,0(r8)
   4ae8c:	d8801c15 	stw	r2,112(sp)
   4ae90:	d9401b15 	stw	r5,108(sp)
   4ae94:	00c001c4 	movi	r3,7
   4ae98:	1940170e 	bge	r3,r5,4aef8 <___vfiprintf_internal_r+0xe24>
   4ae9c:	1000101e 	bne	r2,zero,4aee0 <___vfiprintf_internal_r+0xe0c>
   4aea0:	d8802517 	ldw	r2,148(sp)
   4aea4:	14c11616 	blt	r2,r19,4b300 <___vfiprintf_internal_r+0x122c>
   4aea8:	d9002417 	ldw	r4,144(sp)
   4aeac:	2089883a 	add	r4,r4,r2
   4aeb0:	d9002415 	stw	r4,144(sp)
   4aeb4:	003e1806 	br	4a718 <_gp+0xfffeeff0>
   4aeb8:	d9801a04 	addi	r6,sp,104
   4aebc:	b80b883a 	mov	r5,r23
   4aec0:	a809883a 	mov	r4,r21
   4aec4:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4aec8:	103fba1e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4aecc:	d9001b17 	ldw	r4,108(sp)
   4aed0:	d8801c17 	ldw	r2,112(sp)
   4aed4:	d811883a 	mov	r8,sp
   4aed8:	21400044 	addi	r5,r4,1
   4aedc:	003fd606 	br	4ae38 <_gp+0xfffef710>
   4aee0:	d9402017 	ldw	r5,128(sp)
   4aee4:	d9002117 	ldw	r4,132(sp)
   4aee8:	d9801a04 	addi	r6,sp,104
   4aeec:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4aef0:	103fb01e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4aef4:	d8801c17 	ldw	r2,112(sp)
   4aef8:	d8c02517 	ldw	r3,148(sp)
   4aefc:	1cc0010e 	bge	r3,r19,4af04 <___vfiprintf_internal_r+0xe30>
   4af00:	9807883a 	mov	r3,r19
   4af04:	d9002417 	ldw	r4,144(sp)
   4af08:	20c9883a 	add	r4,r4,r3
   4af0c:	d9002415 	stw	r4,144(sp)
   4af10:	103e0126 	beq	r2,zero,4a718 <_gp+0xfffeeff0>
   4af14:	d9402017 	ldw	r5,128(sp)
   4af18:	d9002117 	ldw	r4,132(sp)
   4af1c:	d9801a04 	addi	r6,sp,104
   4af20:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4af24:	103dfc26 	beq	r2,zero,4a718 <_gp+0xfffeeff0>
   4af28:	003fa206 	br	4adb4 <_gp+0xfffef68c>
   4af2c:	d9402017 	ldw	r5,128(sp)
   4af30:	d9002117 	ldw	r4,132(sp)
   4af34:	d9801a04 	addi	r6,sp,104
   4af38:	d9c02b15 	stw	r7,172(sp)
   4af3c:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4af40:	d9c02b17 	ldw	r7,172(sp)
   4af44:	103f9b1e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4af48:	d9001b17 	ldw	r4,108(sp)
   4af4c:	d8801c17 	ldw	r2,112(sp)
   4af50:	d811883a 	mov	r8,sp
   4af54:	21800044 	addi	r6,r4,1
   4af58:	003dbf06 	br	4a658 <_gp+0xfffeef30>
   4af5c:	1000d81e 	bne	r2,zero,4b2c0 <___vfiprintf_internal_r+0x11ec>
   4af60:	d9001d87 	ldb	r4,118(sp)
   4af64:	20000a26 	beq	r4,zero,4af90 <___vfiprintf_internal_r+0xebc>
   4af68:	00800044 	movi	r2,1
   4af6c:	d9001d84 	addi	r4,sp,118
   4af70:	100b883a 	mov	r5,r2
   4af74:	d9000015 	stw	r4,0(sp)
   4af78:	d8800115 	stw	r2,4(sp)
   4af7c:	d811883a 	mov	r8,sp
   4af80:	2809883a 	mov	r4,r5
   4af84:	42000204 	addi	r8,r8,8
   4af88:	29400044 	addi	r5,r5,1
   4af8c:	003d9506 	br	4a5e4 <_gp+0xfffeeebc>
   4af90:	3800fd26 	beq	r7,zero,4b388 <___vfiprintf_internal_r+0x12b4>
   4af94:	00800084 	movi	r2,2
   4af98:	d9001d04 	addi	r4,sp,116
   4af9c:	d9000015 	stw	r4,0(sp)
   4afa0:	d8800115 	stw	r2,4(sp)
   4afa4:	01400044 	movi	r5,1
   4afa8:	d811883a 	mov	r8,sp
   4afac:	2809883a 	mov	r4,r5
   4afb0:	42000204 	addi	r8,r8,8
   4afb4:	29400044 	addi	r5,r5,1
   4afb8:	003f4606 	br	4acd4 <_gp+0xfffef5ac>
   4afbc:	d8802517 	ldw	r2,148(sp)
   4afc0:	14c0010e 	bge	r2,r19,4afc8 <___vfiprintf_internal_r+0xef4>
   4afc4:	9805883a 	mov	r2,r19
   4afc8:	d9402417 	ldw	r5,144(sp)
   4afcc:	288b883a 	add	r5,r5,r2
   4afd0:	d9402415 	stw	r5,144(sp)
   4afd4:	003dd006 	br	4a718 <_gp+0xfffeeff0>
   4afd8:	d8001d85 	stb	zero,118(sp)
   4afdc:	80005d16 	blt	r16,zero,4b154 <___vfiprintf_internal_r+0x1080>
   4afe0:	00ffdfc4 	movi	r3,-129
   4afe4:	9d04b03a 	or	r2,r19,r20
   4afe8:	88e2703a 	and	r17,r17,r3
   4afec:	103d3726 	beq	r2,zero,4a4cc <_gp+0xfffeeda4>
   4aff0:	002b883a 	mov	r21,zero
   4aff4:	d9002617 	ldw	r4,152(sp)
   4aff8:	ddc01a04 	addi	r23,sp,104
   4affc:	988003cc 	andi	r2,r19,15
   4b000:	a006973a 	slli	r3,r20,28
   4b004:	2085883a 	add	r2,r4,r2
   4b008:	9826d13a 	srli	r19,r19,4
   4b00c:	10800003 	ldbu	r2,0(r2)
   4b010:	a028d13a 	srli	r20,r20,4
   4b014:	bdffffc4 	addi	r23,r23,-1
   4b018:	1ce6b03a 	or	r19,r3,r19
   4b01c:	b8800005 	stb	r2,0(r23)
   4b020:	9d04b03a 	or	r2,r19,r20
   4b024:	103ff51e 	bne	r2,zero,4affc <_gp+0xfffef8d4>
   4b028:	d8801e17 	ldw	r2,120(sp)
   4b02c:	15e9c83a 	sub	r20,r2,r23
   4b030:	003d2b06 	br	4a4e0 <_gp+0xfffeedb8>
   4b034:	d9402017 	ldw	r5,128(sp)
   4b038:	d9002117 	ldw	r4,132(sp)
   4b03c:	d9801a04 	addi	r6,sp,104
   4b040:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b044:	103f5b1e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b048:	d8801c17 	ldw	r2,112(sp)
   4b04c:	d811883a 	mov	r8,sp
   4b050:	003f6706 	br	4adf0 <_gp+0xfffef6c8>
   4b054:	d9402017 	ldw	r5,128(sp)
   4b058:	d9002117 	ldw	r4,132(sp)
   4b05c:	d9801a04 	addi	r6,sp,104
   4b060:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b064:	103f531e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b068:	d811883a 	mov	r8,sp
   4b06c:	003cd906 	br	4a3d4 <_gp+0xfffeecac>
   4b070:	10803fcc 	andi	r2,r2,255
   4b074:	1080201c 	xori	r2,r2,128
   4b078:	10bfe004 	addi	r2,r2,-128
   4b07c:	00c00c04 	movi	r3,48
   4b080:	10ffe926 	beq	r2,r3,4b028 <_gp+0xfffef900>
   4b084:	b8ffffc5 	stb	r3,-1(r23)
   4b088:	d8c01e17 	ldw	r3,120(sp)
   4b08c:	b8bfffc4 	addi	r2,r23,-1
   4b090:	102f883a 	mov	r23,r2
   4b094:	18a9c83a 	sub	r20,r3,r2
   4b098:	003d1106 	br	4a4e0 <_gp+0xfffeedb8>
   4b09c:	d9402017 	ldw	r5,128(sp)
   4b0a0:	d9002117 	ldw	r4,132(sp)
   4b0a4:	d9801a04 	addi	r6,sp,104
   4b0a8:	d8c02a15 	stw	r3,168(sp)
   4b0ac:	d9c02b15 	stw	r7,172(sp)
   4b0b0:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b0b4:	d8c02a17 	ldw	r3,168(sp)
   4b0b8:	d9c02b17 	ldw	r7,172(sp)
   4b0bc:	103f3d1e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b0c0:	d9001b17 	ldw	r4,108(sp)
   4b0c4:	d8801c17 	ldw	r2,112(sp)
   4b0c8:	d811883a 	mov	r8,sp
   4b0cc:	21400044 	addi	r5,r4,1
   4b0d0:	003d4406 	br	4a5e4 <_gp+0xfffeeebc>
   4b0d4:	d9402017 	ldw	r5,128(sp)
   4b0d8:	d9002117 	ldw	r4,132(sp)
   4b0dc:	d9801a04 	addi	r6,sp,104
   4b0e0:	d8c02a15 	stw	r3,168(sp)
   4b0e4:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b0e8:	d8c02a17 	ldw	r3,168(sp)
   4b0ec:	103f311e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b0f0:	d9001b17 	ldw	r4,108(sp)
   4b0f4:	d8801c17 	ldw	r2,112(sp)
   4b0f8:	d811883a 	mov	r8,sp
   4b0fc:	21400044 	addi	r5,r4,1
   4b100:	003ef406 	br	4acd4 <_gp+0xfffef5ac>
   4b104:	1000bd1e 	bne	r2,zero,4b3fc <___vfiprintf_internal_r+0x1328>
   4b108:	01400044 	movi	r5,1
   4b10c:	0009883a 	mov	r4,zero
   4b110:	d811883a 	mov	r8,sp
   4b114:	003ef106 	br	4acdc <_gp+0xfffef5b4>
   4b118:	d9402017 	ldw	r5,128(sp)
   4b11c:	d9002117 	ldw	r4,132(sp)
   4b120:	d9801a04 	addi	r6,sp,104
   4b124:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b128:	103f221e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b12c:	d9401b17 	ldw	r5,108(sp)
   4b130:	d8801c17 	ldw	r2,112(sp)
   4b134:	d811883a 	mov	r8,sp
   4b138:	29400044 	addi	r5,r5,1
   4b13c:	003d6206 	br	4a6c8 <_gp+0xfffeefa0>
   4b140:	01400174 	movhi	r5,5
   4b144:	29467604 	addi	r5,r5,6616
   4b148:	d9402615 	stw	r5,152(sp)
   4b14c:	d8c02215 	stw	r3,136(sp)
   4b150:	1023883a 	mov	r17,r2
   4b154:	9d04b03a 	or	r2,r19,r20
   4b158:	103fa51e 	bne	r2,zero,4aff0 <_gp+0xfffef8c8>
   4b15c:	002b883a 	mov	r21,zero
   4b160:	00800084 	movi	r2,2
   4b164:	003e4a06 	br	4aa90 <_gp+0xfffef368>
   4b168:	01400174 	movhi	r5,5
   4b16c:	29467604 	addi	r5,r5,6616
   4b170:	002b883a 	mov	r21,zero
   4b174:	d9402615 	stw	r5,152(sp)
   4b178:	003f9e06 	br	4aff4 <_gp+0xfffef8cc>
   4b17c:	d9402217 	ldw	r5,136(sp)
   4b180:	d8001d85 	stb	zero,118(sp)
   4b184:	0029883a 	mov	r20,zero
   4b188:	28800104 	addi	r2,r5,4
   4b18c:	2cc00017 	ldw	r19,0(r5)
   4b190:	803e3a16 	blt	r16,zero,4aa7c <_gp+0xfffef354>
   4b194:	00ffdfc4 	movi	r3,-129
   4b198:	d8802215 	stw	r2,136(sp)
   4b19c:	88e2703a 	and	r17,r17,r3
   4b1a0:	002b883a 	mov	r21,zero
   4b1a4:	983e9b26 	beq	r19,zero,4ac14 <_gp+0xfffef4ec>
   4b1a8:	00800244 	movi	r2,9
   4b1ac:	14fdc936 	bltu	r2,r19,4a8d4 <_gp+0xfffef1ac>
   4b1b0:	003e9a06 	br	4ac1c <_gp+0xfffef4f4>
   4b1b4:	00800c04 	movi	r2,48
   4b1b8:	d8c01d45 	stb	r3,117(sp)
   4b1bc:	d8801d05 	stb	r2,116(sp)
   4b1c0:	d8001d85 	stb	zero,118(sp)
   4b1c4:	88c00094 	ori	r3,r17,2
   4b1c8:	80009c16 	blt	r16,zero,4b43c <___vfiprintf_internal_r+0x1368>
   4b1cc:	00bfdfc4 	movi	r2,-129
   4b1d0:	88a2703a 	and	r17,r17,r2
   4b1d4:	8c400094 	ori	r17,r17,2
   4b1d8:	002b883a 	mov	r21,zero
   4b1dc:	003f8506 	br	4aff4 <_gp+0xfffef8cc>
   4b1e0:	b029883a 	mov	r20,r22
   4b1e4:	003c0b06 	br	4a214 <_gp+0xfffeeaec>
   4b1e8:	04e7c83a 	sub	r19,zero,r19
   4b1ec:	05400b44 	movi	r21,45
   4b1f0:	9804c03a 	cmpne	r2,r19,zero
   4b1f4:	0529c83a 	sub	r20,zero,r20
   4b1f8:	dd401d85 	stb	r21,118(sp)
   4b1fc:	a0a9c83a 	sub	r20,r20,r2
   4b200:	80009716 	blt	r16,zero,4b460 <___vfiprintf_internal_r+0x138c>
   4b204:	00bfdfc4 	movi	r2,-129
   4b208:	88a2703a 	and	r17,r17,r2
   4b20c:	003db006 	br	4a8d0 <_gp+0xfffef1a8>
   4b210:	b0c00007 	ldb	r3,0(r22)
   4b214:	003c0c06 	br	4a248 <_gp+0xfffeeb20>
   4b218:	8880100c 	andi	r2,r17,64
   4b21c:	d8001d85 	stb	zero,118(sp)
   4b220:	1000461e 	bne	r2,zero,4b33c <___vfiprintf_internal_r+0x1268>
   4b224:	d9002217 	ldw	r4,136(sp)
   4b228:	0029883a 	mov	r20,zero
   4b22c:	20800104 	addi	r2,r4,4
   4b230:	24c00017 	ldw	r19,0(r4)
   4b234:	803df80e 	bge	r16,zero,4aa18 <_gp+0xfffef2f0>
   4b238:	9d06b03a 	or	r3,r19,r20
   4b23c:	d8802215 	stw	r2,136(sp)
   4b240:	183d5e1e 	bne	r3,zero,4a7bc <_gp+0xfffef094>
   4b244:	002b883a 	mov	r21,zero
   4b248:	0005883a 	mov	r2,zero
   4b24c:	003e1006 	br	4aa90 <_gp+0xfffef368>
   4b250:	8880040c 	andi	r2,r17,16
   4b254:	1000321e 	bne	r2,zero,4b320 <___vfiprintf_internal_r+0x124c>
   4b258:	8c40100c 	andi	r17,r17,64
   4b25c:	88008d26 	beq	r17,zero,4b494 <___vfiprintf_internal_r+0x13c0>
   4b260:	d9402217 	ldw	r5,136(sp)
   4b264:	d8c02417 	ldw	r3,144(sp)
   4b268:	28800017 	ldw	r2,0(r5)
   4b26c:	29400104 	addi	r5,r5,4
   4b270:	d9402215 	stw	r5,136(sp)
   4b274:	10c0000d 	sth	r3,0(r2)
   4b278:	003bca06 	br	4a1a4 <_gp+0xfffeea7c>
   4b27c:	8880100c 	andi	r2,r17,64
   4b280:	10003a26 	beq	r2,zero,4b36c <___vfiprintf_internal_r+0x1298>
   4b284:	d8802217 	ldw	r2,136(sp)
   4b288:	14c0000f 	ldh	r19,0(r2)
   4b28c:	10800104 	addi	r2,r2,4
   4b290:	d8802215 	stw	r2,136(sp)
   4b294:	9829d7fa 	srai	r20,r19,31
   4b298:	a005883a 	mov	r2,r20
   4b29c:	003d8506 	br	4a8b4 <_gp+0xfffef18c>
   4b2a0:	8880100c 	andi	r2,r17,64
   4b2a4:	10002b26 	beq	r2,zero,4b354 <___vfiprintf_internal_r+0x1280>
   4b2a8:	d8802217 	ldw	r2,136(sp)
   4b2ac:	0029883a 	mov	r20,zero
   4b2b0:	14c0000b 	ldhu	r19,0(r2)
   4b2b4:	10800104 	addi	r2,r2,4
   4b2b8:	d8802215 	stw	r2,136(sp)
   4b2bc:	003d5d06 	br	4a834 <_gp+0xfffef10c>
   4b2c0:	d9402017 	ldw	r5,128(sp)
   4b2c4:	d9002117 	ldw	r4,132(sp)
   4b2c8:	d9801a04 	addi	r6,sp,104
   4b2cc:	d8c02a15 	stw	r3,168(sp)
   4b2d0:	d9c02b15 	stw	r7,172(sp)
   4b2d4:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b2d8:	d8c02a17 	ldw	r3,168(sp)
   4b2dc:	d9c02b17 	ldw	r7,172(sp)
   4b2e0:	103eb41e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b2e4:	d9001b17 	ldw	r4,108(sp)
   4b2e8:	d8801c17 	ldw	r2,112(sp)
   4b2ec:	d811883a 	mov	r8,sp
   4b2f0:	21400044 	addi	r5,r4,1
   4b2f4:	003e6706 	br	4ac94 <_gp+0xfffef56c>
   4b2f8:	00bfffc4 	movi	r2,-1
   4b2fc:	003c4a06 	br	4a428 <_gp+0xfffeed00>
   4b300:	9805883a 	mov	r2,r19
   4b304:	003ee806 	br	4aea8 <_gp+0xfffef780>
   4b308:	d8c02217 	ldw	r3,136(sp)
   4b30c:	0029883a 	mov	r20,zero
   4b310:	18800104 	addi	r2,r3,4
   4b314:	1cc0000b 	ldhu	r19,0(r3)
   4b318:	803f9e0e 	bge	r16,zero,4b194 <_gp+0xfffefa6c>
   4b31c:	003dd706 	br	4aa7c <_gp+0xfffef354>
   4b320:	d8c02217 	ldw	r3,136(sp)
   4b324:	d9002417 	ldw	r4,144(sp)
   4b328:	18800017 	ldw	r2,0(r3)
   4b32c:	18c00104 	addi	r3,r3,4
   4b330:	d8c02215 	stw	r3,136(sp)
   4b334:	11000015 	stw	r4,0(r2)
   4b338:	003b9a06 	br	4a1a4 <_gp+0xfffeea7c>
   4b33c:	d8c02217 	ldw	r3,136(sp)
   4b340:	0029883a 	mov	r20,zero
   4b344:	18800104 	addi	r2,r3,4
   4b348:	1cc0000b 	ldhu	r19,0(r3)
   4b34c:	803db20e 	bge	r16,zero,4aa18 <_gp+0xfffef2f0>
   4b350:	003fb906 	br	4b238 <_gp+0xfffefb10>
   4b354:	d9002217 	ldw	r4,136(sp)
   4b358:	0029883a 	mov	r20,zero
   4b35c:	24c00017 	ldw	r19,0(r4)
   4b360:	21000104 	addi	r4,r4,4
   4b364:	d9002215 	stw	r4,136(sp)
   4b368:	003d3206 	br	4a834 <_gp+0xfffef10c>
   4b36c:	d8c02217 	ldw	r3,136(sp)
   4b370:	1cc00017 	ldw	r19,0(r3)
   4b374:	18c00104 	addi	r3,r3,4
   4b378:	d8c02215 	stw	r3,136(sp)
   4b37c:	9829d7fa 	srai	r20,r19,31
   4b380:	a005883a 	mov	r2,r20
   4b384:	003d4b06 	br	4a8b4 <_gp+0xfffef18c>
   4b388:	0009883a 	mov	r4,zero
   4b38c:	01400044 	movi	r5,1
   4b390:	d811883a 	mov	r8,sp
   4b394:	003e4f06 	br	4acd4 <_gp+0xfffef5ac>
   4b398:	d8c02215 	stw	r3,136(sp)
   4b39c:	002b883a 	mov	r21,zero
   4b3a0:	003db806 	br	4aa84 <_gp+0xfffef35c>
   4b3a4:	d811883a 	mov	r8,sp
   4b3a8:	003e9606 	br	4ae04 <_gp+0xfffef6dc>
   4b3ac:	01000174 	movhi	r4,5
   4b3b0:	2106d604 	addi	r4,r4,7000
   4b3b4:	d9002315 	stw	r4,140(sp)
   4b3b8:	003e6306 	br	4ad48 <_gp+0xfffef620>
   4b3bc:	b0c00043 	ldbu	r3,1(r22)
   4b3c0:	8c400814 	ori	r17,r17,32
   4b3c4:	b5800044 	addi	r22,r22,1
   4b3c8:	18c03fcc 	andi	r3,r3,255
   4b3cc:	18c0201c 	xori	r3,r3,128
   4b3d0:	18ffe004 	addi	r3,r3,-128
   4b3d4:	003b9c06 	br	4a248 <_gp+0xfffeeb20>
   4b3d8:	b809883a 	mov	r4,r23
   4b3dc:	da002a15 	stw	r8,168(sp)
   4b3e0:	0043d040 	call	43d04 <strlen>
   4b3e4:	1029883a 	mov	r20,r2
   4b3e8:	dd401d83 	ldbu	r21,118(sp)
   4b3ec:	df002215 	stw	fp,136(sp)
   4b3f0:	0021883a 	mov	r16,zero
   4b3f4:	da002a17 	ldw	r8,168(sp)
   4b3f8:	003c3906 	br	4a4e0 <_gp+0xfffeedb8>
   4b3fc:	d9402017 	ldw	r5,128(sp)
   4b400:	d9002117 	ldw	r4,132(sp)
   4b404:	d9801a04 	addi	r6,sp,104
   4b408:	0049fc00 	call	49fc0 <__sprint_r.part.0>
   4b40c:	103e691e 	bne	r2,zero,4adb4 <_gp+0xfffef68c>
   4b410:	d9001b17 	ldw	r4,108(sp)
   4b414:	d8801c17 	ldw	r2,112(sp)
   4b418:	d811883a 	mov	r8,sp
   4b41c:	21400044 	addi	r5,r4,1
   4b420:	003e2e06 	br	4acdc <_gp+0xfffef5b4>
   4b424:	01000174 	movhi	r4,5
   4b428:	2106da04 	addi	r4,r4,7016
   4b42c:	d9002315 	stw	r4,140(sp)
   4b430:	d9001b17 	ldw	r4,108(sp)
   4b434:	21000044 	addi	r4,r4,1
   4b438:	003c5e06 	br	4a5b4 <_gp+0xfffeee8c>
   4b43c:	002b883a 	mov	r21,zero
   4b440:	00800084 	movi	r2,2
   4b444:	10803fcc 	andi	r2,r2,255
   4b448:	01000044 	movi	r4,1
   4b44c:	11002b26 	beq	r2,r4,4b4fc <___vfiprintf_internal_r+0x1428>
   4b450:	01000084 	movi	r4,2
   4b454:	11002b1e 	bne	r2,r4,4b504 <___vfiprintf_internal_r+0x1430>
   4b458:	1823883a 	mov	r17,r3
   4b45c:	003ee506 	br	4aff4 <_gp+0xfffef8cc>
   4b460:	8807883a 	mov	r3,r17
   4b464:	00800044 	movi	r2,1
   4b468:	003ff606 	br	4b444 <_gp+0xfffefd1c>
   4b46c:	00800184 	movi	r2,6
   4b470:	1400012e 	bgeu	r2,r16,4b478 <___vfiprintf_internal_r+0x13a4>
   4b474:	1021883a 	mov	r16,r2
   4b478:	8029883a 	mov	r20,r16
   4b47c:	8027883a 	mov	r19,r16
   4b480:	80002216 	blt	r16,zero,4b50c <___vfiprintf_internal_r+0x1438>
   4b484:	05c00174 	movhi	r23,5
   4b488:	df002215 	stw	fp,136(sp)
   4b48c:	bdc67b04 	addi	r23,r23,6636
   4b490:	003cfb06 	br	4a880 <_gp+0xfffef158>
   4b494:	d9002217 	ldw	r4,136(sp)
   4b498:	d9402417 	ldw	r5,144(sp)
   4b49c:	20800017 	ldw	r2,0(r4)
   4b4a0:	21000104 	addi	r4,r4,4
   4b4a4:	d9002215 	stw	r4,136(sp)
   4b4a8:	11400015 	stw	r5,0(r2)
   4b4ac:	003b3d06 	br	4a1a4 <_gp+0xfffeea7c>
   4b4b0:	01400174 	movhi	r5,5
   4b4b4:	2946da04 	addi	r5,r5,7016
   4b4b8:	d9402315 	stw	r5,140(sp)
   4b4bc:	d9401b17 	ldw	r5,108(sp)
   4b4c0:	29400044 	addi	r5,r5,1
   4b4c4:	003e6d06 	br	4ae7c <_gp+0xfffef754>
   4b4c8:	8029883a 	mov	r20,r16
   4b4cc:	dd401d83 	ldbu	r21,118(sp)
   4b4d0:	df002215 	stw	fp,136(sp)
   4b4d4:	0021883a 	mov	r16,zero
   4b4d8:	003c0106 	br	4a4e0 <_gp+0xfffeedb8>
   4b4dc:	00c00174 	movhi	r3,5
   4b4e0:	18c6d604 	addi	r3,r3,7000
   4b4e4:	d8c02315 	stw	r3,140(sp)
   4b4e8:	280d883a 	mov	r6,r5
   4b4ec:	003c6906 	br	4a694 <_gp+0xfffeef6c>
   4b4f0:	802d883a 	mov	r22,r16
   4b4f4:	0021883a 	mov	r16,zero
   4b4f8:	003b5406 	br	4a24c <_gp+0xfffeeb24>
   4b4fc:	1823883a 	mov	r17,r3
   4b500:	003cf306 	br	4a8d0 <_gp+0xfffef1a8>
   4b504:	1823883a 	mov	r17,r3
   4b508:	003cad06 	br	4a7c0 <_gp+0xfffef098>
   4b50c:	0027883a 	mov	r19,zero
   4b510:	003fdc06 	br	4b484 <_gp+0xfffefd5c>
   4b514:	d9402217 	ldw	r5,136(sp)
   4b518:	8005883a 	mov	r2,r16
   4b51c:	b0c00043 	ldbu	r3,1(r22)
   4b520:	2c000017 	ldw	r16,0(r5)
   4b524:	29000104 	addi	r4,r5,4
   4b528:	d9002215 	stw	r4,136(sp)
   4b52c:	102d883a 	mov	r22,r2
   4b530:	803fa50e 	bge	r16,zero,4b3c8 <_gp+0xfffefca0>
   4b534:	18c03fcc 	andi	r3,r3,255
   4b538:	18c0201c 	xori	r3,r3,128
   4b53c:	043fffc4 	movi	r16,-1
   4b540:	18ffe004 	addi	r3,r3,-128
   4b544:	003b4006 	br	4a248 <_gp+0xfffeeb20>
   4b548:	d9402303 	ldbu	r5,140(sp)
   4b54c:	d9401d85 	stb	r5,118(sp)
   4b550:	003cae06 	br	4a80c <_gp+0xfffef0e4>
   4b554:	d8c02303 	ldbu	r3,140(sp)
   4b558:	d8c01d85 	stb	r3,118(sp)
   4b55c:	003d1406 	br	4a9b0 <_gp+0xfffef288>
   4b560:	d8c02303 	ldbu	r3,140(sp)
   4b564:	d8c01d85 	stb	r3,118(sp)
   4b568:	003cca06 	br	4a894 <_gp+0xfffef16c>
   4b56c:	8880004c 	andi	r2,r17,1
   4b570:	002b883a 	mov	r21,zero
   4b574:	10000526 	beq	r2,zero,4b58c <___vfiprintf_internal_r+0x14b8>
   4b578:	00800c04 	movi	r2,48
   4b57c:	d88019c5 	stb	r2,103(sp)
   4b580:	dd002817 	ldw	r20,160(sp)
   4b584:	ddc019c4 	addi	r23,sp,103
   4b588:	003bd506 	br	4a4e0 <_gp+0xfffeedb8>
   4b58c:	0029883a 	mov	r20,zero
   4b590:	ddc01a04 	addi	r23,sp,104
   4b594:	003bd206 	br	4a4e0 <_gp+0xfffeedb8>
   4b598:	d9002303 	ldbu	r4,140(sp)
   4b59c:	d9001d85 	stb	r4,118(sp)
   4b5a0:	003da606 	br	4ac3c <_gp+0xfffef514>
   4b5a4:	d8c02303 	ldbu	r3,140(sp)
   4b5a8:	d8c01d85 	stb	r3,118(sp)
   4b5ac:	003c7606 	br	4a788 <_gp+0xfffef060>
   4b5b0:	d8c02303 	ldbu	r3,140(sp)
   4b5b4:	d8c01d85 	stb	r3,118(sp)
   4b5b8:	003c6506 	br	4a750 <_gp+0xfffef028>
   4b5bc:	d9002303 	ldbu	r4,140(sp)
   4b5c0:	d9001d85 	stb	r4,118(sp)
   4b5c4:	003d3d06 	br	4aabc <_gp+0xfffef394>
   4b5c8:	d8c02303 	ldbu	r3,140(sp)
   4b5cc:	d8c01d85 	stb	r3,118(sp)
   4b5d0:	003d1d06 	br	4aa48 <_gp+0xfffef320>
   4b5d4:	d8c02303 	ldbu	r3,140(sp)
   4b5d8:	d8c01d85 	stb	r3,118(sp)
   4b5dc:	003d0306 	br	4a9ec <_gp+0xfffef2c4>

0004b5e0 <__vfiprintf_internal>:
   4b5e0:	00800174 	movhi	r2,5
   4b5e4:	108dcb04 	addi	r2,r2,14124
   4b5e8:	300f883a 	mov	r7,r6
   4b5ec:	280d883a 	mov	r6,r5
   4b5f0:	200b883a 	mov	r5,r4
   4b5f4:	11000017 	ldw	r4,0(r2)
   4b5f8:	004a0d41 	jmpi	4a0d4 <___vfiprintf_internal_r>

0004b5fc <__sbprintf>:
   4b5fc:	2880030b 	ldhu	r2,12(r5)
   4b600:	2ac01917 	ldw	r11,100(r5)
   4b604:	2a80038b 	ldhu	r10,14(r5)
   4b608:	2a400717 	ldw	r9,28(r5)
   4b60c:	2a000917 	ldw	r8,36(r5)
   4b610:	defee204 	addi	sp,sp,-1144
   4b614:	00c10004 	movi	r3,1024
   4b618:	dc011a15 	stw	r16,1128(sp)
   4b61c:	10bfff4c 	andi	r2,r2,65533
   4b620:	2821883a 	mov	r16,r5
   4b624:	d8cb883a 	add	r5,sp,r3
   4b628:	dc811c15 	stw	r18,1136(sp)
   4b62c:	dc411b15 	stw	r17,1132(sp)
   4b630:	dfc11d15 	stw	ra,1140(sp)
   4b634:	2025883a 	mov	r18,r4
   4b638:	d881030d 	sth	r2,1036(sp)
   4b63c:	dac11915 	stw	r11,1124(sp)
   4b640:	da81038d 	sth	r10,1038(sp)
   4b644:	da410715 	stw	r9,1052(sp)
   4b648:	da010915 	stw	r8,1060(sp)
   4b64c:	dec10015 	stw	sp,1024(sp)
   4b650:	dec10415 	stw	sp,1040(sp)
   4b654:	d8c10215 	stw	r3,1032(sp)
   4b658:	d8c10515 	stw	r3,1044(sp)
   4b65c:	d8010615 	stw	zero,1048(sp)
   4b660:	004a0d40 	call	4a0d4 <___vfiprintf_internal_r>
   4b664:	1023883a 	mov	r17,r2
   4b668:	10000416 	blt	r2,zero,4b67c <__sbprintf+0x80>
   4b66c:	d9410004 	addi	r5,sp,1024
   4b670:	9009883a 	mov	r4,r18
   4b674:	00419f80 	call	419f8 <_fflush_r>
   4b678:	10000d1e 	bne	r2,zero,4b6b0 <__sbprintf+0xb4>
   4b67c:	d881030b 	ldhu	r2,1036(sp)
   4b680:	1080100c 	andi	r2,r2,64
   4b684:	10000326 	beq	r2,zero,4b694 <__sbprintf+0x98>
   4b688:	8080030b 	ldhu	r2,12(r16)
   4b68c:	10801014 	ori	r2,r2,64
   4b690:	8080030d 	sth	r2,12(r16)
   4b694:	8805883a 	mov	r2,r17
   4b698:	dfc11d17 	ldw	ra,1140(sp)
   4b69c:	dc811c17 	ldw	r18,1136(sp)
   4b6a0:	dc411b17 	ldw	r17,1132(sp)
   4b6a4:	dc011a17 	ldw	r16,1128(sp)
   4b6a8:	dec11e04 	addi	sp,sp,1144
   4b6ac:	f800283a 	ret
   4b6b0:	047fffc4 	movi	r17,-1
   4b6b4:	003ff106 	br	4b67c <_gp+0xfffeff54>

0004b6b8 <_calloc_r>:
   4b6b8:	defffe04 	addi	sp,sp,-8
   4b6bc:	2805883a 	mov	r2,r5
   4b6c0:	dc000015 	stw	r16,0(sp)
   4b6c4:	300b883a 	mov	r5,r6
   4b6c8:	2021883a 	mov	r16,r4
   4b6cc:	1009883a 	mov	r4,r2
   4b6d0:	dfc00115 	stw	ra,4(sp)
   4b6d4:	00416640 	call	41664 <__mulsi3>
   4b6d8:	100b883a 	mov	r5,r2
   4b6dc:	8009883a 	mov	r4,r16
   4b6e0:	0042c340 	call	42c34 <_malloc_r>
   4b6e4:	10002926 	beq	r2,zero,4b78c <_calloc_r+0xd4>
   4b6e8:	11bfff17 	ldw	r6,-4(r2)
   4b6ec:	1021883a 	mov	r16,r2
   4b6f0:	00bfff04 	movi	r2,-4
   4b6f4:	308c703a 	and	r6,r6,r2
   4b6f8:	00c00904 	movi	r3,36
   4b6fc:	308d883a 	add	r6,r6,r2
   4b700:	19801636 	bltu	r3,r6,4b75c <_calloc_r+0xa4>
   4b704:	008004c4 	movi	r2,19
   4b708:	11800b2e 	bgeu	r2,r6,4b738 <_calloc_r+0x80>
   4b70c:	80000015 	stw	zero,0(r16)
   4b710:	80000115 	stw	zero,4(r16)
   4b714:	008006c4 	movi	r2,27
   4b718:	11801a2e 	bgeu	r2,r6,4b784 <_calloc_r+0xcc>
   4b71c:	80000215 	stw	zero,8(r16)
   4b720:	80000315 	stw	zero,12(r16)
   4b724:	30c0151e 	bne	r6,r3,4b77c <_calloc_r+0xc4>
   4b728:	80000415 	stw	zero,16(r16)
   4b72c:	80800604 	addi	r2,r16,24
   4b730:	80000515 	stw	zero,20(r16)
   4b734:	00000106 	br	4b73c <_calloc_r+0x84>
   4b738:	8005883a 	mov	r2,r16
   4b73c:	10000015 	stw	zero,0(r2)
   4b740:	10000115 	stw	zero,4(r2)
   4b744:	10000215 	stw	zero,8(r2)
   4b748:	8005883a 	mov	r2,r16
   4b74c:	dfc00117 	ldw	ra,4(sp)
   4b750:	dc000017 	ldw	r16,0(sp)
   4b754:	dec00204 	addi	sp,sp,8
   4b758:	f800283a 	ret
   4b75c:	000b883a 	mov	r5,zero
   4b760:	8009883a 	mov	r4,r16
   4b764:	00434400 	call	43440 <memset>
   4b768:	8005883a 	mov	r2,r16
   4b76c:	dfc00117 	ldw	ra,4(sp)
   4b770:	dc000017 	ldw	r16,0(sp)
   4b774:	dec00204 	addi	sp,sp,8
   4b778:	f800283a 	ret
   4b77c:	80800404 	addi	r2,r16,16
   4b780:	003fee06 	br	4b73c <_gp+0xffff0014>
   4b784:	80800204 	addi	r2,r16,8
   4b788:	003fec06 	br	4b73c <_gp+0xffff0014>
   4b78c:	0005883a 	mov	r2,zero
   4b790:	003fee06 	br	4b74c <_gp+0xffff0024>

0004b794 <__fputwc>:
   4b794:	defff804 	addi	sp,sp,-32
   4b798:	dcc00415 	stw	r19,16(sp)
   4b79c:	dc800315 	stw	r18,12(sp)
   4b7a0:	dc000115 	stw	r16,4(sp)
   4b7a4:	dfc00715 	stw	ra,28(sp)
   4b7a8:	dd400615 	stw	r21,24(sp)
   4b7ac:	dd000515 	stw	r20,20(sp)
   4b7b0:	dc400215 	stw	r17,8(sp)
   4b7b4:	2027883a 	mov	r19,r4
   4b7b8:	2825883a 	mov	r18,r5
   4b7bc:	3021883a 	mov	r16,r6
   4b7c0:	00483b80 	call	483b8 <__locale_mb_cur_max>
   4b7c4:	00c00044 	movi	r3,1
   4b7c8:	10c03e26 	beq	r2,r3,4b8c4 <__fputwc+0x130>
   4b7cc:	81c01704 	addi	r7,r16,92
   4b7d0:	900d883a 	mov	r6,r18
   4b7d4:	d80b883a 	mov	r5,sp
   4b7d8:	9809883a 	mov	r4,r19
   4b7dc:	004b99c0 	call	4b99c <_wcrtomb_r>
   4b7e0:	1029883a 	mov	r20,r2
   4b7e4:	00bfffc4 	movi	r2,-1
   4b7e8:	a0802026 	beq	r20,r2,4b86c <__fputwc+0xd8>
   4b7ec:	d9400003 	ldbu	r5,0(sp)
   4b7f0:	a0001c26 	beq	r20,zero,4b864 <__fputwc+0xd0>
   4b7f4:	0023883a 	mov	r17,zero
   4b7f8:	05400284 	movi	r21,10
   4b7fc:	00000906 	br	4b824 <__fputwc+0x90>
   4b800:	80800017 	ldw	r2,0(r16)
   4b804:	11400005 	stb	r5,0(r2)
   4b808:	80c00017 	ldw	r3,0(r16)
   4b80c:	18c00044 	addi	r3,r3,1
   4b810:	80c00015 	stw	r3,0(r16)
   4b814:	8c400044 	addi	r17,r17,1
   4b818:	dc45883a 	add	r2,sp,r17
   4b81c:	8d00112e 	bgeu	r17,r20,4b864 <__fputwc+0xd0>
   4b820:	11400003 	ldbu	r5,0(r2)
   4b824:	80c00217 	ldw	r3,8(r16)
   4b828:	18ffffc4 	addi	r3,r3,-1
   4b82c:	80c00215 	stw	r3,8(r16)
   4b830:	183ff30e 	bge	r3,zero,4b800 <_gp+0xffff00d8>
   4b834:	80800617 	ldw	r2,24(r16)
   4b838:	18801916 	blt	r3,r2,4b8a0 <__fputwc+0x10c>
   4b83c:	80800017 	ldw	r2,0(r16)
   4b840:	11400005 	stb	r5,0(r2)
   4b844:	80800017 	ldw	r2,0(r16)
   4b848:	10c00003 	ldbu	r3,0(r2)
   4b84c:	10800044 	addi	r2,r2,1
   4b850:	1d402326 	beq	r3,r21,4b8e0 <__fputwc+0x14c>
   4b854:	80800015 	stw	r2,0(r16)
   4b858:	8c400044 	addi	r17,r17,1
   4b85c:	dc45883a 	add	r2,sp,r17
   4b860:	8d3fef36 	bltu	r17,r20,4b820 <_gp+0xffff00f8>
   4b864:	9005883a 	mov	r2,r18
   4b868:	00000406 	br	4b87c <__fputwc+0xe8>
   4b86c:	80c0030b 	ldhu	r3,12(r16)
   4b870:	a005883a 	mov	r2,r20
   4b874:	18c01014 	ori	r3,r3,64
   4b878:	80c0030d 	sth	r3,12(r16)
   4b87c:	dfc00717 	ldw	ra,28(sp)
   4b880:	dd400617 	ldw	r21,24(sp)
   4b884:	dd000517 	ldw	r20,20(sp)
   4b888:	dcc00417 	ldw	r19,16(sp)
   4b88c:	dc800317 	ldw	r18,12(sp)
   4b890:	dc400217 	ldw	r17,8(sp)
   4b894:	dc000117 	ldw	r16,4(sp)
   4b898:	dec00804 	addi	sp,sp,32
   4b89c:	f800283a 	ret
   4b8a0:	800d883a 	mov	r6,r16
   4b8a4:	29403fcc 	andi	r5,r5,255
   4b8a8:	9809883a 	mov	r4,r19
   4b8ac:	00461580 	call	46158 <__swbuf_r>
   4b8b0:	10bfffe0 	cmpeqi	r2,r2,-1
   4b8b4:	10803fcc 	andi	r2,r2,255
   4b8b8:	103fd626 	beq	r2,zero,4b814 <_gp+0xffff00ec>
   4b8bc:	00bfffc4 	movi	r2,-1
   4b8c0:	003fee06 	br	4b87c <_gp+0xffff0154>
   4b8c4:	90ffffc4 	addi	r3,r18,-1
   4b8c8:	01003f84 	movi	r4,254
   4b8cc:	20ffbf36 	bltu	r4,r3,4b7cc <_gp+0xffff00a4>
   4b8d0:	900b883a 	mov	r5,r18
   4b8d4:	dc800005 	stb	r18,0(sp)
   4b8d8:	1029883a 	mov	r20,r2
   4b8dc:	003fc506 	br	4b7f4 <_gp+0xffff00cc>
   4b8e0:	800d883a 	mov	r6,r16
   4b8e4:	a80b883a 	mov	r5,r21
   4b8e8:	9809883a 	mov	r4,r19
   4b8ec:	00461580 	call	46158 <__swbuf_r>
   4b8f0:	10bfffe0 	cmpeqi	r2,r2,-1
   4b8f4:	003fef06 	br	4b8b4 <_gp+0xffff018c>

0004b8f8 <_fputwc_r>:
   4b8f8:	3080030b 	ldhu	r2,12(r6)
   4b8fc:	10c8000c 	andi	r3,r2,8192
   4b900:	1800051e 	bne	r3,zero,4b918 <_fputwc_r+0x20>
   4b904:	30c01917 	ldw	r3,100(r6)
   4b908:	10880014 	ori	r2,r2,8192
   4b90c:	3080030d 	sth	r2,12(r6)
   4b910:	18880014 	ori	r2,r3,8192
   4b914:	30801915 	stw	r2,100(r6)
   4b918:	004b7941 	jmpi	4b794 <__fputwc>

0004b91c <fputwc>:
   4b91c:	00800174 	movhi	r2,5
   4b920:	defffc04 	addi	sp,sp,-16
   4b924:	108dcb04 	addi	r2,r2,14124
   4b928:	dc000115 	stw	r16,4(sp)
   4b92c:	14000017 	ldw	r16,0(r2)
   4b930:	dc400215 	stw	r17,8(sp)
   4b934:	dfc00315 	stw	ra,12(sp)
   4b938:	2023883a 	mov	r17,r4
   4b93c:	80000226 	beq	r16,zero,4b948 <fputwc+0x2c>
   4b940:	80800e17 	ldw	r2,56(r16)
   4b944:	10001026 	beq	r2,zero,4b988 <fputwc+0x6c>
   4b948:	2880030b 	ldhu	r2,12(r5)
   4b94c:	10c8000c 	andi	r3,r2,8192
   4b950:	1800051e 	bne	r3,zero,4b968 <fputwc+0x4c>
   4b954:	28c01917 	ldw	r3,100(r5)
   4b958:	10880014 	ori	r2,r2,8192
   4b95c:	2880030d 	sth	r2,12(r5)
   4b960:	18880014 	ori	r2,r3,8192
   4b964:	28801915 	stw	r2,100(r5)
   4b968:	280d883a 	mov	r6,r5
   4b96c:	8009883a 	mov	r4,r16
   4b970:	880b883a 	mov	r5,r17
   4b974:	dfc00317 	ldw	ra,12(sp)
   4b978:	dc400217 	ldw	r17,8(sp)
   4b97c:	dc000117 	ldw	r16,4(sp)
   4b980:	dec00404 	addi	sp,sp,16
   4b984:	004b7941 	jmpi	4b794 <__fputwc>
   4b988:	8009883a 	mov	r4,r16
   4b98c:	d9400015 	stw	r5,0(sp)
   4b990:	0041de40 	call	41de4 <__sinit>
   4b994:	d9400017 	ldw	r5,0(sp)
   4b998:	003feb06 	br	4b948 <_gp+0xffff0220>

0004b99c <_wcrtomb_r>:
   4b99c:	defff604 	addi	sp,sp,-40
   4b9a0:	00800174 	movhi	r2,5
   4b9a4:	dc800815 	stw	r18,32(sp)
   4b9a8:	dc400715 	stw	r17,28(sp)
   4b9ac:	dc000615 	stw	r16,24(sp)
   4b9b0:	108dcf04 	addi	r2,r2,14140
   4b9b4:	dfc00915 	stw	ra,36(sp)
   4b9b8:	2021883a 	mov	r16,r4
   4b9bc:	3823883a 	mov	r17,r7
   4b9c0:	14800017 	ldw	r18,0(r2)
   4b9c4:	28001426 	beq	r5,zero,4ba18 <_wcrtomb_r+0x7c>
   4b9c8:	d9400415 	stw	r5,16(sp)
   4b9cc:	d9800515 	stw	r6,20(sp)
   4b9d0:	00483ac0 	call	483ac <__locale_charset>
   4b9d4:	d9800517 	ldw	r6,20(sp)
   4b9d8:	d9400417 	ldw	r5,16(sp)
   4b9dc:	100f883a 	mov	r7,r2
   4b9e0:	dc400015 	stw	r17,0(sp)
   4b9e4:	8009883a 	mov	r4,r16
   4b9e8:	903ee83a 	callr	r18
   4b9ec:	00ffffc4 	movi	r3,-1
   4b9f0:	10c0031e 	bne	r2,r3,4ba00 <_wcrtomb_r+0x64>
   4b9f4:	88000015 	stw	zero,0(r17)
   4b9f8:	00c02284 	movi	r3,138
   4b9fc:	80c00015 	stw	r3,0(r16)
   4ba00:	dfc00917 	ldw	ra,36(sp)
   4ba04:	dc800817 	ldw	r18,32(sp)
   4ba08:	dc400717 	ldw	r17,28(sp)
   4ba0c:	dc000617 	ldw	r16,24(sp)
   4ba10:	dec00a04 	addi	sp,sp,40
   4ba14:	f800283a 	ret
   4ba18:	00483ac0 	call	483ac <__locale_charset>
   4ba1c:	100f883a 	mov	r7,r2
   4ba20:	dc400015 	stw	r17,0(sp)
   4ba24:	000d883a 	mov	r6,zero
   4ba28:	d9400104 	addi	r5,sp,4
   4ba2c:	8009883a 	mov	r4,r16
   4ba30:	903ee83a 	callr	r18
   4ba34:	003fed06 	br	4b9ec <_gp+0xffff02c4>

0004ba38 <wcrtomb>:
   4ba38:	defff604 	addi	sp,sp,-40
   4ba3c:	00800174 	movhi	r2,5
   4ba40:	dc800615 	stw	r18,24(sp)
   4ba44:	dc400515 	stw	r17,20(sp)
   4ba48:	108dcb04 	addi	r2,r2,14124
   4ba4c:	dfc00915 	stw	ra,36(sp)
   4ba50:	dd000815 	stw	r20,32(sp)
   4ba54:	dcc00715 	stw	r19,28(sp)
   4ba58:	dc000415 	stw	r16,16(sp)
   4ba5c:	3025883a 	mov	r18,r6
   4ba60:	14400017 	ldw	r17,0(r2)
   4ba64:	20001926 	beq	r4,zero,4bacc <wcrtomb+0x94>
   4ba68:	00800174 	movhi	r2,5
   4ba6c:	108dcf04 	addi	r2,r2,14140
   4ba70:	15000017 	ldw	r20,0(r2)
   4ba74:	2021883a 	mov	r16,r4
   4ba78:	2827883a 	mov	r19,r5
   4ba7c:	00483ac0 	call	483ac <__locale_charset>
   4ba80:	100f883a 	mov	r7,r2
   4ba84:	dc800015 	stw	r18,0(sp)
   4ba88:	980d883a 	mov	r6,r19
   4ba8c:	800b883a 	mov	r5,r16
   4ba90:	8809883a 	mov	r4,r17
   4ba94:	a03ee83a 	callr	r20
   4ba98:	00ffffc4 	movi	r3,-1
   4ba9c:	10c0031e 	bne	r2,r3,4baac <wcrtomb+0x74>
   4baa0:	90000015 	stw	zero,0(r18)
   4baa4:	00c02284 	movi	r3,138
   4baa8:	88c00015 	stw	r3,0(r17)
   4baac:	dfc00917 	ldw	ra,36(sp)
   4bab0:	dd000817 	ldw	r20,32(sp)
   4bab4:	dcc00717 	ldw	r19,28(sp)
   4bab8:	dc800617 	ldw	r18,24(sp)
   4babc:	dc400517 	ldw	r17,20(sp)
   4bac0:	dc000417 	ldw	r16,16(sp)
   4bac4:	dec00a04 	addi	sp,sp,40
   4bac8:	f800283a 	ret
   4bacc:	00800174 	movhi	r2,5
   4bad0:	108dcf04 	addi	r2,r2,14140
   4bad4:	14000017 	ldw	r16,0(r2)
   4bad8:	00483ac0 	call	483ac <__locale_charset>
   4badc:	100f883a 	mov	r7,r2
   4bae0:	dc800015 	stw	r18,0(sp)
   4bae4:	000d883a 	mov	r6,zero
   4bae8:	d9400104 	addi	r5,sp,4
   4baec:	8809883a 	mov	r4,r17
   4baf0:	803ee83a 	callr	r16
   4baf4:	003fe806 	br	4ba98 <_gp+0xffff0370>

0004baf8 <__ascii_wctomb>:
   4baf8:	28000526 	beq	r5,zero,4bb10 <__ascii_wctomb+0x18>
   4bafc:	00803fc4 	movi	r2,255
   4bb00:	11800536 	bltu	r2,r6,4bb18 <__ascii_wctomb+0x20>
   4bb04:	29800005 	stb	r6,0(r5)
   4bb08:	00800044 	movi	r2,1
   4bb0c:	f800283a 	ret
   4bb10:	0005883a 	mov	r2,zero
   4bb14:	f800283a 	ret
   4bb18:	00802284 	movi	r2,138
   4bb1c:	20800015 	stw	r2,0(r4)
   4bb20:	00bfffc4 	movi	r2,-1
   4bb24:	f800283a 	ret

0004bb28 <_wctomb_r>:
   4bb28:	00800174 	movhi	r2,5
   4bb2c:	defff904 	addi	sp,sp,-28
   4bb30:	108dcf04 	addi	r2,r2,14140
   4bb34:	dfc00615 	stw	ra,24(sp)
   4bb38:	dc400515 	stw	r17,20(sp)
   4bb3c:	dc000415 	stw	r16,16(sp)
   4bb40:	3823883a 	mov	r17,r7
   4bb44:	14000017 	ldw	r16,0(r2)
   4bb48:	d9000115 	stw	r4,4(sp)
   4bb4c:	d9400215 	stw	r5,8(sp)
   4bb50:	d9800315 	stw	r6,12(sp)
   4bb54:	00483ac0 	call	483ac <__locale_charset>
   4bb58:	d9800317 	ldw	r6,12(sp)
   4bb5c:	d9400217 	ldw	r5,8(sp)
   4bb60:	d9000117 	ldw	r4,4(sp)
   4bb64:	100f883a 	mov	r7,r2
   4bb68:	dc400015 	stw	r17,0(sp)
   4bb6c:	803ee83a 	callr	r16
   4bb70:	dfc00617 	ldw	ra,24(sp)
   4bb74:	dc400517 	ldw	r17,20(sp)
   4bb78:	dc000417 	ldw	r16,16(sp)
   4bb7c:	dec00704 	addi	sp,sp,28
   4bb80:	f800283a 	ret

0004bb84 <__udivdi3>:
   4bb84:	defff404 	addi	sp,sp,-48
   4bb88:	dcc00515 	stw	r19,20(sp)
   4bb8c:	dc000215 	stw	r16,8(sp)
   4bb90:	dfc00b15 	stw	ra,44(sp)
   4bb94:	df000a15 	stw	fp,40(sp)
   4bb98:	ddc00915 	stw	r23,36(sp)
   4bb9c:	dd800815 	stw	r22,32(sp)
   4bba0:	dd400715 	stw	r21,28(sp)
   4bba4:	dd000615 	stw	r20,24(sp)
   4bba8:	dc800415 	stw	r18,16(sp)
   4bbac:	dc400315 	stw	r17,12(sp)
   4bbb0:	2027883a 	mov	r19,r4
   4bbb4:	2821883a 	mov	r16,r5
   4bbb8:	3800461e 	bne	r7,zero,4bcd4 <__udivdi3+0x150>
   4bbbc:	3023883a 	mov	r17,r6
   4bbc0:	2025883a 	mov	r18,r4
   4bbc4:	2980572e 	bgeu	r5,r6,4bd24 <__udivdi3+0x1a0>
   4bbc8:	00bfffd4 	movui	r2,65535
   4bbcc:	282d883a 	mov	r22,r5
   4bbd0:	1180b236 	bltu	r2,r6,4be9c <__udivdi3+0x318>
   4bbd4:	00803fc4 	movi	r2,255
   4bbd8:	1185803a 	cmpltu	r2,r2,r6
   4bbdc:	100490fa 	slli	r2,r2,3
   4bbe0:	3086d83a 	srl	r3,r6,r2
   4bbe4:	01000174 	movhi	r4,5
   4bbe8:	21062b04 	addi	r4,r4,6316
   4bbec:	20c7883a 	add	r3,r4,r3
   4bbf0:	18c00003 	ldbu	r3,0(r3)
   4bbf4:	1885883a 	add	r2,r3,r2
   4bbf8:	00c00804 	movi	r3,32
   4bbfc:	1887c83a 	sub	r3,r3,r2
   4bc00:	18000526 	beq	r3,zero,4bc18 <__udivdi3+0x94>
   4bc04:	80e0983a 	sll	r16,r16,r3
   4bc08:	9884d83a 	srl	r2,r19,r2
   4bc0c:	30e2983a 	sll	r17,r6,r3
   4bc10:	98e4983a 	sll	r18,r19,r3
   4bc14:	142cb03a 	or	r22,r2,r16
   4bc18:	882ad43a 	srli	r21,r17,16
   4bc1c:	b009883a 	mov	r4,r22
   4bc20:	8d3fffcc 	andi	r20,r17,65535
   4bc24:	a80b883a 	mov	r5,r21
   4bc28:	004160c0 	call	4160c <__umodsi3>
   4bc2c:	b009883a 	mov	r4,r22
   4bc30:	a80b883a 	mov	r5,r21
   4bc34:	1027883a 	mov	r19,r2
   4bc38:	00415a80 	call	415a8 <__udivsi3>
   4bc3c:	100b883a 	mov	r5,r2
   4bc40:	a009883a 	mov	r4,r20
   4bc44:	102d883a 	mov	r22,r2
   4bc48:	00416640 	call	41664 <__mulsi3>
   4bc4c:	9826943a 	slli	r19,r19,16
   4bc50:	9006d43a 	srli	r3,r18,16
   4bc54:	1cc6b03a 	or	r3,r3,r19
   4bc58:	1880052e 	bgeu	r3,r2,4bc70 <__udivdi3+0xec>
   4bc5c:	1c47883a 	add	r3,r3,r17
   4bc60:	b13fffc4 	addi	r4,r22,-1
   4bc64:	1c400136 	bltu	r3,r17,4bc6c <__udivdi3+0xe8>
   4bc68:	18814236 	bltu	r3,r2,4c174 <__udivdi3+0x5f0>
   4bc6c:	202d883a 	mov	r22,r4
   4bc70:	18a1c83a 	sub	r16,r3,r2
   4bc74:	8009883a 	mov	r4,r16
   4bc78:	a80b883a 	mov	r5,r21
   4bc7c:	004160c0 	call	4160c <__umodsi3>
   4bc80:	1027883a 	mov	r19,r2
   4bc84:	8009883a 	mov	r4,r16
   4bc88:	a80b883a 	mov	r5,r21
   4bc8c:	9826943a 	slli	r19,r19,16
   4bc90:	00415a80 	call	415a8 <__udivsi3>
   4bc94:	100b883a 	mov	r5,r2
   4bc98:	a009883a 	mov	r4,r20
   4bc9c:	94bfffcc 	andi	r18,r18,65535
   4bca0:	1021883a 	mov	r16,r2
   4bca4:	94e4b03a 	or	r18,r18,r19
   4bca8:	00416640 	call	41664 <__mulsi3>
   4bcac:	9080052e 	bgeu	r18,r2,4bcc4 <__udivdi3+0x140>
   4bcb0:	8ca5883a 	add	r18,r17,r18
   4bcb4:	80ffffc4 	addi	r3,r16,-1
   4bcb8:	94410c36 	bltu	r18,r17,4c0ec <__udivdi3+0x568>
   4bcbc:	90810b2e 	bgeu	r18,r2,4c0ec <__udivdi3+0x568>
   4bcc0:	843fff84 	addi	r16,r16,-2
   4bcc4:	b004943a 	slli	r2,r22,16
   4bcc8:	0007883a 	mov	r3,zero
   4bccc:	1404b03a 	or	r2,r2,r16
   4bcd0:	00005e06 	br	4be4c <__udivdi3+0x2c8>
   4bcd4:	29c05b36 	bltu	r5,r7,4be44 <__udivdi3+0x2c0>
   4bcd8:	00bfffd4 	movui	r2,65535
   4bcdc:	11c0672e 	bgeu	r2,r7,4be7c <__udivdi3+0x2f8>
   4bce0:	00804034 	movhi	r2,256
   4bce4:	10bfffc4 	addi	r2,r2,-1
   4bce8:	11c10a36 	bltu	r2,r7,4c114 <__udivdi3+0x590>
   4bcec:	00800404 	movi	r2,16
   4bcf0:	3886d83a 	srl	r3,r7,r2
   4bcf4:	01000174 	movhi	r4,5
   4bcf8:	21062b04 	addi	r4,r4,6316
   4bcfc:	20c7883a 	add	r3,r4,r3
   4bd00:	18c00003 	ldbu	r3,0(r3)
   4bd04:	05c00804 	movi	r23,32
   4bd08:	1885883a 	add	r2,r3,r2
   4bd0c:	b8afc83a 	sub	r23,r23,r2
   4bd10:	b800671e 	bne	r23,zero,4beb0 <__udivdi3+0x32c>
   4bd14:	3c010536 	bltu	r7,r16,4c12c <__udivdi3+0x5a8>
   4bd18:	9985403a 	cmpgeu	r2,r19,r6
   4bd1c:	0007883a 	mov	r3,zero
   4bd20:	00004a06 	br	4be4c <__udivdi3+0x2c8>
   4bd24:	3000041e 	bne	r6,zero,4bd38 <__udivdi3+0x1b4>
   4bd28:	000b883a 	mov	r5,zero
   4bd2c:	01000044 	movi	r4,1
   4bd30:	00415a80 	call	415a8 <__udivsi3>
   4bd34:	1023883a 	mov	r17,r2
   4bd38:	00bfffd4 	movui	r2,65535
   4bd3c:	1440532e 	bgeu	r2,r17,4be8c <__udivdi3+0x308>
   4bd40:	00804034 	movhi	r2,256
   4bd44:	10bfffc4 	addi	r2,r2,-1
   4bd48:	1440f436 	bltu	r2,r17,4c11c <__udivdi3+0x598>
   4bd4c:	00800404 	movi	r2,16
   4bd50:	8886d83a 	srl	r3,r17,r2
   4bd54:	01000174 	movhi	r4,5
   4bd58:	21062b04 	addi	r4,r4,6316
   4bd5c:	20c7883a 	add	r3,r4,r3
   4bd60:	18c00003 	ldbu	r3,0(r3)
   4bd64:	1885883a 	add	r2,r3,r2
   4bd68:	00c00804 	movi	r3,32
   4bd6c:	1887c83a 	sub	r3,r3,r2
   4bd70:	1800a51e 	bne	r3,zero,4c008 <__udivdi3+0x484>
   4bd74:	882ad43a 	srli	r21,r17,16
   4bd78:	8461c83a 	sub	r16,r16,r17
   4bd7c:	8d3fffcc 	andi	r20,r17,65535
   4bd80:	00c00044 	movi	r3,1
   4bd84:	a80b883a 	mov	r5,r21
   4bd88:	8009883a 	mov	r4,r16
   4bd8c:	d8c00115 	stw	r3,4(sp)
   4bd90:	004160c0 	call	4160c <__umodsi3>
   4bd94:	a80b883a 	mov	r5,r21
   4bd98:	8009883a 	mov	r4,r16
   4bd9c:	1027883a 	mov	r19,r2
   4bda0:	00415a80 	call	415a8 <__udivsi3>
   4bda4:	a00b883a 	mov	r5,r20
   4bda8:	1009883a 	mov	r4,r2
   4bdac:	102d883a 	mov	r22,r2
   4bdb0:	00416640 	call	41664 <__mulsi3>
   4bdb4:	9826943a 	slli	r19,r19,16
   4bdb8:	900ed43a 	srli	r7,r18,16
   4bdbc:	d8c00117 	ldw	r3,4(sp)
   4bdc0:	3cceb03a 	or	r7,r7,r19
   4bdc4:	3880052e 	bgeu	r7,r2,4bddc <__udivdi3+0x258>
   4bdc8:	3c4f883a 	add	r7,r7,r17
   4bdcc:	b13fffc4 	addi	r4,r22,-1
   4bdd0:	3c400136 	bltu	r7,r17,4bdd8 <__udivdi3+0x254>
   4bdd4:	3880e436 	bltu	r7,r2,4c168 <__udivdi3+0x5e4>
   4bdd8:	202d883a 	mov	r22,r4
   4bddc:	38a1c83a 	sub	r16,r7,r2
   4bde0:	8009883a 	mov	r4,r16
   4bde4:	a80b883a 	mov	r5,r21
   4bde8:	d8c00115 	stw	r3,4(sp)
   4bdec:	004160c0 	call	4160c <__umodsi3>
   4bdf0:	1027883a 	mov	r19,r2
   4bdf4:	8009883a 	mov	r4,r16
   4bdf8:	a80b883a 	mov	r5,r21
   4bdfc:	9826943a 	slli	r19,r19,16
   4be00:	00415a80 	call	415a8 <__udivsi3>
   4be04:	a00b883a 	mov	r5,r20
   4be08:	1009883a 	mov	r4,r2
   4be0c:	94bfffcc 	andi	r18,r18,65535
   4be10:	1021883a 	mov	r16,r2
   4be14:	94e4b03a 	or	r18,r18,r19
   4be18:	00416640 	call	41664 <__mulsi3>
   4be1c:	d8c00117 	ldw	r3,4(sp)
   4be20:	9080052e 	bgeu	r18,r2,4be38 <__udivdi3+0x2b4>
   4be24:	8ca5883a 	add	r18,r17,r18
   4be28:	813fffc4 	addi	r4,r16,-1
   4be2c:	9440ad36 	bltu	r18,r17,4c0e4 <__udivdi3+0x560>
   4be30:	9080ac2e 	bgeu	r18,r2,4c0e4 <__udivdi3+0x560>
   4be34:	843fff84 	addi	r16,r16,-2
   4be38:	b004943a 	slli	r2,r22,16
   4be3c:	1404b03a 	or	r2,r2,r16
   4be40:	00000206 	br	4be4c <__udivdi3+0x2c8>
   4be44:	0007883a 	mov	r3,zero
   4be48:	0005883a 	mov	r2,zero
   4be4c:	dfc00b17 	ldw	ra,44(sp)
   4be50:	df000a17 	ldw	fp,40(sp)
   4be54:	ddc00917 	ldw	r23,36(sp)
   4be58:	dd800817 	ldw	r22,32(sp)
   4be5c:	dd400717 	ldw	r21,28(sp)
   4be60:	dd000617 	ldw	r20,24(sp)
   4be64:	dcc00517 	ldw	r19,20(sp)
   4be68:	dc800417 	ldw	r18,16(sp)
   4be6c:	dc400317 	ldw	r17,12(sp)
   4be70:	dc000217 	ldw	r16,8(sp)
   4be74:	dec00c04 	addi	sp,sp,48
   4be78:	f800283a 	ret
   4be7c:	00803fc4 	movi	r2,255
   4be80:	11c5803a 	cmpltu	r2,r2,r7
   4be84:	100490fa 	slli	r2,r2,3
   4be88:	003f9906 	br	4bcf0 <_gp+0xffff05c8>
   4be8c:	00803fc4 	movi	r2,255
   4be90:	1445803a 	cmpltu	r2,r2,r17
   4be94:	100490fa 	slli	r2,r2,3
   4be98:	003fad06 	br	4bd50 <_gp+0xffff0628>
   4be9c:	00804034 	movhi	r2,256
   4bea0:	10bfffc4 	addi	r2,r2,-1
   4bea4:	11809f36 	bltu	r2,r6,4c124 <__udivdi3+0x5a0>
   4bea8:	00800404 	movi	r2,16
   4beac:	003f4c06 	br	4bbe0 <_gp+0xffff04b8>
   4beb0:	3dce983a 	sll	r7,r7,r23
   4beb4:	30b8d83a 	srl	fp,r6,r2
   4beb8:	80a2d83a 	srl	r17,r16,r2
   4bebc:	35cc983a 	sll	r6,r6,r23
   4bec0:	3f38b03a 	or	fp,r7,fp
   4bec4:	e024d43a 	srli	r18,fp,16
   4bec8:	9884d83a 	srl	r2,r19,r2
   4becc:	85e0983a 	sll	r16,r16,r23
   4bed0:	8809883a 	mov	r4,r17
   4bed4:	900b883a 	mov	r5,r18
   4bed8:	d9800015 	stw	r6,0(sp)
   4bedc:	1420b03a 	or	r16,r2,r16
   4bee0:	004160c0 	call	4160c <__umodsi3>
   4bee4:	900b883a 	mov	r5,r18
   4bee8:	8809883a 	mov	r4,r17
   4beec:	1029883a 	mov	r20,r2
   4bef0:	e5bfffcc 	andi	r22,fp,65535
   4bef4:	00415a80 	call	415a8 <__udivsi3>
   4bef8:	100b883a 	mov	r5,r2
   4befc:	b009883a 	mov	r4,r22
   4bf00:	102b883a 	mov	r21,r2
   4bf04:	00416640 	call	41664 <__mulsi3>
   4bf08:	a028943a 	slli	r20,r20,16
   4bf0c:	8006d43a 	srli	r3,r16,16
   4bf10:	1d06b03a 	or	r3,r3,r20
   4bf14:	1880042e 	bgeu	r3,r2,4bf28 <__udivdi3+0x3a4>
   4bf18:	1f07883a 	add	r3,r3,fp
   4bf1c:	a93fffc4 	addi	r4,r21,-1
   4bf20:	1f00892e 	bgeu	r3,fp,4c148 <__udivdi3+0x5c4>
   4bf24:	202b883a 	mov	r21,r4
   4bf28:	18a3c83a 	sub	r17,r3,r2
   4bf2c:	8809883a 	mov	r4,r17
   4bf30:	900b883a 	mov	r5,r18
   4bf34:	004160c0 	call	4160c <__umodsi3>
   4bf38:	1029883a 	mov	r20,r2
   4bf3c:	8809883a 	mov	r4,r17
   4bf40:	900b883a 	mov	r5,r18
   4bf44:	a028943a 	slli	r20,r20,16
   4bf48:	00415a80 	call	415a8 <__udivsi3>
   4bf4c:	100b883a 	mov	r5,r2
   4bf50:	b009883a 	mov	r4,r22
   4bf54:	843fffcc 	andi	r16,r16,65535
   4bf58:	1023883a 	mov	r17,r2
   4bf5c:	8520b03a 	or	r16,r16,r20
   4bf60:	00416640 	call	41664 <__mulsi3>
   4bf64:	8080042e 	bgeu	r16,r2,4bf78 <__udivdi3+0x3f4>
   4bf68:	8721883a 	add	r16,r16,fp
   4bf6c:	88ffffc4 	addi	r3,r17,-1
   4bf70:	8700712e 	bgeu	r16,fp,4c138 <__udivdi3+0x5b4>
   4bf74:	1823883a 	mov	r17,r3
   4bf78:	a80e943a 	slli	r7,r21,16
   4bf7c:	d8c00017 	ldw	r3,0(sp)
   4bf80:	80a1c83a 	sub	r16,r16,r2
   4bf84:	3c64b03a 	or	r18,r7,r17
   4bf88:	1d3fffcc 	andi	r20,r3,65535
   4bf8c:	9022d43a 	srli	r17,r18,16
   4bf90:	95bfffcc 	andi	r22,r18,65535
   4bf94:	a00b883a 	mov	r5,r20
   4bf98:	b009883a 	mov	r4,r22
   4bf9c:	182ad43a 	srli	r21,r3,16
   4bfa0:	00416640 	call	41664 <__mulsi3>
   4bfa4:	a00b883a 	mov	r5,r20
   4bfa8:	8809883a 	mov	r4,r17
   4bfac:	1039883a 	mov	fp,r2
   4bfb0:	00416640 	call	41664 <__mulsi3>
   4bfb4:	8809883a 	mov	r4,r17
   4bfb8:	a80b883a 	mov	r5,r21
   4bfbc:	1029883a 	mov	r20,r2
   4bfc0:	00416640 	call	41664 <__mulsi3>
   4bfc4:	a80b883a 	mov	r5,r21
   4bfc8:	b009883a 	mov	r4,r22
   4bfcc:	1023883a 	mov	r17,r2
   4bfd0:	00416640 	call	41664 <__mulsi3>
   4bfd4:	e006d43a 	srli	r3,fp,16
   4bfd8:	1505883a 	add	r2,r2,r20
   4bfdc:	1887883a 	add	r3,r3,r2
   4bfe0:	1d00022e 	bgeu	r3,r20,4bfec <__udivdi3+0x468>
   4bfe4:	00800074 	movhi	r2,1
   4bfe8:	88a3883a 	add	r17,r17,r2
   4bfec:	1804d43a 	srli	r2,r3,16
   4bff0:	1463883a 	add	r17,r2,r17
   4bff4:	84404436 	bltu	r16,r17,4c108 <__udivdi3+0x584>
   4bff8:	84403e26 	beq	r16,r17,4c0f4 <__udivdi3+0x570>
   4bffc:	9005883a 	mov	r2,r18
   4c000:	0007883a 	mov	r3,zero
   4c004:	003f9106 	br	4be4c <_gp+0xffff0724>
   4c008:	88e2983a 	sll	r17,r17,r3
   4c00c:	80aed83a 	srl	r23,r16,r2
   4c010:	80e0983a 	sll	r16,r16,r3
   4c014:	882ad43a 	srli	r21,r17,16
   4c018:	9884d83a 	srl	r2,r19,r2
   4c01c:	b809883a 	mov	r4,r23
   4c020:	a80b883a 	mov	r5,r21
   4c024:	98e4983a 	sll	r18,r19,r3
   4c028:	142cb03a 	or	r22,r2,r16
   4c02c:	004160c0 	call	4160c <__umodsi3>
   4c030:	b809883a 	mov	r4,r23
   4c034:	a80b883a 	mov	r5,r21
   4c038:	1027883a 	mov	r19,r2
   4c03c:	8d3fffcc 	andi	r20,r17,65535
   4c040:	00415a80 	call	415a8 <__udivsi3>
   4c044:	a009883a 	mov	r4,r20
   4c048:	100b883a 	mov	r5,r2
   4c04c:	102f883a 	mov	r23,r2
   4c050:	00416640 	call	41664 <__mulsi3>
   4c054:	9826943a 	slli	r19,r19,16
   4c058:	b008d43a 	srli	r4,r22,16
   4c05c:	24c8b03a 	or	r4,r4,r19
   4c060:	2080062e 	bgeu	r4,r2,4c07c <__udivdi3+0x4f8>
   4c064:	2449883a 	add	r4,r4,r17
   4c068:	b8ffffc4 	addi	r3,r23,-1
   4c06c:	24403c36 	bltu	r4,r17,4c160 <__udivdi3+0x5dc>
   4c070:	20803b2e 	bgeu	r4,r2,4c160 <__udivdi3+0x5dc>
   4c074:	bdffff84 	addi	r23,r23,-2
   4c078:	2449883a 	add	r4,r4,r17
   4c07c:	20a1c83a 	sub	r16,r4,r2
   4c080:	a80b883a 	mov	r5,r21
   4c084:	8009883a 	mov	r4,r16
   4c088:	004160c0 	call	4160c <__umodsi3>
   4c08c:	a80b883a 	mov	r5,r21
   4c090:	8009883a 	mov	r4,r16
   4c094:	1027883a 	mov	r19,r2
   4c098:	00415a80 	call	415a8 <__udivsi3>
   4c09c:	a009883a 	mov	r4,r20
   4c0a0:	100b883a 	mov	r5,r2
   4c0a4:	9826943a 	slli	r19,r19,16
   4c0a8:	1039883a 	mov	fp,r2
   4c0ac:	00416640 	call	41664 <__mulsi3>
   4c0b0:	b13fffcc 	andi	r4,r22,65535
   4c0b4:	24c8b03a 	or	r4,r4,r19
   4c0b8:	2080062e 	bgeu	r4,r2,4c0d4 <__udivdi3+0x550>
   4c0bc:	2449883a 	add	r4,r4,r17
   4c0c0:	e0ffffc4 	addi	r3,fp,-1
   4c0c4:	24402436 	bltu	r4,r17,4c158 <__udivdi3+0x5d4>
   4c0c8:	2080232e 	bgeu	r4,r2,4c158 <__udivdi3+0x5d4>
   4c0cc:	e73fff84 	addi	fp,fp,-2
   4c0d0:	2449883a 	add	r4,r4,r17
   4c0d4:	b82e943a 	slli	r23,r23,16
   4c0d8:	20a1c83a 	sub	r16,r4,r2
   4c0dc:	bf06b03a 	or	r3,r23,fp
   4c0e0:	003f2806 	br	4bd84 <_gp+0xffff065c>
   4c0e4:	2021883a 	mov	r16,r4
   4c0e8:	003f5306 	br	4be38 <_gp+0xffff0710>
   4c0ec:	1821883a 	mov	r16,r3
   4c0f0:	003ef406 	br	4bcc4 <_gp+0xffff059c>
   4c0f4:	1806943a 	slli	r3,r3,16
   4c0f8:	9de6983a 	sll	r19,r19,r23
   4c0fc:	e73fffcc 	andi	fp,fp,65535
   4c100:	1f07883a 	add	r3,r3,fp
   4c104:	98ffbd2e 	bgeu	r19,r3,4bffc <_gp+0xffff08d4>
   4c108:	90bfffc4 	addi	r2,r18,-1
   4c10c:	0007883a 	mov	r3,zero
   4c110:	003f4e06 	br	4be4c <_gp+0xffff0724>
   4c114:	00800604 	movi	r2,24
   4c118:	003ef506 	br	4bcf0 <_gp+0xffff05c8>
   4c11c:	00800604 	movi	r2,24
   4c120:	003f0b06 	br	4bd50 <_gp+0xffff0628>
   4c124:	00800604 	movi	r2,24
   4c128:	003ead06 	br	4bbe0 <_gp+0xffff04b8>
   4c12c:	0007883a 	mov	r3,zero
   4c130:	00800044 	movi	r2,1
   4c134:	003f4506 	br	4be4c <_gp+0xffff0724>
   4c138:	80bf8e2e 	bgeu	r16,r2,4bf74 <_gp+0xffff084c>
   4c13c:	8c7fff84 	addi	r17,r17,-2
   4c140:	8721883a 	add	r16,r16,fp
   4c144:	003f8c06 	br	4bf78 <_gp+0xffff0850>
   4c148:	18bf762e 	bgeu	r3,r2,4bf24 <_gp+0xffff07fc>
   4c14c:	ad7fff84 	addi	r21,r21,-2
   4c150:	1f07883a 	add	r3,r3,fp
   4c154:	003f7406 	br	4bf28 <_gp+0xffff0800>
   4c158:	1839883a 	mov	fp,r3
   4c15c:	003fdd06 	br	4c0d4 <_gp+0xffff09ac>
   4c160:	182f883a 	mov	r23,r3
   4c164:	003fc506 	br	4c07c <_gp+0xffff0954>
   4c168:	b5bfff84 	addi	r22,r22,-2
   4c16c:	3c4f883a 	add	r7,r7,r17
   4c170:	003f1a06 	br	4bddc <_gp+0xffff06b4>
   4c174:	b5bfff84 	addi	r22,r22,-2
   4c178:	1c47883a 	add	r3,r3,r17
   4c17c:	003ebc06 	br	4bc70 <_gp+0xffff0548>

0004c180 <__umoddi3>:
   4c180:	defff304 	addi	sp,sp,-52
   4c184:	df000b15 	stw	fp,44(sp)
   4c188:	dc400415 	stw	r17,16(sp)
   4c18c:	dc000315 	stw	r16,12(sp)
   4c190:	dfc00c15 	stw	ra,48(sp)
   4c194:	ddc00a15 	stw	r23,40(sp)
   4c198:	dd800915 	stw	r22,36(sp)
   4c19c:	dd400815 	stw	r21,32(sp)
   4c1a0:	dd000715 	stw	r20,28(sp)
   4c1a4:	dcc00615 	stw	r19,24(sp)
   4c1a8:	dc800515 	stw	r18,20(sp)
   4c1ac:	2021883a 	mov	r16,r4
   4c1b0:	2823883a 	mov	r17,r5
   4c1b4:	2839883a 	mov	fp,r5
   4c1b8:	3800401e 	bne	r7,zero,4c2bc <__umoddi3+0x13c>
   4c1bc:	3027883a 	mov	r19,r6
   4c1c0:	2029883a 	mov	r20,r4
   4c1c4:	2980552e 	bgeu	r5,r6,4c31c <__umoddi3+0x19c>
   4c1c8:	00bfffd4 	movui	r2,65535
   4c1cc:	1180a236 	bltu	r2,r6,4c458 <__umoddi3+0x2d8>
   4c1d0:	01003fc4 	movi	r4,255
   4c1d4:	2189803a 	cmpltu	r4,r4,r6
   4c1d8:	200890fa 	slli	r4,r4,3
   4c1dc:	3104d83a 	srl	r2,r6,r4
   4c1e0:	00c00174 	movhi	r3,5
   4c1e4:	18c62b04 	addi	r3,r3,6316
   4c1e8:	1885883a 	add	r2,r3,r2
   4c1ec:	10c00003 	ldbu	r3,0(r2)
   4c1f0:	00800804 	movi	r2,32
   4c1f4:	1909883a 	add	r4,r3,r4
   4c1f8:	1125c83a 	sub	r18,r2,r4
   4c1fc:	90000526 	beq	r18,zero,4c214 <__umoddi3+0x94>
   4c200:	8ca2983a 	sll	r17,r17,r18
   4c204:	8108d83a 	srl	r4,r16,r4
   4c208:	34a6983a 	sll	r19,r6,r18
   4c20c:	84a8983a 	sll	r20,r16,r18
   4c210:	2478b03a 	or	fp,r4,r17
   4c214:	982cd43a 	srli	r22,r19,16
   4c218:	e009883a 	mov	r4,fp
   4c21c:	9dffffcc 	andi	r23,r19,65535
   4c220:	b00b883a 	mov	r5,r22
   4c224:	004160c0 	call	4160c <__umodsi3>
   4c228:	b00b883a 	mov	r5,r22
   4c22c:	e009883a 	mov	r4,fp
   4c230:	102b883a 	mov	r21,r2
   4c234:	00415a80 	call	415a8 <__udivsi3>
   4c238:	100b883a 	mov	r5,r2
   4c23c:	b809883a 	mov	r4,r23
   4c240:	00416640 	call	41664 <__mulsi3>
   4c244:	a82a943a 	slli	r21,r21,16
   4c248:	a006d43a 	srli	r3,r20,16
   4c24c:	1d46b03a 	or	r3,r3,r21
   4c250:	1880032e 	bgeu	r3,r2,4c260 <__umoddi3+0xe0>
   4c254:	1cc7883a 	add	r3,r3,r19
   4c258:	1cc00136 	bltu	r3,r19,4c260 <__umoddi3+0xe0>
   4c25c:	18813136 	bltu	r3,r2,4c724 <__umoddi3+0x5a4>
   4c260:	18a1c83a 	sub	r16,r3,r2
   4c264:	b00b883a 	mov	r5,r22
   4c268:	8009883a 	mov	r4,r16
   4c26c:	004160c0 	call	4160c <__umodsi3>
   4c270:	b00b883a 	mov	r5,r22
   4c274:	8009883a 	mov	r4,r16
   4c278:	1023883a 	mov	r17,r2
   4c27c:	00415a80 	call	415a8 <__udivsi3>
   4c280:	100b883a 	mov	r5,r2
   4c284:	b809883a 	mov	r4,r23
   4c288:	8822943a 	slli	r17,r17,16
   4c28c:	00416640 	call	41664 <__mulsi3>
   4c290:	a0ffffcc 	andi	r3,r20,65535
   4c294:	1c46b03a 	or	r3,r3,r17
   4c298:	1880042e 	bgeu	r3,r2,4c2ac <__umoddi3+0x12c>
   4c29c:	1cc7883a 	add	r3,r3,r19
   4c2a0:	1cc00236 	bltu	r3,r19,4c2ac <__umoddi3+0x12c>
   4c2a4:	1880012e 	bgeu	r3,r2,4c2ac <__umoddi3+0x12c>
   4c2a8:	1cc7883a 	add	r3,r3,r19
   4c2ac:	1885c83a 	sub	r2,r3,r2
   4c2b0:	1484d83a 	srl	r2,r2,r18
   4c2b4:	0007883a 	mov	r3,zero
   4c2b8:	00005306 	br	4c408 <__umoddi3+0x288>
   4c2bc:	29c05036 	bltu	r5,r7,4c400 <__umoddi3+0x280>
   4c2c0:	00bfffd4 	movui	r2,65535
   4c2c4:	11c05c2e 	bgeu	r2,r7,4c438 <__umoddi3+0x2b8>
   4c2c8:	00804034 	movhi	r2,256
   4c2cc:	10bfffc4 	addi	r2,r2,-1
   4c2d0:	11c10636 	bltu	r2,r7,4c6ec <__umoddi3+0x56c>
   4c2d4:	01000404 	movi	r4,16
   4c2d8:	3904d83a 	srl	r2,r7,r4
   4c2dc:	00c00174 	movhi	r3,5
   4c2e0:	18c62b04 	addi	r3,r3,6316
   4c2e4:	1885883a 	add	r2,r3,r2
   4c2e8:	14c00003 	ldbu	r19,0(r2)
   4c2ec:	00c00804 	movi	r3,32
   4c2f0:	9927883a 	add	r19,r19,r4
   4c2f4:	1ce9c83a 	sub	r20,r3,r19
   4c2f8:	a0005c1e 	bne	r20,zero,4c46c <__umoddi3+0x2ec>
   4c2fc:	3c400136 	bltu	r7,r17,4c304 <__umoddi3+0x184>
   4c300:	81810a36 	bltu	r16,r6,4c72c <__umoddi3+0x5ac>
   4c304:	8185c83a 	sub	r2,r16,r6
   4c308:	89e3c83a 	sub	r17,r17,r7
   4c30c:	8089803a 	cmpltu	r4,r16,r2
   4c310:	8939c83a 	sub	fp,r17,r4
   4c314:	e007883a 	mov	r3,fp
   4c318:	00003b06 	br	4c408 <__umoddi3+0x288>
   4c31c:	3000041e 	bne	r6,zero,4c330 <__umoddi3+0x1b0>
   4c320:	000b883a 	mov	r5,zero
   4c324:	01000044 	movi	r4,1
   4c328:	00415a80 	call	415a8 <__udivsi3>
   4c32c:	1027883a 	mov	r19,r2
   4c330:	00bfffd4 	movui	r2,65535
   4c334:	14c0442e 	bgeu	r2,r19,4c448 <__umoddi3+0x2c8>
   4c338:	00804034 	movhi	r2,256
   4c33c:	10bfffc4 	addi	r2,r2,-1
   4c340:	14c0ec36 	bltu	r2,r19,4c6f4 <__umoddi3+0x574>
   4c344:	00800404 	movi	r2,16
   4c348:	9886d83a 	srl	r3,r19,r2
   4c34c:	01000174 	movhi	r4,5
   4c350:	21062b04 	addi	r4,r4,6316
   4c354:	20c7883a 	add	r3,r4,r3
   4c358:	18c00003 	ldbu	r3,0(r3)
   4c35c:	1887883a 	add	r3,r3,r2
   4c360:	00800804 	movi	r2,32
   4c364:	10e5c83a 	sub	r18,r2,r3
   4c368:	9000ab1e 	bne	r18,zero,4c618 <__umoddi3+0x498>
   4c36c:	982cd43a 	srli	r22,r19,16
   4c370:	8ce3c83a 	sub	r17,r17,r19
   4c374:	9dffffcc 	andi	r23,r19,65535
   4c378:	b00b883a 	mov	r5,r22
   4c37c:	8809883a 	mov	r4,r17
   4c380:	004160c0 	call	4160c <__umodsi3>
   4c384:	b00b883a 	mov	r5,r22
   4c388:	8809883a 	mov	r4,r17
   4c38c:	102b883a 	mov	r21,r2
   4c390:	00415a80 	call	415a8 <__udivsi3>
   4c394:	b80b883a 	mov	r5,r23
   4c398:	1009883a 	mov	r4,r2
   4c39c:	00416640 	call	41664 <__mulsi3>
   4c3a0:	a82a943a 	slli	r21,r21,16
   4c3a4:	a006d43a 	srli	r3,r20,16
   4c3a8:	1d46b03a 	or	r3,r3,r21
   4c3ac:	1880042e 	bgeu	r3,r2,4c3c0 <__umoddi3+0x240>
   4c3b0:	1cc7883a 	add	r3,r3,r19
   4c3b4:	1cc00236 	bltu	r3,r19,4c3c0 <__umoddi3+0x240>
   4c3b8:	1880012e 	bgeu	r3,r2,4c3c0 <__umoddi3+0x240>
   4c3bc:	1cc7883a 	add	r3,r3,r19
   4c3c0:	18a1c83a 	sub	r16,r3,r2
   4c3c4:	b00b883a 	mov	r5,r22
   4c3c8:	8009883a 	mov	r4,r16
   4c3cc:	004160c0 	call	4160c <__umodsi3>
   4c3d0:	1023883a 	mov	r17,r2
   4c3d4:	b00b883a 	mov	r5,r22
   4c3d8:	8009883a 	mov	r4,r16
   4c3dc:	00415a80 	call	415a8 <__udivsi3>
   4c3e0:	8822943a 	slli	r17,r17,16
   4c3e4:	b80b883a 	mov	r5,r23
   4c3e8:	1009883a 	mov	r4,r2
   4c3ec:	00416640 	call	41664 <__mulsi3>
   4c3f0:	a53fffcc 	andi	r20,r20,65535
   4c3f4:	a446b03a 	or	r3,r20,r17
   4c3f8:	18bfac2e 	bgeu	r3,r2,4c2ac <_gp+0xffff0b84>
   4c3fc:	003fa706 	br	4c29c <_gp+0xffff0b74>
   4c400:	2005883a 	mov	r2,r4
   4c404:	2807883a 	mov	r3,r5
   4c408:	dfc00c17 	ldw	ra,48(sp)
   4c40c:	df000b17 	ldw	fp,44(sp)
   4c410:	ddc00a17 	ldw	r23,40(sp)
   4c414:	dd800917 	ldw	r22,36(sp)
   4c418:	dd400817 	ldw	r21,32(sp)
   4c41c:	dd000717 	ldw	r20,28(sp)
   4c420:	dcc00617 	ldw	r19,24(sp)
   4c424:	dc800517 	ldw	r18,20(sp)
   4c428:	dc400417 	ldw	r17,16(sp)
   4c42c:	dc000317 	ldw	r16,12(sp)
   4c430:	dec00d04 	addi	sp,sp,52
   4c434:	f800283a 	ret
   4c438:	04c03fc4 	movi	r19,255
   4c43c:	99c9803a 	cmpltu	r4,r19,r7
   4c440:	200890fa 	slli	r4,r4,3
   4c444:	003fa406 	br	4c2d8 <_gp+0xffff0bb0>
   4c448:	00803fc4 	movi	r2,255
   4c44c:	14c5803a 	cmpltu	r2,r2,r19
   4c450:	100490fa 	slli	r2,r2,3
   4c454:	003fbc06 	br	4c348 <_gp+0xffff0c20>
   4c458:	00804034 	movhi	r2,256
   4c45c:	10bfffc4 	addi	r2,r2,-1
   4c460:	1180a636 	bltu	r2,r6,4c6fc <__umoddi3+0x57c>
   4c464:	01000404 	movi	r4,16
   4c468:	003f5c06 	br	4c1dc <_gp+0xffff0ab4>
   4c46c:	3d0e983a 	sll	r7,r7,r20
   4c470:	34ead83a 	srl	r21,r6,r19
   4c474:	8cc6d83a 	srl	r3,r17,r19
   4c478:	8d10983a 	sll	r8,r17,r20
   4c47c:	3d6ab03a 	or	r21,r7,r21
   4c480:	a82cd43a 	srli	r22,r21,16
   4c484:	84e2d83a 	srl	r17,r16,r19
   4c488:	1809883a 	mov	r4,r3
   4c48c:	b00b883a 	mov	r5,r22
   4c490:	8a22b03a 	or	r17,r17,r8
   4c494:	3524983a 	sll	r18,r6,r20
   4c498:	dc400015 	stw	r17,0(sp)
   4c49c:	d8c00115 	stw	r3,4(sp)
   4c4a0:	004160c0 	call	4160c <__umodsi3>
   4c4a4:	d8c00117 	ldw	r3,4(sp)
   4c4a8:	b00b883a 	mov	r5,r22
   4c4ac:	1039883a 	mov	fp,r2
   4c4b0:	1809883a 	mov	r4,r3
   4c4b4:	00415a80 	call	415a8 <__udivsi3>
   4c4b8:	adffffcc 	andi	r23,r21,65535
   4c4bc:	100b883a 	mov	r5,r2
   4c4c0:	b809883a 	mov	r4,r23
   4c4c4:	1023883a 	mov	r17,r2
   4c4c8:	00416640 	call	41664 <__mulsi3>
   4c4cc:	d9400017 	ldw	r5,0(sp)
   4c4d0:	e008943a 	slli	r4,fp,16
   4c4d4:	8520983a 	sll	r16,r16,r20
   4c4d8:	2806d43a 	srli	r3,r5,16
   4c4dc:	1906b03a 	or	r3,r3,r4
   4c4e0:	1880042e 	bgeu	r3,r2,4c4f4 <__umoddi3+0x374>
   4c4e4:	1d47883a 	add	r3,r3,r21
   4c4e8:	893fffc4 	addi	r4,r17,-1
   4c4ec:	1d40892e 	bgeu	r3,r21,4c714 <__umoddi3+0x594>
   4c4f0:	2023883a 	mov	r17,r4
   4c4f4:	18b9c83a 	sub	fp,r3,r2
   4c4f8:	b00b883a 	mov	r5,r22
   4c4fc:	e009883a 	mov	r4,fp
   4c500:	004160c0 	call	4160c <__umodsi3>
   4c504:	b00b883a 	mov	r5,r22
   4c508:	e009883a 	mov	r4,fp
   4c50c:	d8800215 	stw	r2,8(sp)
   4c510:	00415a80 	call	415a8 <__udivsi3>
   4c514:	100b883a 	mov	r5,r2
   4c518:	b809883a 	mov	r4,r23
   4c51c:	102d883a 	mov	r22,r2
   4c520:	00416640 	call	41664 <__mulsi3>
   4c524:	d9800217 	ldw	r6,8(sp)
   4c528:	d8c00017 	ldw	r3,0(sp)
   4c52c:	300c943a 	slli	r6,r6,16
   4c530:	1a3fffcc 	andi	r8,r3,65535
   4c534:	4190b03a 	or	r8,r8,r6
   4c538:	4080042e 	bgeu	r8,r2,4c54c <__umoddi3+0x3cc>
   4c53c:	4551883a 	add	r8,r8,r21
   4c540:	b0ffffc4 	addi	r3,r22,-1
   4c544:	45406f2e 	bgeu	r8,r21,4c704 <__umoddi3+0x584>
   4c548:	182d883a 	mov	r22,r3
   4c54c:	880e943a 	slli	r7,r17,16
   4c550:	9006d43a 	srli	r3,r18,16
   4c554:	91bfffcc 	andi	r6,r18,65535
   4c558:	3dacb03a 	or	r22,r7,r22
   4c55c:	b02ed43a 	srli	r23,r22,16
   4c560:	b5bfffcc 	andi	r22,r22,65535
   4c564:	300b883a 	mov	r5,r6
   4c568:	b009883a 	mov	r4,r22
   4c56c:	40a3c83a 	sub	r17,r8,r2
   4c570:	d8c00115 	stw	r3,4(sp)
   4c574:	d9800215 	stw	r6,8(sp)
   4c578:	00416640 	call	41664 <__mulsi3>
   4c57c:	d9800217 	ldw	r6,8(sp)
   4c580:	b809883a 	mov	r4,r23
   4c584:	1039883a 	mov	fp,r2
   4c588:	300b883a 	mov	r5,r6
   4c58c:	00416640 	call	41664 <__mulsi3>
   4c590:	d8c00117 	ldw	r3,4(sp)
   4c594:	b809883a 	mov	r4,r23
   4c598:	d8800215 	stw	r2,8(sp)
   4c59c:	180b883a 	mov	r5,r3
   4c5a0:	00416640 	call	41664 <__mulsi3>
   4c5a4:	d8c00117 	ldw	r3,4(sp)
   4c5a8:	b009883a 	mov	r4,r22
   4c5ac:	102f883a 	mov	r23,r2
   4c5b0:	180b883a 	mov	r5,r3
   4c5b4:	00416640 	call	41664 <__mulsi3>
   4c5b8:	d9800217 	ldw	r6,8(sp)
   4c5bc:	e006d43a 	srli	r3,fp,16
   4c5c0:	1185883a 	add	r2,r2,r6
   4c5c4:	1885883a 	add	r2,r3,r2
   4c5c8:	1180022e 	bgeu	r2,r6,4c5d4 <__umoddi3+0x454>
   4c5cc:	00c00074 	movhi	r3,1
   4c5d0:	b8ef883a 	add	r23,r23,r3
   4c5d4:	1006d43a 	srli	r3,r2,16
   4c5d8:	1004943a 	slli	r2,r2,16
   4c5dc:	e73fffcc 	andi	fp,fp,65535
   4c5e0:	1dc7883a 	add	r3,r3,r23
   4c5e4:	1739883a 	add	fp,r2,fp
   4c5e8:	88c03a36 	bltu	r17,r3,4c6d4 <__umoddi3+0x554>
   4c5ec:	88c05126 	beq	r17,r3,4c734 <__umoddi3+0x5b4>
   4c5f0:	88c9c83a 	sub	r4,r17,r3
   4c5f4:	e00f883a 	mov	r7,fp
   4c5f8:	81cfc83a 	sub	r7,r16,r7
   4c5fc:	81c7803a 	cmpltu	r3,r16,r7
   4c600:	20c7c83a 	sub	r3,r4,r3
   4c604:	1cc4983a 	sll	r2,r3,r19
   4c608:	3d0ed83a 	srl	r7,r7,r20
   4c60c:	1d06d83a 	srl	r3,r3,r20
   4c610:	11c4b03a 	or	r2,r2,r7
   4c614:	003f7c06 	br	4c408 <_gp+0xffff0ce0>
   4c618:	9ca6983a 	sll	r19,r19,r18
   4c61c:	88f8d83a 	srl	fp,r17,r3
   4c620:	80c4d83a 	srl	r2,r16,r3
   4c624:	982cd43a 	srli	r22,r19,16
   4c628:	8ca2983a 	sll	r17,r17,r18
   4c62c:	e009883a 	mov	r4,fp
   4c630:	b00b883a 	mov	r5,r22
   4c634:	146ab03a 	or	r21,r2,r17
   4c638:	004160c0 	call	4160c <__umodsi3>
   4c63c:	b00b883a 	mov	r5,r22
   4c640:	e009883a 	mov	r4,fp
   4c644:	1029883a 	mov	r20,r2
   4c648:	9dffffcc 	andi	r23,r19,65535
   4c64c:	00415a80 	call	415a8 <__udivsi3>
   4c650:	b809883a 	mov	r4,r23
   4c654:	100b883a 	mov	r5,r2
   4c658:	00416640 	call	41664 <__mulsi3>
   4c65c:	a008943a 	slli	r4,r20,16
   4c660:	a806d43a 	srli	r3,r21,16
   4c664:	84a8983a 	sll	r20,r16,r18
   4c668:	1906b03a 	or	r3,r3,r4
   4c66c:	1880042e 	bgeu	r3,r2,4c680 <__umoddi3+0x500>
   4c670:	1cc7883a 	add	r3,r3,r19
   4c674:	1cc00236 	bltu	r3,r19,4c680 <__umoddi3+0x500>
   4c678:	1880012e 	bgeu	r3,r2,4c680 <__umoddi3+0x500>
   4c67c:	1cc7883a 	add	r3,r3,r19
   4c680:	18a3c83a 	sub	r17,r3,r2
   4c684:	b00b883a 	mov	r5,r22
   4c688:	8809883a 	mov	r4,r17
   4c68c:	004160c0 	call	4160c <__umodsi3>
   4c690:	b00b883a 	mov	r5,r22
   4c694:	8809883a 	mov	r4,r17
   4c698:	1021883a 	mov	r16,r2
   4c69c:	00415a80 	call	415a8 <__udivsi3>
   4c6a0:	100b883a 	mov	r5,r2
   4c6a4:	b809883a 	mov	r4,r23
   4c6a8:	8020943a 	slli	r16,r16,16
   4c6ac:	00416640 	call	41664 <__mulsi3>
   4c6b0:	a8ffffcc 	andi	r3,r21,65535
   4c6b4:	1c06b03a 	or	r3,r3,r16
   4c6b8:	1880042e 	bgeu	r3,r2,4c6cc <__umoddi3+0x54c>
   4c6bc:	1cc7883a 	add	r3,r3,r19
   4c6c0:	1cc00236 	bltu	r3,r19,4c6cc <__umoddi3+0x54c>
   4c6c4:	1880012e 	bgeu	r3,r2,4c6cc <__umoddi3+0x54c>
   4c6c8:	1cc7883a 	add	r3,r3,r19
   4c6cc:	18a3c83a 	sub	r17,r3,r2
   4c6d0:	003f2906 	br	4c378 <_gp+0xffff0c50>
   4c6d4:	e48fc83a 	sub	r7,fp,r18
   4c6d8:	1d49c83a 	sub	r4,r3,r21
   4c6dc:	e1f9803a 	cmpltu	fp,fp,r7
   4c6e0:	2739c83a 	sub	fp,r4,fp
   4c6e4:	8f09c83a 	sub	r4,r17,fp
   4c6e8:	003fc306 	br	4c5f8 <_gp+0xffff0ed0>
   4c6ec:	01000604 	movi	r4,24
   4c6f0:	003ef906 	br	4c2d8 <_gp+0xffff0bb0>
   4c6f4:	00800604 	movi	r2,24
   4c6f8:	003f1306 	br	4c348 <_gp+0xffff0c20>
   4c6fc:	01000604 	movi	r4,24
   4c700:	003eb606 	br	4c1dc <_gp+0xffff0ab4>
   4c704:	40bf902e 	bgeu	r8,r2,4c548 <_gp+0xffff0e20>
   4c708:	b5bfff84 	addi	r22,r22,-2
   4c70c:	4551883a 	add	r8,r8,r21
   4c710:	003f8e06 	br	4c54c <_gp+0xffff0e24>
   4c714:	18bf762e 	bgeu	r3,r2,4c4f0 <_gp+0xffff0dc8>
   4c718:	8c7fff84 	addi	r17,r17,-2
   4c71c:	1d47883a 	add	r3,r3,r21
   4c720:	003f7406 	br	4c4f4 <_gp+0xffff0dcc>
   4c724:	1cc7883a 	add	r3,r3,r19
   4c728:	003ecd06 	br	4c260 <_gp+0xffff0b38>
   4c72c:	8005883a 	mov	r2,r16
   4c730:	003ef806 	br	4c314 <_gp+0xffff0bec>
   4c734:	873fe736 	bltu	r16,fp,4c6d4 <_gp+0xffff0fac>
   4c738:	e00f883a 	mov	r7,fp
   4c73c:	0009883a 	mov	r4,zero
   4c740:	003fad06 	br	4c5f8 <_gp+0xffff0ed0>

0004c744 <__adddf3>:
   4c744:	02c00434 	movhi	r11,16
   4c748:	5affffc4 	addi	r11,r11,-1
   4c74c:	2806d7fa 	srli	r3,r5,31
   4c750:	2ad4703a 	and	r10,r5,r11
   4c754:	3ad2703a 	and	r9,r7,r11
   4c758:	3804d53a 	srli	r2,r7,20
   4c75c:	3018d77a 	srli	r12,r6,29
   4c760:	280ad53a 	srli	r5,r5,20
   4c764:	501490fa 	slli	r10,r10,3
   4c768:	2010d77a 	srli	r8,r4,29
   4c76c:	481290fa 	slli	r9,r9,3
   4c770:	380ed7fa 	srli	r7,r7,31
   4c774:	defffb04 	addi	sp,sp,-20
   4c778:	dc800215 	stw	r18,8(sp)
   4c77c:	dc400115 	stw	r17,4(sp)
   4c780:	dc000015 	stw	r16,0(sp)
   4c784:	dfc00415 	stw	ra,16(sp)
   4c788:	dcc00315 	stw	r19,12(sp)
   4c78c:	1c803fcc 	andi	r18,r3,255
   4c790:	2c01ffcc 	andi	r16,r5,2047
   4c794:	5210b03a 	or	r8,r10,r8
   4c798:	202290fa 	slli	r17,r4,3
   4c79c:	1081ffcc 	andi	r2,r2,2047
   4c7a0:	4b12b03a 	or	r9,r9,r12
   4c7a4:	300c90fa 	slli	r6,r6,3
   4c7a8:	91c07526 	beq	r18,r7,4c980 <__adddf3+0x23c>
   4c7ac:	8087c83a 	sub	r3,r16,r2
   4c7b0:	00c0ab0e 	bge	zero,r3,4ca60 <__adddf3+0x31c>
   4c7b4:	10002a1e 	bne	r2,zero,4c860 <__adddf3+0x11c>
   4c7b8:	4984b03a 	or	r2,r9,r6
   4c7bc:	1000961e 	bne	r2,zero,4ca18 <__adddf3+0x2d4>
   4c7c0:	888001cc 	andi	r2,r17,7
   4c7c4:	10000726 	beq	r2,zero,4c7e4 <__adddf3+0xa0>
   4c7c8:	888003cc 	andi	r2,r17,15
   4c7cc:	00c00104 	movi	r3,4
   4c7d0:	10c00426 	beq	r2,r3,4c7e4 <__adddf3+0xa0>
   4c7d4:	88c7883a 	add	r3,r17,r3
   4c7d8:	1c63803a 	cmpltu	r17,r3,r17
   4c7dc:	4451883a 	add	r8,r8,r17
   4c7e0:	1823883a 	mov	r17,r3
   4c7e4:	4080202c 	andhi	r2,r8,128
   4c7e8:	10005926 	beq	r2,zero,4c950 <__adddf3+0x20c>
   4c7ec:	84000044 	addi	r16,r16,1
   4c7f0:	0081ffc4 	movi	r2,2047
   4c7f4:	8080ba26 	beq	r16,r2,4cae0 <__adddf3+0x39c>
   4c7f8:	00bfe034 	movhi	r2,65408
   4c7fc:	10bfffc4 	addi	r2,r2,-1
   4c800:	4090703a 	and	r8,r8,r2
   4c804:	4004977a 	slli	r2,r8,29
   4c808:	4010927a 	slli	r8,r8,9
   4c80c:	8822d0fa 	srli	r17,r17,3
   4c810:	8401ffcc 	andi	r16,r16,2047
   4c814:	4010d33a 	srli	r8,r8,12
   4c818:	9007883a 	mov	r3,r18
   4c81c:	1444b03a 	or	r2,r2,r17
   4c820:	8401ffcc 	andi	r16,r16,2047
   4c824:	8020953a 	slli	r16,r16,20
   4c828:	18c03fcc 	andi	r3,r3,255
   4c82c:	01000434 	movhi	r4,16
   4c830:	213fffc4 	addi	r4,r4,-1
   4c834:	180697fa 	slli	r3,r3,31
   4c838:	4110703a 	and	r8,r8,r4
   4c83c:	4410b03a 	or	r8,r8,r16
   4c840:	40c6b03a 	or	r3,r8,r3
   4c844:	dfc00417 	ldw	ra,16(sp)
   4c848:	dcc00317 	ldw	r19,12(sp)
   4c84c:	dc800217 	ldw	r18,8(sp)
   4c850:	dc400117 	ldw	r17,4(sp)
   4c854:	dc000017 	ldw	r16,0(sp)
   4c858:	dec00504 	addi	sp,sp,20
   4c85c:	f800283a 	ret
   4c860:	0081ffc4 	movi	r2,2047
   4c864:	80bfd626 	beq	r16,r2,4c7c0 <_gp+0xffff1098>
   4c868:	4a402034 	orhi	r9,r9,128
   4c86c:	00800e04 	movi	r2,56
   4c870:	10c09f16 	blt	r2,r3,4caf0 <__adddf3+0x3ac>
   4c874:	008007c4 	movi	r2,31
   4c878:	10c0c216 	blt	r2,r3,4cb84 <__adddf3+0x440>
   4c87c:	00800804 	movi	r2,32
   4c880:	10c5c83a 	sub	r2,r2,r3
   4c884:	488a983a 	sll	r5,r9,r2
   4c888:	30c8d83a 	srl	r4,r6,r3
   4c88c:	3084983a 	sll	r2,r6,r2
   4c890:	48c6d83a 	srl	r3,r9,r3
   4c894:	290cb03a 	or	r6,r5,r4
   4c898:	1004c03a 	cmpne	r2,r2,zero
   4c89c:	308cb03a 	or	r6,r6,r2
   4c8a0:	898dc83a 	sub	r6,r17,r6
   4c8a4:	89a3803a 	cmpltu	r17,r17,r6
   4c8a8:	40d1c83a 	sub	r8,r8,r3
   4c8ac:	4451c83a 	sub	r8,r8,r17
   4c8b0:	3023883a 	mov	r17,r6
   4c8b4:	4080202c 	andhi	r2,r8,128
   4c8b8:	10002326 	beq	r2,zero,4c948 <__adddf3+0x204>
   4c8bc:	04c02034 	movhi	r19,128
   4c8c0:	9cffffc4 	addi	r19,r19,-1
   4c8c4:	44e6703a 	and	r19,r8,r19
   4c8c8:	98007626 	beq	r19,zero,4caa4 <__adddf3+0x360>
   4c8cc:	9809883a 	mov	r4,r19
   4c8d0:	004144c0 	call	4144c <__clzsi2>
   4c8d4:	10fffe04 	addi	r3,r2,-8
   4c8d8:	010007c4 	movi	r4,31
   4c8dc:	20c07716 	blt	r4,r3,4cabc <__adddf3+0x378>
   4c8e0:	00800804 	movi	r2,32
   4c8e4:	10c5c83a 	sub	r2,r2,r3
   4c8e8:	8884d83a 	srl	r2,r17,r2
   4c8ec:	98d0983a 	sll	r8,r19,r3
   4c8f0:	88e2983a 	sll	r17,r17,r3
   4c8f4:	1204b03a 	or	r2,r2,r8
   4c8f8:	1c007416 	blt	r3,r16,4cacc <__adddf3+0x388>
   4c8fc:	1c21c83a 	sub	r16,r3,r16
   4c900:	82000044 	addi	r8,r16,1
   4c904:	00c007c4 	movi	r3,31
   4c908:	1a009116 	blt	r3,r8,4cb50 <__adddf3+0x40c>
   4c90c:	00c00804 	movi	r3,32
   4c910:	1a07c83a 	sub	r3,r3,r8
   4c914:	8a08d83a 	srl	r4,r17,r8
   4c918:	88e2983a 	sll	r17,r17,r3
   4c91c:	10c6983a 	sll	r3,r2,r3
   4c920:	1210d83a 	srl	r8,r2,r8
   4c924:	8804c03a 	cmpne	r2,r17,zero
   4c928:	1906b03a 	or	r3,r3,r4
   4c92c:	18a2b03a 	or	r17,r3,r2
   4c930:	0021883a 	mov	r16,zero
   4c934:	003fa206 	br	4c7c0 <_gp+0xffff1098>
   4c938:	1890b03a 	or	r8,r3,r2
   4c93c:	40017d26 	beq	r8,zero,4cf34 <__adddf3+0x7f0>
   4c940:	1011883a 	mov	r8,r2
   4c944:	1823883a 	mov	r17,r3
   4c948:	888001cc 	andi	r2,r17,7
   4c94c:	103f9e1e 	bne	r2,zero,4c7c8 <_gp+0xffff10a0>
   4c950:	4004977a 	slli	r2,r8,29
   4c954:	8822d0fa 	srli	r17,r17,3
   4c958:	4010d0fa 	srli	r8,r8,3
   4c95c:	9007883a 	mov	r3,r18
   4c960:	1444b03a 	or	r2,r2,r17
   4c964:	0101ffc4 	movi	r4,2047
   4c968:	81002426 	beq	r16,r4,4c9fc <__adddf3+0x2b8>
   4c96c:	8120703a 	and	r16,r16,r4
   4c970:	01000434 	movhi	r4,16
   4c974:	213fffc4 	addi	r4,r4,-1
   4c978:	4110703a 	and	r8,r8,r4
   4c97c:	003fa806 	br	4c820 <_gp+0xffff10f8>
   4c980:	8089c83a 	sub	r4,r16,r2
   4c984:	01005e0e 	bge	zero,r4,4cb00 <__adddf3+0x3bc>
   4c988:	10002b26 	beq	r2,zero,4ca38 <__adddf3+0x2f4>
   4c98c:	0081ffc4 	movi	r2,2047
   4c990:	80bf8b26 	beq	r16,r2,4c7c0 <_gp+0xffff1098>
   4c994:	4a402034 	orhi	r9,r9,128
   4c998:	00800e04 	movi	r2,56
   4c99c:	1100a40e 	bge	r2,r4,4cc30 <__adddf3+0x4ec>
   4c9a0:	498cb03a 	or	r6,r9,r6
   4c9a4:	300ac03a 	cmpne	r5,r6,zero
   4c9a8:	0013883a 	mov	r9,zero
   4c9ac:	2c4b883a 	add	r5,r5,r17
   4c9b0:	2c63803a 	cmpltu	r17,r5,r17
   4c9b4:	4a11883a 	add	r8,r9,r8
   4c9b8:	8a11883a 	add	r8,r17,r8
   4c9bc:	2823883a 	mov	r17,r5
   4c9c0:	4080202c 	andhi	r2,r8,128
   4c9c4:	103fe026 	beq	r2,zero,4c948 <_gp+0xffff1220>
   4c9c8:	84000044 	addi	r16,r16,1
   4c9cc:	0081ffc4 	movi	r2,2047
   4c9d0:	8080d226 	beq	r16,r2,4cd1c <__adddf3+0x5d8>
   4c9d4:	00bfe034 	movhi	r2,65408
   4c9d8:	10bfffc4 	addi	r2,r2,-1
   4c9dc:	4090703a 	and	r8,r8,r2
   4c9e0:	880ad07a 	srli	r5,r17,1
   4c9e4:	400897fa 	slli	r4,r8,31
   4c9e8:	88c0004c 	andi	r3,r17,1
   4c9ec:	28e2b03a 	or	r17,r5,r3
   4c9f0:	4010d07a 	srli	r8,r8,1
   4c9f4:	2462b03a 	or	r17,r4,r17
   4c9f8:	003f7106 	br	4c7c0 <_gp+0xffff1098>
   4c9fc:	4088b03a 	or	r4,r8,r2
   4ca00:	20014526 	beq	r4,zero,4cf18 <__adddf3+0x7d4>
   4ca04:	01000434 	movhi	r4,16
   4ca08:	42000234 	orhi	r8,r8,8
   4ca0c:	213fffc4 	addi	r4,r4,-1
   4ca10:	4110703a 	and	r8,r8,r4
   4ca14:	003f8206 	br	4c820 <_gp+0xffff10f8>
   4ca18:	18ffffc4 	addi	r3,r3,-1
   4ca1c:	1800491e 	bne	r3,zero,4cb44 <__adddf3+0x400>
   4ca20:	898bc83a 	sub	r5,r17,r6
   4ca24:	8963803a 	cmpltu	r17,r17,r5
   4ca28:	4251c83a 	sub	r8,r8,r9
   4ca2c:	4451c83a 	sub	r8,r8,r17
   4ca30:	2823883a 	mov	r17,r5
   4ca34:	003f9f06 	br	4c8b4 <_gp+0xffff118c>
   4ca38:	4984b03a 	or	r2,r9,r6
   4ca3c:	103f6026 	beq	r2,zero,4c7c0 <_gp+0xffff1098>
   4ca40:	213fffc4 	addi	r4,r4,-1
   4ca44:	2000931e 	bne	r4,zero,4cc94 <__adddf3+0x550>
   4ca48:	898d883a 	add	r6,r17,r6
   4ca4c:	3463803a 	cmpltu	r17,r6,r17
   4ca50:	4251883a 	add	r8,r8,r9
   4ca54:	8a11883a 	add	r8,r17,r8
   4ca58:	3023883a 	mov	r17,r6
   4ca5c:	003fd806 	br	4c9c0 <_gp+0xffff1298>
   4ca60:	1800541e 	bne	r3,zero,4cbb4 <__adddf3+0x470>
   4ca64:	80800044 	addi	r2,r16,1
   4ca68:	1081ffcc 	andi	r2,r2,2047
   4ca6c:	00c00044 	movi	r3,1
   4ca70:	1880a00e 	bge	r3,r2,4ccf4 <__adddf3+0x5b0>
   4ca74:	8989c83a 	sub	r4,r17,r6
   4ca78:	8905803a 	cmpltu	r2,r17,r4
   4ca7c:	4267c83a 	sub	r19,r8,r9
   4ca80:	98a7c83a 	sub	r19,r19,r2
   4ca84:	9880202c 	andhi	r2,r19,128
   4ca88:	10006326 	beq	r2,zero,4cc18 <__adddf3+0x4d4>
   4ca8c:	3463c83a 	sub	r17,r6,r17
   4ca90:	4a07c83a 	sub	r3,r9,r8
   4ca94:	344d803a 	cmpltu	r6,r6,r17
   4ca98:	19a7c83a 	sub	r19,r3,r6
   4ca9c:	3825883a 	mov	r18,r7
   4caa0:	983f8a1e 	bne	r19,zero,4c8cc <_gp+0xffff11a4>
   4caa4:	8809883a 	mov	r4,r17
   4caa8:	004144c0 	call	4144c <__clzsi2>
   4caac:	10800804 	addi	r2,r2,32
   4cab0:	10fffe04 	addi	r3,r2,-8
   4cab4:	010007c4 	movi	r4,31
   4cab8:	20ff890e 	bge	r4,r3,4c8e0 <_gp+0xffff11b8>
   4cabc:	10bff604 	addi	r2,r2,-40
   4cac0:	8884983a 	sll	r2,r17,r2
   4cac4:	0023883a 	mov	r17,zero
   4cac8:	1c3f8c0e 	bge	r3,r16,4c8fc <_gp+0xffff11d4>
   4cacc:	023fe034 	movhi	r8,65408
   4cad0:	423fffc4 	addi	r8,r8,-1
   4cad4:	80e1c83a 	sub	r16,r16,r3
   4cad8:	1210703a 	and	r8,r2,r8
   4cadc:	003f3806 	br	4c7c0 <_gp+0xffff1098>
   4cae0:	9007883a 	mov	r3,r18
   4cae4:	0011883a 	mov	r8,zero
   4cae8:	0005883a 	mov	r2,zero
   4caec:	003f4c06 	br	4c820 <_gp+0xffff10f8>
   4caf0:	498cb03a 	or	r6,r9,r6
   4caf4:	300cc03a 	cmpne	r6,r6,zero
   4caf8:	0007883a 	mov	r3,zero
   4cafc:	003f6806 	br	4c8a0 <_gp+0xffff1178>
   4cb00:	20009c1e 	bne	r4,zero,4cd74 <__adddf3+0x630>
   4cb04:	80800044 	addi	r2,r16,1
   4cb08:	1141ffcc 	andi	r5,r2,2047
   4cb0c:	01000044 	movi	r4,1
   4cb10:	2140670e 	bge	r4,r5,4ccb0 <__adddf3+0x56c>
   4cb14:	0101ffc4 	movi	r4,2047
   4cb18:	11007f26 	beq	r2,r4,4cd18 <__adddf3+0x5d4>
   4cb1c:	898d883a 	add	r6,r17,r6
   4cb20:	4247883a 	add	r3,r8,r9
   4cb24:	3451803a 	cmpltu	r8,r6,r17
   4cb28:	40d1883a 	add	r8,r8,r3
   4cb2c:	402297fa 	slli	r17,r8,31
   4cb30:	300cd07a 	srli	r6,r6,1
   4cb34:	4010d07a 	srli	r8,r8,1
   4cb38:	1021883a 	mov	r16,r2
   4cb3c:	89a2b03a 	or	r17,r17,r6
   4cb40:	003f1f06 	br	4c7c0 <_gp+0xffff1098>
   4cb44:	0081ffc4 	movi	r2,2047
   4cb48:	80bf481e 	bne	r16,r2,4c86c <_gp+0xffff1144>
   4cb4c:	003f1c06 	br	4c7c0 <_gp+0xffff1098>
   4cb50:	843ff844 	addi	r16,r16,-31
   4cb54:	01000804 	movi	r4,32
   4cb58:	1406d83a 	srl	r3,r2,r16
   4cb5c:	41005026 	beq	r8,r4,4cca0 <__adddf3+0x55c>
   4cb60:	01001004 	movi	r4,64
   4cb64:	2211c83a 	sub	r8,r4,r8
   4cb68:	1204983a 	sll	r2,r2,r8
   4cb6c:	88a2b03a 	or	r17,r17,r2
   4cb70:	8822c03a 	cmpne	r17,r17,zero
   4cb74:	1c62b03a 	or	r17,r3,r17
   4cb78:	0011883a 	mov	r8,zero
   4cb7c:	0021883a 	mov	r16,zero
   4cb80:	003f7106 	br	4c948 <_gp+0xffff1220>
   4cb84:	193ff804 	addi	r4,r3,-32
   4cb88:	00800804 	movi	r2,32
   4cb8c:	4908d83a 	srl	r4,r9,r4
   4cb90:	18804526 	beq	r3,r2,4cca8 <__adddf3+0x564>
   4cb94:	00801004 	movi	r2,64
   4cb98:	10c5c83a 	sub	r2,r2,r3
   4cb9c:	4886983a 	sll	r3,r9,r2
   4cba0:	198cb03a 	or	r6,r3,r6
   4cba4:	300cc03a 	cmpne	r6,r6,zero
   4cba8:	218cb03a 	or	r6,r4,r6
   4cbac:	0007883a 	mov	r3,zero
   4cbb0:	003f3b06 	br	4c8a0 <_gp+0xffff1178>
   4cbb4:	80002a26 	beq	r16,zero,4cc60 <__adddf3+0x51c>
   4cbb8:	0101ffc4 	movi	r4,2047
   4cbbc:	11006826 	beq	r2,r4,4cd60 <__adddf3+0x61c>
   4cbc0:	00c7c83a 	sub	r3,zero,r3
   4cbc4:	42002034 	orhi	r8,r8,128
   4cbc8:	01000e04 	movi	r4,56
   4cbcc:	20c07c16 	blt	r4,r3,4cdc0 <__adddf3+0x67c>
   4cbd0:	010007c4 	movi	r4,31
   4cbd4:	20c0da16 	blt	r4,r3,4cf40 <__adddf3+0x7fc>
   4cbd8:	01000804 	movi	r4,32
   4cbdc:	20c9c83a 	sub	r4,r4,r3
   4cbe0:	4114983a 	sll	r10,r8,r4
   4cbe4:	88cad83a 	srl	r5,r17,r3
   4cbe8:	8908983a 	sll	r4,r17,r4
   4cbec:	40c6d83a 	srl	r3,r8,r3
   4cbf0:	5162b03a 	or	r17,r10,r5
   4cbf4:	2008c03a 	cmpne	r4,r4,zero
   4cbf8:	8922b03a 	or	r17,r17,r4
   4cbfc:	3463c83a 	sub	r17,r6,r17
   4cc00:	48c7c83a 	sub	r3,r9,r3
   4cc04:	344d803a 	cmpltu	r6,r6,r17
   4cc08:	1991c83a 	sub	r8,r3,r6
   4cc0c:	1021883a 	mov	r16,r2
   4cc10:	3825883a 	mov	r18,r7
   4cc14:	003f2706 	br	4c8b4 <_gp+0xffff118c>
   4cc18:	24d0b03a 	or	r8,r4,r19
   4cc1c:	40001b1e 	bne	r8,zero,4cc8c <__adddf3+0x548>
   4cc20:	0005883a 	mov	r2,zero
   4cc24:	0007883a 	mov	r3,zero
   4cc28:	0021883a 	mov	r16,zero
   4cc2c:	003f4d06 	br	4c964 <_gp+0xffff123c>
   4cc30:	008007c4 	movi	r2,31
   4cc34:	11003c16 	blt	r2,r4,4cd28 <__adddf3+0x5e4>
   4cc38:	00800804 	movi	r2,32
   4cc3c:	1105c83a 	sub	r2,r2,r4
   4cc40:	488e983a 	sll	r7,r9,r2
   4cc44:	310ad83a 	srl	r5,r6,r4
   4cc48:	3084983a 	sll	r2,r6,r2
   4cc4c:	4912d83a 	srl	r9,r9,r4
   4cc50:	394ab03a 	or	r5,r7,r5
   4cc54:	1004c03a 	cmpne	r2,r2,zero
   4cc58:	288ab03a 	or	r5,r5,r2
   4cc5c:	003f5306 	br	4c9ac <_gp+0xffff1284>
   4cc60:	4448b03a 	or	r4,r8,r17
   4cc64:	20003e26 	beq	r4,zero,4cd60 <__adddf3+0x61c>
   4cc68:	00c6303a 	nor	r3,zero,r3
   4cc6c:	18003a1e 	bne	r3,zero,4cd58 <__adddf3+0x614>
   4cc70:	3463c83a 	sub	r17,r6,r17
   4cc74:	4a07c83a 	sub	r3,r9,r8
   4cc78:	344d803a 	cmpltu	r6,r6,r17
   4cc7c:	1991c83a 	sub	r8,r3,r6
   4cc80:	1021883a 	mov	r16,r2
   4cc84:	3825883a 	mov	r18,r7
   4cc88:	003f0a06 	br	4c8b4 <_gp+0xffff118c>
   4cc8c:	2023883a 	mov	r17,r4
   4cc90:	003f0d06 	br	4c8c8 <_gp+0xffff11a0>
   4cc94:	0081ffc4 	movi	r2,2047
   4cc98:	80bf3f1e 	bne	r16,r2,4c998 <_gp+0xffff1270>
   4cc9c:	003ec806 	br	4c7c0 <_gp+0xffff1098>
   4cca0:	0005883a 	mov	r2,zero
   4cca4:	003fb106 	br	4cb6c <_gp+0xffff1444>
   4cca8:	0007883a 	mov	r3,zero
   4ccac:	003fbc06 	br	4cba0 <_gp+0xffff1478>
   4ccb0:	4444b03a 	or	r2,r8,r17
   4ccb4:	8000871e 	bne	r16,zero,4ced4 <__adddf3+0x790>
   4ccb8:	1000ba26 	beq	r2,zero,4cfa4 <__adddf3+0x860>
   4ccbc:	4984b03a 	or	r2,r9,r6
   4ccc0:	103ebf26 	beq	r2,zero,4c7c0 <_gp+0xffff1098>
   4ccc4:	8985883a 	add	r2,r17,r6
   4ccc8:	4247883a 	add	r3,r8,r9
   4cccc:	1451803a 	cmpltu	r8,r2,r17
   4ccd0:	40d1883a 	add	r8,r8,r3
   4ccd4:	40c0202c 	andhi	r3,r8,128
   4ccd8:	1023883a 	mov	r17,r2
   4ccdc:	183f1a26 	beq	r3,zero,4c948 <_gp+0xffff1220>
   4cce0:	00bfe034 	movhi	r2,65408
   4cce4:	10bfffc4 	addi	r2,r2,-1
   4cce8:	2021883a 	mov	r16,r4
   4ccec:	4090703a 	and	r8,r8,r2
   4ccf0:	003eb306 	br	4c7c0 <_gp+0xffff1098>
   4ccf4:	4444b03a 	or	r2,r8,r17
   4ccf8:	8000291e 	bne	r16,zero,4cda0 <__adddf3+0x65c>
   4ccfc:	10004b1e 	bne	r2,zero,4ce2c <__adddf3+0x6e8>
   4cd00:	4990b03a 	or	r8,r9,r6
   4cd04:	40008b26 	beq	r8,zero,4cf34 <__adddf3+0x7f0>
   4cd08:	4811883a 	mov	r8,r9
   4cd0c:	3023883a 	mov	r17,r6
   4cd10:	3825883a 	mov	r18,r7
   4cd14:	003eaa06 	br	4c7c0 <_gp+0xffff1098>
   4cd18:	1021883a 	mov	r16,r2
   4cd1c:	0011883a 	mov	r8,zero
   4cd20:	0005883a 	mov	r2,zero
   4cd24:	003f0f06 	br	4c964 <_gp+0xffff123c>
   4cd28:	217ff804 	addi	r5,r4,-32
   4cd2c:	00800804 	movi	r2,32
   4cd30:	494ad83a 	srl	r5,r9,r5
   4cd34:	20807d26 	beq	r4,r2,4cf2c <__adddf3+0x7e8>
   4cd38:	00801004 	movi	r2,64
   4cd3c:	1109c83a 	sub	r4,r2,r4
   4cd40:	4912983a 	sll	r9,r9,r4
   4cd44:	498cb03a 	or	r6,r9,r6
   4cd48:	300cc03a 	cmpne	r6,r6,zero
   4cd4c:	298ab03a 	or	r5,r5,r6
   4cd50:	0013883a 	mov	r9,zero
   4cd54:	003f1506 	br	4c9ac <_gp+0xffff1284>
   4cd58:	0101ffc4 	movi	r4,2047
   4cd5c:	113f9a1e 	bne	r2,r4,4cbc8 <_gp+0xffff14a0>
   4cd60:	4811883a 	mov	r8,r9
   4cd64:	3023883a 	mov	r17,r6
   4cd68:	1021883a 	mov	r16,r2
   4cd6c:	3825883a 	mov	r18,r7
   4cd70:	003e9306 	br	4c7c0 <_gp+0xffff1098>
   4cd74:	8000161e 	bne	r16,zero,4cdd0 <__adddf3+0x68c>
   4cd78:	444ab03a 	or	r5,r8,r17
   4cd7c:	28005126 	beq	r5,zero,4cec4 <__adddf3+0x780>
   4cd80:	0108303a 	nor	r4,zero,r4
   4cd84:	20004d1e 	bne	r4,zero,4cebc <__adddf3+0x778>
   4cd88:	89a3883a 	add	r17,r17,r6
   4cd8c:	4253883a 	add	r9,r8,r9
   4cd90:	898d803a 	cmpltu	r6,r17,r6
   4cd94:	3251883a 	add	r8,r6,r9
   4cd98:	1021883a 	mov	r16,r2
   4cd9c:	003f0806 	br	4c9c0 <_gp+0xffff1298>
   4cda0:	1000301e 	bne	r2,zero,4ce64 <__adddf3+0x720>
   4cda4:	4984b03a 	or	r2,r9,r6
   4cda8:	10007126 	beq	r2,zero,4cf70 <__adddf3+0x82c>
   4cdac:	4811883a 	mov	r8,r9
   4cdb0:	3023883a 	mov	r17,r6
   4cdb4:	3825883a 	mov	r18,r7
   4cdb8:	0401ffc4 	movi	r16,2047
   4cdbc:	003e8006 	br	4c7c0 <_gp+0xffff1098>
   4cdc0:	4462b03a 	or	r17,r8,r17
   4cdc4:	8822c03a 	cmpne	r17,r17,zero
   4cdc8:	0007883a 	mov	r3,zero
   4cdcc:	003f8b06 	br	4cbfc <_gp+0xffff14d4>
   4cdd0:	0141ffc4 	movi	r5,2047
   4cdd4:	11403b26 	beq	r2,r5,4cec4 <__adddf3+0x780>
   4cdd8:	0109c83a 	sub	r4,zero,r4
   4cddc:	42002034 	orhi	r8,r8,128
   4cde0:	01400e04 	movi	r5,56
   4cde4:	29006716 	blt	r5,r4,4cf84 <__adddf3+0x840>
   4cde8:	014007c4 	movi	r5,31
   4cdec:	29007016 	blt	r5,r4,4cfb0 <__adddf3+0x86c>
   4cdf0:	01400804 	movi	r5,32
   4cdf4:	290bc83a 	sub	r5,r5,r4
   4cdf8:	4154983a 	sll	r10,r8,r5
   4cdfc:	890ed83a 	srl	r7,r17,r4
   4ce00:	894a983a 	sll	r5,r17,r5
   4ce04:	4108d83a 	srl	r4,r8,r4
   4ce08:	51e2b03a 	or	r17,r10,r7
   4ce0c:	280ac03a 	cmpne	r5,r5,zero
   4ce10:	8962b03a 	or	r17,r17,r5
   4ce14:	89a3883a 	add	r17,r17,r6
   4ce18:	2253883a 	add	r9,r4,r9
   4ce1c:	898d803a 	cmpltu	r6,r17,r6
   4ce20:	3251883a 	add	r8,r6,r9
   4ce24:	1021883a 	mov	r16,r2
   4ce28:	003ee506 	br	4c9c0 <_gp+0xffff1298>
   4ce2c:	4984b03a 	or	r2,r9,r6
   4ce30:	103e6326 	beq	r2,zero,4c7c0 <_gp+0xffff1098>
   4ce34:	8987c83a 	sub	r3,r17,r6
   4ce38:	88c9803a 	cmpltu	r4,r17,r3
   4ce3c:	4245c83a 	sub	r2,r8,r9
   4ce40:	1105c83a 	sub	r2,r2,r4
   4ce44:	1100202c 	andhi	r4,r2,128
   4ce48:	203ebb26 	beq	r4,zero,4c938 <_gp+0xffff1210>
   4ce4c:	3463c83a 	sub	r17,r6,r17
   4ce50:	4a07c83a 	sub	r3,r9,r8
   4ce54:	344d803a 	cmpltu	r6,r6,r17
   4ce58:	1991c83a 	sub	r8,r3,r6
   4ce5c:	3825883a 	mov	r18,r7
   4ce60:	003e5706 	br	4c7c0 <_gp+0xffff1098>
   4ce64:	4984b03a 	or	r2,r9,r6
   4ce68:	10002e26 	beq	r2,zero,4cf24 <__adddf3+0x7e0>
   4ce6c:	4004d0fa 	srli	r2,r8,3
   4ce70:	8822d0fa 	srli	r17,r17,3
   4ce74:	4010977a 	slli	r8,r8,29
   4ce78:	10c0022c 	andhi	r3,r2,8
   4ce7c:	4462b03a 	or	r17,r8,r17
   4ce80:	18000826 	beq	r3,zero,4cea4 <__adddf3+0x760>
   4ce84:	4808d0fa 	srli	r4,r9,3
   4ce88:	20c0022c 	andhi	r3,r4,8
   4ce8c:	1800051e 	bne	r3,zero,4cea4 <__adddf3+0x760>
   4ce90:	300cd0fa 	srli	r6,r6,3
   4ce94:	4806977a 	slli	r3,r9,29
   4ce98:	2005883a 	mov	r2,r4
   4ce9c:	3825883a 	mov	r18,r7
   4cea0:	19a2b03a 	or	r17,r3,r6
   4cea4:	8810d77a 	srli	r8,r17,29
   4cea8:	100490fa 	slli	r2,r2,3
   4ceac:	882290fa 	slli	r17,r17,3
   4ceb0:	0401ffc4 	movi	r16,2047
   4ceb4:	4090b03a 	or	r8,r8,r2
   4ceb8:	003e4106 	br	4c7c0 <_gp+0xffff1098>
   4cebc:	0141ffc4 	movi	r5,2047
   4cec0:	117fc71e 	bne	r2,r5,4cde0 <_gp+0xffff16b8>
   4cec4:	4811883a 	mov	r8,r9
   4cec8:	3023883a 	mov	r17,r6
   4cecc:	1021883a 	mov	r16,r2
   4ced0:	003e3b06 	br	4c7c0 <_gp+0xffff1098>
   4ced4:	10002f26 	beq	r2,zero,4cf94 <__adddf3+0x850>
   4ced8:	4984b03a 	or	r2,r9,r6
   4cedc:	10001126 	beq	r2,zero,4cf24 <__adddf3+0x7e0>
   4cee0:	4004d0fa 	srli	r2,r8,3
   4cee4:	8822d0fa 	srli	r17,r17,3
   4cee8:	4010977a 	slli	r8,r8,29
   4ceec:	10c0022c 	andhi	r3,r2,8
   4cef0:	4462b03a 	or	r17,r8,r17
   4cef4:	183feb26 	beq	r3,zero,4cea4 <_gp+0xffff177c>
   4cef8:	4808d0fa 	srli	r4,r9,3
   4cefc:	20c0022c 	andhi	r3,r4,8
   4cf00:	183fe81e 	bne	r3,zero,4cea4 <_gp+0xffff177c>
   4cf04:	300cd0fa 	srli	r6,r6,3
   4cf08:	4806977a 	slli	r3,r9,29
   4cf0c:	2005883a 	mov	r2,r4
   4cf10:	19a2b03a 	or	r17,r3,r6
   4cf14:	003fe306 	br	4cea4 <_gp+0xffff177c>
   4cf18:	0011883a 	mov	r8,zero
   4cf1c:	0005883a 	mov	r2,zero
   4cf20:	003e3f06 	br	4c820 <_gp+0xffff10f8>
   4cf24:	0401ffc4 	movi	r16,2047
   4cf28:	003e2506 	br	4c7c0 <_gp+0xffff1098>
   4cf2c:	0013883a 	mov	r9,zero
   4cf30:	003f8406 	br	4cd44 <_gp+0xffff161c>
   4cf34:	0005883a 	mov	r2,zero
   4cf38:	0007883a 	mov	r3,zero
   4cf3c:	003e8906 	br	4c964 <_gp+0xffff123c>
   4cf40:	197ff804 	addi	r5,r3,-32
   4cf44:	01000804 	movi	r4,32
   4cf48:	414ad83a 	srl	r5,r8,r5
   4cf4c:	19002426 	beq	r3,r4,4cfe0 <__adddf3+0x89c>
   4cf50:	01001004 	movi	r4,64
   4cf54:	20c7c83a 	sub	r3,r4,r3
   4cf58:	40c6983a 	sll	r3,r8,r3
   4cf5c:	1c46b03a 	or	r3,r3,r17
   4cf60:	1806c03a 	cmpne	r3,r3,zero
   4cf64:	28e2b03a 	or	r17,r5,r3
   4cf68:	0007883a 	mov	r3,zero
   4cf6c:	003f2306 	br	4cbfc <_gp+0xffff14d4>
   4cf70:	0007883a 	mov	r3,zero
   4cf74:	5811883a 	mov	r8,r11
   4cf78:	00bfffc4 	movi	r2,-1
   4cf7c:	0401ffc4 	movi	r16,2047
   4cf80:	003e7806 	br	4c964 <_gp+0xffff123c>
   4cf84:	4462b03a 	or	r17,r8,r17
   4cf88:	8822c03a 	cmpne	r17,r17,zero
   4cf8c:	0009883a 	mov	r4,zero
   4cf90:	003fa006 	br	4ce14 <_gp+0xffff16ec>
   4cf94:	4811883a 	mov	r8,r9
   4cf98:	3023883a 	mov	r17,r6
   4cf9c:	0401ffc4 	movi	r16,2047
   4cfa0:	003e0706 	br	4c7c0 <_gp+0xffff1098>
   4cfa4:	4811883a 	mov	r8,r9
   4cfa8:	3023883a 	mov	r17,r6
   4cfac:	003e0406 	br	4c7c0 <_gp+0xffff1098>
   4cfb0:	21fff804 	addi	r7,r4,-32
   4cfb4:	01400804 	movi	r5,32
   4cfb8:	41ced83a 	srl	r7,r8,r7
   4cfbc:	21400a26 	beq	r4,r5,4cfe8 <__adddf3+0x8a4>
   4cfc0:	01401004 	movi	r5,64
   4cfc4:	2909c83a 	sub	r4,r5,r4
   4cfc8:	4108983a 	sll	r4,r8,r4
   4cfcc:	2448b03a 	or	r4,r4,r17
   4cfd0:	2008c03a 	cmpne	r4,r4,zero
   4cfd4:	3922b03a 	or	r17,r7,r4
   4cfd8:	0009883a 	mov	r4,zero
   4cfdc:	003f8d06 	br	4ce14 <_gp+0xffff16ec>
   4cfe0:	0007883a 	mov	r3,zero
   4cfe4:	003fdd06 	br	4cf5c <_gp+0xffff1834>
   4cfe8:	0009883a 	mov	r4,zero
   4cfec:	003ff706 	br	4cfcc <_gp+0xffff18a4>

0004cff0 <__eqdf2>:
   4cff0:	2804d53a 	srli	r2,r5,20
   4cff4:	3806d53a 	srli	r3,r7,20
   4cff8:	02000434 	movhi	r8,16
   4cffc:	423fffc4 	addi	r8,r8,-1
   4d000:	1081ffcc 	andi	r2,r2,2047
   4d004:	0281ffc4 	movi	r10,2047
   4d008:	2a12703a 	and	r9,r5,r8
   4d00c:	18c1ffcc 	andi	r3,r3,2047
   4d010:	3a10703a 	and	r8,r7,r8
   4d014:	280ad7fa 	srli	r5,r5,31
   4d018:	380ed7fa 	srli	r7,r7,31
   4d01c:	12801026 	beq	r2,r10,4d060 <__eqdf2+0x70>
   4d020:	0281ffc4 	movi	r10,2047
   4d024:	1a800a26 	beq	r3,r10,4d050 <__eqdf2+0x60>
   4d028:	10c00226 	beq	r2,r3,4d034 <__eqdf2+0x44>
   4d02c:	00800044 	movi	r2,1
   4d030:	f800283a 	ret
   4d034:	4a3ffd1e 	bne	r9,r8,4d02c <_gp+0xffff1904>
   4d038:	21bffc1e 	bne	r4,r6,4d02c <_gp+0xffff1904>
   4d03c:	29c00c26 	beq	r5,r7,4d070 <__eqdf2+0x80>
   4d040:	103ffa1e 	bne	r2,zero,4d02c <_gp+0xffff1904>
   4d044:	2244b03a 	or	r2,r4,r9
   4d048:	1004c03a 	cmpne	r2,r2,zero
   4d04c:	f800283a 	ret
   4d050:	3214b03a 	or	r10,r6,r8
   4d054:	503ff426 	beq	r10,zero,4d028 <_gp+0xffff1900>
   4d058:	00800044 	movi	r2,1
   4d05c:	f800283a 	ret
   4d060:	2254b03a 	or	r10,r4,r9
   4d064:	503fee26 	beq	r10,zero,4d020 <_gp+0xffff18f8>
   4d068:	00800044 	movi	r2,1
   4d06c:	f800283a 	ret
   4d070:	0005883a 	mov	r2,zero
   4d074:	f800283a 	ret

0004d078 <__gedf2>:
   4d078:	2804d53a 	srli	r2,r5,20
   4d07c:	3806d53a 	srli	r3,r7,20
   4d080:	02000434 	movhi	r8,16
   4d084:	423fffc4 	addi	r8,r8,-1
   4d088:	1081ffcc 	andi	r2,r2,2047
   4d08c:	0241ffc4 	movi	r9,2047
   4d090:	2a14703a 	and	r10,r5,r8
   4d094:	18c1ffcc 	andi	r3,r3,2047
   4d098:	3a10703a 	and	r8,r7,r8
   4d09c:	280ad7fa 	srli	r5,r5,31
   4d0a0:	380ed7fa 	srli	r7,r7,31
   4d0a4:	12401d26 	beq	r2,r9,4d11c <__gedf2+0xa4>
   4d0a8:	0241ffc4 	movi	r9,2047
   4d0ac:	1a401226 	beq	r3,r9,4d0f8 <__gedf2+0x80>
   4d0b0:	1000081e 	bne	r2,zero,4d0d4 <__gedf2+0x5c>
   4d0b4:	2296b03a 	or	r11,r4,r10
   4d0b8:	5813003a 	cmpeq	r9,r11,zero
   4d0bc:	1800091e 	bne	r3,zero,4d0e4 <__gedf2+0x6c>
   4d0c0:	3218b03a 	or	r12,r6,r8
   4d0c4:	6000071e 	bne	r12,zero,4d0e4 <__gedf2+0x6c>
   4d0c8:	0005883a 	mov	r2,zero
   4d0cc:	5800101e 	bne	r11,zero,4d110 <__gedf2+0x98>
   4d0d0:	f800283a 	ret
   4d0d4:	18000c1e 	bne	r3,zero,4d108 <__gedf2+0x90>
   4d0d8:	3212b03a 	or	r9,r6,r8
   4d0dc:	48000c26 	beq	r9,zero,4d110 <__gedf2+0x98>
   4d0e0:	0013883a 	mov	r9,zero
   4d0e4:	39c03fcc 	andi	r7,r7,255
   4d0e8:	48000826 	beq	r9,zero,4d10c <__gedf2+0x94>
   4d0ec:	38000926 	beq	r7,zero,4d114 <__gedf2+0x9c>
   4d0f0:	00800044 	movi	r2,1
   4d0f4:	f800283a 	ret
   4d0f8:	3212b03a 	or	r9,r6,r8
   4d0fc:	483fec26 	beq	r9,zero,4d0b0 <_gp+0xffff1988>
   4d100:	00bfff84 	movi	r2,-2
   4d104:	f800283a 	ret
   4d108:	39c03fcc 	andi	r7,r7,255
   4d10c:	29c00626 	beq	r5,r7,4d128 <__gedf2+0xb0>
   4d110:	283ff726 	beq	r5,zero,4d0f0 <_gp+0xffff19c8>
   4d114:	00bfffc4 	movi	r2,-1
   4d118:	f800283a 	ret
   4d11c:	2292b03a 	or	r9,r4,r10
   4d120:	483fe126 	beq	r9,zero,4d0a8 <_gp+0xffff1980>
   4d124:	003ff606 	br	4d100 <_gp+0xffff19d8>
   4d128:	18bff916 	blt	r3,r2,4d110 <_gp+0xffff19e8>
   4d12c:	10c00316 	blt	r2,r3,4d13c <__gedf2+0xc4>
   4d130:	42bff736 	bltu	r8,r10,4d110 <_gp+0xffff19e8>
   4d134:	52000326 	beq	r10,r8,4d144 <__gedf2+0xcc>
   4d138:	5200042e 	bgeu	r10,r8,4d14c <__gedf2+0xd4>
   4d13c:	283fec1e 	bne	r5,zero,4d0f0 <_gp+0xffff19c8>
   4d140:	003ff406 	br	4d114 <_gp+0xffff19ec>
   4d144:	313ff236 	bltu	r6,r4,4d110 <_gp+0xffff19e8>
   4d148:	21bffc36 	bltu	r4,r6,4d13c <_gp+0xffff1a14>
   4d14c:	0005883a 	mov	r2,zero
   4d150:	f800283a 	ret

0004d154 <__ledf2>:
   4d154:	2804d53a 	srli	r2,r5,20
   4d158:	3810d53a 	srli	r8,r7,20
   4d15c:	00c00434 	movhi	r3,16
   4d160:	18ffffc4 	addi	r3,r3,-1
   4d164:	1081ffcc 	andi	r2,r2,2047
   4d168:	0241ffc4 	movi	r9,2047
   4d16c:	28d4703a 	and	r10,r5,r3
   4d170:	4201ffcc 	andi	r8,r8,2047
   4d174:	38c6703a 	and	r3,r7,r3
   4d178:	280ad7fa 	srli	r5,r5,31
   4d17c:	380ed7fa 	srli	r7,r7,31
   4d180:	12401f26 	beq	r2,r9,4d200 <__ledf2+0xac>
   4d184:	0241ffc4 	movi	r9,2047
   4d188:	42401426 	beq	r8,r9,4d1dc <__ledf2+0x88>
   4d18c:	1000091e 	bne	r2,zero,4d1b4 <__ledf2+0x60>
   4d190:	2296b03a 	or	r11,r4,r10
   4d194:	5813003a 	cmpeq	r9,r11,zero
   4d198:	29403fcc 	andi	r5,r5,255
   4d19c:	40000a1e 	bne	r8,zero,4d1c8 <__ledf2+0x74>
   4d1a0:	30d8b03a 	or	r12,r6,r3
   4d1a4:	6000081e 	bne	r12,zero,4d1c8 <__ledf2+0x74>
   4d1a8:	0005883a 	mov	r2,zero
   4d1ac:	5800111e 	bne	r11,zero,4d1f4 <__ledf2+0xa0>
   4d1b0:	f800283a 	ret
   4d1b4:	29403fcc 	andi	r5,r5,255
   4d1b8:	40000c1e 	bne	r8,zero,4d1ec <__ledf2+0x98>
   4d1bc:	30d2b03a 	or	r9,r6,r3
   4d1c0:	48000c26 	beq	r9,zero,4d1f4 <__ledf2+0xa0>
   4d1c4:	0013883a 	mov	r9,zero
   4d1c8:	39c03fcc 	andi	r7,r7,255
   4d1cc:	48000826 	beq	r9,zero,4d1f0 <__ledf2+0x9c>
   4d1d0:	38001126 	beq	r7,zero,4d218 <__ledf2+0xc4>
   4d1d4:	00800044 	movi	r2,1
   4d1d8:	f800283a 	ret
   4d1dc:	30d2b03a 	or	r9,r6,r3
   4d1e0:	483fea26 	beq	r9,zero,4d18c <_gp+0xffff1a64>
   4d1e4:	00800084 	movi	r2,2
   4d1e8:	f800283a 	ret
   4d1ec:	39c03fcc 	andi	r7,r7,255
   4d1f0:	39400726 	beq	r7,r5,4d210 <__ledf2+0xbc>
   4d1f4:	2800081e 	bne	r5,zero,4d218 <__ledf2+0xc4>
   4d1f8:	00800044 	movi	r2,1
   4d1fc:	f800283a 	ret
   4d200:	2292b03a 	or	r9,r4,r10
   4d204:	483fdf26 	beq	r9,zero,4d184 <_gp+0xffff1a5c>
   4d208:	00800084 	movi	r2,2
   4d20c:	f800283a 	ret
   4d210:	4080030e 	bge	r8,r2,4d220 <__ledf2+0xcc>
   4d214:	383fef26 	beq	r7,zero,4d1d4 <_gp+0xffff1aac>
   4d218:	00bfffc4 	movi	r2,-1
   4d21c:	f800283a 	ret
   4d220:	123feb16 	blt	r2,r8,4d1d0 <_gp+0xffff1aa8>
   4d224:	1abff336 	bltu	r3,r10,4d1f4 <_gp+0xffff1acc>
   4d228:	50c00326 	beq	r10,r3,4d238 <__ledf2+0xe4>
   4d22c:	50c0042e 	bgeu	r10,r3,4d240 <__ledf2+0xec>
   4d230:	283fe81e 	bne	r5,zero,4d1d4 <_gp+0xffff1aac>
   4d234:	003ff806 	br	4d218 <_gp+0xffff1af0>
   4d238:	313fee36 	bltu	r6,r4,4d1f4 <_gp+0xffff1acc>
   4d23c:	21bffc36 	bltu	r4,r6,4d230 <_gp+0xffff1b08>
   4d240:	0005883a 	mov	r2,zero
   4d244:	f800283a 	ret

0004d248 <__muldf3>:
   4d248:	deffee04 	addi	sp,sp,-72
   4d24c:	dd000c15 	stw	r20,48(sp)
   4d250:	2828d53a 	srli	r20,r5,20
   4d254:	ddc00f15 	stw	r23,60(sp)
   4d258:	282ed7fa 	srli	r23,r5,31
   4d25c:	dc000815 	stw	r16,32(sp)
   4d260:	04000434 	movhi	r16,16
   4d264:	dcc00b15 	stw	r19,44(sp)
   4d268:	843fffc4 	addi	r16,r16,-1
   4d26c:	dfc01115 	stw	ra,68(sp)
   4d270:	df001015 	stw	fp,64(sp)
   4d274:	dd800e15 	stw	r22,56(sp)
   4d278:	dd400d15 	stw	r21,52(sp)
   4d27c:	dc800a15 	stw	r18,40(sp)
   4d280:	dc400915 	stw	r17,36(sp)
   4d284:	a501ffcc 	andi	r20,r20,2047
   4d288:	2c20703a 	and	r16,r5,r16
   4d28c:	b827883a 	mov	r19,r23
   4d290:	ba403fcc 	andi	r9,r23,255
   4d294:	a0006026 	beq	r20,zero,4d418 <__muldf3+0x1d0>
   4d298:	0081ffc4 	movi	r2,2047
   4d29c:	202d883a 	mov	r22,r4
   4d2a0:	a0803626 	beq	r20,r2,4d37c <__muldf3+0x134>
   4d2a4:	84000434 	orhi	r16,r16,16
   4d2a8:	200ad77a 	srli	r5,r4,29
   4d2ac:	800490fa 	slli	r2,r16,3
   4d2b0:	202c90fa 	slli	r22,r4,3
   4d2b4:	a53f0044 	addi	r20,r20,-1023
   4d2b8:	28a0b03a 	or	r16,r5,r2
   4d2bc:	002b883a 	mov	r21,zero
   4d2c0:	000b883a 	mov	r5,zero
   4d2c4:	3804d53a 	srli	r2,r7,20
   4d2c8:	3838d7fa 	srli	fp,r7,31
   4d2cc:	04400434 	movhi	r17,16
   4d2d0:	8c7fffc4 	addi	r17,r17,-1
   4d2d4:	1081ffcc 	andi	r2,r2,2047
   4d2d8:	3025883a 	mov	r18,r6
   4d2dc:	3c62703a 	and	r17,r7,r17
   4d2e0:	e2803fcc 	andi	r10,fp,255
   4d2e4:	10006d26 	beq	r2,zero,4d49c <__muldf3+0x254>
   4d2e8:	00c1ffc4 	movi	r3,2047
   4d2ec:	10c06526 	beq	r2,r3,4d484 <__muldf3+0x23c>
   4d2f0:	8c400434 	orhi	r17,r17,16
   4d2f4:	300ed77a 	srli	r7,r6,29
   4d2f8:	880690fa 	slli	r3,r17,3
   4d2fc:	302490fa 	slli	r18,r6,3
   4d300:	10bf0044 	addi	r2,r2,-1023
   4d304:	38e2b03a 	or	r17,r7,r3
   4d308:	000f883a 	mov	r7,zero
   4d30c:	a087883a 	add	r3,r20,r2
   4d310:	010003c4 	movi	r4,15
   4d314:	3d44b03a 	or	r2,r7,r21
   4d318:	e5ccf03a 	xor	r6,fp,r23
   4d31c:	1a000044 	addi	r8,r3,1
   4d320:	20809b36 	bltu	r4,r2,4d590 <__muldf3+0x348>
   4d324:	100490ba 	slli	r2,r2,2
   4d328:	01000174 	movhi	r4,5
   4d32c:	2134cf04 	addi	r4,r4,-11460
   4d330:	1105883a 	add	r2,r2,r4
   4d334:	10800017 	ldw	r2,0(r2)
   4d338:	1000683a 	jmp	r2
   4d33c:	0004d590 	cmplti	zero,zero,4950
   4d340:	0004d39c 	xori	zero,zero,4942
   4d344:	0004d39c 	xori	zero,zero,4942
   4d348:	0004d398 	cmpnei	zero,zero,4942
   4d34c:	0004d56c 	andhi	zero,zero,4949
   4d350:	0004d56c 	andhi	zero,zero,4949
   4d354:	0004d554 	movui	zero,4949
   4d358:	0004d398 	cmpnei	zero,zero,4942
   4d35c:	0004d56c 	andhi	zero,zero,4949
   4d360:	0004d554 	movui	zero,4949
   4d364:	0004d56c 	andhi	zero,zero,4949
   4d368:	0004d398 	cmpnei	zero,zero,4942
   4d36c:	0004d57c 	xorhi	zero,zero,4949
   4d370:	0004d57c 	xorhi	zero,zero,4949
   4d374:	0004d57c 	xorhi	zero,zero,4949
   4d378:	0004d8dc 	xori	zero,zero,4963
   4d37c:	2404b03a 	or	r2,r4,r16
   4d380:	1000711e 	bne	r2,zero,4d548 <__muldf3+0x300>
   4d384:	05400204 	movi	r21,8
   4d388:	0021883a 	mov	r16,zero
   4d38c:	002d883a 	mov	r22,zero
   4d390:	01400084 	movi	r5,2
   4d394:	003fcb06 	br	4d2c4 <_gp+0xffff1b9c>
   4d398:	500d883a 	mov	r6,r10
   4d39c:	00800084 	movi	r2,2
   4d3a0:	38805926 	beq	r7,r2,4d508 <__muldf3+0x2c0>
   4d3a4:	008000c4 	movi	r2,3
   4d3a8:	3881bb26 	beq	r7,r2,4da98 <__muldf3+0x850>
   4d3ac:	00800044 	movi	r2,1
   4d3b0:	3881961e 	bne	r7,r2,4da0c <__muldf3+0x7c4>
   4d3b4:	3027883a 	mov	r19,r6
   4d3b8:	0005883a 	mov	r2,zero
   4d3bc:	0021883a 	mov	r16,zero
   4d3c0:	002d883a 	mov	r22,zero
   4d3c4:	1004953a 	slli	r2,r2,20
   4d3c8:	98c03fcc 	andi	r3,r19,255
   4d3cc:	04400434 	movhi	r17,16
   4d3d0:	8c7fffc4 	addi	r17,r17,-1
   4d3d4:	180697fa 	slli	r3,r3,31
   4d3d8:	8460703a 	and	r16,r16,r17
   4d3dc:	80a0b03a 	or	r16,r16,r2
   4d3e0:	80c6b03a 	or	r3,r16,r3
   4d3e4:	b005883a 	mov	r2,r22
   4d3e8:	dfc01117 	ldw	ra,68(sp)
   4d3ec:	df001017 	ldw	fp,64(sp)
   4d3f0:	ddc00f17 	ldw	r23,60(sp)
   4d3f4:	dd800e17 	ldw	r22,56(sp)
   4d3f8:	dd400d17 	ldw	r21,52(sp)
   4d3fc:	dd000c17 	ldw	r20,48(sp)
   4d400:	dcc00b17 	ldw	r19,44(sp)
   4d404:	dc800a17 	ldw	r18,40(sp)
   4d408:	dc400917 	ldw	r17,36(sp)
   4d40c:	dc000817 	ldw	r16,32(sp)
   4d410:	dec01204 	addi	sp,sp,72
   4d414:	f800283a 	ret
   4d418:	2404b03a 	or	r2,r4,r16
   4d41c:	202b883a 	mov	r21,r4
   4d420:	10004426 	beq	r2,zero,4d534 <__muldf3+0x2ec>
   4d424:	80015126 	beq	r16,zero,4d96c <__muldf3+0x724>
   4d428:	8009883a 	mov	r4,r16
   4d42c:	d9800715 	stw	r6,28(sp)
   4d430:	d9c00215 	stw	r7,8(sp)
   4d434:	da400415 	stw	r9,16(sp)
   4d438:	004144c0 	call	4144c <__clzsi2>
   4d43c:	d9800717 	ldw	r6,28(sp)
   4d440:	d9c00217 	ldw	r7,8(sp)
   4d444:	da400417 	ldw	r9,16(sp)
   4d448:	113ffd44 	addi	r4,r2,-11
   4d44c:	00c00704 	movi	r3,28
   4d450:	19014216 	blt	r3,r4,4d95c <__muldf3+0x714>
   4d454:	00c00744 	movi	r3,29
   4d458:	15bffe04 	addi	r22,r2,-8
   4d45c:	1907c83a 	sub	r3,r3,r4
   4d460:	85a0983a 	sll	r16,r16,r22
   4d464:	a8c6d83a 	srl	r3,r21,r3
   4d468:	adac983a 	sll	r22,r21,r22
   4d46c:	1c20b03a 	or	r16,r3,r16
   4d470:	1080fcc4 	addi	r2,r2,1011
   4d474:	00a9c83a 	sub	r20,zero,r2
   4d478:	002b883a 	mov	r21,zero
   4d47c:	000b883a 	mov	r5,zero
   4d480:	003f9006 	br	4d2c4 <_gp+0xffff1b9c>
   4d484:	3446b03a 	or	r3,r6,r17
   4d488:	1800281e 	bne	r3,zero,4d52c <__muldf3+0x2e4>
   4d48c:	0023883a 	mov	r17,zero
   4d490:	0025883a 	mov	r18,zero
   4d494:	01c00084 	movi	r7,2
   4d498:	003f9c06 	br	4d30c <_gp+0xffff1be4>
   4d49c:	3446b03a 	or	r3,r6,r17
   4d4a0:	18001e26 	beq	r3,zero,4d51c <__muldf3+0x2d4>
   4d4a4:	88012126 	beq	r17,zero,4d92c <__muldf3+0x6e4>
   4d4a8:	8809883a 	mov	r4,r17
   4d4ac:	d9400215 	stw	r5,8(sp)
   4d4b0:	d9800715 	stw	r6,28(sp)
   4d4b4:	da400415 	stw	r9,16(sp)
   4d4b8:	da800315 	stw	r10,12(sp)
   4d4bc:	004144c0 	call	4144c <__clzsi2>
   4d4c0:	d9400217 	ldw	r5,8(sp)
   4d4c4:	d9800717 	ldw	r6,28(sp)
   4d4c8:	da400417 	ldw	r9,16(sp)
   4d4cc:	da800317 	ldw	r10,12(sp)
   4d4d0:	113ffd44 	addi	r4,r2,-11
   4d4d4:	00c00704 	movi	r3,28
   4d4d8:	19011016 	blt	r3,r4,4d91c <__muldf3+0x6d4>
   4d4dc:	00c00744 	movi	r3,29
   4d4e0:	14bffe04 	addi	r18,r2,-8
   4d4e4:	1907c83a 	sub	r3,r3,r4
   4d4e8:	8ca2983a 	sll	r17,r17,r18
   4d4ec:	30c6d83a 	srl	r3,r6,r3
   4d4f0:	34a4983a 	sll	r18,r6,r18
   4d4f4:	1c62b03a 	or	r17,r3,r17
   4d4f8:	1080fcc4 	addi	r2,r2,1011
   4d4fc:	0085c83a 	sub	r2,zero,r2
   4d500:	000f883a 	mov	r7,zero
   4d504:	003f8106 	br	4d30c <_gp+0xffff1be4>
   4d508:	3027883a 	mov	r19,r6
   4d50c:	0081ffc4 	movi	r2,2047
   4d510:	0021883a 	mov	r16,zero
   4d514:	002d883a 	mov	r22,zero
   4d518:	003faa06 	br	4d3c4 <_gp+0xffff1c9c>
   4d51c:	0023883a 	mov	r17,zero
   4d520:	0025883a 	mov	r18,zero
   4d524:	01c00044 	movi	r7,1
   4d528:	003f7806 	br	4d30c <_gp+0xffff1be4>
   4d52c:	01c000c4 	movi	r7,3
   4d530:	003f7606 	br	4d30c <_gp+0xffff1be4>
   4d534:	05400104 	movi	r21,4
   4d538:	0021883a 	mov	r16,zero
   4d53c:	002d883a 	mov	r22,zero
   4d540:	01400044 	movi	r5,1
   4d544:	003f5f06 	br	4d2c4 <_gp+0xffff1b9c>
   4d548:	05400304 	movi	r21,12
   4d54c:	014000c4 	movi	r5,3
   4d550:	003f5c06 	br	4d2c4 <_gp+0xffff1b9c>
   4d554:	04000434 	movhi	r16,16
   4d558:	0027883a 	mov	r19,zero
   4d55c:	843fffc4 	addi	r16,r16,-1
   4d560:	05bfffc4 	movi	r22,-1
   4d564:	0081ffc4 	movi	r2,2047
   4d568:	003f9606 	br	4d3c4 <_gp+0xffff1c9c>
   4d56c:	8023883a 	mov	r17,r16
   4d570:	b025883a 	mov	r18,r22
   4d574:	280f883a 	mov	r7,r5
   4d578:	003f8806 	br	4d39c <_gp+0xffff1c74>
   4d57c:	8023883a 	mov	r17,r16
   4d580:	b025883a 	mov	r18,r22
   4d584:	480d883a 	mov	r6,r9
   4d588:	280f883a 	mov	r7,r5
   4d58c:	003f8306 	br	4d39c <_gp+0xffff1c74>
   4d590:	b026d43a 	srli	r19,r22,16
   4d594:	902ed43a 	srli	r23,r18,16
   4d598:	b5bfffcc 	andi	r22,r22,65535
   4d59c:	94bfffcc 	andi	r18,r18,65535
   4d5a0:	b00b883a 	mov	r5,r22
   4d5a4:	9009883a 	mov	r4,r18
   4d5a8:	d8c00515 	stw	r3,20(sp)
   4d5ac:	d9800715 	stw	r6,28(sp)
   4d5b0:	da000615 	stw	r8,24(sp)
   4d5b4:	00416640 	call	41664 <__mulsi3>
   4d5b8:	980b883a 	mov	r5,r19
   4d5bc:	9009883a 	mov	r4,r18
   4d5c0:	1029883a 	mov	r20,r2
   4d5c4:	00416640 	call	41664 <__mulsi3>
   4d5c8:	b80b883a 	mov	r5,r23
   4d5cc:	9809883a 	mov	r4,r19
   4d5d0:	102b883a 	mov	r21,r2
   4d5d4:	00416640 	call	41664 <__mulsi3>
   4d5d8:	b809883a 	mov	r4,r23
   4d5dc:	b00b883a 	mov	r5,r22
   4d5e0:	1039883a 	mov	fp,r2
   4d5e4:	00416640 	call	41664 <__mulsi3>
   4d5e8:	a008d43a 	srli	r4,r20,16
   4d5ec:	1545883a 	add	r2,r2,r21
   4d5f0:	d8c00517 	ldw	r3,20(sp)
   4d5f4:	2085883a 	add	r2,r4,r2
   4d5f8:	d9800717 	ldw	r6,28(sp)
   4d5fc:	da000617 	ldw	r8,24(sp)
   4d600:	1540022e 	bgeu	r2,r21,4d60c <__muldf3+0x3c4>
   4d604:	01000074 	movhi	r4,1
   4d608:	e139883a 	add	fp,fp,r4
   4d60c:	100e943a 	slli	r7,r2,16
   4d610:	1004d43a 	srli	r2,r2,16
   4d614:	882ad43a 	srli	r21,r17,16
   4d618:	a53fffcc 	andi	r20,r20,65535
   4d61c:	8c7fffcc 	andi	r17,r17,65535
   4d620:	3d29883a 	add	r20,r7,r20
   4d624:	b00b883a 	mov	r5,r22
   4d628:	8809883a 	mov	r4,r17
   4d62c:	d8c00515 	stw	r3,20(sp)
   4d630:	d9800715 	stw	r6,28(sp)
   4d634:	da000615 	stw	r8,24(sp)
   4d638:	dd000115 	stw	r20,4(sp)
   4d63c:	d8800015 	stw	r2,0(sp)
   4d640:	00416640 	call	41664 <__mulsi3>
   4d644:	980b883a 	mov	r5,r19
   4d648:	8809883a 	mov	r4,r17
   4d64c:	d8800215 	stw	r2,8(sp)
   4d650:	00416640 	call	41664 <__mulsi3>
   4d654:	9809883a 	mov	r4,r19
   4d658:	a80b883a 	mov	r5,r21
   4d65c:	1029883a 	mov	r20,r2
   4d660:	00416640 	call	41664 <__mulsi3>
   4d664:	b00b883a 	mov	r5,r22
   4d668:	a809883a 	mov	r4,r21
   4d66c:	d8800415 	stw	r2,16(sp)
   4d670:	00416640 	call	41664 <__mulsi3>
   4d674:	d9c00217 	ldw	r7,8(sp)
   4d678:	1505883a 	add	r2,r2,r20
   4d67c:	d8c00517 	ldw	r3,20(sp)
   4d680:	3826d43a 	srli	r19,r7,16
   4d684:	d9800717 	ldw	r6,28(sp)
   4d688:	da000617 	ldw	r8,24(sp)
   4d68c:	9885883a 	add	r2,r19,r2
   4d690:	da400417 	ldw	r9,16(sp)
   4d694:	1500022e 	bgeu	r2,r20,4d6a0 <__muldf3+0x458>
   4d698:	01000074 	movhi	r4,1
   4d69c:	4913883a 	add	r9,r9,r4
   4d6a0:	1028d43a 	srli	r20,r2,16
   4d6a4:	1004943a 	slli	r2,r2,16
   4d6a8:	802cd43a 	srli	r22,r16,16
   4d6ac:	843fffcc 	andi	r16,r16,65535
   4d6b0:	3cffffcc 	andi	r19,r7,65535
   4d6b4:	9009883a 	mov	r4,r18
   4d6b8:	800b883a 	mov	r5,r16
   4d6bc:	a269883a 	add	r20,r20,r9
   4d6c0:	d8c00515 	stw	r3,20(sp)
   4d6c4:	d9800715 	stw	r6,28(sp)
   4d6c8:	da000615 	stw	r8,24(sp)
   4d6cc:	14e7883a 	add	r19,r2,r19
   4d6d0:	00416640 	call	41664 <__mulsi3>
   4d6d4:	9009883a 	mov	r4,r18
   4d6d8:	b00b883a 	mov	r5,r22
   4d6dc:	d8800315 	stw	r2,12(sp)
   4d6e0:	00416640 	call	41664 <__mulsi3>
   4d6e4:	b809883a 	mov	r4,r23
   4d6e8:	b00b883a 	mov	r5,r22
   4d6ec:	d8800215 	stw	r2,8(sp)
   4d6f0:	00416640 	call	41664 <__mulsi3>
   4d6f4:	b80b883a 	mov	r5,r23
   4d6f8:	8009883a 	mov	r4,r16
   4d6fc:	d8800415 	stw	r2,16(sp)
   4d700:	00416640 	call	41664 <__mulsi3>
   4d704:	da800317 	ldw	r10,12(sp)
   4d708:	d9c00217 	ldw	r7,8(sp)
   4d70c:	d9000017 	ldw	r4,0(sp)
   4d710:	502ed43a 	srli	r23,r10,16
   4d714:	11c5883a 	add	r2,r2,r7
   4d718:	24e5883a 	add	r18,r4,r19
   4d71c:	b885883a 	add	r2,r23,r2
   4d720:	d8c00517 	ldw	r3,20(sp)
   4d724:	d9800717 	ldw	r6,28(sp)
   4d728:	da000617 	ldw	r8,24(sp)
   4d72c:	da400417 	ldw	r9,16(sp)
   4d730:	11c0022e 	bgeu	r2,r7,4d73c <__muldf3+0x4f4>
   4d734:	01000074 	movhi	r4,1
   4d738:	4913883a 	add	r9,r9,r4
   4d73c:	100ed43a 	srli	r7,r2,16
   4d740:	1004943a 	slli	r2,r2,16
   4d744:	55ffffcc 	andi	r23,r10,65535
   4d748:	3a53883a 	add	r9,r7,r9
   4d74c:	8809883a 	mov	r4,r17
   4d750:	800b883a 	mov	r5,r16
   4d754:	d8c00515 	stw	r3,20(sp)
   4d758:	d9800715 	stw	r6,28(sp)
   4d75c:	da000615 	stw	r8,24(sp)
   4d760:	da400415 	stw	r9,16(sp)
   4d764:	15ef883a 	add	r23,r2,r23
   4d768:	00416640 	call	41664 <__mulsi3>
   4d76c:	8809883a 	mov	r4,r17
   4d770:	b00b883a 	mov	r5,r22
   4d774:	d8800215 	stw	r2,8(sp)
   4d778:	00416640 	call	41664 <__mulsi3>
   4d77c:	b00b883a 	mov	r5,r22
   4d780:	a809883a 	mov	r4,r21
   4d784:	d8800315 	stw	r2,12(sp)
   4d788:	00416640 	call	41664 <__mulsi3>
   4d78c:	8009883a 	mov	r4,r16
   4d790:	a80b883a 	mov	r5,r21
   4d794:	1023883a 	mov	r17,r2
   4d798:	00416640 	call	41664 <__mulsi3>
   4d79c:	d9c00217 	ldw	r7,8(sp)
   4d7a0:	da800317 	ldw	r10,12(sp)
   4d7a4:	d8c00517 	ldw	r3,20(sp)
   4d7a8:	3808d43a 	srli	r4,r7,16
   4d7ac:	1285883a 	add	r2,r2,r10
   4d7b0:	d9800717 	ldw	r6,28(sp)
   4d7b4:	2085883a 	add	r2,r4,r2
   4d7b8:	da000617 	ldw	r8,24(sp)
   4d7bc:	da400417 	ldw	r9,16(sp)
   4d7c0:	1280022e 	bgeu	r2,r10,4d7cc <__muldf3+0x584>
   4d7c4:	01000074 	movhi	r4,1
   4d7c8:	8923883a 	add	r17,r17,r4
   4d7cc:	1008943a 	slli	r4,r2,16
   4d7d0:	39ffffcc 	andi	r7,r7,65535
   4d7d4:	e4b9883a 	add	fp,fp,r18
   4d7d8:	21cf883a 	add	r7,r4,r7
   4d7dc:	e4e7803a 	cmpltu	r19,fp,r19
   4d7e0:	3d0f883a 	add	r7,r7,r20
   4d7e4:	bf39883a 	add	fp,r23,fp
   4d7e8:	99c9883a 	add	r4,r19,r7
   4d7ec:	e5ef803a 	cmpltu	r23,fp,r23
   4d7f0:	490b883a 	add	r5,r9,r4
   4d7f4:	1004d43a 	srli	r2,r2,16
   4d7f8:	b965883a 	add	r18,r23,r5
   4d7fc:	24c9803a 	cmpltu	r4,r4,r19
   4d800:	3d29803a 	cmpltu	r20,r7,r20
   4d804:	a128b03a 	or	r20,r20,r4
   4d808:	95ef803a 	cmpltu	r23,r18,r23
   4d80c:	2a53803a 	cmpltu	r9,r5,r9
   4d810:	a0a9883a 	add	r20,r20,r2
   4d814:	4deeb03a 	or	r23,r9,r23
   4d818:	a5ef883a 	add	r23,r20,r23
   4d81c:	bc63883a 	add	r17,r23,r17
   4d820:	e004927a 	slli	r2,fp,9
   4d824:	d9000117 	ldw	r4,4(sp)
   4d828:	882e927a 	slli	r23,r17,9
   4d82c:	9022d5fa 	srli	r17,r18,23
   4d830:	e038d5fa 	srli	fp,fp,23
   4d834:	1104b03a 	or	r2,r2,r4
   4d838:	9024927a 	slli	r18,r18,9
   4d83c:	1004c03a 	cmpne	r2,r2,zero
   4d840:	bc62b03a 	or	r17,r23,r17
   4d844:	1738b03a 	or	fp,r2,fp
   4d848:	8880402c 	andhi	r2,r17,256
   4d84c:	e4a4b03a 	or	r18,fp,r18
   4d850:	10000726 	beq	r2,zero,4d870 <__muldf3+0x628>
   4d854:	9006d07a 	srli	r3,r18,1
   4d858:	880497fa 	slli	r2,r17,31
   4d85c:	9480004c 	andi	r18,r18,1
   4d860:	8822d07a 	srli	r17,r17,1
   4d864:	1ca4b03a 	or	r18,r3,r18
   4d868:	14a4b03a 	or	r18,r2,r18
   4d86c:	4007883a 	mov	r3,r8
   4d870:	1880ffc4 	addi	r2,r3,1023
   4d874:	0080460e 	bge	zero,r2,4d990 <__muldf3+0x748>
   4d878:	910001cc 	andi	r4,r18,7
   4d87c:	20000726 	beq	r4,zero,4d89c <__muldf3+0x654>
   4d880:	910003cc 	andi	r4,r18,15
   4d884:	01400104 	movi	r5,4
   4d888:	21400426 	beq	r4,r5,4d89c <__muldf3+0x654>
   4d88c:	9149883a 	add	r4,r18,r5
   4d890:	24a5803a 	cmpltu	r18,r4,r18
   4d894:	8ca3883a 	add	r17,r17,r18
   4d898:	2025883a 	mov	r18,r4
   4d89c:	8900402c 	andhi	r4,r17,256
   4d8a0:	20000426 	beq	r4,zero,4d8b4 <__muldf3+0x66c>
   4d8a4:	18810004 	addi	r2,r3,1024
   4d8a8:	00ffc034 	movhi	r3,65280
   4d8ac:	18ffffc4 	addi	r3,r3,-1
   4d8b0:	88e2703a 	and	r17,r17,r3
   4d8b4:	00c1ff84 	movi	r3,2046
   4d8b8:	18bf1316 	blt	r3,r2,4d508 <_gp+0xffff1de0>
   4d8bc:	882c977a 	slli	r22,r17,29
   4d8c0:	9024d0fa 	srli	r18,r18,3
   4d8c4:	8822927a 	slli	r17,r17,9
   4d8c8:	1081ffcc 	andi	r2,r2,2047
   4d8cc:	b4acb03a 	or	r22,r22,r18
   4d8d0:	8820d33a 	srli	r16,r17,12
   4d8d4:	3027883a 	mov	r19,r6
   4d8d8:	003eba06 	br	4d3c4 <_gp+0xffff1c9c>
   4d8dc:	8080022c 	andhi	r2,r16,8
   4d8e0:	10000926 	beq	r2,zero,4d908 <__muldf3+0x6c0>
   4d8e4:	8880022c 	andhi	r2,r17,8
   4d8e8:	1000071e 	bne	r2,zero,4d908 <__muldf3+0x6c0>
   4d8ec:	00800434 	movhi	r2,16
   4d8f0:	8c000234 	orhi	r16,r17,8
   4d8f4:	10bfffc4 	addi	r2,r2,-1
   4d8f8:	e027883a 	mov	r19,fp
   4d8fc:	80a0703a 	and	r16,r16,r2
   4d900:	902d883a 	mov	r22,r18
   4d904:	003f1706 	br	4d564 <_gp+0xffff1e3c>
   4d908:	00800434 	movhi	r2,16
   4d90c:	84000234 	orhi	r16,r16,8
   4d910:	10bfffc4 	addi	r2,r2,-1
   4d914:	80a0703a 	and	r16,r16,r2
   4d918:	003f1206 	br	4d564 <_gp+0xffff1e3c>
   4d91c:	147ff604 	addi	r17,r2,-40
   4d920:	3462983a 	sll	r17,r6,r17
   4d924:	0025883a 	mov	r18,zero
   4d928:	003ef306 	br	4d4f8 <_gp+0xffff1dd0>
   4d92c:	3009883a 	mov	r4,r6
   4d930:	d9400215 	stw	r5,8(sp)
   4d934:	d9800715 	stw	r6,28(sp)
   4d938:	da400415 	stw	r9,16(sp)
   4d93c:	da800315 	stw	r10,12(sp)
   4d940:	004144c0 	call	4144c <__clzsi2>
   4d944:	10800804 	addi	r2,r2,32
   4d948:	da800317 	ldw	r10,12(sp)
   4d94c:	da400417 	ldw	r9,16(sp)
   4d950:	d9800717 	ldw	r6,28(sp)
   4d954:	d9400217 	ldw	r5,8(sp)
   4d958:	003edd06 	br	4d4d0 <_gp+0xffff1da8>
   4d95c:	143ff604 	addi	r16,r2,-40
   4d960:	ac20983a 	sll	r16,r21,r16
   4d964:	002d883a 	mov	r22,zero
   4d968:	003ec106 	br	4d470 <_gp+0xffff1d48>
   4d96c:	d9800715 	stw	r6,28(sp)
   4d970:	d9c00215 	stw	r7,8(sp)
   4d974:	da400415 	stw	r9,16(sp)
   4d978:	004144c0 	call	4144c <__clzsi2>
   4d97c:	10800804 	addi	r2,r2,32
   4d980:	da400417 	ldw	r9,16(sp)
   4d984:	d9c00217 	ldw	r7,8(sp)
   4d988:	d9800717 	ldw	r6,28(sp)
   4d98c:	003eae06 	br	4d448 <_gp+0xffff1d20>
   4d990:	00c00044 	movi	r3,1
   4d994:	1887c83a 	sub	r3,r3,r2
   4d998:	01000e04 	movi	r4,56
   4d99c:	20fe8516 	blt	r4,r3,4d3b4 <_gp+0xffff1c8c>
   4d9a0:	010007c4 	movi	r4,31
   4d9a4:	20c01b16 	blt	r4,r3,4da14 <__muldf3+0x7cc>
   4d9a8:	00800804 	movi	r2,32
   4d9ac:	10c5c83a 	sub	r2,r2,r3
   4d9b0:	888a983a 	sll	r5,r17,r2
   4d9b4:	90c8d83a 	srl	r4,r18,r3
   4d9b8:	9084983a 	sll	r2,r18,r2
   4d9bc:	88e2d83a 	srl	r17,r17,r3
   4d9c0:	2906b03a 	or	r3,r5,r4
   4d9c4:	1004c03a 	cmpne	r2,r2,zero
   4d9c8:	1886b03a 	or	r3,r3,r2
   4d9cc:	188001cc 	andi	r2,r3,7
   4d9d0:	10000726 	beq	r2,zero,4d9f0 <__muldf3+0x7a8>
   4d9d4:	188003cc 	andi	r2,r3,15
   4d9d8:	01000104 	movi	r4,4
   4d9dc:	11000426 	beq	r2,r4,4d9f0 <__muldf3+0x7a8>
   4d9e0:	1805883a 	mov	r2,r3
   4d9e4:	10c00104 	addi	r3,r2,4
   4d9e8:	1885803a 	cmpltu	r2,r3,r2
   4d9ec:	88a3883a 	add	r17,r17,r2
   4d9f0:	8880202c 	andhi	r2,r17,128
   4d9f4:	10001c26 	beq	r2,zero,4da68 <__muldf3+0x820>
   4d9f8:	3027883a 	mov	r19,r6
   4d9fc:	00800044 	movi	r2,1
   4da00:	0021883a 	mov	r16,zero
   4da04:	002d883a 	mov	r22,zero
   4da08:	003e6e06 	br	4d3c4 <_gp+0xffff1c9c>
   4da0c:	4007883a 	mov	r3,r8
   4da10:	003f9706 	br	4d870 <_gp+0xffff2148>
   4da14:	017ff844 	movi	r5,-31
   4da18:	2885c83a 	sub	r2,r5,r2
   4da1c:	888ad83a 	srl	r5,r17,r2
   4da20:	00800804 	movi	r2,32
   4da24:	18801a26 	beq	r3,r2,4da90 <__muldf3+0x848>
   4da28:	01001004 	movi	r4,64
   4da2c:	20c7c83a 	sub	r3,r4,r3
   4da30:	88e2983a 	sll	r17,r17,r3
   4da34:	8ca4b03a 	or	r18,r17,r18
   4da38:	9004c03a 	cmpne	r2,r18,zero
   4da3c:	2884b03a 	or	r2,r5,r2
   4da40:	144001cc 	andi	r17,r2,7
   4da44:	88000d1e 	bne	r17,zero,4da7c <__muldf3+0x834>
   4da48:	0021883a 	mov	r16,zero
   4da4c:	102cd0fa 	srli	r22,r2,3
   4da50:	3027883a 	mov	r19,r6
   4da54:	0005883a 	mov	r2,zero
   4da58:	b46cb03a 	or	r22,r22,r17
   4da5c:	003e5906 	br	4d3c4 <_gp+0xffff1c9c>
   4da60:	1007883a 	mov	r3,r2
   4da64:	0023883a 	mov	r17,zero
   4da68:	8820927a 	slli	r16,r17,9
   4da6c:	1805883a 	mov	r2,r3
   4da70:	8822977a 	slli	r17,r17,29
   4da74:	8020d33a 	srli	r16,r16,12
   4da78:	003ff406 	br	4da4c <_gp+0xffff2324>
   4da7c:	10c003cc 	andi	r3,r2,15
   4da80:	01000104 	movi	r4,4
   4da84:	193ff626 	beq	r3,r4,4da60 <_gp+0xffff2338>
   4da88:	0023883a 	mov	r17,zero
   4da8c:	003fd506 	br	4d9e4 <_gp+0xffff22bc>
   4da90:	0023883a 	mov	r17,zero
   4da94:	003fe706 	br	4da34 <_gp+0xffff230c>
   4da98:	00800434 	movhi	r2,16
   4da9c:	8c000234 	orhi	r16,r17,8
   4daa0:	10bfffc4 	addi	r2,r2,-1
   4daa4:	3027883a 	mov	r19,r6
   4daa8:	80a0703a 	and	r16,r16,r2
   4daac:	902d883a 	mov	r22,r18
   4dab0:	003eac06 	br	4d564 <_gp+0xffff1e3c>

0004dab4 <__subdf3>:
   4dab4:	02000434 	movhi	r8,16
   4dab8:	423fffc4 	addi	r8,r8,-1
   4dabc:	defffb04 	addi	sp,sp,-20
   4dac0:	2a14703a 	and	r10,r5,r8
   4dac4:	3812d53a 	srli	r9,r7,20
   4dac8:	3a10703a 	and	r8,r7,r8
   4dacc:	2006d77a 	srli	r3,r4,29
   4dad0:	3004d77a 	srli	r2,r6,29
   4dad4:	dc000015 	stw	r16,0(sp)
   4dad8:	501490fa 	slli	r10,r10,3
   4dadc:	2820d53a 	srli	r16,r5,20
   4dae0:	401090fa 	slli	r8,r8,3
   4dae4:	dc800215 	stw	r18,8(sp)
   4dae8:	dc400115 	stw	r17,4(sp)
   4daec:	dfc00415 	stw	ra,16(sp)
   4daf0:	202290fa 	slli	r17,r4,3
   4daf4:	dcc00315 	stw	r19,12(sp)
   4daf8:	4a41ffcc 	andi	r9,r9,2047
   4dafc:	0101ffc4 	movi	r4,2047
   4db00:	2824d7fa 	srli	r18,r5,31
   4db04:	8401ffcc 	andi	r16,r16,2047
   4db08:	50c6b03a 	or	r3,r10,r3
   4db0c:	380ed7fa 	srli	r7,r7,31
   4db10:	408ab03a 	or	r5,r8,r2
   4db14:	300c90fa 	slli	r6,r6,3
   4db18:	49009626 	beq	r9,r4,4dd74 <__subdf3+0x2c0>
   4db1c:	39c0005c 	xori	r7,r7,1
   4db20:	8245c83a 	sub	r2,r16,r9
   4db24:	3c807426 	beq	r7,r18,4dcf8 <__subdf3+0x244>
   4db28:	0080af0e 	bge	zero,r2,4dde8 <__subdf3+0x334>
   4db2c:	48002a1e 	bne	r9,zero,4dbd8 <__subdf3+0x124>
   4db30:	2988b03a 	or	r4,r5,r6
   4db34:	20009a1e 	bne	r4,zero,4dda0 <__subdf3+0x2ec>
   4db38:	888001cc 	andi	r2,r17,7
   4db3c:	10000726 	beq	r2,zero,4db5c <__subdf3+0xa8>
   4db40:	888003cc 	andi	r2,r17,15
   4db44:	01000104 	movi	r4,4
   4db48:	11000426 	beq	r2,r4,4db5c <__subdf3+0xa8>
   4db4c:	890b883a 	add	r5,r17,r4
   4db50:	2c63803a 	cmpltu	r17,r5,r17
   4db54:	1c47883a 	add	r3,r3,r17
   4db58:	2823883a 	mov	r17,r5
   4db5c:	1880202c 	andhi	r2,r3,128
   4db60:	10005926 	beq	r2,zero,4dcc8 <__subdf3+0x214>
   4db64:	84000044 	addi	r16,r16,1
   4db68:	0081ffc4 	movi	r2,2047
   4db6c:	8080be26 	beq	r16,r2,4de68 <__subdf3+0x3b4>
   4db70:	017fe034 	movhi	r5,65408
   4db74:	297fffc4 	addi	r5,r5,-1
   4db78:	1946703a 	and	r3,r3,r5
   4db7c:	1804977a 	slli	r2,r3,29
   4db80:	1806927a 	slli	r3,r3,9
   4db84:	8822d0fa 	srli	r17,r17,3
   4db88:	8401ffcc 	andi	r16,r16,2047
   4db8c:	180ad33a 	srli	r5,r3,12
   4db90:	9100004c 	andi	r4,r18,1
   4db94:	1444b03a 	or	r2,r2,r17
   4db98:	80c1ffcc 	andi	r3,r16,2047
   4db9c:	1820953a 	slli	r16,r3,20
   4dba0:	20c03fcc 	andi	r3,r4,255
   4dba4:	180897fa 	slli	r4,r3,31
   4dba8:	00c00434 	movhi	r3,16
   4dbac:	18ffffc4 	addi	r3,r3,-1
   4dbb0:	28c6703a 	and	r3,r5,r3
   4dbb4:	1c06b03a 	or	r3,r3,r16
   4dbb8:	1906b03a 	or	r3,r3,r4
   4dbbc:	dfc00417 	ldw	ra,16(sp)
   4dbc0:	dcc00317 	ldw	r19,12(sp)
   4dbc4:	dc800217 	ldw	r18,8(sp)
   4dbc8:	dc400117 	ldw	r17,4(sp)
   4dbcc:	dc000017 	ldw	r16,0(sp)
   4dbd0:	dec00504 	addi	sp,sp,20
   4dbd4:	f800283a 	ret
   4dbd8:	0101ffc4 	movi	r4,2047
   4dbdc:	813fd626 	beq	r16,r4,4db38 <_gp+0xffff2410>
   4dbe0:	29402034 	orhi	r5,r5,128
   4dbe4:	01000e04 	movi	r4,56
   4dbe8:	2080a316 	blt	r4,r2,4de78 <__subdf3+0x3c4>
   4dbec:	010007c4 	movi	r4,31
   4dbf0:	2080c616 	blt	r4,r2,4df0c <__subdf3+0x458>
   4dbf4:	01000804 	movi	r4,32
   4dbf8:	2089c83a 	sub	r4,r4,r2
   4dbfc:	2910983a 	sll	r8,r5,r4
   4dc00:	308ed83a 	srl	r7,r6,r2
   4dc04:	3108983a 	sll	r4,r6,r4
   4dc08:	2884d83a 	srl	r2,r5,r2
   4dc0c:	41ccb03a 	or	r6,r8,r7
   4dc10:	2008c03a 	cmpne	r4,r4,zero
   4dc14:	310cb03a 	or	r6,r6,r4
   4dc18:	898dc83a 	sub	r6,r17,r6
   4dc1c:	89a3803a 	cmpltu	r17,r17,r6
   4dc20:	1887c83a 	sub	r3,r3,r2
   4dc24:	1c47c83a 	sub	r3,r3,r17
   4dc28:	3023883a 	mov	r17,r6
   4dc2c:	1880202c 	andhi	r2,r3,128
   4dc30:	10002326 	beq	r2,zero,4dcc0 <__subdf3+0x20c>
   4dc34:	04c02034 	movhi	r19,128
   4dc38:	9cffffc4 	addi	r19,r19,-1
   4dc3c:	1ce6703a 	and	r19,r3,r19
   4dc40:	98007a26 	beq	r19,zero,4de2c <__subdf3+0x378>
   4dc44:	9809883a 	mov	r4,r19
   4dc48:	004144c0 	call	4144c <__clzsi2>
   4dc4c:	113ffe04 	addi	r4,r2,-8
   4dc50:	00c007c4 	movi	r3,31
   4dc54:	19007b16 	blt	r3,r4,4de44 <__subdf3+0x390>
   4dc58:	00800804 	movi	r2,32
   4dc5c:	1105c83a 	sub	r2,r2,r4
   4dc60:	8884d83a 	srl	r2,r17,r2
   4dc64:	9906983a 	sll	r3,r19,r4
   4dc68:	8922983a 	sll	r17,r17,r4
   4dc6c:	10c4b03a 	or	r2,r2,r3
   4dc70:	24007816 	blt	r4,r16,4de54 <__subdf3+0x3a0>
   4dc74:	2421c83a 	sub	r16,r4,r16
   4dc78:	80c00044 	addi	r3,r16,1
   4dc7c:	010007c4 	movi	r4,31
   4dc80:	20c09516 	blt	r4,r3,4ded8 <__subdf3+0x424>
   4dc84:	01400804 	movi	r5,32
   4dc88:	28cbc83a 	sub	r5,r5,r3
   4dc8c:	88c8d83a 	srl	r4,r17,r3
   4dc90:	8962983a 	sll	r17,r17,r5
   4dc94:	114a983a 	sll	r5,r2,r5
   4dc98:	10c6d83a 	srl	r3,r2,r3
   4dc9c:	8804c03a 	cmpne	r2,r17,zero
   4dca0:	290ab03a 	or	r5,r5,r4
   4dca4:	28a2b03a 	or	r17,r5,r2
   4dca8:	0021883a 	mov	r16,zero
   4dcac:	003fa206 	br	4db38 <_gp+0xffff2410>
   4dcb0:	2090b03a 	or	r8,r4,r2
   4dcb4:	40018e26 	beq	r8,zero,4e2f0 <__subdf3+0x83c>
   4dcb8:	1007883a 	mov	r3,r2
   4dcbc:	2023883a 	mov	r17,r4
   4dcc0:	888001cc 	andi	r2,r17,7
   4dcc4:	103f9e1e 	bne	r2,zero,4db40 <_gp+0xffff2418>
   4dcc8:	1804977a 	slli	r2,r3,29
   4dccc:	8822d0fa 	srli	r17,r17,3
   4dcd0:	1810d0fa 	srli	r8,r3,3
   4dcd4:	9100004c 	andi	r4,r18,1
   4dcd8:	1444b03a 	or	r2,r2,r17
   4dcdc:	00c1ffc4 	movi	r3,2047
   4dce0:	80c02826 	beq	r16,r3,4dd84 <__subdf3+0x2d0>
   4dce4:	01400434 	movhi	r5,16
   4dce8:	297fffc4 	addi	r5,r5,-1
   4dcec:	80e0703a 	and	r16,r16,r3
   4dcf0:	414a703a 	and	r5,r8,r5
   4dcf4:	003fa806 	br	4db98 <_gp+0xffff2470>
   4dcf8:	0080630e 	bge	zero,r2,4de88 <__subdf3+0x3d4>
   4dcfc:	48003026 	beq	r9,zero,4ddc0 <__subdf3+0x30c>
   4dd00:	0101ffc4 	movi	r4,2047
   4dd04:	813f8c26 	beq	r16,r4,4db38 <_gp+0xffff2410>
   4dd08:	29402034 	orhi	r5,r5,128
   4dd0c:	01000e04 	movi	r4,56
   4dd10:	2080a90e 	bge	r4,r2,4dfb8 <__subdf3+0x504>
   4dd14:	298cb03a 	or	r6,r5,r6
   4dd18:	3012c03a 	cmpne	r9,r6,zero
   4dd1c:	0005883a 	mov	r2,zero
   4dd20:	4c53883a 	add	r9,r9,r17
   4dd24:	4c63803a 	cmpltu	r17,r9,r17
   4dd28:	10c7883a 	add	r3,r2,r3
   4dd2c:	88c7883a 	add	r3,r17,r3
   4dd30:	4823883a 	mov	r17,r9
   4dd34:	1880202c 	andhi	r2,r3,128
   4dd38:	1000d026 	beq	r2,zero,4e07c <__subdf3+0x5c8>
   4dd3c:	84000044 	addi	r16,r16,1
   4dd40:	0081ffc4 	movi	r2,2047
   4dd44:	8080fe26 	beq	r16,r2,4e140 <__subdf3+0x68c>
   4dd48:	00bfe034 	movhi	r2,65408
   4dd4c:	10bfffc4 	addi	r2,r2,-1
   4dd50:	1886703a 	and	r3,r3,r2
   4dd54:	880ad07a 	srli	r5,r17,1
   4dd58:	180497fa 	slli	r2,r3,31
   4dd5c:	8900004c 	andi	r4,r17,1
   4dd60:	2922b03a 	or	r17,r5,r4
   4dd64:	1806d07a 	srli	r3,r3,1
   4dd68:	1462b03a 	or	r17,r2,r17
   4dd6c:	3825883a 	mov	r18,r7
   4dd70:	003f7106 	br	4db38 <_gp+0xffff2410>
   4dd74:	2984b03a 	or	r2,r5,r6
   4dd78:	103f6826 	beq	r2,zero,4db1c <_gp+0xffff23f4>
   4dd7c:	39c03fcc 	andi	r7,r7,255
   4dd80:	003f6706 	br	4db20 <_gp+0xffff23f8>
   4dd84:	4086b03a 	or	r3,r8,r2
   4dd88:	18015226 	beq	r3,zero,4e2d4 <__subdf3+0x820>
   4dd8c:	00c00434 	movhi	r3,16
   4dd90:	41400234 	orhi	r5,r8,8
   4dd94:	18ffffc4 	addi	r3,r3,-1
   4dd98:	28ca703a 	and	r5,r5,r3
   4dd9c:	003f7e06 	br	4db98 <_gp+0xffff2470>
   4dda0:	10bfffc4 	addi	r2,r2,-1
   4dda4:	1000491e 	bne	r2,zero,4decc <__subdf3+0x418>
   4dda8:	898fc83a 	sub	r7,r17,r6
   4ddac:	89e3803a 	cmpltu	r17,r17,r7
   4ddb0:	1947c83a 	sub	r3,r3,r5
   4ddb4:	1c47c83a 	sub	r3,r3,r17
   4ddb8:	3823883a 	mov	r17,r7
   4ddbc:	003f9b06 	br	4dc2c <_gp+0xffff2504>
   4ddc0:	2988b03a 	or	r4,r5,r6
   4ddc4:	203f5c26 	beq	r4,zero,4db38 <_gp+0xffff2410>
   4ddc8:	10bfffc4 	addi	r2,r2,-1
   4ddcc:	1000931e 	bne	r2,zero,4e01c <__subdf3+0x568>
   4ddd0:	898d883a 	add	r6,r17,r6
   4ddd4:	3463803a 	cmpltu	r17,r6,r17
   4ddd8:	1947883a 	add	r3,r3,r5
   4dddc:	88c7883a 	add	r3,r17,r3
   4dde0:	3023883a 	mov	r17,r6
   4dde4:	003fd306 	br	4dd34 <_gp+0xffff260c>
   4dde8:	1000541e 	bne	r2,zero,4df3c <__subdf3+0x488>
   4ddec:	80800044 	addi	r2,r16,1
   4ddf0:	1081ffcc 	andi	r2,r2,2047
   4ddf4:	01000044 	movi	r4,1
   4ddf8:	2080a20e 	bge	r4,r2,4e084 <__subdf3+0x5d0>
   4ddfc:	8989c83a 	sub	r4,r17,r6
   4de00:	8905803a 	cmpltu	r2,r17,r4
   4de04:	1967c83a 	sub	r19,r3,r5
   4de08:	98a7c83a 	sub	r19,r19,r2
   4de0c:	9880202c 	andhi	r2,r19,128
   4de10:	10006326 	beq	r2,zero,4dfa0 <__subdf3+0x4ec>
   4de14:	3463c83a 	sub	r17,r6,r17
   4de18:	28c7c83a 	sub	r3,r5,r3
   4de1c:	344d803a 	cmpltu	r6,r6,r17
   4de20:	19a7c83a 	sub	r19,r3,r6
   4de24:	3825883a 	mov	r18,r7
   4de28:	983f861e 	bne	r19,zero,4dc44 <_gp+0xffff251c>
   4de2c:	8809883a 	mov	r4,r17
   4de30:	004144c0 	call	4144c <__clzsi2>
   4de34:	10800804 	addi	r2,r2,32
   4de38:	113ffe04 	addi	r4,r2,-8
   4de3c:	00c007c4 	movi	r3,31
   4de40:	193f850e 	bge	r3,r4,4dc58 <_gp+0xffff2530>
   4de44:	10bff604 	addi	r2,r2,-40
   4de48:	8884983a 	sll	r2,r17,r2
   4de4c:	0023883a 	mov	r17,zero
   4de50:	243f880e 	bge	r4,r16,4dc74 <_gp+0xffff254c>
   4de54:	00ffe034 	movhi	r3,65408
   4de58:	18ffffc4 	addi	r3,r3,-1
   4de5c:	8121c83a 	sub	r16,r16,r4
   4de60:	10c6703a 	and	r3,r2,r3
   4de64:	003f3406 	br	4db38 <_gp+0xffff2410>
   4de68:	9100004c 	andi	r4,r18,1
   4de6c:	000b883a 	mov	r5,zero
   4de70:	0005883a 	mov	r2,zero
   4de74:	003f4806 	br	4db98 <_gp+0xffff2470>
   4de78:	298cb03a 	or	r6,r5,r6
   4de7c:	300cc03a 	cmpne	r6,r6,zero
   4de80:	0005883a 	mov	r2,zero
   4de84:	003f6406 	br	4dc18 <_gp+0xffff24f0>
   4de88:	10009a1e 	bne	r2,zero,4e0f4 <__subdf3+0x640>
   4de8c:	82400044 	addi	r9,r16,1
   4de90:	4881ffcc 	andi	r2,r9,2047
   4de94:	02800044 	movi	r10,1
   4de98:	5080670e 	bge	r10,r2,4e038 <__subdf3+0x584>
   4de9c:	0081ffc4 	movi	r2,2047
   4dea0:	4880af26 	beq	r9,r2,4e160 <__subdf3+0x6ac>
   4dea4:	898d883a 	add	r6,r17,r6
   4dea8:	1945883a 	add	r2,r3,r5
   4deac:	3447803a 	cmpltu	r3,r6,r17
   4deb0:	1887883a 	add	r3,r3,r2
   4deb4:	182297fa 	slli	r17,r3,31
   4deb8:	300cd07a 	srli	r6,r6,1
   4debc:	1806d07a 	srli	r3,r3,1
   4dec0:	4821883a 	mov	r16,r9
   4dec4:	89a2b03a 	or	r17,r17,r6
   4dec8:	003f1b06 	br	4db38 <_gp+0xffff2410>
   4decc:	0101ffc4 	movi	r4,2047
   4ded0:	813f441e 	bne	r16,r4,4dbe4 <_gp+0xffff24bc>
   4ded4:	003f1806 	br	4db38 <_gp+0xffff2410>
   4ded8:	843ff844 	addi	r16,r16,-31
   4dedc:	01400804 	movi	r5,32
   4dee0:	1408d83a 	srl	r4,r2,r16
   4dee4:	19405026 	beq	r3,r5,4e028 <__subdf3+0x574>
   4dee8:	01401004 	movi	r5,64
   4deec:	28c7c83a 	sub	r3,r5,r3
   4def0:	10c4983a 	sll	r2,r2,r3
   4def4:	88a2b03a 	or	r17,r17,r2
   4def8:	8822c03a 	cmpne	r17,r17,zero
   4defc:	2462b03a 	or	r17,r4,r17
   4df00:	0007883a 	mov	r3,zero
   4df04:	0021883a 	mov	r16,zero
   4df08:	003f6d06 	br	4dcc0 <_gp+0xffff2598>
   4df0c:	11fff804 	addi	r7,r2,-32
   4df10:	01000804 	movi	r4,32
   4df14:	29ced83a 	srl	r7,r5,r7
   4df18:	11004526 	beq	r2,r4,4e030 <__subdf3+0x57c>
   4df1c:	01001004 	movi	r4,64
   4df20:	2089c83a 	sub	r4,r4,r2
   4df24:	2904983a 	sll	r2,r5,r4
   4df28:	118cb03a 	or	r6,r2,r6
   4df2c:	300cc03a 	cmpne	r6,r6,zero
   4df30:	398cb03a 	or	r6,r7,r6
   4df34:	0005883a 	mov	r2,zero
   4df38:	003f3706 	br	4dc18 <_gp+0xffff24f0>
   4df3c:	80002a26 	beq	r16,zero,4dfe8 <__subdf3+0x534>
   4df40:	0101ffc4 	movi	r4,2047
   4df44:	49006626 	beq	r9,r4,4e0e0 <__subdf3+0x62c>
   4df48:	0085c83a 	sub	r2,zero,r2
   4df4c:	18c02034 	orhi	r3,r3,128
   4df50:	01000e04 	movi	r4,56
   4df54:	20807e16 	blt	r4,r2,4e150 <__subdf3+0x69c>
   4df58:	010007c4 	movi	r4,31
   4df5c:	2080e716 	blt	r4,r2,4e2fc <__subdf3+0x848>
   4df60:	01000804 	movi	r4,32
   4df64:	2089c83a 	sub	r4,r4,r2
   4df68:	1914983a 	sll	r10,r3,r4
   4df6c:	8890d83a 	srl	r8,r17,r2
   4df70:	8908983a 	sll	r4,r17,r4
   4df74:	1884d83a 	srl	r2,r3,r2
   4df78:	5222b03a 	or	r17,r10,r8
   4df7c:	2006c03a 	cmpne	r3,r4,zero
   4df80:	88e2b03a 	or	r17,r17,r3
   4df84:	3463c83a 	sub	r17,r6,r17
   4df88:	2885c83a 	sub	r2,r5,r2
   4df8c:	344d803a 	cmpltu	r6,r6,r17
   4df90:	1187c83a 	sub	r3,r2,r6
   4df94:	4821883a 	mov	r16,r9
   4df98:	3825883a 	mov	r18,r7
   4df9c:	003f2306 	br	4dc2c <_gp+0xffff2504>
   4dfa0:	24d0b03a 	or	r8,r4,r19
   4dfa4:	40001b1e 	bne	r8,zero,4e014 <__subdf3+0x560>
   4dfa8:	0005883a 	mov	r2,zero
   4dfac:	0009883a 	mov	r4,zero
   4dfb0:	0021883a 	mov	r16,zero
   4dfb4:	003f4906 	br	4dcdc <_gp+0xffff25b4>
   4dfb8:	010007c4 	movi	r4,31
   4dfbc:	20803a16 	blt	r4,r2,4e0a8 <__subdf3+0x5f4>
   4dfc0:	01000804 	movi	r4,32
   4dfc4:	2089c83a 	sub	r4,r4,r2
   4dfc8:	2912983a 	sll	r9,r5,r4
   4dfcc:	3090d83a 	srl	r8,r6,r2
   4dfd0:	3108983a 	sll	r4,r6,r4
   4dfd4:	2884d83a 	srl	r2,r5,r2
   4dfd8:	4a12b03a 	or	r9,r9,r8
   4dfdc:	2008c03a 	cmpne	r4,r4,zero
   4dfe0:	4912b03a 	or	r9,r9,r4
   4dfe4:	003f4e06 	br	4dd20 <_gp+0xffff25f8>
   4dfe8:	1c48b03a 	or	r4,r3,r17
   4dfec:	20003c26 	beq	r4,zero,4e0e0 <__subdf3+0x62c>
   4dff0:	0084303a 	nor	r2,zero,r2
   4dff4:	1000381e 	bne	r2,zero,4e0d8 <__subdf3+0x624>
   4dff8:	3463c83a 	sub	r17,r6,r17
   4dffc:	28c5c83a 	sub	r2,r5,r3
   4e000:	344d803a 	cmpltu	r6,r6,r17
   4e004:	1187c83a 	sub	r3,r2,r6
   4e008:	4821883a 	mov	r16,r9
   4e00c:	3825883a 	mov	r18,r7
   4e010:	003f0606 	br	4dc2c <_gp+0xffff2504>
   4e014:	2023883a 	mov	r17,r4
   4e018:	003f0906 	br	4dc40 <_gp+0xffff2518>
   4e01c:	0101ffc4 	movi	r4,2047
   4e020:	813f3a1e 	bne	r16,r4,4dd0c <_gp+0xffff25e4>
   4e024:	003ec406 	br	4db38 <_gp+0xffff2410>
   4e028:	0005883a 	mov	r2,zero
   4e02c:	003fb106 	br	4def4 <_gp+0xffff27cc>
   4e030:	0005883a 	mov	r2,zero
   4e034:	003fbc06 	br	4df28 <_gp+0xffff2800>
   4e038:	1c44b03a 	or	r2,r3,r17
   4e03c:	80008e1e 	bne	r16,zero,4e278 <__subdf3+0x7c4>
   4e040:	1000c826 	beq	r2,zero,4e364 <__subdf3+0x8b0>
   4e044:	2984b03a 	or	r2,r5,r6
   4e048:	103ebb26 	beq	r2,zero,4db38 <_gp+0xffff2410>
   4e04c:	8989883a 	add	r4,r17,r6
   4e050:	1945883a 	add	r2,r3,r5
   4e054:	2447803a 	cmpltu	r3,r4,r17
   4e058:	1887883a 	add	r3,r3,r2
   4e05c:	1880202c 	andhi	r2,r3,128
   4e060:	2023883a 	mov	r17,r4
   4e064:	103f1626 	beq	r2,zero,4dcc0 <_gp+0xffff2598>
   4e068:	00bfe034 	movhi	r2,65408
   4e06c:	10bfffc4 	addi	r2,r2,-1
   4e070:	5021883a 	mov	r16,r10
   4e074:	1886703a 	and	r3,r3,r2
   4e078:	003eaf06 	br	4db38 <_gp+0xffff2410>
   4e07c:	3825883a 	mov	r18,r7
   4e080:	003f0f06 	br	4dcc0 <_gp+0xffff2598>
   4e084:	1c44b03a 	or	r2,r3,r17
   4e088:	8000251e 	bne	r16,zero,4e120 <__subdf3+0x66c>
   4e08c:	1000661e 	bne	r2,zero,4e228 <__subdf3+0x774>
   4e090:	2990b03a 	or	r8,r5,r6
   4e094:	40009626 	beq	r8,zero,4e2f0 <__subdf3+0x83c>
   4e098:	2807883a 	mov	r3,r5
   4e09c:	3023883a 	mov	r17,r6
   4e0a0:	3825883a 	mov	r18,r7
   4e0a4:	003ea406 	br	4db38 <_gp+0xffff2410>
   4e0a8:	127ff804 	addi	r9,r2,-32
   4e0ac:	01000804 	movi	r4,32
   4e0b0:	2a52d83a 	srl	r9,r5,r9
   4e0b4:	11008c26 	beq	r2,r4,4e2e8 <__subdf3+0x834>
   4e0b8:	01001004 	movi	r4,64
   4e0bc:	2085c83a 	sub	r2,r4,r2
   4e0c0:	2884983a 	sll	r2,r5,r2
   4e0c4:	118cb03a 	or	r6,r2,r6
   4e0c8:	300cc03a 	cmpne	r6,r6,zero
   4e0cc:	4992b03a 	or	r9,r9,r6
   4e0d0:	0005883a 	mov	r2,zero
   4e0d4:	003f1206 	br	4dd20 <_gp+0xffff25f8>
   4e0d8:	0101ffc4 	movi	r4,2047
   4e0dc:	493f9c1e 	bne	r9,r4,4df50 <_gp+0xffff2828>
   4e0e0:	2807883a 	mov	r3,r5
   4e0e4:	3023883a 	mov	r17,r6
   4e0e8:	4821883a 	mov	r16,r9
   4e0ec:	3825883a 	mov	r18,r7
   4e0f0:	003e9106 	br	4db38 <_gp+0xffff2410>
   4e0f4:	80001f1e 	bne	r16,zero,4e174 <__subdf3+0x6c0>
   4e0f8:	1c48b03a 	or	r4,r3,r17
   4e0fc:	20005a26 	beq	r4,zero,4e268 <__subdf3+0x7b4>
   4e100:	0084303a 	nor	r2,zero,r2
   4e104:	1000561e 	bne	r2,zero,4e260 <__subdf3+0x7ac>
   4e108:	89a3883a 	add	r17,r17,r6
   4e10c:	1945883a 	add	r2,r3,r5
   4e110:	898d803a 	cmpltu	r6,r17,r6
   4e114:	3087883a 	add	r3,r6,r2
   4e118:	4821883a 	mov	r16,r9
   4e11c:	003f0506 	br	4dd34 <_gp+0xffff260c>
   4e120:	10002b1e 	bne	r2,zero,4e1d0 <__subdf3+0x71c>
   4e124:	2984b03a 	or	r2,r5,r6
   4e128:	10008026 	beq	r2,zero,4e32c <__subdf3+0x878>
   4e12c:	2807883a 	mov	r3,r5
   4e130:	3023883a 	mov	r17,r6
   4e134:	3825883a 	mov	r18,r7
   4e138:	0401ffc4 	movi	r16,2047
   4e13c:	003e7e06 	br	4db38 <_gp+0xffff2410>
   4e140:	3809883a 	mov	r4,r7
   4e144:	0011883a 	mov	r8,zero
   4e148:	0005883a 	mov	r2,zero
   4e14c:	003ee306 	br	4dcdc <_gp+0xffff25b4>
   4e150:	1c62b03a 	or	r17,r3,r17
   4e154:	8822c03a 	cmpne	r17,r17,zero
   4e158:	0005883a 	mov	r2,zero
   4e15c:	003f8906 	br	4df84 <_gp+0xffff285c>
   4e160:	3809883a 	mov	r4,r7
   4e164:	4821883a 	mov	r16,r9
   4e168:	0011883a 	mov	r8,zero
   4e16c:	0005883a 	mov	r2,zero
   4e170:	003eda06 	br	4dcdc <_gp+0xffff25b4>
   4e174:	0101ffc4 	movi	r4,2047
   4e178:	49003b26 	beq	r9,r4,4e268 <__subdf3+0x7b4>
   4e17c:	0085c83a 	sub	r2,zero,r2
   4e180:	18c02034 	orhi	r3,r3,128
   4e184:	01000e04 	movi	r4,56
   4e188:	20806e16 	blt	r4,r2,4e344 <__subdf3+0x890>
   4e18c:	010007c4 	movi	r4,31
   4e190:	20807716 	blt	r4,r2,4e370 <__subdf3+0x8bc>
   4e194:	01000804 	movi	r4,32
   4e198:	2089c83a 	sub	r4,r4,r2
   4e19c:	1914983a 	sll	r10,r3,r4
   4e1a0:	8890d83a 	srl	r8,r17,r2
   4e1a4:	8908983a 	sll	r4,r17,r4
   4e1a8:	1884d83a 	srl	r2,r3,r2
   4e1ac:	5222b03a 	or	r17,r10,r8
   4e1b0:	2006c03a 	cmpne	r3,r4,zero
   4e1b4:	88e2b03a 	or	r17,r17,r3
   4e1b8:	89a3883a 	add	r17,r17,r6
   4e1bc:	1145883a 	add	r2,r2,r5
   4e1c0:	898d803a 	cmpltu	r6,r17,r6
   4e1c4:	3087883a 	add	r3,r6,r2
   4e1c8:	4821883a 	mov	r16,r9
   4e1cc:	003ed906 	br	4dd34 <_gp+0xffff260c>
   4e1d0:	2984b03a 	or	r2,r5,r6
   4e1d4:	10004226 	beq	r2,zero,4e2e0 <__subdf3+0x82c>
   4e1d8:	1808d0fa 	srli	r4,r3,3
   4e1dc:	8822d0fa 	srli	r17,r17,3
   4e1e0:	1806977a 	slli	r3,r3,29
   4e1e4:	2080022c 	andhi	r2,r4,8
   4e1e8:	1c62b03a 	or	r17,r3,r17
   4e1ec:	10000826 	beq	r2,zero,4e210 <__subdf3+0x75c>
   4e1f0:	2812d0fa 	srli	r9,r5,3
   4e1f4:	4880022c 	andhi	r2,r9,8
   4e1f8:	1000051e 	bne	r2,zero,4e210 <__subdf3+0x75c>
   4e1fc:	300cd0fa 	srli	r6,r6,3
   4e200:	2804977a 	slli	r2,r5,29
   4e204:	4809883a 	mov	r4,r9
   4e208:	3825883a 	mov	r18,r7
   4e20c:	11a2b03a 	or	r17,r2,r6
   4e210:	8806d77a 	srli	r3,r17,29
   4e214:	200890fa 	slli	r4,r4,3
   4e218:	882290fa 	slli	r17,r17,3
   4e21c:	0401ffc4 	movi	r16,2047
   4e220:	1906b03a 	or	r3,r3,r4
   4e224:	003e4406 	br	4db38 <_gp+0xffff2410>
   4e228:	2984b03a 	or	r2,r5,r6
   4e22c:	103e4226 	beq	r2,zero,4db38 <_gp+0xffff2410>
   4e230:	8989c83a 	sub	r4,r17,r6
   4e234:	8911803a 	cmpltu	r8,r17,r4
   4e238:	1945c83a 	sub	r2,r3,r5
   4e23c:	1205c83a 	sub	r2,r2,r8
   4e240:	1200202c 	andhi	r8,r2,128
   4e244:	403e9a26 	beq	r8,zero,4dcb0 <_gp+0xffff2588>
   4e248:	3463c83a 	sub	r17,r6,r17
   4e24c:	28c5c83a 	sub	r2,r5,r3
   4e250:	344d803a 	cmpltu	r6,r6,r17
   4e254:	1187c83a 	sub	r3,r2,r6
   4e258:	3825883a 	mov	r18,r7
   4e25c:	003e3606 	br	4db38 <_gp+0xffff2410>
   4e260:	0101ffc4 	movi	r4,2047
   4e264:	493fc71e 	bne	r9,r4,4e184 <_gp+0xffff2a5c>
   4e268:	2807883a 	mov	r3,r5
   4e26c:	3023883a 	mov	r17,r6
   4e270:	4821883a 	mov	r16,r9
   4e274:	003e3006 	br	4db38 <_gp+0xffff2410>
   4e278:	10003626 	beq	r2,zero,4e354 <__subdf3+0x8a0>
   4e27c:	2984b03a 	or	r2,r5,r6
   4e280:	10001726 	beq	r2,zero,4e2e0 <__subdf3+0x82c>
   4e284:	1808d0fa 	srli	r4,r3,3
   4e288:	8822d0fa 	srli	r17,r17,3
   4e28c:	1806977a 	slli	r3,r3,29
   4e290:	2080022c 	andhi	r2,r4,8
   4e294:	1c62b03a 	or	r17,r3,r17
   4e298:	10000726 	beq	r2,zero,4e2b8 <__subdf3+0x804>
   4e29c:	2812d0fa 	srli	r9,r5,3
   4e2a0:	4880022c 	andhi	r2,r9,8
   4e2a4:	1000041e 	bne	r2,zero,4e2b8 <__subdf3+0x804>
   4e2a8:	300cd0fa 	srli	r6,r6,3
   4e2ac:	2804977a 	slli	r2,r5,29
   4e2b0:	4809883a 	mov	r4,r9
   4e2b4:	11a2b03a 	or	r17,r2,r6
   4e2b8:	8806d77a 	srli	r3,r17,29
   4e2bc:	200890fa 	slli	r4,r4,3
   4e2c0:	882290fa 	slli	r17,r17,3
   4e2c4:	3825883a 	mov	r18,r7
   4e2c8:	1906b03a 	or	r3,r3,r4
   4e2cc:	0401ffc4 	movi	r16,2047
   4e2d0:	003e1906 	br	4db38 <_gp+0xffff2410>
   4e2d4:	000b883a 	mov	r5,zero
   4e2d8:	0005883a 	mov	r2,zero
   4e2dc:	003e2e06 	br	4db98 <_gp+0xffff2470>
   4e2e0:	0401ffc4 	movi	r16,2047
   4e2e4:	003e1406 	br	4db38 <_gp+0xffff2410>
   4e2e8:	0005883a 	mov	r2,zero
   4e2ec:	003f7506 	br	4e0c4 <_gp+0xffff299c>
   4e2f0:	0005883a 	mov	r2,zero
   4e2f4:	0009883a 	mov	r4,zero
   4e2f8:	003e7806 	br	4dcdc <_gp+0xffff25b4>
   4e2fc:	123ff804 	addi	r8,r2,-32
   4e300:	01000804 	movi	r4,32
   4e304:	1a10d83a 	srl	r8,r3,r8
   4e308:	11002526 	beq	r2,r4,4e3a0 <__subdf3+0x8ec>
   4e30c:	01001004 	movi	r4,64
   4e310:	2085c83a 	sub	r2,r4,r2
   4e314:	1884983a 	sll	r2,r3,r2
   4e318:	1444b03a 	or	r2,r2,r17
   4e31c:	1004c03a 	cmpne	r2,r2,zero
   4e320:	40a2b03a 	or	r17,r8,r2
   4e324:	0005883a 	mov	r2,zero
   4e328:	003f1606 	br	4df84 <_gp+0xffff285c>
   4e32c:	02000434 	movhi	r8,16
   4e330:	0009883a 	mov	r4,zero
   4e334:	423fffc4 	addi	r8,r8,-1
   4e338:	00bfffc4 	movi	r2,-1
   4e33c:	0401ffc4 	movi	r16,2047
   4e340:	003e6606 	br	4dcdc <_gp+0xffff25b4>
   4e344:	1c62b03a 	or	r17,r3,r17
   4e348:	8822c03a 	cmpne	r17,r17,zero
   4e34c:	0005883a 	mov	r2,zero
   4e350:	003f9906 	br	4e1b8 <_gp+0xffff2a90>
   4e354:	2807883a 	mov	r3,r5
   4e358:	3023883a 	mov	r17,r6
   4e35c:	0401ffc4 	movi	r16,2047
   4e360:	003df506 	br	4db38 <_gp+0xffff2410>
   4e364:	2807883a 	mov	r3,r5
   4e368:	3023883a 	mov	r17,r6
   4e36c:	003df206 	br	4db38 <_gp+0xffff2410>
   4e370:	123ff804 	addi	r8,r2,-32
   4e374:	01000804 	movi	r4,32
   4e378:	1a10d83a 	srl	r8,r3,r8
   4e37c:	11000a26 	beq	r2,r4,4e3a8 <__subdf3+0x8f4>
   4e380:	01001004 	movi	r4,64
   4e384:	2085c83a 	sub	r2,r4,r2
   4e388:	1884983a 	sll	r2,r3,r2
   4e38c:	1444b03a 	or	r2,r2,r17
   4e390:	1004c03a 	cmpne	r2,r2,zero
   4e394:	40a2b03a 	or	r17,r8,r2
   4e398:	0005883a 	mov	r2,zero
   4e39c:	003f8606 	br	4e1b8 <_gp+0xffff2a90>
   4e3a0:	0005883a 	mov	r2,zero
   4e3a4:	003fdc06 	br	4e318 <_gp+0xffff2bf0>
   4e3a8:	0005883a 	mov	r2,zero
   4e3ac:	003ff706 	br	4e38c <_gp+0xffff2c64>

0004e3b0 <__fixdfsi>:
   4e3b0:	280cd53a 	srli	r6,r5,20
   4e3b4:	00c00434 	movhi	r3,16
   4e3b8:	18ffffc4 	addi	r3,r3,-1
   4e3bc:	3181ffcc 	andi	r6,r6,2047
   4e3c0:	01c0ff84 	movi	r7,1022
   4e3c4:	28c6703a 	and	r3,r5,r3
   4e3c8:	280ad7fa 	srli	r5,r5,31
   4e3cc:	3980120e 	bge	r7,r6,4e418 <__fixdfsi+0x68>
   4e3d0:	00810744 	movi	r2,1053
   4e3d4:	11800c16 	blt	r2,r6,4e408 <__fixdfsi+0x58>
   4e3d8:	00810cc4 	movi	r2,1075
   4e3dc:	1185c83a 	sub	r2,r2,r6
   4e3e0:	01c007c4 	movi	r7,31
   4e3e4:	18c00434 	orhi	r3,r3,16
   4e3e8:	38800d16 	blt	r7,r2,4e420 <__fixdfsi+0x70>
   4e3ec:	31befb44 	addi	r6,r6,-1043
   4e3f0:	2084d83a 	srl	r2,r4,r2
   4e3f4:	1986983a 	sll	r3,r3,r6
   4e3f8:	1884b03a 	or	r2,r3,r2
   4e3fc:	28000726 	beq	r5,zero,4e41c <__fixdfsi+0x6c>
   4e400:	0085c83a 	sub	r2,zero,r2
   4e404:	f800283a 	ret
   4e408:	00a00034 	movhi	r2,32768
   4e40c:	10bfffc4 	addi	r2,r2,-1
   4e410:	2885883a 	add	r2,r5,r2
   4e414:	f800283a 	ret
   4e418:	0005883a 	mov	r2,zero
   4e41c:	f800283a 	ret
   4e420:	008104c4 	movi	r2,1043
   4e424:	1185c83a 	sub	r2,r2,r6
   4e428:	1884d83a 	srl	r2,r3,r2
   4e42c:	003ff306 	br	4e3fc <_gp+0xffff2cd4>

0004e430 <__floatsidf>:
   4e430:	defffd04 	addi	sp,sp,-12
   4e434:	dfc00215 	stw	ra,8(sp)
   4e438:	dc400115 	stw	r17,4(sp)
   4e43c:	dc000015 	stw	r16,0(sp)
   4e440:	20002b26 	beq	r4,zero,4e4f0 <__floatsidf+0xc0>
   4e444:	2023883a 	mov	r17,r4
   4e448:	2020d7fa 	srli	r16,r4,31
   4e44c:	20002d16 	blt	r4,zero,4e504 <__floatsidf+0xd4>
   4e450:	8809883a 	mov	r4,r17
   4e454:	004144c0 	call	4144c <__clzsi2>
   4e458:	01410784 	movi	r5,1054
   4e45c:	288bc83a 	sub	r5,r5,r2
   4e460:	01010cc4 	movi	r4,1075
   4e464:	2149c83a 	sub	r4,r4,r5
   4e468:	00c007c4 	movi	r3,31
   4e46c:	1900160e 	bge	r3,r4,4e4c8 <__floatsidf+0x98>
   4e470:	00c104c4 	movi	r3,1043
   4e474:	1947c83a 	sub	r3,r3,r5
   4e478:	88c6983a 	sll	r3,r17,r3
   4e47c:	00800434 	movhi	r2,16
   4e480:	10bfffc4 	addi	r2,r2,-1
   4e484:	1886703a 	and	r3,r3,r2
   4e488:	2941ffcc 	andi	r5,r5,2047
   4e48c:	800d883a 	mov	r6,r16
   4e490:	0005883a 	mov	r2,zero
   4e494:	280a953a 	slli	r5,r5,20
   4e498:	31803fcc 	andi	r6,r6,255
   4e49c:	01000434 	movhi	r4,16
   4e4a0:	300c97fa 	slli	r6,r6,31
   4e4a4:	213fffc4 	addi	r4,r4,-1
   4e4a8:	1906703a 	and	r3,r3,r4
   4e4ac:	1946b03a 	or	r3,r3,r5
   4e4b0:	1986b03a 	or	r3,r3,r6
   4e4b4:	dfc00217 	ldw	ra,8(sp)
   4e4b8:	dc400117 	ldw	r17,4(sp)
   4e4bc:	dc000017 	ldw	r16,0(sp)
   4e4c0:	dec00304 	addi	sp,sp,12
   4e4c4:	f800283a 	ret
   4e4c8:	00c002c4 	movi	r3,11
   4e4cc:	1887c83a 	sub	r3,r3,r2
   4e4d0:	88c6d83a 	srl	r3,r17,r3
   4e4d4:	8904983a 	sll	r2,r17,r4
   4e4d8:	01000434 	movhi	r4,16
   4e4dc:	213fffc4 	addi	r4,r4,-1
   4e4e0:	2941ffcc 	andi	r5,r5,2047
   4e4e4:	1906703a 	and	r3,r3,r4
   4e4e8:	800d883a 	mov	r6,r16
   4e4ec:	003fe906 	br	4e494 <_gp+0xffff2d6c>
   4e4f0:	000d883a 	mov	r6,zero
   4e4f4:	000b883a 	mov	r5,zero
   4e4f8:	0007883a 	mov	r3,zero
   4e4fc:	0005883a 	mov	r2,zero
   4e500:	003fe406 	br	4e494 <_gp+0xffff2d6c>
   4e504:	0123c83a 	sub	r17,zero,r4
   4e508:	003fd106 	br	4e450 <_gp+0xffff2d28>

0004e50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e50c:	defffe04 	addi	sp,sp,-8
   4e510:	dfc00115 	stw	ra,4(sp)
   4e514:	df000015 	stw	fp,0(sp)
   4e518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e51c:	d0a00b17 	ldw	r2,-32724(gp)
   4e520:	10000326 	beq	r2,zero,4e530 <alt_get_errno+0x24>
   4e524:	d0a00b17 	ldw	r2,-32724(gp)
   4e528:	103ee83a 	callr	r2
   4e52c:	00000106 	br	4e534 <alt_get_errno+0x28>
   4e530:	d0a72004 	addi	r2,gp,-25472
}
   4e534:	e037883a 	mov	sp,fp
   4e538:	dfc00117 	ldw	ra,4(sp)
   4e53c:	df000017 	ldw	fp,0(sp)
   4e540:	dec00204 	addi	sp,sp,8
   4e544:	f800283a 	ret

0004e548 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4e548:	defffb04 	addi	sp,sp,-20
   4e54c:	dfc00415 	stw	ra,16(sp)
   4e550:	df000315 	stw	fp,12(sp)
   4e554:	df000304 	addi	fp,sp,12
   4e558:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4e55c:	e0bfff17 	ldw	r2,-4(fp)
   4e560:	10000816 	blt	r2,zero,4e584 <close+0x3c>
   4e564:	01400304 	movi	r5,12
   4e568:	e13fff17 	ldw	r4,-4(fp)
   4e56c:	00416640 	call	41664 <__mulsi3>
   4e570:	1007883a 	mov	r3,r2
   4e574:	00800174 	movhi	r2,5
   4e578:	10894804 	addi	r2,r2,9504
   4e57c:	1885883a 	add	r2,r3,r2
   4e580:	00000106 	br	4e588 <close+0x40>
   4e584:	0005883a 	mov	r2,zero
   4e588:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4e58c:	e0bffd17 	ldw	r2,-12(fp)
   4e590:	10001926 	beq	r2,zero,4e5f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4e594:	e0bffd17 	ldw	r2,-12(fp)
   4e598:	10800017 	ldw	r2,0(r2)
   4e59c:	10800417 	ldw	r2,16(r2)
   4e5a0:	10000626 	beq	r2,zero,4e5bc <close+0x74>
   4e5a4:	e0bffd17 	ldw	r2,-12(fp)
   4e5a8:	10800017 	ldw	r2,0(r2)
   4e5ac:	10800417 	ldw	r2,16(r2)
   4e5b0:	e13ffd17 	ldw	r4,-12(fp)
   4e5b4:	103ee83a 	callr	r2
   4e5b8:	00000106 	br	4e5c0 <close+0x78>
   4e5bc:	0005883a 	mov	r2,zero
   4e5c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4e5c4:	e13fff17 	ldw	r4,-4(fp)
   4e5c8:	004eeb40 	call	4eeb4 <alt_release_fd>
    if (rval < 0)
   4e5cc:	e0bffe17 	ldw	r2,-8(fp)
   4e5d0:	1000070e 	bge	r2,zero,4e5f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4e5d4:	004e50c0 	call	4e50c <alt_get_errno>
   4e5d8:	1007883a 	mov	r3,r2
   4e5dc:	e0bffe17 	ldw	r2,-8(fp)
   4e5e0:	0085c83a 	sub	r2,zero,r2
   4e5e4:	18800015 	stw	r2,0(r3)
      return -1;
   4e5e8:	00bfffc4 	movi	r2,-1
   4e5ec:	00000706 	br	4e60c <close+0xc4>
    }
    return 0;
   4e5f0:	0005883a 	mov	r2,zero
   4e5f4:	00000506 	br	4e60c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e5f8:	004e50c0 	call	4e50c <alt_get_errno>
   4e5fc:	1007883a 	mov	r3,r2
   4e600:	00801444 	movi	r2,81
   4e604:	18800015 	stw	r2,0(r3)
    return -1;
   4e608:	00bfffc4 	movi	r2,-1
  }
}
   4e60c:	e037883a 	mov	sp,fp
   4e610:	dfc00117 	ldw	ra,4(sp)
   4e614:	df000017 	ldw	fp,0(sp)
   4e618:	dec00204 	addi	sp,sp,8
   4e61c:	f800283a 	ret

0004e620 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4e620:	defffc04 	addi	sp,sp,-16
   4e624:	df000315 	stw	fp,12(sp)
   4e628:	df000304 	addi	fp,sp,12
   4e62c:	e13ffd15 	stw	r4,-12(fp)
   4e630:	e17ffe15 	stw	r5,-8(fp)
   4e634:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4e638:	e0bfff17 	ldw	r2,-4(fp)
}
   4e63c:	e037883a 	mov	sp,fp
   4e640:	df000017 	ldw	fp,0(sp)
   4e644:	dec00104 	addi	sp,sp,4
   4e648:	f800283a 	ret

0004e64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e64c:	defffe04 	addi	sp,sp,-8
   4e650:	dfc00115 	stw	ra,4(sp)
   4e654:	df000015 	stw	fp,0(sp)
   4e658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e65c:	d0a00b17 	ldw	r2,-32724(gp)
   4e660:	10000326 	beq	r2,zero,4e670 <alt_get_errno+0x24>
   4e664:	d0a00b17 	ldw	r2,-32724(gp)
   4e668:	103ee83a 	callr	r2
   4e66c:	00000106 	br	4e674 <alt_get_errno+0x28>
   4e670:	d0a72004 	addi	r2,gp,-25472
}
   4e674:	e037883a 	mov	sp,fp
   4e678:	dfc00117 	ldw	ra,4(sp)
   4e67c:	df000017 	ldw	fp,0(sp)
   4e680:	dec00204 	addi	sp,sp,8
   4e684:	f800283a 	ret

0004e688 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4e688:	defffb04 	addi	sp,sp,-20
   4e68c:	dfc00415 	stw	ra,16(sp)
   4e690:	df000315 	stw	fp,12(sp)
   4e694:	df000304 	addi	fp,sp,12
   4e698:	e13ffe15 	stw	r4,-8(fp)
   4e69c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e6a0:	e0bffe17 	ldw	r2,-8(fp)
   4e6a4:	10000816 	blt	r2,zero,4e6c8 <fstat+0x40>
   4e6a8:	01400304 	movi	r5,12
   4e6ac:	e13ffe17 	ldw	r4,-8(fp)
   4e6b0:	00416640 	call	41664 <__mulsi3>
   4e6b4:	1007883a 	mov	r3,r2
   4e6b8:	00800174 	movhi	r2,5
   4e6bc:	10894804 	addi	r2,r2,9504
   4e6c0:	1885883a 	add	r2,r3,r2
   4e6c4:	00000106 	br	4e6cc <fstat+0x44>
   4e6c8:	0005883a 	mov	r2,zero
   4e6cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4e6d0:	e0bffd17 	ldw	r2,-12(fp)
   4e6d4:	10001026 	beq	r2,zero,4e718 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4e6d8:	e0bffd17 	ldw	r2,-12(fp)
   4e6dc:	10800017 	ldw	r2,0(r2)
   4e6e0:	10800817 	ldw	r2,32(r2)
   4e6e4:	10000726 	beq	r2,zero,4e704 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4e6e8:	e0bffd17 	ldw	r2,-12(fp)
   4e6ec:	10800017 	ldw	r2,0(r2)
   4e6f0:	10800817 	ldw	r2,32(r2)
   4e6f4:	e17fff17 	ldw	r5,-4(fp)
   4e6f8:	e13ffd17 	ldw	r4,-12(fp)
   4e6fc:	103ee83a 	callr	r2
   4e700:	00000a06 	br	4e72c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4e704:	e0bfff17 	ldw	r2,-4(fp)
   4e708:	00c80004 	movi	r3,8192
   4e70c:	10c00115 	stw	r3,4(r2)
      return 0;
   4e710:	0005883a 	mov	r2,zero
   4e714:	00000506 	br	4e72c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e718:	004e64c0 	call	4e64c <alt_get_errno>
   4e71c:	1007883a 	mov	r3,r2
   4e720:	00801444 	movi	r2,81
   4e724:	18800015 	stw	r2,0(r3)
    return -1;
   4e728:	00bfffc4 	movi	r2,-1
  }
}
   4e72c:	e037883a 	mov	sp,fp
   4e730:	dfc00117 	ldw	ra,4(sp)
   4e734:	df000017 	ldw	fp,0(sp)
   4e738:	dec00204 	addi	sp,sp,8
   4e73c:	f800283a 	ret

0004e740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e740:	defffe04 	addi	sp,sp,-8
   4e744:	dfc00115 	stw	ra,4(sp)
   4e748:	df000015 	stw	fp,0(sp)
   4e74c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e750:	d0a00b17 	ldw	r2,-32724(gp)
   4e754:	10000326 	beq	r2,zero,4e764 <alt_get_errno+0x24>
   4e758:	d0a00b17 	ldw	r2,-32724(gp)
   4e75c:	103ee83a 	callr	r2
   4e760:	00000106 	br	4e768 <alt_get_errno+0x28>
   4e764:	d0a72004 	addi	r2,gp,-25472
}
   4e768:	e037883a 	mov	sp,fp
   4e76c:	dfc00117 	ldw	ra,4(sp)
   4e770:	df000017 	ldw	fp,0(sp)
   4e774:	dec00204 	addi	sp,sp,8
   4e778:	f800283a 	ret

0004e77c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e77c:	deffed04 	addi	sp,sp,-76
   4e780:	dfc01215 	stw	ra,72(sp)
   4e784:	df001115 	stw	fp,68(sp)
   4e788:	df001104 	addi	fp,sp,68
   4e78c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e790:	e0bfff17 	ldw	r2,-4(fp)
   4e794:	10000816 	blt	r2,zero,4e7b8 <isatty+0x3c>
   4e798:	01400304 	movi	r5,12
   4e79c:	e13fff17 	ldw	r4,-4(fp)
   4e7a0:	00416640 	call	41664 <__mulsi3>
   4e7a4:	1007883a 	mov	r3,r2
   4e7a8:	00800174 	movhi	r2,5
   4e7ac:	10894804 	addi	r2,r2,9504
   4e7b0:	1885883a 	add	r2,r3,r2
   4e7b4:	00000106 	br	4e7bc <isatty+0x40>
   4e7b8:	0005883a 	mov	r2,zero
   4e7bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e7c0:	e0bfef17 	ldw	r2,-68(fp)
   4e7c4:	10000e26 	beq	r2,zero,4e800 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e7c8:	e0bfef17 	ldw	r2,-68(fp)
   4e7cc:	10800017 	ldw	r2,0(r2)
   4e7d0:	10800817 	ldw	r2,32(r2)
   4e7d4:	1000021e 	bne	r2,zero,4e7e0 <isatty+0x64>
    {
      return 1;
   4e7d8:	00800044 	movi	r2,1
   4e7dc:	00000d06 	br	4e814 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e7e0:	e0bff004 	addi	r2,fp,-64
   4e7e4:	100b883a 	mov	r5,r2
   4e7e8:	e13fff17 	ldw	r4,-4(fp)
   4e7ec:	004e6880 	call	4e688 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e7f0:	e0bff117 	ldw	r2,-60(fp)
   4e7f4:	10880020 	cmpeqi	r2,r2,8192
   4e7f8:	10803fcc 	andi	r2,r2,255
   4e7fc:	00000506 	br	4e814 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e800:	004e7400 	call	4e740 <alt_get_errno>
   4e804:	1007883a 	mov	r3,r2
   4e808:	00801444 	movi	r2,81
   4e80c:	18800015 	stw	r2,0(r3)
    return 0;
   4e810:	0005883a 	mov	r2,zero
  }
}
   4e814:	e037883a 	mov	sp,fp
   4e818:	dfc00117 	ldw	ra,4(sp)
   4e81c:	df000017 	ldw	fp,0(sp)
   4e820:	dec00204 	addi	sp,sp,8
   4e824:	f800283a 	ret

0004e828 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e828:	defffc04 	addi	sp,sp,-16
   4e82c:	df000315 	stw	fp,12(sp)
   4e830:	df000304 	addi	fp,sp,12
   4e834:	e13ffd15 	stw	r4,-12(fp)
   4e838:	e17ffe15 	stw	r5,-8(fp)
   4e83c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e840:	e0fffe17 	ldw	r3,-8(fp)
   4e844:	e0bffd17 	ldw	r2,-12(fp)
   4e848:	18800c26 	beq	r3,r2,4e87c <alt_load_section+0x54>
  {
    while( to != end )
   4e84c:	00000806 	br	4e870 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4e850:	e0bffe17 	ldw	r2,-8(fp)
   4e854:	10c00104 	addi	r3,r2,4
   4e858:	e0fffe15 	stw	r3,-8(fp)
   4e85c:	e0fffd17 	ldw	r3,-12(fp)
   4e860:	19000104 	addi	r4,r3,4
   4e864:	e13ffd15 	stw	r4,-12(fp)
   4e868:	18c00017 	ldw	r3,0(r3)
   4e86c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4e870:	e0fffe17 	ldw	r3,-8(fp)
   4e874:	e0bfff17 	ldw	r2,-4(fp)
   4e878:	18bff51e 	bne	r3,r2,4e850 <_gp+0xffff3128>
    {
      *to++ = *from++;
    }
  }
}
   4e87c:	0001883a 	nop
   4e880:	e037883a 	mov	sp,fp
   4e884:	df000017 	ldw	fp,0(sp)
   4e888:	dec00104 	addi	sp,sp,4
   4e88c:	f800283a 	ret

0004e890 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4e890:	defffe04 	addi	sp,sp,-8
   4e894:	dfc00115 	stw	ra,4(sp)
   4e898:	df000015 	stw	fp,0(sp)
   4e89c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4e8a0:	01800174 	movhi	r6,5
   4e8a4:	318dec04 	addi	r6,r6,14256
   4e8a8:	01400174 	movhi	r5,5
   4e8ac:	2946ee04 	addi	r5,r5,7096
   4e8b0:	01000174 	movhi	r4,5
   4e8b4:	210dec04 	addi	r4,r4,14256
   4e8b8:	004e8280 	call	4e828 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4e8bc:	01800134 	movhi	r6,4
   4e8c0:	31808c04 	addi	r6,r6,560
   4e8c4:	01400134 	movhi	r5,4
   4e8c8:	29400804 	addi	r5,r5,32
   4e8cc:	01000134 	movhi	r4,4
   4e8d0:	21000804 	addi	r4,r4,32
   4e8d4:	004e8280 	call	4e828 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4e8d8:	01800174 	movhi	r6,5
   4e8dc:	3186ee04 	addi	r6,r6,7096
   4e8e0:	01400174 	movhi	r5,5
   4e8e4:	2945de04 	addi	r5,r5,6008
   4e8e8:	01000174 	movhi	r4,5
   4e8ec:	2105de04 	addi	r4,r4,6008
   4e8f0:	004e8280 	call	4e828 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4e8f4:	00508c40 	call	508c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4e8f8:	0050d600 	call	50d60 <alt_icache_flush_all>
}
   4e8fc:	0001883a 	nop
   4e900:	e037883a 	mov	sp,fp
   4e904:	dfc00117 	ldw	ra,4(sp)
   4e908:	df000017 	ldw	fp,0(sp)
   4e90c:	dec00204 	addi	sp,sp,8
   4e910:	f800283a 	ret

0004e914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e914:	defffe04 	addi	sp,sp,-8
   4e918:	dfc00115 	stw	ra,4(sp)
   4e91c:	df000015 	stw	fp,0(sp)
   4e920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e924:	d0a00b17 	ldw	r2,-32724(gp)
   4e928:	10000326 	beq	r2,zero,4e938 <alt_get_errno+0x24>
   4e92c:	d0a00b17 	ldw	r2,-32724(gp)
   4e930:	103ee83a 	callr	r2
   4e934:	00000106 	br	4e93c <alt_get_errno+0x28>
   4e938:	d0a72004 	addi	r2,gp,-25472
}
   4e93c:	e037883a 	mov	sp,fp
   4e940:	dfc00117 	ldw	ra,4(sp)
   4e944:	df000017 	ldw	fp,0(sp)
   4e948:	dec00204 	addi	sp,sp,8
   4e94c:	f800283a 	ret

0004e950 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4e950:	defff904 	addi	sp,sp,-28
   4e954:	dfc00615 	stw	ra,24(sp)
   4e958:	df000515 	stw	fp,20(sp)
   4e95c:	df000504 	addi	fp,sp,20
   4e960:	e13ffd15 	stw	r4,-12(fp)
   4e964:	e17ffe15 	stw	r5,-8(fp)
   4e968:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4e96c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e970:	e0bffd17 	ldw	r2,-12(fp)
   4e974:	10000816 	blt	r2,zero,4e998 <lseek+0x48>
   4e978:	01400304 	movi	r5,12
   4e97c:	e13ffd17 	ldw	r4,-12(fp)
   4e980:	00416640 	call	41664 <__mulsi3>
   4e984:	1007883a 	mov	r3,r2
   4e988:	00800174 	movhi	r2,5
   4e98c:	10894804 	addi	r2,r2,9504
   4e990:	1885883a 	add	r2,r3,r2
   4e994:	00000106 	br	4e99c <lseek+0x4c>
   4e998:	0005883a 	mov	r2,zero
   4e99c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4e9a0:	e0bffc17 	ldw	r2,-16(fp)
   4e9a4:	10001026 	beq	r2,zero,4e9e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4e9a8:	e0bffc17 	ldw	r2,-16(fp)
   4e9ac:	10800017 	ldw	r2,0(r2)
   4e9b0:	10800717 	ldw	r2,28(r2)
   4e9b4:	10000926 	beq	r2,zero,4e9dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4e9b8:	e0bffc17 	ldw	r2,-16(fp)
   4e9bc:	10800017 	ldw	r2,0(r2)
   4e9c0:	10800717 	ldw	r2,28(r2)
   4e9c4:	e1bfff17 	ldw	r6,-4(fp)
   4e9c8:	e17ffe17 	ldw	r5,-8(fp)
   4e9cc:	e13ffc17 	ldw	r4,-16(fp)
   4e9d0:	103ee83a 	callr	r2
   4e9d4:	e0bffb15 	stw	r2,-20(fp)
   4e9d8:	00000506 	br	4e9f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4e9dc:	00bfde84 	movi	r2,-134
   4e9e0:	e0bffb15 	stw	r2,-20(fp)
   4e9e4:	00000206 	br	4e9f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4e9e8:	00bfebc4 	movi	r2,-81
   4e9ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4e9f0:	e0bffb17 	ldw	r2,-20(fp)
   4e9f4:	1000070e 	bge	r2,zero,4ea14 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4e9f8:	004e9140 	call	4e914 <alt_get_errno>
   4e9fc:	1007883a 	mov	r3,r2
   4ea00:	e0bffb17 	ldw	r2,-20(fp)
   4ea04:	0085c83a 	sub	r2,zero,r2
   4ea08:	18800015 	stw	r2,0(r3)
    rc = -1;
   4ea0c:	00bfffc4 	movi	r2,-1
   4ea10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4ea14:	e0bffb17 	ldw	r2,-20(fp)
}
   4ea18:	e037883a 	mov	sp,fp
   4ea1c:	dfc00117 	ldw	ra,4(sp)
   4ea20:	df000017 	ldw	fp,0(sp)
   4ea24:	dec00204 	addi	sp,sp,8
   4ea28:	f800283a 	ret

0004ea2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ea2c:	defffd04 	addi	sp,sp,-12
   4ea30:	dfc00215 	stw	ra,8(sp)
   4ea34:	df000115 	stw	fp,4(sp)
   4ea38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4ea3c:	0009883a 	mov	r4,zero
   4ea40:	004f20c0 	call	4f20c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4ea44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4ea48:	004f2440 	call	4f244 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4ea4c:	01800174 	movhi	r6,5
   4ea50:	3186e104 	addi	r6,r6,7044
   4ea54:	01400174 	movhi	r5,5
   4ea58:	2946e104 	addi	r5,r5,7044
   4ea5c:	01000174 	movhi	r4,5
   4ea60:	2106e104 	addi	r4,r4,7044
   4ea64:	00511040 	call	51104 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4ea68:	00509c40 	call	509c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4ea6c:	01000174 	movhi	r4,5
   4ea70:	21028904 	addi	r4,r4,2596
   4ea74:	00513e40 	call	513e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4ea78:	d0a72717 	ldw	r2,-25444(gp)
   4ea7c:	d0e72817 	ldw	r3,-25440(gp)
   4ea80:	d1272917 	ldw	r4,-25436(gp)
   4ea84:	200d883a 	mov	r6,r4
   4ea88:	180b883a 	mov	r5,r3
   4ea8c:	1009883a 	mov	r4,r2
   4ea90:	004026c0 	call	4026c <main>
   4ea94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4ea98:	01000044 	movi	r4,1
   4ea9c:	004e5480 	call	4e548 <close>
  exit (result);
   4eaa0:	e13fff17 	ldw	r4,-4(fp)
   4eaa4:	00513f80 	call	513f8 <exit>

0004eaa8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4eaa8:	defffe04 	addi	sp,sp,-8
   4eaac:	df000115 	stw	fp,4(sp)
   4eab0:	df000104 	addi	fp,sp,4
   4eab4:	e13fff15 	stw	r4,-4(fp)
}
   4eab8:	0001883a 	nop
   4eabc:	e037883a 	mov	sp,fp
   4eac0:	df000017 	ldw	fp,0(sp)
   4eac4:	dec00104 	addi	sp,sp,4
   4eac8:	f800283a 	ret

0004eacc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4eacc:	defffe04 	addi	sp,sp,-8
   4ead0:	df000115 	stw	fp,4(sp)
   4ead4:	df000104 	addi	fp,sp,4
   4ead8:	e13fff15 	stw	r4,-4(fp)
}
   4eadc:	0001883a 	nop
   4eae0:	e037883a 	mov	sp,fp
   4eae4:	df000017 	ldw	fp,0(sp)
   4eae8:	dec00104 	addi	sp,sp,4
   4eaec:	f800283a 	ret

0004eaf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eaf0:	defffe04 	addi	sp,sp,-8
   4eaf4:	dfc00115 	stw	ra,4(sp)
   4eaf8:	df000015 	stw	fp,0(sp)
   4eafc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eb00:	d0a00b17 	ldw	r2,-32724(gp)
   4eb04:	10000326 	beq	r2,zero,4eb14 <alt_get_errno+0x24>
   4eb08:	d0a00b17 	ldw	r2,-32724(gp)
   4eb0c:	103ee83a 	callr	r2
   4eb10:	00000106 	br	4eb18 <alt_get_errno+0x28>
   4eb14:	d0a72004 	addi	r2,gp,-25472
}
   4eb18:	e037883a 	mov	sp,fp
   4eb1c:	dfc00117 	ldw	ra,4(sp)
   4eb20:	df000017 	ldw	fp,0(sp)
   4eb24:	dec00204 	addi	sp,sp,8
   4eb28:	f800283a 	ret

0004eb2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4eb2c:	defffb04 	addi	sp,sp,-20
   4eb30:	dfc00415 	stw	ra,16(sp)
   4eb34:	df000315 	stw	fp,12(sp)
   4eb38:	dc000215 	stw	r16,8(sp)
   4eb3c:	df000304 	addi	fp,sp,12
   4eb40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4eb44:	e0bffe17 	ldw	r2,-8(fp)
   4eb48:	10800217 	ldw	r2,8(r2)
   4eb4c:	10d00034 	orhi	r3,r2,16384
   4eb50:	e0bffe17 	ldw	r2,-8(fp)
   4eb54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4eb58:	e03ffd15 	stw	zero,-12(fp)
   4eb5c:	00002306 	br	4ebec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4eb60:	04000174 	movhi	r16,5
   4eb64:	84094804 	addi	r16,r16,9504
   4eb68:	e0bffd17 	ldw	r2,-12(fp)
   4eb6c:	01400304 	movi	r5,12
   4eb70:	1009883a 	mov	r4,r2
   4eb74:	00416640 	call	41664 <__mulsi3>
   4eb78:	8085883a 	add	r2,r16,r2
   4eb7c:	10c00017 	ldw	r3,0(r2)
   4eb80:	e0bffe17 	ldw	r2,-8(fp)
   4eb84:	10800017 	ldw	r2,0(r2)
   4eb88:	1880151e 	bne	r3,r2,4ebe0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4eb8c:	04000174 	movhi	r16,5
   4eb90:	84094804 	addi	r16,r16,9504
   4eb94:	e0bffd17 	ldw	r2,-12(fp)
   4eb98:	01400304 	movi	r5,12
   4eb9c:	1009883a 	mov	r4,r2
   4eba0:	00416640 	call	41664 <__mulsi3>
   4eba4:	8085883a 	add	r2,r16,r2
   4eba8:	10800204 	addi	r2,r2,8
   4ebac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ebb0:	10000b0e 	bge	r2,zero,4ebe0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4ebb4:	01400304 	movi	r5,12
   4ebb8:	e13ffd17 	ldw	r4,-12(fp)
   4ebbc:	00416640 	call	41664 <__mulsi3>
   4ebc0:	1007883a 	mov	r3,r2
   4ebc4:	00800174 	movhi	r2,5
   4ebc8:	10894804 	addi	r2,r2,9504
   4ebcc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4ebd0:	e0bffe17 	ldw	r2,-8(fp)
   4ebd4:	18800226 	beq	r3,r2,4ebe0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4ebd8:	00bffcc4 	movi	r2,-13
   4ebdc:	00000806 	br	4ec00 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ebe0:	e0bffd17 	ldw	r2,-12(fp)
   4ebe4:	10800044 	addi	r2,r2,1
   4ebe8:	e0bffd15 	stw	r2,-12(fp)
   4ebec:	d0a00a17 	ldw	r2,-32728(gp)
   4ebf0:	1007883a 	mov	r3,r2
   4ebf4:	e0bffd17 	ldw	r2,-12(fp)
   4ebf8:	18bfd92e 	bgeu	r3,r2,4eb60 <_gp+0xffff3438>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4ebfc:	0005883a 	mov	r2,zero
}
   4ec00:	e6ffff04 	addi	sp,fp,-4
   4ec04:	dfc00217 	ldw	ra,8(sp)
   4ec08:	df000117 	ldw	fp,4(sp)
   4ec0c:	dc000017 	ldw	r16,0(sp)
   4ec10:	dec00304 	addi	sp,sp,12
   4ec14:	f800283a 	ret

0004ec18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4ec18:	defff604 	addi	sp,sp,-40
   4ec1c:	dfc00915 	stw	ra,36(sp)
   4ec20:	df000815 	stw	fp,32(sp)
   4ec24:	df000804 	addi	fp,sp,32
   4ec28:	e13ffd15 	stw	r4,-12(fp)
   4ec2c:	e17ffe15 	stw	r5,-8(fp)
   4ec30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4ec34:	00bfffc4 	movi	r2,-1
   4ec38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4ec3c:	00bffb44 	movi	r2,-19
   4ec40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4ec44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4ec48:	d1600804 	addi	r5,gp,-32736
   4ec4c:	e13ffd17 	ldw	r4,-12(fp)
   4ec50:	0050a840 	call	50a84 <alt_find_dev>
   4ec54:	e0bff815 	stw	r2,-32(fp)
   4ec58:	e0bff817 	ldw	r2,-32(fp)
   4ec5c:	1000051e 	bne	r2,zero,4ec74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4ec60:	e13ffd17 	ldw	r4,-12(fp)
   4ec64:	0050b140 	call	50b14 <alt_find_file>
   4ec68:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4ec6c:	00800044 	movi	r2,1
   4ec70:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4ec74:	e0bff817 	ldw	r2,-32(fp)
   4ec78:	10002b26 	beq	r2,zero,4ed28 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4ec7c:	e13ff817 	ldw	r4,-32(fp)
   4ec80:	0050c9c0 	call	50c9c <alt_get_fd>
   4ec84:	e0bff915 	stw	r2,-28(fp)
   4ec88:	e0bff917 	ldw	r2,-28(fp)
   4ec8c:	1000030e 	bge	r2,zero,4ec9c <open+0x84>
    {
      status = index;
   4ec90:	e0bff917 	ldw	r2,-28(fp)
   4ec94:	e0bffa15 	stw	r2,-24(fp)
   4ec98:	00002506 	br	4ed30 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4ec9c:	01400304 	movi	r5,12
   4eca0:	e13ff917 	ldw	r4,-28(fp)
   4eca4:	00416640 	call	41664 <__mulsi3>
   4eca8:	1007883a 	mov	r3,r2
   4ecac:	00800174 	movhi	r2,5
   4ecb0:	10894804 	addi	r2,r2,9504
   4ecb4:	1885883a 	add	r2,r3,r2
   4ecb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4ecbc:	e0fffe17 	ldw	r3,-8(fp)
   4ecc0:	00900034 	movhi	r2,16384
   4ecc4:	10bfffc4 	addi	r2,r2,-1
   4ecc8:	1886703a 	and	r3,r3,r2
   4eccc:	e0bffc17 	ldw	r2,-16(fp)
   4ecd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4ecd4:	e0bffb17 	ldw	r2,-20(fp)
   4ecd8:	1000051e 	bne	r2,zero,4ecf0 <open+0xd8>
   4ecdc:	e13ffc17 	ldw	r4,-16(fp)
   4ece0:	004eb2c0 	call	4eb2c <alt_file_locked>
   4ece4:	e0bffa15 	stw	r2,-24(fp)
   4ece8:	e0bffa17 	ldw	r2,-24(fp)
   4ecec:	10001016 	blt	r2,zero,4ed30 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4ecf0:	e0bff817 	ldw	r2,-32(fp)
   4ecf4:	10800317 	ldw	r2,12(r2)
   4ecf8:	10000826 	beq	r2,zero,4ed1c <open+0x104>
   4ecfc:	e0bff817 	ldw	r2,-32(fp)
   4ed00:	10800317 	ldw	r2,12(r2)
   4ed04:	e1ffff17 	ldw	r7,-4(fp)
   4ed08:	e1bffe17 	ldw	r6,-8(fp)
   4ed0c:	e17ffd17 	ldw	r5,-12(fp)
   4ed10:	e13ffc17 	ldw	r4,-16(fp)
   4ed14:	103ee83a 	callr	r2
   4ed18:	00000106 	br	4ed20 <open+0x108>
   4ed1c:	0005883a 	mov	r2,zero
   4ed20:	e0bffa15 	stw	r2,-24(fp)
   4ed24:	00000206 	br	4ed30 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4ed28:	00bffb44 	movi	r2,-19
   4ed2c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4ed30:	e0bffa17 	ldw	r2,-24(fp)
   4ed34:	1000090e 	bge	r2,zero,4ed5c <open+0x144>
  {
    alt_release_fd (index);  
   4ed38:	e13ff917 	ldw	r4,-28(fp)
   4ed3c:	004eeb40 	call	4eeb4 <alt_release_fd>
    ALT_ERRNO = -status;
   4ed40:	004eaf00 	call	4eaf0 <alt_get_errno>
   4ed44:	1007883a 	mov	r3,r2
   4ed48:	e0bffa17 	ldw	r2,-24(fp)
   4ed4c:	0085c83a 	sub	r2,zero,r2
   4ed50:	18800015 	stw	r2,0(r3)
    return -1;
   4ed54:	00bfffc4 	movi	r2,-1
   4ed58:	00000106 	br	4ed60 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   4ed5c:	e0bff917 	ldw	r2,-28(fp)
}
   4ed60:	e037883a 	mov	sp,fp
   4ed64:	dfc00117 	ldw	ra,4(sp)
   4ed68:	df000017 	ldw	fp,0(sp)
   4ed6c:	dec00204 	addi	sp,sp,8
   4ed70:	f800283a 	ret

0004ed74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ed74:	defffe04 	addi	sp,sp,-8
   4ed78:	dfc00115 	stw	ra,4(sp)
   4ed7c:	df000015 	stw	fp,0(sp)
   4ed80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ed84:	d0a00b17 	ldw	r2,-32724(gp)
   4ed88:	10000326 	beq	r2,zero,4ed98 <alt_get_errno+0x24>
   4ed8c:	d0a00b17 	ldw	r2,-32724(gp)
   4ed90:	103ee83a 	callr	r2
   4ed94:	00000106 	br	4ed9c <alt_get_errno+0x28>
   4ed98:	d0a72004 	addi	r2,gp,-25472
}
   4ed9c:	e037883a 	mov	sp,fp
   4eda0:	dfc00117 	ldw	ra,4(sp)
   4eda4:	df000017 	ldw	fp,0(sp)
   4eda8:	dec00204 	addi	sp,sp,8
   4edac:	f800283a 	ret

0004edb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4edb0:	defff904 	addi	sp,sp,-28
   4edb4:	dfc00615 	stw	ra,24(sp)
   4edb8:	df000515 	stw	fp,20(sp)
   4edbc:	df000504 	addi	fp,sp,20
   4edc0:	e13ffd15 	stw	r4,-12(fp)
   4edc4:	e17ffe15 	stw	r5,-8(fp)
   4edc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4edcc:	e0bffd17 	ldw	r2,-12(fp)
   4edd0:	10000816 	blt	r2,zero,4edf4 <read+0x44>
   4edd4:	01400304 	movi	r5,12
   4edd8:	e13ffd17 	ldw	r4,-12(fp)
   4eddc:	00416640 	call	41664 <__mulsi3>
   4ede0:	1007883a 	mov	r3,r2
   4ede4:	00800174 	movhi	r2,5
   4ede8:	10894804 	addi	r2,r2,9504
   4edec:	1885883a 	add	r2,r3,r2
   4edf0:	00000106 	br	4edf8 <read+0x48>
   4edf4:	0005883a 	mov	r2,zero
   4edf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4edfc:	e0bffb17 	ldw	r2,-20(fp)
   4ee00:	10002226 	beq	r2,zero,4ee8c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4ee04:	e0bffb17 	ldw	r2,-20(fp)
   4ee08:	10800217 	ldw	r2,8(r2)
   4ee0c:	108000cc 	andi	r2,r2,3
   4ee10:	10800060 	cmpeqi	r2,r2,1
   4ee14:	1000181e 	bne	r2,zero,4ee78 <read+0xc8>
        (fd->dev->read))
   4ee18:	e0bffb17 	ldw	r2,-20(fp)
   4ee1c:	10800017 	ldw	r2,0(r2)
   4ee20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4ee24:	10001426 	beq	r2,zero,4ee78 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4ee28:	e0bffb17 	ldw	r2,-20(fp)
   4ee2c:	10800017 	ldw	r2,0(r2)
   4ee30:	10800517 	ldw	r2,20(r2)
   4ee34:	e0ffff17 	ldw	r3,-4(fp)
   4ee38:	180d883a 	mov	r6,r3
   4ee3c:	e17ffe17 	ldw	r5,-8(fp)
   4ee40:	e13ffb17 	ldw	r4,-20(fp)
   4ee44:	103ee83a 	callr	r2
   4ee48:	e0bffc15 	stw	r2,-16(fp)
   4ee4c:	e0bffc17 	ldw	r2,-16(fp)
   4ee50:	1000070e 	bge	r2,zero,4ee70 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4ee54:	004ed740 	call	4ed74 <alt_get_errno>
   4ee58:	1007883a 	mov	r3,r2
   4ee5c:	e0bffc17 	ldw	r2,-16(fp)
   4ee60:	0085c83a 	sub	r2,zero,r2
   4ee64:	18800015 	stw	r2,0(r3)
          return -1;
   4ee68:	00bfffc4 	movi	r2,-1
   4ee6c:	00000c06 	br	4eea0 <read+0xf0>
        }
        return rval;
   4ee70:	e0bffc17 	ldw	r2,-16(fp)
   4ee74:	00000a06 	br	4eea0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4ee78:	004ed740 	call	4ed74 <alt_get_errno>
   4ee7c:	1007883a 	mov	r3,r2
   4ee80:	00800344 	movi	r2,13
   4ee84:	18800015 	stw	r2,0(r3)
   4ee88:	00000406 	br	4ee9c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4ee8c:	004ed740 	call	4ed74 <alt_get_errno>
   4ee90:	1007883a 	mov	r3,r2
   4ee94:	00801444 	movi	r2,81
   4ee98:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4ee9c:	00bfffc4 	movi	r2,-1
}
   4eea0:	e037883a 	mov	sp,fp
   4eea4:	dfc00117 	ldw	ra,4(sp)
   4eea8:	df000017 	ldw	fp,0(sp)
   4eeac:	dec00204 	addi	sp,sp,8
   4eeb0:	f800283a 	ret

0004eeb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4eeb4:	defffc04 	addi	sp,sp,-16
   4eeb8:	dfc00315 	stw	ra,12(sp)
   4eebc:	df000215 	stw	fp,8(sp)
   4eec0:	dc000115 	stw	r16,4(sp)
   4eec4:	df000204 	addi	fp,sp,8
   4eec8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4eecc:	e0bffe17 	ldw	r2,-8(fp)
   4eed0:	108000d0 	cmplti	r2,r2,3
   4eed4:	1000111e 	bne	r2,zero,4ef1c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4eed8:	04000174 	movhi	r16,5
   4eedc:	84094804 	addi	r16,r16,9504
   4eee0:	e0bffe17 	ldw	r2,-8(fp)
   4eee4:	01400304 	movi	r5,12
   4eee8:	1009883a 	mov	r4,r2
   4eeec:	00416640 	call	41664 <__mulsi3>
   4eef0:	8085883a 	add	r2,r16,r2
   4eef4:	10800204 	addi	r2,r2,8
   4eef8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4eefc:	04000174 	movhi	r16,5
   4ef00:	84094804 	addi	r16,r16,9504
   4ef04:	e0bffe17 	ldw	r2,-8(fp)
   4ef08:	01400304 	movi	r5,12
   4ef0c:	1009883a 	mov	r4,r2
   4ef10:	00416640 	call	41664 <__mulsi3>
   4ef14:	8085883a 	add	r2,r16,r2
   4ef18:	10000015 	stw	zero,0(r2)
  }
}
   4ef1c:	0001883a 	nop
   4ef20:	e6ffff04 	addi	sp,fp,-4
   4ef24:	dfc00217 	ldw	ra,8(sp)
   4ef28:	df000117 	ldw	fp,4(sp)
   4ef2c:	dc000017 	ldw	r16,0(sp)
   4ef30:	dec00304 	addi	sp,sp,12
   4ef34:	f800283a 	ret

0004ef38 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4ef38:	defff904 	addi	sp,sp,-28
   4ef3c:	df000615 	stw	fp,24(sp)
   4ef40:	df000604 	addi	fp,sp,24
   4ef44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ef48:	0005303a 	rdctl	r2,status
   4ef4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ef50:	e0fffe17 	ldw	r3,-8(fp)
   4ef54:	00bfff84 	movi	r2,-2
   4ef58:	1884703a 	and	r2,r3,r2
   4ef5c:	1001703a 	wrctl	status,r2
  
  return context;
   4ef60:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4ef64:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4ef68:	d0a00c17 	ldw	r2,-32720(gp)
   4ef6c:	10c000c4 	addi	r3,r2,3
   4ef70:	00bfff04 	movi	r2,-4
   4ef74:	1884703a 	and	r2,r3,r2
   4ef78:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4ef7c:	d0e00c17 	ldw	r3,-32720(gp)
   4ef80:	e0bfff17 	ldw	r2,-4(fp)
   4ef84:	1887883a 	add	r3,r3,r2
   4ef88:	008001b4 	movhi	r2,6
   4ef8c:	10a40004 	addi	r2,r2,-28672
   4ef90:	10c0062e 	bgeu	r2,r3,4efac <sbrk+0x74>
   4ef94:	e0bffb17 	ldw	r2,-20(fp)
   4ef98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ef9c:	e0bffa17 	ldw	r2,-24(fp)
   4efa0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4efa4:	00bfffc4 	movi	r2,-1
   4efa8:	00000b06 	br	4efd8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4efac:	d0a00c17 	ldw	r2,-32720(gp)
   4efb0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4efb4:	d0e00c17 	ldw	r3,-32720(gp)
   4efb8:	e0bfff17 	ldw	r2,-4(fp)
   4efbc:	1885883a 	add	r2,r3,r2
   4efc0:	d0a00c15 	stw	r2,-32720(gp)
   4efc4:	e0bffb17 	ldw	r2,-20(fp)
   4efc8:	e0bffc15 	stw	r2,-16(fp)
   4efcc:	e0bffc17 	ldw	r2,-16(fp)
   4efd0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4efd4:	e0bffd17 	ldw	r2,-12(fp)
} 
   4efd8:	e037883a 	mov	sp,fp
   4efdc:	df000017 	ldw	fp,0(sp)
   4efe0:	dec00104 	addi	sp,sp,4
   4efe4:	f800283a 	ret

0004efe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4efe8:	defffe04 	addi	sp,sp,-8
   4efec:	dfc00115 	stw	ra,4(sp)
   4eff0:	df000015 	stw	fp,0(sp)
   4eff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eff8:	d0a00b17 	ldw	r2,-32724(gp)
   4effc:	10000326 	beq	r2,zero,4f00c <alt_get_errno+0x24>
   4f000:	d0a00b17 	ldw	r2,-32724(gp)
   4f004:	103ee83a 	callr	r2
   4f008:	00000106 	br	4f010 <alt_get_errno+0x28>
   4f00c:	d0a72004 	addi	r2,gp,-25472
}
   4f010:	e037883a 	mov	sp,fp
   4f014:	dfc00117 	ldw	ra,4(sp)
   4f018:	df000017 	ldw	fp,0(sp)
   4f01c:	dec00204 	addi	sp,sp,8
   4f020:	f800283a 	ret

0004f024 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   4f024:	defffc04 	addi	sp,sp,-16
   4f028:	dfc00315 	stw	ra,12(sp)
   4f02c:	df000215 	stw	fp,8(sp)
   4f030:	df000204 	addi	fp,sp,8
   4f034:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4f038:	d0a72c17 	ldw	r2,-25424(gp)
  clock_t ticks = alt_nticks(); 
   4f03c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4f040:	d0a72b17 	ldw	r2,-25428(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   4f044:	1000061e 	bne	r2,zero,4f060 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   4f048:	004efe80 	call	4efe8 <alt_get_errno>
   4f04c:	1007883a 	mov	r3,r2
   4f050:	00801604 	movi	r2,88
   4f054:	18800015 	stw	r2,0(r3)
    return 0;
   4f058:	0005883a 	mov	r2,zero
   4f05c:	00000a06 	br	4f088 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   4f060:	e0bfff17 	ldw	r2,-4(fp)
   4f064:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   4f068:	e0bfff17 	ldw	r2,-4(fp)
   4f06c:	e0fffe17 	ldw	r3,-8(fp)
   4f070:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   4f074:	e0bfff17 	ldw	r2,-4(fp)
   4f078:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   4f07c:	e0bfff17 	ldw	r2,-4(fp)
   4f080:	10000315 	stw	zero,12(r2)

  return ticks;
   4f084:	e0bffe17 	ldw	r2,-8(fp)
}
   4f088:	e037883a 	mov	sp,fp
   4f08c:	dfc00117 	ldw	ra,4(sp)
   4f090:	df000017 	ldw	fp,0(sp)
   4f094:	dec00204 	addi	sp,sp,8
   4f098:	f800283a 	ret

0004f09c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f09c:	defffe04 	addi	sp,sp,-8
   4f0a0:	dfc00115 	stw	ra,4(sp)
   4f0a4:	df000015 	stw	fp,0(sp)
   4f0a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f0ac:	d0a00b17 	ldw	r2,-32724(gp)
   4f0b0:	10000326 	beq	r2,zero,4f0c0 <alt_get_errno+0x24>
   4f0b4:	d0a00b17 	ldw	r2,-32724(gp)
   4f0b8:	103ee83a 	callr	r2
   4f0bc:	00000106 	br	4f0c4 <alt_get_errno+0x28>
   4f0c0:	d0a72004 	addi	r2,gp,-25472
}
   4f0c4:	e037883a 	mov	sp,fp
   4f0c8:	dfc00117 	ldw	ra,4(sp)
   4f0cc:	df000017 	ldw	fp,0(sp)
   4f0d0:	dec00204 	addi	sp,sp,8
   4f0d4:	f800283a 	ret

0004f0d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4f0d8:	defff904 	addi	sp,sp,-28
   4f0dc:	dfc00615 	stw	ra,24(sp)
   4f0e0:	df000515 	stw	fp,20(sp)
   4f0e4:	df000504 	addi	fp,sp,20
   4f0e8:	e13ffd15 	stw	r4,-12(fp)
   4f0ec:	e17ffe15 	stw	r5,-8(fp)
   4f0f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f0f4:	e0bffd17 	ldw	r2,-12(fp)
   4f0f8:	10000816 	blt	r2,zero,4f11c <write+0x44>
   4f0fc:	01400304 	movi	r5,12
   4f100:	e13ffd17 	ldw	r4,-12(fp)
   4f104:	00416640 	call	41664 <__mulsi3>
   4f108:	1007883a 	mov	r3,r2
   4f10c:	00800174 	movhi	r2,5
   4f110:	10894804 	addi	r2,r2,9504
   4f114:	1885883a 	add	r2,r3,r2
   4f118:	00000106 	br	4f120 <write+0x48>
   4f11c:	0005883a 	mov	r2,zero
   4f120:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4f124:	e0bffb17 	ldw	r2,-20(fp)
   4f128:	10002126 	beq	r2,zero,4f1b0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4f12c:	e0bffb17 	ldw	r2,-20(fp)
   4f130:	10800217 	ldw	r2,8(r2)
   4f134:	108000cc 	andi	r2,r2,3
   4f138:	10001826 	beq	r2,zero,4f19c <write+0xc4>
   4f13c:	e0bffb17 	ldw	r2,-20(fp)
   4f140:	10800017 	ldw	r2,0(r2)
   4f144:	10800617 	ldw	r2,24(r2)
   4f148:	10001426 	beq	r2,zero,4f19c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4f14c:	e0bffb17 	ldw	r2,-20(fp)
   4f150:	10800017 	ldw	r2,0(r2)
   4f154:	10800617 	ldw	r2,24(r2)
   4f158:	e0ffff17 	ldw	r3,-4(fp)
   4f15c:	180d883a 	mov	r6,r3
   4f160:	e17ffe17 	ldw	r5,-8(fp)
   4f164:	e13ffb17 	ldw	r4,-20(fp)
   4f168:	103ee83a 	callr	r2
   4f16c:	e0bffc15 	stw	r2,-16(fp)
   4f170:	e0bffc17 	ldw	r2,-16(fp)
   4f174:	1000070e 	bge	r2,zero,4f194 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4f178:	004f09c0 	call	4f09c <alt_get_errno>
   4f17c:	1007883a 	mov	r3,r2
   4f180:	e0bffc17 	ldw	r2,-16(fp)
   4f184:	0085c83a 	sub	r2,zero,r2
   4f188:	18800015 	stw	r2,0(r3)
        return -1;
   4f18c:	00bfffc4 	movi	r2,-1
   4f190:	00000c06 	br	4f1c4 <write+0xec>
      }
      return rval;
   4f194:	e0bffc17 	ldw	r2,-16(fp)
   4f198:	00000a06 	br	4f1c4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4f19c:	004f09c0 	call	4f09c <alt_get_errno>
   4f1a0:	1007883a 	mov	r3,r2
   4f1a4:	00800344 	movi	r2,13
   4f1a8:	18800015 	stw	r2,0(r3)
   4f1ac:	00000406 	br	4f1c0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4f1b0:	004f09c0 	call	4f09c <alt_get_errno>
   4f1b4:	1007883a 	mov	r3,r2
   4f1b8:	00801444 	movi	r2,81
   4f1bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4f1c0:	00bfffc4 	movi	r2,-1
}
   4f1c4:	e037883a 	mov	sp,fp
   4f1c8:	dfc00117 	ldw	ra,4(sp)
   4f1cc:	df000017 	ldw	fp,0(sp)
   4f1d0:	dec00204 	addi	sp,sp,8
   4f1d4:	f800283a 	ret

0004f1d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4f1d8:	defffd04 	addi	sp,sp,-12
   4f1dc:	dfc00215 	stw	ra,8(sp)
   4f1e0:	df000115 	stw	fp,4(sp)
   4f1e4:	df000104 	addi	fp,sp,4
   4f1e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4f1ec:	d1600804 	addi	r5,gp,-32736
   4f1f0:	e13fff17 	ldw	r4,-4(fp)
   4f1f4:	00509200 	call	50920 <alt_dev_llist_insert>
}
   4f1f8:	e037883a 	mov	sp,fp
   4f1fc:	dfc00117 	ldw	ra,4(sp)
   4f200:	df000017 	ldw	fp,0(sp)
   4f204:	dec00204 	addi	sp,sp,8
   4f208:	f800283a 	ret

0004f20c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4f20c:	defffd04 	addi	sp,sp,-12
   4f210:	dfc00215 	stw	ra,8(sp)
   4f214:	df000115 	stw	fp,4(sp)
   4f218:	df000104 	addi	fp,sp,4
   4f21c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1F, cpu_1f);
   4f220:	00513240 	call	51324 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4f224:	00800044 	movi	r2,1
   4f228:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4f22c:	0001883a 	nop
   4f230:	e037883a 	mov	sp,fp
   4f234:	dfc00117 	ldw	ra,4(sp)
   4f238:	df000017 	ldw	fp,0(sp)
   4f23c:	dec00204 	addi	sp,sp,8
   4f240:	f800283a 	ret

0004f244 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4f244:	defffe04 	addi	sp,sp,-8
   4f248:	dfc00115 	stw	ra,4(sp)
   4f24c:	df000015 	stw	fp,0(sp)
   4f250:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1F, timer_1f);
   4f254:	01c0fa04 	movi	r7,1000
   4f258:	01800044 	movi	r6,1
   4f25c:	000b883a 	mov	r5,zero
   4f260:	0009883a 	mov	r4,zero
   4f264:	00502980 	call	50298 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_QE, fifo_qe);
   4f268:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1F, jtag_uart_1f);
   4f26c:	01800404 	movi	r6,16
   4f270:	000b883a 	mov	r5,zero
   4f274:	01000174 	movhi	r4,5
   4f278:	2109b204 	addi	r4,r4,9928
   4f27c:	004f91c0 	call	4f91c <altera_avalon_jtag_uart_init>
   4f280:	01000174 	movhi	r4,5
   4f284:	2109a804 	addi	r4,r4,9888
   4f288:	004f1d80 	call	4f1d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1F, sysid_1f);
   4f28c:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   4f290:	01000174 	movhi	r4,5
   4f294:	210dc004 	addi	r4,r4,14080
   4f298:	0050c1c0 	call	50c1c <alt_fs_reg>
}
   4f29c:	0001883a 	nop
   4f2a0:	e037883a 	mov	sp,fp
   4f2a4:	dfc00117 	ldw	ra,4(sp)
   4f2a8:	df000017 	ldw	fp,0(sp)
   4f2ac:	dec00204 	addi	sp,sp,8
   4f2b0:	f800283a 	ret

0004f2b4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4f2b4:	defffa04 	addi	sp,sp,-24
   4f2b8:	dfc00515 	stw	ra,20(sp)
   4f2bc:	df000415 	stw	fp,16(sp)
   4f2c0:	df000404 	addi	fp,sp,16
   4f2c4:	e13ffc15 	stw	r4,-16(fp)
   4f2c8:	e17ffd15 	stw	r5,-12(fp)
   4f2cc:	e1bffe15 	stw	r6,-8(fp)
   4f2d0:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4f2d4:	01400fc4 	movi	r5,63
   4f2d8:	e13ffc17 	ldw	r4,-16(fp)
   4f2dc:	004f4800 	call	4f480 <altera_avalon_fifo_clear_event>
   4f2e0:	10000226 	beq	r2,zero,4f2ec <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4f2e4:	00bfffc4 	movi	r2,-1
   4f2e8:	00001306 	br	4f338 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4f2ec:	e17ffd17 	ldw	r5,-12(fp)
   4f2f0:	e13ffc17 	ldw	r4,-16(fp)
   4f2f4:	004f4e00 	call	4f4e0 <altera_avalon_fifo_write_ienable>
   4f2f8:	10000226 	beq	r2,zero,4f304 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4f2fc:	00bfff84 	movi	r2,-2
   4f300:	00000d06 	br	4f338 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4f304:	e17fff17 	ldw	r5,-4(fp)
   4f308:	e13ffc17 	ldw	r4,-16(fp)
   4f30c:	004f53c0 	call	4f53c <altera_avalon_fifo_write_almostfull>
   4f310:	10000226 	beq	r2,zero,4f31c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f314:	00bfff44 	movi	r2,-3
   4f318:	00000706 	br	4f338 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4f31c:	e17ffe17 	ldw	r5,-8(fp)
   4f320:	e13ffc17 	ldw	r4,-16(fp)
   4f324:	004f5980 	call	4f598 <altera_avalon_fifo_write_almostempty>
   4f328:	10000226 	beq	r2,zero,4f334 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f32c:	00bfff44 	movi	r2,-3
   4f330:	00000106 	br	4f338 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4f334:	0005883a 	mov	r2,zero
}
   4f338:	e037883a 	mov	sp,fp
   4f33c:	dfc00117 	ldw	ra,4(sp)
   4f340:	df000017 	ldw	fp,0(sp)
   4f344:	dec00204 	addi	sp,sp,8
   4f348:	f800283a 	ret

0004f34c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4f34c:	defffd04 	addi	sp,sp,-12
   4f350:	df000215 	stw	fp,8(sp)
   4f354:	df000204 	addi	fp,sp,8
   4f358:	e13ffe15 	stw	r4,-8(fp)
   4f35c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4f360:	e0bffe17 	ldw	r2,-8(fp)
   4f364:	10800104 	addi	r2,r2,4
   4f368:	10800037 	ldwio	r2,0(r2)
   4f36c:	1007883a 	mov	r3,r2
   4f370:	e0bfff17 	ldw	r2,-4(fp)
   4f374:	1884703a 	and	r2,r3,r2
}
   4f378:	e037883a 	mov	sp,fp
   4f37c:	df000017 	ldw	fp,0(sp)
   4f380:	dec00104 	addi	sp,sp,4
   4f384:	f800283a 	ret

0004f388 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4f388:	defffd04 	addi	sp,sp,-12
   4f38c:	df000215 	stw	fp,8(sp)
   4f390:	df000204 	addi	fp,sp,8
   4f394:	e13ffe15 	stw	r4,-8(fp)
   4f398:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4f39c:	e0bffe17 	ldw	r2,-8(fp)
   4f3a0:	10800304 	addi	r2,r2,12
   4f3a4:	10800037 	ldwio	r2,0(r2)
   4f3a8:	1007883a 	mov	r3,r2
   4f3ac:	e0bfff17 	ldw	r2,-4(fp)
   4f3b0:	1884703a 	and	r2,r3,r2
}
   4f3b4:	e037883a 	mov	sp,fp
   4f3b8:	df000017 	ldw	fp,0(sp)
   4f3bc:	dec00104 	addi	sp,sp,4
   4f3c0:	f800283a 	ret

0004f3c4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4f3c4:	defffe04 	addi	sp,sp,-8
   4f3c8:	df000115 	stw	fp,4(sp)
   4f3cc:	df000104 	addi	fp,sp,4
   4f3d0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4f3d4:	e0bfff17 	ldw	r2,-4(fp)
   4f3d8:	10800404 	addi	r2,r2,16
   4f3dc:	10800037 	ldwio	r2,0(r2)
}
   4f3e0:	e037883a 	mov	sp,fp
   4f3e4:	df000017 	ldw	fp,0(sp)
   4f3e8:	dec00104 	addi	sp,sp,4
   4f3ec:	f800283a 	ret

0004f3f0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4f3f0:	defffe04 	addi	sp,sp,-8
   4f3f4:	df000115 	stw	fp,4(sp)
   4f3f8:	df000104 	addi	fp,sp,4
   4f3fc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4f400:	e0bfff17 	ldw	r2,-4(fp)
   4f404:	10800504 	addi	r2,r2,20
   4f408:	10800037 	ldwio	r2,0(r2)
}
   4f40c:	e037883a 	mov	sp,fp
   4f410:	df000017 	ldw	fp,0(sp)
   4f414:	dec00104 	addi	sp,sp,4
   4f418:	f800283a 	ret

0004f41c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4f41c:	defffd04 	addi	sp,sp,-12
   4f420:	df000215 	stw	fp,8(sp)
   4f424:	df000204 	addi	fp,sp,8
   4f428:	e13ffe15 	stw	r4,-8(fp)
   4f42c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4f430:	e0bffe17 	ldw	r2,-8(fp)
   4f434:	10800204 	addi	r2,r2,8
   4f438:	10800037 	ldwio	r2,0(r2)
   4f43c:	1007883a 	mov	r3,r2
   4f440:	e0bfff17 	ldw	r2,-4(fp)
   4f444:	1884703a 	and	r2,r3,r2
}
   4f448:	e037883a 	mov	sp,fp
   4f44c:	df000017 	ldw	fp,0(sp)
   4f450:	dec00104 	addi	sp,sp,4
   4f454:	f800283a 	ret

0004f458 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4f458:	defffe04 	addi	sp,sp,-8
   4f45c:	df000115 	stw	fp,4(sp)
   4f460:	df000104 	addi	fp,sp,4
   4f464:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4f468:	e0bfff17 	ldw	r2,-4(fp)
   4f46c:	10800037 	ldwio	r2,0(r2)
}
   4f470:	e037883a 	mov	sp,fp
   4f474:	df000017 	ldw	fp,0(sp)
   4f478:	dec00104 	addi	sp,sp,4
   4f47c:	f800283a 	ret

0004f480 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4f480:	defffd04 	addi	sp,sp,-12
   4f484:	df000215 	stw	fp,8(sp)
   4f488:	df000204 	addi	fp,sp,8
   4f48c:	e13ffe15 	stw	r4,-8(fp)
   4f490:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4f494:	e0bffe17 	ldw	r2,-8(fp)
   4f498:	10800204 	addi	r2,r2,8
   4f49c:	1007883a 	mov	r3,r2
   4f4a0:	e0bfff17 	ldw	r2,-4(fp)
   4f4a4:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4f4a8:	e0bffe17 	ldw	r2,-8(fp)
   4f4ac:	10800204 	addi	r2,r2,8
   4f4b0:	10800037 	ldwio	r2,0(r2)
   4f4b4:	1007883a 	mov	r3,r2
   4f4b8:	e0bfff17 	ldw	r2,-4(fp)
   4f4bc:	1884703a 	and	r2,r3,r2
   4f4c0:	1000021e 	bne	r2,zero,4f4cc <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   4f4c4:	0005883a 	mov	r2,zero
   4f4c8:	00000106 	br	4f4d0 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4f4cc:	00bfffc4 	movi	r2,-1
}
   4f4d0:	e037883a 	mov	sp,fp
   4f4d4:	df000017 	ldw	fp,0(sp)
   4f4d8:	dec00104 	addi	sp,sp,4
   4f4dc:	f800283a 	ret

0004f4e0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4f4e0:	defffd04 	addi	sp,sp,-12
   4f4e4:	df000215 	stw	fp,8(sp)
   4f4e8:	df000204 	addi	fp,sp,8
   4f4ec:	e13ffe15 	stw	r4,-8(fp)
   4f4f0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4f4f4:	e0bffe17 	ldw	r2,-8(fp)
   4f4f8:	10800304 	addi	r2,r2,12
   4f4fc:	1007883a 	mov	r3,r2
   4f500:	e0bfff17 	ldw	r2,-4(fp)
   4f504:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4f508:	e0bffe17 	ldw	r2,-8(fp)
   4f50c:	10800304 	addi	r2,r2,12
   4f510:	10800037 	ldwio	r2,0(r2)
   4f514:	1007883a 	mov	r3,r2
   4f518:	e0bfff17 	ldw	r2,-4(fp)
   4f51c:	1880021e 	bne	r3,r2,4f528 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4f520:	0005883a 	mov	r2,zero
   4f524:	00000106 	br	4f52c <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4f528:	00bfff84 	movi	r2,-2
}
   4f52c:	e037883a 	mov	sp,fp
   4f530:	df000017 	ldw	fp,0(sp)
   4f534:	dec00104 	addi	sp,sp,4
   4f538:	f800283a 	ret

0004f53c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4f53c:	defffd04 	addi	sp,sp,-12
   4f540:	df000215 	stw	fp,8(sp)
   4f544:	df000204 	addi	fp,sp,8
   4f548:	e13ffe15 	stw	r4,-8(fp)
   4f54c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4f550:	e0bffe17 	ldw	r2,-8(fp)
   4f554:	10800404 	addi	r2,r2,16
   4f558:	1007883a 	mov	r3,r2
   4f55c:	e0bfff17 	ldw	r2,-4(fp)
   4f560:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4f564:	e0bffe17 	ldw	r2,-8(fp)
   4f568:	10800404 	addi	r2,r2,16
   4f56c:	10800037 	ldwio	r2,0(r2)
   4f570:	1007883a 	mov	r3,r2
   4f574:	e0bfff17 	ldw	r2,-4(fp)
   4f578:	1880021e 	bne	r3,r2,4f584 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4f57c:	0005883a 	mov	r2,zero
   4f580:	00000106 	br	4f588 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f584:	00bfff44 	movi	r2,-3
}
   4f588:	e037883a 	mov	sp,fp
   4f58c:	df000017 	ldw	fp,0(sp)
   4f590:	dec00104 	addi	sp,sp,4
   4f594:	f800283a 	ret

0004f598 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4f598:	defffd04 	addi	sp,sp,-12
   4f59c:	df000215 	stw	fp,8(sp)
   4f5a0:	df000204 	addi	fp,sp,8
   4f5a4:	e13ffe15 	stw	r4,-8(fp)
   4f5a8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4f5ac:	e0bffe17 	ldw	r2,-8(fp)
   4f5b0:	10800504 	addi	r2,r2,20
   4f5b4:	1007883a 	mov	r3,r2
   4f5b8:	e0bfff17 	ldw	r2,-4(fp)
   4f5bc:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4f5c0:	e0bffe17 	ldw	r2,-8(fp)
   4f5c4:	10800504 	addi	r2,r2,20
   4f5c8:	10800037 	ldwio	r2,0(r2)
   4f5cc:	1007883a 	mov	r3,r2
   4f5d0:	e0bfff17 	ldw	r2,-4(fp)
   4f5d4:	1880021e 	bne	r3,r2,4f5e0 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4f5d8:	0005883a 	mov	r2,zero
   4f5dc:	00000106 	br	4f5e4 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f5e0:	00bfff44 	movi	r2,-3
}
   4f5e4:	e037883a 	mov	sp,fp
   4f5e8:	df000017 	ldw	fp,0(sp)
   4f5ec:	dec00104 	addi	sp,sp,4
   4f5f0:	f800283a 	ret

0004f5f4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4f5f4:	defffb04 	addi	sp,sp,-20
   4f5f8:	dfc00415 	stw	ra,16(sp)
   4f5fc:	df000315 	stw	fp,12(sp)
   4f600:	df000304 	addi	fp,sp,12
   4f604:	e13ffd15 	stw	r4,-12(fp)
   4f608:	e17ffe15 	stw	r5,-8(fp)
   4f60c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4f610:	01400044 	movi	r5,1
   4f614:	e13ffe17 	ldw	r4,-8(fp)
   4f618:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   4f61c:	1000051e 	bne	r2,zero,4f634 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4f620:	e0bffd17 	ldw	r2,-12(fp)
   4f624:	e0ffff17 	ldw	r3,-4(fp)
   4f628:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4f62c:	0005883a 	mov	r2,zero
   4f630:	00000106 	br	4f638 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4f634:	00bfff04 	movi	r2,-4
    }
}
   4f638:	e037883a 	mov	sp,fp
   4f63c:	dfc00117 	ldw	ra,4(sp)
   4f640:	df000017 	ldw	fp,0(sp)
   4f644:	dec00204 	addi	sp,sp,8
   4f648:	f800283a 	ret

0004f64c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4f64c:	defffa04 	addi	sp,sp,-24
   4f650:	dfc00515 	stw	ra,20(sp)
   4f654:	df000415 	stw	fp,16(sp)
   4f658:	df000404 	addi	fp,sp,16
   4f65c:	e13ffd15 	stw	r4,-12(fp)
   4f660:	e17ffe15 	stw	r5,-8(fp)
   4f664:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4f668:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4f66c:	e0bfff17 	ldw	r2,-4(fp)
   4f670:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4f674:	01400084 	movi	r5,2
   4f678:	e13ffe17 	ldw	r4,-8(fp)
   4f67c:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   4f680:	1000071e 	bne	r2,zero,4f6a0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4f684:	e13ffe17 	ldw	r4,-8(fp)
   4f688:	004f4580 	call	4f458 <altera_avalon_fifo_read_level>
   4f68c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4f690:	e0bffd17 	ldw	r2,-12(fp)
   4f694:	10c00037 	ldwio	r3,0(r2)
   4f698:	e0bfff17 	ldw	r2,-4(fp)
   4f69c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4f6a0:	e0bffc17 	ldw	r2,-16(fp)
}
   4f6a4:	e037883a 	mov	sp,fp
   4f6a8:	dfc00117 	ldw	ra,4(sp)
   4f6ac:	df000017 	ldw	fp,0(sp)
   4f6b0:	dec00204 	addi	sp,sp,8
   4f6b4:	f800283a 	ret

0004f6b8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4f6b8:	defffc04 	addi	sp,sp,-16
   4f6bc:	dfc00315 	stw	ra,12(sp)
   4f6c0:	df000215 	stw	fp,8(sp)
   4f6c4:	df000204 	addi	fp,sp,8
   4f6c8:	e13ffe15 	stw	r4,-8(fp)
   4f6cc:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4f6d0:	01400084 	movi	r5,2
   4f6d4:	e13fff17 	ldw	r4,-4(fp)
   4f6d8:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   4f6dc:	1000031e 	bne	r2,zero,4f6ec <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4f6e0:	e0bffe17 	ldw	r2,-8(fp)
   4f6e4:	10800037 	ldwio	r2,0(r2)
   4f6e8:	00000106 	br	4f6f0 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4f6ec:	0005883a 	mov	r2,zero
}
   4f6f0:	e037883a 	mov	sp,fp
   4f6f4:	dfc00117 	ldw	ra,4(sp)
   4f6f8:	df000017 	ldw	fp,0(sp)
   4f6fc:	dec00204 	addi	sp,sp,8
   4f700:	f800283a 	ret

0004f704 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4f704:	defffb04 	addi	sp,sp,-20
   4f708:	dfc00415 	stw	ra,16(sp)
   4f70c:	df000315 	stw	fp,12(sp)
   4f710:	df000304 	addi	fp,sp,12
   4f714:	e13ffd15 	stw	r4,-12(fp)
   4f718:	e17ffe15 	stw	r5,-8(fp)
   4f71c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4f720:	01400044 	movi	r5,1
   4f724:	e13ffe17 	ldw	r4,-8(fp)
   4f728:	004f34c0 	call	4f34c <altera_avalon_fifo_read_status>
   4f72c:	1000071e 	bne	r2,zero,4f74c <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4f730:	e0bffd17 	ldw	r2,-12(fp)
   4f734:	10800104 	addi	r2,r2,4
   4f738:	1007883a 	mov	r3,r2
   4f73c:	e0bfff17 	ldw	r2,-4(fp)
   4f740:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   4f744:	0005883a 	mov	r2,zero
   4f748:	00000106 	br	4f750 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4f74c:	00bfff04 	movi	r2,-4
    }
}
   4f750:	e037883a 	mov	sp,fp
   4f754:	dfc00117 	ldw	ra,4(sp)
   4f758:	df000017 	ldw	fp,0(sp)
   4f75c:	dec00204 	addi	sp,sp,8
   4f760:	f800283a 	ret

0004f764 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4f764:	defffe04 	addi	sp,sp,-8
   4f768:	df000115 	stw	fp,4(sp)
   4f76c:	df000104 	addi	fp,sp,4
   4f770:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4f774:	e0bfff17 	ldw	r2,-4(fp)
   4f778:	10800104 	addi	r2,r2,4
   4f77c:	10800037 	ldwio	r2,0(r2)
}
   4f780:	e037883a 	mov	sp,fp
   4f784:	df000017 	ldw	fp,0(sp)
   4f788:	dec00104 	addi	sp,sp,4
   4f78c:	f800283a 	ret

0004f790 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4f790:	defffe04 	addi	sp,sp,-8
   4f794:	df000115 	stw	fp,4(sp)
   4f798:	df000104 	addi	fp,sp,4
   4f79c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4f7a0:	e0bfff17 	ldw	r2,-4(fp)
   4f7a4:	10800037 	ldwio	r2,0(r2)
}
   4f7a8:	e037883a 	mov	sp,fp
   4f7ac:	df000017 	ldw	fp,0(sp)
   4f7b0:	dec00104 	addi	sp,sp,4
   4f7b4:	f800283a 	ret

0004f7b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4f7b8:	defffa04 	addi	sp,sp,-24
   4f7bc:	dfc00515 	stw	ra,20(sp)
   4f7c0:	df000415 	stw	fp,16(sp)
   4f7c4:	df000404 	addi	fp,sp,16
   4f7c8:	e13ffd15 	stw	r4,-12(fp)
   4f7cc:	e17ffe15 	stw	r5,-8(fp)
   4f7d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f7d4:	e0bffd17 	ldw	r2,-12(fp)
   4f7d8:	10800017 	ldw	r2,0(r2)
   4f7dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f7e0:	e0bffc17 	ldw	r2,-16(fp)
   4f7e4:	10c00a04 	addi	r3,r2,40
   4f7e8:	e0bffd17 	ldw	r2,-12(fp)
   4f7ec:	10800217 	ldw	r2,8(r2)
   4f7f0:	100f883a 	mov	r7,r2
   4f7f4:	e1bfff17 	ldw	r6,-4(fp)
   4f7f8:	e17ffe17 	ldw	r5,-8(fp)
   4f7fc:	1809883a 	mov	r4,r3
   4f800:	004fde00 	call	4fde0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4f804:	e037883a 	mov	sp,fp
   4f808:	dfc00117 	ldw	ra,4(sp)
   4f80c:	df000017 	ldw	fp,0(sp)
   4f810:	dec00204 	addi	sp,sp,8
   4f814:	f800283a 	ret

0004f818 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4f818:	defffa04 	addi	sp,sp,-24
   4f81c:	dfc00515 	stw	ra,20(sp)
   4f820:	df000415 	stw	fp,16(sp)
   4f824:	df000404 	addi	fp,sp,16
   4f828:	e13ffd15 	stw	r4,-12(fp)
   4f82c:	e17ffe15 	stw	r5,-8(fp)
   4f830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f834:	e0bffd17 	ldw	r2,-12(fp)
   4f838:	10800017 	ldw	r2,0(r2)
   4f83c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f840:	e0bffc17 	ldw	r2,-16(fp)
   4f844:	10c00a04 	addi	r3,r2,40
   4f848:	e0bffd17 	ldw	r2,-12(fp)
   4f84c:	10800217 	ldw	r2,8(r2)
   4f850:	100f883a 	mov	r7,r2
   4f854:	e1bfff17 	ldw	r6,-4(fp)
   4f858:	e17ffe17 	ldw	r5,-8(fp)
   4f85c:	1809883a 	mov	r4,r3
   4f860:	004fffc0 	call	4fffc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4f864:	e037883a 	mov	sp,fp
   4f868:	dfc00117 	ldw	ra,4(sp)
   4f86c:	df000017 	ldw	fp,0(sp)
   4f870:	dec00204 	addi	sp,sp,8
   4f874:	f800283a 	ret

0004f878 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4f878:	defffc04 	addi	sp,sp,-16
   4f87c:	dfc00315 	stw	ra,12(sp)
   4f880:	df000215 	stw	fp,8(sp)
   4f884:	df000204 	addi	fp,sp,8
   4f888:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f88c:	e0bfff17 	ldw	r2,-4(fp)
   4f890:	10800017 	ldw	r2,0(r2)
   4f894:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4f898:	e0bffe17 	ldw	r2,-8(fp)
   4f89c:	10c00a04 	addi	r3,r2,40
   4f8a0:	e0bfff17 	ldw	r2,-4(fp)
   4f8a4:	10800217 	ldw	r2,8(r2)
   4f8a8:	100b883a 	mov	r5,r2
   4f8ac:	1809883a 	mov	r4,r3
   4f8b0:	004fc880 	call	4fc88 <altera_avalon_jtag_uart_close>
}
   4f8b4:	e037883a 	mov	sp,fp
   4f8b8:	dfc00117 	ldw	ra,4(sp)
   4f8bc:	df000017 	ldw	fp,0(sp)
   4f8c0:	dec00204 	addi	sp,sp,8
   4f8c4:	f800283a 	ret

0004f8c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4f8c8:	defffa04 	addi	sp,sp,-24
   4f8cc:	dfc00515 	stw	ra,20(sp)
   4f8d0:	df000415 	stw	fp,16(sp)
   4f8d4:	df000404 	addi	fp,sp,16
   4f8d8:	e13ffd15 	stw	r4,-12(fp)
   4f8dc:	e17ffe15 	stw	r5,-8(fp)
   4f8e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4f8e4:	e0bffd17 	ldw	r2,-12(fp)
   4f8e8:	10800017 	ldw	r2,0(r2)
   4f8ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4f8f0:	e0bffc17 	ldw	r2,-16(fp)
   4f8f4:	10800a04 	addi	r2,r2,40
   4f8f8:	e1bfff17 	ldw	r6,-4(fp)
   4f8fc:	e17ffe17 	ldw	r5,-8(fp)
   4f900:	1009883a 	mov	r4,r2
   4f904:	004fcf00 	call	4fcf0 <altera_avalon_jtag_uart_ioctl>
}
   4f908:	e037883a 	mov	sp,fp
   4f90c:	dfc00117 	ldw	ra,4(sp)
   4f910:	df000017 	ldw	fp,0(sp)
   4f914:	dec00204 	addi	sp,sp,8
   4f918:	f800283a 	ret

0004f91c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4f91c:	defffa04 	addi	sp,sp,-24
   4f920:	dfc00515 	stw	ra,20(sp)
   4f924:	df000415 	stw	fp,16(sp)
   4f928:	df000404 	addi	fp,sp,16
   4f92c:	e13ffd15 	stw	r4,-12(fp)
   4f930:	e17ffe15 	stw	r5,-8(fp)
   4f934:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f938:	e0bffd17 	ldw	r2,-12(fp)
   4f93c:	00c00044 	movi	r3,1
   4f940:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4f944:	e0bffd17 	ldw	r2,-12(fp)
   4f948:	10800017 	ldw	r2,0(r2)
   4f94c:	10800104 	addi	r2,r2,4
   4f950:	1007883a 	mov	r3,r2
   4f954:	e0bffd17 	ldw	r2,-12(fp)
   4f958:	10800817 	ldw	r2,32(r2)
   4f95c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4f960:	e0bffe17 	ldw	r2,-8(fp)
   4f964:	e0ffff17 	ldw	r3,-4(fp)
   4f968:	d8000015 	stw	zero,0(sp)
   4f96c:	e1fffd17 	ldw	r7,-12(fp)
   4f970:	01800174 	movhi	r6,5
   4f974:	31be7704 	addi	r6,r6,-1572
   4f978:	180b883a 	mov	r5,r3
   4f97c:	1009883a 	mov	r4,r2
   4f980:	0050d800 	call	50d80 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4f984:	e0bffd17 	ldw	r2,-12(fp)
   4f988:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4f98c:	e0bffd17 	ldw	r2,-12(fp)
   4f990:	10800204 	addi	r2,r2,8
   4f994:	d0e72b17 	ldw	r3,-25428(gp)
   4f998:	e1fffd17 	ldw	r7,-12(fp)
   4f99c:	01800174 	movhi	r6,5
   4f9a0:	31befa04 	addi	r6,r6,-1048
   4f9a4:	180b883a 	mov	r5,r3
   4f9a8:	1009883a 	mov	r4,r2
   4f9ac:	00507980 	call	50798 <alt_alarm_start>
   4f9b0:	1000040e 	bge	r2,zero,4f9c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4f9b4:	e0fffd17 	ldw	r3,-12(fp)
   4f9b8:	00a00034 	movhi	r2,32768
   4f9bc:	10bfffc4 	addi	r2,r2,-1
   4f9c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4f9c4:	0001883a 	nop
   4f9c8:	e037883a 	mov	sp,fp
   4f9cc:	dfc00117 	ldw	ra,4(sp)
   4f9d0:	df000017 	ldw	fp,0(sp)
   4f9d4:	dec00204 	addi	sp,sp,8
   4f9d8:	f800283a 	ret

0004f9dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4f9dc:	defff804 	addi	sp,sp,-32
   4f9e0:	df000715 	stw	fp,28(sp)
   4f9e4:	df000704 	addi	fp,sp,28
   4f9e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4f9ec:	e0bfff17 	ldw	r2,-4(fp)
   4f9f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4f9f4:	e0bffb17 	ldw	r2,-20(fp)
   4f9f8:	10800017 	ldw	r2,0(r2)
   4f9fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4fa00:	e0bffc17 	ldw	r2,-16(fp)
   4fa04:	10800104 	addi	r2,r2,4
   4fa08:	10800037 	ldwio	r2,0(r2)
   4fa0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4fa10:	e0bffd17 	ldw	r2,-12(fp)
   4fa14:	1080c00c 	andi	r2,r2,768
   4fa18:	10006d26 	beq	r2,zero,4fbd0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4fa1c:	e0bffd17 	ldw	r2,-12(fp)
   4fa20:	1080400c 	andi	r2,r2,256
   4fa24:	10003526 	beq	r2,zero,4fafc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4fa28:	00800074 	movhi	r2,1
   4fa2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fa30:	e0bffb17 	ldw	r2,-20(fp)
   4fa34:	10800a17 	ldw	r2,40(r2)
   4fa38:	10800044 	addi	r2,r2,1
   4fa3c:	1081ffcc 	andi	r2,r2,2047
   4fa40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4fa44:	e0bffb17 	ldw	r2,-20(fp)
   4fa48:	10c00b17 	ldw	r3,44(r2)
   4fa4c:	e0bffe17 	ldw	r2,-8(fp)
   4fa50:	18801526 	beq	r3,r2,4faa8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4fa54:	e0bffc17 	ldw	r2,-16(fp)
   4fa58:	10800037 	ldwio	r2,0(r2)
   4fa5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4fa60:	e0bff917 	ldw	r2,-28(fp)
   4fa64:	10a0000c 	andi	r2,r2,32768
   4fa68:	10001126 	beq	r2,zero,4fab0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4fa6c:	e0bffb17 	ldw	r2,-20(fp)
   4fa70:	10800a17 	ldw	r2,40(r2)
   4fa74:	e0fff917 	ldw	r3,-28(fp)
   4fa78:	1809883a 	mov	r4,r3
   4fa7c:	e0fffb17 	ldw	r3,-20(fp)
   4fa80:	1885883a 	add	r2,r3,r2
   4fa84:	10800e04 	addi	r2,r2,56
   4fa88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fa8c:	e0bffb17 	ldw	r2,-20(fp)
   4fa90:	10800a17 	ldw	r2,40(r2)
   4fa94:	10800044 	addi	r2,r2,1
   4fa98:	10c1ffcc 	andi	r3,r2,2047
   4fa9c:	e0bffb17 	ldw	r2,-20(fp)
   4faa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4faa4:	003fe206 	br	4fa30 <_gp+0xffff4308>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4faa8:	0001883a 	nop
   4faac:	00000106 	br	4fab4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4fab0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4fab4:	e0bff917 	ldw	r2,-28(fp)
   4fab8:	10bfffec 	andhi	r2,r2,65535
   4fabc:	10000f26 	beq	r2,zero,4fafc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4fac0:	e0bffb17 	ldw	r2,-20(fp)
   4fac4:	10c00817 	ldw	r3,32(r2)
   4fac8:	00bfff84 	movi	r2,-2
   4facc:	1886703a 	and	r3,r3,r2
   4fad0:	e0bffb17 	ldw	r2,-20(fp)
   4fad4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4fad8:	e0bffc17 	ldw	r2,-16(fp)
   4fadc:	10800104 	addi	r2,r2,4
   4fae0:	1007883a 	mov	r3,r2
   4fae4:	e0bffb17 	ldw	r2,-20(fp)
   4fae8:	10800817 	ldw	r2,32(r2)
   4faec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4faf0:	e0bffc17 	ldw	r2,-16(fp)
   4faf4:	10800104 	addi	r2,r2,4
   4faf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4fafc:	e0bffd17 	ldw	r2,-12(fp)
   4fb00:	1080800c 	andi	r2,r2,512
   4fb04:	103fbe26 	beq	r2,zero,4fa00 <_gp+0xffff42d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4fb08:	e0bffd17 	ldw	r2,-12(fp)
   4fb0c:	1004d43a 	srli	r2,r2,16
   4fb10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4fb14:	00001406 	br	4fb68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4fb18:	e0bffc17 	ldw	r2,-16(fp)
   4fb1c:	e0fffb17 	ldw	r3,-20(fp)
   4fb20:	18c00d17 	ldw	r3,52(r3)
   4fb24:	e13ffb17 	ldw	r4,-20(fp)
   4fb28:	20c7883a 	add	r3,r4,r3
   4fb2c:	18c20e04 	addi	r3,r3,2104
   4fb30:	18c00003 	ldbu	r3,0(r3)
   4fb34:	18c03fcc 	andi	r3,r3,255
   4fb38:	18c0201c 	xori	r3,r3,128
   4fb3c:	18ffe004 	addi	r3,r3,-128
   4fb40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fb44:	e0bffb17 	ldw	r2,-20(fp)
   4fb48:	10800d17 	ldw	r2,52(r2)
   4fb4c:	10800044 	addi	r2,r2,1
   4fb50:	10c1ffcc 	andi	r3,r2,2047
   4fb54:	e0bffb17 	ldw	r2,-20(fp)
   4fb58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4fb5c:	e0bffa17 	ldw	r2,-24(fp)
   4fb60:	10bfffc4 	addi	r2,r2,-1
   4fb64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4fb68:	e0bffa17 	ldw	r2,-24(fp)
   4fb6c:	10000526 	beq	r2,zero,4fb84 <altera_avalon_jtag_uart_irq+0x1a8>
   4fb70:	e0bffb17 	ldw	r2,-20(fp)
   4fb74:	10c00d17 	ldw	r3,52(r2)
   4fb78:	e0bffb17 	ldw	r2,-20(fp)
   4fb7c:	10800c17 	ldw	r2,48(r2)
   4fb80:	18bfe51e 	bne	r3,r2,4fb18 <_gp+0xffff43f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4fb84:	e0bffa17 	ldw	r2,-24(fp)
   4fb88:	103f9d26 	beq	r2,zero,4fa00 <_gp+0xffff42d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4fb8c:	e0bffb17 	ldw	r2,-20(fp)
   4fb90:	10c00817 	ldw	r3,32(r2)
   4fb94:	00bfff44 	movi	r2,-3
   4fb98:	1886703a 	and	r3,r3,r2
   4fb9c:	e0bffb17 	ldw	r2,-20(fp)
   4fba0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fba4:	e0bffb17 	ldw	r2,-20(fp)
   4fba8:	10800017 	ldw	r2,0(r2)
   4fbac:	10800104 	addi	r2,r2,4
   4fbb0:	1007883a 	mov	r3,r2
   4fbb4:	e0bffb17 	ldw	r2,-20(fp)
   4fbb8:	10800817 	ldw	r2,32(r2)
   4fbbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4fbc0:	e0bffc17 	ldw	r2,-16(fp)
   4fbc4:	10800104 	addi	r2,r2,4
   4fbc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4fbcc:	003f8c06 	br	4fa00 <_gp+0xffff42d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4fbd0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4fbd4:	0001883a 	nop
   4fbd8:	e037883a 	mov	sp,fp
   4fbdc:	df000017 	ldw	fp,0(sp)
   4fbe0:	dec00104 	addi	sp,sp,4
   4fbe4:	f800283a 	ret

0004fbe8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4fbe8:	defff804 	addi	sp,sp,-32
   4fbec:	df000715 	stw	fp,28(sp)
   4fbf0:	df000704 	addi	fp,sp,28
   4fbf4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4fbf8:	e0bffb17 	ldw	r2,-20(fp)
   4fbfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4fc00:	e0bff917 	ldw	r2,-28(fp)
   4fc04:	10800017 	ldw	r2,0(r2)
   4fc08:	10800104 	addi	r2,r2,4
   4fc0c:	10800037 	ldwio	r2,0(r2)
   4fc10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4fc14:	e0bffa17 	ldw	r2,-24(fp)
   4fc18:	1081000c 	andi	r2,r2,1024
   4fc1c:	10000b26 	beq	r2,zero,4fc4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4fc20:	e0bff917 	ldw	r2,-28(fp)
   4fc24:	10800017 	ldw	r2,0(r2)
   4fc28:	10800104 	addi	r2,r2,4
   4fc2c:	1007883a 	mov	r3,r2
   4fc30:	e0bff917 	ldw	r2,-28(fp)
   4fc34:	10800817 	ldw	r2,32(r2)
   4fc38:	10810014 	ori	r2,r2,1024
   4fc3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4fc40:	e0bff917 	ldw	r2,-28(fp)
   4fc44:	10000915 	stw	zero,36(r2)
   4fc48:	00000a06 	br	4fc74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4fc4c:	e0bff917 	ldw	r2,-28(fp)
   4fc50:	10c00917 	ldw	r3,36(r2)
   4fc54:	00a00034 	movhi	r2,32768
   4fc58:	10bfff04 	addi	r2,r2,-4
   4fc5c:	10c00536 	bltu	r2,r3,4fc74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4fc60:	e0bff917 	ldw	r2,-28(fp)
   4fc64:	10800917 	ldw	r2,36(r2)
   4fc68:	10c00044 	addi	r3,r2,1
   4fc6c:	e0bff917 	ldw	r2,-28(fp)
   4fc70:	10c00915 	stw	r3,36(r2)
   4fc74:	d0a72b17 	ldw	r2,-25428(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4fc78:	e037883a 	mov	sp,fp
   4fc7c:	df000017 	ldw	fp,0(sp)
   4fc80:	dec00104 	addi	sp,sp,4
   4fc84:	f800283a 	ret

0004fc88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4fc88:	defffd04 	addi	sp,sp,-12
   4fc8c:	df000215 	stw	fp,8(sp)
   4fc90:	df000204 	addi	fp,sp,8
   4fc94:	e13ffe15 	stw	r4,-8(fp)
   4fc98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4fc9c:	00000506 	br	4fcb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4fca0:	e0bfff17 	ldw	r2,-4(fp)
   4fca4:	1090000c 	andi	r2,r2,16384
   4fca8:	10000226 	beq	r2,zero,4fcb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4fcac:	00bffd44 	movi	r2,-11
   4fcb0:	00000b06 	br	4fce0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4fcb4:	e0bffe17 	ldw	r2,-8(fp)
   4fcb8:	10c00d17 	ldw	r3,52(r2)
   4fcbc:	e0bffe17 	ldw	r2,-8(fp)
   4fcc0:	10800c17 	ldw	r2,48(r2)
   4fcc4:	18800526 	beq	r3,r2,4fcdc <altera_avalon_jtag_uart_close+0x54>
   4fcc8:	e0bffe17 	ldw	r2,-8(fp)
   4fccc:	10c00917 	ldw	r3,36(r2)
   4fcd0:	e0bffe17 	ldw	r2,-8(fp)
   4fcd4:	10800117 	ldw	r2,4(r2)
   4fcd8:	18bff136 	bltu	r3,r2,4fca0 <_gp+0xffff4578>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4fcdc:	0005883a 	mov	r2,zero
}
   4fce0:	e037883a 	mov	sp,fp
   4fce4:	df000017 	ldw	fp,0(sp)
   4fce8:	dec00104 	addi	sp,sp,4
   4fcec:	f800283a 	ret

0004fcf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4fcf0:	defffa04 	addi	sp,sp,-24
   4fcf4:	df000515 	stw	fp,20(sp)
   4fcf8:	df000504 	addi	fp,sp,20
   4fcfc:	e13ffd15 	stw	r4,-12(fp)
   4fd00:	e17ffe15 	stw	r5,-8(fp)
   4fd04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4fd08:	00bff9c4 	movi	r2,-25
   4fd0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4fd10:	e0bffe17 	ldw	r2,-8(fp)
   4fd14:	10da8060 	cmpeqi	r3,r2,27137
   4fd18:	1800031e 	bne	r3,zero,4fd28 <altera_avalon_jtag_uart_ioctl+0x38>
   4fd1c:	109a80a0 	cmpeqi	r2,r2,27138
   4fd20:	1000181e 	bne	r2,zero,4fd84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4fd24:	00002906 	br	4fdcc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4fd28:	e0bffd17 	ldw	r2,-12(fp)
   4fd2c:	10c00117 	ldw	r3,4(r2)
   4fd30:	00a00034 	movhi	r2,32768
   4fd34:	10bfffc4 	addi	r2,r2,-1
   4fd38:	18802126 	beq	r3,r2,4fdc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4fd3c:	e0bfff17 	ldw	r2,-4(fp)
   4fd40:	10800017 	ldw	r2,0(r2)
   4fd44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4fd48:	e0bffc17 	ldw	r2,-16(fp)
   4fd4c:	10800090 	cmplti	r2,r2,2
   4fd50:	1000061e 	bne	r2,zero,4fd6c <altera_avalon_jtag_uart_ioctl+0x7c>
   4fd54:	e0fffc17 	ldw	r3,-16(fp)
   4fd58:	00a00034 	movhi	r2,32768
   4fd5c:	10bfffc4 	addi	r2,r2,-1
   4fd60:	18800226 	beq	r3,r2,4fd6c <altera_avalon_jtag_uart_ioctl+0x7c>
   4fd64:	e0bffc17 	ldw	r2,-16(fp)
   4fd68:	00000206 	br	4fd74 <altera_avalon_jtag_uart_ioctl+0x84>
   4fd6c:	00a00034 	movhi	r2,32768
   4fd70:	10bfff84 	addi	r2,r2,-2
   4fd74:	e0fffd17 	ldw	r3,-12(fp)
   4fd78:	18800115 	stw	r2,4(r3)
      rc = 0;
   4fd7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fd80:	00000f06 	br	4fdc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4fd84:	e0bffd17 	ldw	r2,-12(fp)
   4fd88:	10c00117 	ldw	r3,4(r2)
   4fd8c:	00a00034 	movhi	r2,32768
   4fd90:	10bfffc4 	addi	r2,r2,-1
   4fd94:	18800c26 	beq	r3,r2,4fdc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4fd98:	e0bffd17 	ldw	r2,-12(fp)
   4fd9c:	10c00917 	ldw	r3,36(r2)
   4fda0:	e0bffd17 	ldw	r2,-12(fp)
   4fda4:	10800117 	ldw	r2,4(r2)
   4fda8:	1885803a 	cmpltu	r2,r3,r2
   4fdac:	10c03fcc 	andi	r3,r2,255
   4fdb0:	e0bfff17 	ldw	r2,-4(fp)
   4fdb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4fdb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fdbc:	00000206 	br	4fdc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4fdc0:	0001883a 	nop
   4fdc4:	00000106 	br	4fdcc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4fdc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4fdcc:	e0bffb17 	ldw	r2,-20(fp)
}
   4fdd0:	e037883a 	mov	sp,fp
   4fdd4:	df000017 	ldw	fp,0(sp)
   4fdd8:	dec00104 	addi	sp,sp,4
   4fddc:	f800283a 	ret

0004fde0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4fde0:	defff304 	addi	sp,sp,-52
   4fde4:	dfc00c15 	stw	ra,48(sp)
   4fde8:	df000b15 	stw	fp,44(sp)
   4fdec:	df000b04 	addi	fp,sp,44
   4fdf0:	e13ffc15 	stw	r4,-16(fp)
   4fdf4:	e17ffd15 	stw	r5,-12(fp)
   4fdf8:	e1bffe15 	stw	r6,-8(fp)
   4fdfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4fe00:	e0bffd17 	ldw	r2,-12(fp)
   4fe04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fe08:	00004706 	br	4ff28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4fe0c:	e0bffc17 	ldw	r2,-16(fp)
   4fe10:	10800a17 	ldw	r2,40(r2)
   4fe14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4fe18:	e0bffc17 	ldw	r2,-16(fp)
   4fe1c:	10800b17 	ldw	r2,44(r2)
   4fe20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4fe24:	e0fff717 	ldw	r3,-36(fp)
   4fe28:	e0bff817 	ldw	r2,-32(fp)
   4fe2c:	18800536 	bltu	r3,r2,4fe44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4fe30:	e0fff717 	ldw	r3,-36(fp)
   4fe34:	e0bff817 	ldw	r2,-32(fp)
   4fe38:	1885c83a 	sub	r2,r3,r2
   4fe3c:	e0bff615 	stw	r2,-40(fp)
   4fe40:	00000406 	br	4fe54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4fe44:	00c20004 	movi	r3,2048
   4fe48:	e0bff817 	ldw	r2,-32(fp)
   4fe4c:	1885c83a 	sub	r2,r3,r2
   4fe50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fe54:	e0bff617 	ldw	r2,-40(fp)
   4fe58:	10001e26 	beq	r2,zero,4fed4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4fe5c:	e0fffe17 	ldw	r3,-8(fp)
   4fe60:	e0bff617 	ldw	r2,-40(fp)
   4fe64:	1880022e 	bgeu	r3,r2,4fe70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4fe68:	e0bffe17 	ldw	r2,-8(fp)
   4fe6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4fe70:	e0bffc17 	ldw	r2,-16(fp)
   4fe74:	10c00e04 	addi	r3,r2,56
   4fe78:	e0bff817 	ldw	r2,-32(fp)
   4fe7c:	1885883a 	add	r2,r3,r2
   4fe80:	e1bff617 	ldw	r6,-40(fp)
   4fe84:	100b883a 	mov	r5,r2
   4fe88:	e13ff517 	ldw	r4,-44(fp)
   4fe8c:	00485500 	call	48550 <memcpy>
      ptr   += n;
   4fe90:	e0fff517 	ldw	r3,-44(fp)
   4fe94:	e0bff617 	ldw	r2,-40(fp)
   4fe98:	1885883a 	add	r2,r3,r2
   4fe9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4fea0:	e0fffe17 	ldw	r3,-8(fp)
   4fea4:	e0bff617 	ldw	r2,-40(fp)
   4fea8:	1885c83a 	sub	r2,r3,r2
   4feac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4feb0:	e0fff817 	ldw	r3,-32(fp)
   4feb4:	e0bff617 	ldw	r2,-40(fp)
   4feb8:	1885883a 	add	r2,r3,r2
   4febc:	10c1ffcc 	andi	r3,r2,2047
   4fec0:	e0bffc17 	ldw	r2,-16(fp)
   4fec4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4fec8:	e0bffe17 	ldw	r2,-8(fp)
   4fecc:	00bfcf16 	blt	zero,r2,4fe0c <_gp+0xffff46e4>
   4fed0:	00000106 	br	4fed8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4fed4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4fed8:	e0fff517 	ldw	r3,-44(fp)
   4fedc:	e0bffd17 	ldw	r2,-12(fp)
   4fee0:	1880141e 	bne	r3,r2,4ff34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4fee4:	e0bfff17 	ldw	r2,-4(fp)
   4fee8:	1090000c 	andi	r2,r2,16384
   4feec:	1000131e 	bne	r2,zero,4ff3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4fef0:	0001883a 	nop
   4fef4:	e0bffc17 	ldw	r2,-16(fp)
   4fef8:	10c00a17 	ldw	r3,40(r2)
   4fefc:	e0bff717 	ldw	r2,-36(fp)
   4ff00:	1880051e 	bne	r3,r2,4ff18 <altera_avalon_jtag_uart_read+0x138>
   4ff04:	e0bffc17 	ldw	r2,-16(fp)
   4ff08:	10c00917 	ldw	r3,36(r2)
   4ff0c:	e0bffc17 	ldw	r2,-16(fp)
   4ff10:	10800117 	ldw	r2,4(r2)
   4ff14:	18bff736 	bltu	r3,r2,4fef4 <_gp+0xffff47cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4ff18:	e0bffc17 	ldw	r2,-16(fp)
   4ff1c:	10c00a17 	ldw	r3,40(r2)
   4ff20:	e0bff717 	ldw	r2,-36(fp)
   4ff24:	18800726 	beq	r3,r2,4ff44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4ff28:	e0bffe17 	ldw	r2,-8(fp)
   4ff2c:	00bfb716 	blt	zero,r2,4fe0c <_gp+0xffff46e4>
   4ff30:	00000506 	br	4ff48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4ff34:	0001883a 	nop
   4ff38:	00000306 	br	4ff48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4ff3c:	0001883a 	nop
   4ff40:	00000106 	br	4ff48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4ff44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4ff48:	e0fff517 	ldw	r3,-44(fp)
   4ff4c:	e0bffd17 	ldw	r2,-12(fp)
   4ff50:	18801826 	beq	r3,r2,4ffb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ff54:	0005303a 	rdctl	r2,status
   4ff58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ff5c:	e0fffb17 	ldw	r3,-20(fp)
   4ff60:	00bfff84 	movi	r2,-2
   4ff64:	1884703a 	and	r2,r3,r2
   4ff68:	1001703a 	wrctl	status,r2
  
  return context;
   4ff6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4ff70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ff74:	e0bffc17 	ldw	r2,-16(fp)
   4ff78:	10800817 	ldw	r2,32(r2)
   4ff7c:	10c00054 	ori	r3,r2,1
   4ff80:	e0bffc17 	ldw	r2,-16(fp)
   4ff84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ff88:	e0bffc17 	ldw	r2,-16(fp)
   4ff8c:	10800017 	ldw	r2,0(r2)
   4ff90:	10800104 	addi	r2,r2,4
   4ff94:	1007883a 	mov	r3,r2
   4ff98:	e0bffc17 	ldw	r2,-16(fp)
   4ff9c:	10800817 	ldw	r2,32(r2)
   4ffa0:	18800035 	stwio	r2,0(r3)
   4ffa4:	e0bffa17 	ldw	r2,-24(fp)
   4ffa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ffac:	e0bff917 	ldw	r2,-28(fp)
   4ffb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4ffb4:	e0fff517 	ldw	r3,-44(fp)
   4ffb8:	e0bffd17 	ldw	r2,-12(fp)
   4ffbc:	18800426 	beq	r3,r2,4ffd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4ffc0:	e0fff517 	ldw	r3,-44(fp)
   4ffc4:	e0bffd17 	ldw	r2,-12(fp)
   4ffc8:	1885c83a 	sub	r2,r3,r2
   4ffcc:	00000606 	br	4ffe8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4ffd0:	e0bfff17 	ldw	r2,-4(fp)
   4ffd4:	1090000c 	andi	r2,r2,16384
   4ffd8:	10000226 	beq	r2,zero,4ffe4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4ffdc:	00bffd44 	movi	r2,-11
   4ffe0:	00000106 	br	4ffe8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4ffe4:	00bffec4 	movi	r2,-5
}
   4ffe8:	e037883a 	mov	sp,fp
   4ffec:	dfc00117 	ldw	ra,4(sp)
   4fff0:	df000017 	ldw	fp,0(sp)
   4fff4:	dec00204 	addi	sp,sp,8
   4fff8:	f800283a 	ret

0004fffc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4fffc:	defff304 	addi	sp,sp,-52
   50000:	dfc00c15 	stw	ra,48(sp)
   50004:	df000b15 	stw	fp,44(sp)
   50008:	df000b04 	addi	fp,sp,44
   5000c:	e13ffc15 	stw	r4,-16(fp)
   50010:	e17ffd15 	stw	r5,-12(fp)
   50014:	e1bffe15 	stw	r6,-8(fp)
   50018:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   5001c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   50020:	e0bffd17 	ldw	r2,-12(fp)
   50024:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50028:	00003706 	br	50108 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   5002c:	e0bffc17 	ldw	r2,-16(fp)
   50030:	10800c17 	ldw	r2,48(r2)
   50034:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   50038:	e0bffc17 	ldw	r2,-16(fp)
   5003c:	10800d17 	ldw	r2,52(r2)
   50040:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   50044:	e0fff917 	ldw	r3,-28(fp)
   50048:	e0bff517 	ldw	r2,-44(fp)
   5004c:	1880062e 	bgeu	r3,r2,50068 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   50050:	e0fff517 	ldw	r3,-44(fp)
   50054:	e0bff917 	ldw	r2,-28(fp)
   50058:	1885c83a 	sub	r2,r3,r2
   5005c:	10bfffc4 	addi	r2,r2,-1
   50060:	e0bff615 	stw	r2,-40(fp)
   50064:	00000b06 	br	50094 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   50068:	e0bff517 	ldw	r2,-44(fp)
   5006c:	10000526 	beq	r2,zero,50084 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   50070:	00c20004 	movi	r3,2048
   50074:	e0bff917 	ldw	r2,-28(fp)
   50078:	1885c83a 	sub	r2,r3,r2
   5007c:	e0bff615 	stw	r2,-40(fp)
   50080:	00000406 	br	50094 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   50084:	00c1ffc4 	movi	r3,2047
   50088:	e0bff917 	ldw	r2,-28(fp)
   5008c:	1885c83a 	sub	r2,r3,r2
   50090:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   50094:	e0bff617 	ldw	r2,-40(fp)
   50098:	10001e26 	beq	r2,zero,50114 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   5009c:	e0fffe17 	ldw	r3,-8(fp)
   500a0:	e0bff617 	ldw	r2,-40(fp)
   500a4:	1880022e 	bgeu	r3,r2,500b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   500a8:	e0bffe17 	ldw	r2,-8(fp)
   500ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   500b0:	e0bffc17 	ldw	r2,-16(fp)
   500b4:	10c20e04 	addi	r3,r2,2104
   500b8:	e0bff917 	ldw	r2,-28(fp)
   500bc:	1885883a 	add	r2,r3,r2
   500c0:	e1bff617 	ldw	r6,-40(fp)
   500c4:	e17ffd17 	ldw	r5,-12(fp)
   500c8:	1009883a 	mov	r4,r2
   500cc:	00485500 	call	48550 <memcpy>
      ptr   += n;
   500d0:	e0fffd17 	ldw	r3,-12(fp)
   500d4:	e0bff617 	ldw	r2,-40(fp)
   500d8:	1885883a 	add	r2,r3,r2
   500dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   500e0:	e0fffe17 	ldw	r3,-8(fp)
   500e4:	e0bff617 	ldw	r2,-40(fp)
   500e8:	1885c83a 	sub	r2,r3,r2
   500ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   500f0:	e0fff917 	ldw	r3,-28(fp)
   500f4:	e0bff617 	ldw	r2,-40(fp)
   500f8:	1885883a 	add	r2,r3,r2
   500fc:	10c1ffcc 	andi	r3,r2,2047
   50100:	e0bffc17 	ldw	r2,-16(fp)
   50104:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50108:	e0bffe17 	ldw	r2,-8(fp)
   5010c:	00bfc716 	blt	zero,r2,5002c <_gp+0xffff4904>
   50110:	00000106 	br	50118 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   50114:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50118:	0005303a 	rdctl	r2,status
   5011c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50120:	e0fffb17 	ldw	r3,-20(fp)
   50124:	00bfff84 	movi	r2,-2
   50128:	1884703a 	and	r2,r3,r2
   5012c:	1001703a 	wrctl	status,r2
  
  return context;
   50130:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   50134:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   50138:	e0bffc17 	ldw	r2,-16(fp)
   5013c:	10800817 	ldw	r2,32(r2)
   50140:	10c00094 	ori	r3,r2,2
   50144:	e0bffc17 	ldw	r2,-16(fp)
   50148:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5014c:	e0bffc17 	ldw	r2,-16(fp)
   50150:	10800017 	ldw	r2,0(r2)
   50154:	10800104 	addi	r2,r2,4
   50158:	1007883a 	mov	r3,r2
   5015c:	e0bffc17 	ldw	r2,-16(fp)
   50160:	10800817 	ldw	r2,32(r2)
   50164:	18800035 	stwio	r2,0(r3)
   50168:	e0bffa17 	ldw	r2,-24(fp)
   5016c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50170:	e0bff817 	ldw	r2,-32(fp)
   50174:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   50178:	e0bffe17 	ldw	r2,-8(fp)
   5017c:	0080100e 	bge	zero,r2,501c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   50180:	e0bfff17 	ldw	r2,-4(fp)
   50184:	1090000c 	andi	r2,r2,16384
   50188:	1000101e 	bne	r2,zero,501cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   5018c:	0001883a 	nop
   50190:	e0bffc17 	ldw	r2,-16(fp)
   50194:	10c00d17 	ldw	r3,52(r2)
   50198:	e0bff517 	ldw	r2,-44(fp)
   5019c:	1880051e 	bne	r3,r2,501b4 <altera_avalon_jtag_uart_write+0x1b8>
   501a0:	e0bffc17 	ldw	r2,-16(fp)
   501a4:	10c00917 	ldw	r3,36(r2)
   501a8:	e0bffc17 	ldw	r2,-16(fp)
   501ac:	10800117 	ldw	r2,4(r2)
   501b0:	18bff736 	bltu	r3,r2,50190 <_gp+0xffff4a68>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   501b4:	e0bffc17 	ldw	r2,-16(fp)
   501b8:	10800917 	ldw	r2,36(r2)
   501bc:	1000051e 	bne	r2,zero,501d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   501c0:	e0bffe17 	ldw	r2,-8(fp)
   501c4:	00bfd016 	blt	zero,r2,50108 <_gp+0xffff49e0>
   501c8:	00000306 	br	501d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   501cc:	0001883a 	nop
   501d0:	00000106 	br	501d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   501d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   501d8:	e0fffd17 	ldw	r3,-12(fp)
   501dc:	e0bff717 	ldw	r2,-36(fp)
   501e0:	18800426 	beq	r3,r2,501f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   501e4:	e0fffd17 	ldw	r3,-12(fp)
   501e8:	e0bff717 	ldw	r2,-36(fp)
   501ec:	1885c83a 	sub	r2,r3,r2
   501f0:	00000606 	br	5020c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   501f4:	e0bfff17 	ldw	r2,-4(fp)
   501f8:	1090000c 	andi	r2,r2,16384
   501fc:	10000226 	beq	r2,zero,50208 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   50200:	00bffd44 	movi	r2,-11
   50204:	00000106 	br	5020c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   50208:	00bffec4 	movi	r2,-5
}
   5020c:	e037883a 	mov	sp,fp
   50210:	dfc00117 	ldw	ra,4(sp)
   50214:	df000017 	ldw	fp,0(sp)
   50218:	dec00204 	addi	sp,sp,8
   5021c:	f800283a 	ret

00050220 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   50220:	defffa04 	addi	sp,sp,-24
   50224:	dfc00515 	stw	ra,20(sp)
   50228:	df000415 	stw	fp,16(sp)
   5022c:	df000404 	addi	fp,sp,16
   50230:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   50234:	0007883a 	mov	r3,zero
   50238:	e0bfff17 	ldw	r2,-4(fp)
   5023c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   50240:	e0bfff17 	ldw	r2,-4(fp)
   50244:	10800104 	addi	r2,r2,4
   50248:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5024c:	0005303a 	rdctl	r2,status
   50250:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50254:	e0fffd17 	ldw	r3,-12(fp)
   50258:	00bfff84 	movi	r2,-2
   5025c:	1884703a 	and	r2,r3,r2
   50260:	1001703a 	wrctl	status,r2
  
  return context;
   50264:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   50268:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   5026c:	005121c0 	call	5121c <alt_tick>
   50270:	e0bffc17 	ldw	r2,-16(fp)
   50274:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50278:	e0bffe17 	ldw	r2,-8(fp)
   5027c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   50280:	0001883a 	nop
   50284:	e037883a 	mov	sp,fp
   50288:	dfc00117 	ldw	ra,4(sp)
   5028c:	df000017 	ldw	fp,0(sp)
   50290:	dec00204 	addi	sp,sp,8
   50294:	f800283a 	ret

00050298 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   50298:	defff804 	addi	sp,sp,-32
   5029c:	dfc00715 	stw	ra,28(sp)
   502a0:	df000615 	stw	fp,24(sp)
   502a4:	df000604 	addi	fp,sp,24
   502a8:	e13ffc15 	stw	r4,-16(fp)
   502ac:	e17ffd15 	stw	r5,-12(fp)
   502b0:	e1bffe15 	stw	r6,-8(fp)
   502b4:	e1ffff15 	stw	r7,-4(fp)
   502b8:	e0bfff17 	ldw	r2,-4(fp)
   502bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   502c0:	d0a72b17 	ldw	r2,-25428(gp)
   502c4:	1000021e 	bne	r2,zero,502d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   502c8:	e0bffb17 	ldw	r2,-20(fp)
   502cc:	d0a72b15 	stw	r2,-25428(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   502d0:	e0bffc17 	ldw	r2,-16(fp)
   502d4:	10800104 	addi	r2,r2,4
   502d8:	00c001c4 	movi	r3,7
   502dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   502e0:	d8000015 	stw	zero,0(sp)
   502e4:	e1fffc17 	ldw	r7,-16(fp)
   502e8:	01800174 	movhi	r6,5
   502ec:	31808804 	addi	r6,r6,544
   502f0:	e17ffe17 	ldw	r5,-8(fp)
   502f4:	e13ffd17 	ldw	r4,-12(fp)
   502f8:	0050d800 	call	50d80 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   502fc:	0001883a 	nop
   50300:	e037883a 	mov	sp,fp
   50304:	dfc00117 	ldw	ra,4(sp)
   50308:	df000017 	ldw	fp,0(sp)
   5030c:	dec00204 	addi	sp,sp,8
   50310:	f800283a 	ret

00050314 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   50314:	defff404 	addi	sp,sp,-48
   50318:	df000b15 	stw	fp,44(sp)
   5031c:	df000b04 	addi	fp,sp,44
   50320:	e13ffc15 	stw	r4,-16(fp)
   50324:	e17ffd15 	stw	r5,-12(fp)
   50328:	e1bffe15 	stw	r6,-8(fp)
   5032c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   50330:	e0bffc17 	ldw	r2,-16(fp)
   50334:	10800017 	ldw	r2,0(r2)
   50338:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   5033c:	e0bff517 	ldw	r2,-44(fp)
   50340:	10800217 	ldw	r2,8(r2)
   50344:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   50348:	e0bff617 	ldw	r2,-40(fp)
   5034c:	10bfffc4 	addi	r2,r2,-1
   50350:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   50354:	e0bffb17 	ldw	r2,-20(fp)
   50358:	10800044 	addi	r2,r2,1
   5035c:	e0bffb15 	stw	r2,-20(fp)
   50360:	e0bffb17 	ldw	r2,-20(fp)
   50364:	10800003 	ldbu	r2,0(r2)
   50368:	10803fcc 	andi	r2,r2,255
   5036c:	1080201c 	xori	r2,r2,128
   50370:	10bfe004 	addi	r2,r2,-128
   50374:	103ff71e 	bne	r2,zero,50354 <_gp+0xffff4c2c>
    ;

  return ptr - string;
   50378:	e0fffb17 	ldw	r3,-20(fp)
   5037c:	e0bff617 	ldw	r2,-40(fp)
   50380:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   50384:	10800044 	addi	r2,r2,1
   50388:	1007883a 	mov	r3,r2
   5038c:	e0bffd17 	ldw	r2,-12(fp)
   50390:	10c5883a 	add	r2,r2,r3
   50394:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   50398:	d0a00d04 	addi	r2,gp,-32716
   5039c:	1007883a 	mov	r3,r2
  r4 = (int)name;
   503a0:	e0bffd17 	ldw	r2,-12(fp)
   503a4:	1009883a 	mov	r4,r2
  r5 = flags;
   503a8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   503ac:	e1bfff17 	ldw	r6,-4(fp)
   503b0:	e0bffd17 	ldw	r2,-12(fp)
   503b4:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   503b8:	e0bff917 	ldw	r2,-28(fp)
   503bc:	10bfffc4 	addi	r2,r2,-1
   503c0:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   503c4:	e0bffa17 	ldw	r2,-24(fp)
   503c8:	10800044 	addi	r2,r2,1
   503cc:	e0bffa15 	stw	r2,-24(fp)
   503d0:	e0bffa17 	ldw	r2,-24(fp)
   503d4:	10800003 	ldbu	r2,0(r2)
   503d8:	10803fcc 	andi	r2,r2,255
   503dc:	1080201c 	xori	r2,r2,128
   503e0:	10bfe004 	addi	r2,r2,-128
   503e4:	103ff71e 	bne	r2,zero,503c4 <_gp+0xffff4c9c>
    ;

  return ptr - string;
   503e8:	e1fffa17 	ldw	r7,-24(fp)
   503ec:	e0bff917 	ldw	r2,-28(fp)
   503f0:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   503f4:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   503f8:	003da07a 	break	1

  handle = (void *)r2;
   503fc:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   50400:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   50404:	e0bff817 	ldw	r2,-32(fp)
   50408:	1000031e 	bne	r2,zero,50418 <alt_hostfs_open+0x104>
    fd->priv = handle;
   5040c:	e0bffc17 	ldw	r2,-16(fp)
   50410:	e0fff717 	ldw	r3,-36(fp)
   50414:	10c00115 	stw	r3,4(r2)

  return -error;
   50418:	e0bff817 	ldw	r2,-32(fp)
   5041c:	0085c83a 	sub	r2,zero,r2
}
   50420:	e037883a 	mov	sp,fp
   50424:	df000017 	ldw	fp,0(sp)
   50428:	dec00104 	addi	sp,sp,4
   5042c:	f800283a 	ret

00050430 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   50430:	defffd04 	addi	sp,sp,-12
   50434:	df000215 	stw	fp,8(sp)
   50438:	df000204 	addi	fp,sp,8
   5043c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   50440:	d0a01004 	addi	r2,gp,-32704
   50444:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   50448:	e0bfff17 	ldw	r2,-4(fp)
   5044c:	10800117 	ldw	r2,4(r2)
   50450:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   50454:	003da07a 	break	1

  error = r3;
   50458:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   5045c:	e0bffe17 	ldw	r2,-8(fp)
   50460:	0085c83a 	sub	r2,zero,r2
}
   50464:	e037883a 	mov	sp,fp
   50468:	df000017 	ldw	fp,0(sp)
   5046c:	dec00104 	addi	sp,sp,4
   50470:	f800283a 	ret

00050474 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   50474:	defffa04 	addi	sp,sp,-24
   50478:	df000515 	stw	fp,20(sp)
   5047c:	df000504 	addi	fp,sp,20
   50480:	e13ffd15 	stw	r4,-12(fp)
   50484:	e17ffe15 	stw	r5,-8(fp)
   50488:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   5048c:	d0a01304 	addi	r2,gp,-32692
   50490:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   50494:	e0bffd17 	ldw	r2,-12(fp)
   50498:	10800117 	ldw	r2,4(r2)
   5049c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   504a0:	e0bffe17 	ldw	r2,-8(fp)
   504a4:	100b883a 	mov	r5,r2
  r6 = len;
   504a8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   504ac:	003da07a 	break	1

  rc = r2;
   504b0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   504b4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   504b8:	e0bffc17 	ldw	r2,-16(fp)
   504bc:	10000326 	beq	r2,zero,504cc <alt_hostfs_read+0x58>
   504c0:	e0bffc17 	ldw	r2,-16(fp)
   504c4:	0085c83a 	sub	r2,zero,r2
   504c8:	00000106 	br	504d0 <alt_hostfs_read+0x5c>
   504cc:	e0bffb17 	ldw	r2,-20(fp)
}
   504d0:	e037883a 	mov	sp,fp
   504d4:	df000017 	ldw	fp,0(sp)
   504d8:	dec00104 	addi	sp,sp,4
   504dc:	f800283a 	ret

000504e0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   504e0:	defffa04 	addi	sp,sp,-24
   504e4:	df000515 	stw	fp,20(sp)
   504e8:	df000504 	addi	fp,sp,20
   504ec:	e13ffd15 	stw	r4,-12(fp)
   504f0:	e17ffe15 	stw	r5,-8(fp)
   504f4:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   504f8:	d0a01604 	addi	r2,gp,-32680
   504fc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   50500:	e0bffd17 	ldw	r2,-12(fp)
   50504:	10800117 	ldw	r2,4(r2)
   50508:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   5050c:	e0bffe17 	ldw	r2,-8(fp)
   50510:	100b883a 	mov	r5,r2
  r6 = len;
   50514:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   50518:	003da07a 	break	1

  rc = r2;
   5051c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   50520:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   50524:	e0bffc17 	ldw	r2,-16(fp)
   50528:	10000326 	beq	r2,zero,50538 <alt_hostfs_write+0x58>
   5052c:	e0bffc17 	ldw	r2,-16(fp)
   50530:	0085c83a 	sub	r2,zero,r2
   50534:	00000106 	br	5053c <alt_hostfs_write+0x5c>
   50538:	e0bffb17 	ldw	r2,-20(fp)
}
   5053c:	e037883a 	mov	sp,fp
   50540:	df000017 	ldw	fp,0(sp)
   50544:	dec00104 	addi	sp,sp,4
   50548:	f800283a 	ret

0005054c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   5054c:	defffa04 	addi	sp,sp,-24
   50550:	df000515 	stw	fp,20(sp)
   50554:	df000504 	addi	fp,sp,20
   50558:	e13ffd15 	stw	r4,-12(fp)
   5055c:	e17ffe15 	stw	r5,-8(fp)
   50560:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   50564:	d0a01904 	addi	r2,gp,-32668
   50568:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   5056c:	e0bffd17 	ldw	r2,-12(fp)
   50570:	10800117 	ldw	r2,4(r2)
   50574:	1009883a 	mov	r4,r2
  r5 = ptr;
   50578:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   5057c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   50580:	003da07a 	break	1

  rc = r2;
   50584:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   50588:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   5058c:	e0bffc17 	ldw	r2,-16(fp)
   50590:	10000326 	beq	r2,zero,505a0 <alt_hostfs_seek+0x54>
   50594:	e0bffc17 	ldw	r2,-16(fp)
   50598:	0085c83a 	sub	r2,zero,r2
   5059c:	00000106 	br	505a4 <alt_hostfs_seek+0x58>
   505a0:	e0bffb17 	ldw	r2,-20(fp)
}
   505a4:	e037883a 	mov	sp,fp
   505a8:	df000017 	ldw	fp,0(sp)
   505ac:	dec00104 	addi	sp,sp,4
   505b0:	f800283a 	ret

000505b4 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   505b4:	deffe904 	addi	sp,sp,-92
   505b8:	df001615 	stw	fp,88(sp)
   505bc:	df001604 	addi	fp,sp,88
   505c0:	e13ffe15 	stw	r4,-8(fp)
   505c4:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   505c8:	d0a01c04 	addi	r2,gp,-32656
   505cc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   505d0:	e0bffe17 	ldw	r2,-8(fp)
   505d4:	10800117 	ldw	r2,4(r2)
   505d8:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   505dc:	e0bfee04 	addi	r2,fp,-72
   505e0:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   505e4:	003da07a 	break	1

  rc = r2;
   505e8:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   505ec:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   505f0:	e0bfec17 	ldw	r2,-80(fp)
   505f4:	1000621e 	bne	r2,zero,50780 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   505f8:	e0bfee04 	addi	r2,fp,-72
   505fc:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   50600:	e0bfea17 	ldw	r2,-88(fp)
   50604:	10801004 	addi	r2,r2,64
   50608:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   5060c:	00001606 	br	50668 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   50610:	e0bfea17 	ldw	r2,-88(fp)
   50614:	10800017 	ldw	r2,0(r2)
   50618:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   5061c:	e0bfea17 	ldw	r2,-88(fp)
   50620:	10800017 	ldw	r2,0(r2)
   50624:	10803fec 	andhi	r2,r2,255
   50628:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   5062c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   50630:	e0bfea17 	ldw	r2,-88(fp)
   50634:	10800017 	ldw	r2,0(r2)
   50638:	10bfc00c 	andi	r2,r2,65280
   5063c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   50640:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   50644:	e0bfea17 	ldw	r2,-88(fp)
   50648:	10800017 	ldw	r2,0(r2)
   5064c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   50650:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   50654:	e0bfea17 	ldw	r2,-88(fp)
   50658:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   5065c:	e0bfea17 	ldw	r2,-88(fp)
   50660:	10800104 	addi	r2,r2,4
   50664:	e0bfea15 	stw	r2,-88(fp)
   50668:	e0ffea17 	ldw	r3,-88(fp)
   5066c:	e0bfed17 	ldw	r2,-76(fp)
   50670:	18bfe736 	bltu	r3,r2,50610 <_gp+0xffff4ee8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   50674:	e0bfff17 	ldw	r2,-4(fp)
   50678:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   5067c:	e0bfea17 	ldw	r2,-88(fp)
   50680:	10800f04 	addi	r2,r2,60
   50684:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   50688:	00000506 	br	506a0 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   5068c:	e0bfea17 	ldw	r2,-88(fp)
   50690:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   50694:	e0bfea17 	ldw	r2,-88(fp)
   50698:	10800104 	addi	r2,r2,4
   5069c:	e0bfea15 	stw	r2,-88(fp)
   506a0:	e0ffea17 	ldw	r3,-88(fp)
   506a4:	e0bfed17 	ldw	r2,-76(fp)
   506a8:	18bff836 	bltu	r3,r2,5068c <_gp+0xffff4f64>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   506ac:	e0bfee17 	ldw	r2,-72(fp)
   506b0:	1007883a 	mov	r3,r2
   506b4:	e0bfff17 	ldw	r2,-4(fp)
   506b8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   506bc:	e0bfef17 	ldw	r2,-68(fp)
   506c0:	1007883a 	mov	r3,r2
   506c4:	e0bfff17 	ldw	r2,-4(fp)
   506c8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   506cc:	e0fff017 	ldw	r3,-64(fp)
   506d0:	e0bfff17 	ldw	r2,-4(fp)
   506d4:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   506d8:	e0bff117 	ldw	r2,-60(fp)
   506dc:	1007883a 	mov	r3,r2
   506e0:	e0bfff17 	ldw	r2,-4(fp)
   506e4:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   506e8:	e0bff217 	ldw	r2,-56(fp)
   506ec:	1007883a 	mov	r3,r2
   506f0:	e0bfff17 	ldw	r2,-4(fp)
   506f4:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   506f8:	e0bff317 	ldw	r2,-52(fp)
   506fc:	1007883a 	mov	r3,r2
   50700:	e0bfff17 	ldw	r2,-4(fp)
   50704:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   50708:	e0bff417 	ldw	r2,-48(fp)
   5070c:	1007883a 	mov	r3,r2
   50710:	e0bfff17 	ldw	r2,-4(fp)
   50714:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   50718:	e0bff617 	ldw	r2,-40(fp)
   5071c:	1007883a 	mov	r3,r2
   50720:	e0bfff17 	ldw	r2,-4(fp)
   50724:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   50728:	e0bffb17 	ldw	r2,-20(fp)
   5072c:	1007883a 	mov	r3,r2
   50730:	e0bfff17 	ldw	r2,-4(fp)
   50734:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   50738:	e0bffc17 	ldw	r2,-16(fp)
   5073c:	1007883a 	mov	r3,r2
   50740:	e0bfff17 	ldw	r2,-4(fp)
   50744:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   50748:	e0bffd17 	ldw	r2,-12(fp)
   5074c:	1007883a 	mov	r3,r2
   50750:	e0bfff17 	ldw	r2,-4(fp)
   50754:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   50758:	e0bff817 	ldw	r2,-32(fp)
   5075c:	1007883a 	mov	r3,r2
   50760:	e0bfff17 	ldw	r2,-4(fp)
   50764:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   50768:	e0bffa17 	ldw	r2,-24(fp)
   5076c:	1007883a 	mov	r3,r2
   50770:	e0bfff17 	ldw	r2,-4(fp)
   50774:	10c00c15 	stw	r3,48(r2)

    return rc;
   50778:	e0bfeb17 	ldw	r2,-84(fp)
   5077c:	00000206 	br	50788 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   50780:	e0bfec17 	ldw	r2,-80(fp)
   50784:	0085c83a 	sub	r2,zero,r2
}
   50788:	e037883a 	mov	sp,fp
   5078c:	df000017 	ldw	fp,0(sp)
   50790:	dec00104 	addi	sp,sp,4
   50794:	f800283a 	ret

00050798 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   50798:	defff504 	addi	sp,sp,-44
   5079c:	df000a15 	stw	fp,40(sp)
   507a0:	df000a04 	addi	fp,sp,40
   507a4:	e13ffc15 	stw	r4,-16(fp)
   507a8:	e17ffd15 	stw	r5,-12(fp)
   507ac:	e1bffe15 	stw	r6,-8(fp)
   507b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   507b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   507b8:	d0a72b17 	ldw	r2,-25428(gp)
  
  if (alt_ticks_per_second ())
   507bc:	10003c26 	beq	r2,zero,508b0 <alt_alarm_start+0x118>
  {
    if (alarm)
   507c0:	e0bffc17 	ldw	r2,-16(fp)
   507c4:	10003826 	beq	r2,zero,508a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   507c8:	e0bffc17 	ldw	r2,-16(fp)
   507cc:	e0fffe17 	ldw	r3,-8(fp)
   507d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   507d4:	e0bffc17 	ldw	r2,-16(fp)
   507d8:	e0ffff17 	ldw	r3,-4(fp)
   507dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   507e0:	0005303a 	rdctl	r2,status
   507e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   507e8:	e0fff917 	ldw	r3,-28(fp)
   507ec:	00bfff84 	movi	r2,-2
   507f0:	1884703a 	and	r2,r3,r2
   507f4:	1001703a 	wrctl	status,r2
  
  return context;
   507f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   507fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   50800:	d0a72c17 	ldw	r2,-25424(gp)
      
      current_nticks = alt_nticks();
   50804:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   50808:	e0fffd17 	ldw	r3,-12(fp)
   5080c:	e0bff617 	ldw	r2,-40(fp)
   50810:	1885883a 	add	r2,r3,r2
   50814:	10c00044 	addi	r3,r2,1
   50818:	e0bffc17 	ldw	r2,-16(fp)
   5081c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   50820:	e0bffc17 	ldw	r2,-16(fp)
   50824:	10c00217 	ldw	r3,8(r2)
   50828:	e0bff617 	ldw	r2,-40(fp)
   5082c:	1880042e 	bgeu	r3,r2,50840 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   50830:	e0bffc17 	ldw	r2,-16(fp)
   50834:	00c00044 	movi	r3,1
   50838:	10c00405 	stb	r3,16(r2)
   5083c:	00000206 	br	50848 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   50840:	e0bffc17 	ldw	r2,-16(fp)
   50844:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   50848:	e0bffc17 	ldw	r2,-16(fp)
   5084c:	d0e02004 	addi	r3,gp,-32640
   50850:	e0fffa15 	stw	r3,-24(fp)
   50854:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50858:	e0bffb17 	ldw	r2,-20(fp)
   5085c:	e0fffa17 	ldw	r3,-24(fp)
   50860:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50864:	e0bffa17 	ldw	r2,-24(fp)
   50868:	10c00017 	ldw	r3,0(r2)
   5086c:	e0bffb17 	ldw	r2,-20(fp)
   50870:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50874:	e0bffa17 	ldw	r2,-24(fp)
   50878:	10800017 	ldw	r2,0(r2)
   5087c:	e0fffb17 	ldw	r3,-20(fp)
   50880:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50884:	e0bffa17 	ldw	r2,-24(fp)
   50888:	e0fffb17 	ldw	r3,-20(fp)
   5088c:	10c00015 	stw	r3,0(r2)
   50890:	e0bff817 	ldw	r2,-32(fp)
   50894:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50898:	e0bff717 	ldw	r2,-36(fp)
   5089c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   508a0:	0005883a 	mov	r2,zero
   508a4:	00000306 	br	508b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   508a8:	00bffa84 	movi	r2,-22
   508ac:	00000106 	br	508b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   508b0:	00bfde84 	movi	r2,-134
  }
}
   508b4:	e037883a 	mov	sp,fp
   508b8:	df000017 	ldw	fp,0(sp)
   508bc:	dec00104 	addi	sp,sp,4
   508c0:	f800283a 	ret

000508c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   508c4:	deffff04 	addi	sp,sp,-4
   508c8:	df000015 	stw	fp,0(sp)
   508cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   508d0:	0001883a 	nop
   508d4:	e037883a 	mov	sp,fp
   508d8:	df000017 	ldw	fp,0(sp)
   508dc:	dec00104 	addi	sp,sp,4
   508e0:	f800283a 	ret

000508e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   508e4:	defffe04 	addi	sp,sp,-8
   508e8:	dfc00115 	stw	ra,4(sp)
   508ec:	df000015 	stw	fp,0(sp)
   508f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   508f4:	d0a00b17 	ldw	r2,-32724(gp)
   508f8:	10000326 	beq	r2,zero,50908 <alt_get_errno+0x24>
   508fc:	d0a00b17 	ldw	r2,-32724(gp)
   50900:	103ee83a 	callr	r2
   50904:	00000106 	br	5090c <alt_get_errno+0x28>
   50908:	d0a72004 	addi	r2,gp,-25472
}
   5090c:	e037883a 	mov	sp,fp
   50910:	dfc00117 	ldw	ra,4(sp)
   50914:	df000017 	ldw	fp,0(sp)
   50918:	dec00204 	addi	sp,sp,8
   5091c:	f800283a 	ret

00050920 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   50920:	defffa04 	addi	sp,sp,-24
   50924:	dfc00515 	stw	ra,20(sp)
   50928:	df000415 	stw	fp,16(sp)
   5092c:	df000404 	addi	fp,sp,16
   50930:	e13ffe15 	stw	r4,-8(fp)
   50934:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   50938:	e0bffe17 	ldw	r2,-8(fp)
   5093c:	10000326 	beq	r2,zero,5094c <alt_dev_llist_insert+0x2c>
   50940:	e0bffe17 	ldw	r2,-8(fp)
   50944:	10800217 	ldw	r2,8(r2)
   50948:	1000061e 	bne	r2,zero,50964 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   5094c:	00508e40 	call	508e4 <alt_get_errno>
   50950:	1007883a 	mov	r3,r2
   50954:	00800584 	movi	r2,22
   50958:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   5095c:	00bffa84 	movi	r2,-22
   50960:	00001306 	br	509b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50964:	e0bffe17 	ldw	r2,-8(fp)
   50968:	e0ffff17 	ldw	r3,-4(fp)
   5096c:	e0fffc15 	stw	r3,-16(fp)
   50970:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50974:	e0bffd17 	ldw	r2,-12(fp)
   50978:	e0fffc17 	ldw	r3,-16(fp)
   5097c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50980:	e0bffc17 	ldw	r2,-16(fp)
   50984:	10c00017 	ldw	r3,0(r2)
   50988:	e0bffd17 	ldw	r2,-12(fp)
   5098c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50990:	e0bffc17 	ldw	r2,-16(fp)
   50994:	10800017 	ldw	r2,0(r2)
   50998:	e0fffd17 	ldw	r3,-12(fp)
   5099c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   509a0:	e0bffc17 	ldw	r2,-16(fp)
   509a4:	e0fffd17 	ldw	r3,-12(fp)
   509a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   509ac:	0005883a 	mov	r2,zero
}
   509b0:	e037883a 	mov	sp,fp
   509b4:	dfc00117 	ldw	ra,4(sp)
   509b8:	df000017 	ldw	fp,0(sp)
   509bc:	dec00204 	addi	sp,sp,8
   509c0:	f800283a 	ret

000509c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   509c4:	defffd04 	addi	sp,sp,-12
   509c8:	dfc00215 	stw	ra,8(sp)
   509cc:	df000115 	stw	fp,4(sp)
   509d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   509d4:	00800174 	movhi	r2,5
   509d8:	1085dd04 	addi	r2,r2,6004
   509dc:	e0bfff15 	stw	r2,-4(fp)
   509e0:	00000606 	br	509fc <_do_ctors+0x38>
        (*ctor) (); 
   509e4:	e0bfff17 	ldw	r2,-4(fp)
   509e8:	10800017 	ldw	r2,0(r2)
   509ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   509f0:	e0bfff17 	ldw	r2,-4(fp)
   509f4:	10bfff04 	addi	r2,r2,-4
   509f8:	e0bfff15 	stw	r2,-4(fp)
   509fc:	e0ffff17 	ldw	r3,-4(fp)
   50a00:	00800174 	movhi	r2,5
   50a04:	1085de04 	addi	r2,r2,6008
   50a08:	18bff62e 	bgeu	r3,r2,509e4 <_gp+0xffff52bc>
        (*ctor) (); 
}
   50a0c:	0001883a 	nop
   50a10:	e037883a 	mov	sp,fp
   50a14:	dfc00117 	ldw	ra,4(sp)
   50a18:	df000017 	ldw	fp,0(sp)
   50a1c:	dec00204 	addi	sp,sp,8
   50a20:	f800283a 	ret

00050a24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   50a24:	defffd04 	addi	sp,sp,-12
   50a28:	dfc00215 	stw	ra,8(sp)
   50a2c:	df000115 	stw	fp,4(sp)
   50a30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50a34:	00800174 	movhi	r2,5
   50a38:	1085dd04 	addi	r2,r2,6004
   50a3c:	e0bfff15 	stw	r2,-4(fp)
   50a40:	00000606 	br	50a5c <_do_dtors+0x38>
        (*dtor) (); 
   50a44:	e0bfff17 	ldw	r2,-4(fp)
   50a48:	10800017 	ldw	r2,0(r2)
   50a4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50a50:	e0bfff17 	ldw	r2,-4(fp)
   50a54:	10bfff04 	addi	r2,r2,-4
   50a58:	e0bfff15 	stw	r2,-4(fp)
   50a5c:	e0ffff17 	ldw	r3,-4(fp)
   50a60:	00800174 	movhi	r2,5
   50a64:	1085de04 	addi	r2,r2,6008
   50a68:	18bff62e 	bgeu	r3,r2,50a44 <_gp+0xffff531c>
        (*dtor) (); 
}
   50a6c:	0001883a 	nop
   50a70:	e037883a 	mov	sp,fp
   50a74:	dfc00117 	ldw	ra,4(sp)
   50a78:	df000017 	ldw	fp,0(sp)
   50a7c:	dec00204 	addi	sp,sp,8
   50a80:	f800283a 	ret

00050a84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50a84:	defffa04 	addi	sp,sp,-24
   50a88:	dfc00515 	stw	ra,20(sp)
   50a8c:	df000415 	stw	fp,16(sp)
   50a90:	df000404 	addi	fp,sp,16
   50a94:	e13ffe15 	stw	r4,-8(fp)
   50a98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   50a9c:	e0bfff17 	ldw	r2,-4(fp)
   50aa0:	10800017 	ldw	r2,0(r2)
   50aa4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   50aa8:	e13ffe17 	ldw	r4,-8(fp)
   50aac:	0043d040 	call	43d04 <strlen>
   50ab0:	10800044 	addi	r2,r2,1
   50ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50ab8:	00000d06 	br	50af0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   50abc:	e0bffc17 	ldw	r2,-16(fp)
   50ac0:	10800217 	ldw	r2,8(r2)
   50ac4:	e0fffd17 	ldw	r3,-12(fp)
   50ac8:	180d883a 	mov	r6,r3
   50acc:	e17ffe17 	ldw	r5,-8(fp)
   50ad0:	1009883a 	mov	r4,r2
   50ad4:	00514300 	call	51430 <memcmp>
   50ad8:	1000021e 	bne	r2,zero,50ae4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   50adc:	e0bffc17 	ldw	r2,-16(fp)
   50ae0:	00000706 	br	50b00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   50ae4:	e0bffc17 	ldw	r2,-16(fp)
   50ae8:	10800017 	ldw	r2,0(r2)
   50aec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50af0:	e0fffc17 	ldw	r3,-16(fp)
   50af4:	e0bfff17 	ldw	r2,-4(fp)
   50af8:	18bff01e 	bne	r3,r2,50abc <_gp+0xffff5394>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50afc:	0005883a 	mov	r2,zero
}
   50b00:	e037883a 	mov	sp,fp
   50b04:	dfc00117 	ldw	ra,4(sp)
   50b08:	df000017 	ldw	fp,0(sp)
   50b0c:	dec00204 	addi	sp,sp,8
   50b10:	f800283a 	ret

00050b14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50b14:	defffb04 	addi	sp,sp,-20
   50b18:	dfc00415 	stw	ra,16(sp)
   50b1c:	df000315 	stw	fp,12(sp)
   50b20:	df000304 	addi	fp,sp,12
   50b24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50b28:	d0a00617 	ldw	r2,-32744(gp)
   50b2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50b30:	00003106 	br	50bf8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   50b34:	e0bffd17 	ldw	r2,-12(fp)
   50b38:	10800217 	ldw	r2,8(r2)
   50b3c:	1009883a 	mov	r4,r2
   50b40:	0043d040 	call	43d04 <strlen>
   50b44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50b48:	e0bffd17 	ldw	r2,-12(fp)
   50b4c:	10c00217 	ldw	r3,8(r2)
   50b50:	e0bffe17 	ldw	r2,-8(fp)
   50b54:	10bfffc4 	addi	r2,r2,-1
   50b58:	1885883a 	add	r2,r3,r2
   50b5c:	10800003 	ldbu	r2,0(r2)
   50b60:	10803fcc 	andi	r2,r2,255
   50b64:	1080201c 	xori	r2,r2,128
   50b68:	10bfe004 	addi	r2,r2,-128
   50b6c:	10800bd8 	cmpnei	r2,r2,47
   50b70:	1000031e 	bne	r2,zero,50b80 <alt_find_file+0x6c>
    {
      len -= 1;
   50b74:	e0bffe17 	ldw	r2,-8(fp)
   50b78:	10bfffc4 	addi	r2,r2,-1
   50b7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50b80:	e0bffe17 	ldw	r2,-8(fp)
   50b84:	e0ffff17 	ldw	r3,-4(fp)
   50b88:	1885883a 	add	r2,r3,r2
   50b8c:	10800003 	ldbu	r2,0(r2)
   50b90:	10803fcc 	andi	r2,r2,255
   50b94:	1080201c 	xori	r2,r2,128
   50b98:	10bfe004 	addi	r2,r2,-128
   50b9c:	10800be0 	cmpeqi	r2,r2,47
   50ba0:	1000081e 	bne	r2,zero,50bc4 <alt_find_file+0xb0>
   50ba4:	e0bffe17 	ldw	r2,-8(fp)
   50ba8:	e0ffff17 	ldw	r3,-4(fp)
   50bac:	1885883a 	add	r2,r3,r2
   50bb0:	10800003 	ldbu	r2,0(r2)
   50bb4:	10803fcc 	andi	r2,r2,255
   50bb8:	1080201c 	xori	r2,r2,128
   50bbc:	10bfe004 	addi	r2,r2,-128
   50bc0:	10000a1e 	bne	r2,zero,50bec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   50bc4:	e0bffd17 	ldw	r2,-12(fp)
   50bc8:	10800217 	ldw	r2,8(r2)
   50bcc:	e0fffe17 	ldw	r3,-8(fp)
   50bd0:	180d883a 	mov	r6,r3
   50bd4:	e17fff17 	ldw	r5,-4(fp)
   50bd8:	1009883a 	mov	r4,r2
   50bdc:	00514300 	call	51430 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50be0:	1000021e 	bne	r2,zero,50bec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   50be4:	e0bffd17 	ldw	r2,-12(fp)
   50be8:	00000706 	br	50c08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   50bec:	e0bffd17 	ldw	r2,-12(fp)
   50bf0:	10800017 	ldw	r2,0(r2)
   50bf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50bf8:	e0fffd17 	ldw	r3,-12(fp)
   50bfc:	d0a00604 	addi	r2,gp,-32744
   50c00:	18bfcc1e 	bne	r3,r2,50b34 <_gp+0xffff540c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50c04:	0005883a 	mov	r2,zero
}
   50c08:	e037883a 	mov	sp,fp
   50c0c:	dfc00117 	ldw	ra,4(sp)
   50c10:	df000017 	ldw	fp,0(sp)
   50c14:	dec00204 	addi	sp,sp,8
   50c18:	f800283a 	ret

00050c1c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   50c1c:	defffc04 	addi	sp,sp,-16
   50c20:	df000315 	stw	fp,12(sp)
   50c24:	df000304 	addi	fp,sp,12
   50c28:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   50c2c:	e0bfff17 	ldw	r2,-4(fp)
   50c30:	10800217 	ldw	r2,8(r2)
   50c34:	1000021e 	bne	r2,zero,50c40 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   50c38:	00bffb44 	movi	r2,-19
   50c3c:	00001306 	br	50c8c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   50c40:	e0bfff17 	ldw	r2,-4(fp)
   50c44:	d0e00604 	addi	r3,gp,-32744
   50c48:	e0fffd15 	stw	r3,-12(fp)
   50c4c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50c50:	e0bffe17 	ldw	r2,-8(fp)
   50c54:	e0fffd17 	ldw	r3,-12(fp)
   50c58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50c5c:	e0bffd17 	ldw	r2,-12(fp)
   50c60:	10c00017 	ldw	r3,0(r2)
   50c64:	e0bffe17 	ldw	r2,-8(fp)
   50c68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50c6c:	e0bffd17 	ldw	r2,-12(fp)
   50c70:	10800017 	ldw	r2,0(r2)
   50c74:	e0fffe17 	ldw	r3,-8(fp)
   50c78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50c7c:	e0bffd17 	ldw	r2,-12(fp)
   50c80:	e0fffe17 	ldw	r3,-8(fp)
   50c84:	10c00015 	stw	r3,0(r2)

  return 0;
   50c88:	0005883a 	mov	r2,zero
} 
   50c8c:	e037883a 	mov	sp,fp
   50c90:	df000017 	ldw	fp,0(sp)
   50c94:	dec00104 	addi	sp,sp,4
   50c98:	f800283a 	ret

00050c9c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50c9c:	defffa04 	addi	sp,sp,-24
   50ca0:	dfc00515 	stw	ra,20(sp)
   50ca4:	df000415 	stw	fp,16(sp)
   50ca8:	dc000315 	stw	r16,12(sp)
   50cac:	df000404 	addi	fp,sp,16
   50cb0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   50cb4:	00bffa04 	movi	r2,-24
   50cb8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50cbc:	e03ffc15 	stw	zero,-16(fp)
   50cc0:	00001d06 	br	50d38 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   50cc4:	04000174 	movhi	r16,5
   50cc8:	84094804 	addi	r16,r16,9504
   50ccc:	e0bffc17 	ldw	r2,-16(fp)
   50cd0:	01400304 	movi	r5,12
   50cd4:	1009883a 	mov	r4,r2
   50cd8:	00416640 	call	41664 <__mulsi3>
   50cdc:	8085883a 	add	r2,r16,r2
   50ce0:	10800017 	ldw	r2,0(r2)
   50ce4:	1000111e 	bne	r2,zero,50d2c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   50ce8:	04000174 	movhi	r16,5
   50cec:	84094804 	addi	r16,r16,9504
   50cf0:	e0bffc17 	ldw	r2,-16(fp)
   50cf4:	01400304 	movi	r5,12
   50cf8:	1009883a 	mov	r4,r2
   50cfc:	00416640 	call	41664 <__mulsi3>
   50d00:	8085883a 	add	r2,r16,r2
   50d04:	e0fffe17 	ldw	r3,-8(fp)
   50d08:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50d0c:	d0e00a17 	ldw	r3,-32728(gp)
   50d10:	e0bffc17 	ldw	r2,-16(fp)
   50d14:	1880020e 	bge	r3,r2,50d20 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   50d18:	e0bffc17 	ldw	r2,-16(fp)
   50d1c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   50d20:	e0bffc17 	ldw	r2,-16(fp)
   50d24:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   50d28:	00000606 	br	50d44 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50d2c:	e0bffc17 	ldw	r2,-16(fp)
   50d30:	10800044 	addi	r2,r2,1
   50d34:	e0bffc15 	stw	r2,-16(fp)
   50d38:	e0bffc17 	ldw	r2,-16(fp)
   50d3c:	10800810 	cmplti	r2,r2,32
   50d40:	103fe01e 	bne	r2,zero,50cc4 <_gp+0xffff559c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   50d44:	e0bffd17 	ldw	r2,-12(fp)
}
   50d48:	e6ffff04 	addi	sp,fp,-4
   50d4c:	dfc00217 	ldw	ra,8(sp)
   50d50:	df000117 	ldw	fp,4(sp)
   50d54:	dc000017 	ldw	r16,0(sp)
   50d58:	dec00304 	addi	sp,sp,12
   50d5c:	f800283a 	ret

00050d60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   50d60:	deffff04 	addi	sp,sp,-4
   50d64:	df000015 	stw	fp,0(sp)
   50d68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   50d6c:	0001883a 	nop
   50d70:	e037883a 	mov	sp,fp
   50d74:	df000017 	ldw	fp,0(sp)
   50d78:	dec00104 	addi	sp,sp,4
   50d7c:	f800283a 	ret

00050d80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50d80:	defff904 	addi	sp,sp,-28
   50d84:	dfc00615 	stw	ra,24(sp)
   50d88:	df000515 	stw	fp,20(sp)
   50d8c:	df000504 	addi	fp,sp,20
   50d90:	e13ffc15 	stw	r4,-16(fp)
   50d94:	e17ffd15 	stw	r5,-12(fp)
   50d98:	e1bffe15 	stw	r6,-8(fp)
   50d9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   50da0:	e0800217 	ldw	r2,8(fp)
   50da4:	d8800015 	stw	r2,0(sp)
   50da8:	e1ffff17 	ldw	r7,-4(fp)
   50dac:	e1bffe17 	ldw	r6,-8(fp)
   50db0:	e17ffd17 	ldw	r5,-12(fp)
   50db4:	e13ffc17 	ldw	r4,-16(fp)
   50db8:	0050f300 	call	50f30 <alt_iic_isr_register>
}  
   50dbc:	e037883a 	mov	sp,fp
   50dc0:	dfc00117 	ldw	ra,4(sp)
   50dc4:	df000017 	ldw	fp,0(sp)
   50dc8:	dec00204 	addi	sp,sp,8
   50dcc:	f800283a 	ret

00050dd0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   50dd0:	defff904 	addi	sp,sp,-28
   50dd4:	df000615 	stw	fp,24(sp)
   50dd8:	df000604 	addi	fp,sp,24
   50ddc:	e13ffe15 	stw	r4,-8(fp)
   50de0:	e17fff15 	stw	r5,-4(fp)
   50de4:	e0bfff17 	ldw	r2,-4(fp)
   50de8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50dec:	0005303a 	rdctl	r2,status
   50df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50df4:	e0fffb17 	ldw	r3,-20(fp)
   50df8:	00bfff84 	movi	r2,-2
   50dfc:	1884703a 	and	r2,r3,r2
   50e00:	1001703a 	wrctl	status,r2
  
  return context;
   50e04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50e08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   50e0c:	00c00044 	movi	r3,1
   50e10:	e0bffa17 	ldw	r2,-24(fp)
   50e14:	1884983a 	sll	r2,r3,r2
   50e18:	1007883a 	mov	r3,r2
   50e1c:	d0a72a17 	ldw	r2,-25432(gp)
   50e20:	1884b03a 	or	r2,r3,r2
   50e24:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50e28:	d0a72a17 	ldw	r2,-25432(gp)
   50e2c:	100170fa 	wrctl	ienable,r2
   50e30:	e0bffc17 	ldw	r2,-16(fp)
   50e34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e38:	e0bffd17 	ldw	r2,-12(fp)
   50e3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50e40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   50e44:	0001883a 	nop
}
   50e48:	e037883a 	mov	sp,fp
   50e4c:	df000017 	ldw	fp,0(sp)
   50e50:	dec00104 	addi	sp,sp,4
   50e54:	f800283a 	ret

00050e58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   50e58:	defff904 	addi	sp,sp,-28
   50e5c:	df000615 	stw	fp,24(sp)
   50e60:	df000604 	addi	fp,sp,24
   50e64:	e13ffe15 	stw	r4,-8(fp)
   50e68:	e17fff15 	stw	r5,-4(fp)
   50e6c:	e0bfff17 	ldw	r2,-4(fp)
   50e70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50e74:	0005303a 	rdctl	r2,status
   50e78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50e7c:	e0fffb17 	ldw	r3,-20(fp)
   50e80:	00bfff84 	movi	r2,-2
   50e84:	1884703a 	and	r2,r3,r2
   50e88:	1001703a 	wrctl	status,r2
  
  return context;
   50e8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50e90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   50e94:	00c00044 	movi	r3,1
   50e98:	e0bffa17 	ldw	r2,-24(fp)
   50e9c:	1884983a 	sll	r2,r3,r2
   50ea0:	0084303a 	nor	r2,zero,r2
   50ea4:	1007883a 	mov	r3,r2
   50ea8:	d0a72a17 	ldw	r2,-25432(gp)
   50eac:	1884703a 	and	r2,r3,r2
   50eb0:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50eb4:	d0a72a17 	ldw	r2,-25432(gp)
   50eb8:	100170fa 	wrctl	ienable,r2
   50ebc:	e0bffc17 	ldw	r2,-16(fp)
   50ec0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50ec4:	e0bffd17 	ldw	r2,-12(fp)
   50ec8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50ecc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   50ed0:	0001883a 	nop
}
   50ed4:	e037883a 	mov	sp,fp
   50ed8:	df000017 	ldw	fp,0(sp)
   50edc:	dec00104 	addi	sp,sp,4
   50ee0:	f800283a 	ret

00050ee4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   50ee4:	defffc04 	addi	sp,sp,-16
   50ee8:	df000315 	stw	fp,12(sp)
   50eec:	df000304 	addi	fp,sp,12
   50ef0:	e13ffe15 	stw	r4,-8(fp)
   50ef4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   50ef8:	000530fa 	rdctl	r2,ienable
   50efc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   50f00:	00c00044 	movi	r3,1
   50f04:	e0bfff17 	ldw	r2,-4(fp)
   50f08:	1884983a 	sll	r2,r3,r2
   50f0c:	1007883a 	mov	r3,r2
   50f10:	e0bffd17 	ldw	r2,-12(fp)
   50f14:	1884703a 	and	r2,r3,r2
   50f18:	1004c03a 	cmpne	r2,r2,zero
   50f1c:	10803fcc 	andi	r2,r2,255
}
   50f20:	e037883a 	mov	sp,fp
   50f24:	df000017 	ldw	fp,0(sp)
   50f28:	dec00104 	addi	sp,sp,4
   50f2c:	f800283a 	ret

00050f30 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50f30:	defff504 	addi	sp,sp,-44
   50f34:	dfc00a15 	stw	ra,40(sp)
   50f38:	df000915 	stw	fp,36(sp)
   50f3c:	df000904 	addi	fp,sp,36
   50f40:	e13ffc15 	stw	r4,-16(fp)
   50f44:	e17ffd15 	stw	r5,-12(fp)
   50f48:	e1bffe15 	stw	r6,-8(fp)
   50f4c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   50f50:	00bffa84 	movi	r2,-22
   50f54:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   50f58:	e0bffd17 	ldw	r2,-12(fp)
   50f5c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   50f60:	e0bff817 	ldw	r2,-32(fp)
   50f64:	10800808 	cmpgei	r2,r2,32
   50f68:	1000271e 	bne	r2,zero,51008 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50f6c:	0005303a 	rdctl	r2,status
   50f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50f74:	e0fffb17 	ldw	r3,-20(fp)
   50f78:	00bfff84 	movi	r2,-2
   50f7c:	1884703a 	and	r2,r3,r2
   50f80:	1001703a 	wrctl	status,r2
  
  return context;
   50f84:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   50f88:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   50f8c:	00800174 	movhi	r2,5
   50f90:	10950204 	addi	r2,r2,21512
   50f94:	e0fff817 	ldw	r3,-32(fp)
   50f98:	180690fa 	slli	r3,r3,3
   50f9c:	10c5883a 	add	r2,r2,r3
   50fa0:	e0fffe17 	ldw	r3,-8(fp)
   50fa4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   50fa8:	00800174 	movhi	r2,5
   50fac:	10950204 	addi	r2,r2,21512
   50fb0:	e0fff817 	ldw	r3,-32(fp)
   50fb4:	180690fa 	slli	r3,r3,3
   50fb8:	10c5883a 	add	r2,r2,r3
   50fbc:	10800104 	addi	r2,r2,4
   50fc0:	e0ffff17 	ldw	r3,-4(fp)
   50fc4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   50fc8:	e0bffe17 	ldw	r2,-8(fp)
   50fcc:	10000526 	beq	r2,zero,50fe4 <alt_iic_isr_register+0xb4>
   50fd0:	e0bff817 	ldw	r2,-32(fp)
   50fd4:	100b883a 	mov	r5,r2
   50fd8:	e13ffc17 	ldw	r4,-16(fp)
   50fdc:	0050dd00 	call	50dd0 <alt_ic_irq_enable>
   50fe0:	00000406 	br	50ff4 <alt_iic_isr_register+0xc4>
   50fe4:	e0bff817 	ldw	r2,-32(fp)
   50fe8:	100b883a 	mov	r5,r2
   50fec:	e13ffc17 	ldw	r4,-16(fp)
   50ff0:	0050e580 	call	50e58 <alt_ic_irq_disable>
   50ff4:	e0bff715 	stw	r2,-36(fp)
   50ff8:	e0bffa17 	ldw	r2,-24(fp)
   50ffc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51000:	e0bff917 	ldw	r2,-28(fp)
   51004:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   51008:	e0bff717 	ldw	r2,-36(fp)
}
   5100c:	e037883a 	mov	sp,fp
   51010:	dfc00117 	ldw	ra,4(sp)
   51014:	df000017 	ldw	fp,0(sp)
   51018:	dec00204 	addi	sp,sp,8
   5101c:	f800283a 	ret

00051020 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   51020:	defff804 	addi	sp,sp,-32
   51024:	dfc00715 	stw	ra,28(sp)
   51028:	df000615 	stw	fp,24(sp)
   5102c:	dc000515 	stw	r16,20(sp)
   51030:	df000604 	addi	fp,sp,24
   51034:	e13ffb15 	stw	r4,-20(fp)
   51038:	e17ffc15 	stw	r5,-16(fp)
   5103c:	e1bffd15 	stw	r6,-12(fp)
   51040:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   51044:	e1bffe17 	ldw	r6,-8(fp)
   51048:	e17ffd17 	ldw	r5,-12(fp)
   5104c:	e13ffc17 	ldw	r4,-16(fp)
   51050:	004ec180 	call	4ec18 <open>
   51054:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   51058:	e0bffa17 	ldw	r2,-24(fp)
   5105c:	10002216 	blt	r2,zero,510e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   51060:	04000174 	movhi	r16,5
   51064:	84094804 	addi	r16,r16,9504
   51068:	e0bffa17 	ldw	r2,-24(fp)
   5106c:	01400304 	movi	r5,12
   51070:	1009883a 	mov	r4,r2
   51074:	00416640 	call	41664 <__mulsi3>
   51078:	8085883a 	add	r2,r16,r2
   5107c:	10c00017 	ldw	r3,0(r2)
   51080:	e0bffb17 	ldw	r2,-20(fp)
   51084:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   51088:	04000174 	movhi	r16,5
   5108c:	84094804 	addi	r16,r16,9504
   51090:	e0bffa17 	ldw	r2,-24(fp)
   51094:	01400304 	movi	r5,12
   51098:	1009883a 	mov	r4,r2
   5109c:	00416640 	call	41664 <__mulsi3>
   510a0:	8085883a 	add	r2,r16,r2
   510a4:	10800104 	addi	r2,r2,4
   510a8:	10c00017 	ldw	r3,0(r2)
   510ac:	e0bffb17 	ldw	r2,-20(fp)
   510b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   510b4:	04000174 	movhi	r16,5
   510b8:	84094804 	addi	r16,r16,9504
   510bc:	e0bffa17 	ldw	r2,-24(fp)
   510c0:	01400304 	movi	r5,12
   510c4:	1009883a 	mov	r4,r2
   510c8:	00416640 	call	41664 <__mulsi3>
   510cc:	8085883a 	add	r2,r16,r2
   510d0:	10800204 	addi	r2,r2,8
   510d4:	10c00017 	ldw	r3,0(r2)
   510d8:	e0bffb17 	ldw	r2,-20(fp)
   510dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   510e0:	e13ffa17 	ldw	r4,-24(fp)
   510e4:	004eeb40 	call	4eeb4 <alt_release_fd>
  }
} 
   510e8:	0001883a 	nop
   510ec:	e6ffff04 	addi	sp,fp,-4
   510f0:	dfc00217 	ldw	ra,8(sp)
   510f4:	df000117 	ldw	fp,4(sp)
   510f8:	dc000017 	ldw	r16,0(sp)
   510fc:	dec00304 	addi	sp,sp,12
   51100:	f800283a 	ret

00051104 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   51104:	defffb04 	addi	sp,sp,-20
   51108:	dfc00415 	stw	ra,16(sp)
   5110c:	df000315 	stw	fp,12(sp)
   51110:	df000304 	addi	fp,sp,12
   51114:	e13ffd15 	stw	r4,-12(fp)
   51118:	e17ffe15 	stw	r5,-8(fp)
   5111c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   51120:	01c07fc4 	movi	r7,511
   51124:	01800044 	movi	r6,1
   51128:	e17ffd17 	ldw	r5,-12(fp)
   5112c:	01000174 	movhi	r4,5
   51130:	21094b04 	addi	r4,r4,9516
   51134:	00510200 	call	51020 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   51138:	01c07fc4 	movi	r7,511
   5113c:	000d883a 	mov	r6,zero
   51140:	e17ffe17 	ldw	r5,-8(fp)
   51144:	01000174 	movhi	r4,5
   51148:	21094804 	addi	r4,r4,9504
   5114c:	00510200 	call	51020 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   51150:	01c07fc4 	movi	r7,511
   51154:	01800044 	movi	r6,1
   51158:	e17fff17 	ldw	r5,-4(fp)
   5115c:	01000174 	movhi	r4,5
   51160:	21094e04 	addi	r4,r4,9528
   51164:	00510200 	call	51020 <alt_open_fd>
}  
   51168:	0001883a 	nop
   5116c:	e037883a 	mov	sp,fp
   51170:	dfc00117 	ldw	ra,4(sp)
   51174:	df000017 	ldw	fp,0(sp)
   51178:	dec00204 	addi	sp,sp,8
   5117c:	f800283a 	ret

00051180 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   51180:	defffa04 	addi	sp,sp,-24
   51184:	df000515 	stw	fp,20(sp)
   51188:	df000504 	addi	fp,sp,20
   5118c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51190:	0005303a 	rdctl	r2,status
   51194:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51198:	e0fffc17 	ldw	r3,-16(fp)
   5119c:	00bfff84 	movi	r2,-2
   511a0:	1884703a 	and	r2,r3,r2
   511a4:	1001703a 	wrctl	status,r2
  
  return context;
   511a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   511ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   511b0:	e0bfff17 	ldw	r2,-4(fp)
   511b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   511b8:	e0bffd17 	ldw	r2,-12(fp)
   511bc:	10800017 	ldw	r2,0(r2)
   511c0:	e0fffd17 	ldw	r3,-12(fp)
   511c4:	18c00117 	ldw	r3,4(r3)
   511c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   511cc:	e0bffd17 	ldw	r2,-12(fp)
   511d0:	10800117 	ldw	r2,4(r2)
   511d4:	e0fffd17 	ldw	r3,-12(fp)
   511d8:	18c00017 	ldw	r3,0(r3)
   511dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   511e0:	e0bffd17 	ldw	r2,-12(fp)
   511e4:	e0fffd17 	ldw	r3,-12(fp)
   511e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   511ec:	e0bffd17 	ldw	r2,-12(fp)
   511f0:	e0fffd17 	ldw	r3,-12(fp)
   511f4:	10c00015 	stw	r3,0(r2)
   511f8:	e0bffb17 	ldw	r2,-20(fp)
   511fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51200:	e0bffe17 	ldw	r2,-8(fp)
   51204:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   51208:	0001883a 	nop
   5120c:	e037883a 	mov	sp,fp
   51210:	df000017 	ldw	fp,0(sp)
   51214:	dec00104 	addi	sp,sp,4
   51218:	f800283a 	ret

0005121c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   5121c:	defffb04 	addi	sp,sp,-20
   51220:	dfc00415 	stw	ra,16(sp)
   51224:	df000315 	stw	fp,12(sp)
   51228:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   5122c:	d0a02017 	ldw	r2,-32640(gp)
   51230:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   51234:	d0a72c17 	ldw	r2,-25424(gp)
   51238:	10800044 	addi	r2,r2,1
   5123c:	d0a72c15 	stw	r2,-25424(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51240:	00002e06 	br	512fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   51244:	e0bffd17 	ldw	r2,-12(fp)
   51248:	10800017 	ldw	r2,0(r2)
   5124c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   51250:	e0bffd17 	ldw	r2,-12(fp)
   51254:	10800403 	ldbu	r2,16(r2)
   51258:	10803fcc 	andi	r2,r2,255
   5125c:	10000426 	beq	r2,zero,51270 <alt_tick+0x54>
   51260:	d0a72c17 	ldw	r2,-25424(gp)
   51264:	1000021e 	bne	r2,zero,51270 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   51268:	e0bffd17 	ldw	r2,-12(fp)
   5126c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   51270:	e0bffd17 	ldw	r2,-12(fp)
   51274:	10800217 	ldw	r2,8(r2)
   51278:	d0e72c17 	ldw	r3,-25424(gp)
   5127c:	18801d36 	bltu	r3,r2,512f4 <alt_tick+0xd8>
   51280:	e0bffd17 	ldw	r2,-12(fp)
   51284:	10800403 	ldbu	r2,16(r2)
   51288:	10803fcc 	andi	r2,r2,255
   5128c:	1000191e 	bne	r2,zero,512f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   51290:	e0bffd17 	ldw	r2,-12(fp)
   51294:	10800317 	ldw	r2,12(r2)
   51298:	e0fffd17 	ldw	r3,-12(fp)
   5129c:	18c00517 	ldw	r3,20(r3)
   512a0:	1809883a 	mov	r4,r3
   512a4:	103ee83a 	callr	r2
   512a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   512ac:	e0bfff17 	ldw	r2,-4(fp)
   512b0:	1000031e 	bne	r2,zero,512c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   512b4:	e13ffd17 	ldw	r4,-12(fp)
   512b8:	00511800 	call	51180 <alt_alarm_stop>
   512bc:	00000d06 	br	512f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   512c0:	e0bffd17 	ldw	r2,-12(fp)
   512c4:	10c00217 	ldw	r3,8(r2)
   512c8:	e0bfff17 	ldw	r2,-4(fp)
   512cc:	1887883a 	add	r3,r3,r2
   512d0:	e0bffd17 	ldw	r2,-12(fp)
   512d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   512d8:	e0bffd17 	ldw	r2,-12(fp)
   512dc:	10c00217 	ldw	r3,8(r2)
   512e0:	d0a72c17 	ldw	r2,-25424(gp)
   512e4:	1880032e 	bgeu	r3,r2,512f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   512e8:	e0bffd17 	ldw	r2,-12(fp)
   512ec:	00c00044 	movi	r3,1
   512f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   512f4:	e0bffe17 	ldw	r2,-8(fp)
   512f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   512fc:	e0fffd17 	ldw	r3,-12(fp)
   51300:	d0a02004 	addi	r2,gp,-32640
   51304:	18bfcf1e 	bne	r3,r2,51244 <_gp+0xffff5b1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   51308:	0001883a 	nop
}
   5130c:	0001883a 	nop
   51310:	e037883a 	mov	sp,fp
   51314:	dfc00117 	ldw	ra,4(sp)
   51318:	df000017 	ldw	fp,0(sp)
   5131c:	dec00204 	addi	sp,sp,8
   51320:	f800283a 	ret

00051324 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   51324:	deffff04 	addi	sp,sp,-4
   51328:	df000015 	stw	fp,0(sp)
   5132c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   51330:	000170fa 	wrctl	ienable,zero
}
   51334:	0001883a 	nop
   51338:	e037883a 	mov	sp,fp
   5133c:	df000017 	ldw	fp,0(sp)
   51340:	dec00104 	addi	sp,sp,4
   51344:	f800283a 	ret

00051348 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   51348:	defffe04 	addi	sp,sp,-8
   5134c:	df000115 	stw	fp,4(sp)
   51350:	df000104 	addi	fp,sp,4
   51354:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   51358:	e0bfff17 	ldw	r2,-4(fp)
   5135c:	10bffe84 	addi	r2,r2,-6
   51360:	10c00428 	cmpgeui	r3,r2,16
   51364:	18001a1e 	bne	r3,zero,513d0 <alt_exception_cause_generated_bad_addr+0x88>
   51368:	100690ba 	slli	r3,r2,2
   5136c:	00800174 	movhi	r2,5
   51370:	1084e004 	addi	r2,r2,4992
   51374:	1885883a 	add	r2,r3,r2
   51378:	10800017 	ldw	r2,0(r2)
   5137c:	1000683a 	jmp	r2
   51380:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   51384:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   51388:	000513d0 	cmplti	zero,zero,5199
   5138c:	000513d0 	cmplti	zero,zero,5199
   51390:	000513d0 	cmplti	zero,zero,5199
   51394:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   51398:	000513c8 	cmpgei	zero,zero,5199
   5139c:	000513d0 	cmplti	zero,zero,5199
   513a0:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   513a4:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   513a8:	000513d0 	cmplti	zero,zero,5199
   513ac:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
   513b0:	000513c8 	cmpgei	zero,zero,5199
   513b4:	000513d0 	cmplti	zero,zero,5199
   513b8:	000513d0 	cmplti	zero,zero,5199
   513bc:	000513c0 	call	513c <__alt_mem_mem_info-0xaec4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   513c0:	00800044 	movi	r2,1
   513c4:	00000306 	br	513d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   513c8:	0005883a 	mov	r2,zero
   513cc:	00000106 	br	513d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   513d0:	0005883a 	mov	r2,zero
  }
}
   513d4:	e037883a 	mov	sp,fp
   513d8:	df000017 	ldw	fp,0(sp)
   513dc:	dec00104 	addi	sp,sp,4
   513e0:	f800283a 	ret

000513e4 <atexit>:
   513e4:	200b883a 	mov	r5,r4
   513e8:	000f883a 	mov	r7,zero
   513ec:	000d883a 	mov	r6,zero
   513f0:	0009883a 	mov	r4,zero
   513f4:	00514ac1 	jmpi	514ac <__register_exitproc>

000513f8 <exit>:
   513f8:	defffe04 	addi	sp,sp,-8
   513fc:	000b883a 	mov	r5,zero
   51400:	dc000015 	stw	r16,0(sp)
   51404:	dfc00115 	stw	ra,4(sp)
   51408:	2021883a 	mov	r16,r4
   5140c:	00515c40 	call	515c4 <__call_exitprocs>
   51410:	00800174 	movhi	r2,5
   51414:	108dca04 	addi	r2,r2,14120
   51418:	11000017 	ldw	r4,0(r2)
   5141c:	20800f17 	ldw	r2,60(r4)
   51420:	10000126 	beq	r2,zero,51428 <exit+0x30>
   51424:	103ee83a 	callr	r2
   51428:	8009883a 	mov	r4,r16
   5142c:	00517440 	call	51744 <_exit>

00051430 <memcmp>:
   51430:	01c000c4 	movi	r7,3
   51434:	3980192e 	bgeu	r7,r6,5149c <memcmp+0x6c>
   51438:	2144b03a 	or	r2,r4,r5
   5143c:	11c4703a 	and	r2,r2,r7
   51440:	10000f26 	beq	r2,zero,51480 <memcmp+0x50>
   51444:	20800003 	ldbu	r2,0(r4)
   51448:	28c00003 	ldbu	r3,0(r5)
   5144c:	10c0151e 	bne	r2,r3,514a4 <memcmp+0x74>
   51450:	31bfff84 	addi	r6,r6,-2
   51454:	01ffffc4 	movi	r7,-1
   51458:	00000406 	br	5146c <memcmp+0x3c>
   5145c:	20800003 	ldbu	r2,0(r4)
   51460:	28c00003 	ldbu	r3,0(r5)
   51464:	31bfffc4 	addi	r6,r6,-1
   51468:	10c00e1e 	bne	r2,r3,514a4 <memcmp+0x74>
   5146c:	21000044 	addi	r4,r4,1
   51470:	29400044 	addi	r5,r5,1
   51474:	31fff91e 	bne	r6,r7,5145c <_gp+0xffff5d34>
   51478:	0005883a 	mov	r2,zero
   5147c:	f800283a 	ret
   51480:	20c00017 	ldw	r3,0(r4)
   51484:	28800017 	ldw	r2,0(r5)
   51488:	18bfee1e 	bne	r3,r2,51444 <_gp+0xffff5d1c>
   5148c:	31bfff04 	addi	r6,r6,-4
   51490:	21000104 	addi	r4,r4,4
   51494:	29400104 	addi	r5,r5,4
   51498:	39bff936 	bltu	r7,r6,51480 <_gp+0xffff5d58>
   5149c:	303fe91e 	bne	r6,zero,51444 <_gp+0xffff5d1c>
   514a0:	003ff506 	br	51478 <_gp+0xffff5d50>
   514a4:	10c5c83a 	sub	r2,r2,r3
   514a8:	f800283a 	ret

000514ac <__register_exitproc>:
   514ac:	defffa04 	addi	sp,sp,-24
   514b0:	dc000315 	stw	r16,12(sp)
   514b4:	04000174 	movhi	r16,5
   514b8:	840dca04 	addi	r16,r16,14120
   514bc:	80c00017 	ldw	r3,0(r16)
   514c0:	dc400415 	stw	r17,16(sp)
   514c4:	dfc00515 	stw	ra,20(sp)
   514c8:	18805217 	ldw	r2,328(r3)
   514cc:	2023883a 	mov	r17,r4
   514d0:	10003726 	beq	r2,zero,515b0 <__register_exitproc+0x104>
   514d4:	10c00117 	ldw	r3,4(r2)
   514d8:	010007c4 	movi	r4,31
   514dc:	20c00e16 	blt	r4,r3,51518 <__register_exitproc+0x6c>
   514e0:	1a000044 	addi	r8,r3,1
   514e4:	8800221e 	bne	r17,zero,51570 <__register_exitproc+0xc4>
   514e8:	18c00084 	addi	r3,r3,2
   514ec:	18c7883a 	add	r3,r3,r3
   514f0:	18c7883a 	add	r3,r3,r3
   514f4:	12000115 	stw	r8,4(r2)
   514f8:	10c7883a 	add	r3,r2,r3
   514fc:	19400015 	stw	r5,0(r3)
   51500:	0005883a 	mov	r2,zero
   51504:	dfc00517 	ldw	ra,20(sp)
   51508:	dc400417 	ldw	r17,16(sp)
   5150c:	dc000317 	ldw	r16,12(sp)
   51510:	dec00604 	addi	sp,sp,24
   51514:	f800283a 	ret
   51518:	00800034 	movhi	r2,0
   5151c:	10800004 	addi	r2,r2,0
   51520:	10002626 	beq	r2,zero,515bc <__register_exitproc+0x110>
   51524:	01006404 	movi	r4,400
   51528:	d9400015 	stw	r5,0(sp)
   5152c:	d9800115 	stw	r6,4(sp)
   51530:	d9c00215 	stw	r7,8(sp)
   51534:	00000000 	call	0 <__alt_mem_mem_info-0x10000>
   51538:	d9400017 	ldw	r5,0(sp)
   5153c:	d9800117 	ldw	r6,4(sp)
   51540:	d9c00217 	ldw	r7,8(sp)
   51544:	10001d26 	beq	r2,zero,515bc <__register_exitproc+0x110>
   51548:	81000017 	ldw	r4,0(r16)
   5154c:	10000115 	stw	zero,4(r2)
   51550:	02000044 	movi	r8,1
   51554:	22405217 	ldw	r9,328(r4)
   51558:	0007883a 	mov	r3,zero
   5155c:	12400015 	stw	r9,0(r2)
   51560:	20805215 	stw	r2,328(r4)
   51564:	10006215 	stw	zero,392(r2)
   51568:	10006315 	stw	zero,396(r2)
   5156c:	883fde26 	beq	r17,zero,514e8 <_gp+0xffff5dc0>
   51570:	18c9883a 	add	r4,r3,r3
   51574:	2109883a 	add	r4,r4,r4
   51578:	1109883a 	add	r4,r2,r4
   5157c:	21802215 	stw	r6,136(r4)
   51580:	01800044 	movi	r6,1
   51584:	12406217 	ldw	r9,392(r2)
   51588:	30cc983a 	sll	r6,r6,r3
   5158c:	4992b03a 	or	r9,r9,r6
   51590:	12406215 	stw	r9,392(r2)
   51594:	21c04215 	stw	r7,264(r4)
   51598:	01000084 	movi	r4,2
   5159c:	893fd21e 	bne	r17,r4,514e8 <_gp+0xffff5dc0>
   515a0:	11006317 	ldw	r4,396(r2)
   515a4:	218cb03a 	or	r6,r4,r6
   515a8:	11806315 	stw	r6,396(r2)
   515ac:	003fce06 	br	514e8 <_gp+0xffff5dc0>
   515b0:	18805304 	addi	r2,r3,332
   515b4:	18805215 	stw	r2,328(r3)
   515b8:	003fc606 	br	514d4 <_gp+0xffff5dac>
   515bc:	00bfffc4 	movi	r2,-1
   515c0:	003fd006 	br	51504 <_gp+0xffff5ddc>

000515c4 <__call_exitprocs>:
   515c4:	defff504 	addi	sp,sp,-44
   515c8:	df000915 	stw	fp,36(sp)
   515cc:	dd400615 	stw	r21,24(sp)
   515d0:	dc800315 	stw	r18,12(sp)
   515d4:	dfc00a15 	stw	ra,40(sp)
   515d8:	ddc00815 	stw	r23,32(sp)
   515dc:	dd800715 	stw	r22,28(sp)
   515e0:	dd000515 	stw	r20,20(sp)
   515e4:	dcc00415 	stw	r19,16(sp)
   515e8:	dc400215 	stw	r17,8(sp)
   515ec:	dc000115 	stw	r16,4(sp)
   515f0:	d9000015 	stw	r4,0(sp)
   515f4:	2839883a 	mov	fp,r5
   515f8:	04800044 	movi	r18,1
   515fc:	057fffc4 	movi	r21,-1
   51600:	00800174 	movhi	r2,5
   51604:	108dca04 	addi	r2,r2,14120
   51608:	12000017 	ldw	r8,0(r2)
   5160c:	45005217 	ldw	r20,328(r8)
   51610:	44c05204 	addi	r19,r8,328
   51614:	a0001c26 	beq	r20,zero,51688 <__call_exitprocs+0xc4>
   51618:	a0800117 	ldw	r2,4(r20)
   5161c:	15ffffc4 	addi	r23,r2,-1
   51620:	b8000d16 	blt	r23,zero,51658 <__call_exitprocs+0x94>
   51624:	14000044 	addi	r16,r2,1
   51628:	8421883a 	add	r16,r16,r16
   5162c:	8421883a 	add	r16,r16,r16
   51630:	84402004 	addi	r17,r16,128
   51634:	a463883a 	add	r17,r20,r17
   51638:	a421883a 	add	r16,r20,r16
   5163c:	e0001e26 	beq	fp,zero,516b8 <__call_exitprocs+0xf4>
   51640:	80804017 	ldw	r2,256(r16)
   51644:	e0801c26 	beq	fp,r2,516b8 <__call_exitprocs+0xf4>
   51648:	bdffffc4 	addi	r23,r23,-1
   5164c:	843fff04 	addi	r16,r16,-4
   51650:	8c7fff04 	addi	r17,r17,-4
   51654:	bd7ff91e 	bne	r23,r21,5163c <_gp+0xffff5f14>
   51658:	00800034 	movhi	r2,0
   5165c:	10800004 	addi	r2,r2,0
   51660:	10000926 	beq	r2,zero,51688 <__call_exitprocs+0xc4>
   51664:	a0800117 	ldw	r2,4(r20)
   51668:	1000301e 	bne	r2,zero,5172c <__call_exitprocs+0x168>
   5166c:	a0800017 	ldw	r2,0(r20)
   51670:	10003226 	beq	r2,zero,5173c <__call_exitprocs+0x178>
   51674:	a009883a 	mov	r4,r20
   51678:	98800015 	stw	r2,0(r19)
   5167c:	00000000 	call	0 <__alt_mem_mem_info-0x10000>
   51680:	9d000017 	ldw	r20,0(r19)
   51684:	a03fe41e 	bne	r20,zero,51618 <_gp+0xffff5ef0>
   51688:	dfc00a17 	ldw	ra,40(sp)
   5168c:	df000917 	ldw	fp,36(sp)
   51690:	ddc00817 	ldw	r23,32(sp)
   51694:	dd800717 	ldw	r22,28(sp)
   51698:	dd400617 	ldw	r21,24(sp)
   5169c:	dd000517 	ldw	r20,20(sp)
   516a0:	dcc00417 	ldw	r19,16(sp)
   516a4:	dc800317 	ldw	r18,12(sp)
   516a8:	dc400217 	ldw	r17,8(sp)
   516ac:	dc000117 	ldw	r16,4(sp)
   516b0:	dec00b04 	addi	sp,sp,44
   516b4:	f800283a 	ret
   516b8:	a0800117 	ldw	r2,4(r20)
   516bc:	80c00017 	ldw	r3,0(r16)
   516c0:	10bfffc4 	addi	r2,r2,-1
   516c4:	15c01426 	beq	r2,r23,51718 <__call_exitprocs+0x154>
   516c8:	80000015 	stw	zero,0(r16)
   516cc:	183fde26 	beq	r3,zero,51648 <_gp+0xffff5f20>
   516d0:	95c8983a 	sll	r4,r18,r23
   516d4:	a0806217 	ldw	r2,392(r20)
   516d8:	a5800117 	ldw	r22,4(r20)
   516dc:	2084703a 	and	r2,r4,r2
   516e0:	10000b26 	beq	r2,zero,51710 <__call_exitprocs+0x14c>
   516e4:	a0806317 	ldw	r2,396(r20)
   516e8:	2088703a 	and	r4,r4,r2
   516ec:	20000c1e 	bne	r4,zero,51720 <__call_exitprocs+0x15c>
   516f0:	89400017 	ldw	r5,0(r17)
   516f4:	d9000017 	ldw	r4,0(sp)
   516f8:	183ee83a 	callr	r3
   516fc:	a0800117 	ldw	r2,4(r20)
   51700:	15bfbf1e 	bne	r2,r22,51600 <_gp+0xffff5ed8>
   51704:	98800017 	ldw	r2,0(r19)
   51708:	153fcf26 	beq	r2,r20,51648 <_gp+0xffff5f20>
   5170c:	003fbc06 	br	51600 <_gp+0xffff5ed8>
   51710:	183ee83a 	callr	r3
   51714:	003ff906 	br	516fc <_gp+0xffff5fd4>
   51718:	a5c00115 	stw	r23,4(r20)
   5171c:	003feb06 	br	516cc <_gp+0xffff5fa4>
   51720:	89000017 	ldw	r4,0(r17)
   51724:	183ee83a 	callr	r3
   51728:	003ff406 	br	516fc <_gp+0xffff5fd4>
   5172c:	a0800017 	ldw	r2,0(r20)
   51730:	a027883a 	mov	r19,r20
   51734:	1029883a 	mov	r20,r2
   51738:	003fb606 	br	51614 <_gp+0xffff5eec>
   5173c:	0005883a 	mov	r2,zero
   51740:	003ffb06 	br	51730 <_gp+0xffff6008>

00051744 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   51744:	defffd04 	addi	sp,sp,-12
   51748:	df000215 	stw	fp,8(sp)
   5174c:	df000204 	addi	fp,sp,8
   51750:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   51754:	0001883a 	nop
   51758:	e0bfff17 	ldw	r2,-4(fp)
   5175c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   51760:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   51764:	10000226 	beq	r2,zero,51770 <_exit+0x2c>
    ALT_SIM_FAIL();
   51768:	002af070 	cmpltui	zero,zero,43969
   5176c:	00000106 	br	51774 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   51770:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   51774:	003fff06 	br	51774 <_gp+0xffff604c>

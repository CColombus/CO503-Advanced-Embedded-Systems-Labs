
1e_r.elf:     file format elf32-littlenios2
1e_r.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00002dc4 memsz 0x00002dc4 flags r-x
    LOAD off    0x00003de4 vaddr 0x00082de4 paddr 0x00083950 align 2**12
         filesz 0x00000b6c memsz 0x00000b6c flags rw-
    LOAD off    0x000054bc vaddr 0x000844bc paddr 0x000844bc align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002b80  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00082db0  00082db0  00003db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b6c  00082de4  00083950  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  000844bc  000844bc  000054bc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  000845e8  000845e8  00004950  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b8  00000000  00000000  00004978  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000606f  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002445  00000000  00000000  0000af9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000027c8  00000000  00000000  0000d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d6c  00000000  00000000  0000fbac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e36  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004a6  00000000  00000000  0001274e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00012bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000130  00000000  00000000  00012c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00014d2a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00014d2d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00014d33  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00014d34  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00014d35  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00014d39  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00014d3d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  00014d41  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  00014d4d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  00014d59  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00014d65  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00014d6d  2**0
                  CONTENTS, READONLY
 29 .jdi          0001a8cc  00000000  00000000  00014d8c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001b57e3  00000000  00000000  0002f658  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00082db0 l    d  .rodata	00000000 .rodata
00082de4 l    d  .rwdata	00000000 .rwdata
000844bc l    d  .bss	00000000 .bss
000845e8 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1e_r_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000810c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008122c l     F .text	00000034 alt_dev_reg
00083670 l     O .rwdata	0000002c jtag_uart_1e
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00081a38 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00081b2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081c60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00081c8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000820ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008224c l     F .text	0000003c alt_get_errno
00082288 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00083844 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
000844e0 g     O .bss	00000004 alt_instruction_exception_handler
000811b0 g     F .text	0000007c alt_main
000844e8 g     O .bss	00000100 alt_irq
00083604 g     O .rwdata	0000000c q1c
0008157c g     F .text	0000005c altera_avalon_fifo_write_almostfull
00083950 g       *ABS*	00000000 __flash_rwdata_start
00082de4 g     O .rwdata	00000018 luminance_dc_code_table
00083658 g     O .rwdata	0000000c q5
000812f4 g     F .text	00000098 altera_avalon_fifo_init
00081634 g     F .text	00000058 altera_avalon_fifo_write_fifo
000826f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
000817d0 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00080020 g       *ABS*	00000000 __flash_exceptions_start
000844e4 g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000844cc g     O .bss	00000004 alt_argv
0008b924 g       *ABS*	00000000 _gp
000814c0 g     F .text	00000060 altera_avalon_fifo_clear_event
000836c4 g     O .rwdata	00000180 alt_fd_list
0008271c g     F .text	00000090 alt_find_dev
000821d0 g     F .text	0000007c alt_io_redirect
00082db0 g       *ABS*	00000000 __DTOR_END__
00082978 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00083634 g     O .rwdata	0000000c q2
000830cc g     O .rwdata	00000144 chrominance_ac_code_table
000818b8 g     F .text	000000ec altera_avalon_jtag_uart_read
00083934 g     O .rwdata	00000004 alt_max_fd
00083948 g     O .rwdata	00000004 _global_impure_ptr
000845e8 g       *ABS*	00000000 __bss_end
00081ffc g     F .text	000000f0 alt_iic_isr_register
000825f0 g     F .text	00000108 alt_tick
00081fb0 g     F .text	0000004c alt_ic_irq_enabled
00082554 g     F .text	0000009c alt_alarm_stop
000844d4 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
0008369c g     O .rwdata	00000028 alt_dev_null
00081c40 g     F .text	00000020 alt_dcache_flush_all
00081520 g     F .text	0000005c altera_avalon_fifo_write_ienable
00083950 g       *ABS*	00000000 __ram_rwdata_end
00081430 g     F .text	0000002c altera_avalon_fifo_read_almostempty
0008392c g     O .rwdata	00000008 alt_dev_list
0008026c g     F .text	000002d0 write_markers
00082de4 g       *ABS*	00000000 __ram_rodata_end
00080f38 g     F .text	00000044 RECV2
000845e8 g       *ABS*	00000000 end
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00080f7c g     F .text	00000048 SEND1
0008145c g     F .text	0000003c altera_avalon_fifo_read_event
00082db0 g       *ABS*	00000000 __CTOR_LIST__
00085000 g       *ABS*	00000000 __alt_stack_pointer
00081ab0 g     F .text	0000007c alt_avalon_timer_sc_init
00082e14 g     O .rwdata	00000018 chrominance_dc_code_table
000819a4 g     F .text	00000094 altera_avalon_jtag_uart_write
000816f8 g     F .text	0000004c altera_avalon_fifo_read_fifo
00082bec g     F .text	00000190 __call_exitprocs
00080230 g     F .text	0000003c _start
000844d8 g     O .bss	00000004 _alt_tick_rate
00080fc4 g     F .text	00000070 enqueueINT32
000844dc g     O .bss	00000004 _alt_nticks
00081298 g     F .text	0000005c alt_sys_init
00082a94 g     F .text	00000158 __register_exitproc
00083610 g     O .rwdata	0000000c q1d
00083640 g     O .rwdata	0000000c q3
0008109c g     F .text	00000028 .hidden __mulsi3
00082de4 g       *ABS*	00000000 __ram_rwdata_start
00082db0 g       *ABS*	00000000 __ram_rodata_start
000844c4 g     O .bss	00000002 ldc2
00083210 g     O .rwdata	00000144 chrominance_ac_size_table
00083628 g     O .rwdata	0000000c q1
000817f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000828b4 g     F .text	000000c4 alt_get_fd
00082a48 g     F .text	00000030 memcmp
000845e8 g       *ABS*	00000000 __alt_stack_base
0008138c g     F .text	0000003c altera_avalon_fifo_read_status
000817a4 g     F .text	0000002c altera_avalon_fifo_read_other_info
000827ac g     F .text	00000108 alt_find_file
00081cc8 g     F .text	000000a4 alt_dev_llist_insert
000844bc g       *ABS*	00000000 __bss_start
000844c2 g     O .bss	00000002 ldc1
00080e5c g     F .text	00000098 main
000844d0 g     O .bss	00000004 alt_envp
00081858 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00081498 g     F .text	00000028 altera_avalon_fifo_read_level
00080d8c g     F .text	000000d0 close_bitstream
00080ef4 g     F .text	00000044 RECV1
00083938 g     O .rwdata	00000004 alt_errno
000835f8 g     O .rwdata	0000000c q1b
00082db0 g       *ABS*	00000000 __CTOR_END__
0008053c g     F .text	00000850 huffman
00082db0 g       *ABS*	00000000 __flash_rodata_start
00082db0 g       *ABS*	00000000 __DTOR_LIST__
00081260 g     F .text	00000038 alt_irq_init
000824d0 g     F .text	00000084 alt_release_fd
00082a14 g     F .text	00000014 atexit
00083664 g     O .rwdata	0000000c q6
00083354 g     O .rwdata	00000100 bitsize
0008394c g     O .rwdata	00000004 _impure_ptr
000844c8 g     O .bss	00000004 alt_argc
00081dcc g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
0008361c g     O .rwdata	0000000c q1e
00083924 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000844bc g     O .bss	00000004 lcode
00081744 g     F .text	00000060 altera_avalon_fifo_write_other_info
00081e4c g     F .text	00000050 alt_ic_isr_register
00083950 g       *ABS*	00000000 _edata
000845e8 g       *ABS*	00000000 _end
00080230 g       *ABS*	00000000 __ram_exceptions_end
00081f24 g     F .text	0000008c alt_ic_irq_disable
00082f88 g     O .rwdata	00000144 luminance_ac_size_table
00082a28 g     F .text	00000020 exit
00083454 g     O .rwdata	000001a4 markerdata
000813c8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00085000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000844c6 g     O .bss	00000002 ldc3
00082d7c g     F .text	00000034 _exit
00082e2c g     O .rwdata	00000018 chrominance_dc_size_table
00081404 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0008364c g     O .rwdata	0000000c q4
00082a78 g     F .text	0000001c strlen
00082374 g     F .text	0000015c open
0008168c g     F .text	0000006c altera_avalon_read_fifo
00081034 g     F .text	00000068 dequeueINT32
000844c0 g     O .bss	00000002 bitindex
00081e2c g     F .text	00000020 alt_icache_flush_all
00082e44 g     O .rwdata	00000144 luminance_ac_code_table
0008393c g     O .rwdata	00000004 alt_priority_mask
00081e9c g     F .text	00000088 alt_ic_irq_enable
000815d8 g     F .text	0000005c altera_avalon_fifo_write_almostempty
00083940 g     O .rwdata	00000008 alt_alarm_list
00081d6c g     F .text	00000060 _do_ctors
00082dfc g     O .rwdata	00000018 luminance_dc_size_table
00081b68 g     F .text	000000d8 close
0008112c g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800234 	movhi	r2,8
   80140:	10913a04 	addi	r2,r2,17640
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800234 	movhi	r2,8
   80158:	10913a04 	addi	r2,r2,17640
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <_gp+0xffff4808>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <_gp+0xffff47fc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a2ef17 	ldw	r2,-29764(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a2ef17 	ldw	r2,-29764(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	ded40014 	ori	sp,sp,20480
    movhi gp, %hi(_gp)
   80238:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8023c:	d6ae4914 	ori	gp,gp,47396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80244:	10912f14 	ori	r2,r2,17596

    movhi r3, %hi(__bss_end)
   80248:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8024c:	18d17a14 	ori	r3,r3,17896

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <_gp+0xffff4930>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	008112c0 	call	8112c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	00811b00 	call	811b0 <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <_gp+0xffff4944>

0008026c <write_markers>:
	}

// Header for JPEG Encoder

void write_markers(UINT32 image_width, UINT32 image_height)
{
   8026c:	defffa04 	addi	sp,sp,-24
   80270:	dfc00515 	stw	ra,20(sp)
   80274:	df000415 	stw	fp,16(sp)
   80278:	df000404 	addi	fp,sp,16
   8027c:	e13ffe15 	stw	r4,-8(fp)
   80280:	e17fff15 	stw	r5,-4(fp)
	UINT16 i, header_length;
	UINT8 number_of_components;

	// Start of image marker
	SEND1(0xFF);
   80284:	01003fc4 	movi	r4,255
   80288:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0xD8);
   8028c:	01003604 	movi	r4,216
   80290:	0080f7c0 	call	80f7c <SEND1>

	// Quantization table marker
	SEND1(0xFF);
   80294:	01003fc4 	movi	r4,255
   80298:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0xDB);
   8029c:	010036c4 	movi	r4,219
   802a0:	0080f7c0 	call	80f7c <SEND1>

	// Quantization table length
	SEND1(0x00);
   802a4:	0009883a 	mov	r4,zero
   802a8:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x84);
   802ac:	01002104 	movi	r4,132
   802b0:	0080f7c0 	call	80f7c <SEND1>

	// Pq, Tq
	SEND1(0x00);
   802b4:	0009883a 	mov	r4,zero
   802b8:	0080f7c0 	call	80f7c <SEND1>

	// Lqt table
	for (i = 0; i < 64; i++)
   802bc:	e03ffc0d 	sth	zero,-16(fp)
   802c0:	00000706 	br	802e0 <write_markers+0x74>
		SEND1((UINT8)RECV2()); // Lqt [i];
   802c4:	0080f380 	call	80f38 <RECV2>
   802c8:	10803fcc 	andi	r2,r2,255
   802cc:	1009883a 	mov	r4,r2
   802d0:	0080f7c0 	call	80f7c <SEND1>

	// Pq, Tq
	SEND1(0x00);

	// Lqt table
	for (i = 0; i < 64; i++)
   802d4:	e0bffc0b 	ldhu	r2,-16(fp)
   802d8:	10800044 	addi	r2,r2,1
   802dc:	e0bffc0d 	sth	r2,-16(fp)
   802e0:	e0bffc0b 	ldhu	r2,-16(fp)
   802e4:	10801030 	cmpltui	r2,r2,64
   802e8:	103ff61e 	bne	r2,zero,802c4 <_gp+0xffff49a0>
		SEND1((UINT8)RECV2()); // Lqt [i];

	// Pq, Tq
	SEND1(0x01);
   802ec:	01000044 	movi	r4,1
   802f0:	0080f7c0 	call	80f7c <SEND1>

	// Cqt table
	for (i = 0; i < 64; i++)
   802f4:	e03ffc0d 	sth	zero,-16(fp)
   802f8:	00000706 	br	80318 <write_markers+0xac>
		SEND1((UINT8)RECV2()); // Cqt [i];
   802fc:	0080f380 	call	80f38 <RECV2>
   80300:	10803fcc 	andi	r2,r2,255
   80304:	1009883a 	mov	r4,r2
   80308:	0080f7c0 	call	80f7c <SEND1>

	// Pq, Tq
	SEND1(0x01);

	// Cqt table
	for (i = 0; i < 64; i++)
   8030c:	e0bffc0b 	ldhu	r2,-16(fp)
   80310:	10800044 	addi	r2,r2,1
   80314:	e0bffc0d 	sth	r2,-16(fp)
   80318:	e0bffc0b 	ldhu	r2,-16(fp)
   8031c:	10801030 	cmpltui	r2,r2,64
   80320:	103ff61e 	bne	r2,zero,802fc <_gp+0xffff49d8>
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   80324:	e03ffc0d 	sth	zero,-16(fp)
   80328:	00001706 	br	80388 <write_markers+0x11c>
	{
		SEND1((UINT8)(markerdata[i] >> 8));
   8032c:	e0fffc0b 	ldhu	r3,-16(fp)
   80330:	00800234 	movhi	r2,8
   80334:	108d1504 	addi	r2,r2,13396
   80338:	18c7883a 	add	r3,r3,r3
   8033c:	10c5883a 	add	r2,r2,r3
   80340:	1080000b 	ldhu	r2,0(r2)
   80344:	10bfffcc 	andi	r2,r2,65535
   80348:	1004d23a 	srli	r2,r2,8
   8034c:	10803fcc 	andi	r2,r2,255
   80350:	1009883a 	mov	r4,r2
   80354:	0080f7c0 	call	80f7c <SEND1>
		SEND1((UINT8)markerdata[i]);
   80358:	e0fffc0b 	ldhu	r3,-16(fp)
   8035c:	00800234 	movhi	r2,8
   80360:	108d1504 	addi	r2,r2,13396
   80364:	18c7883a 	add	r3,r3,r3
   80368:	10c5883a 	add	r2,r2,r3
   8036c:	1080000b 	ldhu	r2,0(r2)
   80370:	10803fcc 	andi	r2,r2,255
   80374:	1009883a 	mov	r4,r2
   80378:	0080f7c0 	call	80f7c <SEND1>
	// Cqt table
	for (i = 0; i < 64; i++)
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   8037c:	e0bffc0b 	ldhu	r2,-16(fp)
   80380:	10800044 	addi	r2,r2,1
   80384:	e0bffc0d 	sth	r2,-16(fp)
   80388:	e0bffc0b 	ldhu	r2,-16(fp)
   8038c:	108034b0 	cmpltui	r2,r2,210
   80390:	103fe61e 	bne	r2,zero,8032c <_gp+0xffff4a08>
	}

	// if (image_format == FOUR_ZERO_ZERO)
	//	number_of_components = 1;
	// else
	number_of_components = 3;
   80394:	008000c4 	movi	r2,3
   80398:	e0bffc85 	stb	r2,-14(fp)

	// Frame header(SOF)

	// Start of frame marker
	SEND1(0xFF);
   8039c:	01003fc4 	movi	r4,255
   803a0:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0xC0);
   803a4:	01003004 	movi	r4,192
   803a8:	0080f7c0 	call	80f7c <SEND1>

	header_length = (UINT16)(8 + 3 * number_of_components);
   803ac:	e0fffc83 	ldbu	r3,-14(fp)
   803b0:	1805883a 	mov	r2,r3
   803b4:	1085883a 	add	r2,r2,r2
   803b8:	10c5883a 	add	r2,r2,r3
   803bc:	10800204 	addi	r2,r2,8
   803c0:	e0bffd0d 	sth	r2,-12(fp)

	// Frame header length
	SEND1((UINT8)(header_length >> 8));
   803c4:	e0bffd0b 	ldhu	r2,-12(fp)
   803c8:	1004d23a 	srli	r2,r2,8
   803cc:	10803fcc 	andi	r2,r2,255
   803d0:	1009883a 	mov	r4,r2
   803d4:	0080f7c0 	call	80f7c <SEND1>
	SEND1((UINT8)header_length);
   803d8:	e0bffd0b 	ldhu	r2,-12(fp)
   803dc:	10803fcc 	andi	r2,r2,255
   803e0:	1009883a 	mov	r4,r2
   803e4:	0080f7c0 	call	80f7c <SEND1>

	// Precision (P)
	SEND1(0x08);
   803e8:	01000204 	movi	r4,8
   803ec:	0080f7c0 	call	80f7c <SEND1>

	// image height
	SEND1((UINT8)(image_height >> 8));
   803f0:	e0bfff17 	ldw	r2,-4(fp)
   803f4:	1004d23a 	srli	r2,r2,8
   803f8:	10803fcc 	andi	r2,r2,255
   803fc:	1009883a 	mov	r4,r2
   80400:	0080f7c0 	call	80f7c <SEND1>
	SEND1((UINT8)image_height);
   80404:	e0bfff17 	ldw	r2,-4(fp)
   80408:	10803fcc 	andi	r2,r2,255
   8040c:	1009883a 	mov	r4,r2
   80410:	0080f7c0 	call	80f7c <SEND1>

	// image width
	SEND1((UINT8)(image_width >> 8));
   80414:	e0bffe17 	ldw	r2,-8(fp)
   80418:	1004d23a 	srli	r2,r2,8
   8041c:	10803fcc 	andi	r2,r2,255
   80420:	1009883a 	mov	r4,r2
   80424:	0080f7c0 	call	80f7c <SEND1>
	SEND1((UINT8)image_width);
   80428:	e0bffe17 	ldw	r2,-8(fp)
   8042c:	10803fcc 	andi	r2,r2,255
   80430:	1009883a 	mov	r4,r2
   80434:	0080f7c0 	call	80f7c <SEND1>

	// Nf
	SEND1(number_of_components);
   80438:	e0bffc83 	ldbu	r2,-14(fp)
   8043c:	1009883a 	mov	r4,r2
   80440:	0080f7c0 	call	80f7c <SEND1>
	//	*output_ptr++ = 0x11;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   80444:	01000044 	movi	r4,1
   80448:	0080f7c0 	call	80f7c <SEND1>
	// if (image_format == FOUR_TWO_ZERO)
	//	*output_ptr++ = 0x22;
	// else if (image_format == FOUR_TWO_TWO)
	//	*output_ptr++ = 0x21;
	// else
	SEND1(0x11);
   8044c:	01000444 	movi	r4,17
   80450:	0080f7c0 	call	80f7c <SEND1>

	SEND1(0x00);
   80454:	0009883a 	mov	r4,zero
   80458:	0080f7c0 	call	80f7c <SEND1>

	SEND1(0x02);
   8045c:	01000084 	movi	r4,2
   80460:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x11);
   80464:	01000444 	movi	r4,17
   80468:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x01);
   8046c:	01000044 	movi	r4,1
   80470:	0080f7c0 	call	80f7c <SEND1>

	SEND1(0x03);
   80474:	010000c4 	movi	r4,3
   80478:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x11);
   8047c:	01000444 	movi	r4,17
   80480:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x01);
   80484:	01000044 	movi	r4,1
   80488:	0080f7c0 	call	80f7c <SEND1>
	//}

	// Scan header(SOF)

	// Start of scan marker
	SEND1(0xFF);
   8048c:	01003fc4 	movi	r4,255
   80490:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0xDA);
   80494:	01003684 	movi	r4,218
   80498:	0080f7c0 	call	80f7c <SEND1>

	header_length = (UINT16)(6 + (number_of_components << 1));
   8049c:	e0bffc83 	ldbu	r2,-14(fp)
   804a0:	1085883a 	add	r2,r2,r2
   804a4:	10800184 	addi	r2,r2,6
   804a8:	e0bffd0d 	sth	r2,-12(fp)

	// Scan header length
	SEND1((UINT8)(header_length >> 8));
   804ac:	e0bffd0b 	ldhu	r2,-12(fp)
   804b0:	1004d23a 	srli	r2,r2,8
   804b4:	10803fcc 	andi	r2,r2,255
   804b8:	1009883a 	mov	r4,r2
   804bc:	0080f7c0 	call	80f7c <SEND1>
	SEND1((UINT8)header_length);
   804c0:	e0bffd0b 	ldhu	r2,-12(fp)
   804c4:	10803fcc 	andi	r2,r2,255
   804c8:	1009883a 	mov	r4,r2
   804cc:	0080f7c0 	call	80f7c <SEND1>

	// Ns
	SEND1(number_of_components);
   804d0:	e0bffc83 	ldbu	r2,-14(fp)
   804d4:	1009883a 	mov	r4,r2
   804d8:	0080f7c0 	call	80f7c <SEND1>
	//	*output_ptr++ = 0x01;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   804dc:	01000044 	movi	r4,1
   804e0:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x00);
   804e4:	0009883a 	mov	r4,zero
   804e8:	0080f7c0 	call	80f7c <SEND1>

	SEND1(0x02);
   804ec:	01000084 	movi	r4,2
   804f0:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x11);
   804f4:	01000444 	movi	r4,17
   804f8:	0080f7c0 	call	80f7c <SEND1>

	SEND1(0x03);
   804fc:	010000c4 	movi	r4,3
   80500:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x11);
   80504:	01000444 	movi	r4,17
   80508:	0080f7c0 	call	80f7c <SEND1>
	//}

	SEND1(0x00);
   8050c:	0009883a 	mov	r4,zero
   80510:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x3F);
   80514:	01000fc4 	movi	r4,63
   80518:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0x00);
   8051c:	0009883a 	mov	r4,zero
   80520:	0080f7c0 	call	80f7c <SEND1>
}
   80524:	0001883a 	nop
   80528:	e037883a 	mov	sp,fp
   8052c:	dfc00117 	ldw	ra,4(sp)
   80530:	df000017 	ldw	fp,0(sp)
   80534:	dec00204 	addi	sp,sp,8
   80538:	f800283a 	ret

0008053c <huffman>:
UINT32 lcode = 0;
UINT16 bitindex = 0;
INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

void huffman(UINT16 component)
{
   8053c:	defff104 	addi	sp,sp,-60
   80540:	dfc00e15 	stw	ra,56(sp)
   80544:	df000d15 	stw	fp,52(sp)
   80548:	df000d04 	addi	fp,sp,52
   8054c:	2005883a 	mov	r2,r4
   80550:	e0bfff0d 	sth	r2,-4(fp)
	UINT16 *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	// static INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

	INT16 Coeff, LastDc;
	UINT16 AbsCoeff, HuffCode, HuffSize, RunLength = 0, DataSize = 0, index;
   80554:	e03ff98d 	sth	zero,-26(fp)
   80558:	e03ffa0d 	sth	zero,-24(fp)
	UINT8 out;

	// Temp_Ptr = Temp;
	// Coeff = *Temp_Ptr++;
	// xt_iss_profile_disable();
	Coeff = (INT16)RECV2();
   8055c:	0080f380 	call	80f38 <RECV2>
   80560:	e0bff80d 	sth	r2,-32(fp)
	// xt_iss_profile_enable();
	if (component == 1)
   80564:	e0bfff0b 	ldhu	r2,-4(fp)
   80568:	10800058 	cmpnei	r2,r2,1
   8056c:	1000111e 	bne	r2,zero,805b4 <huffman+0x78>
	{
		DcCodeTable = luminance_dc_code_table;
   80570:	00800234 	movhi	r2,8
   80574:	108b7904 	addi	r2,r2,11748
   80578:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = luminance_dc_size_table;
   8057c:	00800234 	movhi	r2,8
   80580:	108b7f04 	addi	r2,r2,11772
   80584:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = luminance_ac_code_table;
   80588:	00800234 	movhi	r2,8
   8058c:	108b9104 	addi	r2,r2,11844
   80590:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = luminance_ac_size_table;
   80594:	00800234 	movhi	r2,8
   80598:	108be204 	addi	r2,r2,12168
   8059c:	e0bff715 	stw	r2,-36(fp)

		LastDc = ldc1;
   805a0:	d0a2e78b 	ldhu	r2,-29794(gp)
   805a4:	e0bff88d 	sth	r2,-30(fp)
		ldc1 = Coeff;
   805a8:	e0bff80b 	ldhu	r2,-32(fp)
   805ac:	d0a2e78d 	sth	r2,-29794(gp)
   805b0:	00001806 	br	80614 <huffman+0xd8>
	}
	else
	{
		DcCodeTable = chrominance_dc_code_table;
   805b4:	00800234 	movhi	r2,8
   805b8:	108b8504 	addi	r2,r2,11796
   805bc:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = chrominance_dc_size_table;
   805c0:	00800234 	movhi	r2,8
   805c4:	108b8b04 	addi	r2,r2,11820
   805c8:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = chrominance_ac_code_table;
   805cc:	00800234 	movhi	r2,8
   805d0:	108c3304 	addi	r2,r2,12492
   805d4:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = chrominance_ac_size_table;
   805d8:	00800234 	movhi	r2,8
   805dc:	108c8404 	addi	r2,r2,12816
   805e0:	e0bff715 	stw	r2,-36(fp)

		if (component == 2)
   805e4:	e0bfff0b 	ldhu	r2,-4(fp)
   805e8:	10800098 	cmpnei	r2,r2,2
   805ec:	1000051e 	bne	r2,zero,80604 <huffman+0xc8>
		{
			LastDc = ldc2;
   805f0:	d0a2e80b 	ldhu	r2,-29792(gp)
   805f4:	e0bff88d 	sth	r2,-30(fp)
			ldc2 = Coeff;
   805f8:	e0bff80b 	ldhu	r2,-32(fp)
   805fc:	d0a2e80d 	sth	r2,-29792(gp)
   80600:	00000406 	br	80614 <huffman+0xd8>
		}
		else
		{
			LastDc = ldc3;
   80604:	d0a2e88b 	ldhu	r2,-29790(gp)
   80608:	e0bff88d 	sth	r2,-30(fp)
			ldc3 = Coeff;
   8060c:	e0bff80b 	ldhu	r2,-32(fp)
   80610:	d0a2e88d 	sth	r2,-29790(gp)
		}
	}

	Coeff -= LastDc;
   80614:	e0fff80b 	ldhu	r3,-32(fp)
   80618:	e0bff88b 	ldhu	r2,-30(fp)
   8061c:	1885c83a 	sub	r2,r3,r2
   80620:	e0bff80d 	sth	r2,-32(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   80624:	e0bff80f 	ldh	r2,-32(fp)
   80628:	1000060e 	bge	r2,zero,80644 <huffman+0x108>
   8062c:	e0bff80b 	ldhu	r2,-32(fp)
   80630:	1007883a 	mov	r3,r2
   80634:	18ffffc4 	addi	r3,r3,-1
   80638:	e0fff80d 	sth	r3,-32(fp)
   8063c:	0085c83a 	sub	r2,zero,r2
   80640:	00000106 	br	80648 <huffman+0x10c>
   80644:	e0bff80b 	ldhu	r2,-32(fp)
   80648:	e0bff90d 	sth	r2,-28(fp)

	while (AbsCoeff != 0)
   8064c:	00000606 	br	80668 <huffman+0x12c>
	{
		AbsCoeff >>= 1;
   80650:	e0bff90b 	ldhu	r2,-28(fp)
   80654:	1004d07a 	srli	r2,r2,1
   80658:	e0bff90d 	sth	r2,-28(fp)
		DataSize++;
   8065c:	e0bffa0b 	ldhu	r2,-24(fp)
   80660:	10800044 	addi	r2,r2,1
   80664:	e0bffa0d 	sth	r2,-24(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0)
   80668:	e0bff90b 	ldhu	r2,-28(fp)
   8066c:	103ff81e 	bne	r2,zero,80650 <_gp+0xffff4d2c>
	{
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable[DataSize];
   80670:	e0bffa0b 	ldhu	r2,-24(fp)
   80674:	1085883a 	add	r2,r2,r2
   80678:	1007883a 	mov	r3,r2
   8067c:	e0bff417 	ldw	r2,-48(fp)
   80680:	10c5883a 	add	r2,r2,r3
   80684:	1080000b 	ldhu	r2,0(r2)
   80688:	e0bffa8d 	sth	r2,-22(fp)
	HuffSize = DcSizeTable[DataSize];
   8068c:	e0bffa0b 	ldhu	r2,-24(fp)
   80690:	1085883a 	add	r2,r2,r2
   80694:	1007883a 	mov	r3,r2
   80698:	e0bff517 	ldw	r2,-44(fp)
   8069c:	10c5883a 	add	r2,r2,r3
   806a0:	1080000b 	ldhu	r2,0(r2)
   806a4:	e0bffb0d 	sth	r2,-20(fp)

	Coeff &= (1 << DataSize) - 1;
   806a8:	e0bffa0b 	ldhu	r2,-24(fp)
   806ac:	00c00044 	movi	r3,1
   806b0:	1884983a 	sll	r2,r3,r2
   806b4:	10bfffc4 	addi	r2,r2,-1
   806b8:	1007883a 	mov	r3,r2
   806bc:	e0bff80b 	ldhu	r2,-32(fp)
   806c0:	1884703a 	and	r2,r3,r2
   806c4:	e0bff80d 	sth	r2,-32(fp)
	data = (HuffCode << DataSize) | Coeff;
   806c8:	e0fffa8b 	ldhu	r3,-22(fp)
   806cc:	e0bffa0b 	ldhu	r2,-24(fp)
   806d0:	1886983a 	sll	r3,r3,r2
   806d4:	e0bff80f 	ldh	r2,-32(fp)
   806d8:	1884b03a 	or	r2,r3,r2
   806dc:	e0bffc15 	stw	r2,-16(fp)
	numbits = HuffSize + DataSize;
   806e0:	e0fffb0b 	ldhu	r3,-20(fp)
   806e4:	e0bffa0b 	ldhu	r2,-24(fp)
   806e8:	1885883a 	add	r2,r3,r2
   806ec:	e0bffd0d 	sth	r2,-12(fp)

	PUTBITS
   806f0:	d0e2e70b 	ldhu	r3,-29796(gp)
   806f4:	e0bffd0b 	ldhu	r2,-12(fp)
   806f8:	1885883a 	add	r2,r3,r2
   806fc:	10bff804 	addi	r2,r2,-32
   80700:	e0bffd8d 	sth	r2,-10(fp)
   80704:	e0bffd8f 	ldh	r2,-10(fp)
   80708:	10000b0e 	bge	r2,zero,80738 <huffman+0x1fc>
   8070c:	d0e2e617 	ldw	r3,-29800(gp)
   80710:	e0bffd0b 	ldhu	r2,-12(fp)
   80714:	1886983a 	sll	r3,r3,r2
   80718:	e0bffc17 	ldw	r2,-16(fp)
   8071c:	1884b03a 	or	r2,r3,r2
   80720:	d0a2e615 	stw	r2,-29800(gp)
   80724:	d0e2e70b 	ldhu	r3,-29796(gp)
   80728:	e0bffd0b 	ldhu	r2,-12(fp)
   8072c:	1885883a 	add	r2,r3,r2
   80730:	d0a2e70d 	sth	r2,-29796(gp)
   80734:	00003a06 	br	80820 <huffman+0x2e4>
   80738:	d0e2e617 	ldw	r3,-29800(gp)
   8073c:	d0a2e70b 	ldhu	r2,-29796(gp)
   80740:	10bfffcc 	andi	r2,r2,65535
   80744:	01000804 	movi	r4,32
   80748:	2085c83a 	sub	r2,r4,r2
   8074c:	1886983a 	sll	r3,r3,r2
   80750:	e0bffd8f 	ldh	r2,-10(fp)
   80754:	e13ffc17 	ldw	r4,-16(fp)
   80758:	2084d83a 	srl	r2,r4,r2
   8075c:	1884b03a 	or	r2,r3,r2
   80760:	d0a2e615 	stw	r2,-29800(gp)
   80764:	d0a2e617 	ldw	r2,-29800(gp)
   80768:	1004d63a 	srli	r2,r2,24
   8076c:	e0bffe05 	stb	r2,-8(fp)
   80770:	e0bffe03 	ldbu	r2,-8(fp)
   80774:	1009883a 	mov	r4,r2
   80778:	0080f7c0 	call	80f7c <SEND1>
   8077c:	e0bffe03 	ldbu	r2,-8(fp)
   80780:	10803fd8 	cmpnei	r2,r2,255
   80784:	1000021e 	bne	r2,zero,80790 <huffman+0x254>
   80788:	0009883a 	mov	r4,zero
   8078c:	0080f7c0 	call	80f7c <SEND1>
   80790:	d0a2e617 	ldw	r2,-29800(gp)
   80794:	1004d43a 	srli	r2,r2,16
   80798:	e0bffe05 	stb	r2,-8(fp)
   8079c:	e0bffe03 	ldbu	r2,-8(fp)
   807a0:	1009883a 	mov	r4,r2
   807a4:	0080f7c0 	call	80f7c <SEND1>
   807a8:	e0bffe03 	ldbu	r2,-8(fp)
   807ac:	10803fd8 	cmpnei	r2,r2,255
   807b0:	1000021e 	bne	r2,zero,807bc <huffman+0x280>
   807b4:	0009883a 	mov	r4,zero
   807b8:	0080f7c0 	call	80f7c <SEND1>
   807bc:	d0a2e617 	ldw	r2,-29800(gp)
   807c0:	1004d23a 	srli	r2,r2,8
   807c4:	e0bffe05 	stb	r2,-8(fp)
   807c8:	e0bffe03 	ldbu	r2,-8(fp)
   807cc:	1009883a 	mov	r4,r2
   807d0:	0080f7c0 	call	80f7c <SEND1>
   807d4:	e0bffe03 	ldbu	r2,-8(fp)
   807d8:	10803fd8 	cmpnei	r2,r2,255
   807dc:	1000021e 	bne	r2,zero,807e8 <huffman+0x2ac>
   807e0:	0009883a 	mov	r4,zero
   807e4:	0080f7c0 	call	80f7c <SEND1>
   807e8:	d0a2e617 	ldw	r2,-29800(gp)
   807ec:	e0bffe05 	stb	r2,-8(fp)
   807f0:	e0bffe03 	ldbu	r2,-8(fp)
   807f4:	1009883a 	mov	r4,r2
   807f8:	0080f7c0 	call	80f7c <SEND1>
   807fc:	e0bffe03 	ldbu	r2,-8(fp)
   80800:	10803fd8 	cmpnei	r2,r2,255
   80804:	1000021e 	bne	r2,zero,80810 <huffman+0x2d4>
   80808:	0009883a 	mov	r4,zero
   8080c:	0080f7c0 	call	80f7c <SEND1>
   80810:	e0bffc17 	ldw	r2,-16(fp)
   80814:	d0a2e615 	stw	r2,-29800(gp)
   80818:	e0bffd8b 	ldhu	r2,-10(fp)
   8081c:	d0a2e70d 	sth	r2,-29796(gp)

	for (i = 63; i > 0; i--)
   80820:	00800fc4 	movi	r2,63
   80824:	e0bff30d 	sth	r2,-52(fp)
   80828:	0000fb06 	br	80c18 <huffman+0x6dc>
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
   8082c:	0080f380 	call	80f38 <RECV2>
   80830:	e0bff80d 	sth	r2,-32(fp)
   80834:	e0bff80f 	ldh	r2,-32(fp)
   80838:	1000f126 	beq	r2,zero,80c00 <huffman+0x6c4>
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   8083c:	00005706 	br	8099c <huffman+0x460>
			{
				RunLength -= 16;
   80840:	e0bff98b 	ldhu	r2,-26(fp)
   80844:	10bffc04 	addi	r2,r2,-16
   80848:	e0bff98d 	sth	r2,-26(fp)
				data = AcCodeTable[161];
   8084c:	e0bff617 	ldw	r2,-40(fp)
   80850:	10805084 	addi	r2,r2,322
   80854:	1080000b 	ldhu	r2,0(r2)
   80858:	10bfffcc 	andi	r2,r2,65535
   8085c:	e0bffc15 	stw	r2,-16(fp)
				numbits = AcSizeTable[161];
   80860:	e0bff717 	ldw	r2,-36(fp)
   80864:	1080508b 	ldhu	r2,322(r2)
   80868:	e0bffd0d 	sth	r2,-12(fp)
				PUTBITS
   8086c:	d0e2e70b 	ldhu	r3,-29796(gp)
   80870:	e0bffd0b 	ldhu	r2,-12(fp)
   80874:	1885883a 	add	r2,r3,r2
   80878:	10bff804 	addi	r2,r2,-32
   8087c:	e0bffd8d 	sth	r2,-10(fp)
   80880:	e0bffd8f 	ldh	r2,-10(fp)
   80884:	10000b0e 	bge	r2,zero,808b4 <huffman+0x378>
   80888:	d0e2e617 	ldw	r3,-29800(gp)
   8088c:	e0bffd0b 	ldhu	r2,-12(fp)
   80890:	1886983a 	sll	r3,r3,r2
   80894:	e0bffc17 	ldw	r2,-16(fp)
   80898:	1884b03a 	or	r2,r3,r2
   8089c:	d0a2e615 	stw	r2,-29800(gp)
   808a0:	d0e2e70b 	ldhu	r3,-29796(gp)
   808a4:	e0bffd0b 	ldhu	r2,-12(fp)
   808a8:	1885883a 	add	r2,r3,r2
   808ac:	d0a2e70d 	sth	r2,-29796(gp)
   808b0:	00003a06 	br	8099c <huffman+0x460>
   808b4:	d0e2e617 	ldw	r3,-29800(gp)
   808b8:	d0a2e70b 	ldhu	r2,-29796(gp)
   808bc:	10bfffcc 	andi	r2,r2,65535
   808c0:	01000804 	movi	r4,32
   808c4:	2085c83a 	sub	r2,r4,r2
   808c8:	1886983a 	sll	r3,r3,r2
   808cc:	e0bffd8f 	ldh	r2,-10(fp)
   808d0:	e13ffc17 	ldw	r4,-16(fp)
   808d4:	2084d83a 	srl	r2,r4,r2
   808d8:	1884b03a 	or	r2,r3,r2
   808dc:	d0a2e615 	stw	r2,-29800(gp)
   808e0:	d0a2e617 	ldw	r2,-29800(gp)
   808e4:	1004d63a 	srli	r2,r2,24
   808e8:	e0bffe05 	stb	r2,-8(fp)
   808ec:	e0bffe03 	ldbu	r2,-8(fp)
   808f0:	1009883a 	mov	r4,r2
   808f4:	0080f7c0 	call	80f7c <SEND1>
   808f8:	e0bffe03 	ldbu	r2,-8(fp)
   808fc:	10803fd8 	cmpnei	r2,r2,255
   80900:	1000021e 	bne	r2,zero,8090c <huffman+0x3d0>
   80904:	0009883a 	mov	r4,zero
   80908:	0080f7c0 	call	80f7c <SEND1>
   8090c:	d0a2e617 	ldw	r2,-29800(gp)
   80910:	1004d43a 	srli	r2,r2,16
   80914:	e0bffe05 	stb	r2,-8(fp)
   80918:	e0bffe03 	ldbu	r2,-8(fp)
   8091c:	1009883a 	mov	r4,r2
   80920:	0080f7c0 	call	80f7c <SEND1>
   80924:	e0bffe03 	ldbu	r2,-8(fp)
   80928:	10803fd8 	cmpnei	r2,r2,255
   8092c:	1000021e 	bne	r2,zero,80938 <huffman+0x3fc>
   80930:	0009883a 	mov	r4,zero
   80934:	0080f7c0 	call	80f7c <SEND1>
   80938:	d0a2e617 	ldw	r2,-29800(gp)
   8093c:	1004d23a 	srli	r2,r2,8
   80940:	e0bffe05 	stb	r2,-8(fp)
   80944:	e0bffe03 	ldbu	r2,-8(fp)
   80948:	1009883a 	mov	r4,r2
   8094c:	0080f7c0 	call	80f7c <SEND1>
   80950:	e0bffe03 	ldbu	r2,-8(fp)
   80954:	10803fd8 	cmpnei	r2,r2,255
   80958:	1000021e 	bne	r2,zero,80964 <huffman+0x428>
   8095c:	0009883a 	mov	r4,zero
   80960:	0080f7c0 	call	80f7c <SEND1>
   80964:	d0a2e617 	ldw	r2,-29800(gp)
   80968:	e0bffe05 	stb	r2,-8(fp)
   8096c:	e0bffe03 	ldbu	r2,-8(fp)
   80970:	1009883a 	mov	r4,r2
   80974:	0080f7c0 	call	80f7c <SEND1>
   80978:	e0bffe03 	ldbu	r2,-8(fp)
   8097c:	10803fd8 	cmpnei	r2,r2,255
   80980:	1000021e 	bne	r2,zero,8098c <huffman+0x450>
   80984:	0009883a 	mov	r4,zero
   80988:	0080f7c0 	call	80f7c <SEND1>
   8098c:	e0bffc17 	ldw	r2,-16(fp)
   80990:	d0a2e615 	stw	r2,-29800(gp)
   80994:	e0bffd8b 	ldhu	r2,-10(fp)
   80998:	d0a2e70d 	sth	r2,-29796(gp)
	for (i = 63; i > 0; i--)
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   8099c:	e0bff98b 	ldhu	r2,-26(fp)
   809a0:	10800428 	cmpgeui	r2,r2,16
   809a4:	103fa61e 	bne	r2,zero,80840 <_gp+0xffff4f1c>
				data = AcCodeTable[161];
				numbits = AcSizeTable[161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   809a8:	e0bff80f 	ldh	r2,-32(fp)
   809ac:	1000060e 	bge	r2,zero,809c8 <huffman+0x48c>
   809b0:	e0bff80b 	ldhu	r2,-32(fp)
   809b4:	1007883a 	mov	r3,r2
   809b8:	18ffffc4 	addi	r3,r3,-1
   809bc:	e0fff80d 	sth	r3,-32(fp)
   809c0:	0085c83a 	sub	r2,zero,r2
   809c4:	00000106 	br	809cc <huffman+0x490>
   809c8:	e0bff80b 	ldhu	r2,-32(fp)
   809cc:	e0bff90d 	sth	r2,-28(fp)

			if (AbsCoeff >> 8 == 0)
   809d0:	e0bff90b 	ldhu	r2,-28(fp)
   809d4:	1004d23a 	srli	r2,r2,8
   809d8:	10bfffcc 	andi	r2,r2,65535
   809dc:	1000081e 	bne	r2,zero,80a00 <huffman+0x4c4>
				DataSize = bitsize[AbsCoeff];
   809e0:	e0fff90b 	ldhu	r3,-28(fp)
   809e4:	00800234 	movhi	r2,8
   809e8:	108cd504 	addi	r2,r2,13140
   809ec:	10c5883a 	add	r2,r2,r3
   809f0:	10800003 	ldbu	r2,0(r2)
   809f4:	10803fcc 	andi	r2,r2,255
   809f8:	e0bffa0d 	sth	r2,-24(fp)
   809fc:	00000a06 	br	80a28 <huffman+0x4ec>
			else
				DataSize = bitsize[AbsCoeff >> 8] + 8;
   80a00:	e0bff90b 	ldhu	r2,-28(fp)
   80a04:	1004d23a 	srli	r2,r2,8
   80a08:	10ffffcc 	andi	r3,r2,65535
   80a0c:	00800234 	movhi	r2,8
   80a10:	108cd504 	addi	r2,r2,13140
   80a14:	10c5883a 	add	r2,r2,r3
   80a18:	10800003 	ldbu	r2,0(r2)
   80a1c:	10803fcc 	andi	r2,r2,255
   80a20:	10800204 	addi	r2,r2,8
   80a24:	e0bffa0d 	sth	r2,-24(fp)

			index = RunLength * 10 + DataSize;
   80a28:	e0bff98b 	ldhu	r2,-26(fp)
   80a2c:	01400284 	movi	r5,10
   80a30:	1009883a 	mov	r4,r2
   80a34:	008109c0 	call	8109c <__mulsi3>
   80a38:	1007883a 	mov	r3,r2
   80a3c:	e0bffa0b 	ldhu	r2,-24(fp)
   80a40:	1885883a 	add	r2,r3,r2
   80a44:	e0bffe8d 	sth	r2,-6(fp)
			HuffCode = AcCodeTable[index];
   80a48:	e0bffe8b 	ldhu	r2,-6(fp)
   80a4c:	1085883a 	add	r2,r2,r2
   80a50:	1007883a 	mov	r3,r2
   80a54:	e0bff617 	ldw	r2,-40(fp)
   80a58:	10c5883a 	add	r2,r2,r3
   80a5c:	1080000b 	ldhu	r2,0(r2)
   80a60:	e0bffa8d 	sth	r2,-22(fp)
			HuffSize = AcSizeTable[index];
   80a64:	e0bffe8b 	ldhu	r2,-6(fp)
   80a68:	1085883a 	add	r2,r2,r2
   80a6c:	1007883a 	mov	r3,r2
   80a70:	e0bff717 	ldw	r2,-36(fp)
   80a74:	10c5883a 	add	r2,r2,r3
   80a78:	1080000b 	ldhu	r2,0(r2)
   80a7c:	e0bffb0d 	sth	r2,-20(fp)

			Coeff &= (1 << DataSize) - 1;
   80a80:	e0bffa0b 	ldhu	r2,-24(fp)
   80a84:	00c00044 	movi	r3,1
   80a88:	1884983a 	sll	r2,r3,r2
   80a8c:	10bfffc4 	addi	r2,r2,-1
   80a90:	1007883a 	mov	r3,r2
   80a94:	e0bff80b 	ldhu	r2,-32(fp)
   80a98:	1884703a 	and	r2,r3,r2
   80a9c:	e0bff80d 	sth	r2,-32(fp)
			data = (HuffCode << DataSize) | Coeff;
   80aa0:	e0fffa8b 	ldhu	r3,-22(fp)
   80aa4:	e0bffa0b 	ldhu	r2,-24(fp)
   80aa8:	1886983a 	sll	r3,r3,r2
   80aac:	e0bff80f 	ldh	r2,-32(fp)
   80ab0:	1884b03a 	or	r2,r3,r2
   80ab4:	e0bffc15 	stw	r2,-16(fp)
			numbits = HuffSize + DataSize;
   80ab8:	e0fffb0b 	ldhu	r3,-20(fp)
   80abc:	e0bffa0b 	ldhu	r2,-24(fp)
   80ac0:	1885883a 	add	r2,r3,r2
   80ac4:	e0bffd0d 	sth	r2,-12(fp)

			PUTBITS
   80ac8:	d0e2e70b 	ldhu	r3,-29796(gp)
   80acc:	e0bffd0b 	ldhu	r2,-12(fp)
   80ad0:	1885883a 	add	r2,r3,r2
   80ad4:	10bff804 	addi	r2,r2,-32
   80ad8:	e0bffd8d 	sth	r2,-10(fp)
   80adc:	e0bffd8f 	ldh	r2,-10(fp)
   80ae0:	10000b0e 	bge	r2,zero,80b10 <huffman+0x5d4>
   80ae4:	d0e2e617 	ldw	r3,-29800(gp)
   80ae8:	e0bffd0b 	ldhu	r2,-12(fp)
   80aec:	1886983a 	sll	r3,r3,r2
   80af0:	e0bffc17 	ldw	r2,-16(fp)
   80af4:	1884b03a 	or	r2,r3,r2
   80af8:	d0a2e615 	stw	r2,-29800(gp)
   80afc:	d0e2e70b 	ldhu	r3,-29796(gp)
   80b00:	e0bffd0b 	ldhu	r2,-12(fp)
   80b04:	1885883a 	add	r2,r3,r2
   80b08:	d0a2e70d 	sth	r2,-29796(gp)
   80b0c:	00003a06 	br	80bf8 <huffman+0x6bc>
   80b10:	d0e2e617 	ldw	r3,-29800(gp)
   80b14:	d0a2e70b 	ldhu	r2,-29796(gp)
   80b18:	10bfffcc 	andi	r2,r2,65535
   80b1c:	01000804 	movi	r4,32
   80b20:	2085c83a 	sub	r2,r4,r2
   80b24:	1886983a 	sll	r3,r3,r2
   80b28:	e0bffd8f 	ldh	r2,-10(fp)
   80b2c:	e13ffc17 	ldw	r4,-16(fp)
   80b30:	2084d83a 	srl	r2,r4,r2
   80b34:	1884b03a 	or	r2,r3,r2
   80b38:	d0a2e615 	stw	r2,-29800(gp)
   80b3c:	d0a2e617 	ldw	r2,-29800(gp)
   80b40:	1004d63a 	srli	r2,r2,24
   80b44:	e0bffe05 	stb	r2,-8(fp)
   80b48:	e0bffe03 	ldbu	r2,-8(fp)
   80b4c:	1009883a 	mov	r4,r2
   80b50:	0080f7c0 	call	80f7c <SEND1>
   80b54:	e0bffe03 	ldbu	r2,-8(fp)
   80b58:	10803fd8 	cmpnei	r2,r2,255
   80b5c:	1000021e 	bne	r2,zero,80b68 <huffman+0x62c>
   80b60:	0009883a 	mov	r4,zero
   80b64:	0080f7c0 	call	80f7c <SEND1>
   80b68:	d0a2e617 	ldw	r2,-29800(gp)
   80b6c:	1004d43a 	srli	r2,r2,16
   80b70:	e0bffe05 	stb	r2,-8(fp)
   80b74:	e0bffe03 	ldbu	r2,-8(fp)
   80b78:	1009883a 	mov	r4,r2
   80b7c:	0080f7c0 	call	80f7c <SEND1>
   80b80:	e0bffe03 	ldbu	r2,-8(fp)
   80b84:	10803fd8 	cmpnei	r2,r2,255
   80b88:	1000021e 	bne	r2,zero,80b94 <huffman+0x658>
   80b8c:	0009883a 	mov	r4,zero
   80b90:	0080f7c0 	call	80f7c <SEND1>
   80b94:	d0a2e617 	ldw	r2,-29800(gp)
   80b98:	1004d23a 	srli	r2,r2,8
   80b9c:	e0bffe05 	stb	r2,-8(fp)
   80ba0:	e0bffe03 	ldbu	r2,-8(fp)
   80ba4:	1009883a 	mov	r4,r2
   80ba8:	0080f7c0 	call	80f7c <SEND1>
   80bac:	e0bffe03 	ldbu	r2,-8(fp)
   80bb0:	10803fd8 	cmpnei	r2,r2,255
   80bb4:	1000021e 	bne	r2,zero,80bc0 <huffman+0x684>
   80bb8:	0009883a 	mov	r4,zero
   80bbc:	0080f7c0 	call	80f7c <SEND1>
   80bc0:	d0a2e617 	ldw	r2,-29800(gp)
   80bc4:	e0bffe05 	stb	r2,-8(fp)
   80bc8:	e0bffe03 	ldbu	r2,-8(fp)
   80bcc:	1009883a 	mov	r4,r2
   80bd0:	0080f7c0 	call	80f7c <SEND1>
   80bd4:	e0bffe03 	ldbu	r2,-8(fp)
   80bd8:	10803fd8 	cmpnei	r2,r2,255
   80bdc:	1000021e 	bne	r2,zero,80be8 <huffman+0x6ac>
   80be0:	0009883a 	mov	r4,zero
   80be4:	0080f7c0 	call	80f7c <SEND1>
   80be8:	e0bffc17 	ldw	r2,-16(fp)
   80bec:	d0a2e615 	stw	r2,-29800(gp)
   80bf0:	e0bffd8b 	ldhu	r2,-10(fp)
   80bf4:	d0a2e70d 	sth	r2,-29796(gp)
			RunLength = 0;
   80bf8:	e03ff98d 	sth	zero,-26(fp)
   80bfc:	00000306 	br	80c0c <huffman+0x6d0>
		}
		else
			RunLength++;
   80c00:	e0bff98b 	ldhu	r2,-26(fp)
   80c04:	10800044 	addi	r2,r2,1
   80c08:	e0bff98d 	sth	r2,-26(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i = 63; i > 0; i--)
   80c0c:	e0bff30b 	ldhu	r2,-52(fp)
   80c10:	10bfffc4 	addi	r2,r2,-1
   80c14:	e0bff30d 	sth	r2,-52(fp)
   80c18:	e0bff30b 	ldhu	r2,-52(fp)
   80c1c:	103f031e 	bne	r2,zero,8082c <_gp+0xffff4f08>
		}
		else
			RunLength++;
	}
	// xt_iss_profile_enable();
	if (RunLength != 0)
   80c20:	e0bff98b 	ldhu	r2,-26(fp)
   80c24:	10005326 	beq	r2,zero,80d74 <huffman+0x838>
	{
		data = AcCodeTable[0];
   80c28:	e0bff617 	ldw	r2,-40(fp)
   80c2c:	1080000b 	ldhu	r2,0(r2)
   80c30:	10bfffcc 	andi	r2,r2,65535
   80c34:	e0bffc15 	stw	r2,-16(fp)
		numbits = AcSizeTable[0];
   80c38:	e0bff717 	ldw	r2,-36(fp)
   80c3c:	1080000b 	ldhu	r2,0(r2)
   80c40:	e0bffd0d 	sth	r2,-12(fp)
		PUTBITS
   80c44:	d0e2e70b 	ldhu	r3,-29796(gp)
   80c48:	e0bffd0b 	ldhu	r2,-12(fp)
   80c4c:	1885883a 	add	r2,r3,r2
   80c50:	10bff804 	addi	r2,r2,-32
   80c54:	e0bffd8d 	sth	r2,-10(fp)
   80c58:	e0bffd8f 	ldh	r2,-10(fp)
   80c5c:	10000b0e 	bge	r2,zero,80c8c <huffman+0x750>
   80c60:	d0e2e617 	ldw	r3,-29800(gp)
   80c64:	e0bffd0b 	ldhu	r2,-12(fp)
   80c68:	1886983a 	sll	r3,r3,r2
   80c6c:	e0bffc17 	ldw	r2,-16(fp)
   80c70:	1884b03a 	or	r2,r3,r2
   80c74:	d0a2e615 	stw	r2,-29800(gp)
   80c78:	d0e2e70b 	ldhu	r3,-29796(gp)
   80c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   80c80:	1885883a 	add	r2,r3,r2
   80c84:	d0a2e70d 	sth	r2,-29796(gp)
	}
}
   80c88:	00003a06 	br	80d74 <huffman+0x838>
	// xt_iss_profile_enable();
	if (RunLength != 0)
	{
		data = AcCodeTable[0];
		numbits = AcSizeTable[0];
		PUTBITS
   80c8c:	d0e2e617 	ldw	r3,-29800(gp)
   80c90:	d0a2e70b 	ldhu	r2,-29796(gp)
   80c94:	10bfffcc 	andi	r2,r2,65535
   80c98:	01000804 	movi	r4,32
   80c9c:	2085c83a 	sub	r2,r4,r2
   80ca0:	1886983a 	sll	r3,r3,r2
   80ca4:	e0bffd8f 	ldh	r2,-10(fp)
   80ca8:	e13ffc17 	ldw	r4,-16(fp)
   80cac:	2084d83a 	srl	r2,r4,r2
   80cb0:	1884b03a 	or	r2,r3,r2
   80cb4:	d0a2e615 	stw	r2,-29800(gp)
   80cb8:	d0a2e617 	ldw	r2,-29800(gp)
   80cbc:	1004d63a 	srli	r2,r2,24
   80cc0:	e0bffe05 	stb	r2,-8(fp)
   80cc4:	e0bffe03 	ldbu	r2,-8(fp)
   80cc8:	1009883a 	mov	r4,r2
   80ccc:	0080f7c0 	call	80f7c <SEND1>
   80cd0:	e0bffe03 	ldbu	r2,-8(fp)
   80cd4:	10803fd8 	cmpnei	r2,r2,255
   80cd8:	1000021e 	bne	r2,zero,80ce4 <huffman+0x7a8>
   80cdc:	0009883a 	mov	r4,zero
   80ce0:	0080f7c0 	call	80f7c <SEND1>
   80ce4:	d0a2e617 	ldw	r2,-29800(gp)
   80ce8:	1004d43a 	srli	r2,r2,16
   80cec:	e0bffe05 	stb	r2,-8(fp)
   80cf0:	e0bffe03 	ldbu	r2,-8(fp)
   80cf4:	1009883a 	mov	r4,r2
   80cf8:	0080f7c0 	call	80f7c <SEND1>
   80cfc:	e0bffe03 	ldbu	r2,-8(fp)
   80d00:	10803fd8 	cmpnei	r2,r2,255
   80d04:	1000021e 	bne	r2,zero,80d10 <huffman+0x7d4>
   80d08:	0009883a 	mov	r4,zero
   80d0c:	0080f7c0 	call	80f7c <SEND1>
   80d10:	d0a2e617 	ldw	r2,-29800(gp)
   80d14:	1004d23a 	srli	r2,r2,8
   80d18:	e0bffe05 	stb	r2,-8(fp)
   80d1c:	e0bffe03 	ldbu	r2,-8(fp)
   80d20:	1009883a 	mov	r4,r2
   80d24:	0080f7c0 	call	80f7c <SEND1>
   80d28:	e0bffe03 	ldbu	r2,-8(fp)
   80d2c:	10803fd8 	cmpnei	r2,r2,255
   80d30:	1000021e 	bne	r2,zero,80d3c <huffman+0x800>
   80d34:	0009883a 	mov	r4,zero
   80d38:	0080f7c0 	call	80f7c <SEND1>
   80d3c:	d0a2e617 	ldw	r2,-29800(gp)
   80d40:	e0bffe05 	stb	r2,-8(fp)
   80d44:	e0bffe03 	ldbu	r2,-8(fp)
   80d48:	1009883a 	mov	r4,r2
   80d4c:	0080f7c0 	call	80f7c <SEND1>
   80d50:	e0bffe03 	ldbu	r2,-8(fp)
   80d54:	10803fd8 	cmpnei	r2,r2,255
   80d58:	1000021e 	bne	r2,zero,80d64 <huffman+0x828>
   80d5c:	0009883a 	mov	r4,zero
   80d60:	0080f7c0 	call	80f7c <SEND1>
   80d64:	e0bffc17 	ldw	r2,-16(fp)
   80d68:	d0a2e615 	stw	r2,-29800(gp)
   80d6c:	e0bffd8b 	ldhu	r2,-10(fp)
   80d70:	d0a2e70d 	sth	r2,-29796(gp)
	}
}
   80d74:	0001883a 	nop
   80d78:	e037883a 	mov	sp,fp
   80d7c:	dfc00117 	ldw	ra,4(sp)
   80d80:	df000017 	ldw	fp,0(sp)
   80d84:	dec00204 	addi	sp,sp,8
   80d88:	f800283a 	ret

00080d8c <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream(void)
{
   80d8c:	defffb04 	addi	sp,sp,-20
   80d90:	dfc00415 	stw	ra,16(sp)
   80d94:	df000315 	stw	fp,12(sp)
   80d98:	df000304 	addi	fp,sp,12
	UINT16 i, count;
	UINT8 *ptr;

	UINT8 out;

	if (bitindex > 0)
   80d9c:	d0a2e70b 	ldhu	r2,-29796(gp)
   80da0:	10bfffcc 	andi	r2,r2,65535
   80da4:	10002326 	beq	r2,zero,80e34 <close_bitstream+0xa8>
	{
		lcode <<= (32 - bitindex);
   80da8:	d0e2e617 	ldw	r3,-29800(gp)
   80dac:	d0a2e70b 	ldhu	r2,-29796(gp)
   80db0:	10bfffcc 	andi	r2,r2,65535
   80db4:	01000804 	movi	r4,32
   80db8:	2085c83a 	sub	r2,r4,r2
   80dbc:	1884983a 	sll	r2,r3,r2
   80dc0:	d0a2e615 	stw	r2,-29800(gp)
		count = (bitindex + 7) >> 3;
   80dc4:	d0a2e70b 	ldhu	r2,-29796(gp)
   80dc8:	10bfffcc 	andi	r2,r2,65535
   80dcc:	108001c4 	addi	r2,r2,7
   80dd0:	1005d0fa 	srai	r2,r2,3
   80dd4:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (UINT8 *)&lcode + 3;
   80dd8:	d0a2e6c4 	addi	r2,gp,-29797
   80ddc:	e0bffe15 	stw	r2,-8(fp)

		for (i = count; i > 0; i--)
   80de0:	e0bfff0b 	ldhu	r2,-4(fp)
   80de4:	e0bffd0d 	sth	r2,-12(fp)
   80de8:	00001006 	br	80e2c <close_bitstream+0xa0>
		{
			out = *ptr--;
   80dec:	e0bffe17 	ldw	r2,-8(fp)
   80df0:	10ffffc4 	addi	r3,r2,-1
   80df4:	e0fffe15 	stw	r3,-8(fp)
   80df8:	10800003 	ldbu	r2,0(r2)
   80dfc:	e0bfff85 	stb	r2,-2(fp)
			SEND1(out);
   80e00:	e0bfff83 	ldbu	r2,-2(fp)
   80e04:	1009883a 	mov	r4,r2
   80e08:	0080f7c0 	call	80f7c <SEND1>
			if (out == 0xff)
   80e0c:	e0bfff83 	ldbu	r2,-2(fp)
   80e10:	10803fd8 	cmpnei	r2,r2,255
   80e14:	1000021e 	bne	r2,zero,80e20 <close_bitstream+0x94>
				SEND1(0);
   80e18:	0009883a 	mov	r4,zero
   80e1c:	0080f7c0 	call	80f7c <SEND1>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (UINT8 *)&lcode + 3;

		for (i = count; i > 0; i--)
   80e20:	e0bffd0b 	ldhu	r2,-12(fp)
   80e24:	10bfffc4 	addi	r2,r2,-1
   80e28:	e0bffd0d 	sth	r2,-12(fp)
   80e2c:	e0bffd0b 	ldhu	r2,-12(fp)
   80e30:	103fee1e 	bne	r2,zero,80dec <_gp+0xffff54c8>
				SEND1(0);
		}
	}

	// End of image marker
	SEND1(0xFF);
   80e34:	01003fc4 	movi	r4,255
   80e38:	0080f7c0 	call	80f7c <SEND1>
	SEND1(0xD9);
   80e3c:	01003644 	movi	r4,217
   80e40:	0080f7c0 	call	80f7c <SEND1>
}
   80e44:	0001883a 	nop
   80e48:	e037883a 	mov	sp,fp
   80e4c:	dfc00117 	ldw	ra,4(sp)
   80e50:	df000017 	ldw	fp,0(sp)
   80e54:	dec00204 	addi	sp,sp,8
   80e58:	f800283a 	ret

00080e5c <main>:

int main(void)
{
   80e5c:	defffb04 	addi	sp,sp,-20
   80e60:	dfc00415 	stw	ra,16(sp)
   80e64:	df000315 	stw	fp,12(sp)
   80e68:	df000304 	addi	fp,sp,12
	

	while (1)
	{

		lcode = 0;
   80e6c:	d022e615 	stw	zero,-29800(gp)
		bitindex = 0;
   80e70:	d022e70d 	sth	zero,-29796(gp)
		ldc1 = 0;
   80e74:	d022e78d 	sth	zero,-29794(gp)
		ldc2 = 0;
   80e78:	d022e80d 	sth	zero,-29792(gp)
		ldc3 = 0;
   80e7c:	d022e88d 	sth	zero,-29790(gp)

		UINT32 width = (UINT32)RECV1();
   80e80:	0080ef40 	call	80ef4 <RECV1>
   80e84:	e0bffe15 	stw	r2,-8(fp)
		UINT32 height = (UINT32)RECV1();
   80e88:	0080ef40 	call	80ef4 <RECV1>
   80e8c:	e0bfff15 	stw	r2,-4(fp)
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
   80e90:	0080ef40 	call	80ef4 <RECV1>
   80e94:	e0bffd15 	stw	r2,-12(fp)
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
   80e98:	e17fff17 	ldw	r5,-4(fp)
   80e9c:	e13ffe17 	ldw	r4,-8(fp)
   80ea0:	008026c0 	call	8026c <write_markers>
		// asm("dummy");
		for (; count > 0; count--)
   80ea4:	00000906 	br	80ecc <main+0x70>
		{
			huffman(1);
   80ea8:	01000044 	movi	r4,1
   80eac:	008053c0 	call	8053c <huffman>
			huffman(2);
   80eb0:	01000084 	movi	r4,2
   80eb4:	008053c0 	call	8053c <huffman>
			huffman(3);
   80eb8:	010000c4 	movi	r4,3
   80ebc:	008053c0 	call	8053c <huffman>
		UINT32 height = (UINT32)RECV1();
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
		// asm("dummy");
		for (; count > 0; count--)
   80ec0:	e0bffd17 	ldw	r2,-12(fp)
   80ec4:	10bfffc4 	addi	r2,r2,-1
   80ec8:	e0bffd15 	stw	r2,-12(fp)
   80ecc:	e0bffd17 	ldw	r2,-12(fp)
   80ed0:	103ff51e 	bne	r2,zero,80ea8 <_gp+0xffff5584>
			huffman(3);
			//	#pragma flush //added by haris
			// asm("dummy");
		}
		// fprintf(stderr,"Closing bitstream\n");
		close_bitstream();
   80ed4:	0080d8c0 	call	80d8c <close_bitstream>
		// SET_DONE();

		// TODO: Send the DONE flag to the next stage
		// TODO: Not used you can fully ignore this queue
		// SEND2(1);
		break;
   80ed8:	0001883a 	nop

	// TODO: Close the queues


//	printf("\n Finished !\n");
	return 0;
   80edc:	0005883a 	mov	r2,zero
}
   80ee0:	e037883a 	mov	sp,fp
   80ee4:	dfc00117 	ldw	ra,4(sp)
   80ee8:	df000017 	ldw	fp,0(sp)
   80eec:	dec00204 	addi	sp,sp,8
   80ef0:	f800283a 	ret

00080ef4 <RECV1>:

#include "../lib/q_mem_obj_def.h"
#include "../lib/queue.h"

int RECV1()
{
   80ef4:	defffd04 	addi	sp,sp,-12
   80ef8:	dfc00215 	stw	ra,8(sp)
   80efc:	df000115 	stw	fp,4(sp)
   80f00:	df000104 	addi	fp,sp,4
	// dequeue from queue and convert to int
	// return atoi(dequeue(q5r));
	int temp = dequeueINT32(q5);
   80f04:	00800234 	movhi	r2,8
   80f08:	108d9604 	addi	r2,r2,13912
   80f0c:	11000017 	ldw	r4,0(r2)
   80f10:	11400117 	ldw	r5,4(r2)
   80f14:	11800217 	ldw	r6,8(r2)
   80f18:	00810340 	call	81034 <dequeueINT32>
   80f1c:	e0bfff15 	stw	r2,-4(fp)
//	printf("Got %d from q5.\n",temp);
	return temp;
   80f20:	e0bfff17 	ldw	r2,-4(fp)
}
   80f24:	e037883a 	mov	sp,fp
   80f28:	dfc00117 	ldw	ra,4(sp)
   80f2c:	df000017 	ldw	fp,0(sp)
   80f30:	dec00204 	addi	sp,sp,8
   80f34:	f800283a 	ret

00080f38 <RECV2>:

int RECV2()
{
   80f38:	defffd04 	addi	sp,sp,-12
   80f3c:	dfc00215 	stw	ra,8(sp)
   80f40:	df000115 	stw	fp,4(sp)
   80f44:	df000104 	addi	fp,sp,4
    // dequeue from queue and convert to int
    // return atoi(dequeue(qi1d));
	int temp = dequeueINT32(q1d);
   80f48:	00800234 	movhi	r2,8
   80f4c:	108d8404 	addi	r2,r2,13840
   80f50:	11000017 	ldw	r4,0(r2)
   80f54:	11400117 	ldw	r5,4(r2)
   80f58:	11800217 	ldw	r6,8(r2)
   80f5c:	00810340 	call	81034 <dequeueINT32>
   80f60:	e0bfff15 	stw	r2,-4(fp)
//	printf("Got %d from q1d.\n",temp);
	return temp;
   80f64:	e0bfff17 	ldw	r2,-4(fp)
}
   80f68:	e037883a 	mov	sp,fp
   80f6c:	dfc00117 	ldw	ra,4(sp)
   80f70:	df000017 	ldw	fp,0(sp)
   80f74:	dec00204 	addi	sp,sp,8
   80f78:	f800283a 	ret

00080f7c <SEND1>:

void SEND1(int data)
{
   80f7c:	defffd04 	addi	sp,sp,-12
   80f80:	dfc00215 	stw	ra,8(sp)
   80f84:	df000115 	stw	fp,4(sp)
   80f88:	df000104 	addi	fp,sp,4
   80f8c:	e13fff15 	stw	r4,-4(fp)
    // enqueue data to queue
    // char str[10];
    // sprintf(str, "%d", data);
    // enqueueINT32(qo1e, str);
//	printf("Sent %d\n",data);
    enqueueINT32(q1e, data);
   80f90:	00800234 	movhi	r2,8
   80f94:	108d8704 	addi	r2,r2,13852
   80f98:	e1ffff17 	ldw	r7,-4(fp)
   80f9c:	11000017 	ldw	r4,0(r2)
   80fa0:	11400117 	ldw	r5,4(r2)
   80fa4:	11800217 	ldw	r6,8(r2)
   80fa8:	0080fc40 	call	80fc4 <enqueueINT32>
}
   80fac:	0001883a 	nop
   80fb0:	e037883a 	mov	sp,fp
   80fb4:	dfc00117 	ldw	ra,4(sp)
   80fb8:	df000017 	ldw	fp,0(sp)
   80fbc:	dec00204 	addi	sp,sp,8
   80fc0:	f800283a 	ret

00080fc4 <enqueueINT32>:

//int INIT_USAGE_ENQ = 0;
//int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   80fc4:	defffa04 	addi	sp,sp,-24
   80fc8:	dfc00515 	stw	ra,20(sp)
   80fcc:	df000415 	stw	fp,16(sp)
   80fd0:	df000404 	addi	fp,sp,16
   80fd4:	e13ffc15 	stw	r4,-16(fp)
   80fd8:	e17ffd15 	stw	r5,-12(fp)
   80fdc:	e1bffe15 	stw	r6,-8(fp)
   80fe0:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   80fe4:	0001883a 	nop
   80fe8:	e0bffe17 	ldw	r2,-8(fp)
   80fec:	01400044 	movi	r5,1
   80ff0:	1009883a 	mov	r4,r2
   80ff4:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   80ff8:	103ffb1e 	bne	r2,zero,80fe8 <_gp+0xffff56c4>
//        INIT_USAGE_ENQ = 1;
//        printf("First time using enqueueINT32\n");
//    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   80ffc:	e0bffc17 	ldw	r2,-16(fp)
   81000:	1007883a 	mov	r3,r2
   81004:	e0bffe17 	ldw	r2,-8(fp)
   81008:	1009883a 	mov	r4,r2
   8100c:	e0bfff17 	ldw	r2,-4(fp)
   81010:	100d883a 	mov	r6,r2
   81014:	200b883a 	mov	r5,r4
   81018:	1809883a 	mov	r4,r3
   8101c:	00816340 	call	81634 <altera_avalon_fifo_write_fifo>
}
   81020:	e037883a 	mov	sp,fp
   81024:	dfc00117 	ldw	ra,4(sp)
   81028:	df000017 	ldw	fp,0(sp)
   8102c:	dec00204 	addi	sp,sp,8
   81030:	f800283a 	ret

00081034 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   81034:	defffa04 	addi	sp,sp,-24
   81038:	dfc00515 	stw	ra,20(sp)
   8103c:	df000415 	stw	fp,16(sp)
   81040:	df000404 	addi	fp,sp,16
   81044:	e13ffd15 	stw	r4,-12(fp)
   81048:	e17ffe15 	stw	r5,-8(fp)
   8104c:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   81050:	0001883a 	nop
   81054:	e0bfff17 	ldw	r2,-4(fp)
   81058:	01400084 	movi	r5,2
   8105c:	1009883a 	mov	r4,r2
   81060:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   81064:	103ffb1e 	bne	r2,zero,81054 <_gp+0xffff5730>
//        INIT_USAGE_DEQ = 1;
//        printf("First time using dequeueINT32\n");
//    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   81068:	e0bffe17 	ldw	r2,-8(fp)
   8106c:	1007883a 	mov	r3,r2
   81070:	e0bfff17 	ldw	r2,-4(fp)
   81074:	100b883a 	mov	r5,r2
   81078:	1809883a 	mov	r4,r3
   8107c:	00816f80 	call	816f8 <altera_avalon_fifo_read_fifo>
   81080:	e0bffc15 	stw	r2,-16(fp)

	return data;
   81084:	e0bffc17 	ldw	r2,-16(fp)
}
   81088:	e037883a 	mov	sp,fp
   8108c:	dfc00117 	ldw	ra,4(sp)
   81090:	df000017 	ldw	fp,0(sp)
   81094:	dec00204 	addi	sp,sp,8
   81098:	f800283a 	ret

0008109c <__mulsi3>:
   8109c:	0005883a 	mov	r2,zero
   810a0:	20000726 	beq	r4,zero,810c0 <__mulsi3+0x24>
   810a4:	20c0004c 	andi	r3,r4,1
   810a8:	2008d07a 	srli	r4,r4,1
   810ac:	18000126 	beq	r3,zero,810b4 <__mulsi3+0x18>
   810b0:	1145883a 	add	r2,r2,r5
   810b4:	294b883a 	add	r5,r5,r5
   810b8:	203ffa1e 	bne	r4,zero,810a4 <_gp+0xffff5780>
   810bc:	f800283a 	ret
   810c0:	f800283a 	ret

000810c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   810c4:	defffc04 	addi	sp,sp,-16
   810c8:	df000315 	stw	fp,12(sp)
   810cc:	df000304 	addi	fp,sp,12
   810d0:	e13ffd15 	stw	r4,-12(fp)
   810d4:	e17ffe15 	stw	r5,-8(fp)
   810d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   810dc:	e0fffe17 	ldw	r3,-8(fp)
   810e0:	e0bffd17 	ldw	r2,-12(fp)
   810e4:	18800c26 	beq	r3,r2,81118 <alt_load_section+0x54>
  {
    while( to != end )
   810e8:	00000806 	br	8110c <alt_load_section+0x48>
    {
      *to++ = *from++;
   810ec:	e0bffe17 	ldw	r2,-8(fp)
   810f0:	10c00104 	addi	r3,r2,4
   810f4:	e0fffe15 	stw	r3,-8(fp)
   810f8:	e0fffd17 	ldw	r3,-12(fp)
   810fc:	19000104 	addi	r4,r3,4
   81100:	e13ffd15 	stw	r4,-12(fp)
   81104:	18c00017 	ldw	r3,0(r3)
   81108:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8110c:	e0fffe17 	ldw	r3,-8(fp)
   81110:	e0bfff17 	ldw	r2,-4(fp)
   81114:	18bff51e 	bne	r3,r2,810ec <_gp+0xffff57c8>
    {
      *to++ = *from++;
    }
  }
}
   81118:	0001883a 	nop
   8111c:	e037883a 	mov	sp,fp
   81120:	df000017 	ldw	fp,0(sp)
   81124:	dec00104 	addi	sp,sp,4
   81128:	f800283a 	ret

0008112c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8112c:	defffe04 	addi	sp,sp,-8
   81130:	dfc00115 	stw	ra,4(sp)
   81134:	df000015 	stw	fp,0(sp)
   81138:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8113c:	01800234 	movhi	r6,8
   81140:	318e5404 	addi	r6,r6,14672
   81144:	01400234 	movhi	r5,8
   81148:	294b7904 	addi	r5,r5,11748
   8114c:	01000234 	movhi	r4,8
   81150:	210e5404 	addi	r4,r4,14672
   81154:	00810c40 	call	810c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   81158:	01800234 	movhi	r6,8
   8115c:	31808c04 	addi	r6,r6,560
   81160:	01400234 	movhi	r5,8
   81164:	29400804 	addi	r5,r5,32
   81168:	01000234 	movhi	r4,8
   8116c:	21000804 	addi	r4,r4,32
   81170:	00810c40 	call	810c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   81174:	01800234 	movhi	r6,8
   81178:	318b7904 	addi	r6,r6,11748
   8117c:	01400234 	movhi	r5,8
   81180:	294b6c04 	addi	r5,r5,11696
   81184:	01000234 	movhi	r4,8
   81188:	210b6c04 	addi	r4,r4,11696
   8118c:	00810c40 	call	810c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   81190:	0081c400 	call	81c40 <alt_dcache_flush_all>
  alt_icache_flush_all();
   81194:	0081e2c0 	call	81e2c <alt_icache_flush_all>
}
   81198:	0001883a 	nop
   8119c:	e037883a 	mov	sp,fp
   811a0:	dfc00117 	ldw	ra,4(sp)
   811a4:	df000017 	ldw	fp,0(sp)
   811a8:	dec00204 	addi	sp,sp,8
   811ac:	f800283a 	ret

000811b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   811b0:	defffd04 	addi	sp,sp,-12
   811b4:	dfc00215 	stw	ra,8(sp)
   811b8:	df000115 	stw	fp,4(sp)
   811bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   811c0:	0009883a 	mov	r4,zero
   811c4:	00812600 	call	81260 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   811c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   811cc:	00812980 	call	81298 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   811d0:	01800234 	movhi	r6,8
   811d4:	318b6c04 	addi	r6,r6,11696
   811d8:	01400234 	movhi	r5,8
   811dc:	294b6c04 	addi	r5,r5,11696
   811e0:	01000234 	movhi	r4,8
   811e4:	210b6c04 	addi	r4,r4,11696
   811e8:	00821d00 	call	821d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   811ec:	0081d6c0 	call	81d6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   811f0:	01000234 	movhi	r4,8
   811f4:	21077304 	addi	r4,r4,7628
   811f8:	0082a140 	call	82a14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   811fc:	d0a2e917 	ldw	r2,-29788(gp)
   81200:	d0e2ea17 	ldw	r3,-29784(gp)
   81204:	d122eb17 	ldw	r4,-29780(gp)
   81208:	200d883a 	mov	r6,r4
   8120c:	180b883a 	mov	r5,r3
   81210:	1009883a 	mov	r4,r2
   81214:	0080e5c0 	call	80e5c <main>
   81218:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8121c:	01000044 	movi	r4,1
   81220:	0081b680 	call	81b68 <close>
  exit (result);
   81224:	e13fff17 	ldw	r4,-4(fp)
   81228:	0082a280 	call	82a28 <exit>

0008122c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8122c:	defffd04 	addi	sp,sp,-12
   81230:	dfc00215 	stw	ra,8(sp)
   81234:	df000115 	stw	fp,4(sp)
   81238:	df000104 	addi	fp,sp,4
   8123c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   81240:	d1600204 	addi	r5,gp,-32760
   81244:	e13fff17 	ldw	r4,-4(fp)
   81248:	0081cc80 	call	81cc8 <alt_dev_llist_insert>
}
   8124c:	e037883a 	mov	sp,fp
   81250:	dfc00117 	ldw	ra,4(sp)
   81254:	df000017 	ldw	fp,0(sp)
   81258:	dec00204 	addi	sp,sp,8
   8125c:	f800283a 	ret

00081260 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   81260:	defffd04 	addi	sp,sp,-12
   81264:	dfc00215 	stw	ra,8(sp)
   81268:	df000115 	stw	fp,4(sp)
   8126c:	df000104 	addi	fp,sp,4
   81270:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1E, cpu_1e);
   81274:	00826f80 	call	826f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   81278:	00800044 	movi	r2,1
   8127c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   81280:	0001883a 	nop
   81284:	e037883a 	mov	sp,fp
   81288:	dfc00117 	ldw	ra,4(sp)
   8128c:	df000017 	ldw	fp,0(sp)
   81290:	dec00204 	addi	sp,sp,8
   81294:	f800283a 	ret

00081298 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   81298:	defffe04 	addi	sp,sp,-8
   8129c:	dfc00115 	stw	ra,4(sp)
   812a0:	df000015 	stw	fp,0(sp)
   812a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1E, timer_1e);
   812a8:	01c0fa04 	movi	r7,1000
   812ac:	01800044 	movi	r6,1
   812b0:	000b883a 	mov	r5,zero
   812b4:	01020034 	movhi	r4,2048
   812b8:	21041804 	addi	r4,r4,4192
   812bc:	0081ab00 	call	81ab0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1D, fifo_1d);
   812c0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   812c4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_5, fifo_q_5);
   812c8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1E, jtag_uart_1e);
   812cc:	01000234 	movhi	r4,8
   812d0:	210d9c04 	addi	r4,r4,13936
   812d4:	008122c0 	call	8122c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1E, sysid_1e);
   812d8:	0001883a 	nop
}
   812dc:	0001883a 	nop
   812e0:	e037883a 	mov	sp,fp
   812e4:	dfc00117 	ldw	ra,4(sp)
   812e8:	df000017 	ldw	fp,0(sp)
   812ec:	dec00204 	addi	sp,sp,8
   812f0:	f800283a 	ret

000812f4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   812f4:	defffa04 	addi	sp,sp,-24
   812f8:	dfc00515 	stw	ra,20(sp)
   812fc:	df000415 	stw	fp,16(sp)
   81300:	df000404 	addi	fp,sp,16
   81304:	e13ffc15 	stw	r4,-16(fp)
   81308:	e17ffd15 	stw	r5,-12(fp)
   8130c:	e1bffe15 	stw	r6,-8(fp)
   81310:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   81314:	01400fc4 	movi	r5,63
   81318:	e13ffc17 	ldw	r4,-16(fp)
   8131c:	00814c00 	call	814c0 <altera_avalon_fifo_clear_event>
   81320:	10000226 	beq	r2,zero,8132c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   81324:	00bfffc4 	movi	r2,-1
   81328:	00001306 	br	81378 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   8132c:	e17ffd17 	ldw	r5,-12(fp)
   81330:	e13ffc17 	ldw	r4,-16(fp)
   81334:	00815200 	call	81520 <altera_avalon_fifo_write_ienable>
   81338:	10000226 	beq	r2,zero,81344 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   8133c:	00bfff84 	movi	r2,-2
   81340:	00000d06 	br	81378 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   81344:	e17fff17 	ldw	r5,-4(fp)
   81348:	e13ffc17 	ldw	r4,-16(fp)
   8134c:	008157c0 	call	8157c <altera_avalon_fifo_write_almostfull>
   81350:	10000226 	beq	r2,zero,8135c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   81354:	00bfff44 	movi	r2,-3
   81358:	00000706 	br	81378 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   8135c:	e17ffe17 	ldw	r5,-8(fp)
   81360:	e13ffc17 	ldw	r4,-16(fp)
   81364:	00815d80 	call	815d8 <altera_avalon_fifo_write_almostempty>
   81368:	10000226 	beq	r2,zero,81374 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   8136c:	00bfff44 	movi	r2,-3
   81370:	00000106 	br	81378 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   81374:	0005883a 	mov	r2,zero
}
   81378:	e037883a 	mov	sp,fp
   8137c:	dfc00117 	ldw	ra,4(sp)
   81380:	df000017 	ldw	fp,0(sp)
   81384:	dec00204 	addi	sp,sp,8
   81388:	f800283a 	ret

0008138c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   8138c:	defffd04 	addi	sp,sp,-12
   81390:	df000215 	stw	fp,8(sp)
   81394:	df000204 	addi	fp,sp,8
   81398:	e13ffe15 	stw	r4,-8(fp)
   8139c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   813a0:	e0bffe17 	ldw	r2,-8(fp)
   813a4:	10800104 	addi	r2,r2,4
   813a8:	10800037 	ldwio	r2,0(r2)
   813ac:	1007883a 	mov	r3,r2
   813b0:	e0bfff17 	ldw	r2,-4(fp)
   813b4:	1884703a 	and	r2,r3,r2
}
   813b8:	e037883a 	mov	sp,fp
   813bc:	df000017 	ldw	fp,0(sp)
   813c0:	dec00104 	addi	sp,sp,4
   813c4:	f800283a 	ret

000813c8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   813c8:	defffd04 	addi	sp,sp,-12
   813cc:	df000215 	stw	fp,8(sp)
   813d0:	df000204 	addi	fp,sp,8
   813d4:	e13ffe15 	stw	r4,-8(fp)
   813d8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   813dc:	e0bffe17 	ldw	r2,-8(fp)
   813e0:	10800304 	addi	r2,r2,12
   813e4:	10800037 	ldwio	r2,0(r2)
   813e8:	1007883a 	mov	r3,r2
   813ec:	e0bfff17 	ldw	r2,-4(fp)
   813f0:	1884703a 	and	r2,r3,r2
}
   813f4:	e037883a 	mov	sp,fp
   813f8:	df000017 	ldw	fp,0(sp)
   813fc:	dec00104 	addi	sp,sp,4
   81400:	f800283a 	ret

00081404 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   81404:	defffe04 	addi	sp,sp,-8
   81408:	df000115 	stw	fp,4(sp)
   8140c:	df000104 	addi	fp,sp,4
   81410:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   81414:	e0bfff17 	ldw	r2,-4(fp)
   81418:	10800404 	addi	r2,r2,16
   8141c:	10800037 	ldwio	r2,0(r2)
}
   81420:	e037883a 	mov	sp,fp
   81424:	df000017 	ldw	fp,0(sp)
   81428:	dec00104 	addi	sp,sp,4
   8142c:	f800283a 	ret

00081430 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   81430:	defffe04 	addi	sp,sp,-8
   81434:	df000115 	stw	fp,4(sp)
   81438:	df000104 	addi	fp,sp,4
   8143c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   81440:	e0bfff17 	ldw	r2,-4(fp)
   81444:	10800504 	addi	r2,r2,20
   81448:	10800037 	ldwio	r2,0(r2)
}
   8144c:	e037883a 	mov	sp,fp
   81450:	df000017 	ldw	fp,0(sp)
   81454:	dec00104 	addi	sp,sp,4
   81458:	f800283a 	ret

0008145c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   8145c:	defffd04 	addi	sp,sp,-12
   81460:	df000215 	stw	fp,8(sp)
   81464:	df000204 	addi	fp,sp,8
   81468:	e13ffe15 	stw	r4,-8(fp)
   8146c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   81470:	e0bffe17 	ldw	r2,-8(fp)
   81474:	10800204 	addi	r2,r2,8
   81478:	10800037 	ldwio	r2,0(r2)
   8147c:	1007883a 	mov	r3,r2
   81480:	e0bfff17 	ldw	r2,-4(fp)
   81484:	1884703a 	and	r2,r3,r2
}
   81488:	e037883a 	mov	sp,fp
   8148c:	df000017 	ldw	fp,0(sp)
   81490:	dec00104 	addi	sp,sp,4
   81494:	f800283a 	ret

00081498 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   81498:	defffe04 	addi	sp,sp,-8
   8149c:	df000115 	stw	fp,4(sp)
   814a0:	df000104 	addi	fp,sp,4
   814a4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   814a8:	e0bfff17 	ldw	r2,-4(fp)
   814ac:	10800037 	ldwio	r2,0(r2)
}
   814b0:	e037883a 	mov	sp,fp
   814b4:	df000017 	ldw	fp,0(sp)
   814b8:	dec00104 	addi	sp,sp,4
   814bc:	f800283a 	ret

000814c0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   814c0:	defffd04 	addi	sp,sp,-12
   814c4:	df000215 	stw	fp,8(sp)
   814c8:	df000204 	addi	fp,sp,8
   814cc:	e13ffe15 	stw	r4,-8(fp)
   814d0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   814d4:	e0bffe17 	ldw	r2,-8(fp)
   814d8:	10800204 	addi	r2,r2,8
   814dc:	1007883a 	mov	r3,r2
   814e0:	e0bfff17 	ldw	r2,-4(fp)
   814e4:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   814e8:	e0bffe17 	ldw	r2,-8(fp)
   814ec:	10800204 	addi	r2,r2,8
   814f0:	10800037 	ldwio	r2,0(r2)
   814f4:	1007883a 	mov	r3,r2
   814f8:	e0bfff17 	ldw	r2,-4(fp)
   814fc:	1884703a 	and	r2,r3,r2
   81500:	1000021e 	bne	r2,zero,8150c <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   81504:	0005883a 	mov	r2,zero
   81508:	00000106 	br	81510 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   8150c:	00bfffc4 	movi	r2,-1
}
   81510:	e037883a 	mov	sp,fp
   81514:	df000017 	ldw	fp,0(sp)
   81518:	dec00104 	addi	sp,sp,4
   8151c:	f800283a 	ret

00081520 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   81520:	defffd04 	addi	sp,sp,-12
   81524:	df000215 	stw	fp,8(sp)
   81528:	df000204 	addi	fp,sp,8
   8152c:	e13ffe15 	stw	r4,-8(fp)
   81530:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   81534:	e0bffe17 	ldw	r2,-8(fp)
   81538:	10800304 	addi	r2,r2,12
   8153c:	1007883a 	mov	r3,r2
   81540:	e0bfff17 	ldw	r2,-4(fp)
   81544:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   81548:	e0bffe17 	ldw	r2,-8(fp)
   8154c:	10800304 	addi	r2,r2,12
   81550:	10800037 	ldwio	r2,0(r2)
   81554:	1007883a 	mov	r3,r2
   81558:	e0bfff17 	ldw	r2,-4(fp)
   8155c:	1880021e 	bne	r3,r2,81568 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   81560:	0005883a 	mov	r2,zero
   81564:	00000106 	br	8156c <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   81568:	00bfff84 	movi	r2,-2
}
   8156c:	e037883a 	mov	sp,fp
   81570:	df000017 	ldw	fp,0(sp)
   81574:	dec00104 	addi	sp,sp,4
   81578:	f800283a 	ret

0008157c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   8157c:	defffd04 	addi	sp,sp,-12
   81580:	df000215 	stw	fp,8(sp)
   81584:	df000204 	addi	fp,sp,8
   81588:	e13ffe15 	stw	r4,-8(fp)
   8158c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   81590:	e0bffe17 	ldw	r2,-8(fp)
   81594:	10800404 	addi	r2,r2,16
   81598:	1007883a 	mov	r3,r2
   8159c:	e0bfff17 	ldw	r2,-4(fp)
   815a0:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   815a4:	e0bffe17 	ldw	r2,-8(fp)
   815a8:	10800404 	addi	r2,r2,16
   815ac:	10800037 	ldwio	r2,0(r2)
   815b0:	1007883a 	mov	r3,r2
   815b4:	e0bfff17 	ldw	r2,-4(fp)
   815b8:	1880021e 	bne	r3,r2,815c4 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   815bc:	0005883a 	mov	r2,zero
   815c0:	00000106 	br	815c8 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   815c4:	00bfff44 	movi	r2,-3
}
   815c8:	e037883a 	mov	sp,fp
   815cc:	df000017 	ldw	fp,0(sp)
   815d0:	dec00104 	addi	sp,sp,4
   815d4:	f800283a 	ret

000815d8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   815d8:	defffd04 	addi	sp,sp,-12
   815dc:	df000215 	stw	fp,8(sp)
   815e0:	df000204 	addi	fp,sp,8
   815e4:	e13ffe15 	stw	r4,-8(fp)
   815e8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   815ec:	e0bffe17 	ldw	r2,-8(fp)
   815f0:	10800504 	addi	r2,r2,20
   815f4:	1007883a 	mov	r3,r2
   815f8:	e0bfff17 	ldw	r2,-4(fp)
   815fc:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   81600:	e0bffe17 	ldw	r2,-8(fp)
   81604:	10800504 	addi	r2,r2,20
   81608:	10800037 	ldwio	r2,0(r2)
   8160c:	1007883a 	mov	r3,r2
   81610:	e0bfff17 	ldw	r2,-4(fp)
   81614:	1880021e 	bne	r3,r2,81620 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   81618:	0005883a 	mov	r2,zero
   8161c:	00000106 	br	81624 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   81620:	00bfff44 	movi	r2,-3
}
   81624:	e037883a 	mov	sp,fp
   81628:	df000017 	ldw	fp,0(sp)
   8162c:	dec00104 	addi	sp,sp,4
   81630:	f800283a 	ret

00081634 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   81634:	defffb04 	addi	sp,sp,-20
   81638:	dfc00415 	stw	ra,16(sp)
   8163c:	df000315 	stw	fp,12(sp)
   81640:	df000304 	addi	fp,sp,12
   81644:	e13ffd15 	stw	r4,-12(fp)
   81648:	e17ffe15 	stw	r5,-8(fp)
   8164c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   81650:	01400044 	movi	r5,1
   81654:	e13ffe17 	ldw	r4,-8(fp)
   81658:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   8165c:	1000051e 	bne	r2,zero,81674 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   81660:	e0bffd17 	ldw	r2,-12(fp)
   81664:	e0ffff17 	ldw	r3,-4(fp)
   81668:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   8166c:	0005883a 	mov	r2,zero
   81670:	00000106 	br	81678 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   81674:	00bfff04 	movi	r2,-4
    }
}
   81678:	e037883a 	mov	sp,fp
   8167c:	dfc00117 	ldw	ra,4(sp)
   81680:	df000017 	ldw	fp,0(sp)
   81684:	dec00204 	addi	sp,sp,8
   81688:	f800283a 	ret

0008168c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   8168c:	defffa04 	addi	sp,sp,-24
   81690:	dfc00515 	stw	ra,20(sp)
   81694:	df000415 	stw	fp,16(sp)
   81698:	df000404 	addi	fp,sp,16
   8169c:	e13ffd15 	stw	r4,-12(fp)
   816a0:	e17ffe15 	stw	r5,-8(fp)
   816a4:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   816a8:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   816ac:	e0bfff17 	ldw	r2,-4(fp)
   816b0:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   816b4:	01400084 	movi	r5,2
   816b8:	e13ffe17 	ldw	r4,-8(fp)
   816bc:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   816c0:	1000071e 	bne	r2,zero,816e0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   816c4:	e13ffe17 	ldw	r4,-8(fp)
   816c8:	00814980 	call	81498 <altera_avalon_fifo_read_level>
   816cc:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   816d0:	e0bffd17 	ldw	r2,-12(fp)
   816d4:	10c00037 	ldwio	r3,0(r2)
   816d8:	e0bfff17 	ldw	r2,-4(fp)
   816dc:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   816e0:	e0bffc17 	ldw	r2,-16(fp)
}
   816e4:	e037883a 	mov	sp,fp
   816e8:	dfc00117 	ldw	ra,4(sp)
   816ec:	df000017 	ldw	fp,0(sp)
   816f0:	dec00204 	addi	sp,sp,8
   816f4:	f800283a 	ret

000816f8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   816f8:	defffc04 	addi	sp,sp,-16
   816fc:	dfc00315 	stw	ra,12(sp)
   81700:	df000215 	stw	fp,8(sp)
   81704:	df000204 	addi	fp,sp,8
   81708:	e13ffe15 	stw	r4,-8(fp)
   8170c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   81710:	01400084 	movi	r5,2
   81714:	e13fff17 	ldw	r4,-4(fp)
   81718:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   8171c:	1000031e 	bne	r2,zero,8172c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   81720:	e0bffe17 	ldw	r2,-8(fp)
   81724:	10800037 	ldwio	r2,0(r2)
   81728:	00000106 	br	81730 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   8172c:	0005883a 	mov	r2,zero
}
   81730:	e037883a 	mov	sp,fp
   81734:	dfc00117 	ldw	ra,4(sp)
   81738:	df000017 	ldw	fp,0(sp)
   8173c:	dec00204 	addi	sp,sp,8
   81740:	f800283a 	ret

00081744 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   81744:	defffb04 	addi	sp,sp,-20
   81748:	dfc00415 	stw	ra,16(sp)
   8174c:	df000315 	stw	fp,12(sp)
   81750:	df000304 	addi	fp,sp,12
   81754:	e13ffd15 	stw	r4,-12(fp)
   81758:	e17ffe15 	stw	r5,-8(fp)
   8175c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   81760:	01400044 	movi	r5,1
   81764:	e13ffe17 	ldw	r4,-8(fp)
   81768:	008138c0 	call	8138c <altera_avalon_fifo_read_status>
   8176c:	1000071e 	bne	r2,zero,8178c <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   81770:	e0bffd17 	ldw	r2,-12(fp)
   81774:	10800104 	addi	r2,r2,4
   81778:	1007883a 	mov	r3,r2
   8177c:	e0bfff17 	ldw	r2,-4(fp)
   81780:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   81784:	0005883a 	mov	r2,zero
   81788:	00000106 	br	81790 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   8178c:	00bfff04 	movi	r2,-4
    }
}
   81790:	e037883a 	mov	sp,fp
   81794:	dfc00117 	ldw	ra,4(sp)
   81798:	df000017 	ldw	fp,0(sp)
   8179c:	dec00204 	addi	sp,sp,8
   817a0:	f800283a 	ret

000817a4 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   817a4:	defffe04 	addi	sp,sp,-8
   817a8:	df000115 	stw	fp,4(sp)
   817ac:	df000104 	addi	fp,sp,4
   817b0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   817b4:	e0bfff17 	ldw	r2,-4(fp)
   817b8:	10800104 	addi	r2,r2,4
   817bc:	10800037 	ldwio	r2,0(r2)
}
   817c0:	e037883a 	mov	sp,fp
   817c4:	df000017 	ldw	fp,0(sp)
   817c8:	dec00104 	addi	sp,sp,4
   817cc:	f800283a 	ret

000817d0 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   817d0:	defffe04 	addi	sp,sp,-8
   817d4:	df000115 	stw	fp,4(sp)
   817d8:	df000104 	addi	fp,sp,4
   817dc:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   817e0:	e0bfff17 	ldw	r2,-4(fp)
   817e4:	10800037 	ldwio	r2,0(r2)
}
   817e8:	e037883a 	mov	sp,fp
   817ec:	df000017 	ldw	fp,0(sp)
   817f0:	dec00104 	addi	sp,sp,4
   817f4:	f800283a 	ret

000817f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   817f8:	defffa04 	addi	sp,sp,-24
   817fc:	dfc00515 	stw	ra,20(sp)
   81800:	df000415 	stw	fp,16(sp)
   81804:	df000404 	addi	fp,sp,16
   81808:	e13ffd15 	stw	r4,-12(fp)
   8180c:	e17ffe15 	stw	r5,-8(fp)
   81810:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81814:	e0bffd17 	ldw	r2,-12(fp)
   81818:	10800017 	ldw	r2,0(r2)
   8181c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   81820:	e0bffc17 	ldw	r2,-16(fp)
   81824:	10c00a04 	addi	r3,r2,40
   81828:	e0bffd17 	ldw	r2,-12(fp)
   8182c:	10800217 	ldw	r2,8(r2)
   81830:	100f883a 	mov	r7,r2
   81834:	e1bfff17 	ldw	r6,-4(fp)
   81838:	e17ffe17 	ldw	r5,-8(fp)
   8183c:	1809883a 	mov	r4,r3
   81840:	00818b80 	call	818b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   81844:	e037883a 	mov	sp,fp
   81848:	dfc00117 	ldw	ra,4(sp)
   8184c:	df000017 	ldw	fp,0(sp)
   81850:	dec00204 	addi	sp,sp,8
   81854:	f800283a 	ret

00081858 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81858:	defffa04 	addi	sp,sp,-24
   8185c:	dfc00515 	stw	ra,20(sp)
   81860:	df000415 	stw	fp,16(sp)
   81864:	df000404 	addi	fp,sp,16
   81868:	e13ffd15 	stw	r4,-12(fp)
   8186c:	e17ffe15 	stw	r5,-8(fp)
   81870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81874:	e0bffd17 	ldw	r2,-12(fp)
   81878:	10800017 	ldw	r2,0(r2)
   8187c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   81880:	e0bffc17 	ldw	r2,-16(fp)
   81884:	10c00a04 	addi	r3,r2,40
   81888:	e0bffd17 	ldw	r2,-12(fp)
   8188c:	10800217 	ldw	r2,8(r2)
   81890:	100f883a 	mov	r7,r2
   81894:	e1bfff17 	ldw	r6,-4(fp)
   81898:	e17ffe17 	ldw	r5,-8(fp)
   8189c:	1809883a 	mov	r4,r3
   818a0:	00819a40 	call	819a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   818a4:	e037883a 	mov	sp,fp
   818a8:	dfc00117 	ldw	ra,4(sp)
   818ac:	df000017 	ldw	fp,0(sp)
   818b0:	dec00204 	addi	sp,sp,8
   818b4:	f800283a 	ret

000818b8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   818b8:	defff704 	addi	sp,sp,-36
   818bc:	df000815 	stw	fp,32(sp)
   818c0:	df000804 	addi	fp,sp,32
   818c4:	e13ffc15 	stw	r4,-16(fp)
   818c8:	e17ffd15 	stw	r5,-12(fp)
   818cc:	e1bffe15 	stw	r6,-8(fp)
   818d0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   818d4:	e0bffc17 	ldw	r2,-16(fp)
   818d8:	10800017 	ldw	r2,0(r2)
   818dc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   818e0:	e0bffd17 	ldw	r2,-12(fp)
   818e4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   818e8:	e0bffe17 	ldw	r2,-8(fp)
   818ec:	e0fffd17 	ldw	r3,-12(fp)
   818f0:	1885883a 	add	r2,r3,r2
   818f4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   818f8:	00001206 	br	81944 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   818fc:	e0bff917 	ldw	r2,-28(fp)
   81900:	10800037 	ldwio	r2,0(r2)
   81904:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   81908:	e0bffb17 	ldw	r2,-20(fp)
   8190c:	10a0000c 	andi	r2,r2,32768
   81910:	10000626 	beq	r2,zero,8192c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   81914:	e0bff817 	ldw	r2,-32(fp)
   81918:	10c00044 	addi	r3,r2,1
   8191c:	e0fff815 	stw	r3,-32(fp)
   81920:	e0fffb17 	ldw	r3,-20(fp)
   81924:	10c00005 	stb	r3,0(r2)
   81928:	00000606 	br	81944 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   8192c:	e0fff817 	ldw	r3,-32(fp)
   81930:	e0bffd17 	ldw	r2,-12(fp)
   81934:	1880071e 	bne	r3,r2,81954 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   81938:	e0bfff17 	ldw	r2,-4(fp)
   8193c:	1090000c 	andi	r2,r2,16384
   81940:	1000061e 	bne	r2,zero,8195c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   81944:	e0fff817 	ldw	r3,-32(fp)
   81948:	e0bffa17 	ldw	r2,-24(fp)
   8194c:	18bfeb36 	bltu	r3,r2,818fc <_gp+0xffff5fd8>
   81950:	00000306 	br	81960 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   81954:	0001883a 	nop
   81958:	00000106 	br	81960 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   8195c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   81960:	e0fff817 	ldw	r3,-32(fp)
   81964:	e0bffd17 	ldw	r2,-12(fp)
   81968:	18800426 	beq	r3,r2,8197c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   8196c:	e0fff817 	ldw	r3,-32(fp)
   81970:	e0bffd17 	ldw	r2,-12(fp)
   81974:	1885c83a 	sub	r2,r3,r2
   81978:	00000606 	br	81994 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   8197c:	e0bfff17 	ldw	r2,-4(fp)
   81980:	1090000c 	andi	r2,r2,16384
   81984:	10000226 	beq	r2,zero,81990 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   81988:	00bffd44 	movi	r2,-11
   8198c:	00000106 	br	81994 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   81990:	00bffec4 	movi	r2,-5
}
   81994:	e037883a 	mov	sp,fp
   81998:	df000017 	ldw	fp,0(sp)
   8199c:	dec00104 	addi	sp,sp,4
   819a0:	f800283a 	ret

000819a4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   819a4:	defff904 	addi	sp,sp,-28
   819a8:	df000615 	stw	fp,24(sp)
   819ac:	df000604 	addi	fp,sp,24
   819b0:	e13ffc15 	stw	r4,-16(fp)
   819b4:	e17ffd15 	stw	r5,-12(fp)
   819b8:	e1bffe15 	stw	r6,-8(fp)
   819bc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   819c0:	e0bffc17 	ldw	r2,-16(fp)
   819c4:	10800017 	ldw	r2,0(r2)
   819c8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   819cc:	e0bffe17 	ldw	r2,-8(fp)
   819d0:	e0fffd17 	ldw	r3,-12(fp)
   819d4:	1885883a 	add	r2,r3,r2
   819d8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   819dc:	00000e06 	br	81a18 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   819e0:	e0bffa17 	ldw	r2,-24(fp)
   819e4:	10800104 	addi	r2,r2,4
   819e8:	10800037 	ldwio	r2,0(r2)
   819ec:	10bfffec 	andhi	r2,r2,65535
   819f0:	10000926 	beq	r2,zero,81a18 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   819f4:	e0fffa17 	ldw	r3,-24(fp)
   819f8:	e0bffd17 	ldw	r2,-12(fp)
   819fc:	11000044 	addi	r4,r2,1
   81a00:	e13ffd15 	stw	r4,-12(fp)
   81a04:	10800003 	ldbu	r2,0(r2)
   81a08:	10803fcc 	andi	r2,r2,255
   81a0c:	1080201c 	xori	r2,r2,128
   81a10:	10bfe004 	addi	r2,r2,-128
   81a14:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   81a18:	e0fffd17 	ldw	r3,-12(fp)
   81a1c:	e0bffb17 	ldw	r2,-20(fp)
   81a20:	18bfef36 	bltu	r3,r2,819e0 <_gp+0xffff60bc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   81a24:	e0bffe17 	ldw	r2,-8(fp)
}
   81a28:	e037883a 	mov	sp,fp
   81a2c:	df000017 	ldw	fp,0(sp)
   81a30:	dec00104 	addi	sp,sp,4
   81a34:	f800283a 	ret

00081a38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   81a38:	defffa04 	addi	sp,sp,-24
   81a3c:	dfc00515 	stw	ra,20(sp)
   81a40:	df000415 	stw	fp,16(sp)
   81a44:	df000404 	addi	fp,sp,16
   81a48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   81a4c:	0007883a 	mov	r3,zero
   81a50:	e0bfff17 	ldw	r2,-4(fp)
   81a54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   81a58:	e0bfff17 	ldw	r2,-4(fp)
   81a5c:	10800104 	addi	r2,r2,4
   81a60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81a64:	0005303a 	rdctl	r2,status
   81a68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81a6c:	e0fffd17 	ldw	r3,-12(fp)
   81a70:	00bfff84 	movi	r2,-2
   81a74:	1884703a 	and	r2,r3,r2
   81a78:	1001703a 	wrctl	status,r2
  
  return context;
   81a7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   81a80:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   81a84:	00825f00 	call	825f0 <alt_tick>
   81a88:	e0bffc17 	ldw	r2,-16(fp)
   81a8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81a90:	e0bffe17 	ldw	r2,-8(fp)
   81a94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   81a98:	0001883a 	nop
   81a9c:	e037883a 	mov	sp,fp
   81aa0:	dfc00117 	ldw	ra,4(sp)
   81aa4:	df000017 	ldw	fp,0(sp)
   81aa8:	dec00204 	addi	sp,sp,8
   81aac:	f800283a 	ret

00081ab0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   81ab0:	defff804 	addi	sp,sp,-32
   81ab4:	dfc00715 	stw	ra,28(sp)
   81ab8:	df000615 	stw	fp,24(sp)
   81abc:	df000604 	addi	fp,sp,24
   81ac0:	e13ffc15 	stw	r4,-16(fp)
   81ac4:	e17ffd15 	stw	r5,-12(fp)
   81ac8:	e1bffe15 	stw	r6,-8(fp)
   81acc:	e1ffff15 	stw	r7,-4(fp)
   81ad0:	e0bfff17 	ldw	r2,-4(fp)
   81ad4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   81ad8:	d0a2ed17 	ldw	r2,-29772(gp)
   81adc:	1000021e 	bne	r2,zero,81ae8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   81ae0:	e0bffb17 	ldw	r2,-20(fp)
   81ae4:	d0a2ed15 	stw	r2,-29772(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   81ae8:	e0bffc17 	ldw	r2,-16(fp)
   81aec:	10800104 	addi	r2,r2,4
   81af0:	00c001c4 	movi	r3,7
   81af4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   81af8:	d8000015 	stw	zero,0(sp)
   81afc:	e1fffc17 	ldw	r7,-16(fp)
   81b00:	01800234 	movhi	r6,8
   81b04:	31868e04 	addi	r6,r6,6712
   81b08:	e17ffe17 	ldw	r5,-8(fp)
   81b0c:	e13ffd17 	ldw	r4,-12(fp)
   81b10:	0081e4c0 	call	81e4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   81b14:	0001883a 	nop
   81b18:	e037883a 	mov	sp,fp
   81b1c:	dfc00117 	ldw	ra,4(sp)
   81b20:	df000017 	ldw	fp,0(sp)
   81b24:	dec00204 	addi	sp,sp,8
   81b28:	f800283a 	ret

00081b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81b2c:	defffe04 	addi	sp,sp,-8
   81b30:	dfc00115 	stw	ra,4(sp)
   81b34:	df000015 	stw	fp,0(sp)
   81b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81b3c:	d0a00517 	ldw	r2,-32748(gp)
   81b40:	10000326 	beq	r2,zero,81b50 <alt_get_errno+0x24>
   81b44:	d0a00517 	ldw	r2,-32748(gp)
   81b48:	103ee83a 	callr	r2
   81b4c:	00000106 	br	81b54 <alt_get_errno+0x28>
   81b50:	d0a2f004 	addi	r2,gp,-29760
}
   81b54:	e037883a 	mov	sp,fp
   81b58:	dfc00117 	ldw	ra,4(sp)
   81b5c:	df000017 	ldw	fp,0(sp)
   81b60:	dec00204 	addi	sp,sp,8
   81b64:	f800283a 	ret

00081b68 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81b68:	defffb04 	addi	sp,sp,-20
   81b6c:	dfc00415 	stw	ra,16(sp)
   81b70:	df000315 	stw	fp,12(sp)
   81b74:	df000304 	addi	fp,sp,12
   81b78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81b7c:	e0bfff17 	ldw	r2,-4(fp)
   81b80:	10000816 	blt	r2,zero,81ba4 <close+0x3c>
   81b84:	01400304 	movi	r5,12
   81b88:	e13fff17 	ldw	r4,-4(fp)
   81b8c:	008109c0 	call	8109c <__mulsi3>
   81b90:	1007883a 	mov	r3,r2
   81b94:	00800234 	movhi	r2,8
   81b98:	108db104 	addi	r2,r2,14020
   81b9c:	1885883a 	add	r2,r3,r2
   81ba0:	00000106 	br	81ba8 <close+0x40>
   81ba4:	0005883a 	mov	r2,zero
   81ba8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   81bac:	e0bffd17 	ldw	r2,-12(fp)
   81bb0:	10001926 	beq	r2,zero,81c18 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   81bb4:	e0bffd17 	ldw	r2,-12(fp)
   81bb8:	10800017 	ldw	r2,0(r2)
   81bbc:	10800417 	ldw	r2,16(r2)
   81bc0:	10000626 	beq	r2,zero,81bdc <close+0x74>
   81bc4:	e0bffd17 	ldw	r2,-12(fp)
   81bc8:	10800017 	ldw	r2,0(r2)
   81bcc:	10800417 	ldw	r2,16(r2)
   81bd0:	e13ffd17 	ldw	r4,-12(fp)
   81bd4:	103ee83a 	callr	r2
   81bd8:	00000106 	br	81be0 <close+0x78>
   81bdc:	0005883a 	mov	r2,zero
   81be0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81be4:	e13fff17 	ldw	r4,-4(fp)
   81be8:	00824d00 	call	824d0 <alt_release_fd>
    if (rval < 0)
   81bec:	e0bffe17 	ldw	r2,-8(fp)
   81bf0:	1000070e 	bge	r2,zero,81c10 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   81bf4:	0081b2c0 	call	81b2c <alt_get_errno>
   81bf8:	1007883a 	mov	r3,r2
   81bfc:	e0bffe17 	ldw	r2,-8(fp)
   81c00:	0085c83a 	sub	r2,zero,r2
   81c04:	18800015 	stw	r2,0(r3)
      return -1;
   81c08:	00bfffc4 	movi	r2,-1
   81c0c:	00000706 	br	81c2c <close+0xc4>
    }
    return 0;
   81c10:	0005883a 	mov	r2,zero
   81c14:	00000506 	br	81c2c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81c18:	0081b2c0 	call	81b2c <alt_get_errno>
   81c1c:	1007883a 	mov	r3,r2
   81c20:	00801444 	movi	r2,81
   81c24:	18800015 	stw	r2,0(r3)
    return -1;
   81c28:	00bfffc4 	movi	r2,-1
  }
}
   81c2c:	e037883a 	mov	sp,fp
   81c30:	dfc00117 	ldw	ra,4(sp)
   81c34:	df000017 	ldw	fp,0(sp)
   81c38:	dec00204 	addi	sp,sp,8
   81c3c:	f800283a 	ret

00081c40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81c40:	deffff04 	addi	sp,sp,-4
   81c44:	df000015 	stw	fp,0(sp)
   81c48:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81c4c:	0001883a 	nop
   81c50:	e037883a 	mov	sp,fp
   81c54:	df000017 	ldw	fp,0(sp)
   81c58:	dec00104 	addi	sp,sp,4
   81c5c:	f800283a 	ret

00081c60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   81c60:	defffc04 	addi	sp,sp,-16
   81c64:	df000315 	stw	fp,12(sp)
   81c68:	df000304 	addi	fp,sp,12
   81c6c:	e13ffd15 	stw	r4,-12(fp)
   81c70:	e17ffe15 	stw	r5,-8(fp)
   81c74:	e1bfff15 	stw	r6,-4(fp)
  return len;
   81c78:	e0bfff17 	ldw	r2,-4(fp)
}
   81c7c:	e037883a 	mov	sp,fp
   81c80:	df000017 	ldw	fp,0(sp)
   81c84:	dec00104 	addi	sp,sp,4
   81c88:	f800283a 	ret

00081c8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81c8c:	defffe04 	addi	sp,sp,-8
   81c90:	dfc00115 	stw	ra,4(sp)
   81c94:	df000015 	stw	fp,0(sp)
   81c98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81c9c:	d0a00517 	ldw	r2,-32748(gp)
   81ca0:	10000326 	beq	r2,zero,81cb0 <alt_get_errno+0x24>
   81ca4:	d0a00517 	ldw	r2,-32748(gp)
   81ca8:	103ee83a 	callr	r2
   81cac:	00000106 	br	81cb4 <alt_get_errno+0x28>
   81cb0:	d0a2f004 	addi	r2,gp,-29760
}
   81cb4:	e037883a 	mov	sp,fp
   81cb8:	dfc00117 	ldw	ra,4(sp)
   81cbc:	df000017 	ldw	fp,0(sp)
   81cc0:	dec00204 	addi	sp,sp,8
   81cc4:	f800283a 	ret

00081cc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81cc8:	defffa04 	addi	sp,sp,-24
   81ccc:	dfc00515 	stw	ra,20(sp)
   81cd0:	df000415 	stw	fp,16(sp)
   81cd4:	df000404 	addi	fp,sp,16
   81cd8:	e13ffe15 	stw	r4,-8(fp)
   81cdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81ce0:	e0bffe17 	ldw	r2,-8(fp)
   81ce4:	10000326 	beq	r2,zero,81cf4 <alt_dev_llist_insert+0x2c>
   81ce8:	e0bffe17 	ldw	r2,-8(fp)
   81cec:	10800217 	ldw	r2,8(r2)
   81cf0:	1000061e 	bne	r2,zero,81d0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   81cf4:	0081c8c0 	call	81c8c <alt_get_errno>
   81cf8:	1007883a 	mov	r3,r2
   81cfc:	00800584 	movi	r2,22
   81d00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   81d04:	00bffa84 	movi	r2,-22
   81d08:	00001306 	br	81d58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   81d0c:	e0bffe17 	ldw	r2,-8(fp)
   81d10:	e0ffff17 	ldw	r3,-4(fp)
   81d14:	e0fffc15 	stw	r3,-16(fp)
   81d18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81d1c:	e0bffd17 	ldw	r2,-12(fp)
   81d20:	e0fffc17 	ldw	r3,-16(fp)
   81d24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   81d28:	e0bffc17 	ldw	r2,-16(fp)
   81d2c:	10c00017 	ldw	r3,0(r2)
   81d30:	e0bffd17 	ldw	r2,-12(fp)
   81d34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81d38:	e0bffc17 	ldw	r2,-16(fp)
   81d3c:	10800017 	ldw	r2,0(r2)
   81d40:	e0fffd17 	ldw	r3,-12(fp)
   81d44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   81d48:	e0bffc17 	ldw	r2,-16(fp)
   81d4c:	e0fffd17 	ldw	r3,-12(fp)
   81d50:	10c00015 	stw	r3,0(r2)

  return 0;  
   81d54:	0005883a 	mov	r2,zero
}
   81d58:	e037883a 	mov	sp,fp
   81d5c:	dfc00117 	ldw	ra,4(sp)
   81d60:	df000017 	ldw	fp,0(sp)
   81d64:	dec00204 	addi	sp,sp,8
   81d68:	f800283a 	ret

00081d6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   81d6c:	defffd04 	addi	sp,sp,-12
   81d70:	dfc00215 	stw	ra,8(sp)
   81d74:	df000115 	stw	fp,4(sp)
   81d78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81d7c:	00800234 	movhi	r2,8
   81d80:	108b6b04 	addi	r2,r2,11692
   81d84:	e0bfff15 	stw	r2,-4(fp)
   81d88:	00000606 	br	81da4 <_do_ctors+0x38>
        (*ctor) (); 
   81d8c:	e0bfff17 	ldw	r2,-4(fp)
   81d90:	10800017 	ldw	r2,0(r2)
   81d94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81d98:	e0bfff17 	ldw	r2,-4(fp)
   81d9c:	10bfff04 	addi	r2,r2,-4
   81da0:	e0bfff15 	stw	r2,-4(fp)
   81da4:	e0ffff17 	ldw	r3,-4(fp)
   81da8:	00800234 	movhi	r2,8
   81dac:	108b6c04 	addi	r2,r2,11696
   81db0:	18bff62e 	bgeu	r3,r2,81d8c <_gp+0xffff6468>
        (*ctor) (); 
}
   81db4:	0001883a 	nop
   81db8:	e037883a 	mov	sp,fp
   81dbc:	dfc00117 	ldw	ra,4(sp)
   81dc0:	df000017 	ldw	fp,0(sp)
   81dc4:	dec00204 	addi	sp,sp,8
   81dc8:	f800283a 	ret

00081dcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   81dcc:	defffd04 	addi	sp,sp,-12
   81dd0:	dfc00215 	stw	ra,8(sp)
   81dd4:	df000115 	stw	fp,4(sp)
   81dd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81ddc:	00800234 	movhi	r2,8
   81de0:	108b6b04 	addi	r2,r2,11692
   81de4:	e0bfff15 	stw	r2,-4(fp)
   81de8:	00000606 	br	81e04 <_do_dtors+0x38>
        (*dtor) (); 
   81dec:	e0bfff17 	ldw	r2,-4(fp)
   81df0:	10800017 	ldw	r2,0(r2)
   81df4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81df8:	e0bfff17 	ldw	r2,-4(fp)
   81dfc:	10bfff04 	addi	r2,r2,-4
   81e00:	e0bfff15 	stw	r2,-4(fp)
   81e04:	e0ffff17 	ldw	r3,-4(fp)
   81e08:	00800234 	movhi	r2,8
   81e0c:	108b6c04 	addi	r2,r2,11696
   81e10:	18bff62e 	bgeu	r3,r2,81dec <_gp+0xffff64c8>
        (*dtor) (); 
}
   81e14:	0001883a 	nop
   81e18:	e037883a 	mov	sp,fp
   81e1c:	dfc00117 	ldw	ra,4(sp)
   81e20:	df000017 	ldw	fp,0(sp)
   81e24:	dec00204 	addi	sp,sp,8
   81e28:	f800283a 	ret

00081e2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81e2c:	deffff04 	addi	sp,sp,-4
   81e30:	df000015 	stw	fp,0(sp)
   81e34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   81e38:	0001883a 	nop
   81e3c:	e037883a 	mov	sp,fp
   81e40:	df000017 	ldw	fp,0(sp)
   81e44:	dec00104 	addi	sp,sp,4
   81e48:	f800283a 	ret

00081e4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81e4c:	defff904 	addi	sp,sp,-28
   81e50:	dfc00615 	stw	ra,24(sp)
   81e54:	df000515 	stw	fp,20(sp)
   81e58:	df000504 	addi	fp,sp,20
   81e5c:	e13ffc15 	stw	r4,-16(fp)
   81e60:	e17ffd15 	stw	r5,-12(fp)
   81e64:	e1bffe15 	stw	r6,-8(fp)
   81e68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81e6c:	e0800217 	ldw	r2,8(fp)
   81e70:	d8800015 	stw	r2,0(sp)
   81e74:	e1ffff17 	ldw	r7,-4(fp)
   81e78:	e1bffe17 	ldw	r6,-8(fp)
   81e7c:	e17ffd17 	ldw	r5,-12(fp)
   81e80:	e13ffc17 	ldw	r4,-16(fp)
   81e84:	0081ffc0 	call	81ffc <alt_iic_isr_register>
}  
   81e88:	e037883a 	mov	sp,fp
   81e8c:	dfc00117 	ldw	ra,4(sp)
   81e90:	df000017 	ldw	fp,0(sp)
   81e94:	dec00204 	addi	sp,sp,8
   81e98:	f800283a 	ret

00081e9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   81e9c:	defff904 	addi	sp,sp,-28
   81ea0:	df000615 	stw	fp,24(sp)
   81ea4:	df000604 	addi	fp,sp,24
   81ea8:	e13ffe15 	stw	r4,-8(fp)
   81eac:	e17fff15 	stw	r5,-4(fp)
   81eb0:	e0bfff17 	ldw	r2,-4(fp)
   81eb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81eb8:	0005303a 	rdctl	r2,status
   81ebc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81ec0:	e0fffb17 	ldw	r3,-20(fp)
   81ec4:	00bfff84 	movi	r2,-2
   81ec8:	1884703a 	and	r2,r3,r2
   81ecc:	1001703a 	wrctl	status,r2
  
  return context;
   81ed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81ed4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   81ed8:	00c00044 	movi	r3,1
   81edc:	e0bffa17 	ldw	r2,-24(fp)
   81ee0:	1884983a 	sll	r2,r3,r2
   81ee4:	1007883a 	mov	r3,r2
   81ee8:	d0a2ec17 	ldw	r2,-29776(gp)
   81eec:	1884b03a 	or	r2,r3,r2
   81ef0:	d0a2ec15 	stw	r2,-29776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81ef4:	d0a2ec17 	ldw	r2,-29776(gp)
   81ef8:	100170fa 	wrctl	ienable,r2
   81efc:	e0bffc17 	ldw	r2,-16(fp)
   81f00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81f04:	e0bffd17 	ldw	r2,-12(fp)
   81f08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   81f0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   81f10:	0001883a 	nop
}
   81f14:	e037883a 	mov	sp,fp
   81f18:	df000017 	ldw	fp,0(sp)
   81f1c:	dec00104 	addi	sp,sp,4
   81f20:	f800283a 	ret

00081f24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   81f24:	defff904 	addi	sp,sp,-28
   81f28:	df000615 	stw	fp,24(sp)
   81f2c:	df000604 	addi	fp,sp,24
   81f30:	e13ffe15 	stw	r4,-8(fp)
   81f34:	e17fff15 	stw	r5,-4(fp)
   81f38:	e0bfff17 	ldw	r2,-4(fp)
   81f3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81f40:	0005303a 	rdctl	r2,status
   81f44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81f48:	e0fffb17 	ldw	r3,-20(fp)
   81f4c:	00bfff84 	movi	r2,-2
   81f50:	1884703a 	and	r2,r3,r2
   81f54:	1001703a 	wrctl	status,r2
  
  return context;
   81f58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81f5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   81f60:	00c00044 	movi	r3,1
   81f64:	e0bffa17 	ldw	r2,-24(fp)
   81f68:	1884983a 	sll	r2,r3,r2
   81f6c:	0084303a 	nor	r2,zero,r2
   81f70:	1007883a 	mov	r3,r2
   81f74:	d0a2ec17 	ldw	r2,-29776(gp)
   81f78:	1884703a 	and	r2,r3,r2
   81f7c:	d0a2ec15 	stw	r2,-29776(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81f80:	d0a2ec17 	ldw	r2,-29776(gp)
   81f84:	100170fa 	wrctl	ienable,r2
   81f88:	e0bffc17 	ldw	r2,-16(fp)
   81f8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81f90:	e0bffd17 	ldw	r2,-12(fp)
   81f94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   81f98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   81f9c:	0001883a 	nop
}
   81fa0:	e037883a 	mov	sp,fp
   81fa4:	df000017 	ldw	fp,0(sp)
   81fa8:	dec00104 	addi	sp,sp,4
   81fac:	f800283a 	ret

00081fb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   81fb0:	defffc04 	addi	sp,sp,-16
   81fb4:	df000315 	stw	fp,12(sp)
   81fb8:	df000304 	addi	fp,sp,12
   81fbc:	e13ffe15 	stw	r4,-8(fp)
   81fc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   81fc4:	000530fa 	rdctl	r2,ienable
   81fc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   81fcc:	00c00044 	movi	r3,1
   81fd0:	e0bfff17 	ldw	r2,-4(fp)
   81fd4:	1884983a 	sll	r2,r3,r2
   81fd8:	1007883a 	mov	r3,r2
   81fdc:	e0bffd17 	ldw	r2,-12(fp)
   81fe0:	1884703a 	and	r2,r3,r2
   81fe4:	1004c03a 	cmpne	r2,r2,zero
   81fe8:	10803fcc 	andi	r2,r2,255
}
   81fec:	e037883a 	mov	sp,fp
   81ff0:	df000017 	ldw	fp,0(sp)
   81ff4:	dec00104 	addi	sp,sp,4
   81ff8:	f800283a 	ret

00081ffc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81ffc:	defff504 	addi	sp,sp,-44
   82000:	dfc00a15 	stw	ra,40(sp)
   82004:	df000915 	stw	fp,36(sp)
   82008:	df000904 	addi	fp,sp,36
   8200c:	e13ffc15 	stw	r4,-16(fp)
   82010:	e17ffd15 	stw	r5,-12(fp)
   82014:	e1bffe15 	stw	r6,-8(fp)
   82018:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8201c:	00bffa84 	movi	r2,-22
   82020:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   82024:	e0bffd17 	ldw	r2,-12(fp)
   82028:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8202c:	e0bff817 	ldw	r2,-32(fp)
   82030:	10800808 	cmpgei	r2,r2,32
   82034:	1000271e 	bne	r2,zero,820d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82038:	0005303a 	rdctl	r2,status
   8203c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82040:	e0fffb17 	ldw	r3,-20(fp)
   82044:	00bfff84 	movi	r2,-2
   82048:	1884703a 	and	r2,r3,r2
   8204c:	1001703a 	wrctl	status,r2
  
  return context;
   82050:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82054:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   82058:	00800234 	movhi	r2,8
   8205c:	10913a04 	addi	r2,r2,17640
   82060:	e0fff817 	ldw	r3,-32(fp)
   82064:	180690fa 	slli	r3,r3,3
   82068:	10c5883a 	add	r2,r2,r3
   8206c:	e0fffe17 	ldw	r3,-8(fp)
   82070:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   82074:	00800234 	movhi	r2,8
   82078:	10913a04 	addi	r2,r2,17640
   8207c:	e0fff817 	ldw	r3,-32(fp)
   82080:	180690fa 	slli	r3,r3,3
   82084:	10c5883a 	add	r2,r2,r3
   82088:	10800104 	addi	r2,r2,4
   8208c:	e0ffff17 	ldw	r3,-4(fp)
   82090:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82094:	e0bffe17 	ldw	r2,-8(fp)
   82098:	10000526 	beq	r2,zero,820b0 <alt_iic_isr_register+0xb4>
   8209c:	e0bff817 	ldw	r2,-32(fp)
   820a0:	100b883a 	mov	r5,r2
   820a4:	e13ffc17 	ldw	r4,-16(fp)
   820a8:	0081e9c0 	call	81e9c <alt_ic_irq_enable>
   820ac:	00000406 	br	820c0 <alt_iic_isr_register+0xc4>
   820b0:	e0bff817 	ldw	r2,-32(fp)
   820b4:	100b883a 	mov	r5,r2
   820b8:	e13ffc17 	ldw	r4,-16(fp)
   820bc:	0081f240 	call	81f24 <alt_ic_irq_disable>
   820c0:	e0bff715 	stw	r2,-36(fp)
   820c4:	e0bffa17 	ldw	r2,-24(fp)
   820c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   820cc:	e0bff917 	ldw	r2,-28(fp)
   820d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   820d4:	e0bff717 	ldw	r2,-36(fp)
}
   820d8:	e037883a 	mov	sp,fp
   820dc:	dfc00117 	ldw	ra,4(sp)
   820e0:	df000017 	ldw	fp,0(sp)
   820e4:	dec00204 	addi	sp,sp,8
   820e8:	f800283a 	ret

000820ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   820ec:	defff804 	addi	sp,sp,-32
   820f0:	dfc00715 	stw	ra,28(sp)
   820f4:	df000615 	stw	fp,24(sp)
   820f8:	dc000515 	stw	r16,20(sp)
   820fc:	df000604 	addi	fp,sp,24
   82100:	e13ffb15 	stw	r4,-20(fp)
   82104:	e17ffc15 	stw	r5,-16(fp)
   82108:	e1bffd15 	stw	r6,-12(fp)
   8210c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   82110:	e1bffe17 	ldw	r6,-8(fp)
   82114:	e17ffd17 	ldw	r5,-12(fp)
   82118:	e13ffc17 	ldw	r4,-16(fp)
   8211c:	00823740 	call	82374 <open>
   82120:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   82124:	e0bffa17 	ldw	r2,-24(fp)
   82128:	10002216 	blt	r2,zero,821b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   8212c:	04000234 	movhi	r16,8
   82130:	840db104 	addi	r16,r16,14020
   82134:	e0bffa17 	ldw	r2,-24(fp)
   82138:	01400304 	movi	r5,12
   8213c:	1009883a 	mov	r4,r2
   82140:	008109c0 	call	8109c <__mulsi3>
   82144:	8085883a 	add	r2,r16,r2
   82148:	10c00017 	ldw	r3,0(r2)
   8214c:	e0bffb17 	ldw	r2,-20(fp)
   82150:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82154:	04000234 	movhi	r16,8
   82158:	840db104 	addi	r16,r16,14020
   8215c:	e0bffa17 	ldw	r2,-24(fp)
   82160:	01400304 	movi	r5,12
   82164:	1009883a 	mov	r4,r2
   82168:	008109c0 	call	8109c <__mulsi3>
   8216c:	8085883a 	add	r2,r16,r2
   82170:	10800104 	addi	r2,r2,4
   82174:	10c00017 	ldw	r3,0(r2)
   82178:	e0bffb17 	ldw	r2,-20(fp)
   8217c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82180:	04000234 	movhi	r16,8
   82184:	840db104 	addi	r16,r16,14020
   82188:	e0bffa17 	ldw	r2,-24(fp)
   8218c:	01400304 	movi	r5,12
   82190:	1009883a 	mov	r4,r2
   82194:	008109c0 	call	8109c <__mulsi3>
   82198:	8085883a 	add	r2,r16,r2
   8219c:	10800204 	addi	r2,r2,8
   821a0:	10c00017 	ldw	r3,0(r2)
   821a4:	e0bffb17 	ldw	r2,-20(fp)
   821a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   821ac:	e13ffa17 	ldw	r4,-24(fp)
   821b0:	00824d00 	call	824d0 <alt_release_fd>
  }
} 
   821b4:	0001883a 	nop
   821b8:	e6ffff04 	addi	sp,fp,-4
   821bc:	dfc00217 	ldw	ra,8(sp)
   821c0:	df000117 	ldw	fp,4(sp)
   821c4:	dc000017 	ldw	r16,0(sp)
   821c8:	dec00304 	addi	sp,sp,12
   821cc:	f800283a 	ret

000821d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   821d0:	defffb04 	addi	sp,sp,-20
   821d4:	dfc00415 	stw	ra,16(sp)
   821d8:	df000315 	stw	fp,12(sp)
   821dc:	df000304 	addi	fp,sp,12
   821e0:	e13ffd15 	stw	r4,-12(fp)
   821e4:	e17ffe15 	stw	r5,-8(fp)
   821e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   821ec:	01c07fc4 	movi	r7,511
   821f0:	01800044 	movi	r6,1
   821f4:	e17ffd17 	ldw	r5,-12(fp)
   821f8:	01000234 	movhi	r4,8
   821fc:	210db404 	addi	r4,r4,14032
   82200:	00820ec0 	call	820ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82204:	01c07fc4 	movi	r7,511
   82208:	000d883a 	mov	r6,zero
   8220c:	e17ffe17 	ldw	r5,-8(fp)
   82210:	01000234 	movhi	r4,8
   82214:	210db104 	addi	r4,r4,14020
   82218:	00820ec0 	call	820ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8221c:	01c07fc4 	movi	r7,511
   82220:	01800044 	movi	r6,1
   82224:	e17fff17 	ldw	r5,-4(fp)
   82228:	01000234 	movhi	r4,8
   8222c:	210db704 	addi	r4,r4,14044
   82230:	00820ec0 	call	820ec <alt_open_fd>
}  
   82234:	0001883a 	nop
   82238:	e037883a 	mov	sp,fp
   8223c:	dfc00117 	ldw	ra,4(sp)
   82240:	df000017 	ldw	fp,0(sp)
   82244:	dec00204 	addi	sp,sp,8
   82248:	f800283a 	ret

0008224c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8224c:	defffe04 	addi	sp,sp,-8
   82250:	dfc00115 	stw	ra,4(sp)
   82254:	df000015 	stw	fp,0(sp)
   82258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8225c:	d0a00517 	ldw	r2,-32748(gp)
   82260:	10000326 	beq	r2,zero,82270 <alt_get_errno+0x24>
   82264:	d0a00517 	ldw	r2,-32748(gp)
   82268:	103ee83a 	callr	r2
   8226c:	00000106 	br	82274 <alt_get_errno+0x28>
   82270:	d0a2f004 	addi	r2,gp,-29760
}
   82274:	e037883a 	mov	sp,fp
   82278:	dfc00117 	ldw	ra,4(sp)
   8227c:	df000017 	ldw	fp,0(sp)
   82280:	dec00204 	addi	sp,sp,8
   82284:	f800283a 	ret

00082288 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82288:	defffb04 	addi	sp,sp,-20
   8228c:	dfc00415 	stw	ra,16(sp)
   82290:	df000315 	stw	fp,12(sp)
   82294:	dc000215 	stw	r16,8(sp)
   82298:	df000304 	addi	fp,sp,12
   8229c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   822a0:	e0bffe17 	ldw	r2,-8(fp)
   822a4:	10800217 	ldw	r2,8(r2)
   822a8:	10d00034 	orhi	r3,r2,16384
   822ac:	e0bffe17 	ldw	r2,-8(fp)
   822b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   822b4:	e03ffd15 	stw	zero,-12(fp)
   822b8:	00002306 	br	82348 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   822bc:	04000234 	movhi	r16,8
   822c0:	840db104 	addi	r16,r16,14020
   822c4:	e0bffd17 	ldw	r2,-12(fp)
   822c8:	01400304 	movi	r5,12
   822cc:	1009883a 	mov	r4,r2
   822d0:	008109c0 	call	8109c <__mulsi3>
   822d4:	8085883a 	add	r2,r16,r2
   822d8:	10c00017 	ldw	r3,0(r2)
   822dc:	e0bffe17 	ldw	r2,-8(fp)
   822e0:	10800017 	ldw	r2,0(r2)
   822e4:	1880151e 	bne	r3,r2,8233c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   822e8:	04000234 	movhi	r16,8
   822ec:	840db104 	addi	r16,r16,14020
   822f0:	e0bffd17 	ldw	r2,-12(fp)
   822f4:	01400304 	movi	r5,12
   822f8:	1009883a 	mov	r4,r2
   822fc:	008109c0 	call	8109c <__mulsi3>
   82300:	8085883a 	add	r2,r16,r2
   82304:	10800204 	addi	r2,r2,8
   82308:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8230c:	10000b0e 	bge	r2,zero,8233c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82310:	01400304 	movi	r5,12
   82314:	e13ffd17 	ldw	r4,-12(fp)
   82318:	008109c0 	call	8109c <__mulsi3>
   8231c:	1007883a 	mov	r3,r2
   82320:	00800234 	movhi	r2,8
   82324:	108db104 	addi	r2,r2,14020
   82328:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8232c:	e0bffe17 	ldw	r2,-8(fp)
   82330:	18800226 	beq	r3,r2,8233c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82334:	00bffcc4 	movi	r2,-13
   82338:	00000806 	br	8235c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8233c:	e0bffd17 	ldw	r2,-12(fp)
   82340:	10800044 	addi	r2,r2,1
   82344:	e0bffd15 	stw	r2,-12(fp)
   82348:	d0a00417 	ldw	r2,-32752(gp)
   8234c:	1007883a 	mov	r3,r2
   82350:	e0bffd17 	ldw	r2,-12(fp)
   82354:	18bfd92e 	bgeu	r3,r2,822bc <_gp+0xffff6998>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82358:	0005883a 	mov	r2,zero
}
   8235c:	e6ffff04 	addi	sp,fp,-4
   82360:	dfc00217 	ldw	ra,8(sp)
   82364:	df000117 	ldw	fp,4(sp)
   82368:	dc000017 	ldw	r16,0(sp)
   8236c:	dec00304 	addi	sp,sp,12
   82370:	f800283a 	ret

00082374 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82374:	defff604 	addi	sp,sp,-40
   82378:	dfc00915 	stw	ra,36(sp)
   8237c:	df000815 	stw	fp,32(sp)
   82380:	df000804 	addi	fp,sp,32
   82384:	e13ffd15 	stw	r4,-12(fp)
   82388:	e17ffe15 	stw	r5,-8(fp)
   8238c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82390:	00bfffc4 	movi	r2,-1
   82394:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   82398:	00bffb44 	movi	r2,-19
   8239c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   823a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   823a4:	d1600204 	addi	r5,gp,-32760
   823a8:	e13ffd17 	ldw	r4,-12(fp)
   823ac:	008271c0 	call	8271c <alt_find_dev>
   823b0:	e0bff815 	stw	r2,-32(fp)
   823b4:	e0bff817 	ldw	r2,-32(fp)
   823b8:	1000051e 	bne	r2,zero,823d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   823bc:	e13ffd17 	ldw	r4,-12(fp)
   823c0:	00827ac0 	call	827ac <alt_find_file>
   823c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   823c8:	00800044 	movi	r2,1
   823cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   823d0:	e0bff817 	ldw	r2,-32(fp)
   823d4:	10002b26 	beq	r2,zero,82484 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   823d8:	e13ff817 	ldw	r4,-32(fp)
   823dc:	00828b40 	call	828b4 <alt_get_fd>
   823e0:	e0bff915 	stw	r2,-28(fp)
   823e4:	e0bff917 	ldw	r2,-28(fp)
   823e8:	1000030e 	bge	r2,zero,823f8 <open+0x84>
    {
      status = index;
   823ec:	e0bff917 	ldw	r2,-28(fp)
   823f0:	e0bffa15 	stw	r2,-24(fp)
   823f4:	00002506 	br	8248c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   823f8:	01400304 	movi	r5,12
   823fc:	e13ff917 	ldw	r4,-28(fp)
   82400:	008109c0 	call	8109c <__mulsi3>
   82404:	1007883a 	mov	r3,r2
   82408:	00800234 	movhi	r2,8
   8240c:	108db104 	addi	r2,r2,14020
   82410:	1885883a 	add	r2,r3,r2
   82414:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82418:	e0fffe17 	ldw	r3,-8(fp)
   8241c:	00900034 	movhi	r2,16384
   82420:	10bfffc4 	addi	r2,r2,-1
   82424:	1886703a 	and	r3,r3,r2
   82428:	e0bffc17 	ldw	r2,-16(fp)
   8242c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82430:	e0bffb17 	ldw	r2,-20(fp)
   82434:	1000051e 	bne	r2,zero,8244c <open+0xd8>
   82438:	e13ffc17 	ldw	r4,-16(fp)
   8243c:	00822880 	call	82288 <alt_file_locked>
   82440:	e0bffa15 	stw	r2,-24(fp)
   82444:	e0bffa17 	ldw	r2,-24(fp)
   82448:	10001016 	blt	r2,zero,8248c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8244c:	e0bff817 	ldw	r2,-32(fp)
   82450:	10800317 	ldw	r2,12(r2)
   82454:	10000826 	beq	r2,zero,82478 <open+0x104>
   82458:	e0bff817 	ldw	r2,-32(fp)
   8245c:	10800317 	ldw	r2,12(r2)
   82460:	e1ffff17 	ldw	r7,-4(fp)
   82464:	e1bffe17 	ldw	r6,-8(fp)
   82468:	e17ffd17 	ldw	r5,-12(fp)
   8246c:	e13ffc17 	ldw	r4,-16(fp)
   82470:	103ee83a 	callr	r2
   82474:	00000106 	br	8247c <open+0x108>
   82478:	0005883a 	mov	r2,zero
   8247c:	e0bffa15 	stw	r2,-24(fp)
   82480:	00000206 	br	8248c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82484:	00bffb44 	movi	r2,-19
   82488:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8248c:	e0bffa17 	ldw	r2,-24(fp)
   82490:	1000090e 	bge	r2,zero,824b8 <open+0x144>
  {
    alt_release_fd (index);  
   82494:	e13ff917 	ldw	r4,-28(fp)
   82498:	00824d00 	call	824d0 <alt_release_fd>
    ALT_ERRNO = -status;
   8249c:	008224c0 	call	8224c <alt_get_errno>
   824a0:	1007883a 	mov	r3,r2
   824a4:	e0bffa17 	ldw	r2,-24(fp)
   824a8:	0085c83a 	sub	r2,zero,r2
   824ac:	18800015 	stw	r2,0(r3)
    return -1;
   824b0:	00bfffc4 	movi	r2,-1
   824b4:	00000106 	br	824bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   824b8:	e0bff917 	ldw	r2,-28(fp)
}
   824bc:	e037883a 	mov	sp,fp
   824c0:	dfc00117 	ldw	ra,4(sp)
   824c4:	df000017 	ldw	fp,0(sp)
   824c8:	dec00204 	addi	sp,sp,8
   824cc:	f800283a 	ret

000824d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   824d0:	defffc04 	addi	sp,sp,-16
   824d4:	dfc00315 	stw	ra,12(sp)
   824d8:	df000215 	stw	fp,8(sp)
   824dc:	dc000115 	stw	r16,4(sp)
   824e0:	df000204 	addi	fp,sp,8
   824e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   824e8:	e0bffe17 	ldw	r2,-8(fp)
   824ec:	108000d0 	cmplti	r2,r2,3
   824f0:	1000111e 	bne	r2,zero,82538 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   824f4:	04000234 	movhi	r16,8
   824f8:	840db104 	addi	r16,r16,14020
   824fc:	e0bffe17 	ldw	r2,-8(fp)
   82500:	01400304 	movi	r5,12
   82504:	1009883a 	mov	r4,r2
   82508:	008109c0 	call	8109c <__mulsi3>
   8250c:	8085883a 	add	r2,r16,r2
   82510:	10800204 	addi	r2,r2,8
   82514:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82518:	04000234 	movhi	r16,8
   8251c:	840db104 	addi	r16,r16,14020
   82520:	e0bffe17 	ldw	r2,-8(fp)
   82524:	01400304 	movi	r5,12
   82528:	1009883a 	mov	r4,r2
   8252c:	008109c0 	call	8109c <__mulsi3>
   82530:	8085883a 	add	r2,r16,r2
   82534:	10000015 	stw	zero,0(r2)
  }
}
   82538:	0001883a 	nop
   8253c:	e6ffff04 	addi	sp,fp,-4
   82540:	dfc00217 	ldw	ra,8(sp)
   82544:	df000117 	ldw	fp,4(sp)
   82548:	dc000017 	ldw	r16,0(sp)
   8254c:	dec00304 	addi	sp,sp,12
   82550:	f800283a 	ret

00082554 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82554:	defffa04 	addi	sp,sp,-24
   82558:	df000515 	stw	fp,20(sp)
   8255c:	df000504 	addi	fp,sp,20
   82560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82564:	0005303a 	rdctl	r2,status
   82568:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8256c:	e0fffc17 	ldw	r3,-16(fp)
   82570:	00bfff84 	movi	r2,-2
   82574:	1884703a 	and	r2,r3,r2
   82578:	1001703a 	wrctl	status,r2
  
  return context;
   8257c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82580:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82584:	e0bfff17 	ldw	r2,-4(fp)
   82588:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8258c:	e0bffd17 	ldw	r2,-12(fp)
   82590:	10800017 	ldw	r2,0(r2)
   82594:	e0fffd17 	ldw	r3,-12(fp)
   82598:	18c00117 	ldw	r3,4(r3)
   8259c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   825a0:	e0bffd17 	ldw	r2,-12(fp)
   825a4:	10800117 	ldw	r2,4(r2)
   825a8:	e0fffd17 	ldw	r3,-12(fp)
   825ac:	18c00017 	ldw	r3,0(r3)
   825b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   825b4:	e0bffd17 	ldw	r2,-12(fp)
   825b8:	e0fffd17 	ldw	r3,-12(fp)
   825bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   825c0:	e0bffd17 	ldw	r2,-12(fp)
   825c4:	e0fffd17 	ldw	r3,-12(fp)
   825c8:	10c00015 	stw	r3,0(r2)
   825cc:	e0bffb17 	ldw	r2,-20(fp)
   825d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   825d4:	e0bffe17 	ldw	r2,-8(fp)
   825d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   825dc:	0001883a 	nop
   825e0:	e037883a 	mov	sp,fp
   825e4:	df000017 	ldw	fp,0(sp)
   825e8:	dec00104 	addi	sp,sp,4
   825ec:	f800283a 	ret

000825f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   825f0:	defffb04 	addi	sp,sp,-20
   825f4:	dfc00415 	stw	ra,16(sp)
   825f8:	df000315 	stw	fp,12(sp)
   825fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   82600:	d0a00717 	ldw	r2,-32740(gp)
   82604:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82608:	d0a2ee17 	ldw	r2,-29768(gp)
   8260c:	10800044 	addi	r2,r2,1
   82610:	d0a2ee15 	stw	r2,-29768(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82614:	00002e06 	br	826d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   82618:	e0bffd17 	ldw	r2,-12(fp)
   8261c:	10800017 	ldw	r2,0(r2)
   82620:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   82624:	e0bffd17 	ldw	r2,-12(fp)
   82628:	10800403 	ldbu	r2,16(r2)
   8262c:	10803fcc 	andi	r2,r2,255
   82630:	10000426 	beq	r2,zero,82644 <alt_tick+0x54>
   82634:	d0a2ee17 	ldw	r2,-29768(gp)
   82638:	1000021e 	bne	r2,zero,82644 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8263c:	e0bffd17 	ldw	r2,-12(fp)
   82640:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   82644:	e0bffd17 	ldw	r2,-12(fp)
   82648:	10800217 	ldw	r2,8(r2)
   8264c:	d0e2ee17 	ldw	r3,-29768(gp)
   82650:	18801d36 	bltu	r3,r2,826c8 <alt_tick+0xd8>
   82654:	e0bffd17 	ldw	r2,-12(fp)
   82658:	10800403 	ldbu	r2,16(r2)
   8265c:	10803fcc 	andi	r2,r2,255
   82660:	1000191e 	bne	r2,zero,826c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   82664:	e0bffd17 	ldw	r2,-12(fp)
   82668:	10800317 	ldw	r2,12(r2)
   8266c:	e0fffd17 	ldw	r3,-12(fp)
   82670:	18c00517 	ldw	r3,20(r3)
   82674:	1809883a 	mov	r4,r3
   82678:	103ee83a 	callr	r2
   8267c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   82680:	e0bfff17 	ldw	r2,-4(fp)
   82684:	1000031e 	bne	r2,zero,82694 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   82688:	e13ffd17 	ldw	r4,-12(fp)
   8268c:	00825540 	call	82554 <alt_alarm_stop>
   82690:	00000d06 	br	826c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   82694:	e0bffd17 	ldw	r2,-12(fp)
   82698:	10c00217 	ldw	r3,8(r2)
   8269c:	e0bfff17 	ldw	r2,-4(fp)
   826a0:	1887883a 	add	r3,r3,r2
   826a4:	e0bffd17 	ldw	r2,-12(fp)
   826a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   826ac:	e0bffd17 	ldw	r2,-12(fp)
   826b0:	10c00217 	ldw	r3,8(r2)
   826b4:	d0a2ee17 	ldw	r2,-29768(gp)
   826b8:	1880032e 	bgeu	r3,r2,826c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   826bc:	e0bffd17 	ldw	r2,-12(fp)
   826c0:	00c00044 	movi	r3,1
   826c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   826c8:	e0bffe17 	ldw	r2,-8(fp)
   826cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   826d0:	e0fffd17 	ldw	r3,-12(fp)
   826d4:	d0a00704 	addi	r2,gp,-32740
   826d8:	18bfcf1e 	bne	r3,r2,82618 <_gp+0xffff6cf4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   826dc:	0001883a 	nop
}
   826e0:	0001883a 	nop
   826e4:	e037883a 	mov	sp,fp
   826e8:	dfc00117 	ldw	ra,4(sp)
   826ec:	df000017 	ldw	fp,0(sp)
   826f0:	dec00204 	addi	sp,sp,8
   826f4:	f800283a 	ret

000826f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   826f8:	deffff04 	addi	sp,sp,-4
   826fc:	df000015 	stw	fp,0(sp)
   82700:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   82704:	000170fa 	wrctl	ienable,zero
}
   82708:	0001883a 	nop
   8270c:	e037883a 	mov	sp,fp
   82710:	df000017 	ldw	fp,0(sp)
   82714:	dec00104 	addi	sp,sp,4
   82718:	f800283a 	ret

0008271c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8271c:	defffa04 	addi	sp,sp,-24
   82720:	dfc00515 	stw	ra,20(sp)
   82724:	df000415 	stw	fp,16(sp)
   82728:	df000404 	addi	fp,sp,16
   8272c:	e13ffe15 	stw	r4,-8(fp)
   82730:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82734:	e0bfff17 	ldw	r2,-4(fp)
   82738:	10800017 	ldw	r2,0(r2)
   8273c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82740:	e13ffe17 	ldw	r4,-8(fp)
   82744:	0082a780 	call	82a78 <strlen>
   82748:	10800044 	addi	r2,r2,1
   8274c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82750:	00000d06 	br	82788 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82754:	e0bffc17 	ldw	r2,-16(fp)
   82758:	10800217 	ldw	r2,8(r2)
   8275c:	e0fffd17 	ldw	r3,-12(fp)
   82760:	180d883a 	mov	r6,r3
   82764:	e17ffe17 	ldw	r5,-8(fp)
   82768:	1009883a 	mov	r4,r2
   8276c:	0082a480 	call	82a48 <memcmp>
   82770:	1000021e 	bne	r2,zero,8277c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   82774:	e0bffc17 	ldw	r2,-16(fp)
   82778:	00000706 	br	82798 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8277c:	e0bffc17 	ldw	r2,-16(fp)
   82780:	10800017 	ldw	r2,0(r2)
   82784:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82788:	e0fffc17 	ldw	r3,-16(fp)
   8278c:	e0bfff17 	ldw	r2,-4(fp)
   82790:	18bff01e 	bne	r3,r2,82754 <_gp+0xffff6e30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   82794:	0005883a 	mov	r2,zero
}
   82798:	e037883a 	mov	sp,fp
   8279c:	dfc00117 	ldw	ra,4(sp)
   827a0:	df000017 	ldw	fp,0(sp)
   827a4:	dec00204 	addi	sp,sp,8
   827a8:	f800283a 	ret

000827ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   827ac:	defffb04 	addi	sp,sp,-20
   827b0:	dfc00415 	stw	ra,16(sp)
   827b4:	df000315 	stw	fp,12(sp)
   827b8:	df000304 	addi	fp,sp,12
   827bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   827c0:	d0a00017 	ldw	r2,-32768(gp)
   827c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   827c8:	00003106 	br	82890 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   827cc:	e0bffd17 	ldw	r2,-12(fp)
   827d0:	10800217 	ldw	r2,8(r2)
   827d4:	1009883a 	mov	r4,r2
   827d8:	0082a780 	call	82a78 <strlen>
   827dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   827e0:	e0bffd17 	ldw	r2,-12(fp)
   827e4:	10c00217 	ldw	r3,8(r2)
   827e8:	e0bffe17 	ldw	r2,-8(fp)
   827ec:	10bfffc4 	addi	r2,r2,-1
   827f0:	1885883a 	add	r2,r3,r2
   827f4:	10800003 	ldbu	r2,0(r2)
   827f8:	10803fcc 	andi	r2,r2,255
   827fc:	1080201c 	xori	r2,r2,128
   82800:	10bfe004 	addi	r2,r2,-128
   82804:	10800bd8 	cmpnei	r2,r2,47
   82808:	1000031e 	bne	r2,zero,82818 <alt_find_file+0x6c>
    {
      len -= 1;
   8280c:	e0bffe17 	ldw	r2,-8(fp)
   82810:	10bfffc4 	addi	r2,r2,-1
   82814:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82818:	e0bffe17 	ldw	r2,-8(fp)
   8281c:	e0ffff17 	ldw	r3,-4(fp)
   82820:	1885883a 	add	r2,r3,r2
   82824:	10800003 	ldbu	r2,0(r2)
   82828:	10803fcc 	andi	r2,r2,255
   8282c:	1080201c 	xori	r2,r2,128
   82830:	10bfe004 	addi	r2,r2,-128
   82834:	10800be0 	cmpeqi	r2,r2,47
   82838:	1000081e 	bne	r2,zero,8285c <alt_find_file+0xb0>
   8283c:	e0bffe17 	ldw	r2,-8(fp)
   82840:	e0ffff17 	ldw	r3,-4(fp)
   82844:	1885883a 	add	r2,r3,r2
   82848:	10800003 	ldbu	r2,0(r2)
   8284c:	10803fcc 	andi	r2,r2,255
   82850:	1080201c 	xori	r2,r2,128
   82854:	10bfe004 	addi	r2,r2,-128
   82858:	10000a1e 	bne	r2,zero,82884 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   8285c:	e0bffd17 	ldw	r2,-12(fp)
   82860:	10800217 	ldw	r2,8(r2)
   82864:	e0fffe17 	ldw	r3,-8(fp)
   82868:	180d883a 	mov	r6,r3
   8286c:	e17fff17 	ldw	r5,-4(fp)
   82870:	1009883a 	mov	r4,r2
   82874:	0082a480 	call	82a48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82878:	1000021e 	bne	r2,zero,82884 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8287c:	e0bffd17 	ldw	r2,-12(fp)
   82880:	00000706 	br	828a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   82884:	e0bffd17 	ldw	r2,-12(fp)
   82888:	10800017 	ldw	r2,0(r2)
   8288c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   82890:	e0fffd17 	ldw	r3,-12(fp)
   82894:	d0a00004 	addi	r2,gp,-32768
   82898:	18bfcc1e 	bne	r3,r2,827cc <_gp+0xffff6ea8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8289c:	0005883a 	mov	r2,zero
}
   828a0:	e037883a 	mov	sp,fp
   828a4:	dfc00117 	ldw	ra,4(sp)
   828a8:	df000017 	ldw	fp,0(sp)
   828ac:	dec00204 	addi	sp,sp,8
   828b0:	f800283a 	ret

000828b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   828b4:	defffa04 	addi	sp,sp,-24
   828b8:	dfc00515 	stw	ra,20(sp)
   828bc:	df000415 	stw	fp,16(sp)
   828c0:	dc000315 	stw	r16,12(sp)
   828c4:	df000404 	addi	fp,sp,16
   828c8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   828cc:	00bffa04 	movi	r2,-24
   828d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   828d4:	e03ffc15 	stw	zero,-16(fp)
   828d8:	00001d06 	br	82950 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   828dc:	04000234 	movhi	r16,8
   828e0:	840db104 	addi	r16,r16,14020
   828e4:	e0bffc17 	ldw	r2,-16(fp)
   828e8:	01400304 	movi	r5,12
   828ec:	1009883a 	mov	r4,r2
   828f0:	008109c0 	call	8109c <__mulsi3>
   828f4:	8085883a 	add	r2,r16,r2
   828f8:	10800017 	ldw	r2,0(r2)
   828fc:	1000111e 	bne	r2,zero,82944 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   82900:	04000234 	movhi	r16,8
   82904:	840db104 	addi	r16,r16,14020
   82908:	e0bffc17 	ldw	r2,-16(fp)
   8290c:	01400304 	movi	r5,12
   82910:	1009883a 	mov	r4,r2
   82914:	008109c0 	call	8109c <__mulsi3>
   82918:	8085883a 	add	r2,r16,r2
   8291c:	e0fffe17 	ldw	r3,-8(fp)
   82920:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   82924:	d0e00417 	ldw	r3,-32752(gp)
   82928:	e0bffc17 	ldw	r2,-16(fp)
   8292c:	1880020e 	bge	r3,r2,82938 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   82930:	e0bffc17 	ldw	r2,-16(fp)
   82934:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   82938:	e0bffc17 	ldw	r2,-16(fp)
   8293c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   82940:	00000606 	br	8295c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82944:	e0bffc17 	ldw	r2,-16(fp)
   82948:	10800044 	addi	r2,r2,1
   8294c:	e0bffc15 	stw	r2,-16(fp)
   82950:	e0bffc17 	ldw	r2,-16(fp)
   82954:	10800810 	cmplti	r2,r2,32
   82958:	103fe01e 	bne	r2,zero,828dc <_gp+0xffff6fb8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8295c:	e0bffd17 	ldw	r2,-12(fp)
}
   82960:	e6ffff04 	addi	sp,fp,-4
   82964:	dfc00217 	ldw	ra,8(sp)
   82968:	df000117 	ldw	fp,4(sp)
   8296c:	dc000017 	ldw	r16,0(sp)
   82970:	dec00304 	addi	sp,sp,12
   82974:	f800283a 	ret

00082978 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   82978:	defffe04 	addi	sp,sp,-8
   8297c:	df000115 	stw	fp,4(sp)
   82980:	df000104 	addi	fp,sp,4
   82984:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   82988:	e0bfff17 	ldw	r2,-4(fp)
   8298c:	10bffe84 	addi	r2,r2,-6
   82990:	10c00428 	cmpgeui	r3,r2,16
   82994:	18001a1e 	bne	r3,zero,82a00 <alt_exception_cause_generated_bad_addr+0x88>
   82998:	100690ba 	slli	r3,r2,2
   8299c:	00800234 	movhi	r2,8
   829a0:	108a6c04 	addi	r2,r2,10672
   829a4:	1885883a 	add	r2,r3,r2
   829a8:	10800017 	ldw	r2,0(r2)
   829ac:	1000683a 	jmp	r2
   829b0:	000829f0 	cmpltui	zero,zero,8359
   829b4:	000829f0 	cmpltui	zero,zero,8359
   829b8:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829bc:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829c0:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829c4:	000829f0 	cmpltui	zero,zero,8359
   829c8:	000829f8 	rdprs	zero,zero,8359
   829cc:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829d0:	000829f0 	cmpltui	zero,zero,8359
   829d4:	000829f0 	cmpltui	zero,zero,8359
   829d8:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829dc:	000829f0 	cmpltui	zero,zero,8359
   829e0:	000829f8 	rdprs	zero,zero,8359
   829e4:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829e8:	00082a00 	call	82a0 <__alt_mem_sdram_controller+0x82a0>
   829ec:	000829f0 	cmpltui	zero,zero,8359
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   829f0:	00800044 	movi	r2,1
   829f4:	00000306 	br	82a04 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   829f8:	0005883a 	mov	r2,zero
   829fc:	00000106 	br	82a04 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   82a00:	0005883a 	mov	r2,zero
  }
}
   82a04:	e037883a 	mov	sp,fp
   82a08:	df000017 	ldw	fp,0(sp)
   82a0c:	dec00104 	addi	sp,sp,4
   82a10:	f800283a 	ret

00082a14 <atexit>:
   82a14:	200b883a 	mov	r5,r4
   82a18:	000f883a 	mov	r7,zero
   82a1c:	000d883a 	mov	r6,zero
   82a20:	0009883a 	mov	r4,zero
   82a24:	0082a941 	jmpi	82a94 <__register_exitproc>

00082a28 <exit>:
   82a28:	defffe04 	addi	sp,sp,-8
   82a2c:	000b883a 	mov	r5,zero
   82a30:	dc000015 	stw	r16,0(sp)
   82a34:	dfc00115 	stw	ra,4(sp)
   82a38:	2021883a 	mov	r16,r4
   82a3c:	0082bec0 	call	82bec <__call_exitprocs>
   82a40:	8009883a 	mov	r4,r16
   82a44:	0082d7c0 	call	82d7c <_exit>

00082a48 <memcmp>:
   82a48:	218d883a 	add	r6,r4,r6
   82a4c:	21800826 	beq	r4,r6,82a70 <memcmp+0x28>
   82a50:	20800003 	ldbu	r2,0(r4)
   82a54:	28c00003 	ldbu	r3,0(r5)
   82a58:	10c00226 	beq	r2,r3,82a64 <memcmp+0x1c>
   82a5c:	10c5c83a 	sub	r2,r2,r3
   82a60:	f800283a 	ret
   82a64:	21000044 	addi	r4,r4,1
   82a68:	29400044 	addi	r5,r5,1
   82a6c:	003ff706 	br	82a4c <_gp+0xffff7128>
   82a70:	0005883a 	mov	r2,zero
   82a74:	f800283a 	ret

00082a78 <strlen>:
   82a78:	2005883a 	mov	r2,r4
   82a7c:	10c00007 	ldb	r3,0(r2)
   82a80:	18000226 	beq	r3,zero,82a8c <strlen+0x14>
   82a84:	10800044 	addi	r2,r2,1
   82a88:	003ffc06 	br	82a7c <_gp+0xffff7158>
   82a8c:	1105c83a 	sub	r2,r2,r4
   82a90:	f800283a 	ret

00082a94 <__register_exitproc>:
   82a94:	00800234 	movhi	r2,8
   82a98:	108e5204 	addi	r2,r2,14664
   82a9c:	10c00017 	ldw	r3,0(r2)
   82aa0:	defff904 	addi	sp,sp,-28
   82aa4:	dc000015 	stw	r16,0(sp)
   82aa8:	1c000c17 	ldw	r16,48(r3)
   82aac:	dd400515 	stw	r21,20(sp)
   82ab0:	dd000415 	stw	r20,16(sp)
   82ab4:	dcc00315 	stw	r19,12(sp)
   82ab8:	dc800215 	stw	r18,8(sp)
   82abc:	dc400115 	stw	r17,4(sp)
   82ac0:	dfc00615 	stw	ra,24(sp)
   82ac4:	202b883a 	mov	r21,r4
   82ac8:	2823883a 	mov	r17,r5
   82acc:	3027883a 	mov	r19,r6
   82ad0:	3825883a 	mov	r18,r7
   82ad4:	1029883a 	mov	r20,r2
   82ad8:	8000021e 	bne	r16,zero,82ae4 <__register_exitproc+0x50>
   82adc:	1c000d04 	addi	r16,r3,52
   82ae0:	1c000c15 	stw	r16,48(r3)
   82ae4:	80800117 	ldw	r2,4(r16)
   82ae8:	00c007c4 	movi	r3,31
   82aec:	1880110e 	bge	r3,r2,82b34 <__register_exitproc+0xa0>
   82af0:	00800034 	movhi	r2,0
   82af4:	10800004 	addi	r2,r2,0
   82af8:	1000021e 	bne	r2,zero,82b04 <__register_exitproc+0x70>
   82afc:	00bfffc4 	movi	r2,-1
   82b00:	00003106 	br	82bc8 <__register_exitproc+0x134>
   82b04:	01002304 	movi	r4,140
   82b08:	00000000 	call	0 <__alt_mem_sdram_controller>
   82b0c:	1021883a 	mov	r16,r2
   82b10:	103ffa26 	beq	r2,zero,82afc <_gp+0xffff71d8>
   82b14:	10000115 	stw	zero,4(r2)
   82b18:	a0800017 	ldw	r2,0(r20)
   82b1c:	10c00c17 	ldw	r3,48(r2)
   82b20:	80c00015 	stw	r3,0(r16)
   82b24:	14000c15 	stw	r16,48(r2)
   82b28:	80002215 	stw	zero,136(r16)
   82b2c:	a8001d26 	beq	r21,zero,82ba4 <__register_exitproc+0x110>
   82b30:	00000606 	br	82b4c <__register_exitproc+0xb8>
   82b34:	a8001b26 	beq	r21,zero,82ba4 <__register_exitproc+0x110>
   82b38:	80802217 	ldw	r2,136(r16)
   82b3c:	1000091e 	bne	r2,zero,82b64 <__register_exitproc+0xd0>
   82b40:	00800034 	movhi	r2,0
   82b44:	10800004 	addi	r2,r2,0
   82b48:	103fec26 	beq	r2,zero,82afc <_gp+0xffff71d8>
   82b4c:	01004204 	movi	r4,264
   82b50:	00000000 	call	0 <__alt_mem_sdram_controller>
   82b54:	103fe926 	beq	r2,zero,82afc <_gp+0xffff71d8>
   82b58:	10004015 	stw	zero,256(r2)
   82b5c:	10004115 	stw	zero,260(r2)
   82b60:	80802215 	stw	r2,136(r16)
   82b64:	81400117 	ldw	r5,4(r16)
   82b68:	01000044 	movi	r4,1
   82b6c:	2947883a 	add	r3,r5,r5
   82b70:	18c7883a 	add	r3,r3,r3
   82b74:	10c7883a 	add	r3,r2,r3
   82b78:	1cc00015 	stw	r19,0(r3)
   82b7c:	2148983a 	sll	r4,r4,r5
   82b80:	11404017 	ldw	r5,256(r2)
   82b84:	290ab03a 	or	r5,r5,r4
   82b88:	11404015 	stw	r5,256(r2)
   82b8c:	1c802015 	stw	r18,128(r3)
   82b90:	00c00084 	movi	r3,2
   82b94:	a8c0031e 	bne	r21,r3,82ba4 <__register_exitproc+0x110>
   82b98:	10c04117 	ldw	r3,260(r2)
   82b9c:	1908b03a 	or	r4,r3,r4
   82ba0:	11004115 	stw	r4,260(r2)
   82ba4:	80800117 	ldw	r2,4(r16)
   82ba8:	10c00044 	addi	r3,r2,1
   82bac:	10800084 	addi	r2,r2,2
   82bb0:	1085883a 	add	r2,r2,r2
   82bb4:	1085883a 	add	r2,r2,r2
   82bb8:	80c00115 	stw	r3,4(r16)
   82bbc:	80a1883a 	add	r16,r16,r2
   82bc0:	84400015 	stw	r17,0(r16)
   82bc4:	0005883a 	mov	r2,zero
   82bc8:	dfc00617 	ldw	ra,24(sp)
   82bcc:	dd400517 	ldw	r21,20(sp)
   82bd0:	dd000417 	ldw	r20,16(sp)
   82bd4:	dcc00317 	ldw	r19,12(sp)
   82bd8:	dc800217 	ldw	r18,8(sp)
   82bdc:	dc400117 	ldw	r17,4(sp)
   82be0:	dc000017 	ldw	r16,0(sp)
   82be4:	dec00704 	addi	sp,sp,28
   82be8:	f800283a 	ret

00082bec <__call_exitprocs>:
   82bec:	defff504 	addi	sp,sp,-44
   82bf0:	dd000515 	stw	r20,20(sp)
   82bf4:	05000234 	movhi	r20,8
   82bf8:	dc800315 	stw	r18,12(sp)
   82bfc:	dfc00a15 	stw	ra,40(sp)
   82c00:	df000915 	stw	fp,36(sp)
   82c04:	ddc00815 	stw	r23,32(sp)
   82c08:	dd800715 	stw	r22,28(sp)
   82c0c:	dd400615 	stw	r21,24(sp)
   82c10:	dcc00415 	stw	r19,16(sp)
   82c14:	dc400215 	stw	r17,8(sp)
   82c18:	dc000115 	stw	r16,4(sp)
   82c1c:	d9000015 	stw	r4,0(sp)
   82c20:	2825883a 	mov	r18,r5
   82c24:	a50e5204 	addi	r20,r20,14664
   82c28:	a4400017 	ldw	r17,0(r20)
   82c2c:	8cc00c17 	ldw	r19,48(r17)
   82c30:	8c400c04 	addi	r17,r17,48
   82c34:	98004526 	beq	r19,zero,82d4c <__call_exitprocs+0x160>
   82c38:	9c000117 	ldw	r16,4(r19)
   82c3c:	00900034 	movhi	r2,16384
   82c40:	10bfffc4 	addi	r2,r2,-1
   82c44:	9d402217 	ldw	r21,136(r19)
   82c48:	85bfffc4 	addi	r22,r16,-1
   82c4c:	80a1883a 	add	r16,r16,r2
   82c50:	8421883a 	add	r16,r16,r16
   82c54:	8421883a 	add	r16,r16,r16
   82c58:	ac2f883a 	add	r23,r21,r16
   82c5c:	84000204 	addi	r16,r16,8
   82c60:	9c21883a 	add	r16,r19,r16
   82c64:	b0002716 	blt	r22,zero,82d04 <__call_exitprocs+0x118>
   82c68:	90000726 	beq	r18,zero,82c88 <__call_exitprocs+0x9c>
   82c6c:	a800041e 	bne	r21,zero,82c80 <__call_exitprocs+0x94>
   82c70:	b5bfffc4 	addi	r22,r22,-1
   82c74:	bdffff04 	addi	r23,r23,-4
   82c78:	843fff04 	addi	r16,r16,-4
   82c7c:	003ff906 	br	82c64 <_gp+0xffff7340>
   82c80:	b9002017 	ldw	r4,128(r23)
   82c84:	913ffa1e 	bne	r18,r4,82c70 <_gp+0xffff734c>
   82c88:	99000117 	ldw	r4,4(r19)
   82c8c:	82000017 	ldw	r8,0(r16)
   82c90:	213fffc4 	addi	r4,r4,-1
   82c94:	b100021e 	bne	r22,r4,82ca0 <__call_exitprocs+0xb4>
   82c98:	9d800115 	stw	r22,4(r19)
   82c9c:	00000106 	br	82ca4 <__call_exitprocs+0xb8>
   82ca0:	80000015 	stw	zero,0(r16)
   82ca4:	403ff226 	beq	r8,zero,82c70 <_gp+0xffff734c>
   82ca8:	9f000117 	ldw	fp,4(r19)
   82cac:	a8000526 	beq	r21,zero,82cc4 <__call_exitprocs+0xd8>
   82cb0:	00800044 	movi	r2,1
   82cb4:	1592983a 	sll	r9,r2,r22
   82cb8:	a9404017 	ldw	r5,256(r21)
   82cbc:	494a703a 	and	r5,r9,r5
   82cc0:	2800021e 	bne	r5,zero,82ccc <__call_exitprocs+0xe0>
   82cc4:	403ee83a 	callr	r8
   82cc8:	00000906 	br	82cf0 <__call_exitprocs+0x104>
   82ccc:	a9004117 	ldw	r4,260(r21)
   82cd0:	4908703a 	and	r4,r9,r4
   82cd4:	2000041e 	bne	r4,zero,82ce8 <__call_exitprocs+0xfc>
   82cd8:	b9400017 	ldw	r5,0(r23)
   82cdc:	d9000017 	ldw	r4,0(sp)
   82ce0:	403ee83a 	callr	r8
   82ce4:	00000206 	br	82cf0 <__call_exitprocs+0x104>
   82ce8:	b9000017 	ldw	r4,0(r23)
   82cec:	403ee83a 	callr	r8
   82cf0:	99000117 	ldw	r4,4(r19)
   82cf4:	e13fcc1e 	bne	fp,r4,82c28 <_gp+0xffff7304>
   82cf8:	89000017 	ldw	r4,0(r17)
   82cfc:	993fdc26 	beq	r19,r4,82c70 <_gp+0xffff734c>
   82d00:	003fc906 	br	82c28 <_gp+0xffff7304>
   82d04:	00800034 	movhi	r2,0
   82d08:	10800004 	addi	r2,r2,0
   82d0c:	10000f26 	beq	r2,zero,82d4c <__call_exitprocs+0x160>
   82d10:	99400117 	ldw	r5,4(r19)
   82d14:	99000017 	ldw	r4,0(r19)
   82d18:	2800091e 	bne	r5,zero,82d40 <__call_exitprocs+0x154>
   82d1c:	20000826 	beq	r4,zero,82d40 <__call_exitprocs+0x154>
   82d20:	89000015 	stw	r4,0(r17)
   82d24:	a8000226 	beq	r21,zero,82d30 <__call_exitprocs+0x144>
   82d28:	a809883a 	mov	r4,r21
   82d2c:	00000000 	call	0 <__alt_mem_sdram_controller>
   82d30:	9809883a 	mov	r4,r19
   82d34:	00000000 	call	0 <__alt_mem_sdram_controller>
   82d38:	8cc00017 	ldw	r19,0(r17)
   82d3c:	003fbd06 	br	82c34 <_gp+0xffff7310>
   82d40:	9823883a 	mov	r17,r19
   82d44:	2027883a 	mov	r19,r4
   82d48:	003fba06 	br	82c34 <_gp+0xffff7310>
   82d4c:	dfc00a17 	ldw	ra,40(sp)
   82d50:	df000917 	ldw	fp,36(sp)
   82d54:	ddc00817 	ldw	r23,32(sp)
   82d58:	dd800717 	ldw	r22,28(sp)
   82d5c:	dd400617 	ldw	r21,24(sp)
   82d60:	dd000517 	ldw	r20,20(sp)
   82d64:	dcc00417 	ldw	r19,16(sp)
   82d68:	dc800317 	ldw	r18,12(sp)
   82d6c:	dc400217 	ldw	r17,8(sp)
   82d70:	dc000117 	ldw	r16,4(sp)
   82d74:	dec00b04 	addi	sp,sp,44
   82d78:	f800283a 	ret

00082d7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   82d7c:	defffd04 	addi	sp,sp,-12
   82d80:	df000215 	stw	fp,8(sp)
   82d84:	df000204 	addi	fp,sp,8
   82d88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   82d8c:	0001883a 	nop
   82d90:	e0bfff17 	ldw	r2,-4(fp)
   82d94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   82d98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   82d9c:	10000226 	beq	r2,zero,82da8 <_exit+0x2c>
    ALT_SIM_FAIL();
   82da0:	002af070 	cmpltui	zero,zero,43969
   82da4:	00000106 	br	82dac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   82da8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   82dac:	003fff06 	br	82dac <_gp+0xffff7488>


1b_r.elf:     file format elf32-littlenios2
1b_r.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006098 memsz 0x00006098 flags r-x
    LOAD off    0x000070b8 vaddr 0x000260b8 paddr 0x00027b9c align 2**12
         filesz 0x00001ae4 memsz 0x00001ae4 flags rw-
    LOAD off    0x00009680 vaddr 0x00029680 paddr 0x00029680 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e0c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  0002603c  0002603c  0000703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae4  000260b8  00027b9c  000070b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00029680  00029680  00009680  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  000297dc  000297dc  00008b9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008b9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  00008bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016bed  00000000  00000000  00009650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006255  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006bf1  00000000  00000000  00026492  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001954  00000000  00000000  0002d084  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b10  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000314e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00035fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039102  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00039105  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003910b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003910c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003910d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00039111  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00039115  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  00039119  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  00039125  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  00039131  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0003913d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00039145  2**0
                  CONTENTS, READONLY
 29 .jdi          0001a8cc  00000000  00000000  00039164  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001b57e3  00000000  00000000  00053a30  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
0002603c l    d  .rodata	00000000 .rodata
000260b8 l    d  .rwdata	00000000 .rwdata
00029680 l    d  .bss	00000000 .bss
000297dc l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1b_r_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000206e4 l     F .text	00000008 __fp_unlock
000206f8 l     F .text	0000019c __sinit.part.1
00020894 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026130 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023498 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000234c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000235b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000236a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002378c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027b8c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023bdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023d18 l     F .text	00000034 alt_dev_reg
00026b04 l     O .rwdata	00001060 jtag_uart_1b
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00024520 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002472c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00024d64 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024fa4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025404 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00025564 l     F .text	0000003c alt_get_errno
000255a0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000296b0 g     O .bss	00000004 alt_instruction_exception_handler
00023154 g     F .text	00000054 _isatty_r
000238a4 g     F .text	0000007c alt_main
00020578 g     F .text	000000c0 _puts_r
000296dc g     O .bss	00000100 alt_irq
000260c4 g     O .rwdata	0000000c q1c
00022e7c g     F .text	00000060 _lseek_r
00024080 g     F .text	0000005c altera_avalon_fifo_write_almostfull
00027b9c g       *ABS*	00000000 __flash_rwdata_start
000297dc g       *ABS*	00000000 __alt_heap_start
00022430 g     F .text	0000005c __sseek
00020a44 g     F .text	00000010 __sinit
0002089c g     F .text	00000078 __sfmoreglue
00026118 g     O .rwdata	0000000c q5
00023944 g     F .text	00000024 __malloc_unlock
00021b1c g     F .text	0000015c memmove
00023df8 g     F .text	00000098 altera_avalon_fifo_init
00020a2c g     F .text	00000018 _cleanup
00024138 g     F .text	00000058 altera_avalon_fifo_write_fifo
0002598c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
000242d4 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
000230f8 g     F .text	0000005c _fstat_r
00029694 g     O .bss	00000004 errno
000223ac g     F .text	00000008 __seofread
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0002969c g     O .bss	00000004 alt_argv
0002fb64 g       *ABS*	00000000 _gp
00023fc4 g     F .text	00000060 altera_avalon_fifo_clear_event
00026984 g     O .rwdata	00000180 alt_fd_list
000259b0 g     F .text	00000090 alt_find_dev
000219d4 g     F .text	00000148 memcpy
000206ec g     F .text	0000000c _cleanup_r
000254e8 g     F .text	0000007c alt_io_redirect
0002603c g       *ABS*	00000000 __DTOR_END__
00020638 g     F .text	00000014 puts
00025c0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000260f4 g     O .rwdata	0000000c q2
00024924 g     F .text	0000021c altera_avalon_jtag_uart_read
000232a0 g     F .text	00000064 .hidden __udivsi3
000235f4 g     F .text	000000ac isatty
00029690 g     O .bss	00000004 __malloc_top_pad
00020a94 g     F .text	000004c8 __sfvwrite_r
00022304 g     F .text	00000054 _sbrk_r
00023098 g     F .text	00000060 _read_r
00027b84 g     O .rwdata	00000004 alt_max_fd
0002269c g     F .text	000000f0 _fclose_r
00022a18 g     F .text	00000030 fflush
0002968c g     O .bss	00000004 __malloc_max_sbrked_mem
000237c8 g     F .text	000000dc lseek
00027b64 g     O .rwdata	00000004 _global_impure_ptr
00021da0 g     F .text	00000564 _realloc_r
000297dc g       *ABS*	00000000 __bss_end
00025314 g     F .text	000000f0 alt_iic_isr_register
00025884 g     F .text	00000108 alt_tick
00020a64 g     F .text	00000018 __fp_lock_all
000252c8 g     F .text	0000004c alt_ic_irq_enabled
000257e8 g     F .text	0000009c alt_alarm_stop
000296a4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002695c g     O .rwdata	00000028 alt_dev_null
00024f84 g     F .text	00000020 alt_dcache_flush_all
00024024 g     F .text	0000005c altera_avalon_fifo_write_ienable
00027b9c g       *ABS*	00000000 __ram_rwdata_end
00023f34 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00027b7c g     O .rwdata	00000008 alt_dev_list
00023c18 g     F .text	00000100 write
000260b8 g       *ABS*	00000000 __ram_rodata_end
00023500 g     F .text	000000b8 fstat
00029684 g     O .bss	00000004 INIT_USAGE_DEQ
000203a8 g     F .text	0000003c RECV2
00023304 g     F .text	00000058 .hidden __umodsi3
000297dc g       *ABS*	00000000 end
00024460 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00023f60 g     F .text	0000003c altera_avalon_fifo_read_event
0002603c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00024ddc g     F .text	0000007c alt_avalon_timer_sc_init
00024b40 g     F .text	00000224 altera_avalon_jtag_uart_write
00020a54 g     F .text	00000004 __sfp_lock_acquire
000241fc g     F .text	0000004c altera_avalon_fifo_read_fifo
000218f0 g     F .text	000000e4 memchr
00022b6c g     F .text	00000310 _free_r
00025e88 g     F .text	00000180 __call_exitprocs
00027b6c g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
000296a8 g     O .bss	00000004 _alt_tick_rate
00020468 g     F .text	0000008c enqueueINT32
000296ac g     O .bss	00000004 _alt_nticks
000239a4 g     F .text	00000104 read
00023d84 g     F .text	00000074 alt_sys_init
00025d70 g     F .text	00000118 __register_exitproc
000260d0 g     O .rwdata	0000000c q1d
00026100 g     O .rwdata	0000000c q3
000247cc g     F .text	00000068 altera_avalon_jtag_uart_close
0002335c g     F .text	00000028 .hidden __mulsi3
000260b8 g       *ABS*	00000000 __ram_rwdata_start
0002603c g       *ABS*	00000000 __ram_rodata_start
000296b4 g     O .bss	00000028 __malloc_current_mallinfo
000260e8 g     O .rwdata	0000000c q1
000242fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025b48 g     F .text	000000c4 alt_get_fd
00022648 g     F .text	00000054 _close_r
00025cf4 g     F .text	0000007c memcmp
000243bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000297dc g       *ABS*	00000000 __alt_stack_base
0002440c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000224f4 g     F .text	00000154 __swsetup_r
00023e90 g     F .text	0000003c altera_avalon_fifo_read_status
00020914 g     F .text	00000118 __sfp
00026554 g     O .rwdata	00000408 __malloc_av_
00020a60 g     F .text	00000004 __sinit_lock_release
00022358 g     F .text	00000054 __sread
000242a8 g     F .text	0000002c altera_avalon_fifo_read_other_info
00025a40 g     F .text	00000108 alt_find_file
00024fe0 g     F .text	000000a4 alt_dev_llist_insert
00023920 g     F .text	00000024 __malloc_lock
00023b2c g     F .text	000000b0 sbrk
000229bc g     F .text	0000005c _fflush_r
00029680 g       *ABS*	00000000 __bss_start
00021c78 g     F .text	00000128 memset
00020340 g     F .text	0000002c main
000296a0 g     O .bss	00000004 alt_envp
00029688 g     O .bss	00000004 __malloc_max_total_mem
0002435c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00023f9c g     F .text	00000028 altera_avalon_fifo_read_level
0002248c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002026c g     F .text	000000d4 levelshift
0002278c g     F .text	00000014 fclose
000210e4 g     F .text	0000080c _malloc_r
0002036c g     F .text	0000003c RECV1
00027b88 g     O .rwdata	00000004 alt_errno
000260b8 g     O .rwdata	0000000c q1b
00020f5c g     F .text	000000c4 _fwalk
000231a8 g     F .text	00000084 .hidden __divsi3
00022a48 g     F .text	00000124 _malloc_trim_r
0002603c g       *ABS*	00000000 __CTOR_END__
0002603c g       *ABS*	00000000 __flash_rodata_start
0002603c g       *ABS*	00000000 __DTOR_LIST__
00023d4c g     F .text	00000038 alt_irq_init
00023aa8 g     F .text	00000084 alt_release_fd
00025ca8 g     F .text	00000014 atexit
00022494 g     F .text	00000060 _write_r
00026124 g     O .rwdata	0000000c q6
00020420 g     F .text	00000048 SEND
00029680 g     O .bss	00000004 INIT_USAGE_ENQ
00027b68 g     O .rwdata	00000004 _impure_ptr
00029698 g     O .bss	00000004 alt_argc
000227a0 g     F .text	0000021c __sflush_r
000250e4 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020a7c g     F .text	00000018 __fp_unlock_all
000260dc g     O .rwdata	0000000c q1e
00027b74 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024248 g     F .text	00000060 altera_avalon_fifo_write_other_info
00025164 g     F .text	00000050 alt_ic_isr_register
00027b9c g       *ABS*	00000000 _edata
000297dc g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00024834 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002523c g     F .text	0000008c alt_ic_irq_disable
000223b4 g     F .text	0000007c __swrite
00027b70 g     O .rwdata	00000004 __malloc_trim_threshold
00025cbc g     F .text	00000038 exit
00021020 g     F .text	000000c4 _fwalk_reent
0002322c g     F .text	00000074 .hidden __modsi3
00023ecc g     F .text	0000003c altera_avalon_fifo_read_ienable
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020a58 g     F .text	00000004 __sfp_lock_release
00026008 g     F .text	00000034 _exit
00024e58 g     F .text	0000012c alt_alarm_start
00023f08 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00022edc g     F .text	000001bc __smakebuf_r
0002610c g     O .rwdata	0000000c q4
0002064c g     F .text	00000098 strlen
0002568c g     F .text	0000015c open
00024190 g     F .text	0000006c altera_avalon_read_fifo
000204f4 g     F .text	00000084 dequeueINT32
00025144 g     F .text	00000020 alt_icache_flush_all
00027b90 g     O .rwdata	00000004 alt_priority_mask
000251b4 g     F .text	00000088 alt_ic_irq_enable
000240dc g     F .text	0000005c altera_avalon_fifo_write_almostempty
00027b94 g     O .rwdata	00000008 alt_alarm_list
00025084 g     F .text	00000060 _do_ctors
000233c0 g     F .text	000000d8 close
00023708 g     F .text	00000084 alt_load
000203e4 g     F .text	0000003c RECV3
00020a5c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a5b704 	addi	r2,r2,-26916
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a5b704 	addi	r2,r2,-26916
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6d317 	ldw	r2,-25780(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6d317 	ldw	r2,-25780(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6bed914 	ori	gp,gp,64356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a5a014 	ori	r2,r2,38528

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e5f714 	ori	r3,r3,38876

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00237080 	call	23708 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00238a40 	call	238a4 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0268>

0002026c <levelshift>:

// TODO: Currently, this function is complete. But will have to change for hardware implementation.
// TODO: Remove hard limit -> back pressure
/* Level shifting to get 8 bit SIGNED values for the data  */
void levelshift(void)
{
   2026c:	defffd04 	addi	sp,sp,-12
   20270:	dfc00215 	stw	ra,8(sp)
   20274:	df000115 	stw	fp,4(sp)
   20278:	df000104 	addi	fp,sp,4

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	// should probably consider queue back pressure
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		for (j = 0; j < 64; j++)
   2027c:	e03fff0d 	sth	zero,-4(fp)
   20280:	00000b06 	br	202b0 <levelshift+0x44>
		{
			i = (INT16)RECV1();
   20284:	002036c0 	call	2036c <RECV1>
   20288:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   2028c:	e0bfff8b 	ldhu	r2,-2(fp)
   20290:	10bfe004 	addi	r2,r2,-128
   20294:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   20298:	e0bfff8f 	ldh	r2,-2(fp)
   2029c:	1009883a 	mov	r4,r2
   202a0:	00204200 	call	20420 <SEND>

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	// should probably consider queue back pressure
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		for (j = 0; j < 64; j++)
   202a4:	e0bfff0b 	ldhu	r2,-4(fp)
   202a8:	10800044 	addi	r2,r2,1
   202ac:	e0bfff0d 	sth	r2,-4(fp)
   202b0:	e0bfff0f 	ldh	r2,-4(fp)
   202b4:	10801010 	cmplti	r2,r2,64
   202b8:	103ff21e 	bne	r2,zero,20284 <__alt_data_end+0xfffe0284>
			i = (INT16)RECV1();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   202bc:	e03fff0d 	sth	zero,-4(fp)
   202c0:	00000b06 	br	202f0 <levelshift+0x84>
		{
			i = (INT16)RECV2();
   202c4:	00203a80 	call	203a8 <RECV2>
   202c8:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   202cc:	e0bfff8b 	ldhu	r2,-2(fp)
   202d0:	10bfe004 	addi	r2,r2,-128
   202d4:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   202d8:	e0bfff8f 	ldh	r2,-2(fp)
   202dc:	1009883a 	mov	r4,r2
   202e0:	00204200 	call	20420 <SEND>
			i = (INT16)RECV1();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   202e4:	e0bfff0b 	ldhu	r2,-4(fp)
   202e8:	10800044 	addi	r2,r2,1
   202ec:	e0bfff0d 	sth	r2,-4(fp)
   202f0:	e0bfff0f 	ldh	r2,-4(fp)
   202f4:	10801010 	cmplti	r2,r2,64
   202f8:	103ff21e 	bne	r2,zero,202c4 <__alt_data_end+0xfffe02c4>
			i = (INT16)RECV2();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   202fc:	e03fff0d 	sth	zero,-4(fp)
   20300:	00000b06 	br	20330 <levelshift+0xc4>
		{
			i = (INT16)RECV3();
   20304:	00203e40 	call	203e4 <RECV3>
   20308:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   2030c:	e0bfff8b 	ldhu	r2,-2(fp)
   20310:	10bfe004 	addi	r2,r2,-128
   20314:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   20318:	e0bfff8f 	ldh	r2,-2(fp)
   2031c:	1009883a 	mov	r4,r2
   20320:	00204200 	call	20420 <SEND>
			i = (INT16)RECV2();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   20324:	e0bfff0b 	ldhu	r2,-4(fp)
   20328:	10800044 	addi	r2,r2,1
   2032c:	e0bfff0d 	sth	r2,-4(fp)
   20330:	e0bfff0f 	ldh	r2,-4(fp)
   20334:	10801010 	cmplti	r2,r2,64
   20338:	103ff21e 	bne	r2,zero,20304 <__alt_data_end+0xfffe0304>
		{
			i = (INT16)RECV3();
			i -= 128;
			SEND(i);
		}
	}
   2033c:	003fcf06 	br	2027c <__alt_data_end+0xfffe027c>

00020340 <main>:
	// TODO: Do the actual implementation.

}

int main(void)
{
   20340:	defffe04 	addi	sp,sp,-8
   20344:	dfc00115 	stw	ra,4(sp)
   20348:	df000015 	stw	fp,0(sp)
   2034c:	d839883a 	mov	fp,sp
	levelshift();
   20350:	002026c0 	call	2026c <levelshift>

	return 0;
   20354:	0005883a 	mov	r2,zero
}
   20358:	e037883a 	mov	sp,fp
   2035c:	dfc00117 	ldw	ra,4(sp)
   20360:	df000017 	ldw	fp,0(sp)
   20364:	dec00204 	addi	sp,sp,8
   20368:	f800283a 	ret

0002036c <RECV1>:
#include <stdlib.h>

#include "../lib/q_mem_obj_def.h"

int RECV1()
{
   2036c:	defffe04 	addi	sp,sp,-8
   20370:	dfc00115 	stw	ra,4(sp)
   20374:	df000015 	stw	fp,0(sp)
   20378:	d839883a 	mov	fp,sp

    return dequeueINT32(q1);
   2037c:	008000b4 	movhi	r2,2
   20380:	10983a04 	addi	r2,r2,24808
   20384:	11000017 	ldw	r4,0(r2)
   20388:	11400117 	ldw	r5,4(r2)
   2038c:	11800217 	ldw	r6,8(r2)
   20390:	00204f40 	call	204f4 <dequeueINT32>
}
   20394:	e037883a 	mov	sp,fp
   20398:	dfc00117 	ldw	ra,4(sp)
   2039c:	df000017 	ldw	fp,0(sp)
   203a0:	dec00204 	addi	sp,sp,8
   203a4:	f800283a 	ret

000203a8 <RECV2>:

int RECV2()
{
   203a8:	defffe04 	addi	sp,sp,-8
   203ac:	dfc00115 	stw	ra,4(sp)
   203b0:	df000015 	stw	fp,0(sp)
   203b4:	d839883a 	mov	fp,sp

    return dequeueINT32(q2);
   203b8:	008000b4 	movhi	r2,2
   203bc:	10983d04 	addi	r2,r2,24820
   203c0:	11000017 	ldw	r4,0(r2)
   203c4:	11400117 	ldw	r5,4(r2)
   203c8:	11800217 	ldw	r6,8(r2)
   203cc:	00204f40 	call	204f4 <dequeueINT32>
}
   203d0:	e037883a 	mov	sp,fp
   203d4:	dfc00117 	ldw	ra,4(sp)
   203d8:	df000017 	ldw	fp,0(sp)
   203dc:	dec00204 	addi	sp,sp,8
   203e0:	f800283a 	ret

000203e4 <RECV3>:

int RECV3()
{
   203e4:	defffe04 	addi	sp,sp,-8
   203e8:	dfc00115 	stw	ra,4(sp)
   203ec:	df000015 	stw	fp,0(sp)
   203f0:	d839883a 	mov	fp,sp

    return dequeueINT32(q3);
   203f4:	008000b4 	movhi	r2,2
   203f8:	10984004 	addi	r2,r2,24832
   203fc:	11000017 	ldw	r4,0(r2)
   20400:	11400117 	ldw	r5,4(r2)
   20404:	11800217 	ldw	r6,8(r2)
   20408:	00204f40 	call	204f4 <dequeueINT32>
}
   2040c:	e037883a 	mov	sp,fp
   20410:	dfc00117 	ldw	ra,4(sp)
   20414:	df000017 	ldw	fp,0(sp)
   20418:	dec00204 	addi	sp,sp,8
   2041c:	f800283a 	ret

00020420 <SEND>:

void SEND(int data)
{
   20420:	defffd04 	addi	sp,sp,-12
   20424:	dfc00215 	stw	ra,8(sp)
   20428:	df000115 	stw	fp,4(sp)
   2042c:	df000104 	addi	fp,sp,4
   20430:	e13fff15 	stw	r4,-4(fp)
//	printf("%d\n",data);
    enqueueINT32(q1b, data);
   20434:	008000b4 	movhi	r2,2
   20438:	10982e04 	addi	r2,r2,24760
   2043c:	e1ffff17 	ldw	r7,-4(fp)
   20440:	11000017 	ldw	r4,0(r2)
   20444:	11400117 	ldw	r5,4(r2)
   20448:	11800217 	ldw	r6,8(r2)
   2044c:	00204680 	call	20468 <enqueueINT32>
}
   20450:	0001883a 	nop
   20454:	e037883a 	mov	sp,fp
   20458:	dfc00117 	ldw	ra,4(sp)
   2045c:	df000017 	ldw	fp,0(sp)
   20460:	dec00204 	addi	sp,sp,8
   20464:	f800283a 	ret

00020468 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   20468:	defffa04 	addi	sp,sp,-24
   2046c:	dfc00515 	stw	ra,20(sp)
   20470:	df000415 	stw	fp,16(sp)
   20474:	df000404 	addi	fp,sp,16
   20478:	e13ffc15 	stw	r4,-16(fp)
   2047c:	e17ffd15 	stw	r5,-12(fp)
   20480:	e1bffe15 	stw	r6,-8(fp)
   20484:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   20488:	0001883a 	nop
   2048c:	e0bffe17 	ldw	r2,-8(fp)
   20490:	01400044 	movi	r5,1
   20494:	1009883a 	mov	r4,r2
   20498:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   2049c:	103ffb1e 	bne	r2,zero,2048c <__alt_data_end+0xfffe048c>
	{}

    if (INIT_USAGE_ENQ == 0){
   204a0:	d0a6c717 	ldw	r2,-25828(gp)
   204a4:	1000051e 	bne	r2,zero,204bc <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   204a8:	00800044 	movi	r2,1
   204ac:	d0a6c715 	stw	r2,-25828(gp)
        printf("First time using enqueueINT32\n");
   204b0:	010000b4 	movhi	r4,2
   204b4:	21180f04 	addi	r4,r4,24636
   204b8:	00206380 	call	20638 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   204bc:	e0bffc17 	ldw	r2,-16(fp)
   204c0:	1007883a 	mov	r3,r2
   204c4:	e0bffe17 	ldw	r2,-8(fp)
   204c8:	1009883a 	mov	r4,r2
   204cc:	e0bfff17 	ldw	r2,-4(fp)
   204d0:	100d883a 	mov	r6,r2
   204d4:	200b883a 	mov	r5,r4
   204d8:	1809883a 	mov	r4,r3
   204dc:	00241380 	call	24138 <altera_avalon_fifo_write_fifo>
}
   204e0:	e037883a 	mov	sp,fp
   204e4:	dfc00117 	ldw	ra,4(sp)
   204e8:	df000017 	ldw	fp,0(sp)
   204ec:	dec00204 	addi	sp,sp,8
   204f0:	f800283a 	ret

000204f4 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   204f4:	defffa04 	addi	sp,sp,-24
   204f8:	dfc00515 	stw	ra,20(sp)
   204fc:	df000415 	stw	fp,16(sp)
   20500:	df000404 	addi	fp,sp,16
   20504:	e13ffd15 	stw	r4,-12(fp)
   20508:	e17ffe15 	stw	r5,-8(fp)
   2050c:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   20510:	0001883a 	nop
   20514:	e0bfff17 	ldw	r2,-4(fp)
   20518:	01400084 	movi	r5,2
   2051c:	1009883a 	mov	r4,r2
   20520:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   20524:	103ffb1e 	bne	r2,zero,20514 <__alt_data_end+0xfffe0514>
	{}

    if (INIT_USAGE_DEQ == 0){
   20528:	d0a6c817 	ldw	r2,-25824(gp)
   2052c:	1000051e 	bne	r2,zero,20544 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   20530:	00800044 	movi	r2,1
   20534:	d0a6c815 	stw	r2,-25824(gp)
        printf("First time using dequeueINT32\n");
   20538:	010000b4 	movhi	r4,2
   2053c:	21181704 	addi	r4,r4,24668
   20540:	00206380 	call	20638 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   20544:	e0bffe17 	ldw	r2,-8(fp)
   20548:	1007883a 	mov	r3,r2
   2054c:	e0bfff17 	ldw	r2,-4(fp)
   20550:	100b883a 	mov	r5,r2
   20554:	1809883a 	mov	r4,r3
   20558:	00241fc0 	call	241fc <altera_avalon_fifo_read_fifo>
   2055c:	e0bffc15 	stw	r2,-16(fp)

	return data;
   20560:	e0bffc17 	ldw	r2,-16(fp)
}
   20564:	e037883a 	mov	sp,fp
   20568:	dfc00117 	ldw	ra,4(sp)
   2056c:	df000017 	ldw	fp,0(sp)
   20570:	dec00204 	addi	sp,sp,8
   20574:	f800283a 	ret

00020578 <_puts_r>:
   20578:	defff604 	addi	sp,sp,-40
   2057c:	dc000715 	stw	r16,28(sp)
   20580:	2021883a 	mov	r16,r4
   20584:	2809883a 	mov	r4,r5
   20588:	dc400815 	stw	r17,32(sp)
   2058c:	dfc00915 	stw	ra,36(sp)
   20590:	2823883a 	mov	r17,r5
   20594:	002064c0 	call	2064c <strlen>
   20598:	10c00044 	addi	r3,r2,1
   2059c:	d8800115 	stw	r2,4(sp)
   205a0:	008000b4 	movhi	r2,2
   205a4:	10981f04 	addi	r2,r2,24700
   205a8:	d8800215 	stw	r2,8(sp)
   205ac:	00800044 	movi	r2,1
   205b0:	d8800315 	stw	r2,12(sp)
   205b4:	00800084 	movi	r2,2
   205b8:	dc400015 	stw	r17,0(sp)
   205bc:	d8c00615 	stw	r3,24(sp)
   205c0:	dec00415 	stw	sp,16(sp)
   205c4:	d8800515 	stw	r2,20(sp)
   205c8:	80000226 	beq	r16,zero,205d4 <_puts_r+0x5c>
   205cc:	80800e17 	ldw	r2,56(r16)
   205d0:	10001426 	beq	r2,zero,20624 <_puts_r+0xac>
   205d4:	81400217 	ldw	r5,8(r16)
   205d8:	2880030b 	ldhu	r2,12(r5)
   205dc:	10c8000c 	andi	r3,r2,8192
   205e0:	1800061e 	bne	r3,zero,205fc <_puts_r+0x84>
   205e4:	29001917 	ldw	r4,100(r5)
   205e8:	00f7ffc4 	movi	r3,-8193
   205ec:	10880014 	ori	r2,r2,8192
   205f0:	20c6703a 	and	r3,r4,r3
   205f4:	2880030d 	sth	r2,12(r5)
   205f8:	28c01915 	stw	r3,100(r5)
   205fc:	d9800404 	addi	r6,sp,16
   20600:	8009883a 	mov	r4,r16
   20604:	0020a940 	call	20a94 <__sfvwrite_r>
   20608:	1000091e 	bne	r2,zero,20630 <_puts_r+0xb8>
   2060c:	00800284 	movi	r2,10
   20610:	dfc00917 	ldw	ra,36(sp)
   20614:	dc400817 	ldw	r17,32(sp)
   20618:	dc000717 	ldw	r16,28(sp)
   2061c:	dec00a04 	addi	sp,sp,40
   20620:	f800283a 	ret
   20624:	8009883a 	mov	r4,r16
   20628:	0020a440 	call	20a44 <__sinit>
   2062c:	003fe906 	br	205d4 <__alt_data_end+0xfffe05d4>
   20630:	00bfffc4 	movi	r2,-1
   20634:	003ff606 	br	20610 <__alt_data_end+0xfffe0610>

00020638 <puts>:
   20638:	008000b4 	movhi	r2,2
   2063c:	109eda04 	addi	r2,r2,31592
   20640:	200b883a 	mov	r5,r4
   20644:	11000017 	ldw	r4,0(r2)
   20648:	00205781 	jmpi	20578 <_puts_r>

0002064c <strlen>:
   2064c:	208000cc 	andi	r2,r4,3
   20650:	10002026 	beq	r2,zero,206d4 <strlen+0x88>
   20654:	20800007 	ldb	r2,0(r4)
   20658:	10002026 	beq	r2,zero,206dc <strlen+0x90>
   2065c:	2005883a 	mov	r2,r4
   20660:	00000206 	br	2066c <strlen+0x20>
   20664:	10c00007 	ldb	r3,0(r2)
   20668:	18001826 	beq	r3,zero,206cc <strlen+0x80>
   2066c:	10800044 	addi	r2,r2,1
   20670:	10c000cc 	andi	r3,r2,3
   20674:	183ffb1e 	bne	r3,zero,20664 <__alt_data_end+0xfffe0664>
   20678:	10c00017 	ldw	r3,0(r2)
   2067c:	01ffbff4 	movhi	r7,65279
   20680:	39ffbfc4 	addi	r7,r7,-257
   20684:	00ca303a 	nor	r5,zero,r3
   20688:	01a02074 	movhi	r6,32897
   2068c:	19c7883a 	add	r3,r3,r7
   20690:	31a02004 	addi	r6,r6,-32640
   20694:	1946703a 	and	r3,r3,r5
   20698:	1986703a 	and	r3,r3,r6
   2069c:	1800091e 	bne	r3,zero,206c4 <strlen+0x78>
   206a0:	10800104 	addi	r2,r2,4
   206a4:	10c00017 	ldw	r3,0(r2)
   206a8:	19cb883a 	add	r5,r3,r7
   206ac:	00c6303a 	nor	r3,zero,r3
   206b0:	28c6703a 	and	r3,r5,r3
   206b4:	1986703a 	and	r3,r3,r6
   206b8:	183ff926 	beq	r3,zero,206a0 <__alt_data_end+0xfffe06a0>
   206bc:	00000106 	br	206c4 <strlen+0x78>
   206c0:	10800044 	addi	r2,r2,1
   206c4:	10c00007 	ldb	r3,0(r2)
   206c8:	183ffd1e 	bne	r3,zero,206c0 <__alt_data_end+0xfffe06c0>
   206cc:	1105c83a 	sub	r2,r2,r4
   206d0:	f800283a 	ret
   206d4:	2005883a 	mov	r2,r4
   206d8:	003fe706 	br	20678 <__alt_data_end+0xfffe0678>
   206dc:	0005883a 	mov	r2,zero
   206e0:	f800283a 	ret

000206e4 <__fp_unlock>:
   206e4:	0005883a 	mov	r2,zero
   206e8:	f800283a 	ret

000206ec <_cleanup_r>:
   206ec:	014000b4 	movhi	r5,2
   206f0:	2949a704 	addi	r5,r5,9884
   206f4:	00210201 	jmpi	21020 <_fwalk_reent>

000206f8 <__sinit.part.1>:
   206f8:	defff704 	addi	sp,sp,-36
   206fc:	00c000b4 	movhi	r3,2
   20700:	dfc00815 	stw	ra,32(sp)
   20704:	ddc00715 	stw	r23,28(sp)
   20708:	dd800615 	stw	r22,24(sp)
   2070c:	dd400515 	stw	r21,20(sp)
   20710:	dd000415 	stw	r20,16(sp)
   20714:	dcc00315 	stw	r19,12(sp)
   20718:	dc800215 	stw	r18,8(sp)
   2071c:	dc400115 	stw	r17,4(sp)
   20720:	dc000015 	stw	r16,0(sp)
   20724:	18c1bb04 	addi	r3,r3,1772
   20728:	24000117 	ldw	r16,4(r4)
   2072c:	20c00f15 	stw	r3,60(r4)
   20730:	2080bb04 	addi	r2,r4,748
   20734:	00c000c4 	movi	r3,3
   20738:	20c0b915 	stw	r3,740(r4)
   2073c:	2080ba15 	stw	r2,744(r4)
   20740:	2000b815 	stw	zero,736(r4)
   20744:	05c00204 	movi	r23,8
   20748:	00800104 	movi	r2,4
   2074c:	2025883a 	mov	r18,r4
   20750:	b80d883a 	mov	r6,r23
   20754:	81001704 	addi	r4,r16,92
   20758:	000b883a 	mov	r5,zero
   2075c:	80000015 	stw	zero,0(r16)
   20760:	80000115 	stw	zero,4(r16)
   20764:	80000215 	stw	zero,8(r16)
   20768:	8080030d 	sth	r2,12(r16)
   2076c:	80001915 	stw	zero,100(r16)
   20770:	8000038d 	sth	zero,14(r16)
   20774:	80000415 	stw	zero,16(r16)
   20778:	80000515 	stw	zero,20(r16)
   2077c:	80000615 	stw	zero,24(r16)
   20780:	0021c780 	call	21c78 <memset>
   20784:	058000b4 	movhi	r22,2
   20788:	94400217 	ldw	r17,8(r18)
   2078c:	054000b4 	movhi	r21,2
   20790:	050000b4 	movhi	r20,2
   20794:	04c000b4 	movhi	r19,2
   20798:	b588d604 	addi	r22,r22,9048
   2079c:	ad48ed04 	addi	r21,r21,9140
   207a0:	a5090c04 	addi	r20,r20,9264
   207a4:	9cc92304 	addi	r19,r19,9356
   207a8:	85800815 	stw	r22,32(r16)
   207ac:	85400915 	stw	r21,36(r16)
   207b0:	85000a15 	stw	r20,40(r16)
   207b4:	84c00b15 	stw	r19,44(r16)
   207b8:	84000715 	stw	r16,28(r16)
   207bc:	00800284 	movi	r2,10
   207c0:	8880030d 	sth	r2,12(r17)
   207c4:	00800044 	movi	r2,1
   207c8:	b80d883a 	mov	r6,r23
   207cc:	89001704 	addi	r4,r17,92
   207d0:	000b883a 	mov	r5,zero
   207d4:	88000015 	stw	zero,0(r17)
   207d8:	88000115 	stw	zero,4(r17)
   207dc:	88000215 	stw	zero,8(r17)
   207e0:	88001915 	stw	zero,100(r17)
   207e4:	8880038d 	sth	r2,14(r17)
   207e8:	88000415 	stw	zero,16(r17)
   207ec:	88000515 	stw	zero,20(r17)
   207f0:	88000615 	stw	zero,24(r17)
   207f4:	0021c780 	call	21c78 <memset>
   207f8:	94000317 	ldw	r16,12(r18)
   207fc:	00800484 	movi	r2,18
   20800:	8c400715 	stw	r17,28(r17)
   20804:	8d800815 	stw	r22,32(r17)
   20808:	8d400915 	stw	r21,36(r17)
   2080c:	8d000a15 	stw	r20,40(r17)
   20810:	8cc00b15 	stw	r19,44(r17)
   20814:	8080030d 	sth	r2,12(r16)
   20818:	00800084 	movi	r2,2
   2081c:	80000015 	stw	zero,0(r16)
   20820:	80000115 	stw	zero,4(r16)
   20824:	80000215 	stw	zero,8(r16)
   20828:	80001915 	stw	zero,100(r16)
   2082c:	8080038d 	sth	r2,14(r16)
   20830:	80000415 	stw	zero,16(r16)
   20834:	80000515 	stw	zero,20(r16)
   20838:	80000615 	stw	zero,24(r16)
   2083c:	b80d883a 	mov	r6,r23
   20840:	000b883a 	mov	r5,zero
   20844:	81001704 	addi	r4,r16,92
   20848:	0021c780 	call	21c78 <memset>
   2084c:	00800044 	movi	r2,1
   20850:	84000715 	stw	r16,28(r16)
   20854:	85800815 	stw	r22,32(r16)
   20858:	85400915 	stw	r21,36(r16)
   2085c:	85000a15 	stw	r20,40(r16)
   20860:	84c00b15 	stw	r19,44(r16)
   20864:	90800e15 	stw	r2,56(r18)
   20868:	dfc00817 	ldw	ra,32(sp)
   2086c:	ddc00717 	ldw	r23,28(sp)
   20870:	dd800617 	ldw	r22,24(sp)
   20874:	dd400517 	ldw	r21,20(sp)
   20878:	dd000417 	ldw	r20,16(sp)
   2087c:	dcc00317 	ldw	r19,12(sp)
   20880:	dc800217 	ldw	r18,8(sp)
   20884:	dc400117 	ldw	r17,4(sp)
   20888:	dc000017 	ldw	r16,0(sp)
   2088c:	dec00904 	addi	sp,sp,36
   20890:	f800283a 	ret

00020894 <__fp_lock>:
   20894:	0005883a 	mov	r2,zero
   20898:	f800283a 	ret

0002089c <__sfmoreglue>:
   2089c:	defffc04 	addi	sp,sp,-16
   208a0:	dc800215 	stw	r18,8(sp)
   208a4:	2825883a 	mov	r18,r5
   208a8:	dc000015 	stw	r16,0(sp)
   208ac:	01401a04 	movi	r5,104
   208b0:	2021883a 	mov	r16,r4
   208b4:	913fffc4 	addi	r4,r18,-1
   208b8:	dfc00315 	stw	ra,12(sp)
   208bc:	dc400115 	stw	r17,4(sp)
   208c0:	002335c0 	call	2335c <__mulsi3>
   208c4:	8009883a 	mov	r4,r16
   208c8:	11401d04 	addi	r5,r2,116
   208cc:	1023883a 	mov	r17,r2
   208d0:	00210e40 	call	210e4 <_malloc_r>
   208d4:	1021883a 	mov	r16,r2
   208d8:	10000726 	beq	r2,zero,208f8 <__sfmoreglue+0x5c>
   208dc:	11000304 	addi	r4,r2,12
   208e0:	10000015 	stw	zero,0(r2)
   208e4:	14800115 	stw	r18,4(r2)
   208e8:	11000215 	stw	r4,8(r2)
   208ec:	89801a04 	addi	r6,r17,104
   208f0:	000b883a 	mov	r5,zero
   208f4:	0021c780 	call	21c78 <memset>
   208f8:	8005883a 	mov	r2,r16
   208fc:	dfc00317 	ldw	ra,12(sp)
   20900:	dc800217 	ldw	r18,8(sp)
   20904:	dc400117 	ldw	r17,4(sp)
   20908:	dc000017 	ldw	r16,0(sp)
   2090c:	dec00404 	addi	sp,sp,16
   20910:	f800283a 	ret

00020914 <__sfp>:
   20914:	defffb04 	addi	sp,sp,-20
   20918:	dc000015 	stw	r16,0(sp)
   2091c:	040000b4 	movhi	r16,2
   20920:	841ed904 	addi	r16,r16,31588
   20924:	dcc00315 	stw	r19,12(sp)
   20928:	2027883a 	mov	r19,r4
   2092c:	81000017 	ldw	r4,0(r16)
   20930:	dfc00415 	stw	ra,16(sp)
   20934:	dc800215 	stw	r18,8(sp)
   20938:	20800e17 	ldw	r2,56(r4)
   2093c:	dc400115 	stw	r17,4(sp)
   20940:	1000021e 	bne	r2,zero,2094c <__sfp+0x38>
   20944:	00206f80 	call	206f8 <__sinit.part.1>
   20948:	81000017 	ldw	r4,0(r16)
   2094c:	2480b804 	addi	r18,r4,736
   20950:	047fffc4 	movi	r17,-1
   20954:	91000117 	ldw	r4,4(r18)
   20958:	94000217 	ldw	r16,8(r18)
   2095c:	213fffc4 	addi	r4,r4,-1
   20960:	20000a16 	blt	r4,zero,2098c <__sfp+0x78>
   20964:	8080030f 	ldh	r2,12(r16)
   20968:	10000c26 	beq	r2,zero,2099c <__sfp+0x88>
   2096c:	80c01d04 	addi	r3,r16,116
   20970:	00000206 	br	2097c <__sfp+0x68>
   20974:	18bfe60f 	ldh	r2,-104(r3)
   20978:	10000826 	beq	r2,zero,2099c <__sfp+0x88>
   2097c:	213fffc4 	addi	r4,r4,-1
   20980:	1c3ffd04 	addi	r16,r3,-12
   20984:	18c01a04 	addi	r3,r3,104
   20988:	247ffa1e 	bne	r4,r17,20974 <__alt_data_end+0xfffe0974>
   2098c:	90800017 	ldw	r2,0(r18)
   20990:	10001d26 	beq	r2,zero,20a08 <__sfp+0xf4>
   20994:	1025883a 	mov	r18,r2
   20998:	003fee06 	br	20954 <__alt_data_end+0xfffe0954>
   2099c:	00bfffc4 	movi	r2,-1
   209a0:	8080038d 	sth	r2,14(r16)
   209a4:	00800044 	movi	r2,1
   209a8:	8080030d 	sth	r2,12(r16)
   209ac:	80001915 	stw	zero,100(r16)
   209b0:	80000015 	stw	zero,0(r16)
   209b4:	80000215 	stw	zero,8(r16)
   209b8:	80000115 	stw	zero,4(r16)
   209bc:	80000415 	stw	zero,16(r16)
   209c0:	80000515 	stw	zero,20(r16)
   209c4:	80000615 	stw	zero,24(r16)
   209c8:	01800204 	movi	r6,8
   209cc:	000b883a 	mov	r5,zero
   209d0:	81001704 	addi	r4,r16,92
   209d4:	0021c780 	call	21c78 <memset>
   209d8:	8005883a 	mov	r2,r16
   209dc:	80000c15 	stw	zero,48(r16)
   209e0:	80000d15 	stw	zero,52(r16)
   209e4:	80001115 	stw	zero,68(r16)
   209e8:	80001215 	stw	zero,72(r16)
   209ec:	dfc00417 	ldw	ra,16(sp)
   209f0:	dcc00317 	ldw	r19,12(sp)
   209f4:	dc800217 	ldw	r18,8(sp)
   209f8:	dc400117 	ldw	r17,4(sp)
   209fc:	dc000017 	ldw	r16,0(sp)
   20a00:	dec00504 	addi	sp,sp,20
   20a04:	f800283a 	ret
   20a08:	01400104 	movi	r5,4
   20a0c:	9809883a 	mov	r4,r19
   20a10:	002089c0 	call	2089c <__sfmoreglue>
   20a14:	90800015 	stw	r2,0(r18)
   20a18:	103fde1e 	bne	r2,zero,20994 <__alt_data_end+0xfffe0994>
   20a1c:	00800304 	movi	r2,12
   20a20:	98800015 	stw	r2,0(r19)
   20a24:	0005883a 	mov	r2,zero
   20a28:	003ff006 	br	209ec <__alt_data_end+0xfffe09ec>

00020a2c <_cleanup>:
   20a2c:	008000b4 	movhi	r2,2
   20a30:	109ed904 	addi	r2,r2,31588
   20a34:	11000017 	ldw	r4,0(r2)
   20a38:	014000b4 	movhi	r5,2
   20a3c:	2949a704 	addi	r5,r5,9884
   20a40:	00210201 	jmpi	21020 <_fwalk_reent>

00020a44 <__sinit>:
   20a44:	20800e17 	ldw	r2,56(r4)
   20a48:	10000126 	beq	r2,zero,20a50 <__sinit+0xc>
   20a4c:	f800283a 	ret
   20a50:	00206f81 	jmpi	206f8 <__sinit.part.1>

00020a54 <__sfp_lock_acquire>:
   20a54:	f800283a 	ret

00020a58 <__sfp_lock_release>:
   20a58:	f800283a 	ret

00020a5c <__sinit_lock_acquire>:
   20a5c:	f800283a 	ret

00020a60 <__sinit_lock_release>:
   20a60:	f800283a 	ret

00020a64 <__fp_lock_all>:
   20a64:	008000b4 	movhi	r2,2
   20a68:	109eda04 	addi	r2,r2,31592
   20a6c:	11000017 	ldw	r4,0(r2)
   20a70:	014000b4 	movhi	r5,2
   20a74:	29422504 	addi	r5,r5,2196
   20a78:	0020f5c1 	jmpi	20f5c <_fwalk>

00020a7c <__fp_unlock_all>:
   20a7c:	008000b4 	movhi	r2,2
   20a80:	109eda04 	addi	r2,r2,31592
   20a84:	11000017 	ldw	r4,0(r2)
   20a88:	014000b4 	movhi	r5,2
   20a8c:	2941b904 	addi	r5,r5,1764
   20a90:	0020f5c1 	jmpi	20f5c <_fwalk>

00020a94 <__sfvwrite_r>:
   20a94:	30800217 	ldw	r2,8(r6)
   20a98:	10006726 	beq	r2,zero,20c38 <__sfvwrite_r+0x1a4>
   20a9c:	28c0030b 	ldhu	r3,12(r5)
   20aa0:	defff404 	addi	sp,sp,-48
   20aa4:	dd400715 	stw	r21,28(sp)
   20aa8:	dd000615 	stw	r20,24(sp)
   20aac:	dc000215 	stw	r16,8(sp)
   20ab0:	dfc00b15 	stw	ra,44(sp)
   20ab4:	df000a15 	stw	fp,40(sp)
   20ab8:	ddc00915 	stw	r23,36(sp)
   20abc:	dd800815 	stw	r22,32(sp)
   20ac0:	dcc00515 	stw	r19,20(sp)
   20ac4:	dc800415 	stw	r18,16(sp)
   20ac8:	dc400315 	stw	r17,12(sp)
   20acc:	1880020c 	andi	r2,r3,8
   20ad0:	2821883a 	mov	r16,r5
   20ad4:	202b883a 	mov	r21,r4
   20ad8:	3029883a 	mov	r20,r6
   20adc:	10002726 	beq	r2,zero,20b7c <__sfvwrite_r+0xe8>
   20ae0:	28800417 	ldw	r2,16(r5)
   20ae4:	10002526 	beq	r2,zero,20b7c <__sfvwrite_r+0xe8>
   20ae8:	1880008c 	andi	r2,r3,2
   20aec:	a4400017 	ldw	r17,0(r20)
   20af0:	10002a26 	beq	r2,zero,20b9c <__sfvwrite_r+0x108>
   20af4:	05a00034 	movhi	r22,32768
   20af8:	0027883a 	mov	r19,zero
   20afc:	0025883a 	mov	r18,zero
   20b00:	b5bf0004 	addi	r22,r22,-1024
   20b04:	980d883a 	mov	r6,r19
   20b08:	a809883a 	mov	r4,r21
   20b0c:	90004626 	beq	r18,zero,20c28 <__sfvwrite_r+0x194>
   20b10:	900f883a 	mov	r7,r18
   20b14:	b480022e 	bgeu	r22,r18,20b20 <__sfvwrite_r+0x8c>
   20b18:	01e00034 	movhi	r7,32768
   20b1c:	39ff0004 	addi	r7,r7,-1024
   20b20:	80800917 	ldw	r2,36(r16)
   20b24:	81400717 	ldw	r5,28(r16)
   20b28:	103ee83a 	callr	r2
   20b2c:	00805a0e 	bge	zero,r2,20c98 <__sfvwrite_r+0x204>
   20b30:	a0c00217 	ldw	r3,8(r20)
   20b34:	98a7883a 	add	r19,r19,r2
   20b38:	90a5c83a 	sub	r18,r18,r2
   20b3c:	1885c83a 	sub	r2,r3,r2
   20b40:	a0800215 	stw	r2,8(r20)
   20b44:	103fef1e 	bne	r2,zero,20b04 <__alt_data_end+0xfffe0b04>
   20b48:	0005883a 	mov	r2,zero
   20b4c:	dfc00b17 	ldw	ra,44(sp)
   20b50:	df000a17 	ldw	fp,40(sp)
   20b54:	ddc00917 	ldw	r23,36(sp)
   20b58:	dd800817 	ldw	r22,32(sp)
   20b5c:	dd400717 	ldw	r21,28(sp)
   20b60:	dd000617 	ldw	r20,24(sp)
   20b64:	dcc00517 	ldw	r19,20(sp)
   20b68:	dc800417 	ldw	r18,16(sp)
   20b6c:	dc400317 	ldw	r17,12(sp)
   20b70:	dc000217 	ldw	r16,8(sp)
   20b74:	dec00c04 	addi	sp,sp,48
   20b78:	f800283a 	ret
   20b7c:	800b883a 	mov	r5,r16
   20b80:	a809883a 	mov	r4,r21
   20b84:	00224f40 	call	224f4 <__swsetup_r>
   20b88:	1000ee1e 	bne	r2,zero,20f44 <__sfvwrite_r+0x4b0>
   20b8c:	80c0030b 	ldhu	r3,12(r16)
   20b90:	a4400017 	ldw	r17,0(r20)
   20b94:	1880008c 	andi	r2,r3,2
   20b98:	103fd61e 	bne	r2,zero,20af4 <__alt_data_end+0xfffe0af4>
   20b9c:	1880004c 	andi	r2,r3,1
   20ba0:	1000421e 	bne	r2,zero,20cac <__sfvwrite_r+0x218>
   20ba4:	0039883a 	mov	fp,zero
   20ba8:	0025883a 	mov	r18,zero
   20bac:	90001a26 	beq	r18,zero,20c18 <__sfvwrite_r+0x184>
   20bb0:	1880800c 	andi	r2,r3,512
   20bb4:	84c00217 	ldw	r19,8(r16)
   20bb8:	10002126 	beq	r2,zero,20c40 <__sfvwrite_r+0x1ac>
   20bbc:	982f883a 	mov	r23,r19
   20bc0:	94c09636 	bltu	r18,r19,20e1c <__sfvwrite_r+0x388>
   20bc4:	1881200c 	andi	r2,r3,1152
   20bc8:	1000a11e 	bne	r2,zero,20e50 <__sfvwrite_r+0x3bc>
   20bcc:	81000017 	ldw	r4,0(r16)
   20bd0:	b80d883a 	mov	r6,r23
   20bd4:	e00b883a 	mov	r5,fp
   20bd8:	0021b1c0 	call	21b1c <memmove>
   20bdc:	80c00217 	ldw	r3,8(r16)
   20be0:	81000017 	ldw	r4,0(r16)
   20be4:	9005883a 	mov	r2,r18
   20be8:	1ce7c83a 	sub	r19,r3,r19
   20bec:	25cf883a 	add	r7,r4,r23
   20bf0:	84c00215 	stw	r19,8(r16)
   20bf4:	81c00015 	stw	r7,0(r16)
   20bf8:	a0c00217 	ldw	r3,8(r20)
   20bfc:	e0b9883a 	add	fp,fp,r2
   20c00:	90a5c83a 	sub	r18,r18,r2
   20c04:	18a7c83a 	sub	r19,r3,r2
   20c08:	a4c00215 	stw	r19,8(r20)
   20c0c:	983fce26 	beq	r19,zero,20b48 <__alt_data_end+0xfffe0b48>
   20c10:	80c0030b 	ldhu	r3,12(r16)
   20c14:	903fe61e 	bne	r18,zero,20bb0 <__alt_data_end+0xfffe0bb0>
   20c18:	8f000017 	ldw	fp,0(r17)
   20c1c:	8c800117 	ldw	r18,4(r17)
   20c20:	8c400204 	addi	r17,r17,8
   20c24:	003fe106 	br	20bac <__alt_data_end+0xfffe0bac>
   20c28:	8cc00017 	ldw	r19,0(r17)
   20c2c:	8c800117 	ldw	r18,4(r17)
   20c30:	8c400204 	addi	r17,r17,8
   20c34:	003fb306 	br	20b04 <__alt_data_end+0xfffe0b04>
   20c38:	0005883a 	mov	r2,zero
   20c3c:	f800283a 	ret
   20c40:	81000017 	ldw	r4,0(r16)
   20c44:	80800417 	ldw	r2,16(r16)
   20c48:	11005a36 	bltu	r2,r4,20db4 <__sfvwrite_r+0x320>
   20c4c:	85c00517 	ldw	r23,20(r16)
   20c50:	95c05836 	bltu	r18,r23,20db4 <__sfvwrite_r+0x320>
   20c54:	00a00034 	movhi	r2,32768
   20c58:	10bfffc4 	addi	r2,r2,-1
   20c5c:	9009883a 	mov	r4,r18
   20c60:	1480012e 	bgeu	r2,r18,20c68 <__sfvwrite_r+0x1d4>
   20c64:	1009883a 	mov	r4,r2
   20c68:	b80b883a 	mov	r5,r23
   20c6c:	00231a80 	call	231a8 <__divsi3>
   20c70:	b80b883a 	mov	r5,r23
   20c74:	1009883a 	mov	r4,r2
   20c78:	002335c0 	call	2335c <__mulsi3>
   20c7c:	81400717 	ldw	r5,28(r16)
   20c80:	80c00917 	ldw	r3,36(r16)
   20c84:	100f883a 	mov	r7,r2
   20c88:	e00d883a 	mov	r6,fp
   20c8c:	a809883a 	mov	r4,r21
   20c90:	183ee83a 	callr	r3
   20c94:	00bfd816 	blt	zero,r2,20bf8 <__alt_data_end+0xfffe0bf8>
   20c98:	8080030b 	ldhu	r2,12(r16)
   20c9c:	10801014 	ori	r2,r2,64
   20ca0:	8080030d 	sth	r2,12(r16)
   20ca4:	00bfffc4 	movi	r2,-1
   20ca8:	003fa806 	br	20b4c <__alt_data_end+0xfffe0b4c>
   20cac:	0027883a 	mov	r19,zero
   20cb0:	0011883a 	mov	r8,zero
   20cb4:	0039883a 	mov	fp,zero
   20cb8:	0025883a 	mov	r18,zero
   20cbc:	90001f26 	beq	r18,zero,20d3c <__sfvwrite_r+0x2a8>
   20cc0:	40005a26 	beq	r8,zero,20e2c <__sfvwrite_r+0x398>
   20cc4:	982d883a 	mov	r22,r19
   20cc8:	94c0012e 	bgeu	r18,r19,20cd0 <__sfvwrite_r+0x23c>
   20ccc:	902d883a 	mov	r22,r18
   20cd0:	81000017 	ldw	r4,0(r16)
   20cd4:	80800417 	ldw	r2,16(r16)
   20cd8:	b02f883a 	mov	r23,r22
   20cdc:	81c00517 	ldw	r7,20(r16)
   20ce0:	1100032e 	bgeu	r2,r4,20cf0 <__sfvwrite_r+0x25c>
   20ce4:	80c00217 	ldw	r3,8(r16)
   20ce8:	38c7883a 	add	r3,r7,r3
   20cec:	1d801816 	blt	r3,r22,20d50 <__sfvwrite_r+0x2bc>
   20cf0:	b1c03e16 	blt	r22,r7,20dec <__sfvwrite_r+0x358>
   20cf4:	80800917 	ldw	r2,36(r16)
   20cf8:	81400717 	ldw	r5,28(r16)
   20cfc:	e00d883a 	mov	r6,fp
   20d00:	da000115 	stw	r8,4(sp)
   20d04:	a809883a 	mov	r4,r21
   20d08:	103ee83a 	callr	r2
   20d0c:	102f883a 	mov	r23,r2
   20d10:	da000117 	ldw	r8,4(sp)
   20d14:	00bfe00e 	bge	zero,r2,20c98 <__alt_data_end+0xfffe0c98>
   20d18:	9de7c83a 	sub	r19,r19,r23
   20d1c:	98001f26 	beq	r19,zero,20d9c <__sfvwrite_r+0x308>
   20d20:	a0800217 	ldw	r2,8(r20)
   20d24:	e5f9883a 	add	fp,fp,r23
   20d28:	95e5c83a 	sub	r18,r18,r23
   20d2c:	15efc83a 	sub	r23,r2,r23
   20d30:	a5c00215 	stw	r23,8(r20)
   20d34:	b83f8426 	beq	r23,zero,20b48 <__alt_data_end+0xfffe0b48>
   20d38:	903fe11e 	bne	r18,zero,20cc0 <__alt_data_end+0xfffe0cc0>
   20d3c:	8f000017 	ldw	fp,0(r17)
   20d40:	8c800117 	ldw	r18,4(r17)
   20d44:	0011883a 	mov	r8,zero
   20d48:	8c400204 	addi	r17,r17,8
   20d4c:	003fdb06 	br	20cbc <__alt_data_end+0xfffe0cbc>
   20d50:	180d883a 	mov	r6,r3
   20d54:	e00b883a 	mov	r5,fp
   20d58:	da000115 	stw	r8,4(sp)
   20d5c:	d8c00015 	stw	r3,0(sp)
   20d60:	0021b1c0 	call	21b1c <memmove>
   20d64:	d8c00017 	ldw	r3,0(sp)
   20d68:	80800017 	ldw	r2,0(r16)
   20d6c:	800b883a 	mov	r5,r16
   20d70:	a809883a 	mov	r4,r21
   20d74:	10c5883a 	add	r2,r2,r3
   20d78:	80800015 	stw	r2,0(r16)
   20d7c:	d8c00015 	stw	r3,0(sp)
   20d80:	00229bc0 	call	229bc <_fflush_r>
   20d84:	d8c00017 	ldw	r3,0(sp)
   20d88:	da000117 	ldw	r8,4(sp)
   20d8c:	103fc21e 	bne	r2,zero,20c98 <__alt_data_end+0xfffe0c98>
   20d90:	182f883a 	mov	r23,r3
   20d94:	9de7c83a 	sub	r19,r19,r23
   20d98:	983fe11e 	bne	r19,zero,20d20 <__alt_data_end+0xfffe0d20>
   20d9c:	800b883a 	mov	r5,r16
   20da0:	a809883a 	mov	r4,r21
   20da4:	00229bc0 	call	229bc <_fflush_r>
   20da8:	103fbb1e 	bne	r2,zero,20c98 <__alt_data_end+0xfffe0c98>
   20dac:	0011883a 	mov	r8,zero
   20db0:	003fdb06 	br	20d20 <__alt_data_end+0xfffe0d20>
   20db4:	94c0012e 	bgeu	r18,r19,20dbc <__sfvwrite_r+0x328>
   20db8:	9027883a 	mov	r19,r18
   20dbc:	980d883a 	mov	r6,r19
   20dc0:	e00b883a 	mov	r5,fp
   20dc4:	0021b1c0 	call	21b1c <memmove>
   20dc8:	80800217 	ldw	r2,8(r16)
   20dcc:	80c00017 	ldw	r3,0(r16)
   20dd0:	14c5c83a 	sub	r2,r2,r19
   20dd4:	1cc7883a 	add	r3,r3,r19
   20dd8:	80800215 	stw	r2,8(r16)
   20ddc:	80c00015 	stw	r3,0(r16)
   20de0:	10004326 	beq	r2,zero,20ef0 <__sfvwrite_r+0x45c>
   20de4:	9805883a 	mov	r2,r19
   20de8:	003f8306 	br	20bf8 <__alt_data_end+0xfffe0bf8>
   20dec:	b00d883a 	mov	r6,r22
   20df0:	e00b883a 	mov	r5,fp
   20df4:	da000115 	stw	r8,4(sp)
   20df8:	0021b1c0 	call	21b1c <memmove>
   20dfc:	80800217 	ldw	r2,8(r16)
   20e00:	80c00017 	ldw	r3,0(r16)
   20e04:	da000117 	ldw	r8,4(sp)
   20e08:	1585c83a 	sub	r2,r2,r22
   20e0c:	1dad883a 	add	r22,r3,r22
   20e10:	80800215 	stw	r2,8(r16)
   20e14:	85800015 	stw	r22,0(r16)
   20e18:	003fbf06 	br	20d18 <__alt_data_end+0xfffe0d18>
   20e1c:	81000017 	ldw	r4,0(r16)
   20e20:	9027883a 	mov	r19,r18
   20e24:	902f883a 	mov	r23,r18
   20e28:	003f6906 	br	20bd0 <__alt_data_end+0xfffe0bd0>
   20e2c:	900d883a 	mov	r6,r18
   20e30:	01400284 	movi	r5,10
   20e34:	e009883a 	mov	r4,fp
   20e38:	00218f00 	call	218f0 <memchr>
   20e3c:	10003e26 	beq	r2,zero,20f38 <__sfvwrite_r+0x4a4>
   20e40:	10800044 	addi	r2,r2,1
   20e44:	1727c83a 	sub	r19,r2,fp
   20e48:	02000044 	movi	r8,1
   20e4c:	003f9d06 	br	20cc4 <__alt_data_end+0xfffe0cc4>
   20e50:	80800517 	ldw	r2,20(r16)
   20e54:	81400417 	ldw	r5,16(r16)
   20e58:	81c00017 	ldw	r7,0(r16)
   20e5c:	10a7883a 	add	r19,r2,r2
   20e60:	9885883a 	add	r2,r19,r2
   20e64:	1026d7fa 	srli	r19,r2,31
   20e68:	396dc83a 	sub	r22,r7,r5
   20e6c:	b1000044 	addi	r4,r22,1
   20e70:	9885883a 	add	r2,r19,r2
   20e74:	1027d07a 	srai	r19,r2,1
   20e78:	2485883a 	add	r2,r4,r18
   20e7c:	980d883a 	mov	r6,r19
   20e80:	9880022e 	bgeu	r19,r2,20e8c <__sfvwrite_r+0x3f8>
   20e84:	1027883a 	mov	r19,r2
   20e88:	100d883a 	mov	r6,r2
   20e8c:	18c1000c 	andi	r3,r3,1024
   20e90:	18001c26 	beq	r3,zero,20f04 <__sfvwrite_r+0x470>
   20e94:	300b883a 	mov	r5,r6
   20e98:	a809883a 	mov	r4,r21
   20e9c:	00210e40 	call	210e4 <_malloc_r>
   20ea0:	102f883a 	mov	r23,r2
   20ea4:	10002926 	beq	r2,zero,20f4c <__sfvwrite_r+0x4b8>
   20ea8:	81400417 	ldw	r5,16(r16)
   20eac:	b00d883a 	mov	r6,r22
   20eb0:	1009883a 	mov	r4,r2
   20eb4:	00219d40 	call	219d4 <memcpy>
   20eb8:	8080030b 	ldhu	r2,12(r16)
   20ebc:	00fedfc4 	movi	r3,-1153
   20ec0:	10c4703a 	and	r2,r2,r3
   20ec4:	10802014 	ori	r2,r2,128
   20ec8:	8080030d 	sth	r2,12(r16)
   20ecc:	bd89883a 	add	r4,r23,r22
   20ed0:	9d8fc83a 	sub	r7,r19,r22
   20ed4:	85c00415 	stw	r23,16(r16)
   20ed8:	84c00515 	stw	r19,20(r16)
   20edc:	81000015 	stw	r4,0(r16)
   20ee0:	9027883a 	mov	r19,r18
   20ee4:	81c00215 	stw	r7,8(r16)
   20ee8:	902f883a 	mov	r23,r18
   20eec:	003f3806 	br	20bd0 <__alt_data_end+0xfffe0bd0>
   20ef0:	800b883a 	mov	r5,r16
   20ef4:	a809883a 	mov	r4,r21
   20ef8:	00229bc0 	call	229bc <_fflush_r>
   20efc:	103fb926 	beq	r2,zero,20de4 <__alt_data_end+0xfffe0de4>
   20f00:	003f6506 	br	20c98 <__alt_data_end+0xfffe0c98>
   20f04:	a809883a 	mov	r4,r21
   20f08:	0021da00 	call	21da0 <_realloc_r>
   20f0c:	102f883a 	mov	r23,r2
   20f10:	103fee1e 	bne	r2,zero,20ecc <__alt_data_end+0xfffe0ecc>
   20f14:	81400417 	ldw	r5,16(r16)
   20f18:	a809883a 	mov	r4,r21
   20f1c:	0022b6c0 	call	22b6c <_free_r>
   20f20:	8080030b 	ldhu	r2,12(r16)
   20f24:	00ffdfc4 	movi	r3,-129
   20f28:	1884703a 	and	r2,r3,r2
   20f2c:	00c00304 	movi	r3,12
   20f30:	a8c00015 	stw	r3,0(r21)
   20f34:	003f5906 	br	20c9c <__alt_data_end+0xfffe0c9c>
   20f38:	94c00044 	addi	r19,r18,1
   20f3c:	02000044 	movi	r8,1
   20f40:	003f6006 	br	20cc4 <__alt_data_end+0xfffe0cc4>
   20f44:	00bfffc4 	movi	r2,-1
   20f48:	003f0006 	br	20b4c <__alt_data_end+0xfffe0b4c>
   20f4c:	00800304 	movi	r2,12
   20f50:	a8800015 	stw	r2,0(r21)
   20f54:	8080030b 	ldhu	r2,12(r16)
   20f58:	003f5006 	br	20c9c <__alt_data_end+0xfffe0c9c>

00020f5c <_fwalk>:
   20f5c:	defff704 	addi	sp,sp,-36
   20f60:	dd000415 	stw	r20,16(sp)
   20f64:	dfc00815 	stw	ra,32(sp)
   20f68:	ddc00715 	stw	r23,28(sp)
   20f6c:	dd800615 	stw	r22,24(sp)
   20f70:	dd400515 	stw	r21,20(sp)
   20f74:	dcc00315 	stw	r19,12(sp)
   20f78:	dc800215 	stw	r18,8(sp)
   20f7c:	dc400115 	stw	r17,4(sp)
   20f80:	dc000015 	stw	r16,0(sp)
   20f84:	2500b804 	addi	r20,r4,736
   20f88:	a0002326 	beq	r20,zero,21018 <_fwalk+0xbc>
   20f8c:	282b883a 	mov	r21,r5
   20f90:	002f883a 	mov	r23,zero
   20f94:	05800044 	movi	r22,1
   20f98:	04ffffc4 	movi	r19,-1
   20f9c:	a4400117 	ldw	r17,4(r20)
   20fa0:	a4800217 	ldw	r18,8(r20)
   20fa4:	8c7fffc4 	addi	r17,r17,-1
   20fa8:	88000d16 	blt	r17,zero,20fe0 <_fwalk+0x84>
   20fac:	94000304 	addi	r16,r18,12
   20fb0:	94800384 	addi	r18,r18,14
   20fb4:	8080000b 	ldhu	r2,0(r16)
   20fb8:	8c7fffc4 	addi	r17,r17,-1
   20fbc:	813ffd04 	addi	r4,r16,-12
   20fc0:	b080042e 	bgeu	r22,r2,20fd4 <_fwalk+0x78>
   20fc4:	9080000f 	ldh	r2,0(r18)
   20fc8:	14c00226 	beq	r2,r19,20fd4 <_fwalk+0x78>
   20fcc:	a83ee83a 	callr	r21
   20fd0:	b8aeb03a 	or	r23,r23,r2
   20fd4:	84001a04 	addi	r16,r16,104
   20fd8:	94801a04 	addi	r18,r18,104
   20fdc:	8cfff51e 	bne	r17,r19,20fb4 <__alt_data_end+0xfffe0fb4>
   20fe0:	a5000017 	ldw	r20,0(r20)
   20fe4:	a03fed1e 	bne	r20,zero,20f9c <__alt_data_end+0xfffe0f9c>
   20fe8:	b805883a 	mov	r2,r23
   20fec:	dfc00817 	ldw	ra,32(sp)
   20ff0:	ddc00717 	ldw	r23,28(sp)
   20ff4:	dd800617 	ldw	r22,24(sp)
   20ff8:	dd400517 	ldw	r21,20(sp)
   20ffc:	dd000417 	ldw	r20,16(sp)
   21000:	dcc00317 	ldw	r19,12(sp)
   21004:	dc800217 	ldw	r18,8(sp)
   21008:	dc400117 	ldw	r17,4(sp)
   2100c:	dc000017 	ldw	r16,0(sp)
   21010:	dec00904 	addi	sp,sp,36
   21014:	f800283a 	ret
   21018:	002f883a 	mov	r23,zero
   2101c:	003ff206 	br	20fe8 <__alt_data_end+0xfffe0fe8>

00021020 <_fwalk_reent>:
   21020:	defff704 	addi	sp,sp,-36
   21024:	dd000415 	stw	r20,16(sp)
   21028:	dfc00815 	stw	ra,32(sp)
   2102c:	ddc00715 	stw	r23,28(sp)
   21030:	dd800615 	stw	r22,24(sp)
   21034:	dd400515 	stw	r21,20(sp)
   21038:	dcc00315 	stw	r19,12(sp)
   2103c:	dc800215 	stw	r18,8(sp)
   21040:	dc400115 	stw	r17,4(sp)
   21044:	dc000015 	stw	r16,0(sp)
   21048:	2500b804 	addi	r20,r4,736
   2104c:	a0002326 	beq	r20,zero,210dc <_fwalk_reent+0xbc>
   21050:	282b883a 	mov	r21,r5
   21054:	2027883a 	mov	r19,r4
   21058:	002f883a 	mov	r23,zero
   2105c:	05800044 	movi	r22,1
   21060:	04bfffc4 	movi	r18,-1
   21064:	a4400117 	ldw	r17,4(r20)
   21068:	a4000217 	ldw	r16,8(r20)
   2106c:	8c7fffc4 	addi	r17,r17,-1
   21070:	88000c16 	blt	r17,zero,210a4 <_fwalk_reent+0x84>
   21074:	84000304 	addi	r16,r16,12
   21078:	8080000b 	ldhu	r2,0(r16)
   2107c:	8c7fffc4 	addi	r17,r17,-1
   21080:	817ffd04 	addi	r5,r16,-12
   21084:	b080052e 	bgeu	r22,r2,2109c <_fwalk_reent+0x7c>
   21088:	8080008f 	ldh	r2,2(r16)
   2108c:	9809883a 	mov	r4,r19
   21090:	14800226 	beq	r2,r18,2109c <_fwalk_reent+0x7c>
   21094:	a83ee83a 	callr	r21
   21098:	b8aeb03a 	or	r23,r23,r2
   2109c:	84001a04 	addi	r16,r16,104
   210a0:	8cbff51e 	bne	r17,r18,21078 <__alt_data_end+0xfffe1078>
   210a4:	a5000017 	ldw	r20,0(r20)
   210a8:	a03fee1e 	bne	r20,zero,21064 <__alt_data_end+0xfffe1064>
   210ac:	b805883a 	mov	r2,r23
   210b0:	dfc00817 	ldw	ra,32(sp)
   210b4:	ddc00717 	ldw	r23,28(sp)
   210b8:	dd800617 	ldw	r22,24(sp)
   210bc:	dd400517 	ldw	r21,20(sp)
   210c0:	dd000417 	ldw	r20,16(sp)
   210c4:	dcc00317 	ldw	r19,12(sp)
   210c8:	dc800217 	ldw	r18,8(sp)
   210cc:	dc400117 	ldw	r17,4(sp)
   210d0:	dc000017 	ldw	r16,0(sp)
   210d4:	dec00904 	addi	sp,sp,36
   210d8:	f800283a 	ret
   210dc:	002f883a 	mov	r23,zero
   210e0:	003ff206 	br	210ac <__alt_data_end+0xfffe10ac>

000210e4 <_malloc_r>:
   210e4:	defff504 	addi	sp,sp,-44
   210e8:	dc800315 	stw	r18,12(sp)
   210ec:	dfc00a15 	stw	ra,40(sp)
   210f0:	df000915 	stw	fp,36(sp)
   210f4:	ddc00815 	stw	r23,32(sp)
   210f8:	dd800715 	stw	r22,28(sp)
   210fc:	dd400615 	stw	r21,24(sp)
   21100:	dd000515 	stw	r20,20(sp)
   21104:	dcc00415 	stw	r19,16(sp)
   21108:	dc400215 	stw	r17,8(sp)
   2110c:	dc000115 	stw	r16,4(sp)
   21110:	288002c4 	addi	r2,r5,11
   21114:	00c00584 	movi	r3,22
   21118:	2025883a 	mov	r18,r4
   2111c:	18807f2e 	bgeu	r3,r2,2131c <_malloc_r+0x238>
   21120:	047ffe04 	movi	r17,-8
   21124:	1462703a 	and	r17,r2,r17
   21128:	8800a316 	blt	r17,zero,213b8 <_malloc_r+0x2d4>
   2112c:	8940a236 	bltu	r17,r5,213b8 <_malloc_r+0x2d4>
   21130:	00239200 	call	23920 <__malloc_lock>
   21134:	00807dc4 	movi	r2,503
   21138:	1441e92e 	bgeu	r2,r17,218e0 <_malloc_r+0x7fc>
   2113c:	8804d27a 	srli	r2,r17,9
   21140:	1000a126 	beq	r2,zero,213c8 <_malloc_r+0x2e4>
   21144:	00c00104 	movi	r3,4
   21148:	18811e36 	bltu	r3,r2,215c4 <_malloc_r+0x4e0>
   2114c:	8804d1ba 	srli	r2,r17,6
   21150:	12000e44 	addi	r8,r2,57
   21154:	11c00e04 	addi	r7,r2,56
   21158:	4209883a 	add	r4,r8,r8
   2115c:	04c000b4 	movhi	r19,2
   21160:	2109883a 	add	r4,r4,r4
   21164:	9cd95504 	addi	r19,r19,25940
   21168:	2109883a 	add	r4,r4,r4
   2116c:	9909883a 	add	r4,r19,r4
   21170:	24000117 	ldw	r16,4(r4)
   21174:	213ffe04 	addi	r4,r4,-8
   21178:	24009726 	beq	r4,r16,213d8 <_malloc_r+0x2f4>
   2117c:	80800117 	ldw	r2,4(r16)
   21180:	01bfff04 	movi	r6,-4
   21184:	014003c4 	movi	r5,15
   21188:	1184703a 	and	r2,r2,r6
   2118c:	1447c83a 	sub	r3,r2,r17
   21190:	28c00716 	blt	r5,r3,211b0 <_malloc_r+0xcc>
   21194:	1800920e 	bge	r3,zero,213e0 <_malloc_r+0x2fc>
   21198:	84000317 	ldw	r16,12(r16)
   2119c:	24008e26 	beq	r4,r16,213d8 <_malloc_r+0x2f4>
   211a0:	80800117 	ldw	r2,4(r16)
   211a4:	1184703a 	and	r2,r2,r6
   211a8:	1447c83a 	sub	r3,r2,r17
   211ac:	28fff90e 	bge	r5,r3,21194 <__alt_data_end+0xfffe1194>
   211b0:	3809883a 	mov	r4,r7
   211b4:	018000b4 	movhi	r6,2
   211b8:	9c000417 	ldw	r16,16(r19)
   211bc:	31995504 	addi	r6,r6,25940
   211c0:	32000204 	addi	r8,r6,8
   211c4:	82013426 	beq	r16,r8,21698 <_malloc_r+0x5b4>
   211c8:	80c00117 	ldw	r3,4(r16)
   211cc:	00bfff04 	movi	r2,-4
   211d0:	188e703a 	and	r7,r3,r2
   211d4:	3c45c83a 	sub	r2,r7,r17
   211d8:	00c003c4 	movi	r3,15
   211dc:	18811f16 	blt	r3,r2,2165c <_malloc_r+0x578>
   211e0:	32000515 	stw	r8,20(r6)
   211e4:	32000415 	stw	r8,16(r6)
   211e8:	10007f0e 	bge	r2,zero,213e8 <_malloc_r+0x304>
   211ec:	00807fc4 	movi	r2,511
   211f0:	11c0fd36 	bltu	r2,r7,215e8 <_malloc_r+0x504>
   211f4:	3806d0fa 	srli	r3,r7,3
   211f8:	01c00044 	movi	r7,1
   211fc:	30800117 	ldw	r2,4(r6)
   21200:	19400044 	addi	r5,r3,1
   21204:	294b883a 	add	r5,r5,r5
   21208:	1807d0ba 	srai	r3,r3,2
   2120c:	294b883a 	add	r5,r5,r5
   21210:	294b883a 	add	r5,r5,r5
   21214:	298b883a 	add	r5,r5,r6
   21218:	38c6983a 	sll	r3,r7,r3
   2121c:	29c00017 	ldw	r7,0(r5)
   21220:	2a7ffe04 	addi	r9,r5,-8
   21224:	1886b03a 	or	r3,r3,r2
   21228:	82400315 	stw	r9,12(r16)
   2122c:	81c00215 	stw	r7,8(r16)
   21230:	30c00115 	stw	r3,4(r6)
   21234:	2c000015 	stw	r16,0(r5)
   21238:	3c000315 	stw	r16,12(r7)
   2123c:	2005d0ba 	srai	r2,r4,2
   21240:	01400044 	movi	r5,1
   21244:	288a983a 	sll	r5,r5,r2
   21248:	19406f36 	bltu	r3,r5,21408 <_malloc_r+0x324>
   2124c:	28c4703a 	and	r2,r5,r3
   21250:	10000a1e 	bne	r2,zero,2127c <_malloc_r+0x198>
   21254:	00bfff04 	movi	r2,-4
   21258:	294b883a 	add	r5,r5,r5
   2125c:	2088703a 	and	r4,r4,r2
   21260:	28c4703a 	and	r2,r5,r3
   21264:	21000104 	addi	r4,r4,4
   21268:	1000041e 	bne	r2,zero,2127c <_malloc_r+0x198>
   2126c:	294b883a 	add	r5,r5,r5
   21270:	28c4703a 	and	r2,r5,r3
   21274:	21000104 	addi	r4,r4,4
   21278:	103ffc26 	beq	r2,zero,2126c <__alt_data_end+0xfffe126c>
   2127c:	02bfff04 	movi	r10,-4
   21280:	024003c4 	movi	r9,15
   21284:	21800044 	addi	r6,r4,1
   21288:	318d883a 	add	r6,r6,r6
   2128c:	318d883a 	add	r6,r6,r6
   21290:	318d883a 	add	r6,r6,r6
   21294:	998d883a 	add	r6,r19,r6
   21298:	333ffe04 	addi	r12,r6,-8
   2129c:	2017883a 	mov	r11,r4
   212a0:	31800104 	addi	r6,r6,4
   212a4:	34000017 	ldw	r16,0(r6)
   212a8:	31fffd04 	addi	r7,r6,-12
   212ac:	81c0041e 	bne	r16,r7,212c0 <_malloc_r+0x1dc>
   212b0:	0000fb06 	br	216a0 <_malloc_r+0x5bc>
   212b4:	1801030e 	bge	r3,zero,216c4 <_malloc_r+0x5e0>
   212b8:	84000317 	ldw	r16,12(r16)
   212bc:	81c0f826 	beq	r16,r7,216a0 <_malloc_r+0x5bc>
   212c0:	80800117 	ldw	r2,4(r16)
   212c4:	1284703a 	and	r2,r2,r10
   212c8:	1447c83a 	sub	r3,r2,r17
   212cc:	48fff90e 	bge	r9,r3,212b4 <__alt_data_end+0xfffe12b4>
   212d0:	80800317 	ldw	r2,12(r16)
   212d4:	81000217 	ldw	r4,8(r16)
   212d8:	89400054 	ori	r5,r17,1
   212dc:	81400115 	stw	r5,4(r16)
   212e0:	20800315 	stw	r2,12(r4)
   212e4:	11000215 	stw	r4,8(r2)
   212e8:	8463883a 	add	r17,r16,r17
   212ec:	9c400515 	stw	r17,20(r19)
   212f0:	9c400415 	stw	r17,16(r19)
   212f4:	18800054 	ori	r2,r3,1
   212f8:	88800115 	stw	r2,4(r17)
   212fc:	8a000315 	stw	r8,12(r17)
   21300:	8a000215 	stw	r8,8(r17)
   21304:	88e3883a 	add	r17,r17,r3
   21308:	88c00015 	stw	r3,0(r17)
   2130c:	9009883a 	mov	r4,r18
   21310:	00239440 	call	23944 <__malloc_unlock>
   21314:	80800204 	addi	r2,r16,8
   21318:	00001b06 	br	21388 <_malloc_r+0x2a4>
   2131c:	04400404 	movi	r17,16
   21320:	89402536 	bltu	r17,r5,213b8 <_malloc_r+0x2d4>
   21324:	00239200 	call	23920 <__malloc_lock>
   21328:	00800184 	movi	r2,6
   2132c:	01000084 	movi	r4,2
   21330:	04c000b4 	movhi	r19,2
   21334:	1085883a 	add	r2,r2,r2
   21338:	9cd95504 	addi	r19,r19,25940
   2133c:	1085883a 	add	r2,r2,r2
   21340:	9885883a 	add	r2,r19,r2
   21344:	14000117 	ldw	r16,4(r2)
   21348:	10fffe04 	addi	r3,r2,-8
   2134c:	80c0d926 	beq	r16,r3,216b4 <_malloc_r+0x5d0>
   21350:	80c00117 	ldw	r3,4(r16)
   21354:	81000317 	ldw	r4,12(r16)
   21358:	00bfff04 	movi	r2,-4
   2135c:	1884703a 	and	r2,r3,r2
   21360:	81400217 	ldw	r5,8(r16)
   21364:	8085883a 	add	r2,r16,r2
   21368:	10c00117 	ldw	r3,4(r2)
   2136c:	29000315 	stw	r4,12(r5)
   21370:	21400215 	stw	r5,8(r4)
   21374:	18c00054 	ori	r3,r3,1
   21378:	10c00115 	stw	r3,4(r2)
   2137c:	9009883a 	mov	r4,r18
   21380:	00239440 	call	23944 <__malloc_unlock>
   21384:	80800204 	addi	r2,r16,8
   21388:	dfc00a17 	ldw	ra,40(sp)
   2138c:	df000917 	ldw	fp,36(sp)
   21390:	ddc00817 	ldw	r23,32(sp)
   21394:	dd800717 	ldw	r22,28(sp)
   21398:	dd400617 	ldw	r21,24(sp)
   2139c:	dd000517 	ldw	r20,20(sp)
   213a0:	dcc00417 	ldw	r19,16(sp)
   213a4:	dc800317 	ldw	r18,12(sp)
   213a8:	dc400217 	ldw	r17,8(sp)
   213ac:	dc000117 	ldw	r16,4(sp)
   213b0:	dec00b04 	addi	sp,sp,44
   213b4:	f800283a 	ret
   213b8:	00800304 	movi	r2,12
   213bc:	90800015 	stw	r2,0(r18)
   213c0:	0005883a 	mov	r2,zero
   213c4:	003ff006 	br	21388 <__alt_data_end+0xfffe1388>
   213c8:	01002004 	movi	r4,128
   213cc:	02001004 	movi	r8,64
   213d0:	01c00fc4 	movi	r7,63
   213d4:	003f6106 	br	2115c <__alt_data_end+0xfffe115c>
   213d8:	4009883a 	mov	r4,r8
   213dc:	003f7506 	br	211b4 <__alt_data_end+0xfffe11b4>
   213e0:	81000317 	ldw	r4,12(r16)
   213e4:	003fde06 	br	21360 <__alt_data_end+0xfffe1360>
   213e8:	81c5883a 	add	r2,r16,r7
   213ec:	11400117 	ldw	r5,4(r2)
   213f0:	9009883a 	mov	r4,r18
   213f4:	29400054 	ori	r5,r5,1
   213f8:	11400115 	stw	r5,4(r2)
   213fc:	00239440 	call	23944 <__malloc_unlock>
   21400:	80800204 	addi	r2,r16,8
   21404:	003fe006 	br	21388 <__alt_data_end+0xfffe1388>
   21408:	9c000217 	ldw	r16,8(r19)
   2140c:	00bfff04 	movi	r2,-4
   21410:	85800117 	ldw	r22,4(r16)
   21414:	b0ac703a 	and	r22,r22,r2
   21418:	b4400336 	bltu	r22,r17,21428 <_malloc_r+0x344>
   2141c:	b445c83a 	sub	r2,r22,r17
   21420:	00c003c4 	movi	r3,15
   21424:	18805d16 	blt	r3,r2,2159c <_malloc_r+0x4b8>
   21428:	05c000b4 	movhi	r23,2
   2142c:	008000f4 	movhi	r2,3
   21430:	10a5a404 	addi	r2,r2,-26992
   21434:	bddedb04 	addi	r23,r23,31596
   21438:	15400017 	ldw	r21,0(r2)
   2143c:	b8c00017 	ldw	r3,0(r23)
   21440:	00bfffc4 	movi	r2,-1
   21444:	858d883a 	add	r6,r16,r22
   21448:	8d6b883a 	add	r21,r17,r21
   2144c:	1880ea26 	beq	r3,r2,217f8 <_malloc_r+0x714>
   21450:	ad4403c4 	addi	r21,r21,4111
   21454:	00bc0004 	movi	r2,-4096
   21458:	a8aa703a 	and	r21,r21,r2
   2145c:	a80b883a 	mov	r5,r21
   21460:	9009883a 	mov	r4,r18
   21464:	d9800015 	stw	r6,0(sp)
   21468:	00223040 	call	22304 <_sbrk_r>
   2146c:	1029883a 	mov	r20,r2
   21470:	00bfffc4 	movi	r2,-1
   21474:	d9800017 	ldw	r6,0(sp)
   21478:	a080e826 	beq	r20,r2,2181c <_malloc_r+0x738>
   2147c:	a180a636 	bltu	r20,r6,21718 <_malloc_r+0x634>
   21480:	070000f4 	movhi	fp,3
   21484:	e725ad04 	addi	fp,fp,-26956
   21488:	e0800017 	ldw	r2,0(fp)
   2148c:	a887883a 	add	r3,r21,r2
   21490:	e0c00015 	stw	r3,0(fp)
   21494:	3500e626 	beq	r6,r20,21830 <_malloc_r+0x74c>
   21498:	b9000017 	ldw	r4,0(r23)
   2149c:	00bfffc4 	movi	r2,-1
   214a0:	2080ee26 	beq	r4,r2,2185c <_malloc_r+0x778>
   214a4:	a185c83a 	sub	r2,r20,r6
   214a8:	10c5883a 	add	r2,r2,r3
   214ac:	e0800015 	stw	r2,0(fp)
   214b0:	a0c001cc 	andi	r3,r20,7
   214b4:	1800bc26 	beq	r3,zero,217a8 <_malloc_r+0x6c4>
   214b8:	a0e9c83a 	sub	r20,r20,r3
   214bc:	00840204 	movi	r2,4104
   214c0:	a5000204 	addi	r20,r20,8
   214c4:	10c7c83a 	sub	r3,r2,r3
   214c8:	a545883a 	add	r2,r20,r21
   214cc:	1083ffcc 	andi	r2,r2,4095
   214d0:	18abc83a 	sub	r21,r3,r2
   214d4:	a80b883a 	mov	r5,r21
   214d8:	9009883a 	mov	r4,r18
   214dc:	00223040 	call	22304 <_sbrk_r>
   214e0:	00ffffc4 	movi	r3,-1
   214e4:	10c0e126 	beq	r2,r3,2186c <_malloc_r+0x788>
   214e8:	1505c83a 	sub	r2,r2,r20
   214ec:	1545883a 	add	r2,r2,r21
   214f0:	10800054 	ori	r2,r2,1
   214f4:	e0c00017 	ldw	r3,0(fp)
   214f8:	9d000215 	stw	r20,8(r19)
   214fc:	a0800115 	stw	r2,4(r20)
   21500:	a8c7883a 	add	r3,r21,r3
   21504:	e0c00015 	stw	r3,0(fp)
   21508:	84c00e26 	beq	r16,r19,21544 <_malloc_r+0x460>
   2150c:	018003c4 	movi	r6,15
   21510:	3580a72e 	bgeu	r6,r22,217b0 <_malloc_r+0x6cc>
   21514:	81400117 	ldw	r5,4(r16)
   21518:	013ffe04 	movi	r4,-8
   2151c:	b0bffd04 	addi	r2,r22,-12
   21520:	1104703a 	and	r2,r2,r4
   21524:	2900004c 	andi	r4,r5,1
   21528:	2088b03a 	or	r4,r4,r2
   2152c:	81000115 	stw	r4,4(r16)
   21530:	01400144 	movi	r5,5
   21534:	8089883a 	add	r4,r16,r2
   21538:	21400115 	stw	r5,4(r4)
   2153c:	21400215 	stw	r5,8(r4)
   21540:	3080cd36 	bltu	r6,r2,21878 <_malloc_r+0x794>
   21544:	008000f4 	movhi	r2,3
   21548:	10a5a304 	addi	r2,r2,-26996
   2154c:	11000017 	ldw	r4,0(r2)
   21550:	20c0012e 	bgeu	r4,r3,21558 <_malloc_r+0x474>
   21554:	10c00015 	stw	r3,0(r2)
   21558:	008000f4 	movhi	r2,3
   2155c:	10a5a204 	addi	r2,r2,-27000
   21560:	11000017 	ldw	r4,0(r2)
   21564:	9c000217 	ldw	r16,8(r19)
   21568:	20c0012e 	bgeu	r4,r3,21570 <_malloc_r+0x48c>
   2156c:	10c00015 	stw	r3,0(r2)
   21570:	80c00117 	ldw	r3,4(r16)
   21574:	00bfff04 	movi	r2,-4
   21578:	1886703a 	and	r3,r3,r2
   2157c:	1c45c83a 	sub	r2,r3,r17
   21580:	1c400236 	bltu	r3,r17,2158c <_malloc_r+0x4a8>
   21584:	00c003c4 	movi	r3,15
   21588:	18800416 	blt	r3,r2,2159c <_malloc_r+0x4b8>
   2158c:	9009883a 	mov	r4,r18
   21590:	00239440 	call	23944 <__malloc_unlock>
   21594:	0005883a 	mov	r2,zero
   21598:	003f7b06 	br	21388 <__alt_data_end+0xfffe1388>
   2159c:	88c00054 	ori	r3,r17,1
   215a0:	80c00115 	stw	r3,4(r16)
   215a4:	8463883a 	add	r17,r16,r17
   215a8:	10800054 	ori	r2,r2,1
   215ac:	9c400215 	stw	r17,8(r19)
   215b0:	88800115 	stw	r2,4(r17)
   215b4:	9009883a 	mov	r4,r18
   215b8:	00239440 	call	23944 <__malloc_unlock>
   215bc:	80800204 	addi	r2,r16,8
   215c0:	003f7106 	br	21388 <__alt_data_end+0xfffe1388>
   215c4:	00c00504 	movi	r3,20
   215c8:	18804a2e 	bgeu	r3,r2,216f4 <_malloc_r+0x610>
   215cc:	00c01504 	movi	r3,84
   215d0:	18806e36 	bltu	r3,r2,2178c <_malloc_r+0x6a8>
   215d4:	8804d33a 	srli	r2,r17,12
   215d8:	12001bc4 	addi	r8,r2,111
   215dc:	11c01b84 	addi	r7,r2,110
   215e0:	4209883a 	add	r4,r8,r8
   215e4:	003edd06 	br	2115c <__alt_data_end+0xfffe115c>
   215e8:	3804d27a 	srli	r2,r7,9
   215ec:	00c00104 	movi	r3,4
   215f0:	1880442e 	bgeu	r3,r2,21704 <_malloc_r+0x620>
   215f4:	00c00504 	movi	r3,20
   215f8:	18808136 	bltu	r3,r2,21800 <_malloc_r+0x71c>
   215fc:	11401704 	addi	r5,r2,92
   21600:	10c016c4 	addi	r3,r2,91
   21604:	294b883a 	add	r5,r5,r5
   21608:	294b883a 	add	r5,r5,r5
   2160c:	294b883a 	add	r5,r5,r5
   21610:	994b883a 	add	r5,r19,r5
   21614:	28800017 	ldw	r2,0(r5)
   21618:	018000b4 	movhi	r6,2
   2161c:	297ffe04 	addi	r5,r5,-8
   21620:	31995504 	addi	r6,r6,25940
   21624:	28806526 	beq	r5,r2,217bc <_malloc_r+0x6d8>
   21628:	01bfff04 	movi	r6,-4
   2162c:	10c00117 	ldw	r3,4(r2)
   21630:	1986703a 	and	r3,r3,r6
   21634:	38c0022e 	bgeu	r7,r3,21640 <_malloc_r+0x55c>
   21638:	10800217 	ldw	r2,8(r2)
   2163c:	28bffb1e 	bne	r5,r2,2162c <__alt_data_end+0xfffe162c>
   21640:	11400317 	ldw	r5,12(r2)
   21644:	98c00117 	ldw	r3,4(r19)
   21648:	81400315 	stw	r5,12(r16)
   2164c:	80800215 	stw	r2,8(r16)
   21650:	2c000215 	stw	r16,8(r5)
   21654:	14000315 	stw	r16,12(r2)
   21658:	003ef806 	br	2123c <__alt_data_end+0xfffe123c>
   2165c:	88c00054 	ori	r3,r17,1
   21660:	80c00115 	stw	r3,4(r16)
   21664:	8463883a 	add	r17,r16,r17
   21668:	34400515 	stw	r17,20(r6)
   2166c:	34400415 	stw	r17,16(r6)
   21670:	10c00054 	ori	r3,r2,1
   21674:	8a000315 	stw	r8,12(r17)
   21678:	8a000215 	stw	r8,8(r17)
   2167c:	88c00115 	stw	r3,4(r17)
   21680:	88a3883a 	add	r17,r17,r2
   21684:	88800015 	stw	r2,0(r17)
   21688:	9009883a 	mov	r4,r18
   2168c:	00239440 	call	23944 <__malloc_unlock>
   21690:	80800204 	addi	r2,r16,8
   21694:	003f3c06 	br	21388 <__alt_data_end+0xfffe1388>
   21698:	30c00117 	ldw	r3,4(r6)
   2169c:	003ee706 	br	2123c <__alt_data_end+0xfffe123c>
   216a0:	5ac00044 	addi	r11,r11,1
   216a4:	588000cc 	andi	r2,r11,3
   216a8:	31800204 	addi	r6,r6,8
   216ac:	103efd1e 	bne	r2,zero,212a4 <__alt_data_end+0xfffe12a4>
   216b0:	00002406 	br	21744 <_malloc_r+0x660>
   216b4:	14000317 	ldw	r16,12(r2)
   216b8:	143f251e 	bne	r2,r16,21350 <__alt_data_end+0xfffe1350>
   216bc:	21000084 	addi	r4,r4,2
   216c0:	003ebc06 	br	211b4 <__alt_data_end+0xfffe11b4>
   216c4:	8085883a 	add	r2,r16,r2
   216c8:	10c00117 	ldw	r3,4(r2)
   216cc:	81000317 	ldw	r4,12(r16)
   216d0:	81400217 	ldw	r5,8(r16)
   216d4:	18c00054 	ori	r3,r3,1
   216d8:	10c00115 	stw	r3,4(r2)
   216dc:	29000315 	stw	r4,12(r5)
   216e0:	21400215 	stw	r5,8(r4)
   216e4:	9009883a 	mov	r4,r18
   216e8:	00239440 	call	23944 <__malloc_unlock>
   216ec:	80800204 	addi	r2,r16,8
   216f0:	003f2506 	br	21388 <__alt_data_end+0xfffe1388>
   216f4:	12001704 	addi	r8,r2,92
   216f8:	11c016c4 	addi	r7,r2,91
   216fc:	4209883a 	add	r4,r8,r8
   21700:	003e9606 	br	2115c <__alt_data_end+0xfffe115c>
   21704:	3804d1ba 	srli	r2,r7,6
   21708:	11400e44 	addi	r5,r2,57
   2170c:	10c00e04 	addi	r3,r2,56
   21710:	294b883a 	add	r5,r5,r5
   21714:	003fbc06 	br	21608 <__alt_data_end+0xfffe1608>
   21718:	84ff5926 	beq	r16,r19,21480 <__alt_data_end+0xfffe1480>
   2171c:	008000b4 	movhi	r2,2
   21720:	10995504 	addi	r2,r2,25940
   21724:	14000217 	ldw	r16,8(r2)
   21728:	00bfff04 	movi	r2,-4
   2172c:	80c00117 	ldw	r3,4(r16)
   21730:	1886703a 	and	r3,r3,r2
   21734:	003f9106 	br	2157c <__alt_data_end+0xfffe157c>
   21738:	60800217 	ldw	r2,8(r12)
   2173c:	213fffc4 	addi	r4,r4,-1
   21740:	1300651e 	bne	r2,r12,218d8 <_malloc_r+0x7f4>
   21744:	208000cc 	andi	r2,r4,3
   21748:	633ffe04 	addi	r12,r12,-8
   2174c:	103ffa1e 	bne	r2,zero,21738 <__alt_data_end+0xfffe1738>
   21750:	98800117 	ldw	r2,4(r19)
   21754:	0146303a 	nor	r3,zero,r5
   21758:	1884703a 	and	r2,r3,r2
   2175c:	98800115 	stw	r2,4(r19)
   21760:	294b883a 	add	r5,r5,r5
   21764:	117f2836 	bltu	r2,r5,21408 <__alt_data_end+0xfffe1408>
   21768:	283f2726 	beq	r5,zero,21408 <__alt_data_end+0xfffe1408>
   2176c:	2886703a 	and	r3,r5,r2
   21770:	5809883a 	mov	r4,r11
   21774:	183ec31e 	bne	r3,zero,21284 <__alt_data_end+0xfffe1284>
   21778:	294b883a 	add	r5,r5,r5
   2177c:	2886703a 	and	r3,r5,r2
   21780:	21000104 	addi	r4,r4,4
   21784:	183ffc26 	beq	r3,zero,21778 <__alt_data_end+0xfffe1778>
   21788:	003ebe06 	br	21284 <__alt_data_end+0xfffe1284>
   2178c:	00c05504 	movi	r3,340
   21790:	18801236 	bltu	r3,r2,217dc <_malloc_r+0x6f8>
   21794:	8804d3fa 	srli	r2,r17,15
   21798:	12001e04 	addi	r8,r2,120
   2179c:	11c01dc4 	addi	r7,r2,119
   217a0:	4209883a 	add	r4,r8,r8
   217a4:	003e6d06 	br	2115c <__alt_data_end+0xfffe115c>
   217a8:	00c40004 	movi	r3,4096
   217ac:	003f4606 	br	214c8 <__alt_data_end+0xfffe14c8>
   217b0:	00800044 	movi	r2,1
   217b4:	a0800115 	stw	r2,4(r20)
   217b8:	003f7406 	br	2158c <__alt_data_end+0xfffe158c>
   217bc:	1805d0ba 	srai	r2,r3,2
   217c0:	01c00044 	movi	r7,1
   217c4:	30c00117 	ldw	r3,4(r6)
   217c8:	388e983a 	sll	r7,r7,r2
   217cc:	2805883a 	mov	r2,r5
   217d0:	38c6b03a 	or	r3,r7,r3
   217d4:	30c00115 	stw	r3,4(r6)
   217d8:	003f9b06 	br	21648 <__alt_data_end+0xfffe1648>
   217dc:	00c15504 	movi	r3,1364
   217e0:	18801a36 	bltu	r3,r2,2184c <_malloc_r+0x768>
   217e4:	8804d4ba 	srli	r2,r17,18
   217e8:	12001f44 	addi	r8,r2,125
   217ec:	11c01f04 	addi	r7,r2,124
   217f0:	4209883a 	add	r4,r8,r8
   217f4:	003e5906 	br	2115c <__alt_data_end+0xfffe115c>
   217f8:	ad400404 	addi	r21,r21,16
   217fc:	003f1706 	br	2145c <__alt_data_end+0xfffe145c>
   21800:	00c01504 	movi	r3,84
   21804:	18802336 	bltu	r3,r2,21894 <_malloc_r+0x7b0>
   21808:	3804d33a 	srli	r2,r7,12
   2180c:	11401bc4 	addi	r5,r2,111
   21810:	10c01b84 	addi	r3,r2,110
   21814:	294b883a 	add	r5,r5,r5
   21818:	003f7b06 	br	21608 <__alt_data_end+0xfffe1608>
   2181c:	9c000217 	ldw	r16,8(r19)
   21820:	00bfff04 	movi	r2,-4
   21824:	80c00117 	ldw	r3,4(r16)
   21828:	1886703a 	and	r3,r3,r2
   2182c:	003f5306 	br	2157c <__alt_data_end+0xfffe157c>
   21830:	3083ffcc 	andi	r2,r6,4095
   21834:	103f181e 	bne	r2,zero,21498 <__alt_data_end+0xfffe1498>
   21838:	99000217 	ldw	r4,8(r19)
   2183c:	b545883a 	add	r2,r22,r21
   21840:	10800054 	ori	r2,r2,1
   21844:	20800115 	stw	r2,4(r4)
   21848:	003f3e06 	br	21544 <__alt_data_end+0xfffe1544>
   2184c:	01003f84 	movi	r4,254
   21850:	02001fc4 	movi	r8,127
   21854:	01c01f84 	movi	r7,126
   21858:	003e4006 	br	2115c <__alt_data_end+0xfffe115c>
   2185c:	008000b4 	movhi	r2,2
   21860:	109edb04 	addi	r2,r2,31596
   21864:	15000015 	stw	r20,0(r2)
   21868:	003f1106 	br	214b0 <__alt_data_end+0xfffe14b0>
   2186c:	00800044 	movi	r2,1
   21870:	002b883a 	mov	r21,zero
   21874:	003f1f06 	br	214f4 <__alt_data_end+0xfffe14f4>
   21878:	81400204 	addi	r5,r16,8
   2187c:	9009883a 	mov	r4,r18
   21880:	0022b6c0 	call	22b6c <_free_r>
   21884:	008000f4 	movhi	r2,3
   21888:	10a5ad04 	addi	r2,r2,-26956
   2188c:	10c00017 	ldw	r3,0(r2)
   21890:	003f2c06 	br	21544 <__alt_data_end+0xfffe1544>
   21894:	00c05504 	movi	r3,340
   21898:	18800536 	bltu	r3,r2,218b0 <_malloc_r+0x7cc>
   2189c:	3804d3fa 	srli	r2,r7,15
   218a0:	11401e04 	addi	r5,r2,120
   218a4:	10c01dc4 	addi	r3,r2,119
   218a8:	294b883a 	add	r5,r5,r5
   218ac:	003f5606 	br	21608 <__alt_data_end+0xfffe1608>
   218b0:	00c15504 	movi	r3,1364
   218b4:	18800536 	bltu	r3,r2,218cc <_malloc_r+0x7e8>
   218b8:	3804d4ba 	srli	r2,r7,18
   218bc:	11401f44 	addi	r5,r2,125
   218c0:	10c01f04 	addi	r3,r2,124
   218c4:	294b883a 	add	r5,r5,r5
   218c8:	003f4f06 	br	21608 <__alt_data_end+0xfffe1608>
   218cc:	01403f84 	movi	r5,254
   218d0:	00c01f84 	movi	r3,126
   218d4:	003f4c06 	br	21608 <__alt_data_end+0xfffe1608>
   218d8:	98800117 	ldw	r2,4(r19)
   218dc:	003fa006 	br	21760 <__alt_data_end+0xfffe1760>
   218e0:	8808d0fa 	srli	r4,r17,3
   218e4:	20800044 	addi	r2,r4,1
   218e8:	1085883a 	add	r2,r2,r2
   218ec:	003e9006 	br	21330 <__alt_data_end+0xfffe1330>

000218f0 <memchr>:
   218f0:	208000cc 	andi	r2,r4,3
   218f4:	280f883a 	mov	r7,r5
   218f8:	10003426 	beq	r2,zero,219cc <memchr+0xdc>
   218fc:	30bfffc4 	addi	r2,r6,-1
   21900:	30001a26 	beq	r6,zero,2196c <memchr+0x7c>
   21904:	20c00003 	ldbu	r3,0(r4)
   21908:	29803fcc 	andi	r6,r5,255
   2190c:	30c0051e 	bne	r6,r3,21924 <memchr+0x34>
   21910:	00001806 	br	21974 <memchr+0x84>
   21914:	10001526 	beq	r2,zero,2196c <memchr+0x7c>
   21918:	20c00003 	ldbu	r3,0(r4)
   2191c:	10bfffc4 	addi	r2,r2,-1
   21920:	30c01426 	beq	r6,r3,21974 <memchr+0x84>
   21924:	21000044 	addi	r4,r4,1
   21928:	20c000cc 	andi	r3,r4,3
   2192c:	183ff91e 	bne	r3,zero,21914 <__alt_data_end+0xfffe1914>
   21930:	020000c4 	movi	r8,3
   21934:	40801136 	bltu	r8,r2,2197c <memchr+0x8c>
   21938:	10000c26 	beq	r2,zero,2196c <memchr+0x7c>
   2193c:	20c00003 	ldbu	r3,0(r4)
   21940:	29403fcc 	andi	r5,r5,255
   21944:	28c00b26 	beq	r5,r3,21974 <memchr+0x84>
   21948:	20c00044 	addi	r3,r4,1
   2194c:	39803fcc 	andi	r6,r7,255
   21950:	2089883a 	add	r4,r4,r2
   21954:	00000306 	br	21964 <memchr+0x74>
   21958:	18c00044 	addi	r3,r3,1
   2195c:	197fffc3 	ldbu	r5,-1(r3)
   21960:	31400526 	beq	r6,r5,21978 <memchr+0x88>
   21964:	1805883a 	mov	r2,r3
   21968:	20fffb1e 	bne	r4,r3,21958 <__alt_data_end+0xfffe1958>
   2196c:	0005883a 	mov	r2,zero
   21970:	f800283a 	ret
   21974:	2005883a 	mov	r2,r4
   21978:	f800283a 	ret
   2197c:	28c03fcc 	andi	r3,r5,255
   21980:	1812923a 	slli	r9,r3,8
   21984:	02ffbff4 	movhi	r11,65279
   21988:	02a02074 	movhi	r10,32897
   2198c:	48d2b03a 	or	r9,r9,r3
   21990:	4806943a 	slli	r3,r9,16
   21994:	5affbfc4 	addi	r11,r11,-257
   21998:	52a02004 	addi	r10,r10,-32640
   2199c:	48d2b03a 	or	r9,r9,r3
   219a0:	20c00017 	ldw	r3,0(r4)
   219a4:	48c6f03a 	xor	r3,r9,r3
   219a8:	1acd883a 	add	r6,r3,r11
   219ac:	00c6303a 	nor	r3,zero,r3
   219b0:	30c6703a 	and	r3,r6,r3
   219b4:	1a86703a 	and	r3,r3,r10
   219b8:	183fe01e 	bne	r3,zero,2193c <__alt_data_end+0xfffe193c>
   219bc:	10bfff04 	addi	r2,r2,-4
   219c0:	21000104 	addi	r4,r4,4
   219c4:	40bff636 	bltu	r8,r2,219a0 <__alt_data_end+0xfffe19a0>
   219c8:	003fdb06 	br	21938 <__alt_data_end+0xfffe1938>
   219cc:	3005883a 	mov	r2,r6
   219d0:	003fd706 	br	21930 <__alt_data_end+0xfffe1930>

000219d4 <memcpy>:
   219d4:	defffd04 	addi	sp,sp,-12
   219d8:	dfc00215 	stw	ra,8(sp)
   219dc:	dc400115 	stw	r17,4(sp)
   219e0:	dc000015 	stw	r16,0(sp)
   219e4:	00c003c4 	movi	r3,15
   219e8:	2005883a 	mov	r2,r4
   219ec:	1980452e 	bgeu	r3,r6,21b04 <memcpy+0x130>
   219f0:	2906b03a 	or	r3,r5,r4
   219f4:	18c000cc 	andi	r3,r3,3
   219f8:	1800441e 	bne	r3,zero,21b0c <memcpy+0x138>
   219fc:	347ffc04 	addi	r17,r6,-16
   21a00:	8822d13a 	srli	r17,r17,4
   21a04:	28c00104 	addi	r3,r5,4
   21a08:	23400104 	addi	r13,r4,4
   21a0c:	8820913a 	slli	r16,r17,4
   21a10:	2b000204 	addi	r12,r5,8
   21a14:	22c00204 	addi	r11,r4,8
   21a18:	84000504 	addi	r16,r16,20
   21a1c:	2a800304 	addi	r10,r5,12
   21a20:	22400304 	addi	r9,r4,12
   21a24:	2c21883a 	add	r16,r5,r16
   21a28:	2811883a 	mov	r8,r5
   21a2c:	200f883a 	mov	r7,r4
   21a30:	41000017 	ldw	r4,0(r8)
   21a34:	1fc00017 	ldw	ra,0(r3)
   21a38:	63c00017 	ldw	r15,0(r12)
   21a3c:	39000015 	stw	r4,0(r7)
   21a40:	53800017 	ldw	r14,0(r10)
   21a44:	6fc00015 	stw	ra,0(r13)
   21a48:	5bc00015 	stw	r15,0(r11)
   21a4c:	4b800015 	stw	r14,0(r9)
   21a50:	18c00404 	addi	r3,r3,16
   21a54:	39c00404 	addi	r7,r7,16
   21a58:	42000404 	addi	r8,r8,16
   21a5c:	6b400404 	addi	r13,r13,16
   21a60:	63000404 	addi	r12,r12,16
   21a64:	5ac00404 	addi	r11,r11,16
   21a68:	52800404 	addi	r10,r10,16
   21a6c:	4a400404 	addi	r9,r9,16
   21a70:	1c3fef1e 	bne	r3,r16,21a30 <__alt_data_end+0xfffe1a30>
   21a74:	89c00044 	addi	r7,r17,1
   21a78:	380e913a 	slli	r7,r7,4
   21a7c:	310003cc 	andi	r4,r6,15
   21a80:	02c000c4 	movi	r11,3
   21a84:	11c7883a 	add	r3,r2,r7
   21a88:	29cb883a 	add	r5,r5,r7
   21a8c:	5900212e 	bgeu	r11,r4,21b14 <memcpy+0x140>
   21a90:	1813883a 	mov	r9,r3
   21a94:	2811883a 	mov	r8,r5
   21a98:	200f883a 	mov	r7,r4
   21a9c:	42800017 	ldw	r10,0(r8)
   21aa0:	4a400104 	addi	r9,r9,4
   21aa4:	39ffff04 	addi	r7,r7,-4
   21aa8:	4abfff15 	stw	r10,-4(r9)
   21aac:	42000104 	addi	r8,r8,4
   21ab0:	59fffa36 	bltu	r11,r7,21a9c <__alt_data_end+0xfffe1a9c>
   21ab4:	213fff04 	addi	r4,r4,-4
   21ab8:	2008d0ba 	srli	r4,r4,2
   21abc:	318000cc 	andi	r6,r6,3
   21ac0:	21000044 	addi	r4,r4,1
   21ac4:	2109883a 	add	r4,r4,r4
   21ac8:	2109883a 	add	r4,r4,r4
   21acc:	1907883a 	add	r3,r3,r4
   21ad0:	290b883a 	add	r5,r5,r4
   21ad4:	30000626 	beq	r6,zero,21af0 <memcpy+0x11c>
   21ad8:	198d883a 	add	r6,r3,r6
   21adc:	29c00003 	ldbu	r7,0(r5)
   21ae0:	18c00044 	addi	r3,r3,1
   21ae4:	29400044 	addi	r5,r5,1
   21ae8:	19ffffc5 	stb	r7,-1(r3)
   21aec:	19bffb1e 	bne	r3,r6,21adc <__alt_data_end+0xfffe1adc>
   21af0:	dfc00217 	ldw	ra,8(sp)
   21af4:	dc400117 	ldw	r17,4(sp)
   21af8:	dc000017 	ldw	r16,0(sp)
   21afc:	dec00304 	addi	sp,sp,12
   21b00:	f800283a 	ret
   21b04:	2007883a 	mov	r3,r4
   21b08:	003ff206 	br	21ad4 <__alt_data_end+0xfffe1ad4>
   21b0c:	2007883a 	mov	r3,r4
   21b10:	003ff106 	br	21ad8 <__alt_data_end+0xfffe1ad8>
   21b14:	200d883a 	mov	r6,r4
   21b18:	003fee06 	br	21ad4 <__alt_data_end+0xfffe1ad4>

00021b1c <memmove>:
   21b1c:	2005883a 	mov	r2,r4
   21b20:	29000b2e 	bgeu	r5,r4,21b50 <memmove+0x34>
   21b24:	298f883a 	add	r7,r5,r6
   21b28:	21c0092e 	bgeu	r4,r7,21b50 <memmove+0x34>
   21b2c:	2187883a 	add	r3,r4,r6
   21b30:	198bc83a 	sub	r5,r3,r6
   21b34:	30004826 	beq	r6,zero,21c58 <memmove+0x13c>
   21b38:	39ffffc4 	addi	r7,r7,-1
   21b3c:	39000003 	ldbu	r4,0(r7)
   21b40:	18ffffc4 	addi	r3,r3,-1
   21b44:	19000005 	stb	r4,0(r3)
   21b48:	28fffb1e 	bne	r5,r3,21b38 <__alt_data_end+0xfffe1b38>
   21b4c:	f800283a 	ret
   21b50:	00c003c4 	movi	r3,15
   21b54:	1980412e 	bgeu	r3,r6,21c5c <memmove+0x140>
   21b58:	2886b03a 	or	r3,r5,r2
   21b5c:	18c000cc 	andi	r3,r3,3
   21b60:	1800401e 	bne	r3,zero,21c64 <memmove+0x148>
   21b64:	33fffc04 	addi	r15,r6,-16
   21b68:	781ed13a 	srli	r15,r15,4
   21b6c:	28c00104 	addi	r3,r5,4
   21b70:	13400104 	addi	r13,r2,4
   21b74:	781c913a 	slli	r14,r15,4
   21b78:	2b000204 	addi	r12,r5,8
   21b7c:	12c00204 	addi	r11,r2,8
   21b80:	73800504 	addi	r14,r14,20
   21b84:	2a800304 	addi	r10,r5,12
   21b88:	12400304 	addi	r9,r2,12
   21b8c:	2b9d883a 	add	r14,r5,r14
   21b90:	2811883a 	mov	r8,r5
   21b94:	100f883a 	mov	r7,r2
   21b98:	41000017 	ldw	r4,0(r8)
   21b9c:	39c00404 	addi	r7,r7,16
   21ba0:	18c00404 	addi	r3,r3,16
   21ba4:	393ffc15 	stw	r4,-16(r7)
   21ba8:	193ffc17 	ldw	r4,-16(r3)
   21bac:	6b400404 	addi	r13,r13,16
   21bb0:	5ac00404 	addi	r11,r11,16
   21bb4:	693ffc15 	stw	r4,-16(r13)
   21bb8:	61000017 	ldw	r4,0(r12)
   21bbc:	4a400404 	addi	r9,r9,16
   21bc0:	42000404 	addi	r8,r8,16
   21bc4:	593ffc15 	stw	r4,-16(r11)
   21bc8:	51000017 	ldw	r4,0(r10)
   21bcc:	63000404 	addi	r12,r12,16
   21bd0:	52800404 	addi	r10,r10,16
   21bd4:	493ffc15 	stw	r4,-16(r9)
   21bd8:	1bbfef1e 	bne	r3,r14,21b98 <__alt_data_end+0xfffe1b98>
   21bdc:	79000044 	addi	r4,r15,1
   21be0:	2008913a 	slli	r4,r4,4
   21be4:	328003cc 	andi	r10,r6,15
   21be8:	02c000c4 	movi	r11,3
   21bec:	1107883a 	add	r3,r2,r4
   21bf0:	290b883a 	add	r5,r5,r4
   21bf4:	5a801e2e 	bgeu	r11,r10,21c70 <memmove+0x154>
   21bf8:	1813883a 	mov	r9,r3
   21bfc:	2811883a 	mov	r8,r5
   21c00:	500f883a 	mov	r7,r10
   21c04:	41000017 	ldw	r4,0(r8)
   21c08:	4a400104 	addi	r9,r9,4
   21c0c:	39ffff04 	addi	r7,r7,-4
   21c10:	493fff15 	stw	r4,-4(r9)
   21c14:	42000104 	addi	r8,r8,4
   21c18:	59fffa36 	bltu	r11,r7,21c04 <__alt_data_end+0xfffe1c04>
   21c1c:	513fff04 	addi	r4,r10,-4
   21c20:	2008d0ba 	srli	r4,r4,2
   21c24:	318000cc 	andi	r6,r6,3
   21c28:	21000044 	addi	r4,r4,1
   21c2c:	2109883a 	add	r4,r4,r4
   21c30:	2109883a 	add	r4,r4,r4
   21c34:	1907883a 	add	r3,r3,r4
   21c38:	290b883a 	add	r5,r5,r4
   21c3c:	30000b26 	beq	r6,zero,21c6c <memmove+0x150>
   21c40:	198d883a 	add	r6,r3,r6
   21c44:	29c00003 	ldbu	r7,0(r5)
   21c48:	18c00044 	addi	r3,r3,1
   21c4c:	29400044 	addi	r5,r5,1
   21c50:	19ffffc5 	stb	r7,-1(r3)
   21c54:	19bffb1e 	bne	r3,r6,21c44 <__alt_data_end+0xfffe1c44>
   21c58:	f800283a 	ret
   21c5c:	1007883a 	mov	r3,r2
   21c60:	003ff606 	br	21c3c <__alt_data_end+0xfffe1c3c>
   21c64:	1007883a 	mov	r3,r2
   21c68:	003ff506 	br	21c40 <__alt_data_end+0xfffe1c40>
   21c6c:	f800283a 	ret
   21c70:	500d883a 	mov	r6,r10
   21c74:	003ff106 	br	21c3c <__alt_data_end+0xfffe1c3c>

00021c78 <memset>:
   21c78:	20c000cc 	andi	r3,r4,3
   21c7c:	2005883a 	mov	r2,r4
   21c80:	18004426 	beq	r3,zero,21d94 <memset+0x11c>
   21c84:	31ffffc4 	addi	r7,r6,-1
   21c88:	30004026 	beq	r6,zero,21d8c <memset+0x114>
   21c8c:	2813883a 	mov	r9,r5
   21c90:	200d883a 	mov	r6,r4
   21c94:	2007883a 	mov	r3,r4
   21c98:	00000406 	br	21cac <memset+0x34>
   21c9c:	3a3fffc4 	addi	r8,r7,-1
   21ca0:	31800044 	addi	r6,r6,1
   21ca4:	38003926 	beq	r7,zero,21d8c <memset+0x114>
   21ca8:	400f883a 	mov	r7,r8
   21cac:	18c00044 	addi	r3,r3,1
   21cb0:	32400005 	stb	r9,0(r6)
   21cb4:	1a0000cc 	andi	r8,r3,3
   21cb8:	403ff81e 	bne	r8,zero,21c9c <__alt_data_end+0xfffe1c9c>
   21cbc:	010000c4 	movi	r4,3
   21cc0:	21c02d2e 	bgeu	r4,r7,21d78 <memset+0x100>
   21cc4:	29003fcc 	andi	r4,r5,255
   21cc8:	200c923a 	slli	r6,r4,8
   21ccc:	3108b03a 	or	r4,r6,r4
   21cd0:	200c943a 	slli	r6,r4,16
   21cd4:	218cb03a 	or	r6,r4,r6
   21cd8:	010003c4 	movi	r4,15
   21cdc:	21c0182e 	bgeu	r4,r7,21d40 <memset+0xc8>
   21ce0:	3b3ffc04 	addi	r12,r7,-16
   21ce4:	6018d13a 	srli	r12,r12,4
   21ce8:	1a000104 	addi	r8,r3,4
   21cec:	1ac00204 	addi	r11,r3,8
   21cf0:	6008913a 	slli	r4,r12,4
   21cf4:	1a800304 	addi	r10,r3,12
   21cf8:	1813883a 	mov	r9,r3
   21cfc:	21000504 	addi	r4,r4,20
   21d00:	1909883a 	add	r4,r3,r4
   21d04:	49800015 	stw	r6,0(r9)
   21d08:	41800015 	stw	r6,0(r8)
   21d0c:	59800015 	stw	r6,0(r11)
   21d10:	51800015 	stw	r6,0(r10)
   21d14:	42000404 	addi	r8,r8,16
   21d18:	4a400404 	addi	r9,r9,16
   21d1c:	5ac00404 	addi	r11,r11,16
   21d20:	52800404 	addi	r10,r10,16
   21d24:	413ff71e 	bne	r8,r4,21d04 <__alt_data_end+0xfffe1d04>
   21d28:	63000044 	addi	r12,r12,1
   21d2c:	6018913a 	slli	r12,r12,4
   21d30:	39c003cc 	andi	r7,r7,15
   21d34:	010000c4 	movi	r4,3
   21d38:	1b07883a 	add	r3,r3,r12
   21d3c:	21c00e2e 	bgeu	r4,r7,21d78 <memset+0x100>
   21d40:	1813883a 	mov	r9,r3
   21d44:	3811883a 	mov	r8,r7
   21d48:	010000c4 	movi	r4,3
   21d4c:	49800015 	stw	r6,0(r9)
   21d50:	423fff04 	addi	r8,r8,-4
   21d54:	4a400104 	addi	r9,r9,4
   21d58:	223ffc36 	bltu	r4,r8,21d4c <__alt_data_end+0xfffe1d4c>
   21d5c:	393fff04 	addi	r4,r7,-4
   21d60:	2008d0ba 	srli	r4,r4,2
   21d64:	39c000cc 	andi	r7,r7,3
   21d68:	21000044 	addi	r4,r4,1
   21d6c:	2109883a 	add	r4,r4,r4
   21d70:	2109883a 	add	r4,r4,r4
   21d74:	1907883a 	add	r3,r3,r4
   21d78:	38000526 	beq	r7,zero,21d90 <memset+0x118>
   21d7c:	19cf883a 	add	r7,r3,r7
   21d80:	19400005 	stb	r5,0(r3)
   21d84:	18c00044 	addi	r3,r3,1
   21d88:	38fffd1e 	bne	r7,r3,21d80 <__alt_data_end+0xfffe1d80>
   21d8c:	f800283a 	ret
   21d90:	f800283a 	ret
   21d94:	2007883a 	mov	r3,r4
   21d98:	300f883a 	mov	r7,r6
   21d9c:	003fc706 	br	21cbc <__alt_data_end+0xfffe1cbc>

00021da0 <_realloc_r>:
   21da0:	defff604 	addi	sp,sp,-40
   21da4:	dc800215 	stw	r18,8(sp)
   21da8:	dfc00915 	stw	ra,36(sp)
   21dac:	df000815 	stw	fp,32(sp)
   21db0:	ddc00715 	stw	r23,28(sp)
   21db4:	dd800615 	stw	r22,24(sp)
   21db8:	dd400515 	stw	r21,20(sp)
   21dbc:	dd000415 	stw	r20,16(sp)
   21dc0:	dcc00315 	stw	r19,12(sp)
   21dc4:	dc400115 	stw	r17,4(sp)
   21dc8:	dc000015 	stw	r16,0(sp)
   21dcc:	3025883a 	mov	r18,r6
   21dd0:	2800b726 	beq	r5,zero,220b0 <_realloc_r+0x310>
   21dd4:	282b883a 	mov	r21,r5
   21dd8:	2029883a 	mov	r20,r4
   21ddc:	00239200 	call	23920 <__malloc_lock>
   21de0:	a8bfff17 	ldw	r2,-4(r21)
   21de4:	043fff04 	movi	r16,-4
   21de8:	90c002c4 	addi	r3,r18,11
   21dec:	01000584 	movi	r4,22
   21df0:	acfffe04 	addi	r19,r21,-8
   21df4:	1420703a 	and	r16,r2,r16
   21df8:	20c0332e 	bgeu	r4,r3,21ec8 <_realloc_r+0x128>
   21dfc:	047ffe04 	movi	r17,-8
   21e00:	1c62703a 	and	r17,r3,r17
   21e04:	8807883a 	mov	r3,r17
   21e08:	88005816 	blt	r17,zero,21f6c <_realloc_r+0x1cc>
   21e0c:	8c805736 	bltu	r17,r18,21f6c <_realloc_r+0x1cc>
   21e10:	80c0300e 	bge	r16,r3,21ed4 <_realloc_r+0x134>
   21e14:	070000b4 	movhi	fp,2
   21e18:	e7195504 	addi	fp,fp,25940
   21e1c:	e1c00217 	ldw	r7,8(fp)
   21e20:	9c09883a 	add	r4,r19,r16
   21e24:	22000117 	ldw	r8,4(r4)
   21e28:	21c06326 	beq	r4,r7,21fb8 <_realloc_r+0x218>
   21e2c:	017fff84 	movi	r5,-2
   21e30:	414a703a 	and	r5,r8,r5
   21e34:	214b883a 	add	r5,r4,r5
   21e38:	29800117 	ldw	r6,4(r5)
   21e3c:	3180004c 	andi	r6,r6,1
   21e40:	30003f26 	beq	r6,zero,21f40 <_realloc_r+0x1a0>
   21e44:	1080004c 	andi	r2,r2,1
   21e48:	10008326 	beq	r2,zero,22058 <_realloc_r+0x2b8>
   21e4c:	900b883a 	mov	r5,r18
   21e50:	a009883a 	mov	r4,r20
   21e54:	00210e40 	call	210e4 <_malloc_r>
   21e58:	1025883a 	mov	r18,r2
   21e5c:	10011e26 	beq	r2,zero,222d8 <_realloc_r+0x538>
   21e60:	a93fff17 	ldw	r4,-4(r21)
   21e64:	10fffe04 	addi	r3,r2,-8
   21e68:	00bfff84 	movi	r2,-2
   21e6c:	2084703a 	and	r2,r4,r2
   21e70:	9885883a 	add	r2,r19,r2
   21e74:	1880ee26 	beq	r3,r2,22230 <_realloc_r+0x490>
   21e78:	81bfff04 	addi	r6,r16,-4
   21e7c:	00800904 	movi	r2,36
   21e80:	1180b836 	bltu	r2,r6,22164 <_realloc_r+0x3c4>
   21e84:	00c004c4 	movi	r3,19
   21e88:	19809636 	bltu	r3,r6,220e4 <_realloc_r+0x344>
   21e8c:	9005883a 	mov	r2,r18
   21e90:	a807883a 	mov	r3,r21
   21e94:	19000017 	ldw	r4,0(r3)
   21e98:	11000015 	stw	r4,0(r2)
   21e9c:	19000117 	ldw	r4,4(r3)
   21ea0:	11000115 	stw	r4,4(r2)
   21ea4:	18c00217 	ldw	r3,8(r3)
   21ea8:	10c00215 	stw	r3,8(r2)
   21eac:	a80b883a 	mov	r5,r21
   21eb0:	a009883a 	mov	r4,r20
   21eb4:	0022b6c0 	call	22b6c <_free_r>
   21eb8:	a009883a 	mov	r4,r20
   21ebc:	00239440 	call	23944 <__malloc_unlock>
   21ec0:	9005883a 	mov	r2,r18
   21ec4:	00001206 	br	21f10 <_realloc_r+0x170>
   21ec8:	00c00404 	movi	r3,16
   21ecc:	1823883a 	mov	r17,r3
   21ed0:	003fce06 	br	21e0c <__alt_data_end+0xfffe1e0c>
   21ed4:	a825883a 	mov	r18,r21
   21ed8:	8445c83a 	sub	r2,r16,r17
   21edc:	00c003c4 	movi	r3,15
   21ee0:	18802636 	bltu	r3,r2,21f7c <_realloc_r+0x1dc>
   21ee4:	99800117 	ldw	r6,4(r19)
   21ee8:	9c07883a 	add	r3,r19,r16
   21eec:	3180004c 	andi	r6,r6,1
   21ef0:	3420b03a 	or	r16,r6,r16
   21ef4:	9c000115 	stw	r16,4(r19)
   21ef8:	18800117 	ldw	r2,4(r3)
   21efc:	10800054 	ori	r2,r2,1
   21f00:	18800115 	stw	r2,4(r3)
   21f04:	a009883a 	mov	r4,r20
   21f08:	00239440 	call	23944 <__malloc_unlock>
   21f0c:	9005883a 	mov	r2,r18
   21f10:	dfc00917 	ldw	ra,36(sp)
   21f14:	df000817 	ldw	fp,32(sp)
   21f18:	ddc00717 	ldw	r23,28(sp)
   21f1c:	dd800617 	ldw	r22,24(sp)
   21f20:	dd400517 	ldw	r21,20(sp)
   21f24:	dd000417 	ldw	r20,16(sp)
   21f28:	dcc00317 	ldw	r19,12(sp)
   21f2c:	dc800217 	ldw	r18,8(sp)
   21f30:	dc400117 	ldw	r17,4(sp)
   21f34:	dc000017 	ldw	r16,0(sp)
   21f38:	dec00a04 	addi	sp,sp,40
   21f3c:	f800283a 	ret
   21f40:	017fff04 	movi	r5,-4
   21f44:	414a703a 	and	r5,r8,r5
   21f48:	814d883a 	add	r6,r16,r5
   21f4c:	30c01f16 	blt	r6,r3,21fcc <_realloc_r+0x22c>
   21f50:	20800317 	ldw	r2,12(r4)
   21f54:	20c00217 	ldw	r3,8(r4)
   21f58:	a825883a 	mov	r18,r21
   21f5c:	3021883a 	mov	r16,r6
   21f60:	18800315 	stw	r2,12(r3)
   21f64:	10c00215 	stw	r3,8(r2)
   21f68:	003fdb06 	br	21ed8 <__alt_data_end+0xfffe1ed8>
   21f6c:	00800304 	movi	r2,12
   21f70:	a0800015 	stw	r2,0(r20)
   21f74:	0005883a 	mov	r2,zero
   21f78:	003fe506 	br	21f10 <__alt_data_end+0xfffe1f10>
   21f7c:	98c00117 	ldw	r3,4(r19)
   21f80:	9c4b883a 	add	r5,r19,r17
   21f84:	11000054 	ori	r4,r2,1
   21f88:	18c0004c 	andi	r3,r3,1
   21f8c:	1c62b03a 	or	r17,r3,r17
   21f90:	9c400115 	stw	r17,4(r19)
   21f94:	29000115 	stw	r4,4(r5)
   21f98:	2885883a 	add	r2,r5,r2
   21f9c:	10c00117 	ldw	r3,4(r2)
   21fa0:	29400204 	addi	r5,r5,8
   21fa4:	a009883a 	mov	r4,r20
   21fa8:	18c00054 	ori	r3,r3,1
   21fac:	10c00115 	stw	r3,4(r2)
   21fb0:	0022b6c0 	call	22b6c <_free_r>
   21fb4:	003fd306 	br	21f04 <__alt_data_end+0xfffe1f04>
   21fb8:	017fff04 	movi	r5,-4
   21fbc:	414a703a 	and	r5,r8,r5
   21fc0:	89800404 	addi	r6,r17,16
   21fc4:	8151883a 	add	r8,r16,r5
   21fc8:	4180590e 	bge	r8,r6,22130 <_realloc_r+0x390>
   21fcc:	1080004c 	andi	r2,r2,1
   21fd0:	103f9e1e 	bne	r2,zero,21e4c <__alt_data_end+0xfffe1e4c>
   21fd4:	adbffe17 	ldw	r22,-8(r21)
   21fd8:	00bfff04 	movi	r2,-4
   21fdc:	9dadc83a 	sub	r22,r19,r22
   21fe0:	b1800117 	ldw	r6,4(r22)
   21fe4:	3084703a 	and	r2,r6,r2
   21fe8:	20002026 	beq	r4,zero,2206c <_realloc_r+0x2cc>
   21fec:	80af883a 	add	r23,r16,r2
   21ff0:	b96f883a 	add	r23,r23,r5
   21ff4:	21c05f26 	beq	r4,r7,22174 <_realloc_r+0x3d4>
   21ff8:	b8c01c16 	blt	r23,r3,2206c <_realloc_r+0x2cc>
   21ffc:	20800317 	ldw	r2,12(r4)
   22000:	20c00217 	ldw	r3,8(r4)
   22004:	81bfff04 	addi	r6,r16,-4
   22008:	01000904 	movi	r4,36
   2200c:	18800315 	stw	r2,12(r3)
   22010:	10c00215 	stw	r3,8(r2)
   22014:	b0c00217 	ldw	r3,8(r22)
   22018:	b0800317 	ldw	r2,12(r22)
   2201c:	b4800204 	addi	r18,r22,8
   22020:	18800315 	stw	r2,12(r3)
   22024:	10c00215 	stw	r3,8(r2)
   22028:	21801b36 	bltu	r4,r6,22098 <_realloc_r+0x2f8>
   2202c:	008004c4 	movi	r2,19
   22030:	1180352e 	bgeu	r2,r6,22108 <_realloc_r+0x368>
   22034:	a8800017 	ldw	r2,0(r21)
   22038:	b0800215 	stw	r2,8(r22)
   2203c:	a8800117 	ldw	r2,4(r21)
   22040:	b0800315 	stw	r2,12(r22)
   22044:	008006c4 	movi	r2,27
   22048:	11807f36 	bltu	r2,r6,22248 <_realloc_r+0x4a8>
   2204c:	b0800404 	addi	r2,r22,16
   22050:	ad400204 	addi	r21,r21,8
   22054:	00002d06 	br	2210c <_realloc_r+0x36c>
   22058:	adbffe17 	ldw	r22,-8(r21)
   2205c:	00bfff04 	movi	r2,-4
   22060:	9dadc83a 	sub	r22,r19,r22
   22064:	b1000117 	ldw	r4,4(r22)
   22068:	2084703a 	and	r2,r4,r2
   2206c:	b03f7726 	beq	r22,zero,21e4c <__alt_data_end+0xfffe1e4c>
   22070:	80af883a 	add	r23,r16,r2
   22074:	b8ff7516 	blt	r23,r3,21e4c <__alt_data_end+0xfffe1e4c>
   22078:	b0800317 	ldw	r2,12(r22)
   2207c:	b0c00217 	ldw	r3,8(r22)
   22080:	81bfff04 	addi	r6,r16,-4
   22084:	01000904 	movi	r4,36
   22088:	18800315 	stw	r2,12(r3)
   2208c:	10c00215 	stw	r3,8(r2)
   22090:	b4800204 	addi	r18,r22,8
   22094:	21bfe52e 	bgeu	r4,r6,2202c <__alt_data_end+0xfffe202c>
   22098:	a80b883a 	mov	r5,r21
   2209c:	9009883a 	mov	r4,r18
   220a0:	0021b1c0 	call	21b1c <memmove>
   220a4:	b821883a 	mov	r16,r23
   220a8:	b027883a 	mov	r19,r22
   220ac:	003f8a06 	br	21ed8 <__alt_data_end+0xfffe1ed8>
   220b0:	300b883a 	mov	r5,r6
   220b4:	dfc00917 	ldw	ra,36(sp)
   220b8:	df000817 	ldw	fp,32(sp)
   220bc:	ddc00717 	ldw	r23,28(sp)
   220c0:	dd800617 	ldw	r22,24(sp)
   220c4:	dd400517 	ldw	r21,20(sp)
   220c8:	dd000417 	ldw	r20,16(sp)
   220cc:	dcc00317 	ldw	r19,12(sp)
   220d0:	dc800217 	ldw	r18,8(sp)
   220d4:	dc400117 	ldw	r17,4(sp)
   220d8:	dc000017 	ldw	r16,0(sp)
   220dc:	dec00a04 	addi	sp,sp,40
   220e0:	00210e41 	jmpi	210e4 <_malloc_r>
   220e4:	a8c00017 	ldw	r3,0(r21)
   220e8:	90c00015 	stw	r3,0(r18)
   220ec:	a8c00117 	ldw	r3,4(r21)
   220f0:	90c00115 	stw	r3,4(r18)
   220f4:	00c006c4 	movi	r3,27
   220f8:	19804536 	bltu	r3,r6,22210 <_realloc_r+0x470>
   220fc:	90800204 	addi	r2,r18,8
   22100:	a8c00204 	addi	r3,r21,8
   22104:	003f6306 	br	21e94 <__alt_data_end+0xfffe1e94>
   22108:	9005883a 	mov	r2,r18
   2210c:	a8c00017 	ldw	r3,0(r21)
   22110:	b821883a 	mov	r16,r23
   22114:	b027883a 	mov	r19,r22
   22118:	10c00015 	stw	r3,0(r2)
   2211c:	a8c00117 	ldw	r3,4(r21)
   22120:	10c00115 	stw	r3,4(r2)
   22124:	a8c00217 	ldw	r3,8(r21)
   22128:	10c00215 	stw	r3,8(r2)
   2212c:	003f6a06 	br	21ed8 <__alt_data_end+0xfffe1ed8>
   22130:	9c67883a 	add	r19,r19,r17
   22134:	4445c83a 	sub	r2,r8,r17
   22138:	e4c00215 	stw	r19,8(fp)
   2213c:	10800054 	ori	r2,r2,1
   22140:	98800115 	stw	r2,4(r19)
   22144:	a8bfff17 	ldw	r2,-4(r21)
   22148:	a009883a 	mov	r4,r20
   2214c:	1080004c 	andi	r2,r2,1
   22150:	1462b03a 	or	r17,r2,r17
   22154:	ac7fff15 	stw	r17,-4(r21)
   22158:	00239440 	call	23944 <__malloc_unlock>
   2215c:	a805883a 	mov	r2,r21
   22160:	003f6b06 	br	21f10 <__alt_data_end+0xfffe1f10>
   22164:	a80b883a 	mov	r5,r21
   22168:	9009883a 	mov	r4,r18
   2216c:	0021b1c0 	call	21b1c <memmove>
   22170:	003f4e06 	br	21eac <__alt_data_end+0xfffe1eac>
   22174:	89000404 	addi	r4,r17,16
   22178:	b93fbc16 	blt	r23,r4,2206c <__alt_data_end+0xfffe206c>
   2217c:	b0800317 	ldw	r2,12(r22)
   22180:	b0c00217 	ldw	r3,8(r22)
   22184:	81bfff04 	addi	r6,r16,-4
   22188:	01000904 	movi	r4,36
   2218c:	18800315 	stw	r2,12(r3)
   22190:	10c00215 	stw	r3,8(r2)
   22194:	b4800204 	addi	r18,r22,8
   22198:	21804336 	bltu	r4,r6,222a8 <_realloc_r+0x508>
   2219c:	008004c4 	movi	r2,19
   221a0:	11803f2e 	bgeu	r2,r6,222a0 <_realloc_r+0x500>
   221a4:	a8800017 	ldw	r2,0(r21)
   221a8:	b0800215 	stw	r2,8(r22)
   221ac:	a8800117 	ldw	r2,4(r21)
   221b0:	b0800315 	stw	r2,12(r22)
   221b4:	008006c4 	movi	r2,27
   221b8:	11803f36 	bltu	r2,r6,222b8 <_realloc_r+0x518>
   221bc:	b0800404 	addi	r2,r22,16
   221c0:	ad400204 	addi	r21,r21,8
   221c4:	a8c00017 	ldw	r3,0(r21)
   221c8:	10c00015 	stw	r3,0(r2)
   221cc:	a8c00117 	ldw	r3,4(r21)
   221d0:	10c00115 	stw	r3,4(r2)
   221d4:	a8c00217 	ldw	r3,8(r21)
   221d8:	10c00215 	stw	r3,8(r2)
   221dc:	b447883a 	add	r3,r22,r17
   221e0:	bc45c83a 	sub	r2,r23,r17
   221e4:	e0c00215 	stw	r3,8(fp)
   221e8:	10800054 	ori	r2,r2,1
   221ec:	18800115 	stw	r2,4(r3)
   221f0:	b0800117 	ldw	r2,4(r22)
   221f4:	a009883a 	mov	r4,r20
   221f8:	1080004c 	andi	r2,r2,1
   221fc:	1462b03a 	or	r17,r2,r17
   22200:	b4400115 	stw	r17,4(r22)
   22204:	00239440 	call	23944 <__malloc_unlock>
   22208:	9005883a 	mov	r2,r18
   2220c:	003f4006 	br	21f10 <__alt_data_end+0xfffe1f10>
   22210:	a8c00217 	ldw	r3,8(r21)
   22214:	90c00215 	stw	r3,8(r18)
   22218:	a8c00317 	ldw	r3,12(r21)
   2221c:	90c00315 	stw	r3,12(r18)
   22220:	30801126 	beq	r6,r2,22268 <_realloc_r+0x4c8>
   22224:	90800404 	addi	r2,r18,16
   22228:	a8c00404 	addi	r3,r21,16
   2222c:	003f1906 	br	21e94 <__alt_data_end+0xfffe1e94>
   22230:	90ffff17 	ldw	r3,-4(r18)
   22234:	00bfff04 	movi	r2,-4
   22238:	a825883a 	mov	r18,r21
   2223c:	1884703a 	and	r2,r3,r2
   22240:	80a1883a 	add	r16,r16,r2
   22244:	003f2406 	br	21ed8 <__alt_data_end+0xfffe1ed8>
   22248:	a8800217 	ldw	r2,8(r21)
   2224c:	b0800415 	stw	r2,16(r22)
   22250:	a8800317 	ldw	r2,12(r21)
   22254:	b0800515 	stw	r2,20(r22)
   22258:	31000a26 	beq	r6,r4,22284 <_realloc_r+0x4e4>
   2225c:	b0800604 	addi	r2,r22,24
   22260:	ad400404 	addi	r21,r21,16
   22264:	003fa906 	br	2210c <__alt_data_end+0xfffe210c>
   22268:	a9000417 	ldw	r4,16(r21)
   2226c:	90800604 	addi	r2,r18,24
   22270:	a8c00604 	addi	r3,r21,24
   22274:	91000415 	stw	r4,16(r18)
   22278:	a9000517 	ldw	r4,20(r21)
   2227c:	91000515 	stw	r4,20(r18)
   22280:	003f0406 	br	21e94 <__alt_data_end+0xfffe1e94>
   22284:	a8c00417 	ldw	r3,16(r21)
   22288:	ad400604 	addi	r21,r21,24
   2228c:	b0800804 	addi	r2,r22,32
   22290:	b0c00615 	stw	r3,24(r22)
   22294:	a8ffff17 	ldw	r3,-4(r21)
   22298:	b0c00715 	stw	r3,28(r22)
   2229c:	003f9b06 	br	2210c <__alt_data_end+0xfffe210c>
   222a0:	9005883a 	mov	r2,r18
   222a4:	003fc706 	br	221c4 <__alt_data_end+0xfffe21c4>
   222a8:	a80b883a 	mov	r5,r21
   222ac:	9009883a 	mov	r4,r18
   222b0:	0021b1c0 	call	21b1c <memmove>
   222b4:	003fc906 	br	221dc <__alt_data_end+0xfffe21dc>
   222b8:	a8800217 	ldw	r2,8(r21)
   222bc:	b0800415 	stw	r2,16(r22)
   222c0:	a8800317 	ldw	r2,12(r21)
   222c4:	b0800515 	stw	r2,20(r22)
   222c8:	31000726 	beq	r6,r4,222e8 <_realloc_r+0x548>
   222cc:	b0800604 	addi	r2,r22,24
   222d0:	ad400404 	addi	r21,r21,16
   222d4:	003fbb06 	br	221c4 <__alt_data_end+0xfffe21c4>
   222d8:	a009883a 	mov	r4,r20
   222dc:	00239440 	call	23944 <__malloc_unlock>
   222e0:	0005883a 	mov	r2,zero
   222e4:	003f0a06 	br	21f10 <__alt_data_end+0xfffe1f10>
   222e8:	a8c00417 	ldw	r3,16(r21)
   222ec:	ad400604 	addi	r21,r21,24
   222f0:	b0800804 	addi	r2,r22,32
   222f4:	b0c00615 	stw	r3,24(r22)
   222f8:	a8ffff17 	ldw	r3,-4(r21)
   222fc:	b0c00715 	stw	r3,28(r22)
   22300:	003fb006 	br	221c4 <__alt_data_end+0xfffe21c4>

00022304 <_sbrk_r>:
   22304:	defffd04 	addi	sp,sp,-12
   22308:	dc000015 	stw	r16,0(sp)
   2230c:	040000f4 	movhi	r16,3
   22310:	dc400115 	stw	r17,4(sp)
   22314:	8425a504 	addi	r16,r16,-26988
   22318:	2023883a 	mov	r17,r4
   2231c:	2809883a 	mov	r4,r5
   22320:	dfc00215 	stw	ra,8(sp)
   22324:	80000015 	stw	zero,0(r16)
   22328:	0023b2c0 	call	23b2c <sbrk>
   2232c:	00ffffc4 	movi	r3,-1
   22330:	10c00526 	beq	r2,r3,22348 <_sbrk_r+0x44>
   22334:	dfc00217 	ldw	ra,8(sp)
   22338:	dc400117 	ldw	r17,4(sp)
   2233c:	dc000017 	ldw	r16,0(sp)
   22340:	dec00304 	addi	sp,sp,12
   22344:	f800283a 	ret
   22348:	80c00017 	ldw	r3,0(r16)
   2234c:	183ff926 	beq	r3,zero,22334 <__alt_data_end+0xfffe2334>
   22350:	88c00015 	stw	r3,0(r17)
   22354:	003ff706 	br	22334 <__alt_data_end+0xfffe2334>

00022358 <__sread>:
   22358:	defffe04 	addi	sp,sp,-8
   2235c:	dc000015 	stw	r16,0(sp)
   22360:	2821883a 	mov	r16,r5
   22364:	2940038f 	ldh	r5,14(r5)
   22368:	dfc00115 	stw	ra,4(sp)
   2236c:	00230980 	call	23098 <_read_r>
   22370:	10000716 	blt	r2,zero,22390 <__sread+0x38>
   22374:	80c01417 	ldw	r3,80(r16)
   22378:	1887883a 	add	r3,r3,r2
   2237c:	80c01415 	stw	r3,80(r16)
   22380:	dfc00117 	ldw	ra,4(sp)
   22384:	dc000017 	ldw	r16,0(sp)
   22388:	dec00204 	addi	sp,sp,8
   2238c:	f800283a 	ret
   22390:	80c0030b 	ldhu	r3,12(r16)
   22394:	18fbffcc 	andi	r3,r3,61439
   22398:	80c0030d 	sth	r3,12(r16)
   2239c:	dfc00117 	ldw	ra,4(sp)
   223a0:	dc000017 	ldw	r16,0(sp)
   223a4:	dec00204 	addi	sp,sp,8
   223a8:	f800283a 	ret

000223ac <__seofread>:
   223ac:	0005883a 	mov	r2,zero
   223b0:	f800283a 	ret

000223b4 <__swrite>:
   223b4:	2880030b 	ldhu	r2,12(r5)
   223b8:	defffb04 	addi	sp,sp,-20
   223bc:	dcc00315 	stw	r19,12(sp)
   223c0:	dc800215 	stw	r18,8(sp)
   223c4:	dc400115 	stw	r17,4(sp)
   223c8:	dc000015 	stw	r16,0(sp)
   223cc:	dfc00415 	stw	ra,16(sp)
   223d0:	10c0400c 	andi	r3,r2,256
   223d4:	2821883a 	mov	r16,r5
   223d8:	2023883a 	mov	r17,r4
   223dc:	3025883a 	mov	r18,r6
   223e0:	3827883a 	mov	r19,r7
   223e4:	18000526 	beq	r3,zero,223fc <__swrite+0x48>
   223e8:	2940038f 	ldh	r5,14(r5)
   223ec:	01c00084 	movi	r7,2
   223f0:	000d883a 	mov	r6,zero
   223f4:	0022e7c0 	call	22e7c <_lseek_r>
   223f8:	8080030b 	ldhu	r2,12(r16)
   223fc:	8140038f 	ldh	r5,14(r16)
   22400:	10bbffcc 	andi	r2,r2,61439
   22404:	980f883a 	mov	r7,r19
   22408:	900d883a 	mov	r6,r18
   2240c:	8809883a 	mov	r4,r17
   22410:	8080030d 	sth	r2,12(r16)
   22414:	dfc00417 	ldw	ra,16(sp)
   22418:	dcc00317 	ldw	r19,12(sp)
   2241c:	dc800217 	ldw	r18,8(sp)
   22420:	dc400117 	ldw	r17,4(sp)
   22424:	dc000017 	ldw	r16,0(sp)
   22428:	dec00504 	addi	sp,sp,20
   2242c:	00224941 	jmpi	22494 <_write_r>

00022430 <__sseek>:
   22430:	defffe04 	addi	sp,sp,-8
   22434:	dc000015 	stw	r16,0(sp)
   22438:	2821883a 	mov	r16,r5
   2243c:	2940038f 	ldh	r5,14(r5)
   22440:	dfc00115 	stw	ra,4(sp)
   22444:	0022e7c0 	call	22e7c <_lseek_r>
   22448:	00ffffc4 	movi	r3,-1
   2244c:	10c00826 	beq	r2,r3,22470 <__sseek+0x40>
   22450:	80c0030b 	ldhu	r3,12(r16)
   22454:	80801415 	stw	r2,80(r16)
   22458:	18c40014 	ori	r3,r3,4096
   2245c:	80c0030d 	sth	r3,12(r16)
   22460:	dfc00117 	ldw	ra,4(sp)
   22464:	dc000017 	ldw	r16,0(sp)
   22468:	dec00204 	addi	sp,sp,8
   2246c:	f800283a 	ret
   22470:	80c0030b 	ldhu	r3,12(r16)
   22474:	18fbffcc 	andi	r3,r3,61439
   22478:	80c0030d 	sth	r3,12(r16)
   2247c:	dfc00117 	ldw	ra,4(sp)
   22480:	dc000017 	ldw	r16,0(sp)
   22484:	dec00204 	addi	sp,sp,8
   22488:	f800283a 	ret

0002248c <__sclose>:
   2248c:	2940038f 	ldh	r5,14(r5)
   22490:	00226481 	jmpi	22648 <_close_r>

00022494 <_write_r>:
   22494:	defffd04 	addi	sp,sp,-12
   22498:	2805883a 	mov	r2,r5
   2249c:	dc000015 	stw	r16,0(sp)
   224a0:	040000f4 	movhi	r16,3
   224a4:	dc400115 	stw	r17,4(sp)
   224a8:	300b883a 	mov	r5,r6
   224ac:	8425a504 	addi	r16,r16,-26988
   224b0:	2023883a 	mov	r17,r4
   224b4:	380d883a 	mov	r6,r7
   224b8:	1009883a 	mov	r4,r2
   224bc:	dfc00215 	stw	ra,8(sp)
   224c0:	80000015 	stw	zero,0(r16)
   224c4:	0023c180 	call	23c18 <write>
   224c8:	00ffffc4 	movi	r3,-1
   224cc:	10c00526 	beq	r2,r3,224e4 <_write_r+0x50>
   224d0:	dfc00217 	ldw	ra,8(sp)
   224d4:	dc400117 	ldw	r17,4(sp)
   224d8:	dc000017 	ldw	r16,0(sp)
   224dc:	dec00304 	addi	sp,sp,12
   224e0:	f800283a 	ret
   224e4:	80c00017 	ldw	r3,0(r16)
   224e8:	183ff926 	beq	r3,zero,224d0 <__alt_data_end+0xfffe24d0>
   224ec:	88c00015 	stw	r3,0(r17)
   224f0:	003ff706 	br	224d0 <__alt_data_end+0xfffe24d0>

000224f4 <__swsetup_r>:
   224f4:	008000b4 	movhi	r2,2
   224f8:	defffd04 	addi	sp,sp,-12
   224fc:	109eda04 	addi	r2,r2,31592
   22500:	dc400115 	stw	r17,4(sp)
   22504:	2023883a 	mov	r17,r4
   22508:	11000017 	ldw	r4,0(r2)
   2250c:	dc000015 	stw	r16,0(sp)
   22510:	dfc00215 	stw	ra,8(sp)
   22514:	2821883a 	mov	r16,r5
   22518:	20000226 	beq	r4,zero,22524 <__swsetup_r+0x30>
   2251c:	20800e17 	ldw	r2,56(r4)
   22520:	10003126 	beq	r2,zero,225e8 <__swsetup_r+0xf4>
   22524:	8080030b 	ldhu	r2,12(r16)
   22528:	10c0020c 	andi	r3,r2,8
   2252c:	1009883a 	mov	r4,r2
   22530:	18000f26 	beq	r3,zero,22570 <__swsetup_r+0x7c>
   22534:	80c00417 	ldw	r3,16(r16)
   22538:	18001526 	beq	r3,zero,22590 <__swsetup_r+0x9c>
   2253c:	1100004c 	andi	r4,r2,1
   22540:	20001c1e 	bne	r4,zero,225b4 <__swsetup_r+0xc0>
   22544:	1080008c 	andi	r2,r2,2
   22548:	1000291e 	bne	r2,zero,225f0 <__swsetup_r+0xfc>
   2254c:	80800517 	ldw	r2,20(r16)
   22550:	80800215 	stw	r2,8(r16)
   22554:	18001c26 	beq	r3,zero,225c8 <__swsetup_r+0xd4>
   22558:	0005883a 	mov	r2,zero
   2255c:	dfc00217 	ldw	ra,8(sp)
   22560:	dc400117 	ldw	r17,4(sp)
   22564:	dc000017 	ldw	r16,0(sp)
   22568:	dec00304 	addi	sp,sp,12
   2256c:	f800283a 	ret
   22570:	2080040c 	andi	r2,r4,16
   22574:	10002e26 	beq	r2,zero,22630 <__swsetup_r+0x13c>
   22578:	2080010c 	andi	r2,r4,4
   2257c:	10001e1e 	bne	r2,zero,225f8 <__swsetup_r+0x104>
   22580:	80c00417 	ldw	r3,16(r16)
   22584:	20800214 	ori	r2,r4,8
   22588:	8080030d 	sth	r2,12(r16)
   2258c:	183feb1e 	bne	r3,zero,2253c <__alt_data_end+0xfffe253c>
   22590:	1100a00c 	andi	r4,r2,640
   22594:	01408004 	movi	r5,512
   22598:	217fe826 	beq	r4,r5,2253c <__alt_data_end+0xfffe253c>
   2259c:	800b883a 	mov	r5,r16
   225a0:	8809883a 	mov	r4,r17
   225a4:	0022edc0 	call	22edc <__smakebuf_r>
   225a8:	8080030b 	ldhu	r2,12(r16)
   225ac:	80c00417 	ldw	r3,16(r16)
   225b0:	003fe206 	br	2253c <__alt_data_end+0xfffe253c>
   225b4:	80800517 	ldw	r2,20(r16)
   225b8:	80000215 	stw	zero,8(r16)
   225bc:	0085c83a 	sub	r2,zero,r2
   225c0:	80800615 	stw	r2,24(r16)
   225c4:	183fe41e 	bne	r3,zero,22558 <__alt_data_end+0xfffe2558>
   225c8:	80c0030b 	ldhu	r3,12(r16)
   225cc:	0005883a 	mov	r2,zero
   225d0:	1900200c 	andi	r4,r3,128
   225d4:	203fe126 	beq	r4,zero,2255c <__alt_data_end+0xfffe255c>
   225d8:	18c01014 	ori	r3,r3,64
   225dc:	80c0030d 	sth	r3,12(r16)
   225e0:	00bfffc4 	movi	r2,-1
   225e4:	003fdd06 	br	2255c <__alt_data_end+0xfffe255c>
   225e8:	0020a440 	call	20a44 <__sinit>
   225ec:	003fcd06 	br	22524 <__alt_data_end+0xfffe2524>
   225f0:	0005883a 	mov	r2,zero
   225f4:	003fd606 	br	22550 <__alt_data_end+0xfffe2550>
   225f8:	81400c17 	ldw	r5,48(r16)
   225fc:	28000626 	beq	r5,zero,22618 <__swsetup_r+0x124>
   22600:	80801004 	addi	r2,r16,64
   22604:	28800326 	beq	r5,r2,22614 <__swsetup_r+0x120>
   22608:	8809883a 	mov	r4,r17
   2260c:	0022b6c0 	call	22b6c <_free_r>
   22610:	8100030b 	ldhu	r4,12(r16)
   22614:	80000c15 	stw	zero,48(r16)
   22618:	80c00417 	ldw	r3,16(r16)
   2261c:	00bff6c4 	movi	r2,-37
   22620:	1108703a 	and	r4,r2,r4
   22624:	80000115 	stw	zero,4(r16)
   22628:	80c00015 	stw	r3,0(r16)
   2262c:	003fd506 	br	22584 <__alt_data_end+0xfffe2584>
   22630:	00800244 	movi	r2,9
   22634:	88800015 	stw	r2,0(r17)
   22638:	20801014 	ori	r2,r4,64
   2263c:	8080030d 	sth	r2,12(r16)
   22640:	00bfffc4 	movi	r2,-1
   22644:	003fc506 	br	2255c <__alt_data_end+0xfffe255c>

00022648 <_close_r>:
   22648:	defffd04 	addi	sp,sp,-12
   2264c:	dc000015 	stw	r16,0(sp)
   22650:	040000f4 	movhi	r16,3
   22654:	dc400115 	stw	r17,4(sp)
   22658:	8425a504 	addi	r16,r16,-26988
   2265c:	2023883a 	mov	r17,r4
   22660:	2809883a 	mov	r4,r5
   22664:	dfc00215 	stw	ra,8(sp)
   22668:	80000015 	stw	zero,0(r16)
   2266c:	00233c00 	call	233c0 <close>
   22670:	00ffffc4 	movi	r3,-1
   22674:	10c00526 	beq	r2,r3,2268c <_close_r+0x44>
   22678:	dfc00217 	ldw	ra,8(sp)
   2267c:	dc400117 	ldw	r17,4(sp)
   22680:	dc000017 	ldw	r16,0(sp)
   22684:	dec00304 	addi	sp,sp,12
   22688:	f800283a 	ret
   2268c:	80c00017 	ldw	r3,0(r16)
   22690:	183ff926 	beq	r3,zero,22678 <__alt_data_end+0xfffe2678>
   22694:	88c00015 	stw	r3,0(r17)
   22698:	003ff706 	br	22678 <__alt_data_end+0xfffe2678>

0002269c <_fclose_r>:
   2269c:	28003926 	beq	r5,zero,22784 <_fclose_r+0xe8>
   226a0:	defffc04 	addi	sp,sp,-16
   226a4:	dc400115 	stw	r17,4(sp)
   226a8:	dc000015 	stw	r16,0(sp)
   226ac:	dfc00315 	stw	ra,12(sp)
   226b0:	dc800215 	stw	r18,8(sp)
   226b4:	2023883a 	mov	r17,r4
   226b8:	2821883a 	mov	r16,r5
   226bc:	20000226 	beq	r4,zero,226c8 <_fclose_r+0x2c>
   226c0:	20800e17 	ldw	r2,56(r4)
   226c4:	10002726 	beq	r2,zero,22764 <_fclose_r+0xc8>
   226c8:	8080030f 	ldh	r2,12(r16)
   226cc:	1000071e 	bne	r2,zero,226ec <_fclose_r+0x50>
   226d0:	0005883a 	mov	r2,zero
   226d4:	dfc00317 	ldw	ra,12(sp)
   226d8:	dc800217 	ldw	r18,8(sp)
   226dc:	dc400117 	ldw	r17,4(sp)
   226e0:	dc000017 	ldw	r16,0(sp)
   226e4:	dec00404 	addi	sp,sp,16
   226e8:	f800283a 	ret
   226ec:	800b883a 	mov	r5,r16
   226f0:	8809883a 	mov	r4,r17
   226f4:	00227a00 	call	227a0 <__sflush_r>
   226f8:	1025883a 	mov	r18,r2
   226fc:	80800b17 	ldw	r2,44(r16)
   22700:	10000426 	beq	r2,zero,22714 <_fclose_r+0x78>
   22704:	81400717 	ldw	r5,28(r16)
   22708:	8809883a 	mov	r4,r17
   2270c:	103ee83a 	callr	r2
   22710:	10001616 	blt	r2,zero,2276c <_fclose_r+0xd0>
   22714:	8080030b 	ldhu	r2,12(r16)
   22718:	1080200c 	andi	r2,r2,128
   2271c:	1000151e 	bne	r2,zero,22774 <_fclose_r+0xd8>
   22720:	81400c17 	ldw	r5,48(r16)
   22724:	28000526 	beq	r5,zero,2273c <_fclose_r+0xa0>
   22728:	80801004 	addi	r2,r16,64
   2272c:	28800226 	beq	r5,r2,22738 <_fclose_r+0x9c>
   22730:	8809883a 	mov	r4,r17
   22734:	0022b6c0 	call	22b6c <_free_r>
   22738:	80000c15 	stw	zero,48(r16)
   2273c:	81401117 	ldw	r5,68(r16)
   22740:	28000326 	beq	r5,zero,22750 <_fclose_r+0xb4>
   22744:	8809883a 	mov	r4,r17
   22748:	0022b6c0 	call	22b6c <_free_r>
   2274c:	80001115 	stw	zero,68(r16)
   22750:	0020a540 	call	20a54 <__sfp_lock_acquire>
   22754:	8000030d 	sth	zero,12(r16)
   22758:	0020a580 	call	20a58 <__sfp_lock_release>
   2275c:	9005883a 	mov	r2,r18
   22760:	003fdc06 	br	226d4 <__alt_data_end+0xfffe26d4>
   22764:	0020a440 	call	20a44 <__sinit>
   22768:	003fd706 	br	226c8 <__alt_data_end+0xfffe26c8>
   2276c:	04bfffc4 	movi	r18,-1
   22770:	003fe806 	br	22714 <__alt_data_end+0xfffe2714>
   22774:	81400417 	ldw	r5,16(r16)
   22778:	8809883a 	mov	r4,r17
   2277c:	0022b6c0 	call	22b6c <_free_r>
   22780:	003fe706 	br	22720 <__alt_data_end+0xfffe2720>
   22784:	0005883a 	mov	r2,zero
   22788:	f800283a 	ret

0002278c <fclose>:
   2278c:	008000b4 	movhi	r2,2
   22790:	109eda04 	addi	r2,r2,31592
   22794:	200b883a 	mov	r5,r4
   22798:	11000017 	ldw	r4,0(r2)
   2279c:	002269c1 	jmpi	2269c <_fclose_r>

000227a0 <__sflush_r>:
   227a0:	2880030b 	ldhu	r2,12(r5)
   227a4:	defffb04 	addi	sp,sp,-20
   227a8:	dcc00315 	stw	r19,12(sp)
   227ac:	dc400115 	stw	r17,4(sp)
   227b0:	dfc00415 	stw	ra,16(sp)
   227b4:	dc800215 	stw	r18,8(sp)
   227b8:	dc000015 	stw	r16,0(sp)
   227bc:	10c0020c 	andi	r3,r2,8
   227c0:	2823883a 	mov	r17,r5
   227c4:	2027883a 	mov	r19,r4
   227c8:	1800311e 	bne	r3,zero,22890 <__sflush_r+0xf0>
   227cc:	28c00117 	ldw	r3,4(r5)
   227d0:	10820014 	ori	r2,r2,2048
   227d4:	2880030d 	sth	r2,12(r5)
   227d8:	00c04b0e 	bge	zero,r3,22908 <__sflush_r+0x168>
   227dc:	8a000a17 	ldw	r8,40(r17)
   227e0:	40002326 	beq	r8,zero,22870 <__sflush_r+0xd0>
   227e4:	9c000017 	ldw	r16,0(r19)
   227e8:	10c4000c 	andi	r3,r2,4096
   227ec:	98000015 	stw	zero,0(r19)
   227f0:	18004826 	beq	r3,zero,22914 <__sflush_r+0x174>
   227f4:	89801417 	ldw	r6,80(r17)
   227f8:	10c0010c 	andi	r3,r2,4
   227fc:	18000626 	beq	r3,zero,22818 <__sflush_r+0x78>
   22800:	88c00117 	ldw	r3,4(r17)
   22804:	88800c17 	ldw	r2,48(r17)
   22808:	30cdc83a 	sub	r6,r6,r3
   2280c:	10000226 	beq	r2,zero,22818 <__sflush_r+0x78>
   22810:	88800f17 	ldw	r2,60(r17)
   22814:	308dc83a 	sub	r6,r6,r2
   22818:	89400717 	ldw	r5,28(r17)
   2281c:	000f883a 	mov	r7,zero
   22820:	9809883a 	mov	r4,r19
   22824:	403ee83a 	callr	r8
   22828:	00ffffc4 	movi	r3,-1
   2282c:	10c04426 	beq	r2,r3,22940 <__sflush_r+0x1a0>
   22830:	88c0030b 	ldhu	r3,12(r17)
   22834:	89000417 	ldw	r4,16(r17)
   22838:	88000115 	stw	zero,4(r17)
   2283c:	197dffcc 	andi	r5,r3,63487
   22840:	8940030d 	sth	r5,12(r17)
   22844:	89000015 	stw	r4,0(r17)
   22848:	18c4000c 	andi	r3,r3,4096
   2284c:	18002c1e 	bne	r3,zero,22900 <__sflush_r+0x160>
   22850:	89400c17 	ldw	r5,48(r17)
   22854:	9c000015 	stw	r16,0(r19)
   22858:	28000526 	beq	r5,zero,22870 <__sflush_r+0xd0>
   2285c:	88801004 	addi	r2,r17,64
   22860:	28800226 	beq	r5,r2,2286c <__sflush_r+0xcc>
   22864:	9809883a 	mov	r4,r19
   22868:	0022b6c0 	call	22b6c <_free_r>
   2286c:	88000c15 	stw	zero,48(r17)
   22870:	0005883a 	mov	r2,zero
   22874:	dfc00417 	ldw	ra,16(sp)
   22878:	dcc00317 	ldw	r19,12(sp)
   2287c:	dc800217 	ldw	r18,8(sp)
   22880:	dc400117 	ldw	r17,4(sp)
   22884:	dc000017 	ldw	r16,0(sp)
   22888:	dec00504 	addi	sp,sp,20
   2288c:	f800283a 	ret
   22890:	2c800417 	ldw	r18,16(r5)
   22894:	903ff626 	beq	r18,zero,22870 <__alt_data_end+0xfffe2870>
   22898:	2c000017 	ldw	r16,0(r5)
   2289c:	108000cc 	andi	r2,r2,3
   228a0:	2c800015 	stw	r18,0(r5)
   228a4:	84a1c83a 	sub	r16,r16,r18
   228a8:	1000131e 	bne	r2,zero,228f8 <__sflush_r+0x158>
   228ac:	28800517 	ldw	r2,20(r5)
   228b0:	88800215 	stw	r2,8(r17)
   228b4:	04000316 	blt	zero,r16,228c4 <__sflush_r+0x124>
   228b8:	003fed06 	br	22870 <__alt_data_end+0xfffe2870>
   228bc:	90a5883a 	add	r18,r18,r2
   228c0:	043feb0e 	bge	zero,r16,22870 <__alt_data_end+0xfffe2870>
   228c4:	88800917 	ldw	r2,36(r17)
   228c8:	89400717 	ldw	r5,28(r17)
   228cc:	800f883a 	mov	r7,r16
   228d0:	900d883a 	mov	r6,r18
   228d4:	9809883a 	mov	r4,r19
   228d8:	103ee83a 	callr	r2
   228dc:	80a1c83a 	sub	r16,r16,r2
   228e0:	00bff616 	blt	zero,r2,228bc <__alt_data_end+0xfffe28bc>
   228e4:	88c0030b 	ldhu	r3,12(r17)
   228e8:	00bfffc4 	movi	r2,-1
   228ec:	18c01014 	ori	r3,r3,64
   228f0:	88c0030d 	sth	r3,12(r17)
   228f4:	003fdf06 	br	22874 <__alt_data_end+0xfffe2874>
   228f8:	0005883a 	mov	r2,zero
   228fc:	003fec06 	br	228b0 <__alt_data_end+0xfffe28b0>
   22900:	88801415 	stw	r2,80(r17)
   22904:	003fd206 	br	22850 <__alt_data_end+0xfffe2850>
   22908:	28c00f17 	ldw	r3,60(r5)
   2290c:	00ffb316 	blt	zero,r3,227dc <__alt_data_end+0xfffe27dc>
   22910:	003fd706 	br	22870 <__alt_data_end+0xfffe2870>
   22914:	89400717 	ldw	r5,28(r17)
   22918:	000d883a 	mov	r6,zero
   2291c:	01c00044 	movi	r7,1
   22920:	9809883a 	mov	r4,r19
   22924:	403ee83a 	callr	r8
   22928:	100d883a 	mov	r6,r2
   2292c:	00bfffc4 	movi	r2,-1
   22930:	30801426 	beq	r6,r2,22984 <__sflush_r+0x1e4>
   22934:	8880030b 	ldhu	r2,12(r17)
   22938:	8a000a17 	ldw	r8,40(r17)
   2293c:	003fae06 	br	227f8 <__alt_data_end+0xfffe27f8>
   22940:	98c00017 	ldw	r3,0(r19)
   22944:	183fba26 	beq	r3,zero,22830 <__alt_data_end+0xfffe2830>
   22948:	01000744 	movi	r4,29
   2294c:	19000626 	beq	r3,r4,22968 <__sflush_r+0x1c8>
   22950:	01000584 	movi	r4,22
   22954:	19000426 	beq	r3,r4,22968 <__sflush_r+0x1c8>
   22958:	88c0030b 	ldhu	r3,12(r17)
   2295c:	18c01014 	ori	r3,r3,64
   22960:	88c0030d 	sth	r3,12(r17)
   22964:	003fc306 	br	22874 <__alt_data_end+0xfffe2874>
   22968:	8880030b 	ldhu	r2,12(r17)
   2296c:	88c00417 	ldw	r3,16(r17)
   22970:	88000115 	stw	zero,4(r17)
   22974:	10bdffcc 	andi	r2,r2,63487
   22978:	8880030d 	sth	r2,12(r17)
   2297c:	88c00015 	stw	r3,0(r17)
   22980:	003fb306 	br	22850 <__alt_data_end+0xfffe2850>
   22984:	98800017 	ldw	r2,0(r19)
   22988:	103fea26 	beq	r2,zero,22934 <__alt_data_end+0xfffe2934>
   2298c:	00c00744 	movi	r3,29
   22990:	10c00226 	beq	r2,r3,2299c <__sflush_r+0x1fc>
   22994:	00c00584 	movi	r3,22
   22998:	10c0031e 	bne	r2,r3,229a8 <__sflush_r+0x208>
   2299c:	9c000015 	stw	r16,0(r19)
   229a0:	0005883a 	mov	r2,zero
   229a4:	003fb306 	br	22874 <__alt_data_end+0xfffe2874>
   229a8:	88c0030b 	ldhu	r3,12(r17)
   229ac:	3005883a 	mov	r2,r6
   229b0:	18c01014 	ori	r3,r3,64
   229b4:	88c0030d 	sth	r3,12(r17)
   229b8:	003fae06 	br	22874 <__alt_data_end+0xfffe2874>

000229bc <_fflush_r>:
   229bc:	defffd04 	addi	sp,sp,-12
   229c0:	dc000115 	stw	r16,4(sp)
   229c4:	dfc00215 	stw	ra,8(sp)
   229c8:	2021883a 	mov	r16,r4
   229cc:	20000226 	beq	r4,zero,229d8 <_fflush_r+0x1c>
   229d0:	20800e17 	ldw	r2,56(r4)
   229d4:	10000c26 	beq	r2,zero,22a08 <_fflush_r+0x4c>
   229d8:	2880030f 	ldh	r2,12(r5)
   229dc:	1000051e 	bne	r2,zero,229f4 <_fflush_r+0x38>
   229e0:	0005883a 	mov	r2,zero
   229e4:	dfc00217 	ldw	ra,8(sp)
   229e8:	dc000117 	ldw	r16,4(sp)
   229ec:	dec00304 	addi	sp,sp,12
   229f0:	f800283a 	ret
   229f4:	8009883a 	mov	r4,r16
   229f8:	dfc00217 	ldw	ra,8(sp)
   229fc:	dc000117 	ldw	r16,4(sp)
   22a00:	dec00304 	addi	sp,sp,12
   22a04:	00227a01 	jmpi	227a0 <__sflush_r>
   22a08:	d9400015 	stw	r5,0(sp)
   22a0c:	0020a440 	call	20a44 <__sinit>
   22a10:	d9400017 	ldw	r5,0(sp)
   22a14:	003ff006 	br	229d8 <__alt_data_end+0xfffe29d8>

00022a18 <fflush>:
   22a18:	20000526 	beq	r4,zero,22a30 <fflush+0x18>
   22a1c:	008000b4 	movhi	r2,2
   22a20:	109eda04 	addi	r2,r2,31592
   22a24:	200b883a 	mov	r5,r4
   22a28:	11000017 	ldw	r4,0(r2)
   22a2c:	00229bc1 	jmpi	229bc <_fflush_r>
   22a30:	008000b4 	movhi	r2,2
   22a34:	109ed904 	addi	r2,r2,31588
   22a38:	11000017 	ldw	r4,0(r2)
   22a3c:	014000b4 	movhi	r5,2
   22a40:	294a6f04 	addi	r5,r5,10684
   22a44:	00210201 	jmpi	21020 <_fwalk_reent>

00022a48 <_malloc_trim_r>:
   22a48:	defffb04 	addi	sp,sp,-20
   22a4c:	dcc00315 	stw	r19,12(sp)
   22a50:	04c000b4 	movhi	r19,2
   22a54:	dc800215 	stw	r18,8(sp)
   22a58:	dc400115 	stw	r17,4(sp)
   22a5c:	dc000015 	stw	r16,0(sp)
   22a60:	dfc00415 	stw	ra,16(sp)
   22a64:	2821883a 	mov	r16,r5
   22a68:	9cd95504 	addi	r19,r19,25940
   22a6c:	2025883a 	mov	r18,r4
   22a70:	00239200 	call	23920 <__malloc_lock>
   22a74:	98800217 	ldw	r2,8(r19)
   22a78:	14400117 	ldw	r17,4(r2)
   22a7c:	00bfff04 	movi	r2,-4
   22a80:	88a2703a 	and	r17,r17,r2
   22a84:	8c21c83a 	sub	r16,r17,r16
   22a88:	8403fbc4 	addi	r16,r16,4079
   22a8c:	8020d33a 	srli	r16,r16,12
   22a90:	0083ffc4 	movi	r2,4095
   22a94:	843fffc4 	addi	r16,r16,-1
   22a98:	8020933a 	slli	r16,r16,12
   22a9c:	1400060e 	bge	r2,r16,22ab8 <_malloc_trim_r+0x70>
   22aa0:	000b883a 	mov	r5,zero
   22aa4:	9009883a 	mov	r4,r18
   22aa8:	00223040 	call	22304 <_sbrk_r>
   22aac:	98c00217 	ldw	r3,8(r19)
   22ab0:	1c47883a 	add	r3,r3,r17
   22ab4:	10c00a26 	beq	r2,r3,22ae0 <_malloc_trim_r+0x98>
   22ab8:	9009883a 	mov	r4,r18
   22abc:	00239440 	call	23944 <__malloc_unlock>
   22ac0:	0005883a 	mov	r2,zero
   22ac4:	dfc00417 	ldw	ra,16(sp)
   22ac8:	dcc00317 	ldw	r19,12(sp)
   22acc:	dc800217 	ldw	r18,8(sp)
   22ad0:	dc400117 	ldw	r17,4(sp)
   22ad4:	dc000017 	ldw	r16,0(sp)
   22ad8:	dec00504 	addi	sp,sp,20
   22adc:	f800283a 	ret
   22ae0:	040bc83a 	sub	r5,zero,r16
   22ae4:	9009883a 	mov	r4,r18
   22ae8:	00223040 	call	22304 <_sbrk_r>
   22aec:	00ffffc4 	movi	r3,-1
   22af0:	10c00d26 	beq	r2,r3,22b28 <_malloc_trim_r+0xe0>
   22af4:	00c000f4 	movhi	r3,3
   22af8:	18e5ad04 	addi	r3,r3,-26956
   22afc:	18800017 	ldw	r2,0(r3)
   22b00:	99000217 	ldw	r4,8(r19)
   22b04:	8c23c83a 	sub	r17,r17,r16
   22b08:	8c400054 	ori	r17,r17,1
   22b0c:	1421c83a 	sub	r16,r2,r16
   22b10:	24400115 	stw	r17,4(r4)
   22b14:	9009883a 	mov	r4,r18
   22b18:	1c000015 	stw	r16,0(r3)
   22b1c:	00239440 	call	23944 <__malloc_unlock>
   22b20:	00800044 	movi	r2,1
   22b24:	003fe706 	br	22ac4 <__alt_data_end+0xfffe2ac4>
   22b28:	000b883a 	mov	r5,zero
   22b2c:	9009883a 	mov	r4,r18
   22b30:	00223040 	call	22304 <_sbrk_r>
   22b34:	99000217 	ldw	r4,8(r19)
   22b38:	014003c4 	movi	r5,15
   22b3c:	1107c83a 	sub	r3,r2,r4
   22b40:	28ffdd0e 	bge	r5,r3,22ab8 <__alt_data_end+0xfffe2ab8>
   22b44:	014000b4 	movhi	r5,2
   22b48:	295edb04 	addi	r5,r5,31596
   22b4c:	29400017 	ldw	r5,0(r5)
   22b50:	18c00054 	ori	r3,r3,1
   22b54:	20c00115 	stw	r3,4(r4)
   22b58:	00c000f4 	movhi	r3,3
   22b5c:	1145c83a 	sub	r2,r2,r5
   22b60:	18e5ad04 	addi	r3,r3,-26956
   22b64:	18800015 	stw	r2,0(r3)
   22b68:	003fd306 	br	22ab8 <__alt_data_end+0xfffe2ab8>

00022b6c <_free_r>:
   22b6c:	28004126 	beq	r5,zero,22c74 <_free_r+0x108>
   22b70:	defffd04 	addi	sp,sp,-12
   22b74:	dc400115 	stw	r17,4(sp)
   22b78:	dc000015 	stw	r16,0(sp)
   22b7c:	2023883a 	mov	r17,r4
   22b80:	2821883a 	mov	r16,r5
   22b84:	dfc00215 	stw	ra,8(sp)
   22b88:	00239200 	call	23920 <__malloc_lock>
   22b8c:	81ffff17 	ldw	r7,-4(r16)
   22b90:	00bfff84 	movi	r2,-2
   22b94:	010000b4 	movhi	r4,2
   22b98:	81bffe04 	addi	r6,r16,-8
   22b9c:	3884703a 	and	r2,r7,r2
   22ba0:	21195504 	addi	r4,r4,25940
   22ba4:	308b883a 	add	r5,r6,r2
   22ba8:	2a400117 	ldw	r9,4(r5)
   22bac:	22000217 	ldw	r8,8(r4)
   22bb0:	00ffff04 	movi	r3,-4
   22bb4:	48c6703a 	and	r3,r9,r3
   22bb8:	2a005726 	beq	r5,r8,22d18 <_free_r+0x1ac>
   22bbc:	28c00115 	stw	r3,4(r5)
   22bc0:	39c0004c 	andi	r7,r7,1
   22bc4:	3800091e 	bne	r7,zero,22bec <_free_r+0x80>
   22bc8:	823ffe17 	ldw	r8,-8(r16)
   22bcc:	22400204 	addi	r9,r4,8
   22bd0:	320dc83a 	sub	r6,r6,r8
   22bd4:	31c00217 	ldw	r7,8(r6)
   22bd8:	1205883a 	add	r2,r2,r8
   22bdc:	3a406526 	beq	r7,r9,22d74 <_free_r+0x208>
   22be0:	32000317 	ldw	r8,12(r6)
   22be4:	3a000315 	stw	r8,12(r7)
   22be8:	41c00215 	stw	r7,8(r8)
   22bec:	28cf883a 	add	r7,r5,r3
   22bf0:	39c00117 	ldw	r7,4(r7)
   22bf4:	39c0004c 	andi	r7,r7,1
   22bf8:	38003a26 	beq	r7,zero,22ce4 <_free_r+0x178>
   22bfc:	10c00054 	ori	r3,r2,1
   22c00:	30c00115 	stw	r3,4(r6)
   22c04:	3087883a 	add	r3,r6,r2
   22c08:	18800015 	stw	r2,0(r3)
   22c0c:	00c07fc4 	movi	r3,511
   22c10:	18801936 	bltu	r3,r2,22c78 <_free_r+0x10c>
   22c14:	1004d0fa 	srli	r2,r2,3
   22c18:	01c00044 	movi	r7,1
   22c1c:	21400117 	ldw	r5,4(r4)
   22c20:	10c00044 	addi	r3,r2,1
   22c24:	18c7883a 	add	r3,r3,r3
   22c28:	1005d0ba 	srai	r2,r2,2
   22c2c:	18c7883a 	add	r3,r3,r3
   22c30:	18c7883a 	add	r3,r3,r3
   22c34:	1907883a 	add	r3,r3,r4
   22c38:	3884983a 	sll	r2,r7,r2
   22c3c:	19c00017 	ldw	r7,0(r3)
   22c40:	1a3ffe04 	addi	r8,r3,-8
   22c44:	1144b03a 	or	r2,r2,r5
   22c48:	32000315 	stw	r8,12(r6)
   22c4c:	31c00215 	stw	r7,8(r6)
   22c50:	20800115 	stw	r2,4(r4)
   22c54:	19800015 	stw	r6,0(r3)
   22c58:	39800315 	stw	r6,12(r7)
   22c5c:	8809883a 	mov	r4,r17
   22c60:	dfc00217 	ldw	ra,8(sp)
   22c64:	dc400117 	ldw	r17,4(sp)
   22c68:	dc000017 	ldw	r16,0(sp)
   22c6c:	dec00304 	addi	sp,sp,12
   22c70:	00239441 	jmpi	23944 <__malloc_unlock>
   22c74:	f800283a 	ret
   22c78:	100ad27a 	srli	r5,r2,9
   22c7c:	00c00104 	movi	r3,4
   22c80:	19404a36 	bltu	r3,r5,22dac <_free_r+0x240>
   22c84:	100ad1ba 	srli	r5,r2,6
   22c88:	28c00e44 	addi	r3,r5,57
   22c8c:	18c7883a 	add	r3,r3,r3
   22c90:	29400e04 	addi	r5,r5,56
   22c94:	18c7883a 	add	r3,r3,r3
   22c98:	18c7883a 	add	r3,r3,r3
   22c9c:	1909883a 	add	r4,r3,r4
   22ca0:	20c00017 	ldw	r3,0(r4)
   22ca4:	01c000b4 	movhi	r7,2
   22ca8:	213ffe04 	addi	r4,r4,-8
   22cac:	39d95504 	addi	r7,r7,25940
   22cb0:	20c04426 	beq	r4,r3,22dc4 <_free_r+0x258>
   22cb4:	01ffff04 	movi	r7,-4
   22cb8:	19400117 	ldw	r5,4(r3)
   22cbc:	29ca703a 	and	r5,r5,r7
   22cc0:	1140022e 	bgeu	r2,r5,22ccc <_free_r+0x160>
   22cc4:	18c00217 	ldw	r3,8(r3)
   22cc8:	20fffb1e 	bne	r4,r3,22cb8 <__alt_data_end+0xfffe2cb8>
   22ccc:	19000317 	ldw	r4,12(r3)
   22cd0:	31000315 	stw	r4,12(r6)
   22cd4:	30c00215 	stw	r3,8(r6)
   22cd8:	21800215 	stw	r6,8(r4)
   22cdc:	19800315 	stw	r6,12(r3)
   22ce0:	003fde06 	br	22c5c <__alt_data_end+0xfffe2c5c>
   22ce4:	29c00217 	ldw	r7,8(r5)
   22ce8:	10c5883a 	add	r2,r2,r3
   22cec:	00c000b4 	movhi	r3,2
   22cf0:	18d95704 	addi	r3,r3,25948
   22cf4:	38c03b26 	beq	r7,r3,22de4 <_free_r+0x278>
   22cf8:	2a000317 	ldw	r8,12(r5)
   22cfc:	11400054 	ori	r5,r2,1
   22d00:	3087883a 	add	r3,r6,r2
   22d04:	3a000315 	stw	r8,12(r7)
   22d08:	41c00215 	stw	r7,8(r8)
   22d0c:	31400115 	stw	r5,4(r6)
   22d10:	18800015 	stw	r2,0(r3)
   22d14:	003fbd06 	br	22c0c <__alt_data_end+0xfffe2c0c>
   22d18:	39c0004c 	andi	r7,r7,1
   22d1c:	10c5883a 	add	r2,r2,r3
   22d20:	3800071e 	bne	r7,zero,22d40 <_free_r+0x1d4>
   22d24:	81fffe17 	ldw	r7,-8(r16)
   22d28:	31cdc83a 	sub	r6,r6,r7
   22d2c:	30c00317 	ldw	r3,12(r6)
   22d30:	31400217 	ldw	r5,8(r6)
   22d34:	11c5883a 	add	r2,r2,r7
   22d38:	28c00315 	stw	r3,12(r5)
   22d3c:	19400215 	stw	r5,8(r3)
   22d40:	10c00054 	ori	r3,r2,1
   22d44:	30c00115 	stw	r3,4(r6)
   22d48:	00c000b4 	movhi	r3,2
   22d4c:	18dedc04 	addi	r3,r3,31600
   22d50:	18c00017 	ldw	r3,0(r3)
   22d54:	21800215 	stw	r6,8(r4)
   22d58:	10ffc036 	bltu	r2,r3,22c5c <__alt_data_end+0xfffe2c5c>
   22d5c:	008000f4 	movhi	r2,3
   22d60:	10a5a404 	addi	r2,r2,-26992
   22d64:	11400017 	ldw	r5,0(r2)
   22d68:	8809883a 	mov	r4,r17
   22d6c:	0022a480 	call	22a48 <_malloc_trim_r>
   22d70:	003fba06 	br	22c5c <__alt_data_end+0xfffe2c5c>
   22d74:	28c9883a 	add	r4,r5,r3
   22d78:	21000117 	ldw	r4,4(r4)
   22d7c:	2100004c 	andi	r4,r4,1
   22d80:	2000391e 	bne	r4,zero,22e68 <_free_r+0x2fc>
   22d84:	29c00217 	ldw	r7,8(r5)
   22d88:	29000317 	ldw	r4,12(r5)
   22d8c:	1885883a 	add	r2,r3,r2
   22d90:	10c00054 	ori	r3,r2,1
   22d94:	39000315 	stw	r4,12(r7)
   22d98:	21c00215 	stw	r7,8(r4)
   22d9c:	30c00115 	stw	r3,4(r6)
   22da0:	308d883a 	add	r6,r6,r2
   22da4:	30800015 	stw	r2,0(r6)
   22da8:	003fac06 	br	22c5c <__alt_data_end+0xfffe2c5c>
   22dac:	00c00504 	movi	r3,20
   22db0:	19401536 	bltu	r3,r5,22e08 <_free_r+0x29c>
   22db4:	28c01704 	addi	r3,r5,92
   22db8:	18c7883a 	add	r3,r3,r3
   22dbc:	294016c4 	addi	r5,r5,91
   22dc0:	003fb406 	br	22c94 <__alt_data_end+0xfffe2c94>
   22dc4:	280bd0ba 	srai	r5,r5,2
   22dc8:	00c00044 	movi	r3,1
   22dcc:	38800117 	ldw	r2,4(r7)
   22dd0:	194a983a 	sll	r5,r3,r5
   22dd4:	2007883a 	mov	r3,r4
   22dd8:	2884b03a 	or	r2,r5,r2
   22ddc:	38800115 	stw	r2,4(r7)
   22de0:	003fbb06 	br	22cd0 <__alt_data_end+0xfffe2cd0>
   22de4:	21800515 	stw	r6,20(r4)
   22de8:	21800415 	stw	r6,16(r4)
   22dec:	10c00054 	ori	r3,r2,1
   22df0:	31c00315 	stw	r7,12(r6)
   22df4:	31c00215 	stw	r7,8(r6)
   22df8:	30c00115 	stw	r3,4(r6)
   22dfc:	308d883a 	add	r6,r6,r2
   22e00:	30800015 	stw	r2,0(r6)
   22e04:	003f9506 	br	22c5c <__alt_data_end+0xfffe2c5c>
   22e08:	00c01504 	movi	r3,84
   22e0c:	19400536 	bltu	r3,r5,22e24 <_free_r+0x2b8>
   22e10:	100ad33a 	srli	r5,r2,12
   22e14:	28c01bc4 	addi	r3,r5,111
   22e18:	18c7883a 	add	r3,r3,r3
   22e1c:	29401b84 	addi	r5,r5,110
   22e20:	003f9c06 	br	22c94 <__alt_data_end+0xfffe2c94>
   22e24:	00c05504 	movi	r3,340
   22e28:	19400536 	bltu	r3,r5,22e40 <_free_r+0x2d4>
   22e2c:	100ad3fa 	srli	r5,r2,15
   22e30:	28c01e04 	addi	r3,r5,120
   22e34:	18c7883a 	add	r3,r3,r3
   22e38:	29401dc4 	addi	r5,r5,119
   22e3c:	003f9506 	br	22c94 <__alt_data_end+0xfffe2c94>
   22e40:	00c15504 	movi	r3,1364
   22e44:	19400536 	bltu	r3,r5,22e5c <_free_r+0x2f0>
   22e48:	100ad4ba 	srli	r5,r2,18
   22e4c:	28c01f44 	addi	r3,r5,125
   22e50:	18c7883a 	add	r3,r3,r3
   22e54:	29401f04 	addi	r5,r5,124
   22e58:	003f8e06 	br	22c94 <__alt_data_end+0xfffe2c94>
   22e5c:	00c03f84 	movi	r3,254
   22e60:	01401f84 	movi	r5,126
   22e64:	003f8b06 	br	22c94 <__alt_data_end+0xfffe2c94>
   22e68:	10c00054 	ori	r3,r2,1
   22e6c:	30c00115 	stw	r3,4(r6)
   22e70:	308d883a 	add	r6,r6,r2
   22e74:	30800015 	stw	r2,0(r6)
   22e78:	003f7806 	br	22c5c <__alt_data_end+0xfffe2c5c>

00022e7c <_lseek_r>:
   22e7c:	defffd04 	addi	sp,sp,-12
   22e80:	2805883a 	mov	r2,r5
   22e84:	dc000015 	stw	r16,0(sp)
   22e88:	040000f4 	movhi	r16,3
   22e8c:	dc400115 	stw	r17,4(sp)
   22e90:	300b883a 	mov	r5,r6
   22e94:	8425a504 	addi	r16,r16,-26988
   22e98:	2023883a 	mov	r17,r4
   22e9c:	380d883a 	mov	r6,r7
   22ea0:	1009883a 	mov	r4,r2
   22ea4:	dfc00215 	stw	ra,8(sp)
   22ea8:	80000015 	stw	zero,0(r16)
   22eac:	00237c80 	call	237c8 <lseek>
   22eb0:	00ffffc4 	movi	r3,-1
   22eb4:	10c00526 	beq	r2,r3,22ecc <_lseek_r+0x50>
   22eb8:	dfc00217 	ldw	ra,8(sp)
   22ebc:	dc400117 	ldw	r17,4(sp)
   22ec0:	dc000017 	ldw	r16,0(sp)
   22ec4:	dec00304 	addi	sp,sp,12
   22ec8:	f800283a 	ret
   22ecc:	80c00017 	ldw	r3,0(r16)
   22ed0:	183ff926 	beq	r3,zero,22eb8 <__alt_data_end+0xfffe2eb8>
   22ed4:	88c00015 	stw	r3,0(r17)
   22ed8:	003ff706 	br	22eb8 <__alt_data_end+0xfffe2eb8>

00022edc <__smakebuf_r>:
   22edc:	2880030b 	ldhu	r2,12(r5)
   22ee0:	10c0008c 	andi	r3,r2,2
   22ee4:	1800411e 	bne	r3,zero,22fec <__smakebuf_r+0x110>
   22ee8:	deffec04 	addi	sp,sp,-80
   22eec:	dc000f15 	stw	r16,60(sp)
   22ef0:	2821883a 	mov	r16,r5
   22ef4:	2940038f 	ldh	r5,14(r5)
   22ef8:	dc401015 	stw	r17,64(sp)
   22efc:	dfc01315 	stw	ra,76(sp)
   22f00:	dcc01215 	stw	r19,72(sp)
   22f04:	dc801115 	stw	r18,68(sp)
   22f08:	2023883a 	mov	r17,r4
   22f0c:	28001c16 	blt	r5,zero,22f80 <__smakebuf_r+0xa4>
   22f10:	d80d883a 	mov	r6,sp
   22f14:	00230f80 	call	230f8 <_fstat_r>
   22f18:	10001816 	blt	r2,zero,22f7c <__smakebuf_r+0xa0>
   22f1c:	d8800117 	ldw	r2,4(sp)
   22f20:	00e00014 	movui	r3,32768
   22f24:	10bc000c 	andi	r2,r2,61440
   22f28:	14c80020 	cmpeqi	r19,r2,8192
   22f2c:	10c03726 	beq	r2,r3,2300c <__smakebuf_r+0x130>
   22f30:	80c0030b 	ldhu	r3,12(r16)
   22f34:	18c20014 	ori	r3,r3,2048
   22f38:	80c0030d 	sth	r3,12(r16)
   22f3c:	00c80004 	movi	r3,8192
   22f40:	10c0521e 	bne	r2,r3,2308c <__smakebuf_r+0x1b0>
   22f44:	8140038f 	ldh	r5,14(r16)
   22f48:	8809883a 	mov	r4,r17
   22f4c:	00231540 	call	23154 <_isatty_r>
   22f50:	10004c26 	beq	r2,zero,23084 <__smakebuf_r+0x1a8>
   22f54:	8080030b 	ldhu	r2,12(r16)
   22f58:	80c010c4 	addi	r3,r16,67
   22f5c:	80c00015 	stw	r3,0(r16)
   22f60:	10800054 	ori	r2,r2,1
   22f64:	8080030d 	sth	r2,12(r16)
   22f68:	00800044 	movi	r2,1
   22f6c:	80c00415 	stw	r3,16(r16)
   22f70:	80800515 	stw	r2,20(r16)
   22f74:	04810004 	movi	r18,1024
   22f78:	00000706 	br	22f98 <__smakebuf_r+0xbc>
   22f7c:	8080030b 	ldhu	r2,12(r16)
   22f80:	10c0200c 	andi	r3,r2,128
   22f84:	18001f1e 	bne	r3,zero,23004 <__smakebuf_r+0x128>
   22f88:	04810004 	movi	r18,1024
   22f8c:	10820014 	ori	r2,r2,2048
   22f90:	8080030d 	sth	r2,12(r16)
   22f94:	0027883a 	mov	r19,zero
   22f98:	900b883a 	mov	r5,r18
   22f9c:	8809883a 	mov	r4,r17
   22fa0:	00210e40 	call	210e4 <_malloc_r>
   22fa4:	10002c26 	beq	r2,zero,23058 <__smakebuf_r+0x17c>
   22fa8:	80c0030b 	ldhu	r3,12(r16)
   22fac:	010000b4 	movhi	r4,2
   22fb0:	2101bb04 	addi	r4,r4,1772
   22fb4:	89000f15 	stw	r4,60(r17)
   22fb8:	18c02014 	ori	r3,r3,128
   22fbc:	80c0030d 	sth	r3,12(r16)
   22fc0:	80800015 	stw	r2,0(r16)
   22fc4:	80800415 	stw	r2,16(r16)
   22fc8:	84800515 	stw	r18,20(r16)
   22fcc:	98001a1e 	bne	r19,zero,23038 <__smakebuf_r+0x15c>
   22fd0:	dfc01317 	ldw	ra,76(sp)
   22fd4:	dcc01217 	ldw	r19,72(sp)
   22fd8:	dc801117 	ldw	r18,68(sp)
   22fdc:	dc401017 	ldw	r17,64(sp)
   22fe0:	dc000f17 	ldw	r16,60(sp)
   22fe4:	dec01404 	addi	sp,sp,80
   22fe8:	f800283a 	ret
   22fec:	288010c4 	addi	r2,r5,67
   22ff0:	28800015 	stw	r2,0(r5)
   22ff4:	28800415 	stw	r2,16(r5)
   22ff8:	00800044 	movi	r2,1
   22ffc:	28800515 	stw	r2,20(r5)
   23000:	f800283a 	ret
   23004:	04801004 	movi	r18,64
   23008:	003fe006 	br	22f8c <__alt_data_end+0xfffe2f8c>
   2300c:	81000a17 	ldw	r4,40(r16)
   23010:	00c000b4 	movhi	r3,2
   23014:	18c90c04 	addi	r3,r3,9264
   23018:	20ffc51e 	bne	r4,r3,22f30 <__alt_data_end+0xfffe2f30>
   2301c:	8080030b 	ldhu	r2,12(r16)
   23020:	04810004 	movi	r18,1024
   23024:	84801315 	stw	r18,76(r16)
   23028:	1484b03a 	or	r2,r2,r18
   2302c:	8080030d 	sth	r2,12(r16)
   23030:	0027883a 	mov	r19,zero
   23034:	003fd806 	br	22f98 <__alt_data_end+0xfffe2f98>
   23038:	8140038f 	ldh	r5,14(r16)
   2303c:	8809883a 	mov	r4,r17
   23040:	00231540 	call	23154 <_isatty_r>
   23044:	103fe226 	beq	r2,zero,22fd0 <__alt_data_end+0xfffe2fd0>
   23048:	8080030b 	ldhu	r2,12(r16)
   2304c:	10800054 	ori	r2,r2,1
   23050:	8080030d 	sth	r2,12(r16)
   23054:	003fde06 	br	22fd0 <__alt_data_end+0xfffe2fd0>
   23058:	8080030b 	ldhu	r2,12(r16)
   2305c:	10c0800c 	andi	r3,r2,512
   23060:	183fdb1e 	bne	r3,zero,22fd0 <__alt_data_end+0xfffe2fd0>
   23064:	10800094 	ori	r2,r2,2
   23068:	80c010c4 	addi	r3,r16,67
   2306c:	8080030d 	sth	r2,12(r16)
   23070:	00800044 	movi	r2,1
   23074:	80c00015 	stw	r3,0(r16)
   23078:	80c00415 	stw	r3,16(r16)
   2307c:	80800515 	stw	r2,20(r16)
   23080:	003fd306 	br	22fd0 <__alt_data_end+0xfffe2fd0>
   23084:	04810004 	movi	r18,1024
   23088:	003fc306 	br	22f98 <__alt_data_end+0xfffe2f98>
   2308c:	0027883a 	mov	r19,zero
   23090:	04810004 	movi	r18,1024
   23094:	003fc006 	br	22f98 <__alt_data_end+0xfffe2f98>

00023098 <_read_r>:
   23098:	defffd04 	addi	sp,sp,-12
   2309c:	2805883a 	mov	r2,r5
   230a0:	dc000015 	stw	r16,0(sp)
   230a4:	040000f4 	movhi	r16,3
   230a8:	dc400115 	stw	r17,4(sp)
   230ac:	300b883a 	mov	r5,r6
   230b0:	8425a504 	addi	r16,r16,-26988
   230b4:	2023883a 	mov	r17,r4
   230b8:	380d883a 	mov	r6,r7
   230bc:	1009883a 	mov	r4,r2
   230c0:	dfc00215 	stw	ra,8(sp)
   230c4:	80000015 	stw	zero,0(r16)
   230c8:	00239a40 	call	239a4 <read>
   230cc:	00ffffc4 	movi	r3,-1
   230d0:	10c00526 	beq	r2,r3,230e8 <_read_r+0x50>
   230d4:	dfc00217 	ldw	ra,8(sp)
   230d8:	dc400117 	ldw	r17,4(sp)
   230dc:	dc000017 	ldw	r16,0(sp)
   230e0:	dec00304 	addi	sp,sp,12
   230e4:	f800283a 	ret
   230e8:	80c00017 	ldw	r3,0(r16)
   230ec:	183ff926 	beq	r3,zero,230d4 <__alt_data_end+0xfffe30d4>
   230f0:	88c00015 	stw	r3,0(r17)
   230f4:	003ff706 	br	230d4 <__alt_data_end+0xfffe30d4>

000230f8 <_fstat_r>:
   230f8:	defffd04 	addi	sp,sp,-12
   230fc:	2805883a 	mov	r2,r5
   23100:	dc000015 	stw	r16,0(sp)
   23104:	040000f4 	movhi	r16,3
   23108:	dc400115 	stw	r17,4(sp)
   2310c:	8425a504 	addi	r16,r16,-26988
   23110:	2023883a 	mov	r17,r4
   23114:	300b883a 	mov	r5,r6
   23118:	1009883a 	mov	r4,r2
   2311c:	dfc00215 	stw	ra,8(sp)
   23120:	80000015 	stw	zero,0(r16)
   23124:	00235000 	call	23500 <fstat>
   23128:	00ffffc4 	movi	r3,-1
   2312c:	10c00526 	beq	r2,r3,23144 <_fstat_r+0x4c>
   23130:	dfc00217 	ldw	ra,8(sp)
   23134:	dc400117 	ldw	r17,4(sp)
   23138:	dc000017 	ldw	r16,0(sp)
   2313c:	dec00304 	addi	sp,sp,12
   23140:	f800283a 	ret
   23144:	80c00017 	ldw	r3,0(r16)
   23148:	183ff926 	beq	r3,zero,23130 <__alt_data_end+0xfffe3130>
   2314c:	88c00015 	stw	r3,0(r17)
   23150:	003ff706 	br	23130 <__alt_data_end+0xfffe3130>

00023154 <_isatty_r>:
   23154:	defffd04 	addi	sp,sp,-12
   23158:	dc000015 	stw	r16,0(sp)
   2315c:	040000f4 	movhi	r16,3
   23160:	dc400115 	stw	r17,4(sp)
   23164:	8425a504 	addi	r16,r16,-26988
   23168:	2023883a 	mov	r17,r4
   2316c:	2809883a 	mov	r4,r5
   23170:	dfc00215 	stw	ra,8(sp)
   23174:	80000015 	stw	zero,0(r16)
   23178:	00235f40 	call	235f4 <isatty>
   2317c:	00ffffc4 	movi	r3,-1
   23180:	10c00526 	beq	r2,r3,23198 <_isatty_r+0x44>
   23184:	dfc00217 	ldw	ra,8(sp)
   23188:	dc400117 	ldw	r17,4(sp)
   2318c:	dc000017 	ldw	r16,0(sp)
   23190:	dec00304 	addi	sp,sp,12
   23194:	f800283a 	ret
   23198:	80c00017 	ldw	r3,0(r16)
   2319c:	183ff926 	beq	r3,zero,23184 <__alt_data_end+0xfffe3184>
   231a0:	88c00015 	stw	r3,0(r17)
   231a4:	003ff706 	br	23184 <__alt_data_end+0xfffe3184>

000231a8 <__divsi3>:
   231a8:	20001b16 	blt	r4,zero,23218 <__divsi3+0x70>
   231ac:	000f883a 	mov	r7,zero
   231b0:	28001616 	blt	r5,zero,2320c <__divsi3+0x64>
   231b4:	200d883a 	mov	r6,r4
   231b8:	29001a2e 	bgeu	r5,r4,23224 <__divsi3+0x7c>
   231bc:	00800804 	movi	r2,32
   231c0:	00c00044 	movi	r3,1
   231c4:	00000106 	br	231cc <__divsi3+0x24>
   231c8:	10000d26 	beq	r2,zero,23200 <__divsi3+0x58>
   231cc:	294b883a 	add	r5,r5,r5
   231d0:	10bfffc4 	addi	r2,r2,-1
   231d4:	18c7883a 	add	r3,r3,r3
   231d8:	293ffb36 	bltu	r5,r4,231c8 <__alt_data_end+0xfffe31c8>
   231dc:	0005883a 	mov	r2,zero
   231e0:	18000726 	beq	r3,zero,23200 <__divsi3+0x58>
   231e4:	0005883a 	mov	r2,zero
   231e8:	31400236 	bltu	r6,r5,231f4 <__divsi3+0x4c>
   231ec:	314dc83a 	sub	r6,r6,r5
   231f0:	10c4b03a 	or	r2,r2,r3
   231f4:	1806d07a 	srli	r3,r3,1
   231f8:	280ad07a 	srli	r5,r5,1
   231fc:	183ffa1e 	bne	r3,zero,231e8 <__alt_data_end+0xfffe31e8>
   23200:	38000126 	beq	r7,zero,23208 <__divsi3+0x60>
   23204:	0085c83a 	sub	r2,zero,r2
   23208:	f800283a 	ret
   2320c:	014bc83a 	sub	r5,zero,r5
   23210:	39c0005c 	xori	r7,r7,1
   23214:	003fe706 	br	231b4 <__alt_data_end+0xfffe31b4>
   23218:	0109c83a 	sub	r4,zero,r4
   2321c:	01c00044 	movi	r7,1
   23220:	003fe306 	br	231b0 <__alt_data_end+0xfffe31b0>
   23224:	00c00044 	movi	r3,1
   23228:	003fee06 	br	231e4 <__alt_data_end+0xfffe31e4>

0002322c <__modsi3>:
   2322c:	20001716 	blt	r4,zero,2328c <__modsi3+0x60>
   23230:	000f883a 	mov	r7,zero
   23234:	2005883a 	mov	r2,r4
   23238:	28001216 	blt	r5,zero,23284 <__modsi3+0x58>
   2323c:	2900162e 	bgeu	r5,r4,23298 <__modsi3+0x6c>
   23240:	01800804 	movi	r6,32
   23244:	00c00044 	movi	r3,1
   23248:	00000106 	br	23250 <__modsi3+0x24>
   2324c:	30000a26 	beq	r6,zero,23278 <__modsi3+0x4c>
   23250:	294b883a 	add	r5,r5,r5
   23254:	31bfffc4 	addi	r6,r6,-1
   23258:	18c7883a 	add	r3,r3,r3
   2325c:	293ffb36 	bltu	r5,r4,2324c <__alt_data_end+0xfffe324c>
   23260:	18000526 	beq	r3,zero,23278 <__modsi3+0x4c>
   23264:	1806d07a 	srli	r3,r3,1
   23268:	11400136 	bltu	r2,r5,23270 <__modsi3+0x44>
   2326c:	1145c83a 	sub	r2,r2,r5
   23270:	280ad07a 	srli	r5,r5,1
   23274:	183ffb1e 	bne	r3,zero,23264 <__alt_data_end+0xfffe3264>
   23278:	38000126 	beq	r7,zero,23280 <__modsi3+0x54>
   2327c:	0085c83a 	sub	r2,zero,r2
   23280:	f800283a 	ret
   23284:	014bc83a 	sub	r5,zero,r5
   23288:	003fec06 	br	2323c <__alt_data_end+0xfffe323c>
   2328c:	0109c83a 	sub	r4,zero,r4
   23290:	01c00044 	movi	r7,1
   23294:	003fe706 	br	23234 <__alt_data_end+0xfffe3234>
   23298:	00c00044 	movi	r3,1
   2329c:	003ff106 	br	23264 <__alt_data_end+0xfffe3264>

000232a0 <__udivsi3>:
   232a0:	200d883a 	mov	r6,r4
   232a4:	2900152e 	bgeu	r5,r4,232fc <__udivsi3+0x5c>
   232a8:	28001416 	blt	r5,zero,232fc <__udivsi3+0x5c>
   232ac:	00800804 	movi	r2,32
   232b0:	00c00044 	movi	r3,1
   232b4:	00000206 	br	232c0 <__udivsi3+0x20>
   232b8:	10000e26 	beq	r2,zero,232f4 <__udivsi3+0x54>
   232bc:	28000516 	blt	r5,zero,232d4 <__udivsi3+0x34>
   232c0:	294b883a 	add	r5,r5,r5
   232c4:	10bfffc4 	addi	r2,r2,-1
   232c8:	18c7883a 	add	r3,r3,r3
   232cc:	293ffa36 	bltu	r5,r4,232b8 <__alt_data_end+0xfffe32b8>
   232d0:	18000826 	beq	r3,zero,232f4 <__udivsi3+0x54>
   232d4:	0005883a 	mov	r2,zero
   232d8:	31400236 	bltu	r6,r5,232e4 <__udivsi3+0x44>
   232dc:	314dc83a 	sub	r6,r6,r5
   232e0:	10c4b03a 	or	r2,r2,r3
   232e4:	1806d07a 	srli	r3,r3,1
   232e8:	280ad07a 	srli	r5,r5,1
   232ec:	183ffa1e 	bne	r3,zero,232d8 <__alt_data_end+0xfffe32d8>
   232f0:	f800283a 	ret
   232f4:	0005883a 	mov	r2,zero
   232f8:	f800283a 	ret
   232fc:	00c00044 	movi	r3,1
   23300:	003ff406 	br	232d4 <__alt_data_end+0xfffe32d4>

00023304 <__umodsi3>:
   23304:	2005883a 	mov	r2,r4
   23308:	2900122e 	bgeu	r5,r4,23354 <__umodsi3+0x50>
   2330c:	28001116 	blt	r5,zero,23354 <__umodsi3+0x50>
   23310:	01800804 	movi	r6,32
   23314:	00c00044 	movi	r3,1
   23318:	00000206 	br	23324 <__umodsi3+0x20>
   2331c:	30000c26 	beq	r6,zero,23350 <__umodsi3+0x4c>
   23320:	28000516 	blt	r5,zero,23338 <__umodsi3+0x34>
   23324:	294b883a 	add	r5,r5,r5
   23328:	31bfffc4 	addi	r6,r6,-1
   2332c:	18c7883a 	add	r3,r3,r3
   23330:	293ffa36 	bltu	r5,r4,2331c <__alt_data_end+0xfffe331c>
   23334:	18000626 	beq	r3,zero,23350 <__umodsi3+0x4c>
   23338:	1806d07a 	srli	r3,r3,1
   2333c:	11400136 	bltu	r2,r5,23344 <__umodsi3+0x40>
   23340:	1145c83a 	sub	r2,r2,r5
   23344:	280ad07a 	srli	r5,r5,1
   23348:	183ffb1e 	bne	r3,zero,23338 <__alt_data_end+0xfffe3338>
   2334c:	f800283a 	ret
   23350:	f800283a 	ret
   23354:	00c00044 	movi	r3,1
   23358:	003ff706 	br	23338 <__alt_data_end+0xfffe3338>

0002335c <__mulsi3>:
   2335c:	0005883a 	mov	r2,zero
   23360:	20000726 	beq	r4,zero,23380 <__mulsi3+0x24>
   23364:	20c0004c 	andi	r3,r4,1
   23368:	2008d07a 	srli	r4,r4,1
   2336c:	18000126 	beq	r3,zero,23374 <__mulsi3+0x18>
   23370:	1145883a 	add	r2,r2,r5
   23374:	294b883a 	add	r5,r5,r5
   23378:	203ffa1e 	bne	r4,zero,23364 <__alt_data_end+0xfffe3364>
   2337c:	f800283a 	ret
   23380:	f800283a 	ret

00023384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23384:	defffe04 	addi	sp,sp,-8
   23388:	dfc00115 	stw	ra,4(sp)
   2338c:	df000015 	stw	fp,0(sp)
   23390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23394:	d0a00917 	ldw	r2,-32732(gp)
   23398:	10000326 	beq	r2,zero,233a8 <alt_get_errno+0x24>
   2339c:	d0a00917 	ldw	r2,-32732(gp)
   233a0:	103ee83a 	callr	r2
   233a4:	00000106 	br	233ac <alt_get_errno+0x28>
   233a8:	d0a6cc04 	addi	r2,gp,-25808
}
   233ac:	e037883a 	mov	sp,fp
   233b0:	dfc00117 	ldw	ra,4(sp)
   233b4:	df000017 	ldw	fp,0(sp)
   233b8:	dec00204 	addi	sp,sp,8
   233bc:	f800283a 	ret

000233c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   233c0:	defffb04 	addi	sp,sp,-20
   233c4:	dfc00415 	stw	ra,16(sp)
   233c8:	df000315 	stw	fp,12(sp)
   233cc:	df000304 	addi	fp,sp,12
   233d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   233d4:	e0bfff17 	ldw	r2,-4(fp)
   233d8:	10000816 	blt	r2,zero,233fc <close+0x3c>
   233dc:	01400304 	movi	r5,12
   233e0:	e13fff17 	ldw	r4,-4(fp)
   233e4:	002335c0 	call	2335c <__mulsi3>
   233e8:	1007883a 	mov	r3,r2
   233ec:	008000b4 	movhi	r2,2
   233f0:	109a6104 	addi	r2,r2,27012
   233f4:	1885883a 	add	r2,r3,r2
   233f8:	00000106 	br	23400 <close+0x40>
   233fc:	0005883a 	mov	r2,zero
   23400:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23404:	e0bffd17 	ldw	r2,-12(fp)
   23408:	10001926 	beq	r2,zero,23470 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2340c:	e0bffd17 	ldw	r2,-12(fp)
   23410:	10800017 	ldw	r2,0(r2)
   23414:	10800417 	ldw	r2,16(r2)
   23418:	10000626 	beq	r2,zero,23434 <close+0x74>
   2341c:	e0bffd17 	ldw	r2,-12(fp)
   23420:	10800017 	ldw	r2,0(r2)
   23424:	10800417 	ldw	r2,16(r2)
   23428:	e13ffd17 	ldw	r4,-12(fp)
   2342c:	103ee83a 	callr	r2
   23430:	00000106 	br	23438 <close+0x78>
   23434:	0005883a 	mov	r2,zero
   23438:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2343c:	e13fff17 	ldw	r4,-4(fp)
   23440:	0023aa80 	call	23aa8 <alt_release_fd>
    if (rval < 0)
   23444:	e0bffe17 	ldw	r2,-8(fp)
   23448:	1000070e 	bge	r2,zero,23468 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2344c:	00233840 	call	23384 <alt_get_errno>
   23450:	1007883a 	mov	r3,r2
   23454:	e0bffe17 	ldw	r2,-8(fp)
   23458:	0085c83a 	sub	r2,zero,r2
   2345c:	18800015 	stw	r2,0(r3)
      return -1;
   23460:	00bfffc4 	movi	r2,-1
   23464:	00000706 	br	23484 <close+0xc4>
    }
    return 0;
   23468:	0005883a 	mov	r2,zero
   2346c:	00000506 	br	23484 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23470:	00233840 	call	23384 <alt_get_errno>
   23474:	1007883a 	mov	r3,r2
   23478:	00801444 	movi	r2,81
   2347c:	18800015 	stw	r2,0(r3)
    return -1;
   23480:	00bfffc4 	movi	r2,-1
  }
}
   23484:	e037883a 	mov	sp,fp
   23488:	dfc00117 	ldw	ra,4(sp)
   2348c:	df000017 	ldw	fp,0(sp)
   23490:	dec00204 	addi	sp,sp,8
   23494:	f800283a 	ret

00023498 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23498:	defffc04 	addi	sp,sp,-16
   2349c:	df000315 	stw	fp,12(sp)
   234a0:	df000304 	addi	fp,sp,12
   234a4:	e13ffd15 	stw	r4,-12(fp)
   234a8:	e17ffe15 	stw	r5,-8(fp)
   234ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   234b0:	e0bfff17 	ldw	r2,-4(fp)
}
   234b4:	e037883a 	mov	sp,fp
   234b8:	df000017 	ldw	fp,0(sp)
   234bc:	dec00104 	addi	sp,sp,4
   234c0:	f800283a 	ret

000234c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   234c4:	defffe04 	addi	sp,sp,-8
   234c8:	dfc00115 	stw	ra,4(sp)
   234cc:	df000015 	stw	fp,0(sp)
   234d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   234d4:	d0a00917 	ldw	r2,-32732(gp)
   234d8:	10000326 	beq	r2,zero,234e8 <alt_get_errno+0x24>
   234dc:	d0a00917 	ldw	r2,-32732(gp)
   234e0:	103ee83a 	callr	r2
   234e4:	00000106 	br	234ec <alt_get_errno+0x28>
   234e8:	d0a6cc04 	addi	r2,gp,-25808
}
   234ec:	e037883a 	mov	sp,fp
   234f0:	dfc00117 	ldw	ra,4(sp)
   234f4:	df000017 	ldw	fp,0(sp)
   234f8:	dec00204 	addi	sp,sp,8
   234fc:	f800283a 	ret

00023500 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23500:	defffb04 	addi	sp,sp,-20
   23504:	dfc00415 	stw	ra,16(sp)
   23508:	df000315 	stw	fp,12(sp)
   2350c:	df000304 	addi	fp,sp,12
   23510:	e13ffe15 	stw	r4,-8(fp)
   23514:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23518:	e0bffe17 	ldw	r2,-8(fp)
   2351c:	10000816 	blt	r2,zero,23540 <fstat+0x40>
   23520:	01400304 	movi	r5,12
   23524:	e13ffe17 	ldw	r4,-8(fp)
   23528:	002335c0 	call	2335c <__mulsi3>
   2352c:	1007883a 	mov	r3,r2
   23530:	008000b4 	movhi	r2,2
   23534:	109a6104 	addi	r2,r2,27012
   23538:	1885883a 	add	r2,r3,r2
   2353c:	00000106 	br	23544 <fstat+0x44>
   23540:	0005883a 	mov	r2,zero
   23544:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23548:	e0bffd17 	ldw	r2,-12(fp)
   2354c:	10001026 	beq	r2,zero,23590 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23550:	e0bffd17 	ldw	r2,-12(fp)
   23554:	10800017 	ldw	r2,0(r2)
   23558:	10800817 	ldw	r2,32(r2)
   2355c:	10000726 	beq	r2,zero,2357c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23560:	e0bffd17 	ldw	r2,-12(fp)
   23564:	10800017 	ldw	r2,0(r2)
   23568:	10800817 	ldw	r2,32(r2)
   2356c:	e17fff17 	ldw	r5,-4(fp)
   23570:	e13ffd17 	ldw	r4,-12(fp)
   23574:	103ee83a 	callr	r2
   23578:	00000a06 	br	235a4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2357c:	e0bfff17 	ldw	r2,-4(fp)
   23580:	00c80004 	movi	r3,8192
   23584:	10c00115 	stw	r3,4(r2)
      return 0;
   23588:	0005883a 	mov	r2,zero
   2358c:	00000506 	br	235a4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23590:	00234c40 	call	234c4 <alt_get_errno>
   23594:	1007883a 	mov	r3,r2
   23598:	00801444 	movi	r2,81
   2359c:	18800015 	stw	r2,0(r3)
    return -1;
   235a0:	00bfffc4 	movi	r2,-1
  }
}
   235a4:	e037883a 	mov	sp,fp
   235a8:	dfc00117 	ldw	ra,4(sp)
   235ac:	df000017 	ldw	fp,0(sp)
   235b0:	dec00204 	addi	sp,sp,8
   235b4:	f800283a 	ret

000235b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235b8:	defffe04 	addi	sp,sp,-8
   235bc:	dfc00115 	stw	ra,4(sp)
   235c0:	df000015 	stw	fp,0(sp)
   235c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235c8:	d0a00917 	ldw	r2,-32732(gp)
   235cc:	10000326 	beq	r2,zero,235dc <alt_get_errno+0x24>
   235d0:	d0a00917 	ldw	r2,-32732(gp)
   235d4:	103ee83a 	callr	r2
   235d8:	00000106 	br	235e0 <alt_get_errno+0x28>
   235dc:	d0a6cc04 	addi	r2,gp,-25808
}
   235e0:	e037883a 	mov	sp,fp
   235e4:	dfc00117 	ldw	ra,4(sp)
   235e8:	df000017 	ldw	fp,0(sp)
   235ec:	dec00204 	addi	sp,sp,8
   235f0:	f800283a 	ret

000235f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   235f4:	deffed04 	addi	sp,sp,-76
   235f8:	dfc01215 	stw	ra,72(sp)
   235fc:	df001115 	stw	fp,68(sp)
   23600:	df001104 	addi	fp,sp,68
   23604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23608:	e0bfff17 	ldw	r2,-4(fp)
   2360c:	10000816 	blt	r2,zero,23630 <isatty+0x3c>
   23610:	01400304 	movi	r5,12
   23614:	e13fff17 	ldw	r4,-4(fp)
   23618:	002335c0 	call	2335c <__mulsi3>
   2361c:	1007883a 	mov	r3,r2
   23620:	008000b4 	movhi	r2,2
   23624:	109a6104 	addi	r2,r2,27012
   23628:	1885883a 	add	r2,r3,r2
   2362c:	00000106 	br	23634 <isatty+0x40>
   23630:	0005883a 	mov	r2,zero
   23634:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23638:	e0bfef17 	ldw	r2,-68(fp)
   2363c:	10000e26 	beq	r2,zero,23678 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23640:	e0bfef17 	ldw	r2,-68(fp)
   23644:	10800017 	ldw	r2,0(r2)
   23648:	10800817 	ldw	r2,32(r2)
   2364c:	1000021e 	bne	r2,zero,23658 <isatty+0x64>
    {
      return 1;
   23650:	00800044 	movi	r2,1
   23654:	00000d06 	br	2368c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23658:	e0bff004 	addi	r2,fp,-64
   2365c:	100b883a 	mov	r5,r2
   23660:	e13fff17 	ldw	r4,-4(fp)
   23664:	00235000 	call	23500 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23668:	e0bff117 	ldw	r2,-60(fp)
   2366c:	10880020 	cmpeqi	r2,r2,8192
   23670:	10803fcc 	andi	r2,r2,255
   23674:	00000506 	br	2368c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23678:	00235b80 	call	235b8 <alt_get_errno>
   2367c:	1007883a 	mov	r3,r2
   23680:	00801444 	movi	r2,81
   23684:	18800015 	stw	r2,0(r3)
    return 0;
   23688:	0005883a 	mov	r2,zero
  }
}
   2368c:	e037883a 	mov	sp,fp
   23690:	dfc00117 	ldw	ra,4(sp)
   23694:	df000017 	ldw	fp,0(sp)
   23698:	dec00204 	addi	sp,sp,8
   2369c:	f800283a 	ret

000236a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   236a0:	defffc04 	addi	sp,sp,-16
   236a4:	df000315 	stw	fp,12(sp)
   236a8:	df000304 	addi	fp,sp,12
   236ac:	e13ffd15 	stw	r4,-12(fp)
   236b0:	e17ffe15 	stw	r5,-8(fp)
   236b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   236b8:	e0fffe17 	ldw	r3,-8(fp)
   236bc:	e0bffd17 	ldw	r2,-12(fp)
   236c0:	18800c26 	beq	r3,r2,236f4 <alt_load_section+0x54>
  {
    while( to != end )
   236c4:	00000806 	br	236e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   236c8:	e0bffe17 	ldw	r2,-8(fp)
   236cc:	10c00104 	addi	r3,r2,4
   236d0:	e0fffe15 	stw	r3,-8(fp)
   236d4:	e0fffd17 	ldw	r3,-12(fp)
   236d8:	19000104 	addi	r4,r3,4
   236dc:	e13ffd15 	stw	r4,-12(fp)
   236e0:	18c00017 	ldw	r3,0(r3)
   236e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   236e8:	e0fffe17 	ldw	r3,-8(fp)
   236ec:	e0bfff17 	ldw	r2,-4(fp)
   236f0:	18bff51e 	bne	r3,r2,236c8 <__alt_data_end+0xfffe36c8>
    {
      *to++ = *from++;
    }
  }
}
   236f4:	0001883a 	nop
   236f8:	e037883a 	mov	sp,fp
   236fc:	df000017 	ldw	fp,0(sp)
   23700:	dec00104 	addi	sp,sp,4
   23704:	f800283a 	ret

00023708 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23708:	defffe04 	addi	sp,sp,-8
   2370c:	dfc00115 	stw	ra,4(sp)
   23710:	df000015 	stw	fp,0(sp)
   23714:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23718:	018000b4 	movhi	r6,2
   2371c:	319ee704 	addi	r6,r6,31644
   23720:	014000b4 	movhi	r5,2
   23724:	29582e04 	addi	r5,r5,24760
   23728:	010000b4 	movhi	r4,2
   2372c:	211ee704 	addi	r4,r4,31644
   23730:	00236a00 	call	236a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23734:	018000b4 	movhi	r6,2
   23738:	31808c04 	addi	r6,r6,560
   2373c:	014000b4 	movhi	r5,2
   23740:	29400804 	addi	r5,r5,32
   23744:	010000b4 	movhi	r4,2
   23748:	21000804 	addi	r4,r4,32
   2374c:	00236a00 	call	236a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23750:	018000b4 	movhi	r6,2
   23754:	31982e04 	addi	r6,r6,24760
   23758:	014000b4 	movhi	r5,2
   2375c:	29580f04 	addi	r5,r5,24636
   23760:	010000b4 	movhi	r4,2
   23764:	21180f04 	addi	r4,r4,24636
   23768:	00236a00 	call	236a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2376c:	0024f840 	call	24f84 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23770:	00251440 	call	25144 <alt_icache_flush_all>
}
   23774:	0001883a 	nop
   23778:	e037883a 	mov	sp,fp
   2377c:	dfc00117 	ldw	ra,4(sp)
   23780:	df000017 	ldw	fp,0(sp)
   23784:	dec00204 	addi	sp,sp,8
   23788:	f800283a 	ret

0002378c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2378c:	defffe04 	addi	sp,sp,-8
   23790:	dfc00115 	stw	ra,4(sp)
   23794:	df000015 	stw	fp,0(sp)
   23798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2379c:	d0a00917 	ldw	r2,-32732(gp)
   237a0:	10000326 	beq	r2,zero,237b0 <alt_get_errno+0x24>
   237a4:	d0a00917 	ldw	r2,-32732(gp)
   237a8:	103ee83a 	callr	r2
   237ac:	00000106 	br	237b4 <alt_get_errno+0x28>
   237b0:	d0a6cc04 	addi	r2,gp,-25808
}
   237b4:	e037883a 	mov	sp,fp
   237b8:	dfc00117 	ldw	ra,4(sp)
   237bc:	df000017 	ldw	fp,0(sp)
   237c0:	dec00204 	addi	sp,sp,8
   237c4:	f800283a 	ret

000237c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   237c8:	defff904 	addi	sp,sp,-28
   237cc:	dfc00615 	stw	ra,24(sp)
   237d0:	df000515 	stw	fp,20(sp)
   237d4:	df000504 	addi	fp,sp,20
   237d8:	e13ffd15 	stw	r4,-12(fp)
   237dc:	e17ffe15 	stw	r5,-8(fp)
   237e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   237e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237e8:	e0bffd17 	ldw	r2,-12(fp)
   237ec:	10000816 	blt	r2,zero,23810 <lseek+0x48>
   237f0:	01400304 	movi	r5,12
   237f4:	e13ffd17 	ldw	r4,-12(fp)
   237f8:	002335c0 	call	2335c <__mulsi3>
   237fc:	1007883a 	mov	r3,r2
   23800:	008000b4 	movhi	r2,2
   23804:	109a6104 	addi	r2,r2,27012
   23808:	1885883a 	add	r2,r3,r2
   2380c:	00000106 	br	23814 <lseek+0x4c>
   23810:	0005883a 	mov	r2,zero
   23814:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23818:	e0bffc17 	ldw	r2,-16(fp)
   2381c:	10001026 	beq	r2,zero,23860 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23820:	e0bffc17 	ldw	r2,-16(fp)
   23824:	10800017 	ldw	r2,0(r2)
   23828:	10800717 	ldw	r2,28(r2)
   2382c:	10000926 	beq	r2,zero,23854 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23830:	e0bffc17 	ldw	r2,-16(fp)
   23834:	10800017 	ldw	r2,0(r2)
   23838:	10800717 	ldw	r2,28(r2)
   2383c:	e1bfff17 	ldw	r6,-4(fp)
   23840:	e17ffe17 	ldw	r5,-8(fp)
   23844:	e13ffc17 	ldw	r4,-16(fp)
   23848:	103ee83a 	callr	r2
   2384c:	e0bffb15 	stw	r2,-20(fp)
   23850:	00000506 	br	23868 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23854:	00bfde84 	movi	r2,-134
   23858:	e0bffb15 	stw	r2,-20(fp)
   2385c:	00000206 	br	23868 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23860:	00bfebc4 	movi	r2,-81
   23864:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23868:	e0bffb17 	ldw	r2,-20(fp)
   2386c:	1000070e 	bge	r2,zero,2388c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23870:	002378c0 	call	2378c <alt_get_errno>
   23874:	1007883a 	mov	r3,r2
   23878:	e0bffb17 	ldw	r2,-20(fp)
   2387c:	0085c83a 	sub	r2,zero,r2
   23880:	18800015 	stw	r2,0(r3)
    rc = -1;
   23884:	00bfffc4 	movi	r2,-1
   23888:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2388c:	e0bffb17 	ldw	r2,-20(fp)
}
   23890:	e037883a 	mov	sp,fp
   23894:	dfc00117 	ldw	ra,4(sp)
   23898:	df000017 	ldw	fp,0(sp)
   2389c:	dec00204 	addi	sp,sp,8
   238a0:	f800283a 	ret

000238a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   238a4:	defffd04 	addi	sp,sp,-12
   238a8:	dfc00215 	stw	ra,8(sp)
   238ac:	df000115 	stw	fp,4(sp)
   238b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   238b4:	0009883a 	mov	r4,zero
   238b8:	0023d4c0 	call	23d4c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   238bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   238c0:	0023d840 	call	23d84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   238c4:	018000b4 	movhi	r6,2
   238c8:	31982404 	addi	r6,r6,24720
   238cc:	014000b4 	movhi	r5,2
   238d0:	29582404 	addi	r5,r5,24720
   238d4:	010000b4 	movhi	r4,2
   238d8:	21182404 	addi	r4,r4,24720
   238dc:	00254e80 	call	254e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   238e0:	00250840 	call	25084 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   238e4:	010000b4 	movhi	r4,2
   238e8:	21143904 	addi	r4,r4,20708
   238ec:	0025ca80 	call	25ca8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   238f0:	d0a6cd17 	ldw	r2,-25804(gp)
   238f4:	d0e6ce17 	ldw	r3,-25800(gp)
   238f8:	d126cf17 	ldw	r4,-25796(gp)
   238fc:	200d883a 	mov	r6,r4
   23900:	180b883a 	mov	r5,r3
   23904:	1009883a 	mov	r4,r2
   23908:	00203400 	call	20340 <main>
   2390c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23910:	01000044 	movi	r4,1
   23914:	00233c00 	call	233c0 <close>
  exit (result);
   23918:	e13fff17 	ldw	r4,-4(fp)
   2391c:	0025cbc0 	call	25cbc <exit>

00023920 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23920:	defffe04 	addi	sp,sp,-8
   23924:	df000115 	stw	fp,4(sp)
   23928:	df000104 	addi	fp,sp,4
   2392c:	e13fff15 	stw	r4,-4(fp)
}
   23930:	0001883a 	nop
   23934:	e037883a 	mov	sp,fp
   23938:	df000017 	ldw	fp,0(sp)
   2393c:	dec00104 	addi	sp,sp,4
   23940:	f800283a 	ret

00023944 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23944:	defffe04 	addi	sp,sp,-8
   23948:	df000115 	stw	fp,4(sp)
   2394c:	df000104 	addi	fp,sp,4
   23950:	e13fff15 	stw	r4,-4(fp)
}
   23954:	0001883a 	nop
   23958:	e037883a 	mov	sp,fp
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00104 	addi	sp,sp,4
   23964:	f800283a 	ret

00023968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23968:	defffe04 	addi	sp,sp,-8
   2396c:	dfc00115 	stw	ra,4(sp)
   23970:	df000015 	stw	fp,0(sp)
   23974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23978:	d0a00917 	ldw	r2,-32732(gp)
   2397c:	10000326 	beq	r2,zero,2398c <alt_get_errno+0x24>
   23980:	d0a00917 	ldw	r2,-32732(gp)
   23984:	103ee83a 	callr	r2
   23988:	00000106 	br	23990 <alt_get_errno+0x28>
   2398c:	d0a6cc04 	addi	r2,gp,-25808
}
   23990:	e037883a 	mov	sp,fp
   23994:	dfc00117 	ldw	ra,4(sp)
   23998:	df000017 	ldw	fp,0(sp)
   2399c:	dec00204 	addi	sp,sp,8
   239a0:	f800283a 	ret

000239a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   239a4:	defff904 	addi	sp,sp,-28
   239a8:	dfc00615 	stw	ra,24(sp)
   239ac:	df000515 	stw	fp,20(sp)
   239b0:	df000504 	addi	fp,sp,20
   239b4:	e13ffd15 	stw	r4,-12(fp)
   239b8:	e17ffe15 	stw	r5,-8(fp)
   239bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   239c0:	e0bffd17 	ldw	r2,-12(fp)
   239c4:	10000816 	blt	r2,zero,239e8 <read+0x44>
   239c8:	01400304 	movi	r5,12
   239cc:	e13ffd17 	ldw	r4,-12(fp)
   239d0:	002335c0 	call	2335c <__mulsi3>
   239d4:	1007883a 	mov	r3,r2
   239d8:	008000b4 	movhi	r2,2
   239dc:	109a6104 	addi	r2,r2,27012
   239e0:	1885883a 	add	r2,r3,r2
   239e4:	00000106 	br	239ec <read+0x48>
   239e8:	0005883a 	mov	r2,zero
   239ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   239f0:	e0bffb17 	ldw	r2,-20(fp)
   239f4:	10002226 	beq	r2,zero,23a80 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   239f8:	e0bffb17 	ldw	r2,-20(fp)
   239fc:	10800217 	ldw	r2,8(r2)
   23a00:	108000cc 	andi	r2,r2,3
   23a04:	10800060 	cmpeqi	r2,r2,1
   23a08:	1000181e 	bne	r2,zero,23a6c <read+0xc8>
        (fd->dev->read))
   23a0c:	e0bffb17 	ldw	r2,-20(fp)
   23a10:	10800017 	ldw	r2,0(r2)
   23a14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a18:	10001426 	beq	r2,zero,23a6c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23a1c:	e0bffb17 	ldw	r2,-20(fp)
   23a20:	10800017 	ldw	r2,0(r2)
   23a24:	10800517 	ldw	r2,20(r2)
   23a28:	e0ffff17 	ldw	r3,-4(fp)
   23a2c:	180d883a 	mov	r6,r3
   23a30:	e17ffe17 	ldw	r5,-8(fp)
   23a34:	e13ffb17 	ldw	r4,-20(fp)
   23a38:	103ee83a 	callr	r2
   23a3c:	e0bffc15 	stw	r2,-16(fp)
   23a40:	e0bffc17 	ldw	r2,-16(fp)
   23a44:	1000070e 	bge	r2,zero,23a64 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23a48:	00239680 	call	23968 <alt_get_errno>
   23a4c:	1007883a 	mov	r3,r2
   23a50:	e0bffc17 	ldw	r2,-16(fp)
   23a54:	0085c83a 	sub	r2,zero,r2
   23a58:	18800015 	stw	r2,0(r3)
          return -1;
   23a5c:	00bfffc4 	movi	r2,-1
   23a60:	00000c06 	br	23a94 <read+0xf0>
        }
        return rval;
   23a64:	e0bffc17 	ldw	r2,-16(fp)
   23a68:	00000a06 	br	23a94 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23a6c:	00239680 	call	23968 <alt_get_errno>
   23a70:	1007883a 	mov	r3,r2
   23a74:	00800344 	movi	r2,13
   23a78:	18800015 	stw	r2,0(r3)
   23a7c:	00000406 	br	23a90 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23a80:	00239680 	call	23968 <alt_get_errno>
   23a84:	1007883a 	mov	r3,r2
   23a88:	00801444 	movi	r2,81
   23a8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a90:	00bfffc4 	movi	r2,-1
}
   23a94:	e037883a 	mov	sp,fp
   23a98:	dfc00117 	ldw	ra,4(sp)
   23a9c:	df000017 	ldw	fp,0(sp)
   23aa0:	dec00204 	addi	sp,sp,8
   23aa4:	f800283a 	ret

00023aa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23aa8:	defffc04 	addi	sp,sp,-16
   23aac:	dfc00315 	stw	ra,12(sp)
   23ab0:	df000215 	stw	fp,8(sp)
   23ab4:	dc000115 	stw	r16,4(sp)
   23ab8:	df000204 	addi	fp,sp,8
   23abc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23ac0:	e0bffe17 	ldw	r2,-8(fp)
   23ac4:	108000d0 	cmplti	r2,r2,3
   23ac8:	1000111e 	bne	r2,zero,23b10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23acc:	040000b4 	movhi	r16,2
   23ad0:	841a6104 	addi	r16,r16,27012
   23ad4:	e0bffe17 	ldw	r2,-8(fp)
   23ad8:	01400304 	movi	r5,12
   23adc:	1009883a 	mov	r4,r2
   23ae0:	002335c0 	call	2335c <__mulsi3>
   23ae4:	8085883a 	add	r2,r16,r2
   23ae8:	10800204 	addi	r2,r2,8
   23aec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23af0:	040000b4 	movhi	r16,2
   23af4:	841a6104 	addi	r16,r16,27012
   23af8:	e0bffe17 	ldw	r2,-8(fp)
   23afc:	01400304 	movi	r5,12
   23b00:	1009883a 	mov	r4,r2
   23b04:	002335c0 	call	2335c <__mulsi3>
   23b08:	8085883a 	add	r2,r16,r2
   23b0c:	10000015 	stw	zero,0(r2)
  }
}
   23b10:	0001883a 	nop
   23b14:	e6ffff04 	addi	sp,fp,-4
   23b18:	dfc00217 	ldw	ra,8(sp)
   23b1c:	df000117 	ldw	fp,4(sp)
   23b20:	dc000017 	ldw	r16,0(sp)
   23b24:	dec00304 	addi	sp,sp,12
   23b28:	f800283a 	ret

00023b2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23b2c:	defff904 	addi	sp,sp,-28
   23b30:	df000615 	stw	fp,24(sp)
   23b34:	df000604 	addi	fp,sp,24
   23b38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b3c:	0005303a 	rdctl	r2,status
   23b40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b44:	e0fffe17 	ldw	r3,-8(fp)
   23b48:	00bfff84 	movi	r2,-2
   23b4c:	1884703a 	and	r2,r3,r2
   23b50:	1001703a 	wrctl	status,r2
  
  return context;
   23b54:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23b58:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23b5c:	d0a00a17 	ldw	r2,-32728(gp)
   23b60:	10c000c4 	addi	r3,r2,3
   23b64:	00bfff04 	movi	r2,-4
   23b68:	1884703a 	and	r2,r3,r2
   23b6c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23b70:	d0e00a17 	ldw	r3,-32728(gp)
   23b74:	e0bfff17 	ldw	r2,-4(fp)
   23b78:	1887883a 	add	r3,r3,r2
   23b7c:	00800134 	movhi	r2,4
   23b80:	10800004 	addi	r2,r2,0
   23b84:	10c0062e 	bgeu	r2,r3,23ba0 <sbrk+0x74>
   23b88:	e0bffb17 	ldw	r2,-20(fp)
   23b8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b90:	e0bffa17 	ldw	r2,-24(fp)
   23b94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23b98:	00bfffc4 	movi	r2,-1
   23b9c:	00000b06 	br	23bcc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23ba0:	d0a00a17 	ldw	r2,-32728(gp)
   23ba4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23ba8:	d0e00a17 	ldw	r3,-32728(gp)
   23bac:	e0bfff17 	ldw	r2,-4(fp)
   23bb0:	1885883a 	add	r2,r3,r2
   23bb4:	d0a00a15 	stw	r2,-32728(gp)
   23bb8:	e0bffb17 	ldw	r2,-20(fp)
   23bbc:	e0bffc15 	stw	r2,-16(fp)
   23bc0:	e0bffc17 	ldw	r2,-16(fp)
   23bc4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23bc8:	e0bffd17 	ldw	r2,-12(fp)
} 
   23bcc:	e037883a 	mov	sp,fp
   23bd0:	df000017 	ldw	fp,0(sp)
   23bd4:	dec00104 	addi	sp,sp,4
   23bd8:	f800283a 	ret

00023bdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23bdc:	defffe04 	addi	sp,sp,-8
   23be0:	dfc00115 	stw	ra,4(sp)
   23be4:	df000015 	stw	fp,0(sp)
   23be8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23bec:	d0a00917 	ldw	r2,-32732(gp)
   23bf0:	10000326 	beq	r2,zero,23c00 <alt_get_errno+0x24>
   23bf4:	d0a00917 	ldw	r2,-32732(gp)
   23bf8:	103ee83a 	callr	r2
   23bfc:	00000106 	br	23c04 <alt_get_errno+0x28>
   23c00:	d0a6cc04 	addi	r2,gp,-25808
}
   23c04:	e037883a 	mov	sp,fp
   23c08:	dfc00117 	ldw	ra,4(sp)
   23c0c:	df000017 	ldw	fp,0(sp)
   23c10:	dec00204 	addi	sp,sp,8
   23c14:	f800283a 	ret

00023c18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23c18:	defff904 	addi	sp,sp,-28
   23c1c:	dfc00615 	stw	ra,24(sp)
   23c20:	df000515 	stw	fp,20(sp)
   23c24:	df000504 	addi	fp,sp,20
   23c28:	e13ffd15 	stw	r4,-12(fp)
   23c2c:	e17ffe15 	stw	r5,-8(fp)
   23c30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c34:	e0bffd17 	ldw	r2,-12(fp)
   23c38:	10000816 	blt	r2,zero,23c5c <write+0x44>
   23c3c:	01400304 	movi	r5,12
   23c40:	e13ffd17 	ldw	r4,-12(fp)
   23c44:	002335c0 	call	2335c <__mulsi3>
   23c48:	1007883a 	mov	r3,r2
   23c4c:	008000b4 	movhi	r2,2
   23c50:	109a6104 	addi	r2,r2,27012
   23c54:	1885883a 	add	r2,r3,r2
   23c58:	00000106 	br	23c60 <write+0x48>
   23c5c:	0005883a 	mov	r2,zero
   23c60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23c64:	e0bffb17 	ldw	r2,-20(fp)
   23c68:	10002126 	beq	r2,zero,23cf0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23c6c:	e0bffb17 	ldw	r2,-20(fp)
   23c70:	10800217 	ldw	r2,8(r2)
   23c74:	108000cc 	andi	r2,r2,3
   23c78:	10001826 	beq	r2,zero,23cdc <write+0xc4>
   23c7c:	e0bffb17 	ldw	r2,-20(fp)
   23c80:	10800017 	ldw	r2,0(r2)
   23c84:	10800617 	ldw	r2,24(r2)
   23c88:	10001426 	beq	r2,zero,23cdc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23c8c:	e0bffb17 	ldw	r2,-20(fp)
   23c90:	10800017 	ldw	r2,0(r2)
   23c94:	10800617 	ldw	r2,24(r2)
   23c98:	e0ffff17 	ldw	r3,-4(fp)
   23c9c:	180d883a 	mov	r6,r3
   23ca0:	e17ffe17 	ldw	r5,-8(fp)
   23ca4:	e13ffb17 	ldw	r4,-20(fp)
   23ca8:	103ee83a 	callr	r2
   23cac:	e0bffc15 	stw	r2,-16(fp)
   23cb0:	e0bffc17 	ldw	r2,-16(fp)
   23cb4:	1000070e 	bge	r2,zero,23cd4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23cb8:	0023bdc0 	call	23bdc <alt_get_errno>
   23cbc:	1007883a 	mov	r3,r2
   23cc0:	e0bffc17 	ldw	r2,-16(fp)
   23cc4:	0085c83a 	sub	r2,zero,r2
   23cc8:	18800015 	stw	r2,0(r3)
        return -1;
   23ccc:	00bfffc4 	movi	r2,-1
   23cd0:	00000c06 	br	23d04 <write+0xec>
      }
      return rval;
   23cd4:	e0bffc17 	ldw	r2,-16(fp)
   23cd8:	00000a06 	br	23d04 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23cdc:	0023bdc0 	call	23bdc <alt_get_errno>
   23ce0:	1007883a 	mov	r3,r2
   23ce4:	00800344 	movi	r2,13
   23ce8:	18800015 	stw	r2,0(r3)
   23cec:	00000406 	br	23d00 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23cf0:	0023bdc0 	call	23bdc <alt_get_errno>
   23cf4:	1007883a 	mov	r3,r2
   23cf8:	00801444 	movi	r2,81
   23cfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d00:	00bfffc4 	movi	r2,-1
}
   23d04:	e037883a 	mov	sp,fp
   23d08:	dfc00117 	ldw	ra,4(sp)
   23d0c:	df000017 	ldw	fp,0(sp)
   23d10:	dec00204 	addi	sp,sp,8
   23d14:	f800283a 	ret

00023d18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23d18:	defffd04 	addi	sp,sp,-12
   23d1c:	dfc00215 	stw	ra,8(sp)
   23d20:	df000115 	stw	fp,4(sp)
   23d24:	df000104 	addi	fp,sp,4
   23d28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23d2c:	d1600604 	addi	r5,gp,-32744
   23d30:	e13fff17 	ldw	r4,-4(fp)
   23d34:	0024fe00 	call	24fe0 <alt_dev_llist_insert>
}
   23d38:	e037883a 	mov	sp,fp
   23d3c:	dfc00117 	ldw	ra,4(sp)
   23d40:	df000017 	ldw	fp,0(sp)
   23d44:	dec00204 	addi	sp,sp,8
   23d48:	f800283a 	ret

00023d4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23d4c:	defffd04 	addi	sp,sp,-12
   23d50:	dfc00215 	stw	ra,8(sp)
   23d54:	df000115 	stw	fp,4(sp)
   23d58:	df000104 	addi	fp,sp,4
   23d5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1B, cpu_1b);
   23d60:	002598c0 	call	2598c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23d64:	00800044 	movi	r2,1
   23d68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23d6c:	0001883a 	nop
   23d70:	e037883a 	mov	sp,fp
   23d74:	dfc00117 	ldw	ra,4(sp)
   23d78:	df000017 	ldw	fp,0(sp)
   23d7c:	dec00204 	addi	sp,sp,8
   23d80:	f800283a 	ret

00023d84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23d84:	defffe04 	addi	sp,sp,-8
   23d88:	dfc00115 	stw	ra,4(sp)
   23d8c:	df000015 	stw	fp,0(sp)
   23d90:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1B, timer_1b);
   23d94:	01c0fa04 	movi	r7,1000
   23d98:	01800044 	movi	r6,1
   23d9c:	000b883a 	mov	r5,zero
   23da0:	01020034 	movhi	r4,2048
   23da4:	21040804 	addi	r4,r4,4128
   23da8:	0024ddc0 	call	24ddc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1B, fifo_1b);
   23dac:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_1, fifo_q_1);
   23db0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_2, fifo_q_2);
   23db4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_3, fifo_q_3);
   23db8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1B, jtag_uart_1b);
   23dbc:	01800404 	movi	r6,16
   23dc0:	000b883a 	mov	r5,zero
   23dc4:	010000b4 	movhi	r4,2
   23dc8:	211acb04 	addi	r4,r4,27436
   23dcc:	00244600 	call	24460 <altera_avalon_jtag_uart_init>
   23dd0:	010000b4 	movhi	r4,2
   23dd4:	211ac104 	addi	r4,r4,27396
   23dd8:	0023d180 	call	23d18 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1B, sysid_1b);
   23ddc:	0001883a 	nop
}
   23de0:	0001883a 	nop
   23de4:	e037883a 	mov	sp,fp
   23de8:	dfc00117 	ldw	ra,4(sp)
   23dec:	df000017 	ldw	fp,0(sp)
   23df0:	dec00204 	addi	sp,sp,8
   23df4:	f800283a 	ret

00023df8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   23df8:	defffa04 	addi	sp,sp,-24
   23dfc:	dfc00515 	stw	ra,20(sp)
   23e00:	df000415 	stw	fp,16(sp)
   23e04:	df000404 	addi	fp,sp,16
   23e08:	e13ffc15 	stw	r4,-16(fp)
   23e0c:	e17ffd15 	stw	r5,-12(fp)
   23e10:	e1bffe15 	stw	r6,-8(fp)
   23e14:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   23e18:	01400fc4 	movi	r5,63
   23e1c:	e13ffc17 	ldw	r4,-16(fp)
   23e20:	0023fc40 	call	23fc4 <altera_avalon_fifo_clear_event>
   23e24:	10000226 	beq	r2,zero,23e30 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   23e28:	00bfffc4 	movi	r2,-1
   23e2c:	00001306 	br	23e7c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   23e30:	e17ffd17 	ldw	r5,-12(fp)
   23e34:	e13ffc17 	ldw	r4,-16(fp)
   23e38:	00240240 	call	24024 <altera_avalon_fifo_write_ienable>
   23e3c:	10000226 	beq	r2,zero,23e48 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   23e40:	00bfff84 	movi	r2,-2
   23e44:	00000d06 	br	23e7c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   23e48:	e17fff17 	ldw	r5,-4(fp)
   23e4c:	e13ffc17 	ldw	r4,-16(fp)
   23e50:	00240800 	call	24080 <altera_avalon_fifo_write_almostfull>
   23e54:	10000226 	beq	r2,zero,23e60 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23e58:	00bfff44 	movi	r2,-3
   23e5c:	00000706 	br	23e7c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   23e60:	e17ffe17 	ldw	r5,-8(fp)
   23e64:	e13ffc17 	ldw	r4,-16(fp)
   23e68:	00240dc0 	call	240dc <altera_avalon_fifo_write_almostempty>
   23e6c:	10000226 	beq	r2,zero,23e78 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23e70:	00bfff44 	movi	r2,-3
   23e74:	00000106 	br	23e7c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   23e78:	0005883a 	mov	r2,zero
}
   23e7c:	e037883a 	mov	sp,fp
   23e80:	dfc00117 	ldw	ra,4(sp)
   23e84:	df000017 	ldw	fp,0(sp)
   23e88:	dec00204 	addi	sp,sp,8
   23e8c:	f800283a 	ret

00023e90 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   23e90:	defffd04 	addi	sp,sp,-12
   23e94:	df000215 	stw	fp,8(sp)
   23e98:	df000204 	addi	fp,sp,8
   23e9c:	e13ffe15 	stw	r4,-8(fp)
   23ea0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   23ea4:	e0bffe17 	ldw	r2,-8(fp)
   23ea8:	10800104 	addi	r2,r2,4
   23eac:	10800037 	ldwio	r2,0(r2)
   23eb0:	1007883a 	mov	r3,r2
   23eb4:	e0bfff17 	ldw	r2,-4(fp)
   23eb8:	1884703a 	and	r2,r3,r2
}
   23ebc:	e037883a 	mov	sp,fp
   23ec0:	df000017 	ldw	fp,0(sp)
   23ec4:	dec00104 	addi	sp,sp,4
   23ec8:	f800283a 	ret

00023ecc <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   23ecc:	defffd04 	addi	sp,sp,-12
   23ed0:	df000215 	stw	fp,8(sp)
   23ed4:	df000204 	addi	fp,sp,8
   23ed8:	e13ffe15 	stw	r4,-8(fp)
   23edc:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   23ee0:	e0bffe17 	ldw	r2,-8(fp)
   23ee4:	10800304 	addi	r2,r2,12
   23ee8:	10800037 	ldwio	r2,0(r2)
   23eec:	1007883a 	mov	r3,r2
   23ef0:	e0bfff17 	ldw	r2,-4(fp)
   23ef4:	1884703a 	and	r2,r3,r2
}
   23ef8:	e037883a 	mov	sp,fp
   23efc:	df000017 	ldw	fp,0(sp)
   23f00:	dec00104 	addi	sp,sp,4
   23f04:	f800283a 	ret

00023f08 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   23f08:	defffe04 	addi	sp,sp,-8
   23f0c:	df000115 	stw	fp,4(sp)
   23f10:	df000104 	addi	fp,sp,4
   23f14:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   23f18:	e0bfff17 	ldw	r2,-4(fp)
   23f1c:	10800404 	addi	r2,r2,16
   23f20:	10800037 	ldwio	r2,0(r2)
}
   23f24:	e037883a 	mov	sp,fp
   23f28:	df000017 	ldw	fp,0(sp)
   23f2c:	dec00104 	addi	sp,sp,4
   23f30:	f800283a 	ret

00023f34 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   23f34:	defffe04 	addi	sp,sp,-8
   23f38:	df000115 	stw	fp,4(sp)
   23f3c:	df000104 	addi	fp,sp,4
   23f40:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   23f44:	e0bfff17 	ldw	r2,-4(fp)
   23f48:	10800504 	addi	r2,r2,20
   23f4c:	10800037 	ldwio	r2,0(r2)
}
   23f50:	e037883a 	mov	sp,fp
   23f54:	df000017 	ldw	fp,0(sp)
   23f58:	dec00104 	addi	sp,sp,4
   23f5c:	f800283a 	ret

00023f60 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   23f60:	defffd04 	addi	sp,sp,-12
   23f64:	df000215 	stw	fp,8(sp)
   23f68:	df000204 	addi	fp,sp,8
   23f6c:	e13ffe15 	stw	r4,-8(fp)
   23f70:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   23f74:	e0bffe17 	ldw	r2,-8(fp)
   23f78:	10800204 	addi	r2,r2,8
   23f7c:	10800037 	ldwio	r2,0(r2)
   23f80:	1007883a 	mov	r3,r2
   23f84:	e0bfff17 	ldw	r2,-4(fp)
   23f88:	1884703a 	and	r2,r3,r2
}
   23f8c:	e037883a 	mov	sp,fp
   23f90:	df000017 	ldw	fp,0(sp)
   23f94:	dec00104 	addi	sp,sp,4
   23f98:	f800283a 	ret

00023f9c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   23f9c:	defffe04 	addi	sp,sp,-8
   23fa0:	df000115 	stw	fp,4(sp)
   23fa4:	df000104 	addi	fp,sp,4
   23fa8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   23fac:	e0bfff17 	ldw	r2,-4(fp)
   23fb0:	10800037 	ldwio	r2,0(r2)
}
   23fb4:	e037883a 	mov	sp,fp
   23fb8:	df000017 	ldw	fp,0(sp)
   23fbc:	dec00104 	addi	sp,sp,4
   23fc0:	f800283a 	ret

00023fc4 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   23fc4:	defffd04 	addi	sp,sp,-12
   23fc8:	df000215 	stw	fp,8(sp)
   23fcc:	df000204 	addi	fp,sp,8
   23fd0:	e13ffe15 	stw	r4,-8(fp)
   23fd4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   23fd8:	e0bffe17 	ldw	r2,-8(fp)
   23fdc:	10800204 	addi	r2,r2,8
   23fe0:	1007883a 	mov	r3,r2
   23fe4:	e0bfff17 	ldw	r2,-4(fp)
   23fe8:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   23fec:	e0bffe17 	ldw	r2,-8(fp)
   23ff0:	10800204 	addi	r2,r2,8
   23ff4:	10800037 	ldwio	r2,0(r2)
   23ff8:	1007883a 	mov	r3,r2
   23ffc:	e0bfff17 	ldw	r2,-4(fp)
   24000:	1884703a 	and	r2,r3,r2
   24004:	1000021e 	bne	r2,zero,24010 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   24008:	0005883a 	mov	r2,zero
   2400c:	00000106 	br	24014 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   24010:	00bfffc4 	movi	r2,-1
}
   24014:	e037883a 	mov	sp,fp
   24018:	df000017 	ldw	fp,0(sp)
   2401c:	dec00104 	addi	sp,sp,4
   24020:	f800283a 	ret

00024024 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   24024:	defffd04 	addi	sp,sp,-12
   24028:	df000215 	stw	fp,8(sp)
   2402c:	df000204 	addi	fp,sp,8
   24030:	e13ffe15 	stw	r4,-8(fp)
   24034:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   24038:	e0bffe17 	ldw	r2,-8(fp)
   2403c:	10800304 	addi	r2,r2,12
   24040:	1007883a 	mov	r3,r2
   24044:	e0bfff17 	ldw	r2,-4(fp)
   24048:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   2404c:	e0bffe17 	ldw	r2,-8(fp)
   24050:	10800304 	addi	r2,r2,12
   24054:	10800037 	ldwio	r2,0(r2)
   24058:	1007883a 	mov	r3,r2
   2405c:	e0bfff17 	ldw	r2,-4(fp)
   24060:	1880021e 	bne	r3,r2,2406c <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   24064:	0005883a 	mov	r2,zero
   24068:	00000106 	br	24070 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2406c:	00bfff84 	movi	r2,-2
}
   24070:	e037883a 	mov	sp,fp
   24074:	df000017 	ldw	fp,0(sp)
   24078:	dec00104 	addi	sp,sp,4
   2407c:	f800283a 	ret

00024080 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   24080:	defffd04 	addi	sp,sp,-12
   24084:	df000215 	stw	fp,8(sp)
   24088:	df000204 	addi	fp,sp,8
   2408c:	e13ffe15 	stw	r4,-8(fp)
   24090:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   24094:	e0bffe17 	ldw	r2,-8(fp)
   24098:	10800404 	addi	r2,r2,16
   2409c:	1007883a 	mov	r3,r2
   240a0:	e0bfff17 	ldw	r2,-4(fp)
   240a4:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   240a8:	e0bffe17 	ldw	r2,-8(fp)
   240ac:	10800404 	addi	r2,r2,16
   240b0:	10800037 	ldwio	r2,0(r2)
   240b4:	1007883a 	mov	r3,r2
   240b8:	e0bfff17 	ldw	r2,-4(fp)
   240bc:	1880021e 	bne	r3,r2,240c8 <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   240c0:	0005883a 	mov	r2,zero
   240c4:	00000106 	br	240cc <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   240c8:	00bfff44 	movi	r2,-3
}
   240cc:	e037883a 	mov	sp,fp
   240d0:	df000017 	ldw	fp,0(sp)
   240d4:	dec00104 	addi	sp,sp,4
   240d8:	f800283a 	ret

000240dc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   240dc:	defffd04 	addi	sp,sp,-12
   240e0:	df000215 	stw	fp,8(sp)
   240e4:	df000204 	addi	fp,sp,8
   240e8:	e13ffe15 	stw	r4,-8(fp)
   240ec:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   240f0:	e0bffe17 	ldw	r2,-8(fp)
   240f4:	10800504 	addi	r2,r2,20
   240f8:	1007883a 	mov	r3,r2
   240fc:	e0bfff17 	ldw	r2,-4(fp)
   24100:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   24104:	e0bffe17 	ldw	r2,-8(fp)
   24108:	10800504 	addi	r2,r2,20
   2410c:	10800037 	ldwio	r2,0(r2)
   24110:	1007883a 	mov	r3,r2
   24114:	e0bfff17 	ldw	r2,-4(fp)
   24118:	1880021e 	bne	r3,r2,24124 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   2411c:	0005883a 	mov	r2,zero
   24120:	00000106 	br	24128 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   24124:	00bfff44 	movi	r2,-3
}
   24128:	e037883a 	mov	sp,fp
   2412c:	df000017 	ldw	fp,0(sp)
   24130:	dec00104 	addi	sp,sp,4
   24134:	f800283a 	ret

00024138 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   24138:	defffb04 	addi	sp,sp,-20
   2413c:	dfc00415 	stw	ra,16(sp)
   24140:	df000315 	stw	fp,12(sp)
   24144:	df000304 	addi	fp,sp,12
   24148:	e13ffd15 	stw	r4,-12(fp)
   2414c:	e17ffe15 	stw	r5,-8(fp)
   24150:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   24154:	01400044 	movi	r5,1
   24158:	e13ffe17 	ldw	r4,-8(fp)
   2415c:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   24160:	1000051e 	bne	r2,zero,24178 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   24164:	e0bffd17 	ldw	r2,-12(fp)
   24168:	e0ffff17 	ldw	r3,-4(fp)
   2416c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   24170:	0005883a 	mov	r2,zero
   24174:	00000106 	br	2417c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   24178:	00bfff04 	movi	r2,-4
    }
}
   2417c:	e037883a 	mov	sp,fp
   24180:	dfc00117 	ldw	ra,4(sp)
   24184:	df000017 	ldw	fp,0(sp)
   24188:	dec00204 	addi	sp,sp,8
   2418c:	f800283a 	ret

00024190 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   24190:	defffa04 	addi	sp,sp,-24
   24194:	dfc00515 	stw	ra,20(sp)
   24198:	df000415 	stw	fp,16(sp)
   2419c:	df000404 	addi	fp,sp,16
   241a0:	e13ffd15 	stw	r4,-12(fp)
   241a4:	e17ffe15 	stw	r5,-8(fp)
   241a8:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   241ac:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   241b0:	e0bfff17 	ldw	r2,-4(fp)
   241b4:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   241b8:	01400084 	movi	r5,2
   241bc:	e13ffe17 	ldw	r4,-8(fp)
   241c0:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   241c4:	1000071e 	bne	r2,zero,241e4 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   241c8:	e13ffe17 	ldw	r4,-8(fp)
   241cc:	0023f9c0 	call	23f9c <altera_avalon_fifo_read_level>
   241d0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   241d4:	e0bffd17 	ldw	r2,-12(fp)
   241d8:	10c00037 	ldwio	r3,0(r2)
   241dc:	e0bfff17 	ldw	r2,-4(fp)
   241e0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   241e4:	e0bffc17 	ldw	r2,-16(fp)
}
   241e8:	e037883a 	mov	sp,fp
   241ec:	dfc00117 	ldw	ra,4(sp)
   241f0:	df000017 	ldw	fp,0(sp)
   241f4:	dec00204 	addi	sp,sp,8
   241f8:	f800283a 	ret

000241fc <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   241fc:	defffc04 	addi	sp,sp,-16
   24200:	dfc00315 	stw	ra,12(sp)
   24204:	df000215 	stw	fp,8(sp)
   24208:	df000204 	addi	fp,sp,8
   2420c:	e13ffe15 	stw	r4,-8(fp)
   24210:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   24214:	01400084 	movi	r5,2
   24218:	e13fff17 	ldw	r4,-4(fp)
   2421c:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   24220:	1000031e 	bne	r2,zero,24230 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   24224:	e0bffe17 	ldw	r2,-8(fp)
   24228:	10800037 	ldwio	r2,0(r2)
   2422c:	00000106 	br	24234 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   24230:	0005883a 	mov	r2,zero
}
   24234:	e037883a 	mov	sp,fp
   24238:	dfc00117 	ldw	ra,4(sp)
   2423c:	df000017 	ldw	fp,0(sp)
   24240:	dec00204 	addi	sp,sp,8
   24244:	f800283a 	ret

00024248 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   24248:	defffb04 	addi	sp,sp,-20
   2424c:	dfc00415 	stw	ra,16(sp)
   24250:	df000315 	stw	fp,12(sp)
   24254:	df000304 	addi	fp,sp,12
   24258:	e13ffd15 	stw	r4,-12(fp)
   2425c:	e17ffe15 	stw	r5,-8(fp)
   24260:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   24264:	01400044 	movi	r5,1
   24268:	e13ffe17 	ldw	r4,-8(fp)
   2426c:	0023e900 	call	23e90 <altera_avalon_fifo_read_status>
   24270:	1000071e 	bne	r2,zero,24290 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   24274:	e0bffd17 	ldw	r2,-12(fp)
   24278:	10800104 	addi	r2,r2,4
   2427c:	1007883a 	mov	r3,r2
   24280:	e0bfff17 	ldw	r2,-4(fp)
   24284:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   24288:	0005883a 	mov	r2,zero
   2428c:	00000106 	br	24294 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   24290:	00bfff04 	movi	r2,-4
    }
}
   24294:	e037883a 	mov	sp,fp
   24298:	dfc00117 	ldw	ra,4(sp)
   2429c:	df000017 	ldw	fp,0(sp)
   242a0:	dec00204 	addi	sp,sp,8
   242a4:	f800283a 	ret

000242a8 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   242a8:	defffe04 	addi	sp,sp,-8
   242ac:	df000115 	stw	fp,4(sp)
   242b0:	df000104 	addi	fp,sp,4
   242b4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   242b8:	e0bfff17 	ldw	r2,-4(fp)
   242bc:	10800104 	addi	r2,r2,4
   242c0:	10800037 	ldwio	r2,0(r2)
}
   242c4:	e037883a 	mov	sp,fp
   242c8:	df000017 	ldw	fp,0(sp)
   242cc:	dec00104 	addi	sp,sp,4
   242d0:	f800283a 	ret

000242d4 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   242d4:	defffe04 	addi	sp,sp,-8
   242d8:	df000115 	stw	fp,4(sp)
   242dc:	df000104 	addi	fp,sp,4
   242e0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   242e4:	e0bfff17 	ldw	r2,-4(fp)
   242e8:	10800037 	ldwio	r2,0(r2)
}
   242ec:	e037883a 	mov	sp,fp
   242f0:	df000017 	ldw	fp,0(sp)
   242f4:	dec00104 	addi	sp,sp,4
   242f8:	f800283a 	ret

000242fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   242fc:	defffa04 	addi	sp,sp,-24
   24300:	dfc00515 	stw	ra,20(sp)
   24304:	df000415 	stw	fp,16(sp)
   24308:	df000404 	addi	fp,sp,16
   2430c:	e13ffd15 	stw	r4,-12(fp)
   24310:	e17ffe15 	stw	r5,-8(fp)
   24314:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24318:	e0bffd17 	ldw	r2,-12(fp)
   2431c:	10800017 	ldw	r2,0(r2)
   24320:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24324:	e0bffc17 	ldw	r2,-16(fp)
   24328:	10c00a04 	addi	r3,r2,40
   2432c:	e0bffd17 	ldw	r2,-12(fp)
   24330:	10800217 	ldw	r2,8(r2)
   24334:	100f883a 	mov	r7,r2
   24338:	e1bfff17 	ldw	r6,-4(fp)
   2433c:	e17ffe17 	ldw	r5,-8(fp)
   24340:	1809883a 	mov	r4,r3
   24344:	00249240 	call	24924 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24348:	e037883a 	mov	sp,fp
   2434c:	dfc00117 	ldw	ra,4(sp)
   24350:	df000017 	ldw	fp,0(sp)
   24354:	dec00204 	addi	sp,sp,8
   24358:	f800283a 	ret

0002435c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2435c:	defffa04 	addi	sp,sp,-24
   24360:	dfc00515 	stw	ra,20(sp)
   24364:	df000415 	stw	fp,16(sp)
   24368:	df000404 	addi	fp,sp,16
   2436c:	e13ffd15 	stw	r4,-12(fp)
   24370:	e17ffe15 	stw	r5,-8(fp)
   24374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24378:	e0bffd17 	ldw	r2,-12(fp)
   2437c:	10800017 	ldw	r2,0(r2)
   24380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24384:	e0bffc17 	ldw	r2,-16(fp)
   24388:	10c00a04 	addi	r3,r2,40
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10800217 	ldw	r2,8(r2)
   24394:	100f883a 	mov	r7,r2
   24398:	e1bfff17 	ldw	r6,-4(fp)
   2439c:	e17ffe17 	ldw	r5,-8(fp)
   243a0:	1809883a 	mov	r4,r3
   243a4:	0024b400 	call	24b40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   243a8:	e037883a 	mov	sp,fp
   243ac:	dfc00117 	ldw	ra,4(sp)
   243b0:	df000017 	ldw	fp,0(sp)
   243b4:	dec00204 	addi	sp,sp,8
   243b8:	f800283a 	ret

000243bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   243bc:	defffc04 	addi	sp,sp,-16
   243c0:	dfc00315 	stw	ra,12(sp)
   243c4:	df000215 	stw	fp,8(sp)
   243c8:	df000204 	addi	fp,sp,8
   243cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   243d0:	e0bfff17 	ldw	r2,-4(fp)
   243d4:	10800017 	ldw	r2,0(r2)
   243d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   243dc:	e0bffe17 	ldw	r2,-8(fp)
   243e0:	10c00a04 	addi	r3,r2,40
   243e4:	e0bfff17 	ldw	r2,-4(fp)
   243e8:	10800217 	ldw	r2,8(r2)
   243ec:	100b883a 	mov	r5,r2
   243f0:	1809883a 	mov	r4,r3
   243f4:	00247cc0 	call	247cc <altera_avalon_jtag_uart_close>
}
   243f8:	e037883a 	mov	sp,fp
   243fc:	dfc00117 	ldw	ra,4(sp)
   24400:	df000017 	ldw	fp,0(sp)
   24404:	dec00204 	addi	sp,sp,8
   24408:	f800283a 	ret

0002440c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2440c:	defffa04 	addi	sp,sp,-24
   24410:	dfc00515 	stw	ra,20(sp)
   24414:	df000415 	stw	fp,16(sp)
   24418:	df000404 	addi	fp,sp,16
   2441c:	e13ffd15 	stw	r4,-12(fp)
   24420:	e17ffe15 	stw	r5,-8(fp)
   24424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   24428:	e0bffd17 	ldw	r2,-12(fp)
   2442c:	10800017 	ldw	r2,0(r2)
   24430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   24434:	e0bffc17 	ldw	r2,-16(fp)
   24438:	10800a04 	addi	r2,r2,40
   2443c:	e1bfff17 	ldw	r6,-4(fp)
   24440:	e17ffe17 	ldw	r5,-8(fp)
   24444:	1009883a 	mov	r4,r2
   24448:	00248340 	call	24834 <altera_avalon_jtag_uart_ioctl>
}
   2444c:	e037883a 	mov	sp,fp
   24450:	dfc00117 	ldw	ra,4(sp)
   24454:	df000017 	ldw	fp,0(sp)
   24458:	dec00204 	addi	sp,sp,8
   2445c:	f800283a 	ret

00024460 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24460:	defffa04 	addi	sp,sp,-24
   24464:	dfc00515 	stw	ra,20(sp)
   24468:	df000415 	stw	fp,16(sp)
   2446c:	df000404 	addi	fp,sp,16
   24470:	e13ffd15 	stw	r4,-12(fp)
   24474:	e17ffe15 	stw	r5,-8(fp)
   24478:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2447c:	e0bffd17 	ldw	r2,-12(fp)
   24480:	00c00044 	movi	r3,1
   24484:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   24488:	e0bffd17 	ldw	r2,-12(fp)
   2448c:	10800017 	ldw	r2,0(r2)
   24490:	10800104 	addi	r2,r2,4
   24494:	1007883a 	mov	r3,r2
   24498:	e0bffd17 	ldw	r2,-12(fp)
   2449c:	10800817 	ldw	r2,32(r2)
   244a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   244a4:	e0bffe17 	ldw	r2,-8(fp)
   244a8:	e0ffff17 	ldw	r3,-4(fp)
   244ac:	d8000015 	stw	zero,0(sp)
   244b0:	e1fffd17 	ldw	r7,-12(fp)
   244b4:	018000b4 	movhi	r6,2
   244b8:	31914804 	addi	r6,r6,17696
   244bc:	180b883a 	mov	r5,r3
   244c0:	1009883a 	mov	r4,r2
   244c4:	00251640 	call	25164 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   244c8:	e0bffd17 	ldw	r2,-12(fp)
   244cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   244d0:	e0bffd17 	ldw	r2,-12(fp)
   244d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   244d8:	d0e6d117 	ldw	r3,-25788(gp)
   244dc:	e1fffd17 	ldw	r7,-12(fp)
   244e0:	018000b4 	movhi	r6,2
   244e4:	3191cb04 	addi	r6,r6,18220
   244e8:	180b883a 	mov	r5,r3
   244ec:	1009883a 	mov	r4,r2
   244f0:	0024e580 	call	24e58 <alt_alarm_start>
   244f4:	1000040e 	bge	r2,zero,24508 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   244f8:	e0fffd17 	ldw	r3,-12(fp)
   244fc:	00a00034 	movhi	r2,32768
   24500:	10bfffc4 	addi	r2,r2,-1
   24504:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   24508:	0001883a 	nop
   2450c:	e037883a 	mov	sp,fp
   24510:	dfc00117 	ldw	ra,4(sp)
   24514:	df000017 	ldw	fp,0(sp)
   24518:	dec00204 	addi	sp,sp,8
   2451c:	f800283a 	ret

00024520 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   24520:	defff804 	addi	sp,sp,-32
   24524:	df000715 	stw	fp,28(sp)
   24528:	df000704 	addi	fp,sp,28
   2452c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   24530:	e0bfff17 	ldw	r2,-4(fp)
   24534:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   24538:	e0bffb17 	ldw	r2,-20(fp)
   2453c:	10800017 	ldw	r2,0(r2)
   24540:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24544:	e0bffc17 	ldw	r2,-16(fp)
   24548:	10800104 	addi	r2,r2,4
   2454c:	10800037 	ldwio	r2,0(r2)
   24550:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   24554:	e0bffd17 	ldw	r2,-12(fp)
   24558:	1080c00c 	andi	r2,r2,768
   2455c:	10006d26 	beq	r2,zero,24714 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24560:	e0bffd17 	ldw	r2,-12(fp)
   24564:	1080400c 	andi	r2,r2,256
   24568:	10003526 	beq	r2,zero,24640 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2456c:	00800074 	movhi	r2,1
   24570:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24574:	e0bffb17 	ldw	r2,-20(fp)
   24578:	10800a17 	ldw	r2,40(r2)
   2457c:	10800044 	addi	r2,r2,1
   24580:	1081ffcc 	andi	r2,r2,2047
   24584:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   24588:	e0bffb17 	ldw	r2,-20(fp)
   2458c:	10c00b17 	ldw	r3,44(r2)
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	18801526 	beq	r3,r2,245ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24598:	e0bffc17 	ldw	r2,-16(fp)
   2459c:	10800037 	ldwio	r2,0(r2)
   245a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   245a4:	e0bff917 	ldw	r2,-28(fp)
   245a8:	10a0000c 	andi	r2,r2,32768
   245ac:	10001126 	beq	r2,zero,245f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   245b0:	e0bffb17 	ldw	r2,-20(fp)
   245b4:	10800a17 	ldw	r2,40(r2)
   245b8:	e0fff917 	ldw	r3,-28(fp)
   245bc:	1809883a 	mov	r4,r3
   245c0:	e0fffb17 	ldw	r3,-20(fp)
   245c4:	1885883a 	add	r2,r3,r2
   245c8:	10800e04 	addi	r2,r2,56
   245cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   245d0:	e0bffb17 	ldw	r2,-20(fp)
   245d4:	10800a17 	ldw	r2,40(r2)
   245d8:	10800044 	addi	r2,r2,1
   245dc:	10c1ffcc 	andi	r3,r2,2047
   245e0:	e0bffb17 	ldw	r2,-20(fp)
   245e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   245e8:	003fe206 	br	24574 <__alt_data_end+0xfffe4574>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   245ec:	0001883a 	nop
   245f0:	00000106 	br	245f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   245f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   245f8:	e0bff917 	ldw	r2,-28(fp)
   245fc:	10bfffec 	andhi	r2,r2,65535
   24600:	10000f26 	beq	r2,zero,24640 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24604:	e0bffb17 	ldw	r2,-20(fp)
   24608:	10c00817 	ldw	r3,32(r2)
   2460c:	00bfff84 	movi	r2,-2
   24610:	1886703a 	and	r3,r3,r2
   24614:	e0bffb17 	ldw	r2,-20(fp)
   24618:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2461c:	e0bffc17 	ldw	r2,-16(fp)
   24620:	10800104 	addi	r2,r2,4
   24624:	1007883a 	mov	r3,r2
   24628:	e0bffb17 	ldw	r2,-20(fp)
   2462c:	10800817 	ldw	r2,32(r2)
   24630:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24634:	e0bffc17 	ldw	r2,-16(fp)
   24638:	10800104 	addi	r2,r2,4
   2463c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   24640:	e0bffd17 	ldw	r2,-12(fp)
   24644:	1080800c 	andi	r2,r2,512
   24648:	103fbe26 	beq	r2,zero,24544 <__alt_data_end+0xfffe4544>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2464c:	e0bffd17 	ldw	r2,-12(fp)
   24650:	1004d43a 	srli	r2,r2,16
   24654:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24658:	00001406 	br	246ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2465c:	e0bffc17 	ldw	r2,-16(fp)
   24660:	e0fffb17 	ldw	r3,-20(fp)
   24664:	18c00d17 	ldw	r3,52(r3)
   24668:	e13ffb17 	ldw	r4,-20(fp)
   2466c:	20c7883a 	add	r3,r4,r3
   24670:	18c20e04 	addi	r3,r3,2104
   24674:	18c00003 	ldbu	r3,0(r3)
   24678:	18c03fcc 	andi	r3,r3,255
   2467c:	18c0201c 	xori	r3,r3,128
   24680:	18ffe004 	addi	r3,r3,-128
   24684:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24688:	e0bffb17 	ldw	r2,-20(fp)
   2468c:	10800d17 	ldw	r2,52(r2)
   24690:	10800044 	addi	r2,r2,1
   24694:	10c1ffcc 	andi	r3,r2,2047
   24698:	e0bffb17 	ldw	r2,-20(fp)
   2469c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   246a0:	e0bffa17 	ldw	r2,-24(fp)
   246a4:	10bfffc4 	addi	r2,r2,-1
   246a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   246ac:	e0bffa17 	ldw	r2,-24(fp)
   246b0:	10000526 	beq	r2,zero,246c8 <altera_avalon_jtag_uart_irq+0x1a8>
   246b4:	e0bffb17 	ldw	r2,-20(fp)
   246b8:	10c00d17 	ldw	r3,52(r2)
   246bc:	e0bffb17 	ldw	r2,-20(fp)
   246c0:	10800c17 	ldw	r2,48(r2)
   246c4:	18bfe51e 	bne	r3,r2,2465c <__alt_data_end+0xfffe465c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   246c8:	e0bffa17 	ldw	r2,-24(fp)
   246cc:	103f9d26 	beq	r2,zero,24544 <__alt_data_end+0xfffe4544>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   246d0:	e0bffb17 	ldw	r2,-20(fp)
   246d4:	10c00817 	ldw	r3,32(r2)
   246d8:	00bfff44 	movi	r2,-3
   246dc:	1886703a 	and	r3,r3,r2
   246e0:	e0bffb17 	ldw	r2,-20(fp)
   246e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   246e8:	e0bffb17 	ldw	r2,-20(fp)
   246ec:	10800017 	ldw	r2,0(r2)
   246f0:	10800104 	addi	r2,r2,4
   246f4:	1007883a 	mov	r3,r2
   246f8:	e0bffb17 	ldw	r2,-20(fp)
   246fc:	10800817 	ldw	r2,32(r2)
   24700:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24704:	e0bffc17 	ldw	r2,-16(fp)
   24708:	10800104 	addi	r2,r2,4
   2470c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   24710:	003f8c06 	br	24544 <__alt_data_end+0xfffe4544>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   24714:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   24718:	0001883a 	nop
   2471c:	e037883a 	mov	sp,fp
   24720:	df000017 	ldw	fp,0(sp)
   24724:	dec00104 	addi	sp,sp,4
   24728:	f800283a 	ret

0002472c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2472c:	defff804 	addi	sp,sp,-32
   24730:	df000715 	stw	fp,28(sp)
   24734:	df000704 	addi	fp,sp,28
   24738:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2473c:	e0bffb17 	ldw	r2,-20(fp)
   24740:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24744:	e0bff917 	ldw	r2,-28(fp)
   24748:	10800017 	ldw	r2,0(r2)
   2474c:	10800104 	addi	r2,r2,4
   24750:	10800037 	ldwio	r2,0(r2)
   24754:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24758:	e0bffa17 	ldw	r2,-24(fp)
   2475c:	1081000c 	andi	r2,r2,1024
   24760:	10000b26 	beq	r2,zero,24790 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24764:	e0bff917 	ldw	r2,-28(fp)
   24768:	10800017 	ldw	r2,0(r2)
   2476c:	10800104 	addi	r2,r2,4
   24770:	1007883a 	mov	r3,r2
   24774:	e0bff917 	ldw	r2,-28(fp)
   24778:	10800817 	ldw	r2,32(r2)
   2477c:	10810014 	ori	r2,r2,1024
   24780:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24784:	e0bff917 	ldw	r2,-28(fp)
   24788:	10000915 	stw	zero,36(r2)
   2478c:	00000a06 	br	247b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24790:	e0bff917 	ldw	r2,-28(fp)
   24794:	10c00917 	ldw	r3,36(r2)
   24798:	00a00034 	movhi	r2,32768
   2479c:	10bfff04 	addi	r2,r2,-4
   247a0:	10c00536 	bltu	r2,r3,247b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   247a4:	e0bff917 	ldw	r2,-28(fp)
   247a8:	10800917 	ldw	r2,36(r2)
   247ac:	10c00044 	addi	r3,r2,1
   247b0:	e0bff917 	ldw	r2,-28(fp)
   247b4:	10c00915 	stw	r3,36(r2)
   247b8:	d0a6d117 	ldw	r2,-25788(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   247bc:	e037883a 	mov	sp,fp
   247c0:	df000017 	ldw	fp,0(sp)
   247c4:	dec00104 	addi	sp,sp,4
   247c8:	f800283a 	ret

000247cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   247cc:	defffd04 	addi	sp,sp,-12
   247d0:	df000215 	stw	fp,8(sp)
   247d4:	df000204 	addi	fp,sp,8
   247d8:	e13ffe15 	stw	r4,-8(fp)
   247dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   247e0:	00000506 	br	247f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   247e4:	e0bfff17 	ldw	r2,-4(fp)
   247e8:	1090000c 	andi	r2,r2,16384
   247ec:	10000226 	beq	r2,zero,247f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   247f0:	00bffd44 	movi	r2,-11
   247f4:	00000b06 	br	24824 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   247f8:	e0bffe17 	ldw	r2,-8(fp)
   247fc:	10c00d17 	ldw	r3,52(r2)
   24800:	e0bffe17 	ldw	r2,-8(fp)
   24804:	10800c17 	ldw	r2,48(r2)
   24808:	18800526 	beq	r3,r2,24820 <altera_avalon_jtag_uart_close+0x54>
   2480c:	e0bffe17 	ldw	r2,-8(fp)
   24810:	10c00917 	ldw	r3,36(r2)
   24814:	e0bffe17 	ldw	r2,-8(fp)
   24818:	10800117 	ldw	r2,4(r2)
   2481c:	18bff136 	bltu	r3,r2,247e4 <__alt_data_end+0xfffe47e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   24820:	0005883a 	mov	r2,zero
}
   24824:	e037883a 	mov	sp,fp
   24828:	df000017 	ldw	fp,0(sp)
   2482c:	dec00104 	addi	sp,sp,4
   24830:	f800283a 	ret

00024834 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24834:	defffa04 	addi	sp,sp,-24
   24838:	df000515 	stw	fp,20(sp)
   2483c:	df000504 	addi	fp,sp,20
   24840:	e13ffd15 	stw	r4,-12(fp)
   24844:	e17ffe15 	stw	r5,-8(fp)
   24848:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2484c:	00bff9c4 	movi	r2,-25
   24850:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24854:	e0bffe17 	ldw	r2,-8(fp)
   24858:	10da8060 	cmpeqi	r3,r2,27137
   2485c:	1800031e 	bne	r3,zero,2486c <altera_avalon_jtag_uart_ioctl+0x38>
   24860:	109a80a0 	cmpeqi	r2,r2,27138
   24864:	1000181e 	bne	r2,zero,248c8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   24868:	00002906 	br	24910 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2486c:	e0bffd17 	ldw	r2,-12(fp)
   24870:	10c00117 	ldw	r3,4(r2)
   24874:	00a00034 	movhi	r2,32768
   24878:	10bfffc4 	addi	r2,r2,-1
   2487c:	18802126 	beq	r3,r2,24904 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   24880:	e0bfff17 	ldw	r2,-4(fp)
   24884:	10800017 	ldw	r2,0(r2)
   24888:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2488c:	e0bffc17 	ldw	r2,-16(fp)
   24890:	10800090 	cmplti	r2,r2,2
   24894:	1000061e 	bne	r2,zero,248b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   24898:	e0fffc17 	ldw	r3,-16(fp)
   2489c:	00a00034 	movhi	r2,32768
   248a0:	10bfffc4 	addi	r2,r2,-1
   248a4:	18800226 	beq	r3,r2,248b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   248a8:	e0bffc17 	ldw	r2,-16(fp)
   248ac:	00000206 	br	248b8 <altera_avalon_jtag_uart_ioctl+0x84>
   248b0:	00a00034 	movhi	r2,32768
   248b4:	10bfff84 	addi	r2,r2,-2
   248b8:	e0fffd17 	ldw	r3,-12(fp)
   248bc:	18800115 	stw	r2,4(r3)
      rc = 0;
   248c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   248c4:	00000f06 	br	24904 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   248c8:	e0bffd17 	ldw	r2,-12(fp)
   248cc:	10c00117 	ldw	r3,4(r2)
   248d0:	00a00034 	movhi	r2,32768
   248d4:	10bfffc4 	addi	r2,r2,-1
   248d8:	18800c26 	beq	r3,r2,2490c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   248dc:	e0bffd17 	ldw	r2,-12(fp)
   248e0:	10c00917 	ldw	r3,36(r2)
   248e4:	e0bffd17 	ldw	r2,-12(fp)
   248e8:	10800117 	ldw	r2,4(r2)
   248ec:	1885803a 	cmpltu	r2,r3,r2
   248f0:	10c03fcc 	andi	r3,r2,255
   248f4:	e0bfff17 	ldw	r2,-4(fp)
   248f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   248fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24900:	00000206 	br	2490c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   24904:	0001883a 	nop
   24908:	00000106 	br	24910 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2490c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24910:	e0bffb17 	ldw	r2,-20(fp)
}
   24914:	e037883a 	mov	sp,fp
   24918:	df000017 	ldw	fp,0(sp)
   2491c:	dec00104 	addi	sp,sp,4
   24920:	f800283a 	ret

00024924 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24924:	defff304 	addi	sp,sp,-52
   24928:	dfc00c15 	stw	ra,48(sp)
   2492c:	df000b15 	stw	fp,44(sp)
   24930:	df000b04 	addi	fp,sp,44
   24934:	e13ffc15 	stw	r4,-16(fp)
   24938:	e17ffd15 	stw	r5,-12(fp)
   2493c:	e1bffe15 	stw	r6,-8(fp)
   24940:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24944:	e0bffd17 	ldw	r2,-12(fp)
   24948:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2494c:	00004706 	br	24a6c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24950:	e0bffc17 	ldw	r2,-16(fp)
   24954:	10800a17 	ldw	r2,40(r2)
   24958:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2495c:	e0bffc17 	ldw	r2,-16(fp)
   24960:	10800b17 	ldw	r2,44(r2)
   24964:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   24968:	e0fff717 	ldw	r3,-36(fp)
   2496c:	e0bff817 	ldw	r2,-32(fp)
   24970:	18800536 	bltu	r3,r2,24988 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24974:	e0fff717 	ldw	r3,-36(fp)
   24978:	e0bff817 	ldw	r2,-32(fp)
   2497c:	1885c83a 	sub	r2,r3,r2
   24980:	e0bff615 	stw	r2,-40(fp)
   24984:	00000406 	br	24998 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24988:	00c20004 	movi	r3,2048
   2498c:	e0bff817 	ldw	r2,-32(fp)
   24990:	1885c83a 	sub	r2,r3,r2
   24994:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24998:	e0bff617 	ldw	r2,-40(fp)
   2499c:	10001e26 	beq	r2,zero,24a18 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   249a0:	e0fffe17 	ldw	r3,-8(fp)
   249a4:	e0bff617 	ldw	r2,-40(fp)
   249a8:	1880022e 	bgeu	r3,r2,249b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   249ac:	e0bffe17 	ldw	r2,-8(fp)
   249b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   249b4:	e0bffc17 	ldw	r2,-16(fp)
   249b8:	10c00e04 	addi	r3,r2,56
   249bc:	e0bff817 	ldw	r2,-32(fp)
   249c0:	1885883a 	add	r2,r3,r2
   249c4:	e1bff617 	ldw	r6,-40(fp)
   249c8:	100b883a 	mov	r5,r2
   249cc:	e13ff517 	ldw	r4,-44(fp)
   249d0:	00219d40 	call	219d4 <memcpy>
      ptr   += n;
   249d4:	e0fff517 	ldw	r3,-44(fp)
   249d8:	e0bff617 	ldw	r2,-40(fp)
   249dc:	1885883a 	add	r2,r3,r2
   249e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   249e4:	e0fffe17 	ldw	r3,-8(fp)
   249e8:	e0bff617 	ldw	r2,-40(fp)
   249ec:	1885c83a 	sub	r2,r3,r2
   249f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   249f4:	e0fff817 	ldw	r3,-32(fp)
   249f8:	e0bff617 	ldw	r2,-40(fp)
   249fc:	1885883a 	add	r2,r3,r2
   24a00:	10c1ffcc 	andi	r3,r2,2047
   24a04:	e0bffc17 	ldw	r2,-16(fp)
   24a08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24a0c:	e0bffe17 	ldw	r2,-8(fp)
   24a10:	00bfcf16 	blt	zero,r2,24950 <__alt_data_end+0xfffe4950>
   24a14:	00000106 	br	24a1c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24a18:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24a1c:	e0fff517 	ldw	r3,-44(fp)
   24a20:	e0bffd17 	ldw	r2,-12(fp)
   24a24:	1880141e 	bne	r3,r2,24a78 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24a28:	e0bfff17 	ldw	r2,-4(fp)
   24a2c:	1090000c 	andi	r2,r2,16384
   24a30:	1000131e 	bne	r2,zero,24a80 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24a34:	0001883a 	nop
   24a38:	e0bffc17 	ldw	r2,-16(fp)
   24a3c:	10c00a17 	ldw	r3,40(r2)
   24a40:	e0bff717 	ldw	r2,-36(fp)
   24a44:	1880051e 	bne	r3,r2,24a5c <altera_avalon_jtag_uart_read+0x138>
   24a48:	e0bffc17 	ldw	r2,-16(fp)
   24a4c:	10c00917 	ldw	r3,36(r2)
   24a50:	e0bffc17 	ldw	r2,-16(fp)
   24a54:	10800117 	ldw	r2,4(r2)
   24a58:	18bff736 	bltu	r3,r2,24a38 <__alt_data_end+0xfffe4a38>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24a5c:	e0bffc17 	ldw	r2,-16(fp)
   24a60:	10c00a17 	ldw	r3,40(r2)
   24a64:	e0bff717 	ldw	r2,-36(fp)
   24a68:	18800726 	beq	r3,r2,24a88 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24a6c:	e0bffe17 	ldw	r2,-8(fp)
   24a70:	00bfb716 	blt	zero,r2,24950 <__alt_data_end+0xfffe4950>
   24a74:	00000506 	br	24a8c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   24a78:	0001883a 	nop
   24a7c:	00000306 	br	24a8c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   24a80:	0001883a 	nop
   24a84:	00000106 	br	24a8c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   24a88:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24a8c:	e0fff517 	ldw	r3,-44(fp)
   24a90:	e0bffd17 	ldw	r2,-12(fp)
   24a94:	18801826 	beq	r3,r2,24af8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a98:	0005303a 	rdctl	r2,status
   24a9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24aa0:	e0fffb17 	ldw	r3,-20(fp)
   24aa4:	00bfff84 	movi	r2,-2
   24aa8:	1884703a 	and	r2,r3,r2
   24aac:	1001703a 	wrctl	status,r2
  
  return context;
   24ab0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24ab4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24ab8:	e0bffc17 	ldw	r2,-16(fp)
   24abc:	10800817 	ldw	r2,32(r2)
   24ac0:	10c00054 	ori	r3,r2,1
   24ac4:	e0bffc17 	ldw	r2,-16(fp)
   24ac8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24acc:	e0bffc17 	ldw	r2,-16(fp)
   24ad0:	10800017 	ldw	r2,0(r2)
   24ad4:	10800104 	addi	r2,r2,4
   24ad8:	1007883a 	mov	r3,r2
   24adc:	e0bffc17 	ldw	r2,-16(fp)
   24ae0:	10800817 	ldw	r2,32(r2)
   24ae4:	18800035 	stwio	r2,0(r3)
   24ae8:	e0bffa17 	ldw	r2,-24(fp)
   24aec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24af0:	e0bff917 	ldw	r2,-28(fp)
   24af4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24af8:	e0fff517 	ldw	r3,-44(fp)
   24afc:	e0bffd17 	ldw	r2,-12(fp)
   24b00:	18800426 	beq	r3,r2,24b14 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   24b04:	e0fff517 	ldw	r3,-44(fp)
   24b08:	e0bffd17 	ldw	r2,-12(fp)
   24b0c:	1885c83a 	sub	r2,r3,r2
   24b10:	00000606 	br	24b2c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   24b14:	e0bfff17 	ldw	r2,-4(fp)
   24b18:	1090000c 	andi	r2,r2,16384
   24b1c:	10000226 	beq	r2,zero,24b28 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   24b20:	00bffd44 	movi	r2,-11
   24b24:	00000106 	br	24b2c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   24b28:	00bffec4 	movi	r2,-5
}
   24b2c:	e037883a 	mov	sp,fp
   24b30:	dfc00117 	ldw	ra,4(sp)
   24b34:	df000017 	ldw	fp,0(sp)
   24b38:	dec00204 	addi	sp,sp,8
   24b3c:	f800283a 	ret

00024b40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24b40:	defff304 	addi	sp,sp,-52
   24b44:	dfc00c15 	stw	ra,48(sp)
   24b48:	df000b15 	stw	fp,44(sp)
   24b4c:	df000b04 	addi	fp,sp,44
   24b50:	e13ffc15 	stw	r4,-16(fp)
   24b54:	e17ffd15 	stw	r5,-12(fp)
   24b58:	e1bffe15 	stw	r6,-8(fp)
   24b5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24b60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24b64:	e0bffd17 	ldw	r2,-12(fp)
   24b68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24b6c:	00003706 	br	24c4c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24b70:	e0bffc17 	ldw	r2,-16(fp)
   24b74:	10800c17 	ldw	r2,48(r2)
   24b78:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   24b7c:	e0bffc17 	ldw	r2,-16(fp)
   24b80:	10800d17 	ldw	r2,52(r2)
   24b84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24b88:	e0fff917 	ldw	r3,-28(fp)
   24b8c:	e0bff517 	ldw	r2,-44(fp)
   24b90:	1880062e 	bgeu	r3,r2,24bac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24b94:	e0fff517 	ldw	r3,-44(fp)
   24b98:	e0bff917 	ldw	r2,-28(fp)
   24b9c:	1885c83a 	sub	r2,r3,r2
   24ba0:	10bfffc4 	addi	r2,r2,-1
   24ba4:	e0bff615 	stw	r2,-40(fp)
   24ba8:	00000b06 	br	24bd8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24bac:	e0bff517 	ldw	r2,-44(fp)
   24bb0:	10000526 	beq	r2,zero,24bc8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24bb4:	00c20004 	movi	r3,2048
   24bb8:	e0bff917 	ldw	r2,-28(fp)
   24bbc:	1885c83a 	sub	r2,r3,r2
   24bc0:	e0bff615 	stw	r2,-40(fp)
   24bc4:	00000406 	br	24bd8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24bc8:	00c1ffc4 	movi	r3,2047
   24bcc:	e0bff917 	ldw	r2,-28(fp)
   24bd0:	1885c83a 	sub	r2,r3,r2
   24bd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24bd8:	e0bff617 	ldw	r2,-40(fp)
   24bdc:	10001e26 	beq	r2,zero,24c58 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24be0:	e0fffe17 	ldw	r3,-8(fp)
   24be4:	e0bff617 	ldw	r2,-40(fp)
   24be8:	1880022e 	bgeu	r3,r2,24bf4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24bec:	e0bffe17 	ldw	r2,-8(fp)
   24bf0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24bf4:	e0bffc17 	ldw	r2,-16(fp)
   24bf8:	10c20e04 	addi	r3,r2,2104
   24bfc:	e0bff917 	ldw	r2,-28(fp)
   24c00:	1885883a 	add	r2,r3,r2
   24c04:	e1bff617 	ldw	r6,-40(fp)
   24c08:	e17ffd17 	ldw	r5,-12(fp)
   24c0c:	1009883a 	mov	r4,r2
   24c10:	00219d40 	call	219d4 <memcpy>
      ptr   += n;
   24c14:	e0fffd17 	ldw	r3,-12(fp)
   24c18:	e0bff617 	ldw	r2,-40(fp)
   24c1c:	1885883a 	add	r2,r3,r2
   24c20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24c24:	e0fffe17 	ldw	r3,-8(fp)
   24c28:	e0bff617 	ldw	r2,-40(fp)
   24c2c:	1885c83a 	sub	r2,r3,r2
   24c30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24c34:	e0fff917 	ldw	r3,-28(fp)
   24c38:	e0bff617 	ldw	r2,-40(fp)
   24c3c:	1885883a 	add	r2,r3,r2
   24c40:	10c1ffcc 	andi	r3,r2,2047
   24c44:	e0bffc17 	ldw	r2,-16(fp)
   24c48:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24c4c:	e0bffe17 	ldw	r2,-8(fp)
   24c50:	00bfc716 	blt	zero,r2,24b70 <__alt_data_end+0xfffe4b70>
   24c54:	00000106 	br	24c5c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24c58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c5c:	0005303a 	rdctl	r2,status
   24c60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c64:	e0fffb17 	ldw	r3,-20(fp)
   24c68:	00bfff84 	movi	r2,-2
   24c6c:	1884703a 	and	r2,r3,r2
   24c70:	1001703a 	wrctl	status,r2
  
  return context;
   24c74:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24c78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24c7c:	e0bffc17 	ldw	r2,-16(fp)
   24c80:	10800817 	ldw	r2,32(r2)
   24c84:	10c00094 	ori	r3,r2,2
   24c88:	e0bffc17 	ldw	r2,-16(fp)
   24c8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24c90:	e0bffc17 	ldw	r2,-16(fp)
   24c94:	10800017 	ldw	r2,0(r2)
   24c98:	10800104 	addi	r2,r2,4
   24c9c:	1007883a 	mov	r3,r2
   24ca0:	e0bffc17 	ldw	r2,-16(fp)
   24ca4:	10800817 	ldw	r2,32(r2)
   24ca8:	18800035 	stwio	r2,0(r3)
   24cac:	e0bffa17 	ldw	r2,-24(fp)
   24cb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cb4:	e0bff817 	ldw	r2,-32(fp)
   24cb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24cbc:	e0bffe17 	ldw	r2,-8(fp)
   24cc0:	0080100e 	bge	zero,r2,24d04 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24cc4:	e0bfff17 	ldw	r2,-4(fp)
   24cc8:	1090000c 	andi	r2,r2,16384
   24ccc:	1000101e 	bne	r2,zero,24d10 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24cd0:	0001883a 	nop
   24cd4:	e0bffc17 	ldw	r2,-16(fp)
   24cd8:	10c00d17 	ldw	r3,52(r2)
   24cdc:	e0bff517 	ldw	r2,-44(fp)
   24ce0:	1880051e 	bne	r3,r2,24cf8 <altera_avalon_jtag_uart_write+0x1b8>
   24ce4:	e0bffc17 	ldw	r2,-16(fp)
   24ce8:	10c00917 	ldw	r3,36(r2)
   24cec:	e0bffc17 	ldw	r2,-16(fp)
   24cf0:	10800117 	ldw	r2,4(r2)
   24cf4:	18bff736 	bltu	r3,r2,24cd4 <__alt_data_end+0xfffe4cd4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24cf8:	e0bffc17 	ldw	r2,-16(fp)
   24cfc:	10800917 	ldw	r2,36(r2)
   24d00:	1000051e 	bne	r2,zero,24d18 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24d04:	e0bffe17 	ldw	r2,-8(fp)
   24d08:	00bfd016 	blt	zero,r2,24c4c <__alt_data_end+0xfffe4c4c>
   24d0c:	00000306 	br	24d1c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24d10:	0001883a 	nop
   24d14:	00000106 	br	24d1c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24d18:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24d1c:	e0fffd17 	ldw	r3,-12(fp)
   24d20:	e0bff717 	ldw	r2,-36(fp)
   24d24:	18800426 	beq	r3,r2,24d38 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24d28:	e0fffd17 	ldw	r3,-12(fp)
   24d2c:	e0bff717 	ldw	r2,-36(fp)
   24d30:	1885c83a 	sub	r2,r3,r2
   24d34:	00000606 	br	24d50 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24d38:	e0bfff17 	ldw	r2,-4(fp)
   24d3c:	1090000c 	andi	r2,r2,16384
   24d40:	10000226 	beq	r2,zero,24d4c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24d44:	00bffd44 	movi	r2,-11
   24d48:	00000106 	br	24d50 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24d4c:	00bffec4 	movi	r2,-5
}
   24d50:	e037883a 	mov	sp,fp
   24d54:	dfc00117 	ldw	ra,4(sp)
   24d58:	df000017 	ldw	fp,0(sp)
   24d5c:	dec00204 	addi	sp,sp,8
   24d60:	f800283a 	ret

00024d64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   24d64:	defffa04 	addi	sp,sp,-24
   24d68:	dfc00515 	stw	ra,20(sp)
   24d6c:	df000415 	stw	fp,16(sp)
   24d70:	df000404 	addi	fp,sp,16
   24d74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24d78:	0007883a 	mov	r3,zero
   24d7c:	e0bfff17 	ldw	r2,-4(fp)
   24d80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   24d84:	e0bfff17 	ldw	r2,-4(fp)
   24d88:	10800104 	addi	r2,r2,4
   24d8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24d90:	0005303a 	rdctl	r2,status
   24d94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24d98:	e0fffd17 	ldw	r3,-12(fp)
   24d9c:	00bfff84 	movi	r2,-2
   24da0:	1884703a 	and	r2,r3,r2
   24da4:	1001703a 	wrctl	status,r2
  
  return context;
   24da8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24dac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   24db0:	00258840 	call	25884 <alt_tick>
   24db4:	e0bffc17 	ldw	r2,-16(fp)
   24db8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24dbc:	e0bffe17 	ldw	r2,-8(fp)
   24dc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   24dc4:	0001883a 	nop
   24dc8:	e037883a 	mov	sp,fp
   24dcc:	dfc00117 	ldw	ra,4(sp)
   24dd0:	df000017 	ldw	fp,0(sp)
   24dd4:	dec00204 	addi	sp,sp,8
   24dd8:	f800283a 	ret

00024ddc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24ddc:	defff804 	addi	sp,sp,-32
   24de0:	dfc00715 	stw	ra,28(sp)
   24de4:	df000615 	stw	fp,24(sp)
   24de8:	df000604 	addi	fp,sp,24
   24dec:	e13ffc15 	stw	r4,-16(fp)
   24df0:	e17ffd15 	stw	r5,-12(fp)
   24df4:	e1bffe15 	stw	r6,-8(fp)
   24df8:	e1ffff15 	stw	r7,-4(fp)
   24dfc:	e0bfff17 	ldw	r2,-4(fp)
   24e00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24e04:	d0a6d117 	ldw	r2,-25788(gp)
   24e08:	1000021e 	bne	r2,zero,24e14 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   24e0c:	e0bffb17 	ldw	r2,-20(fp)
   24e10:	d0a6d115 	stw	r2,-25788(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24e14:	e0bffc17 	ldw	r2,-16(fp)
   24e18:	10800104 	addi	r2,r2,4
   24e1c:	00c001c4 	movi	r3,7
   24e20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24e24:	d8000015 	stw	zero,0(sp)
   24e28:	e1fffc17 	ldw	r7,-16(fp)
   24e2c:	018000b4 	movhi	r6,2
   24e30:	31935904 	addi	r6,r6,19812
   24e34:	e17ffe17 	ldw	r5,-8(fp)
   24e38:	e13ffd17 	ldw	r4,-12(fp)
   24e3c:	00251640 	call	25164 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24e40:	0001883a 	nop
   24e44:	e037883a 	mov	sp,fp
   24e48:	dfc00117 	ldw	ra,4(sp)
   24e4c:	df000017 	ldw	fp,0(sp)
   24e50:	dec00204 	addi	sp,sp,8
   24e54:	f800283a 	ret

00024e58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24e58:	defff504 	addi	sp,sp,-44
   24e5c:	df000a15 	stw	fp,40(sp)
   24e60:	df000a04 	addi	fp,sp,40
   24e64:	e13ffc15 	stw	r4,-16(fp)
   24e68:	e17ffd15 	stw	r5,-12(fp)
   24e6c:	e1bffe15 	stw	r6,-8(fp)
   24e70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24e74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24e78:	d0a6d117 	ldw	r2,-25788(gp)
  
  if (alt_ticks_per_second ())
   24e7c:	10003c26 	beq	r2,zero,24f70 <alt_alarm_start+0x118>
  {
    if (alarm)
   24e80:	e0bffc17 	ldw	r2,-16(fp)
   24e84:	10003826 	beq	r2,zero,24f68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   24e88:	e0bffc17 	ldw	r2,-16(fp)
   24e8c:	e0fffe17 	ldw	r3,-8(fp)
   24e90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   24e94:	e0bffc17 	ldw	r2,-16(fp)
   24e98:	e0ffff17 	ldw	r3,-4(fp)
   24e9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24ea0:	0005303a 	rdctl	r2,status
   24ea4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24ea8:	e0fff917 	ldw	r3,-28(fp)
   24eac:	00bfff84 	movi	r2,-2
   24eb0:	1884703a 	and	r2,r3,r2
   24eb4:	1001703a 	wrctl	status,r2
  
  return context;
   24eb8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24ebc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24ec0:	d0a6d217 	ldw	r2,-25784(gp)
      
      current_nticks = alt_nticks();
   24ec4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24ec8:	e0fffd17 	ldw	r3,-12(fp)
   24ecc:	e0bff617 	ldw	r2,-40(fp)
   24ed0:	1885883a 	add	r2,r3,r2
   24ed4:	10c00044 	addi	r3,r2,1
   24ed8:	e0bffc17 	ldw	r2,-16(fp)
   24edc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24ee0:	e0bffc17 	ldw	r2,-16(fp)
   24ee4:	10c00217 	ldw	r3,8(r2)
   24ee8:	e0bff617 	ldw	r2,-40(fp)
   24eec:	1880042e 	bgeu	r3,r2,24f00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   24ef0:	e0bffc17 	ldw	r2,-16(fp)
   24ef4:	00c00044 	movi	r3,1
   24ef8:	10c00405 	stb	r3,16(r2)
   24efc:	00000206 	br	24f08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   24f00:	e0bffc17 	ldw	r2,-16(fp)
   24f04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24f08:	e0bffc17 	ldw	r2,-16(fp)
   24f0c:	d0e00c04 	addi	r3,gp,-32720
   24f10:	e0fffa15 	stw	r3,-24(fp)
   24f14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24f18:	e0bffb17 	ldw	r2,-20(fp)
   24f1c:	e0fffa17 	ldw	r3,-24(fp)
   24f20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24f24:	e0bffa17 	ldw	r2,-24(fp)
   24f28:	10c00017 	ldw	r3,0(r2)
   24f2c:	e0bffb17 	ldw	r2,-20(fp)
   24f30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24f34:	e0bffa17 	ldw	r2,-24(fp)
   24f38:	10800017 	ldw	r2,0(r2)
   24f3c:	e0fffb17 	ldw	r3,-20(fp)
   24f40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24f44:	e0bffa17 	ldw	r2,-24(fp)
   24f48:	e0fffb17 	ldw	r3,-20(fp)
   24f4c:	10c00015 	stw	r3,0(r2)
   24f50:	e0bff817 	ldw	r2,-32(fp)
   24f54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f58:	e0bff717 	ldw	r2,-36(fp)
   24f5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24f60:	0005883a 	mov	r2,zero
   24f64:	00000306 	br	24f74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   24f68:	00bffa84 	movi	r2,-22
   24f6c:	00000106 	br	24f74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   24f70:	00bfde84 	movi	r2,-134
  }
}
   24f74:	e037883a 	mov	sp,fp
   24f78:	df000017 	ldw	fp,0(sp)
   24f7c:	dec00104 	addi	sp,sp,4
   24f80:	f800283a 	ret

00024f84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24f84:	deffff04 	addi	sp,sp,-4
   24f88:	df000015 	stw	fp,0(sp)
   24f8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24f90:	0001883a 	nop
   24f94:	e037883a 	mov	sp,fp
   24f98:	df000017 	ldw	fp,0(sp)
   24f9c:	dec00104 	addi	sp,sp,4
   24fa0:	f800283a 	ret

00024fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24fa4:	defffe04 	addi	sp,sp,-8
   24fa8:	dfc00115 	stw	ra,4(sp)
   24fac:	df000015 	stw	fp,0(sp)
   24fb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24fb4:	d0a00917 	ldw	r2,-32732(gp)
   24fb8:	10000326 	beq	r2,zero,24fc8 <alt_get_errno+0x24>
   24fbc:	d0a00917 	ldw	r2,-32732(gp)
   24fc0:	103ee83a 	callr	r2
   24fc4:	00000106 	br	24fcc <alt_get_errno+0x28>
   24fc8:	d0a6cc04 	addi	r2,gp,-25808
}
   24fcc:	e037883a 	mov	sp,fp
   24fd0:	dfc00117 	ldw	ra,4(sp)
   24fd4:	df000017 	ldw	fp,0(sp)
   24fd8:	dec00204 	addi	sp,sp,8
   24fdc:	f800283a 	ret

00024fe0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24fe0:	defffa04 	addi	sp,sp,-24
   24fe4:	dfc00515 	stw	ra,20(sp)
   24fe8:	df000415 	stw	fp,16(sp)
   24fec:	df000404 	addi	fp,sp,16
   24ff0:	e13ffe15 	stw	r4,-8(fp)
   24ff4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24ff8:	e0bffe17 	ldw	r2,-8(fp)
   24ffc:	10000326 	beq	r2,zero,2500c <alt_dev_llist_insert+0x2c>
   25000:	e0bffe17 	ldw	r2,-8(fp)
   25004:	10800217 	ldw	r2,8(r2)
   25008:	1000061e 	bne	r2,zero,25024 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2500c:	0024fa40 	call	24fa4 <alt_get_errno>
   25010:	1007883a 	mov	r3,r2
   25014:	00800584 	movi	r2,22
   25018:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2501c:	00bffa84 	movi	r2,-22
   25020:	00001306 	br	25070 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25024:	e0bffe17 	ldw	r2,-8(fp)
   25028:	e0ffff17 	ldw	r3,-4(fp)
   2502c:	e0fffc15 	stw	r3,-16(fp)
   25030:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25034:	e0bffd17 	ldw	r2,-12(fp)
   25038:	e0fffc17 	ldw	r3,-16(fp)
   2503c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25040:	e0bffc17 	ldw	r2,-16(fp)
   25044:	10c00017 	ldw	r3,0(r2)
   25048:	e0bffd17 	ldw	r2,-12(fp)
   2504c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25050:	e0bffc17 	ldw	r2,-16(fp)
   25054:	10800017 	ldw	r2,0(r2)
   25058:	e0fffd17 	ldw	r3,-12(fp)
   2505c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25060:	e0bffc17 	ldw	r2,-16(fp)
   25064:	e0fffd17 	ldw	r3,-12(fp)
   25068:	10c00015 	stw	r3,0(r2)

  return 0;  
   2506c:	0005883a 	mov	r2,zero
}
   25070:	e037883a 	mov	sp,fp
   25074:	dfc00117 	ldw	ra,4(sp)
   25078:	df000017 	ldw	fp,0(sp)
   2507c:	dec00204 	addi	sp,sp,8
   25080:	f800283a 	ret

00025084 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25084:	defffd04 	addi	sp,sp,-12
   25088:	dfc00215 	stw	ra,8(sp)
   2508c:	df000115 	stw	fp,4(sp)
   25090:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25094:	008000b4 	movhi	r2,2
   25098:	10980e04 	addi	r2,r2,24632
   2509c:	e0bfff15 	stw	r2,-4(fp)
   250a0:	00000606 	br	250bc <_do_ctors+0x38>
        (*ctor) (); 
   250a4:	e0bfff17 	ldw	r2,-4(fp)
   250a8:	10800017 	ldw	r2,0(r2)
   250ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   250b0:	e0bfff17 	ldw	r2,-4(fp)
   250b4:	10bfff04 	addi	r2,r2,-4
   250b8:	e0bfff15 	stw	r2,-4(fp)
   250bc:	e0ffff17 	ldw	r3,-4(fp)
   250c0:	008000b4 	movhi	r2,2
   250c4:	10980f04 	addi	r2,r2,24636
   250c8:	18bff62e 	bgeu	r3,r2,250a4 <__alt_data_end+0xfffe50a4>
        (*ctor) (); 
}
   250cc:	0001883a 	nop
   250d0:	e037883a 	mov	sp,fp
   250d4:	dfc00117 	ldw	ra,4(sp)
   250d8:	df000017 	ldw	fp,0(sp)
   250dc:	dec00204 	addi	sp,sp,8
   250e0:	f800283a 	ret

000250e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   250e4:	defffd04 	addi	sp,sp,-12
   250e8:	dfc00215 	stw	ra,8(sp)
   250ec:	df000115 	stw	fp,4(sp)
   250f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   250f4:	008000b4 	movhi	r2,2
   250f8:	10980e04 	addi	r2,r2,24632
   250fc:	e0bfff15 	stw	r2,-4(fp)
   25100:	00000606 	br	2511c <_do_dtors+0x38>
        (*dtor) (); 
   25104:	e0bfff17 	ldw	r2,-4(fp)
   25108:	10800017 	ldw	r2,0(r2)
   2510c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25110:	e0bfff17 	ldw	r2,-4(fp)
   25114:	10bfff04 	addi	r2,r2,-4
   25118:	e0bfff15 	stw	r2,-4(fp)
   2511c:	e0ffff17 	ldw	r3,-4(fp)
   25120:	008000b4 	movhi	r2,2
   25124:	10980f04 	addi	r2,r2,24636
   25128:	18bff62e 	bgeu	r3,r2,25104 <__alt_data_end+0xfffe5104>
        (*dtor) (); 
}
   2512c:	0001883a 	nop
   25130:	e037883a 	mov	sp,fp
   25134:	dfc00117 	ldw	ra,4(sp)
   25138:	df000017 	ldw	fp,0(sp)
   2513c:	dec00204 	addi	sp,sp,8
   25140:	f800283a 	ret

00025144 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25144:	deffff04 	addi	sp,sp,-4
   25148:	df000015 	stw	fp,0(sp)
   2514c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   25150:	0001883a 	nop
   25154:	e037883a 	mov	sp,fp
   25158:	df000017 	ldw	fp,0(sp)
   2515c:	dec00104 	addi	sp,sp,4
   25160:	f800283a 	ret

00025164 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25164:	defff904 	addi	sp,sp,-28
   25168:	dfc00615 	stw	ra,24(sp)
   2516c:	df000515 	stw	fp,20(sp)
   25170:	df000504 	addi	fp,sp,20
   25174:	e13ffc15 	stw	r4,-16(fp)
   25178:	e17ffd15 	stw	r5,-12(fp)
   2517c:	e1bffe15 	stw	r6,-8(fp)
   25180:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25184:	e0800217 	ldw	r2,8(fp)
   25188:	d8800015 	stw	r2,0(sp)
   2518c:	e1ffff17 	ldw	r7,-4(fp)
   25190:	e1bffe17 	ldw	r6,-8(fp)
   25194:	e17ffd17 	ldw	r5,-12(fp)
   25198:	e13ffc17 	ldw	r4,-16(fp)
   2519c:	00253140 	call	25314 <alt_iic_isr_register>
}  
   251a0:	e037883a 	mov	sp,fp
   251a4:	dfc00117 	ldw	ra,4(sp)
   251a8:	df000017 	ldw	fp,0(sp)
   251ac:	dec00204 	addi	sp,sp,8
   251b0:	f800283a 	ret

000251b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   251b4:	defff904 	addi	sp,sp,-28
   251b8:	df000615 	stw	fp,24(sp)
   251bc:	df000604 	addi	fp,sp,24
   251c0:	e13ffe15 	stw	r4,-8(fp)
   251c4:	e17fff15 	stw	r5,-4(fp)
   251c8:	e0bfff17 	ldw	r2,-4(fp)
   251cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   251d0:	0005303a 	rdctl	r2,status
   251d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   251d8:	e0fffb17 	ldw	r3,-20(fp)
   251dc:	00bfff84 	movi	r2,-2
   251e0:	1884703a 	and	r2,r3,r2
   251e4:	1001703a 	wrctl	status,r2
  
  return context;
   251e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   251ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   251f0:	00c00044 	movi	r3,1
   251f4:	e0bffa17 	ldw	r2,-24(fp)
   251f8:	1884983a 	sll	r2,r3,r2
   251fc:	1007883a 	mov	r3,r2
   25200:	d0a6d017 	ldw	r2,-25792(gp)
   25204:	1884b03a 	or	r2,r3,r2
   25208:	d0a6d015 	stw	r2,-25792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2520c:	d0a6d017 	ldw	r2,-25792(gp)
   25210:	100170fa 	wrctl	ienable,r2
   25214:	e0bffc17 	ldw	r2,-16(fp)
   25218:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2521c:	e0bffd17 	ldw	r2,-12(fp)
   25220:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25224:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25228:	0001883a 	nop
}
   2522c:	e037883a 	mov	sp,fp
   25230:	df000017 	ldw	fp,0(sp)
   25234:	dec00104 	addi	sp,sp,4
   25238:	f800283a 	ret

0002523c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2523c:	defff904 	addi	sp,sp,-28
   25240:	df000615 	stw	fp,24(sp)
   25244:	df000604 	addi	fp,sp,24
   25248:	e13ffe15 	stw	r4,-8(fp)
   2524c:	e17fff15 	stw	r5,-4(fp)
   25250:	e0bfff17 	ldw	r2,-4(fp)
   25254:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25258:	0005303a 	rdctl	r2,status
   2525c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25260:	e0fffb17 	ldw	r3,-20(fp)
   25264:	00bfff84 	movi	r2,-2
   25268:	1884703a 	and	r2,r3,r2
   2526c:	1001703a 	wrctl	status,r2
  
  return context;
   25270:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25274:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25278:	00c00044 	movi	r3,1
   2527c:	e0bffa17 	ldw	r2,-24(fp)
   25280:	1884983a 	sll	r2,r3,r2
   25284:	0084303a 	nor	r2,zero,r2
   25288:	1007883a 	mov	r3,r2
   2528c:	d0a6d017 	ldw	r2,-25792(gp)
   25290:	1884703a 	and	r2,r3,r2
   25294:	d0a6d015 	stw	r2,-25792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25298:	d0a6d017 	ldw	r2,-25792(gp)
   2529c:	100170fa 	wrctl	ienable,r2
   252a0:	e0bffc17 	ldw	r2,-16(fp)
   252a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   252a8:	e0bffd17 	ldw	r2,-12(fp)
   252ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   252b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   252b4:	0001883a 	nop
}
   252b8:	e037883a 	mov	sp,fp
   252bc:	df000017 	ldw	fp,0(sp)
   252c0:	dec00104 	addi	sp,sp,4
   252c4:	f800283a 	ret

000252c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   252c8:	defffc04 	addi	sp,sp,-16
   252cc:	df000315 	stw	fp,12(sp)
   252d0:	df000304 	addi	fp,sp,12
   252d4:	e13ffe15 	stw	r4,-8(fp)
   252d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   252dc:	000530fa 	rdctl	r2,ienable
   252e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   252e4:	00c00044 	movi	r3,1
   252e8:	e0bfff17 	ldw	r2,-4(fp)
   252ec:	1884983a 	sll	r2,r3,r2
   252f0:	1007883a 	mov	r3,r2
   252f4:	e0bffd17 	ldw	r2,-12(fp)
   252f8:	1884703a 	and	r2,r3,r2
   252fc:	1004c03a 	cmpne	r2,r2,zero
   25300:	10803fcc 	andi	r2,r2,255
}
   25304:	e037883a 	mov	sp,fp
   25308:	df000017 	ldw	fp,0(sp)
   2530c:	dec00104 	addi	sp,sp,4
   25310:	f800283a 	ret

00025314 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25314:	defff504 	addi	sp,sp,-44
   25318:	dfc00a15 	stw	ra,40(sp)
   2531c:	df000915 	stw	fp,36(sp)
   25320:	df000904 	addi	fp,sp,36
   25324:	e13ffc15 	stw	r4,-16(fp)
   25328:	e17ffd15 	stw	r5,-12(fp)
   2532c:	e1bffe15 	stw	r6,-8(fp)
   25330:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   25334:	00bffa84 	movi	r2,-22
   25338:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2533c:	e0bffd17 	ldw	r2,-12(fp)
   25340:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25344:	e0bff817 	ldw	r2,-32(fp)
   25348:	10800808 	cmpgei	r2,r2,32
   2534c:	1000271e 	bne	r2,zero,253ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25350:	0005303a 	rdctl	r2,status
   25354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25358:	e0fffb17 	ldw	r3,-20(fp)
   2535c:	00bfff84 	movi	r2,-2
   25360:	1884703a 	and	r2,r3,r2
   25364:	1001703a 	wrctl	status,r2
  
  return context;
   25368:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2536c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   25370:	008000f4 	movhi	r2,3
   25374:	10a5b704 	addi	r2,r2,-26916
   25378:	e0fff817 	ldw	r3,-32(fp)
   2537c:	180690fa 	slli	r3,r3,3
   25380:	10c5883a 	add	r2,r2,r3
   25384:	e0fffe17 	ldw	r3,-8(fp)
   25388:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2538c:	008000f4 	movhi	r2,3
   25390:	10a5b704 	addi	r2,r2,-26916
   25394:	e0fff817 	ldw	r3,-32(fp)
   25398:	180690fa 	slli	r3,r3,3
   2539c:	10c5883a 	add	r2,r2,r3
   253a0:	10800104 	addi	r2,r2,4
   253a4:	e0ffff17 	ldw	r3,-4(fp)
   253a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   253ac:	e0bffe17 	ldw	r2,-8(fp)
   253b0:	10000526 	beq	r2,zero,253c8 <alt_iic_isr_register+0xb4>
   253b4:	e0bff817 	ldw	r2,-32(fp)
   253b8:	100b883a 	mov	r5,r2
   253bc:	e13ffc17 	ldw	r4,-16(fp)
   253c0:	00251b40 	call	251b4 <alt_ic_irq_enable>
   253c4:	00000406 	br	253d8 <alt_iic_isr_register+0xc4>
   253c8:	e0bff817 	ldw	r2,-32(fp)
   253cc:	100b883a 	mov	r5,r2
   253d0:	e13ffc17 	ldw	r4,-16(fp)
   253d4:	002523c0 	call	2523c <alt_ic_irq_disable>
   253d8:	e0bff715 	stw	r2,-36(fp)
   253dc:	e0bffa17 	ldw	r2,-24(fp)
   253e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   253e4:	e0bff917 	ldw	r2,-28(fp)
   253e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   253ec:	e0bff717 	ldw	r2,-36(fp)
}
   253f0:	e037883a 	mov	sp,fp
   253f4:	dfc00117 	ldw	ra,4(sp)
   253f8:	df000017 	ldw	fp,0(sp)
   253fc:	dec00204 	addi	sp,sp,8
   25400:	f800283a 	ret

00025404 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25404:	defff804 	addi	sp,sp,-32
   25408:	dfc00715 	stw	ra,28(sp)
   2540c:	df000615 	stw	fp,24(sp)
   25410:	dc000515 	stw	r16,20(sp)
   25414:	df000604 	addi	fp,sp,24
   25418:	e13ffb15 	stw	r4,-20(fp)
   2541c:	e17ffc15 	stw	r5,-16(fp)
   25420:	e1bffd15 	stw	r6,-12(fp)
   25424:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   25428:	e1bffe17 	ldw	r6,-8(fp)
   2542c:	e17ffd17 	ldw	r5,-12(fp)
   25430:	e13ffc17 	ldw	r4,-16(fp)
   25434:	002568c0 	call	2568c <open>
   25438:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2543c:	e0bffa17 	ldw	r2,-24(fp)
   25440:	10002216 	blt	r2,zero,254cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   25444:	040000b4 	movhi	r16,2
   25448:	841a6104 	addi	r16,r16,27012
   2544c:	e0bffa17 	ldw	r2,-24(fp)
   25450:	01400304 	movi	r5,12
   25454:	1009883a 	mov	r4,r2
   25458:	002335c0 	call	2335c <__mulsi3>
   2545c:	8085883a 	add	r2,r16,r2
   25460:	10c00017 	ldw	r3,0(r2)
   25464:	e0bffb17 	ldw	r2,-20(fp)
   25468:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2546c:	040000b4 	movhi	r16,2
   25470:	841a6104 	addi	r16,r16,27012
   25474:	e0bffa17 	ldw	r2,-24(fp)
   25478:	01400304 	movi	r5,12
   2547c:	1009883a 	mov	r4,r2
   25480:	002335c0 	call	2335c <__mulsi3>
   25484:	8085883a 	add	r2,r16,r2
   25488:	10800104 	addi	r2,r2,4
   2548c:	10c00017 	ldw	r3,0(r2)
   25490:	e0bffb17 	ldw	r2,-20(fp)
   25494:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25498:	040000b4 	movhi	r16,2
   2549c:	841a6104 	addi	r16,r16,27012
   254a0:	e0bffa17 	ldw	r2,-24(fp)
   254a4:	01400304 	movi	r5,12
   254a8:	1009883a 	mov	r4,r2
   254ac:	002335c0 	call	2335c <__mulsi3>
   254b0:	8085883a 	add	r2,r16,r2
   254b4:	10800204 	addi	r2,r2,8
   254b8:	10c00017 	ldw	r3,0(r2)
   254bc:	e0bffb17 	ldw	r2,-20(fp)
   254c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   254c4:	e13ffa17 	ldw	r4,-24(fp)
   254c8:	0023aa80 	call	23aa8 <alt_release_fd>
  }
} 
   254cc:	0001883a 	nop
   254d0:	e6ffff04 	addi	sp,fp,-4
   254d4:	dfc00217 	ldw	ra,8(sp)
   254d8:	df000117 	ldw	fp,4(sp)
   254dc:	dc000017 	ldw	r16,0(sp)
   254e0:	dec00304 	addi	sp,sp,12
   254e4:	f800283a 	ret

000254e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   254e8:	defffb04 	addi	sp,sp,-20
   254ec:	dfc00415 	stw	ra,16(sp)
   254f0:	df000315 	stw	fp,12(sp)
   254f4:	df000304 	addi	fp,sp,12
   254f8:	e13ffd15 	stw	r4,-12(fp)
   254fc:	e17ffe15 	stw	r5,-8(fp)
   25500:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25504:	01c07fc4 	movi	r7,511
   25508:	01800044 	movi	r6,1
   2550c:	e17ffd17 	ldw	r5,-12(fp)
   25510:	010000b4 	movhi	r4,2
   25514:	211a6404 	addi	r4,r4,27024
   25518:	00254040 	call	25404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2551c:	01c07fc4 	movi	r7,511
   25520:	000d883a 	mov	r6,zero
   25524:	e17ffe17 	ldw	r5,-8(fp)
   25528:	010000b4 	movhi	r4,2
   2552c:	211a6104 	addi	r4,r4,27012
   25530:	00254040 	call	25404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25534:	01c07fc4 	movi	r7,511
   25538:	01800044 	movi	r6,1
   2553c:	e17fff17 	ldw	r5,-4(fp)
   25540:	010000b4 	movhi	r4,2
   25544:	211a6704 	addi	r4,r4,27036
   25548:	00254040 	call	25404 <alt_open_fd>
}  
   2554c:	0001883a 	nop
   25550:	e037883a 	mov	sp,fp
   25554:	dfc00117 	ldw	ra,4(sp)
   25558:	df000017 	ldw	fp,0(sp)
   2555c:	dec00204 	addi	sp,sp,8
   25560:	f800283a 	ret

00025564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25564:	defffe04 	addi	sp,sp,-8
   25568:	dfc00115 	stw	ra,4(sp)
   2556c:	df000015 	stw	fp,0(sp)
   25570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25574:	d0a00917 	ldw	r2,-32732(gp)
   25578:	10000326 	beq	r2,zero,25588 <alt_get_errno+0x24>
   2557c:	d0a00917 	ldw	r2,-32732(gp)
   25580:	103ee83a 	callr	r2
   25584:	00000106 	br	2558c <alt_get_errno+0x28>
   25588:	d0a6cc04 	addi	r2,gp,-25808
}
   2558c:	e037883a 	mov	sp,fp
   25590:	dfc00117 	ldw	ra,4(sp)
   25594:	df000017 	ldw	fp,0(sp)
   25598:	dec00204 	addi	sp,sp,8
   2559c:	f800283a 	ret

000255a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   255a0:	defffb04 	addi	sp,sp,-20
   255a4:	dfc00415 	stw	ra,16(sp)
   255a8:	df000315 	stw	fp,12(sp)
   255ac:	dc000215 	stw	r16,8(sp)
   255b0:	df000304 	addi	fp,sp,12
   255b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   255b8:	e0bffe17 	ldw	r2,-8(fp)
   255bc:	10800217 	ldw	r2,8(r2)
   255c0:	10d00034 	orhi	r3,r2,16384
   255c4:	e0bffe17 	ldw	r2,-8(fp)
   255c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   255cc:	e03ffd15 	stw	zero,-12(fp)
   255d0:	00002306 	br	25660 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   255d4:	040000b4 	movhi	r16,2
   255d8:	841a6104 	addi	r16,r16,27012
   255dc:	e0bffd17 	ldw	r2,-12(fp)
   255e0:	01400304 	movi	r5,12
   255e4:	1009883a 	mov	r4,r2
   255e8:	002335c0 	call	2335c <__mulsi3>
   255ec:	8085883a 	add	r2,r16,r2
   255f0:	10c00017 	ldw	r3,0(r2)
   255f4:	e0bffe17 	ldw	r2,-8(fp)
   255f8:	10800017 	ldw	r2,0(r2)
   255fc:	1880151e 	bne	r3,r2,25654 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25600:	040000b4 	movhi	r16,2
   25604:	841a6104 	addi	r16,r16,27012
   25608:	e0bffd17 	ldw	r2,-12(fp)
   2560c:	01400304 	movi	r5,12
   25610:	1009883a 	mov	r4,r2
   25614:	002335c0 	call	2335c <__mulsi3>
   25618:	8085883a 	add	r2,r16,r2
   2561c:	10800204 	addi	r2,r2,8
   25620:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25624:	10000b0e 	bge	r2,zero,25654 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   25628:	01400304 	movi	r5,12
   2562c:	e13ffd17 	ldw	r4,-12(fp)
   25630:	002335c0 	call	2335c <__mulsi3>
   25634:	1007883a 	mov	r3,r2
   25638:	008000b4 	movhi	r2,2
   2563c:	109a6104 	addi	r2,r2,27012
   25640:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25644:	e0bffe17 	ldw	r2,-8(fp)
   25648:	18800226 	beq	r3,r2,25654 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2564c:	00bffcc4 	movi	r2,-13
   25650:	00000806 	br	25674 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25654:	e0bffd17 	ldw	r2,-12(fp)
   25658:	10800044 	addi	r2,r2,1
   2565c:	e0bffd15 	stw	r2,-12(fp)
   25660:	d0a00817 	ldw	r2,-32736(gp)
   25664:	1007883a 	mov	r3,r2
   25668:	e0bffd17 	ldw	r2,-12(fp)
   2566c:	18bfd92e 	bgeu	r3,r2,255d4 <__alt_data_end+0xfffe55d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25670:	0005883a 	mov	r2,zero
}
   25674:	e6ffff04 	addi	sp,fp,-4
   25678:	dfc00217 	ldw	ra,8(sp)
   2567c:	df000117 	ldw	fp,4(sp)
   25680:	dc000017 	ldw	r16,0(sp)
   25684:	dec00304 	addi	sp,sp,12
   25688:	f800283a 	ret

0002568c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2568c:	defff604 	addi	sp,sp,-40
   25690:	dfc00915 	stw	ra,36(sp)
   25694:	df000815 	stw	fp,32(sp)
   25698:	df000804 	addi	fp,sp,32
   2569c:	e13ffd15 	stw	r4,-12(fp)
   256a0:	e17ffe15 	stw	r5,-8(fp)
   256a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   256a8:	00bfffc4 	movi	r2,-1
   256ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   256b0:	00bffb44 	movi	r2,-19
   256b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   256b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   256bc:	d1600604 	addi	r5,gp,-32744
   256c0:	e13ffd17 	ldw	r4,-12(fp)
   256c4:	00259b00 	call	259b0 <alt_find_dev>
   256c8:	e0bff815 	stw	r2,-32(fp)
   256cc:	e0bff817 	ldw	r2,-32(fp)
   256d0:	1000051e 	bne	r2,zero,256e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   256d4:	e13ffd17 	ldw	r4,-12(fp)
   256d8:	0025a400 	call	25a40 <alt_find_file>
   256dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   256e0:	00800044 	movi	r2,1
   256e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   256e8:	e0bff817 	ldw	r2,-32(fp)
   256ec:	10002b26 	beq	r2,zero,2579c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   256f0:	e13ff817 	ldw	r4,-32(fp)
   256f4:	0025b480 	call	25b48 <alt_get_fd>
   256f8:	e0bff915 	stw	r2,-28(fp)
   256fc:	e0bff917 	ldw	r2,-28(fp)
   25700:	1000030e 	bge	r2,zero,25710 <open+0x84>
    {
      status = index;
   25704:	e0bff917 	ldw	r2,-28(fp)
   25708:	e0bffa15 	stw	r2,-24(fp)
   2570c:	00002506 	br	257a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   25710:	01400304 	movi	r5,12
   25714:	e13ff917 	ldw	r4,-28(fp)
   25718:	002335c0 	call	2335c <__mulsi3>
   2571c:	1007883a 	mov	r3,r2
   25720:	008000b4 	movhi	r2,2
   25724:	109a6104 	addi	r2,r2,27012
   25728:	1885883a 	add	r2,r3,r2
   2572c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25730:	e0fffe17 	ldw	r3,-8(fp)
   25734:	00900034 	movhi	r2,16384
   25738:	10bfffc4 	addi	r2,r2,-1
   2573c:	1886703a 	and	r3,r3,r2
   25740:	e0bffc17 	ldw	r2,-16(fp)
   25744:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25748:	e0bffb17 	ldw	r2,-20(fp)
   2574c:	1000051e 	bne	r2,zero,25764 <open+0xd8>
   25750:	e13ffc17 	ldw	r4,-16(fp)
   25754:	00255a00 	call	255a0 <alt_file_locked>
   25758:	e0bffa15 	stw	r2,-24(fp)
   2575c:	e0bffa17 	ldw	r2,-24(fp)
   25760:	10001016 	blt	r2,zero,257a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25764:	e0bff817 	ldw	r2,-32(fp)
   25768:	10800317 	ldw	r2,12(r2)
   2576c:	10000826 	beq	r2,zero,25790 <open+0x104>
   25770:	e0bff817 	ldw	r2,-32(fp)
   25774:	10800317 	ldw	r2,12(r2)
   25778:	e1ffff17 	ldw	r7,-4(fp)
   2577c:	e1bffe17 	ldw	r6,-8(fp)
   25780:	e17ffd17 	ldw	r5,-12(fp)
   25784:	e13ffc17 	ldw	r4,-16(fp)
   25788:	103ee83a 	callr	r2
   2578c:	00000106 	br	25794 <open+0x108>
   25790:	0005883a 	mov	r2,zero
   25794:	e0bffa15 	stw	r2,-24(fp)
   25798:	00000206 	br	257a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2579c:	00bffb44 	movi	r2,-19
   257a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   257a4:	e0bffa17 	ldw	r2,-24(fp)
   257a8:	1000090e 	bge	r2,zero,257d0 <open+0x144>
  {
    alt_release_fd (index);  
   257ac:	e13ff917 	ldw	r4,-28(fp)
   257b0:	0023aa80 	call	23aa8 <alt_release_fd>
    ALT_ERRNO = -status;
   257b4:	00255640 	call	25564 <alt_get_errno>
   257b8:	1007883a 	mov	r3,r2
   257bc:	e0bffa17 	ldw	r2,-24(fp)
   257c0:	0085c83a 	sub	r2,zero,r2
   257c4:	18800015 	stw	r2,0(r3)
    return -1;
   257c8:	00bfffc4 	movi	r2,-1
   257cc:	00000106 	br	257d4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   257d0:	e0bff917 	ldw	r2,-28(fp)
}
   257d4:	e037883a 	mov	sp,fp
   257d8:	dfc00117 	ldw	ra,4(sp)
   257dc:	df000017 	ldw	fp,0(sp)
   257e0:	dec00204 	addi	sp,sp,8
   257e4:	f800283a 	ret

000257e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   257e8:	defffa04 	addi	sp,sp,-24
   257ec:	df000515 	stw	fp,20(sp)
   257f0:	df000504 	addi	fp,sp,20
   257f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   257f8:	0005303a 	rdctl	r2,status
   257fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25800:	e0fffc17 	ldw	r3,-16(fp)
   25804:	00bfff84 	movi	r2,-2
   25808:	1884703a 	and	r2,r3,r2
   2580c:	1001703a 	wrctl	status,r2
  
  return context;
   25810:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25814:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25818:	e0bfff17 	ldw	r2,-4(fp)
   2581c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25820:	e0bffd17 	ldw	r2,-12(fp)
   25824:	10800017 	ldw	r2,0(r2)
   25828:	e0fffd17 	ldw	r3,-12(fp)
   2582c:	18c00117 	ldw	r3,4(r3)
   25830:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25834:	e0bffd17 	ldw	r2,-12(fp)
   25838:	10800117 	ldw	r2,4(r2)
   2583c:	e0fffd17 	ldw	r3,-12(fp)
   25840:	18c00017 	ldw	r3,0(r3)
   25844:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25848:	e0bffd17 	ldw	r2,-12(fp)
   2584c:	e0fffd17 	ldw	r3,-12(fp)
   25850:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25854:	e0bffd17 	ldw	r2,-12(fp)
   25858:	e0fffd17 	ldw	r3,-12(fp)
   2585c:	10c00015 	stw	r3,0(r2)
   25860:	e0bffb17 	ldw	r2,-20(fp)
   25864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25868:	e0bffe17 	ldw	r2,-8(fp)
   2586c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   25870:	0001883a 	nop
   25874:	e037883a 	mov	sp,fp
   25878:	df000017 	ldw	fp,0(sp)
   2587c:	dec00104 	addi	sp,sp,4
   25880:	f800283a 	ret

00025884 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25884:	defffb04 	addi	sp,sp,-20
   25888:	dfc00415 	stw	ra,16(sp)
   2588c:	df000315 	stw	fp,12(sp)
   25890:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   25894:	d0a00c17 	ldw	r2,-32720(gp)
   25898:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2589c:	d0a6d217 	ldw	r2,-25784(gp)
   258a0:	10800044 	addi	r2,r2,1
   258a4:	d0a6d215 	stw	r2,-25784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   258a8:	00002e06 	br	25964 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   258ac:	e0bffd17 	ldw	r2,-12(fp)
   258b0:	10800017 	ldw	r2,0(r2)
   258b4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   258b8:	e0bffd17 	ldw	r2,-12(fp)
   258bc:	10800403 	ldbu	r2,16(r2)
   258c0:	10803fcc 	andi	r2,r2,255
   258c4:	10000426 	beq	r2,zero,258d8 <alt_tick+0x54>
   258c8:	d0a6d217 	ldw	r2,-25784(gp)
   258cc:	1000021e 	bne	r2,zero,258d8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   258d0:	e0bffd17 	ldw	r2,-12(fp)
   258d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   258d8:	e0bffd17 	ldw	r2,-12(fp)
   258dc:	10800217 	ldw	r2,8(r2)
   258e0:	d0e6d217 	ldw	r3,-25784(gp)
   258e4:	18801d36 	bltu	r3,r2,2595c <alt_tick+0xd8>
   258e8:	e0bffd17 	ldw	r2,-12(fp)
   258ec:	10800403 	ldbu	r2,16(r2)
   258f0:	10803fcc 	andi	r2,r2,255
   258f4:	1000191e 	bne	r2,zero,2595c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   258f8:	e0bffd17 	ldw	r2,-12(fp)
   258fc:	10800317 	ldw	r2,12(r2)
   25900:	e0fffd17 	ldw	r3,-12(fp)
   25904:	18c00517 	ldw	r3,20(r3)
   25908:	1809883a 	mov	r4,r3
   2590c:	103ee83a 	callr	r2
   25910:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25914:	e0bfff17 	ldw	r2,-4(fp)
   25918:	1000031e 	bne	r2,zero,25928 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2591c:	e13ffd17 	ldw	r4,-12(fp)
   25920:	00257e80 	call	257e8 <alt_alarm_stop>
   25924:	00000d06 	br	2595c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   25928:	e0bffd17 	ldw	r2,-12(fp)
   2592c:	10c00217 	ldw	r3,8(r2)
   25930:	e0bfff17 	ldw	r2,-4(fp)
   25934:	1887883a 	add	r3,r3,r2
   25938:	e0bffd17 	ldw	r2,-12(fp)
   2593c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   25940:	e0bffd17 	ldw	r2,-12(fp)
   25944:	10c00217 	ldw	r3,8(r2)
   25948:	d0a6d217 	ldw	r2,-25784(gp)
   2594c:	1880032e 	bgeu	r3,r2,2595c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   25950:	e0bffd17 	ldw	r2,-12(fp)
   25954:	00c00044 	movi	r3,1
   25958:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2595c:	e0bffe17 	ldw	r2,-8(fp)
   25960:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25964:	e0fffd17 	ldw	r3,-12(fp)
   25968:	d0a00c04 	addi	r2,gp,-32720
   2596c:	18bfcf1e 	bne	r3,r2,258ac <__alt_data_end+0xfffe58ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25970:	0001883a 	nop
}
   25974:	0001883a 	nop
   25978:	e037883a 	mov	sp,fp
   2597c:	dfc00117 	ldw	ra,4(sp)
   25980:	df000017 	ldw	fp,0(sp)
   25984:	dec00204 	addi	sp,sp,8
   25988:	f800283a 	ret

0002598c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2598c:	deffff04 	addi	sp,sp,-4
   25990:	df000015 	stw	fp,0(sp)
   25994:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25998:	000170fa 	wrctl	ienable,zero
}
   2599c:	0001883a 	nop
   259a0:	e037883a 	mov	sp,fp
   259a4:	df000017 	ldw	fp,0(sp)
   259a8:	dec00104 	addi	sp,sp,4
   259ac:	f800283a 	ret

000259b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   259b0:	defffa04 	addi	sp,sp,-24
   259b4:	dfc00515 	stw	ra,20(sp)
   259b8:	df000415 	stw	fp,16(sp)
   259bc:	df000404 	addi	fp,sp,16
   259c0:	e13ffe15 	stw	r4,-8(fp)
   259c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   259c8:	e0bfff17 	ldw	r2,-4(fp)
   259cc:	10800017 	ldw	r2,0(r2)
   259d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   259d4:	e13ffe17 	ldw	r4,-8(fp)
   259d8:	002064c0 	call	2064c <strlen>
   259dc:	10800044 	addi	r2,r2,1
   259e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   259e4:	00000d06 	br	25a1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   259e8:	e0bffc17 	ldw	r2,-16(fp)
   259ec:	10800217 	ldw	r2,8(r2)
   259f0:	e0fffd17 	ldw	r3,-12(fp)
   259f4:	180d883a 	mov	r6,r3
   259f8:	e17ffe17 	ldw	r5,-8(fp)
   259fc:	1009883a 	mov	r4,r2
   25a00:	0025cf40 	call	25cf4 <memcmp>
   25a04:	1000021e 	bne	r2,zero,25a10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25a08:	e0bffc17 	ldw	r2,-16(fp)
   25a0c:	00000706 	br	25a2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25a10:	e0bffc17 	ldw	r2,-16(fp)
   25a14:	10800017 	ldw	r2,0(r2)
   25a18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25a1c:	e0fffc17 	ldw	r3,-16(fp)
   25a20:	e0bfff17 	ldw	r2,-4(fp)
   25a24:	18bff01e 	bne	r3,r2,259e8 <__alt_data_end+0xfffe59e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   25a28:	0005883a 	mov	r2,zero
}
   25a2c:	e037883a 	mov	sp,fp
   25a30:	dfc00117 	ldw	ra,4(sp)
   25a34:	df000017 	ldw	fp,0(sp)
   25a38:	dec00204 	addi	sp,sp,8
   25a3c:	f800283a 	ret

00025a40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25a40:	defffb04 	addi	sp,sp,-20
   25a44:	dfc00415 	stw	ra,16(sp)
   25a48:	df000315 	stw	fp,12(sp)
   25a4c:	df000304 	addi	fp,sp,12
   25a50:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25a54:	d0a00417 	ldw	r2,-32752(gp)
   25a58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25a5c:	00003106 	br	25b24 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   25a60:	e0bffd17 	ldw	r2,-12(fp)
   25a64:	10800217 	ldw	r2,8(r2)
   25a68:	1009883a 	mov	r4,r2
   25a6c:	002064c0 	call	2064c <strlen>
   25a70:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25a74:	e0bffd17 	ldw	r2,-12(fp)
   25a78:	10c00217 	ldw	r3,8(r2)
   25a7c:	e0bffe17 	ldw	r2,-8(fp)
   25a80:	10bfffc4 	addi	r2,r2,-1
   25a84:	1885883a 	add	r2,r3,r2
   25a88:	10800003 	ldbu	r2,0(r2)
   25a8c:	10803fcc 	andi	r2,r2,255
   25a90:	1080201c 	xori	r2,r2,128
   25a94:	10bfe004 	addi	r2,r2,-128
   25a98:	10800bd8 	cmpnei	r2,r2,47
   25a9c:	1000031e 	bne	r2,zero,25aac <alt_find_file+0x6c>
    {
      len -= 1;
   25aa0:	e0bffe17 	ldw	r2,-8(fp)
   25aa4:	10bfffc4 	addi	r2,r2,-1
   25aa8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25aac:	e0bffe17 	ldw	r2,-8(fp)
   25ab0:	e0ffff17 	ldw	r3,-4(fp)
   25ab4:	1885883a 	add	r2,r3,r2
   25ab8:	10800003 	ldbu	r2,0(r2)
   25abc:	10803fcc 	andi	r2,r2,255
   25ac0:	1080201c 	xori	r2,r2,128
   25ac4:	10bfe004 	addi	r2,r2,-128
   25ac8:	10800be0 	cmpeqi	r2,r2,47
   25acc:	1000081e 	bne	r2,zero,25af0 <alt_find_file+0xb0>
   25ad0:	e0bffe17 	ldw	r2,-8(fp)
   25ad4:	e0ffff17 	ldw	r3,-4(fp)
   25ad8:	1885883a 	add	r2,r3,r2
   25adc:	10800003 	ldbu	r2,0(r2)
   25ae0:	10803fcc 	andi	r2,r2,255
   25ae4:	1080201c 	xori	r2,r2,128
   25ae8:	10bfe004 	addi	r2,r2,-128
   25aec:	10000a1e 	bne	r2,zero,25b18 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25af0:	e0bffd17 	ldw	r2,-12(fp)
   25af4:	10800217 	ldw	r2,8(r2)
   25af8:	e0fffe17 	ldw	r3,-8(fp)
   25afc:	180d883a 	mov	r6,r3
   25b00:	e17fff17 	ldw	r5,-4(fp)
   25b04:	1009883a 	mov	r4,r2
   25b08:	0025cf40 	call	25cf4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25b0c:	1000021e 	bne	r2,zero,25b18 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   25b10:	e0bffd17 	ldw	r2,-12(fp)
   25b14:	00000706 	br	25b34 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25b18:	e0bffd17 	ldw	r2,-12(fp)
   25b1c:	10800017 	ldw	r2,0(r2)
   25b20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25b24:	e0fffd17 	ldw	r3,-12(fp)
   25b28:	d0a00404 	addi	r2,gp,-32752
   25b2c:	18bfcc1e 	bne	r3,r2,25a60 <__alt_data_end+0xfffe5a60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25b30:	0005883a 	mov	r2,zero
}
   25b34:	e037883a 	mov	sp,fp
   25b38:	dfc00117 	ldw	ra,4(sp)
   25b3c:	df000017 	ldw	fp,0(sp)
   25b40:	dec00204 	addi	sp,sp,8
   25b44:	f800283a 	ret

00025b48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25b48:	defffa04 	addi	sp,sp,-24
   25b4c:	dfc00515 	stw	ra,20(sp)
   25b50:	df000415 	stw	fp,16(sp)
   25b54:	dc000315 	stw	r16,12(sp)
   25b58:	df000404 	addi	fp,sp,16
   25b5c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   25b60:	00bffa04 	movi	r2,-24
   25b64:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25b68:	e03ffc15 	stw	zero,-16(fp)
   25b6c:	00001d06 	br	25be4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   25b70:	040000b4 	movhi	r16,2
   25b74:	841a6104 	addi	r16,r16,27012
   25b78:	e0bffc17 	ldw	r2,-16(fp)
   25b7c:	01400304 	movi	r5,12
   25b80:	1009883a 	mov	r4,r2
   25b84:	002335c0 	call	2335c <__mulsi3>
   25b88:	8085883a 	add	r2,r16,r2
   25b8c:	10800017 	ldw	r2,0(r2)
   25b90:	1000111e 	bne	r2,zero,25bd8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   25b94:	040000b4 	movhi	r16,2
   25b98:	841a6104 	addi	r16,r16,27012
   25b9c:	e0bffc17 	ldw	r2,-16(fp)
   25ba0:	01400304 	movi	r5,12
   25ba4:	1009883a 	mov	r4,r2
   25ba8:	002335c0 	call	2335c <__mulsi3>
   25bac:	8085883a 	add	r2,r16,r2
   25bb0:	e0fffe17 	ldw	r3,-8(fp)
   25bb4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25bb8:	d0e00817 	ldw	r3,-32736(gp)
   25bbc:	e0bffc17 	ldw	r2,-16(fp)
   25bc0:	1880020e 	bge	r3,r2,25bcc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   25bc4:	e0bffc17 	ldw	r2,-16(fp)
   25bc8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   25bcc:	e0bffc17 	ldw	r2,-16(fp)
   25bd0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25bd4:	00000606 	br	25bf0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25bd8:	e0bffc17 	ldw	r2,-16(fp)
   25bdc:	10800044 	addi	r2,r2,1
   25be0:	e0bffc15 	stw	r2,-16(fp)
   25be4:	e0bffc17 	ldw	r2,-16(fp)
   25be8:	10800810 	cmplti	r2,r2,32
   25bec:	103fe01e 	bne	r2,zero,25b70 <__alt_data_end+0xfffe5b70>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25bf0:	e0bffd17 	ldw	r2,-12(fp)
}
   25bf4:	e6ffff04 	addi	sp,fp,-4
   25bf8:	dfc00217 	ldw	ra,8(sp)
   25bfc:	df000117 	ldw	fp,4(sp)
   25c00:	dc000017 	ldw	r16,0(sp)
   25c04:	dec00304 	addi	sp,sp,12
   25c08:	f800283a 	ret

00025c0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25c0c:	defffe04 	addi	sp,sp,-8
   25c10:	df000115 	stw	fp,4(sp)
   25c14:	df000104 	addi	fp,sp,4
   25c18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25c1c:	e0bfff17 	ldw	r2,-4(fp)
   25c20:	10bffe84 	addi	r2,r2,-6
   25c24:	10c00428 	cmpgeui	r3,r2,16
   25c28:	18001a1e 	bne	r3,zero,25c94 <alt_exception_cause_generated_bad_addr+0x88>
   25c2c:	100690ba 	slli	r3,r2,2
   25c30:	008000b4 	movhi	r2,2
   25c34:	10971104 	addi	r2,r2,23620
   25c38:	1885883a 	add	r2,r3,r2
   25c3c:	10800017 	ldw	r2,0(r2)
   25c40:	1000683a 	jmp	r2
   25c44:	00025c84 	movi	zero,2418
   25c48:	00025c84 	movi	zero,2418
   25c4c:	00025c94 	movui	zero,2418
   25c50:	00025c94 	movui	zero,2418
   25c54:	00025c94 	movui	zero,2418
   25c58:	00025c84 	movi	zero,2418
   25c5c:	00025c8c 	andi	zero,zero,2418
   25c60:	00025c94 	movui	zero,2418
   25c64:	00025c84 	movi	zero,2418
   25c68:	00025c84 	movi	zero,2418
   25c6c:	00025c94 	movui	zero,2418
   25c70:	00025c84 	movi	zero,2418
   25c74:	00025c8c 	andi	zero,zero,2418
   25c78:	00025c94 	movui	zero,2418
   25c7c:	00025c94 	movui	zero,2418
   25c80:	00025c84 	movi	zero,2418
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25c84:	00800044 	movi	r2,1
   25c88:	00000306 	br	25c98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25c8c:	0005883a 	mov	r2,zero
   25c90:	00000106 	br	25c98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   25c94:	0005883a 	mov	r2,zero
  }
}
   25c98:	e037883a 	mov	sp,fp
   25c9c:	df000017 	ldw	fp,0(sp)
   25ca0:	dec00104 	addi	sp,sp,4
   25ca4:	f800283a 	ret

00025ca8 <atexit>:
   25ca8:	200b883a 	mov	r5,r4
   25cac:	000f883a 	mov	r7,zero
   25cb0:	000d883a 	mov	r6,zero
   25cb4:	0009883a 	mov	r4,zero
   25cb8:	0025d701 	jmpi	25d70 <__register_exitproc>

00025cbc <exit>:
   25cbc:	defffe04 	addi	sp,sp,-8
   25cc0:	000b883a 	mov	r5,zero
   25cc4:	dc000015 	stw	r16,0(sp)
   25cc8:	dfc00115 	stw	ra,4(sp)
   25ccc:	2021883a 	mov	r16,r4
   25cd0:	0025e880 	call	25e88 <__call_exitprocs>
   25cd4:	008000b4 	movhi	r2,2
   25cd8:	109ed904 	addi	r2,r2,31588
   25cdc:	11000017 	ldw	r4,0(r2)
   25ce0:	20800f17 	ldw	r2,60(r4)
   25ce4:	10000126 	beq	r2,zero,25cec <exit+0x30>
   25ce8:	103ee83a 	callr	r2
   25cec:	8009883a 	mov	r4,r16
   25cf0:	00260080 	call	26008 <_exit>

00025cf4 <memcmp>:
   25cf4:	01c000c4 	movi	r7,3
   25cf8:	3980192e 	bgeu	r7,r6,25d60 <memcmp+0x6c>
   25cfc:	2144b03a 	or	r2,r4,r5
   25d00:	11c4703a 	and	r2,r2,r7
   25d04:	10000f26 	beq	r2,zero,25d44 <memcmp+0x50>
   25d08:	20800003 	ldbu	r2,0(r4)
   25d0c:	28c00003 	ldbu	r3,0(r5)
   25d10:	10c0151e 	bne	r2,r3,25d68 <memcmp+0x74>
   25d14:	31bfff84 	addi	r6,r6,-2
   25d18:	01ffffc4 	movi	r7,-1
   25d1c:	00000406 	br	25d30 <memcmp+0x3c>
   25d20:	20800003 	ldbu	r2,0(r4)
   25d24:	28c00003 	ldbu	r3,0(r5)
   25d28:	31bfffc4 	addi	r6,r6,-1
   25d2c:	10c00e1e 	bne	r2,r3,25d68 <memcmp+0x74>
   25d30:	21000044 	addi	r4,r4,1
   25d34:	29400044 	addi	r5,r5,1
   25d38:	31fff91e 	bne	r6,r7,25d20 <__alt_data_end+0xfffe5d20>
   25d3c:	0005883a 	mov	r2,zero
   25d40:	f800283a 	ret
   25d44:	20c00017 	ldw	r3,0(r4)
   25d48:	28800017 	ldw	r2,0(r5)
   25d4c:	18bfee1e 	bne	r3,r2,25d08 <__alt_data_end+0xfffe5d08>
   25d50:	31bfff04 	addi	r6,r6,-4
   25d54:	21000104 	addi	r4,r4,4
   25d58:	29400104 	addi	r5,r5,4
   25d5c:	39bff936 	bltu	r7,r6,25d44 <__alt_data_end+0xfffe5d44>
   25d60:	303fe91e 	bne	r6,zero,25d08 <__alt_data_end+0xfffe5d08>
   25d64:	003ff506 	br	25d3c <__alt_data_end+0xfffe5d3c>
   25d68:	10c5c83a 	sub	r2,r2,r3
   25d6c:	f800283a 	ret

00025d70 <__register_exitproc>:
   25d70:	defffa04 	addi	sp,sp,-24
   25d74:	dc000315 	stw	r16,12(sp)
   25d78:	040000b4 	movhi	r16,2
   25d7c:	841ed904 	addi	r16,r16,31588
   25d80:	80c00017 	ldw	r3,0(r16)
   25d84:	dc400415 	stw	r17,16(sp)
   25d88:	dfc00515 	stw	ra,20(sp)
   25d8c:	18805217 	ldw	r2,328(r3)
   25d90:	2023883a 	mov	r17,r4
   25d94:	10003726 	beq	r2,zero,25e74 <__register_exitproc+0x104>
   25d98:	10c00117 	ldw	r3,4(r2)
   25d9c:	010007c4 	movi	r4,31
   25da0:	20c00e16 	blt	r4,r3,25ddc <__register_exitproc+0x6c>
   25da4:	1a000044 	addi	r8,r3,1
   25da8:	8800221e 	bne	r17,zero,25e34 <__register_exitproc+0xc4>
   25dac:	18c00084 	addi	r3,r3,2
   25db0:	18c7883a 	add	r3,r3,r3
   25db4:	18c7883a 	add	r3,r3,r3
   25db8:	12000115 	stw	r8,4(r2)
   25dbc:	10c7883a 	add	r3,r2,r3
   25dc0:	19400015 	stw	r5,0(r3)
   25dc4:	0005883a 	mov	r2,zero
   25dc8:	dfc00517 	ldw	ra,20(sp)
   25dcc:	dc400417 	ldw	r17,16(sp)
   25dd0:	dc000317 	ldw	r16,12(sp)
   25dd4:	dec00604 	addi	sp,sp,24
   25dd8:	f800283a 	ret
   25ddc:	00800034 	movhi	r2,0
   25de0:	10800004 	addi	r2,r2,0
   25de4:	10002626 	beq	r2,zero,25e80 <__register_exitproc+0x110>
   25de8:	01006404 	movi	r4,400
   25dec:	d9400015 	stw	r5,0(sp)
   25df0:	d9800115 	stw	r6,4(sp)
   25df4:	d9c00215 	stw	r7,8(sp)
   25df8:	00000000 	call	0 <__alt_mem_sdram_controller>
   25dfc:	d9400017 	ldw	r5,0(sp)
   25e00:	d9800117 	ldw	r6,4(sp)
   25e04:	d9c00217 	ldw	r7,8(sp)
   25e08:	10001d26 	beq	r2,zero,25e80 <__register_exitproc+0x110>
   25e0c:	81000017 	ldw	r4,0(r16)
   25e10:	10000115 	stw	zero,4(r2)
   25e14:	02000044 	movi	r8,1
   25e18:	22405217 	ldw	r9,328(r4)
   25e1c:	0007883a 	mov	r3,zero
   25e20:	12400015 	stw	r9,0(r2)
   25e24:	20805215 	stw	r2,328(r4)
   25e28:	10006215 	stw	zero,392(r2)
   25e2c:	10006315 	stw	zero,396(r2)
   25e30:	883fde26 	beq	r17,zero,25dac <__alt_data_end+0xfffe5dac>
   25e34:	18c9883a 	add	r4,r3,r3
   25e38:	2109883a 	add	r4,r4,r4
   25e3c:	1109883a 	add	r4,r2,r4
   25e40:	21802215 	stw	r6,136(r4)
   25e44:	01800044 	movi	r6,1
   25e48:	12406217 	ldw	r9,392(r2)
   25e4c:	30cc983a 	sll	r6,r6,r3
   25e50:	4992b03a 	or	r9,r9,r6
   25e54:	12406215 	stw	r9,392(r2)
   25e58:	21c04215 	stw	r7,264(r4)
   25e5c:	01000084 	movi	r4,2
   25e60:	893fd21e 	bne	r17,r4,25dac <__alt_data_end+0xfffe5dac>
   25e64:	11006317 	ldw	r4,396(r2)
   25e68:	218cb03a 	or	r6,r4,r6
   25e6c:	11806315 	stw	r6,396(r2)
   25e70:	003fce06 	br	25dac <__alt_data_end+0xfffe5dac>
   25e74:	18805304 	addi	r2,r3,332
   25e78:	18805215 	stw	r2,328(r3)
   25e7c:	003fc606 	br	25d98 <__alt_data_end+0xfffe5d98>
   25e80:	00bfffc4 	movi	r2,-1
   25e84:	003fd006 	br	25dc8 <__alt_data_end+0xfffe5dc8>

00025e88 <__call_exitprocs>:
   25e88:	defff504 	addi	sp,sp,-44
   25e8c:	df000915 	stw	fp,36(sp)
   25e90:	dd400615 	stw	r21,24(sp)
   25e94:	dc800315 	stw	r18,12(sp)
   25e98:	dfc00a15 	stw	ra,40(sp)
   25e9c:	ddc00815 	stw	r23,32(sp)
   25ea0:	dd800715 	stw	r22,28(sp)
   25ea4:	dd000515 	stw	r20,20(sp)
   25ea8:	dcc00415 	stw	r19,16(sp)
   25eac:	dc400215 	stw	r17,8(sp)
   25eb0:	dc000115 	stw	r16,4(sp)
   25eb4:	d9000015 	stw	r4,0(sp)
   25eb8:	2839883a 	mov	fp,r5
   25ebc:	04800044 	movi	r18,1
   25ec0:	057fffc4 	movi	r21,-1
   25ec4:	008000b4 	movhi	r2,2
   25ec8:	109ed904 	addi	r2,r2,31588
   25ecc:	12000017 	ldw	r8,0(r2)
   25ed0:	45005217 	ldw	r20,328(r8)
   25ed4:	44c05204 	addi	r19,r8,328
   25ed8:	a0001c26 	beq	r20,zero,25f4c <__call_exitprocs+0xc4>
   25edc:	a0800117 	ldw	r2,4(r20)
   25ee0:	15ffffc4 	addi	r23,r2,-1
   25ee4:	b8000d16 	blt	r23,zero,25f1c <__call_exitprocs+0x94>
   25ee8:	14000044 	addi	r16,r2,1
   25eec:	8421883a 	add	r16,r16,r16
   25ef0:	8421883a 	add	r16,r16,r16
   25ef4:	84402004 	addi	r17,r16,128
   25ef8:	a463883a 	add	r17,r20,r17
   25efc:	a421883a 	add	r16,r20,r16
   25f00:	e0001e26 	beq	fp,zero,25f7c <__call_exitprocs+0xf4>
   25f04:	80804017 	ldw	r2,256(r16)
   25f08:	e0801c26 	beq	fp,r2,25f7c <__call_exitprocs+0xf4>
   25f0c:	bdffffc4 	addi	r23,r23,-1
   25f10:	843fff04 	addi	r16,r16,-4
   25f14:	8c7fff04 	addi	r17,r17,-4
   25f18:	bd7ff91e 	bne	r23,r21,25f00 <__alt_data_end+0xfffe5f00>
   25f1c:	00800034 	movhi	r2,0
   25f20:	10800004 	addi	r2,r2,0
   25f24:	10000926 	beq	r2,zero,25f4c <__call_exitprocs+0xc4>
   25f28:	a0800117 	ldw	r2,4(r20)
   25f2c:	1000301e 	bne	r2,zero,25ff0 <__call_exitprocs+0x168>
   25f30:	a0800017 	ldw	r2,0(r20)
   25f34:	10003226 	beq	r2,zero,26000 <__call_exitprocs+0x178>
   25f38:	a009883a 	mov	r4,r20
   25f3c:	98800015 	stw	r2,0(r19)
   25f40:	00000000 	call	0 <__alt_mem_sdram_controller>
   25f44:	9d000017 	ldw	r20,0(r19)
   25f48:	a03fe41e 	bne	r20,zero,25edc <__alt_data_end+0xfffe5edc>
   25f4c:	dfc00a17 	ldw	ra,40(sp)
   25f50:	df000917 	ldw	fp,36(sp)
   25f54:	ddc00817 	ldw	r23,32(sp)
   25f58:	dd800717 	ldw	r22,28(sp)
   25f5c:	dd400617 	ldw	r21,24(sp)
   25f60:	dd000517 	ldw	r20,20(sp)
   25f64:	dcc00417 	ldw	r19,16(sp)
   25f68:	dc800317 	ldw	r18,12(sp)
   25f6c:	dc400217 	ldw	r17,8(sp)
   25f70:	dc000117 	ldw	r16,4(sp)
   25f74:	dec00b04 	addi	sp,sp,44
   25f78:	f800283a 	ret
   25f7c:	a0800117 	ldw	r2,4(r20)
   25f80:	80c00017 	ldw	r3,0(r16)
   25f84:	10bfffc4 	addi	r2,r2,-1
   25f88:	15c01426 	beq	r2,r23,25fdc <__call_exitprocs+0x154>
   25f8c:	80000015 	stw	zero,0(r16)
   25f90:	183fde26 	beq	r3,zero,25f0c <__alt_data_end+0xfffe5f0c>
   25f94:	95c8983a 	sll	r4,r18,r23
   25f98:	a0806217 	ldw	r2,392(r20)
   25f9c:	a5800117 	ldw	r22,4(r20)
   25fa0:	2084703a 	and	r2,r4,r2
   25fa4:	10000b26 	beq	r2,zero,25fd4 <__call_exitprocs+0x14c>
   25fa8:	a0806317 	ldw	r2,396(r20)
   25fac:	2088703a 	and	r4,r4,r2
   25fb0:	20000c1e 	bne	r4,zero,25fe4 <__call_exitprocs+0x15c>
   25fb4:	89400017 	ldw	r5,0(r17)
   25fb8:	d9000017 	ldw	r4,0(sp)
   25fbc:	183ee83a 	callr	r3
   25fc0:	a0800117 	ldw	r2,4(r20)
   25fc4:	15bfbf1e 	bne	r2,r22,25ec4 <__alt_data_end+0xfffe5ec4>
   25fc8:	98800017 	ldw	r2,0(r19)
   25fcc:	153fcf26 	beq	r2,r20,25f0c <__alt_data_end+0xfffe5f0c>
   25fd0:	003fbc06 	br	25ec4 <__alt_data_end+0xfffe5ec4>
   25fd4:	183ee83a 	callr	r3
   25fd8:	003ff906 	br	25fc0 <__alt_data_end+0xfffe5fc0>
   25fdc:	a5c00115 	stw	r23,4(r20)
   25fe0:	003feb06 	br	25f90 <__alt_data_end+0xfffe5f90>
   25fe4:	89000017 	ldw	r4,0(r17)
   25fe8:	183ee83a 	callr	r3
   25fec:	003ff406 	br	25fc0 <__alt_data_end+0xfffe5fc0>
   25ff0:	a0800017 	ldw	r2,0(r20)
   25ff4:	a027883a 	mov	r19,r20
   25ff8:	1029883a 	mov	r20,r2
   25ffc:	003fb606 	br	25ed8 <__alt_data_end+0xfffe5ed8>
   26000:	0005883a 	mov	r2,zero
   26004:	003ffb06 	br	25ff4 <__alt_data_end+0xfffe5ff4>

00026008 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26008:	defffd04 	addi	sp,sp,-12
   2600c:	df000215 	stw	fp,8(sp)
   26010:	df000204 	addi	fp,sp,8
   26014:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26018:	0001883a 	nop
   2601c:	e0bfff17 	ldw	r2,-4(fp)
   26020:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26024:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26028:	10000226 	beq	r2,zero,26034 <_exit+0x2c>
    ALT_SIM_FAIL();
   2602c:	002af070 	cmpltui	zero,zero,43969
   26030:	00000106 	br	26038 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26034:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26038:	003fff06 	br	26038 <__alt_data_end+0xfffe6038>

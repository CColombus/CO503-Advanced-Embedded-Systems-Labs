
1c_r.elf:     file format elf32-littlenios2
1c_r.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000069dc memsz 0x000069dc flags r-x
    LOAD off    0x000079fc vaddr 0x000469fc paddr 0x000484f4 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x00009fec vaddr 0x00049fec paddr 0x00049fec align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006750  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  00046980  00046980  00007980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  000469fc  000484f4  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00049fec  00049fec  00009fec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  0004a14c  0004a14c  000094f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000094f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab8  00000000  00000000  00009518  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017630  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000646a  00000000  00000000  00021600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006ef4  00000000  00000000  00027a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001940  00000000  00000000  0002e960  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b3c  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b32  00000000  00000000  00032ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00037910  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  00037920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ab5a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0003ab5d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ab63  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ab64  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ab65  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003ab69  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003ab6d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  0003ab71  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  0003ab7d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  0003ab89  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0003ab95  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  0003ab9d  2**0
                  CONTENTS, READONLY
 29 .jdi          0001a8cc  00000000  00000000  0003abbc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001b57e3  00000000  00000000  00055488  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00046980 l    d  .rodata	00000000 .rodata
000469fc l    d  .rwdata	00000000 .rwdata
00049fec l    d  .bss	00000000 .bss
0004a14c l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1c_r_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
000484a8 l     O .rwdata	00000002 c2.2218
000484aa l     O .rwdata	00000002 c6.2221
000484ac l     O .rwdata	00000002 s2.2224
000484ae l     O .rwdata	00000002 c7.2222
000484b0 l     O .rwdata	00000002 c5.2220
000484b2 l     O .rwdata	00000002 c3.2219
000484b4 l     O .rwdata	00000002 c1.2217
000484b6 l     O .rwdata	00000002 s1.2223
000484b8 l     O .rwdata	00000002 s3.2225
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000418b8 l     F .text	00000008 __fp_unlock
000418cc l     F .text	0000019c __sinit.part.1
00041a68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00046e7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00043cd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043de4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043e10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043f04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043fec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000440d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000442b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000484e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00044528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00044664 l     F .text	00000034 alt_dev_reg
00047448 l     O .rwdata	00001060 jtag_uart_1c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044e64 l     F .text	0000020c altera_avalon_jtag_uart_irq
00045070 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000456a8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000458e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045d48 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045ea8 l     F .text	0000003c alt_get_errno
00045ee4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004a020 g     O .bss	00000004 alt_instruction_exception_handler
00043ac8 g     F .text	00000054 _isatty_r
000441f0 g     F .text	0000007c alt_main
000416f8 g     F .text	000000c0 _puts_r
0004a04c g     O .bss	00000100 alt_irq
00046a08 g     O .rwdata	0000000c q1c
000437f0 g     F .text	00000060 _lseek_r
000449c4 g     F .text	0000005c altera_avalon_fifo_write_almostfull
000484f4 g       *ABS*	00000000 __flash_rwdata_start
0004a14c g       *ABS*	00000000 __alt_heap_start
000431d8 g     F .text	0000005c __sseek
00041c18 g     F .text	00000010 __sinit
00041a70 g     F .text	00000078 __sfmoreglue
00046a5c g     O .rwdata	0000000c q5
00044290 g     F .text	00000024 __malloc_unlock
00042918 g     F .text	0000015c memmove
0004473c g     F .text	00000098 altera_avalon_fifo_init
00041c00 g     F .text	00000018 _cleanup
00044a7c g     F .text	00000058 altera_avalon_fifo_write_fifo
000462d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00044c18 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043a6c g     F .text	0000005c _fstat_r
0004a004 g     O .bss	00000004 errno
00043154 g     F .text	00000008 __seofread
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0004a00c g     O .bss	00000004 alt_argv
000504a8 g       *ABS*	00000000 _gp
00044908 g     F .text	00000060 altera_avalon_fifo_clear_event
000472c8 g     O .rwdata	00000180 alt_fd_list
000462f4 g     F .text	00000090 alt_find_dev
000427d0 g     F .text	00000148 memcpy
00040d08 g     F .text	0000003c RECV
000418c0 g     F .text	0000000c _cleanup_r
00045e2c g     F .text	0000007c alt_io_redirect
00046980 g       *ABS*	00000000 __DTOR_END__
000417b8 g     F .text	00000014 puts
00046550 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00046a38 g     O .rwdata	0000000c q2
00045268 g     F .text	0000021c altera_avalon_jtag_uart_read
00040ec4 g     F .text	00000014 malloc
00043c14 g     F .text	00000064 .hidden __udivsi3
00043f40 g     F .text	000000ac isatty
0004a000 g     O .bss	00000004 __malloc_top_pad
0004209c g     F .text	000004c8 __sfvwrite_r
000417cc g     F .text	00000054 _sbrk_r
00043a0c g     F .text	00000060 _read_r
000484dc g     O .rwdata	00000004 alt_max_fd
00043444 g     F .text	000000f0 _fclose_r
000437c0 g     F .text	00000030 fflush
00049ffc g     O .bss	00000004 __malloc_max_sbrked_mem
00044114 g     F .text	000000dc lseek
000484c4 g     O .rwdata	00000004 _global_impure_ptr
00042b9c g     F .text	00000564 _realloc_r
0004a14c g       *ABS*	00000000 __bss_end
00045c58 g     F .text	000000f0 alt_iic_isr_register
000461c8 g     F .text	00000108 alt_tick
00041c38 g     F .text	00000018 __fp_lock_all
00045c0c g     F .text	0000004c alt_ic_irq_enabled
0004612c g     F .text	0000009c alt_alarm_stop
0004a014 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
000472a0 g     O .rwdata	00000028 alt_dev_null
000458c8 g     F .text	00000020 alt_dcache_flush_all
00044968 g     F .text	0000005c altera_avalon_fifo_write_ienable
000484f4 g       *ABS*	00000000 __ram_rwdata_end
00044878 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000484d4 g     O .rwdata	00000008 alt_dev_list
00044564 g     F .text	00000100 write
000469fc g       *ABS*	00000000 __ram_rodata_end
00043e4c g     F .text	000000b8 fstat
00049ff4 g     O .bss	00000004 INIT_USAGE_DEQ
00043c78 g     F .text	00000058 .hidden __umodsi3
0004a14c g       *ABS*	00000000 end
00044da4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000448a4 g     F .text	0000003c altera_avalon_fifo_read_event
00046980 g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
00045720 g     F .text	0000007c alt_avalon_timer_sc_init
00045484 g     F .text	00000224 altera_avalon_jtag_uart_write
00041c28 g     F .text	00000004 __sfp_lock_acquire
00044b40 g     F .text	0000004c altera_avalon_fifo_read_fifo
000426ec g     F .text	000000e4 memchr
00041d8c g     F .text	00000310 _free_r
000467cc g     F .text	00000180 __call_exitprocs
000484bc g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
0004a018 g     O .bss	00000004 _alt_tick_rate
00040d8c g     F .text	0000008c enqueueINT32
0004a01c g     O .bss	00000004 _alt_nticks
000442f0 g     F .text	00000104 read
000446d0 g     F .text	0000006c alt_sys_init
000466b4 g     F .text	00000118 __register_exitproc
00046a14 g     O .rwdata	0000000c q1d
00046a44 g     O .rwdata	0000000c q3
00045110 g     F .text	00000068 altera_avalon_jtag_uart_close
00040e9c g     F .text	00000028 .hidden __mulsi3
000469fc g       *ABS*	00000000 __ram_rwdata_start
00046980 g       *ABS*	00000000 __ram_rodata_start
0004a024 g     O .bss	00000028 __malloc_current_mallinfo
00046a2c g     O .rwdata	0000000c q1
00044c40 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004648c g     F .text	000000c4 alt_get_fd
000433f0 g     F .text	00000054 _close_r
00046638 g     F .text	0000007c memcmp
00044d00 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a14c g       *ABS*	00000000 __alt_stack_base
00044d50 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0004329c g     F .text	00000154 __swsetup_r
000447d4 g     F .text	0000003c altera_avalon_fifo_read_status
00041ae8 g     F .text	00000118 __sfp
00046a74 g     O .rwdata	00000408 __malloc_av_
00041c34 g     F .text	00000004 __sinit_lock_release
00043100 g     F .text	00000054 __sread
00044bec g     F .text	0000002c altera_avalon_fifo_read_other_info
00046384 g     F .text	00000108 alt_find_file
00045924 g     F .text	000000a4 alt_dev_llist_insert
0004426c g     F .text	00000024 __malloc_lock
00044478 g     F .text	000000b0 sbrk
00043764 g     F .text	0000005c _fflush_r
00049fec g       *ABS*	00000000 __bss_start
00049fec g     O .bss	00000004 data
00042a74 g     F .text	00000128 memset
00040cdc g     F .text	0000002c main
0004a010 g     O .bss	00000004 alt_envp
00049ff8 g     O .bss	00000004 __malloc_max_total_mem
00044ca0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000448e0 g     F .text	00000028 altera_avalon_fifo_read_level
00043234 g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00043534 g     F .text	00000014 fclose
00040eec g     F .text	0000080c _malloc_r
000484e0 g     O .rwdata	00000004 alt_errno
000469fc g     O .rwdata	0000000c q1b
00042564 g     F .text	000000c4 _fwalk
00043b1c g     F .text	00000084 .hidden __divsi3
00041c68 g     F .text	00000124 _malloc_trim_r
00046980 g       *ABS*	00000000 __CTOR_END__
00046980 g       *ABS*	00000000 __flash_rodata_start
00046980 g       *ABS*	00000000 __DTOR_LIST__
0004026c g     F .text	00000a70 DCT
00044698 g     F .text	00000038 alt_irq_init
000443f4 g     F .text	00000084 alt_release_fd
000465ec g     F .text	00000014 atexit
0004323c g     F .text	00000060 _write_r
00046a68 g     O .rwdata	0000000c q6
00040d44 g     F .text	00000048 SEND
00049ff0 g     O .bss	00000004 INIT_USAGE_ENQ
000484c8 g     O .rwdata	00000004 _impure_ptr
0004a008 g     O .bss	00000004 alt_argc
00043548 g     F .text	0000021c __sflush_r
00045a28 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00041c50 g     F .text	00000018 __fp_unlock_all
00046a20 g     O .rwdata	0000000c q1e
000484cc g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044b8c g     F .text	00000060 altera_avalon_fifo_write_other_info
00045aa8 g     F .text	00000050 alt_ic_isr_register
000484f4 g       *ABS*	00000000 _edata
0004a14c g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00045178 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00045b80 g     F .text	0000008c alt_ic_irq_disable
0004315c g     F .text	0000007c __swrite
000484c0 g     O .rwdata	00000004 __malloc_trim_threshold
00046600 g     F .text	00000038 exit
00042628 g     F .text	000000c4 _fwalk_reent
00043ba0 g     F .text	00000074 .hidden __modsi3
00044810 g     F .text	0000003c altera_avalon_fifo_read_ienable
00060000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00041c2c g     F .text	00000004 __sfp_lock_release
0004694c g     F .text	00000034 _exit
0004579c g     F .text	0000012c alt_alarm_start
0004484c g     F .text	0000002c altera_avalon_fifo_read_almostfull
00043850 g     F .text	000001bc __smakebuf_r
00046a50 g     O .rwdata	0000000c q4
00041820 g     F .text	00000098 strlen
00045fd0 g     F .text	0000015c open
00044ad4 g     F .text	0000006c altera_avalon_read_fifo
00040e18 g     F .text	00000084 dequeueINT32
00045a88 g     F .text	00000020 alt_icache_flush_all
000484e8 g     O .rwdata	00000004 alt_priority_mask
00045af8 g     F .text	00000088 alt_ic_irq_enable
00044a20 g     F .text	0000005c altera_avalon_fifo_write_almostempty
000484ec g     O .rwdata	00000008 alt_alarm_list
000459c8 g     F .text	00000060 _do_ctors
00043d0c g     F .text	000000d8 close
00044054 g     F .text	00000084 alt_load
00040ed8 g     F .text	00000014 free
00041c30 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a81304 	addi	r2,r2,-24500
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a81304 	addi	r2,r2,-24500
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6de17 	ldw	r2,-25736(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6de17 	ldw	r2,-25736(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6812a14 	ori	gp,gp,1192
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a7fb14 	ori	r2,r2,40940

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e85314 	ori	r3,r3,41292

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00440540 	call	44054 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00441f00 	call	441f0 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffe0268>

0004026c <DCT>:
INT16 *data;

// TODO: Currently, this function is complete. But will have to change for hardware implementation.
/* DCT for One block(8x8) */
void DCT(void)
{
   4026c:	defff204 	addi	sp,sp,-56
   40270:	dfc00d15 	stw	ra,52(sp)
   40274:	df000c15 	stw	fp,48(sp)
   40278:	dc400b15 	stw	r17,44(sp)
   4027c:	dc000a15 	stw	r16,40(sp)
   40280:	df000c04 	addi	fp,sp,48
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40284:	e03ff40d 	sth	zero,-48(fp)
   40288:	00000906 	br	402b0 <DCT+0x44>
	{

		data[i] = (INT16)RECV();
   4028c:	d0e6d117 	ldw	r3,-25788(gp)
   40290:	e0bff40b 	ldhu	r2,-48(fp)
   40294:	1085883a 	add	r2,r2,r2
   40298:	18a1883a 	add	r16,r3,r2
   4029c:	0040d080 	call	40d08 <RECV>
   402a0:	8080000d 	sth	r2,0(r16)
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   402a4:	e0bff40b 	ldhu	r2,-48(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bff40d 	sth	r2,-48(fp)
   402b0:	e0bff40b 	ldhu	r2,-48(fp)
   402b4:	10801030 	cmpltui	r2,r2,64
   402b8:	103ff41e 	bne	r2,zero,4028c <__alt_data_end+0xfffe028c>
	{

		data[i] = (INT16)RECV();
	}

	for (i = 8; i > 0; i--)
   402bc:	00800204 	movi	r2,8
   402c0:	e0bff40d 	sth	r2,-48(fp)
   402c4:	00012d06 	br	4077c <DCT+0x510>
	{
		x8 = data[0] + data[7];
   402c8:	d0a6d117 	ldw	r2,-25788(gp)
   402cc:	1080000b 	ldhu	r2,0(r2)
   402d0:	10ffffcc 	andi	r3,r2,65535
   402d4:	18e0001c 	xori	r3,r3,32768
   402d8:	18e00004 	addi	r3,r3,-32768
   402dc:	d0a6d117 	ldw	r2,-25788(gp)
   402e0:	10800384 	addi	r2,r2,14
   402e4:	1080000b 	ldhu	r2,0(r2)
   402e8:	10bfffcc 	andi	r2,r2,65535
   402ec:	10a0001c 	xori	r2,r2,32768
   402f0:	10a00004 	addi	r2,r2,-32768
   402f4:	1885883a 	add	r2,r3,r2
   402f8:	e0bff515 	stw	r2,-44(fp)
		x0 = data[0] - data[7];
   402fc:	d0a6d117 	ldw	r2,-25788(gp)
   40300:	1080000b 	ldhu	r2,0(r2)
   40304:	10ffffcc 	andi	r3,r2,65535
   40308:	18e0001c 	xori	r3,r3,32768
   4030c:	18e00004 	addi	r3,r3,-32768
   40310:	d0a6d117 	ldw	r2,-25788(gp)
   40314:	10800384 	addi	r2,r2,14
   40318:	1080000b 	ldhu	r2,0(r2)
   4031c:	10bfffcc 	andi	r2,r2,65535
   40320:	10a0001c 	xori	r2,r2,32768
   40324:	10a00004 	addi	r2,r2,-32768
   40328:	1885c83a 	sub	r2,r3,r2
   4032c:	e0bff615 	stw	r2,-40(fp)

		x7 = data[1] + data[6];
   40330:	d0a6d117 	ldw	r2,-25788(gp)
   40334:	10800084 	addi	r2,r2,2
   40338:	1080000b 	ldhu	r2,0(r2)
   4033c:	10ffffcc 	andi	r3,r2,65535
   40340:	18e0001c 	xori	r3,r3,32768
   40344:	18e00004 	addi	r3,r3,-32768
   40348:	d0a6d117 	ldw	r2,-25788(gp)
   4034c:	10800304 	addi	r2,r2,12
   40350:	1080000b 	ldhu	r2,0(r2)
   40354:	10bfffcc 	andi	r2,r2,65535
   40358:	10a0001c 	xori	r2,r2,32768
   4035c:	10a00004 	addi	r2,r2,-32768
   40360:	1885883a 	add	r2,r3,r2
   40364:	e0bff715 	stw	r2,-36(fp)
		x1 = data[1] - data[6];
   40368:	d0a6d117 	ldw	r2,-25788(gp)
   4036c:	10800084 	addi	r2,r2,2
   40370:	1080000b 	ldhu	r2,0(r2)
   40374:	10ffffcc 	andi	r3,r2,65535
   40378:	18e0001c 	xori	r3,r3,32768
   4037c:	18e00004 	addi	r3,r3,-32768
   40380:	d0a6d117 	ldw	r2,-25788(gp)
   40384:	10800304 	addi	r2,r2,12
   40388:	1080000b 	ldhu	r2,0(r2)
   4038c:	10bfffcc 	andi	r2,r2,65535
   40390:	10a0001c 	xori	r2,r2,32768
   40394:	10a00004 	addi	r2,r2,-32768
   40398:	1885c83a 	sub	r2,r3,r2
   4039c:	e0bff815 	stw	r2,-32(fp)

		x6 = data[2] + data[5];
   403a0:	d0a6d117 	ldw	r2,-25788(gp)
   403a4:	10800104 	addi	r2,r2,4
   403a8:	1080000b 	ldhu	r2,0(r2)
   403ac:	10ffffcc 	andi	r3,r2,65535
   403b0:	18e0001c 	xori	r3,r3,32768
   403b4:	18e00004 	addi	r3,r3,-32768
   403b8:	d0a6d117 	ldw	r2,-25788(gp)
   403bc:	10800284 	addi	r2,r2,10
   403c0:	1080000b 	ldhu	r2,0(r2)
   403c4:	10bfffcc 	andi	r2,r2,65535
   403c8:	10a0001c 	xori	r2,r2,32768
   403cc:	10a00004 	addi	r2,r2,-32768
   403d0:	1885883a 	add	r2,r3,r2
   403d4:	e0bff915 	stw	r2,-28(fp)
		x2 = data[2] - data[5];
   403d8:	d0a6d117 	ldw	r2,-25788(gp)
   403dc:	10800104 	addi	r2,r2,4
   403e0:	1080000b 	ldhu	r2,0(r2)
   403e4:	10ffffcc 	andi	r3,r2,65535
   403e8:	18e0001c 	xori	r3,r3,32768
   403ec:	18e00004 	addi	r3,r3,-32768
   403f0:	d0a6d117 	ldw	r2,-25788(gp)
   403f4:	10800284 	addi	r2,r2,10
   403f8:	1080000b 	ldhu	r2,0(r2)
   403fc:	10bfffcc 	andi	r2,r2,65535
   40400:	10a0001c 	xori	r2,r2,32768
   40404:	10a00004 	addi	r2,r2,-32768
   40408:	1885c83a 	sub	r2,r3,r2
   4040c:	e0bffa15 	stw	r2,-24(fp)

		x5 = data[3] + data[4];
   40410:	d0a6d117 	ldw	r2,-25788(gp)
   40414:	10800184 	addi	r2,r2,6
   40418:	1080000b 	ldhu	r2,0(r2)
   4041c:	10ffffcc 	andi	r3,r2,65535
   40420:	18e0001c 	xori	r3,r3,32768
   40424:	18e00004 	addi	r3,r3,-32768
   40428:	d0a6d117 	ldw	r2,-25788(gp)
   4042c:	10800204 	addi	r2,r2,8
   40430:	1080000b 	ldhu	r2,0(r2)
   40434:	10bfffcc 	andi	r2,r2,65535
   40438:	10a0001c 	xori	r2,r2,32768
   4043c:	10a00004 	addi	r2,r2,-32768
   40440:	1885883a 	add	r2,r3,r2
   40444:	e0bffb15 	stw	r2,-20(fp)
		x3 = data[3] - data[4];
   40448:	d0a6d117 	ldw	r2,-25788(gp)
   4044c:	10800184 	addi	r2,r2,6
   40450:	1080000b 	ldhu	r2,0(r2)
   40454:	10ffffcc 	andi	r3,r2,65535
   40458:	18e0001c 	xori	r3,r3,32768
   4045c:	18e00004 	addi	r3,r3,-32768
   40460:	d0a6d117 	ldw	r2,-25788(gp)
   40464:	10800204 	addi	r2,r2,8
   40468:	1080000b 	ldhu	r2,0(r2)
   4046c:	10bfffcc 	andi	r2,r2,65535
   40470:	10a0001c 	xori	r2,r2,32768
   40474:	10a00004 	addi	r2,r2,-32768
   40478:	1885c83a 	sub	r2,r3,r2
   4047c:	e0bffc15 	stw	r2,-16(fp)

		x4 = x8 + x5;
   40480:	e0fff517 	ldw	r3,-44(fp)
   40484:	e0bffb17 	ldw	r2,-20(fp)
   40488:	1885883a 	add	r2,r3,r2
   4048c:	e0bffd15 	stw	r2,-12(fp)
		x8 -= x5;
   40490:	e0fff517 	ldw	r3,-44(fp)
   40494:	e0bffb17 	ldw	r2,-20(fp)
   40498:	1885c83a 	sub	r2,r3,r2
   4049c:	e0bff515 	stw	r2,-44(fp)

		x5 = x7 + x6;
   404a0:	e0fff717 	ldw	r3,-36(fp)
   404a4:	e0bff917 	ldw	r2,-28(fp)
   404a8:	1885883a 	add	r2,r3,r2
   404ac:	e0bffb15 	stw	r2,-20(fp)
		x7 -= x6;
   404b0:	e0fff717 	ldw	r3,-36(fp)
   404b4:	e0bff917 	ldw	r2,-28(fp)
   404b8:	1885c83a 	sub	r2,r3,r2
   404bc:	e0bff715 	stw	r2,-36(fp)

		data[0] = (INT16)(x4 + x5);
   404c0:	d0a6d117 	ldw	r2,-25788(gp)
   404c4:	e0fffd17 	ldw	r3,-12(fp)
   404c8:	1809883a 	mov	r4,r3
   404cc:	e0fffb17 	ldw	r3,-20(fp)
   404d0:	20c7883a 	add	r3,r4,r3
   404d4:	10c0000d 	sth	r3,0(r2)
		data[4] = (INT16)(x4 - x5);
   404d8:	d0a6d117 	ldw	r2,-25788(gp)
   404dc:	10800204 	addi	r2,r2,8
   404e0:	e0fffd17 	ldw	r3,-12(fp)
   404e4:	1809883a 	mov	r4,r3
   404e8:	e0fffb17 	ldw	r3,-20(fp)
   404ec:	20c7c83a 	sub	r3,r4,r3
   404f0:	10c0000d 	sth	r3,0(r2)

		data[2] = (INT16)((x8 * c2 + x7 * c6) >> s2);
   404f4:	d0a6d117 	ldw	r2,-25788(gp)
   404f8:	14000104 	addi	r16,r2,4
   404fc:	d0a0000b 	ldhu	r2,-32768(gp)
   40500:	10bfffcc 	andi	r2,r2,65535
   40504:	e17ff517 	ldw	r5,-44(fp)
   40508:	1009883a 	mov	r4,r2
   4050c:	0040e9c0 	call	40e9c <__mulsi3>
   40510:	1023883a 	mov	r17,r2
   40514:	d0a0008b 	ldhu	r2,-32766(gp)
   40518:	10bfffcc 	andi	r2,r2,65535
   4051c:	e17ff717 	ldw	r5,-36(fp)
   40520:	1009883a 	mov	r4,r2
   40524:	0040e9c0 	call	40e9c <__mulsi3>
   40528:	8887883a 	add	r3,r17,r2
   4052c:	d0a0010b 	ldhu	r2,-32764(gp)
   40530:	10bfffcc 	andi	r2,r2,65535
   40534:	1885d83a 	sra	r2,r3,r2
   40538:	8080000d 	sth	r2,0(r16)
		data[6] = (INT16)((x8 * c6 - x7 * c2) >> s2);
   4053c:	d0a6d117 	ldw	r2,-25788(gp)
   40540:	14000304 	addi	r16,r2,12
   40544:	d0a0008b 	ldhu	r2,-32766(gp)
   40548:	10bfffcc 	andi	r2,r2,65535
   4054c:	e17ff517 	ldw	r5,-44(fp)
   40550:	1009883a 	mov	r4,r2
   40554:	0040e9c0 	call	40e9c <__mulsi3>
   40558:	1023883a 	mov	r17,r2
   4055c:	d0a0000b 	ldhu	r2,-32768(gp)
   40560:	10bfffcc 	andi	r2,r2,65535
   40564:	e17ff717 	ldw	r5,-36(fp)
   40568:	1009883a 	mov	r4,r2
   4056c:	0040e9c0 	call	40e9c <__mulsi3>
   40570:	8887c83a 	sub	r3,r17,r2
   40574:	d0a0010b 	ldhu	r2,-32764(gp)
   40578:	10bfffcc 	andi	r2,r2,65535
   4057c:	1885d83a 	sra	r2,r3,r2
   40580:	8080000d 	sth	r2,0(r16)

		data[7] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s2);
   40584:	d0a6d117 	ldw	r2,-25788(gp)
   40588:	14000384 	addi	r16,r2,14
   4058c:	d0a0018b 	ldhu	r2,-32762(gp)
   40590:	10bfffcc 	andi	r2,r2,65535
   40594:	e17ff617 	ldw	r5,-40(fp)
   40598:	1009883a 	mov	r4,r2
   4059c:	0040e9c0 	call	40e9c <__mulsi3>
   405a0:	1023883a 	mov	r17,r2
   405a4:	d0a0020b 	ldhu	r2,-32760(gp)
   405a8:	10bfffcc 	andi	r2,r2,65535
   405ac:	e17ff817 	ldw	r5,-32(fp)
   405b0:	1009883a 	mov	r4,r2
   405b4:	0040e9c0 	call	40e9c <__mulsi3>
   405b8:	88a3c83a 	sub	r17,r17,r2
   405bc:	d0a0028b 	ldhu	r2,-32758(gp)
   405c0:	10bfffcc 	andi	r2,r2,65535
   405c4:	e17ffa17 	ldw	r5,-24(fp)
   405c8:	1009883a 	mov	r4,r2
   405cc:	0040e9c0 	call	40e9c <__mulsi3>
   405d0:	88a3883a 	add	r17,r17,r2
   405d4:	d0a0030b 	ldhu	r2,-32756(gp)
   405d8:	10bfffcc 	andi	r2,r2,65535
   405dc:	e17ffc17 	ldw	r5,-16(fp)
   405e0:	1009883a 	mov	r4,r2
   405e4:	0040e9c0 	call	40e9c <__mulsi3>
   405e8:	8887c83a 	sub	r3,r17,r2
   405ec:	d0a0010b 	ldhu	r2,-32764(gp)
   405f0:	10bfffcc 	andi	r2,r2,65535
   405f4:	1885d83a 	sra	r2,r3,r2
   405f8:	8080000d 	sth	r2,0(r16)
		data[5] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s2);
   405fc:	d0a6d117 	ldw	r2,-25788(gp)
   40600:	14000284 	addi	r16,r2,10
   40604:	d0a0020b 	ldhu	r2,-32760(gp)
   40608:	10bfffcc 	andi	r2,r2,65535
   4060c:	e17ff617 	ldw	r5,-40(fp)
   40610:	1009883a 	mov	r4,r2
   40614:	0040e9c0 	call	40e9c <__mulsi3>
   40618:	1023883a 	mov	r17,r2
   4061c:	d0a0030b 	ldhu	r2,-32756(gp)
   40620:	10bfffcc 	andi	r2,r2,65535
   40624:	e17ff817 	ldw	r5,-32(fp)
   40628:	1009883a 	mov	r4,r2
   4062c:	0040e9c0 	call	40e9c <__mulsi3>
   40630:	88a3c83a 	sub	r17,r17,r2
   40634:	d0a0018b 	ldhu	r2,-32762(gp)
   40638:	10bfffcc 	andi	r2,r2,65535
   4063c:	e17ffa17 	ldw	r5,-24(fp)
   40640:	1009883a 	mov	r4,r2
   40644:	0040e9c0 	call	40e9c <__mulsi3>
   40648:	88a3883a 	add	r17,r17,r2
   4064c:	d0a0028b 	ldhu	r2,-32758(gp)
   40650:	10bfffcc 	andi	r2,r2,65535
   40654:	e17ffc17 	ldw	r5,-16(fp)
   40658:	1009883a 	mov	r4,r2
   4065c:	0040e9c0 	call	40e9c <__mulsi3>
   40660:	8887883a 	add	r3,r17,r2
   40664:	d0a0010b 	ldhu	r2,-32764(gp)
   40668:	10bfffcc 	andi	r2,r2,65535
   4066c:	1885d83a 	sra	r2,r3,r2
   40670:	8080000d 	sth	r2,0(r16)
		data[3] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s2);
   40674:	d0a6d117 	ldw	r2,-25788(gp)
   40678:	14000184 	addi	r16,r2,6
   4067c:	d0a0028b 	ldhu	r2,-32758(gp)
   40680:	10bfffcc 	andi	r2,r2,65535
   40684:	e17ff617 	ldw	r5,-40(fp)
   40688:	1009883a 	mov	r4,r2
   4068c:	0040e9c0 	call	40e9c <__mulsi3>
   40690:	1023883a 	mov	r17,r2
   40694:	d0a0018b 	ldhu	r2,-32762(gp)
   40698:	10bfffcc 	andi	r2,r2,65535
   4069c:	e17ff817 	ldw	r5,-32(fp)
   406a0:	1009883a 	mov	r4,r2
   406a4:	0040e9c0 	call	40e9c <__mulsi3>
   406a8:	88a3c83a 	sub	r17,r17,r2
   406ac:	d0a0030b 	ldhu	r2,-32756(gp)
   406b0:	10bfffcc 	andi	r2,r2,65535
   406b4:	e17ffa17 	ldw	r5,-24(fp)
   406b8:	1009883a 	mov	r4,r2
   406bc:	0040e9c0 	call	40e9c <__mulsi3>
   406c0:	88a3c83a 	sub	r17,r17,r2
   406c4:	d0a0020b 	ldhu	r2,-32760(gp)
   406c8:	10bfffcc 	andi	r2,r2,65535
   406cc:	e17ffc17 	ldw	r5,-16(fp)
   406d0:	1009883a 	mov	r4,r2
   406d4:	0040e9c0 	call	40e9c <__mulsi3>
   406d8:	8887c83a 	sub	r3,r17,r2
   406dc:	d0a0010b 	ldhu	r2,-32764(gp)
   406e0:	10bfffcc 	andi	r2,r2,65535
   406e4:	1885d83a 	sra	r2,r3,r2
   406e8:	8080000d 	sth	r2,0(r16)
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);
   406ec:	d0a6d117 	ldw	r2,-25788(gp)
   406f0:	14000084 	addi	r16,r2,2
   406f4:	d0a0030b 	ldhu	r2,-32756(gp)
   406f8:	10bfffcc 	andi	r2,r2,65535
   406fc:	e17ff617 	ldw	r5,-40(fp)
   40700:	1009883a 	mov	r4,r2
   40704:	0040e9c0 	call	40e9c <__mulsi3>
   40708:	1023883a 	mov	r17,r2
   4070c:	d0a0028b 	ldhu	r2,-32758(gp)
   40710:	10bfffcc 	andi	r2,r2,65535
   40714:	e17ff817 	ldw	r5,-32(fp)
   40718:	1009883a 	mov	r4,r2
   4071c:	0040e9c0 	call	40e9c <__mulsi3>
   40720:	88a3883a 	add	r17,r17,r2
   40724:	d0a0020b 	ldhu	r2,-32760(gp)
   40728:	10bfffcc 	andi	r2,r2,65535
   4072c:	e17ffa17 	ldw	r5,-24(fp)
   40730:	1009883a 	mov	r4,r2
   40734:	0040e9c0 	call	40e9c <__mulsi3>
   40738:	88a3883a 	add	r17,r17,r2
   4073c:	d0a0018b 	ldhu	r2,-32762(gp)
   40740:	10bfffcc 	andi	r2,r2,65535
   40744:	e17ffc17 	ldw	r5,-16(fp)
   40748:	1009883a 	mov	r4,r2
   4074c:	0040e9c0 	call	40e9c <__mulsi3>
   40750:	8887883a 	add	r3,r17,r2
   40754:	d0a0010b 	ldhu	r2,-32764(gp)
   40758:	10bfffcc 	andi	r2,r2,65535
   4075c:	1885d83a 	sra	r2,r3,r2
   40760:	8080000d 	sth	r2,0(r16)

		data += 8;
   40764:	d0a6d117 	ldw	r2,-25788(gp)
   40768:	10800404 	addi	r2,r2,16
   4076c:	d0a6d115 	stw	r2,-25788(gp)
	{

		data[i] = (INT16)RECV();
	}

	for (i = 8; i > 0; i--)
   40770:	e0bff40b 	ldhu	r2,-48(fp)
   40774:	10bfffc4 	addi	r2,r2,-1
   40778:	e0bff40d 	sth	r2,-48(fp)
   4077c:	e0bff40b 	ldhu	r2,-48(fp)
   40780:	103ed11e 	bne	r2,zero,402c8 <__alt_data_end+0xfffe02c8>
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);

		data += 8;
	}

	data -= 64;
   40784:	d0a6d117 	ldw	r2,-25788(gp)
   40788:	10bfe004 	addi	r2,r2,-128
   4078c:	d0a6d115 	stw	r2,-25788(gp)

	for (i = 8; i > 0; i--)
   40790:	00800204 	movi	r2,8
   40794:	e0bff40d 	sth	r2,-48(fp)
   40798:	00013106 	br	40c60 <DCT+0x9f4>
	{
		x8 = data[0] + data[56];
   4079c:	d0a6d117 	ldw	r2,-25788(gp)
   407a0:	1080000b 	ldhu	r2,0(r2)
   407a4:	10ffffcc 	andi	r3,r2,65535
   407a8:	18e0001c 	xori	r3,r3,32768
   407ac:	18e00004 	addi	r3,r3,-32768
   407b0:	d0a6d117 	ldw	r2,-25788(gp)
   407b4:	10801c04 	addi	r2,r2,112
   407b8:	1080000b 	ldhu	r2,0(r2)
   407bc:	10bfffcc 	andi	r2,r2,65535
   407c0:	10a0001c 	xori	r2,r2,32768
   407c4:	10a00004 	addi	r2,r2,-32768
   407c8:	1885883a 	add	r2,r3,r2
   407cc:	e0bff515 	stw	r2,-44(fp)
		x0 = data[0] - data[56];
   407d0:	d0a6d117 	ldw	r2,-25788(gp)
   407d4:	1080000b 	ldhu	r2,0(r2)
   407d8:	10ffffcc 	andi	r3,r2,65535
   407dc:	18e0001c 	xori	r3,r3,32768
   407e0:	18e00004 	addi	r3,r3,-32768
   407e4:	d0a6d117 	ldw	r2,-25788(gp)
   407e8:	10801c04 	addi	r2,r2,112
   407ec:	1080000b 	ldhu	r2,0(r2)
   407f0:	10bfffcc 	andi	r2,r2,65535
   407f4:	10a0001c 	xori	r2,r2,32768
   407f8:	10a00004 	addi	r2,r2,-32768
   407fc:	1885c83a 	sub	r2,r3,r2
   40800:	e0bff615 	stw	r2,-40(fp)

		x7 = data[8] + data[48];
   40804:	d0a6d117 	ldw	r2,-25788(gp)
   40808:	10800404 	addi	r2,r2,16
   4080c:	1080000b 	ldhu	r2,0(r2)
   40810:	10ffffcc 	andi	r3,r2,65535
   40814:	18e0001c 	xori	r3,r3,32768
   40818:	18e00004 	addi	r3,r3,-32768
   4081c:	d0a6d117 	ldw	r2,-25788(gp)
   40820:	10801804 	addi	r2,r2,96
   40824:	1080000b 	ldhu	r2,0(r2)
   40828:	10bfffcc 	andi	r2,r2,65535
   4082c:	10a0001c 	xori	r2,r2,32768
   40830:	10a00004 	addi	r2,r2,-32768
   40834:	1885883a 	add	r2,r3,r2
   40838:	e0bff715 	stw	r2,-36(fp)
		x1 = data[8] - data[48];
   4083c:	d0a6d117 	ldw	r2,-25788(gp)
   40840:	10800404 	addi	r2,r2,16
   40844:	1080000b 	ldhu	r2,0(r2)
   40848:	10ffffcc 	andi	r3,r2,65535
   4084c:	18e0001c 	xori	r3,r3,32768
   40850:	18e00004 	addi	r3,r3,-32768
   40854:	d0a6d117 	ldw	r2,-25788(gp)
   40858:	10801804 	addi	r2,r2,96
   4085c:	1080000b 	ldhu	r2,0(r2)
   40860:	10bfffcc 	andi	r2,r2,65535
   40864:	10a0001c 	xori	r2,r2,32768
   40868:	10a00004 	addi	r2,r2,-32768
   4086c:	1885c83a 	sub	r2,r3,r2
   40870:	e0bff815 	stw	r2,-32(fp)

		x6 = data[16] + data[40];
   40874:	d0a6d117 	ldw	r2,-25788(gp)
   40878:	10800804 	addi	r2,r2,32
   4087c:	1080000b 	ldhu	r2,0(r2)
   40880:	10ffffcc 	andi	r3,r2,65535
   40884:	18e0001c 	xori	r3,r3,32768
   40888:	18e00004 	addi	r3,r3,-32768
   4088c:	d0a6d117 	ldw	r2,-25788(gp)
   40890:	10801404 	addi	r2,r2,80
   40894:	1080000b 	ldhu	r2,0(r2)
   40898:	10bfffcc 	andi	r2,r2,65535
   4089c:	10a0001c 	xori	r2,r2,32768
   408a0:	10a00004 	addi	r2,r2,-32768
   408a4:	1885883a 	add	r2,r3,r2
   408a8:	e0bff915 	stw	r2,-28(fp)
		x2 = data[16] - data[40];
   408ac:	d0a6d117 	ldw	r2,-25788(gp)
   408b0:	10800804 	addi	r2,r2,32
   408b4:	1080000b 	ldhu	r2,0(r2)
   408b8:	10ffffcc 	andi	r3,r2,65535
   408bc:	18e0001c 	xori	r3,r3,32768
   408c0:	18e00004 	addi	r3,r3,-32768
   408c4:	d0a6d117 	ldw	r2,-25788(gp)
   408c8:	10801404 	addi	r2,r2,80
   408cc:	1080000b 	ldhu	r2,0(r2)
   408d0:	10bfffcc 	andi	r2,r2,65535
   408d4:	10a0001c 	xori	r2,r2,32768
   408d8:	10a00004 	addi	r2,r2,-32768
   408dc:	1885c83a 	sub	r2,r3,r2
   408e0:	e0bffa15 	stw	r2,-24(fp)

		x5 = data[24] + data[32];
   408e4:	d0a6d117 	ldw	r2,-25788(gp)
   408e8:	10800c04 	addi	r2,r2,48
   408ec:	1080000b 	ldhu	r2,0(r2)
   408f0:	10ffffcc 	andi	r3,r2,65535
   408f4:	18e0001c 	xori	r3,r3,32768
   408f8:	18e00004 	addi	r3,r3,-32768
   408fc:	d0a6d117 	ldw	r2,-25788(gp)
   40900:	10801004 	addi	r2,r2,64
   40904:	1080000b 	ldhu	r2,0(r2)
   40908:	10bfffcc 	andi	r2,r2,65535
   4090c:	10a0001c 	xori	r2,r2,32768
   40910:	10a00004 	addi	r2,r2,-32768
   40914:	1885883a 	add	r2,r3,r2
   40918:	e0bffb15 	stw	r2,-20(fp)
		x3 = data[24] - data[32];
   4091c:	d0a6d117 	ldw	r2,-25788(gp)
   40920:	10800c04 	addi	r2,r2,48
   40924:	1080000b 	ldhu	r2,0(r2)
   40928:	10ffffcc 	andi	r3,r2,65535
   4092c:	18e0001c 	xori	r3,r3,32768
   40930:	18e00004 	addi	r3,r3,-32768
   40934:	d0a6d117 	ldw	r2,-25788(gp)
   40938:	10801004 	addi	r2,r2,64
   4093c:	1080000b 	ldhu	r2,0(r2)
   40940:	10bfffcc 	andi	r2,r2,65535
   40944:	10a0001c 	xori	r2,r2,32768
   40948:	10a00004 	addi	r2,r2,-32768
   4094c:	1885c83a 	sub	r2,r3,r2
   40950:	e0bffc15 	stw	r2,-16(fp)

		x4 = x8 + x5;
   40954:	e0fff517 	ldw	r3,-44(fp)
   40958:	e0bffb17 	ldw	r2,-20(fp)
   4095c:	1885883a 	add	r2,r3,r2
   40960:	e0bffd15 	stw	r2,-12(fp)
		x8 -= x5;
   40964:	e0fff517 	ldw	r3,-44(fp)
   40968:	e0bffb17 	ldw	r2,-20(fp)
   4096c:	1885c83a 	sub	r2,r3,r2
   40970:	e0bff515 	stw	r2,-44(fp)

		x5 = x7 + x6;
   40974:	e0fff717 	ldw	r3,-36(fp)
   40978:	e0bff917 	ldw	r2,-28(fp)
   4097c:	1885883a 	add	r2,r3,r2
   40980:	e0bffb15 	stw	r2,-20(fp)
		x7 -= x6;
   40984:	e0fff717 	ldw	r3,-36(fp)
   40988:	e0bff917 	ldw	r2,-28(fp)
   4098c:	1885c83a 	sub	r2,r3,r2
   40990:	e0bff715 	stw	r2,-36(fp)

		data[0] = (INT16)((x4 + x5) >> s1);
   40994:	d0a6d117 	ldw	r2,-25788(gp)
   40998:	e13ffd17 	ldw	r4,-12(fp)
   4099c:	e0fffb17 	ldw	r3,-20(fp)
   409a0:	20c9883a 	add	r4,r4,r3
   409a4:	d0e0038b 	ldhu	r3,-32754(gp)
   409a8:	18ffffcc 	andi	r3,r3,65535
   409ac:	20c7d83a 	sra	r3,r4,r3
   409b0:	10c0000d 	sth	r3,0(r2)
		data[32] = (INT16)((x4 - x5) >> s1);
   409b4:	d0a6d117 	ldw	r2,-25788(gp)
   409b8:	10801004 	addi	r2,r2,64
   409bc:	e13ffd17 	ldw	r4,-12(fp)
   409c0:	e0fffb17 	ldw	r3,-20(fp)
   409c4:	20c9c83a 	sub	r4,r4,r3
   409c8:	d0e0038b 	ldhu	r3,-32754(gp)
   409cc:	18ffffcc 	andi	r3,r3,65535
   409d0:	20c7d83a 	sra	r3,r4,r3
   409d4:	10c0000d 	sth	r3,0(r2)

		data[16] = (INT16)((x8 * c2 + x7 * c6) >> s3);
   409d8:	d0a6d117 	ldw	r2,-25788(gp)
   409dc:	14000804 	addi	r16,r2,32
   409e0:	d0a0000b 	ldhu	r2,-32768(gp)
   409e4:	10bfffcc 	andi	r2,r2,65535
   409e8:	e17ff517 	ldw	r5,-44(fp)
   409ec:	1009883a 	mov	r4,r2
   409f0:	0040e9c0 	call	40e9c <__mulsi3>
   409f4:	1023883a 	mov	r17,r2
   409f8:	d0a0008b 	ldhu	r2,-32766(gp)
   409fc:	10bfffcc 	andi	r2,r2,65535
   40a00:	e17ff717 	ldw	r5,-36(fp)
   40a04:	1009883a 	mov	r4,r2
   40a08:	0040e9c0 	call	40e9c <__mulsi3>
   40a0c:	8887883a 	add	r3,r17,r2
   40a10:	d0a0040b 	ldhu	r2,-32752(gp)
   40a14:	10bfffcc 	andi	r2,r2,65535
   40a18:	1885d83a 	sra	r2,r3,r2
   40a1c:	8080000d 	sth	r2,0(r16)
		data[48] = (INT16)((x8 * c6 - x7 * c2) >> s3);
   40a20:	d0a6d117 	ldw	r2,-25788(gp)
   40a24:	14001804 	addi	r16,r2,96
   40a28:	d0a0008b 	ldhu	r2,-32766(gp)
   40a2c:	10bfffcc 	andi	r2,r2,65535
   40a30:	e17ff517 	ldw	r5,-44(fp)
   40a34:	1009883a 	mov	r4,r2
   40a38:	0040e9c0 	call	40e9c <__mulsi3>
   40a3c:	1023883a 	mov	r17,r2
   40a40:	d0a0000b 	ldhu	r2,-32768(gp)
   40a44:	10bfffcc 	andi	r2,r2,65535
   40a48:	e17ff717 	ldw	r5,-36(fp)
   40a4c:	1009883a 	mov	r4,r2
   40a50:	0040e9c0 	call	40e9c <__mulsi3>
   40a54:	8887c83a 	sub	r3,r17,r2
   40a58:	d0a0040b 	ldhu	r2,-32752(gp)
   40a5c:	10bfffcc 	andi	r2,r2,65535
   40a60:	1885d83a 	sra	r2,r3,r2
   40a64:	8080000d 	sth	r2,0(r16)

		data[56] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s3);
   40a68:	d0a6d117 	ldw	r2,-25788(gp)
   40a6c:	14001c04 	addi	r16,r2,112
   40a70:	d0a0018b 	ldhu	r2,-32762(gp)
   40a74:	10bfffcc 	andi	r2,r2,65535
   40a78:	e17ff617 	ldw	r5,-40(fp)
   40a7c:	1009883a 	mov	r4,r2
   40a80:	0040e9c0 	call	40e9c <__mulsi3>
   40a84:	1023883a 	mov	r17,r2
   40a88:	d0a0020b 	ldhu	r2,-32760(gp)
   40a8c:	10bfffcc 	andi	r2,r2,65535
   40a90:	e17ff817 	ldw	r5,-32(fp)
   40a94:	1009883a 	mov	r4,r2
   40a98:	0040e9c0 	call	40e9c <__mulsi3>
   40a9c:	88a3c83a 	sub	r17,r17,r2
   40aa0:	d0a0028b 	ldhu	r2,-32758(gp)
   40aa4:	10bfffcc 	andi	r2,r2,65535
   40aa8:	e17ffa17 	ldw	r5,-24(fp)
   40aac:	1009883a 	mov	r4,r2
   40ab0:	0040e9c0 	call	40e9c <__mulsi3>
   40ab4:	88a3883a 	add	r17,r17,r2
   40ab8:	d0a0030b 	ldhu	r2,-32756(gp)
   40abc:	10bfffcc 	andi	r2,r2,65535
   40ac0:	e17ffc17 	ldw	r5,-16(fp)
   40ac4:	1009883a 	mov	r4,r2
   40ac8:	0040e9c0 	call	40e9c <__mulsi3>
   40acc:	8887c83a 	sub	r3,r17,r2
   40ad0:	d0a0040b 	ldhu	r2,-32752(gp)
   40ad4:	10bfffcc 	andi	r2,r2,65535
   40ad8:	1885d83a 	sra	r2,r3,r2
   40adc:	8080000d 	sth	r2,0(r16)
		data[40] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s3);
   40ae0:	d0a6d117 	ldw	r2,-25788(gp)
   40ae4:	14001404 	addi	r16,r2,80
   40ae8:	d0a0020b 	ldhu	r2,-32760(gp)
   40aec:	10bfffcc 	andi	r2,r2,65535
   40af0:	e17ff617 	ldw	r5,-40(fp)
   40af4:	1009883a 	mov	r4,r2
   40af8:	0040e9c0 	call	40e9c <__mulsi3>
   40afc:	1023883a 	mov	r17,r2
   40b00:	d0a0030b 	ldhu	r2,-32756(gp)
   40b04:	10bfffcc 	andi	r2,r2,65535
   40b08:	e17ff817 	ldw	r5,-32(fp)
   40b0c:	1009883a 	mov	r4,r2
   40b10:	0040e9c0 	call	40e9c <__mulsi3>
   40b14:	88a3c83a 	sub	r17,r17,r2
   40b18:	d0a0018b 	ldhu	r2,-32762(gp)
   40b1c:	10bfffcc 	andi	r2,r2,65535
   40b20:	e17ffa17 	ldw	r5,-24(fp)
   40b24:	1009883a 	mov	r4,r2
   40b28:	0040e9c0 	call	40e9c <__mulsi3>
   40b2c:	88a3883a 	add	r17,r17,r2
   40b30:	d0a0028b 	ldhu	r2,-32758(gp)
   40b34:	10bfffcc 	andi	r2,r2,65535
   40b38:	e17ffc17 	ldw	r5,-16(fp)
   40b3c:	1009883a 	mov	r4,r2
   40b40:	0040e9c0 	call	40e9c <__mulsi3>
   40b44:	8887883a 	add	r3,r17,r2
   40b48:	d0a0040b 	ldhu	r2,-32752(gp)
   40b4c:	10bfffcc 	andi	r2,r2,65535
   40b50:	1885d83a 	sra	r2,r3,r2
   40b54:	8080000d 	sth	r2,0(r16)
		data[24] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s3);
   40b58:	d0a6d117 	ldw	r2,-25788(gp)
   40b5c:	14000c04 	addi	r16,r2,48
   40b60:	d0a0028b 	ldhu	r2,-32758(gp)
   40b64:	10bfffcc 	andi	r2,r2,65535
   40b68:	e17ff617 	ldw	r5,-40(fp)
   40b6c:	1009883a 	mov	r4,r2
   40b70:	0040e9c0 	call	40e9c <__mulsi3>
   40b74:	1023883a 	mov	r17,r2
   40b78:	d0a0018b 	ldhu	r2,-32762(gp)
   40b7c:	10bfffcc 	andi	r2,r2,65535
   40b80:	e17ff817 	ldw	r5,-32(fp)
   40b84:	1009883a 	mov	r4,r2
   40b88:	0040e9c0 	call	40e9c <__mulsi3>
   40b8c:	88a3c83a 	sub	r17,r17,r2
   40b90:	d0a0030b 	ldhu	r2,-32756(gp)
   40b94:	10bfffcc 	andi	r2,r2,65535
   40b98:	e17ffa17 	ldw	r5,-24(fp)
   40b9c:	1009883a 	mov	r4,r2
   40ba0:	0040e9c0 	call	40e9c <__mulsi3>
   40ba4:	88a3c83a 	sub	r17,r17,r2
   40ba8:	d0a0020b 	ldhu	r2,-32760(gp)
   40bac:	10bfffcc 	andi	r2,r2,65535
   40bb0:	e17ffc17 	ldw	r5,-16(fp)
   40bb4:	1009883a 	mov	r4,r2
   40bb8:	0040e9c0 	call	40e9c <__mulsi3>
   40bbc:	8887c83a 	sub	r3,r17,r2
   40bc0:	d0a0040b 	ldhu	r2,-32752(gp)
   40bc4:	10bfffcc 	andi	r2,r2,65535
   40bc8:	1885d83a 	sra	r2,r3,r2
   40bcc:	8080000d 	sth	r2,0(r16)
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);
   40bd0:	d0a6d117 	ldw	r2,-25788(gp)
   40bd4:	14000404 	addi	r16,r2,16
   40bd8:	d0a0030b 	ldhu	r2,-32756(gp)
   40bdc:	10bfffcc 	andi	r2,r2,65535
   40be0:	e17ff617 	ldw	r5,-40(fp)
   40be4:	1009883a 	mov	r4,r2
   40be8:	0040e9c0 	call	40e9c <__mulsi3>
   40bec:	1023883a 	mov	r17,r2
   40bf0:	d0a0028b 	ldhu	r2,-32758(gp)
   40bf4:	10bfffcc 	andi	r2,r2,65535
   40bf8:	e17ff817 	ldw	r5,-32(fp)
   40bfc:	1009883a 	mov	r4,r2
   40c00:	0040e9c0 	call	40e9c <__mulsi3>
   40c04:	88a3883a 	add	r17,r17,r2
   40c08:	d0a0020b 	ldhu	r2,-32760(gp)
   40c0c:	10bfffcc 	andi	r2,r2,65535
   40c10:	e17ffa17 	ldw	r5,-24(fp)
   40c14:	1009883a 	mov	r4,r2
   40c18:	0040e9c0 	call	40e9c <__mulsi3>
   40c1c:	88a3883a 	add	r17,r17,r2
   40c20:	d0a0018b 	ldhu	r2,-32762(gp)
   40c24:	10bfffcc 	andi	r2,r2,65535
   40c28:	e17ffc17 	ldw	r5,-16(fp)
   40c2c:	1009883a 	mov	r4,r2
   40c30:	0040e9c0 	call	40e9c <__mulsi3>
   40c34:	8887883a 	add	r3,r17,r2
   40c38:	d0a0040b 	ldhu	r2,-32752(gp)
   40c3c:	10bfffcc 	andi	r2,r2,65535
   40c40:	1885d83a 	sra	r2,r3,r2
   40c44:	8080000d 	sth	r2,0(r16)

		data++;
   40c48:	d0a6d117 	ldw	r2,-25788(gp)
   40c4c:	10800084 	addi	r2,r2,2
   40c50:	d0a6d115 	stw	r2,-25788(gp)
		data += 8;
	}

	data -= 64;

	for (i = 8; i > 0; i--)
   40c54:	e0bff40b 	ldhu	r2,-48(fp)
   40c58:	10bfffc4 	addi	r2,r2,-1
   40c5c:	e0bff40d 	sth	r2,-48(fp)
   40c60:	e0bff40b 	ldhu	r2,-48(fp)
   40c64:	103ecd1e 	bne	r2,zero,4079c <__alt_data_end+0xfffe079c>
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);

		data++;
	}

	data -= 8;
   40c68:	d0a6d117 	ldw	r2,-25788(gp)
   40c6c:	10bffc04 	addi	r2,r2,-16
   40c70:	d0a6d115 	stw	r2,-25788(gp)

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40c74:	e03ff40d 	sth	zero,-48(fp)
   40c78:	00000d06 	br	40cb0 <DCT+0xa44>
	{
		SEND(data[i]);
   40c7c:	d0e6d117 	ldw	r3,-25788(gp)
   40c80:	e0bff40b 	ldhu	r2,-48(fp)
   40c84:	1085883a 	add	r2,r2,r2
   40c88:	1885883a 	add	r2,r3,r2
   40c8c:	1080000b 	ldhu	r2,0(r2)
   40c90:	10bfffcc 	andi	r2,r2,65535
   40c94:	10a0001c 	xori	r2,r2,32768
   40c98:	10a00004 	addi	r2,r2,-32768
   40c9c:	1009883a 	mov	r4,r2
   40ca0:	0040d440 	call	40d44 <SEND>
	}

	data -= 8;

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40ca4:	e0bff40b 	ldhu	r2,-48(fp)
   40ca8:	10800044 	addi	r2,r2,1
   40cac:	e0bff40d 	sth	r2,-48(fp)
   40cb0:	e0bff40b 	ldhu	r2,-48(fp)
   40cb4:	10801030 	cmpltui	r2,r2,64
   40cb8:	103ff01e 	bne	r2,zero,40c7c <__alt_data_end+0xfffe0c7c>
	{
		SEND(data[i]);
	}
}
   40cbc:	0001883a 	nop
   40cc0:	e6fffe04 	addi	sp,fp,-8
   40cc4:	dfc00317 	ldw	ra,12(sp)
   40cc8:	df000217 	ldw	fp,8(sp)
   40ccc:	dc400117 	ldw	r17,4(sp)
   40cd0:	dc000017 	ldw	r16,0(sp)
   40cd4:	dec00404 	addi	sp,sp,16
   40cd8:	f800283a 	ret

00040cdc <main>:


// TODO: Rate limited here manually. Will have to change for hardware implementation.
int main(void)
{
   40cdc:	defffe04 	addi	sp,sp,-8
   40ce0:	dfc00115 	stw	ra,4(sp)
   40ce4:	df000015 	stw	fp,0(sp)
   40ce8:	d839883a 	mov	fp,sp
	data = (INT16 *)malloc(sizeof(INT16) * 64);
   40cec:	01002004 	movi	r4,128
   40cf0:	0040ec40 	call	40ec4 <malloc>
   40cf4:	d0a6d115 	stw	r2,-25788(gp)

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	 while (1)
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		DCT();
   40cf8:	004026c0 	call	4026c <DCT>
		/* changed by haris */
		DCT();
   40cfc:	004026c0 	call	4026c <DCT>
		DCT();
   40d00:	004026c0 	call	4026c <DCT>
	}
   40d04:	003ffc06 	br	40cf8 <__alt_data_end+0xfffe0cf8>

00040d08 <RECV>:
#include <stdlib.h>

#include "../lib/q_mem_obj_def.h"

int RECV()
{
   40d08:	defffe04 	addi	sp,sp,-8
   40d0c:	dfc00115 	stw	ra,4(sp)
   40d10:	df000015 	stw	fp,0(sp)
   40d14:	d839883a 	mov	fp,sp
    // dequeue from queue and convert to int
    // return atoi(dequeue(qi1b));
    return dequeueINT32(q1b);
   40d18:	00800134 	movhi	r2,4
   40d1c:	109a7f04 	addi	r2,r2,27132
   40d20:	11000017 	ldw	r4,0(r2)
   40d24:	11400117 	ldw	r5,4(r2)
   40d28:	11800217 	ldw	r6,8(r2)
   40d2c:	0040e180 	call	40e18 <dequeueINT32>
}
   40d30:	e037883a 	mov	sp,fp
   40d34:	dfc00117 	ldw	ra,4(sp)
   40d38:	df000017 	ldw	fp,0(sp)
   40d3c:	dec00204 	addi	sp,sp,8
   40d40:	f800283a 	ret

00040d44 <SEND>:

void SEND(int data)
{
   40d44:	defffd04 	addi	sp,sp,-12
   40d48:	dfc00215 	stw	ra,8(sp)
   40d4c:	df000115 	stw	fp,4(sp)
   40d50:	df000104 	addi	fp,sp,4
   40d54:	e13fff15 	stw	r4,-4(fp)
    // enqueue data to queue
    // char str[10];
    // sprintf(str, "%d", data);
    // enqueueINT32(qo1c, str);
//	printf("%d\n",data);
    enqueueINT32(q1c, data);
   40d58:	00800134 	movhi	r2,4
   40d5c:	109a8204 	addi	r2,r2,27144
   40d60:	e1ffff17 	ldw	r7,-4(fp)
   40d64:	11000017 	ldw	r4,0(r2)
   40d68:	11400117 	ldw	r5,4(r2)
   40d6c:	11800217 	ldw	r6,8(r2)
   40d70:	0040d8c0 	call	40d8c <enqueueINT32>
}
   40d74:	0001883a 	nop
   40d78:	e037883a 	mov	sp,fp
   40d7c:	dfc00117 	ldw	ra,4(sp)
   40d80:	df000017 	ldw	fp,0(sp)
   40d84:	dec00204 	addi	sp,sp,8
   40d88:	f800283a 	ret

00040d8c <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   40d8c:	defffa04 	addi	sp,sp,-24
   40d90:	dfc00515 	stw	ra,20(sp)
   40d94:	df000415 	stw	fp,16(sp)
   40d98:	df000404 	addi	fp,sp,16
   40d9c:	e13ffc15 	stw	r4,-16(fp)
   40da0:	e17ffd15 	stw	r5,-12(fp)
   40da4:	e1bffe15 	stw	r6,-8(fp)
   40da8:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   40dac:	0001883a 	nop
   40db0:	e0bffe17 	ldw	r2,-8(fp)
   40db4:	01400044 	movi	r5,1
   40db8:	1009883a 	mov	r4,r2
   40dbc:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   40dc0:	103ffb1e 	bne	r2,zero,40db0 <__alt_data_end+0xfffe0db0>
	{}

    if (INIT_USAGE_ENQ == 0){
   40dc4:	d0a6d217 	ldw	r2,-25784(gp)
   40dc8:	1000051e 	bne	r2,zero,40de0 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   40dcc:	00800044 	movi	r2,1
   40dd0:	d0a6d215 	stw	r2,-25784(gp)
        printf("First time using enqueueINT32\n");
   40dd4:	01000134 	movhi	r4,4
   40dd8:	211a6004 	addi	r4,r4,27008
   40ddc:	00417b80 	call	417b8 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   40de0:	e0bffc17 	ldw	r2,-16(fp)
   40de4:	1007883a 	mov	r3,r2
   40de8:	e0bffe17 	ldw	r2,-8(fp)
   40dec:	1009883a 	mov	r4,r2
   40df0:	e0bfff17 	ldw	r2,-4(fp)
   40df4:	100d883a 	mov	r6,r2
   40df8:	200b883a 	mov	r5,r4
   40dfc:	1809883a 	mov	r4,r3
   40e00:	0044a7c0 	call	44a7c <altera_avalon_fifo_write_fifo>
}
   40e04:	e037883a 	mov	sp,fp
   40e08:	dfc00117 	ldw	ra,4(sp)
   40e0c:	df000017 	ldw	fp,0(sp)
   40e10:	dec00204 	addi	sp,sp,8
   40e14:	f800283a 	ret

00040e18 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   40e18:	defffa04 	addi	sp,sp,-24
   40e1c:	dfc00515 	stw	ra,20(sp)
   40e20:	df000415 	stw	fp,16(sp)
   40e24:	df000404 	addi	fp,sp,16
   40e28:	e13ffd15 	stw	r4,-12(fp)
   40e2c:	e17ffe15 	stw	r5,-8(fp)
   40e30:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   40e34:	0001883a 	nop
   40e38:	e0bfff17 	ldw	r2,-4(fp)
   40e3c:	01400084 	movi	r5,2
   40e40:	1009883a 	mov	r4,r2
   40e44:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   40e48:	103ffb1e 	bne	r2,zero,40e38 <__alt_data_end+0xfffe0e38>
	{}

    if (INIT_USAGE_DEQ == 0){
   40e4c:	d0a6d317 	ldw	r2,-25780(gp)
   40e50:	1000051e 	bne	r2,zero,40e68 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   40e54:	00800044 	movi	r2,1
   40e58:	d0a6d315 	stw	r2,-25780(gp)
        printf("First time using dequeueINT32\n");
   40e5c:	01000134 	movhi	r4,4
   40e60:	211a6804 	addi	r4,r4,27040
   40e64:	00417b80 	call	417b8 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   40e68:	e0bffe17 	ldw	r2,-8(fp)
   40e6c:	1007883a 	mov	r3,r2
   40e70:	e0bfff17 	ldw	r2,-4(fp)
   40e74:	100b883a 	mov	r5,r2
   40e78:	1809883a 	mov	r4,r3
   40e7c:	0044b400 	call	44b40 <altera_avalon_fifo_read_fifo>
   40e80:	e0bffc15 	stw	r2,-16(fp)

	return data;
   40e84:	e0bffc17 	ldw	r2,-16(fp)
}
   40e88:	e037883a 	mov	sp,fp
   40e8c:	dfc00117 	ldw	ra,4(sp)
   40e90:	df000017 	ldw	fp,0(sp)
   40e94:	dec00204 	addi	sp,sp,8
   40e98:	f800283a 	ret

00040e9c <__mulsi3>:
   40e9c:	0005883a 	mov	r2,zero
   40ea0:	20000726 	beq	r4,zero,40ec0 <__mulsi3+0x24>
   40ea4:	20c0004c 	andi	r3,r4,1
   40ea8:	2008d07a 	srli	r4,r4,1
   40eac:	18000126 	beq	r3,zero,40eb4 <__mulsi3+0x18>
   40eb0:	1145883a 	add	r2,r2,r5
   40eb4:	294b883a 	add	r5,r5,r5
   40eb8:	203ffa1e 	bne	r4,zero,40ea4 <__alt_data_end+0xfffe0ea4>
   40ebc:	f800283a 	ret
   40ec0:	f800283a 	ret

00040ec4 <malloc>:
   40ec4:	00800174 	movhi	r2,5
   40ec8:	10a13204 	addi	r2,r2,-31544
   40ecc:	200b883a 	mov	r5,r4
   40ed0:	11000017 	ldw	r4,0(r2)
   40ed4:	0040eec1 	jmpi	40eec <_malloc_r>

00040ed8 <free>:
   40ed8:	00800174 	movhi	r2,5
   40edc:	10a13204 	addi	r2,r2,-31544
   40ee0:	200b883a 	mov	r5,r4
   40ee4:	11000017 	ldw	r4,0(r2)
   40ee8:	0041d8c1 	jmpi	41d8c <_free_r>

00040eec <_malloc_r>:
   40eec:	defff504 	addi	sp,sp,-44
   40ef0:	dc800315 	stw	r18,12(sp)
   40ef4:	dfc00a15 	stw	ra,40(sp)
   40ef8:	df000915 	stw	fp,36(sp)
   40efc:	ddc00815 	stw	r23,32(sp)
   40f00:	dd800715 	stw	r22,28(sp)
   40f04:	dd400615 	stw	r21,24(sp)
   40f08:	dd000515 	stw	r20,20(sp)
   40f0c:	dcc00415 	stw	r19,16(sp)
   40f10:	dc400215 	stw	r17,8(sp)
   40f14:	dc000115 	stw	r16,4(sp)
   40f18:	288002c4 	addi	r2,r5,11
   40f1c:	00c00584 	movi	r3,22
   40f20:	2025883a 	mov	r18,r4
   40f24:	18807f2e 	bgeu	r3,r2,41124 <_malloc_r+0x238>
   40f28:	047ffe04 	movi	r17,-8
   40f2c:	1462703a 	and	r17,r2,r17
   40f30:	8800a316 	blt	r17,zero,411c0 <_malloc_r+0x2d4>
   40f34:	8940a236 	bltu	r17,r5,411c0 <_malloc_r+0x2d4>
   40f38:	004426c0 	call	4426c <__malloc_lock>
   40f3c:	00807dc4 	movi	r2,503
   40f40:	1441e92e 	bgeu	r2,r17,416e8 <_malloc_r+0x7fc>
   40f44:	8804d27a 	srli	r2,r17,9
   40f48:	1000a126 	beq	r2,zero,411d0 <_malloc_r+0x2e4>
   40f4c:	00c00104 	movi	r3,4
   40f50:	18811e36 	bltu	r3,r2,413cc <_malloc_r+0x4e0>
   40f54:	8804d1ba 	srli	r2,r17,6
   40f58:	12000e44 	addi	r8,r2,57
   40f5c:	11c00e04 	addi	r7,r2,56
   40f60:	4209883a 	add	r4,r8,r8
   40f64:	04c00134 	movhi	r19,4
   40f68:	2109883a 	add	r4,r4,r4
   40f6c:	9cda9d04 	addi	r19,r19,27252
   40f70:	2109883a 	add	r4,r4,r4
   40f74:	9909883a 	add	r4,r19,r4
   40f78:	24000117 	ldw	r16,4(r4)
   40f7c:	213ffe04 	addi	r4,r4,-8
   40f80:	24009726 	beq	r4,r16,411e0 <_malloc_r+0x2f4>
   40f84:	80800117 	ldw	r2,4(r16)
   40f88:	01bfff04 	movi	r6,-4
   40f8c:	014003c4 	movi	r5,15
   40f90:	1184703a 	and	r2,r2,r6
   40f94:	1447c83a 	sub	r3,r2,r17
   40f98:	28c00716 	blt	r5,r3,40fb8 <_malloc_r+0xcc>
   40f9c:	1800920e 	bge	r3,zero,411e8 <_malloc_r+0x2fc>
   40fa0:	84000317 	ldw	r16,12(r16)
   40fa4:	24008e26 	beq	r4,r16,411e0 <_malloc_r+0x2f4>
   40fa8:	80800117 	ldw	r2,4(r16)
   40fac:	1184703a 	and	r2,r2,r6
   40fb0:	1447c83a 	sub	r3,r2,r17
   40fb4:	28fff90e 	bge	r5,r3,40f9c <__alt_data_end+0xfffe0f9c>
   40fb8:	3809883a 	mov	r4,r7
   40fbc:	01800134 	movhi	r6,4
   40fc0:	9c000417 	ldw	r16,16(r19)
   40fc4:	319a9d04 	addi	r6,r6,27252
   40fc8:	32000204 	addi	r8,r6,8
   40fcc:	82013426 	beq	r16,r8,414a0 <_malloc_r+0x5b4>
   40fd0:	80c00117 	ldw	r3,4(r16)
   40fd4:	00bfff04 	movi	r2,-4
   40fd8:	188e703a 	and	r7,r3,r2
   40fdc:	3c45c83a 	sub	r2,r7,r17
   40fe0:	00c003c4 	movi	r3,15
   40fe4:	18811f16 	blt	r3,r2,41464 <_malloc_r+0x578>
   40fe8:	32000515 	stw	r8,20(r6)
   40fec:	32000415 	stw	r8,16(r6)
   40ff0:	10007f0e 	bge	r2,zero,411f0 <_malloc_r+0x304>
   40ff4:	00807fc4 	movi	r2,511
   40ff8:	11c0fd36 	bltu	r2,r7,413f0 <_malloc_r+0x504>
   40ffc:	3806d0fa 	srli	r3,r7,3
   41000:	01c00044 	movi	r7,1
   41004:	30800117 	ldw	r2,4(r6)
   41008:	19400044 	addi	r5,r3,1
   4100c:	294b883a 	add	r5,r5,r5
   41010:	1807d0ba 	srai	r3,r3,2
   41014:	294b883a 	add	r5,r5,r5
   41018:	294b883a 	add	r5,r5,r5
   4101c:	298b883a 	add	r5,r5,r6
   41020:	38c6983a 	sll	r3,r7,r3
   41024:	29c00017 	ldw	r7,0(r5)
   41028:	2a7ffe04 	addi	r9,r5,-8
   4102c:	1886b03a 	or	r3,r3,r2
   41030:	82400315 	stw	r9,12(r16)
   41034:	81c00215 	stw	r7,8(r16)
   41038:	30c00115 	stw	r3,4(r6)
   4103c:	2c000015 	stw	r16,0(r5)
   41040:	3c000315 	stw	r16,12(r7)
   41044:	2005d0ba 	srai	r2,r4,2
   41048:	01400044 	movi	r5,1
   4104c:	288a983a 	sll	r5,r5,r2
   41050:	19406f36 	bltu	r3,r5,41210 <_malloc_r+0x324>
   41054:	28c4703a 	and	r2,r5,r3
   41058:	10000a1e 	bne	r2,zero,41084 <_malloc_r+0x198>
   4105c:	00bfff04 	movi	r2,-4
   41060:	294b883a 	add	r5,r5,r5
   41064:	2088703a 	and	r4,r4,r2
   41068:	28c4703a 	and	r2,r5,r3
   4106c:	21000104 	addi	r4,r4,4
   41070:	1000041e 	bne	r2,zero,41084 <_malloc_r+0x198>
   41074:	294b883a 	add	r5,r5,r5
   41078:	28c4703a 	and	r2,r5,r3
   4107c:	21000104 	addi	r4,r4,4
   41080:	103ffc26 	beq	r2,zero,41074 <__alt_data_end+0xfffe1074>
   41084:	02bfff04 	movi	r10,-4
   41088:	024003c4 	movi	r9,15
   4108c:	21800044 	addi	r6,r4,1
   41090:	318d883a 	add	r6,r6,r6
   41094:	318d883a 	add	r6,r6,r6
   41098:	318d883a 	add	r6,r6,r6
   4109c:	998d883a 	add	r6,r19,r6
   410a0:	333ffe04 	addi	r12,r6,-8
   410a4:	2017883a 	mov	r11,r4
   410a8:	31800104 	addi	r6,r6,4
   410ac:	34000017 	ldw	r16,0(r6)
   410b0:	31fffd04 	addi	r7,r6,-12
   410b4:	81c0041e 	bne	r16,r7,410c8 <_malloc_r+0x1dc>
   410b8:	0000fb06 	br	414a8 <_malloc_r+0x5bc>
   410bc:	1801030e 	bge	r3,zero,414cc <_malloc_r+0x5e0>
   410c0:	84000317 	ldw	r16,12(r16)
   410c4:	81c0f826 	beq	r16,r7,414a8 <_malloc_r+0x5bc>
   410c8:	80800117 	ldw	r2,4(r16)
   410cc:	1284703a 	and	r2,r2,r10
   410d0:	1447c83a 	sub	r3,r2,r17
   410d4:	48fff90e 	bge	r9,r3,410bc <__alt_data_end+0xfffe10bc>
   410d8:	80800317 	ldw	r2,12(r16)
   410dc:	81000217 	ldw	r4,8(r16)
   410e0:	89400054 	ori	r5,r17,1
   410e4:	81400115 	stw	r5,4(r16)
   410e8:	20800315 	stw	r2,12(r4)
   410ec:	11000215 	stw	r4,8(r2)
   410f0:	8463883a 	add	r17,r16,r17
   410f4:	9c400515 	stw	r17,20(r19)
   410f8:	9c400415 	stw	r17,16(r19)
   410fc:	18800054 	ori	r2,r3,1
   41100:	88800115 	stw	r2,4(r17)
   41104:	8a000315 	stw	r8,12(r17)
   41108:	8a000215 	stw	r8,8(r17)
   4110c:	88e3883a 	add	r17,r17,r3
   41110:	88c00015 	stw	r3,0(r17)
   41114:	9009883a 	mov	r4,r18
   41118:	00442900 	call	44290 <__malloc_unlock>
   4111c:	80800204 	addi	r2,r16,8
   41120:	00001b06 	br	41190 <_malloc_r+0x2a4>
   41124:	04400404 	movi	r17,16
   41128:	89402536 	bltu	r17,r5,411c0 <_malloc_r+0x2d4>
   4112c:	004426c0 	call	4426c <__malloc_lock>
   41130:	00800184 	movi	r2,6
   41134:	01000084 	movi	r4,2
   41138:	04c00134 	movhi	r19,4
   4113c:	1085883a 	add	r2,r2,r2
   41140:	9cda9d04 	addi	r19,r19,27252
   41144:	1085883a 	add	r2,r2,r2
   41148:	9885883a 	add	r2,r19,r2
   4114c:	14000117 	ldw	r16,4(r2)
   41150:	10fffe04 	addi	r3,r2,-8
   41154:	80c0d926 	beq	r16,r3,414bc <_malloc_r+0x5d0>
   41158:	80c00117 	ldw	r3,4(r16)
   4115c:	81000317 	ldw	r4,12(r16)
   41160:	00bfff04 	movi	r2,-4
   41164:	1884703a 	and	r2,r3,r2
   41168:	81400217 	ldw	r5,8(r16)
   4116c:	8085883a 	add	r2,r16,r2
   41170:	10c00117 	ldw	r3,4(r2)
   41174:	29000315 	stw	r4,12(r5)
   41178:	21400215 	stw	r5,8(r4)
   4117c:	18c00054 	ori	r3,r3,1
   41180:	10c00115 	stw	r3,4(r2)
   41184:	9009883a 	mov	r4,r18
   41188:	00442900 	call	44290 <__malloc_unlock>
   4118c:	80800204 	addi	r2,r16,8
   41190:	dfc00a17 	ldw	ra,40(sp)
   41194:	df000917 	ldw	fp,36(sp)
   41198:	ddc00817 	ldw	r23,32(sp)
   4119c:	dd800717 	ldw	r22,28(sp)
   411a0:	dd400617 	ldw	r21,24(sp)
   411a4:	dd000517 	ldw	r20,20(sp)
   411a8:	dcc00417 	ldw	r19,16(sp)
   411ac:	dc800317 	ldw	r18,12(sp)
   411b0:	dc400217 	ldw	r17,8(sp)
   411b4:	dc000117 	ldw	r16,4(sp)
   411b8:	dec00b04 	addi	sp,sp,44
   411bc:	f800283a 	ret
   411c0:	00800304 	movi	r2,12
   411c4:	90800015 	stw	r2,0(r18)
   411c8:	0005883a 	mov	r2,zero
   411cc:	003ff006 	br	41190 <__alt_data_end+0xfffe1190>
   411d0:	01002004 	movi	r4,128
   411d4:	02001004 	movi	r8,64
   411d8:	01c00fc4 	movi	r7,63
   411dc:	003f6106 	br	40f64 <__alt_data_end+0xfffe0f64>
   411e0:	4009883a 	mov	r4,r8
   411e4:	003f7506 	br	40fbc <__alt_data_end+0xfffe0fbc>
   411e8:	81000317 	ldw	r4,12(r16)
   411ec:	003fde06 	br	41168 <__alt_data_end+0xfffe1168>
   411f0:	81c5883a 	add	r2,r16,r7
   411f4:	11400117 	ldw	r5,4(r2)
   411f8:	9009883a 	mov	r4,r18
   411fc:	29400054 	ori	r5,r5,1
   41200:	11400115 	stw	r5,4(r2)
   41204:	00442900 	call	44290 <__malloc_unlock>
   41208:	80800204 	addi	r2,r16,8
   4120c:	003fe006 	br	41190 <__alt_data_end+0xfffe1190>
   41210:	9c000217 	ldw	r16,8(r19)
   41214:	00bfff04 	movi	r2,-4
   41218:	85800117 	ldw	r22,4(r16)
   4121c:	b0ac703a 	and	r22,r22,r2
   41220:	b4400336 	bltu	r22,r17,41230 <_malloc_r+0x344>
   41224:	b445c83a 	sub	r2,r22,r17
   41228:	00c003c4 	movi	r3,15
   4122c:	18805d16 	blt	r3,r2,413a4 <_malloc_r+0x4b8>
   41230:	05c00174 	movhi	r23,5
   41234:	00800174 	movhi	r2,5
   41238:	10a80004 	addi	r2,r2,-24576
   4123c:	bde12f04 	addi	r23,r23,-31556
   41240:	15400017 	ldw	r21,0(r2)
   41244:	b8c00017 	ldw	r3,0(r23)
   41248:	00bfffc4 	movi	r2,-1
   4124c:	858d883a 	add	r6,r16,r22
   41250:	8d6b883a 	add	r21,r17,r21
   41254:	1880ea26 	beq	r3,r2,41600 <_malloc_r+0x714>
   41258:	ad4403c4 	addi	r21,r21,4111
   4125c:	00bc0004 	movi	r2,-4096
   41260:	a8aa703a 	and	r21,r21,r2
   41264:	a80b883a 	mov	r5,r21
   41268:	9009883a 	mov	r4,r18
   4126c:	d9800015 	stw	r6,0(sp)
   41270:	00417cc0 	call	417cc <_sbrk_r>
   41274:	1029883a 	mov	r20,r2
   41278:	00bfffc4 	movi	r2,-1
   4127c:	d9800017 	ldw	r6,0(sp)
   41280:	a080e826 	beq	r20,r2,41624 <_malloc_r+0x738>
   41284:	a180a636 	bltu	r20,r6,41520 <_malloc_r+0x634>
   41288:	07000174 	movhi	fp,5
   4128c:	e7280904 	addi	fp,fp,-24540
   41290:	e0800017 	ldw	r2,0(fp)
   41294:	a887883a 	add	r3,r21,r2
   41298:	e0c00015 	stw	r3,0(fp)
   4129c:	3500e626 	beq	r6,r20,41638 <_malloc_r+0x74c>
   412a0:	b9000017 	ldw	r4,0(r23)
   412a4:	00bfffc4 	movi	r2,-1
   412a8:	2080ee26 	beq	r4,r2,41664 <_malloc_r+0x778>
   412ac:	a185c83a 	sub	r2,r20,r6
   412b0:	10c5883a 	add	r2,r2,r3
   412b4:	e0800015 	stw	r2,0(fp)
   412b8:	a0c001cc 	andi	r3,r20,7
   412bc:	1800bc26 	beq	r3,zero,415b0 <_malloc_r+0x6c4>
   412c0:	a0e9c83a 	sub	r20,r20,r3
   412c4:	00840204 	movi	r2,4104
   412c8:	a5000204 	addi	r20,r20,8
   412cc:	10c7c83a 	sub	r3,r2,r3
   412d0:	a545883a 	add	r2,r20,r21
   412d4:	1083ffcc 	andi	r2,r2,4095
   412d8:	18abc83a 	sub	r21,r3,r2
   412dc:	a80b883a 	mov	r5,r21
   412e0:	9009883a 	mov	r4,r18
   412e4:	00417cc0 	call	417cc <_sbrk_r>
   412e8:	00ffffc4 	movi	r3,-1
   412ec:	10c0e126 	beq	r2,r3,41674 <_malloc_r+0x788>
   412f0:	1505c83a 	sub	r2,r2,r20
   412f4:	1545883a 	add	r2,r2,r21
   412f8:	10800054 	ori	r2,r2,1
   412fc:	e0c00017 	ldw	r3,0(fp)
   41300:	9d000215 	stw	r20,8(r19)
   41304:	a0800115 	stw	r2,4(r20)
   41308:	a8c7883a 	add	r3,r21,r3
   4130c:	e0c00015 	stw	r3,0(fp)
   41310:	84c00e26 	beq	r16,r19,4134c <_malloc_r+0x460>
   41314:	018003c4 	movi	r6,15
   41318:	3580a72e 	bgeu	r6,r22,415b8 <_malloc_r+0x6cc>
   4131c:	81400117 	ldw	r5,4(r16)
   41320:	013ffe04 	movi	r4,-8
   41324:	b0bffd04 	addi	r2,r22,-12
   41328:	1104703a 	and	r2,r2,r4
   4132c:	2900004c 	andi	r4,r5,1
   41330:	2088b03a 	or	r4,r4,r2
   41334:	81000115 	stw	r4,4(r16)
   41338:	01400144 	movi	r5,5
   4133c:	8089883a 	add	r4,r16,r2
   41340:	21400115 	stw	r5,4(r4)
   41344:	21400215 	stw	r5,8(r4)
   41348:	3080cd36 	bltu	r6,r2,41680 <_malloc_r+0x794>
   4134c:	00800174 	movhi	r2,5
   41350:	10a7ff04 	addi	r2,r2,-24580
   41354:	11000017 	ldw	r4,0(r2)
   41358:	20c0012e 	bgeu	r4,r3,41360 <_malloc_r+0x474>
   4135c:	10c00015 	stw	r3,0(r2)
   41360:	00800174 	movhi	r2,5
   41364:	10a7fe04 	addi	r2,r2,-24584
   41368:	11000017 	ldw	r4,0(r2)
   4136c:	9c000217 	ldw	r16,8(r19)
   41370:	20c0012e 	bgeu	r4,r3,41378 <_malloc_r+0x48c>
   41374:	10c00015 	stw	r3,0(r2)
   41378:	80c00117 	ldw	r3,4(r16)
   4137c:	00bfff04 	movi	r2,-4
   41380:	1886703a 	and	r3,r3,r2
   41384:	1c45c83a 	sub	r2,r3,r17
   41388:	1c400236 	bltu	r3,r17,41394 <_malloc_r+0x4a8>
   4138c:	00c003c4 	movi	r3,15
   41390:	18800416 	blt	r3,r2,413a4 <_malloc_r+0x4b8>
   41394:	9009883a 	mov	r4,r18
   41398:	00442900 	call	44290 <__malloc_unlock>
   4139c:	0005883a 	mov	r2,zero
   413a0:	003f7b06 	br	41190 <__alt_data_end+0xfffe1190>
   413a4:	88c00054 	ori	r3,r17,1
   413a8:	80c00115 	stw	r3,4(r16)
   413ac:	8463883a 	add	r17,r16,r17
   413b0:	10800054 	ori	r2,r2,1
   413b4:	9c400215 	stw	r17,8(r19)
   413b8:	88800115 	stw	r2,4(r17)
   413bc:	9009883a 	mov	r4,r18
   413c0:	00442900 	call	44290 <__malloc_unlock>
   413c4:	80800204 	addi	r2,r16,8
   413c8:	003f7106 	br	41190 <__alt_data_end+0xfffe1190>
   413cc:	00c00504 	movi	r3,20
   413d0:	18804a2e 	bgeu	r3,r2,414fc <_malloc_r+0x610>
   413d4:	00c01504 	movi	r3,84
   413d8:	18806e36 	bltu	r3,r2,41594 <_malloc_r+0x6a8>
   413dc:	8804d33a 	srli	r2,r17,12
   413e0:	12001bc4 	addi	r8,r2,111
   413e4:	11c01b84 	addi	r7,r2,110
   413e8:	4209883a 	add	r4,r8,r8
   413ec:	003edd06 	br	40f64 <__alt_data_end+0xfffe0f64>
   413f0:	3804d27a 	srli	r2,r7,9
   413f4:	00c00104 	movi	r3,4
   413f8:	1880442e 	bgeu	r3,r2,4150c <_malloc_r+0x620>
   413fc:	00c00504 	movi	r3,20
   41400:	18808136 	bltu	r3,r2,41608 <_malloc_r+0x71c>
   41404:	11401704 	addi	r5,r2,92
   41408:	10c016c4 	addi	r3,r2,91
   4140c:	294b883a 	add	r5,r5,r5
   41410:	294b883a 	add	r5,r5,r5
   41414:	294b883a 	add	r5,r5,r5
   41418:	994b883a 	add	r5,r19,r5
   4141c:	28800017 	ldw	r2,0(r5)
   41420:	01800134 	movhi	r6,4
   41424:	297ffe04 	addi	r5,r5,-8
   41428:	319a9d04 	addi	r6,r6,27252
   4142c:	28806526 	beq	r5,r2,415c4 <_malloc_r+0x6d8>
   41430:	01bfff04 	movi	r6,-4
   41434:	10c00117 	ldw	r3,4(r2)
   41438:	1986703a 	and	r3,r3,r6
   4143c:	38c0022e 	bgeu	r7,r3,41448 <_malloc_r+0x55c>
   41440:	10800217 	ldw	r2,8(r2)
   41444:	28bffb1e 	bne	r5,r2,41434 <__alt_data_end+0xfffe1434>
   41448:	11400317 	ldw	r5,12(r2)
   4144c:	98c00117 	ldw	r3,4(r19)
   41450:	81400315 	stw	r5,12(r16)
   41454:	80800215 	stw	r2,8(r16)
   41458:	2c000215 	stw	r16,8(r5)
   4145c:	14000315 	stw	r16,12(r2)
   41460:	003ef806 	br	41044 <__alt_data_end+0xfffe1044>
   41464:	88c00054 	ori	r3,r17,1
   41468:	80c00115 	stw	r3,4(r16)
   4146c:	8463883a 	add	r17,r16,r17
   41470:	34400515 	stw	r17,20(r6)
   41474:	34400415 	stw	r17,16(r6)
   41478:	10c00054 	ori	r3,r2,1
   4147c:	8a000315 	stw	r8,12(r17)
   41480:	8a000215 	stw	r8,8(r17)
   41484:	88c00115 	stw	r3,4(r17)
   41488:	88a3883a 	add	r17,r17,r2
   4148c:	88800015 	stw	r2,0(r17)
   41490:	9009883a 	mov	r4,r18
   41494:	00442900 	call	44290 <__malloc_unlock>
   41498:	80800204 	addi	r2,r16,8
   4149c:	003f3c06 	br	41190 <__alt_data_end+0xfffe1190>
   414a0:	30c00117 	ldw	r3,4(r6)
   414a4:	003ee706 	br	41044 <__alt_data_end+0xfffe1044>
   414a8:	5ac00044 	addi	r11,r11,1
   414ac:	588000cc 	andi	r2,r11,3
   414b0:	31800204 	addi	r6,r6,8
   414b4:	103efd1e 	bne	r2,zero,410ac <__alt_data_end+0xfffe10ac>
   414b8:	00002406 	br	4154c <_malloc_r+0x660>
   414bc:	14000317 	ldw	r16,12(r2)
   414c0:	143f251e 	bne	r2,r16,41158 <__alt_data_end+0xfffe1158>
   414c4:	21000084 	addi	r4,r4,2
   414c8:	003ebc06 	br	40fbc <__alt_data_end+0xfffe0fbc>
   414cc:	8085883a 	add	r2,r16,r2
   414d0:	10c00117 	ldw	r3,4(r2)
   414d4:	81000317 	ldw	r4,12(r16)
   414d8:	81400217 	ldw	r5,8(r16)
   414dc:	18c00054 	ori	r3,r3,1
   414e0:	10c00115 	stw	r3,4(r2)
   414e4:	29000315 	stw	r4,12(r5)
   414e8:	21400215 	stw	r5,8(r4)
   414ec:	9009883a 	mov	r4,r18
   414f0:	00442900 	call	44290 <__malloc_unlock>
   414f4:	80800204 	addi	r2,r16,8
   414f8:	003f2506 	br	41190 <__alt_data_end+0xfffe1190>
   414fc:	12001704 	addi	r8,r2,92
   41500:	11c016c4 	addi	r7,r2,91
   41504:	4209883a 	add	r4,r8,r8
   41508:	003e9606 	br	40f64 <__alt_data_end+0xfffe0f64>
   4150c:	3804d1ba 	srli	r2,r7,6
   41510:	11400e44 	addi	r5,r2,57
   41514:	10c00e04 	addi	r3,r2,56
   41518:	294b883a 	add	r5,r5,r5
   4151c:	003fbc06 	br	41410 <__alt_data_end+0xfffe1410>
   41520:	84ff5926 	beq	r16,r19,41288 <__alt_data_end+0xfffe1288>
   41524:	00800134 	movhi	r2,4
   41528:	109a9d04 	addi	r2,r2,27252
   4152c:	14000217 	ldw	r16,8(r2)
   41530:	00bfff04 	movi	r2,-4
   41534:	80c00117 	ldw	r3,4(r16)
   41538:	1886703a 	and	r3,r3,r2
   4153c:	003f9106 	br	41384 <__alt_data_end+0xfffe1384>
   41540:	60800217 	ldw	r2,8(r12)
   41544:	213fffc4 	addi	r4,r4,-1
   41548:	1300651e 	bne	r2,r12,416e0 <_malloc_r+0x7f4>
   4154c:	208000cc 	andi	r2,r4,3
   41550:	633ffe04 	addi	r12,r12,-8
   41554:	103ffa1e 	bne	r2,zero,41540 <__alt_data_end+0xfffe1540>
   41558:	98800117 	ldw	r2,4(r19)
   4155c:	0146303a 	nor	r3,zero,r5
   41560:	1884703a 	and	r2,r3,r2
   41564:	98800115 	stw	r2,4(r19)
   41568:	294b883a 	add	r5,r5,r5
   4156c:	117f2836 	bltu	r2,r5,41210 <__alt_data_end+0xfffe1210>
   41570:	283f2726 	beq	r5,zero,41210 <__alt_data_end+0xfffe1210>
   41574:	2886703a 	and	r3,r5,r2
   41578:	5809883a 	mov	r4,r11
   4157c:	183ec31e 	bne	r3,zero,4108c <__alt_data_end+0xfffe108c>
   41580:	294b883a 	add	r5,r5,r5
   41584:	2886703a 	and	r3,r5,r2
   41588:	21000104 	addi	r4,r4,4
   4158c:	183ffc26 	beq	r3,zero,41580 <__alt_data_end+0xfffe1580>
   41590:	003ebe06 	br	4108c <__alt_data_end+0xfffe108c>
   41594:	00c05504 	movi	r3,340
   41598:	18801236 	bltu	r3,r2,415e4 <_malloc_r+0x6f8>
   4159c:	8804d3fa 	srli	r2,r17,15
   415a0:	12001e04 	addi	r8,r2,120
   415a4:	11c01dc4 	addi	r7,r2,119
   415a8:	4209883a 	add	r4,r8,r8
   415ac:	003e6d06 	br	40f64 <__alt_data_end+0xfffe0f64>
   415b0:	00c40004 	movi	r3,4096
   415b4:	003f4606 	br	412d0 <__alt_data_end+0xfffe12d0>
   415b8:	00800044 	movi	r2,1
   415bc:	a0800115 	stw	r2,4(r20)
   415c0:	003f7406 	br	41394 <__alt_data_end+0xfffe1394>
   415c4:	1805d0ba 	srai	r2,r3,2
   415c8:	01c00044 	movi	r7,1
   415cc:	30c00117 	ldw	r3,4(r6)
   415d0:	388e983a 	sll	r7,r7,r2
   415d4:	2805883a 	mov	r2,r5
   415d8:	38c6b03a 	or	r3,r7,r3
   415dc:	30c00115 	stw	r3,4(r6)
   415e0:	003f9b06 	br	41450 <__alt_data_end+0xfffe1450>
   415e4:	00c15504 	movi	r3,1364
   415e8:	18801a36 	bltu	r3,r2,41654 <_malloc_r+0x768>
   415ec:	8804d4ba 	srli	r2,r17,18
   415f0:	12001f44 	addi	r8,r2,125
   415f4:	11c01f04 	addi	r7,r2,124
   415f8:	4209883a 	add	r4,r8,r8
   415fc:	003e5906 	br	40f64 <__alt_data_end+0xfffe0f64>
   41600:	ad400404 	addi	r21,r21,16
   41604:	003f1706 	br	41264 <__alt_data_end+0xfffe1264>
   41608:	00c01504 	movi	r3,84
   4160c:	18802336 	bltu	r3,r2,4169c <_malloc_r+0x7b0>
   41610:	3804d33a 	srli	r2,r7,12
   41614:	11401bc4 	addi	r5,r2,111
   41618:	10c01b84 	addi	r3,r2,110
   4161c:	294b883a 	add	r5,r5,r5
   41620:	003f7b06 	br	41410 <__alt_data_end+0xfffe1410>
   41624:	9c000217 	ldw	r16,8(r19)
   41628:	00bfff04 	movi	r2,-4
   4162c:	80c00117 	ldw	r3,4(r16)
   41630:	1886703a 	and	r3,r3,r2
   41634:	003f5306 	br	41384 <__alt_data_end+0xfffe1384>
   41638:	3083ffcc 	andi	r2,r6,4095
   4163c:	103f181e 	bne	r2,zero,412a0 <__alt_data_end+0xfffe12a0>
   41640:	99000217 	ldw	r4,8(r19)
   41644:	b545883a 	add	r2,r22,r21
   41648:	10800054 	ori	r2,r2,1
   4164c:	20800115 	stw	r2,4(r4)
   41650:	003f3e06 	br	4134c <__alt_data_end+0xfffe134c>
   41654:	01003f84 	movi	r4,254
   41658:	02001fc4 	movi	r8,127
   4165c:	01c01f84 	movi	r7,126
   41660:	003e4006 	br	40f64 <__alt_data_end+0xfffe0f64>
   41664:	00800174 	movhi	r2,5
   41668:	10a12f04 	addi	r2,r2,-31556
   4166c:	15000015 	stw	r20,0(r2)
   41670:	003f1106 	br	412b8 <__alt_data_end+0xfffe12b8>
   41674:	00800044 	movi	r2,1
   41678:	002b883a 	mov	r21,zero
   4167c:	003f1f06 	br	412fc <__alt_data_end+0xfffe12fc>
   41680:	81400204 	addi	r5,r16,8
   41684:	9009883a 	mov	r4,r18
   41688:	0041d8c0 	call	41d8c <_free_r>
   4168c:	00800174 	movhi	r2,5
   41690:	10a80904 	addi	r2,r2,-24540
   41694:	10c00017 	ldw	r3,0(r2)
   41698:	003f2c06 	br	4134c <__alt_data_end+0xfffe134c>
   4169c:	00c05504 	movi	r3,340
   416a0:	18800536 	bltu	r3,r2,416b8 <_malloc_r+0x7cc>
   416a4:	3804d3fa 	srli	r2,r7,15
   416a8:	11401e04 	addi	r5,r2,120
   416ac:	10c01dc4 	addi	r3,r2,119
   416b0:	294b883a 	add	r5,r5,r5
   416b4:	003f5606 	br	41410 <__alt_data_end+0xfffe1410>
   416b8:	00c15504 	movi	r3,1364
   416bc:	18800536 	bltu	r3,r2,416d4 <_malloc_r+0x7e8>
   416c0:	3804d4ba 	srli	r2,r7,18
   416c4:	11401f44 	addi	r5,r2,125
   416c8:	10c01f04 	addi	r3,r2,124
   416cc:	294b883a 	add	r5,r5,r5
   416d0:	003f4f06 	br	41410 <__alt_data_end+0xfffe1410>
   416d4:	01403f84 	movi	r5,254
   416d8:	00c01f84 	movi	r3,126
   416dc:	003f4c06 	br	41410 <__alt_data_end+0xfffe1410>
   416e0:	98800117 	ldw	r2,4(r19)
   416e4:	003fa006 	br	41568 <__alt_data_end+0xfffe1568>
   416e8:	8808d0fa 	srli	r4,r17,3
   416ec:	20800044 	addi	r2,r4,1
   416f0:	1085883a 	add	r2,r2,r2
   416f4:	003e9006 	br	41138 <__alt_data_end+0xfffe1138>

000416f8 <_puts_r>:
   416f8:	defff604 	addi	sp,sp,-40
   416fc:	dc000715 	stw	r16,28(sp)
   41700:	2021883a 	mov	r16,r4
   41704:	2809883a 	mov	r4,r5
   41708:	dc400815 	stw	r17,32(sp)
   4170c:	dfc00915 	stw	ra,36(sp)
   41710:	2823883a 	mov	r17,r5
   41714:	00418200 	call	41820 <strlen>
   41718:	10c00044 	addi	r3,r2,1
   4171c:	d8800115 	stw	r2,4(sp)
   41720:	00800134 	movhi	r2,4
   41724:	109a7004 	addi	r2,r2,27072
   41728:	d8800215 	stw	r2,8(sp)
   4172c:	00800044 	movi	r2,1
   41730:	d8800315 	stw	r2,12(sp)
   41734:	00800084 	movi	r2,2
   41738:	dc400015 	stw	r17,0(sp)
   4173c:	d8c00615 	stw	r3,24(sp)
   41740:	dec00415 	stw	sp,16(sp)
   41744:	d8800515 	stw	r2,20(sp)
   41748:	80000226 	beq	r16,zero,41754 <_puts_r+0x5c>
   4174c:	80800e17 	ldw	r2,56(r16)
   41750:	10001426 	beq	r2,zero,417a4 <_puts_r+0xac>
   41754:	81400217 	ldw	r5,8(r16)
   41758:	2880030b 	ldhu	r2,12(r5)
   4175c:	10c8000c 	andi	r3,r2,8192
   41760:	1800061e 	bne	r3,zero,4177c <_puts_r+0x84>
   41764:	29001917 	ldw	r4,100(r5)
   41768:	00f7ffc4 	movi	r3,-8193
   4176c:	10880014 	ori	r2,r2,8192
   41770:	20c6703a 	and	r3,r4,r3
   41774:	2880030d 	sth	r2,12(r5)
   41778:	28c01915 	stw	r3,100(r5)
   4177c:	d9800404 	addi	r6,sp,16
   41780:	8009883a 	mov	r4,r16
   41784:	004209c0 	call	4209c <__sfvwrite_r>
   41788:	1000091e 	bne	r2,zero,417b0 <_puts_r+0xb8>
   4178c:	00800284 	movi	r2,10
   41790:	dfc00917 	ldw	ra,36(sp)
   41794:	dc400817 	ldw	r17,32(sp)
   41798:	dc000717 	ldw	r16,28(sp)
   4179c:	dec00a04 	addi	sp,sp,40
   417a0:	f800283a 	ret
   417a4:	8009883a 	mov	r4,r16
   417a8:	0041c180 	call	41c18 <__sinit>
   417ac:	003fe906 	br	41754 <__alt_data_end+0xfffe1754>
   417b0:	00bfffc4 	movi	r2,-1
   417b4:	003ff606 	br	41790 <__alt_data_end+0xfffe1790>

000417b8 <puts>:
   417b8:	00800174 	movhi	r2,5
   417bc:	10a13204 	addi	r2,r2,-31544
   417c0:	200b883a 	mov	r5,r4
   417c4:	11000017 	ldw	r4,0(r2)
   417c8:	00416f81 	jmpi	416f8 <_puts_r>

000417cc <_sbrk_r>:
   417cc:	defffd04 	addi	sp,sp,-12
   417d0:	dc000015 	stw	r16,0(sp)
   417d4:	04000174 	movhi	r16,5
   417d8:	dc400115 	stw	r17,4(sp)
   417dc:	84280104 	addi	r16,r16,-24572
   417e0:	2023883a 	mov	r17,r4
   417e4:	2809883a 	mov	r4,r5
   417e8:	dfc00215 	stw	ra,8(sp)
   417ec:	80000015 	stw	zero,0(r16)
   417f0:	00444780 	call	44478 <sbrk>
   417f4:	00ffffc4 	movi	r3,-1
   417f8:	10c00526 	beq	r2,r3,41810 <_sbrk_r+0x44>
   417fc:	dfc00217 	ldw	ra,8(sp)
   41800:	dc400117 	ldw	r17,4(sp)
   41804:	dc000017 	ldw	r16,0(sp)
   41808:	dec00304 	addi	sp,sp,12
   4180c:	f800283a 	ret
   41810:	80c00017 	ldw	r3,0(r16)
   41814:	183ff926 	beq	r3,zero,417fc <__alt_data_end+0xfffe17fc>
   41818:	88c00015 	stw	r3,0(r17)
   4181c:	003ff706 	br	417fc <__alt_data_end+0xfffe17fc>

00041820 <strlen>:
   41820:	208000cc 	andi	r2,r4,3
   41824:	10002026 	beq	r2,zero,418a8 <strlen+0x88>
   41828:	20800007 	ldb	r2,0(r4)
   4182c:	10002026 	beq	r2,zero,418b0 <strlen+0x90>
   41830:	2005883a 	mov	r2,r4
   41834:	00000206 	br	41840 <strlen+0x20>
   41838:	10c00007 	ldb	r3,0(r2)
   4183c:	18001826 	beq	r3,zero,418a0 <strlen+0x80>
   41840:	10800044 	addi	r2,r2,1
   41844:	10c000cc 	andi	r3,r2,3
   41848:	183ffb1e 	bne	r3,zero,41838 <__alt_data_end+0xfffe1838>
   4184c:	10c00017 	ldw	r3,0(r2)
   41850:	01ffbff4 	movhi	r7,65279
   41854:	39ffbfc4 	addi	r7,r7,-257
   41858:	00ca303a 	nor	r5,zero,r3
   4185c:	01a02074 	movhi	r6,32897
   41860:	19c7883a 	add	r3,r3,r7
   41864:	31a02004 	addi	r6,r6,-32640
   41868:	1946703a 	and	r3,r3,r5
   4186c:	1986703a 	and	r3,r3,r6
   41870:	1800091e 	bne	r3,zero,41898 <strlen+0x78>
   41874:	10800104 	addi	r2,r2,4
   41878:	10c00017 	ldw	r3,0(r2)
   4187c:	19cb883a 	add	r5,r3,r7
   41880:	00c6303a 	nor	r3,zero,r3
   41884:	28c6703a 	and	r3,r5,r3
   41888:	1986703a 	and	r3,r3,r6
   4188c:	183ff926 	beq	r3,zero,41874 <__alt_data_end+0xfffe1874>
   41890:	00000106 	br	41898 <strlen+0x78>
   41894:	10800044 	addi	r2,r2,1
   41898:	10c00007 	ldb	r3,0(r2)
   4189c:	183ffd1e 	bne	r3,zero,41894 <__alt_data_end+0xfffe1894>
   418a0:	1105c83a 	sub	r2,r2,r4
   418a4:	f800283a 	ret
   418a8:	2005883a 	mov	r2,r4
   418ac:	003fe706 	br	4184c <__alt_data_end+0xfffe184c>
   418b0:	0005883a 	mov	r2,zero
   418b4:	f800283a 	ret

000418b8 <__fp_unlock>:
   418b8:	0005883a 	mov	r2,zero
   418bc:	f800283a 	ret

000418c0 <_cleanup_r>:
   418c0:	01400134 	movhi	r5,4
   418c4:	294d1104 	addi	r5,r5,13380
   418c8:	00426281 	jmpi	42628 <_fwalk_reent>

000418cc <__sinit.part.1>:
   418cc:	defff704 	addi	sp,sp,-36
   418d0:	00c00134 	movhi	r3,4
   418d4:	dfc00815 	stw	ra,32(sp)
   418d8:	ddc00715 	stw	r23,28(sp)
   418dc:	dd800615 	stw	r22,24(sp)
   418e0:	dd400515 	stw	r21,20(sp)
   418e4:	dd000415 	stw	r20,16(sp)
   418e8:	dcc00315 	stw	r19,12(sp)
   418ec:	dc800215 	stw	r18,8(sp)
   418f0:	dc400115 	stw	r17,4(sp)
   418f4:	dc000015 	stw	r16,0(sp)
   418f8:	18c63004 	addi	r3,r3,6336
   418fc:	24000117 	ldw	r16,4(r4)
   41900:	20c00f15 	stw	r3,60(r4)
   41904:	2080bb04 	addi	r2,r4,748
   41908:	00c000c4 	movi	r3,3
   4190c:	20c0b915 	stw	r3,740(r4)
   41910:	2080ba15 	stw	r2,744(r4)
   41914:	2000b815 	stw	zero,736(r4)
   41918:	05c00204 	movi	r23,8
   4191c:	00800104 	movi	r2,4
   41920:	2025883a 	mov	r18,r4
   41924:	b80d883a 	mov	r6,r23
   41928:	81001704 	addi	r4,r16,92
   4192c:	000b883a 	mov	r5,zero
   41930:	80000015 	stw	zero,0(r16)
   41934:	80000115 	stw	zero,4(r16)
   41938:	80000215 	stw	zero,8(r16)
   4193c:	8080030d 	sth	r2,12(r16)
   41940:	80001915 	stw	zero,100(r16)
   41944:	8000038d 	sth	zero,14(r16)
   41948:	80000415 	stw	zero,16(r16)
   4194c:	80000515 	stw	zero,20(r16)
   41950:	80000615 	stw	zero,24(r16)
   41954:	0042a740 	call	42a74 <memset>
   41958:	05800134 	movhi	r22,4
   4195c:	94400217 	ldw	r17,8(r18)
   41960:	05400134 	movhi	r21,4
   41964:	05000134 	movhi	r20,4
   41968:	04c00134 	movhi	r19,4
   4196c:	b58c4004 	addi	r22,r22,12544
   41970:	ad4c5704 	addi	r21,r21,12636
   41974:	a50c7604 	addi	r20,r20,12760
   41978:	9ccc8d04 	addi	r19,r19,12852
   4197c:	85800815 	stw	r22,32(r16)
   41980:	85400915 	stw	r21,36(r16)
   41984:	85000a15 	stw	r20,40(r16)
   41988:	84c00b15 	stw	r19,44(r16)
   4198c:	84000715 	stw	r16,28(r16)
   41990:	00800284 	movi	r2,10
   41994:	8880030d 	sth	r2,12(r17)
   41998:	00800044 	movi	r2,1
   4199c:	b80d883a 	mov	r6,r23
   419a0:	89001704 	addi	r4,r17,92
   419a4:	000b883a 	mov	r5,zero
   419a8:	88000015 	stw	zero,0(r17)
   419ac:	88000115 	stw	zero,4(r17)
   419b0:	88000215 	stw	zero,8(r17)
   419b4:	88001915 	stw	zero,100(r17)
   419b8:	8880038d 	sth	r2,14(r17)
   419bc:	88000415 	stw	zero,16(r17)
   419c0:	88000515 	stw	zero,20(r17)
   419c4:	88000615 	stw	zero,24(r17)
   419c8:	0042a740 	call	42a74 <memset>
   419cc:	94000317 	ldw	r16,12(r18)
   419d0:	00800484 	movi	r2,18
   419d4:	8c400715 	stw	r17,28(r17)
   419d8:	8d800815 	stw	r22,32(r17)
   419dc:	8d400915 	stw	r21,36(r17)
   419e0:	8d000a15 	stw	r20,40(r17)
   419e4:	8cc00b15 	stw	r19,44(r17)
   419e8:	8080030d 	sth	r2,12(r16)
   419ec:	00800084 	movi	r2,2
   419f0:	80000015 	stw	zero,0(r16)
   419f4:	80000115 	stw	zero,4(r16)
   419f8:	80000215 	stw	zero,8(r16)
   419fc:	80001915 	stw	zero,100(r16)
   41a00:	8080038d 	sth	r2,14(r16)
   41a04:	80000415 	stw	zero,16(r16)
   41a08:	80000515 	stw	zero,20(r16)
   41a0c:	80000615 	stw	zero,24(r16)
   41a10:	b80d883a 	mov	r6,r23
   41a14:	000b883a 	mov	r5,zero
   41a18:	81001704 	addi	r4,r16,92
   41a1c:	0042a740 	call	42a74 <memset>
   41a20:	00800044 	movi	r2,1
   41a24:	84000715 	stw	r16,28(r16)
   41a28:	85800815 	stw	r22,32(r16)
   41a2c:	85400915 	stw	r21,36(r16)
   41a30:	85000a15 	stw	r20,40(r16)
   41a34:	84c00b15 	stw	r19,44(r16)
   41a38:	90800e15 	stw	r2,56(r18)
   41a3c:	dfc00817 	ldw	ra,32(sp)
   41a40:	ddc00717 	ldw	r23,28(sp)
   41a44:	dd800617 	ldw	r22,24(sp)
   41a48:	dd400517 	ldw	r21,20(sp)
   41a4c:	dd000417 	ldw	r20,16(sp)
   41a50:	dcc00317 	ldw	r19,12(sp)
   41a54:	dc800217 	ldw	r18,8(sp)
   41a58:	dc400117 	ldw	r17,4(sp)
   41a5c:	dc000017 	ldw	r16,0(sp)
   41a60:	dec00904 	addi	sp,sp,36
   41a64:	f800283a 	ret

00041a68 <__fp_lock>:
   41a68:	0005883a 	mov	r2,zero
   41a6c:	f800283a 	ret

00041a70 <__sfmoreglue>:
   41a70:	defffc04 	addi	sp,sp,-16
   41a74:	dc800215 	stw	r18,8(sp)
   41a78:	2825883a 	mov	r18,r5
   41a7c:	dc000015 	stw	r16,0(sp)
   41a80:	01401a04 	movi	r5,104
   41a84:	2021883a 	mov	r16,r4
   41a88:	913fffc4 	addi	r4,r18,-1
   41a8c:	dfc00315 	stw	ra,12(sp)
   41a90:	dc400115 	stw	r17,4(sp)
   41a94:	0040e9c0 	call	40e9c <__mulsi3>
   41a98:	8009883a 	mov	r4,r16
   41a9c:	11401d04 	addi	r5,r2,116
   41aa0:	1023883a 	mov	r17,r2
   41aa4:	0040eec0 	call	40eec <_malloc_r>
   41aa8:	1021883a 	mov	r16,r2
   41aac:	10000726 	beq	r2,zero,41acc <__sfmoreglue+0x5c>
   41ab0:	11000304 	addi	r4,r2,12
   41ab4:	10000015 	stw	zero,0(r2)
   41ab8:	14800115 	stw	r18,4(r2)
   41abc:	11000215 	stw	r4,8(r2)
   41ac0:	89801a04 	addi	r6,r17,104
   41ac4:	000b883a 	mov	r5,zero
   41ac8:	0042a740 	call	42a74 <memset>
   41acc:	8005883a 	mov	r2,r16
   41ad0:	dfc00317 	ldw	ra,12(sp)
   41ad4:	dc800217 	ldw	r18,8(sp)
   41ad8:	dc400117 	ldw	r17,4(sp)
   41adc:	dc000017 	ldw	r16,0(sp)
   41ae0:	dec00404 	addi	sp,sp,16
   41ae4:	f800283a 	ret

00041ae8 <__sfp>:
   41ae8:	defffb04 	addi	sp,sp,-20
   41aec:	dc000015 	stw	r16,0(sp)
   41af0:	04000174 	movhi	r16,5
   41af4:	84213104 	addi	r16,r16,-31548
   41af8:	dcc00315 	stw	r19,12(sp)
   41afc:	2027883a 	mov	r19,r4
   41b00:	81000017 	ldw	r4,0(r16)
   41b04:	dfc00415 	stw	ra,16(sp)
   41b08:	dc800215 	stw	r18,8(sp)
   41b0c:	20800e17 	ldw	r2,56(r4)
   41b10:	dc400115 	stw	r17,4(sp)
   41b14:	1000021e 	bne	r2,zero,41b20 <__sfp+0x38>
   41b18:	00418cc0 	call	418cc <__sinit.part.1>
   41b1c:	81000017 	ldw	r4,0(r16)
   41b20:	2480b804 	addi	r18,r4,736
   41b24:	047fffc4 	movi	r17,-1
   41b28:	91000117 	ldw	r4,4(r18)
   41b2c:	94000217 	ldw	r16,8(r18)
   41b30:	213fffc4 	addi	r4,r4,-1
   41b34:	20000a16 	blt	r4,zero,41b60 <__sfp+0x78>
   41b38:	8080030f 	ldh	r2,12(r16)
   41b3c:	10000c26 	beq	r2,zero,41b70 <__sfp+0x88>
   41b40:	80c01d04 	addi	r3,r16,116
   41b44:	00000206 	br	41b50 <__sfp+0x68>
   41b48:	18bfe60f 	ldh	r2,-104(r3)
   41b4c:	10000826 	beq	r2,zero,41b70 <__sfp+0x88>
   41b50:	213fffc4 	addi	r4,r4,-1
   41b54:	1c3ffd04 	addi	r16,r3,-12
   41b58:	18c01a04 	addi	r3,r3,104
   41b5c:	247ffa1e 	bne	r4,r17,41b48 <__alt_data_end+0xfffe1b48>
   41b60:	90800017 	ldw	r2,0(r18)
   41b64:	10001d26 	beq	r2,zero,41bdc <__sfp+0xf4>
   41b68:	1025883a 	mov	r18,r2
   41b6c:	003fee06 	br	41b28 <__alt_data_end+0xfffe1b28>
   41b70:	00bfffc4 	movi	r2,-1
   41b74:	8080038d 	sth	r2,14(r16)
   41b78:	00800044 	movi	r2,1
   41b7c:	8080030d 	sth	r2,12(r16)
   41b80:	80001915 	stw	zero,100(r16)
   41b84:	80000015 	stw	zero,0(r16)
   41b88:	80000215 	stw	zero,8(r16)
   41b8c:	80000115 	stw	zero,4(r16)
   41b90:	80000415 	stw	zero,16(r16)
   41b94:	80000515 	stw	zero,20(r16)
   41b98:	80000615 	stw	zero,24(r16)
   41b9c:	01800204 	movi	r6,8
   41ba0:	000b883a 	mov	r5,zero
   41ba4:	81001704 	addi	r4,r16,92
   41ba8:	0042a740 	call	42a74 <memset>
   41bac:	8005883a 	mov	r2,r16
   41bb0:	80000c15 	stw	zero,48(r16)
   41bb4:	80000d15 	stw	zero,52(r16)
   41bb8:	80001115 	stw	zero,68(r16)
   41bbc:	80001215 	stw	zero,72(r16)
   41bc0:	dfc00417 	ldw	ra,16(sp)
   41bc4:	dcc00317 	ldw	r19,12(sp)
   41bc8:	dc800217 	ldw	r18,8(sp)
   41bcc:	dc400117 	ldw	r17,4(sp)
   41bd0:	dc000017 	ldw	r16,0(sp)
   41bd4:	dec00504 	addi	sp,sp,20
   41bd8:	f800283a 	ret
   41bdc:	01400104 	movi	r5,4
   41be0:	9809883a 	mov	r4,r19
   41be4:	0041a700 	call	41a70 <__sfmoreglue>
   41be8:	90800015 	stw	r2,0(r18)
   41bec:	103fde1e 	bne	r2,zero,41b68 <__alt_data_end+0xfffe1b68>
   41bf0:	00800304 	movi	r2,12
   41bf4:	98800015 	stw	r2,0(r19)
   41bf8:	0005883a 	mov	r2,zero
   41bfc:	003ff006 	br	41bc0 <__alt_data_end+0xfffe1bc0>

00041c00 <_cleanup>:
   41c00:	00800174 	movhi	r2,5
   41c04:	10a13104 	addi	r2,r2,-31548
   41c08:	11000017 	ldw	r4,0(r2)
   41c0c:	01400134 	movhi	r5,4
   41c10:	294d1104 	addi	r5,r5,13380
   41c14:	00426281 	jmpi	42628 <_fwalk_reent>

00041c18 <__sinit>:
   41c18:	20800e17 	ldw	r2,56(r4)
   41c1c:	10000126 	beq	r2,zero,41c24 <__sinit+0xc>
   41c20:	f800283a 	ret
   41c24:	00418cc1 	jmpi	418cc <__sinit.part.1>

00041c28 <__sfp_lock_acquire>:
   41c28:	f800283a 	ret

00041c2c <__sfp_lock_release>:
   41c2c:	f800283a 	ret

00041c30 <__sinit_lock_acquire>:
   41c30:	f800283a 	ret

00041c34 <__sinit_lock_release>:
   41c34:	f800283a 	ret

00041c38 <__fp_lock_all>:
   41c38:	00800174 	movhi	r2,5
   41c3c:	10a13204 	addi	r2,r2,-31544
   41c40:	11000017 	ldw	r4,0(r2)
   41c44:	01400134 	movhi	r5,4
   41c48:	29469a04 	addi	r5,r5,6760
   41c4c:	00425641 	jmpi	42564 <_fwalk>

00041c50 <__fp_unlock_all>:
   41c50:	00800174 	movhi	r2,5
   41c54:	10a13204 	addi	r2,r2,-31544
   41c58:	11000017 	ldw	r4,0(r2)
   41c5c:	01400134 	movhi	r5,4
   41c60:	29462e04 	addi	r5,r5,6328
   41c64:	00425641 	jmpi	42564 <_fwalk>

00041c68 <_malloc_trim_r>:
   41c68:	defffb04 	addi	sp,sp,-20
   41c6c:	dcc00315 	stw	r19,12(sp)
   41c70:	04c00134 	movhi	r19,4
   41c74:	dc800215 	stw	r18,8(sp)
   41c78:	dc400115 	stw	r17,4(sp)
   41c7c:	dc000015 	stw	r16,0(sp)
   41c80:	dfc00415 	stw	ra,16(sp)
   41c84:	2821883a 	mov	r16,r5
   41c88:	9cda9d04 	addi	r19,r19,27252
   41c8c:	2025883a 	mov	r18,r4
   41c90:	004426c0 	call	4426c <__malloc_lock>
   41c94:	98800217 	ldw	r2,8(r19)
   41c98:	14400117 	ldw	r17,4(r2)
   41c9c:	00bfff04 	movi	r2,-4
   41ca0:	88a2703a 	and	r17,r17,r2
   41ca4:	8c21c83a 	sub	r16,r17,r16
   41ca8:	8403fbc4 	addi	r16,r16,4079
   41cac:	8020d33a 	srli	r16,r16,12
   41cb0:	0083ffc4 	movi	r2,4095
   41cb4:	843fffc4 	addi	r16,r16,-1
   41cb8:	8020933a 	slli	r16,r16,12
   41cbc:	1400060e 	bge	r2,r16,41cd8 <_malloc_trim_r+0x70>
   41cc0:	000b883a 	mov	r5,zero
   41cc4:	9009883a 	mov	r4,r18
   41cc8:	00417cc0 	call	417cc <_sbrk_r>
   41ccc:	98c00217 	ldw	r3,8(r19)
   41cd0:	1c47883a 	add	r3,r3,r17
   41cd4:	10c00a26 	beq	r2,r3,41d00 <_malloc_trim_r+0x98>
   41cd8:	9009883a 	mov	r4,r18
   41cdc:	00442900 	call	44290 <__malloc_unlock>
   41ce0:	0005883a 	mov	r2,zero
   41ce4:	dfc00417 	ldw	ra,16(sp)
   41ce8:	dcc00317 	ldw	r19,12(sp)
   41cec:	dc800217 	ldw	r18,8(sp)
   41cf0:	dc400117 	ldw	r17,4(sp)
   41cf4:	dc000017 	ldw	r16,0(sp)
   41cf8:	dec00504 	addi	sp,sp,20
   41cfc:	f800283a 	ret
   41d00:	040bc83a 	sub	r5,zero,r16
   41d04:	9009883a 	mov	r4,r18
   41d08:	00417cc0 	call	417cc <_sbrk_r>
   41d0c:	00ffffc4 	movi	r3,-1
   41d10:	10c00d26 	beq	r2,r3,41d48 <_malloc_trim_r+0xe0>
   41d14:	00c00174 	movhi	r3,5
   41d18:	18e80904 	addi	r3,r3,-24540
   41d1c:	18800017 	ldw	r2,0(r3)
   41d20:	99000217 	ldw	r4,8(r19)
   41d24:	8c23c83a 	sub	r17,r17,r16
   41d28:	8c400054 	ori	r17,r17,1
   41d2c:	1421c83a 	sub	r16,r2,r16
   41d30:	24400115 	stw	r17,4(r4)
   41d34:	9009883a 	mov	r4,r18
   41d38:	1c000015 	stw	r16,0(r3)
   41d3c:	00442900 	call	44290 <__malloc_unlock>
   41d40:	00800044 	movi	r2,1
   41d44:	003fe706 	br	41ce4 <__alt_data_end+0xfffe1ce4>
   41d48:	000b883a 	mov	r5,zero
   41d4c:	9009883a 	mov	r4,r18
   41d50:	00417cc0 	call	417cc <_sbrk_r>
   41d54:	99000217 	ldw	r4,8(r19)
   41d58:	014003c4 	movi	r5,15
   41d5c:	1107c83a 	sub	r3,r2,r4
   41d60:	28ffdd0e 	bge	r5,r3,41cd8 <__alt_data_end+0xfffe1cd8>
   41d64:	01400174 	movhi	r5,5
   41d68:	29612f04 	addi	r5,r5,-31556
   41d6c:	29400017 	ldw	r5,0(r5)
   41d70:	18c00054 	ori	r3,r3,1
   41d74:	20c00115 	stw	r3,4(r4)
   41d78:	00c00174 	movhi	r3,5
   41d7c:	1145c83a 	sub	r2,r2,r5
   41d80:	18e80904 	addi	r3,r3,-24540
   41d84:	18800015 	stw	r2,0(r3)
   41d88:	003fd306 	br	41cd8 <__alt_data_end+0xfffe1cd8>

00041d8c <_free_r>:
   41d8c:	28004126 	beq	r5,zero,41e94 <_free_r+0x108>
   41d90:	defffd04 	addi	sp,sp,-12
   41d94:	dc400115 	stw	r17,4(sp)
   41d98:	dc000015 	stw	r16,0(sp)
   41d9c:	2023883a 	mov	r17,r4
   41da0:	2821883a 	mov	r16,r5
   41da4:	dfc00215 	stw	ra,8(sp)
   41da8:	004426c0 	call	4426c <__malloc_lock>
   41dac:	81ffff17 	ldw	r7,-4(r16)
   41db0:	00bfff84 	movi	r2,-2
   41db4:	01000134 	movhi	r4,4
   41db8:	81bffe04 	addi	r6,r16,-8
   41dbc:	3884703a 	and	r2,r7,r2
   41dc0:	211a9d04 	addi	r4,r4,27252
   41dc4:	308b883a 	add	r5,r6,r2
   41dc8:	2a400117 	ldw	r9,4(r5)
   41dcc:	22000217 	ldw	r8,8(r4)
   41dd0:	00ffff04 	movi	r3,-4
   41dd4:	48c6703a 	and	r3,r9,r3
   41dd8:	2a005726 	beq	r5,r8,41f38 <_free_r+0x1ac>
   41ddc:	28c00115 	stw	r3,4(r5)
   41de0:	39c0004c 	andi	r7,r7,1
   41de4:	3800091e 	bne	r7,zero,41e0c <_free_r+0x80>
   41de8:	823ffe17 	ldw	r8,-8(r16)
   41dec:	22400204 	addi	r9,r4,8
   41df0:	320dc83a 	sub	r6,r6,r8
   41df4:	31c00217 	ldw	r7,8(r6)
   41df8:	1205883a 	add	r2,r2,r8
   41dfc:	3a406526 	beq	r7,r9,41f94 <_free_r+0x208>
   41e00:	32000317 	ldw	r8,12(r6)
   41e04:	3a000315 	stw	r8,12(r7)
   41e08:	41c00215 	stw	r7,8(r8)
   41e0c:	28cf883a 	add	r7,r5,r3
   41e10:	39c00117 	ldw	r7,4(r7)
   41e14:	39c0004c 	andi	r7,r7,1
   41e18:	38003a26 	beq	r7,zero,41f04 <_free_r+0x178>
   41e1c:	10c00054 	ori	r3,r2,1
   41e20:	30c00115 	stw	r3,4(r6)
   41e24:	3087883a 	add	r3,r6,r2
   41e28:	18800015 	stw	r2,0(r3)
   41e2c:	00c07fc4 	movi	r3,511
   41e30:	18801936 	bltu	r3,r2,41e98 <_free_r+0x10c>
   41e34:	1004d0fa 	srli	r2,r2,3
   41e38:	01c00044 	movi	r7,1
   41e3c:	21400117 	ldw	r5,4(r4)
   41e40:	10c00044 	addi	r3,r2,1
   41e44:	18c7883a 	add	r3,r3,r3
   41e48:	1005d0ba 	srai	r2,r2,2
   41e4c:	18c7883a 	add	r3,r3,r3
   41e50:	18c7883a 	add	r3,r3,r3
   41e54:	1907883a 	add	r3,r3,r4
   41e58:	3884983a 	sll	r2,r7,r2
   41e5c:	19c00017 	ldw	r7,0(r3)
   41e60:	1a3ffe04 	addi	r8,r3,-8
   41e64:	1144b03a 	or	r2,r2,r5
   41e68:	32000315 	stw	r8,12(r6)
   41e6c:	31c00215 	stw	r7,8(r6)
   41e70:	20800115 	stw	r2,4(r4)
   41e74:	19800015 	stw	r6,0(r3)
   41e78:	39800315 	stw	r6,12(r7)
   41e7c:	8809883a 	mov	r4,r17
   41e80:	dfc00217 	ldw	ra,8(sp)
   41e84:	dc400117 	ldw	r17,4(sp)
   41e88:	dc000017 	ldw	r16,0(sp)
   41e8c:	dec00304 	addi	sp,sp,12
   41e90:	00442901 	jmpi	44290 <__malloc_unlock>
   41e94:	f800283a 	ret
   41e98:	100ad27a 	srli	r5,r2,9
   41e9c:	00c00104 	movi	r3,4
   41ea0:	19404a36 	bltu	r3,r5,41fcc <_free_r+0x240>
   41ea4:	100ad1ba 	srli	r5,r2,6
   41ea8:	28c00e44 	addi	r3,r5,57
   41eac:	18c7883a 	add	r3,r3,r3
   41eb0:	29400e04 	addi	r5,r5,56
   41eb4:	18c7883a 	add	r3,r3,r3
   41eb8:	18c7883a 	add	r3,r3,r3
   41ebc:	1909883a 	add	r4,r3,r4
   41ec0:	20c00017 	ldw	r3,0(r4)
   41ec4:	01c00134 	movhi	r7,4
   41ec8:	213ffe04 	addi	r4,r4,-8
   41ecc:	39da9d04 	addi	r7,r7,27252
   41ed0:	20c04426 	beq	r4,r3,41fe4 <_free_r+0x258>
   41ed4:	01ffff04 	movi	r7,-4
   41ed8:	19400117 	ldw	r5,4(r3)
   41edc:	29ca703a 	and	r5,r5,r7
   41ee0:	1140022e 	bgeu	r2,r5,41eec <_free_r+0x160>
   41ee4:	18c00217 	ldw	r3,8(r3)
   41ee8:	20fffb1e 	bne	r4,r3,41ed8 <__alt_data_end+0xfffe1ed8>
   41eec:	19000317 	ldw	r4,12(r3)
   41ef0:	31000315 	stw	r4,12(r6)
   41ef4:	30c00215 	stw	r3,8(r6)
   41ef8:	21800215 	stw	r6,8(r4)
   41efc:	19800315 	stw	r6,12(r3)
   41f00:	003fde06 	br	41e7c <__alt_data_end+0xfffe1e7c>
   41f04:	29c00217 	ldw	r7,8(r5)
   41f08:	10c5883a 	add	r2,r2,r3
   41f0c:	00c00134 	movhi	r3,4
   41f10:	18da9f04 	addi	r3,r3,27260
   41f14:	38c03b26 	beq	r7,r3,42004 <_free_r+0x278>
   41f18:	2a000317 	ldw	r8,12(r5)
   41f1c:	11400054 	ori	r5,r2,1
   41f20:	3087883a 	add	r3,r6,r2
   41f24:	3a000315 	stw	r8,12(r7)
   41f28:	41c00215 	stw	r7,8(r8)
   41f2c:	31400115 	stw	r5,4(r6)
   41f30:	18800015 	stw	r2,0(r3)
   41f34:	003fbd06 	br	41e2c <__alt_data_end+0xfffe1e2c>
   41f38:	39c0004c 	andi	r7,r7,1
   41f3c:	10c5883a 	add	r2,r2,r3
   41f40:	3800071e 	bne	r7,zero,41f60 <_free_r+0x1d4>
   41f44:	81fffe17 	ldw	r7,-8(r16)
   41f48:	31cdc83a 	sub	r6,r6,r7
   41f4c:	30c00317 	ldw	r3,12(r6)
   41f50:	31400217 	ldw	r5,8(r6)
   41f54:	11c5883a 	add	r2,r2,r7
   41f58:	28c00315 	stw	r3,12(r5)
   41f5c:	19400215 	stw	r5,8(r3)
   41f60:	10c00054 	ori	r3,r2,1
   41f64:	30c00115 	stw	r3,4(r6)
   41f68:	00c00174 	movhi	r3,5
   41f6c:	18e13004 	addi	r3,r3,-31552
   41f70:	18c00017 	ldw	r3,0(r3)
   41f74:	21800215 	stw	r6,8(r4)
   41f78:	10ffc036 	bltu	r2,r3,41e7c <__alt_data_end+0xfffe1e7c>
   41f7c:	00800174 	movhi	r2,5
   41f80:	10a80004 	addi	r2,r2,-24576
   41f84:	11400017 	ldw	r5,0(r2)
   41f88:	8809883a 	mov	r4,r17
   41f8c:	0041c680 	call	41c68 <_malloc_trim_r>
   41f90:	003fba06 	br	41e7c <__alt_data_end+0xfffe1e7c>
   41f94:	28c9883a 	add	r4,r5,r3
   41f98:	21000117 	ldw	r4,4(r4)
   41f9c:	2100004c 	andi	r4,r4,1
   41fa0:	2000391e 	bne	r4,zero,42088 <_free_r+0x2fc>
   41fa4:	29c00217 	ldw	r7,8(r5)
   41fa8:	29000317 	ldw	r4,12(r5)
   41fac:	1885883a 	add	r2,r3,r2
   41fb0:	10c00054 	ori	r3,r2,1
   41fb4:	39000315 	stw	r4,12(r7)
   41fb8:	21c00215 	stw	r7,8(r4)
   41fbc:	30c00115 	stw	r3,4(r6)
   41fc0:	308d883a 	add	r6,r6,r2
   41fc4:	30800015 	stw	r2,0(r6)
   41fc8:	003fac06 	br	41e7c <__alt_data_end+0xfffe1e7c>
   41fcc:	00c00504 	movi	r3,20
   41fd0:	19401536 	bltu	r3,r5,42028 <_free_r+0x29c>
   41fd4:	28c01704 	addi	r3,r5,92
   41fd8:	18c7883a 	add	r3,r3,r3
   41fdc:	294016c4 	addi	r5,r5,91
   41fe0:	003fb406 	br	41eb4 <__alt_data_end+0xfffe1eb4>
   41fe4:	280bd0ba 	srai	r5,r5,2
   41fe8:	00c00044 	movi	r3,1
   41fec:	38800117 	ldw	r2,4(r7)
   41ff0:	194a983a 	sll	r5,r3,r5
   41ff4:	2007883a 	mov	r3,r4
   41ff8:	2884b03a 	or	r2,r5,r2
   41ffc:	38800115 	stw	r2,4(r7)
   42000:	003fbb06 	br	41ef0 <__alt_data_end+0xfffe1ef0>
   42004:	21800515 	stw	r6,20(r4)
   42008:	21800415 	stw	r6,16(r4)
   4200c:	10c00054 	ori	r3,r2,1
   42010:	31c00315 	stw	r7,12(r6)
   42014:	31c00215 	stw	r7,8(r6)
   42018:	30c00115 	stw	r3,4(r6)
   4201c:	308d883a 	add	r6,r6,r2
   42020:	30800015 	stw	r2,0(r6)
   42024:	003f9506 	br	41e7c <__alt_data_end+0xfffe1e7c>
   42028:	00c01504 	movi	r3,84
   4202c:	19400536 	bltu	r3,r5,42044 <_free_r+0x2b8>
   42030:	100ad33a 	srli	r5,r2,12
   42034:	28c01bc4 	addi	r3,r5,111
   42038:	18c7883a 	add	r3,r3,r3
   4203c:	29401b84 	addi	r5,r5,110
   42040:	003f9c06 	br	41eb4 <__alt_data_end+0xfffe1eb4>
   42044:	00c05504 	movi	r3,340
   42048:	19400536 	bltu	r3,r5,42060 <_free_r+0x2d4>
   4204c:	100ad3fa 	srli	r5,r2,15
   42050:	28c01e04 	addi	r3,r5,120
   42054:	18c7883a 	add	r3,r3,r3
   42058:	29401dc4 	addi	r5,r5,119
   4205c:	003f9506 	br	41eb4 <__alt_data_end+0xfffe1eb4>
   42060:	00c15504 	movi	r3,1364
   42064:	19400536 	bltu	r3,r5,4207c <_free_r+0x2f0>
   42068:	100ad4ba 	srli	r5,r2,18
   4206c:	28c01f44 	addi	r3,r5,125
   42070:	18c7883a 	add	r3,r3,r3
   42074:	29401f04 	addi	r5,r5,124
   42078:	003f8e06 	br	41eb4 <__alt_data_end+0xfffe1eb4>
   4207c:	00c03f84 	movi	r3,254
   42080:	01401f84 	movi	r5,126
   42084:	003f8b06 	br	41eb4 <__alt_data_end+0xfffe1eb4>
   42088:	10c00054 	ori	r3,r2,1
   4208c:	30c00115 	stw	r3,4(r6)
   42090:	308d883a 	add	r6,r6,r2
   42094:	30800015 	stw	r2,0(r6)
   42098:	003f7806 	br	41e7c <__alt_data_end+0xfffe1e7c>

0004209c <__sfvwrite_r>:
   4209c:	30800217 	ldw	r2,8(r6)
   420a0:	10006726 	beq	r2,zero,42240 <__sfvwrite_r+0x1a4>
   420a4:	28c0030b 	ldhu	r3,12(r5)
   420a8:	defff404 	addi	sp,sp,-48
   420ac:	dd400715 	stw	r21,28(sp)
   420b0:	dd000615 	stw	r20,24(sp)
   420b4:	dc000215 	stw	r16,8(sp)
   420b8:	dfc00b15 	stw	ra,44(sp)
   420bc:	df000a15 	stw	fp,40(sp)
   420c0:	ddc00915 	stw	r23,36(sp)
   420c4:	dd800815 	stw	r22,32(sp)
   420c8:	dcc00515 	stw	r19,20(sp)
   420cc:	dc800415 	stw	r18,16(sp)
   420d0:	dc400315 	stw	r17,12(sp)
   420d4:	1880020c 	andi	r2,r3,8
   420d8:	2821883a 	mov	r16,r5
   420dc:	202b883a 	mov	r21,r4
   420e0:	3029883a 	mov	r20,r6
   420e4:	10002726 	beq	r2,zero,42184 <__sfvwrite_r+0xe8>
   420e8:	28800417 	ldw	r2,16(r5)
   420ec:	10002526 	beq	r2,zero,42184 <__sfvwrite_r+0xe8>
   420f0:	1880008c 	andi	r2,r3,2
   420f4:	a4400017 	ldw	r17,0(r20)
   420f8:	10002a26 	beq	r2,zero,421a4 <__sfvwrite_r+0x108>
   420fc:	05a00034 	movhi	r22,32768
   42100:	0027883a 	mov	r19,zero
   42104:	0025883a 	mov	r18,zero
   42108:	b5bf0004 	addi	r22,r22,-1024
   4210c:	980d883a 	mov	r6,r19
   42110:	a809883a 	mov	r4,r21
   42114:	90004626 	beq	r18,zero,42230 <__sfvwrite_r+0x194>
   42118:	900f883a 	mov	r7,r18
   4211c:	b480022e 	bgeu	r22,r18,42128 <__sfvwrite_r+0x8c>
   42120:	01e00034 	movhi	r7,32768
   42124:	39ff0004 	addi	r7,r7,-1024
   42128:	80800917 	ldw	r2,36(r16)
   4212c:	81400717 	ldw	r5,28(r16)
   42130:	103ee83a 	callr	r2
   42134:	00805a0e 	bge	zero,r2,422a0 <__sfvwrite_r+0x204>
   42138:	a0c00217 	ldw	r3,8(r20)
   4213c:	98a7883a 	add	r19,r19,r2
   42140:	90a5c83a 	sub	r18,r18,r2
   42144:	1885c83a 	sub	r2,r3,r2
   42148:	a0800215 	stw	r2,8(r20)
   4214c:	103fef1e 	bne	r2,zero,4210c <__alt_data_end+0xfffe210c>
   42150:	0005883a 	mov	r2,zero
   42154:	dfc00b17 	ldw	ra,44(sp)
   42158:	df000a17 	ldw	fp,40(sp)
   4215c:	ddc00917 	ldw	r23,36(sp)
   42160:	dd800817 	ldw	r22,32(sp)
   42164:	dd400717 	ldw	r21,28(sp)
   42168:	dd000617 	ldw	r20,24(sp)
   4216c:	dcc00517 	ldw	r19,20(sp)
   42170:	dc800417 	ldw	r18,16(sp)
   42174:	dc400317 	ldw	r17,12(sp)
   42178:	dc000217 	ldw	r16,8(sp)
   4217c:	dec00c04 	addi	sp,sp,48
   42180:	f800283a 	ret
   42184:	800b883a 	mov	r5,r16
   42188:	a809883a 	mov	r4,r21
   4218c:	004329c0 	call	4329c <__swsetup_r>
   42190:	1000ee1e 	bne	r2,zero,4254c <__sfvwrite_r+0x4b0>
   42194:	80c0030b 	ldhu	r3,12(r16)
   42198:	a4400017 	ldw	r17,0(r20)
   4219c:	1880008c 	andi	r2,r3,2
   421a0:	103fd61e 	bne	r2,zero,420fc <__alt_data_end+0xfffe20fc>
   421a4:	1880004c 	andi	r2,r3,1
   421a8:	1000421e 	bne	r2,zero,422b4 <__sfvwrite_r+0x218>
   421ac:	0039883a 	mov	fp,zero
   421b0:	0025883a 	mov	r18,zero
   421b4:	90001a26 	beq	r18,zero,42220 <__sfvwrite_r+0x184>
   421b8:	1880800c 	andi	r2,r3,512
   421bc:	84c00217 	ldw	r19,8(r16)
   421c0:	10002126 	beq	r2,zero,42248 <__sfvwrite_r+0x1ac>
   421c4:	982f883a 	mov	r23,r19
   421c8:	94c09636 	bltu	r18,r19,42424 <__sfvwrite_r+0x388>
   421cc:	1881200c 	andi	r2,r3,1152
   421d0:	1000a11e 	bne	r2,zero,42458 <__sfvwrite_r+0x3bc>
   421d4:	81000017 	ldw	r4,0(r16)
   421d8:	b80d883a 	mov	r6,r23
   421dc:	e00b883a 	mov	r5,fp
   421e0:	00429180 	call	42918 <memmove>
   421e4:	80c00217 	ldw	r3,8(r16)
   421e8:	81000017 	ldw	r4,0(r16)
   421ec:	9005883a 	mov	r2,r18
   421f0:	1ce7c83a 	sub	r19,r3,r19
   421f4:	25cf883a 	add	r7,r4,r23
   421f8:	84c00215 	stw	r19,8(r16)
   421fc:	81c00015 	stw	r7,0(r16)
   42200:	a0c00217 	ldw	r3,8(r20)
   42204:	e0b9883a 	add	fp,fp,r2
   42208:	90a5c83a 	sub	r18,r18,r2
   4220c:	18a7c83a 	sub	r19,r3,r2
   42210:	a4c00215 	stw	r19,8(r20)
   42214:	983fce26 	beq	r19,zero,42150 <__alt_data_end+0xfffe2150>
   42218:	80c0030b 	ldhu	r3,12(r16)
   4221c:	903fe61e 	bne	r18,zero,421b8 <__alt_data_end+0xfffe21b8>
   42220:	8f000017 	ldw	fp,0(r17)
   42224:	8c800117 	ldw	r18,4(r17)
   42228:	8c400204 	addi	r17,r17,8
   4222c:	003fe106 	br	421b4 <__alt_data_end+0xfffe21b4>
   42230:	8cc00017 	ldw	r19,0(r17)
   42234:	8c800117 	ldw	r18,4(r17)
   42238:	8c400204 	addi	r17,r17,8
   4223c:	003fb306 	br	4210c <__alt_data_end+0xfffe210c>
   42240:	0005883a 	mov	r2,zero
   42244:	f800283a 	ret
   42248:	81000017 	ldw	r4,0(r16)
   4224c:	80800417 	ldw	r2,16(r16)
   42250:	11005a36 	bltu	r2,r4,423bc <__sfvwrite_r+0x320>
   42254:	85c00517 	ldw	r23,20(r16)
   42258:	95c05836 	bltu	r18,r23,423bc <__sfvwrite_r+0x320>
   4225c:	00a00034 	movhi	r2,32768
   42260:	10bfffc4 	addi	r2,r2,-1
   42264:	9009883a 	mov	r4,r18
   42268:	1480012e 	bgeu	r2,r18,42270 <__sfvwrite_r+0x1d4>
   4226c:	1009883a 	mov	r4,r2
   42270:	b80b883a 	mov	r5,r23
   42274:	0043b1c0 	call	43b1c <__divsi3>
   42278:	b80b883a 	mov	r5,r23
   4227c:	1009883a 	mov	r4,r2
   42280:	0040e9c0 	call	40e9c <__mulsi3>
   42284:	81400717 	ldw	r5,28(r16)
   42288:	80c00917 	ldw	r3,36(r16)
   4228c:	100f883a 	mov	r7,r2
   42290:	e00d883a 	mov	r6,fp
   42294:	a809883a 	mov	r4,r21
   42298:	183ee83a 	callr	r3
   4229c:	00bfd816 	blt	zero,r2,42200 <__alt_data_end+0xfffe2200>
   422a0:	8080030b 	ldhu	r2,12(r16)
   422a4:	10801014 	ori	r2,r2,64
   422a8:	8080030d 	sth	r2,12(r16)
   422ac:	00bfffc4 	movi	r2,-1
   422b0:	003fa806 	br	42154 <__alt_data_end+0xfffe2154>
   422b4:	0027883a 	mov	r19,zero
   422b8:	0011883a 	mov	r8,zero
   422bc:	0039883a 	mov	fp,zero
   422c0:	0025883a 	mov	r18,zero
   422c4:	90001f26 	beq	r18,zero,42344 <__sfvwrite_r+0x2a8>
   422c8:	40005a26 	beq	r8,zero,42434 <__sfvwrite_r+0x398>
   422cc:	982d883a 	mov	r22,r19
   422d0:	94c0012e 	bgeu	r18,r19,422d8 <__sfvwrite_r+0x23c>
   422d4:	902d883a 	mov	r22,r18
   422d8:	81000017 	ldw	r4,0(r16)
   422dc:	80800417 	ldw	r2,16(r16)
   422e0:	b02f883a 	mov	r23,r22
   422e4:	81c00517 	ldw	r7,20(r16)
   422e8:	1100032e 	bgeu	r2,r4,422f8 <__sfvwrite_r+0x25c>
   422ec:	80c00217 	ldw	r3,8(r16)
   422f0:	38c7883a 	add	r3,r7,r3
   422f4:	1d801816 	blt	r3,r22,42358 <__sfvwrite_r+0x2bc>
   422f8:	b1c03e16 	blt	r22,r7,423f4 <__sfvwrite_r+0x358>
   422fc:	80800917 	ldw	r2,36(r16)
   42300:	81400717 	ldw	r5,28(r16)
   42304:	e00d883a 	mov	r6,fp
   42308:	da000115 	stw	r8,4(sp)
   4230c:	a809883a 	mov	r4,r21
   42310:	103ee83a 	callr	r2
   42314:	102f883a 	mov	r23,r2
   42318:	da000117 	ldw	r8,4(sp)
   4231c:	00bfe00e 	bge	zero,r2,422a0 <__alt_data_end+0xfffe22a0>
   42320:	9de7c83a 	sub	r19,r19,r23
   42324:	98001f26 	beq	r19,zero,423a4 <__sfvwrite_r+0x308>
   42328:	a0800217 	ldw	r2,8(r20)
   4232c:	e5f9883a 	add	fp,fp,r23
   42330:	95e5c83a 	sub	r18,r18,r23
   42334:	15efc83a 	sub	r23,r2,r23
   42338:	a5c00215 	stw	r23,8(r20)
   4233c:	b83f8426 	beq	r23,zero,42150 <__alt_data_end+0xfffe2150>
   42340:	903fe11e 	bne	r18,zero,422c8 <__alt_data_end+0xfffe22c8>
   42344:	8f000017 	ldw	fp,0(r17)
   42348:	8c800117 	ldw	r18,4(r17)
   4234c:	0011883a 	mov	r8,zero
   42350:	8c400204 	addi	r17,r17,8
   42354:	003fdb06 	br	422c4 <__alt_data_end+0xfffe22c4>
   42358:	180d883a 	mov	r6,r3
   4235c:	e00b883a 	mov	r5,fp
   42360:	da000115 	stw	r8,4(sp)
   42364:	d8c00015 	stw	r3,0(sp)
   42368:	00429180 	call	42918 <memmove>
   4236c:	d8c00017 	ldw	r3,0(sp)
   42370:	80800017 	ldw	r2,0(r16)
   42374:	800b883a 	mov	r5,r16
   42378:	a809883a 	mov	r4,r21
   4237c:	10c5883a 	add	r2,r2,r3
   42380:	80800015 	stw	r2,0(r16)
   42384:	d8c00015 	stw	r3,0(sp)
   42388:	00437640 	call	43764 <_fflush_r>
   4238c:	d8c00017 	ldw	r3,0(sp)
   42390:	da000117 	ldw	r8,4(sp)
   42394:	103fc21e 	bne	r2,zero,422a0 <__alt_data_end+0xfffe22a0>
   42398:	182f883a 	mov	r23,r3
   4239c:	9de7c83a 	sub	r19,r19,r23
   423a0:	983fe11e 	bne	r19,zero,42328 <__alt_data_end+0xfffe2328>
   423a4:	800b883a 	mov	r5,r16
   423a8:	a809883a 	mov	r4,r21
   423ac:	00437640 	call	43764 <_fflush_r>
   423b0:	103fbb1e 	bne	r2,zero,422a0 <__alt_data_end+0xfffe22a0>
   423b4:	0011883a 	mov	r8,zero
   423b8:	003fdb06 	br	42328 <__alt_data_end+0xfffe2328>
   423bc:	94c0012e 	bgeu	r18,r19,423c4 <__sfvwrite_r+0x328>
   423c0:	9027883a 	mov	r19,r18
   423c4:	980d883a 	mov	r6,r19
   423c8:	e00b883a 	mov	r5,fp
   423cc:	00429180 	call	42918 <memmove>
   423d0:	80800217 	ldw	r2,8(r16)
   423d4:	80c00017 	ldw	r3,0(r16)
   423d8:	14c5c83a 	sub	r2,r2,r19
   423dc:	1cc7883a 	add	r3,r3,r19
   423e0:	80800215 	stw	r2,8(r16)
   423e4:	80c00015 	stw	r3,0(r16)
   423e8:	10004326 	beq	r2,zero,424f8 <__sfvwrite_r+0x45c>
   423ec:	9805883a 	mov	r2,r19
   423f0:	003f8306 	br	42200 <__alt_data_end+0xfffe2200>
   423f4:	b00d883a 	mov	r6,r22
   423f8:	e00b883a 	mov	r5,fp
   423fc:	da000115 	stw	r8,4(sp)
   42400:	00429180 	call	42918 <memmove>
   42404:	80800217 	ldw	r2,8(r16)
   42408:	80c00017 	ldw	r3,0(r16)
   4240c:	da000117 	ldw	r8,4(sp)
   42410:	1585c83a 	sub	r2,r2,r22
   42414:	1dad883a 	add	r22,r3,r22
   42418:	80800215 	stw	r2,8(r16)
   4241c:	85800015 	stw	r22,0(r16)
   42420:	003fbf06 	br	42320 <__alt_data_end+0xfffe2320>
   42424:	81000017 	ldw	r4,0(r16)
   42428:	9027883a 	mov	r19,r18
   4242c:	902f883a 	mov	r23,r18
   42430:	003f6906 	br	421d8 <__alt_data_end+0xfffe21d8>
   42434:	900d883a 	mov	r6,r18
   42438:	01400284 	movi	r5,10
   4243c:	e009883a 	mov	r4,fp
   42440:	00426ec0 	call	426ec <memchr>
   42444:	10003e26 	beq	r2,zero,42540 <__sfvwrite_r+0x4a4>
   42448:	10800044 	addi	r2,r2,1
   4244c:	1727c83a 	sub	r19,r2,fp
   42450:	02000044 	movi	r8,1
   42454:	003f9d06 	br	422cc <__alt_data_end+0xfffe22cc>
   42458:	80800517 	ldw	r2,20(r16)
   4245c:	81400417 	ldw	r5,16(r16)
   42460:	81c00017 	ldw	r7,0(r16)
   42464:	10a7883a 	add	r19,r2,r2
   42468:	9885883a 	add	r2,r19,r2
   4246c:	1026d7fa 	srli	r19,r2,31
   42470:	396dc83a 	sub	r22,r7,r5
   42474:	b1000044 	addi	r4,r22,1
   42478:	9885883a 	add	r2,r19,r2
   4247c:	1027d07a 	srai	r19,r2,1
   42480:	2485883a 	add	r2,r4,r18
   42484:	980d883a 	mov	r6,r19
   42488:	9880022e 	bgeu	r19,r2,42494 <__sfvwrite_r+0x3f8>
   4248c:	1027883a 	mov	r19,r2
   42490:	100d883a 	mov	r6,r2
   42494:	18c1000c 	andi	r3,r3,1024
   42498:	18001c26 	beq	r3,zero,4250c <__sfvwrite_r+0x470>
   4249c:	300b883a 	mov	r5,r6
   424a0:	a809883a 	mov	r4,r21
   424a4:	0040eec0 	call	40eec <_malloc_r>
   424a8:	102f883a 	mov	r23,r2
   424ac:	10002926 	beq	r2,zero,42554 <__sfvwrite_r+0x4b8>
   424b0:	81400417 	ldw	r5,16(r16)
   424b4:	b00d883a 	mov	r6,r22
   424b8:	1009883a 	mov	r4,r2
   424bc:	00427d00 	call	427d0 <memcpy>
   424c0:	8080030b 	ldhu	r2,12(r16)
   424c4:	00fedfc4 	movi	r3,-1153
   424c8:	10c4703a 	and	r2,r2,r3
   424cc:	10802014 	ori	r2,r2,128
   424d0:	8080030d 	sth	r2,12(r16)
   424d4:	bd89883a 	add	r4,r23,r22
   424d8:	9d8fc83a 	sub	r7,r19,r22
   424dc:	85c00415 	stw	r23,16(r16)
   424e0:	84c00515 	stw	r19,20(r16)
   424e4:	81000015 	stw	r4,0(r16)
   424e8:	9027883a 	mov	r19,r18
   424ec:	81c00215 	stw	r7,8(r16)
   424f0:	902f883a 	mov	r23,r18
   424f4:	003f3806 	br	421d8 <__alt_data_end+0xfffe21d8>
   424f8:	800b883a 	mov	r5,r16
   424fc:	a809883a 	mov	r4,r21
   42500:	00437640 	call	43764 <_fflush_r>
   42504:	103fb926 	beq	r2,zero,423ec <__alt_data_end+0xfffe23ec>
   42508:	003f6506 	br	422a0 <__alt_data_end+0xfffe22a0>
   4250c:	a809883a 	mov	r4,r21
   42510:	0042b9c0 	call	42b9c <_realloc_r>
   42514:	102f883a 	mov	r23,r2
   42518:	103fee1e 	bne	r2,zero,424d4 <__alt_data_end+0xfffe24d4>
   4251c:	81400417 	ldw	r5,16(r16)
   42520:	a809883a 	mov	r4,r21
   42524:	0041d8c0 	call	41d8c <_free_r>
   42528:	8080030b 	ldhu	r2,12(r16)
   4252c:	00ffdfc4 	movi	r3,-129
   42530:	1884703a 	and	r2,r3,r2
   42534:	00c00304 	movi	r3,12
   42538:	a8c00015 	stw	r3,0(r21)
   4253c:	003f5906 	br	422a4 <__alt_data_end+0xfffe22a4>
   42540:	94c00044 	addi	r19,r18,1
   42544:	02000044 	movi	r8,1
   42548:	003f6006 	br	422cc <__alt_data_end+0xfffe22cc>
   4254c:	00bfffc4 	movi	r2,-1
   42550:	003f0006 	br	42154 <__alt_data_end+0xfffe2154>
   42554:	00800304 	movi	r2,12
   42558:	a8800015 	stw	r2,0(r21)
   4255c:	8080030b 	ldhu	r2,12(r16)
   42560:	003f5006 	br	422a4 <__alt_data_end+0xfffe22a4>

00042564 <_fwalk>:
   42564:	defff704 	addi	sp,sp,-36
   42568:	dd000415 	stw	r20,16(sp)
   4256c:	dfc00815 	stw	ra,32(sp)
   42570:	ddc00715 	stw	r23,28(sp)
   42574:	dd800615 	stw	r22,24(sp)
   42578:	dd400515 	stw	r21,20(sp)
   4257c:	dcc00315 	stw	r19,12(sp)
   42580:	dc800215 	stw	r18,8(sp)
   42584:	dc400115 	stw	r17,4(sp)
   42588:	dc000015 	stw	r16,0(sp)
   4258c:	2500b804 	addi	r20,r4,736
   42590:	a0002326 	beq	r20,zero,42620 <_fwalk+0xbc>
   42594:	282b883a 	mov	r21,r5
   42598:	002f883a 	mov	r23,zero
   4259c:	05800044 	movi	r22,1
   425a0:	04ffffc4 	movi	r19,-1
   425a4:	a4400117 	ldw	r17,4(r20)
   425a8:	a4800217 	ldw	r18,8(r20)
   425ac:	8c7fffc4 	addi	r17,r17,-1
   425b0:	88000d16 	blt	r17,zero,425e8 <_fwalk+0x84>
   425b4:	94000304 	addi	r16,r18,12
   425b8:	94800384 	addi	r18,r18,14
   425bc:	8080000b 	ldhu	r2,0(r16)
   425c0:	8c7fffc4 	addi	r17,r17,-1
   425c4:	813ffd04 	addi	r4,r16,-12
   425c8:	b080042e 	bgeu	r22,r2,425dc <_fwalk+0x78>
   425cc:	9080000f 	ldh	r2,0(r18)
   425d0:	14c00226 	beq	r2,r19,425dc <_fwalk+0x78>
   425d4:	a83ee83a 	callr	r21
   425d8:	b8aeb03a 	or	r23,r23,r2
   425dc:	84001a04 	addi	r16,r16,104
   425e0:	94801a04 	addi	r18,r18,104
   425e4:	8cfff51e 	bne	r17,r19,425bc <__alt_data_end+0xfffe25bc>
   425e8:	a5000017 	ldw	r20,0(r20)
   425ec:	a03fed1e 	bne	r20,zero,425a4 <__alt_data_end+0xfffe25a4>
   425f0:	b805883a 	mov	r2,r23
   425f4:	dfc00817 	ldw	ra,32(sp)
   425f8:	ddc00717 	ldw	r23,28(sp)
   425fc:	dd800617 	ldw	r22,24(sp)
   42600:	dd400517 	ldw	r21,20(sp)
   42604:	dd000417 	ldw	r20,16(sp)
   42608:	dcc00317 	ldw	r19,12(sp)
   4260c:	dc800217 	ldw	r18,8(sp)
   42610:	dc400117 	ldw	r17,4(sp)
   42614:	dc000017 	ldw	r16,0(sp)
   42618:	dec00904 	addi	sp,sp,36
   4261c:	f800283a 	ret
   42620:	002f883a 	mov	r23,zero
   42624:	003ff206 	br	425f0 <__alt_data_end+0xfffe25f0>

00042628 <_fwalk_reent>:
   42628:	defff704 	addi	sp,sp,-36
   4262c:	dd000415 	stw	r20,16(sp)
   42630:	dfc00815 	stw	ra,32(sp)
   42634:	ddc00715 	stw	r23,28(sp)
   42638:	dd800615 	stw	r22,24(sp)
   4263c:	dd400515 	stw	r21,20(sp)
   42640:	dcc00315 	stw	r19,12(sp)
   42644:	dc800215 	stw	r18,8(sp)
   42648:	dc400115 	stw	r17,4(sp)
   4264c:	dc000015 	stw	r16,0(sp)
   42650:	2500b804 	addi	r20,r4,736
   42654:	a0002326 	beq	r20,zero,426e4 <_fwalk_reent+0xbc>
   42658:	282b883a 	mov	r21,r5
   4265c:	2027883a 	mov	r19,r4
   42660:	002f883a 	mov	r23,zero
   42664:	05800044 	movi	r22,1
   42668:	04bfffc4 	movi	r18,-1
   4266c:	a4400117 	ldw	r17,4(r20)
   42670:	a4000217 	ldw	r16,8(r20)
   42674:	8c7fffc4 	addi	r17,r17,-1
   42678:	88000c16 	blt	r17,zero,426ac <_fwalk_reent+0x84>
   4267c:	84000304 	addi	r16,r16,12
   42680:	8080000b 	ldhu	r2,0(r16)
   42684:	8c7fffc4 	addi	r17,r17,-1
   42688:	817ffd04 	addi	r5,r16,-12
   4268c:	b080052e 	bgeu	r22,r2,426a4 <_fwalk_reent+0x7c>
   42690:	8080008f 	ldh	r2,2(r16)
   42694:	9809883a 	mov	r4,r19
   42698:	14800226 	beq	r2,r18,426a4 <_fwalk_reent+0x7c>
   4269c:	a83ee83a 	callr	r21
   426a0:	b8aeb03a 	or	r23,r23,r2
   426a4:	84001a04 	addi	r16,r16,104
   426a8:	8cbff51e 	bne	r17,r18,42680 <__alt_data_end+0xfffe2680>
   426ac:	a5000017 	ldw	r20,0(r20)
   426b0:	a03fee1e 	bne	r20,zero,4266c <__alt_data_end+0xfffe266c>
   426b4:	b805883a 	mov	r2,r23
   426b8:	dfc00817 	ldw	ra,32(sp)
   426bc:	ddc00717 	ldw	r23,28(sp)
   426c0:	dd800617 	ldw	r22,24(sp)
   426c4:	dd400517 	ldw	r21,20(sp)
   426c8:	dd000417 	ldw	r20,16(sp)
   426cc:	dcc00317 	ldw	r19,12(sp)
   426d0:	dc800217 	ldw	r18,8(sp)
   426d4:	dc400117 	ldw	r17,4(sp)
   426d8:	dc000017 	ldw	r16,0(sp)
   426dc:	dec00904 	addi	sp,sp,36
   426e0:	f800283a 	ret
   426e4:	002f883a 	mov	r23,zero
   426e8:	003ff206 	br	426b4 <__alt_data_end+0xfffe26b4>

000426ec <memchr>:
   426ec:	208000cc 	andi	r2,r4,3
   426f0:	280f883a 	mov	r7,r5
   426f4:	10003426 	beq	r2,zero,427c8 <memchr+0xdc>
   426f8:	30bfffc4 	addi	r2,r6,-1
   426fc:	30001a26 	beq	r6,zero,42768 <memchr+0x7c>
   42700:	20c00003 	ldbu	r3,0(r4)
   42704:	29803fcc 	andi	r6,r5,255
   42708:	30c0051e 	bne	r6,r3,42720 <memchr+0x34>
   4270c:	00001806 	br	42770 <memchr+0x84>
   42710:	10001526 	beq	r2,zero,42768 <memchr+0x7c>
   42714:	20c00003 	ldbu	r3,0(r4)
   42718:	10bfffc4 	addi	r2,r2,-1
   4271c:	30c01426 	beq	r6,r3,42770 <memchr+0x84>
   42720:	21000044 	addi	r4,r4,1
   42724:	20c000cc 	andi	r3,r4,3
   42728:	183ff91e 	bne	r3,zero,42710 <__alt_data_end+0xfffe2710>
   4272c:	020000c4 	movi	r8,3
   42730:	40801136 	bltu	r8,r2,42778 <memchr+0x8c>
   42734:	10000c26 	beq	r2,zero,42768 <memchr+0x7c>
   42738:	20c00003 	ldbu	r3,0(r4)
   4273c:	29403fcc 	andi	r5,r5,255
   42740:	28c00b26 	beq	r5,r3,42770 <memchr+0x84>
   42744:	20c00044 	addi	r3,r4,1
   42748:	39803fcc 	andi	r6,r7,255
   4274c:	2089883a 	add	r4,r4,r2
   42750:	00000306 	br	42760 <memchr+0x74>
   42754:	18c00044 	addi	r3,r3,1
   42758:	197fffc3 	ldbu	r5,-1(r3)
   4275c:	31400526 	beq	r6,r5,42774 <memchr+0x88>
   42760:	1805883a 	mov	r2,r3
   42764:	20fffb1e 	bne	r4,r3,42754 <__alt_data_end+0xfffe2754>
   42768:	0005883a 	mov	r2,zero
   4276c:	f800283a 	ret
   42770:	2005883a 	mov	r2,r4
   42774:	f800283a 	ret
   42778:	28c03fcc 	andi	r3,r5,255
   4277c:	1812923a 	slli	r9,r3,8
   42780:	02ffbff4 	movhi	r11,65279
   42784:	02a02074 	movhi	r10,32897
   42788:	48d2b03a 	or	r9,r9,r3
   4278c:	4806943a 	slli	r3,r9,16
   42790:	5affbfc4 	addi	r11,r11,-257
   42794:	52a02004 	addi	r10,r10,-32640
   42798:	48d2b03a 	or	r9,r9,r3
   4279c:	20c00017 	ldw	r3,0(r4)
   427a0:	48c6f03a 	xor	r3,r9,r3
   427a4:	1acd883a 	add	r6,r3,r11
   427a8:	00c6303a 	nor	r3,zero,r3
   427ac:	30c6703a 	and	r3,r6,r3
   427b0:	1a86703a 	and	r3,r3,r10
   427b4:	183fe01e 	bne	r3,zero,42738 <__alt_data_end+0xfffe2738>
   427b8:	10bfff04 	addi	r2,r2,-4
   427bc:	21000104 	addi	r4,r4,4
   427c0:	40bff636 	bltu	r8,r2,4279c <__alt_data_end+0xfffe279c>
   427c4:	003fdb06 	br	42734 <__alt_data_end+0xfffe2734>
   427c8:	3005883a 	mov	r2,r6
   427cc:	003fd706 	br	4272c <__alt_data_end+0xfffe272c>

000427d0 <memcpy>:
   427d0:	defffd04 	addi	sp,sp,-12
   427d4:	dfc00215 	stw	ra,8(sp)
   427d8:	dc400115 	stw	r17,4(sp)
   427dc:	dc000015 	stw	r16,0(sp)
   427e0:	00c003c4 	movi	r3,15
   427e4:	2005883a 	mov	r2,r4
   427e8:	1980452e 	bgeu	r3,r6,42900 <memcpy+0x130>
   427ec:	2906b03a 	or	r3,r5,r4
   427f0:	18c000cc 	andi	r3,r3,3
   427f4:	1800441e 	bne	r3,zero,42908 <memcpy+0x138>
   427f8:	347ffc04 	addi	r17,r6,-16
   427fc:	8822d13a 	srli	r17,r17,4
   42800:	28c00104 	addi	r3,r5,4
   42804:	23400104 	addi	r13,r4,4
   42808:	8820913a 	slli	r16,r17,4
   4280c:	2b000204 	addi	r12,r5,8
   42810:	22c00204 	addi	r11,r4,8
   42814:	84000504 	addi	r16,r16,20
   42818:	2a800304 	addi	r10,r5,12
   4281c:	22400304 	addi	r9,r4,12
   42820:	2c21883a 	add	r16,r5,r16
   42824:	2811883a 	mov	r8,r5
   42828:	200f883a 	mov	r7,r4
   4282c:	41000017 	ldw	r4,0(r8)
   42830:	1fc00017 	ldw	ra,0(r3)
   42834:	63c00017 	ldw	r15,0(r12)
   42838:	39000015 	stw	r4,0(r7)
   4283c:	53800017 	ldw	r14,0(r10)
   42840:	6fc00015 	stw	ra,0(r13)
   42844:	5bc00015 	stw	r15,0(r11)
   42848:	4b800015 	stw	r14,0(r9)
   4284c:	18c00404 	addi	r3,r3,16
   42850:	39c00404 	addi	r7,r7,16
   42854:	42000404 	addi	r8,r8,16
   42858:	6b400404 	addi	r13,r13,16
   4285c:	63000404 	addi	r12,r12,16
   42860:	5ac00404 	addi	r11,r11,16
   42864:	52800404 	addi	r10,r10,16
   42868:	4a400404 	addi	r9,r9,16
   4286c:	1c3fef1e 	bne	r3,r16,4282c <__alt_data_end+0xfffe282c>
   42870:	89c00044 	addi	r7,r17,1
   42874:	380e913a 	slli	r7,r7,4
   42878:	310003cc 	andi	r4,r6,15
   4287c:	02c000c4 	movi	r11,3
   42880:	11c7883a 	add	r3,r2,r7
   42884:	29cb883a 	add	r5,r5,r7
   42888:	5900212e 	bgeu	r11,r4,42910 <memcpy+0x140>
   4288c:	1813883a 	mov	r9,r3
   42890:	2811883a 	mov	r8,r5
   42894:	200f883a 	mov	r7,r4
   42898:	42800017 	ldw	r10,0(r8)
   4289c:	4a400104 	addi	r9,r9,4
   428a0:	39ffff04 	addi	r7,r7,-4
   428a4:	4abfff15 	stw	r10,-4(r9)
   428a8:	42000104 	addi	r8,r8,4
   428ac:	59fffa36 	bltu	r11,r7,42898 <__alt_data_end+0xfffe2898>
   428b0:	213fff04 	addi	r4,r4,-4
   428b4:	2008d0ba 	srli	r4,r4,2
   428b8:	318000cc 	andi	r6,r6,3
   428bc:	21000044 	addi	r4,r4,1
   428c0:	2109883a 	add	r4,r4,r4
   428c4:	2109883a 	add	r4,r4,r4
   428c8:	1907883a 	add	r3,r3,r4
   428cc:	290b883a 	add	r5,r5,r4
   428d0:	30000626 	beq	r6,zero,428ec <memcpy+0x11c>
   428d4:	198d883a 	add	r6,r3,r6
   428d8:	29c00003 	ldbu	r7,0(r5)
   428dc:	18c00044 	addi	r3,r3,1
   428e0:	29400044 	addi	r5,r5,1
   428e4:	19ffffc5 	stb	r7,-1(r3)
   428e8:	19bffb1e 	bne	r3,r6,428d8 <__alt_data_end+0xfffe28d8>
   428ec:	dfc00217 	ldw	ra,8(sp)
   428f0:	dc400117 	ldw	r17,4(sp)
   428f4:	dc000017 	ldw	r16,0(sp)
   428f8:	dec00304 	addi	sp,sp,12
   428fc:	f800283a 	ret
   42900:	2007883a 	mov	r3,r4
   42904:	003ff206 	br	428d0 <__alt_data_end+0xfffe28d0>
   42908:	2007883a 	mov	r3,r4
   4290c:	003ff106 	br	428d4 <__alt_data_end+0xfffe28d4>
   42910:	200d883a 	mov	r6,r4
   42914:	003fee06 	br	428d0 <__alt_data_end+0xfffe28d0>

00042918 <memmove>:
   42918:	2005883a 	mov	r2,r4
   4291c:	29000b2e 	bgeu	r5,r4,4294c <memmove+0x34>
   42920:	298f883a 	add	r7,r5,r6
   42924:	21c0092e 	bgeu	r4,r7,4294c <memmove+0x34>
   42928:	2187883a 	add	r3,r4,r6
   4292c:	198bc83a 	sub	r5,r3,r6
   42930:	30004826 	beq	r6,zero,42a54 <memmove+0x13c>
   42934:	39ffffc4 	addi	r7,r7,-1
   42938:	39000003 	ldbu	r4,0(r7)
   4293c:	18ffffc4 	addi	r3,r3,-1
   42940:	19000005 	stb	r4,0(r3)
   42944:	28fffb1e 	bne	r5,r3,42934 <__alt_data_end+0xfffe2934>
   42948:	f800283a 	ret
   4294c:	00c003c4 	movi	r3,15
   42950:	1980412e 	bgeu	r3,r6,42a58 <memmove+0x140>
   42954:	2886b03a 	or	r3,r5,r2
   42958:	18c000cc 	andi	r3,r3,3
   4295c:	1800401e 	bne	r3,zero,42a60 <memmove+0x148>
   42960:	33fffc04 	addi	r15,r6,-16
   42964:	781ed13a 	srli	r15,r15,4
   42968:	28c00104 	addi	r3,r5,4
   4296c:	13400104 	addi	r13,r2,4
   42970:	781c913a 	slli	r14,r15,4
   42974:	2b000204 	addi	r12,r5,8
   42978:	12c00204 	addi	r11,r2,8
   4297c:	73800504 	addi	r14,r14,20
   42980:	2a800304 	addi	r10,r5,12
   42984:	12400304 	addi	r9,r2,12
   42988:	2b9d883a 	add	r14,r5,r14
   4298c:	2811883a 	mov	r8,r5
   42990:	100f883a 	mov	r7,r2
   42994:	41000017 	ldw	r4,0(r8)
   42998:	39c00404 	addi	r7,r7,16
   4299c:	18c00404 	addi	r3,r3,16
   429a0:	393ffc15 	stw	r4,-16(r7)
   429a4:	193ffc17 	ldw	r4,-16(r3)
   429a8:	6b400404 	addi	r13,r13,16
   429ac:	5ac00404 	addi	r11,r11,16
   429b0:	693ffc15 	stw	r4,-16(r13)
   429b4:	61000017 	ldw	r4,0(r12)
   429b8:	4a400404 	addi	r9,r9,16
   429bc:	42000404 	addi	r8,r8,16
   429c0:	593ffc15 	stw	r4,-16(r11)
   429c4:	51000017 	ldw	r4,0(r10)
   429c8:	63000404 	addi	r12,r12,16
   429cc:	52800404 	addi	r10,r10,16
   429d0:	493ffc15 	stw	r4,-16(r9)
   429d4:	1bbfef1e 	bne	r3,r14,42994 <__alt_data_end+0xfffe2994>
   429d8:	79000044 	addi	r4,r15,1
   429dc:	2008913a 	slli	r4,r4,4
   429e0:	328003cc 	andi	r10,r6,15
   429e4:	02c000c4 	movi	r11,3
   429e8:	1107883a 	add	r3,r2,r4
   429ec:	290b883a 	add	r5,r5,r4
   429f0:	5a801e2e 	bgeu	r11,r10,42a6c <memmove+0x154>
   429f4:	1813883a 	mov	r9,r3
   429f8:	2811883a 	mov	r8,r5
   429fc:	500f883a 	mov	r7,r10
   42a00:	41000017 	ldw	r4,0(r8)
   42a04:	4a400104 	addi	r9,r9,4
   42a08:	39ffff04 	addi	r7,r7,-4
   42a0c:	493fff15 	stw	r4,-4(r9)
   42a10:	42000104 	addi	r8,r8,4
   42a14:	59fffa36 	bltu	r11,r7,42a00 <__alt_data_end+0xfffe2a00>
   42a18:	513fff04 	addi	r4,r10,-4
   42a1c:	2008d0ba 	srli	r4,r4,2
   42a20:	318000cc 	andi	r6,r6,3
   42a24:	21000044 	addi	r4,r4,1
   42a28:	2109883a 	add	r4,r4,r4
   42a2c:	2109883a 	add	r4,r4,r4
   42a30:	1907883a 	add	r3,r3,r4
   42a34:	290b883a 	add	r5,r5,r4
   42a38:	30000b26 	beq	r6,zero,42a68 <memmove+0x150>
   42a3c:	198d883a 	add	r6,r3,r6
   42a40:	29c00003 	ldbu	r7,0(r5)
   42a44:	18c00044 	addi	r3,r3,1
   42a48:	29400044 	addi	r5,r5,1
   42a4c:	19ffffc5 	stb	r7,-1(r3)
   42a50:	19bffb1e 	bne	r3,r6,42a40 <__alt_data_end+0xfffe2a40>
   42a54:	f800283a 	ret
   42a58:	1007883a 	mov	r3,r2
   42a5c:	003ff606 	br	42a38 <__alt_data_end+0xfffe2a38>
   42a60:	1007883a 	mov	r3,r2
   42a64:	003ff506 	br	42a3c <__alt_data_end+0xfffe2a3c>
   42a68:	f800283a 	ret
   42a6c:	500d883a 	mov	r6,r10
   42a70:	003ff106 	br	42a38 <__alt_data_end+0xfffe2a38>

00042a74 <memset>:
   42a74:	20c000cc 	andi	r3,r4,3
   42a78:	2005883a 	mov	r2,r4
   42a7c:	18004426 	beq	r3,zero,42b90 <memset+0x11c>
   42a80:	31ffffc4 	addi	r7,r6,-1
   42a84:	30004026 	beq	r6,zero,42b88 <memset+0x114>
   42a88:	2813883a 	mov	r9,r5
   42a8c:	200d883a 	mov	r6,r4
   42a90:	2007883a 	mov	r3,r4
   42a94:	00000406 	br	42aa8 <memset+0x34>
   42a98:	3a3fffc4 	addi	r8,r7,-1
   42a9c:	31800044 	addi	r6,r6,1
   42aa0:	38003926 	beq	r7,zero,42b88 <memset+0x114>
   42aa4:	400f883a 	mov	r7,r8
   42aa8:	18c00044 	addi	r3,r3,1
   42aac:	32400005 	stb	r9,0(r6)
   42ab0:	1a0000cc 	andi	r8,r3,3
   42ab4:	403ff81e 	bne	r8,zero,42a98 <__alt_data_end+0xfffe2a98>
   42ab8:	010000c4 	movi	r4,3
   42abc:	21c02d2e 	bgeu	r4,r7,42b74 <memset+0x100>
   42ac0:	29003fcc 	andi	r4,r5,255
   42ac4:	200c923a 	slli	r6,r4,8
   42ac8:	3108b03a 	or	r4,r6,r4
   42acc:	200c943a 	slli	r6,r4,16
   42ad0:	218cb03a 	or	r6,r4,r6
   42ad4:	010003c4 	movi	r4,15
   42ad8:	21c0182e 	bgeu	r4,r7,42b3c <memset+0xc8>
   42adc:	3b3ffc04 	addi	r12,r7,-16
   42ae0:	6018d13a 	srli	r12,r12,4
   42ae4:	1a000104 	addi	r8,r3,4
   42ae8:	1ac00204 	addi	r11,r3,8
   42aec:	6008913a 	slli	r4,r12,4
   42af0:	1a800304 	addi	r10,r3,12
   42af4:	1813883a 	mov	r9,r3
   42af8:	21000504 	addi	r4,r4,20
   42afc:	1909883a 	add	r4,r3,r4
   42b00:	49800015 	stw	r6,0(r9)
   42b04:	41800015 	stw	r6,0(r8)
   42b08:	59800015 	stw	r6,0(r11)
   42b0c:	51800015 	stw	r6,0(r10)
   42b10:	42000404 	addi	r8,r8,16
   42b14:	4a400404 	addi	r9,r9,16
   42b18:	5ac00404 	addi	r11,r11,16
   42b1c:	52800404 	addi	r10,r10,16
   42b20:	413ff71e 	bne	r8,r4,42b00 <__alt_data_end+0xfffe2b00>
   42b24:	63000044 	addi	r12,r12,1
   42b28:	6018913a 	slli	r12,r12,4
   42b2c:	39c003cc 	andi	r7,r7,15
   42b30:	010000c4 	movi	r4,3
   42b34:	1b07883a 	add	r3,r3,r12
   42b38:	21c00e2e 	bgeu	r4,r7,42b74 <memset+0x100>
   42b3c:	1813883a 	mov	r9,r3
   42b40:	3811883a 	mov	r8,r7
   42b44:	010000c4 	movi	r4,3
   42b48:	49800015 	stw	r6,0(r9)
   42b4c:	423fff04 	addi	r8,r8,-4
   42b50:	4a400104 	addi	r9,r9,4
   42b54:	223ffc36 	bltu	r4,r8,42b48 <__alt_data_end+0xfffe2b48>
   42b58:	393fff04 	addi	r4,r7,-4
   42b5c:	2008d0ba 	srli	r4,r4,2
   42b60:	39c000cc 	andi	r7,r7,3
   42b64:	21000044 	addi	r4,r4,1
   42b68:	2109883a 	add	r4,r4,r4
   42b6c:	2109883a 	add	r4,r4,r4
   42b70:	1907883a 	add	r3,r3,r4
   42b74:	38000526 	beq	r7,zero,42b8c <memset+0x118>
   42b78:	19cf883a 	add	r7,r3,r7
   42b7c:	19400005 	stb	r5,0(r3)
   42b80:	18c00044 	addi	r3,r3,1
   42b84:	38fffd1e 	bne	r7,r3,42b7c <__alt_data_end+0xfffe2b7c>
   42b88:	f800283a 	ret
   42b8c:	f800283a 	ret
   42b90:	2007883a 	mov	r3,r4
   42b94:	300f883a 	mov	r7,r6
   42b98:	003fc706 	br	42ab8 <__alt_data_end+0xfffe2ab8>

00042b9c <_realloc_r>:
   42b9c:	defff604 	addi	sp,sp,-40
   42ba0:	dc800215 	stw	r18,8(sp)
   42ba4:	dfc00915 	stw	ra,36(sp)
   42ba8:	df000815 	stw	fp,32(sp)
   42bac:	ddc00715 	stw	r23,28(sp)
   42bb0:	dd800615 	stw	r22,24(sp)
   42bb4:	dd400515 	stw	r21,20(sp)
   42bb8:	dd000415 	stw	r20,16(sp)
   42bbc:	dcc00315 	stw	r19,12(sp)
   42bc0:	dc400115 	stw	r17,4(sp)
   42bc4:	dc000015 	stw	r16,0(sp)
   42bc8:	3025883a 	mov	r18,r6
   42bcc:	2800b726 	beq	r5,zero,42eac <_realloc_r+0x310>
   42bd0:	282b883a 	mov	r21,r5
   42bd4:	2029883a 	mov	r20,r4
   42bd8:	004426c0 	call	4426c <__malloc_lock>
   42bdc:	a8bfff17 	ldw	r2,-4(r21)
   42be0:	043fff04 	movi	r16,-4
   42be4:	90c002c4 	addi	r3,r18,11
   42be8:	01000584 	movi	r4,22
   42bec:	acfffe04 	addi	r19,r21,-8
   42bf0:	1420703a 	and	r16,r2,r16
   42bf4:	20c0332e 	bgeu	r4,r3,42cc4 <_realloc_r+0x128>
   42bf8:	047ffe04 	movi	r17,-8
   42bfc:	1c62703a 	and	r17,r3,r17
   42c00:	8807883a 	mov	r3,r17
   42c04:	88005816 	blt	r17,zero,42d68 <_realloc_r+0x1cc>
   42c08:	8c805736 	bltu	r17,r18,42d68 <_realloc_r+0x1cc>
   42c0c:	80c0300e 	bge	r16,r3,42cd0 <_realloc_r+0x134>
   42c10:	07000134 	movhi	fp,4
   42c14:	e71a9d04 	addi	fp,fp,27252
   42c18:	e1c00217 	ldw	r7,8(fp)
   42c1c:	9c09883a 	add	r4,r19,r16
   42c20:	22000117 	ldw	r8,4(r4)
   42c24:	21c06326 	beq	r4,r7,42db4 <_realloc_r+0x218>
   42c28:	017fff84 	movi	r5,-2
   42c2c:	414a703a 	and	r5,r8,r5
   42c30:	214b883a 	add	r5,r4,r5
   42c34:	29800117 	ldw	r6,4(r5)
   42c38:	3180004c 	andi	r6,r6,1
   42c3c:	30003f26 	beq	r6,zero,42d3c <_realloc_r+0x1a0>
   42c40:	1080004c 	andi	r2,r2,1
   42c44:	10008326 	beq	r2,zero,42e54 <_realloc_r+0x2b8>
   42c48:	900b883a 	mov	r5,r18
   42c4c:	a009883a 	mov	r4,r20
   42c50:	0040eec0 	call	40eec <_malloc_r>
   42c54:	1025883a 	mov	r18,r2
   42c58:	10011e26 	beq	r2,zero,430d4 <_realloc_r+0x538>
   42c5c:	a93fff17 	ldw	r4,-4(r21)
   42c60:	10fffe04 	addi	r3,r2,-8
   42c64:	00bfff84 	movi	r2,-2
   42c68:	2084703a 	and	r2,r4,r2
   42c6c:	9885883a 	add	r2,r19,r2
   42c70:	1880ee26 	beq	r3,r2,4302c <_realloc_r+0x490>
   42c74:	81bfff04 	addi	r6,r16,-4
   42c78:	00800904 	movi	r2,36
   42c7c:	1180b836 	bltu	r2,r6,42f60 <_realloc_r+0x3c4>
   42c80:	00c004c4 	movi	r3,19
   42c84:	19809636 	bltu	r3,r6,42ee0 <_realloc_r+0x344>
   42c88:	9005883a 	mov	r2,r18
   42c8c:	a807883a 	mov	r3,r21
   42c90:	19000017 	ldw	r4,0(r3)
   42c94:	11000015 	stw	r4,0(r2)
   42c98:	19000117 	ldw	r4,4(r3)
   42c9c:	11000115 	stw	r4,4(r2)
   42ca0:	18c00217 	ldw	r3,8(r3)
   42ca4:	10c00215 	stw	r3,8(r2)
   42ca8:	a80b883a 	mov	r5,r21
   42cac:	a009883a 	mov	r4,r20
   42cb0:	0041d8c0 	call	41d8c <_free_r>
   42cb4:	a009883a 	mov	r4,r20
   42cb8:	00442900 	call	44290 <__malloc_unlock>
   42cbc:	9005883a 	mov	r2,r18
   42cc0:	00001206 	br	42d0c <_realloc_r+0x170>
   42cc4:	00c00404 	movi	r3,16
   42cc8:	1823883a 	mov	r17,r3
   42ccc:	003fce06 	br	42c08 <__alt_data_end+0xfffe2c08>
   42cd0:	a825883a 	mov	r18,r21
   42cd4:	8445c83a 	sub	r2,r16,r17
   42cd8:	00c003c4 	movi	r3,15
   42cdc:	18802636 	bltu	r3,r2,42d78 <_realloc_r+0x1dc>
   42ce0:	99800117 	ldw	r6,4(r19)
   42ce4:	9c07883a 	add	r3,r19,r16
   42ce8:	3180004c 	andi	r6,r6,1
   42cec:	3420b03a 	or	r16,r6,r16
   42cf0:	9c000115 	stw	r16,4(r19)
   42cf4:	18800117 	ldw	r2,4(r3)
   42cf8:	10800054 	ori	r2,r2,1
   42cfc:	18800115 	stw	r2,4(r3)
   42d00:	a009883a 	mov	r4,r20
   42d04:	00442900 	call	44290 <__malloc_unlock>
   42d08:	9005883a 	mov	r2,r18
   42d0c:	dfc00917 	ldw	ra,36(sp)
   42d10:	df000817 	ldw	fp,32(sp)
   42d14:	ddc00717 	ldw	r23,28(sp)
   42d18:	dd800617 	ldw	r22,24(sp)
   42d1c:	dd400517 	ldw	r21,20(sp)
   42d20:	dd000417 	ldw	r20,16(sp)
   42d24:	dcc00317 	ldw	r19,12(sp)
   42d28:	dc800217 	ldw	r18,8(sp)
   42d2c:	dc400117 	ldw	r17,4(sp)
   42d30:	dc000017 	ldw	r16,0(sp)
   42d34:	dec00a04 	addi	sp,sp,40
   42d38:	f800283a 	ret
   42d3c:	017fff04 	movi	r5,-4
   42d40:	414a703a 	and	r5,r8,r5
   42d44:	814d883a 	add	r6,r16,r5
   42d48:	30c01f16 	blt	r6,r3,42dc8 <_realloc_r+0x22c>
   42d4c:	20800317 	ldw	r2,12(r4)
   42d50:	20c00217 	ldw	r3,8(r4)
   42d54:	a825883a 	mov	r18,r21
   42d58:	3021883a 	mov	r16,r6
   42d5c:	18800315 	stw	r2,12(r3)
   42d60:	10c00215 	stw	r3,8(r2)
   42d64:	003fdb06 	br	42cd4 <__alt_data_end+0xfffe2cd4>
   42d68:	00800304 	movi	r2,12
   42d6c:	a0800015 	stw	r2,0(r20)
   42d70:	0005883a 	mov	r2,zero
   42d74:	003fe506 	br	42d0c <__alt_data_end+0xfffe2d0c>
   42d78:	98c00117 	ldw	r3,4(r19)
   42d7c:	9c4b883a 	add	r5,r19,r17
   42d80:	11000054 	ori	r4,r2,1
   42d84:	18c0004c 	andi	r3,r3,1
   42d88:	1c62b03a 	or	r17,r3,r17
   42d8c:	9c400115 	stw	r17,4(r19)
   42d90:	29000115 	stw	r4,4(r5)
   42d94:	2885883a 	add	r2,r5,r2
   42d98:	10c00117 	ldw	r3,4(r2)
   42d9c:	29400204 	addi	r5,r5,8
   42da0:	a009883a 	mov	r4,r20
   42da4:	18c00054 	ori	r3,r3,1
   42da8:	10c00115 	stw	r3,4(r2)
   42dac:	0041d8c0 	call	41d8c <_free_r>
   42db0:	003fd306 	br	42d00 <__alt_data_end+0xfffe2d00>
   42db4:	017fff04 	movi	r5,-4
   42db8:	414a703a 	and	r5,r8,r5
   42dbc:	89800404 	addi	r6,r17,16
   42dc0:	8151883a 	add	r8,r16,r5
   42dc4:	4180590e 	bge	r8,r6,42f2c <_realloc_r+0x390>
   42dc8:	1080004c 	andi	r2,r2,1
   42dcc:	103f9e1e 	bne	r2,zero,42c48 <__alt_data_end+0xfffe2c48>
   42dd0:	adbffe17 	ldw	r22,-8(r21)
   42dd4:	00bfff04 	movi	r2,-4
   42dd8:	9dadc83a 	sub	r22,r19,r22
   42ddc:	b1800117 	ldw	r6,4(r22)
   42de0:	3084703a 	and	r2,r6,r2
   42de4:	20002026 	beq	r4,zero,42e68 <_realloc_r+0x2cc>
   42de8:	80af883a 	add	r23,r16,r2
   42dec:	b96f883a 	add	r23,r23,r5
   42df0:	21c05f26 	beq	r4,r7,42f70 <_realloc_r+0x3d4>
   42df4:	b8c01c16 	blt	r23,r3,42e68 <_realloc_r+0x2cc>
   42df8:	20800317 	ldw	r2,12(r4)
   42dfc:	20c00217 	ldw	r3,8(r4)
   42e00:	81bfff04 	addi	r6,r16,-4
   42e04:	01000904 	movi	r4,36
   42e08:	18800315 	stw	r2,12(r3)
   42e0c:	10c00215 	stw	r3,8(r2)
   42e10:	b0c00217 	ldw	r3,8(r22)
   42e14:	b0800317 	ldw	r2,12(r22)
   42e18:	b4800204 	addi	r18,r22,8
   42e1c:	18800315 	stw	r2,12(r3)
   42e20:	10c00215 	stw	r3,8(r2)
   42e24:	21801b36 	bltu	r4,r6,42e94 <_realloc_r+0x2f8>
   42e28:	008004c4 	movi	r2,19
   42e2c:	1180352e 	bgeu	r2,r6,42f04 <_realloc_r+0x368>
   42e30:	a8800017 	ldw	r2,0(r21)
   42e34:	b0800215 	stw	r2,8(r22)
   42e38:	a8800117 	ldw	r2,4(r21)
   42e3c:	b0800315 	stw	r2,12(r22)
   42e40:	008006c4 	movi	r2,27
   42e44:	11807f36 	bltu	r2,r6,43044 <_realloc_r+0x4a8>
   42e48:	b0800404 	addi	r2,r22,16
   42e4c:	ad400204 	addi	r21,r21,8
   42e50:	00002d06 	br	42f08 <_realloc_r+0x36c>
   42e54:	adbffe17 	ldw	r22,-8(r21)
   42e58:	00bfff04 	movi	r2,-4
   42e5c:	9dadc83a 	sub	r22,r19,r22
   42e60:	b1000117 	ldw	r4,4(r22)
   42e64:	2084703a 	and	r2,r4,r2
   42e68:	b03f7726 	beq	r22,zero,42c48 <__alt_data_end+0xfffe2c48>
   42e6c:	80af883a 	add	r23,r16,r2
   42e70:	b8ff7516 	blt	r23,r3,42c48 <__alt_data_end+0xfffe2c48>
   42e74:	b0800317 	ldw	r2,12(r22)
   42e78:	b0c00217 	ldw	r3,8(r22)
   42e7c:	81bfff04 	addi	r6,r16,-4
   42e80:	01000904 	movi	r4,36
   42e84:	18800315 	stw	r2,12(r3)
   42e88:	10c00215 	stw	r3,8(r2)
   42e8c:	b4800204 	addi	r18,r22,8
   42e90:	21bfe52e 	bgeu	r4,r6,42e28 <__alt_data_end+0xfffe2e28>
   42e94:	a80b883a 	mov	r5,r21
   42e98:	9009883a 	mov	r4,r18
   42e9c:	00429180 	call	42918 <memmove>
   42ea0:	b821883a 	mov	r16,r23
   42ea4:	b027883a 	mov	r19,r22
   42ea8:	003f8a06 	br	42cd4 <__alt_data_end+0xfffe2cd4>
   42eac:	300b883a 	mov	r5,r6
   42eb0:	dfc00917 	ldw	ra,36(sp)
   42eb4:	df000817 	ldw	fp,32(sp)
   42eb8:	ddc00717 	ldw	r23,28(sp)
   42ebc:	dd800617 	ldw	r22,24(sp)
   42ec0:	dd400517 	ldw	r21,20(sp)
   42ec4:	dd000417 	ldw	r20,16(sp)
   42ec8:	dcc00317 	ldw	r19,12(sp)
   42ecc:	dc800217 	ldw	r18,8(sp)
   42ed0:	dc400117 	ldw	r17,4(sp)
   42ed4:	dc000017 	ldw	r16,0(sp)
   42ed8:	dec00a04 	addi	sp,sp,40
   42edc:	0040eec1 	jmpi	40eec <_malloc_r>
   42ee0:	a8c00017 	ldw	r3,0(r21)
   42ee4:	90c00015 	stw	r3,0(r18)
   42ee8:	a8c00117 	ldw	r3,4(r21)
   42eec:	90c00115 	stw	r3,4(r18)
   42ef0:	00c006c4 	movi	r3,27
   42ef4:	19804536 	bltu	r3,r6,4300c <_realloc_r+0x470>
   42ef8:	90800204 	addi	r2,r18,8
   42efc:	a8c00204 	addi	r3,r21,8
   42f00:	003f6306 	br	42c90 <__alt_data_end+0xfffe2c90>
   42f04:	9005883a 	mov	r2,r18
   42f08:	a8c00017 	ldw	r3,0(r21)
   42f0c:	b821883a 	mov	r16,r23
   42f10:	b027883a 	mov	r19,r22
   42f14:	10c00015 	stw	r3,0(r2)
   42f18:	a8c00117 	ldw	r3,4(r21)
   42f1c:	10c00115 	stw	r3,4(r2)
   42f20:	a8c00217 	ldw	r3,8(r21)
   42f24:	10c00215 	stw	r3,8(r2)
   42f28:	003f6a06 	br	42cd4 <__alt_data_end+0xfffe2cd4>
   42f2c:	9c67883a 	add	r19,r19,r17
   42f30:	4445c83a 	sub	r2,r8,r17
   42f34:	e4c00215 	stw	r19,8(fp)
   42f38:	10800054 	ori	r2,r2,1
   42f3c:	98800115 	stw	r2,4(r19)
   42f40:	a8bfff17 	ldw	r2,-4(r21)
   42f44:	a009883a 	mov	r4,r20
   42f48:	1080004c 	andi	r2,r2,1
   42f4c:	1462b03a 	or	r17,r2,r17
   42f50:	ac7fff15 	stw	r17,-4(r21)
   42f54:	00442900 	call	44290 <__malloc_unlock>
   42f58:	a805883a 	mov	r2,r21
   42f5c:	003f6b06 	br	42d0c <__alt_data_end+0xfffe2d0c>
   42f60:	a80b883a 	mov	r5,r21
   42f64:	9009883a 	mov	r4,r18
   42f68:	00429180 	call	42918 <memmove>
   42f6c:	003f4e06 	br	42ca8 <__alt_data_end+0xfffe2ca8>
   42f70:	89000404 	addi	r4,r17,16
   42f74:	b93fbc16 	blt	r23,r4,42e68 <__alt_data_end+0xfffe2e68>
   42f78:	b0800317 	ldw	r2,12(r22)
   42f7c:	b0c00217 	ldw	r3,8(r22)
   42f80:	81bfff04 	addi	r6,r16,-4
   42f84:	01000904 	movi	r4,36
   42f88:	18800315 	stw	r2,12(r3)
   42f8c:	10c00215 	stw	r3,8(r2)
   42f90:	b4800204 	addi	r18,r22,8
   42f94:	21804336 	bltu	r4,r6,430a4 <_realloc_r+0x508>
   42f98:	008004c4 	movi	r2,19
   42f9c:	11803f2e 	bgeu	r2,r6,4309c <_realloc_r+0x500>
   42fa0:	a8800017 	ldw	r2,0(r21)
   42fa4:	b0800215 	stw	r2,8(r22)
   42fa8:	a8800117 	ldw	r2,4(r21)
   42fac:	b0800315 	stw	r2,12(r22)
   42fb0:	008006c4 	movi	r2,27
   42fb4:	11803f36 	bltu	r2,r6,430b4 <_realloc_r+0x518>
   42fb8:	b0800404 	addi	r2,r22,16
   42fbc:	ad400204 	addi	r21,r21,8
   42fc0:	a8c00017 	ldw	r3,0(r21)
   42fc4:	10c00015 	stw	r3,0(r2)
   42fc8:	a8c00117 	ldw	r3,4(r21)
   42fcc:	10c00115 	stw	r3,4(r2)
   42fd0:	a8c00217 	ldw	r3,8(r21)
   42fd4:	10c00215 	stw	r3,8(r2)
   42fd8:	b447883a 	add	r3,r22,r17
   42fdc:	bc45c83a 	sub	r2,r23,r17
   42fe0:	e0c00215 	stw	r3,8(fp)
   42fe4:	10800054 	ori	r2,r2,1
   42fe8:	18800115 	stw	r2,4(r3)
   42fec:	b0800117 	ldw	r2,4(r22)
   42ff0:	a009883a 	mov	r4,r20
   42ff4:	1080004c 	andi	r2,r2,1
   42ff8:	1462b03a 	or	r17,r2,r17
   42ffc:	b4400115 	stw	r17,4(r22)
   43000:	00442900 	call	44290 <__malloc_unlock>
   43004:	9005883a 	mov	r2,r18
   43008:	003f4006 	br	42d0c <__alt_data_end+0xfffe2d0c>
   4300c:	a8c00217 	ldw	r3,8(r21)
   43010:	90c00215 	stw	r3,8(r18)
   43014:	a8c00317 	ldw	r3,12(r21)
   43018:	90c00315 	stw	r3,12(r18)
   4301c:	30801126 	beq	r6,r2,43064 <_realloc_r+0x4c8>
   43020:	90800404 	addi	r2,r18,16
   43024:	a8c00404 	addi	r3,r21,16
   43028:	003f1906 	br	42c90 <__alt_data_end+0xfffe2c90>
   4302c:	90ffff17 	ldw	r3,-4(r18)
   43030:	00bfff04 	movi	r2,-4
   43034:	a825883a 	mov	r18,r21
   43038:	1884703a 	and	r2,r3,r2
   4303c:	80a1883a 	add	r16,r16,r2
   43040:	003f2406 	br	42cd4 <__alt_data_end+0xfffe2cd4>
   43044:	a8800217 	ldw	r2,8(r21)
   43048:	b0800415 	stw	r2,16(r22)
   4304c:	a8800317 	ldw	r2,12(r21)
   43050:	b0800515 	stw	r2,20(r22)
   43054:	31000a26 	beq	r6,r4,43080 <_realloc_r+0x4e4>
   43058:	b0800604 	addi	r2,r22,24
   4305c:	ad400404 	addi	r21,r21,16
   43060:	003fa906 	br	42f08 <__alt_data_end+0xfffe2f08>
   43064:	a9000417 	ldw	r4,16(r21)
   43068:	90800604 	addi	r2,r18,24
   4306c:	a8c00604 	addi	r3,r21,24
   43070:	91000415 	stw	r4,16(r18)
   43074:	a9000517 	ldw	r4,20(r21)
   43078:	91000515 	stw	r4,20(r18)
   4307c:	003f0406 	br	42c90 <__alt_data_end+0xfffe2c90>
   43080:	a8c00417 	ldw	r3,16(r21)
   43084:	ad400604 	addi	r21,r21,24
   43088:	b0800804 	addi	r2,r22,32
   4308c:	b0c00615 	stw	r3,24(r22)
   43090:	a8ffff17 	ldw	r3,-4(r21)
   43094:	b0c00715 	stw	r3,28(r22)
   43098:	003f9b06 	br	42f08 <__alt_data_end+0xfffe2f08>
   4309c:	9005883a 	mov	r2,r18
   430a0:	003fc706 	br	42fc0 <__alt_data_end+0xfffe2fc0>
   430a4:	a80b883a 	mov	r5,r21
   430a8:	9009883a 	mov	r4,r18
   430ac:	00429180 	call	42918 <memmove>
   430b0:	003fc906 	br	42fd8 <__alt_data_end+0xfffe2fd8>
   430b4:	a8800217 	ldw	r2,8(r21)
   430b8:	b0800415 	stw	r2,16(r22)
   430bc:	a8800317 	ldw	r2,12(r21)
   430c0:	b0800515 	stw	r2,20(r22)
   430c4:	31000726 	beq	r6,r4,430e4 <_realloc_r+0x548>
   430c8:	b0800604 	addi	r2,r22,24
   430cc:	ad400404 	addi	r21,r21,16
   430d0:	003fbb06 	br	42fc0 <__alt_data_end+0xfffe2fc0>
   430d4:	a009883a 	mov	r4,r20
   430d8:	00442900 	call	44290 <__malloc_unlock>
   430dc:	0005883a 	mov	r2,zero
   430e0:	003f0a06 	br	42d0c <__alt_data_end+0xfffe2d0c>
   430e4:	a8c00417 	ldw	r3,16(r21)
   430e8:	ad400604 	addi	r21,r21,24
   430ec:	b0800804 	addi	r2,r22,32
   430f0:	b0c00615 	stw	r3,24(r22)
   430f4:	a8ffff17 	ldw	r3,-4(r21)
   430f8:	b0c00715 	stw	r3,28(r22)
   430fc:	003fb006 	br	42fc0 <__alt_data_end+0xfffe2fc0>

00043100 <__sread>:
   43100:	defffe04 	addi	sp,sp,-8
   43104:	dc000015 	stw	r16,0(sp)
   43108:	2821883a 	mov	r16,r5
   4310c:	2940038f 	ldh	r5,14(r5)
   43110:	dfc00115 	stw	ra,4(sp)
   43114:	0043a0c0 	call	43a0c <_read_r>
   43118:	10000716 	blt	r2,zero,43138 <__sread+0x38>
   4311c:	80c01417 	ldw	r3,80(r16)
   43120:	1887883a 	add	r3,r3,r2
   43124:	80c01415 	stw	r3,80(r16)
   43128:	dfc00117 	ldw	ra,4(sp)
   4312c:	dc000017 	ldw	r16,0(sp)
   43130:	dec00204 	addi	sp,sp,8
   43134:	f800283a 	ret
   43138:	80c0030b 	ldhu	r3,12(r16)
   4313c:	18fbffcc 	andi	r3,r3,61439
   43140:	80c0030d 	sth	r3,12(r16)
   43144:	dfc00117 	ldw	ra,4(sp)
   43148:	dc000017 	ldw	r16,0(sp)
   4314c:	dec00204 	addi	sp,sp,8
   43150:	f800283a 	ret

00043154 <__seofread>:
   43154:	0005883a 	mov	r2,zero
   43158:	f800283a 	ret

0004315c <__swrite>:
   4315c:	2880030b 	ldhu	r2,12(r5)
   43160:	defffb04 	addi	sp,sp,-20
   43164:	dcc00315 	stw	r19,12(sp)
   43168:	dc800215 	stw	r18,8(sp)
   4316c:	dc400115 	stw	r17,4(sp)
   43170:	dc000015 	stw	r16,0(sp)
   43174:	dfc00415 	stw	ra,16(sp)
   43178:	10c0400c 	andi	r3,r2,256
   4317c:	2821883a 	mov	r16,r5
   43180:	2023883a 	mov	r17,r4
   43184:	3025883a 	mov	r18,r6
   43188:	3827883a 	mov	r19,r7
   4318c:	18000526 	beq	r3,zero,431a4 <__swrite+0x48>
   43190:	2940038f 	ldh	r5,14(r5)
   43194:	01c00084 	movi	r7,2
   43198:	000d883a 	mov	r6,zero
   4319c:	00437f00 	call	437f0 <_lseek_r>
   431a0:	8080030b 	ldhu	r2,12(r16)
   431a4:	8140038f 	ldh	r5,14(r16)
   431a8:	10bbffcc 	andi	r2,r2,61439
   431ac:	980f883a 	mov	r7,r19
   431b0:	900d883a 	mov	r6,r18
   431b4:	8809883a 	mov	r4,r17
   431b8:	8080030d 	sth	r2,12(r16)
   431bc:	dfc00417 	ldw	ra,16(sp)
   431c0:	dcc00317 	ldw	r19,12(sp)
   431c4:	dc800217 	ldw	r18,8(sp)
   431c8:	dc400117 	ldw	r17,4(sp)
   431cc:	dc000017 	ldw	r16,0(sp)
   431d0:	dec00504 	addi	sp,sp,20
   431d4:	004323c1 	jmpi	4323c <_write_r>

000431d8 <__sseek>:
   431d8:	defffe04 	addi	sp,sp,-8
   431dc:	dc000015 	stw	r16,0(sp)
   431e0:	2821883a 	mov	r16,r5
   431e4:	2940038f 	ldh	r5,14(r5)
   431e8:	dfc00115 	stw	ra,4(sp)
   431ec:	00437f00 	call	437f0 <_lseek_r>
   431f0:	00ffffc4 	movi	r3,-1
   431f4:	10c00826 	beq	r2,r3,43218 <__sseek+0x40>
   431f8:	80c0030b 	ldhu	r3,12(r16)
   431fc:	80801415 	stw	r2,80(r16)
   43200:	18c40014 	ori	r3,r3,4096
   43204:	80c0030d 	sth	r3,12(r16)
   43208:	dfc00117 	ldw	ra,4(sp)
   4320c:	dc000017 	ldw	r16,0(sp)
   43210:	dec00204 	addi	sp,sp,8
   43214:	f800283a 	ret
   43218:	80c0030b 	ldhu	r3,12(r16)
   4321c:	18fbffcc 	andi	r3,r3,61439
   43220:	80c0030d 	sth	r3,12(r16)
   43224:	dfc00117 	ldw	ra,4(sp)
   43228:	dc000017 	ldw	r16,0(sp)
   4322c:	dec00204 	addi	sp,sp,8
   43230:	f800283a 	ret

00043234 <__sclose>:
   43234:	2940038f 	ldh	r5,14(r5)
   43238:	00433f01 	jmpi	433f0 <_close_r>

0004323c <_write_r>:
   4323c:	defffd04 	addi	sp,sp,-12
   43240:	2805883a 	mov	r2,r5
   43244:	dc000015 	stw	r16,0(sp)
   43248:	04000174 	movhi	r16,5
   4324c:	dc400115 	stw	r17,4(sp)
   43250:	300b883a 	mov	r5,r6
   43254:	84280104 	addi	r16,r16,-24572
   43258:	2023883a 	mov	r17,r4
   4325c:	380d883a 	mov	r6,r7
   43260:	1009883a 	mov	r4,r2
   43264:	dfc00215 	stw	ra,8(sp)
   43268:	80000015 	stw	zero,0(r16)
   4326c:	00445640 	call	44564 <write>
   43270:	00ffffc4 	movi	r3,-1
   43274:	10c00526 	beq	r2,r3,4328c <_write_r+0x50>
   43278:	dfc00217 	ldw	ra,8(sp)
   4327c:	dc400117 	ldw	r17,4(sp)
   43280:	dc000017 	ldw	r16,0(sp)
   43284:	dec00304 	addi	sp,sp,12
   43288:	f800283a 	ret
   4328c:	80c00017 	ldw	r3,0(r16)
   43290:	183ff926 	beq	r3,zero,43278 <__alt_data_end+0xfffe3278>
   43294:	88c00015 	stw	r3,0(r17)
   43298:	003ff706 	br	43278 <__alt_data_end+0xfffe3278>

0004329c <__swsetup_r>:
   4329c:	00800174 	movhi	r2,5
   432a0:	defffd04 	addi	sp,sp,-12
   432a4:	10a13204 	addi	r2,r2,-31544
   432a8:	dc400115 	stw	r17,4(sp)
   432ac:	2023883a 	mov	r17,r4
   432b0:	11000017 	ldw	r4,0(r2)
   432b4:	dc000015 	stw	r16,0(sp)
   432b8:	dfc00215 	stw	ra,8(sp)
   432bc:	2821883a 	mov	r16,r5
   432c0:	20000226 	beq	r4,zero,432cc <__swsetup_r+0x30>
   432c4:	20800e17 	ldw	r2,56(r4)
   432c8:	10003126 	beq	r2,zero,43390 <__swsetup_r+0xf4>
   432cc:	8080030b 	ldhu	r2,12(r16)
   432d0:	10c0020c 	andi	r3,r2,8
   432d4:	1009883a 	mov	r4,r2
   432d8:	18000f26 	beq	r3,zero,43318 <__swsetup_r+0x7c>
   432dc:	80c00417 	ldw	r3,16(r16)
   432e0:	18001526 	beq	r3,zero,43338 <__swsetup_r+0x9c>
   432e4:	1100004c 	andi	r4,r2,1
   432e8:	20001c1e 	bne	r4,zero,4335c <__swsetup_r+0xc0>
   432ec:	1080008c 	andi	r2,r2,2
   432f0:	1000291e 	bne	r2,zero,43398 <__swsetup_r+0xfc>
   432f4:	80800517 	ldw	r2,20(r16)
   432f8:	80800215 	stw	r2,8(r16)
   432fc:	18001c26 	beq	r3,zero,43370 <__swsetup_r+0xd4>
   43300:	0005883a 	mov	r2,zero
   43304:	dfc00217 	ldw	ra,8(sp)
   43308:	dc400117 	ldw	r17,4(sp)
   4330c:	dc000017 	ldw	r16,0(sp)
   43310:	dec00304 	addi	sp,sp,12
   43314:	f800283a 	ret
   43318:	2080040c 	andi	r2,r4,16
   4331c:	10002e26 	beq	r2,zero,433d8 <__swsetup_r+0x13c>
   43320:	2080010c 	andi	r2,r4,4
   43324:	10001e1e 	bne	r2,zero,433a0 <__swsetup_r+0x104>
   43328:	80c00417 	ldw	r3,16(r16)
   4332c:	20800214 	ori	r2,r4,8
   43330:	8080030d 	sth	r2,12(r16)
   43334:	183feb1e 	bne	r3,zero,432e4 <__alt_data_end+0xfffe32e4>
   43338:	1100a00c 	andi	r4,r2,640
   4333c:	01408004 	movi	r5,512
   43340:	217fe826 	beq	r4,r5,432e4 <__alt_data_end+0xfffe32e4>
   43344:	800b883a 	mov	r5,r16
   43348:	8809883a 	mov	r4,r17
   4334c:	00438500 	call	43850 <__smakebuf_r>
   43350:	8080030b 	ldhu	r2,12(r16)
   43354:	80c00417 	ldw	r3,16(r16)
   43358:	003fe206 	br	432e4 <__alt_data_end+0xfffe32e4>
   4335c:	80800517 	ldw	r2,20(r16)
   43360:	80000215 	stw	zero,8(r16)
   43364:	0085c83a 	sub	r2,zero,r2
   43368:	80800615 	stw	r2,24(r16)
   4336c:	183fe41e 	bne	r3,zero,43300 <__alt_data_end+0xfffe3300>
   43370:	80c0030b 	ldhu	r3,12(r16)
   43374:	0005883a 	mov	r2,zero
   43378:	1900200c 	andi	r4,r3,128
   4337c:	203fe126 	beq	r4,zero,43304 <__alt_data_end+0xfffe3304>
   43380:	18c01014 	ori	r3,r3,64
   43384:	80c0030d 	sth	r3,12(r16)
   43388:	00bfffc4 	movi	r2,-1
   4338c:	003fdd06 	br	43304 <__alt_data_end+0xfffe3304>
   43390:	0041c180 	call	41c18 <__sinit>
   43394:	003fcd06 	br	432cc <__alt_data_end+0xfffe32cc>
   43398:	0005883a 	mov	r2,zero
   4339c:	003fd606 	br	432f8 <__alt_data_end+0xfffe32f8>
   433a0:	81400c17 	ldw	r5,48(r16)
   433a4:	28000626 	beq	r5,zero,433c0 <__swsetup_r+0x124>
   433a8:	80801004 	addi	r2,r16,64
   433ac:	28800326 	beq	r5,r2,433bc <__swsetup_r+0x120>
   433b0:	8809883a 	mov	r4,r17
   433b4:	0041d8c0 	call	41d8c <_free_r>
   433b8:	8100030b 	ldhu	r4,12(r16)
   433bc:	80000c15 	stw	zero,48(r16)
   433c0:	80c00417 	ldw	r3,16(r16)
   433c4:	00bff6c4 	movi	r2,-37
   433c8:	1108703a 	and	r4,r2,r4
   433cc:	80000115 	stw	zero,4(r16)
   433d0:	80c00015 	stw	r3,0(r16)
   433d4:	003fd506 	br	4332c <__alt_data_end+0xfffe332c>
   433d8:	00800244 	movi	r2,9
   433dc:	88800015 	stw	r2,0(r17)
   433e0:	20801014 	ori	r2,r4,64
   433e4:	8080030d 	sth	r2,12(r16)
   433e8:	00bfffc4 	movi	r2,-1
   433ec:	003fc506 	br	43304 <__alt_data_end+0xfffe3304>

000433f0 <_close_r>:
   433f0:	defffd04 	addi	sp,sp,-12
   433f4:	dc000015 	stw	r16,0(sp)
   433f8:	04000174 	movhi	r16,5
   433fc:	dc400115 	stw	r17,4(sp)
   43400:	84280104 	addi	r16,r16,-24572
   43404:	2023883a 	mov	r17,r4
   43408:	2809883a 	mov	r4,r5
   4340c:	dfc00215 	stw	ra,8(sp)
   43410:	80000015 	stw	zero,0(r16)
   43414:	0043d0c0 	call	43d0c <close>
   43418:	00ffffc4 	movi	r3,-1
   4341c:	10c00526 	beq	r2,r3,43434 <_close_r+0x44>
   43420:	dfc00217 	ldw	ra,8(sp)
   43424:	dc400117 	ldw	r17,4(sp)
   43428:	dc000017 	ldw	r16,0(sp)
   4342c:	dec00304 	addi	sp,sp,12
   43430:	f800283a 	ret
   43434:	80c00017 	ldw	r3,0(r16)
   43438:	183ff926 	beq	r3,zero,43420 <__alt_data_end+0xfffe3420>
   4343c:	88c00015 	stw	r3,0(r17)
   43440:	003ff706 	br	43420 <__alt_data_end+0xfffe3420>

00043444 <_fclose_r>:
   43444:	28003926 	beq	r5,zero,4352c <_fclose_r+0xe8>
   43448:	defffc04 	addi	sp,sp,-16
   4344c:	dc400115 	stw	r17,4(sp)
   43450:	dc000015 	stw	r16,0(sp)
   43454:	dfc00315 	stw	ra,12(sp)
   43458:	dc800215 	stw	r18,8(sp)
   4345c:	2023883a 	mov	r17,r4
   43460:	2821883a 	mov	r16,r5
   43464:	20000226 	beq	r4,zero,43470 <_fclose_r+0x2c>
   43468:	20800e17 	ldw	r2,56(r4)
   4346c:	10002726 	beq	r2,zero,4350c <_fclose_r+0xc8>
   43470:	8080030f 	ldh	r2,12(r16)
   43474:	1000071e 	bne	r2,zero,43494 <_fclose_r+0x50>
   43478:	0005883a 	mov	r2,zero
   4347c:	dfc00317 	ldw	ra,12(sp)
   43480:	dc800217 	ldw	r18,8(sp)
   43484:	dc400117 	ldw	r17,4(sp)
   43488:	dc000017 	ldw	r16,0(sp)
   4348c:	dec00404 	addi	sp,sp,16
   43490:	f800283a 	ret
   43494:	800b883a 	mov	r5,r16
   43498:	8809883a 	mov	r4,r17
   4349c:	00435480 	call	43548 <__sflush_r>
   434a0:	1025883a 	mov	r18,r2
   434a4:	80800b17 	ldw	r2,44(r16)
   434a8:	10000426 	beq	r2,zero,434bc <_fclose_r+0x78>
   434ac:	81400717 	ldw	r5,28(r16)
   434b0:	8809883a 	mov	r4,r17
   434b4:	103ee83a 	callr	r2
   434b8:	10001616 	blt	r2,zero,43514 <_fclose_r+0xd0>
   434bc:	8080030b 	ldhu	r2,12(r16)
   434c0:	1080200c 	andi	r2,r2,128
   434c4:	1000151e 	bne	r2,zero,4351c <_fclose_r+0xd8>
   434c8:	81400c17 	ldw	r5,48(r16)
   434cc:	28000526 	beq	r5,zero,434e4 <_fclose_r+0xa0>
   434d0:	80801004 	addi	r2,r16,64
   434d4:	28800226 	beq	r5,r2,434e0 <_fclose_r+0x9c>
   434d8:	8809883a 	mov	r4,r17
   434dc:	0041d8c0 	call	41d8c <_free_r>
   434e0:	80000c15 	stw	zero,48(r16)
   434e4:	81401117 	ldw	r5,68(r16)
   434e8:	28000326 	beq	r5,zero,434f8 <_fclose_r+0xb4>
   434ec:	8809883a 	mov	r4,r17
   434f0:	0041d8c0 	call	41d8c <_free_r>
   434f4:	80001115 	stw	zero,68(r16)
   434f8:	0041c280 	call	41c28 <__sfp_lock_acquire>
   434fc:	8000030d 	sth	zero,12(r16)
   43500:	0041c2c0 	call	41c2c <__sfp_lock_release>
   43504:	9005883a 	mov	r2,r18
   43508:	003fdc06 	br	4347c <__alt_data_end+0xfffe347c>
   4350c:	0041c180 	call	41c18 <__sinit>
   43510:	003fd706 	br	43470 <__alt_data_end+0xfffe3470>
   43514:	04bfffc4 	movi	r18,-1
   43518:	003fe806 	br	434bc <__alt_data_end+0xfffe34bc>
   4351c:	81400417 	ldw	r5,16(r16)
   43520:	8809883a 	mov	r4,r17
   43524:	0041d8c0 	call	41d8c <_free_r>
   43528:	003fe706 	br	434c8 <__alt_data_end+0xfffe34c8>
   4352c:	0005883a 	mov	r2,zero
   43530:	f800283a 	ret

00043534 <fclose>:
   43534:	00800174 	movhi	r2,5
   43538:	10a13204 	addi	r2,r2,-31544
   4353c:	200b883a 	mov	r5,r4
   43540:	11000017 	ldw	r4,0(r2)
   43544:	00434441 	jmpi	43444 <_fclose_r>

00043548 <__sflush_r>:
   43548:	2880030b 	ldhu	r2,12(r5)
   4354c:	defffb04 	addi	sp,sp,-20
   43550:	dcc00315 	stw	r19,12(sp)
   43554:	dc400115 	stw	r17,4(sp)
   43558:	dfc00415 	stw	ra,16(sp)
   4355c:	dc800215 	stw	r18,8(sp)
   43560:	dc000015 	stw	r16,0(sp)
   43564:	10c0020c 	andi	r3,r2,8
   43568:	2823883a 	mov	r17,r5
   4356c:	2027883a 	mov	r19,r4
   43570:	1800311e 	bne	r3,zero,43638 <__sflush_r+0xf0>
   43574:	28c00117 	ldw	r3,4(r5)
   43578:	10820014 	ori	r2,r2,2048
   4357c:	2880030d 	sth	r2,12(r5)
   43580:	00c04b0e 	bge	zero,r3,436b0 <__sflush_r+0x168>
   43584:	8a000a17 	ldw	r8,40(r17)
   43588:	40002326 	beq	r8,zero,43618 <__sflush_r+0xd0>
   4358c:	9c000017 	ldw	r16,0(r19)
   43590:	10c4000c 	andi	r3,r2,4096
   43594:	98000015 	stw	zero,0(r19)
   43598:	18004826 	beq	r3,zero,436bc <__sflush_r+0x174>
   4359c:	89801417 	ldw	r6,80(r17)
   435a0:	10c0010c 	andi	r3,r2,4
   435a4:	18000626 	beq	r3,zero,435c0 <__sflush_r+0x78>
   435a8:	88c00117 	ldw	r3,4(r17)
   435ac:	88800c17 	ldw	r2,48(r17)
   435b0:	30cdc83a 	sub	r6,r6,r3
   435b4:	10000226 	beq	r2,zero,435c0 <__sflush_r+0x78>
   435b8:	88800f17 	ldw	r2,60(r17)
   435bc:	308dc83a 	sub	r6,r6,r2
   435c0:	89400717 	ldw	r5,28(r17)
   435c4:	000f883a 	mov	r7,zero
   435c8:	9809883a 	mov	r4,r19
   435cc:	403ee83a 	callr	r8
   435d0:	00ffffc4 	movi	r3,-1
   435d4:	10c04426 	beq	r2,r3,436e8 <__sflush_r+0x1a0>
   435d8:	88c0030b 	ldhu	r3,12(r17)
   435dc:	89000417 	ldw	r4,16(r17)
   435e0:	88000115 	stw	zero,4(r17)
   435e4:	197dffcc 	andi	r5,r3,63487
   435e8:	8940030d 	sth	r5,12(r17)
   435ec:	89000015 	stw	r4,0(r17)
   435f0:	18c4000c 	andi	r3,r3,4096
   435f4:	18002c1e 	bne	r3,zero,436a8 <__sflush_r+0x160>
   435f8:	89400c17 	ldw	r5,48(r17)
   435fc:	9c000015 	stw	r16,0(r19)
   43600:	28000526 	beq	r5,zero,43618 <__sflush_r+0xd0>
   43604:	88801004 	addi	r2,r17,64
   43608:	28800226 	beq	r5,r2,43614 <__sflush_r+0xcc>
   4360c:	9809883a 	mov	r4,r19
   43610:	0041d8c0 	call	41d8c <_free_r>
   43614:	88000c15 	stw	zero,48(r17)
   43618:	0005883a 	mov	r2,zero
   4361c:	dfc00417 	ldw	ra,16(sp)
   43620:	dcc00317 	ldw	r19,12(sp)
   43624:	dc800217 	ldw	r18,8(sp)
   43628:	dc400117 	ldw	r17,4(sp)
   4362c:	dc000017 	ldw	r16,0(sp)
   43630:	dec00504 	addi	sp,sp,20
   43634:	f800283a 	ret
   43638:	2c800417 	ldw	r18,16(r5)
   4363c:	903ff626 	beq	r18,zero,43618 <__alt_data_end+0xfffe3618>
   43640:	2c000017 	ldw	r16,0(r5)
   43644:	108000cc 	andi	r2,r2,3
   43648:	2c800015 	stw	r18,0(r5)
   4364c:	84a1c83a 	sub	r16,r16,r18
   43650:	1000131e 	bne	r2,zero,436a0 <__sflush_r+0x158>
   43654:	28800517 	ldw	r2,20(r5)
   43658:	88800215 	stw	r2,8(r17)
   4365c:	04000316 	blt	zero,r16,4366c <__sflush_r+0x124>
   43660:	003fed06 	br	43618 <__alt_data_end+0xfffe3618>
   43664:	90a5883a 	add	r18,r18,r2
   43668:	043feb0e 	bge	zero,r16,43618 <__alt_data_end+0xfffe3618>
   4366c:	88800917 	ldw	r2,36(r17)
   43670:	89400717 	ldw	r5,28(r17)
   43674:	800f883a 	mov	r7,r16
   43678:	900d883a 	mov	r6,r18
   4367c:	9809883a 	mov	r4,r19
   43680:	103ee83a 	callr	r2
   43684:	80a1c83a 	sub	r16,r16,r2
   43688:	00bff616 	blt	zero,r2,43664 <__alt_data_end+0xfffe3664>
   4368c:	88c0030b 	ldhu	r3,12(r17)
   43690:	00bfffc4 	movi	r2,-1
   43694:	18c01014 	ori	r3,r3,64
   43698:	88c0030d 	sth	r3,12(r17)
   4369c:	003fdf06 	br	4361c <__alt_data_end+0xfffe361c>
   436a0:	0005883a 	mov	r2,zero
   436a4:	003fec06 	br	43658 <__alt_data_end+0xfffe3658>
   436a8:	88801415 	stw	r2,80(r17)
   436ac:	003fd206 	br	435f8 <__alt_data_end+0xfffe35f8>
   436b0:	28c00f17 	ldw	r3,60(r5)
   436b4:	00ffb316 	blt	zero,r3,43584 <__alt_data_end+0xfffe3584>
   436b8:	003fd706 	br	43618 <__alt_data_end+0xfffe3618>
   436bc:	89400717 	ldw	r5,28(r17)
   436c0:	000d883a 	mov	r6,zero
   436c4:	01c00044 	movi	r7,1
   436c8:	9809883a 	mov	r4,r19
   436cc:	403ee83a 	callr	r8
   436d0:	100d883a 	mov	r6,r2
   436d4:	00bfffc4 	movi	r2,-1
   436d8:	30801426 	beq	r6,r2,4372c <__sflush_r+0x1e4>
   436dc:	8880030b 	ldhu	r2,12(r17)
   436e0:	8a000a17 	ldw	r8,40(r17)
   436e4:	003fae06 	br	435a0 <__alt_data_end+0xfffe35a0>
   436e8:	98c00017 	ldw	r3,0(r19)
   436ec:	183fba26 	beq	r3,zero,435d8 <__alt_data_end+0xfffe35d8>
   436f0:	01000744 	movi	r4,29
   436f4:	19000626 	beq	r3,r4,43710 <__sflush_r+0x1c8>
   436f8:	01000584 	movi	r4,22
   436fc:	19000426 	beq	r3,r4,43710 <__sflush_r+0x1c8>
   43700:	88c0030b 	ldhu	r3,12(r17)
   43704:	18c01014 	ori	r3,r3,64
   43708:	88c0030d 	sth	r3,12(r17)
   4370c:	003fc306 	br	4361c <__alt_data_end+0xfffe361c>
   43710:	8880030b 	ldhu	r2,12(r17)
   43714:	88c00417 	ldw	r3,16(r17)
   43718:	88000115 	stw	zero,4(r17)
   4371c:	10bdffcc 	andi	r2,r2,63487
   43720:	8880030d 	sth	r2,12(r17)
   43724:	88c00015 	stw	r3,0(r17)
   43728:	003fb306 	br	435f8 <__alt_data_end+0xfffe35f8>
   4372c:	98800017 	ldw	r2,0(r19)
   43730:	103fea26 	beq	r2,zero,436dc <__alt_data_end+0xfffe36dc>
   43734:	00c00744 	movi	r3,29
   43738:	10c00226 	beq	r2,r3,43744 <__sflush_r+0x1fc>
   4373c:	00c00584 	movi	r3,22
   43740:	10c0031e 	bne	r2,r3,43750 <__sflush_r+0x208>
   43744:	9c000015 	stw	r16,0(r19)
   43748:	0005883a 	mov	r2,zero
   4374c:	003fb306 	br	4361c <__alt_data_end+0xfffe361c>
   43750:	88c0030b 	ldhu	r3,12(r17)
   43754:	3005883a 	mov	r2,r6
   43758:	18c01014 	ori	r3,r3,64
   4375c:	88c0030d 	sth	r3,12(r17)
   43760:	003fae06 	br	4361c <__alt_data_end+0xfffe361c>

00043764 <_fflush_r>:
   43764:	defffd04 	addi	sp,sp,-12
   43768:	dc000115 	stw	r16,4(sp)
   4376c:	dfc00215 	stw	ra,8(sp)
   43770:	2021883a 	mov	r16,r4
   43774:	20000226 	beq	r4,zero,43780 <_fflush_r+0x1c>
   43778:	20800e17 	ldw	r2,56(r4)
   4377c:	10000c26 	beq	r2,zero,437b0 <_fflush_r+0x4c>
   43780:	2880030f 	ldh	r2,12(r5)
   43784:	1000051e 	bne	r2,zero,4379c <_fflush_r+0x38>
   43788:	0005883a 	mov	r2,zero
   4378c:	dfc00217 	ldw	ra,8(sp)
   43790:	dc000117 	ldw	r16,4(sp)
   43794:	dec00304 	addi	sp,sp,12
   43798:	f800283a 	ret
   4379c:	8009883a 	mov	r4,r16
   437a0:	dfc00217 	ldw	ra,8(sp)
   437a4:	dc000117 	ldw	r16,4(sp)
   437a8:	dec00304 	addi	sp,sp,12
   437ac:	00435481 	jmpi	43548 <__sflush_r>
   437b0:	d9400015 	stw	r5,0(sp)
   437b4:	0041c180 	call	41c18 <__sinit>
   437b8:	d9400017 	ldw	r5,0(sp)
   437bc:	003ff006 	br	43780 <__alt_data_end+0xfffe3780>

000437c0 <fflush>:
   437c0:	20000526 	beq	r4,zero,437d8 <fflush+0x18>
   437c4:	00800174 	movhi	r2,5
   437c8:	10a13204 	addi	r2,r2,-31544
   437cc:	200b883a 	mov	r5,r4
   437d0:	11000017 	ldw	r4,0(r2)
   437d4:	00437641 	jmpi	43764 <_fflush_r>
   437d8:	00800174 	movhi	r2,5
   437dc:	10a13104 	addi	r2,r2,-31548
   437e0:	11000017 	ldw	r4,0(r2)
   437e4:	01400134 	movhi	r5,4
   437e8:	294dd904 	addi	r5,r5,14180
   437ec:	00426281 	jmpi	42628 <_fwalk_reent>

000437f0 <_lseek_r>:
   437f0:	defffd04 	addi	sp,sp,-12
   437f4:	2805883a 	mov	r2,r5
   437f8:	dc000015 	stw	r16,0(sp)
   437fc:	04000174 	movhi	r16,5
   43800:	dc400115 	stw	r17,4(sp)
   43804:	300b883a 	mov	r5,r6
   43808:	84280104 	addi	r16,r16,-24572
   4380c:	2023883a 	mov	r17,r4
   43810:	380d883a 	mov	r6,r7
   43814:	1009883a 	mov	r4,r2
   43818:	dfc00215 	stw	ra,8(sp)
   4381c:	80000015 	stw	zero,0(r16)
   43820:	00441140 	call	44114 <lseek>
   43824:	00ffffc4 	movi	r3,-1
   43828:	10c00526 	beq	r2,r3,43840 <_lseek_r+0x50>
   4382c:	dfc00217 	ldw	ra,8(sp)
   43830:	dc400117 	ldw	r17,4(sp)
   43834:	dc000017 	ldw	r16,0(sp)
   43838:	dec00304 	addi	sp,sp,12
   4383c:	f800283a 	ret
   43840:	80c00017 	ldw	r3,0(r16)
   43844:	183ff926 	beq	r3,zero,4382c <__alt_data_end+0xfffe382c>
   43848:	88c00015 	stw	r3,0(r17)
   4384c:	003ff706 	br	4382c <__alt_data_end+0xfffe382c>

00043850 <__smakebuf_r>:
   43850:	2880030b 	ldhu	r2,12(r5)
   43854:	10c0008c 	andi	r3,r2,2
   43858:	1800411e 	bne	r3,zero,43960 <__smakebuf_r+0x110>
   4385c:	deffec04 	addi	sp,sp,-80
   43860:	dc000f15 	stw	r16,60(sp)
   43864:	2821883a 	mov	r16,r5
   43868:	2940038f 	ldh	r5,14(r5)
   4386c:	dc401015 	stw	r17,64(sp)
   43870:	dfc01315 	stw	ra,76(sp)
   43874:	dcc01215 	stw	r19,72(sp)
   43878:	dc801115 	stw	r18,68(sp)
   4387c:	2023883a 	mov	r17,r4
   43880:	28001c16 	blt	r5,zero,438f4 <__smakebuf_r+0xa4>
   43884:	d80d883a 	mov	r6,sp
   43888:	0043a6c0 	call	43a6c <_fstat_r>
   4388c:	10001816 	blt	r2,zero,438f0 <__smakebuf_r+0xa0>
   43890:	d8800117 	ldw	r2,4(sp)
   43894:	00e00014 	movui	r3,32768
   43898:	10bc000c 	andi	r2,r2,61440
   4389c:	14c80020 	cmpeqi	r19,r2,8192
   438a0:	10c03726 	beq	r2,r3,43980 <__smakebuf_r+0x130>
   438a4:	80c0030b 	ldhu	r3,12(r16)
   438a8:	18c20014 	ori	r3,r3,2048
   438ac:	80c0030d 	sth	r3,12(r16)
   438b0:	00c80004 	movi	r3,8192
   438b4:	10c0521e 	bne	r2,r3,43a00 <__smakebuf_r+0x1b0>
   438b8:	8140038f 	ldh	r5,14(r16)
   438bc:	8809883a 	mov	r4,r17
   438c0:	0043ac80 	call	43ac8 <_isatty_r>
   438c4:	10004c26 	beq	r2,zero,439f8 <__smakebuf_r+0x1a8>
   438c8:	8080030b 	ldhu	r2,12(r16)
   438cc:	80c010c4 	addi	r3,r16,67
   438d0:	80c00015 	stw	r3,0(r16)
   438d4:	10800054 	ori	r2,r2,1
   438d8:	8080030d 	sth	r2,12(r16)
   438dc:	00800044 	movi	r2,1
   438e0:	80c00415 	stw	r3,16(r16)
   438e4:	80800515 	stw	r2,20(r16)
   438e8:	04810004 	movi	r18,1024
   438ec:	00000706 	br	4390c <__smakebuf_r+0xbc>
   438f0:	8080030b 	ldhu	r2,12(r16)
   438f4:	10c0200c 	andi	r3,r2,128
   438f8:	18001f1e 	bne	r3,zero,43978 <__smakebuf_r+0x128>
   438fc:	04810004 	movi	r18,1024
   43900:	10820014 	ori	r2,r2,2048
   43904:	8080030d 	sth	r2,12(r16)
   43908:	0027883a 	mov	r19,zero
   4390c:	900b883a 	mov	r5,r18
   43910:	8809883a 	mov	r4,r17
   43914:	0040eec0 	call	40eec <_malloc_r>
   43918:	10002c26 	beq	r2,zero,439cc <__smakebuf_r+0x17c>
   4391c:	80c0030b 	ldhu	r3,12(r16)
   43920:	01000134 	movhi	r4,4
   43924:	21063004 	addi	r4,r4,6336
   43928:	89000f15 	stw	r4,60(r17)
   4392c:	18c02014 	ori	r3,r3,128
   43930:	80c0030d 	sth	r3,12(r16)
   43934:	80800015 	stw	r2,0(r16)
   43938:	80800415 	stw	r2,16(r16)
   4393c:	84800515 	stw	r18,20(r16)
   43940:	98001a1e 	bne	r19,zero,439ac <__smakebuf_r+0x15c>
   43944:	dfc01317 	ldw	ra,76(sp)
   43948:	dcc01217 	ldw	r19,72(sp)
   4394c:	dc801117 	ldw	r18,68(sp)
   43950:	dc401017 	ldw	r17,64(sp)
   43954:	dc000f17 	ldw	r16,60(sp)
   43958:	dec01404 	addi	sp,sp,80
   4395c:	f800283a 	ret
   43960:	288010c4 	addi	r2,r5,67
   43964:	28800015 	stw	r2,0(r5)
   43968:	28800415 	stw	r2,16(r5)
   4396c:	00800044 	movi	r2,1
   43970:	28800515 	stw	r2,20(r5)
   43974:	f800283a 	ret
   43978:	04801004 	movi	r18,64
   4397c:	003fe006 	br	43900 <__alt_data_end+0xfffe3900>
   43980:	81000a17 	ldw	r4,40(r16)
   43984:	00c00134 	movhi	r3,4
   43988:	18cc7604 	addi	r3,r3,12760
   4398c:	20ffc51e 	bne	r4,r3,438a4 <__alt_data_end+0xfffe38a4>
   43990:	8080030b 	ldhu	r2,12(r16)
   43994:	04810004 	movi	r18,1024
   43998:	84801315 	stw	r18,76(r16)
   4399c:	1484b03a 	or	r2,r2,r18
   439a0:	8080030d 	sth	r2,12(r16)
   439a4:	0027883a 	mov	r19,zero
   439a8:	003fd806 	br	4390c <__alt_data_end+0xfffe390c>
   439ac:	8140038f 	ldh	r5,14(r16)
   439b0:	8809883a 	mov	r4,r17
   439b4:	0043ac80 	call	43ac8 <_isatty_r>
   439b8:	103fe226 	beq	r2,zero,43944 <__alt_data_end+0xfffe3944>
   439bc:	8080030b 	ldhu	r2,12(r16)
   439c0:	10800054 	ori	r2,r2,1
   439c4:	8080030d 	sth	r2,12(r16)
   439c8:	003fde06 	br	43944 <__alt_data_end+0xfffe3944>
   439cc:	8080030b 	ldhu	r2,12(r16)
   439d0:	10c0800c 	andi	r3,r2,512
   439d4:	183fdb1e 	bne	r3,zero,43944 <__alt_data_end+0xfffe3944>
   439d8:	10800094 	ori	r2,r2,2
   439dc:	80c010c4 	addi	r3,r16,67
   439e0:	8080030d 	sth	r2,12(r16)
   439e4:	00800044 	movi	r2,1
   439e8:	80c00015 	stw	r3,0(r16)
   439ec:	80c00415 	stw	r3,16(r16)
   439f0:	80800515 	stw	r2,20(r16)
   439f4:	003fd306 	br	43944 <__alt_data_end+0xfffe3944>
   439f8:	04810004 	movi	r18,1024
   439fc:	003fc306 	br	4390c <__alt_data_end+0xfffe390c>
   43a00:	0027883a 	mov	r19,zero
   43a04:	04810004 	movi	r18,1024
   43a08:	003fc006 	br	4390c <__alt_data_end+0xfffe390c>

00043a0c <_read_r>:
   43a0c:	defffd04 	addi	sp,sp,-12
   43a10:	2805883a 	mov	r2,r5
   43a14:	dc000015 	stw	r16,0(sp)
   43a18:	04000174 	movhi	r16,5
   43a1c:	dc400115 	stw	r17,4(sp)
   43a20:	300b883a 	mov	r5,r6
   43a24:	84280104 	addi	r16,r16,-24572
   43a28:	2023883a 	mov	r17,r4
   43a2c:	380d883a 	mov	r6,r7
   43a30:	1009883a 	mov	r4,r2
   43a34:	dfc00215 	stw	ra,8(sp)
   43a38:	80000015 	stw	zero,0(r16)
   43a3c:	00442f00 	call	442f0 <read>
   43a40:	00ffffc4 	movi	r3,-1
   43a44:	10c00526 	beq	r2,r3,43a5c <_read_r+0x50>
   43a48:	dfc00217 	ldw	ra,8(sp)
   43a4c:	dc400117 	ldw	r17,4(sp)
   43a50:	dc000017 	ldw	r16,0(sp)
   43a54:	dec00304 	addi	sp,sp,12
   43a58:	f800283a 	ret
   43a5c:	80c00017 	ldw	r3,0(r16)
   43a60:	183ff926 	beq	r3,zero,43a48 <__alt_data_end+0xfffe3a48>
   43a64:	88c00015 	stw	r3,0(r17)
   43a68:	003ff706 	br	43a48 <__alt_data_end+0xfffe3a48>

00043a6c <_fstat_r>:
   43a6c:	defffd04 	addi	sp,sp,-12
   43a70:	2805883a 	mov	r2,r5
   43a74:	dc000015 	stw	r16,0(sp)
   43a78:	04000174 	movhi	r16,5
   43a7c:	dc400115 	stw	r17,4(sp)
   43a80:	84280104 	addi	r16,r16,-24572
   43a84:	2023883a 	mov	r17,r4
   43a88:	300b883a 	mov	r5,r6
   43a8c:	1009883a 	mov	r4,r2
   43a90:	dfc00215 	stw	ra,8(sp)
   43a94:	80000015 	stw	zero,0(r16)
   43a98:	0043e4c0 	call	43e4c <fstat>
   43a9c:	00ffffc4 	movi	r3,-1
   43aa0:	10c00526 	beq	r2,r3,43ab8 <_fstat_r+0x4c>
   43aa4:	dfc00217 	ldw	ra,8(sp)
   43aa8:	dc400117 	ldw	r17,4(sp)
   43aac:	dc000017 	ldw	r16,0(sp)
   43ab0:	dec00304 	addi	sp,sp,12
   43ab4:	f800283a 	ret
   43ab8:	80c00017 	ldw	r3,0(r16)
   43abc:	183ff926 	beq	r3,zero,43aa4 <__alt_data_end+0xfffe3aa4>
   43ac0:	88c00015 	stw	r3,0(r17)
   43ac4:	003ff706 	br	43aa4 <__alt_data_end+0xfffe3aa4>

00043ac8 <_isatty_r>:
   43ac8:	defffd04 	addi	sp,sp,-12
   43acc:	dc000015 	stw	r16,0(sp)
   43ad0:	04000174 	movhi	r16,5
   43ad4:	dc400115 	stw	r17,4(sp)
   43ad8:	84280104 	addi	r16,r16,-24572
   43adc:	2023883a 	mov	r17,r4
   43ae0:	2809883a 	mov	r4,r5
   43ae4:	dfc00215 	stw	ra,8(sp)
   43ae8:	80000015 	stw	zero,0(r16)
   43aec:	0043f400 	call	43f40 <isatty>
   43af0:	00ffffc4 	movi	r3,-1
   43af4:	10c00526 	beq	r2,r3,43b0c <_isatty_r+0x44>
   43af8:	dfc00217 	ldw	ra,8(sp)
   43afc:	dc400117 	ldw	r17,4(sp)
   43b00:	dc000017 	ldw	r16,0(sp)
   43b04:	dec00304 	addi	sp,sp,12
   43b08:	f800283a 	ret
   43b0c:	80c00017 	ldw	r3,0(r16)
   43b10:	183ff926 	beq	r3,zero,43af8 <__alt_data_end+0xfffe3af8>
   43b14:	88c00015 	stw	r3,0(r17)
   43b18:	003ff706 	br	43af8 <__alt_data_end+0xfffe3af8>

00043b1c <__divsi3>:
   43b1c:	20001b16 	blt	r4,zero,43b8c <__divsi3+0x70>
   43b20:	000f883a 	mov	r7,zero
   43b24:	28001616 	blt	r5,zero,43b80 <__divsi3+0x64>
   43b28:	200d883a 	mov	r6,r4
   43b2c:	29001a2e 	bgeu	r5,r4,43b98 <__divsi3+0x7c>
   43b30:	00800804 	movi	r2,32
   43b34:	00c00044 	movi	r3,1
   43b38:	00000106 	br	43b40 <__divsi3+0x24>
   43b3c:	10000d26 	beq	r2,zero,43b74 <__divsi3+0x58>
   43b40:	294b883a 	add	r5,r5,r5
   43b44:	10bfffc4 	addi	r2,r2,-1
   43b48:	18c7883a 	add	r3,r3,r3
   43b4c:	293ffb36 	bltu	r5,r4,43b3c <__alt_data_end+0xfffe3b3c>
   43b50:	0005883a 	mov	r2,zero
   43b54:	18000726 	beq	r3,zero,43b74 <__divsi3+0x58>
   43b58:	0005883a 	mov	r2,zero
   43b5c:	31400236 	bltu	r6,r5,43b68 <__divsi3+0x4c>
   43b60:	314dc83a 	sub	r6,r6,r5
   43b64:	10c4b03a 	or	r2,r2,r3
   43b68:	1806d07a 	srli	r3,r3,1
   43b6c:	280ad07a 	srli	r5,r5,1
   43b70:	183ffa1e 	bne	r3,zero,43b5c <__alt_data_end+0xfffe3b5c>
   43b74:	38000126 	beq	r7,zero,43b7c <__divsi3+0x60>
   43b78:	0085c83a 	sub	r2,zero,r2
   43b7c:	f800283a 	ret
   43b80:	014bc83a 	sub	r5,zero,r5
   43b84:	39c0005c 	xori	r7,r7,1
   43b88:	003fe706 	br	43b28 <__alt_data_end+0xfffe3b28>
   43b8c:	0109c83a 	sub	r4,zero,r4
   43b90:	01c00044 	movi	r7,1
   43b94:	003fe306 	br	43b24 <__alt_data_end+0xfffe3b24>
   43b98:	00c00044 	movi	r3,1
   43b9c:	003fee06 	br	43b58 <__alt_data_end+0xfffe3b58>

00043ba0 <__modsi3>:
   43ba0:	20001716 	blt	r4,zero,43c00 <__modsi3+0x60>
   43ba4:	000f883a 	mov	r7,zero
   43ba8:	2005883a 	mov	r2,r4
   43bac:	28001216 	blt	r5,zero,43bf8 <__modsi3+0x58>
   43bb0:	2900162e 	bgeu	r5,r4,43c0c <__modsi3+0x6c>
   43bb4:	01800804 	movi	r6,32
   43bb8:	00c00044 	movi	r3,1
   43bbc:	00000106 	br	43bc4 <__modsi3+0x24>
   43bc0:	30000a26 	beq	r6,zero,43bec <__modsi3+0x4c>
   43bc4:	294b883a 	add	r5,r5,r5
   43bc8:	31bfffc4 	addi	r6,r6,-1
   43bcc:	18c7883a 	add	r3,r3,r3
   43bd0:	293ffb36 	bltu	r5,r4,43bc0 <__alt_data_end+0xfffe3bc0>
   43bd4:	18000526 	beq	r3,zero,43bec <__modsi3+0x4c>
   43bd8:	1806d07a 	srli	r3,r3,1
   43bdc:	11400136 	bltu	r2,r5,43be4 <__modsi3+0x44>
   43be0:	1145c83a 	sub	r2,r2,r5
   43be4:	280ad07a 	srli	r5,r5,1
   43be8:	183ffb1e 	bne	r3,zero,43bd8 <__alt_data_end+0xfffe3bd8>
   43bec:	38000126 	beq	r7,zero,43bf4 <__modsi3+0x54>
   43bf0:	0085c83a 	sub	r2,zero,r2
   43bf4:	f800283a 	ret
   43bf8:	014bc83a 	sub	r5,zero,r5
   43bfc:	003fec06 	br	43bb0 <__alt_data_end+0xfffe3bb0>
   43c00:	0109c83a 	sub	r4,zero,r4
   43c04:	01c00044 	movi	r7,1
   43c08:	003fe706 	br	43ba8 <__alt_data_end+0xfffe3ba8>
   43c0c:	00c00044 	movi	r3,1
   43c10:	003ff106 	br	43bd8 <__alt_data_end+0xfffe3bd8>

00043c14 <__udivsi3>:
   43c14:	200d883a 	mov	r6,r4
   43c18:	2900152e 	bgeu	r5,r4,43c70 <__udivsi3+0x5c>
   43c1c:	28001416 	blt	r5,zero,43c70 <__udivsi3+0x5c>
   43c20:	00800804 	movi	r2,32
   43c24:	00c00044 	movi	r3,1
   43c28:	00000206 	br	43c34 <__udivsi3+0x20>
   43c2c:	10000e26 	beq	r2,zero,43c68 <__udivsi3+0x54>
   43c30:	28000516 	blt	r5,zero,43c48 <__udivsi3+0x34>
   43c34:	294b883a 	add	r5,r5,r5
   43c38:	10bfffc4 	addi	r2,r2,-1
   43c3c:	18c7883a 	add	r3,r3,r3
   43c40:	293ffa36 	bltu	r5,r4,43c2c <__alt_data_end+0xfffe3c2c>
   43c44:	18000826 	beq	r3,zero,43c68 <__udivsi3+0x54>
   43c48:	0005883a 	mov	r2,zero
   43c4c:	31400236 	bltu	r6,r5,43c58 <__udivsi3+0x44>
   43c50:	314dc83a 	sub	r6,r6,r5
   43c54:	10c4b03a 	or	r2,r2,r3
   43c58:	1806d07a 	srli	r3,r3,1
   43c5c:	280ad07a 	srli	r5,r5,1
   43c60:	183ffa1e 	bne	r3,zero,43c4c <__alt_data_end+0xfffe3c4c>
   43c64:	f800283a 	ret
   43c68:	0005883a 	mov	r2,zero
   43c6c:	f800283a 	ret
   43c70:	00c00044 	movi	r3,1
   43c74:	003ff406 	br	43c48 <__alt_data_end+0xfffe3c48>

00043c78 <__umodsi3>:
   43c78:	2005883a 	mov	r2,r4
   43c7c:	2900122e 	bgeu	r5,r4,43cc8 <__umodsi3+0x50>
   43c80:	28001116 	blt	r5,zero,43cc8 <__umodsi3+0x50>
   43c84:	01800804 	movi	r6,32
   43c88:	00c00044 	movi	r3,1
   43c8c:	00000206 	br	43c98 <__umodsi3+0x20>
   43c90:	30000c26 	beq	r6,zero,43cc4 <__umodsi3+0x4c>
   43c94:	28000516 	blt	r5,zero,43cac <__umodsi3+0x34>
   43c98:	294b883a 	add	r5,r5,r5
   43c9c:	31bfffc4 	addi	r6,r6,-1
   43ca0:	18c7883a 	add	r3,r3,r3
   43ca4:	293ffa36 	bltu	r5,r4,43c90 <__alt_data_end+0xfffe3c90>
   43ca8:	18000626 	beq	r3,zero,43cc4 <__umodsi3+0x4c>
   43cac:	1806d07a 	srli	r3,r3,1
   43cb0:	11400136 	bltu	r2,r5,43cb8 <__umodsi3+0x40>
   43cb4:	1145c83a 	sub	r2,r2,r5
   43cb8:	280ad07a 	srli	r5,r5,1
   43cbc:	183ffb1e 	bne	r3,zero,43cac <__alt_data_end+0xfffe3cac>
   43cc0:	f800283a 	ret
   43cc4:	f800283a 	ret
   43cc8:	00c00044 	movi	r3,1
   43ccc:	003ff706 	br	43cac <__alt_data_end+0xfffe3cac>

00043cd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43cd0:	defffe04 	addi	sp,sp,-8
   43cd4:	dfc00115 	stw	ra,4(sp)
   43cd8:	df000015 	stw	fp,0(sp)
   43cdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43ce0:	d0a00e17 	ldw	r2,-32712(gp)
   43ce4:	10000326 	beq	r2,zero,43cf4 <alt_get_errno+0x24>
   43ce8:	d0a00e17 	ldw	r2,-32712(gp)
   43cec:	103ee83a 	callr	r2
   43cf0:	00000106 	br	43cf8 <alt_get_errno+0x28>
   43cf4:	d0a6d704 	addi	r2,gp,-25764
}
   43cf8:	e037883a 	mov	sp,fp
   43cfc:	dfc00117 	ldw	ra,4(sp)
   43d00:	df000017 	ldw	fp,0(sp)
   43d04:	dec00204 	addi	sp,sp,8
   43d08:	f800283a 	ret

00043d0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43d0c:	defffb04 	addi	sp,sp,-20
   43d10:	dfc00415 	stw	ra,16(sp)
   43d14:	df000315 	stw	fp,12(sp)
   43d18:	df000304 	addi	fp,sp,12
   43d1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43d20:	e0bfff17 	ldw	r2,-4(fp)
   43d24:	10000816 	blt	r2,zero,43d48 <close+0x3c>
   43d28:	01400304 	movi	r5,12
   43d2c:	e13fff17 	ldw	r4,-4(fp)
   43d30:	0040e9c0 	call	40e9c <__mulsi3>
   43d34:	1007883a 	mov	r3,r2
   43d38:	00800134 	movhi	r2,4
   43d3c:	109cb204 	addi	r2,r2,29384
   43d40:	1885883a 	add	r2,r3,r2
   43d44:	00000106 	br	43d4c <close+0x40>
   43d48:	0005883a 	mov	r2,zero
   43d4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43d50:	e0bffd17 	ldw	r2,-12(fp)
   43d54:	10001926 	beq	r2,zero,43dbc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43d58:	e0bffd17 	ldw	r2,-12(fp)
   43d5c:	10800017 	ldw	r2,0(r2)
   43d60:	10800417 	ldw	r2,16(r2)
   43d64:	10000626 	beq	r2,zero,43d80 <close+0x74>
   43d68:	e0bffd17 	ldw	r2,-12(fp)
   43d6c:	10800017 	ldw	r2,0(r2)
   43d70:	10800417 	ldw	r2,16(r2)
   43d74:	e13ffd17 	ldw	r4,-12(fp)
   43d78:	103ee83a 	callr	r2
   43d7c:	00000106 	br	43d84 <close+0x78>
   43d80:	0005883a 	mov	r2,zero
   43d84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43d88:	e13fff17 	ldw	r4,-4(fp)
   43d8c:	00443f40 	call	443f4 <alt_release_fd>
    if (rval < 0)
   43d90:	e0bffe17 	ldw	r2,-8(fp)
   43d94:	1000070e 	bge	r2,zero,43db4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43d98:	0043cd00 	call	43cd0 <alt_get_errno>
   43d9c:	1007883a 	mov	r3,r2
   43da0:	e0bffe17 	ldw	r2,-8(fp)
   43da4:	0085c83a 	sub	r2,zero,r2
   43da8:	18800015 	stw	r2,0(r3)
      return -1;
   43dac:	00bfffc4 	movi	r2,-1
   43db0:	00000706 	br	43dd0 <close+0xc4>
    }
    return 0;
   43db4:	0005883a 	mov	r2,zero
   43db8:	00000506 	br	43dd0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43dbc:	0043cd00 	call	43cd0 <alt_get_errno>
   43dc0:	1007883a 	mov	r3,r2
   43dc4:	00801444 	movi	r2,81
   43dc8:	18800015 	stw	r2,0(r3)
    return -1;
   43dcc:	00bfffc4 	movi	r2,-1
  }
}
   43dd0:	e037883a 	mov	sp,fp
   43dd4:	dfc00117 	ldw	ra,4(sp)
   43dd8:	df000017 	ldw	fp,0(sp)
   43ddc:	dec00204 	addi	sp,sp,8
   43de0:	f800283a 	ret

00043de4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43de4:	defffc04 	addi	sp,sp,-16
   43de8:	df000315 	stw	fp,12(sp)
   43dec:	df000304 	addi	fp,sp,12
   43df0:	e13ffd15 	stw	r4,-12(fp)
   43df4:	e17ffe15 	stw	r5,-8(fp)
   43df8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43dfc:	e0bfff17 	ldw	r2,-4(fp)
}
   43e00:	e037883a 	mov	sp,fp
   43e04:	df000017 	ldw	fp,0(sp)
   43e08:	dec00104 	addi	sp,sp,4
   43e0c:	f800283a 	ret

00043e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43e10:	defffe04 	addi	sp,sp,-8
   43e14:	dfc00115 	stw	ra,4(sp)
   43e18:	df000015 	stw	fp,0(sp)
   43e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43e20:	d0a00e17 	ldw	r2,-32712(gp)
   43e24:	10000326 	beq	r2,zero,43e34 <alt_get_errno+0x24>
   43e28:	d0a00e17 	ldw	r2,-32712(gp)
   43e2c:	103ee83a 	callr	r2
   43e30:	00000106 	br	43e38 <alt_get_errno+0x28>
   43e34:	d0a6d704 	addi	r2,gp,-25764
}
   43e38:	e037883a 	mov	sp,fp
   43e3c:	dfc00117 	ldw	ra,4(sp)
   43e40:	df000017 	ldw	fp,0(sp)
   43e44:	dec00204 	addi	sp,sp,8
   43e48:	f800283a 	ret

00043e4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43e4c:	defffb04 	addi	sp,sp,-20
   43e50:	dfc00415 	stw	ra,16(sp)
   43e54:	df000315 	stw	fp,12(sp)
   43e58:	df000304 	addi	fp,sp,12
   43e5c:	e13ffe15 	stw	r4,-8(fp)
   43e60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e64:	e0bffe17 	ldw	r2,-8(fp)
   43e68:	10000816 	blt	r2,zero,43e8c <fstat+0x40>
   43e6c:	01400304 	movi	r5,12
   43e70:	e13ffe17 	ldw	r4,-8(fp)
   43e74:	0040e9c0 	call	40e9c <__mulsi3>
   43e78:	1007883a 	mov	r3,r2
   43e7c:	00800134 	movhi	r2,4
   43e80:	109cb204 	addi	r2,r2,29384
   43e84:	1885883a 	add	r2,r3,r2
   43e88:	00000106 	br	43e90 <fstat+0x44>
   43e8c:	0005883a 	mov	r2,zero
   43e90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43e94:	e0bffd17 	ldw	r2,-12(fp)
   43e98:	10001026 	beq	r2,zero,43edc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43e9c:	e0bffd17 	ldw	r2,-12(fp)
   43ea0:	10800017 	ldw	r2,0(r2)
   43ea4:	10800817 	ldw	r2,32(r2)
   43ea8:	10000726 	beq	r2,zero,43ec8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43eac:	e0bffd17 	ldw	r2,-12(fp)
   43eb0:	10800017 	ldw	r2,0(r2)
   43eb4:	10800817 	ldw	r2,32(r2)
   43eb8:	e17fff17 	ldw	r5,-4(fp)
   43ebc:	e13ffd17 	ldw	r4,-12(fp)
   43ec0:	103ee83a 	callr	r2
   43ec4:	00000a06 	br	43ef0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43ec8:	e0bfff17 	ldw	r2,-4(fp)
   43ecc:	00c80004 	movi	r3,8192
   43ed0:	10c00115 	stw	r3,4(r2)
      return 0;
   43ed4:	0005883a 	mov	r2,zero
   43ed8:	00000506 	br	43ef0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43edc:	0043e100 	call	43e10 <alt_get_errno>
   43ee0:	1007883a 	mov	r3,r2
   43ee4:	00801444 	movi	r2,81
   43ee8:	18800015 	stw	r2,0(r3)
    return -1;
   43eec:	00bfffc4 	movi	r2,-1
  }
}
   43ef0:	e037883a 	mov	sp,fp
   43ef4:	dfc00117 	ldw	ra,4(sp)
   43ef8:	df000017 	ldw	fp,0(sp)
   43efc:	dec00204 	addi	sp,sp,8
   43f00:	f800283a 	ret

00043f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43f04:	defffe04 	addi	sp,sp,-8
   43f08:	dfc00115 	stw	ra,4(sp)
   43f0c:	df000015 	stw	fp,0(sp)
   43f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43f14:	d0a00e17 	ldw	r2,-32712(gp)
   43f18:	10000326 	beq	r2,zero,43f28 <alt_get_errno+0x24>
   43f1c:	d0a00e17 	ldw	r2,-32712(gp)
   43f20:	103ee83a 	callr	r2
   43f24:	00000106 	br	43f2c <alt_get_errno+0x28>
   43f28:	d0a6d704 	addi	r2,gp,-25764
}
   43f2c:	e037883a 	mov	sp,fp
   43f30:	dfc00117 	ldw	ra,4(sp)
   43f34:	df000017 	ldw	fp,0(sp)
   43f38:	dec00204 	addi	sp,sp,8
   43f3c:	f800283a 	ret

00043f40 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43f40:	deffed04 	addi	sp,sp,-76
   43f44:	dfc01215 	stw	ra,72(sp)
   43f48:	df001115 	stw	fp,68(sp)
   43f4c:	df001104 	addi	fp,sp,68
   43f50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43f54:	e0bfff17 	ldw	r2,-4(fp)
   43f58:	10000816 	blt	r2,zero,43f7c <isatty+0x3c>
   43f5c:	01400304 	movi	r5,12
   43f60:	e13fff17 	ldw	r4,-4(fp)
   43f64:	0040e9c0 	call	40e9c <__mulsi3>
   43f68:	1007883a 	mov	r3,r2
   43f6c:	00800134 	movhi	r2,4
   43f70:	109cb204 	addi	r2,r2,29384
   43f74:	1885883a 	add	r2,r3,r2
   43f78:	00000106 	br	43f80 <isatty+0x40>
   43f7c:	0005883a 	mov	r2,zero
   43f80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43f84:	e0bfef17 	ldw	r2,-68(fp)
   43f88:	10000e26 	beq	r2,zero,43fc4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43f8c:	e0bfef17 	ldw	r2,-68(fp)
   43f90:	10800017 	ldw	r2,0(r2)
   43f94:	10800817 	ldw	r2,32(r2)
   43f98:	1000021e 	bne	r2,zero,43fa4 <isatty+0x64>
    {
      return 1;
   43f9c:	00800044 	movi	r2,1
   43fa0:	00000d06 	br	43fd8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43fa4:	e0bff004 	addi	r2,fp,-64
   43fa8:	100b883a 	mov	r5,r2
   43fac:	e13fff17 	ldw	r4,-4(fp)
   43fb0:	0043e4c0 	call	43e4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43fb4:	e0bff117 	ldw	r2,-60(fp)
   43fb8:	10880020 	cmpeqi	r2,r2,8192
   43fbc:	10803fcc 	andi	r2,r2,255
   43fc0:	00000506 	br	43fd8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43fc4:	0043f040 	call	43f04 <alt_get_errno>
   43fc8:	1007883a 	mov	r3,r2
   43fcc:	00801444 	movi	r2,81
   43fd0:	18800015 	stw	r2,0(r3)
    return 0;
   43fd4:	0005883a 	mov	r2,zero
  }
}
   43fd8:	e037883a 	mov	sp,fp
   43fdc:	dfc00117 	ldw	ra,4(sp)
   43fe0:	df000017 	ldw	fp,0(sp)
   43fe4:	dec00204 	addi	sp,sp,8
   43fe8:	f800283a 	ret

00043fec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43fec:	defffc04 	addi	sp,sp,-16
   43ff0:	df000315 	stw	fp,12(sp)
   43ff4:	df000304 	addi	fp,sp,12
   43ff8:	e13ffd15 	stw	r4,-12(fp)
   43ffc:	e17ffe15 	stw	r5,-8(fp)
   44000:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   44004:	e0fffe17 	ldw	r3,-8(fp)
   44008:	e0bffd17 	ldw	r2,-12(fp)
   4400c:	18800c26 	beq	r3,r2,44040 <alt_load_section+0x54>
  {
    while( to != end )
   44010:	00000806 	br	44034 <alt_load_section+0x48>
    {
      *to++ = *from++;
   44014:	e0bffe17 	ldw	r2,-8(fp)
   44018:	10c00104 	addi	r3,r2,4
   4401c:	e0fffe15 	stw	r3,-8(fp)
   44020:	e0fffd17 	ldw	r3,-12(fp)
   44024:	19000104 	addi	r4,r3,4
   44028:	e13ffd15 	stw	r4,-12(fp)
   4402c:	18c00017 	ldw	r3,0(r3)
   44030:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   44034:	e0fffe17 	ldw	r3,-8(fp)
   44038:	e0bfff17 	ldw	r2,-4(fp)
   4403c:	18bff51e 	bne	r3,r2,44014 <__alt_data_end+0xfffe4014>
    {
      *to++ = *from++;
    }
  }
}
   44040:	0001883a 	nop
   44044:	e037883a 	mov	sp,fp
   44048:	df000017 	ldw	fp,0(sp)
   4404c:	dec00104 	addi	sp,sp,4
   44050:	f800283a 	ret

00044054 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   44054:	defffe04 	addi	sp,sp,-8
   44058:	dfc00115 	stw	ra,4(sp)
   4405c:	df000015 	stw	fp,0(sp)
   44060:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   44064:	01800174 	movhi	r6,5
   44068:	31a13d04 	addi	r6,r6,-31500
   4406c:	01400134 	movhi	r5,4
   44070:	295a7f04 	addi	r5,r5,27132
   44074:	01000174 	movhi	r4,5
   44078:	21213d04 	addi	r4,r4,-31500
   4407c:	0043fec0 	call	43fec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   44080:	01800134 	movhi	r6,4
   44084:	31808c04 	addi	r6,r6,560
   44088:	01400134 	movhi	r5,4
   4408c:	29400804 	addi	r5,r5,32
   44090:	01000134 	movhi	r4,4
   44094:	21000804 	addi	r4,r4,32
   44098:	0043fec0 	call	43fec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4409c:	01800134 	movhi	r6,4
   440a0:	319a7f04 	addi	r6,r6,27132
   440a4:	01400134 	movhi	r5,4
   440a8:	295a6004 	addi	r5,r5,27008
   440ac:	01000134 	movhi	r4,4
   440b0:	211a6004 	addi	r4,r4,27008
   440b4:	0043fec0 	call	43fec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   440b8:	00458c80 	call	458c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   440bc:	0045a880 	call	45a88 <alt_icache_flush_all>
}
   440c0:	0001883a 	nop
   440c4:	e037883a 	mov	sp,fp
   440c8:	dfc00117 	ldw	ra,4(sp)
   440cc:	df000017 	ldw	fp,0(sp)
   440d0:	dec00204 	addi	sp,sp,8
   440d4:	f800283a 	ret

000440d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   440d8:	defffe04 	addi	sp,sp,-8
   440dc:	dfc00115 	stw	ra,4(sp)
   440e0:	df000015 	stw	fp,0(sp)
   440e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   440e8:	d0a00e17 	ldw	r2,-32712(gp)
   440ec:	10000326 	beq	r2,zero,440fc <alt_get_errno+0x24>
   440f0:	d0a00e17 	ldw	r2,-32712(gp)
   440f4:	103ee83a 	callr	r2
   440f8:	00000106 	br	44100 <alt_get_errno+0x28>
   440fc:	d0a6d704 	addi	r2,gp,-25764
}
   44100:	e037883a 	mov	sp,fp
   44104:	dfc00117 	ldw	ra,4(sp)
   44108:	df000017 	ldw	fp,0(sp)
   4410c:	dec00204 	addi	sp,sp,8
   44110:	f800283a 	ret

00044114 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   44114:	defff904 	addi	sp,sp,-28
   44118:	dfc00615 	stw	ra,24(sp)
   4411c:	df000515 	stw	fp,20(sp)
   44120:	df000504 	addi	fp,sp,20
   44124:	e13ffd15 	stw	r4,-12(fp)
   44128:	e17ffe15 	stw	r5,-8(fp)
   4412c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   44130:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44134:	e0bffd17 	ldw	r2,-12(fp)
   44138:	10000816 	blt	r2,zero,4415c <lseek+0x48>
   4413c:	01400304 	movi	r5,12
   44140:	e13ffd17 	ldw	r4,-12(fp)
   44144:	0040e9c0 	call	40e9c <__mulsi3>
   44148:	1007883a 	mov	r3,r2
   4414c:	00800134 	movhi	r2,4
   44150:	109cb204 	addi	r2,r2,29384
   44154:	1885883a 	add	r2,r3,r2
   44158:	00000106 	br	44160 <lseek+0x4c>
   4415c:	0005883a 	mov	r2,zero
   44160:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   44164:	e0bffc17 	ldw	r2,-16(fp)
   44168:	10001026 	beq	r2,zero,441ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4416c:	e0bffc17 	ldw	r2,-16(fp)
   44170:	10800017 	ldw	r2,0(r2)
   44174:	10800717 	ldw	r2,28(r2)
   44178:	10000926 	beq	r2,zero,441a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4417c:	e0bffc17 	ldw	r2,-16(fp)
   44180:	10800017 	ldw	r2,0(r2)
   44184:	10800717 	ldw	r2,28(r2)
   44188:	e1bfff17 	ldw	r6,-4(fp)
   4418c:	e17ffe17 	ldw	r5,-8(fp)
   44190:	e13ffc17 	ldw	r4,-16(fp)
   44194:	103ee83a 	callr	r2
   44198:	e0bffb15 	stw	r2,-20(fp)
   4419c:	00000506 	br	441b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   441a0:	00bfde84 	movi	r2,-134
   441a4:	e0bffb15 	stw	r2,-20(fp)
   441a8:	00000206 	br	441b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   441ac:	00bfebc4 	movi	r2,-81
   441b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   441b4:	e0bffb17 	ldw	r2,-20(fp)
   441b8:	1000070e 	bge	r2,zero,441d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   441bc:	00440d80 	call	440d8 <alt_get_errno>
   441c0:	1007883a 	mov	r3,r2
   441c4:	e0bffb17 	ldw	r2,-20(fp)
   441c8:	0085c83a 	sub	r2,zero,r2
   441cc:	18800015 	stw	r2,0(r3)
    rc = -1;
   441d0:	00bfffc4 	movi	r2,-1
   441d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   441d8:	e0bffb17 	ldw	r2,-20(fp)
}
   441dc:	e037883a 	mov	sp,fp
   441e0:	dfc00117 	ldw	ra,4(sp)
   441e4:	df000017 	ldw	fp,0(sp)
   441e8:	dec00204 	addi	sp,sp,8
   441ec:	f800283a 	ret

000441f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   441f0:	defffd04 	addi	sp,sp,-12
   441f4:	dfc00215 	stw	ra,8(sp)
   441f8:	df000115 	stw	fp,4(sp)
   441fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   44200:	0009883a 	mov	r4,zero
   44204:	00446980 	call	44698 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   44208:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4420c:	00446d00 	call	446d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   44210:	01800134 	movhi	r6,4
   44214:	319a7504 	addi	r6,r6,27092
   44218:	01400134 	movhi	r5,4
   4421c:	295a7504 	addi	r5,r5,27092
   44220:	01000134 	movhi	r4,4
   44224:	211a7504 	addi	r4,r4,27092
   44228:	0045e2c0 	call	45e2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4422c:	00459c80 	call	459c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   44230:	01000134 	movhi	r4,4
   44234:	21168a04 	addi	r4,r4,23080
   44238:	00465ec0 	call	465ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4423c:	d0a6d817 	ldw	r2,-25760(gp)
   44240:	d0e6d917 	ldw	r3,-25756(gp)
   44244:	d126da17 	ldw	r4,-25752(gp)
   44248:	200d883a 	mov	r6,r4
   4424c:	180b883a 	mov	r5,r3
   44250:	1009883a 	mov	r4,r2
   44254:	0040cdc0 	call	40cdc <main>
   44258:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4425c:	01000044 	movi	r4,1
   44260:	0043d0c0 	call	43d0c <close>
  exit (result);
   44264:	e13fff17 	ldw	r4,-4(fp)
   44268:	00466000 	call	46600 <exit>

0004426c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4426c:	defffe04 	addi	sp,sp,-8
   44270:	df000115 	stw	fp,4(sp)
   44274:	df000104 	addi	fp,sp,4
   44278:	e13fff15 	stw	r4,-4(fp)
}
   4427c:	0001883a 	nop
   44280:	e037883a 	mov	sp,fp
   44284:	df000017 	ldw	fp,0(sp)
   44288:	dec00104 	addi	sp,sp,4
   4428c:	f800283a 	ret

00044290 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   44290:	defffe04 	addi	sp,sp,-8
   44294:	df000115 	stw	fp,4(sp)
   44298:	df000104 	addi	fp,sp,4
   4429c:	e13fff15 	stw	r4,-4(fp)
}
   442a0:	0001883a 	nop
   442a4:	e037883a 	mov	sp,fp
   442a8:	df000017 	ldw	fp,0(sp)
   442ac:	dec00104 	addi	sp,sp,4
   442b0:	f800283a 	ret

000442b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   442b4:	defffe04 	addi	sp,sp,-8
   442b8:	dfc00115 	stw	ra,4(sp)
   442bc:	df000015 	stw	fp,0(sp)
   442c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   442c4:	d0a00e17 	ldw	r2,-32712(gp)
   442c8:	10000326 	beq	r2,zero,442d8 <alt_get_errno+0x24>
   442cc:	d0a00e17 	ldw	r2,-32712(gp)
   442d0:	103ee83a 	callr	r2
   442d4:	00000106 	br	442dc <alt_get_errno+0x28>
   442d8:	d0a6d704 	addi	r2,gp,-25764
}
   442dc:	e037883a 	mov	sp,fp
   442e0:	dfc00117 	ldw	ra,4(sp)
   442e4:	df000017 	ldw	fp,0(sp)
   442e8:	dec00204 	addi	sp,sp,8
   442ec:	f800283a 	ret

000442f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   442f0:	defff904 	addi	sp,sp,-28
   442f4:	dfc00615 	stw	ra,24(sp)
   442f8:	df000515 	stw	fp,20(sp)
   442fc:	df000504 	addi	fp,sp,20
   44300:	e13ffd15 	stw	r4,-12(fp)
   44304:	e17ffe15 	stw	r5,-8(fp)
   44308:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4430c:	e0bffd17 	ldw	r2,-12(fp)
   44310:	10000816 	blt	r2,zero,44334 <read+0x44>
   44314:	01400304 	movi	r5,12
   44318:	e13ffd17 	ldw	r4,-12(fp)
   4431c:	0040e9c0 	call	40e9c <__mulsi3>
   44320:	1007883a 	mov	r3,r2
   44324:	00800134 	movhi	r2,4
   44328:	109cb204 	addi	r2,r2,29384
   4432c:	1885883a 	add	r2,r3,r2
   44330:	00000106 	br	44338 <read+0x48>
   44334:	0005883a 	mov	r2,zero
   44338:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4433c:	e0bffb17 	ldw	r2,-20(fp)
   44340:	10002226 	beq	r2,zero,443cc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44344:	e0bffb17 	ldw	r2,-20(fp)
   44348:	10800217 	ldw	r2,8(r2)
   4434c:	108000cc 	andi	r2,r2,3
   44350:	10800060 	cmpeqi	r2,r2,1
   44354:	1000181e 	bne	r2,zero,443b8 <read+0xc8>
        (fd->dev->read))
   44358:	e0bffb17 	ldw	r2,-20(fp)
   4435c:	10800017 	ldw	r2,0(r2)
   44360:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44364:	10001426 	beq	r2,zero,443b8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   44368:	e0bffb17 	ldw	r2,-20(fp)
   4436c:	10800017 	ldw	r2,0(r2)
   44370:	10800517 	ldw	r2,20(r2)
   44374:	e0ffff17 	ldw	r3,-4(fp)
   44378:	180d883a 	mov	r6,r3
   4437c:	e17ffe17 	ldw	r5,-8(fp)
   44380:	e13ffb17 	ldw	r4,-20(fp)
   44384:	103ee83a 	callr	r2
   44388:	e0bffc15 	stw	r2,-16(fp)
   4438c:	e0bffc17 	ldw	r2,-16(fp)
   44390:	1000070e 	bge	r2,zero,443b0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   44394:	00442b40 	call	442b4 <alt_get_errno>
   44398:	1007883a 	mov	r3,r2
   4439c:	e0bffc17 	ldw	r2,-16(fp)
   443a0:	0085c83a 	sub	r2,zero,r2
   443a4:	18800015 	stw	r2,0(r3)
          return -1;
   443a8:	00bfffc4 	movi	r2,-1
   443ac:	00000c06 	br	443e0 <read+0xf0>
        }
        return rval;
   443b0:	e0bffc17 	ldw	r2,-16(fp)
   443b4:	00000a06 	br	443e0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   443b8:	00442b40 	call	442b4 <alt_get_errno>
   443bc:	1007883a 	mov	r3,r2
   443c0:	00800344 	movi	r2,13
   443c4:	18800015 	stw	r2,0(r3)
   443c8:	00000406 	br	443dc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   443cc:	00442b40 	call	442b4 <alt_get_errno>
   443d0:	1007883a 	mov	r3,r2
   443d4:	00801444 	movi	r2,81
   443d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   443dc:	00bfffc4 	movi	r2,-1
}
   443e0:	e037883a 	mov	sp,fp
   443e4:	dfc00117 	ldw	ra,4(sp)
   443e8:	df000017 	ldw	fp,0(sp)
   443ec:	dec00204 	addi	sp,sp,8
   443f0:	f800283a 	ret

000443f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   443f4:	defffc04 	addi	sp,sp,-16
   443f8:	dfc00315 	stw	ra,12(sp)
   443fc:	df000215 	stw	fp,8(sp)
   44400:	dc000115 	stw	r16,4(sp)
   44404:	df000204 	addi	fp,sp,8
   44408:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4440c:	e0bffe17 	ldw	r2,-8(fp)
   44410:	108000d0 	cmplti	r2,r2,3
   44414:	1000111e 	bne	r2,zero,4445c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   44418:	04000134 	movhi	r16,4
   4441c:	841cb204 	addi	r16,r16,29384
   44420:	e0bffe17 	ldw	r2,-8(fp)
   44424:	01400304 	movi	r5,12
   44428:	1009883a 	mov	r4,r2
   4442c:	0040e9c0 	call	40e9c <__mulsi3>
   44430:	8085883a 	add	r2,r16,r2
   44434:	10800204 	addi	r2,r2,8
   44438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4443c:	04000134 	movhi	r16,4
   44440:	841cb204 	addi	r16,r16,29384
   44444:	e0bffe17 	ldw	r2,-8(fp)
   44448:	01400304 	movi	r5,12
   4444c:	1009883a 	mov	r4,r2
   44450:	0040e9c0 	call	40e9c <__mulsi3>
   44454:	8085883a 	add	r2,r16,r2
   44458:	10000015 	stw	zero,0(r2)
  }
}
   4445c:	0001883a 	nop
   44460:	e6ffff04 	addi	sp,fp,-4
   44464:	dfc00217 	ldw	ra,8(sp)
   44468:	df000117 	ldw	fp,4(sp)
   4446c:	dc000017 	ldw	r16,0(sp)
   44470:	dec00304 	addi	sp,sp,12
   44474:	f800283a 	ret

00044478 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   44478:	defff904 	addi	sp,sp,-28
   4447c:	df000615 	stw	fp,24(sp)
   44480:	df000604 	addi	fp,sp,24
   44484:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44488:	0005303a 	rdctl	r2,status
   4448c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44490:	e0fffe17 	ldw	r3,-8(fp)
   44494:	00bfff84 	movi	r2,-2
   44498:	1884703a 	and	r2,r3,r2
   4449c:	1001703a 	wrctl	status,r2
  
  return context;
   444a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   444a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   444a8:	d0a00f17 	ldw	r2,-32708(gp)
   444ac:	10c000c4 	addi	r3,r2,3
   444b0:	00bfff04 	movi	r2,-4
   444b4:	1884703a 	and	r2,r3,r2
   444b8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   444bc:	d0e00f17 	ldw	r3,-32708(gp)
   444c0:	e0bfff17 	ldw	r2,-4(fp)
   444c4:	1887883a 	add	r3,r3,r2
   444c8:	008001b4 	movhi	r2,6
   444cc:	10800004 	addi	r2,r2,0
   444d0:	10c0062e 	bgeu	r2,r3,444ec <sbrk+0x74>
   444d4:	e0bffb17 	ldw	r2,-20(fp)
   444d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   444dc:	e0bffa17 	ldw	r2,-24(fp)
   444e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   444e4:	00bfffc4 	movi	r2,-1
   444e8:	00000b06 	br	44518 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   444ec:	d0a00f17 	ldw	r2,-32708(gp)
   444f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   444f4:	d0e00f17 	ldw	r3,-32708(gp)
   444f8:	e0bfff17 	ldw	r2,-4(fp)
   444fc:	1885883a 	add	r2,r3,r2
   44500:	d0a00f15 	stw	r2,-32708(gp)
   44504:	e0bffb17 	ldw	r2,-20(fp)
   44508:	e0bffc15 	stw	r2,-16(fp)
   4450c:	e0bffc17 	ldw	r2,-16(fp)
   44510:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   44514:	e0bffd17 	ldw	r2,-12(fp)
} 
   44518:	e037883a 	mov	sp,fp
   4451c:	df000017 	ldw	fp,0(sp)
   44520:	dec00104 	addi	sp,sp,4
   44524:	f800283a 	ret

00044528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44528:	defffe04 	addi	sp,sp,-8
   4452c:	dfc00115 	stw	ra,4(sp)
   44530:	df000015 	stw	fp,0(sp)
   44534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44538:	d0a00e17 	ldw	r2,-32712(gp)
   4453c:	10000326 	beq	r2,zero,4454c <alt_get_errno+0x24>
   44540:	d0a00e17 	ldw	r2,-32712(gp)
   44544:	103ee83a 	callr	r2
   44548:	00000106 	br	44550 <alt_get_errno+0x28>
   4454c:	d0a6d704 	addi	r2,gp,-25764
}
   44550:	e037883a 	mov	sp,fp
   44554:	dfc00117 	ldw	ra,4(sp)
   44558:	df000017 	ldw	fp,0(sp)
   4455c:	dec00204 	addi	sp,sp,8
   44560:	f800283a 	ret

00044564 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   44564:	defff904 	addi	sp,sp,-28
   44568:	dfc00615 	stw	ra,24(sp)
   4456c:	df000515 	stw	fp,20(sp)
   44570:	df000504 	addi	fp,sp,20
   44574:	e13ffd15 	stw	r4,-12(fp)
   44578:	e17ffe15 	stw	r5,-8(fp)
   4457c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44580:	e0bffd17 	ldw	r2,-12(fp)
   44584:	10000816 	blt	r2,zero,445a8 <write+0x44>
   44588:	01400304 	movi	r5,12
   4458c:	e13ffd17 	ldw	r4,-12(fp)
   44590:	0040e9c0 	call	40e9c <__mulsi3>
   44594:	1007883a 	mov	r3,r2
   44598:	00800134 	movhi	r2,4
   4459c:	109cb204 	addi	r2,r2,29384
   445a0:	1885883a 	add	r2,r3,r2
   445a4:	00000106 	br	445ac <write+0x48>
   445a8:	0005883a 	mov	r2,zero
   445ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   445b0:	e0bffb17 	ldw	r2,-20(fp)
   445b4:	10002126 	beq	r2,zero,4463c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   445b8:	e0bffb17 	ldw	r2,-20(fp)
   445bc:	10800217 	ldw	r2,8(r2)
   445c0:	108000cc 	andi	r2,r2,3
   445c4:	10001826 	beq	r2,zero,44628 <write+0xc4>
   445c8:	e0bffb17 	ldw	r2,-20(fp)
   445cc:	10800017 	ldw	r2,0(r2)
   445d0:	10800617 	ldw	r2,24(r2)
   445d4:	10001426 	beq	r2,zero,44628 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   445d8:	e0bffb17 	ldw	r2,-20(fp)
   445dc:	10800017 	ldw	r2,0(r2)
   445e0:	10800617 	ldw	r2,24(r2)
   445e4:	e0ffff17 	ldw	r3,-4(fp)
   445e8:	180d883a 	mov	r6,r3
   445ec:	e17ffe17 	ldw	r5,-8(fp)
   445f0:	e13ffb17 	ldw	r4,-20(fp)
   445f4:	103ee83a 	callr	r2
   445f8:	e0bffc15 	stw	r2,-16(fp)
   445fc:	e0bffc17 	ldw	r2,-16(fp)
   44600:	1000070e 	bge	r2,zero,44620 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   44604:	00445280 	call	44528 <alt_get_errno>
   44608:	1007883a 	mov	r3,r2
   4460c:	e0bffc17 	ldw	r2,-16(fp)
   44610:	0085c83a 	sub	r2,zero,r2
   44614:	18800015 	stw	r2,0(r3)
        return -1;
   44618:	00bfffc4 	movi	r2,-1
   4461c:	00000c06 	br	44650 <write+0xec>
      }
      return rval;
   44620:	e0bffc17 	ldw	r2,-16(fp)
   44624:	00000a06 	br	44650 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   44628:	00445280 	call	44528 <alt_get_errno>
   4462c:	1007883a 	mov	r3,r2
   44630:	00800344 	movi	r2,13
   44634:	18800015 	stw	r2,0(r3)
   44638:	00000406 	br	4464c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4463c:	00445280 	call	44528 <alt_get_errno>
   44640:	1007883a 	mov	r3,r2
   44644:	00801444 	movi	r2,81
   44648:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4464c:	00bfffc4 	movi	r2,-1
}
   44650:	e037883a 	mov	sp,fp
   44654:	dfc00117 	ldw	ra,4(sp)
   44658:	df000017 	ldw	fp,0(sp)
   4465c:	dec00204 	addi	sp,sp,8
   44660:	f800283a 	ret

00044664 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   44664:	defffd04 	addi	sp,sp,-12
   44668:	dfc00215 	stw	ra,8(sp)
   4466c:	df000115 	stw	fp,4(sp)
   44670:	df000104 	addi	fp,sp,4
   44674:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   44678:	d1600b04 	addi	r5,gp,-32724
   4467c:	e13fff17 	ldw	r4,-4(fp)
   44680:	00459240 	call	45924 <alt_dev_llist_insert>
}
   44684:	e037883a 	mov	sp,fp
   44688:	dfc00117 	ldw	ra,4(sp)
   4468c:	df000017 	ldw	fp,0(sp)
   44690:	dec00204 	addi	sp,sp,8
   44694:	f800283a 	ret

00044698 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   44698:	defffd04 	addi	sp,sp,-12
   4469c:	dfc00215 	stw	ra,8(sp)
   446a0:	df000115 	stw	fp,4(sp)
   446a4:	df000104 	addi	fp,sp,4
   446a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1C, cpu_1c);
   446ac:	00462d00 	call	462d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   446b0:	00800044 	movi	r2,1
   446b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   446b8:	0001883a 	nop
   446bc:	e037883a 	mov	sp,fp
   446c0:	dfc00117 	ldw	ra,4(sp)
   446c4:	df000017 	ldw	fp,0(sp)
   446c8:	dec00204 	addi	sp,sp,8
   446cc:	f800283a 	ret

000446d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   446d0:	defffe04 	addi	sp,sp,-8
   446d4:	dfc00115 	stw	ra,4(sp)
   446d8:	df000015 	stw	fp,0(sp)
   446dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1C, timer_1c);
   446e0:	01c0fa04 	movi	r7,1000
   446e4:	01800044 	movi	r6,1
   446e8:	000b883a 	mov	r5,zero
   446ec:	01020034 	movhi	r4,2048
   446f0:	21041004 	addi	r4,r4,4160
   446f4:	00457200 	call	45720 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1B, fifo_1b);
   446f8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1C, fifo_1c);
   446fc:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1C, jtag_uart_1c);
   44700:	01800404 	movi	r6,16
   44704:	000b883a 	mov	r5,zero
   44708:	01000134 	movhi	r4,4
   4470c:	211d1c04 	addi	r4,r4,29808
   44710:	0044da40 	call	44da4 <altera_avalon_jtag_uart_init>
   44714:	01000134 	movhi	r4,4
   44718:	211d1204 	addi	r4,r4,29768
   4471c:	00446640 	call	44664 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1C, sysid_1c);
   44720:	0001883a 	nop
}
   44724:	0001883a 	nop
   44728:	e037883a 	mov	sp,fp
   4472c:	dfc00117 	ldw	ra,4(sp)
   44730:	df000017 	ldw	fp,0(sp)
   44734:	dec00204 	addi	sp,sp,8
   44738:	f800283a 	ret

0004473c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4473c:	defffa04 	addi	sp,sp,-24
   44740:	dfc00515 	stw	ra,20(sp)
   44744:	df000415 	stw	fp,16(sp)
   44748:	df000404 	addi	fp,sp,16
   4474c:	e13ffc15 	stw	r4,-16(fp)
   44750:	e17ffd15 	stw	r5,-12(fp)
   44754:	e1bffe15 	stw	r6,-8(fp)
   44758:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4475c:	01400fc4 	movi	r5,63
   44760:	e13ffc17 	ldw	r4,-16(fp)
   44764:	00449080 	call	44908 <altera_avalon_fifo_clear_event>
   44768:	10000226 	beq	r2,zero,44774 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4476c:	00bfffc4 	movi	r2,-1
   44770:	00001306 	br	447c0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   44774:	e17ffd17 	ldw	r5,-12(fp)
   44778:	e13ffc17 	ldw	r4,-16(fp)
   4477c:	00449680 	call	44968 <altera_avalon_fifo_write_ienable>
   44780:	10000226 	beq	r2,zero,4478c <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   44784:	00bfff84 	movi	r2,-2
   44788:	00000d06 	br	447c0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4478c:	e17fff17 	ldw	r5,-4(fp)
   44790:	e13ffc17 	ldw	r4,-16(fp)
   44794:	00449c40 	call	449c4 <altera_avalon_fifo_write_almostfull>
   44798:	10000226 	beq	r2,zero,447a4 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4479c:	00bfff44 	movi	r2,-3
   447a0:	00000706 	br	447c0 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   447a4:	e17ffe17 	ldw	r5,-8(fp)
   447a8:	e13ffc17 	ldw	r4,-16(fp)
   447ac:	0044a200 	call	44a20 <altera_avalon_fifo_write_almostempty>
   447b0:	10000226 	beq	r2,zero,447bc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   447b4:	00bfff44 	movi	r2,-3
   447b8:	00000106 	br	447c0 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   447bc:	0005883a 	mov	r2,zero
}
   447c0:	e037883a 	mov	sp,fp
   447c4:	dfc00117 	ldw	ra,4(sp)
   447c8:	df000017 	ldw	fp,0(sp)
   447cc:	dec00204 	addi	sp,sp,8
   447d0:	f800283a 	ret

000447d4 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   447d4:	defffd04 	addi	sp,sp,-12
   447d8:	df000215 	stw	fp,8(sp)
   447dc:	df000204 	addi	fp,sp,8
   447e0:	e13ffe15 	stw	r4,-8(fp)
   447e4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   447e8:	e0bffe17 	ldw	r2,-8(fp)
   447ec:	10800104 	addi	r2,r2,4
   447f0:	10800037 	ldwio	r2,0(r2)
   447f4:	1007883a 	mov	r3,r2
   447f8:	e0bfff17 	ldw	r2,-4(fp)
   447fc:	1884703a 	and	r2,r3,r2
}
   44800:	e037883a 	mov	sp,fp
   44804:	df000017 	ldw	fp,0(sp)
   44808:	dec00104 	addi	sp,sp,4
   4480c:	f800283a 	ret

00044810 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   44810:	defffd04 	addi	sp,sp,-12
   44814:	df000215 	stw	fp,8(sp)
   44818:	df000204 	addi	fp,sp,8
   4481c:	e13ffe15 	stw	r4,-8(fp)
   44820:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   44824:	e0bffe17 	ldw	r2,-8(fp)
   44828:	10800304 	addi	r2,r2,12
   4482c:	10800037 	ldwio	r2,0(r2)
   44830:	1007883a 	mov	r3,r2
   44834:	e0bfff17 	ldw	r2,-4(fp)
   44838:	1884703a 	and	r2,r3,r2
}
   4483c:	e037883a 	mov	sp,fp
   44840:	df000017 	ldw	fp,0(sp)
   44844:	dec00104 	addi	sp,sp,4
   44848:	f800283a 	ret

0004484c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4484c:	defffe04 	addi	sp,sp,-8
   44850:	df000115 	stw	fp,4(sp)
   44854:	df000104 	addi	fp,sp,4
   44858:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4485c:	e0bfff17 	ldw	r2,-4(fp)
   44860:	10800404 	addi	r2,r2,16
   44864:	10800037 	ldwio	r2,0(r2)
}
   44868:	e037883a 	mov	sp,fp
   4486c:	df000017 	ldw	fp,0(sp)
   44870:	dec00104 	addi	sp,sp,4
   44874:	f800283a 	ret

00044878 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   44878:	defffe04 	addi	sp,sp,-8
   4487c:	df000115 	stw	fp,4(sp)
   44880:	df000104 	addi	fp,sp,4
   44884:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   44888:	e0bfff17 	ldw	r2,-4(fp)
   4488c:	10800504 	addi	r2,r2,20
   44890:	10800037 	ldwio	r2,0(r2)
}
   44894:	e037883a 	mov	sp,fp
   44898:	df000017 	ldw	fp,0(sp)
   4489c:	dec00104 	addi	sp,sp,4
   448a0:	f800283a 	ret

000448a4 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   448a4:	defffd04 	addi	sp,sp,-12
   448a8:	df000215 	stw	fp,8(sp)
   448ac:	df000204 	addi	fp,sp,8
   448b0:	e13ffe15 	stw	r4,-8(fp)
   448b4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   448b8:	e0bffe17 	ldw	r2,-8(fp)
   448bc:	10800204 	addi	r2,r2,8
   448c0:	10800037 	ldwio	r2,0(r2)
   448c4:	1007883a 	mov	r3,r2
   448c8:	e0bfff17 	ldw	r2,-4(fp)
   448cc:	1884703a 	and	r2,r3,r2
}
   448d0:	e037883a 	mov	sp,fp
   448d4:	df000017 	ldw	fp,0(sp)
   448d8:	dec00104 	addi	sp,sp,4
   448dc:	f800283a 	ret

000448e0 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   448e0:	defffe04 	addi	sp,sp,-8
   448e4:	df000115 	stw	fp,4(sp)
   448e8:	df000104 	addi	fp,sp,4
   448ec:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   448f0:	e0bfff17 	ldw	r2,-4(fp)
   448f4:	10800037 	ldwio	r2,0(r2)
}
   448f8:	e037883a 	mov	sp,fp
   448fc:	df000017 	ldw	fp,0(sp)
   44900:	dec00104 	addi	sp,sp,4
   44904:	f800283a 	ret

00044908 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   44908:	defffd04 	addi	sp,sp,-12
   4490c:	df000215 	stw	fp,8(sp)
   44910:	df000204 	addi	fp,sp,8
   44914:	e13ffe15 	stw	r4,-8(fp)
   44918:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4491c:	e0bffe17 	ldw	r2,-8(fp)
   44920:	10800204 	addi	r2,r2,8
   44924:	1007883a 	mov	r3,r2
   44928:	e0bfff17 	ldw	r2,-4(fp)
   4492c:	18800035 	stwio	r2,0(r3)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   44930:	e0bffe17 	ldw	r2,-8(fp)
   44934:	10800204 	addi	r2,r2,8
   44938:	10800037 	ldwio	r2,0(r2)
   4493c:	1007883a 	mov	r3,r2
   44940:	e0bfff17 	ldw	r2,-4(fp)
   44944:	1884703a 	and	r2,r3,r2
   44948:	1000021e 	bne	r2,zero,44954 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   4494c:	0005883a 	mov	r2,zero
   44950:	00000106 	br	44958 <altera_avalon_fifo_clear_event+0x50>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   44954:	00bfffc4 	movi	r2,-1
}
   44958:	e037883a 	mov	sp,fp
   4495c:	df000017 	ldw	fp,0(sp)
   44960:	dec00104 	addi	sp,sp,4
   44964:	f800283a 	ret

00044968 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   44968:	defffd04 	addi	sp,sp,-12
   4496c:	df000215 	stw	fp,8(sp)
   44970:	df000204 	addi	fp,sp,8
   44974:	e13ffe15 	stw	r4,-8(fp)
   44978:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4497c:	e0bffe17 	ldw	r2,-8(fp)
   44980:	10800304 	addi	r2,r2,12
   44984:	1007883a 	mov	r3,r2
   44988:	e0bfff17 	ldw	r2,-4(fp)
   4498c:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   44990:	e0bffe17 	ldw	r2,-8(fp)
   44994:	10800304 	addi	r2,r2,12
   44998:	10800037 	ldwio	r2,0(r2)
   4499c:	1007883a 	mov	r3,r2
   449a0:	e0bfff17 	ldw	r2,-4(fp)
   449a4:	1880021e 	bne	r3,r2,449b0 <altera_avalon_fifo_write_ienable+0x48>
        return ALTERA_AVALON_FIFO_OK;
   449a8:	0005883a 	mov	r2,zero
   449ac:	00000106 	br	449b4 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   449b0:	00bfff84 	movi	r2,-2
}
   449b4:	e037883a 	mov	sp,fp
   449b8:	df000017 	ldw	fp,0(sp)
   449bc:	dec00104 	addi	sp,sp,4
   449c0:	f800283a 	ret

000449c4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   449c4:	defffd04 	addi	sp,sp,-12
   449c8:	df000215 	stw	fp,8(sp)
   449cc:	df000204 	addi	fp,sp,8
   449d0:	e13ffe15 	stw	r4,-8(fp)
   449d4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   449d8:	e0bffe17 	ldw	r2,-8(fp)
   449dc:	10800404 	addi	r2,r2,16
   449e0:	1007883a 	mov	r3,r2
   449e4:	e0bfff17 	ldw	r2,-4(fp)
   449e8:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   449ec:	e0bffe17 	ldw	r2,-8(fp)
   449f0:	10800404 	addi	r2,r2,16
   449f4:	10800037 	ldwio	r2,0(r2)
   449f8:	1007883a 	mov	r3,r2
   449fc:	e0bfff17 	ldw	r2,-4(fp)
   44a00:	1880021e 	bne	r3,r2,44a0c <altera_avalon_fifo_write_almostfull+0x48>
        return ALTERA_AVALON_FIFO_OK;
   44a04:	0005883a 	mov	r2,zero
   44a08:	00000106 	br	44a10 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44a0c:	00bfff44 	movi	r2,-3
}
   44a10:	e037883a 	mov	sp,fp
   44a14:	df000017 	ldw	fp,0(sp)
   44a18:	dec00104 	addi	sp,sp,4
   44a1c:	f800283a 	ret

00044a20 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   44a20:	defffd04 	addi	sp,sp,-12
   44a24:	df000215 	stw	fp,8(sp)
   44a28:	df000204 	addi	fp,sp,8
   44a2c:	e13ffe15 	stw	r4,-8(fp)
   44a30:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   44a34:	e0bffe17 	ldw	r2,-8(fp)
   44a38:	10800504 	addi	r2,r2,20
   44a3c:	1007883a 	mov	r3,r2
   44a40:	e0bfff17 	ldw	r2,-4(fp)
   44a44:	18800035 	stwio	r2,0(r3)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   44a48:	e0bffe17 	ldw	r2,-8(fp)
   44a4c:	10800504 	addi	r2,r2,20
   44a50:	10800037 	ldwio	r2,0(r2)
   44a54:	1007883a 	mov	r3,r2
   44a58:	e0bfff17 	ldw	r2,-4(fp)
   44a5c:	1880021e 	bne	r3,r2,44a68 <altera_avalon_fifo_write_almostempty+0x48>
        return ALTERA_AVALON_FIFO_OK;
   44a60:	0005883a 	mov	r2,zero
   44a64:	00000106 	br	44a6c <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44a68:	00bfff44 	movi	r2,-3
}
   44a6c:	e037883a 	mov	sp,fp
   44a70:	df000017 	ldw	fp,0(sp)
   44a74:	dec00104 	addi	sp,sp,4
   44a78:	f800283a 	ret

00044a7c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   44a7c:	defffb04 	addi	sp,sp,-20
   44a80:	dfc00415 	stw	ra,16(sp)
   44a84:	df000315 	stw	fp,12(sp)
   44a88:	df000304 	addi	fp,sp,12
   44a8c:	e13ffd15 	stw	r4,-12(fp)
   44a90:	e17ffe15 	stw	r5,-8(fp)
   44a94:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   44a98:	01400044 	movi	r5,1
   44a9c:	e13ffe17 	ldw	r4,-8(fp)
   44aa0:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   44aa4:	1000051e 	bne	r2,zero,44abc <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   44aa8:	e0bffd17 	ldw	r2,-12(fp)
   44aac:	e0ffff17 	ldw	r3,-4(fp)
   44ab0:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   44ab4:	0005883a 	mov	r2,zero
   44ab8:	00000106 	br	44ac0 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   44abc:	00bfff04 	movi	r2,-4
    }
}
   44ac0:	e037883a 	mov	sp,fp
   44ac4:	dfc00117 	ldw	ra,4(sp)
   44ac8:	df000017 	ldw	fp,0(sp)
   44acc:	dec00204 	addi	sp,sp,8
   44ad0:	f800283a 	ret

00044ad4 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   44ad4:	defffa04 	addi	sp,sp,-24
   44ad8:	dfc00515 	stw	ra,20(sp)
   44adc:	df000415 	stw	fp,16(sp)
   44ae0:	df000404 	addi	fp,sp,16
   44ae4:	e13ffd15 	stw	r4,-12(fp)
   44ae8:	e17ffe15 	stw	r5,-8(fp)
   44aec:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   44af0:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   44af4:	e0bfff17 	ldw	r2,-4(fp)
   44af8:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44afc:	01400084 	movi	r5,2
   44b00:	e13ffe17 	ldw	r4,-8(fp)
   44b04:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   44b08:	1000071e 	bne	r2,zero,44b28 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   44b0c:	e13ffe17 	ldw	r4,-8(fp)
   44b10:	00448e00 	call	448e0 <altera_avalon_fifo_read_level>
   44b14:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44b18:	e0bffd17 	ldw	r2,-12(fp)
   44b1c:	10c00037 	ldwio	r3,0(r2)
   44b20:	e0bfff17 	ldw	r2,-4(fp)
   44b24:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   44b28:	e0bffc17 	ldw	r2,-16(fp)
}
   44b2c:	e037883a 	mov	sp,fp
   44b30:	dfc00117 	ldw	ra,4(sp)
   44b34:	df000017 	ldw	fp,0(sp)
   44b38:	dec00204 	addi	sp,sp,8
   44b3c:	f800283a 	ret

00044b40 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   44b40:	defffc04 	addi	sp,sp,-16
   44b44:	dfc00315 	stw	ra,12(sp)
   44b48:	df000215 	stw	fp,8(sp)
   44b4c:	df000204 	addi	fp,sp,8
   44b50:	e13ffe15 	stw	r4,-8(fp)
   44b54:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44b58:	01400084 	movi	r5,2
   44b5c:	e13fff17 	ldw	r4,-4(fp)
   44b60:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   44b64:	1000031e 	bne	r2,zero,44b74 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44b68:	e0bffe17 	ldw	r2,-8(fp)
   44b6c:	10800037 	ldwio	r2,0(r2)
   44b70:	00000106 	br	44b78 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   44b74:	0005883a 	mov	r2,zero
}
   44b78:	e037883a 	mov	sp,fp
   44b7c:	dfc00117 	ldw	ra,4(sp)
   44b80:	df000017 	ldw	fp,0(sp)
   44b84:	dec00204 	addi	sp,sp,8
   44b88:	f800283a 	ret

00044b8c <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   44b8c:	defffb04 	addi	sp,sp,-20
   44b90:	dfc00415 	stw	ra,16(sp)
   44b94:	df000315 	stw	fp,12(sp)
   44b98:	df000304 	addi	fp,sp,12
   44b9c:	e13ffd15 	stw	r4,-12(fp)
   44ba0:	e17ffe15 	stw	r5,-8(fp)
   44ba4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   44ba8:	01400044 	movi	r5,1
   44bac:	e13ffe17 	ldw	r4,-8(fp)
   44bb0:	00447d40 	call	447d4 <altera_avalon_fifo_read_status>
   44bb4:	1000071e 	bne	r2,zero,44bd4 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   44bb8:	e0bffd17 	ldw	r2,-12(fp)
   44bbc:	10800104 	addi	r2,r2,4
   44bc0:	1007883a 	mov	r3,r2
   44bc4:	e0bfff17 	ldw	r2,-4(fp)
   44bc8:	18800035 	stwio	r2,0(r3)
	return ALTERA_AVALON_FIFO_OK;
   44bcc:	0005883a 	mov	r2,zero
   44bd0:	00000106 	br	44bd8 <altera_avalon_fifo_write_other_info+0x4c>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   44bd4:	00bfff04 	movi	r2,-4
    }
}
   44bd8:	e037883a 	mov	sp,fp
   44bdc:	dfc00117 	ldw	ra,4(sp)
   44be0:	df000017 	ldw	fp,0(sp)
   44be4:	dec00204 	addi	sp,sp,8
   44be8:	f800283a 	ret

00044bec <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   44bec:	defffe04 	addi	sp,sp,-8
   44bf0:	df000115 	stw	fp,4(sp)
   44bf4:	df000104 	addi	fp,sp,4
   44bf8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   44bfc:	e0bfff17 	ldw	r2,-4(fp)
   44c00:	10800104 	addi	r2,r2,4
   44c04:	10800037 	ldwio	r2,0(r2)
}
   44c08:	e037883a 	mov	sp,fp
   44c0c:	df000017 	ldw	fp,0(sp)
   44c10:	dec00104 	addi	sp,sp,4
   44c14:	f800283a 	ret

00044c18 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   44c18:	defffe04 	addi	sp,sp,-8
   44c1c:	df000115 	stw	fp,4(sp)
   44c20:	df000104 	addi	fp,sp,4
   44c24:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   44c28:	e0bfff17 	ldw	r2,-4(fp)
   44c2c:	10800037 	ldwio	r2,0(r2)
}
   44c30:	e037883a 	mov	sp,fp
   44c34:	df000017 	ldw	fp,0(sp)
   44c38:	dec00104 	addi	sp,sp,4
   44c3c:	f800283a 	ret

00044c40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44c40:	defffa04 	addi	sp,sp,-24
   44c44:	dfc00515 	stw	ra,20(sp)
   44c48:	df000415 	stw	fp,16(sp)
   44c4c:	df000404 	addi	fp,sp,16
   44c50:	e13ffd15 	stw	r4,-12(fp)
   44c54:	e17ffe15 	stw	r5,-8(fp)
   44c58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44c5c:	e0bffd17 	ldw	r2,-12(fp)
   44c60:	10800017 	ldw	r2,0(r2)
   44c64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44c68:	e0bffc17 	ldw	r2,-16(fp)
   44c6c:	10c00a04 	addi	r3,r2,40
   44c70:	e0bffd17 	ldw	r2,-12(fp)
   44c74:	10800217 	ldw	r2,8(r2)
   44c78:	100f883a 	mov	r7,r2
   44c7c:	e1bfff17 	ldw	r6,-4(fp)
   44c80:	e17ffe17 	ldw	r5,-8(fp)
   44c84:	1809883a 	mov	r4,r3
   44c88:	00452680 	call	45268 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44c8c:	e037883a 	mov	sp,fp
   44c90:	dfc00117 	ldw	ra,4(sp)
   44c94:	df000017 	ldw	fp,0(sp)
   44c98:	dec00204 	addi	sp,sp,8
   44c9c:	f800283a 	ret

00044ca0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44ca0:	defffa04 	addi	sp,sp,-24
   44ca4:	dfc00515 	stw	ra,20(sp)
   44ca8:	df000415 	stw	fp,16(sp)
   44cac:	df000404 	addi	fp,sp,16
   44cb0:	e13ffd15 	stw	r4,-12(fp)
   44cb4:	e17ffe15 	stw	r5,-8(fp)
   44cb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44cbc:	e0bffd17 	ldw	r2,-12(fp)
   44cc0:	10800017 	ldw	r2,0(r2)
   44cc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44cc8:	e0bffc17 	ldw	r2,-16(fp)
   44ccc:	10c00a04 	addi	r3,r2,40
   44cd0:	e0bffd17 	ldw	r2,-12(fp)
   44cd4:	10800217 	ldw	r2,8(r2)
   44cd8:	100f883a 	mov	r7,r2
   44cdc:	e1bfff17 	ldw	r6,-4(fp)
   44ce0:	e17ffe17 	ldw	r5,-8(fp)
   44ce4:	1809883a 	mov	r4,r3
   44ce8:	00454840 	call	45484 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44cec:	e037883a 	mov	sp,fp
   44cf0:	dfc00117 	ldw	ra,4(sp)
   44cf4:	df000017 	ldw	fp,0(sp)
   44cf8:	dec00204 	addi	sp,sp,8
   44cfc:	f800283a 	ret

00044d00 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44d00:	defffc04 	addi	sp,sp,-16
   44d04:	dfc00315 	stw	ra,12(sp)
   44d08:	df000215 	stw	fp,8(sp)
   44d0c:	df000204 	addi	fp,sp,8
   44d10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44d14:	e0bfff17 	ldw	r2,-4(fp)
   44d18:	10800017 	ldw	r2,0(r2)
   44d1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   44d20:	e0bffe17 	ldw	r2,-8(fp)
   44d24:	10c00a04 	addi	r3,r2,40
   44d28:	e0bfff17 	ldw	r2,-4(fp)
   44d2c:	10800217 	ldw	r2,8(r2)
   44d30:	100b883a 	mov	r5,r2
   44d34:	1809883a 	mov	r4,r3
   44d38:	00451100 	call	45110 <altera_avalon_jtag_uart_close>
}
   44d3c:	e037883a 	mov	sp,fp
   44d40:	dfc00117 	ldw	ra,4(sp)
   44d44:	df000017 	ldw	fp,0(sp)
   44d48:	dec00204 	addi	sp,sp,8
   44d4c:	f800283a 	ret

00044d50 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   44d50:	defffa04 	addi	sp,sp,-24
   44d54:	dfc00515 	stw	ra,20(sp)
   44d58:	df000415 	stw	fp,16(sp)
   44d5c:	df000404 	addi	fp,sp,16
   44d60:	e13ffd15 	stw	r4,-12(fp)
   44d64:	e17ffe15 	stw	r5,-8(fp)
   44d68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   44d6c:	e0bffd17 	ldw	r2,-12(fp)
   44d70:	10800017 	ldw	r2,0(r2)
   44d74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44d78:	e0bffc17 	ldw	r2,-16(fp)
   44d7c:	10800a04 	addi	r2,r2,40
   44d80:	e1bfff17 	ldw	r6,-4(fp)
   44d84:	e17ffe17 	ldw	r5,-8(fp)
   44d88:	1009883a 	mov	r4,r2
   44d8c:	00451780 	call	45178 <altera_avalon_jtag_uart_ioctl>
}
   44d90:	e037883a 	mov	sp,fp
   44d94:	dfc00117 	ldw	ra,4(sp)
   44d98:	df000017 	ldw	fp,0(sp)
   44d9c:	dec00204 	addi	sp,sp,8
   44da0:	f800283a 	ret

00044da4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   44da4:	defffa04 	addi	sp,sp,-24
   44da8:	dfc00515 	stw	ra,20(sp)
   44dac:	df000415 	stw	fp,16(sp)
   44db0:	df000404 	addi	fp,sp,16
   44db4:	e13ffd15 	stw	r4,-12(fp)
   44db8:	e17ffe15 	stw	r5,-8(fp)
   44dbc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44dc0:	e0bffd17 	ldw	r2,-12(fp)
   44dc4:	00c00044 	movi	r3,1
   44dc8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44dcc:	e0bffd17 	ldw	r2,-12(fp)
   44dd0:	10800017 	ldw	r2,0(r2)
   44dd4:	10800104 	addi	r2,r2,4
   44dd8:	1007883a 	mov	r3,r2
   44ddc:	e0bffd17 	ldw	r2,-12(fp)
   44de0:	10800817 	ldw	r2,32(r2)
   44de4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44de8:	e0bffe17 	ldw	r2,-8(fp)
   44dec:	e0ffff17 	ldw	r3,-4(fp)
   44df0:	d8000015 	stw	zero,0(sp)
   44df4:	e1fffd17 	ldw	r7,-12(fp)
   44df8:	01800134 	movhi	r6,4
   44dfc:	31939904 	addi	r6,r6,20068
   44e00:	180b883a 	mov	r5,r3
   44e04:	1009883a 	mov	r4,r2
   44e08:	0045aa80 	call	45aa8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   44e0c:	e0bffd17 	ldw	r2,-12(fp)
   44e10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   44e14:	e0bffd17 	ldw	r2,-12(fp)
   44e18:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44e1c:	d0e6dc17 	ldw	r3,-25744(gp)
   44e20:	e1fffd17 	ldw	r7,-12(fp)
   44e24:	01800134 	movhi	r6,4
   44e28:	31941c04 	addi	r6,r6,20592
   44e2c:	180b883a 	mov	r5,r3
   44e30:	1009883a 	mov	r4,r2
   44e34:	004579c0 	call	4579c <alt_alarm_start>
   44e38:	1000040e 	bge	r2,zero,44e4c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   44e3c:	e0fffd17 	ldw	r3,-12(fp)
   44e40:	00a00034 	movhi	r2,32768
   44e44:	10bfffc4 	addi	r2,r2,-1
   44e48:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   44e4c:	0001883a 	nop
   44e50:	e037883a 	mov	sp,fp
   44e54:	dfc00117 	ldw	ra,4(sp)
   44e58:	df000017 	ldw	fp,0(sp)
   44e5c:	dec00204 	addi	sp,sp,8
   44e60:	f800283a 	ret

00044e64 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44e64:	defff804 	addi	sp,sp,-32
   44e68:	df000715 	stw	fp,28(sp)
   44e6c:	df000704 	addi	fp,sp,28
   44e70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44e74:	e0bfff17 	ldw	r2,-4(fp)
   44e78:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44e7c:	e0bffb17 	ldw	r2,-20(fp)
   44e80:	10800017 	ldw	r2,0(r2)
   44e84:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44e88:	e0bffc17 	ldw	r2,-16(fp)
   44e8c:	10800104 	addi	r2,r2,4
   44e90:	10800037 	ldwio	r2,0(r2)
   44e94:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44e98:	e0bffd17 	ldw	r2,-12(fp)
   44e9c:	1080c00c 	andi	r2,r2,768
   44ea0:	10006d26 	beq	r2,zero,45058 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44ea4:	e0bffd17 	ldw	r2,-12(fp)
   44ea8:	1080400c 	andi	r2,r2,256
   44eac:	10003526 	beq	r2,zero,44f84 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44eb0:	00800074 	movhi	r2,1
   44eb4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44eb8:	e0bffb17 	ldw	r2,-20(fp)
   44ebc:	10800a17 	ldw	r2,40(r2)
   44ec0:	10800044 	addi	r2,r2,1
   44ec4:	1081ffcc 	andi	r2,r2,2047
   44ec8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44ecc:	e0bffb17 	ldw	r2,-20(fp)
   44ed0:	10c00b17 	ldw	r3,44(r2)
   44ed4:	e0bffe17 	ldw	r2,-8(fp)
   44ed8:	18801526 	beq	r3,r2,44f30 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44edc:	e0bffc17 	ldw	r2,-16(fp)
   44ee0:	10800037 	ldwio	r2,0(r2)
   44ee4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44ee8:	e0bff917 	ldw	r2,-28(fp)
   44eec:	10a0000c 	andi	r2,r2,32768
   44ef0:	10001126 	beq	r2,zero,44f38 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44ef4:	e0bffb17 	ldw	r2,-20(fp)
   44ef8:	10800a17 	ldw	r2,40(r2)
   44efc:	e0fff917 	ldw	r3,-28(fp)
   44f00:	1809883a 	mov	r4,r3
   44f04:	e0fffb17 	ldw	r3,-20(fp)
   44f08:	1885883a 	add	r2,r3,r2
   44f0c:	10800e04 	addi	r2,r2,56
   44f10:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44f14:	e0bffb17 	ldw	r2,-20(fp)
   44f18:	10800a17 	ldw	r2,40(r2)
   44f1c:	10800044 	addi	r2,r2,1
   44f20:	10c1ffcc 	andi	r3,r2,2047
   44f24:	e0bffb17 	ldw	r2,-20(fp)
   44f28:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   44f2c:	003fe206 	br	44eb8 <__alt_data_end+0xfffe4eb8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   44f30:	0001883a 	nop
   44f34:	00000106 	br	44f3c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   44f38:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44f3c:	e0bff917 	ldw	r2,-28(fp)
   44f40:	10bfffec 	andhi	r2,r2,65535
   44f44:	10000f26 	beq	r2,zero,44f84 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44f48:	e0bffb17 	ldw	r2,-20(fp)
   44f4c:	10c00817 	ldw	r3,32(r2)
   44f50:	00bfff84 	movi	r2,-2
   44f54:	1886703a 	and	r3,r3,r2
   44f58:	e0bffb17 	ldw	r2,-20(fp)
   44f5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44f60:	e0bffc17 	ldw	r2,-16(fp)
   44f64:	10800104 	addi	r2,r2,4
   44f68:	1007883a 	mov	r3,r2
   44f6c:	e0bffb17 	ldw	r2,-20(fp)
   44f70:	10800817 	ldw	r2,32(r2)
   44f74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44f78:	e0bffc17 	ldw	r2,-16(fp)
   44f7c:	10800104 	addi	r2,r2,4
   44f80:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44f84:	e0bffd17 	ldw	r2,-12(fp)
   44f88:	1080800c 	andi	r2,r2,512
   44f8c:	103fbe26 	beq	r2,zero,44e88 <__alt_data_end+0xfffe4e88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44f90:	e0bffd17 	ldw	r2,-12(fp)
   44f94:	1004d43a 	srli	r2,r2,16
   44f98:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44f9c:	00001406 	br	44ff0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44fa0:	e0bffc17 	ldw	r2,-16(fp)
   44fa4:	e0fffb17 	ldw	r3,-20(fp)
   44fa8:	18c00d17 	ldw	r3,52(r3)
   44fac:	e13ffb17 	ldw	r4,-20(fp)
   44fb0:	20c7883a 	add	r3,r4,r3
   44fb4:	18c20e04 	addi	r3,r3,2104
   44fb8:	18c00003 	ldbu	r3,0(r3)
   44fbc:	18c03fcc 	andi	r3,r3,255
   44fc0:	18c0201c 	xori	r3,r3,128
   44fc4:	18ffe004 	addi	r3,r3,-128
   44fc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44fcc:	e0bffb17 	ldw	r2,-20(fp)
   44fd0:	10800d17 	ldw	r2,52(r2)
   44fd4:	10800044 	addi	r2,r2,1
   44fd8:	10c1ffcc 	andi	r3,r2,2047
   44fdc:	e0bffb17 	ldw	r2,-20(fp)
   44fe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44fe4:	e0bffa17 	ldw	r2,-24(fp)
   44fe8:	10bfffc4 	addi	r2,r2,-1
   44fec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44ff0:	e0bffa17 	ldw	r2,-24(fp)
   44ff4:	10000526 	beq	r2,zero,4500c <altera_avalon_jtag_uart_irq+0x1a8>
   44ff8:	e0bffb17 	ldw	r2,-20(fp)
   44ffc:	10c00d17 	ldw	r3,52(r2)
   45000:	e0bffb17 	ldw	r2,-20(fp)
   45004:	10800c17 	ldw	r2,48(r2)
   45008:	18bfe51e 	bne	r3,r2,44fa0 <__alt_data_end+0xfffe4fa0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4500c:	e0bffa17 	ldw	r2,-24(fp)
   45010:	103f9d26 	beq	r2,zero,44e88 <__alt_data_end+0xfffe4e88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   45014:	e0bffb17 	ldw	r2,-20(fp)
   45018:	10c00817 	ldw	r3,32(r2)
   4501c:	00bfff44 	movi	r2,-3
   45020:	1886703a 	and	r3,r3,r2
   45024:	e0bffb17 	ldw	r2,-20(fp)
   45028:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4502c:	e0bffb17 	ldw	r2,-20(fp)
   45030:	10800017 	ldw	r2,0(r2)
   45034:	10800104 	addi	r2,r2,4
   45038:	1007883a 	mov	r3,r2
   4503c:	e0bffb17 	ldw	r2,-20(fp)
   45040:	10800817 	ldw	r2,32(r2)
   45044:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   45048:	e0bffc17 	ldw	r2,-16(fp)
   4504c:	10800104 	addi	r2,r2,4
   45050:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   45054:	003f8c06 	br	44e88 <__alt_data_end+0xfffe4e88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   45058:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4505c:	0001883a 	nop
   45060:	e037883a 	mov	sp,fp
   45064:	df000017 	ldw	fp,0(sp)
   45068:	dec00104 	addi	sp,sp,4
   4506c:	f800283a 	ret

00045070 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   45070:	defff804 	addi	sp,sp,-32
   45074:	df000715 	stw	fp,28(sp)
   45078:	df000704 	addi	fp,sp,28
   4507c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   45080:	e0bffb17 	ldw	r2,-20(fp)
   45084:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   45088:	e0bff917 	ldw	r2,-28(fp)
   4508c:	10800017 	ldw	r2,0(r2)
   45090:	10800104 	addi	r2,r2,4
   45094:	10800037 	ldwio	r2,0(r2)
   45098:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4509c:	e0bffa17 	ldw	r2,-24(fp)
   450a0:	1081000c 	andi	r2,r2,1024
   450a4:	10000b26 	beq	r2,zero,450d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   450a8:	e0bff917 	ldw	r2,-28(fp)
   450ac:	10800017 	ldw	r2,0(r2)
   450b0:	10800104 	addi	r2,r2,4
   450b4:	1007883a 	mov	r3,r2
   450b8:	e0bff917 	ldw	r2,-28(fp)
   450bc:	10800817 	ldw	r2,32(r2)
   450c0:	10810014 	ori	r2,r2,1024
   450c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   450c8:	e0bff917 	ldw	r2,-28(fp)
   450cc:	10000915 	stw	zero,36(r2)
   450d0:	00000a06 	br	450fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   450d4:	e0bff917 	ldw	r2,-28(fp)
   450d8:	10c00917 	ldw	r3,36(r2)
   450dc:	00a00034 	movhi	r2,32768
   450e0:	10bfff04 	addi	r2,r2,-4
   450e4:	10c00536 	bltu	r2,r3,450fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   450e8:	e0bff917 	ldw	r2,-28(fp)
   450ec:	10800917 	ldw	r2,36(r2)
   450f0:	10c00044 	addi	r3,r2,1
   450f4:	e0bff917 	ldw	r2,-28(fp)
   450f8:	10c00915 	stw	r3,36(r2)
   450fc:	d0a6dc17 	ldw	r2,-25744(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   45100:	e037883a 	mov	sp,fp
   45104:	df000017 	ldw	fp,0(sp)
   45108:	dec00104 	addi	sp,sp,4
   4510c:	f800283a 	ret

00045110 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   45110:	defffd04 	addi	sp,sp,-12
   45114:	df000215 	stw	fp,8(sp)
   45118:	df000204 	addi	fp,sp,8
   4511c:	e13ffe15 	stw	r4,-8(fp)
   45120:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   45124:	00000506 	br	4513c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   45128:	e0bfff17 	ldw	r2,-4(fp)
   4512c:	1090000c 	andi	r2,r2,16384
   45130:	10000226 	beq	r2,zero,4513c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   45134:	00bffd44 	movi	r2,-11
   45138:	00000b06 	br	45168 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4513c:	e0bffe17 	ldw	r2,-8(fp)
   45140:	10c00d17 	ldw	r3,52(r2)
   45144:	e0bffe17 	ldw	r2,-8(fp)
   45148:	10800c17 	ldw	r2,48(r2)
   4514c:	18800526 	beq	r3,r2,45164 <altera_avalon_jtag_uart_close+0x54>
   45150:	e0bffe17 	ldw	r2,-8(fp)
   45154:	10c00917 	ldw	r3,36(r2)
   45158:	e0bffe17 	ldw	r2,-8(fp)
   4515c:	10800117 	ldw	r2,4(r2)
   45160:	18bff136 	bltu	r3,r2,45128 <__alt_data_end+0xfffe5128>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   45164:	0005883a 	mov	r2,zero
}
   45168:	e037883a 	mov	sp,fp
   4516c:	df000017 	ldw	fp,0(sp)
   45170:	dec00104 	addi	sp,sp,4
   45174:	f800283a 	ret

00045178 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   45178:	defffa04 	addi	sp,sp,-24
   4517c:	df000515 	stw	fp,20(sp)
   45180:	df000504 	addi	fp,sp,20
   45184:	e13ffd15 	stw	r4,-12(fp)
   45188:	e17ffe15 	stw	r5,-8(fp)
   4518c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   45190:	00bff9c4 	movi	r2,-25
   45194:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   45198:	e0bffe17 	ldw	r2,-8(fp)
   4519c:	10da8060 	cmpeqi	r3,r2,27137
   451a0:	1800031e 	bne	r3,zero,451b0 <altera_avalon_jtag_uart_ioctl+0x38>
   451a4:	109a80a0 	cmpeqi	r2,r2,27138
   451a8:	1000181e 	bne	r2,zero,4520c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   451ac:	00002906 	br	45254 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   451b0:	e0bffd17 	ldw	r2,-12(fp)
   451b4:	10c00117 	ldw	r3,4(r2)
   451b8:	00a00034 	movhi	r2,32768
   451bc:	10bfffc4 	addi	r2,r2,-1
   451c0:	18802126 	beq	r3,r2,45248 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   451c4:	e0bfff17 	ldw	r2,-4(fp)
   451c8:	10800017 	ldw	r2,0(r2)
   451cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   451d0:	e0bffc17 	ldw	r2,-16(fp)
   451d4:	10800090 	cmplti	r2,r2,2
   451d8:	1000061e 	bne	r2,zero,451f4 <altera_avalon_jtag_uart_ioctl+0x7c>
   451dc:	e0fffc17 	ldw	r3,-16(fp)
   451e0:	00a00034 	movhi	r2,32768
   451e4:	10bfffc4 	addi	r2,r2,-1
   451e8:	18800226 	beq	r3,r2,451f4 <altera_avalon_jtag_uart_ioctl+0x7c>
   451ec:	e0bffc17 	ldw	r2,-16(fp)
   451f0:	00000206 	br	451fc <altera_avalon_jtag_uart_ioctl+0x84>
   451f4:	00a00034 	movhi	r2,32768
   451f8:	10bfff84 	addi	r2,r2,-2
   451fc:	e0fffd17 	ldw	r3,-12(fp)
   45200:	18800115 	stw	r2,4(r3)
      rc = 0;
   45204:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   45208:	00000f06 	br	45248 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4520c:	e0bffd17 	ldw	r2,-12(fp)
   45210:	10c00117 	ldw	r3,4(r2)
   45214:	00a00034 	movhi	r2,32768
   45218:	10bfffc4 	addi	r2,r2,-1
   4521c:	18800c26 	beq	r3,r2,45250 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   45220:	e0bffd17 	ldw	r2,-12(fp)
   45224:	10c00917 	ldw	r3,36(r2)
   45228:	e0bffd17 	ldw	r2,-12(fp)
   4522c:	10800117 	ldw	r2,4(r2)
   45230:	1885803a 	cmpltu	r2,r3,r2
   45234:	10c03fcc 	andi	r3,r2,255
   45238:	e0bfff17 	ldw	r2,-4(fp)
   4523c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   45240:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   45244:	00000206 	br	45250 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   45248:	0001883a 	nop
   4524c:	00000106 	br	45254 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   45250:	0001883a 	nop

  default:
    break;
  }

  return rc;
   45254:	e0bffb17 	ldw	r2,-20(fp)
}
   45258:	e037883a 	mov	sp,fp
   4525c:	df000017 	ldw	fp,0(sp)
   45260:	dec00104 	addi	sp,sp,4
   45264:	f800283a 	ret

00045268 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   45268:	defff304 	addi	sp,sp,-52
   4526c:	dfc00c15 	stw	ra,48(sp)
   45270:	df000b15 	stw	fp,44(sp)
   45274:	df000b04 	addi	fp,sp,44
   45278:	e13ffc15 	stw	r4,-16(fp)
   4527c:	e17ffd15 	stw	r5,-12(fp)
   45280:	e1bffe15 	stw	r6,-8(fp)
   45284:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   45288:	e0bffd17 	ldw	r2,-12(fp)
   4528c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   45290:	00004706 	br	453b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   45294:	e0bffc17 	ldw	r2,-16(fp)
   45298:	10800a17 	ldw	r2,40(r2)
   4529c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   452a0:	e0bffc17 	ldw	r2,-16(fp)
   452a4:	10800b17 	ldw	r2,44(r2)
   452a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   452ac:	e0fff717 	ldw	r3,-36(fp)
   452b0:	e0bff817 	ldw	r2,-32(fp)
   452b4:	18800536 	bltu	r3,r2,452cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   452b8:	e0fff717 	ldw	r3,-36(fp)
   452bc:	e0bff817 	ldw	r2,-32(fp)
   452c0:	1885c83a 	sub	r2,r3,r2
   452c4:	e0bff615 	stw	r2,-40(fp)
   452c8:	00000406 	br	452dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   452cc:	00c20004 	movi	r3,2048
   452d0:	e0bff817 	ldw	r2,-32(fp)
   452d4:	1885c83a 	sub	r2,r3,r2
   452d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   452dc:	e0bff617 	ldw	r2,-40(fp)
   452e0:	10001e26 	beq	r2,zero,4535c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   452e4:	e0fffe17 	ldw	r3,-8(fp)
   452e8:	e0bff617 	ldw	r2,-40(fp)
   452ec:	1880022e 	bgeu	r3,r2,452f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   452f0:	e0bffe17 	ldw	r2,-8(fp)
   452f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   452f8:	e0bffc17 	ldw	r2,-16(fp)
   452fc:	10c00e04 	addi	r3,r2,56
   45300:	e0bff817 	ldw	r2,-32(fp)
   45304:	1885883a 	add	r2,r3,r2
   45308:	e1bff617 	ldw	r6,-40(fp)
   4530c:	100b883a 	mov	r5,r2
   45310:	e13ff517 	ldw	r4,-44(fp)
   45314:	00427d00 	call	427d0 <memcpy>
      ptr   += n;
   45318:	e0fff517 	ldw	r3,-44(fp)
   4531c:	e0bff617 	ldw	r2,-40(fp)
   45320:	1885883a 	add	r2,r3,r2
   45324:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   45328:	e0fffe17 	ldw	r3,-8(fp)
   4532c:	e0bff617 	ldw	r2,-40(fp)
   45330:	1885c83a 	sub	r2,r3,r2
   45334:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45338:	e0fff817 	ldw	r3,-32(fp)
   4533c:	e0bff617 	ldw	r2,-40(fp)
   45340:	1885883a 	add	r2,r3,r2
   45344:	10c1ffcc 	andi	r3,r2,2047
   45348:	e0bffc17 	ldw	r2,-16(fp)
   4534c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   45350:	e0bffe17 	ldw	r2,-8(fp)
   45354:	00bfcf16 	blt	zero,r2,45294 <__alt_data_end+0xfffe5294>
   45358:	00000106 	br	45360 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4535c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   45360:	e0fff517 	ldw	r3,-44(fp)
   45364:	e0bffd17 	ldw	r2,-12(fp)
   45368:	1880141e 	bne	r3,r2,453bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4536c:	e0bfff17 	ldw	r2,-4(fp)
   45370:	1090000c 	andi	r2,r2,16384
   45374:	1000131e 	bne	r2,zero,453c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   45378:	0001883a 	nop
   4537c:	e0bffc17 	ldw	r2,-16(fp)
   45380:	10c00a17 	ldw	r3,40(r2)
   45384:	e0bff717 	ldw	r2,-36(fp)
   45388:	1880051e 	bne	r3,r2,453a0 <altera_avalon_jtag_uart_read+0x138>
   4538c:	e0bffc17 	ldw	r2,-16(fp)
   45390:	10c00917 	ldw	r3,36(r2)
   45394:	e0bffc17 	ldw	r2,-16(fp)
   45398:	10800117 	ldw	r2,4(r2)
   4539c:	18bff736 	bltu	r3,r2,4537c <__alt_data_end+0xfffe537c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   453a0:	e0bffc17 	ldw	r2,-16(fp)
   453a4:	10c00a17 	ldw	r3,40(r2)
   453a8:	e0bff717 	ldw	r2,-36(fp)
   453ac:	18800726 	beq	r3,r2,453cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   453b0:	e0bffe17 	ldw	r2,-8(fp)
   453b4:	00bfb716 	blt	zero,r2,45294 <__alt_data_end+0xfffe5294>
   453b8:	00000506 	br	453d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   453bc:	0001883a 	nop
   453c0:	00000306 	br	453d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   453c4:	0001883a 	nop
   453c8:	00000106 	br	453d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   453cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   453d0:	e0fff517 	ldw	r3,-44(fp)
   453d4:	e0bffd17 	ldw	r2,-12(fp)
   453d8:	18801826 	beq	r3,r2,4543c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   453dc:	0005303a 	rdctl	r2,status
   453e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   453e4:	e0fffb17 	ldw	r3,-20(fp)
   453e8:	00bfff84 	movi	r2,-2
   453ec:	1884703a 	and	r2,r3,r2
   453f0:	1001703a 	wrctl	status,r2
  
  return context;
   453f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   453f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   453fc:	e0bffc17 	ldw	r2,-16(fp)
   45400:	10800817 	ldw	r2,32(r2)
   45404:	10c00054 	ori	r3,r2,1
   45408:	e0bffc17 	ldw	r2,-16(fp)
   4540c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   45410:	e0bffc17 	ldw	r2,-16(fp)
   45414:	10800017 	ldw	r2,0(r2)
   45418:	10800104 	addi	r2,r2,4
   4541c:	1007883a 	mov	r3,r2
   45420:	e0bffc17 	ldw	r2,-16(fp)
   45424:	10800817 	ldw	r2,32(r2)
   45428:	18800035 	stwio	r2,0(r3)
   4542c:	e0bffa17 	ldw	r2,-24(fp)
   45430:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45434:	e0bff917 	ldw	r2,-28(fp)
   45438:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4543c:	e0fff517 	ldw	r3,-44(fp)
   45440:	e0bffd17 	ldw	r2,-12(fp)
   45444:	18800426 	beq	r3,r2,45458 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   45448:	e0fff517 	ldw	r3,-44(fp)
   4544c:	e0bffd17 	ldw	r2,-12(fp)
   45450:	1885c83a 	sub	r2,r3,r2
   45454:	00000606 	br	45470 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   45458:	e0bfff17 	ldw	r2,-4(fp)
   4545c:	1090000c 	andi	r2,r2,16384
   45460:	10000226 	beq	r2,zero,4546c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   45464:	00bffd44 	movi	r2,-11
   45468:	00000106 	br	45470 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4546c:	00bffec4 	movi	r2,-5
}
   45470:	e037883a 	mov	sp,fp
   45474:	dfc00117 	ldw	ra,4(sp)
   45478:	df000017 	ldw	fp,0(sp)
   4547c:	dec00204 	addi	sp,sp,8
   45480:	f800283a 	ret

00045484 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   45484:	defff304 	addi	sp,sp,-52
   45488:	dfc00c15 	stw	ra,48(sp)
   4548c:	df000b15 	stw	fp,44(sp)
   45490:	df000b04 	addi	fp,sp,44
   45494:	e13ffc15 	stw	r4,-16(fp)
   45498:	e17ffd15 	stw	r5,-12(fp)
   4549c:	e1bffe15 	stw	r6,-8(fp)
   454a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   454a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   454a8:	e0bffd17 	ldw	r2,-12(fp)
   454ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   454b0:	00003706 	br	45590 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   454b4:	e0bffc17 	ldw	r2,-16(fp)
   454b8:	10800c17 	ldw	r2,48(r2)
   454bc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   454c0:	e0bffc17 	ldw	r2,-16(fp)
   454c4:	10800d17 	ldw	r2,52(r2)
   454c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   454cc:	e0fff917 	ldw	r3,-28(fp)
   454d0:	e0bff517 	ldw	r2,-44(fp)
   454d4:	1880062e 	bgeu	r3,r2,454f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   454d8:	e0fff517 	ldw	r3,-44(fp)
   454dc:	e0bff917 	ldw	r2,-28(fp)
   454e0:	1885c83a 	sub	r2,r3,r2
   454e4:	10bfffc4 	addi	r2,r2,-1
   454e8:	e0bff615 	stw	r2,-40(fp)
   454ec:	00000b06 	br	4551c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   454f0:	e0bff517 	ldw	r2,-44(fp)
   454f4:	10000526 	beq	r2,zero,4550c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   454f8:	00c20004 	movi	r3,2048
   454fc:	e0bff917 	ldw	r2,-28(fp)
   45500:	1885c83a 	sub	r2,r3,r2
   45504:	e0bff615 	stw	r2,-40(fp)
   45508:	00000406 	br	4551c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4550c:	00c1ffc4 	movi	r3,2047
   45510:	e0bff917 	ldw	r2,-28(fp)
   45514:	1885c83a 	sub	r2,r3,r2
   45518:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4551c:	e0bff617 	ldw	r2,-40(fp)
   45520:	10001e26 	beq	r2,zero,4559c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   45524:	e0fffe17 	ldw	r3,-8(fp)
   45528:	e0bff617 	ldw	r2,-40(fp)
   4552c:	1880022e 	bgeu	r3,r2,45538 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   45530:	e0bffe17 	ldw	r2,-8(fp)
   45534:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   45538:	e0bffc17 	ldw	r2,-16(fp)
   4553c:	10c20e04 	addi	r3,r2,2104
   45540:	e0bff917 	ldw	r2,-28(fp)
   45544:	1885883a 	add	r2,r3,r2
   45548:	e1bff617 	ldw	r6,-40(fp)
   4554c:	e17ffd17 	ldw	r5,-12(fp)
   45550:	1009883a 	mov	r4,r2
   45554:	00427d00 	call	427d0 <memcpy>
      ptr   += n;
   45558:	e0fffd17 	ldw	r3,-12(fp)
   4555c:	e0bff617 	ldw	r2,-40(fp)
   45560:	1885883a 	add	r2,r3,r2
   45564:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   45568:	e0fffe17 	ldw	r3,-8(fp)
   4556c:	e0bff617 	ldw	r2,-40(fp)
   45570:	1885c83a 	sub	r2,r3,r2
   45574:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45578:	e0fff917 	ldw	r3,-28(fp)
   4557c:	e0bff617 	ldw	r2,-40(fp)
   45580:	1885883a 	add	r2,r3,r2
   45584:	10c1ffcc 	andi	r3,r2,2047
   45588:	e0bffc17 	ldw	r2,-16(fp)
   4558c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45590:	e0bffe17 	ldw	r2,-8(fp)
   45594:	00bfc716 	blt	zero,r2,454b4 <__alt_data_end+0xfffe54b4>
   45598:	00000106 	br	455a0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4559c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   455a0:	0005303a 	rdctl	r2,status
   455a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   455a8:	e0fffb17 	ldw	r3,-20(fp)
   455ac:	00bfff84 	movi	r2,-2
   455b0:	1884703a 	and	r2,r3,r2
   455b4:	1001703a 	wrctl	status,r2
  
  return context;
   455b8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   455bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   455c0:	e0bffc17 	ldw	r2,-16(fp)
   455c4:	10800817 	ldw	r2,32(r2)
   455c8:	10c00094 	ori	r3,r2,2
   455cc:	e0bffc17 	ldw	r2,-16(fp)
   455d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   455d4:	e0bffc17 	ldw	r2,-16(fp)
   455d8:	10800017 	ldw	r2,0(r2)
   455dc:	10800104 	addi	r2,r2,4
   455e0:	1007883a 	mov	r3,r2
   455e4:	e0bffc17 	ldw	r2,-16(fp)
   455e8:	10800817 	ldw	r2,32(r2)
   455ec:	18800035 	stwio	r2,0(r3)
   455f0:	e0bffa17 	ldw	r2,-24(fp)
   455f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   455f8:	e0bff817 	ldw	r2,-32(fp)
   455fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   45600:	e0bffe17 	ldw	r2,-8(fp)
   45604:	0080100e 	bge	zero,r2,45648 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   45608:	e0bfff17 	ldw	r2,-4(fp)
   4560c:	1090000c 	andi	r2,r2,16384
   45610:	1000101e 	bne	r2,zero,45654 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   45614:	0001883a 	nop
   45618:	e0bffc17 	ldw	r2,-16(fp)
   4561c:	10c00d17 	ldw	r3,52(r2)
   45620:	e0bff517 	ldw	r2,-44(fp)
   45624:	1880051e 	bne	r3,r2,4563c <altera_avalon_jtag_uart_write+0x1b8>
   45628:	e0bffc17 	ldw	r2,-16(fp)
   4562c:	10c00917 	ldw	r3,36(r2)
   45630:	e0bffc17 	ldw	r2,-16(fp)
   45634:	10800117 	ldw	r2,4(r2)
   45638:	18bff736 	bltu	r3,r2,45618 <__alt_data_end+0xfffe5618>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4563c:	e0bffc17 	ldw	r2,-16(fp)
   45640:	10800917 	ldw	r2,36(r2)
   45644:	1000051e 	bne	r2,zero,4565c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   45648:	e0bffe17 	ldw	r2,-8(fp)
   4564c:	00bfd016 	blt	zero,r2,45590 <__alt_data_end+0xfffe5590>
   45650:	00000306 	br	45660 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   45654:	0001883a 	nop
   45658:	00000106 	br	45660 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4565c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   45660:	e0fffd17 	ldw	r3,-12(fp)
   45664:	e0bff717 	ldw	r2,-36(fp)
   45668:	18800426 	beq	r3,r2,4567c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4566c:	e0fffd17 	ldw	r3,-12(fp)
   45670:	e0bff717 	ldw	r2,-36(fp)
   45674:	1885c83a 	sub	r2,r3,r2
   45678:	00000606 	br	45694 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4567c:	e0bfff17 	ldw	r2,-4(fp)
   45680:	1090000c 	andi	r2,r2,16384
   45684:	10000226 	beq	r2,zero,45690 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   45688:	00bffd44 	movi	r2,-11
   4568c:	00000106 	br	45694 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   45690:	00bffec4 	movi	r2,-5
}
   45694:	e037883a 	mov	sp,fp
   45698:	dfc00117 	ldw	ra,4(sp)
   4569c:	df000017 	ldw	fp,0(sp)
   456a0:	dec00204 	addi	sp,sp,8
   456a4:	f800283a 	ret

000456a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   456a8:	defffa04 	addi	sp,sp,-24
   456ac:	dfc00515 	stw	ra,20(sp)
   456b0:	df000415 	stw	fp,16(sp)
   456b4:	df000404 	addi	fp,sp,16
   456b8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   456bc:	0007883a 	mov	r3,zero
   456c0:	e0bfff17 	ldw	r2,-4(fp)
   456c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   456c8:	e0bfff17 	ldw	r2,-4(fp)
   456cc:	10800104 	addi	r2,r2,4
   456d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   456d4:	0005303a 	rdctl	r2,status
   456d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   456dc:	e0fffd17 	ldw	r3,-12(fp)
   456e0:	00bfff84 	movi	r2,-2
   456e4:	1884703a 	and	r2,r3,r2
   456e8:	1001703a 	wrctl	status,r2
  
  return context;
   456ec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   456f0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   456f4:	00461c80 	call	461c8 <alt_tick>
   456f8:	e0bffc17 	ldw	r2,-16(fp)
   456fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45700:	e0bffe17 	ldw	r2,-8(fp)
   45704:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   45708:	0001883a 	nop
   4570c:	e037883a 	mov	sp,fp
   45710:	dfc00117 	ldw	ra,4(sp)
   45714:	df000017 	ldw	fp,0(sp)
   45718:	dec00204 	addi	sp,sp,8
   4571c:	f800283a 	ret

00045720 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   45720:	defff804 	addi	sp,sp,-32
   45724:	dfc00715 	stw	ra,28(sp)
   45728:	df000615 	stw	fp,24(sp)
   4572c:	df000604 	addi	fp,sp,24
   45730:	e13ffc15 	stw	r4,-16(fp)
   45734:	e17ffd15 	stw	r5,-12(fp)
   45738:	e1bffe15 	stw	r6,-8(fp)
   4573c:	e1ffff15 	stw	r7,-4(fp)
   45740:	e0bfff17 	ldw	r2,-4(fp)
   45744:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   45748:	d0a6dc17 	ldw	r2,-25744(gp)
   4574c:	1000021e 	bne	r2,zero,45758 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   45750:	e0bffb17 	ldw	r2,-20(fp)
   45754:	d0a6dc15 	stw	r2,-25744(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   45758:	e0bffc17 	ldw	r2,-16(fp)
   4575c:	10800104 	addi	r2,r2,4
   45760:	00c001c4 	movi	r3,7
   45764:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   45768:	d8000015 	stw	zero,0(sp)
   4576c:	e1fffc17 	ldw	r7,-16(fp)
   45770:	01800134 	movhi	r6,4
   45774:	3195aa04 	addi	r6,r6,22184
   45778:	e17ffe17 	ldw	r5,-8(fp)
   4577c:	e13ffd17 	ldw	r4,-12(fp)
   45780:	0045aa80 	call	45aa8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   45784:	0001883a 	nop
   45788:	e037883a 	mov	sp,fp
   4578c:	dfc00117 	ldw	ra,4(sp)
   45790:	df000017 	ldw	fp,0(sp)
   45794:	dec00204 	addi	sp,sp,8
   45798:	f800283a 	ret

0004579c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4579c:	defff504 	addi	sp,sp,-44
   457a0:	df000a15 	stw	fp,40(sp)
   457a4:	df000a04 	addi	fp,sp,40
   457a8:	e13ffc15 	stw	r4,-16(fp)
   457ac:	e17ffd15 	stw	r5,-12(fp)
   457b0:	e1bffe15 	stw	r6,-8(fp)
   457b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   457b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   457bc:	d0a6dc17 	ldw	r2,-25744(gp)
  
  if (alt_ticks_per_second ())
   457c0:	10003c26 	beq	r2,zero,458b4 <alt_alarm_start+0x118>
  {
    if (alarm)
   457c4:	e0bffc17 	ldw	r2,-16(fp)
   457c8:	10003826 	beq	r2,zero,458ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   457cc:	e0bffc17 	ldw	r2,-16(fp)
   457d0:	e0fffe17 	ldw	r3,-8(fp)
   457d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   457d8:	e0bffc17 	ldw	r2,-16(fp)
   457dc:	e0ffff17 	ldw	r3,-4(fp)
   457e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   457e4:	0005303a 	rdctl	r2,status
   457e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   457ec:	e0fff917 	ldw	r3,-28(fp)
   457f0:	00bfff84 	movi	r2,-2
   457f4:	1884703a 	and	r2,r3,r2
   457f8:	1001703a 	wrctl	status,r2
  
  return context;
   457fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   45800:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45804:	d0a6dd17 	ldw	r2,-25740(gp)
      
      current_nticks = alt_nticks();
   45808:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4580c:	e0fffd17 	ldw	r3,-12(fp)
   45810:	e0bff617 	ldw	r2,-40(fp)
   45814:	1885883a 	add	r2,r3,r2
   45818:	10c00044 	addi	r3,r2,1
   4581c:	e0bffc17 	ldw	r2,-16(fp)
   45820:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45824:	e0bffc17 	ldw	r2,-16(fp)
   45828:	10c00217 	ldw	r3,8(r2)
   4582c:	e0bff617 	ldw	r2,-40(fp)
   45830:	1880042e 	bgeu	r3,r2,45844 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   45834:	e0bffc17 	ldw	r2,-16(fp)
   45838:	00c00044 	movi	r3,1
   4583c:	10c00405 	stb	r3,16(r2)
   45840:	00000206 	br	4584c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   45844:	e0bffc17 	ldw	r2,-16(fp)
   45848:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4584c:	e0bffc17 	ldw	r2,-16(fp)
   45850:	d0e01104 	addi	r3,gp,-32700
   45854:	e0fffa15 	stw	r3,-24(fp)
   45858:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4585c:	e0bffb17 	ldw	r2,-20(fp)
   45860:	e0fffa17 	ldw	r3,-24(fp)
   45864:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45868:	e0bffa17 	ldw	r2,-24(fp)
   4586c:	10c00017 	ldw	r3,0(r2)
   45870:	e0bffb17 	ldw	r2,-20(fp)
   45874:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45878:	e0bffa17 	ldw	r2,-24(fp)
   4587c:	10800017 	ldw	r2,0(r2)
   45880:	e0fffb17 	ldw	r3,-20(fp)
   45884:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45888:	e0bffa17 	ldw	r2,-24(fp)
   4588c:	e0fffb17 	ldw	r3,-20(fp)
   45890:	10c00015 	stw	r3,0(r2)
   45894:	e0bff817 	ldw	r2,-32(fp)
   45898:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4589c:	e0bff717 	ldw	r2,-36(fp)
   458a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   458a4:	0005883a 	mov	r2,zero
   458a8:	00000306 	br	458b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   458ac:	00bffa84 	movi	r2,-22
   458b0:	00000106 	br	458b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   458b4:	00bfde84 	movi	r2,-134
  }
}
   458b8:	e037883a 	mov	sp,fp
   458bc:	df000017 	ldw	fp,0(sp)
   458c0:	dec00104 	addi	sp,sp,4
   458c4:	f800283a 	ret

000458c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   458c8:	deffff04 	addi	sp,sp,-4
   458cc:	df000015 	stw	fp,0(sp)
   458d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   458d4:	0001883a 	nop
   458d8:	e037883a 	mov	sp,fp
   458dc:	df000017 	ldw	fp,0(sp)
   458e0:	dec00104 	addi	sp,sp,4
   458e4:	f800283a 	ret

000458e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   458e8:	defffe04 	addi	sp,sp,-8
   458ec:	dfc00115 	stw	ra,4(sp)
   458f0:	df000015 	stw	fp,0(sp)
   458f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   458f8:	d0a00e17 	ldw	r2,-32712(gp)
   458fc:	10000326 	beq	r2,zero,4590c <alt_get_errno+0x24>
   45900:	d0a00e17 	ldw	r2,-32712(gp)
   45904:	103ee83a 	callr	r2
   45908:	00000106 	br	45910 <alt_get_errno+0x28>
   4590c:	d0a6d704 	addi	r2,gp,-25764
}
   45910:	e037883a 	mov	sp,fp
   45914:	dfc00117 	ldw	ra,4(sp)
   45918:	df000017 	ldw	fp,0(sp)
   4591c:	dec00204 	addi	sp,sp,8
   45920:	f800283a 	ret

00045924 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45924:	defffa04 	addi	sp,sp,-24
   45928:	dfc00515 	stw	ra,20(sp)
   4592c:	df000415 	stw	fp,16(sp)
   45930:	df000404 	addi	fp,sp,16
   45934:	e13ffe15 	stw	r4,-8(fp)
   45938:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4593c:	e0bffe17 	ldw	r2,-8(fp)
   45940:	10000326 	beq	r2,zero,45950 <alt_dev_llist_insert+0x2c>
   45944:	e0bffe17 	ldw	r2,-8(fp)
   45948:	10800217 	ldw	r2,8(r2)
   4594c:	1000061e 	bne	r2,zero,45968 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   45950:	00458e80 	call	458e8 <alt_get_errno>
   45954:	1007883a 	mov	r3,r2
   45958:	00800584 	movi	r2,22
   4595c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   45960:	00bffa84 	movi	r2,-22
   45964:	00001306 	br	459b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45968:	e0bffe17 	ldw	r2,-8(fp)
   4596c:	e0ffff17 	ldw	r3,-4(fp)
   45970:	e0fffc15 	stw	r3,-16(fp)
   45974:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45978:	e0bffd17 	ldw	r2,-12(fp)
   4597c:	e0fffc17 	ldw	r3,-16(fp)
   45980:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45984:	e0bffc17 	ldw	r2,-16(fp)
   45988:	10c00017 	ldw	r3,0(r2)
   4598c:	e0bffd17 	ldw	r2,-12(fp)
   45990:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45994:	e0bffc17 	ldw	r2,-16(fp)
   45998:	10800017 	ldw	r2,0(r2)
   4599c:	e0fffd17 	ldw	r3,-12(fp)
   459a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   459a4:	e0bffc17 	ldw	r2,-16(fp)
   459a8:	e0fffd17 	ldw	r3,-12(fp)
   459ac:	10c00015 	stw	r3,0(r2)

  return 0;  
   459b0:	0005883a 	mov	r2,zero
}
   459b4:	e037883a 	mov	sp,fp
   459b8:	dfc00117 	ldw	ra,4(sp)
   459bc:	df000017 	ldw	fp,0(sp)
   459c0:	dec00204 	addi	sp,sp,8
   459c4:	f800283a 	ret

000459c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   459c8:	defffd04 	addi	sp,sp,-12
   459cc:	dfc00215 	stw	ra,8(sp)
   459d0:	df000115 	stw	fp,4(sp)
   459d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   459d8:	00800134 	movhi	r2,4
   459dc:	109a5f04 	addi	r2,r2,27004
   459e0:	e0bfff15 	stw	r2,-4(fp)
   459e4:	00000606 	br	45a00 <_do_ctors+0x38>
        (*ctor) (); 
   459e8:	e0bfff17 	ldw	r2,-4(fp)
   459ec:	10800017 	ldw	r2,0(r2)
   459f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   459f4:	e0bfff17 	ldw	r2,-4(fp)
   459f8:	10bfff04 	addi	r2,r2,-4
   459fc:	e0bfff15 	stw	r2,-4(fp)
   45a00:	e0ffff17 	ldw	r3,-4(fp)
   45a04:	00800134 	movhi	r2,4
   45a08:	109a6004 	addi	r2,r2,27008
   45a0c:	18bff62e 	bgeu	r3,r2,459e8 <__alt_data_end+0xfffe59e8>
        (*ctor) (); 
}
   45a10:	0001883a 	nop
   45a14:	e037883a 	mov	sp,fp
   45a18:	dfc00117 	ldw	ra,4(sp)
   45a1c:	df000017 	ldw	fp,0(sp)
   45a20:	dec00204 	addi	sp,sp,8
   45a24:	f800283a 	ret

00045a28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45a28:	defffd04 	addi	sp,sp,-12
   45a2c:	dfc00215 	stw	ra,8(sp)
   45a30:	df000115 	stw	fp,4(sp)
   45a34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45a38:	00800134 	movhi	r2,4
   45a3c:	109a5f04 	addi	r2,r2,27004
   45a40:	e0bfff15 	stw	r2,-4(fp)
   45a44:	00000606 	br	45a60 <_do_dtors+0x38>
        (*dtor) (); 
   45a48:	e0bfff17 	ldw	r2,-4(fp)
   45a4c:	10800017 	ldw	r2,0(r2)
   45a50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45a54:	e0bfff17 	ldw	r2,-4(fp)
   45a58:	10bfff04 	addi	r2,r2,-4
   45a5c:	e0bfff15 	stw	r2,-4(fp)
   45a60:	e0ffff17 	ldw	r3,-4(fp)
   45a64:	00800134 	movhi	r2,4
   45a68:	109a6004 	addi	r2,r2,27008
   45a6c:	18bff62e 	bgeu	r3,r2,45a48 <__alt_data_end+0xfffe5a48>
        (*dtor) (); 
}
   45a70:	0001883a 	nop
   45a74:	e037883a 	mov	sp,fp
   45a78:	dfc00117 	ldw	ra,4(sp)
   45a7c:	df000017 	ldw	fp,0(sp)
   45a80:	dec00204 	addi	sp,sp,8
   45a84:	f800283a 	ret

00045a88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45a88:	deffff04 	addi	sp,sp,-4
   45a8c:	df000015 	stw	fp,0(sp)
   45a90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45a94:	0001883a 	nop
   45a98:	e037883a 	mov	sp,fp
   45a9c:	df000017 	ldw	fp,0(sp)
   45aa0:	dec00104 	addi	sp,sp,4
   45aa4:	f800283a 	ret

00045aa8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45aa8:	defff904 	addi	sp,sp,-28
   45aac:	dfc00615 	stw	ra,24(sp)
   45ab0:	df000515 	stw	fp,20(sp)
   45ab4:	df000504 	addi	fp,sp,20
   45ab8:	e13ffc15 	stw	r4,-16(fp)
   45abc:	e17ffd15 	stw	r5,-12(fp)
   45ac0:	e1bffe15 	stw	r6,-8(fp)
   45ac4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45ac8:	e0800217 	ldw	r2,8(fp)
   45acc:	d8800015 	stw	r2,0(sp)
   45ad0:	e1ffff17 	ldw	r7,-4(fp)
   45ad4:	e1bffe17 	ldw	r6,-8(fp)
   45ad8:	e17ffd17 	ldw	r5,-12(fp)
   45adc:	e13ffc17 	ldw	r4,-16(fp)
   45ae0:	0045c580 	call	45c58 <alt_iic_isr_register>
}  
   45ae4:	e037883a 	mov	sp,fp
   45ae8:	dfc00117 	ldw	ra,4(sp)
   45aec:	df000017 	ldw	fp,0(sp)
   45af0:	dec00204 	addi	sp,sp,8
   45af4:	f800283a 	ret

00045af8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45af8:	defff904 	addi	sp,sp,-28
   45afc:	df000615 	stw	fp,24(sp)
   45b00:	df000604 	addi	fp,sp,24
   45b04:	e13ffe15 	stw	r4,-8(fp)
   45b08:	e17fff15 	stw	r5,-4(fp)
   45b0c:	e0bfff17 	ldw	r2,-4(fp)
   45b10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45b14:	0005303a 	rdctl	r2,status
   45b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45b1c:	e0fffb17 	ldw	r3,-20(fp)
   45b20:	00bfff84 	movi	r2,-2
   45b24:	1884703a 	and	r2,r3,r2
   45b28:	1001703a 	wrctl	status,r2
  
  return context;
   45b2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45b30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45b34:	00c00044 	movi	r3,1
   45b38:	e0bffa17 	ldw	r2,-24(fp)
   45b3c:	1884983a 	sll	r2,r3,r2
   45b40:	1007883a 	mov	r3,r2
   45b44:	d0a6db17 	ldw	r2,-25748(gp)
   45b48:	1884b03a 	or	r2,r3,r2
   45b4c:	d0a6db15 	stw	r2,-25748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45b50:	d0a6db17 	ldw	r2,-25748(gp)
   45b54:	100170fa 	wrctl	ienable,r2
   45b58:	e0bffc17 	ldw	r2,-16(fp)
   45b5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45b60:	e0bffd17 	ldw	r2,-12(fp)
   45b64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45b68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   45b6c:	0001883a 	nop
}
   45b70:	e037883a 	mov	sp,fp
   45b74:	df000017 	ldw	fp,0(sp)
   45b78:	dec00104 	addi	sp,sp,4
   45b7c:	f800283a 	ret

00045b80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45b80:	defff904 	addi	sp,sp,-28
   45b84:	df000615 	stw	fp,24(sp)
   45b88:	df000604 	addi	fp,sp,24
   45b8c:	e13ffe15 	stw	r4,-8(fp)
   45b90:	e17fff15 	stw	r5,-4(fp)
   45b94:	e0bfff17 	ldw	r2,-4(fp)
   45b98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45b9c:	0005303a 	rdctl	r2,status
   45ba0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45ba4:	e0fffb17 	ldw	r3,-20(fp)
   45ba8:	00bfff84 	movi	r2,-2
   45bac:	1884703a 	and	r2,r3,r2
   45bb0:	1001703a 	wrctl	status,r2
  
  return context;
   45bb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45bb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45bbc:	00c00044 	movi	r3,1
   45bc0:	e0bffa17 	ldw	r2,-24(fp)
   45bc4:	1884983a 	sll	r2,r3,r2
   45bc8:	0084303a 	nor	r2,zero,r2
   45bcc:	1007883a 	mov	r3,r2
   45bd0:	d0a6db17 	ldw	r2,-25748(gp)
   45bd4:	1884703a 	and	r2,r3,r2
   45bd8:	d0a6db15 	stw	r2,-25748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45bdc:	d0a6db17 	ldw	r2,-25748(gp)
   45be0:	100170fa 	wrctl	ienable,r2
   45be4:	e0bffc17 	ldw	r2,-16(fp)
   45be8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45bec:	e0bffd17 	ldw	r2,-12(fp)
   45bf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45bf4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   45bf8:	0001883a 	nop
}
   45bfc:	e037883a 	mov	sp,fp
   45c00:	df000017 	ldw	fp,0(sp)
   45c04:	dec00104 	addi	sp,sp,4
   45c08:	f800283a 	ret

00045c0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45c0c:	defffc04 	addi	sp,sp,-16
   45c10:	df000315 	stw	fp,12(sp)
   45c14:	df000304 	addi	fp,sp,12
   45c18:	e13ffe15 	stw	r4,-8(fp)
   45c1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45c20:	000530fa 	rdctl	r2,ienable
   45c24:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45c28:	00c00044 	movi	r3,1
   45c2c:	e0bfff17 	ldw	r2,-4(fp)
   45c30:	1884983a 	sll	r2,r3,r2
   45c34:	1007883a 	mov	r3,r2
   45c38:	e0bffd17 	ldw	r2,-12(fp)
   45c3c:	1884703a 	and	r2,r3,r2
   45c40:	1004c03a 	cmpne	r2,r2,zero
   45c44:	10803fcc 	andi	r2,r2,255
}
   45c48:	e037883a 	mov	sp,fp
   45c4c:	df000017 	ldw	fp,0(sp)
   45c50:	dec00104 	addi	sp,sp,4
   45c54:	f800283a 	ret

00045c58 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45c58:	defff504 	addi	sp,sp,-44
   45c5c:	dfc00a15 	stw	ra,40(sp)
   45c60:	df000915 	stw	fp,36(sp)
   45c64:	df000904 	addi	fp,sp,36
   45c68:	e13ffc15 	stw	r4,-16(fp)
   45c6c:	e17ffd15 	stw	r5,-12(fp)
   45c70:	e1bffe15 	stw	r6,-8(fp)
   45c74:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45c78:	00bffa84 	movi	r2,-22
   45c7c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45c80:	e0bffd17 	ldw	r2,-12(fp)
   45c84:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45c88:	e0bff817 	ldw	r2,-32(fp)
   45c8c:	10800808 	cmpgei	r2,r2,32
   45c90:	1000271e 	bne	r2,zero,45d30 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45c94:	0005303a 	rdctl	r2,status
   45c98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45c9c:	e0fffb17 	ldw	r3,-20(fp)
   45ca0:	00bfff84 	movi	r2,-2
   45ca4:	1884703a 	and	r2,r3,r2
   45ca8:	1001703a 	wrctl	status,r2
  
  return context;
   45cac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45cb0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   45cb4:	00800174 	movhi	r2,5
   45cb8:	10a81304 	addi	r2,r2,-24500
   45cbc:	e0fff817 	ldw	r3,-32(fp)
   45cc0:	180690fa 	slli	r3,r3,3
   45cc4:	10c5883a 	add	r2,r2,r3
   45cc8:	e0fffe17 	ldw	r3,-8(fp)
   45ccc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45cd0:	00800174 	movhi	r2,5
   45cd4:	10a81304 	addi	r2,r2,-24500
   45cd8:	e0fff817 	ldw	r3,-32(fp)
   45cdc:	180690fa 	slli	r3,r3,3
   45ce0:	10c5883a 	add	r2,r2,r3
   45ce4:	10800104 	addi	r2,r2,4
   45ce8:	e0ffff17 	ldw	r3,-4(fp)
   45cec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45cf0:	e0bffe17 	ldw	r2,-8(fp)
   45cf4:	10000526 	beq	r2,zero,45d0c <alt_iic_isr_register+0xb4>
   45cf8:	e0bff817 	ldw	r2,-32(fp)
   45cfc:	100b883a 	mov	r5,r2
   45d00:	e13ffc17 	ldw	r4,-16(fp)
   45d04:	0045af80 	call	45af8 <alt_ic_irq_enable>
   45d08:	00000406 	br	45d1c <alt_iic_isr_register+0xc4>
   45d0c:	e0bff817 	ldw	r2,-32(fp)
   45d10:	100b883a 	mov	r5,r2
   45d14:	e13ffc17 	ldw	r4,-16(fp)
   45d18:	0045b800 	call	45b80 <alt_ic_irq_disable>
   45d1c:	e0bff715 	stw	r2,-36(fp)
   45d20:	e0bffa17 	ldw	r2,-24(fp)
   45d24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45d28:	e0bff917 	ldw	r2,-28(fp)
   45d2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45d30:	e0bff717 	ldw	r2,-36(fp)
}
   45d34:	e037883a 	mov	sp,fp
   45d38:	dfc00117 	ldw	ra,4(sp)
   45d3c:	df000017 	ldw	fp,0(sp)
   45d40:	dec00204 	addi	sp,sp,8
   45d44:	f800283a 	ret

00045d48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45d48:	defff804 	addi	sp,sp,-32
   45d4c:	dfc00715 	stw	ra,28(sp)
   45d50:	df000615 	stw	fp,24(sp)
   45d54:	dc000515 	stw	r16,20(sp)
   45d58:	df000604 	addi	fp,sp,24
   45d5c:	e13ffb15 	stw	r4,-20(fp)
   45d60:	e17ffc15 	stw	r5,-16(fp)
   45d64:	e1bffd15 	stw	r6,-12(fp)
   45d68:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   45d6c:	e1bffe17 	ldw	r6,-8(fp)
   45d70:	e17ffd17 	ldw	r5,-12(fp)
   45d74:	e13ffc17 	ldw	r4,-16(fp)
   45d78:	0045fd00 	call	45fd0 <open>
   45d7c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45d80:	e0bffa17 	ldw	r2,-24(fp)
   45d84:	10002216 	blt	r2,zero,45e10 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45d88:	04000134 	movhi	r16,4
   45d8c:	841cb204 	addi	r16,r16,29384
   45d90:	e0bffa17 	ldw	r2,-24(fp)
   45d94:	01400304 	movi	r5,12
   45d98:	1009883a 	mov	r4,r2
   45d9c:	0040e9c0 	call	40e9c <__mulsi3>
   45da0:	8085883a 	add	r2,r16,r2
   45da4:	10c00017 	ldw	r3,0(r2)
   45da8:	e0bffb17 	ldw	r2,-20(fp)
   45dac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45db0:	04000134 	movhi	r16,4
   45db4:	841cb204 	addi	r16,r16,29384
   45db8:	e0bffa17 	ldw	r2,-24(fp)
   45dbc:	01400304 	movi	r5,12
   45dc0:	1009883a 	mov	r4,r2
   45dc4:	0040e9c0 	call	40e9c <__mulsi3>
   45dc8:	8085883a 	add	r2,r16,r2
   45dcc:	10800104 	addi	r2,r2,4
   45dd0:	10c00017 	ldw	r3,0(r2)
   45dd4:	e0bffb17 	ldw	r2,-20(fp)
   45dd8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45ddc:	04000134 	movhi	r16,4
   45de0:	841cb204 	addi	r16,r16,29384
   45de4:	e0bffa17 	ldw	r2,-24(fp)
   45de8:	01400304 	movi	r5,12
   45dec:	1009883a 	mov	r4,r2
   45df0:	0040e9c0 	call	40e9c <__mulsi3>
   45df4:	8085883a 	add	r2,r16,r2
   45df8:	10800204 	addi	r2,r2,8
   45dfc:	10c00017 	ldw	r3,0(r2)
   45e00:	e0bffb17 	ldw	r2,-20(fp)
   45e04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45e08:	e13ffa17 	ldw	r4,-24(fp)
   45e0c:	00443f40 	call	443f4 <alt_release_fd>
  }
} 
   45e10:	0001883a 	nop
   45e14:	e6ffff04 	addi	sp,fp,-4
   45e18:	dfc00217 	ldw	ra,8(sp)
   45e1c:	df000117 	ldw	fp,4(sp)
   45e20:	dc000017 	ldw	r16,0(sp)
   45e24:	dec00304 	addi	sp,sp,12
   45e28:	f800283a 	ret

00045e2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45e2c:	defffb04 	addi	sp,sp,-20
   45e30:	dfc00415 	stw	ra,16(sp)
   45e34:	df000315 	stw	fp,12(sp)
   45e38:	df000304 	addi	fp,sp,12
   45e3c:	e13ffd15 	stw	r4,-12(fp)
   45e40:	e17ffe15 	stw	r5,-8(fp)
   45e44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45e48:	01c07fc4 	movi	r7,511
   45e4c:	01800044 	movi	r6,1
   45e50:	e17ffd17 	ldw	r5,-12(fp)
   45e54:	01000134 	movhi	r4,4
   45e58:	211cb504 	addi	r4,r4,29396
   45e5c:	0045d480 	call	45d48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45e60:	01c07fc4 	movi	r7,511
   45e64:	000d883a 	mov	r6,zero
   45e68:	e17ffe17 	ldw	r5,-8(fp)
   45e6c:	01000134 	movhi	r4,4
   45e70:	211cb204 	addi	r4,r4,29384
   45e74:	0045d480 	call	45d48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45e78:	01c07fc4 	movi	r7,511
   45e7c:	01800044 	movi	r6,1
   45e80:	e17fff17 	ldw	r5,-4(fp)
   45e84:	01000134 	movhi	r4,4
   45e88:	211cb804 	addi	r4,r4,29408
   45e8c:	0045d480 	call	45d48 <alt_open_fd>
}  
   45e90:	0001883a 	nop
   45e94:	e037883a 	mov	sp,fp
   45e98:	dfc00117 	ldw	ra,4(sp)
   45e9c:	df000017 	ldw	fp,0(sp)
   45ea0:	dec00204 	addi	sp,sp,8
   45ea4:	f800283a 	ret

00045ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45ea8:	defffe04 	addi	sp,sp,-8
   45eac:	dfc00115 	stw	ra,4(sp)
   45eb0:	df000015 	stw	fp,0(sp)
   45eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45eb8:	d0a00e17 	ldw	r2,-32712(gp)
   45ebc:	10000326 	beq	r2,zero,45ecc <alt_get_errno+0x24>
   45ec0:	d0a00e17 	ldw	r2,-32712(gp)
   45ec4:	103ee83a 	callr	r2
   45ec8:	00000106 	br	45ed0 <alt_get_errno+0x28>
   45ecc:	d0a6d704 	addi	r2,gp,-25764
}
   45ed0:	e037883a 	mov	sp,fp
   45ed4:	dfc00117 	ldw	ra,4(sp)
   45ed8:	df000017 	ldw	fp,0(sp)
   45edc:	dec00204 	addi	sp,sp,8
   45ee0:	f800283a 	ret

00045ee4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45ee4:	defffb04 	addi	sp,sp,-20
   45ee8:	dfc00415 	stw	ra,16(sp)
   45eec:	df000315 	stw	fp,12(sp)
   45ef0:	dc000215 	stw	r16,8(sp)
   45ef4:	df000304 	addi	fp,sp,12
   45ef8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45efc:	e0bffe17 	ldw	r2,-8(fp)
   45f00:	10800217 	ldw	r2,8(r2)
   45f04:	10d00034 	orhi	r3,r2,16384
   45f08:	e0bffe17 	ldw	r2,-8(fp)
   45f0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45f10:	e03ffd15 	stw	zero,-12(fp)
   45f14:	00002306 	br	45fa4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45f18:	04000134 	movhi	r16,4
   45f1c:	841cb204 	addi	r16,r16,29384
   45f20:	e0bffd17 	ldw	r2,-12(fp)
   45f24:	01400304 	movi	r5,12
   45f28:	1009883a 	mov	r4,r2
   45f2c:	0040e9c0 	call	40e9c <__mulsi3>
   45f30:	8085883a 	add	r2,r16,r2
   45f34:	10c00017 	ldw	r3,0(r2)
   45f38:	e0bffe17 	ldw	r2,-8(fp)
   45f3c:	10800017 	ldw	r2,0(r2)
   45f40:	1880151e 	bne	r3,r2,45f98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45f44:	04000134 	movhi	r16,4
   45f48:	841cb204 	addi	r16,r16,29384
   45f4c:	e0bffd17 	ldw	r2,-12(fp)
   45f50:	01400304 	movi	r5,12
   45f54:	1009883a 	mov	r4,r2
   45f58:	0040e9c0 	call	40e9c <__mulsi3>
   45f5c:	8085883a 	add	r2,r16,r2
   45f60:	10800204 	addi	r2,r2,8
   45f64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45f68:	10000b0e 	bge	r2,zero,45f98 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45f6c:	01400304 	movi	r5,12
   45f70:	e13ffd17 	ldw	r4,-12(fp)
   45f74:	0040e9c0 	call	40e9c <__mulsi3>
   45f78:	1007883a 	mov	r3,r2
   45f7c:	00800134 	movhi	r2,4
   45f80:	109cb204 	addi	r2,r2,29384
   45f84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45f88:	e0bffe17 	ldw	r2,-8(fp)
   45f8c:	18800226 	beq	r3,r2,45f98 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45f90:	00bffcc4 	movi	r2,-13
   45f94:	00000806 	br	45fb8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45f98:	e0bffd17 	ldw	r2,-12(fp)
   45f9c:	10800044 	addi	r2,r2,1
   45fa0:	e0bffd15 	stw	r2,-12(fp)
   45fa4:	d0a00d17 	ldw	r2,-32716(gp)
   45fa8:	1007883a 	mov	r3,r2
   45fac:	e0bffd17 	ldw	r2,-12(fp)
   45fb0:	18bfd92e 	bgeu	r3,r2,45f18 <__alt_data_end+0xfffe5f18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45fb4:	0005883a 	mov	r2,zero
}
   45fb8:	e6ffff04 	addi	sp,fp,-4
   45fbc:	dfc00217 	ldw	ra,8(sp)
   45fc0:	df000117 	ldw	fp,4(sp)
   45fc4:	dc000017 	ldw	r16,0(sp)
   45fc8:	dec00304 	addi	sp,sp,12
   45fcc:	f800283a 	ret

00045fd0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45fd0:	defff604 	addi	sp,sp,-40
   45fd4:	dfc00915 	stw	ra,36(sp)
   45fd8:	df000815 	stw	fp,32(sp)
   45fdc:	df000804 	addi	fp,sp,32
   45fe0:	e13ffd15 	stw	r4,-12(fp)
   45fe4:	e17ffe15 	stw	r5,-8(fp)
   45fe8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45fec:	00bfffc4 	movi	r2,-1
   45ff0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45ff4:	00bffb44 	movi	r2,-19
   45ff8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45ffc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   46000:	d1600b04 	addi	r5,gp,-32724
   46004:	e13ffd17 	ldw	r4,-12(fp)
   46008:	00462f40 	call	462f4 <alt_find_dev>
   4600c:	e0bff815 	stw	r2,-32(fp)
   46010:	e0bff817 	ldw	r2,-32(fp)
   46014:	1000051e 	bne	r2,zero,4602c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   46018:	e13ffd17 	ldw	r4,-12(fp)
   4601c:	00463840 	call	46384 <alt_find_file>
   46020:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   46024:	00800044 	movi	r2,1
   46028:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4602c:	e0bff817 	ldw	r2,-32(fp)
   46030:	10002b26 	beq	r2,zero,460e0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   46034:	e13ff817 	ldw	r4,-32(fp)
   46038:	004648c0 	call	4648c <alt_get_fd>
   4603c:	e0bff915 	stw	r2,-28(fp)
   46040:	e0bff917 	ldw	r2,-28(fp)
   46044:	1000030e 	bge	r2,zero,46054 <open+0x84>
    {
      status = index;
   46048:	e0bff917 	ldw	r2,-28(fp)
   4604c:	e0bffa15 	stw	r2,-24(fp)
   46050:	00002506 	br	460e8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   46054:	01400304 	movi	r5,12
   46058:	e13ff917 	ldw	r4,-28(fp)
   4605c:	0040e9c0 	call	40e9c <__mulsi3>
   46060:	1007883a 	mov	r3,r2
   46064:	00800134 	movhi	r2,4
   46068:	109cb204 	addi	r2,r2,29384
   4606c:	1885883a 	add	r2,r3,r2
   46070:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   46074:	e0fffe17 	ldw	r3,-8(fp)
   46078:	00900034 	movhi	r2,16384
   4607c:	10bfffc4 	addi	r2,r2,-1
   46080:	1886703a 	and	r3,r3,r2
   46084:	e0bffc17 	ldw	r2,-16(fp)
   46088:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4608c:	e0bffb17 	ldw	r2,-20(fp)
   46090:	1000051e 	bne	r2,zero,460a8 <open+0xd8>
   46094:	e13ffc17 	ldw	r4,-16(fp)
   46098:	0045ee40 	call	45ee4 <alt_file_locked>
   4609c:	e0bffa15 	stw	r2,-24(fp)
   460a0:	e0bffa17 	ldw	r2,-24(fp)
   460a4:	10001016 	blt	r2,zero,460e8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   460a8:	e0bff817 	ldw	r2,-32(fp)
   460ac:	10800317 	ldw	r2,12(r2)
   460b0:	10000826 	beq	r2,zero,460d4 <open+0x104>
   460b4:	e0bff817 	ldw	r2,-32(fp)
   460b8:	10800317 	ldw	r2,12(r2)
   460bc:	e1ffff17 	ldw	r7,-4(fp)
   460c0:	e1bffe17 	ldw	r6,-8(fp)
   460c4:	e17ffd17 	ldw	r5,-12(fp)
   460c8:	e13ffc17 	ldw	r4,-16(fp)
   460cc:	103ee83a 	callr	r2
   460d0:	00000106 	br	460d8 <open+0x108>
   460d4:	0005883a 	mov	r2,zero
   460d8:	e0bffa15 	stw	r2,-24(fp)
   460dc:	00000206 	br	460e8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   460e0:	00bffb44 	movi	r2,-19
   460e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   460e8:	e0bffa17 	ldw	r2,-24(fp)
   460ec:	1000090e 	bge	r2,zero,46114 <open+0x144>
  {
    alt_release_fd (index);  
   460f0:	e13ff917 	ldw	r4,-28(fp)
   460f4:	00443f40 	call	443f4 <alt_release_fd>
    ALT_ERRNO = -status;
   460f8:	0045ea80 	call	45ea8 <alt_get_errno>
   460fc:	1007883a 	mov	r3,r2
   46100:	e0bffa17 	ldw	r2,-24(fp)
   46104:	0085c83a 	sub	r2,zero,r2
   46108:	18800015 	stw	r2,0(r3)
    return -1;
   4610c:	00bfffc4 	movi	r2,-1
   46110:	00000106 	br	46118 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   46114:	e0bff917 	ldw	r2,-28(fp)
}
   46118:	e037883a 	mov	sp,fp
   4611c:	dfc00117 	ldw	ra,4(sp)
   46120:	df000017 	ldw	fp,0(sp)
   46124:	dec00204 	addi	sp,sp,8
   46128:	f800283a 	ret

0004612c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4612c:	defffa04 	addi	sp,sp,-24
   46130:	df000515 	stw	fp,20(sp)
   46134:	df000504 	addi	fp,sp,20
   46138:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4613c:	0005303a 	rdctl	r2,status
   46140:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46144:	e0fffc17 	ldw	r3,-16(fp)
   46148:	00bfff84 	movi	r2,-2
   4614c:	1884703a 	and	r2,r3,r2
   46150:	1001703a 	wrctl	status,r2
  
  return context;
   46154:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   46158:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4615c:	e0bfff17 	ldw	r2,-4(fp)
   46160:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   46164:	e0bffd17 	ldw	r2,-12(fp)
   46168:	10800017 	ldw	r2,0(r2)
   4616c:	e0fffd17 	ldw	r3,-12(fp)
   46170:	18c00117 	ldw	r3,4(r3)
   46174:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   46178:	e0bffd17 	ldw	r2,-12(fp)
   4617c:	10800117 	ldw	r2,4(r2)
   46180:	e0fffd17 	ldw	r3,-12(fp)
   46184:	18c00017 	ldw	r3,0(r3)
   46188:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4618c:	e0bffd17 	ldw	r2,-12(fp)
   46190:	e0fffd17 	ldw	r3,-12(fp)
   46194:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   46198:	e0bffd17 	ldw	r2,-12(fp)
   4619c:	e0fffd17 	ldw	r3,-12(fp)
   461a0:	10c00015 	stw	r3,0(r2)
   461a4:	e0bffb17 	ldw	r2,-20(fp)
   461a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   461ac:	e0bffe17 	ldw	r2,-8(fp)
   461b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   461b4:	0001883a 	nop
   461b8:	e037883a 	mov	sp,fp
   461bc:	df000017 	ldw	fp,0(sp)
   461c0:	dec00104 	addi	sp,sp,4
   461c4:	f800283a 	ret

000461c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   461c8:	defffb04 	addi	sp,sp,-20
   461cc:	dfc00415 	stw	ra,16(sp)
   461d0:	df000315 	stw	fp,12(sp)
   461d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   461d8:	d0a01117 	ldw	r2,-32700(gp)
   461dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   461e0:	d0a6dd17 	ldw	r2,-25740(gp)
   461e4:	10800044 	addi	r2,r2,1
   461e8:	d0a6dd15 	stw	r2,-25740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   461ec:	00002e06 	br	462a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   461f0:	e0bffd17 	ldw	r2,-12(fp)
   461f4:	10800017 	ldw	r2,0(r2)
   461f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   461fc:	e0bffd17 	ldw	r2,-12(fp)
   46200:	10800403 	ldbu	r2,16(r2)
   46204:	10803fcc 	andi	r2,r2,255
   46208:	10000426 	beq	r2,zero,4621c <alt_tick+0x54>
   4620c:	d0a6dd17 	ldw	r2,-25740(gp)
   46210:	1000021e 	bne	r2,zero,4621c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   46214:	e0bffd17 	ldw	r2,-12(fp)
   46218:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4621c:	e0bffd17 	ldw	r2,-12(fp)
   46220:	10800217 	ldw	r2,8(r2)
   46224:	d0e6dd17 	ldw	r3,-25740(gp)
   46228:	18801d36 	bltu	r3,r2,462a0 <alt_tick+0xd8>
   4622c:	e0bffd17 	ldw	r2,-12(fp)
   46230:	10800403 	ldbu	r2,16(r2)
   46234:	10803fcc 	andi	r2,r2,255
   46238:	1000191e 	bne	r2,zero,462a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4623c:	e0bffd17 	ldw	r2,-12(fp)
   46240:	10800317 	ldw	r2,12(r2)
   46244:	e0fffd17 	ldw	r3,-12(fp)
   46248:	18c00517 	ldw	r3,20(r3)
   4624c:	1809883a 	mov	r4,r3
   46250:	103ee83a 	callr	r2
   46254:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46258:	e0bfff17 	ldw	r2,-4(fp)
   4625c:	1000031e 	bne	r2,zero,4626c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   46260:	e13ffd17 	ldw	r4,-12(fp)
   46264:	004612c0 	call	4612c <alt_alarm_stop>
   46268:	00000d06 	br	462a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4626c:	e0bffd17 	ldw	r2,-12(fp)
   46270:	10c00217 	ldw	r3,8(r2)
   46274:	e0bfff17 	ldw	r2,-4(fp)
   46278:	1887883a 	add	r3,r3,r2
   4627c:	e0bffd17 	ldw	r2,-12(fp)
   46280:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   46284:	e0bffd17 	ldw	r2,-12(fp)
   46288:	10c00217 	ldw	r3,8(r2)
   4628c:	d0a6dd17 	ldw	r2,-25740(gp)
   46290:	1880032e 	bgeu	r3,r2,462a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   46294:	e0bffd17 	ldw	r2,-12(fp)
   46298:	00c00044 	movi	r3,1
   4629c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   462a0:	e0bffe17 	ldw	r2,-8(fp)
   462a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   462a8:	e0fffd17 	ldw	r3,-12(fp)
   462ac:	d0a01104 	addi	r2,gp,-32700
   462b0:	18bfcf1e 	bne	r3,r2,461f0 <__alt_data_end+0xfffe61f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   462b4:	0001883a 	nop
}
   462b8:	0001883a 	nop
   462bc:	e037883a 	mov	sp,fp
   462c0:	dfc00117 	ldw	ra,4(sp)
   462c4:	df000017 	ldw	fp,0(sp)
   462c8:	dec00204 	addi	sp,sp,8
   462cc:	f800283a 	ret

000462d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   462d0:	deffff04 	addi	sp,sp,-4
   462d4:	df000015 	stw	fp,0(sp)
   462d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   462dc:	000170fa 	wrctl	ienable,zero
}
   462e0:	0001883a 	nop
   462e4:	e037883a 	mov	sp,fp
   462e8:	df000017 	ldw	fp,0(sp)
   462ec:	dec00104 	addi	sp,sp,4
   462f0:	f800283a 	ret

000462f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   462f4:	defffa04 	addi	sp,sp,-24
   462f8:	dfc00515 	stw	ra,20(sp)
   462fc:	df000415 	stw	fp,16(sp)
   46300:	df000404 	addi	fp,sp,16
   46304:	e13ffe15 	stw	r4,-8(fp)
   46308:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4630c:	e0bfff17 	ldw	r2,-4(fp)
   46310:	10800017 	ldw	r2,0(r2)
   46314:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   46318:	e13ffe17 	ldw	r4,-8(fp)
   4631c:	00418200 	call	41820 <strlen>
   46320:	10800044 	addi	r2,r2,1
   46324:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46328:	00000d06 	br	46360 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4632c:	e0bffc17 	ldw	r2,-16(fp)
   46330:	10800217 	ldw	r2,8(r2)
   46334:	e0fffd17 	ldw	r3,-12(fp)
   46338:	180d883a 	mov	r6,r3
   4633c:	e17ffe17 	ldw	r5,-8(fp)
   46340:	1009883a 	mov	r4,r2
   46344:	00466380 	call	46638 <memcmp>
   46348:	1000021e 	bne	r2,zero,46354 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4634c:	e0bffc17 	ldw	r2,-16(fp)
   46350:	00000706 	br	46370 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   46354:	e0bffc17 	ldw	r2,-16(fp)
   46358:	10800017 	ldw	r2,0(r2)
   4635c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46360:	e0fffc17 	ldw	r3,-16(fp)
   46364:	e0bfff17 	ldw	r2,-4(fp)
   46368:	18bff01e 	bne	r3,r2,4632c <__alt_data_end+0xfffe632c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4636c:	0005883a 	mov	r2,zero
}
   46370:	e037883a 	mov	sp,fp
   46374:	dfc00117 	ldw	ra,4(sp)
   46378:	df000017 	ldw	fp,0(sp)
   4637c:	dec00204 	addi	sp,sp,8
   46380:	f800283a 	ret

00046384 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   46384:	defffb04 	addi	sp,sp,-20
   46388:	dfc00415 	stw	ra,16(sp)
   4638c:	df000315 	stw	fp,12(sp)
   46390:	df000304 	addi	fp,sp,12
   46394:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   46398:	d0a00917 	ldw	r2,-32732(gp)
   4639c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   463a0:	00003106 	br	46468 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   463a4:	e0bffd17 	ldw	r2,-12(fp)
   463a8:	10800217 	ldw	r2,8(r2)
   463ac:	1009883a 	mov	r4,r2
   463b0:	00418200 	call	41820 <strlen>
   463b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   463b8:	e0bffd17 	ldw	r2,-12(fp)
   463bc:	10c00217 	ldw	r3,8(r2)
   463c0:	e0bffe17 	ldw	r2,-8(fp)
   463c4:	10bfffc4 	addi	r2,r2,-1
   463c8:	1885883a 	add	r2,r3,r2
   463cc:	10800003 	ldbu	r2,0(r2)
   463d0:	10803fcc 	andi	r2,r2,255
   463d4:	1080201c 	xori	r2,r2,128
   463d8:	10bfe004 	addi	r2,r2,-128
   463dc:	10800bd8 	cmpnei	r2,r2,47
   463e0:	1000031e 	bne	r2,zero,463f0 <alt_find_file+0x6c>
    {
      len -= 1;
   463e4:	e0bffe17 	ldw	r2,-8(fp)
   463e8:	10bfffc4 	addi	r2,r2,-1
   463ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   463f0:	e0bffe17 	ldw	r2,-8(fp)
   463f4:	e0ffff17 	ldw	r3,-4(fp)
   463f8:	1885883a 	add	r2,r3,r2
   463fc:	10800003 	ldbu	r2,0(r2)
   46400:	10803fcc 	andi	r2,r2,255
   46404:	1080201c 	xori	r2,r2,128
   46408:	10bfe004 	addi	r2,r2,-128
   4640c:	10800be0 	cmpeqi	r2,r2,47
   46410:	1000081e 	bne	r2,zero,46434 <alt_find_file+0xb0>
   46414:	e0bffe17 	ldw	r2,-8(fp)
   46418:	e0ffff17 	ldw	r3,-4(fp)
   4641c:	1885883a 	add	r2,r3,r2
   46420:	10800003 	ldbu	r2,0(r2)
   46424:	10803fcc 	andi	r2,r2,255
   46428:	1080201c 	xori	r2,r2,128
   4642c:	10bfe004 	addi	r2,r2,-128
   46430:	10000a1e 	bne	r2,zero,4645c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   46434:	e0bffd17 	ldw	r2,-12(fp)
   46438:	10800217 	ldw	r2,8(r2)
   4643c:	e0fffe17 	ldw	r3,-8(fp)
   46440:	180d883a 	mov	r6,r3
   46444:	e17fff17 	ldw	r5,-4(fp)
   46448:	1009883a 	mov	r4,r2
   4644c:	00466380 	call	46638 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46450:	1000021e 	bne	r2,zero,4645c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   46454:	e0bffd17 	ldw	r2,-12(fp)
   46458:	00000706 	br	46478 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4645c:	e0bffd17 	ldw	r2,-12(fp)
   46460:	10800017 	ldw	r2,0(r2)
   46464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46468:	e0fffd17 	ldw	r3,-12(fp)
   4646c:	d0a00904 	addi	r2,gp,-32732
   46470:	18bfcc1e 	bne	r3,r2,463a4 <__alt_data_end+0xfffe63a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   46474:	0005883a 	mov	r2,zero
}
   46478:	e037883a 	mov	sp,fp
   4647c:	dfc00117 	ldw	ra,4(sp)
   46480:	df000017 	ldw	fp,0(sp)
   46484:	dec00204 	addi	sp,sp,8
   46488:	f800283a 	ret

0004648c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4648c:	defffa04 	addi	sp,sp,-24
   46490:	dfc00515 	stw	ra,20(sp)
   46494:	df000415 	stw	fp,16(sp)
   46498:	dc000315 	stw	r16,12(sp)
   4649c:	df000404 	addi	fp,sp,16
   464a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   464a4:	00bffa04 	movi	r2,-24
   464a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   464ac:	e03ffc15 	stw	zero,-16(fp)
   464b0:	00001d06 	br	46528 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   464b4:	04000134 	movhi	r16,4
   464b8:	841cb204 	addi	r16,r16,29384
   464bc:	e0bffc17 	ldw	r2,-16(fp)
   464c0:	01400304 	movi	r5,12
   464c4:	1009883a 	mov	r4,r2
   464c8:	0040e9c0 	call	40e9c <__mulsi3>
   464cc:	8085883a 	add	r2,r16,r2
   464d0:	10800017 	ldw	r2,0(r2)
   464d4:	1000111e 	bne	r2,zero,4651c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   464d8:	04000134 	movhi	r16,4
   464dc:	841cb204 	addi	r16,r16,29384
   464e0:	e0bffc17 	ldw	r2,-16(fp)
   464e4:	01400304 	movi	r5,12
   464e8:	1009883a 	mov	r4,r2
   464ec:	0040e9c0 	call	40e9c <__mulsi3>
   464f0:	8085883a 	add	r2,r16,r2
   464f4:	e0fffe17 	ldw	r3,-8(fp)
   464f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   464fc:	d0e00d17 	ldw	r3,-32716(gp)
   46500:	e0bffc17 	ldw	r2,-16(fp)
   46504:	1880020e 	bge	r3,r2,46510 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   46508:	e0bffc17 	ldw	r2,-16(fp)
   4650c:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   46510:	e0bffc17 	ldw	r2,-16(fp)
   46514:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   46518:	00000606 	br	46534 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4651c:	e0bffc17 	ldw	r2,-16(fp)
   46520:	10800044 	addi	r2,r2,1
   46524:	e0bffc15 	stw	r2,-16(fp)
   46528:	e0bffc17 	ldw	r2,-16(fp)
   4652c:	10800810 	cmplti	r2,r2,32
   46530:	103fe01e 	bne	r2,zero,464b4 <__alt_data_end+0xfffe64b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46534:	e0bffd17 	ldw	r2,-12(fp)
}
   46538:	e6ffff04 	addi	sp,fp,-4
   4653c:	dfc00217 	ldw	ra,8(sp)
   46540:	df000117 	ldw	fp,4(sp)
   46544:	dc000017 	ldw	r16,0(sp)
   46548:	dec00304 	addi	sp,sp,12
   4654c:	f800283a 	ret

00046550 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   46550:	defffe04 	addi	sp,sp,-8
   46554:	df000115 	stw	fp,4(sp)
   46558:	df000104 	addi	fp,sp,4
   4655c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   46560:	e0bfff17 	ldw	r2,-4(fp)
   46564:	10bffe84 	addi	r2,r2,-6
   46568:	10c00428 	cmpgeui	r3,r2,16
   4656c:	18001a1e 	bne	r3,zero,465d8 <alt_exception_cause_generated_bad_addr+0x88>
   46570:	100690ba 	slli	r3,r2,2
   46574:	00800134 	movhi	r2,4
   46578:	10996204 	addi	r2,r2,25992
   4657c:	1885883a 	add	r2,r3,r2
   46580:	10800017 	ldw	r2,0(r2)
   46584:	1000683a 	jmp	r2
   46588:	000465c8 	cmpgei	zero,zero,4503
   4658c:	000465c8 	cmpgei	zero,zero,4503
   46590:	000465d8 	cmpnei	zero,zero,4503
   46594:	000465d8 	cmpnei	zero,zero,4503
   46598:	000465d8 	cmpnei	zero,zero,4503
   4659c:	000465c8 	cmpgei	zero,zero,4503
   465a0:	000465d0 	cmplti	zero,zero,4503
   465a4:	000465d8 	cmpnei	zero,zero,4503
   465a8:	000465c8 	cmpgei	zero,zero,4503
   465ac:	000465c8 	cmpgei	zero,zero,4503
   465b0:	000465d8 	cmpnei	zero,zero,4503
   465b4:	000465c8 	cmpgei	zero,zero,4503
   465b8:	000465d0 	cmplti	zero,zero,4503
   465bc:	000465d8 	cmpnei	zero,zero,4503
   465c0:	000465d8 	cmpnei	zero,zero,4503
   465c4:	000465c8 	cmpgei	zero,zero,4503
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   465c8:	00800044 	movi	r2,1
   465cc:	00000306 	br	465dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   465d0:	0005883a 	mov	r2,zero
   465d4:	00000106 	br	465dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   465d8:	0005883a 	mov	r2,zero
  }
}
   465dc:	e037883a 	mov	sp,fp
   465e0:	df000017 	ldw	fp,0(sp)
   465e4:	dec00104 	addi	sp,sp,4
   465e8:	f800283a 	ret

000465ec <atexit>:
   465ec:	200b883a 	mov	r5,r4
   465f0:	000f883a 	mov	r7,zero
   465f4:	000d883a 	mov	r6,zero
   465f8:	0009883a 	mov	r4,zero
   465fc:	00466b41 	jmpi	466b4 <__register_exitproc>

00046600 <exit>:
   46600:	defffe04 	addi	sp,sp,-8
   46604:	000b883a 	mov	r5,zero
   46608:	dc000015 	stw	r16,0(sp)
   4660c:	dfc00115 	stw	ra,4(sp)
   46610:	2021883a 	mov	r16,r4
   46614:	00467cc0 	call	467cc <__call_exitprocs>
   46618:	00800174 	movhi	r2,5
   4661c:	10a13104 	addi	r2,r2,-31548
   46620:	11000017 	ldw	r4,0(r2)
   46624:	20800f17 	ldw	r2,60(r4)
   46628:	10000126 	beq	r2,zero,46630 <exit+0x30>
   4662c:	103ee83a 	callr	r2
   46630:	8009883a 	mov	r4,r16
   46634:	004694c0 	call	4694c <_exit>

00046638 <memcmp>:
   46638:	01c000c4 	movi	r7,3
   4663c:	3980192e 	bgeu	r7,r6,466a4 <memcmp+0x6c>
   46640:	2144b03a 	or	r2,r4,r5
   46644:	11c4703a 	and	r2,r2,r7
   46648:	10000f26 	beq	r2,zero,46688 <memcmp+0x50>
   4664c:	20800003 	ldbu	r2,0(r4)
   46650:	28c00003 	ldbu	r3,0(r5)
   46654:	10c0151e 	bne	r2,r3,466ac <memcmp+0x74>
   46658:	31bfff84 	addi	r6,r6,-2
   4665c:	01ffffc4 	movi	r7,-1
   46660:	00000406 	br	46674 <memcmp+0x3c>
   46664:	20800003 	ldbu	r2,0(r4)
   46668:	28c00003 	ldbu	r3,0(r5)
   4666c:	31bfffc4 	addi	r6,r6,-1
   46670:	10c00e1e 	bne	r2,r3,466ac <memcmp+0x74>
   46674:	21000044 	addi	r4,r4,1
   46678:	29400044 	addi	r5,r5,1
   4667c:	31fff91e 	bne	r6,r7,46664 <__alt_data_end+0xfffe6664>
   46680:	0005883a 	mov	r2,zero
   46684:	f800283a 	ret
   46688:	20c00017 	ldw	r3,0(r4)
   4668c:	28800017 	ldw	r2,0(r5)
   46690:	18bfee1e 	bne	r3,r2,4664c <__alt_data_end+0xfffe664c>
   46694:	31bfff04 	addi	r6,r6,-4
   46698:	21000104 	addi	r4,r4,4
   4669c:	29400104 	addi	r5,r5,4
   466a0:	39bff936 	bltu	r7,r6,46688 <__alt_data_end+0xfffe6688>
   466a4:	303fe91e 	bne	r6,zero,4664c <__alt_data_end+0xfffe664c>
   466a8:	003ff506 	br	46680 <__alt_data_end+0xfffe6680>
   466ac:	10c5c83a 	sub	r2,r2,r3
   466b0:	f800283a 	ret

000466b4 <__register_exitproc>:
   466b4:	defffa04 	addi	sp,sp,-24
   466b8:	dc000315 	stw	r16,12(sp)
   466bc:	04000174 	movhi	r16,5
   466c0:	84213104 	addi	r16,r16,-31548
   466c4:	80c00017 	ldw	r3,0(r16)
   466c8:	dc400415 	stw	r17,16(sp)
   466cc:	dfc00515 	stw	ra,20(sp)
   466d0:	18805217 	ldw	r2,328(r3)
   466d4:	2023883a 	mov	r17,r4
   466d8:	10003726 	beq	r2,zero,467b8 <__register_exitproc+0x104>
   466dc:	10c00117 	ldw	r3,4(r2)
   466e0:	010007c4 	movi	r4,31
   466e4:	20c00e16 	blt	r4,r3,46720 <__register_exitproc+0x6c>
   466e8:	1a000044 	addi	r8,r3,1
   466ec:	8800221e 	bne	r17,zero,46778 <__register_exitproc+0xc4>
   466f0:	18c00084 	addi	r3,r3,2
   466f4:	18c7883a 	add	r3,r3,r3
   466f8:	18c7883a 	add	r3,r3,r3
   466fc:	12000115 	stw	r8,4(r2)
   46700:	10c7883a 	add	r3,r2,r3
   46704:	19400015 	stw	r5,0(r3)
   46708:	0005883a 	mov	r2,zero
   4670c:	dfc00517 	ldw	ra,20(sp)
   46710:	dc400417 	ldw	r17,16(sp)
   46714:	dc000317 	ldw	r16,12(sp)
   46718:	dec00604 	addi	sp,sp,24
   4671c:	f800283a 	ret
   46720:	00800134 	movhi	r2,4
   46724:	1083b104 	addi	r2,r2,3780
   46728:	10002626 	beq	r2,zero,467c4 <__register_exitproc+0x110>
   4672c:	01006404 	movi	r4,400
   46730:	d9400015 	stw	r5,0(sp)
   46734:	d9800115 	stw	r6,4(sp)
   46738:	d9c00215 	stw	r7,8(sp)
   4673c:	0040ec40 	call	40ec4 <malloc>
   46740:	d9400017 	ldw	r5,0(sp)
   46744:	d9800117 	ldw	r6,4(sp)
   46748:	d9c00217 	ldw	r7,8(sp)
   4674c:	10001d26 	beq	r2,zero,467c4 <__register_exitproc+0x110>
   46750:	81000017 	ldw	r4,0(r16)
   46754:	10000115 	stw	zero,4(r2)
   46758:	02000044 	movi	r8,1
   4675c:	22405217 	ldw	r9,328(r4)
   46760:	0007883a 	mov	r3,zero
   46764:	12400015 	stw	r9,0(r2)
   46768:	20805215 	stw	r2,328(r4)
   4676c:	10006215 	stw	zero,392(r2)
   46770:	10006315 	stw	zero,396(r2)
   46774:	883fde26 	beq	r17,zero,466f0 <__alt_data_end+0xfffe66f0>
   46778:	18c9883a 	add	r4,r3,r3
   4677c:	2109883a 	add	r4,r4,r4
   46780:	1109883a 	add	r4,r2,r4
   46784:	21802215 	stw	r6,136(r4)
   46788:	01800044 	movi	r6,1
   4678c:	12406217 	ldw	r9,392(r2)
   46790:	30cc983a 	sll	r6,r6,r3
   46794:	4992b03a 	or	r9,r9,r6
   46798:	12406215 	stw	r9,392(r2)
   4679c:	21c04215 	stw	r7,264(r4)
   467a0:	01000084 	movi	r4,2
   467a4:	893fd21e 	bne	r17,r4,466f0 <__alt_data_end+0xfffe66f0>
   467a8:	11006317 	ldw	r4,396(r2)
   467ac:	218cb03a 	or	r6,r4,r6
   467b0:	11806315 	stw	r6,396(r2)
   467b4:	003fce06 	br	466f0 <__alt_data_end+0xfffe66f0>
   467b8:	18805304 	addi	r2,r3,332
   467bc:	18805215 	stw	r2,328(r3)
   467c0:	003fc606 	br	466dc <__alt_data_end+0xfffe66dc>
   467c4:	00bfffc4 	movi	r2,-1
   467c8:	003fd006 	br	4670c <__alt_data_end+0xfffe670c>

000467cc <__call_exitprocs>:
   467cc:	defff504 	addi	sp,sp,-44
   467d0:	df000915 	stw	fp,36(sp)
   467d4:	dd400615 	stw	r21,24(sp)
   467d8:	dc800315 	stw	r18,12(sp)
   467dc:	dfc00a15 	stw	ra,40(sp)
   467e0:	ddc00815 	stw	r23,32(sp)
   467e4:	dd800715 	stw	r22,28(sp)
   467e8:	dd000515 	stw	r20,20(sp)
   467ec:	dcc00415 	stw	r19,16(sp)
   467f0:	dc400215 	stw	r17,8(sp)
   467f4:	dc000115 	stw	r16,4(sp)
   467f8:	d9000015 	stw	r4,0(sp)
   467fc:	2839883a 	mov	fp,r5
   46800:	04800044 	movi	r18,1
   46804:	057fffc4 	movi	r21,-1
   46808:	00800174 	movhi	r2,5
   4680c:	10a13104 	addi	r2,r2,-31548
   46810:	12000017 	ldw	r8,0(r2)
   46814:	45005217 	ldw	r20,328(r8)
   46818:	44c05204 	addi	r19,r8,328
   4681c:	a0001c26 	beq	r20,zero,46890 <__call_exitprocs+0xc4>
   46820:	a0800117 	ldw	r2,4(r20)
   46824:	15ffffc4 	addi	r23,r2,-1
   46828:	b8000d16 	blt	r23,zero,46860 <__call_exitprocs+0x94>
   4682c:	14000044 	addi	r16,r2,1
   46830:	8421883a 	add	r16,r16,r16
   46834:	8421883a 	add	r16,r16,r16
   46838:	84402004 	addi	r17,r16,128
   4683c:	a463883a 	add	r17,r20,r17
   46840:	a421883a 	add	r16,r20,r16
   46844:	e0001e26 	beq	fp,zero,468c0 <__call_exitprocs+0xf4>
   46848:	80804017 	ldw	r2,256(r16)
   4684c:	e0801c26 	beq	fp,r2,468c0 <__call_exitprocs+0xf4>
   46850:	bdffffc4 	addi	r23,r23,-1
   46854:	843fff04 	addi	r16,r16,-4
   46858:	8c7fff04 	addi	r17,r17,-4
   4685c:	bd7ff91e 	bne	r23,r21,46844 <__alt_data_end+0xfffe6844>
   46860:	00800134 	movhi	r2,4
   46864:	1083b604 	addi	r2,r2,3800
   46868:	10000926 	beq	r2,zero,46890 <__call_exitprocs+0xc4>
   4686c:	a0800117 	ldw	r2,4(r20)
   46870:	1000301e 	bne	r2,zero,46934 <__call_exitprocs+0x168>
   46874:	a0800017 	ldw	r2,0(r20)
   46878:	10003226 	beq	r2,zero,46944 <__call_exitprocs+0x178>
   4687c:	a009883a 	mov	r4,r20
   46880:	98800015 	stw	r2,0(r19)
   46884:	0040ed80 	call	40ed8 <free>
   46888:	9d000017 	ldw	r20,0(r19)
   4688c:	a03fe41e 	bne	r20,zero,46820 <__alt_data_end+0xfffe6820>
   46890:	dfc00a17 	ldw	ra,40(sp)
   46894:	df000917 	ldw	fp,36(sp)
   46898:	ddc00817 	ldw	r23,32(sp)
   4689c:	dd800717 	ldw	r22,28(sp)
   468a0:	dd400617 	ldw	r21,24(sp)
   468a4:	dd000517 	ldw	r20,20(sp)
   468a8:	dcc00417 	ldw	r19,16(sp)
   468ac:	dc800317 	ldw	r18,12(sp)
   468b0:	dc400217 	ldw	r17,8(sp)
   468b4:	dc000117 	ldw	r16,4(sp)
   468b8:	dec00b04 	addi	sp,sp,44
   468bc:	f800283a 	ret
   468c0:	a0800117 	ldw	r2,4(r20)
   468c4:	80c00017 	ldw	r3,0(r16)
   468c8:	10bfffc4 	addi	r2,r2,-1
   468cc:	15c01426 	beq	r2,r23,46920 <__call_exitprocs+0x154>
   468d0:	80000015 	stw	zero,0(r16)
   468d4:	183fde26 	beq	r3,zero,46850 <__alt_data_end+0xfffe6850>
   468d8:	95c8983a 	sll	r4,r18,r23
   468dc:	a0806217 	ldw	r2,392(r20)
   468e0:	a5800117 	ldw	r22,4(r20)
   468e4:	2084703a 	and	r2,r4,r2
   468e8:	10000b26 	beq	r2,zero,46918 <__call_exitprocs+0x14c>
   468ec:	a0806317 	ldw	r2,396(r20)
   468f0:	2088703a 	and	r4,r4,r2
   468f4:	20000c1e 	bne	r4,zero,46928 <__call_exitprocs+0x15c>
   468f8:	89400017 	ldw	r5,0(r17)
   468fc:	d9000017 	ldw	r4,0(sp)
   46900:	183ee83a 	callr	r3
   46904:	a0800117 	ldw	r2,4(r20)
   46908:	15bfbf1e 	bne	r2,r22,46808 <__alt_data_end+0xfffe6808>
   4690c:	98800017 	ldw	r2,0(r19)
   46910:	153fcf26 	beq	r2,r20,46850 <__alt_data_end+0xfffe6850>
   46914:	003fbc06 	br	46808 <__alt_data_end+0xfffe6808>
   46918:	183ee83a 	callr	r3
   4691c:	003ff906 	br	46904 <__alt_data_end+0xfffe6904>
   46920:	a5c00115 	stw	r23,4(r20)
   46924:	003feb06 	br	468d4 <__alt_data_end+0xfffe68d4>
   46928:	89000017 	ldw	r4,0(r17)
   4692c:	183ee83a 	callr	r3
   46930:	003ff406 	br	46904 <__alt_data_end+0xfffe6904>
   46934:	a0800017 	ldw	r2,0(r20)
   46938:	a027883a 	mov	r19,r20
   4693c:	1029883a 	mov	r20,r2
   46940:	003fb606 	br	4681c <__alt_data_end+0xfffe681c>
   46944:	0005883a 	mov	r2,zero
   46948:	003ffb06 	br	46938 <__alt_data_end+0xfffe6938>

0004694c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4694c:	defffd04 	addi	sp,sp,-12
   46950:	df000215 	stw	fp,8(sp)
   46954:	df000204 	addi	fp,sp,8
   46958:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4695c:	0001883a 	nop
   46960:	e0bfff17 	ldw	r2,-4(fp)
   46964:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   46968:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4696c:	10000226 	beq	r2,zero,46978 <_exit+0x2c>
    ALT_SIM_FAIL();
   46970:	002af070 	cmpltui	zero,zero,43969
   46974:	00000106 	br	4697c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   46978:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4697c:	003fff06 	br	4697c <__alt_data_end+0xfffe697c>

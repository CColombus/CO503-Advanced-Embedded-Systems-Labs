
1f.elf:     file format elf32-littlenios2
1f.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000e244 memsz 0x0000e244 flags r-x
    LOAD off    0x0000f264 vaddr 0x0004e264 paddr 0x0004fda4 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x000118e4 vaddr 0x000518e4 paddr 0x000518e4 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dcec  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  0004dea4  0004dea4  0000eea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  0004e264  0004fda4  0000f264  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  000518e4  000518e4  000118e4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f40  00000000  00000000  00010dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002a7c0  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a77e  00000000  00000000  0003c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000bdf8  00000000  00000000  00046c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001db4  00000000  00000000  00052a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003497  00000000  00000000  000547f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012276  00000000  00000000  00057c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00069f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00069f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0006e1ed  2**0
                  CONTENTS, READONLY
 17 .cpu          00000006  00000000  00000000  0006e1f0  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0006e1f6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006e1f7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006e1f8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006e1fc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006e200  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000c  00000000  00000000  0006e204  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000c  00000000  00000000  0006e210  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000c  00000000  00000000  0006e21c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0006e228  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0006e231  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001c11da  00000000  00000000  0006e24d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
0004dea4 l    d  .rodata	00000000 .rodata
0004e264 l    d  .rwdata	00000000 .rwdata
000518e4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1f_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004098c l     F .text	00000008 __fp_lock
00040994 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004e2dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00042640 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00042ba4 l     F .text	00000034 __sprint_r
0004df7a l     O .rodata	00000010 blanks.3515
0004df8a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00044e14 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0004dfbc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0004e104 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0004965c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004a39c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004ab30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ac4c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004ac78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004ad78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004ae6c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004af58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004b134 l     F .text	00000050 alt_get_errno
0004b184 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004b3cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004fd4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004b640 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004b780 l     F .text	00000038 alt_dev_reg
0004ec98 l     O .rwdata	00001060 jtag_uart_1f
0004fcf8 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004bf74 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004c178 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004c7b4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
0004fd8c l     O .rwdata	00000004 hcinfo.2311
0004fd80 l     O .rwdata	00000004 hcinfo.2324
0004fd74 l     O .rwdata	00000004 hcinfo.2333
0004fd68 l     O .rwdata	00000004 hcinfo.2346
0004fd5c l     O .rwdata	00000004 hcinfo.2359
0004fd50 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004d034 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004d7bc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00048034 g     F .text	00000074 _mprec_log10
00048124 g     F .text	00000084 __any_on
00046be8 g     F .text	00000064 _isatty_r
0004dfec g     O .rodata	00000028 __mprec_tinytens
0004b07c g     F .text	00000078 alt_main
00042a84 g     F .text	00000094 strcpy
0004aaec g     F .text	00000044 __ashldi3
000425a8 g     F .text	00000084 _puts_r
00051948 g     O .bss	00000100 alt_irq
0004e2b8 g     O .rwdata	0000000c q1c
00046d28 g     F .text	0000006c _lseek_r
0004bae0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0004fda4 g       *ABS*	00000000 __flash_rwdata_start
0004666c g     F .text	00000098 __sflags
00049efc g     F .text	0000005c __eqdf2
00051bd8 g       *ABS*	00000000 __alt_heap_start
000423c0 g     F .text	0000003c printf
00042988 g     F .text	0000005c __sseek
00040a30 g     F .text	0000010c __sinit
00044a78 g     F .text	0000013c __swbuf_r
00046c4c g     F .text	0000009c _setlocale_r
000409a8 g     F .text	00000078 __sfmoreglue
0004e294 g     O .rwdata	0000000c q5
0004b114 g     F .text	00000020 __malloc_unlock
0004c8b0 g     F .text	0000016c alt_hostfs_open
00046fcc g     F .text	0000018c memmove
0004b860 g     F .text	00000098 altera_avalon_fifo_init
00040a20 g     F .text	00000010 _cleanup
0004bb90 g     F .text	00000058 altera_avalon_fifo_write_fifo
00047158 g     F .text	000000a8 _Balloc
00049fb4 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
0004bd28 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041758 g     F .text	00000068 _fstat_r
000518ec g     O .bss	00000004 errno
0005190c g     O .bss	00000004 alt_argv
00057d20 g       *ABS*	00000000 _gp
0004ba2c g     F .text	0000005c altera_avalon_fifo_clear_event
0004eb18 g     O .rwdata	00000180 alt_fd_list
0004cbf8 g     F .text	000000b8 alt_hostfs_seek
0004d1dc g     F .text	00000090 alt_find_dev
00046e8c g     F .text	00000140 memcpy
0004099c g     F .text	0000000c _cleanup_r
0004a0d8 g     F .text	000000d4 __floatsidf
0004d380 g     F .text	00000084 alt_fs_reg
0004d89c g     F .text	00000078 alt_io_redirect
0004a07c g     F .text	0000005c __ltdf2
0004dea4 g       *ABS*	00000000 __DTOR_END__
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem_1f
0004262c g     F .text	00000014 puts
0004e270 g     O .rwdata	0000000c q2
00047f90 g     F .text	000000a4 __ratio
0004c378 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00042394 g     F .text	0000002c _printf_r
0004a4bc g     F .text	00000008 __udivsi3
0004adc8 g     F .text	000000a4 isatty
0004e03c g     O .rodata	000000c8 __mprec_tens
00046ce8 g     F .text	0000000c __locale_charset
000518f8 g     O .bss	00000004 __malloc_top_pad
0004fd30 g     O .rwdata	00000004 __mb_cur_max
00046cf4 g     F .text	0000000c _localeconv_r
00047588 g     F .text	0000003c __i2b
00046704 g     F .text	000004e4 __sfvwrite_r
00042848 g     F .text	00000064 _sbrk_r
0004ca88 g     F .text	000000b8 alt_hostfs_read
000481a8 g     F .text	0000006c _read_r
0004eae4 g     O .rwdata	0000000c __lc_ctype
0004fd44 g     O .rwdata	00000004 alt_max_fd
0004a8d4 g     F .text	00000104 __unpack_d
00040624 g     F .text	0000013c _fclose_r
0004095c g     F .text	00000030 fflush
000518f4 g     O .bss	00000004 __malloc_max_sbrked_mem
000499b0 g     F .text	00000054 __adddf3
00047d04 g     F .text	00000148 __b2d
00049034 g     F .text	00000628 __umoddi3
0004afa8 g     F .text	000000d4 lseek
0004fd20 g     O .rwdata	00000004 _global_impure_ptr
00048214 g     F .text	000005fc _realloc_r
00051bd8 g       *ABS*	00000000 __bss_end
0004d6cc g     F .text	000000f0 alt_iic_isr_register
0004d9ac g     F .text	00000104 alt_tick
000489e4 g     F .text	00000650 __udivdi3
0004e014 g     O .rodata	00000028 __mprec_bigtens
0004736c g     F .text	00000104 __s2b
0004a280 g     F .text	0000011c __floatunsidf
00047aa4 g     F .text	00000058 __mcmp
00040c48 g     F .text	00000018 __fp_lock_all
0004d680 g     F .text	0000004c alt_ic_irq_enabled
0004d914 g     F .text	00000098 alt_alarm_stop
00051914 g     O .bss	00000004 alt_irq_active
0004ca1c g     F .text	0000006c alt_hostfs_close
000400ec g     F .exceptions	000000cc alt_irq_handler
0004eaf0 g     O .rwdata	00000028 alt_dev_null
0004d018 g     F .text	0000001c alt_dcache_flush_all
00047470 g     F .text	00000068 __hi0bits
0004a1ac g     F .text	000000d4 __fixdfsi
0004ba88 g     F .text	00000058 altera_avalon_fifo_write_ienable
0004fda4 g       *ABS*	00000000 __ram_rwdata_end
0004b99c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0004fd3c g     O .rwdata	00000008 alt_dev_list
00040e10 g     F .text	00000044 _fputc_r
0004b690 g     F .text	000000f0 write
000423fc g     F .text	000000bc _putc_r
0004e264 g       *ABS*	00000000 __ram_rodata_end
0004acc8 g     F .text	000000b0 fstat
00040dec g     F .text	00000024 fprintf
0004aaa8 g     F .text	00000044 __lshrdi3
000518e8 g     O .bss	00000004 INIT_USAGE_DEQ
000429ec g     F .text	00000098 strcat
000405e8 g     F .text	0000003c RECV2
0004781c g     F .text	0000012c __pow5mult
00051904 g     O .bss	00000004 __nlocale_changed
0004a4c4 g     F .text	00000008 __umodsi3
00051bd8 g       *ABS*	00000000 end
00041734 g     F .text	00000024 fseek
0004beb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004b9c8 g     F .text	0000003c altera_avalon_fifo_read_event
0004dea4 g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
0004c828 g     F .text	00000088 alt_avalon_timer_sc_init
0004a604 g     F .text	000000ac __clzsi2
0004c590 g     F .text	00000224 altera_avalon_jtag_uart_write
00040c38 g     F .text	00000004 __sfp_lock_acquire
0004bc54 g     F .text	0000004c altera_avalon_fifo_read_fifo
00046d94 g     F .text	000000f8 memchr
00042bd8 g     F .text	00001e7c ___vfprintf_internal_r
00040ff0 g     F .text	000002d0 _free_r
0004dcc8 g     F .text	000001a0 __call_exitprocs
00051900 g     O .bss	00000004 __mlocale_changed
0004fd28 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00051918 g     O .bss	00000004 _alt_tick_rate
00047948 g     F .text	0000015c __lshift
000404a0 g     F .text	00000088 enqueueINT32
0005191c g     O .bss	00000004 _alt_nticks
0004b41c g     F .text	000000f4 read
0004b7ec g     F .text	00000074 alt_sys_init
00042328 g     F .text	0000006c _open_r
0004db98 g     F .text	00000130 __register_exitproc
0004e2c4 g     O .rwdata	0000000c q1d
0004e27c g     O .rwdata	0000000c q3
000475c4 g     F .text	00000258 __multiply
0004c21c g     F .text	00000068 altera_avalon_jtag_uart_close
0004a4cc g     F .text	00000028 __mulsi3
0004e264 g       *ABS*	00000000 __ram_rwdata_start
0004dea4 g       *ABS*	00000000 __ram_rodata_start
00051920 g     O .bss	00000028 __malloc_current_mallinfo
00047e4c g     F .text	00000144 __d2b
0004e264 g     O .rwdata	0000000c q1
0004bd50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004d404 g     F .text	000000d4 alt_get_fd
0004a9d8 g     F .text	000000d0 __fpcmp_parts_d
00044db0 g     F .text	00000064 _close_r
0004db1c g     F .text	0000007c memcmp
0004be10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00051bd8 g       *ABS*	00000000 __alt_stack_base
0004be60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00044c3c g     F .text	00000174 __swsetup_r
0004b8f8 g     F .text	0000003c altera_avalon_fifo_read_status
00049d48 g     F .text	000001b4 __divdf3
00040b3c g     F .text	000000fc __sfp
000480a8 g     F .text	0000007c __copybits
0004e6dc g     O .rwdata	00000408 __malloc_av_
00040c44 g     F .text	00000004 __sinit_lock_release
00049a64 g     F .text	000002e4 __muldf3
000428ac g     F .text	00000054 __sread
0004bcfc g     F .text	0000002c altera_avalon_fifo_read_other_info
0004d26c g     F .text	00000114 alt_find_file
0004d084 g     F .text	000000a0 alt_dev_llist_insert
0004b0f4 g     F .text	00000020 __malloc_lock
00040dc4 g     F .text	00000028 _fprintf_r
0004b590 g     F .text	000000b0 sbrk
00040774 g     F .text	000001e8 _fflush_r
00048918 g     F .text	000000cc _calloc_r
00040da8 g     F .text	0000001c fopen
000518e4 g       *ABS*	00000000 __bss_start
0004224c g     F .text	000000dc memset
000401f4 g     F .text	000002ac main
00051910 g     O .bss	00000004 alt_envp
000518f0 g     O .bss	00000004 __malloc_max_total_mem
0004bdb0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004ba04 g     F .text	00000028 altera_avalon_fifo_read_level
00044bb4 g     F .text	0000001c __swbuf
000429e4 g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00040760 g     F .text	00000014 fclose
00051a48 g     O .bss	00000190 _atexit0
00045050 g     F .text	0000161c _dtoa_r
00041ac8 g     F .text	00000784 _malloc_r
000405ac g     F .text	0000003c RECV1
0004fd48 g     O .rwdata	00000004 alt_errno
0004e2ac g     O .rwdata	0000000c q1b
000417c0 g     F .text	000000a8 _fwalk
000424b8 g     F .text	000000f0 putc
0004a410 g     F .text	00000050 __divsi3
0004e110 g     O .rodata	00000014 __thenan_df
00040eb4 g     F .text	0000013c _malloc_trim_r
0004dea4 g       *ABS*	00000000 __CTOR_END__
00048874 g     F .text	000000a4 strcmp
0004dea4 g       *ABS*	00000000 __flash_rodata_start
0004dea4 g       *ABS*	00000000 __DTOR_LIST__
00049f58 g     F .text	0000005c __nedf2
0004b7b8 g     F .text	00000034 alt_irq_init
0004b510 g     F .text	00000080 alt_release_fd
0004e124 g     O .rodata	00000100 __clz_tab
000518fc g     O .bss	00000004 _PathLocale
0004dad0 g     F .text	00000014 atexit
00044bd0 g     F .text	0000006c _write_r
0004e2a0 g     O .rwdata	0000000c q6
00046d00 g     F .text	0000001c setlocale
000518e4 g     O .bss	00000004 INIT_USAGE_ENQ
0004fd24 g     O .rwdata	00000004 _impure_ptr
00051908 g     O .bss	00000004 alt_argc
0004d180 g     F .text	0000005c _do_dtors
000412c0 g     F .text	00000474 _fseek_r
0004265c g     F .text	000001ec __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
00047ca4 g     F .text	00000060 __ulp
00048810 g     F .text	00000038 __isinfd
00040c60 g     F .text	00000018 __fp_unlock_all
00040e54 g     F .text	00000060 fputc
0004e2d0 g     O .rwdata	0000000c q1e
0004fd34 g     O .rwdata	00000008 alt_fs_list
0004cb40 g     F .text	000000b8 alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00046d1c g     F .text	0000000c localeconv
0004bca0 g     F .text	0000005c altera_avalon_fifo_write_other_info
0004d4f4 g     F .text	00000050 alt_ic_isr_register
0004fda4 g       *ABS*	00000000 _edata
00051bd8 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004c284 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004d5e0 g     F .text	000000a0 alt_ic_irq_disable
00042900 g     F .text	00000088 __swrite
0004fd2c g     O .rwdata	00000004 __malloc_trim_threshold
0004dab0 g     F .text	00000020 altera_nios2_qsys_irq_init
0004dae4 g     F .text	00000038 exit
00041868 g     F .text	000000b8 _fwalk_reent
00047afc g     F .text	000001a8 __mdiff
0004a460 g     F .text	0000005c __modsi3
0004b934 g     F .text	0000003c altera_avalon_fifo_read_ienable
00060000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040c3c g     F .text	00000004 __sfp_lock_release
00040c78 g     F .text	00000130 _fopen_r
0004de68 g     F .text	0000003c _exit
00048848 g     F .text	0000002c __isnand
0004ced8 g     F .text	00000140 alt_alarm_start
0004a4f4 g     F .text	00000110 __muldi3
0004b970 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00041920 g     F .text	000001a8 __smakebuf_r
0004e288 g     O .rwdata	0000000c q4
00042b18 g     F .text	0000008c strlen
0004b274 g     F .text	00000158 open
0004bbe8 g     F .text	0000006c altera_avalon_read_fifo
0004a018 g     F .text	00000064 __gedf2
00040528 g     F .text	00000084 dequeueINT32
0004d4d8 g     F .text	0000001c alt_icache_flush_all
0004fd98 g     O .rwdata	00000004 alt_priority_mask
0004d544 g     F .text	0000009c alt_ic_irq_enable
00044a54 g     F .text	00000024 __vfprintf_internal
00049a04 g     F .text	00000060 __subdf3
000474d8 g     F .text	000000b0 __lo0bits
0004bb38 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0004fd9c g     O .rwdata	00000008 alt_alarm_list
0004d124 g     F .text	0000005c _do_ctors
0004ab80 g     F .text	000000cc close
0004aed8 g     F .text	00000080 alt_load
0004a6b0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00040c40 g     F .text	00000004 __sinit_lock_acquire
00047228 g     F .text	00000144 __multadd
00047200 g     F .text	00000028 _Bfree
0004ccb0 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18c65204 	addi	r3,r3,6472
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21065204 	addi	r4,r4,6472
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d69f4814 	ori	gp,gp,32032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401cc:	10863914 	ori	r2,r2,6372

    movhi r3, %hi(__bss_end)
   401d0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d4:	18c6f614 	ori	r3,r3,7128

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	004aed80 	call	4aed8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004b07c0 	call	4b07c <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main()
{
   401f4:	deffb504 	addi	sp,sp,-300
   401f8:	dfc04a15 	stw	ra,296(sp)
   401fc:	df004915 	stw	fp,292(sp)
   40200:	dc004815 	stw	r16,288(sp)
   40204:	df004804 	addi	fp,sp,288
	char file_system[80] = "/mnt/host/files/";
   40208:	009d1bb4 	movhi	r2,29806
   4020c:	109b4bc4 	addi	r2,r2,27951
   40210:	e0bfba15 	stw	r2,-280(fp)
   40214:	009cdbf4 	movhi	r2,29551
   40218:	109a0bc4 	addi	r2,r2,26671
   4021c:	e0bfbb15 	stw	r2,-276(fp)
   40220:	009a59b4 	movhi	r2,26982
   40224:	108bdd04 	addi	r2,r2,12148
   40228:	e0bfbc15 	stw	r2,-272(fp)
   4022c:	008bdcf4 	movhi	r2,12147
   40230:	10995b04 	addi	r2,r2,25964
   40234:	e0bfbd15 	stw	r2,-268(fp)
   40238:	e03fbe15 	stw	zero,-264(fp)
   4023c:	e0ffbf04 	addi	r3,fp,-260
   40240:	00800f04 	movi	r2,60
   40244:	1809883a 	mov	r4,r3
   40248:	000b883a 	mov	r5,zero
   4024c:	100d883a 	mov	r6,r2
   40250:	004224c0 	call	4224c <memset>
	UINT8 out;
	INT8 filename[50];

	while (1)
	{
		out = 0;
   40254:	e03fb805 	stb	zero,-288(fp)

		// Skip any prefix null values
		while ((filename[out] = RECV1()) == '\0') {}
   40258:	0001883a 	nop
   4025c:	e43fb803 	ldbu	r16,-288(fp)
   40260:	00405ac0 	call	405ac <RECV1>
   40264:	1007883a 	mov	r3,r2
   40268:	e0bfce04 	addi	r2,fp,-200
   4026c:	1405883a 	add	r2,r2,r16
   40270:	10c00005 	stb	r3,0(r2)
   40274:	e0bfce04 	addi	r2,fp,-200
   40278:	1405883a 	add	r2,r2,r16
   4027c:	10800003 	ldbu	r2,0(r2)
   40280:	10803fcc 	andi	r2,r2,255
   40284:	1080201c 	xori	r2,r2,128
   40288:	10bfe004 	addi	r2,r2,-128
   4028c:	103ff326 	beq	r2,zero,4025c <main+0x68>

		while (filename[out] != '\0' && filename[out] != '\n')
   40290:	00000906 	br	402b8 <main+0xc4>
		{
			out++;
   40294:	e0bfb803 	ldbu	r2,-288(fp)
   40298:	10800044 	addi	r2,r2,1
   4029c:	e0bfb805 	stb	r2,-288(fp)
			filename[out] = (char)RECV1();
   402a0:	e43fb803 	ldbu	r16,-288(fp)
   402a4:	00405ac0 	call	405ac <RECV1>
   402a8:	1007883a 	mov	r3,r2
   402ac:	e0bfce04 	addi	r2,fp,-200
   402b0:	1405883a 	add	r2,r2,r16
   402b4:	10c00005 	stb	r3,0(r2)
		out = 0;

		// Skip any prefix null values
		while ((filename[out] = RECV1()) == '\0') {}

		while (filename[out] != '\0' && filename[out] != '\n')
   402b8:	e0bfb803 	ldbu	r2,-288(fp)
   402bc:	e0ffce04 	addi	r3,fp,-200
   402c0:	1885883a 	add	r2,r3,r2
   402c4:	10800003 	ldbu	r2,0(r2)
   402c8:	10803fcc 	andi	r2,r2,255
   402cc:	1080201c 	xori	r2,r2,128
   402d0:	10bfe004 	addi	r2,r2,-128
   402d4:	10000926 	beq	r2,zero,402fc <main+0x108>
   402d8:	e0bfb803 	ldbu	r2,-288(fp)
   402dc:	e0ffce04 	addi	r3,fp,-200
   402e0:	1885883a 	add	r2,r3,r2
   402e4:	10800003 	ldbu	r2,0(r2)
   402e8:	10803fcc 	andi	r2,r2,255
   402ec:	1080201c 	xori	r2,r2,128
   402f0:	10bfe004 	addi	r2,r2,-128
   402f4:	10800298 	cmpnei	r2,r2,10
   402f8:	103fe61e 	bne	r2,zero,40294 <main+0xa0>
		{
			out++;
			filename[out] = (char)RECV1();
		}

		printf("\nFilename: %s\n", filename);
   402fc:	e0bfce04 	addi	r2,fp,-200
   40300:	01000174 	movhi	r4,5
   40304:	2137a904 	addi	r4,r4,-8540
   40308:	100b883a 	mov	r5,r2
   4030c:	00423c00 	call	423c0 <printf>

		filename[out++] = '.';
   40310:	e0bfb803 	ldbu	r2,-288(fp)
   40314:	e0ffce04 	addi	r3,fp,-200
   40318:	1885883a 	add	r2,r3,r2
   4031c:	00c00b84 	movi	r3,46
   40320:	10c00005 	stb	r3,0(r2)
   40324:	e0bfb803 	ldbu	r2,-288(fp)
   40328:	10800044 	addi	r2,r2,1
   4032c:	e0bfb805 	stb	r2,-288(fp)
		filename[out++] = 'j';
   40330:	e0bfb803 	ldbu	r2,-288(fp)
   40334:	e0ffce04 	addi	r3,fp,-200
   40338:	1885883a 	add	r2,r3,r2
   4033c:	00c01a84 	movi	r3,106
   40340:	10c00005 	stb	r3,0(r2)
   40344:	e0bfb803 	ldbu	r2,-288(fp)
   40348:	10800044 	addi	r2,r2,1
   4034c:	e0bfb805 	stb	r2,-288(fp)
		filename[out++] = 'p';
   40350:	e0bfb803 	ldbu	r2,-288(fp)
   40354:	e0ffce04 	addi	r3,fp,-200
   40358:	1885883a 	add	r2,r3,r2
   4035c:	00c01c04 	movi	r3,112
   40360:	10c00005 	stb	r3,0(r2)
   40364:	e0bfb803 	ldbu	r2,-288(fp)
   40368:	10800044 	addi	r2,r2,1
   4036c:	e0bfb805 	stb	r2,-288(fp)
		filename[out++] = 'g';
   40370:	e0bfb803 	ldbu	r2,-288(fp)
   40374:	e0ffce04 	addi	r3,fp,-200
   40378:	1885883a 	add	r2,r3,r2
   4037c:	00c019c4 	movi	r3,103
   40380:	10c00005 	stb	r3,0(r2)
   40384:	e0bfb803 	ldbu	r2,-288(fp)
   40388:	10800044 	addi	r2,r2,1
   4038c:	e0bfb805 	stb	r2,-288(fp)
		filename[out] = '\0';
   40390:	e0bfb803 	ldbu	r2,-288(fp)
   40394:	e0ffce04 	addi	r3,fp,-200
   40398:	1885883a 	add	r2,r3,r2
   4039c:	10000005 	stb	zero,0(r2)

		char input_file_full[150];
		strcpy(input_file_full, file_system);
   403a0:	e0ffda84 	addi	r3,fp,-150
   403a4:	e0bfba04 	addi	r2,fp,-280
   403a8:	1809883a 	mov	r4,r3
   403ac:	100b883a 	mov	r5,r2
   403b0:	0042a840 	call	42a84 <strcpy>
		strcat(input_file_full, filename);
   403b4:	e0ffda84 	addi	r3,fp,-150
   403b8:	e0bfce04 	addi	r2,fp,-200
   403bc:	1809883a 	mov	r4,r3
   403c0:	100b883a 	mov	r5,r2
   403c4:	00429ec0 	call	429ec <strcat>

		fprintf(stdout, "\nOutput file: %s\n", input_file_full);
   403c8:	00800174 	movhi	r2,5
   403cc:	10bf4904 	addi	r2,r2,-732
   403d0:	10800017 	ldw	r2,0(r2)
   403d4:	10c00217 	ldw	r3,8(r2)
   403d8:	e0bfda84 	addi	r2,fp,-150
   403dc:	1809883a 	mov	r4,r3
   403e0:	01400174 	movhi	r5,5
   403e4:	2977ad04 	addi	r5,r5,-8524
   403e8:	100d883a 	mov	r6,r2
   403ec:	0040dec0 	call	40dec <fprintf>

		fptr = fopen(input_file_full, "wb");
   403f0:	e0bfda84 	addi	r2,fp,-150
   403f4:	1009883a 	mov	r4,r2
   403f8:	01400174 	movhi	r5,5
   403fc:	2977b204 	addi	r5,r5,-8504
   40400:	0040da80 	call	40da8 <fopen>
   40404:	e0bfb915 	stw	r2,-284(fp)

		if (fptr == NULL)
   40408:	e0bfb917 	ldw	r2,-284(fp)
   4040c:	1000051e 	bne	r2,zero,40424 <main+0x230>
		{
			printf("Save File Open Error!\n");
   40410:	01000174 	movhi	r4,5
   40414:	2137b304 	addi	r4,r4,-8500
   40418:	004262c0 	call	4262c <puts>
   4041c:	00001906 	br	40484 <main+0x290>
				fputc(out, fptr);

				if (out == 0xD9)
					break;
			}
		}
   40420:	0001883a 	nop
		}

		while (1)
		{

			out = (UINT8)RECV2();
   40424:	00405e80 	call	405e8 <RECV2>
   40428:	e0bfb805 	stb	r2,-288(fp)

			fputc(out, fptr);
   4042c:	e0bfb803 	ldbu	r2,-288(fp)
   40430:	1009883a 	mov	r4,r2
   40434:	e17fb917 	ldw	r5,-284(fp)
   40438:	0040e540 	call	40e54 <fputc>
			if (out == 0xFF)
   4043c:	e0bfb803 	ldbu	r2,-288(fp)
   40440:	10803fd8 	cmpnei	r2,r2,255
   40444:	103ff61e 	bne	r2,zero,40420 <main+0x22c>
			{
				out = (UINT8)RECV2();
   40448:	00405e80 	call	405e8 <RECV2>
   4044c:	e0bfb805 	stb	r2,-288(fp)
				fputc(out, fptr);
   40450:	e0bfb803 	ldbu	r2,-288(fp)
   40454:	1009883a 	mov	r4,r2
   40458:	e17fb917 	ldw	r5,-284(fp)
   4045c:	0040e540 	call	40e54 <fputc>

				if (out == 0xD9)
   40460:	e0bfb803 	ldbu	r2,-288(fp)
   40464:	10803658 	cmpnei	r2,r2,217
   40468:	103fed1e 	bne	r2,zero,40420 <main+0x22c>
					break;
   4046c:	0001883a 	nop
			}
		}

		fclose(fptr);
   40470:	e13fb917 	ldw	r4,-284(fp)
   40474:	00407600 	call	40760 <fclose>
		printf("\n Done !\n");
   40478:	01000174 	movhi	r4,5
   4047c:	2137b904 	addi	r4,r4,-8476
   40480:	004262c0 	call	4262c <puts>
		break;
	}

	return 0;
   40484:	0005883a 	mov	r2,zero
}
   40488:	e037883a 	mov	sp,fp
   4048c:	dfc00217 	ldw	ra,8(sp)
   40490:	df000117 	ldw	fp,4(sp)
   40494:	dc000017 	ldw	r16,0(sp)
   40498:	dec00304 	addi	sp,sp,12
   4049c:	f800283a 	ret

000404a0 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   404a0:	defffa04 	addi	sp,sp,-24
   404a4:	dfc00515 	stw	ra,20(sp)
   404a8:	df000415 	stw	fp,16(sp)
   404ac:	df000404 	addi	fp,sp,16
   404b0:	e13ffc15 	stw	r4,-16(fp)
   404b4:	e17ffd15 	stw	r5,-12(fp)
   404b8:	e1bffe15 	stw	r6,-8(fp)
   404bc:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   404c0:	0001883a 	nop
   404c4:	e0bffe17 	ldw	r2,-8(fp)
   404c8:	1009883a 	mov	r4,r2
   404cc:	01400044 	movi	r5,1
   404d0:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   404d4:	103ffb1e 	bne	r2,zero,404c4 <enqueueINT32+0x24>
	{}

    if (INIT_USAGE_ENQ == 0){
   404d8:	d0a6f117 	ldw	r2,-25660(gp)
   404dc:	1000051e 	bne	r2,zero,404f4 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   404e0:	00800044 	movi	r2,1
   404e4:	d0a6f115 	stw	r2,-25660(gp)
        printf("First time using enqueueINT32\n");
   404e8:	01000174 	movhi	r4,5
   404ec:	2137bc04 	addi	r4,r4,-8464
   404f0:	004262c0 	call	4262c <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   404f4:	e0bffc17 	ldw	r2,-16(fp)
   404f8:	1009883a 	mov	r4,r2
   404fc:	e0bffe17 	ldw	r2,-8(fp)
   40500:	1007883a 	mov	r3,r2
   40504:	e0bfff17 	ldw	r2,-4(fp)
   40508:	180b883a 	mov	r5,r3
   4050c:	100d883a 	mov	r6,r2
   40510:	004bb900 	call	4bb90 <altera_avalon_fifo_write_fifo>
}
   40514:	e037883a 	mov	sp,fp
   40518:	dfc00117 	ldw	ra,4(sp)
   4051c:	df000017 	ldw	fp,0(sp)
   40520:	dec00204 	addi	sp,sp,8
   40524:	f800283a 	ret

00040528 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   40528:	defffa04 	addi	sp,sp,-24
   4052c:	dfc00515 	stw	ra,20(sp)
   40530:	df000415 	stw	fp,16(sp)
   40534:	df000404 	addi	fp,sp,16
   40538:	e13ffd15 	stw	r4,-12(fp)
   4053c:	e17ffe15 	stw	r5,-8(fp)
   40540:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   40544:	0001883a 	nop
   40548:	e0bfff17 	ldw	r2,-4(fp)
   4054c:	1009883a 	mov	r4,r2
   40550:	01400084 	movi	r5,2
   40554:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   40558:	103ffb1e 	bne	r2,zero,40548 <dequeueINT32+0x20>
	{}

    if (INIT_USAGE_DEQ == 0){
   4055c:	d0a6f217 	ldw	r2,-25656(gp)
   40560:	1000051e 	bne	r2,zero,40578 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   40564:	00800044 	movi	r2,1
   40568:	d0a6f215 	stw	r2,-25656(gp)
        printf("First time using dequeueINT32\n");
   4056c:	01000174 	movhi	r4,5
   40570:	2137c404 	addi	r4,r4,-8432
   40574:	004262c0 	call	4262c <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   40578:	e0bffe17 	ldw	r2,-8(fp)
   4057c:	1007883a 	mov	r3,r2
   40580:	e0bfff17 	ldw	r2,-4(fp)
   40584:	1809883a 	mov	r4,r3
   40588:	100b883a 	mov	r5,r2
   4058c:	004bc540 	call	4bc54 <altera_avalon_fifo_read_fifo>
   40590:	e0bffc15 	stw	r2,-16(fp)

	return data;
   40594:	e0bffc17 	ldw	r2,-16(fp)
}
   40598:	e037883a 	mov	sp,fp
   4059c:	dfc00117 	ldw	ra,4(sp)
   405a0:	df000017 	ldw	fp,0(sp)
   405a4:	dec00204 	addi	sp,sp,8
   405a8:	f800283a 	ret

000405ac <RECV1>:
//#include <stdlib.h>

#include "q_mem_obj_def.h"

int RECV1()
{
   405ac:	defffe04 	addi	sp,sp,-8
   405b0:	dfc00115 	stw	ra,4(sp)
   405b4:	df000015 	stw	fp,0(sp)
   405b8:	d839883a 	mov	fp,sp

    return dequeueINT32(q6);
   405bc:	00800174 	movhi	r2,5
   405c0:	10b8a804 	addi	r2,r2,-7520
   405c4:	11000017 	ldw	r4,0(r2)
   405c8:	11400117 	ldw	r5,4(r2)
   405cc:	11800217 	ldw	r6,8(r2)
   405d0:	00405280 	call	40528 <dequeueINT32>
}
   405d4:	e037883a 	mov	sp,fp
   405d8:	dfc00117 	ldw	ra,4(sp)
   405dc:	df000017 	ldw	fp,0(sp)
   405e0:	dec00204 	addi	sp,sp,8
   405e4:	f800283a 	ret

000405e8 <RECV2>:

int RECV2()
{
   405e8:	defffe04 	addi	sp,sp,-8
   405ec:	dfc00115 	stw	ra,4(sp)
   405f0:	df000015 	stw	fp,0(sp)
   405f4:	d839883a 	mov	fp,sp

    return dequeueINT32(q1e);
   405f8:	00800174 	movhi	r2,5
   405fc:	10b8b404 	addi	r2,r2,-7472
   40600:	11000017 	ldw	r4,0(r2)
   40604:	11400117 	ldw	r5,4(r2)
   40608:	11800217 	ldw	r6,8(r2)
   4060c:	00405280 	call	40528 <dequeueINT32>
}
   40610:	e037883a 	mov	sp,fp
   40614:	dfc00117 	ldw	ra,4(sp)
   40618:	df000017 	ldw	fp,0(sp)
   4061c:	dec00204 	addi	sp,sp,8
   40620:	f800283a 	ret

00040624 <_fclose_r>:
   40624:	defffc04 	addi	sp,sp,-16
   40628:	dc400115 	stw	r17,4(sp)
   4062c:	dc000015 	stw	r16,0(sp)
   40630:	dfc00315 	stw	ra,12(sp)
   40634:	dc800215 	stw	r18,8(sp)
   40638:	2821883a 	mov	r16,r5
   4063c:	2023883a 	mov	r17,r4
   40640:	28003426 	beq	r5,zero,40714 <_fclose_r+0xf0>
   40644:	0040c380 	call	40c38 <__sfp_lock_acquire>
   40648:	88000226 	beq	r17,zero,40654 <_fclose_r+0x30>
   4064c:	88800e17 	ldw	r2,56(r17)
   40650:	10003826 	beq	r2,zero,40734 <_fclose_r+0x110>
   40654:	8080030f 	ldh	r2,12(r16)
   40658:	10002526 	beq	r2,zero,406f0 <_fclose_r+0xcc>
   4065c:	8809883a 	mov	r4,r17
   40660:	800b883a 	mov	r5,r16
   40664:	00407740 	call	40774 <_fflush_r>
   40668:	1025883a 	mov	r18,r2
   4066c:	80800b17 	ldw	r2,44(r16)
   40670:	10000426 	beq	r2,zero,40684 <_fclose_r+0x60>
   40674:	81400717 	ldw	r5,28(r16)
   40678:	8809883a 	mov	r4,r17
   4067c:	103ee83a 	callr	r2
   40680:	10003516 	blt	r2,zero,40758 <_fclose_r+0x134>
   40684:	8080030b 	ldhu	r2,12(r16)
   40688:	1080200c 	andi	r2,r2,128
   4068c:	10bfffcc 	andi	r2,r2,65535
   40690:	10a0001c 	xori	r2,r2,32768
   40694:	10a00004 	addi	r2,r2,-32768
   40698:	10002b1e 	bne	r2,zero,40748 <_fclose_r+0x124>
   4069c:	81400c17 	ldw	r5,48(r16)
   406a0:	28000526 	beq	r5,zero,406b8 <_fclose_r+0x94>
   406a4:	80801004 	addi	r2,r16,64
   406a8:	28800226 	beq	r5,r2,406b4 <_fclose_r+0x90>
   406ac:	8809883a 	mov	r4,r17
   406b0:	0040ff00 	call	40ff0 <_free_r>
   406b4:	80000c15 	stw	zero,48(r16)
   406b8:	81401117 	ldw	r5,68(r16)
   406bc:	28000326 	beq	r5,zero,406cc <_fclose_r+0xa8>
   406c0:	8809883a 	mov	r4,r17
   406c4:	0040ff00 	call	40ff0 <_free_r>
   406c8:	80001115 	stw	zero,68(r16)
   406cc:	8000030d 	sth	zero,12(r16)
   406d0:	0040c3c0 	call	40c3c <__sfp_lock_release>
   406d4:	9005883a 	mov	r2,r18
   406d8:	dfc00317 	ldw	ra,12(sp)
   406dc:	dc800217 	ldw	r18,8(sp)
   406e0:	dc400117 	ldw	r17,4(sp)
   406e4:	dc000017 	ldw	r16,0(sp)
   406e8:	dec00404 	addi	sp,sp,16
   406ec:	f800283a 	ret
   406f0:	0040c3c0 	call	40c3c <__sfp_lock_release>
   406f4:	0025883a 	mov	r18,zero
   406f8:	9005883a 	mov	r2,r18
   406fc:	dfc00317 	ldw	ra,12(sp)
   40700:	dc800217 	ldw	r18,8(sp)
   40704:	dc400117 	ldw	r17,4(sp)
   40708:	dc000017 	ldw	r16,0(sp)
   4070c:	dec00404 	addi	sp,sp,16
   40710:	f800283a 	ret
   40714:	0025883a 	mov	r18,zero
   40718:	9005883a 	mov	r2,r18
   4071c:	dfc00317 	ldw	ra,12(sp)
   40720:	dc800217 	ldw	r18,8(sp)
   40724:	dc400117 	ldw	r17,4(sp)
   40728:	dc000017 	ldw	r16,0(sp)
   4072c:	dec00404 	addi	sp,sp,16
   40730:	f800283a 	ret
   40734:	8809883a 	mov	r4,r17
   40738:	0040a300 	call	40a30 <__sinit>
   4073c:	8080030f 	ldh	r2,12(r16)
   40740:	103fc61e 	bne	r2,zero,4065c <_fclose_r+0x38>
   40744:	003fea06 	br	406f0 <_fclose_r+0xcc>
   40748:	81400417 	ldw	r5,16(r16)
   4074c:	8809883a 	mov	r4,r17
   40750:	0040ff00 	call	40ff0 <_free_r>
   40754:	003fd106 	br	4069c <_fclose_r+0x78>
   40758:	04bfffc4 	movi	r18,-1
   4075c:	003fc906 	br	40684 <_fclose_r+0x60>

00040760 <fclose>:
   40760:	00800174 	movhi	r2,5
   40764:	10bf4904 	addi	r2,r2,-732
   40768:	200b883a 	mov	r5,r4
   4076c:	11000017 	ldw	r4,0(r2)
   40770:	00406241 	jmpi	40624 <_fclose_r>

00040774 <_fflush_r>:
   40774:	defffb04 	addi	sp,sp,-20
   40778:	dcc00315 	stw	r19,12(sp)
   4077c:	dc400115 	stw	r17,4(sp)
   40780:	dfc00415 	stw	ra,16(sp)
   40784:	dc800215 	stw	r18,8(sp)
   40788:	dc000015 	stw	r16,0(sp)
   4078c:	2027883a 	mov	r19,r4
   40790:	2823883a 	mov	r17,r5
   40794:	20000226 	beq	r4,zero,407a0 <_fflush_r+0x2c>
   40798:	20800e17 	ldw	r2,56(r4)
   4079c:	10005726 	beq	r2,zero,408fc <_fflush_r+0x188>
   407a0:	8880030b 	ldhu	r2,12(r17)
   407a4:	10c0020c 	andi	r3,r2,8
   407a8:	18ffffcc 	andi	r3,r3,65535
   407ac:	18e0001c 	xori	r3,r3,32768
   407b0:	18e00004 	addi	r3,r3,-32768
   407b4:	1800311e 	bne	r3,zero,4087c <_fflush_r+0x108>
   407b8:	89000117 	ldw	r4,4(r17)
   407bc:	10c20014 	ori	r3,r2,2048
   407c0:	88c0030d 	sth	r3,12(r17)
   407c4:	180b883a 	mov	r5,r3
   407c8:	0100520e 	bge	zero,r4,40914 <_fflush_r+0x1a0>
   407cc:	88c00a17 	ldw	r3,40(r17)
   407d0:	18002226 	beq	r3,zero,4085c <_fflush_r+0xe8>
   407d4:	1084000c 	andi	r2,r2,4096
   407d8:	10bfffcc 	andi	r2,r2,65535
   407dc:	10a0001c 	xori	r2,r2,32768
   407e0:	10a00004 	addi	r2,r2,-32768
   407e4:	10004e26 	beq	r2,zero,40920 <_fflush_r+0x1ac>
   407e8:	8c001417 	ldw	r16,80(r17)
   407ec:	2940010c 	andi	r5,r5,4
   407f0:	297fffcc 	andi	r5,r5,65535
   407f4:	2960001c 	xori	r5,r5,32768
   407f8:	29600004 	addi	r5,r5,-32768
   407fc:	28000626 	beq	r5,zero,40818 <_fflush_r+0xa4>
   40800:	89000117 	ldw	r4,4(r17)
   40804:	88800c17 	ldw	r2,48(r17)
   40808:	8121c83a 	sub	r16,r16,r4
   4080c:	10000226 	beq	r2,zero,40818 <_fflush_r+0xa4>
   40810:	88800f17 	ldw	r2,60(r17)
   40814:	80a1c83a 	sub	r16,r16,r2
   40818:	89400717 	ldw	r5,28(r17)
   4081c:	9809883a 	mov	r4,r19
   40820:	800d883a 	mov	r6,r16
   40824:	000f883a 	mov	r7,zero
   40828:	183ee83a 	callr	r3
   4082c:	8080281e 	bne	r16,r2,408d0 <_fflush_r+0x15c>
   40830:	8880030b 	ldhu	r2,12(r17)
   40834:	88c00417 	ldw	r3,16(r17)
   40838:	88000115 	stw	zero,4(r17)
   4083c:	113dffcc 	andi	r4,r2,63487
   40840:	1084000c 	andi	r2,r2,4096
   40844:	10bfffcc 	andi	r2,r2,65535
   40848:	10a0001c 	xori	r2,r2,32768
   4084c:	8900030d 	sth	r4,12(r17)
   40850:	88c00015 	stw	r3,0(r17)
   40854:	10a00004 	addi	r2,r2,-32768
   40858:	10002c1e 	bne	r2,zero,4090c <_fflush_r+0x198>
   4085c:	0005883a 	mov	r2,zero
   40860:	dfc00417 	ldw	ra,16(sp)
   40864:	dcc00317 	ldw	r19,12(sp)
   40868:	dc800217 	ldw	r18,8(sp)
   4086c:	dc400117 	ldw	r17,4(sp)
   40870:	dc000017 	ldw	r16,0(sp)
   40874:	dec00504 	addi	sp,sp,20
   40878:	f800283a 	ret
   4087c:	8c800417 	ldw	r18,16(r17)
   40880:	903ff626 	beq	r18,zero,4085c <_fflush_r+0xe8>
   40884:	8c000017 	ldw	r16,0(r17)
   40888:	108000cc 	andi	r2,r2,3
   4088c:	8c800015 	stw	r18,0(r17)
   40890:	84a1c83a 	sub	r16,r16,r18
   40894:	10001b1e 	bne	r2,zero,40904 <_fflush_r+0x190>
   40898:	88800517 	ldw	r2,20(r17)
   4089c:	88800215 	stw	r2,8(r17)
   408a0:	04000316 	blt	zero,r16,408b0 <_fflush_r+0x13c>
   408a4:	003fed06 	br	4085c <_fflush_r+0xe8>
   408a8:	90a5883a 	add	r18,r18,r2
   408ac:	043feb0e 	bge	zero,r16,4085c <_fflush_r+0xe8>
   408b0:	88800917 	ldw	r2,36(r17)
   408b4:	89400717 	ldw	r5,28(r17)
   408b8:	800f883a 	mov	r7,r16
   408bc:	900d883a 	mov	r6,r18
   408c0:	9809883a 	mov	r4,r19
   408c4:	103ee83a 	callr	r2
   408c8:	80a1c83a 	sub	r16,r16,r2
   408cc:	00bff616 	blt	zero,r2,408a8 <_fflush_r+0x134>
   408d0:	88c0030b 	ldhu	r3,12(r17)
   408d4:	00bfffc4 	movi	r2,-1
   408d8:	18c01014 	ori	r3,r3,64
   408dc:	88c0030d 	sth	r3,12(r17)
   408e0:	dfc00417 	ldw	ra,16(sp)
   408e4:	dcc00317 	ldw	r19,12(sp)
   408e8:	dc800217 	ldw	r18,8(sp)
   408ec:	dc400117 	ldw	r17,4(sp)
   408f0:	dc000017 	ldw	r16,0(sp)
   408f4:	dec00504 	addi	sp,sp,20
   408f8:	f800283a 	ret
   408fc:	0040a300 	call	40a30 <__sinit>
   40900:	003fa706 	br	407a0 <_fflush_r+0x2c>
   40904:	0005883a 	mov	r2,zero
   40908:	003fe406 	br	4089c <_fflush_r+0x128>
   4090c:	8c001415 	stw	r16,80(r17)
   40910:	003fd206 	br	4085c <_fflush_r+0xe8>
   40914:	88c00f17 	ldw	r3,60(r17)
   40918:	00ffac16 	blt	zero,r3,407cc <_fflush_r+0x58>
   4091c:	003fcf06 	br	4085c <_fflush_r+0xe8>
   40920:	89400717 	ldw	r5,28(r17)
   40924:	9809883a 	mov	r4,r19
   40928:	000d883a 	mov	r6,zero
   4092c:	01c00044 	movi	r7,1
   40930:	183ee83a 	callr	r3
   40934:	1021883a 	mov	r16,r2
   40938:	00bfffc4 	movi	r2,-1
   4093c:	80800326 	beq	r16,r2,4094c <_fflush_r+0x1d8>
   40940:	8940030b 	ldhu	r5,12(r17)
   40944:	88c00a17 	ldw	r3,40(r17)
   40948:	003fa806 	br	407ec <_fflush_r+0x78>
   4094c:	98c00017 	ldw	r3,0(r19)
   40950:	00800744 	movi	r2,29
   40954:	18bfde1e 	bne	r3,r2,408d0 <_fflush_r+0x15c>
   40958:	003fc006 	br	4085c <_fflush_r+0xe8>

0004095c <fflush>:
   4095c:	200b883a 	mov	r5,r4
   40960:	20000426 	beq	r4,zero,40974 <fflush+0x18>
   40964:	00800174 	movhi	r2,5
   40968:	10bf4904 	addi	r2,r2,-732
   4096c:	11000017 	ldw	r4,0(r2)
   40970:	00407741 	jmpi	40774 <_fflush_r>
   40974:	00800174 	movhi	r2,5
   40978:	10bf4804 	addi	r2,r2,-736
   4097c:	11000017 	ldw	r4,0(r2)
   40980:	01400134 	movhi	r5,4
   40984:	2941dd04 	addi	r5,r5,1908
   40988:	00418681 	jmpi	41868 <_fwalk_reent>

0004098c <__fp_lock>:
   4098c:	0005883a 	mov	r2,zero
   40990:	f800283a 	ret

00040994 <__fp_unlock>:
   40994:	0005883a 	mov	r2,zero
   40998:	f800283a 	ret

0004099c <_cleanup_r>:
   4099c:	01400134 	movhi	r5,4
   409a0:	2941d804 	addi	r5,r5,1888
   409a4:	00417c01 	jmpi	417c0 <_fwalk>

000409a8 <__sfmoreglue>:
   409a8:	defffc04 	addi	sp,sp,-16
   409ac:	dc800215 	stw	r18,8(sp)
   409b0:	2825883a 	mov	r18,r5
   409b4:	dc000015 	stw	r16,0(sp)
   409b8:	01401704 	movi	r5,92
   409bc:	2021883a 	mov	r16,r4
   409c0:	9009883a 	mov	r4,r18
   409c4:	dfc00315 	stw	ra,12(sp)
   409c8:	dc400115 	stw	r17,4(sp)
   409cc:	004a4cc0 	call	4a4cc <__mulsi3>
   409d0:	8009883a 	mov	r4,r16
   409d4:	11400304 	addi	r5,r2,12
   409d8:	1023883a 	mov	r17,r2
   409dc:	0041ac80 	call	41ac8 <_malloc_r>
   409e0:	1021883a 	mov	r16,r2
   409e4:	10000726 	beq	r2,zero,40a04 <__sfmoreglue+0x5c>
   409e8:	11000304 	addi	r4,r2,12
   409ec:	10000015 	stw	zero,0(r2)
   409f0:	14800115 	stw	r18,4(r2)
   409f4:	11000215 	stw	r4,8(r2)
   409f8:	000b883a 	mov	r5,zero
   409fc:	880d883a 	mov	r6,r17
   40a00:	004224c0 	call	4224c <memset>
   40a04:	8005883a 	mov	r2,r16
   40a08:	dfc00317 	ldw	ra,12(sp)
   40a0c:	dc800217 	ldw	r18,8(sp)
   40a10:	dc400117 	ldw	r17,4(sp)
   40a14:	dc000017 	ldw	r16,0(sp)
   40a18:	dec00404 	addi	sp,sp,16
   40a1c:	f800283a 	ret

00040a20 <_cleanup>:
   40a20:	00800174 	movhi	r2,5
   40a24:	10bf4804 	addi	r2,r2,-736
   40a28:	11000017 	ldw	r4,0(r2)
   40a2c:	004099c1 	jmpi	4099c <_cleanup_r>

00040a30 <__sinit>:
   40a30:	20800e17 	ldw	r2,56(r4)
   40a34:	1000401e 	bne	r2,zero,40b38 <__sinit+0x108>
   40a38:	21400117 	ldw	r5,4(r4)
   40a3c:	01800134 	movhi	r6,4
   40a40:	31826704 	addi	r6,r6,2460
   40a44:	20c00217 	ldw	r3,8(r4)
   40a48:	21800f15 	stw	r6,60(r4)
   40a4c:	2080bb04 	addi	r2,r4,748
   40a50:	02400044 	movi	r9,1
   40a54:	018000c4 	movi	r6,3
   40a58:	2180b915 	stw	r6,740(r4)
   40a5c:	2080ba15 	stw	r2,744(r4)
   40a60:	22400e15 	stw	r9,56(r4)
   40a64:	20800317 	ldw	r2,12(r4)
   40a68:	2000b815 	stw	zero,736(r4)
   40a6c:	02000134 	movhi	r8,4
   40a70:	420a2b04 	addi	r8,r8,10412
   40a74:	01c00134 	movhi	r7,4
   40a78:	39ca4004 	addi	r7,r7,10496
   40a7c:	01800134 	movhi	r6,4
   40a80:	318a6204 	addi	r6,r6,10632
   40a84:	01000134 	movhi	r4,4
   40a88:	210a7904 	addi	r4,r4,10724
   40a8c:	02800104 	movi	r10,4
   40a90:	28000015 	stw	zero,0(r5)
   40a94:	28000115 	stw	zero,4(r5)
   40a98:	28000215 	stw	zero,8(r5)
   40a9c:	2a80030d 	sth	r10,12(r5)
   40aa0:	2800038d 	sth	zero,14(r5)
   40aa4:	28000415 	stw	zero,16(r5)
   40aa8:	28000515 	stw	zero,20(r5)
   40aac:	28000615 	stw	zero,24(r5)
   40ab0:	29400715 	stw	r5,28(r5)
   40ab4:	2a000815 	stw	r8,32(r5)
   40ab8:	29c00915 	stw	r7,36(r5)
   40abc:	29800a15 	stw	r6,40(r5)
   40ac0:	29000b15 	stw	r4,44(r5)
   40ac4:	01400284 	movi	r5,10
   40ac8:	18000015 	stw	zero,0(r3)
   40acc:	18000115 	stw	zero,4(r3)
   40ad0:	18000215 	stw	zero,8(r3)
   40ad4:	1940030d 	sth	r5,12(r3)
   40ad8:	1a40038d 	sth	r9,14(r3)
   40adc:	18000415 	stw	zero,16(r3)
   40ae0:	18000515 	stw	zero,20(r3)
   40ae4:	18000615 	stw	zero,24(r3)
   40ae8:	18c00715 	stw	r3,28(r3)
   40aec:	1a000815 	stw	r8,32(r3)
   40af0:	19c00915 	stw	r7,36(r3)
   40af4:	19800a15 	stw	r6,40(r3)
   40af8:	19000b15 	stw	r4,44(r3)
   40afc:	00c00484 	movi	r3,18
   40b00:	10c0030d 	sth	r3,12(r2)
   40b04:	00c00084 	movi	r3,2
   40b08:	10000015 	stw	zero,0(r2)
   40b0c:	10000115 	stw	zero,4(r2)
   40b10:	10000215 	stw	zero,8(r2)
   40b14:	10c0038d 	sth	r3,14(r2)
   40b18:	10000415 	stw	zero,16(r2)
   40b1c:	10000515 	stw	zero,20(r2)
   40b20:	10000615 	stw	zero,24(r2)
   40b24:	10800715 	stw	r2,28(r2)
   40b28:	12000815 	stw	r8,32(r2)
   40b2c:	11c00915 	stw	r7,36(r2)
   40b30:	11800a15 	stw	r6,40(r2)
   40b34:	11000b15 	stw	r4,44(r2)
   40b38:	f800283a 	ret

00040b3c <__sfp>:
   40b3c:	defffc04 	addi	sp,sp,-16
   40b40:	00800174 	movhi	r2,5
   40b44:	10bf4804 	addi	r2,r2,-736
   40b48:	dc400115 	stw	r17,4(sp)
   40b4c:	14400017 	ldw	r17,0(r2)
   40b50:	dc800215 	stw	r18,8(sp)
   40b54:	dfc00315 	stw	ra,12(sp)
   40b58:	88800e17 	ldw	r2,56(r17)
   40b5c:	dc000015 	stw	r16,0(sp)
   40b60:	2025883a 	mov	r18,r4
   40b64:	10002826 	beq	r2,zero,40c08 <__sfp+0xcc>
   40b68:	8c40b804 	addi	r17,r17,736
   40b6c:	043fffc4 	movi	r16,-1
   40b70:	89400117 	ldw	r5,4(r17)
   40b74:	88800217 	ldw	r2,8(r17)
   40b78:	297fffc4 	addi	r5,r5,-1
   40b7c:	28000a16 	blt	r5,zero,40ba8 <__sfp+0x6c>
   40b80:	10c0030f 	ldh	r3,12(r2)
   40b84:	18000c26 	beq	r3,zero,40bb8 <__sfp+0x7c>
   40b88:	10c01a04 	addi	r3,r2,104
   40b8c:	00000206 	br	40b98 <__sfp+0x5c>
   40b90:	19bfe90f 	ldh	r6,-92(r3)
   40b94:	30000826 	beq	r6,zero,40bb8 <__sfp+0x7c>
   40b98:	297fffc4 	addi	r5,r5,-1
   40b9c:	18bffd04 	addi	r2,r3,-12
   40ba0:	18c01704 	addi	r3,r3,92
   40ba4:	2c3ffa1e 	bne	r5,r16,40b90 <__sfp+0x54>
   40ba8:	88800017 	ldw	r2,0(r17)
   40bac:	10001926 	beq	r2,zero,40c14 <__sfp+0xd8>
   40bb0:	1023883a 	mov	r17,r2
   40bb4:	003fee06 	br	40b70 <__sfp+0x34>
   40bb8:	00ffffc4 	movi	r3,-1
   40bbc:	10c0038d 	sth	r3,14(r2)
   40bc0:	00c00044 	movi	r3,1
   40bc4:	10c0030d 	sth	r3,12(r2)
   40bc8:	10000015 	stw	zero,0(r2)
   40bcc:	10000215 	stw	zero,8(r2)
   40bd0:	10000115 	stw	zero,4(r2)
   40bd4:	10000415 	stw	zero,16(r2)
   40bd8:	10000515 	stw	zero,20(r2)
   40bdc:	10000615 	stw	zero,24(r2)
   40be0:	10000c15 	stw	zero,48(r2)
   40be4:	10000d15 	stw	zero,52(r2)
   40be8:	10001115 	stw	zero,68(r2)
   40bec:	10001215 	stw	zero,72(r2)
   40bf0:	dfc00317 	ldw	ra,12(sp)
   40bf4:	dc800217 	ldw	r18,8(sp)
   40bf8:	dc400117 	ldw	r17,4(sp)
   40bfc:	dc000017 	ldw	r16,0(sp)
   40c00:	dec00404 	addi	sp,sp,16
   40c04:	f800283a 	ret
   40c08:	8809883a 	mov	r4,r17
   40c0c:	0040a300 	call	40a30 <__sinit>
   40c10:	003fd506 	br	40b68 <__sfp+0x2c>
   40c14:	9009883a 	mov	r4,r18
   40c18:	01400104 	movi	r5,4
   40c1c:	00409a80 	call	409a8 <__sfmoreglue>
   40c20:	88800015 	stw	r2,0(r17)
   40c24:	103fe21e 	bne	r2,zero,40bb0 <__sfp+0x74>
   40c28:	00800304 	movi	r2,12
   40c2c:	90800015 	stw	r2,0(r18)
   40c30:	0005883a 	mov	r2,zero
   40c34:	003fee06 	br	40bf0 <__sfp+0xb4>

00040c38 <__sfp_lock_acquire>:
   40c38:	f800283a 	ret

00040c3c <__sfp_lock_release>:
   40c3c:	f800283a 	ret

00040c40 <__sinit_lock_acquire>:
   40c40:	f800283a 	ret

00040c44 <__sinit_lock_release>:
   40c44:	f800283a 	ret

00040c48 <__fp_lock_all>:
   40c48:	00800174 	movhi	r2,5
   40c4c:	10bf4904 	addi	r2,r2,-732
   40c50:	11000017 	ldw	r4,0(r2)
   40c54:	01400134 	movhi	r5,4
   40c58:	29426304 	addi	r5,r5,2444
   40c5c:	00417c01 	jmpi	417c0 <_fwalk>

00040c60 <__fp_unlock_all>:
   40c60:	00800174 	movhi	r2,5
   40c64:	10bf4904 	addi	r2,r2,-732
   40c68:	11000017 	ldw	r4,0(r2)
   40c6c:	01400134 	movhi	r5,4
   40c70:	29426504 	addi	r5,r5,2452
   40c74:	00417c01 	jmpi	417c0 <_fwalk>

00040c78 <_fopen_r>:
   40c78:	defffa04 	addi	sp,sp,-24
   40c7c:	dcc00415 	stw	r19,16(sp)
   40c80:	2827883a 	mov	r19,r5
   40c84:	300b883a 	mov	r5,r6
   40c88:	d80d883a 	mov	r6,sp
   40c8c:	dc800315 	stw	r18,12(sp)
   40c90:	dc400215 	stw	r17,8(sp)
   40c94:	dfc00515 	stw	ra,20(sp)
   40c98:	dc000115 	stw	r16,4(sp)
   40c9c:	2025883a 	mov	r18,r4
   40ca0:	004666c0 	call	4666c <__sflags>
   40ca4:	1023883a 	mov	r17,r2
   40ca8:	10002926 	beq	r2,zero,40d50 <_fopen_r+0xd8>
   40cac:	9009883a 	mov	r4,r18
   40cb0:	0040b3c0 	call	40b3c <__sfp>
   40cb4:	1021883a 	mov	r16,r2
   40cb8:	10002526 	beq	r2,zero,40d50 <_fopen_r+0xd8>
   40cbc:	d9800017 	ldw	r6,0(sp)
   40cc0:	9009883a 	mov	r4,r18
   40cc4:	980b883a 	mov	r5,r19
   40cc8:	01c06d84 	movi	r7,438
   40ccc:	00423280 	call	42328 <_open_r>
   40cd0:	10001c16 	blt	r2,zero,40d44 <_fopen_r+0xcc>
   40cd4:	8080038d 	sth	r2,14(r16)
   40cd8:	00800134 	movhi	r2,4
   40cdc:	108a2b04 	addi	r2,r2,10412
   40ce0:	80800815 	stw	r2,32(r16)
   40ce4:	00800134 	movhi	r2,4
   40ce8:	108a4004 	addi	r2,r2,10496
   40cec:	80800915 	stw	r2,36(r16)
   40cf0:	00800134 	movhi	r2,4
   40cf4:	108a6204 	addi	r2,r2,10632
   40cf8:	88c0400c 	andi	r3,r17,256
   40cfc:	80800a15 	stw	r2,40(r16)
   40d00:	00800134 	movhi	r2,4
   40d04:	108a7904 	addi	r2,r2,10724
   40d08:	80800b15 	stw	r2,44(r16)
   40d0c:	18bfffcc 	andi	r2,r3,65535
   40d10:	10a0001c 	xori	r2,r2,32768
   40d14:	8440030d 	sth	r17,12(r16)
   40d18:	84000715 	stw	r16,28(r16)
   40d1c:	10a00004 	addi	r2,r2,-32768
   40d20:	1000141e 	bne	r2,zero,40d74 <_fopen_r+0xfc>
   40d24:	8005883a 	mov	r2,r16
   40d28:	dfc00517 	ldw	ra,20(sp)
   40d2c:	dcc00417 	ldw	r19,16(sp)
   40d30:	dc800317 	ldw	r18,12(sp)
   40d34:	dc400217 	ldw	r17,8(sp)
   40d38:	dc000117 	ldw	r16,4(sp)
   40d3c:	dec00604 	addi	sp,sp,24
   40d40:	f800283a 	ret
   40d44:	0040c380 	call	40c38 <__sfp_lock_acquire>
   40d48:	8000030d 	sth	zero,12(r16)
   40d4c:	0040c3c0 	call	40c3c <__sfp_lock_release>
   40d50:	0021883a 	mov	r16,zero
   40d54:	8005883a 	mov	r2,r16
   40d58:	dfc00517 	ldw	ra,20(sp)
   40d5c:	dcc00417 	ldw	r19,16(sp)
   40d60:	dc800317 	ldw	r18,12(sp)
   40d64:	dc400217 	ldw	r17,8(sp)
   40d68:	dc000117 	ldw	r16,4(sp)
   40d6c:	dec00604 	addi	sp,sp,24
   40d70:	f800283a 	ret
   40d74:	9009883a 	mov	r4,r18
   40d78:	800b883a 	mov	r5,r16
   40d7c:	000d883a 	mov	r6,zero
   40d80:	01c00084 	movi	r7,2
   40d84:	00412c00 	call	412c0 <_fseek_r>
   40d88:	8005883a 	mov	r2,r16
   40d8c:	dfc00517 	ldw	ra,20(sp)
   40d90:	dcc00417 	ldw	r19,16(sp)
   40d94:	dc800317 	ldw	r18,12(sp)
   40d98:	dc400217 	ldw	r17,8(sp)
   40d9c:	dc000117 	ldw	r16,4(sp)
   40da0:	dec00604 	addi	sp,sp,24
   40da4:	f800283a 	ret

00040da8 <fopen>:
   40da8:	00c00174 	movhi	r3,5
   40dac:	18ff4904 	addi	r3,r3,-732
   40db0:	2005883a 	mov	r2,r4
   40db4:	19000017 	ldw	r4,0(r3)
   40db8:	280d883a 	mov	r6,r5
   40dbc:	100b883a 	mov	r5,r2
   40dc0:	0040c781 	jmpi	40c78 <_fopen_r>

00040dc4 <_fprintf_r>:
   40dc4:	defffe04 	addi	sp,sp,-8
   40dc8:	2809883a 	mov	r4,r5
   40dcc:	dfc00015 	stw	ra,0(sp)
   40dd0:	d9c00115 	stw	r7,4(sp)
   40dd4:	300b883a 	mov	r5,r6
   40dd8:	d9800104 	addi	r6,sp,4
   40ddc:	0044a540 	call	44a54 <__vfprintf_internal>
   40de0:	dfc00017 	ldw	ra,0(sp)
   40de4:	dec00204 	addi	sp,sp,8
   40de8:	f800283a 	ret

00040dec <fprintf>:
   40dec:	defffd04 	addi	sp,sp,-12
   40df0:	dfc00015 	stw	ra,0(sp)
   40df4:	d9800115 	stw	r6,4(sp)
   40df8:	d9c00215 	stw	r7,8(sp)
   40dfc:	d9800104 	addi	r6,sp,4
   40e00:	0044a540 	call	44a54 <__vfprintf_internal>
   40e04:	dfc00017 	ldw	ra,0(sp)
   40e08:	dec00304 	addi	sp,sp,12
   40e0c:	f800283a 	ret

00040e10 <_fputc_r>:
   40e10:	defffc04 	addi	sp,sp,-16
   40e14:	dc000215 	stw	r16,8(sp)
   40e18:	dfc00315 	stw	ra,12(sp)
   40e1c:	2021883a 	mov	r16,r4
   40e20:	20000726 	beq	r4,zero,40e40 <_fputc_r+0x30>
   40e24:	20800e17 	ldw	r2,56(r4)
   40e28:	1000051e 	bne	r2,zero,40e40 <_fputc_r+0x30>
   40e2c:	d9400015 	stw	r5,0(sp)
   40e30:	d9800115 	stw	r6,4(sp)
   40e34:	0040a300 	call	40a30 <__sinit>
   40e38:	d9800117 	ldw	r6,4(sp)
   40e3c:	d9400017 	ldw	r5,0(sp)
   40e40:	8009883a 	mov	r4,r16
   40e44:	dfc00317 	ldw	ra,12(sp)
   40e48:	dc000217 	ldw	r16,8(sp)
   40e4c:	dec00404 	addi	sp,sp,16
   40e50:	00423fc1 	jmpi	423fc <_putc_r>

00040e54 <fputc>:
   40e54:	defffc04 	addi	sp,sp,-16
   40e58:	dc000115 	stw	r16,4(sp)
   40e5c:	04000174 	movhi	r16,5
   40e60:	843f4904 	addi	r16,r16,-732
   40e64:	80800017 	ldw	r2,0(r16)
   40e68:	dc400215 	stw	r17,8(sp)
   40e6c:	dfc00315 	stw	ra,12(sp)
   40e70:	2023883a 	mov	r17,r4
   40e74:	280d883a 	mov	r6,r5
   40e78:	10000726 	beq	r2,zero,40e98 <fputc+0x44>
   40e7c:	10c00e17 	ldw	r3,56(r2)
   40e80:	1800051e 	bne	r3,zero,40e98 <fputc+0x44>
   40e84:	1009883a 	mov	r4,r2
   40e88:	d9400015 	stw	r5,0(sp)
   40e8c:	0040a300 	call	40a30 <__sinit>
   40e90:	80800017 	ldw	r2,0(r16)
   40e94:	d9800017 	ldw	r6,0(sp)
   40e98:	1009883a 	mov	r4,r2
   40e9c:	880b883a 	mov	r5,r17
   40ea0:	dfc00317 	ldw	ra,12(sp)
   40ea4:	dc400217 	ldw	r17,8(sp)
   40ea8:	dc000117 	ldw	r16,4(sp)
   40eac:	dec00404 	addi	sp,sp,16
   40eb0:	00423fc1 	jmpi	423fc <_putc_r>

00040eb4 <_malloc_trim_r>:
   40eb4:	defffb04 	addi	sp,sp,-20
   40eb8:	dcc00315 	stw	r19,12(sp)
   40ebc:	dc800215 	stw	r18,8(sp)
   40ec0:	dc400115 	stw	r17,4(sp)
   40ec4:	dc000015 	stw	r16,0(sp)
   40ec8:	2827883a 	mov	r19,r5
   40ecc:	dfc00415 	stw	ra,16(sp)
   40ed0:	04400174 	movhi	r17,5
   40ed4:	8c79b704 	addi	r17,r17,-6436
   40ed8:	2021883a 	mov	r16,r4
   40edc:	004b0f40 	call	4b0f4 <__malloc_lock>
   40ee0:	88800217 	ldw	r2,8(r17)
   40ee4:	14800117 	ldw	r18,4(r2)
   40ee8:	00bfff04 	movi	r2,-4
   40eec:	90a4703a 	and	r18,r18,r2
   40ef0:	9083fbc4 	addi	r2,r18,4079
   40ef4:	14e7c83a 	sub	r19,r2,r19
   40ef8:	9826d33a 	srli	r19,r19,12
   40efc:	0083ffc4 	movi	r2,4095
   40f00:	9cffffc4 	addi	r19,r19,-1
   40f04:	9826933a 	slli	r19,r19,12
   40f08:	14c0060e 	bge	r2,r19,40f24 <_malloc_trim_r+0x70>
   40f0c:	8009883a 	mov	r4,r16
   40f10:	000b883a 	mov	r5,zero
   40f14:	00428480 	call	42848 <_sbrk_r>
   40f18:	88c00217 	ldw	r3,8(r17)
   40f1c:	1c87883a 	add	r3,r3,r18
   40f20:	10c00a26 	beq	r2,r3,40f4c <_malloc_trim_r+0x98>
   40f24:	8009883a 	mov	r4,r16
   40f28:	004b1140 	call	4b114 <__malloc_unlock>
   40f2c:	0005883a 	mov	r2,zero
   40f30:	dfc00417 	ldw	ra,16(sp)
   40f34:	dcc00317 	ldw	r19,12(sp)
   40f38:	dc800217 	ldw	r18,8(sp)
   40f3c:	dc400117 	ldw	r17,4(sp)
   40f40:	dc000017 	ldw	r16,0(sp)
   40f44:	dec00504 	addi	sp,sp,20
   40f48:	f800283a 	ret
   40f4c:	8009883a 	mov	r4,r16
   40f50:	04cbc83a 	sub	r5,zero,r19
   40f54:	00428480 	call	42848 <_sbrk_r>
   40f58:	00ffffc4 	movi	r3,-1
   40f5c:	10c01326 	beq	r2,r3,40fac <_malloc_trim_r+0xf8>
   40f60:	00800174 	movhi	r2,5
   40f64:	10864804 	addi	r2,r2,6432
   40f68:	11000017 	ldw	r4,0(r2)
   40f6c:	88c00217 	ldw	r3,8(r17)
   40f70:	94e5c83a 	sub	r18,r18,r19
   40f74:	94800054 	ori	r18,r18,1
   40f78:	24e7c83a 	sub	r19,r4,r19
   40f7c:	1c800115 	stw	r18,4(r3)
   40f80:	8009883a 	mov	r4,r16
   40f84:	14c00015 	stw	r19,0(r2)
   40f88:	004b1140 	call	4b114 <__malloc_unlock>
   40f8c:	00800044 	movi	r2,1
   40f90:	dfc00417 	ldw	ra,16(sp)
   40f94:	dcc00317 	ldw	r19,12(sp)
   40f98:	dc800217 	ldw	r18,8(sp)
   40f9c:	dc400117 	ldw	r17,4(sp)
   40fa0:	dc000017 	ldw	r16,0(sp)
   40fa4:	dec00504 	addi	sp,sp,20
   40fa8:	f800283a 	ret
   40fac:	8009883a 	mov	r4,r16
   40fb0:	000b883a 	mov	r5,zero
   40fb4:	00428480 	call	42848 <_sbrk_r>
   40fb8:	88c00217 	ldw	r3,8(r17)
   40fbc:	014003c4 	movi	r5,15
   40fc0:	10c9c83a 	sub	r4,r2,r3
   40fc4:	293fd70e 	bge	r5,r4,40f24 <_malloc_trim_r+0x70>
   40fc8:	01400174 	movhi	r5,5
   40fcc:	297f4a04 	addi	r5,r5,-728
   40fd0:	29400017 	ldw	r5,0(r5)
   40fd4:	21000054 	ori	r4,r4,1
   40fd8:	19000115 	stw	r4,4(r3)
   40fdc:	1145c83a 	sub	r2,r2,r5
   40fe0:	01400174 	movhi	r5,5
   40fe4:	29464804 	addi	r5,r5,6432
   40fe8:	28800015 	stw	r2,0(r5)
   40fec:	003fcd06 	br	40f24 <_malloc_trim_r+0x70>

00040ff0 <_free_r>:
   40ff0:	defffd04 	addi	sp,sp,-12
   40ff4:	dc400115 	stw	r17,4(sp)
   40ff8:	dc000015 	stw	r16,0(sp)
   40ffc:	dfc00215 	stw	ra,8(sp)
   41000:	2821883a 	mov	r16,r5
   41004:	2023883a 	mov	r17,r4
   41008:	28004b26 	beq	r5,zero,41138 <_free_r+0x148>
   4100c:	004b0f40 	call	4b0f4 <__malloc_lock>
   41010:	823fff17 	ldw	r8,-4(r16)
   41014:	00bfff84 	movi	r2,-2
   41018:	81bffe04 	addi	r6,r16,-8
   4101c:	4084703a 	and	r2,r8,r2
   41020:	3087883a 	add	r3,r6,r2
   41024:	01400174 	movhi	r5,5
   41028:	2979b704 	addi	r5,r5,-6436
   4102c:	1a400117 	ldw	r9,4(r3)
   41030:	29000217 	ldw	r4,8(r5)
   41034:	01ffff04 	movi	r7,-4
   41038:	49ce703a 	and	r7,r9,r7
   4103c:	20c06526 	beq	r4,r3,411d4 <_free_r+0x1e4>
   41040:	19c00115 	stw	r7,4(r3)
   41044:	4200004c 	andi	r8,r8,1
   41048:	40003026 	beq	r8,zero,4110c <_free_r+0x11c>
   4104c:	0009883a 	mov	r4,zero
   41050:	19d1883a 	add	r8,r3,r7
   41054:	42000117 	ldw	r8,4(r8)
   41058:	4200004c 	andi	r8,r8,1
   4105c:	4000061e 	bne	r8,zero,41078 <_free_r+0x88>
   41060:	11c5883a 	add	r2,r2,r7
   41064:	19c00217 	ldw	r7,8(r3)
   41068:	20004e26 	beq	r4,zero,411a4 <_free_r+0x1b4>
   4106c:	18c00317 	ldw	r3,12(r3)
   41070:	38c00315 	stw	r3,12(r7)
   41074:	19c00215 	stw	r7,8(r3)
   41078:	11c00054 	ori	r7,r2,1
   4107c:	3087883a 	add	r3,r6,r2
   41080:	31c00115 	stw	r7,4(r6)
   41084:	18800015 	stw	r2,0(r3)
   41088:	20001a1e 	bne	r4,zero,410f4 <_free_r+0x104>
   4108c:	00c07fc4 	movi	r3,511
   41090:	18802e2e 	bgeu	r3,r2,4114c <_free_r+0x15c>
   41094:	1006d27a 	srli	r3,r2,9
   41098:	01000104 	movi	r4,4
   4109c:	20c06636 	bltu	r4,r3,41238 <_free_r+0x248>
   410a0:	1008d1ba 	srli	r4,r2,6
   410a4:	21000e04 	addi	r4,r4,56
   410a8:	210f883a 	add	r7,r4,r4
   410ac:	39cf883a 	add	r7,r7,r7
   410b0:	39cf883a 	add	r7,r7,r7
   410b4:	29cf883a 	add	r7,r5,r7
   410b8:	38c00217 	ldw	r3,8(r7)
   410bc:	01400174 	movhi	r5,5
   410c0:	2979b704 	addi	r5,r5,-6436
   410c4:	19c06126 	beq	r3,r7,4124c <_free_r+0x25c>
   410c8:	013fff04 	movi	r4,-4
   410cc:	19400117 	ldw	r5,4(r3)
   410d0:	290a703a 	and	r5,r5,r4
   410d4:	1140022e 	bgeu	r2,r5,410e0 <_free_r+0xf0>
   410d8:	18c00217 	ldw	r3,8(r3)
   410dc:	38fffb1e 	bne	r7,r3,410cc <_free_r+0xdc>
   410e0:	18800317 	ldw	r2,12(r3)
   410e4:	30800315 	stw	r2,12(r6)
   410e8:	30c00215 	stw	r3,8(r6)
   410ec:	11800215 	stw	r6,8(r2)
   410f0:	19800315 	stw	r6,12(r3)
   410f4:	8809883a 	mov	r4,r17
   410f8:	dfc00217 	ldw	ra,8(sp)
   410fc:	dc400117 	ldw	r17,4(sp)
   41100:	dc000017 	ldw	r16,0(sp)
   41104:	dec00304 	addi	sp,sp,12
   41108:	004b1141 	jmpi	4b114 <__malloc_unlock>
   4110c:	813ffe17 	ldw	r4,-8(r16)
   41110:	2a400204 	addi	r9,r5,8
   41114:	310dc83a 	sub	r6,r6,r4
   41118:	32000217 	ldw	r8,8(r6)
   4111c:	1105883a 	add	r2,r2,r4
   41120:	42404326 	beq	r8,r9,41230 <_free_r+0x240>
   41124:	32400317 	ldw	r9,12(r6)
   41128:	0009883a 	mov	r4,zero
   4112c:	42400315 	stw	r9,12(r8)
   41130:	4a000215 	stw	r8,8(r9)
   41134:	003fc606 	br	41050 <_free_r+0x60>
   41138:	dfc00217 	ldw	ra,8(sp)
   4113c:	dc400117 	ldw	r17,4(sp)
   41140:	dc000017 	ldw	r16,0(sp)
   41144:	dec00304 	addi	sp,sp,12
   41148:	f800283a 	ret
   4114c:	1004d0fa 	srli	r2,r2,3
   41150:	02000044 	movi	r8,1
   41154:	29c00117 	ldw	r7,4(r5)
   41158:	1087883a 	add	r3,r2,r2
   4115c:	18c7883a 	add	r3,r3,r3
   41160:	1005d0ba 	srai	r2,r2,2
   41164:	18c7883a 	add	r3,r3,r3
   41168:	28c7883a 	add	r3,r5,r3
   4116c:	19000217 	ldw	r4,8(r3)
   41170:	4084983a 	sll	r2,r8,r2
   41174:	30c00315 	stw	r3,12(r6)
   41178:	31000215 	stw	r4,8(r6)
   4117c:	11c4b03a 	or	r2,r2,r7
   41180:	21800315 	stw	r6,12(r4)
   41184:	8809883a 	mov	r4,r17
   41188:	28800115 	stw	r2,4(r5)
   4118c:	19800215 	stw	r6,8(r3)
   41190:	dfc00217 	ldw	ra,8(sp)
   41194:	dc400117 	ldw	r17,4(sp)
   41198:	dc000017 	ldw	r16,0(sp)
   4119c:	dec00304 	addi	sp,sp,12
   411a0:	004b1141 	jmpi	4b114 <__malloc_unlock>
   411a4:	02000174 	movhi	r8,5
   411a8:	4239b904 	addi	r8,r8,-6428
   411ac:	3a3faf1e 	bne	r7,r8,4106c <_free_r+0x7c>
   411b0:	29800515 	stw	r6,20(r5)
   411b4:	29800415 	stw	r6,16(r5)
   411b8:	11000054 	ori	r4,r2,1
   411bc:	3087883a 	add	r3,r6,r2
   411c0:	31c00315 	stw	r7,12(r6)
   411c4:	31c00215 	stw	r7,8(r6)
   411c8:	31000115 	stw	r4,4(r6)
   411cc:	18800015 	stw	r2,0(r3)
   411d0:	003fc806 	br	410f4 <_free_r+0x104>
   411d4:	4200004c 	andi	r8,r8,1
   411d8:	3885883a 	add	r2,r7,r2
   411dc:	4000071e 	bne	r8,zero,411fc <_free_r+0x20c>
   411e0:	81fffe17 	ldw	r7,-8(r16)
   411e4:	31cdc83a 	sub	r6,r6,r7
   411e8:	30c00317 	ldw	r3,12(r6)
   411ec:	31000217 	ldw	r4,8(r6)
   411f0:	11c5883a 	add	r2,r2,r7
   411f4:	20c00315 	stw	r3,12(r4)
   411f8:	19000215 	stw	r4,8(r3)
   411fc:	00c00174 	movhi	r3,5
   41200:	18ff4b04 	addi	r3,r3,-724
   41204:	18c00017 	ldw	r3,0(r3)
   41208:	11000054 	ori	r4,r2,1
   4120c:	31000115 	stw	r4,4(r6)
   41210:	29800215 	stw	r6,8(r5)
   41214:	10ffb736 	bltu	r2,r3,410f4 <_free_r+0x104>
   41218:	00800174 	movhi	r2,5
   4121c:	10863e04 	addi	r2,r2,6392
   41220:	11400017 	ldw	r5,0(r2)
   41224:	8809883a 	mov	r4,r17
   41228:	0040eb40 	call	40eb4 <_malloc_trim_r>
   4122c:	003fb106 	br	410f4 <_free_r+0x104>
   41230:	01000044 	movi	r4,1
   41234:	003f8606 	br	41050 <_free_r+0x60>
   41238:	01000504 	movi	r4,20
   4123c:	20c00b36 	bltu	r4,r3,4126c <_free_r+0x27c>
   41240:	190016c4 	addi	r4,r3,91
   41244:	210f883a 	add	r7,r4,r4
   41248:	003f9806 	br	410ac <_free_r+0xbc>
   4124c:	2009d0ba 	srai	r4,r4,2
   41250:	00800044 	movi	r2,1
   41254:	29c00117 	ldw	r7,4(r5)
   41258:	1108983a 	sll	r4,r2,r4
   4125c:	1805883a 	mov	r2,r3
   41260:	21c8b03a 	or	r4,r4,r7
   41264:	29000115 	stw	r4,4(r5)
   41268:	003f9e06 	br	410e4 <_free_r+0xf4>
   4126c:	01001504 	movi	r4,84
   41270:	20c00436 	bltu	r4,r3,41284 <_free_r+0x294>
   41274:	1008d33a 	srli	r4,r2,12
   41278:	21001b84 	addi	r4,r4,110
   4127c:	210f883a 	add	r7,r4,r4
   41280:	003f8a06 	br	410ac <_free_r+0xbc>
   41284:	01005504 	movi	r4,340
   41288:	20c00436 	bltu	r4,r3,4129c <_free_r+0x2ac>
   4128c:	1008d3fa 	srli	r4,r2,15
   41290:	21001dc4 	addi	r4,r4,119
   41294:	210f883a 	add	r7,r4,r4
   41298:	003f8406 	br	410ac <_free_r+0xbc>
   4129c:	01015504 	movi	r4,1364
   412a0:	20c00436 	bltu	r4,r3,412b4 <_free_r+0x2c4>
   412a4:	1008d4ba 	srli	r4,r2,18
   412a8:	21001f04 	addi	r4,r4,124
   412ac:	210f883a 	add	r7,r4,r4
   412b0:	003f7e06 	br	410ac <_free_r+0xbc>
   412b4:	01c03f04 	movi	r7,252
   412b8:	01001f84 	movi	r4,126
   412bc:	003f7b06 	br	410ac <_free_r+0xbc>

000412c0 <_fseek_r>:
   412c0:	deffe804 	addi	sp,sp,-96
   412c4:	dd001315 	stw	r20,76(sp)
   412c8:	dc801115 	stw	r18,68(sp)
   412cc:	dc401015 	stw	r17,64(sp)
   412d0:	dc000f15 	stw	r16,60(sp)
   412d4:	dfc01715 	stw	ra,92(sp)
   412d8:	ddc01615 	stw	r23,88(sp)
   412dc:	dd801515 	stw	r22,84(sp)
   412e0:	dd401415 	stw	r21,80(sp)
   412e4:	dcc01215 	stw	r19,72(sp)
   412e8:	2023883a 	mov	r17,r4
   412ec:	2821883a 	mov	r16,r5
   412f0:	3029883a 	mov	r20,r6
   412f4:	3825883a 	mov	r18,r7
   412f8:	20000226 	beq	r4,zero,41304 <_fseek_r+0x44>
   412fc:	20800e17 	ldw	r2,56(r4)
   41300:	10006226 	beq	r2,zero,4148c <_fseek_r+0x1cc>
   41304:	80c0030b 	ldhu	r3,12(r16)
   41308:	00804204 	movi	r2,264
   4130c:	18c0420c 	andi	r3,r3,264
   41310:	18806326 	beq	r3,r2,414a0 <_fseek_r+0x1e0>
   41314:	84c00a17 	ldw	r19,40(r16)
   41318:	98010226 	beq	r19,zero,41724 <_fseek_r+0x464>
   4131c:	00800044 	movi	r2,1
   41320:	90803d26 	beq	r18,r2,41418 <_fseek_r+0x158>
   41324:	00800084 	movi	r2,2
   41328:	90800126 	beq	r18,r2,41330 <_fseek_r+0x70>
   4132c:	90002c1e 	bne	r18,zero,413e0 <_fseek_r+0x120>
   41330:	80800417 	ldw	r2,16(r16)
   41334:	002d883a 	mov	r22,zero
   41338:	002b883a 	mov	r21,zero
   4133c:	1000e526 	beq	r2,zero,416d4 <_fseek_r+0x414>
   41340:	80c0030b 	ldhu	r3,12(r16)
   41344:	1882068c 	andi	r2,r3,2074
   41348:	1809883a 	mov	r4,r3
   4134c:	10000a1e 	bne	r2,zero,41378 <_fseek_r+0xb8>
   41350:	1881000c 	andi	r2,r3,1024
   41354:	10bfffcc 	andi	r2,r2,65535
   41358:	10a0001c 	xori	r2,r2,32768
   4135c:	10a00004 	addi	r2,r2,-32768
   41360:	1000631e 	bne	r2,zero,414f0 <_fseek_r+0x230>
   41364:	00800134 	movhi	r2,4
   41368:	108a6204 	addi	r2,r2,10632
   4136c:	98805026 	beq	r19,r2,414b0 <_fseek_r+0x1f0>
   41370:	18c20014 	ori	r3,r3,2048
   41374:	80c0030d 	sth	r3,12(r16)
   41378:	8809883a 	mov	r4,r17
   4137c:	800b883a 	mov	r5,r16
   41380:	00407740 	call	40774 <_fflush_r>
   41384:	1000181e 	bne	r2,zero,413e8 <_fseek_r+0x128>
   41388:	81400717 	ldw	r5,28(r16)
   4138c:	8809883a 	mov	r4,r17
   41390:	a00d883a 	mov	r6,r20
   41394:	900f883a 	mov	r7,r18
   41398:	983ee83a 	callr	r19
   4139c:	00ffffc4 	movi	r3,-1
   413a0:	10c01126 	beq	r2,r3,413e8 <_fseek_r+0x128>
   413a4:	81400c17 	ldw	r5,48(r16)
   413a8:	28000526 	beq	r5,zero,413c0 <_fseek_r+0x100>
   413ac:	80801004 	addi	r2,r16,64
   413b0:	28800226 	beq	r5,r2,413bc <_fseek_r+0xfc>
   413b4:	8809883a 	mov	r4,r17
   413b8:	0040ff00 	call	40ff0 <_free_r>
   413bc:	80000c15 	stw	zero,48(r16)
   413c0:	8080030b 	ldhu	r2,12(r16)
   413c4:	80c00417 	ldw	r3,16(r16)
   413c8:	80000115 	stw	zero,4(r16)
   413cc:	10bdf7cc 	andi	r2,r2,63455
   413d0:	8080030d 	sth	r2,12(r16)
   413d4:	80c00015 	stw	r3,0(r16)
   413d8:	0005883a 	mov	r2,zero
   413dc:	00000306 	br	413ec <_fseek_r+0x12c>
   413e0:	00800584 	movi	r2,22
   413e4:	88800015 	stw	r2,0(r17)
   413e8:	00bfffc4 	movi	r2,-1
   413ec:	dfc01717 	ldw	ra,92(sp)
   413f0:	ddc01617 	ldw	r23,88(sp)
   413f4:	dd801517 	ldw	r22,84(sp)
   413f8:	dd401417 	ldw	r21,80(sp)
   413fc:	dd001317 	ldw	r20,76(sp)
   41400:	dcc01217 	ldw	r19,72(sp)
   41404:	dc801117 	ldw	r18,68(sp)
   41408:	dc401017 	ldw	r17,64(sp)
   4140c:	dc000f17 	ldw	r16,60(sp)
   41410:	dec01804 	addi	sp,sp,96
   41414:	f800283a 	ret
   41418:	8809883a 	mov	r4,r17
   4141c:	800b883a 	mov	r5,r16
   41420:	00407740 	call	40774 <_fflush_r>
   41424:	8080030b 	ldhu	r2,12(r16)
   41428:	10c4000c 	andi	r3,r2,4096
   4142c:	18ffffcc 	andi	r3,r3,65535
   41430:	18e0001c 	xori	r3,r3,32768
   41434:	18e00004 	addi	r3,r3,-32768
   41438:	18007d26 	beq	r3,zero,41630 <_fseek_r+0x370>
   4143c:	85401417 	ldw	r21,80(r16)
   41440:	10c0010c 	andi	r3,r2,4
   41444:	18ffffcc 	andi	r3,r3,65535
   41448:	18e0001c 	xori	r3,r3,32768
   4144c:	18e00004 	addi	r3,r3,-32768
   41450:	18005f1e 	bne	r3,zero,415d0 <_fseek_r+0x310>
   41454:	1080020c 	andi	r2,r2,8
   41458:	10bfffcc 	andi	r2,r2,65535
   4145c:	10a0001c 	xori	r2,r2,32768
   41460:	10a00004 	addi	r2,r2,-32768
   41464:	10007026 	beq	r2,zero,41628 <_fseek_r+0x368>
   41468:	80c00017 	ldw	r3,0(r16)
   4146c:	80800417 	ldw	r2,16(r16)
   41470:	18000226 	beq	r3,zero,4147c <_fseek_r+0x1bc>
   41474:	1887c83a 	sub	r3,r3,r2
   41478:	a8eb883a 	add	r21,r21,r3
   4147c:	a569883a 	add	r20,r20,r21
   41480:	05800044 	movi	r22,1
   41484:	0025883a 	mov	r18,zero
   41488:	003fac06 	br	4133c <_fseek_r+0x7c>
   4148c:	0040a300 	call	40a30 <__sinit>
   41490:	80c0030b 	ldhu	r3,12(r16)
   41494:	00804204 	movi	r2,264
   41498:	18c0420c 	andi	r3,r3,264
   4149c:	18bf9d1e 	bne	r3,r2,41314 <_fseek_r+0x54>
   414a0:	8809883a 	mov	r4,r17
   414a4:	800b883a 	mov	r5,r16
   414a8:	00407740 	call	40774 <_fflush_r>
   414ac:	003f9906 	br	41314 <_fseek_r+0x54>
   414b0:	8140038f 	ldh	r5,14(r16)
   414b4:	283fae16 	blt	r5,zero,41370 <_fseek_r+0xb0>
   414b8:	8809883a 	mov	r4,r17
   414bc:	d80d883a 	mov	r6,sp
   414c0:	00417580 	call	41758 <_fstat_r>
   414c4:	1000741e 	bne	r2,zero,41698 <_fseek_r+0x3d8>
   414c8:	d8c00117 	ldw	r3,4(sp)
   414cc:	00a00014 	movui	r2,32768
   414d0:	18fc000c 	andi	r3,r3,61440
   414d4:	1880701e 	bne	r3,r2,41698 <_fseek_r+0x3d8>
   414d8:	8100030b 	ldhu	r4,12(r16)
   414dc:	00810004 	movi	r2,1024
   414e0:	80801315 	stw	r2,76(r16)
   414e4:	2084b03a 	or	r2,r4,r2
   414e8:	1009883a 	mov	r4,r2
   414ec:	8080030d 	sth	r2,12(r16)
   414f0:	90003f1e 	bne	r18,zero,415f0 <_fseek_r+0x330>
   414f4:	a02f883a 	mov	r23,r20
   414f8:	b000461e 	bne	r22,zero,41614 <_fseek_r+0x354>
   414fc:	2084000c 	andi	r2,r4,4096
   41500:	10bfffcc 	andi	r2,r2,65535
   41504:	10a0001c 	xori	r2,r2,32768
   41508:	10a00004 	addi	r2,r2,-32768
   4150c:	10007526 	beq	r2,zero,416e4 <_fseek_r+0x424>
   41510:	80801417 	ldw	r2,80(r16)
   41514:	80c00117 	ldw	r3,4(r16)
   41518:	81400c17 	ldw	r5,48(r16)
   4151c:	10ebc83a 	sub	r21,r2,r3
   41520:	28007926 	beq	r5,zero,41708 <_fseek_r+0x448>
   41524:	81c00f17 	ldw	r7,60(r16)
   41528:	a9ebc83a 	sub	r21,r21,r7
   4152c:	80800e17 	ldw	r2,56(r16)
   41530:	81800417 	ldw	r6,16(r16)
   41534:	a8eb883a 	add	r21,r21,r3
   41538:	1185c83a 	sub	r2,r2,r6
   4153c:	a8abc83a 	sub	r21,r21,r2
   41540:	3885883a 	add	r2,r7,r2
   41544:	2208000c 	andi	r8,r4,8192
   41548:	423fffcc 	andi	r8,r8,65535
   4154c:	4220001c 	xori	r8,r8,32768
   41550:	42200004 	addi	r8,r8,-32768
   41554:	4000031e 	bne	r8,zero,41564 <_fseek_r+0x2a4>
   41558:	bd400216 	blt	r23,r21,41564 <_fseek_r+0x2a4>
   4155c:	a887883a 	add	r3,r21,r2
   41560:	b8c03d36 	bltu	r23,r3,41658 <_fseek_r+0x398>
   41564:	85401317 	ldw	r21,76(r16)
   41568:	81400717 	ldw	r5,28(r16)
   4156c:	8809883a 	mov	r4,r17
   41570:	056bc83a 	sub	r21,zero,r21
   41574:	bd6a703a 	and	r21,r23,r21
   41578:	a80d883a 	mov	r6,r21
   4157c:	000f883a 	mov	r7,zero
   41580:	983ee83a 	callr	r19
   41584:	00ffffc4 	movi	r3,-1
   41588:	10ff7b26 	beq	r2,r3,41378 <_fseek_r+0xb8>
   4158c:	80800417 	ldw	r2,16(r16)
   41590:	81400c17 	ldw	r5,48(r16)
   41594:	80000115 	stw	zero,4(r16)
   41598:	80800015 	stw	r2,0(r16)
   4159c:	28000526 	beq	r5,zero,415b4 <_fseek_r+0x2f4>
   415a0:	80801004 	addi	r2,r16,64
   415a4:	28800226 	beq	r5,r2,415b0 <_fseek_r+0x2f0>
   415a8:	8809883a 	mov	r4,r17
   415ac:	0040ff00 	call	40ff0 <_free_r>
   415b0:	80000c15 	stw	zero,48(r16)
   415b4:	8080030b 	ldhu	r2,12(r16)
   415b8:	bd6fc83a 	sub	r23,r23,r21
   415bc:	10bff7cc 	andi	r2,r2,65503
   415c0:	8080030d 	sth	r2,12(r16)
   415c4:	b800361e 	bne	r23,zero,416a0 <_fseek_r+0x3e0>
   415c8:	0005883a 	mov	r2,zero
   415cc:	003f8706 	br	413ec <_fseek_r+0x12c>
   415d0:	80c00117 	ldw	r3,4(r16)
   415d4:	80800c17 	ldw	r2,48(r16)
   415d8:	a8ebc83a 	sub	r21,r21,r3
   415dc:	10001226 	beq	r2,zero,41628 <_fseek_r+0x368>
   415e0:	80c00f17 	ldw	r3,60(r16)
   415e4:	80800417 	ldw	r2,16(r16)
   415e8:	a8ebc83a 	sub	r21,r21,r3
   415ec:	003fa306 	br	4147c <_fseek_r+0x1bc>
   415f0:	8140038f 	ldh	r5,14(r16)
   415f4:	8809883a 	mov	r4,r17
   415f8:	d80d883a 	mov	r6,sp
   415fc:	00417580 	call	41758 <_fstat_r>
   41600:	103f5d1e 	bne	r2,zero,41378 <_fseek_r+0xb8>
   41604:	ddc00417 	ldw	r23,16(sp)
   41608:	8100030b 	ldhu	r4,12(r16)
   4160c:	a5ef883a 	add	r23,r20,r23
   41610:	b03fba26 	beq	r22,zero,414fc <_fseek_r+0x23c>
   41614:	81400c17 	ldw	r5,48(r16)
   41618:	80c00117 	ldw	r3,4(r16)
   4161c:	28003a26 	beq	r5,zero,41708 <_fseek_r+0x448>
   41620:	81c00f17 	ldw	r7,60(r16)
   41624:	003fc106 	br	4152c <_fseek_r+0x26c>
   41628:	80800417 	ldw	r2,16(r16)
   4162c:	003f9306 	br	4147c <_fseek_r+0x1bc>
   41630:	81400717 	ldw	r5,28(r16)
   41634:	8809883a 	mov	r4,r17
   41638:	000d883a 	mov	r6,zero
   4163c:	900f883a 	mov	r7,r18
   41640:	983ee83a 	callr	r19
   41644:	102b883a 	mov	r21,r2
   41648:	00bfffc4 	movi	r2,-1
   4164c:	a8bf6626 	beq	r21,r2,413e8 <_fseek_r+0x128>
   41650:	8080030b 	ldhu	r2,12(r16)
   41654:	003f7a06 	br	41440 <_fseek_r+0x180>
   41658:	bd6bc83a 	sub	r21,r23,r21
   4165c:	354d883a 	add	r6,r6,r21
   41660:	1545c83a 	sub	r2,r2,r21
   41664:	81800015 	stw	r6,0(r16)
   41668:	80800115 	stw	r2,4(r16)
   4166c:	28000626 	beq	r5,zero,41688 <_fseek_r+0x3c8>
   41670:	80801004 	addi	r2,r16,64
   41674:	28800326 	beq	r5,r2,41684 <_fseek_r+0x3c4>
   41678:	8809883a 	mov	r4,r17
   4167c:	0040ff00 	call	40ff0 <_free_r>
   41680:	8100030b 	ldhu	r4,12(r16)
   41684:	80000c15 	stw	zero,48(r16)
   41688:	213ff7cc 	andi	r4,r4,65503
   4168c:	8100030d 	sth	r4,12(r16)
   41690:	0005883a 	mov	r2,zero
   41694:	003f5506 	br	413ec <_fseek_r+0x12c>
   41698:	80c0030b 	ldhu	r3,12(r16)
   4169c:	003f3406 	br	41370 <_fseek_r+0xb0>
   416a0:	8809883a 	mov	r4,r17
   416a4:	800b883a 	mov	r5,r16
   416a8:	004265c0 	call	4265c <__srefill_r>
   416ac:	103f321e 	bne	r2,zero,41378 <_fseek_r+0xb8>
   416b0:	80800117 	ldw	r2,4(r16)
   416b4:	15ff3036 	bltu	r2,r23,41378 <_fseek_r+0xb8>
   416b8:	80c00017 	ldw	r3,0(r16)
   416bc:	15c5c83a 	sub	r2,r2,r23
   416c0:	80800115 	stw	r2,4(r16)
   416c4:	1def883a 	add	r23,r3,r23
   416c8:	85c00015 	stw	r23,0(r16)
   416cc:	0005883a 	mov	r2,zero
   416d0:	003f4606 	br	413ec <_fseek_r+0x12c>
   416d4:	8809883a 	mov	r4,r17
   416d8:	800b883a 	mov	r5,r16
   416dc:	00419200 	call	41920 <__smakebuf_r>
   416e0:	003f1706 	br	41340 <_fseek_r+0x80>
   416e4:	81400717 	ldw	r5,28(r16)
   416e8:	8809883a 	mov	r4,r17
   416ec:	000d883a 	mov	r6,zero
   416f0:	01c00044 	movi	r7,1
   416f4:	983ee83a 	callr	r19
   416f8:	00ffffc4 	movi	r3,-1
   416fc:	10ff1e26 	beq	r2,r3,41378 <_fseek_r+0xb8>
   41700:	8100030b 	ldhu	r4,12(r16)
   41704:	003f8306 	br	41514 <_fseek_r+0x254>
   41708:	80800017 	ldw	r2,0(r16)
   4170c:	81800417 	ldw	r6,16(r16)
   41710:	000b883a 	mov	r5,zero
   41714:	1185c83a 	sub	r2,r2,r6
   41718:	a8abc83a 	sub	r21,r21,r2
   4171c:	1885883a 	add	r2,r3,r2
   41720:	003f8806 	br	41544 <_fseek_r+0x284>
   41724:	00800744 	movi	r2,29
   41728:	88800015 	stw	r2,0(r17)
   4172c:	00bfffc4 	movi	r2,-1
   41730:	003f2e06 	br	413ec <_fseek_r+0x12c>

00041734 <fseek>:
   41734:	00800174 	movhi	r2,5
   41738:	10bf4904 	addi	r2,r2,-732
   4173c:	2007883a 	mov	r3,r4
   41740:	11000017 	ldw	r4,0(r2)
   41744:	2805883a 	mov	r2,r5
   41748:	300f883a 	mov	r7,r6
   4174c:	180b883a 	mov	r5,r3
   41750:	100d883a 	mov	r6,r2
   41754:	00412c01 	jmpi	412c0 <_fseek_r>

00041758 <_fstat_r>:
   41758:	defffd04 	addi	sp,sp,-12
   4175c:	dc400115 	stw	r17,4(sp)
   41760:	dc000015 	stw	r16,0(sp)
   41764:	2023883a 	mov	r17,r4
   41768:	04000174 	movhi	r16,5
   4176c:	84063b04 	addi	r16,r16,6380
   41770:	2809883a 	mov	r4,r5
   41774:	300b883a 	mov	r5,r6
   41778:	dfc00215 	stw	ra,8(sp)
   4177c:	80000015 	stw	zero,0(r16)
   41780:	004acc80 	call	4acc8 <fstat>
   41784:	00ffffc4 	movi	r3,-1
   41788:	10c00526 	beq	r2,r3,417a0 <_fstat_r+0x48>
   4178c:	dfc00217 	ldw	ra,8(sp)
   41790:	dc400117 	ldw	r17,4(sp)
   41794:	dc000017 	ldw	r16,0(sp)
   41798:	dec00304 	addi	sp,sp,12
   4179c:	f800283a 	ret
   417a0:	80c00017 	ldw	r3,0(r16)
   417a4:	183ff926 	beq	r3,zero,4178c <_fstat_r+0x34>
   417a8:	88c00015 	stw	r3,0(r17)
   417ac:	dfc00217 	ldw	ra,8(sp)
   417b0:	dc400117 	ldw	r17,4(sp)
   417b4:	dc000017 	ldw	r16,0(sp)
   417b8:	dec00304 	addi	sp,sp,12
   417bc:	f800283a 	ret

000417c0 <_fwalk>:
   417c0:	defff904 	addi	sp,sp,-28
   417c4:	dcc00315 	stw	r19,12(sp)
   417c8:	24c0b804 	addi	r19,r4,736
   417cc:	dd400515 	stw	r21,20(sp)
   417d0:	dd000415 	stw	r20,16(sp)
   417d4:	dfc00615 	stw	ra,24(sp)
   417d8:	dc800215 	stw	r18,8(sp)
   417dc:	dc400115 	stw	r17,4(sp)
   417e0:	dc000015 	stw	r16,0(sp)
   417e4:	282b883a 	mov	r21,r5
   417e8:	0029883a 	mov	r20,zero
   417ec:	0040c380 	call	40c38 <__sfp_lock_acquire>
   417f0:	98001226 	beq	r19,zero,4183c <_fwalk+0x7c>
   417f4:	04bfffc4 	movi	r18,-1
   417f8:	9c400117 	ldw	r17,4(r19)
   417fc:	9c000217 	ldw	r16,8(r19)
   41800:	8c7fffc4 	addi	r17,r17,-1
   41804:	88000b16 	blt	r17,zero,41834 <_fwalk+0x74>
   41808:	84000304 	addi	r16,r16,12
   4180c:	80c0000f 	ldh	r3,0(r16)
   41810:	8c7fffc4 	addi	r17,r17,-1
   41814:	813ffd04 	addi	r4,r16,-12
   41818:	18000426 	beq	r3,zero,4182c <_fwalk+0x6c>
   4181c:	80c0008f 	ldh	r3,2(r16)
   41820:	1c800226 	beq	r3,r18,4182c <_fwalk+0x6c>
   41824:	a83ee83a 	callr	r21
   41828:	a0a8b03a 	or	r20,r20,r2
   4182c:	84001704 	addi	r16,r16,92
   41830:	8cbff61e 	bne	r17,r18,4180c <_fwalk+0x4c>
   41834:	9cc00017 	ldw	r19,0(r19)
   41838:	983fef1e 	bne	r19,zero,417f8 <_fwalk+0x38>
   4183c:	0040c3c0 	call	40c3c <__sfp_lock_release>
   41840:	a005883a 	mov	r2,r20
   41844:	dfc00617 	ldw	ra,24(sp)
   41848:	dd400517 	ldw	r21,20(sp)
   4184c:	dd000417 	ldw	r20,16(sp)
   41850:	dcc00317 	ldw	r19,12(sp)
   41854:	dc800217 	ldw	r18,8(sp)
   41858:	dc400117 	ldw	r17,4(sp)
   4185c:	dc000017 	ldw	r16,0(sp)
   41860:	dec00704 	addi	sp,sp,28
   41864:	f800283a 	ret

00041868 <_fwalk_reent>:
   41868:	defff804 	addi	sp,sp,-32
   4186c:	dcc00315 	stw	r19,12(sp)
   41870:	24c0b804 	addi	r19,r4,736
   41874:	dd800615 	stw	r22,24(sp)
   41878:	dd400515 	stw	r21,20(sp)
   4187c:	dd000415 	stw	r20,16(sp)
   41880:	dfc00715 	stw	ra,28(sp)
   41884:	dc800215 	stw	r18,8(sp)
   41888:	dc400115 	stw	r17,4(sp)
   4188c:	dc000015 	stw	r16,0(sp)
   41890:	2029883a 	mov	r20,r4
   41894:	282b883a 	mov	r21,r5
   41898:	002d883a 	mov	r22,zero
   4189c:	0040c380 	call	40c38 <__sfp_lock_acquire>
   418a0:	98001326 	beq	r19,zero,418f0 <_fwalk_reent+0x88>
   418a4:	04bfffc4 	movi	r18,-1
   418a8:	9c400117 	ldw	r17,4(r19)
   418ac:	9c000217 	ldw	r16,8(r19)
   418b0:	8c7fffc4 	addi	r17,r17,-1
   418b4:	88000c16 	blt	r17,zero,418e8 <_fwalk_reent+0x80>
   418b8:	84000304 	addi	r16,r16,12
   418bc:	80c0000f 	ldh	r3,0(r16)
   418c0:	8c7fffc4 	addi	r17,r17,-1
   418c4:	817ffd04 	addi	r5,r16,-12
   418c8:	18000526 	beq	r3,zero,418e0 <_fwalk_reent+0x78>
   418cc:	80c0008f 	ldh	r3,2(r16)
   418d0:	a009883a 	mov	r4,r20
   418d4:	1c800226 	beq	r3,r18,418e0 <_fwalk_reent+0x78>
   418d8:	a83ee83a 	callr	r21
   418dc:	b0acb03a 	or	r22,r22,r2
   418e0:	84001704 	addi	r16,r16,92
   418e4:	8cbff51e 	bne	r17,r18,418bc <_fwalk_reent+0x54>
   418e8:	9cc00017 	ldw	r19,0(r19)
   418ec:	983fee1e 	bne	r19,zero,418a8 <_fwalk_reent+0x40>
   418f0:	0040c3c0 	call	40c3c <__sfp_lock_release>
   418f4:	b005883a 	mov	r2,r22
   418f8:	dfc00717 	ldw	ra,28(sp)
   418fc:	dd800617 	ldw	r22,24(sp)
   41900:	dd400517 	ldw	r21,20(sp)
   41904:	dd000417 	ldw	r20,16(sp)
   41908:	dcc00317 	ldw	r19,12(sp)
   4190c:	dc800217 	ldw	r18,8(sp)
   41910:	dc400117 	ldw	r17,4(sp)
   41914:	dc000017 	ldw	r16,0(sp)
   41918:	dec00804 	addi	sp,sp,32
   4191c:	f800283a 	ret

00041920 <__smakebuf_r>:
   41920:	2880030b 	ldhu	r2,12(r5)
   41924:	deffed04 	addi	sp,sp,-76
   41928:	dc401015 	stw	r17,64(sp)
   4192c:	10c0008c 	andi	r3,r2,2
   41930:	18ffffcc 	andi	r3,r3,65535
   41934:	18e0001c 	xori	r3,r3,32768
   41938:	dc000f15 	stw	r16,60(sp)
   4193c:	dfc01215 	stw	ra,72(sp)
   41940:	dc801115 	stw	r18,68(sp)
   41944:	18e00004 	addi	r3,r3,-32768
   41948:	2821883a 	mov	r16,r5
   4194c:	2023883a 	mov	r17,r4
   41950:	1800381e 	bne	r3,zero,41a34 <__smakebuf_r+0x114>
   41954:	2940038f 	ldh	r5,14(r5)
   41958:	28002d16 	blt	r5,zero,41a10 <__smakebuf_r+0xf0>
   4195c:	d80d883a 	mov	r6,sp
   41960:	00417580 	call	41758 <_fstat_r>
   41964:	10002916 	blt	r2,zero,41a0c <__smakebuf_r+0xec>
   41968:	d8800117 	ldw	r2,4(sp)
   4196c:	00e00014 	movui	r3,32768
   41970:	10bc000c 	andi	r2,r2,61440
   41974:	10c03c26 	beq	r2,r3,41a68 <__smakebuf_r+0x148>
   41978:	80c0030b 	ldhu	r3,12(r16)
   4197c:	18c20014 	ori	r3,r3,2048
   41980:	80c0030d 	sth	r3,12(r16)
   41984:	00c80004 	movi	r3,8192
   41988:	10c00c1e 	bne	r2,r3,419bc <__smakebuf_r+0x9c>
   4198c:	8140038f 	ldh	r5,14(r16)
   41990:	8809883a 	mov	r4,r17
   41994:	0046be80 	call	46be8 <_isatty_r>
   41998:	10000826 	beq	r2,zero,419bc <__smakebuf_r+0x9c>
   4199c:	80c0030b 	ldhu	r3,12(r16)
   419a0:	808010c4 	addi	r2,r16,67
   419a4:	80800015 	stw	r2,0(r16)
   419a8:	18c00054 	ori	r3,r3,1
   419ac:	80800415 	stw	r2,16(r16)
   419b0:	00800044 	movi	r2,1
   419b4:	80c0030d 	sth	r3,12(r16)
   419b8:	80800515 	stw	r2,20(r16)
   419bc:	04810004 	movi	r18,1024
   419c0:	8809883a 	mov	r4,r17
   419c4:	900b883a 	mov	r5,r18
   419c8:	0041ac80 	call	41ac8 <_malloc_r>
   419cc:	10003026 	beq	r2,zero,41a90 <__smakebuf_r+0x170>
   419d0:	80c0030b 	ldhu	r3,12(r16)
   419d4:	01000134 	movhi	r4,4
   419d8:	21026704 	addi	r4,r4,2460
   419dc:	89000f15 	stw	r4,60(r17)
   419e0:	18c02014 	ori	r3,r3,128
   419e4:	80c0030d 	sth	r3,12(r16)
   419e8:	80800015 	stw	r2,0(r16)
   419ec:	80800415 	stw	r2,16(r16)
   419f0:	84800515 	stw	r18,20(r16)
   419f4:	dfc01217 	ldw	ra,72(sp)
   419f8:	dc801117 	ldw	r18,68(sp)
   419fc:	dc401017 	ldw	r17,64(sp)
   41a00:	dc000f17 	ldw	r16,60(sp)
   41a04:	dec01304 	addi	sp,sp,76
   41a08:	f800283a 	ret
   41a0c:	8080030b 	ldhu	r2,12(r16)
   41a10:	10c0200c 	andi	r3,r2,128
   41a14:	18ffffcc 	andi	r3,r3,65535
   41a18:	18e0001c 	xori	r3,r3,32768
   41a1c:	18e00004 	addi	r3,r3,-32768
   41a20:	18000f1e 	bne	r3,zero,41a60 <__smakebuf_r+0x140>
   41a24:	04810004 	movi	r18,1024
   41a28:	10820014 	ori	r2,r2,2048
   41a2c:	8080030d 	sth	r2,12(r16)
   41a30:	003fe306 	br	419c0 <__smakebuf_r+0xa0>
   41a34:	288010c4 	addi	r2,r5,67
   41a38:	28800015 	stw	r2,0(r5)
   41a3c:	28800415 	stw	r2,16(r5)
   41a40:	00800044 	movi	r2,1
   41a44:	28800515 	stw	r2,20(r5)
   41a48:	dfc01217 	ldw	ra,72(sp)
   41a4c:	dc801117 	ldw	r18,68(sp)
   41a50:	dc401017 	ldw	r17,64(sp)
   41a54:	dc000f17 	ldw	r16,60(sp)
   41a58:	dec01304 	addi	sp,sp,76
   41a5c:	f800283a 	ret
   41a60:	04801004 	movi	r18,64
   41a64:	003ff006 	br	41a28 <__smakebuf_r+0x108>
   41a68:	81000a17 	ldw	r4,40(r16)
   41a6c:	00c00134 	movhi	r3,4
   41a70:	18ca6204 	addi	r3,r3,10632
   41a74:	20ffc01e 	bne	r4,r3,41978 <__smakebuf_r+0x58>
   41a78:	8080030b 	ldhu	r2,12(r16)
   41a7c:	00c10004 	movi	r3,1024
   41a80:	80c01315 	stw	r3,76(r16)
   41a84:	10c4b03a 	or	r2,r2,r3
   41a88:	8080030d 	sth	r2,12(r16)
   41a8c:	003fcb06 	br	419bc <__smakebuf_r+0x9c>
   41a90:	8080030b 	ldhu	r2,12(r16)
   41a94:	10c0800c 	andi	r3,r2,512
   41a98:	18ffffcc 	andi	r3,r3,65535
   41a9c:	18e0001c 	xori	r3,r3,32768
   41aa0:	18e00004 	addi	r3,r3,-32768
   41aa4:	183fd31e 	bne	r3,zero,419f4 <__smakebuf_r+0xd4>
   41aa8:	10800094 	ori	r2,r2,2
   41aac:	80c010c4 	addi	r3,r16,67
   41ab0:	8080030d 	sth	r2,12(r16)
   41ab4:	00800044 	movi	r2,1
   41ab8:	80c00015 	stw	r3,0(r16)
   41abc:	80c00415 	stw	r3,16(r16)
   41ac0:	80800515 	stw	r2,20(r16)
   41ac4:	003fcb06 	br	419f4 <__smakebuf_r+0xd4>

00041ac8 <_malloc_r>:
   41ac8:	defff604 	addi	sp,sp,-40
   41acc:	dc800215 	stw	r18,8(sp)
   41ad0:	dfc00915 	stw	ra,36(sp)
   41ad4:	df000815 	stw	fp,32(sp)
   41ad8:	ddc00715 	stw	r23,28(sp)
   41adc:	dd800615 	stw	r22,24(sp)
   41ae0:	dd400515 	stw	r21,20(sp)
   41ae4:	dd000415 	stw	r20,16(sp)
   41ae8:	dcc00315 	stw	r19,12(sp)
   41aec:	dc400115 	stw	r17,4(sp)
   41af0:	dc000015 	stw	r16,0(sp)
   41af4:	288002c4 	addi	r2,r5,11
   41af8:	00c00584 	movi	r3,22
   41afc:	2025883a 	mov	r18,r4
   41b00:	18802b2e 	bgeu	r3,r2,41bb0 <_malloc_r+0xe8>
   41b04:	047ffe04 	movi	r17,-8
   41b08:	1462703a 	and	r17,r2,r17
   41b0c:	88002a16 	blt	r17,zero,41bb8 <_malloc_r+0xf0>
   41b10:	89402936 	bltu	r17,r5,41bb8 <_malloc_r+0xf0>
   41b14:	9009883a 	mov	r4,r18
   41b18:	004b0f40 	call	4b0f4 <__malloc_lock>
   41b1c:	00807dc4 	movi	r2,503
   41b20:	14402936 	bltu	r2,r17,41bc8 <_malloc_r+0x100>
   41b24:	8808d0fa 	srli	r4,r17,3
   41b28:	04c00174 	movhi	r19,5
   41b2c:	9cf9b704 	addi	r19,r19,-6436
   41b30:	2105883a 	add	r2,r4,r4
   41b34:	1085883a 	add	r2,r2,r2
   41b38:	1085883a 	add	r2,r2,r2
   41b3c:	9885883a 	add	r2,r19,r2
   41b40:	14000317 	ldw	r16,12(r2)
   41b44:	80815526 	beq	r16,r2,4209c <_malloc_r+0x5d4>
   41b48:	81000117 	ldw	r4,4(r16)
   41b4c:	00bfff04 	movi	r2,-4
   41b50:	80c00317 	ldw	r3,12(r16)
   41b54:	2084703a 	and	r2,r4,r2
   41b58:	8085883a 	add	r2,r16,r2
   41b5c:	11800117 	ldw	r6,4(r2)
   41b60:	81400217 	ldw	r5,8(r16)
   41b64:	9009883a 	mov	r4,r18
   41b68:	31800054 	ori	r6,r6,1
   41b6c:	11800115 	stw	r6,4(r2)
   41b70:	28c00315 	stw	r3,12(r5)
   41b74:	19400215 	stw	r5,8(r3)
   41b78:	004b1140 	call	4b114 <__malloc_unlock>
   41b7c:	80800204 	addi	r2,r16,8
   41b80:	dfc00917 	ldw	ra,36(sp)
   41b84:	df000817 	ldw	fp,32(sp)
   41b88:	ddc00717 	ldw	r23,28(sp)
   41b8c:	dd800617 	ldw	r22,24(sp)
   41b90:	dd400517 	ldw	r21,20(sp)
   41b94:	dd000417 	ldw	r20,16(sp)
   41b98:	dcc00317 	ldw	r19,12(sp)
   41b9c:	dc800217 	ldw	r18,8(sp)
   41ba0:	dc400117 	ldw	r17,4(sp)
   41ba4:	dc000017 	ldw	r16,0(sp)
   41ba8:	dec00a04 	addi	sp,sp,40
   41bac:	f800283a 	ret
   41bb0:	04400404 	movi	r17,16
   41bb4:	897fd72e 	bgeu	r17,r5,41b14 <_malloc_r+0x4c>
   41bb8:	00800304 	movi	r2,12
   41bbc:	90800015 	stw	r2,0(r18)
   41bc0:	0005883a 	mov	r2,zero
   41bc4:	003fee06 	br	41b80 <_malloc_r+0xb8>
   41bc8:	8808d27a 	srli	r4,r17,9
   41bcc:	20007126 	beq	r4,zero,41d94 <_malloc_r+0x2cc>
   41bd0:	00800104 	movi	r2,4
   41bd4:	1100eb36 	bltu	r2,r4,41f84 <_malloc_r+0x4bc>
   41bd8:	8808d1ba 	srli	r4,r17,6
   41bdc:	21000e04 	addi	r4,r4,56
   41be0:	210b883a 	add	r5,r4,r4
   41be4:	294b883a 	add	r5,r5,r5
   41be8:	294b883a 	add	r5,r5,r5
   41bec:	04c00174 	movhi	r19,5
   41bf0:	9cf9b704 	addi	r19,r19,-6436
   41bf4:	994b883a 	add	r5,r19,r5
   41bf8:	2c000317 	ldw	r16,12(r5)
   41bfc:	2c000e26 	beq	r5,r16,41c38 <_malloc_r+0x170>
   41c00:	80c00117 	ldw	r3,4(r16)
   41c04:	01ffff04 	movi	r7,-4
   41c08:	018003c4 	movi	r6,15
   41c0c:	19c6703a 	and	r3,r3,r7
   41c10:	1c45c83a 	sub	r2,r3,r17
   41c14:	30800716 	blt	r6,r2,41c34 <_malloc_r+0x16c>
   41c18:	1000610e 	bge	r2,zero,41da0 <_malloc_r+0x2d8>
   41c1c:	84000317 	ldw	r16,12(r16)
   41c20:	2c000526 	beq	r5,r16,41c38 <_malloc_r+0x170>
   41c24:	80c00117 	ldw	r3,4(r16)
   41c28:	19c6703a 	and	r3,r3,r7
   41c2c:	1c45c83a 	sub	r2,r3,r17
   41c30:	30bff90e 	bge	r6,r2,41c18 <_malloc_r+0x150>
   41c34:	213fffc4 	addi	r4,r4,-1
   41c38:	21000044 	addi	r4,r4,1
   41c3c:	9c000417 	ldw	r16,16(r19)
   41c40:	00c00174 	movhi	r3,5
   41c44:	18f9b704 	addi	r3,r3,-6436
   41c48:	1a400204 	addi	r9,r3,8
   41c4c:	8240ff26 	beq	r16,r9,4204c <_malloc_r+0x584>
   41c50:	81400117 	ldw	r5,4(r16)
   41c54:	00bfff04 	movi	r2,-4
   41c58:	018003c4 	movi	r6,15
   41c5c:	2884703a 	and	r2,r5,r2
   41c60:	144bc83a 	sub	r5,r2,r17
   41c64:	3140ea16 	blt	r6,r5,42010 <_malloc_r+0x548>
   41c68:	1a400515 	stw	r9,20(r3)
   41c6c:	1a400415 	stw	r9,16(r3)
   41c70:	2800570e 	bge	r5,zero,41dd0 <_malloc_r+0x308>
   41c74:	01407fc4 	movi	r5,511
   41c78:	2880ca36 	bltu	r5,r2,41fa4 <_malloc_r+0x4dc>
   41c7c:	1004d0fa 	srli	r2,r2,3
   41c80:	02000044 	movi	r8,1
   41c84:	19c00117 	ldw	r7,4(r3)
   41c88:	108b883a 	add	r5,r2,r2
   41c8c:	294b883a 	add	r5,r5,r5
   41c90:	1005d0ba 	srai	r2,r2,2
   41c94:	294b883a 	add	r5,r5,r5
   41c98:	28cb883a 	add	r5,r5,r3
   41c9c:	29800217 	ldw	r6,8(r5)
   41ca0:	4084983a 	sll	r2,r8,r2
   41ca4:	81400315 	stw	r5,12(r16)
   41ca8:	81800215 	stw	r6,8(r16)
   41cac:	11c4b03a 	or	r2,r2,r7
   41cb0:	18800115 	stw	r2,4(r3)
   41cb4:	2c000215 	stw	r16,8(r5)
   41cb8:	34000315 	stw	r16,12(r6)
   41cbc:	200bd0ba 	srai	r5,r4,2
   41cc0:	00c00044 	movi	r3,1
   41cc4:	194a983a 	sll	r5,r3,r5
   41cc8:	11404936 	bltu	r2,r5,41df0 <_malloc_r+0x328>
   41ccc:	1146703a 	and	r3,r2,r5
   41cd0:	18000a1e 	bne	r3,zero,41cfc <_malloc_r+0x234>
   41cd4:	00ffff04 	movi	r3,-4
   41cd8:	294b883a 	add	r5,r5,r5
   41cdc:	20c8703a 	and	r4,r4,r3
   41ce0:	1146703a 	and	r3,r2,r5
   41ce4:	21000104 	addi	r4,r4,4
   41ce8:	1800041e 	bne	r3,zero,41cfc <_malloc_r+0x234>
   41cec:	294b883a 	add	r5,r5,r5
   41cf0:	1146703a 	and	r3,r2,r5
   41cf4:	21000104 	addi	r4,r4,4
   41cf8:	183ffc26 	beq	r3,zero,41cec <_malloc_r+0x224>
   41cfc:	023fff04 	movi	r8,-4
   41d00:	01c003c4 	movi	r7,15
   41d04:	2105883a 	add	r2,r4,r4
   41d08:	1085883a 	add	r2,r2,r2
   41d0c:	1085883a 	add	r2,r2,r2
   41d10:	9899883a 	add	r12,r19,r2
   41d14:	62800304 	addi	r10,r12,12
   41d18:	2017883a 	mov	r11,r4
   41d1c:	54000017 	ldw	r16,0(r10)
   41d20:	51bffd04 	addi	r6,r10,-12
   41d24:	8180041e 	bne	r16,r6,41d38 <_malloc_r+0x270>
   41d28:	0000ca06 	br	42054 <_malloc_r+0x58c>
   41d2c:	10001c0e 	bge	r2,zero,41da0 <_malloc_r+0x2d8>
   41d30:	84000317 	ldw	r16,12(r16)
   41d34:	8180c726 	beq	r16,r6,42054 <_malloc_r+0x58c>
   41d38:	80c00117 	ldw	r3,4(r16)
   41d3c:	1a06703a 	and	r3,r3,r8
   41d40:	1c45c83a 	sub	r2,r3,r17
   41d44:	38bff90e 	bge	r7,r2,41d2c <_malloc_r+0x264>
   41d48:	81000317 	ldw	r4,12(r16)
   41d4c:	81400217 	ldw	r5,8(r16)
   41d50:	8447883a 	add	r3,r16,r17
   41d54:	8c400054 	ori	r17,r17,1
   41d58:	29000315 	stw	r4,12(r5)
   41d5c:	21400215 	stw	r5,8(r4)
   41d60:	84400115 	stw	r17,4(r16)
   41d64:	1889883a 	add	r4,r3,r2
   41d68:	11400054 	ori	r5,r2,1
   41d6c:	98c00515 	stw	r3,20(r19)
   41d70:	98c00415 	stw	r3,16(r19)
   41d74:	20800015 	stw	r2,0(r4)
   41d78:	1a400315 	stw	r9,12(r3)
   41d7c:	1a400215 	stw	r9,8(r3)
   41d80:	19400115 	stw	r5,4(r3)
   41d84:	9009883a 	mov	r4,r18
   41d88:	004b1140 	call	4b114 <__malloc_unlock>
   41d8c:	80800204 	addi	r2,r16,8
   41d90:	003f7b06 	br	41b80 <_malloc_r+0xb8>
   41d94:	8808d0fa 	srli	r4,r17,3
   41d98:	210b883a 	add	r5,r4,r4
   41d9c:	003f9106 	br	41be4 <_malloc_r+0x11c>
   41da0:	80c7883a 	add	r3,r16,r3
   41da4:	19400117 	ldw	r5,4(r3)
   41da8:	80800317 	ldw	r2,12(r16)
   41dac:	81000217 	ldw	r4,8(r16)
   41db0:	29400054 	ori	r5,r5,1
   41db4:	19400115 	stw	r5,4(r3)
   41db8:	20800315 	stw	r2,12(r4)
   41dbc:	11000215 	stw	r4,8(r2)
   41dc0:	9009883a 	mov	r4,r18
   41dc4:	004b1140 	call	4b114 <__malloc_unlock>
   41dc8:	80800204 	addi	r2,r16,8
   41dcc:	003f6c06 	br	41b80 <_malloc_r+0xb8>
   41dd0:	8085883a 	add	r2,r16,r2
   41dd4:	10c00117 	ldw	r3,4(r2)
   41dd8:	9009883a 	mov	r4,r18
   41ddc:	18c00054 	ori	r3,r3,1
   41de0:	10c00115 	stw	r3,4(r2)
   41de4:	004b1140 	call	4b114 <__malloc_unlock>
   41de8:	80800204 	addi	r2,r16,8
   41dec:	003f6406 	br	41b80 <_malloc_r+0xb8>
   41df0:	9c000217 	ldw	r16,8(r19)
   41df4:	00bfff04 	movi	r2,-4
   41df8:	85400117 	ldw	r21,4(r16)
   41dfc:	a8aa703a 	and	r21,r21,r2
   41e00:	ac400336 	bltu	r21,r17,41e10 <_malloc_r+0x348>
   41e04:	ac45c83a 	sub	r2,r21,r17
   41e08:	00c003c4 	movi	r3,15
   41e0c:	18805316 	blt	r3,r2,41f5c <_malloc_r+0x494>
   41e10:	d5e6f617 	ldw	r23,-25640(gp)
   41e14:	d0e00217 	ldw	r3,-32760(gp)
   41e18:	00bfffc4 	movi	r2,-1
   41e1c:	8579883a 	add	fp,r16,r21
   41e20:	8def883a 	add	r23,r17,r23
   41e24:	1880d226 	beq	r3,r2,42170 <_malloc_r+0x6a8>
   41e28:	bdc403c4 	addi	r23,r23,4111
   41e2c:	00bc0004 	movi	r2,-4096
   41e30:	b8ae703a 	and	r23,r23,r2
   41e34:	9009883a 	mov	r4,r18
   41e38:	b80b883a 	mov	r5,r23
   41e3c:	00428480 	call	42848 <_sbrk_r>
   41e40:	1029883a 	mov	r20,r2
   41e44:	00bfffc4 	movi	r2,-1
   41e48:	a080d126 	beq	r20,r2,42190 <_malloc_r+0x6c8>
   41e4c:	a7009f36 	bltu	r20,fp,420cc <_malloc_r+0x604>
   41e50:	05800174 	movhi	r22,5
   41e54:	b5864804 	addi	r22,r22,6432
   41e58:	b0800017 	ldw	r2,0(r22)
   41e5c:	b885883a 	add	r2,r23,r2
   41e60:	b0800015 	stw	r2,0(r22)
   41e64:	e500cf26 	beq	fp,r20,421a4 <_malloc_r+0x6dc>
   41e68:	d1200217 	ldw	r4,-32760(gp)
   41e6c:	00ffffc4 	movi	r3,-1
   41e70:	20c0e026 	beq	r4,r3,421f4 <_malloc_r+0x72c>
   41e74:	a739c83a 	sub	fp,r20,fp
   41e78:	1705883a 	add	r2,r2,fp
   41e7c:	b0800015 	stw	r2,0(r22)
   41e80:	a08001cc 	andi	r2,r20,7
   41e84:	1000a526 	beq	r2,zero,4211c <_malloc_r+0x654>
   41e88:	a0a9c83a 	sub	r20,r20,r2
   41e8c:	00c40204 	movi	r3,4104
   41e90:	a5000204 	addi	r20,r20,8
   41e94:	1885c83a 	sub	r2,r3,r2
   41e98:	a5c7883a 	add	r3,r20,r23
   41e9c:	18c3ffcc 	andi	r3,r3,4095
   41ea0:	10efc83a 	sub	r23,r2,r3
   41ea4:	9009883a 	mov	r4,r18
   41ea8:	b80b883a 	mov	r5,r23
   41eac:	00428480 	call	42848 <_sbrk_r>
   41eb0:	00ffffc4 	movi	r3,-1
   41eb4:	10c0cc26 	beq	r2,r3,421e8 <_malloc_r+0x720>
   41eb8:	1505c83a 	sub	r2,r2,r20
   41ebc:	b887883a 	add	r3,r23,r2
   41ec0:	18c00054 	ori	r3,r3,1
   41ec4:	b0800017 	ldw	r2,0(r22)
   41ec8:	9d000215 	stw	r20,8(r19)
   41ecc:	a0c00115 	stw	r3,4(r20)
   41ed0:	b885883a 	add	r2,r23,r2
   41ed4:	b0800015 	stw	r2,0(r22)
   41ed8:	84c00e26 	beq	r16,r19,41f14 <_malloc_r+0x44c>
   41edc:	00c003c4 	movi	r3,15
   41ee0:	1d40902e 	bgeu	r3,r21,42124 <_malloc_r+0x65c>
   41ee4:	ad7ffd04 	addi	r21,r21,-12
   41ee8:	013ffe04 	movi	r4,-8
   41eec:	a908703a 	and	r4,r21,r4
   41ef0:	810b883a 	add	r5,r16,r4
   41ef4:	01800144 	movi	r6,5
   41ef8:	29800115 	stw	r6,4(r5)
   41efc:	29800215 	stw	r6,8(r5)
   41f00:	81400117 	ldw	r5,4(r16)
   41f04:	2940004c 	andi	r5,r5,1
   41f08:	214ab03a 	or	r5,r4,r5
   41f0c:	81400115 	stw	r5,4(r16)
   41f10:	1900ae36 	bltu	r3,r4,421cc <_malloc_r+0x704>
   41f14:	d0e6f517 	ldw	r3,-25644(gp)
   41f18:	1880012e 	bgeu	r3,r2,41f20 <_malloc_r+0x458>
   41f1c:	d0a6f515 	stw	r2,-25644(gp)
   41f20:	d0e6f417 	ldw	r3,-25648(gp)
   41f24:	9c000217 	ldw	r16,8(r19)
   41f28:	1880012e 	bgeu	r3,r2,41f30 <_malloc_r+0x468>
   41f2c:	d0a6f415 	stw	r2,-25648(gp)
   41f30:	80c00117 	ldw	r3,4(r16)
   41f34:	00bfff04 	movi	r2,-4
   41f38:	1886703a 	and	r3,r3,r2
   41f3c:	1c45c83a 	sub	r2,r3,r17
   41f40:	1c400236 	bltu	r3,r17,41f4c <_malloc_r+0x484>
   41f44:	00c003c4 	movi	r3,15
   41f48:	18800416 	blt	r3,r2,41f5c <_malloc_r+0x494>
   41f4c:	9009883a 	mov	r4,r18
   41f50:	004b1140 	call	4b114 <__malloc_unlock>
   41f54:	0005883a 	mov	r2,zero
   41f58:	003f0906 	br	41b80 <_malloc_r+0xb8>
   41f5c:	88c00054 	ori	r3,r17,1
   41f60:	10800054 	ori	r2,r2,1
   41f64:	80c00115 	stw	r3,4(r16)
   41f68:	8463883a 	add	r17,r16,r17
   41f6c:	88800115 	stw	r2,4(r17)
   41f70:	9009883a 	mov	r4,r18
   41f74:	9c400215 	stw	r17,8(r19)
   41f78:	004b1140 	call	4b114 <__malloc_unlock>
   41f7c:	80800204 	addi	r2,r16,8
   41f80:	003eff06 	br	41b80 <_malloc_r+0xb8>
   41f84:	00800504 	movi	r2,20
   41f88:	1100492e 	bgeu	r2,r4,420b0 <_malloc_r+0x5e8>
   41f8c:	00801504 	movi	r2,84
   41f90:	11005c36 	bltu	r2,r4,42104 <_malloc_r+0x63c>
   41f94:	8808d33a 	srli	r4,r17,12
   41f98:	21001b84 	addi	r4,r4,110
   41f9c:	210b883a 	add	r5,r4,r4
   41fa0:	003f1006 	br	41be4 <_malloc_r+0x11c>
   41fa4:	1006d27a 	srli	r3,r2,9
   41fa8:	01400104 	movi	r5,4
   41fac:	28c0432e 	bgeu	r5,r3,420bc <_malloc_r+0x5f4>
   41fb0:	01400504 	movi	r5,20
   41fb4:	28c07036 	bltu	r5,r3,42178 <_malloc_r+0x6b0>
   41fb8:	194016c4 	addi	r5,r3,91
   41fbc:	294d883a 	add	r6,r5,r5
   41fc0:	318d883a 	add	r6,r6,r6
   41fc4:	318d883a 	add	r6,r6,r6
   41fc8:	998d883a 	add	r6,r19,r6
   41fcc:	30c00217 	ldw	r3,8(r6)
   41fd0:	01c00174 	movhi	r7,5
   41fd4:	39f9b704 	addi	r7,r7,-6436
   41fd8:	19805726 	beq	r3,r6,42138 <_malloc_r+0x670>
   41fdc:	01ffff04 	movi	r7,-4
   41fe0:	19400117 	ldw	r5,4(r3)
   41fe4:	29ca703a 	and	r5,r5,r7
   41fe8:	1140022e 	bgeu	r2,r5,41ff4 <_malloc_r+0x52c>
   41fec:	18c00217 	ldw	r3,8(r3)
   41ff0:	30fffb1e 	bne	r6,r3,41fe0 <_malloc_r+0x518>
   41ff4:	19400317 	ldw	r5,12(r3)
   41ff8:	98800117 	ldw	r2,4(r19)
   41ffc:	81400315 	stw	r5,12(r16)
   42000:	80c00215 	stw	r3,8(r16)
   42004:	2c000215 	stw	r16,8(r5)
   42008:	1c000315 	stw	r16,12(r3)
   4200c:	003f2b06 	br	41cbc <_malloc_r+0x1f4>
   42010:	8445883a 	add	r2,r16,r17
   42014:	8c400054 	ori	r17,r17,1
   42018:	18800515 	stw	r2,20(r3)
   4201c:	18800415 	stw	r2,16(r3)
   42020:	29000054 	ori	r4,r5,1
   42024:	1147883a 	add	r3,r2,r5
   42028:	84400115 	stw	r17,4(r16)
   4202c:	11000115 	stw	r4,4(r2)
   42030:	12400315 	stw	r9,12(r2)
   42034:	12400215 	stw	r9,8(r2)
   42038:	19400015 	stw	r5,0(r3)
   4203c:	9009883a 	mov	r4,r18
   42040:	004b1140 	call	4b114 <__malloc_unlock>
   42044:	80800204 	addi	r2,r16,8
   42048:	003ecd06 	br	41b80 <_malloc_r+0xb8>
   4204c:	18800117 	ldw	r2,4(r3)
   42050:	003f1a06 	br	41cbc <_malloc_r+0x1f4>
   42054:	5ac00044 	addi	r11,r11,1
   42058:	588000cc 	andi	r2,r11,3
   4205c:	52800204 	addi	r10,r10,8
   42060:	103f2e1e 	bne	r2,zero,41d1c <_malloc_r+0x254>
   42064:	20c000cc 	andi	r3,r4,3
   42068:	60bffe04 	addi	r2,r12,-8
   4206c:	18006f26 	beq	r3,zero,4222c <_malloc_r+0x764>
   42070:	63000017 	ldw	r12,0(r12)
   42074:	213fffc4 	addi	r4,r4,-1
   42078:	60bffa26 	beq	r12,r2,42064 <_malloc_r+0x59c>
   4207c:	98800117 	ldw	r2,4(r19)
   42080:	294b883a 	add	r5,r5,r5
   42084:	117f5a36 	bltu	r2,r5,41df0 <_malloc_r+0x328>
   42088:	283f5926 	beq	r5,zero,41df0 <_malloc_r+0x328>
   4208c:	1146703a 	and	r3,r2,r5
   42090:	18001626 	beq	r3,zero,420ec <_malloc_r+0x624>
   42094:	5809883a 	mov	r4,r11
   42098:	003f1a06 	br	41d04 <_malloc_r+0x23c>
   4209c:	80800204 	addi	r2,r16,8
   420a0:	84000517 	ldw	r16,20(r16)
   420a4:	143ea81e 	bne	r2,r16,41b48 <_malloc_r+0x80>
   420a8:	21000084 	addi	r4,r4,2
   420ac:	003ee306 	br	41c3c <_malloc_r+0x174>
   420b0:	210016c4 	addi	r4,r4,91
   420b4:	210b883a 	add	r5,r4,r4
   420b8:	003eca06 	br	41be4 <_malloc_r+0x11c>
   420bc:	100ad1ba 	srli	r5,r2,6
   420c0:	29400e04 	addi	r5,r5,56
   420c4:	294d883a 	add	r6,r5,r5
   420c8:	003fbd06 	br	41fc0 <_malloc_r+0x4f8>
   420cc:	84ff6026 	beq	r16,r19,41e50 <_malloc_r+0x388>
   420d0:	00800174 	movhi	r2,5
   420d4:	10b9b704 	addi	r2,r2,-6436
   420d8:	14000217 	ldw	r16,8(r2)
   420dc:	00bfff04 	movi	r2,-4
   420e0:	80c00117 	ldw	r3,4(r16)
   420e4:	1886703a 	and	r3,r3,r2
   420e8:	003f9406 	br	41f3c <_malloc_r+0x474>
   420ec:	294b883a 	add	r5,r5,r5
   420f0:	1146703a 	and	r3,r2,r5
   420f4:	5ac00104 	addi	r11,r11,4
   420f8:	183ffc26 	beq	r3,zero,420ec <_malloc_r+0x624>
   420fc:	5809883a 	mov	r4,r11
   42100:	003f0006 	br	41d04 <_malloc_r+0x23c>
   42104:	00805504 	movi	r2,340
   42108:	11001336 	bltu	r2,r4,42158 <_malloc_r+0x690>
   4210c:	8808d3fa 	srli	r4,r17,15
   42110:	21001dc4 	addi	r4,r4,119
   42114:	210b883a 	add	r5,r4,r4
   42118:	003eb206 	br	41be4 <_malloc_r+0x11c>
   4211c:	00840004 	movi	r2,4096
   42120:	003f5d06 	br	41e98 <_malloc_r+0x3d0>
   42124:	00800044 	movi	r2,1
   42128:	a0800115 	stw	r2,4(r20)
   4212c:	a021883a 	mov	r16,r20
   42130:	0007883a 	mov	r3,zero
   42134:	003f8106 	br	41f3c <_malloc_r+0x474>
   42138:	280bd0ba 	srai	r5,r5,2
   4213c:	01800044 	movi	r6,1
   42140:	38800117 	ldw	r2,4(r7)
   42144:	314c983a 	sll	r6,r6,r5
   42148:	180b883a 	mov	r5,r3
   4214c:	3084b03a 	or	r2,r6,r2
   42150:	38800115 	stw	r2,4(r7)
   42154:	003fa906 	br	41ffc <_malloc_r+0x534>
   42158:	00815504 	movi	r2,1364
   4215c:	11001836 	bltu	r2,r4,421c0 <_malloc_r+0x6f8>
   42160:	8808d4ba 	srli	r4,r17,18
   42164:	21001f04 	addi	r4,r4,124
   42168:	210b883a 	add	r5,r4,r4
   4216c:	003e9d06 	br	41be4 <_malloc_r+0x11c>
   42170:	bdc00404 	addi	r23,r23,16
   42174:	003f2f06 	br	41e34 <_malloc_r+0x36c>
   42178:	01401504 	movi	r5,84
   4217c:	28c01f36 	bltu	r5,r3,421fc <_malloc_r+0x734>
   42180:	100ad33a 	srli	r5,r2,12
   42184:	29401b84 	addi	r5,r5,110
   42188:	294d883a 	add	r6,r5,r5
   4218c:	003f8c06 	br	41fc0 <_malloc_r+0x4f8>
   42190:	9c000217 	ldw	r16,8(r19)
   42194:	00bfff04 	movi	r2,-4
   42198:	80c00117 	ldw	r3,4(r16)
   4219c:	1886703a 	and	r3,r3,r2
   421a0:	003f6606 	br	41f3c <_malloc_r+0x474>
   421a4:	e0c3ffcc 	andi	r3,fp,4095
   421a8:	183f2f1e 	bne	r3,zero,41e68 <_malloc_r+0x3a0>
   421ac:	98c00217 	ldw	r3,8(r19)
   421b0:	bd49883a 	add	r4,r23,r21
   421b4:	21000054 	ori	r4,r4,1
   421b8:	19000115 	stw	r4,4(r3)
   421bc:	003f5506 	br	41f14 <_malloc_r+0x44c>
   421c0:	01403f04 	movi	r5,252
   421c4:	01001f84 	movi	r4,126
   421c8:	003e8606 	br	41be4 <_malloc_r+0x11c>
   421cc:	9009883a 	mov	r4,r18
   421d0:	81400204 	addi	r5,r16,8
   421d4:	0040ff00 	call	40ff0 <_free_r>
   421d8:	00800174 	movhi	r2,5
   421dc:	10864804 	addi	r2,r2,6432
   421e0:	10800017 	ldw	r2,0(r2)
   421e4:	003f4b06 	br	41f14 <_malloc_r+0x44c>
   421e8:	00c00044 	movi	r3,1
   421ec:	002f883a 	mov	r23,zero
   421f0:	003f3406 	br	41ec4 <_malloc_r+0x3fc>
   421f4:	d5200215 	stw	r20,-32760(gp)
   421f8:	003f2106 	br	41e80 <_malloc_r+0x3b8>
   421fc:	01405504 	movi	r5,340
   42200:	28c00436 	bltu	r5,r3,42214 <_malloc_r+0x74c>
   42204:	100ad3fa 	srli	r5,r2,15
   42208:	29401dc4 	addi	r5,r5,119
   4220c:	294d883a 	add	r6,r5,r5
   42210:	003f6b06 	br	41fc0 <_malloc_r+0x4f8>
   42214:	01415504 	movi	r5,1364
   42218:	28c00936 	bltu	r5,r3,42240 <_malloc_r+0x778>
   4221c:	100ad4ba 	srli	r5,r2,18
   42220:	29401f04 	addi	r5,r5,124
   42224:	294d883a 	add	r6,r5,r5
   42228:	003f6506 	br	41fc0 <_malloc_r+0x4f8>
   4222c:	98800117 	ldw	r2,4(r19)
   42230:	0146303a 	nor	r3,zero,r5
   42234:	1884703a 	and	r2,r3,r2
   42238:	98800115 	stw	r2,4(r19)
   4223c:	003f9006 	br	42080 <_malloc_r+0x5b8>
   42240:	01803f04 	movi	r6,252
   42244:	01401f84 	movi	r5,126
   42248:	003f5d06 	br	41fc0 <_malloc_r+0x4f8>

0004224c <memset>:
   4224c:	00c000c4 	movi	r3,3
   42250:	2005883a 	mov	r2,r4
   42254:	29403fcc 	andi	r5,r5,255
   42258:	19802d2e 	bgeu	r3,r6,42310 <memset+0xc4>
   4225c:	20c6703a 	and	r3,r4,r3
   42260:	18002e1e 	bne	r3,zero,4231c <memset+0xd0>
   42264:	2806923a 	slli	r3,r5,8
   42268:	010003c4 	movi	r4,15
   4226c:	3011883a 	mov	r8,r6
   42270:	1946b03a 	or	r3,r3,r5
   42274:	180e943a 	slli	r7,r3,16
   42278:	38ceb03a 	or	r7,r7,r3
   4227c:	1007883a 	mov	r3,r2
   42280:	21800f2e 	bgeu	r4,r6,422c0 <memset+0x74>
   42284:	19c00015 	stw	r7,0(r3)
   42288:	19c00115 	stw	r7,4(r3)
   4228c:	19c00215 	stw	r7,8(r3)
   42290:	19c00315 	stw	r7,12(r3)
   42294:	423ffc04 	addi	r8,r8,-16
   42298:	18c00404 	addi	r3,r3,16
   4229c:	223ff936 	bltu	r4,r8,42284 <memset+0x38>
   422a0:	30fffc04 	addi	r3,r6,-16
   422a4:	1806d13a 	srli	r3,r3,4
   422a8:	318003cc 	andi	r6,r6,15
   422ac:	010000c4 	movi	r4,3
   422b0:	18c00044 	addi	r3,r3,1
   422b4:	1806913a 	slli	r3,r3,4
   422b8:	10c7883a 	add	r3,r2,r3
   422bc:	21800e2e 	bgeu	r4,r6,422f8 <memset+0xac>
   422c0:	1813883a 	mov	r9,r3
   422c4:	3011883a 	mov	r8,r6
   422c8:	010000c4 	movi	r4,3
   422cc:	49c00015 	stw	r7,0(r9)
   422d0:	423fff04 	addi	r8,r8,-4
   422d4:	4a400104 	addi	r9,r9,4
   422d8:	223ffc36 	bltu	r4,r8,422cc <memset+0x80>
   422dc:	313fff04 	addi	r4,r6,-4
   422e0:	2008d0ba 	srli	r4,r4,2
   422e4:	318000cc 	andi	r6,r6,3
   422e8:	21000044 	addi	r4,r4,1
   422ec:	2109883a 	add	r4,r4,r4
   422f0:	2109883a 	add	r4,r4,r4
   422f4:	1907883a 	add	r3,r3,r4
   422f8:	30000a26 	beq	r6,zero,42324 <memset+0xd8>
   422fc:	198d883a 	add	r6,r3,r6
   42300:	19400005 	stb	r5,0(r3)
   42304:	18c00044 	addi	r3,r3,1
   42308:	19bffd1e 	bne	r3,r6,42300 <memset+0xb4>
   4230c:	f800283a 	ret
   42310:	2007883a 	mov	r3,r4
   42314:	303ff91e 	bne	r6,zero,422fc <memset+0xb0>
   42318:	00000206 	br	42324 <memset+0xd8>
   4231c:	2007883a 	mov	r3,r4
   42320:	003ff606 	br	422fc <memset+0xb0>
   42324:	f800283a 	ret

00042328 <_open_r>:
   42328:	defffd04 	addi	sp,sp,-12
   4232c:	dc400115 	stw	r17,4(sp)
   42330:	dc000015 	stw	r16,0(sp)
   42334:	2023883a 	mov	r17,r4
   42338:	04000174 	movhi	r16,5
   4233c:	84063b04 	addi	r16,r16,6380
   42340:	2809883a 	mov	r4,r5
   42344:	300b883a 	mov	r5,r6
   42348:	380d883a 	mov	r6,r7
   4234c:	dfc00215 	stw	ra,8(sp)
   42350:	80000015 	stw	zero,0(r16)
   42354:	004b2740 	call	4b274 <open>
   42358:	00ffffc4 	movi	r3,-1
   4235c:	10c00526 	beq	r2,r3,42374 <_open_r+0x4c>
   42360:	dfc00217 	ldw	ra,8(sp)
   42364:	dc400117 	ldw	r17,4(sp)
   42368:	dc000017 	ldw	r16,0(sp)
   4236c:	dec00304 	addi	sp,sp,12
   42370:	f800283a 	ret
   42374:	80c00017 	ldw	r3,0(r16)
   42378:	183ff926 	beq	r3,zero,42360 <_open_r+0x38>
   4237c:	88c00015 	stw	r3,0(r17)
   42380:	dfc00217 	ldw	ra,8(sp)
   42384:	dc400117 	ldw	r17,4(sp)
   42388:	dc000017 	ldw	r16,0(sp)
   4238c:	dec00304 	addi	sp,sp,12
   42390:	f800283a 	ret

00042394 <_printf_r>:
   42394:	defffd04 	addi	sp,sp,-12
   42398:	dfc00015 	stw	ra,0(sp)
   4239c:	d9800115 	stw	r6,4(sp)
   423a0:	d9c00215 	stw	r7,8(sp)
   423a4:	280d883a 	mov	r6,r5
   423a8:	21400217 	ldw	r5,8(r4)
   423ac:	d9c00104 	addi	r7,sp,4
   423b0:	0042bd80 	call	42bd8 <___vfprintf_internal_r>
   423b4:	dfc00017 	ldw	ra,0(sp)
   423b8:	dec00304 	addi	sp,sp,12
   423bc:	f800283a 	ret

000423c0 <printf>:
   423c0:	defffc04 	addi	sp,sp,-16
   423c4:	dfc00015 	stw	ra,0(sp)
   423c8:	d9400115 	stw	r5,4(sp)
   423cc:	d9800215 	stw	r6,8(sp)
   423d0:	d9c00315 	stw	r7,12(sp)
   423d4:	00800174 	movhi	r2,5
   423d8:	10bf4904 	addi	r2,r2,-732
   423dc:	10800017 	ldw	r2,0(r2)
   423e0:	200b883a 	mov	r5,r4
   423e4:	d9800104 	addi	r6,sp,4
   423e8:	11000217 	ldw	r4,8(r2)
   423ec:	0044a540 	call	44a54 <__vfprintf_internal>
   423f0:	dfc00017 	ldw	ra,0(sp)
   423f4:	dec00404 	addi	sp,sp,16
   423f8:	f800283a 	ret

000423fc <_putc_r>:
   423fc:	defffc04 	addi	sp,sp,-16
   42400:	dc000215 	stw	r16,8(sp)
   42404:	dfc00315 	stw	ra,12(sp)
   42408:	2021883a 	mov	r16,r4
   4240c:	20000226 	beq	r4,zero,42418 <_putc_r+0x1c>
   42410:	20800e17 	ldw	r2,56(r4)
   42414:	10001d26 	beq	r2,zero,4248c <_putc_r+0x90>
   42418:	30800217 	ldw	r2,8(r6)
   4241c:	10bfffc4 	addi	r2,r2,-1
   42420:	30800215 	stw	r2,8(r6)
   42424:	10000a16 	blt	r2,zero,42450 <_putc_r+0x54>
   42428:	30800017 	ldw	r2,0(r6)
   4242c:	11400005 	stb	r5,0(r2)
   42430:	30800017 	ldw	r2,0(r6)
   42434:	10c00044 	addi	r3,r2,1
   42438:	10800003 	ldbu	r2,0(r2)
   4243c:	30c00015 	stw	r3,0(r6)
   42440:	dfc00317 	ldw	ra,12(sp)
   42444:	dc000217 	ldw	r16,8(sp)
   42448:	dec00404 	addi	sp,sp,16
   4244c:	f800283a 	ret
   42450:	30c00617 	ldw	r3,24(r6)
   42454:	10c01316 	blt	r2,r3,424a4 <_putc_r+0xa8>
   42458:	30800017 	ldw	r2,0(r6)
   4245c:	01000284 	movi	r4,10
   42460:	11400005 	stb	r5,0(r2)
   42464:	30c00017 	ldw	r3,0(r6)
   42468:	19400003 	ldbu	r5,0(r3)
   4246c:	29000d26 	beq	r5,r4,424a4 <_putc_r+0xa8>
   42470:	18c00044 	addi	r3,r3,1
   42474:	2805883a 	mov	r2,r5
   42478:	30c00015 	stw	r3,0(r6)
   4247c:	dfc00317 	ldw	ra,12(sp)
   42480:	dc000217 	ldw	r16,8(sp)
   42484:	dec00404 	addi	sp,sp,16
   42488:	f800283a 	ret
   4248c:	d9400015 	stw	r5,0(sp)
   42490:	d9800115 	stw	r6,4(sp)
   42494:	0040a300 	call	40a30 <__sinit>
   42498:	d9800117 	ldw	r6,4(sp)
   4249c:	d9400017 	ldw	r5,0(sp)
   424a0:	003fdd06 	br	42418 <_putc_r+0x1c>
   424a4:	8009883a 	mov	r4,r16
   424a8:	dfc00317 	ldw	ra,12(sp)
   424ac:	dc000217 	ldw	r16,8(sp)
   424b0:	dec00404 	addi	sp,sp,16
   424b4:	0044a781 	jmpi	44a78 <__swbuf_r>

000424b8 <putc>:
   424b8:	defffc04 	addi	sp,sp,-16
   424bc:	dc400115 	stw	r17,4(sp)
   424c0:	04400174 	movhi	r17,5
   424c4:	8c7f4904 	addi	r17,r17,-732
   424c8:	88800017 	ldw	r2,0(r17)
   424cc:	dc800215 	stw	r18,8(sp)
   424d0:	dc000015 	stw	r16,0(sp)
   424d4:	dfc00315 	stw	ra,12(sp)
   424d8:	2025883a 	mov	r18,r4
   424dc:	2821883a 	mov	r16,r5
   424e0:	10000226 	beq	r2,zero,424ec <putc+0x34>
   424e4:	10c00e17 	ldw	r3,56(r2)
   424e8:	18002126 	beq	r3,zero,42570 <putc+0xb8>
   424ec:	80800217 	ldw	r2,8(r16)
   424f0:	10bfffc4 	addi	r2,r2,-1
   424f4:	80800215 	stw	r2,8(r16)
   424f8:	10000c16 	blt	r2,zero,4252c <putc+0x74>
   424fc:	80800017 	ldw	r2,0(r16)
   42500:	14800005 	stb	r18,0(r2)
   42504:	80800017 	ldw	r2,0(r16)
   42508:	10c00044 	addi	r3,r2,1
   4250c:	10800003 	ldbu	r2,0(r2)
   42510:	80c00015 	stw	r3,0(r16)
   42514:	dfc00317 	ldw	ra,12(sp)
   42518:	dc800217 	ldw	r18,8(sp)
   4251c:	dc400117 	ldw	r17,4(sp)
   42520:	dc000017 	ldw	r16,0(sp)
   42524:	dec00404 	addi	sp,sp,16
   42528:	f800283a 	ret
   4252c:	80c00617 	ldw	r3,24(r16)
   42530:	10c01216 	blt	r2,r3,4257c <putc+0xc4>
   42534:	80800017 	ldw	r2,0(r16)
   42538:	01000284 	movi	r4,10
   4253c:	14800005 	stb	r18,0(r2)
   42540:	80c00017 	ldw	r3,0(r16)
   42544:	19400003 	ldbu	r5,0(r3)
   42548:	29001526 	beq	r5,r4,425a0 <putc+0xe8>
   4254c:	18c00044 	addi	r3,r3,1
   42550:	2805883a 	mov	r2,r5
   42554:	80c00015 	stw	r3,0(r16)
   42558:	dfc00317 	ldw	ra,12(sp)
   4255c:	dc800217 	ldw	r18,8(sp)
   42560:	dc400117 	ldw	r17,4(sp)
   42564:	dc000017 	ldw	r16,0(sp)
   42568:	dec00404 	addi	sp,sp,16
   4256c:	f800283a 	ret
   42570:	1009883a 	mov	r4,r2
   42574:	0040a300 	call	40a30 <__sinit>
   42578:	003fdc06 	br	424ec <putc+0x34>
   4257c:	89000017 	ldw	r4,0(r17)
   42580:	900b883a 	mov	r5,r18
   42584:	800d883a 	mov	r6,r16
   42588:	dfc00317 	ldw	ra,12(sp)
   4258c:	dc800217 	ldw	r18,8(sp)
   42590:	dc400117 	ldw	r17,4(sp)
   42594:	dc000017 	ldw	r16,0(sp)
   42598:	dec00404 	addi	sp,sp,16
   4259c:	0044a781 	jmpi	44a78 <__swbuf_r>
   425a0:	89000017 	ldw	r4,0(r17)
   425a4:	003ff706 	br	42584 <putc+0xcc>

000425a8 <_puts_r>:
   425a8:	defff604 	addi	sp,sp,-40
   425ac:	dc400815 	stw	r17,32(sp)
   425b0:	2023883a 	mov	r17,r4
   425b4:	2809883a 	mov	r4,r5
   425b8:	dc000715 	stw	r16,28(sp)
   425bc:	dfc00915 	stw	ra,36(sp)
   425c0:	2821883a 	mov	r16,r5
   425c4:	0042b180 	call	42b18 <strlen>
   425c8:	10c00044 	addi	r3,r2,1
   425cc:	d8800115 	stw	r2,4(sp)
   425d0:	89400217 	ldw	r5,8(r17)
   425d4:	00800174 	movhi	r2,5
   425d8:	10b7cd04 	addi	r2,r2,-8396
   425dc:	d8800215 	stw	r2,8(sp)
   425e0:	00800044 	movi	r2,1
   425e4:	d8800315 	stw	r2,12(sp)
   425e8:	8809883a 	mov	r4,r17
   425ec:	00800084 	movi	r2,2
   425f0:	d9800404 	addi	r6,sp,16
   425f4:	dc000015 	stw	r16,0(sp)
   425f8:	d8c00615 	stw	r3,24(sp)
   425fc:	dec00415 	stw	sp,16(sp)
   42600:	d8800515 	stw	r2,20(sp)
   42604:	00467040 	call	46704 <__sfvwrite_r>
   42608:	1000061e 	bne	r2,zero,42624 <_puts_r+0x7c>
   4260c:	00800284 	movi	r2,10
   42610:	dfc00917 	ldw	ra,36(sp)
   42614:	dc400817 	ldw	r17,32(sp)
   42618:	dc000717 	ldw	r16,28(sp)
   4261c:	dec00a04 	addi	sp,sp,40
   42620:	f800283a 	ret
   42624:	00bfffc4 	movi	r2,-1
   42628:	003ff906 	br	42610 <_puts_r+0x68>

0004262c <puts>:
   4262c:	00800174 	movhi	r2,5
   42630:	10bf4904 	addi	r2,r2,-732
   42634:	200b883a 	mov	r5,r4
   42638:	11000017 	ldw	r4,0(r2)
   4263c:	00425a81 	jmpi	425a8 <_puts_r>

00042640 <lflush>:
   42640:	20c0030b 	ldhu	r3,12(r4)
   42644:	00800244 	movi	r2,9
   42648:	18c0024c 	andi	r3,r3,9
   4264c:	18800226 	beq	r3,r2,42658 <lflush+0x18>
   42650:	0005883a 	mov	r2,zero
   42654:	f800283a 	ret
   42658:	004095c1 	jmpi	4095c <fflush>

0004265c <__srefill_r>:
   4265c:	defffd04 	addi	sp,sp,-12
   42660:	dc400115 	stw	r17,4(sp)
   42664:	dc000015 	stw	r16,0(sp)
   42668:	dfc00215 	stw	ra,8(sp)
   4266c:	2023883a 	mov	r17,r4
   42670:	2821883a 	mov	r16,r5
   42674:	20000226 	beq	r4,zero,42680 <__srefill_r+0x24>
   42678:	20800e17 	ldw	r2,56(r4)
   4267c:	10004426 	beq	r2,zero,42790 <__srefill_r+0x134>
   42680:	8080030b 	ldhu	r2,12(r16)
   42684:	80000115 	stw	zero,4(r16)
   42688:	10c0080c 	andi	r3,r2,32
   4268c:	18ffffcc 	andi	r3,r3,65535
   42690:	18e0001c 	xori	r3,r3,32768
   42694:	18e00004 	addi	r3,r3,-32768
   42698:	1800371e 	bne	r3,zero,42778 <__srefill_r+0x11c>
   4269c:	10c0010c 	andi	r3,r2,4
   426a0:	18ffffcc 	andi	r3,r3,65535
   426a4:	18e0001c 	xori	r3,r3,32768
   426a8:	18e00004 	addi	r3,r3,-32768
   426ac:	18002226 	beq	r3,zero,42738 <__srefill_r+0xdc>
   426b0:	81400c17 	ldw	r5,48(r16)
   426b4:	28000826 	beq	r5,zero,426d8 <__srefill_r+0x7c>
   426b8:	80801004 	addi	r2,r16,64
   426bc:	28800226 	beq	r5,r2,426c8 <__srefill_r+0x6c>
   426c0:	8809883a 	mov	r4,r17
   426c4:	0040ff00 	call	40ff0 <_free_r>
   426c8:	80800f17 	ldw	r2,60(r16)
   426cc:	80000c15 	stw	zero,48(r16)
   426d0:	80800115 	stw	r2,4(r16)
   426d4:	1000401e 	bne	r2,zero,427d8 <__srefill_r+0x17c>
   426d8:	80800417 	ldw	r2,16(r16)
   426dc:	10005026 	beq	r2,zero,42820 <__srefill_r+0x1c4>
   426e0:	8080030b 	ldhu	r2,12(r16)
   426e4:	108000cc 	andi	r2,r2,3
   426e8:	10002b1e 	bne	r2,zero,42798 <__srefill_r+0x13c>
   426ec:	81800417 	ldw	r6,16(r16)
   426f0:	80800817 	ldw	r2,32(r16)
   426f4:	81400717 	ldw	r5,28(r16)
   426f8:	81c00517 	ldw	r7,20(r16)
   426fc:	8809883a 	mov	r4,r17
   42700:	81800015 	stw	r6,0(r16)
   42704:	103ee83a 	callr	r2
   42708:	8100030b 	ldhu	r4,12(r16)
   4270c:	00f7ffc4 	movi	r3,-8193
   42710:	80800115 	stw	r2,4(r16)
   42714:	20c6703a 	and	r3,r4,r3
   42718:	80c0030d 	sth	r3,12(r16)
   4271c:	0080130e 	bge	zero,r2,4276c <__srefill_r+0x110>
   42720:	0005883a 	mov	r2,zero
   42724:	dfc00217 	ldw	ra,8(sp)
   42728:	dc400117 	ldw	r17,4(sp)
   4272c:	dc000017 	ldw	r16,0(sp)
   42730:	dec00304 	addi	sp,sp,12
   42734:	f800283a 	ret
   42738:	10c0040c 	andi	r3,r2,16
   4273c:	18ffffcc 	andi	r3,r3,65535
   42740:	18e0001c 	xori	r3,r3,32768
   42744:	18e00004 	addi	r3,r3,-32768
   42748:	18003926 	beq	r3,zero,42830 <__srefill_r+0x1d4>
   4274c:	10c0020c 	andi	r3,r2,8
   42750:	18ffffcc 	andi	r3,r3,65535
   42754:	18e0001c 	xori	r3,r3,32768
   42758:	18e00004 	addi	r3,r3,-32768
   4275c:	1800261e 	bne	r3,zero,427f8 <__srefill_r+0x19c>
   42760:	10800114 	ori	r2,r2,4
   42764:	8080030d 	sth	r2,12(r16)
   42768:	003fdb06 	br	426d8 <__srefill_r+0x7c>
   4276c:	1000111e 	bne	r2,zero,427b4 <__srefill_r+0x158>
   42770:	18c00814 	ori	r3,r3,32
   42774:	80c0030d 	sth	r3,12(r16)
   42778:	00bfffc4 	movi	r2,-1
   4277c:	dfc00217 	ldw	ra,8(sp)
   42780:	dc400117 	ldw	r17,4(sp)
   42784:	dc000017 	ldw	r16,0(sp)
   42788:	dec00304 	addi	sp,sp,12
   4278c:	f800283a 	ret
   42790:	0040a300 	call	40a30 <__sinit>
   42794:	003fba06 	br	42680 <__srefill_r+0x24>
   42798:	00800174 	movhi	r2,5
   4279c:	10bf4804 	addi	r2,r2,-736
   427a0:	11000017 	ldw	r4,0(r2)
   427a4:	01400134 	movhi	r5,4
   427a8:	29499004 	addi	r5,r5,9792
   427ac:	00417c00 	call	417c0 <_fwalk>
   427b0:	003fce06 	br	426ec <__srefill_r+0x90>
   427b4:	18c01014 	ori	r3,r3,64
   427b8:	00bfffc4 	movi	r2,-1
   427bc:	80000115 	stw	zero,4(r16)
   427c0:	80c0030d 	sth	r3,12(r16)
   427c4:	dfc00217 	ldw	ra,8(sp)
   427c8:	dc400117 	ldw	r17,4(sp)
   427cc:	dc000017 	ldw	r16,0(sp)
   427d0:	dec00304 	addi	sp,sp,12
   427d4:	f800283a 	ret
   427d8:	80c00e17 	ldw	r3,56(r16)
   427dc:	0005883a 	mov	r2,zero
   427e0:	80c00015 	stw	r3,0(r16)
   427e4:	dfc00217 	ldw	ra,8(sp)
   427e8:	dc400117 	ldw	r17,4(sp)
   427ec:	dc000017 	ldw	r16,0(sp)
   427f0:	dec00304 	addi	sp,sp,12
   427f4:	f800283a 	ret
   427f8:	8809883a 	mov	r4,r17
   427fc:	800b883a 	mov	r5,r16
   42800:	00407740 	call	40774 <_fflush_r>
   42804:	103fdc1e 	bne	r2,zero,42778 <__srefill_r+0x11c>
   42808:	8080030b 	ldhu	r2,12(r16)
   4280c:	00fffdc4 	movi	r3,-9
   42810:	80000215 	stw	zero,8(r16)
   42814:	1884703a 	and	r2,r3,r2
   42818:	80000615 	stw	zero,24(r16)
   4281c:	003fd006 	br	42760 <__srefill_r+0x104>
   42820:	8809883a 	mov	r4,r17
   42824:	800b883a 	mov	r5,r16
   42828:	00419200 	call	41920 <__smakebuf_r>
   4282c:	003fac06 	br	426e0 <__srefill_r+0x84>
   42830:	00c00244 	movi	r3,9
   42834:	10801014 	ori	r2,r2,64
   42838:	88c00015 	stw	r3,0(r17)
   4283c:	8080030d 	sth	r2,12(r16)
   42840:	00bfffc4 	movi	r2,-1
   42844:	003fb706 	br	42724 <__srefill_r+0xc8>

00042848 <_sbrk_r>:
   42848:	defffd04 	addi	sp,sp,-12
   4284c:	dc400115 	stw	r17,4(sp)
   42850:	dc000015 	stw	r16,0(sp)
   42854:	2023883a 	mov	r17,r4
   42858:	04000174 	movhi	r16,5
   4285c:	84063b04 	addi	r16,r16,6380
   42860:	2809883a 	mov	r4,r5
   42864:	dfc00215 	stw	ra,8(sp)
   42868:	80000015 	stw	zero,0(r16)
   4286c:	004b5900 	call	4b590 <sbrk>
   42870:	00ffffc4 	movi	r3,-1
   42874:	10c00526 	beq	r2,r3,4288c <_sbrk_r+0x44>
   42878:	dfc00217 	ldw	ra,8(sp)
   4287c:	dc400117 	ldw	r17,4(sp)
   42880:	dc000017 	ldw	r16,0(sp)
   42884:	dec00304 	addi	sp,sp,12
   42888:	f800283a 	ret
   4288c:	80c00017 	ldw	r3,0(r16)
   42890:	183ff926 	beq	r3,zero,42878 <_sbrk_r+0x30>
   42894:	88c00015 	stw	r3,0(r17)
   42898:	dfc00217 	ldw	ra,8(sp)
   4289c:	dc400117 	ldw	r17,4(sp)
   428a0:	dc000017 	ldw	r16,0(sp)
   428a4:	dec00304 	addi	sp,sp,12
   428a8:	f800283a 	ret

000428ac <__sread>:
   428ac:	defffe04 	addi	sp,sp,-8
   428b0:	dc000015 	stw	r16,0(sp)
   428b4:	2821883a 	mov	r16,r5
   428b8:	2940038f 	ldh	r5,14(r5)
   428bc:	dfc00115 	stw	ra,4(sp)
   428c0:	00481a80 	call	481a8 <_read_r>
   428c4:	10000716 	blt	r2,zero,428e4 <__sread+0x38>
   428c8:	80c01417 	ldw	r3,80(r16)
   428cc:	1887883a 	add	r3,r3,r2
   428d0:	80c01415 	stw	r3,80(r16)
   428d4:	dfc00117 	ldw	ra,4(sp)
   428d8:	dc000017 	ldw	r16,0(sp)
   428dc:	dec00204 	addi	sp,sp,8
   428e0:	f800283a 	ret
   428e4:	80c0030b 	ldhu	r3,12(r16)
   428e8:	18fbffcc 	andi	r3,r3,61439
   428ec:	80c0030d 	sth	r3,12(r16)
   428f0:	dfc00117 	ldw	ra,4(sp)
   428f4:	dc000017 	ldw	r16,0(sp)
   428f8:	dec00204 	addi	sp,sp,8
   428fc:	f800283a 	ret

00042900 <__swrite>:
   42900:	2880030b 	ldhu	r2,12(r5)
   42904:	defffb04 	addi	sp,sp,-20
   42908:	dcc00315 	stw	r19,12(sp)
   4290c:	10c0400c 	andi	r3,r2,256
   42910:	18ffffcc 	andi	r3,r3,65535
   42914:	18e0001c 	xori	r3,r3,32768
   42918:	dc800215 	stw	r18,8(sp)
   4291c:	dc400115 	stw	r17,4(sp)
   42920:	dc000015 	stw	r16,0(sp)
   42924:	dfc00415 	stw	ra,16(sp)
   42928:	18e00004 	addi	r3,r3,-32768
   4292c:	2821883a 	mov	r16,r5
   42930:	2027883a 	mov	r19,r4
   42934:	3025883a 	mov	r18,r6
   42938:	3823883a 	mov	r17,r7
   4293c:	18000526 	beq	r3,zero,42954 <__swrite+0x54>
   42940:	2940038f 	ldh	r5,14(r5)
   42944:	000d883a 	mov	r6,zero
   42948:	01c00084 	movi	r7,2
   4294c:	0046d280 	call	46d28 <_lseek_r>
   42950:	8080030b 	ldhu	r2,12(r16)
   42954:	8140038f 	ldh	r5,14(r16)
   42958:	10bbffcc 	andi	r2,r2,61439
   4295c:	9809883a 	mov	r4,r19
   42960:	900d883a 	mov	r6,r18
   42964:	880f883a 	mov	r7,r17
   42968:	8080030d 	sth	r2,12(r16)
   4296c:	dfc00417 	ldw	ra,16(sp)
   42970:	dcc00317 	ldw	r19,12(sp)
   42974:	dc800217 	ldw	r18,8(sp)
   42978:	dc400117 	ldw	r17,4(sp)
   4297c:	dc000017 	ldw	r16,0(sp)
   42980:	dec00504 	addi	sp,sp,20
   42984:	0044bd01 	jmpi	44bd0 <_write_r>

00042988 <__sseek>:
   42988:	defffe04 	addi	sp,sp,-8
   4298c:	dc000015 	stw	r16,0(sp)
   42990:	2821883a 	mov	r16,r5
   42994:	2940038f 	ldh	r5,14(r5)
   42998:	dfc00115 	stw	ra,4(sp)
   4299c:	0046d280 	call	46d28 <_lseek_r>
   429a0:	00ffffc4 	movi	r3,-1
   429a4:	10c00826 	beq	r2,r3,429c8 <__sseek+0x40>
   429a8:	80c0030b 	ldhu	r3,12(r16)
   429ac:	80801415 	stw	r2,80(r16)
   429b0:	18c40014 	ori	r3,r3,4096
   429b4:	80c0030d 	sth	r3,12(r16)
   429b8:	dfc00117 	ldw	ra,4(sp)
   429bc:	dc000017 	ldw	r16,0(sp)
   429c0:	dec00204 	addi	sp,sp,8
   429c4:	f800283a 	ret
   429c8:	80c0030b 	ldhu	r3,12(r16)
   429cc:	18fbffcc 	andi	r3,r3,61439
   429d0:	80c0030d 	sth	r3,12(r16)
   429d4:	dfc00117 	ldw	ra,4(sp)
   429d8:	dc000017 	ldw	r16,0(sp)
   429dc:	dec00204 	addi	sp,sp,8
   429e0:	f800283a 	ret

000429e4 <__sclose>:
   429e4:	2940038f 	ldh	r5,14(r5)
   429e8:	0044db01 	jmpi	44db0 <_close_r>

000429ec <strcat>:
   429ec:	defffe04 	addi	sp,sp,-8
   429f0:	dc000015 	stw	r16,0(sp)
   429f4:	dfc00115 	stw	ra,4(sp)
   429f8:	208000cc 	andi	r2,r4,3
   429fc:	2021883a 	mov	r16,r4
   42a00:	1000141e 	bne	r2,zero,42a54 <strcat+0x68>
   42a04:	20800017 	ldw	r2,0(r4)
   42a08:	027fbff4 	movhi	r9,65279
   42a0c:	4a7fbfc4 	addi	r9,r9,-257
   42a10:	02202074 	movhi	r8,32897
   42a14:	42202004 	addi	r8,r8,-32640
   42a18:	1247883a 	add	r3,r2,r9
   42a1c:	0084303a 	nor	r2,zero,r2
   42a20:	1884703a 	and	r2,r3,r2
   42a24:	1204703a 	and	r2,r2,r8
   42a28:	2007883a 	mov	r3,r4
   42a2c:	1000091e 	bne	r2,zero,42a54 <strcat+0x68>
   42a30:	18c00104 	addi	r3,r3,4
   42a34:	19800017 	ldw	r6,0(r3)
   42a38:	324f883a 	add	r7,r6,r9
   42a3c:	018c303a 	nor	r6,zero,r6
   42a40:	398c703a 	and	r6,r7,r6
   42a44:	320c703a 	and	r6,r6,r8
   42a48:	303ff926 	beq	r6,zero,42a30 <strcat+0x44>
   42a4c:	1809883a 	mov	r4,r3
   42a50:	00000106 	br	42a58 <strcat+0x6c>
   42a54:	8009883a 	mov	r4,r16
   42a58:	20800007 	ldb	r2,0(r4)
   42a5c:	10000326 	beq	r2,zero,42a6c <strcat+0x80>
   42a60:	21000044 	addi	r4,r4,1
   42a64:	20c00007 	ldb	r3,0(r4)
   42a68:	183ffd1e 	bne	r3,zero,42a60 <strcat+0x74>
   42a6c:	0042a840 	call	42a84 <strcpy>
   42a70:	8005883a 	mov	r2,r16
   42a74:	dfc00117 	ldw	ra,4(sp)
   42a78:	dc000017 	ldw	r16,0(sp)
   42a7c:	dec00204 	addi	sp,sp,8
   42a80:	f800283a 	ret

00042a84 <strcpy>:
   42a84:	2906b03a 	or	r3,r5,r4
   42a88:	18c000cc 	andi	r3,r3,3
   42a8c:	2005883a 	mov	r2,r4
   42a90:	18001a1e 	bne	r3,zero,42afc <strcpy+0x78>
   42a94:	29800017 	ldw	r6,0(r5)
   42a98:	02bfbff4 	movhi	r10,65279
   42a9c:	52bfbfc4 	addi	r10,r10,-257
   42aa0:	02602074 	movhi	r9,32897
   42aa4:	4a602004 	addi	r9,r9,-32640
   42aa8:	0188303a 	nor	r4,zero,r6
   42aac:	3287883a 	add	r3,r6,r10
   42ab0:	20c6703a 	and	r3,r4,r3
   42ab4:	1a46703a 	and	r3,r3,r9
   42ab8:	1800101e 	bne	r3,zero,42afc <strcpy+0x78>
   42abc:	1007883a 	mov	r3,r2
   42ac0:	19800015 	stw	r6,0(r3)
   42ac4:	29400104 	addi	r5,r5,4
   42ac8:	29800017 	ldw	r6,0(r5)
   42acc:	18c00104 	addi	r3,r3,4
   42ad0:	0190303a 	nor	r8,zero,r6
   42ad4:	328f883a 	add	r7,r6,r10
   42ad8:	41ce703a 	and	r7,r8,r7
   42adc:	3a4e703a 	and	r7,r7,r9
   42ae0:	383ff726 	beq	r7,zero,42ac0 <strcpy+0x3c>
   42ae4:	29800007 	ldb	r6,0(r5)
   42ae8:	18c00044 	addi	r3,r3,1
   42aec:	29400044 	addi	r5,r5,1
   42af0:	19bfffc5 	stb	r6,-1(r3)
   42af4:	3000021e 	bne	r6,zero,42b00 <strcpy+0x7c>
   42af8:	f800283a 	ret
   42afc:	1007883a 	mov	r3,r2
   42b00:	29800007 	ldb	r6,0(r5)
   42b04:	18c00044 	addi	r3,r3,1
   42b08:	29400044 	addi	r5,r5,1
   42b0c:	19bfffc5 	stb	r6,-1(r3)
   42b10:	303ffb1e 	bne	r6,zero,42b00 <strcpy+0x7c>
   42b14:	f800283a 	ret

00042b18 <strlen>:
   42b18:	208000cc 	andi	r2,r4,3
   42b1c:	10001f1e 	bne	r2,zero,42b9c <strlen+0x84>
   42b20:	20800017 	ldw	r2,0(r4)
   42b24:	01ffbff4 	movhi	r7,65279
   42b28:	39ffbfc4 	addi	r7,r7,-257
   42b2c:	01a02074 	movhi	r6,32897
   42b30:	31a02004 	addi	r6,r6,-32640
   42b34:	11c7883a 	add	r3,r2,r7
   42b38:	0084303a 	nor	r2,zero,r2
   42b3c:	1886703a 	and	r3,r3,r2
   42b40:	1986703a 	and	r3,r3,r6
   42b44:	2005883a 	mov	r2,r4
   42b48:	1800101e 	bne	r3,zero,42b8c <strlen+0x74>
   42b4c:	10800104 	addi	r2,r2,4
   42b50:	10c00017 	ldw	r3,0(r2)
   42b54:	19cb883a 	add	r5,r3,r7
   42b58:	00c6303a 	nor	r3,zero,r3
   42b5c:	28c6703a 	and	r3,r5,r3
   42b60:	1986703a 	and	r3,r3,r6
   42b64:	1800091e 	bne	r3,zero,42b8c <strlen+0x74>
   42b68:	10800104 	addi	r2,r2,4
   42b6c:	10c00017 	ldw	r3,0(r2)
   42b70:	19cb883a 	add	r5,r3,r7
   42b74:	00c6303a 	nor	r3,zero,r3
   42b78:	28c6703a 	and	r3,r5,r3
   42b7c:	1986703a 	and	r3,r3,r6
   42b80:	183ff226 	beq	r3,zero,42b4c <strlen+0x34>
   42b84:	00000106 	br	42b8c <strlen+0x74>
   42b88:	10800044 	addi	r2,r2,1
   42b8c:	10c00007 	ldb	r3,0(r2)
   42b90:	183ffd1e 	bne	r3,zero,42b88 <strlen+0x70>
   42b94:	1105c83a 	sub	r2,r2,r4
   42b98:	f800283a 	ret
   42b9c:	2005883a 	mov	r2,r4
   42ba0:	003ffa06 	br	42b8c <strlen+0x74>

00042ba4 <__sprint_r>:
   42ba4:	30800217 	ldw	r2,8(r6)
   42ba8:	defffe04 	addi	sp,sp,-8
   42bac:	dc000015 	stw	r16,0(sp)
   42bb0:	dfc00115 	stw	ra,4(sp)
   42bb4:	3021883a 	mov	r16,r6
   42bb8:	10000226 	beq	r2,zero,42bc4 <__sprint_r+0x20>
   42bbc:	00467040 	call	46704 <__sfvwrite_r>
   42bc0:	80000215 	stw	zero,8(r16)
   42bc4:	80000115 	stw	zero,4(r16)
   42bc8:	dfc00117 	ldw	ra,4(sp)
   42bcc:	dc000017 	ldw	r16,0(sp)
   42bd0:	dec00204 	addi	sp,sp,8
   42bd4:	f800283a 	ret

00042bd8 <___vfprintf_internal_r>:
   42bd8:	defeb904 	addi	sp,sp,-1308
   42bdc:	dc013d15 	stw	r16,1268(sp)
   42be0:	d9013015 	stw	r4,1216(sp)
   42be4:	dfc14615 	stw	ra,1304(sp)
   42be8:	df014515 	stw	fp,1300(sp)
   42bec:	ddc14415 	stw	r23,1296(sp)
   42bf0:	dd814315 	stw	r22,1292(sp)
   42bf4:	dd414215 	stw	r21,1288(sp)
   42bf8:	dd014115 	stw	r20,1284(sp)
   42bfc:	dcc14015 	stw	r19,1280(sp)
   42c00:	dc813f15 	stw	r18,1276(sp)
   42c04:	dc413e15 	stw	r17,1272(sp)
   42c08:	d9412915 	stw	r5,1188(sp)
   42c0c:	3021883a 	mov	r16,r6
   42c10:	d9c12d15 	stw	r7,1204(sp)
   42c14:	0046cf40 	call	46cf4 <_localeconv_r>
   42c18:	10800017 	ldw	r2,0(r2)
   42c1c:	d9013017 	ldw	r4,1216(sp)
   42c20:	d8013315 	stw	zero,1228(sp)
   42c24:	d8813715 	stw	r2,1244(sp)
   42c28:	d8013415 	stw	zero,1232(sp)
   42c2c:	20000226 	beq	r4,zero,42c38 <___vfprintf_internal_r+0x60>
   42c30:	20800e17 	ldw	r2,56(r4)
   42c34:	10014b26 	beq	r2,zero,43164 <___vfprintf_internal_r+0x58c>
   42c38:	d8c12917 	ldw	r3,1188(sp)
   42c3c:	1880030b 	ldhu	r2,12(r3)
   42c40:	10c0020c 	andi	r3,r2,8
   42c44:	18ffffcc 	andi	r3,r3,65535
   42c48:	18e0001c 	xori	r3,r3,32768
   42c4c:	18e00004 	addi	r3,r3,-32768
   42c50:	1800ed26 	beq	r3,zero,43008 <___vfprintf_internal_r+0x430>
   42c54:	d9012917 	ldw	r4,1188(sp)
   42c58:	20c00417 	ldw	r3,16(r4)
   42c5c:	1800ea26 	beq	r3,zero,43008 <___vfprintf_internal_r+0x430>
   42c60:	1100068c 	andi	r4,r2,26
   42c64:	00c00284 	movi	r3,10
   42c68:	20c0f026 	beq	r4,r3,4302c <___vfprintf_internal_r+0x454>
   42c6c:	d9010dc4 	addi	r4,sp,1079
   42c70:	d8810e04 	addi	r2,sp,1080
   42c74:	dc413017 	ldw	r17,1216(sp)
   42c78:	d8c00404 	addi	r3,sp,16
   42c7c:	d9012615 	stw	r4,1176(sp)
   42c80:	1109c83a 	sub	r4,r2,r4
   42c84:	d8812715 	stw	r2,1180(sp)
   42c88:	d8c11b15 	stw	r3,1132(sp)
   42c8c:	d8011d15 	stw	zero,1140(sp)
   42c90:	d8011c15 	stw	zero,1136(sp)
   42c94:	802b883a 	mov	r21,r16
   42c98:	d8013215 	stw	zero,1224(sp)
   42c9c:	d8013615 	stw	zero,1240(sp)
   42ca0:	d8013515 	stw	zero,1236(sp)
   42ca4:	d8012c15 	stw	zero,1200(sp)
   42ca8:	1813883a 	mov	r9,r3
   42cac:	d9013915 	stw	r4,1252(sp)
   42cb0:	a8800007 	ldb	r2,0(r21)
   42cb4:	1002f326 	beq	r2,zero,43884 <___vfprintf_internal_r+0xcac>
   42cb8:	00c00944 	movi	r3,37
   42cbc:	a825883a 	mov	r18,r21
   42cc0:	10c0021e 	bne	r2,r3,42ccc <___vfprintf_internal_r+0xf4>
   42cc4:	00001406 	br	42d18 <___vfprintf_internal_r+0x140>
   42cc8:	10c00326 	beq	r2,r3,42cd8 <___vfprintf_internal_r+0x100>
   42ccc:	94800044 	addi	r18,r18,1
   42cd0:	90800007 	ldb	r2,0(r18)
   42cd4:	103ffc1e 	bne	r2,zero,42cc8 <___vfprintf_internal_r+0xf0>
   42cd8:	9561c83a 	sub	r16,r18,r21
   42cdc:	80000e26 	beq	r16,zero,42d18 <___vfprintf_internal_r+0x140>
   42ce0:	da011d17 	ldw	r8,1140(sp)
   42ce4:	d8c11c17 	ldw	r3,1136(sp)
   42ce8:	4d400015 	stw	r21,0(r9)
   42cec:	4c000115 	stw	r16,4(r9)
   42cf0:	4411883a 	add	r8,r8,r16
   42cf4:	18c00044 	addi	r3,r3,1
   42cf8:	da011d15 	stw	r8,1140(sp)
   42cfc:	d8c11c15 	stw	r3,1136(sp)
   42d00:	008001c4 	movi	r2,7
   42d04:	10c11016 	blt	r2,r3,43148 <___vfprintf_internal_r+0x570>
   42d08:	4a400204 	addi	r9,r9,8
   42d0c:	d8812c17 	ldw	r2,1200(sp)
   42d10:	1405883a 	add	r2,r2,r16
   42d14:	d8812c15 	stw	r2,1200(sp)
   42d18:	90800007 	ldb	r2,0(r18)
   42d1c:	1000ee26 	beq	r2,zero,430d8 <___vfprintf_internal_r+0x500>
   42d20:	95400044 	addi	r21,r18,1
   42d24:	94800047 	ldb	r18,1(r18)
   42d28:	073fffc4 	movi	fp,-1
   42d2c:	e007883a 	mov	r3,fp
   42d30:	d8012585 	stb	zero,1174(sp)
   42d34:	d8012e15 	stw	zero,1208(sp)
   42d38:	0021883a 	mov	r16,zero
   42d3c:	05001604 	movi	r20,88
   42d40:	04c00244 	movi	r19,9
   42d44:	4839883a 	mov	fp,r9
   42d48:	ad400044 	addi	r21,r21,1
   42d4c:	90bff804 	addi	r2,r18,-32
   42d50:	a080462e 	bgeu	r20,r2,42e6c <___vfprintf_internal_r+0x294>
   42d54:	e013883a 	mov	r9,fp
   42d58:	9000df26 	beq	r18,zero,430d8 <___vfprintf_internal_r+0x500>
   42d5c:	00c00044 	movi	r3,1
   42d60:	d8c12815 	stw	r3,1184(sp)
   42d64:	dc810405 	stb	r18,1040(sp)
   42d68:	d8012585 	stb	zero,1174(sp)
   42d6c:	d8c12b15 	stw	r3,1196(sp)
   42d70:	dcc10404 	addi	r19,sp,1040
   42d74:	d8013115 	stw	zero,1220(sp)
   42d78:	80c0008c 	andi	r3,r16,2
   42d7c:	d8c12a15 	stw	r3,1192(sp)
   42d80:	18000326 	beq	r3,zero,42d90 <___vfprintf_internal_r+0x1b8>
   42d84:	d8c12817 	ldw	r3,1184(sp)
   42d88:	18c00084 	addi	r3,r3,2
   42d8c:	d8c12815 	stw	r3,1184(sp)
   42d90:	80c0210c 	andi	r3,r16,132
   42d94:	d8c12f15 	stw	r3,1212(sp)
   42d98:	1802251e 	bne	r3,zero,43630 <___vfprintf_internal_r+0xa58>
   42d9c:	d9012e17 	ldw	r4,1208(sp)
   42da0:	d8c12817 	ldw	r3,1184(sp)
   42da4:	20edc83a 	sub	r22,r4,r3
   42da8:	0582210e 	bge	zero,r22,43630 <___vfprintf_internal_r+0xa58>
   42dac:	02800404 	movi	r10,16
   42db0:	da011d17 	ldw	r8,1140(sp)
   42db4:	d8c11c17 	ldw	r3,1136(sp)
   42db8:	05c00174 	movhi	r23,5
   42dbc:	bdf7de84 	addi	r23,r23,-8326
   42dc0:	5580200e 	bge	r10,r22,42e44 <___vfprintf_internal_r+0x26c>
   42dc4:	dc813815 	stw	r18,1248(sp)
   42dc8:	5039883a 	mov	fp,r10
   42dcc:	b825883a 	mov	r18,r23
   42dd0:	050001c4 	movi	r20,7
   42dd4:	b02f883a 	mov	r23,r22
   42dd8:	802d883a 	mov	r22,r16
   42ddc:	dc012917 	ldw	r16,1188(sp)
   42de0:	00000306 	br	42df0 <___vfprintf_internal_r+0x218>
   42de4:	bdfffc04 	addi	r23,r23,-16
   42de8:	4a400204 	addi	r9,r9,8
   42dec:	e5c0110e 	bge	fp,r23,42e34 <___vfprintf_internal_r+0x25c>
   42df0:	4c800015 	stw	r18,0(r9)
   42df4:	4f000115 	stw	fp,4(r9)
   42df8:	42000404 	addi	r8,r8,16
   42dfc:	18c00044 	addi	r3,r3,1
   42e00:	da011d15 	stw	r8,1140(sp)
   42e04:	d8c11c15 	stw	r3,1136(sp)
   42e08:	a0fff60e 	bge	r20,r3,42de4 <___vfprintf_internal_r+0x20c>
   42e0c:	8809883a 	mov	r4,r17
   42e10:	800b883a 	mov	r5,r16
   42e14:	d9811b04 	addi	r6,sp,1132
   42e18:	0042ba40 	call	42ba4 <__sprint_r>
   42e1c:	1000b41e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   42e20:	bdfffc04 	addi	r23,r23,-16
   42e24:	da011d17 	ldw	r8,1140(sp)
   42e28:	d8c11c17 	ldw	r3,1136(sp)
   42e2c:	da400404 	addi	r9,sp,16
   42e30:	e5ffef16 	blt	fp,r23,42df0 <___vfprintf_internal_r+0x218>
   42e34:	b021883a 	mov	r16,r22
   42e38:	b82d883a 	mov	r22,r23
   42e3c:	902f883a 	mov	r23,r18
   42e40:	dc813817 	ldw	r18,1248(sp)
   42e44:	4dc00015 	stw	r23,0(r9)
   42e48:	4d800115 	stw	r22,4(r9)
   42e4c:	4591883a 	add	r8,r8,r22
   42e50:	18c00044 	addi	r3,r3,1
   42e54:	da011d15 	stw	r8,1140(sp)
   42e58:	d8c11c15 	stw	r3,1136(sp)
   42e5c:	008001c4 	movi	r2,7
   42e60:	10c3fe16 	blt	r2,r3,43e5c <___vfprintf_internal_r+0x1284>
   42e64:	4a400204 	addi	r9,r9,8
   42e68:	0001f306 	br	43638 <___vfprintf_internal_r+0xa60>
   42e6c:	1085883a 	add	r2,r2,r2
   42e70:	1085883a 	add	r2,r2,r2
   42e74:	01000134 	movhi	r4,4
   42e78:	210ba204 	addi	r4,r4,11912
   42e7c:	1105883a 	add	r2,r2,r4
   42e80:	10800017 	ldw	r2,0(r2)
   42e84:	1000683a 	jmp	r2
   42e88:	00043564 	muli	zero,zero,4309
   42e8c:	00042d54 	movui	zero,4277
   42e90:	00042d54 	movui	zero,4277
   42e94:	0004357c 	xorhi	zero,zero,4309
   42e98:	00042d54 	movui	zero,4277
   42e9c:	00042d54 	movui	zero,4277
   42ea0:	00042d54 	movui	zero,4277
   42ea4:	00042d54 	movui	zero,4277
   42ea8:	00042d54 	movui	zero,4277
   42eac:	00042d54 	movui	zero,4277
   42eb0:	00043434 	movhi	zero,4304
   42eb4:	000435c8 	cmpgei	zero,zero,4311
   42eb8:	00042d54 	movui	zero,4277
   42ebc:	00042ffc 	xorhi	zero,zero,4287
   42ec0:	0004339c 	xori	zero,zero,4302
   42ec4:	00042d54 	movui	zero,4277
   42ec8:	00043588 	cmpgei	zero,zero,4310
   42ecc:	00043594 	movui	zero,4310
   42ed0:	00043594 	movui	zero,4310
   42ed4:	00043594 	movui	zero,4310
   42ed8:	00043594 	movui	zero,4310
   42edc:	00043594 	movui	zero,4310
   42ee0:	00043594 	movui	zero,4310
   42ee4:	00043594 	movui	zero,4310
   42ee8:	00043594 	movui	zero,4310
   42eec:	00043594 	movui	zero,4310
   42ef0:	00042d54 	movui	zero,4277
   42ef4:	00042d54 	movui	zero,4277
   42ef8:	00042d54 	movui	zero,4277
   42efc:	00042d54 	movui	zero,4277
   42f00:	00042d54 	movui	zero,4277
   42f04:	00042d54 	movui	zero,4277
   42f08:	00042d54 	movui	zero,4277
   42f0c:	00042d54 	movui	zero,4277
   42f10:	00042d54 	movui	zero,4277
   42f14:	00042d54 	movui	zero,4277
   42f18:	0004316c 	andhi	zero,zero,4293
   42f1c:	0004322c 	andhi	zero,zero,4296
   42f20:	00042d54 	movui	zero,4277
   42f24:	0004322c 	andhi	zero,zero,4296
   42f28:	00042d54 	movui	zero,4277
   42f2c:	00042d54 	movui	zero,4277
   42f30:	00042d54 	movui	zero,4277
   42f34:	00042d54 	movui	zero,4277
   42f38:	000432c0 	call	432c <__alt_mem_onchip_mem_1f-0x3bcd4>
   42f3c:	00042d54 	movui	zero,4277
   42f40:	00042d54 	movui	zero,4277
   42f44:	000432cc 	andi	zero,zero,4299
   42f48:	00042d54 	movui	zero,4277
   42f4c:	00042d54 	movui	zero,4277
   42f50:	00042d54 	movui	zero,4277
   42f54:	00042d54 	movui	zero,4277
   42f58:	00042d54 	movui	zero,4277
   42f5c:	00043304 	movi	zero,4300
   42f60:	00042d54 	movui	zero,4277
   42f64:	00042d54 	movui	zero,4277
   42f68:	00043340 	call	4334 <__alt_mem_onchip_mem_1f-0x3bccc>
   42f6c:	00042d54 	movui	zero,4277
   42f70:	00042d54 	movui	zero,4277
   42f74:	00042d54 	movui	zero,4277
   42f78:	00042d54 	movui	zero,4277
   42f7c:	00042d54 	movui	zero,4277
   42f80:	00042d54 	movui	zero,4277
   42f84:	00042d54 	movui	zero,4277
   42f88:	00042d54 	movui	zero,4277
   42f8c:	00042d54 	movui	zero,4277
   42f90:	00042d54 	movui	zero,4277
   42f94:	000435d8 	cmpnei	zero,zero,4311
   42f98:	0004360c 	andi	zero,zero,4312
   42f9c:	0004322c 	andhi	zero,zero,4296
   42fa0:	0004322c 	andhi	zero,zero,4296
   42fa4:	0004322c 	andhi	zero,zero,4296
   42fa8:	00043558 	cmpnei	zero,zero,4309
   42fac:	0004360c 	andi	zero,zero,4312
   42fb0:	00042d54 	movui	zero,4277
   42fb4:	00042d54 	movui	zero,4277
   42fb8:	000433e4 	muli	zero,zero,4303
   42fbc:	00042d54 	movui	zero,4277
   42fc0:	000433fc 	xorhi	zero,zero,4303
   42fc4:	00043618 	cmpnei	zero,zero,4312
   42fc8:	0004345c 	xori	zero,zero,4305
   42fcc:	000434ac 	andhi	zero,zero,4306
   42fd0:	00042d54 	movui	zero,4277
   42fd4:	000434b8 	rdprs	zero,zero,4306
   42fd8:	00042d54 	movui	zero,4277
   42fdc:	00043624 	muli	zero,zero,4312
   42fe0:	00042d54 	movui	zero,4277
   42fe4:	00042d54 	movui	zero,4277
   42fe8:	0004351c 	xori	zero,zero,4308
   42fec:	d9012e17 	ldw	r4,1208(sp)
   42ff0:	d8812d15 	stw	r2,1204(sp)
   42ff4:	0109c83a 	sub	r4,zero,r4
   42ff8:	d9012e15 	stw	r4,1208(sp)
   42ffc:	84000114 	ori	r16,r16,4
   43000:	ac800007 	ldb	r18,0(r21)
   43004:	003f5006 	br	42d48 <___vfprintf_internal_r+0x170>
   43008:	d9013017 	ldw	r4,1216(sp)
   4300c:	d9412917 	ldw	r5,1188(sp)
   43010:	0044c3c0 	call	44c3c <__swsetup_r>
   43014:	10003d1e 	bne	r2,zero,4310c <___vfprintf_internal_r+0x534>
   43018:	d8c12917 	ldw	r3,1188(sp)
   4301c:	1880030b 	ldhu	r2,12(r3)
   43020:	00c00284 	movi	r3,10
   43024:	1100068c 	andi	r4,r2,26
   43028:	20ff101e 	bne	r4,r3,42c6c <___vfprintf_internal_r+0x94>
   4302c:	d9012917 	ldw	r4,1188(sp)
   43030:	20c0038b 	ldhu	r3,14(r4)
   43034:	193fffcc 	andi	r4,r3,65535
   43038:	2120001c 	xori	r4,r4,32768
   4303c:	21200004 	addi	r4,r4,-32768
   43040:	203f0a16 	blt	r4,zero,42c6c <___vfprintf_internal_r+0x94>
   43044:	d9012917 	ldw	r4,1188(sp)
   43048:	d9c12d17 	ldw	r7,1204(sp)
   4304c:	10bfff4c 	andi	r2,r2,65533
   43050:	22800717 	ldw	r10,28(r4)
   43054:	22400917 	ldw	r9,36(r4)
   43058:	d9013017 	ldw	r4,1216(sp)
   4305c:	02010004 	movi	r8,1024
   43060:	d881070d 	sth	r2,1052(sp)
   43064:	d9410404 	addi	r5,sp,1040
   43068:	d8800404 	addi	r2,sp,16
   4306c:	800d883a 	mov	r6,r16
   43070:	d8c1078d 	sth	r3,1054(sp)
   43074:	da810b15 	stw	r10,1068(sp)
   43078:	da410d15 	stw	r9,1076(sp)
   4307c:	d8810415 	stw	r2,1040(sp)
   43080:	d8810815 	stw	r2,1056(sp)
   43084:	da010615 	stw	r8,1048(sp)
   43088:	da010915 	stw	r8,1060(sp)
   4308c:	d8010a15 	stw	zero,1064(sp)
   43090:	0042bd80 	call	42bd8 <___vfprintf_internal_r>
   43094:	d8812c15 	stw	r2,1200(sp)
   43098:	10000416 	blt	r2,zero,430ac <___vfprintf_internal_r+0x4d4>
   4309c:	d9013017 	ldw	r4,1216(sp)
   430a0:	d9410404 	addi	r5,sp,1040
   430a4:	00407740 	call	40774 <_fflush_r>
   430a8:	1006501e 	bne	r2,zero,449ec <___vfprintf_internal_r+0x1e14>
   430ac:	d881070b 	ldhu	r2,1052(sp)
   430b0:	1080100c 	andi	r2,r2,64
   430b4:	10bfffcc 	andi	r2,r2,65535
   430b8:	10a0001c 	xori	r2,r2,32768
   430bc:	10a00004 	addi	r2,r2,-32768
   430c0:	10001426 	beq	r2,zero,43114 <___vfprintf_internal_r+0x53c>
   430c4:	d8c12917 	ldw	r3,1188(sp)
   430c8:	1880030b 	ldhu	r2,12(r3)
   430cc:	10801014 	ori	r2,r2,64
   430d0:	1880030d 	sth	r2,12(r3)
   430d4:	00000f06 	br	43114 <___vfprintf_internal_r+0x53c>
   430d8:	d8811d17 	ldw	r2,1140(sp)
   430dc:	10000426 	beq	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   430e0:	d9013017 	ldw	r4,1216(sp)
   430e4:	d9412917 	ldw	r5,1188(sp)
   430e8:	d9811b04 	addi	r6,sp,1132
   430ec:	0042ba40 	call	42ba4 <__sprint_r>
   430f0:	d8c12917 	ldw	r3,1188(sp)
   430f4:	1880030b 	ldhu	r2,12(r3)
   430f8:	1080100c 	andi	r2,r2,64
   430fc:	10bfffcc 	andi	r2,r2,65535
   43100:	10a0001c 	xori	r2,r2,32768
   43104:	10a00004 	addi	r2,r2,-32768
   43108:	10000226 	beq	r2,zero,43114 <___vfprintf_internal_r+0x53c>
   4310c:	00bfffc4 	movi	r2,-1
   43110:	d8812c15 	stw	r2,1200(sp)
   43114:	d8812c17 	ldw	r2,1200(sp)
   43118:	dfc14617 	ldw	ra,1304(sp)
   4311c:	df014517 	ldw	fp,1300(sp)
   43120:	ddc14417 	ldw	r23,1296(sp)
   43124:	dd814317 	ldw	r22,1292(sp)
   43128:	dd414217 	ldw	r21,1288(sp)
   4312c:	dd014117 	ldw	r20,1284(sp)
   43130:	dcc14017 	ldw	r19,1280(sp)
   43134:	dc813f17 	ldw	r18,1276(sp)
   43138:	dc413e17 	ldw	r17,1272(sp)
   4313c:	dc013d17 	ldw	r16,1268(sp)
   43140:	dec14704 	addi	sp,sp,1308
   43144:	f800283a 	ret
   43148:	d9412917 	ldw	r5,1188(sp)
   4314c:	8809883a 	mov	r4,r17
   43150:	d9811b04 	addi	r6,sp,1132
   43154:	0042ba40 	call	42ba4 <__sprint_r>
   43158:	103fe51e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   4315c:	da400404 	addi	r9,sp,16
   43160:	003eea06 	br	42d0c <___vfprintf_internal_r+0x134>
   43164:	0040a300 	call	40a30 <__sinit>
   43168:	003eb306 	br	42c38 <___vfprintf_internal_r+0x60>
   4316c:	e013883a 	mov	r9,fp
   43170:	84000414 	ori	r16,r16,16
   43174:	1839883a 	mov	fp,r3
   43178:	8080080c 	andi	r2,r16,32
   4317c:	10034426 	beq	r2,zero,43e90 <___vfprintf_internal_r+0x12b8>
   43180:	d8c12d17 	ldw	r3,1204(sp)
   43184:	18800117 	ldw	r2,4(r3)
   43188:	1dc00017 	ldw	r23,0(r3)
   4318c:	18c00204 	addi	r3,r3,8
   43190:	d8c12d15 	stw	r3,1204(sp)
   43194:	102d883a 	mov	r22,r2
   43198:	1003020e 	bge	r2,zero,43da4 <___vfprintf_internal_r+0x11cc>
   4319c:	05efc83a 	sub	r23,zero,r23
   431a0:	b804c03a 	cmpne	r2,r23,zero
   431a4:	05adc83a 	sub	r22,zero,r22
   431a8:	b0adc83a 	sub	r22,r22,r2
   431ac:	00800b44 	movi	r2,45
   431b0:	d8812585 	stb	r2,1174(sp)
   431b4:	00c00044 	movi	r3,1
   431b8:	bd84b03a 	or	r2,r23,r22
   431bc:	e0000216 	blt	fp,zero,431c8 <___vfprintf_internal_r+0x5f0>
   431c0:	013fdfc4 	movi	r4,-129
   431c4:	8120703a 	and	r16,r16,r4
   431c8:	1001cc1e 	bne	r2,zero,438fc <___vfprintf_internal_r+0xd24>
   431cc:	e001cb1e 	bne	fp,zero,438fc <___vfprintf_internal_r+0xd24>
   431d0:	18c03fcc 	andi	r3,r3,255
   431d4:	1802ca1e 	bne	r3,zero,43d00 <___vfprintf_internal_r+0x1128>
   431d8:	8080004c 	andi	r2,r16,1
   431dc:	1002c826 	beq	r2,zero,43d00 <___vfprintf_internal_r+0x1128>
   431e0:	d8c13917 	ldw	r3,1252(sp)
   431e4:	00800c04 	movi	r2,48
   431e8:	d8810dc5 	stb	r2,1079(sp)
   431ec:	d8c12b15 	stw	r3,1196(sp)
   431f0:	dcc10dc4 	addi	r19,sp,1079
   431f4:	d8812b17 	ldw	r2,1196(sp)
   431f8:	d8812815 	stw	r2,1184(sp)
   431fc:	1700010e 	bge	r2,fp,43204 <___vfprintf_internal_r+0x62c>
   43200:	df012815 	stw	fp,1184(sp)
   43204:	d8812583 	ldbu	r2,1174(sp)
   43208:	df013115 	stw	fp,1220(sp)
   4320c:	10803fcc 	andi	r2,r2,255
   43210:	1080201c 	xori	r2,r2,128
   43214:	10bfe004 	addi	r2,r2,-128
   43218:	103ed726 	beq	r2,zero,42d78 <___vfprintf_internal_r+0x1a0>
   4321c:	d8c12817 	ldw	r3,1184(sp)
   43220:	18c00044 	addi	r3,r3,1
   43224:	d8c12815 	stw	r3,1184(sp)
   43228:	003ed306 	br	42d78 <___vfprintf_internal_r+0x1a0>
   4322c:	8080020c 	andi	r2,r16,8
   43230:	e013883a 	mov	r9,fp
   43234:	1839883a 	mov	fp,r3
   43238:	1003a626 	beq	r2,zero,440d4 <___vfprintf_internal_r+0x14fc>
   4323c:	d9012d17 	ldw	r4,1204(sp)
   43240:	25800017 	ldw	r22,0(r4)
   43244:	25000117 	ldw	r20,4(r4)
   43248:	21000204 	addi	r4,r4,8
   4324c:	d9012d15 	stw	r4,1204(sp)
   43250:	dd813315 	stw	r22,1228(sp)
   43254:	dd013415 	stw	r20,1232(sp)
   43258:	b009883a 	mov	r4,r22
   4325c:	a00b883a 	mov	r5,r20
   43260:	da413c15 	stw	r9,1264(sp)
   43264:	00488100 	call	48810 <__isinfd>
   43268:	da413c17 	ldw	r9,1264(sp)
   4326c:	b009883a 	mov	r4,r22
   43270:	a00b883a 	mov	r5,r20
   43274:	10041d26 	beq	r2,zero,442ec <___vfprintf_internal_r+0x1714>
   43278:	000d883a 	mov	r6,zero
   4327c:	000f883a 	mov	r7,zero
   43280:	004a07c0 	call	4a07c <__ltdf2>
   43284:	da413c17 	ldw	r9,1264(sp)
   43288:	1004da16 	blt	r2,zero,445f4 <___vfprintf_internal_r+0x1a1c>
   4328c:	d8812583 	ldbu	r2,1174(sp)
   43290:	00c011c4 	movi	r3,71
   43294:	1c83d116 	blt	r3,r18,441dc <___vfprintf_internal_r+0x1604>
   43298:	04c00174 	movhi	r19,5
   4329c:	9cf7ce04 	addi	r19,r19,-8392
   432a0:	00c000c4 	movi	r3,3
   432a4:	d8c12815 	stw	r3,1184(sp)
   432a8:	00ffdfc4 	movi	r3,-129
   432ac:	80e0703a 	and	r16,r16,r3
   432b0:	d8c12817 	ldw	r3,1184(sp)
   432b4:	d8013115 	stw	zero,1220(sp)
   432b8:	d8c12b15 	stw	r3,1196(sp)
   432bc:	003fd306 	br	4320c <___vfprintf_internal_r+0x634>
   432c0:	84000214 	ori	r16,r16,8
   432c4:	ac800007 	ldb	r18,0(r21)
   432c8:	003e9f06 	br	42d48 <___vfprintf_internal_r+0x170>
   432cc:	e013883a 	mov	r9,fp
   432d0:	84000414 	ori	r16,r16,16
   432d4:	1839883a 	mov	fp,r3
   432d8:	8080080c 	andi	r2,r16,32
   432dc:	10031d26 	beq	r2,zero,43f54 <___vfprintf_internal_r+0x137c>
   432e0:	d8812d17 	ldw	r2,1204(sp)
   432e4:	0007883a 	mov	r3,zero
   432e8:	15c00017 	ldw	r23,0(r2)
   432ec:	15800117 	ldw	r22,4(r2)
   432f0:	10800204 	addi	r2,r2,8
   432f4:	d8812d15 	stw	r2,1204(sp)
   432f8:	d8012585 	stb	zero,1174(sp)
   432fc:	bd84b03a 	or	r2,r23,r22
   43300:	003fae06 	br	431bc <___vfprintf_internal_r+0x5e4>
   43304:	e013883a 	mov	r9,fp
   43308:	84000414 	ori	r16,r16,16
   4330c:	1839883a 	mov	fp,r3
   43310:	8080080c 	andi	r2,r16,32
   43314:	1002e726 	beq	r2,zero,43eb4 <___vfprintf_internal_r+0x12dc>
   43318:	d8c12d17 	ldw	r3,1204(sp)
   4331c:	d9012d17 	ldw	r4,1204(sp)
   43320:	1dc00017 	ldw	r23,0(r3)
   43324:	1d800117 	ldw	r22,4(r3)
   43328:	21000204 	addi	r4,r4,8
   4332c:	00c00044 	movi	r3,1
   43330:	d9012d15 	stw	r4,1204(sp)
   43334:	bd84b03a 	or	r2,r23,r22
   43338:	d8012585 	stb	zero,1174(sp)
   4333c:	003f9f06 	br	431bc <___vfprintf_internal_r+0x5e4>
   43340:	e013883a 	mov	r9,fp
   43344:	1839883a 	mov	fp,r3
   43348:	00c00174 	movhi	r3,5
   4334c:	18f7d204 	addi	r3,r3,-8376
   43350:	d8c13615 	stw	r3,1240(sp)
   43354:	8080080c 	andi	r2,r16,32
   43358:	10007726 	beq	r2,zero,43538 <___vfprintf_internal_r+0x960>
   4335c:	d9012d17 	ldw	r4,1204(sp)
   43360:	25c00017 	ldw	r23,0(r4)
   43364:	25800117 	ldw	r22,4(r4)
   43368:	21000204 	addi	r4,r4,8
   4336c:	d9012d15 	stw	r4,1204(sp)
   43370:	8080004c 	andi	r2,r16,1
   43374:	1002c226 	beq	r2,zero,43e80 <___vfprintf_internal_r+0x12a8>
   43378:	bd84b03a 	or	r2,r23,r22
   4337c:	10035d26 	beq	r2,zero,440f4 <___vfprintf_internal_r+0x151c>
   43380:	00c00c04 	movi	r3,48
   43384:	d8c12505 	stb	r3,1172(sp)
   43388:	dc812545 	stb	r18,1173(sp)
   4338c:	84000094 	ori	r16,r16,2
   43390:	00c00084 	movi	r3,2
   43394:	d8012585 	stb	zero,1174(sp)
   43398:	003f8806 	br	431bc <___vfprintf_internal_r+0x5e4>
   4339c:	ac800007 	ldb	r18,0(r21)
   433a0:	00c00a84 	movi	r3,42
   433a4:	adc00044 	addi	r23,r21,1
   433a8:	90c57526 	beq	r18,r3,44980 <___vfprintf_internal_r+0x1da8>
   433ac:	95bff404 	addi	r22,r18,-48
   433b0:	0009883a 	mov	r4,zero
   433b4:	9d84ff36 	bltu	r19,r22,447b4 <___vfprintf_internal_r+0x1bdc>
   433b8:	01400284 	movi	r5,10
   433bc:	004a4cc0 	call	4a4cc <__mulsi3>
   433c0:	bc800007 	ldb	r18,0(r23)
   433c4:	b089883a 	add	r4,r22,r2
   433c8:	bdc00044 	addi	r23,r23,1
   433cc:	95bff404 	addi	r22,r18,-48
   433d0:	9dbff92e 	bgeu	r19,r22,433b8 <___vfprintf_internal_r+0x7e0>
   433d4:	2007883a 	mov	r3,r4
   433d8:	20044316 	blt	r4,zero,444e8 <___vfprintf_internal_r+0x1910>
   433dc:	b82b883a 	mov	r21,r23
   433e0:	003e5a06 	br	42d4c <___vfprintf_internal_r+0x174>
   433e4:	ac800007 	ldb	r18,0(r21)
   433e8:	01001b04 	movi	r4,108
   433ec:	a805883a 	mov	r2,r21
   433f0:	91045526 	beq	r18,r4,44548 <___vfprintf_internal_r+0x1970>
   433f4:	84000414 	ori	r16,r16,16
   433f8:	003e5306 	br	42d48 <___vfprintf_internal_r+0x170>
   433fc:	8080080c 	andi	r2,r16,32
   43400:	e013883a 	mov	r9,fp
   43404:	10034026 	beq	r2,zero,44108 <___vfprintf_internal_r+0x1530>
   43408:	d9012d17 	ldw	r4,1204(sp)
   4340c:	20800017 	ldw	r2,0(r4)
   43410:	d9012c17 	ldw	r4,1200(sp)
   43414:	2007d7fa 	srai	r3,r4,31
   43418:	d9012d17 	ldw	r4,1204(sp)
   4341c:	10c00115 	stw	r3,4(r2)
   43420:	21000104 	addi	r4,r4,4
   43424:	d9012d15 	stw	r4,1204(sp)
   43428:	d9012c17 	ldw	r4,1200(sp)
   4342c:	11000015 	stw	r4,0(r2)
   43430:	003e1f06 	br	42cb0 <___vfprintf_internal_r+0xd8>
   43434:	d9012d17 	ldw	r4,1204(sp)
   43438:	21000017 	ldw	r4,0(r4)
   4343c:	d9012e15 	stw	r4,1208(sp)
   43440:	d9012d17 	ldw	r4,1204(sp)
   43444:	20800104 	addi	r2,r4,4
   43448:	d9012e17 	ldw	r4,1208(sp)
   4344c:	203ee716 	blt	r4,zero,42fec <___vfprintf_internal_r+0x414>
   43450:	d8812d15 	stw	r2,1204(sp)
   43454:	ac800007 	ldb	r18,0(r21)
   43458:	003e3b06 	br	42d48 <___vfprintf_internal_r+0x170>
   4345c:	e013883a 	mov	r9,fp
   43460:	1839883a 	mov	fp,r3
   43464:	d8c12d17 	ldw	r3,1204(sp)
   43468:	00800c04 	movi	r2,48
   4346c:	01000174 	movhi	r4,5
   43470:	2137d704 	addi	r4,r4,-8356
   43474:	1dc00017 	ldw	r23,0(r3)
   43478:	18c00104 	addi	r3,r3,4
   4347c:	d8812505 	stb	r2,1172(sp)
   43480:	00801e04 	movi	r2,120
   43484:	d8812545 	stb	r2,1173(sp)
   43488:	d8c12d15 	stw	r3,1204(sp)
   4348c:	002d883a 	mov	r22,zero
   43490:	84000094 	ori	r16,r16,2
   43494:	d9013615 	stw	r4,1240(sp)
   43498:	00c00084 	movi	r3,2
   4349c:	04801e04 	movi	r18,120
   434a0:	b805883a 	mov	r2,r23
   434a4:	d8012585 	stb	zero,1174(sp)
   434a8:	003f4406 	br	431bc <___vfprintf_internal_r+0x5e4>
   434ac:	84000814 	ori	r16,r16,32
   434b0:	ac800007 	ldb	r18,0(r21)
   434b4:	003e2406 	br	42d48 <___vfprintf_internal_r+0x170>
   434b8:	d8812d17 	ldw	r2,1204(sp)
   434bc:	d8012585 	stb	zero,1174(sp)
   434c0:	e013883a 	mov	r9,fp
   434c4:	14c00017 	ldw	r19,0(r2)
   434c8:	1839883a 	mov	fp,r3
   434cc:	15c00104 	addi	r23,r2,4
   434d0:	98045526 	beq	r19,zero,44628 <___vfprintf_internal_r+0x1a50>
   434d4:	9809883a 	mov	r4,r19
   434d8:	18043116 	blt	r3,zero,445a0 <___vfprintf_internal_r+0x19c8>
   434dc:	000b883a 	mov	r5,zero
   434e0:	180d883a 	mov	r6,r3
   434e4:	da413c15 	stw	r9,1264(sp)
   434e8:	0046d940 	call	46d94 <memchr>
   434ec:	da413c17 	ldw	r9,1264(sp)
   434f0:	10047a26 	beq	r2,zero,446dc <___vfprintf_internal_r+0x1b04>
   434f4:	14c5c83a 	sub	r2,r2,r19
   434f8:	d8812b15 	stw	r2,1196(sp)
   434fc:	e083d40e 	bge	fp,r2,44450 <___vfprintf_internal_r+0x1878>
   43500:	df012815 	stw	fp,1184(sp)
   43504:	e004e416 	blt	fp,zero,44898 <___vfprintf_internal_r+0x1cc0>
   43508:	d8812583 	ldbu	r2,1174(sp)
   4350c:	df012b15 	stw	fp,1196(sp)
   43510:	ddc12d15 	stw	r23,1204(sp)
   43514:	d8013115 	stw	zero,1220(sp)
   43518:	003f3c06 	br	4320c <___vfprintf_internal_r+0x634>
   4351c:	00800174 	movhi	r2,5
   43520:	10b7d704 	addi	r2,r2,-8356
   43524:	d8813615 	stw	r2,1240(sp)
   43528:	8080080c 	andi	r2,r16,32
   4352c:	e013883a 	mov	r9,fp
   43530:	1839883a 	mov	fp,r3
   43534:	103f891e 	bne	r2,zero,4335c <___vfprintf_internal_r+0x784>
   43538:	8080040c 	andi	r2,r16,16
   4353c:	1002c326 	beq	r2,zero,4404c <___vfprintf_internal_r+0x1474>
   43540:	d8812d17 	ldw	r2,1204(sp)
   43544:	002d883a 	mov	r22,zero
   43548:	15c00017 	ldw	r23,0(r2)
   4354c:	10800104 	addi	r2,r2,4
   43550:	d8812d15 	stw	r2,1204(sp)
   43554:	003f8606 	br	43370 <___vfprintf_internal_r+0x798>
   43558:	84001014 	ori	r16,r16,64
   4355c:	ac800007 	ldb	r18,0(r21)
   43560:	003df906 	br	42d48 <___vfprintf_internal_r+0x170>
   43564:	d8812587 	ldb	r2,1174(sp)
   43568:	1002e51e 	bne	r2,zero,44100 <___vfprintf_internal_r+0x1528>
   4356c:	00800804 	movi	r2,32
   43570:	d8812585 	stb	r2,1174(sp)
   43574:	ac800007 	ldb	r18,0(r21)
   43578:	003df306 	br	42d48 <___vfprintf_internal_r+0x170>
   4357c:	84000054 	ori	r16,r16,1
   43580:	ac800007 	ldb	r18,0(r21)
   43584:	003df006 	br	42d48 <___vfprintf_internal_r+0x170>
   43588:	84002014 	ori	r16,r16,128
   4358c:	ac800007 	ldb	r18,0(r21)
   43590:	003ded06 	br	42d48 <___vfprintf_internal_r+0x170>
   43594:	0009883a 	mov	r4,zero
   43598:	95bff404 	addi	r22,r18,-48
   4359c:	182f883a 	mov	r23,r3
   435a0:	01400284 	movi	r5,10
   435a4:	004a4cc0 	call	4a4cc <__mulsi3>
   435a8:	ac800007 	ldb	r18,0(r21)
   435ac:	1589883a 	add	r4,r2,r22
   435b0:	ad400044 	addi	r21,r21,1
   435b4:	95bff404 	addi	r22,r18,-48
   435b8:	9dbff92e 	bgeu	r19,r22,435a0 <___vfprintf_internal_r+0x9c8>
   435bc:	b807883a 	mov	r3,r23
   435c0:	d9012e15 	stw	r4,1208(sp)
   435c4:	003de106 	br	42d4c <___vfprintf_internal_r+0x174>
   435c8:	00800ac4 	movi	r2,43
   435cc:	d8812585 	stb	r2,1174(sp)
   435d0:	ac800007 	ldb	r18,0(r21)
   435d4:	003ddc06 	br	42d48 <___vfprintf_internal_r+0x170>
   435d8:	d8c12d17 	ldw	r3,1204(sp)
   435dc:	d9012d17 	ldw	r4,1204(sp)
   435e0:	e013883a 	mov	r9,fp
   435e4:	18800017 	ldw	r2,0(r3)
   435e8:	21000104 	addi	r4,r4,4
   435ec:	00c00044 	movi	r3,1
   435f0:	d8c12815 	stw	r3,1184(sp)
   435f4:	d8012585 	stb	zero,1174(sp)
   435f8:	d8810405 	stb	r2,1040(sp)
   435fc:	d9012d15 	stw	r4,1204(sp)
   43600:	d8c12b15 	stw	r3,1196(sp)
   43604:	dcc10404 	addi	r19,sp,1040
   43608:	003dda06 	br	42d74 <___vfprintf_internal_r+0x19c>
   4360c:	e013883a 	mov	r9,fp
   43610:	1839883a 	mov	fp,r3
   43614:	003ed806 	br	43178 <___vfprintf_internal_r+0x5a0>
   43618:	e013883a 	mov	r9,fp
   4361c:	1839883a 	mov	fp,r3
   43620:	003f2d06 	br	432d8 <___vfprintf_internal_r+0x700>
   43624:	e013883a 	mov	r9,fp
   43628:	1839883a 	mov	fp,r3
   4362c:	003f3806 	br	43310 <___vfprintf_internal_r+0x738>
   43630:	da011d17 	ldw	r8,1140(sp)
   43634:	d8c11c17 	ldw	r3,1136(sp)
   43638:	d8812587 	ldb	r2,1174(sp)
   4363c:	10000b26 	beq	r2,zero,4366c <___vfprintf_internal_r+0xa94>
   43640:	d8812584 	addi	r2,sp,1174
   43644:	48800015 	stw	r2,0(r9)
   43648:	00800044 	movi	r2,1
   4364c:	48800115 	stw	r2,4(r9)
   43650:	4091883a 	add	r8,r8,r2
   43654:	1887883a 	add	r3,r3,r2
   43658:	da011d15 	stw	r8,1140(sp)
   4365c:	d8c11c15 	stw	r3,1136(sp)
   43660:	008001c4 	movi	r2,7
   43664:	10c18e16 	blt	r2,r3,43ca0 <___vfprintf_internal_r+0x10c8>
   43668:	4a400204 	addi	r9,r9,8
   4366c:	d9012a17 	ldw	r4,1192(sp)
   43670:	20000b26 	beq	r4,zero,436a0 <___vfprintf_internal_r+0xac8>
   43674:	d8812504 	addi	r2,sp,1172
   43678:	48800015 	stw	r2,0(r9)
   4367c:	00800084 	movi	r2,2
   43680:	48800115 	stw	r2,4(r9)
   43684:	4091883a 	add	r8,r8,r2
   43688:	18c00044 	addi	r3,r3,1
   4368c:	da011d15 	stw	r8,1140(sp)
   43690:	d8c11c15 	stw	r3,1136(sp)
   43694:	008001c4 	movi	r2,7
   43698:	10c17816 	blt	r2,r3,43c7c <___vfprintf_internal_r+0x10a4>
   4369c:	4a400204 	addi	r9,r9,8
   436a0:	d9012f17 	ldw	r4,1212(sp)
   436a4:	00802004 	movi	r2,128
   436a8:	2080fc26 	beq	r4,r2,43a9c <___vfprintf_internal_r+0xec4>
   436ac:	d8813117 	ldw	r2,1220(sp)
   436b0:	d9012b17 	ldw	r4,1196(sp)
   436b4:	112fc83a 	sub	r23,r2,r4
   436b8:	05c02a0e 	bge	zero,r23,43764 <___vfprintf_internal_r+0xb8c>
   436bc:	07000404 	movi	fp,16
   436c0:	05000174 	movhi	r20,5
   436c4:	a537e284 	addi	r20,r20,-8310
   436c8:	e5c01d0e 	bge	fp,r23,43740 <___vfprintf_internal_r+0xb68>
   436cc:	dc812a15 	stw	r18,1192(sp)
   436d0:	058001c4 	movi	r22,7
   436d4:	a025883a 	mov	r18,r20
   436d8:	8029883a 	mov	r20,r16
   436dc:	dc012917 	ldw	r16,1188(sp)
   436e0:	00000306 	br	436f0 <___vfprintf_internal_r+0xb18>
   436e4:	bdfffc04 	addi	r23,r23,-16
   436e8:	4a400204 	addi	r9,r9,8
   436ec:	e5c0110e 	bge	fp,r23,43734 <___vfprintf_internal_r+0xb5c>
   436f0:	4c800015 	stw	r18,0(r9)
   436f4:	4f000115 	stw	fp,4(r9)
   436f8:	42000404 	addi	r8,r8,16
   436fc:	18c00044 	addi	r3,r3,1
   43700:	da011d15 	stw	r8,1140(sp)
   43704:	d8c11c15 	stw	r3,1136(sp)
   43708:	b0fff60e 	bge	r22,r3,436e4 <___vfprintf_internal_r+0xb0c>
   4370c:	8809883a 	mov	r4,r17
   43710:	800b883a 	mov	r5,r16
   43714:	d9811b04 	addi	r6,sp,1132
   43718:	0042ba40 	call	42ba4 <__sprint_r>
   4371c:	103e741e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43720:	bdfffc04 	addi	r23,r23,-16
   43724:	da011d17 	ldw	r8,1140(sp)
   43728:	d8c11c17 	ldw	r3,1136(sp)
   4372c:	da400404 	addi	r9,sp,16
   43730:	e5ffef16 	blt	fp,r23,436f0 <___vfprintf_internal_r+0xb18>
   43734:	a021883a 	mov	r16,r20
   43738:	9029883a 	mov	r20,r18
   4373c:	dc812a17 	ldw	r18,1192(sp)
   43740:	4d000015 	stw	r20,0(r9)
   43744:	4dc00115 	stw	r23,4(r9)
   43748:	45d1883a 	add	r8,r8,r23
   4374c:	18c00044 	addi	r3,r3,1
   43750:	da011d15 	stw	r8,1140(sp)
   43754:	d8c11c15 	stw	r3,1136(sp)
   43758:	008001c4 	movi	r2,7
   4375c:	10c13e16 	blt	r2,r3,43c58 <___vfprintf_internal_r+0x1080>
   43760:	4a400204 	addi	r9,r9,8
   43764:	8080400c 	andi	r2,r16,256
   43768:	1000831e 	bne	r2,zero,43978 <___vfprintf_internal_r+0xda0>
   4376c:	d8812b17 	ldw	r2,1196(sp)
   43770:	4cc00015 	stw	r19,0(r9)
   43774:	48800115 	stw	r2,4(r9)
   43778:	4091883a 	add	r8,r8,r2
   4377c:	18c00044 	addi	r3,r3,1
   43780:	da011d15 	stw	r8,1140(sp)
   43784:	d8c11c15 	stw	r3,1136(sp)
   43788:	008001c4 	movi	r2,7
   4378c:	10c05316 	blt	r2,r3,438dc <___vfprintf_internal_r+0xd04>
   43790:	4a400204 	addi	r9,r9,8
   43794:	8400010c 	andi	r16,r16,4
   43798:	80002e26 	beq	r16,zero,43854 <___vfprintf_internal_r+0xc7c>
   4379c:	d8812e17 	ldw	r2,1208(sp)
   437a0:	d8c12817 	ldw	r3,1184(sp)
   437a4:	10e1c83a 	sub	r16,r2,r3
   437a8:	04002a0e 	bge	zero,r16,43854 <___vfprintf_internal_r+0xc7c>
   437ac:	04800404 	movi	r18,16
   437b0:	d8c11c17 	ldw	r3,1136(sp)
   437b4:	05c00174 	movhi	r23,5
   437b8:	bdf7de84 	addi	r23,r23,-8326
   437bc:	9400170e 	bge	r18,r16,4381c <___vfprintf_internal_r+0xc44>
   437c0:	04c001c4 	movi	r19,7
   437c4:	dd012917 	ldw	r20,1188(sp)
   437c8:	00000306 	br	437d8 <___vfprintf_internal_r+0xc00>
   437cc:	843ffc04 	addi	r16,r16,-16
   437d0:	4a400204 	addi	r9,r9,8
   437d4:	9400110e 	bge	r18,r16,4381c <___vfprintf_internal_r+0xc44>
   437d8:	4dc00015 	stw	r23,0(r9)
   437dc:	4c800115 	stw	r18,4(r9)
   437e0:	42000404 	addi	r8,r8,16
   437e4:	18c00044 	addi	r3,r3,1
   437e8:	da011d15 	stw	r8,1140(sp)
   437ec:	d8c11c15 	stw	r3,1136(sp)
   437f0:	98fff60e 	bge	r19,r3,437cc <___vfprintf_internal_r+0xbf4>
   437f4:	8809883a 	mov	r4,r17
   437f8:	a00b883a 	mov	r5,r20
   437fc:	d9811b04 	addi	r6,sp,1132
   43800:	0042ba40 	call	42ba4 <__sprint_r>
   43804:	103e3a1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43808:	843ffc04 	addi	r16,r16,-16
   4380c:	da011d17 	ldw	r8,1140(sp)
   43810:	d8c11c17 	ldw	r3,1136(sp)
   43814:	da400404 	addi	r9,sp,16
   43818:	943fef16 	blt	r18,r16,437d8 <___vfprintf_internal_r+0xc00>
   4381c:	4dc00015 	stw	r23,0(r9)
   43820:	4c000115 	stw	r16,4(r9)
   43824:	8211883a 	add	r8,r16,r8
   43828:	18c00044 	addi	r3,r3,1
   4382c:	da011d15 	stw	r8,1140(sp)
   43830:	d8c11c15 	stw	r3,1136(sp)
   43834:	008001c4 	movi	r2,7
   43838:	10c0060e 	bge	r2,r3,43854 <___vfprintf_internal_r+0xc7c>
   4383c:	d9412917 	ldw	r5,1188(sp)
   43840:	8809883a 	mov	r4,r17
   43844:	d9811b04 	addi	r6,sp,1132
   43848:	0042ba40 	call	42ba4 <__sprint_r>
   4384c:	103e281e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43850:	da011d17 	ldw	r8,1140(sp)
   43854:	dd012817 	ldw	r20,1184(sp)
   43858:	d9012e17 	ldw	r4,1208(sp)
   4385c:	a100010e 	bge	r20,r4,43864 <___vfprintf_internal_r+0xc8c>
   43860:	2029883a 	mov	r20,r4
   43864:	d8812c17 	ldw	r2,1200(sp)
   43868:	1505883a 	add	r2,r2,r20
   4386c:	d8812c15 	stw	r2,1200(sp)
   43870:	4000b91e 	bne	r8,zero,43b58 <___vfprintf_internal_r+0xf80>
   43874:	d8011c15 	stw	zero,1136(sp)
   43878:	a8800007 	ldb	r2,0(r21)
   4387c:	da400404 	addi	r9,sp,16
   43880:	103d0d1e 	bne	r2,zero,42cb8 <___vfprintf_internal_r+0xe0>
   43884:	a825883a 	mov	r18,r21
   43888:	003d2306 	br	42d18 <___vfprintf_internal_r+0x140>
   4388c:	d9412917 	ldw	r5,1188(sp)
   43890:	8809883a 	mov	r4,r17
   43894:	d9811b04 	addi	r6,sp,1132
   43898:	0042ba40 	call	42ba4 <__sprint_r>
   4389c:	103e141e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   438a0:	da011d17 	ldw	r8,1140(sp)
   438a4:	da400404 	addi	r9,sp,16
   438a8:	8080004c 	andi	r2,r16,1
   438ac:	103fb926 	beq	r2,zero,43794 <___vfprintf_internal_r+0xbbc>
   438b0:	d8c11c17 	ldw	r3,1136(sp)
   438b4:	d9013717 	ldw	r4,1244(sp)
   438b8:	00800044 	movi	r2,1
   438bc:	48800115 	stw	r2,4(r9)
   438c0:	49000015 	stw	r4,0(r9)
   438c4:	4091883a 	add	r8,r8,r2
   438c8:	1887883a 	add	r3,r3,r2
   438cc:	da011d15 	stw	r8,1140(sp)
   438d0:	d8c11c15 	stw	r3,1136(sp)
   438d4:	008001c4 	movi	r2,7
   438d8:	10ffad0e 	bge	r2,r3,43790 <___vfprintf_internal_r+0xbb8>
   438dc:	d9412917 	ldw	r5,1188(sp)
   438e0:	8809883a 	mov	r4,r17
   438e4:	d9811b04 	addi	r6,sp,1132
   438e8:	0042ba40 	call	42ba4 <__sprint_r>
   438ec:	103e001e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   438f0:	da400404 	addi	r9,sp,16
   438f4:	da011d17 	ldw	r8,1140(sp)
   438f8:	003fa606 	br	43794 <___vfprintf_internal_r+0xbbc>
   438fc:	18803fcc 	andi	r2,r3,255
   43900:	00c00044 	movi	r3,1
   43904:	10c10126 	beq	r2,r3,43d0c <___vfprintf_internal_r+0x1134>
   43908:	00c00084 	movi	r3,2
   4390c:	10c0ed26 	beq	r2,r3,43cc4 <___vfprintf_internal_r+0x10ec>
   43910:	d8c10dc4 	addi	r3,sp,1079
   43914:	b808d0fa 	srli	r4,r23,3
   43918:	b00a977a 	slli	r5,r22,29
   4391c:	b02cd0fa 	srli	r22,r22,3
   43920:	bdc001cc 	andi	r23,r23,7
   43924:	b8800c04 	addi	r2,r23,48
   43928:	292eb03a 	or	r23,r5,r4
   4392c:	18800005 	stb	r2,0(r3)
   43930:	bd88b03a 	or	r4,r23,r22
   43934:	1827883a 	mov	r19,r3
   43938:	18ffffc4 	addi	r3,r3,-1
   4393c:	203ff51e 	bne	r4,zero,43914 <___vfprintf_internal_r+0xd3c>
   43940:	8100004c 	andi	r4,r16,1
   43944:	980b883a 	mov	r5,r19
   43948:	20000726 	beq	r4,zero,43968 <___vfprintf_internal_r+0xd90>
   4394c:	10803fcc 	andi	r2,r2,255
   43950:	1080201c 	xori	r2,r2,128
   43954:	10bfe004 	addi	r2,r2,-128
   43958:	01000c04 	movi	r4,48
   4395c:	11000226 	beq	r2,r4,43968 <___vfprintf_internal_r+0xd90>
   43960:	1827883a 	mov	r19,r3
   43964:	293fffc5 	stb	r4,-1(r5)
   43968:	d8812717 	ldw	r2,1180(sp)
   4396c:	14c5c83a 	sub	r2,r2,r19
   43970:	d8812b15 	stw	r2,1196(sp)
   43974:	003e1f06 	br	431f4 <___vfprintf_internal_r+0x61c>
   43978:	00801944 	movi	r2,101
   4397c:	14807c0e 	bge	r2,r18,43b70 <___vfprintf_internal_r+0xf98>
   43980:	d9013317 	ldw	r4,1228(sp)
   43984:	d9413417 	ldw	r5,1232(sp)
   43988:	000d883a 	mov	r6,zero
   4398c:	000f883a 	mov	r7,zero
   43990:	d8c13b15 	stw	r3,1260(sp)
   43994:	da013a15 	stw	r8,1256(sp)
   43998:	da413c15 	stw	r9,1264(sp)
   4399c:	0049efc0 	call	49efc <__eqdf2>
   439a0:	d8c13b17 	ldw	r3,1260(sp)
   439a4:	da013a17 	ldw	r8,1256(sp)
   439a8:	da413c17 	ldw	r9,1264(sp)
   439ac:	1001001e 	bne	r2,zero,43db0 <___vfprintf_internal_r+0x11d8>
   439b0:	00800174 	movhi	r2,5
   439b4:	10b7de04 	addi	r2,r2,-8328
   439b8:	48800015 	stw	r2,0(r9)
   439bc:	00800044 	movi	r2,1
   439c0:	48800115 	stw	r2,4(r9)
   439c4:	4091883a 	add	r8,r8,r2
   439c8:	1887883a 	add	r3,r3,r2
   439cc:	da011d15 	stw	r8,1140(sp)
   439d0:	d8c11c15 	stw	r3,1136(sp)
   439d4:	008001c4 	movi	r2,7
   439d8:	10c20316 	blt	r2,r3,441e8 <___vfprintf_internal_r+0x1610>
   439dc:	4a400204 	addi	r9,r9,8
   439e0:	d8812417 	ldw	r2,1168(sp)
   439e4:	d8c13217 	ldw	r3,1224(sp)
   439e8:	10c00216 	blt	r2,r3,439f4 <___vfprintf_internal_r+0xe1c>
   439ec:	8080004c 	andi	r2,r16,1
   439f0:	103f6826 	beq	r2,zero,43794 <___vfprintf_internal_r+0xbbc>
   439f4:	d8c11c17 	ldw	r3,1136(sp)
   439f8:	d9013717 	ldw	r4,1244(sp)
   439fc:	00800044 	movi	r2,1
   43a00:	48800115 	stw	r2,4(r9)
   43a04:	49000015 	stw	r4,0(r9)
   43a08:	4091883a 	add	r8,r8,r2
   43a0c:	1887883a 	add	r3,r3,r2
   43a10:	da011d15 	stw	r8,1140(sp)
   43a14:	d8c11c15 	stw	r3,1136(sp)
   43a18:	008001c4 	movi	r2,7
   43a1c:	10c2ce16 	blt	r2,r3,44558 <___vfprintf_internal_r+0x1980>
   43a20:	4a400204 	addi	r9,r9,8
   43a24:	d8813217 	ldw	r2,1224(sp)
   43a28:	14bfffc4 	addi	r18,r2,-1
   43a2c:	04bf590e 	bge	zero,r18,43794 <___vfprintf_internal_r+0xbbc>
   43a30:	04c00404 	movi	r19,16
   43a34:	d8c11c17 	ldw	r3,1136(sp)
   43a38:	05000174 	movhi	r20,5
   43a3c:	a537e284 	addi	r20,r20,-8310
   43a40:	9c818a0e 	bge	r19,r18,4406c <___vfprintf_internal_r+0x1494>
   43a44:	058001c4 	movi	r22,7
   43a48:	ddc12917 	ldw	r23,1188(sp)
   43a4c:	00000306 	br	43a5c <___vfprintf_internal_r+0xe84>
   43a50:	4a400204 	addi	r9,r9,8
   43a54:	94bffc04 	addi	r18,r18,-16
   43a58:	9c81840e 	bge	r19,r18,4406c <___vfprintf_internal_r+0x1494>
   43a5c:	4d000015 	stw	r20,0(r9)
   43a60:	4cc00115 	stw	r19,4(r9)
   43a64:	42000404 	addi	r8,r8,16
   43a68:	18c00044 	addi	r3,r3,1
   43a6c:	da011d15 	stw	r8,1140(sp)
   43a70:	d8c11c15 	stw	r3,1136(sp)
   43a74:	b0fff60e 	bge	r22,r3,43a50 <___vfprintf_internal_r+0xe78>
   43a78:	8809883a 	mov	r4,r17
   43a7c:	b80b883a 	mov	r5,r23
   43a80:	d9811b04 	addi	r6,sp,1132
   43a84:	0042ba40 	call	42ba4 <__sprint_r>
   43a88:	103d991e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43a8c:	da011d17 	ldw	r8,1140(sp)
   43a90:	d8c11c17 	ldw	r3,1136(sp)
   43a94:	da400404 	addi	r9,sp,16
   43a98:	003fee06 	br	43a54 <___vfprintf_internal_r+0xe7c>
   43a9c:	d8812e17 	ldw	r2,1208(sp)
   43aa0:	d9012817 	ldw	r4,1184(sp)
   43aa4:	112fc83a 	sub	r23,r2,r4
   43aa8:	05ff000e 	bge	zero,r23,436ac <___vfprintf_internal_r+0xad4>
   43aac:	07000404 	movi	fp,16
   43ab0:	05000174 	movhi	r20,5
   43ab4:	a537e284 	addi	r20,r20,-8310
   43ab8:	e5c01d0e 	bge	fp,r23,43b30 <___vfprintf_internal_r+0xf58>
   43abc:	dc812a15 	stw	r18,1192(sp)
   43ac0:	058001c4 	movi	r22,7
   43ac4:	a025883a 	mov	r18,r20
   43ac8:	8029883a 	mov	r20,r16
   43acc:	dc012917 	ldw	r16,1188(sp)
   43ad0:	00000306 	br	43ae0 <___vfprintf_internal_r+0xf08>
   43ad4:	bdfffc04 	addi	r23,r23,-16
   43ad8:	4a400204 	addi	r9,r9,8
   43adc:	e5c0110e 	bge	fp,r23,43b24 <___vfprintf_internal_r+0xf4c>
   43ae0:	4c800015 	stw	r18,0(r9)
   43ae4:	4f000115 	stw	fp,4(r9)
   43ae8:	42000404 	addi	r8,r8,16
   43aec:	18c00044 	addi	r3,r3,1
   43af0:	da011d15 	stw	r8,1140(sp)
   43af4:	d8c11c15 	stw	r3,1136(sp)
   43af8:	b0fff60e 	bge	r22,r3,43ad4 <___vfprintf_internal_r+0xefc>
   43afc:	8809883a 	mov	r4,r17
   43b00:	800b883a 	mov	r5,r16
   43b04:	d9811b04 	addi	r6,sp,1132
   43b08:	0042ba40 	call	42ba4 <__sprint_r>
   43b0c:	103d781e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43b10:	bdfffc04 	addi	r23,r23,-16
   43b14:	da011d17 	ldw	r8,1140(sp)
   43b18:	d8c11c17 	ldw	r3,1136(sp)
   43b1c:	da400404 	addi	r9,sp,16
   43b20:	e5ffef16 	blt	fp,r23,43ae0 <___vfprintf_internal_r+0xf08>
   43b24:	a021883a 	mov	r16,r20
   43b28:	9029883a 	mov	r20,r18
   43b2c:	dc812a17 	ldw	r18,1192(sp)
   43b30:	4d000015 	stw	r20,0(r9)
   43b34:	4dc00115 	stw	r23,4(r9)
   43b38:	45d1883a 	add	r8,r8,r23
   43b3c:	18c00044 	addi	r3,r3,1
   43b40:	da011d15 	stw	r8,1140(sp)
   43b44:	d8c11c15 	stw	r3,1136(sp)
   43b48:	008001c4 	movi	r2,7
   43b4c:	10c13616 	blt	r2,r3,44028 <___vfprintf_internal_r+0x1450>
   43b50:	4a400204 	addi	r9,r9,8
   43b54:	003ed506 	br	436ac <___vfprintf_internal_r+0xad4>
   43b58:	d9412917 	ldw	r5,1188(sp)
   43b5c:	8809883a 	mov	r4,r17
   43b60:	d9811b04 	addi	r6,sp,1132
   43b64:	0042ba40 	call	42ba4 <__sprint_r>
   43b68:	103f4226 	beq	r2,zero,43874 <___vfprintf_internal_r+0xc9c>
   43b6c:	003d6006 	br	430f0 <___vfprintf_internal_r+0x518>
   43b70:	d9013217 	ldw	r4,1224(sp)
   43b74:	00800044 	movi	r2,1
   43b78:	4cc00015 	stw	r19,0(r9)
   43b7c:	1101000e 	bge	r2,r4,43f80 <___vfprintf_internal_r+0x13a8>
   43b80:	00800044 	movi	r2,1
   43b84:	48800115 	stw	r2,4(r9)
   43b88:	4091883a 	add	r8,r8,r2
   43b8c:	1887883a 	add	r3,r3,r2
   43b90:	da011d15 	stw	r8,1140(sp)
   43b94:	d8c11c15 	stw	r3,1136(sp)
   43b98:	008001c4 	movi	r2,7
   43b9c:	10c10c16 	blt	r2,r3,43fd0 <___vfprintf_internal_r+0x13f8>
   43ba0:	4a400204 	addi	r9,r9,8
   43ba4:	d8813717 	ldw	r2,1244(sp)
   43ba8:	48800015 	stw	r2,0(r9)
   43bac:	00800044 	movi	r2,1
   43bb0:	48800115 	stw	r2,4(r9)
   43bb4:	4091883a 	add	r8,r8,r2
   43bb8:	1887883a 	add	r3,r3,r2
   43bbc:	da011d15 	stw	r8,1140(sp)
   43bc0:	d8c11c15 	stw	r3,1136(sp)
   43bc4:	008001c4 	movi	r2,7
   43bc8:	10c10a16 	blt	r2,r3,43ff4 <___vfprintf_internal_r+0x141c>
   43bcc:	4c800204 	addi	r18,r9,8
   43bd0:	d9013317 	ldw	r4,1228(sp)
   43bd4:	d9413417 	ldw	r5,1232(sp)
   43bd8:	000d883a 	mov	r6,zero
   43bdc:	000f883a 	mov	r7,zero
   43be0:	d8c13b15 	stw	r3,1260(sp)
   43be4:	da013a15 	stw	r8,1256(sp)
   43be8:	0049f580 	call	49f58 <__nedf2>
   43bec:	d8c13b17 	ldw	r3,1260(sp)
   43bf0:	da013a17 	ldw	r8,1256(sp)
   43bf4:	1000ba26 	beq	r2,zero,43ee0 <___vfprintf_internal_r+0x1308>
   43bf8:	d9013217 	ldw	r4,1224(sp)
   43bfc:	9cc00044 	addi	r19,r19,1
   43c00:	94c00015 	stw	r19,0(r18)
   43c04:	20bfffc4 	addi	r2,r4,-1
   43c08:	90800115 	stw	r2,4(r18)
   43c0c:	4091883a 	add	r8,r8,r2
   43c10:	18c00044 	addi	r3,r3,1
   43c14:	da011d15 	stw	r8,1140(sp)
   43c18:	d8c11c15 	stw	r3,1136(sp)
   43c1c:	008001c4 	movi	r2,7
   43c20:	10c0e216 	blt	r2,r3,43fac <___vfprintf_internal_r+0x13d4>
   43c24:	94800204 	addi	r18,r18,8
   43c28:	d9013517 	ldw	r4,1236(sp)
   43c2c:	d8811fc4 	addi	r2,sp,1151
   43c30:	90800015 	stw	r2,0(r18)
   43c34:	91000115 	stw	r4,4(r18)
   43c38:	4111883a 	add	r8,r8,r4
   43c3c:	18c00044 	addi	r3,r3,1
   43c40:	da011d15 	stw	r8,1140(sp)
   43c44:	d8c11c15 	stw	r3,1136(sp)
   43c48:	008001c4 	movi	r2,7
   43c4c:	10ff2316 	blt	r2,r3,438dc <___vfprintf_internal_r+0xd04>
   43c50:	92400204 	addi	r9,r18,8
   43c54:	003ecf06 	br	43794 <___vfprintf_internal_r+0xbbc>
   43c58:	d9412917 	ldw	r5,1188(sp)
   43c5c:	8809883a 	mov	r4,r17
   43c60:	d9811b04 	addi	r6,sp,1132
   43c64:	0042ba40 	call	42ba4 <__sprint_r>
   43c68:	103d211e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43c6c:	da011d17 	ldw	r8,1140(sp)
   43c70:	d8c11c17 	ldw	r3,1136(sp)
   43c74:	da400404 	addi	r9,sp,16
   43c78:	003eba06 	br	43764 <___vfprintf_internal_r+0xb8c>
   43c7c:	d9412917 	ldw	r5,1188(sp)
   43c80:	8809883a 	mov	r4,r17
   43c84:	d9811b04 	addi	r6,sp,1132
   43c88:	0042ba40 	call	42ba4 <__sprint_r>
   43c8c:	103d181e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43c90:	da011d17 	ldw	r8,1140(sp)
   43c94:	d8c11c17 	ldw	r3,1136(sp)
   43c98:	da400404 	addi	r9,sp,16
   43c9c:	003e8006 	br	436a0 <___vfprintf_internal_r+0xac8>
   43ca0:	d9412917 	ldw	r5,1188(sp)
   43ca4:	8809883a 	mov	r4,r17
   43ca8:	d9811b04 	addi	r6,sp,1132
   43cac:	0042ba40 	call	42ba4 <__sprint_r>
   43cb0:	103d0f1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43cb4:	da011d17 	ldw	r8,1140(sp)
   43cb8:	d8c11c17 	ldw	r3,1136(sp)
   43cbc:	da400404 	addi	r9,sp,16
   43cc0:	003e6a06 	br	4366c <___vfprintf_internal_r+0xa94>
   43cc4:	d9413617 	ldw	r5,1240(sp)
   43cc8:	d8810dc4 	addi	r2,sp,1079
   43ccc:	b8c003cc 	andi	r3,r23,15
   43cd0:	b008973a 	slli	r4,r22,28
   43cd4:	28c7883a 	add	r3,r5,r3
   43cd8:	b82ed13a 	srli	r23,r23,4
   43cdc:	18c00003 	ldbu	r3,0(r3)
   43ce0:	b02cd13a 	srli	r22,r22,4
   43ce4:	25eeb03a 	or	r23,r4,r23
   43ce8:	10c00005 	stb	r3,0(r2)
   43cec:	bd86b03a 	or	r3,r23,r22
   43cf0:	1027883a 	mov	r19,r2
   43cf4:	10bfffc4 	addi	r2,r2,-1
   43cf8:	183ff41e 	bne	r3,zero,43ccc <___vfprintf_internal_r+0x10f4>
   43cfc:	003f1a06 	br	43968 <___vfprintf_internal_r+0xd90>
   43d00:	d8012b15 	stw	zero,1196(sp)
   43d04:	dcc10e04 	addi	r19,sp,1080
   43d08:	003d3a06 	br	431f4 <___vfprintf_internal_r+0x61c>
   43d0c:	b0025426 	beq	r22,zero,44660 <___vfprintf_internal_r+0x1a88>
   43d10:	b807883a 	mov	r3,r23
   43d14:	d8810dc4 	addi	r2,sp,1079
   43d18:	882f883a 	mov	r23,r17
   43d1c:	04c00244 	movi	r19,9
   43d20:	8023883a 	mov	r17,r16
   43d24:	da412815 	stw	r9,1184(sp)
   43d28:	1821883a 	mov	r16,r3
   43d2c:	8009883a 	mov	r4,r16
   43d30:	b00b883a 	mov	r5,r22
   43d34:	01800284 	movi	r6,10
   43d38:	000f883a 	mov	r7,zero
   43d3c:	1029883a 	mov	r20,r2
   43d40:	00490340 	call	49034 <__umoddi3>
   43d44:	10800c04 	addi	r2,r2,48
   43d48:	8009883a 	mov	r4,r16
   43d4c:	b00b883a 	mov	r5,r22
   43d50:	a0800005 	stb	r2,0(r20)
   43d54:	01800284 	movi	r6,10
   43d58:	000f883a 	mov	r7,zero
   43d5c:	00489e40 	call	489e4 <__udivdi3>
   43d60:	1021883a 	mov	r16,r2
   43d64:	182d883a 	mov	r22,r3
   43d68:	a0bfffc4 	addi	r2,r20,-1
   43d6c:	183fef1e 	bne	r3,zero,43d2c <___vfprintf_internal_r+0x1154>
   43d70:	9c3fee36 	bltu	r19,r16,43d2c <___vfprintf_internal_r+0x1154>
   43d74:	da412817 	ldw	r9,1184(sp)
   43d78:	8005883a 	mov	r2,r16
   43d7c:	8821883a 	mov	r16,r17
   43d80:	b823883a 	mov	r17,r23
   43d84:	102f883a 	mov	r23,r2
   43d88:	d8812717 	ldw	r2,1180(sp)
   43d8c:	a4ffffc4 	addi	r19,r20,-1
   43d90:	bdc00c04 	addi	r23,r23,48
   43d94:	14c5c83a 	sub	r2,r2,r19
   43d98:	a5ffffc5 	stb	r23,-1(r20)
   43d9c:	d8812b15 	stw	r2,1196(sp)
   43da0:	003d1406 	br	431f4 <___vfprintf_internal_r+0x61c>
   43da4:	00c00044 	movi	r3,1
   43da8:	bd84b03a 	or	r2,r23,r22
   43dac:	003d0306 	br	431bc <___vfprintf_internal_r+0x5e4>
   43db0:	dc812417 	ldw	r18,1168(sp)
   43db4:	0481140e 	bge	zero,r18,44208 <___vfprintf_internal_r+0x1630>
   43db8:	d9013217 	ldw	r4,1224(sp)
   43dbc:	4cc00015 	stw	r19,0(r9)
   43dc0:	9100ec16 	blt	r18,r4,44174 <___vfprintf_internal_r+0x159c>
   43dc4:	49000115 	stw	r4,4(r9)
   43dc8:	4111883a 	add	r8,r8,r4
   43dcc:	18c00044 	addi	r3,r3,1
   43dd0:	da011d15 	stw	r8,1140(sp)
   43dd4:	d8c11c15 	stw	r3,1136(sp)
   43dd8:	008001c4 	movi	r2,7
   43ddc:	10c23616 	blt	r2,r3,446b8 <___vfprintf_internal_r+0x1ae0>
   43de0:	4a400204 	addi	r9,r9,8
   43de4:	d8813217 	ldw	r2,1224(sp)
   43de8:	90a5c83a 	sub	r18,r18,r2
   43dec:	04beae0e 	bge	zero,r18,438a8 <___vfprintf_internal_r+0xcd0>
   43df0:	04c00404 	movi	r19,16
   43df4:	d8c11c17 	ldw	r3,1136(sp)
   43df8:	05000174 	movhi	r20,5
   43dfc:	a537e284 	addi	r20,r20,-8310
   43e00:	9c81dd0e 	bge	r19,r18,44578 <___vfprintf_internal_r+0x19a0>
   43e04:	058001c4 	movi	r22,7
   43e08:	ddc12917 	ldw	r23,1188(sp)
   43e0c:	00000306 	br	43e1c <___vfprintf_internal_r+0x1244>
   43e10:	4a400204 	addi	r9,r9,8
   43e14:	94bffc04 	addi	r18,r18,-16
   43e18:	9c81d70e 	bge	r19,r18,44578 <___vfprintf_internal_r+0x19a0>
   43e1c:	4d000015 	stw	r20,0(r9)
   43e20:	4cc00115 	stw	r19,4(r9)
   43e24:	42000404 	addi	r8,r8,16
   43e28:	18c00044 	addi	r3,r3,1
   43e2c:	da011d15 	stw	r8,1140(sp)
   43e30:	d8c11c15 	stw	r3,1136(sp)
   43e34:	b0fff60e 	bge	r22,r3,43e10 <___vfprintf_internal_r+0x1238>
   43e38:	8809883a 	mov	r4,r17
   43e3c:	b80b883a 	mov	r5,r23
   43e40:	d9811b04 	addi	r6,sp,1132
   43e44:	0042ba40 	call	42ba4 <__sprint_r>
   43e48:	103ca91e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43e4c:	da011d17 	ldw	r8,1140(sp)
   43e50:	d8c11c17 	ldw	r3,1136(sp)
   43e54:	da400404 	addi	r9,sp,16
   43e58:	003fee06 	br	43e14 <___vfprintf_internal_r+0x123c>
   43e5c:	d9412917 	ldw	r5,1188(sp)
   43e60:	8809883a 	mov	r4,r17
   43e64:	d9811b04 	addi	r6,sp,1132
   43e68:	0042ba40 	call	42ba4 <__sprint_r>
   43e6c:	103ca01e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43e70:	da011d17 	ldw	r8,1140(sp)
   43e74:	d8c11c17 	ldw	r3,1136(sp)
   43e78:	da400404 	addi	r9,sp,16
   43e7c:	003dee06 	br	43638 <___vfprintf_internal_r+0xa60>
   43e80:	00c00084 	movi	r3,2
   43e84:	bd84b03a 	or	r2,r23,r22
   43e88:	d8012585 	stb	zero,1174(sp)
   43e8c:	003ccb06 	br	431bc <___vfprintf_internal_r+0x5e4>
   43e90:	8080040c 	andi	r2,r16,16
   43e94:	1000ae26 	beq	r2,zero,44150 <___vfprintf_internal_r+0x1578>
   43e98:	d9012d17 	ldw	r4,1204(sp)
   43e9c:	25c00017 	ldw	r23,0(r4)
   43ea0:	21000104 	addi	r4,r4,4
   43ea4:	d9012d15 	stw	r4,1204(sp)
   43ea8:	b82dd7fa 	srai	r22,r23,31
   43eac:	b005883a 	mov	r2,r22
   43eb0:	003cb906 	br	43198 <___vfprintf_internal_r+0x5c0>
   43eb4:	8080040c 	andi	r2,r16,16
   43eb8:	10007026 	beq	r2,zero,4407c <___vfprintf_internal_r+0x14a4>
   43ebc:	d8812d17 	ldw	r2,1204(sp)
   43ec0:	002d883a 	mov	r22,zero
   43ec4:	00c00044 	movi	r3,1
   43ec8:	15c00017 	ldw	r23,0(r2)
   43ecc:	10800104 	addi	r2,r2,4
   43ed0:	d8812d15 	stw	r2,1204(sp)
   43ed4:	d8012585 	stb	zero,1174(sp)
   43ed8:	b805883a 	mov	r2,r23
   43edc:	003cb706 	br	431bc <___vfprintf_internal_r+0x5e4>
   43ee0:	d8813217 	ldw	r2,1224(sp)
   43ee4:	14ffffc4 	addi	r19,r2,-1
   43ee8:	04ff4f0e 	bge	zero,r19,43c28 <___vfprintf_internal_r+0x1050>
   43eec:	05800404 	movi	r22,16
   43ef0:	05000174 	movhi	r20,5
   43ef4:	a537e284 	addi	r20,r20,-8310
   43ef8:	b4c0470e 	bge	r22,r19,44018 <___vfprintf_internal_r+0x1440>
   43efc:	05c001c4 	movi	r23,7
   43f00:	df012917 	ldw	fp,1188(sp)
   43f04:	00000306 	br	43f14 <___vfprintf_internal_r+0x133c>
   43f08:	94800204 	addi	r18,r18,8
   43f0c:	9cfffc04 	addi	r19,r19,-16
   43f10:	b4c0410e 	bge	r22,r19,44018 <___vfprintf_internal_r+0x1440>
   43f14:	95000015 	stw	r20,0(r18)
   43f18:	95800115 	stw	r22,4(r18)
   43f1c:	42000404 	addi	r8,r8,16
   43f20:	18c00044 	addi	r3,r3,1
   43f24:	da011d15 	stw	r8,1140(sp)
   43f28:	d8c11c15 	stw	r3,1136(sp)
   43f2c:	b8fff60e 	bge	r23,r3,43f08 <___vfprintf_internal_r+0x1330>
   43f30:	8809883a 	mov	r4,r17
   43f34:	e00b883a 	mov	r5,fp
   43f38:	d9811b04 	addi	r6,sp,1132
   43f3c:	0042ba40 	call	42ba4 <__sprint_r>
   43f40:	103c6b1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43f44:	da011d17 	ldw	r8,1140(sp)
   43f48:	d8c11c17 	ldw	r3,1136(sp)
   43f4c:	dc800404 	addi	r18,sp,16
   43f50:	003fee06 	br	43f0c <___vfprintf_internal_r+0x1334>
   43f54:	8080040c 	andi	r2,r16,16
   43f58:	10005326 	beq	r2,zero,440a8 <___vfprintf_internal_r+0x14d0>
   43f5c:	d8c12d17 	ldw	r3,1204(sp)
   43f60:	002d883a 	mov	r22,zero
   43f64:	1dc00017 	ldw	r23,0(r3)
   43f68:	18c00104 	addi	r3,r3,4
   43f6c:	d8c12d15 	stw	r3,1204(sp)
   43f70:	b805883a 	mov	r2,r23
   43f74:	0007883a 	mov	r3,zero
   43f78:	d8012585 	stb	zero,1174(sp)
   43f7c:	003c8f06 	br	431bc <___vfprintf_internal_r+0x5e4>
   43f80:	8088703a 	and	r4,r16,r2
   43f84:	203efe1e 	bne	r4,zero,43b80 <___vfprintf_internal_r+0xfa8>
   43f88:	48800115 	stw	r2,4(r9)
   43f8c:	42000044 	addi	r8,r8,1
   43f90:	18c00044 	addi	r3,r3,1
   43f94:	da011d15 	stw	r8,1140(sp)
   43f98:	d8c11c15 	stw	r3,1136(sp)
   43f9c:	008001c4 	movi	r2,7
   43fa0:	10c00216 	blt	r2,r3,43fac <___vfprintf_internal_r+0x13d4>
   43fa4:	4c800204 	addi	r18,r9,8
   43fa8:	003f1f06 	br	43c28 <___vfprintf_internal_r+0x1050>
   43fac:	d9412917 	ldw	r5,1188(sp)
   43fb0:	8809883a 	mov	r4,r17
   43fb4:	d9811b04 	addi	r6,sp,1132
   43fb8:	0042ba40 	call	42ba4 <__sprint_r>
   43fbc:	103c4c1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43fc0:	dc800404 	addi	r18,sp,16
   43fc4:	da011d17 	ldw	r8,1140(sp)
   43fc8:	d8c11c17 	ldw	r3,1136(sp)
   43fcc:	003f1606 	br	43c28 <___vfprintf_internal_r+0x1050>
   43fd0:	d9412917 	ldw	r5,1188(sp)
   43fd4:	8809883a 	mov	r4,r17
   43fd8:	d9811b04 	addi	r6,sp,1132
   43fdc:	0042ba40 	call	42ba4 <__sprint_r>
   43fe0:	103c431e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   43fe4:	da011d17 	ldw	r8,1140(sp)
   43fe8:	d8c11c17 	ldw	r3,1136(sp)
   43fec:	da400404 	addi	r9,sp,16
   43ff0:	003eec06 	br	43ba4 <___vfprintf_internal_r+0xfcc>
   43ff4:	d9412917 	ldw	r5,1188(sp)
   43ff8:	8809883a 	mov	r4,r17
   43ffc:	d9811b04 	addi	r6,sp,1132
   44000:	0042ba40 	call	42ba4 <__sprint_r>
   44004:	103c3a1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   44008:	da011d17 	ldw	r8,1140(sp)
   4400c:	d8c11c17 	ldw	r3,1136(sp)
   44010:	dc800404 	addi	r18,sp,16
   44014:	003eee06 	br	43bd0 <___vfprintf_internal_r+0xff8>
   44018:	95000015 	stw	r20,0(r18)
   4401c:	94c00115 	stw	r19,4(r18)
   44020:	44d1883a 	add	r8,r8,r19
   44024:	003efa06 	br	43c10 <___vfprintf_internal_r+0x1038>
   44028:	d9412917 	ldw	r5,1188(sp)
   4402c:	8809883a 	mov	r4,r17
   44030:	d9811b04 	addi	r6,sp,1132
   44034:	0042ba40 	call	42ba4 <__sprint_r>
   44038:	103c2d1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   4403c:	da011d17 	ldw	r8,1140(sp)
   44040:	d8c11c17 	ldw	r3,1136(sp)
   44044:	da400404 	addi	r9,sp,16
   44048:	003d9806 	br	436ac <___vfprintf_internal_r+0xad4>
   4404c:	8080100c 	andi	r2,r16,64
   44050:	10011626 	beq	r2,zero,444ac <___vfprintf_internal_r+0x18d4>
   44054:	d8c12d17 	ldw	r3,1204(sp)
   44058:	002d883a 	mov	r22,zero
   4405c:	1dc0000b 	ldhu	r23,0(r3)
   44060:	18c00104 	addi	r3,r3,4
   44064:	d8c12d15 	stw	r3,1204(sp)
   44068:	003cc106 	br	43370 <___vfprintf_internal_r+0x798>
   4406c:	4d000015 	stw	r20,0(r9)
   44070:	4c800115 	stw	r18,4(r9)
   44074:	4491883a 	add	r8,r8,r18
   44078:	003dc006 	br	4377c <___vfprintf_internal_r+0xba4>
   4407c:	8080100c 	andi	r2,r16,64
   44080:	10010126 	beq	r2,zero,44488 <___vfprintf_internal_r+0x18b0>
   44084:	d8c12d17 	ldw	r3,1204(sp)
   44088:	002d883a 	mov	r22,zero
   4408c:	1dc0000b 	ldhu	r23,0(r3)
   44090:	18c00104 	addi	r3,r3,4
   44094:	d8c12d15 	stw	r3,1204(sp)
   44098:	b805883a 	mov	r2,r23
   4409c:	00c00044 	movi	r3,1
   440a0:	d8012585 	stb	zero,1174(sp)
   440a4:	003c4506 	br	431bc <___vfprintf_internal_r+0x5e4>
   440a8:	8080100c 	andi	r2,r16,64
   440ac:	10010526 	beq	r2,zero,444c4 <___vfprintf_internal_r+0x18ec>
   440b0:	d9012d17 	ldw	r4,1204(sp)
   440b4:	002d883a 	mov	r22,zero
   440b8:	0007883a 	mov	r3,zero
   440bc:	25c0000b 	ldhu	r23,0(r4)
   440c0:	21000104 	addi	r4,r4,4
   440c4:	d9012d15 	stw	r4,1204(sp)
   440c8:	b805883a 	mov	r2,r23
   440cc:	d8012585 	stb	zero,1174(sp)
   440d0:	003c3a06 	br	431bc <___vfprintf_internal_r+0x5e4>
   440d4:	d8812d17 	ldw	r2,1204(sp)
   440d8:	15800017 	ldw	r22,0(r2)
   440dc:	15000117 	ldw	r20,4(r2)
   440e0:	10800204 	addi	r2,r2,8
   440e4:	d8812d15 	stw	r2,1204(sp)
   440e8:	dd813315 	stw	r22,1228(sp)
   440ec:	dd013415 	stw	r20,1232(sp)
   440f0:	003c5906 	br	43258 <___vfprintf_internal_r+0x680>
   440f4:	00c00084 	movi	r3,2
   440f8:	d8012585 	stb	zero,1174(sp)
   440fc:	003c2f06 	br	431bc <___vfprintf_internal_r+0x5e4>
   44100:	ac800007 	ldb	r18,0(r21)
   44104:	003b1006 	br	42d48 <___vfprintf_internal_r+0x170>
   44108:	8080040c 	andi	r2,r16,16
   4410c:	1000091e 	bne	r2,zero,44134 <___vfprintf_internal_r+0x155c>
   44110:	8400100c 	andi	r16,r16,64
   44114:	80000726 	beq	r16,zero,44134 <___vfprintf_internal_r+0x155c>
   44118:	d8c12d17 	ldw	r3,1204(sp)
   4411c:	d9012c17 	ldw	r4,1200(sp)
   44120:	18800017 	ldw	r2,0(r3)
   44124:	18c00104 	addi	r3,r3,4
   44128:	d8c12d15 	stw	r3,1204(sp)
   4412c:	1100000d 	sth	r4,0(r2)
   44130:	003adf06 	br	42cb0 <___vfprintf_internal_r+0xd8>
   44134:	d8c12d17 	ldw	r3,1204(sp)
   44138:	d9012c17 	ldw	r4,1200(sp)
   4413c:	18800017 	ldw	r2,0(r3)
   44140:	18c00104 	addi	r3,r3,4
   44144:	d8c12d15 	stw	r3,1204(sp)
   44148:	11000015 	stw	r4,0(r2)
   4414c:	003ad806 	br	42cb0 <___vfprintf_internal_r+0xd8>
   44150:	8080100c 	andi	r2,r16,64
   44154:	1000c526 	beq	r2,zero,4446c <___vfprintf_internal_r+0x1894>
   44158:	d8812d17 	ldw	r2,1204(sp)
   4415c:	15c0000f 	ldh	r23,0(r2)
   44160:	10800104 	addi	r2,r2,4
   44164:	d8812d15 	stw	r2,1204(sp)
   44168:	b82dd7fa 	srai	r22,r23,31
   4416c:	b005883a 	mov	r2,r22
   44170:	003c0906 	br	43198 <___vfprintf_internal_r+0x5c0>
   44174:	4c800115 	stw	r18,4(r9)
   44178:	9211883a 	add	r8,r18,r8
   4417c:	18c00044 	addi	r3,r3,1
   44180:	da011d15 	stw	r8,1140(sp)
   44184:	d8c11c15 	stw	r3,1136(sp)
   44188:	008001c4 	movi	r2,7
   4418c:	10c14016 	blt	r2,r3,44690 <___vfprintf_internal_r+0x1ab8>
   44190:	4a400204 	addi	r9,r9,8
   44194:	d8813717 	ldw	r2,1244(sp)
   44198:	9ca7883a 	add	r19,r19,r18
   4419c:	48800015 	stw	r2,0(r9)
   441a0:	00800044 	movi	r2,1
   441a4:	48800115 	stw	r2,4(r9)
   441a8:	4091883a 	add	r8,r8,r2
   441ac:	1887883a 	add	r3,r3,r2
   441b0:	da011d15 	stw	r8,1140(sp)
   441b4:	d8c11c15 	stw	r3,1136(sp)
   441b8:	008001c4 	movi	r2,7
   441bc:	10c12c16 	blt	r2,r3,44670 <___vfprintf_internal_r+0x1a98>
   441c0:	4a400204 	addi	r9,r9,8
   441c4:	d9013217 	ldw	r4,1224(sp)
   441c8:	da011d17 	ldw	r8,1140(sp)
   441cc:	d8c11c17 	ldw	r3,1136(sp)
   441d0:	24a5c83a 	sub	r18,r4,r18
   441d4:	4cc00015 	stw	r19,0(r9)
   441d8:	003fa506 	br	44070 <___vfprintf_internal_r+0x1498>
   441dc:	04c00174 	movhi	r19,5
   441e0:	9cf7cf04 	addi	r19,r19,-8388
   441e4:	003c2e06 	br	432a0 <___vfprintf_internal_r+0x6c8>
   441e8:	d9412917 	ldw	r5,1188(sp)
   441ec:	8809883a 	mov	r4,r17
   441f0:	d9811b04 	addi	r6,sp,1132
   441f4:	0042ba40 	call	42ba4 <__sprint_r>
   441f8:	103bbd1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   441fc:	da011d17 	ldw	r8,1140(sp)
   44200:	da400404 	addi	r9,sp,16
   44204:	003df606 	br	439e0 <___vfprintf_internal_r+0xe08>
   44208:	00800174 	movhi	r2,5
   4420c:	10b7de04 	addi	r2,r2,-8328
   44210:	48800015 	stw	r2,0(r9)
   44214:	00800044 	movi	r2,1
   44218:	48800115 	stw	r2,4(r9)
   4421c:	4091883a 	add	r8,r8,r2
   44220:	1887883a 	add	r3,r3,r2
   44224:	da011d15 	stw	r8,1140(sp)
   44228:	d8c11c15 	stw	r3,1136(sp)
   4422c:	008001c4 	movi	r2,7
   44230:	10c0bc16 	blt	r2,r3,44524 <___vfprintf_internal_r+0x194c>
   44234:	4a400204 	addi	r9,r9,8
   44238:	9000041e 	bne	r18,zero,4424c <___vfprintf_internal_r+0x1674>
   4423c:	d8c13217 	ldw	r3,1224(sp)
   44240:	1800021e 	bne	r3,zero,4424c <___vfprintf_internal_r+0x1674>
   44244:	8080004c 	andi	r2,r16,1
   44248:	103d5226 	beq	r2,zero,43794 <___vfprintf_internal_r+0xbbc>
   4424c:	d8c11c17 	ldw	r3,1136(sp)
   44250:	d9013717 	ldw	r4,1244(sp)
   44254:	00800044 	movi	r2,1
   44258:	48800115 	stw	r2,4(r9)
   4425c:	49000015 	stw	r4,0(r9)
   44260:	4091883a 	add	r8,r8,r2
   44264:	1887883a 	add	r3,r3,r2
   44268:	da011d15 	stw	r8,1140(sp)
   4426c:	d8c11c15 	stw	r3,1136(sp)
   44270:	008001c4 	movi	r2,7
   44274:	10c14516 	blt	r2,r3,4478c <___vfprintf_internal_r+0x1bb4>
   44278:	4a400204 	addi	r9,r9,8
   4427c:	04a5c83a 	sub	r18,zero,r18
   44280:	0480d70e 	bge	zero,r18,445e0 <___vfprintf_internal_r+0x1a08>
   44284:	05800404 	movi	r22,16
   44288:	05000174 	movhi	r20,5
   4428c:	a537e284 	addi	r20,r20,-8310
   44290:	b480db0e 	bge	r22,r18,44600 <___vfprintf_internal_r+0x1a28>
   44294:	05c001c4 	movi	r23,7
   44298:	df012917 	ldw	fp,1188(sp)
   4429c:	00000306 	br	442ac <___vfprintf_internal_r+0x16d4>
   442a0:	4a400204 	addi	r9,r9,8
   442a4:	94bffc04 	addi	r18,r18,-16
   442a8:	b480d50e 	bge	r22,r18,44600 <___vfprintf_internal_r+0x1a28>
   442ac:	4d000015 	stw	r20,0(r9)
   442b0:	4d800115 	stw	r22,4(r9)
   442b4:	42000404 	addi	r8,r8,16
   442b8:	18c00044 	addi	r3,r3,1
   442bc:	da011d15 	stw	r8,1140(sp)
   442c0:	d8c11c15 	stw	r3,1136(sp)
   442c4:	b8fff60e 	bge	r23,r3,442a0 <___vfprintf_internal_r+0x16c8>
   442c8:	8809883a 	mov	r4,r17
   442cc:	e00b883a 	mov	r5,fp
   442d0:	d9811b04 	addi	r6,sp,1132
   442d4:	0042ba40 	call	42ba4 <__sprint_r>
   442d8:	103b851e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   442dc:	da011d17 	ldw	r8,1140(sp)
   442e0:	d8c11c17 	ldw	r3,1136(sp)
   442e4:	da400404 	addi	r9,sp,16
   442e8:	003fee06 	br	442a4 <___vfprintf_internal_r+0x16cc>
   442ec:	da413c15 	stw	r9,1264(sp)
   442f0:	00488480 	call	48848 <__isnand>
   442f4:	da413c17 	ldw	r9,1264(sp)
   442f8:	10007e1e 	bne	r2,zero,444f4 <___vfprintf_internal_r+0x191c>
   442fc:	00bfffc4 	movi	r2,-1
   44300:	e0816a26 	beq	fp,r2,448ac <___vfprintf_internal_r+0x1cd4>
   44304:	008019c4 	movi	r2,103
   44308:	90816526 	beq	r18,r2,448a0 <___vfprintf_internal_r+0x1cc8>
   4430c:	008011c4 	movi	r2,71
   44310:	90816326 	beq	r18,r2,448a0 <___vfprintf_internal_r+0x1cc8>
   44314:	80c04014 	ori	r3,r16,256
   44318:	d8c12a15 	stw	r3,1192(sp)
   4431c:	a0016516 	blt	r20,zero,448b4 <___vfprintf_internal_r+0x1cdc>
   44320:	d8012f05 	stb	zero,1212(sp)
   44324:	00801984 	movi	r2,102
   44328:	9080f226 	beq	r18,r2,446f4 <___vfprintf_internal_r+0x1b1c>
   4432c:	00801184 	movi	r2,70
   44330:	9080f026 	beq	r18,r2,446f4 <___vfprintf_internal_r+0x1b1c>
   44334:	00801944 	movi	r2,101
   44338:	90818d26 	beq	r18,r2,44970 <___vfprintf_internal_r+0x1d98>
   4433c:	00801144 	movi	r2,69
   44340:	90818b26 	beq	r18,r2,44970 <___vfprintf_internal_r+0x1d98>
   44344:	e02f883a 	mov	r23,fp
   44348:	d8812404 	addi	r2,sp,1168
   4434c:	d8800115 	stw	r2,4(sp)
   44350:	d8812304 	addi	r2,sp,1164
   44354:	d8800215 	stw	r2,8(sp)
   44358:	d8812204 	addi	r2,sp,1160
   4435c:	ddc00015 	stw	r23,0(sp)
   44360:	d8800315 	stw	r2,12(sp)
   44364:	8809883a 	mov	r4,r17
   44368:	b00b883a 	mov	r5,r22
   4436c:	a00d883a 	mov	r6,r20
   44370:	01c00084 	movi	r7,2
   44374:	da413c15 	stw	r9,1264(sp)
   44378:	00450500 	call	45050 <_dtoa_r>
   4437c:	1027883a 	mov	r19,r2
   44380:	008019c4 	movi	r2,103
   44384:	da413c17 	ldw	r9,1264(sp)
   44388:	9081951e 	bne	r18,r2,449e0 <___vfprintf_internal_r+0x1e08>
   4438c:	8080004c 	andi	r2,r16,1
   44390:	10017926 	beq	r2,zero,44978 <___vfprintf_internal_r+0x1da0>
   44394:	00801184 	movi	r2,70
   44398:	9dc7883a 	add	r3,r19,r23
   4439c:	9080e626 	beq	r18,r2,44738 <___vfprintf_internal_r+0x1b60>
   443a0:	b009883a 	mov	r4,r22
   443a4:	a00b883a 	mov	r5,r20
   443a8:	000d883a 	mov	r6,zero
   443ac:	000f883a 	mov	r7,zero
   443b0:	d8c13b15 	stw	r3,1260(sp)
   443b4:	da413c15 	stw	r9,1264(sp)
   443b8:	0049efc0 	call	49efc <__eqdf2>
   443bc:	d8c13b17 	ldw	r3,1260(sp)
   443c0:	da413c17 	ldw	r9,1264(sp)
   443c4:	10000726 	beq	r2,zero,443e4 <___vfprintf_internal_r+0x180c>
   443c8:	d8812217 	ldw	r2,1160(sp)
   443cc:	10c18a2e 	bgeu	r2,r3,449f8 <___vfprintf_internal_r+0x1e20>
   443d0:	01000c04 	movi	r4,48
   443d4:	11000005 	stb	r4,0(r2)
   443d8:	10800044 	addi	r2,r2,1
   443dc:	d8812215 	stw	r2,1160(sp)
   443e0:	10fffc1e 	bne	r2,r3,443d4 <___vfprintf_internal_r+0x17fc>
   443e4:	1cc7c83a 	sub	r3,r3,r19
   443e8:	d8c13215 	stw	r3,1224(sp)
   443ec:	008019c4 	movi	r2,103
   443f0:	9080fa26 	beq	r18,r2,447dc <___vfprintf_internal_r+0x1c04>
   443f4:	008011c4 	movi	r2,71
   443f8:	9080f826 	beq	r18,r2,447dc <___vfprintf_internal_r+0x1c04>
   443fc:	00801984 	movi	r2,102
   44400:	90818e1e 	bne	r18,r2,44a3c <___vfprintf_internal_r+0x1e64>
   44404:	d8812417 	ldw	r2,1168(sp)
   44408:	d8812b15 	stw	r2,1196(sp)
   4440c:	00817c0e 	bge	zero,r2,44a00 <___vfprintf_internal_r+0x1e28>
   44410:	e000021e 	bne	fp,zero,4441c <___vfprintf_internal_r+0x1844>
   44414:	8400004c 	andi	r16,r16,1
   44418:	80000426 	beq	r16,zero,4442c <___vfprintf_internal_r+0x1854>
   4441c:	d8812b17 	ldw	r2,1196(sp)
   44420:	e2000044 	addi	r8,fp,1
   44424:	1205883a 	add	r2,r2,r8
   44428:	d8812b15 	stw	r2,1196(sp)
   4442c:	d8812815 	stw	r2,1184(sp)
   44430:	10010b16 	blt	r2,zero,44860 <___vfprintf_internal_r+0x1c88>
   44434:	ddc12f07 	ldb	r23,1212(sp)
   44438:	b800e426 	beq	r23,zero,447cc <___vfprintf_internal_r+0x1bf4>
   4443c:	00800b44 	movi	r2,45
   44440:	d8812585 	stb	r2,1174(sp)
   44444:	dc012a17 	ldw	r16,1192(sp)
   44448:	d8013115 	stw	zero,1220(sp)
   4444c:	003b7306 	br	4321c <___vfprintf_internal_r+0x644>
   44450:	d8812b17 	ldw	r2,1196(sp)
   44454:	d8812815 	stw	r2,1184(sp)
   44458:	10005716 	blt	r2,zero,445b8 <___vfprintf_internal_r+0x19e0>
   4445c:	d8812583 	ldbu	r2,1174(sp)
   44460:	ddc12d15 	stw	r23,1204(sp)
   44464:	d8013115 	stw	zero,1220(sp)
   44468:	003b6806 	br	4320c <___vfprintf_internal_r+0x634>
   4446c:	d8c12d17 	ldw	r3,1204(sp)
   44470:	1dc00017 	ldw	r23,0(r3)
   44474:	18c00104 	addi	r3,r3,4
   44478:	d8c12d15 	stw	r3,1204(sp)
   4447c:	b82dd7fa 	srai	r22,r23,31
   44480:	b005883a 	mov	r2,r22
   44484:	003b4406 	br	43198 <___vfprintf_internal_r+0x5c0>
   44488:	d9012d17 	ldw	r4,1204(sp)
   4448c:	002d883a 	mov	r22,zero
   44490:	00c00044 	movi	r3,1
   44494:	25c00017 	ldw	r23,0(r4)
   44498:	21000104 	addi	r4,r4,4
   4449c:	d9012d15 	stw	r4,1204(sp)
   444a0:	b805883a 	mov	r2,r23
   444a4:	d8012585 	stb	zero,1174(sp)
   444a8:	003b4406 	br	431bc <___vfprintf_internal_r+0x5e4>
   444ac:	d9012d17 	ldw	r4,1204(sp)
   444b0:	002d883a 	mov	r22,zero
   444b4:	25c00017 	ldw	r23,0(r4)
   444b8:	21000104 	addi	r4,r4,4
   444bc:	d9012d15 	stw	r4,1204(sp)
   444c0:	003bab06 	br	43370 <___vfprintf_internal_r+0x798>
   444c4:	d8812d17 	ldw	r2,1204(sp)
   444c8:	002d883a 	mov	r22,zero
   444cc:	0007883a 	mov	r3,zero
   444d0:	15c00017 	ldw	r23,0(r2)
   444d4:	10800104 	addi	r2,r2,4
   444d8:	d8812d15 	stw	r2,1204(sp)
   444dc:	d8012585 	stb	zero,1174(sp)
   444e0:	b805883a 	mov	r2,r23
   444e4:	003b3506 	br	431bc <___vfprintf_internal_r+0x5e4>
   444e8:	00ffffc4 	movi	r3,-1
   444ec:	b82b883a 	mov	r21,r23
   444f0:	003a1606 	br	42d4c <___vfprintf_internal_r+0x174>
   444f4:	008011c4 	movi	r2,71
   444f8:	1480b116 	blt	r2,r18,447c0 <___vfprintf_internal_r+0x1be8>
   444fc:	04c00174 	movhi	r19,5
   44500:	9cf7d004 	addi	r19,r19,-8384
   44504:	00c000c4 	movi	r3,3
   44508:	00bfdfc4 	movi	r2,-129
   4450c:	80a0703a 	and	r16,r16,r2
   44510:	d8c12815 	stw	r3,1184(sp)
   44514:	d8812583 	ldbu	r2,1174(sp)
   44518:	d8c12b15 	stw	r3,1196(sp)
   4451c:	d8013115 	stw	zero,1220(sp)
   44520:	003b3a06 	br	4320c <___vfprintf_internal_r+0x634>
   44524:	d9412917 	ldw	r5,1188(sp)
   44528:	8809883a 	mov	r4,r17
   4452c:	d9811b04 	addi	r6,sp,1132
   44530:	0042ba40 	call	42ba4 <__sprint_r>
   44534:	103aee1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   44538:	dc812417 	ldw	r18,1168(sp)
   4453c:	da011d17 	ldw	r8,1140(sp)
   44540:	da400404 	addi	r9,sp,16
   44544:	003f3c06 	br	44238 <___vfprintf_internal_r+0x1660>
   44548:	ad400044 	addi	r21,r21,1
   4454c:	84000814 	ori	r16,r16,32
   44550:	14800047 	ldb	r18,1(r2)
   44554:	0039fc06 	br	42d48 <___vfprintf_internal_r+0x170>
   44558:	d9412917 	ldw	r5,1188(sp)
   4455c:	8809883a 	mov	r4,r17
   44560:	d9811b04 	addi	r6,sp,1132
   44564:	0042ba40 	call	42ba4 <__sprint_r>
   44568:	103ae11e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   4456c:	da011d17 	ldw	r8,1140(sp)
   44570:	da400404 	addi	r9,sp,16
   44574:	003d2b06 	br	43a24 <___vfprintf_internal_r+0xe4c>
   44578:	4d000015 	stw	r20,0(r9)
   4457c:	4c800115 	stw	r18,4(r9)
   44580:	4491883a 	add	r8,r8,r18
   44584:	18c00044 	addi	r3,r3,1
   44588:	da011d15 	stw	r8,1140(sp)
   4458c:	d8c11c15 	stw	r3,1136(sp)
   44590:	008001c4 	movi	r2,7
   44594:	10fcbd16 	blt	r2,r3,4388c <___vfprintf_internal_r+0xcb4>
   44598:	4a400204 	addi	r9,r9,8
   4459c:	003cc206 	br	438a8 <___vfprintf_internal_r+0xcd0>
   445a0:	da413c15 	stw	r9,1264(sp)
   445a4:	0042b180 	call	42b18 <strlen>
   445a8:	d8812b15 	stw	r2,1196(sp)
   445ac:	d8812815 	stw	r2,1184(sp)
   445b0:	da413c17 	ldw	r9,1264(sp)
   445b4:	103fa90e 	bge	r2,zero,4445c <___vfprintf_internal_r+0x1884>
   445b8:	d8012815 	stw	zero,1184(sp)
   445bc:	003fa706 	br	4445c <___vfprintf_internal_r+0x1884>
   445c0:	d9412917 	ldw	r5,1188(sp)
   445c4:	8809883a 	mov	r4,r17
   445c8:	d9811b04 	addi	r6,sp,1132
   445cc:	0042ba40 	call	42ba4 <__sprint_r>
   445d0:	103ac71e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   445d4:	da011d17 	ldw	r8,1140(sp)
   445d8:	d8c11c17 	ldw	r3,1136(sp)
   445dc:	da400404 	addi	r9,sp,16
   445e0:	d8813217 	ldw	r2,1224(sp)
   445e4:	4cc00015 	stw	r19,0(r9)
   445e8:	48800115 	stw	r2,4(r9)
   445ec:	4091883a 	add	r8,r8,r2
   445f0:	003c6206 	br	4377c <___vfprintf_internal_r+0xba4>
   445f4:	00800b44 	movi	r2,45
   445f8:	d8812585 	stb	r2,1174(sp)
   445fc:	003b2406 	br	43290 <___vfprintf_internal_r+0x6b8>
   44600:	4d000015 	stw	r20,0(r9)
   44604:	4c800115 	stw	r18,4(r9)
   44608:	4491883a 	add	r8,r8,r18
   4460c:	18c00044 	addi	r3,r3,1
   44610:	da011d15 	stw	r8,1140(sp)
   44614:	d8c11c15 	stw	r3,1136(sp)
   44618:	008001c4 	movi	r2,7
   4461c:	10ffe816 	blt	r2,r3,445c0 <___vfprintf_internal_r+0x19e8>
   44620:	4a400204 	addi	r9,r9,8
   44624:	003fee06 	br	445e0 <___vfprintf_internal_r+0x1a08>
   44628:	d8c12b15 	stw	r3,1196(sp)
   4462c:	00800184 	movi	r2,6
   44630:	10c0062e 	bgeu	r2,r3,4464c <___vfprintf_internal_r+0x1a74>
   44634:	d8812b15 	stw	r2,1196(sp)
   44638:	d8812815 	stw	r2,1184(sp)
   4463c:	ddc12d15 	stw	r23,1204(sp)
   44640:	04c00174 	movhi	r19,5
   44644:	9cf7dc04 	addi	r19,r19,-8336
   44648:	0039ca06 	br	42d74 <___vfprintf_internal_r+0x19c>
   4464c:	d8812b17 	ldw	r2,1196(sp)
   44650:	d8812815 	stw	r2,1184(sp)
   44654:	103ff90e 	bge	r2,zero,4463c <___vfprintf_internal_r+0x1a64>
   44658:	d8012815 	stw	zero,1184(sp)
   4465c:	003ff706 	br	4463c <___vfprintf_internal_r+0x1a64>
   44660:	00800244 	movi	r2,9
   44664:	15fdaa36 	bltu	r2,r23,43d10 <___vfprintf_internal_r+0x1138>
   44668:	dd010e04 	addi	r20,sp,1080
   4466c:	003dc606 	br	43d88 <___vfprintf_internal_r+0x11b0>
   44670:	d9412917 	ldw	r5,1188(sp)
   44674:	8809883a 	mov	r4,r17
   44678:	d9811b04 	addi	r6,sp,1132
   4467c:	0042ba40 	call	42ba4 <__sprint_r>
   44680:	103a9b1e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   44684:	dc812417 	ldw	r18,1168(sp)
   44688:	da400404 	addi	r9,sp,16
   4468c:	003ecd06 	br	441c4 <___vfprintf_internal_r+0x15ec>
   44690:	d9412917 	ldw	r5,1188(sp)
   44694:	8809883a 	mov	r4,r17
   44698:	d9811b04 	addi	r6,sp,1132
   4469c:	0042ba40 	call	42ba4 <__sprint_r>
   446a0:	103a931e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   446a4:	dc812417 	ldw	r18,1168(sp)
   446a8:	da011d17 	ldw	r8,1140(sp)
   446ac:	d8c11c17 	ldw	r3,1136(sp)
   446b0:	da400404 	addi	r9,sp,16
   446b4:	003eb706 	br	44194 <___vfprintf_internal_r+0x15bc>
   446b8:	d9412917 	ldw	r5,1188(sp)
   446bc:	8809883a 	mov	r4,r17
   446c0:	d9811b04 	addi	r6,sp,1132
   446c4:	0042ba40 	call	42ba4 <__sprint_r>
   446c8:	103a891e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   446cc:	dc812417 	ldw	r18,1168(sp)
   446d0:	da011d17 	ldw	r8,1140(sp)
   446d4:	da400404 	addi	r9,sp,16
   446d8:	003dc206 	br	43de4 <___vfprintf_internal_r+0x120c>
   446dc:	df012815 	stw	fp,1184(sp)
   446e0:	d8812583 	ldbu	r2,1174(sp)
   446e4:	df012b15 	stw	fp,1196(sp)
   446e8:	ddc12d15 	stw	r23,1204(sp)
   446ec:	d8013115 	stw	zero,1220(sp)
   446f0:	003ac606 	br	4320c <___vfprintf_internal_r+0x634>
   446f4:	d8812404 	addi	r2,sp,1168
   446f8:	d8800115 	stw	r2,4(sp)
   446fc:	d8812304 	addi	r2,sp,1164
   44700:	d8800215 	stw	r2,8(sp)
   44704:	d8812204 	addi	r2,sp,1160
   44708:	df000015 	stw	fp,0(sp)
   4470c:	d8800315 	stw	r2,12(sp)
   44710:	8809883a 	mov	r4,r17
   44714:	b00b883a 	mov	r5,r22
   44718:	a00d883a 	mov	r6,r20
   4471c:	01c000c4 	movi	r7,3
   44720:	da413c15 	stw	r9,1264(sp)
   44724:	00450500 	call	45050 <_dtoa_r>
   44728:	da413c17 	ldw	r9,1264(sp)
   4472c:	1027883a 	mov	r19,r2
   44730:	1707883a 	add	r3,r2,fp
   44734:	e02f883a 	mov	r23,fp
   44738:	99000007 	ldb	r4,0(r19)
   4473c:	00800c04 	movi	r2,48
   44740:	20800326 	beq	r4,r2,44750 <___vfprintf_internal_r+0x1b78>
   44744:	da812417 	ldw	r10,1168(sp)
   44748:	1a87883a 	add	r3,r3,r10
   4474c:	003f1406 	br	443a0 <___vfprintf_internal_r+0x17c8>
   44750:	b009883a 	mov	r4,r22
   44754:	a00b883a 	mov	r5,r20
   44758:	000d883a 	mov	r6,zero
   4475c:	000f883a 	mov	r7,zero
   44760:	d8c13b15 	stw	r3,1260(sp)
   44764:	da413c15 	stw	r9,1264(sp)
   44768:	0049f580 	call	49f58 <__nedf2>
   4476c:	d8c13b17 	ldw	r3,1260(sp)
   44770:	da413c17 	ldw	r9,1264(sp)
   44774:	103ff326 	beq	r2,zero,44744 <___vfprintf_internal_r+0x1b6c>
   44778:	00800044 	movi	r2,1
   4477c:	15d5c83a 	sub	r10,r2,r23
   44780:	da812415 	stw	r10,1168(sp)
   44784:	1a87883a 	add	r3,r3,r10
   44788:	003f0506 	br	443a0 <___vfprintf_internal_r+0x17c8>
   4478c:	d9412917 	ldw	r5,1188(sp)
   44790:	8809883a 	mov	r4,r17
   44794:	d9811b04 	addi	r6,sp,1132
   44798:	0042ba40 	call	42ba4 <__sprint_r>
   4479c:	103a541e 	bne	r2,zero,430f0 <___vfprintf_internal_r+0x518>
   447a0:	dc812417 	ldw	r18,1168(sp)
   447a4:	da011d17 	ldw	r8,1140(sp)
   447a8:	d8c11c17 	ldw	r3,1136(sp)
   447ac:	da400404 	addi	r9,sp,16
   447b0:	003eb206 	br	4427c <___vfprintf_internal_r+0x16a4>
   447b4:	b82b883a 	mov	r21,r23
   447b8:	0007883a 	mov	r3,zero
   447bc:	00396306 	br	42d4c <___vfprintf_internal_r+0x174>
   447c0:	04c00174 	movhi	r19,5
   447c4:	9cf7d104 	addi	r19,r19,-8380
   447c8:	003f4e06 	br	44504 <___vfprintf_internal_r+0x192c>
   447cc:	d8812583 	ldbu	r2,1174(sp)
   447d0:	dc012a17 	ldw	r16,1192(sp)
   447d4:	d8013115 	stw	zero,1220(sp)
   447d8:	003a8c06 	br	4320c <___vfprintf_internal_r+0x634>
   447dc:	d8812417 	ldw	r2,1168(sp)
   447e0:	d8812b15 	stw	r2,1196(sp)
   447e4:	1029883a 	mov	r20,r2
   447e8:	00bfff44 	movi	r2,-3
   447ec:	a0800116 	blt	r20,r2,447f4 <___vfprintf_internal_r+0x1c1c>
   447f0:	e5001d0e 	bge	fp,r20,44868 <___vfprintf_internal_r+0x1c90>
   447f4:	94bfff84 	addi	r18,r18,-2
   447f8:	a53fffc4 	addi	r20,r20,-1
   447fc:	dd012415 	stw	r20,1168(sp)
   44800:	dc811fc5 	stb	r18,1151(sp)
   44804:	a0007216 	blt	r20,zero,449d0 <___vfprintf_internal_r+0x1df8>
   44808:	00800ac4 	movi	r2,43
   4480c:	d8812005 	stb	r2,1152(sp)
   44810:	00800244 	movi	r2,9
   44814:	15003516 	blt	r2,r20,448ec <___vfprintf_internal_r+0x1d14>
   44818:	00800c04 	movi	r2,48
   4481c:	a5000c04 	addi	r20,r20,48
   44820:	d8812045 	stb	r2,1153(sp)
   44824:	dd012085 	stb	r20,1154(sp)
   44828:	d8c120c4 	addi	r3,sp,1155
   4482c:	d8811fc4 	addi	r2,sp,1151
   44830:	1885c83a 	sub	r2,r3,r2
   44834:	d8c13217 	ldw	r3,1224(sp)
   44838:	d8813515 	stw	r2,1236(sp)
   4483c:	1885883a 	add	r2,r3,r2
   44840:	d8812b15 	stw	r2,1196(sp)
   44844:	00800044 	movi	r2,1
   44848:	10c0580e 	bge	r2,r3,449ac <___vfprintf_internal_r+0x1dd4>
   4484c:	d8812b17 	ldw	r2,1196(sp)
   44850:	10800044 	addi	r2,r2,1
   44854:	d8812b15 	stw	r2,1196(sp)
   44858:	d8812815 	stw	r2,1184(sp)
   4485c:	103ef50e 	bge	r2,zero,44434 <___vfprintf_internal_r+0x185c>
   44860:	d8012815 	stw	zero,1184(sp)
   44864:	003ef306 	br	44434 <___vfprintf_internal_r+0x185c>
   44868:	d8812b17 	ldw	r2,1196(sp)
   4486c:	d8c13217 	ldw	r3,1224(sp)
   44870:	10c01416 	blt	r2,r3,448c4 <___vfprintf_internal_r+0x1cec>
   44874:	8400004c 	andi	r16,r16,1
   44878:	80000326 	beq	r16,zero,44888 <___vfprintf_internal_r+0x1cb0>
   4487c:	d8812b17 	ldw	r2,1196(sp)
   44880:	10800044 	addi	r2,r2,1
   44884:	d8812b15 	stw	r2,1196(sp)
   44888:	d8812815 	stw	r2,1184(sp)
   4488c:	10001416 	blt	r2,zero,448e0 <___vfprintf_internal_r+0x1d08>
   44890:	048019c4 	movi	r18,103
   44894:	003ee706 	br	44434 <___vfprintf_internal_r+0x185c>
   44898:	d8012815 	stw	zero,1184(sp)
   4489c:	003b1a06 	br	43508 <___vfprintf_internal_r+0x930>
   448a0:	e03e9c1e 	bne	fp,zero,44314 <___vfprintf_internal_r+0x173c>
   448a4:	07000044 	movi	fp,1
   448a8:	003e9a06 	br	44314 <___vfprintf_internal_r+0x173c>
   448ac:	07000184 	movi	fp,6
   448b0:	003e9806 	br	44314 <___vfprintf_internal_r+0x173c>
   448b4:	00c00b44 	movi	r3,45
   448b8:	a520003c 	xorhi	r20,r20,32768
   448bc:	d8c12f05 	stb	r3,1212(sp)
   448c0:	003e9806 	br	44324 <___vfprintf_internal_r+0x174c>
   448c4:	05003f0e 	bge	zero,r20,449c4 <___vfprintf_internal_r+0x1dec>
   448c8:	05000044 	movi	r20,1
   448cc:	d8c13217 	ldw	r3,1224(sp)
   448d0:	a0e9883a 	add	r20,r20,r3
   448d4:	dd012b15 	stw	r20,1196(sp)
   448d8:	dd012815 	stw	r20,1184(sp)
   448dc:	a03fec0e 	bge	r20,zero,44890 <___vfprintf_internal_r+0x1cb8>
   448e0:	d8012815 	stw	zero,1184(sp)
   448e4:	048019c4 	movi	r18,103
   448e8:	003ed206 	br	44434 <___vfprintf_internal_r+0x185c>
   448ec:	d8c11f84 	addi	r3,sp,1150
   448f0:	102f883a 	mov	r23,r2
   448f4:	4839883a 	mov	fp,r9
   448f8:	a009883a 	mov	r4,r20
   448fc:	01400284 	movi	r5,10
   44900:	182d883a 	mov	r22,r3
   44904:	004a4600 	call	4a460 <__modsi3>
   44908:	10800c04 	addi	r2,r2,48
   4490c:	a009883a 	mov	r4,r20
   44910:	b0800005 	stb	r2,0(r22)
   44914:	01400284 	movi	r5,10
   44918:	004a4100 	call	4a410 <__divsi3>
   4491c:	1029883a 	mov	r20,r2
   44920:	b0ffffc4 	addi	r3,r22,-1
   44924:	b8bff416 	blt	r23,r2,448f8 <___vfprintf_internal_r+0x1d20>
   44928:	11400c04 	addi	r5,r2,48
   4492c:	b17fffc5 	stb	r5,-1(r22)
   44930:	d8811fc4 	addi	r2,sp,1151
   44934:	e013883a 	mov	r9,fp
   44938:	18803e2e 	bgeu	r3,r2,44a34 <___vfprintf_internal_r+0x1e5c>
   4493c:	b007883a 	mov	r3,r22
   44940:	d9012044 	addi	r4,sp,1153
   44944:	00000206 	br	44950 <___vfprintf_internal_r+0x1d78>
   44948:	19400003 	ldbu	r5,0(r3)
   4494c:	18c00044 	addi	r3,r3,1
   44950:	21400005 	stb	r5,0(r4)
   44954:	21000044 	addi	r4,r4,1
   44958:	10fffb1e 	bne	r2,r3,44948 <___vfprintf_internal_r+0x1d70>
   4495c:	d8c12004 	addi	r3,sp,1152
   44960:	1d87c83a 	sub	r3,r3,r22
   44964:	d9012044 	addi	r4,sp,1153
   44968:	20c7883a 	add	r3,r4,r3
   4496c:	003fb006 	br	44830 <___vfprintf_internal_r+0x1c58>
   44970:	e5c00044 	addi	r23,fp,1
   44974:	003e7406 	br	44348 <___vfprintf_internal_r+0x1770>
   44978:	d8c12217 	ldw	r3,1160(sp)
   4497c:	003e9906 	br	443e4 <___vfprintf_internal_r+0x180c>
   44980:	d9012d17 	ldw	r4,1204(sp)
   44984:	ac800043 	ldbu	r18,1(r21)
   44988:	b82b883a 	mov	r21,r23
   4498c:	20c00017 	ldw	r3,0(r4)
   44990:	20800104 	addi	r2,r4,4
   44994:	d8812d15 	stw	r2,1204(sp)
   44998:	18002116 	blt	r3,zero,44a20 <___vfprintf_internal_r+0x1e48>
   4499c:	94803fcc 	andi	r18,r18,255
   449a0:	9480201c 	xori	r18,r18,128
   449a4:	94bfe004 	addi	r18,r18,-128
   449a8:	0038e706 	br	42d48 <___vfprintf_internal_r+0x170>
   449ac:	80a0703a 	and	r16,r16,r2
   449b0:	803fa61e 	bne	r16,zero,4484c <___vfprintf_internal_r+0x1c74>
   449b4:	d8812b17 	ldw	r2,1196(sp)
   449b8:	d8812815 	stw	r2,1184(sp)
   449bc:	103e9d0e 	bge	r2,zero,44434 <___vfprintf_internal_r+0x185c>
   449c0:	003fa706 	br	44860 <___vfprintf_internal_r+0x1c88>
   449c4:	00800084 	movi	r2,2
   449c8:	1529c83a 	sub	r20,r2,r20
   449cc:	003fbf06 	br	448cc <___vfprintf_internal_r+0x1cf4>
   449d0:	00800b44 	movi	r2,45
   449d4:	0529c83a 	sub	r20,zero,r20
   449d8:	d8812005 	stb	r2,1152(sp)
   449dc:	003f8c06 	br	44810 <___vfprintf_internal_r+0x1c38>
   449e0:	008011c4 	movi	r2,71
   449e4:	90be6926 	beq	r18,r2,4438c <___vfprintf_internal_r+0x17b4>
   449e8:	003e6a06 	br	44394 <___vfprintf_internal_r+0x17bc>
   449ec:	00bfffc4 	movi	r2,-1
   449f0:	d8812c15 	stw	r2,1200(sp)
   449f4:	0039ad06 	br	430ac <___vfprintf_internal_r+0x4d4>
   449f8:	1007883a 	mov	r3,r2
   449fc:	003e7906 	br	443e4 <___vfprintf_internal_r+0x180c>
   44a00:	e000021e 	bne	fp,zero,44a0c <___vfprintf_internal_r+0x1e34>
   44a04:	8400004c 	andi	r16,r16,1
   44a08:	80000e26 	beq	r16,zero,44a44 <___vfprintf_internal_r+0x1e6c>
   44a0c:	e7000084 	addi	fp,fp,2
   44a10:	df012b15 	stw	fp,1196(sp)
   44a14:	df012815 	stw	fp,1184(sp)
   44a18:	e03e860e 	bge	fp,zero,44434 <___vfprintf_internal_r+0x185c>
   44a1c:	003f9006 	br	44860 <___vfprintf_internal_r+0x1c88>
   44a20:	94803fcc 	andi	r18,r18,255
   44a24:	9480201c 	xori	r18,r18,128
   44a28:	00ffffc4 	movi	r3,-1
   44a2c:	94bfe004 	addi	r18,r18,-128
   44a30:	0038c506 	br	42d48 <___vfprintf_internal_r+0x170>
   44a34:	d8c12044 	addi	r3,sp,1153
   44a38:	003f7d06 	br	44830 <___vfprintf_internal_r+0x1c58>
   44a3c:	dd012417 	ldw	r20,1168(sp)
   44a40:	003f6d06 	br	447f8 <___vfprintf_internal_r+0x1c20>
   44a44:	00c00044 	movi	r3,1
   44a48:	d8c12815 	stw	r3,1184(sp)
   44a4c:	d8c12b15 	stw	r3,1196(sp)
   44a50:	003e7806 	br	44434 <___vfprintf_internal_r+0x185c>

00044a54 <__vfprintf_internal>:
   44a54:	00800174 	movhi	r2,5
   44a58:	10bf4904 	addi	r2,r2,-732
   44a5c:	2007883a 	mov	r3,r4
   44a60:	11000017 	ldw	r4,0(r2)
   44a64:	2805883a 	mov	r2,r5
   44a68:	300f883a 	mov	r7,r6
   44a6c:	180b883a 	mov	r5,r3
   44a70:	100d883a 	mov	r6,r2
   44a74:	0042bd81 	jmpi	42bd8 <___vfprintf_internal_r>

00044a78 <__swbuf_r>:
   44a78:	defffc04 	addi	sp,sp,-16
   44a7c:	dc800215 	stw	r18,8(sp)
   44a80:	dc400115 	stw	r17,4(sp)
   44a84:	dc000015 	stw	r16,0(sp)
   44a88:	dfc00315 	stw	ra,12(sp)
   44a8c:	2023883a 	mov	r17,r4
   44a90:	2825883a 	mov	r18,r5
   44a94:	3021883a 	mov	r16,r6
   44a98:	20000226 	beq	r4,zero,44aa4 <__swbuf_r+0x2c>
   44a9c:	20800e17 	ldw	r2,56(r4)
   44aa0:	10003b26 	beq	r2,zero,44b90 <__swbuf_r+0x118>
   44aa4:	8080030b 	ldhu	r2,12(r16)
   44aa8:	80c00617 	ldw	r3,24(r16)
   44aac:	1080020c 	andi	r2,r2,8
   44ab0:	10bfffcc 	andi	r2,r2,65535
   44ab4:	10a0001c 	xori	r2,r2,32768
   44ab8:	80c00215 	stw	r3,8(r16)
   44abc:	10a00004 	addi	r2,r2,-32768
   44ac0:	10002226 	beq	r2,zero,44b4c <__swbuf_r+0xd4>
   44ac4:	80800417 	ldw	r2,16(r16)
   44ac8:	10002026 	beq	r2,zero,44b4c <__swbuf_r+0xd4>
   44acc:	80c00017 	ldw	r3,0(r16)
   44ad0:	81000517 	ldw	r4,20(r16)
   44ad4:	94803fcc 	andi	r18,r18,255
   44ad8:	1885c83a 	sub	r2,r3,r2
   44adc:	1100250e 	bge	r2,r4,44b74 <__swbuf_r+0xfc>
   44ae0:	10800044 	addi	r2,r2,1
   44ae4:	81400217 	ldw	r5,8(r16)
   44ae8:	19000044 	addi	r4,r3,1
   44aec:	297fffc4 	addi	r5,r5,-1
   44af0:	81400215 	stw	r5,8(r16)
   44af4:	1c800005 	stb	r18,0(r3)
   44af8:	80c00517 	ldw	r3,20(r16)
   44afc:	81000015 	stw	r4,0(r16)
   44b00:	18800c26 	beq	r3,r2,44b34 <__swbuf_r+0xbc>
   44b04:	8080030b 	ldhu	r2,12(r16)
   44b08:	1080004c 	andi	r2,r2,1
   44b0c:	10000226 	beq	r2,zero,44b18 <__swbuf_r+0xa0>
   44b10:	00800284 	movi	r2,10
   44b14:	90800726 	beq	r18,r2,44b34 <__swbuf_r+0xbc>
   44b18:	9005883a 	mov	r2,r18
   44b1c:	dfc00317 	ldw	ra,12(sp)
   44b20:	dc800217 	ldw	r18,8(sp)
   44b24:	dc400117 	ldw	r17,4(sp)
   44b28:	dc000017 	ldw	r16,0(sp)
   44b2c:	dec00404 	addi	sp,sp,16
   44b30:	f800283a 	ret
   44b34:	8809883a 	mov	r4,r17
   44b38:	800b883a 	mov	r5,r16
   44b3c:	00407740 	call	40774 <_fflush_r>
   44b40:	103ff526 	beq	r2,zero,44b18 <__swbuf_r+0xa0>
   44b44:	04bfffc4 	movi	r18,-1
   44b48:	003ff306 	br	44b18 <__swbuf_r+0xa0>
   44b4c:	8809883a 	mov	r4,r17
   44b50:	800b883a 	mov	r5,r16
   44b54:	0044c3c0 	call	44c3c <__swsetup_r>
   44b58:	10000f1e 	bne	r2,zero,44b98 <__swbuf_r+0x120>
   44b5c:	80800417 	ldw	r2,16(r16)
   44b60:	80c00017 	ldw	r3,0(r16)
   44b64:	81000517 	ldw	r4,20(r16)
   44b68:	94803fcc 	andi	r18,r18,255
   44b6c:	1885c83a 	sub	r2,r3,r2
   44b70:	113fdb16 	blt	r2,r4,44ae0 <__swbuf_r+0x68>
   44b74:	8809883a 	mov	r4,r17
   44b78:	800b883a 	mov	r5,r16
   44b7c:	00407740 	call	40774 <_fflush_r>
   44b80:	103ff01e 	bne	r2,zero,44b44 <__swbuf_r+0xcc>
   44b84:	80c00017 	ldw	r3,0(r16)
   44b88:	00800044 	movi	r2,1
   44b8c:	003fd506 	br	44ae4 <__swbuf_r+0x6c>
   44b90:	0040a300 	call	40a30 <__sinit>
   44b94:	003fc306 	br	44aa4 <__swbuf_r+0x2c>
   44b98:	8080030b 	ldhu	r2,12(r16)
   44b9c:	04bfffc4 	movi	r18,-1
   44ba0:	10801014 	ori	r2,r2,64
   44ba4:	8080030d 	sth	r2,12(r16)
   44ba8:	00800244 	movi	r2,9
   44bac:	88800015 	stw	r2,0(r17)
   44bb0:	003fd906 	br	44b18 <__swbuf_r+0xa0>

00044bb4 <__swbuf>:
   44bb4:	00c00174 	movhi	r3,5
   44bb8:	18ff4904 	addi	r3,r3,-732
   44bbc:	2005883a 	mov	r2,r4
   44bc0:	19000017 	ldw	r4,0(r3)
   44bc4:	280d883a 	mov	r6,r5
   44bc8:	100b883a 	mov	r5,r2
   44bcc:	0044a781 	jmpi	44a78 <__swbuf_r>

00044bd0 <_write_r>:
   44bd0:	defffd04 	addi	sp,sp,-12
   44bd4:	dc400115 	stw	r17,4(sp)
   44bd8:	dc000015 	stw	r16,0(sp)
   44bdc:	2023883a 	mov	r17,r4
   44be0:	04000174 	movhi	r16,5
   44be4:	84063b04 	addi	r16,r16,6380
   44be8:	2809883a 	mov	r4,r5
   44bec:	300b883a 	mov	r5,r6
   44bf0:	380d883a 	mov	r6,r7
   44bf4:	dfc00215 	stw	ra,8(sp)
   44bf8:	80000015 	stw	zero,0(r16)
   44bfc:	004b6900 	call	4b690 <write>
   44c00:	00ffffc4 	movi	r3,-1
   44c04:	10c00526 	beq	r2,r3,44c1c <_write_r+0x4c>
   44c08:	dfc00217 	ldw	ra,8(sp)
   44c0c:	dc400117 	ldw	r17,4(sp)
   44c10:	dc000017 	ldw	r16,0(sp)
   44c14:	dec00304 	addi	sp,sp,12
   44c18:	f800283a 	ret
   44c1c:	80c00017 	ldw	r3,0(r16)
   44c20:	183ff926 	beq	r3,zero,44c08 <_write_r+0x38>
   44c24:	88c00015 	stw	r3,0(r17)
   44c28:	dfc00217 	ldw	ra,8(sp)
   44c2c:	dc400117 	ldw	r17,4(sp)
   44c30:	dc000017 	ldw	r16,0(sp)
   44c34:	dec00304 	addi	sp,sp,12
   44c38:	f800283a 	ret

00044c3c <__swsetup_r>:
   44c3c:	00800174 	movhi	r2,5
   44c40:	10bf4904 	addi	r2,r2,-732
   44c44:	10800017 	ldw	r2,0(r2)
   44c48:	defffd04 	addi	sp,sp,-12
   44c4c:	dc400115 	stw	r17,4(sp)
   44c50:	dc000015 	stw	r16,0(sp)
   44c54:	dfc00215 	stw	ra,8(sp)
   44c58:	2023883a 	mov	r17,r4
   44c5c:	2821883a 	mov	r16,r5
   44c60:	10000226 	beq	r2,zero,44c6c <__swsetup_r+0x30>
   44c64:	10c00e17 	ldw	r3,56(r2)
   44c68:	18003d26 	beq	r3,zero,44d60 <__swsetup_r+0x124>
   44c6c:	8080030b 	ldhu	r2,12(r16)
   44c70:	10c0020c 	andi	r3,r2,8
   44c74:	18ffffcc 	andi	r3,r3,65535
   44c78:	18e0001c 	xori	r3,r3,32768
   44c7c:	18e00004 	addi	r3,r3,-32768
   44c80:	18001226 	beq	r3,zero,44ccc <__swsetup_r+0x90>
   44c84:	80c00417 	ldw	r3,16(r16)
   44c88:	18001f26 	beq	r3,zero,44d08 <__swsetup_r+0xcc>
   44c8c:	1100004c 	andi	r4,r2,1
   44c90:	2000261e 	bne	r4,zero,44d2c <__swsetup_r+0xf0>
   44c94:	1080008c 	andi	r2,r2,2
   44c98:	10bfffcc 	andi	r2,r2,65535
   44c9c:	10a0001c 	xori	r2,r2,32768
   44ca0:	10a00004 	addi	r2,r2,-32768
   44ca4:	1000311e 	bne	r2,zero,44d6c <__swsetup_r+0x130>
   44ca8:	80800517 	ldw	r2,20(r16)
   44cac:	80800215 	stw	r2,8(r16)
   44cb0:	18002326 	beq	r3,zero,44d40 <__swsetup_r+0x104>
   44cb4:	0005883a 	mov	r2,zero
   44cb8:	dfc00217 	ldw	ra,8(sp)
   44cbc:	dc400117 	ldw	r17,4(sp)
   44cc0:	dc000017 	ldw	r16,0(sp)
   44cc4:	dec00304 	addi	sp,sp,12
   44cc8:	f800283a 	ret
   44ccc:	10c0040c 	andi	r3,r2,16
   44cd0:	18ffffcc 	andi	r3,r3,65535
   44cd4:	18e0001c 	xori	r3,r3,32768
   44cd8:	18e00004 	addi	r3,r3,-32768
   44cdc:	18001e26 	beq	r3,zero,44d58 <__swsetup_r+0x11c>
   44ce0:	10c0010c 	andi	r3,r2,4
   44ce4:	18ffffcc 	andi	r3,r3,65535
   44ce8:	18e0001c 	xori	r3,r3,32768
   44cec:	18e00004 	addi	r3,r3,-32768
   44cf0:	1800211e 	bne	r3,zero,44d78 <__swsetup_r+0x13c>
   44cf4:	80c00417 	ldw	r3,16(r16)
   44cf8:	11400214 	ori	r5,r2,8
   44cfc:	8140030d 	sth	r5,12(r16)
   44d00:	2805883a 	mov	r2,r5
   44d04:	183fe11e 	bne	r3,zero,44c8c <__swsetup_r+0x50>
   44d08:	1140a00c 	andi	r5,r2,640
   44d0c:	01008004 	movi	r4,512
   44d10:	293fde26 	beq	r5,r4,44c8c <__swsetup_r+0x50>
   44d14:	8809883a 	mov	r4,r17
   44d18:	800b883a 	mov	r5,r16
   44d1c:	00419200 	call	41920 <__smakebuf_r>
   44d20:	8080030b 	ldhu	r2,12(r16)
   44d24:	80c00417 	ldw	r3,16(r16)
   44d28:	003fd806 	br	44c8c <__swsetup_r+0x50>
   44d2c:	80800517 	ldw	r2,20(r16)
   44d30:	80000215 	stw	zero,8(r16)
   44d34:	0085c83a 	sub	r2,zero,r2
   44d38:	80800615 	stw	r2,24(r16)
   44d3c:	183fdd1e 	bne	r3,zero,44cb4 <__swsetup_r+0x78>
   44d40:	8080030b 	ldhu	r2,12(r16)
   44d44:	1080200c 	andi	r2,r2,128
   44d48:	10bfffcc 	andi	r2,r2,65535
   44d4c:	10a0001c 	xori	r2,r2,32768
   44d50:	10a00004 	addi	r2,r2,-32768
   44d54:	103fd826 	beq	r2,zero,44cb8 <__swsetup_r+0x7c>
   44d58:	00bfffc4 	movi	r2,-1
   44d5c:	003fd606 	br	44cb8 <__swsetup_r+0x7c>
   44d60:	1009883a 	mov	r4,r2
   44d64:	0040a300 	call	40a30 <__sinit>
   44d68:	003fc006 	br	44c6c <__swsetup_r+0x30>
   44d6c:	0005883a 	mov	r2,zero
   44d70:	80800215 	stw	r2,8(r16)
   44d74:	003fce06 	br	44cb0 <__swsetup_r+0x74>
   44d78:	81400c17 	ldw	r5,48(r16)
   44d7c:	28000626 	beq	r5,zero,44d98 <__swsetup_r+0x15c>
   44d80:	80c01004 	addi	r3,r16,64
   44d84:	28c00326 	beq	r5,r3,44d94 <__swsetup_r+0x158>
   44d88:	8809883a 	mov	r4,r17
   44d8c:	0040ff00 	call	40ff0 <_free_r>
   44d90:	8080030b 	ldhu	r2,12(r16)
   44d94:	80000c15 	stw	zero,48(r16)
   44d98:	80c00417 	ldw	r3,16(r16)
   44d9c:	013ff6c4 	movi	r4,-37
   44da0:	2084703a 	and	r2,r4,r2
   44da4:	80000115 	stw	zero,4(r16)
   44da8:	80c00015 	stw	r3,0(r16)
   44dac:	003fd206 	br	44cf8 <__swsetup_r+0xbc>

00044db0 <_close_r>:
   44db0:	defffd04 	addi	sp,sp,-12
   44db4:	dc400115 	stw	r17,4(sp)
   44db8:	dc000015 	stw	r16,0(sp)
   44dbc:	2023883a 	mov	r17,r4
   44dc0:	04000174 	movhi	r16,5
   44dc4:	84063b04 	addi	r16,r16,6380
   44dc8:	2809883a 	mov	r4,r5
   44dcc:	dfc00215 	stw	ra,8(sp)
   44dd0:	80000015 	stw	zero,0(r16)
   44dd4:	004ab800 	call	4ab80 <close>
   44dd8:	00ffffc4 	movi	r3,-1
   44ddc:	10c00526 	beq	r2,r3,44df4 <_close_r+0x44>
   44de0:	dfc00217 	ldw	ra,8(sp)
   44de4:	dc400117 	ldw	r17,4(sp)
   44de8:	dc000017 	ldw	r16,0(sp)
   44dec:	dec00304 	addi	sp,sp,12
   44df0:	f800283a 	ret
   44df4:	80c00017 	ldw	r3,0(r16)
   44df8:	183ff926 	beq	r3,zero,44de0 <_close_r+0x30>
   44dfc:	88c00015 	stw	r3,0(r17)
   44e00:	dfc00217 	ldw	ra,8(sp)
   44e04:	dc400117 	ldw	r17,4(sp)
   44e08:	dc000017 	ldw	r16,0(sp)
   44e0c:	dec00304 	addi	sp,sp,12
   44e10:	f800283a 	ret

00044e14 <quorem>:
   44e14:	defff204 	addi	sp,sp,-56
   44e18:	dd000815 	stw	r20,32(sp)
   44e1c:	20800417 	ldw	r2,16(r4)
   44e20:	2d000417 	ldw	r20,16(r5)
   44e24:	dcc00715 	stw	r19,28(sp)
   44e28:	dfc00d15 	stw	ra,52(sp)
   44e2c:	df000c15 	stw	fp,48(sp)
   44e30:	ddc00b15 	stw	r23,44(sp)
   44e34:	dd800a15 	stw	r22,40(sp)
   44e38:	dd400915 	stw	r21,36(sp)
   44e3c:	dc800615 	stw	r18,24(sp)
   44e40:	dc400515 	stw	r17,20(sp)
   44e44:	dc000415 	stw	r16,16(sp)
   44e48:	d9400015 	stw	r5,0(sp)
   44e4c:	2027883a 	mov	r19,r4
   44e50:	15007d16 	blt	r2,r20,45048 <quorem+0x234>
   44e54:	a0800104 	addi	r2,r20,4
   44e58:	1085883a 	add	r2,r2,r2
   44e5c:	1085883a 	add	r2,r2,r2
   44e60:	28ad883a 	add	r22,r5,r2
   44e64:	2085883a 	add	r2,r4,r2
   44e68:	10800017 	ldw	r2,0(r2)
   44e6c:	b1400017 	ldw	r5,0(r22)
   44e70:	a53fffc4 	addi	r20,r20,-1
   44e74:	1009883a 	mov	r4,r2
   44e78:	29400044 	addi	r5,r5,1
   44e7c:	d8800115 	stw	r2,4(sp)
   44e80:	004a4bc0 	call	4a4bc <__udivsi3>
   44e84:	1025883a 	mov	r18,r2
   44e88:	d8800017 	ldw	r2,0(sp)
   44e8c:	9f000504 	addi	fp,r19,20
   44e90:	14000504 	addi	r16,r2,20
   44e94:	90003626 	beq	r18,zero,44f70 <quorem+0x15c>
   44e98:	802b883a 	mov	r21,r16
   44e9c:	e023883a 	mov	r17,fp
   44ea0:	0007883a 	mov	r3,zero
   44ea4:	002f883a 	mov	r23,zero
   44ea8:	a9800017 	ldw	r6,0(r21)
   44eac:	900b883a 	mov	r5,r18
   44eb0:	d8c00315 	stw	r3,12(sp)
   44eb4:	313fffcc 	andi	r4,r6,65535
   44eb8:	d9800215 	stw	r6,8(sp)
   44ebc:	004a4cc0 	call	4a4cc <__mulsi3>
   44ec0:	d9800217 	ldw	r6,8(sp)
   44ec4:	d8c00317 	ldw	r3,12(sp)
   44ec8:	900b883a 	mov	r5,r18
   44ecc:	3008d43a 	srli	r4,r6,16
   44ed0:	1887883a 	add	r3,r3,r2
   44ed4:	d8c00315 	stw	r3,12(sp)
   44ed8:	004a4cc0 	call	4a4cc <__mulsi3>
   44edc:	89400017 	ldw	r5,0(r17)
   44ee0:	d8c00317 	ldw	r3,12(sp)
   44ee4:	ad400104 	addi	r21,r21,4
   44ee8:	293fffcc 	andi	r4,r5,65535
   44eec:	1810d43a 	srli	r8,r3,16
   44ef0:	25c9883a 	add	r4,r4,r23
   44ef4:	18ffffcc 	andi	r3,r3,65535
   44ef8:	20c9c83a 	sub	r4,r4,r3
   44efc:	280cd43a 	srli	r6,r5,16
   44f00:	4085883a 	add	r2,r8,r2
   44f04:	2007d43a 	srai	r3,r4,16
   44f08:	117fffcc 	andi	r5,r2,65535
   44f0c:	314bc83a 	sub	r5,r6,r5
   44f10:	28cb883a 	add	r5,r5,r3
   44f14:	8940008d 	sth	r5,2(r17)
   44f18:	8900000d 	sth	r4,0(r17)
   44f1c:	1006d43a 	srli	r3,r2,16
   44f20:	282fd43a 	srai	r23,r5,16
   44f24:	8c400104 	addi	r17,r17,4
   44f28:	b57fdf2e 	bgeu	r22,r21,44ea8 <quorem+0x94>
   44f2c:	d8c00117 	ldw	r3,4(sp)
   44f30:	18000f1e 	bne	r3,zero,44f70 <quorem+0x15c>
   44f34:	a0800144 	addi	r2,r20,5
   44f38:	1085883a 	add	r2,r2,r2
   44f3c:	1085883a 	add	r2,r2,r2
   44f40:	9887883a 	add	r3,r19,r2
   44f44:	18bfff04 	addi	r2,r3,-4
   44f48:	e080082e 	bgeu	fp,r2,44f6c <quorem+0x158>
   44f4c:	18ffff17 	ldw	r3,-4(r3)
   44f50:	18000326 	beq	r3,zero,44f60 <quorem+0x14c>
   44f54:	00000506 	br	44f6c <quorem+0x158>
   44f58:	10c00017 	ldw	r3,0(r2)
   44f5c:	1800031e 	bne	r3,zero,44f6c <quorem+0x158>
   44f60:	10bfff04 	addi	r2,r2,-4
   44f64:	a53fffc4 	addi	r20,r20,-1
   44f68:	e0bffb36 	bltu	fp,r2,44f58 <quorem+0x144>
   44f6c:	9d000415 	stw	r20,16(r19)
   44f70:	d9400017 	ldw	r5,0(sp)
   44f74:	9809883a 	mov	r4,r19
   44f78:	0047aa40 	call	47aa4 <__mcmp>
   44f7c:	10002516 	blt	r2,zero,45014 <quorem+0x200>
   44f80:	94800044 	addi	r18,r18,1
   44f84:	e007883a 	mov	r3,fp
   44f88:	000d883a 	mov	r6,zero
   44f8c:	18800017 	ldw	r2,0(r3)
   44f90:	82000017 	ldw	r8,0(r16)
   44f94:	84000104 	addi	r16,r16,4
   44f98:	11ffffcc 	andi	r7,r2,65535
   44f9c:	413fffcc 	andi	r4,r8,65535
   44fa0:	398d883a 	add	r6,r7,r6
   44fa4:	310fc83a 	sub	r7,r6,r4
   44fa8:	4010d43a 	srli	r8,r8,16
   44fac:	100cd43a 	srli	r6,r2,16
   44fb0:	3809d43a 	srai	r4,r7,16
   44fb4:	19c0000d 	sth	r7,0(r3)
   44fb8:	320dc83a 	sub	r6,r6,r8
   44fbc:	310d883a 	add	r6,r6,r4
   44fc0:	1980008d 	sth	r6,2(r3)
   44fc4:	300dd43a 	srai	r6,r6,16
   44fc8:	18c00104 	addi	r3,r3,4
   44fcc:	b43fef2e 	bgeu	r22,r16,44f8c <quorem+0x178>
   44fd0:	a0800144 	addi	r2,r20,5
   44fd4:	1085883a 	add	r2,r2,r2
   44fd8:	1085883a 	add	r2,r2,r2
   44fdc:	9885883a 	add	r2,r19,r2
   44fe0:	10c00017 	ldw	r3,0(r2)
   44fe4:	18000b1e 	bne	r3,zero,45014 <quorem+0x200>
   44fe8:	10ffff04 	addi	r3,r2,-4
   44fec:	e0c0082e 	bgeu	fp,r3,45010 <quorem+0x1fc>
   44ff0:	10bfff17 	ldw	r2,-4(r2)
   44ff4:	10000326 	beq	r2,zero,45004 <quorem+0x1f0>
   44ff8:	00000506 	br	45010 <quorem+0x1fc>
   44ffc:	18800017 	ldw	r2,0(r3)
   45000:	1000031e 	bne	r2,zero,45010 <quorem+0x1fc>
   45004:	18ffff04 	addi	r3,r3,-4
   45008:	a53fffc4 	addi	r20,r20,-1
   4500c:	e0fffb36 	bltu	fp,r3,44ffc <quorem+0x1e8>
   45010:	9d000415 	stw	r20,16(r19)
   45014:	9005883a 	mov	r2,r18
   45018:	dfc00d17 	ldw	ra,52(sp)
   4501c:	df000c17 	ldw	fp,48(sp)
   45020:	ddc00b17 	ldw	r23,44(sp)
   45024:	dd800a17 	ldw	r22,40(sp)
   45028:	dd400917 	ldw	r21,36(sp)
   4502c:	dd000817 	ldw	r20,32(sp)
   45030:	dcc00717 	ldw	r19,28(sp)
   45034:	dc800617 	ldw	r18,24(sp)
   45038:	dc400517 	ldw	r17,20(sp)
   4503c:	dc000417 	ldw	r16,16(sp)
   45040:	dec00e04 	addi	sp,sp,56
   45044:	f800283a 	ret
   45048:	0005883a 	mov	r2,zero
   4504c:	003ff206 	br	45018 <quorem+0x204>

00045050 <_dtoa_r>:
   45050:	20801017 	ldw	r2,64(r4)
   45054:	deffdf04 	addi	sp,sp,-132
   45058:	dcc01a15 	stw	r19,104(sp)
   4505c:	dc801915 	stw	r18,100(sp)
   45060:	dc401815 	stw	r17,96(sp)
   45064:	dc001715 	stw	r16,92(sp)
   45068:	dfc02015 	stw	ra,128(sp)
   4506c:	df001f15 	stw	fp,124(sp)
   45070:	ddc01e15 	stw	r23,120(sp)
   45074:	dd801d15 	stw	r22,116(sp)
   45078:	dd401c15 	stw	r21,112(sp)
   4507c:	dd001b15 	stw	r20,108(sp)
   45080:	d9400315 	stw	r5,12(sp)
   45084:	d9c00415 	stw	r7,16(sp)
   45088:	2021883a 	mov	r16,r4
   4508c:	3025883a 	mov	r18,r6
   45090:	dcc02317 	ldw	r19,140(sp)
   45094:	3023883a 	mov	r17,r6
   45098:	10000826 	beq	r2,zero,450bc <_dtoa_r+0x6c>
   4509c:	20c01117 	ldw	r3,68(r4)
   450a0:	01800044 	movi	r6,1
   450a4:	100b883a 	mov	r5,r2
   450a8:	30cc983a 	sll	r6,r6,r3
   450ac:	10c00115 	stw	r3,4(r2)
   450b0:	11800215 	stw	r6,8(r2)
   450b4:	00472000 	call	47200 <_Bfree>
   450b8:	80001015 	stw	zero,64(r16)
   450bc:	90002f16 	blt	r18,zero,4517c <_dtoa_r+0x12c>
   450c0:	98000015 	stw	zero,0(r19)
   450c4:	90dffc2c 	andhi	r3,r18,32752
   450c8:	009ffc34 	movhi	r2,32752
   450cc:	18801c26 	beq	r3,r2,45140 <_dtoa_r+0xf0>
   450d0:	d9000317 	ldw	r4,12(sp)
   450d4:	880b883a 	mov	r5,r17
   450d8:	000d883a 	mov	r6,zero
   450dc:	000f883a 	mov	r7,zero
   450e0:	0049efc0 	call	49efc <__eqdf2>
   450e4:	10002c1e 	bne	r2,zero,45198 <_dtoa_r+0x148>
   450e8:	d9002217 	ldw	r4,136(sp)
   450ec:	d9c02417 	ldw	r7,144(sp)
   450f0:	00800044 	movi	r2,1
   450f4:	20800015 	stw	r2,0(r4)
   450f8:	38019426 	beq	r7,zero,4574c <_dtoa_r+0x6fc>
   450fc:	00800174 	movhi	r2,5
   45100:	10b7de44 	addi	r2,r2,-8327
   45104:	38800015 	stw	r2,0(r7)
   45108:	15ffffc4 	addi	r23,r2,-1
   4510c:	b805883a 	mov	r2,r23
   45110:	dfc02017 	ldw	ra,128(sp)
   45114:	df001f17 	ldw	fp,124(sp)
   45118:	ddc01e17 	ldw	r23,120(sp)
   4511c:	dd801d17 	ldw	r22,116(sp)
   45120:	dd401c17 	ldw	r21,112(sp)
   45124:	dd001b17 	ldw	r20,108(sp)
   45128:	dcc01a17 	ldw	r19,104(sp)
   4512c:	dc801917 	ldw	r18,100(sp)
   45130:	dc401817 	ldw	r17,96(sp)
   45134:	dc001717 	ldw	r16,92(sp)
   45138:	dec02104 	addi	sp,sp,132
   4513c:	f800283a 	ret
   45140:	d8c02217 	ldw	r3,136(sp)
   45144:	d9000317 	ldw	r4,12(sp)
   45148:	0089c3c4 	movi	r2,9999
   4514c:	18800015 	stw	r2,0(r3)
   45150:	20016c26 	beq	r4,zero,45704 <_dtoa_r+0x6b4>
   45154:	05c00174 	movhi	r23,5
   45158:	bdf7ea04 	addi	r23,r23,-8280
   4515c:	d9c02417 	ldw	r7,144(sp)
   45160:	383fea26 	beq	r7,zero,4510c <_dtoa_r+0xbc>
   45164:	b88000c7 	ldb	r2,3(r23)
   45168:	10016d1e 	bne	r2,zero,45720 <_dtoa_r+0x6d0>
   4516c:	b88000c4 	addi	r2,r23,3
   45170:	d8c02417 	ldw	r3,144(sp)
   45174:	18800015 	stw	r2,0(r3)
   45178:	003fe406 	br	4510c <_dtoa_r+0xbc>
   4517c:	04600034 	movhi	r17,32768
   45180:	8c7fffc4 	addi	r17,r17,-1
   45184:	9462703a 	and	r17,r18,r17
   45188:	00800044 	movi	r2,1
   4518c:	98800015 	stw	r2,0(r19)
   45190:	8825883a 	mov	r18,r17
   45194:	003fcb06 	br	450c4 <_dtoa_r+0x74>
   45198:	d9400317 	ldw	r5,12(sp)
   4519c:	9028d53a 	srli	r20,r18,20
   451a0:	d8800204 	addi	r2,sp,8
   451a4:	d8800015 	stw	r2,0(sp)
   451a8:	8009883a 	mov	r4,r16
   451ac:	880d883a 	mov	r6,r17
   451b0:	d9c00104 	addi	r7,sp,4
   451b4:	0047e4c0 	call	47e4c <__d2b>
   451b8:	a501ffcc 	andi	r20,r20,2047
   451bc:	1039883a 	mov	fp,r2
   451c0:	a001591e 	bne	r20,zero,45728 <_dtoa_r+0x6d8>
   451c4:	dd400217 	ldw	r21,8(sp)
   451c8:	dd000117 	ldw	r20,4(sp)
   451cc:	00befbc4 	movi	r2,-1041
   451d0:	ad29883a 	add	r20,r21,r20
   451d4:	a082d216 	blt	r20,r2,45d20 <_dtoa_r+0xcd0>
   451d8:	d8c00317 	ldw	r3,12(sp)
   451dc:	013f0384 	movi	r4,-1010
   451e0:	2509c83a 	sub	r4,r4,r20
   451e4:	a0810484 	addi	r2,r20,1042
   451e8:	9124983a 	sll	r18,r18,r4
   451ec:	1884d83a 	srl	r2,r3,r2
   451f0:	9088b03a 	or	r4,r18,r2
   451f4:	004a2800 	call	4a280 <__floatunsidf>
   451f8:	1009883a 	mov	r4,r2
   451fc:	017f8434 	movhi	r5,65040
   45200:	00800044 	movi	r2,1
   45204:	194b883a 	add	r5,r3,r5
   45208:	a53fffc4 	addi	r20,r20,-1
   4520c:	d8800f15 	stw	r2,60(sp)
   45210:	000d883a 	mov	r6,zero
   45214:	01cffe34 	movhi	r7,16376
   45218:	0049a040 	call	49a04 <__subdf3>
   4521c:	1009883a 	mov	r4,r2
   45220:	180b883a 	mov	r5,r3
   45224:	0198dbf4 	movhi	r6,25455
   45228:	3190d844 	addi	r6,r6,17249
   4522c:	01cff4f4 	movhi	r7,16339
   45230:	39e1e9c4 	addi	r7,r7,-30809
   45234:	0049a640 	call	49a64 <__muldf3>
   45238:	180b883a 	mov	r5,r3
   4523c:	01a2d874 	movhi	r6,35681
   45240:	31b22cc4 	addi	r6,r6,-14157
   45244:	01cff1f4 	movhi	r7,16327
   45248:	39e28a04 	addi	r7,r7,-30168
   4524c:	1009883a 	mov	r4,r2
   45250:	00499b00 	call	499b0 <__adddf3>
   45254:	a009883a 	mov	r4,r20
   45258:	1027883a 	mov	r19,r2
   4525c:	1825883a 	mov	r18,r3
   45260:	004a0d80 	call	4a0d8 <__floatsidf>
   45264:	1009883a 	mov	r4,r2
   45268:	180b883a 	mov	r5,r3
   4526c:	019427f4 	movhi	r6,20639
   45270:	319e7ec4 	addi	r6,r6,31227
   45274:	01cff4f4 	movhi	r7,16339
   45278:	39d104c4 	addi	r7,r7,17427
   4527c:	0049a640 	call	49a64 <__muldf3>
   45280:	9809883a 	mov	r4,r19
   45284:	900b883a 	mov	r5,r18
   45288:	100d883a 	mov	r6,r2
   4528c:	180f883a 	mov	r7,r3
   45290:	00499b00 	call	499b0 <__adddf3>
   45294:	1009883a 	mov	r4,r2
   45298:	180b883a 	mov	r5,r3
   4529c:	1027883a 	mov	r19,r2
   452a0:	1825883a 	mov	r18,r3
   452a4:	004a1ac0 	call	4a1ac <__fixdfsi>
   452a8:	9809883a 	mov	r4,r19
   452ac:	900b883a 	mov	r5,r18
   452b0:	000d883a 	mov	r6,zero
   452b4:	000f883a 	mov	r7,zero
   452b8:	d8800615 	stw	r2,24(sp)
   452bc:	004a07c0 	call	4a07c <__ltdf2>
   452c0:	10027e16 	blt	r2,zero,45cbc <_dtoa_r+0xc6c>
   452c4:	d8c00617 	ldw	r3,24(sp)
   452c8:	00800584 	movi	r2,22
   452cc:	10c26c36 	bltu	r2,r3,45c80 <_dtoa_r+0xc30>
   452d0:	180490fa 	slli	r2,r3,3
   452d4:	00c00174 	movhi	r3,5
   452d8:	18f80f04 	addi	r3,r3,-8132
   452dc:	d9800317 	ldw	r6,12(sp)
   452e0:	1885883a 	add	r2,r3,r2
   452e4:	11000017 	ldw	r4,0(r2)
   452e8:	11400117 	ldw	r5,4(r2)
   452ec:	880f883a 	mov	r7,r17
   452f0:	0049fb40 	call	49fb4 <__gtdf2>
   452f4:	00828f0e 	bge	zero,r2,45d34 <_dtoa_r+0xce4>
   452f8:	d8800617 	ldw	r2,24(sp)
   452fc:	d8000d15 	stw	zero,52(sp)
   45300:	10bfffc4 	addi	r2,r2,-1
   45304:	d8800615 	stw	r2,24(sp)
   45308:	ad29c83a 	sub	r20,r21,r20
   4530c:	a53fffc4 	addi	r20,r20,-1
   45310:	a0026616 	blt	r20,zero,45cac <_dtoa_r+0xc5c>
   45314:	dd000715 	stw	r20,28(sp)
   45318:	d8000815 	stw	zero,32(sp)
   4531c:	d8800617 	ldw	r2,24(sp)
   45320:	10025a16 	blt	r2,zero,45c8c <_dtoa_r+0xc3c>
   45324:	d8c00717 	ldw	r3,28(sp)
   45328:	d8800b15 	stw	r2,44(sp)
   4532c:	d8000a15 	stw	zero,40(sp)
   45330:	1887883a 	add	r3,r3,r2
   45334:	d8c00715 	stw	r3,28(sp)
   45338:	d9c00417 	ldw	r7,16(sp)
   4533c:	00800244 	movi	r2,9
   45340:	11c10536 	bltu	r2,r7,45758 <_dtoa_r+0x708>
   45344:	00800144 	movi	r2,5
   45348:	11c4c60e 	bge	r2,r7,46664 <_dtoa_r+0x1614>
   4534c:	39ffff04 	addi	r7,r7,-4
   45350:	d9c00415 	stw	r7,16(sp)
   45354:	0027883a 	mov	r19,zero
   45358:	d9c00417 	ldw	r7,16(sp)
   4535c:	008000c4 	movi	r2,3
   45360:	3883a226 	beq	r7,r2,461ec <_dtoa_r+0x119c>
   45364:	11c2bc16 	blt	r2,r7,45e58 <_dtoa_r+0xe08>
   45368:	00800084 	movi	r2,2
   4536c:	3880fb1e 	bne	r7,r2,4575c <_dtoa_r+0x70c>
   45370:	d8000c15 	stw	zero,48(sp)
   45374:	d9002117 	ldw	r4,132(sp)
   45378:	0103ae0e 	bge	zero,r4,46234 <_dtoa_r+0x11e4>
   4537c:	2025883a 	mov	r18,r4
   45380:	d9000e15 	stw	r4,56(sp)
   45384:	d9000915 	stw	r4,36(sp)
   45388:	80001115 	stw	zero,68(r16)
   4538c:	008005c4 	movi	r2,23
   45390:	1484b22e 	bgeu	r2,r18,4665c <_dtoa_r+0x160c>
   45394:	00c00044 	movi	r3,1
   45398:	00800104 	movi	r2,4
   4539c:	1085883a 	add	r2,r2,r2
   453a0:	11000504 	addi	r4,r2,20
   453a4:	180b883a 	mov	r5,r3
   453a8:	18c00044 	addi	r3,r3,1
   453ac:	913ffb2e 	bgeu	r18,r4,4539c <_dtoa_r+0x34c>
   453b0:	81401115 	stw	r5,68(r16)
   453b4:	8009883a 	mov	r4,r16
   453b8:	00471580 	call	47158 <_Balloc>
   453bc:	102f883a 	mov	r23,r2
   453c0:	80801015 	stw	r2,64(r16)
   453c4:	00800384 	movi	r2,14
   453c8:	1480f036 	bltu	r2,r18,4578c <_dtoa_r+0x73c>
   453cc:	9800ef26 	beq	r19,zero,4578c <_dtoa_r+0x73c>
   453d0:	d8800617 	ldw	r2,24(sp)
   453d4:	00839c0e 	bge	zero,r2,46248 <_dtoa_r+0x11f8>
   453d8:	d8c00617 	ldw	r3,24(sp)
   453dc:	108003cc 	andi	r2,r2,15
   453e0:	100490fa 	slli	r2,r2,3
   453e4:	182bd13a 	srai	r21,r3,4
   453e8:	00c00174 	movhi	r3,5
   453ec:	18f80f04 	addi	r3,r3,-8132
   453f0:	1885883a 	add	r2,r3,r2
   453f4:	a8c0040c 	andi	r3,r21,16
   453f8:	12800017 	ldw	r10,0(r2)
   453fc:	15800117 	ldw	r22,4(r2)
   45400:	18038726 	beq	r3,zero,46220 <_dtoa_r+0x11d0>
   45404:	00800174 	movhi	r2,5
   45408:	10b80504 	addi	r2,r2,-8172
   4540c:	11800817 	ldw	r6,32(r2)
   45410:	11c00917 	ldw	r7,36(r2)
   45414:	d9000317 	ldw	r4,12(sp)
   45418:	880b883a 	mov	r5,r17
   4541c:	da801515 	stw	r10,84(sp)
   45420:	0049d480 	call	49d48 <__divdf3>
   45424:	da801517 	ldw	r10,84(sp)
   45428:	d8801015 	stw	r2,64(sp)
   4542c:	1829883a 	mov	r20,r3
   45430:	ad4003cc 	andi	r21,r21,15
   45434:	048000c4 	movi	r18,3
   45438:	a8001126 	beq	r21,zero,45480 <_dtoa_r+0x430>
   4543c:	04c00174 	movhi	r19,5
   45440:	9cf80504 	addi	r19,r19,-8172
   45444:	5005883a 	mov	r2,r10
   45448:	b007883a 	mov	r3,r22
   4544c:	a980004c 	andi	r6,r21,1
   45450:	1009883a 	mov	r4,r2
   45454:	a82bd07a 	srai	r21,r21,1
   45458:	180b883a 	mov	r5,r3
   4545c:	30000426 	beq	r6,zero,45470 <_dtoa_r+0x420>
   45460:	99800017 	ldw	r6,0(r19)
   45464:	99c00117 	ldw	r7,4(r19)
   45468:	94800044 	addi	r18,r18,1
   4546c:	0049a640 	call	49a64 <__muldf3>
   45470:	9cc00204 	addi	r19,r19,8
   45474:	a83ff51e 	bne	r21,zero,4544c <_dtoa_r+0x3fc>
   45478:	1015883a 	mov	r10,r2
   4547c:	182d883a 	mov	r22,r3
   45480:	d9001017 	ldw	r4,64(sp)
   45484:	a00b883a 	mov	r5,r20
   45488:	500d883a 	mov	r6,r10
   4548c:	b00f883a 	mov	r7,r22
   45490:	0049d480 	call	49d48 <__divdf3>
   45494:	1027883a 	mov	r19,r2
   45498:	1829883a 	mov	r20,r3
   4549c:	d8c00d17 	ldw	r3,52(sp)
   454a0:	18000626 	beq	r3,zero,454bc <_dtoa_r+0x46c>
   454a4:	9809883a 	mov	r4,r19
   454a8:	a00b883a 	mov	r5,r20
   454ac:	000d883a 	mov	r6,zero
   454b0:	01cffc34 	movhi	r7,16368
   454b4:	004a07c0 	call	4a07c <__ltdf2>
   454b8:	10040e16 	blt	r2,zero,464f4 <_dtoa_r+0x14a4>
   454bc:	9009883a 	mov	r4,r18
   454c0:	004a0d80 	call	4a0d8 <__floatsidf>
   454c4:	1009883a 	mov	r4,r2
   454c8:	180b883a 	mov	r5,r3
   454cc:	980d883a 	mov	r6,r19
   454d0:	a00f883a 	mov	r7,r20
   454d4:	0049a640 	call	49a64 <__muldf3>
   454d8:	1009883a 	mov	r4,r2
   454dc:	180b883a 	mov	r5,r3
   454e0:	000d883a 	mov	r6,zero
   454e4:	01d00734 	movhi	r7,16412
   454e8:	00499b00 	call	499b0 <__adddf3>
   454ec:	057f3034 	movhi	r21,64704
   454f0:	1d6b883a 	add	r21,r3,r21
   454f4:	d8c00917 	ldw	r3,36(sp)
   454f8:	1025883a 	mov	r18,r2
   454fc:	18031f26 	beq	r3,zero,4617c <_dtoa_r+0x112c>
   45500:	d8800617 	ldw	r2,24(sp)
   45504:	dac00917 	ldw	r11,36(sp)
   45508:	d8801315 	stw	r2,76(sp)
   4550c:	d8c00c17 	ldw	r3,48(sp)
   45510:	18039026 	beq	r3,zero,46354 <_dtoa_r+0x1304>
   45514:	58bfffc4 	addi	r2,r11,-1
   45518:	100490fa 	slli	r2,r2,3
   4551c:	00c00174 	movhi	r3,5
   45520:	18f80f04 	addi	r3,r3,-8132
   45524:	0009883a 	mov	r4,zero
   45528:	1885883a 	add	r2,r3,r2
   4552c:	11800017 	ldw	r6,0(r2)
   45530:	11c00117 	ldw	r7,4(r2)
   45534:	014ff834 	movhi	r5,16352
   45538:	dac01615 	stw	r11,88(sp)
   4553c:	0049d480 	call	49d48 <__divdf3>
   45540:	900d883a 	mov	r6,r18
   45544:	a80f883a 	mov	r7,r21
   45548:	1009883a 	mov	r4,r2
   4554c:	180b883a 	mov	r5,r3
   45550:	0049a040 	call	49a04 <__subdf3>
   45554:	a00b883a 	mov	r5,r20
   45558:	9809883a 	mov	r4,r19
   4555c:	182b883a 	mov	r21,r3
   45560:	d8801015 	stw	r2,64(sp)
   45564:	004a1ac0 	call	4a1ac <__fixdfsi>
   45568:	1009883a 	mov	r4,r2
   4556c:	d8801515 	stw	r2,84(sp)
   45570:	004a0d80 	call	4a0d8 <__floatsidf>
   45574:	9809883a 	mov	r4,r19
   45578:	a00b883a 	mov	r5,r20
   4557c:	100d883a 	mov	r6,r2
   45580:	180f883a 	mov	r7,r3
   45584:	0049a040 	call	49a04 <__subdf3>
   45588:	da401517 	ldw	r9,84(sp)
   4558c:	d9001017 	ldw	r4,64(sp)
   45590:	a80b883a 	mov	r5,r21
   45594:	4d000c04 	addi	r20,r9,48
   45598:	bd000005 	stb	r20,0(r23)
   4559c:	100d883a 	mov	r6,r2
   455a0:	180f883a 	mov	r7,r3
   455a4:	bd800044 	addi	r22,r23,1
   455a8:	1025883a 	mov	r18,r2
   455ac:	1827883a 	mov	r19,r3
   455b0:	0049fb40 	call	49fb4 <__gtdf2>
   455b4:	00842216 	blt	zero,r2,46640 <_dtoa_r+0x15f0>
   455b8:	0009883a 	mov	r4,zero
   455bc:	014ffc34 	movhi	r5,16368
   455c0:	900d883a 	mov	r6,r18
   455c4:	980f883a 	mov	r7,r19
   455c8:	0049a040 	call	49a04 <__subdf3>
   455cc:	d9001017 	ldw	r4,64(sp)
   455d0:	a80b883a 	mov	r5,r21
   455d4:	100d883a 	mov	r6,r2
   455d8:	180f883a 	mov	r7,r3
   455dc:	0049fb40 	call	49fb4 <__gtdf2>
   455e0:	dac01617 	ldw	r11,88(sp)
   455e4:	00841316 	blt	zero,r2,46634 <_dtoa_r+0x15e4>
   455e8:	00800044 	movi	r2,1
   455ec:	12c0670e 	bge	r2,r11,4578c <_dtoa_r+0x73c>
   455f0:	bad7883a 	add	r11,r23,r11
   455f4:	df001115 	stw	fp,68(sp)
   455f8:	dc401215 	stw	r17,72(sp)
   455fc:	5839883a 	mov	fp,r11
   45600:	dc401017 	ldw	r17,64(sp)
   45604:	00000806 	br	45628 <_dtoa_r+0x5d8>
   45608:	0049a040 	call	49a04 <__subdf3>
   4560c:	1009883a 	mov	r4,r2
   45610:	180b883a 	mov	r5,r3
   45614:	880d883a 	mov	r6,r17
   45618:	a80f883a 	mov	r7,r21
   4561c:	004a07c0 	call	4a07c <__ltdf2>
   45620:	1003ee16 	blt	r2,zero,465dc <_dtoa_r+0x158c>
   45624:	b703f126 	beq	r22,fp,465ec <_dtoa_r+0x159c>
   45628:	8809883a 	mov	r4,r17
   4562c:	a80b883a 	mov	r5,r21
   45630:	000d883a 	mov	r6,zero
   45634:	01d00934 	movhi	r7,16420
   45638:	0049a640 	call	49a64 <__muldf3>
   4563c:	000d883a 	mov	r6,zero
   45640:	01d00934 	movhi	r7,16420
   45644:	9009883a 	mov	r4,r18
   45648:	980b883a 	mov	r5,r19
   4564c:	1023883a 	mov	r17,r2
   45650:	182b883a 	mov	r21,r3
   45654:	0049a640 	call	49a64 <__muldf3>
   45658:	180b883a 	mov	r5,r3
   4565c:	1009883a 	mov	r4,r2
   45660:	1825883a 	mov	r18,r3
   45664:	1027883a 	mov	r19,r2
   45668:	004a1ac0 	call	4a1ac <__fixdfsi>
   4566c:	1009883a 	mov	r4,r2
   45670:	1029883a 	mov	r20,r2
   45674:	004a0d80 	call	4a0d8 <__floatsidf>
   45678:	9809883a 	mov	r4,r19
   4567c:	900b883a 	mov	r5,r18
   45680:	100d883a 	mov	r6,r2
   45684:	180f883a 	mov	r7,r3
   45688:	0049a040 	call	49a04 <__subdf3>
   4568c:	a5000c04 	addi	r20,r20,48
   45690:	b5000005 	stb	r20,0(r22)
   45694:	1009883a 	mov	r4,r2
   45698:	180b883a 	mov	r5,r3
   4569c:	880d883a 	mov	r6,r17
   456a0:	a80f883a 	mov	r7,r21
   456a4:	1025883a 	mov	r18,r2
   456a8:	1827883a 	mov	r19,r3
   456ac:	004a07c0 	call	4a07c <__ltdf2>
   456b0:	b5800044 	addi	r22,r22,1
   456b4:	0009883a 	mov	r4,zero
   456b8:	014ffc34 	movhi	r5,16368
   456bc:	900d883a 	mov	r6,r18
   456c0:	980f883a 	mov	r7,r19
   456c4:	103fd00e 	bge	r2,zero,45608 <_dtoa_r+0x5b8>
   456c8:	d9001317 	ldw	r4,76(sp)
   456cc:	df001117 	ldw	fp,68(sp)
   456d0:	d9000615 	stw	r4,24(sp)
   456d4:	8009883a 	mov	r4,r16
   456d8:	e00b883a 	mov	r5,fp
   456dc:	00472000 	call	47200 <_Bfree>
   456e0:	d9c00617 	ldw	r7,24(sp)
   456e4:	d8c02217 	ldw	r3,136(sp)
   456e8:	d9002417 	ldw	r4,144(sp)
   456ec:	b0000005 	stb	zero,0(r22)
   456f0:	38800044 	addi	r2,r7,1
   456f4:	18800015 	stw	r2,0(r3)
   456f8:	203e8426 	beq	r4,zero,4510c <_dtoa_r+0xbc>
   456fc:	25800015 	stw	r22,0(r4)
   45700:	003e8206 	br	4510c <_dtoa_r+0xbc>
   45704:	00800434 	movhi	r2,16
   45708:	10bfffc4 	addi	r2,r2,-1
   4570c:	90a4703a 	and	r18,r18,r2
   45710:	903e901e 	bne	r18,zero,45154 <_dtoa_r+0x104>
   45714:	05c00174 	movhi	r23,5
   45718:	bdf7e704 	addi	r23,r23,-8292
   4571c:	003e8f06 	br	4515c <_dtoa_r+0x10c>
   45720:	b8800204 	addi	r2,r23,8
   45724:	003e9206 	br	45170 <_dtoa_r+0x120>
   45728:	01400434 	movhi	r5,16
   4572c:	297fffc4 	addi	r5,r5,-1
   45730:	894a703a 	and	r5,r17,r5
   45734:	d9000317 	ldw	r4,12(sp)
   45738:	294ffc34 	orhi	r5,r5,16368
   4573c:	a53f0044 	addi	r20,r20,-1023
   45740:	dd400217 	ldw	r21,8(sp)
   45744:	d8000f15 	stw	zero,60(sp)
   45748:	003eb106 	br	45210 <_dtoa_r+0x1c0>
   4574c:	05c00174 	movhi	r23,5
   45750:	bdf7de04 	addi	r23,r23,-8328
   45754:	003e6d06 	br	4510c <_dtoa_r+0xbc>
   45758:	d8000415 	stw	zero,16(sp)
   4575c:	80001115 	stw	zero,68(r16)
   45760:	8009883a 	mov	r4,r16
   45764:	000b883a 	mov	r5,zero
   45768:	00471580 	call	47158 <_Balloc>
   4576c:	01ffffc4 	movi	r7,-1
   45770:	102f883a 	mov	r23,r2
   45774:	80801015 	stw	r2,64(r16)
   45778:	00800044 	movi	r2,1
   4577c:	d9c00915 	stw	r7,36(sp)
   45780:	d8002115 	stw	zero,132(sp)
   45784:	d9c00e15 	stw	r7,56(sp)
   45788:	d8800c15 	stw	r2,48(sp)
   4578c:	d8800117 	ldw	r2,4(sp)
   45790:	10008b16 	blt	r2,zero,459c0 <_dtoa_r+0x970>
   45794:	d9000617 	ldw	r4,24(sp)
   45798:	00c00384 	movi	r3,14
   4579c:	19008816 	blt	r3,r4,459c0 <_dtoa_r+0x970>
   457a0:	200490fa 	slli	r2,r4,3
   457a4:	d9c02117 	ldw	r7,132(sp)
   457a8:	00c00174 	movhi	r3,5
   457ac:	18f80f04 	addi	r3,r3,-8132
   457b0:	1885883a 	add	r2,r3,r2
   457b4:	14800017 	ldw	r18,0(r2)
   457b8:	14c00117 	ldw	r19,4(r2)
   457bc:	3801c916 	blt	r7,zero,45ee4 <_dtoa_r+0xe94>
   457c0:	d9000317 	ldw	r4,12(sp)
   457c4:	900d883a 	mov	r6,r18
   457c8:	980f883a 	mov	r7,r19
   457cc:	880b883a 	mov	r5,r17
   457d0:	0049d480 	call	49d48 <__divdf3>
   457d4:	180b883a 	mov	r5,r3
   457d8:	1009883a 	mov	r4,r2
   457dc:	004a1ac0 	call	4a1ac <__fixdfsi>
   457e0:	1009883a 	mov	r4,r2
   457e4:	102b883a 	mov	r21,r2
   457e8:	004a0d80 	call	4a0d8 <__floatsidf>
   457ec:	1009883a 	mov	r4,r2
   457f0:	180b883a 	mov	r5,r3
   457f4:	900d883a 	mov	r6,r18
   457f8:	980f883a 	mov	r7,r19
   457fc:	0049a640 	call	49a64 <__muldf3>
   45800:	d9000317 	ldw	r4,12(sp)
   45804:	880b883a 	mov	r5,r17
   45808:	100d883a 	mov	r6,r2
   4580c:	180f883a 	mov	r7,r3
   45810:	0049a040 	call	49a04 <__subdf3>
   45814:	d9c00917 	ldw	r7,36(sp)
   45818:	1009883a 	mov	r4,r2
   4581c:	a8800c04 	addi	r2,r21,48
   45820:	b8800005 	stb	r2,0(r23)
   45824:	01800044 	movi	r6,1
   45828:	180b883a 	mov	r5,r3
   4582c:	2005883a 	mov	r2,r4
   45830:	bd800044 	addi	r22,r23,1
   45834:	39803726 	beq	r7,r6,45914 <_dtoa_r+0x8c4>
   45838:	000d883a 	mov	r6,zero
   4583c:	01d00934 	movhi	r7,16420
   45840:	0049a640 	call	49a64 <__muldf3>
   45844:	1009883a 	mov	r4,r2
   45848:	180b883a 	mov	r5,r3
   4584c:	000d883a 	mov	r6,zero
   45850:	000f883a 	mov	r7,zero
   45854:	1029883a 	mov	r20,r2
   45858:	1823883a 	mov	r17,r3
   4585c:	0049efc0 	call	49efc <__eqdf2>
   45860:	103f9c26 	beq	r2,zero,456d4 <_dtoa_r+0x684>
   45864:	dd400917 	ldw	r21,36(sp)
   45868:	dc000415 	stw	r16,16(sp)
   4586c:	00000906 	br	45894 <_dtoa_r+0x844>
   45870:	0049a640 	call	49a64 <__muldf3>
   45874:	1009883a 	mov	r4,r2
   45878:	180b883a 	mov	r5,r3
   4587c:	000d883a 	mov	r6,zero
   45880:	000f883a 	mov	r7,zero
   45884:	1029883a 	mov	r20,r2
   45888:	1823883a 	mov	r17,r3
   4588c:	0049efc0 	call	49efc <__eqdf2>
   45890:	10022926 	beq	r2,zero,46138 <_dtoa_r+0x10e8>
   45894:	900d883a 	mov	r6,r18
   45898:	980f883a 	mov	r7,r19
   4589c:	a009883a 	mov	r4,r20
   458a0:	880b883a 	mov	r5,r17
   458a4:	0049d480 	call	49d48 <__divdf3>
   458a8:	180b883a 	mov	r5,r3
   458ac:	1009883a 	mov	r4,r2
   458b0:	004a1ac0 	call	4a1ac <__fixdfsi>
   458b4:	1009883a 	mov	r4,r2
   458b8:	1021883a 	mov	r16,r2
   458bc:	004a0d80 	call	4a0d8 <__floatsidf>
   458c0:	1009883a 	mov	r4,r2
   458c4:	180b883a 	mov	r5,r3
   458c8:	900d883a 	mov	r6,r18
   458cc:	980f883a 	mov	r7,r19
   458d0:	0049a640 	call	49a64 <__muldf3>
   458d4:	a009883a 	mov	r4,r20
   458d8:	880b883a 	mov	r5,r17
   458dc:	100d883a 	mov	r6,r2
   458e0:	180f883a 	mov	r7,r3
   458e4:	0049a040 	call	49a04 <__subdf3>
   458e8:	82400c04 	addi	r9,r16,48
   458ec:	b2400005 	stb	r9,0(r22)
   458f0:	b5800044 	addi	r22,r22,1
   458f4:	b5d3c83a 	sub	r9,r22,r23
   458f8:	000d883a 	mov	r6,zero
   458fc:	01d00934 	movhi	r7,16420
   45900:	1009883a 	mov	r4,r2
   45904:	180b883a 	mov	r5,r3
   45908:	aa7fd91e 	bne	r21,r9,45870 <_dtoa_r+0x820>
   4590c:	802b883a 	mov	r21,r16
   45910:	dc000417 	ldw	r16,16(sp)
   45914:	1009883a 	mov	r4,r2
   45918:	180b883a 	mov	r5,r3
   4591c:	100d883a 	mov	r6,r2
   45920:	180f883a 	mov	r7,r3
   45924:	00499b00 	call	499b0 <__adddf3>
   45928:	9009883a 	mov	r4,r18
   4592c:	980b883a 	mov	r5,r19
   45930:	100d883a 	mov	r6,r2
   45934:	180f883a 	mov	r7,r3
   45938:	1023883a 	mov	r17,r2
   4593c:	1829883a 	mov	r20,r3
   45940:	004a07c0 	call	4a07c <__ltdf2>
   45944:	10000816 	blt	r2,zero,45968 <_dtoa_r+0x918>
   45948:	9009883a 	mov	r4,r18
   4594c:	980b883a 	mov	r5,r19
   45950:	880d883a 	mov	r6,r17
   45954:	a00f883a 	mov	r7,r20
   45958:	0049efc0 	call	49efc <__eqdf2>
   4595c:	103f5d1e 	bne	r2,zero,456d4 <_dtoa_r+0x684>
   45960:	ad40004c 	andi	r21,r21,1
   45964:	a83f5b26 	beq	r21,zero,456d4 <_dtoa_r+0x684>
   45968:	b53fffc3 	ldbu	r20,-1(r22)
   4596c:	b0ffff84 	addi	r3,r22,-2
   45970:	01400e44 	movi	r5,57
   45974:	00000306 	br	45984 <_dtoa_r+0x934>
   45978:	1d000003 	ldbu	r20,0(r3)
   4597c:	102d883a 	mov	r22,r2
   45980:	18ffffc4 	addi	r3,r3,-1
   45984:	a1003fcc 	andi	r4,r20,255
   45988:	2100201c 	xori	r4,r4,128
   4598c:	213fe004 	addi	r4,r4,-128
   45990:	b0bfffc4 	addi	r2,r22,-1
   45994:	2142ca1e 	bne	r4,r5,464c0 <_dtoa_r+0x1470>
   45998:	b8bff71e 	bne	r23,r2,45978 <_dtoa_r+0x928>
   4599c:	d8800617 	ldw	r2,24(sp)
   459a0:	05000c44 	movi	r20,49
   459a4:	10800044 	addi	r2,r2,1
   459a8:	d8800615 	stw	r2,24(sp)
   459ac:	00800c04 	movi	r2,48
   459b0:	b8800005 	stb	r2,0(r23)
   459b4:	b805883a 	mov	r2,r23
   459b8:	15000005 	stb	r20,0(r2)
   459bc:	003f4506 	br	456d4 <_dtoa_r+0x684>
   459c0:	d9c00c17 	ldw	r7,48(sp)
   459c4:	3800c926 	beq	r7,zero,45cec <_dtoa_r+0xc9c>
   459c8:	d9c00417 	ldw	r7,16(sp)
   459cc:	00c00044 	movi	r3,1
   459d0:	19c16c0e 	bge	r3,r7,45f84 <_dtoa_r+0xf34>
   459d4:	d9000917 	ldw	r4,36(sp)
   459d8:	d9c00a17 	ldw	r7,40(sp)
   459dc:	24ffffc4 	addi	r19,r4,-1
   459e0:	3cc20716 	blt	r7,r19,46200 <_dtoa_r+0x11b0>
   459e4:	3ce7c83a 	sub	r19,r7,r19
   459e8:	d9c00917 	ldw	r7,36(sp)
   459ec:	3802ae16 	blt	r7,zero,464a8 <_dtoa_r+0x1458>
   459f0:	dc800817 	ldw	r18,32(sp)
   459f4:	d8800917 	ldw	r2,36(sp)
   459f8:	d8c00817 	ldw	r3,32(sp)
   459fc:	d9c00717 	ldw	r7,28(sp)
   45a00:	8009883a 	mov	r4,r16
   45a04:	1887883a 	add	r3,r3,r2
   45a08:	388f883a 	add	r7,r7,r2
   45a0c:	01400044 	movi	r5,1
   45a10:	d8c00815 	stw	r3,32(sp)
   45a14:	d9c00715 	stw	r7,28(sp)
   45a18:	00475880 	call	47588 <__i2b>
   45a1c:	102b883a 	mov	r21,r2
   45a20:	90000a26 	beq	r18,zero,45a4c <_dtoa_r+0x9fc>
   45a24:	d8800717 	ldw	r2,28(sp)
   45a28:	0080080e 	bge	zero,r2,45a4c <_dtoa_r+0x9fc>
   45a2c:	90812b16 	blt	r18,r2,45edc <_dtoa_r+0xe8c>
   45a30:	d8c00817 	ldw	r3,32(sp)
   45a34:	d9000717 	ldw	r4,28(sp)
   45a38:	90a5c83a 	sub	r18,r18,r2
   45a3c:	1887c83a 	sub	r3,r3,r2
   45a40:	2089c83a 	sub	r4,r4,r2
   45a44:	d8c00815 	stw	r3,32(sp)
   45a48:	d9000715 	stw	r4,28(sp)
   45a4c:	d9c00a17 	ldw	r7,40(sp)
   45a50:	01c0140e 	bge	zero,r7,45aa4 <_dtoa_r+0xa54>
   45a54:	d8800c17 	ldw	r2,48(sp)
   45a58:	1001de26 	beq	r2,zero,461d4 <_dtoa_r+0x1184>
   45a5c:	04c00e0e 	bge	zero,r19,45a98 <_dtoa_r+0xa48>
   45a60:	a80b883a 	mov	r5,r21
   45a64:	8009883a 	mov	r4,r16
   45a68:	980d883a 	mov	r6,r19
   45a6c:	004781c0 	call	4781c <__pow5mult>
   45a70:	e00d883a 	mov	r6,fp
   45a74:	8009883a 	mov	r4,r16
   45a78:	100b883a 	mov	r5,r2
   45a7c:	102b883a 	mov	r21,r2
   45a80:	00475c40 	call	475c4 <__multiply>
   45a84:	1029883a 	mov	r20,r2
   45a88:	e00b883a 	mov	r5,fp
   45a8c:	8009883a 	mov	r4,r16
   45a90:	00472000 	call	47200 <_Bfree>
   45a94:	a039883a 	mov	fp,r20
   45a98:	d8c00a17 	ldw	r3,40(sp)
   45a9c:	1ccdc83a 	sub	r6,r3,r19
   45aa0:	3001291e 	bne	r6,zero,45f48 <_dtoa_r+0xef8>
   45aa4:	8009883a 	mov	r4,r16
   45aa8:	01400044 	movi	r5,1
   45aac:	00475880 	call	47588 <__i2b>
   45ab0:	d9000b17 	ldw	r4,44(sp)
   45ab4:	1029883a 	mov	r20,r2
   45ab8:	0100050e 	bge	zero,r4,45ad0 <_dtoa_r+0xa80>
   45abc:	d9800b17 	ldw	r6,44(sp)
   45ac0:	8009883a 	mov	r4,r16
   45ac4:	100b883a 	mov	r5,r2
   45ac8:	004781c0 	call	4781c <__pow5mult>
   45acc:	1029883a 	mov	r20,r2
   45ad0:	d9c00417 	ldw	r7,16(sp)
   45ad4:	00800044 	movi	r2,1
   45ad8:	11c0f00e 	bge	r2,r7,45e9c <_dtoa_r+0xe4c>
   45adc:	0023883a 	mov	r17,zero
   45ae0:	d8800b17 	ldw	r2,44(sp)
   45ae4:	1001741e 	bne	r2,zero,460b8 <_dtoa_r+0x1068>
   45ae8:	00800044 	movi	r2,1
   45aec:	d8c00717 	ldw	r3,28(sp)
   45af0:	10c5883a 	add	r2,r2,r3
   45af4:	108007cc 	andi	r2,r2,31
   45af8:	10008026 	beq	r2,zero,45cfc <_dtoa_r+0xcac>
   45afc:	01000804 	movi	r4,32
   45b00:	2089c83a 	sub	r4,r4,r2
   45b04:	00c00104 	movi	r3,4
   45b08:	1902d00e 	bge	r3,r4,4664c <_dtoa_r+0x15fc>
   45b0c:	d9000817 	ldw	r4,32(sp)
   45b10:	d9c00717 	ldw	r7,28(sp)
   45b14:	00c00704 	movi	r3,28
   45b18:	1885c83a 	sub	r2,r3,r2
   45b1c:	2089883a 	add	r4,r4,r2
   45b20:	388f883a 	add	r7,r7,r2
   45b24:	d9000815 	stw	r4,32(sp)
   45b28:	90a5883a 	add	r18,r18,r2
   45b2c:	d9c00715 	stw	r7,28(sp)
   45b30:	d9c00817 	ldw	r7,32(sp)
   45b34:	01c0050e 	bge	zero,r7,45b4c <_dtoa_r+0xafc>
   45b38:	e00b883a 	mov	r5,fp
   45b3c:	8009883a 	mov	r4,r16
   45b40:	380d883a 	mov	r6,r7
   45b44:	00479480 	call	47948 <__lshift>
   45b48:	1039883a 	mov	fp,r2
   45b4c:	d8800717 	ldw	r2,28(sp)
   45b50:	0080050e 	bge	zero,r2,45b68 <_dtoa_r+0xb18>
   45b54:	a00b883a 	mov	r5,r20
   45b58:	8009883a 	mov	r4,r16
   45b5c:	100d883a 	mov	r6,r2
   45b60:	00479480 	call	47948 <__lshift>
   45b64:	1029883a 	mov	r20,r2
   45b68:	d8c00d17 	ldw	r3,52(sp)
   45b6c:	1801401e 	bne	r3,zero,46070 <_dtoa_r+0x1020>
   45b70:	d8800917 	ldw	r2,36(sp)
   45b74:	00815a0e 	bge	zero,r2,460e0 <_dtoa_r+0x1090>
   45b78:	d8c00c17 	ldw	r3,48(sp)
   45b7c:	18006f1e 	bne	r3,zero,45d3c <_dtoa_r+0xcec>
   45b80:	b823883a 	mov	r17,r23
   45b84:	dc800917 	ldw	r18,36(sp)
   45b88:	00000206 	br	45b94 <_dtoa_r+0xb44>
   45b8c:	00472280 	call	47228 <__multadd>
   45b90:	1039883a 	mov	fp,r2
   45b94:	e009883a 	mov	r4,fp
   45b98:	a00b883a 	mov	r5,r20
   45b9c:	0044e140 	call	44e14 <quorem>
   45ba0:	10800c04 	addi	r2,r2,48
   45ba4:	88800005 	stb	r2,0(r17)
   45ba8:	8c400044 	addi	r17,r17,1
   45bac:	8dc7c83a 	sub	r3,r17,r23
   45bb0:	8009883a 	mov	r4,r16
   45bb4:	e00b883a 	mov	r5,fp
   45bb8:	01800284 	movi	r6,10
   45bbc:	000f883a 	mov	r7,zero
   45bc0:	1cbff216 	blt	r3,r18,45b8c <_dtoa_r+0xb3c>
   45bc4:	dd800917 	ldw	r22,36(sp)
   45bc8:	1007883a 	mov	r3,r2
   45bcc:	05823a0e 	bge	zero,r22,464b8 <_dtoa_r+0x1468>
   45bd0:	bdad883a 	add	r22,r23,r22
   45bd4:	0023883a 	mov	r17,zero
   45bd8:	e00b883a 	mov	r5,fp
   45bdc:	01800044 	movi	r6,1
   45be0:	8009883a 	mov	r4,r16
   45be4:	d8c01515 	stw	r3,84(sp)
   45be8:	00479480 	call	47948 <__lshift>
   45bec:	1009883a 	mov	r4,r2
   45bf0:	a00b883a 	mov	r5,r20
   45bf4:	1039883a 	mov	fp,r2
   45bf8:	0047aa40 	call	47aa4 <__mcmp>
   45bfc:	d8c01517 	ldw	r3,84(sp)
   45c00:	0080d60e 	bge	zero,r2,45f5c <_dtoa_r+0xf0c>
   45c04:	b13fffc3 	ldbu	r4,-1(r22)
   45c08:	b0ffff84 	addi	r3,r22,-2
   45c0c:	01800e44 	movi	r6,57
   45c10:	00000306 	br	45c20 <_dtoa_r+0xbd0>
   45c14:	19000003 	ldbu	r4,0(r3)
   45c18:	102d883a 	mov	r22,r2
   45c1c:	18ffffc4 	addi	r3,r3,-1
   45c20:	21403fcc 	andi	r5,r4,255
   45c24:	2940201c 	xori	r5,r5,128
   45c28:	297fe004 	addi	r5,r5,-128
   45c2c:	b0bfffc4 	addi	r2,r22,-1
   45c30:	2981a71e 	bne	r5,r6,462d0 <_dtoa_r+0x1280>
   45c34:	b8bff71e 	bne	r23,r2,45c14 <_dtoa_r+0xbc4>
   45c38:	d8800617 	ldw	r2,24(sp)
   45c3c:	10800044 	addi	r2,r2,1
   45c40:	d8800615 	stw	r2,24(sp)
   45c44:	00800c44 	movi	r2,49
   45c48:	b8800005 	stb	r2,0(r23)
   45c4c:	8009883a 	mov	r4,r16
   45c50:	a00b883a 	mov	r5,r20
   45c54:	00472000 	call	47200 <_Bfree>
   45c58:	a83e9e26 	beq	r21,zero,456d4 <_dtoa_r+0x684>
   45c5c:	88000426 	beq	r17,zero,45c70 <_dtoa_r+0xc20>
   45c60:	8d400326 	beq	r17,r21,45c70 <_dtoa_r+0xc20>
   45c64:	8009883a 	mov	r4,r16
   45c68:	880b883a 	mov	r5,r17
   45c6c:	00472000 	call	47200 <_Bfree>
   45c70:	8009883a 	mov	r4,r16
   45c74:	a80b883a 	mov	r5,r21
   45c78:	00472000 	call	47200 <_Bfree>
   45c7c:	003e9506 	br	456d4 <_dtoa_r+0x684>
   45c80:	00c00044 	movi	r3,1
   45c84:	d8c00d15 	stw	r3,52(sp)
   45c88:	003d9f06 	br	45308 <_dtoa_r+0x2b8>
   45c8c:	d9000817 	ldw	r4,32(sp)
   45c90:	d8800617 	ldw	r2,24(sp)
   45c94:	d8000b15 	stw	zero,44(sp)
   45c98:	2089c83a 	sub	r4,r4,r2
   45c9c:	0087c83a 	sub	r3,zero,r2
   45ca0:	d9000815 	stw	r4,32(sp)
   45ca4:	d8c00a15 	stw	r3,40(sp)
   45ca8:	003da306 	br	45338 <_dtoa_r+0x2e8>
   45cac:	0529c83a 	sub	r20,zero,r20
   45cb0:	dd000815 	stw	r20,32(sp)
   45cb4:	d8000715 	stw	zero,28(sp)
   45cb8:	003d9806 	br	4531c <_dtoa_r+0x2cc>
   45cbc:	d9000617 	ldw	r4,24(sp)
   45cc0:	004a0d80 	call	4a0d8 <__floatsidf>
   45cc4:	1009883a 	mov	r4,r2
   45cc8:	180b883a 	mov	r5,r3
   45ccc:	980d883a 	mov	r6,r19
   45cd0:	900f883a 	mov	r7,r18
   45cd4:	0049f580 	call	49f58 <__nedf2>
   45cd8:	103d7a26 	beq	r2,zero,452c4 <_dtoa_r+0x274>
   45cdc:	d8800617 	ldw	r2,24(sp)
   45ce0:	10bfffc4 	addi	r2,r2,-1
   45ce4:	d8800615 	stw	r2,24(sp)
   45ce8:	003d7606 	br	452c4 <_dtoa_r+0x274>
   45cec:	dcc00a17 	ldw	r19,40(sp)
   45cf0:	dc800817 	ldw	r18,32(sp)
   45cf4:	002b883a 	mov	r21,zero
   45cf8:	003f4906 	br	45a20 <_dtoa_r+0x9d0>
   45cfc:	00800704 	movi	r2,28
   45d00:	d8c00817 	ldw	r3,32(sp)
   45d04:	d9000717 	ldw	r4,28(sp)
   45d08:	90a5883a 	add	r18,r18,r2
   45d0c:	1887883a 	add	r3,r3,r2
   45d10:	2089883a 	add	r4,r4,r2
   45d14:	d8c00815 	stw	r3,32(sp)
   45d18:	d9000715 	stw	r4,28(sp)
   45d1c:	003f8406 	br	45b30 <_dtoa_r+0xae0>
   45d20:	d9c00317 	ldw	r7,12(sp)
   45d24:	013efb84 	movi	r4,-1042
   45d28:	2509c83a 	sub	r4,r4,r20
   45d2c:	3908983a 	sll	r4,r7,r4
   45d30:	003d3006 	br	451f4 <_dtoa_r+0x1a4>
   45d34:	d8000d15 	stw	zero,52(sp)
   45d38:	003d7306 	br	45308 <_dtoa_r+0x2b8>
   45d3c:	0480050e 	bge	zero,r18,45d54 <_dtoa_r+0xd04>
   45d40:	a80b883a 	mov	r5,r21
   45d44:	8009883a 	mov	r4,r16
   45d48:	900d883a 	mov	r6,r18
   45d4c:	00479480 	call	47948 <__lshift>
   45d50:	102b883a 	mov	r21,r2
   45d54:	8801611e 	bne	r17,zero,462dc <_dtoa_r+0x128c>
   45d58:	a827883a 	mov	r19,r21
   45d5c:	d8c00317 	ldw	r3,12(sp)
   45d60:	d9000917 	ldw	r4,36(sp)
   45d64:	b8bfffc4 	addi	r2,r23,-1
   45d68:	18c0004c 	andi	r3,r3,1
   45d6c:	1105883a 	add	r2,r2,r4
   45d70:	b825883a 	mov	r18,r23
   45d74:	d8800515 	stw	r2,20(sp)
   45d78:	a823883a 	mov	r17,r21
   45d7c:	d8c00315 	stw	r3,12(sp)
   45d80:	ddc00715 	stw	r23,28(sp)
   45d84:	e009883a 	mov	r4,fp
   45d88:	a00b883a 	mov	r5,r20
   45d8c:	0044e140 	call	44e14 <quorem>
   45d90:	e009883a 	mov	r4,fp
   45d94:	880b883a 	mov	r5,r17
   45d98:	102d883a 	mov	r22,r2
   45d9c:	0047aa40 	call	47aa4 <__mcmp>
   45da0:	980d883a 	mov	r6,r19
   45da4:	8009883a 	mov	r4,r16
   45da8:	a00b883a 	mov	r5,r20
   45dac:	102b883a 	mov	r21,r2
   45db0:	0047afc0 	call	47afc <__mdiff>
   45db4:	100d883a 	mov	r6,r2
   45db8:	10800317 	ldw	r2,12(r2)
   45dbc:	b5c00c04 	addi	r23,r22,48
   45dc0:	10008c26 	beq	r2,zero,45ff4 <_dtoa_r+0xfa4>
   45dc4:	8009883a 	mov	r4,r16
   45dc8:	300b883a 	mov	r5,r6
   45dcc:	00472000 	call	47200 <_Bfree>
   45dd0:	00800044 	movi	r2,1
   45dd4:	a8007116 	blt	r21,zero,45f9c <_dtoa_r+0xf4c>
   45dd8:	a800041e 	bne	r21,zero,45dec <_dtoa_r+0xd9c>
   45ddc:	d9c00417 	ldw	r7,16(sp)
   45de0:	3800021e 	bne	r7,zero,45dec <_dtoa_r+0xd9c>
   45de4:	d8c00317 	ldw	r3,12(sp)
   45de8:	18006c26 	beq	r3,zero,45f9c <_dtoa_r+0xf4c>
   45dec:	00814c16 	blt	zero,r2,46320 <_dtoa_r+0x12d0>
   45df0:	d8c00517 	ldw	r3,20(sp)
   45df4:	95400044 	addi	r21,r18,1
   45df8:	95c00005 	stb	r23,0(r18)
   45dfc:	a82d883a 	mov	r22,r21
   45e00:	90c14d26 	beq	r18,r3,46338 <_dtoa_r+0x12e8>
   45e04:	e00b883a 	mov	r5,fp
   45e08:	8009883a 	mov	r4,r16
   45e0c:	01800284 	movi	r6,10
   45e10:	000f883a 	mov	r7,zero
   45e14:	00472280 	call	47228 <__multadd>
   45e18:	1039883a 	mov	fp,r2
   45e1c:	8cc08b26 	beq	r17,r19,4604c <_dtoa_r+0xffc>
   45e20:	880b883a 	mov	r5,r17
   45e24:	01800284 	movi	r6,10
   45e28:	000f883a 	mov	r7,zero
   45e2c:	8009883a 	mov	r4,r16
   45e30:	00472280 	call	47228 <__multadd>
   45e34:	980b883a 	mov	r5,r19
   45e38:	8009883a 	mov	r4,r16
   45e3c:	01800284 	movi	r6,10
   45e40:	000f883a 	mov	r7,zero
   45e44:	1023883a 	mov	r17,r2
   45e48:	00472280 	call	47228 <__multadd>
   45e4c:	1027883a 	mov	r19,r2
   45e50:	a825883a 	mov	r18,r21
   45e54:	003fcb06 	br	45d84 <_dtoa_r+0xd34>
   45e58:	d9c00417 	ldw	r7,16(sp)
   45e5c:	00800104 	movi	r2,4
   45e60:	3880e426 	beq	r7,r2,461f4 <_dtoa_r+0x11a4>
   45e64:	00800144 	movi	r2,5
   45e68:	38be3c1e 	bne	r7,r2,4575c <_dtoa_r+0x70c>
   45e6c:	00c00044 	movi	r3,1
   45e70:	d8c00c15 	stw	r3,48(sp)
   45e74:	d9c02117 	ldw	r7,132(sp)
   45e78:	d8800617 	ldw	r2,24(sp)
   45e7c:	388f883a 	add	r7,r7,r2
   45e80:	3c800044 	addi	r18,r7,1
   45e84:	d9c00e15 	stw	r7,56(sp)
   45e88:	dc800915 	stw	r18,36(sp)
   45e8c:	04bd3e16 	blt	zero,r18,45388 <_dtoa_r+0x338>
   45e90:	80001115 	stw	zero,68(r16)
   45e94:	000b883a 	mov	r5,zero
   45e98:	003d4606 	br	453b4 <_dtoa_r+0x364>
   45e9c:	d8c00317 	ldw	r3,12(sp)
   45ea0:	183f0e1e 	bne	r3,zero,45adc <_dtoa_r+0xa8c>
   45ea4:	00c00434 	movhi	r3,16
   45ea8:	18ffffc4 	addi	r3,r3,-1
   45eac:	88c6703a 	and	r3,r17,r3
   45eb0:	183f0a1e 	bne	r3,zero,45adc <_dtoa_r+0xa8c>
   45eb4:	8c5ffc2c 	andhi	r17,r17,32752
   45eb8:	883f0826 	beq	r17,zero,45adc <_dtoa_r+0xa8c>
   45ebc:	d9000817 	ldw	r4,32(sp)
   45ec0:	d9c00717 	ldw	r7,28(sp)
   45ec4:	1023883a 	mov	r17,r2
   45ec8:	2089883a 	add	r4,r4,r2
   45ecc:	388f883a 	add	r7,r7,r2
   45ed0:	d9000815 	stw	r4,32(sp)
   45ed4:	d9c00715 	stw	r7,28(sp)
   45ed8:	003f0106 	br	45ae0 <_dtoa_r+0xa90>
   45edc:	9005883a 	mov	r2,r18
   45ee0:	003ed306 	br	45a30 <_dtoa_r+0x9e0>
   45ee4:	d8800917 	ldw	r2,36(sp)
   45ee8:	00be3516 	blt	zero,r2,457c0 <_dtoa_r+0x770>
   45eec:	1000b61e 	bne	r2,zero,461c8 <_dtoa_r+0x1178>
   45ef0:	9009883a 	mov	r4,r18
   45ef4:	980b883a 	mov	r5,r19
   45ef8:	000d883a 	mov	r6,zero
   45efc:	01d00534 	movhi	r7,16404
   45f00:	0049a640 	call	49a64 <__muldf3>
   45f04:	d9800317 	ldw	r6,12(sp)
   45f08:	1009883a 	mov	r4,r2
   45f0c:	180b883a 	mov	r5,r3
   45f10:	880f883a 	mov	r7,r17
   45f14:	004a0180 	call	4a018 <__gedf2>
   45f18:	0029883a 	mov	r20,zero
   45f1c:	002b883a 	mov	r21,zero
   45f20:	10007e16 	blt	r2,zero,4611c <_dtoa_r+0x10cc>
   45f24:	d8802117 	ldw	r2,132(sp)
   45f28:	b82d883a 	mov	r22,r23
   45f2c:	0084303a 	nor	r2,zero,r2
   45f30:	d8800615 	stw	r2,24(sp)
   45f34:	8009883a 	mov	r4,r16
   45f38:	a00b883a 	mov	r5,r20
   45f3c:	00472000 	call	47200 <_Bfree>
   45f40:	a83f4b1e 	bne	r21,zero,45c70 <_dtoa_r+0xc20>
   45f44:	003de306 	br	456d4 <_dtoa_r+0x684>
   45f48:	e00b883a 	mov	r5,fp
   45f4c:	8009883a 	mov	r4,r16
   45f50:	004781c0 	call	4781c <__pow5mult>
   45f54:	1039883a 	mov	fp,r2
   45f58:	003ed206 	br	45aa4 <_dtoa_r+0xa54>
   45f5c:	1000021e 	bne	r2,zero,45f68 <_dtoa_r+0xf18>
   45f60:	18c0004c 	andi	r3,r3,1
   45f64:	183f271e 	bne	r3,zero,45c04 <_dtoa_r+0xbb4>
   45f68:	01000c04 	movi	r4,48
   45f6c:	00000106 	br	45f74 <_dtoa_r+0xf24>
   45f70:	102d883a 	mov	r22,r2
   45f74:	b0bfffc4 	addi	r2,r22,-1
   45f78:	10c00007 	ldb	r3,0(r2)
   45f7c:	193ffc26 	beq	r3,r4,45f70 <_dtoa_r+0xf20>
   45f80:	003f3206 	br	45c4c <_dtoa_r+0xbfc>
   45f84:	d8c00f17 	ldw	r3,60(sp)
   45f88:	18015026 	beq	r3,zero,464cc <_dtoa_r+0x147c>
   45f8c:	10810cc4 	addi	r2,r2,1075
   45f90:	dcc00a17 	ldw	r19,40(sp)
   45f94:	dc800817 	ldw	r18,32(sp)
   45f98:	003e9706 	br	459f8 <_dtoa_r+0x9a8>
   45f9c:	b807883a 	mov	r3,r23
   45fa0:	182b883a 	mov	r21,r3
   45fa4:	ddc00717 	ldw	r23,28(sp)
   45fa8:	00800e0e 	bge	zero,r2,45fe4 <_dtoa_r+0xf94>
   45fac:	e00b883a 	mov	r5,fp
   45fb0:	01800044 	movi	r6,1
   45fb4:	8009883a 	mov	r4,r16
   45fb8:	d8c01515 	stw	r3,84(sp)
   45fbc:	00479480 	call	47948 <__lshift>
   45fc0:	1009883a 	mov	r4,r2
   45fc4:	a00b883a 	mov	r5,r20
   45fc8:	1039883a 	mov	fp,r2
   45fcc:	0047aa40 	call	47aa4 <__mcmp>
   45fd0:	d8c01517 	ldw	r3,84(sp)
   45fd4:	0081880e 	bge	zero,r2,465f8 <_dtoa_r+0x15a8>
   45fd8:	00800e44 	movi	r2,57
   45fdc:	b0c00c44 	addi	r3,r22,49
   45fe0:	a8816326 	beq	r21,r2,46570 <_dtoa_r+0x1520>
   45fe4:	90c00005 	stb	r3,0(r18)
   45fe8:	95800044 	addi	r22,r18,1
   45fec:	982b883a 	mov	r21,r19
   45ff0:	003f1606 	br	45c4c <_dtoa_r+0xbfc>
   45ff4:	300b883a 	mov	r5,r6
   45ff8:	e009883a 	mov	r4,fp
   45ffc:	d9801515 	stw	r6,84(sp)
   46000:	0047aa40 	call	47aa4 <__mcmp>
   46004:	d9801517 	ldw	r6,84(sp)
   46008:	8009883a 	mov	r4,r16
   4600c:	d8801515 	stw	r2,84(sp)
   46010:	300b883a 	mov	r5,r6
   46014:	00472000 	call	47200 <_Bfree>
   46018:	d8801517 	ldw	r2,84(sp)
   4601c:	103f6d1e 	bne	r2,zero,45dd4 <_dtoa_r+0xd84>
   46020:	d9c00417 	ldw	r7,16(sp)
   46024:	383f6b1e 	bne	r7,zero,45dd4 <_dtoa_r+0xd84>
   46028:	d8c00317 	ldw	r3,12(sp)
   4602c:	183f691e 	bne	r3,zero,45dd4 <_dtoa_r+0xd84>
   46030:	b807883a 	mov	r3,r23
   46034:	00800e44 	movi	r2,57
   46038:	ddc00717 	ldw	r23,28(sp)
   4603c:	18814c26 	beq	r3,r2,46570 <_dtoa_r+0x1520>
   46040:	057fe80e 	bge	zero,r21,45fe4 <_dtoa_r+0xf94>
   46044:	b0c00c44 	addi	r3,r22,49
   46048:	003fe606 	br	45fe4 <_dtoa_r+0xf94>
   4604c:	880b883a 	mov	r5,r17
   46050:	8009883a 	mov	r4,r16
   46054:	01800284 	movi	r6,10
   46058:	000f883a 	mov	r7,zero
   4605c:	00472280 	call	47228 <__multadd>
   46060:	1023883a 	mov	r17,r2
   46064:	1027883a 	mov	r19,r2
   46068:	a825883a 	mov	r18,r21
   4606c:	003f4506 	br	45d84 <_dtoa_r+0xd34>
   46070:	e009883a 	mov	r4,fp
   46074:	a00b883a 	mov	r5,r20
   46078:	0047aa40 	call	47aa4 <__mcmp>
   4607c:	103ebc0e 	bge	r2,zero,45b70 <_dtoa_r+0xb20>
   46080:	e00b883a 	mov	r5,fp
   46084:	8009883a 	mov	r4,r16
   46088:	01800284 	movi	r6,10
   4608c:	000f883a 	mov	r7,zero
   46090:	00472280 	call	47228 <__multadd>
   46094:	1039883a 	mov	fp,r2
   46098:	d8800617 	ldw	r2,24(sp)
   4609c:	d8c00c17 	ldw	r3,48(sp)
   460a0:	10bfffc4 	addi	r2,r2,-1
   460a4:	d8800615 	stw	r2,24(sp)
   460a8:	1801571e 	bne	r3,zero,46608 <_dtoa_r+0x15b8>
   460ac:	d9c00e17 	ldw	r7,56(sp)
   460b0:	d9c00915 	stw	r7,36(sp)
   460b4:	003eae06 	br	45b70 <_dtoa_r+0xb20>
   460b8:	a0800417 	ldw	r2,16(r20)
   460bc:	10800104 	addi	r2,r2,4
   460c0:	1085883a 	add	r2,r2,r2
   460c4:	1085883a 	add	r2,r2,r2
   460c8:	a085883a 	add	r2,r20,r2
   460cc:	11000017 	ldw	r4,0(r2)
   460d0:	00474700 	call	47470 <__hi0bits>
   460d4:	00c00804 	movi	r3,32
   460d8:	1885c83a 	sub	r2,r3,r2
   460dc:	003e8306 	br	45aec <_dtoa_r+0xa9c>
   460e0:	d9c00417 	ldw	r7,16(sp)
   460e4:	00800084 	movi	r2,2
   460e8:	11fea30e 	bge	r2,r7,45b78 <_dtoa_r+0xb28>
   460ec:	d8800917 	ldw	r2,36(sp)
   460f0:	103f8c1e 	bne	r2,zero,45f24 <_dtoa_r+0xed4>
   460f4:	a00b883a 	mov	r5,r20
   460f8:	8009883a 	mov	r4,r16
   460fc:	01800144 	movi	r6,5
   46100:	000f883a 	mov	r7,zero
   46104:	00472280 	call	47228 <__multadd>
   46108:	e009883a 	mov	r4,fp
   4610c:	100b883a 	mov	r5,r2
   46110:	1029883a 	mov	r20,r2
   46114:	0047aa40 	call	47aa4 <__mcmp>
   46118:	00bf820e 	bge	zero,r2,45f24 <_dtoa_r+0xed4>
   4611c:	00800c44 	movi	r2,49
   46120:	b8800005 	stb	r2,0(r23)
   46124:	d8800617 	ldw	r2,24(sp)
   46128:	bd800044 	addi	r22,r23,1
   4612c:	10800044 	addi	r2,r2,1
   46130:	d8800615 	stw	r2,24(sp)
   46134:	003f7f06 	br	45f34 <_dtoa_r+0xee4>
   46138:	dc000417 	ldw	r16,16(sp)
   4613c:	003d6506 	br	456d4 <_dtoa_r+0x684>
   46140:	9009883a 	mov	r4,r18
   46144:	004a0d80 	call	4a0d8 <__floatsidf>
   46148:	1009883a 	mov	r4,r2
   4614c:	180b883a 	mov	r5,r3
   46150:	980d883a 	mov	r6,r19
   46154:	a00f883a 	mov	r7,r20
   46158:	0049a640 	call	49a64 <__muldf3>
   4615c:	1009883a 	mov	r4,r2
   46160:	180b883a 	mov	r5,r3
   46164:	000d883a 	mov	r6,zero
   46168:	01d00734 	movhi	r7,16412
   4616c:	00499b00 	call	499b0 <__adddf3>
   46170:	057f3034 	movhi	r21,64704
   46174:	1025883a 	mov	r18,r2
   46178:	1d6b883a 	add	r21,r3,r21
   4617c:	9809883a 	mov	r4,r19
   46180:	a00b883a 	mov	r5,r20
   46184:	000d883a 	mov	r6,zero
   46188:	01d00534 	movhi	r7,16404
   4618c:	0049a040 	call	49a04 <__subdf3>
   46190:	1009883a 	mov	r4,r2
   46194:	180b883a 	mov	r5,r3
   46198:	900d883a 	mov	r6,r18
   4619c:	a80f883a 	mov	r7,r21
   461a0:	1027883a 	mov	r19,r2
   461a4:	1829883a 	mov	r20,r3
   461a8:	0049fb40 	call	49fb4 <__gtdf2>
   461ac:	00806616 	blt	zero,r2,46348 <_dtoa_r+0x12f8>
   461b0:	a9e0003c 	xorhi	r7,r21,32768
   461b4:	9809883a 	mov	r4,r19
   461b8:	a00b883a 	mov	r5,r20
   461bc:	900d883a 	mov	r6,r18
   461c0:	004a07c0 	call	4a07c <__ltdf2>
   461c4:	103d710e 	bge	r2,zero,4578c <_dtoa_r+0x73c>
   461c8:	0029883a 	mov	r20,zero
   461cc:	002b883a 	mov	r21,zero
   461d0:	003f5406 	br	45f24 <_dtoa_r+0xed4>
   461d4:	d9800a17 	ldw	r6,40(sp)
   461d8:	e00b883a 	mov	r5,fp
   461dc:	8009883a 	mov	r4,r16
   461e0:	004781c0 	call	4781c <__pow5mult>
   461e4:	1039883a 	mov	fp,r2
   461e8:	003e2e06 	br	45aa4 <_dtoa_r+0xa54>
   461ec:	d8000c15 	stw	zero,48(sp)
   461f0:	003f2006 	br	45e74 <_dtoa_r+0xe24>
   461f4:	00800044 	movi	r2,1
   461f8:	d8800c15 	stw	r2,48(sp)
   461fc:	003c5d06 	br	45374 <_dtoa_r+0x324>
   46200:	d8c00a17 	ldw	r3,40(sp)
   46204:	d9000b17 	ldw	r4,44(sp)
   46208:	dcc00a15 	stw	r19,40(sp)
   4620c:	98c5c83a 	sub	r2,r19,r3
   46210:	2089883a 	add	r4,r4,r2
   46214:	d9000b15 	stw	r4,44(sp)
   46218:	0027883a 	mov	r19,zero
   4621c:	003df206 	br	459e8 <_dtoa_r+0x998>
   46220:	d9000317 	ldw	r4,12(sp)
   46224:	8829883a 	mov	r20,r17
   46228:	04800084 	movi	r18,2
   4622c:	d9001015 	stw	r4,64(sp)
   46230:	003c8106 	br	45438 <_dtoa_r+0x3e8>
   46234:	04800044 	movi	r18,1
   46238:	dc800e15 	stw	r18,56(sp)
   4623c:	dc800915 	stw	r18,36(sp)
   46240:	dc802115 	stw	r18,132(sp)
   46244:	003f1206 	br	45e90 <_dtoa_r+0xe40>
   46248:	d8800617 	ldw	r2,24(sp)
   4624c:	00abc83a 	sub	r21,zero,r2
   46250:	a800a426 	beq	r21,zero,464e4 <_dtoa_r+0x1494>
   46254:	a88003cc 	andi	r2,r21,15
   46258:	100490fa 	slli	r2,r2,3
   4625c:	00c00174 	movhi	r3,5
   46260:	18f80f04 	addi	r3,r3,-8132
   46264:	d9000317 	ldw	r4,12(sp)
   46268:	1885883a 	add	r2,r3,r2
   4626c:	11800017 	ldw	r6,0(r2)
   46270:	11c00117 	ldw	r7,4(r2)
   46274:	a82bd13a 	srai	r21,r21,4
   46278:	880b883a 	mov	r5,r17
   4627c:	0049a640 	call	49a64 <__muldf3>
   46280:	1027883a 	mov	r19,r2
   46284:	1829883a 	mov	r20,r3
   46288:	a800e826 	beq	r21,zero,4662c <_dtoa_r+0x15dc>
   4628c:	05800174 	movhi	r22,5
   46290:	b5b80504 	addi	r22,r22,-8172
   46294:	04800084 	movi	r18,2
   46298:	a980004c 	andi	r6,r21,1
   4629c:	1009883a 	mov	r4,r2
   462a0:	a82bd07a 	srai	r21,r21,1
   462a4:	180b883a 	mov	r5,r3
   462a8:	30000426 	beq	r6,zero,462bc <_dtoa_r+0x126c>
   462ac:	b1800017 	ldw	r6,0(r22)
   462b0:	b1c00117 	ldw	r7,4(r22)
   462b4:	94800044 	addi	r18,r18,1
   462b8:	0049a640 	call	49a64 <__muldf3>
   462bc:	b5800204 	addi	r22,r22,8
   462c0:	a83ff51e 	bne	r21,zero,46298 <_dtoa_r+0x1248>
   462c4:	1027883a 	mov	r19,r2
   462c8:	1829883a 	mov	r20,r3
   462cc:	003c7306 	br	4549c <_dtoa_r+0x44c>
   462d0:	21000044 	addi	r4,r4,1
   462d4:	11000005 	stb	r4,0(r2)
   462d8:	003e5c06 	br	45c4c <_dtoa_r+0xbfc>
   462dc:	a9400117 	ldw	r5,4(r21)
   462e0:	8009883a 	mov	r4,r16
   462e4:	00471580 	call	47158 <_Balloc>
   462e8:	a9800417 	ldw	r6,16(r21)
   462ec:	11000304 	addi	r4,r2,12
   462f0:	a9400304 	addi	r5,r21,12
   462f4:	31800084 	addi	r6,r6,2
   462f8:	318d883a 	add	r6,r6,r6
   462fc:	318d883a 	add	r6,r6,r6
   46300:	1023883a 	mov	r17,r2
   46304:	0046e8c0 	call	46e8c <memcpy>
   46308:	8009883a 	mov	r4,r16
   4630c:	880b883a 	mov	r5,r17
   46310:	01800044 	movi	r6,1
   46314:	00479480 	call	47948 <__lshift>
   46318:	1027883a 	mov	r19,r2
   4631c:	003e8f06 	br	45d5c <_dtoa_r+0xd0c>
   46320:	b807883a 	mov	r3,r23
   46324:	00800e44 	movi	r2,57
   46328:	ddc00717 	ldw	r23,28(sp)
   4632c:	18809026 	beq	r3,r2,46570 <_dtoa_r+0x1520>
   46330:	18c00044 	addi	r3,r3,1
   46334:	003f2b06 	br	45fe4 <_dtoa_r+0xf94>
   46338:	b807883a 	mov	r3,r23
   4633c:	982b883a 	mov	r21,r19
   46340:	ddc00717 	ldw	r23,28(sp)
   46344:	003e2406 	br	45bd8 <_dtoa_r+0xb88>
   46348:	0029883a 	mov	r20,zero
   4634c:	002b883a 	mov	r21,zero
   46350:	003f7206 	br	4611c <_dtoa_r+0x10cc>
   46354:	593fffc4 	addi	r4,r11,-1
   46358:	200490fa 	slli	r2,r4,3
   4635c:	00c00174 	movhi	r3,5
   46360:	18f80f04 	addi	r3,r3,-8132
   46364:	d9001015 	stw	r4,64(sp)
   46368:	1885883a 	add	r2,r3,r2
   4636c:	11000017 	ldw	r4,0(r2)
   46370:	11400117 	ldw	r5,4(r2)
   46374:	900d883a 	mov	r6,r18
   46378:	a80f883a 	mov	r7,r21
   4637c:	dac01615 	stw	r11,88(sp)
   46380:	0049a640 	call	49a64 <__muldf3>
   46384:	a00b883a 	mov	r5,r20
   46388:	9809883a 	mov	r4,r19
   4638c:	d8c01215 	stw	r3,72(sp)
   46390:	d8801115 	stw	r2,68(sp)
   46394:	004a1ac0 	call	4a1ac <__fixdfsi>
   46398:	1009883a 	mov	r4,r2
   4639c:	1025883a 	mov	r18,r2
   463a0:	004a0d80 	call	4a0d8 <__floatsidf>
   463a4:	9809883a 	mov	r4,r19
   463a8:	a00b883a 	mov	r5,r20
   463ac:	100d883a 	mov	r6,r2
   463b0:	180f883a 	mov	r7,r3
   463b4:	94800c04 	addi	r18,r18,48
   463b8:	0049a040 	call	49a04 <__subdf3>
   463bc:	bc800005 	stb	r18,0(r23)
   463c0:	dac01617 	ldw	r11,88(sp)
   463c4:	102b883a 	mov	r21,r2
   463c8:	00800044 	movi	r2,1
   463cc:	bd800044 	addi	r22,r23,1
   463d0:	1815883a 	mov	r10,r3
   463d4:	58802226 	beq	r11,r2,46460 <_dtoa_r+0x1410>
   463d8:	bad7883a 	add	r11,r23,r11
   463dc:	dc001415 	stw	r16,80(sp)
   463e0:	a805883a 	mov	r2,r21
   463e4:	b027883a 	mov	r19,r22
   463e8:	5821883a 	mov	r16,r11
   463ec:	882b883a 	mov	r21,r17
   463f0:	000d883a 	mov	r6,zero
   463f4:	01d00934 	movhi	r7,16420
   463f8:	1009883a 	mov	r4,r2
   463fc:	180b883a 	mov	r5,r3
   46400:	0049a640 	call	49a64 <__muldf3>
   46404:	180b883a 	mov	r5,r3
   46408:	1009883a 	mov	r4,r2
   4640c:	1829883a 	mov	r20,r3
   46410:	1023883a 	mov	r17,r2
   46414:	004a1ac0 	call	4a1ac <__fixdfsi>
   46418:	1009883a 	mov	r4,r2
   4641c:	1025883a 	mov	r18,r2
   46420:	004a0d80 	call	4a0d8 <__floatsidf>
   46424:	8809883a 	mov	r4,r17
   46428:	a00b883a 	mov	r5,r20
   4642c:	100d883a 	mov	r6,r2
   46430:	180f883a 	mov	r7,r3
   46434:	94800c04 	addi	r18,r18,48
   46438:	0049a040 	call	49a04 <__subdf3>
   4643c:	9cc00044 	addi	r19,r19,1
   46440:	9cbfffc5 	stb	r18,-1(r19)
   46444:	9c3fea1e 	bne	r19,r16,463f0 <_dtoa_r+0x13a0>
   46448:	1815883a 	mov	r10,r3
   4644c:	d8c01017 	ldw	r3,64(sp)
   46450:	dc001417 	ldw	r16,80(sp)
   46454:	a823883a 	mov	r17,r21
   46458:	b0ed883a 	add	r22,r22,r3
   4645c:	102b883a 	mov	r21,r2
   46460:	d9001117 	ldw	r4,68(sp)
   46464:	d9401217 	ldw	r5,72(sp)
   46468:	000d883a 	mov	r6,zero
   4646c:	01cff834 	movhi	r7,16352
   46470:	da801515 	stw	r10,84(sp)
   46474:	00499b00 	call	499b0 <__adddf3>
   46478:	da801517 	ldw	r10,84(sp)
   4647c:	1009883a 	mov	r4,r2
   46480:	180b883a 	mov	r5,r3
   46484:	500f883a 	mov	r7,r10
   46488:	a80d883a 	mov	r6,r21
   4648c:	004a07c0 	call	4a07c <__ltdf2>
   46490:	da801517 	ldw	r10,84(sp)
   46494:	10003b0e 	bge	r2,zero,46584 <_dtoa_r+0x1534>
   46498:	d9c01317 	ldw	r7,76(sp)
   4649c:	b53fffc3 	ldbu	r20,-1(r22)
   464a0:	d9c00615 	stw	r7,24(sp)
   464a4:	003d3106 	br	4596c <_dtoa_r+0x91c>
   464a8:	d8800817 	ldw	r2,32(sp)
   464ac:	11e5c83a 	sub	r18,r2,r7
   464b0:	0005883a 	mov	r2,zero
   464b4:	003d5006 	br	459f8 <_dtoa_r+0x9a8>
   464b8:	05800044 	movi	r22,1
   464bc:	003dc406 	br	45bd0 <_dtoa_r+0xb80>
   464c0:	a5000044 	addi	r20,r20,1
   464c4:	15000005 	stb	r20,0(r2)
   464c8:	003c8206 	br	456d4 <_dtoa_r+0x684>
   464cc:	d8800217 	ldw	r2,8(sp)
   464d0:	00c00d84 	movi	r3,54
   464d4:	dcc00a17 	ldw	r19,40(sp)
   464d8:	1885c83a 	sub	r2,r3,r2
   464dc:	dc800817 	ldw	r18,32(sp)
   464e0:	003d4506 	br	459f8 <_dtoa_r+0x9a8>
   464e4:	dcc00317 	ldw	r19,12(sp)
   464e8:	8829883a 	mov	r20,r17
   464ec:	04800084 	movi	r18,2
   464f0:	003bea06 	br	4549c <_dtoa_r+0x44c>
   464f4:	d9000917 	ldw	r4,36(sp)
   464f8:	203f1126 	beq	r4,zero,46140 <_dtoa_r+0x10f0>
   464fc:	d9c00e17 	ldw	r7,56(sp)
   46500:	01fca20e 	bge	zero,r7,4578c <_dtoa_r+0x73c>
   46504:	a00b883a 	mov	r5,r20
   46508:	9809883a 	mov	r4,r19
   4650c:	000d883a 	mov	r6,zero
   46510:	01d00934 	movhi	r7,16420
   46514:	0049a640 	call	49a64 <__muldf3>
   46518:	91000044 	addi	r4,r18,1
   4651c:	1027883a 	mov	r19,r2
   46520:	1829883a 	mov	r20,r3
   46524:	004a0d80 	call	4a0d8 <__floatsidf>
   46528:	9809883a 	mov	r4,r19
   4652c:	a00b883a 	mov	r5,r20
   46530:	100d883a 	mov	r6,r2
   46534:	180f883a 	mov	r7,r3
   46538:	0049a640 	call	49a64 <__muldf3>
   4653c:	1009883a 	mov	r4,r2
   46540:	180b883a 	mov	r5,r3
   46544:	000d883a 	mov	r6,zero
   46548:	01d00734 	movhi	r7,16412
   4654c:	00499b00 	call	499b0 <__adddf3>
   46550:	1025883a 	mov	r18,r2
   46554:	d8800617 	ldw	r2,24(sp)
   46558:	057f3034 	movhi	r21,64704
   4655c:	1d6b883a 	add	r21,r3,r21
   46560:	10bfffc4 	addi	r2,r2,-1
   46564:	d8801315 	stw	r2,76(sp)
   46568:	dac00e17 	ldw	r11,56(sp)
   4656c:	003be706 	br	4550c <_dtoa_r+0x4bc>
   46570:	01000e44 	movi	r4,57
   46574:	91000005 	stb	r4,0(r18)
   46578:	95800044 	addi	r22,r18,1
   4657c:	982b883a 	mov	r21,r19
   46580:	003da106 	br	45c08 <_dtoa_r+0xbb8>
   46584:	d9801117 	ldw	r6,68(sp)
   46588:	d9c01217 	ldw	r7,72(sp)
   4658c:	0009883a 	mov	r4,zero
   46590:	014ff834 	movhi	r5,16352
   46594:	da801515 	stw	r10,84(sp)
   46598:	0049a040 	call	49a04 <__subdf3>
   4659c:	da801517 	ldw	r10,84(sp)
   465a0:	1009883a 	mov	r4,r2
   465a4:	180b883a 	mov	r5,r3
   465a8:	a80d883a 	mov	r6,r21
   465ac:	500f883a 	mov	r7,r10
   465b0:	0049fb40 	call	49fb4 <__gtdf2>
   465b4:	00bc750e 	bge	zero,r2,4578c <_dtoa_r+0x73c>
   465b8:	01000c04 	movi	r4,48
   465bc:	00000106 	br	465c4 <_dtoa_r+0x1574>
   465c0:	102d883a 	mov	r22,r2
   465c4:	b0bfffc4 	addi	r2,r22,-1
   465c8:	10c00007 	ldb	r3,0(r2)
   465cc:	193ffc26 	beq	r3,r4,465c0 <_dtoa_r+0x1570>
   465d0:	d8801317 	ldw	r2,76(sp)
   465d4:	d8800615 	stw	r2,24(sp)
   465d8:	003c3e06 	br	456d4 <_dtoa_r+0x684>
   465dc:	d9001317 	ldw	r4,76(sp)
   465e0:	df001117 	ldw	fp,68(sp)
   465e4:	d9000615 	stw	r4,24(sp)
   465e8:	003ce006 	br	4596c <_dtoa_r+0x91c>
   465ec:	df001117 	ldw	fp,68(sp)
   465f0:	dc401217 	ldw	r17,72(sp)
   465f4:	003c6506 	br	4578c <_dtoa_r+0x73c>
   465f8:	103e7a1e 	bne	r2,zero,45fe4 <_dtoa_r+0xf94>
   465fc:	1880004c 	andi	r2,r3,1
   46600:	103e7826 	beq	r2,zero,45fe4 <_dtoa_r+0xf94>
   46604:	003e7406 	br	45fd8 <_dtoa_r+0xf88>
   46608:	8009883a 	mov	r4,r16
   4660c:	a80b883a 	mov	r5,r21
   46610:	01800284 	movi	r6,10
   46614:	000f883a 	mov	r7,zero
   46618:	00472280 	call	47228 <__multadd>
   4661c:	d9000e17 	ldw	r4,56(sp)
   46620:	102b883a 	mov	r21,r2
   46624:	d9000915 	stw	r4,36(sp)
   46628:	003d5106 	br	45b70 <_dtoa_r+0xb20>
   4662c:	04800084 	movi	r18,2
   46630:	003b9a06 	br	4549c <_dtoa_r+0x44c>
   46634:	d8c01317 	ldw	r3,76(sp)
   46638:	d8c00615 	stw	r3,24(sp)
   4663c:	003ccb06 	br	4596c <_dtoa_r+0x91c>
   46640:	d8c01317 	ldw	r3,76(sp)
   46644:	d8c00615 	stw	r3,24(sp)
   46648:	003c2206 	br	456d4 <_dtoa_r+0x684>
   4664c:	20fd3826 	beq	r4,r3,45b30 <_dtoa_r+0xae0>
   46650:	00c00f04 	movi	r3,60
   46654:	1885c83a 	sub	r2,r3,r2
   46658:	003da906 	br	45d00 <_dtoa_r+0xcb0>
   4665c:	000b883a 	mov	r5,zero
   46660:	003b5406 	br	453b4 <_dtoa_r+0x364>
   46664:	04c00044 	movi	r19,1
   46668:	003b3b06 	br	45358 <_dtoa_r+0x308>

0004666c <__sflags>:
   4666c:	28800007 	ldb	r2,0(r5)
   46670:	00c01c84 	movi	r3,114
   46674:	10c01826 	beq	r2,r3,466d8 <__sflags+0x6c>
   46678:	00c01dc4 	movi	r3,119
   4667c:	10c01226 	beq	r2,r3,466c8 <__sflags+0x5c>
   46680:	00c01844 	movi	r3,97
   46684:	10c00426 	beq	r2,r3,46698 <__sflags+0x2c>
   46688:	00800584 	movi	r2,22
   4668c:	20800015 	stw	r2,0(r4)
   46690:	0005883a 	mov	r2,zero
   46694:	f800283a 	ret
   46698:	01c08204 	movi	r7,520
   4669c:	01000044 	movi	r4,1
   466a0:	00804204 	movi	r2,264
   466a4:	28c00047 	ldb	r3,1(r5)
   466a8:	18000426 	beq	r3,zero,466bc <__sflags+0x50>
   466ac:	02000ac4 	movi	r8,43
   466b0:	1a000d26 	beq	r3,r8,466e8 <__sflags+0x7c>
   466b4:	28c00087 	ldb	r3,2(r5)
   466b8:	1a000b26 	beq	r3,r8,466e8 <__sflags+0x7c>
   466bc:	21c8b03a 	or	r4,r4,r7
   466c0:	31000015 	stw	r4,0(r6)
   466c4:	f800283a 	ret
   466c8:	01c18004 	movi	r7,1536
   466cc:	01000044 	movi	r4,1
   466d0:	00800204 	movi	r2,8
   466d4:	003ff306 	br	466a4 <__sflags+0x38>
   466d8:	000f883a 	mov	r7,zero
   466dc:	0009883a 	mov	r4,zero
   466e0:	00800104 	movi	r2,4
   466e4:	003fef06 	br	466a4 <__sflags+0x38>
   466e8:	00fff8c4 	movi	r3,-29
   466ec:	01000084 	movi	r4,2
   466f0:	10c4703a 	and	r2,r2,r3
   466f4:	21c8b03a 	or	r4,r4,r7
   466f8:	10800414 	ori	r2,r2,16
   466fc:	31000015 	stw	r4,0(r6)
   46700:	f800283a 	ret

00046704 <__sfvwrite_r>:
   46704:	30800217 	ldw	r2,8(r6)
   46708:	defff504 	addi	sp,sp,-44
   4670c:	dd400615 	stw	r21,24(sp)
   46710:	dd000515 	stw	r20,20(sp)
   46714:	dc000115 	stw	r16,4(sp)
   46718:	dfc00a15 	stw	ra,40(sp)
   4671c:	df000915 	stw	fp,36(sp)
   46720:	ddc00815 	stw	r23,32(sp)
   46724:	dd800715 	stw	r22,28(sp)
   46728:	dcc00415 	stw	r19,16(sp)
   4672c:	dc800315 	stw	r18,12(sp)
   46730:	dc400215 	stw	r17,8(sp)
   46734:	3029883a 	mov	r20,r6
   46738:	202b883a 	mov	r21,r4
   4673c:	2821883a 	mov	r16,r5
   46740:	10002126 	beq	r2,zero,467c8 <__sfvwrite_r+0xc4>
   46744:	2880030b 	ldhu	r2,12(r5)
   46748:	10c0020c 	andi	r3,r2,8
   4674c:	18ffffcc 	andi	r3,r3,65535
   46750:	18e0001c 	xori	r3,r3,32768
   46754:	18e00004 	addi	r3,r3,-32768
   46758:	18002826 	beq	r3,zero,467fc <__sfvwrite_r+0xf8>
   4675c:	28c00417 	ldw	r3,16(r5)
   46760:	18002626 	beq	r3,zero,467fc <__sfvwrite_r+0xf8>
   46764:	10c0008c 	andi	r3,r2,2
   46768:	18ffffcc 	andi	r3,r3,65535
   4676c:	18e0001c 	xori	r3,r3,32768
   46770:	18e00004 	addi	r3,r3,-32768
   46774:	a4400017 	ldw	r17,0(r20)
   46778:	18002b26 	beq	r3,zero,46828 <__sfvwrite_r+0x124>
   4677c:	0027883a 	mov	r19,zero
   46780:	0025883a 	mov	r18,zero
   46784:	05810004 	movi	r22,1024
   46788:	980d883a 	mov	r6,r19
   4678c:	a809883a 	mov	r4,r21
   46790:	90004f26 	beq	r18,zero,468d0 <__sfvwrite_r+0x1cc>
   46794:	900f883a 	mov	r7,r18
   46798:	81400717 	ldw	r5,28(r16)
   4679c:	b480012e 	bgeu	r22,r18,467a4 <__sfvwrite_r+0xa0>
   467a0:	01c10004 	movi	r7,1024
   467a4:	80800917 	ldw	r2,36(r16)
   467a8:	103ee83a 	callr	r2
   467ac:	0080540e 	bge	zero,r2,46900 <__sfvwrite_r+0x1fc>
   467b0:	a0c00217 	ldw	r3,8(r20)
   467b4:	98a7883a 	add	r19,r19,r2
   467b8:	90a5c83a 	sub	r18,r18,r2
   467bc:	1885c83a 	sub	r2,r3,r2
   467c0:	a0800215 	stw	r2,8(r20)
   467c4:	103ff01e 	bne	r2,zero,46788 <__sfvwrite_r+0x84>
   467c8:	0005883a 	mov	r2,zero
   467cc:	dfc00a17 	ldw	ra,40(sp)
   467d0:	df000917 	ldw	fp,36(sp)
   467d4:	ddc00817 	ldw	r23,32(sp)
   467d8:	dd800717 	ldw	r22,28(sp)
   467dc:	dd400617 	ldw	r21,24(sp)
   467e0:	dd000517 	ldw	r20,20(sp)
   467e4:	dcc00417 	ldw	r19,16(sp)
   467e8:	dc800317 	ldw	r18,12(sp)
   467ec:	dc400217 	ldw	r17,8(sp)
   467f0:	dc000117 	ldw	r16,4(sp)
   467f4:	dec00b04 	addi	sp,sp,44
   467f8:	f800283a 	ret
   467fc:	a809883a 	mov	r4,r21
   46800:	800b883a 	mov	r5,r16
   46804:	0044c3c0 	call	44c3c <__swsetup_r>
   46808:	1000f01e 	bne	r2,zero,46bcc <__sfvwrite_r+0x4c8>
   4680c:	8080030b 	ldhu	r2,12(r16)
   46810:	a4400017 	ldw	r17,0(r20)
   46814:	10c0008c 	andi	r3,r2,2
   46818:	18ffffcc 	andi	r3,r3,65535
   4681c:	18e0001c 	xori	r3,r3,32768
   46820:	18e00004 	addi	r3,r3,-32768
   46824:	183fd51e 	bne	r3,zero,4677c <__sfvwrite_r+0x78>
   46828:	10c0004c 	andi	r3,r2,1
   4682c:	002d883a 	mov	r22,zero
   46830:	1800381e 	bne	r3,zero,46914 <__sfvwrite_r+0x210>
   46834:	0025883a 	mov	r18,zero
   46838:	90002126 	beq	r18,zero,468c0 <__sfvwrite_r+0x1bc>
   4683c:	10c0800c 	andi	r3,r2,512
   46840:	18ffffcc 	andi	r3,r3,65535
   46844:	18e0001c 	xori	r3,r3,32768
   46848:	18e00004 	addi	r3,r3,-32768
   4684c:	84c00217 	ldw	r19,8(r16)
   46850:	18006b26 	beq	r3,zero,46a00 <__sfvwrite_r+0x2fc>
   46854:	980f883a 	mov	r7,r19
   46858:	94c08636 	bltu	r18,r19,46a74 <__sfvwrite_r+0x370>
   4685c:	10c1200c 	andi	r3,r2,1152
   46860:	18009f1e 	bne	r3,zero,46ae0 <__sfvwrite_r+0x3dc>
   46864:	81000017 	ldw	r4,0(r16)
   46868:	982f883a 	mov	r23,r19
   4686c:	9039883a 	mov	fp,r18
   46870:	9027883a 	mov	r19,r18
   46874:	380d883a 	mov	r6,r7
   46878:	b00b883a 	mov	r5,r22
   4687c:	d9c00015 	stw	r7,0(sp)
   46880:	0046fcc0 	call	46fcc <memmove>
   46884:	d9c00017 	ldw	r7,0(sp)
   46888:	81000217 	ldw	r4,8(r16)
   4688c:	80800017 	ldw	r2,0(r16)
   46890:	25efc83a 	sub	r23,r4,r23
   46894:	11cf883a 	add	r7,r2,r7
   46898:	85c00215 	stw	r23,8(r16)
   4689c:	81c00015 	stw	r7,0(r16)
   468a0:	a0800217 	ldw	r2,8(r20)
   468a4:	b72d883a 	add	r22,r22,fp
   468a8:	9725c83a 	sub	r18,r18,fp
   468ac:	14e7c83a 	sub	r19,r2,r19
   468b0:	a4c00215 	stw	r19,8(r20)
   468b4:	983fc426 	beq	r19,zero,467c8 <__sfvwrite_r+0xc4>
   468b8:	8080030b 	ldhu	r2,12(r16)
   468bc:	903fdf1e 	bne	r18,zero,4683c <__sfvwrite_r+0x138>
   468c0:	8d800017 	ldw	r22,0(r17)
   468c4:	8c800117 	ldw	r18,4(r17)
   468c8:	8c400204 	addi	r17,r17,8
   468cc:	003fda06 	br	46838 <__sfvwrite_r+0x134>
   468d0:	8cc00017 	ldw	r19,0(r17)
   468d4:	8c800117 	ldw	r18,4(r17)
   468d8:	8c400204 	addi	r17,r17,8
   468dc:	003faa06 	br	46788 <__sfvwrite_r+0x84>
   468e0:	00482140 	call	48214 <_realloc_r>
   468e4:	102f883a 	mov	r23,r2
   468e8:	10009f1e 	bne	r2,zero,46b68 <__sfvwrite_r+0x464>
   468ec:	81400417 	ldw	r5,16(r16)
   468f0:	a809883a 	mov	r4,r21
   468f4:	0040ff00 	call	40ff0 <_free_r>
   468f8:	00800304 	movi	r2,12
   468fc:	a8800015 	stw	r2,0(r21)
   46900:	80c0030b 	ldhu	r3,12(r16)
   46904:	00bfffc4 	movi	r2,-1
   46908:	18c01014 	ori	r3,r3,64
   4690c:	80c0030d 	sth	r3,12(r16)
   46910:	003fae06 	br	467cc <__sfvwrite_r+0xc8>
   46914:	0007883a 	mov	r3,zero
   46918:	0039883a 	mov	fp,zero
   4691c:	0025883a 	mov	r18,zero
   46920:	90001e26 	beq	r18,zero,4699c <__sfvwrite_r+0x298>
   46924:	18006526 	beq	r3,zero,46abc <__sfvwrite_r+0x3b8>
   46928:	b02f883a 	mov	r23,r22
   4692c:	9580012e 	bgeu	r18,r22,46934 <__sfvwrite_r+0x230>
   46930:	902f883a 	mov	r23,r18
   46934:	81000017 	ldw	r4,0(r16)
   46938:	80800417 	ldw	r2,16(r16)
   4693c:	84c00217 	ldw	r19,8(r16)
   46940:	81c00517 	ldw	r7,20(r16)
   46944:	1100022e 	bgeu	r2,r4,46950 <__sfvwrite_r+0x24c>
   46948:	99e7883a 	add	r19,r19,r7
   4694c:	9dc01816 	blt	r19,r23,469b0 <__sfvwrite_r+0x2ac>
   46950:	b9c03b16 	blt	r23,r7,46a40 <__sfvwrite_r+0x33c>
   46954:	80800917 	ldw	r2,36(r16)
   46958:	81400717 	ldw	r5,28(r16)
   4695c:	a809883a 	mov	r4,r21
   46960:	d8c00015 	stw	r3,0(sp)
   46964:	e00d883a 	mov	r6,fp
   46968:	103ee83a 	callr	r2
   4696c:	1027883a 	mov	r19,r2
   46970:	d8c00017 	ldw	r3,0(sp)
   46974:	00bfe20e 	bge	zero,r2,46900 <__sfvwrite_r+0x1fc>
   46978:	b4edc83a 	sub	r22,r22,r19
   4697c:	b0001a26 	beq	r22,zero,469e8 <__sfvwrite_r+0x2e4>
   46980:	a0800217 	ldw	r2,8(r20)
   46984:	e4f9883a 	add	fp,fp,r19
   46988:	94e5c83a 	sub	r18,r18,r19
   4698c:	14e7c83a 	sub	r19,r2,r19
   46990:	a4c00215 	stw	r19,8(r20)
   46994:	983f8c26 	beq	r19,zero,467c8 <__sfvwrite_r+0xc4>
   46998:	903fe21e 	bne	r18,zero,46924 <__sfvwrite_r+0x220>
   4699c:	8f000017 	ldw	fp,0(r17)
   469a0:	8c800117 	ldw	r18,4(r17)
   469a4:	0007883a 	mov	r3,zero
   469a8:	8c400204 	addi	r17,r17,8
   469ac:	003fdc06 	br	46920 <__sfvwrite_r+0x21c>
   469b0:	e00b883a 	mov	r5,fp
   469b4:	980d883a 	mov	r6,r19
   469b8:	d8c00015 	stw	r3,0(sp)
   469bc:	0046fcc0 	call	46fcc <memmove>
   469c0:	80800017 	ldw	r2,0(r16)
   469c4:	a809883a 	mov	r4,r21
   469c8:	800b883a 	mov	r5,r16
   469cc:	14c5883a 	add	r2,r2,r19
   469d0:	80800015 	stw	r2,0(r16)
   469d4:	00407740 	call	40774 <_fflush_r>
   469d8:	d8c00017 	ldw	r3,0(sp)
   469dc:	103fc81e 	bne	r2,zero,46900 <__sfvwrite_r+0x1fc>
   469e0:	b4edc83a 	sub	r22,r22,r19
   469e4:	b03fe61e 	bne	r22,zero,46980 <__sfvwrite_r+0x27c>
   469e8:	a809883a 	mov	r4,r21
   469ec:	800b883a 	mov	r5,r16
   469f0:	00407740 	call	40774 <_fflush_r>
   469f4:	103fc21e 	bne	r2,zero,46900 <__sfvwrite_r+0x1fc>
   469f8:	0007883a 	mov	r3,zero
   469fc:	003fe006 	br	46980 <__sfvwrite_r+0x27c>
   46a00:	81000017 	ldw	r4,0(r16)
   46a04:	80800417 	ldw	r2,16(r16)
   46a08:	1100022e 	bgeu	r2,r4,46a14 <__sfvwrite_r+0x310>
   46a0c:	9839883a 	mov	fp,r19
   46a10:	9c806036 	bltu	r19,r18,46b94 <__sfvwrite_r+0x490>
   46a14:	81c00517 	ldw	r7,20(r16)
   46a18:	91c01c36 	bltu	r18,r7,46a8c <__sfvwrite_r+0x388>
   46a1c:	80800917 	ldw	r2,36(r16)
   46a20:	81400717 	ldw	r5,28(r16)
   46a24:	a809883a 	mov	r4,r21
   46a28:	b00d883a 	mov	r6,r22
   46a2c:	103ee83a 	callr	r2
   46a30:	1027883a 	mov	r19,r2
   46a34:	00bfb20e 	bge	zero,r2,46900 <__sfvwrite_r+0x1fc>
   46a38:	1039883a 	mov	fp,r2
   46a3c:	003f9806 	br	468a0 <__sfvwrite_r+0x19c>
   46a40:	b80d883a 	mov	r6,r23
   46a44:	e00b883a 	mov	r5,fp
   46a48:	d8c00015 	stw	r3,0(sp)
   46a4c:	0046fcc0 	call	46fcc <memmove>
   46a50:	80800217 	ldw	r2,8(r16)
   46a54:	81000017 	ldw	r4,0(r16)
   46a58:	b827883a 	mov	r19,r23
   46a5c:	15c5c83a 	sub	r2,r2,r23
   46a60:	25ef883a 	add	r23,r4,r23
   46a64:	80800215 	stw	r2,8(r16)
   46a68:	85c00015 	stw	r23,0(r16)
   46a6c:	d8c00017 	ldw	r3,0(sp)
   46a70:	003fc106 	br	46978 <__sfvwrite_r+0x274>
   46a74:	81000017 	ldw	r4,0(r16)
   46a78:	902f883a 	mov	r23,r18
   46a7c:	9039883a 	mov	fp,r18
   46a80:	9027883a 	mov	r19,r18
   46a84:	900f883a 	mov	r7,r18
   46a88:	003f7a06 	br	46874 <__sfvwrite_r+0x170>
   46a8c:	b00b883a 	mov	r5,r22
   46a90:	900d883a 	mov	r6,r18
   46a94:	0046fcc0 	call	46fcc <memmove>
   46a98:	80c00217 	ldw	r3,8(r16)
   46a9c:	80800017 	ldw	r2,0(r16)
   46aa0:	9027883a 	mov	r19,r18
   46aa4:	1c87c83a 	sub	r3,r3,r18
   46aa8:	1485883a 	add	r2,r2,r18
   46aac:	80c00215 	stw	r3,8(r16)
   46ab0:	80800015 	stw	r2,0(r16)
   46ab4:	9039883a 	mov	fp,r18
   46ab8:	003f7906 	br	468a0 <__sfvwrite_r+0x19c>
   46abc:	e009883a 	mov	r4,fp
   46ac0:	01400284 	movi	r5,10
   46ac4:	900d883a 	mov	r6,r18
   46ac8:	0046d940 	call	46d94 <memchr>
   46acc:	10003c26 	beq	r2,zero,46bc0 <__sfvwrite_r+0x4bc>
   46ad0:	15800044 	addi	r22,r2,1
   46ad4:	b72dc83a 	sub	r22,r22,fp
   46ad8:	00c00044 	movi	r3,1
   46adc:	003f9206 	br	46928 <__sfvwrite_r+0x224>
   46ae0:	81000517 	ldw	r4,20(r16)
   46ae4:	81400417 	ldw	r5,16(r16)
   46ae8:	80c00017 	ldw	r3,0(r16)
   46aec:	210d883a 	add	r6,r4,r4
   46af0:	3109883a 	add	r4,r6,r4
   46af4:	2026d7fa 	srli	r19,r4,31
   46af8:	1979c83a 	sub	fp,r3,r5
   46afc:	e1800044 	addi	r6,fp,1
   46b00:	9909883a 	add	r4,r19,r4
   46b04:	2027d07a 	srai	r19,r4,1
   46b08:	3489883a 	add	r4,r6,r18
   46b0c:	980d883a 	mov	r6,r19
   46b10:	9900022e 	bgeu	r19,r4,46b1c <__sfvwrite_r+0x418>
   46b14:	2027883a 	mov	r19,r4
   46b18:	200d883a 	mov	r6,r4
   46b1c:	1081000c 	andi	r2,r2,1024
   46b20:	10bfffcc 	andi	r2,r2,65535
   46b24:	10a0001c 	xori	r2,r2,32768
   46b28:	10a00004 	addi	r2,r2,-32768
   46b2c:	a809883a 	mov	r4,r21
   46b30:	103f6b26 	beq	r2,zero,468e0 <__sfvwrite_r+0x1dc>
   46b34:	300b883a 	mov	r5,r6
   46b38:	0041ac80 	call	41ac8 <_malloc_r>
   46b3c:	102f883a 	mov	r23,r2
   46b40:	103f6d26 	beq	r2,zero,468f8 <__sfvwrite_r+0x1f4>
   46b44:	81400417 	ldw	r5,16(r16)
   46b48:	1009883a 	mov	r4,r2
   46b4c:	e00d883a 	mov	r6,fp
   46b50:	0046e8c0 	call	46e8c <memcpy>
   46b54:	8080030b 	ldhu	r2,12(r16)
   46b58:	00fedfc4 	movi	r3,-1153
   46b5c:	10c4703a 	and	r2,r2,r3
   46b60:	10802014 	ori	r2,r2,128
   46b64:	8080030d 	sth	r2,12(r16)
   46b68:	bf09883a 	add	r4,r23,fp
   46b6c:	9f07c83a 	sub	r3,r19,fp
   46b70:	85c00415 	stw	r23,16(r16)
   46b74:	84c00515 	stw	r19,20(r16)
   46b78:	81000015 	stw	r4,0(r16)
   46b7c:	902f883a 	mov	r23,r18
   46b80:	80c00215 	stw	r3,8(r16)
   46b84:	9039883a 	mov	fp,r18
   46b88:	9027883a 	mov	r19,r18
   46b8c:	900f883a 	mov	r7,r18
   46b90:	003f3806 	br	46874 <__sfvwrite_r+0x170>
   46b94:	b00b883a 	mov	r5,r22
   46b98:	980d883a 	mov	r6,r19
   46b9c:	0046fcc0 	call	46fcc <memmove>
   46ba0:	80800017 	ldw	r2,0(r16)
   46ba4:	a809883a 	mov	r4,r21
   46ba8:	800b883a 	mov	r5,r16
   46bac:	14c5883a 	add	r2,r2,r19
   46bb0:	80800015 	stw	r2,0(r16)
   46bb4:	00407740 	call	40774 <_fflush_r>
   46bb8:	103f3926 	beq	r2,zero,468a0 <__sfvwrite_r+0x19c>
   46bbc:	003f5006 	br	46900 <__sfvwrite_r+0x1fc>
   46bc0:	95800044 	addi	r22,r18,1
   46bc4:	00c00044 	movi	r3,1
   46bc8:	003f5706 	br	46928 <__sfvwrite_r+0x224>
   46bcc:	80c0030b 	ldhu	r3,12(r16)
   46bd0:	00bfffc4 	movi	r2,-1
   46bd4:	18c01014 	ori	r3,r3,64
   46bd8:	80c0030d 	sth	r3,12(r16)
   46bdc:	00c00244 	movi	r3,9
   46be0:	a8c00015 	stw	r3,0(r21)
   46be4:	003ef906 	br	467cc <__sfvwrite_r+0xc8>

00046be8 <_isatty_r>:
   46be8:	defffd04 	addi	sp,sp,-12
   46bec:	dc400115 	stw	r17,4(sp)
   46bf0:	dc000015 	stw	r16,0(sp)
   46bf4:	2023883a 	mov	r17,r4
   46bf8:	04000174 	movhi	r16,5
   46bfc:	84063b04 	addi	r16,r16,6380
   46c00:	2809883a 	mov	r4,r5
   46c04:	dfc00215 	stw	ra,8(sp)
   46c08:	80000015 	stw	zero,0(r16)
   46c0c:	004adc80 	call	4adc8 <isatty>
   46c10:	00ffffc4 	movi	r3,-1
   46c14:	10c00526 	beq	r2,r3,46c2c <_isatty_r+0x44>
   46c18:	dfc00217 	ldw	ra,8(sp)
   46c1c:	dc400117 	ldw	r17,4(sp)
   46c20:	dc000017 	ldw	r16,0(sp)
   46c24:	dec00304 	addi	sp,sp,12
   46c28:	f800283a 	ret
   46c2c:	80c00017 	ldw	r3,0(r16)
   46c30:	183ff926 	beq	r3,zero,46c18 <_isatty_r+0x30>
   46c34:	88c00015 	stw	r3,0(r17)
   46c38:	dfc00217 	ldw	ra,8(sp)
   46c3c:	dc400117 	ldw	r17,4(sp)
   46c40:	dc000017 	ldw	r16,0(sp)
   46c44:	dec00304 	addi	sp,sp,12
   46c48:	f800283a 	ret

00046c4c <_setlocale_r>:
   46c4c:	defffc04 	addi	sp,sp,-16
   46c50:	dc800215 	stw	r18,8(sp)
   46c54:	dc400115 	stw	r17,4(sp)
   46c58:	dc000015 	stw	r16,0(sp)
   46c5c:	dfc00315 	stw	ra,12(sp)
   46c60:	3021883a 	mov	r16,r6
   46c64:	2023883a 	mov	r17,r4
   46c68:	2825883a 	mov	r18,r5
   46c6c:	30001626 	beq	r6,zero,46cc8 <_setlocale_r+0x7c>
   46c70:	3009883a 	mov	r4,r6
   46c74:	01400174 	movhi	r5,5
   46c78:	2977cc04 	addi	r5,r5,-8400
   46c7c:	00488740 	call	48874 <strcmp>
   46c80:	10000a1e 	bne	r2,zero,46cac <_setlocale_r+0x60>
   46c84:	8c800c15 	stw	r18,48(r17)
   46c88:	8c000d15 	stw	r16,52(r17)
   46c8c:	00800174 	movhi	r2,5
   46c90:	10b7cc04 	addi	r2,r2,-8400
   46c94:	dfc00317 	ldw	ra,12(sp)
   46c98:	dc800217 	ldw	r18,8(sp)
   46c9c:	dc400117 	ldw	r17,4(sp)
   46ca0:	dc000017 	ldw	r16,0(sp)
   46ca4:	dec00404 	addi	sp,sp,16
   46ca8:	f800283a 	ret
   46cac:	8009883a 	mov	r4,r16
   46cb0:	01400174 	movhi	r5,5
   46cb4:	2977d604 	addi	r5,r5,-8360
   46cb8:	00488740 	call	48874 <strcmp>
   46cbc:	103ff126 	beq	r2,zero,46c84 <_setlocale_r+0x38>
   46cc0:	0005883a 	mov	r2,zero
   46cc4:	003ff306 	br	46c94 <_setlocale_r+0x48>
   46cc8:	00800174 	movhi	r2,5
   46ccc:	10b7cc04 	addi	r2,r2,-8400
   46cd0:	dfc00317 	ldw	ra,12(sp)
   46cd4:	dc800217 	ldw	r18,8(sp)
   46cd8:	dc400117 	ldw	r17,4(sp)
   46cdc:	dc000017 	ldw	r16,0(sp)
   46ce0:	dec00404 	addi	sp,sp,16
   46ce4:	f800283a 	ret

00046ce8 <__locale_charset>:
   46ce8:	00800174 	movhi	r2,5
   46cec:	10b7eb04 	addi	r2,r2,-8276
   46cf0:	f800283a 	ret

00046cf4 <_localeconv_r>:
   46cf4:	00800174 	movhi	r2,5
   46cf8:	10b7ef04 	addi	r2,r2,-8260
   46cfc:	f800283a 	ret

00046d00 <setlocale>:
   46d00:	00c00174 	movhi	r3,5
   46d04:	18ff4904 	addi	r3,r3,-732
   46d08:	2005883a 	mov	r2,r4
   46d0c:	19000017 	ldw	r4,0(r3)
   46d10:	280d883a 	mov	r6,r5
   46d14:	100b883a 	mov	r5,r2
   46d18:	0046c4c1 	jmpi	46c4c <_setlocale_r>

00046d1c <localeconv>:
   46d1c:	00800174 	movhi	r2,5
   46d20:	10b7ef04 	addi	r2,r2,-8260
   46d24:	f800283a 	ret

00046d28 <_lseek_r>:
   46d28:	defffd04 	addi	sp,sp,-12
   46d2c:	dc400115 	stw	r17,4(sp)
   46d30:	dc000015 	stw	r16,0(sp)
   46d34:	2023883a 	mov	r17,r4
   46d38:	04000174 	movhi	r16,5
   46d3c:	84063b04 	addi	r16,r16,6380
   46d40:	2809883a 	mov	r4,r5
   46d44:	300b883a 	mov	r5,r6
   46d48:	380d883a 	mov	r6,r7
   46d4c:	dfc00215 	stw	ra,8(sp)
   46d50:	80000015 	stw	zero,0(r16)
   46d54:	004afa80 	call	4afa8 <lseek>
   46d58:	00ffffc4 	movi	r3,-1
   46d5c:	10c00526 	beq	r2,r3,46d74 <_lseek_r+0x4c>
   46d60:	dfc00217 	ldw	ra,8(sp)
   46d64:	dc400117 	ldw	r17,4(sp)
   46d68:	dc000017 	ldw	r16,0(sp)
   46d6c:	dec00304 	addi	sp,sp,12
   46d70:	f800283a 	ret
   46d74:	80c00017 	ldw	r3,0(r16)
   46d78:	183ff926 	beq	r3,zero,46d60 <_lseek_r+0x38>
   46d7c:	88c00015 	stw	r3,0(r17)
   46d80:	dfc00217 	ldw	ra,8(sp)
   46d84:	dc400117 	ldw	r17,4(sp)
   46d88:	dc000017 	ldw	r16,0(sp)
   46d8c:	dec00304 	addi	sp,sp,12
   46d90:	f800283a 	ret

00046d94 <memchr>:
   46d94:	008000c4 	movi	r2,3
   46d98:	29403fcc 	andi	r5,r5,255
   46d9c:	1180282e 	bgeu	r2,r6,46e40 <memchr+0xac>
   46da0:	2086703a 	and	r3,r4,r2
   46da4:	1800351e 	bne	r3,zero,46e7c <memchr+0xe8>
   46da8:	2816923a 	slli	r11,r5,8
   46dac:	2093883a 	add	r9,r4,r2
   46db0:	22000084 	addi	r8,r4,2
   46db4:	5957883a 	add	r11,r11,r5
   46db8:	5816923a 	slli	r11,r11,8
   46dbc:	20c00044 	addi	r3,r4,1
   46dc0:	037fbff4 	movhi	r13,65279
   46dc4:	6b7fbfc4 	addi	r13,r13,-257
   46dc8:	5957883a 	add	r11,r11,r5
   46dcc:	5816923a 	slli	r11,r11,8
   46dd0:	03202074 	movhi	r12,32897
   46dd4:	63202004 	addi	r12,r12,-32640
   46dd8:	101d883a 	mov	r14,r2
   46ddc:	5957883a 	add	r11,r11,r5
   46de0:	21c00017 	ldw	r7,0(r4)
   46de4:	31bfff04 	addi	r6,r6,-4
   46de8:	1805883a 	mov	r2,r3
   46dec:	3acef03a 	xor	r7,r7,r11
   46df0:	3b55883a 	add	r10,r7,r13
   46df4:	01ce303a 	nor	r7,zero,r7
   46df8:	51ce703a 	and	r7,r10,r7
   46dfc:	3b0e703a 	and	r7,r7,r12
   46e00:	38000a26 	beq	r7,zero,46e2c <memchr+0x98>
   46e04:	21c00003 	ldbu	r7,0(r4)
   46e08:	39401e26 	beq	r7,r5,46e84 <memchr+0xf0>
   46e0c:	19c00003 	ldbu	r7,0(r3)
   46e10:	39401926 	beq	r7,r5,46e78 <memchr+0xe4>
   46e14:	41c00003 	ldbu	r7,0(r8)
   46e18:	4005883a 	mov	r2,r8
   46e1c:	39401626 	beq	r7,r5,46e78 <memchr+0xe4>
   46e20:	49c00003 	ldbu	r7,0(r9)
   46e24:	4805883a 	mov	r2,r9
   46e28:	39401326 	beq	r7,r5,46e78 <memchr+0xe4>
   46e2c:	21000104 	addi	r4,r4,4
   46e30:	4a400104 	addi	r9,r9,4
   46e34:	42000104 	addi	r8,r8,4
   46e38:	18c00104 	addi	r3,r3,4
   46e3c:	71bfe836 	bltu	r14,r6,46de0 <memchr+0x4c>
   46e40:	2005883a 	mov	r2,r4
   46e44:	30000a26 	beq	r6,zero,46e70 <memchr+0xdc>
   46e48:	10c00003 	ldbu	r3,0(r2)
   46e4c:	19400a26 	beq	r3,r5,46e78 <memchr+0xe4>
   46e50:	10c00044 	addi	r3,r2,1
   46e54:	118d883a 	add	r6,r2,r6
   46e58:	00000306 	br	46e68 <memchr+0xd4>
   46e5c:	11000003 	ldbu	r4,0(r2)
   46e60:	18c00044 	addi	r3,r3,1
   46e64:	21400426 	beq	r4,r5,46e78 <memchr+0xe4>
   46e68:	1805883a 	mov	r2,r3
   46e6c:	19bffb1e 	bne	r3,r6,46e5c <memchr+0xc8>
   46e70:	0005883a 	mov	r2,zero
   46e74:	f800283a 	ret
   46e78:	f800283a 	ret
   46e7c:	2005883a 	mov	r2,r4
   46e80:	003ff106 	br	46e48 <memchr+0xb4>
   46e84:	2005883a 	mov	r2,r4
   46e88:	f800283a 	ret

00046e8c <memcpy>:
   46e8c:	defffb04 	addi	sp,sp,-20
   46e90:	dc000015 	stw	r16,0(sp)
   46e94:	dfc00415 	stw	ra,16(sp)
   46e98:	dcc00315 	stw	r19,12(sp)
   46e9c:	dc800215 	stw	r18,8(sp)
   46ea0:	dc400115 	stw	r17,4(sp)
   46ea4:	00c003c4 	movi	r3,15
   46ea8:	2021883a 	mov	r16,r4
   46eac:	3005883a 	mov	r2,r6
   46eb0:	1980032e 	bgeu	r3,r6,46ec0 <memcpy+0x34>
   46eb4:	2906b03a 	or	r3,r5,r4
   46eb8:	18c000cc 	andi	r3,r3,3
   46ebc:	18001026 	beq	r3,zero,46f00 <memcpy+0x74>
   46ec0:	8007883a 	mov	r3,r16
   46ec4:	288f883a 	add	r7,r5,r2
   46ec8:	10000526 	beq	r2,zero,46ee0 <memcpy+0x54>
   46ecc:	29800003 	ldbu	r6,0(r5)
   46ed0:	18c00044 	addi	r3,r3,1
   46ed4:	29400044 	addi	r5,r5,1
   46ed8:	19bfffc5 	stb	r6,-1(r3)
   46edc:	29fffb1e 	bne	r5,r7,46ecc <memcpy+0x40>
   46ee0:	8005883a 	mov	r2,r16
   46ee4:	dfc00417 	ldw	ra,16(sp)
   46ee8:	dcc00317 	ldw	r19,12(sp)
   46eec:	dc800217 	ldw	r18,8(sp)
   46ef0:	dc400117 	ldw	r17,4(sp)
   46ef4:	dc000017 	ldw	r16,0(sp)
   46ef8:	dec00504 	addi	sp,sp,20
   46efc:	f800283a 	ret
   46f00:	32bffc04 	addi	r10,r6,-16
   46f04:	5014d13a 	srli	r10,r10,4
   46f08:	20800404 	addi	r2,r4,16
   46f0c:	2007883a 	mov	r3,r4
   46f10:	5008913a 	slli	r4,r10,4
   46f14:	280f883a 	mov	r7,r5
   46f18:	1105883a 	add	r2,r2,r4
   46f1c:	3a000017 	ldw	r8,0(r7)
   46f20:	18c00404 	addi	r3,r3,16
   46f24:	39c00404 	addi	r7,r7,16
   46f28:	1a3ffc15 	stw	r8,-16(r3)
   46f2c:	3a3ffd17 	ldw	r8,-12(r7)
   46f30:	1a3ffd15 	stw	r8,-12(r3)
   46f34:	3a3ffe17 	ldw	r8,-8(r7)
   46f38:	1a3ffe15 	stw	r8,-8(r3)
   46f3c:	3a3fff17 	ldw	r8,-4(r7)
   46f40:	1a3fff15 	stw	r8,-4(r3)
   46f44:	18bff51e 	bne	r3,r2,46f1c <memcpy+0x90>
   46f48:	52800044 	addi	r10,r10,1
   46f4c:	5014913a 	slli	r10,r10,4
   46f50:	308003cc 	andi	r2,r6,15
   46f54:	010000c4 	movi	r4,3
   46f58:	8287883a 	add	r3,r16,r10
   46f5c:	2a95883a 	add	r10,r5,r10
   46f60:	2080182e 	bgeu	r4,r2,46fc4 <memcpy+0x138>
   46f64:	147fff04 	addi	r17,r2,-4
   46f68:	8808d0ba 	srli	r4,r17,2
   46f6c:	1a400104 	addi	r9,r3,4
   46f70:	180d883a 	mov	r6,r3
   46f74:	2105883a 	add	r2,r4,r4
   46f78:	1085883a 	add	r2,r2,r2
   46f7c:	4893883a 	add	r9,r9,r2
   46f80:	500f883a 	mov	r7,r10
   46f84:	3a000017 	ldw	r8,0(r7)
   46f88:	31800104 	addi	r6,r6,4
   46f8c:	39c00104 	addi	r7,r7,4
   46f90:	323fff15 	stw	r8,-4(r6)
   46f94:	327ffb1e 	bne	r6,r9,46f84 <memcpy+0xf8>
   46f98:	20800044 	addi	r2,r4,1
   46f9c:	1085883a 	add	r2,r2,r2
   46fa0:	1085883a 	add	r2,r2,r2
   46fa4:	017fff04 	movi	r5,-4
   46fa8:	18a5883a 	add	r18,r3,r2
   46fac:	50a7883a 	add	r19,r10,r2
   46fb0:	004a4cc0 	call	4a4cc <__mulsi3>
   46fb4:	1445883a 	add	r2,r2,r17
   46fb8:	980b883a 	mov	r5,r19
   46fbc:	9007883a 	mov	r3,r18
   46fc0:	003fc006 	br	46ec4 <memcpy+0x38>
   46fc4:	500b883a 	mov	r5,r10
   46fc8:	003fbe06 	br	46ec4 <memcpy+0x38>

00046fcc <memmove>:
   46fcc:	defffb04 	addi	sp,sp,-20
   46fd0:	dc000015 	stw	r16,0(sp)
   46fd4:	dfc00415 	stw	ra,16(sp)
   46fd8:	dcc00315 	stw	r19,12(sp)
   46fdc:	dc800215 	stw	r18,8(sp)
   46fe0:	dc400115 	stw	r17,4(sp)
   46fe4:	2021883a 	mov	r16,r4
   46fe8:	300f883a 	mov	r7,r6
   46fec:	2900122e 	bgeu	r5,r4,47038 <memmove+0x6c>
   46ff0:	2987883a 	add	r3,r5,r6
   46ff4:	20c0102e 	bgeu	r4,r3,47038 <memmove+0x6c>
   46ff8:	218b883a 	add	r5,r4,r6
   46ffc:	1989c83a 	sub	r4,r3,r6
   47000:	30000526 	beq	r6,zero,47018 <memmove+0x4c>
   47004:	18ffffc4 	addi	r3,r3,-1
   47008:	18800003 	ldbu	r2,0(r3)
   4700c:	297fffc4 	addi	r5,r5,-1
   47010:	28800005 	stb	r2,0(r5)
   47014:	193ffb1e 	bne	r3,r4,47004 <memmove+0x38>
   47018:	8005883a 	mov	r2,r16
   4701c:	dfc00417 	ldw	ra,16(sp)
   47020:	dcc00317 	ldw	r19,12(sp)
   47024:	dc800217 	ldw	r18,8(sp)
   47028:	dc400117 	ldw	r17,4(sp)
   4702c:	dc000017 	ldw	r16,0(sp)
   47030:	dec00504 	addi	sp,sp,20
   47034:	f800283a 	ret
   47038:	008003c4 	movi	r2,15
   4703c:	1180422e 	bgeu	r2,r6,47148 <memmove+0x17c>
   47040:	2c04b03a 	or	r2,r5,r16
   47044:	108000cc 	andi	r2,r2,3
   47048:	10003f1e 	bne	r2,zero,47148 <memmove+0x17c>
   4704c:	32bffc04 	addi	r10,r6,-16
   47050:	5014d13a 	srli	r10,r10,4
   47054:	81000404 	addi	r4,r16,16
   47058:	8007883a 	mov	r3,r16
   4705c:	5004913a 	slli	r2,r10,4
   47060:	280f883a 	mov	r7,r5
   47064:	2089883a 	add	r4,r4,r2
   47068:	38800017 	ldw	r2,0(r7)
   4706c:	18c00404 	addi	r3,r3,16
   47070:	39c00404 	addi	r7,r7,16
   47074:	18bffc15 	stw	r2,-16(r3)
   47078:	38bffd17 	ldw	r2,-12(r7)
   4707c:	18bffd15 	stw	r2,-12(r3)
   47080:	38bffe17 	ldw	r2,-8(r7)
   47084:	18bffe15 	stw	r2,-8(r3)
   47088:	38bfff17 	ldw	r2,-4(r7)
   4708c:	18bfff15 	stw	r2,-4(r3)
   47090:	193ff51e 	bne	r3,r4,47068 <memmove+0x9c>
   47094:	52800044 	addi	r10,r10,1
   47098:	5014913a 	slli	r10,r10,4
   4709c:	31c003cc 	andi	r7,r6,15
   470a0:	008000c4 	movi	r2,3
   470a4:	8287883a 	add	r3,r16,r10
   470a8:	2a95883a 	add	r10,r5,r10
   470ac:	11c0282e 	bgeu	r2,r7,47150 <memmove+0x184>
   470b0:	3c7fff04 	addi	r17,r7,-4
   470b4:	8808d0ba 	srli	r4,r17,2
   470b8:	1a400104 	addi	r9,r3,4
   470bc:	180d883a 	mov	r6,r3
   470c0:	2105883a 	add	r2,r4,r4
   470c4:	1085883a 	add	r2,r2,r2
   470c8:	4893883a 	add	r9,r9,r2
   470cc:	5005883a 	mov	r2,r10
   470d0:	12000017 	ldw	r8,0(r2)
   470d4:	31800104 	addi	r6,r6,4
   470d8:	10800104 	addi	r2,r2,4
   470dc:	323fff15 	stw	r8,-4(r6)
   470e0:	327ffb1e 	bne	r6,r9,470d0 <memmove+0x104>
   470e4:	20800044 	addi	r2,r4,1
   470e8:	1085883a 	add	r2,r2,r2
   470ec:	1085883a 	add	r2,r2,r2
   470f0:	017fff04 	movi	r5,-4
   470f4:	18a5883a 	add	r18,r3,r2
   470f8:	50a7883a 	add	r19,r10,r2
   470fc:	004a4cc0 	call	4a4cc <__mulsi3>
   47100:	144f883a 	add	r7,r2,r17
   47104:	980b883a 	mov	r5,r19
   47108:	9007883a 	mov	r3,r18
   4710c:	383fc226 	beq	r7,zero,47018 <memmove+0x4c>
   47110:	19cf883a 	add	r7,r3,r7
   47114:	29800003 	ldbu	r6,0(r5)
   47118:	18c00044 	addi	r3,r3,1
   4711c:	29400044 	addi	r5,r5,1
   47120:	19bfffc5 	stb	r6,-1(r3)
   47124:	19fffb1e 	bne	r3,r7,47114 <memmove+0x148>
   47128:	8005883a 	mov	r2,r16
   4712c:	dfc00417 	ldw	ra,16(sp)
   47130:	dcc00317 	ldw	r19,12(sp)
   47134:	dc800217 	ldw	r18,8(sp)
   47138:	dc400117 	ldw	r17,4(sp)
   4713c:	dc000017 	ldw	r16,0(sp)
   47140:	dec00504 	addi	sp,sp,20
   47144:	f800283a 	ret
   47148:	8007883a 	mov	r3,r16
   4714c:	003fef06 	br	4710c <memmove+0x140>
   47150:	500b883a 	mov	r5,r10
   47154:	003fed06 	br	4710c <memmove+0x140>

00047158 <_Balloc>:
   47158:	20801317 	ldw	r2,76(r4)
   4715c:	defffc04 	addi	sp,sp,-16
   47160:	dc400115 	stw	r17,4(sp)
   47164:	dc000015 	stw	r16,0(sp)
   47168:	dfc00315 	stw	ra,12(sp)
   4716c:	dc800215 	stw	r18,8(sp)
   47170:	2023883a 	mov	r17,r4
   47174:	2821883a 	mov	r16,r5
   47178:	10000f26 	beq	r2,zero,471b8 <_Balloc+0x60>
   4717c:	8407883a 	add	r3,r16,r16
   47180:	18c7883a 	add	r3,r3,r3
   47184:	10c7883a 	add	r3,r2,r3
   47188:	18800017 	ldw	r2,0(r3)
   4718c:	10001126 	beq	r2,zero,471d4 <_Balloc+0x7c>
   47190:	11000017 	ldw	r4,0(r2)
   47194:	19000015 	stw	r4,0(r3)
   47198:	10000415 	stw	zero,16(r2)
   4719c:	10000315 	stw	zero,12(r2)
   471a0:	dfc00317 	ldw	ra,12(sp)
   471a4:	dc800217 	ldw	r18,8(sp)
   471a8:	dc400117 	ldw	r17,4(sp)
   471ac:	dc000017 	ldw	r16,0(sp)
   471b0:	dec00404 	addi	sp,sp,16
   471b4:	f800283a 	ret
   471b8:	01400104 	movi	r5,4
   471bc:	01800404 	movi	r6,16
   471c0:	00489180 	call	48918 <_calloc_r>
   471c4:	88801315 	stw	r2,76(r17)
   471c8:	103fec1e 	bne	r2,zero,4717c <_Balloc+0x24>
   471cc:	0005883a 	mov	r2,zero
   471d0:	003ff306 	br	471a0 <_Balloc+0x48>
   471d4:	01400044 	movi	r5,1
   471d8:	2c24983a 	sll	r18,r5,r16
   471dc:	8809883a 	mov	r4,r17
   471e0:	91800144 	addi	r6,r18,5
   471e4:	318d883a 	add	r6,r6,r6
   471e8:	318d883a 	add	r6,r6,r6
   471ec:	00489180 	call	48918 <_calloc_r>
   471f0:	103ff626 	beq	r2,zero,471cc <_Balloc+0x74>
   471f4:	14000115 	stw	r16,4(r2)
   471f8:	14800215 	stw	r18,8(r2)
   471fc:	003fe606 	br	47198 <_Balloc+0x40>

00047200 <_Bfree>:
   47200:	28000826 	beq	r5,zero,47224 <_Bfree+0x24>
   47204:	28c00117 	ldw	r3,4(r5)
   47208:	20801317 	ldw	r2,76(r4)
   4720c:	18c7883a 	add	r3,r3,r3
   47210:	18c7883a 	add	r3,r3,r3
   47214:	10c5883a 	add	r2,r2,r3
   47218:	10c00017 	ldw	r3,0(r2)
   4721c:	28c00015 	stw	r3,0(r5)
   47220:	11400015 	stw	r5,0(r2)
   47224:	f800283a 	ret

00047228 <__multadd>:
   47228:	defff604 	addi	sp,sp,-40
   4722c:	dd400515 	stw	r21,20(sp)
   47230:	2d400417 	ldw	r21,16(r5)
   47234:	df000815 	stw	fp,32(sp)
   47238:	ddc00715 	stw	r23,28(sp)
   4723c:	dd800615 	stw	r22,24(sp)
   47240:	dd000415 	stw	r20,16(sp)
   47244:	dc400115 	stw	r17,4(sp)
   47248:	dc000015 	stw	r16,0(sp)
   4724c:	dfc00915 	stw	ra,36(sp)
   47250:	dcc00315 	stw	r19,12(sp)
   47254:	dc800215 	stw	r18,8(sp)
   47258:	282d883a 	mov	r22,r5
   4725c:	202f883a 	mov	r23,r4
   47260:	3029883a 	mov	r20,r6
   47264:	3839883a 	mov	fp,r7
   47268:	2c000504 	addi	r16,r5,20
   4726c:	0023883a 	mov	r17,zero
   47270:	84c00017 	ldw	r19,0(r16)
   47274:	a00b883a 	mov	r5,r20
   47278:	8c400044 	addi	r17,r17,1
   4727c:	993fffcc 	andi	r4,r19,65535
   47280:	004a4cc0 	call	4a4cc <__mulsi3>
   47284:	1725883a 	add	r18,r2,fp
   47288:	9808d43a 	srli	r4,r19,16
   4728c:	9026d43a 	srli	r19,r18,16
   47290:	a00b883a 	mov	r5,r20
   47294:	004a4cc0 	call	4a4cc <__mulsi3>
   47298:	988f883a 	add	r7,r19,r2
   4729c:	3804943a 	slli	r2,r7,16
   472a0:	94bfffcc 	andi	r18,r18,65535
   472a4:	3838d43a 	srli	fp,r7,16
   472a8:	14a5883a 	add	r18,r2,r18
   472ac:	84800015 	stw	r18,0(r16)
   472b0:	84000104 	addi	r16,r16,4
   472b4:	8d7fee16 	blt	r17,r21,47270 <__multadd+0x48>
   472b8:	e0000926 	beq	fp,zero,472e0 <__multadd+0xb8>
   472bc:	b0800217 	ldw	r2,8(r22)
   472c0:	a880140e 	bge	r21,r2,47314 <__multadd+0xec>
   472c4:	a8800144 	addi	r2,r21,5
   472c8:	1085883a 	add	r2,r2,r2
   472cc:	1085883a 	add	r2,r2,r2
   472d0:	b085883a 	add	r2,r22,r2
   472d4:	ad400044 	addi	r21,r21,1
   472d8:	17000015 	stw	fp,0(r2)
   472dc:	b5400415 	stw	r21,16(r22)
   472e0:	b005883a 	mov	r2,r22
   472e4:	dfc00917 	ldw	ra,36(sp)
   472e8:	df000817 	ldw	fp,32(sp)
   472ec:	ddc00717 	ldw	r23,28(sp)
   472f0:	dd800617 	ldw	r22,24(sp)
   472f4:	dd400517 	ldw	r21,20(sp)
   472f8:	dd000417 	ldw	r20,16(sp)
   472fc:	dcc00317 	ldw	r19,12(sp)
   47300:	dc800217 	ldw	r18,8(sp)
   47304:	dc400117 	ldw	r17,4(sp)
   47308:	dc000017 	ldw	r16,0(sp)
   4730c:	dec00a04 	addi	sp,sp,40
   47310:	f800283a 	ret
   47314:	b1400117 	ldw	r5,4(r22)
   47318:	b809883a 	mov	r4,r23
   4731c:	29400044 	addi	r5,r5,1
   47320:	00471580 	call	47158 <_Balloc>
   47324:	b1800417 	ldw	r6,16(r22)
   47328:	b1400304 	addi	r5,r22,12
   4732c:	11000304 	addi	r4,r2,12
   47330:	31800084 	addi	r6,r6,2
   47334:	318d883a 	add	r6,r6,r6
   47338:	318d883a 	add	r6,r6,r6
   4733c:	1021883a 	mov	r16,r2
   47340:	0046e8c0 	call	46e8c <memcpy>
   47344:	b0c00117 	ldw	r3,4(r22)
   47348:	b8801317 	ldw	r2,76(r23)
   4734c:	18c7883a 	add	r3,r3,r3
   47350:	18c7883a 	add	r3,r3,r3
   47354:	10c5883a 	add	r2,r2,r3
   47358:	10c00017 	ldw	r3,0(r2)
   4735c:	b0c00015 	stw	r3,0(r22)
   47360:	15800015 	stw	r22,0(r2)
   47364:	802d883a 	mov	r22,r16
   47368:	003fd606 	br	472c4 <__multadd+0x9c>

0004736c <__s2b>:
   4736c:	defff904 	addi	sp,sp,-28
   47370:	dd000415 	stw	r20,16(sp)
   47374:	dc400115 	stw	r17,4(sp)
   47378:	2829883a 	mov	r20,r5
   4737c:	2023883a 	mov	r17,r4
   47380:	01400244 	movi	r5,9
   47384:	39000204 	addi	r4,r7,8
   47388:	dcc00315 	stw	r19,12(sp)
   4738c:	dc800215 	stw	r18,8(sp)
   47390:	dfc00615 	stw	ra,24(sp)
   47394:	dd400515 	stw	r21,20(sp)
   47398:	dc000015 	stw	r16,0(sp)
   4739c:	3825883a 	mov	r18,r7
   473a0:	3027883a 	mov	r19,r6
   473a4:	004a4100 	call	4a410 <__divsi3>
   473a8:	00c00044 	movi	r3,1
   473ac:	000b883a 	mov	r5,zero
   473b0:	1880030e 	bge	r3,r2,473c0 <__s2b+0x54>
   473b4:	18c7883a 	add	r3,r3,r3
   473b8:	29400044 	addi	r5,r5,1
   473bc:	18bffd16 	blt	r3,r2,473b4 <__s2b+0x48>
   473c0:	8809883a 	mov	r4,r17
   473c4:	00471580 	call	47158 <_Balloc>
   473c8:	d8c00717 	ldw	r3,28(sp)
   473cc:	10c00515 	stw	r3,20(r2)
   473d0:	00c00044 	movi	r3,1
   473d4:	10c00415 	stw	r3,16(r2)
   473d8:	00c00244 	movi	r3,9
   473dc:	1cc0210e 	bge	r3,r19,47464 <__s2b+0xf8>
   473e0:	a0eb883a 	add	r21,r20,r3
   473e4:	a821883a 	mov	r16,r21
   473e8:	a4e9883a 	add	r20,r20,r19
   473ec:	81c00007 	ldb	r7,0(r16)
   473f0:	8809883a 	mov	r4,r17
   473f4:	84000044 	addi	r16,r16,1
   473f8:	100b883a 	mov	r5,r2
   473fc:	01800284 	movi	r6,10
   47400:	39fff404 	addi	r7,r7,-48
   47404:	00472280 	call	47228 <__multadd>
   47408:	853ff81e 	bne	r16,r20,473ec <__s2b+0x80>
   4740c:	ace1883a 	add	r16,r21,r19
   47410:	843ffe04 	addi	r16,r16,-8
   47414:	9c800a0e 	bge	r19,r18,47440 <__s2b+0xd4>
   47418:	94e5c83a 	sub	r18,r18,r19
   4741c:	84a5883a 	add	r18,r16,r18
   47420:	81c00007 	ldb	r7,0(r16)
   47424:	8809883a 	mov	r4,r17
   47428:	84000044 	addi	r16,r16,1
   4742c:	100b883a 	mov	r5,r2
   47430:	01800284 	movi	r6,10
   47434:	39fff404 	addi	r7,r7,-48
   47438:	00472280 	call	47228 <__multadd>
   4743c:	84bff81e 	bne	r16,r18,47420 <__s2b+0xb4>
   47440:	dfc00617 	ldw	ra,24(sp)
   47444:	dd400517 	ldw	r21,20(sp)
   47448:	dd000417 	ldw	r20,16(sp)
   4744c:	dcc00317 	ldw	r19,12(sp)
   47450:	dc800217 	ldw	r18,8(sp)
   47454:	dc400117 	ldw	r17,4(sp)
   47458:	dc000017 	ldw	r16,0(sp)
   4745c:	dec00704 	addi	sp,sp,28
   47460:	f800283a 	ret
   47464:	a4000284 	addi	r16,r20,10
   47468:	1827883a 	mov	r19,r3
   4746c:	003fe906 	br	47414 <__s2b+0xa8>

00047470 <__hi0bits>:
   47470:	20bfffec 	andhi	r2,r4,65535
   47474:	1000141e 	bne	r2,zero,474c8 <__hi0bits+0x58>
   47478:	2008943a 	slli	r4,r4,16
   4747c:	00800404 	movi	r2,16
   47480:	20ffc02c 	andhi	r3,r4,65280
   47484:	1800021e 	bne	r3,zero,47490 <__hi0bits+0x20>
   47488:	2008923a 	slli	r4,r4,8
   4748c:	10800204 	addi	r2,r2,8
   47490:	20fc002c 	andhi	r3,r4,61440
   47494:	1800021e 	bne	r3,zero,474a0 <__hi0bits+0x30>
   47498:	2008913a 	slli	r4,r4,4
   4749c:	10800104 	addi	r2,r2,4
   474a0:	20f0002c 	andhi	r3,r4,49152
   474a4:	1800031e 	bne	r3,zero,474b4 <__hi0bits+0x44>
   474a8:	2109883a 	add	r4,r4,r4
   474ac:	10800084 	addi	r2,r2,2
   474b0:	2109883a 	add	r4,r4,r4
   474b4:	20000316 	blt	r4,zero,474c4 <__hi0bits+0x54>
   474b8:	2110002c 	andhi	r4,r4,16384
   474bc:	2000041e 	bne	r4,zero,474d0 <__hi0bits+0x60>
   474c0:	00800804 	movi	r2,32
   474c4:	f800283a 	ret
   474c8:	0005883a 	mov	r2,zero
   474cc:	003fec06 	br	47480 <__hi0bits+0x10>
   474d0:	10800044 	addi	r2,r2,1
   474d4:	f800283a 	ret

000474d8 <__lo0bits>:
   474d8:	20c00017 	ldw	r3,0(r4)
   474dc:	188001cc 	andi	r2,r3,7
   474e0:	10000826 	beq	r2,zero,47504 <__lo0bits+0x2c>
   474e4:	1880004c 	andi	r2,r3,1
   474e8:	1000211e 	bne	r2,zero,47570 <__lo0bits+0x98>
   474ec:	1880008c 	andi	r2,r3,2
   474f0:	1000211e 	bne	r2,zero,47578 <__lo0bits+0xa0>
   474f4:	1806d0ba 	srli	r3,r3,2
   474f8:	00800084 	movi	r2,2
   474fc:	20c00015 	stw	r3,0(r4)
   47500:	f800283a 	ret
   47504:	18bfffcc 	andi	r2,r3,65535
   47508:	10001326 	beq	r2,zero,47558 <__lo0bits+0x80>
   4750c:	0005883a 	mov	r2,zero
   47510:	19403fcc 	andi	r5,r3,255
   47514:	2800021e 	bne	r5,zero,47520 <__lo0bits+0x48>
   47518:	1806d23a 	srli	r3,r3,8
   4751c:	10800204 	addi	r2,r2,8
   47520:	194003cc 	andi	r5,r3,15
   47524:	2800021e 	bne	r5,zero,47530 <__lo0bits+0x58>
   47528:	1806d13a 	srli	r3,r3,4
   4752c:	10800104 	addi	r2,r2,4
   47530:	194000cc 	andi	r5,r3,3
   47534:	2800021e 	bne	r5,zero,47540 <__lo0bits+0x68>
   47538:	1806d0ba 	srli	r3,r3,2
   4753c:	10800084 	addi	r2,r2,2
   47540:	1940004c 	andi	r5,r3,1
   47544:	2800081e 	bne	r5,zero,47568 <__lo0bits+0x90>
   47548:	1806d07a 	srli	r3,r3,1
   4754c:	1800051e 	bne	r3,zero,47564 <__lo0bits+0x8c>
   47550:	00800804 	movi	r2,32
   47554:	f800283a 	ret
   47558:	1806d43a 	srli	r3,r3,16
   4755c:	00800404 	movi	r2,16
   47560:	003feb06 	br	47510 <__lo0bits+0x38>
   47564:	10800044 	addi	r2,r2,1
   47568:	20c00015 	stw	r3,0(r4)
   4756c:	f800283a 	ret
   47570:	0005883a 	mov	r2,zero
   47574:	f800283a 	ret
   47578:	1806d07a 	srli	r3,r3,1
   4757c:	00800044 	movi	r2,1
   47580:	20c00015 	stw	r3,0(r4)
   47584:	f800283a 	ret

00047588 <__i2b>:
   47588:	defffd04 	addi	sp,sp,-12
   4758c:	dc000015 	stw	r16,0(sp)
   47590:	04000044 	movi	r16,1
   47594:	dc400115 	stw	r17,4(sp)
   47598:	2823883a 	mov	r17,r5
   4759c:	800b883a 	mov	r5,r16
   475a0:	dfc00215 	stw	ra,8(sp)
   475a4:	00471580 	call	47158 <_Balloc>
   475a8:	14400515 	stw	r17,20(r2)
   475ac:	14000415 	stw	r16,16(r2)
   475b0:	dfc00217 	ldw	ra,8(sp)
   475b4:	dc400117 	ldw	r17,4(sp)
   475b8:	dc000017 	ldw	r16,0(sp)
   475bc:	dec00304 	addi	sp,sp,12
   475c0:	f800283a 	ret

000475c4 <__multiply>:
   475c4:	defff004 	addi	sp,sp,-64
   475c8:	dc800815 	stw	r18,32(sp)
   475cc:	dc400715 	stw	r17,28(sp)
   475d0:	34800417 	ldw	r18,16(r6)
   475d4:	2c400417 	ldw	r17,16(r5)
   475d8:	ddc00d15 	stw	r23,52(sp)
   475dc:	dc000615 	stw	r16,24(sp)
   475e0:	dfc00f15 	stw	ra,60(sp)
   475e4:	df000e15 	stw	fp,56(sp)
   475e8:	dd800c15 	stw	r22,48(sp)
   475ec:	dd400b15 	stw	r21,44(sp)
   475f0:	dd000a15 	stw	r20,40(sp)
   475f4:	dcc00915 	stw	r19,36(sp)
   475f8:	2821883a 	mov	r16,r5
   475fc:	302f883a 	mov	r23,r6
   47600:	8c80050e 	bge	r17,r18,47618 <__multiply+0x54>
   47604:	8807883a 	mov	r3,r17
   47608:	3021883a 	mov	r16,r6
   4760c:	9023883a 	mov	r17,r18
   47610:	282f883a 	mov	r23,r5
   47614:	1825883a 	mov	r18,r3
   47618:	80800217 	ldw	r2,8(r16)
   4761c:	8c87883a 	add	r3,r17,r18
   47620:	d8c00115 	stw	r3,4(sp)
   47624:	81400117 	ldw	r5,4(r16)
   47628:	10c0010e 	bge	r2,r3,47630 <__multiply+0x6c>
   4762c:	29400044 	addi	r5,r5,1
   47630:	00471580 	call	47158 <_Balloc>
   47634:	d8c00117 	ldw	r3,4(sp)
   47638:	d8800515 	stw	r2,20(sp)
   4763c:	14c00504 	addi	r19,r2,20
   47640:	1d400144 	addi	r21,r3,5
   47644:	ad6b883a 	add	r21,r21,r21
   47648:	ad6b883a 	add	r21,r21,r21
   4764c:	156b883a 	add	r21,r2,r21
   47650:	dd400215 	stw	r21,8(sp)
   47654:	9805883a 	mov	r2,r19
   47658:	9d40042e 	bgeu	r19,r21,4766c <__multiply+0xa8>
   4765c:	d8c00217 	ldw	r3,8(sp)
   47660:	10000015 	stw	zero,0(r2)
   47664:	10800104 	addi	r2,r2,4
   47668:	10fffc36 	bltu	r2,r3,4765c <__multiply+0x98>
   4766c:	94800144 	addi	r18,r18,5
   47670:	94a5883a 	add	r18,r18,r18
   47674:	94ad883a 	add	r22,r18,r18
   47678:	8c400144 	addi	r17,r17,5
   4767c:	8c63883a 	add	r17,r17,r17
   47680:	bdad883a 	add	r22,r23,r22
   47684:	80c00504 	addi	r3,r16,20
   47688:	8c63883a 	add	r17,r17,r17
   4768c:	bc800504 	addi	r18,r23,20
   47690:	dd800315 	stw	r22,12(sp)
   47694:	d8c00415 	stw	r3,16(sp)
   47698:	dcc00015 	stw	r19,0(sp)
   4769c:	8463883a 	add	r17,r16,r17
   476a0:	9580412e 	bgeu	r18,r22,477a8 <__multiply+0x1e4>
   476a4:	90800017 	ldw	r2,0(r18)
   476a8:	173fffcc 	andi	fp,r2,65535
   476ac:	e0001a26 	beq	fp,zero,47718 <__multiply+0x154>
   476b0:	dd000017 	ldw	r20,0(sp)
   476b4:	dd800417 	ldw	r22,16(sp)
   476b8:	002b883a 	mov	r21,zero
   476bc:	b4c00017 	ldw	r19,0(r22)
   476c0:	a4000017 	ldw	r16,0(r20)
   476c4:	e00b883a 	mov	r5,fp
   476c8:	993fffcc 	andi	r4,r19,65535
   476cc:	004a4cc0 	call	4a4cc <__mulsi3>
   476d0:	9808d43a 	srli	r4,r19,16
   476d4:	817fffcc 	andi	r5,r16,65535
   476d8:	1145883a 	add	r2,r2,r5
   476dc:	e00b883a 	mov	r5,fp
   476e0:	1567883a 	add	r19,r2,r21
   476e4:	8020d43a 	srli	r16,r16,16
   476e8:	004a4cc0 	call	4a4cc <__mulsi3>
   476ec:	9808d43a 	srli	r4,r19,16
   476f0:	1405883a 	add	r2,r2,r16
   476f4:	a4c0000d 	sth	r19,0(r20)
   476f8:	110f883a 	add	r7,r2,r4
   476fc:	a1c0008d 	sth	r7,2(r20)
   47700:	b5800104 	addi	r22,r22,4
   47704:	382ad43a 	srli	r21,r7,16
   47708:	a5000104 	addi	r20,r20,4
   4770c:	b47feb36 	bltu	r22,r17,476bc <__multiply+0xf8>
   47710:	a5400015 	stw	r21,0(r20)
   47714:	90800017 	ldw	r2,0(r18)
   47718:	1038d43a 	srli	fp,r2,16
   4771c:	e0001c26 	beq	fp,zero,47790 <__multiply+0x1cc>
   47720:	d8c00017 	ldw	r3,0(sp)
   47724:	dd000417 	ldw	r20,16(sp)
   47728:	002b883a 	mov	r21,zero
   4772c:	1d800017 	ldw	r22,0(r3)
   47730:	182f883a 	mov	r23,r3
   47734:	b021883a 	mov	r16,r22
   47738:	a4c00017 	ldw	r19,0(r20)
   4773c:	8020d43a 	srli	r16,r16,16
   47740:	e00b883a 	mov	r5,fp
   47744:	993fffcc 	andi	r4,r19,65535
   47748:	004a4cc0 	call	4a4cc <__mulsi3>
   4774c:	1405883a 	add	r2,r2,r16
   47750:	9808d43a 	srli	r4,r19,16
   47754:	156b883a 	add	r21,r2,r21
   47758:	bdc00104 	addi	r23,r23,4
   4775c:	bdbfff0d 	sth	r22,-4(r23)
   47760:	bd7fff8d 	sth	r21,-2(r23)
   47764:	bc000017 	ldw	r16,0(r23)
   47768:	e00b883a 	mov	r5,fp
   4776c:	004a4cc0 	call	4a4cc <__mulsi3>
   47770:	a80ed43a 	srli	r7,r21,16
   47774:	813fffcc 	andi	r4,r16,65535
   47778:	2085883a 	add	r2,r4,r2
   4777c:	11ed883a 	add	r22,r2,r7
   47780:	a5000104 	addi	r20,r20,4
   47784:	b02ad43a 	srli	r21,r22,16
   47788:	a47feb36 	bltu	r20,r17,47738 <__multiply+0x174>
   4778c:	bd800015 	stw	r22,0(r23)
   47790:	d8c00017 	ldw	r3,0(sp)
   47794:	94800104 	addi	r18,r18,4
   47798:	18c00104 	addi	r3,r3,4
   4779c:	d8c00015 	stw	r3,0(sp)
   477a0:	d8c00317 	ldw	r3,12(sp)
   477a4:	90ffbf36 	bltu	r18,r3,476a4 <__multiply+0xe0>
   477a8:	d8c00117 	ldw	r3,4(sp)
   477ac:	00c00c0e 	bge	zero,r3,477e0 <__multiply+0x21c>
   477b0:	d8c00217 	ldw	r3,8(sp)
   477b4:	18bfff17 	ldw	r2,-4(r3)
   477b8:	1d7fff04 	addi	r21,r3,-4
   477bc:	10000326 	beq	r2,zero,477cc <__multiply+0x208>
   477c0:	00000706 	br	477e0 <__multiply+0x21c>
   477c4:	a8800017 	ldw	r2,0(r21)
   477c8:	1000051e 	bne	r2,zero,477e0 <__multiply+0x21c>
   477cc:	d8c00117 	ldw	r3,4(sp)
   477d0:	ad7fff04 	addi	r21,r21,-4
   477d4:	18ffffc4 	addi	r3,r3,-1
   477d8:	d8c00115 	stw	r3,4(sp)
   477dc:	183ff91e 	bne	r3,zero,477c4 <__multiply+0x200>
   477e0:	d8800517 	ldw	r2,20(sp)
   477e4:	d8c00117 	ldw	r3,4(sp)
   477e8:	10c00415 	stw	r3,16(r2)
   477ec:	dfc00f17 	ldw	ra,60(sp)
   477f0:	df000e17 	ldw	fp,56(sp)
   477f4:	ddc00d17 	ldw	r23,52(sp)
   477f8:	dd800c17 	ldw	r22,48(sp)
   477fc:	dd400b17 	ldw	r21,44(sp)
   47800:	dd000a17 	ldw	r20,40(sp)
   47804:	dcc00917 	ldw	r19,36(sp)
   47808:	dc800817 	ldw	r18,32(sp)
   4780c:	dc400717 	ldw	r17,28(sp)
   47810:	dc000617 	ldw	r16,24(sp)
   47814:	dec01004 	addi	sp,sp,64
   47818:	f800283a 	ret

0004781c <__pow5mult>:
   4781c:	defffb04 	addi	sp,sp,-20
   47820:	dcc00315 	stw	r19,12(sp)
   47824:	dc800215 	stw	r18,8(sp)
   47828:	dc000015 	stw	r16,0(sp)
   4782c:	dfc00415 	stw	ra,16(sp)
   47830:	dc400115 	stw	r17,4(sp)
   47834:	308000cc 	andi	r2,r6,3
   47838:	3021883a 	mov	r16,r6
   4783c:	2027883a 	mov	r19,r4
   47840:	2825883a 	mov	r18,r5
   47844:	10002e1e 	bne	r2,zero,47900 <__pow5mult+0xe4>
   47848:	8021d0ba 	srai	r16,r16,2
   4784c:	80001a26 	beq	r16,zero,478b8 <__pow5mult+0x9c>
   47850:	9c401217 	ldw	r17,72(r19)
   47854:	8800061e 	bne	r17,zero,47870 <__pow5mult+0x54>
   47858:	00003406 	br	4792c <__pow5mult+0x110>
   4785c:	8021d07a 	srai	r16,r16,1
   47860:	80001526 	beq	r16,zero,478b8 <__pow5mult+0x9c>
   47864:	88c00017 	ldw	r3,0(r17)
   47868:	18001b26 	beq	r3,zero,478d8 <__pow5mult+0xbc>
   4786c:	1823883a 	mov	r17,r3
   47870:	80c0004c 	andi	r3,r16,1
   47874:	183ff926 	beq	r3,zero,4785c <__pow5mult+0x40>
   47878:	900b883a 	mov	r5,r18
   4787c:	880d883a 	mov	r6,r17
   47880:	9809883a 	mov	r4,r19
   47884:	00475c40 	call	475c4 <__multiply>
   47888:	90001b26 	beq	r18,zero,478f8 <__pow5mult+0xdc>
   4788c:	91000117 	ldw	r4,4(r18)
   47890:	98c01317 	ldw	r3,76(r19)
   47894:	8021d07a 	srai	r16,r16,1
   47898:	2109883a 	add	r4,r4,r4
   4789c:	2109883a 	add	r4,r4,r4
   478a0:	1907883a 	add	r3,r3,r4
   478a4:	19000017 	ldw	r4,0(r3)
   478a8:	91000015 	stw	r4,0(r18)
   478ac:	1c800015 	stw	r18,0(r3)
   478b0:	1025883a 	mov	r18,r2
   478b4:	803feb1e 	bne	r16,zero,47864 <__pow5mult+0x48>
   478b8:	9005883a 	mov	r2,r18
   478bc:	dfc00417 	ldw	ra,16(sp)
   478c0:	dcc00317 	ldw	r19,12(sp)
   478c4:	dc800217 	ldw	r18,8(sp)
   478c8:	dc400117 	ldw	r17,4(sp)
   478cc:	dc000017 	ldw	r16,0(sp)
   478d0:	dec00504 	addi	sp,sp,20
   478d4:	f800283a 	ret
   478d8:	880b883a 	mov	r5,r17
   478dc:	880d883a 	mov	r6,r17
   478e0:	9809883a 	mov	r4,r19
   478e4:	00475c40 	call	475c4 <__multiply>
   478e8:	88800015 	stw	r2,0(r17)
   478ec:	10000015 	stw	zero,0(r2)
   478f0:	1023883a 	mov	r17,r2
   478f4:	003fde06 	br	47870 <__pow5mult+0x54>
   478f8:	1025883a 	mov	r18,r2
   478fc:	003fd706 	br	4785c <__pow5mult+0x40>
   47900:	10bfffc4 	addi	r2,r2,-1
   47904:	1085883a 	add	r2,r2,r2
   47908:	00c00174 	movhi	r3,5
   4790c:	18f84104 	addi	r3,r3,-7932
   47910:	1085883a 	add	r2,r2,r2
   47914:	1885883a 	add	r2,r3,r2
   47918:	11800017 	ldw	r6,0(r2)
   4791c:	000f883a 	mov	r7,zero
   47920:	00472280 	call	47228 <__multadd>
   47924:	1025883a 	mov	r18,r2
   47928:	003fc706 	br	47848 <__pow5mult+0x2c>
   4792c:	9809883a 	mov	r4,r19
   47930:	01409c44 	movi	r5,625
   47934:	00475880 	call	47588 <__i2b>
   47938:	98801215 	stw	r2,72(r19)
   4793c:	1023883a 	mov	r17,r2
   47940:	10000015 	stw	zero,0(r2)
   47944:	003fca06 	br	47870 <__pow5mult+0x54>

00047948 <__lshift>:
   47948:	defff904 	addi	sp,sp,-28
   4794c:	dd400515 	stw	r21,20(sp)
   47950:	dc400115 	stw	r17,4(sp)
   47954:	2d400417 	ldw	r21,16(r5)
   47958:	3023d17a 	srai	r17,r6,5
   4795c:	28800217 	ldw	r2,8(r5)
   47960:	dd000415 	stw	r20,16(sp)
   47964:	8d6b883a 	add	r21,r17,r21
   47968:	dcc00315 	stw	r19,12(sp)
   4796c:	dc800215 	stw	r18,8(sp)
   47970:	dc000015 	stw	r16,0(sp)
   47974:	dfc00615 	stw	ra,24(sp)
   47978:	ac000044 	addi	r16,r21,1
   4797c:	2825883a 	mov	r18,r5
   47980:	3029883a 	mov	r20,r6
   47984:	2027883a 	mov	r19,r4
   47988:	29400117 	ldw	r5,4(r5)
   4798c:	1400030e 	bge	r2,r16,4799c <__lshift+0x54>
   47990:	1085883a 	add	r2,r2,r2
   47994:	29400044 	addi	r5,r5,1
   47998:	143ffd16 	blt	r2,r16,47990 <__lshift+0x48>
   4799c:	9809883a 	mov	r4,r19
   479a0:	00471580 	call	47158 <_Balloc>
   479a4:	10c00504 	addi	r3,r2,20
   479a8:	0440090e 	bge	zero,r17,479d0 <__lshift+0x88>
   479ac:	000f883a 	mov	r7,zero
   479b0:	18000015 	stw	zero,0(r3)
   479b4:	39c00044 	addi	r7,r7,1
   479b8:	18c00104 	addi	r3,r3,4
   479bc:	3c7ffc1e 	bne	r7,r17,479b0 <__lshift+0x68>
   479c0:	38c00144 	addi	r3,r7,5
   479c4:	18c7883a 	add	r3,r3,r3
   479c8:	18c7883a 	add	r3,r3,r3
   479cc:	10c7883a 	add	r3,r2,r3
   479d0:	92000417 	ldw	r8,16(r18)
   479d4:	a18007cc 	andi	r6,r20,31
   479d8:	91c00504 	addi	r7,r18,20
   479dc:	42000144 	addi	r8,r8,5
   479e0:	4211883a 	add	r8,r8,r8
   479e4:	4211883a 	add	r8,r8,r8
   479e8:	9211883a 	add	r8,r18,r8
   479ec:	30002226 	beq	r6,zero,47a78 <__lshift+0x130>
   479f0:	02800804 	movi	r10,32
   479f4:	5195c83a 	sub	r10,r10,r6
   479f8:	000b883a 	mov	r5,zero
   479fc:	3a400017 	ldw	r9,0(r7)
   47a00:	18c00104 	addi	r3,r3,4
   47a04:	39c00104 	addi	r7,r7,4
   47a08:	4992983a 	sll	r9,r9,r6
   47a0c:	2a4ab03a 	or	r5,r5,r9
   47a10:	197fff15 	stw	r5,-4(r3)
   47a14:	397fff17 	ldw	r5,-4(r7)
   47a18:	2a8ad83a 	srl	r5,r5,r10
   47a1c:	3a3ff736 	bltu	r7,r8,479fc <__lshift+0xb4>
   47a20:	19400015 	stw	r5,0(r3)
   47a24:	28000126 	beq	r5,zero,47a2c <__lshift+0xe4>
   47a28:	ac000084 	addi	r16,r21,2
   47a2c:	91000117 	ldw	r4,4(r18)
   47a30:	98c01317 	ldw	r3,76(r19)
   47a34:	843fffc4 	addi	r16,r16,-1
   47a38:	2109883a 	add	r4,r4,r4
   47a3c:	2109883a 	add	r4,r4,r4
   47a40:	1907883a 	add	r3,r3,r4
   47a44:	19000017 	ldw	r4,0(r3)
   47a48:	14000415 	stw	r16,16(r2)
   47a4c:	91000015 	stw	r4,0(r18)
   47a50:	1c800015 	stw	r18,0(r3)
   47a54:	dfc00617 	ldw	ra,24(sp)
   47a58:	dd400517 	ldw	r21,20(sp)
   47a5c:	dd000417 	ldw	r20,16(sp)
   47a60:	dcc00317 	ldw	r19,12(sp)
   47a64:	dc800217 	ldw	r18,8(sp)
   47a68:	dc400117 	ldw	r17,4(sp)
   47a6c:	dc000017 	ldw	r16,0(sp)
   47a70:	dec00704 	addi	sp,sp,28
   47a74:	f800283a 	ret
   47a78:	39400017 	ldw	r5,0(r7)
   47a7c:	18c00104 	addi	r3,r3,4
   47a80:	39c00104 	addi	r7,r7,4
   47a84:	197fff15 	stw	r5,-4(r3)
   47a88:	3a3fe82e 	bgeu	r7,r8,47a2c <__lshift+0xe4>
   47a8c:	39400017 	ldw	r5,0(r7)
   47a90:	18c00104 	addi	r3,r3,4
   47a94:	39c00104 	addi	r7,r7,4
   47a98:	197fff15 	stw	r5,-4(r3)
   47a9c:	3a3ff636 	bltu	r7,r8,47a78 <__lshift+0x130>
   47aa0:	003fe206 	br	47a2c <__lshift+0xe4>

00047aa4 <__mcmp>:
   47aa4:	20800417 	ldw	r2,16(r4)
   47aa8:	28c00417 	ldw	r3,16(r5)
   47aac:	10c5c83a 	sub	r2,r2,r3
   47ab0:	10000f1e 	bne	r2,zero,47af0 <__mcmp+0x4c>
   47ab4:	18c00144 	addi	r3,r3,5
   47ab8:	18c7883a 	add	r3,r3,r3
   47abc:	18c7883a 	add	r3,r3,r3
   47ac0:	21c00504 	addi	r7,r4,20
   47ac4:	28cb883a 	add	r5,r5,r3
   47ac8:	20c9883a 	add	r4,r4,r3
   47acc:	213fff04 	addi	r4,r4,-4
   47ad0:	297fff04 	addi	r5,r5,-4
   47ad4:	21800017 	ldw	r6,0(r4)
   47ad8:	28c00017 	ldw	r3,0(r5)
   47adc:	30c0021e 	bne	r6,r3,47ae8 <__mcmp+0x44>
   47ae0:	393ffa36 	bltu	r7,r4,47acc <__mcmp+0x28>
   47ae4:	f800283a 	ret
   47ae8:	30c00236 	bltu	r6,r3,47af4 <__mcmp+0x50>
   47aec:	00800044 	movi	r2,1
   47af0:	f800283a 	ret
   47af4:	00bfffc4 	movi	r2,-1
   47af8:	f800283a 	ret

00047afc <__mdiff>:
   47afc:	defffb04 	addi	sp,sp,-20
   47b00:	dc000015 	stw	r16,0(sp)
   47b04:	2821883a 	mov	r16,r5
   47b08:	dc800215 	stw	r18,8(sp)
   47b0c:	300b883a 	mov	r5,r6
   47b10:	2025883a 	mov	r18,r4
   47b14:	8009883a 	mov	r4,r16
   47b18:	dc400115 	stw	r17,4(sp)
   47b1c:	dfc00415 	stw	ra,16(sp)
   47b20:	dcc00315 	stw	r19,12(sp)
   47b24:	3023883a 	mov	r17,r6
   47b28:	0047aa40 	call	47aa4 <__mcmp>
   47b2c:	10005026 	beq	r2,zero,47c70 <__mdiff+0x174>
   47b30:	10004a16 	blt	r2,zero,47c5c <__mdiff+0x160>
   47b34:	0027883a 	mov	r19,zero
   47b38:	81400117 	ldw	r5,4(r16)
   47b3c:	9009883a 	mov	r4,r18
   47b40:	00471580 	call	47158 <_Balloc>
   47b44:	82400417 	ldw	r9,16(r16)
   47b48:	89800417 	ldw	r6,16(r17)
   47b4c:	14c00315 	stw	r19,12(r2)
   47b50:	4b800144 	addi	r14,r9,5
   47b54:	31800144 	addi	r6,r6,5
   47b58:	739d883a 	add	r14,r14,r14
   47b5c:	318d883a 	add	r6,r6,r6
   47b60:	739d883a 	add	r14,r14,r14
   47b64:	318d883a 	add	r6,r6,r6
   47b68:	81c00504 	addi	r7,r16,20
   47b6c:	839d883a 	add	r14,r16,r14
   47b70:	8a000504 	addi	r8,r17,20
   47b74:	898d883a 	add	r6,r17,r6
   47b78:	10c00504 	addi	r3,r2,20
   47b7c:	0009883a 	mov	r4,zero
   47b80:	3b000017 	ldw	r12,0(r7)
   47b84:	42c00017 	ldw	r11,0(r8)
   47b88:	42000104 	addi	r8,r8,4
   47b8c:	62bfffcc 	andi	r10,r12,65535
   47b90:	5b7fffcc 	andi	r13,r11,65535
   47b94:	5109883a 	add	r4,r10,r4
   47b98:	2355c83a 	sub	r10,r4,r13
   47b9c:	5816d43a 	srli	r11,r11,16
   47ba0:	6008d43a 	srli	r4,r12,16
   47ba4:	501bd43a 	srai	r13,r10,16
   47ba8:	1a80000d 	sth	r10,0(r3)
   47bac:	22c9c83a 	sub	r4,r4,r11
   47bb0:	2349883a 	add	r4,r4,r13
   47bb4:	1900008d 	sth	r4,2(r3)
   47bb8:	39c00104 	addi	r7,r7,4
   47bbc:	2009d43a 	srai	r4,r4,16
   47bc0:	18c00104 	addi	r3,r3,4
   47bc4:	41bfee36 	bltu	r8,r6,47b80 <__mdiff+0x84>
   47bc8:	180b883a 	mov	r5,r3
   47bcc:	3815883a 	mov	r10,r7
   47bd0:	3b80132e 	bgeu	r7,r14,47c20 <__mdiff+0x124>
   47bd4:	3a000017 	ldw	r8,0(r7)
   47bd8:	18c00104 	addi	r3,r3,4
   47bdc:	39c00104 	addi	r7,r7,4
   47be0:	41bfffcc 	andi	r6,r8,65535
   47be4:	310d883a 	add	r6,r6,r4
   47be8:	3009d43a 	srai	r4,r6,16
   47bec:	4010d43a 	srli	r8,r8,16
   47bf0:	19bfff0d 	sth	r6,-4(r3)
   47bf4:	2209883a 	add	r4,r4,r8
   47bf8:	193fff8d 	sth	r4,-2(r3)
   47bfc:	2009d43a 	srai	r4,r4,16
   47c00:	3bbff436 	bltu	r7,r14,47bd4 <__mdiff+0xd8>
   47c04:	0286303a 	nor	r3,zero,r10
   47c08:	1b87883a 	add	r3,r3,r14
   47c0c:	1806d0ba 	srli	r3,r3,2
   47c10:	18c00044 	addi	r3,r3,1
   47c14:	18c7883a 	add	r3,r3,r3
   47c18:	18c7883a 	add	r3,r3,r3
   47c1c:	28c7883a 	add	r3,r5,r3
   47c20:	193fff17 	ldw	r4,-4(r3)
   47c24:	18ffff04 	addi	r3,r3,-4
   47c28:	2000041e 	bne	r4,zero,47c3c <__mdiff+0x140>
   47c2c:	18ffff04 	addi	r3,r3,-4
   47c30:	19000017 	ldw	r4,0(r3)
   47c34:	4a7fffc4 	addi	r9,r9,-1
   47c38:	203ffc26 	beq	r4,zero,47c2c <__mdiff+0x130>
   47c3c:	12400415 	stw	r9,16(r2)
   47c40:	dfc00417 	ldw	ra,16(sp)
   47c44:	dcc00317 	ldw	r19,12(sp)
   47c48:	dc800217 	ldw	r18,8(sp)
   47c4c:	dc400117 	ldw	r17,4(sp)
   47c50:	dc000017 	ldw	r16,0(sp)
   47c54:	dec00504 	addi	sp,sp,20
   47c58:	f800283a 	ret
   47c5c:	8005883a 	mov	r2,r16
   47c60:	04c00044 	movi	r19,1
   47c64:	8821883a 	mov	r16,r17
   47c68:	1023883a 	mov	r17,r2
   47c6c:	003fb206 	br	47b38 <__mdiff+0x3c>
   47c70:	9009883a 	mov	r4,r18
   47c74:	000b883a 	mov	r5,zero
   47c78:	00471580 	call	47158 <_Balloc>
   47c7c:	00c00044 	movi	r3,1
   47c80:	10c00415 	stw	r3,16(r2)
   47c84:	10000515 	stw	zero,20(r2)
   47c88:	dfc00417 	ldw	ra,16(sp)
   47c8c:	dcc00317 	ldw	r19,12(sp)
   47c90:	dc800217 	ldw	r18,8(sp)
   47c94:	dc400117 	ldw	r17,4(sp)
   47c98:	dc000017 	ldw	r16,0(sp)
   47c9c:	dec00504 	addi	sp,sp,20
   47ca0:	f800283a 	ret

00047ca4 <__ulp>:
   47ca4:	295ffc2c 	andhi	r5,r5,32752
   47ca8:	00bf3034 	movhi	r2,64704
   47cac:	2887883a 	add	r3,r5,r2
   47cb0:	00c0020e 	bge	zero,r3,47cbc <__ulp+0x18>
   47cb4:	0005883a 	mov	r2,zero
   47cb8:	f800283a 	ret
   47cbc:	00c7c83a 	sub	r3,zero,r3
   47cc0:	1805d53a 	srai	r2,r3,20
   47cc4:	00c004c4 	movi	r3,19
   47cc8:	18800a0e 	bge	r3,r2,47cf4 <__ulp+0x50>
   47ccc:	01000c84 	movi	r4,50
   47cd0:	0007883a 	mov	r3,zero
   47cd4:	20800516 	blt	r4,r2,47cec <__ulp+0x48>
   47cd8:	01000cc4 	movi	r4,51
   47cdc:	2085c83a 	sub	r2,r4,r2
   47ce0:	01000044 	movi	r4,1
   47ce4:	2084983a 	sll	r2,r4,r2
   47ce8:	f800283a 	ret
   47cec:	00800044 	movi	r2,1
   47cf0:	f800283a 	ret
   47cf4:	00c00234 	movhi	r3,8
   47cf8:	1887d83a 	sra	r3,r3,r2
   47cfc:	0005883a 	mov	r2,zero
   47d00:	f800283a 	ret

00047d04 <__b2d>:
   47d04:	defffa04 	addi	sp,sp,-24
   47d08:	dc000015 	stw	r16,0(sp)
   47d0c:	24000417 	ldw	r16,16(r4)
   47d10:	dc400115 	stw	r17,4(sp)
   47d14:	dcc00315 	stw	r19,12(sp)
   47d18:	84000144 	addi	r16,r16,5
   47d1c:	8421883a 	add	r16,r16,r16
   47d20:	8421883a 	add	r16,r16,r16
   47d24:	2421883a 	add	r16,r4,r16
   47d28:	847fff17 	ldw	r17,-4(r16)
   47d2c:	24c00504 	addi	r19,r4,20
   47d30:	dd000415 	stw	r20,16(sp)
   47d34:	8809883a 	mov	r4,r17
   47d38:	dc800215 	stw	r18,8(sp)
   47d3c:	2829883a 	mov	r20,r5
   47d40:	dfc00515 	stw	ra,20(sp)
   47d44:	00474700 	call	47470 <__hi0bits>
   47d48:	00c00804 	movi	r3,32
   47d4c:	1887c83a 	sub	r3,r3,r2
   47d50:	a0c00015 	stw	r3,0(r20)
   47d54:	00c00284 	movi	r3,10
   47d58:	84bfff04 	addi	r18,r16,-4
   47d5c:	18801216 	blt	r3,r2,47da8 <__b2d+0xa4>
   47d60:	010002c4 	movi	r4,11
   47d64:	2089c83a 	sub	r4,r4,r2
   47d68:	8906d83a 	srl	r3,r17,r4
   47d6c:	18cffc34 	orhi	r3,r3,16368
   47d70:	9c80322e 	bgeu	r19,r18,47e3c <__b2d+0x138>
   47d74:	817ffe17 	ldw	r5,-8(r16)
   47d78:	2908d83a 	srl	r4,r5,r4
   47d7c:	10800544 	addi	r2,r2,21
   47d80:	88a2983a 	sll	r17,r17,r2
   47d84:	2444b03a 	or	r2,r4,r17
   47d88:	dfc00517 	ldw	ra,20(sp)
   47d8c:	dd000417 	ldw	r20,16(sp)
   47d90:	dcc00317 	ldw	r19,12(sp)
   47d94:	dc800217 	ldw	r18,8(sp)
   47d98:	dc400117 	ldw	r17,4(sp)
   47d9c:	dc000017 	ldw	r16,0(sp)
   47da0:	dec00604 	addi	sp,sp,24
   47da4:	f800283a 	ret
   47da8:	9c801636 	bltu	r19,r18,47e04 <__b2d+0x100>
   47dac:	113ffd44 	addi	r4,r2,-11
   47db0:	000b883a 	mov	r5,zero
   47db4:	20001726 	beq	r4,zero,47e14 <__b2d+0x110>
   47db8:	00c00ac4 	movi	r3,43
   47dbc:	1885c83a 	sub	r2,r3,r2
   47dc0:	8906983a 	sll	r3,r17,r4
   47dc4:	288cd83a 	srl	r6,r5,r2
   47dc8:	18cffc34 	orhi	r3,r3,16368
   47dcc:	1986b03a 	or	r3,r3,r6
   47dd0:	9c801c2e 	bgeu	r19,r18,47e44 <__b2d+0x140>
   47dd4:	91bfff17 	ldw	r6,-4(r18)
   47dd8:	3084d83a 	srl	r2,r6,r2
   47ddc:	2908983a 	sll	r4,r5,r4
   47de0:	1104b03a 	or	r2,r2,r4
   47de4:	dfc00517 	ldw	ra,20(sp)
   47de8:	dd000417 	ldw	r20,16(sp)
   47dec:	dcc00317 	ldw	r19,12(sp)
   47df0:	dc800217 	ldw	r18,8(sp)
   47df4:	dc400117 	ldw	r17,4(sp)
   47df8:	dc000017 	ldw	r16,0(sp)
   47dfc:	dec00604 	addi	sp,sp,24
   47e00:	f800283a 	ret
   47e04:	113ffd44 	addi	r4,r2,-11
   47e08:	84bffe04 	addi	r18,r16,-8
   47e0c:	817ffe17 	ldw	r5,-8(r16)
   47e10:	203fe91e 	bne	r4,zero,47db8 <__b2d+0xb4>
   47e14:	88cffc34 	orhi	r3,r17,16368
   47e18:	2805883a 	mov	r2,r5
   47e1c:	dfc00517 	ldw	ra,20(sp)
   47e20:	dd000417 	ldw	r20,16(sp)
   47e24:	dcc00317 	ldw	r19,12(sp)
   47e28:	dc800217 	ldw	r18,8(sp)
   47e2c:	dc400117 	ldw	r17,4(sp)
   47e30:	dc000017 	ldw	r16,0(sp)
   47e34:	dec00604 	addi	sp,sp,24
   47e38:	f800283a 	ret
   47e3c:	0009883a 	mov	r4,zero
   47e40:	003fce06 	br	47d7c <__b2d+0x78>
   47e44:	0005883a 	mov	r2,zero
   47e48:	003fe406 	br	47ddc <__b2d+0xd8>

00047e4c <__d2b>:
   47e4c:	defff804 	addi	sp,sp,-32
   47e50:	dc400315 	stw	r17,12(sp)
   47e54:	3023883a 	mov	r17,r6
   47e58:	dc800415 	stw	r18,16(sp)
   47e5c:	8824907a 	slli	r18,r17,1
   47e60:	dcc00515 	stw	r19,20(sp)
   47e64:	2827883a 	mov	r19,r5
   47e68:	9024d57a 	srli	r18,r18,21
   47e6c:	01400044 	movi	r5,1
   47e70:	dd000615 	stw	r20,24(sp)
   47e74:	dc000215 	stw	r16,8(sp)
   47e78:	dfc00715 	stw	ra,28(sp)
   47e7c:	3829883a 	mov	r20,r7
   47e80:	00471580 	call	47158 <_Balloc>
   47e84:	1021883a 	mov	r16,r2
   47e88:	00800434 	movhi	r2,16
   47e8c:	10bfffc4 	addi	r2,r2,-1
   47e90:	88a2703a 	and	r17,r17,r2
   47e94:	90000126 	beq	r18,zero,47e9c <__d2b+0x50>
   47e98:	8c400434 	orhi	r17,r17,16
   47e9c:	dc400015 	stw	r17,0(sp)
   47ea0:	98002226 	beq	r19,zero,47f2c <__d2b+0xe0>
   47ea4:	d9000104 	addi	r4,sp,4
   47ea8:	dcc00115 	stw	r19,4(sp)
   47eac:	00474d80 	call	474d8 <__lo0bits>
   47eb0:	d8c00017 	ldw	r3,0(sp)
   47eb4:	10002d1e 	bne	r2,zero,47f6c <__d2b+0x120>
   47eb8:	d9000117 	ldw	r4,4(sp)
   47ebc:	81000515 	stw	r4,20(r16)
   47ec0:	1823003a 	cmpeq	r17,r3,zero
   47ec4:	01000084 	movi	r4,2
   47ec8:	2463c83a 	sub	r17,r4,r17
   47ecc:	80c00615 	stw	r3,24(r16)
   47ed0:	84400415 	stw	r17,16(r16)
   47ed4:	90001d1e 	bne	r18,zero,47f4c <__d2b+0x100>
   47ed8:	88c00104 	addi	r3,r17,4
   47edc:	18c7883a 	add	r3,r3,r3
   47ee0:	18c7883a 	add	r3,r3,r3
   47ee4:	80c7883a 	add	r3,r16,r3
   47ee8:	19000017 	ldw	r4,0(r3)
   47eec:	10bef384 	addi	r2,r2,-1074
   47ef0:	a0800015 	stw	r2,0(r20)
   47ef4:	00474700 	call	47470 <__hi0bits>
   47ef8:	8822917a 	slli	r17,r17,5
   47efc:	d8c00817 	ldw	r3,32(sp)
   47f00:	8885c83a 	sub	r2,r17,r2
   47f04:	18800015 	stw	r2,0(r3)
   47f08:	8005883a 	mov	r2,r16
   47f0c:	dfc00717 	ldw	ra,28(sp)
   47f10:	dd000617 	ldw	r20,24(sp)
   47f14:	dcc00517 	ldw	r19,20(sp)
   47f18:	dc800417 	ldw	r18,16(sp)
   47f1c:	dc400317 	ldw	r17,12(sp)
   47f20:	dc000217 	ldw	r16,8(sp)
   47f24:	dec00804 	addi	sp,sp,32
   47f28:	f800283a 	ret
   47f2c:	d809883a 	mov	r4,sp
   47f30:	00474d80 	call	474d8 <__lo0bits>
   47f34:	d8c00017 	ldw	r3,0(sp)
   47f38:	04400044 	movi	r17,1
   47f3c:	84400415 	stw	r17,16(r16)
   47f40:	80c00515 	stw	r3,20(r16)
   47f44:	10800804 	addi	r2,r2,32
   47f48:	903fe326 	beq	r18,zero,47ed8 <__d2b+0x8c>
   47f4c:	00c00d44 	movi	r3,53
   47f50:	94bef344 	addi	r18,r18,-1075
   47f54:	90a5883a 	add	r18,r18,r2
   47f58:	1885c83a 	sub	r2,r3,r2
   47f5c:	d8c00817 	ldw	r3,32(sp)
   47f60:	a4800015 	stw	r18,0(r20)
   47f64:	18800015 	stw	r2,0(r3)
   47f68:	003fe706 	br	47f08 <__d2b+0xbc>
   47f6c:	01000804 	movi	r4,32
   47f70:	2089c83a 	sub	r4,r4,r2
   47f74:	1908983a 	sll	r4,r3,r4
   47f78:	d9400117 	ldw	r5,4(sp)
   47f7c:	1886d83a 	srl	r3,r3,r2
   47f80:	2148b03a 	or	r4,r4,r5
   47f84:	81000515 	stw	r4,20(r16)
   47f88:	d8c00015 	stw	r3,0(sp)
   47f8c:	003fcc06 	br	47ec0 <__d2b+0x74>

00047f90 <__ratio>:
   47f90:	defff904 	addi	sp,sp,-28
   47f94:	dc400315 	stw	r17,12(sp)
   47f98:	2823883a 	mov	r17,r5
   47f9c:	d9400104 	addi	r5,sp,4
   47fa0:	dfc00615 	stw	ra,24(sp)
   47fa4:	dcc00515 	stw	r19,20(sp)
   47fa8:	dc800415 	stw	r18,16(sp)
   47fac:	2027883a 	mov	r19,r4
   47fb0:	dc000215 	stw	r16,8(sp)
   47fb4:	0047d040 	call	47d04 <__b2d>
   47fb8:	8809883a 	mov	r4,r17
   47fbc:	d80b883a 	mov	r5,sp
   47fc0:	1025883a 	mov	r18,r2
   47fc4:	1821883a 	mov	r16,r3
   47fc8:	0047d040 	call	47d04 <__b2d>
   47fcc:	99400417 	ldw	r5,16(r19)
   47fd0:	89000417 	ldw	r4,16(r17)
   47fd4:	d9800117 	ldw	r6,4(sp)
   47fd8:	2909c83a 	sub	r4,r5,r4
   47fdc:	d9400017 	ldw	r5,0(sp)
   47fe0:	2008917a 	slli	r4,r4,5
   47fe4:	314bc83a 	sub	r5,r6,r5
   47fe8:	290b883a 	add	r5,r5,r4
   47fec:	01400e0e 	bge	zero,r5,48028 <__ratio+0x98>
   47ff0:	280a953a 	slli	r5,r5,20
   47ff4:	2c21883a 	add	r16,r5,r16
   47ff8:	9009883a 	mov	r4,r18
   47ffc:	800b883a 	mov	r5,r16
   48000:	100d883a 	mov	r6,r2
   48004:	180f883a 	mov	r7,r3
   48008:	0049d480 	call	49d48 <__divdf3>
   4800c:	dfc00617 	ldw	ra,24(sp)
   48010:	dcc00517 	ldw	r19,20(sp)
   48014:	dc800417 	ldw	r18,16(sp)
   48018:	dc400317 	ldw	r17,12(sp)
   4801c:	dc000217 	ldw	r16,8(sp)
   48020:	dec00704 	addi	sp,sp,28
   48024:	f800283a 	ret
   48028:	280a953a 	slli	r5,r5,20
   4802c:	1947c83a 	sub	r3,r3,r5
   48030:	003ff106 	br	47ff8 <__ratio+0x68>

00048034 <_mprec_log10>:
   48034:	defffe04 	addi	sp,sp,-8
   48038:	dc000015 	stw	r16,0(sp)
   4803c:	dfc00115 	stw	ra,4(sp)
   48040:	008005c4 	movi	r2,23
   48044:	2021883a 	mov	r16,r4
   48048:	11000d0e 	bge	r2,r4,48080 <_mprec_log10+0x4c>
   4804c:	0005883a 	mov	r2,zero
   48050:	00cffc34 	movhi	r3,16368
   48054:	843fffc4 	addi	r16,r16,-1
   48058:	1009883a 	mov	r4,r2
   4805c:	180b883a 	mov	r5,r3
   48060:	000d883a 	mov	r6,zero
   48064:	01d00934 	movhi	r7,16420
   48068:	0049a640 	call	49a64 <__muldf3>
   4806c:	803ff91e 	bne	r16,zero,48054 <_mprec_log10+0x20>
   48070:	dfc00117 	ldw	ra,4(sp)
   48074:	dc000017 	ldw	r16,0(sp)
   48078:	dec00204 	addi	sp,sp,8
   4807c:	f800283a 	ret
   48080:	202090fa 	slli	r16,r4,3
   48084:	00800174 	movhi	r2,5
   48088:	10b80f04 	addi	r2,r2,-8132
   4808c:	1421883a 	add	r16,r2,r16
   48090:	80800017 	ldw	r2,0(r16)
   48094:	80c00117 	ldw	r3,4(r16)
   48098:	dfc00117 	ldw	ra,4(sp)
   4809c:	dc000017 	ldw	r16,0(sp)
   480a0:	dec00204 	addi	sp,sp,8
   480a4:	f800283a 	ret

000480a8 <__copybits>:
   480a8:	297fffc4 	addi	r5,r5,-1
   480ac:	31c00417 	ldw	r7,16(r6)
   480b0:	2811d17a 	srai	r8,r5,5
   480b4:	30800504 	addi	r2,r6,20
   480b8:	39c00144 	addi	r7,r7,5
   480bc:	42000044 	addi	r8,r8,1
   480c0:	39cf883a 	add	r7,r7,r7
   480c4:	4211883a 	add	r8,r8,r8
   480c8:	39cf883a 	add	r7,r7,r7
   480cc:	4211883a 	add	r8,r8,r8
   480d0:	31cf883a 	add	r7,r6,r7
   480d4:	2211883a 	add	r8,r4,r8
   480d8:	11c00d2e 	bgeu	r2,r7,48110 <__copybits+0x68>
   480dc:	2007883a 	mov	r3,r4
   480e0:	11400017 	ldw	r5,0(r2)
   480e4:	18c00104 	addi	r3,r3,4
   480e8:	10800104 	addi	r2,r2,4
   480ec:	197fff15 	stw	r5,-4(r3)
   480f0:	11fffb36 	bltu	r2,r7,480e0 <__copybits+0x38>
   480f4:	3985c83a 	sub	r2,r7,r6
   480f8:	10bffac4 	addi	r2,r2,-21
   480fc:	1004d0ba 	srli	r2,r2,2
   48100:	10800044 	addi	r2,r2,1
   48104:	1085883a 	add	r2,r2,r2
   48108:	1085883a 	add	r2,r2,r2
   4810c:	2089883a 	add	r4,r4,r2
   48110:	2200032e 	bgeu	r4,r8,48120 <__copybits+0x78>
   48114:	20000015 	stw	zero,0(r4)
   48118:	21000104 	addi	r4,r4,4
   4811c:	223ffd36 	bltu	r4,r8,48114 <__copybits+0x6c>
   48120:	f800283a 	ret

00048124 <__any_on>:
   48124:	21800417 	ldw	r6,16(r4)
   48128:	2805d17a 	srai	r2,r5,5
   4812c:	20c00504 	addi	r3,r4,20
   48130:	30800f0e 	bge	r6,r2,48170 <__any_on+0x4c>
   48134:	3005883a 	mov	r2,r6
   48138:	10800144 	addi	r2,r2,5
   4813c:	1085883a 	add	r2,r2,r2
   48140:	1085883a 	add	r2,r2,r2
   48144:	2089883a 	add	r4,r4,r2
   48148:	1900152e 	bgeu	r3,r4,481a0 <__any_on+0x7c>
   4814c:	20bfff17 	ldw	r2,-4(r4)
   48150:	213fff04 	addi	r4,r4,-4
   48154:	1000041e 	bne	r2,zero,48168 <__any_on+0x44>
   48158:	1900112e 	bgeu	r3,r4,481a0 <__any_on+0x7c>
   4815c:	213fff04 	addi	r4,r4,-4
   48160:	20800017 	ldw	r2,0(r4)
   48164:	103ffc26 	beq	r2,zero,48158 <__any_on+0x34>
   48168:	00800044 	movi	r2,1
   4816c:	f800283a 	ret
   48170:	11bff10e 	bge	r2,r6,48138 <__any_on+0x14>
   48174:	294007cc 	andi	r5,r5,31
   48178:	283fef26 	beq	r5,zero,48138 <__any_on+0x14>
   4817c:	11800144 	addi	r6,r2,5
   48180:	318d883a 	add	r6,r6,r6
   48184:	318d883a 	add	r6,r6,r6
   48188:	218d883a 	add	r6,r4,r6
   4818c:	31800017 	ldw	r6,0(r6)
   48190:	314ed83a 	srl	r7,r6,r5
   48194:	394a983a 	sll	r5,r7,r5
   48198:	29bff31e 	bne	r5,r6,48168 <__any_on+0x44>
   4819c:	003fe606 	br	48138 <__any_on+0x14>
   481a0:	0005883a 	mov	r2,zero
   481a4:	f800283a 	ret

000481a8 <_read_r>:
   481a8:	defffd04 	addi	sp,sp,-12
   481ac:	dc400115 	stw	r17,4(sp)
   481b0:	dc000015 	stw	r16,0(sp)
   481b4:	2023883a 	mov	r17,r4
   481b8:	04000174 	movhi	r16,5
   481bc:	84063b04 	addi	r16,r16,6380
   481c0:	2809883a 	mov	r4,r5
   481c4:	300b883a 	mov	r5,r6
   481c8:	380d883a 	mov	r6,r7
   481cc:	dfc00215 	stw	ra,8(sp)
   481d0:	80000015 	stw	zero,0(r16)
   481d4:	004b41c0 	call	4b41c <read>
   481d8:	00ffffc4 	movi	r3,-1
   481dc:	10c00526 	beq	r2,r3,481f4 <_read_r+0x4c>
   481e0:	dfc00217 	ldw	ra,8(sp)
   481e4:	dc400117 	ldw	r17,4(sp)
   481e8:	dc000017 	ldw	r16,0(sp)
   481ec:	dec00304 	addi	sp,sp,12
   481f0:	f800283a 	ret
   481f4:	80c00017 	ldw	r3,0(r16)
   481f8:	183ff926 	beq	r3,zero,481e0 <_read_r+0x38>
   481fc:	88c00015 	stw	r3,0(r17)
   48200:	dfc00217 	ldw	ra,8(sp)
   48204:	dc400117 	ldw	r17,4(sp)
   48208:	dc000017 	ldw	r16,0(sp)
   4820c:	dec00304 	addi	sp,sp,12
   48210:	f800283a 	ret

00048214 <_realloc_r>:
   48214:	defff504 	addi	sp,sp,-44
   48218:	dd400615 	stw	r21,24(sp)
   4821c:	dc800315 	stw	r18,12(sp)
   48220:	dc000115 	stw	r16,4(sp)
   48224:	dfc00a15 	stw	ra,40(sp)
   48228:	df000915 	stw	fp,36(sp)
   4822c:	ddc00815 	stw	r23,32(sp)
   48230:	dd800715 	stw	r22,28(sp)
   48234:	dd000515 	stw	r20,20(sp)
   48238:	dcc00415 	stw	r19,16(sp)
   4823c:	dc400215 	stw	r17,8(sp)
   48240:	2821883a 	mov	r16,r5
   48244:	202b883a 	mov	r21,r4
   48248:	3025883a 	mov	r18,r6
   4824c:	28009626 	beq	r5,zero,484a8 <_realloc_r+0x294>
   48250:	004b0f40 	call	4b0f4 <__malloc_lock>
   48254:	80bfff17 	ldw	r2,-4(r16)
   48258:	04ffff04 	movi	r19,-4
   4825c:	90c002c4 	addi	r3,r18,11
   48260:	01000584 	movi	r4,22
   48264:	85bffe04 	addi	r22,r16,-8
   48268:	14e6703a 	and	r19,r2,r19
   4826c:	20c0372e 	bgeu	r4,r3,4834c <_realloc_r+0x138>
   48270:	047ffe04 	movi	r17,-8
   48274:	1c62703a 	and	r17,r3,r17
   48278:	8807883a 	mov	r3,r17
   4827c:	88005a16 	blt	r17,zero,483e8 <_realloc_r+0x1d4>
   48280:	8c805936 	bltu	r17,r18,483e8 <_realloc_r+0x1d4>
   48284:	98c0340e 	bge	r19,r3,48358 <_realloc_r+0x144>
   48288:	07000174 	movhi	fp,5
   4828c:	e739b704 	addi	fp,fp,-6436
   48290:	e1400217 	ldw	r5,8(fp)
   48294:	b4c9883a 	add	r4,r22,r19
   48298:	29009026 	beq	r5,r4,484dc <_realloc_r+0x2c8>
   4829c:	21800117 	ldw	r6,4(r4)
   482a0:	01ffff84 	movi	r7,-2
   482a4:	31ce703a 	and	r7,r6,r7
   482a8:	21cf883a 	add	r7,r4,r7
   482ac:	39c00117 	ldw	r7,4(r7)
   482b0:	39c0004c 	andi	r7,r7,1
   482b4:	38004326 	beq	r7,zero,483c4 <_realloc_r+0x1b0>
   482b8:	000d883a 	mov	r6,zero
   482bc:	0009883a 	mov	r4,zero
   482c0:	1080004c 	andi	r2,r2,1
   482c4:	10005a1e 	bne	r2,zero,48430 <_realloc_r+0x21c>
   482c8:	85fffe17 	ldw	r23,-8(r16)
   482cc:	00bfff04 	movi	r2,-4
   482d0:	b5efc83a 	sub	r23,r22,r23
   482d4:	b9c00117 	ldw	r7,4(r23)
   482d8:	388e703a 	and	r7,r7,r2
   482dc:	3ccf883a 	add	r7,r7,r19
   482e0:	20005226 	beq	r4,zero,4842c <_realloc_r+0x218>
   482e4:	31e9883a 	add	r20,r6,r7
   482e8:	2140c726 	beq	r4,r5,48608 <_realloc_r+0x3f4>
   482ec:	a0c04f16 	blt	r20,r3,4842c <_realloc_r+0x218>
   482f0:	20800317 	ldw	r2,12(r4)
   482f4:	20c00217 	ldw	r3,8(r4)
   482f8:	99bfff04 	addi	r6,r19,-4
   482fc:	01000904 	movi	r4,36
   48300:	18800315 	stw	r2,12(r3)
   48304:	10c00215 	stw	r3,8(r2)
   48308:	b8c00217 	ldw	r3,8(r23)
   4830c:	b8800317 	ldw	r2,12(r23)
   48310:	bc800204 	addi	r18,r23,8
   48314:	18800315 	stw	r2,12(r3)
   48318:	10c00215 	stw	r3,8(r2)
   4831c:	2180ed36 	bltu	r4,r6,486d4 <_realloc_r+0x4c0>
   48320:	008004c4 	movi	r2,19
   48324:	11809b2e 	bgeu	r2,r6,48594 <_realloc_r+0x380>
   48328:	80800017 	ldw	r2,0(r16)
   4832c:	b8800215 	stw	r2,8(r23)
   48330:	80800117 	ldw	r2,4(r16)
   48334:	b8800315 	stw	r2,12(r23)
   48338:	008006c4 	movi	r2,27
   4833c:	1180f936 	bltu	r2,r6,48724 <_realloc_r+0x510>
   48340:	b8800404 	addi	r2,r23,16
   48344:	80c00204 	addi	r3,r16,8
   48348:	00009406 	br	4859c <_realloc_r+0x388>
   4834c:	00c00404 	movi	r3,16
   48350:	1823883a 	mov	r17,r3
   48354:	003fca06 	br	48280 <_realloc_r+0x6c>
   48358:	9829883a 	mov	r20,r19
   4835c:	a447c83a 	sub	r3,r20,r17
   48360:	010003c4 	movi	r4,15
   48364:	1080004c 	andi	r2,r2,1
   48368:	20c02336 	bltu	r4,r3,483f8 <_realloc_r+0x1e4>
   4836c:	1504b03a 	or	r2,r2,r20
   48370:	b0800115 	stw	r2,4(r22)
   48374:	b52d883a 	add	r22,r22,r20
   48378:	b0800117 	ldw	r2,4(r22)
   4837c:	10800054 	ori	r2,r2,1
   48380:	b0800115 	stw	r2,4(r22)
   48384:	a809883a 	mov	r4,r21
   48388:	004b1140 	call	4b114 <__malloc_unlock>
   4838c:	8025883a 	mov	r18,r16
   48390:	9005883a 	mov	r2,r18
   48394:	dfc00a17 	ldw	ra,40(sp)
   48398:	df000917 	ldw	fp,36(sp)
   4839c:	ddc00817 	ldw	r23,32(sp)
   483a0:	dd800717 	ldw	r22,28(sp)
   483a4:	dd400617 	ldw	r21,24(sp)
   483a8:	dd000517 	ldw	r20,20(sp)
   483ac:	dcc00417 	ldw	r19,16(sp)
   483b0:	dc800317 	ldw	r18,12(sp)
   483b4:	dc400217 	ldw	r17,8(sp)
   483b8:	dc000117 	ldw	r16,4(sp)
   483bc:	dec00b04 	addi	sp,sp,44
   483c0:	f800283a 	ret
   483c4:	01ffff04 	movi	r7,-4
   483c8:	31cc703a 	and	r6,r6,r7
   483cc:	34e9883a 	add	r20,r6,r19
   483d0:	a0ffbb16 	blt	r20,r3,482c0 <_realloc_r+0xac>
   483d4:	20c00317 	ldw	r3,12(r4)
   483d8:	21000217 	ldw	r4,8(r4)
   483dc:	20c00315 	stw	r3,12(r4)
   483e0:	19000215 	stw	r4,8(r3)
   483e4:	003fdd06 	br	4835c <_realloc_r+0x148>
   483e8:	00800304 	movi	r2,12
   483ec:	a8800015 	stw	r2,0(r21)
   483f0:	0025883a 	mov	r18,zero
   483f4:	003fe606 	br	48390 <_realloc_r+0x17c>
   483f8:	1444b03a 	or	r2,r2,r17
   483fc:	b0800115 	stw	r2,4(r22)
   48400:	b44b883a 	add	r5,r22,r17
   48404:	18800054 	ori	r2,r3,1
   48408:	28800115 	stw	r2,4(r5)
   4840c:	28c7883a 	add	r3,r5,r3
   48410:	18800117 	ldw	r2,4(r3)
   48414:	a809883a 	mov	r4,r21
   48418:	29400204 	addi	r5,r5,8
   4841c:	10800054 	ori	r2,r2,1
   48420:	18800115 	stw	r2,4(r3)
   48424:	0040ff00 	call	40ff0 <_free_r>
   48428:	003fd606 	br	48384 <_realloc_r+0x170>
   4842c:	38c0330e 	bge	r7,r3,484fc <_realloc_r+0x2e8>
   48430:	900b883a 	mov	r5,r18
   48434:	a809883a 	mov	r4,r21
   48438:	0041ac80 	call	41ac8 <_malloc_r>
   4843c:	1025883a 	mov	r18,r2
   48440:	10001626 	beq	r2,zero,4849c <_realloc_r+0x288>
   48444:	80bfff17 	ldw	r2,-4(r16)
   48448:	00ffff84 	movi	r3,-2
   4844c:	913ffe04 	addi	r4,r18,-8
   48450:	10c6703a 	and	r3,r2,r3
   48454:	b0c7883a 	add	r3,r22,r3
   48458:	20c09926 	beq	r4,r3,486c0 <_realloc_r+0x4ac>
   4845c:	99bfff04 	addi	r6,r19,-4
   48460:	00800904 	movi	r2,36
   48464:	11806436 	bltu	r2,r6,485f8 <_realloc_r+0x3e4>
   48468:	00c004c4 	movi	r3,19
   4846c:	19804036 	bltu	r3,r6,48570 <_realloc_r+0x35c>
   48470:	9005883a 	mov	r2,r18
   48474:	8007883a 	mov	r3,r16
   48478:	19000017 	ldw	r4,0(r3)
   4847c:	11000015 	stw	r4,0(r2)
   48480:	19000117 	ldw	r4,4(r3)
   48484:	11000115 	stw	r4,4(r2)
   48488:	18c00217 	ldw	r3,8(r3)
   4848c:	10c00215 	stw	r3,8(r2)
   48490:	a809883a 	mov	r4,r21
   48494:	800b883a 	mov	r5,r16
   48498:	0040ff00 	call	40ff0 <_free_r>
   4849c:	a809883a 	mov	r4,r21
   484a0:	004b1140 	call	4b114 <__malloc_unlock>
   484a4:	003fba06 	br	48390 <_realloc_r+0x17c>
   484a8:	300b883a 	mov	r5,r6
   484ac:	dfc00a17 	ldw	ra,40(sp)
   484b0:	df000917 	ldw	fp,36(sp)
   484b4:	ddc00817 	ldw	r23,32(sp)
   484b8:	dd800717 	ldw	r22,28(sp)
   484bc:	dd400617 	ldw	r21,24(sp)
   484c0:	dd000517 	ldw	r20,20(sp)
   484c4:	dcc00417 	ldw	r19,16(sp)
   484c8:	dc800317 	ldw	r18,12(sp)
   484cc:	dc400217 	ldw	r17,8(sp)
   484d0:	dc000117 	ldw	r16,4(sp)
   484d4:	dec00b04 	addi	sp,sp,44
   484d8:	0041ac81 	jmpi	41ac8 <_malloc_r>
   484dc:	29800117 	ldw	r6,4(r5)
   484e0:	013fff04 	movi	r4,-4
   484e4:	89c00404 	addi	r7,r17,16
   484e8:	310c703a 	and	r6,r6,r4
   484ec:	34c9883a 	add	r4,r6,r19
   484f0:	21c0340e 	bge	r4,r7,485c4 <_realloc_r+0x3b0>
   484f4:	2809883a 	mov	r4,r5
   484f8:	003f7106 	br	482c0 <_realloc_r+0xac>
   484fc:	b8800317 	ldw	r2,12(r23)
   48500:	b8c00217 	ldw	r3,8(r23)
   48504:	99bfff04 	addi	r6,r19,-4
   48508:	01000904 	movi	r4,36
   4850c:	18800315 	stw	r2,12(r3)
   48510:	10c00215 	stw	r3,8(r2)
   48514:	bc800204 	addi	r18,r23,8
   48518:	21807836 	bltu	r4,r6,486fc <_realloc_r+0x4e8>
   4851c:	008004c4 	movi	r2,19
   48520:	1180732e 	bgeu	r2,r6,486f0 <_realloc_r+0x4dc>
   48524:	80800017 	ldw	r2,0(r16)
   48528:	b8800215 	stw	r2,8(r23)
   4852c:	80800117 	ldw	r2,4(r16)
   48530:	b8800315 	stw	r2,12(r23)
   48534:	008006c4 	movi	r2,27
   48538:	11808936 	bltu	r2,r6,48760 <_realloc_r+0x54c>
   4853c:	b8800404 	addi	r2,r23,16
   48540:	80c00204 	addi	r3,r16,8
   48544:	19000017 	ldw	r4,0(r3)
   48548:	9021883a 	mov	r16,r18
   4854c:	3829883a 	mov	r20,r7
   48550:	11000015 	stw	r4,0(r2)
   48554:	19000117 	ldw	r4,4(r3)
   48558:	b82d883a 	mov	r22,r23
   4855c:	11000115 	stw	r4,4(r2)
   48560:	18c00217 	ldw	r3,8(r3)
   48564:	10c00215 	stw	r3,8(r2)
   48568:	b8800117 	ldw	r2,4(r23)
   4856c:	003f7b06 	br	4835c <_realloc_r+0x148>
   48570:	80c00017 	ldw	r3,0(r16)
   48574:	90c00015 	stw	r3,0(r18)
   48578:	80c00117 	ldw	r3,4(r16)
   4857c:	90c00115 	stw	r3,4(r18)
   48580:	00c006c4 	movi	r3,27
   48584:	19804636 	bltu	r3,r6,486a0 <_realloc_r+0x48c>
   48588:	90800204 	addi	r2,r18,8
   4858c:	80c00204 	addi	r3,r16,8
   48590:	003fb906 	br	48478 <_realloc_r+0x264>
   48594:	9005883a 	mov	r2,r18
   48598:	8007883a 	mov	r3,r16
   4859c:	19000017 	ldw	r4,0(r3)
   485a0:	9021883a 	mov	r16,r18
   485a4:	b82d883a 	mov	r22,r23
   485a8:	11000015 	stw	r4,0(r2)
   485ac:	19000117 	ldw	r4,4(r3)
   485b0:	11000115 	stw	r4,4(r2)
   485b4:	18c00217 	ldw	r3,8(r3)
   485b8:	10c00215 	stw	r3,8(r2)
   485bc:	b8800117 	ldw	r2,4(r23)
   485c0:	003f6606 	br	4835c <_realloc_r+0x148>
   485c4:	2445c83a 	sub	r2,r4,r17
   485c8:	b46d883a 	add	r22,r22,r17
   485cc:	10800054 	ori	r2,r2,1
   485d0:	b0800115 	stw	r2,4(r22)
   485d4:	80bfff17 	ldw	r2,-4(r16)
   485d8:	a809883a 	mov	r4,r21
   485dc:	e5800215 	stw	r22,8(fp)
   485e0:	1080004c 	andi	r2,r2,1
   485e4:	88a2b03a 	or	r17,r17,r2
   485e8:	847fff15 	stw	r17,-4(r16)
   485ec:	004b1140 	call	4b114 <__malloc_unlock>
   485f0:	8025883a 	mov	r18,r16
   485f4:	003f6606 	br	48390 <_realloc_r+0x17c>
   485f8:	9009883a 	mov	r4,r18
   485fc:	800b883a 	mov	r5,r16
   48600:	0046fcc0 	call	46fcc <memmove>
   48604:	003fa206 	br	48490 <_realloc_r+0x27c>
   48608:	88800404 	addi	r2,r17,16
   4860c:	a0bf8716 	blt	r20,r2,4842c <_realloc_r+0x218>
   48610:	b8800317 	ldw	r2,12(r23)
   48614:	b8c00217 	ldw	r3,8(r23)
   48618:	99bfff04 	addi	r6,r19,-4
   4861c:	01000904 	movi	r4,36
   48620:	18800315 	stw	r2,12(r3)
   48624:	10c00215 	stw	r3,8(r2)
   48628:	bc800204 	addi	r18,r23,8
   4862c:	21806536 	bltu	r4,r6,487c4 <_realloc_r+0x5b0>
   48630:	008004c4 	movi	r2,19
   48634:	1180592e 	bgeu	r2,r6,4879c <_realloc_r+0x588>
   48638:	80800017 	ldw	r2,0(r16)
   4863c:	b8800215 	stw	r2,8(r23)
   48640:	80800117 	ldw	r2,4(r16)
   48644:	b8800315 	stw	r2,12(r23)
   48648:	008006c4 	movi	r2,27
   4864c:	11806136 	bltu	r2,r6,487d4 <_realloc_r+0x5c0>
   48650:	b8800404 	addi	r2,r23,16
   48654:	80c00204 	addi	r3,r16,8
   48658:	19000017 	ldw	r4,0(r3)
   4865c:	11000015 	stw	r4,0(r2)
   48660:	19000117 	ldw	r4,4(r3)
   48664:	11000115 	stw	r4,4(r2)
   48668:	18c00217 	ldw	r3,8(r3)
   4866c:	10c00215 	stw	r3,8(r2)
   48670:	a447c83a 	sub	r3,r20,r17
   48674:	bc45883a 	add	r2,r23,r17
   48678:	18c00054 	ori	r3,r3,1
   4867c:	10c00115 	stw	r3,4(r2)
   48680:	b8c00117 	ldw	r3,4(r23)
   48684:	e0800215 	stw	r2,8(fp)
   48688:	a809883a 	mov	r4,r21
   4868c:	1880004c 	andi	r2,r3,1
   48690:	88a2b03a 	or	r17,r17,r2
   48694:	bc400115 	stw	r17,4(r23)
   48698:	004b1140 	call	4b114 <__malloc_unlock>
   4869c:	003f3c06 	br	48390 <_realloc_r+0x17c>
   486a0:	80c00217 	ldw	r3,8(r16)
   486a4:	90c00215 	stw	r3,8(r18)
   486a8:	80c00317 	ldw	r3,12(r16)
   486ac:	90c00315 	stw	r3,12(r18)
   486b0:	30802426 	beq	r6,r2,48744 <_realloc_r+0x530>
   486b4:	90800404 	addi	r2,r18,16
   486b8:	80c00404 	addi	r3,r16,16
   486bc:	003f6e06 	br	48478 <_realloc_r+0x264>
   486c0:	953fff17 	ldw	r20,-4(r18)
   486c4:	00ffff04 	movi	r3,-4
   486c8:	a0e8703a 	and	r20,r20,r3
   486cc:	a4e9883a 	add	r20,r20,r19
   486d0:	003f2206 	br	4835c <_realloc_r+0x148>
   486d4:	800b883a 	mov	r5,r16
   486d8:	9009883a 	mov	r4,r18
   486dc:	0046fcc0 	call	46fcc <memmove>
   486e0:	9021883a 	mov	r16,r18
   486e4:	b8800117 	ldw	r2,4(r23)
   486e8:	b82d883a 	mov	r22,r23
   486ec:	003f1b06 	br	4835c <_realloc_r+0x148>
   486f0:	9005883a 	mov	r2,r18
   486f4:	8007883a 	mov	r3,r16
   486f8:	003f9206 	br	48544 <_realloc_r+0x330>
   486fc:	800b883a 	mov	r5,r16
   48700:	9009883a 	mov	r4,r18
   48704:	d9c00015 	stw	r7,0(sp)
   48708:	0046fcc0 	call	46fcc <memmove>
   4870c:	d9c00017 	ldw	r7,0(sp)
   48710:	9021883a 	mov	r16,r18
   48714:	b8800117 	ldw	r2,4(r23)
   48718:	3829883a 	mov	r20,r7
   4871c:	b82d883a 	mov	r22,r23
   48720:	003f0e06 	br	4835c <_realloc_r+0x148>
   48724:	80800217 	ldw	r2,8(r16)
   48728:	b8800415 	stw	r2,16(r23)
   4872c:	80800317 	ldw	r2,12(r16)
   48730:	b8800515 	stw	r2,20(r23)
   48734:	31001226 	beq	r6,r4,48780 <_realloc_r+0x56c>
   48738:	b8800604 	addi	r2,r23,24
   4873c:	80c00404 	addi	r3,r16,16
   48740:	003f9606 	br	4859c <_realloc_r+0x388>
   48744:	81000417 	ldw	r4,16(r16)
   48748:	90800604 	addi	r2,r18,24
   4874c:	80c00604 	addi	r3,r16,24
   48750:	91000415 	stw	r4,16(r18)
   48754:	81000517 	ldw	r4,20(r16)
   48758:	91000515 	stw	r4,20(r18)
   4875c:	003f4606 	br	48478 <_realloc_r+0x264>
   48760:	80800217 	ldw	r2,8(r16)
   48764:	b8800415 	stw	r2,16(r23)
   48768:	80800317 	ldw	r2,12(r16)
   4876c:	b8800515 	stw	r2,20(r23)
   48770:	31000d26 	beq	r6,r4,487a8 <_realloc_r+0x594>
   48774:	b8800604 	addi	r2,r23,24
   48778:	80c00404 	addi	r3,r16,16
   4877c:	003f7106 	br	48544 <_realloc_r+0x330>
   48780:	81000417 	ldw	r4,16(r16)
   48784:	b8800804 	addi	r2,r23,32
   48788:	80c00604 	addi	r3,r16,24
   4878c:	b9000615 	stw	r4,24(r23)
   48790:	81000517 	ldw	r4,20(r16)
   48794:	b9000715 	stw	r4,28(r23)
   48798:	003f8006 	br	4859c <_realloc_r+0x388>
   4879c:	9005883a 	mov	r2,r18
   487a0:	8007883a 	mov	r3,r16
   487a4:	003fac06 	br	48658 <_realloc_r+0x444>
   487a8:	81000417 	ldw	r4,16(r16)
   487ac:	b8800804 	addi	r2,r23,32
   487b0:	80c00604 	addi	r3,r16,24
   487b4:	b9000615 	stw	r4,24(r23)
   487b8:	81000517 	ldw	r4,20(r16)
   487bc:	b9000715 	stw	r4,28(r23)
   487c0:	003f6006 	br	48544 <_realloc_r+0x330>
   487c4:	9009883a 	mov	r4,r18
   487c8:	800b883a 	mov	r5,r16
   487cc:	0046fcc0 	call	46fcc <memmove>
   487d0:	003fa706 	br	48670 <_realloc_r+0x45c>
   487d4:	80800217 	ldw	r2,8(r16)
   487d8:	b8800415 	stw	r2,16(r23)
   487dc:	80800317 	ldw	r2,12(r16)
   487e0:	b8800515 	stw	r2,20(r23)
   487e4:	31000326 	beq	r6,r4,487f4 <_realloc_r+0x5e0>
   487e8:	b8800604 	addi	r2,r23,24
   487ec:	80c00404 	addi	r3,r16,16
   487f0:	003f9906 	br	48658 <_realloc_r+0x444>
   487f4:	81000417 	ldw	r4,16(r16)
   487f8:	b8800804 	addi	r2,r23,32
   487fc:	80c00604 	addi	r3,r16,24
   48800:	b9000615 	stw	r4,24(r23)
   48804:	81000517 	ldw	r4,20(r16)
   48808:	b9000715 	stw	r4,28(r23)
   4880c:	003f9206 	br	48658 <_realloc_r+0x444>

00048810 <__isinfd>:
   48810:	0105c83a 	sub	r2,zero,r4
   48814:	1108b03a 	or	r4,r2,r4
   48818:	2004d7fa 	srli	r2,r4,31
   4881c:	00e00034 	movhi	r3,32768
   48820:	18ffffc4 	addi	r3,r3,-1
   48824:	28ca703a 	and	r5,r5,r3
   48828:	1144b03a 	or	r2,r2,r5
   4882c:	00dffc34 	movhi	r3,32752
   48830:	1885c83a 	sub	r2,r3,r2
   48834:	0087c83a 	sub	r3,zero,r2
   48838:	1884b03a 	or	r2,r3,r2
   4883c:	1005d7fa 	srai	r2,r2,31
   48840:	10800044 	addi	r2,r2,1
   48844:	f800283a 	ret

00048848 <__isnand>:
   48848:	0105c83a 	sub	r2,zero,r4
   4884c:	1108b03a 	or	r4,r2,r4
   48850:	2004d7fa 	srli	r2,r4,31
   48854:	00e00034 	movhi	r3,32768
   48858:	18ffffc4 	addi	r3,r3,-1
   4885c:	28ca703a 	and	r5,r5,r3
   48860:	1144b03a 	or	r2,r2,r5
   48864:	00dffc34 	movhi	r3,32752
   48868:	1885c83a 	sub	r2,r3,r2
   4886c:	1004d7fa 	srli	r2,r2,31
   48870:	f800283a 	ret

00048874 <strcmp>:
   48874:	2904b03a 	or	r2,r5,r4
   48878:	108000cc 	andi	r2,r2,3
   4887c:	1000171e 	bne	r2,zero,488dc <strcmp+0x68>
   48880:	20800017 	ldw	r2,0(r4)
   48884:	28c00017 	ldw	r3,0(r5)
   48888:	10c0141e 	bne	r2,r3,488dc <strcmp+0x68>
   4888c:	027fbff4 	movhi	r9,65279
   48890:	4a7fbfc4 	addi	r9,r9,-257
   48894:	1247883a 	add	r3,r2,r9
   48898:	0084303a 	nor	r2,zero,r2
   4889c:	1884703a 	and	r2,r3,r2
   488a0:	02202074 	movhi	r8,32897
   488a4:	42202004 	addi	r8,r8,-32640
   488a8:	1204703a 	and	r2,r2,r8
   488ac:	10000226 	beq	r2,zero,488b8 <strcmp+0x44>
   488b0:	00001706 	br	48910 <strcmp+0x9c>
   488b4:	3000161e 	bne	r6,zero,48910 <strcmp+0x9c>
   488b8:	21000104 	addi	r4,r4,4
   488bc:	20800017 	ldw	r2,0(r4)
   488c0:	29400104 	addi	r5,r5,4
   488c4:	28c00017 	ldw	r3,0(r5)
   488c8:	124f883a 	add	r7,r2,r9
   488cc:	008c303a 	nor	r6,zero,r2
   488d0:	398c703a 	and	r6,r7,r6
   488d4:	320c703a 	and	r6,r6,r8
   488d8:	10fff626 	beq	r2,r3,488b4 <strcmp+0x40>
   488dc:	20800007 	ldb	r2,0(r4)
   488e0:	1000051e 	bne	r2,zero,488f8 <strcmp+0x84>
   488e4:	00000606 	br	48900 <strcmp+0x8c>
   488e8:	21000044 	addi	r4,r4,1
   488ec:	20800007 	ldb	r2,0(r4)
   488f0:	29400044 	addi	r5,r5,1
   488f4:	10000226 	beq	r2,zero,48900 <strcmp+0x8c>
   488f8:	28c00007 	ldb	r3,0(r5)
   488fc:	10fffa26 	beq	r2,r3,488e8 <strcmp+0x74>
   48900:	20c00003 	ldbu	r3,0(r4)
   48904:	28800003 	ldbu	r2,0(r5)
   48908:	1885c83a 	sub	r2,r3,r2
   4890c:	f800283a 	ret
   48910:	0005883a 	mov	r2,zero
   48914:	f800283a 	ret

00048918 <_calloc_r>:
   48918:	defffe04 	addi	sp,sp,-8
   4891c:	dc000015 	stw	r16,0(sp)
   48920:	2021883a 	mov	r16,r4
   48924:	3009883a 	mov	r4,r6
   48928:	dfc00115 	stw	ra,4(sp)
   4892c:	004a4cc0 	call	4a4cc <__mulsi3>
   48930:	8009883a 	mov	r4,r16
   48934:	100b883a 	mov	r5,r2
   48938:	0041ac80 	call	41ac8 <_malloc_r>
   4893c:	1021883a 	mov	r16,r2
   48940:	10000c26 	beq	r2,zero,48974 <_calloc_r+0x5c>
   48944:	11bfff17 	ldw	r6,-4(r2)
   48948:	00ffff04 	movi	r3,-4
   4894c:	00800904 	movi	r2,36
   48950:	30cc703a 	and	r6,r6,r3
   48954:	30cd883a 	add	r6,r6,r3
   48958:	11801436 	bltu	r2,r6,489ac <_calloc_r+0x94>
   4895c:	00c004c4 	movi	r3,19
   48960:	19800936 	bltu	r3,r6,48988 <_calloc_r+0x70>
   48964:	8005883a 	mov	r2,r16
   48968:	10000015 	stw	zero,0(r2)
   4896c:	10000115 	stw	zero,4(r2)
   48970:	10000215 	stw	zero,8(r2)
   48974:	8005883a 	mov	r2,r16
   48978:	dfc00117 	ldw	ra,4(sp)
   4897c:	dc000017 	ldw	r16,0(sp)
   48980:	dec00204 	addi	sp,sp,8
   48984:	f800283a 	ret
   48988:	80000015 	stw	zero,0(r16)
   4898c:	80000115 	stw	zero,4(r16)
   48990:	00c006c4 	movi	r3,27
   48994:	19800d2e 	bgeu	r3,r6,489cc <_calloc_r+0xb4>
   48998:	80000215 	stw	zero,8(r16)
   4899c:	80000315 	stw	zero,12(r16)
   489a0:	30800c26 	beq	r6,r2,489d4 <_calloc_r+0xbc>
   489a4:	80800404 	addi	r2,r16,16
   489a8:	003fef06 	br	48968 <_calloc_r+0x50>
   489ac:	8009883a 	mov	r4,r16
   489b0:	000b883a 	mov	r5,zero
   489b4:	004224c0 	call	4224c <memset>
   489b8:	8005883a 	mov	r2,r16
   489bc:	dfc00117 	ldw	ra,4(sp)
   489c0:	dc000017 	ldw	r16,0(sp)
   489c4:	dec00204 	addi	sp,sp,8
   489c8:	f800283a 	ret
   489cc:	80800204 	addi	r2,r16,8
   489d0:	003fe506 	br	48968 <_calloc_r+0x50>
   489d4:	80000415 	stw	zero,16(r16)
   489d8:	80000515 	stw	zero,20(r16)
   489dc:	80800604 	addi	r2,r16,24
   489e0:	003fe106 	br	48968 <_calloc_r+0x50>

000489e4 <__udivdi3>:
   489e4:	defff504 	addi	sp,sp,-44
   489e8:	dd000515 	stw	r20,20(sp)
   489ec:	dcc00415 	stw	r19,16(sp)
   489f0:	dc800315 	stw	r18,12(sp)
   489f4:	dc400215 	stw	r17,8(sp)
   489f8:	dc000115 	stw	r16,4(sp)
   489fc:	dfc00a15 	stw	ra,40(sp)
   48a00:	df000915 	stw	fp,36(sp)
   48a04:	ddc00815 	stw	r23,32(sp)
   48a08:	dd800715 	stw	r22,28(sp)
   48a0c:	dd400615 	stw	r21,24(sp)
   48a10:	2025883a 	mov	r18,r4
   48a14:	2823883a 	mov	r17,r5
   48a18:	3021883a 	mov	r16,r6
   48a1c:	2027883a 	mov	r19,r4
   48a20:	2829883a 	mov	r20,r5
   48a24:	3800451e 	bne	r7,zero,48b3c <__udivdi3+0x158>
   48a28:	2980652e 	bgeu	r5,r6,48bc0 <__udivdi3+0x1dc>
   48a2c:	00bfffd4 	movui	r2,65535
   48a30:	1180b436 	bltu	r2,r6,48d04 <__udivdi3+0x320>
   48a34:	00803fc4 	movi	r2,255
   48a38:	11816636 	bltu	r2,r6,48fd4 <__udivdi3+0x5f0>
   48a3c:	0005883a 	mov	r2,zero
   48a40:	0007883a 	mov	r3,zero
   48a44:	3084d83a 	srl	r2,r6,r2
   48a48:	01000174 	movhi	r4,5
   48a4c:	21384904 	addi	r4,r4,-7900
   48a50:	2085883a 	add	r2,r4,r2
   48a54:	10800003 	ldbu	r2,0(r2)
   48a58:	10c7883a 	add	r3,r2,r3
   48a5c:	00800804 	movi	r2,32
   48a60:	10c5c83a 	sub	r2,r2,r3
   48a64:	10000526 	beq	r2,zero,48a7c <__udivdi3+0x98>
   48a68:	88a2983a 	sll	r17,r17,r2
   48a6c:	90c6d83a 	srl	r3,r18,r3
   48a70:	30a0983a 	sll	r16,r6,r2
   48a74:	90a6983a 	sll	r19,r18,r2
   48a78:	88e8b03a 	or	r20,r17,r3
   48a7c:	8022d43a 	srli	r17,r16,16
   48a80:	a009883a 	mov	r4,r20
   48a84:	857fffcc 	andi	r21,r16,65535
   48a88:	880b883a 	mov	r5,r17
   48a8c:	004a4c40 	call	4a4c4 <__umodsi3>
   48a90:	a009883a 	mov	r4,r20
   48a94:	880b883a 	mov	r5,r17
   48a98:	102d883a 	mov	r22,r2
   48a9c:	004a4bc0 	call	4a4bc <__udivsi3>
   48aa0:	1009883a 	mov	r4,r2
   48aa4:	a80b883a 	mov	r5,r21
   48aa8:	1025883a 	mov	r18,r2
   48aac:	004a4cc0 	call	4a4cc <__mulsi3>
   48ab0:	1009883a 	mov	r4,r2
   48ab4:	b006943a 	slli	r3,r22,16
   48ab8:	9804d43a 	srli	r2,r19,16
   48abc:	1886b03a 	or	r3,r3,r2
   48ac0:	1900052e 	bgeu	r3,r4,48ad8 <__udivdi3+0xf4>
   48ac4:	1c07883a 	add	r3,r3,r16
   48ac8:	90bfffc4 	addi	r2,r18,-1
   48acc:	1c000136 	bltu	r3,r16,48ad4 <__udivdi3+0xf0>
   48ad0:	19015536 	bltu	r3,r4,49028 <__udivdi3+0x644>
   48ad4:	1025883a 	mov	r18,r2
   48ad8:	1929c83a 	sub	r20,r3,r4
   48adc:	880b883a 	mov	r5,r17
   48ae0:	a009883a 	mov	r4,r20
   48ae4:	004a4c40 	call	4a4c4 <__umodsi3>
   48ae8:	102d883a 	mov	r22,r2
   48aec:	880b883a 	mov	r5,r17
   48af0:	a009883a 	mov	r4,r20
   48af4:	b02c943a 	slli	r22,r22,16
   48af8:	004a4bc0 	call	4a4bc <__udivsi3>
   48afc:	1009883a 	mov	r4,r2
   48b00:	a80b883a 	mov	r5,r21
   48b04:	9cffffcc 	andi	r19,r19,65535
   48b08:	1023883a 	mov	r17,r2
   48b0c:	b4e6b03a 	or	r19,r22,r19
   48b10:	004a4cc0 	call	4a4cc <__mulsi3>
   48b14:	9880052e 	bgeu	r19,r2,48b2c <__udivdi3+0x148>
   48b18:	9c27883a 	add	r19,r19,r16
   48b1c:	88ffffc4 	addi	r3,r17,-1
   48b20:	9c011436 	bltu	r19,r16,48f74 <__udivdi3+0x590>
   48b24:	9881132e 	bgeu	r19,r2,48f74 <__udivdi3+0x590>
   48b28:	8c7fff84 	addi	r17,r17,-2
   48b2c:	9004943a 	slli	r2,r18,16
   48b30:	0007883a 	mov	r3,zero
   48b34:	8884b03a 	or	r2,r17,r2
   48b38:	00001506 	br	48b90 <__udivdi3+0x1ac>
   48b3c:	29c06a36 	bltu	r5,r7,48ce8 <__udivdi3+0x304>
   48b40:	00bfffd4 	movui	r2,65535
   48b44:	11c06a2e 	bgeu	r2,r7,48cf0 <__udivdi3+0x30c>
   48b48:	00804034 	movhi	r2,256
   48b4c:	10bfffc4 	addi	r2,r2,-1
   48b50:	11c11436 	bltu	r2,r7,48fa4 <__udivdi3+0x5c0>
   48b54:	00c00404 	movi	r3,16
   48b58:	180b883a 	mov	r5,r3
   48b5c:	38c6d83a 	srl	r3,r7,r3
   48b60:	01000174 	movhi	r4,5
   48b64:	21384904 	addi	r4,r4,-7900
   48b68:	04000804 	movi	r16,32
   48b6c:	20c7883a 	add	r3,r4,r3
   48b70:	18800003 	ldbu	r2,0(r3)
   48b74:	1145883a 	add	r2,r2,r5
   48b78:	80a1c83a 	sub	r16,r16,r2
   48b7c:	80006e1e 	bne	r16,zero,48d38 <__udivdi3+0x354>
   48b80:	0007883a 	mov	r3,zero
   48b84:	3c406a36 	bltu	r7,r17,48d30 <__udivdi3+0x34c>
   48b88:	9180692e 	bgeu	r18,r6,48d30 <__udivdi3+0x34c>
   48b8c:	0005883a 	mov	r2,zero
   48b90:	dfc00a17 	ldw	ra,40(sp)
   48b94:	df000917 	ldw	fp,36(sp)
   48b98:	ddc00817 	ldw	r23,32(sp)
   48b9c:	dd800717 	ldw	r22,28(sp)
   48ba0:	dd400617 	ldw	r21,24(sp)
   48ba4:	dd000517 	ldw	r20,20(sp)
   48ba8:	dcc00417 	ldw	r19,16(sp)
   48bac:	dc800317 	ldw	r18,12(sp)
   48bb0:	dc400217 	ldw	r17,8(sp)
   48bb4:	dc000117 	ldw	r16,4(sp)
   48bb8:	dec00b04 	addi	sp,sp,44
   48bbc:	f800283a 	ret
   48bc0:	3000041e 	bne	r6,zero,48bd4 <__udivdi3+0x1f0>
   48bc4:	01000044 	movi	r4,1
   48bc8:	000b883a 	mov	r5,zero
   48bcc:	004a4bc0 	call	4a4bc <__udivsi3>
   48bd0:	1021883a 	mov	r16,r2
   48bd4:	00bfffd4 	movui	r2,65535
   48bd8:	1400502e 	bgeu	r2,r16,48d1c <__udivdi3+0x338>
   48bdc:	00804034 	movhi	r2,256
   48be0:	10bfffc4 	addi	r2,r2,-1
   48be4:	1400f536 	bltu	r2,r16,48fbc <__udivdi3+0x5d8>
   48be8:	00800404 	movi	r2,16
   48bec:	1007883a 	mov	r3,r2
   48bf0:	8084d83a 	srl	r2,r16,r2
   48bf4:	01000174 	movhi	r4,5
   48bf8:	21384904 	addi	r4,r4,-7900
   48bfc:	2085883a 	add	r2,r4,r2
   48c00:	10800003 	ldbu	r2,0(r2)
   48c04:	10c7883a 	add	r3,r2,r3
   48c08:	00800804 	movi	r2,32
   48c0c:	10c5c83a 	sub	r2,r2,r3
   48c10:	1000a01e 	bne	r2,zero,48e94 <__udivdi3+0x4b0>
   48c14:	8028d43a 	srli	r20,r16,16
   48c18:	8c23c83a 	sub	r17,r17,r16
   48c1c:	857fffcc 	andi	r21,r16,65535
   48c20:	00c00044 	movi	r3,1
   48c24:	8809883a 	mov	r4,r17
   48c28:	a00b883a 	mov	r5,r20
   48c2c:	d8c00015 	stw	r3,0(sp)
   48c30:	004a4c40 	call	4a4c4 <__umodsi3>
   48c34:	8809883a 	mov	r4,r17
   48c38:	a00b883a 	mov	r5,r20
   48c3c:	102d883a 	mov	r22,r2
   48c40:	004a4bc0 	call	4a4bc <__udivsi3>
   48c44:	1009883a 	mov	r4,r2
   48c48:	a80b883a 	mov	r5,r21
   48c4c:	1025883a 	mov	r18,r2
   48c50:	004a4cc0 	call	4a4cc <__mulsi3>
   48c54:	1009883a 	mov	r4,r2
   48c58:	b00c943a 	slli	r6,r22,16
   48c5c:	9804d43a 	srli	r2,r19,16
   48c60:	d8c00017 	ldw	r3,0(sp)
   48c64:	308cb03a 	or	r6,r6,r2
   48c68:	3100052e 	bgeu	r6,r4,48c80 <__udivdi3+0x29c>
   48c6c:	340d883a 	add	r6,r6,r16
   48c70:	90bfffc4 	addi	r2,r18,-1
   48c74:	34000136 	bltu	r6,r16,48c7c <__udivdi3+0x298>
   48c78:	3100e836 	bltu	r6,r4,4901c <__udivdi3+0x638>
   48c7c:	1025883a 	mov	r18,r2
   48c80:	3123c83a 	sub	r17,r6,r4
   48c84:	8809883a 	mov	r4,r17
   48c88:	a00b883a 	mov	r5,r20
   48c8c:	d8c00015 	stw	r3,0(sp)
   48c90:	004a4c40 	call	4a4c4 <__umodsi3>
   48c94:	102d883a 	mov	r22,r2
   48c98:	8809883a 	mov	r4,r17
   48c9c:	a00b883a 	mov	r5,r20
   48ca0:	b02c943a 	slli	r22,r22,16
   48ca4:	004a4bc0 	call	4a4bc <__udivsi3>
   48ca8:	1009883a 	mov	r4,r2
   48cac:	a80b883a 	mov	r5,r21
   48cb0:	9cffffcc 	andi	r19,r19,65535
   48cb4:	1023883a 	mov	r17,r2
   48cb8:	b4e6b03a 	or	r19,r22,r19
   48cbc:	004a4cc0 	call	4a4cc <__mulsi3>
   48cc0:	d8c00017 	ldw	r3,0(sp)
   48cc4:	9880052e 	bgeu	r19,r2,48cdc <__udivdi3+0x2f8>
   48cc8:	9c27883a 	add	r19,r19,r16
   48ccc:	893fffc4 	addi	r4,r17,-1
   48cd0:	9c00aa36 	bltu	r19,r16,48f7c <__udivdi3+0x598>
   48cd4:	9880a92e 	bgeu	r19,r2,48f7c <__udivdi3+0x598>
   48cd8:	8c7fff84 	addi	r17,r17,-2
   48cdc:	9004943a 	slli	r2,r18,16
   48ce0:	8884b03a 	or	r2,r17,r2
   48ce4:	003faa06 	br	48b90 <__udivdi3+0x1ac>
   48ce8:	0007883a 	mov	r3,zero
   48cec:	003fa706 	br	48b8c <__udivdi3+0x1a8>
   48cf0:	00803fc4 	movi	r2,255
   48cf4:	11c0ae36 	bltu	r2,r7,48fb0 <__udivdi3+0x5cc>
   48cf8:	0007883a 	mov	r3,zero
   48cfc:	000b883a 	mov	r5,zero
   48d00:	003f9606 	br	48b5c <__udivdi3+0x178>
   48d04:	00804034 	movhi	r2,256
   48d08:	10bfffc4 	addi	r2,r2,-1
   48d0c:	1180ae36 	bltu	r2,r6,48fc8 <__udivdi3+0x5e4>
   48d10:	00800404 	movi	r2,16
   48d14:	1007883a 	mov	r3,r2
   48d18:	003f4a06 	br	48a44 <__udivdi3+0x60>
   48d1c:	00803fc4 	movi	r2,255
   48d20:	1400af36 	bltu	r2,r16,48fe0 <__udivdi3+0x5fc>
   48d24:	0005883a 	mov	r2,zero
   48d28:	0007883a 	mov	r3,zero
   48d2c:	003fb006 	br	48bf0 <__udivdi3+0x20c>
   48d30:	00800044 	movi	r2,1
   48d34:	003f9606 	br	48b90 <__udivdi3+0x1ac>
   48d38:	3c0e983a 	sll	r7,r7,r16
   48d3c:	3086d83a 	srl	r3,r6,r2
   48d40:	88aed83a 	srl	r23,r17,r2
   48d44:	9084d83a 	srl	r2,r18,r2
   48d48:	38e6b03a 	or	r19,r7,r3
   48d4c:	9828d43a 	srli	r20,r19,16
   48d50:	8c22983a 	sll	r17,r17,r16
   48d54:	b809883a 	mov	r4,r23
   48d58:	a00b883a 	mov	r5,r20
   48d5c:	342a983a 	sll	r21,r6,r16
   48d60:	88a2b03a 	or	r17,r17,r2
   48d64:	004a4c40 	call	4a4c4 <__umodsi3>
   48d68:	b809883a 	mov	r4,r23
   48d6c:	a00b883a 	mov	r5,r20
   48d70:	1039883a 	mov	fp,r2
   48d74:	9dbfffcc 	andi	r22,r19,65535
   48d78:	004a4bc0 	call	4a4bc <__udivsi3>
   48d7c:	1009883a 	mov	r4,r2
   48d80:	b00b883a 	mov	r5,r22
   48d84:	102f883a 	mov	r23,r2
   48d88:	004a4cc0 	call	4a4cc <__mulsi3>
   48d8c:	1009883a 	mov	r4,r2
   48d90:	e00e943a 	slli	r7,fp,16
   48d94:	8804d43a 	srli	r2,r17,16
   48d98:	388eb03a 	or	r7,r7,r2
   48d9c:	3900042e 	bgeu	r7,r4,48db0 <__udivdi3+0x3cc>
   48da0:	3ccf883a 	add	r7,r7,r19
   48da4:	b8bfffc4 	addi	r2,r23,-1
   48da8:	3cc0942e 	bgeu	r7,r19,48ffc <__udivdi3+0x618>
   48dac:	102f883a 	mov	r23,r2
   48db0:	3939c83a 	sub	fp,r7,r4
   48db4:	a00b883a 	mov	r5,r20
   48db8:	e009883a 	mov	r4,fp
   48dbc:	004a4c40 	call	4a4c4 <__umodsi3>
   48dc0:	a00b883a 	mov	r5,r20
   48dc4:	e009883a 	mov	r4,fp
   48dc8:	d8800015 	stw	r2,0(sp)
   48dcc:	004a4bc0 	call	4a4bc <__udivsi3>
   48dd0:	1009883a 	mov	r4,r2
   48dd4:	b00b883a 	mov	r5,r22
   48dd8:	1029883a 	mov	r20,r2
   48ddc:	004a4cc0 	call	4a4cc <__mulsi3>
   48de0:	d8c00017 	ldw	r3,0(sp)
   48de4:	8c7fffcc 	andi	r17,r17,65535
   48de8:	1806943a 	slli	r3,r3,16
   48dec:	1c46b03a 	or	r3,r3,r17
   48df0:	1880042e 	bgeu	r3,r2,48e04 <__udivdi3+0x420>
   48df4:	1cc7883a 	add	r3,r3,r19
   48df8:	a13fffc4 	addi	r4,r20,-1
   48dfc:	1cc07b2e 	bgeu	r3,r19,48fec <__udivdi3+0x608>
   48e00:	2029883a 	mov	r20,r4
   48e04:	b82e943a 	slli	r23,r23,16
   48e08:	a822d43a 	srli	r17,r21,16
   48e0c:	ad7fffcc 	andi	r21,r21,65535
   48e10:	a5e8b03a 	or	r20,r20,r23
   48e14:	a5bfffcc 	andi	r22,r20,65535
   48e18:	b009883a 	mov	r4,r22
   48e1c:	a80b883a 	mov	r5,r21
   48e20:	18afc83a 	sub	r23,r3,r2
   48e24:	a026d43a 	srli	r19,r20,16
   48e28:	004a4cc0 	call	4a4cc <__mulsi3>
   48e2c:	b009883a 	mov	r4,r22
   48e30:	880b883a 	mov	r5,r17
   48e34:	1039883a 	mov	fp,r2
   48e38:	004a4cc0 	call	4a4cc <__mulsi3>
   48e3c:	a80b883a 	mov	r5,r21
   48e40:	9809883a 	mov	r4,r19
   48e44:	102d883a 	mov	r22,r2
   48e48:	004a4cc0 	call	4a4cc <__mulsi3>
   48e4c:	9809883a 	mov	r4,r19
   48e50:	880b883a 	mov	r5,r17
   48e54:	102b883a 	mov	r21,r2
   48e58:	004a4cc0 	call	4a4cc <__mulsi3>
   48e5c:	100b883a 	mov	r5,r2
   48e60:	e004d43a 	srli	r2,fp,16
   48e64:	ad89883a 	add	r4,r21,r22
   48e68:	2089883a 	add	r4,r4,r2
   48e6c:	2540022e 	bgeu	r4,r21,48e78 <__udivdi3+0x494>
   48e70:	00800074 	movhi	r2,1
   48e74:	288b883a 	add	r5,r5,r2
   48e78:	2004d43a 	srli	r2,r4,16
   48e7c:	288b883a 	add	r5,r5,r2
   48e80:	b9404536 	bltu	r23,r5,48f98 <__udivdi3+0x5b4>
   48e84:	b9403f26 	beq	r23,r5,48f84 <__udivdi3+0x5a0>
   48e88:	a005883a 	mov	r2,r20
   48e8c:	0007883a 	mov	r3,zero
   48e90:	003f3f06 	br	48b90 <__udivdi3+0x1ac>
   48e94:	80a0983a 	sll	r16,r16,r2
   48e98:	88eed83a 	srl	r23,r17,r3
   48e9c:	90c6d83a 	srl	r3,r18,r3
   48ea0:	8028d43a 	srli	r20,r16,16
   48ea4:	88a2983a 	sll	r17,r17,r2
   48ea8:	b809883a 	mov	r4,r23
   48eac:	a00b883a 	mov	r5,r20
   48eb0:	88ecb03a 	or	r22,r17,r3
   48eb4:	90a6983a 	sll	r19,r18,r2
   48eb8:	004a4c40 	call	4a4c4 <__umodsi3>
   48ebc:	b809883a 	mov	r4,r23
   48ec0:	a00b883a 	mov	r5,r20
   48ec4:	1023883a 	mov	r17,r2
   48ec8:	857fffcc 	andi	r21,r16,65535
   48ecc:	004a4bc0 	call	4a4bc <__udivsi3>
   48ed0:	1009883a 	mov	r4,r2
   48ed4:	a80b883a 	mov	r5,r21
   48ed8:	102f883a 	mov	r23,r2
   48edc:	004a4cc0 	call	4a4cc <__mulsi3>
   48ee0:	1009883a 	mov	r4,r2
   48ee4:	880a943a 	slli	r5,r17,16
   48ee8:	b004d43a 	srli	r2,r22,16
   48eec:	288ab03a 	or	r5,r5,r2
   48ef0:	2900062e 	bgeu	r5,r4,48f0c <__udivdi3+0x528>
   48ef4:	2c0b883a 	add	r5,r5,r16
   48ef8:	b8bfffc4 	addi	r2,r23,-1
   48efc:	2c004536 	bltu	r5,r16,49014 <__udivdi3+0x630>
   48f00:	2900442e 	bgeu	r5,r4,49014 <__udivdi3+0x630>
   48f04:	bdffff84 	addi	r23,r23,-2
   48f08:	2c0b883a 	add	r5,r5,r16
   48f0c:	2925c83a 	sub	r18,r5,r4
   48f10:	9009883a 	mov	r4,r18
   48f14:	a00b883a 	mov	r5,r20
   48f18:	004a4c40 	call	4a4c4 <__umodsi3>
   48f1c:	1023883a 	mov	r17,r2
   48f20:	9009883a 	mov	r4,r18
   48f24:	a00b883a 	mov	r5,r20
   48f28:	8822943a 	slli	r17,r17,16
   48f2c:	004a4bc0 	call	4a4bc <__udivsi3>
   48f30:	1009883a 	mov	r4,r2
   48f34:	a80b883a 	mov	r5,r21
   48f38:	b5bfffcc 	andi	r22,r22,65535
   48f3c:	1025883a 	mov	r18,r2
   48f40:	8da2b03a 	or	r17,r17,r22
   48f44:	004a4cc0 	call	4a4cc <__mulsi3>
   48f48:	8880062e 	bgeu	r17,r2,48f64 <__udivdi3+0x580>
   48f4c:	8c23883a 	add	r17,r17,r16
   48f50:	90ffffc4 	addi	r3,r18,-1
   48f54:	8c002d36 	bltu	r17,r16,4900c <__udivdi3+0x628>
   48f58:	88802c2e 	bgeu	r17,r2,4900c <__udivdi3+0x628>
   48f5c:	94bfff84 	addi	r18,r18,-2
   48f60:	8c23883a 	add	r17,r17,r16
   48f64:	b806943a 	slli	r3,r23,16
   48f68:	88a3c83a 	sub	r17,r17,r2
   48f6c:	90c6b03a 	or	r3,r18,r3
   48f70:	003f2c06 	br	48c24 <__udivdi3+0x240>
   48f74:	1823883a 	mov	r17,r3
   48f78:	003eec06 	br	48b2c <__udivdi3+0x148>
   48f7c:	2023883a 	mov	r17,r4
   48f80:	003f5606 	br	48cdc <__udivdi3+0x2f8>
   48f84:	2008943a 	slli	r4,r4,16
   48f88:	9420983a 	sll	r16,r18,r16
   48f8c:	e73fffcc 	andi	fp,fp,65535
   48f90:	2709883a 	add	r4,r4,fp
   48f94:	813fbc2e 	bgeu	r16,r4,48e88 <__udivdi3+0x4a4>
   48f98:	a0bfffc4 	addi	r2,r20,-1
   48f9c:	0007883a 	mov	r3,zero
   48fa0:	003efb06 	br	48b90 <__udivdi3+0x1ac>
   48fa4:	00c00604 	movi	r3,24
   48fa8:	180b883a 	mov	r5,r3
   48fac:	003eeb06 	br	48b5c <__udivdi3+0x178>
   48fb0:	00c00204 	movi	r3,8
   48fb4:	180b883a 	mov	r5,r3
   48fb8:	003ee806 	br	48b5c <__udivdi3+0x178>
   48fbc:	00800604 	movi	r2,24
   48fc0:	1007883a 	mov	r3,r2
   48fc4:	003f0a06 	br	48bf0 <__udivdi3+0x20c>
   48fc8:	00800604 	movi	r2,24
   48fcc:	1007883a 	mov	r3,r2
   48fd0:	003e9c06 	br	48a44 <__udivdi3+0x60>
   48fd4:	00800204 	movi	r2,8
   48fd8:	1007883a 	mov	r3,r2
   48fdc:	003e9906 	br	48a44 <__udivdi3+0x60>
   48fe0:	00800204 	movi	r2,8
   48fe4:	1007883a 	mov	r3,r2
   48fe8:	003f0106 	br	48bf0 <__udivdi3+0x20c>
   48fec:	18bf842e 	bgeu	r3,r2,48e00 <__udivdi3+0x41c>
   48ff0:	a53fff84 	addi	r20,r20,-2
   48ff4:	1cc7883a 	add	r3,r3,r19
   48ff8:	003f8206 	br	48e04 <__udivdi3+0x420>
   48ffc:	393f6b2e 	bgeu	r7,r4,48dac <__udivdi3+0x3c8>
   49000:	bdffff84 	addi	r23,r23,-2
   49004:	3ccf883a 	add	r7,r7,r19
   49008:	003f6906 	br	48db0 <__udivdi3+0x3cc>
   4900c:	1825883a 	mov	r18,r3
   49010:	003fd406 	br	48f64 <__udivdi3+0x580>
   49014:	102f883a 	mov	r23,r2
   49018:	003fbc06 	br	48f0c <__udivdi3+0x528>
   4901c:	94bfff84 	addi	r18,r18,-2
   49020:	340d883a 	add	r6,r6,r16
   49024:	003f1606 	br	48c80 <__udivdi3+0x29c>
   49028:	94bfff84 	addi	r18,r18,-2
   4902c:	1c07883a 	add	r3,r3,r16
   49030:	003ea906 	br	48ad8 <__udivdi3+0xf4>

00049034 <__umoddi3>:
   49034:	defff304 	addi	sp,sp,-52
   49038:	dd000715 	stw	r20,28(sp)
   4903c:	dcc00615 	stw	r19,24(sp)
   49040:	dc800515 	stw	r18,20(sp)
   49044:	dc400415 	stw	r17,16(sp)
   49048:	dc000315 	stw	r16,12(sp)
   4904c:	dfc00c15 	stw	ra,48(sp)
   49050:	df000b15 	stw	fp,44(sp)
   49054:	ddc00a15 	stw	r23,40(sp)
   49058:	dd800915 	stw	r22,36(sp)
   4905c:	dd400815 	stw	r21,32(sp)
   49060:	2025883a 	mov	r18,r4
   49064:	2823883a 	mov	r17,r5
   49068:	3021883a 	mov	r16,r6
   4906c:	2027883a 	mov	r19,r4
   49070:	2829883a 	mov	r20,r5
   49074:	38003a1e 	bne	r7,zero,49160 <__umoddi3+0x12c>
   49078:	2980522e 	bgeu	r5,r6,491c4 <__umoddi3+0x190>
   4907c:	00bfffd4 	movui	r2,65535
   49080:	1180a436 	bltu	r2,r6,49314 <__umoddi3+0x2e0>
   49084:	00803fc4 	movi	r2,255
   49088:	11816036 	bltu	r2,r6,4960c <__umoddi3+0x5d8>
   4908c:	0005883a 	mov	r2,zero
   49090:	0009883a 	mov	r4,zero
   49094:	3084d83a 	srl	r2,r6,r2
   49098:	00c00174 	movhi	r3,5
   4909c:	18f84904 	addi	r3,r3,-7900
   490a0:	05400804 	movi	r21,32
   490a4:	1885883a 	add	r2,r3,r2
   490a8:	10800003 	ldbu	r2,0(r2)
   490ac:	1109883a 	add	r4,r2,r4
   490b0:	a92bc83a 	sub	r21,r21,r4
   490b4:	a8010e26 	beq	r21,zero,494f0 <__umoddi3+0x4bc>
   490b8:	8d62983a 	sll	r17,r17,r21
   490bc:	9108d83a 	srl	r4,r18,r4
   490c0:	3560983a 	sll	r16,r6,r21
   490c4:	9566983a 	sll	r19,r18,r21
   490c8:	8928b03a 	or	r20,r17,r4
   490cc:	8022d43a 	srli	r17,r16,16
   490d0:	a009883a 	mov	r4,r20
   490d4:	84bfffcc 	andi	r18,r16,65535
   490d8:	880b883a 	mov	r5,r17
   490dc:	004a4c40 	call	4a4c4 <__umodsi3>
   490e0:	a009883a 	mov	r4,r20
   490e4:	880b883a 	mov	r5,r17
   490e8:	102d883a 	mov	r22,r2
   490ec:	004a4bc0 	call	4a4bc <__udivsi3>
   490f0:	1009883a 	mov	r4,r2
   490f4:	900b883a 	mov	r5,r18
   490f8:	004a4cc0 	call	4a4cc <__mulsi3>
   490fc:	1009883a 	mov	r4,r2
   49100:	b006943a 	slli	r3,r22,16
   49104:	9804d43a 	srli	r2,r19,16
   49108:	1886b03a 	or	r3,r3,r2
   4910c:	1900042e 	bgeu	r3,r4,49120 <__umoddi3+0xec>
   49110:	1c07883a 	add	r3,r3,r16
   49114:	1c000236 	bltu	r3,r16,49120 <__umoddi3+0xec>
   49118:	1900012e 	bgeu	r3,r4,49120 <__umoddi3+0xec>
   4911c:	1c07883a 	add	r3,r3,r16
   49120:	1929c83a 	sub	r20,r3,r4
   49124:	a009883a 	mov	r4,r20
   49128:	880b883a 	mov	r5,r17
   4912c:	004a4c40 	call	4a4c4 <__umodsi3>
   49130:	102d883a 	mov	r22,r2
   49134:	a009883a 	mov	r4,r20
   49138:	880b883a 	mov	r5,r17
   4913c:	b02c943a 	slli	r22,r22,16
   49140:	004a4bc0 	call	4a4bc <__udivsi3>
   49144:	1009883a 	mov	r4,r2
   49148:	900b883a 	mov	r5,r18
   4914c:	9cffffcc 	andi	r19,r19,65535
   49150:	004a4cc0 	call	4a4cc <__mulsi3>
   49154:	b4e6b03a 	or	r19,r22,r19
   49158:	9880572e 	bgeu	r19,r2,492b8 <__umoddi3+0x284>
   4915c:	00005206 	br	492a8 <__umoddi3+0x274>
   49160:	29c05936 	bltu	r5,r7,492c8 <__umoddi3+0x294>
   49164:	00bfffd4 	movui	r2,65535
   49168:	11c0652e 	bgeu	r2,r7,49300 <__umoddi3+0x2cc>
   4916c:	00804034 	movhi	r2,256
   49170:	10bfffc4 	addi	r2,r2,-1
   49174:	11c11936 	bltu	r2,r7,495dc <__umoddi3+0x5a8>
   49178:	00c00404 	movi	r3,16
   4917c:	1827883a 	mov	r19,r3
   49180:	38c6d83a 	srl	r3,r7,r3
   49184:	01000174 	movhi	r4,5
   49188:	21384904 	addi	r4,r4,-7900
   4918c:	04000804 	movi	r16,32
   49190:	20c7883a 	add	r3,r4,r3
   49194:	18800003 	ldbu	r2,0(r3)
   49198:	14e7883a 	add	r19,r2,r19
   4919c:	84e1c83a 	sub	r16,r16,r19
   491a0:	8000671e 	bne	r16,zero,49340 <__umoddi3+0x30c>
   491a4:	3c400136 	bltu	r7,r17,491ac <__umoddi3+0x178>
   491a8:	91812536 	bltu	r18,r6,49640 <__umoddi3+0x60c>
   491ac:	9185c83a 	sub	r2,r18,r6
   491b0:	89e3c83a 	sub	r17,r17,r7
   491b4:	90a5803a 	cmpltu	r18,r18,r2
   491b8:	8ca9c83a 	sub	r20,r17,r18
   491bc:	a007883a 	mov	r3,r20
   491c0:	00004306 	br	492d0 <__umoddi3+0x29c>
   491c4:	3000041e 	bne	r6,zero,491d8 <__umoddi3+0x1a4>
   491c8:	01000044 	movi	r4,1
   491cc:	000b883a 	mov	r5,zero
   491d0:	004a4bc0 	call	4a4bc <__udivsi3>
   491d4:	1021883a 	mov	r16,r2
   491d8:	00bfffd4 	movui	r2,65535
   491dc:	1400532e 	bgeu	r2,r16,4932c <__umoddi3+0x2f8>
   491e0:	00804034 	movhi	r2,256
   491e4:	10bfffc4 	addi	r2,r2,-1
   491e8:	14010536 	bltu	r2,r16,49600 <__umoddi3+0x5cc>
   491ec:	00800404 	movi	r2,16
   491f0:	1007883a 	mov	r3,r2
   491f4:	8084d83a 	srl	r2,r16,r2
   491f8:	01000174 	movhi	r4,5
   491fc:	21384904 	addi	r4,r4,-7900
   49200:	05400804 	movi	r21,32
   49204:	2085883a 	add	r2,r4,r2
   49208:	10800003 	ldbu	r2,0(r2)
   4920c:	10c7883a 	add	r3,r2,r3
   49210:	a8ebc83a 	sub	r21,r21,r3
   49214:	a800b81e 	bne	r21,zero,494f8 <__umoddi3+0x4c4>
   49218:	8028d43a 	srli	r20,r16,16
   4921c:	8c23c83a 	sub	r17,r17,r16
   49220:	85bfffcc 	andi	r22,r16,65535
   49224:	8809883a 	mov	r4,r17
   49228:	a00b883a 	mov	r5,r20
   4922c:	004a4c40 	call	4a4c4 <__umodsi3>
   49230:	8809883a 	mov	r4,r17
   49234:	a00b883a 	mov	r5,r20
   49238:	1025883a 	mov	r18,r2
   4923c:	004a4bc0 	call	4a4bc <__udivsi3>
   49240:	1009883a 	mov	r4,r2
   49244:	b00b883a 	mov	r5,r22
   49248:	004a4cc0 	call	4a4cc <__mulsi3>
   4924c:	1009883a 	mov	r4,r2
   49250:	9006943a 	slli	r3,r18,16
   49254:	9804d43a 	srli	r2,r19,16
   49258:	1886b03a 	or	r3,r3,r2
   4925c:	1900032e 	bgeu	r3,r4,4926c <__umoddi3+0x238>
   49260:	1c07883a 	add	r3,r3,r16
   49264:	1c000136 	bltu	r3,r16,4926c <__umoddi3+0x238>
   49268:	1900f336 	bltu	r3,r4,49638 <__umoddi3+0x604>
   4926c:	1923c83a 	sub	r17,r3,r4
   49270:	8809883a 	mov	r4,r17
   49274:	a00b883a 	mov	r5,r20
   49278:	004a4c40 	call	4a4c4 <__umodsi3>
   4927c:	102f883a 	mov	r23,r2
   49280:	8809883a 	mov	r4,r17
   49284:	a00b883a 	mov	r5,r20
   49288:	b82e943a 	slli	r23,r23,16
   4928c:	004a4bc0 	call	4a4bc <__udivsi3>
   49290:	1009883a 	mov	r4,r2
   49294:	b00b883a 	mov	r5,r22
   49298:	9cffffcc 	andi	r19,r19,65535
   4929c:	004a4cc0 	call	4a4cc <__mulsi3>
   492a0:	bce6b03a 	or	r19,r23,r19
   492a4:	9880042e 	bgeu	r19,r2,492b8 <__umoddi3+0x284>
   492a8:	9c27883a 	add	r19,r19,r16
   492ac:	9c000236 	bltu	r19,r16,492b8 <__umoddi3+0x284>
   492b0:	9880012e 	bgeu	r19,r2,492b8 <__umoddi3+0x284>
   492b4:	9c27883a 	add	r19,r19,r16
   492b8:	9885c83a 	sub	r2,r19,r2
   492bc:	1544d83a 	srl	r2,r2,r21
   492c0:	0007883a 	mov	r3,zero
   492c4:	00000206 	br	492d0 <__umoddi3+0x29c>
   492c8:	2005883a 	mov	r2,r4
   492cc:	2807883a 	mov	r3,r5
   492d0:	dfc00c17 	ldw	ra,48(sp)
   492d4:	df000b17 	ldw	fp,44(sp)
   492d8:	ddc00a17 	ldw	r23,40(sp)
   492dc:	dd800917 	ldw	r22,36(sp)
   492e0:	dd400817 	ldw	r21,32(sp)
   492e4:	dd000717 	ldw	r20,28(sp)
   492e8:	dcc00617 	ldw	r19,24(sp)
   492ec:	dc800517 	ldw	r18,20(sp)
   492f0:	dc400417 	ldw	r17,16(sp)
   492f4:	dc000317 	ldw	r16,12(sp)
   492f8:	dec00d04 	addi	sp,sp,52
   492fc:	f800283a 	ret
   49300:	00803fc4 	movi	r2,255
   49304:	11c0b236 	bltu	r2,r7,495d0 <__umoddi3+0x59c>
   49308:	0007883a 	mov	r3,zero
   4930c:	0027883a 	mov	r19,zero
   49310:	003f9b06 	br	49180 <__umoddi3+0x14c>
   49314:	00804034 	movhi	r2,256
   49318:	10bfffc4 	addi	r2,r2,-1
   4931c:	1180b236 	bltu	r2,r6,495e8 <__umoddi3+0x5b4>
   49320:	00800404 	movi	r2,16
   49324:	1009883a 	mov	r4,r2
   49328:	003f5a06 	br	49094 <__umoddi3+0x60>
   4932c:	00803fc4 	movi	r2,255
   49330:	1400b036 	bltu	r2,r16,495f4 <__umoddi3+0x5c0>
   49334:	0005883a 	mov	r2,zero
   49338:	0007883a 	mov	r3,zero
   4933c:	003fad06 	br	491f4 <__umoddi3+0x1c0>
   49340:	34c4d83a 	srl	r2,r6,r19
   49344:	3c0e983a 	sll	r7,r7,r16
   49348:	8cf8d83a 	srl	fp,r17,r19
   4934c:	8c22983a 	sll	r17,r17,r16
   49350:	38a8b03a 	or	r20,r7,r2
   49354:	a02ad43a 	srli	r21,r20,16
   49358:	94c4d83a 	srl	r2,r18,r19
   4935c:	e009883a 	mov	r4,fp
   49360:	a80b883a 	mov	r5,r21
   49364:	342c983a 	sll	r22,r6,r16
   49368:	88a2b03a 	or	r17,r17,r2
   4936c:	004a4c40 	call	4a4c4 <__umodsi3>
   49370:	e009883a 	mov	r4,fp
   49374:	a80b883a 	mov	r5,r21
   49378:	a5ffffcc 	andi	r23,r20,65535
   4937c:	d8800215 	stw	r2,8(sp)
   49380:	004a4bc0 	call	4a4bc <__udivsi3>
   49384:	1009883a 	mov	r4,r2
   49388:	b80b883a 	mov	r5,r23
   4938c:	1039883a 	mov	fp,r2
   49390:	004a4cc0 	call	4a4cc <__mulsi3>
   49394:	d8c00217 	ldw	r3,8(sp)
   49398:	1009883a 	mov	r4,r2
   4939c:	8804d43a 	srli	r2,r17,16
   493a0:	1806943a 	slli	r3,r3,16
   493a4:	9424983a 	sll	r18,r18,r16
   493a8:	1886b03a 	or	r3,r3,r2
   493ac:	1900042e 	bgeu	r3,r4,493c0 <__umoddi3+0x38c>
   493b0:	1d07883a 	add	r3,r3,r20
   493b4:	e0bfffc4 	addi	r2,fp,-1
   493b8:	1d009b2e 	bgeu	r3,r20,49628 <__umoddi3+0x5f4>
   493bc:	1039883a 	mov	fp,r2
   493c0:	1907c83a 	sub	r3,r3,r4
   493c4:	1809883a 	mov	r4,r3
   493c8:	a80b883a 	mov	r5,r21
   493cc:	d8c00215 	stw	r3,8(sp)
   493d0:	004a4c40 	call	4a4c4 <__umodsi3>
   493d4:	d8c00217 	ldw	r3,8(sp)
   493d8:	a80b883a 	mov	r5,r21
   493dc:	d8800015 	stw	r2,0(sp)
   493e0:	1809883a 	mov	r4,r3
   493e4:	004a4bc0 	call	4a4bc <__udivsi3>
   493e8:	1009883a 	mov	r4,r2
   493ec:	b80b883a 	mov	r5,r23
   493f0:	102b883a 	mov	r21,r2
   493f4:	004a4cc0 	call	4a4cc <__mulsi3>
   493f8:	d9c00017 	ldw	r7,0(sp)
   493fc:	8c7fffcc 	andi	r17,r17,65535
   49400:	380e943a 	slli	r7,r7,16
   49404:	3c4eb03a 	or	r7,r7,r17
   49408:	3880042e 	bgeu	r7,r2,4941c <__umoddi3+0x3e8>
   4940c:	3d0f883a 	add	r7,r7,r20
   49410:	a8ffffc4 	addi	r3,r21,-1
   49414:	3d00802e 	bgeu	r7,r20,49618 <__umoddi3+0x5e4>
   49418:	182b883a 	mov	r21,r3
   4941c:	e038943a 	slli	fp,fp,16
   49420:	b010d43a 	srli	r8,r22,16
   49424:	b1bfffcc 	andi	r6,r22,65535
   49428:	af2ab03a 	or	r21,r21,fp
   4942c:	a82ed43a 	srli	r23,r21,16
   49430:	ad7fffcc 	andi	r21,r21,65535
   49434:	300b883a 	mov	r5,r6
   49438:	a809883a 	mov	r4,r21
   4943c:	38a3c83a 	sub	r17,r7,r2
   49440:	d9800115 	stw	r6,4(sp)
   49444:	da000015 	stw	r8,0(sp)
   49448:	004a4cc0 	call	4a4cc <__mulsi3>
   4944c:	da000017 	ldw	r8,0(sp)
   49450:	a809883a 	mov	r4,r21
   49454:	1039883a 	mov	fp,r2
   49458:	400b883a 	mov	r5,r8
   4945c:	da000215 	stw	r8,8(sp)
   49460:	004a4cc0 	call	4a4cc <__mulsi3>
   49464:	d9800117 	ldw	r6,4(sp)
   49468:	b809883a 	mov	r4,r23
   4946c:	d8800015 	stw	r2,0(sp)
   49470:	300b883a 	mov	r5,r6
   49474:	004a4cc0 	call	4a4cc <__mulsi3>
   49478:	d8c00217 	ldw	r3,8(sp)
   4947c:	b809883a 	mov	r4,r23
   49480:	102b883a 	mov	r21,r2
   49484:	180b883a 	mov	r5,r3
   49488:	004a4cc0 	call	4a4cc <__mulsi3>
   4948c:	d9c00017 	ldw	r7,0(sp)
   49490:	1007883a 	mov	r3,r2
   49494:	e004d43a 	srli	r2,fp,16
   49498:	a9c9883a 	add	r4,r21,r7
   4949c:	2089883a 	add	r4,r4,r2
   494a0:	2540022e 	bgeu	r4,r21,494ac <__umoddi3+0x478>
   494a4:	00800074 	movhi	r2,1
   494a8:	1887883a 	add	r3,r3,r2
   494ac:	2004d43a 	srli	r2,r4,16
   494b0:	2008943a 	slli	r4,r4,16
   494b4:	e73fffcc 	andi	fp,fp,65535
   494b8:	1887883a 	add	r3,r3,r2
   494bc:	2709883a 	add	r4,r4,fp
   494c0:	88c03d36 	bltu	r17,r3,495b8 <__umoddi3+0x584>
   494c4:	88c06126 	beq	r17,r3,4964c <__umoddi3+0x618>
   494c8:	88c7c83a 	sub	r3,r17,r3
   494cc:	202d883a 	mov	r22,r4
   494d0:	95adc83a 	sub	r22,r18,r22
   494d4:	95a5803a 	cmpltu	r18,r18,r22
   494d8:	1c87c83a 	sub	r3,r3,r18
   494dc:	1cc4983a 	sll	r2,r3,r19
   494e0:	b42cd83a 	srl	r22,r22,r16
   494e4:	1c06d83a 	srl	r3,r3,r16
   494e8:	1584b03a 	or	r2,r2,r22
   494ec:	003f7806 	br	492d0 <__umoddi3+0x29c>
   494f0:	002b883a 	mov	r21,zero
   494f4:	003ef506 	br	490cc <__umoddi3+0x98>
   494f8:	8560983a 	sll	r16,r16,r21
   494fc:	88e6d83a 	srl	r19,r17,r3
   49500:	90c6d83a 	srl	r3,r18,r3
   49504:	8028d43a 	srli	r20,r16,16
   49508:	8d62983a 	sll	r17,r17,r21
   4950c:	9809883a 	mov	r4,r19
   49510:	a00b883a 	mov	r5,r20
   49514:	88eeb03a 	or	r23,r17,r3
   49518:	004a4c40 	call	4a4c4 <__umodsi3>
   4951c:	9809883a 	mov	r4,r19
   49520:	a00b883a 	mov	r5,r20
   49524:	1023883a 	mov	r17,r2
   49528:	85bfffcc 	andi	r22,r16,65535
   4952c:	004a4bc0 	call	4a4bc <__udivsi3>
   49530:	1009883a 	mov	r4,r2
   49534:	b00b883a 	mov	r5,r22
   49538:	004a4cc0 	call	4a4cc <__mulsi3>
   4953c:	1007883a 	mov	r3,r2
   49540:	8808943a 	slli	r4,r17,16
   49544:	b804d43a 	srli	r2,r23,16
   49548:	9566983a 	sll	r19,r18,r21
   4954c:	2088b03a 	or	r4,r4,r2
   49550:	20c0042e 	bgeu	r4,r3,49564 <__umoddi3+0x530>
   49554:	2409883a 	add	r4,r4,r16
   49558:	24000236 	bltu	r4,r16,49564 <__umoddi3+0x530>
   4955c:	20c0012e 	bgeu	r4,r3,49564 <__umoddi3+0x530>
   49560:	2409883a 	add	r4,r4,r16
   49564:	20e5c83a 	sub	r18,r4,r3
   49568:	9009883a 	mov	r4,r18
   4956c:	a00b883a 	mov	r5,r20
   49570:	004a4c40 	call	4a4c4 <__umodsi3>
   49574:	1023883a 	mov	r17,r2
   49578:	9009883a 	mov	r4,r18
   4957c:	a00b883a 	mov	r5,r20
   49580:	8822943a 	slli	r17,r17,16
   49584:	004a4bc0 	call	4a4bc <__udivsi3>
   49588:	1009883a 	mov	r4,r2
   4958c:	b00b883a 	mov	r5,r22
   49590:	bdffffcc 	andi	r23,r23,65535
   49594:	004a4cc0 	call	4a4cc <__mulsi3>
   49598:	8de2b03a 	or	r17,r17,r23
   4959c:	8880042e 	bgeu	r17,r2,495b0 <__umoddi3+0x57c>
   495a0:	8c23883a 	add	r17,r17,r16
   495a4:	8c000236 	bltu	r17,r16,495b0 <__umoddi3+0x57c>
   495a8:	8880012e 	bgeu	r17,r2,495b0 <__umoddi3+0x57c>
   495ac:	8c23883a 	add	r17,r17,r16
   495b0:	88a3c83a 	sub	r17,r17,r2
   495b4:	003f1b06 	br	49224 <__umoddi3+0x1f0>
   495b8:	25adc83a 	sub	r22,r4,r22
   495bc:	1d07c83a 	sub	r3,r3,r20
   495c0:	2589803a 	cmpltu	r4,r4,r22
   495c4:	1907c83a 	sub	r3,r3,r4
   495c8:	88c7c83a 	sub	r3,r17,r3
   495cc:	003fc006 	br	494d0 <__umoddi3+0x49c>
   495d0:	00c00204 	movi	r3,8
   495d4:	1827883a 	mov	r19,r3
   495d8:	003ee906 	br	49180 <__umoddi3+0x14c>
   495dc:	00c00604 	movi	r3,24
   495e0:	1827883a 	mov	r19,r3
   495e4:	003ee606 	br	49180 <__umoddi3+0x14c>
   495e8:	00800604 	movi	r2,24
   495ec:	1009883a 	mov	r4,r2
   495f0:	003ea806 	br	49094 <__umoddi3+0x60>
   495f4:	00800204 	movi	r2,8
   495f8:	1007883a 	mov	r3,r2
   495fc:	003efd06 	br	491f4 <__umoddi3+0x1c0>
   49600:	00800604 	movi	r2,24
   49604:	1007883a 	mov	r3,r2
   49608:	003efa06 	br	491f4 <__umoddi3+0x1c0>
   4960c:	00800204 	movi	r2,8
   49610:	1009883a 	mov	r4,r2
   49614:	003e9f06 	br	49094 <__umoddi3+0x60>
   49618:	38bf7f2e 	bgeu	r7,r2,49418 <__umoddi3+0x3e4>
   4961c:	ad7fff84 	addi	r21,r21,-2
   49620:	3d0f883a 	add	r7,r7,r20
   49624:	003f7d06 	br	4941c <__umoddi3+0x3e8>
   49628:	193f642e 	bgeu	r3,r4,493bc <__umoddi3+0x388>
   4962c:	e73fff84 	addi	fp,fp,-2
   49630:	1d07883a 	add	r3,r3,r20
   49634:	003f6206 	br	493c0 <__umoddi3+0x38c>
   49638:	1c07883a 	add	r3,r3,r16
   4963c:	003f0b06 	br	4926c <__umoddi3+0x238>
   49640:	9005883a 	mov	r2,r18
   49644:	a007883a 	mov	r3,r20
   49648:	003f2106 	br	492d0 <__umoddi3+0x29c>
   4964c:	913fda36 	bltu	r18,r4,495b8 <__umoddi3+0x584>
   49650:	202d883a 	mov	r22,r4
   49654:	0007883a 	mov	r3,zero
   49658:	003f9d06 	br	494d0 <__umoddi3+0x49c>

0004965c <_fpadd_parts>:
   4965c:	2005883a 	mov	r2,r4
   49660:	21000017 	ldw	r4,0(r4)
   49664:	01c00044 	movi	r7,1
   49668:	3900622e 	bgeu	r7,r4,497f4 <_fpadd_parts+0x198>
   4966c:	28c00017 	ldw	r3,0(r5)
   49670:	38c05f2e 	bgeu	r7,r3,497f0 <_fpadd_parts+0x194>
   49674:	01c00104 	movi	r7,4
   49678:	21c0c626 	beq	r4,r7,49994 <_fpadd_parts+0x338>
   4967c:	19c05c26 	beq	r3,r7,497f0 <_fpadd_parts+0x194>
   49680:	01c00084 	movi	r7,2
   49684:	19c06b26 	beq	r3,r7,49834 <_fpadd_parts+0x1d8>
   49688:	21c05926 	beq	r4,r7,497f0 <_fpadd_parts+0x194>
   4968c:	11c00217 	ldw	r7,8(r2)
   49690:	2ac00217 	ldw	r11,8(r5)
   49694:	13000317 	ldw	r12,12(r2)
   49698:	13400417 	ldw	r13,16(r2)
   4969c:	3ac9c83a 	sub	r4,r7,r11
   496a0:	2a000317 	ldw	r8,12(r5)
   496a4:	2a400417 	ldw	r9,16(r5)
   496a8:	2015883a 	mov	r10,r4
   496ac:	20007516 	blt	r4,zero,49884 <_fpadd_parts+0x228>
   496b0:	00c00fc4 	movi	r3,63
   496b4:	1a805016 	blt	r3,r10,497f8 <_fpadd_parts+0x19c>
   496b8:	0100870e 	bge	zero,r4,498d8 <_fpadd_parts+0x27c>
   496bc:	50fff804 	addi	r3,r10,-32
   496c0:	18009916 	blt	r3,zero,49928 <_fpadd_parts+0x2cc>
   496c4:	48d6d83a 	srl	r11,r9,r3
   496c8:	001d883a 	mov	r14,zero
   496cc:	18009e16 	blt	r3,zero,49948 <_fpadd_parts+0x2ec>
   496d0:	01000044 	movi	r4,1
   496d4:	20c6983a 	sll	r3,r4,r3
   496d8:	0015883a 	mov	r10,zero
   496dc:	513fffc4 	addi	r4,r10,-1
   496e0:	2295403a 	cmpgeu	r10,r4,r10
   496e4:	1a87c83a 	sub	r3,r3,r10
   496e8:	1a52703a 	and	r9,r3,r9
   496ec:	2210703a 	and	r8,r4,r8
   496f0:	4250b03a 	or	r8,r8,r9
   496f4:	4010c03a 	cmpne	r8,r8,zero
   496f8:	42d0b03a 	or	r8,r8,r11
   496fc:	7013883a 	mov	r9,r14
   49700:	11000117 	ldw	r4,4(r2)
   49704:	28800117 	ldw	r2,4(r5)
   49708:	20804126 	beq	r4,r2,49810 <_fpadd_parts+0x1b4>
   4970c:	20006326 	beq	r4,zero,4989c <_fpadd_parts+0x240>
   49710:	4305c83a 	sub	r2,r8,r12
   49714:	4091803a 	cmpltu	r8,r8,r2
   49718:	4b47c83a 	sub	r3,r9,r13
   4971c:	1a07c83a 	sub	r3,r3,r8
   49720:	18006316 	blt	r3,zero,498b0 <_fpadd_parts+0x254>
   49724:	30000115 	stw	zero,4(r6)
   49728:	31c00215 	stw	r7,8(r6)
   4972c:	30800315 	stw	r2,12(r6)
   49730:	30c00415 	stw	r3,16(r6)
   49734:	11ffffc4 	addi	r7,r2,-1
   49738:	388b403a 	cmpgeu	r5,r7,r2
   4973c:	194bc83a 	sub	r5,r3,r5
   49740:	01040034 	movhi	r4,4096
   49744:	213fffc4 	addi	r4,r4,-1
   49748:	21401736 	bltu	r4,r5,497a8 <_fpadd_parts+0x14c>
   4974c:	29008226 	beq	r5,r4,49958 <_fpadd_parts+0x2fc>
   49750:	31400217 	ldw	r5,8(r6)
   49754:	02840034 	movhi	r10,4096
   49758:	52bfffc4 	addi	r10,r10,-1
   4975c:	033fff84 	movi	r12,-2
   49760:	297fffc4 	addi	r5,r5,-1
   49764:	00000106 	br	4976c <_fpadd_parts+0x110>
   49768:	3a804a26 	beq	r7,r10,49894 <_fpadd_parts+0x238>
   4976c:	1089883a 	add	r4,r2,r2
   49770:	2091803a 	cmpltu	r8,r4,r2
   49774:	18c7883a 	add	r3,r3,r3
   49778:	227fffc4 	addi	r9,r4,-1
   4977c:	40d1883a 	add	r8,r8,r3
   49780:	490f403a 	cmpgeu	r7,r9,r4
   49784:	41cfc83a 	sub	r7,r8,r7
   49788:	2817883a 	mov	r11,r5
   4978c:	2005883a 	mov	r2,r4
   49790:	4007883a 	mov	r3,r8
   49794:	297fffc4 	addi	r5,r5,-1
   49798:	51fff32e 	bgeu	r10,r7,49768 <_fpadd_parts+0x10c>
   4979c:	31000315 	stw	r4,12(r6)
   497a0:	32000415 	stw	r8,16(r6)
   497a4:	32c00215 	stw	r11,8(r6)
   497a8:	010000c4 	movi	r4,3
   497ac:	31000015 	stw	r4,0(r6)
   497b0:	01080034 	movhi	r4,8192
   497b4:	213fffc4 	addi	r4,r4,-1
   497b8:	20c00b2e 	bgeu	r4,r3,497e8 <_fpadd_parts+0x18c>
   497bc:	180e97fa 	slli	r7,r3,31
   497c0:	1008d07a 	srli	r4,r2,1
   497c4:	31400217 	ldw	r5,8(r6)
   497c8:	1806d07a 	srli	r3,r3,1
   497cc:	1080004c 	andi	r2,r2,1
   497d0:	3908b03a 	or	r4,r7,r4
   497d4:	1108b03a 	or	r4,r2,r4
   497d8:	29400044 	addi	r5,r5,1
   497dc:	31000315 	stw	r4,12(r6)
   497e0:	30c00415 	stw	r3,16(r6)
   497e4:	31400215 	stw	r5,8(r6)
   497e8:	3005883a 	mov	r2,r6
   497ec:	f800283a 	ret
   497f0:	2805883a 	mov	r2,r5
   497f4:	f800283a 	ret
   497f8:	59c01e0e 	bge	r11,r7,49874 <_fpadd_parts+0x218>
   497fc:	11000117 	ldw	r4,4(r2)
   49800:	28800117 	ldw	r2,4(r5)
   49804:	0011883a 	mov	r8,zero
   49808:	0013883a 	mov	r9,zero
   4980c:	20bfbf1e 	bne	r4,r2,4970c <_fpadd_parts+0xb0>
   49810:	4305883a 	add	r2,r8,r12
   49814:	1207803a 	cmpltu	r3,r2,r8
   49818:	4b53883a 	add	r9,r9,r13
   4981c:	1a47883a 	add	r3,r3,r9
   49820:	31000115 	stw	r4,4(r6)
   49824:	31c00215 	stw	r7,8(r6)
   49828:	30800315 	stw	r2,12(r6)
   4982c:	30c00415 	stw	r3,16(r6)
   49830:	003fdd06 	br	497a8 <_fpadd_parts+0x14c>
   49834:	20ffef1e 	bne	r4,r3,497f4 <_fpadd_parts+0x198>
   49838:	31000015 	stw	r4,0(r6)
   4983c:	10c00117 	ldw	r3,4(r2)
   49840:	30c00115 	stw	r3,4(r6)
   49844:	10c00217 	ldw	r3,8(r2)
   49848:	11000117 	ldw	r4,4(r2)
   4984c:	29400117 	ldw	r5,4(r5)
   49850:	30c00215 	stw	r3,8(r6)
   49854:	10c00317 	ldw	r3,12(r2)
   49858:	2908703a 	and	r4,r5,r4
   4985c:	30c00315 	stw	r3,12(r6)
   49860:	10c00417 	ldw	r3,16(r2)
   49864:	31000115 	stw	r4,4(r6)
   49868:	3005883a 	mov	r2,r6
   4986c:	30c00415 	stw	r3,16(r6)
   49870:	f800283a 	ret
   49874:	580f883a 	mov	r7,r11
   49878:	0019883a 	mov	r12,zero
   4987c:	001b883a 	mov	r13,zero
   49880:	003f9f06 	br	49700 <_fpadd_parts+0xa4>
   49884:	0115c83a 	sub	r10,zero,r4
   49888:	00c00fc4 	movi	r3,63
   4988c:	1abfda16 	blt	r3,r10,497f8 <_fpadd_parts+0x19c>
   49890:	003f8906 	br	496b8 <_fpadd_parts+0x5c>
   49894:	627fb52e 	bgeu	r12,r9,4976c <_fpadd_parts+0x110>
   49898:	003fc006 	br	4979c <_fpadd_parts+0x140>
   4989c:	6205c83a 	sub	r2,r12,r8
   498a0:	6099803a 	cmpltu	r12,r12,r2
   498a4:	6a47c83a 	sub	r3,r13,r9
   498a8:	1b07c83a 	sub	r3,r3,r12
   498ac:	183f9d0e 	bge	r3,zero,49724 <_fpadd_parts+0xc8>
   498b0:	0085c83a 	sub	r2,zero,r2
   498b4:	1008c03a 	cmpne	r4,r2,zero
   498b8:	00c7c83a 	sub	r3,zero,r3
   498bc:	1907c83a 	sub	r3,r3,r4
   498c0:	01000044 	movi	r4,1
   498c4:	31000115 	stw	r4,4(r6)
   498c8:	31c00215 	stw	r7,8(r6)
   498cc:	30800315 	stw	r2,12(r6)
   498d0:	30c00415 	stw	r3,16(r6)
   498d4:	003f9706 	br	49734 <_fpadd_parts+0xd8>
   498d8:	203f8926 	beq	r4,zero,49700 <_fpadd_parts+0xa4>
   498dc:	50fff804 	addi	r3,r10,-32
   498e0:	3a8f883a 	add	r7,r7,r10
   498e4:	18002316 	blt	r3,zero,49974 <_fpadd_parts+0x318>
   498e8:	68d6d83a 	srl	r11,r13,r3
   498ec:	001d883a 	mov	r14,zero
   498f0:	18001c16 	blt	r3,zero,49964 <_fpadd_parts+0x308>
   498f4:	01000044 	movi	r4,1
   498f8:	20c6983a 	sll	r3,r4,r3
   498fc:	0015883a 	mov	r10,zero
   49900:	513fffc4 	addi	r4,r10,-1
   49904:	2295403a 	cmpgeu	r10,r4,r10
   49908:	1a87c83a 	sub	r3,r3,r10
   4990c:	1b5a703a 	and	r13,r3,r13
   49910:	2318703a 	and	r12,r4,r12
   49914:	6358b03a 	or	r12,r12,r13
   49918:	6018c03a 	cmpne	r12,r12,zero
   4991c:	62d8b03a 	or	r12,r12,r11
   49920:	701b883a 	mov	r13,r14
   49924:	003f7606 	br	49700 <_fpadd_parts+0xa4>
   49928:	4808907a 	slli	r4,r9,1
   4992c:	02c007c4 	movi	r11,31
   49930:	5a97c83a 	sub	r11,r11,r10
   49934:	22c8983a 	sll	r4,r4,r11
   49938:	4296d83a 	srl	r11,r8,r10
   4993c:	4a9cd83a 	srl	r14,r9,r10
   49940:	22d6b03a 	or	r11,r4,r11
   49944:	003f6106 	br	496cc <_fpadd_parts+0x70>
   49948:	00c00044 	movi	r3,1
   4994c:	1a94983a 	sll	r10,r3,r10
   49950:	0007883a 	mov	r3,zero
   49954:	003f6106 	br	496dc <_fpadd_parts+0x80>
   49958:	013fff84 	movi	r4,-2
   4995c:	21ff7c2e 	bgeu	r4,r7,49750 <_fpadd_parts+0xf4>
   49960:	003f9106 	br	497a8 <_fpadd_parts+0x14c>
   49964:	00c00044 	movi	r3,1
   49968:	1a94983a 	sll	r10,r3,r10
   4996c:	0007883a 	mov	r3,zero
   49970:	003fe306 	br	49900 <_fpadd_parts+0x2a4>
   49974:	6816907a 	slli	r11,r13,1
   49978:	010007c4 	movi	r4,31
   4997c:	2289c83a 	sub	r4,r4,r10
   49980:	5908983a 	sll	r4,r11,r4
   49984:	6296d83a 	srl	r11,r12,r10
   49988:	6a9cd83a 	srl	r14,r13,r10
   4998c:	22d6b03a 	or	r11,r4,r11
   49990:	003fd706 	br	498f0 <_fpadd_parts+0x294>
   49994:	193f971e 	bne	r3,r4,497f4 <_fpadd_parts+0x198>
   49998:	11000117 	ldw	r4,4(r2)
   4999c:	28c00117 	ldw	r3,4(r5)
   499a0:	20ff9426 	beq	r4,r3,497f4 <_fpadd_parts+0x198>
   499a4:	00800174 	movhi	r2,5
   499a8:	10b84404 	addi	r2,r2,-7920
   499ac:	f800283a 	ret

000499b0 <__adddf3>:
   499b0:	deffec04 	addi	sp,sp,-80
   499b4:	d9001115 	stw	r4,68(sp)
   499b8:	d9401215 	stw	r5,72(sp)
   499bc:	d9001104 	addi	r4,sp,68
   499c0:	d9400a04 	addi	r5,sp,40
   499c4:	dfc01315 	stw	ra,76(sp)
   499c8:	d9c01015 	stw	r7,64(sp)
   499cc:	d9800f15 	stw	r6,60(sp)
   499d0:	004a8d40 	call	4a8d4 <__unpack_d>
   499d4:	d9000f04 	addi	r4,sp,60
   499d8:	d9400504 	addi	r5,sp,20
   499dc:	004a8d40 	call	4a8d4 <__unpack_d>
   499e0:	d9000a04 	addi	r4,sp,40
   499e4:	d9400504 	addi	r5,sp,20
   499e8:	d80d883a 	mov	r6,sp
   499ec:	004965c0 	call	4965c <_fpadd_parts>
   499f0:	1009883a 	mov	r4,r2
   499f4:	004a6b00 	call	4a6b0 <__pack_d>
   499f8:	dfc01317 	ldw	ra,76(sp)
   499fc:	dec01404 	addi	sp,sp,80
   49a00:	f800283a 	ret

00049a04 <__subdf3>:
   49a04:	deffec04 	addi	sp,sp,-80
   49a08:	d9001115 	stw	r4,68(sp)
   49a0c:	d9401215 	stw	r5,72(sp)
   49a10:	d9001104 	addi	r4,sp,68
   49a14:	d9400a04 	addi	r5,sp,40
   49a18:	dfc01315 	stw	ra,76(sp)
   49a1c:	d9c01015 	stw	r7,64(sp)
   49a20:	d9800f15 	stw	r6,60(sp)
   49a24:	004a8d40 	call	4a8d4 <__unpack_d>
   49a28:	d9000f04 	addi	r4,sp,60
   49a2c:	d9400504 	addi	r5,sp,20
   49a30:	004a8d40 	call	4a8d4 <__unpack_d>
   49a34:	d8800617 	ldw	r2,24(sp)
   49a38:	d9000a04 	addi	r4,sp,40
   49a3c:	d9400504 	addi	r5,sp,20
   49a40:	d80d883a 	mov	r6,sp
   49a44:	1080005c 	xori	r2,r2,1
   49a48:	d8800615 	stw	r2,24(sp)
   49a4c:	004965c0 	call	4965c <_fpadd_parts>
   49a50:	1009883a 	mov	r4,r2
   49a54:	004a6b00 	call	4a6b0 <__pack_d>
   49a58:	dfc01317 	ldw	ra,76(sp)
   49a5c:	dec01404 	addi	sp,sp,80
   49a60:	f800283a 	ret

00049a64 <__muldf3>:
   49a64:	deffe404 	addi	sp,sp,-112
   49a68:	d9001115 	stw	r4,68(sp)
   49a6c:	d9401215 	stw	r5,72(sp)
   49a70:	d9001104 	addi	r4,sp,68
   49a74:	d9400a04 	addi	r5,sp,40
   49a78:	dfc01b15 	stw	ra,108(sp)
   49a7c:	d9800f15 	stw	r6,60(sp)
   49a80:	d9c01015 	stw	r7,64(sp)
   49a84:	ddc01a15 	stw	r23,104(sp)
   49a88:	dd801915 	stw	r22,100(sp)
   49a8c:	dd401815 	stw	r21,96(sp)
   49a90:	dd001715 	stw	r20,92(sp)
   49a94:	dcc01615 	stw	r19,88(sp)
   49a98:	dc801515 	stw	r18,84(sp)
   49a9c:	dc401415 	stw	r17,80(sp)
   49aa0:	dc001315 	stw	r16,76(sp)
   49aa4:	004a8d40 	call	4a8d4 <__unpack_d>
   49aa8:	d9000f04 	addi	r4,sp,60
   49aac:	d9400504 	addi	r5,sp,20
   49ab0:	004a8d40 	call	4a8d4 <__unpack_d>
   49ab4:	d8c00a17 	ldw	r3,40(sp)
   49ab8:	00800044 	movi	r2,1
   49abc:	10c01136 	bltu	r2,r3,49b04 <__muldf3+0xa0>
   49ac0:	d8c00b17 	ldw	r3,44(sp)
   49ac4:	d8800617 	ldw	r2,24(sp)
   49ac8:	d9000a04 	addi	r4,sp,40
   49acc:	1884c03a 	cmpne	r2,r3,r2
   49ad0:	d8800b15 	stw	r2,44(sp)
   49ad4:	004a6b00 	call	4a6b0 <__pack_d>
   49ad8:	dfc01b17 	ldw	ra,108(sp)
   49adc:	ddc01a17 	ldw	r23,104(sp)
   49ae0:	dd801917 	ldw	r22,100(sp)
   49ae4:	dd401817 	ldw	r21,96(sp)
   49ae8:	dd001717 	ldw	r20,92(sp)
   49aec:	dcc01617 	ldw	r19,88(sp)
   49af0:	dc801517 	ldw	r18,84(sp)
   49af4:	dc401417 	ldw	r17,80(sp)
   49af8:	dc001317 	ldw	r16,76(sp)
   49afc:	dec01c04 	addi	sp,sp,112
   49b00:	f800283a 	ret
   49b04:	d9000517 	ldw	r4,20(sp)
   49b08:	11000636 	bltu	r2,r4,49b24 <__muldf3+0xc0>
   49b0c:	d8800617 	ldw	r2,24(sp)
   49b10:	d8c00b17 	ldw	r3,44(sp)
   49b14:	d9000504 	addi	r4,sp,20
   49b18:	1884c03a 	cmpne	r2,r3,r2
   49b1c:	d8800615 	stw	r2,24(sp)
   49b20:	003fec06 	br	49ad4 <__muldf3+0x70>
   49b24:	00800104 	movi	r2,4
   49b28:	1880051e 	bne	r3,r2,49b40 <__muldf3+0xdc>
   49b2c:	00800084 	movi	r2,2
   49b30:	20bfe31e 	bne	r4,r2,49ac0 <__muldf3+0x5c>
   49b34:	01000174 	movhi	r4,5
   49b38:	21384404 	addi	r4,r4,-7920
   49b3c:	003fe506 	br	49ad4 <__muldf3+0x70>
   49b40:	2080031e 	bne	r4,r2,49b50 <__muldf3+0xec>
   49b44:	00800084 	movi	r2,2
   49b48:	18bffa26 	beq	r3,r2,49b34 <__muldf3+0xd0>
   49b4c:	003fef06 	br	49b0c <__muldf3+0xa8>
   49b50:	00800084 	movi	r2,2
   49b54:	18bfda26 	beq	r3,r2,49ac0 <__muldf3+0x5c>
   49b58:	20bfec26 	beq	r4,r2,49b0c <__muldf3+0xa8>
   49b5c:	dc000d17 	ldw	r16,52(sp)
   49b60:	dd000817 	ldw	r20,32(sp)
   49b64:	dc800917 	ldw	r18,36(sp)
   49b68:	8009883a 	mov	r4,r16
   49b6c:	000b883a 	mov	r5,zero
   49b70:	a00d883a 	mov	r6,r20
   49b74:	000f883a 	mov	r7,zero
   49b78:	004a4f40 	call	4a4f4 <__muldi3>
   49b7c:	dc400e17 	ldw	r17,56(sp)
   49b80:	9009883a 	mov	r4,r18
   49b84:	800d883a 	mov	r6,r16
   49b88:	000b883a 	mov	r5,zero
   49b8c:	000f883a 	mov	r7,zero
   49b90:	102f883a 	mov	r23,r2
   49b94:	1827883a 	mov	r19,r3
   49b98:	004a4f40 	call	4a4f4 <__muldi3>
   49b9c:	900d883a 	mov	r6,r18
   49ba0:	8809883a 	mov	r4,r17
   49ba4:	000b883a 	mov	r5,zero
   49ba8:	000f883a 	mov	r7,zero
   49bac:	102b883a 	mov	r21,r2
   49bb0:	1821883a 	mov	r16,r3
   49bb4:	004a4f40 	call	4a4f4 <__muldi3>
   49bb8:	8809883a 	mov	r4,r17
   49bbc:	000b883a 	mov	r5,zero
   49bc0:	a00d883a 	mov	r6,r20
   49bc4:	000f883a 	mov	r7,zero
   49bc8:	102d883a 	mov	r22,r2
   49bcc:	1825883a 	mov	r18,r3
   49bd0:	004a4f40 	call	4a4f4 <__muldi3>
   49bd4:	154b883a 	add	r5,r2,r21
   49bd8:	2889803a 	cmpltu	r4,r5,r2
   49bdc:	1c07883a 	add	r3,r3,r16
   49be0:	20c9883a 	add	r4,r4,r3
   49be4:	24004b36 	bltu	r4,r16,49d14 <__muldf3+0x2b0>
   49be8:	8100011e 	bne	r16,r4,49bf0 <__muldf3+0x18c>
   49bec:	2d404936 	bltu	r5,r21,49d14 <__muldf3+0x2b0>
   49bf0:	0011883a 	mov	r8,zero
   49bf4:	0007883a 	mov	r3,zero
   49bf8:	2ccb883a 	add	r5,r5,r19
   49bfc:	b80d883a 	mov	r6,r23
   49c00:	2cc0012e 	bgeu	r5,r19,49c08 <__muldf3+0x1a4>
   49c04:	02000044 	movi	r8,1
   49c08:	258f883a 	add	r7,r4,r22
   49c0c:	3909803a 	cmpltu	r4,r7,r4
   49c10:	da400c17 	ldw	r9,48(sp)
   49c14:	2489883a 	add	r4,r4,r18
   49c18:	d8800717 	ldw	r2,28(sp)
   49c1c:	20c9883a 	add	r4,r4,r3
   49c20:	da800b17 	ldw	r10,44(sp)
   49c24:	d8c00617 	ldw	r3,24(sp)
   49c28:	3a11883a 	add	r8,r7,r8
   49c2c:	4885883a 	add	r2,r9,r2
   49c30:	50c6c03a 	cmpne	r3,r10,r3
   49c34:	41cf803a 	cmpltu	r7,r8,r7
   49c38:	12400104 	addi	r9,r2,4
   49c3c:	d8c00115 	stw	r3,4(sp)
   49c40:	3909883a 	add	r4,r7,r4
   49c44:	da400215 	stw	r9,8(sp)
   49c48:	03480034 	movhi	r13,8192
   49c4c:	6b7fffc4 	addi	r13,r13,-1
   49c50:	4007883a 	mov	r3,r8
   49c54:	6900102e 	bgeu	r13,r4,49c98 <__muldf3+0x234>
   49c58:	10800144 	addi	r2,r2,5
   49c5c:	180ed07a 	srli	r7,r3,1
   49c60:	18c0004c 	andi	r3,r3,1
   49c64:	201097fa 	slli	r8,r4,31
   49c68:	281697fa 	slli	r11,r5,31
   49c6c:	2008d07a 	srli	r4,r4,1
   49c70:	3014d07a 	srli	r10,r6,1
   49c74:	2812d07a 	srli	r9,r5,1
   49c78:	1019883a 	mov	r12,r2
   49c7c:	18000226 	beq	r3,zero,49c88 <__muldf3+0x224>
   49c80:	5a8cb03a 	or	r6,r11,r10
   49c84:	49600034 	orhi	r5,r9,32768
   49c88:	41c6b03a 	or	r3,r8,r7
   49c8c:	10800044 	addi	r2,r2,1
   49c90:	693ff236 	bltu	r13,r4,49c5c <__muldf3+0x1f8>
   49c94:	db000215 	stw	r12,8(sp)
   49c98:	03440034 	movhi	r13,4096
   49c9c:	6b7fffc4 	addi	r13,r13,-1
   49ca0:	69001336 	bltu	r13,r4,49cf0 <__muldf3+0x28c>
   49ca4:	d8800217 	ldw	r2,8(sp)
   49ca8:	10bfffc4 	addi	r2,r2,-1
   49cac:	18d3883a 	add	r9,r3,r3
   49cb0:	48c7803a 	cmpltu	r3,r9,r3
   49cb4:	2109883a 	add	r4,r4,r4
   49cb8:	190f883a 	add	r7,r3,r4
   49cbc:	3191883a 	add	r8,r6,r6
   49cc0:	4197803a 	cmpltu	r11,r8,r6
   49cc4:	2955883a 	add	r10,r5,r5
   49cc8:	1019883a 	mov	r12,r2
   49ccc:	4807883a 	mov	r3,r9
   49cd0:	3809883a 	mov	r4,r7
   49cd4:	2800010e 	bge	r5,zero,49cdc <__muldf3+0x278>
   49cd8:	48c00054 	ori	r3,r9,1
   49cdc:	400d883a 	mov	r6,r8
   49ce0:	5a8b883a 	add	r5,r11,r10
   49ce4:	10bfffc4 	addi	r2,r2,-1
   49ce8:	69fff02e 	bgeu	r13,r7,49cac <__muldf3+0x248>
   49cec:	db000215 	stw	r12,8(sp)
   49cf0:	18803fcc 	andi	r2,r3,255
   49cf4:	01c02004 	movi	r7,128
   49cf8:	11c00926 	beq	r2,r7,49d20 <__muldf3+0x2bc>
   49cfc:	008000c4 	movi	r2,3
   49d00:	d9000415 	stw	r4,16(sp)
   49d04:	d8c00315 	stw	r3,12(sp)
   49d08:	d8800015 	stw	r2,0(sp)
   49d0c:	d809883a 	mov	r4,sp
   49d10:	003f7006 	br	49ad4 <__muldf3+0x70>
   49d14:	0011883a 	mov	r8,zero
   49d18:	00c00044 	movi	r3,1
   49d1c:	003fb606 	br	49bf8 <__muldf3+0x194>
   49d20:	19c0400c 	andi	r7,r3,256
   49d24:	383ff51e 	bne	r7,zero,49cfc <__muldf3+0x298>
   49d28:	314ab03a 	or	r5,r6,r5
   49d2c:	283ff326 	beq	r5,zero,49cfc <__muldf3+0x298>
   49d30:	1885883a 	add	r2,r3,r2
   49d34:	10cb803a 	cmpltu	r5,r2,r3
   49d38:	00ffc004 	movi	r3,-256
   49d3c:	10c6703a 	and	r3,r2,r3
   49d40:	2909883a 	add	r4,r5,r4
   49d44:	003fed06 	br	49cfc <__muldf3+0x298>

00049d48 <__divdf3>:
   49d48:	defff104 	addi	sp,sp,-60
   49d4c:	d9000c15 	stw	r4,48(sp)
   49d50:	d9400d15 	stw	r5,52(sp)
   49d54:	d9000c04 	addi	r4,sp,48
   49d58:	d9400504 	addi	r5,sp,20
   49d5c:	dfc00e15 	stw	ra,56(sp)
   49d60:	d9800a15 	stw	r6,40(sp)
   49d64:	d9c00b15 	stw	r7,44(sp)
   49d68:	004a8d40 	call	4a8d4 <__unpack_d>
   49d6c:	d9000a04 	addi	r4,sp,40
   49d70:	d80b883a 	mov	r5,sp
   49d74:	004a8d40 	call	4a8d4 <__unpack_d>
   49d78:	d8c00517 	ldw	r3,20(sp)
   49d7c:	00800044 	movi	r2,1
   49d80:	10c00536 	bltu	r2,r3,49d98 <__divdf3+0x50>
   49d84:	d9000504 	addi	r4,sp,20
   49d88:	004a6b00 	call	4a6b0 <__pack_d>
   49d8c:	dfc00e17 	ldw	ra,56(sp)
   49d90:	dec00f04 	addi	sp,sp,60
   49d94:	f800283a 	ret
   49d98:	d9000017 	ldw	r4,0(sp)
   49d9c:	11000536 	bltu	r2,r4,49db4 <__divdf3+0x6c>
   49da0:	d809883a 	mov	r4,sp
   49da4:	004a6b00 	call	4a6b0 <__pack_d>
   49da8:	dfc00e17 	ldw	ra,56(sp)
   49dac:	dec00f04 	addi	sp,sp,60
   49db0:	f800283a 	ret
   49db4:	d9800617 	ldw	r6,24(sp)
   49db8:	d9400117 	ldw	r5,4(sp)
   49dbc:	00800104 	movi	r2,4
   49dc0:	314af03a 	xor	r5,r6,r5
   49dc4:	d9400615 	stw	r5,24(sp)
   49dc8:	18800226 	beq	r3,r2,49dd4 <__divdf3+0x8c>
   49dcc:	01400084 	movi	r5,2
   49dd0:	1940041e 	bne	r3,r5,49de4 <__divdf3+0x9c>
   49dd4:	193feb1e 	bne	r3,r4,49d84 <__divdf3+0x3c>
   49dd8:	01000174 	movhi	r4,5
   49ddc:	21384404 	addi	r4,r4,-7920
   49de0:	003fe906 	br	49d88 <__divdf3+0x40>
   49de4:	20803326 	beq	r4,r2,49eb4 <__divdf3+0x16c>
   49de8:	21403726 	beq	r4,r5,49ec8 <__divdf3+0x180>
   49dec:	d8800217 	ldw	r2,8(sp)
   49df0:	d9000717 	ldw	r4,28(sp)
   49df4:	d8c00917 	ldw	r3,36(sp)
   49df8:	da000417 	ldw	r8,16(sp)
   49dfc:	2089c83a 	sub	r4,r4,r2
   49e00:	d9000715 	stw	r4,28(sp)
   49e04:	d8800817 	ldw	r2,32(sp)
   49e08:	dbc00317 	ldw	r15,12(sp)
   49e0c:	1a000236 	bltu	r3,r8,49e18 <__divdf3+0xd0>
   49e10:	40c0081e 	bne	r8,r3,49e34 <__divdf3+0xec>
   49e14:	13c0072e 	bgeu	r2,r15,49e34 <__divdf3+0xec>
   49e18:	108b883a 	add	r5,r2,r2
   49e1c:	288d803a 	cmpltu	r6,r5,r2
   49e20:	18c7883a 	add	r3,r3,r3
   49e24:	213fffc4 	addi	r4,r4,-1
   49e28:	2805883a 	mov	r2,r5
   49e2c:	30c7883a 	add	r3,r6,r3
   49e30:	d9000715 	stw	r4,28(sp)
   49e34:	01400f44 	movi	r5,61
   49e38:	000f883a 	mov	r7,zero
   49e3c:	01040034 	movhi	r4,4096
   49e40:	0019883a 	mov	r12,zero
   49e44:	001b883a 	mov	r13,zero
   49e48:	201697fa 	slli	r11,r4,31
   49e4c:	3814d07a 	srli	r10,r7,1
   49e50:	297fffc4 	addi	r5,r5,-1
   49e54:	1a000936 	bltu	r3,r8,49e7c <__divdf3+0x134>
   49e58:	13cdc83a 	sub	r6,r2,r15
   49e5c:	1193803a 	cmpltu	r9,r2,r6
   49e60:	1a1dc83a 	sub	r14,r3,r8
   49e64:	40c0011e 	bne	r8,r3,49e6c <__divdf3+0x124>
   49e68:	13c00436 	bltu	r2,r15,49e7c <__divdf3+0x134>
   49e6c:	3005883a 	mov	r2,r6
   49e70:	7247c83a 	sub	r3,r14,r9
   49e74:	61d8b03a 	or	r12,r12,r7
   49e78:	691ab03a 	or	r13,r13,r4
   49e7c:	108d883a 	add	r6,r2,r2
   49e80:	3093803a 	cmpltu	r9,r6,r2
   49e84:	18c7883a 	add	r3,r3,r3
   49e88:	5a8eb03a 	or	r7,r11,r10
   49e8c:	2008d07a 	srli	r4,r4,1
   49e90:	3005883a 	mov	r2,r6
   49e94:	48c7883a 	add	r3,r9,r3
   49e98:	283feb1e 	bne	r5,zero,49e48 <__divdf3+0x100>
   49e9c:	61003fcc 	andi	r4,r12,255
   49ea0:	01402004 	movi	r5,128
   49ea4:	21400b26 	beq	r4,r5,49ed4 <__divdf3+0x18c>
   49ea8:	db000815 	stw	r12,32(sp)
   49eac:	db400915 	stw	r13,36(sp)
   49eb0:	003fb406 	br	49d84 <__divdf3+0x3c>
   49eb4:	d8000815 	stw	zero,32(sp)
   49eb8:	d8000915 	stw	zero,36(sp)
   49ebc:	d8000715 	stw	zero,28(sp)
   49ec0:	d9000504 	addi	r4,sp,20
   49ec4:	003fb006 	br	49d88 <__divdf3+0x40>
   49ec8:	d8800515 	stw	r2,20(sp)
   49ecc:	d9000504 	addi	r4,sp,20
   49ed0:	003fad06 	br	49d88 <__divdf3+0x40>
   49ed4:	6140400c 	andi	r5,r12,256
   49ed8:	283ff31e 	bne	r5,zero,49ea8 <__divdf3+0x160>
   49edc:	30c4b03a 	or	r2,r6,r3
   49ee0:	103ff126 	beq	r2,zero,49ea8 <__divdf3+0x160>
   49ee4:	6109883a 	add	r4,r12,r4
   49ee8:	2305803a 	cmpltu	r2,r4,r12
   49eec:	033fc004 	movi	r12,-256
   49ef0:	2318703a 	and	r12,r4,r12
   49ef4:	135b883a 	add	r13,r2,r13
   49ef8:	003feb06 	br	49ea8 <__divdf3+0x160>

00049efc <__eqdf2>:
   49efc:	defff104 	addi	sp,sp,-60
   49f00:	d9000c15 	stw	r4,48(sp)
   49f04:	d9400d15 	stw	r5,52(sp)
   49f08:	d9000c04 	addi	r4,sp,48
   49f0c:	d9400504 	addi	r5,sp,20
   49f10:	dfc00e15 	stw	ra,56(sp)
   49f14:	d9800a15 	stw	r6,40(sp)
   49f18:	d9c00b15 	stw	r7,44(sp)
   49f1c:	004a8d40 	call	4a8d4 <__unpack_d>
   49f20:	d9000a04 	addi	r4,sp,40
   49f24:	d80b883a 	mov	r5,sp
   49f28:	004a8d40 	call	4a8d4 <__unpack_d>
   49f2c:	d8c00517 	ldw	r3,20(sp)
   49f30:	00800044 	movi	r2,1
   49f34:	10c0052e 	bgeu	r2,r3,49f4c <__eqdf2+0x50>
   49f38:	d8c00017 	ldw	r3,0(sp)
   49f3c:	10c0032e 	bgeu	r2,r3,49f4c <__eqdf2+0x50>
   49f40:	d9000504 	addi	r4,sp,20
   49f44:	d80b883a 	mov	r5,sp
   49f48:	004a9d80 	call	4a9d8 <__fpcmp_parts_d>
   49f4c:	dfc00e17 	ldw	ra,56(sp)
   49f50:	dec00f04 	addi	sp,sp,60
   49f54:	f800283a 	ret

00049f58 <__nedf2>:
   49f58:	defff104 	addi	sp,sp,-60
   49f5c:	d9000c15 	stw	r4,48(sp)
   49f60:	d9400d15 	stw	r5,52(sp)
   49f64:	d9000c04 	addi	r4,sp,48
   49f68:	d9400504 	addi	r5,sp,20
   49f6c:	dfc00e15 	stw	ra,56(sp)
   49f70:	d9800a15 	stw	r6,40(sp)
   49f74:	d9c00b15 	stw	r7,44(sp)
   49f78:	004a8d40 	call	4a8d4 <__unpack_d>
   49f7c:	d9000a04 	addi	r4,sp,40
   49f80:	d80b883a 	mov	r5,sp
   49f84:	004a8d40 	call	4a8d4 <__unpack_d>
   49f88:	d8c00517 	ldw	r3,20(sp)
   49f8c:	00800044 	movi	r2,1
   49f90:	10c0052e 	bgeu	r2,r3,49fa8 <__nedf2+0x50>
   49f94:	d8c00017 	ldw	r3,0(sp)
   49f98:	10c0032e 	bgeu	r2,r3,49fa8 <__nedf2+0x50>
   49f9c:	d9000504 	addi	r4,sp,20
   49fa0:	d80b883a 	mov	r5,sp
   49fa4:	004a9d80 	call	4a9d8 <__fpcmp_parts_d>
   49fa8:	dfc00e17 	ldw	ra,56(sp)
   49fac:	dec00f04 	addi	sp,sp,60
   49fb0:	f800283a 	ret

00049fb4 <__gtdf2>:
   49fb4:	defff104 	addi	sp,sp,-60
   49fb8:	d9000c15 	stw	r4,48(sp)
   49fbc:	d9400d15 	stw	r5,52(sp)
   49fc0:	d9000c04 	addi	r4,sp,48
   49fc4:	d9400504 	addi	r5,sp,20
   49fc8:	dfc00e15 	stw	ra,56(sp)
   49fcc:	d9800a15 	stw	r6,40(sp)
   49fd0:	d9c00b15 	stw	r7,44(sp)
   49fd4:	004a8d40 	call	4a8d4 <__unpack_d>
   49fd8:	d9000a04 	addi	r4,sp,40
   49fdc:	d80b883a 	mov	r5,sp
   49fe0:	004a8d40 	call	4a8d4 <__unpack_d>
   49fe4:	d8c00517 	ldw	r3,20(sp)
   49fe8:	00800044 	movi	r2,1
   49fec:	10c0082e 	bgeu	r2,r3,4a010 <__gtdf2+0x5c>
   49ff0:	d8c00017 	ldw	r3,0(sp)
   49ff4:	10c0062e 	bgeu	r2,r3,4a010 <__gtdf2+0x5c>
   49ff8:	d9000504 	addi	r4,sp,20
   49ffc:	d80b883a 	mov	r5,sp
   4a000:	004a9d80 	call	4a9d8 <__fpcmp_parts_d>
   4a004:	dfc00e17 	ldw	ra,56(sp)
   4a008:	dec00f04 	addi	sp,sp,60
   4a00c:	f800283a 	ret
   4a010:	00bfffc4 	movi	r2,-1
   4a014:	003ffb06 	br	4a004 <__gtdf2+0x50>

0004a018 <__gedf2>:
   4a018:	defff104 	addi	sp,sp,-60
   4a01c:	d9000c15 	stw	r4,48(sp)
   4a020:	d9400d15 	stw	r5,52(sp)
   4a024:	d9000c04 	addi	r4,sp,48
   4a028:	d9400504 	addi	r5,sp,20
   4a02c:	dfc00e15 	stw	ra,56(sp)
   4a030:	d9800a15 	stw	r6,40(sp)
   4a034:	d9c00b15 	stw	r7,44(sp)
   4a038:	004a8d40 	call	4a8d4 <__unpack_d>
   4a03c:	d9000a04 	addi	r4,sp,40
   4a040:	d80b883a 	mov	r5,sp
   4a044:	004a8d40 	call	4a8d4 <__unpack_d>
   4a048:	d8c00517 	ldw	r3,20(sp)
   4a04c:	00800044 	movi	r2,1
   4a050:	10c0082e 	bgeu	r2,r3,4a074 <__gedf2+0x5c>
   4a054:	d8c00017 	ldw	r3,0(sp)
   4a058:	10c0062e 	bgeu	r2,r3,4a074 <__gedf2+0x5c>
   4a05c:	d9000504 	addi	r4,sp,20
   4a060:	d80b883a 	mov	r5,sp
   4a064:	004a9d80 	call	4a9d8 <__fpcmp_parts_d>
   4a068:	dfc00e17 	ldw	ra,56(sp)
   4a06c:	dec00f04 	addi	sp,sp,60
   4a070:	f800283a 	ret
   4a074:	00bfffc4 	movi	r2,-1
   4a078:	003ffb06 	br	4a068 <__gedf2+0x50>

0004a07c <__ltdf2>:
   4a07c:	defff104 	addi	sp,sp,-60
   4a080:	d9000c15 	stw	r4,48(sp)
   4a084:	d9400d15 	stw	r5,52(sp)
   4a088:	d9000c04 	addi	r4,sp,48
   4a08c:	d9400504 	addi	r5,sp,20
   4a090:	dfc00e15 	stw	ra,56(sp)
   4a094:	d9800a15 	stw	r6,40(sp)
   4a098:	d9c00b15 	stw	r7,44(sp)
   4a09c:	004a8d40 	call	4a8d4 <__unpack_d>
   4a0a0:	d9000a04 	addi	r4,sp,40
   4a0a4:	d80b883a 	mov	r5,sp
   4a0a8:	004a8d40 	call	4a8d4 <__unpack_d>
   4a0ac:	d8c00517 	ldw	r3,20(sp)
   4a0b0:	00800044 	movi	r2,1
   4a0b4:	10c0052e 	bgeu	r2,r3,4a0cc <__ltdf2+0x50>
   4a0b8:	d8c00017 	ldw	r3,0(sp)
   4a0bc:	10c0032e 	bgeu	r2,r3,4a0cc <__ltdf2+0x50>
   4a0c0:	d9000504 	addi	r4,sp,20
   4a0c4:	d80b883a 	mov	r5,sp
   4a0c8:	004a9d80 	call	4a9d8 <__fpcmp_parts_d>
   4a0cc:	dfc00e17 	ldw	ra,56(sp)
   4a0d0:	dec00f04 	addi	sp,sp,60
   4a0d4:	f800283a 	ret

0004a0d8 <__floatsidf>:
   4a0d8:	2004d7fa 	srli	r2,r4,31
   4a0dc:	defff904 	addi	sp,sp,-28
   4a0e0:	00c000c4 	movi	r3,3
   4a0e4:	dfc00615 	stw	ra,24(sp)
   4a0e8:	dc000515 	stw	r16,20(sp)
   4a0ec:	d8c00015 	stw	r3,0(sp)
   4a0f0:	d8800115 	stw	r2,4(sp)
   4a0f4:	2000081e 	bne	r4,zero,4a118 <__floatsidf+0x40>
   4a0f8:	00800084 	movi	r2,2
   4a0fc:	d8800015 	stw	r2,0(sp)
   4a100:	d809883a 	mov	r4,sp
   4a104:	004a6b00 	call	4a6b0 <__pack_d>
   4a108:	dfc00617 	ldw	ra,24(sp)
   4a10c:	dc000517 	ldw	r16,20(sp)
   4a110:	dec00704 	addi	sp,sp,28
   4a114:	f800283a 	ret
   4a118:	00c00f04 	movi	r3,60
   4a11c:	d8c00215 	stw	r3,8(sp)
   4a120:	10000f1e 	bne	r2,zero,4a160 <__floatsidf+0x88>
   4a124:	2021883a 	mov	r16,r4
   4a128:	8009883a 	mov	r4,r16
   4a12c:	004a6040 	call	4a604 <__clzsi2>
   4a130:	11000744 	addi	r4,r2,29
   4a134:	0100110e 	bge	zero,r4,4a17c <__floatsidf+0xa4>
   4a138:	10ffff44 	addi	r3,r2,-3
   4a13c:	18001216 	blt	r3,zero,4a188 <__floatsidf+0xb0>
   4a140:	80c6983a 	sll	r3,r16,r3
   4a144:	0009883a 	mov	r4,zero
   4a148:	014007c4 	movi	r5,31
   4a14c:	2885c83a 	sub	r2,r5,r2
   4a150:	d9000315 	stw	r4,12(sp)
   4a154:	d8c00415 	stw	r3,16(sp)
   4a158:	d8800215 	stw	r2,8(sp)
   4a15c:	003fe806 	br	4a100 <__floatsidf+0x28>
   4a160:	00a00034 	movhi	r2,32768
   4a164:	20800e26 	beq	r4,r2,4a1a0 <__floatsidf+0xc8>
   4a168:	0121c83a 	sub	r16,zero,r4
   4a16c:	8009883a 	mov	r4,r16
   4a170:	004a6040 	call	4a604 <__clzsi2>
   4a174:	11000744 	addi	r4,r2,29
   4a178:	013fef16 	blt	zero,r4,4a138 <__floatsidf+0x60>
   4a17c:	dc000315 	stw	r16,12(sp)
   4a180:	d8000415 	stw	zero,16(sp)
   4a184:	003fde06 	br	4a100 <__floatsidf+0x28>
   4a188:	800ad07a 	srli	r5,r16,1
   4a18c:	00c007c4 	movi	r3,31
   4a190:	1907c83a 	sub	r3,r3,r4
   4a194:	28c6d83a 	srl	r3,r5,r3
   4a198:	8108983a 	sll	r4,r16,r4
   4a19c:	003fea06 	br	4a148 <__floatsidf+0x70>
   4a1a0:	0005883a 	mov	r2,zero
   4a1a4:	00f07834 	movhi	r3,49632
   4a1a8:	003fd706 	br	4a108 <__floatsidf+0x30>

0004a1ac <__fixdfsi>:
   4a1ac:	defff804 	addi	sp,sp,-32
   4a1b0:	d9000515 	stw	r4,20(sp)
   4a1b4:	d9400615 	stw	r5,24(sp)
   4a1b8:	d9000504 	addi	r4,sp,20
   4a1bc:	d80b883a 	mov	r5,sp
   4a1c0:	dfc00715 	stw	ra,28(sp)
   4a1c4:	004a8d40 	call	4a8d4 <__unpack_d>
   4a1c8:	d8800017 	ldw	r2,0(sp)
   4a1cc:	00c00084 	movi	r3,2
   4a1d0:	10c01c26 	beq	r2,r3,4a244 <__fixdfsi+0x98>
   4a1d4:	00c00044 	movi	r3,1
   4a1d8:	18801a2e 	bgeu	r3,r2,4a244 <__fixdfsi+0x98>
   4a1dc:	00c00104 	movi	r3,4
   4a1e0:	10c01126 	beq	r2,r3,4a228 <__fixdfsi+0x7c>
   4a1e4:	d8800217 	ldw	r2,8(sp)
   4a1e8:	10001616 	blt	r2,zero,4a244 <__fixdfsi+0x98>
   4a1ec:	00c00784 	movi	r3,30
   4a1f0:	18800d16 	blt	r3,r2,4a228 <__fixdfsi+0x7c>
   4a1f4:	00c00f04 	movi	r3,60
   4a1f8:	1885c83a 	sub	r2,r3,r2
   4a1fc:	10fff804 	addi	r3,r2,-32
   4a200:	d9400317 	ldw	r5,12(sp)
   4a204:	d9000417 	ldw	r4,16(sp)
   4a208:	18001616 	blt	r3,zero,4a264 <__fixdfsi+0xb8>
   4a20c:	20c4d83a 	srl	r2,r4,r3
   4a210:	d8c00117 	ldw	r3,4(sp)
   4a214:	18000126 	beq	r3,zero,4a21c <__fixdfsi+0x70>
   4a218:	0085c83a 	sub	r2,zero,r2
   4a21c:	dfc00717 	ldw	ra,28(sp)
   4a220:	dec00804 	addi	sp,sp,32
   4a224:	f800283a 	ret
   4a228:	d8800117 	ldw	r2,4(sp)
   4a22c:	1000091e 	bne	r2,zero,4a254 <__fixdfsi+0xa8>
   4a230:	00a00034 	movhi	r2,32768
   4a234:	10bfffc4 	addi	r2,r2,-1
   4a238:	dfc00717 	ldw	ra,28(sp)
   4a23c:	dec00804 	addi	sp,sp,32
   4a240:	f800283a 	ret
   4a244:	0005883a 	mov	r2,zero
   4a248:	dfc00717 	ldw	ra,28(sp)
   4a24c:	dec00804 	addi	sp,sp,32
   4a250:	f800283a 	ret
   4a254:	00a00034 	movhi	r2,32768
   4a258:	dfc00717 	ldw	ra,28(sp)
   4a25c:	dec00804 	addi	sp,sp,32
   4a260:	f800283a 	ret
   4a264:	2008907a 	slli	r4,r4,1
   4a268:	018007c4 	movi	r6,31
   4a26c:	308dc83a 	sub	r6,r6,r2
   4a270:	2188983a 	sll	r4,r4,r6
   4a274:	2884d83a 	srl	r2,r5,r2
   4a278:	2084b03a 	or	r2,r4,r2
   4a27c:	003fe406 	br	4a210 <__fixdfsi+0x64>

0004a280 <__floatunsidf>:
   4a280:	defff904 	addi	sp,sp,-28
   4a284:	dc000515 	stw	r16,20(sp)
   4a288:	dfc00615 	stw	ra,24(sp)
   4a28c:	d8000115 	stw	zero,4(sp)
   4a290:	2021883a 	mov	r16,r4
   4a294:	20001726 	beq	r4,zero,4a2f4 <__floatunsidf+0x74>
   4a298:	008000c4 	movi	r2,3
   4a29c:	d8800015 	stw	r2,0(sp)
   4a2a0:	00800f04 	movi	r2,60
   4a2a4:	d8800215 	stw	r2,8(sp)
   4a2a8:	004a6040 	call	4a604 <__clzsi2>
   4a2ac:	10c00744 	addi	r3,r2,29
   4a2b0:	18001816 	blt	r3,zero,4a314 <__floatunsidf+0x94>
   4a2b4:	18002d26 	beq	r3,zero,4a36c <__floatunsidf+0xec>
   4a2b8:	113fff44 	addi	r4,r2,-3
   4a2bc:	20002e16 	blt	r4,zero,4a378 <__floatunsidf+0xf8>
   4a2c0:	8108983a 	sll	r4,r16,r4
   4a2c4:	0021883a 	mov	r16,zero
   4a2c8:	014007c4 	movi	r5,31
   4a2cc:	2885c83a 	sub	r2,r5,r2
   4a2d0:	dc000315 	stw	r16,12(sp)
   4a2d4:	d9000415 	stw	r4,16(sp)
   4a2d8:	d8800215 	stw	r2,8(sp)
   4a2dc:	d809883a 	mov	r4,sp
   4a2e0:	004a6b00 	call	4a6b0 <__pack_d>
   4a2e4:	dfc00617 	ldw	ra,24(sp)
   4a2e8:	dc000517 	ldw	r16,20(sp)
   4a2ec:	dec00704 	addi	sp,sp,28
   4a2f0:	f800283a 	ret
   4a2f4:	00800084 	movi	r2,2
   4a2f8:	d809883a 	mov	r4,sp
   4a2fc:	d8800015 	stw	r2,0(sp)
   4a300:	004a6b00 	call	4a6b0 <__pack_d>
   4a304:	dfc00617 	ldw	ra,24(sp)
   4a308:	dc000517 	ldw	r16,20(sp)
   4a30c:	dec00704 	addi	sp,sp,28
   4a310:	f800283a 	ret
   4a314:	00c7c83a 	sub	r3,zero,r3
   4a318:	193ff804 	addi	r4,r3,-32
   4a31c:	20001c16 	blt	r4,zero,4a390 <__floatunsidf+0x110>
   4a320:	000b883a 	mov	r5,zero
   4a324:	2009d7fa 	srai	r4,r4,31
   4a328:	80c6d83a 	srl	r3,r16,r3
   4a32c:	297fffc4 	addi	r5,r5,-1
   4a330:	2c20703a 	and	r16,r5,r16
   4a334:	8020c03a 	cmpne	r16,r16,zero
   4a338:	1906703a 	and	r3,r3,r4
   4a33c:	010007c4 	movi	r4,31
   4a340:	80c6b03a 	or	r3,r16,r3
   4a344:	2085c83a 	sub	r2,r4,r2
   4a348:	d809883a 	mov	r4,sp
   4a34c:	d8c00315 	stw	r3,12(sp)
   4a350:	d8000415 	stw	zero,16(sp)
   4a354:	d8800215 	stw	r2,8(sp)
   4a358:	004a6b00 	call	4a6b0 <__pack_d>
   4a35c:	dfc00617 	ldw	ra,24(sp)
   4a360:	dc000517 	ldw	r16,20(sp)
   4a364:	dec00704 	addi	sp,sp,28
   4a368:	f800283a 	ret
   4a36c:	dc000315 	stw	r16,12(sp)
   4a370:	d8000415 	stw	zero,16(sp)
   4a374:	003fd906 	br	4a2dc <__floatunsidf+0x5c>
   4a378:	800ad07a 	srli	r5,r16,1
   4a37c:	010007c4 	movi	r4,31
   4a380:	20c9c83a 	sub	r4,r4,r3
   4a384:	2908d83a 	srl	r4,r5,r4
   4a388:	80e0983a 	sll	r16,r16,r3
   4a38c:	003fce06 	br	4a2c8 <__floatunsidf+0x48>
   4a390:	01400044 	movi	r5,1
   4a394:	28ca983a 	sll	r5,r5,r3
   4a398:	003fe206 	br	4a324 <__floatunsidf+0xa4>

0004a39c <udivmodsi4>:
   4a39c:	2005883a 	mov	r2,r4
   4a3a0:	2900182e 	bgeu	r5,r4,4a404 <udivmodsi4+0x68>
   4a3a4:	28001716 	blt	r5,zero,4a404 <udivmodsi4+0x68>
   4a3a8:	01000804 	movi	r4,32
   4a3ac:	00c00044 	movi	r3,1
   4a3b0:	00000206 	br	4a3bc <udivmodsi4+0x20>
   4a3b4:	20001126 	beq	r4,zero,4a3fc <udivmodsi4+0x60>
   4a3b8:	28000516 	blt	r5,zero,4a3d0 <udivmodsi4+0x34>
   4a3bc:	294b883a 	add	r5,r5,r5
   4a3c0:	213fffc4 	addi	r4,r4,-1
   4a3c4:	18c7883a 	add	r3,r3,r3
   4a3c8:	28bffa36 	bltu	r5,r2,4a3b4 <udivmodsi4+0x18>
   4a3cc:	18000b26 	beq	r3,zero,4a3fc <udivmodsi4+0x60>
   4a3d0:	0009883a 	mov	r4,zero
   4a3d4:	11400236 	bltu	r2,r5,4a3e0 <udivmodsi4+0x44>
   4a3d8:	1145c83a 	sub	r2,r2,r5
   4a3dc:	20c8b03a 	or	r4,r4,r3
   4a3e0:	1806d07a 	srli	r3,r3,1
   4a3e4:	280ad07a 	srli	r5,r5,1
   4a3e8:	183ffa1e 	bne	r3,zero,4a3d4 <udivmodsi4+0x38>
   4a3ec:	3000021e 	bne	r6,zero,4a3f8 <udivmodsi4+0x5c>
   4a3f0:	2005883a 	mov	r2,r4
   4a3f4:	f800283a 	ret
   4a3f8:	f800283a 	ret
   4a3fc:	0009883a 	mov	r4,zero
   4a400:	003ffa06 	br	4a3ec <udivmodsi4+0x50>
   4a404:	00c00044 	movi	r3,1
   4a408:	0009883a 	mov	r4,zero
   4a40c:	003ff106 	br	4a3d4 <udivmodsi4+0x38>

0004a410 <__divsi3>:
   4a410:	defffe04 	addi	sp,sp,-8
   4a414:	dfc00115 	stw	ra,4(sp)
   4a418:	dc000015 	stw	r16,0(sp)
   4a41c:	20000a16 	blt	r4,zero,4a448 <__divsi3+0x38>
   4a420:	0021883a 	mov	r16,zero
   4a424:	28000b16 	blt	r5,zero,4a454 <__divsi3+0x44>
   4a428:	000d883a 	mov	r6,zero
   4a42c:	004a39c0 	call	4a39c <udivmodsi4>
   4a430:	80000126 	beq	r16,zero,4a438 <__divsi3+0x28>
   4a434:	0085c83a 	sub	r2,zero,r2
   4a438:	dfc00117 	ldw	ra,4(sp)
   4a43c:	dc000017 	ldw	r16,0(sp)
   4a440:	dec00204 	addi	sp,sp,8
   4a444:	f800283a 	ret
   4a448:	0109c83a 	sub	r4,zero,r4
   4a44c:	04000044 	movi	r16,1
   4a450:	283ff50e 	bge	r5,zero,4a428 <__divsi3+0x18>
   4a454:	014bc83a 	sub	r5,zero,r5
   4a458:	8400005c 	xori	r16,r16,1
   4a45c:	003ff206 	br	4a428 <__divsi3+0x18>

0004a460 <__modsi3>:
   4a460:	deffff04 	addi	sp,sp,-4
   4a464:	dfc00015 	stw	ra,0(sp)
   4a468:	20000516 	blt	r4,zero,4a480 <__modsi3+0x20>
   4a46c:	28000c16 	blt	r5,zero,4a4a0 <__modsi3+0x40>
   4a470:	01800044 	movi	r6,1
   4a474:	dfc00017 	ldw	ra,0(sp)
   4a478:	dec00104 	addi	sp,sp,4
   4a47c:	004a39c1 	jmpi	4a39c <udivmodsi4>
   4a480:	0109c83a 	sub	r4,zero,r4
   4a484:	28000b16 	blt	r5,zero,4a4b4 <__modsi3+0x54>
   4a488:	01800044 	movi	r6,1
   4a48c:	004a39c0 	call	4a39c <udivmodsi4>
   4a490:	0085c83a 	sub	r2,zero,r2
   4a494:	dfc00017 	ldw	ra,0(sp)
   4a498:	dec00104 	addi	sp,sp,4
   4a49c:	f800283a 	ret
   4a4a0:	014bc83a 	sub	r5,zero,r5
   4a4a4:	01800044 	movi	r6,1
   4a4a8:	dfc00017 	ldw	ra,0(sp)
   4a4ac:	dec00104 	addi	sp,sp,4
   4a4b0:	004a39c1 	jmpi	4a39c <udivmodsi4>
   4a4b4:	014bc83a 	sub	r5,zero,r5
   4a4b8:	003ff306 	br	4a488 <__modsi3+0x28>

0004a4bc <__udivsi3>:
   4a4bc:	000d883a 	mov	r6,zero
   4a4c0:	004a39c1 	jmpi	4a39c <udivmodsi4>

0004a4c4 <__umodsi3>:
   4a4c4:	01800044 	movi	r6,1
   4a4c8:	004a39c1 	jmpi	4a39c <udivmodsi4>

0004a4cc <__mulsi3>:
   4a4cc:	0005883a 	mov	r2,zero
   4a4d0:	20000726 	beq	r4,zero,4a4f0 <__mulsi3+0x24>
   4a4d4:	20c0004c 	andi	r3,r4,1
   4a4d8:	2008d07a 	srli	r4,r4,1
   4a4dc:	18000126 	beq	r3,zero,4a4e4 <__mulsi3+0x18>
   4a4e0:	1145883a 	add	r2,r2,r5
   4a4e4:	294b883a 	add	r5,r5,r5
   4a4e8:	203ffa1e 	bne	r4,zero,4a4d4 <__mulsi3+0x8>
   4a4ec:	f800283a 	ret
   4a4f0:	f800283a 	ret

0004a4f4 <__muldi3>:
   4a4f4:	defff604 	addi	sp,sp,-40
   4a4f8:	dd400515 	stw	r21,20(sp)
   4a4fc:	dd000415 	stw	r20,16(sp)
   4a500:	257fffcc 	andi	r21,r4,65535
   4a504:	353fffcc 	andi	r20,r6,65535
   4a508:	dcc00315 	stw	r19,12(sp)
   4a50c:	3026d43a 	srli	r19,r6,16
   4a510:	dd800615 	stw	r22,24(sp)
   4a514:	dc800215 	stw	r18,8(sp)
   4a518:	dc400115 	stw	r17,4(sp)
   4a51c:	2024d43a 	srli	r18,r4,16
   4a520:	2023883a 	mov	r17,r4
   4a524:	282d883a 	mov	r22,r5
   4a528:	a009883a 	mov	r4,r20
   4a52c:	a80b883a 	mov	r5,r21
   4a530:	dfc00915 	stw	ra,36(sp)
   4a534:	df000815 	stw	fp,32(sp)
   4a538:	ddc00715 	stw	r23,28(sp)
   4a53c:	3839883a 	mov	fp,r7
   4a540:	dc000015 	stw	r16,0(sp)
   4a544:	3021883a 	mov	r16,r6
   4a548:	004a4cc0 	call	4a4cc <__mulsi3>
   4a54c:	a80b883a 	mov	r5,r21
   4a550:	9809883a 	mov	r4,r19
   4a554:	102f883a 	mov	r23,r2
   4a558:	004a4cc0 	call	4a4cc <__mulsi3>
   4a55c:	a009883a 	mov	r4,r20
   4a560:	900b883a 	mov	r5,r18
   4a564:	102b883a 	mov	r21,r2
   4a568:	004a4cc0 	call	4a4cc <__mulsi3>
   4a56c:	9809883a 	mov	r4,r19
   4a570:	900b883a 	mov	r5,r18
   4a574:	1029883a 	mov	r20,r2
   4a578:	004a4cc0 	call	4a4cc <__mulsi3>
   4a57c:	1007883a 	mov	r3,r2
   4a580:	b804d43a 	srli	r2,r23,16
   4a584:	a549883a 	add	r4,r20,r21
   4a588:	2089883a 	add	r4,r4,r2
   4a58c:	2500022e 	bgeu	r4,r20,4a598 <__muldi3+0xa4>
   4a590:	00800074 	movhi	r2,1
   4a594:	1887883a 	add	r3,r3,r2
   4a598:	200cd43a 	srli	r6,r4,16
   4a59c:	2004943a 	slli	r2,r4,16
   4a5a0:	e00b883a 	mov	r5,fp
   4a5a4:	8809883a 	mov	r4,r17
   4a5a8:	bdffffcc 	andi	r23,r23,65535
   4a5ac:	19a3883a 	add	r17,r3,r6
   4a5b0:	15ef883a 	add	r23,r2,r23
   4a5b4:	004a4cc0 	call	4a4cc <__mulsi3>
   4a5b8:	8009883a 	mov	r4,r16
   4a5bc:	b00b883a 	mov	r5,r22
   4a5c0:	1025883a 	mov	r18,r2
   4a5c4:	004a4cc0 	call	4a4cc <__mulsi3>
   4a5c8:	9085883a 	add	r2,r18,r2
   4a5cc:	1447883a 	add	r3,r2,r17
   4a5d0:	b805883a 	mov	r2,r23
   4a5d4:	dfc00917 	ldw	ra,36(sp)
   4a5d8:	df000817 	ldw	fp,32(sp)
   4a5dc:	ddc00717 	ldw	r23,28(sp)
   4a5e0:	dd800617 	ldw	r22,24(sp)
   4a5e4:	dd400517 	ldw	r21,20(sp)
   4a5e8:	dd000417 	ldw	r20,16(sp)
   4a5ec:	dcc00317 	ldw	r19,12(sp)
   4a5f0:	dc800217 	ldw	r18,8(sp)
   4a5f4:	dc400117 	ldw	r17,4(sp)
   4a5f8:	dc000017 	ldw	r16,0(sp)
   4a5fc:	dec00a04 	addi	sp,sp,40
   4a600:	f800283a 	ret

0004a604 <__clzsi2>:
   4a604:	00bfffd4 	movui	r2,65535
   4a608:	11000b36 	bltu	r2,r4,4a638 <__clzsi2+0x34>
   4a60c:	00803fc4 	movi	r2,255
   4a610:	11001e2e 	bgeu	r2,r4,4a68c <__clzsi2+0x88>
   4a614:	00c00204 	movi	r3,8
   4a618:	20c8d83a 	srl	r4,r4,r3
   4a61c:	00c00174 	movhi	r3,5
   4a620:	18f84904 	addi	r3,r3,-7900
   4a624:	00800604 	movi	r2,24
   4a628:	1909883a 	add	r4,r3,r4
   4a62c:	20c00003 	ldbu	r3,0(r4)
   4a630:	10c5c83a 	sub	r2,r2,r3
   4a634:	f800283a 	ret
   4a638:	00804034 	movhi	r2,256
   4a63c:	10bfffc4 	addi	r2,r2,-1
   4a640:	11000936 	bltu	r2,r4,4a668 <__clzsi2+0x64>
   4a644:	00800404 	movi	r2,16
   4a648:	1007883a 	mov	r3,r2
   4a64c:	20c8d83a 	srl	r4,r4,r3
   4a650:	00c00174 	movhi	r3,5
   4a654:	18f84904 	addi	r3,r3,-7900
   4a658:	1909883a 	add	r4,r3,r4
   4a65c:	20c00003 	ldbu	r3,0(r4)
   4a660:	10c5c83a 	sub	r2,r2,r3
   4a664:	f800283a 	ret
   4a668:	00c00604 	movi	r3,24
   4a66c:	20c8d83a 	srl	r4,r4,r3
   4a670:	00c00174 	movhi	r3,5
   4a674:	18f84904 	addi	r3,r3,-7900
   4a678:	00800204 	movi	r2,8
   4a67c:	1909883a 	add	r4,r3,r4
   4a680:	20c00003 	ldbu	r3,0(r4)
   4a684:	10c5c83a 	sub	r2,r2,r3
   4a688:	f800283a 	ret
   4a68c:	0007883a 	mov	r3,zero
   4a690:	20c8d83a 	srl	r4,r4,r3
   4a694:	00c00174 	movhi	r3,5
   4a698:	18f84904 	addi	r3,r3,-7900
   4a69c:	00800804 	movi	r2,32
   4a6a0:	1909883a 	add	r4,r3,r4
   4a6a4:	20c00003 	ldbu	r3,0(r4)
   4a6a8:	10c5c83a 	sub	r2,r2,r3
   4a6ac:	f800283a 	ret

0004a6b0 <__pack_d>:
   4a6b0:	20800017 	ldw	r2,0(r4)
   4a6b4:	defff804 	addi	sp,sp,-32
   4a6b8:	dcc00315 	stw	r19,12(sp)
   4a6bc:	dc800215 	stw	r18,8(sp)
   4a6c0:	dfc00715 	stw	ra,28(sp)
   4a6c4:	dd800615 	stw	r22,24(sp)
   4a6c8:	dd400515 	stw	r21,20(sp)
   4a6cc:	dd000415 	stw	r20,16(sp)
   4a6d0:	dc400115 	stw	r17,4(sp)
   4a6d4:	dc000015 	stw	r16,0(sp)
   4a6d8:	04800044 	movi	r18,1
   4a6dc:	24400317 	ldw	r17,12(r4)
   4a6e0:	24000417 	ldw	r16,16(r4)
   4a6e4:	24c00117 	ldw	r19,4(r4)
   4a6e8:	9080422e 	bgeu	r18,r2,4a7f4 <__pack_d+0x144>
   4a6ec:	00c00104 	movi	r3,4
   4a6f0:	10c03c26 	beq	r2,r3,4a7e4 <__pack_d+0x134>
   4a6f4:	00c00084 	movi	r3,2
   4a6f8:	10c01926 	beq	r2,r3,4a760 <__pack_d+0xb0>
   4a6fc:	8c04b03a 	or	r2,r17,r16
   4a700:	10001726 	beq	r2,zero,4a760 <__pack_d+0xb0>
   4a704:	21000217 	ldw	r4,8(r4)
   4a708:	00bf0084 	movi	r2,-1022
   4a70c:	20804016 	blt	r4,r2,4a810 <__pack_d+0x160>
   4a710:	0080ffc4 	movi	r2,1023
   4a714:	11003316 	blt	r2,r4,4a7e4 <__pack_d+0x134>
   4a718:	88803fcc 	andi	r2,r17,255
   4a71c:	00c02004 	movi	r3,128
   4a720:	10c02926 	beq	r2,r3,4a7c8 <__pack_d+0x118>
   4a724:	88801fc4 	addi	r2,r17,127
   4a728:	1463803a 	cmpltu	r17,r2,r17
   4a72c:	8c21883a 	add	r16,r17,r16
   4a730:	1023883a 	mov	r17,r2
   4a734:	00880034 	movhi	r2,8192
   4a738:	10bfffc4 	addi	r2,r2,-1
   4a73c:	14001c36 	bltu	r2,r16,4a7b0 <__pack_d+0x100>
   4a740:	2100ffc4 	addi	r4,r4,1023
   4a744:	8006963a 	slli	r3,r16,24
   4a748:	8804d23a 	srli	r2,r17,8
   4a74c:	8020913a 	slli	r16,r16,4
   4a750:	2101ffcc 	andi	r4,r4,2047
   4a754:	1884b03a 	or	r2,r3,r2
   4a758:	8020d33a 	srli	r16,r16,12
   4a75c:	00000306 	br	4a76c <__pack_d+0xbc>
   4a760:	0009883a 	mov	r4,zero
   4a764:	0005883a 	mov	r2,zero
   4a768:	0021883a 	mov	r16,zero
   4a76c:	2008953a 	slli	r4,r4,20
   4a770:	982697fa 	slli	r19,r19,31
   4a774:	00c00434 	movhi	r3,16
   4a778:	18ffffc4 	addi	r3,r3,-1
   4a77c:	80e0703a 	and	r16,r16,r3
   4a780:	8106b03a 	or	r3,r16,r4
   4a784:	1cc6b03a 	or	r3,r3,r19
   4a788:	dfc00717 	ldw	ra,28(sp)
   4a78c:	dd800617 	ldw	r22,24(sp)
   4a790:	dd400517 	ldw	r21,20(sp)
   4a794:	dd000417 	ldw	r20,16(sp)
   4a798:	dcc00317 	ldw	r19,12(sp)
   4a79c:	dc800217 	ldw	r18,8(sp)
   4a7a0:	dc400117 	ldw	r17,4(sp)
   4a7a4:	dc000017 	ldw	r16,0(sp)
   4a7a8:	dec00804 	addi	sp,sp,32
   4a7ac:	f800283a 	ret
   4a7b0:	800697fa 	slli	r3,r16,31
   4a7b4:	8804d07a 	srli	r2,r17,1
   4a7b8:	21010004 	addi	r4,r4,1024
   4a7bc:	8020d07a 	srli	r16,r16,1
   4a7c0:	18a2b03a 	or	r17,r3,r2
   4a7c4:	003fdf06 	br	4a744 <__pack_d+0x94>
   4a7c8:	88c0400c 	andi	r3,r17,256
   4a7cc:	183fd926 	beq	r3,zero,4a734 <__pack_d+0x84>
   4a7d0:	8885883a 	add	r2,r17,r2
   4a7d4:	1463803a 	cmpltu	r17,r2,r17
   4a7d8:	8c21883a 	add	r16,r17,r16
   4a7dc:	1023883a 	mov	r17,r2
   4a7e0:	003fd406 	br	4a734 <__pack_d+0x84>
   4a7e4:	0101ffc4 	movi	r4,2047
   4a7e8:	0005883a 	mov	r2,zero
   4a7ec:	0021883a 	mov	r16,zero
   4a7f0:	003fde06 	br	4a76c <__pack_d+0xbc>
   4a7f4:	84000234 	orhi	r16,r16,8
   4a7f8:	00c00434 	movhi	r3,16
   4a7fc:	18ffffc4 	addi	r3,r3,-1
   4a800:	8805883a 	mov	r2,r17
   4a804:	80e0703a 	and	r16,r16,r3
   4a808:	0101ffc4 	movi	r4,2047
   4a80c:	003fd706 	br	4a76c <__pack_d+0xbc>
   4a810:	1129c83a 	sub	r20,r2,r4
   4a814:	00800e04 	movi	r2,56
   4a818:	15002716 	blt	r2,r20,4a8b8 <__pack_d+0x208>
   4a81c:	800b883a 	mov	r5,r16
   4a820:	a00d883a 	mov	r6,r20
   4a824:	8809883a 	mov	r4,r17
   4a828:	004aaa80 	call	4aaa8 <__lshrdi3>
   4a82c:	9009883a 	mov	r4,r18
   4a830:	000b883a 	mov	r5,zero
   4a834:	a00d883a 	mov	r6,r20
   4a838:	102d883a 	mov	r22,r2
   4a83c:	182b883a 	mov	r21,r3
   4a840:	004aaec0 	call	4aaec <__ashldi3>
   4a844:	1009003a 	cmpeq	r4,r2,zero
   4a848:	1907c83a 	sub	r3,r3,r4
   4a84c:	10bfffc4 	addi	r2,r2,-1
   4a850:	1c20703a 	and	r16,r3,r16
   4a854:	1444703a 	and	r2,r2,r17
   4a858:	1404b03a 	or	r2,r2,r16
   4a85c:	1004c03a 	cmpne	r2,r2,zero
   4a860:	1584b03a 	or	r2,r2,r22
   4a864:	11003fcc 	andi	r4,r2,255
   4a868:	01402004 	movi	r5,128
   4a86c:	a807883a 	mov	r3,r21
   4a870:	2140131e 	bne	r4,r5,4a8c0 <__pack_d+0x210>
   4a874:	1140400c 	andi	r5,r2,256
   4a878:	28000426 	beq	r5,zero,4a88c <__pack_d+0x1dc>
   4a87c:	1109883a 	add	r4,r2,r4
   4a880:	2085803a 	cmpltu	r2,r4,r2
   4a884:	1547883a 	add	r3,r2,r21
   4a888:	2005883a 	mov	r2,r4
   4a88c:	1808963a 	slli	r4,r3,24
   4a890:	1004d23a 	srli	r2,r2,8
   4a894:	1820913a 	slli	r16,r3,4
   4a898:	01440034 	movhi	r5,4096
   4a89c:	297fffc4 	addi	r5,r5,-1
   4a8a0:	2084b03a 	or	r2,r4,r2
   4a8a4:	8020d33a 	srli	r16,r16,12
   4a8a8:	01000044 	movi	r4,1
   4a8ac:	28ffaf36 	bltu	r5,r3,4a76c <__pack_d+0xbc>
   4a8b0:	0009883a 	mov	r4,zero
   4a8b4:	003fad06 	br	4a76c <__pack_d+0xbc>
   4a8b8:	0005883a 	mov	r2,zero
   4a8bc:	0007883a 	mov	r3,zero
   4a8c0:	11001fc4 	addi	r4,r2,127
   4a8c4:	2085803a 	cmpltu	r2,r4,r2
   4a8c8:	10c7883a 	add	r3,r2,r3
   4a8cc:	2005883a 	mov	r2,r4
   4a8d0:	003fee06 	br	4a88c <__pack_d+0x1dc>

0004a8d4 <__unpack_d>:
   4a8d4:	21800117 	ldw	r6,4(r4)
   4a8d8:	20c00017 	ldw	r3,0(r4)
   4a8dc:	3004d7fa 	srli	r2,r6,31
   4a8e0:	3008d53a 	srli	r4,r6,20
   4a8e4:	28800115 	stw	r2,4(r5)
   4a8e8:	2101ffcc 	andi	r4,r4,2047
   4a8ec:	00800434 	movhi	r2,16
   4a8f0:	10bfffc4 	addi	r2,r2,-1
   4a8f4:	3084703a 	and	r2,r6,r2
   4a8f8:	20001a1e 	bne	r4,zero,4a964 <__unpack_d+0x90>
   4a8fc:	1888b03a 	or	r4,r3,r2
   4a900:	20002626 	beq	r4,zero,4a99c <__unpack_d+0xc8>
   4a904:	1808d63a 	srli	r4,r3,24
   4a908:	1004923a 	slli	r2,r2,8
   4a90c:	01bf0084 	movi	r6,-1022
   4a910:	29800215 	stw	r6,8(r5)
   4a914:	2084b03a 	or	r2,r4,r2
   4a918:	010000c4 	movi	r4,3
   4a91c:	29000015 	stw	r4,0(r5)
   4a920:	02040034 	movhi	r8,4096
   4a924:	423fffc4 	addi	r8,r8,-1
   4a928:	1806923a 	slli	r3,r3,8
   4a92c:	40801836 	bltu	r8,r2,4a990 <__unpack_d+0xbc>
   4a930:	013f0044 	movi	r4,-1023
   4a934:	18cd883a 	add	r6,r3,r3
   4a938:	30c7803a 	cmpltu	r3,r6,r3
   4a93c:	1085883a 	add	r2,r2,r2
   4a940:	1885883a 	add	r2,r3,r2
   4a944:	200f883a 	mov	r7,r4
   4a948:	3007883a 	mov	r3,r6
   4a94c:	213fffc4 	addi	r4,r4,-1
   4a950:	40bff82e 	bgeu	r8,r2,4a934 <__unpack_d+0x60>
   4a954:	29c00215 	stw	r7,8(r5)
   4a958:	28c00315 	stw	r3,12(r5)
   4a95c:	28800415 	stw	r2,16(r5)
   4a960:	f800283a 	ret
   4a964:	01c1ffc4 	movi	r7,2047
   4a968:	21c00f26 	beq	r4,r7,4a9a8 <__unpack_d+0xd4>
   4a96c:	180cd63a 	srli	r6,r3,24
   4a970:	1004923a 	slli	r2,r2,8
   4a974:	213f0044 	addi	r4,r4,-1023
   4a978:	1806923a 	slli	r3,r3,8
   4a97c:	3084b03a 	or	r2,r6,r2
   4a980:	29000215 	stw	r4,8(r5)
   4a984:	010000c4 	movi	r4,3
   4a988:	10840034 	orhi	r2,r2,4096
   4a98c:	29000015 	stw	r4,0(r5)
   4a990:	28c00315 	stw	r3,12(r5)
   4a994:	28800415 	stw	r2,16(r5)
   4a998:	f800283a 	ret
   4a99c:	00800084 	movi	r2,2
   4a9a0:	28800015 	stw	r2,0(r5)
   4a9a4:	f800283a 	ret
   4a9a8:	1888b03a 	or	r4,r3,r2
   4a9ac:	20000526 	beq	r4,zero,4a9c4 <__unpack_d+0xf0>
   4a9b0:	3180022c 	andhi	r6,r6,8
   4a9b4:	30000626 	beq	r6,zero,4a9d0 <__unpack_d+0xfc>
   4a9b8:	01000044 	movi	r4,1
   4a9bc:	29000015 	stw	r4,0(r5)
   4a9c0:	003ff306 	br	4a990 <__unpack_d+0xbc>
   4a9c4:	00800104 	movi	r2,4
   4a9c8:	28800015 	stw	r2,0(r5)
   4a9cc:	f800283a 	ret
   4a9d0:	28000015 	stw	zero,0(r5)
   4a9d4:	003fee06 	br	4a990 <__unpack_d+0xbc>

0004a9d8 <__fpcmp_parts_d>:
   4a9d8:	20c00017 	ldw	r3,0(r4)
   4a9dc:	00800044 	movi	r2,1
   4a9e0:	10c0142e 	bgeu	r2,r3,4aa34 <__fpcmp_parts_d+0x5c>
   4a9e4:	29800017 	ldw	r6,0(r5)
   4a9e8:	1180122e 	bgeu	r2,r6,4aa34 <__fpcmp_parts_d+0x5c>
   4a9ec:	01c00104 	movi	r7,4
   4a9f0:	19c02826 	beq	r3,r7,4aa94 <__fpcmp_parts_d+0xbc>
   4a9f4:	31c00926 	beq	r6,r7,4aa1c <__fpcmp_parts_d+0x44>
   4a9f8:	01c00084 	movi	r7,2
   4a9fc:	19c00626 	beq	r3,r7,4aa18 <__fpcmp_parts_d+0x40>
   4aa00:	31c00a26 	beq	r6,r7,4aa2c <__fpcmp_parts_d+0x54>
   4aa04:	20c00117 	ldw	r3,4(r4)
   4aa08:	29800117 	ldw	r6,4(r5)
   4aa0c:	19800b26 	beq	r3,r6,4aa3c <__fpcmp_parts_d+0x64>
   4aa10:	1800041e 	bne	r3,zero,4aa24 <__fpcmp_parts_d+0x4c>
   4aa14:	f800283a 	ret
   4aa18:	30c01a26 	beq	r6,r3,4aa84 <__fpcmp_parts_d+0xac>
   4aa1c:	28800117 	ldw	r2,4(r5)
   4aa20:	1000041e 	bne	r2,zero,4aa34 <__fpcmp_parts_d+0x5c>
   4aa24:	00bfffc4 	movi	r2,-1
   4aa28:	f800283a 	ret
   4aa2c:	20800117 	ldw	r2,4(r4)
   4aa30:	103ffc1e 	bne	r2,zero,4aa24 <__fpcmp_parts_d+0x4c>
   4aa34:	00800044 	movi	r2,1
   4aa38:	f800283a 	ret
   4aa3c:	21c00217 	ldw	r7,8(r4)
   4aa40:	29800217 	ldw	r6,8(r5)
   4aa44:	31c0020e 	bge	r6,r7,4aa50 <__fpcmp_parts_d+0x78>
   4aa48:	183ff61e 	bne	r3,zero,4aa24 <__fpcmp_parts_d+0x4c>
   4aa4c:	f800283a 	ret
   4aa50:	39800a16 	blt	r7,r6,4aa7c <__fpcmp_parts_d+0xa4>
   4aa54:	20800417 	ldw	r2,16(r4)
   4aa58:	29800417 	ldw	r6,16(r5)
   4aa5c:	21c00317 	ldw	r7,12(r4)
   4aa60:	29000317 	ldw	r4,12(r5)
   4aa64:	30800936 	bltu	r6,r2,4aa8c <__fpcmp_parts_d+0xb4>
   4aa68:	1180011e 	bne	r2,r6,4aa70 <__fpcmp_parts_d+0x98>
   4aa6c:	21c00736 	bltu	r4,r7,4aa8c <__fpcmp_parts_d+0xb4>
   4aa70:	11800236 	bltu	r2,r6,4aa7c <__fpcmp_parts_d+0xa4>
   4aa74:	3080031e 	bne	r6,r2,4aa84 <__fpcmp_parts_d+0xac>
   4aa78:	3900022e 	bgeu	r7,r4,4aa84 <__fpcmp_parts_d+0xac>
   4aa7c:	183fe926 	beq	r3,zero,4aa24 <__fpcmp_parts_d+0x4c>
   4aa80:	003fec06 	br	4aa34 <__fpcmp_parts_d+0x5c>
   4aa84:	0005883a 	mov	r2,zero
   4aa88:	f800283a 	ret
   4aa8c:	183fe926 	beq	r3,zero,4aa34 <__fpcmp_parts_d+0x5c>
   4aa90:	003fe406 	br	4aa24 <__fpcmp_parts_d+0x4c>
   4aa94:	30ffe51e 	bne	r6,r3,4aa2c <__fpcmp_parts_d+0x54>
   4aa98:	28c00117 	ldw	r3,4(r5)
   4aa9c:	20800117 	ldw	r2,4(r4)
   4aaa0:	1885c83a 	sub	r2,r3,r2
   4aaa4:	f800283a 	ret

0004aaa8 <__lshrdi3>:
   4aaa8:	2005883a 	mov	r2,r4
   4aaac:	2807883a 	mov	r3,r5
   4aab0:	30000826 	beq	r6,zero,4aad4 <__lshrdi3+0x2c>
   4aab4:	01000804 	movi	r4,32
   4aab8:	2189c83a 	sub	r4,r4,r6
   4aabc:	0100060e 	bge	zero,r4,4aad8 <__lshrdi3+0x30>
   4aac0:	1184d83a 	srl	r2,r2,r6
   4aac4:	2908983a 	sll	r4,r5,r4
   4aac8:	298cd83a 	srl	r6,r5,r6
   4aacc:	2084b03a 	or	r2,r4,r2
   4aad0:	3007883a 	mov	r3,r6
   4aad4:	f800283a 	ret
   4aad8:	0105c83a 	sub	r2,zero,r4
   4aadc:	000d883a 	mov	r6,zero
   4aae0:	2884d83a 	srl	r2,r5,r2
   4aae4:	3007883a 	mov	r3,r6
   4aae8:	003ffa06 	br	4aad4 <__lshrdi3+0x2c>

0004aaec <__ashldi3>:
   4aaec:	2005883a 	mov	r2,r4
   4aaf0:	2807883a 	mov	r3,r5
   4aaf4:	30000826 	beq	r6,zero,4ab18 <__ashldi3+0x2c>
   4aaf8:	01000804 	movi	r4,32
   4aafc:	2189c83a 	sub	r4,r4,r6
   4ab00:	0100060e 	bge	zero,r4,4ab1c <__ashldi3+0x30>
   4ab04:	1108d83a 	srl	r4,r2,r4
   4ab08:	2986983a 	sll	r3,r5,r6
   4ab0c:	118c983a 	sll	r6,r2,r6
   4ab10:	20c6b03a 	or	r3,r4,r3
   4ab14:	3005883a 	mov	r2,r6
   4ab18:	f800283a 	ret
   4ab1c:	0107c83a 	sub	r3,zero,r4
   4ab20:	000d883a 	mov	r6,zero
   4ab24:	10c6983a 	sll	r3,r2,r3
   4ab28:	3005883a 	mov	r2,r6
   4ab2c:	003ffa06 	br	4ab18 <__ashldi3+0x2c>

0004ab30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ab30:	defffe04 	addi	sp,sp,-8
   4ab34:	dfc00115 	stw	ra,4(sp)
   4ab38:	df000015 	stw	fp,0(sp)
   4ab3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ab40:	00800174 	movhi	r2,5
   4ab44:	10bf5204 	addi	r2,r2,-696
   4ab48:	10800017 	ldw	r2,0(r2)
   4ab4c:	10000526 	beq	r2,zero,4ab64 <alt_get_errno+0x34>
   4ab50:	00800174 	movhi	r2,5
   4ab54:	10bf5204 	addi	r2,r2,-696
   4ab58:	10800017 	ldw	r2,0(r2)
   4ab5c:	103ee83a 	callr	r2
   4ab60:	00000206 	br	4ab6c <alt_get_errno+0x3c>
   4ab64:	00800174 	movhi	r2,5
   4ab68:	10863b04 	addi	r2,r2,6380
}
   4ab6c:	e037883a 	mov	sp,fp
   4ab70:	dfc00117 	ldw	ra,4(sp)
   4ab74:	df000017 	ldw	fp,0(sp)
   4ab78:	dec00204 	addi	sp,sp,8
   4ab7c:	f800283a 	ret

0004ab80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4ab80:	defffb04 	addi	sp,sp,-20
   4ab84:	dfc00415 	stw	ra,16(sp)
   4ab88:	df000315 	stw	fp,12(sp)
   4ab8c:	df000304 	addi	fp,sp,12
   4ab90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4ab94:	e0bfff17 	ldw	r2,-4(fp)
   4ab98:	10000716 	blt	r2,zero,4abb8 <close+0x38>
   4ab9c:	e13fff17 	ldw	r4,-4(fp)
   4aba0:	01400304 	movi	r5,12
   4aba4:	004a4cc0 	call	4a4cc <__mulsi3>
   4aba8:	00c00174 	movhi	r3,5
   4abac:	18fac604 	addi	r3,r3,-5352
   4abb0:	10c5883a 	add	r2,r2,r3
   4abb4:	00000106 	br	4abbc <close+0x3c>
   4abb8:	0005883a 	mov	r2,zero
   4abbc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4abc0:	e0bffd17 	ldw	r2,-12(fp)
   4abc4:	10001826 	beq	r2,zero,4ac28 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4abc8:	e0bffd17 	ldw	r2,-12(fp)
   4abcc:	10800017 	ldw	r2,0(r2)
   4abd0:	10800417 	ldw	r2,16(r2)
   4abd4:	10000626 	beq	r2,zero,4abf0 <close+0x70>
   4abd8:	e0bffd17 	ldw	r2,-12(fp)
   4abdc:	10800017 	ldw	r2,0(r2)
   4abe0:	10800417 	ldw	r2,16(r2)
   4abe4:	e13ffd17 	ldw	r4,-12(fp)
   4abe8:	103ee83a 	callr	r2
   4abec:	00000106 	br	4abf4 <close+0x74>
   4abf0:	0005883a 	mov	r2,zero
   4abf4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4abf8:	e13fff17 	ldw	r4,-4(fp)
   4abfc:	004b5100 	call	4b510 <alt_release_fd>
    if (rval < 0)
   4ac00:	e0bffe17 	ldw	r2,-8(fp)
   4ac04:	1000060e 	bge	r2,zero,4ac20 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4ac08:	004ab300 	call	4ab30 <alt_get_errno>
   4ac0c:	e0fffe17 	ldw	r3,-8(fp)
   4ac10:	00c7c83a 	sub	r3,zero,r3
   4ac14:	10c00015 	stw	r3,0(r2)
      return -1;
   4ac18:	00bfffc4 	movi	r2,-1
   4ac1c:	00000606 	br	4ac38 <close+0xb8>
    }
    return 0;
   4ac20:	0005883a 	mov	r2,zero
   4ac24:	00000406 	br	4ac38 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ac28:	004ab300 	call	4ab30 <alt_get_errno>
   4ac2c:	00c01444 	movi	r3,81
   4ac30:	10c00015 	stw	r3,0(r2)
    return -1;
   4ac34:	00bfffc4 	movi	r2,-1
  }
}
   4ac38:	e037883a 	mov	sp,fp
   4ac3c:	dfc00117 	ldw	ra,4(sp)
   4ac40:	df000017 	ldw	fp,0(sp)
   4ac44:	dec00204 	addi	sp,sp,8
   4ac48:	f800283a 	ret

0004ac4c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ac4c:	defffc04 	addi	sp,sp,-16
   4ac50:	df000315 	stw	fp,12(sp)
   4ac54:	df000304 	addi	fp,sp,12
   4ac58:	e13ffd15 	stw	r4,-12(fp)
   4ac5c:	e17ffe15 	stw	r5,-8(fp)
   4ac60:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ac64:	e0bfff17 	ldw	r2,-4(fp)
}
   4ac68:	e037883a 	mov	sp,fp
   4ac6c:	df000017 	ldw	fp,0(sp)
   4ac70:	dec00104 	addi	sp,sp,4
   4ac74:	f800283a 	ret

0004ac78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ac78:	defffe04 	addi	sp,sp,-8
   4ac7c:	dfc00115 	stw	ra,4(sp)
   4ac80:	df000015 	stw	fp,0(sp)
   4ac84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ac88:	00800174 	movhi	r2,5
   4ac8c:	10bf5204 	addi	r2,r2,-696
   4ac90:	10800017 	ldw	r2,0(r2)
   4ac94:	10000526 	beq	r2,zero,4acac <alt_get_errno+0x34>
   4ac98:	00800174 	movhi	r2,5
   4ac9c:	10bf5204 	addi	r2,r2,-696
   4aca0:	10800017 	ldw	r2,0(r2)
   4aca4:	103ee83a 	callr	r2
   4aca8:	00000206 	br	4acb4 <alt_get_errno+0x3c>
   4acac:	00800174 	movhi	r2,5
   4acb0:	10863b04 	addi	r2,r2,6380
}
   4acb4:	e037883a 	mov	sp,fp
   4acb8:	dfc00117 	ldw	ra,4(sp)
   4acbc:	df000017 	ldw	fp,0(sp)
   4acc0:	dec00204 	addi	sp,sp,8
   4acc4:	f800283a 	ret

0004acc8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4acc8:	defffb04 	addi	sp,sp,-20
   4accc:	dfc00415 	stw	ra,16(sp)
   4acd0:	df000315 	stw	fp,12(sp)
   4acd4:	df000304 	addi	fp,sp,12
   4acd8:	e13ffe15 	stw	r4,-8(fp)
   4acdc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ace0:	e0bffe17 	ldw	r2,-8(fp)
   4ace4:	10000716 	blt	r2,zero,4ad04 <fstat+0x3c>
   4ace8:	e13ffe17 	ldw	r4,-8(fp)
   4acec:	01400304 	movi	r5,12
   4acf0:	004a4cc0 	call	4a4cc <__mulsi3>
   4acf4:	00c00174 	movhi	r3,5
   4acf8:	18fac604 	addi	r3,r3,-5352
   4acfc:	10c5883a 	add	r2,r2,r3
   4ad00:	00000106 	br	4ad08 <fstat+0x40>
   4ad04:	0005883a 	mov	r2,zero
   4ad08:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4ad0c:	e0bffd17 	ldw	r2,-12(fp)
   4ad10:	10001026 	beq	r2,zero,4ad54 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4ad14:	e0bffd17 	ldw	r2,-12(fp)
   4ad18:	10800017 	ldw	r2,0(r2)
   4ad1c:	10800817 	ldw	r2,32(r2)
   4ad20:	10000726 	beq	r2,zero,4ad40 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4ad24:	e0bffd17 	ldw	r2,-12(fp)
   4ad28:	10800017 	ldw	r2,0(r2)
   4ad2c:	10800817 	ldw	r2,32(r2)
   4ad30:	e13ffd17 	ldw	r4,-12(fp)
   4ad34:	e17fff17 	ldw	r5,-4(fp)
   4ad38:	103ee83a 	callr	r2
   4ad3c:	00000906 	br	4ad64 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4ad40:	e0bfff17 	ldw	r2,-4(fp)
   4ad44:	00c80004 	movi	r3,8192
   4ad48:	10c00115 	stw	r3,4(r2)
      return 0;
   4ad4c:	0005883a 	mov	r2,zero
   4ad50:	00000406 	br	4ad64 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ad54:	004ac780 	call	4ac78 <alt_get_errno>
   4ad58:	00c01444 	movi	r3,81
   4ad5c:	10c00015 	stw	r3,0(r2)
    return -1;
   4ad60:	00bfffc4 	movi	r2,-1
  }
}
   4ad64:	e037883a 	mov	sp,fp
   4ad68:	dfc00117 	ldw	ra,4(sp)
   4ad6c:	df000017 	ldw	fp,0(sp)
   4ad70:	dec00204 	addi	sp,sp,8
   4ad74:	f800283a 	ret

0004ad78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ad78:	defffe04 	addi	sp,sp,-8
   4ad7c:	dfc00115 	stw	ra,4(sp)
   4ad80:	df000015 	stw	fp,0(sp)
   4ad84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ad88:	00800174 	movhi	r2,5
   4ad8c:	10bf5204 	addi	r2,r2,-696
   4ad90:	10800017 	ldw	r2,0(r2)
   4ad94:	10000526 	beq	r2,zero,4adac <alt_get_errno+0x34>
   4ad98:	00800174 	movhi	r2,5
   4ad9c:	10bf5204 	addi	r2,r2,-696
   4ada0:	10800017 	ldw	r2,0(r2)
   4ada4:	103ee83a 	callr	r2
   4ada8:	00000206 	br	4adb4 <alt_get_errno+0x3c>
   4adac:	00800174 	movhi	r2,5
   4adb0:	10863b04 	addi	r2,r2,6380
}
   4adb4:	e037883a 	mov	sp,fp
   4adb8:	dfc00117 	ldw	ra,4(sp)
   4adbc:	df000017 	ldw	fp,0(sp)
   4adc0:	dec00204 	addi	sp,sp,8
   4adc4:	f800283a 	ret

0004adc8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4adc8:	deffed04 	addi	sp,sp,-76
   4adcc:	dfc01215 	stw	ra,72(sp)
   4add0:	df001115 	stw	fp,68(sp)
   4add4:	df001104 	addi	fp,sp,68
   4add8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4addc:	e0bfff17 	ldw	r2,-4(fp)
   4ade0:	10000716 	blt	r2,zero,4ae00 <isatty+0x38>
   4ade4:	e13fff17 	ldw	r4,-4(fp)
   4ade8:	01400304 	movi	r5,12
   4adec:	004a4cc0 	call	4a4cc <__mulsi3>
   4adf0:	00c00174 	movhi	r3,5
   4adf4:	18fac604 	addi	r3,r3,-5352
   4adf8:	10c5883a 	add	r2,r2,r3
   4adfc:	00000106 	br	4ae04 <isatty+0x3c>
   4ae00:	0005883a 	mov	r2,zero
   4ae04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4ae08:	e0bfef17 	ldw	r2,-68(fp)
   4ae0c:	10000e26 	beq	r2,zero,4ae48 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4ae10:	e0bfef17 	ldw	r2,-68(fp)
   4ae14:	10800017 	ldw	r2,0(r2)
   4ae18:	10800817 	ldw	r2,32(r2)
   4ae1c:	1000021e 	bne	r2,zero,4ae28 <isatty+0x60>
    {
      return 1;
   4ae20:	00800044 	movi	r2,1
   4ae24:	00000c06 	br	4ae58 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4ae28:	e0bff004 	addi	r2,fp,-64
   4ae2c:	e13fff17 	ldw	r4,-4(fp)
   4ae30:	100b883a 	mov	r5,r2
   4ae34:	004acc80 	call	4acc8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4ae38:	e0bff117 	ldw	r2,-60(fp)
   4ae3c:	10880020 	cmpeqi	r2,r2,8192
   4ae40:	10803fcc 	andi	r2,r2,255
   4ae44:	00000406 	br	4ae58 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ae48:	004ad780 	call	4ad78 <alt_get_errno>
   4ae4c:	00c01444 	movi	r3,81
   4ae50:	10c00015 	stw	r3,0(r2)
    return 0;
   4ae54:	0005883a 	mov	r2,zero
  }
}
   4ae58:	e037883a 	mov	sp,fp
   4ae5c:	dfc00117 	ldw	ra,4(sp)
   4ae60:	df000017 	ldw	fp,0(sp)
   4ae64:	dec00204 	addi	sp,sp,8
   4ae68:	f800283a 	ret

0004ae6c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4ae6c:	defffc04 	addi	sp,sp,-16
   4ae70:	df000315 	stw	fp,12(sp)
   4ae74:	df000304 	addi	fp,sp,12
   4ae78:	e13ffd15 	stw	r4,-12(fp)
   4ae7c:	e17ffe15 	stw	r5,-8(fp)
   4ae80:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ae84:	e0fffe17 	ldw	r3,-8(fp)
   4ae88:	e0bffd17 	ldw	r2,-12(fp)
   4ae8c:	18800e26 	beq	r3,r2,4aec8 <alt_load_section+0x5c>
  {
    while( to != end )
   4ae90:	00000a06 	br	4aebc <alt_load_section+0x50>
    {
      *to++ = *from++;
   4ae94:	e0bffd17 	ldw	r2,-12(fp)
   4ae98:	10c00017 	ldw	r3,0(r2)
   4ae9c:	e0bffe17 	ldw	r2,-8(fp)
   4aea0:	10c00015 	stw	r3,0(r2)
   4aea4:	e0bffe17 	ldw	r2,-8(fp)
   4aea8:	10800104 	addi	r2,r2,4
   4aeac:	e0bffe15 	stw	r2,-8(fp)
   4aeb0:	e0bffd17 	ldw	r2,-12(fp)
   4aeb4:	10800104 	addi	r2,r2,4
   4aeb8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4aebc:	e0fffe17 	ldw	r3,-8(fp)
   4aec0:	e0bfff17 	ldw	r2,-4(fp)
   4aec4:	18bff31e 	bne	r3,r2,4ae94 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4aec8:	e037883a 	mov	sp,fp
   4aecc:	df000017 	ldw	fp,0(sp)
   4aed0:	dec00104 	addi	sp,sp,4
   4aed4:	f800283a 	ret

0004aed8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4aed8:	defffe04 	addi	sp,sp,-8
   4aedc:	dfc00115 	stw	ra,4(sp)
   4aee0:	df000015 	stw	fp,0(sp)
   4aee4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4aee8:	01000174 	movhi	r4,5
   4aeec:	213f6904 	addi	r4,r4,-604
   4aef0:	01400174 	movhi	r5,5
   4aef4:	29789904 	addi	r5,r5,-7580
   4aef8:	01800174 	movhi	r6,5
   4aefc:	31bf6904 	addi	r6,r6,-604
   4af00:	004ae6c0 	call	4ae6c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4af04:	01000134 	movhi	r4,4
   4af08:	21000804 	addi	r4,r4,32
   4af0c:	01400134 	movhi	r5,4
   4af10:	29400804 	addi	r5,r5,32
   4af14:	01800134 	movhi	r6,4
   4af18:	31806e04 	addi	r6,r6,440
   4af1c:	004ae6c0 	call	4ae6c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4af20:	01000174 	movhi	r4,5
   4af24:	2137a904 	addi	r4,r4,-8540
   4af28:	01400174 	movhi	r5,5
   4af2c:	2977a904 	addi	r5,r5,-8540
   4af30:	01800174 	movhi	r6,5
   4af34:	31b89904 	addi	r6,r6,-7580
   4af38:	004ae6c0 	call	4ae6c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4af3c:	004d0180 	call	4d018 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4af40:	004d4d80 	call	4d4d8 <alt_icache_flush_all>
}
   4af44:	e037883a 	mov	sp,fp
   4af48:	dfc00117 	ldw	ra,4(sp)
   4af4c:	df000017 	ldw	fp,0(sp)
   4af50:	dec00204 	addi	sp,sp,8
   4af54:	f800283a 	ret

0004af58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4af58:	defffe04 	addi	sp,sp,-8
   4af5c:	dfc00115 	stw	ra,4(sp)
   4af60:	df000015 	stw	fp,0(sp)
   4af64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4af68:	00800174 	movhi	r2,5
   4af6c:	10bf5204 	addi	r2,r2,-696
   4af70:	10800017 	ldw	r2,0(r2)
   4af74:	10000526 	beq	r2,zero,4af8c <alt_get_errno+0x34>
   4af78:	00800174 	movhi	r2,5
   4af7c:	10bf5204 	addi	r2,r2,-696
   4af80:	10800017 	ldw	r2,0(r2)
   4af84:	103ee83a 	callr	r2
   4af88:	00000206 	br	4af94 <alt_get_errno+0x3c>
   4af8c:	00800174 	movhi	r2,5
   4af90:	10863b04 	addi	r2,r2,6380
}
   4af94:	e037883a 	mov	sp,fp
   4af98:	dfc00117 	ldw	ra,4(sp)
   4af9c:	df000017 	ldw	fp,0(sp)
   4afa0:	dec00204 	addi	sp,sp,8
   4afa4:	f800283a 	ret

0004afa8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4afa8:	defff904 	addi	sp,sp,-28
   4afac:	dfc00615 	stw	ra,24(sp)
   4afb0:	df000515 	stw	fp,20(sp)
   4afb4:	df000504 	addi	fp,sp,20
   4afb8:	e13ffd15 	stw	r4,-12(fp)
   4afbc:	e17ffe15 	stw	r5,-8(fp)
   4afc0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4afc4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4afc8:	e0bffd17 	ldw	r2,-12(fp)
   4afcc:	10000716 	blt	r2,zero,4afec <lseek+0x44>
   4afd0:	e13ffd17 	ldw	r4,-12(fp)
   4afd4:	01400304 	movi	r5,12
   4afd8:	004a4cc0 	call	4a4cc <__mulsi3>
   4afdc:	00c00174 	movhi	r3,5
   4afe0:	18fac604 	addi	r3,r3,-5352
   4afe4:	10c5883a 	add	r2,r2,r3
   4afe8:	00000106 	br	4aff0 <lseek+0x48>
   4afec:	0005883a 	mov	r2,zero
   4aff0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4aff4:	e0bffc17 	ldw	r2,-16(fp)
   4aff8:	10001026 	beq	r2,zero,4b03c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4affc:	e0bffc17 	ldw	r2,-16(fp)
   4b000:	10800017 	ldw	r2,0(r2)
   4b004:	10800717 	ldw	r2,28(r2)
   4b008:	10000926 	beq	r2,zero,4b030 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4b00c:	e0bffc17 	ldw	r2,-16(fp)
   4b010:	10800017 	ldw	r2,0(r2)
   4b014:	10800717 	ldw	r2,28(r2)
   4b018:	e13ffc17 	ldw	r4,-16(fp)
   4b01c:	e17ffe17 	ldw	r5,-8(fp)
   4b020:	e1bfff17 	ldw	r6,-4(fp)
   4b024:	103ee83a 	callr	r2
   4b028:	e0bffb15 	stw	r2,-20(fp)
   4b02c:	00000506 	br	4b044 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4b030:	00bfde84 	movi	r2,-134
   4b034:	e0bffb15 	stw	r2,-20(fp)
   4b038:	00000206 	br	4b044 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4b03c:	00bfebc4 	movi	r2,-81
   4b040:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4b044:	e0bffb17 	ldw	r2,-20(fp)
   4b048:	1000060e 	bge	r2,zero,4b064 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4b04c:	004af580 	call	4af58 <alt_get_errno>
   4b050:	e0fffb17 	ldw	r3,-20(fp)
   4b054:	00c7c83a 	sub	r3,zero,r3
   4b058:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4b05c:	00bfffc4 	movi	r2,-1
   4b060:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4b064:	e0bffb17 	ldw	r2,-20(fp)
}
   4b068:	e037883a 	mov	sp,fp
   4b06c:	dfc00117 	ldw	ra,4(sp)
   4b070:	df000017 	ldw	fp,0(sp)
   4b074:	dec00204 	addi	sp,sp,8
   4b078:	f800283a 	ret

0004b07c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4b07c:	defffd04 	addi	sp,sp,-12
   4b080:	dfc00215 	stw	ra,8(sp)
   4b084:	df000115 	stw	fp,4(sp)
   4b088:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4b08c:	0009883a 	mov	r4,zero
   4b090:	004b7b80 	call	4b7b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4b094:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4b098:	004b7ec0 	call	4b7ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4b09c:	01000174 	movhi	r4,5
   4b0a0:	21388c04 	addi	r4,r4,-7632
   4b0a4:	01400174 	movhi	r5,5
   4b0a8:	29788c04 	addi	r5,r5,-7632
   4b0ac:	01800174 	movhi	r6,5
   4b0b0:	31b88c04 	addi	r6,r6,-7632
   4b0b4:	004d89c0 	call	4d89c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4b0b8:	004d1240 	call	4d124 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4b0bc:	01000174 	movhi	r4,5
   4b0c0:	21346004 	addi	r4,r4,-11904
   4b0c4:	004dad00 	call	4dad0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4b0c8:	d126fa17 	ldw	r4,-25624(gp)
   4b0cc:	d0e6fb17 	ldw	r3,-25620(gp)
   4b0d0:	d0a6fc17 	ldw	r2,-25616(gp)
   4b0d4:	180b883a 	mov	r5,r3
   4b0d8:	100d883a 	mov	r6,r2
   4b0dc:	00401f40 	call	401f4 <main>
   4b0e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4b0e4:	01000044 	movi	r4,1
   4b0e8:	004ab800 	call	4ab80 <close>
  exit (result);
   4b0ec:	e13fff17 	ldw	r4,-4(fp)
   4b0f0:	004dae40 	call	4dae4 <exit>

0004b0f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4b0f4:	defffe04 	addi	sp,sp,-8
   4b0f8:	df000115 	stw	fp,4(sp)
   4b0fc:	df000104 	addi	fp,sp,4
   4b100:	e13fff15 	stw	r4,-4(fp)
}
   4b104:	e037883a 	mov	sp,fp
   4b108:	df000017 	ldw	fp,0(sp)
   4b10c:	dec00104 	addi	sp,sp,4
   4b110:	f800283a 	ret

0004b114 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4b114:	defffe04 	addi	sp,sp,-8
   4b118:	df000115 	stw	fp,4(sp)
   4b11c:	df000104 	addi	fp,sp,4
   4b120:	e13fff15 	stw	r4,-4(fp)
}
   4b124:	e037883a 	mov	sp,fp
   4b128:	df000017 	ldw	fp,0(sp)
   4b12c:	dec00104 	addi	sp,sp,4
   4b130:	f800283a 	ret

0004b134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b134:	defffe04 	addi	sp,sp,-8
   4b138:	dfc00115 	stw	ra,4(sp)
   4b13c:	df000015 	stw	fp,0(sp)
   4b140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b144:	00800174 	movhi	r2,5
   4b148:	10bf5204 	addi	r2,r2,-696
   4b14c:	10800017 	ldw	r2,0(r2)
   4b150:	10000526 	beq	r2,zero,4b168 <alt_get_errno+0x34>
   4b154:	00800174 	movhi	r2,5
   4b158:	10bf5204 	addi	r2,r2,-696
   4b15c:	10800017 	ldw	r2,0(r2)
   4b160:	103ee83a 	callr	r2
   4b164:	00000206 	br	4b170 <alt_get_errno+0x3c>
   4b168:	00800174 	movhi	r2,5
   4b16c:	10863b04 	addi	r2,r2,6380
}
   4b170:	e037883a 	mov	sp,fp
   4b174:	dfc00117 	ldw	ra,4(sp)
   4b178:	df000017 	ldw	fp,0(sp)
   4b17c:	dec00204 	addi	sp,sp,8
   4b180:	f800283a 	ret

0004b184 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4b184:	defffb04 	addi	sp,sp,-20
   4b188:	dfc00415 	stw	ra,16(sp)
   4b18c:	df000315 	stw	fp,12(sp)
   4b190:	dc000215 	stw	r16,8(sp)
   4b194:	df000204 	addi	fp,sp,8
   4b198:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4b19c:	e0bfff17 	ldw	r2,-4(fp)
   4b1a0:	10800217 	ldw	r2,8(r2)
   4b1a4:	10d00034 	orhi	r3,r2,16384
   4b1a8:	e0bfff17 	ldw	r2,-4(fp)
   4b1ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b1b0:	e03ffe15 	stw	zero,-8(fp)
   4b1b4:	00002206 	br	4b240 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b1b8:	04000174 	movhi	r16,5
   4b1bc:	843ac604 	addi	r16,r16,-5352
   4b1c0:	e0bffe17 	ldw	r2,-8(fp)
   4b1c4:	1009883a 	mov	r4,r2
   4b1c8:	01400304 	movi	r5,12
   4b1cc:	004a4cc0 	call	4a4cc <__mulsi3>
   4b1d0:	8085883a 	add	r2,r16,r2
   4b1d4:	10c00017 	ldw	r3,0(r2)
   4b1d8:	e0bfff17 	ldw	r2,-4(fp)
   4b1dc:	10800017 	ldw	r2,0(r2)
   4b1e0:	1880141e 	bne	r3,r2,4b234 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b1e4:	04000174 	movhi	r16,5
   4b1e8:	843ac604 	addi	r16,r16,-5352
   4b1ec:	e0bffe17 	ldw	r2,-8(fp)
   4b1f0:	1009883a 	mov	r4,r2
   4b1f4:	01400304 	movi	r5,12
   4b1f8:	004a4cc0 	call	4a4cc <__mulsi3>
   4b1fc:	8085883a 	add	r2,r16,r2
   4b200:	10800204 	addi	r2,r2,8
   4b204:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b208:	10000a0e 	bge	r2,zero,4b234 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4b20c:	e13ffe17 	ldw	r4,-8(fp)
   4b210:	01400304 	movi	r5,12
   4b214:	004a4cc0 	call	4a4cc <__mulsi3>
   4b218:	00c00174 	movhi	r3,5
   4b21c:	18fac604 	addi	r3,r3,-5352
   4b220:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b224:	e0bfff17 	ldw	r2,-4(fp)
   4b228:	18800226 	beq	r3,r2,4b234 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4b22c:	00bffcc4 	movi	r2,-13
   4b230:	00000a06 	br	4b25c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b234:	e0bffe17 	ldw	r2,-8(fp)
   4b238:	10800044 	addi	r2,r2,1
   4b23c:	e0bffe15 	stw	r2,-8(fp)
   4b240:	00800174 	movhi	r2,5
   4b244:	10bf5104 	addi	r2,r2,-700
   4b248:	10800017 	ldw	r2,0(r2)
   4b24c:	1007883a 	mov	r3,r2
   4b250:	e0bffe17 	ldw	r2,-8(fp)
   4b254:	18bfd82e 	bgeu	r3,r2,4b1b8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4b258:	0005883a 	mov	r2,zero
}
   4b25c:	e037883a 	mov	sp,fp
   4b260:	dfc00217 	ldw	ra,8(sp)
   4b264:	df000117 	ldw	fp,4(sp)
   4b268:	dc000017 	ldw	r16,0(sp)
   4b26c:	dec00304 	addi	sp,sp,12
   4b270:	f800283a 	ret

0004b274 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4b274:	defff604 	addi	sp,sp,-40
   4b278:	dfc00915 	stw	ra,36(sp)
   4b27c:	df000815 	stw	fp,32(sp)
   4b280:	df000804 	addi	fp,sp,32
   4b284:	e13ffd15 	stw	r4,-12(fp)
   4b288:	e17ffe15 	stw	r5,-8(fp)
   4b28c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4b290:	00bfffc4 	movi	r2,-1
   4b294:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4b298:	00bffb44 	movi	r2,-19
   4b29c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4b2a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4b2a4:	e13ffd17 	ldw	r4,-12(fp)
   4b2a8:	01400174 	movhi	r5,5
   4b2ac:	297f4f04 	addi	r5,r5,-708
   4b2b0:	004d1dc0 	call	4d1dc <alt_find_dev>
   4b2b4:	e0bff815 	stw	r2,-32(fp)
   4b2b8:	e0bff817 	ldw	r2,-32(fp)
   4b2bc:	1000051e 	bne	r2,zero,4b2d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4b2c0:	e13ffd17 	ldw	r4,-12(fp)
   4b2c4:	004d26c0 	call	4d26c <alt_find_file>
   4b2c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4b2cc:	00800044 	movi	r2,1
   4b2d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4b2d4:	e0bff817 	ldw	r2,-32(fp)
   4b2d8:	10002a26 	beq	r2,zero,4b384 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4b2dc:	e13ff817 	ldw	r4,-32(fp)
   4b2e0:	004d4040 	call	4d404 <alt_get_fd>
   4b2e4:	e0bff915 	stw	r2,-28(fp)
   4b2e8:	e0bff917 	ldw	r2,-28(fp)
   4b2ec:	1000030e 	bge	r2,zero,4b2fc <open+0x88>
    {
      status = index;
   4b2f0:	e0bff917 	ldw	r2,-28(fp)
   4b2f4:	e0bffa15 	stw	r2,-24(fp)
   4b2f8:	00002406 	br	4b38c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4b2fc:	e13ff917 	ldw	r4,-28(fp)
   4b300:	01400304 	movi	r5,12
   4b304:	004a4cc0 	call	4a4cc <__mulsi3>
   4b308:	00c00174 	movhi	r3,5
   4b30c:	18fac604 	addi	r3,r3,-5352
   4b310:	10c5883a 	add	r2,r2,r3
   4b314:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4b318:	e0fffe17 	ldw	r3,-8(fp)
   4b31c:	00900034 	movhi	r2,16384
   4b320:	10bfffc4 	addi	r2,r2,-1
   4b324:	1886703a 	and	r3,r3,r2
   4b328:	e0bffc17 	ldw	r2,-16(fp)
   4b32c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4b330:	e0bffb17 	ldw	r2,-20(fp)
   4b334:	1000051e 	bne	r2,zero,4b34c <open+0xd8>
   4b338:	e13ffc17 	ldw	r4,-16(fp)
   4b33c:	004b1840 	call	4b184 <alt_file_locked>
   4b340:	e0bffa15 	stw	r2,-24(fp)
   4b344:	e0bffa17 	ldw	r2,-24(fp)
   4b348:	10001016 	blt	r2,zero,4b38c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4b34c:	e0bff817 	ldw	r2,-32(fp)
   4b350:	10800317 	ldw	r2,12(r2)
   4b354:	10000826 	beq	r2,zero,4b378 <open+0x104>
   4b358:	e0bff817 	ldw	r2,-32(fp)
   4b35c:	10800317 	ldw	r2,12(r2)
   4b360:	e13ffc17 	ldw	r4,-16(fp)
   4b364:	e17ffd17 	ldw	r5,-12(fp)
   4b368:	e1bffe17 	ldw	r6,-8(fp)
   4b36c:	e1ffff17 	ldw	r7,-4(fp)
   4b370:	103ee83a 	callr	r2
   4b374:	00000106 	br	4b37c <open+0x108>
   4b378:	0005883a 	mov	r2,zero
   4b37c:	e0bffa15 	stw	r2,-24(fp)
   4b380:	00000206 	br	4b38c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4b384:	00bffb44 	movi	r2,-19
   4b388:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4b38c:	e0bffa17 	ldw	r2,-24(fp)
   4b390:	1000080e 	bge	r2,zero,4b3b4 <open+0x140>
  {
    alt_release_fd (index);  
   4b394:	e13ff917 	ldw	r4,-28(fp)
   4b398:	004b5100 	call	4b510 <alt_release_fd>
    ALT_ERRNO = -status;
   4b39c:	004b1340 	call	4b134 <alt_get_errno>
   4b3a0:	e0fffa17 	ldw	r3,-24(fp)
   4b3a4:	00c7c83a 	sub	r3,zero,r3
   4b3a8:	10c00015 	stw	r3,0(r2)
    return -1;
   4b3ac:	00bfffc4 	movi	r2,-1
   4b3b0:	00000106 	br	4b3b8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4b3b4:	e0bff917 	ldw	r2,-28(fp)
}
   4b3b8:	e037883a 	mov	sp,fp
   4b3bc:	dfc00117 	ldw	ra,4(sp)
   4b3c0:	df000017 	ldw	fp,0(sp)
   4b3c4:	dec00204 	addi	sp,sp,8
   4b3c8:	f800283a 	ret

0004b3cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b3cc:	defffe04 	addi	sp,sp,-8
   4b3d0:	dfc00115 	stw	ra,4(sp)
   4b3d4:	df000015 	stw	fp,0(sp)
   4b3d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b3dc:	00800174 	movhi	r2,5
   4b3e0:	10bf5204 	addi	r2,r2,-696
   4b3e4:	10800017 	ldw	r2,0(r2)
   4b3e8:	10000526 	beq	r2,zero,4b400 <alt_get_errno+0x34>
   4b3ec:	00800174 	movhi	r2,5
   4b3f0:	10bf5204 	addi	r2,r2,-696
   4b3f4:	10800017 	ldw	r2,0(r2)
   4b3f8:	103ee83a 	callr	r2
   4b3fc:	00000206 	br	4b408 <alt_get_errno+0x3c>
   4b400:	00800174 	movhi	r2,5
   4b404:	10863b04 	addi	r2,r2,6380
}
   4b408:	e037883a 	mov	sp,fp
   4b40c:	dfc00117 	ldw	ra,4(sp)
   4b410:	df000017 	ldw	fp,0(sp)
   4b414:	dec00204 	addi	sp,sp,8
   4b418:	f800283a 	ret

0004b41c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4b41c:	defff904 	addi	sp,sp,-28
   4b420:	dfc00615 	stw	ra,24(sp)
   4b424:	df000515 	stw	fp,20(sp)
   4b428:	df000504 	addi	fp,sp,20
   4b42c:	e13ffd15 	stw	r4,-12(fp)
   4b430:	e17ffe15 	stw	r5,-8(fp)
   4b434:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b438:	e0bffd17 	ldw	r2,-12(fp)
   4b43c:	10000716 	blt	r2,zero,4b45c <read+0x40>
   4b440:	e13ffd17 	ldw	r4,-12(fp)
   4b444:	01400304 	movi	r5,12
   4b448:	004a4cc0 	call	4a4cc <__mulsi3>
   4b44c:	00c00174 	movhi	r3,5
   4b450:	18fac604 	addi	r3,r3,-5352
   4b454:	10c5883a 	add	r2,r2,r3
   4b458:	00000106 	br	4b460 <read+0x44>
   4b45c:	0005883a 	mov	r2,zero
   4b460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4b464:	e0bffb17 	ldw	r2,-20(fp)
   4b468:	10002026 	beq	r2,zero,4b4ec <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b46c:	e0bffb17 	ldw	r2,-20(fp)
   4b470:	10800217 	ldw	r2,8(r2)
   4b474:	108000cc 	andi	r2,r2,3
   4b478:	10800060 	cmpeqi	r2,r2,1
   4b47c:	1000171e 	bne	r2,zero,4b4dc <read+0xc0>
        (fd->dev->read))
   4b480:	e0bffb17 	ldw	r2,-20(fp)
   4b484:	10800017 	ldw	r2,0(r2)
   4b488:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b48c:	10001326 	beq	r2,zero,4b4dc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4b490:	e0bffb17 	ldw	r2,-20(fp)
   4b494:	10800017 	ldw	r2,0(r2)
   4b498:	10c00517 	ldw	r3,20(r2)
   4b49c:	e0bfff17 	ldw	r2,-4(fp)
   4b4a0:	e13ffb17 	ldw	r4,-20(fp)
   4b4a4:	e17ffe17 	ldw	r5,-8(fp)
   4b4a8:	100d883a 	mov	r6,r2
   4b4ac:	183ee83a 	callr	r3
   4b4b0:	e0bffc15 	stw	r2,-16(fp)
   4b4b4:	e0bffc17 	ldw	r2,-16(fp)
   4b4b8:	1000060e 	bge	r2,zero,4b4d4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4b4bc:	004b3cc0 	call	4b3cc <alt_get_errno>
   4b4c0:	e0fffc17 	ldw	r3,-16(fp)
   4b4c4:	00c7c83a 	sub	r3,zero,r3
   4b4c8:	10c00015 	stw	r3,0(r2)
          return -1;
   4b4cc:	00bfffc4 	movi	r2,-1
   4b4d0:	00000a06 	br	4b4fc <read+0xe0>
        }
        return rval;
   4b4d4:	e0bffc17 	ldw	r2,-16(fp)
   4b4d8:	00000806 	br	4b4fc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4b4dc:	004b3cc0 	call	4b3cc <alt_get_errno>
   4b4e0:	00c00344 	movi	r3,13
   4b4e4:	10c00015 	stw	r3,0(r2)
   4b4e8:	00000306 	br	4b4f8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4b4ec:	004b3cc0 	call	4b3cc <alt_get_errno>
   4b4f0:	00c01444 	movi	r3,81
   4b4f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4b4f8:	00bfffc4 	movi	r2,-1
}
   4b4fc:	e037883a 	mov	sp,fp
   4b500:	dfc00117 	ldw	ra,4(sp)
   4b504:	df000017 	ldw	fp,0(sp)
   4b508:	dec00204 	addi	sp,sp,8
   4b50c:	f800283a 	ret

0004b510 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4b510:	defffc04 	addi	sp,sp,-16
   4b514:	dfc00315 	stw	ra,12(sp)
   4b518:	df000215 	stw	fp,8(sp)
   4b51c:	dc000115 	stw	r16,4(sp)
   4b520:	df000104 	addi	fp,sp,4
   4b524:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4b528:	e0bfff17 	ldw	r2,-4(fp)
   4b52c:	108000d0 	cmplti	r2,r2,3
   4b530:	1000111e 	bne	r2,zero,4b578 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4b534:	04000174 	movhi	r16,5
   4b538:	843ac604 	addi	r16,r16,-5352
   4b53c:	e0bfff17 	ldw	r2,-4(fp)
   4b540:	1009883a 	mov	r4,r2
   4b544:	01400304 	movi	r5,12
   4b548:	004a4cc0 	call	4a4cc <__mulsi3>
   4b54c:	8085883a 	add	r2,r16,r2
   4b550:	10800204 	addi	r2,r2,8
   4b554:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4b558:	04000174 	movhi	r16,5
   4b55c:	843ac604 	addi	r16,r16,-5352
   4b560:	e0bfff17 	ldw	r2,-4(fp)
   4b564:	1009883a 	mov	r4,r2
   4b568:	01400304 	movi	r5,12
   4b56c:	004a4cc0 	call	4a4cc <__mulsi3>
   4b570:	8085883a 	add	r2,r16,r2
   4b574:	10000015 	stw	zero,0(r2)
  }
}
   4b578:	e037883a 	mov	sp,fp
   4b57c:	dfc00217 	ldw	ra,8(sp)
   4b580:	df000117 	ldw	fp,4(sp)
   4b584:	dc000017 	ldw	r16,0(sp)
   4b588:	dec00304 	addi	sp,sp,12
   4b58c:	f800283a 	ret

0004b590 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4b590:	defff904 	addi	sp,sp,-28
   4b594:	df000615 	stw	fp,24(sp)
   4b598:	df000604 	addi	fp,sp,24
   4b59c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b5a0:	0005303a 	rdctl	r2,status
   4b5a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b5a8:	e0fffc17 	ldw	r3,-16(fp)
   4b5ac:	00bfff84 	movi	r2,-2
   4b5b0:	1884703a 	and	r2,r3,r2
   4b5b4:	1001703a 	wrctl	status,r2
  
  return context;
   4b5b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4b5bc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4b5c0:	d0a00b17 	ldw	r2,-32724(gp)
   4b5c4:	10c000c4 	addi	r3,r2,3
   4b5c8:	00bfff04 	movi	r2,-4
   4b5cc:	1884703a 	and	r2,r3,r2
   4b5d0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4b5d4:	d0e00b17 	ldw	r3,-32724(gp)
   4b5d8:	e0bfff17 	ldw	r2,-4(fp)
   4b5dc:	1885883a 	add	r2,r3,r2
   4b5e0:	00c001b4 	movhi	r3,6
   4b5e4:	18c00004 	addi	r3,r3,0
   4b5e8:	1880062e 	bgeu	r3,r2,4b604 <sbrk+0x74>
   4b5ec:	e0bffa17 	ldw	r2,-24(fp)
   4b5f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b5f4:	e0bffd17 	ldw	r2,-12(fp)
   4b5f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4b5fc:	00bfffc4 	movi	r2,-1
   4b600:	00000b06 	br	4b630 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4b604:	d0a00b17 	ldw	r2,-32724(gp)
   4b608:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4b60c:	d0e00b17 	ldw	r3,-32724(gp)
   4b610:	e0bfff17 	ldw	r2,-4(fp)
   4b614:	1885883a 	add	r2,r3,r2
   4b618:	d0a00b15 	stw	r2,-32724(gp)
   4b61c:	e0bffa17 	ldw	r2,-24(fp)
   4b620:	e0bffe15 	stw	r2,-8(fp)
   4b624:	e0bffe17 	ldw	r2,-8(fp)
   4b628:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4b62c:	e0bffb17 	ldw	r2,-20(fp)
} 
   4b630:	e037883a 	mov	sp,fp
   4b634:	df000017 	ldw	fp,0(sp)
   4b638:	dec00104 	addi	sp,sp,4
   4b63c:	f800283a 	ret

0004b640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b640:	defffe04 	addi	sp,sp,-8
   4b644:	dfc00115 	stw	ra,4(sp)
   4b648:	df000015 	stw	fp,0(sp)
   4b64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b650:	00800174 	movhi	r2,5
   4b654:	10bf5204 	addi	r2,r2,-696
   4b658:	10800017 	ldw	r2,0(r2)
   4b65c:	10000526 	beq	r2,zero,4b674 <alt_get_errno+0x34>
   4b660:	00800174 	movhi	r2,5
   4b664:	10bf5204 	addi	r2,r2,-696
   4b668:	10800017 	ldw	r2,0(r2)
   4b66c:	103ee83a 	callr	r2
   4b670:	00000206 	br	4b67c <alt_get_errno+0x3c>
   4b674:	00800174 	movhi	r2,5
   4b678:	10863b04 	addi	r2,r2,6380
}
   4b67c:	e037883a 	mov	sp,fp
   4b680:	dfc00117 	ldw	ra,4(sp)
   4b684:	df000017 	ldw	fp,0(sp)
   4b688:	dec00204 	addi	sp,sp,8
   4b68c:	f800283a 	ret

0004b690 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4b690:	defff904 	addi	sp,sp,-28
   4b694:	dfc00615 	stw	ra,24(sp)
   4b698:	df000515 	stw	fp,20(sp)
   4b69c:	df000504 	addi	fp,sp,20
   4b6a0:	e13ffd15 	stw	r4,-12(fp)
   4b6a4:	e17ffe15 	stw	r5,-8(fp)
   4b6a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b6ac:	e0bffd17 	ldw	r2,-12(fp)
   4b6b0:	10000716 	blt	r2,zero,4b6d0 <write+0x40>
   4b6b4:	e13ffd17 	ldw	r4,-12(fp)
   4b6b8:	01400304 	movi	r5,12
   4b6bc:	004a4cc0 	call	4a4cc <__mulsi3>
   4b6c0:	00c00174 	movhi	r3,5
   4b6c4:	18fac604 	addi	r3,r3,-5352
   4b6c8:	10c5883a 	add	r2,r2,r3
   4b6cc:	00000106 	br	4b6d4 <write+0x44>
   4b6d0:	0005883a 	mov	r2,zero
   4b6d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4b6d8:	e0bffb17 	ldw	r2,-20(fp)
   4b6dc:	10001f26 	beq	r2,zero,4b75c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4b6e0:	e0bffb17 	ldw	r2,-20(fp)
   4b6e4:	10800217 	ldw	r2,8(r2)
   4b6e8:	108000cc 	andi	r2,r2,3
   4b6ec:	10001726 	beq	r2,zero,4b74c <write+0xbc>
   4b6f0:	e0bffb17 	ldw	r2,-20(fp)
   4b6f4:	10800017 	ldw	r2,0(r2)
   4b6f8:	10800617 	ldw	r2,24(r2)
   4b6fc:	10001326 	beq	r2,zero,4b74c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4b700:	e0bffb17 	ldw	r2,-20(fp)
   4b704:	10800017 	ldw	r2,0(r2)
   4b708:	10c00617 	ldw	r3,24(r2)
   4b70c:	e0bfff17 	ldw	r2,-4(fp)
   4b710:	e13ffb17 	ldw	r4,-20(fp)
   4b714:	e17ffe17 	ldw	r5,-8(fp)
   4b718:	100d883a 	mov	r6,r2
   4b71c:	183ee83a 	callr	r3
   4b720:	e0bffc15 	stw	r2,-16(fp)
   4b724:	e0bffc17 	ldw	r2,-16(fp)
   4b728:	1000060e 	bge	r2,zero,4b744 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4b72c:	004b6400 	call	4b640 <alt_get_errno>
   4b730:	e0fffc17 	ldw	r3,-16(fp)
   4b734:	00c7c83a 	sub	r3,zero,r3
   4b738:	10c00015 	stw	r3,0(r2)
        return -1;
   4b73c:	00bfffc4 	movi	r2,-1
   4b740:	00000a06 	br	4b76c <write+0xdc>
      }
      return rval;
   4b744:	e0bffc17 	ldw	r2,-16(fp)
   4b748:	00000806 	br	4b76c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4b74c:	004b6400 	call	4b640 <alt_get_errno>
   4b750:	00c00344 	movi	r3,13
   4b754:	10c00015 	stw	r3,0(r2)
   4b758:	00000306 	br	4b768 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4b75c:	004b6400 	call	4b640 <alt_get_errno>
   4b760:	00c01444 	movi	r3,81
   4b764:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4b768:	00bfffc4 	movi	r2,-1
}
   4b76c:	e037883a 	mov	sp,fp
   4b770:	dfc00117 	ldw	ra,4(sp)
   4b774:	df000017 	ldw	fp,0(sp)
   4b778:	dec00204 	addi	sp,sp,8
   4b77c:	f800283a 	ret

0004b780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4b780:	defffd04 	addi	sp,sp,-12
   4b784:	dfc00215 	stw	ra,8(sp)
   4b788:	df000115 	stw	fp,4(sp)
   4b78c:	df000104 	addi	fp,sp,4
   4b790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4b794:	e13fff17 	ldw	r4,-4(fp)
   4b798:	01400174 	movhi	r5,5
   4b79c:	297f4f04 	addi	r5,r5,-708
   4b7a0:	004d0840 	call	4d084 <alt_dev_llist_insert>
}
   4b7a4:	e037883a 	mov	sp,fp
   4b7a8:	dfc00117 	ldw	ra,4(sp)
   4b7ac:	df000017 	ldw	fp,0(sp)
   4b7b0:	dec00204 	addi	sp,sp,8
   4b7b4:	f800283a 	ret

0004b7b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4b7b8:	defffd04 	addi	sp,sp,-12
   4b7bc:	dfc00215 	stw	ra,8(sp)
   4b7c0:	df000115 	stw	fp,4(sp)
   4b7c4:	df000104 	addi	fp,sp,4
   4b7c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1F, cpu_1f);
   4b7cc:	004dab00 	call	4dab0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4b7d0:	00800044 	movi	r2,1
   4b7d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4b7d8:	e037883a 	mov	sp,fp
   4b7dc:	dfc00117 	ldw	ra,4(sp)
   4b7e0:	df000017 	ldw	fp,0(sp)
   4b7e4:	dec00204 	addi	sp,sp,8
   4b7e8:	f800283a 	ret

0004b7ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4b7ec:	defffe04 	addi	sp,sp,-8
   4b7f0:	dfc00115 	stw	ra,4(sp)
   4b7f4:	df000015 	stw	fp,0(sp)
   4b7f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1F, timer_1f);
   4b7fc:	010000b4 	movhi	r4,2
   4b800:	21040004 	addi	r4,r4,4096
   4b804:	000b883a 	mov	r5,zero
   4b808:	01800044 	movi	r6,1
   4b80c:	01c0fa04 	movi	r7,1000
   4b810:	004c8280 	call	4c828 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   4b814:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_6, fifo_q_6);
   4b818:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1F, jtag_uart_1f);
   4b81c:	01000174 	movhi	r4,5
   4b820:	213b3004 	addi	r4,r4,-4928
   4b824:	000b883a 	mov	r5,zero
   4b828:	01800404 	movi	r6,16
   4b82c:	004beb40 	call	4beb4 <altera_avalon_jtag_uart_init>
   4b830:	01000174 	movhi	r4,5
   4b834:	213b2604 	addi	r4,r4,-4968
   4b838:	004b7800 	call	4b780 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1F, sysid_1f);
   4b83c:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   4b840:	01000174 	movhi	r4,5
   4b844:	213f3e04 	addi	r4,r4,-776
   4b848:	004d3800 	call	4d380 <alt_fs_reg>
}
   4b84c:	e037883a 	mov	sp,fp
   4b850:	dfc00117 	ldw	ra,4(sp)
   4b854:	df000017 	ldw	fp,0(sp)
   4b858:	dec00204 	addi	sp,sp,8
   4b85c:	f800283a 	ret

0004b860 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4b860:	defffa04 	addi	sp,sp,-24
   4b864:	dfc00515 	stw	ra,20(sp)
   4b868:	df000415 	stw	fp,16(sp)
   4b86c:	df000404 	addi	fp,sp,16
   4b870:	e13ffc15 	stw	r4,-16(fp)
   4b874:	e17ffd15 	stw	r5,-12(fp)
   4b878:	e1bffe15 	stw	r6,-8(fp)
   4b87c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4b880:	e13ffc17 	ldw	r4,-16(fp)
   4b884:	01400fc4 	movi	r5,63
   4b888:	004ba2c0 	call	4ba2c <altera_avalon_fifo_clear_event>
   4b88c:	10000226 	beq	r2,zero,4b898 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4b890:	00bfffc4 	movi	r2,-1
   4b894:	00001306 	br	4b8e4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4b898:	e13ffc17 	ldw	r4,-16(fp)
   4b89c:	e17ffd17 	ldw	r5,-12(fp)
   4b8a0:	004ba880 	call	4ba88 <altera_avalon_fifo_write_ienable>
   4b8a4:	10000226 	beq	r2,zero,4b8b0 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4b8a8:	00bfff84 	movi	r2,-2
   4b8ac:	00000d06 	br	4b8e4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4b8b0:	e13ffc17 	ldw	r4,-16(fp)
   4b8b4:	e17fff17 	ldw	r5,-4(fp)
   4b8b8:	004bae00 	call	4bae0 <altera_avalon_fifo_write_almostfull>
   4b8bc:	10000226 	beq	r2,zero,4b8c8 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4b8c0:	00bfff44 	movi	r2,-3
   4b8c4:	00000706 	br	4b8e4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4b8c8:	e13ffc17 	ldw	r4,-16(fp)
   4b8cc:	e17ffe17 	ldw	r5,-8(fp)
   4b8d0:	004bb380 	call	4bb38 <altera_avalon_fifo_write_almostempty>
   4b8d4:	10000226 	beq	r2,zero,4b8e0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4b8d8:	00bfff44 	movi	r2,-3
   4b8dc:	00000106 	br	4b8e4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4b8e0:	0005883a 	mov	r2,zero
}
   4b8e4:	e037883a 	mov	sp,fp
   4b8e8:	dfc00117 	ldw	ra,4(sp)
   4b8ec:	df000017 	ldw	fp,0(sp)
   4b8f0:	dec00204 	addi	sp,sp,8
   4b8f4:	f800283a 	ret

0004b8f8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4b8f8:	defffd04 	addi	sp,sp,-12
   4b8fc:	df000215 	stw	fp,8(sp)
   4b900:	df000204 	addi	fp,sp,8
   4b904:	e13ffe15 	stw	r4,-8(fp)
   4b908:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4b90c:	e0bffe17 	ldw	r2,-8(fp)
   4b910:	10800104 	addi	r2,r2,4
   4b914:	10800037 	ldwio	r2,0(r2)
   4b918:	1007883a 	mov	r3,r2
   4b91c:	e0bfff17 	ldw	r2,-4(fp)
   4b920:	1884703a 	and	r2,r3,r2
}
   4b924:	e037883a 	mov	sp,fp
   4b928:	df000017 	ldw	fp,0(sp)
   4b92c:	dec00104 	addi	sp,sp,4
   4b930:	f800283a 	ret

0004b934 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4b934:	defffd04 	addi	sp,sp,-12
   4b938:	df000215 	stw	fp,8(sp)
   4b93c:	df000204 	addi	fp,sp,8
   4b940:	e13ffe15 	stw	r4,-8(fp)
   4b944:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4b948:	e0bffe17 	ldw	r2,-8(fp)
   4b94c:	10800304 	addi	r2,r2,12
   4b950:	10800037 	ldwio	r2,0(r2)
   4b954:	1007883a 	mov	r3,r2
   4b958:	e0bfff17 	ldw	r2,-4(fp)
   4b95c:	1884703a 	and	r2,r3,r2
}
   4b960:	e037883a 	mov	sp,fp
   4b964:	df000017 	ldw	fp,0(sp)
   4b968:	dec00104 	addi	sp,sp,4
   4b96c:	f800283a 	ret

0004b970 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4b970:	defffe04 	addi	sp,sp,-8
   4b974:	df000115 	stw	fp,4(sp)
   4b978:	df000104 	addi	fp,sp,4
   4b97c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4b980:	e0bfff17 	ldw	r2,-4(fp)
   4b984:	10800404 	addi	r2,r2,16
   4b988:	10800037 	ldwio	r2,0(r2)
}
   4b98c:	e037883a 	mov	sp,fp
   4b990:	df000017 	ldw	fp,0(sp)
   4b994:	dec00104 	addi	sp,sp,4
   4b998:	f800283a 	ret

0004b99c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4b99c:	defffe04 	addi	sp,sp,-8
   4b9a0:	df000115 	stw	fp,4(sp)
   4b9a4:	df000104 	addi	fp,sp,4
   4b9a8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4b9ac:	e0bfff17 	ldw	r2,-4(fp)
   4b9b0:	10800504 	addi	r2,r2,20
   4b9b4:	10800037 	ldwio	r2,0(r2)
}
   4b9b8:	e037883a 	mov	sp,fp
   4b9bc:	df000017 	ldw	fp,0(sp)
   4b9c0:	dec00104 	addi	sp,sp,4
   4b9c4:	f800283a 	ret

0004b9c8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4b9c8:	defffd04 	addi	sp,sp,-12
   4b9cc:	df000215 	stw	fp,8(sp)
   4b9d0:	df000204 	addi	fp,sp,8
   4b9d4:	e13ffe15 	stw	r4,-8(fp)
   4b9d8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4b9dc:	e0bffe17 	ldw	r2,-8(fp)
   4b9e0:	10800204 	addi	r2,r2,8
   4b9e4:	10800037 	ldwio	r2,0(r2)
   4b9e8:	1007883a 	mov	r3,r2
   4b9ec:	e0bfff17 	ldw	r2,-4(fp)
   4b9f0:	1884703a 	and	r2,r3,r2
}
   4b9f4:	e037883a 	mov	sp,fp
   4b9f8:	df000017 	ldw	fp,0(sp)
   4b9fc:	dec00104 	addi	sp,sp,4
   4ba00:	f800283a 	ret

0004ba04 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4ba04:	defffe04 	addi	sp,sp,-8
   4ba08:	df000115 	stw	fp,4(sp)
   4ba0c:	df000104 	addi	fp,sp,4
   4ba10:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4ba14:	e0bfff17 	ldw	r2,-4(fp)
   4ba18:	10800037 	ldwio	r2,0(r2)
}
   4ba1c:	e037883a 	mov	sp,fp
   4ba20:	df000017 	ldw	fp,0(sp)
   4ba24:	dec00104 	addi	sp,sp,4
   4ba28:	f800283a 	ret

0004ba2c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4ba2c:	defffd04 	addi	sp,sp,-12
   4ba30:	df000215 	stw	fp,8(sp)
   4ba34:	df000204 	addi	fp,sp,8
   4ba38:	e13ffe15 	stw	r4,-8(fp)
   4ba3c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4ba40:	e0bffe17 	ldw	r2,-8(fp)
   4ba44:	10800204 	addi	r2,r2,8
   4ba48:	e0ffff17 	ldw	r3,-4(fp)
   4ba4c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4ba50:	e0bffe17 	ldw	r2,-8(fp)
   4ba54:	10800204 	addi	r2,r2,8
   4ba58:	10800037 	ldwio	r2,0(r2)
   4ba5c:	1007883a 	mov	r3,r2
   4ba60:	e0bfff17 	ldw	r2,-4(fp)
   4ba64:	1884703a 	and	r2,r3,r2
   4ba68:	1000021e 	bne	r2,zero,4ba74 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4ba6c:	0005883a 	mov	r2,zero
   4ba70:	00000106 	br	4ba78 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4ba74:	00bfffc4 	movi	r2,-1
}
   4ba78:	e037883a 	mov	sp,fp
   4ba7c:	df000017 	ldw	fp,0(sp)
   4ba80:	dec00104 	addi	sp,sp,4
   4ba84:	f800283a 	ret

0004ba88 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4ba88:	defffd04 	addi	sp,sp,-12
   4ba8c:	df000215 	stw	fp,8(sp)
   4ba90:	df000204 	addi	fp,sp,8
   4ba94:	e13ffe15 	stw	r4,-8(fp)
   4ba98:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4ba9c:	e0bffe17 	ldw	r2,-8(fp)
   4baa0:	10800304 	addi	r2,r2,12
   4baa4:	e0ffff17 	ldw	r3,-4(fp)
   4baa8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4baac:	e0bffe17 	ldw	r2,-8(fp)
   4bab0:	10800304 	addi	r2,r2,12
   4bab4:	10800037 	ldwio	r2,0(r2)
   4bab8:	1007883a 	mov	r3,r2
   4babc:	e0bfff17 	ldw	r2,-4(fp)
   4bac0:	1880021e 	bne	r3,r2,4bacc <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4bac4:	0005883a 	mov	r2,zero
   4bac8:	00000106 	br	4bad0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4bacc:	00bfff84 	movi	r2,-2
}
   4bad0:	e037883a 	mov	sp,fp
   4bad4:	df000017 	ldw	fp,0(sp)
   4bad8:	dec00104 	addi	sp,sp,4
   4badc:	f800283a 	ret

0004bae0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4bae0:	defffd04 	addi	sp,sp,-12
   4bae4:	df000215 	stw	fp,8(sp)
   4bae8:	df000204 	addi	fp,sp,8
   4baec:	e13ffe15 	stw	r4,-8(fp)
   4baf0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4baf4:	e0bffe17 	ldw	r2,-8(fp)
   4baf8:	10800404 	addi	r2,r2,16
   4bafc:	e0ffff17 	ldw	r3,-4(fp)
   4bb00:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4bb04:	e0bffe17 	ldw	r2,-8(fp)
   4bb08:	10800404 	addi	r2,r2,16
   4bb0c:	10800037 	ldwio	r2,0(r2)
   4bb10:	1007883a 	mov	r3,r2
   4bb14:	e0bfff17 	ldw	r2,-4(fp)
   4bb18:	1880021e 	bne	r3,r2,4bb24 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4bb1c:	0005883a 	mov	r2,zero
   4bb20:	00000106 	br	4bb28 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bb24:	00bfff44 	movi	r2,-3
}
   4bb28:	e037883a 	mov	sp,fp
   4bb2c:	df000017 	ldw	fp,0(sp)
   4bb30:	dec00104 	addi	sp,sp,4
   4bb34:	f800283a 	ret

0004bb38 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4bb38:	defffd04 	addi	sp,sp,-12
   4bb3c:	df000215 	stw	fp,8(sp)
   4bb40:	df000204 	addi	fp,sp,8
   4bb44:	e13ffe15 	stw	r4,-8(fp)
   4bb48:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4bb4c:	e0bffe17 	ldw	r2,-8(fp)
   4bb50:	10800504 	addi	r2,r2,20
   4bb54:	e0ffff17 	ldw	r3,-4(fp)
   4bb58:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4bb5c:	e0bffe17 	ldw	r2,-8(fp)
   4bb60:	10800504 	addi	r2,r2,20
   4bb64:	10800037 	ldwio	r2,0(r2)
   4bb68:	1007883a 	mov	r3,r2
   4bb6c:	e0bfff17 	ldw	r2,-4(fp)
   4bb70:	1880021e 	bne	r3,r2,4bb7c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4bb74:	0005883a 	mov	r2,zero
   4bb78:	00000106 	br	4bb80 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bb7c:	00bfff44 	movi	r2,-3
}
   4bb80:	e037883a 	mov	sp,fp
   4bb84:	df000017 	ldw	fp,0(sp)
   4bb88:	dec00104 	addi	sp,sp,4
   4bb8c:	f800283a 	ret

0004bb90 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4bb90:	defffb04 	addi	sp,sp,-20
   4bb94:	dfc00415 	stw	ra,16(sp)
   4bb98:	df000315 	stw	fp,12(sp)
   4bb9c:	df000304 	addi	fp,sp,12
   4bba0:	e13ffd15 	stw	r4,-12(fp)
   4bba4:	e17ffe15 	stw	r5,-8(fp)
   4bba8:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4bbac:	e13ffe17 	ldw	r4,-8(fp)
   4bbb0:	01400044 	movi	r5,1
   4bbb4:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   4bbb8:	1000051e 	bne	r2,zero,4bbd0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4bbbc:	e0bffd17 	ldw	r2,-12(fp)
   4bbc0:	e0ffff17 	ldw	r3,-4(fp)
   4bbc4:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4bbc8:	0005883a 	mov	r2,zero
   4bbcc:	00000106 	br	4bbd4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4bbd0:	00bfff04 	movi	r2,-4
    }
}
   4bbd4:	e037883a 	mov	sp,fp
   4bbd8:	dfc00117 	ldw	ra,4(sp)
   4bbdc:	df000017 	ldw	fp,0(sp)
   4bbe0:	dec00204 	addi	sp,sp,8
   4bbe4:	f800283a 	ret

0004bbe8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4bbe8:	defffa04 	addi	sp,sp,-24
   4bbec:	dfc00515 	stw	ra,20(sp)
   4bbf0:	df000415 	stw	fp,16(sp)
   4bbf4:	df000404 	addi	fp,sp,16
   4bbf8:	e13ffd15 	stw	r4,-12(fp)
   4bbfc:	e17ffe15 	stw	r5,-8(fp)
   4bc00:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4bc04:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4bc08:	e0bfff17 	ldw	r2,-4(fp)
   4bc0c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4bc10:	e13ffe17 	ldw	r4,-8(fp)
   4bc14:	01400084 	movi	r5,2
   4bc18:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   4bc1c:	1000071e 	bne	r2,zero,4bc3c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4bc20:	e13ffe17 	ldw	r4,-8(fp)
   4bc24:	004ba040 	call	4ba04 <altera_avalon_fifo_read_level>
   4bc28:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4bc2c:	e0bffd17 	ldw	r2,-12(fp)
   4bc30:	10c00037 	ldwio	r3,0(r2)
   4bc34:	e0bfff17 	ldw	r2,-4(fp)
   4bc38:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4bc3c:	e0bffc17 	ldw	r2,-16(fp)
}
   4bc40:	e037883a 	mov	sp,fp
   4bc44:	dfc00117 	ldw	ra,4(sp)
   4bc48:	df000017 	ldw	fp,0(sp)
   4bc4c:	dec00204 	addi	sp,sp,8
   4bc50:	f800283a 	ret

0004bc54 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4bc54:	defffc04 	addi	sp,sp,-16
   4bc58:	dfc00315 	stw	ra,12(sp)
   4bc5c:	df000215 	stw	fp,8(sp)
   4bc60:	df000204 	addi	fp,sp,8
   4bc64:	e13ffe15 	stw	r4,-8(fp)
   4bc68:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4bc6c:	e13fff17 	ldw	r4,-4(fp)
   4bc70:	01400084 	movi	r5,2
   4bc74:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   4bc78:	1000031e 	bne	r2,zero,4bc88 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4bc7c:	e0bffe17 	ldw	r2,-8(fp)
   4bc80:	10800037 	ldwio	r2,0(r2)
   4bc84:	00000106 	br	4bc8c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4bc88:	0005883a 	mov	r2,zero
}
   4bc8c:	e037883a 	mov	sp,fp
   4bc90:	dfc00117 	ldw	ra,4(sp)
   4bc94:	df000017 	ldw	fp,0(sp)
   4bc98:	dec00204 	addi	sp,sp,8
   4bc9c:	f800283a 	ret

0004bca0 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4bca0:	defffb04 	addi	sp,sp,-20
   4bca4:	dfc00415 	stw	ra,16(sp)
   4bca8:	df000315 	stw	fp,12(sp)
   4bcac:	df000304 	addi	fp,sp,12
   4bcb0:	e13ffd15 	stw	r4,-12(fp)
   4bcb4:	e17ffe15 	stw	r5,-8(fp)
   4bcb8:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4bcbc:	e13ffe17 	ldw	r4,-8(fp)
   4bcc0:	01400044 	movi	r5,1
   4bcc4:	004b8f80 	call	4b8f8 <altera_avalon_fifo_read_status>
   4bcc8:	1000061e 	bne	r2,zero,4bce4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4bccc:	e0bffd17 	ldw	r2,-12(fp)
   4bcd0:	10800104 	addi	r2,r2,4
   4bcd4:	e0ffff17 	ldw	r3,-4(fp)
   4bcd8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4bcdc:	0005883a 	mov	r2,zero
   4bce0:	00000106 	br	4bce8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4bce4:	00bfff04 	movi	r2,-4
    }
}
   4bce8:	e037883a 	mov	sp,fp
   4bcec:	dfc00117 	ldw	ra,4(sp)
   4bcf0:	df000017 	ldw	fp,0(sp)
   4bcf4:	dec00204 	addi	sp,sp,8
   4bcf8:	f800283a 	ret

0004bcfc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4bcfc:	defffe04 	addi	sp,sp,-8
   4bd00:	df000115 	stw	fp,4(sp)
   4bd04:	df000104 	addi	fp,sp,4
   4bd08:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4bd0c:	e0bfff17 	ldw	r2,-4(fp)
   4bd10:	10800104 	addi	r2,r2,4
   4bd14:	10800037 	ldwio	r2,0(r2)
}
   4bd18:	e037883a 	mov	sp,fp
   4bd1c:	df000017 	ldw	fp,0(sp)
   4bd20:	dec00104 	addi	sp,sp,4
   4bd24:	f800283a 	ret

0004bd28 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4bd28:	defffe04 	addi	sp,sp,-8
   4bd2c:	df000115 	stw	fp,4(sp)
   4bd30:	df000104 	addi	fp,sp,4
   4bd34:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4bd38:	e0bfff17 	ldw	r2,-4(fp)
   4bd3c:	10800037 	ldwio	r2,0(r2)
}
   4bd40:	e037883a 	mov	sp,fp
   4bd44:	df000017 	ldw	fp,0(sp)
   4bd48:	dec00104 	addi	sp,sp,4
   4bd4c:	f800283a 	ret

0004bd50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4bd50:	defffa04 	addi	sp,sp,-24
   4bd54:	dfc00515 	stw	ra,20(sp)
   4bd58:	df000415 	stw	fp,16(sp)
   4bd5c:	df000404 	addi	fp,sp,16
   4bd60:	e13ffd15 	stw	r4,-12(fp)
   4bd64:	e17ffe15 	stw	r5,-8(fp)
   4bd68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4bd6c:	e0bffd17 	ldw	r2,-12(fp)
   4bd70:	10800017 	ldw	r2,0(r2)
   4bd74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4bd78:	e0bffc17 	ldw	r2,-16(fp)
   4bd7c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4bd80:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4bd84:	10800217 	ldw	r2,8(r2)
   4bd88:	1809883a 	mov	r4,r3
   4bd8c:	e17ffe17 	ldw	r5,-8(fp)
   4bd90:	e1bfff17 	ldw	r6,-4(fp)
   4bd94:	100f883a 	mov	r7,r2
   4bd98:	004c3780 	call	4c378 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4bd9c:	e037883a 	mov	sp,fp
   4bda0:	dfc00117 	ldw	ra,4(sp)
   4bda4:	df000017 	ldw	fp,0(sp)
   4bda8:	dec00204 	addi	sp,sp,8
   4bdac:	f800283a 	ret

0004bdb0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4bdb0:	defffa04 	addi	sp,sp,-24
   4bdb4:	dfc00515 	stw	ra,20(sp)
   4bdb8:	df000415 	stw	fp,16(sp)
   4bdbc:	df000404 	addi	fp,sp,16
   4bdc0:	e13ffd15 	stw	r4,-12(fp)
   4bdc4:	e17ffe15 	stw	r5,-8(fp)
   4bdc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4bdcc:	e0bffd17 	ldw	r2,-12(fp)
   4bdd0:	10800017 	ldw	r2,0(r2)
   4bdd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4bdd8:	e0bffc17 	ldw	r2,-16(fp)
   4bddc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4bde0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4bde4:	10800217 	ldw	r2,8(r2)
   4bde8:	1809883a 	mov	r4,r3
   4bdec:	e17ffe17 	ldw	r5,-8(fp)
   4bdf0:	e1bfff17 	ldw	r6,-4(fp)
   4bdf4:	100f883a 	mov	r7,r2
   4bdf8:	004c5900 	call	4c590 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4bdfc:	e037883a 	mov	sp,fp
   4be00:	dfc00117 	ldw	ra,4(sp)
   4be04:	df000017 	ldw	fp,0(sp)
   4be08:	dec00204 	addi	sp,sp,8
   4be0c:	f800283a 	ret

0004be10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4be10:	defffc04 	addi	sp,sp,-16
   4be14:	dfc00315 	stw	ra,12(sp)
   4be18:	df000215 	stw	fp,8(sp)
   4be1c:	df000204 	addi	fp,sp,8
   4be20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4be24:	e0bfff17 	ldw	r2,-4(fp)
   4be28:	10800017 	ldw	r2,0(r2)
   4be2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4be30:	e0bffe17 	ldw	r2,-8(fp)
   4be34:	10c00a04 	addi	r3,r2,40
   4be38:	e0bfff17 	ldw	r2,-4(fp)
   4be3c:	10800217 	ldw	r2,8(r2)
   4be40:	1809883a 	mov	r4,r3
   4be44:	100b883a 	mov	r5,r2
   4be48:	004c21c0 	call	4c21c <altera_avalon_jtag_uart_close>
}
   4be4c:	e037883a 	mov	sp,fp
   4be50:	dfc00117 	ldw	ra,4(sp)
   4be54:	df000017 	ldw	fp,0(sp)
   4be58:	dec00204 	addi	sp,sp,8
   4be5c:	f800283a 	ret

0004be60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4be60:	defffa04 	addi	sp,sp,-24
   4be64:	dfc00515 	stw	ra,20(sp)
   4be68:	df000415 	stw	fp,16(sp)
   4be6c:	df000404 	addi	fp,sp,16
   4be70:	e13ffd15 	stw	r4,-12(fp)
   4be74:	e17ffe15 	stw	r5,-8(fp)
   4be78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4be7c:	e0bffd17 	ldw	r2,-12(fp)
   4be80:	10800017 	ldw	r2,0(r2)
   4be84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4be88:	e0bffc17 	ldw	r2,-16(fp)
   4be8c:	10800a04 	addi	r2,r2,40
   4be90:	1009883a 	mov	r4,r2
   4be94:	e17ffe17 	ldw	r5,-8(fp)
   4be98:	e1bfff17 	ldw	r6,-4(fp)
   4be9c:	004c2840 	call	4c284 <altera_avalon_jtag_uart_ioctl>
}
   4bea0:	e037883a 	mov	sp,fp
   4bea4:	dfc00117 	ldw	ra,4(sp)
   4bea8:	df000017 	ldw	fp,0(sp)
   4beac:	dec00204 	addi	sp,sp,8
   4beb0:	f800283a 	ret

0004beb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4beb4:	defffa04 	addi	sp,sp,-24
   4beb8:	dfc00515 	stw	ra,20(sp)
   4bebc:	df000415 	stw	fp,16(sp)
   4bec0:	df000404 	addi	fp,sp,16
   4bec4:	e13ffd15 	stw	r4,-12(fp)
   4bec8:	e17ffe15 	stw	r5,-8(fp)
   4becc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4bed0:	e0bffd17 	ldw	r2,-12(fp)
   4bed4:	00c00044 	movi	r3,1
   4bed8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4bedc:	e0bffd17 	ldw	r2,-12(fp)
   4bee0:	10800017 	ldw	r2,0(r2)
   4bee4:	10800104 	addi	r2,r2,4
   4bee8:	e0fffd17 	ldw	r3,-12(fp)
   4beec:	18c00817 	ldw	r3,32(r3)
   4bef0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4bef4:	e0fffe17 	ldw	r3,-8(fp)
   4bef8:	e0bfff17 	ldw	r2,-4(fp)
   4befc:	d8000015 	stw	zero,0(sp)
   4bf00:	1809883a 	mov	r4,r3
   4bf04:	100b883a 	mov	r5,r2
   4bf08:	01800174 	movhi	r6,5
   4bf0c:	31afdd04 	addi	r6,r6,-16524
   4bf10:	e1fffd17 	ldw	r7,-12(fp)
   4bf14:	004d4f40 	call	4d4f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4bf18:	e0bffd17 	ldw	r2,-12(fp)
   4bf1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4bf20:	e0bffd17 	ldw	r2,-12(fp)
   4bf24:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4bf28:	00800174 	movhi	r2,5
   4bf2c:	10864604 	addi	r2,r2,6424
   4bf30:	10800017 	ldw	r2,0(r2)
   4bf34:	1809883a 	mov	r4,r3
   4bf38:	100b883a 	mov	r5,r2
   4bf3c:	01800174 	movhi	r6,5
   4bf40:	31b05e04 	addi	r6,r6,-16008
   4bf44:	e1fffd17 	ldw	r7,-12(fp)
   4bf48:	004ced80 	call	4ced8 <alt_alarm_start>
   4bf4c:	1000040e 	bge	r2,zero,4bf60 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4bf50:	e0bffd17 	ldw	r2,-12(fp)
   4bf54:	00e00034 	movhi	r3,32768
   4bf58:	18ffffc4 	addi	r3,r3,-1
   4bf5c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4bf60:	e037883a 	mov	sp,fp
   4bf64:	dfc00117 	ldw	ra,4(sp)
   4bf68:	df000017 	ldw	fp,0(sp)
   4bf6c:	dec00204 	addi	sp,sp,8
   4bf70:	f800283a 	ret

0004bf74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4bf74:	defff804 	addi	sp,sp,-32
   4bf78:	df000715 	stw	fp,28(sp)
   4bf7c:	df000704 	addi	fp,sp,28
   4bf80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4bf84:	e0bfff17 	ldw	r2,-4(fp)
   4bf88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4bf8c:	e0bffb17 	ldw	r2,-20(fp)
   4bf90:	10800017 	ldw	r2,0(r2)
   4bf94:	e0bffc15 	stw	r2,-16(fp)
   4bf98:	00000106 	br	4bfa0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4bf9c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4bfa0:	e0bffc17 	ldw	r2,-16(fp)
   4bfa4:	10800104 	addi	r2,r2,4
   4bfa8:	10800037 	ldwio	r2,0(r2)
   4bfac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4bfb0:	e0bffd17 	ldw	r2,-12(fp)
   4bfb4:	1080c00c 	andi	r2,r2,768
   4bfb8:	10006a26 	beq	r2,zero,4c164 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4bfbc:	e0bffd17 	ldw	r2,-12(fp)
   4bfc0:	1080400c 	andi	r2,r2,256
   4bfc4:	10003326 	beq	r2,zero,4c094 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4bfc8:	00800074 	movhi	r2,1
   4bfcc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4bfd0:	e0bffb17 	ldw	r2,-20(fp)
   4bfd4:	10800a17 	ldw	r2,40(r2)
   4bfd8:	10800044 	addi	r2,r2,1
   4bfdc:	1081ffcc 	andi	r2,r2,2047
   4bfe0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4bfe4:	e0bffb17 	ldw	r2,-20(fp)
   4bfe8:	10c00b17 	ldw	r3,44(r2)
   4bfec:	e0bffe17 	ldw	r2,-8(fp)
   4bff0:	18801426 	beq	r3,r2,4c044 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4bff4:	e0bffc17 	ldw	r2,-16(fp)
   4bff8:	10800037 	ldwio	r2,0(r2)
   4bffc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4c000:	e0bff917 	ldw	r2,-28(fp)
   4c004:	10a0000c 	andi	r2,r2,32768
   4c008:	10001026 	beq	r2,zero,4c04c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c00c:	e0bffb17 	ldw	r2,-20(fp)
   4c010:	10800a17 	ldw	r2,40(r2)
   4c014:	e0fff917 	ldw	r3,-28(fp)
   4c018:	e13ffb17 	ldw	r4,-20(fp)
   4c01c:	2085883a 	add	r2,r4,r2
   4c020:	10800e04 	addi	r2,r2,56
   4c024:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c028:	e0bffb17 	ldw	r2,-20(fp)
   4c02c:	10800a17 	ldw	r2,40(r2)
   4c030:	10800044 	addi	r2,r2,1
   4c034:	10c1ffcc 	andi	r3,r2,2047
   4c038:	e0bffb17 	ldw	r2,-20(fp)
   4c03c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4c040:	003fe306 	br	4bfd0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4c044:	0001883a 	nop
   4c048:	00000106 	br	4c050 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4c04c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4c050:	e0bff917 	ldw	r2,-28(fp)
   4c054:	10bfffec 	andhi	r2,r2,65535
   4c058:	10000e26 	beq	r2,zero,4c094 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c05c:	e0bffb17 	ldw	r2,-20(fp)
   4c060:	10c00817 	ldw	r3,32(r2)
   4c064:	00bfff84 	movi	r2,-2
   4c068:	1886703a 	and	r3,r3,r2
   4c06c:	e0bffb17 	ldw	r2,-20(fp)
   4c070:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4c074:	e0bffc17 	ldw	r2,-16(fp)
   4c078:	10800104 	addi	r2,r2,4
   4c07c:	e0fffb17 	ldw	r3,-20(fp)
   4c080:	18c00817 	ldw	r3,32(r3)
   4c084:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c088:	e0bffc17 	ldw	r2,-16(fp)
   4c08c:	10800104 	addi	r2,r2,4
   4c090:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4c094:	e0bffd17 	ldw	r2,-12(fp)
   4c098:	1080800c 	andi	r2,r2,512
   4c09c:	103fbf26 	beq	r2,zero,4bf9c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4c0a0:	e0bffd17 	ldw	r2,-12(fp)
   4c0a4:	1004d43a 	srli	r2,r2,16
   4c0a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c0ac:	00001406 	br	4c100 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4c0b0:	e0bffc17 	ldw	r2,-16(fp)
   4c0b4:	e0fffb17 	ldw	r3,-20(fp)
   4c0b8:	18c00d17 	ldw	r3,52(r3)
   4c0bc:	e13ffb17 	ldw	r4,-20(fp)
   4c0c0:	20c7883a 	add	r3,r4,r3
   4c0c4:	18c20e04 	addi	r3,r3,2104
   4c0c8:	18c00003 	ldbu	r3,0(r3)
   4c0cc:	18c03fcc 	andi	r3,r3,255
   4c0d0:	18c0201c 	xori	r3,r3,128
   4c0d4:	18ffe004 	addi	r3,r3,-128
   4c0d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c0dc:	e0bffb17 	ldw	r2,-20(fp)
   4c0e0:	10800d17 	ldw	r2,52(r2)
   4c0e4:	10800044 	addi	r2,r2,1
   4c0e8:	10c1ffcc 	andi	r3,r2,2047
   4c0ec:	e0bffb17 	ldw	r2,-20(fp)
   4c0f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4c0f4:	e0bffa17 	ldw	r2,-24(fp)
   4c0f8:	10bfffc4 	addi	r2,r2,-1
   4c0fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c100:	e0bffa17 	ldw	r2,-24(fp)
   4c104:	10000526 	beq	r2,zero,4c11c <altera_avalon_jtag_uart_irq+0x1a8>
   4c108:	e0bffb17 	ldw	r2,-20(fp)
   4c10c:	10c00d17 	ldw	r3,52(r2)
   4c110:	e0bffb17 	ldw	r2,-20(fp)
   4c114:	10800c17 	ldw	r2,48(r2)
   4c118:	18bfe51e 	bne	r3,r2,4c0b0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4c11c:	e0bffa17 	ldw	r2,-24(fp)
   4c120:	103f9e26 	beq	r2,zero,4bf9c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c124:	e0bffb17 	ldw	r2,-20(fp)
   4c128:	10c00817 	ldw	r3,32(r2)
   4c12c:	00bfff44 	movi	r2,-3
   4c130:	1886703a 	and	r3,r3,r2
   4c134:	e0bffb17 	ldw	r2,-20(fp)
   4c138:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c13c:	e0bffb17 	ldw	r2,-20(fp)
   4c140:	10800017 	ldw	r2,0(r2)
   4c144:	10800104 	addi	r2,r2,4
   4c148:	e0fffb17 	ldw	r3,-20(fp)
   4c14c:	18c00817 	ldw	r3,32(r3)
   4c150:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c154:	e0bffc17 	ldw	r2,-16(fp)
   4c158:	10800104 	addi	r2,r2,4
   4c15c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4c160:	003f8e06 	br	4bf9c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4c164:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4c168:	e037883a 	mov	sp,fp
   4c16c:	df000017 	ldw	fp,0(sp)
   4c170:	dec00104 	addi	sp,sp,4
   4c174:	f800283a 	ret

0004c178 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4c178:	defffc04 	addi	sp,sp,-16
   4c17c:	df000315 	stw	fp,12(sp)
   4c180:	df000304 	addi	fp,sp,12
   4c184:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4c188:	e0bfff17 	ldw	r2,-4(fp)
   4c18c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4c190:	e0bffd17 	ldw	r2,-12(fp)
   4c194:	10800017 	ldw	r2,0(r2)
   4c198:	10800104 	addi	r2,r2,4
   4c19c:	10800037 	ldwio	r2,0(r2)
   4c1a0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4c1a4:	e0bffe17 	ldw	r2,-8(fp)
   4c1a8:	1081000c 	andi	r2,r2,1024
   4c1ac:	10000a26 	beq	r2,zero,4c1d8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4c1b0:	e0bffd17 	ldw	r2,-12(fp)
   4c1b4:	10800017 	ldw	r2,0(r2)
   4c1b8:	10800104 	addi	r2,r2,4
   4c1bc:	e0fffd17 	ldw	r3,-12(fp)
   4c1c0:	18c00817 	ldw	r3,32(r3)
   4c1c4:	18c10014 	ori	r3,r3,1024
   4c1c8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4c1cc:	e0bffd17 	ldw	r2,-12(fp)
   4c1d0:	10000915 	stw	zero,36(r2)
   4c1d4:	00000a06 	br	4c200 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4c1d8:	e0bffd17 	ldw	r2,-12(fp)
   4c1dc:	10800917 	ldw	r2,36(r2)
   4c1e0:	00e00034 	movhi	r3,32768
   4c1e4:	18ffff04 	addi	r3,r3,-4
   4c1e8:	18800536 	bltu	r3,r2,4c200 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4c1ec:	e0bffd17 	ldw	r2,-12(fp)
   4c1f0:	10800917 	ldw	r2,36(r2)
   4c1f4:	10c00044 	addi	r3,r2,1
   4c1f8:	e0bffd17 	ldw	r2,-12(fp)
   4c1fc:	10c00915 	stw	r3,36(r2)
   4c200:	00800174 	movhi	r2,5
   4c204:	10864604 	addi	r2,r2,6424
   4c208:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4c20c:	e037883a 	mov	sp,fp
   4c210:	df000017 	ldw	fp,0(sp)
   4c214:	dec00104 	addi	sp,sp,4
   4c218:	f800283a 	ret

0004c21c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4c21c:	defffd04 	addi	sp,sp,-12
   4c220:	df000215 	stw	fp,8(sp)
   4c224:	df000204 	addi	fp,sp,8
   4c228:	e13ffe15 	stw	r4,-8(fp)
   4c22c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c230:	00000506 	br	4c248 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4c234:	e0bfff17 	ldw	r2,-4(fp)
   4c238:	1090000c 	andi	r2,r2,16384
   4c23c:	10000226 	beq	r2,zero,4c248 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4c240:	00bffd44 	movi	r2,-11
   4c244:	00000b06 	br	4c274 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c248:	e0bffe17 	ldw	r2,-8(fp)
   4c24c:	10c00d17 	ldw	r3,52(r2)
   4c250:	e0bffe17 	ldw	r2,-8(fp)
   4c254:	10800c17 	ldw	r2,48(r2)
   4c258:	18800526 	beq	r3,r2,4c270 <altera_avalon_jtag_uart_close+0x54>
   4c25c:	e0bffe17 	ldw	r2,-8(fp)
   4c260:	10c00917 	ldw	r3,36(r2)
   4c264:	e0bffe17 	ldw	r2,-8(fp)
   4c268:	10800117 	ldw	r2,4(r2)
   4c26c:	18bff136 	bltu	r3,r2,4c234 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4c270:	0005883a 	mov	r2,zero
}
   4c274:	e037883a 	mov	sp,fp
   4c278:	df000017 	ldw	fp,0(sp)
   4c27c:	dec00104 	addi	sp,sp,4
   4c280:	f800283a 	ret

0004c284 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4c284:	defffa04 	addi	sp,sp,-24
   4c288:	df000515 	stw	fp,20(sp)
   4c28c:	df000504 	addi	fp,sp,20
   4c290:	e13ffd15 	stw	r4,-12(fp)
   4c294:	e17ffe15 	stw	r5,-8(fp)
   4c298:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4c29c:	00bff9c4 	movi	r2,-25
   4c2a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4c2a4:	e0bffe17 	ldw	r2,-8(fp)
   4c2a8:	10da8060 	cmpeqi	r3,r2,27137
   4c2ac:	1800031e 	bne	r3,zero,4c2bc <altera_avalon_jtag_uart_ioctl+0x38>
   4c2b0:	109a80a0 	cmpeqi	r2,r2,27138
   4c2b4:	1000181e 	bne	r2,zero,4c318 <altera_avalon_jtag_uart_ioctl+0x94>
   4c2b8:	00002606 	br	4c354 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4c2bc:	e0bffd17 	ldw	r2,-12(fp)
   4c2c0:	10c00117 	ldw	r3,4(r2)
   4c2c4:	00a00034 	movhi	r2,32768
   4c2c8:	10bfffc4 	addi	r2,r2,-1
   4c2cc:	18802226 	beq	r3,r2,4c358 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4c2d0:	e0bfff17 	ldw	r2,-4(fp)
   4c2d4:	10800017 	ldw	r2,0(r2)
   4c2d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4c2dc:	e0bffc17 	ldw	r2,-16(fp)
   4c2e0:	10800090 	cmplti	r2,r2,2
   4c2e4:	1000061e 	bne	r2,zero,4c300 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c2e8:	e0fffc17 	ldw	r3,-16(fp)
   4c2ec:	00a00034 	movhi	r2,32768
   4c2f0:	10bfffc4 	addi	r2,r2,-1
   4c2f4:	18800226 	beq	r3,r2,4c300 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c2f8:	e0bffc17 	ldw	r2,-16(fp)
   4c2fc:	00000206 	br	4c308 <altera_avalon_jtag_uart_ioctl+0x84>
   4c300:	00a00034 	movhi	r2,32768
   4c304:	10bfff84 	addi	r2,r2,-2
   4c308:	e0fffd17 	ldw	r3,-12(fp)
   4c30c:	18800115 	stw	r2,4(r3)
      rc = 0;
   4c310:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c314:	00001006 	br	4c358 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4c318:	e0bffd17 	ldw	r2,-12(fp)
   4c31c:	10c00117 	ldw	r3,4(r2)
   4c320:	00a00034 	movhi	r2,32768
   4c324:	10bfffc4 	addi	r2,r2,-1
   4c328:	18800d26 	beq	r3,r2,4c360 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4c32c:	e0bffd17 	ldw	r2,-12(fp)
   4c330:	10c00917 	ldw	r3,36(r2)
   4c334:	e0bffd17 	ldw	r2,-12(fp)
   4c338:	10800117 	ldw	r2,4(r2)
   4c33c:	1885803a 	cmpltu	r2,r3,r2
   4c340:	10c03fcc 	andi	r3,r2,255
   4c344:	e0bfff17 	ldw	r2,-4(fp)
   4c348:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4c34c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c350:	00000306 	br	4c360 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4c354:	00000306 	br	4c364 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4c358:	0001883a 	nop
   4c35c:	00000106 	br	4c364 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4c360:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4c364:	e0bffb17 	ldw	r2,-20(fp)
}
   4c368:	e037883a 	mov	sp,fp
   4c36c:	df000017 	ldw	fp,0(sp)
   4c370:	dec00104 	addi	sp,sp,4
   4c374:	f800283a 	ret

0004c378 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4c378:	defff304 	addi	sp,sp,-52
   4c37c:	dfc00c15 	stw	ra,48(sp)
   4c380:	df000b15 	stw	fp,44(sp)
   4c384:	df000b04 	addi	fp,sp,44
   4c388:	e13ffc15 	stw	r4,-16(fp)
   4c38c:	e17ffd15 	stw	r5,-12(fp)
   4c390:	e1bffe15 	stw	r6,-8(fp)
   4c394:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4c398:	e0bffd17 	ldw	r2,-12(fp)
   4c39c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c3a0:	00004706 	br	4c4c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4c3a4:	e0bffc17 	ldw	r2,-16(fp)
   4c3a8:	10800a17 	ldw	r2,40(r2)
   4c3ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4c3b0:	e0bffc17 	ldw	r2,-16(fp)
   4c3b4:	10800b17 	ldw	r2,44(r2)
   4c3b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4c3bc:	e0fff717 	ldw	r3,-36(fp)
   4c3c0:	e0bff817 	ldw	r2,-32(fp)
   4c3c4:	18800536 	bltu	r3,r2,4c3dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4c3c8:	e0fff717 	ldw	r3,-36(fp)
   4c3cc:	e0bff817 	ldw	r2,-32(fp)
   4c3d0:	1885c83a 	sub	r2,r3,r2
   4c3d4:	e0bff615 	stw	r2,-40(fp)
   4c3d8:	00000406 	br	4c3ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4c3dc:	00c20004 	movi	r3,2048
   4c3e0:	e0bff817 	ldw	r2,-32(fp)
   4c3e4:	1885c83a 	sub	r2,r3,r2
   4c3e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4c3ec:	e0bff617 	ldw	r2,-40(fp)
   4c3f0:	10001e26 	beq	r2,zero,4c46c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4c3f4:	e0fffe17 	ldw	r3,-8(fp)
   4c3f8:	e0bff617 	ldw	r2,-40(fp)
   4c3fc:	1880022e 	bgeu	r3,r2,4c408 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4c400:	e0bffe17 	ldw	r2,-8(fp)
   4c404:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4c408:	e0bff817 	ldw	r2,-32(fp)
   4c40c:	10800e04 	addi	r2,r2,56
   4c410:	e0fffc17 	ldw	r3,-16(fp)
   4c414:	1885883a 	add	r2,r3,r2
   4c418:	e13ff517 	ldw	r4,-44(fp)
   4c41c:	100b883a 	mov	r5,r2
   4c420:	e1bff617 	ldw	r6,-40(fp)
   4c424:	0046e8c0 	call	46e8c <memcpy>
      ptr   += n;
   4c428:	e0fff517 	ldw	r3,-44(fp)
   4c42c:	e0bff617 	ldw	r2,-40(fp)
   4c430:	1885883a 	add	r2,r3,r2
   4c434:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4c438:	e0fffe17 	ldw	r3,-8(fp)
   4c43c:	e0bff617 	ldw	r2,-40(fp)
   4c440:	1885c83a 	sub	r2,r3,r2
   4c444:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c448:	e0fff817 	ldw	r3,-32(fp)
   4c44c:	e0bff617 	ldw	r2,-40(fp)
   4c450:	1885883a 	add	r2,r3,r2
   4c454:	10c1ffcc 	andi	r3,r2,2047
   4c458:	e0bffc17 	ldw	r2,-16(fp)
   4c45c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4c460:	e0bffe17 	ldw	r2,-8(fp)
   4c464:	00bfcf16 	blt	zero,r2,4c3a4 <altera_avalon_jtag_uart_read+0x2c>
   4c468:	00000106 	br	4c470 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4c46c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4c470:	e0fff517 	ldw	r3,-44(fp)
   4c474:	e0bffd17 	ldw	r2,-12(fp)
   4c478:	1880141e 	bne	r3,r2,4c4cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4c47c:	e0bfff17 	ldw	r2,-4(fp)
   4c480:	1090000c 	andi	r2,r2,16384
   4c484:	1000131e 	bne	r2,zero,4c4d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4c488:	0001883a 	nop
   4c48c:	e0bffc17 	ldw	r2,-16(fp)
   4c490:	10c00a17 	ldw	r3,40(r2)
   4c494:	e0bff717 	ldw	r2,-36(fp)
   4c498:	1880051e 	bne	r3,r2,4c4b0 <altera_avalon_jtag_uart_read+0x138>
   4c49c:	e0bffc17 	ldw	r2,-16(fp)
   4c4a0:	10c00917 	ldw	r3,36(r2)
   4c4a4:	e0bffc17 	ldw	r2,-16(fp)
   4c4a8:	10800117 	ldw	r2,4(r2)
   4c4ac:	18bff736 	bltu	r3,r2,4c48c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4c4b0:	e0bffc17 	ldw	r2,-16(fp)
   4c4b4:	10c00a17 	ldw	r3,40(r2)
   4c4b8:	e0bff717 	ldw	r2,-36(fp)
   4c4bc:	18800726 	beq	r3,r2,4c4dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c4c0:	e0bffe17 	ldw	r2,-8(fp)
   4c4c4:	00bfb716 	blt	zero,r2,4c3a4 <altera_avalon_jtag_uart_read+0x2c>
   4c4c8:	00000506 	br	4c4e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4c4cc:	0001883a 	nop
   4c4d0:	00000306 	br	4c4e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4c4d4:	0001883a 	nop
   4c4d8:	00000106 	br	4c4e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4c4dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4c4e0:	e0fff517 	ldw	r3,-44(fp)
   4c4e4:	e0bffd17 	ldw	r2,-12(fp)
   4c4e8:	18801726 	beq	r3,r2,4c548 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c4ec:	0005303a 	rdctl	r2,status
   4c4f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c4f4:	e0fffa17 	ldw	r3,-24(fp)
   4c4f8:	00bfff84 	movi	r2,-2
   4c4fc:	1884703a 	and	r2,r3,r2
   4c500:	1001703a 	wrctl	status,r2
  
  return context;
   4c504:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4c508:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c50c:	e0bffc17 	ldw	r2,-16(fp)
   4c510:	10800817 	ldw	r2,32(r2)
   4c514:	10c00054 	ori	r3,r2,1
   4c518:	e0bffc17 	ldw	r2,-16(fp)
   4c51c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c520:	e0bffc17 	ldw	r2,-16(fp)
   4c524:	10800017 	ldw	r2,0(r2)
   4c528:	10800104 	addi	r2,r2,4
   4c52c:	e0fffc17 	ldw	r3,-16(fp)
   4c530:	18c00817 	ldw	r3,32(r3)
   4c534:	10c00035 	stwio	r3,0(r2)
   4c538:	e0bff917 	ldw	r2,-28(fp)
   4c53c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c540:	e0bffb17 	ldw	r2,-20(fp)
   4c544:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4c548:	e0fff517 	ldw	r3,-44(fp)
   4c54c:	e0bffd17 	ldw	r2,-12(fp)
   4c550:	18800426 	beq	r3,r2,4c564 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4c554:	e0fff517 	ldw	r3,-44(fp)
   4c558:	e0bffd17 	ldw	r2,-12(fp)
   4c55c:	1885c83a 	sub	r2,r3,r2
   4c560:	00000606 	br	4c57c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4c564:	e0bfff17 	ldw	r2,-4(fp)
   4c568:	1090000c 	andi	r2,r2,16384
   4c56c:	10000226 	beq	r2,zero,4c578 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4c570:	00bffd44 	movi	r2,-11
   4c574:	00000106 	br	4c57c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4c578:	00bffec4 	movi	r2,-5
}
   4c57c:	e037883a 	mov	sp,fp
   4c580:	dfc00117 	ldw	ra,4(sp)
   4c584:	df000017 	ldw	fp,0(sp)
   4c588:	dec00204 	addi	sp,sp,8
   4c58c:	f800283a 	ret

0004c590 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4c590:	defff304 	addi	sp,sp,-52
   4c594:	dfc00c15 	stw	ra,48(sp)
   4c598:	df000b15 	stw	fp,44(sp)
   4c59c:	df000b04 	addi	fp,sp,44
   4c5a0:	e13ffc15 	stw	r4,-16(fp)
   4c5a4:	e17ffd15 	stw	r5,-12(fp)
   4c5a8:	e1bffe15 	stw	r6,-8(fp)
   4c5ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4c5b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4c5b4:	e0bffd17 	ldw	r2,-12(fp)
   4c5b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4c5bc:	00003706 	br	4c69c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4c5c0:	e0bffc17 	ldw	r2,-16(fp)
   4c5c4:	10800c17 	ldw	r2,48(r2)
   4c5c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4c5cc:	e0bffc17 	ldw	r2,-16(fp)
   4c5d0:	10800d17 	ldw	r2,52(r2)
   4c5d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4c5d8:	e0fff817 	ldw	r3,-32(fp)
   4c5dc:	e0bff517 	ldw	r2,-44(fp)
   4c5e0:	1880062e 	bgeu	r3,r2,4c5fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4c5e4:	e0fff517 	ldw	r3,-44(fp)
   4c5e8:	e0bff817 	ldw	r2,-32(fp)
   4c5ec:	1885c83a 	sub	r2,r3,r2
   4c5f0:	10bfffc4 	addi	r2,r2,-1
   4c5f4:	e0bff615 	stw	r2,-40(fp)
   4c5f8:	00000b06 	br	4c628 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4c5fc:	e0bff517 	ldw	r2,-44(fp)
   4c600:	10000526 	beq	r2,zero,4c618 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4c604:	00c20004 	movi	r3,2048
   4c608:	e0bff817 	ldw	r2,-32(fp)
   4c60c:	1885c83a 	sub	r2,r3,r2
   4c610:	e0bff615 	stw	r2,-40(fp)
   4c614:	00000406 	br	4c628 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4c618:	00c1ffc4 	movi	r3,2047
   4c61c:	e0bff817 	ldw	r2,-32(fp)
   4c620:	1885c83a 	sub	r2,r3,r2
   4c624:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4c628:	e0bff617 	ldw	r2,-40(fp)
   4c62c:	10001e26 	beq	r2,zero,4c6a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4c630:	e0fffe17 	ldw	r3,-8(fp)
   4c634:	e0bff617 	ldw	r2,-40(fp)
   4c638:	1880022e 	bgeu	r3,r2,4c644 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4c63c:	e0bffe17 	ldw	r2,-8(fp)
   4c640:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4c644:	e0bff817 	ldw	r2,-32(fp)
   4c648:	10820e04 	addi	r2,r2,2104
   4c64c:	e0fffc17 	ldw	r3,-16(fp)
   4c650:	1885883a 	add	r2,r3,r2
   4c654:	1009883a 	mov	r4,r2
   4c658:	e17ffd17 	ldw	r5,-12(fp)
   4c65c:	e1bff617 	ldw	r6,-40(fp)
   4c660:	0046e8c0 	call	46e8c <memcpy>
      ptr   += n;
   4c664:	e0fffd17 	ldw	r3,-12(fp)
   4c668:	e0bff617 	ldw	r2,-40(fp)
   4c66c:	1885883a 	add	r2,r3,r2
   4c670:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4c674:	e0fffe17 	ldw	r3,-8(fp)
   4c678:	e0bff617 	ldw	r2,-40(fp)
   4c67c:	1885c83a 	sub	r2,r3,r2
   4c680:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c684:	e0fff817 	ldw	r3,-32(fp)
   4c688:	e0bff617 	ldw	r2,-40(fp)
   4c68c:	1885883a 	add	r2,r3,r2
   4c690:	10c1ffcc 	andi	r3,r2,2047
   4c694:	e0bffc17 	ldw	r2,-16(fp)
   4c698:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4c69c:	e0bffe17 	ldw	r2,-8(fp)
   4c6a0:	00bfc716 	blt	zero,r2,4c5c0 <altera_avalon_jtag_uart_write+0x30>
   4c6a4:	00000106 	br	4c6ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4c6a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c6ac:	0005303a 	rdctl	r2,status
   4c6b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c6b4:	e0fffa17 	ldw	r3,-24(fp)
   4c6b8:	00bfff84 	movi	r2,-2
   4c6bc:	1884703a 	and	r2,r3,r2
   4c6c0:	1001703a 	wrctl	status,r2
  
  return context;
   4c6c4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4c6c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c6cc:	e0bffc17 	ldw	r2,-16(fp)
   4c6d0:	10800817 	ldw	r2,32(r2)
   4c6d4:	10c00094 	ori	r3,r2,2
   4c6d8:	e0bffc17 	ldw	r2,-16(fp)
   4c6dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c6e0:	e0bffc17 	ldw	r2,-16(fp)
   4c6e4:	10800017 	ldw	r2,0(r2)
   4c6e8:	10800104 	addi	r2,r2,4
   4c6ec:	e0fffc17 	ldw	r3,-16(fp)
   4c6f0:	18c00817 	ldw	r3,32(r3)
   4c6f4:	10c00035 	stwio	r3,0(r2)
   4c6f8:	e0bff917 	ldw	r2,-28(fp)
   4c6fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c700:	e0bffb17 	ldw	r2,-20(fp)
   4c704:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4c708:	e0bffe17 	ldw	r2,-8(fp)
   4c70c:	0080110e 	bge	zero,r2,4c754 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4c710:	e0bfff17 	ldw	r2,-4(fp)
   4c714:	1090000c 	andi	r2,r2,16384
   4c718:	1000111e 	bne	r2,zero,4c760 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4c71c:	0001883a 	nop
   4c720:	e0bffc17 	ldw	r2,-16(fp)
   4c724:	10c00d17 	ldw	r3,52(r2)
   4c728:	e0bff517 	ldw	r2,-44(fp)
   4c72c:	1880051e 	bne	r3,r2,4c744 <altera_avalon_jtag_uart_write+0x1b4>
   4c730:	e0bffc17 	ldw	r2,-16(fp)
   4c734:	10c00917 	ldw	r3,36(r2)
   4c738:	e0bffc17 	ldw	r2,-16(fp)
   4c73c:	10800117 	ldw	r2,4(r2)
   4c740:	18bff736 	bltu	r3,r2,4c720 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4c744:	e0bffc17 	ldw	r2,-16(fp)
   4c748:	10c00d17 	ldw	r3,52(r2)
   4c74c:	e0bff517 	ldw	r2,-44(fp)
   4c750:	18800526 	beq	r3,r2,4c768 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4c754:	e0bffe17 	ldw	r2,-8(fp)
   4c758:	00bfd016 	blt	zero,r2,4c69c <altera_avalon_jtag_uart_write+0x10c>
   4c75c:	00000306 	br	4c76c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4c760:	0001883a 	nop
   4c764:	00000106 	br	4c76c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4c768:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4c76c:	e0fffd17 	ldw	r3,-12(fp)
   4c770:	e0bff717 	ldw	r2,-36(fp)
   4c774:	18800426 	beq	r3,r2,4c788 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4c778:	e0fffd17 	ldw	r3,-12(fp)
   4c77c:	e0bff717 	ldw	r2,-36(fp)
   4c780:	1885c83a 	sub	r2,r3,r2
   4c784:	00000606 	br	4c7a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4c788:	e0bfff17 	ldw	r2,-4(fp)
   4c78c:	1090000c 	andi	r2,r2,16384
   4c790:	10000226 	beq	r2,zero,4c79c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4c794:	00bffd44 	movi	r2,-11
   4c798:	00000106 	br	4c7a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4c79c:	00bffec4 	movi	r2,-5
}
   4c7a0:	e037883a 	mov	sp,fp
   4c7a4:	dfc00117 	ldw	ra,4(sp)
   4c7a8:	df000017 	ldw	fp,0(sp)
   4c7ac:	dec00204 	addi	sp,sp,8
   4c7b0:	f800283a 	ret

0004c7b4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4c7b4:	defffa04 	addi	sp,sp,-24
   4c7b8:	dfc00515 	stw	ra,20(sp)
   4c7bc:	df000415 	stw	fp,16(sp)
   4c7c0:	df000404 	addi	fp,sp,16
   4c7c4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4c7c8:	0007883a 	mov	r3,zero
   4c7cc:	e0bfff17 	ldw	r2,-4(fp)
   4c7d0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4c7d4:	e0bfff17 	ldw	r2,-4(fp)
   4c7d8:	10800104 	addi	r2,r2,4
   4c7dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c7e0:	0005303a 	rdctl	r2,status
   4c7e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c7e8:	e0fffd17 	ldw	r3,-12(fp)
   4c7ec:	00bfff84 	movi	r2,-2
   4c7f0:	1884703a 	and	r2,r3,r2
   4c7f4:	1001703a 	wrctl	status,r2
  
  return context;
   4c7f8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4c7fc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4c800:	004d9ac0 	call	4d9ac <alt_tick>
   4c804:	e0bffc17 	ldw	r2,-16(fp)
   4c808:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c80c:	e0bffe17 	ldw	r2,-8(fp)
   4c810:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4c814:	e037883a 	mov	sp,fp
   4c818:	dfc00117 	ldw	ra,4(sp)
   4c81c:	df000017 	ldw	fp,0(sp)
   4c820:	dec00204 	addi	sp,sp,8
   4c824:	f800283a 	ret

0004c828 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4c828:	defff804 	addi	sp,sp,-32
   4c82c:	dfc00715 	stw	ra,28(sp)
   4c830:	df000615 	stw	fp,24(sp)
   4c834:	df000604 	addi	fp,sp,24
   4c838:	e13ffc15 	stw	r4,-16(fp)
   4c83c:	e17ffd15 	stw	r5,-12(fp)
   4c840:	e1bffe15 	stw	r6,-8(fp)
   4c844:	e1ffff15 	stw	r7,-4(fp)
   4c848:	e0bfff17 	ldw	r2,-4(fp)
   4c84c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4c850:	00800174 	movhi	r2,5
   4c854:	10864604 	addi	r2,r2,6424
   4c858:	10800017 	ldw	r2,0(r2)
   4c85c:	1000041e 	bne	r2,zero,4c870 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4c860:	00800174 	movhi	r2,5
   4c864:	10864604 	addi	r2,r2,6424
   4c868:	e0fffb17 	ldw	r3,-20(fp)
   4c86c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4c870:	e0bffc17 	ldw	r2,-16(fp)
   4c874:	10800104 	addi	r2,r2,4
   4c878:	00c001c4 	movi	r3,7
   4c87c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4c880:	d8000015 	stw	zero,0(sp)
   4c884:	e13ffd17 	ldw	r4,-12(fp)
   4c888:	e17ffe17 	ldw	r5,-8(fp)
   4c88c:	01800174 	movhi	r6,5
   4c890:	31b1ed04 	addi	r6,r6,-14412
   4c894:	e1fffc17 	ldw	r7,-16(fp)
   4c898:	004d4f40 	call	4d4f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4c89c:	e037883a 	mov	sp,fp
   4c8a0:	dfc00117 	ldw	ra,4(sp)
   4c8a4:	df000017 	ldw	fp,0(sp)
   4c8a8:	dec00204 	addi	sp,sp,8
   4c8ac:	f800283a 	ret

0004c8b0 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   4c8b0:	deffeb04 	addi	sp,sp,-84
   4c8b4:	df001415 	stw	fp,80(sp)
   4c8b8:	dc401315 	stw	r17,76(sp)
   4c8bc:	dc001215 	stw	r16,72(sp)
   4c8c0:	df001204 	addi	fp,sp,72
   4c8c4:	e13ffb15 	stw	r4,-20(fp)
   4c8c8:	e17ffc15 	stw	r5,-16(fp)
   4c8cc:	e1bffd15 	stw	r6,-12(fp)
   4c8d0:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   4c8d4:	e0bffb17 	ldw	r2,-20(fp)
   4c8d8:	10800017 	ldw	r2,0(r2)
   4c8dc:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   4c8e0:	e0bfee17 	ldw	r2,-72(fp)
   4c8e4:	10800217 	ldw	r2,8(r2)
   4c8e8:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   4c8ec:	e0bff717 	ldw	r2,-36(fp)
   4c8f0:	10bfffc4 	addi	r2,r2,-1
   4c8f4:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   4c8f8:	e0bff817 	ldw	r2,-32(fp)
   4c8fc:	10800044 	addi	r2,r2,1
   4c900:	e0bff815 	stw	r2,-32(fp)
   4c904:	e0bff817 	ldw	r2,-32(fp)
   4c908:	10800003 	ldbu	r2,0(r2)
   4c90c:	10803fcc 	andi	r2,r2,255
   4c910:	1080201c 	xori	r2,r2,128
   4c914:	10bfe004 	addi	r2,r2,-128
   4c918:	103ff71e 	bne	r2,zero,4c8f8 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   4c91c:	e0fff817 	ldw	r3,-32(fp)
   4c920:	e0bff717 	ldw	r2,-36(fp)
   4c924:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   4c928:	10800044 	addi	r2,r2,1
   4c92c:	e0fffc17 	ldw	r3,-16(fp)
   4c930:	1885883a 	add	r2,r3,r2
   4c934:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   4c938:	d0a01b04 	addi	r2,gp,-32660
   4c93c:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   4c940:	e0bffc17 	ldw	r2,-16(fp)
   4c944:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   4c948:	e0bffd17 	ldw	r2,-12(fp)
   4c94c:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   4c950:	e0bffe17 	ldw	r2,-8(fp)
   4c954:	e0bff215 	stw	r2,-56(fp)
   4c958:	e0bffc17 	ldw	r2,-16(fp)
   4c95c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   4c960:	e0bff917 	ldw	r2,-28(fp)
   4c964:	10bfffc4 	addi	r2,r2,-1
   4c968:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   4c96c:	e0bffa17 	ldw	r2,-24(fp)
   4c970:	10800044 	addi	r2,r2,1
   4c974:	e0bffa15 	stw	r2,-24(fp)
   4c978:	e0bffa17 	ldw	r2,-24(fp)
   4c97c:	10800003 	ldbu	r2,0(r2)
   4c980:	10803fcc 	andi	r2,r2,255
   4c984:	1080201c 	xori	r2,r2,128
   4c988:	10bfe004 	addi	r2,r2,-128
   4c98c:	103ff71e 	bne	r2,zero,4c96c <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   4c990:	e0fffa17 	ldw	r3,-24(fp)
   4c994:	e0bff917 	ldw	r2,-28(fp)
   4c998:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   4c99c:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   4c9a0:	e13ff017 	ldw	r4,-64(fp)
   4c9a4:	e13fff15 	stw	r4,-4(fp)
   4c9a8:	e17ff117 	ldw	r5,-60(fp)
   4c9ac:	e1bff217 	ldw	r6,-56(fp)
   4c9b0:	e1fff317 	ldw	r7,-52(fp)
   4c9b4:	e0ffef17 	ldw	r3,-68(fp)
   4c9b8:	1821883a 	mov	r16,r3
   4c9bc:	8007883a 	mov	r3,r16
   4c9c0:	e13fff17 	ldw	r4,-4(fp)
   4c9c4:	003da07a 	break	1
   4c9c8:	1821883a 	mov	r16,r3
   4c9cc:	1023883a 	mov	r17,r2
   4c9d0:	e47ff415 	stw	r17,-48(fp)
   4c9d4:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   4c9d8:	e0bff417 	ldw	r2,-48(fp)
   4c9dc:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   4c9e0:	e0bfef17 	ldw	r2,-68(fp)
   4c9e4:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   4c9e8:	e0bff617 	ldw	r2,-40(fp)
   4c9ec:	1000031e 	bne	r2,zero,4c9fc <alt_hostfs_open+0x14c>
    fd->priv = handle;
   4c9f0:	e0bffb17 	ldw	r2,-20(fp)
   4c9f4:	e0fff517 	ldw	r3,-44(fp)
   4c9f8:	10c00115 	stw	r3,4(r2)

  return -error;
   4c9fc:	e0bff617 	ldw	r2,-40(fp)
   4ca00:	0085c83a 	sub	r2,zero,r2
}
   4ca04:	e037883a 	mov	sp,fp
   4ca08:	df000217 	ldw	fp,8(sp)
   4ca0c:	dc400117 	ldw	r17,4(sp)
   4ca10:	dc000017 	ldw	r16,0(sp)
   4ca14:	dec00304 	addi	sp,sp,12
   4ca18:	f800283a 	ret

0004ca1c <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   4ca1c:	defffa04 	addi	sp,sp,-24
   4ca20:	df000515 	stw	fp,20(sp)
   4ca24:	dc000415 	stw	r16,16(sp)
   4ca28:	df000404 	addi	fp,sp,16
   4ca2c:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   4ca30:	d0a01804 	addi	r2,gp,-32672
   4ca34:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   4ca38:	e0bfff17 	ldw	r2,-4(fp)
   4ca3c:	10800117 	ldw	r2,4(r2)
   4ca40:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   4ca44:	e0bffd17 	ldw	r2,-12(fp)
   4ca48:	e0fffc17 	ldw	r3,-16(fp)
   4ca4c:	1821883a 	mov	r16,r3
   4ca50:	8007883a 	mov	r3,r16
   4ca54:	1009883a 	mov	r4,r2
   4ca58:	003da07a 	break	1
   4ca5c:	1821883a 	mov	r16,r3
   4ca60:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   4ca64:	e0bffc17 	ldw	r2,-16(fp)
   4ca68:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   4ca6c:	e0bffe17 	ldw	r2,-8(fp)
   4ca70:	0085c83a 	sub	r2,zero,r2
}
   4ca74:	e037883a 	mov	sp,fp
   4ca78:	df000117 	ldw	fp,4(sp)
   4ca7c:	dc000017 	ldw	r16,0(sp)
   4ca80:	dec00204 	addi	sp,sp,8
   4ca84:	f800283a 	ret

0004ca88 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   4ca88:	defff204 	addi	sp,sp,-56
   4ca8c:	df000d15 	stw	fp,52(sp)
   4ca90:	dc400c15 	stw	r17,48(sp)
   4ca94:	dc000b15 	stw	r16,44(sp)
   4ca98:	df000b04 	addi	fp,sp,44
   4ca9c:	e13ffc15 	stw	r4,-16(fp)
   4caa0:	e17ffd15 	stw	r5,-12(fp)
   4caa4:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4caa8:	d0a01504 	addi	r2,gp,-32684
   4caac:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4cab0:	e0bffc17 	ldw	r2,-16(fp)
   4cab4:	10800117 	ldw	r2,4(r2)
   4cab8:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4cabc:	e0bffd17 	ldw	r2,-12(fp)
   4cac0:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   4cac4:	e0bffe17 	ldw	r2,-8(fp)
   4cac8:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4cacc:	e13ff617 	ldw	r4,-40(fp)
   4cad0:	e13fff15 	stw	r4,-4(fp)
   4cad4:	e17ff717 	ldw	r5,-36(fp)
   4cad8:	e1bff817 	ldw	r6,-32(fp)
   4cadc:	e0fff517 	ldw	r3,-44(fp)
   4cae0:	1821883a 	mov	r16,r3
   4cae4:	8007883a 	mov	r3,r16
   4cae8:	e13fff17 	ldw	r4,-4(fp)
   4caec:	003da07a 	break	1
   4caf0:	1821883a 	mov	r16,r3
   4caf4:	1023883a 	mov	r17,r2
   4caf8:	e47ff915 	stw	r17,-28(fp)
   4cafc:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4cb00:	e0bff917 	ldw	r2,-28(fp)
   4cb04:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4cb08:	e0bff517 	ldw	r2,-44(fp)
   4cb0c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4cb10:	e0bffb17 	ldw	r2,-20(fp)
   4cb14:	10000326 	beq	r2,zero,4cb24 <alt_hostfs_read+0x9c>
   4cb18:	e0bffb17 	ldw	r2,-20(fp)
   4cb1c:	0085c83a 	sub	r2,zero,r2
   4cb20:	00000106 	br	4cb28 <alt_hostfs_read+0xa0>
   4cb24:	e0bffa17 	ldw	r2,-24(fp)
}
   4cb28:	e037883a 	mov	sp,fp
   4cb2c:	df000217 	ldw	fp,8(sp)
   4cb30:	dc400117 	ldw	r17,4(sp)
   4cb34:	dc000017 	ldw	r16,0(sp)
   4cb38:	dec00304 	addi	sp,sp,12
   4cb3c:	f800283a 	ret

0004cb40 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   4cb40:	defff204 	addi	sp,sp,-56
   4cb44:	df000d15 	stw	fp,52(sp)
   4cb48:	dc400c15 	stw	r17,48(sp)
   4cb4c:	dc000b15 	stw	r16,44(sp)
   4cb50:	df000b04 	addi	fp,sp,44
   4cb54:	e13ffc15 	stw	r4,-16(fp)
   4cb58:	e17ffd15 	stw	r5,-12(fp)
   4cb5c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4cb60:	d0a01204 	addi	r2,gp,-32696
   4cb64:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4cb68:	e0bffc17 	ldw	r2,-16(fp)
   4cb6c:	10800117 	ldw	r2,4(r2)
   4cb70:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4cb74:	e0bffd17 	ldw	r2,-12(fp)
   4cb78:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   4cb7c:	e0bffe17 	ldw	r2,-8(fp)
   4cb80:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4cb84:	e13ff617 	ldw	r4,-40(fp)
   4cb88:	e13fff15 	stw	r4,-4(fp)
   4cb8c:	e17ff717 	ldw	r5,-36(fp)
   4cb90:	e1bff817 	ldw	r6,-32(fp)
   4cb94:	e0fff517 	ldw	r3,-44(fp)
   4cb98:	1821883a 	mov	r16,r3
   4cb9c:	8007883a 	mov	r3,r16
   4cba0:	e13fff17 	ldw	r4,-4(fp)
   4cba4:	003da07a 	break	1
   4cba8:	1821883a 	mov	r16,r3
   4cbac:	1023883a 	mov	r17,r2
   4cbb0:	e47ff915 	stw	r17,-28(fp)
   4cbb4:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4cbb8:	e0bff917 	ldw	r2,-28(fp)
   4cbbc:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4cbc0:	e0bff517 	ldw	r2,-44(fp)
   4cbc4:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4cbc8:	e0bffb17 	ldw	r2,-20(fp)
   4cbcc:	10000326 	beq	r2,zero,4cbdc <alt_hostfs_write+0x9c>
   4cbd0:	e0bffb17 	ldw	r2,-20(fp)
   4cbd4:	0085c83a 	sub	r2,zero,r2
   4cbd8:	00000106 	br	4cbe0 <alt_hostfs_write+0xa0>
   4cbdc:	e0bffa17 	ldw	r2,-24(fp)
}
   4cbe0:	e037883a 	mov	sp,fp
   4cbe4:	df000217 	ldw	fp,8(sp)
   4cbe8:	dc400117 	ldw	r17,4(sp)
   4cbec:	dc000017 	ldw	r16,0(sp)
   4cbf0:	dec00304 	addi	sp,sp,12
   4cbf4:	f800283a 	ret

0004cbf8 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   4cbf8:	defff204 	addi	sp,sp,-56
   4cbfc:	df000d15 	stw	fp,52(sp)
   4cc00:	dc400c15 	stw	r17,48(sp)
   4cc04:	dc000b15 	stw	r16,44(sp)
   4cc08:	df000b04 	addi	fp,sp,44
   4cc0c:	e13ffc15 	stw	r4,-16(fp)
   4cc10:	e17ffd15 	stw	r5,-12(fp)
   4cc14:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4cc18:	d0a00f04 	addi	r2,gp,-32708
   4cc1c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4cc20:	e0bffc17 	ldw	r2,-16(fp)
   4cc24:	10800117 	ldw	r2,4(r2)
   4cc28:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   4cc2c:	e0bffd17 	ldw	r2,-12(fp)
   4cc30:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   4cc34:	e0bffe17 	ldw	r2,-8(fp)
   4cc38:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4cc3c:	e13ff617 	ldw	r4,-40(fp)
   4cc40:	e13fff15 	stw	r4,-4(fp)
   4cc44:	e17ff717 	ldw	r5,-36(fp)
   4cc48:	e1bff817 	ldw	r6,-32(fp)
   4cc4c:	e0fff517 	ldw	r3,-44(fp)
   4cc50:	1821883a 	mov	r16,r3
   4cc54:	8007883a 	mov	r3,r16
   4cc58:	e13fff17 	ldw	r4,-4(fp)
   4cc5c:	003da07a 	break	1
   4cc60:	1821883a 	mov	r16,r3
   4cc64:	1023883a 	mov	r17,r2
   4cc68:	e47ff915 	stw	r17,-28(fp)
   4cc6c:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4cc70:	e0bff917 	ldw	r2,-28(fp)
   4cc74:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4cc78:	e0bff517 	ldw	r2,-44(fp)
   4cc7c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4cc80:	e0bffb17 	ldw	r2,-20(fp)
   4cc84:	10000326 	beq	r2,zero,4cc94 <alt_hostfs_seek+0x9c>
   4cc88:	e0bffb17 	ldw	r2,-20(fp)
   4cc8c:	0085c83a 	sub	r2,zero,r2
   4cc90:	00000106 	br	4cc98 <alt_hostfs_seek+0xa0>
   4cc94:	e0bffa17 	ldw	r2,-24(fp)
}
   4cc98:	e037883a 	mov	sp,fp
   4cc9c:	df000217 	ldw	fp,8(sp)
   4cca0:	dc400117 	ldw	r17,4(sp)
   4cca4:	dc000017 	ldw	r16,0(sp)
   4cca8:	dec00304 	addi	sp,sp,12
   4ccac:	f800283a 	ret

0004ccb0 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   4ccb0:	deffe204 	addi	sp,sp,-120
   4ccb4:	df001d15 	stw	fp,116(sp)
   4ccb8:	dc401c15 	stw	r17,112(sp)
   4ccbc:	dc001b15 	stw	r16,108(sp)
   4ccc0:	df001b04 	addi	fp,sp,108
   4ccc4:	e13ffd15 	stw	r4,-12(fp)
   4ccc8:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   4cccc:	d0a00c04 	addi	r2,gp,-32720
   4ccd0:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   4ccd4:	e0bffd17 	ldw	r2,-12(fp)
   4ccd8:	10800117 	ldw	r2,4(r2)
   4ccdc:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   4cce0:	e0bfed04 	addi	r2,fp,-76
   4cce4:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   4cce8:	e13fe717 	ldw	r4,-100(fp)
   4ccec:	e13fff15 	stw	r4,-4(fp)
   4ccf0:	e17fe817 	ldw	r5,-96(fp)
   4ccf4:	e0ffe617 	ldw	r3,-104(fp)
   4ccf8:	1821883a 	mov	r16,r3
   4ccfc:	8007883a 	mov	r3,r16
   4cd00:	e13fff17 	ldw	r4,-4(fp)
   4cd04:	003da07a 	break	1
   4cd08:	1821883a 	mov	r16,r3
   4cd0c:	1023883a 	mov	r17,r2
   4cd10:	e47fe915 	stw	r17,-92(fp)
   4cd14:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   4cd18:	e0bfe917 	ldw	r2,-92(fp)
   4cd1c:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   4cd20:	e0bfe617 	ldw	r2,-104(fp)
   4cd24:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   4cd28:	e0bfeb17 	ldw	r2,-84(fp)
   4cd2c:	1000621e 	bne	r2,zero,4ceb8 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   4cd30:	e0bfed04 	addi	r2,fp,-76
   4cd34:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   4cd38:	e0bfe517 	ldw	r2,-108(fp)
   4cd3c:	10801004 	addi	r2,r2,64
   4cd40:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   4cd44:	00001606 	br	4cda0 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4cd48:	e0bfe517 	ldw	r2,-108(fp)
   4cd4c:	10800017 	ldw	r2,0(r2)
   4cd50:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   4cd54:	e0bfe517 	ldw	r2,-108(fp)
   4cd58:	10800017 	ldw	r2,0(r2)
   4cd5c:	10803fec 	andhi	r2,r2,255
   4cd60:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4cd64:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   4cd68:	e0bfe517 	ldw	r2,-108(fp)
   4cd6c:	10800017 	ldw	r2,0(r2)
   4cd70:	10bfc00c 	andi	r2,r2,65280
   4cd74:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   4cd78:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   4cd7c:	e0bfe517 	ldw	r2,-108(fp)
   4cd80:	10800017 	ldw	r2,0(r2)
   4cd84:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   4cd88:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4cd8c:	e0bfe517 	ldw	r2,-108(fp)
   4cd90:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   4cd94:	e0bfe517 	ldw	r2,-108(fp)
   4cd98:	10800104 	addi	r2,r2,4
   4cd9c:	e0bfe515 	stw	r2,-108(fp)
   4cda0:	e0ffe517 	ldw	r3,-108(fp)
   4cda4:	e0bfec17 	ldw	r2,-80(fp)
   4cda8:	18bfe736 	bltu	r3,r2,4cd48 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   4cdac:	e0bffe17 	ldw	r2,-8(fp)
   4cdb0:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   4cdb4:	e0bfe517 	ldw	r2,-108(fp)
   4cdb8:	10800f04 	addi	r2,r2,60
   4cdbc:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   4cdc0:	00000506 	br	4cdd8 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   4cdc4:	e0bfe517 	ldw	r2,-108(fp)
   4cdc8:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   4cdcc:	e0bfe517 	ldw	r2,-108(fp)
   4cdd0:	10800104 	addi	r2,r2,4
   4cdd4:	e0bfe515 	stw	r2,-108(fp)
   4cdd8:	e0ffe517 	ldw	r3,-108(fp)
   4cddc:	e0bfec17 	ldw	r2,-80(fp)
   4cde0:	18bff836 	bltu	r3,r2,4cdc4 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   4cde4:	e0bfed17 	ldw	r2,-76(fp)
   4cde8:	1007883a 	mov	r3,r2
   4cdec:	e0bffe17 	ldw	r2,-8(fp)
   4cdf0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   4cdf4:	e0bfee17 	ldw	r2,-72(fp)
   4cdf8:	1007883a 	mov	r3,r2
   4cdfc:	e0bffe17 	ldw	r2,-8(fp)
   4ce00:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   4ce04:	e0ffef17 	ldw	r3,-68(fp)
   4ce08:	e0bffe17 	ldw	r2,-8(fp)
   4ce0c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   4ce10:	e0bff017 	ldw	r2,-64(fp)
   4ce14:	1007883a 	mov	r3,r2
   4ce18:	e0bffe17 	ldw	r2,-8(fp)
   4ce1c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   4ce20:	e0bff117 	ldw	r2,-60(fp)
   4ce24:	1007883a 	mov	r3,r2
   4ce28:	e0bffe17 	ldw	r2,-8(fp)
   4ce2c:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   4ce30:	e0bff217 	ldw	r2,-56(fp)
   4ce34:	1007883a 	mov	r3,r2
   4ce38:	e0bffe17 	ldw	r2,-8(fp)
   4ce3c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   4ce40:	e0bff317 	ldw	r2,-52(fp)
   4ce44:	1007883a 	mov	r3,r2
   4ce48:	e0bffe17 	ldw	r2,-8(fp)
   4ce4c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   4ce50:	e0bff517 	ldw	r2,-44(fp)
   4ce54:	1007883a 	mov	r3,r2
   4ce58:	e0bffe17 	ldw	r2,-8(fp)
   4ce5c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   4ce60:	e0bffa17 	ldw	r2,-24(fp)
   4ce64:	1007883a 	mov	r3,r2
   4ce68:	e0bffe17 	ldw	r2,-8(fp)
   4ce6c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   4ce70:	e0bffb17 	ldw	r2,-20(fp)
   4ce74:	1007883a 	mov	r3,r2
   4ce78:	e0bffe17 	ldw	r2,-8(fp)
   4ce7c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   4ce80:	e0bffc17 	ldw	r2,-16(fp)
   4ce84:	1007883a 	mov	r3,r2
   4ce88:	e0bffe17 	ldw	r2,-8(fp)
   4ce8c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   4ce90:	e0bff717 	ldw	r2,-36(fp)
   4ce94:	1007883a 	mov	r3,r2
   4ce98:	e0bffe17 	ldw	r2,-8(fp)
   4ce9c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   4cea0:	e0bff917 	ldw	r2,-28(fp)
   4cea4:	1007883a 	mov	r3,r2
   4cea8:	e0bffe17 	ldw	r2,-8(fp)
   4ceac:	10c00c15 	stw	r3,48(r2)

    return rc;
   4ceb0:	e0bfea17 	ldw	r2,-88(fp)
   4ceb4:	00000206 	br	4cec0 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   4ceb8:	e0bfeb17 	ldw	r2,-84(fp)
   4cebc:	0085c83a 	sub	r2,zero,r2
}
   4cec0:	e037883a 	mov	sp,fp
   4cec4:	df000217 	ldw	fp,8(sp)
   4cec8:	dc400117 	ldw	r17,4(sp)
   4cecc:	dc000017 	ldw	r16,0(sp)
   4ced0:	dec00304 	addi	sp,sp,12
   4ced4:	f800283a 	ret

0004ced8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4ced8:	defff504 	addi	sp,sp,-44
   4cedc:	df000a15 	stw	fp,40(sp)
   4cee0:	df000a04 	addi	fp,sp,40
   4cee4:	e13ffc15 	stw	r4,-16(fp)
   4cee8:	e17ffd15 	stw	r5,-12(fp)
   4ceec:	e1bffe15 	stw	r6,-8(fp)
   4cef0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4cef4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4cef8:	00800174 	movhi	r2,5
   4cefc:	10864604 	addi	r2,r2,6424
   4cf00:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4cf04:	10003f26 	beq	r2,zero,4d004 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4cf08:	e0bffc17 	ldw	r2,-16(fp)
   4cf0c:	10003b26 	beq	r2,zero,4cffc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4cf10:	e0bffc17 	ldw	r2,-16(fp)
   4cf14:	e0fffe17 	ldw	r3,-8(fp)
   4cf18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4cf1c:	e0bffc17 	ldw	r2,-16(fp)
   4cf20:	e0ffff17 	ldw	r3,-4(fp)
   4cf24:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cf28:	0005303a 	rdctl	r2,status
   4cf2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cf30:	e0fff817 	ldw	r3,-32(fp)
   4cf34:	00bfff84 	movi	r2,-2
   4cf38:	1884703a 	and	r2,r3,r2
   4cf3c:	1001703a 	wrctl	status,r2
  
  return context;
   4cf40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4cf44:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4cf48:	00800174 	movhi	r2,5
   4cf4c:	10864704 	addi	r2,r2,6428
   4cf50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4cf54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4cf58:	e0fffd17 	ldw	r3,-12(fp)
   4cf5c:	e0bff617 	ldw	r2,-40(fp)
   4cf60:	1885883a 	add	r2,r3,r2
   4cf64:	10c00044 	addi	r3,r2,1
   4cf68:	e0bffc17 	ldw	r2,-16(fp)
   4cf6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4cf70:	e0bffc17 	ldw	r2,-16(fp)
   4cf74:	10c00217 	ldw	r3,8(r2)
   4cf78:	e0bff617 	ldw	r2,-40(fp)
   4cf7c:	1880042e 	bgeu	r3,r2,4cf90 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4cf80:	e0bffc17 	ldw	r2,-16(fp)
   4cf84:	00c00044 	movi	r3,1
   4cf88:	10c00405 	stb	r3,16(r2)
   4cf8c:	00000206 	br	4cf98 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4cf90:	e0bffc17 	ldw	r2,-16(fp)
   4cf94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4cf98:	e0bffc17 	ldw	r2,-16(fp)
   4cf9c:	00c00174 	movhi	r3,5
   4cfa0:	18ff6704 	addi	r3,r3,-612
   4cfa4:	e0fff915 	stw	r3,-28(fp)
   4cfa8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4cfac:	e0bffa17 	ldw	r2,-24(fp)
   4cfb0:	e0fff917 	ldw	r3,-28(fp)
   4cfb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4cfb8:	e0bff917 	ldw	r2,-28(fp)
   4cfbc:	10c00017 	ldw	r3,0(r2)
   4cfc0:	e0bffa17 	ldw	r2,-24(fp)
   4cfc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4cfc8:	e0bff917 	ldw	r2,-28(fp)
   4cfcc:	10800017 	ldw	r2,0(r2)
   4cfd0:	e0fffa17 	ldw	r3,-24(fp)
   4cfd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4cfd8:	e0bff917 	ldw	r2,-28(fp)
   4cfdc:	e0fffa17 	ldw	r3,-24(fp)
   4cfe0:	10c00015 	stw	r3,0(r2)
   4cfe4:	e0bff717 	ldw	r2,-36(fp)
   4cfe8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cfec:	e0bffb17 	ldw	r2,-20(fp)
   4cff0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4cff4:	0005883a 	mov	r2,zero
   4cff8:	00000306 	br	4d008 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4cffc:	00bffa84 	movi	r2,-22
   4d000:	00000106 	br	4d008 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4d004:	00bfde84 	movi	r2,-134
  }
}
   4d008:	e037883a 	mov	sp,fp
   4d00c:	df000017 	ldw	fp,0(sp)
   4d010:	dec00104 	addi	sp,sp,4
   4d014:	f800283a 	ret

0004d018 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4d018:	deffff04 	addi	sp,sp,-4
   4d01c:	df000015 	stw	fp,0(sp)
   4d020:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4d024:	e037883a 	mov	sp,fp
   4d028:	df000017 	ldw	fp,0(sp)
   4d02c:	dec00104 	addi	sp,sp,4
   4d030:	f800283a 	ret

0004d034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d034:	defffe04 	addi	sp,sp,-8
   4d038:	dfc00115 	stw	ra,4(sp)
   4d03c:	df000015 	stw	fp,0(sp)
   4d040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d044:	00800174 	movhi	r2,5
   4d048:	10bf5204 	addi	r2,r2,-696
   4d04c:	10800017 	ldw	r2,0(r2)
   4d050:	10000526 	beq	r2,zero,4d068 <alt_get_errno+0x34>
   4d054:	00800174 	movhi	r2,5
   4d058:	10bf5204 	addi	r2,r2,-696
   4d05c:	10800017 	ldw	r2,0(r2)
   4d060:	103ee83a 	callr	r2
   4d064:	00000206 	br	4d070 <alt_get_errno+0x3c>
   4d068:	00800174 	movhi	r2,5
   4d06c:	10863b04 	addi	r2,r2,6380
}
   4d070:	e037883a 	mov	sp,fp
   4d074:	dfc00117 	ldw	ra,4(sp)
   4d078:	df000017 	ldw	fp,0(sp)
   4d07c:	dec00204 	addi	sp,sp,8
   4d080:	f800283a 	ret

0004d084 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4d084:	defffa04 	addi	sp,sp,-24
   4d088:	dfc00515 	stw	ra,20(sp)
   4d08c:	df000415 	stw	fp,16(sp)
   4d090:	df000404 	addi	fp,sp,16
   4d094:	e13ffe15 	stw	r4,-8(fp)
   4d098:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4d09c:	e0bffe17 	ldw	r2,-8(fp)
   4d0a0:	10000326 	beq	r2,zero,4d0b0 <alt_dev_llist_insert+0x2c>
   4d0a4:	e0bffe17 	ldw	r2,-8(fp)
   4d0a8:	10800217 	ldw	r2,8(r2)
   4d0ac:	1000051e 	bne	r2,zero,4d0c4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4d0b0:	004d0340 	call	4d034 <alt_get_errno>
   4d0b4:	00c00584 	movi	r3,22
   4d0b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4d0bc:	00bffa84 	movi	r2,-22
   4d0c0:	00001306 	br	4d110 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4d0c4:	e0bffe17 	ldw	r2,-8(fp)
   4d0c8:	e0ffff17 	ldw	r3,-4(fp)
   4d0cc:	e0fffc15 	stw	r3,-16(fp)
   4d0d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4d0d4:	e0bffd17 	ldw	r2,-12(fp)
   4d0d8:	e0fffc17 	ldw	r3,-16(fp)
   4d0dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4d0e0:	e0bffc17 	ldw	r2,-16(fp)
   4d0e4:	10c00017 	ldw	r3,0(r2)
   4d0e8:	e0bffd17 	ldw	r2,-12(fp)
   4d0ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4d0f0:	e0bffc17 	ldw	r2,-16(fp)
   4d0f4:	10800017 	ldw	r2,0(r2)
   4d0f8:	e0fffd17 	ldw	r3,-12(fp)
   4d0fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4d100:	e0bffc17 	ldw	r2,-16(fp)
   4d104:	e0fffd17 	ldw	r3,-12(fp)
   4d108:	10c00015 	stw	r3,0(r2)

  return 0;  
   4d10c:	0005883a 	mov	r2,zero
}
   4d110:	e037883a 	mov	sp,fp
   4d114:	dfc00117 	ldw	ra,4(sp)
   4d118:	df000017 	ldw	fp,0(sp)
   4d11c:	dec00204 	addi	sp,sp,8
   4d120:	f800283a 	ret

0004d124 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4d124:	defffd04 	addi	sp,sp,-12
   4d128:	dfc00215 	stw	ra,8(sp)
   4d12c:	df000115 	stw	fp,4(sp)
   4d130:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4d134:	00800174 	movhi	r2,5
   4d138:	10b7a804 	addi	r2,r2,-8544
   4d13c:	e0bfff15 	stw	r2,-4(fp)
   4d140:	00000606 	br	4d15c <_do_ctors+0x38>
        (*ctor) (); 
   4d144:	e0bfff17 	ldw	r2,-4(fp)
   4d148:	10800017 	ldw	r2,0(r2)
   4d14c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4d150:	e0bfff17 	ldw	r2,-4(fp)
   4d154:	10bfff04 	addi	r2,r2,-4
   4d158:	e0bfff15 	stw	r2,-4(fp)
   4d15c:	e0ffff17 	ldw	r3,-4(fp)
   4d160:	00800174 	movhi	r2,5
   4d164:	10b7a904 	addi	r2,r2,-8540
   4d168:	18bff62e 	bgeu	r3,r2,4d144 <_do_ctors+0x20>
        (*ctor) (); 
}
   4d16c:	e037883a 	mov	sp,fp
   4d170:	dfc00117 	ldw	ra,4(sp)
   4d174:	df000017 	ldw	fp,0(sp)
   4d178:	dec00204 	addi	sp,sp,8
   4d17c:	f800283a 	ret

0004d180 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4d180:	defffd04 	addi	sp,sp,-12
   4d184:	dfc00215 	stw	ra,8(sp)
   4d188:	df000115 	stw	fp,4(sp)
   4d18c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d190:	00800174 	movhi	r2,5
   4d194:	10b7a804 	addi	r2,r2,-8544
   4d198:	e0bfff15 	stw	r2,-4(fp)
   4d19c:	00000606 	br	4d1b8 <_do_dtors+0x38>
        (*dtor) (); 
   4d1a0:	e0bfff17 	ldw	r2,-4(fp)
   4d1a4:	10800017 	ldw	r2,0(r2)
   4d1a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d1ac:	e0bfff17 	ldw	r2,-4(fp)
   4d1b0:	10bfff04 	addi	r2,r2,-4
   4d1b4:	e0bfff15 	stw	r2,-4(fp)
   4d1b8:	e0ffff17 	ldw	r3,-4(fp)
   4d1bc:	00800174 	movhi	r2,5
   4d1c0:	10b7a904 	addi	r2,r2,-8540
   4d1c4:	18bff62e 	bgeu	r3,r2,4d1a0 <_do_dtors+0x20>
        (*dtor) (); 
}
   4d1c8:	e037883a 	mov	sp,fp
   4d1cc:	dfc00117 	ldw	ra,4(sp)
   4d1d0:	df000017 	ldw	fp,0(sp)
   4d1d4:	dec00204 	addi	sp,sp,8
   4d1d8:	f800283a 	ret

0004d1dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4d1dc:	defffa04 	addi	sp,sp,-24
   4d1e0:	dfc00515 	stw	ra,20(sp)
   4d1e4:	df000415 	stw	fp,16(sp)
   4d1e8:	df000404 	addi	fp,sp,16
   4d1ec:	e13ffe15 	stw	r4,-8(fp)
   4d1f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4d1f4:	e0bfff17 	ldw	r2,-4(fp)
   4d1f8:	10800017 	ldw	r2,0(r2)
   4d1fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4d200:	e13ffe17 	ldw	r4,-8(fp)
   4d204:	0042b180 	call	42b18 <strlen>
   4d208:	10800044 	addi	r2,r2,1
   4d20c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d210:	00000d06 	br	4d248 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4d214:	e0bffc17 	ldw	r2,-16(fp)
   4d218:	10c00217 	ldw	r3,8(r2)
   4d21c:	e0bffd17 	ldw	r2,-12(fp)
   4d220:	1809883a 	mov	r4,r3
   4d224:	e17ffe17 	ldw	r5,-8(fp)
   4d228:	100d883a 	mov	r6,r2
   4d22c:	004db1c0 	call	4db1c <memcmp>
   4d230:	1000021e 	bne	r2,zero,4d23c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4d234:	e0bffc17 	ldw	r2,-16(fp)
   4d238:	00000706 	br	4d258 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4d23c:	e0bffc17 	ldw	r2,-16(fp)
   4d240:	10800017 	ldw	r2,0(r2)
   4d244:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d248:	e0fffc17 	ldw	r3,-16(fp)
   4d24c:	e0bfff17 	ldw	r2,-4(fp)
   4d250:	18bff01e 	bne	r3,r2,4d214 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4d254:	0005883a 	mov	r2,zero
}
   4d258:	e037883a 	mov	sp,fp
   4d25c:	dfc00117 	ldw	ra,4(sp)
   4d260:	df000017 	ldw	fp,0(sp)
   4d264:	dec00204 	addi	sp,sp,8
   4d268:	f800283a 	ret

0004d26c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4d26c:	defffb04 	addi	sp,sp,-20
   4d270:	dfc00415 	stw	ra,16(sp)
   4d274:	df000315 	stw	fp,12(sp)
   4d278:	df000304 	addi	fp,sp,12
   4d27c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4d280:	00800174 	movhi	r2,5
   4d284:	10bf4d04 	addi	r2,r2,-716
   4d288:	10800017 	ldw	r2,0(r2)
   4d28c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d290:	00003106 	br	4d358 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4d294:	e0bffd17 	ldw	r2,-12(fp)
   4d298:	10800217 	ldw	r2,8(r2)
   4d29c:	1009883a 	mov	r4,r2
   4d2a0:	0042b180 	call	42b18 <strlen>
   4d2a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4d2a8:	e0bffd17 	ldw	r2,-12(fp)
   4d2ac:	10c00217 	ldw	r3,8(r2)
   4d2b0:	e0bffe17 	ldw	r2,-8(fp)
   4d2b4:	10bfffc4 	addi	r2,r2,-1
   4d2b8:	1885883a 	add	r2,r3,r2
   4d2bc:	10800003 	ldbu	r2,0(r2)
   4d2c0:	10803fcc 	andi	r2,r2,255
   4d2c4:	1080201c 	xori	r2,r2,128
   4d2c8:	10bfe004 	addi	r2,r2,-128
   4d2cc:	10800bd8 	cmpnei	r2,r2,47
   4d2d0:	1000031e 	bne	r2,zero,4d2e0 <alt_find_file+0x74>
    {
      len -= 1;
   4d2d4:	e0bffe17 	ldw	r2,-8(fp)
   4d2d8:	10bfffc4 	addi	r2,r2,-1
   4d2dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d2e0:	e0bffe17 	ldw	r2,-8(fp)
   4d2e4:	e0ffff17 	ldw	r3,-4(fp)
   4d2e8:	1885883a 	add	r2,r3,r2
   4d2ec:	10800003 	ldbu	r2,0(r2)
   4d2f0:	10803fcc 	andi	r2,r2,255
   4d2f4:	1080201c 	xori	r2,r2,128
   4d2f8:	10bfe004 	addi	r2,r2,-128
   4d2fc:	10800be0 	cmpeqi	r2,r2,47
   4d300:	1000081e 	bne	r2,zero,4d324 <alt_find_file+0xb8>
   4d304:	e0bffe17 	ldw	r2,-8(fp)
   4d308:	e0ffff17 	ldw	r3,-4(fp)
   4d30c:	1885883a 	add	r2,r3,r2
   4d310:	10800003 	ldbu	r2,0(r2)
   4d314:	10803fcc 	andi	r2,r2,255
   4d318:	1080201c 	xori	r2,r2,128
   4d31c:	10bfe004 	addi	r2,r2,-128
   4d320:	10000a1e 	bne	r2,zero,4d34c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4d324:	e0bffd17 	ldw	r2,-12(fp)
   4d328:	10c00217 	ldw	r3,8(r2)
   4d32c:	e0bffe17 	ldw	r2,-8(fp)
   4d330:	1809883a 	mov	r4,r3
   4d334:	e17fff17 	ldw	r5,-4(fp)
   4d338:	100d883a 	mov	r6,r2
   4d33c:	004db1c0 	call	4db1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d340:	1000021e 	bne	r2,zero,4d34c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4d344:	e0bffd17 	ldw	r2,-12(fp)
   4d348:	00000806 	br	4d36c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4d34c:	e0bffd17 	ldw	r2,-12(fp)
   4d350:	10800017 	ldw	r2,0(r2)
   4d354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d358:	e0fffd17 	ldw	r3,-12(fp)
   4d35c:	00800174 	movhi	r2,5
   4d360:	10bf4d04 	addi	r2,r2,-716
   4d364:	18bfcb1e 	bne	r3,r2,4d294 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4d368:	0005883a 	mov	r2,zero
}
   4d36c:	e037883a 	mov	sp,fp
   4d370:	dfc00117 	ldw	ra,4(sp)
   4d374:	df000017 	ldw	fp,0(sp)
   4d378:	dec00204 	addi	sp,sp,8
   4d37c:	f800283a 	ret

0004d380 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   4d380:	defffc04 	addi	sp,sp,-16
   4d384:	df000315 	stw	fp,12(sp)
   4d388:	df000304 	addi	fp,sp,12
   4d38c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   4d390:	e0bfff17 	ldw	r2,-4(fp)
   4d394:	10800217 	ldw	r2,8(r2)
   4d398:	1000021e 	bne	r2,zero,4d3a4 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   4d39c:	00bffb44 	movi	r2,-19
   4d3a0:	00001406 	br	4d3f4 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   4d3a4:	e0bfff17 	ldw	r2,-4(fp)
   4d3a8:	00c00174 	movhi	r3,5
   4d3ac:	18ff4d04 	addi	r3,r3,-716
   4d3b0:	e0fffd15 	stw	r3,-12(fp)
   4d3b4:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4d3b8:	e0bffe17 	ldw	r2,-8(fp)
   4d3bc:	e0fffd17 	ldw	r3,-12(fp)
   4d3c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4d3c4:	e0bffd17 	ldw	r2,-12(fp)
   4d3c8:	10c00017 	ldw	r3,0(r2)
   4d3cc:	e0bffe17 	ldw	r2,-8(fp)
   4d3d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4d3d4:	e0bffd17 	ldw	r2,-12(fp)
   4d3d8:	10800017 	ldw	r2,0(r2)
   4d3dc:	e0fffe17 	ldw	r3,-8(fp)
   4d3e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4d3e4:	e0bffd17 	ldw	r2,-12(fp)
   4d3e8:	e0fffe17 	ldw	r3,-8(fp)
   4d3ec:	10c00015 	stw	r3,0(r2)

  return 0;
   4d3f0:	0005883a 	mov	r2,zero
} 
   4d3f4:	e037883a 	mov	sp,fp
   4d3f8:	df000017 	ldw	fp,0(sp)
   4d3fc:	dec00104 	addi	sp,sp,4
   4d400:	f800283a 	ret

0004d404 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4d404:	defffa04 	addi	sp,sp,-24
   4d408:	dfc00515 	stw	ra,20(sp)
   4d40c:	df000415 	stw	fp,16(sp)
   4d410:	dc000315 	stw	r16,12(sp)
   4d414:	df000304 	addi	fp,sp,12
   4d418:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4d41c:	00bffa04 	movi	r2,-24
   4d420:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4d424:	e03ffd15 	stw	zero,-12(fp)
   4d428:	00002106 	br	4d4b0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4d42c:	04000174 	movhi	r16,5
   4d430:	843ac604 	addi	r16,r16,-5352
   4d434:	e0bffd17 	ldw	r2,-12(fp)
   4d438:	1009883a 	mov	r4,r2
   4d43c:	01400304 	movi	r5,12
   4d440:	004a4cc0 	call	4a4cc <__mulsi3>
   4d444:	8085883a 	add	r2,r16,r2
   4d448:	10800017 	ldw	r2,0(r2)
   4d44c:	1000151e 	bne	r2,zero,4d4a4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4d450:	04000174 	movhi	r16,5
   4d454:	843ac604 	addi	r16,r16,-5352
   4d458:	e0bffd17 	ldw	r2,-12(fp)
   4d45c:	1009883a 	mov	r4,r2
   4d460:	01400304 	movi	r5,12
   4d464:	004a4cc0 	call	4a4cc <__mulsi3>
   4d468:	8085883a 	add	r2,r16,r2
   4d46c:	e0ffff17 	ldw	r3,-4(fp)
   4d470:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4d474:	00800174 	movhi	r2,5
   4d478:	10bf5104 	addi	r2,r2,-700
   4d47c:	10c00017 	ldw	r3,0(r2)
   4d480:	e0bffd17 	ldw	r2,-12(fp)
   4d484:	1880040e 	bge	r3,r2,4d498 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4d488:	00800174 	movhi	r2,5
   4d48c:	10bf5104 	addi	r2,r2,-700
   4d490:	e0fffd17 	ldw	r3,-12(fp)
   4d494:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4d498:	e0bffd17 	ldw	r2,-12(fp)
   4d49c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4d4a0:	00000606 	br	4d4bc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4d4a4:	e0bffd17 	ldw	r2,-12(fp)
   4d4a8:	10800044 	addi	r2,r2,1
   4d4ac:	e0bffd15 	stw	r2,-12(fp)
   4d4b0:	e0bffd17 	ldw	r2,-12(fp)
   4d4b4:	10800810 	cmplti	r2,r2,32
   4d4b8:	103fdc1e 	bne	r2,zero,4d42c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4d4bc:	e0bffe17 	ldw	r2,-8(fp)
}
   4d4c0:	e037883a 	mov	sp,fp
   4d4c4:	dfc00217 	ldw	ra,8(sp)
   4d4c8:	df000117 	ldw	fp,4(sp)
   4d4cc:	dc000017 	ldw	r16,0(sp)
   4d4d0:	dec00304 	addi	sp,sp,12
   4d4d4:	f800283a 	ret

0004d4d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4d4d8:	deffff04 	addi	sp,sp,-4
   4d4dc:	df000015 	stw	fp,0(sp)
   4d4e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4d4e4:	e037883a 	mov	sp,fp
   4d4e8:	df000017 	ldw	fp,0(sp)
   4d4ec:	dec00104 	addi	sp,sp,4
   4d4f0:	f800283a 	ret

0004d4f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d4f4:	defff904 	addi	sp,sp,-28
   4d4f8:	dfc00615 	stw	ra,24(sp)
   4d4fc:	df000515 	stw	fp,20(sp)
   4d500:	df000504 	addi	fp,sp,20
   4d504:	e13ffc15 	stw	r4,-16(fp)
   4d508:	e17ffd15 	stw	r5,-12(fp)
   4d50c:	e1bffe15 	stw	r6,-8(fp)
   4d510:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4d514:	e0800217 	ldw	r2,8(fp)
   4d518:	d8800015 	stw	r2,0(sp)
   4d51c:	e13ffc17 	ldw	r4,-16(fp)
   4d520:	e17ffd17 	ldw	r5,-12(fp)
   4d524:	e1bffe17 	ldw	r6,-8(fp)
   4d528:	e1ffff17 	ldw	r7,-4(fp)
   4d52c:	004d6cc0 	call	4d6cc <alt_iic_isr_register>
}  
   4d530:	e037883a 	mov	sp,fp
   4d534:	dfc00117 	ldw	ra,4(sp)
   4d538:	df000017 	ldw	fp,0(sp)
   4d53c:	dec00204 	addi	sp,sp,8
   4d540:	f800283a 	ret

0004d544 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4d544:	defff904 	addi	sp,sp,-28
   4d548:	df000615 	stw	fp,24(sp)
   4d54c:	df000604 	addi	fp,sp,24
   4d550:	e13ffe15 	stw	r4,-8(fp)
   4d554:	e17fff15 	stw	r5,-4(fp)
   4d558:	e0bfff17 	ldw	r2,-4(fp)
   4d55c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d560:	0005303a 	rdctl	r2,status
   4d564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d568:	e0fffb17 	ldw	r3,-20(fp)
   4d56c:	00bfff84 	movi	r2,-2
   4d570:	1884703a 	and	r2,r3,r2
   4d574:	1001703a 	wrctl	status,r2
  
  return context;
   4d578:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d57c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4d580:	e0bffa17 	ldw	r2,-24(fp)
   4d584:	00c00044 	movi	r3,1
   4d588:	1884983a 	sll	r2,r3,r2
   4d58c:	1007883a 	mov	r3,r2
   4d590:	00800174 	movhi	r2,5
   4d594:	10864504 	addi	r2,r2,6420
   4d598:	10800017 	ldw	r2,0(r2)
   4d59c:	1886b03a 	or	r3,r3,r2
   4d5a0:	00800174 	movhi	r2,5
   4d5a4:	10864504 	addi	r2,r2,6420
   4d5a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d5ac:	00800174 	movhi	r2,5
   4d5b0:	10864504 	addi	r2,r2,6420
   4d5b4:	10800017 	ldw	r2,0(r2)
   4d5b8:	100170fa 	wrctl	ienable,r2
   4d5bc:	e0bffc17 	ldw	r2,-16(fp)
   4d5c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d5c4:	e0bffd17 	ldw	r2,-12(fp)
   4d5c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d5cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4d5d0:	e037883a 	mov	sp,fp
   4d5d4:	df000017 	ldw	fp,0(sp)
   4d5d8:	dec00104 	addi	sp,sp,4
   4d5dc:	f800283a 	ret

0004d5e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4d5e0:	defff904 	addi	sp,sp,-28
   4d5e4:	df000615 	stw	fp,24(sp)
   4d5e8:	df000604 	addi	fp,sp,24
   4d5ec:	e13ffe15 	stw	r4,-8(fp)
   4d5f0:	e17fff15 	stw	r5,-4(fp)
   4d5f4:	e0bfff17 	ldw	r2,-4(fp)
   4d5f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d5fc:	0005303a 	rdctl	r2,status
   4d600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d604:	e0fffb17 	ldw	r3,-20(fp)
   4d608:	00bfff84 	movi	r2,-2
   4d60c:	1884703a 	and	r2,r3,r2
   4d610:	1001703a 	wrctl	status,r2
  
  return context;
   4d614:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d618:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4d61c:	e0bffa17 	ldw	r2,-24(fp)
   4d620:	00c00044 	movi	r3,1
   4d624:	1884983a 	sll	r2,r3,r2
   4d628:	0084303a 	nor	r2,zero,r2
   4d62c:	1007883a 	mov	r3,r2
   4d630:	00800174 	movhi	r2,5
   4d634:	10864504 	addi	r2,r2,6420
   4d638:	10800017 	ldw	r2,0(r2)
   4d63c:	1886703a 	and	r3,r3,r2
   4d640:	00800174 	movhi	r2,5
   4d644:	10864504 	addi	r2,r2,6420
   4d648:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d64c:	00800174 	movhi	r2,5
   4d650:	10864504 	addi	r2,r2,6420
   4d654:	10800017 	ldw	r2,0(r2)
   4d658:	100170fa 	wrctl	ienable,r2
   4d65c:	e0bffc17 	ldw	r2,-16(fp)
   4d660:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d664:	e0bffd17 	ldw	r2,-12(fp)
   4d668:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d66c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4d670:	e037883a 	mov	sp,fp
   4d674:	df000017 	ldw	fp,0(sp)
   4d678:	dec00104 	addi	sp,sp,4
   4d67c:	f800283a 	ret

0004d680 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4d680:	defffc04 	addi	sp,sp,-16
   4d684:	df000315 	stw	fp,12(sp)
   4d688:	df000304 	addi	fp,sp,12
   4d68c:	e13ffe15 	stw	r4,-8(fp)
   4d690:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4d694:	000530fa 	rdctl	r2,ienable
   4d698:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4d69c:	e0bfff17 	ldw	r2,-4(fp)
   4d6a0:	00c00044 	movi	r3,1
   4d6a4:	1884983a 	sll	r2,r3,r2
   4d6a8:	1007883a 	mov	r3,r2
   4d6ac:	e0bffd17 	ldw	r2,-12(fp)
   4d6b0:	1884703a 	and	r2,r3,r2
   4d6b4:	1004c03a 	cmpne	r2,r2,zero
   4d6b8:	10803fcc 	andi	r2,r2,255
}
   4d6bc:	e037883a 	mov	sp,fp
   4d6c0:	df000017 	ldw	fp,0(sp)
   4d6c4:	dec00104 	addi	sp,sp,4
   4d6c8:	f800283a 	ret

0004d6cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d6cc:	defff504 	addi	sp,sp,-44
   4d6d0:	dfc00a15 	stw	ra,40(sp)
   4d6d4:	df000915 	stw	fp,36(sp)
   4d6d8:	df000904 	addi	fp,sp,36
   4d6dc:	e13ffc15 	stw	r4,-16(fp)
   4d6e0:	e17ffd15 	stw	r5,-12(fp)
   4d6e4:	e1bffe15 	stw	r6,-8(fp)
   4d6e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4d6ec:	00bffa84 	movi	r2,-22
   4d6f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4d6f4:	e0bffd17 	ldw	r2,-12(fp)
   4d6f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4d6fc:	e0bff817 	ldw	r2,-32(fp)
   4d700:	10800808 	cmpgei	r2,r2,32
   4d704:	1000271e 	bne	r2,zero,4d7a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d708:	0005303a 	rdctl	r2,status
   4d70c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d710:	e0fffa17 	ldw	r3,-24(fp)
   4d714:	00bfff84 	movi	r2,-2
   4d718:	1884703a 	and	r2,r3,r2
   4d71c:	1001703a 	wrctl	status,r2
  
  return context;
   4d720:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4d724:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4d728:	00c00174 	movhi	r3,5
   4d72c:	18c65204 	addi	r3,r3,6472
   4d730:	e0bff817 	ldw	r2,-32(fp)
   4d734:	100490fa 	slli	r2,r2,3
   4d738:	1885883a 	add	r2,r3,r2
   4d73c:	e0fffe17 	ldw	r3,-8(fp)
   4d740:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4d744:	00c00174 	movhi	r3,5
   4d748:	18c65204 	addi	r3,r3,6472
   4d74c:	e0bff817 	ldw	r2,-32(fp)
   4d750:	100490fa 	slli	r2,r2,3
   4d754:	1885883a 	add	r2,r3,r2
   4d758:	10800104 	addi	r2,r2,4
   4d75c:	e0ffff17 	ldw	r3,-4(fp)
   4d760:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4d764:	e0bffe17 	ldw	r2,-8(fp)
   4d768:	10000526 	beq	r2,zero,4d780 <alt_iic_isr_register+0xb4>
   4d76c:	e0bff817 	ldw	r2,-32(fp)
   4d770:	e13ffc17 	ldw	r4,-16(fp)
   4d774:	100b883a 	mov	r5,r2
   4d778:	004d5440 	call	4d544 <alt_ic_irq_enable>
   4d77c:	00000406 	br	4d790 <alt_iic_isr_register+0xc4>
   4d780:	e0bff817 	ldw	r2,-32(fp)
   4d784:	e13ffc17 	ldw	r4,-16(fp)
   4d788:	100b883a 	mov	r5,r2
   4d78c:	004d5e00 	call	4d5e0 <alt_ic_irq_disable>
   4d790:	e0bff715 	stw	r2,-36(fp)
   4d794:	e0bff917 	ldw	r2,-28(fp)
   4d798:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d79c:	e0bffb17 	ldw	r2,-20(fp)
   4d7a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4d7a4:	e0bff717 	ldw	r2,-36(fp)
}
   4d7a8:	e037883a 	mov	sp,fp
   4d7ac:	dfc00117 	ldw	ra,4(sp)
   4d7b0:	df000017 	ldw	fp,0(sp)
   4d7b4:	dec00204 	addi	sp,sp,8
   4d7b8:	f800283a 	ret

0004d7bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4d7bc:	defff804 	addi	sp,sp,-32
   4d7c0:	dfc00715 	stw	ra,28(sp)
   4d7c4:	df000615 	stw	fp,24(sp)
   4d7c8:	dc000515 	stw	r16,20(sp)
   4d7cc:	df000504 	addi	fp,sp,20
   4d7d0:	e13ffc15 	stw	r4,-16(fp)
   4d7d4:	e17ffd15 	stw	r5,-12(fp)
   4d7d8:	e1bffe15 	stw	r6,-8(fp)
   4d7dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4d7e0:	e13ffd17 	ldw	r4,-12(fp)
   4d7e4:	e17ffe17 	ldw	r5,-8(fp)
   4d7e8:	e1bfff17 	ldw	r6,-4(fp)
   4d7ec:	004b2740 	call	4b274 <open>
   4d7f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4d7f4:	e0bffb17 	ldw	r2,-20(fp)
   4d7f8:	10002216 	blt	r2,zero,4d884 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4d7fc:	04000174 	movhi	r16,5
   4d800:	843ac604 	addi	r16,r16,-5352
   4d804:	e0bffb17 	ldw	r2,-20(fp)
   4d808:	1009883a 	mov	r4,r2
   4d80c:	01400304 	movi	r5,12
   4d810:	004a4cc0 	call	4a4cc <__mulsi3>
   4d814:	8085883a 	add	r2,r16,r2
   4d818:	10c00017 	ldw	r3,0(r2)
   4d81c:	e0bffc17 	ldw	r2,-16(fp)
   4d820:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4d824:	04000174 	movhi	r16,5
   4d828:	843ac604 	addi	r16,r16,-5352
   4d82c:	e0bffb17 	ldw	r2,-20(fp)
   4d830:	1009883a 	mov	r4,r2
   4d834:	01400304 	movi	r5,12
   4d838:	004a4cc0 	call	4a4cc <__mulsi3>
   4d83c:	8085883a 	add	r2,r16,r2
   4d840:	10800104 	addi	r2,r2,4
   4d844:	10c00017 	ldw	r3,0(r2)
   4d848:	e0bffc17 	ldw	r2,-16(fp)
   4d84c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4d850:	04000174 	movhi	r16,5
   4d854:	843ac604 	addi	r16,r16,-5352
   4d858:	e0bffb17 	ldw	r2,-20(fp)
   4d85c:	1009883a 	mov	r4,r2
   4d860:	01400304 	movi	r5,12
   4d864:	004a4cc0 	call	4a4cc <__mulsi3>
   4d868:	8085883a 	add	r2,r16,r2
   4d86c:	10800204 	addi	r2,r2,8
   4d870:	10c00017 	ldw	r3,0(r2)
   4d874:	e0bffc17 	ldw	r2,-16(fp)
   4d878:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4d87c:	e13ffb17 	ldw	r4,-20(fp)
   4d880:	004b5100 	call	4b510 <alt_release_fd>
  }
} 
   4d884:	e037883a 	mov	sp,fp
   4d888:	dfc00217 	ldw	ra,8(sp)
   4d88c:	df000117 	ldw	fp,4(sp)
   4d890:	dc000017 	ldw	r16,0(sp)
   4d894:	dec00304 	addi	sp,sp,12
   4d898:	f800283a 	ret

0004d89c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4d89c:	defffb04 	addi	sp,sp,-20
   4d8a0:	dfc00415 	stw	ra,16(sp)
   4d8a4:	df000315 	stw	fp,12(sp)
   4d8a8:	df000304 	addi	fp,sp,12
   4d8ac:	e13ffd15 	stw	r4,-12(fp)
   4d8b0:	e17ffe15 	stw	r5,-8(fp)
   4d8b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4d8b8:	01000174 	movhi	r4,5
   4d8bc:	213ac904 	addi	r4,r4,-5340
   4d8c0:	e17ffd17 	ldw	r5,-12(fp)
   4d8c4:	01800044 	movi	r6,1
   4d8c8:	01c07fc4 	movi	r7,511
   4d8cc:	004d7bc0 	call	4d7bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4d8d0:	01000174 	movhi	r4,5
   4d8d4:	213ac604 	addi	r4,r4,-5352
   4d8d8:	e17ffe17 	ldw	r5,-8(fp)
   4d8dc:	000d883a 	mov	r6,zero
   4d8e0:	01c07fc4 	movi	r7,511
   4d8e4:	004d7bc0 	call	4d7bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4d8e8:	01000174 	movhi	r4,5
   4d8ec:	213acc04 	addi	r4,r4,-5328
   4d8f0:	e17fff17 	ldw	r5,-4(fp)
   4d8f4:	01800044 	movi	r6,1
   4d8f8:	01c07fc4 	movi	r7,511
   4d8fc:	004d7bc0 	call	4d7bc <alt_open_fd>
}  
   4d900:	e037883a 	mov	sp,fp
   4d904:	dfc00117 	ldw	ra,4(sp)
   4d908:	df000017 	ldw	fp,0(sp)
   4d90c:	dec00204 	addi	sp,sp,8
   4d910:	f800283a 	ret

0004d914 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4d914:	defffa04 	addi	sp,sp,-24
   4d918:	df000515 	stw	fp,20(sp)
   4d91c:	df000504 	addi	fp,sp,20
   4d920:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d924:	0005303a 	rdctl	r2,status
   4d928:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d92c:	e0fffc17 	ldw	r3,-16(fp)
   4d930:	00bfff84 	movi	r2,-2
   4d934:	1884703a 	and	r2,r3,r2
   4d938:	1001703a 	wrctl	status,r2
  
  return context;
   4d93c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4d940:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4d944:	e0bfff17 	ldw	r2,-4(fp)
   4d948:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4d94c:	e0bffd17 	ldw	r2,-12(fp)
   4d950:	10800017 	ldw	r2,0(r2)
   4d954:	e0fffd17 	ldw	r3,-12(fp)
   4d958:	18c00117 	ldw	r3,4(r3)
   4d95c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4d960:	e0bffd17 	ldw	r2,-12(fp)
   4d964:	10800117 	ldw	r2,4(r2)
   4d968:	e0fffd17 	ldw	r3,-12(fp)
   4d96c:	18c00017 	ldw	r3,0(r3)
   4d970:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4d974:	e0bffd17 	ldw	r2,-12(fp)
   4d978:	e0fffd17 	ldw	r3,-12(fp)
   4d97c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4d980:	e0bffd17 	ldw	r2,-12(fp)
   4d984:	e0fffd17 	ldw	r3,-12(fp)
   4d988:	10c00015 	stw	r3,0(r2)
   4d98c:	e0bffb17 	ldw	r2,-20(fp)
   4d990:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d994:	e0bffe17 	ldw	r2,-8(fp)
   4d998:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4d99c:	e037883a 	mov	sp,fp
   4d9a0:	df000017 	ldw	fp,0(sp)
   4d9a4:	dec00104 	addi	sp,sp,4
   4d9a8:	f800283a 	ret

0004d9ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4d9ac:	defffb04 	addi	sp,sp,-20
   4d9b0:	dfc00415 	stw	ra,16(sp)
   4d9b4:	df000315 	stw	fp,12(sp)
   4d9b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4d9bc:	d0a01f17 	ldw	r2,-32644(gp)
   4d9c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4d9c4:	d0a6ff17 	ldw	r2,-25604(gp)
   4d9c8:	10800044 	addi	r2,r2,1
   4d9cc:	d0a6ff15 	stw	r2,-25604(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4d9d0:	00002e06 	br	4da8c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4d9d4:	e0bffd17 	ldw	r2,-12(fp)
   4d9d8:	10800017 	ldw	r2,0(r2)
   4d9dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4d9e0:	e0bffd17 	ldw	r2,-12(fp)
   4d9e4:	10800403 	ldbu	r2,16(r2)
   4d9e8:	10803fcc 	andi	r2,r2,255
   4d9ec:	10000426 	beq	r2,zero,4da00 <alt_tick+0x54>
   4d9f0:	d0a6ff17 	ldw	r2,-25604(gp)
   4d9f4:	1000021e 	bne	r2,zero,4da00 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4d9f8:	e0bffd17 	ldw	r2,-12(fp)
   4d9fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4da00:	e0bffd17 	ldw	r2,-12(fp)
   4da04:	10800217 	ldw	r2,8(r2)
   4da08:	d0e6ff17 	ldw	r3,-25604(gp)
   4da0c:	18801d36 	bltu	r3,r2,4da84 <alt_tick+0xd8>
   4da10:	e0bffd17 	ldw	r2,-12(fp)
   4da14:	10800403 	ldbu	r2,16(r2)
   4da18:	10803fcc 	andi	r2,r2,255
   4da1c:	1000191e 	bne	r2,zero,4da84 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4da20:	e0bffd17 	ldw	r2,-12(fp)
   4da24:	10c00317 	ldw	r3,12(r2)
   4da28:	e0bffd17 	ldw	r2,-12(fp)
   4da2c:	10800517 	ldw	r2,20(r2)
   4da30:	1009883a 	mov	r4,r2
   4da34:	183ee83a 	callr	r3
   4da38:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4da3c:	e0bfff17 	ldw	r2,-4(fp)
   4da40:	1000031e 	bne	r2,zero,4da50 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4da44:	e13ffd17 	ldw	r4,-12(fp)
   4da48:	004d9140 	call	4d914 <alt_alarm_stop>
   4da4c:	00000d06 	br	4da84 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4da50:	e0bffd17 	ldw	r2,-12(fp)
   4da54:	10c00217 	ldw	r3,8(r2)
   4da58:	e0bfff17 	ldw	r2,-4(fp)
   4da5c:	1887883a 	add	r3,r3,r2
   4da60:	e0bffd17 	ldw	r2,-12(fp)
   4da64:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4da68:	e0bffd17 	ldw	r2,-12(fp)
   4da6c:	10c00217 	ldw	r3,8(r2)
   4da70:	d0a6ff17 	ldw	r2,-25604(gp)
   4da74:	1880032e 	bgeu	r3,r2,4da84 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4da78:	e0bffd17 	ldw	r2,-12(fp)
   4da7c:	00c00044 	movi	r3,1
   4da80:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4da84:	e0bffe17 	ldw	r2,-8(fp)
   4da88:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4da8c:	e0fffd17 	ldw	r3,-12(fp)
   4da90:	d0a01f04 	addi	r2,gp,-32644
   4da94:	18bfcf1e 	bne	r3,r2,4d9d4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4da98:	0001883a 	nop
}
   4da9c:	e037883a 	mov	sp,fp
   4daa0:	dfc00117 	ldw	ra,4(sp)
   4daa4:	df000017 	ldw	fp,0(sp)
   4daa8:	dec00204 	addi	sp,sp,8
   4daac:	f800283a 	ret

0004dab0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4dab0:	deffff04 	addi	sp,sp,-4
   4dab4:	df000015 	stw	fp,0(sp)
   4dab8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4dabc:	000170fa 	wrctl	ienable,zero
}
   4dac0:	e037883a 	mov	sp,fp
   4dac4:	df000017 	ldw	fp,0(sp)
   4dac8:	dec00104 	addi	sp,sp,4
   4dacc:	f800283a 	ret

0004dad0 <atexit>:
   4dad0:	200b883a 	mov	r5,r4
   4dad4:	000d883a 	mov	r6,zero
   4dad8:	0009883a 	mov	r4,zero
   4dadc:	000f883a 	mov	r7,zero
   4dae0:	004db981 	jmpi	4db98 <__register_exitproc>

0004dae4 <exit>:
   4dae4:	defffe04 	addi	sp,sp,-8
   4dae8:	000b883a 	mov	r5,zero
   4daec:	dc000015 	stw	r16,0(sp)
   4daf0:	dfc00115 	stw	ra,4(sp)
   4daf4:	2021883a 	mov	r16,r4
   4daf8:	004dcc80 	call	4dcc8 <__call_exitprocs>
   4dafc:	00800174 	movhi	r2,5
   4db00:	10bf4804 	addi	r2,r2,-736
   4db04:	11000017 	ldw	r4,0(r2)
   4db08:	20800f17 	ldw	r2,60(r4)
   4db0c:	10000126 	beq	r2,zero,4db14 <exit+0x30>
   4db10:	103ee83a 	callr	r2
   4db14:	8009883a 	mov	r4,r16
   4db18:	004de680 	call	4de68 <_exit>

0004db1c <memcmp>:
   4db1c:	01c000c4 	movi	r7,3
   4db20:	3980192e 	bgeu	r7,r6,4db88 <memcmp+0x6c>
   4db24:	2904b03a 	or	r2,r5,r4
   4db28:	11c4703a 	and	r2,r2,r7
   4db2c:	10000f26 	beq	r2,zero,4db6c <memcmp+0x50>
   4db30:	20c00003 	ldbu	r3,0(r4)
   4db34:	28800003 	ldbu	r2,0(r5)
   4db38:	1880151e 	bne	r3,r2,4db90 <memcmp+0x74>
   4db3c:	31bfff84 	addi	r6,r6,-2
   4db40:	01ffffc4 	movi	r7,-1
   4db44:	00000406 	br	4db58 <memcmp+0x3c>
   4db48:	20c00003 	ldbu	r3,0(r4)
   4db4c:	28800003 	ldbu	r2,0(r5)
   4db50:	31bfffc4 	addi	r6,r6,-1
   4db54:	18800e1e 	bne	r3,r2,4db90 <memcmp+0x74>
   4db58:	21000044 	addi	r4,r4,1
   4db5c:	29400044 	addi	r5,r5,1
   4db60:	31fff91e 	bne	r6,r7,4db48 <memcmp+0x2c>
   4db64:	0005883a 	mov	r2,zero
   4db68:	f800283a 	ret
   4db6c:	20c00017 	ldw	r3,0(r4)
   4db70:	28800017 	ldw	r2,0(r5)
   4db74:	1880041e 	bne	r3,r2,4db88 <memcmp+0x6c>
   4db78:	31bfff04 	addi	r6,r6,-4
   4db7c:	21000104 	addi	r4,r4,4
   4db80:	29400104 	addi	r5,r5,4
   4db84:	39bff936 	bltu	r7,r6,4db6c <memcmp+0x50>
   4db88:	303fe91e 	bne	r6,zero,4db30 <memcmp+0x14>
   4db8c:	003ff506 	br	4db64 <memcmp+0x48>
   4db90:	1885c83a 	sub	r2,r3,r2
   4db94:	f800283a 	ret

0004db98 <__register_exitproc>:
   4db98:	defffa04 	addi	sp,sp,-24
   4db9c:	00800174 	movhi	r2,5
   4dba0:	10bf4804 	addi	r2,r2,-736
   4dba4:	dc000315 	stw	r16,12(sp)
   4dba8:	14000017 	ldw	r16,0(r2)
   4dbac:	dc400415 	stw	r17,16(sp)
   4dbb0:	dfc00515 	stw	ra,20(sp)
   4dbb4:	80805217 	ldw	r2,328(r16)
   4dbb8:	2023883a 	mov	r17,r4
   4dbbc:	10003e26 	beq	r2,zero,4dcb8 <__register_exitproc+0x120>
   4dbc0:	10c00117 	ldw	r3,4(r2)
   4dbc4:	020007c4 	movi	r8,31
   4dbc8:	40c0180e 	bge	r8,r3,4dc2c <__register_exitproc+0x94>
   4dbcc:	00800034 	movhi	r2,0
   4dbd0:	10800004 	addi	r2,r2,0
   4dbd4:	1000061e 	bne	r2,zero,4dbf0 <__register_exitproc+0x58>
   4dbd8:	00bfffc4 	movi	r2,-1
   4dbdc:	dfc00517 	ldw	ra,20(sp)
   4dbe0:	dc400417 	ldw	r17,16(sp)
   4dbe4:	dc000317 	ldw	r16,12(sp)
   4dbe8:	dec00604 	addi	sp,sp,24
   4dbec:	f800283a 	ret
   4dbf0:	01006404 	movi	r4,400
   4dbf4:	d9400015 	stw	r5,0(sp)
   4dbf8:	d9800115 	stw	r6,4(sp)
   4dbfc:	d9c00215 	stw	r7,8(sp)
   4dc00:	00000000 	call	0 <__alt_mem_onchip_mem_1f-0x40000>
   4dc04:	d9400017 	ldw	r5,0(sp)
   4dc08:	d9800117 	ldw	r6,4(sp)
   4dc0c:	d9c00217 	ldw	r7,8(sp)
   4dc10:	103ff126 	beq	r2,zero,4dbd8 <__register_exitproc+0x40>
   4dc14:	80c05217 	ldw	r3,328(r16)
   4dc18:	10000115 	stw	zero,4(r2)
   4dc1c:	10c00015 	stw	r3,0(r2)
   4dc20:	80805215 	stw	r2,328(r16)
   4dc24:	10006215 	stw	zero,392(r2)
   4dc28:	10006315 	stw	zero,396(r2)
   4dc2c:	10c00117 	ldw	r3,4(r2)
   4dc30:	88000d1e 	bne	r17,zero,4dc68 <__register_exitproc+0xd0>
   4dc34:	19000084 	addi	r4,r3,2
   4dc38:	2109883a 	add	r4,r4,r4
   4dc3c:	18c00044 	addi	r3,r3,1
   4dc40:	2109883a 	add	r4,r4,r4
   4dc44:	1109883a 	add	r4,r2,r4
   4dc48:	10c00115 	stw	r3,4(r2)
   4dc4c:	0005883a 	mov	r2,zero
   4dc50:	21400015 	stw	r5,0(r4)
   4dc54:	dfc00517 	ldw	ra,20(sp)
   4dc58:	dc400417 	ldw	r17,16(sp)
   4dc5c:	dc000317 	ldw	r16,12(sp)
   4dc60:	dec00604 	addi	sp,sp,24
   4dc64:	f800283a 	ret
   4dc68:	02400044 	movi	r9,1
   4dc6c:	12806217 	ldw	r10,392(r2)
   4dc70:	48d2983a 	sll	r9,r9,r3
   4dc74:	19000804 	addi	r4,r3,32
   4dc78:	18d1883a 	add	r8,r3,r3
   4dc7c:	2109883a 	add	r4,r4,r4
   4dc80:	4211883a 	add	r8,r8,r8
   4dc84:	2109883a 	add	r4,r4,r4
   4dc88:	1109883a 	add	r4,r2,r4
   4dc8c:	1211883a 	add	r8,r2,r8
   4dc90:	5254b03a 	or	r10,r10,r9
   4dc94:	21c02215 	stw	r7,136(r4)
   4dc98:	41802215 	stw	r6,136(r8)
   4dc9c:	12806215 	stw	r10,392(r2)
   4dca0:	01000084 	movi	r4,2
   4dca4:	893fe31e 	bne	r17,r4,4dc34 <__register_exitproc+0x9c>
   4dca8:	11006317 	ldw	r4,396(r2)
   4dcac:	2252b03a 	or	r9,r4,r9
   4dcb0:	12406315 	stw	r9,396(r2)
   4dcb4:	003fdf06 	br	4dc34 <__register_exitproc+0x9c>
   4dcb8:	00800174 	movhi	r2,5
   4dcbc:	10869204 	addi	r2,r2,6728
   4dcc0:	80805215 	stw	r2,328(r16)
   4dcc4:	003fbe06 	br	4dbc0 <__register_exitproc+0x28>

0004dcc8 <__call_exitprocs>:
   4dcc8:	00800174 	movhi	r2,5
   4dccc:	10bf4804 	addi	r2,r2,-736
   4dcd0:	10800017 	ldw	r2,0(r2)
   4dcd4:	defff304 	addi	sp,sp,-52
   4dcd8:	df000b15 	stw	fp,44(sp)
   4dcdc:	d8800015 	stw	r2,0(sp)
   4dce0:	10805204 	addi	r2,r2,328
   4dce4:	dd400815 	stw	r21,32(sp)
   4dce8:	dfc00c15 	stw	ra,48(sp)
   4dcec:	ddc00a15 	stw	r23,40(sp)
   4dcf0:	dd800915 	stw	r22,36(sp)
   4dcf4:	dd000715 	stw	r20,28(sp)
   4dcf8:	dcc00615 	stw	r19,24(sp)
   4dcfc:	dc800515 	stw	r18,20(sp)
   4dd00:	dc400415 	stw	r17,16(sp)
   4dd04:	dc000315 	stw	r16,12(sp)
   4dd08:	d9000115 	stw	r4,4(sp)
   4dd0c:	2839883a 	mov	fp,r5
   4dd10:	d8800215 	stw	r2,8(sp)
   4dd14:	057fffc4 	movi	r21,-1
   4dd18:	d8800017 	ldw	r2,0(sp)
   4dd1c:	ddc00217 	ldw	r23,8(sp)
   4dd20:	14805217 	ldw	r18,328(r2)
   4dd24:	90001726 	beq	r18,zero,4dd84 <__call_exitprocs+0xbc>
   4dd28:	94400117 	ldw	r17,4(r18)
   4dd2c:	8c3fffc4 	addi	r16,r17,-1
   4dd30:	80001116 	blt	r16,zero,4dd78 <__call_exitprocs+0xb0>
   4dd34:	8c400044 	addi	r17,r17,1
   4dd38:	8427883a 	add	r19,r16,r16
   4dd3c:	8c63883a 	add	r17,r17,r17
   4dd40:	95802204 	addi	r22,r18,136
   4dd44:	9ce7883a 	add	r19,r19,r19
   4dd48:	8c63883a 	add	r17,r17,r17
   4dd4c:	b4e7883a 	add	r19,r22,r19
   4dd50:	9463883a 	add	r17,r18,r17
   4dd54:	e0001726 	beq	fp,zero,4ddb4 <__call_exitprocs+0xec>
   4dd58:	8c87c83a 	sub	r3,r17,r18
   4dd5c:	b0c7883a 	add	r3,r22,r3
   4dd60:	18c01e17 	ldw	r3,120(r3)
   4dd64:	1f001326 	beq	r3,fp,4ddb4 <__call_exitprocs+0xec>
   4dd68:	843fffc4 	addi	r16,r16,-1
   4dd6c:	9cffff04 	addi	r19,r19,-4
   4dd70:	8c7fff04 	addi	r17,r17,-4
   4dd74:	857ff71e 	bne	r16,r21,4dd54 <__call_exitprocs+0x8c>
   4dd78:	00800034 	movhi	r2,0
   4dd7c:	10800004 	addi	r2,r2,0
   4dd80:	10002a1e 	bne	r2,zero,4de2c <__call_exitprocs+0x164>
   4dd84:	dfc00c17 	ldw	ra,48(sp)
   4dd88:	df000b17 	ldw	fp,44(sp)
   4dd8c:	ddc00a17 	ldw	r23,40(sp)
   4dd90:	dd800917 	ldw	r22,36(sp)
   4dd94:	dd400817 	ldw	r21,32(sp)
   4dd98:	dd000717 	ldw	r20,28(sp)
   4dd9c:	dcc00617 	ldw	r19,24(sp)
   4dda0:	dc800517 	ldw	r18,20(sp)
   4dda4:	dc400417 	ldw	r17,16(sp)
   4dda8:	dc000317 	ldw	r16,12(sp)
   4ddac:	dec00d04 	addi	sp,sp,52
   4ddb0:	f800283a 	ret
   4ddb4:	91000117 	ldw	r4,4(r18)
   4ddb8:	88c00017 	ldw	r3,0(r17)
   4ddbc:	213fffc4 	addi	r4,r4,-1
   4ddc0:	24001526 	beq	r4,r16,4de18 <__call_exitprocs+0x150>
   4ddc4:	88000015 	stw	zero,0(r17)
   4ddc8:	183fe726 	beq	r3,zero,4dd68 <__call_exitprocs+0xa0>
   4ddcc:	00800044 	movi	r2,1
   4ddd0:	1408983a 	sll	r4,r2,r16
   4ddd4:	91406217 	ldw	r5,392(r18)
   4ddd8:	95000117 	ldw	r20,4(r18)
   4dddc:	214a703a 	and	r5,r4,r5
   4dde0:	28000b26 	beq	r5,zero,4de10 <__call_exitprocs+0x148>
   4dde4:	91406317 	ldw	r5,396(r18)
   4dde8:	2148703a 	and	r4,r4,r5
   4ddec:	20000c1e 	bne	r4,zero,4de20 <__call_exitprocs+0x158>
   4ddf0:	99400017 	ldw	r5,0(r19)
   4ddf4:	d9000117 	ldw	r4,4(sp)
   4ddf8:	183ee83a 	callr	r3
   4ddfc:	90c00117 	ldw	r3,4(r18)
   4de00:	1d3fc51e 	bne	r3,r20,4dd18 <__call_exitprocs+0x50>
   4de04:	b8c00017 	ldw	r3,0(r23)
   4de08:	1cbfd726 	beq	r3,r18,4dd68 <__call_exitprocs+0xa0>
   4de0c:	003fc206 	br	4dd18 <__call_exitprocs+0x50>
   4de10:	183ee83a 	callr	r3
   4de14:	003ff906 	br	4ddfc <__call_exitprocs+0x134>
   4de18:	94000115 	stw	r16,4(r18)
   4de1c:	003fea06 	br	4ddc8 <__call_exitprocs+0x100>
   4de20:	99000017 	ldw	r4,0(r19)
   4de24:	183ee83a 	callr	r3
   4de28:	003ff406 	br	4ddfc <__call_exitprocs+0x134>
   4de2c:	90c00117 	ldw	r3,4(r18)
   4de30:	1800071e 	bne	r3,zero,4de50 <__call_exitprocs+0x188>
   4de34:	90c00017 	ldw	r3,0(r18)
   4de38:	18000926 	beq	r3,zero,4de60 <__call_exitprocs+0x198>
   4de3c:	9009883a 	mov	r4,r18
   4de40:	b8c00015 	stw	r3,0(r23)
   4de44:	00000000 	call	0 <__alt_mem_onchip_mem_1f-0x40000>
   4de48:	bc800017 	ldw	r18,0(r23)
   4de4c:	003fb506 	br	4dd24 <__call_exitprocs+0x5c>
   4de50:	90c00017 	ldw	r3,0(r18)
   4de54:	902f883a 	mov	r23,r18
   4de58:	1825883a 	mov	r18,r3
   4de5c:	003fb106 	br	4dd24 <__call_exitprocs+0x5c>
   4de60:	0007883a 	mov	r3,zero
   4de64:	003ffb06 	br	4de54 <__call_exitprocs+0x18c>

0004de68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4de68:	defffc04 	addi	sp,sp,-16
   4de6c:	df000315 	stw	fp,12(sp)
   4de70:	df000304 	addi	fp,sp,12
   4de74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4de78:	0001883a 	nop
   4de7c:	e0bfff17 	ldw	r2,-4(fp)
   4de80:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4de84:	e0bffd17 	ldw	r2,-12(fp)
   4de88:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4de8c:	e0bffe17 	ldw	r2,-8(fp)
   4de90:	10000226 	beq	r2,zero,4de9c <_exit+0x34>
    ALT_SIM_FAIL();
   4de94:	002af070 	cmpltui	zero,zero,43969
   4de98:	00000106 	br	4dea0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4de9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4dea0:	003fff06 	br	4dea0 <_exit+0x38>

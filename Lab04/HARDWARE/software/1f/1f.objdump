
1f.elf:     file format elf32-littlenios2
1f.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000119d4 memsz 0x000119d4 flags r-x
    LOAD off    0x000129f4 vaddr 0x000519f4 paddr 0x000535c8 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x0001519c vaddr 0x0005519c paddr 0x0005519c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011468  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d4  00051620  00051620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  000519f4  000535c8  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0005519c  0005519c  0001519c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem_1f 00000000  00055300  00055300  000145c8  2**0
                  CONTENTS
  7 .comment      00000046  00000000  00000000  000145c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001128  00000000  00000000  00014610  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c6dd  00000000  00000000  00015738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000addf  00000000  00000000  00041e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d6d2  00000000  00000000  0004cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024a0  00000000  00000000  0005a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003cdb  00000000  00000000  0005c768  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000197ff  00000000  00000000  00060443  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00079c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a68  00000000  00000000  00079c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007f0e5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0007f0e8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007f0ee  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007f0ef  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007f0f0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007f0f4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007f0f8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000c  00000000  00000000  0007f0fc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000c  00000000  00000000  0007f108  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000c  00000000  00000000  0007f114  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0007f120  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  0007f129  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     001c11da  00000000  00000000  0007f145  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
00051620 l    d  .rodata	00000000 .rodata
000519f4 l    d  .rwdata	00000000 .rwdata
0005519c l    d  .bss	00000000 .bss
00055300 l    d  .onchip_mem_1f	00000000 .onchip_mem_1f
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1f_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004173c l     F .text	00000008 __fp_unlock
00041750 l     F .text	0000019c __sinit.part.1
000418ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00051a6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00043574 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00051832 l     O .rodata	00000010 zeroes.4404
00045da0 l     F .text	000000bc __sbprintf
00051842 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000461bc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000522b8 l     O .rwdata	00000020 lc_ctype_charset
00052298 l     O .rwdata	00000020 lc_message_charset
000522d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00051870 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00049cc4 l     F .text	000000fc __sprint_r.part.0
00051994 l     O .rodata	00000010 zeroes.4349
0004b300 l     F .text	000000bc __sbprintf
000519a4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004e210 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004e32c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004e358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e54c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004e638 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004e814 l     F .text	00000050 alt_get_errno
0004e864 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004eaac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00053570 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0004ed20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0004edf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004ef34 l     F .text	00000038 alt_dev_reg
000524b8 l     O .rwdata	00001060 jtag_uart_1f
00053518 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004f728 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004f92c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004ff68 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
000535b0 l     O .rwdata	00000004 hcinfo.2311
000535a4 l     O .rwdata	00000004 hcinfo.2324
00053598 l     O .rwdata	00000004 hcinfo.2333
0005358c l     O .rwdata	00000004 hcinfo.2346
00053580 l     O .rwdata	00000004 hcinfo.2359
00053574 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000507e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00050f70 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049438 g     F .text	00000074 _mprec_log10
00049524 g     F .text	0000008c __any_on
00047fe0 g     F .text	00000054 _isatty_r
0005187c g     O .rodata	00000028 __mprec_tinytens
0004e75c g     F .text	00000078 alt_main
00043978 g     F .text	00000090 strcpy
000434a0 g     F .text	000000c0 _puts_r
00055200 g     O .bss	00000100 alt_irq
00051a48 g     O .rwdata	0000000c q1c
00048110 g     F .text	00000060 _lseek_r
0004f294 g     F .text	00000058 altera_avalon_fifo_write_almostfull
000535c8 g       *ABS*	00000000 __flash_rwdata_start
00047a6c g     F .text	000000ac __sflags
0004ccf4 g     F .text	00000088 .hidden __eqdf2
00055300 g       *ABS*	00000000 __alt_heap_start
000432fc g     F .text	0000003c printf
0004b6a0 g     F .text	0000009c _wcrtomb_r
00043890 g     F .text	0000005c __sseek
00041a9c g     F .text	00000010 __sinit
00045e5c g     F .text	00000140 __swbuf_r
00048034 g     F .text	0000007c _setlocale_r
000418f4 g     F .text	00000078 __sfmoreglue
00051a24 g     O .rwdata	0000000c q5
0004e7f4 g     F .text	00000020 __malloc_unlock
00050064 g     F .text	0000016c alt_hostfs_open
0004839c g     F .text	0000015c memmove
0004f014 g     F .text	00000098 altera_avalon_fifo_init
00041a84 g     F .text	00000018 _cleanup
0004f344 g     F .text	00000058 altera_avalon_fifo_write_fifo
000484f8 g     F .text	000000a8 _Balloc
0004cd7c g     F .text	000000dc .hidden __gtdf2
00040000 g     F .entry	0000000c __reset
0004ed70 g     F .text	00000084 times
0004f4dc g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042598 g     F .text	0000005c _fstat_r
000551a4 g     O .bss	00000004 errno
0004380c g     F .text	00000008 __seofread
000551c4 g     O .bss	00000004 alt_argv
0005b540 g       *ABS*	00000000 _gp
0004f1e0 g     F .text	0000005c altera_avalon_fifo_clear_event
00052338 g     O .rwdata	00000180 alt_fd_list
000503ac g     F .text	000000b8 alt_hostfs_seek
00050990 g     F .text	00000090 alt_find_dev
00048254 g     F .text	00000148 memcpy
00043aa0 g     F .text	00000008 _times_r
00041744 g     F .text	0000000c _cleanup_r
0004e134 g     F .text	000000dc .hidden __floatsidf
00050b34 g     F .text	00000084 alt_fs_reg
00051050 g     F .text	00000078 alt_io_redirect
0004ce58 g     F .text	000000f4 .hidden __ltdf2
00051620 g       *ABS*	00000000 __DTOR_END__
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem_1f
00043560 g     F .text	00000014 puts
00051a00 g     O .rwdata	0000000c q2
00049b74 g     F .text	00000074 __fpclassifyd
00049394 g     F .text	000000a4 __ratio
0004b2e4 g     F .text	0000001c __vfiprintf_internal
0004fb2c g     F .text	00000218 altera_avalon_jtag_uart_read
000432cc g     F .text	00000030 _printf_r
00041260 g     F .text	00000064 .hidden __udivsi3
0004e4a8 g     F .text	000000a4 isatty
000518cc g     O .rodata	000000c8 __mprec_tens
000480b0 g     F .text	0000000c __locale_charset
000551b0 g     O .bss	00000004 __malloc_top_pad
00053550 g     O .rwdata	00000004 __mb_cur_max
000480e0 g     F .text	0000000c _localeconv_r
0004892c g     F .text	0000003c __i2b
00047b18 g     F .text	000004c8 __sfvwrite_r
00043764 g     F .text	00000054 _sbrk_r
0005023c g     F .text	000000b8 alt_hostfs_read
000495b0 g     F .text	00000060 _read_r
00053568 g     O .rwdata	00000004 alt_max_fd
00041390 g     F .text	000000f0 _fclose_r
0004170c g     F .text	00000030 fflush
000551ac g     O .bss	00000004 __malloc_max_sbrked_mem
0004c448 g     F .text	000008ac .hidden __adddf3
0004913c g     F .text	0000010c __b2d
0004be84 g     F .text	000005c4 .hidden __umoddi3
0004e688 g     F .text	000000d4 lseek
00053540 g     O .rwdata	00000004 _global_impure_ptr
00049610 g     F .text	00000564 _realloc_r
00055300 g       *ABS*	00000000 __bss_end
00050e80 g     F .text	000000f0 alt_iic_isr_register
00051160 g     F .text	00000104 alt_tick
0004b888 g     F .text	000005fc .hidden __udivdi3
0004b5fc g     F .text	00000024 _fputwc_r
000518a4 g     O .rodata	00000028 __mprec_bigtens
00048710 g     F .text	00000104 __s2b
0004105c g     F .text	000000a8 .hidden __floatunsidf
00048e7c g     F .text	00000060 __mcmp
00041abc g     F .text	00000018 __fp_lock_all
00050e34 g     F .text	0000004c alt_ic_irq_enabled
000510c8 g     F .text	00000098 alt_alarm_stop
000551cc g     O .bss	00000004 alt_irq_active
00042138 g     F .text	00000444 _fseeko_r
000501d0 g     F .text	0000006c alt_hostfs_close
000400ec g     F .exceptions	000000cc alt_irq_handler
00052310 g     O .rwdata	00000028 alt_dev_null
000507cc g     F .text	0000001c alt_dcache_flush_all
00048814 g     F .text	00000068 __hi0bits
0004e0b4 g     F .text	00000080 .hidden __fixdfsi
0004f23c g     F .text	00000058 altera_avalon_fifo_write_ienable
000535c8 g       *ABS*	00000000 __ram_rwdata_end
0004f150 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00053560 g     O .rwdata	00000008 alt_dev_list
00041c44 g     F .text	00000044 _fputc_r
0004ee44 g     F .text	000000f0 write
00043338 g     F .text	000000a0 _putc_r
000519f4 g       *ABS*	00000000 __ram_rodata_end
0004e3a8 g     F .text	000000b0 fstat
00041c20 g     F .text	00000024 fprintf
0004ce58 g     F .text	000000f4 .hidden __ledf2
000551a0 g     O .bss	00000004 INIT_USAGE_DEQ
000438f4 g     F .text	00000084 strcat
00040650 g     F .text	0000003c RECV2
00048bf4 g     F .text	00000140 __pow5mult
00049dd8 g     F .text	0000150c ___vfiprintf_internal_r
000551bc g     O .bss	00000004 __nlocale_changed
000412c4 g     F .text	00000058 .hidden __umodsi3
00055300 g       *ABS*	00000000 end
0004257c g     F .text	0000001c fseeko
0004211c g     F .text	0000001c fseek
0004f668 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004f17c g     F .text	0000003c altera_avalon_fifo_read_event
00051620 g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
0004ffdc g     F .text	00000088 alt_avalon_timer_sc_init
00041104 g     F .text	00000064 .hidden __clzsi2
0004fd44 g     F .text	00000224 altera_avalon_jtag_uart_write
00041aac g     F .text	00000004 __sfp_lock_acquire
0004f408 g     F .text	0000004c altera_avalon_fifo_read_fifo
00048170 g     F .text	000000e4 memchr
00043aa8 g     F .text	000022dc ___vfprintf_internal_r
00041e08 g     F .text	00000310 _free_r
000480bc g     F .text	00000010 __locale_mb_cur_max
00051464 g     F .text	00000180 __call_exitprocs
000551b8 g     O .bss	00000004 __mlocale_changed
00053548 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
000551d0 g     O .bss	00000004 _alt_tick_rate
00048d34 g     F .text	00000148 __lshift
00040508 g     F .text	00000088 enqueueINT32
000551d4 g     O .bss	00000004 _alt_nticks
0004eafc g     F .text	000000f4 read
0004efa0 g     F .text	00000074 alt_sys_init
0004326c g     F .text	00000060 _open_r
0005134c g     F .text	00000118 __register_exitproc
00051a54 g     O .rwdata	0000000c q1d
00051a0c g     O .rwdata	0000000c q3
00048968 g     F .text	0000028c __multiply
0004f9d0 g     F .text	00000068 altera_avalon_jtag_uart_close
0004131c g     F .text	00000028 .hidden __mulsi3
000519f4 g       *ABS*	00000000 __ram_rwdata_start
00051620 g       *ABS*	00000000 __ram_rodata_start
000551d8 g     O .bss	00000028 __malloc_current_mallinfo
00049248 g     F .text	0000014c __d2b
000519f4 g     O .rwdata	0000000c q1
0004f504 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050bb8 g     F .text	000000d4 alt_get_fd
00046168 g     F .text	00000054 _close_r
000512d0 g     F .text	0000007c memcmp
0004f5c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00055300 g       *ABS*	00000000 __alt_stack_base
0004f614 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00046014 g     F .text	00000154 __swsetup_r
0004f0ac g     F .text	0000003c altera_avalon_fifo_read_status
0004068c g     F .text	000009d0 .hidden __divdf3
0004196c g     F .text	00000118 __sfp
000494ac g     F .text	00000078 __copybits
00051e90 g     O .rwdata	00000408 __malloc_av_
00041ab8 g     F .text	00000004 __sinit_lock_release
0004cf4c g     F .text	0000086c .hidden __muldf3
000437b8 g     F .text	00000054 __sread
0004f4b0 g     F .text	0000002c altera_avalon_fifo_read_other_info
00050a20 g     F .text	00000114 alt_find_file
00050838 g     F .text	000000a0 alt_dev_llist_insert
0004e7d4 g     F .text	00000020 __malloc_lock
00041bf8 g     F .text	00000028 _fprintf_r
0004ec70 g     F .text	000000b0 sbrk
000416b0 g     F .text	0000005c _fflush_r
0004b3bc g     F .text	000000dc _calloc_r
00041be0 g     F .text	00000018 fopen
0005519c g       *ABS*	00000000 __bss_start
00043144 g     F .text	00000128 memset
000401f4 g     F .text	00000314 main
000551c8 g     O .bss	00000004 alt_envp
000551a8 g     O .bss	00000004 __malloc_max_total_mem
0004f564 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004f1b8 g     F .text	00000028 altera_avalon_fifo_read_level
00045f9c g     F .text	00000018 __swbuf
000438ec g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00041480 g     F .text	00000014 fclose
000463e4 g     F .text	00001688 _dtoa_r
00042938 g     F .text	0000080c _malloc_r
0004b7fc g     F .text	00000030 __ascii_wctomb
00040614 g     F .text	0000003c RECV1
0005356c g     O .rwdata	00000004 alt_errno
00051a3c g     O .rwdata	0000000c q1b
000425f4 g     F .text	000000c4 _fwalk
000433d8 g     F .text	000000c8 putc
00041168 g     F .text	00000084 .hidden __divsi3
00041ce4 g     F .text	00000124 _malloc_trim_r
00051620 g       *ABS*	00000000 __CTOR_END__
00049be8 g     F .text	000000dc strcmp
00051620 g       *ABS*	00000000 __flash_rodata_start
00051620 g       *ABS*	00000000 __DTOR_LIST__
0004ccf4 g     F .text	00000088 .hidden __nedf2
0004ef6c g     F .text	00000034 alt_irq_init
0004ebf0 g     F .text	00000080 alt_release_fd
000516e8 g     O .rodata	00000100 .hidden __clz_tab
000551b4 g     O .bss	00000004 _PathLocale
00051284 g     F .text	00000014 atexit
00045fb4 g     F .text	00000060 _write_r
00051a30 g     O .rwdata	0000000c q6
000480ec g     F .text	00000018 setlocale
0005519c g     O .bss	00000004 INIT_USAGE_ENQ
00053544 g     O .rwdata	00000004 _impure_ptr
000551c0 g     O .bss	00000004 alt_argc
00041494 g     F .text	0000021c __sflush_r
00050934 g     F .text	0000005c _do_dtors
000480d8 g     F .text	00000008 __locale_cjk_lang
00042118 g     F .text	00000004 _fseek_r
00043590 g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
000490d8 g     F .text	00000064 __ulp
00041ad4 g     F .text	00000018 __fp_unlock_all
00041c88 g     F .text	0000005c fputc
00051a60 g     O .rwdata	0000000c q1e
00053558 g     O .rwdata	00000008 alt_fs_list
000502f4 g     F .text	000000b8 alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048104 g     F .text	0000000c localeconv
0004f454 g     F .text	0000005c altera_avalon_fifo_write_other_info
00050ca8 g     F .text	00000050 alt_ic_isr_register
000535c8 g       *ABS*	00000000 _edata
00055300 g       *ABS*	00000000 _end
0004b498 g     F .text	00000164 __fputwc
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004fa38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00050d94 g     F .text	000000a0 alt_ic_irq_disable
00043814 g     F .text	0000007c __swrite
0005354c g     O .rwdata	00000004 __malloc_trim_threshold
00051264 g     F .text	00000020 altera_nios2_qsys_irq_init
000480cc g     F .text	0000000c __locale_msgcharset
00051298 g     F .text	00000038 exit
000426b8 g     F .text	000000c4 _fwalk_reent
00048edc g     F .text	000001fc __mdiff
000411ec g     F .text	00000074 .hidden __modsi3
0004f0e8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00060000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00041ab0 g     F .text	00000004 __sfp_lock_release
00041aec g     F .text	000000f4 _fopen_r
000515e4 g     F .text	0000003c _exit
0005068c g     F .text	00000140 alt_alarm_start
0004f124 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0004277c g     F .text	000001bc __smakebuf_r
00051a18 g     O .rwdata	0000000c q4
00043a08 g     F .text	00000098 strlen
0004e954 g     F .text	00000158 open
0004f39c g     F .text	0000006c altera_avalon_read_fifo
0004cd7c g     F .text	000000dc .hidden __gedf2
00041344 g     F .text	0000004c clock
00040590 g     F .text	00000084 dequeueINT32
00053554 g     O .rwdata	00000004 __wctomb
00049dc0 g     F .text	00000018 __sprint_r
00050c8c g     F .text	0000001c alt_icache_flush_all
000535bc g     O .rwdata	00000004 alt_priority_mask
00050cf8 g     F .text	0000009c alt_ic_irq_enable
00045d84 g     F .text	0000001c __vfprintf_internal
0004b82c g     F .text	0000005c _wctomb_r
0004d7b8 g     F .text	000008fc .hidden __subdf3
0004887c g     F .text	000000b0 __lo0bits
0004f2ec g     F .text	00000058 altera_avalon_fifo_write_almostempty
000535c0 g     O .rwdata	00000008 alt_alarm_list
000508d8 g     F .text	0000005c _do_ctors
0004b73c g     F .text	000000c0 wcrtomb
0004e260 g     F .text	000000cc close
0004e5b8 g     F .text	00000080 alt_load
0004b620 g     F .text	00000080 fputwc
00041ab4 g     F .text	00000004 __sinit_lock_acquire
000485c8 g     F .text	00000148 __multadd
000485a0 g     F .text	00000028 _Bfree
00050464 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18d48004 	addi	r3,r3,20992
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21148004 	addi	r4,r4,20992
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <__alt_data_end+0xfffe0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <__alt_data_end+0xfffe011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d6ad5014 	ori	gp,gp,46400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401cc:	10946714 	ori	r2,r2,20892

    movhi r3, %hi(__bss_end)
   401d0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d4:	18d4c014 	ori	r3,r3,21248

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <__alt_data_end+0xfffe01dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	004e5b80 	call	4e5b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004e75c0 	call	4e75c <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <__alt_data_end+0xfffe01f0>

000401f4 <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main()
{
   401f4:	deffb104 	addi	sp,sp,-316
   401f8:	dfc04e15 	stw	ra,312(sp)
   401fc:	df004d15 	stw	fp,308(sp)
   40200:	dc004c15 	stw	r16,304(sp)
   40204:	df004c04 	addi	fp,sp,304
	char file_system[80] = "/mnt/host/files/";
   40208:	009d1bb4 	movhi	r2,29806
   4020c:	109b4bc4 	addi	r2,r2,27951
   40210:	e0bfba15 	stw	r2,-280(fp)
   40214:	009cdbf4 	movhi	r2,29551
   40218:	109a0bc4 	addi	r2,r2,26671
   4021c:	e0bfbb15 	stw	r2,-276(fp)
   40220:	009a59b4 	movhi	r2,26982
   40224:	108bdd04 	addi	r2,r2,12148
   40228:	e0bfbc15 	stw	r2,-272(fp)
   4022c:	008bdcf4 	movhi	r2,12147
   40230:	10995b04 	addi	r2,r2,25964
   40234:	e0bfbd15 	stw	r2,-268(fp)
   40238:	e03fbe15 	stw	zero,-264(fp)
   4023c:	e0ffbf04 	addi	r3,fp,-260
   40240:	00800f04 	movi	r2,60
   40244:	1809883a 	mov	r4,r3
   40248:	000b883a 	mov	r5,zero
   4024c:	100d883a 	mov	r6,r2
   40250:	00431440 	call	43144 <memset>
	clock_t start, end;
	double cpu_time_used;

	while (1)
	{
		out = 0;
   40254:	e03fb405 	stb	zero,-304(fp)

		// Skip any prefix null values
		while ((filename[out] = RECV1()) == '\0')
   40258:	0001883a 	nop
   4025c:	e43fb403 	ldbu	r16,-304(fp)
   40260:	00406140 	call	40614 <RECV1>
   40264:	1007883a 	mov	r3,r2
   40268:	e0bfce04 	addi	r2,fp,-200
   4026c:	1405883a 	add	r2,r2,r16
   40270:	10c00005 	stb	r3,0(r2)
   40274:	e0bfce04 	addi	r2,fp,-200
   40278:	1405883a 	add	r2,r2,r16
   4027c:	10800003 	ldbu	r2,0(r2)
   40280:	10803fcc 	andi	r2,r2,255
   40284:	1080201c 	xori	r2,r2,128
   40288:	10bfe004 	addi	r2,r2,-128
   4028c:	103ff326 	beq	r2,zero,4025c <__alt_data_end+0xfffe025c>
		{
		}

		while (filename[out] != '\0' && filename[out] != '\n')
   40290:	00000906 	br	402b8 <main+0xc4>
		{
			out++;
   40294:	e0bfb403 	ldbu	r2,-304(fp)
   40298:	10800044 	addi	r2,r2,1
   4029c:	e0bfb405 	stb	r2,-304(fp)
			filename[out] = (char)RECV1();
   402a0:	e43fb403 	ldbu	r16,-304(fp)
   402a4:	00406140 	call	40614 <RECV1>
   402a8:	1007883a 	mov	r3,r2
   402ac:	e0bfce04 	addi	r2,fp,-200
   402b0:	1405883a 	add	r2,r2,r16
   402b4:	10c00005 	stb	r3,0(r2)
		// Skip any prefix null values
		while ((filename[out] = RECV1()) == '\0')
		{
		}

		while (filename[out] != '\0' && filename[out] != '\n')
   402b8:	e0bfb403 	ldbu	r2,-304(fp)
   402bc:	e0ffce04 	addi	r3,fp,-200
   402c0:	1885883a 	add	r2,r3,r2
   402c4:	10800003 	ldbu	r2,0(r2)
   402c8:	10803fcc 	andi	r2,r2,255
   402cc:	1080201c 	xori	r2,r2,128
   402d0:	10bfe004 	addi	r2,r2,-128
   402d4:	10000926 	beq	r2,zero,402fc <main+0x108>
   402d8:	e0bfb403 	ldbu	r2,-304(fp)
   402dc:	e0ffce04 	addi	r3,fp,-200
   402e0:	1885883a 	add	r2,r3,r2
   402e4:	10800003 	ldbu	r2,0(r2)
   402e8:	10803fcc 	andi	r2,r2,255
   402ec:	1080201c 	xori	r2,r2,128
   402f0:	10bfe004 	addi	r2,r2,-128
   402f4:	10800298 	cmpnei	r2,r2,10
   402f8:	103fe61e 	bne	r2,zero,40294 <__alt_data_end+0xfffe0294>
		{
			out++;
			filename[out] = (char)RECV1();
		}

		start = clock();
   402fc:	00413440 	call	41344 <clock>
   40300:	e0bfb515 	stw	r2,-300(fp)

		printf("\nFilename: %s\n", filename);
   40304:	e0bfce04 	addi	r2,fp,-200
   40308:	01000174 	movhi	r4,5
   4030c:	21058804 	addi	r4,r4,5664
   40310:	100b883a 	mov	r5,r2
   40314:	00432fc0 	call	432fc <printf>

		filename[out++] = '.';
   40318:	e0bfb403 	ldbu	r2,-304(fp)
   4031c:	e0ffce04 	addi	r3,fp,-200
   40320:	1885883a 	add	r2,r3,r2
   40324:	00c00b84 	movi	r3,46
   40328:	10c00005 	stb	r3,0(r2)
   4032c:	e0bfb403 	ldbu	r2,-304(fp)
   40330:	10800044 	addi	r2,r2,1
   40334:	e0bfb405 	stb	r2,-304(fp)
		filename[out++] = 'j';
   40338:	e0bfb403 	ldbu	r2,-304(fp)
   4033c:	e0ffce04 	addi	r3,fp,-200
   40340:	1885883a 	add	r2,r3,r2
   40344:	00c01a84 	movi	r3,106
   40348:	10c00005 	stb	r3,0(r2)
   4034c:	e0bfb403 	ldbu	r2,-304(fp)
   40350:	10800044 	addi	r2,r2,1
   40354:	e0bfb405 	stb	r2,-304(fp)
		filename[out++] = 'p';
   40358:	e0bfb403 	ldbu	r2,-304(fp)
   4035c:	e0ffce04 	addi	r3,fp,-200
   40360:	1885883a 	add	r2,r3,r2
   40364:	00c01c04 	movi	r3,112
   40368:	10c00005 	stb	r3,0(r2)
   4036c:	e0bfb403 	ldbu	r2,-304(fp)
   40370:	10800044 	addi	r2,r2,1
   40374:	e0bfb405 	stb	r2,-304(fp)
		filename[out++] = 'g';
   40378:	e0bfb403 	ldbu	r2,-304(fp)
   4037c:	e0ffce04 	addi	r3,fp,-200
   40380:	1885883a 	add	r2,r3,r2
   40384:	00c019c4 	movi	r3,103
   40388:	10c00005 	stb	r3,0(r2)
   4038c:	e0bfb403 	ldbu	r2,-304(fp)
   40390:	10800044 	addi	r2,r2,1
   40394:	e0bfb405 	stb	r2,-304(fp)
		filename[out] = '\0';
   40398:	e0bfb403 	ldbu	r2,-304(fp)
   4039c:	e0ffce04 	addi	r3,fp,-200
   403a0:	1885883a 	add	r2,r3,r2
   403a4:	10000005 	stb	zero,0(r2)

		char input_file_full[150];
		strcpy(input_file_full, file_system);
   403a8:	e0ffda84 	addi	r3,fp,-150
   403ac:	e0bfba04 	addi	r2,fp,-280
   403b0:	1809883a 	mov	r4,r3
   403b4:	100b883a 	mov	r5,r2
   403b8:	00439780 	call	43978 <strcpy>
		strcat(input_file_full, filename);
   403bc:	e0ffda84 	addi	r3,fp,-150
   403c0:	e0bfce04 	addi	r2,fp,-200
   403c4:	1809883a 	mov	r4,r3
   403c8:	100b883a 	mov	r5,r2
   403cc:	00438f40 	call	438f4 <strcat>

		fprintf(stdout, "\nOutput file: %s\n", input_file_full);
   403d0:	00800174 	movhi	r2,5
   403d4:	108d5104 	addi	r2,r2,13636
   403d8:	10800017 	ldw	r2,0(r2)
   403dc:	10c00217 	ldw	r3,8(r2)
   403e0:	e0bfda84 	addi	r2,fp,-150
   403e4:	1809883a 	mov	r4,r3
   403e8:	01400174 	movhi	r5,5
   403ec:	29458c04 	addi	r5,r5,5680
   403f0:	100d883a 	mov	r6,r2
   403f4:	0041c200 	call	41c20 <fprintf>

		fptr = fopen(input_file_full, "wb");
   403f8:	e0bfda84 	addi	r2,fp,-150
   403fc:	1009883a 	mov	r4,r2
   40400:	01400174 	movhi	r5,5
   40404:	29459104 	addi	r5,r5,5700
   40408:	0041be00 	call	41be0 <fopen>
   4040c:	e0bfb615 	stw	r2,-296(fp)

		if (fptr == NULL)
   40410:	e0bfb617 	ldw	r2,-296(fp)
   40414:	1000051e 	bne	r2,zero,4042c <main+0x238>
		{
			printf("Save File Open Error!\n");
   40418:	01000174 	movhi	r4,5
   4041c:	21059204 	addi	r4,r4,5704
   40420:	00435600 	call	43560 <puts>
   40424:	00003106 	br	404ec <main+0x2f8>
				{
					end = clock();
					break;
				}
			}
		}
   40428:	0001883a 	nop
		}

		while (1)
		{

			out = (UINT8)RECV2();
   4042c:	00406500 	call	40650 <RECV2>
   40430:	e0bfb405 	stb	r2,-304(fp)

			fputc(out, fptr);
   40434:	e0bfb403 	ldbu	r2,-304(fp)
   40438:	1009883a 	mov	r4,r2
   4043c:	e17fb617 	ldw	r5,-296(fp)
   40440:	0041c880 	call	41c88 <fputc>
			if (out == 0xFF)
   40444:	e0bfb403 	ldbu	r2,-304(fp)
   40448:	10803fd8 	cmpnei	r2,r2,255
   4044c:	103ff61e 	bne	r2,zero,40428 <__alt_data_end+0xfffe0428>
			{
				out = (UINT8)RECV2();
   40450:	00406500 	call	40650 <RECV2>
   40454:	e0bfb405 	stb	r2,-304(fp)
				fputc(out, fptr);
   40458:	e0bfb403 	ldbu	r2,-304(fp)
   4045c:	1009883a 	mov	r4,r2
   40460:	e17fb617 	ldw	r5,-296(fp)
   40464:	0041c880 	call	41c88 <fputc>

				if (out == 0xD9)
   40468:	e0bfb403 	ldbu	r2,-304(fp)
   4046c:	10803658 	cmpnei	r2,r2,217
   40470:	103fed1e 	bne	r2,zero,40428 <__alt_data_end+0xfffe0428>
				{
					end = clock();
   40474:	00413440 	call	41344 <clock>
   40478:	e0bfb715 	stw	r2,-292(fp)
					break;
   4047c:	0001883a 	nop
				}
			}
		}

		fclose(fptr);
   40480:	e13fb617 	ldw	r4,-296(fp)
   40484:	00414800 	call	41480 <fclose>

		cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
   40488:	e0ffb717 	ldw	r3,-292(fp)
   4048c:	e0bfb517 	ldw	r2,-300(fp)
   40490:	1885c83a 	sub	r2,r3,r2
   40494:	1009883a 	mov	r4,r2
   40498:	004105c0 	call	4105c <__floatunsidf>
   4049c:	100b883a 	mov	r5,r2
   404a0:	180d883a 	mov	r6,r3
   404a4:	2809883a 	mov	r4,r5
   404a8:	300b883a 	mov	r5,r6
   404ac:	000d883a 	mov	r6,zero
   404b0:	01d023f4 	movhi	r7,16527
   404b4:	39d00004 	addi	r7,r7,16384
   404b8:	004068c0 	call	4068c <__divdf3>
   404bc:	1009883a 	mov	r4,r2
   404c0:	180b883a 	mov	r5,r3
   404c4:	e13fb815 	stw	r4,-288(fp)
   404c8:	e17fb915 	stw	r5,-284(fp)
		printf("\nJPEG conversion complete!\n");
   404cc:	01000174 	movhi	r4,5
   404d0:	21059804 	addi	r4,r4,5728
   404d4:	00435600 	call	43560 <puts>
		printf("Time taken for conversion process: %f sec.\n", cpu_time_used);
   404d8:	01000174 	movhi	r4,5
   404dc:	21059f04 	addi	r4,r4,5756
   404e0:	e17fb817 	ldw	r5,-288(fp)
   404e4:	e1bfb917 	ldw	r6,-284(fp)
   404e8:	00432fc0 	call	432fc <printf>
		break;
	}

	return 0;
   404ec:	0005883a 	mov	r2,zero
}
   404f0:	e037883a 	mov	sp,fp
   404f4:	dfc00217 	ldw	ra,8(sp)
   404f8:	df000117 	ldw	fp,4(sp)
   404fc:	dc000017 	ldw	r16,0(sp)
   40500:	dec00304 	addi	sp,sp,12
   40504:	f800283a 	ret

00040508 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   40508:	defffa04 	addi	sp,sp,-24
   4050c:	dfc00515 	stw	ra,20(sp)
   40510:	df000415 	stw	fp,16(sp)
   40514:	df000404 	addi	fp,sp,16
   40518:	e13ffc15 	stw	r4,-16(fp)
   4051c:	e17ffd15 	stw	r5,-12(fp)
   40520:	e1bffe15 	stw	r6,-8(fp)
   40524:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   40528:	0001883a 	nop
   4052c:	e0bffe17 	ldw	r2,-8(fp)
   40530:	1009883a 	mov	r4,r2
   40534:	01400044 	movi	r5,1
   40538:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   4053c:	103ffb1e 	bne	r2,zero,4052c <__alt_data_end+0xfffe052c>
	{}

    if (INIT_USAGE_ENQ == 0){
   40540:	d0a71717 	ldw	r2,-25508(gp)
   40544:	1000051e 	bne	r2,zero,4055c <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   40548:	00800044 	movi	r2,1
   4054c:	d0a71715 	stw	r2,-25508(gp)
        printf("First time using enqueueINT32\n");
   40550:	01000174 	movhi	r4,5
   40554:	2105aa04 	addi	r4,r4,5800
   40558:	00435600 	call	43560 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   4055c:	e0bffc17 	ldw	r2,-16(fp)
   40560:	1009883a 	mov	r4,r2
   40564:	e0bffe17 	ldw	r2,-8(fp)
   40568:	1007883a 	mov	r3,r2
   4056c:	e0bfff17 	ldw	r2,-4(fp)
   40570:	180b883a 	mov	r5,r3
   40574:	100d883a 	mov	r6,r2
   40578:	004f3440 	call	4f344 <altera_avalon_fifo_write_fifo>
}
   4057c:	e037883a 	mov	sp,fp
   40580:	dfc00117 	ldw	ra,4(sp)
   40584:	df000017 	ldw	fp,0(sp)
   40588:	dec00204 	addi	sp,sp,8
   4058c:	f800283a 	ret

00040590 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   40590:	defffa04 	addi	sp,sp,-24
   40594:	dfc00515 	stw	ra,20(sp)
   40598:	df000415 	stw	fp,16(sp)
   4059c:	df000404 	addi	fp,sp,16
   405a0:	e13ffd15 	stw	r4,-12(fp)
   405a4:	e17ffe15 	stw	r5,-8(fp)
   405a8:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   405ac:	0001883a 	nop
   405b0:	e0bfff17 	ldw	r2,-4(fp)
   405b4:	1009883a 	mov	r4,r2
   405b8:	01400084 	movi	r5,2
   405bc:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   405c0:	103ffb1e 	bne	r2,zero,405b0 <__alt_data_end+0xfffe05b0>
	{}

    if (INIT_USAGE_DEQ == 0){
   405c4:	d0a71817 	ldw	r2,-25504(gp)
   405c8:	1000051e 	bne	r2,zero,405e0 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   405cc:	00800044 	movi	r2,1
   405d0:	d0a71815 	stw	r2,-25504(gp)
        printf("First time using dequeueINT32\n");
   405d4:	01000174 	movhi	r4,5
   405d8:	2105b204 	addi	r4,r4,5832
   405dc:	00435600 	call	43560 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   405e0:	e0bffe17 	ldw	r2,-8(fp)
   405e4:	1007883a 	mov	r3,r2
   405e8:	e0bfff17 	ldw	r2,-4(fp)
   405ec:	1809883a 	mov	r4,r3
   405f0:	100b883a 	mov	r5,r2
   405f4:	004f4080 	call	4f408 <altera_avalon_fifo_read_fifo>
   405f8:	e0bffc15 	stw	r2,-16(fp)

	return data;
   405fc:	e0bffc17 	ldw	r2,-16(fp)
}
   40600:	e037883a 	mov	sp,fp
   40604:	dfc00117 	ldw	ra,4(sp)
   40608:	df000017 	ldw	fp,0(sp)
   4060c:	dec00204 	addi	sp,sp,8
   40610:	f800283a 	ret

00040614 <RECV1>:
//#include <stdlib.h>

#include "q_mem_obj_def.h"

int RECV1()
{
   40614:	defffe04 	addi	sp,sp,-8
   40618:	dfc00115 	stw	ra,4(sp)
   4061c:	df000015 	stw	fp,0(sp)
   40620:	d839883a 	mov	fp,sp

    return dequeueINT32(q6);
   40624:	00800174 	movhi	r2,5
   40628:	10868c04 	addi	r2,r2,6704
   4062c:	11000017 	ldw	r4,0(r2)
   40630:	11400117 	ldw	r5,4(r2)
   40634:	11800217 	ldw	r6,8(r2)
   40638:	00405900 	call	40590 <dequeueINT32>
}
   4063c:	e037883a 	mov	sp,fp
   40640:	dfc00117 	ldw	ra,4(sp)
   40644:	df000017 	ldw	fp,0(sp)
   40648:	dec00204 	addi	sp,sp,8
   4064c:	f800283a 	ret

00040650 <RECV2>:

int RECV2()
{
   40650:	defffe04 	addi	sp,sp,-8
   40654:	dfc00115 	stw	ra,4(sp)
   40658:	df000015 	stw	fp,0(sp)
   4065c:	d839883a 	mov	fp,sp

    return dequeueINT32(q1e);
   40660:	00800174 	movhi	r2,5
   40664:	10869804 	addi	r2,r2,6752
   40668:	11000017 	ldw	r4,0(r2)
   4066c:	11400117 	ldw	r5,4(r2)
   40670:	11800217 	ldw	r6,8(r2)
   40674:	00405900 	call	40590 <dequeueINT32>
}
   40678:	e037883a 	mov	sp,fp
   4067c:	dfc00117 	ldw	ra,4(sp)
   40680:	df000017 	ldw	fp,0(sp)
   40684:	dec00204 	addi	sp,sp,8
   40688:	f800283a 	ret

0004068c <__divdf3>:
   4068c:	defff004 	addi	sp,sp,-64
   40690:	dc800815 	stw	r18,32(sp)
   40694:	2824d53a 	srli	r18,r5,20
   40698:	dd800c15 	stw	r22,48(sp)
   4069c:	282cd7fa 	srli	r22,r5,31
   406a0:	dc000615 	stw	r16,24(sp)
   406a4:	04000434 	movhi	r16,16
   406a8:	843fffc4 	addi	r16,r16,-1
   406ac:	dfc00f15 	stw	ra,60(sp)
   406b0:	df000e15 	stw	fp,56(sp)
   406b4:	ddc00d15 	stw	r23,52(sp)
   406b8:	dd400b15 	stw	r21,44(sp)
   406bc:	dd000a15 	stw	r20,40(sp)
   406c0:	dcc00915 	stw	r19,36(sp)
   406c4:	dc400715 	stw	r17,28(sp)
   406c8:	9481ffcc 	andi	r18,r18,2047
   406cc:	2c20703a 	and	r16,r5,r16
   406d0:	b2003fcc 	andi	r8,r22,255
   406d4:	90006126 	beq	r18,zero,4085c <__divdf3+0x1d0>
   406d8:	0081ffc4 	movi	r2,2047
   406dc:	202b883a 	mov	r21,r4
   406e0:	90803726 	beq	r18,r2,407c0 <__divdf3+0x134>
   406e4:	80800434 	orhi	r2,r16,16
   406e8:	100490fa 	slli	r2,r2,3
   406ec:	2020d77a 	srli	r16,r4,29
   406f0:	202a90fa 	slli	r21,r4,3
   406f4:	94bf0044 	addi	r18,r18,-1023
   406f8:	80a0b03a 	or	r16,r16,r2
   406fc:	0013883a 	mov	r9,zero
   40700:	000b883a 	mov	r5,zero
   40704:	3806d53a 	srli	r3,r7,20
   40708:	382ed7fa 	srli	r23,r7,31
   4070c:	04400434 	movhi	r17,16
   40710:	8c7fffc4 	addi	r17,r17,-1
   40714:	18c1ffcc 	andi	r3,r3,2047
   40718:	3029883a 	mov	r20,r6
   4071c:	3c62703a 	and	r17,r7,r17
   40720:	bf003fcc 	andi	fp,r23,255
   40724:	18006e26 	beq	r3,zero,408e0 <__divdf3+0x254>
   40728:	0081ffc4 	movi	r2,2047
   4072c:	18806626 	beq	r3,r2,408c8 <__divdf3+0x23c>
   40730:	88800434 	orhi	r2,r17,16
   40734:	100490fa 	slli	r2,r2,3
   40738:	3022d77a 	srli	r17,r6,29
   4073c:	302890fa 	slli	r20,r6,3
   40740:	18ff0044 	addi	r3,r3,-1023
   40744:	88a2b03a 	or	r17,r17,r2
   40748:	000f883a 	mov	r7,zero
   4074c:	b5e6f03a 	xor	r19,r22,r23
   40750:	3a4cb03a 	or	r6,r7,r9
   40754:	008003c4 	movi	r2,15
   40758:	9809883a 	mov	r4,r19
   4075c:	90c7c83a 	sub	r3,r18,r3
   40760:	9cc03fcc 	andi	r19,r19,255
   40764:	11809636 	bltu	r2,r6,409c0 <__divdf3+0x334>
   40768:	300c90ba 	slli	r6,r6,2
   4076c:	00800134 	movhi	r2,4
   40770:	1081e004 	addi	r2,r2,1920
   40774:	308d883a 	add	r6,r6,r2
   40778:	30800017 	ldw	r2,0(r6)
   4077c:	1000683a 	jmp	r2
   40780:	000409c0 	call	409c <__alt_mem_onchip_mem_1f-0x3bf64>
   40784:	000407f8 	rdprs	zero,zero,4127
   40788:	000409b0 	cmpltui	zero,zero,4134
   4078c:	000407ec 	andhi	zero,zero,4127
   40790:	000409b0 	cmpltui	zero,zero,4134
   40794:	00040984 	movi	zero,4134
   40798:	000409b0 	cmpltui	zero,zero,4134
   4079c:	000407ec 	andhi	zero,zero,4127
   407a0:	000407f8 	rdprs	zero,zero,4127
   407a4:	000407f8 	rdprs	zero,zero,4127
   407a8:	00040984 	movi	zero,4134
   407ac:	000407ec 	andhi	zero,zero,4127
   407b0:	000407dc 	xori	zero,zero,4127
   407b4:	000407dc 	xori	zero,zero,4127
   407b8:	000407dc 	xori	zero,zero,4127
   407bc:	00040d48 	cmpgei	zero,zero,4149
   407c0:	2404b03a 	or	r2,r4,r16
   407c4:	10006c1e 	bne	r2,zero,40978 <__divdf3+0x2ec>
   407c8:	02400204 	movi	r9,8
   407cc:	0021883a 	mov	r16,zero
   407d0:	002b883a 	mov	r21,zero
   407d4:	01400084 	movi	r5,2
   407d8:	003fca06 	br	40704 <__alt_data_end+0xfffe0704>
   407dc:	8023883a 	mov	r17,r16
   407e0:	a829883a 	mov	r20,r21
   407e4:	4039883a 	mov	fp,r8
   407e8:	280f883a 	mov	r7,r5
   407ec:	00800084 	movi	r2,2
   407f0:	3881601e 	bne	r7,r2,40d74 <__divdf3+0x6e8>
   407f4:	e027883a 	mov	r19,fp
   407f8:	9900004c 	andi	r4,r19,1
   407fc:	0081ffc4 	movi	r2,2047
   40800:	0021883a 	mov	r16,zero
   40804:	002b883a 	mov	r21,zero
   40808:	1004953a 	slli	r2,r2,20
   4080c:	20c03fcc 	andi	r3,r4,255
   40810:	01400434 	movhi	r5,16
   40814:	297fffc4 	addi	r5,r5,-1
   40818:	180697fa 	slli	r3,r3,31
   4081c:	8160703a 	and	r16,r16,r5
   40820:	80a0b03a 	or	r16,r16,r2
   40824:	80c6b03a 	or	r3,r16,r3
   40828:	a805883a 	mov	r2,r21
   4082c:	dfc00f17 	ldw	ra,60(sp)
   40830:	df000e17 	ldw	fp,56(sp)
   40834:	ddc00d17 	ldw	r23,52(sp)
   40838:	dd800c17 	ldw	r22,48(sp)
   4083c:	dd400b17 	ldw	r21,44(sp)
   40840:	dd000a17 	ldw	r20,40(sp)
   40844:	dcc00917 	ldw	r19,36(sp)
   40848:	dc800817 	ldw	r18,32(sp)
   4084c:	dc400717 	ldw	r17,28(sp)
   40850:	dc000617 	ldw	r16,24(sp)
   40854:	dec01004 	addi	sp,sp,64
   40858:	f800283a 	ret
   4085c:	2404b03a 	or	r2,r4,r16
   40860:	2023883a 	mov	r17,r4
   40864:	10003f26 	beq	r2,zero,40964 <__divdf3+0x2d8>
   40868:	80015e26 	beq	r16,zero,40de4 <__divdf3+0x758>
   4086c:	8009883a 	mov	r4,r16
   40870:	d9800215 	stw	r6,8(sp)
   40874:	d9c00515 	stw	r7,20(sp)
   40878:	da000415 	stw	r8,16(sp)
   4087c:	00411040 	call	41104 <__clzsi2>
   40880:	d9800217 	ldw	r6,8(sp)
   40884:	d9c00517 	ldw	r7,20(sp)
   40888:	da000417 	ldw	r8,16(sp)
   4088c:	113ffd44 	addi	r4,r2,-11
   40890:	00c00704 	movi	r3,28
   40894:	19014f16 	blt	r3,r4,40dd4 <__divdf3+0x748>
   40898:	00c00744 	movi	r3,29
   4089c:	157ffe04 	addi	r21,r2,-8
   408a0:	1907c83a 	sub	r3,r3,r4
   408a4:	8560983a 	sll	r16,r16,r21
   408a8:	88c6d83a 	srl	r3,r17,r3
   408ac:	8d6a983a 	sll	r21,r17,r21
   408b0:	1c20b03a 	or	r16,r3,r16
   408b4:	1080fcc4 	addi	r2,r2,1011
   408b8:	00a5c83a 	sub	r18,zero,r2
   408bc:	0013883a 	mov	r9,zero
   408c0:	000b883a 	mov	r5,zero
   408c4:	003f8f06 	br	40704 <__alt_data_end+0xfffe0704>
   408c8:	3444b03a 	or	r2,r6,r17
   408cc:	1000231e 	bne	r2,zero,4095c <__divdf3+0x2d0>
   408d0:	0023883a 	mov	r17,zero
   408d4:	0029883a 	mov	r20,zero
   408d8:	01c00084 	movi	r7,2
   408dc:	003f9b06 	br	4074c <__alt_data_end+0xfffe074c>
   408e0:	3444b03a 	or	r2,r6,r17
   408e4:	10001926 	beq	r2,zero,4094c <__divdf3+0x2c0>
   408e8:	88014b26 	beq	r17,zero,40e18 <__divdf3+0x78c>
   408ec:	8809883a 	mov	r4,r17
   408f0:	d9400115 	stw	r5,4(sp)
   408f4:	d9800215 	stw	r6,8(sp)
   408f8:	da000415 	stw	r8,16(sp)
   408fc:	da400315 	stw	r9,12(sp)
   40900:	00411040 	call	41104 <__clzsi2>
   40904:	d9400117 	ldw	r5,4(sp)
   40908:	d9800217 	ldw	r6,8(sp)
   4090c:	da000417 	ldw	r8,16(sp)
   40910:	da400317 	ldw	r9,12(sp)
   40914:	113ffd44 	addi	r4,r2,-11
   40918:	00c00704 	movi	r3,28
   4091c:	19013a16 	blt	r3,r4,40e08 <__divdf3+0x77c>
   40920:	00c00744 	movi	r3,29
   40924:	153ffe04 	addi	r20,r2,-8
   40928:	1907c83a 	sub	r3,r3,r4
   4092c:	8d22983a 	sll	r17,r17,r20
   40930:	30c6d83a 	srl	r3,r6,r3
   40934:	3528983a 	sll	r20,r6,r20
   40938:	1c62b03a 	or	r17,r3,r17
   4093c:	1080fcc4 	addi	r2,r2,1011
   40940:	0087c83a 	sub	r3,zero,r2
   40944:	000f883a 	mov	r7,zero
   40948:	003f8006 	br	4074c <__alt_data_end+0xfffe074c>
   4094c:	0023883a 	mov	r17,zero
   40950:	0029883a 	mov	r20,zero
   40954:	01c00044 	movi	r7,1
   40958:	003f7c06 	br	4074c <__alt_data_end+0xfffe074c>
   4095c:	01c000c4 	movi	r7,3
   40960:	003f7a06 	br	4074c <__alt_data_end+0xfffe074c>
   40964:	02400104 	movi	r9,4
   40968:	0021883a 	mov	r16,zero
   4096c:	002b883a 	mov	r21,zero
   40970:	01400044 	movi	r5,1
   40974:	003f6306 	br	40704 <__alt_data_end+0xfffe0704>
   40978:	02400304 	movi	r9,12
   4097c:	014000c4 	movi	r5,3
   40980:	003f6006 	br	40704 <__alt_data_end+0xfffe0704>
   40984:	04000434 	movhi	r16,16
   40988:	0009883a 	mov	r4,zero
   4098c:	843fffc4 	addi	r16,r16,-1
   40990:	057fffc4 	movi	r21,-1
   40994:	0081ffc4 	movi	r2,2047
   40998:	003f9b06 	br	40808 <__alt_data_end+0xfffe0808>
   4099c:	00c00044 	movi	r3,1
   409a0:	1887c83a 	sub	r3,r3,r2
   409a4:	01000e04 	movi	r4,56
   409a8:	20c1530e 	bge	r4,r3,40ef8 <__divdf3+0x86c>
   409ac:	9900004c 	andi	r4,r19,1
   409b0:	0005883a 	mov	r2,zero
   409b4:	0021883a 	mov	r16,zero
   409b8:	002b883a 	mov	r21,zero
   409bc:	003f9206 	br	40808 <__alt_data_end+0xfffe0808>
   409c0:	8c012e36 	bltu	r17,r16,40e7c <__divdf3+0x7f0>
   409c4:	84412c26 	beq	r16,r17,40e78 <__divdf3+0x7ec>
   409c8:	a82f883a 	mov	r23,r21
   409cc:	18ffffc4 	addi	r3,r3,-1
   409d0:	002b883a 	mov	r21,zero
   409d4:	a004d63a 	srli	r2,r20,24
   409d8:	8822923a 	slli	r17,r17,8
   409dc:	a028923a 	slli	r20,r20,8
   409e0:	8009883a 	mov	r4,r16
   409e4:	88acb03a 	or	r22,r17,r2
   409e8:	dd000015 	stw	r20,0(sp)
   409ec:	b028d43a 	srli	r20,r22,16
   409f0:	d8c00215 	stw	r3,8(sp)
   409f4:	b4bfffcc 	andi	r18,r22,65535
   409f8:	a00b883a 	mov	r5,r20
   409fc:	00412600 	call	41260 <__udivsi3>
   40a00:	100b883a 	mov	r5,r2
   40a04:	9009883a 	mov	r4,r18
   40a08:	1023883a 	mov	r17,r2
   40a0c:	004131c0 	call	4131c <__mulsi3>
   40a10:	8009883a 	mov	r4,r16
   40a14:	a00b883a 	mov	r5,r20
   40a18:	1039883a 	mov	fp,r2
   40a1c:	00412c40 	call	412c4 <__umodsi3>
   40a20:	1004943a 	slli	r2,r2,16
   40a24:	b808d43a 	srli	r4,r23,16
   40a28:	d8c00217 	ldw	r3,8(sp)
   40a2c:	2084b03a 	or	r2,r4,r2
   40a30:	1700062e 	bgeu	r2,fp,40a4c <__divdf3+0x3c0>
   40a34:	1585883a 	add	r2,r2,r22
   40a38:	893fffc4 	addi	r4,r17,-1
   40a3c:	15811d36 	bltu	r2,r22,40eb4 <__divdf3+0x828>
   40a40:	17011c2e 	bgeu	r2,fp,40eb4 <__divdf3+0x828>
   40a44:	8c7fff84 	addi	r17,r17,-2
   40a48:	1585883a 	add	r2,r2,r22
   40a4c:	1739c83a 	sub	fp,r2,fp
   40a50:	a00b883a 	mov	r5,r20
   40a54:	e009883a 	mov	r4,fp
   40a58:	d8c00215 	stw	r3,8(sp)
   40a5c:	00412600 	call	41260 <__udivsi3>
   40a60:	100b883a 	mov	r5,r2
   40a64:	9009883a 	mov	r4,r18
   40a68:	1021883a 	mov	r16,r2
   40a6c:	004131c0 	call	4131c <__mulsi3>
   40a70:	a00b883a 	mov	r5,r20
   40a74:	e009883a 	mov	r4,fp
   40a78:	d8800415 	stw	r2,16(sp)
   40a7c:	00412c40 	call	412c4 <__umodsi3>
   40a80:	1004943a 	slli	r2,r2,16
   40a84:	da000417 	ldw	r8,16(sp)
   40a88:	bdffffcc 	andi	r23,r23,65535
   40a8c:	b884b03a 	or	r2,r23,r2
   40a90:	d8c00217 	ldw	r3,8(sp)
   40a94:	1200062e 	bgeu	r2,r8,40ab0 <__divdf3+0x424>
   40a98:	1585883a 	add	r2,r2,r22
   40a9c:	813fffc4 	addi	r4,r16,-1
   40aa0:	15810236 	bltu	r2,r22,40eac <__divdf3+0x820>
   40aa4:	1201012e 	bgeu	r2,r8,40eac <__divdf3+0x820>
   40aa8:	843fff84 	addi	r16,r16,-2
   40aac:	1585883a 	add	r2,r2,r22
   40ab0:	8822943a 	slli	r17,r17,16
   40ab4:	d9800017 	ldw	r6,0(sp)
   40ab8:	1211c83a 	sub	r8,r2,r8
   40abc:	8c22b03a 	or	r17,r17,r16
   40ac0:	373fffcc 	andi	fp,r6,65535
   40ac4:	8abfffcc 	andi	r10,r17,65535
   40ac8:	8820d43a 	srli	r16,r17,16
   40acc:	5009883a 	mov	r4,r10
   40ad0:	e00b883a 	mov	r5,fp
   40ad4:	302ed43a 	srli	r23,r6,16
   40ad8:	d8c00215 	stw	r3,8(sp)
   40adc:	da000415 	stw	r8,16(sp)
   40ae0:	da800115 	stw	r10,4(sp)
   40ae4:	004131c0 	call	4131c <__mulsi3>
   40ae8:	800b883a 	mov	r5,r16
   40aec:	e009883a 	mov	r4,fp
   40af0:	d8800515 	stw	r2,20(sp)
   40af4:	004131c0 	call	4131c <__mulsi3>
   40af8:	8009883a 	mov	r4,r16
   40afc:	b80b883a 	mov	r5,r23
   40b00:	d8800315 	stw	r2,12(sp)
   40b04:	004131c0 	call	4131c <__mulsi3>
   40b08:	da800117 	ldw	r10,4(sp)
   40b0c:	b80b883a 	mov	r5,r23
   40b10:	1021883a 	mov	r16,r2
   40b14:	5009883a 	mov	r4,r10
   40b18:	004131c0 	call	4131c <__mulsi3>
   40b1c:	d9c00517 	ldw	r7,20(sp)
   40b20:	da400317 	ldw	r9,12(sp)
   40b24:	d8c00217 	ldw	r3,8(sp)
   40b28:	3808d43a 	srli	r4,r7,16
   40b2c:	1245883a 	add	r2,r2,r9
   40b30:	da000417 	ldw	r8,16(sp)
   40b34:	2085883a 	add	r2,r4,r2
   40b38:	1240022e 	bgeu	r2,r9,40b44 <__divdf3+0x4b8>
   40b3c:	01000074 	movhi	r4,1
   40b40:	8121883a 	add	r16,r16,r4
   40b44:	1008d43a 	srli	r4,r2,16
   40b48:	1004943a 	slli	r2,r2,16
   40b4c:	39ffffcc 	andi	r7,r7,65535
   40b50:	2409883a 	add	r4,r4,r16
   40b54:	11c5883a 	add	r2,r2,r7
   40b58:	4100bb36 	bltu	r8,r4,40e48 <__divdf3+0x7bc>
   40b5c:	4100d726 	beq	r8,r4,40ebc <__divdf3+0x830>
   40b60:	4109c83a 	sub	r4,r8,r4
   40b64:	a8a1c83a 	sub	r16,r21,r2
   40b68:	ac2b803a 	cmpltu	r21,r21,r16
   40b6c:	256bc83a 	sub	r21,r4,r21
   40b70:	b540d926 	beq	r22,r21,40ed8 <__divdf3+0x84c>
   40b74:	a00b883a 	mov	r5,r20
   40b78:	a809883a 	mov	r4,r21
   40b7c:	d8c00215 	stw	r3,8(sp)
   40b80:	00412600 	call	41260 <__udivsi3>
   40b84:	100b883a 	mov	r5,r2
   40b88:	9009883a 	mov	r4,r18
   40b8c:	d8800515 	stw	r2,20(sp)
   40b90:	004131c0 	call	4131c <__mulsi3>
   40b94:	a809883a 	mov	r4,r21
   40b98:	a00b883a 	mov	r5,r20
   40b9c:	d8800415 	stw	r2,16(sp)
   40ba0:	00412c40 	call	412c4 <__umodsi3>
   40ba4:	1004943a 	slli	r2,r2,16
   40ba8:	8008d43a 	srli	r4,r16,16
   40bac:	da000417 	ldw	r8,16(sp)
   40bb0:	d8c00217 	ldw	r3,8(sp)
   40bb4:	2084b03a 	or	r2,r4,r2
   40bb8:	d9c00517 	ldw	r7,20(sp)
   40bbc:	1200062e 	bgeu	r2,r8,40bd8 <__divdf3+0x54c>
   40bc0:	1585883a 	add	r2,r2,r22
   40bc4:	393fffc4 	addi	r4,r7,-1
   40bc8:	1580c536 	bltu	r2,r22,40ee0 <__divdf3+0x854>
   40bcc:	1200c42e 	bgeu	r2,r8,40ee0 <__divdf3+0x854>
   40bd0:	39ffff84 	addi	r7,r7,-2
   40bd4:	1585883a 	add	r2,r2,r22
   40bd8:	122bc83a 	sub	r21,r2,r8
   40bdc:	a00b883a 	mov	r5,r20
   40be0:	a809883a 	mov	r4,r21
   40be4:	d8c00215 	stw	r3,8(sp)
   40be8:	d9c00515 	stw	r7,20(sp)
   40bec:	00412600 	call	41260 <__udivsi3>
   40bf0:	9009883a 	mov	r4,r18
   40bf4:	100b883a 	mov	r5,r2
   40bf8:	d8800415 	stw	r2,16(sp)
   40bfc:	004131c0 	call	4131c <__mulsi3>
   40c00:	a809883a 	mov	r4,r21
   40c04:	a00b883a 	mov	r5,r20
   40c08:	1025883a 	mov	r18,r2
   40c0c:	00412c40 	call	412c4 <__umodsi3>
   40c10:	1004943a 	slli	r2,r2,16
   40c14:	813fffcc 	andi	r4,r16,65535
   40c18:	d8c00217 	ldw	r3,8(sp)
   40c1c:	20a0b03a 	or	r16,r4,r2
   40c20:	d9c00517 	ldw	r7,20(sp)
   40c24:	da000417 	ldw	r8,16(sp)
   40c28:	8480062e 	bgeu	r16,r18,40c44 <__divdf3+0x5b8>
   40c2c:	85a1883a 	add	r16,r16,r22
   40c30:	40bfffc4 	addi	r2,r8,-1
   40c34:	8580ac36 	bltu	r16,r22,40ee8 <__divdf3+0x85c>
   40c38:	8480ab2e 	bgeu	r16,r18,40ee8 <__divdf3+0x85c>
   40c3c:	423fff84 	addi	r8,r8,-2
   40c40:	85a1883a 	add	r16,r16,r22
   40c44:	3804943a 	slli	r2,r7,16
   40c48:	84a1c83a 	sub	r16,r16,r18
   40c4c:	e009883a 	mov	r4,fp
   40c50:	1228b03a 	or	r20,r2,r8
   40c54:	a1ffffcc 	andi	r7,r20,65535
   40c58:	a024d43a 	srli	r18,r20,16
   40c5c:	380b883a 	mov	r5,r7
   40c60:	d8c00215 	stw	r3,8(sp)
   40c64:	d9c00515 	stw	r7,20(sp)
   40c68:	004131c0 	call	4131c <__mulsi3>
   40c6c:	900b883a 	mov	r5,r18
   40c70:	e009883a 	mov	r4,fp
   40c74:	102b883a 	mov	r21,r2
   40c78:	004131c0 	call	4131c <__mulsi3>
   40c7c:	900b883a 	mov	r5,r18
   40c80:	b809883a 	mov	r4,r23
   40c84:	1039883a 	mov	fp,r2
   40c88:	004131c0 	call	4131c <__mulsi3>
   40c8c:	d9c00517 	ldw	r7,20(sp)
   40c90:	b80b883a 	mov	r5,r23
   40c94:	1025883a 	mov	r18,r2
   40c98:	3809883a 	mov	r4,r7
   40c9c:	004131c0 	call	4131c <__mulsi3>
   40ca0:	a808d43a 	srli	r4,r21,16
   40ca4:	1705883a 	add	r2,r2,fp
   40ca8:	d8c00217 	ldw	r3,8(sp)
   40cac:	2085883a 	add	r2,r4,r2
   40cb0:	1700022e 	bgeu	r2,fp,40cbc <__divdf3+0x630>
   40cb4:	01000074 	movhi	r4,1
   40cb8:	9125883a 	add	r18,r18,r4
   40cbc:	1008d43a 	srli	r4,r2,16
   40cc0:	1004943a 	slli	r2,r2,16
   40cc4:	ad7fffcc 	andi	r21,r21,65535
   40cc8:	2489883a 	add	r4,r4,r18
   40ccc:	1545883a 	add	r2,r2,r21
   40cd0:	81003836 	bltu	r16,r4,40db4 <__divdf3+0x728>
   40cd4:	81003626 	beq	r16,r4,40db0 <__divdf3+0x724>
   40cd8:	a5000054 	ori	r20,r20,1
   40cdc:	1880ffc4 	addi	r2,r3,1023
   40ce0:	00bf2e0e 	bge	zero,r2,4099c <__alt_data_end+0xfffe099c>
   40ce4:	a10001cc 	andi	r4,r20,7
   40ce8:	20000726 	beq	r4,zero,40d08 <__divdf3+0x67c>
   40cec:	a10003cc 	andi	r4,r20,15
   40cf0:	01400104 	movi	r5,4
   40cf4:	21400426 	beq	r4,r5,40d08 <__divdf3+0x67c>
   40cf8:	a149883a 	add	r4,r20,r5
   40cfc:	2529803a 	cmpltu	r20,r4,r20
   40d00:	8d23883a 	add	r17,r17,r20
   40d04:	2029883a 	mov	r20,r4
   40d08:	8900402c 	andhi	r4,r17,256
   40d0c:	20000426 	beq	r4,zero,40d20 <__divdf3+0x694>
   40d10:	18810004 	addi	r2,r3,1024
   40d14:	00ffc034 	movhi	r3,65280
   40d18:	18ffffc4 	addi	r3,r3,-1
   40d1c:	88e2703a 	and	r17,r17,r3
   40d20:	00c1ff84 	movi	r3,2046
   40d24:	18beb416 	blt	r3,r2,407f8 <__alt_data_end+0xfffe07f8>
   40d28:	a028d0fa 	srli	r20,r20,3
   40d2c:	882a977a 	slli	r21,r17,29
   40d30:	8820927a 	slli	r16,r17,9
   40d34:	1081ffcc 	andi	r2,r2,2047
   40d38:	ad2ab03a 	or	r21,r21,r20
   40d3c:	8020d33a 	srli	r16,r16,12
   40d40:	9900004c 	andi	r4,r19,1
   40d44:	003eb006 	br	40808 <__alt_data_end+0xfffe0808>
   40d48:	8080022c 	andhi	r2,r16,8
   40d4c:	10001226 	beq	r2,zero,40d98 <__divdf3+0x70c>
   40d50:	8880022c 	andhi	r2,r17,8
   40d54:	1000101e 	bne	r2,zero,40d98 <__divdf3+0x70c>
   40d58:	00800434 	movhi	r2,16
   40d5c:	8c000234 	orhi	r16,r17,8
   40d60:	10bfffc4 	addi	r2,r2,-1
   40d64:	b809883a 	mov	r4,r23
   40d68:	80a0703a 	and	r16,r16,r2
   40d6c:	a02b883a 	mov	r21,r20
   40d70:	003f0806 	br	40994 <__alt_data_end+0xfffe0994>
   40d74:	008000c4 	movi	r2,3
   40d78:	3880b126 	beq	r7,r2,41040 <__divdf3+0x9b4>
   40d7c:	00800044 	movi	r2,1
   40d80:	38805b1e 	bne	r7,r2,40ef0 <__divdf3+0x864>
   40d84:	e009883a 	mov	r4,fp
   40d88:	0005883a 	mov	r2,zero
   40d8c:	0021883a 	mov	r16,zero
   40d90:	002b883a 	mov	r21,zero
   40d94:	003e9c06 	br	40808 <__alt_data_end+0xfffe0808>
   40d98:	00800434 	movhi	r2,16
   40d9c:	84000234 	orhi	r16,r16,8
   40da0:	10bfffc4 	addi	r2,r2,-1
   40da4:	b009883a 	mov	r4,r22
   40da8:	80a0703a 	and	r16,r16,r2
   40dac:	003ef906 	br	40994 <__alt_data_end+0xfffe0994>
   40db0:	103fca26 	beq	r2,zero,40cdc <__alt_data_end+0xfffe0cdc>
   40db4:	b421883a 	add	r16,r22,r16
   40db8:	a17fffc4 	addi	r5,r20,-1
   40dbc:	8580422e 	bgeu	r16,r22,40ec8 <__divdf3+0x83c>
   40dc0:	2829883a 	mov	r20,r5
   40dc4:	813fc41e 	bne	r16,r4,40cd8 <__alt_data_end+0xfffe0cd8>
   40dc8:	d9800017 	ldw	r6,0(sp)
   40dcc:	30bfc21e 	bne	r6,r2,40cd8 <__alt_data_end+0xfffe0cd8>
   40dd0:	003fc206 	br	40cdc <__alt_data_end+0xfffe0cdc>
   40dd4:	143ff604 	addi	r16,r2,-40
   40dd8:	8c20983a 	sll	r16,r17,r16
   40ddc:	002b883a 	mov	r21,zero
   40de0:	003eb406 	br	408b4 <__alt_data_end+0xfffe08b4>
   40de4:	d9800215 	stw	r6,8(sp)
   40de8:	d9c00515 	stw	r7,20(sp)
   40dec:	da000415 	stw	r8,16(sp)
   40df0:	00411040 	call	41104 <__clzsi2>
   40df4:	10800804 	addi	r2,r2,32
   40df8:	da000417 	ldw	r8,16(sp)
   40dfc:	d9c00517 	ldw	r7,20(sp)
   40e00:	d9800217 	ldw	r6,8(sp)
   40e04:	003ea106 	br	4088c <__alt_data_end+0xfffe088c>
   40e08:	147ff604 	addi	r17,r2,-40
   40e0c:	3462983a 	sll	r17,r6,r17
   40e10:	0029883a 	mov	r20,zero
   40e14:	003ec906 	br	4093c <__alt_data_end+0xfffe093c>
   40e18:	3009883a 	mov	r4,r6
   40e1c:	d9400115 	stw	r5,4(sp)
   40e20:	d9800215 	stw	r6,8(sp)
   40e24:	da000415 	stw	r8,16(sp)
   40e28:	da400315 	stw	r9,12(sp)
   40e2c:	00411040 	call	41104 <__clzsi2>
   40e30:	10800804 	addi	r2,r2,32
   40e34:	da400317 	ldw	r9,12(sp)
   40e38:	da000417 	ldw	r8,16(sp)
   40e3c:	d9800217 	ldw	r6,8(sp)
   40e40:	d9400117 	ldw	r5,4(sp)
   40e44:	003eb306 	br	40914 <__alt_data_end+0xfffe0914>
   40e48:	d9800017 	ldw	r6,0(sp)
   40e4c:	a9ab883a 	add	r21,r21,r6
   40e50:	a98b803a 	cmpltu	r5,r21,r6
   40e54:	2d8b883a 	add	r5,r5,r22
   40e58:	2a11883a 	add	r8,r5,r8
   40e5c:	897fffc4 	addi	r5,r17,-1
   40e60:	b2000c2e 	bgeu	r22,r8,40e94 <__divdf3+0x808>
   40e64:	41003f36 	bltu	r8,r4,40f64 <__divdf3+0x8d8>
   40e68:	22006c26 	beq	r4,r8,4101c <__divdf3+0x990>
   40e6c:	4109c83a 	sub	r4,r8,r4
   40e70:	2823883a 	mov	r17,r5
   40e74:	003f3b06 	br	40b64 <__alt_data_end+0xfffe0b64>
   40e78:	ad3ed336 	bltu	r21,r20,409c8 <__alt_data_end+0xfffe09c8>
   40e7c:	a804d07a 	srli	r2,r21,1
   40e80:	802e97fa 	slli	r23,r16,31
   40e84:	a82a97fa 	slli	r21,r21,31
   40e88:	8020d07a 	srli	r16,r16,1
   40e8c:	b8aeb03a 	or	r23,r23,r2
   40e90:	003ed006 	br	409d4 <__alt_data_end+0xfffe09d4>
   40e94:	b23ff51e 	bne	r22,r8,40e6c <__alt_data_end+0xfffe0e6c>
   40e98:	d9800017 	ldw	r6,0(sp)
   40e9c:	a9bff12e 	bgeu	r21,r6,40e64 <__alt_data_end+0xfffe0e64>
   40ea0:	b109c83a 	sub	r4,r22,r4
   40ea4:	2823883a 	mov	r17,r5
   40ea8:	003f2e06 	br	40b64 <__alt_data_end+0xfffe0b64>
   40eac:	2021883a 	mov	r16,r4
   40eb0:	003eff06 	br	40ab0 <__alt_data_end+0xfffe0ab0>
   40eb4:	2023883a 	mov	r17,r4
   40eb8:	003ee406 	br	40a4c <__alt_data_end+0xfffe0a4c>
   40ebc:	a8bfe236 	bltu	r21,r2,40e48 <__alt_data_end+0xfffe0e48>
   40ec0:	0009883a 	mov	r4,zero
   40ec4:	003f2706 	br	40b64 <__alt_data_end+0xfffe0b64>
   40ec8:	81002d36 	bltu	r16,r4,40f80 <__divdf3+0x8f4>
   40ecc:	24005626 	beq	r4,r16,41028 <__divdf3+0x99c>
   40ed0:	2829883a 	mov	r20,r5
   40ed4:	003f8006 	br	40cd8 <__alt_data_end+0xfffe0cd8>
   40ed8:	053fffc4 	movi	r20,-1
   40edc:	003f7f06 	br	40cdc <__alt_data_end+0xfffe0cdc>
   40ee0:	200f883a 	mov	r7,r4
   40ee4:	003f3c06 	br	40bd8 <__alt_data_end+0xfffe0bd8>
   40ee8:	1011883a 	mov	r8,r2
   40eec:	003f5506 	br	40c44 <__alt_data_end+0xfffe0c44>
   40ef0:	e027883a 	mov	r19,fp
   40ef4:	003f7906 	br	40cdc <__alt_data_end+0xfffe0cdc>
   40ef8:	010007c4 	movi	r4,31
   40efc:	20c02816 	blt	r4,r3,40fa0 <__divdf3+0x914>
   40f00:	00800804 	movi	r2,32
   40f04:	10c5c83a 	sub	r2,r2,r3
   40f08:	888a983a 	sll	r5,r17,r2
   40f0c:	a0c8d83a 	srl	r4,r20,r3
   40f10:	a084983a 	sll	r2,r20,r2
   40f14:	88e2d83a 	srl	r17,r17,r3
   40f18:	2906b03a 	or	r3,r5,r4
   40f1c:	1004c03a 	cmpne	r2,r2,zero
   40f20:	1886b03a 	or	r3,r3,r2
   40f24:	188001cc 	andi	r2,r3,7
   40f28:	10000726 	beq	r2,zero,40f48 <__divdf3+0x8bc>
   40f2c:	188003cc 	andi	r2,r3,15
   40f30:	01000104 	movi	r4,4
   40f34:	11000426 	beq	r2,r4,40f48 <__divdf3+0x8bc>
   40f38:	1805883a 	mov	r2,r3
   40f3c:	10c00104 	addi	r3,r2,4
   40f40:	1885803a 	cmpltu	r2,r3,r2
   40f44:	88a3883a 	add	r17,r17,r2
   40f48:	8880202c 	andhi	r2,r17,128
   40f4c:	10002926 	beq	r2,zero,40ff4 <__divdf3+0x968>
   40f50:	9900004c 	andi	r4,r19,1
   40f54:	00800044 	movi	r2,1
   40f58:	0021883a 	mov	r16,zero
   40f5c:	002b883a 	mov	r21,zero
   40f60:	003e2906 	br	40808 <__alt_data_end+0xfffe0808>
   40f64:	d9800017 	ldw	r6,0(sp)
   40f68:	8c7fff84 	addi	r17,r17,-2
   40f6c:	a9ab883a 	add	r21,r21,r6
   40f70:	a98b803a 	cmpltu	r5,r21,r6
   40f74:	2d8b883a 	add	r5,r5,r22
   40f78:	2a11883a 	add	r8,r5,r8
   40f7c:	003ef806 	br	40b60 <__alt_data_end+0xfffe0b60>
   40f80:	d9800017 	ldw	r6,0(sp)
   40f84:	318f883a 	add	r7,r6,r6
   40f88:	398b803a 	cmpltu	r5,r7,r6
   40f8c:	2d8d883a 	add	r6,r5,r22
   40f90:	81a1883a 	add	r16,r16,r6
   40f94:	a17fff84 	addi	r5,r20,-2
   40f98:	d9c00015 	stw	r7,0(sp)
   40f9c:	003f8806 	br	40dc0 <__alt_data_end+0xfffe0dc0>
   40fa0:	013ff844 	movi	r4,-31
   40fa4:	2085c83a 	sub	r2,r4,r2
   40fa8:	8888d83a 	srl	r4,r17,r2
   40fac:	00800804 	movi	r2,32
   40fb0:	18802126 	beq	r3,r2,41038 <__divdf3+0x9ac>
   40fb4:	04001004 	movi	r16,64
   40fb8:	80c7c83a 	sub	r3,r16,r3
   40fbc:	88e0983a 	sll	r16,r17,r3
   40fc0:	8504b03a 	or	r2,r16,r20
   40fc4:	1004c03a 	cmpne	r2,r2,zero
   40fc8:	2084b03a 	or	r2,r4,r2
   40fcc:	144001cc 	andi	r17,r2,7
   40fd0:	88000d1e 	bne	r17,zero,41008 <__divdf3+0x97c>
   40fd4:	0021883a 	mov	r16,zero
   40fd8:	102ad0fa 	srli	r21,r2,3
   40fdc:	9900004c 	andi	r4,r19,1
   40fe0:	0005883a 	mov	r2,zero
   40fe4:	ac6ab03a 	or	r21,r21,r17
   40fe8:	003e0706 	br	40808 <__alt_data_end+0xfffe0808>
   40fec:	1007883a 	mov	r3,r2
   40ff0:	0023883a 	mov	r17,zero
   40ff4:	8820927a 	slli	r16,r17,9
   40ff8:	1805883a 	mov	r2,r3
   40ffc:	8822977a 	slli	r17,r17,29
   41000:	8020d33a 	srli	r16,r16,12
   41004:	003ff406 	br	40fd8 <__alt_data_end+0xfffe0fd8>
   41008:	10c003cc 	andi	r3,r2,15
   4100c:	01000104 	movi	r4,4
   41010:	193ff626 	beq	r3,r4,40fec <__alt_data_end+0xfffe0fec>
   41014:	0023883a 	mov	r17,zero
   41018:	003fc806 	br	40f3c <__alt_data_end+0xfffe0f3c>
   4101c:	a8bfd136 	bltu	r21,r2,40f64 <__alt_data_end+0xfffe0f64>
   41020:	2823883a 	mov	r17,r5
   41024:	003fa606 	br	40ec0 <__alt_data_end+0xfffe0ec0>
   41028:	d9800017 	ldw	r6,0(sp)
   4102c:	30bfd436 	bltu	r6,r2,40f80 <__alt_data_end+0xfffe0f80>
   41030:	2829883a 	mov	r20,r5
   41034:	003f6406 	br	40dc8 <__alt_data_end+0xfffe0dc8>
   41038:	0021883a 	mov	r16,zero
   4103c:	003fe006 	br	40fc0 <__alt_data_end+0xfffe0fc0>
   41040:	00800434 	movhi	r2,16
   41044:	8c000234 	orhi	r16,r17,8
   41048:	10bfffc4 	addi	r2,r2,-1
   4104c:	e009883a 	mov	r4,fp
   41050:	80a0703a 	and	r16,r16,r2
   41054:	a02b883a 	mov	r21,r20
   41058:	003e4e06 	br	40994 <__alt_data_end+0xfffe0994>

0004105c <__floatunsidf>:
   4105c:	defffe04 	addi	sp,sp,-8
   41060:	dc000015 	stw	r16,0(sp)
   41064:	dfc00115 	stw	ra,4(sp)
   41068:	2021883a 	mov	r16,r4
   4106c:	20002226 	beq	r4,zero,410f8 <__floatunsidf+0x9c>
   41070:	00411040 	call	41104 <__clzsi2>
   41074:	01010784 	movi	r4,1054
   41078:	2089c83a 	sub	r4,r4,r2
   4107c:	01810cc4 	movi	r6,1075
   41080:	310dc83a 	sub	r6,r6,r4
   41084:	00c007c4 	movi	r3,31
   41088:	1980120e 	bge	r3,r6,410d4 <__floatunsidf+0x78>
   4108c:	00c104c4 	movi	r3,1043
   41090:	1907c83a 	sub	r3,r3,r4
   41094:	80ca983a 	sll	r5,r16,r3
   41098:	00800434 	movhi	r2,16
   4109c:	10bfffc4 	addi	r2,r2,-1
   410a0:	2101ffcc 	andi	r4,r4,2047
   410a4:	0021883a 	mov	r16,zero
   410a8:	288a703a 	and	r5,r5,r2
   410ac:	2008953a 	slli	r4,r4,20
   410b0:	00c00434 	movhi	r3,16
   410b4:	18ffffc4 	addi	r3,r3,-1
   410b8:	28c6703a 	and	r3,r5,r3
   410bc:	8005883a 	mov	r2,r16
   410c0:	1906b03a 	or	r3,r3,r4
   410c4:	dfc00117 	ldw	ra,4(sp)
   410c8:	dc000017 	ldw	r16,0(sp)
   410cc:	dec00204 	addi	sp,sp,8
   410d0:	f800283a 	ret
   410d4:	00c002c4 	movi	r3,11
   410d8:	188bc83a 	sub	r5,r3,r2
   410dc:	814ad83a 	srl	r5,r16,r5
   410e0:	00c00434 	movhi	r3,16
   410e4:	18ffffc4 	addi	r3,r3,-1
   410e8:	81a0983a 	sll	r16,r16,r6
   410ec:	2101ffcc 	andi	r4,r4,2047
   410f0:	28ca703a 	and	r5,r5,r3
   410f4:	003fed06 	br	410ac <__alt_data_end+0xfffe10ac>
   410f8:	0009883a 	mov	r4,zero
   410fc:	000b883a 	mov	r5,zero
   41100:	003fea06 	br	410ac <__alt_data_end+0xfffe10ac>

00041104 <__clzsi2>:
   41104:	00bfffd4 	movui	r2,65535
   41108:	11000536 	bltu	r2,r4,41120 <__clzsi2+0x1c>
   4110c:	00803fc4 	movi	r2,255
   41110:	11000f36 	bltu	r2,r4,41150 <__clzsi2+0x4c>
   41114:	00800804 	movi	r2,32
   41118:	0007883a 	mov	r3,zero
   4111c:	00000506 	br	41134 <__clzsi2+0x30>
   41120:	00804034 	movhi	r2,256
   41124:	10bfffc4 	addi	r2,r2,-1
   41128:	11000c2e 	bgeu	r2,r4,4115c <__clzsi2+0x58>
   4112c:	00800204 	movi	r2,8
   41130:	00c00604 	movi	r3,24
   41134:	20c8d83a 	srl	r4,r4,r3
   41138:	00c00174 	movhi	r3,5
   4113c:	18c5ba04 	addi	r3,r3,5864
   41140:	1909883a 	add	r4,r3,r4
   41144:	20c00003 	ldbu	r3,0(r4)
   41148:	10c5c83a 	sub	r2,r2,r3
   4114c:	f800283a 	ret
   41150:	00800604 	movi	r2,24
   41154:	00c00204 	movi	r3,8
   41158:	003ff606 	br	41134 <__alt_data_end+0xfffe1134>
   4115c:	00800404 	movi	r2,16
   41160:	1007883a 	mov	r3,r2
   41164:	003ff306 	br	41134 <__alt_data_end+0xfffe1134>

00041168 <__divsi3>:
   41168:	20001b16 	blt	r4,zero,411d8 <__divsi3+0x70>
   4116c:	000f883a 	mov	r7,zero
   41170:	28001616 	blt	r5,zero,411cc <__divsi3+0x64>
   41174:	200d883a 	mov	r6,r4
   41178:	29001a2e 	bgeu	r5,r4,411e4 <__divsi3+0x7c>
   4117c:	00800804 	movi	r2,32
   41180:	00c00044 	movi	r3,1
   41184:	00000106 	br	4118c <__divsi3+0x24>
   41188:	10000d26 	beq	r2,zero,411c0 <__divsi3+0x58>
   4118c:	294b883a 	add	r5,r5,r5
   41190:	10bfffc4 	addi	r2,r2,-1
   41194:	18c7883a 	add	r3,r3,r3
   41198:	293ffb36 	bltu	r5,r4,41188 <__alt_data_end+0xfffe1188>
   4119c:	0005883a 	mov	r2,zero
   411a0:	18000726 	beq	r3,zero,411c0 <__divsi3+0x58>
   411a4:	0005883a 	mov	r2,zero
   411a8:	31400236 	bltu	r6,r5,411b4 <__divsi3+0x4c>
   411ac:	314dc83a 	sub	r6,r6,r5
   411b0:	10c4b03a 	or	r2,r2,r3
   411b4:	1806d07a 	srli	r3,r3,1
   411b8:	280ad07a 	srli	r5,r5,1
   411bc:	183ffa1e 	bne	r3,zero,411a8 <__alt_data_end+0xfffe11a8>
   411c0:	38000126 	beq	r7,zero,411c8 <__divsi3+0x60>
   411c4:	0085c83a 	sub	r2,zero,r2
   411c8:	f800283a 	ret
   411cc:	014bc83a 	sub	r5,zero,r5
   411d0:	39c0005c 	xori	r7,r7,1
   411d4:	003fe706 	br	41174 <__alt_data_end+0xfffe1174>
   411d8:	0109c83a 	sub	r4,zero,r4
   411dc:	01c00044 	movi	r7,1
   411e0:	003fe306 	br	41170 <__alt_data_end+0xfffe1170>
   411e4:	00c00044 	movi	r3,1
   411e8:	003fee06 	br	411a4 <__alt_data_end+0xfffe11a4>

000411ec <__modsi3>:
   411ec:	20001716 	blt	r4,zero,4124c <__modsi3+0x60>
   411f0:	000f883a 	mov	r7,zero
   411f4:	2005883a 	mov	r2,r4
   411f8:	28001216 	blt	r5,zero,41244 <__modsi3+0x58>
   411fc:	2900162e 	bgeu	r5,r4,41258 <__modsi3+0x6c>
   41200:	01800804 	movi	r6,32
   41204:	00c00044 	movi	r3,1
   41208:	00000106 	br	41210 <__modsi3+0x24>
   4120c:	30000a26 	beq	r6,zero,41238 <__modsi3+0x4c>
   41210:	294b883a 	add	r5,r5,r5
   41214:	31bfffc4 	addi	r6,r6,-1
   41218:	18c7883a 	add	r3,r3,r3
   4121c:	293ffb36 	bltu	r5,r4,4120c <__alt_data_end+0xfffe120c>
   41220:	18000526 	beq	r3,zero,41238 <__modsi3+0x4c>
   41224:	1806d07a 	srli	r3,r3,1
   41228:	11400136 	bltu	r2,r5,41230 <__modsi3+0x44>
   4122c:	1145c83a 	sub	r2,r2,r5
   41230:	280ad07a 	srli	r5,r5,1
   41234:	183ffb1e 	bne	r3,zero,41224 <__alt_data_end+0xfffe1224>
   41238:	38000126 	beq	r7,zero,41240 <__modsi3+0x54>
   4123c:	0085c83a 	sub	r2,zero,r2
   41240:	f800283a 	ret
   41244:	014bc83a 	sub	r5,zero,r5
   41248:	003fec06 	br	411fc <__alt_data_end+0xfffe11fc>
   4124c:	0109c83a 	sub	r4,zero,r4
   41250:	01c00044 	movi	r7,1
   41254:	003fe706 	br	411f4 <__alt_data_end+0xfffe11f4>
   41258:	00c00044 	movi	r3,1
   4125c:	003ff106 	br	41224 <__alt_data_end+0xfffe1224>

00041260 <__udivsi3>:
   41260:	200d883a 	mov	r6,r4
   41264:	2900152e 	bgeu	r5,r4,412bc <__udivsi3+0x5c>
   41268:	28001416 	blt	r5,zero,412bc <__udivsi3+0x5c>
   4126c:	00800804 	movi	r2,32
   41270:	00c00044 	movi	r3,1
   41274:	00000206 	br	41280 <__udivsi3+0x20>
   41278:	10000e26 	beq	r2,zero,412b4 <__udivsi3+0x54>
   4127c:	28000516 	blt	r5,zero,41294 <__udivsi3+0x34>
   41280:	294b883a 	add	r5,r5,r5
   41284:	10bfffc4 	addi	r2,r2,-1
   41288:	18c7883a 	add	r3,r3,r3
   4128c:	293ffa36 	bltu	r5,r4,41278 <__alt_data_end+0xfffe1278>
   41290:	18000826 	beq	r3,zero,412b4 <__udivsi3+0x54>
   41294:	0005883a 	mov	r2,zero
   41298:	31400236 	bltu	r6,r5,412a4 <__udivsi3+0x44>
   4129c:	314dc83a 	sub	r6,r6,r5
   412a0:	10c4b03a 	or	r2,r2,r3
   412a4:	1806d07a 	srli	r3,r3,1
   412a8:	280ad07a 	srli	r5,r5,1
   412ac:	183ffa1e 	bne	r3,zero,41298 <__alt_data_end+0xfffe1298>
   412b0:	f800283a 	ret
   412b4:	0005883a 	mov	r2,zero
   412b8:	f800283a 	ret
   412bc:	00c00044 	movi	r3,1
   412c0:	003ff406 	br	41294 <__alt_data_end+0xfffe1294>

000412c4 <__umodsi3>:
   412c4:	2005883a 	mov	r2,r4
   412c8:	2900122e 	bgeu	r5,r4,41314 <__umodsi3+0x50>
   412cc:	28001116 	blt	r5,zero,41314 <__umodsi3+0x50>
   412d0:	01800804 	movi	r6,32
   412d4:	00c00044 	movi	r3,1
   412d8:	00000206 	br	412e4 <__umodsi3+0x20>
   412dc:	30000c26 	beq	r6,zero,41310 <__umodsi3+0x4c>
   412e0:	28000516 	blt	r5,zero,412f8 <__umodsi3+0x34>
   412e4:	294b883a 	add	r5,r5,r5
   412e8:	31bfffc4 	addi	r6,r6,-1
   412ec:	18c7883a 	add	r3,r3,r3
   412f0:	293ffa36 	bltu	r5,r4,412dc <__alt_data_end+0xfffe12dc>
   412f4:	18000626 	beq	r3,zero,41310 <__umodsi3+0x4c>
   412f8:	1806d07a 	srli	r3,r3,1
   412fc:	11400136 	bltu	r2,r5,41304 <__umodsi3+0x40>
   41300:	1145c83a 	sub	r2,r2,r5
   41304:	280ad07a 	srli	r5,r5,1
   41308:	183ffb1e 	bne	r3,zero,412f8 <__alt_data_end+0xfffe12f8>
   4130c:	f800283a 	ret
   41310:	f800283a 	ret
   41314:	00c00044 	movi	r3,1
   41318:	003ff706 	br	412f8 <__alt_data_end+0xfffe12f8>

0004131c <__mulsi3>:
   4131c:	0005883a 	mov	r2,zero
   41320:	20000726 	beq	r4,zero,41340 <__mulsi3+0x24>
   41324:	20c0004c 	andi	r3,r4,1
   41328:	2008d07a 	srli	r4,r4,1
   4132c:	18000126 	beq	r3,zero,41334 <__mulsi3+0x18>
   41330:	1145883a 	add	r2,r2,r5
   41334:	294b883a 	add	r5,r5,r5
   41338:	203ffa1e 	bne	r4,zero,41324 <__alt_data_end+0xfffe1324>
   4133c:	f800283a 	ret
   41340:	f800283a 	ret

00041344 <clock>:
   41344:	00800174 	movhi	r2,5
   41348:	108d5104 	addi	r2,r2,13636
   4134c:	11000017 	ldw	r4,0(r2)
   41350:	defffb04 	addi	sp,sp,-20
   41354:	d80b883a 	mov	r5,sp
   41358:	dfc00415 	stw	ra,16(sp)
   4135c:	0043aa00 	call	43aa0 <_times_r>
   41360:	00ffffc4 	movi	r3,-1
   41364:	10c00726 	beq	r2,r3,41384 <clock+0x40>
   41368:	d8c00017 	ldw	r3,0(sp)
   4136c:	d8800117 	ldw	r2,4(sp)
   41370:	1885883a 	add	r2,r3,r2
   41374:	d8c00217 	ldw	r3,8(sp)
   41378:	10c7883a 	add	r3,r2,r3
   4137c:	d8800317 	ldw	r2,12(sp)
   41380:	1885883a 	add	r2,r3,r2
   41384:	dfc00417 	ldw	ra,16(sp)
   41388:	dec00504 	addi	sp,sp,20
   4138c:	f800283a 	ret

00041390 <_fclose_r>:
   41390:	28003926 	beq	r5,zero,41478 <_fclose_r+0xe8>
   41394:	defffc04 	addi	sp,sp,-16
   41398:	dc400115 	stw	r17,4(sp)
   4139c:	dc000015 	stw	r16,0(sp)
   413a0:	dfc00315 	stw	ra,12(sp)
   413a4:	dc800215 	stw	r18,8(sp)
   413a8:	2023883a 	mov	r17,r4
   413ac:	2821883a 	mov	r16,r5
   413b0:	20000226 	beq	r4,zero,413bc <_fclose_r+0x2c>
   413b4:	20800e17 	ldw	r2,56(r4)
   413b8:	10002726 	beq	r2,zero,41458 <_fclose_r+0xc8>
   413bc:	8080030f 	ldh	r2,12(r16)
   413c0:	1000071e 	bne	r2,zero,413e0 <_fclose_r+0x50>
   413c4:	0005883a 	mov	r2,zero
   413c8:	dfc00317 	ldw	ra,12(sp)
   413cc:	dc800217 	ldw	r18,8(sp)
   413d0:	dc400117 	ldw	r17,4(sp)
   413d4:	dc000017 	ldw	r16,0(sp)
   413d8:	dec00404 	addi	sp,sp,16
   413dc:	f800283a 	ret
   413e0:	800b883a 	mov	r5,r16
   413e4:	8809883a 	mov	r4,r17
   413e8:	00414940 	call	41494 <__sflush_r>
   413ec:	1025883a 	mov	r18,r2
   413f0:	80800b17 	ldw	r2,44(r16)
   413f4:	10000426 	beq	r2,zero,41408 <_fclose_r+0x78>
   413f8:	81400717 	ldw	r5,28(r16)
   413fc:	8809883a 	mov	r4,r17
   41400:	103ee83a 	callr	r2
   41404:	10001616 	blt	r2,zero,41460 <_fclose_r+0xd0>
   41408:	8080030b 	ldhu	r2,12(r16)
   4140c:	1080200c 	andi	r2,r2,128
   41410:	1000151e 	bne	r2,zero,41468 <_fclose_r+0xd8>
   41414:	81400c17 	ldw	r5,48(r16)
   41418:	28000526 	beq	r5,zero,41430 <_fclose_r+0xa0>
   4141c:	80801004 	addi	r2,r16,64
   41420:	28800226 	beq	r5,r2,4142c <_fclose_r+0x9c>
   41424:	8809883a 	mov	r4,r17
   41428:	0041e080 	call	41e08 <_free_r>
   4142c:	80000c15 	stw	zero,48(r16)
   41430:	81401117 	ldw	r5,68(r16)
   41434:	28000326 	beq	r5,zero,41444 <_fclose_r+0xb4>
   41438:	8809883a 	mov	r4,r17
   4143c:	0041e080 	call	41e08 <_free_r>
   41440:	80001115 	stw	zero,68(r16)
   41444:	0041aac0 	call	41aac <__sfp_lock_acquire>
   41448:	8000030d 	sth	zero,12(r16)
   4144c:	0041ab00 	call	41ab0 <__sfp_lock_release>
   41450:	9005883a 	mov	r2,r18
   41454:	003fdc06 	br	413c8 <__alt_data_end+0xfffe13c8>
   41458:	0041a9c0 	call	41a9c <__sinit>
   4145c:	003fd706 	br	413bc <__alt_data_end+0xfffe13bc>
   41460:	04bfffc4 	movi	r18,-1
   41464:	003fe806 	br	41408 <__alt_data_end+0xfffe1408>
   41468:	81400417 	ldw	r5,16(r16)
   4146c:	8809883a 	mov	r4,r17
   41470:	0041e080 	call	41e08 <_free_r>
   41474:	003fe706 	br	41414 <__alt_data_end+0xfffe1414>
   41478:	0005883a 	mov	r2,zero
   4147c:	f800283a 	ret

00041480 <fclose>:
   41480:	00800174 	movhi	r2,5
   41484:	108d5104 	addi	r2,r2,13636
   41488:	200b883a 	mov	r5,r4
   4148c:	11000017 	ldw	r4,0(r2)
   41490:	00413901 	jmpi	41390 <_fclose_r>

00041494 <__sflush_r>:
   41494:	2880030b 	ldhu	r2,12(r5)
   41498:	defffb04 	addi	sp,sp,-20
   4149c:	dcc00315 	stw	r19,12(sp)
   414a0:	dc400115 	stw	r17,4(sp)
   414a4:	dfc00415 	stw	ra,16(sp)
   414a8:	dc800215 	stw	r18,8(sp)
   414ac:	dc000015 	stw	r16,0(sp)
   414b0:	10c0020c 	andi	r3,r2,8
   414b4:	2823883a 	mov	r17,r5
   414b8:	2027883a 	mov	r19,r4
   414bc:	1800311e 	bne	r3,zero,41584 <__sflush_r+0xf0>
   414c0:	28c00117 	ldw	r3,4(r5)
   414c4:	10820014 	ori	r2,r2,2048
   414c8:	2880030d 	sth	r2,12(r5)
   414cc:	00c04b0e 	bge	zero,r3,415fc <__sflush_r+0x168>
   414d0:	8a000a17 	ldw	r8,40(r17)
   414d4:	40002326 	beq	r8,zero,41564 <__sflush_r+0xd0>
   414d8:	9c000017 	ldw	r16,0(r19)
   414dc:	10c4000c 	andi	r3,r2,4096
   414e0:	98000015 	stw	zero,0(r19)
   414e4:	18004826 	beq	r3,zero,41608 <__sflush_r+0x174>
   414e8:	89801417 	ldw	r6,80(r17)
   414ec:	10c0010c 	andi	r3,r2,4
   414f0:	18000626 	beq	r3,zero,4150c <__sflush_r+0x78>
   414f4:	88c00117 	ldw	r3,4(r17)
   414f8:	88800c17 	ldw	r2,48(r17)
   414fc:	30cdc83a 	sub	r6,r6,r3
   41500:	10000226 	beq	r2,zero,4150c <__sflush_r+0x78>
   41504:	88800f17 	ldw	r2,60(r17)
   41508:	308dc83a 	sub	r6,r6,r2
   4150c:	89400717 	ldw	r5,28(r17)
   41510:	000f883a 	mov	r7,zero
   41514:	9809883a 	mov	r4,r19
   41518:	403ee83a 	callr	r8
   4151c:	00ffffc4 	movi	r3,-1
   41520:	10c04426 	beq	r2,r3,41634 <__sflush_r+0x1a0>
   41524:	88c0030b 	ldhu	r3,12(r17)
   41528:	89000417 	ldw	r4,16(r17)
   4152c:	88000115 	stw	zero,4(r17)
   41530:	197dffcc 	andi	r5,r3,63487
   41534:	8940030d 	sth	r5,12(r17)
   41538:	89000015 	stw	r4,0(r17)
   4153c:	18c4000c 	andi	r3,r3,4096
   41540:	18002c1e 	bne	r3,zero,415f4 <__sflush_r+0x160>
   41544:	89400c17 	ldw	r5,48(r17)
   41548:	9c000015 	stw	r16,0(r19)
   4154c:	28000526 	beq	r5,zero,41564 <__sflush_r+0xd0>
   41550:	88801004 	addi	r2,r17,64
   41554:	28800226 	beq	r5,r2,41560 <__sflush_r+0xcc>
   41558:	9809883a 	mov	r4,r19
   4155c:	0041e080 	call	41e08 <_free_r>
   41560:	88000c15 	stw	zero,48(r17)
   41564:	0005883a 	mov	r2,zero
   41568:	dfc00417 	ldw	ra,16(sp)
   4156c:	dcc00317 	ldw	r19,12(sp)
   41570:	dc800217 	ldw	r18,8(sp)
   41574:	dc400117 	ldw	r17,4(sp)
   41578:	dc000017 	ldw	r16,0(sp)
   4157c:	dec00504 	addi	sp,sp,20
   41580:	f800283a 	ret
   41584:	2c800417 	ldw	r18,16(r5)
   41588:	903ff626 	beq	r18,zero,41564 <__alt_data_end+0xfffe1564>
   4158c:	2c000017 	ldw	r16,0(r5)
   41590:	108000cc 	andi	r2,r2,3
   41594:	2c800015 	stw	r18,0(r5)
   41598:	84a1c83a 	sub	r16,r16,r18
   4159c:	1000131e 	bne	r2,zero,415ec <__sflush_r+0x158>
   415a0:	28800517 	ldw	r2,20(r5)
   415a4:	88800215 	stw	r2,8(r17)
   415a8:	04000316 	blt	zero,r16,415b8 <__sflush_r+0x124>
   415ac:	003fed06 	br	41564 <__alt_data_end+0xfffe1564>
   415b0:	90a5883a 	add	r18,r18,r2
   415b4:	043feb0e 	bge	zero,r16,41564 <__alt_data_end+0xfffe1564>
   415b8:	88800917 	ldw	r2,36(r17)
   415bc:	89400717 	ldw	r5,28(r17)
   415c0:	800f883a 	mov	r7,r16
   415c4:	900d883a 	mov	r6,r18
   415c8:	9809883a 	mov	r4,r19
   415cc:	103ee83a 	callr	r2
   415d0:	80a1c83a 	sub	r16,r16,r2
   415d4:	00bff616 	blt	zero,r2,415b0 <__alt_data_end+0xfffe15b0>
   415d8:	88c0030b 	ldhu	r3,12(r17)
   415dc:	00bfffc4 	movi	r2,-1
   415e0:	18c01014 	ori	r3,r3,64
   415e4:	88c0030d 	sth	r3,12(r17)
   415e8:	003fdf06 	br	41568 <__alt_data_end+0xfffe1568>
   415ec:	0005883a 	mov	r2,zero
   415f0:	003fec06 	br	415a4 <__alt_data_end+0xfffe15a4>
   415f4:	88801415 	stw	r2,80(r17)
   415f8:	003fd206 	br	41544 <__alt_data_end+0xfffe1544>
   415fc:	28c00f17 	ldw	r3,60(r5)
   41600:	00ffb316 	blt	zero,r3,414d0 <__alt_data_end+0xfffe14d0>
   41604:	003fd706 	br	41564 <__alt_data_end+0xfffe1564>
   41608:	89400717 	ldw	r5,28(r17)
   4160c:	000d883a 	mov	r6,zero
   41610:	01c00044 	movi	r7,1
   41614:	9809883a 	mov	r4,r19
   41618:	403ee83a 	callr	r8
   4161c:	100d883a 	mov	r6,r2
   41620:	00bfffc4 	movi	r2,-1
   41624:	30801426 	beq	r6,r2,41678 <__sflush_r+0x1e4>
   41628:	8880030b 	ldhu	r2,12(r17)
   4162c:	8a000a17 	ldw	r8,40(r17)
   41630:	003fae06 	br	414ec <__alt_data_end+0xfffe14ec>
   41634:	98c00017 	ldw	r3,0(r19)
   41638:	183fba26 	beq	r3,zero,41524 <__alt_data_end+0xfffe1524>
   4163c:	01000744 	movi	r4,29
   41640:	19000626 	beq	r3,r4,4165c <__sflush_r+0x1c8>
   41644:	01000584 	movi	r4,22
   41648:	19000426 	beq	r3,r4,4165c <__sflush_r+0x1c8>
   4164c:	88c0030b 	ldhu	r3,12(r17)
   41650:	18c01014 	ori	r3,r3,64
   41654:	88c0030d 	sth	r3,12(r17)
   41658:	003fc306 	br	41568 <__alt_data_end+0xfffe1568>
   4165c:	8880030b 	ldhu	r2,12(r17)
   41660:	88c00417 	ldw	r3,16(r17)
   41664:	88000115 	stw	zero,4(r17)
   41668:	10bdffcc 	andi	r2,r2,63487
   4166c:	8880030d 	sth	r2,12(r17)
   41670:	88c00015 	stw	r3,0(r17)
   41674:	003fb306 	br	41544 <__alt_data_end+0xfffe1544>
   41678:	98800017 	ldw	r2,0(r19)
   4167c:	103fea26 	beq	r2,zero,41628 <__alt_data_end+0xfffe1628>
   41680:	00c00744 	movi	r3,29
   41684:	10c00226 	beq	r2,r3,41690 <__sflush_r+0x1fc>
   41688:	00c00584 	movi	r3,22
   4168c:	10c0031e 	bne	r2,r3,4169c <__sflush_r+0x208>
   41690:	9c000015 	stw	r16,0(r19)
   41694:	0005883a 	mov	r2,zero
   41698:	003fb306 	br	41568 <__alt_data_end+0xfffe1568>
   4169c:	88c0030b 	ldhu	r3,12(r17)
   416a0:	3005883a 	mov	r2,r6
   416a4:	18c01014 	ori	r3,r3,64
   416a8:	88c0030d 	sth	r3,12(r17)
   416ac:	003fae06 	br	41568 <__alt_data_end+0xfffe1568>

000416b0 <_fflush_r>:
   416b0:	defffd04 	addi	sp,sp,-12
   416b4:	dc000115 	stw	r16,4(sp)
   416b8:	dfc00215 	stw	ra,8(sp)
   416bc:	2021883a 	mov	r16,r4
   416c0:	20000226 	beq	r4,zero,416cc <_fflush_r+0x1c>
   416c4:	20800e17 	ldw	r2,56(r4)
   416c8:	10000c26 	beq	r2,zero,416fc <_fflush_r+0x4c>
   416cc:	2880030f 	ldh	r2,12(r5)
   416d0:	1000051e 	bne	r2,zero,416e8 <_fflush_r+0x38>
   416d4:	0005883a 	mov	r2,zero
   416d8:	dfc00217 	ldw	ra,8(sp)
   416dc:	dc000117 	ldw	r16,4(sp)
   416e0:	dec00304 	addi	sp,sp,12
   416e4:	f800283a 	ret
   416e8:	8009883a 	mov	r4,r16
   416ec:	dfc00217 	ldw	ra,8(sp)
   416f0:	dc000117 	ldw	r16,4(sp)
   416f4:	dec00304 	addi	sp,sp,12
   416f8:	00414941 	jmpi	41494 <__sflush_r>
   416fc:	d9400015 	stw	r5,0(sp)
   41700:	0041a9c0 	call	41a9c <__sinit>
   41704:	d9400017 	ldw	r5,0(sp)
   41708:	003ff006 	br	416cc <__alt_data_end+0xfffe16cc>

0004170c <fflush>:
   4170c:	20000526 	beq	r4,zero,41724 <fflush+0x18>
   41710:	00800174 	movhi	r2,5
   41714:	108d5104 	addi	r2,r2,13636
   41718:	200b883a 	mov	r5,r4
   4171c:	11000017 	ldw	r4,0(r2)
   41720:	00416b01 	jmpi	416b0 <_fflush_r>
   41724:	00800174 	movhi	r2,5
   41728:	108d5004 	addi	r2,r2,13632
   4172c:	11000017 	ldw	r4,0(r2)
   41730:	01400134 	movhi	r5,4
   41734:	2945ac04 	addi	r5,r5,5808
   41738:	00426b81 	jmpi	426b8 <_fwalk_reent>

0004173c <__fp_unlock>:
   4173c:	0005883a 	mov	r2,zero
   41740:	f800283a 	ret

00041744 <_cleanup_r>:
   41744:	01400134 	movhi	r5,4
   41748:	2944e404 	addi	r5,r5,5008
   4174c:	00426b81 	jmpi	426b8 <_fwalk_reent>

00041750 <__sinit.part.1>:
   41750:	defff704 	addi	sp,sp,-36
   41754:	00c00134 	movhi	r3,4
   41758:	dfc00815 	stw	ra,32(sp)
   4175c:	ddc00715 	stw	r23,28(sp)
   41760:	dd800615 	stw	r22,24(sp)
   41764:	dd400515 	stw	r21,20(sp)
   41768:	dd000415 	stw	r20,16(sp)
   4176c:	dcc00315 	stw	r19,12(sp)
   41770:	dc800215 	stw	r18,8(sp)
   41774:	dc400115 	stw	r17,4(sp)
   41778:	dc000015 	stw	r16,0(sp)
   4177c:	18c5d104 	addi	r3,r3,5956
   41780:	24000117 	ldw	r16,4(r4)
   41784:	20c00f15 	stw	r3,60(r4)
   41788:	2080bb04 	addi	r2,r4,748
   4178c:	00c000c4 	movi	r3,3
   41790:	20c0b915 	stw	r3,740(r4)
   41794:	2080ba15 	stw	r2,744(r4)
   41798:	2000b815 	stw	zero,736(r4)
   4179c:	05c00204 	movi	r23,8
   417a0:	00800104 	movi	r2,4
   417a4:	2025883a 	mov	r18,r4
   417a8:	b80d883a 	mov	r6,r23
   417ac:	81001704 	addi	r4,r16,92
   417b0:	000b883a 	mov	r5,zero
   417b4:	80000015 	stw	zero,0(r16)
   417b8:	80000115 	stw	zero,4(r16)
   417bc:	80000215 	stw	zero,8(r16)
   417c0:	8080030d 	sth	r2,12(r16)
   417c4:	80001915 	stw	zero,100(r16)
   417c8:	8000038d 	sth	zero,14(r16)
   417cc:	80000415 	stw	zero,16(r16)
   417d0:	80000515 	stw	zero,20(r16)
   417d4:	80000615 	stw	zero,24(r16)
   417d8:	00431440 	call	43144 <memset>
   417dc:	05800134 	movhi	r22,4
   417e0:	94400217 	ldw	r17,8(r18)
   417e4:	05400134 	movhi	r21,4
   417e8:	05000134 	movhi	r20,4
   417ec:	04c00134 	movhi	r19,4
   417f0:	b58dee04 	addi	r22,r22,14264
   417f4:	ad4e0504 	addi	r21,r21,14356
   417f8:	a50e2404 	addi	r20,r20,14480
   417fc:	9cce3b04 	addi	r19,r19,14572
   41800:	85800815 	stw	r22,32(r16)
   41804:	85400915 	stw	r21,36(r16)
   41808:	85000a15 	stw	r20,40(r16)
   4180c:	84c00b15 	stw	r19,44(r16)
   41810:	84000715 	stw	r16,28(r16)
   41814:	00800284 	movi	r2,10
   41818:	8880030d 	sth	r2,12(r17)
   4181c:	00800044 	movi	r2,1
   41820:	b80d883a 	mov	r6,r23
   41824:	89001704 	addi	r4,r17,92
   41828:	000b883a 	mov	r5,zero
   4182c:	88000015 	stw	zero,0(r17)
   41830:	88000115 	stw	zero,4(r17)
   41834:	88000215 	stw	zero,8(r17)
   41838:	88001915 	stw	zero,100(r17)
   4183c:	8880038d 	sth	r2,14(r17)
   41840:	88000415 	stw	zero,16(r17)
   41844:	88000515 	stw	zero,20(r17)
   41848:	88000615 	stw	zero,24(r17)
   4184c:	00431440 	call	43144 <memset>
   41850:	94000317 	ldw	r16,12(r18)
   41854:	00800484 	movi	r2,18
   41858:	8c400715 	stw	r17,28(r17)
   4185c:	8d800815 	stw	r22,32(r17)
   41860:	8d400915 	stw	r21,36(r17)
   41864:	8d000a15 	stw	r20,40(r17)
   41868:	8cc00b15 	stw	r19,44(r17)
   4186c:	8080030d 	sth	r2,12(r16)
   41870:	00800084 	movi	r2,2
   41874:	80000015 	stw	zero,0(r16)
   41878:	80000115 	stw	zero,4(r16)
   4187c:	80000215 	stw	zero,8(r16)
   41880:	80001915 	stw	zero,100(r16)
   41884:	8080038d 	sth	r2,14(r16)
   41888:	80000415 	stw	zero,16(r16)
   4188c:	80000515 	stw	zero,20(r16)
   41890:	80000615 	stw	zero,24(r16)
   41894:	b80d883a 	mov	r6,r23
   41898:	000b883a 	mov	r5,zero
   4189c:	81001704 	addi	r4,r16,92
   418a0:	00431440 	call	43144 <memset>
   418a4:	00800044 	movi	r2,1
   418a8:	84000715 	stw	r16,28(r16)
   418ac:	85800815 	stw	r22,32(r16)
   418b0:	85400915 	stw	r21,36(r16)
   418b4:	85000a15 	stw	r20,40(r16)
   418b8:	84c00b15 	stw	r19,44(r16)
   418bc:	90800e15 	stw	r2,56(r18)
   418c0:	dfc00817 	ldw	ra,32(sp)
   418c4:	ddc00717 	ldw	r23,28(sp)
   418c8:	dd800617 	ldw	r22,24(sp)
   418cc:	dd400517 	ldw	r21,20(sp)
   418d0:	dd000417 	ldw	r20,16(sp)
   418d4:	dcc00317 	ldw	r19,12(sp)
   418d8:	dc800217 	ldw	r18,8(sp)
   418dc:	dc400117 	ldw	r17,4(sp)
   418e0:	dc000017 	ldw	r16,0(sp)
   418e4:	dec00904 	addi	sp,sp,36
   418e8:	f800283a 	ret

000418ec <__fp_lock>:
   418ec:	0005883a 	mov	r2,zero
   418f0:	f800283a 	ret

000418f4 <__sfmoreglue>:
   418f4:	defffc04 	addi	sp,sp,-16
   418f8:	dc800215 	stw	r18,8(sp)
   418fc:	2825883a 	mov	r18,r5
   41900:	dc000015 	stw	r16,0(sp)
   41904:	01401a04 	movi	r5,104
   41908:	2021883a 	mov	r16,r4
   4190c:	913fffc4 	addi	r4,r18,-1
   41910:	dfc00315 	stw	ra,12(sp)
   41914:	dc400115 	stw	r17,4(sp)
   41918:	004131c0 	call	4131c <__mulsi3>
   4191c:	8009883a 	mov	r4,r16
   41920:	11401d04 	addi	r5,r2,116
   41924:	1023883a 	mov	r17,r2
   41928:	00429380 	call	42938 <_malloc_r>
   4192c:	1021883a 	mov	r16,r2
   41930:	10000726 	beq	r2,zero,41950 <__sfmoreglue+0x5c>
   41934:	11000304 	addi	r4,r2,12
   41938:	10000015 	stw	zero,0(r2)
   4193c:	14800115 	stw	r18,4(r2)
   41940:	11000215 	stw	r4,8(r2)
   41944:	89801a04 	addi	r6,r17,104
   41948:	000b883a 	mov	r5,zero
   4194c:	00431440 	call	43144 <memset>
   41950:	8005883a 	mov	r2,r16
   41954:	dfc00317 	ldw	ra,12(sp)
   41958:	dc800217 	ldw	r18,8(sp)
   4195c:	dc400117 	ldw	r17,4(sp)
   41960:	dc000017 	ldw	r16,0(sp)
   41964:	dec00404 	addi	sp,sp,16
   41968:	f800283a 	ret

0004196c <__sfp>:
   4196c:	defffb04 	addi	sp,sp,-20
   41970:	dc000015 	stw	r16,0(sp)
   41974:	04000174 	movhi	r16,5
   41978:	840d5004 	addi	r16,r16,13632
   4197c:	dcc00315 	stw	r19,12(sp)
   41980:	2027883a 	mov	r19,r4
   41984:	81000017 	ldw	r4,0(r16)
   41988:	dfc00415 	stw	ra,16(sp)
   4198c:	dc800215 	stw	r18,8(sp)
   41990:	20800e17 	ldw	r2,56(r4)
   41994:	dc400115 	stw	r17,4(sp)
   41998:	1000021e 	bne	r2,zero,419a4 <__sfp+0x38>
   4199c:	00417500 	call	41750 <__sinit.part.1>
   419a0:	81000017 	ldw	r4,0(r16)
   419a4:	2480b804 	addi	r18,r4,736
   419a8:	047fffc4 	movi	r17,-1
   419ac:	91000117 	ldw	r4,4(r18)
   419b0:	94000217 	ldw	r16,8(r18)
   419b4:	213fffc4 	addi	r4,r4,-1
   419b8:	20000a16 	blt	r4,zero,419e4 <__sfp+0x78>
   419bc:	8080030f 	ldh	r2,12(r16)
   419c0:	10000c26 	beq	r2,zero,419f4 <__sfp+0x88>
   419c4:	80c01d04 	addi	r3,r16,116
   419c8:	00000206 	br	419d4 <__sfp+0x68>
   419cc:	18bfe60f 	ldh	r2,-104(r3)
   419d0:	10000826 	beq	r2,zero,419f4 <__sfp+0x88>
   419d4:	213fffc4 	addi	r4,r4,-1
   419d8:	1c3ffd04 	addi	r16,r3,-12
   419dc:	18c01a04 	addi	r3,r3,104
   419e0:	247ffa1e 	bne	r4,r17,419cc <__alt_data_end+0xfffe19cc>
   419e4:	90800017 	ldw	r2,0(r18)
   419e8:	10001d26 	beq	r2,zero,41a60 <__sfp+0xf4>
   419ec:	1025883a 	mov	r18,r2
   419f0:	003fee06 	br	419ac <__alt_data_end+0xfffe19ac>
   419f4:	00bfffc4 	movi	r2,-1
   419f8:	8080038d 	sth	r2,14(r16)
   419fc:	00800044 	movi	r2,1
   41a00:	8080030d 	sth	r2,12(r16)
   41a04:	80001915 	stw	zero,100(r16)
   41a08:	80000015 	stw	zero,0(r16)
   41a0c:	80000215 	stw	zero,8(r16)
   41a10:	80000115 	stw	zero,4(r16)
   41a14:	80000415 	stw	zero,16(r16)
   41a18:	80000515 	stw	zero,20(r16)
   41a1c:	80000615 	stw	zero,24(r16)
   41a20:	01800204 	movi	r6,8
   41a24:	000b883a 	mov	r5,zero
   41a28:	81001704 	addi	r4,r16,92
   41a2c:	00431440 	call	43144 <memset>
   41a30:	8005883a 	mov	r2,r16
   41a34:	80000c15 	stw	zero,48(r16)
   41a38:	80000d15 	stw	zero,52(r16)
   41a3c:	80001115 	stw	zero,68(r16)
   41a40:	80001215 	stw	zero,72(r16)
   41a44:	dfc00417 	ldw	ra,16(sp)
   41a48:	dcc00317 	ldw	r19,12(sp)
   41a4c:	dc800217 	ldw	r18,8(sp)
   41a50:	dc400117 	ldw	r17,4(sp)
   41a54:	dc000017 	ldw	r16,0(sp)
   41a58:	dec00504 	addi	sp,sp,20
   41a5c:	f800283a 	ret
   41a60:	01400104 	movi	r5,4
   41a64:	9809883a 	mov	r4,r19
   41a68:	00418f40 	call	418f4 <__sfmoreglue>
   41a6c:	90800015 	stw	r2,0(r18)
   41a70:	103fde1e 	bne	r2,zero,419ec <__alt_data_end+0xfffe19ec>
   41a74:	00800304 	movi	r2,12
   41a78:	98800015 	stw	r2,0(r19)
   41a7c:	0005883a 	mov	r2,zero
   41a80:	003ff006 	br	41a44 <__alt_data_end+0xfffe1a44>

00041a84 <_cleanup>:
   41a84:	00800174 	movhi	r2,5
   41a88:	108d5004 	addi	r2,r2,13632
   41a8c:	11000017 	ldw	r4,0(r2)
   41a90:	01400134 	movhi	r5,4
   41a94:	2944e404 	addi	r5,r5,5008
   41a98:	00426b81 	jmpi	426b8 <_fwalk_reent>

00041a9c <__sinit>:
   41a9c:	20800e17 	ldw	r2,56(r4)
   41aa0:	10000126 	beq	r2,zero,41aa8 <__sinit+0xc>
   41aa4:	f800283a 	ret
   41aa8:	00417501 	jmpi	41750 <__sinit.part.1>

00041aac <__sfp_lock_acquire>:
   41aac:	f800283a 	ret

00041ab0 <__sfp_lock_release>:
   41ab0:	f800283a 	ret

00041ab4 <__sinit_lock_acquire>:
   41ab4:	f800283a 	ret

00041ab8 <__sinit_lock_release>:
   41ab8:	f800283a 	ret

00041abc <__fp_lock_all>:
   41abc:	00800174 	movhi	r2,5
   41ac0:	108d5104 	addi	r2,r2,13636
   41ac4:	11000017 	ldw	r4,0(r2)
   41ac8:	01400134 	movhi	r5,4
   41acc:	29463b04 	addi	r5,r5,6380
   41ad0:	00425f41 	jmpi	425f4 <_fwalk>

00041ad4 <__fp_unlock_all>:
   41ad4:	00800174 	movhi	r2,5
   41ad8:	108d5104 	addi	r2,r2,13636
   41adc:	11000017 	ldw	r4,0(r2)
   41ae0:	01400134 	movhi	r5,4
   41ae4:	2945cf04 	addi	r5,r5,5948
   41ae8:	00425f41 	jmpi	425f4 <_fwalk>

00041aec <_fopen_r>:
   41aec:	defffa04 	addi	sp,sp,-24
   41af0:	3005883a 	mov	r2,r6
   41af4:	dcc00415 	stw	r19,16(sp)
   41af8:	d80d883a 	mov	r6,sp
   41afc:	2827883a 	mov	r19,r5
   41b00:	100b883a 	mov	r5,r2
   41b04:	dc800315 	stw	r18,12(sp)
   41b08:	dfc00515 	stw	ra,20(sp)
   41b0c:	dc400215 	stw	r17,8(sp)
   41b10:	dc000115 	stw	r16,4(sp)
   41b14:	2025883a 	mov	r18,r4
   41b18:	0047a6c0 	call	47a6c <__sflags>
   41b1c:	10002726 	beq	r2,zero,41bbc <_fopen_r+0xd0>
   41b20:	9009883a 	mov	r4,r18
   41b24:	1023883a 	mov	r17,r2
   41b28:	004196c0 	call	4196c <__sfp>
   41b2c:	1021883a 	mov	r16,r2
   41b30:	10002226 	beq	r2,zero,41bbc <_fopen_r+0xd0>
   41b34:	d9800017 	ldw	r6,0(sp)
   41b38:	01c06d84 	movi	r7,438
   41b3c:	980b883a 	mov	r5,r19
   41b40:	9009883a 	mov	r4,r18
   41b44:	004326c0 	call	4326c <_open_r>
   41b48:	10001916 	blt	r2,zero,41bb0 <_fopen_r+0xc4>
   41b4c:	8080038d 	sth	r2,14(r16)
   41b50:	00800134 	movhi	r2,4
   41b54:	108dee04 	addi	r2,r2,14264
   41b58:	80800815 	stw	r2,32(r16)
   41b5c:	00800134 	movhi	r2,4
   41b60:	108e0504 	addi	r2,r2,14356
   41b64:	80800915 	stw	r2,36(r16)
   41b68:	00800134 	movhi	r2,4
   41b6c:	108e2404 	addi	r2,r2,14480
   41b70:	80800a15 	stw	r2,40(r16)
   41b74:	00800134 	movhi	r2,4
   41b78:	108e3b04 	addi	r2,r2,14572
   41b7c:	8440030d 	sth	r17,12(r16)
   41b80:	84000715 	stw	r16,28(r16)
   41b84:	80800b15 	stw	r2,44(r16)
   41b88:	8c40400c 	andi	r17,r17,256
   41b8c:	88000d1e 	bne	r17,zero,41bc4 <_fopen_r+0xd8>
   41b90:	8005883a 	mov	r2,r16
   41b94:	dfc00517 	ldw	ra,20(sp)
   41b98:	dcc00417 	ldw	r19,16(sp)
   41b9c:	dc800317 	ldw	r18,12(sp)
   41ba0:	dc400217 	ldw	r17,8(sp)
   41ba4:	dc000117 	ldw	r16,4(sp)
   41ba8:	dec00604 	addi	sp,sp,24
   41bac:	f800283a 	ret
   41bb0:	0041aac0 	call	41aac <__sfp_lock_acquire>
   41bb4:	8000030d 	sth	zero,12(r16)
   41bb8:	0041ab00 	call	41ab0 <__sfp_lock_release>
   41bbc:	0005883a 	mov	r2,zero
   41bc0:	003ff406 	br	41b94 <__alt_data_end+0xfffe1b94>
   41bc4:	01c00084 	movi	r7,2
   41bc8:	000d883a 	mov	r6,zero
   41bcc:	800b883a 	mov	r5,r16
   41bd0:	9009883a 	mov	r4,r18
   41bd4:	00421180 	call	42118 <_fseek_r>
   41bd8:	8005883a 	mov	r2,r16
   41bdc:	003fed06 	br	41b94 <__alt_data_end+0xfffe1b94>

00041be0 <fopen>:
   41be0:	00800174 	movhi	r2,5
   41be4:	108d5104 	addi	r2,r2,13636
   41be8:	280d883a 	mov	r6,r5
   41bec:	200b883a 	mov	r5,r4
   41bf0:	11000017 	ldw	r4,0(r2)
   41bf4:	0041aec1 	jmpi	41aec <_fopen_r>

00041bf8 <_fprintf_r>:
   41bf8:	defffe04 	addi	sp,sp,-8
   41bfc:	2809883a 	mov	r4,r5
   41c00:	300b883a 	mov	r5,r6
   41c04:	dfc00015 	stw	ra,0(sp)
   41c08:	d9c00115 	stw	r7,4(sp)
   41c0c:	d9800104 	addi	r6,sp,4
   41c10:	0045d840 	call	45d84 <__vfprintf_internal>
   41c14:	dfc00017 	ldw	ra,0(sp)
   41c18:	dec00204 	addi	sp,sp,8
   41c1c:	f800283a 	ret

00041c20 <fprintf>:
   41c20:	defffd04 	addi	sp,sp,-12
   41c24:	dfc00015 	stw	ra,0(sp)
   41c28:	d9800115 	stw	r6,4(sp)
   41c2c:	d9c00215 	stw	r7,8(sp)
   41c30:	d9800104 	addi	r6,sp,4
   41c34:	0045d840 	call	45d84 <__vfprintf_internal>
   41c38:	dfc00017 	ldw	ra,0(sp)
   41c3c:	dec00304 	addi	sp,sp,12
   41c40:	f800283a 	ret

00041c44 <_fputc_r>:
   41c44:	defffc04 	addi	sp,sp,-16
   41c48:	dc000215 	stw	r16,8(sp)
   41c4c:	dfc00315 	stw	ra,12(sp)
   41c50:	2021883a 	mov	r16,r4
   41c54:	20000726 	beq	r4,zero,41c74 <_fputc_r+0x30>
   41c58:	20800e17 	ldw	r2,56(r4)
   41c5c:	1000051e 	bne	r2,zero,41c74 <_fputc_r+0x30>
   41c60:	d9400015 	stw	r5,0(sp)
   41c64:	d9800115 	stw	r6,4(sp)
   41c68:	0041a9c0 	call	41a9c <__sinit>
   41c6c:	d9800117 	ldw	r6,4(sp)
   41c70:	d9400017 	ldw	r5,0(sp)
   41c74:	8009883a 	mov	r4,r16
   41c78:	dfc00317 	ldw	ra,12(sp)
   41c7c:	dc000217 	ldw	r16,8(sp)
   41c80:	dec00404 	addi	sp,sp,16
   41c84:	00433381 	jmpi	43338 <_putc_r>

00041c88 <fputc>:
   41c88:	00800174 	movhi	r2,5
   41c8c:	defffc04 	addi	sp,sp,-16
   41c90:	108d5104 	addi	r2,r2,13636
   41c94:	dc000115 	stw	r16,4(sp)
   41c98:	14000017 	ldw	r16,0(r2)
   41c9c:	dc400215 	stw	r17,8(sp)
   41ca0:	dfc00315 	stw	ra,12(sp)
   41ca4:	2023883a 	mov	r17,r4
   41ca8:	80000626 	beq	r16,zero,41cc4 <fputc+0x3c>
   41cac:	80800e17 	ldw	r2,56(r16)
   41cb0:	1000041e 	bne	r2,zero,41cc4 <fputc+0x3c>
   41cb4:	8009883a 	mov	r4,r16
   41cb8:	d9400015 	stw	r5,0(sp)
   41cbc:	0041a9c0 	call	41a9c <__sinit>
   41cc0:	d9400017 	ldw	r5,0(sp)
   41cc4:	280d883a 	mov	r6,r5
   41cc8:	8009883a 	mov	r4,r16
   41ccc:	880b883a 	mov	r5,r17
   41cd0:	dfc00317 	ldw	ra,12(sp)
   41cd4:	dc400217 	ldw	r17,8(sp)
   41cd8:	dc000117 	ldw	r16,4(sp)
   41cdc:	dec00404 	addi	sp,sp,16
   41ce0:	00433381 	jmpi	43338 <_putc_r>

00041ce4 <_malloc_trim_r>:
   41ce4:	defffb04 	addi	sp,sp,-20
   41ce8:	dcc00315 	stw	r19,12(sp)
   41cec:	04c00174 	movhi	r19,5
   41cf0:	dc800215 	stw	r18,8(sp)
   41cf4:	dc400115 	stw	r17,4(sp)
   41cf8:	dc000015 	stw	r16,0(sp)
   41cfc:	dfc00415 	stw	ra,16(sp)
   41d00:	2821883a 	mov	r16,r5
   41d04:	9cc7a404 	addi	r19,r19,7824
   41d08:	2025883a 	mov	r18,r4
   41d0c:	004e7d40 	call	4e7d4 <__malloc_lock>
   41d10:	98800217 	ldw	r2,8(r19)
   41d14:	14400117 	ldw	r17,4(r2)
   41d18:	00bfff04 	movi	r2,-4
   41d1c:	88a2703a 	and	r17,r17,r2
   41d20:	8c21c83a 	sub	r16,r17,r16
   41d24:	8403fbc4 	addi	r16,r16,4079
   41d28:	8020d33a 	srli	r16,r16,12
   41d2c:	0083ffc4 	movi	r2,4095
   41d30:	843fffc4 	addi	r16,r16,-1
   41d34:	8020933a 	slli	r16,r16,12
   41d38:	1400060e 	bge	r2,r16,41d54 <_malloc_trim_r+0x70>
   41d3c:	000b883a 	mov	r5,zero
   41d40:	9009883a 	mov	r4,r18
   41d44:	00437640 	call	43764 <_sbrk_r>
   41d48:	98c00217 	ldw	r3,8(r19)
   41d4c:	1c47883a 	add	r3,r3,r17
   41d50:	10c00a26 	beq	r2,r3,41d7c <_malloc_trim_r+0x98>
   41d54:	9009883a 	mov	r4,r18
   41d58:	004e7f40 	call	4e7f4 <__malloc_unlock>
   41d5c:	0005883a 	mov	r2,zero
   41d60:	dfc00417 	ldw	ra,16(sp)
   41d64:	dcc00317 	ldw	r19,12(sp)
   41d68:	dc800217 	ldw	r18,8(sp)
   41d6c:	dc400117 	ldw	r17,4(sp)
   41d70:	dc000017 	ldw	r16,0(sp)
   41d74:	dec00504 	addi	sp,sp,20
   41d78:	f800283a 	ret
   41d7c:	040bc83a 	sub	r5,zero,r16
   41d80:	9009883a 	mov	r4,r18
   41d84:	00437640 	call	43764 <_sbrk_r>
   41d88:	00ffffc4 	movi	r3,-1
   41d8c:	10c00d26 	beq	r2,r3,41dc4 <_malloc_trim_r+0xe0>
   41d90:	00c00174 	movhi	r3,5
   41d94:	18d47604 	addi	r3,r3,20952
   41d98:	18800017 	ldw	r2,0(r3)
   41d9c:	99000217 	ldw	r4,8(r19)
   41da0:	8c23c83a 	sub	r17,r17,r16
   41da4:	8c400054 	ori	r17,r17,1
   41da8:	1421c83a 	sub	r16,r2,r16
   41dac:	24400115 	stw	r17,4(r4)
   41db0:	9009883a 	mov	r4,r18
   41db4:	1c000015 	stw	r16,0(r3)
   41db8:	004e7f40 	call	4e7f4 <__malloc_unlock>
   41dbc:	00800044 	movi	r2,1
   41dc0:	003fe706 	br	41d60 <__alt_data_end+0xfffe1d60>
   41dc4:	000b883a 	mov	r5,zero
   41dc8:	9009883a 	mov	r4,r18
   41dcc:	00437640 	call	43764 <_sbrk_r>
   41dd0:	99000217 	ldw	r4,8(r19)
   41dd4:	014003c4 	movi	r5,15
   41dd8:	1107c83a 	sub	r3,r2,r4
   41ddc:	28ffdd0e 	bge	r5,r3,41d54 <__alt_data_end+0xfffe1d54>
   41de0:	01400174 	movhi	r5,5
   41de4:	294d5204 	addi	r5,r5,13640
   41de8:	29400017 	ldw	r5,0(r5)
   41dec:	18c00054 	ori	r3,r3,1
   41df0:	20c00115 	stw	r3,4(r4)
   41df4:	00c00174 	movhi	r3,5
   41df8:	1145c83a 	sub	r2,r2,r5
   41dfc:	18d47604 	addi	r3,r3,20952
   41e00:	18800015 	stw	r2,0(r3)
   41e04:	003fd306 	br	41d54 <__alt_data_end+0xfffe1d54>

00041e08 <_free_r>:
   41e08:	28004126 	beq	r5,zero,41f10 <_free_r+0x108>
   41e0c:	defffd04 	addi	sp,sp,-12
   41e10:	dc400115 	stw	r17,4(sp)
   41e14:	dc000015 	stw	r16,0(sp)
   41e18:	2023883a 	mov	r17,r4
   41e1c:	2821883a 	mov	r16,r5
   41e20:	dfc00215 	stw	ra,8(sp)
   41e24:	004e7d40 	call	4e7d4 <__malloc_lock>
   41e28:	81ffff17 	ldw	r7,-4(r16)
   41e2c:	00bfff84 	movi	r2,-2
   41e30:	01000174 	movhi	r4,5
   41e34:	81bffe04 	addi	r6,r16,-8
   41e38:	3884703a 	and	r2,r7,r2
   41e3c:	2107a404 	addi	r4,r4,7824
   41e40:	308b883a 	add	r5,r6,r2
   41e44:	2a400117 	ldw	r9,4(r5)
   41e48:	22000217 	ldw	r8,8(r4)
   41e4c:	00ffff04 	movi	r3,-4
   41e50:	48c6703a 	and	r3,r9,r3
   41e54:	2a005726 	beq	r5,r8,41fb4 <_free_r+0x1ac>
   41e58:	28c00115 	stw	r3,4(r5)
   41e5c:	39c0004c 	andi	r7,r7,1
   41e60:	3800091e 	bne	r7,zero,41e88 <_free_r+0x80>
   41e64:	823ffe17 	ldw	r8,-8(r16)
   41e68:	22400204 	addi	r9,r4,8
   41e6c:	320dc83a 	sub	r6,r6,r8
   41e70:	31c00217 	ldw	r7,8(r6)
   41e74:	1205883a 	add	r2,r2,r8
   41e78:	3a406526 	beq	r7,r9,42010 <_free_r+0x208>
   41e7c:	32000317 	ldw	r8,12(r6)
   41e80:	3a000315 	stw	r8,12(r7)
   41e84:	41c00215 	stw	r7,8(r8)
   41e88:	28cf883a 	add	r7,r5,r3
   41e8c:	39c00117 	ldw	r7,4(r7)
   41e90:	39c0004c 	andi	r7,r7,1
   41e94:	38003a26 	beq	r7,zero,41f80 <_free_r+0x178>
   41e98:	10c00054 	ori	r3,r2,1
   41e9c:	30c00115 	stw	r3,4(r6)
   41ea0:	3087883a 	add	r3,r6,r2
   41ea4:	18800015 	stw	r2,0(r3)
   41ea8:	00c07fc4 	movi	r3,511
   41eac:	18801936 	bltu	r3,r2,41f14 <_free_r+0x10c>
   41eb0:	1004d0fa 	srli	r2,r2,3
   41eb4:	01c00044 	movi	r7,1
   41eb8:	21400117 	ldw	r5,4(r4)
   41ebc:	10c00044 	addi	r3,r2,1
   41ec0:	18c7883a 	add	r3,r3,r3
   41ec4:	1005d0ba 	srai	r2,r2,2
   41ec8:	18c7883a 	add	r3,r3,r3
   41ecc:	18c7883a 	add	r3,r3,r3
   41ed0:	1907883a 	add	r3,r3,r4
   41ed4:	3884983a 	sll	r2,r7,r2
   41ed8:	19c00017 	ldw	r7,0(r3)
   41edc:	1a3ffe04 	addi	r8,r3,-8
   41ee0:	1144b03a 	or	r2,r2,r5
   41ee4:	32000315 	stw	r8,12(r6)
   41ee8:	31c00215 	stw	r7,8(r6)
   41eec:	20800115 	stw	r2,4(r4)
   41ef0:	19800015 	stw	r6,0(r3)
   41ef4:	39800315 	stw	r6,12(r7)
   41ef8:	8809883a 	mov	r4,r17
   41efc:	dfc00217 	ldw	ra,8(sp)
   41f00:	dc400117 	ldw	r17,4(sp)
   41f04:	dc000017 	ldw	r16,0(sp)
   41f08:	dec00304 	addi	sp,sp,12
   41f0c:	004e7f41 	jmpi	4e7f4 <__malloc_unlock>
   41f10:	f800283a 	ret
   41f14:	100ad27a 	srli	r5,r2,9
   41f18:	00c00104 	movi	r3,4
   41f1c:	19404a36 	bltu	r3,r5,42048 <_free_r+0x240>
   41f20:	100ad1ba 	srli	r5,r2,6
   41f24:	28c00e44 	addi	r3,r5,57
   41f28:	18c7883a 	add	r3,r3,r3
   41f2c:	29400e04 	addi	r5,r5,56
   41f30:	18c7883a 	add	r3,r3,r3
   41f34:	18c7883a 	add	r3,r3,r3
   41f38:	1909883a 	add	r4,r3,r4
   41f3c:	20c00017 	ldw	r3,0(r4)
   41f40:	01c00174 	movhi	r7,5
   41f44:	213ffe04 	addi	r4,r4,-8
   41f48:	39c7a404 	addi	r7,r7,7824
   41f4c:	20c04426 	beq	r4,r3,42060 <_free_r+0x258>
   41f50:	01ffff04 	movi	r7,-4
   41f54:	19400117 	ldw	r5,4(r3)
   41f58:	29ca703a 	and	r5,r5,r7
   41f5c:	1140022e 	bgeu	r2,r5,41f68 <_free_r+0x160>
   41f60:	18c00217 	ldw	r3,8(r3)
   41f64:	20fffb1e 	bne	r4,r3,41f54 <__alt_data_end+0xfffe1f54>
   41f68:	19000317 	ldw	r4,12(r3)
   41f6c:	31000315 	stw	r4,12(r6)
   41f70:	30c00215 	stw	r3,8(r6)
   41f74:	21800215 	stw	r6,8(r4)
   41f78:	19800315 	stw	r6,12(r3)
   41f7c:	003fde06 	br	41ef8 <__alt_data_end+0xfffe1ef8>
   41f80:	29c00217 	ldw	r7,8(r5)
   41f84:	10c5883a 	add	r2,r2,r3
   41f88:	00c00174 	movhi	r3,5
   41f8c:	18c7a604 	addi	r3,r3,7832
   41f90:	38c03b26 	beq	r7,r3,42080 <_free_r+0x278>
   41f94:	2a000317 	ldw	r8,12(r5)
   41f98:	11400054 	ori	r5,r2,1
   41f9c:	3087883a 	add	r3,r6,r2
   41fa0:	3a000315 	stw	r8,12(r7)
   41fa4:	41c00215 	stw	r7,8(r8)
   41fa8:	31400115 	stw	r5,4(r6)
   41fac:	18800015 	stw	r2,0(r3)
   41fb0:	003fbd06 	br	41ea8 <__alt_data_end+0xfffe1ea8>
   41fb4:	39c0004c 	andi	r7,r7,1
   41fb8:	10c5883a 	add	r2,r2,r3
   41fbc:	3800071e 	bne	r7,zero,41fdc <_free_r+0x1d4>
   41fc0:	81fffe17 	ldw	r7,-8(r16)
   41fc4:	31cdc83a 	sub	r6,r6,r7
   41fc8:	30c00317 	ldw	r3,12(r6)
   41fcc:	31400217 	ldw	r5,8(r6)
   41fd0:	11c5883a 	add	r2,r2,r7
   41fd4:	28c00315 	stw	r3,12(r5)
   41fd8:	19400215 	stw	r5,8(r3)
   41fdc:	10c00054 	ori	r3,r2,1
   41fe0:	30c00115 	stw	r3,4(r6)
   41fe4:	00c00174 	movhi	r3,5
   41fe8:	18cd5304 	addi	r3,r3,13644
   41fec:	18c00017 	ldw	r3,0(r3)
   41ff0:	21800215 	stw	r6,8(r4)
   41ff4:	10ffc036 	bltu	r2,r3,41ef8 <__alt_data_end+0xfffe1ef8>
   41ff8:	00800174 	movhi	r2,5
   41ffc:	10946c04 	addi	r2,r2,20912
   42000:	11400017 	ldw	r5,0(r2)
   42004:	8809883a 	mov	r4,r17
   42008:	0041ce40 	call	41ce4 <_malloc_trim_r>
   4200c:	003fba06 	br	41ef8 <__alt_data_end+0xfffe1ef8>
   42010:	28c9883a 	add	r4,r5,r3
   42014:	21000117 	ldw	r4,4(r4)
   42018:	2100004c 	andi	r4,r4,1
   4201c:	2000391e 	bne	r4,zero,42104 <_free_r+0x2fc>
   42020:	29c00217 	ldw	r7,8(r5)
   42024:	29000317 	ldw	r4,12(r5)
   42028:	1885883a 	add	r2,r3,r2
   4202c:	10c00054 	ori	r3,r2,1
   42030:	39000315 	stw	r4,12(r7)
   42034:	21c00215 	stw	r7,8(r4)
   42038:	30c00115 	stw	r3,4(r6)
   4203c:	308d883a 	add	r6,r6,r2
   42040:	30800015 	stw	r2,0(r6)
   42044:	003fac06 	br	41ef8 <__alt_data_end+0xfffe1ef8>
   42048:	00c00504 	movi	r3,20
   4204c:	19401536 	bltu	r3,r5,420a4 <_free_r+0x29c>
   42050:	28c01704 	addi	r3,r5,92
   42054:	18c7883a 	add	r3,r3,r3
   42058:	294016c4 	addi	r5,r5,91
   4205c:	003fb406 	br	41f30 <__alt_data_end+0xfffe1f30>
   42060:	280bd0ba 	srai	r5,r5,2
   42064:	00c00044 	movi	r3,1
   42068:	38800117 	ldw	r2,4(r7)
   4206c:	194a983a 	sll	r5,r3,r5
   42070:	2007883a 	mov	r3,r4
   42074:	2884b03a 	or	r2,r5,r2
   42078:	38800115 	stw	r2,4(r7)
   4207c:	003fbb06 	br	41f6c <__alt_data_end+0xfffe1f6c>
   42080:	21800515 	stw	r6,20(r4)
   42084:	21800415 	stw	r6,16(r4)
   42088:	10c00054 	ori	r3,r2,1
   4208c:	31c00315 	stw	r7,12(r6)
   42090:	31c00215 	stw	r7,8(r6)
   42094:	30c00115 	stw	r3,4(r6)
   42098:	308d883a 	add	r6,r6,r2
   4209c:	30800015 	stw	r2,0(r6)
   420a0:	003f9506 	br	41ef8 <__alt_data_end+0xfffe1ef8>
   420a4:	00c01504 	movi	r3,84
   420a8:	19400536 	bltu	r3,r5,420c0 <_free_r+0x2b8>
   420ac:	100ad33a 	srli	r5,r2,12
   420b0:	28c01bc4 	addi	r3,r5,111
   420b4:	18c7883a 	add	r3,r3,r3
   420b8:	29401b84 	addi	r5,r5,110
   420bc:	003f9c06 	br	41f30 <__alt_data_end+0xfffe1f30>
   420c0:	00c05504 	movi	r3,340
   420c4:	19400536 	bltu	r3,r5,420dc <_free_r+0x2d4>
   420c8:	100ad3fa 	srli	r5,r2,15
   420cc:	28c01e04 	addi	r3,r5,120
   420d0:	18c7883a 	add	r3,r3,r3
   420d4:	29401dc4 	addi	r5,r5,119
   420d8:	003f9506 	br	41f30 <__alt_data_end+0xfffe1f30>
   420dc:	00c15504 	movi	r3,1364
   420e0:	19400536 	bltu	r3,r5,420f8 <_free_r+0x2f0>
   420e4:	100ad4ba 	srli	r5,r2,18
   420e8:	28c01f44 	addi	r3,r5,125
   420ec:	18c7883a 	add	r3,r3,r3
   420f0:	29401f04 	addi	r5,r5,124
   420f4:	003f8e06 	br	41f30 <__alt_data_end+0xfffe1f30>
   420f8:	00c03f84 	movi	r3,254
   420fc:	01401f84 	movi	r5,126
   42100:	003f8b06 	br	41f30 <__alt_data_end+0xfffe1f30>
   42104:	10c00054 	ori	r3,r2,1
   42108:	30c00115 	stw	r3,4(r6)
   4210c:	308d883a 	add	r6,r6,r2
   42110:	30800015 	stw	r2,0(r6)
   42114:	003f7806 	br	41ef8 <__alt_data_end+0xfffe1ef8>

00042118 <_fseek_r>:
   42118:	00421381 	jmpi	42138 <_fseeko_r>

0004211c <fseek>:
   4211c:	00800174 	movhi	r2,5
   42120:	108d5104 	addi	r2,r2,13636
   42124:	300f883a 	mov	r7,r6
   42128:	280d883a 	mov	r6,r5
   4212c:	200b883a 	mov	r5,r4
   42130:	11000017 	ldw	r4,0(r2)
   42134:	00421381 	jmpi	42138 <_fseeko_r>

00042138 <_fseeko_r>:
   42138:	deffe804 	addi	sp,sp,-96
   4213c:	dd401415 	stw	r21,80(sp)
   42140:	dc801115 	stw	r18,68(sp)
   42144:	dc401015 	stw	r17,64(sp)
   42148:	dc000f15 	stw	r16,60(sp)
   4214c:	dfc01715 	stw	ra,92(sp)
   42150:	ddc01615 	stw	r23,88(sp)
   42154:	dd801515 	stw	r22,84(sp)
   42158:	dd001315 	stw	r20,76(sp)
   4215c:	dcc01215 	stw	r19,72(sp)
   42160:	2023883a 	mov	r17,r4
   42164:	2821883a 	mov	r16,r5
   42168:	302b883a 	mov	r21,r6
   4216c:	3825883a 	mov	r18,r7
   42170:	20000226 	beq	r4,zero,4217c <_fseeko_r+0x44>
   42174:	20800e17 	ldw	r2,56(r4)
   42178:	10005a26 	beq	r2,zero,422e4 <_fseeko_r+0x1ac>
   4217c:	8080030b 	ldhu	r2,12(r16)
   42180:	00c04204 	movi	r3,264
   42184:	1080420c 	andi	r2,r2,264
   42188:	10c05b26 	beq	r2,r3,422f8 <_fseeko_r+0x1c0>
   4218c:	85000a17 	ldw	r20,40(r16)
   42190:	a000f626 	beq	r20,zero,4256c <_fseeko_r+0x434>
   42194:	00800044 	movi	r2,1
   42198:	90803e26 	beq	r18,r2,42294 <_fseeko_r+0x15c>
   4219c:	00800084 	movi	r2,2
   421a0:	90801026 	beq	r18,r2,421e4 <_fseeko_r+0xac>
   421a4:	90000f26 	beq	r18,zero,421e4 <_fseeko_r+0xac>
   421a8:	00800584 	movi	r2,22
   421ac:	88800015 	stw	r2,0(r17)
   421b0:	04ffffc4 	movi	r19,-1
   421b4:	9805883a 	mov	r2,r19
   421b8:	dfc01717 	ldw	ra,92(sp)
   421bc:	ddc01617 	ldw	r23,88(sp)
   421c0:	dd801517 	ldw	r22,84(sp)
   421c4:	dd401417 	ldw	r21,80(sp)
   421c8:	dd001317 	ldw	r20,76(sp)
   421cc:	dcc01217 	ldw	r19,72(sp)
   421d0:	dc801117 	ldw	r18,68(sp)
   421d4:	dc401017 	ldw	r17,64(sp)
   421d8:	dc000f17 	ldw	r16,60(sp)
   421dc:	dec01804 	addi	sp,sp,96
   421e0:	f800283a 	ret
   421e4:	80800417 	ldw	r2,16(r16)
   421e8:	002f883a 	mov	r23,zero
   421ec:	0027883a 	mov	r19,zero
   421f0:	1000cb26 	beq	r2,zero,42520 <_fseeko_r+0x3e8>
   421f4:	8080030b 	ldhu	r2,12(r16)
   421f8:	10c2068c 	andi	r3,r2,2074
   421fc:	1800071e 	bne	r3,zero,4221c <_fseeko_r+0xe4>
   42200:	10c1000c 	andi	r3,r2,1024
   42204:	1800451e 	bne	r3,zero,4231c <_fseeko_r+0x1e4>
   42208:	00c00134 	movhi	r3,4
   4220c:	18ce2404 	addi	r3,r3,14480
   42210:	a0c0b726 	beq	r20,r3,424f0 <_fseeko_r+0x3b8>
   42214:	10820014 	ori	r2,r2,2048
   42218:	8080030d 	sth	r2,12(r16)
   4221c:	800b883a 	mov	r5,r16
   42220:	8809883a 	mov	r4,r17
   42224:	00416b00 	call	416b0 <_fflush_r>
   42228:	1027883a 	mov	r19,r2
   4222c:	103fe01e 	bne	r2,zero,421b0 <__alt_data_end+0xfffe21b0>
   42230:	81400717 	ldw	r5,28(r16)
   42234:	900f883a 	mov	r7,r18
   42238:	a80d883a 	mov	r6,r21
   4223c:	8809883a 	mov	r4,r17
   42240:	a03ee83a 	callr	r20
   42244:	00ffffc4 	movi	r3,-1
   42248:	10ffd926 	beq	r2,r3,421b0 <__alt_data_end+0xfffe21b0>
   4224c:	81400c17 	ldw	r5,48(r16)
   42250:	28000526 	beq	r5,zero,42268 <_fseeko_r+0x130>
   42254:	80801004 	addi	r2,r16,64
   42258:	28800226 	beq	r5,r2,42264 <_fseeko_r+0x12c>
   4225c:	8809883a 	mov	r4,r17
   42260:	0041e080 	call	41e08 <_free_r>
   42264:	80000c15 	stw	zero,48(r16)
   42268:	8080030b 	ldhu	r2,12(r16)
   4226c:	80c00417 	ldw	r3,16(r16)
   42270:	80000115 	stw	zero,4(r16)
   42274:	10bdf7cc 	andi	r2,r2,63455
   42278:	80c00015 	stw	r3,0(r16)
   4227c:	8080030d 	sth	r2,12(r16)
   42280:	01800204 	movi	r6,8
   42284:	000b883a 	mov	r5,zero
   42288:	81001704 	addi	r4,r16,92
   4228c:	00431440 	call	43144 <memset>
   42290:	003fc806 	br	421b4 <__alt_data_end+0xfffe21b4>
   42294:	800b883a 	mov	r5,r16
   42298:	8809883a 	mov	r4,r17
   4229c:	00416b00 	call	416b0 <_fflush_r>
   422a0:	8080030b 	ldhu	r2,12(r16)
   422a4:	10c4000c 	andi	r3,r2,4096
   422a8:	18008726 	beq	r3,zero,424c8 <_fseeko_r+0x390>
   422ac:	84c01417 	ldw	r19,80(r16)
   422b0:	10c0010c 	andi	r3,r2,4
   422b4:	1800431e 	bne	r3,zero,423c4 <_fseeko_r+0x28c>
   422b8:	1080020c 	andi	r2,r2,8
   422bc:	10008026 	beq	r2,zero,424c0 <_fseeko_r+0x388>
   422c0:	80c00017 	ldw	r3,0(r16)
   422c4:	80800417 	ldw	r2,16(r16)
   422c8:	18000226 	beq	r3,zero,422d4 <_fseeko_r+0x19c>
   422cc:	1887c83a 	sub	r3,r3,r2
   422d0:	98e7883a 	add	r19,r19,r3
   422d4:	aceb883a 	add	r21,r21,r19
   422d8:	05c00044 	movi	r23,1
   422dc:	0025883a 	mov	r18,zero
   422e0:	003fc306 	br	421f0 <__alt_data_end+0xfffe21f0>
   422e4:	0041a9c0 	call	41a9c <__sinit>
   422e8:	8080030b 	ldhu	r2,12(r16)
   422ec:	00c04204 	movi	r3,264
   422f0:	1080420c 	andi	r2,r2,264
   422f4:	10ffa51e 	bne	r2,r3,4218c <__alt_data_end+0xfffe218c>
   422f8:	800b883a 	mov	r5,r16
   422fc:	8809883a 	mov	r4,r17
   42300:	00416b00 	call	416b0 <_fflush_r>
   42304:	003fa106 	br	4218c <__alt_data_end+0xfffe218c>
   42308:	8080030b 	ldhu	r2,12(r16)
   4230c:	00c10004 	movi	r3,1024
   42310:	80c01315 	stw	r3,76(r16)
   42314:	10c4b03a 	or	r2,r2,r3
   42318:	8080030d 	sth	r2,12(r16)
   4231c:	9000311e 	bne	r18,zero,423e4 <_fseeko_r+0x2ac>
   42320:	a82d883a 	mov	r22,r21
   42324:	b800371e 	bne	r23,zero,42404 <_fseeko_r+0x2cc>
   42328:	8080030b 	ldhu	r2,12(r16)
   4232c:	1084000c 	andi	r2,r2,4096
   42330:	10007f26 	beq	r2,zero,42530 <_fseeko_r+0x3f8>
   42334:	80801417 	ldw	r2,80(r16)
   42338:	81800117 	ldw	r6,4(r16)
   4233c:	81400c17 	ldw	r5,48(r16)
   42340:	11a7c83a 	sub	r19,r2,r6
   42344:	28008226 	beq	r5,zero,42550 <_fseeko_r+0x418>
   42348:	81c00f17 	ldw	r7,60(r16)
   4234c:	99e7c83a 	sub	r19,r19,r7
   42350:	81000e17 	ldw	r4,56(r16)
   42354:	80800417 	ldw	r2,16(r16)
   42358:	99a7883a 	add	r19,r19,r6
   4235c:	2087c83a 	sub	r3,r4,r2
   42360:	98e7c83a 	sub	r19,r19,r3
   42364:	38c7883a 	add	r3,r7,r3
   42368:	b4c02b16 	blt	r22,r19,42418 <_fseeko_r+0x2e0>
   4236c:	98c9883a 	add	r4,r19,r3
   42370:	b100292e 	bgeu	r22,r4,42418 <_fseeko_r+0x2e0>
   42374:	b4e7c83a 	sub	r19,r22,r19
   42378:	14c5883a 	add	r2,r2,r19
   4237c:	1ce7c83a 	sub	r19,r3,r19
   42380:	80800015 	stw	r2,0(r16)
   42384:	84c00115 	stw	r19,4(r16)
   42388:	28000526 	beq	r5,zero,423a0 <_fseeko_r+0x268>
   4238c:	80801004 	addi	r2,r16,64
   42390:	28800226 	beq	r5,r2,4239c <_fseeko_r+0x264>
   42394:	8809883a 	mov	r4,r17
   42398:	0041e080 	call	41e08 <_free_r>
   4239c:	80000c15 	stw	zero,48(r16)
   423a0:	8080030b 	ldhu	r2,12(r16)
   423a4:	01800204 	movi	r6,8
   423a8:	000b883a 	mov	r5,zero
   423ac:	10bff7cc 	andi	r2,r2,65503
   423b0:	8080030d 	sth	r2,12(r16)
   423b4:	81001704 	addi	r4,r16,92
   423b8:	00431440 	call	43144 <memset>
   423bc:	0027883a 	mov	r19,zero
   423c0:	003f7c06 	br	421b4 <__alt_data_end+0xfffe21b4>
   423c4:	80c00117 	ldw	r3,4(r16)
   423c8:	80800c17 	ldw	r2,48(r16)
   423cc:	98e7c83a 	sub	r19,r19,r3
   423d0:	10003b26 	beq	r2,zero,424c0 <_fseeko_r+0x388>
   423d4:	80c00f17 	ldw	r3,60(r16)
   423d8:	80800417 	ldw	r2,16(r16)
   423dc:	98e7c83a 	sub	r19,r19,r3
   423e0:	003fbc06 	br	422d4 <__alt_data_end+0xfffe22d4>
   423e4:	8140038f 	ldh	r5,14(r16)
   423e8:	d80d883a 	mov	r6,sp
   423ec:	8809883a 	mov	r4,r17
   423f0:	00425980 	call	42598 <_fstat_r>
   423f4:	103f891e 	bne	r2,zero,4221c <__alt_data_end+0xfffe221c>
   423f8:	dd800417 	ldw	r22,16(sp)
   423fc:	adad883a 	add	r22,r21,r22
   42400:	b83fc926 	beq	r23,zero,42328 <__alt_data_end+0xfffe2328>
   42404:	81400c17 	ldw	r5,48(r16)
   42408:	81800117 	ldw	r6,4(r16)
   4240c:	28005026 	beq	r5,zero,42550 <_fseeko_r+0x418>
   42410:	81c00f17 	ldw	r7,60(r16)
   42414:	003fce06 	br	42350 <__alt_data_end+0xfffe2350>
   42418:	84c01317 	ldw	r19,76(r16)
   4241c:	81400717 	ldw	r5,28(r16)
   42420:	000f883a 	mov	r7,zero
   42424:	04e7c83a 	sub	r19,zero,r19
   42428:	9da6703a 	and	r19,r19,r22
   4242c:	980d883a 	mov	r6,r19
   42430:	8809883a 	mov	r4,r17
   42434:	a03ee83a 	callr	r20
   42438:	00ffffc4 	movi	r3,-1
   4243c:	10ff7726 	beq	r2,r3,4221c <__alt_data_end+0xfffe221c>
   42440:	80800417 	ldw	r2,16(r16)
   42444:	81400c17 	ldw	r5,48(r16)
   42448:	80000115 	stw	zero,4(r16)
   4244c:	80800015 	stw	r2,0(r16)
   42450:	28000526 	beq	r5,zero,42468 <_fseeko_r+0x330>
   42454:	80801004 	addi	r2,r16,64
   42458:	28800226 	beq	r5,r2,42464 <_fseeko_r+0x32c>
   4245c:	8809883a 	mov	r4,r17
   42460:	0041e080 	call	41e08 <_free_r>
   42464:	80000c15 	stw	zero,48(r16)
   42468:	8080030b 	ldhu	r2,12(r16)
   4246c:	b4e7c83a 	sub	r19,r22,r19
   42470:	10bff7cc 	andi	r2,r2,65503
   42474:	8080030d 	sth	r2,12(r16)
   42478:	98000b26 	beq	r19,zero,424a8 <_fseeko_r+0x370>
   4247c:	800b883a 	mov	r5,r16
   42480:	8809883a 	mov	r4,r17
   42484:	00435900 	call	43590 <__srefill_r>
   42488:	103f641e 	bne	r2,zero,4221c <__alt_data_end+0xfffe221c>
   4248c:	80800117 	ldw	r2,4(r16)
   42490:	14ff6236 	bltu	r2,r19,4221c <__alt_data_end+0xfffe221c>
   42494:	80c00017 	ldw	r3,0(r16)
   42498:	14c5c83a 	sub	r2,r2,r19
   4249c:	80800115 	stw	r2,4(r16)
   424a0:	1ce7883a 	add	r19,r3,r19
   424a4:	84c00015 	stw	r19,0(r16)
   424a8:	01800204 	movi	r6,8
   424ac:	000b883a 	mov	r5,zero
   424b0:	81001704 	addi	r4,r16,92
   424b4:	00431440 	call	43144 <memset>
   424b8:	0027883a 	mov	r19,zero
   424bc:	003f3d06 	br	421b4 <__alt_data_end+0xfffe21b4>
   424c0:	80800417 	ldw	r2,16(r16)
   424c4:	003f8306 	br	422d4 <__alt_data_end+0xfffe22d4>
   424c8:	81400717 	ldw	r5,28(r16)
   424cc:	900f883a 	mov	r7,r18
   424d0:	000d883a 	mov	r6,zero
   424d4:	8809883a 	mov	r4,r17
   424d8:	a03ee83a 	callr	r20
   424dc:	1027883a 	mov	r19,r2
   424e0:	00bfffc4 	movi	r2,-1
   424e4:	98bf3226 	beq	r19,r2,421b0 <__alt_data_end+0xfffe21b0>
   424e8:	8080030b 	ldhu	r2,12(r16)
   424ec:	003f7006 	br	422b0 <__alt_data_end+0xfffe22b0>
   424f0:	8140038f 	ldh	r5,14(r16)
   424f4:	283f4716 	blt	r5,zero,42214 <__alt_data_end+0xfffe2214>
   424f8:	d80d883a 	mov	r6,sp
   424fc:	8809883a 	mov	r4,r17
   42500:	00425980 	call	42598 <_fstat_r>
   42504:	1000041e 	bne	r2,zero,42518 <_fseeko_r+0x3e0>
   42508:	d8800117 	ldw	r2,4(sp)
   4250c:	00e00014 	movui	r3,32768
   42510:	10bc000c 	andi	r2,r2,61440
   42514:	10ff7c26 	beq	r2,r3,42308 <__alt_data_end+0xfffe2308>
   42518:	8080030b 	ldhu	r2,12(r16)
   4251c:	003f3d06 	br	42214 <__alt_data_end+0xfffe2214>
   42520:	800b883a 	mov	r5,r16
   42524:	8809883a 	mov	r4,r17
   42528:	004277c0 	call	4277c <__smakebuf_r>
   4252c:	003f3106 	br	421f4 <__alt_data_end+0xfffe21f4>
   42530:	81400717 	ldw	r5,28(r16)
   42534:	01c00044 	movi	r7,1
   42538:	000d883a 	mov	r6,zero
   4253c:	8809883a 	mov	r4,r17
   42540:	a03ee83a 	callr	r20
   42544:	00ffffc4 	movi	r3,-1
   42548:	10ff7b1e 	bne	r2,r3,42338 <__alt_data_end+0xfffe2338>
   4254c:	003f3306 	br	4221c <__alt_data_end+0xfffe221c>
   42550:	80c00017 	ldw	r3,0(r16)
   42554:	80800417 	ldw	r2,16(r16)
   42558:	000b883a 	mov	r5,zero
   4255c:	1887c83a 	sub	r3,r3,r2
   42560:	98e7c83a 	sub	r19,r19,r3
   42564:	30c7883a 	add	r3,r6,r3
   42568:	003f7f06 	br	42368 <__alt_data_end+0xfffe2368>
   4256c:	00800744 	movi	r2,29
   42570:	88800015 	stw	r2,0(r17)
   42574:	04ffffc4 	movi	r19,-1
   42578:	003f0e06 	br	421b4 <__alt_data_end+0xfffe21b4>

0004257c <fseeko>:
   4257c:	00800174 	movhi	r2,5
   42580:	108d5104 	addi	r2,r2,13636
   42584:	300f883a 	mov	r7,r6
   42588:	280d883a 	mov	r6,r5
   4258c:	200b883a 	mov	r5,r4
   42590:	11000017 	ldw	r4,0(r2)
   42594:	00421381 	jmpi	42138 <_fseeko_r>

00042598 <_fstat_r>:
   42598:	defffd04 	addi	sp,sp,-12
   4259c:	2805883a 	mov	r2,r5
   425a0:	dc000015 	stw	r16,0(sp)
   425a4:	04000174 	movhi	r16,5
   425a8:	dc400115 	stw	r17,4(sp)
   425ac:	84146904 	addi	r16,r16,20900
   425b0:	2023883a 	mov	r17,r4
   425b4:	300b883a 	mov	r5,r6
   425b8:	1009883a 	mov	r4,r2
   425bc:	dfc00215 	stw	ra,8(sp)
   425c0:	80000015 	stw	zero,0(r16)
   425c4:	004e3a80 	call	4e3a8 <fstat>
   425c8:	00ffffc4 	movi	r3,-1
   425cc:	10c00526 	beq	r2,r3,425e4 <_fstat_r+0x4c>
   425d0:	dfc00217 	ldw	ra,8(sp)
   425d4:	dc400117 	ldw	r17,4(sp)
   425d8:	dc000017 	ldw	r16,0(sp)
   425dc:	dec00304 	addi	sp,sp,12
   425e0:	f800283a 	ret
   425e4:	80c00017 	ldw	r3,0(r16)
   425e8:	183ff926 	beq	r3,zero,425d0 <__alt_data_end+0xfffe25d0>
   425ec:	88c00015 	stw	r3,0(r17)
   425f0:	003ff706 	br	425d0 <__alt_data_end+0xfffe25d0>

000425f4 <_fwalk>:
   425f4:	defff704 	addi	sp,sp,-36
   425f8:	dd000415 	stw	r20,16(sp)
   425fc:	dfc00815 	stw	ra,32(sp)
   42600:	ddc00715 	stw	r23,28(sp)
   42604:	dd800615 	stw	r22,24(sp)
   42608:	dd400515 	stw	r21,20(sp)
   4260c:	dcc00315 	stw	r19,12(sp)
   42610:	dc800215 	stw	r18,8(sp)
   42614:	dc400115 	stw	r17,4(sp)
   42618:	dc000015 	stw	r16,0(sp)
   4261c:	2500b804 	addi	r20,r4,736
   42620:	a0002326 	beq	r20,zero,426b0 <_fwalk+0xbc>
   42624:	282b883a 	mov	r21,r5
   42628:	002f883a 	mov	r23,zero
   4262c:	05800044 	movi	r22,1
   42630:	04ffffc4 	movi	r19,-1
   42634:	a4400117 	ldw	r17,4(r20)
   42638:	a4800217 	ldw	r18,8(r20)
   4263c:	8c7fffc4 	addi	r17,r17,-1
   42640:	88000d16 	blt	r17,zero,42678 <_fwalk+0x84>
   42644:	94000304 	addi	r16,r18,12
   42648:	94800384 	addi	r18,r18,14
   4264c:	8080000b 	ldhu	r2,0(r16)
   42650:	8c7fffc4 	addi	r17,r17,-1
   42654:	813ffd04 	addi	r4,r16,-12
   42658:	b080042e 	bgeu	r22,r2,4266c <_fwalk+0x78>
   4265c:	9080000f 	ldh	r2,0(r18)
   42660:	14c00226 	beq	r2,r19,4266c <_fwalk+0x78>
   42664:	a83ee83a 	callr	r21
   42668:	b8aeb03a 	or	r23,r23,r2
   4266c:	84001a04 	addi	r16,r16,104
   42670:	94801a04 	addi	r18,r18,104
   42674:	8cfff51e 	bne	r17,r19,4264c <__alt_data_end+0xfffe264c>
   42678:	a5000017 	ldw	r20,0(r20)
   4267c:	a03fed1e 	bne	r20,zero,42634 <__alt_data_end+0xfffe2634>
   42680:	b805883a 	mov	r2,r23
   42684:	dfc00817 	ldw	ra,32(sp)
   42688:	ddc00717 	ldw	r23,28(sp)
   4268c:	dd800617 	ldw	r22,24(sp)
   42690:	dd400517 	ldw	r21,20(sp)
   42694:	dd000417 	ldw	r20,16(sp)
   42698:	dcc00317 	ldw	r19,12(sp)
   4269c:	dc800217 	ldw	r18,8(sp)
   426a0:	dc400117 	ldw	r17,4(sp)
   426a4:	dc000017 	ldw	r16,0(sp)
   426a8:	dec00904 	addi	sp,sp,36
   426ac:	f800283a 	ret
   426b0:	002f883a 	mov	r23,zero
   426b4:	003ff206 	br	42680 <__alt_data_end+0xfffe2680>

000426b8 <_fwalk_reent>:
   426b8:	defff704 	addi	sp,sp,-36
   426bc:	dd000415 	stw	r20,16(sp)
   426c0:	dfc00815 	stw	ra,32(sp)
   426c4:	ddc00715 	stw	r23,28(sp)
   426c8:	dd800615 	stw	r22,24(sp)
   426cc:	dd400515 	stw	r21,20(sp)
   426d0:	dcc00315 	stw	r19,12(sp)
   426d4:	dc800215 	stw	r18,8(sp)
   426d8:	dc400115 	stw	r17,4(sp)
   426dc:	dc000015 	stw	r16,0(sp)
   426e0:	2500b804 	addi	r20,r4,736
   426e4:	a0002326 	beq	r20,zero,42774 <_fwalk_reent+0xbc>
   426e8:	282b883a 	mov	r21,r5
   426ec:	2027883a 	mov	r19,r4
   426f0:	002f883a 	mov	r23,zero
   426f4:	05800044 	movi	r22,1
   426f8:	04bfffc4 	movi	r18,-1
   426fc:	a4400117 	ldw	r17,4(r20)
   42700:	a4000217 	ldw	r16,8(r20)
   42704:	8c7fffc4 	addi	r17,r17,-1
   42708:	88000c16 	blt	r17,zero,4273c <_fwalk_reent+0x84>
   4270c:	84000304 	addi	r16,r16,12
   42710:	8080000b 	ldhu	r2,0(r16)
   42714:	8c7fffc4 	addi	r17,r17,-1
   42718:	817ffd04 	addi	r5,r16,-12
   4271c:	b080052e 	bgeu	r22,r2,42734 <_fwalk_reent+0x7c>
   42720:	8080008f 	ldh	r2,2(r16)
   42724:	9809883a 	mov	r4,r19
   42728:	14800226 	beq	r2,r18,42734 <_fwalk_reent+0x7c>
   4272c:	a83ee83a 	callr	r21
   42730:	b8aeb03a 	or	r23,r23,r2
   42734:	84001a04 	addi	r16,r16,104
   42738:	8cbff51e 	bne	r17,r18,42710 <__alt_data_end+0xfffe2710>
   4273c:	a5000017 	ldw	r20,0(r20)
   42740:	a03fee1e 	bne	r20,zero,426fc <__alt_data_end+0xfffe26fc>
   42744:	b805883a 	mov	r2,r23
   42748:	dfc00817 	ldw	ra,32(sp)
   4274c:	ddc00717 	ldw	r23,28(sp)
   42750:	dd800617 	ldw	r22,24(sp)
   42754:	dd400517 	ldw	r21,20(sp)
   42758:	dd000417 	ldw	r20,16(sp)
   4275c:	dcc00317 	ldw	r19,12(sp)
   42760:	dc800217 	ldw	r18,8(sp)
   42764:	dc400117 	ldw	r17,4(sp)
   42768:	dc000017 	ldw	r16,0(sp)
   4276c:	dec00904 	addi	sp,sp,36
   42770:	f800283a 	ret
   42774:	002f883a 	mov	r23,zero
   42778:	003ff206 	br	42744 <__alt_data_end+0xfffe2744>

0004277c <__smakebuf_r>:
   4277c:	2880030b 	ldhu	r2,12(r5)
   42780:	10c0008c 	andi	r3,r2,2
   42784:	1800411e 	bne	r3,zero,4288c <__smakebuf_r+0x110>
   42788:	deffec04 	addi	sp,sp,-80
   4278c:	dc000f15 	stw	r16,60(sp)
   42790:	2821883a 	mov	r16,r5
   42794:	2940038f 	ldh	r5,14(r5)
   42798:	dc401015 	stw	r17,64(sp)
   4279c:	dfc01315 	stw	ra,76(sp)
   427a0:	dcc01215 	stw	r19,72(sp)
   427a4:	dc801115 	stw	r18,68(sp)
   427a8:	2023883a 	mov	r17,r4
   427ac:	28001c16 	blt	r5,zero,42820 <__smakebuf_r+0xa4>
   427b0:	d80d883a 	mov	r6,sp
   427b4:	00425980 	call	42598 <_fstat_r>
   427b8:	10001816 	blt	r2,zero,4281c <__smakebuf_r+0xa0>
   427bc:	d8800117 	ldw	r2,4(sp)
   427c0:	00e00014 	movui	r3,32768
   427c4:	10bc000c 	andi	r2,r2,61440
   427c8:	14c80020 	cmpeqi	r19,r2,8192
   427cc:	10c03726 	beq	r2,r3,428ac <__smakebuf_r+0x130>
   427d0:	80c0030b 	ldhu	r3,12(r16)
   427d4:	18c20014 	ori	r3,r3,2048
   427d8:	80c0030d 	sth	r3,12(r16)
   427dc:	00c80004 	movi	r3,8192
   427e0:	10c0521e 	bne	r2,r3,4292c <__smakebuf_r+0x1b0>
   427e4:	8140038f 	ldh	r5,14(r16)
   427e8:	8809883a 	mov	r4,r17
   427ec:	0047fe00 	call	47fe0 <_isatty_r>
   427f0:	10004c26 	beq	r2,zero,42924 <__smakebuf_r+0x1a8>
   427f4:	8080030b 	ldhu	r2,12(r16)
   427f8:	80c010c4 	addi	r3,r16,67
   427fc:	80c00015 	stw	r3,0(r16)
   42800:	10800054 	ori	r2,r2,1
   42804:	8080030d 	sth	r2,12(r16)
   42808:	00800044 	movi	r2,1
   4280c:	80c00415 	stw	r3,16(r16)
   42810:	80800515 	stw	r2,20(r16)
   42814:	04810004 	movi	r18,1024
   42818:	00000706 	br	42838 <__smakebuf_r+0xbc>
   4281c:	8080030b 	ldhu	r2,12(r16)
   42820:	10c0200c 	andi	r3,r2,128
   42824:	18001f1e 	bne	r3,zero,428a4 <__smakebuf_r+0x128>
   42828:	04810004 	movi	r18,1024
   4282c:	10820014 	ori	r2,r2,2048
   42830:	8080030d 	sth	r2,12(r16)
   42834:	0027883a 	mov	r19,zero
   42838:	900b883a 	mov	r5,r18
   4283c:	8809883a 	mov	r4,r17
   42840:	00429380 	call	42938 <_malloc_r>
   42844:	10002c26 	beq	r2,zero,428f8 <__smakebuf_r+0x17c>
   42848:	80c0030b 	ldhu	r3,12(r16)
   4284c:	01000134 	movhi	r4,4
   42850:	2105d104 	addi	r4,r4,5956
   42854:	89000f15 	stw	r4,60(r17)
   42858:	18c02014 	ori	r3,r3,128
   4285c:	80c0030d 	sth	r3,12(r16)
   42860:	80800015 	stw	r2,0(r16)
   42864:	80800415 	stw	r2,16(r16)
   42868:	84800515 	stw	r18,20(r16)
   4286c:	98001a1e 	bne	r19,zero,428d8 <__smakebuf_r+0x15c>
   42870:	dfc01317 	ldw	ra,76(sp)
   42874:	dcc01217 	ldw	r19,72(sp)
   42878:	dc801117 	ldw	r18,68(sp)
   4287c:	dc401017 	ldw	r17,64(sp)
   42880:	dc000f17 	ldw	r16,60(sp)
   42884:	dec01404 	addi	sp,sp,80
   42888:	f800283a 	ret
   4288c:	288010c4 	addi	r2,r5,67
   42890:	28800015 	stw	r2,0(r5)
   42894:	28800415 	stw	r2,16(r5)
   42898:	00800044 	movi	r2,1
   4289c:	28800515 	stw	r2,20(r5)
   428a0:	f800283a 	ret
   428a4:	04801004 	movi	r18,64
   428a8:	003fe006 	br	4282c <__alt_data_end+0xfffe282c>
   428ac:	81000a17 	ldw	r4,40(r16)
   428b0:	00c00134 	movhi	r3,4
   428b4:	18ce2404 	addi	r3,r3,14480
   428b8:	20ffc51e 	bne	r4,r3,427d0 <__alt_data_end+0xfffe27d0>
   428bc:	8080030b 	ldhu	r2,12(r16)
   428c0:	04810004 	movi	r18,1024
   428c4:	84801315 	stw	r18,76(r16)
   428c8:	1484b03a 	or	r2,r2,r18
   428cc:	8080030d 	sth	r2,12(r16)
   428d0:	0027883a 	mov	r19,zero
   428d4:	003fd806 	br	42838 <__alt_data_end+0xfffe2838>
   428d8:	8140038f 	ldh	r5,14(r16)
   428dc:	8809883a 	mov	r4,r17
   428e0:	0047fe00 	call	47fe0 <_isatty_r>
   428e4:	103fe226 	beq	r2,zero,42870 <__alt_data_end+0xfffe2870>
   428e8:	8080030b 	ldhu	r2,12(r16)
   428ec:	10800054 	ori	r2,r2,1
   428f0:	8080030d 	sth	r2,12(r16)
   428f4:	003fde06 	br	42870 <__alt_data_end+0xfffe2870>
   428f8:	8080030b 	ldhu	r2,12(r16)
   428fc:	10c0800c 	andi	r3,r2,512
   42900:	183fdb1e 	bne	r3,zero,42870 <__alt_data_end+0xfffe2870>
   42904:	10800094 	ori	r2,r2,2
   42908:	80c010c4 	addi	r3,r16,67
   4290c:	8080030d 	sth	r2,12(r16)
   42910:	00800044 	movi	r2,1
   42914:	80c00015 	stw	r3,0(r16)
   42918:	80c00415 	stw	r3,16(r16)
   4291c:	80800515 	stw	r2,20(r16)
   42920:	003fd306 	br	42870 <__alt_data_end+0xfffe2870>
   42924:	04810004 	movi	r18,1024
   42928:	003fc306 	br	42838 <__alt_data_end+0xfffe2838>
   4292c:	0027883a 	mov	r19,zero
   42930:	04810004 	movi	r18,1024
   42934:	003fc006 	br	42838 <__alt_data_end+0xfffe2838>

00042938 <_malloc_r>:
   42938:	defff504 	addi	sp,sp,-44
   4293c:	dc800315 	stw	r18,12(sp)
   42940:	dfc00a15 	stw	ra,40(sp)
   42944:	df000915 	stw	fp,36(sp)
   42948:	ddc00815 	stw	r23,32(sp)
   4294c:	dd800715 	stw	r22,28(sp)
   42950:	dd400615 	stw	r21,24(sp)
   42954:	dd000515 	stw	r20,20(sp)
   42958:	dcc00415 	stw	r19,16(sp)
   4295c:	dc400215 	stw	r17,8(sp)
   42960:	dc000115 	stw	r16,4(sp)
   42964:	288002c4 	addi	r2,r5,11
   42968:	00c00584 	movi	r3,22
   4296c:	2025883a 	mov	r18,r4
   42970:	18807f2e 	bgeu	r3,r2,42b70 <_malloc_r+0x238>
   42974:	047ffe04 	movi	r17,-8
   42978:	1462703a 	and	r17,r2,r17
   4297c:	8800a316 	blt	r17,zero,42c0c <_malloc_r+0x2d4>
   42980:	8940a236 	bltu	r17,r5,42c0c <_malloc_r+0x2d4>
   42984:	004e7d40 	call	4e7d4 <__malloc_lock>
   42988:	00807dc4 	movi	r2,503
   4298c:	1441e92e 	bgeu	r2,r17,43134 <_malloc_r+0x7fc>
   42990:	8804d27a 	srli	r2,r17,9
   42994:	1000a126 	beq	r2,zero,42c1c <_malloc_r+0x2e4>
   42998:	00c00104 	movi	r3,4
   4299c:	18811e36 	bltu	r3,r2,42e18 <_malloc_r+0x4e0>
   429a0:	8804d1ba 	srli	r2,r17,6
   429a4:	12000e44 	addi	r8,r2,57
   429a8:	11c00e04 	addi	r7,r2,56
   429ac:	4209883a 	add	r4,r8,r8
   429b0:	04c00174 	movhi	r19,5
   429b4:	2109883a 	add	r4,r4,r4
   429b8:	9cc7a404 	addi	r19,r19,7824
   429bc:	2109883a 	add	r4,r4,r4
   429c0:	9909883a 	add	r4,r19,r4
   429c4:	24000117 	ldw	r16,4(r4)
   429c8:	213ffe04 	addi	r4,r4,-8
   429cc:	24009726 	beq	r4,r16,42c2c <_malloc_r+0x2f4>
   429d0:	80800117 	ldw	r2,4(r16)
   429d4:	01bfff04 	movi	r6,-4
   429d8:	014003c4 	movi	r5,15
   429dc:	1184703a 	and	r2,r2,r6
   429e0:	1447c83a 	sub	r3,r2,r17
   429e4:	28c00716 	blt	r5,r3,42a04 <_malloc_r+0xcc>
   429e8:	1800920e 	bge	r3,zero,42c34 <_malloc_r+0x2fc>
   429ec:	84000317 	ldw	r16,12(r16)
   429f0:	24008e26 	beq	r4,r16,42c2c <_malloc_r+0x2f4>
   429f4:	80800117 	ldw	r2,4(r16)
   429f8:	1184703a 	and	r2,r2,r6
   429fc:	1447c83a 	sub	r3,r2,r17
   42a00:	28fff90e 	bge	r5,r3,429e8 <__alt_data_end+0xfffe29e8>
   42a04:	3809883a 	mov	r4,r7
   42a08:	01800174 	movhi	r6,5
   42a0c:	9c000417 	ldw	r16,16(r19)
   42a10:	3187a404 	addi	r6,r6,7824
   42a14:	32000204 	addi	r8,r6,8
   42a18:	82013426 	beq	r16,r8,42eec <_malloc_r+0x5b4>
   42a1c:	80c00117 	ldw	r3,4(r16)
   42a20:	00bfff04 	movi	r2,-4
   42a24:	188e703a 	and	r7,r3,r2
   42a28:	3c45c83a 	sub	r2,r7,r17
   42a2c:	00c003c4 	movi	r3,15
   42a30:	18811f16 	blt	r3,r2,42eb0 <_malloc_r+0x578>
   42a34:	32000515 	stw	r8,20(r6)
   42a38:	32000415 	stw	r8,16(r6)
   42a3c:	10007f0e 	bge	r2,zero,42c3c <_malloc_r+0x304>
   42a40:	00807fc4 	movi	r2,511
   42a44:	11c0fd36 	bltu	r2,r7,42e3c <_malloc_r+0x504>
   42a48:	3806d0fa 	srli	r3,r7,3
   42a4c:	01c00044 	movi	r7,1
   42a50:	30800117 	ldw	r2,4(r6)
   42a54:	19400044 	addi	r5,r3,1
   42a58:	294b883a 	add	r5,r5,r5
   42a5c:	1807d0ba 	srai	r3,r3,2
   42a60:	294b883a 	add	r5,r5,r5
   42a64:	294b883a 	add	r5,r5,r5
   42a68:	298b883a 	add	r5,r5,r6
   42a6c:	38c6983a 	sll	r3,r7,r3
   42a70:	29c00017 	ldw	r7,0(r5)
   42a74:	2a7ffe04 	addi	r9,r5,-8
   42a78:	1886b03a 	or	r3,r3,r2
   42a7c:	82400315 	stw	r9,12(r16)
   42a80:	81c00215 	stw	r7,8(r16)
   42a84:	30c00115 	stw	r3,4(r6)
   42a88:	2c000015 	stw	r16,0(r5)
   42a8c:	3c000315 	stw	r16,12(r7)
   42a90:	2005d0ba 	srai	r2,r4,2
   42a94:	01400044 	movi	r5,1
   42a98:	288a983a 	sll	r5,r5,r2
   42a9c:	19406f36 	bltu	r3,r5,42c5c <_malloc_r+0x324>
   42aa0:	28c4703a 	and	r2,r5,r3
   42aa4:	10000a1e 	bne	r2,zero,42ad0 <_malloc_r+0x198>
   42aa8:	00bfff04 	movi	r2,-4
   42aac:	294b883a 	add	r5,r5,r5
   42ab0:	2088703a 	and	r4,r4,r2
   42ab4:	28c4703a 	and	r2,r5,r3
   42ab8:	21000104 	addi	r4,r4,4
   42abc:	1000041e 	bne	r2,zero,42ad0 <_malloc_r+0x198>
   42ac0:	294b883a 	add	r5,r5,r5
   42ac4:	28c4703a 	and	r2,r5,r3
   42ac8:	21000104 	addi	r4,r4,4
   42acc:	103ffc26 	beq	r2,zero,42ac0 <__alt_data_end+0xfffe2ac0>
   42ad0:	02bfff04 	movi	r10,-4
   42ad4:	024003c4 	movi	r9,15
   42ad8:	21800044 	addi	r6,r4,1
   42adc:	318d883a 	add	r6,r6,r6
   42ae0:	318d883a 	add	r6,r6,r6
   42ae4:	318d883a 	add	r6,r6,r6
   42ae8:	998d883a 	add	r6,r19,r6
   42aec:	333ffe04 	addi	r12,r6,-8
   42af0:	2017883a 	mov	r11,r4
   42af4:	31800104 	addi	r6,r6,4
   42af8:	34000017 	ldw	r16,0(r6)
   42afc:	31fffd04 	addi	r7,r6,-12
   42b00:	81c0041e 	bne	r16,r7,42b14 <_malloc_r+0x1dc>
   42b04:	0000fb06 	br	42ef4 <_malloc_r+0x5bc>
   42b08:	1801030e 	bge	r3,zero,42f18 <_malloc_r+0x5e0>
   42b0c:	84000317 	ldw	r16,12(r16)
   42b10:	81c0f826 	beq	r16,r7,42ef4 <_malloc_r+0x5bc>
   42b14:	80800117 	ldw	r2,4(r16)
   42b18:	1284703a 	and	r2,r2,r10
   42b1c:	1447c83a 	sub	r3,r2,r17
   42b20:	48fff90e 	bge	r9,r3,42b08 <__alt_data_end+0xfffe2b08>
   42b24:	80800317 	ldw	r2,12(r16)
   42b28:	81000217 	ldw	r4,8(r16)
   42b2c:	89400054 	ori	r5,r17,1
   42b30:	81400115 	stw	r5,4(r16)
   42b34:	20800315 	stw	r2,12(r4)
   42b38:	11000215 	stw	r4,8(r2)
   42b3c:	8463883a 	add	r17,r16,r17
   42b40:	9c400515 	stw	r17,20(r19)
   42b44:	9c400415 	stw	r17,16(r19)
   42b48:	18800054 	ori	r2,r3,1
   42b4c:	88800115 	stw	r2,4(r17)
   42b50:	8a000315 	stw	r8,12(r17)
   42b54:	8a000215 	stw	r8,8(r17)
   42b58:	88e3883a 	add	r17,r17,r3
   42b5c:	88c00015 	stw	r3,0(r17)
   42b60:	9009883a 	mov	r4,r18
   42b64:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42b68:	80800204 	addi	r2,r16,8
   42b6c:	00001b06 	br	42bdc <_malloc_r+0x2a4>
   42b70:	04400404 	movi	r17,16
   42b74:	89402536 	bltu	r17,r5,42c0c <_malloc_r+0x2d4>
   42b78:	004e7d40 	call	4e7d4 <__malloc_lock>
   42b7c:	00800184 	movi	r2,6
   42b80:	01000084 	movi	r4,2
   42b84:	04c00174 	movhi	r19,5
   42b88:	1085883a 	add	r2,r2,r2
   42b8c:	9cc7a404 	addi	r19,r19,7824
   42b90:	1085883a 	add	r2,r2,r2
   42b94:	9885883a 	add	r2,r19,r2
   42b98:	14000117 	ldw	r16,4(r2)
   42b9c:	10fffe04 	addi	r3,r2,-8
   42ba0:	80c0d926 	beq	r16,r3,42f08 <_malloc_r+0x5d0>
   42ba4:	80c00117 	ldw	r3,4(r16)
   42ba8:	81000317 	ldw	r4,12(r16)
   42bac:	00bfff04 	movi	r2,-4
   42bb0:	1884703a 	and	r2,r3,r2
   42bb4:	81400217 	ldw	r5,8(r16)
   42bb8:	8085883a 	add	r2,r16,r2
   42bbc:	10c00117 	ldw	r3,4(r2)
   42bc0:	29000315 	stw	r4,12(r5)
   42bc4:	21400215 	stw	r5,8(r4)
   42bc8:	18c00054 	ori	r3,r3,1
   42bcc:	10c00115 	stw	r3,4(r2)
   42bd0:	9009883a 	mov	r4,r18
   42bd4:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42bd8:	80800204 	addi	r2,r16,8
   42bdc:	dfc00a17 	ldw	ra,40(sp)
   42be0:	df000917 	ldw	fp,36(sp)
   42be4:	ddc00817 	ldw	r23,32(sp)
   42be8:	dd800717 	ldw	r22,28(sp)
   42bec:	dd400617 	ldw	r21,24(sp)
   42bf0:	dd000517 	ldw	r20,20(sp)
   42bf4:	dcc00417 	ldw	r19,16(sp)
   42bf8:	dc800317 	ldw	r18,12(sp)
   42bfc:	dc400217 	ldw	r17,8(sp)
   42c00:	dc000117 	ldw	r16,4(sp)
   42c04:	dec00b04 	addi	sp,sp,44
   42c08:	f800283a 	ret
   42c0c:	00800304 	movi	r2,12
   42c10:	90800015 	stw	r2,0(r18)
   42c14:	0005883a 	mov	r2,zero
   42c18:	003ff006 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42c1c:	01002004 	movi	r4,128
   42c20:	02001004 	movi	r8,64
   42c24:	01c00fc4 	movi	r7,63
   42c28:	003f6106 	br	429b0 <__alt_data_end+0xfffe29b0>
   42c2c:	4009883a 	mov	r4,r8
   42c30:	003f7506 	br	42a08 <__alt_data_end+0xfffe2a08>
   42c34:	81000317 	ldw	r4,12(r16)
   42c38:	003fde06 	br	42bb4 <__alt_data_end+0xfffe2bb4>
   42c3c:	81c5883a 	add	r2,r16,r7
   42c40:	11400117 	ldw	r5,4(r2)
   42c44:	9009883a 	mov	r4,r18
   42c48:	29400054 	ori	r5,r5,1
   42c4c:	11400115 	stw	r5,4(r2)
   42c50:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42c54:	80800204 	addi	r2,r16,8
   42c58:	003fe006 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42c5c:	9c000217 	ldw	r16,8(r19)
   42c60:	00bfff04 	movi	r2,-4
   42c64:	85800117 	ldw	r22,4(r16)
   42c68:	b0ac703a 	and	r22,r22,r2
   42c6c:	b4400336 	bltu	r22,r17,42c7c <_malloc_r+0x344>
   42c70:	b445c83a 	sub	r2,r22,r17
   42c74:	00c003c4 	movi	r3,15
   42c78:	18805d16 	blt	r3,r2,42df0 <_malloc_r+0x4b8>
   42c7c:	05c00174 	movhi	r23,5
   42c80:	00800174 	movhi	r2,5
   42c84:	10946c04 	addi	r2,r2,20912
   42c88:	bdcd5204 	addi	r23,r23,13640
   42c8c:	15400017 	ldw	r21,0(r2)
   42c90:	b8c00017 	ldw	r3,0(r23)
   42c94:	00bfffc4 	movi	r2,-1
   42c98:	858d883a 	add	r6,r16,r22
   42c9c:	8d6b883a 	add	r21,r17,r21
   42ca0:	1880ea26 	beq	r3,r2,4304c <_malloc_r+0x714>
   42ca4:	ad4403c4 	addi	r21,r21,4111
   42ca8:	00bc0004 	movi	r2,-4096
   42cac:	a8aa703a 	and	r21,r21,r2
   42cb0:	a80b883a 	mov	r5,r21
   42cb4:	9009883a 	mov	r4,r18
   42cb8:	d9800015 	stw	r6,0(sp)
   42cbc:	00437640 	call	43764 <_sbrk_r>
   42cc0:	1029883a 	mov	r20,r2
   42cc4:	00bfffc4 	movi	r2,-1
   42cc8:	d9800017 	ldw	r6,0(sp)
   42ccc:	a080e826 	beq	r20,r2,43070 <_malloc_r+0x738>
   42cd0:	a180a636 	bltu	r20,r6,42f6c <_malloc_r+0x634>
   42cd4:	07000174 	movhi	fp,5
   42cd8:	e7147604 	addi	fp,fp,20952
   42cdc:	e0800017 	ldw	r2,0(fp)
   42ce0:	a887883a 	add	r3,r21,r2
   42ce4:	e0c00015 	stw	r3,0(fp)
   42ce8:	3500e626 	beq	r6,r20,43084 <_malloc_r+0x74c>
   42cec:	b9000017 	ldw	r4,0(r23)
   42cf0:	00bfffc4 	movi	r2,-1
   42cf4:	2080ee26 	beq	r4,r2,430b0 <_malloc_r+0x778>
   42cf8:	a185c83a 	sub	r2,r20,r6
   42cfc:	10c5883a 	add	r2,r2,r3
   42d00:	e0800015 	stw	r2,0(fp)
   42d04:	a0c001cc 	andi	r3,r20,7
   42d08:	1800bc26 	beq	r3,zero,42ffc <_malloc_r+0x6c4>
   42d0c:	a0e9c83a 	sub	r20,r20,r3
   42d10:	00840204 	movi	r2,4104
   42d14:	a5000204 	addi	r20,r20,8
   42d18:	10c7c83a 	sub	r3,r2,r3
   42d1c:	a545883a 	add	r2,r20,r21
   42d20:	1083ffcc 	andi	r2,r2,4095
   42d24:	18abc83a 	sub	r21,r3,r2
   42d28:	a80b883a 	mov	r5,r21
   42d2c:	9009883a 	mov	r4,r18
   42d30:	00437640 	call	43764 <_sbrk_r>
   42d34:	00ffffc4 	movi	r3,-1
   42d38:	10c0e126 	beq	r2,r3,430c0 <_malloc_r+0x788>
   42d3c:	1505c83a 	sub	r2,r2,r20
   42d40:	1545883a 	add	r2,r2,r21
   42d44:	10800054 	ori	r2,r2,1
   42d48:	e0c00017 	ldw	r3,0(fp)
   42d4c:	9d000215 	stw	r20,8(r19)
   42d50:	a0800115 	stw	r2,4(r20)
   42d54:	a8c7883a 	add	r3,r21,r3
   42d58:	e0c00015 	stw	r3,0(fp)
   42d5c:	84c00e26 	beq	r16,r19,42d98 <_malloc_r+0x460>
   42d60:	018003c4 	movi	r6,15
   42d64:	3580a72e 	bgeu	r6,r22,43004 <_malloc_r+0x6cc>
   42d68:	81400117 	ldw	r5,4(r16)
   42d6c:	013ffe04 	movi	r4,-8
   42d70:	b0bffd04 	addi	r2,r22,-12
   42d74:	1104703a 	and	r2,r2,r4
   42d78:	2900004c 	andi	r4,r5,1
   42d7c:	2088b03a 	or	r4,r4,r2
   42d80:	81000115 	stw	r4,4(r16)
   42d84:	01400144 	movi	r5,5
   42d88:	8089883a 	add	r4,r16,r2
   42d8c:	21400115 	stw	r5,4(r4)
   42d90:	21400215 	stw	r5,8(r4)
   42d94:	3080cd36 	bltu	r6,r2,430cc <_malloc_r+0x794>
   42d98:	00800174 	movhi	r2,5
   42d9c:	10946b04 	addi	r2,r2,20908
   42da0:	11000017 	ldw	r4,0(r2)
   42da4:	20c0012e 	bgeu	r4,r3,42dac <_malloc_r+0x474>
   42da8:	10c00015 	stw	r3,0(r2)
   42dac:	00800174 	movhi	r2,5
   42db0:	10946a04 	addi	r2,r2,20904
   42db4:	11000017 	ldw	r4,0(r2)
   42db8:	9c000217 	ldw	r16,8(r19)
   42dbc:	20c0012e 	bgeu	r4,r3,42dc4 <_malloc_r+0x48c>
   42dc0:	10c00015 	stw	r3,0(r2)
   42dc4:	80c00117 	ldw	r3,4(r16)
   42dc8:	00bfff04 	movi	r2,-4
   42dcc:	1886703a 	and	r3,r3,r2
   42dd0:	1c45c83a 	sub	r2,r3,r17
   42dd4:	1c400236 	bltu	r3,r17,42de0 <_malloc_r+0x4a8>
   42dd8:	00c003c4 	movi	r3,15
   42ddc:	18800416 	blt	r3,r2,42df0 <_malloc_r+0x4b8>
   42de0:	9009883a 	mov	r4,r18
   42de4:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42de8:	0005883a 	mov	r2,zero
   42dec:	003f7b06 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42df0:	88c00054 	ori	r3,r17,1
   42df4:	80c00115 	stw	r3,4(r16)
   42df8:	8463883a 	add	r17,r16,r17
   42dfc:	10800054 	ori	r2,r2,1
   42e00:	9c400215 	stw	r17,8(r19)
   42e04:	88800115 	stw	r2,4(r17)
   42e08:	9009883a 	mov	r4,r18
   42e0c:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42e10:	80800204 	addi	r2,r16,8
   42e14:	003f7106 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42e18:	00c00504 	movi	r3,20
   42e1c:	18804a2e 	bgeu	r3,r2,42f48 <_malloc_r+0x610>
   42e20:	00c01504 	movi	r3,84
   42e24:	18806e36 	bltu	r3,r2,42fe0 <_malloc_r+0x6a8>
   42e28:	8804d33a 	srli	r2,r17,12
   42e2c:	12001bc4 	addi	r8,r2,111
   42e30:	11c01b84 	addi	r7,r2,110
   42e34:	4209883a 	add	r4,r8,r8
   42e38:	003edd06 	br	429b0 <__alt_data_end+0xfffe29b0>
   42e3c:	3804d27a 	srli	r2,r7,9
   42e40:	00c00104 	movi	r3,4
   42e44:	1880442e 	bgeu	r3,r2,42f58 <_malloc_r+0x620>
   42e48:	00c00504 	movi	r3,20
   42e4c:	18808136 	bltu	r3,r2,43054 <_malloc_r+0x71c>
   42e50:	11401704 	addi	r5,r2,92
   42e54:	10c016c4 	addi	r3,r2,91
   42e58:	294b883a 	add	r5,r5,r5
   42e5c:	294b883a 	add	r5,r5,r5
   42e60:	294b883a 	add	r5,r5,r5
   42e64:	994b883a 	add	r5,r19,r5
   42e68:	28800017 	ldw	r2,0(r5)
   42e6c:	01800174 	movhi	r6,5
   42e70:	297ffe04 	addi	r5,r5,-8
   42e74:	3187a404 	addi	r6,r6,7824
   42e78:	28806526 	beq	r5,r2,43010 <_malloc_r+0x6d8>
   42e7c:	01bfff04 	movi	r6,-4
   42e80:	10c00117 	ldw	r3,4(r2)
   42e84:	1986703a 	and	r3,r3,r6
   42e88:	38c0022e 	bgeu	r7,r3,42e94 <_malloc_r+0x55c>
   42e8c:	10800217 	ldw	r2,8(r2)
   42e90:	28bffb1e 	bne	r5,r2,42e80 <__alt_data_end+0xfffe2e80>
   42e94:	11400317 	ldw	r5,12(r2)
   42e98:	98c00117 	ldw	r3,4(r19)
   42e9c:	81400315 	stw	r5,12(r16)
   42ea0:	80800215 	stw	r2,8(r16)
   42ea4:	2c000215 	stw	r16,8(r5)
   42ea8:	14000315 	stw	r16,12(r2)
   42eac:	003ef806 	br	42a90 <__alt_data_end+0xfffe2a90>
   42eb0:	88c00054 	ori	r3,r17,1
   42eb4:	80c00115 	stw	r3,4(r16)
   42eb8:	8463883a 	add	r17,r16,r17
   42ebc:	34400515 	stw	r17,20(r6)
   42ec0:	34400415 	stw	r17,16(r6)
   42ec4:	10c00054 	ori	r3,r2,1
   42ec8:	8a000315 	stw	r8,12(r17)
   42ecc:	8a000215 	stw	r8,8(r17)
   42ed0:	88c00115 	stw	r3,4(r17)
   42ed4:	88a3883a 	add	r17,r17,r2
   42ed8:	88800015 	stw	r2,0(r17)
   42edc:	9009883a 	mov	r4,r18
   42ee0:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42ee4:	80800204 	addi	r2,r16,8
   42ee8:	003f3c06 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42eec:	30c00117 	ldw	r3,4(r6)
   42ef0:	003ee706 	br	42a90 <__alt_data_end+0xfffe2a90>
   42ef4:	5ac00044 	addi	r11,r11,1
   42ef8:	588000cc 	andi	r2,r11,3
   42efc:	31800204 	addi	r6,r6,8
   42f00:	103efd1e 	bne	r2,zero,42af8 <__alt_data_end+0xfffe2af8>
   42f04:	00002406 	br	42f98 <_malloc_r+0x660>
   42f08:	14000317 	ldw	r16,12(r2)
   42f0c:	143f251e 	bne	r2,r16,42ba4 <__alt_data_end+0xfffe2ba4>
   42f10:	21000084 	addi	r4,r4,2
   42f14:	003ebc06 	br	42a08 <__alt_data_end+0xfffe2a08>
   42f18:	8085883a 	add	r2,r16,r2
   42f1c:	10c00117 	ldw	r3,4(r2)
   42f20:	81000317 	ldw	r4,12(r16)
   42f24:	81400217 	ldw	r5,8(r16)
   42f28:	18c00054 	ori	r3,r3,1
   42f2c:	10c00115 	stw	r3,4(r2)
   42f30:	29000315 	stw	r4,12(r5)
   42f34:	21400215 	stw	r5,8(r4)
   42f38:	9009883a 	mov	r4,r18
   42f3c:	004e7f40 	call	4e7f4 <__malloc_unlock>
   42f40:	80800204 	addi	r2,r16,8
   42f44:	003f2506 	br	42bdc <__alt_data_end+0xfffe2bdc>
   42f48:	12001704 	addi	r8,r2,92
   42f4c:	11c016c4 	addi	r7,r2,91
   42f50:	4209883a 	add	r4,r8,r8
   42f54:	003e9606 	br	429b0 <__alt_data_end+0xfffe29b0>
   42f58:	3804d1ba 	srli	r2,r7,6
   42f5c:	11400e44 	addi	r5,r2,57
   42f60:	10c00e04 	addi	r3,r2,56
   42f64:	294b883a 	add	r5,r5,r5
   42f68:	003fbc06 	br	42e5c <__alt_data_end+0xfffe2e5c>
   42f6c:	84ff5926 	beq	r16,r19,42cd4 <__alt_data_end+0xfffe2cd4>
   42f70:	00800174 	movhi	r2,5
   42f74:	1087a404 	addi	r2,r2,7824
   42f78:	14000217 	ldw	r16,8(r2)
   42f7c:	00bfff04 	movi	r2,-4
   42f80:	80c00117 	ldw	r3,4(r16)
   42f84:	1886703a 	and	r3,r3,r2
   42f88:	003f9106 	br	42dd0 <__alt_data_end+0xfffe2dd0>
   42f8c:	60800217 	ldw	r2,8(r12)
   42f90:	213fffc4 	addi	r4,r4,-1
   42f94:	1300651e 	bne	r2,r12,4312c <_malloc_r+0x7f4>
   42f98:	208000cc 	andi	r2,r4,3
   42f9c:	633ffe04 	addi	r12,r12,-8
   42fa0:	103ffa1e 	bne	r2,zero,42f8c <__alt_data_end+0xfffe2f8c>
   42fa4:	98800117 	ldw	r2,4(r19)
   42fa8:	0146303a 	nor	r3,zero,r5
   42fac:	1884703a 	and	r2,r3,r2
   42fb0:	98800115 	stw	r2,4(r19)
   42fb4:	294b883a 	add	r5,r5,r5
   42fb8:	117f2836 	bltu	r2,r5,42c5c <__alt_data_end+0xfffe2c5c>
   42fbc:	283f2726 	beq	r5,zero,42c5c <__alt_data_end+0xfffe2c5c>
   42fc0:	2886703a 	and	r3,r5,r2
   42fc4:	5809883a 	mov	r4,r11
   42fc8:	183ec31e 	bne	r3,zero,42ad8 <__alt_data_end+0xfffe2ad8>
   42fcc:	294b883a 	add	r5,r5,r5
   42fd0:	2886703a 	and	r3,r5,r2
   42fd4:	21000104 	addi	r4,r4,4
   42fd8:	183ffc26 	beq	r3,zero,42fcc <__alt_data_end+0xfffe2fcc>
   42fdc:	003ebe06 	br	42ad8 <__alt_data_end+0xfffe2ad8>
   42fe0:	00c05504 	movi	r3,340
   42fe4:	18801236 	bltu	r3,r2,43030 <_malloc_r+0x6f8>
   42fe8:	8804d3fa 	srli	r2,r17,15
   42fec:	12001e04 	addi	r8,r2,120
   42ff0:	11c01dc4 	addi	r7,r2,119
   42ff4:	4209883a 	add	r4,r8,r8
   42ff8:	003e6d06 	br	429b0 <__alt_data_end+0xfffe29b0>
   42ffc:	00c40004 	movi	r3,4096
   43000:	003f4606 	br	42d1c <__alt_data_end+0xfffe2d1c>
   43004:	00800044 	movi	r2,1
   43008:	a0800115 	stw	r2,4(r20)
   4300c:	003f7406 	br	42de0 <__alt_data_end+0xfffe2de0>
   43010:	1805d0ba 	srai	r2,r3,2
   43014:	01c00044 	movi	r7,1
   43018:	30c00117 	ldw	r3,4(r6)
   4301c:	388e983a 	sll	r7,r7,r2
   43020:	2805883a 	mov	r2,r5
   43024:	38c6b03a 	or	r3,r7,r3
   43028:	30c00115 	stw	r3,4(r6)
   4302c:	003f9b06 	br	42e9c <__alt_data_end+0xfffe2e9c>
   43030:	00c15504 	movi	r3,1364
   43034:	18801a36 	bltu	r3,r2,430a0 <_malloc_r+0x768>
   43038:	8804d4ba 	srli	r2,r17,18
   4303c:	12001f44 	addi	r8,r2,125
   43040:	11c01f04 	addi	r7,r2,124
   43044:	4209883a 	add	r4,r8,r8
   43048:	003e5906 	br	429b0 <__alt_data_end+0xfffe29b0>
   4304c:	ad400404 	addi	r21,r21,16
   43050:	003f1706 	br	42cb0 <__alt_data_end+0xfffe2cb0>
   43054:	00c01504 	movi	r3,84
   43058:	18802336 	bltu	r3,r2,430e8 <_malloc_r+0x7b0>
   4305c:	3804d33a 	srli	r2,r7,12
   43060:	11401bc4 	addi	r5,r2,111
   43064:	10c01b84 	addi	r3,r2,110
   43068:	294b883a 	add	r5,r5,r5
   4306c:	003f7b06 	br	42e5c <__alt_data_end+0xfffe2e5c>
   43070:	9c000217 	ldw	r16,8(r19)
   43074:	00bfff04 	movi	r2,-4
   43078:	80c00117 	ldw	r3,4(r16)
   4307c:	1886703a 	and	r3,r3,r2
   43080:	003f5306 	br	42dd0 <__alt_data_end+0xfffe2dd0>
   43084:	3083ffcc 	andi	r2,r6,4095
   43088:	103f181e 	bne	r2,zero,42cec <__alt_data_end+0xfffe2cec>
   4308c:	99000217 	ldw	r4,8(r19)
   43090:	b545883a 	add	r2,r22,r21
   43094:	10800054 	ori	r2,r2,1
   43098:	20800115 	stw	r2,4(r4)
   4309c:	003f3e06 	br	42d98 <__alt_data_end+0xfffe2d98>
   430a0:	01003f84 	movi	r4,254
   430a4:	02001fc4 	movi	r8,127
   430a8:	01c01f84 	movi	r7,126
   430ac:	003e4006 	br	429b0 <__alt_data_end+0xfffe29b0>
   430b0:	00800174 	movhi	r2,5
   430b4:	108d5204 	addi	r2,r2,13640
   430b8:	15000015 	stw	r20,0(r2)
   430bc:	003f1106 	br	42d04 <__alt_data_end+0xfffe2d04>
   430c0:	00800044 	movi	r2,1
   430c4:	002b883a 	mov	r21,zero
   430c8:	003f1f06 	br	42d48 <__alt_data_end+0xfffe2d48>
   430cc:	81400204 	addi	r5,r16,8
   430d0:	9009883a 	mov	r4,r18
   430d4:	0041e080 	call	41e08 <_free_r>
   430d8:	00800174 	movhi	r2,5
   430dc:	10947604 	addi	r2,r2,20952
   430e0:	10c00017 	ldw	r3,0(r2)
   430e4:	003f2c06 	br	42d98 <__alt_data_end+0xfffe2d98>
   430e8:	00c05504 	movi	r3,340
   430ec:	18800536 	bltu	r3,r2,43104 <_malloc_r+0x7cc>
   430f0:	3804d3fa 	srli	r2,r7,15
   430f4:	11401e04 	addi	r5,r2,120
   430f8:	10c01dc4 	addi	r3,r2,119
   430fc:	294b883a 	add	r5,r5,r5
   43100:	003f5606 	br	42e5c <__alt_data_end+0xfffe2e5c>
   43104:	00c15504 	movi	r3,1364
   43108:	18800536 	bltu	r3,r2,43120 <_malloc_r+0x7e8>
   4310c:	3804d4ba 	srli	r2,r7,18
   43110:	11401f44 	addi	r5,r2,125
   43114:	10c01f04 	addi	r3,r2,124
   43118:	294b883a 	add	r5,r5,r5
   4311c:	003f4f06 	br	42e5c <__alt_data_end+0xfffe2e5c>
   43120:	01403f84 	movi	r5,254
   43124:	00c01f84 	movi	r3,126
   43128:	003f4c06 	br	42e5c <__alt_data_end+0xfffe2e5c>
   4312c:	98800117 	ldw	r2,4(r19)
   43130:	003fa006 	br	42fb4 <__alt_data_end+0xfffe2fb4>
   43134:	8808d0fa 	srli	r4,r17,3
   43138:	20800044 	addi	r2,r4,1
   4313c:	1085883a 	add	r2,r2,r2
   43140:	003e9006 	br	42b84 <__alt_data_end+0xfffe2b84>

00043144 <memset>:
   43144:	20c000cc 	andi	r3,r4,3
   43148:	2005883a 	mov	r2,r4
   4314c:	18004426 	beq	r3,zero,43260 <memset+0x11c>
   43150:	31ffffc4 	addi	r7,r6,-1
   43154:	30004026 	beq	r6,zero,43258 <memset+0x114>
   43158:	2813883a 	mov	r9,r5
   4315c:	200d883a 	mov	r6,r4
   43160:	2007883a 	mov	r3,r4
   43164:	00000406 	br	43178 <memset+0x34>
   43168:	3a3fffc4 	addi	r8,r7,-1
   4316c:	31800044 	addi	r6,r6,1
   43170:	38003926 	beq	r7,zero,43258 <memset+0x114>
   43174:	400f883a 	mov	r7,r8
   43178:	18c00044 	addi	r3,r3,1
   4317c:	32400005 	stb	r9,0(r6)
   43180:	1a0000cc 	andi	r8,r3,3
   43184:	403ff81e 	bne	r8,zero,43168 <__alt_data_end+0xfffe3168>
   43188:	010000c4 	movi	r4,3
   4318c:	21c02d2e 	bgeu	r4,r7,43244 <memset+0x100>
   43190:	29003fcc 	andi	r4,r5,255
   43194:	200c923a 	slli	r6,r4,8
   43198:	3108b03a 	or	r4,r6,r4
   4319c:	200c943a 	slli	r6,r4,16
   431a0:	218cb03a 	or	r6,r4,r6
   431a4:	010003c4 	movi	r4,15
   431a8:	21c0182e 	bgeu	r4,r7,4320c <memset+0xc8>
   431ac:	3b3ffc04 	addi	r12,r7,-16
   431b0:	6018d13a 	srli	r12,r12,4
   431b4:	1a000104 	addi	r8,r3,4
   431b8:	1ac00204 	addi	r11,r3,8
   431bc:	6008913a 	slli	r4,r12,4
   431c0:	1a800304 	addi	r10,r3,12
   431c4:	1813883a 	mov	r9,r3
   431c8:	21000504 	addi	r4,r4,20
   431cc:	1909883a 	add	r4,r3,r4
   431d0:	49800015 	stw	r6,0(r9)
   431d4:	41800015 	stw	r6,0(r8)
   431d8:	59800015 	stw	r6,0(r11)
   431dc:	51800015 	stw	r6,0(r10)
   431e0:	42000404 	addi	r8,r8,16
   431e4:	4a400404 	addi	r9,r9,16
   431e8:	5ac00404 	addi	r11,r11,16
   431ec:	52800404 	addi	r10,r10,16
   431f0:	413ff71e 	bne	r8,r4,431d0 <__alt_data_end+0xfffe31d0>
   431f4:	63000044 	addi	r12,r12,1
   431f8:	6018913a 	slli	r12,r12,4
   431fc:	39c003cc 	andi	r7,r7,15
   43200:	010000c4 	movi	r4,3
   43204:	1b07883a 	add	r3,r3,r12
   43208:	21c00e2e 	bgeu	r4,r7,43244 <memset+0x100>
   4320c:	1813883a 	mov	r9,r3
   43210:	3811883a 	mov	r8,r7
   43214:	010000c4 	movi	r4,3
   43218:	49800015 	stw	r6,0(r9)
   4321c:	423fff04 	addi	r8,r8,-4
   43220:	4a400104 	addi	r9,r9,4
   43224:	223ffc36 	bltu	r4,r8,43218 <__alt_data_end+0xfffe3218>
   43228:	393fff04 	addi	r4,r7,-4
   4322c:	2008d0ba 	srli	r4,r4,2
   43230:	39c000cc 	andi	r7,r7,3
   43234:	21000044 	addi	r4,r4,1
   43238:	2109883a 	add	r4,r4,r4
   4323c:	2109883a 	add	r4,r4,r4
   43240:	1907883a 	add	r3,r3,r4
   43244:	38000526 	beq	r7,zero,4325c <memset+0x118>
   43248:	19cf883a 	add	r7,r3,r7
   4324c:	19400005 	stb	r5,0(r3)
   43250:	18c00044 	addi	r3,r3,1
   43254:	38fffd1e 	bne	r7,r3,4324c <__alt_data_end+0xfffe324c>
   43258:	f800283a 	ret
   4325c:	f800283a 	ret
   43260:	2007883a 	mov	r3,r4
   43264:	300f883a 	mov	r7,r6
   43268:	003fc706 	br	43188 <__alt_data_end+0xfffe3188>

0004326c <_open_r>:
   4326c:	defffd04 	addi	sp,sp,-12
   43270:	2805883a 	mov	r2,r5
   43274:	dc000015 	stw	r16,0(sp)
   43278:	04000174 	movhi	r16,5
   4327c:	dc400115 	stw	r17,4(sp)
   43280:	300b883a 	mov	r5,r6
   43284:	84146904 	addi	r16,r16,20900
   43288:	2023883a 	mov	r17,r4
   4328c:	380d883a 	mov	r6,r7
   43290:	1009883a 	mov	r4,r2
   43294:	dfc00215 	stw	ra,8(sp)
   43298:	80000015 	stw	zero,0(r16)
   4329c:	004e9540 	call	4e954 <open>
   432a0:	00ffffc4 	movi	r3,-1
   432a4:	10c00526 	beq	r2,r3,432bc <_open_r+0x50>
   432a8:	dfc00217 	ldw	ra,8(sp)
   432ac:	dc400117 	ldw	r17,4(sp)
   432b0:	dc000017 	ldw	r16,0(sp)
   432b4:	dec00304 	addi	sp,sp,12
   432b8:	f800283a 	ret
   432bc:	80c00017 	ldw	r3,0(r16)
   432c0:	183ff926 	beq	r3,zero,432a8 <__alt_data_end+0xfffe32a8>
   432c4:	88c00015 	stw	r3,0(r17)
   432c8:	003ff706 	br	432a8 <__alt_data_end+0xfffe32a8>

000432cc <_printf_r>:
   432cc:	defffd04 	addi	sp,sp,-12
   432d0:	2805883a 	mov	r2,r5
   432d4:	dfc00015 	stw	ra,0(sp)
   432d8:	d9800115 	stw	r6,4(sp)
   432dc:	d9c00215 	stw	r7,8(sp)
   432e0:	21400217 	ldw	r5,8(r4)
   432e4:	d9c00104 	addi	r7,sp,4
   432e8:	100d883a 	mov	r6,r2
   432ec:	0043aa80 	call	43aa8 <___vfprintf_internal_r>
   432f0:	dfc00017 	ldw	ra,0(sp)
   432f4:	dec00304 	addi	sp,sp,12
   432f8:	f800283a 	ret

000432fc <printf>:
   432fc:	defffc04 	addi	sp,sp,-16
   43300:	dfc00015 	stw	ra,0(sp)
   43304:	d9400115 	stw	r5,4(sp)
   43308:	d9800215 	stw	r6,8(sp)
   4330c:	d9c00315 	stw	r7,12(sp)
   43310:	00800174 	movhi	r2,5
   43314:	108d5104 	addi	r2,r2,13636
   43318:	10800017 	ldw	r2,0(r2)
   4331c:	200b883a 	mov	r5,r4
   43320:	d9800104 	addi	r6,sp,4
   43324:	11000217 	ldw	r4,8(r2)
   43328:	0045d840 	call	45d84 <__vfprintf_internal>
   4332c:	dfc00017 	ldw	ra,0(sp)
   43330:	dec00404 	addi	sp,sp,16
   43334:	f800283a 	ret

00043338 <_putc_r>:
   43338:	defffc04 	addi	sp,sp,-16
   4333c:	dc000215 	stw	r16,8(sp)
   43340:	dfc00315 	stw	ra,12(sp)
   43344:	2021883a 	mov	r16,r4
   43348:	20000226 	beq	r4,zero,43354 <_putc_r+0x1c>
   4334c:	20800e17 	ldw	r2,56(r4)
   43350:	10001b26 	beq	r2,zero,433c0 <_putc_r+0x88>
   43354:	30800217 	ldw	r2,8(r6)
   43358:	10bfffc4 	addi	r2,r2,-1
   4335c:	30800215 	stw	r2,8(r6)
   43360:	10000a16 	blt	r2,zero,4338c <_putc_r+0x54>
   43364:	30800017 	ldw	r2,0(r6)
   43368:	11400005 	stb	r5,0(r2)
   4336c:	30800017 	ldw	r2,0(r6)
   43370:	10c00044 	addi	r3,r2,1
   43374:	30c00015 	stw	r3,0(r6)
   43378:	10800003 	ldbu	r2,0(r2)
   4337c:	dfc00317 	ldw	ra,12(sp)
   43380:	dc000217 	ldw	r16,8(sp)
   43384:	dec00404 	addi	sp,sp,16
   43388:	f800283a 	ret
   4338c:	30c00617 	ldw	r3,24(r6)
   43390:	10c00616 	blt	r2,r3,433ac <_putc_r+0x74>
   43394:	30800017 	ldw	r2,0(r6)
   43398:	00c00284 	movi	r3,10
   4339c:	11400005 	stb	r5,0(r2)
   433a0:	30800017 	ldw	r2,0(r6)
   433a4:	11400003 	ldbu	r5,0(r2)
   433a8:	28fff11e 	bne	r5,r3,43370 <__alt_data_end+0xfffe3370>
   433ac:	8009883a 	mov	r4,r16
   433b0:	dfc00317 	ldw	ra,12(sp)
   433b4:	dc000217 	ldw	r16,8(sp)
   433b8:	dec00404 	addi	sp,sp,16
   433bc:	0045e5c1 	jmpi	45e5c <__swbuf_r>
   433c0:	d9400015 	stw	r5,0(sp)
   433c4:	d9800115 	stw	r6,4(sp)
   433c8:	0041a9c0 	call	41a9c <__sinit>
   433cc:	d9800117 	ldw	r6,4(sp)
   433d0:	d9400017 	ldw	r5,0(sp)
   433d4:	003fdf06 	br	43354 <__alt_data_end+0xfffe3354>

000433d8 <putc>:
   433d8:	00800174 	movhi	r2,5
   433dc:	defffc04 	addi	sp,sp,-16
   433e0:	108d5104 	addi	r2,r2,13636
   433e4:	dc000115 	stw	r16,4(sp)
   433e8:	14000017 	ldw	r16,0(r2)
   433ec:	dc400215 	stw	r17,8(sp)
   433f0:	dfc00315 	stw	ra,12(sp)
   433f4:	2023883a 	mov	r17,r4
   433f8:	80000226 	beq	r16,zero,43404 <putc+0x2c>
   433fc:	80800e17 	ldw	r2,56(r16)
   43400:	10001a26 	beq	r2,zero,4346c <putc+0x94>
   43404:	28800217 	ldw	r2,8(r5)
   43408:	10bfffc4 	addi	r2,r2,-1
   4340c:	28800215 	stw	r2,8(r5)
   43410:	10000b16 	blt	r2,zero,43440 <putc+0x68>
   43414:	28800017 	ldw	r2,0(r5)
   43418:	14400005 	stb	r17,0(r2)
   4341c:	28800017 	ldw	r2,0(r5)
   43420:	10c00044 	addi	r3,r2,1
   43424:	28c00015 	stw	r3,0(r5)
   43428:	10800003 	ldbu	r2,0(r2)
   4342c:	dfc00317 	ldw	ra,12(sp)
   43430:	dc400217 	ldw	r17,8(sp)
   43434:	dc000117 	ldw	r16,4(sp)
   43438:	dec00404 	addi	sp,sp,16
   4343c:	f800283a 	ret
   43440:	28c00617 	ldw	r3,24(r5)
   43444:	10c00e16 	blt	r2,r3,43480 <putc+0xa8>
   43448:	28800017 	ldw	r2,0(r5)
   4344c:	01000284 	movi	r4,10
   43450:	14400005 	stb	r17,0(r2)
   43454:	28800017 	ldw	r2,0(r5)
   43458:	10c00003 	ldbu	r3,0(r2)
   4345c:	193ff01e 	bne	r3,r4,43420 <__alt_data_end+0xfffe3420>
   43460:	280d883a 	mov	r6,r5
   43464:	180b883a 	mov	r5,r3
   43468:	00000706 	br	43488 <putc+0xb0>
   4346c:	8009883a 	mov	r4,r16
   43470:	d9400015 	stw	r5,0(sp)
   43474:	0041a9c0 	call	41a9c <__sinit>
   43478:	d9400017 	ldw	r5,0(sp)
   4347c:	003fe106 	br	43404 <__alt_data_end+0xfffe3404>
   43480:	280d883a 	mov	r6,r5
   43484:	880b883a 	mov	r5,r17
   43488:	8009883a 	mov	r4,r16
   4348c:	dfc00317 	ldw	ra,12(sp)
   43490:	dc400217 	ldw	r17,8(sp)
   43494:	dc000117 	ldw	r16,4(sp)
   43498:	dec00404 	addi	sp,sp,16
   4349c:	0045e5c1 	jmpi	45e5c <__swbuf_r>

000434a0 <_puts_r>:
   434a0:	defff604 	addi	sp,sp,-40
   434a4:	dc000715 	stw	r16,28(sp)
   434a8:	2021883a 	mov	r16,r4
   434ac:	2809883a 	mov	r4,r5
   434b0:	dc400815 	stw	r17,32(sp)
   434b4:	dfc00915 	stw	ra,36(sp)
   434b8:	2823883a 	mov	r17,r5
   434bc:	0043a080 	call	43a08 <strlen>
   434c0:	10c00044 	addi	r3,r2,1
   434c4:	d8800115 	stw	r2,4(sp)
   434c8:	00800174 	movhi	r2,5
   434cc:	1085fb04 	addi	r2,r2,6124
   434d0:	d8800215 	stw	r2,8(sp)
   434d4:	00800044 	movi	r2,1
   434d8:	d8800315 	stw	r2,12(sp)
   434dc:	00800084 	movi	r2,2
   434e0:	dc400015 	stw	r17,0(sp)
   434e4:	d8c00615 	stw	r3,24(sp)
   434e8:	dec00415 	stw	sp,16(sp)
   434ec:	d8800515 	stw	r2,20(sp)
   434f0:	80000226 	beq	r16,zero,434fc <_puts_r+0x5c>
   434f4:	80800e17 	ldw	r2,56(r16)
   434f8:	10001426 	beq	r2,zero,4354c <_puts_r+0xac>
   434fc:	81400217 	ldw	r5,8(r16)
   43500:	2880030b 	ldhu	r2,12(r5)
   43504:	10c8000c 	andi	r3,r2,8192
   43508:	1800061e 	bne	r3,zero,43524 <_puts_r+0x84>
   4350c:	29001917 	ldw	r4,100(r5)
   43510:	00f7ffc4 	movi	r3,-8193
   43514:	10880014 	ori	r2,r2,8192
   43518:	20c6703a 	and	r3,r4,r3
   4351c:	2880030d 	sth	r2,12(r5)
   43520:	28c01915 	stw	r3,100(r5)
   43524:	d9800404 	addi	r6,sp,16
   43528:	8009883a 	mov	r4,r16
   4352c:	0047b180 	call	47b18 <__sfvwrite_r>
   43530:	1000091e 	bne	r2,zero,43558 <_puts_r+0xb8>
   43534:	00800284 	movi	r2,10
   43538:	dfc00917 	ldw	ra,36(sp)
   4353c:	dc400817 	ldw	r17,32(sp)
   43540:	dc000717 	ldw	r16,28(sp)
   43544:	dec00a04 	addi	sp,sp,40
   43548:	f800283a 	ret
   4354c:	8009883a 	mov	r4,r16
   43550:	0041a9c0 	call	41a9c <__sinit>
   43554:	003fe906 	br	434fc <__alt_data_end+0xfffe34fc>
   43558:	00bfffc4 	movi	r2,-1
   4355c:	003ff606 	br	43538 <__alt_data_end+0xfffe3538>

00043560 <puts>:
   43560:	00800174 	movhi	r2,5
   43564:	108d5104 	addi	r2,r2,13636
   43568:	200b883a 	mov	r5,r4
   4356c:	11000017 	ldw	r4,0(r2)
   43570:	00434a01 	jmpi	434a0 <_puts_r>

00043574 <lflush>:
   43574:	2080030b 	ldhu	r2,12(r4)
   43578:	00c00244 	movi	r3,9
   4357c:	1080024c 	andi	r2,r2,9
   43580:	10c00226 	beq	r2,r3,4358c <lflush+0x18>
   43584:	0005883a 	mov	r2,zero
   43588:	f800283a 	ret
   4358c:	004170c1 	jmpi	4170c <fflush>

00043590 <__srefill_r>:
   43590:	defffc04 	addi	sp,sp,-16
   43594:	dc400115 	stw	r17,4(sp)
   43598:	dc000015 	stw	r16,0(sp)
   4359c:	dfc00315 	stw	ra,12(sp)
   435a0:	dc800215 	stw	r18,8(sp)
   435a4:	2023883a 	mov	r17,r4
   435a8:	2821883a 	mov	r16,r5
   435ac:	20000226 	beq	r4,zero,435b8 <__srefill_r+0x28>
   435b0:	20800e17 	ldw	r2,56(r4)
   435b4:	10003c26 	beq	r2,zero,436a8 <__srefill_r+0x118>
   435b8:	80c0030b 	ldhu	r3,12(r16)
   435bc:	1908000c 	andi	r4,r3,8192
   435c0:	1805883a 	mov	r2,r3
   435c4:	2000071e 	bne	r4,zero,435e4 <__srefill_r+0x54>
   435c8:	81001917 	ldw	r4,100(r16)
   435cc:	18880014 	ori	r2,r3,8192
   435d0:	00f7ffc4 	movi	r3,-8193
   435d4:	20c8703a 	and	r4,r4,r3
   435d8:	8080030d 	sth	r2,12(r16)
   435dc:	1007883a 	mov	r3,r2
   435e0:	81001915 	stw	r4,100(r16)
   435e4:	80000115 	stw	zero,4(r16)
   435e8:	1100080c 	andi	r4,r2,32
   435ec:	2000571e 	bne	r4,zero,4374c <__srefill_r+0x1bc>
   435f0:	1100010c 	andi	r4,r2,4
   435f4:	20001f26 	beq	r4,zero,43674 <__srefill_r+0xe4>
   435f8:	81400c17 	ldw	r5,48(r16)
   435fc:	28000826 	beq	r5,zero,43620 <__srefill_r+0x90>
   43600:	80801004 	addi	r2,r16,64
   43604:	28800226 	beq	r5,r2,43610 <__srefill_r+0x80>
   43608:	8809883a 	mov	r4,r17
   4360c:	0041e080 	call	41e08 <_free_r>
   43610:	80800f17 	ldw	r2,60(r16)
   43614:	80000c15 	stw	zero,48(r16)
   43618:	80800115 	stw	r2,4(r16)
   4361c:	1000391e 	bne	r2,zero,43704 <__srefill_r+0x174>
   43620:	80800417 	ldw	r2,16(r16)
   43624:	10004b26 	beq	r2,zero,43754 <__srefill_r+0x1c4>
   43628:	8480030b 	ldhu	r18,12(r16)
   4362c:	908000cc 	andi	r2,r18,3
   43630:	10001f1e 	bne	r2,zero,436b0 <__srefill_r+0x120>
   43634:	81800417 	ldw	r6,16(r16)
   43638:	80800817 	ldw	r2,32(r16)
   4363c:	81c00517 	ldw	r7,20(r16)
   43640:	81400717 	ldw	r5,28(r16)
   43644:	81800015 	stw	r6,0(r16)
   43648:	8809883a 	mov	r4,r17
   4364c:	103ee83a 	callr	r2
   43650:	80800115 	stw	r2,4(r16)
   43654:	00800e0e 	bge	zero,r2,43690 <__srefill_r+0x100>
   43658:	0005883a 	mov	r2,zero
   4365c:	dfc00317 	ldw	ra,12(sp)
   43660:	dc800217 	ldw	r18,8(sp)
   43664:	dc400117 	ldw	r17,4(sp)
   43668:	dc000017 	ldw	r16,0(sp)
   4366c:	dec00404 	addi	sp,sp,16
   43670:	f800283a 	ret
   43674:	1100040c 	andi	r4,r2,16
   43678:	20003026 	beq	r4,zero,4373c <__srefill_r+0x1ac>
   4367c:	1080020c 	andi	r2,r2,8
   43680:	1000241e 	bne	r2,zero,43714 <__srefill_r+0x184>
   43684:	18c00114 	ori	r3,r3,4
   43688:	80c0030d 	sth	r3,12(r16)
   4368c:	003fe406 	br	43620 <__alt_data_end+0xfffe3620>
   43690:	80c0030b 	ldhu	r3,12(r16)
   43694:	1000161e 	bne	r2,zero,436f0 <__srefill_r+0x160>
   43698:	18c00814 	ori	r3,r3,32
   4369c:	00bfffc4 	movi	r2,-1
   436a0:	80c0030d 	sth	r3,12(r16)
   436a4:	003fed06 	br	4365c <__alt_data_end+0xfffe365c>
   436a8:	0041a9c0 	call	41a9c <__sinit>
   436ac:	003fc206 	br	435b8 <__alt_data_end+0xfffe35b8>
   436b0:	00800174 	movhi	r2,5
   436b4:	108d5004 	addi	r2,r2,13632
   436b8:	11000017 	ldw	r4,0(r2)
   436bc:	01400134 	movhi	r5,4
   436c0:	00800044 	movi	r2,1
   436c4:	294d5d04 	addi	r5,r5,13684
   436c8:	8080030d 	sth	r2,12(r16)
   436cc:	00425f40 	call	425f4 <_fwalk>
   436d0:	00800244 	movi	r2,9
   436d4:	8480030d 	sth	r18,12(r16)
   436d8:	9480024c 	andi	r18,r18,9
   436dc:	90bfd51e 	bne	r18,r2,43634 <__alt_data_end+0xfffe3634>
   436e0:	800b883a 	mov	r5,r16
   436e4:	8809883a 	mov	r4,r17
   436e8:	00414940 	call	41494 <__sflush_r>
   436ec:	003fd106 	br	43634 <__alt_data_end+0xfffe3634>
   436f0:	18c01014 	ori	r3,r3,64
   436f4:	80000115 	stw	zero,4(r16)
   436f8:	00bfffc4 	movi	r2,-1
   436fc:	80c0030d 	sth	r3,12(r16)
   43700:	003fd606 	br	4365c <__alt_data_end+0xfffe365c>
   43704:	80c00e17 	ldw	r3,56(r16)
   43708:	0005883a 	mov	r2,zero
   4370c:	80c00015 	stw	r3,0(r16)
   43710:	003fd206 	br	4365c <__alt_data_end+0xfffe365c>
   43714:	800b883a 	mov	r5,r16
   43718:	8809883a 	mov	r4,r17
   4371c:	00416b00 	call	416b0 <_fflush_r>
   43720:	10000a1e 	bne	r2,zero,4374c <__srefill_r+0x1bc>
   43724:	8080030b 	ldhu	r2,12(r16)
   43728:	00fffdc4 	movi	r3,-9
   4372c:	80000215 	stw	zero,8(r16)
   43730:	1886703a 	and	r3,r3,r2
   43734:	80000615 	stw	zero,24(r16)
   43738:	003fd206 	br	43684 <__alt_data_end+0xfffe3684>
   4373c:	00800244 	movi	r2,9
   43740:	88800015 	stw	r2,0(r17)
   43744:	18c01014 	ori	r3,r3,64
   43748:	80c0030d 	sth	r3,12(r16)
   4374c:	00bfffc4 	movi	r2,-1
   43750:	003fc206 	br	4365c <__alt_data_end+0xfffe365c>
   43754:	800b883a 	mov	r5,r16
   43758:	8809883a 	mov	r4,r17
   4375c:	004277c0 	call	4277c <__smakebuf_r>
   43760:	003fb106 	br	43628 <__alt_data_end+0xfffe3628>

00043764 <_sbrk_r>:
   43764:	defffd04 	addi	sp,sp,-12
   43768:	dc000015 	stw	r16,0(sp)
   4376c:	04000174 	movhi	r16,5
   43770:	dc400115 	stw	r17,4(sp)
   43774:	84146904 	addi	r16,r16,20900
   43778:	2023883a 	mov	r17,r4
   4377c:	2809883a 	mov	r4,r5
   43780:	dfc00215 	stw	ra,8(sp)
   43784:	80000015 	stw	zero,0(r16)
   43788:	004ec700 	call	4ec70 <sbrk>
   4378c:	00ffffc4 	movi	r3,-1
   43790:	10c00526 	beq	r2,r3,437a8 <_sbrk_r+0x44>
   43794:	dfc00217 	ldw	ra,8(sp)
   43798:	dc400117 	ldw	r17,4(sp)
   4379c:	dc000017 	ldw	r16,0(sp)
   437a0:	dec00304 	addi	sp,sp,12
   437a4:	f800283a 	ret
   437a8:	80c00017 	ldw	r3,0(r16)
   437ac:	183ff926 	beq	r3,zero,43794 <__alt_data_end+0xfffe3794>
   437b0:	88c00015 	stw	r3,0(r17)
   437b4:	003ff706 	br	43794 <__alt_data_end+0xfffe3794>

000437b8 <__sread>:
   437b8:	defffe04 	addi	sp,sp,-8
   437bc:	dc000015 	stw	r16,0(sp)
   437c0:	2821883a 	mov	r16,r5
   437c4:	2940038f 	ldh	r5,14(r5)
   437c8:	dfc00115 	stw	ra,4(sp)
   437cc:	00495b00 	call	495b0 <_read_r>
   437d0:	10000716 	blt	r2,zero,437f0 <__sread+0x38>
   437d4:	80c01417 	ldw	r3,80(r16)
   437d8:	1887883a 	add	r3,r3,r2
   437dc:	80c01415 	stw	r3,80(r16)
   437e0:	dfc00117 	ldw	ra,4(sp)
   437e4:	dc000017 	ldw	r16,0(sp)
   437e8:	dec00204 	addi	sp,sp,8
   437ec:	f800283a 	ret
   437f0:	80c0030b 	ldhu	r3,12(r16)
   437f4:	18fbffcc 	andi	r3,r3,61439
   437f8:	80c0030d 	sth	r3,12(r16)
   437fc:	dfc00117 	ldw	ra,4(sp)
   43800:	dc000017 	ldw	r16,0(sp)
   43804:	dec00204 	addi	sp,sp,8
   43808:	f800283a 	ret

0004380c <__seofread>:
   4380c:	0005883a 	mov	r2,zero
   43810:	f800283a 	ret

00043814 <__swrite>:
   43814:	2880030b 	ldhu	r2,12(r5)
   43818:	defffb04 	addi	sp,sp,-20
   4381c:	dcc00315 	stw	r19,12(sp)
   43820:	dc800215 	stw	r18,8(sp)
   43824:	dc400115 	stw	r17,4(sp)
   43828:	dc000015 	stw	r16,0(sp)
   4382c:	dfc00415 	stw	ra,16(sp)
   43830:	10c0400c 	andi	r3,r2,256
   43834:	2821883a 	mov	r16,r5
   43838:	2023883a 	mov	r17,r4
   4383c:	3025883a 	mov	r18,r6
   43840:	3827883a 	mov	r19,r7
   43844:	18000526 	beq	r3,zero,4385c <__swrite+0x48>
   43848:	2940038f 	ldh	r5,14(r5)
   4384c:	01c00084 	movi	r7,2
   43850:	000d883a 	mov	r6,zero
   43854:	00481100 	call	48110 <_lseek_r>
   43858:	8080030b 	ldhu	r2,12(r16)
   4385c:	8140038f 	ldh	r5,14(r16)
   43860:	10bbffcc 	andi	r2,r2,61439
   43864:	980f883a 	mov	r7,r19
   43868:	900d883a 	mov	r6,r18
   4386c:	8809883a 	mov	r4,r17
   43870:	8080030d 	sth	r2,12(r16)
   43874:	dfc00417 	ldw	ra,16(sp)
   43878:	dcc00317 	ldw	r19,12(sp)
   4387c:	dc800217 	ldw	r18,8(sp)
   43880:	dc400117 	ldw	r17,4(sp)
   43884:	dc000017 	ldw	r16,0(sp)
   43888:	dec00504 	addi	sp,sp,20
   4388c:	0045fb41 	jmpi	45fb4 <_write_r>

00043890 <__sseek>:
   43890:	defffe04 	addi	sp,sp,-8
   43894:	dc000015 	stw	r16,0(sp)
   43898:	2821883a 	mov	r16,r5
   4389c:	2940038f 	ldh	r5,14(r5)
   438a0:	dfc00115 	stw	ra,4(sp)
   438a4:	00481100 	call	48110 <_lseek_r>
   438a8:	00ffffc4 	movi	r3,-1
   438ac:	10c00826 	beq	r2,r3,438d0 <__sseek+0x40>
   438b0:	80c0030b 	ldhu	r3,12(r16)
   438b4:	80801415 	stw	r2,80(r16)
   438b8:	18c40014 	ori	r3,r3,4096
   438bc:	80c0030d 	sth	r3,12(r16)
   438c0:	dfc00117 	ldw	ra,4(sp)
   438c4:	dc000017 	ldw	r16,0(sp)
   438c8:	dec00204 	addi	sp,sp,8
   438cc:	f800283a 	ret
   438d0:	80c0030b 	ldhu	r3,12(r16)
   438d4:	18fbffcc 	andi	r3,r3,61439
   438d8:	80c0030d 	sth	r3,12(r16)
   438dc:	dfc00117 	ldw	ra,4(sp)
   438e0:	dc000017 	ldw	r16,0(sp)
   438e4:	dec00204 	addi	sp,sp,8
   438e8:	f800283a 	ret

000438ec <__sclose>:
   438ec:	2940038f 	ldh	r5,14(r5)
   438f0:	00461681 	jmpi	46168 <_close_r>

000438f4 <strcat>:
   438f4:	defffe04 	addi	sp,sp,-8
   438f8:	dc000015 	stw	r16,0(sp)
   438fc:	dfc00115 	stw	ra,4(sp)
   43900:	208000cc 	andi	r2,r4,3
   43904:	2021883a 	mov	r16,r4
   43908:	1000131e 	bne	r2,zero,43958 <strcat+0x64>
   4390c:	20800017 	ldw	r2,0(r4)
   43910:	01ffbff4 	movhi	r7,65279
   43914:	39ffbfc4 	addi	r7,r7,-257
   43918:	0086303a 	nor	r3,zero,r2
   4391c:	01a02074 	movhi	r6,32897
   43920:	11c5883a 	add	r2,r2,r7
   43924:	31a02004 	addi	r6,r6,-32640
   43928:	10c4703a 	and	r2,r2,r3
   4392c:	1184703a 	and	r2,r2,r6
   43930:	1000091e 	bne	r2,zero,43958 <strcat+0x64>
   43934:	21000104 	addi	r4,r4,4
   43938:	20800017 	ldw	r2,0(r4)
   4393c:	11c7883a 	add	r3,r2,r7
   43940:	0084303a 	nor	r2,zero,r2
   43944:	1884703a 	and	r2,r3,r2
   43948:	1184703a 	and	r2,r2,r6
   4394c:	103ff926 	beq	r2,zero,43934 <__alt_data_end+0xfffe3934>
   43950:	00000106 	br	43958 <strcat+0x64>
   43954:	21000044 	addi	r4,r4,1
   43958:	20800007 	ldb	r2,0(r4)
   4395c:	103ffd1e 	bne	r2,zero,43954 <__alt_data_end+0xfffe3954>
   43960:	00439780 	call	43978 <strcpy>
   43964:	8005883a 	mov	r2,r16
   43968:	dfc00117 	ldw	ra,4(sp)
   4396c:	dc000017 	ldw	r16,0(sp)
   43970:	dec00204 	addi	sp,sp,8
   43974:	f800283a 	ret

00043978 <strcpy>:
   43978:	2906b03a 	or	r3,r5,r4
   4397c:	18c000cc 	andi	r3,r3,3
   43980:	2005883a 	mov	r2,r4
   43984:	1800161e 	bne	r3,zero,439e0 <strcpy+0x68>
   43988:	29c00017 	ldw	r7,0(r5)
   4398c:	02ffbff4 	movhi	r11,65279
   43990:	5affbfc4 	addi	r11,r11,-257
   43994:	02a02074 	movhi	r10,32897
   43998:	01c6303a 	nor	r3,zero,r7
   4399c:	3ac9883a 	add	r4,r7,r11
   439a0:	52a02004 	addi	r10,r10,-32640
   439a4:	20c6703a 	and	r3,r4,r3
   439a8:	1a86703a 	and	r3,r3,r10
   439ac:	18000c1e 	bne	r3,zero,439e0 <strcpy+0x68>
   439b0:	1011883a 	mov	r8,r2
   439b4:	41c00015 	stw	r7,0(r8)
   439b8:	29400104 	addi	r5,r5,4
   439bc:	29c00017 	ldw	r7,0(r5)
   439c0:	41800104 	addi	r6,r8,4
   439c4:	3011883a 	mov	r8,r6
   439c8:	3ad3883a 	add	r9,r7,r11
   439cc:	01c6303a 	nor	r3,zero,r7
   439d0:	48c6703a 	and	r3,r9,r3
   439d4:	1a86703a 	and	r3,r3,r10
   439d8:	183ff626 	beq	r3,zero,439b4 <__alt_data_end+0xfffe39b4>
   439dc:	00000106 	br	439e4 <strcpy+0x6c>
   439e0:	100d883a 	mov	r6,r2
   439e4:	28c00003 	ldbu	r3,0(r5)
   439e8:	31800044 	addi	r6,r6,1
   439ec:	29400044 	addi	r5,r5,1
   439f0:	30ffffc5 	stb	r3,-1(r6)
   439f4:	18c03fcc 	andi	r3,r3,255
   439f8:	18c0201c 	xori	r3,r3,128
   439fc:	18ffe004 	addi	r3,r3,-128
   43a00:	183ff81e 	bne	r3,zero,439e4 <__alt_data_end+0xfffe39e4>
   43a04:	f800283a 	ret

00043a08 <strlen>:
   43a08:	208000cc 	andi	r2,r4,3
   43a0c:	10002026 	beq	r2,zero,43a90 <strlen+0x88>
   43a10:	20800007 	ldb	r2,0(r4)
   43a14:	10002026 	beq	r2,zero,43a98 <strlen+0x90>
   43a18:	2005883a 	mov	r2,r4
   43a1c:	00000206 	br	43a28 <strlen+0x20>
   43a20:	10c00007 	ldb	r3,0(r2)
   43a24:	18001826 	beq	r3,zero,43a88 <strlen+0x80>
   43a28:	10800044 	addi	r2,r2,1
   43a2c:	10c000cc 	andi	r3,r2,3
   43a30:	183ffb1e 	bne	r3,zero,43a20 <__alt_data_end+0xfffe3a20>
   43a34:	10c00017 	ldw	r3,0(r2)
   43a38:	01ffbff4 	movhi	r7,65279
   43a3c:	39ffbfc4 	addi	r7,r7,-257
   43a40:	00ca303a 	nor	r5,zero,r3
   43a44:	01a02074 	movhi	r6,32897
   43a48:	19c7883a 	add	r3,r3,r7
   43a4c:	31a02004 	addi	r6,r6,-32640
   43a50:	1946703a 	and	r3,r3,r5
   43a54:	1986703a 	and	r3,r3,r6
   43a58:	1800091e 	bne	r3,zero,43a80 <strlen+0x78>
   43a5c:	10800104 	addi	r2,r2,4
   43a60:	10c00017 	ldw	r3,0(r2)
   43a64:	19cb883a 	add	r5,r3,r7
   43a68:	00c6303a 	nor	r3,zero,r3
   43a6c:	28c6703a 	and	r3,r5,r3
   43a70:	1986703a 	and	r3,r3,r6
   43a74:	183ff926 	beq	r3,zero,43a5c <__alt_data_end+0xfffe3a5c>
   43a78:	00000106 	br	43a80 <strlen+0x78>
   43a7c:	10800044 	addi	r2,r2,1
   43a80:	10c00007 	ldb	r3,0(r2)
   43a84:	183ffd1e 	bne	r3,zero,43a7c <__alt_data_end+0xfffe3a7c>
   43a88:	1105c83a 	sub	r2,r2,r4
   43a8c:	f800283a 	ret
   43a90:	2005883a 	mov	r2,r4
   43a94:	003fe706 	br	43a34 <__alt_data_end+0xfffe3a34>
   43a98:	0005883a 	mov	r2,zero
   43a9c:	f800283a 	ret

00043aa0 <_times_r>:
   43aa0:	2809883a 	mov	r4,r5
   43aa4:	004ed701 	jmpi	4ed70 <times>

00043aa8 <___vfprintf_internal_r>:
   43aa8:	deffb804 	addi	sp,sp,-288
   43aac:	dfc04715 	stw	ra,284(sp)
   43ab0:	ddc04515 	stw	r23,276(sp)
   43ab4:	dd404315 	stw	r21,268(sp)
   43ab8:	d9002d15 	stw	r4,180(sp)
   43abc:	282f883a 	mov	r23,r5
   43ac0:	302b883a 	mov	r21,r6
   43ac4:	d9c02e15 	stw	r7,184(sp)
   43ac8:	df004615 	stw	fp,280(sp)
   43acc:	dd804415 	stw	r22,272(sp)
   43ad0:	dd004215 	stw	r20,264(sp)
   43ad4:	dcc04115 	stw	r19,260(sp)
   43ad8:	dc804015 	stw	r18,256(sp)
   43adc:	dc403f15 	stw	r17,252(sp)
   43ae0:	dc003e15 	stw	r16,248(sp)
   43ae4:	00480e00 	call	480e0 <_localeconv_r>
   43ae8:	10800017 	ldw	r2,0(r2)
   43aec:	1009883a 	mov	r4,r2
   43af0:	d8803415 	stw	r2,208(sp)
   43af4:	0043a080 	call	43a08 <strlen>
   43af8:	d8803715 	stw	r2,220(sp)
   43afc:	d8802d17 	ldw	r2,180(sp)
   43b00:	10000226 	beq	r2,zero,43b0c <___vfprintf_internal_r+0x64>
   43b04:	10800e17 	ldw	r2,56(r2)
   43b08:	1000fb26 	beq	r2,zero,43ef8 <___vfprintf_internal_r+0x450>
   43b0c:	b880030b 	ldhu	r2,12(r23)
   43b10:	10c8000c 	andi	r3,r2,8192
   43b14:	1800061e 	bne	r3,zero,43b30 <___vfprintf_internal_r+0x88>
   43b18:	b9001917 	ldw	r4,100(r23)
   43b1c:	00f7ffc4 	movi	r3,-8193
   43b20:	10880014 	ori	r2,r2,8192
   43b24:	20c6703a 	and	r3,r4,r3
   43b28:	b880030d 	sth	r2,12(r23)
   43b2c:	b8c01915 	stw	r3,100(r23)
   43b30:	10c0020c 	andi	r3,r2,8
   43b34:	1800c326 	beq	r3,zero,43e44 <___vfprintf_internal_r+0x39c>
   43b38:	b8c00417 	ldw	r3,16(r23)
   43b3c:	1800c126 	beq	r3,zero,43e44 <___vfprintf_internal_r+0x39c>
   43b40:	1080068c 	andi	r2,r2,26
   43b44:	00c00284 	movi	r3,10
   43b48:	10c0c626 	beq	r2,r3,43e64 <___vfprintf_internal_r+0x3bc>
   43b4c:	d8c00404 	addi	r3,sp,16
   43b50:	05000174 	movhi	r20,5
   43b54:	d9001e04 	addi	r4,sp,120
   43b58:	a5060c84 	addi	r20,r20,6194
   43b5c:	d8c01e15 	stw	r3,120(sp)
   43b60:	d8002015 	stw	zero,128(sp)
   43b64:	d8001f15 	stw	zero,124(sp)
   43b68:	d8003315 	stw	zero,204(sp)
   43b6c:	d8003615 	stw	zero,216(sp)
   43b70:	d8003815 	stw	zero,224(sp)
   43b74:	1811883a 	mov	r8,r3
   43b78:	d8003915 	stw	zero,228(sp)
   43b7c:	d8003a15 	stw	zero,232(sp)
   43b80:	d8002f15 	stw	zero,188(sp)
   43b84:	d9002815 	stw	r4,160(sp)
   43b88:	a8800007 	ldb	r2,0(r21)
   43b8c:	10028b26 	beq	r2,zero,445bc <___vfprintf_internal_r+0xb14>
   43b90:	00c00944 	movi	r3,37
   43b94:	a823883a 	mov	r17,r21
   43b98:	10c0021e 	bne	r2,r3,43ba4 <___vfprintf_internal_r+0xfc>
   43b9c:	00001406 	br	43bf0 <___vfprintf_internal_r+0x148>
   43ba0:	10c00326 	beq	r2,r3,43bb0 <___vfprintf_internal_r+0x108>
   43ba4:	8c400044 	addi	r17,r17,1
   43ba8:	88800007 	ldb	r2,0(r17)
   43bac:	103ffc1e 	bne	r2,zero,43ba0 <__alt_data_end+0xfffe3ba0>
   43bb0:	8d61c83a 	sub	r16,r17,r21
   43bb4:	80000e26 	beq	r16,zero,43bf0 <___vfprintf_internal_r+0x148>
   43bb8:	d8c02017 	ldw	r3,128(sp)
   43bbc:	d8801f17 	ldw	r2,124(sp)
   43bc0:	45400015 	stw	r21,0(r8)
   43bc4:	1c07883a 	add	r3,r3,r16
   43bc8:	10800044 	addi	r2,r2,1
   43bcc:	d8c02015 	stw	r3,128(sp)
   43bd0:	44000115 	stw	r16,4(r8)
   43bd4:	d8801f15 	stw	r2,124(sp)
   43bd8:	00c001c4 	movi	r3,7
   43bdc:	1880a916 	blt	r3,r2,43e84 <___vfprintf_internal_r+0x3dc>
   43be0:	42000204 	addi	r8,r8,8
   43be4:	d9402f17 	ldw	r5,188(sp)
   43be8:	2c0b883a 	add	r5,r5,r16
   43bec:	d9402f15 	stw	r5,188(sp)
   43bf0:	88800007 	ldb	r2,0(r17)
   43bf4:	1000aa26 	beq	r2,zero,43ea0 <___vfprintf_internal_r+0x3f8>
   43bf8:	8d400044 	addi	r21,r17,1
   43bfc:	8c400047 	ldb	r17,1(r17)
   43c00:	0021883a 	mov	r16,zero
   43c04:	00bfffc4 	movi	r2,-1
   43c08:	0025883a 	mov	r18,zero
   43c0c:	dc002905 	stb	r16,164(sp)
   43c10:	d8002785 	stb	zero,158(sp)
   43c14:	d8002b05 	stb	zero,172(sp)
   43c18:	d8802a15 	stw	r2,168(sp)
   43c1c:	d8003115 	stw	zero,196(sp)
   43c20:	04c01604 	movi	r19,88
   43c24:	05800244 	movi	r22,9
   43c28:	9021883a 	mov	r16,r18
   43c2c:	4039883a 	mov	fp,r8
   43c30:	ad400044 	addi	r21,r21,1
   43c34:	88bff804 	addi	r2,r17,-32
   43c38:	98833236 	bltu	r19,r2,44904 <___vfprintf_internal_r+0xe5c>
   43c3c:	100490ba 	slli	r2,r2,2
   43c40:	00c00134 	movhi	r3,4
   43c44:	18cf1504 	addi	r3,r3,15444
   43c48:	10c5883a 	add	r2,r2,r3
   43c4c:	10800017 	ldw	r2,0(r2)
   43c50:	1000683a 	jmp	r2
   43c54:	000447fc 	xorhi	zero,zero,4383
   43c58:	00044904 	movi	zero,4388
   43c5c:	00044904 	movi	zero,4388
   43c60:	0004481c 	xori	zero,zero,4384
   43c64:	00044904 	movi	zero,4388
   43c68:	00044904 	movi	zero,4388
   43c6c:	00044904 	movi	zero,4388
   43c70:	00044904 	movi	zero,4388
   43c74:	00044904 	movi	zero,4388
   43c78:	00044904 	movi	zero,4388
   43c7c:	00043f04 	movi	zero,4348
   43c80:	0004470c 	andi	zero,zero,4380
   43c84:	00044904 	movi	zero,4388
   43c88:	00043dc8 	cmpgei	zero,zero,4343
   43c8c:	00043f28 	cmpgeui	zero,zero,4348
   43c90:	00044904 	movi	zero,4388
   43c94:	00043f78 	rdprs	zero,zero,4349
   43c98:	00043f84 	movi	zero,4350
   43c9c:	00043f84 	movi	zero,4350
   43ca0:	00043f84 	movi	zero,4350
   43ca4:	00043f84 	movi	zero,4350
   43ca8:	00043f84 	movi	zero,4350
   43cac:	00043f84 	movi	zero,4350
   43cb0:	00043f84 	movi	zero,4350
   43cb4:	00043f84 	movi	zero,4350
   43cb8:	00043f84 	movi	zero,4350
   43cbc:	00044904 	movi	zero,4388
   43cc0:	00044904 	movi	zero,4388
   43cc4:	00044904 	movi	zero,4388
   43cc8:	00044904 	movi	zero,4388
   43ccc:	00044904 	movi	zero,4388
   43cd0:	00044904 	movi	zero,4388
   43cd4:	00044904 	movi	zero,4388
   43cd8:	00044904 	movi	zero,4388
   43cdc:	00044904 	movi	zero,4388
   43ce0:	00044904 	movi	zero,4388
   43ce4:	00043fc0 	call	43fc <__alt_mem_onchip_mem_1f-0x3bc04>
   43ce8:	00044088 	cmpgei	zero,zero,4354
   43cec:	00044904 	movi	zero,4388
   43cf0:	00044088 	cmpgei	zero,zero,4354
   43cf4:	00044904 	movi	zero,4388
   43cf8:	00044904 	movi	zero,4388
   43cfc:	00044904 	movi	zero,4388
   43d00:	00044904 	movi	zero,4388
   43d04:	00044134 	movhi	zero,4356
   43d08:	00044904 	movi	zero,4388
   43d0c:	00044904 	movi	zero,4388
   43d10:	00044140 	call	4414 <__alt_mem_onchip_mem_1f-0x3bbec>
   43d14:	00044904 	movi	zero,4388
   43d18:	00044904 	movi	zero,4388
   43d1c:	00044904 	movi	zero,4388
   43d20:	00044904 	movi	zero,4388
   43d24:	00044904 	movi	zero,4388
   43d28:	000445c4 	movi	zero,4375
   43d2c:	00044904 	movi	zero,4388
   43d30:	00044904 	movi	zero,4388
   43d34:	00044630 	cmpltui	zero,zero,4376
   43d38:	00044904 	movi	zero,4388
   43d3c:	00044904 	movi	zero,4388
   43d40:	00044904 	movi	zero,4388
   43d44:	00044904 	movi	zero,4388
   43d48:	00044904 	movi	zero,4388
   43d4c:	00044904 	movi	zero,4388
   43d50:	00044904 	movi	zero,4388
   43d54:	00044904 	movi	zero,4388
   43d58:	00044904 	movi	zero,4388
   43d5c:	00044904 	movi	zero,4388
   43d60:	000448a8 	cmpgeui	zero,zero,4386
   43d64:	00044828 	cmpgeui	zero,zero,4384
   43d68:	00044088 	cmpgei	zero,zero,4354
   43d6c:	00044088 	cmpgei	zero,zero,4354
   43d70:	00044088 	cmpgei	zero,zero,4354
   43d74:	00044848 	cmpgei	zero,zero,4385
   43d78:	00044828 	cmpgeui	zero,zero,4384
   43d7c:	00044904 	movi	zero,4388
   43d80:	00044904 	movi	zero,4388
   43d84:	00044854 	movui	zero,4385
   43d88:	00044904 	movi	zero,4388
   43d8c:	00044868 	cmpgeui	zero,zero,4385
   43d90:	000446ec 	andhi	zero,zero,4379
   43d94:	00043dd4 	movui	zero,4343
   43d98:	00044724 	muli	zero,zero,4380
   43d9c:	00044904 	movi	zero,4388
   43da0:	00044730 	cmpltui	zero,zero,4380
   43da4:	00044904 	movi	zero,4388
   43da8:	00044794 	movui	zero,4382
   43dac:	00044904 	movi	zero,4388
   43db0:	00044904 	movi	zero,4388
   43db4:	000447b4 	movhi	zero,4382
   43db8:	d8c03117 	ldw	r3,196(sp)
   43dbc:	d8802e15 	stw	r2,184(sp)
   43dc0:	00c7c83a 	sub	r3,zero,r3
   43dc4:	d8c03115 	stw	r3,196(sp)
   43dc8:	84000114 	ori	r16,r16,4
   43dcc:	ac400007 	ldb	r17,0(r21)
   43dd0:	003f9706 	br	43c30 <__alt_data_end+0xfffe3c30>
   43dd4:	00800c04 	movi	r2,48
   43dd8:	d8802705 	stb	r2,156(sp)
   43ddc:	00801e04 	movi	r2,120
   43de0:	d8802745 	stb	r2,157(sp)
   43de4:	d9002a17 	ldw	r4,168(sp)
   43de8:	d8802e17 	ldw	r2,184(sp)
   43dec:	d8002785 	stb	zero,158(sp)
   43df0:	e011883a 	mov	r8,fp
   43df4:	10c00104 	addi	r3,r2,4
   43df8:	14c00017 	ldw	r19,0(r2)
   43dfc:	002d883a 	mov	r22,zero
   43e00:	80800094 	ori	r2,r16,2
   43e04:	2002ca16 	blt	r4,zero,44930 <___vfprintf_internal_r+0xe88>
   43e08:	00bfdfc4 	movi	r2,-129
   43e0c:	80a4703a 	and	r18,r16,r2
   43e10:	d8c02e15 	stw	r3,184(sp)
   43e14:	94800094 	ori	r18,r18,2
   43e18:	9802b41e 	bne	r19,zero,448ec <___vfprintf_internal_r+0xe44>
   43e1c:	01400174 	movhi	r5,5
   43e20:	29460504 	addi	r5,r5,6164
   43e24:	d9403915 	stw	r5,228(sp)
   43e28:	04401e04 	movi	r17,120
   43e2c:	d8802a17 	ldw	r2,168(sp)
   43e30:	0039883a 	mov	fp,zero
   43e34:	1001fa26 	beq	r2,zero,44620 <___vfprintf_internal_r+0xb78>
   43e38:	0027883a 	mov	r19,zero
   43e3c:	002d883a 	mov	r22,zero
   43e40:	00021906 	br	446a8 <___vfprintf_internal_r+0xc00>
   43e44:	d9002d17 	ldw	r4,180(sp)
   43e48:	b80b883a 	mov	r5,r23
   43e4c:	00460140 	call	46014 <__swsetup_r>
   43e50:	1005dc1e 	bne	r2,zero,455c4 <___vfprintf_internal_r+0x1b1c>
   43e54:	b880030b 	ldhu	r2,12(r23)
   43e58:	00c00284 	movi	r3,10
   43e5c:	1080068c 	andi	r2,r2,26
   43e60:	10ff3a1e 	bne	r2,r3,43b4c <__alt_data_end+0xfffe3b4c>
   43e64:	b880038f 	ldh	r2,14(r23)
   43e68:	103f3816 	blt	r2,zero,43b4c <__alt_data_end+0xfffe3b4c>
   43e6c:	d9c02e17 	ldw	r7,184(sp)
   43e70:	d9002d17 	ldw	r4,180(sp)
   43e74:	a80d883a 	mov	r6,r21
   43e78:	b80b883a 	mov	r5,r23
   43e7c:	0045da00 	call	45da0 <__sbprintf>
   43e80:	00001106 	br	43ec8 <___vfprintf_internal_r+0x420>
   43e84:	d9002d17 	ldw	r4,180(sp)
   43e88:	d9801e04 	addi	r6,sp,120
   43e8c:	b80b883a 	mov	r5,r23
   43e90:	0049dc00 	call	49dc0 <__sprint_r>
   43e94:	1000081e 	bne	r2,zero,43eb8 <___vfprintf_internal_r+0x410>
   43e98:	da000404 	addi	r8,sp,16
   43e9c:	003f5106 	br	43be4 <__alt_data_end+0xfffe3be4>
   43ea0:	d8802017 	ldw	r2,128(sp)
   43ea4:	10000426 	beq	r2,zero,43eb8 <___vfprintf_internal_r+0x410>
   43ea8:	d9002d17 	ldw	r4,180(sp)
   43eac:	d9801e04 	addi	r6,sp,120
   43eb0:	b80b883a 	mov	r5,r23
   43eb4:	0049dc00 	call	49dc0 <__sprint_r>
   43eb8:	b880030b 	ldhu	r2,12(r23)
   43ebc:	1080100c 	andi	r2,r2,64
   43ec0:	1005c01e 	bne	r2,zero,455c4 <___vfprintf_internal_r+0x1b1c>
   43ec4:	d8802f17 	ldw	r2,188(sp)
   43ec8:	dfc04717 	ldw	ra,284(sp)
   43ecc:	df004617 	ldw	fp,280(sp)
   43ed0:	ddc04517 	ldw	r23,276(sp)
   43ed4:	dd804417 	ldw	r22,272(sp)
   43ed8:	dd404317 	ldw	r21,268(sp)
   43edc:	dd004217 	ldw	r20,264(sp)
   43ee0:	dcc04117 	ldw	r19,260(sp)
   43ee4:	dc804017 	ldw	r18,256(sp)
   43ee8:	dc403f17 	ldw	r17,252(sp)
   43eec:	dc003e17 	ldw	r16,248(sp)
   43ef0:	dec04804 	addi	sp,sp,288
   43ef4:	f800283a 	ret
   43ef8:	d9002d17 	ldw	r4,180(sp)
   43efc:	0041a9c0 	call	41a9c <__sinit>
   43f00:	003f0206 	br	43b0c <__alt_data_end+0xfffe3b0c>
   43f04:	d9002e17 	ldw	r4,184(sp)
   43f08:	d9402e17 	ldw	r5,184(sp)
   43f0c:	21000017 	ldw	r4,0(r4)
   43f10:	28800104 	addi	r2,r5,4
   43f14:	d9003115 	stw	r4,196(sp)
   43f18:	203fa716 	blt	r4,zero,43db8 <__alt_data_end+0xfffe3db8>
   43f1c:	d8802e15 	stw	r2,184(sp)
   43f20:	ac400007 	ldb	r17,0(r21)
   43f24:	003f4206 	br	43c30 <__alt_data_end+0xfffe3c30>
   43f28:	ac400007 	ldb	r17,0(r21)
   43f2c:	01000a84 	movi	r4,42
   43f30:	a8c00044 	addi	r3,r21,1
   43f34:	89075826 	beq	r17,r4,45c98 <___vfprintf_internal_r+0x21f0>
   43f38:	8cbff404 	addi	r18,r17,-48
   43f3c:	b486ae36 	bltu	r22,r18,459f8 <___vfprintf_internal_r+0x1f50>
   43f40:	0009883a 	mov	r4,zero
   43f44:	1823883a 	mov	r17,r3
   43f48:	01400284 	movi	r5,10
   43f4c:	004131c0 	call	4131c <__mulsi3>
   43f50:	88c00007 	ldb	r3,0(r17)
   43f54:	1489883a 	add	r4,r2,r18
   43f58:	8d400044 	addi	r21,r17,1
   43f5c:	1cbff404 	addi	r18,r3,-48
   43f60:	a823883a 	mov	r17,r21
   43f64:	b4bff82e 	bgeu	r22,r18,43f48 <__alt_data_end+0xfffe3f48>
   43f68:	1823883a 	mov	r17,r3
   43f6c:	2005f616 	blt	r4,zero,45748 <___vfprintf_internal_r+0x1ca0>
   43f70:	d9002a15 	stw	r4,168(sp)
   43f74:	003f2f06 	br	43c34 <__alt_data_end+0xfffe3c34>
   43f78:	84002014 	ori	r16,r16,128
   43f7c:	ac400007 	ldb	r17,0(r21)
   43f80:	003f2b06 	br	43c30 <__alt_data_end+0xfffe3c30>
   43f84:	8cbff404 	addi	r18,r17,-48
   43f88:	d8003115 	stw	zero,196(sp)
   43f8c:	0009883a 	mov	r4,zero
   43f90:	a823883a 	mov	r17,r21
   43f94:	01400284 	movi	r5,10
   43f98:	004131c0 	call	4131c <__mulsi3>
   43f9c:	88c00007 	ldb	r3,0(r17)
   43fa0:	9089883a 	add	r4,r18,r2
   43fa4:	ad400044 	addi	r21,r21,1
   43fa8:	1cbff404 	addi	r18,r3,-48
   43fac:	a823883a 	mov	r17,r21
   43fb0:	b4bff82e 	bgeu	r22,r18,43f94 <__alt_data_end+0xfffe3f94>
   43fb4:	1823883a 	mov	r17,r3
   43fb8:	d9003115 	stw	r4,196(sp)
   43fbc:	003f1d06 	br	43c34 <__alt_data_end+0xfffe3c34>
   43fc0:	8025883a 	mov	r18,r16
   43fc4:	dc002903 	ldbu	r16,164(sp)
   43fc8:	e011883a 	mov	r8,fp
   43fcc:	84003fcc 	andi	r16,r16,255
   43fd0:	8007531e 	bne	r16,zero,45d20 <___vfprintf_internal_r+0x2278>
   43fd4:	94800414 	ori	r18,r18,16
   43fd8:	9080080c 	andi	r2,r18,32
   43fdc:	1003a326 	beq	r2,zero,44e6c <___vfprintf_internal_r+0x13c4>
   43fe0:	d9002e17 	ldw	r4,184(sp)
   43fe4:	20800117 	ldw	r2,4(r4)
   43fe8:	24c00017 	ldw	r19,0(r4)
   43fec:	21000204 	addi	r4,r4,8
   43ff0:	d9002e15 	stw	r4,184(sp)
   43ff4:	102d883a 	mov	r22,r2
   43ff8:	10047316 	blt	r2,zero,451c8 <___vfprintf_internal_r+0x1720>
   43ffc:	d9002a17 	ldw	r4,168(sp)
   44000:	df002783 	ldbu	fp,158(sp)
   44004:	2003e416 	blt	r4,zero,44f98 <___vfprintf_internal_r+0x14f0>
   44008:	00ffdfc4 	movi	r3,-129
   4400c:	9d84b03a 	or	r2,r19,r22
   44010:	90e4703a 	and	r18,r18,r3
   44014:	10018026 	beq	r2,zero,44618 <___vfprintf_internal_r+0xb70>
   44018:	b003ab26 	beq	r22,zero,44ec8 <___vfprintf_internal_r+0x1420>
   4401c:	dc402915 	stw	r17,164(sp)
   44020:	dc001e04 	addi	r16,sp,120
   44024:	b023883a 	mov	r17,r22
   44028:	402d883a 	mov	r22,r8
   4402c:	9809883a 	mov	r4,r19
   44030:	880b883a 	mov	r5,r17
   44034:	01800284 	movi	r6,10
   44038:	000f883a 	mov	r7,zero
   4403c:	004be840 	call	4be84 <__umoddi3>
   44040:	10800c04 	addi	r2,r2,48
   44044:	843fffc4 	addi	r16,r16,-1
   44048:	9809883a 	mov	r4,r19
   4404c:	880b883a 	mov	r5,r17
   44050:	80800005 	stb	r2,0(r16)
   44054:	01800284 	movi	r6,10
   44058:	000f883a 	mov	r7,zero
   4405c:	004b8880 	call	4b888 <__udivdi3>
   44060:	1027883a 	mov	r19,r2
   44064:	10c4b03a 	or	r2,r2,r3
   44068:	1823883a 	mov	r17,r3
   4406c:	103fef1e 	bne	r2,zero,4402c <__alt_data_end+0xfffe402c>
   44070:	d8c02817 	ldw	r3,160(sp)
   44074:	dc402917 	ldw	r17,164(sp)
   44078:	b011883a 	mov	r8,r22
   4407c:	1c07c83a 	sub	r3,r3,r16
   44080:	d8c02b15 	stw	r3,172(sp)
   44084:	00005f06 	br	44204 <___vfprintf_internal_r+0x75c>
   44088:	8025883a 	mov	r18,r16
   4408c:	dc002903 	ldbu	r16,164(sp)
   44090:	e011883a 	mov	r8,fp
   44094:	84003fcc 	andi	r16,r16,255
   44098:	80071e1e 	bne	r16,zero,45d14 <___vfprintf_internal_r+0x226c>
   4409c:	9080020c 	andi	r2,r18,8
   440a0:	1004af26 	beq	r2,zero,45360 <___vfprintf_internal_r+0x18b8>
   440a4:	d9002e17 	ldw	r4,184(sp)
   440a8:	d9402e17 	ldw	r5,184(sp)
   440ac:	d8802e17 	ldw	r2,184(sp)
   440b0:	21000017 	ldw	r4,0(r4)
   440b4:	29400117 	ldw	r5,4(r5)
   440b8:	10800204 	addi	r2,r2,8
   440bc:	d9003615 	stw	r4,216(sp)
   440c0:	d9403815 	stw	r5,224(sp)
   440c4:	d8802e15 	stw	r2,184(sp)
   440c8:	d9003617 	ldw	r4,216(sp)
   440cc:	d9403817 	ldw	r5,224(sp)
   440d0:	da003d15 	stw	r8,244(sp)
   440d4:	04000044 	movi	r16,1
   440d8:	0049b740 	call	49b74 <__fpclassifyd>
   440dc:	da003d17 	ldw	r8,244(sp)
   440e0:	1404441e 	bne	r2,r16,451f4 <___vfprintf_internal_r+0x174c>
   440e4:	d9003617 	ldw	r4,216(sp)
   440e8:	d9403817 	ldw	r5,224(sp)
   440ec:	000d883a 	mov	r6,zero
   440f0:	000f883a 	mov	r7,zero
   440f4:	004ce580 	call	4ce58 <__ledf2>
   440f8:	da003d17 	ldw	r8,244(sp)
   440fc:	1005e316 	blt	r2,zero,4588c <___vfprintf_internal_r+0x1de4>
   44100:	df002783 	ldbu	fp,158(sp)
   44104:	008011c4 	movi	r2,71
   44108:	1445580e 	bge	r2,r17,4566c <___vfprintf_internal_r+0x1bc4>
   4410c:	04000174 	movhi	r16,5
   44110:	8405fd04 	addi	r16,r16,6132
   44114:	00c000c4 	movi	r3,3
   44118:	00bfdfc4 	movi	r2,-129
   4411c:	d8c02915 	stw	r3,164(sp)
   44120:	90a4703a 	and	r18,r18,r2
   44124:	d8c02b15 	stw	r3,172(sp)
   44128:	d8002a15 	stw	zero,168(sp)
   4412c:	d8003215 	stw	zero,200(sp)
   44130:	00003a06 	br	4421c <___vfprintf_internal_r+0x774>
   44134:	84000214 	ori	r16,r16,8
   44138:	ac400007 	ldb	r17,0(r21)
   4413c:	003ebc06 	br	43c30 <__alt_data_end+0xfffe3c30>
   44140:	8025883a 	mov	r18,r16
   44144:	dc002903 	ldbu	r16,164(sp)
   44148:	e011883a 	mov	r8,fp
   4414c:	84003fcc 	andi	r16,r16,255
   44150:	8007001e 	bne	r16,zero,45d54 <___vfprintf_internal_r+0x22ac>
   44154:	94800414 	ori	r18,r18,16
   44158:	9080080c 	andi	r2,r18,32
   4415c:	1002fa26 	beq	r2,zero,44d48 <___vfprintf_internal_r+0x12a0>
   44160:	d9002e17 	ldw	r4,184(sp)
   44164:	d9402a17 	ldw	r5,168(sp)
   44168:	d8002785 	stb	zero,158(sp)
   4416c:	20800204 	addi	r2,r4,8
   44170:	24c00017 	ldw	r19,0(r4)
   44174:	25800117 	ldw	r22,4(r4)
   44178:	2804b116 	blt	r5,zero,45440 <___vfprintf_internal_r+0x1998>
   4417c:	013fdfc4 	movi	r4,-129
   44180:	9d86b03a 	or	r3,r19,r22
   44184:	d8802e15 	stw	r2,184(sp)
   44188:	9124703a 	and	r18,r18,r4
   4418c:	1802fb1e 	bne	r3,zero,44d7c <___vfprintf_internal_r+0x12d4>
   44190:	d8c02a17 	ldw	r3,168(sp)
   44194:	0039883a 	mov	fp,zero
   44198:	1805e526 	beq	r3,zero,45930 <___vfprintf_internal_r+0x1e88>
   4419c:	0027883a 	mov	r19,zero
   441a0:	002d883a 	mov	r22,zero
   441a4:	dc001e04 	addi	r16,sp,120
   441a8:	9806d0fa 	srli	r3,r19,3
   441ac:	b008977a 	slli	r4,r22,29
   441b0:	b02cd0fa 	srli	r22,r22,3
   441b4:	9cc001cc 	andi	r19,r19,7
   441b8:	98800c04 	addi	r2,r19,48
   441bc:	843fffc4 	addi	r16,r16,-1
   441c0:	20e6b03a 	or	r19,r4,r3
   441c4:	80800005 	stb	r2,0(r16)
   441c8:	9d86b03a 	or	r3,r19,r22
   441cc:	183ff61e 	bne	r3,zero,441a8 <__alt_data_end+0xfffe41a8>
   441d0:	90c0004c 	andi	r3,r18,1
   441d4:	18014126 	beq	r3,zero,446dc <___vfprintf_internal_r+0xc34>
   441d8:	10803fcc 	andi	r2,r2,255
   441dc:	1080201c 	xori	r2,r2,128
   441e0:	10bfe004 	addi	r2,r2,-128
   441e4:	00c00c04 	movi	r3,48
   441e8:	10c13c26 	beq	r2,r3,446dc <___vfprintf_internal_r+0xc34>
   441ec:	80ffffc5 	stb	r3,-1(r16)
   441f0:	d8c02817 	ldw	r3,160(sp)
   441f4:	80bfffc4 	addi	r2,r16,-1
   441f8:	1021883a 	mov	r16,r2
   441fc:	1887c83a 	sub	r3,r3,r2
   44200:	d8c02b15 	stw	r3,172(sp)
   44204:	d8802b17 	ldw	r2,172(sp)
   44208:	d9002a17 	ldw	r4,168(sp)
   4420c:	1100010e 	bge	r2,r4,44214 <___vfprintf_internal_r+0x76c>
   44210:	2005883a 	mov	r2,r4
   44214:	d8802915 	stw	r2,164(sp)
   44218:	d8003215 	stw	zero,200(sp)
   4421c:	e7003fcc 	andi	fp,fp,255
   44220:	e700201c 	xori	fp,fp,128
   44224:	e73fe004 	addi	fp,fp,-128
   44228:	e0000326 	beq	fp,zero,44238 <___vfprintf_internal_r+0x790>
   4422c:	d8c02917 	ldw	r3,164(sp)
   44230:	18c00044 	addi	r3,r3,1
   44234:	d8c02915 	stw	r3,164(sp)
   44238:	90c0008c 	andi	r3,r18,2
   4423c:	d8c02c15 	stw	r3,176(sp)
   44240:	18000326 	beq	r3,zero,44250 <___vfprintf_internal_r+0x7a8>
   44244:	d8c02917 	ldw	r3,164(sp)
   44248:	18c00084 	addi	r3,r3,2
   4424c:	d8c02915 	stw	r3,164(sp)
   44250:	90c0210c 	andi	r3,r18,132
   44254:	d8c03015 	stw	r3,192(sp)
   44258:	1801c51e 	bne	r3,zero,44970 <___vfprintf_internal_r+0xec8>
   4425c:	d9003117 	ldw	r4,196(sp)
   44260:	d8c02917 	ldw	r3,164(sp)
   44264:	20e7c83a 	sub	r19,r4,r3
   44268:	04c1c10e 	bge	zero,r19,44970 <___vfprintf_internal_r+0xec8>
   4426c:	02400404 	movi	r9,16
   44270:	d8c02017 	ldw	r3,128(sp)
   44274:	d8801f17 	ldw	r2,124(sp)
   44278:	4cc52f0e 	bge	r9,r19,45738 <___vfprintf_internal_r+0x1c90>
   4427c:	01400174 	movhi	r5,5
   44280:	29461084 	addi	r5,r5,6210
   44284:	dc403b15 	stw	r17,236(sp)
   44288:	d9403515 	stw	r5,212(sp)
   4428c:	9823883a 	mov	r17,r19
   44290:	482d883a 	mov	r22,r9
   44294:	9027883a 	mov	r19,r18
   44298:	070001c4 	movi	fp,7
   4429c:	8025883a 	mov	r18,r16
   442a0:	dc002d17 	ldw	r16,180(sp)
   442a4:	00000306 	br	442b4 <___vfprintf_internal_r+0x80c>
   442a8:	8c7ffc04 	addi	r17,r17,-16
   442ac:	42000204 	addi	r8,r8,8
   442b0:	b440130e 	bge	r22,r17,44300 <___vfprintf_internal_r+0x858>
   442b4:	01000174 	movhi	r4,5
   442b8:	18c00404 	addi	r3,r3,16
   442bc:	10800044 	addi	r2,r2,1
   442c0:	21061084 	addi	r4,r4,6210
   442c4:	41000015 	stw	r4,0(r8)
   442c8:	45800115 	stw	r22,4(r8)
   442cc:	d8c02015 	stw	r3,128(sp)
   442d0:	d8801f15 	stw	r2,124(sp)
   442d4:	e0bff40e 	bge	fp,r2,442a8 <__alt_data_end+0xfffe42a8>
   442d8:	d9801e04 	addi	r6,sp,120
   442dc:	b80b883a 	mov	r5,r23
   442e0:	8009883a 	mov	r4,r16
   442e4:	0049dc00 	call	49dc0 <__sprint_r>
   442e8:	103ef31e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   442ec:	8c7ffc04 	addi	r17,r17,-16
   442f0:	d8c02017 	ldw	r3,128(sp)
   442f4:	d8801f17 	ldw	r2,124(sp)
   442f8:	da000404 	addi	r8,sp,16
   442fc:	b47fed16 	blt	r22,r17,442b4 <__alt_data_end+0xfffe42b4>
   44300:	9021883a 	mov	r16,r18
   44304:	9825883a 	mov	r18,r19
   44308:	8827883a 	mov	r19,r17
   4430c:	dc403b17 	ldw	r17,236(sp)
   44310:	d9403517 	ldw	r5,212(sp)
   44314:	98c7883a 	add	r3,r19,r3
   44318:	10800044 	addi	r2,r2,1
   4431c:	41400015 	stw	r5,0(r8)
   44320:	44c00115 	stw	r19,4(r8)
   44324:	d8c02015 	stw	r3,128(sp)
   44328:	d8801f15 	stw	r2,124(sp)
   4432c:	010001c4 	movi	r4,7
   44330:	2082c516 	blt	r4,r2,44e48 <___vfprintf_internal_r+0x13a0>
   44334:	df002787 	ldb	fp,158(sp)
   44338:	42000204 	addi	r8,r8,8
   4433c:	e0000c26 	beq	fp,zero,44370 <___vfprintf_internal_r+0x8c8>
   44340:	d8801f17 	ldw	r2,124(sp)
   44344:	d9002784 	addi	r4,sp,158
   44348:	18c00044 	addi	r3,r3,1
   4434c:	10800044 	addi	r2,r2,1
   44350:	41000015 	stw	r4,0(r8)
   44354:	01000044 	movi	r4,1
   44358:	41000115 	stw	r4,4(r8)
   4435c:	d8c02015 	stw	r3,128(sp)
   44360:	d8801f15 	stw	r2,124(sp)
   44364:	010001c4 	movi	r4,7
   44368:	20825e16 	blt	r4,r2,44ce4 <___vfprintf_internal_r+0x123c>
   4436c:	42000204 	addi	r8,r8,8
   44370:	d8802c17 	ldw	r2,176(sp)
   44374:	10000c26 	beq	r2,zero,443a8 <___vfprintf_internal_r+0x900>
   44378:	d8801f17 	ldw	r2,124(sp)
   4437c:	d9002704 	addi	r4,sp,156
   44380:	18c00084 	addi	r3,r3,2
   44384:	10800044 	addi	r2,r2,1
   44388:	41000015 	stw	r4,0(r8)
   4438c:	01000084 	movi	r4,2
   44390:	41000115 	stw	r4,4(r8)
   44394:	d8c02015 	stw	r3,128(sp)
   44398:	d8801f15 	stw	r2,124(sp)
   4439c:	010001c4 	movi	r4,7
   443a0:	20825816 	blt	r4,r2,44d04 <___vfprintf_internal_r+0x125c>
   443a4:	42000204 	addi	r8,r8,8
   443a8:	d9003017 	ldw	r4,192(sp)
   443ac:	00802004 	movi	r2,128
   443b0:	2081bb26 	beq	r4,r2,44aa0 <___vfprintf_internal_r+0xff8>
   443b4:	d9402a17 	ldw	r5,168(sp)
   443b8:	d8802b17 	ldw	r2,172(sp)
   443bc:	28adc83a 	sub	r22,r5,r2
   443c0:	0580310e 	bge	zero,r22,44488 <___vfprintf_internal_r+0x9e0>
   443c4:	07000404 	movi	fp,16
   443c8:	d8801f17 	ldw	r2,124(sp)
   443cc:	e584360e 	bge	fp,r22,454a8 <___vfprintf_internal_r+0x1a00>
   443d0:	01400174 	movhi	r5,5
   443d4:	29460c84 	addi	r5,r5,6194
   443d8:	dc402a15 	stw	r17,168(sp)
   443dc:	d9402c15 	stw	r5,176(sp)
   443e0:	b023883a 	mov	r17,r22
   443e4:	04c001c4 	movi	r19,7
   443e8:	a82d883a 	mov	r22,r21
   443ec:	902b883a 	mov	r21,r18
   443f0:	8025883a 	mov	r18,r16
   443f4:	dc002d17 	ldw	r16,180(sp)
   443f8:	00000306 	br	44408 <___vfprintf_internal_r+0x960>
   443fc:	8c7ffc04 	addi	r17,r17,-16
   44400:	42000204 	addi	r8,r8,8
   44404:	e440110e 	bge	fp,r17,4444c <___vfprintf_internal_r+0x9a4>
   44408:	18c00404 	addi	r3,r3,16
   4440c:	10800044 	addi	r2,r2,1
   44410:	45000015 	stw	r20,0(r8)
   44414:	47000115 	stw	fp,4(r8)
   44418:	d8c02015 	stw	r3,128(sp)
   4441c:	d8801f15 	stw	r2,124(sp)
   44420:	98bff60e 	bge	r19,r2,443fc <__alt_data_end+0xfffe43fc>
   44424:	d9801e04 	addi	r6,sp,120
   44428:	b80b883a 	mov	r5,r23
   4442c:	8009883a 	mov	r4,r16
   44430:	0049dc00 	call	49dc0 <__sprint_r>
   44434:	103ea01e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44438:	8c7ffc04 	addi	r17,r17,-16
   4443c:	d8c02017 	ldw	r3,128(sp)
   44440:	d8801f17 	ldw	r2,124(sp)
   44444:	da000404 	addi	r8,sp,16
   44448:	e47fef16 	blt	fp,r17,44408 <__alt_data_end+0xfffe4408>
   4444c:	9021883a 	mov	r16,r18
   44450:	a825883a 	mov	r18,r21
   44454:	b02b883a 	mov	r21,r22
   44458:	882d883a 	mov	r22,r17
   4445c:	dc402a17 	ldw	r17,168(sp)
   44460:	d9002c17 	ldw	r4,176(sp)
   44464:	1d87883a 	add	r3,r3,r22
   44468:	10800044 	addi	r2,r2,1
   4446c:	41000015 	stw	r4,0(r8)
   44470:	45800115 	stw	r22,4(r8)
   44474:	d8c02015 	stw	r3,128(sp)
   44478:	d8801f15 	stw	r2,124(sp)
   4447c:	010001c4 	movi	r4,7
   44480:	20821016 	blt	r4,r2,44cc4 <___vfprintf_internal_r+0x121c>
   44484:	42000204 	addi	r8,r8,8
   44488:	9080400c 	andi	r2,r18,256
   4448c:	10013a1e 	bne	r2,zero,44978 <___vfprintf_internal_r+0xed0>
   44490:	d9402b17 	ldw	r5,172(sp)
   44494:	d8801f17 	ldw	r2,124(sp)
   44498:	44000015 	stw	r16,0(r8)
   4449c:	1947883a 	add	r3,r3,r5
   444a0:	10800044 	addi	r2,r2,1
   444a4:	41400115 	stw	r5,4(r8)
   444a8:	d8c02015 	stw	r3,128(sp)
   444ac:	d8801f15 	stw	r2,124(sp)
   444b0:	010001c4 	movi	r4,7
   444b4:	2081f516 	blt	r4,r2,44c8c <___vfprintf_internal_r+0x11e4>
   444b8:	42000204 	addi	r8,r8,8
   444bc:	9480010c 	andi	r18,r18,4
   444c0:	90003226 	beq	r18,zero,4458c <___vfprintf_internal_r+0xae4>
   444c4:	d9403117 	ldw	r5,196(sp)
   444c8:	d8802917 	ldw	r2,164(sp)
   444cc:	28a1c83a 	sub	r16,r5,r2
   444d0:	04002e0e 	bge	zero,r16,4458c <___vfprintf_internal_r+0xae4>
   444d4:	04400404 	movi	r17,16
   444d8:	d8801f17 	ldw	r2,124(sp)
   444dc:	8c04c40e 	bge	r17,r16,457f0 <___vfprintf_internal_r+0x1d48>
   444e0:	01400174 	movhi	r5,5
   444e4:	29461084 	addi	r5,r5,6210
   444e8:	d9403515 	stw	r5,212(sp)
   444ec:	048001c4 	movi	r18,7
   444f0:	dcc02d17 	ldw	r19,180(sp)
   444f4:	00000306 	br	44504 <___vfprintf_internal_r+0xa5c>
   444f8:	843ffc04 	addi	r16,r16,-16
   444fc:	42000204 	addi	r8,r8,8
   44500:	8c00130e 	bge	r17,r16,44550 <___vfprintf_internal_r+0xaa8>
   44504:	01000174 	movhi	r4,5
   44508:	18c00404 	addi	r3,r3,16
   4450c:	10800044 	addi	r2,r2,1
   44510:	21061084 	addi	r4,r4,6210
   44514:	41000015 	stw	r4,0(r8)
   44518:	44400115 	stw	r17,4(r8)
   4451c:	d8c02015 	stw	r3,128(sp)
   44520:	d8801f15 	stw	r2,124(sp)
   44524:	90bff40e 	bge	r18,r2,444f8 <__alt_data_end+0xfffe44f8>
   44528:	d9801e04 	addi	r6,sp,120
   4452c:	b80b883a 	mov	r5,r23
   44530:	9809883a 	mov	r4,r19
   44534:	0049dc00 	call	49dc0 <__sprint_r>
   44538:	103e5f1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   4453c:	843ffc04 	addi	r16,r16,-16
   44540:	d8c02017 	ldw	r3,128(sp)
   44544:	d8801f17 	ldw	r2,124(sp)
   44548:	da000404 	addi	r8,sp,16
   4454c:	8c3fed16 	blt	r17,r16,44504 <__alt_data_end+0xfffe4504>
   44550:	d9403517 	ldw	r5,212(sp)
   44554:	1c07883a 	add	r3,r3,r16
   44558:	10800044 	addi	r2,r2,1
   4455c:	41400015 	stw	r5,0(r8)
   44560:	44000115 	stw	r16,4(r8)
   44564:	d8c02015 	stw	r3,128(sp)
   44568:	d8801f15 	stw	r2,124(sp)
   4456c:	010001c4 	movi	r4,7
   44570:	2080060e 	bge	r4,r2,4458c <___vfprintf_internal_r+0xae4>
   44574:	d9002d17 	ldw	r4,180(sp)
   44578:	d9801e04 	addi	r6,sp,120
   4457c:	b80b883a 	mov	r5,r23
   44580:	0049dc00 	call	49dc0 <__sprint_r>
   44584:	103e4c1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44588:	d8c02017 	ldw	r3,128(sp)
   4458c:	d8803117 	ldw	r2,196(sp)
   44590:	d9002917 	ldw	r4,164(sp)
   44594:	1100010e 	bge	r2,r4,4459c <___vfprintf_internal_r+0xaf4>
   44598:	2005883a 	mov	r2,r4
   4459c:	d9402f17 	ldw	r5,188(sp)
   445a0:	288b883a 	add	r5,r5,r2
   445a4:	d9402f15 	stw	r5,188(sp)
   445a8:	1801c01e 	bne	r3,zero,44cac <___vfprintf_internal_r+0x1204>
   445ac:	a8800007 	ldb	r2,0(r21)
   445b0:	d8001f15 	stw	zero,124(sp)
   445b4:	da000404 	addi	r8,sp,16
   445b8:	103d751e 	bne	r2,zero,43b90 <__alt_data_end+0xfffe3b90>
   445bc:	a823883a 	mov	r17,r21
   445c0:	003d8b06 	br	43bf0 <__alt_data_end+0xfffe3bf0>
   445c4:	8025883a 	mov	r18,r16
   445c8:	dc002903 	ldbu	r16,164(sp)
   445cc:	e011883a 	mov	r8,fp
   445d0:	84003fcc 	andi	r16,r16,255
   445d4:	8005e51e 	bne	r16,zero,45d6c <___vfprintf_internal_r+0x22c4>
   445d8:	94800414 	ori	r18,r18,16
   445dc:	9080080c 	andi	r2,r18,32
   445e0:	10022b26 	beq	r2,zero,44e90 <___vfprintf_internal_r+0x13e8>
   445e4:	d9002e17 	ldw	r4,184(sp)
   445e8:	d9402a17 	ldw	r5,168(sp)
   445ec:	d8002785 	stb	zero,158(sp)
   445f0:	20c00204 	addi	r3,r4,8
   445f4:	24c00017 	ldw	r19,0(r4)
   445f8:	25800117 	ldw	r22,4(r4)
   445fc:	28042e16 	blt	r5,zero,456b8 <___vfprintf_internal_r+0x1c10>
   44600:	013fdfc4 	movi	r4,-129
   44604:	9d84b03a 	or	r2,r19,r22
   44608:	d8c02e15 	stw	r3,184(sp)
   4460c:	9124703a 	and	r18,r18,r4
   44610:	0039883a 	mov	fp,zero
   44614:	103e801e 	bne	r2,zero,44018 <__alt_data_end+0xfffe4018>
   44618:	d9002a17 	ldw	r4,168(sp)
   4461c:	2002e01e 	bne	r4,zero,451a0 <___vfprintf_internal_r+0x16f8>
   44620:	d8002a15 	stw	zero,168(sp)
   44624:	d8002b15 	stw	zero,172(sp)
   44628:	dc001e04 	addi	r16,sp,120
   4462c:	003ef506 	br	44204 <__alt_data_end+0xfffe4204>
   44630:	8025883a 	mov	r18,r16
   44634:	dc002903 	ldbu	r16,164(sp)
   44638:	e011883a 	mov	r8,fp
   4463c:	84003fcc 	andi	r16,r16,255
   44640:	8005ba1e 	bne	r16,zero,45d2c <___vfprintf_internal_r+0x2284>
   44644:	01000174 	movhi	r4,5
   44648:	21060004 	addi	r4,r4,6144
   4464c:	d9003915 	stw	r4,228(sp)
   44650:	9080080c 	andi	r2,r18,32
   44654:	10006126 	beq	r2,zero,447dc <___vfprintf_internal_r+0xd34>
   44658:	d9402e17 	ldw	r5,184(sp)
   4465c:	2cc00017 	ldw	r19,0(r5)
   44660:	2d800117 	ldw	r22,4(r5)
   44664:	29400204 	addi	r5,r5,8
   44668:	d9402e15 	stw	r5,184(sp)
   4466c:	9080004c 	andi	r2,r18,1
   44670:	1001ac26 	beq	r2,zero,44d24 <___vfprintf_internal_r+0x127c>
   44674:	9d84b03a 	or	r2,r19,r22
   44678:	10038526 	beq	r2,zero,45490 <___vfprintf_internal_r+0x19e8>
   4467c:	d8c02a17 	ldw	r3,168(sp)
   44680:	00800c04 	movi	r2,48
   44684:	d8802705 	stb	r2,156(sp)
   44688:	dc402745 	stb	r17,157(sp)
   4468c:	d8002785 	stb	zero,158(sp)
   44690:	90800094 	ori	r2,r18,2
   44694:	18047916 	blt	r3,zero,4587c <___vfprintf_internal_r+0x1dd4>
   44698:	00bfdfc4 	movi	r2,-129
   4469c:	90a4703a 	and	r18,r18,r2
   446a0:	94800094 	ori	r18,r18,2
   446a4:	0039883a 	mov	fp,zero
   446a8:	d9003917 	ldw	r4,228(sp)
   446ac:	dc001e04 	addi	r16,sp,120
   446b0:	988003cc 	andi	r2,r19,15
   446b4:	b006973a 	slli	r3,r22,28
   446b8:	2085883a 	add	r2,r4,r2
   446bc:	9826d13a 	srli	r19,r19,4
   446c0:	10800003 	ldbu	r2,0(r2)
   446c4:	b02cd13a 	srli	r22,r22,4
   446c8:	843fffc4 	addi	r16,r16,-1
   446cc:	1ce6b03a 	or	r19,r3,r19
   446d0:	80800005 	stb	r2,0(r16)
   446d4:	9d84b03a 	or	r2,r19,r22
   446d8:	103ff51e 	bne	r2,zero,446b0 <__alt_data_end+0xfffe46b0>
   446dc:	d8c02817 	ldw	r3,160(sp)
   446e0:	1c07c83a 	sub	r3,r3,r16
   446e4:	d8c02b15 	stw	r3,172(sp)
   446e8:	003ec606 	br	44204 <__alt_data_end+0xfffe4204>
   446ec:	8025883a 	mov	r18,r16
   446f0:	dc002903 	ldbu	r16,164(sp)
   446f4:	e011883a 	mov	r8,fp
   446f8:	84003fcc 	andi	r16,r16,255
   446fc:	803e9626 	beq	r16,zero,44158 <__alt_data_end+0xfffe4158>
   44700:	d8c02b03 	ldbu	r3,172(sp)
   44704:	d8c02785 	stb	r3,158(sp)
   44708:	003e9306 	br	44158 <__alt_data_end+0xfffe4158>
   4470c:	00c00044 	movi	r3,1
   44710:	d8c02905 	stb	r3,164(sp)
   44714:	00c00ac4 	movi	r3,43
   44718:	d8c02b05 	stb	r3,172(sp)
   4471c:	ac400007 	ldb	r17,0(r21)
   44720:	003d4306 	br	43c30 <__alt_data_end+0xfffe3c30>
   44724:	84000814 	ori	r16,r16,32
   44728:	ac400007 	ldb	r17,0(r21)
   4472c:	003d4006 	br	43c30 <__alt_data_end+0xfffe3c30>
   44730:	d8802e17 	ldw	r2,184(sp)
   44734:	8025883a 	mov	r18,r16
   44738:	d8002785 	stb	zero,158(sp)
   4473c:	14000017 	ldw	r16,0(r2)
   44740:	e011883a 	mov	r8,fp
   44744:	14c00104 	addi	r19,r2,4
   44748:	80042d26 	beq	r16,zero,45800 <___vfprintf_internal_r+0x1d58>
   4474c:	d8c02a17 	ldw	r3,168(sp)
   44750:	1803e416 	blt	r3,zero,456e4 <___vfprintf_internal_r+0x1c3c>
   44754:	180d883a 	mov	r6,r3
   44758:	000b883a 	mov	r5,zero
   4475c:	8009883a 	mov	r4,r16
   44760:	df003d15 	stw	fp,244(sp)
   44764:	00481700 	call	48170 <memchr>
   44768:	da003d17 	ldw	r8,244(sp)
   4476c:	10046826 	beq	r2,zero,45910 <___vfprintf_internal_r+0x1e68>
   44770:	1405c83a 	sub	r2,r2,r16
   44774:	d8802b15 	stw	r2,172(sp)
   44778:	1003e016 	blt	r2,zero,456fc <___vfprintf_internal_r+0x1c54>
   4477c:	df002783 	ldbu	fp,158(sp)
   44780:	d8802915 	stw	r2,164(sp)
   44784:	dcc02e15 	stw	r19,184(sp)
   44788:	d8002a15 	stw	zero,168(sp)
   4478c:	d8003215 	stw	zero,200(sp)
   44790:	003ea206 	br	4421c <__alt_data_end+0xfffe421c>
   44794:	8025883a 	mov	r18,r16
   44798:	dc002903 	ldbu	r16,164(sp)
   4479c:	e011883a 	mov	r8,fp
   447a0:	84003fcc 	andi	r16,r16,255
   447a4:	803f8d26 	beq	r16,zero,445dc <__alt_data_end+0xfffe45dc>
   447a8:	d8c02b03 	ldbu	r3,172(sp)
   447ac:	d8c02785 	stb	r3,158(sp)
   447b0:	003f8a06 	br	445dc <__alt_data_end+0xfffe45dc>
   447b4:	8025883a 	mov	r18,r16
   447b8:	dc002903 	ldbu	r16,164(sp)
   447bc:	e011883a 	mov	r8,fp
   447c0:	84003fcc 	andi	r16,r16,255
   447c4:	8005661e 	bne	r16,zero,45d60 <___vfprintf_internal_r+0x22b8>
   447c8:	01000174 	movhi	r4,5
   447cc:	21060504 	addi	r4,r4,6164
   447d0:	d9003915 	stw	r4,228(sp)
   447d4:	9080080c 	andi	r2,r18,32
   447d8:	103f9f1e 	bne	r2,zero,44658 <__alt_data_end+0xfffe4658>
   447dc:	9080040c 	andi	r2,r18,16
   447e0:	1002eb26 	beq	r2,zero,45390 <___vfprintf_internal_r+0x18e8>
   447e4:	d8802e17 	ldw	r2,184(sp)
   447e8:	002d883a 	mov	r22,zero
   447ec:	14c00017 	ldw	r19,0(r2)
   447f0:	10800104 	addi	r2,r2,4
   447f4:	d8802e15 	stw	r2,184(sp)
   447f8:	003f9c06 	br	4466c <__alt_data_end+0xfffe466c>
   447fc:	d8802b07 	ldb	r2,172(sp)
   44800:	1002e11e 	bne	r2,zero,45388 <___vfprintf_internal_r+0x18e0>
   44804:	00c00044 	movi	r3,1
   44808:	d8c02905 	stb	r3,164(sp)
   4480c:	00c00804 	movi	r3,32
   44810:	d8c02b05 	stb	r3,172(sp)
   44814:	ac400007 	ldb	r17,0(r21)
   44818:	003d0506 	br	43c30 <__alt_data_end+0xfffe3c30>
   4481c:	84000054 	ori	r16,r16,1
   44820:	ac400007 	ldb	r17,0(r21)
   44824:	003d0206 	br	43c30 <__alt_data_end+0xfffe3c30>
   44828:	8025883a 	mov	r18,r16
   4482c:	dc002903 	ldbu	r16,164(sp)
   44830:	e011883a 	mov	r8,fp
   44834:	84003fcc 	andi	r16,r16,255
   44838:	803de726 	beq	r16,zero,43fd8 <__alt_data_end+0xfffe3fd8>
   4483c:	d8c02b03 	ldbu	r3,172(sp)
   44840:	d8c02785 	stb	r3,158(sp)
   44844:	003de406 	br	43fd8 <__alt_data_end+0xfffe3fd8>
   44848:	84001014 	ori	r16,r16,64
   4484c:	ac400007 	ldb	r17,0(r21)
   44850:	003cf706 	br	43c30 <__alt_data_end+0xfffe3c30>
   44854:	ac400007 	ldb	r17,0(r21)
   44858:	00801b04 	movi	r2,108
   4485c:	88838f26 	beq	r17,r2,4569c <___vfprintf_internal_r+0x1bf4>
   44860:	84000414 	ori	r16,r16,16
   44864:	003cf206 	br	43c30 <__alt_data_end+0xfffe3c30>
   44868:	8025883a 	mov	r18,r16
   4486c:	dc002903 	ldbu	r16,164(sp)
   44870:	e011883a 	mov	r8,fp
   44874:	84003fcc 	andi	r16,r16,255
   44878:	80053f1e 	bne	r16,zero,45d78 <___vfprintf_internal_r+0x22d0>
   4487c:	9080080c 	andi	r2,r18,32
   44880:	1002d226 	beq	r2,zero,453cc <___vfprintf_internal_r+0x1924>
   44884:	d9002e17 	ldw	r4,184(sp)
   44888:	d9402f17 	ldw	r5,188(sp)
   4488c:	20800017 	ldw	r2,0(r4)
   44890:	2807d7fa 	srai	r3,r5,31
   44894:	21000104 	addi	r4,r4,4
   44898:	d9002e15 	stw	r4,184(sp)
   4489c:	11400015 	stw	r5,0(r2)
   448a0:	10c00115 	stw	r3,4(r2)
   448a4:	003cb806 	br	43b88 <__alt_data_end+0xfffe3b88>
   448a8:	d8c02e17 	ldw	r3,184(sp)
   448ac:	d9002e17 	ldw	r4,184(sp)
   448b0:	8025883a 	mov	r18,r16
   448b4:	18800017 	ldw	r2,0(r3)
   448b8:	21000104 	addi	r4,r4,4
   448bc:	00c00044 	movi	r3,1
   448c0:	e011883a 	mov	r8,fp
   448c4:	d8c02915 	stw	r3,164(sp)
   448c8:	d8002785 	stb	zero,158(sp)
   448cc:	d8801405 	stb	r2,80(sp)
   448d0:	d9002e15 	stw	r4,184(sp)
   448d4:	d8c02b15 	stw	r3,172(sp)
   448d8:	d8002a15 	stw	zero,168(sp)
   448dc:	d8003215 	stw	zero,200(sp)
   448e0:	dc001404 	addi	r16,sp,80
   448e4:	0039883a 	mov	fp,zero
   448e8:	003e5306 	br	44238 <__alt_data_end+0xfffe4238>
   448ec:	01000174 	movhi	r4,5
   448f0:	21060504 	addi	r4,r4,6164
   448f4:	0039883a 	mov	fp,zero
   448f8:	d9003915 	stw	r4,228(sp)
   448fc:	04401e04 	movi	r17,120
   44900:	003f6906 	br	446a8 <__alt_data_end+0xfffe46a8>
   44904:	8025883a 	mov	r18,r16
   44908:	dc002903 	ldbu	r16,164(sp)
   4490c:	e011883a 	mov	r8,fp
   44910:	84003fcc 	andi	r16,r16,255
   44914:	8005081e 	bne	r16,zero,45d38 <___vfprintf_internal_r+0x2290>
   44918:	883d6126 	beq	r17,zero,43ea0 <__alt_data_end+0xfffe3ea0>
   4491c:	00c00044 	movi	r3,1
   44920:	d8c02915 	stw	r3,164(sp)
   44924:	dc401405 	stb	r17,80(sp)
   44928:	d8002785 	stb	zero,158(sp)
   4492c:	003fe906 	br	448d4 <__alt_data_end+0xfffe48d4>
   44930:	01400174 	movhi	r5,5
   44934:	29460504 	addi	r5,r5,6164
   44938:	d9403915 	stw	r5,228(sp)
   4493c:	d8c02e15 	stw	r3,184(sp)
   44940:	1025883a 	mov	r18,r2
   44944:	04401e04 	movi	r17,120
   44948:	9d84b03a 	or	r2,r19,r22
   4494c:	1000fc1e 	bne	r2,zero,44d40 <___vfprintf_internal_r+0x1298>
   44950:	0039883a 	mov	fp,zero
   44954:	00800084 	movi	r2,2
   44958:	10803fcc 	andi	r2,r2,255
   4495c:	00c00044 	movi	r3,1
   44960:	10c20f26 	beq	r2,r3,451a0 <___vfprintf_internal_r+0x16f8>
   44964:	00c00084 	movi	r3,2
   44968:	10fd3326 	beq	r2,r3,43e38 <__alt_data_end+0xfffe3e38>
   4496c:	003e0b06 	br	4419c <__alt_data_end+0xfffe419c>
   44970:	d8c02017 	ldw	r3,128(sp)
   44974:	003e7106 	br	4433c <__alt_data_end+0xfffe433c>
   44978:	00801944 	movi	r2,101
   4497c:	14407e0e 	bge	r2,r17,44b78 <___vfprintf_internal_r+0x10d0>
   44980:	d9003617 	ldw	r4,216(sp)
   44984:	d9403817 	ldw	r5,224(sp)
   44988:	000d883a 	mov	r6,zero
   4498c:	000f883a 	mov	r7,zero
   44990:	d8c03c15 	stw	r3,240(sp)
   44994:	da003d15 	stw	r8,244(sp)
   44998:	004ccf40 	call	4ccf4 <__eqdf2>
   4499c:	d8c03c17 	ldw	r3,240(sp)
   449a0:	da003d17 	ldw	r8,244(sp)
   449a4:	1000f71e 	bne	r2,zero,44d84 <___vfprintf_internal_r+0x12dc>
   449a8:	d8801f17 	ldw	r2,124(sp)
   449ac:	01000174 	movhi	r4,5
   449b0:	21060c04 	addi	r4,r4,6192
   449b4:	18c00044 	addi	r3,r3,1
   449b8:	10800044 	addi	r2,r2,1
   449bc:	41000015 	stw	r4,0(r8)
   449c0:	01000044 	movi	r4,1
   449c4:	41000115 	stw	r4,4(r8)
   449c8:	d8c02015 	stw	r3,128(sp)
   449cc:	d8801f15 	stw	r2,124(sp)
   449d0:	010001c4 	movi	r4,7
   449d4:	2082b816 	blt	r4,r2,454b8 <___vfprintf_internal_r+0x1a10>
   449d8:	42000204 	addi	r8,r8,8
   449dc:	d8802617 	ldw	r2,152(sp)
   449e0:	d9403317 	ldw	r5,204(sp)
   449e4:	11400216 	blt	r2,r5,449f0 <___vfprintf_internal_r+0xf48>
   449e8:	9080004c 	andi	r2,r18,1
   449ec:	103eb326 	beq	r2,zero,444bc <__alt_data_end+0xfffe44bc>
   449f0:	d8803717 	ldw	r2,220(sp)
   449f4:	d9003417 	ldw	r4,208(sp)
   449f8:	d9403717 	ldw	r5,220(sp)
   449fc:	1887883a 	add	r3,r3,r2
   44a00:	d8801f17 	ldw	r2,124(sp)
   44a04:	41000015 	stw	r4,0(r8)
   44a08:	41400115 	stw	r5,4(r8)
   44a0c:	10800044 	addi	r2,r2,1
   44a10:	d8c02015 	stw	r3,128(sp)
   44a14:	d8801f15 	stw	r2,124(sp)
   44a18:	010001c4 	movi	r4,7
   44a1c:	20832916 	blt	r4,r2,456c4 <___vfprintf_internal_r+0x1c1c>
   44a20:	42000204 	addi	r8,r8,8
   44a24:	d8803317 	ldw	r2,204(sp)
   44a28:	143fffc4 	addi	r16,r2,-1
   44a2c:	043ea30e 	bge	zero,r16,444bc <__alt_data_end+0xfffe44bc>
   44a30:	04400404 	movi	r17,16
   44a34:	d8801f17 	ldw	r2,124(sp)
   44a38:	8c00880e 	bge	r17,r16,44c5c <___vfprintf_internal_r+0x11b4>
   44a3c:	01400174 	movhi	r5,5
   44a40:	29460c84 	addi	r5,r5,6194
   44a44:	d9402c15 	stw	r5,176(sp)
   44a48:	058001c4 	movi	r22,7
   44a4c:	dcc02d17 	ldw	r19,180(sp)
   44a50:	00000306 	br	44a60 <___vfprintf_internal_r+0xfb8>
   44a54:	42000204 	addi	r8,r8,8
   44a58:	843ffc04 	addi	r16,r16,-16
   44a5c:	8c00820e 	bge	r17,r16,44c68 <___vfprintf_internal_r+0x11c0>
   44a60:	18c00404 	addi	r3,r3,16
   44a64:	10800044 	addi	r2,r2,1
   44a68:	45000015 	stw	r20,0(r8)
   44a6c:	44400115 	stw	r17,4(r8)
   44a70:	d8c02015 	stw	r3,128(sp)
   44a74:	d8801f15 	stw	r2,124(sp)
   44a78:	b0bff60e 	bge	r22,r2,44a54 <__alt_data_end+0xfffe4a54>
   44a7c:	d9801e04 	addi	r6,sp,120
   44a80:	b80b883a 	mov	r5,r23
   44a84:	9809883a 	mov	r4,r19
   44a88:	0049dc00 	call	49dc0 <__sprint_r>
   44a8c:	103d0a1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44a90:	d8c02017 	ldw	r3,128(sp)
   44a94:	d8801f17 	ldw	r2,124(sp)
   44a98:	da000404 	addi	r8,sp,16
   44a9c:	003fee06 	br	44a58 <__alt_data_end+0xfffe4a58>
   44aa0:	d9403117 	ldw	r5,196(sp)
   44aa4:	d8802917 	ldw	r2,164(sp)
   44aa8:	28adc83a 	sub	r22,r5,r2
   44aac:	05be410e 	bge	zero,r22,443b4 <__alt_data_end+0xfffe43b4>
   44ab0:	07000404 	movi	fp,16
   44ab4:	d8801f17 	ldw	r2,124(sp)
   44ab8:	e5838f0e 	bge	fp,r22,458f8 <___vfprintf_internal_r+0x1e50>
   44abc:	01400174 	movhi	r5,5
   44ac0:	29460c84 	addi	r5,r5,6194
   44ac4:	dc403015 	stw	r17,192(sp)
   44ac8:	d9402c15 	stw	r5,176(sp)
   44acc:	b023883a 	mov	r17,r22
   44ad0:	04c001c4 	movi	r19,7
   44ad4:	a82d883a 	mov	r22,r21
   44ad8:	902b883a 	mov	r21,r18
   44adc:	8025883a 	mov	r18,r16
   44ae0:	dc002d17 	ldw	r16,180(sp)
   44ae4:	00000306 	br	44af4 <___vfprintf_internal_r+0x104c>
   44ae8:	8c7ffc04 	addi	r17,r17,-16
   44aec:	42000204 	addi	r8,r8,8
   44af0:	e440110e 	bge	fp,r17,44b38 <___vfprintf_internal_r+0x1090>
   44af4:	18c00404 	addi	r3,r3,16
   44af8:	10800044 	addi	r2,r2,1
   44afc:	45000015 	stw	r20,0(r8)
   44b00:	47000115 	stw	fp,4(r8)
   44b04:	d8c02015 	stw	r3,128(sp)
   44b08:	d8801f15 	stw	r2,124(sp)
   44b0c:	98bff60e 	bge	r19,r2,44ae8 <__alt_data_end+0xfffe4ae8>
   44b10:	d9801e04 	addi	r6,sp,120
   44b14:	b80b883a 	mov	r5,r23
   44b18:	8009883a 	mov	r4,r16
   44b1c:	0049dc00 	call	49dc0 <__sprint_r>
   44b20:	103ce51e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44b24:	8c7ffc04 	addi	r17,r17,-16
   44b28:	d8c02017 	ldw	r3,128(sp)
   44b2c:	d8801f17 	ldw	r2,124(sp)
   44b30:	da000404 	addi	r8,sp,16
   44b34:	e47fef16 	blt	fp,r17,44af4 <__alt_data_end+0xfffe4af4>
   44b38:	9021883a 	mov	r16,r18
   44b3c:	a825883a 	mov	r18,r21
   44b40:	b02b883a 	mov	r21,r22
   44b44:	882d883a 	mov	r22,r17
   44b48:	dc403017 	ldw	r17,192(sp)
   44b4c:	d9002c17 	ldw	r4,176(sp)
   44b50:	1d87883a 	add	r3,r3,r22
   44b54:	10800044 	addi	r2,r2,1
   44b58:	41000015 	stw	r4,0(r8)
   44b5c:	45800115 	stw	r22,4(r8)
   44b60:	d8c02015 	stw	r3,128(sp)
   44b64:	d8801f15 	stw	r2,124(sp)
   44b68:	010001c4 	movi	r4,7
   44b6c:	20818e16 	blt	r4,r2,451a8 <___vfprintf_internal_r+0x1700>
   44b70:	42000204 	addi	r8,r8,8
   44b74:	003e0f06 	br	443b4 <__alt_data_end+0xfffe43b4>
   44b78:	d9403317 	ldw	r5,204(sp)
   44b7c:	00800044 	movi	r2,1
   44b80:	18c00044 	addi	r3,r3,1
   44b84:	1141530e 	bge	r2,r5,450d4 <___vfprintf_internal_r+0x162c>
   44b88:	dc401f17 	ldw	r17,124(sp)
   44b8c:	00800044 	movi	r2,1
   44b90:	40800115 	stw	r2,4(r8)
   44b94:	8c400044 	addi	r17,r17,1
   44b98:	44000015 	stw	r16,0(r8)
   44b9c:	d8c02015 	stw	r3,128(sp)
   44ba0:	dc401f15 	stw	r17,124(sp)
   44ba4:	008001c4 	movi	r2,7
   44ba8:	14416b16 	blt	r2,r17,45158 <___vfprintf_internal_r+0x16b0>
   44bac:	42000204 	addi	r8,r8,8
   44bb0:	d8803717 	ldw	r2,220(sp)
   44bb4:	d9003417 	ldw	r4,208(sp)
   44bb8:	8c400044 	addi	r17,r17,1
   44bbc:	10c7883a 	add	r3,r2,r3
   44bc0:	40800115 	stw	r2,4(r8)
   44bc4:	41000015 	stw	r4,0(r8)
   44bc8:	d8c02015 	stw	r3,128(sp)
   44bcc:	dc401f15 	stw	r17,124(sp)
   44bd0:	008001c4 	movi	r2,7
   44bd4:	14416916 	blt	r2,r17,4517c <___vfprintf_internal_r+0x16d4>
   44bd8:	45800204 	addi	r22,r8,8
   44bdc:	d9003617 	ldw	r4,216(sp)
   44be0:	d9403817 	ldw	r5,224(sp)
   44be4:	000d883a 	mov	r6,zero
   44be8:	000f883a 	mov	r7,zero
   44bec:	d8c03c15 	stw	r3,240(sp)
   44bf0:	004ccf40 	call	4ccf4 <__eqdf2>
   44bf4:	d8c03c17 	ldw	r3,240(sp)
   44bf8:	1000bc26 	beq	r2,zero,44eec <___vfprintf_internal_r+0x1444>
   44bfc:	d9403317 	ldw	r5,204(sp)
   44c00:	84000044 	addi	r16,r16,1
   44c04:	8c400044 	addi	r17,r17,1
   44c08:	28bfffc4 	addi	r2,r5,-1
   44c0c:	1887883a 	add	r3,r3,r2
   44c10:	b0800115 	stw	r2,4(r22)
   44c14:	b4000015 	stw	r16,0(r22)
   44c18:	d8c02015 	stw	r3,128(sp)
   44c1c:	dc401f15 	stw	r17,124(sp)
   44c20:	008001c4 	movi	r2,7
   44c24:	14414316 	blt	r2,r17,45134 <___vfprintf_internal_r+0x168c>
   44c28:	b5800204 	addi	r22,r22,8
   44c2c:	d9003a17 	ldw	r4,232(sp)
   44c30:	df0022c4 	addi	fp,sp,139
   44c34:	8c400044 	addi	r17,r17,1
   44c38:	20c7883a 	add	r3,r4,r3
   44c3c:	b7000015 	stw	fp,0(r22)
   44c40:	b1000115 	stw	r4,4(r22)
   44c44:	d8c02015 	stw	r3,128(sp)
   44c48:	dc401f15 	stw	r17,124(sp)
   44c4c:	008001c4 	movi	r2,7
   44c50:	14400e16 	blt	r2,r17,44c8c <___vfprintf_internal_r+0x11e4>
   44c54:	b2000204 	addi	r8,r22,8
   44c58:	003e1806 	br	444bc <__alt_data_end+0xfffe44bc>
   44c5c:	01000174 	movhi	r4,5
   44c60:	21060c84 	addi	r4,r4,6194
   44c64:	d9002c15 	stw	r4,176(sp)
   44c68:	d9002c17 	ldw	r4,176(sp)
   44c6c:	1c07883a 	add	r3,r3,r16
   44c70:	44000115 	stw	r16,4(r8)
   44c74:	41000015 	stw	r4,0(r8)
   44c78:	10800044 	addi	r2,r2,1
   44c7c:	d8c02015 	stw	r3,128(sp)
   44c80:	d8801f15 	stw	r2,124(sp)
   44c84:	010001c4 	movi	r4,7
   44c88:	20be0b0e 	bge	r4,r2,444b8 <__alt_data_end+0xfffe44b8>
   44c8c:	d9002d17 	ldw	r4,180(sp)
   44c90:	d9801e04 	addi	r6,sp,120
   44c94:	b80b883a 	mov	r5,r23
   44c98:	0049dc00 	call	49dc0 <__sprint_r>
   44c9c:	103c861e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44ca0:	d8c02017 	ldw	r3,128(sp)
   44ca4:	da000404 	addi	r8,sp,16
   44ca8:	003e0406 	br	444bc <__alt_data_end+0xfffe44bc>
   44cac:	d9002d17 	ldw	r4,180(sp)
   44cb0:	d9801e04 	addi	r6,sp,120
   44cb4:	b80b883a 	mov	r5,r23
   44cb8:	0049dc00 	call	49dc0 <__sprint_r>
   44cbc:	103e3b26 	beq	r2,zero,445ac <__alt_data_end+0xfffe45ac>
   44cc0:	003c7d06 	br	43eb8 <__alt_data_end+0xfffe3eb8>
   44cc4:	d9002d17 	ldw	r4,180(sp)
   44cc8:	d9801e04 	addi	r6,sp,120
   44ccc:	b80b883a 	mov	r5,r23
   44cd0:	0049dc00 	call	49dc0 <__sprint_r>
   44cd4:	103c781e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44cd8:	d8c02017 	ldw	r3,128(sp)
   44cdc:	da000404 	addi	r8,sp,16
   44ce0:	003de906 	br	44488 <__alt_data_end+0xfffe4488>
   44ce4:	d9002d17 	ldw	r4,180(sp)
   44ce8:	d9801e04 	addi	r6,sp,120
   44cec:	b80b883a 	mov	r5,r23
   44cf0:	0049dc00 	call	49dc0 <__sprint_r>
   44cf4:	103c701e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44cf8:	d8c02017 	ldw	r3,128(sp)
   44cfc:	da000404 	addi	r8,sp,16
   44d00:	003d9b06 	br	44370 <__alt_data_end+0xfffe4370>
   44d04:	d9002d17 	ldw	r4,180(sp)
   44d08:	d9801e04 	addi	r6,sp,120
   44d0c:	b80b883a 	mov	r5,r23
   44d10:	0049dc00 	call	49dc0 <__sprint_r>
   44d14:	103c681e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44d18:	d8c02017 	ldw	r3,128(sp)
   44d1c:	da000404 	addi	r8,sp,16
   44d20:	003da106 	br	443a8 <__alt_data_end+0xfffe43a8>
   44d24:	d9402a17 	ldw	r5,168(sp)
   44d28:	d8002785 	stb	zero,158(sp)
   44d2c:	283f0616 	blt	r5,zero,44948 <__alt_data_end+0xfffe4948>
   44d30:	00ffdfc4 	movi	r3,-129
   44d34:	9d84b03a 	or	r2,r19,r22
   44d38:	90e4703a 	and	r18,r18,r3
   44d3c:	103c3b26 	beq	r2,zero,43e2c <__alt_data_end+0xfffe3e2c>
   44d40:	0039883a 	mov	fp,zero
   44d44:	003e5806 	br	446a8 <__alt_data_end+0xfffe46a8>
   44d48:	9080040c 	andi	r2,r18,16
   44d4c:	1001b326 	beq	r2,zero,4541c <___vfprintf_internal_r+0x1974>
   44d50:	d8c02e17 	ldw	r3,184(sp)
   44d54:	d9002a17 	ldw	r4,168(sp)
   44d58:	d8002785 	stb	zero,158(sp)
   44d5c:	18800104 	addi	r2,r3,4
   44d60:	1cc00017 	ldw	r19,0(r3)
   44d64:	002d883a 	mov	r22,zero
   44d68:	2001b516 	blt	r4,zero,45440 <___vfprintf_internal_r+0x1998>
   44d6c:	00ffdfc4 	movi	r3,-129
   44d70:	d8802e15 	stw	r2,184(sp)
   44d74:	90e4703a 	and	r18,r18,r3
   44d78:	983d0526 	beq	r19,zero,44190 <__alt_data_end+0xfffe4190>
   44d7c:	0039883a 	mov	fp,zero
   44d80:	003d0806 	br	441a4 <__alt_data_end+0xfffe41a4>
   44d84:	dc402617 	ldw	r17,152(sp)
   44d88:	0441d30e 	bge	zero,r17,454d8 <___vfprintf_internal_r+0x1a30>
   44d8c:	dc403217 	ldw	r17,200(sp)
   44d90:	d8803317 	ldw	r2,204(sp)
   44d94:	1440010e 	bge	r2,r17,44d9c <___vfprintf_internal_r+0x12f4>
   44d98:	1023883a 	mov	r17,r2
   44d9c:	04400a0e 	bge	zero,r17,44dc8 <___vfprintf_internal_r+0x1320>
   44da0:	d8801f17 	ldw	r2,124(sp)
   44da4:	1c47883a 	add	r3,r3,r17
   44da8:	44000015 	stw	r16,0(r8)
   44dac:	10800044 	addi	r2,r2,1
   44db0:	44400115 	stw	r17,4(r8)
   44db4:	d8c02015 	stw	r3,128(sp)
   44db8:	d8801f15 	stw	r2,124(sp)
   44dbc:	010001c4 	movi	r4,7
   44dc0:	20826516 	blt	r4,r2,45758 <___vfprintf_internal_r+0x1cb0>
   44dc4:	42000204 	addi	r8,r8,8
   44dc8:	88026116 	blt	r17,zero,45750 <___vfprintf_internal_r+0x1ca8>
   44dcc:	d9003217 	ldw	r4,200(sp)
   44dd0:	2463c83a 	sub	r17,r4,r17
   44dd4:	04407b0e 	bge	zero,r17,44fc4 <___vfprintf_internal_r+0x151c>
   44dd8:	05800404 	movi	r22,16
   44ddc:	d8801f17 	ldw	r2,124(sp)
   44de0:	b4419d0e 	bge	r22,r17,45458 <___vfprintf_internal_r+0x19b0>
   44de4:	01000174 	movhi	r4,5
   44de8:	21060c84 	addi	r4,r4,6194
   44dec:	d9002c15 	stw	r4,176(sp)
   44df0:	070001c4 	movi	fp,7
   44df4:	dcc02d17 	ldw	r19,180(sp)
   44df8:	00000306 	br	44e08 <___vfprintf_internal_r+0x1360>
   44dfc:	42000204 	addi	r8,r8,8
   44e00:	8c7ffc04 	addi	r17,r17,-16
   44e04:	b441970e 	bge	r22,r17,45464 <___vfprintf_internal_r+0x19bc>
   44e08:	18c00404 	addi	r3,r3,16
   44e0c:	10800044 	addi	r2,r2,1
   44e10:	45000015 	stw	r20,0(r8)
   44e14:	45800115 	stw	r22,4(r8)
   44e18:	d8c02015 	stw	r3,128(sp)
   44e1c:	d8801f15 	stw	r2,124(sp)
   44e20:	e0bff60e 	bge	fp,r2,44dfc <__alt_data_end+0xfffe4dfc>
   44e24:	d9801e04 	addi	r6,sp,120
   44e28:	b80b883a 	mov	r5,r23
   44e2c:	9809883a 	mov	r4,r19
   44e30:	0049dc00 	call	49dc0 <__sprint_r>
   44e34:	103c201e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44e38:	d8c02017 	ldw	r3,128(sp)
   44e3c:	d8801f17 	ldw	r2,124(sp)
   44e40:	da000404 	addi	r8,sp,16
   44e44:	003fee06 	br	44e00 <__alt_data_end+0xfffe4e00>
   44e48:	d9002d17 	ldw	r4,180(sp)
   44e4c:	d9801e04 	addi	r6,sp,120
   44e50:	b80b883a 	mov	r5,r23
   44e54:	0049dc00 	call	49dc0 <__sprint_r>
   44e58:	103c171e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44e5c:	d8c02017 	ldw	r3,128(sp)
   44e60:	df002787 	ldb	fp,158(sp)
   44e64:	da000404 	addi	r8,sp,16
   44e68:	003d3406 	br	4433c <__alt_data_end+0xfffe433c>
   44e6c:	9080040c 	andi	r2,r18,16
   44e70:	10016126 	beq	r2,zero,453f8 <___vfprintf_internal_r+0x1950>
   44e74:	d9402e17 	ldw	r5,184(sp)
   44e78:	2cc00017 	ldw	r19,0(r5)
   44e7c:	29400104 	addi	r5,r5,4
   44e80:	d9402e15 	stw	r5,184(sp)
   44e84:	982dd7fa 	srai	r22,r19,31
   44e88:	b005883a 	mov	r2,r22
   44e8c:	003c5a06 	br	43ff8 <__alt_data_end+0xfffe3ff8>
   44e90:	9080040c 	andi	r2,r18,16
   44e94:	10003526 	beq	r2,zero,44f6c <___vfprintf_internal_r+0x14c4>
   44e98:	d8c02e17 	ldw	r3,184(sp)
   44e9c:	d9002a17 	ldw	r4,168(sp)
   44ea0:	d8002785 	stb	zero,158(sp)
   44ea4:	18800104 	addi	r2,r3,4
   44ea8:	1cc00017 	ldw	r19,0(r3)
   44eac:	002d883a 	mov	r22,zero
   44eb0:	20003716 	blt	r4,zero,44f90 <___vfprintf_internal_r+0x14e8>
   44eb4:	00ffdfc4 	movi	r3,-129
   44eb8:	d8802e15 	stw	r2,184(sp)
   44ebc:	90e4703a 	and	r18,r18,r3
   44ec0:	0039883a 	mov	fp,zero
   44ec4:	983dd426 	beq	r19,zero,44618 <__alt_data_end+0xfffe4618>
   44ec8:	00800244 	movi	r2,9
   44ecc:	14fc5336 	bltu	r2,r19,4401c <__alt_data_end+0xfffe401c>
   44ed0:	d8c02817 	ldw	r3,160(sp)
   44ed4:	dc001dc4 	addi	r16,sp,119
   44ed8:	9cc00c04 	addi	r19,r19,48
   44edc:	1c07c83a 	sub	r3,r3,r16
   44ee0:	dcc01dc5 	stb	r19,119(sp)
   44ee4:	d8c02b15 	stw	r3,172(sp)
   44ee8:	003cc606 	br	44204 <__alt_data_end+0xfffe4204>
   44eec:	d8803317 	ldw	r2,204(sp)
   44ef0:	143fffc4 	addi	r16,r2,-1
   44ef4:	043f4d0e 	bge	zero,r16,44c2c <__alt_data_end+0xfffe4c2c>
   44ef8:	07000404 	movi	fp,16
   44efc:	e400810e 	bge	fp,r16,45104 <___vfprintf_internal_r+0x165c>
   44f00:	01400174 	movhi	r5,5
   44f04:	29460c84 	addi	r5,r5,6194
   44f08:	d9402c15 	stw	r5,176(sp)
   44f0c:	01c001c4 	movi	r7,7
   44f10:	dcc02d17 	ldw	r19,180(sp)
   44f14:	00000306 	br	44f24 <___vfprintf_internal_r+0x147c>
   44f18:	b5800204 	addi	r22,r22,8
   44f1c:	843ffc04 	addi	r16,r16,-16
   44f20:	e4007b0e 	bge	fp,r16,45110 <___vfprintf_internal_r+0x1668>
   44f24:	18c00404 	addi	r3,r3,16
   44f28:	8c400044 	addi	r17,r17,1
   44f2c:	b5000015 	stw	r20,0(r22)
   44f30:	b7000115 	stw	fp,4(r22)
   44f34:	d8c02015 	stw	r3,128(sp)
   44f38:	dc401f15 	stw	r17,124(sp)
   44f3c:	3c7ff60e 	bge	r7,r17,44f18 <__alt_data_end+0xfffe4f18>
   44f40:	d9801e04 	addi	r6,sp,120
   44f44:	b80b883a 	mov	r5,r23
   44f48:	9809883a 	mov	r4,r19
   44f4c:	d9c03c15 	stw	r7,240(sp)
   44f50:	0049dc00 	call	49dc0 <__sprint_r>
   44f54:	d9c03c17 	ldw	r7,240(sp)
   44f58:	103bd71e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44f5c:	d8c02017 	ldw	r3,128(sp)
   44f60:	dc401f17 	ldw	r17,124(sp)
   44f64:	dd800404 	addi	r22,sp,16
   44f68:	003fec06 	br	44f1c <__alt_data_end+0xfffe4f1c>
   44f6c:	9080100c 	andi	r2,r18,64
   44f70:	d8002785 	stb	zero,158(sp)
   44f74:	10010e26 	beq	r2,zero,453b0 <___vfprintf_internal_r+0x1908>
   44f78:	d9402e17 	ldw	r5,184(sp)
   44f7c:	d8c02a17 	ldw	r3,168(sp)
   44f80:	002d883a 	mov	r22,zero
   44f84:	28800104 	addi	r2,r5,4
   44f88:	2cc0000b 	ldhu	r19,0(r5)
   44f8c:	183fc90e 	bge	r3,zero,44eb4 <__alt_data_end+0xfffe4eb4>
   44f90:	d8802e15 	stw	r2,184(sp)
   44f94:	0039883a 	mov	fp,zero
   44f98:	9d84b03a 	or	r2,r19,r22
   44f9c:	103c1e1e 	bne	r2,zero,44018 <__alt_data_end+0xfffe4018>
   44fa0:	00800044 	movi	r2,1
   44fa4:	003e6c06 	br	44958 <__alt_data_end+0xfffe4958>
   44fa8:	d9002d17 	ldw	r4,180(sp)
   44fac:	d9801e04 	addi	r6,sp,120
   44fb0:	b80b883a 	mov	r5,r23
   44fb4:	0049dc00 	call	49dc0 <__sprint_r>
   44fb8:	103bbf1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   44fbc:	d8c02017 	ldw	r3,128(sp)
   44fc0:	da000404 	addi	r8,sp,16
   44fc4:	d9003217 	ldw	r4,200(sp)
   44fc8:	d8802617 	ldw	r2,152(sp)
   44fcc:	d9403317 	ldw	r5,204(sp)
   44fd0:	8123883a 	add	r17,r16,r4
   44fd4:	11400216 	blt	r2,r5,44fe0 <___vfprintf_internal_r+0x1538>
   44fd8:	9100004c 	andi	r4,r18,1
   44fdc:	20000d26 	beq	r4,zero,45014 <___vfprintf_internal_r+0x156c>
   44fe0:	d9003717 	ldw	r4,220(sp)
   44fe4:	d9403417 	ldw	r5,208(sp)
   44fe8:	1907883a 	add	r3,r3,r4
   44fec:	d9001f17 	ldw	r4,124(sp)
   44ff0:	41400015 	stw	r5,0(r8)
   44ff4:	d9403717 	ldw	r5,220(sp)
   44ff8:	21000044 	addi	r4,r4,1
   44ffc:	d8c02015 	stw	r3,128(sp)
   45000:	41400115 	stw	r5,4(r8)
   45004:	d9001f15 	stw	r4,124(sp)
   45008:	014001c4 	movi	r5,7
   4500c:	2901e816 	blt	r5,r4,457b0 <___vfprintf_internal_r+0x1d08>
   45010:	42000204 	addi	r8,r8,8
   45014:	d9003317 	ldw	r4,204(sp)
   45018:	8121883a 	add	r16,r16,r4
   4501c:	2085c83a 	sub	r2,r4,r2
   45020:	8461c83a 	sub	r16,r16,r17
   45024:	1400010e 	bge	r2,r16,4502c <___vfprintf_internal_r+0x1584>
   45028:	1021883a 	mov	r16,r2
   4502c:	04000a0e 	bge	zero,r16,45058 <___vfprintf_internal_r+0x15b0>
   45030:	d9001f17 	ldw	r4,124(sp)
   45034:	1c07883a 	add	r3,r3,r16
   45038:	44400015 	stw	r17,0(r8)
   4503c:	21000044 	addi	r4,r4,1
   45040:	44000115 	stw	r16,4(r8)
   45044:	d8c02015 	stw	r3,128(sp)
   45048:	d9001f15 	stw	r4,124(sp)
   4504c:	014001c4 	movi	r5,7
   45050:	2901fb16 	blt	r5,r4,45840 <___vfprintf_internal_r+0x1d98>
   45054:	42000204 	addi	r8,r8,8
   45058:	8001f716 	blt	r16,zero,45838 <___vfprintf_internal_r+0x1d90>
   4505c:	1421c83a 	sub	r16,r2,r16
   45060:	043d160e 	bge	zero,r16,444bc <__alt_data_end+0xfffe44bc>
   45064:	04400404 	movi	r17,16
   45068:	d8801f17 	ldw	r2,124(sp)
   4506c:	8c3efb0e 	bge	r17,r16,44c5c <__alt_data_end+0xfffe4c5c>
   45070:	01400174 	movhi	r5,5
   45074:	29460c84 	addi	r5,r5,6194
   45078:	d9402c15 	stw	r5,176(sp)
   4507c:	058001c4 	movi	r22,7
   45080:	dcc02d17 	ldw	r19,180(sp)
   45084:	00000306 	br	45094 <___vfprintf_internal_r+0x15ec>
   45088:	42000204 	addi	r8,r8,8
   4508c:	843ffc04 	addi	r16,r16,-16
   45090:	8c3ef50e 	bge	r17,r16,44c68 <__alt_data_end+0xfffe4c68>
   45094:	18c00404 	addi	r3,r3,16
   45098:	10800044 	addi	r2,r2,1
   4509c:	45000015 	stw	r20,0(r8)
   450a0:	44400115 	stw	r17,4(r8)
   450a4:	d8c02015 	stw	r3,128(sp)
   450a8:	d8801f15 	stw	r2,124(sp)
   450ac:	b0bff60e 	bge	r22,r2,45088 <__alt_data_end+0xfffe5088>
   450b0:	d9801e04 	addi	r6,sp,120
   450b4:	b80b883a 	mov	r5,r23
   450b8:	9809883a 	mov	r4,r19
   450bc:	0049dc00 	call	49dc0 <__sprint_r>
   450c0:	103b7d1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   450c4:	d8c02017 	ldw	r3,128(sp)
   450c8:	d8801f17 	ldw	r2,124(sp)
   450cc:	da000404 	addi	r8,sp,16
   450d0:	003fee06 	br	4508c <__alt_data_end+0xfffe508c>
   450d4:	9088703a 	and	r4,r18,r2
   450d8:	203eab1e 	bne	r4,zero,44b88 <__alt_data_end+0xfffe4b88>
   450dc:	dc401f17 	ldw	r17,124(sp)
   450e0:	40800115 	stw	r2,4(r8)
   450e4:	44000015 	stw	r16,0(r8)
   450e8:	8c400044 	addi	r17,r17,1
   450ec:	d8c02015 	stw	r3,128(sp)
   450f0:	dc401f15 	stw	r17,124(sp)
   450f4:	008001c4 	movi	r2,7
   450f8:	14400e16 	blt	r2,r17,45134 <___vfprintf_internal_r+0x168c>
   450fc:	45800204 	addi	r22,r8,8
   45100:	003eca06 	br	44c2c <__alt_data_end+0xfffe4c2c>
   45104:	01000174 	movhi	r4,5
   45108:	21060c84 	addi	r4,r4,6194
   4510c:	d9002c15 	stw	r4,176(sp)
   45110:	d8802c17 	ldw	r2,176(sp)
   45114:	1c07883a 	add	r3,r3,r16
   45118:	8c400044 	addi	r17,r17,1
   4511c:	b0800015 	stw	r2,0(r22)
   45120:	b4000115 	stw	r16,4(r22)
   45124:	d8c02015 	stw	r3,128(sp)
   45128:	dc401f15 	stw	r17,124(sp)
   4512c:	008001c4 	movi	r2,7
   45130:	147ebd0e 	bge	r2,r17,44c28 <__alt_data_end+0xfffe4c28>
   45134:	d9002d17 	ldw	r4,180(sp)
   45138:	d9801e04 	addi	r6,sp,120
   4513c:	b80b883a 	mov	r5,r23
   45140:	0049dc00 	call	49dc0 <__sprint_r>
   45144:	103b5c1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   45148:	d8c02017 	ldw	r3,128(sp)
   4514c:	dc401f17 	ldw	r17,124(sp)
   45150:	dd800404 	addi	r22,sp,16
   45154:	003eb506 	br	44c2c <__alt_data_end+0xfffe4c2c>
   45158:	d9002d17 	ldw	r4,180(sp)
   4515c:	d9801e04 	addi	r6,sp,120
   45160:	b80b883a 	mov	r5,r23
   45164:	0049dc00 	call	49dc0 <__sprint_r>
   45168:	103b531e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   4516c:	d8c02017 	ldw	r3,128(sp)
   45170:	dc401f17 	ldw	r17,124(sp)
   45174:	da000404 	addi	r8,sp,16
   45178:	003e8d06 	br	44bb0 <__alt_data_end+0xfffe4bb0>
   4517c:	d9002d17 	ldw	r4,180(sp)
   45180:	d9801e04 	addi	r6,sp,120
   45184:	b80b883a 	mov	r5,r23
   45188:	0049dc00 	call	49dc0 <__sprint_r>
   4518c:	103b4a1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   45190:	d8c02017 	ldw	r3,128(sp)
   45194:	dc401f17 	ldw	r17,124(sp)
   45198:	dd800404 	addi	r22,sp,16
   4519c:	003e8f06 	br	44bdc <__alt_data_end+0xfffe4bdc>
   451a0:	0027883a 	mov	r19,zero
   451a4:	003f4a06 	br	44ed0 <__alt_data_end+0xfffe4ed0>
   451a8:	d9002d17 	ldw	r4,180(sp)
   451ac:	d9801e04 	addi	r6,sp,120
   451b0:	b80b883a 	mov	r5,r23
   451b4:	0049dc00 	call	49dc0 <__sprint_r>
   451b8:	103b3f1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   451bc:	d8c02017 	ldw	r3,128(sp)
   451c0:	da000404 	addi	r8,sp,16
   451c4:	003c7b06 	br	443b4 <__alt_data_end+0xfffe43b4>
   451c8:	d9402a17 	ldw	r5,168(sp)
   451cc:	04e7c83a 	sub	r19,zero,r19
   451d0:	07000b44 	movi	fp,45
   451d4:	9804c03a 	cmpne	r2,r19,zero
   451d8:	05adc83a 	sub	r22,zero,r22
   451dc:	df002785 	stb	fp,158(sp)
   451e0:	b0adc83a 	sub	r22,r22,r2
   451e4:	28017b16 	blt	r5,zero,457d4 <___vfprintf_internal_r+0x1d2c>
   451e8:	00bfdfc4 	movi	r2,-129
   451ec:	90a4703a 	and	r18,r18,r2
   451f0:	003b8906 	br	44018 <__alt_data_end+0xfffe4018>
   451f4:	d9003617 	ldw	r4,216(sp)
   451f8:	d9403817 	ldw	r5,224(sp)
   451fc:	da003d15 	stw	r8,244(sp)
   45200:	0049b740 	call	49b74 <__fpclassifyd>
   45204:	da003d17 	ldw	r8,244(sp)
   45208:	1000f026 	beq	r2,zero,455cc <___vfprintf_internal_r+0x1b24>
   4520c:	d9002a17 	ldw	r4,168(sp)
   45210:	05bff7c4 	movi	r22,-33
   45214:	00bfffc4 	movi	r2,-1
   45218:	8dac703a 	and	r22,r17,r22
   4521c:	20820026 	beq	r4,r2,45a20 <___vfprintf_internal_r+0x1f78>
   45220:	008011c4 	movi	r2,71
   45224:	b081f726 	beq	r22,r2,45a04 <___vfprintf_internal_r+0x1f5c>
   45228:	d9003817 	ldw	r4,224(sp)
   4522c:	90c04014 	ori	r3,r18,256
   45230:	d8c02c15 	stw	r3,176(sp)
   45234:	20021516 	blt	r4,zero,45a8c <___vfprintf_internal_r+0x1fe4>
   45238:	dcc03817 	ldw	r19,224(sp)
   4523c:	d8002905 	stb	zero,164(sp)
   45240:	00801984 	movi	r2,102
   45244:	8881f926 	beq	r17,r2,45a2c <___vfprintf_internal_r+0x1f84>
   45248:	00801184 	movi	r2,70
   4524c:	88821c26 	beq	r17,r2,45ac0 <___vfprintf_internal_r+0x2018>
   45250:	00801144 	movi	r2,69
   45254:	b081ef26 	beq	r22,r2,45a14 <___vfprintf_internal_r+0x1f6c>
   45258:	d8c02a17 	ldw	r3,168(sp)
   4525c:	d8802104 	addi	r2,sp,132
   45260:	d8800315 	stw	r2,12(sp)
   45264:	d9403617 	ldw	r5,216(sp)
   45268:	d8802504 	addi	r2,sp,148
   4526c:	d9002d17 	ldw	r4,180(sp)
   45270:	d8800215 	stw	r2,8(sp)
   45274:	d8802604 	addi	r2,sp,152
   45278:	d8c00015 	stw	r3,0(sp)
   4527c:	d8800115 	stw	r2,4(sp)
   45280:	01c00084 	movi	r7,2
   45284:	980d883a 	mov	r6,r19
   45288:	d8c03c15 	stw	r3,240(sp)
   4528c:	da003d15 	stw	r8,244(sp)
   45290:	00463e40 	call	463e4 <_dtoa_r>
   45294:	1021883a 	mov	r16,r2
   45298:	008019c4 	movi	r2,103
   4529c:	d8c03c17 	ldw	r3,240(sp)
   452a0:	da003d17 	ldw	r8,244(sp)
   452a4:	88817126 	beq	r17,r2,4586c <___vfprintf_internal_r+0x1dc4>
   452a8:	008011c4 	movi	r2,71
   452ac:	88829126 	beq	r17,r2,45cf4 <___vfprintf_internal_r+0x224c>
   452b0:	80f9883a 	add	fp,r16,r3
   452b4:	d9003617 	ldw	r4,216(sp)
   452b8:	000d883a 	mov	r6,zero
   452bc:	000f883a 	mov	r7,zero
   452c0:	980b883a 	mov	r5,r19
   452c4:	da003d15 	stw	r8,244(sp)
   452c8:	004ccf40 	call	4ccf4 <__eqdf2>
   452cc:	da003d17 	ldw	r8,244(sp)
   452d0:	10018d26 	beq	r2,zero,45908 <___vfprintf_internal_r+0x1e60>
   452d4:	d8802117 	ldw	r2,132(sp)
   452d8:	1700062e 	bgeu	r2,fp,452f4 <___vfprintf_internal_r+0x184c>
   452dc:	01000c04 	movi	r4,48
   452e0:	10c00044 	addi	r3,r2,1
   452e4:	d8c02115 	stw	r3,132(sp)
   452e8:	11000005 	stb	r4,0(r2)
   452ec:	d8802117 	ldw	r2,132(sp)
   452f0:	173ffb36 	bltu	r2,fp,452e0 <__alt_data_end+0xfffe52e0>
   452f4:	1405c83a 	sub	r2,r2,r16
   452f8:	d8803315 	stw	r2,204(sp)
   452fc:	008011c4 	movi	r2,71
   45300:	b0817626 	beq	r22,r2,458dc <___vfprintf_internal_r+0x1e34>
   45304:	00801944 	movi	r2,101
   45308:	1442800e 	bge	r2,r17,45d0c <___vfprintf_internal_r+0x2264>
   4530c:	d8c02617 	ldw	r3,152(sp)
   45310:	00801984 	movi	r2,102
   45314:	d8c03215 	stw	r3,200(sp)
   45318:	8881fe26 	beq	r17,r2,45b14 <___vfprintf_internal_r+0x206c>
   4531c:	d8c03217 	ldw	r3,200(sp)
   45320:	d9003317 	ldw	r4,204(sp)
   45324:	1901dd16 	blt	r3,r4,45a9c <___vfprintf_internal_r+0x1ff4>
   45328:	9480004c 	andi	r18,r18,1
   4532c:	90022b1e 	bne	r18,zero,45bdc <___vfprintf_internal_r+0x2134>
   45330:	1805883a 	mov	r2,r3
   45334:	18028316 	blt	r3,zero,45d44 <___vfprintf_internal_r+0x229c>
   45338:	d8c03217 	ldw	r3,200(sp)
   4533c:	044019c4 	movi	r17,103
   45340:	d8c02b15 	stw	r3,172(sp)
   45344:	df002907 	ldb	fp,164(sp)
   45348:	e001531e 	bne	fp,zero,45898 <___vfprintf_internal_r+0x1df0>
   4534c:	df002783 	ldbu	fp,158(sp)
   45350:	d8802915 	stw	r2,164(sp)
   45354:	dc802c17 	ldw	r18,176(sp)
   45358:	d8002a15 	stw	zero,168(sp)
   4535c:	003baf06 	br	4421c <__alt_data_end+0xfffe421c>
   45360:	d8c02e17 	ldw	r3,184(sp)
   45364:	d9002e17 	ldw	r4,184(sp)
   45368:	d9402e17 	ldw	r5,184(sp)
   4536c:	18c00017 	ldw	r3,0(r3)
   45370:	21000117 	ldw	r4,4(r4)
   45374:	29400204 	addi	r5,r5,8
   45378:	d8c03615 	stw	r3,216(sp)
   4537c:	d9003815 	stw	r4,224(sp)
   45380:	d9402e15 	stw	r5,184(sp)
   45384:	003b5006 	br	440c8 <__alt_data_end+0xfffe40c8>
   45388:	ac400007 	ldb	r17,0(r21)
   4538c:	003a2806 	br	43c30 <__alt_data_end+0xfffe3c30>
   45390:	9080100c 	andi	r2,r18,64
   45394:	1000a826 	beq	r2,zero,45638 <___vfprintf_internal_r+0x1b90>
   45398:	d8c02e17 	ldw	r3,184(sp)
   4539c:	002d883a 	mov	r22,zero
   453a0:	1cc0000b 	ldhu	r19,0(r3)
   453a4:	18c00104 	addi	r3,r3,4
   453a8:	d8c02e15 	stw	r3,184(sp)
   453ac:	003caf06 	br	4466c <__alt_data_end+0xfffe466c>
   453b0:	d9002e17 	ldw	r4,184(sp)
   453b4:	d9402a17 	ldw	r5,168(sp)
   453b8:	002d883a 	mov	r22,zero
   453bc:	20800104 	addi	r2,r4,4
   453c0:	24c00017 	ldw	r19,0(r4)
   453c4:	283ebb0e 	bge	r5,zero,44eb4 <__alt_data_end+0xfffe4eb4>
   453c8:	003ef106 	br	44f90 <__alt_data_end+0xfffe4f90>
   453cc:	9080040c 	andi	r2,r18,16
   453d0:	1000921e 	bne	r2,zero,4561c <___vfprintf_internal_r+0x1b74>
   453d4:	9480100c 	andi	r18,r18,64
   453d8:	90013926 	beq	r18,zero,458c0 <___vfprintf_internal_r+0x1e18>
   453dc:	d9402e17 	ldw	r5,184(sp)
   453e0:	d8c02f17 	ldw	r3,188(sp)
   453e4:	28800017 	ldw	r2,0(r5)
   453e8:	29400104 	addi	r5,r5,4
   453ec:	d9402e15 	stw	r5,184(sp)
   453f0:	10c0000d 	sth	r3,0(r2)
   453f4:	0039e406 	br	43b88 <__alt_data_end+0xfffe3b88>
   453f8:	9080100c 	andi	r2,r18,64
   453fc:	10008026 	beq	r2,zero,45600 <___vfprintf_internal_r+0x1b58>
   45400:	d8802e17 	ldw	r2,184(sp)
   45404:	14c0000f 	ldh	r19,0(r2)
   45408:	10800104 	addi	r2,r2,4
   4540c:	d8802e15 	stw	r2,184(sp)
   45410:	982dd7fa 	srai	r22,r19,31
   45414:	b005883a 	mov	r2,r22
   45418:	003af706 	br	43ff8 <__alt_data_end+0xfffe3ff8>
   4541c:	9080100c 	andi	r2,r18,64
   45420:	d8002785 	stb	zero,158(sp)
   45424:	10008a1e 	bne	r2,zero,45650 <___vfprintf_internal_r+0x1ba8>
   45428:	d9002e17 	ldw	r4,184(sp)
   4542c:	d9402a17 	ldw	r5,168(sp)
   45430:	002d883a 	mov	r22,zero
   45434:	20800104 	addi	r2,r4,4
   45438:	24c00017 	ldw	r19,0(r4)
   4543c:	283e4b0e 	bge	r5,zero,44d6c <__alt_data_end+0xfffe4d6c>
   45440:	9d86b03a 	or	r3,r19,r22
   45444:	d8802e15 	stw	r2,184(sp)
   45448:	183e4c1e 	bne	r3,zero,44d7c <__alt_data_end+0xfffe4d7c>
   4544c:	0039883a 	mov	fp,zero
   45450:	0005883a 	mov	r2,zero
   45454:	003d4006 	br	44958 <__alt_data_end+0xfffe4958>
   45458:	01400174 	movhi	r5,5
   4545c:	29460c84 	addi	r5,r5,6194
   45460:	d9402c15 	stw	r5,176(sp)
   45464:	d9402c17 	ldw	r5,176(sp)
   45468:	1c47883a 	add	r3,r3,r17
   4546c:	10800044 	addi	r2,r2,1
   45470:	41400015 	stw	r5,0(r8)
   45474:	44400115 	stw	r17,4(r8)
   45478:	d8c02015 	stw	r3,128(sp)
   4547c:	d8801f15 	stw	r2,124(sp)
   45480:	010001c4 	movi	r4,7
   45484:	20bec816 	blt	r4,r2,44fa8 <__alt_data_end+0xfffe4fa8>
   45488:	42000204 	addi	r8,r8,8
   4548c:	003ecd06 	br	44fc4 <__alt_data_end+0xfffe4fc4>
   45490:	d9002a17 	ldw	r4,168(sp)
   45494:	d8002785 	stb	zero,158(sp)
   45498:	203d2d16 	blt	r4,zero,44950 <__alt_data_end+0xfffe4950>
   4549c:	00bfdfc4 	movi	r2,-129
   454a0:	90a4703a 	and	r18,r18,r2
   454a4:	003a6106 	br	43e2c <__alt_data_end+0xfffe3e2c>
   454a8:	01000174 	movhi	r4,5
   454ac:	21060c84 	addi	r4,r4,6194
   454b0:	d9002c15 	stw	r4,176(sp)
   454b4:	003bea06 	br	44460 <__alt_data_end+0xfffe4460>
   454b8:	d9002d17 	ldw	r4,180(sp)
   454bc:	d9801e04 	addi	r6,sp,120
   454c0:	b80b883a 	mov	r5,r23
   454c4:	0049dc00 	call	49dc0 <__sprint_r>
   454c8:	103a7b1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   454cc:	d8c02017 	ldw	r3,128(sp)
   454d0:	da000404 	addi	r8,sp,16
   454d4:	003d4106 	br	449dc <__alt_data_end+0xfffe49dc>
   454d8:	d8801f17 	ldw	r2,124(sp)
   454dc:	01400174 	movhi	r5,5
   454e0:	01000044 	movi	r4,1
   454e4:	18c00044 	addi	r3,r3,1
   454e8:	10800044 	addi	r2,r2,1
   454ec:	29460c04 	addi	r5,r5,6192
   454f0:	41000115 	stw	r4,4(r8)
   454f4:	41400015 	stw	r5,0(r8)
   454f8:	d8c02015 	stw	r3,128(sp)
   454fc:	d8801f15 	stw	r2,124(sp)
   45500:	010001c4 	movi	r4,7
   45504:	20805c16 	blt	r4,r2,45678 <___vfprintf_internal_r+0x1bd0>
   45508:	42000204 	addi	r8,r8,8
   4550c:	8800041e 	bne	r17,zero,45520 <___vfprintf_internal_r+0x1a78>
   45510:	d8803317 	ldw	r2,204(sp)
   45514:	1000021e 	bne	r2,zero,45520 <___vfprintf_internal_r+0x1a78>
   45518:	9080004c 	andi	r2,r18,1
   4551c:	103be726 	beq	r2,zero,444bc <__alt_data_end+0xfffe44bc>
   45520:	d9003717 	ldw	r4,220(sp)
   45524:	d8801f17 	ldw	r2,124(sp)
   45528:	d9403417 	ldw	r5,208(sp)
   4552c:	20c7883a 	add	r3,r4,r3
   45530:	10800044 	addi	r2,r2,1
   45534:	41000115 	stw	r4,4(r8)
   45538:	41400015 	stw	r5,0(r8)
   4553c:	d8c02015 	stw	r3,128(sp)
   45540:	d8801f15 	stw	r2,124(sp)
   45544:	010001c4 	movi	r4,7
   45548:	20812116 	blt	r4,r2,459d0 <___vfprintf_internal_r+0x1f28>
   4554c:	42000204 	addi	r8,r8,8
   45550:	0463c83a 	sub	r17,zero,r17
   45554:	0440730e 	bge	zero,r17,45724 <___vfprintf_internal_r+0x1c7c>
   45558:	05800404 	movi	r22,16
   4555c:	b440860e 	bge	r22,r17,45778 <___vfprintf_internal_r+0x1cd0>
   45560:	01400174 	movhi	r5,5
   45564:	29460c84 	addi	r5,r5,6194
   45568:	d9402c15 	stw	r5,176(sp)
   4556c:	070001c4 	movi	fp,7
   45570:	dcc02d17 	ldw	r19,180(sp)
   45574:	00000306 	br	45584 <___vfprintf_internal_r+0x1adc>
   45578:	42000204 	addi	r8,r8,8
   4557c:	8c7ffc04 	addi	r17,r17,-16
   45580:	b440800e 	bge	r22,r17,45784 <___vfprintf_internal_r+0x1cdc>
   45584:	18c00404 	addi	r3,r3,16
   45588:	10800044 	addi	r2,r2,1
   4558c:	45000015 	stw	r20,0(r8)
   45590:	45800115 	stw	r22,4(r8)
   45594:	d8c02015 	stw	r3,128(sp)
   45598:	d8801f15 	stw	r2,124(sp)
   4559c:	e0bff60e 	bge	fp,r2,45578 <__alt_data_end+0xfffe5578>
   455a0:	d9801e04 	addi	r6,sp,120
   455a4:	b80b883a 	mov	r5,r23
   455a8:	9809883a 	mov	r4,r19
   455ac:	0049dc00 	call	49dc0 <__sprint_r>
   455b0:	103a411e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   455b4:	d8c02017 	ldw	r3,128(sp)
   455b8:	d8801f17 	ldw	r2,124(sp)
   455bc:	da000404 	addi	r8,sp,16
   455c0:	003fee06 	br	4557c <__alt_data_end+0xfffe557c>
   455c4:	00bfffc4 	movi	r2,-1
   455c8:	003a3f06 	br	43ec8 <__alt_data_end+0xfffe3ec8>
   455cc:	008011c4 	movi	r2,71
   455d0:	1440b816 	blt	r2,r17,458b4 <___vfprintf_internal_r+0x1e0c>
   455d4:	04000174 	movhi	r16,5
   455d8:	8405fe04 	addi	r16,r16,6136
   455dc:	00c000c4 	movi	r3,3
   455e0:	00bfdfc4 	movi	r2,-129
   455e4:	d8c02915 	stw	r3,164(sp)
   455e8:	90a4703a 	and	r18,r18,r2
   455ec:	df002783 	ldbu	fp,158(sp)
   455f0:	d8c02b15 	stw	r3,172(sp)
   455f4:	d8002a15 	stw	zero,168(sp)
   455f8:	d8003215 	stw	zero,200(sp)
   455fc:	003b0706 	br	4421c <__alt_data_end+0xfffe421c>
   45600:	d8c02e17 	ldw	r3,184(sp)
   45604:	1cc00017 	ldw	r19,0(r3)
   45608:	18c00104 	addi	r3,r3,4
   4560c:	d8c02e15 	stw	r3,184(sp)
   45610:	982dd7fa 	srai	r22,r19,31
   45614:	b005883a 	mov	r2,r22
   45618:	003a7706 	br	43ff8 <__alt_data_end+0xfffe3ff8>
   4561c:	d8c02e17 	ldw	r3,184(sp)
   45620:	d9002f17 	ldw	r4,188(sp)
   45624:	18800017 	ldw	r2,0(r3)
   45628:	18c00104 	addi	r3,r3,4
   4562c:	d8c02e15 	stw	r3,184(sp)
   45630:	11000015 	stw	r4,0(r2)
   45634:	00395406 	br	43b88 <__alt_data_end+0xfffe3b88>
   45638:	d9002e17 	ldw	r4,184(sp)
   4563c:	002d883a 	mov	r22,zero
   45640:	24c00017 	ldw	r19,0(r4)
   45644:	21000104 	addi	r4,r4,4
   45648:	d9002e15 	stw	r4,184(sp)
   4564c:	003c0706 	br	4466c <__alt_data_end+0xfffe466c>
   45650:	d9402e17 	ldw	r5,184(sp)
   45654:	d8c02a17 	ldw	r3,168(sp)
   45658:	002d883a 	mov	r22,zero
   4565c:	28800104 	addi	r2,r5,4
   45660:	2cc0000b 	ldhu	r19,0(r5)
   45664:	183dc10e 	bge	r3,zero,44d6c <__alt_data_end+0xfffe4d6c>
   45668:	003f7506 	br	45440 <__alt_data_end+0xfffe5440>
   4566c:	04000174 	movhi	r16,5
   45670:	8405fc04 	addi	r16,r16,6128
   45674:	003aa706 	br	44114 <__alt_data_end+0xfffe4114>
   45678:	d9002d17 	ldw	r4,180(sp)
   4567c:	d9801e04 	addi	r6,sp,120
   45680:	b80b883a 	mov	r5,r23
   45684:	0049dc00 	call	49dc0 <__sprint_r>
   45688:	103a0b1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   4568c:	dc402617 	ldw	r17,152(sp)
   45690:	d8c02017 	ldw	r3,128(sp)
   45694:	da000404 	addi	r8,sp,16
   45698:	003f9c06 	br	4550c <__alt_data_end+0xfffe550c>
   4569c:	ac400043 	ldbu	r17,1(r21)
   456a0:	84000814 	ori	r16,r16,32
   456a4:	ad400044 	addi	r21,r21,1
   456a8:	8c403fcc 	andi	r17,r17,255
   456ac:	8c40201c 	xori	r17,r17,128
   456b0:	8c7fe004 	addi	r17,r17,-128
   456b4:	00395e06 	br	43c30 <__alt_data_end+0xfffe3c30>
   456b8:	d8c02e15 	stw	r3,184(sp)
   456bc:	0039883a 	mov	fp,zero
   456c0:	003e3506 	br	44f98 <__alt_data_end+0xfffe4f98>
   456c4:	d9002d17 	ldw	r4,180(sp)
   456c8:	d9801e04 	addi	r6,sp,120
   456cc:	b80b883a 	mov	r5,r23
   456d0:	0049dc00 	call	49dc0 <__sprint_r>
   456d4:	1039f81e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   456d8:	d8c02017 	ldw	r3,128(sp)
   456dc:	da000404 	addi	r8,sp,16
   456e0:	003cd006 	br	44a24 <__alt_data_end+0xfffe4a24>
   456e4:	8009883a 	mov	r4,r16
   456e8:	df003d15 	stw	fp,244(sp)
   456ec:	0043a080 	call	43a08 <strlen>
   456f0:	d8802b15 	stw	r2,172(sp)
   456f4:	da003d17 	ldw	r8,244(sp)
   456f8:	103c200e 	bge	r2,zero,4477c <__alt_data_end+0xfffe477c>
   456fc:	0005883a 	mov	r2,zero
   45700:	003c1e06 	br	4477c <__alt_data_end+0xfffe477c>
   45704:	d9002d17 	ldw	r4,180(sp)
   45708:	d9801e04 	addi	r6,sp,120
   4570c:	b80b883a 	mov	r5,r23
   45710:	0049dc00 	call	49dc0 <__sprint_r>
   45714:	1039e81e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   45718:	d8c02017 	ldw	r3,128(sp)
   4571c:	d8801f17 	ldw	r2,124(sp)
   45720:	da000404 	addi	r8,sp,16
   45724:	d9403317 	ldw	r5,204(sp)
   45728:	10800044 	addi	r2,r2,1
   4572c:	44000015 	stw	r16,0(r8)
   45730:	28c7883a 	add	r3,r5,r3
   45734:	003b5b06 	br	444a4 <__alt_data_end+0xfffe44a4>
   45738:	01000174 	movhi	r4,5
   4573c:	21061084 	addi	r4,r4,6210
   45740:	d9003515 	stw	r4,212(sp)
   45744:	003af206 	br	44310 <__alt_data_end+0xfffe4310>
   45748:	013fffc4 	movi	r4,-1
   4574c:	003a0806 	br	43f70 <__alt_data_end+0xfffe3f70>
   45750:	0023883a 	mov	r17,zero
   45754:	003d9d06 	br	44dcc <__alt_data_end+0xfffe4dcc>
   45758:	d9002d17 	ldw	r4,180(sp)
   4575c:	d9801e04 	addi	r6,sp,120
   45760:	b80b883a 	mov	r5,r23
   45764:	0049dc00 	call	49dc0 <__sprint_r>
   45768:	1039d31e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   4576c:	d8c02017 	ldw	r3,128(sp)
   45770:	da000404 	addi	r8,sp,16
   45774:	003d9406 	br	44dc8 <__alt_data_end+0xfffe4dc8>
   45778:	01000174 	movhi	r4,5
   4577c:	21060c84 	addi	r4,r4,6194
   45780:	d9002c15 	stw	r4,176(sp)
   45784:	d9002c17 	ldw	r4,176(sp)
   45788:	1c47883a 	add	r3,r3,r17
   4578c:	10800044 	addi	r2,r2,1
   45790:	41000015 	stw	r4,0(r8)
   45794:	44400115 	stw	r17,4(r8)
   45798:	d8c02015 	stw	r3,128(sp)
   4579c:	d8801f15 	stw	r2,124(sp)
   457a0:	010001c4 	movi	r4,7
   457a4:	20bfd716 	blt	r4,r2,45704 <__alt_data_end+0xfffe5704>
   457a8:	42000204 	addi	r8,r8,8
   457ac:	003fdd06 	br	45724 <__alt_data_end+0xfffe5724>
   457b0:	d9002d17 	ldw	r4,180(sp)
   457b4:	d9801e04 	addi	r6,sp,120
   457b8:	b80b883a 	mov	r5,r23
   457bc:	0049dc00 	call	49dc0 <__sprint_r>
   457c0:	1039bd1e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   457c4:	d8802617 	ldw	r2,152(sp)
   457c8:	d8c02017 	ldw	r3,128(sp)
   457cc:	da000404 	addi	r8,sp,16
   457d0:	003e1006 	br	45014 <__alt_data_end+0xfffe5014>
   457d4:	00800044 	movi	r2,1
   457d8:	10803fcc 	andi	r2,r2,255
   457dc:	00c00044 	movi	r3,1
   457e0:	10fa0d26 	beq	r2,r3,44018 <__alt_data_end+0xfffe4018>
   457e4:	00c00084 	movi	r3,2
   457e8:	10fbaf26 	beq	r2,r3,446a8 <__alt_data_end+0xfffe46a8>
   457ec:	003a6d06 	br	441a4 <__alt_data_end+0xfffe41a4>
   457f0:	01000174 	movhi	r4,5
   457f4:	21061084 	addi	r4,r4,6210
   457f8:	d9003515 	stw	r4,212(sp)
   457fc:	003b5406 	br	44550 <__alt_data_end+0xfffe4550>
   45800:	d8802a17 	ldw	r2,168(sp)
   45804:	00c00184 	movi	r3,6
   45808:	1880012e 	bgeu	r3,r2,45810 <___vfprintf_internal_r+0x1d68>
   4580c:	1805883a 	mov	r2,r3
   45810:	d8802b15 	stw	r2,172(sp)
   45814:	1000ef16 	blt	r2,zero,45bd4 <___vfprintf_internal_r+0x212c>
   45818:	04000174 	movhi	r16,5
   4581c:	d8802915 	stw	r2,164(sp)
   45820:	dcc02e15 	stw	r19,184(sp)
   45824:	d8002a15 	stw	zero,168(sp)
   45828:	d8003215 	stw	zero,200(sp)
   4582c:	84060a04 	addi	r16,r16,6184
   45830:	0039883a 	mov	fp,zero
   45834:	003a8006 	br	44238 <__alt_data_end+0xfffe4238>
   45838:	0021883a 	mov	r16,zero
   4583c:	003e0706 	br	4505c <__alt_data_end+0xfffe505c>
   45840:	d9002d17 	ldw	r4,180(sp)
   45844:	d9801e04 	addi	r6,sp,120
   45848:	b80b883a 	mov	r5,r23
   4584c:	0049dc00 	call	49dc0 <__sprint_r>
   45850:	1039991e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   45854:	d8802617 	ldw	r2,152(sp)
   45858:	d9403317 	ldw	r5,204(sp)
   4585c:	d8c02017 	ldw	r3,128(sp)
   45860:	da000404 	addi	r8,sp,16
   45864:	2885c83a 	sub	r2,r5,r2
   45868:	003dfb06 	br	45058 <__alt_data_end+0xfffe5058>
   4586c:	9080004c 	andi	r2,r18,1
   45870:	103e8f1e 	bne	r2,zero,452b0 <__alt_data_end+0xfffe52b0>
   45874:	d8802117 	ldw	r2,132(sp)
   45878:	003e9e06 	br	452f4 <__alt_data_end+0xfffe52f4>
   4587c:	1025883a 	mov	r18,r2
   45880:	0039883a 	mov	fp,zero
   45884:	00800084 	movi	r2,2
   45888:	003fd306 	br	457d8 <__alt_data_end+0xfffe57d8>
   4588c:	07000b44 	movi	fp,45
   45890:	df002785 	stb	fp,158(sp)
   45894:	003a1b06 	br	44104 <__alt_data_end+0xfffe4104>
   45898:	00c00b44 	movi	r3,45
   4589c:	d8c02785 	stb	r3,158(sp)
   458a0:	d8802915 	stw	r2,164(sp)
   458a4:	dc802c17 	ldw	r18,176(sp)
   458a8:	d8002a15 	stw	zero,168(sp)
   458ac:	07000b44 	movi	fp,45
   458b0:	003a5e06 	br	4422c <__alt_data_end+0xfffe422c>
   458b4:	04000174 	movhi	r16,5
   458b8:	8405ff04 	addi	r16,r16,6140
   458bc:	003f4706 	br	455dc <__alt_data_end+0xfffe55dc>
   458c0:	d9002e17 	ldw	r4,184(sp)
   458c4:	d9402f17 	ldw	r5,188(sp)
   458c8:	20800017 	ldw	r2,0(r4)
   458cc:	21000104 	addi	r4,r4,4
   458d0:	d9002e15 	stw	r4,184(sp)
   458d4:	11400015 	stw	r5,0(r2)
   458d8:	0038ab06 	br	43b88 <__alt_data_end+0xfffe3b88>
   458dc:	dd802617 	ldw	r22,152(sp)
   458e0:	00bfff44 	movi	r2,-3
   458e4:	b0801c16 	blt	r22,r2,45958 <___vfprintf_internal_r+0x1eb0>
   458e8:	d9402a17 	ldw	r5,168(sp)
   458ec:	2d801a16 	blt	r5,r22,45958 <___vfprintf_internal_r+0x1eb0>
   458f0:	dd803215 	stw	r22,200(sp)
   458f4:	003e8906 	br	4531c <__alt_data_end+0xfffe531c>
   458f8:	01000174 	movhi	r4,5
   458fc:	21060c84 	addi	r4,r4,6194
   45900:	d9002c15 	stw	r4,176(sp)
   45904:	003c9106 	br	44b4c <__alt_data_end+0xfffe4b4c>
   45908:	e005883a 	mov	r2,fp
   4590c:	003e7906 	br	452f4 <__alt_data_end+0xfffe52f4>
   45910:	d9002a17 	ldw	r4,168(sp)
   45914:	df002783 	ldbu	fp,158(sp)
   45918:	dcc02e15 	stw	r19,184(sp)
   4591c:	d9002915 	stw	r4,164(sp)
   45920:	d9002b15 	stw	r4,172(sp)
   45924:	d8002a15 	stw	zero,168(sp)
   45928:	d8003215 	stw	zero,200(sp)
   4592c:	003a3b06 	br	4421c <__alt_data_end+0xfffe421c>
   45930:	9080004c 	andi	r2,r18,1
   45934:	0039883a 	mov	fp,zero
   45938:	10000426 	beq	r2,zero,4594c <___vfprintf_internal_r+0x1ea4>
   4593c:	00800c04 	movi	r2,48
   45940:	dc001dc4 	addi	r16,sp,119
   45944:	d8801dc5 	stb	r2,119(sp)
   45948:	003b6406 	br	446dc <__alt_data_end+0xfffe46dc>
   4594c:	d8002b15 	stw	zero,172(sp)
   45950:	dc001e04 	addi	r16,sp,120
   45954:	003a2b06 	br	44204 <__alt_data_end+0xfffe4204>
   45958:	8c7fff84 	addi	r17,r17,-2
   4595c:	b5bfffc4 	addi	r22,r22,-1
   45960:	dd802615 	stw	r22,152(sp)
   45964:	dc4022c5 	stb	r17,139(sp)
   45968:	b000bf16 	blt	r22,zero,45c68 <___vfprintf_internal_r+0x21c0>
   4596c:	00800ac4 	movi	r2,43
   45970:	d8802305 	stb	r2,140(sp)
   45974:	00800244 	movi	r2,9
   45978:	15807016 	blt	r2,r22,45b3c <___vfprintf_internal_r+0x2094>
   4597c:	00800c04 	movi	r2,48
   45980:	b5800c04 	addi	r22,r22,48
   45984:	d8802345 	stb	r2,141(sp)
   45988:	dd802385 	stb	r22,142(sp)
   4598c:	d88023c4 	addi	r2,sp,143
   45990:	df0022c4 	addi	fp,sp,139
   45994:	d8c03317 	ldw	r3,204(sp)
   45998:	1739c83a 	sub	fp,r2,fp
   4599c:	d9003317 	ldw	r4,204(sp)
   459a0:	e0c7883a 	add	r3,fp,r3
   459a4:	df003a15 	stw	fp,232(sp)
   459a8:	d8c02b15 	stw	r3,172(sp)
   459ac:	00800044 	movi	r2,1
   459b0:	1100b30e 	bge	r2,r4,45c80 <___vfprintf_internal_r+0x21d8>
   459b4:	d8c02b17 	ldw	r3,172(sp)
   459b8:	18c00044 	addi	r3,r3,1
   459bc:	d8c02b15 	stw	r3,172(sp)
   459c0:	1805883a 	mov	r2,r3
   459c4:	1800ac16 	blt	r3,zero,45c78 <___vfprintf_internal_r+0x21d0>
   459c8:	d8003215 	stw	zero,200(sp)
   459cc:	003e5d06 	br	45344 <__alt_data_end+0xfffe5344>
   459d0:	d9002d17 	ldw	r4,180(sp)
   459d4:	d9801e04 	addi	r6,sp,120
   459d8:	b80b883a 	mov	r5,r23
   459dc:	0049dc00 	call	49dc0 <__sprint_r>
   459e0:	1039351e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffe3eb8>
   459e4:	dc402617 	ldw	r17,152(sp)
   459e8:	d8c02017 	ldw	r3,128(sp)
   459ec:	d8801f17 	ldw	r2,124(sp)
   459f0:	da000404 	addi	r8,sp,16
   459f4:	003ed606 	br	45550 <__alt_data_end+0xfffe5550>
   459f8:	182b883a 	mov	r21,r3
   459fc:	d8002a15 	stw	zero,168(sp)
   45a00:	00388c06 	br	43c34 <__alt_data_end+0xfffe3c34>
   45a04:	d8802a17 	ldw	r2,168(sp)
   45a08:	103e071e 	bne	r2,zero,45228 <__alt_data_end+0xfffe5228>
   45a0c:	dc002a15 	stw	r16,168(sp)
   45a10:	003e0506 	br	45228 <__alt_data_end+0xfffe5228>
   45a14:	d9002a17 	ldw	r4,168(sp)
   45a18:	20c00044 	addi	r3,r4,1
   45a1c:	003e0f06 	br	4525c <__alt_data_end+0xfffe525c>
   45a20:	01400184 	movi	r5,6
   45a24:	d9402a15 	stw	r5,168(sp)
   45a28:	003dff06 	br	45228 <__alt_data_end+0xfffe5228>
   45a2c:	d8802104 	addi	r2,sp,132
   45a30:	d8800315 	stw	r2,12(sp)
   45a34:	d8802504 	addi	r2,sp,148
   45a38:	d8800215 	stw	r2,8(sp)
   45a3c:	d8802604 	addi	r2,sp,152
   45a40:	d8800115 	stw	r2,4(sp)
   45a44:	d8802a17 	ldw	r2,168(sp)
   45a48:	d9403617 	ldw	r5,216(sp)
   45a4c:	d9002d17 	ldw	r4,180(sp)
   45a50:	d8800015 	stw	r2,0(sp)
   45a54:	01c000c4 	movi	r7,3
   45a58:	980d883a 	mov	r6,r19
   45a5c:	da003d15 	stw	r8,244(sp)
   45a60:	00463e40 	call	463e4 <_dtoa_r>
   45a64:	d8c02a17 	ldw	r3,168(sp)
   45a68:	da003d17 	ldw	r8,244(sp)
   45a6c:	1021883a 	mov	r16,r2
   45a70:	10f9883a 	add	fp,r2,r3
   45a74:	81000007 	ldb	r4,0(r16)
   45a78:	00800c04 	movi	r2,48
   45a7c:	20805e26 	beq	r4,r2,45bf8 <___vfprintf_internal_r+0x2150>
   45a80:	d8c02617 	ldw	r3,152(sp)
   45a84:	e0f9883a 	add	fp,fp,r3
   45a88:	003e0a06 	br	452b4 <__alt_data_end+0xfffe52b4>
   45a8c:	00c00b44 	movi	r3,45
   45a90:	24e0003c 	xorhi	r19,r4,32768
   45a94:	d8c02905 	stb	r3,164(sp)
   45a98:	003de906 	br	45240 <__alt_data_end+0xfffe5240>
   45a9c:	d8c03217 	ldw	r3,200(sp)
   45aa0:	00c07a0e 	bge	zero,r3,45c8c <___vfprintf_internal_r+0x21e4>
   45aa4:	00800044 	movi	r2,1
   45aa8:	d9003317 	ldw	r4,204(sp)
   45aac:	1105883a 	add	r2,r2,r4
   45ab0:	d8802b15 	stw	r2,172(sp)
   45ab4:	10004e16 	blt	r2,zero,45bf0 <___vfprintf_internal_r+0x2148>
   45ab8:	044019c4 	movi	r17,103
   45abc:	003e2106 	br	45344 <__alt_data_end+0xfffe5344>
   45ac0:	d9002a17 	ldw	r4,168(sp)
   45ac4:	d8802104 	addi	r2,sp,132
   45ac8:	d8800315 	stw	r2,12(sp)
   45acc:	d9000015 	stw	r4,0(sp)
   45ad0:	d8802504 	addi	r2,sp,148
   45ad4:	d9403617 	ldw	r5,216(sp)
   45ad8:	d9002d17 	ldw	r4,180(sp)
   45adc:	d8800215 	stw	r2,8(sp)
   45ae0:	d8802604 	addi	r2,sp,152
   45ae4:	d8800115 	stw	r2,4(sp)
   45ae8:	01c000c4 	movi	r7,3
   45aec:	980d883a 	mov	r6,r19
   45af0:	da003d15 	stw	r8,244(sp)
   45af4:	00463e40 	call	463e4 <_dtoa_r>
   45af8:	d8c02a17 	ldw	r3,168(sp)
   45afc:	da003d17 	ldw	r8,244(sp)
   45b00:	1021883a 	mov	r16,r2
   45b04:	00801184 	movi	r2,70
   45b08:	80f9883a 	add	fp,r16,r3
   45b0c:	88bfd926 	beq	r17,r2,45a74 <__alt_data_end+0xfffe5a74>
   45b10:	003de806 	br	452b4 <__alt_data_end+0xfffe52b4>
   45b14:	d9002a17 	ldw	r4,168(sp)
   45b18:	00c04d0e 	bge	zero,r3,45c50 <___vfprintf_internal_r+0x21a8>
   45b1c:	2000441e 	bne	r4,zero,45c30 <___vfprintf_internal_r+0x2188>
   45b20:	9480004c 	andi	r18,r18,1
   45b24:	9000421e 	bne	r18,zero,45c30 <___vfprintf_internal_r+0x2188>
   45b28:	1805883a 	mov	r2,r3
   45b2c:	18006f16 	blt	r3,zero,45cec <___vfprintf_internal_r+0x2244>
   45b30:	d8c03217 	ldw	r3,200(sp)
   45b34:	d8c02b15 	stw	r3,172(sp)
   45b38:	003e0206 	br	45344 <__alt_data_end+0xfffe5344>
   45b3c:	df0022c4 	addi	fp,sp,139
   45b40:	dc002a15 	stw	r16,168(sp)
   45b44:	4027883a 	mov	r19,r8
   45b48:	e021883a 	mov	r16,fp
   45b4c:	b009883a 	mov	r4,r22
   45b50:	01400284 	movi	r5,10
   45b54:	00411ec0 	call	411ec <__modsi3>
   45b58:	10800c04 	addi	r2,r2,48
   45b5c:	843fffc4 	addi	r16,r16,-1
   45b60:	b009883a 	mov	r4,r22
   45b64:	01400284 	movi	r5,10
   45b68:	80800005 	stb	r2,0(r16)
   45b6c:	00411680 	call	41168 <__divsi3>
   45b70:	102d883a 	mov	r22,r2
   45b74:	00800244 	movi	r2,9
   45b78:	15bff416 	blt	r2,r22,45b4c <__alt_data_end+0xfffe5b4c>
   45b7c:	9811883a 	mov	r8,r19
   45b80:	b0800c04 	addi	r2,r22,48
   45b84:	8027883a 	mov	r19,r16
   45b88:	997fffc4 	addi	r5,r19,-1
   45b8c:	98bfffc5 	stb	r2,-1(r19)
   45b90:	dc002a17 	ldw	r16,168(sp)
   45b94:	2f006d2e 	bgeu	r5,fp,45d4c <___vfprintf_internal_r+0x22a4>
   45b98:	d9c02384 	addi	r7,sp,142
   45b9c:	3ccfc83a 	sub	r7,r7,r19
   45ba0:	d9002344 	addi	r4,sp,141
   45ba4:	e1cf883a 	add	r7,fp,r7
   45ba8:	00000106 	br	45bb0 <___vfprintf_internal_r+0x2108>
   45bac:	28800003 	ldbu	r2,0(r5)
   45bb0:	20800005 	stb	r2,0(r4)
   45bb4:	21000044 	addi	r4,r4,1
   45bb8:	29400044 	addi	r5,r5,1
   45bbc:	393ffb1e 	bne	r7,r4,45bac <__alt_data_end+0xfffe5bac>
   45bc0:	d8802304 	addi	r2,sp,140
   45bc4:	14c5c83a 	sub	r2,r2,r19
   45bc8:	d8c02344 	addi	r3,sp,141
   45bcc:	1885883a 	add	r2,r3,r2
   45bd0:	003f7006 	br	45994 <__alt_data_end+0xfffe5994>
   45bd4:	0005883a 	mov	r2,zero
   45bd8:	003f0f06 	br	45818 <__alt_data_end+0xfffe5818>
   45bdc:	d8c03217 	ldw	r3,200(sp)
   45be0:	18c00044 	addi	r3,r3,1
   45be4:	d8c02b15 	stw	r3,172(sp)
   45be8:	1805883a 	mov	r2,r3
   45bec:	183fb20e 	bge	r3,zero,45ab8 <__alt_data_end+0xfffe5ab8>
   45bf0:	0005883a 	mov	r2,zero
   45bf4:	003fb006 	br	45ab8 <__alt_data_end+0xfffe5ab8>
   45bf8:	d9003617 	ldw	r4,216(sp)
   45bfc:	000d883a 	mov	r6,zero
   45c00:	000f883a 	mov	r7,zero
   45c04:	980b883a 	mov	r5,r19
   45c08:	d8c03c15 	stw	r3,240(sp)
   45c0c:	da003d15 	stw	r8,244(sp)
   45c10:	004ccf40 	call	4ccf4 <__eqdf2>
   45c14:	d8c03c17 	ldw	r3,240(sp)
   45c18:	da003d17 	ldw	r8,244(sp)
   45c1c:	103f9826 	beq	r2,zero,45a80 <__alt_data_end+0xfffe5a80>
   45c20:	00800044 	movi	r2,1
   45c24:	10c7c83a 	sub	r3,r2,r3
   45c28:	d8c02615 	stw	r3,152(sp)
   45c2c:	003f9506 	br	45a84 <__alt_data_end+0xfffe5a84>
   45c30:	d9002a17 	ldw	r4,168(sp)
   45c34:	d8c03217 	ldw	r3,200(sp)
   45c38:	20800044 	addi	r2,r4,1
   45c3c:	1885883a 	add	r2,r3,r2
   45c40:	d8802b15 	stw	r2,172(sp)
   45c44:	103dbf0e 	bge	r2,zero,45344 <__alt_data_end+0xfffe5344>
   45c48:	0005883a 	mov	r2,zero
   45c4c:	003dbd06 	br	45344 <__alt_data_end+0xfffe5344>
   45c50:	2000201e 	bne	r4,zero,45cd4 <___vfprintf_internal_r+0x222c>
   45c54:	9480004c 	andi	r18,r18,1
   45c58:	90001e1e 	bne	r18,zero,45cd4 <___vfprintf_internal_r+0x222c>
   45c5c:	00800044 	movi	r2,1
   45c60:	d8802b15 	stw	r2,172(sp)
   45c64:	003db706 	br	45344 <__alt_data_end+0xfffe5344>
   45c68:	00800b44 	movi	r2,45
   45c6c:	05adc83a 	sub	r22,zero,r22
   45c70:	d8802305 	stb	r2,140(sp)
   45c74:	003f3f06 	br	45974 <__alt_data_end+0xfffe5974>
   45c78:	0005883a 	mov	r2,zero
   45c7c:	003f5206 	br	459c8 <__alt_data_end+0xfffe59c8>
   45c80:	90a4703a 	and	r18,r18,r2
   45c84:	903f4e26 	beq	r18,zero,459c0 <__alt_data_end+0xfffe59c0>
   45c88:	003f4a06 	br	459b4 <__alt_data_end+0xfffe59b4>
   45c8c:	00800084 	movi	r2,2
   45c90:	10c5c83a 	sub	r2,r2,r3
   45c94:	003f8406 	br	45aa8 <__alt_data_end+0xfffe5aa8>
   45c98:	d9402e17 	ldw	r5,184(sp)
   45c9c:	d9002e17 	ldw	r4,184(sp)
   45ca0:	ac400043 	ldbu	r17,1(r21)
   45ca4:	29400017 	ldw	r5,0(r5)
   45ca8:	20800104 	addi	r2,r4,4
   45cac:	d8802e15 	stw	r2,184(sp)
   45cb0:	d9402a15 	stw	r5,168(sp)
   45cb4:	182b883a 	mov	r21,r3
   45cb8:	283e7b0e 	bge	r5,zero,456a8 <__alt_data_end+0xfffe56a8>
   45cbc:	8c403fcc 	andi	r17,r17,255
   45cc0:	017fffc4 	movi	r5,-1
   45cc4:	8c40201c 	xori	r17,r17,128
   45cc8:	d9402a15 	stw	r5,168(sp)
   45ccc:	8c7fe004 	addi	r17,r17,-128
   45cd0:	0037d706 	br	43c30 <__alt_data_end+0xfffe3c30>
   45cd4:	d8c02a17 	ldw	r3,168(sp)
   45cd8:	18c00084 	addi	r3,r3,2
   45cdc:	d8c02b15 	stw	r3,172(sp)
   45ce0:	1805883a 	mov	r2,r3
   45ce4:	183d970e 	bge	r3,zero,45344 <__alt_data_end+0xfffe5344>
   45ce8:	003fd706 	br	45c48 <__alt_data_end+0xfffe5c48>
   45cec:	0005883a 	mov	r2,zero
   45cf0:	003f8f06 	br	45b30 <__alt_data_end+0xfffe5b30>
   45cf4:	9080004c 	andi	r2,r18,1
   45cf8:	103f821e 	bne	r2,zero,45b04 <__alt_data_end+0xfffe5b04>
   45cfc:	d8802117 	ldw	r2,132(sp)
   45d00:	1405c83a 	sub	r2,r2,r16
   45d04:	d8803315 	stw	r2,204(sp)
   45d08:	b47ef426 	beq	r22,r17,458dc <__alt_data_end+0xfffe58dc>
   45d0c:	dd802617 	ldw	r22,152(sp)
   45d10:	003f1206 	br	4595c <__alt_data_end+0xfffe595c>
   45d14:	d8c02b03 	ldbu	r3,172(sp)
   45d18:	d8c02785 	stb	r3,158(sp)
   45d1c:	0038df06 	br	4409c <__alt_data_end+0xfffe409c>
   45d20:	d8c02b03 	ldbu	r3,172(sp)
   45d24:	d8c02785 	stb	r3,158(sp)
   45d28:	0038aa06 	br	43fd4 <__alt_data_end+0xfffe3fd4>
   45d2c:	d8c02b03 	ldbu	r3,172(sp)
   45d30:	d8c02785 	stb	r3,158(sp)
   45d34:	003a4306 	br	44644 <__alt_data_end+0xfffe4644>
   45d38:	d8c02b03 	ldbu	r3,172(sp)
   45d3c:	d8c02785 	stb	r3,158(sp)
   45d40:	003af506 	br	44918 <__alt_data_end+0xfffe4918>
   45d44:	0005883a 	mov	r2,zero
   45d48:	003d7b06 	br	45338 <__alt_data_end+0xfffe5338>
   45d4c:	d8802344 	addi	r2,sp,141
   45d50:	003f1006 	br	45994 <__alt_data_end+0xfffe5994>
   45d54:	d8c02b03 	ldbu	r3,172(sp)
   45d58:	d8c02785 	stb	r3,158(sp)
   45d5c:	0038fd06 	br	44154 <__alt_data_end+0xfffe4154>
   45d60:	d8c02b03 	ldbu	r3,172(sp)
   45d64:	d8c02785 	stb	r3,158(sp)
   45d68:	003a9706 	br	447c8 <__alt_data_end+0xfffe47c8>
   45d6c:	d8c02b03 	ldbu	r3,172(sp)
   45d70:	d8c02785 	stb	r3,158(sp)
   45d74:	003a1806 	br	445d8 <__alt_data_end+0xfffe45d8>
   45d78:	d8c02b03 	ldbu	r3,172(sp)
   45d7c:	d8c02785 	stb	r3,158(sp)
   45d80:	003abe06 	br	4487c <__alt_data_end+0xfffe487c>

00045d84 <__vfprintf_internal>:
   45d84:	00800174 	movhi	r2,5
   45d88:	108d5104 	addi	r2,r2,13636
   45d8c:	300f883a 	mov	r7,r6
   45d90:	280d883a 	mov	r6,r5
   45d94:	200b883a 	mov	r5,r4
   45d98:	11000017 	ldw	r4,0(r2)
   45d9c:	0043aa81 	jmpi	43aa8 <___vfprintf_internal_r>

00045da0 <__sbprintf>:
   45da0:	2880030b 	ldhu	r2,12(r5)
   45da4:	2ac01917 	ldw	r11,100(r5)
   45da8:	2a80038b 	ldhu	r10,14(r5)
   45dac:	2a400717 	ldw	r9,28(r5)
   45db0:	2a000917 	ldw	r8,36(r5)
   45db4:	defee204 	addi	sp,sp,-1144
   45db8:	00c10004 	movi	r3,1024
   45dbc:	dc011a15 	stw	r16,1128(sp)
   45dc0:	10bfff4c 	andi	r2,r2,65533
   45dc4:	2821883a 	mov	r16,r5
   45dc8:	d8cb883a 	add	r5,sp,r3
   45dcc:	dc811c15 	stw	r18,1136(sp)
   45dd0:	dc411b15 	stw	r17,1132(sp)
   45dd4:	dfc11d15 	stw	ra,1140(sp)
   45dd8:	2025883a 	mov	r18,r4
   45ddc:	d881030d 	sth	r2,1036(sp)
   45de0:	dac11915 	stw	r11,1124(sp)
   45de4:	da81038d 	sth	r10,1038(sp)
   45de8:	da410715 	stw	r9,1052(sp)
   45dec:	da010915 	stw	r8,1060(sp)
   45df0:	dec10015 	stw	sp,1024(sp)
   45df4:	dec10415 	stw	sp,1040(sp)
   45df8:	d8c10215 	stw	r3,1032(sp)
   45dfc:	d8c10515 	stw	r3,1044(sp)
   45e00:	d8010615 	stw	zero,1048(sp)
   45e04:	0043aa80 	call	43aa8 <___vfprintf_internal_r>
   45e08:	1023883a 	mov	r17,r2
   45e0c:	10000416 	blt	r2,zero,45e20 <__sbprintf+0x80>
   45e10:	d9410004 	addi	r5,sp,1024
   45e14:	9009883a 	mov	r4,r18
   45e18:	00416b00 	call	416b0 <_fflush_r>
   45e1c:	10000d1e 	bne	r2,zero,45e54 <__sbprintf+0xb4>
   45e20:	d881030b 	ldhu	r2,1036(sp)
   45e24:	1080100c 	andi	r2,r2,64
   45e28:	10000326 	beq	r2,zero,45e38 <__sbprintf+0x98>
   45e2c:	8080030b 	ldhu	r2,12(r16)
   45e30:	10801014 	ori	r2,r2,64
   45e34:	8080030d 	sth	r2,12(r16)
   45e38:	8805883a 	mov	r2,r17
   45e3c:	dfc11d17 	ldw	ra,1140(sp)
   45e40:	dc811c17 	ldw	r18,1136(sp)
   45e44:	dc411b17 	ldw	r17,1132(sp)
   45e48:	dc011a17 	ldw	r16,1128(sp)
   45e4c:	dec11e04 	addi	sp,sp,1144
   45e50:	f800283a 	ret
   45e54:	047fffc4 	movi	r17,-1
   45e58:	003ff106 	br	45e20 <__alt_data_end+0xfffe5e20>

00045e5c <__swbuf_r>:
   45e5c:	defffb04 	addi	sp,sp,-20
   45e60:	dcc00315 	stw	r19,12(sp)
   45e64:	dc800215 	stw	r18,8(sp)
   45e68:	dc000015 	stw	r16,0(sp)
   45e6c:	dfc00415 	stw	ra,16(sp)
   45e70:	dc400115 	stw	r17,4(sp)
   45e74:	2025883a 	mov	r18,r4
   45e78:	2827883a 	mov	r19,r5
   45e7c:	3021883a 	mov	r16,r6
   45e80:	20000226 	beq	r4,zero,45e8c <__swbuf_r+0x30>
   45e84:	20800e17 	ldw	r2,56(r4)
   45e88:	10004226 	beq	r2,zero,45f94 <__swbuf_r+0x138>
   45e8c:	80800617 	ldw	r2,24(r16)
   45e90:	8100030b 	ldhu	r4,12(r16)
   45e94:	80800215 	stw	r2,8(r16)
   45e98:	2080020c 	andi	r2,r4,8
   45e9c:	10003626 	beq	r2,zero,45f78 <__swbuf_r+0x11c>
   45ea0:	80c00417 	ldw	r3,16(r16)
   45ea4:	18003426 	beq	r3,zero,45f78 <__swbuf_r+0x11c>
   45ea8:	2088000c 	andi	r2,r4,8192
   45eac:	9c403fcc 	andi	r17,r19,255
   45eb0:	10001a26 	beq	r2,zero,45f1c <__swbuf_r+0xc0>
   45eb4:	80800017 	ldw	r2,0(r16)
   45eb8:	81000517 	ldw	r4,20(r16)
   45ebc:	10c7c83a 	sub	r3,r2,r3
   45ec0:	1900200e 	bge	r3,r4,45f44 <__swbuf_r+0xe8>
   45ec4:	18c00044 	addi	r3,r3,1
   45ec8:	81000217 	ldw	r4,8(r16)
   45ecc:	11400044 	addi	r5,r2,1
   45ed0:	81400015 	stw	r5,0(r16)
   45ed4:	213fffc4 	addi	r4,r4,-1
   45ed8:	81000215 	stw	r4,8(r16)
   45edc:	14c00005 	stb	r19,0(r2)
   45ee0:	80800517 	ldw	r2,20(r16)
   45ee4:	10c01e26 	beq	r2,r3,45f60 <__swbuf_r+0x104>
   45ee8:	8080030b 	ldhu	r2,12(r16)
   45eec:	1080004c 	andi	r2,r2,1
   45ef0:	10000226 	beq	r2,zero,45efc <__swbuf_r+0xa0>
   45ef4:	00800284 	movi	r2,10
   45ef8:	88801926 	beq	r17,r2,45f60 <__swbuf_r+0x104>
   45efc:	8805883a 	mov	r2,r17
   45f00:	dfc00417 	ldw	ra,16(sp)
   45f04:	dcc00317 	ldw	r19,12(sp)
   45f08:	dc800217 	ldw	r18,8(sp)
   45f0c:	dc400117 	ldw	r17,4(sp)
   45f10:	dc000017 	ldw	r16,0(sp)
   45f14:	dec00504 	addi	sp,sp,20
   45f18:	f800283a 	ret
   45f1c:	81401917 	ldw	r5,100(r16)
   45f20:	00b7ffc4 	movi	r2,-8193
   45f24:	21080014 	ori	r4,r4,8192
   45f28:	2884703a 	and	r2,r5,r2
   45f2c:	80801915 	stw	r2,100(r16)
   45f30:	80800017 	ldw	r2,0(r16)
   45f34:	8100030d 	sth	r4,12(r16)
   45f38:	81000517 	ldw	r4,20(r16)
   45f3c:	10c7c83a 	sub	r3,r2,r3
   45f40:	193fe016 	blt	r3,r4,45ec4 <__alt_data_end+0xfffe5ec4>
   45f44:	800b883a 	mov	r5,r16
   45f48:	9009883a 	mov	r4,r18
   45f4c:	00416b00 	call	416b0 <_fflush_r>
   45f50:	1000071e 	bne	r2,zero,45f70 <__swbuf_r+0x114>
   45f54:	80800017 	ldw	r2,0(r16)
   45f58:	00c00044 	movi	r3,1
   45f5c:	003fda06 	br	45ec8 <__alt_data_end+0xfffe5ec8>
   45f60:	800b883a 	mov	r5,r16
   45f64:	9009883a 	mov	r4,r18
   45f68:	00416b00 	call	416b0 <_fflush_r>
   45f6c:	103fe326 	beq	r2,zero,45efc <__alt_data_end+0xfffe5efc>
   45f70:	00bfffc4 	movi	r2,-1
   45f74:	003fe206 	br	45f00 <__alt_data_end+0xfffe5f00>
   45f78:	800b883a 	mov	r5,r16
   45f7c:	9009883a 	mov	r4,r18
   45f80:	00460140 	call	46014 <__swsetup_r>
   45f84:	103ffa1e 	bne	r2,zero,45f70 <__alt_data_end+0xfffe5f70>
   45f88:	8100030b 	ldhu	r4,12(r16)
   45f8c:	80c00417 	ldw	r3,16(r16)
   45f90:	003fc506 	br	45ea8 <__alt_data_end+0xfffe5ea8>
   45f94:	0041a9c0 	call	41a9c <__sinit>
   45f98:	003fbc06 	br	45e8c <__alt_data_end+0xfffe5e8c>

00045f9c <__swbuf>:
   45f9c:	00800174 	movhi	r2,5
   45fa0:	108d5104 	addi	r2,r2,13636
   45fa4:	280d883a 	mov	r6,r5
   45fa8:	200b883a 	mov	r5,r4
   45fac:	11000017 	ldw	r4,0(r2)
   45fb0:	0045e5c1 	jmpi	45e5c <__swbuf_r>

00045fb4 <_write_r>:
   45fb4:	defffd04 	addi	sp,sp,-12
   45fb8:	2805883a 	mov	r2,r5
   45fbc:	dc000015 	stw	r16,0(sp)
   45fc0:	04000174 	movhi	r16,5
   45fc4:	dc400115 	stw	r17,4(sp)
   45fc8:	300b883a 	mov	r5,r6
   45fcc:	84146904 	addi	r16,r16,20900
   45fd0:	2023883a 	mov	r17,r4
   45fd4:	380d883a 	mov	r6,r7
   45fd8:	1009883a 	mov	r4,r2
   45fdc:	dfc00215 	stw	ra,8(sp)
   45fe0:	80000015 	stw	zero,0(r16)
   45fe4:	004ee440 	call	4ee44 <write>
   45fe8:	00ffffc4 	movi	r3,-1
   45fec:	10c00526 	beq	r2,r3,46004 <_write_r+0x50>
   45ff0:	dfc00217 	ldw	ra,8(sp)
   45ff4:	dc400117 	ldw	r17,4(sp)
   45ff8:	dc000017 	ldw	r16,0(sp)
   45ffc:	dec00304 	addi	sp,sp,12
   46000:	f800283a 	ret
   46004:	80c00017 	ldw	r3,0(r16)
   46008:	183ff926 	beq	r3,zero,45ff0 <__alt_data_end+0xfffe5ff0>
   4600c:	88c00015 	stw	r3,0(r17)
   46010:	003ff706 	br	45ff0 <__alt_data_end+0xfffe5ff0>

00046014 <__swsetup_r>:
   46014:	00800174 	movhi	r2,5
   46018:	defffd04 	addi	sp,sp,-12
   4601c:	108d5104 	addi	r2,r2,13636
   46020:	dc400115 	stw	r17,4(sp)
   46024:	2023883a 	mov	r17,r4
   46028:	11000017 	ldw	r4,0(r2)
   4602c:	dc000015 	stw	r16,0(sp)
   46030:	dfc00215 	stw	ra,8(sp)
   46034:	2821883a 	mov	r16,r5
   46038:	20000226 	beq	r4,zero,46044 <__swsetup_r+0x30>
   4603c:	20800e17 	ldw	r2,56(r4)
   46040:	10003126 	beq	r2,zero,46108 <__swsetup_r+0xf4>
   46044:	8080030b 	ldhu	r2,12(r16)
   46048:	10c0020c 	andi	r3,r2,8
   4604c:	1009883a 	mov	r4,r2
   46050:	18000f26 	beq	r3,zero,46090 <__swsetup_r+0x7c>
   46054:	80c00417 	ldw	r3,16(r16)
   46058:	18001526 	beq	r3,zero,460b0 <__swsetup_r+0x9c>
   4605c:	1100004c 	andi	r4,r2,1
   46060:	20001c1e 	bne	r4,zero,460d4 <__swsetup_r+0xc0>
   46064:	1080008c 	andi	r2,r2,2
   46068:	1000291e 	bne	r2,zero,46110 <__swsetup_r+0xfc>
   4606c:	80800517 	ldw	r2,20(r16)
   46070:	80800215 	stw	r2,8(r16)
   46074:	18001c26 	beq	r3,zero,460e8 <__swsetup_r+0xd4>
   46078:	0005883a 	mov	r2,zero
   4607c:	dfc00217 	ldw	ra,8(sp)
   46080:	dc400117 	ldw	r17,4(sp)
   46084:	dc000017 	ldw	r16,0(sp)
   46088:	dec00304 	addi	sp,sp,12
   4608c:	f800283a 	ret
   46090:	2080040c 	andi	r2,r4,16
   46094:	10002e26 	beq	r2,zero,46150 <__swsetup_r+0x13c>
   46098:	2080010c 	andi	r2,r4,4
   4609c:	10001e1e 	bne	r2,zero,46118 <__swsetup_r+0x104>
   460a0:	80c00417 	ldw	r3,16(r16)
   460a4:	20800214 	ori	r2,r4,8
   460a8:	8080030d 	sth	r2,12(r16)
   460ac:	183feb1e 	bne	r3,zero,4605c <__alt_data_end+0xfffe605c>
   460b0:	1100a00c 	andi	r4,r2,640
   460b4:	01408004 	movi	r5,512
   460b8:	217fe826 	beq	r4,r5,4605c <__alt_data_end+0xfffe605c>
   460bc:	800b883a 	mov	r5,r16
   460c0:	8809883a 	mov	r4,r17
   460c4:	004277c0 	call	4277c <__smakebuf_r>
   460c8:	8080030b 	ldhu	r2,12(r16)
   460cc:	80c00417 	ldw	r3,16(r16)
   460d0:	003fe206 	br	4605c <__alt_data_end+0xfffe605c>
   460d4:	80800517 	ldw	r2,20(r16)
   460d8:	80000215 	stw	zero,8(r16)
   460dc:	0085c83a 	sub	r2,zero,r2
   460e0:	80800615 	stw	r2,24(r16)
   460e4:	183fe41e 	bne	r3,zero,46078 <__alt_data_end+0xfffe6078>
   460e8:	80c0030b 	ldhu	r3,12(r16)
   460ec:	0005883a 	mov	r2,zero
   460f0:	1900200c 	andi	r4,r3,128
   460f4:	203fe126 	beq	r4,zero,4607c <__alt_data_end+0xfffe607c>
   460f8:	18c01014 	ori	r3,r3,64
   460fc:	80c0030d 	sth	r3,12(r16)
   46100:	00bfffc4 	movi	r2,-1
   46104:	003fdd06 	br	4607c <__alt_data_end+0xfffe607c>
   46108:	0041a9c0 	call	41a9c <__sinit>
   4610c:	003fcd06 	br	46044 <__alt_data_end+0xfffe6044>
   46110:	0005883a 	mov	r2,zero
   46114:	003fd606 	br	46070 <__alt_data_end+0xfffe6070>
   46118:	81400c17 	ldw	r5,48(r16)
   4611c:	28000626 	beq	r5,zero,46138 <__swsetup_r+0x124>
   46120:	80801004 	addi	r2,r16,64
   46124:	28800326 	beq	r5,r2,46134 <__swsetup_r+0x120>
   46128:	8809883a 	mov	r4,r17
   4612c:	0041e080 	call	41e08 <_free_r>
   46130:	8100030b 	ldhu	r4,12(r16)
   46134:	80000c15 	stw	zero,48(r16)
   46138:	80c00417 	ldw	r3,16(r16)
   4613c:	00bff6c4 	movi	r2,-37
   46140:	1108703a 	and	r4,r2,r4
   46144:	80000115 	stw	zero,4(r16)
   46148:	80c00015 	stw	r3,0(r16)
   4614c:	003fd506 	br	460a4 <__alt_data_end+0xfffe60a4>
   46150:	00800244 	movi	r2,9
   46154:	88800015 	stw	r2,0(r17)
   46158:	20801014 	ori	r2,r4,64
   4615c:	8080030d 	sth	r2,12(r16)
   46160:	00bfffc4 	movi	r2,-1
   46164:	003fc506 	br	4607c <__alt_data_end+0xfffe607c>

00046168 <_close_r>:
   46168:	defffd04 	addi	sp,sp,-12
   4616c:	dc000015 	stw	r16,0(sp)
   46170:	04000174 	movhi	r16,5
   46174:	dc400115 	stw	r17,4(sp)
   46178:	84146904 	addi	r16,r16,20900
   4617c:	2023883a 	mov	r17,r4
   46180:	2809883a 	mov	r4,r5
   46184:	dfc00215 	stw	ra,8(sp)
   46188:	80000015 	stw	zero,0(r16)
   4618c:	004e2600 	call	4e260 <close>
   46190:	00ffffc4 	movi	r3,-1
   46194:	10c00526 	beq	r2,r3,461ac <_close_r+0x44>
   46198:	dfc00217 	ldw	ra,8(sp)
   4619c:	dc400117 	ldw	r17,4(sp)
   461a0:	dc000017 	ldw	r16,0(sp)
   461a4:	dec00304 	addi	sp,sp,12
   461a8:	f800283a 	ret
   461ac:	80c00017 	ldw	r3,0(r16)
   461b0:	183ff926 	beq	r3,zero,46198 <__alt_data_end+0xfffe6198>
   461b4:	88c00015 	stw	r3,0(r17)
   461b8:	003ff706 	br	46198 <__alt_data_end+0xfffe6198>

000461bc <quorem>:
   461bc:	defff204 	addi	sp,sp,-56
   461c0:	ddc00b15 	stw	r23,44(sp)
   461c4:	20800417 	ldw	r2,16(r4)
   461c8:	2dc00417 	ldw	r23,16(r5)
   461cc:	dfc00d15 	stw	ra,52(sp)
   461d0:	df000c15 	stw	fp,48(sp)
   461d4:	dd800a15 	stw	r22,40(sp)
   461d8:	dd400915 	stw	r21,36(sp)
   461dc:	dd000815 	stw	r20,32(sp)
   461e0:	dcc00715 	stw	r19,28(sp)
   461e4:	dc800615 	stw	r18,24(sp)
   461e8:	dc400515 	stw	r17,20(sp)
   461ec:	dc000415 	stw	r16,16(sp)
   461f0:	15c07a16 	blt	r2,r23,463dc <quorem+0x220>
   461f4:	bdffffc4 	addi	r23,r23,-1
   461f8:	bde9883a 	add	r20,r23,r23
   461fc:	28c00504 	addi	r3,r5,20
   46200:	a529883a 	add	r20,r20,r20
   46204:	1d39883a 	add	fp,r3,r20
   46208:	24c00504 	addi	r19,r4,20
   4620c:	d9400215 	stw	r5,8(sp)
   46210:	9d29883a 	add	r20,r19,r20
   46214:	e1400017 	ldw	r5,0(fp)
   46218:	d9000015 	stw	r4,0(sp)
   4621c:	a1000017 	ldw	r4,0(r20)
   46220:	29400044 	addi	r5,r5,1
   46224:	d8c00115 	stw	r3,4(sp)
   46228:	dd000315 	stw	r20,12(sp)
   4622c:	00412600 	call	41260 <__udivsi3>
   46230:	1025883a 	mov	r18,r2
   46234:	10003026 	beq	r2,zero,462f8 <quorem+0x13c>
   46238:	dc400117 	ldw	r17,4(sp)
   4623c:	9829883a 	mov	r20,r19
   46240:	002d883a 	mov	r22,zero
   46244:	0021883a 	mov	r16,zero
   46248:	8d400017 	ldw	r21,0(r17)
   4624c:	900b883a 	mov	r5,r18
   46250:	8c400104 	addi	r17,r17,4
   46254:	a93fffcc 	andi	r4,r21,65535
   46258:	004131c0 	call	4131c <__mulsi3>
   4625c:	a808d43a 	srli	r4,r21,16
   46260:	900b883a 	mov	r5,r18
   46264:	15ad883a 	add	r22,r2,r22
   46268:	004131c0 	call	4131c <__mulsi3>
   4626c:	a1000017 	ldw	r4,0(r20)
   46270:	b00cd43a 	srli	r6,r22,16
   46274:	b0ffffcc 	andi	r3,r22,65535
   46278:	217fffcc 	andi	r5,r4,65535
   4627c:	2c21883a 	add	r16,r5,r16
   46280:	80c7c83a 	sub	r3,r16,r3
   46284:	2008d43a 	srli	r4,r4,16
   46288:	1185883a 	add	r2,r2,r6
   4628c:	1821d43a 	srai	r16,r3,16
   46290:	117fffcc 	andi	r5,r2,65535
   46294:	2149c83a 	sub	r4,r4,r5
   46298:	2421883a 	add	r16,r4,r16
   4629c:	8008943a 	slli	r4,r16,16
   462a0:	18ffffcc 	andi	r3,r3,65535
   462a4:	102cd43a 	srli	r22,r2,16
   462a8:	20c8b03a 	or	r4,r4,r3
   462ac:	a1000015 	stw	r4,0(r20)
   462b0:	8021d43a 	srai	r16,r16,16
   462b4:	a5000104 	addi	r20,r20,4
   462b8:	e47fe32e 	bgeu	fp,r17,46248 <__alt_data_end+0xfffe6248>
   462bc:	d8c00317 	ldw	r3,12(sp)
   462c0:	18800017 	ldw	r2,0(r3)
   462c4:	10000c1e 	bne	r2,zero,462f8 <quorem+0x13c>
   462c8:	18bfff04 	addi	r2,r3,-4
   462cc:	9880082e 	bgeu	r19,r2,462f0 <quorem+0x134>
   462d0:	18ffff17 	ldw	r3,-4(r3)
   462d4:	18000326 	beq	r3,zero,462e4 <quorem+0x128>
   462d8:	00000506 	br	462f0 <quorem+0x134>
   462dc:	10c00017 	ldw	r3,0(r2)
   462e0:	1800031e 	bne	r3,zero,462f0 <quorem+0x134>
   462e4:	10bfff04 	addi	r2,r2,-4
   462e8:	bdffffc4 	addi	r23,r23,-1
   462ec:	98bffb36 	bltu	r19,r2,462dc <__alt_data_end+0xfffe62dc>
   462f0:	d8c00017 	ldw	r3,0(sp)
   462f4:	1dc00415 	stw	r23,16(r3)
   462f8:	d9400217 	ldw	r5,8(sp)
   462fc:	d9000017 	ldw	r4,0(sp)
   46300:	0048e7c0 	call	48e7c <__mcmp>
   46304:	10002816 	blt	r2,zero,463a8 <quorem+0x1ec>
   46308:	dc400117 	ldw	r17,4(sp)
   4630c:	94800044 	addi	r18,r18,1
   46310:	980d883a 	mov	r6,r19
   46314:	0007883a 	mov	r3,zero
   46318:	31000017 	ldw	r4,0(r6)
   4631c:	89400017 	ldw	r5,0(r17)
   46320:	31800104 	addi	r6,r6,4
   46324:	20bfffcc 	andi	r2,r4,65535
   46328:	10c7883a 	add	r3,r2,r3
   4632c:	28bfffcc 	andi	r2,r5,65535
   46330:	1885c83a 	sub	r2,r3,r2
   46334:	280ad43a 	srli	r5,r5,16
   46338:	2008d43a 	srli	r4,r4,16
   4633c:	1007d43a 	srai	r3,r2,16
   46340:	10bfffcc 	andi	r2,r2,65535
   46344:	2149c83a 	sub	r4,r4,r5
   46348:	20c9883a 	add	r4,r4,r3
   4634c:	200a943a 	slli	r5,r4,16
   46350:	8c400104 	addi	r17,r17,4
   46354:	2007d43a 	srai	r3,r4,16
   46358:	2884b03a 	or	r2,r5,r2
   4635c:	30bfff15 	stw	r2,-4(r6)
   46360:	e47fed2e 	bgeu	fp,r17,46318 <__alt_data_end+0xfffe6318>
   46364:	bdc5883a 	add	r2,r23,r23
   46368:	1085883a 	add	r2,r2,r2
   4636c:	9887883a 	add	r3,r19,r2
   46370:	18800017 	ldw	r2,0(r3)
   46374:	10000c1e 	bne	r2,zero,463a8 <quorem+0x1ec>
   46378:	18bfff04 	addi	r2,r3,-4
   4637c:	9880082e 	bgeu	r19,r2,463a0 <quorem+0x1e4>
   46380:	18ffff17 	ldw	r3,-4(r3)
   46384:	18000326 	beq	r3,zero,46394 <quorem+0x1d8>
   46388:	00000506 	br	463a0 <quorem+0x1e4>
   4638c:	10c00017 	ldw	r3,0(r2)
   46390:	1800031e 	bne	r3,zero,463a0 <quorem+0x1e4>
   46394:	10bfff04 	addi	r2,r2,-4
   46398:	bdffffc4 	addi	r23,r23,-1
   4639c:	98bffb36 	bltu	r19,r2,4638c <__alt_data_end+0xfffe638c>
   463a0:	d8c00017 	ldw	r3,0(sp)
   463a4:	1dc00415 	stw	r23,16(r3)
   463a8:	9005883a 	mov	r2,r18
   463ac:	dfc00d17 	ldw	ra,52(sp)
   463b0:	df000c17 	ldw	fp,48(sp)
   463b4:	ddc00b17 	ldw	r23,44(sp)
   463b8:	dd800a17 	ldw	r22,40(sp)
   463bc:	dd400917 	ldw	r21,36(sp)
   463c0:	dd000817 	ldw	r20,32(sp)
   463c4:	dcc00717 	ldw	r19,28(sp)
   463c8:	dc800617 	ldw	r18,24(sp)
   463cc:	dc400517 	ldw	r17,20(sp)
   463d0:	dc000417 	ldw	r16,16(sp)
   463d4:	dec00e04 	addi	sp,sp,56
   463d8:	f800283a 	ret
   463dc:	0005883a 	mov	r2,zero
   463e0:	003ff206 	br	463ac <__alt_data_end+0xfffe63ac>

000463e4 <_dtoa_r>:
   463e4:	20801017 	ldw	r2,64(r4)
   463e8:	deffde04 	addi	sp,sp,-136
   463ec:	df002015 	stw	fp,128(sp)
   463f0:	dcc01b15 	stw	r19,108(sp)
   463f4:	dc801a15 	stw	r18,104(sp)
   463f8:	dc401915 	stw	r17,100(sp)
   463fc:	dc001815 	stw	r16,96(sp)
   46400:	dfc02115 	stw	ra,132(sp)
   46404:	ddc01f15 	stw	r23,124(sp)
   46408:	dd801e15 	stw	r22,120(sp)
   4640c:	dd401d15 	stw	r21,116(sp)
   46410:	dd001c15 	stw	r20,112(sp)
   46414:	d9c00315 	stw	r7,12(sp)
   46418:	2039883a 	mov	fp,r4
   4641c:	3023883a 	mov	r17,r6
   46420:	2825883a 	mov	r18,r5
   46424:	dc002417 	ldw	r16,144(sp)
   46428:	3027883a 	mov	r19,r6
   4642c:	10000826 	beq	r2,zero,46450 <_dtoa_r+0x6c>
   46430:	21801117 	ldw	r6,68(r4)
   46434:	00c00044 	movi	r3,1
   46438:	100b883a 	mov	r5,r2
   4643c:	1986983a 	sll	r3,r3,r6
   46440:	11800115 	stw	r6,4(r2)
   46444:	10c00215 	stw	r3,8(r2)
   46448:	00485a00 	call	485a0 <_Bfree>
   4644c:	e0001015 	stw	zero,64(fp)
   46450:	88002e16 	blt	r17,zero,4650c <_dtoa_r+0x128>
   46454:	80000015 	stw	zero,0(r16)
   46458:	889ffc2c 	andhi	r2,r17,32752
   4645c:	00dffc34 	movhi	r3,32752
   46460:	10c01c26 	beq	r2,r3,464d4 <_dtoa_r+0xf0>
   46464:	000d883a 	mov	r6,zero
   46468:	000f883a 	mov	r7,zero
   4646c:	9009883a 	mov	r4,r18
   46470:	980b883a 	mov	r5,r19
   46474:	004ccf40 	call	4ccf4 <__eqdf2>
   46478:	10002b1e 	bne	r2,zero,46528 <_dtoa_r+0x144>
   4647c:	d9c02317 	ldw	r7,140(sp)
   46480:	00800044 	movi	r2,1
   46484:	38800015 	stw	r2,0(r7)
   46488:	d8802517 	ldw	r2,148(sp)
   4648c:	10019e26 	beq	r2,zero,46b08 <_dtoa_r+0x724>
   46490:	d8c02517 	ldw	r3,148(sp)
   46494:	00800174 	movhi	r2,5
   46498:	10860c44 	addi	r2,r2,6193
   4649c:	18800015 	stw	r2,0(r3)
   464a0:	10bfffc4 	addi	r2,r2,-1
   464a4:	dfc02117 	ldw	ra,132(sp)
   464a8:	df002017 	ldw	fp,128(sp)
   464ac:	ddc01f17 	ldw	r23,124(sp)
   464b0:	dd801e17 	ldw	r22,120(sp)
   464b4:	dd401d17 	ldw	r21,116(sp)
   464b8:	dd001c17 	ldw	r20,112(sp)
   464bc:	dcc01b17 	ldw	r19,108(sp)
   464c0:	dc801a17 	ldw	r18,104(sp)
   464c4:	dc401917 	ldw	r17,100(sp)
   464c8:	dc001817 	ldw	r16,96(sp)
   464cc:	dec02204 	addi	sp,sp,136
   464d0:	f800283a 	ret
   464d4:	d8c02317 	ldw	r3,140(sp)
   464d8:	0089c3c4 	movi	r2,9999
   464dc:	18800015 	stw	r2,0(r3)
   464e0:	90017726 	beq	r18,zero,46ac0 <_dtoa_r+0x6dc>
   464e4:	00800174 	movhi	r2,5
   464e8:	10861804 	addi	r2,r2,6240
   464ec:	d9002517 	ldw	r4,148(sp)
   464f0:	203fec26 	beq	r4,zero,464a4 <__alt_data_end+0xfffe64a4>
   464f4:	10c000c7 	ldb	r3,3(r2)
   464f8:	1801781e 	bne	r3,zero,46adc <_dtoa_r+0x6f8>
   464fc:	10c000c4 	addi	r3,r2,3
   46500:	d9802517 	ldw	r6,148(sp)
   46504:	30c00015 	stw	r3,0(r6)
   46508:	003fe606 	br	464a4 <__alt_data_end+0xfffe64a4>
   4650c:	04e00034 	movhi	r19,32768
   46510:	9cffffc4 	addi	r19,r19,-1
   46514:	00800044 	movi	r2,1
   46518:	8ce6703a 	and	r19,r17,r19
   4651c:	80800015 	stw	r2,0(r16)
   46520:	9823883a 	mov	r17,r19
   46524:	003fcc06 	br	46458 <__alt_data_end+0xfffe6458>
   46528:	d8800204 	addi	r2,sp,8
   4652c:	d8800015 	stw	r2,0(sp)
   46530:	d9c00104 	addi	r7,sp,4
   46534:	900b883a 	mov	r5,r18
   46538:	980d883a 	mov	r6,r19
   4653c:	e009883a 	mov	r4,fp
   46540:	8820d53a 	srli	r16,r17,20
   46544:	00492480 	call	49248 <__d2b>
   46548:	d8800915 	stw	r2,36(sp)
   4654c:	8001651e 	bne	r16,zero,46ae4 <_dtoa_r+0x700>
   46550:	dd800217 	ldw	r22,8(sp)
   46554:	dc000117 	ldw	r16,4(sp)
   46558:	00800804 	movi	r2,32
   4655c:	b421883a 	add	r16,r22,r16
   46560:	80c10c84 	addi	r3,r16,1074
   46564:	10c2d10e 	bge	r2,r3,470ac <_dtoa_r+0xcc8>
   46568:	00801004 	movi	r2,64
   4656c:	81010484 	addi	r4,r16,1042
   46570:	10c7c83a 	sub	r3,r2,r3
   46574:	9108d83a 	srl	r4,r18,r4
   46578:	88e2983a 	sll	r17,r17,r3
   4657c:	2448b03a 	or	r4,r4,r17
   46580:	004105c0 	call	4105c <__floatunsidf>
   46584:	017f8434 	movhi	r5,65040
   46588:	01800044 	movi	r6,1
   4658c:	1009883a 	mov	r4,r2
   46590:	194b883a 	add	r5,r3,r5
   46594:	843fffc4 	addi	r16,r16,-1
   46598:	d9801115 	stw	r6,68(sp)
   4659c:	000d883a 	mov	r6,zero
   465a0:	01cffe34 	movhi	r7,16376
   465a4:	004d7b80 	call	4d7b8 <__subdf3>
   465a8:	0198dbf4 	movhi	r6,25455
   465ac:	01cff4f4 	movhi	r7,16339
   465b0:	3190d844 	addi	r6,r6,17249
   465b4:	39e1e9c4 	addi	r7,r7,-30809
   465b8:	1009883a 	mov	r4,r2
   465bc:	180b883a 	mov	r5,r3
   465c0:	004cf4c0 	call	4cf4c <__muldf3>
   465c4:	01a2d874 	movhi	r6,35681
   465c8:	01cff1f4 	movhi	r7,16327
   465cc:	31b22cc4 	addi	r6,r6,-14157
   465d0:	39e28a04 	addi	r7,r7,-30168
   465d4:	180b883a 	mov	r5,r3
   465d8:	1009883a 	mov	r4,r2
   465dc:	004c4480 	call	4c448 <__adddf3>
   465e0:	8009883a 	mov	r4,r16
   465e4:	1029883a 	mov	r20,r2
   465e8:	1823883a 	mov	r17,r3
   465ec:	004e1340 	call	4e134 <__floatsidf>
   465f0:	019427f4 	movhi	r6,20639
   465f4:	01cff4f4 	movhi	r7,16339
   465f8:	319e7ec4 	addi	r6,r6,31227
   465fc:	39d104c4 	addi	r7,r7,17427
   46600:	1009883a 	mov	r4,r2
   46604:	180b883a 	mov	r5,r3
   46608:	004cf4c0 	call	4cf4c <__muldf3>
   4660c:	100d883a 	mov	r6,r2
   46610:	180f883a 	mov	r7,r3
   46614:	a009883a 	mov	r4,r20
   46618:	880b883a 	mov	r5,r17
   4661c:	004c4480 	call	4c448 <__adddf3>
   46620:	1009883a 	mov	r4,r2
   46624:	180b883a 	mov	r5,r3
   46628:	1029883a 	mov	r20,r2
   4662c:	1823883a 	mov	r17,r3
   46630:	004e0b40 	call	4e0b4 <__fixdfsi>
   46634:	000d883a 	mov	r6,zero
   46638:	000f883a 	mov	r7,zero
   4663c:	a009883a 	mov	r4,r20
   46640:	880b883a 	mov	r5,r17
   46644:	d8800515 	stw	r2,20(sp)
   46648:	004ce580 	call	4ce58 <__ledf2>
   4664c:	10028716 	blt	r2,zero,4706c <_dtoa_r+0xc88>
   46650:	d8c00517 	ldw	r3,20(sp)
   46654:	00800584 	movi	r2,22
   46658:	10c27536 	bltu	r2,r3,47030 <_dtoa_r+0xc4c>
   4665c:	180490fa 	slli	r2,r3,3
   46660:	00c00174 	movhi	r3,5
   46664:	18c63304 	addi	r3,r3,6348
   46668:	1885883a 	add	r2,r3,r2
   4666c:	11000017 	ldw	r4,0(r2)
   46670:	11400117 	ldw	r5,4(r2)
   46674:	900d883a 	mov	r6,r18
   46678:	980f883a 	mov	r7,r19
   4667c:	004cd7c0 	call	4cd7c <__gedf2>
   46680:	00828d0e 	bge	zero,r2,470b8 <_dtoa_r+0xcd4>
   46684:	d9000517 	ldw	r4,20(sp)
   46688:	d8000e15 	stw	zero,56(sp)
   4668c:	213fffc4 	addi	r4,r4,-1
   46690:	d9000515 	stw	r4,20(sp)
   46694:	b42dc83a 	sub	r22,r22,r16
   46698:	b5bfffc4 	addi	r22,r22,-1
   4669c:	b0026f16 	blt	r22,zero,4705c <_dtoa_r+0xc78>
   466a0:	d8000815 	stw	zero,32(sp)
   466a4:	d9c00517 	ldw	r7,20(sp)
   466a8:	38026416 	blt	r7,zero,4703c <_dtoa_r+0xc58>
   466ac:	b1ed883a 	add	r22,r22,r7
   466b0:	d9c00d15 	stw	r7,52(sp)
   466b4:	d8000a15 	stw	zero,40(sp)
   466b8:	d9800317 	ldw	r6,12(sp)
   466bc:	00800244 	movi	r2,9
   466c0:	11811436 	bltu	r2,r6,46b14 <_dtoa_r+0x730>
   466c4:	00800144 	movi	r2,5
   466c8:	1184e10e 	bge	r2,r6,47a50 <_dtoa_r+0x166c>
   466cc:	31bfff04 	addi	r6,r6,-4
   466d0:	d9800315 	stw	r6,12(sp)
   466d4:	0023883a 	mov	r17,zero
   466d8:	d9800317 	ldw	r6,12(sp)
   466dc:	008000c4 	movi	r2,3
   466e0:	30836726 	beq	r6,r2,47480 <_dtoa_r+0x109c>
   466e4:	1183410e 	bge	r2,r6,473ec <_dtoa_r+0x1008>
   466e8:	d9c00317 	ldw	r7,12(sp)
   466ec:	00800104 	movi	r2,4
   466f0:	38827c26 	beq	r7,r2,470e4 <_dtoa_r+0xd00>
   466f4:	00800144 	movi	r2,5
   466f8:	3884c41e 	bne	r7,r2,47a0c <_dtoa_r+0x1628>
   466fc:	00800044 	movi	r2,1
   46700:	d8800b15 	stw	r2,44(sp)
   46704:	d8c00517 	ldw	r3,20(sp)
   46708:	d9002217 	ldw	r4,136(sp)
   4670c:	1907883a 	add	r3,r3,r4
   46710:	19800044 	addi	r6,r3,1
   46714:	d8c00c15 	stw	r3,48(sp)
   46718:	d9800615 	stw	r6,24(sp)
   4671c:	0183a40e 	bge	zero,r6,475b0 <_dtoa_r+0x11cc>
   46720:	d9800617 	ldw	r6,24(sp)
   46724:	3021883a 	mov	r16,r6
   46728:	e0001115 	stw	zero,68(fp)
   4672c:	008005c4 	movi	r2,23
   46730:	1184c92e 	bgeu	r2,r6,47a58 <_dtoa_r+0x1674>
   46734:	00c00044 	movi	r3,1
   46738:	00800104 	movi	r2,4
   4673c:	1085883a 	add	r2,r2,r2
   46740:	11000504 	addi	r4,r2,20
   46744:	180b883a 	mov	r5,r3
   46748:	18c00044 	addi	r3,r3,1
   4674c:	313ffb2e 	bgeu	r6,r4,4673c <__alt_data_end+0xfffe673c>
   46750:	e1401115 	stw	r5,68(fp)
   46754:	e009883a 	mov	r4,fp
   46758:	00484f80 	call	484f8 <_Balloc>
   4675c:	d8800715 	stw	r2,28(sp)
   46760:	e0801015 	stw	r2,64(fp)
   46764:	00800384 	movi	r2,14
   46768:	1400f736 	bltu	r2,r16,46b48 <_dtoa_r+0x764>
   4676c:	8800f626 	beq	r17,zero,46b48 <_dtoa_r+0x764>
   46770:	d9c00517 	ldw	r7,20(sp)
   46774:	01c39a0e 	bge	zero,r7,475e0 <_dtoa_r+0x11fc>
   46778:	388003cc 	andi	r2,r7,15
   4677c:	100490fa 	slli	r2,r2,3
   46780:	382bd13a 	srai	r21,r7,4
   46784:	00c00174 	movhi	r3,5
   46788:	18c63304 	addi	r3,r3,6348
   4678c:	1885883a 	add	r2,r3,r2
   46790:	a8c0040c 	andi	r3,r21,16
   46794:	12400017 	ldw	r9,0(r2)
   46798:	12000117 	ldw	r8,4(r2)
   4679c:	18037926 	beq	r3,zero,47584 <_dtoa_r+0x11a0>
   467a0:	00800174 	movhi	r2,5
   467a4:	10862904 	addi	r2,r2,6308
   467a8:	11800817 	ldw	r6,32(r2)
   467ac:	11c00917 	ldw	r7,36(r2)
   467b0:	9009883a 	mov	r4,r18
   467b4:	980b883a 	mov	r5,r19
   467b8:	da001715 	stw	r8,92(sp)
   467bc:	da401615 	stw	r9,88(sp)
   467c0:	004068c0 	call	4068c <__divdf3>
   467c4:	da001717 	ldw	r8,92(sp)
   467c8:	da401617 	ldw	r9,88(sp)
   467cc:	ad4003cc 	andi	r21,r21,15
   467d0:	040000c4 	movi	r16,3
   467d4:	1023883a 	mov	r17,r2
   467d8:	1829883a 	mov	r20,r3
   467dc:	a8001126 	beq	r21,zero,46824 <_dtoa_r+0x440>
   467e0:	05c00174 	movhi	r23,5
   467e4:	bdc62904 	addi	r23,r23,6308
   467e8:	4805883a 	mov	r2,r9
   467ec:	4007883a 	mov	r3,r8
   467f0:	a980004c 	andi	r6,r21,1
   467f4:	1009883a 	mov	r4,r2
   467f8:	a82bd07a 	srai	r21,r21,1
   467fc:	180b883a 	mov	r5,r3
   46800:	30000426 	beq	r6,zero,46814 <_dtoa_r+0x430>
   46804:	b9800017 	ldw	r6,0(r23)
   46808:	b9c00117 	ldw	r7,4(r23)
   4680c:	84000044 	addi	r16,r16,1
   46810:	004cf4c0 	call	4cf4c <__muldf3>
   46814:	bdc00204 	addi	r23,r23,8
   46818:	a83ff51e 	bne	r21,zero,467f0 <__alt_data_end+0xfffe67f0>
   4681c:	1013883a 	mov	r9,r2
   46820:	1811883a 	mov	r8,r3
   46824:	480d883a 	mov	r6,r9
   46828:	400f883a 	mov	r7,r8
   4682c:	8809883a 	mov	r4,r17
   46830:	a00b883a 	mov	r5,r20
   46834:	004068c0 	call	4068c <__divdf3>
   46838:	d8800f15 	stw	r2,60(sp)
   4683c:	d8c01015 	stw	r3,64(sp)
   46840:	d8c00e17 	ldw	r3,56(sp)
   46844:	18000626 	beq	r3,zero,46860 <_dtoa_r+0x47c>
   46848:	d9000f17 	ldw	r4,60(sp)
   4684c:	d9401017 	ldw	r5,64(sp)
   46850:	000d883a 	mov	r6,zero
   46854:	01cffc34 	movhi	r7,16368
   46858:	004ce580 	call	4ce58 <__ledf2>
   4685c:	10040b16 	blt	r2,zero,4788c <_dtoa_r+0x14a8>
   46860:	8009883a 	mov	r4,r16
   46864:	004e1340 	call	4e134 <__floatsidf>
   46868:	d9800f17 	ldw	r6,60(sp)
   4686c:	d9c01017 	ldw	r7,64(sp)
   46870:	1009883a 	mov	r4,r2
   46874:	180b883a 	mov	r5,r3
   46878:	004cf4c0 	call	4cf4c <__muldf3>
   4687c:	000d883a 	mov	r6,zero
   46880:	01d00734 	movhi	r7,16412
   46884:	1009883a 	mov	r4,r2
   46888:	180b883a 	mov	r5,r3
   4688c:	004c4480 	call	4c448 <__adddf3>
   46890:	1021883a 	mov	r16,r2
   46894:	d8800617 	ldw	r2,24(sp)
   46898:	047f3034 	movhi	r17,64704
   4689c:	1c63883a 	add	r17,r3,r17
   468a0:	10031826 	beq	r2,zero,47504 <_dtoa_r+0x1120>
   468a4:	d8c00517 	ldw	r3,20(sp)
   468a8:	db000617 	ldw	r12,24(sp)
   468ac:	d8c01315 	stw	r3,76(sp)
   468b0:	d9000b17 	ldw	r4,44(sp)
   468b4:	20038f26 	beq	r4,zero,476f4 <_dtoa_r+0x1310>
   468b8:	60bfffc4 	addi	r2,r12,-1
   468bc:	100490fa 	slli	r2,r2,3
   468c0:	00c00174 	movhi	r3,5
   468c4:	18c63304 	addi	r3,r3,6348
   468c8:	1885883a 	add	r2,r3,r2
   468cc:	11800017 	ldw	r6,0(r2)
   468d0:	11c00117 	ldw	r7,4(r2)
   468d4:	d8800717 	ldw	r2,28(sp)
   468d8:	0009883a 	mov	r4,zero
   468dc:	014ff834 	movhi	r5,16352
   468e0:	db001615 	stw	r12,88(sp)
   468e4:	15c00044 	addi	r23,r2,1
   468e8:	004068c0 	call	4068c <__divdf3>
   468ec:	800d883a 	mov	r6,r16
   468f0:	880f883a 	mov	r7,r17
   468f4:	1009883a 	mov	r4,r2
   468f8:	180b883a 	mov	r5,r3
   468fc:	004d7b80 	call	4d7b8 <__subdf3>
   46900:	d9401017 	ldw	r5,64(sp)
   46904:	d9000f17 	ldw	r4,60(sp)
   46908:	102b883a 	mov	r21,r2
   4690c:	d8c01215 	stw	r3,72(sp)
   46910:	004e0b40 	call	4e0b4 <__fixdfsi>
   46914:	1009883a 	mov	r4,r2
   46918:	1029883a 	mov	r20,r2
   4691c:	004e1340 	call	4e134 <__floatsidf>
   46920:	d9000f17 	ldw	r4,60(sp)
   46924:	d9401017 	ldw	r5,64(sp)
   46928:	100d883a 	mov	r6,r2
   4692c:	180f883a 	mov	r7,r3
   46930:	004d7b80 	call	4d7b8 <__subdf3>
   46934:	1823883a 	mov	r17,r3
   46938:	d8c00717 	ldw	r3,28(sp)
   4693c:	d9401217 	ldw	r5,72(sp)
   46940:	a2000c04 	addi	r8,r20,48
   46944:	1021883a 	mov	r16,r2
   46948:	1a000005 	stb	r8,0(r3)
   4694c:	800d883a 	mov	r6,r16
   46950:	880f883a 	mov	r7,r17
   46954:	a809883a 	mov	r4,r21
   46958:	4029883a 	mov	r20,r8
   4695c:	004cd7c0 	call	4cd7c <__gedf2>
   46960:	00841d16 	blt	zero,r2,479d8 <_dtoa_r+0x15f4>
   46964:	800d883a 	mov	r6,r16
   46968:	880f883a 	mov	r7,r17
   4696c:	0009883a 	mov	r4,zero
   46970:	014ffc34 	movhi	r5,16368
   46974:	004d7b80 	call	4d7b8 <__subdf3>
   46978:	d9401217 	ldw	r5,72(sp)
   4697c:	100d883a 	mov	r6,r2
   46980:	180f883a 	mov	r7,r3
   46984:	a809883a 	mov	r4,r21
   46988:	004cd7c0 	call	4cd7c <__gedf2>
   4698c:	db001617 	ldw	r12,88(sp)
   46990:	00840e16 	blt	zero,r2,479cc <_dtoa_r+0x15e8>
   46994:	00800044 	movi	r2,1
   46998:	13006b0e 	bge	r2,r12,46b48 <_dtoa_r+0x764>
   4699c:	d9000717 	ldw	r4,28(sp)
   469a0:	dd800f15 	stw	r22,60(sp)
   469a4:	dcc01015 	stw	r19,64(sp)
   469a8:	2319883a 	add	r12,r4,r12
   469ac:	dcc01217 	ldw	r19,72(sp)
   469b0:	602d883a 	mov	r22,r12
   469b4:	dc801215 	stw	r18,72(sp)
   469b8:	b825883a 	mov	r18,r23
   469bc:	00000906 	br	469e4 <_dtoa_r+0x600>
   469c0:	004d7b80 	call	4d7b8 <__subdf3>
   469c4:	a80d883a 	mov	r6,r21
   469c8:	980f883a 	mov	r7,r19
   469cc:	1009883a 	mov	r4,r2
   469d0:	180b883a 	mov	r5,r3
   469d4:	004ce580 	call	4ce58 <__ledf2>
   469d8:	1003e816 	blt	r2,zero,4797c <_dtoa_r+0x1598>
   469dc:	b825883a 	mov	r18,r23
   469e0:	bd83e926 	beq	r23,r22,47988 <_dtoa_r+0x15a4>
   469e4:	a809883a 	mov	r4,r21
   469e8:	980b883a 	mov	r5,r19
   469ec:	000d883a 	mov	r6,zero
   469f0:	01d00934 	movhi	r7,16420
   469f4:	004cf4c0 	call	4cf4c <__muldf3>
   469f8:	000d883a 	mov	r6,zero
   469fc:	01d00934 	movhi	r7,16420
   46a00:	8009883a 	mov	r4,r16
   46a04:	880b883a 	mov	r5,r17
   46a08:	102b883a 	mov	r21,r2
   46a0c:	1827883a 	mov	r19,r3
   46a10:	004cf4c0 	call	4cf4c <__muldf3>
   46a14:	180b883a 	mov	r5,r3
   46a18:	1009883a 	mov	r4,r2
   46a1c:	1821883a 	mov	r16,r3
   46a20:	1023883a 	mov	r17,r2
   46a24:	004e0b40 	call	4e0b4 <__fixdfsi>
   46a28:	1009883a 	mov	r4,r2
   46a2c:	1029883a 	mov	r20,r2
   46a30:	004e1340 	call	4e134 <__floatsidf>
   46a34:	8809883a 	mov	r4,r17
   46a38:	800b883a 	mov	r5,r16
   46a3c:	100d883a 	mov	r6,r2
   46a40:	180f883a 	mov	r7,r3
   46a44:	004d7b80 	call	4d7b8 <__subdf3>
   46a48:	a5000c04 	addi	r20,r20,48
   46a4c:	a80d883a 	mov	r6,r21
   46a50:	980f883a 	mov	r7,r19
   46a54:	1009883a 	mov	r4,r2
   46a58:	180b883a 	mov	r5,r3
   46a5c:	95000005 	stb	r20,0(r18)
   46a60:	1021883a 	mov	r16,r2
   46a64:	1823883a 	mov	r17,r3
   46a68:	004ce580 	call	4ce58 <__ledf2>
   46a6c:	bdc00044 	addi	r23,r23,1
   46a70:	800d883a 	mov	r6,r16
   46a74:	880f883a 	mov	r7,r17
   46a78:	0009883a 	mov	r4,zero
   46a7c:	014ffc34 	movhi	r5,16368
   46a80:	103fcf0e 	bge	r2,zero,469c0 <__alt_data_end+0xfffe69c0>
   46a84:	d8c01317 	ldw	r3,76(sp)
   46a88:	d8c00515 	stw	r3,20(sp)
   46a8c:	d9400917 	ldw	r5,36(sp)
   46a90:	e009883a 	mov	r4,fp
   46a94:	00485a00 	call	485a0 <_Bfree>
   46a98:	d9000517 	ldw	r4,20(sp)
   46a9c:	d9802317 	ldw	r6,140(sp)
   46aa0:	d9c02517 	ldw	r7,148(sp)
   46aa4:	b8000005 	stb	zero,0(r23)
   46aa8:	20800044 	addi	r2,r4,1
   46aac:	30800015 	stw	r2,0(r6)
   46ab0:	3802aa26 	beq	r7,zero,4755c <_dtoa_r+0x1178>
   46ab4:	3dc00015 	stw	r23,0(r7)
   46ab8:	d8800717 	ldw	r2,28(sp)
   46abc:	003e7906 	br	464a4 <__alt_data_end+0xfffe64a4>
   46ac0:	00800434 	movhi	r2,16
   46ac4:	10bfffc4 	addi	r2,r2,-1
   46ac8:	88a2703a 	and	r17,r17,r2
   46acc:	883e851e 	bne	r17,zero,464e4 <__alt_data_end+0xfffe64e4>
   46ad0:	00800174 	movhi	r2,5
   46ad4:	10861504 	addi	r2,r2,6228
   46ad8:	003e8406 	br	464ec <__alt_data_end+0xfffe64ec>
   46adc:	10c00204 	addi	r3,r2,8
   46ae0:	003e8706 	br	46500 <__alt_data_end+0xfffe6500>
   46ae4:	01400434 	movhi	r5,16
   46ae8:	297fffc4 	addi	r5,r5,-1
   46aec:	994a703a 	and	r5,r19,r5
   46af0:	9009883a 	mov	r4,r18
   46af4:	843f0044 	addi	r16,r16,-1023
   46af8:	294ffc34 	orhi	r5,r5,16368
   46afc:	dd800217 	ldw	r22,8(sp)
   46b00:	d8001115 	stw	zero,68(sp)
   46b04:	003ea506 	br	4659c <__alt_data_end+0xfffe659c>
   46b08:	00800174 	movhi	r2,5
   46b0c:	10860c04 	addi	r2,r2,6192
   46b10:	003e6406 	br	464a4 <__alt_data_end+0xfffe64a4>
   46b14:	e0001115 	stw	zero,68(fp)
   46b18:	000b883a 	mov	r5,zero
   46b1c:	e009883a 	mov	r4,fp
   46b20:	00484f80 	call	484f8 <_Balloc>
   46b24:	01bfffc4 	movi	r6,-1
   46b28:	01c00044 	movi	r7,1
   46b2c:	d8800715 	stw	r2,28(sp)
   46b30:	d9800c15 	stw	r6,48(sp)
   46b34:	e0801015 	stw	r2,64(fp)
   46b38:	d8000315 	stw	zero,12(sp)
   46b3c:	d9c00b15 	stw	r7,44(sp)
   46b40:	d9800615 	stw	r6,24(sp)
   46b44:	d8002215 	stw	zero,136(sp)
   46b48:	d8800117 	ldw	r2,4(sp)
   46b4c:	10008916 	blt	r2,zero,46d74 <_dtoa_r+0x990>
   46b50:	d9000517 	ldw	r4,20(sp)
   46b54:	00c00384 	movi	r3,14
   46b58:	19008616 	blt	r3,r4,46d74 <_dtoa_r+0x990>
   46b5c:	200490fa 	slli	r2,r4,3
   46b60:	00c00174 	movhi	r3,5
   46b64:	d9802217 	ldw	r6,136(sp)
   46b68:	18c63304 	addi	r3,r3,6348
   46b6c:	1885883a 	add	r2,r3,r2
   46b70:	14000017 	ldw	r16,0(r2)
   46b74:	14400117 	ldw	r17,4(r2)
   46b78:	30016316 	blt	r6,zero,47108 <_dtoa_r+0xd24>
   46b7c:	800d883a 	mov	r6,r16
   46b80:	880f883a 	mov	r7,r17
   46b84:	9009883a 	mov	r4,r18
   46b88:	980b883a 	mov	r5,r19
   46b8c:	004068c0 	call	4068c <__divdf3>
   46b90:	180b883a 	mov	r5,r3
   46b94:	1009883a 	mov	r4,r2
   46b98:	004e0b40 	call	4e0b4 <__fixdfsi>
   46b9c:	1009883a 	mov	r4,r2
   46ba0:	102b883a 	mov	r21,r2
   46ba4:	004e1340 	call	4e134 <__floatsidf>
   46ba8:	800d883a 	mov	r6,r16
   46bac:	880f883a 	mov	r7,r17
   46bb0:	1009883a 	mov	r4,r2
   46bb4:	180b883a 	mov	r5,r3
   46bb8:	004cf4c0 	call	4cf4c <__muldf3>
   46bbc:	100d883a 	mov	r6,r2
   46bc0:	180f883a 	mov	r7,r3
   46bc4:	9009883a 	mov	r4,r18
   46bc8:	980b883a 	mov	r5,r19
   46bcc:	004d7b80 	call	4d7b8 <__subdf3>
   46bd0:	d9c00717 	ldw	r7,28(sp)
   46bd4:	1009883a 	mov	r4,r2
   46bd8:	a8800c04 	addi	r2,r21,48
   46bdc:	38800005 	stb	r2,0(r7)
   46be0:	3dc00044 	addi	r23,r7,1
   46be4:	d9c00617 	ldw	r7,24(sp)
   46be8:	01800044 	movi	r6,1
   46bec:	180b883a 	mov	r5,r3
   46bf0:	2005883a 	mov	r2,r4
   46bf4:	39803826 	beq	r7,r6,46cd8 <_dtoa_r+0x8f4>
   46bf8:	000d883a 	mov	r6,zero
   46bfc:	01d00934 	movhi	r7,16420
   46c00:	004cf4c0 	call	4cf4c <__muldf3>
   46c04:	000d883a 	mov	r6,zero
   46c08:	000f883a 	mov	r7,zero
   46c0c:	1009883a 	mov	r4,r2
   46c10:	180b883a 	mov	r5,r3
   46c14:	1025883a 	mov	r18,r2
   46c18:	1827883a 	mov	r19,r3
   46c1c:	004ccf40 	call	4ccf4 <__eqdf2>
   46c20:	103f9a26 	beq	r2,zero,46a8c <__alt_data_end+0xfffe6a8c>
   46c24:	d9c00617 	ldw	r7,24(sp)
   46c28:	d8c00717 	ldw	r3,28(sp)
   46c2c:	b829883a 	mov	r20,r23
   46c30:	38bfffc4 	addi	r2,r7,-1
   46c34:	18ad883a 	add	r22,r3,r2
   46c38:	00000a06 	br	46c64 <_dtoa_r+0x880>
   46c3c:	004cf4c0 	call	4cf4c <__muldf3>
   46c40:	000d883a 	mov	r6,zero
   46c44:	000f883a 	mov	r7,zero
   46c48:	1009883a 	mov	r4,r2
   46c4c:	180b883a 	mov	r5,r3
   46c50:	1025883a 	mov	r18,r2
   46c54:	1827883a 	mov	r19,r3
   46c58:	b829883a 	mov	r20,r23
   46c5c:	004ccf40 	call	4ccf4 <__eqdf2>
   46c60:	103f8a26 	beq	r2,zero,46a8c <__alt_data_end+0xfffe6a8c>
   46c64:	800d883a 	mov	r6,r16
   46c68:	880f883a 	mov	r7,r17
   46c6c:	9009883a 	mov	r4,r18
   46c70:	980b883a 	mov	r5,r19
   46c74:	004068c0 	call	4068c <__divdf3>
   46c78:	180b883a 	mov	r5,r3
   46c7c:	1009883a 	mov	r4,r2
   46c80:	004e0b40 	call	4e0b4 <__fixdfsi>
   46c84:	1009883a 	mov	r4,r2
   46c88:	102b883a 	mov	r21,r2
   46c8c:	004e1340 	call	4e134 <__floatsidf>
   46c90:	800d883a 	mov	r6,r16
   46c94:	880f883a 	mov	r7,r17
   46c98:	1009883a 	mov	r4,r2
   46c9c:	180b883a 	mov	r5,r3
   46ca0:	004cf4c0 	call	4cf4c <__muldf3>
   46ca4:	100d883a 	mov	r6,r2
   46ca8:	180f883a 	mov	r7,r3
   46cac:	9009883a 	mov	r4,r18
   46cb0:	980b883a 	mov	r5,r19
   46cb4:	004d7b80 	call	4d7b8 <__subdf3>
   46cb8:	aa000c04 	addi	r8,r21,48
   46cbc:	a2000005 	stb	r8,0(r20)
   46cc0:	000d883a 	mov	r6,zero
   46cc4:	01d00934 	movhi	r7,16420
   46cc8:	1009883a 	mov	r4,r2
   46ccc:	180b883a 	mov	r5,r3
   46cd0:	a5c00044 	addi	r23,r20,1
   46cd4:	b53fd91e 	bne	r22,r20,46c3c <__alt_data_end+0xfffe6c3c>
   46cd8:	100d883a 	mov	r6,r2
   46cdc:	180f883a 	mov	r7,r3
   46ce0:	1009883a 	mov	r4,r2
   46ce4:	180b883a 	mov	r5,r3
   46ce8:	004c4480 	call	4c448 <__adddf3>
   46cec:	100d883a 	mov	r6,r2
   46cf0:	180f883a 	mov	r7,r3
   46cf4:	8009883a 	mov	r4,r16
   46cf8:	880b883a 	mov	r5,r17
   46cfc:	1027883a 	mov	r19,r2
   46d00:	1825883a 	mov	r18,r3
   46d04:	004ce580 	call	4ce58 <__ledf2>
   46d08:	10000816 	blt	r2,zero,46d2c <_dtoa_r+0x948>
   46d0c:	980d883a 	mov	r6,r19
   46d10:	900f883a 	mov	r7,r18
   46d14:	8009883a 	mov	r4,r16
   46d18:	880b883a 	mov	r5,r17
   46d1c:	004ccf40 	call	4ccf4 <__eqdf2>
   46d20:	103f5a1e 	bne	r2,zero,46a8c <__alt_data_end+0xfffe6a8c>
   46d24:	ad40004c 	andi	r21,r21,1
   46d28:	a83f5826 	beq	r21,zero,46a8c <__alt_data_end+0xfffe6a8c>
   46d2c:	bd3fffc3 	ldbu	r20,-1(r23)
   46d30:	b8bfffc4 	addi	r2,r23,-1
   46d34:	1007883a 	mov	r3,r2
   46d38:	01400e44 	movi	r5,57
   46d3c:	d9800717 	ldw	r6,28(sp)
   46d40:	00000506 	br	46d58 <_dtoa_r+0x974>
   46d44:	18ffffc4 	addi	r3,r3,-1
   46d48:	11824726 	beq	r2,r6,47668 <_dtoa_r+0x1284>
   46d4c:	1d000003 	ldbu	r20,0(r3)
   46d50:	102f883a 	mov	r23,r2
   46d54:	10bfffc4 	addi	r2,r2,-1
   46d58:	a1003fcc 	andi	r4,r20,255
   46d5c:	2100201c 	xori	r4,r4,128
   46d60:	213fe004 	addi	r4,r4,-128
   46d64:	217ff726 	beq	r4,r5,46d44 <__alt_data_end+0xfffe6d44>
   46d68:	a2000044 	addi	r8,r20,1
   46d6c:	12000005 	stb	r8,0(r2)
   46d70:	003f4606 	br	46a8c <__alt_data_end+0xfffe6a8c>
   46d74:	d9000b17 	ldw	r4,44(sp)
   46d78:	2000c826 	beq	r4,zero,4709c <_dtoa_r+0xcb8>
   46d7c:	d9800317 	ldw	r6,12(sp)
   46d80:	00c00044 	movi	r3,1
   46d84:	1980f90e 	bge	r3,r6,4716c <_dtoa_r+0xd88>
   46d88:	d8800617 	ldw	r2,24(sp)
   46d8c:	d8c00a17 	ldw	r3,40(sp)
   46d90:	157fffc4 	addi	r21,r2,-1
   46d94:	1d41f316 	blt	r3,r21,47564 <_dtoa_r+0x1180>
   46d98:	1d6bc83a 	sub	r21,r3,r21
   46d9c:	d9c00617 	ldw	r7,24(sp)
   46da0:	3802aa16 	blt	r7,zero,4784c <_dtoa_r+0x1468>
   46da4:	dd000817 	ldw	r20,32(sp)
   46da8:	d8800617 	ldw	r2,24(sp)
   46dac:	d8c00817 	ldw	r3,32(sp)
   46db0:	01400044 	movi	r5,1
   46db4:	e009883a 	mov	r4,fp
   46db8:	1887883a 	add	r3,r3,r2
   46dbc:	d8c00815 	stw	r3,32(sp)
   46dc0:	b0ad883a 	add	r22,r22,r2
   46dc4:	004892c0 	call	4892c <__i2b>
   46dc8:	1023883a 	mov	r17,r2
   46dcc:	a0000826 	beq	r20,zero,46df0 <_dtoa_r+0xa0c>
   46dd0:	0580070e 	bge	zero,r22,46df0 <_dtoa_r+0xa0c>
   46dd4:	a005883a 	mov	r2,r20
   46dd8:	b500b916 	blt	r22,r20,470c0 <_dtoa_r+0xcdc>
   46ddc:	d9000817 	ldw	r4,32(sp)
   46de0:	a0a9c83a 	sub	r20,r20,r2
   46de4:	b0adc83a 	sub	r22,r22,r2
   46de8:	2089c83a 	sub	r4,r4,r2
   46dec:	d9000815 	stw	r4,32(sp)
   46df0:	d9800a17 	ldw	r6,40(sp)
   46df4:	0181810e 	bge	zero,r6,473fc <_dtoa_r+0x1018>
   46df8:	d9c00b17 	ldw	r7,44(sp)
   46dfc:	3800b326 	beq	r7,zero,470cc <_dtoa_r+0xce8>
   46e00:	a800b226 	beq	r21,zero,470cc <_dtoa_r+0xce8>
   46e04:	880b883a 	mov	r5,r17
   46e08:	a80d883a 	mov	r6,r21
   46e0c:	e009883a 	mov	r4,fp
   46e10:	0048bf40 	call	48bf4 <__pow5mult>
   46e14:	d9800917 	ldw	r6,36(sp)
   46e18:	100b883a 	mov	r5,r2
   46e1c:	e009883a 	mov	r4,fp
   46e20:	1023883a 	mov	r17,r2
   46e24:	00489680 	call	48968 <__multiply>
   46e28:	1021883a 	mov	r16,r2
   46e2c:	d8800a17 	ldw	r2,40(sp)
   46e30:	d9400917 	ldw	r5,36(sp)
   46e34:	e009883a 	mov	r4,fp
   46e38:	1545c83a 	sub	r2,r2,r21
   46e3c:	d8800a15 	stw	r2,40(sp)
   46e40:	00485a00 	call	485a0 <_Bfree>
   46e44:	d8c00a17 	ldw	r3,40(sp)
   46e48:	18009f1e 	bne	r3,zero,470c8 <_dtoa_r+0xce4>
   46e4c:	05c00044 	movi	r23,1
   46e50:	e009883a 	mov	r4,fp
   46e54:	b80b883a 	mov	r5,r23
   46e58:	004892c0 	call	4892c <__i2b>
   46e5c:	d9000d17 	ldw	r4,52(sp)
   46e60:	102b883a 	mov	r21,r2
   46e64:	2000ce26 	beq	r4,zero,471a0 <_dtoa_r+0xdbc>
   46e68:	200d883a 	mov	r6,r4
   46e6c:	100b883a 	mov	r5,r2
   46e70:	e009883a 	mov	r4,fp
   46e74:	0048bf40 	call	48bf4 <__pow5mult>
   46e78:	d9800317 	ldw	r6,12(sp)
   46e7c:	102b883a 	mov	r21,r2
   46e80:	b981810e 	bge	r23,r6,47488 <_dtoa_r+0x10a4>
   46e84:	0027883a 	mov	r19,zero
   46e88:	a8800417 	ldw	r2,16(r21)
   46e8c:	05c00804 	movi	r23,32
   46e90:	10800104 	addi	r2,r2,4
   46e94:	1085883a 	add	r2,r2,r2
   46e98:	1085883a 	add	r2,r2,r2
   46e9c:	a885883a 	add	r2,r21,r2
   46ea0:	11000017 	ldw	r4,0(r2)
   46ea4:	00488140 	call	48814 <__hi0bits>
   46ea8:	b885c83a 	sub	r2,r23,r2
   46eac:	1585883a 	add	r2,r2,r22
   46eb0:	108007cc 	andi	r2,r2,31
   46eb4:	1000b326 	beq	r2,zero,47184 <_dtoa_r+0xda0>
   46eb8:	00c00804 	movi	r3,32
   46ebc:	1887c83a 	sub	r3,r3,r2
   46ec0:	01000104 	movi	r4,4
   46ec4:	20c2cd0e 	bge	r4,r3,479fc <_dtoa_r+0x1618>
   46ec8:	00c00704 	movi	r3,28
   46ecc:	1885c83a 	sub	r2,r3,r2
   46ed0:	d8c00817 	ldw	r3,32(sp)
   46ed4:	a0a9883a 	add	r20,r20,r2
   46ed8:	b0ad883a 	add	r22,r22,r2
   46edc:	1887883a 	add	r3,r3,r2
   46ee0:	d8c00815 	stw	r3,32(sp)
   46ee4:	d9800817 	ldw	r6,32(sp)
   46ee8:	0180040e 	bge	zero,r6,46efc <_dtoa_r+0xb18>
   46eec:	800b883a 	mov	r5,r16
   46ef0:	e009883a 	mov	r4,fp
   46ef4:	0048d340 	call	48d34 <__lshift>
   46ef8:	1021883a 	mov	r16,r2
   46efc:	0580050e 	bge	zero,r22,46f14 <_dtoa_r+0xb30>
   46f00:	a80b883a 	mov	r5,r21
   46f04:	b00d883a 	mov	r6,r22
   46f08:	e009883a 	mov	r4,fp
   46f0c:	0048d340 	call	48d34 <__lshift>
   46f10:	102b883a 	mov	r21,r2
   46f14:	d9c00e17 	ldw	r7,56(sp)
   46f18:	3801211e 	bne	r7,zero,473a0 <_dtoa_r+0xfbc>
   46f1c:	d9800617 	ldw	r6,24(sp)
   46f20:	0181380e 	bge	zero,r6,47404 <_dtoa_r+0x1020>
   46f24:	d8c00b17 	ldw	r3,44(sp)
   46f28:	1800ab1e 	bne	r3,zero,471d8 <_dtoa_r+0xdf4>
   46f2c:	dc800717 	ldw	r18,28(sp)
   46f30:	dcc00617 	ldw	r19,24(sp)
   46f34:	9029883a 	mov	r20,r18
   46f38:	00000206 	br	46f44 <_dtoa_r+0xb60>
   46f3c:	00485c80 	call	485c8 <__multadd>
   46f40:	1021883a 	mov	r16,r2
   46f44:	a80b883a 	mov	r5,r21
   46f48:	8009883a 	mov	r4,r16
   46f4c:	00461bc0 	call	461bc <quorem>
   46f50:	10800c04 	addi	r2,r2,48
   46f54:	90800005 	stb	r2,0(r18)
   46f58:	94800044 	addi	r18,r18,1
   46f5c:	9507c83a 	sub	r3,r18,r20
   46f60:	000f883a 	mov	r7,zero
   46f64:	01800284 	movi	r6,10
   46f68:	800b883a 	mov	r5,r16
   46f6c:	e009883a 	mov	r4,fp
   46f70:	1cfff216 	blt	r3,r19,46f3c <__alt_data_end+0xfffe6f3c>
   46f74:	1011883a 	mov	r8,r2
   46f78:	d8800617 	ldw	r2,24(sp)
   46f7c:	0082370e 	bge	zero,r2,4785c <_dtoa_r+0x1478>
   46f80:	d9000717 	ldw	r4,28(sp)
   46f84:	0025883a 	mov	r18,zero
   46f88:	20af883a 	add	r23,r4,r2
   46f8c:	01800044 	movi	r6,1
   46f90:	800b883a 	mov	r5,r16
   46f94:	e009883a 	mov	r4,fp
   46f98:	da001715 	stw	r8,92(sp)
   46f9c:	0048d340 	call	48d34 <__lshift>
   46fa0:	a80b883a 	mov	r5,r21
   46fa4:	1009883a 	mov	r4,r2
   46fa8:	d8800915 	stw	r2,36(sp)
   46fac:	0048e7c0 	call	48e7c <__mcmp>
   46fb0:	da001717 	ldw	r8,92(sp)
   46fb4:	0081800e 	bge	zero,r2,475b8 <_dtoa_r+0x11d4>
   46fb8:	b93fffc3 	ldbu	r4,-1(r23)
   46fbc:	b8bfffc4 	addi	r2,r23,-1
   46fc0:	1007883a 	mov	r3,r2
   46fc4:	01800e44 	movi	r6,57
   46fc8:	d9c00717 	ldw	r7,28(sp)
   46fcc:	00000506 	br	46fe4 <_dtoa_r+0xc00>
   46fd0:	18ffffc4 	addi	r3,r3,-1
   46fd4:	11c12326 	beq	r2,r7,47464 <_dtoa_r+0x1080>
   46fd8:	19000003 	ldbu	r4,0(r3)
   46fdc:	102f883a 	mov	r23,r2
   46fe0:	10bfffc4 	addi	r2,r2,-1
   46fe4:	21403fcc 	andi	r5,r4,255
   46fe8:	2940201c 	xori	r5,r5,128
   46fec:	297fe004 	addi	r5,r5,-128
   46ff0:	29bff726 	beq	r5,r6,46fd0 <__alt_data_end+0xfffe6fd0>
   46ff4:	21000044 	addi	r4,r4,1
   46ff8:	11000005 	stb	r4,0(r2)
   46ffc:	a80b883a 	mov	r5,r21
   47000:	e009883a 	mov	r4,fp
   47004:	00485a00 	call	485a0 <_Bfree>
   47008:	883ea026 	beq	r17,zero,46a8c <__alt_data_end+0xfffe6a8c>
   4700c:	90000426 	beq	r18,zero,47020 <_dtoa_r+0xc3c>
   47010:	94400326 	beq	r18,r17,47020 <_dtoa_r+0xc3c>
   47014:	900b883a 	mov	r5,r18
   47018:	e009883a 	mov	r4,fp
   4701c:	00485a00 	call	485a0 <_Bfree>
   47020:	880b883a 	mov	r5,r17
   47024:	e009883a 	mov	r4,fp
   47028:	00485a00 	call	485a0 <_Bfree>
   4702c:	003e9706 	br	46a8c <__alt_data_end+0xfffe6a8c>
   47030:	01800044 	movi	r6,1
   47034:	d9800e15 	stw	r6,56(sp)
   47038:	003d9606 	br	46694 <__alt_data_end+0xfffe6694>
   4703c:	d8800817 	ldw	r2,32(sp)
   47040:	d8c00517 	ldw	r3,20(sp)
   47044:	d8000d15 	stw	zero,52(sp)
   47048:	10c5c83a 	sub	r2,r2,r3
   4704c:	00c9c83a 	sub	r4,zero,r3
   47050:	d8800815 	stw	r2,32(sp)
   47054:	d9000a15 	stw	r4,40(sp)
   47058:	003d9706 	br	466b8 <__alt_data_end+0xfffe66b8>
   4705c:	05adc83a 	sub	r22,zero,r22
   47060:	dd800815 	stw	r22,32(sp)
   47064:	002d883a 	mov	r22,zero
   47068:	003d8e06 	br	466a4 <__alt_data_end+0xfffe66a4>
   4706c:	d9000517 	ldw	r4,20(sp)
   47070:	004e1340 	call	4e134 <__floatsidf>
   47074:	100d883a 	mov	r6,r2
   47078:	180f883a 	mov	r7,r3
   4707c:	a009883a 	mov	r4,r20
   47080:	880b883a 	mov	r5,r17
   47084:	004ccf40 	call	4ccf4 <__eqdf2>
   47088:	103d7126 	beq	r2,zero,46650 <__alt_data_end+0xfffe6650>
   4708c:	d9c00517 	ldw	r7,20(sp)
   47090:	39ffffc4 	addi	r7,r7,-1
   47094:	d9c00515 	stw	r7,20(sp)
   47098:	003d6d06 	br	46650 <__alt_data_end+0xfffe6650>
   4709c:	dd400a17 	ldw	r21,40(sp)
   470a0:	dd000817 	ldw	r20,32(sp)
   470a4:	0023883a 	mov	r17,zero
   470a8:	003f4806 	br	46dcc <__alt_data_end+0xfffe6dcc>
   470ac:	10e3c83a 	sub	r17,r2,r3
   470b0:	9448983a 	sll	r4,r18,r17
   470b4:	003d3206 	br	46580 <__alt_data_end+0xfffe6580>
   470b8:	d8000e15 	stw	zero,56(sp)
   470bc:	003d7506 	br	46694 <__alt_data_end+0xfffe6694>
   470c0:	b005883a 	mov	r2,r22
   470c4:	003f4506 	br	46ddc <__alt_data_end+0xfffe6ddc>
   470c8:	dc000915 	stw	r16,36(sp)
   470cc:	d9800a17 	ldw	r6,40(sp)
   470d0:	d9400917 	ldw	r5,36(sp)
   470d4:	e009883a 	mov	r4,fp
   470d8:	0048bf40 	call	48bf4 <__pow5mult>
   470dc:	1021883a 	mov	r16,r2
   470e0:	003f5a06 	br	46e4c <__alt_data_end+0xfffe6e4c>
   470e4:	01c00044 	movi	r7,1
   470e8:	d9c00b15 	stw	r7,44(sp)
   470ec:	d8802217 	ldw	r2,136(sp)
   470f0:	0081280e 	bge	zero,r2,47594 <_dtoa_r+0x11b0>
   470f4:	100d883a 	mov	r6,r2
   470f8:	1021883a 	mov	r16,r2
   470fc:	d8800c15 	stw	r2,48(sp)
   47100:	d8800615 	stw	r2,24(sp)
   47104:	003d8806 	br	46728 <__alt_data_end+0xfffe6728>
   47108:	d8800617 	ldw	r2,24(sp)
   4710c:	00be9b16 	blt	zero,r2,46b7c <__alt_data_end+0xfffe6b7c>
   47110:	10010f1e 	bne	r2,zero,47550 <_dtoa_r+0x116c>
   47114:	880b883a 	mov	r5,r17
   47118:	000d883a 	mov	r6,zero
   4711c:	01d00534 	movhi	r7,16404
   47120:	8009883a 	mov	r4,r16
   47124:	004cf4c0 	call	4cf4c <__muldf3>
   47128:	900d883a 	mov	r6,r18
   4712c:	980f883a 	mov	r7,r19
   47130:	1009883a 	mov	r4,r2
   47134:	180b883a 	mov	r5,r3
   47138:	004cd7c0 	call	4cd7c <__gedf2>
   4713c:	002b883a 	mov	r21,zero
   47140:	0023883a 	mov	r17,zero
   47144:	1000bf16 	blt	r2,zero,47444 <_dtoa_r+0x1060>
   47148:	d9802217 	ldw	r6,136(sp)
   4714c:	ddc00717 	ldw	r23,28(sp)
   47150:	018c303a 	nor	r6,zero,r6
   47154:	d9800515 	stw	r6,20(sp)
   47158:	a80b883a 	mov	r5,r21
   4715c:	e009883a 	mov	r4,fp
   47160:	00485a00 	call	485a0 <_Bfree>
   47164:	883e4926 	beq	r17,zero,46a8c <__alt_data_end+0xfffe6a8c>
   47168:	003fad06 	br	47020 <__alt_data_end+0xfffe7020>
   4716c:	d9c01117 	ldw	r7,68(sp)
   47170:	3801bc26 	beq	r7,zero,47864 <_dtoa_r+0x1480>
   47174:	10810cc4 	addi	r2,r2,1075
   47178:	dd400a17 	ldw	r21,40(sp)
   4717c:	dd000817 	ldw	r20,32(sp)
   47180:	003f0a06 	br	46dac <__alt_data_end+0xfffe6dac>
   47184:	00800704 	movi	r2,28
   47188:	d9000817 	ldw	r4,32(sp)
   4718c:	a0a9883a 	add	r20,r20,r2
   47190:	b0ad883a 	add	r22,r22,r2
   47194:	2089883a 	add	r4,r4,r2
   47198:	d9000815 	stw	r4,32(sp)
   4719c:	003f5106 	br	46ee4 <__alt_data_end+0xfffe6ee4>
   471a0:	d8c00317 	ldw	r3,12(sp)
   471a4:	b8c1fc0e 	bge	r23,r3,47998 <_dtoa_r+0x15b4>
   471a8:	0027883a 	mov	r19,zero
   471ac:	b805883a 	mov	r2,r23
   471b0:	003f3e06 	br	46eac <__alt_data_end+0xfffe6eac>
   471b4:	880b883a 	mov	r5,r17
   471b8:	e009883a 	mov	r4,fp
   471bc:	000f883a 	mov	r7,zero
   471c0:	01800284 	movi	r6,10
   471c4:	00485c80 	call	485c8 <__multadd>
   471c8:	d9000c17 	ldw	r4,48(sp)
   471cc:	1023883a 	mov	r17,r2
   471d0:	0102040e 	bge	zero,r4,479e4 <_dtoa_r+0x1600>
   471d4:	d9000615 	stw	r4,24(sp)
   471d8:	0500050e 	bge	zero,r20,471f0 <_dtoa_r+0xe0c>
   471dc:	880b883a 	mov	r5,r17
   471e0:	a00d883a 	mov	r6,r20
   471e4:	e009883a 	mov	r4,fp
   471e8:	0048d340 	call	48d34 <__lshift>
   471ec:	1023883a 	mov	r17,r2
   471f0:	9801241e 	bne	r19,zero,47684 <_dtoa_r+0x12a0>
   471f4:	8829883a 	mov	r20,r17
   471f8:	d9000617 	ldw	r4,24(sp)
   471fc:	dcc00717 	ldw	r19,28(sp)
   47200:	9480004c 	andi	r18,r18,1
   47204:	20bfffc4 	addi	r2,r4,-1
   47208:	9885883a 	add	r2,r19,r2
   4720c:	d8800415 	stw	r2,16(sp)
   47210:	dc800615 	stw	r18,24(sp)
   47214:	a80b883a 	mov	r5,r21
   47218:	8009883a 	mov	r4,r16
   4721c:	00461bc0 	call	461bc <quorem>
   47220:	880b883a 	mov	r5,r17
   47224:	8009883a 	mov	r4,r16
   47228:	102f883a 	mov	r23,r2
   4722c:	0048e7c0 	call	48e7c <__mcmp>
   47230:	a80b883a 	mov	r5,r21
   47234:	a00d883a 	mov	r6,r20
   47238:	e009883a 	mov	r4,fp
   4723c:	102d883a 	mov	r22,r2
   47240:	0048edc0 	call	48edc <__mdiff>
   47244:	1007883a 	mov	r3,r2
   47248:	10800317 	ldw	r2,12(r2)
   4724c:	bc800c04 	addi	r18,r23,48
   47250:	180b883a 	mov	r5,r3
   47254:	10004e1e 	bne	r2,zero,47390 <_dtoa_r+0xfac>
   47258:	8009883a 	mov	r4,r16
   4725c:	d8c01615 	stw	r3,88(sp)
   47260:	0048e7c0 	call	48e7c <__mcmp>
   47264:	d8c01617 	ldw	r3,88(sp)
   47268:	e009883a 	mov	r4,fp
   4726c:	d8801615 	stw	r2,88(sp)
   47270:	180b883a 	mov	r5,r3
   47274:	00485a00 	call	485a0 <_Bfree>
   47278:	d8801617 	ldw	r2,88(sp)
   4727c:	1000041e 	bne	r2,zero,47290 <_dtoa_r+0xeac>
   47280:	d9800317 	ldw	r6,12(sp)
   47284:	3000021e 	bne	r6,zero,47290 <_dtoa_r+0xeac>
   47288:	d8c00617 	ldw	r3,24(sp)
   4728c:	18003726 	beq	r3,zero,4736c <_dtoa_r+0xf88>
   47290:	b0002016 	blt	r22,zero,47314 <_dtoa_r+0xf30>
   47294:	b000041e 	bne	r22,zero,472a8 <_dtoa_r+0xec4>
   47298:	d9000317 	ldw	r4,12(sp)
   4729c:	2000021e 	bne	r4,zero,472a8 <_dtoa_r+0xec4>
   472a0:	d8c00617 	ldw	r3,24(sp)
   472a4:	18001b26 	beq	r3,zero,47314 <_dtoa_r+0xf30>
   472a8:	00810716 	blt	zero,r2,476c8 <_dtoa_r+0x12e4>
   472ac:	d8c00417 	ldw	r3,16(sp)
   472b0:	9d800044 	addi	r22,r19,1
   472b4:	9c800005 	stb	r18,0(r19)
   472b8:	b02f883a 	mov	r23,r22
   472bc:	98c10626 	beq	r19,r3,476d8 <_dtoa_r+0x12f4>
   472c0:	800b883a 	mov	r5,r16
   472c4:	000f883a 	mov	r7,zero
   472c8:	01800284 	movi	r6,10
   472cc:	e009883a 	mov	r4,fp
   472d0:	00485c80 	call	485c8 <__multadd>
   472d4:	1021883a 	mov	r16,r2
   472d8:	000f883a 	mov	r7,zero
   472dc:	01800284 	movi	r6,10
   472e0:	880b883a 	mov	r5,r17
   472e4:	e009883a 	mov	r4,fp
   472e8:	8d002526 	beq	r17,r20,47380 <_dtoa_r+0xf9c>
   472ec:	00485c80 	call	485c8 <__multadd>
   472f0:	a00b883a 	mov	r5,r20
   472f4:	000f883a 	mov	r7,zero
   472f8:	01800284 	movi	r6,10
   472fc:	e009883a 	mov	r4,fp
   47300:	1023883a 	mov	r17,r2
   47304:	00485c80 	call	485c8 <__multadd>
   47308:	1029883a 	mov	r20,r2
   4730c:	b027883a 	mov	r19,r22
   47310:	003fc006 	br	47214 <__alt_data_end+0xfffe7214>
   47314:	9011883a 	mov	r8,r18
   47318:	00800e0e 	bge	zero,r2,47354 <_dtoa_r+0xf70>
   4731c:	800b883a 	mov	r5,r16
   47320:	01800044 	movi	r6,1
   47324:	e009883a 	mov	r4,fp
   47328:	da001715 	stw	r8,92(sp)
   4732c:	0048d340 	call	48d34 <__lshift>
   47330:	a80b883a 	mov	r5,r21
   47334:	1009883a 	mov	r4,r2
   47338:	1021883a 	mov	r16,r2
   4733c:	0048e7c0 	call	48e7c <__mcmp>
   47340:	da001717 	ldw	r8,92(sp)
   47344:	0081960e 	bge	zero,r2,479a0 <_dtoa_r+0x15bc>
   47348:	00800e44 	movi	r2,57
   4734c:	40817026 	beq	r8,r2,47910 <_dtoa_r+0x152c>
   47350:	ba000c44 	addi	r8,r23,49
   47354:	8825883a 	mov	r18,r17
   47358:	9dc00044 	addi	r23,r19,1
   4735c:	9a000005 	stb	r8,0(r19)
   47360:	a023883a 	mov	r17,r20
   47364:	dc000915 	stw	r16,36(sp)
   47368:	003f2406 	br	46ffc <__alt_data_end+0xfffe6ffc>
   4736c:	00800e44 	movi	r2,57
   47370:	9011883a 	mov	r8,r18
   47374:	90816626 	beq	r18,r2,47910 <_dtoa_r+0x152c>
   47378:	05bff516 	blt	zero,r22,47350 <__alt_data_end+0xfffe7350>
   4737c:	003ff506 	br	47354 <__alt_data_end+0xfffe7354>
   47380:	00485c80 	call	485c8 <__multadd>
   47384:	1023883a 	mov	r17,r2
   47388:	1029883a 	mov	r20,r2
   4738c:	003fdf06 	br	4730c <__alt_data_end+0xfffe730c>
   47390:	e009883a 	mov	r4,fp
   47394:	00485a00 	call	485a0 <_Bfree>
   47398:	00800044 	movi	r2,1
   4739c:	003fbc06 	br	47290 <__alt_data_end+0xfffe7290>
   473a0:	a80b883a 	mov	r5,r21
   473a4:	8009883a 	mov	r4,r16
   473a8:	0048e7c0 	call	48e7c <__mcmp>
   473ac:	103edb0e 	bge	r2,zero,46f1c <__alt_data_end+0xfffe6f1c>
   473b0:	800b883a 	mov	r5,r16
   473b4:	000f883a 	mov	r7,zero
   473b8:	01800284 	movi	r6,10
   473bc:	e009883a 	mov	r4,fp
   473c0:	00485c80 	call	485c8 <__multadd>
   473c4:	1021883a 	mov	r16,r2
   473c8:	d8800517 	ldw	r2,20(sp)
   473cc:	d8c00b17 	ldw	r3,44(sp)
   473d0:	10bfffc4 	addi	r2,r2,-1
   473d4:	d8800515 	stw	r2,20(sp)
   473d8:	183f761e 	bne	r3,zero,471b4 <__alt_data_end+0xfffe71b4>
   473dc:	d9000c17 	ldw	r4,48(sp)
   473e0:	0101730e 	bge	zero,r4,479b0 <_dtoa_r+0x15cc>
   473e4:	d9000615 	stw	r4,24(sp)
   473e8:	003ed006 	br	46f2c <__alt_data_end+0xfffe6f2c>
   473ec:	00800084 	movi	r2,2
   473f0:	3081861e 	bne	r6,r2,47a0c <_dtoa_r+0x1628>
   473f4:	d8000b15 	stw	zero,44(sp)
   473f8:	003f3c06 	br	470ec <__alt_data_end+0xfffe70ec>
   473fc:	dc000917 	ldw	r16,36(sp)
   47400:	003e9206 	br	46e4c <__alt_data_end+0xfffe6e4c>
   47404:	d9c00317 	ldw	r7,12(sp)
   47408:	00800084 	movi	r2,2
   4740c:	11fec50e 	bge	r2,r7,46f24 <__alt_data_end+0xfffe6f24>
   47410:	d9000617 	ldw	r4,24(sp)
   47414:	20013c1e 	bne	r4,zero,47908 <_dtoa_r+0x1524>
   47418:	a80b883a 	mov	r5,r21
   4741c:	000f883a 	mov	r7,zero
   47420:	01800144 	movi	r6,5
   47424:	e009883a 	mov	r4,fp
   47428:	00485c80 	call	485c8 <__multadd>
   4742c:	100b883a 	mov	r5,r2
   47430:	8009883a 	mov	r4,r16
   47434:	102b883a 	mov	r21,r2
   47438:	0048e7c0 	call	48e7c <__mcmp>
   4743c:	dc000915 	stw	r16,36(sp)
   47440:	00bf410e 	bge	zero,r2,47148 <__alt_data_end+0xfffe7148>
   47444:	d9c00717 	ldw	r7,28(sp)
   47448:	00800c44 	movi	r2,49
   4744c:	38800005 	stb	r2,0(r7)
   47450:	d8800517 	ldw	r2,20(sp)
   47454:	3dc00044 	addi	r23,r7,1
   47458:	10800044 	addi	r2,r2,1
   4745c:	d8800515 	stw	r2,20(sp)
   47460:	003f3d06 	br	47158 <__alt_data_end+0xfffe7158>
   47464:	d9800517 	ldw	r6,20(sp)
   47468:	d9c00717 	ldw	r7,28(sp)
   4746c:	00800c44 	movi	r2,49
   47470:	31800044 	addi	r6,r6,1
   47474:	d9800515 	stw	r6,20(sp)
   47478:	38800005 	stb	r2,0(r7)
   4747c:	003edf06 	br	46ffc <__alt_data_end+0xfffe6ffc>
   47480:	d8000b15 	stw	zero,44(sp)
   47484:	003c9f06 	br	46704 <__alt_data_end+0xfffe6704>
   47488:	903e7e1e 	bne	r18,zero,46e84 <__alt_data_end+0xfffe6e84>
   4748c:	00800434 	movhi	r2,16
   47490:	10bfffc4 	addi	r2,r2,-1
   47494:	9884703a 	and	r2,r19,r2
   47498:	1000ea1e 	bne	r2,zero,47844 <_dtoa_r+0x1460>
   4749c:	9cdffc2c 	andhi	r19,r19,32752
   474a0:	9800e826 	beq	r19,zero,47844 <_dtoa_r+0x1460>
   474a4:	d9c00817 	ldw	r7,32(sp)
   474a8:	b5800044 	addi	r22,r22,1
   474ac:	04c00044 	movi	r19,1
   474b0:	39c00044 	addi	r7,r7,1
   474b4:	d9c00815 	stw	r7,32(sp)
   474b8:	d8800d17 	ldw	r2,52(sp)
   474bc:	103e721e 	bne	r2,zero,46e88 <__alt_data_end+0xfffe6e88>
   474c0:	00800044 	movi	r2,1
   474c4:	003e7906 	br	46eac <__alt_data_end+0xfffe6eac>
   474c8:	8009883a 	mov	r4,r16
   474cc:	004e1340 	call	4e134 <__floatsidf>
   474d0:	d9800f17 	ldw	r6,60(sp)
   474d4:	d9c01017 	ldw	r7,64(sp)
   474d8:	1009883a 	mov	r4,r2
   474dc:	180b883a 	mov	r5,r3
   474e0:	004cf4c0 	call	4cf4c <__muldf3>
   474e4:	000d883a 	mov	r6,zero
   474e8:	01d00734 	movhi	r7,16412
   474ec:	1009883a 	mov	r4,r2
   474f0:	180b883a 	mov	r5,r3
   474f4:	004c4480 	call	4c448 <__adddf3>
   474f8:	047f3034 	movhi	r17,64704
   474fc:	1021883a 	mov	r16,r2
   47500:	1c63883a 	add	r17,r3,r17
   47504:	d9000f17 	ldw	r4,60(sp)
   47508:	d9401017 	ldw	r5,64(sp)
   4750c:	000d883a 	mov	r6,zero
   47510:	01d00534 	movhi	r7,16404
   47514:	004d7b80 	call	4d7b8 <__subdf3>
   47518:	800d883a 	mov	r6,r16
   4751c:	880f883a 	mov	r7,r17
   47520:	1009883a 	mov	r4,r2
   47524:	180b883a 	mov	r5,r3
   47528:	102b883a 	mov	r21,r2
   4752c:	1829883a 	mov	r20,r3
   47530:	004cd7c0 	call	4cd7c <__gedf2>
   47534:	00806c16 	blt	zero,r2,476e8 <_dtoa_r+0x1304>
   47538:	89e0003c 	xorhi	r7,r17,32768
   4753c:	800d883a 	mov	r6,r16
   47540:	a809883a 	mov	r4,r21
   47544:	a00b883a 	mov	r5,r20
   47548:	004ce580 	call	4ce58 <__ledf2>
   4754c:	103d7e0e 	bge	r2,zero,46b48 <__alt_data_end+0xfffe6b48>
   47550:	002b883a 	mov	r21,zero
   47554:	0023883a 	mov	r17,zero
   47558:	003efb06 	br	47148 <__alt_data_end+0xfffe7148>
   4755c:	d8800717 	ldw	r2,28(sp)
   47560:	003bd006 	br	464a4 <__alt_data_end+0xfffe64a4>
   47564:	d9000a17 	ldw	r4,40(sp)
   47568:	d9800d17 	ldw	r6,52(sp)
   4756c:	dd400a15 	stw	r21,40(sp)
   47570:	a905c83a 	sub	r2,r21,r4
   47574:	308d883a 	add	r6,r6,r2
   47578:	d9800d15 	stw	r6,52(sp)
   4757c:	002b883a 	mov	r21,zero
   47580:	003e0606 	br	46d9c <__alt_data_end+0xfffe6d9c>
   47584:	9023883a 	mov	r17,r18
   47588:	9829883a 	mov	r20,r19
   4758c:	04000084 	movi	r16,2
   47590:	003c9206 	br	467dc <__alt_data_end+0xfffe67dc>
   47594:	04000044 	movi	r16,1
   47598:	dc000c15 	stw	r16,48(sp)
   4759c:	dc000615 	stw	r16,24(sp)
   475a0:	dc002215 	stw	r16,136(sp)
   475a4:	e0001115 	stw	zero,68(fp)
   475a8:	000b883a 	mov	r5,zero
   475ac:	003c6906 	br	46754 <__alt_data_end+0xfffe6754>
   475b0:	3021883a 	mov	r16,r6
   475b4:	003ffb06 	br	475a4 <__alt_data_end+0xfffe75a4>
   475b8:	1000021e 	bne	r2,zero,475c4 <_dtoa_r+0x11e0>
   475bc:	4200004c 	andi	r8,r8,1
   475c0:	403e7d1e 	bne	r8,zero,46fb8 <__alt_data_end+0xfffe6fb8>
   475c4:	01000c04 	movi	r4,48
   475c8:	00000106 	br	475d0 <_dtoa_r+0x11ec>
   475cc:	102f883a 	mov	r23,r2
   475d0:	b8bfffc4 	addi	r2,r23,-1
   475d4:	10c00007 	ldb	r3,0(r2)
   475d8:	193ffc26 	beq	r3,r4,475cc <__alt_data_end+0xfffe75cc>
   475dc:	003e8706 	br	46ffc <__alt_data_end+0xfffe6ffc>
   475e0:	d8800517 	ldw	r2,20(sp)
   475e4:	00a3c83a 	sub	r17,zero,r2
   475e8:	8800a426 	beq	r17,zero,4787c <_dtoa_r+0x1498>
   475ec:	888003cc 	andi	r2,r17,15
   475f0:	100490fa 	slli	r2,r2,3
   475f4:	00c00174 	movhi	r3,5
   475f8:	18c63304 	addi	r3,r3,6348
   475fc:	1885883a 	add	r2,r3,r2
   47600:	11800017 	ldw	r6,0(r2)
   47604:	11c00117 	ldw	r7,4(r2)
   47608:	9009883a 	mov	r4,r18
   4760c:	980b883a 	mov	r5,r19
   47610:	8823d13a 	srai	r17,r17,4
   47614:	004cf4c0 	call	4cf4c <__muldf3>
   47618:	d8800f15 	stw	r2,60(sp)
   4761c:	d8c01015 	stw	r3,64(sp)
   47620:	8800e826 	beq	r17,zero,479c4 <_dtoa_r+0x15e0>
   47624:	05000174 	movhi	r20,5
   47628:	a5062904 	addi	r20,r20,6308
   4762c:	04000084 	movi	r16,2
   47630:	8980004c 	andi	r6,r17,1
   47634:	1009883a 	mov	r4,r2
   47638:	8823d07a 	srai	r17,r17,1
   4763c:	180b883a 	mov	r5,r3
   47640:	30000426 	beq	r6,zero,47654 <_dtoa_r+0x1270>
   47644:	a1800017 	ldw	r6,0(r20)
   47648:	a1c00117 	ldw	r7,4(r20)
   4764c:	84000044 	addi	r16,r16,1
   47650:	004cf4c0 	call	4cf4c <__muldf3>
   47654:	a5000204 	addi	r20,r20,8
   47658:	883ff51e 	bne	r17,zero,47630 <__alt_data_end+0xfffe7630>
   4765c:	d8800f15 	stw	r2,60(sp)
   47660:	d8c01015 	stw	r3,64(sp)
   47664:	003c7606 	br	46840 <__alt_data_end+0xfffe6840>
   47668:	00c00c04 	movi	r3,48
   4766c:	10c00005 	stb	r3,0(r2)
   47670:	d8c00517 	ldw	r3,20(sp)
   47674:	bd3fffc3 	ldbu	r20,-1(r23)
   47678:	18c00044 	addi	r3,r3,1
   4767c:	d8c00515 	stw	r3,20(sp)
   47680:	003db906 	br	46d68 <__alt_data_end+0xfffe6d68>
   47684:	89400117 	ldw	r5,4(r17)
   47688:	e009883a 	mov	r4,fp
   4768c:	00484f80 	call	484f8 <_Balloc>
   47690:	89800417 	ldw	r6,16(r17)
   47694:	89400304 	addi	r5,r17,12
   47698:	11000304 	addi	r4,r2,12
   4769c:	31800084 	addi	r6,r6,2
   476a0:	318d883a 	add	r6,r6,r6
   476a4:	318d883a 	add	r6,r6,r6
   476a8:	1027883a 	mov	r19,r2
   476ac:	00482540 	call	48254 <memcpy>
   476b0:	01800044 	movi	r6,1
   476b4:	980b883a 	mov	r5,r19
   476b8:	e009883a 	mov	r4,fp
   476bc:	0048d340 	call	48d34 <__lshift>
   476c0:	1029883a 	mov	r20,r2
   476c4:	003ecc06 	br	471f8 <__alt_data_end+0xfffe71f8>
   476c8:	00800e44 	movi	r2,57
   476cc:	90809026 	beq	r18,r2,47910 <_dtoa_r+0x152c>
   476d0:	92000044 	addi	r8,r18,1
   476d4:	003f1f06 	br	47354 <__alt_data_end+0xfffe7354>
   476d8:	9011883a 	mov	r8,r18
   476dc:	8825883a 	mov	r18,r17
   476e0:	a023883a 	mov	r17,r20
   476e4:	003e2906 	br	46f8c <__alt_data_end+0xfffe6f8c>
   476e8:	002b883a 	mov	r21,zero
   476ec:	0023883a 	mov	r17,zero
   476f0:	003f5406 	br	47444 <__alt_data_end+0xfffe7444>
   476f4:	61bfffc4 	addi	r6,r12,-1
   476f8:	300490fa 	slli	r2,r6,3
   476fc:	00c00174 	movhi	r3,5
   47700:	18c63304 	addi	r3,r3,6348
   47704:	1885883a 	add	r2,r3,r2
   47708:	11000017 	ldw	r4,0(r2)
   4770c:	11400117 	ldw	r5,4(r2)
   47710:	d8800717 	ldw	r2,28(sp)
   47714:	880f883a 	mov	r7,r17
   47718:	d9801215 	stw	r6,72(sp)
   4771c:	800d883a 	mov	r6,r16
   47720:	db001615 	stw	r12,88(sp)
   47724:	15c00044 	addi	r23,r2,1
   47728:	004cf4c0 	call	4cf4c <__muldf3>
   4772c:	d9401017 	ldw	r5,64(sp)
   47730:	d9000f17 	ldw	r4,60(sp)
   47734:	d8c01515 	stw	r3,84(sp)
   47738:	d8801415 	stw	r2,80(sp)
   4773c:	004e0b40 	call	4e0b4 <__fixdfsi>
   47740:	1009883a 	mov	r4,r2
   47744:	1021883a 	mov	r16,r2
   47748:	004e1340 	call	4e134 <__floatsidf>
   4774c:	d9000f17 	ldw	r4,60(sp)
   47750:	d9401017 	ldw	r5,64(sp)
   47754:	100d883a 	mov	r6,r2
   47758:	180f883a 	mov	r7,r3
   4775c:	004d7b80 	call	4d7b8 <__subdf3>
   47760:	1829883a 	mov	r20,r3
   47764:	d8c00717 	ldw	r3,28(sp)
   47768:	84000c04 	addi	r16,r16,48
   4776c:	1023883a 	mov	r17,r2
   47770:	1c000005 	stb	r16,0(r3)
   47774:	db001617 	ldw	r12,88(sp)
   47778:	00800044 	movi	r2,1
   4777c:	60802226 	beq	r12,r2,47808 <_dtoa_r+0x1424>
   47780:	d9c00717 	ldw	r7,28(sp)
   47784:	8805883a 	mov	r2,r17
   47788:	b82b883a 	mov	r21,r23
   4778c:	3b19883a 	add	r12,r7,r12
   47790:	6023883a 	mov	r17,r12
   47794:	a007883a 	mov	r3,r20
   47798:	dc800f15 	stw	r18,60(sp)
   4779c:	000d883a 	mov	r6,zero
   477a0:	01d00934 	movhi	r7,16420
   477a4:	1009883a 	mov	r4,r2
   477a8:	180b883a 	mov	r5,r3
   477ac:	004cf4c0 	call	4cf4c <__muldf3>
   477b0:	180b883a 	mov	r5,r3
   477b4:	1009883a 	mov	r4,r2
   477b8:	1829883a 	mov	r20,r3
   477bc:	1025883a 	mov	r18,r2
   477c0:	004e0b40 	call	4e0b4 <__fixdfsi>
   477c4:	1009883a 	mov	r4,r2
   477c8:	1021883a 	mov	r16,r2
   477cc:	004e1340 	call	4e134 <__floatsidf>
   477d0:	100d883a 	mov	r6,r2
   477d4:	180f883a 	mov	r7,r3
   477d8:	9009883a 	mov	r4,r18
   477dc:	a00b883a 	mov	r5,r20
   477e0:	84000c04 	addi	r16,r16,48
   477e4:	004d7b80 	call	4d7b8 <__subdf3>
   477e8:	ad400044 	addi	r21,r21,1
   477ec:	ac3fffc5 	stb	r16,-1(r21)
   477f0:	ac7fea1e 	bne	r21,r17,4779c <__alt_data_end+0xfffe779c>
   477f4:	1023883a 	mov	r17,r2
   477f8:	d8801217 	ldw	r2,72(sp)
   477fc:	dc800f17 	ldw	r18,60(sp)
   47800:	1829883a 	mov	r20,r3
   47804:	b8af883a 	add	r23,r23,r2
   47808:	d9001417 	ldw	r4,80(sp)
   4780c:	d9401517 	ldw	r5,84(sp)
   47810:	000d883a 	mov	r6,zero
   47814:	01cff834 	movhi	r7,16352
   47818:	004c4480 	call	4c448 <__adddf3>
   4781c:	880d883a 	mov	r6,r17
   47820:	a00f883a 	mov	r7,r20
   47824:	1009883a 	mov	r4,r2
   47828:	180b883a 	mov	r5,r3
   4782c:	004ce580 	call	4ce58 <__ledf2>
   47830:	10003e0e 	bge	r2,zero,4792c <_dtoa_r+0x1548>
   47834:	d9001317 	ldw	r4,76(sp)
   47838:	bd3fffc3 	ldbu	r20,-1(r23)
   4783c:	d9000515 	stw	r4,20(sp)
   47840:	003d3b06 	br	46d30 <__alt_data_end+0xfffe6d30>
   47844:	0027883a 	mov	r19,zero
   47848:	003f1b06 	br	474b8 <__alt_data_end+0xfffe74b8>
   4784c:	d8800817 	ldw	r2,32(sp)
   47850:	11e9c83a 	sub	r20,r2,r7
   47854:	0005883a 	mov	r2,zero
   47858:	003d5406 	br	46dac <__alt_data_end+0xfffe6dac>
   4785c:	00800044 	movi	r2,1
   47860:	003dc706 	br	46f80 <__alt_data_end+0xfffe6f80>
   47864:	d8c00217 	ldw	r3,8(sp)
   47868:	00800d84 	movi	r2,54
   4786c:	dd400a17 	ldw	r21,40(sp)
   47870:	10c5c83a 	sub	r2,r2,r3
   47874:	dd000817 	ldw	r20,32(sp)
   47878:	003d4c06 	br	46dac <__alt_data_end+0xfffe6dac>
   4787c:	dc800f15 	stw	r18,60(sp)
   47880:	dcc01015 	stw	r19,64(sp)
   47884:	04000084 	movi	r16,2
   47888:	003bed06 	br	46840 <__alt_data_end+0xfffe6840>
   4788c:	d9000617 	ldw	r4,24(sp)
   47890:	203f0d26 	beq	r4,zero,474c8 <__alt_data_end+0xfffe74c8>
   47894:	d9800c17 	ldw	r6,48(sp)
   47898:	01bcab0e 	bge	zero,r6,46b48 <__alt_data_end+0xfffe6b48>
   4789c:	d9401017 	ldw	r5,64(sp)
   478a0:	d9000f17 	ldw	r4,60(sp)
   478a4:	000d883a 	mov	r6,zero
   478a8:	01d00934 	movhi	r7,16420
   478ac:	004cf4c0 	call	4cf4c <__muldf3>
   478b0:	81000044 	addi	r4,r16,1
   478b4:	d8800f15 	stw	r2,60(sp)
   478b8:	d8c01015 	stw	r3,64(sp)
   478bc:	004e1340 	call	4e134 <__floatsidf>
   478c0:	d9800f17 	ldw	r6,60(sp)
   478c4:	d9c01017 	ldw	r7,64(sp)
   478c8:	1009883a 	mov	r4,r2
   478cc:	180b883a 	mov	r5,r3
   478d0:	004cf4c0 	call	4cf4c <__muldf3>
   478d4:	01d00734 	movhi	r7,16412
   478d8:	000d883a 	mov	r6,zero
   478dc:	1009883a 	mov	r4,r2
   478e0:	180b883a 	mov	r5,r3
   478e4:	004c4480 	call	4c448 <__adddf3>
   478e8:	d9c00517 	ldw	r7,20(sp)
   478ec:	047f3034 	movhi	r17,64704
   478f0:	1021883a 	mov	r16,r2
   478f4:	39ffffc4 	addi	r7,r7,-1
   478f8:	d9c01315 	stw	r7,76(sp)
   478fc:	1c63883a 	add	r17,r3,r17
   47900:	db000c17 	ldw	r12,48(sp)
   47904:	003bea06 	br	468b0 <__alt_data_end+0xfffe68b0>
   47908:	dc000915 	stw	r16,36(sp)
   4790c:	003e0e06 	br	47148 <__alt_data_end+0xfffe7148>
   47910:	01000e44 	movi	r4,57
   47914:	8825883a 	mov	r18,r17
   47918:	9dc00044 	addi	r23,r19,1
   4791c:	99000005 	stb	r4,0(r19)
   47920:	a023883a 	mov	r17,r20
   47924:	dc000915 	stw	r16,36(sp)
   47928:	003da406 	br	46fbc <__alt_data_end+0xfffe6fbc>
   4792c:	d9801417 	ldw	r6,80(sp)
   47930:	d9c01517 	ldw	r7,84(sp)
   47934:	0009883a 	mov	r4,zero
   47938:	014ff834 	movhi	r5,16352
   4793c:	004d7b80 	call	4d7b8 <__subdf3>
   47940:	880d883a 	mov	r6,r17
   47944:	a00f883a 	mov	r7,r20
   47948:	1009883a 	mov	r4,r2
   4794c:	180b883a 	mov	r5,r3
   47950:	004cd7c0 	call	4cd7c <__gedf2>
   47954:	00bc7c0e 	bge	zero,r2,46b48 <__alt_data_end+0xfffe6b48>
   47958:	01000c04 	movi	r4,48
   4795c:	00000106 	br	47964 <_dtoa_r+0x1580>
   47960:	102f883a 	mov	r23,r2
   47964:	b8bfffc4 	addi	r2,r23,-1
   47968:	10c00007 	ldb	r3,0(r2)
   4796c:	193ffc26 	beq	r3,r4,47960 <__alt_data_end+0xfffe7960>
   47970:	d9801317 	ldw	r6,76(sp)
   47974:	d9800515 	stw	r6,20(sp)
   47978:	003c4406 	br	46a8c <__alt_data_end+0xfffe6a8c>
   4797c:	d9801317 	ldw	r6,76(sp)
   47980:	d9800515 	stw	r6,20(sp)
   47984:	003cea06 	br	46d30 <__alt_data_end+0xfffe6d30>
   47988:	dd800f17 	ldw	r22,60(sp)
   4798c:	dcc01017 	ldw	r19,64(sp)
   47990:	dc801217 	ldw	r18,72(sp)
   47994:	003c6c06 	br	46b48 <__alt_data_end+0xfffe6b48>
   47998:	903e031e 	bne	r18,zero,471a8 <__alt_data_end+0xfffe71a8>
   4799c:	003ebb06 	br	4748c <__alt_data_end+0xfffe748c>
   479a0:	103e6c1e 	bne	r2,zero,47354 <__alt_data_end+0xfffe7354>
   479a4:	4080004c 	andi	r2,r8,1
   479a8:	103e6a26 	beq	r2,zero,47354 <__alt_data_end+0xfffe7354>
   479ac:	003e6606 	br	47348 <__alt_data_end+0xfffe7348>
   479b0:	d8c00317 	ldw	r3,12(sp)
   479b4:	00800084 	movi	r2,2
   479b8:	10c02916 	blt	r2,r3,47a60 <_dtoa_r+0x167c>
   479bc:	d9000c17 	ldw	r4,48(sp)
   479c0:	003e8806 	br	473e4 <__alt_data_end+0xfffe73e4>
   479c4:	04000084 	movi	r16,2
   479c8:	003b9d06 	br	46840 <__alt_data_end+0xfffe6840>
   479cc:	d9001317 	ldw	r4,76(sp)
   479d0:	d9000515 	stw	r4,20(sp)
   479d4:	003cd606 	br	46d30 <__alt_data_end+0xfffe6d30>
   479d8:	d8801317 	ldw	r2,76(sp)
   479dc:	d8800515 	stw	r2,20(sp)
   479e0:	003c2a06 	br	46a8c <__alt_data_end+0xfffe6a8c>
   479e4:	d9800317 	ldw	r6,12(sp)
   479e8:	00800084 	movi	r2,2
   479ec:	11801516 	blt	r2,r6,47a44 <_dtoa_r+0x1660>
   479f0:	d9c00c17 	ldw	r7,48(sp)
   479f4:	d9c00615 	stw	r7,24(sp)
   479f8:	003df706 	br	471d8 <__alt_data_end+0xfffe71d8>
   479fc:	193d3926 	beq	r3,r4,46ee4 <__alt_data_end+0xfffe6ee4>
   47a00:	00c00f04 	movi	r3,60
   47a04:	1885c83a 	sub	r2,r3,r2
   47a08:	003ddf06 	br	47188 <__alt_data_end+0xfffe7188>
   47a0c:	e009883a 	mov	r4,fp
   47a10:	e0001115 	stw	zero,68(fp)
   47a14:	000b883a 	mov	r5,zero
   47a18:	00484f80 	call	484f8 <_Balloc>
   47a1c:	d8800715 	stw	r2,28(sp)
   47a20:	d8c00717 	ldw	r3,28(sp)
   47a24:	00bfffc4 	movi	r2,-1
   47a28:	01000044 	movi	r4,1
   47a2c:	d8800c15 	stw	r2,48(sp)
   47a30:	e0c01015 	stw	r3,64(fp)
   47a34:	d9000b15 	stw	r4,44(sp)
   47a38:	d8800615 	stw	r2,24(sp)
   47a3c:	d8002215 	stw	zero,136(sp)
   47a40:	003c4106 	br	46b48 <__alt_data_end+0xfffe6b48>
   47a44:	d8c00c17 	ldw	r3,48(sp)
   47a48:	d8c00615 	stw	r3,24(sp)
   47a4c:	003e7006 	br	47410 <__alt_data_end+0xfffe7410>
   47a50:	04400044 	movi	r17,1
   47a54:	003b2006 	br	466d8 <__alt_data_end+0xfffe66d8>
   47a58:	000b883a 	mov	r5,zero
   47a5c:	003b3d06 	br	46754 <__alt_data_end+0xfffe6754>
   47a60:	d8800c17 	ldw	r2,48(sp)
   47a64:	d8800615 	stw	r2,24(sp)
   47a68:	003e6906 	br	47410 <__alt_data_end+0xfffe7410>

00047a6c <__sflags>:
   47a6c:	28800007 	ldb	r2,0(r5)
   47a70:	00c01c84 	movi	r3,114
   47a74:	10c02426 	beq	r2,r3,47b08 <__sflags+0x9c>
   47a78:	00c01dc4 	movi	r3,119
   47a7c:	10c01e26 	beq	r2,r3,47af8 <__sflags+0x8c>
   47a80:	00c01844 	movi	r3,97
   47a84:	10c00426 	beq	r2,r3,47a98 <__sflags+0x2c>
   47a88:	00800584 	movi	r2,22
   47a8c:	20800015 	stw	r2,0(r4)
   47a90:	0005883a 	mov	r2,zero
   47a94:	f800283a 	ret
   47a98:	02c08204 	movi	r11,520
   47a9c:	01000044 	movi	r4,1
   47aa0:	00804204 	movi	r2,264
   47aa4:	01c00ac4 	movi	r7,43
   47aa8:	02bff8c4 	movi	r10,-29
   47aac:	027fff04 	movi	r9,-4
   47ab0:	02001e04 	movi	r8,120
   47ab4:	29400044 	addi	r5,r5,1
   47ab8:	28c00007 	ldb	r3,0(r5)
   47abc:	18000626 	beq	r3,zero,47ad8 <__sflags+0x6c>
   47ac0:	19c00826 	beq	r3,r7,47ae4 <__sflags+0x78>
   47ac4:	1a3ffb1e 	bne	r3,r8,47ab4 <__alt_data_end+0xfffe7ab4>
   47ac8:	29400044 	addi	r5,r5,1
   47acc:	28c00007 	ldb	r3,0(r5)
   47ad0:	21020014 	ori	r4,r4,2048
   47ad4:	183ffa1e 	bne	r3,zero,47ac0 <__alt_data_end+0xfffe7ac0>
   47ad8:	22c8b03a 	or	r4,r4,r11
   47adc:	31000015 	stw	r4,0(r6)
   47ae0:	f800283a 	ret
   47ae4:	1284703a 	and	r2,r2,r10
   47ae8:	2248703a 	and	r4,r4,r9
   47aec:	10800414 	ori	r2,r2,16
   47af0:	21000094 	ori	r4,r4,2
   47af4:	003fef06 	br	47ab4 <__alt_data_end+0xfffe7ab4>
   47af8:	02c18004 	movi	r11,1536
   47afc:	01000044 	movi	r4,1
   47b00:	00800204 	movi	r2,8
   47b04:	003fe706 	br	47aa4 <__alt_data_end+0xfffe7aa4>
   47b08:	0017883a 	mov	r11,zero
   47b0c:	0009883a 	mov	r4,zero
   47b10:	00800104 	movi	r2,4
   47b14:	003fe306 	br	47aa4 <__alt_data_end+0xfffe7aa4>

00047b18 <__sfvwrite_r>:
   47b18:	30800217 	ldw	r2,8(r6)
   47b1c:	10006726 	beq	r2,zero,47cbc <__sfvwrite_r+0x1a4>
   47b20:	28c0030b 	ldhu	r3,12(r5)
   47b24:	defff404 	addi	sp,sp,-48
   47b28:	dd400715 	stw	r21,28(sp)
   47b2c:	dd000615 	stw	r20,24(sp)
   47b30:	dc000215 	stw	r16,8(sp)
   47b34:	dfc00b15 	stw	ra,44(sp)
   47b38:	df000a15 	stw	fp,40(sp)
   47b3c:	ddc00915 	stw	r23,36(sp)
   47b40:	dd800815 	stw	r22,32(sp)
   47b44:	dcc00515 	stw	r19,20(sp)
   47b48:	dc800415 	stw	r18,16(sp)
   47b4c:	dc400315 	stw	r17,12(sp)
   47b50:	1880020c 	andi	r2,r3,8
   47b54:	2821883a 	mov	r16,r5
   47b58:	202b883a 	mov	r21,r4
   47b5c:	3029883a 	mov	r20,r6
   47b60:	10002726 	beq	r2,zero,47c00 <__sfvwrite_r+0xe8>
   47b64:	28800417 	ldw	r2,16(r5)
   47b68:	10002526 	beq	r2,zero,47c00 <__sfvwrite_r+0xe8>
   47b6c:	1880008c 	andi	r2,r3,2
   47b70:	a4400017 	ldw	r17,0(r20)
   47b74:	10002a26 	beq	r2,zero,47c20 <__sfvwrite_r+0x108>
   47b78:	05a00034 	movhi	r22,32768
   47b7c:	0027883a 	mov	r19,zero
   47b80:	0025883a 	mov	r18,zero
   47b84:	b5bf0004 	addi	r22,r22,-1024
   47b88:	980d883a 	mov	r6,r19
   47b8c:	a809883a 	mov	r4,r21
   47b90:	90004626 	beq	r18,zero,47cac <__sfvwrite_r+0x194>
   47b94:	900f883a 	mov	r7,r18
   47b98:	b480022e 	bgeu	r22,r18,47ba4 <__sfvwrite_r+0x8c>
   47b9c:	01e00034 	movhi	r7,32768
   47ba0:	39ff0004 	addi	r7,r7,-1024
   47ba4:	80800917 	ldw	r2,36(r16)
   47ba8:	81400717 	ldw	r5,28(r16)
   47bac:	103ee83a 	callr	r2
   47bb0:	00805a0e 	bge	zero,r2,47d1c <__sfvwrite_r+0x204>
   47bb4:	a0c00217 	ldw	r3,8(r20)
   47bb8:	98a7883a 	add	r19,r19,r2
   47bbc:	90a5c83a 	sub	r18,r18,r2
   47bc0:	1885c83a 	sub	r2,r3,r2
   47bc4:	a0800215 	stw	r2,8(r20)
   47bc8:	103fef1e 	bne	r2,zero,47b88 <__alt_data_end+0xfffe7b88>
   47bcc:	0005883a 	mov	r2,zero
   47bd0:	dfc00b17 	ldw	ra,44(sp)
   47bd4:	df000a17 	ldw	fp,40(sp)
   47bd8:	ddc00917 	ldw	r23,36(sp)
   47bdc:	dd800817 	ldw	r22,32(sp)
   47be0:	dd400717 	ldw	r21,28(sp)
   47be4:	dd000617 	ldw	r20,24(sp)
   47be8:	dcc00517 	ldw	r19,20(sp)
   47bec:	dc800417 	ldw	r18,16(sp)
   47bf0:	dc400317 	ldw	r17,12(sp)
   47bf4:	dc000217 	ldw	r16,8(sp)
   47bf8:	dec00c04 	addi	sp,sp,48
   47bfc:	f800283a 	ret
   47c00:	800b883a 	mov	r5,r16
   47c04:	a809883a 	mov	r4,r21
   47c08:	00460140 	call	46014 <__swsetup_r>
   47c0c:	1000ee1e 	bne	r2,zero,47fc8 <__sfvwrite_r+0x4b0>
   47c10:	80c0030b 	ldhu	r3,12(r16)
   47c14:	a4400017 	ldw	r17,0(r20)
   47c18:	1880008c 	andi	r2,r3,2
   47c1c:	103fd61e 	bne	r2,zero,47b78 <__alt_data_end+0xfffe7b78>
   47c20:	1880004c 	andi	r2,r3,1
   47c24:	1000421e 	bne	r2,zero,47d30 <__sfvwrite_r+0x218>
   47c28:	0039883a 	mov	fp,zero
   47c2c:	0025883a 	mov	r18,zero
   47c30:	90001a26 	beq	r18,zero,47c9c <__sfvwrite_r+0x184>
   47c34:	1880800c 	andi	r2,r3,512
   47c38:	84c00217 	ldw	r19,8(r16)
   47c3c:	10002126 	beq	r2,zero,47cc4 <__sfvwrite_r+0x1ac>
   47c40:	982f883a 	mov	r23,r19
   47c44:	94c09636 	bltu	r18,r19,47ea0 <__sfvwrite_r+0x388>
   47c48:	1881200c 	andi	r2,r3,1152
   47c4c:	1000a11e 	bne	r2,zero,47ed4 <__sfvwrite_r+0x3bc>
   47c50:	81000017 	ldw	r4,0(r16)
   47c54:	b80d883a 	mov	r6,r23
   47c58:	e00b883a 	mov	r5,fp
   47c5c:	004839c0 	call	4839c <memmove>
   47c60:	80c00217 	ldw	r3,8(r16)
   47c64:	81000017 	ldw	r4,0(r16)
   47c68:	9005883a 	mov	r2,r18
   47c6c:	1ce7c83a 	sub	r19,r3,r19
   47c70:	25cf883a 	add	r7,r4,r23
   47c74:	84c00215 	stw	r19,8(r16)
   47c78:	81c00015 	stw	r7,0(r16)
   47c7c:	a0c00217 	ldw	r3,8(r20)
   47c80:	e0b9883a 	add	fp,fp,r2
   47c84:	90a5c83a 	sub	r18,r18,r2
   47c88:	18a7c83a 	sub	r19,r3,r2
   47c8c:	a4c00215 	stw	r19,8(r20)
   47c90:	983fce26 	beq	r19,zero,47bcc <__alt_data_end+0xfffe7bcc>
   47c94:	80c0030b 	ldhu	r3,12(r16)
   47c98:	903fe61e 	bne	r18,zero,47c34 <__alt_data_end+0xfffe7c34>
   47c9c:	8f000017 	ldw	fp,0(r17)
   47ca0:	8c800117 	ldw	r18,4(r17)
   47ca4:	8c400204 	addi	r17,r17,8
   47ca8:	003fe106 	br	47c30 <__alt_data_end+0xfffe7c30>
   47cac:	8cc00017 	ldw	r19,0(r17)
   47cb0:	8c800117 	ldw	r18,4(r17)
   47cb4:	8c400204 	addi	r17,r17,8
   47cb8:	003fb306 	br	47b88 <__alt_data_end+0xfffe7b88>
   47cbc:	0005883a 	mov	r2,zero
   47cc0:	f800283a 	ret
   47cc4:	81000017 	ldw	r4,0(r16)
   47cc8:	80800417 	ldw	r2,16(r16)
   47ccc:	11005a36 	bltu	r2,r4,47e38 <__sfvwrite_r+0x320>
   47cd0:	85c00517 	ldw	r23,20(r16)
   47cd4:	95c05836 	bltu	r18,r23,47e38 <__sfvwrite_r+0x320>
   47cd8:	00a00034 	movhi	r2,32768
   47cdc:	10bfffc4 	addi	r2,r2,-1
   47ce0:	9009883a 	mov	r4,r18
   47ce4:	1480012e 	bgeu	r2,r18,47cec <__sfvwrite_r+0x1d4>
   47ce8:	1009883a 	mov	r4,r2
   47cec:	b80b883a 	mov	r5,r23
   47cf0:	00411680 	call	41168 <__divsi3>
   47cf4:	b80b883a 	mov	r5,r23
   47cf8:	1009883a 	mov	r4,r2
   47cfc:	004131c0 	call	4131c <__mulsi3>
   47d00:	81400717 	ldw	r5,28(r16)
   47d04:	80c00917 	ldw	r3,36(r16)
   47d08:	100f883a 	mov	r7,r2
   47d0c:	e00d883a 	mov	r6,fp
   47d10:	a809883a 	mov	r4,r21
   47d14:	183ee83a 	callr	r3
   47d18:	00bfd816 	blt	zero,r2,47c7c <__alt_data_end+0xfffe7c7c>
   47d1c:	8080030b 	ldhu	r2,12(r16)
   47d20:	10801014 	ori	r2,r2,64
   47d24:	8080030d 	sth	r2,12(r16)
   47d28:	00bfffc4 	movi	r2,-1
   47d2c:	003fa806 	br	47bd0 <__alt_data_end+0xfffe7bd0>
   47d30:	0027883a 	mov	r19,zero
   47d34:	0011883a 	mov	r8,zero
   47d38:	0039883a 	mov	fp,zero
   47d3c:	0025883a 	mov	r18,zero
   47d40:	90001f26 	beq	r18,zero,47dc0 <__sfvwrite_r+0x2a8>
   47d44:	40005a26 	beq	r8,zero,47eb0 <__sfvwrite_r+0x398>
   47d48:	982d883a 	mov	r22,r19
   47d4c:	94c0012e 	bgeu	r18,r19,47d54 <__sfvwrite_r+0x23c>
   47d50:	902d883a 	mov	r22,r18
   47d54:	81000017 	ldw	r4,0(r16)
   47d58:	80800417 	ldw	r2,16(r16)
   47d5c:	b02f883a 	mov	r23,r22
   47d60:	81c00517 	ldw	r7,20(r16)
   47d64:	1100032e 	bgeu	r2,r4,47d74 <__sfvwrite_r+0x25c>
   47d68:	80c00217 	ldw	r3,8(r16)
   47d6c:	38c7883a 	add	r3,r7,r3
   47d70:	1d801816 	blt	r3,r22,47dd4 <__sfvwrite_r+0x2bc>
   47d74:	b1c03e16 	blt	r22,r7,47e70 <__sfvwrite_r+0x358>
   47d78:	80800917 	ldw	r2,36(r16)
   47d7c:	81400717 	ldw	r5,28(r16)
   47d80:	e00d883a 	mov	r6,fp
   47d84:	da000115 	stw	r8,4(sp)
   47d88:	a809883a 	mov	r4,r21
   47d8c:	103ee83a 	callr	r2
   47d90:	102f883a 	mov	r23,r2
   47d94:	da000117 	ldw	r8,4(sp)
   47d98:	00bfe00e 	bge	zero,r2,47d1c <__alt_data_end+0xfffe7d1c>
   47d9c:	9de7c83a 	sub	r19,r19,r23
   47da0:	98001f26 	beq	r19,zero,47e20 <__sfvwrite_r+0x308>
   47da4:	a0800217 	ldw	r2,8(r20)
   47da8:	e5f9883a 	add	fp,fp,r23
   47dac:	95e5c83a 	sub	r18,r18,r23
   47db0:	15efc83a 	sub	r23,r2,r23
   47db4:	a5c00215 	stw	r23,8(r20)
   47db8:	b83f8426 	beq	r23,zero,47bcc <__alt_data_end+0xfffe7bcc>
   47dbc:	903fe11e 	bne	r18,zero,47d44 <__alt_data_end+0xfffe7d44>
   47dc0:	8f000017 	ldw	fp,0(r17)
   47dc4:	8c800117 	ldw	r18,4(r17)
   47dc8:	0011883a 	mov	r8,zero
   47dcc:	8c400204 	addi	r17,r17,8
   47dd0:	003fdb06 	br	47d40 <__alt_data_end+0xfffe7d40>
   47dd4:	180d883a 	mov	r6,r3
   47dd8:	e00b883a 	mov	r5,fp
   47ddc:	da000115 	stw	r8,4(sp)
   47de0:	d8c00015 	stw	r3,0(sp)
   47de4:	004839c0 	call	4839c <memmove>
   47de8:	d8c00017 	ldw	r3,0(sp)
   47dec:	80800017 	ldw	r2,0(r16)
   47df0:	800b883a 	mov	r5,r16
   47df4:	a809883a 	mov	r4,r21
   47df8:	10c5883a 	add	r2,r2,r3
   47dfc:	80800015 	stw	r2,0(r16)
   47e00:	d8c00015 	stw	r3,0(sp)
   47e04:	00416b00 	call	416b0 <_fflush_r>
   47e08:	d8c00017 	ldw	r3,0(sp)
   47e0c:	da000117 	ldw	r8,4(sp)
   47e10:	103fc21e 	bne	r2,zero,47d1c <__alt_data_end+0xfffe7d1c>
   47e14:	182f883a 	mov	r23,r3
   47e18:	9de7c83a 	sub	r19,r19,r23
   47e1c:	983fe11e 	bne	r19,zero,47da4 <__alt_data_end+0xfffe7da4>
   47e20:	800b883a 	mov	r5,r16
   47e24:	a809883a 	mov	r4,r21
   47e28:	00416b00 	call	416b0 <_fflush_r>
   47e2c:	103fbb1e 	bne	r2,zero,47d1c <__alt_data_end+0xfffe7d1c>
   47e30:	0011883a 	mov	r8,zero
   47e34:	003fdb06 	br	47da4 <__alt_data_end+0xfffe7da4>
   47e38:	94c0012e 	bgeu	r18,r19,47e40 <__sfvwrite_r+0x328>
   47e3c:	9027883a 	mov	r19,r18
   47e40:	980d883a 	mov	r6,r19
   47e44:	e00b883a 	mov	r5,fp
   47e48:	004839c0 	call	4839c <memmove>
   47e4c:	80800217 	ldw	r2,8(r16)
   47e50:	80c00017 	ldw	r3,0(r16)
   47e54:	14c5c83a 	sub	r2,r2,r19
   47e58:	1cc7883a 	add	r3,r3,r19
   47e5c:	80800215 	stw	r2,8(r16)
   47e60:	80c00015 	stw	r3,0(r16)
   47e64:	10004326 	beq	r2,zero,47f74 <__sfvwrite_r+0x45c>
   47e68:	9805883a 	mov	r2,r19
   47e6c:	003f8306 	br	47c7c <__alt_data_end+0xfffe7c7c>
   47e70:	b00d883a 	mov	r6,r22
   47e74:	e00b883a 	mov	r5,fp
   47e78:	da000115 	stw	r8,4(sp)
   47e7c:	004839c0 	call	4839c <memmove>
   47e80:	80800217 	ldw	r2,8(r16)
   47e84:	80c00017 	ldw	r3,0(r16)
   47e88:	da000117 	ldw	r8,4(sp)
   47e8c:	1585c83a 	sub	r2,r2,r22
   47e90:	1dad883a 	add	r22,r3,r22
   47e94:	80800215 	stw	r2,8(r16)
   47e98:	85800015 	stw	r22,0(r16)
   47e9c:	003fbf06 	br	47d9c <__alt_data_end+0xfffe7d9c>
   47ea0:	81000017 	ldw	r4,0(r16)
   47ea4:	9027883a 	mov	r19,r18
   47ea8:	902f883a 	mov	r23,r18
   47eac:	003f6906 	br	47c54 <__alt_data_end+0xfffe7c54>
   47eb0:	900d883a 	mov	r6,r18
   47eb4:	01400284 	movi	r5,10
   47eb8:	e009883a 	mov	r4,fp
   47ebc:	00481700 	call	48170 <memchr>
   47ec0:	10003e26 	beq	r2,zero,47fbc <__sfvwrite_r+0x4a4>
   47ec4:	10800044 	addi	r2,r2,1
   47ec8:	1727c83a 	sub	r19,r2,fp
   47ecc:	02000044 	movi	r8,1
   47ed0:	003f9d06 	br	47d48 <__alt_data_end+0xfffe7d48>
   47ed4:	80800517 	ldw	r2,20(r16)
   47ed8:	81400417 	ldw	r5,16(r16)
   47edc:	81c00017 	ldw	r7,0(r16)
   47ee0:	10a7883a 	add	r19,r2,r2
   47ee4:	9885883a 	add	r2,r19,r2
   47ee8:	1026d7fa 	srli	r19,r2,31
   47eec:	396dc83a 	sub	r22,r7,r5
   47ef0:	b1000044 	addi	r4,r22,1
   47ef4:	9885883a 	add	r2,r19,r2
   47ef8:	1027d07a 	srai	r19,r2,1
   47efc:	2485883a 	add	r2,r4,r18
   47f00:	980d883a 	mov	r6,r19
   47f04:	9880022e 	bgeu	r19,r2,47f10 <__sfvwrite_r+0x3f8>
   47f08:	1027883a 	mov	r19,r2
   47f0c:	100d883a 	mov	r6,r2
   47f10:	18c1000c 	andi	r3,r3,1024
   47f14:	18001c26 	beq	r3,zero,47f88 <__sfvwrite_r+0x470>
   47f18:	300b883a 	mov	r5,r6
   47f1c:	a809883a 	mov	r4,r21
   47f20:	00429380 	call	42938 <_malloc_r>
   47f24:	102f883a 	mov	r23,r2
   47f28:	10002926 	beq	r2,zero,47fd0 <__sfvwrite_r+0x4b8>
   47f2c:	81400417 	ldw	r5,16(r16)
   47f30:	b00d883a 	mov	r6,r22
   47f34:	1009883a 	mov	r4,r2
   47f38:	00482540 	call	48254 <memcpy>
   47f3c:	8080030b 	ldhu	r2,12(r16)
   47f40:	00fedfc4 	movi	r3,-1153
   47f44:	10c4703a 	and	r2,r2,r3
   47f48:	10802014 	ori	r2,r2,128
   47f4c:	8080030d 	sth	r2,12(r16)
   47f50:	bd89883a 	add	r4,r23,r22
   47f54:	9d8fc83a 	sub	r7,r19,r22
   47f58:	85c00415 	stw	r23,16(r16)
   47f5c:	84c00515 	stw	r19,20(r16)
   47f60:	81000015 	stw	r4,0(r16)
   47f64:	9027883a 	mov	r19,r18
   47f68:	81c00215 	stw	r7,8(r16)
   47f6c:	902f883a 	mov	r23,r18
   47f70:	003f3806 	br	47c54 <__alt_data_end+0xfffe7c54>
   47f74:	800b883a 	mov	r5,r16
   47f78:	a809883a 	mov	r4,r21
   47f7c:	00416b00 	call	416b0 <_fflush_r>
   47f80:	103fb926 	beq	r2,zero,47e68 <__alt_data_end+0xfffe7e68>
   47f84:	003f6506 	br	47d1c <__alt_data_end+0xfffe7d1c>
   47f88:	a809883a 	mov	r4,r21
   47f8c:	00496100 	call	49610 <_realloc_r>
   47f90:	102f883a 	mov	r23,r2
   47f94:	103fee1e 	bne	r2,zero,47f50 <__alt_data_end+0xfffe7f50>
   47f98:	81400417 	ldw	r5,16(r16)
   47f9c:	a809883a 	mov	r4,r21
   47fa0:	0041e080 	call	41e08 <_free_r>
   47fa4:	8080030b 	ldhu	r2,12(r16)
   47fa8:	00ffdfc4 	movi	r3,-129
   47fac:	1884703a 	and	r2,r3,r2
   47fb0:	00c00304 	movi	r3,12
   47fb4:	a8c00015 	stw	r3,0(r21)
   47fb8:	003f5906 	br	47d20 <__alt_data_end+0xfffe7d20>
   47fbc:	94c00044 	addi	r19,r18,1
   47fc0:	02000044 	movi	r8,1
   47fc4:	003f6006 	br	47d48 <__alt_data_end+0xfffe7d48>
   47fc8:	00bfffc4 	movi	r2,-1
   47fcc:	003f0006 	br	47bd0 <__alt_data_end+0xfffe7bd0>
   47fd0:	00800304 	movi	r2,12
   47fd4:	a8800015 	stw	r2,0(r21)
   47fd8:	8080030b 	ldhu	r2,12(r16)
   47fdc:	003f5006 	br	47d20 <__alt_data_end+0xfffe7d20>

00047fe0 <_isatty_r>:
   47fe0:	defffd04 	addi	sp,sp,-12
   47fe4:	dc000015 	stw	r16,0(sp)
   47fe8:	04000174 	movhi	r16,5
   47fec:	dc400115 	stw	r17,4(sp)
   47ff0:	84146904 	addi	r16,r16,20900
   47ff4:	2023883a 	mov	r17,r4
   47ff8:	2809883a 	mov	r4,r5
   47ffc:	dfc00215 	stw	ra,8(sp)
   48000:	80000015 	stw	zero,0(r16)
   48004:	004e4a80 	call	4e4a8 <isatty>
   48008:	00ffffc4 	movi	r3,-1
   4800c:	10c00526 	beq	r2,r3,48024 <_isatty_r+0x44>
   48010:	dfc00217 	ldw	ra,8(sp)
   48014:	dc400117 	ldw	r17,4(sp)
   48018:	dc000017 	ldw	r16,0(sp)
   4801c:	dec00304 	addi	sp,sp,12
   48020:	f800283a 	ret
   48024:	80c00017 	ldw	r3,0(r16)
   48028:	183ff926 	beq	r3,zero,48010 <__alt_data_end+0xfffe8010>
   4802c:	88c00015 	stw	r3,0(r17)
   48030:	003ff706 	br	48010 <__alt_data_end+0xfffe8010>

00048034 <_setlocale_r>:
   48034:	30001b26 	beq	r6,zero,480a4 <_setlocale_r+0x70>
   48038:	01400174 	movhi	r5,5
   4803c:	defffe04 	addi	sp,sp,-8
   48040:	29461904 	addi	r5,r5,6244
   48044:	3009883a 	mov	r4,r6
   48048:	dc000015 	stw	r16,0(sp)
   4804c:	dfc00115 	stw	ra,4(sp)
   48050:	3021883a 	mov	r16,r6
   48054:	0049be80 	call	49be8 <strcmp>
   48058:	1000061e 	bne	r2,zero,48074 <_setlocale_r+0x40>
   4805c:	00800174 	movhi	r2,5
   48060:	1085fa04 	addi	r2,r2,6120
   48064:	dfc00117 	ldw	ra,4(sp)
   48068:	dc000017 	ldw	r16,0(sp)
   4806c:	dec00204 	addi	sp,sp,8
   48070:	f800283a 	ret
   48074:	01400174 	movhi	r5,5
   48078:	2945fa04 	addi	r5,r5,6120
   4807c:	8009883a 	mov	r4,r16
   48080:	0049be80 	call	49be8 <strcmp>
   48084:	103ff526 	beq	r2,zero,4805c <__alt_data_end+0xfffe805c>
   48088:	01400174 	movhi	r5,5
   4808c:	29460404 	addi	r5,r5,6160
   48090:	8009883a 	mov	r4,r16
   48094:	0049be80 	call	49be8 <strcmp>
   48098:	103ff026 	beq	r2,zero,4805c <__alt_data_end+0xfffe805c>
   4809c:	0005883a 	mov	r2,zero
   480a0:	003ff006 	br	48064 <__alt_data_end+0xfffe8064>
   480a4:	00800174 	movhi	r2,5
   480a8:	1085fa04 	addi	r2,r2,6120
   480ac:	f800283a 	ret

000480b0 <__locale_charset>:
   480b0:	00800174 	movhi	r2,5
   480b4:	1088ae04 	addi	r2,r2,8888
   480b8:	f800283a 	ret

000480bc <__locale_mb_cur_max>:
   480bc:	00800174 	movhi	r2,5
   480c0:	108d5404 	addi	r2,r2,13648
   480c4:	10800017 	ldw	r2,0(r2)
   480c8:	f800283a 	ret

000480cc <__locale_msgcharset>:
   480cc:	00800174 	movhi	r2,5
   480d0:	1088a604 	addi	r2,r2,8856
   480d4:	f800283a 	ret

000480d8 <__locale_cjk_lang>:
   480d8:	0005883a 	mov	r2,zero
   480dc:	f800283a 	ret

000480e0 <_localeconv_r>:
   480e0:	00800174 	movhi	r2,5
   480e4:	1088b604 	addi	r2,r2,8920
   480e8:	f800283a 	ret

000480ec <setlocale>:
   480ec:	00800174 	movhi	r2,5
   480f0:	108d5104 	addi	r2,r2,13636
   480f4:	280d883a 	mov	r6,r5
   480f8:	200b883a 	mov	r5,r4
   480fc:	11000017 	ldw	r4,0(r2)
   48100:	00480341 	jmpi	48034 <_setlocale_r>

00048104 <localeconv>:
   48104:	00800174 	movhi	r2,5
   48108:	1088b604 	addi	r2,r2,8920
   4810c:	f800283a 	ret

00048110 <_lseek_r>:
   48110:	defffd04 	addi	sp,sp,-12
   48114:	2805883a 	mov	r2,r5
   48118:	dc000015 	stw	r16,0(sp)
   4811c:	04000174 	movhi	r16,5
   48120:	dc400115 	stw	r17,4(sp)
   48124:	300b883a 	mov	r5,r6
   48128:	84146904 	addi	r16,r16,20900
   4812c:	2023883a 	mov	r17,r4
   48130:	380d883a 	mov	r6,r7
   48134:	1009883a 	mov	r4,r2
   48138:	dfc00215 	stw	ra,8(sp)
   4813c:	80000015 	stw	zero,0(r16)
   48140:	004e6880 	call	4e688 <lseek>
   48144:	00ffffc4 	movi	r3,-1
   48148:	10c00526 	beq	r2,r3,48160 <_lseek_r+0x50>
   4814c:	dfc00217 	ldw	ra,8(sp)
   48150:	dc400117 	ldw	r17,4(sp)
   48154:	dc000017 	ldw	r16,0(sp)
   48158:	dec00304 	addi	sp,sp,12
   4815c:	f800283a 	ret
   48160:	80c00017 	ldw	r3,0(r16)
   48164:	183ff926 	beq	r3,zero,4814c <__alt_data_end+0xfffe814c>
   48168:	88c00015 	stw	r3,0(r17)
   4816c:	003ff706 	br	4814c <__alt_data_end+0xfffe814c>

00048170 <memchr>:
   48170:	208000cc 	andi	r2,r4,3
   48174:	280f883a 	mov	r7,r5
   48178:	10003426 	beq	r2,zero,4824c <memchr+0xdc>
   4817c:	30bfffc4 	addi	r2,r6,-1
   48180:	30001a26 	beq	r6,zero,481ec <memchr+0x7c>
   48184:	20c00003 	ldbu	r3,0(r4)
   48188:	29803fcc 	andi	r6,r5,255
   4818c:	30c0051e 	bne	r6,r3,481a4 <memchr+0x34>
   48190:	00001806 	br	481f4 <memchr+0x84>
   48194:	10001526 	beq	r2,zero,481ec <memchr+0x7c>
   48198:	20c00003 	ldbu	r3,0(r4)
   4819c:	10bfffc4 	addi	r2,r2,-1
   481a0:	30c01426 	beq	r6,r3,481f4 <memchr+0x84>
   481a4:	21000044 	addi	r4,r4,1
   481a8:	20c000cc 	andi	r3,r4,3
   481ac:	183ff91e 	bne	r3,zero,48194 <__alt_data_end+0xfffe8194>
   481b0:	020000c4 	movi	r8,3
   481b4:	40801136 	bltu	r8,r2,481fc <memchr+0x8c>
   481b8:	10000c26 	beq	r2,zero,481ec <memchr+0x7c>
   481bc:	20c00003 	ldbu	r3,0(r4)
   481c0:	29403fcc 	andi	r5,r5,255
   481c4:	28c00b26 	beq	r5,r3,481f4 <memchr+0x84>
   481c8:	20c00044 	addi	r3,r4,1
   481cc:	39803fcc 	andi	r6,r7,255
   481d0:	2089883a 	add	r4,r4,r2
   481d4:	00000306 	br	481e4 <memchr+0x74>
   481d8:	18c00044 	addi	r3,r3,1
   481dc:	197fffc3 	ldbu	r5,-1(r3)
   481e0:	31400526 	beq	r6,r5,481f8 <memchr+0x88>
   481e4:	1805883a 	mov	r2,r3
   481e8:	20fffb1e 	bne	r4,r3,481d8 <__alt_data_end+0xfffe81d8>
   481ec:	0005883a 	mov	r2,zero
   481f0:	f800283a 	ret
   481f4:	2005883a 	mov	r2,r4
   481f8:	f800283a 	ret
   481fc:	28c03fcc 	andi	r3,r5,255
   48200:	1812923a 	slli	r9,r3,8
   48204:	02ffbff4 	movhi	r11,65279
   48208:	02a02074 	movhi	r10,32897
   4820c:	48d2b03a 	or	r9,r9,r3
   48210:	4806943a 	slli	r3,r9,16
   48214:	5affbfc4 	addi	r11,r11,-257
   48218:	52a02004 	addi	r10,r10,-32640
   4821c:	48d2b03a 	or	r9,r9,r3
   48220:	20c00017 	ldw	r3,0(r4)
   48224:	48c6f03a 	xor	r3,r9,r3
   48228:	1acd883a 	add	r6,r3,r11
   4822c:	00c6303a 	nor	r3,zero,r3
   48230:	30c6703a 	and	r3,r6,r3
   48234:	1a86703a 	and	r3,r3,r10
   48238:	183fe01e 	bne	r3,zero,481bc <__alt_data_end+0xfffe81bc>
   4823c:	10bfff04 	addi	r2,r2,-4
   48240:	21000104 	addi	r4,r4,4
   48244:	40bff636 	bltu	r8,r2,48220 <__alt_data_end+0xfffe8220>
   48248:	003fdb06 	br	481b8 <__alt_data_end+0xfffe81b8>
   4824c:	3005883a 	mov	r2,r6
   48250:	003fd706 	br	481b0 <__alt_data_end+0xfffe81b0>

00048254 <memcpy>:
   48254:	defffd04 	addi	sp,sp,-12
   48258:	dfc00215 	stw	ra,8(sp)
   4825c:	dc400115 	stw	r17,4(sp)
   48260:	dc000015 	stw	r16,0(sp)
   48264:	00c003c4 	movi	r3,15
   48268:	2005883a 	mov	r2,r4
   4826c:	1980452e 	bgeu	r3,r6,48384 <memcpy+0x130>
   48270:	2906b03a 	or	r3,r5,r4
   48274:	18c000cc 	andi	r3,r3,3
   48278:	1800441e 	bne	r3,zero,4838c <memcpy+0x138>
   4827c:	347ffc04 	addi	r17,r6,-16
   48280:	8822d13a 	srli	r17,r17,4
   48284:	28c00104 	addi	r3,r5,4
   48288:	23400104 	addi	r13,r4,4
   4828c:	8820913a 	slli	r16,r17,4
   48290:	2b000204 	addi	r12,r5,8
   48294:	22c00204 	addi	r11,r4,8
   48298:	84000504 	addi	r16,r16,20
   4829c:	2a800304 	addi	r10,r5,12
   482a0:	22400304 	addi	r9,r4,12
   482a4:	2c21883a 	add	r16,r5,r16
   482a8:	2811883a 	mov	r8,r5
   482ac:	200f883a 	mov	r7,r4
   482b0:	41000017 	ldw	r4,0(r8)
   482b4:	1fc00017 	ldw	ra,0(r3)
   482b8:	63c00017 	ldw	r15,0(r12)
   482bc:	39000015 	stw	r4,0(r7)
   482c0:	53800017 	ldw	r14,0(r10)
   482c4:	6fc00015 	stw	ra,0(r13)
   482c8:	5bc00015 	stw	r15,0(r11)
   482cc:	4b800015 	stw	r14,0(r9)
   482d0:	18c00404 	addi	r3,r3,16
   482d4:	39c00404 	addi	r7,r7,16
   482d8:	42000404 	addi	r8,r8,16
   482dc:	6b400404 	addi	r13,r13,16
   482e0:	63000404 	addi	r12,r12,16
   482e4:	5ac00404 	addi	r11,r11,16
   482e8:	52800404 	addi	r10,r10,16
   482ec:	4a400404 	addi	r9,r9,16
   482f0:	1c3fef1e 	bne	r3,r16,482b0 <__alt_data_end+0xfffe82b0>
   482f4:	89c00044 	addi	r7,r17,1
   482f8:	380e913a 	slli	r7,r7,4
   482fc:	310003cc 	andi	r4,r6,15
   48300:	02c000c4 	movi	r11,3
   48304:	11c7883a 	add	r3,r2,r7
   48308:	29cb883a 	add	r5,r5,r7
   4830c:	5900212e 	bgeu	r11,r4,48394 <memcpy+0x140>
   48310:	1813883a 	mov	r9,r3
   48314:	2811883a 	mov	r8,r5
   48318:	200f883a 	mov	r7,r4
   4831c:	42800017 	ldw	r10,0(r8)
   48320:	4a400104 	addi	r9,r9,4
   48324:	39ffff04 	addi	r7,r7,-4
   48328:	4abfff15 	stw	r10,-4(r9)
   4832c:	42000104 	addi	r8,r8,4
   48330:	59fffa36 	bltu	r11,r7,4831c <__alt_data_end+0xfffe831c>
   48334:	213fff04 	addi	r4,r4,-4
   48338:	2008d0ba 	srli	r4,r4,2
   4833c:	318000cc 	andi	r6,r6,3
   48340:	21000044 	addi	r4,r4,1
   48344:	2109883a 	add	r4,r4,r4
   48348:	2109883a 	add	r4,r4,r4
   4834c:	1907883a 	add	r3,r3,r4
   48350:	290b883a 	add	r5,r5,r4
   48354:	30000626 	beq	r6,zero,48370 <memcpy+0x11c>
   48358:	198d883a 	add	r6,r3,r6
   4835c:	29c00003 	ldbu	r7,0(r5)
   48360:	18c00044 	addi	r3,r3,1
   48364:	29400044 	addi	r5,r5,1
   48368:	19ffffc5 	stb	r7,-1(r3)
   4836c:	19bffb1e 	bne	r3,r6,4835c <__alt_data_end+0xfffe835c>
   48370:	dfc00217 	ldw	ra,8(sp)
   48374:	dc400117 	ldw	r17,4(sp)
   48378:	dc000017 	ldw	r16,0(sp)
   4837c:	dec00304 	addi	sp,sp,12
   48380:	f800283a 	ret
   48384:	2007883a 	mov	r3,r4
   48388:	003ff206 	br	48354 <__alt_data_end+0xfffe8354>
   4838c:	2007883a 	mov	r3,r4
   48390:	003ff106 	br	48358 <__alt_data_end+0xfffe8358>
   48394:	200d883a 	mov	r6,r4
   48398:	003fee06 	br	48354 <__alt_data_end+0xfffe8354>

0004839c <memmove>:
   4839c:	2005883a 	mov	r2,r4
   483a0:	29000b2e 	bgeu	r5,r4,483d0 <memmove+0x34>
   483a4:	298f883a 	add	r7,r5,r6
   483a8:	21c0092e 	bgeu	r4,r7,483d0 <memmove+0x34>
   483ac:	2187883a 	add	r3,r4,r6
   483b0:	198bc83a 	sub	r5,r3,r6
   483b4:	30004826 	beq	r6,zero,484d8 <memmove+0x13c>
   483b8:	39ffffc4 	addi	r7,r7,-1
   483bc:	39000003 	ldbu	r4,0(r7)
   483c0:	18ffffc4 	addi	r3,r3,-1
   483c4:	19000005 	stb	r4,0(r3)
   483c8:	28fffb1e 	bne	r5,r3,483b8 <__alt_data_end+0xfffe83b8>
   483cc:	f800283a 	ret
   483d0:	00c003c4 	movi	r3,15
   483d4:	1980412e 	bgeu	r3,r6,484dc <memmove+0x140>
   483d8:	2886b03a 	or	r3,r5,r2
   483dc:	18c000cc 	andi	r3,r3,3
   483e0:	1800401e 	bne	r3,zero,484e4 <memmove+0x148>
   483e4:	33fffc04 	addi	r15,r6,-16
   483e8:	781ed13a 	srli	r15,r15,4
   483ec:	28c00104 	addi	r3,r5,4
   483f0:	13400104 	addi	r13,r2,4
   483f4:	781c913a 	slli	r14,r15,4
   483f8:	2b000204 	addi	r12,r5,8
   483fc:	12c00204 	addi	r11,r2,8
   48400:	73800504 	addi	r14,r14,20
   48404:	2a800304 	addi	r10,r5,12
   48408:	12400304 	addi	r9,r2,12
   4840c:	2b9d883a 	add	r14,r5,r14
   48410:	2811883a 	mov	r8,r5
   48414:	100f883a 	mov	r7,r2
   48418:	41000017 	ldw	r4,0(r8)
   4841c:	39c00404 	addi	r7,r7,16
   48420:	18c00404 	addi	r3,r3,16
   48424:	393ffc15 	stw	r4,-16(r7)
   48428:	193ffc17 	ldw	r4,-16(r3)
   4842c:	6b400404 	addi	r13,r13,16
   48430:	5ac00404 	addi	r11,r11,16
   48434:	693ffc15 	stw	r4,-16(r13)
   48438:	61000017 	ldw	r4,0(r12)
   4843c:	4a400404 	addi	r9,r9,16
   48440:	42000404 	addi	r8,r8,16
   48444:	593ffc15 	stw	r4,-16(r11)
   48448:	51000017 	ldw	r4,0(r10)
   4844c:	63000404 	addi	r12,r12,16
   48450:	52800404 	addi	r10,r10,16
   48454:	493ffc15 	stw	r4,-16(r9)
   48458:	1bbfef1e 	bne	r3,r14,48418 <__alt_data_end+0xfffe8418>
   4845c:	79000044 	addi	r4,r15,1
   48460:	2008913a 	slli	r4,r4,4
   48464:	328003cc 	andi	r10,r6,15
   48468:	02c000c4 	movi	r11,3
   4846c:	1107883a 	add	r3,r2,r4
   48470:	290b883a 	add	r5,r5,r4
   48474:	5a801e2e 	bgeu	r11,r10,484f0 <memmove+0x154>
   48478:	1813883a 	mov	r9,r3
   4847c:	2811883a 	mov	r8,r5
   48480:	500f883a 	mov	r7,r10
   48484:	41000017 	ldw	r4,0(r8)
   48488:	4a400104 	addi	r9,r9,4
   4848c:	39ffff04 	addi	r7,r7,-4
   48490:	493fff15 	stw	r4,-4(r9)
   48494:	42000104 	addi	r8,r8,4
   48498:	59fffa36 	bltu	r11,r7,48484 <__alt_data_end+0xfffe8484>
   4849c:	513fff04 	addi	r4,r10,-4
   484a0:	2008d0ba 	srli	r4,r4,2
   484a4:	318000cc 	andi	r6,r6,3
   484a8:	21000044 	addi	r4,r4,1
   484ac:	2109883a 	add	r4,r4,r4
   484b0:	2109883a 	add	r4,r4,r4
   484b4:	1907883a 	add	r3,r3,r4
   484b8:	290b883a 	add	r5,r5,r4
   484bc:	30000b26 	beq	r6,zero,484ec <memmove+0x150>
   484c0:	198d883a 	add	r6,r3,r6
   484c4:	29c00003 	ldbu	r7,0(r5)
   484c8:	18c00044 	addi	r3,r3,1
   484cc:	29400044 	addi	r5,r5,1
   484d0:	19ffffc5 	stb	r7,-1(r3)
   484d4:	19bffb1e 	bne	r3,r6,484c4 <__alt_data_end+0xfffe84c4>
   484d8:	f800283a 	ret
   484dc:	1007883a 	mov	r3,r2
   484e0:	003ff606 	br	484bc <__alt_data_end+0xfffe84bc>
   484e4:	1007883a 	mov	r3,r2
   484e8:	003ff506 	br	484c0 <__alt_data_end+0xfffe84c0>
   484ec:	f800283a 	ret
   484f0:	500d883a 	mov	r6,r10
   484f4:	003ff106 	br	484bc <__alt_data_end+0xfffe84bc>

000484f8 <_Balloc>:
   484f8:	20801317 	ldw	r2,76(r4)
   484fc:	defffc04 	addi	sp,sp,-16
   48500:	dc400115 	stw	r17,4(sp)
   48504:	dc000015 	stw	r16,0(sp)
   48508:	dfc00315 	stw	ra,12(sp)
   4850c:	dc800215 	stw	r18,8(sp)
   48510:	2023883a 	mov	r17,r4
   48514:	2821883a 	mov	r16,r5
   48518:	10000f26 	beq	r2,zero,48558 <_Balloc+0x60>
   4851c:	8407883a 	add	r3,r16,r16
   48520:	18c7883a 	add	r3,r3,r3
   48524:	10c7883a 	add	r3,r2,r3
   48528:	18800017 	ldw	r2,0(r3)
   4852c:	10001126 	beq	r2,zero,48574 <_Balloc+0x7c>
   48530:	11000017 	ldw	r4,0(r2)
   48534:	19000015 	stw	r4,0(r3)
   48538:	10000415 	stw	zero,16(r2)
   4853c:	10000315 	stw	zero,12(r2)
   48540:	dfc00317 	ldw	ra,12(sp)
   48544:	dc800217 	ldw	r18,8(sp)
   48548:	dc400117 	ldw	r17,4(sp)
   4854c:	dc000017 	ldw	r16,0(sp)
   48550:	dec00404 	addi	sp,sp,16
   48554:	f800283a 	ret
   48558:	01800844 	movi	r6,33
   4855c:	01400104 	movi	r5,4
   48560:	004b3bc0 	call	4b3bc <_calloc_r>
   48564:	88801315 	stw	r2,76(r17)
   48568:	103fec1e 	bne	r2,zero,4851c <__alt_data_end+0xfffe851c>
   4856c:	0005883a 	mov	r2,zero
   48570:	003ff306 	br	48540 <__alt_data_end+0xfffe8540>
   48574:	01400044 	movi	r5,1
   48578:	2c24983a 	sll	r18,r5,r16
   4857c:	8809883a 	mov	r4,r17
   48580:	91800144 	addi	r6,r18,5
   48584:	318d883a 	add	r6,r6,r6
   48588:	318d883a 	add	r6,r6,r6
   4858c:	004b3bc0 	call	4b3bc <_calloc_r>
   48590:	103ff626 	beq	r2,zero,4856c <__alt_data_end+0xfffe856c>
   48594:	14000115 	stw	r16,4(r2)
   48598:	14800215 	stw	r18,8(r2)
   4859c:	003fe606 	br	48538 <__alt_data_end+0xfffe8538>

000485a0 <_Bfree>:
   485a0:	28000826 	beq	r5,zero,485c4 <_Bfree+0x24>
   485a4:	28c00117 	ldw	r3,4(r5)
   485a8:	20801317 	ldw	r2,76(r4)
   485ac:	18c7883a 	add	r3,r3,r3
   485b0:	18c7883a 	add	r3,r3,r3
   485b4:	10c5883a 	add	r2,r2,r3
   485b8:	10c00017 	ldw	r3,0(r2)
   485bc:	28c00015 	stw	r3,0(r5)
   485c0:	11400015 	stw	r5,0(r2)
   485c4:	f800283a 	ret

000485c8 <__multadd>:
   485c8:	defff704 	addi	sp,sp,-36
   485cc:	dc800215 	stw	r18,8(sp)
   485d0:	2c800417 	ldw	r18,16(r5)
   485d4:	dd800615 	stw	r22,24(sp)
   485d8:	dd400515 	stw	r21,20(sp)
   485dc:	dd000415 	stw	r20,16(sp)
   485e0:	dcc00315 	stw	r19,12(sp)
   485e4:	dc400115 	stw	r17,4(sp)
   485e8:	dc000015 	stw	r16,0(sp)
   485ec:	dfc00815 	stw	ra,32(sp)
   485f0:	ddc00715 	stw	r23,28(sp)
   485f4:	2827883a 	mov	r19,r5
   485f8:	2029883a 	mov	r20,r4
   485fc:	3023883a 	mov	r17,r6
   48600:	3821883a 	mov	r16,r7
   48604:	2d400504 	addi	r21,r5,20
   48608:	002d883a 	mov	r22,zero
   4860c:	adc00017 	ldw	r23,0(r21)
   48610:	880b883a 	mov	r5,r17
   48614:	ad400104 	addi	r21,r21,4
   48618:	b93fffcc 	andi	r4,r23,65535
   4861c:	004131c0 	call	4131c <__mulsi3>
   48620:	b808d43a 	srli	r4,r23,16
   48624:	880b883a 	mov	r5,r17
   48628:	1421883a 	add	r16,r2,r16
   4862c:	004131c0 	call	4131c <__mulsi3>
   48630:	800ed43a 	srli	r7,r16,16
   48634:	80ffffcc 	andi	r3,r16,65535
   48638:	b5800044 	addi	r22,r22,1
   4863c:	11c5883a 	add	r2,r2,r7
   48640:	100e943a 	slli	r7,r2,16
   48644:	1020d43a 	srli	r16,r2,16
   48648:	38c7883a 	add	r3,r7,r3
   4864c:	a8ffff15 	stw	r3,-4(r21)
   48650:	b4bfee16 	blt	r22,r18,4860c <__alt_data_end+0xfffe860c>
   48654:	80000926 	beq	r16,zero,4867c <__multadd+0xb4>
   48658:	98800217 	ldw	r2,8(r19)
   4865c:	9080130e 	bge	r18,r2,486ac <__multadd+0xe4>
   48660:	90800144 	addi	r2,r18,5
   48664:	1085883a 	add	r2,r2,r2
   48668:	1085883a 	add	r2,r2,r2
   4866c:	9885883a 	add	r2,r19,r2
   48670:	14000015 	stw	r16,0(r2)
   48674:	94800044 	addi	r18,r18,1
   48678:	9c800415 	stw	r18,16(r19)
   4867c:	9805883a 	mov	r2,r19
   48680:	dfc00817 	ldw	ra,32(sp)
   48684:	ddc00717 	ldw	r23,28(sp)
   48688:	dd800617 	ldw	r22,24(sp)
   4868c:	dd400517 	ldw	r21,20(sp)
   48690:	dd000417 	ldw	r20,16(sp)
   48694:	dcc00317 	ldw	r19,12(sp)
   48698:	dc800217 	ldw	r18,8(sp)
   4869c:	dc400117 	ldw	r17,4(sp)
   486a0:	dc000017 	ldw	r16,0(sp)
   486a4:	dec00904 	addi	sp,sp,36
   486a8:	f800283a 	ret
   486ac:	99400117 	ldw	r5,4(r19)
   486b0:	a009883a 	mov	r4,r20
   486b4:	29400044 	addi	r5,r5,1
   486b8:	00484f80 	call	484f8 <_Balloc>
   486bc:	99800417 	ldw	r6,16(r19)
   486c0:	99400304 	addi	r5,r19,12
   486c4:	11000304 	addi	r4,r2,12
   486c8:	31800084 	addi	r6,r6,2
   486cc:	318d883a 	add	r6,r6,r6
   486d0:	318d883a 	add	r6,r6,r6
   486d4:	1023883a 	mov	r17,r2
   486d8:	00482540 	call	48254 <memcpy>
   486dc:	98000a26 	beq	r19,zero,48708 <__multadd+0x140>
   486e0:	98c00117 	ldw	r3,4(r19)
   486e4:	a0801317 	ldw	r2,76(r20)
   486e8:	18c7883a 	add	r3,r3,r3
   486ec:	18c7883a 	add	r3,r3,r3
   486f0:	10c5883a 	add	r2,r2,r3
   486f4:	10c00017 	ldw	r3,0(r2)
   486f8:	98c00015 	stw	r3,0(r19)
   486fc:	14c00015 	stw	r19,0(r2)
   48700:	8827883a 	mov	r19,r17
   48704:	003fd606 	br	48660 <__alt_data_end+0xfffe8660>
   48708:	8827883a 	mov	r19,r17
   4870c:	003fd406 	br	48660 <__alt_data_end+0xfffe8660>

00048710 <__s2b>:
   48710:	defff904 	addi	sp,sp,-28
   48714:	dc400115 	stw	r17,4(sp)
   48718:	dc000015 	stw	r16,0(sp)
   4871c:	2023883a 	mov	r17,r4
   48720:	2821883a 	mov	r16,r5
   48724:	39000204 	addi	r4,r7,8
   48728:	01400244 	movi	r5,9
   4872c:	dcc00315 	stw	r19,12(sp)
   48730:	dc800215 	stw	r18,8(sp)
   48734:	dfc00615 	stw	ra,24(sp)
   48738:	dd400515 	stw	r21,20(sp)
   4873c:	dd000415 	stw	r20,16(sp)
   48740:	3825883a 	mov	r18,r7
   48744:	3027883a 	mov	r19,r6
   48748:	00411680 	call	41168 <__divsi3>
   4874c:	00c00044 	movi	r3,1
   48750:	000b883a 	mov	r5,zero
   48754:	1880030e 	bge	r3,r2,48764 <__s2b+0x54>
   48758:	18c7883a 	add	r3,r3,r3
   4875c:	29400044 	addi	r5,r5,1
   48760:	18bffd16 	blt	r3,r2,48758 <__alt_data_end+0xfffe8758>
   48764:	8809883a 	mov	r4,r17
   48768:	00484f80 	call	484f8 <_Balloc>
   4876c:	d8c00717 	ldw	r3,28(sp)
   48770:	10c00515 	stw	r3,20(r2)
   48774:	00c00044 	movi	r3,1
   48778:	10c00415 	stw	r3,16(r2)
   4877c:	00c00244 	movi	r3,9
   48780:	1cc0210e 	bge	r3,r19,48808 <__s2b+0xf8>
   48784:	80eb883a 	add	r21,r16,r3
   48788:	a829883a 	mov	r20,r21
   4878c:	84e1883a 	add	r16,r16,r19
   48790:	a1c00007 	ldb	r7,0(r20)
   48794:	01800284 	movi	r6,10
   48798:	a5000044 	addi	r20,r20,1
   4879c:	100b883a 	mov	r5,r2
   487a0:	39fff404 	addi	r7,r7,-48
   487a4:	8809883a 	mov	r4,r17
   487a8:	00485c80 	call	485c8 <__multadd>
   487ac:	a43ff81e 	bne	r20,r16,48790 <__alt_data_end+0xfffe8790>
   487b0:	ace1883a 	add	r16,r21,r19
   487b4:	843ffe04 	addi	r16,r16,-8
   487b8:	9c800a0e 	bge	r19,r18,487e4 <__s2b+0xd4>
   487bc:	94e5c83a 	sub	r18,r18,r19
   487c0:	84a5883a 	add	r18,r16,r18
   487c4:	81c00007 	ldb	r7,0(r16)
   487c8:	01800284 	movi	r6,10
   487cc:	84000044 	addi	r16,r16,1
   487d0:	100b883a 	mov	r5,r2
   487d4:	39fff404 	addi	r7,r7,-48
   487d8:	8809883a 	mov	r4,r17
   487dc:	00485c80 	call	485c8 <__multadd>
   487e0:	84bff81e 	bne	r16,r18,487c4 <__alt_data_end+0xfffe87c4>
   487e4:	dfc00617 	ldw	ra,24(sp)
   487e8:	dd400517 	ldw	r21,20(sp)
   487ec:	dd000417 	ldw	r20,16(sp)
   487f0:	dcc00317 	ldw	r19,12(sp)
   487f4:	dc800217 	ldw	r18,8(sp)
   487f8:	dc400117 	ldw	r17,4(sp)
   487fc:	dc000017 	ldw	r16,0(sp)
   48800:	dec00704 	addi	sp,sp,28
   48804:	f800283a 	ret
   48808:	84000284 	addi	r16,r16,10
   4880c:	1827883a 	mov	r19,r3
   48810:	003fe906 	br	487b8 <__alt_data_end+0xfffe87b8>

00048814 <__hi0bits>:
   48814:	20bfffec 	andhi	r2,r4,65535
   48818:	1000141e 	bne	r2,zero,4886c <__hi0bits+0x58>
   4881c:	2008943a 	slli	r4,r4,16
   48820:	00800404 	movi	r2,16
   48824:	20ffc02c 	andhi	r3,r4,65280
   48828:	1800021e 	bne	r3,zero,48834 <__hi0bits+0x20>
   4882c:	2008923a 	slli	r4,r4,8
   48830:	10800204 	addi	r2,r2,8
   48834:	20fc002c 	andhi	r3,r4,61440
   48838:	1800021e 	bne	r3,zero,48844 <__hi0bits+0x30>
   4883c:	2008913a 	slli	r4,r4,4
   48840:	10800104 	addi	r2,r2,4
   48844:	20f0002c 	andhi	r3,r4,49152
   48848:	1800031e 	bne	r3,zero,48858 <__hi0bits+0x44>
   4884c:	2109883a 	add	r4,r4,r4
   48850:	10800084 	addi	r2,r2,2
   48854:	2109883a 	add	r4,r4,r4
   48858:	20000316 	blt	r4,zero,48868 <__hi0bits+0x54>
   4885c:	2110002c 	andhi	r4,r4,16384
   48860:	2000041e 	bne	r4,zero,48874 <__hi0bits+0x60>
   48864:	00800804 	movi	r2,32
   48868:	f800283a 	ret
   4886c:	0005883a 	mov	r2,zero
   48870:	003fec06 	br	48824 <__alt_data_end+0xfffe8824>
   48874:	10800044 	addi	r2,r2,1
   48878:	f800283a 	ret

0004887c <__lo0bits>:
   4887c:	20c00017 	ldw	r3,0(r4)
   48880:	188001cc 	andi	r2,r3,7
   48884:	10000826 	beq	r2,zero,488a8 <__lo0bits+0x2c>
   48888:	1880004c 	andi	r2,r3,1
   4888c:	1000211e 	bne	r2,zero,48914 <__lo0bits+0x98>
   48890:	1880008c 	andi	r2,r3,2
   48894:	1000211e 	bne	r2,zero,4891c <__lo0bits+0xa0>
   48898:	1806d0ba 	srli	r3,r3,2
   4889c:	00800084 	movi	r2,2
   488a0:	20c00015 	stw	r3,0(r4)
   488a4:	f800283a 	ret
   488a8:	18bfffcc 	andi	r2,r3,65535
   488ac:	10001326 	beq	r2,zero,488fc <__lo0bits+0x80>
   488b0:	0005883a 	mov	r2,zero
   488b4:	19403fcc 	andi	r5,r3,255
   488b8:	2800021e 	bne	r5,zero,488c4 <__lo0bits+0x48>
   488bc:	1806d23a 	srli	r3,r3,8
   488c0:	10800204 	addi	r2,r2,8
   488c4:	194003cc 	andi	r5,r3,15
   488c8:	2800021e 	bne	r5,zero,488d4 <__lo0bits+0x58>
   488cc:	1806d13a 	srli	r3,r3,4
   488d0:	10800104 	addi	r2,r2,4
   488d4:	194000cc 	andi	r5,r3,3
   488d8:	2800021e 	bne	r5,zero,488e4 <__lo0bits+0x68>
   488dc:	1806d0ba 	srli	r3,r3,2
   488e0:	10800084 	addi	r2,r2,2
   488e4:	1940004c 	andi	r5,r3,1
   488e8:	2800081e 	bne	r5,zero,4890c <__lo0bits+0x90>
   488ec:	1806d07a 	srli	r3,r3,1
   488f0:	1800051e 	bne	r3,zero,48908 <__lo0bits+0x8c>
   488f4:	00800804 	movi	r2,32
   488f8:	f800283a 	ret
   488fc:	1806d43a 	srli	r3,r3,16
   48900:	00800404 	movi	r2,16
   48904:	003feb06 	br	488b4 <__alt_data_end+0xfffe88b4>
   48908:	10800044 	addi	r2,r2,1
   4890c:	20c00015 	stw	r3,0(r4)
   48910:	f800283a 	ret
   48914:	0005883a 	mov	r2,zero
   48918:	f800283a 	ret
   4891c:	1806d07a 	srli	r3,r3,1
   48920:	00800044 	movi	r2,1
   48924:	20c00015 	stw	r3,0(r4)
   48928:	f800283a 	ret

0004892c <__i2b>:
   4892c:	defffd04 	addi	sp,sp,-12
   48930:	dc000015 	stw	r16,0(sp)
   48934:	04000044 	movi	r16,1
   48938:	dc400115 	stw	r17,4(sp)
   4893c:	2823883a 	mov	r17,r5
   48940:	800b883a 	mov	r5,r16
   48944:	dfc00215 	stw	ra,8(sp)
   48948:	00484f80 	call	484f8 <_Balloc>
   4894c:	14400515 	stw	r17,20(r2)
   48950:	14000415 	stw	r16,16(r2)
   48954:	dfc00217 	ldw	ra,8(sp)
   48958:	dc400117 	ldw	r17,4(sp)
   4895c:	dc000017 	ldw	r16,0(sp)
   48960:	dec00304 	addi	sp,sp,12
   48964:	f800283a 	ret

00048968 <__multiply>:
   48968:	deffef04 	addi	sp,sp,-68
   4896c:	dc400815 	stw	r17,32(sp)
   48970:	dc000715 	stw	r16,28(sp)
   48974:	34400417 	ldw	r17,16(r6)
   48978:	2c000417 	ldw	r16,16(r5)
   4897c:	dd800d15 	stw	r22,52(sp)
   48980:	dc800915 	stw	r18,36(sp)
   48984:	dfc01015 	stw	ra,64(sp)
   48988:	df000f15 	stw	fp,60(sp)
   4898c:	ddc00e15 	stw	r23,56(sp)
   48990:	dd400c15 	stw	r21,48(sp)
   48994:	dd000b15 	stw	r20,44(sp)
   48998:	dcc00a15 	stw	r19,40(sp)
   4899c:	2825883a 	mov	r18,r5
   489a0:	302d883a 	mov	r22,r6
   489a4:	8440050e 	bge	r16,r17,489bc <__multiply+0x54>
   489a8:	8007883a 	mov	r3,r16
   489ac:	3025883a 	mov	r18,r6
   489b0:	8821883a 	mov	r16,r17
   489b4:	282d883a 	mov	r22,r5
   489b8:	1823883a 	mov	r17,r3
   489bc:	90800217 	ldw	r2,8(r18)
   489c0:	8447883a 	add	r3,r16,r17
   489c4:	d8c00215 	stw	r3,8(sp)
   489c8:	91400117 	ldw	r5,4(r18)
   489cc:	10c0010e 	bge	r2,r3,489d4 <__multiply+0x6c>
   489d0:	29400044 	addi	r5,r5,1
   489d4:	00484f80 	call	484f8 <_Balloc>
   489d8:	d8c00217 	ldw	r3,8(sp)
   489dc:	d8800615 	stw	r2,24(sp)
   489e0:	18eb883a 	add	r21,r3,r3
   489e4:	ad6b883a 	add	r21,r21,r21
   489e8:	10c00504 	addi	r3,r2,20
   489ec:	1d6b883a 	add	r21,r3,r21
   489f0:	d8c00115 	stw	r3,4(sp)
   489f4:	dd400315 	stw	r21,12(sp)
   489f8:	1805883a 	mov	r2,r3
   489fc:	1d40042e 	bgeu	r3,r21,48a10 <__multiply+0xa8>
   48a00:	d8c00317 	ldw	r3,12(sp)
   48a04:	10000015 	stw	zero,0(r2)
   48a08:	10800104 	addi	r2,r2,4
   48a0c:	10fffc36 	bltu	r2,r3,48a00 <__alt_data_end+0xfffe8a00>
   48a10:	8c63883a 	add	r17,r17,r17
   48a14:	b5800504 	addi	r22,r22,20
   48a18:	8c63883a 	add	r17,r17,r17
   48a1c:	94800504 	addi	r18,r18,20
   48a20:	8421883a 	add	r16,r16,r16
   48a24:	b463883a 	add	r17,r22,r17
   48a28:	8421883a 	add	r16,r16,r16
   48a2c:	dd800015 	stw	r22,0(sp)
   48a30:	dc800415 	stw	r18,16(sp)
   48a34:	dc400515 	stw	r17,20(sp)
   48a38:	9429883a 	add	r20,r18,r16
   48a3c:	b4404f2e 	bgeu	r22,r17,48b7c <__multiply+0x214>
   48a40:	d8c00017 	ldw	r3,0(sp)
   48a44:	1c800017 	ldw	r18,0(r3)
   48a48:	947fffcc 	andi	r17,r18,65535
   48a4c:	88001e26 	beq	r17,zero,48ac8 <__multiply+0x160>
   48a50:	dd800117 	ldw	r22,4(sp)
   48a54:	dd400417 	ldw	r21,16(sp)
   48a58:	0027883a 	mov	r19,zero
   48a5c:	ac800017 	ldw	r18,0(r21)
   48a60:	b4000017 	ldw	r16,0(r22)
   48a64:	880b883a 	mov	r5,r17
   48a68:	913fffcc 	andi	r4,r18,65535
   48a6c:	004131c0 	call	4131c <__mulsi3>
   48a70:	9008d43a 	srli	r4,r18,16
   48a74:	84bfffcc 	andi	r18,r16,65535
   48a78:	1485883a 	add	r2,r2,r18
   48a7c:	14e5883a 	add	r18,r2,r19
   48a80:	8020d43a 	srli	r16,r16,16
   48a84:	9026d43a 	srli	r19,r18,16
   48a88:	880b883a 	mov	r5,r17
   48a8c:	004131c0 	call	4131c <__mulsi3>
   48a90:	1405883a 	add	r2,r2,r16
   48a94:	14e1883a 	add	r16,r2,r19
   48a98:	90ffffcc 	andi	r3,r18,65535
   48a9c:	8024943a 	slli	r18,r16,16
   48aa0:	ad400104 	addi	r21,r21,4
   48aa4:	b005883a 	mov	r2,r22
   48aa8:	90c6b03a 	or	r3,r18,r3
   48aac:	b0c00015 	stw	r3,0(r22)
   48ab0:	8026d43a 	srli	r19,r16,16
   48ab4:	b5800104 	addi	r22,r22,4
   48ab8:	ad3fe836 	bltu	r21,r20,48a5c <__alt_data_end+0xfffe8a5c>
   48abc:	d8c00017 	ldw	r3,0(sp)
   48ac0:	14c00115 	stw	r19,4(r2)
   48ac4:	1c800017 	ldw	r18,0(r3)
   48ac8:	9024d43a 	srli	r18,r18,16
   48acc:	90002226 	beq	r18,zero,48b58 <__multiply+0x1f0>
   48ad0:	d8c00117 	ldw	r3,4(sp)
   48ad4:	dd800417 	ldw	r22,16(sp)
   48ad8:	002f883a 	mov	r23,zero
   48adc:	1f000017 	ldw	fp,0(r3)
   48ae0:	1823883a 	mov	r17,r3
   48ae4:	182b883a 	mov	r21,r3
   48ae8:	e021883a 	mov	r16,fp
   48aec:	00000106 	br	48af4 <__multiply+0x18c>
   48af0:	982b883a 	mov	r21,r19
   48af4:	b100000b 	ldhu	r4,0(r22)
   48af8:	8020d43a 	srli	r16,r16,16
   48afc:	900b883a 	mov	r5,r18
   48b00:	004131c0 	call	4131c <__mulsi3>
   48b04:	1405883a 	add	r2,r2,r16
   48b08:	15ef883a 	add	r23,r2,r23
   48b0c:	b804943a 	slli	r2,r23,16
   48b10:	e0ffffcc 	andi	r3,fp,65535
   48b14:	8c400104 	addi	r17,r17,4
   48b18:	10c6b03a 	or	r3,r2,r3
   48b1c:	88ffff15 	stw	r3,-4(r17)
   48b20:	b5800104 	addi	r22,r22,4
   48b24:	b13fff17 	ldw	r4,-4(r22)
   48b28:	acc00104 	addi	r19,r21,4
   48b2c:	900b883a 	mov	r5,r18
   48b30:	2008d43a 	srli	r4,r4,16
   48b34:	9c000017 	ldw	r16,0(r19)
   48b38:	004131c0 	call	4131c <__mulsi3>
   48b3c:	b806d43a 	srli	r3,r23,16
   48b40:	813fffcc 	andi	r4,r16,65535
   48b44:	1105883a 	add	r2,r2,r4
   48b48:	10f9883a 	add	fp,r2,r3
   48b4c:	e02ed43a 	srli	r23,fp,16
   48b50:	b53fe736 	bltu	r22,r20,48af0 <__alt_data_end+0xfffe8af0>
   48b54:	af000115 	stw	fp,4(r21)
   48b58:	d8c00017 	ldw	r3,0(sp)
   48b5c:	d9000517 	ldw	r4,20(sp)
   48b60:	18c00104 	addi	r3,r3,4
   48b64:	d8c00015 	stw	r3,0(sp)
   48b68:	d8c00117 	ldw	r3,4(sp)
   48b6c:	18c00104 	addi	r3,r3,4
   48b70:	d8c00115 	stw	r3,4(sp)
   48b74:	d8c00017 	ldw	r3,0(sp)
   48b78:	193fb136 	bltu	r3,r4,48a40 <__alt_data_end+0xfffe8a40>
   48b7c:	d8c00217 	ldw	r3,8(sp)
   48b80:	00c00c0e 	bge	zero,r3,48bb4 <__multiply+0x24c>
   48b84:	d8c00317 	ldw	r3,12(sp)
   48b88:	18bfff17 	ldw	r2,-4(r3)
   48b8c:	1d7fff04 	addi	r21,r3,-4
   48b90:	10000326 	beq	r2,zero,48ba0 <__multiply+0x238>
   48b94:	00000706 	br	48bb4 <__multiply+0x24c>
   48b98:	a8800017 	ldw	r2,0(r21)
   48b9c:	1000051e 	bne	r2,zero,48bb4 <__multiply+0x24c>
   48ba0:	d8c00217 	ldw	r3,8(sp)
   48ba4:	ad7fff04 	addi	r21,r21,-4
   48ba8:	18ffffc4 	addi	r3,r3,-1
   48bac:	d8c00215 	stw	r3,8(sp)
   48bb0:	183ff91e 	bne	r3,zero,48b98 <__alt_data_end+0xfffe8b98>
   48bb4:	d8c00617 	ldw	r3,24(sp)
   48bb8:	d9000217 	ldw	r4,8(sp)
   48bbc:	1805883a 	mov	r2,r3
   48bc0:	19000415 	stw	r4,16(r3)
   48bc4:	dfc01017 	ldw	ra,64(sp)
   48bc8:	df000f17 	ldw	fp,60(sp)
   48bcc:	ddc00e17 	ldw	r23,56(sp)
   48bd0:	dd800d17 	ldw	r22,52(sp)
   48bd4:	dd400c17 	ldw	r21,48(sp)
   48bd8:	dd000b17 	ldw	r20,44(sp)
   48bdc:	dcc00a17 	ldw	r19,40(sp)
   48be0:	dc800917 	ldw	r18,36(sp)
   48be4:	dc400817 	ldw	r17,32(sp)
   48be8:	dc000717 	ldw	r16,28(sp)
   48bec:	dec01104 	addi	sp,sp,68
   48bf0:	f800283a 	ret

00048bf4 <__pow5mult>:
   48bf4:	defffa04 	addi	sp,sp,-24
   48bf8:	dcc00315 	stw	r19,12(sp)
   48bfc:	dc000015 	stw	r16,0(sp)
   48c00:	dfc00515 	stw	ra,20(sp)
   48c04:	dd000415 	stw	r20,16(sp)
   48c08:	dc800215 	stw	r18,8(sp)
   48c0c:	dc400115 	stw	r17,4(sp)
   48c10:	308000cc 	andi	r2,r6,3
   48c14:	3021883a 	mov	r16,r6
   48c18:	2027883a 	mov	r19,r4
   48c1c:	10002f1e 	bne	r2,zero,48cdc <__pow5mult+0xe8>
   48c20:	2825883a 	mov	r18,r5
   48c24:	8021d0ba 	srai	r16,r16,2
   48c28:	80001a26 	beq	r16,zero,48c94 <__pow5mult+0xa0>
   48c2c:	9c401217 	ldw	r17,72(r19)
   48c30:	8800061e 	bne	r17,zero,48c4c <__pow5mult+0x58>
   48c34:	00003406 	br	48d08 <__pow5mult+0x114>
   48c38:	8021d07a 	srai	r16,r16,1
   48c3c:	80001526 	beq	r16,zero,48c94 <__pow5mult+0xa0>
   48c40:	88800017 	ldw	r2,0(r17)
   48c44:	10001c26 	beq	r2,zero,48cb8 <__pow5mult+0xc4>
   48c48:	1023883a 	mov	r17,r2
   48c4c:	8080004c 	andi	r2,r16,1
   48c50:	103ff926 	beq	r2,zero,48c38 <__alt_data_end+0xfffe8c38>
   48c54:	880d883a 	mov	r6,r17
   48c58:	900b883a 	mov	r5,r18
   48c5c:	9809883a 	mov	r4,r19
   48c60:	00489680 	call	48968 <__multiply>
   48c64:	90001b26 	beq	r18,zero,48cd4 <__pow5mult+0xe0>
   48c68:	91000117 	ldw	r4,4(r18)
   48c6c:	98c01317 	ldw	r3,76(r19)
   48c70:	8021d07a 	srai	r16,r16,1
   48c74:	2109883a 	add	r4,r4,r4
   48c78:	2109883a 	add	r4,r4,r4
   48c7c:	1907883a 	add	r3,r3,r4
   48c80:	19000017 	ldw	r4,0(r3)
   48c84:	91000015 	stw	r4,0(r18)
   48c88:	1c800015 	stw	r18,0(r3)
   48c8c:	1025883a 	mov	r18,r2
   48c90:	803feb1e 	bne	r16,zero,48c40 <__alt_data_end+0xfffe8c40>
   48c94:	9005883a 	mov	r2,r18
   48c98:	dfc00517 	ldw	ra,20(sp)
   48c9c:	dd000417 	ldw	r20,16(sp)
   48ca0:	dcc00317 	ldw	r19,12(sp)
   48ca4:	dc800217 	ldw	r18,8(sp)
   48ca8:	dc400117 	ldw	r17,4(sp)
   48cac:	dc000017 	ldw	r16,0(sp)
   48cb0:	dec00604 	addi	sp,sp,24
   48cb4:	f800283a 	ret
   48cb8:	880d883a 	mov	r6,r17
   48cbc:	880b883a 	mov	r5,r17
   48cc0:	9809883a 	mov	r4,r19
   48cc4:	00489680 	call	48968 <__multiply>
   48cc8:	88800015 	stw	r2,0(r17)
   48ccc:	10000015 	stw	zero,0(r2)
   48cd0:	003fdd06 	br	48c48 <__alt_data_end+0xfffe8c48>
   48cd4:	1025883a 	mov	r18,r2
   48cd8:	003fd706 	br	48c38 <__alt_data_end+0xfffe8c38>
   48cdc:	10bfffc4 	addi	r2,r2,-1
   48ce0:	1085883a 	add	r2,r2,r2
   48ce4:	00c00174 	movhi	r3,5
   48ce8:	18c61c04 	addi	r3,r3,6256
   48cec:	1085883a 	add	r2,r2,r2
   48cf0:	1885883a 	add	r2,r3,r2
   48cf4:	11800017 	ldw	r6,0(r2)
   48cf8:	000f883a 	mov	r7,zero
   48cfc:	00485c80 	call	485c8 <__multadd>
   48d00:	1025883a 	mov	r18,r2
   48d04:	003fc706 	br	48c24 <__alt_data_end+0xfffe8c24>
   48d08:	05000044 	movi	r20,1
   48d0c:	a00b883a 	mov	r5,r20
   48d10:	9809883a 	mov	r4,r19
   48d14:	00484f80 	call	484f8 <_Balloc>
   48d18:	1023883a 	mov	r17,r2
   48d1c:	00809c44 	movi	r2,625
   48d20:	88800515 	stw	r2,20(r17)
   48d24:	8d000415 	stw	r20,16(r17)
   48d28:	9c401215 	stw	r17,72(r19)
   48d2c:	88000015 	stw	zero,0(r17)
   48d30:	003fc606 	br	48c4c <__alt_data_end+0xfffe8c4c>

00048d34 <__lshift>:
   48d34:	defff904 	addi	sp,sp,-28
   48d38:	dd400515 	stw	r21,20(sp)
   48d3c:	dcc00315 	stw	r19,12(sp)
   48d40:	302bd17a 	srai	r21,r6,5
   48d44:	2cc00417 	ldw	r19,16(r5)
   48d48:	28800217 	ldw	r2,8(r5)
   48d4c:	dd000415 	stw	r20,16(sp)
   48d50:	ace7883a 	add	r19,r21,r19
   48d54:	dc800215 	stw	r18,8(sp)
   48d58:	dc400115 	stw	r17,4(sp)
   48d5c:	dc000015 	stw	r16,0(sp)
   48d60:	dfc00615 	stw	ra,24(sp)
   48d64:	9c000044 	addi	r16,r19,1
   48d68:	2823883a 	mov	r17,r5
   48d6c:	3029883a 	mov	r20,r6
   48d70:	2025883a 	mov	r18,r4
   48d74:	29400117 	ldw	r5,4(r5)
   48d78:	1400030e 	bge	r2,r16,48d88 <__lshift+0x54>
   48d7c:	1085883a 	add	r2,r2,r2
   48d80:	29400044 	addi	r5,r5,1
   48d84:	143ffd16 	blt	r2,r16,48d7c <__alt_data_end+0xfffe8d7c>
   48d88:	9009883a 	mov	r4,r18
   48d8c:	00484f80 	call	484f8 <_Balloc>
   48d90:	10c00504 	addi	r3,r2,20
   48d94:	0540070e 	bge	zero,r21,48db4 <__lshift+0x80>
   48d98:	ad6b883a 	add	r21,r21,r21
   48d9c:	ad6b883a 	add	r21,r21,r21
   48da0:	1809883a 	mov	r4,r3
   48da4:	1d47883a 	add	r3,r3,r21
   48da8:	20000015 	stw	zero,0(r4)
   48dac:	21000104 	addi	r4,r4,4
   48db0:	193ffd1e 	bne	r3,r4,48da8 <__alt_data_end+0xfffe8da8>
   48db4:	8a000417 	ldw	r8,16(r17)
   48db8:	89000504 	addi	r4,r17,20
   48dbc:	a18007cc 	andi	r6,r20,31
   48dc0:	4211883a 	add	r8,r8,r8
   48dc4:	4211883a 	add	r8,r8,r8
   48dc8:	2211883a 	add	r8,r4,r8
   48dcc:	30002326 	beq	r6,zero,48e5c <__lshift+0x128>
   48dd0:	02400804 	movi	r9,32
   48dd4:	4993c83a 	sub	r9,r9,r6
   48dd8:	000b883a 	mov	r5,zero
   48ddc:	21c00017 	ldw	r7,0(r4)
   48de0:	1815883a 	mov	r10,r3
   48de4:	18c00104 	addi	r3,r3,4
   48de8:	398e983a 	sll	r7,r7,r6
   48dec:	21000104 	addi	r4,r4,4
   48df0:	394ab03a 	or	r5,r7,r5
   48df4:	197fff15 	stw	r5,-4(r3)
   48df8:	217fff17 	ldw	r5,-4(r4)
   48dfc:	2a4ad83a 	srl	r5,r5,r9
   48e00:	223ff636 	bltu	r4,r8,48ddc <__alt_data_end+0xfffe8ddc>
   48e04:	51400115 	stw	r5,4(r10)
   48e08:	28001a1e 	bne	r5,zero,48e74 <__lshift+0x140>
   48e0c:	843fffc4 	addi	r16,r16,-1
   48e10:	14000415 	stw	r16,16(r2)
   48e14:	88000826 	beq	r17,zero,48e38 <__lshift+0x104>
   48e18:	89000117 	ldw	r4,4(r17)
   48e1c:	90c01317 	ldw	r3,76(r18)
   48e20:	2109883a 	add	r4,r4,r4
   48e24:	2109883a 	add	r4,r4,r4
   48e28:	1907883a 	add	r3,r3,r4
   48e2c:	19000017 	ldw	r4,0(r3)
   48e30:	89000015 	stw	r4,0(r17)
   48e34:	1c400015 	stw	r17,0(r3)
   48e38:	dfc00617 	ldw	ra,24(sp)
   48e3c:	dd400517 	ldw	r21,20(sp)
   48e40:	dd000417 	ldw	r20,16(sp)
   48e44:	dcc00317 	ldw	r19,12(sp)
   48e48:	dc800217 	ldw	r18,8(sp)
   48e4c:	dc400117 	ldw	r17,4(sp)
   48e50:	dc000017 	ldw	r16,0(sp)
   48e54:	dec00704 	addi	sp,sp,28
   48e58:	f800283a 	ret
   48e5c:	21400017 	ldw	r5,0(r4)
   48e60:	18c00104 	addi	r3,r3,4
   48e64:	21000104 	addi	r4,r4,4
   48e68:	197fff15 	stw	r5,-4(r3)
   48e6c:	223ffb36 	bltu	r4,r8,48e5c <__alt_data_end+0xfffe8e5c>
   48e70:	003fe606 	br	48e0c <__alt_data_end+0xfffe8e0c>
   48e74:	9c000084 	addi	r16,r19,2
   48e78:	003fe406 	br	48e0c <__alt_data_end+0xfffe8e0c>

00048e7c <__mcmp>:
   48e7c:	20800417 	ldw	r2,16(r4)
   48e80:	28c00417 	ldw	r3,16(r5)
   48e84:	10c5c83a 	sub	r2,r2,r3
   48e88:	1000111e 	bne	r2,zero,48ed0 <__mcmp+0x54>
   48e8c:	18c7883a 	add	r3,r3,r3
   48e90:	18c7883a 	add	r3,r3,r3
   48e94:	21000504 	addi	r4,r4,20
   48e98:	29400504 	addi	r5,r5,20
   48e9c:	20c5883a 	add	r2,r4,r3
   48ea0:	28cb883a 	add	r5,r5,r3
   48ea4:	00000106 	br	48eac <__mcmp+0x30>
   48ea8:	20800a2e 	bgeu	r4,r2,48ed4 <__mcmp+0x58>
   48eac:	10bfff04 	addi	r2,r2,-4
   48eb0:	297fff04 	addi	r5,r5,-4
   48eb4:	11800017 	ldw	r6,0(r2)
   48eb8:	28c00017 	ldw	r3,0(r5)
   48ebc:	30fffa26 	beq	r6,r3,48ea8 <__alt_data_end+0xfffe8ea8>
   48ec0:	30c00236 	bltu	r6,r3,48ecc <__mcmp+0x50>
   48ec4:	00800044 	movi	r2,1
   48ec8:	f800283a 	ret
   48ecc:	00bfffc4 	movi	r2,-1
   48ed0:	f800283a 	ret
   48ed4:	0005883a 	mov	r2,zero
   48ed8:	f800283a 	ret

00048edc <__mdiff>:
   48edc:	28c00417 	ldw	r3,16(r5)
   48ee0:	30800417 	ldw	r2,16(r6)
   48ee4:	defffa04 	addi	sp,sp,-24
   48ee8:	dcc00315 	stw	r19,12(sp)
   48eec:	dc800215 	stw	r18,8(sp)
   48ef0:	dfc00515 	stw	ra,20(sp)
   48ef4:	dd000415 	stw	r20,16(sp)
   48ef8:	dc400115 	stw	r17,4(sp)
   48efc:	dc000015 	stw	r16,0(sp)
   48f00:	1887c83a 	sub	r3,r3,r2
   48f04:	2825883a 	mov	r18,r5
   48f08:	3027883a 	mov	r19,r6
   48f0c:	1800141e 	bne	r3,zero,48f60 <__mdiff+0x84>
   48f10:	1085883a 	add	r2,r2,r2
   48f14:	1085883a 	add	r2,r2,r2
   48f18:	2a000504 	addi	r8,r5,20
   48f1c:	34000504 	addi	r16,r6,20
   48f20:	4087883a 	add	r3,r8,r2
   48f24:	8085883a 	add	r2,r16,r2
   48f28:	00000106 	br	48f30 <__mdiff+0x54>
   48f2c:	40c0592e 	bgeu	r8,r3,49094 <__mdiff+0x1b8>
   48f30:	18ffff04 	addi	r3,r3,-4
   48f34:	10bfff04 	addi	r2,r2,-4
   48f38:	19c00017 	ldw	r7,0(r3)
   48f3c:	11400017 	ldw	r5,0(r2)
   48f40:	397ffa26 	beq	r7,r5,48f2c <__alt_data_end+0xfffe8f2c>
   48f44:	3940592e 	bgeu	r7,r5,490ac <__mdiff+0x1d0>
   48f48:	9005883a 	mov	r2,r18
   48f4c:	4023883a 	mov	r17,r8
   48f50:	9825883a 	mov	r18,r19
   48f54:	05000044 	movi	r20,1
   48f58:	1027883a 	mov	r19,r2
   48f5c:	00000406 	br	48f70 <__mdiff+0x94>
   48f60:	18005616 	blt	r3,zero,490bc <__mdiff+0x1e0>
   48f64:	34400504 	addi	r17,r6,20
   48f68:	2c000504 	addi	r16,r5,20
   48f6c:	0029883a 	mov	r20,zero
   48f70:	91400117 	ldw	r5,4(r18)
   48f74:	00484f80 	call	484f8 <_Balloc>
   48f78:	92400417 	ldw	r9,16(r18)
   48f7c:	9b000417 	ldw	r12,16(r19)
   48f80:	12c00504 	addi	r11,r2,20
   48f84:	4a51883a 	add	r8,r9,r9
   48f88:	6319883a 	add	r12,r12,r12
   48f8c:	4211883a 	add	r8,r8,r8
   48f90:	6319883a 	add	r12,r12,r12
   48f94:	15000315 	stw	r20,12(r2)
   48f98:	8211883a 	add	r8,r16,r8
   48f9c:	8b19883a 	add	r12,r17,r12
   48fa0:	0007883a 	mov	r3,zero
   48fa4:	81400017 	ldw	r5,0(r16)
   48fa8:	89c00017 	ldw	r7,0(r17)
   48fac:	59800104 	addi	r6,r11,4
   48fb0:	293fffcc 	andi	r4,r5,65535
   48fb4:	20c7883a 	add	r3,r4,r3
   48fb8:	393fffcc 	andi	r4,r7,65535
   48fbc:	1909c83a 	sub	r4,r3,r4
   48fc0:	280ad43a 	srli	r5,r5,16
   48fc4:	380ed43a 	srli	r7,r7,16
   48fc8:	2007d43a 	srai	r3,r4,16
   48fcc:	213fffcc 	andi	r4,r4,65535
   48fd0:	29cbc83a 	sub	r5,r5,r7
   48fd4:	28c7883a 	add	r3,r5,r3
   48fd8:	180a943a 	slli	r5,r3,16
   48fdc:	8c400104 	addi	r17,r17,4
   48fe0:	84000104 	addi	r16,r16,4
   48fe4:	2908b03a 	or	r4,r5,r4
   48fe8:	59000015 	stw	r4,0(r11)
   48fec:	1807d43a 	srai	r3,r3,16
   48ff0:	3015883a 	mov	r10,r6
   48ff4:	3017883a 	mov	r11,r6
   48ff8:	8b3fea36 	bltu	r17,r12,48fa4 <__alt_data_end+0xfffe8fa4>
   48ffc:	8200162e 	bgeu	r16,r8,49058 <__mdiff+0x17c>
   49000:	8017883a 	mov	r11,r16
   49004:	59400017 	ldw	r5,0(r11)
   49008:	31800104 	addi	r6,r6,4
   4900c:	5ac00104 	addi	r11,r11,4
   49010:	293fffcc 	andi	r4,r5,65535
   49014:	20c7883a 	add	r3,r4,r3
   49018:	280ed43a 	srli	r7,r5,16
   4901c:	180bd43a 	srai	r5,r3,16
   49020:	193fffcc 	andi	r4,r3,65535
   49024:	3947883a 	add	r3,r7,r5
   49028:	180a943a 	slli	r5,r3,16
   4902c:	1807d43a 	srai	r3,r3,16
   49030:	2908b03a 	or	r4,r5,r4
   49034:	313fff15 	stw	r4,-4(r6)
   49038:	5a3ff236 	bltu	r11,r8,49004 <__alt_data_end+0xfffe9004>
   4903c:	0406303a 	nor	r3,zero,r16
   49040:	1a07883a 	add	r3,r3,r8
   49044:	1806d0ba 	srli	r3,r3,2
   49048:	18c00044 	addi	r3,r3,1
   4904c:	18c7883a 	add	r3,r3,r3
   49050:	18c7883a 	add	r3,r3,r3
   49054:	50d5883a 	add	r10,r10,r3
   49058:	50ffff04 	addi	r3,r10,-4
   4905c:	2000041e 	bne	r4,zero,49070 <__mdiff+0x194>
   49060:	18ffff04 	addi	r3,r3,-4
   49064:	19000017 	ldw	r4,0(r3)
   49068:	4a7fffc4 	addi	r9,r9,-1
   4906c:	203ffc26 	beq	r4,zero,49060 <__alt_data_end+0xfffe9060>
   49070:	12400415 	stw	r9,16(r2)
   49074:	dfc00517 	ldw	ra,20(sp)
   49078:	dd000417 	ldw	r20,16(sp)
   4907c:	dcc00317 	ldw	r19,12(sp)
   49080:	dc800217 	ldw	r18,8(sp)
   49084:	dc400117 	ldw	r17,4(sp)
   49088:	dc000017 	ldw	r16,0(sp)
   4908c:	dec00604 	addi	sp,sp,24
   49090:	f800283a 	ret
   49094:	000b883a 	mov	r5,zero
   49098:	00484f80 	call	484f8 <_Balloc>
   4909c:	00c00044 	movi	r3,1
   490a0:	10c00415 	stw	r3,16(r2)
   490a4:	10000515 	stw	zero,20(r2)
   490a8:	003ff206 	br	49074 <__alt_data_end+0xfffe9074>
   490ac:	8023883a 	mov	r17,r16
   490b0:	0029883a 	mov	r20,zero
   490b4:	4021883a 	mov	r16,r8
   490b8:	003fad06 	br	48f70 <__alt_data_end+0xfffe8f70>
   490bc:	9005883a 	mov	r2,r18
   490c0:	94400504 	addi	r17,r18,20
   490c4:	9c000504 	addi	r16,r19,20
   490c8:	9825883a 	mov	r18,r19
   490cc:	05000044 	movi	r20,1
   490d0:	1027883a 	mov	r19,r2
   490d4:	003fa606 	br	48f70 <__alt_data_end+0xfffe8f70>

000490d8 <__ulp>:
   490d8:	295ffc2c 	andhi	r5,r5,32752
   490dc:	00bf3034 	movhi	r2,64704
   490e0:	2887883a 	add	r3,r5,r2
   490e4:	00c0020e 	bge	zero,r3,490f0 <__ulp+0x18>
   490e8:	0005883a 	mov	r2,zero
   490ec:	f800283a 	ret
   490f0:	00c7c83a 	sub	r3,zero,r3
   490f4:	1807d53a 	srai	r3,r3,20
   490f8:	008004c4 	movi	r2,19
   490fc:	10c00b0e 	bge	r2,r3,4912c <__ulp+0x54>
   49100:	18bffb04 	addi	r2,r3,-20
   49104:	01000784 	movi	r4,30
   49108:	0007883a 	mov	r3,zero
   4910c:	20800516 	blt	r4,r2,49124 <__ulp+0x4c>
   49110:	010007c4 	movi	r4,31
   49114:	2089c83a 	sub	r4,r4,r2
   49118:	00800044 	movi	r2,1
   4911c:	1104983a 	sll	r2,r2,r4
   49120:	f800283a 	ret
   49124:	00800044 	movi	r2,1
   49128:	f800283a 	ret
   4912c:	01400234 	movhi	r5,8
   49130:	28c7d83a 	sra	r3,r5,r3
   49134:	0005883a 	mov	r2,zero
   49138:	f800283a 	ret

0004913c <__b2d>:
   4913c:	defffa04 	addi	sp,sp,-24
   49140:	dc000015 	stw	r16,0(sp)
   49144:	24000417 	ldw	r16,16(r4)
   49148:	dc400115 	stw	r17,4(sp)
   4914c:	24400504 	addi	r17,r4,20
   49150:	8421883a 	add	r16,r16,r16
   49154:	8421883a 	add	r16,r16,r16
   49158:	8c21883a 	add	r16,r17,r16
   4915c:	dc800215 	stw	r18,8(sp)
   49160:	84bfff17 	ldw	r18,-4(r16)
   49164:	dd000415 	stw	r20,16(sp)
   49168:	dcc00315 	stw	r19,12(sp)
   4916c:	9009883a 	mov	r4,r18
   49170:	2829883a 	mov	r20,r5
   49174:	dfc00515 	stw	ra,20(sp)
   49178:	00488140 	call	48814 <__hi0bits>
   4917c:	00c00804 	movi	r3,32
   49180:	1889c83a 	sub	r4,r3,r2
   49184:	a1000015 	stw	r4,0(r20)
   49188:	01000284 	movi	r4,10
   4918c:	84ffff04 	addi	r19,r16,-4
   49190:	20801216 	blt	r4,r2,491dc <__b2d+0xa0>
   49194:	018002c4 	movi	r6,11
   49198:	308dc83a 	sub	r6,r6,r2
   4919c:	9186d83a 	srl	r3,r18,r6
   491a0:	18cffc34 	orhi	r3,r3,16368
   491a4:	8cc0212e 	bgeu	r17,r19,4922c <__b2d+0xf0>
   491a8:	813ffe17 	ldw	r4,-8(r16)
   491ac:	218cd83a 	srl	r6,r4,r6
   491b0:	10800544 	addi	r2,r2,21
   491b4:	9084983a 	sll	r2,r18,r2
   491b8:	1184b03a 	or	r2,r2,r6
   491bc:	dfc00517 	ldw	ra,20(sp)
   491c0:	dd000417 	ldw	r20,16(sp)
   491c4:	dcc00317 	ldw	r19,12(sp)
   491c8:	dc800217 	ldw	r18,8(sp)
   491cc:	dc400117 	ldw	r17,4(sp)
   491d0:	dc000017 	ldw	r16,0(sp)
   491d4:	dec00604 	addi	sp,sp,24
   491d8:	f800283a 	ret
   491dc:	8cc00f2e 	bgeu	r17,r19,4921c <__b2d+0xe0>
   491e0:	117ffd44 	addi	r5,r2,-11
   491e4:	80bffe17 	ldw	r2,-8(r16)
   491e8:	28000e26 	beq	r5,zero,49224 <__b2d+0xe8>
   491ec:	1949c83a 	sub	r4,r3,r5
   491f0:	9164983a 	sll	r18,r18,r5
   491f4:	1106d83a 	srl	r3,r2,r4
   491f8:	81bffe04 	addi	r6,r16,-8
   491fc:	948ffc34 	orhi	r18,r18,16368
   49200:	90c6b03a 	or	r3,r18,r3
   49204:	89800e2e 	bgeu	r17,r6,49240 <__b2d+0x104>
   49208:	81bffd17 	ldw	r6,-12(r16)
   4920c:	1144983a 	sll	r2,r2,r5
   49210:	310ad83a 	srl	r5,r6,r4
   49214:	2884b03a 	or	r2,r5,r2
   49218:	003fe806 	br	491bc <__alt_data_end+0xfffe91bc>
   4921c:	10bffd44 	addi	r2,r2,-11
   49220:	1000041e 	bne	r2,zero,49234 <__b2d+0xf8>
   49224:	90cffc34 	orhi	r3,r18,16368
   49228:	003fe406 	br	491bc <__alt_data_end+0xfffe91bc>
   4922c:	000d883a 	mov	r6,zero
   49230:	003fdf06 	br	491b0 <__alt_data_end+0xfffe91b0>
   49234:	90a4983a 	sll	r18,r18,r2
   49238:	0005883a 	mov	r2,zero
   4923c:	003ff906 	br	49224 <__alt_data_end+0xfffe9224>
   49240:	1144983a 	sll	r2,r2,r5
   49244:	003fdd06 	br	491bc <__alt_data_end+0xfffe91bc>

00049248 <__d2b>:
   49248:	defff804 	addi	sp,sp,-32
   4924c:	dc000215 	stw	r16,8(sp)
   49250:	3021883a 	mov	r16,r6
   49254:	dc400315 	stw	r17,12(sp)
   49258:	8022907a 	slli	r17,r16,1
   4925c:	dd000615 	stw	r20,24(sp)
   49260:	2829883a 	mov	r20,r5
   49264:	01400044 	movi	r5,1
   49268:	dcc00515 	stw	r19,20(sp)
   4926c:	dc800415 	stw	r18,16(sp)
   49270:	dfc00715 	stw	ra,28(sp)
   49274:	3825883a 	mov	r18,r7
   49278:	8822d57a 	srli	r17,r17,21
   4927c:	00484f80 	call	484f8 <_Balloc>
   49280:	1027883a 	mov	r19,r2
   49284:	00800434 	movhi	r2,16
   49288:	10bfffc4 	addi	r2,r2,-1
   4928c:	808c703a 	and	r6,r16,r2
   49290:	88000126 	beq	r17,zero,49298 <__d2b+0x50>
   49294:	31800434 	orhi	r6,r6,16
   49298:	d9800015 	stw	r6,0(sp)
   4929c:	a0002426 	beq	r20,zero,49330 <__d2b+0xe8>
   492a0:	d9000104 	addi	r4,sp,4
   492a4:	dd000115 	stw	r20,4(sp)
   492a8:	004887c0 	call	4887c <__lo0bits>
   492ac:	d8c00017 	ldw	r3,0(sp)
   492b0:	10002f1e 	bne	r2,zero,49370 <__d2b+0x128>
   492b4:	d9000117 	ldw	r4,4(sp)
   492b8:	99000515 	stw	r4,20(r19)
   492bc:	1821003a 	cmpeq	r16,r3,zero
   492c0:	01000084 	movi	r4,2
   492c4:	2421c83a 	sub	r16,r4,r16
   492c8:	98c00615 	stw	r3,24(r19)
   492cc:	9c000415 	stw	r16,16(r19)
   492d0:	88001f1e 	bne	r17,zero,49350 <__d2b+0x108>
   492d4:	10bef384 	addi	r2,r2,-1074
   492d8:	90800015 	stw	r2,0(r18)
   492dc:	00900034 	movhi	r2,16384
   492e0:	10bfffc4 	addi	r2,r2,-1
   492e4:	8085883a 	add	r2,r16,r2
   492e8:	1085883a 	add	r2,r2,r2
   492ec:	1085883a 	add	r2,r2,r2
   492f0:	9885883a 	add	r2,r19,r2
   492f4:	11000517 	ldw	r4,20(r2)
   492f8:	8020917a 	slli	r16,r16,5
   492fc:	00488140 	call	48814 <__hi0bits>
   49300:	d8c00817 	ldw	r3,32(sp)
   49304:	8085c83a 	sub	r2,r16,r2
   49308:	18800015 	stw	r2,0(r3)
   4930c:	9805883a 	mov	r2,r19
   49310:	dfc00717 	ldw	ra,28(sp)
   49314:	dd000617 	ldw	r20,24(sp)
   49318:	dcc00517 	ldw	r19,20(sp)
   4931c:	dc800417 	ldw	r18,16(sp)
   49320:	dc400317 	ldw	r17,12(sp)
   49324:	dc000217 	ldw	r16,8(sp)
   49328:	dec00804 	addi	sp,sp,32
   4932c:	f800283a 	ret
   49330:	d809883a 	mov	r4,sp
   49334:	004887c0 	call	4887c <__lo0bits>
   49338:	d8c00017 	ldw	r3,0(sp)
   4933c:	04000044 	movi	r16,1
   49340:	9c000415 	stw	r16,16(r19)
   49344:	98c00515 	stw	r3,20(r19)
   49348:	10800804 	addi	r2,r2,32
   4934c:	883fe126 	beq	r17,zero,492d4 <__alt_data_end+0xfffe92d4>
   49350:	00c00d44 	movi	r3,53
   49354:	8c7ef344 	addi	r17,r17,-1075
   49358:	88a3883a 	add	r17,r17,r2
   4935c:	1885c83a 	sub	r2,r3,r2
   49360:	d8c00817 	ldw	r3,32(sp)
   49364:	94400015 	stw	r17,0(r18)
   49368:	18800015 	stw	r2,0(r3)
   4936c:	003fe706 	br	4930c <__alt_data_end+0xfffe930c>
   49370:	01000804 	movi	r4,32
   49374:	2089c83a 	sub	r4,r4,r2
   49378:	1908983a 	sll	r4,r3,r4
   4937c:	d9400117 	ldw	r5,4(sp)
   49380:	1886d83a 	srl	r3,r3,r2
   49384:	2148b03a 	or	r4,r4,r5
   49388:	99000515 	stw	r4,20(r19)
   4938c:	d8c00015 	stw	r3,0(sp)
   49390:	003fca06 	br	492bc <__alt_data_end+0xfffe92bc>

00049394 <__ratio>:
   49394:	defff904 	addi	sp,sp,-28
   49398:	dc400315 	stw	r17,12(sp)
   4939c:	2823883a 	mov	r17,r5
   493a0:	d9400104 	addi	r5,sp,4
   493a4:	dfc00615 	stw	ra,24(sp)
   493a8:	dcc00515 	stw	r19,20(sp)
   493ac:	dc800415 	stw	r18,16(sp)
   493b0:	2027883a 	mov	r19,r4
   493b4:	dc000215 	stw	r16,8(sp)
   493b8:	004913c0 	call	4913c <__b2d>
   493bc:	d80b883a 	mov	r5,sp
   493c0:	8809883a 	mov	r4,r17
   493c4:	1025883a 	mov	r18,r2
   493c8:	1821883a 	mov	r16,r3
   493cc:	004913c0 	call	4913c <__b2d>
   493d0:	8a000417 	ldw	r8,16(r17)
   493d4:	99000417 	ldw	r4,16(r19)
   493d8:	d9400117 	ldw	r5,4(sp)
   493dc:	2209c83a 	sub	r4,r4,r8
   493e0:	2010917a 	slli	r8,r4,5
   493e4:	d9000017 	ldw	r4,0(sp)
   493e8:	2909c83a 	sub	r4,r5,r4
   493ec:	4109883a 	add	r4,r8,r4
   493f0:	01000e0e 	bge	zero,r4,4942c <__ratio+0x98>
   493f4:	2008953a 	slli	r4,r4,20
   493f8:	2421883a 	add	r16,r4,r16
   493fc:	100d883a 	mov	r6,r2
   49400:	180f883a 	mov	r7,r3
   49404:	9009883a 	mov	r4,r18
   49408:	800b883a 	mov	r5,r16
   4940c:	004068c0 	call	4068c <__divdf3>
   49410:	dfc00617 	ldw	ra,24(sp)
   49414:	dcc00517 	ldw	r19,20(sp)
   49418:	dc800417 	ldw	r18,16(sp)
   4941c:	dc400317 	ldw	r17,12(sp)
   49420:	dc000217 	ldw	r16,8(sp)
   49424:	dec00704 	addi	sp,sp,28
   49428:	f800283a 	ret
   4942c:	2008953a 	slli	r4,r4,20
   49430:	1907c83a 	sub	r3,r3,r4
   49434:	003ff106 	br	493fc <__alt_data_end+0xfffe93fc>

00049438 <_mprec_log10>:
   49438:	defffe04 	addi	sp,sp,-8
   4943c:	dc000015 	stw	r16,0(sp)
   49440:	dfc00115 	stw	ra,4(sp)
   49444:	008005c4 	movi	r2,23
   49448:	2021883a 	mov	r16,r4
   4944c:	11000d0e 	bge	r2,r4,49484 <_mprec_log10+0x4c>
   49450:	0005883a 	mov	r2,zero
   49454:	00cffc34 	movhi	r3,16368
   49458:	843fffc4 	addi	r16,r16,-1
   4945c:	000d883a 	mov	r6,zero
   49460:	01d00934 	movhi	r7,16420
   49464:	1009883a 	mov	r4,r2
   49468:	180b883a 	mov	r5,r3
   4946c:	004cf4c0 	call	4cf4c <__muldf3>
   49470:	803ff91e 	bne	r16,zero,49458 <__alt_data_end+0xfffe9458>
   49474:	dfc00117 	ldw	ra,4(sp)
   49478:	dc000017 	ldw	r16,0(sp)
   4947c:	dec00204 	addi	sp,sp,8
   49480:	f800283a 	ret
   49484:	202090fa 	slli	r16,r4,3
   49488:	00800174 	movhi	r2,5
   4948c:	10863304 	addi	r2,r2,6348
   49490:	1421883a 	add	r16,r2,r16
   49494:	80800017 	ldw	r2,0(r16)
   49498:	80c00117 	ldw	r3,4(r16)
   4949c:	dfc00117 	ldw	ra,4(sp)
   494a0:	dc000017 	ldw	r16,0(sp)
   494a4:	dec00204 	addi	sp,sp,8
   494a8:	f800283a 	ret

000494ac <__copybits>:
   494ac:	297fffc4 	addi	r5,r5,-1
   494b0:	280fd17a 	srai	r7,r5,5
   494b4:	30c00417 	ldw	r3,16(r6)
   494b8:	30800504 	addi	r2,r6,20
   494bc:	39c00044 	addi	r7,r7,1
   494c0:	18c7883a 	add	r3,r3,r3
   494c4:	39cf883a 	add	r7,r7,r7
   494c8:	18c7883a 	add	r3,r3,r3
   494cc:	39cf883a 	add	r7,r7,r7
   494d0:	10c7883a 	add	r3,r2,r3
   494d4:	21cf883a 	add	r7,r4,r7
   494d8:	10c00d2e 	bgeu	r2,r3,49510 <__copybits+0x64>
   494dc:	200b883a 	mov	r5,r4
   494e0:	12000017 	ldw	r8,0(r2)
   494e4:	29400104 	addi	r5,r5,4
   494e8:	10800104 	addi	r2,r2,4
   494ec:	2a3fff15 	stw	r8,-4(r5)
   494f0:	10fffb36 	bltu	r2,r3,494e0 <__alt_data_end+0xfffe94e0>
   494f4:	1985c83a 	sub	r2,r3,r6
   494f8:	10bffac4 	addi	r2,r2,-21
   494fc:	1004d0ba 	srli	r2,r2,2
   49500:	10800044 	addi	r2,r2,1
   49504:	1085883a 	add	r2,r2,r2
   49508:	1085883a 	add	r2,r2,r2
   4950c:	2089883a 	add	r4,r4,r2
   49510:	21c0032e 	bgeu	r4,r7,49520 <__copybits+0x74>
   49514:	20000015 	stw	zero,0(r4)
   49518:	21000104 	addi	r4,r4,4
   4951c:	21fffd36 	bltu	r4,r7,49514 <__alt_data_end+0xfffe9514>
   49520:	f800283a 	ret

00049524 <__any_on>:
   49524:	20c00417 	ldw	r3,16(r4)
   49528:	2805d17a 	srai	r2,r5,5
   4952c:	21000504 	addi	r4,r4,20
   49530:	18800d0e 	bge	r3,r2,49568 <__any_on+0x44>
   49534:	18c7883a 	add	r3,r3,r3
   49538:	18c7883a 	add	r3,r3,r3
   4953c:	20c7883a 	add	r3,r4,r3
   49540:	20c0192e 	bgeu	r4,r3,495a8 <__any_on+0x84>
   49544:	18bfff17 	ldw	r2,-4(r3)
   49548:	18ffff04 	addi	r3,r3,-4
   4954c:	1000041e 	bne	r2,zero,49560 <__any_on+0x3c>
   49550:	20c0142e 	bgeu	r4,r3,495a4 <__any_on+0x80>
   49554:	18ffff04 	addi	r3,r3,-4
   49558:	19400017 	ldw	r5,0(r3)
   4955c:	283ffc26 	beq	r5,zero,49550 <__alt_data_end+0xfffe9550>
   49560:	00800044 	movi	r2,1
   49564:	f800283a 	ret
   49568:	10c00a0e 	bge	r2,r3,49594 <__any_on+0x70>
   4956c:	1085883a 	add	r2,r2,r2
   49570:	1085883a 	add	r2,r2,r2
   49574:	294007cc 	andi	r5,r5,31
   49578:	2087883a 	add	r3,r4,r2
   4957c:	283ff026 	beq	r5,zero,49540 <__alt_data_end+0xfffe9540>
   49580:	19800017 	ldw	r6,0(r3)
   49584:	3144d83a 	srl	r2,r6,r5
   49588:	114a983a 	sll	r5,r2,r5
   4958c:	317ff41e 	bne	r6,r5,49560 <__alt_data_end+0xfffe9560>
   49590:	003feb06 	br	49540 <__alt_data_end+0xfffe9540>
   49594:	1085883a 	add	r2,r2,r2
   49598:	1085883a 	add	r2,r2,r2
   4959c:	2087883a 	add	r3,r4,r2
   495a0:	003fe706 	br	49540 <__alt_data_end+0xfffe9540>
   495a4:	f800283a 	ret
   495a8:	0005883a 	mov	r2,zero
   495ac:	f800283a 	ret

000495b0 <_read_r>:
   495b0:	defffd04 	addi	sp,sp,-12
   495b4:	2805883a 	mov	r2,r5
   495b8:	dc000015 	stw	r16,0(sp)
   495bc:	04000174 	movhi	r16,5
   495c0:	dc400115 	stw	r17,4(sp)
   495c4:	300b883a 	mov	r5,r6
   495c8:	84146904 	addi	r16,r16,20900
   495cc:	2023883a 	mov	r17,r4
   495d0:	380d883a 	mov	r6,r7
   495d4:	1009883a 	mov	r4,r2
   495d8:	dfc00215 	stw	ra,8(sp)
   495dc:	80000015 	stw	zero,0(r16)
   495e0:	004eafc0 	call	4eafc <read>
   495e4:	00ffffc4 	movi	r3,-1
   495e8:	10c00526 	beq	r2,r3,49600 <_read_r+0x50>
   495ec:	dfc00217 	ldw	ra,8(sp)
   495f0:	dc400117 	ldw	r17,4(sp)
   495f4:	dc000017 	ldw	r16,0(sp)
   495f8:	dec00304 	addi	sp,sp,12
   495fc:	f800283a 	ret
   49600:	80c00017 	ldw	r3,0(r16)
   49604:	183ff926 	beq	r3,zero,495ec <__alt_data_end+0xfffe95ec>
   49608:	88c00015 	stw	r3,0(r17)
   4960c:	003ff706 	br	495ec <__alt_data_end+0xfffe95ec>

00049610 <_realloc_r>:
   49610:	defff604 	addi	sp,sp,-40
   49614:	dc800215 	stw	r18,8(sp)
   49618:	dfc00915 	stw	ra,36(sp)
   4961c:	df000815 	stw	fp,32(sp)
   49620:	ddc00715 	stw	r23,28(sp)
   49624:	dd800615 	stw	r22,24(sp)
   49628:	dd400515 	stw	r21,20(sp)
   4962c:	dd000415 	stw	r20,16(sp)
   49630:	dcc00315 	stw	r19,12(sp)
   49634:	dc400115 	stw	r17,4(sp)
   49638:	dc000015 	stw	r16,0(sp)
   4963c:	3025883a 	mov	r18,r6
   49640:	2800b726 	beq	r5,zero,49920 <_realloc_r+0x310>
   49644:	282b883a 	mov	r21,r5
   49648:	2029883a 	mov	r20,r4
   4964c:	004e7d40 	call	4e7d4 <__malloc_lock>
   49650:	a8bfff17 	ldw	r2,-4(r21)
   49654:	043fff04 	movi	r16,-4
   49658:	90c002c4 	addi	r3,r18,11
   4965c:	01000584 	movi	r4,22
   49660:	acfffe04 	addi	r19,r21,-8
   49664:	1420703a 	and	r16,r2,r16
   49668:	20c0332e 	bgeu	r4,r3,49738 <_realloc_r+0x128>
   4966c:	047ffe04 	movi	r17,-8
   49670:	1c62703a 	and	r17,r3,r17
   49674:	8807883a 	mov	r3,r17
   49678:	88005816 	blt	r17,zero,497dc <_realloc_r+0x1cc>
   4967c:	8c805736 	bltu	r17,r18,497dc <_realloc_r+0x1cc>
   49680:	80c0300e 	bge	r16,r3,49744 <_realloc_r+0x134>
   49684:	07000174 	movhi	fp,5
   49688:	e707a404 	addi	fp,fp,7824
   4968c:	e1c00217 	ldw	r7,8(fp)
   49690:	9c09883a 	add	r4,r19,r16
   49694:	22000117 	ldw	r8,4(r4)
   49698:	21c06326 	beq	r4,r7,49828 <_realloc_r+0x218>
   4969c:	017fff84 	movi	r5,-2
   496a0:	414a703a 	and	r5,r8,r5
   496a4:	214b883a 	add	r5,r4,r5
   496a8:	29800117 	ldw	r6,4(r5)
   496ac:	3180004c 	andi	r6,r6,1
   496b0:	30003f26 	beq	r6,zero,497b0 <_realloc_r+0x1a0>
   496b4:	1080004c 	andi	r2,r2,1
   496b8:	10008326 	beq	r2,zero,498c8 <_realloc_r+0x2b8>
   496bc:	900b883a 	mov	r5,r18
   496c0:	a009883a 	mov	r4,r20
   496c4:	00429380 	call	42938 <_malloc_r>
   496c8:	1025883a 	mov	r18,r2
   496cc:	10011e26 	beq	r2,zero,49b48 <_realloc_r+0x538>
   496d0:	a93fff17 	ldw	r4,-4(r21)
   496d4:	10fffe04 	addi	r3,r2,-8
   496d8:	00bfff84 	movi	r2,-2
   496dc:	2084703a 	and	r2,r4,r2
   496e0:	9885883a 	add	r2,r19,r2
   496e4:	1880ee26 	beq	r3,r2,49aa0 <_realloc_r+0x490>
   496e8:	81bfff04 	addi	r6,r16,-4
   496ec:	00800904 	movi	r2,36
   496f0:	1180b836 	bltu	r2,r6,499d4 <_realloc_r+0x3c4>
   496f4:	00c004c4 	movi	r3,19
   496f8:	19809636 	bltu	r3,r6,49954 <_realloc_r+0x344>
   496fc:	9005883a 	mov	r2,r18
   49700:	a807883a 	mov	r3,r21
   49704:	19000017 	ldw	r4,0(r3)
   49708:	11000015 	stw	r4,0(r2)
   4970c:	19000117 	ldw	r4,4(r3)
   49710:	11000115 	stw	r4,4(r2)
   49714:	18c00217 	ldw	r3,8(r3)
   49718:	10c00215 	stw	r3,8(r2)
   4971c:	a80b883a 	mov	r5,r21
   49720:	a009883a 	mov	r4,r20
   49724:	0041e080 	call	41e08 <_free_r>
   49728:	a009883a 	mov	r4,r20
   4972c:	004e7f40 	call	4e7f4 <__malloc_unlock>
   49730:	9005883a 	mov	r2,r18
   49734:	00001206 	br	49780 <_realloc_r+0x170>
   49738:	00c00404 	movi	r3,16
   4973c:	1823883a 	mov	r17,r3
   49740:	003fce06 	br	4967c <__alt_data_end+0xfffe967c>
   49744:	a825883a 	mov	r18,r21
   49748:	8445c83a 	sub	r2,r16,r17
   4974c:	00c003c4 	movi	r3,15
   49750:	18802636 	bltu	r3,r2,497ec <_realloc_r+0x1dc>
   49754:	99800117 	ldw	r6,4(r19)
   49758:	9c07883a 	add	r3,r19,r16
   4975c:	3180004c 	andi	r6,r6,1
   49760:	3420b03a 	or	r16,r6,r16
   49764:	9c000115 	stw	r16,4(r19)
   49768:	18800117 	ldw	r2,4(r3)
   4976c:	10800054 	ori	r2,r2,1
   49770:	18800115 	stw	r2,4(r3)
   49774:	a009883a 	mov	r4,r20
   49778:	004e7f40 	call	4e7f4 <__malloc_unlock>
   4977c:	9005883a 	mov	r2,r18
   49780:	dfc00917 	ldw	ra,36(sp)
   49784:	df000817 	ldw	fp,32(sp)
   49788:	ddc00717 	ldw	r23,28(sp)
   4978c:	dd800617 	ldw	r22,24(sp)
   49790:	dd400517 	ldw	r21,20(sp)
   49794:	dd000417 	ldw	r20,16(sp)
   49798:	dcc00317 	ldw	r19,12(sp)
   4979c:	dc800217 	ldw	r18,8(sp)
   497a0:	dc400117 	ldw	r17,4(sp)
   497a4:	dc000017 	ldw	r16,0(sp)
   497a8:	dec00a04 	addi	sp,sp,40
   497ac:	f800283a 	ret
   497b0:	017fff04 	movi	r5,-4
   497b4:	414a703a 	and	r5,r8,r5
   497b8:	814d883a 	add	r6,r16,r5
   497bc:	30c01f16 	blt	r6,r3,4983c <_realloc_r+0x22c>
   497c0:	20800317 	ldw	r2,12(r4)
   497c4:	20c00217 	ldw	r3,8(r4)
   497c8:	a825883a 	mov	r18,r21
   497cc:	3021883a 	mov	r16,r6
   497d0:	18800315 	stw	r2,12(r3)
   497d4:	10c00215 	stw	r3,8(r2)
   497d8:	003fdb06 	br	49748 <__alt_data_end+0xfffe9748>
   497dc:	00800304 	movi	r2,12
   497e0:	a0800015 	stw	r2,0(r20)
   497e4:	0005883a 	mov	r2,zero
   497e8:	003fe506 	br	49780 <__alt_data_end+0xfffe9780>
   497ec:	98c00117 	ldw	r3,4(r19)
   497f0:	9c4b883a 	add	r5,r19,r17
   497f4:	11000054 	ori	r4,r2,1
   497f8:	18c0004c 	andi	r3,r3,1
   497fc:	1c62b03a 	or	r17,r3,r17
   49800:	9c400115 	stw	r17,4(r19)
   49804:	29000115 	stw	r4,4(r5)
   49808:	2885883a 	add	r2,r5,r2
   4980c:	10c00117 	ldw	r3,4(r2)
   49810:	29400204 	addi	r5,r5,8
   49814:	a009883a 	mov	r4,r20
   49818:	18c00054 	ori	r3,r3,1
   4981c:	10c00115 	stw	r3,4(r2)
   49820:	0041e080 	call	41e08 <_free_r>
   49824:	003fd306 	br	49774 <__alt_data_end+0xfffe9774>
   49828:	017fff04 	movi	r5,-4
   4982c:	414a703a 	and	r5,r8,r5
   49830:	89800404 	addi	r6,r17,16
   49834:	8151883a 	add	r8,r16,r5
   49838:	4180590e 	bge	r8,r6,499a0 <_realloc_r+0x390>
   4983c:	1080004c 	andi	r2,r2,1
   49840:	103f9e1e 	bne	r2,zero,496bc <__alt_data_end+0xfffe96bc>
   49844:	adbffe17 	ldw	r22,-8(r21)
   49848:	00bfff04 	movi	r2,-4
   4984c:	9dadc83a 	sub	r22,r19,r22
   49850:	b1800117 	ldw	r6,4(r22)
   49854:	3084703a 	and	r2,r6,r2
   49858:	20002026 	beq	r4,zero,498dc <_realloc_r+0x2cc>
   4985c:	80af883a 	add	r23,r16,r2
   49860:	b96f883a 	add	r23,r23,r5
   49864:	21c05f26 	beq	r4,r7,499e4 <_realloc_r+0x3d4>
   49868:	b8c01c16 	blt	r23,r3,498dc <_realloc_r+0x2cc>
   4986c:	20800317 	ldw	r2,12(r4)
   49870:	20c00217 	ldw	r3,8(r4)
   49874:	81bfff04 	addi	r6,r16,-4
   49878:	01000904 	movi	r4,36
   4987c:	18800315 	stw	r2,12(r3)
   49880:	10c00215 	stw	r3,8(r2)
   49884:	b0c00217 	ldw	r3,8(r22)
   49888:	b0800317 	ldw	r2,12(r22)
   4988c:	b4800204 	addi	r18,r22,8
   49890:	18800315 	stw	r2,12(r3)
   49894:	10c00215 	stw	r3,8(r2)
   49898:	21801b36 	bltu	r4,r6,49908 <_realloc_r+0x2f8>
   4989c:	008004c4 	movi	r2,19
   498a0:	1180352e 	bgeu	r2,r6,49978 <_realloc_r+0x368>
   498a4:	a8800017 	ldw	r2,0(r21)
   498a8:	b0800215 	stw	r2,8(r22)
   498ac:	a8800117 	ldw	r2,4(r21)
   498b0:	b0800315 	stw	r2,12(r22)
   498b4:	008006c4 	movi	r2,27
   498b8:	11807f36 	bltu	r2,r6,49ab8 <_realloc_r+0x4a8>
   498bc:	b0800404 	addi	r2,r22,16
   498c0:	ad400204 	addi	r21,r21,8
   498c4:	00002d06 	br	4997c <_realloc_r+0x36c>
   498c8:	adbffe17 	ldw	r22,-8(r21)
   498cc:	00bfff04 	movi	r2,-4
   498d0:	9dadc83a 	sub	r22,r19,r22
   498d4:	b1000117 	ldw	r4,4(r22)
   498d8:	2084703a 	and	r2,r4,r2
   498dc:	b03f7726 	beq	r22,zero,496bc <__alt_data_end+0xfffe96bc>
   498e0:	80af883a 	add	r23,r16,r2
   498e4:	b8ff7516 	blt	r23,r3,496bc <__alt_data_end+0xfffe96bc>
   498e8:	b0800317 	ldw	r2,12(r22)
   498ec:	b0c00217 	ldw	r3,8(r22)
   498f0:	81bfff04 	addi	r6,r16,-4
   498f4:	01000904 	movi	r4,36
   498f8:	18800315 	stw	r2,12(r3)
   498fc:	10c00215 	stw	r3,8(r2)
   49900:	b4800204 	addi	r18,r22,8
   49904:	21bfe52e 	bgeu	r4,r6,4989c <__alt_data_end+0xfffe989c>
   49908:	a80b883a 	mov	r5,r21
   4990c:	9009883a 	mov	r4,r18
   49910:	004839c0 	call	4839c <memmove>
   49914:	b821883a 	mov	r16,r23
   49918:	b027883a 	mov	r19,r22
   4991c:	003f8a06 	br	49748 <__alt_data_end+0xfffe9748>
   49920:	300b883a 	mov	r5,r6
   49924:	dfc00917 	ldw	ra,36(sp)
   49928:	df000817 	ldw	fp,32(sp)
   4992c:	ddc00717 	ldw	r23,28(sp)
   49930:	dd800617 	ldw	r22,24(sp)
   49934:	dd400517 	ldw	r21,20(sp)
   49938:	dd000417 	ldw	r20,16(sp)
   4993c:	dcc00317 	ldw	r19,12(sp)
   49940:	dc800217 	ldw	r18,8(sp)
   49944:	dc400117 	ldw	r17,4(sp)
   49948:	dc000017 	ldw	r16,0(sp)
   4994c:	dec00a04 	addi	sp,sp,40
   49950:	00429381 	jmpi	42938 <_malloc_r>
   49954:	a8c00017 	ldw	r3,0(r21)
   49958:	90c00015 	stw	r3,0(r18)
   4995c:	a8c00117 	ldw	r3,4(r21)
   49960:	90c00115 	stw	r3,4(r18)
   49964:	00c006c4 	movi	r3,27
   49968:	19804536 	bltu	r3,r6,49a80 <_realloc_r+0x470>
   4996c:	90800204 	addi	r2,r18,8
   49970:	a8c00204 	addi	r3,r21,8
   49974:	003f6306 	br	49704 <__alt_data_end+0xfffe9704>
   49978:	9005883a 	mov	r2,r18
   4997c:	a8c00017 	ldw	r3,0(r21)
   49980:	b821883a 	mov	r16,r23
   49984:	b027883a 	mov	r19,r22
   49988:	10c00015 	stw	r3,0(r2)
   4998c:	a8c00117 	ldw	r3,4(r21)
   49990:	10c00115 	stw	r3,4(r2)
   49994:	a8c00217 	ldw	r3,8(r21)
   49998:	10c00215 	stw	r3,8(r2)
   4999c:	003f6a06 	br	49748 <__alt_data_end+0xfffe9748>
   499a0:	9c67883a 	add	r19,r19,r17
   499a4:	4445c83a 	sub	r2,r8,r17
   499a8:	e4c00215 	stw	r19,8(fp)
   499ac:	10800054 	ori	r2,r2,1
   499b0:	98800115 	stw	r2,4(r19)
   499b4:	a8bfff17 	ldw	r2,-4(r21)
   499b8:	a009883a 	mov	r4,r20
   499bc:	1080004c 	andi	r2,r2,1
   499c0:	1462b03a 	or	r17,r2,r17
   499c4:	ac7fff15 	stw	r17,-4(r21)
   499c8:	004e7f40 	call	4e7f4 <__malloc_unlock>
   499cc:	a805883a 	mov	r2,r21
   499d0:	003f6b06 	br	49780 <__alt_data_end+0xfffe9780>
   499d4:	a80b883a 	mov	r5,r21
   499d8:	9009883a 	mov	r4,r18
   499dc:	004839c0 	call	4839c <memmove>
   499e0:	003f4e06 	br	4971c <__alt_data_end+0xfffe971c>
   499e4:	89000404 	addi	r4,r17,16
   499e8:	b93fbc16 	blt	r23,r4,498dc <__alt_data_end+0xfffe98dc>
   499ec:	b0800317 	ldw	r2,12(r22)
   499f0:	b0c00217 	ldw	r3,8(r22)
   499f4:	81bfff04 	addi	r6,r16,-4
   499f8:	01000904 	movi	r4,36
   499fc:	18800315 	stw	r2,12(r3)
   49a00:	10c00215 	stw	r3,8(r2)
   49a04:	b4800204 	addi	r18,r22,8
   49a08:	21804336 	bltu	r4,r6,49b18 <_realloc_r+0x508>
   49a0c:	008004c4 	movi	r2,19
   49a10:	11803f2e 	bgeu	r2,r6,49b10 <_realloc_r+0x500>
   49a14:	a8800017 	ldw	r2,0(r21)
   49a18:	b0800215 	stw	r2,8(r22)
   49a1c:	a8800117 	ldw	r2,4(r21)
   49a20:	b0800315 	stw	r2,12(r22)
   49a24:	008006c4 	movi	r2,27
   49a28:	11803f36 	bltu	r2,r6,49b28 <_realloc_r+0x518>
   49a2c:	b0800404 	addi	r2,r22,16
   49a30:	ad400204 	addi	r21,r21,8
   49a34:	a8c00017 	ldw	r3,0(r21)
   49a38:	10c00015 	stw	r3,0(r2)
   49a3c:	a8c00117 	ldw	r3,4(r21)
   49a40:	10c00115 	stw	r3,4(r2)
   49a44:	a8c00217 	ldw	r3,8(r21)
   49a48:	10c00215 	stw	r3,8(r2)
   49a4c:	b447883a 	add	r3,r22,r17
   49a50:	bc45c83a 	sub	r2,r23,r17
   49a54:	e0c00215 	stw	r3,8(fp)
   49a58:	10800054 	ori	r2,r2,1
   49a5c:	18800115 	stw	r2,4(r3)
   49a60:	b0800117 	ldw	r2,4(r22)
   49a64:	a009883a 	mov	r4,r20
   49a68:	1080004c 	andi	r2,r2,1
   49a6c:	1462b03a 	or	r17,r2,r17
   49a70:	b4400115 	stw	r17,4(r22)
   49a74:	004e7f40 	call	4e7f4 <__malloc_unlock>
   49a78:	9005883a 	mov	r2,r18
   49a7c:	003f4006 	br	49780 <__alt_data_end+0xfffe9780>
   49a80:	a8c00217 	ldw	r3,8(r21)
   49a84:	90c00215 	stw	r3,8(r18)
   49a88:	a8c00317 	ldw	r3,12(r21)
   49a8c:	90c00315 	stw	r3,12(r18)
   49a90:	30801126 	beq	r6,r2,49ad8 <_realloc_r+0x4c8>
   49a94:	90800404 	addi	r2,r18,16
   49a98:	a8c00404 	addi	r3,r21,16
   49a9c:	003f1906 	br	49704 <__alt_data_end+0xfffe9704>
   49aa0:	90ffff17 	ldw	r3,-4(r18)
   49aa4:	00bfff04 	movi	r2,-4
   49aa8:	a825883a 	mov	r18,r21
   49aac:	1884703a 	and	r2,r3,r2
   49ab0:	80a1883a 	add	r16,r16,r2
   49ab4:	003f2406 	br	49748 <__alt_data_end+0xfffe9748>
   49ab8:	a8800217 	ldw	r2,8(r21)
   49abc:	b0800415 	stw	r2,16(r22)
   49ac0:	a8800317 	ldw	r2,12(r21)
   49ac4:	b0800515 	stw	r2,20(r22)
   49ac8:	31000a26 	beq	r6,r4,49af4 <_realloc_r+0x4e4>
   49acc:	b0800604 	addi	r2,r22,24
   49ad0:	ad400404 	addi	r21,r21,16
   49ad4:	003fa906 	br	4997c <__alt_data_end+0xfffe997c>
   49ad8:	a9000417 	ldw	r4,16(r21)
   49adc:	90800604 	addi	r2,r18,24
   49ae0:	a8c00604 	addi	r3,r21,24
   49ae4:	91000415 	stw	r4,16(r18)
   49ae8:	a9000517 	ldw	r4,20(r21)
   49aec:	91000515 	stw	r4,20(r18)
   49af0:	003f0406 	br	49704 <__alt_data_end+0xfffe9704>
   49af4:	a8c00417 	ldw	r3,16(r21)
   49af8:	ad400604 	addi	r21,r21,24
   49afc:	b0800804 	addi	r2,r22,32
   49b00:	b0c00615 	stw	r3,24(r22)
   49b04:	a8ffff17 	ldw	r3,-4(r21)
   49b08:	b0c00715 	stw	r3,28(r22)
   49b0c:	003f9b06 	br	4997c <__alt_data_end+0xfffe997c>
   49b10:	9005883a 	mov	r2,r18
   49b14:	003fc706 	br	49a34 <__alt_data_end+0xfffe9a34>
   49b18:	a80b883a 	mov	r5,r21
   49b1c:	9009883a 	mov	r4,r18
   49b20:	004839c0 	call	4839c <memmove>
   49b24:	003fc906 	br	49a4c <__alt_data_end+0xfffe9a4c>
   49b28:	a8800217 	ldw	r2,8(r21)
   49b2c:	b0800415 	stw	r2,16(r22)
   49b30:	a8800317 	ldw	r2,12(r21)
   49b34:	b0800515 	stw	r2,20(r22)
   49b38:	31000726 	beq	r6,r4,49b58 <_realloc_r+0x548>
   49b3c:	b0800604 	addi	r2,r22,24
   49b40:	ad400404 	addi	r21,r21,16
   49b44:	003fbb06 	br	49a34 <__alt_data_end+0xfffe9a34>
   49b48:	a009883a 	mov	r4,r20
   49b4c:	004e7f40 	call	4e7f4 <__malloc_unlock>
   49b50:	0005883a 	mov	r2,zero
   49b54:	003f0a06 	br	49780 <__alt_data_end+0xfffe9780>
   49b58:	a8c00417 	ldw	r3,16(r21)
   49b5c:	ad400604 	addi	r21,r21,24
   49b60:	b0800804 	addi	r2,r22,32
   49b64:	b0c00615 	stw	r3,24(r22)
   49b68:	a8ffff17 	ldw	r3,-4(r21)
   49b6c:	b0c00715 	stw	r3,28(r22)
   49b70:	003fb006 	br	49a34 <__alt_data_end+0xfffe9a34>

00049b74 <__fpclassifyd>:
   49b74:	00a00034 	movhi	r2,32768
   49b78:	10bfffc4 	addi	r2,r2,-1
   49b7c:	2884703a 	and	r2,r5,r2
   49b80:	10000726 	beq	r2,zero,49ba0 <__fpclassifyd+0x2c>
   49b84:	00fffc34 	movhi	r3,65520
   49b88:	019ff834 	movhi	r6,32736
   49b8c:	28c7883a 	add	r3,r5,r3
   49b90:	31bfffc4 	addi	r6,r6,-1
   49b94:	30c00536 	bltu	r6,r3,49bac <__fpclassifyd+0x38>
   49b98:	00800104 	movi	r2,4
   49b9c:	f800283a 	ret
   49ba0:	2000021e 	bne	r4,zero,49bac <__fpclassifyd+0x38>
   49ba4:	00800084 	movi	r2,2
   49ba8:	f800283a 	ret
   49bac:	00dffc34 	movhi	r3,32752
   49bb0:	019ff834 	movhi	r6,32736
   49bb4:	28cb883a 	add	r5,r5,r3
   49bb8:	31bfffc4 	addi	r6,r6,-1
   49bbc:	317ff62e 	bgeu	r6,r5,49b98 <__alt_data_end+0xfffe9b98>
   49bc0:	01400434 	movhi	r5,16
   49bc4:	297fffc4 	addi	r5,r5,-1
   49bc8:	28800236 	bltu	r5,r2,49bd4 <__fpclassifyd+0x60>
   49bcc:	008000c4 	movi	r2,3
   49bd0:	f800283a 	ret
   49bd4:	10c00226 	beq	r2,r3,49be0 <__fpclassifyd+0x6c>
   49bd8:	0005883a 	mov	r2,zero
   49bdc:	f800283a 	ret
   49be0:	2005003a 	cmpeq	r2,r4,zero
   49be4:	f800283a 	ret

00049be8 <strcmp>:
   49be8:	2144b03a 	or	r2,r4,r5
   49bec:	108000cc 	andi	r2,r2,3
   49bf0:	1000171e 	bne	r2,zero,49c50 <strcmp+0x68>
   49bf4:	20800017 	ldw	r2,0(r4)
   49bf8:	28c00017 	ldw	r3,0(r5)
   49bfc:	10c0141e 	bne	r2,r3,49c50 <strcmp+0x68>
   49c00:	027fbff4 	movhi	r9,65279
   49c04:	4a7fbfc4 	addi	r9,r9,-257
   49c08:	0086303a 	nor	r3,zero,r2
   49c0c:	02202074 	movhi	r8,32897
   49c10:	1245883a 	add	r2,r2,r9
   49c14:	42202004 	addi	r8,r8,-32640
   49c18:	10c4703a 	and	r2,r2,r3
   49c1c:	1204703a 	and	r2,r2,r8
   49c20:	10000226 	beq	r2,zero,49c2c <strcmp+0x44>
   49c24:	00002306 	br	49cb4 <strcmp+0xcc>
   49c28:	1000221e 	bne	r2,zero,49cb4 <strcmp+0xcc>
   49c2c:	21000104 	addi	r4,r4,4
   49c30:	20c00017 	ldw	r3,0(r4)
   49c34:	29400104 	addi	r5,r5,4
   49c38:	29800017 	ldw	r6,0(r5)
   49c3c:	1a4f883a 	add	r7,r3,r9
   49c40:	00c4303a 	nor	r2,zero,r3
   49c44:	3884703a 	and	r2,r7,r2
   49c48:	1204703a 	and	r2,r2,r8
   49c4c:	19bff626 	beq	r3,r6,49c28 <__alt_data_end+0xfffe9c28>
   49c50:	20800003 	ldbu	r2,0(r4)
   49c54:	10c03fcc 	andi	r3,r2,255
   49c58:	18c0201c 	xori	r3,r3,128
   49c5c:	18ffe004 	addi	r3,r3,-128
   49c60:	18000c26 	beq	r3,zero,49c94 <strcmp+0xac>
   49c64:	29800007 	ldb	r6,0(r5)
   49c68:	19800326 	beq	r3,r6,49c78 <strcmp+0x90>
   49c6c:	00001306 	br	49cbc <strcmp+0xd4>
   49c70:	29800007 	ldb	r6,0(r5)
   49c74:	11800b1e 	bne	r2,r6,49ca4 <strcmp+0xbc>
   49c78:	21000044 	addi	r4,r4,1
   49c7c:	20c00003 	ldbu	r3,0(r4)
   49c80:	29400044 	addi	r5,r5,1
   49c84:	18803fcc 	andi	r2,r3,255
   49c88:	1080201c 	xori	r2,r2,128
   49c8c:	10bfe004 	addi	r2,r2,-128
   49c90:	103ff71e 	bne	r2,zero,49c70 <__alt_data_end+0xfffe9c70>
   49c94:	0007883a 	mov	r3,zero
   49c98:	28800003 	ldbu	r2,0(r5)
   49c9c:	1885c83a 	sub	r2,r3,r2
   49ca0:	f800283a 	ret
   49ca4:	28800003 	ldbu	r2,0(r5)
   49ca8:	18c03fcc 	andi	r3,r3,255
   49cac:	1885c83a 	sub	r2,r3,r2
   49cb0:	f800283a 	ret
   49cb4:	0005883a 	mov	r2,zero
   49cb8:	f800283a 	ret
   49cbc:	10c03fcc 	andi	r3,r2,255
   49cc0:	003ff506 	br	49c98 <__alt_data_end+0xfffe9c98>

00049cc4 <__sprint_r.part.0>:
   49cc4:	28801917 	ldw	r2,100(r5)
   49cc8:	defff604 	addi	sp,sp,-40
   49ccc:	dd400515 	stw	r21,20(sp)
   49cd0:	dfc00915 	stw	ra,36(sp)
   49cd4:	df000815 	stw	fp,32(sp)
   49cd8:	ddc00715 	stw	r23,28(sp)
   49cdc:	dd800615 	stw	r22,24(sp)
   49ce0:	dd000415 	stw	r20,16(sp)
   49ce4:	dcc00315 	stw	r19,12(sp)
   49ce8:	dc800215 	stw	r18,8(sp)
   49cec:	dc400115 	stw	r17,4(sp)
   49cf0:	dc000015 	stw	r16,0(sp)
   49cf4:	1088000c 	andi	r2,r2,8192
   49cf8:	302b883a 	mov	r21,r6
   49cfc:	10002e26 	beq	r2,zero,49db8 <__sprint_r.part.0+0xf4>
   49d00:	30800217 	ldw	r2,8(r6)
   49d04:	35800017 	ldw	r22,0(r6)
   49d08:	10002926 	beq	r2,zero,49db0 <__sprint_r.part.0+0xec>
   49d0c:	2827883a 	mov	r19,r5
   49d10:	2029883a 	mov	r20,r4
   49d14:	b5c00104 	addi	r23,r22,4
   49d18:	04bfffc4 	movi	r18,-1
   49d1c:	bc400017 	ldw	r17,0(r23)
   49d20:	b4000017 	ldw	r16,0(r22)
   49d24:	0039883a 	mov	fp,zero
   49d28:	8822d0ba 	srli	r17,r17,2
   49d2c:	8800031e 	bne	r17,zero,49d3c <__sprint_r.part.0+0x78>
   49d30:	00001806 	br	49d94 <__sprint_r.part.0+0xd0>
   49d34:	84000104 	addi	r16,r16,4
   49d38:	8f001526 	beq	r17,fp,49d90 <__sprint_r.part.0+0xcc>
   49d3c:	81400017 	ldw	r5,0(r16)
   49d40:	980d883a 	mov	r6,r19
   49d44:	a009883a 	mov	r4,r20
   49d48:	004b5fc0 	call	4b5fc <_fputwc_r>
   49d4c:	e7000044 	addi	fp,fp,1
   49d50:	14bff81e 	bne	r2,r18,49d34 <__alt_data_end+0xfffe9d34>
   49d54:	9005883a 	mov	r2,r18
   49d58:	a8000215 	stw	zero,8(r21)
   49d5c:	a8000115 	stw	zero,4(r21)
   49d60:	dfc00917 	ldw	ra,36(sp)
   49d64:	df000817 	ldw	fp,32(sp)
   49d68:	ddc00717 	ldw	r23,28(sp)
   49d6c:	dd800617 	ldw	r22,24(sp)
   49d70:	dd400517 	ldw	r21,20(sp)
   49d74:	dd000417 	ldw	r20,16(sp)
   49d78:	dcc00317 	ldw	r19,12(sp)
   49d7c:	dc800217 	ldw	r18,8(sp)
   49d80:	dc400117 	ldw	r17,4(sp)
   49d84:	dc000017 	ldw	r16,0(sp)
   49d88:	dec00a04 	addi	sp,sp,40
   49d8c:	f800283a 	ret
   49d90:	a8800217 	ldw	r2,8(r21)
   49d94:	8c63883a 	add	r17,r17,r17
   49d98:	8c63883a 	add	r17,r17,r17
   49d9c:	1445c83a 	sub	r2,r2,r17
   49da0:	a8800215 	stw	r2,8(r21)
   49da4:	b5800204 	addi	r22,r22,8
   49da8:	bdc00204 	addi	r23,r23,8
   49dac:	103fdb1e 	bne	r2,zero,49d1c <__alt_data_end+0xfffe9d1c>
   49db0:	0005883a 	mov	r2,zero
   49db4:	003fe806 	br	49d58 <__alt_data_end+0xfffe9d58>
   49db8:	0047b180 	call	47b18 <__sfvwrite_r>
   49dbc:	003fe606 	br	49d58 <__alt_data_end+0xfffe9d58>

00049dc0 <__sprint_r>:
   49dc0:	30c00217 	ldw	r3,8(r6)
   49dc4:	18000126 	beq	r3,zero,49dcc <__sprint_r+0xc>
   49dc8:	0049cc41 	jmpi	49cc4 <__sprint_r.part.0>
   49dcc:	30000115 	stw	zero,4(r6)
   49dd0:	0005883a 	mov	r2,zero
   49dd4:	f800283a 	ret

00049dd8 <___vfiprintf_internal_r>:
   49dd8:	deffca04 	addi	sp,sp,-216
   49ddc:	dd403115 	stw	r21,196(sp)
   49de0:	dfc03515 	stw	ra,212(sp)
   49de4:	df003415 	stw	fp,208(sp)
   49de8:	ddc03315 	stw	r23,204(sp)
   49dec:	dd803215 	stw	r22,200(sp)
   49df0:	dd003015 	stw	r20,192(sp)
   49df4:	dcc02f15 	stw	r19,188(sp)
   49df8:	dc802e15 	stw	r18,184(sp)
   49dfc:	dc402d15 	stw	r17,180(sp)
   49e00:	dc002c15 	stw	r16,176(sp)
   49e04:	d9002115 	stw	r4,132(sp)
   49e08:	d9402015 	stw	r5,128(sp)
   49e0c:	d9c02215 	stw	r7,136(sp)
   49e10:	302b883a 	mov	r21,r6
   49e14:	20000226 	beq	r4,zero,49e20 <___vfiprintf_internal_r+0x48>
   49e18:	20800e17 	ldw	r2,56(r4)
   49e1c:	1000cf26 	beq	r2,zero,4a15c <___vfiprintf_internal_r+0x384>
   49e20:	d8c02017 	ldw	r3,128(sp)
   49e24:	1880030b 	ldhu	r2,12(r3)
   49e28:	10c8000c 	andi	r3,r2,8192
   49e2c:	1800071e 	bne	r3,zero,49e4c <___vfiprintf_internal_r+0x74>
   49e30:	d9402017 	ldw	r5,128(sp)
   49e34:	00f7ffc4 	movi	r3,-8193
   49e38:	10880014 	ori	r2,r2,8192
   49e3c:	29001917 	ldw	r4,100(r5)
   49e40:	2880030d 	sth	r2,12(r5)
   49e44:	20c6703a 	and	r3,r4,r3
   49e48:	28c01915 	stw	r3,100(r5)
   49e4c:	10c0020c 	andi	r3,r2,8
   49e50:	1800a526 	beq	r3,zero,4a0e8 <___vfiprintf_internal_r+0x310>
   49e54:	d9002017 	ldw	r4,128(sp)
   49e58:	20c00417 	ldw	r3,16(r4)
   49e5c:	1800a226 	beq	r3,zero,4a0e8 <___vfiprintf_internal_r+0x310>
   49e60:	1080068c 	andi	r2,r2,26
   49e64:	00c00284 	movi	r3,10
   49e68:	10c0a826 	beq	r2,r3,4a10c <___vfiprintf_internal_r+0x334>
   49e6c:	d9001a04 	addi	r4,sp,104
   49e70:	d94019c4 	addi	r5,sp,103
   49e74:	04800174 	movhi	r18,5
   49e78:	2145c83a 	sub	r2,r4,r5
   49e7c:	94866504 	addi	r18,r18,6548
   49e80:	d9001e15 	stw	r4,120(sp)
   49e84:	d9401f15 	stw	r5,124(sp)
   49e88:	dec01a15 	stw	sp,104(sp)
   49e8c:	d8001c15 	stw	zero,112(sp)
   49e90:	d8001b15 	stw	zero,108(sp)
   49e94:	d811883a 	mov	r8,sp
   49e98:	d8002615 	stw	zero,152(sp)
   49e9c:	d8002415 	stw	zero,144(sp)
   49ea0:	d8802815 	stw	r2,160(sp)
   49ea4:	a82d883a 	mov	r22,r21
   49ea8:	b0800007 	ldb	r2,0(r22)
   49eac:	10040d26 	beq	r2,zero,4aee4 <___vfiprintf_internal_r+0x110c>
   49eb0:	00c00944 	movi	r3,37
   49eb4:	b029883a 	mov	r20,r22
   49eb8:	10c0021e 	bne	r2,r3,49ec4 <___vfiprintf_internal_r+0xec>
   49ebc:	00001606 	br	49f18 <___vfiprintf_internal_r+0x140>
   49ec0:	10c00326 	beq	r2,r3,49ed0 <___vfiprintf_internal_r+0xf8>
   49ec4:	a5000044 	addi	r20,r20,1
   49ec8:	a0800007 	ldb	r2,0(r20)
   49ecc:	103ffc1e 	bne	r2,zero,49ec0 <__alt_data_end+0xfffe9ec0>
   49ed0:	a5a1c83a 	sub	r16,r20,r22
   49ed4:	80001026 	beq	r16,zero,49f18 <___vfiprintf_internal_r+0x140>
   49ed8:	d8c01c17 	ldw	r3,112(sp)
   49edc:	d8801b17 	ldw	r2,108(sp)
   49ee0:	45800015 	stw	r22,0(r8)
   49ee4:	80c7883a 	add	r3,r16,r3
   49ee8:	10800044 	addi	r2,r2,1
   49eec:	44000115 	stw	r16,4(r8)
   49ef0:	d8c01c15 	stw	r3,112(sp)
   49ef4:	d8801b15 	stw	r2,108(sp)
   49ef8:	010001c4 	movi	r4,7
   49efc:	2080750e 	bge	r4,r2,4a0d4 <___vfiprintf_internal_r+0x2fc>
   49f00:	1803951e 	bne	r3,zero,4ad58 <___vfiprintf_internal_r+0xf80>
   49f04:	d8c02417 	ldw	r3,144(sp)
   49f08:	d8001b15 	stw	zero,108(sp)
   49f0c:	d811883a 	mov	r8,sp
   49f10:	1c07883a 	add	r3,r3,r16
   49f14:	d8c02415 	stw	r3,144(sp)
   49f18:	a0800007 	ldb	r2,0(r20)
   49f1c:	1002e026 	beq	r2,zero,4aaa0 <___vfiprintf_internal_r+0xcc8>
   49f20:	a5800044 	addi	r22,r20,1
   49f24:	a0c00047 	ldb	r3,1(r20)
   49f28:	d8001d85 	stb	zero,118(sp)
   49f2c:	0027883a 	mov	r19,zero
   49f30:	d8002305 	stb	zero,140(sp)
   49f34:	043fffc4 	movi	r16,-1
   49f38:	d8002515 	stw	zero,148(sp)
   49f3c:	0023883a 	mov	r17,zero
   49f40:	05001604 	movi	r20,88
   49f44:	05400244 	movi	r21,9
   49f48:	402f883a 	mov	r23,r8
   49f4c:	b5800044 	addi	r22,r22,1
   49f50:	18bff804 	addi	r2,r3,-32
   49f54:	a0827736 	bltu	r20,r2,4a934 <___vfiprintf_internal_r+0xb5c>
   49f58:	100490ba 	slli	r2,r2,2
   49f5c:	01000174 	movhi	r4,5
   49f60:	2127dc04 	addi	r4,r4,-24720
   49f64:	1105883a 	add	r2,r2,r4
   49f68:	10800017 	ldw	r2,0(r2)
   49f6c:	1000683a 	jmp	r2
   49f70:	0004a634 	movhi	zero,4760
   49f74:	0004a934 	movhi	zero,4772
   49f78:	0004a934 	movhi	zero,4772
   49f7c:	0004a650 	cmplti	zero,zero,4761
   49f80:	0004a934 	movhi	zero,4772
   49f84:	0004a934 	movhi	zero,4772
   49f88:	0004a934 	movhi	zero,4772
   49f8c:	0004a934 	movhi	zero,4772
   49f90:	0004a934 	movhi	zero,4772
   49f94:	0004a934 	movhi	zero,4772
   49f98:	0004a858 	cmpnei	zero,zero,4769
   49f9c:	0004a87c 	xorhi	zero,zero,4769
   49fa0:	0004a934 	movhi	zero,4772
   49fa4:	0004a174 	movhi	zero,4741
   49fa8:	0004a890 	cmplti	zero,zero,4770
   49fac:	0004a934 	movhi	zero,4772
   49fb0:	0004a65c 	xori	zero,zero,4761
   49fb4:	0004a668 	cmpgeui	zero,zero,4761
   49fb8:	0004a668 	cmpgeui	zero,zero,4761
   49fbc:	0004a668 	cmpgeui	zero,zero,4761
   49fc0:	0004a668 	cmpgeui	zero,zero,4761
   49fc4:	0004a668 	cmpgeui	zero,zero,4761
   49fc8:	0004a668 	cmpgeui	zero,zero,4761
   49fcc:	0004a668 	cmpgeui	zero,zero,4761
   49fd0:	0004a668 	cmpgeui	zero,zero,4761
   49fd4:	0004a668 	cmpgeui	zero,zero,4761
   49fd8:	0004a934 	movhi	zero,4772
   49fdc:	0004a934 	movhi	zero,4772
   49fe0:	0004a934 	movhi	zero,4772
   49fe4:	0004a934 	movhi	zero,4772
   49fe8:	0004a934 	movhi	zero,4772
   49fec:	0004a934 	movhi	zero,4772
   49ff0:	0004a934 	movhi	zero,4772
   49ff4:	0004a934 	movhi	zero,4772
   49ff8:	0004a934 	movhi	zero,4772
   49ffc:	0004a934 	movhi	zero,4772
   4a000:	0004a6a8 	cmpgeui	zero,zero,4762
   4a004:	0004a934 	movhi	zero,4772
   4a008:	0004a934 	movhi	zero,4772
   4a00c:	0004a934 	movhi	zero,4772
   4a010:	0004a934 	movhi	zero,4772
   4a014:	0004a934 	movhi	zero,4772
   4a018:	0004a934 	movhi	zero,4772
   4a01c:	0004a934 	movhi	zero,4772
   4a020:	0004a934 	movhi	zero,4772
   4a024:	0004a934 	movhi	zero,4772
   4a028:	0004a934 	movhi	zero,4772
   4a02c:	0004a6e4 	muli	zero,zero,4763
   4a030:	0004a934 	movhi	zero,4772
   4a034:	0004a934 	movhi	zero,4772
   4a038:	0004a934 	movhi	zero,4772
   4a03c:	0004a934 	movhi	zero,4772
   4a040:	0004a934 	movhi	zero,4772
   4a044:	0004a740 	call	4a74 <__alt_mem_onchip_mem_1f-0x3b58c>
   4a048:	0004a934 	movhi	zero,4772
   4a04c:	0004a934 	movhi	zero,4772
   4a050:	0004a7b4 	movhi	zero,4766
   4a054:	0004a934 	movhi	zero,4772
   4a058:	0004a934 	movhi	zero,4772
   4a05c:	0004a934 	movhi	zero,4772
   4a060:	0004a934 	movhi	zero,4772
   4a064:	0004a934 	movhi	zero,4772
   4a068:	0004a934 	movhi	zero,4772
   4a06c:	0004a934 	movhi	zero,4772
   4a070:	0004a934 	movhi	zero,4772
   4a074:	0004a934 	movhi	zero,4772
   4a078:	0004a934 	movhi	zero,4772
   4a07c:	0004a55c 	xori	zero,zero,4757
   4a080:	0004a58c 	andi	zero,zero,4758
   4a084:	0004a934 	movhi	zero,4772
   4a088:	0004a934 	movhi	zero,4772
   4a08c:	0004a934 	movhi	zero,4772
   4a090:	0004a8dc 	xori	zero,zero,4771
   4a094:	0004a58c 	andi	zero,zero,4758
   4a098:	0004a934 	movhi	zero,4772
   4a09c:	0004a934 	movhi	zero,4772
   4a0a0:	0004a434 	movhi	zero,4752
   4a0a4:	0004a934 	movhi	zero,4772
   4a0a8:	0004a448 	cmpgei	zero,zero,4753
   4a0ac:	0004a480 	call	4a48 <__alt_mem_onchip_mem_1f-0x3b5b8>
   4a0b0:	0004a180 	call	4a18 <__alt_mem_onchip_mem_1f-0x3b5e8>
   4a0b4:	0004a428 	cmpgeui	zero,zero,4752
   4a0b8:	0004a934 	movhi	zero,4772
   4a0bc:	0004a7f4 	movhi	zero,4767
   4a0c0:	0004a934 	movhi	zero,4772
   4a0c4:	0004a840 	call	4a84 <__alt_mem_onchip_mem_1f-0x3b57c>
   4a0c8:	0004a934 	movhi	zero,4772
   4a0cc:	0004a934 	movhi	zero,4772
   4a0d0:	0004a504 	movi	zero,4756
   4a0d4:	42000204 	addi	r8,r8,8
   4a0d8:	d8c02417 	ldw	r3,144(sp)
   4a0dc:	1c07883a 	add	r3,r3,r16
   4a0e0:	d8c02415 	stw	r3,144(sp)
   4a0e4:	003f8c06 	br	49f18 <__alt_data_end+0xfffe9f18>
   4a0e8:	d9402017 	ldw	r5,128(sp)
   4a0ec:	d9002117 	ldw	r4,132(sp)
   4a0f0:	00460140 	call	46014 <__swsetup_r>
   4a0f4:	1003c11e 	bne	r2,zero,4affc <___vfiprintf_internal_r+0x1224>
   4a0f8:	d9402017 	ldw	r5,128(sp)
   4a0fc:	00c00284 	movi	r3,10
   4a100:	2880030b 	ldhu	r2,12(r5)
   4a104:	1080068c 	andi	r2,r2,26
   4a108:	10ff581e 	bne	r2,r3,49e6c <__alt_data_end+0xfffe9e6c>
   4a10c:	d8c02017 	ldw	r3,128(sp)
   4a110:	1880038f 	ldh	r2,14(r3)
   4a114:	103f5516 	blt	r2,zero,49e6c <__alt_data_end+0xfffe9e6c>
   4a118:	d9c02217 	ldw	r7,136(sp)
   4a11c:	d9002117 	ldw	r4,132(sp)
   4a120:	a80d883a 	mov	r6,r21
   4a124:	180b883a 	mov	r5,r3
   4a128:	004b3000 	call	4b300 <__sbprintf>
   4a12c:	dfc03517 	ldw	ra,212(sp)
   4a130:	df003417 	ldw	fp,208(sp)
   4a134:	ddc03317 	ldw	r23,204(sp)
   4a138:	dd803217 	ldw	r22,200(sp)
   4a13c:	dd403117 	ldw	r21,196(sp)
   4a140:	dd003017 	ldw	r20,192(sp)
   4a144:	dcc02f17 	ldw	r19,188(sp)
   4a148:	dc802e17 	ldw	r18,184(sp)
   4a14c:	dc402d17 	ldw	r17,180(sp)
   4a150:	dc002c17 	ldw	r16,176(sp)
   4a154:	dec03604 	addi	sp,sp,216
   4a158:	f800283a 	ret
   4a15c:	0041a9c0 	call	41a9c <__sinit>
   4a160:	003f2f06 	br	49e20 <__alt_data_end+0xfffe9e20>
   4a164:	d8c02517 	ldw	r3,148(sp)
   4a168:	d8802215 	stw	r2,136(sp)
   4a16c:	00c7c83a 	sub	r3,zero,r3
   4a170:	d8c02515 	stw	r3,148(sp)
   4a174:	8c400114 	ori	r17,r17,4
   4a178:	b0c00007 	ldb	r3,0(r22)
   4a17c:	003f7306 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a180:	00800c04 	movi	r2,48
   4a184:	d9402217 	ldw	r5,136(sp)
   4a188:	d8801d05 	stb	r2,116(sp)
   4a18c:	00801e04 	movi	r2,120
   4a190:	d8801d45 	stb	r2,117(sp)
   4a194:	d8001d85 	stb	zero,118(sp)
   4a198:	b811883a 	mov	r8,r23
   4a19c:	28c00104 	addi	r3,r5,4
   4a1a0:	2cc00017 	ldw	r19,0(r5)
   4a1a4:	0029883a 	mov	r20,zero
   4a1a8:	88800094 	ori	r2,r17,2
   4a1ac:	80032516 	blt	r16,zero,4ae44 <___vfiprintf_internal_r+0x106c>
   4a1b0:	00bfdfc4 	movi	r2,-129
   4a1b4:	88a2703a 	and	r17,r17,r2
   4a1b8:	d8c02215 	stw	r3,136(sp)
   4a1bc:	8c400094 	ori	r17,r17,2
   4a1c0:	98032a1e 	bne	r19,zero,4ae6c <___vfiprintf_internal_r+0x1094>
   4a1c4:	00800174 	movhi	r2,5
   4a1c8:	10860504 	addi	r2,r2,6164
   4a1cc:	d8802615 	stw	r2,152(sp)
   4a1d0:	002b883a 	mov	r21,zero
   4a1d4:	8001741e 	bne	r16,zero,4a7a8 <___vfiprintf_internal_r+0x9d0>
   4a1d8:	0021883a 	mov	r16,zero
   4a1dc:	0029883a 	mov	r20,zero
   4a1e0:	ddc01a04 	addi	r23,sp,104
   4a1e4:	8027883a 	mov	r19,r16
   4a1e8:	8500010e 	bge	r16,r20,4a1f0 <___vfiprintf_internal_r+0x418>
   4a1ec:	a027883a 	mov	r19,r20
   4a1f0:	ad403fcc 	andi	r21,r21,255
   4a1f4:	ad40201c 	xori	r21,r21,128
   4a1f8:	ad7fe004 	addi	r21,r21,-128
   4a1fc:	a8000126 	beq	r21,zero,4a204 <___vfiprintf_internal_r+0x42c>
   4a200:	9cc00044 	addi	r19,r19,1
   4a204:	89c0008c 	andi	r7,r17,2
   4a208:	38000126 	beq	r7,zero,4a210 <___vfiprintf_internal_r+0x438>
   4a20c:	9cc00084 	addi	r19,r19,2
   4a210:	88c0210c 	andi	r3,r17,132
   4a214:	1801dd1e 	bne	r3,zero,4a98c <___vfiprintf_internal_r+0xbb4>
   4a218:	d9402517 	ldw	r5,148(sp)
   4a21c:	2cebc83a 	sub	r21,r5,r19
   4a220:	0541da0e 	bge	zero,r21,4a98c <___vfiprintf_internal_r+0xbb4>
   4a224:	07000404 	movi	fp,16
   4a228:	d8801c17 	ldw	r2,112(sp)
   4a22c:	e543be0e 	bge	fp,r21,4b128 <___vfiprintf_internal_r+0x1350>
   4a230:	01400174 	movhi	r5,5
   4a234:	29466904 	addi	r5,r5,6564
   4a238:	dc002715 	stw	r16,156(sp)
   4a23c:	d9801b17 	ldw	r6,108(sp)
   4a240:	a821883a 	mov	r16,r21
   4a244:	d9402315 	stw	r5,140(sp)
   4a248:	028001c4 	movi	r10,7
   4a24c:	d9c02915 	stw	r7,164(sp)
   4a250:	182b883a 	mov	r21,r3
   4a254:	00000506 	br	4a26c <___vfiprintf_internal_r+0x494>
   4a258:	31000084 	addi	r4,r6,2
   4a25c:	42000204 	addi	r8,r8,8
   4a260:	180d883a 	mov	r6,r3
   4a264:	843ffc04 	addi	r16,r16,-16
   4a268:	e4000f0e 	bge	fp,r16,4a2a8 <___vfiprintf_internal_r+0x4d0>
   4a26c:	01000174 	movhi	r4,5
   4a270:	10800404 	addi	r2,r2,16
   4a274:	30c00044 	addi	r3,r6,1
   4a278:	21066904 	addi	r4,r4,6564
   4a27c:	41000015 	stw	r4,0(r8)
   4a280:	47000115 	stw	fp,4(r8)
   4a284:	d8801c15 	stw	r2,112(sp)
   4a288:	d8c01b15 	stw	r3,108(sp)
   4a28c:	50fff20e 	bge	r10,r3,4a258 <__alt_data_end+0xfffea258>
   4a290:	1001b21e 	bne	r2,zero,4a95c <___vfiprintf_internal_r+0xb84>
   4a294:	843ffc04 	addi	r16,r16,-16
   4a298:	000d883a 	mov	r6,zero
   4a29c:	01000044 	movi	r4,1
   4a2a0:	d811883a 	mov	r8,sp
   4a2a4:	e43ff116 	blt	fp,r16,4a26c <__alt_data_end+0xfffea26c>
   4a2a8:	a807883a 	mov	r3,r21
   4a2ac:	d9c02917 	ldw	r7,164(sp)
   4a2b0:	802b883a 	mov	r21,r16
   4a2b4:	dc002717 	ldw	r16,156(sp)
   4a2b8:	d9402317 	ldw	r5,140(sp)
   4a2bc:	a885883a 	add	r2,r21,r2
   4a2c0:	45400115 	stw	r21,4(r8)
   4a2c4:	41400015 	stw	r5,0(r8)
   4a2c8:	d8801c15 	stw	r2,112(sp)
   4a2cc:	d9001b15 	stw	r4,108(sp)
   4a2d0:	014001c4 	movi	r5,7
   4a2d4:	29026216 	blt	r5,r4,4ac60 <___vfiprintf_internal_r+0xe88>
   4a2d8:	d9801d87 	ldb	r6,118(sp)
   4a2dc:	42000204 	addi	r8,r8,8
   4a2e0:	21400044 	addi	r5,r4,1
   4a2e4:	3001ae1e 	bne	r6,zero,4a9a0 <___vfiprintf_internal_r+0xbc8>
   4a2e8:	3801bb26 	beq	r7,zero,4a9d8 <___vfiprintf_internal_r+0xc00>
   4a2ec:	d9001d04 	addi	r4,sp,116
   4a2f0:	10800084 	addi	r2,r2,2
   4a2f4:	41000015 	stw	r4,0(r8)
   4a2f8:	01000084 	movi	r4,2
   4a2fc:	41000115 	stw	r4,4(r8)
   4a300:	d8801c15 	stw	r2,112(sp)
   4a304:	d9401b15 	stw	r5,108(sp)
   4a308:	010001c4 	movi	r4,7
   4a30c:	2142680e 	bge	r4,r5,4acb0 <___vfiprintf_internal_r+0xed8>
   4a310:	1002b11e 	bne	r2,zero,4add8 <___vfiprintf_internal_r+0x1000>
   4a314:	01802004 	movi	r6,128
   4a318:	01400044 	movi	r5,1
   4a31c:	0009883a 	mov	r4,zero
   4a320:	d811883a 	mov	r8,sp
   4a324:	1981ae1e 	bne	r3,r6,4a9e0 <___vfiprintf_internal_r+0xc08>
   4a328:	d8c02517 	ldw	r3,148(sp)
   4a32c:	1cf9c83a 	sub	fp,r3,r19
   4a330:	0701ab0e 	bge	zero,fp,4a9e0 <___vfiprintf_internal_r+0xc08>
   4a334:	05400404 	movi	r21,16
   4a338:	af03a90e 	bge	r21,fp,4b1e0 <___vfiprintf_internal_r+0x1408>
   4a33c:	01400174 	movhi	r5,5
   4a340:	29466504 	addi	r5,r5,6548
   4a344:	d9402315 	stw	r5,140(sp)
   4a348:	01c001c4 	movi	r7,7
   4a34c:	00000506 	br	4a364 <___vfiprintf_internal_r+0x58c>
   4a350:	21800084 	addi	r6,r4,2
   4a354:	42000204 	addi	r8,r8,8
   4a358:	1809883a 	mov	r4,r3
   4a35c:	e73ffc04 	addi	fp,fp,-16
   4a360:	af000d0e 	bge	r21,fp,4a398 <___vfiprintf_internal_r+0x5c0>
   4a364:	10800404 	addi	r2,r2,16
   4a368:	20c00044 	addi	r3,r4,1
   4a36c:	44800015 	stw	r18,0(r8)
   4a370:	45400115 	stw	r21,4(r8)
   4a374:	d8801c15 	stw	r2,112(sp)
   4a378:	d8c01b15 	stw	r3,108(sp)
   4a37c:	38fff40e 	bge	r7,r3,4a350 <__alt_data_end+0xfffea350>
   4a380:	10022b1e 	bne	r2,zero,4ac30 <___vfiprintf_internal_r+0xe58>
   4a384:	e73ffc04 	addi	fp,fp,-16
   4a388:	01800044 	movi	r6,1
   4a38c:	0009883a 	mov	r4,zero
   4a390:	d811883a 	mov	r8,sp
   4a394:	af3ff316 	blt	r21,fp,4a364 <__alt_data_end+0xfffea364>
   4a398:	d8c02317 	ldw	r3,140(sp)
   4a39c:	1705883a 	add	r2,r2,fp
   4a3a0:	47000115 	stw	fp,4(r8)
   4a3a4:	40c00015 	stw	r3,0(r8)
   4a3a8:	d8801c15 	stw	r2,112(sp)
   4a3ac:	d9801b15 	stw	r6,108(sp)
   4a3b0:	00c001c4 	movi	r3,7
   4a3b4:	19829416 	blt	r3,r6,4ae08 <___vfiprintf_internal_r+0x1030>
   4a3b8:	8521c83a 	sub	r16,r16,r20
   4a3bc:	42000204 	addi	r8,r8,8
   4a3c0:	31400044 	addi	r5,r6,1
   4a3c4:	3009883a 	mov	r4,r6
   4a3c8:	04018716 	blt	zero,r16,4a9e8 <___vfiprintf_internal_r+0xc10>
   4a3cc:	a085883a 	add	r2,r20,r2
   4a3d0:	45c00015 	stw	r23,0(r8)
   4a3d4:	45000115 	stw	r20,4(r8)
   4a3d8:	d8801c15 	stw	r2,112(sp)
   4a3dc:	d9401b15 	stw	r5,108(sp)
   4a3e0:	00c001c4 	movi	r3,7
   4a3e4:	1941c20e 	bge	r3,r5,4aaf0 <___vfiprintf_internal_r+0xd18>
   4a3e8:	1002531e 	bne	r2,zero,4ad38 <___vfiprintf_internal_r+0xf60>
   4a3ec:	d8001b15 	stw	zero,108(sp)
   4a3f0:	8c40010c 	andi	r17,r17,4
   4a3f4:	88023226 	beq	r17,zero,4acc0 <___vfiprintf_internal_r+0xee8>
   4a3f8:	d9002517 	ldw	r4,148(sp)
   4a3fc:	24e3c83a 	sub	r17,r4,r19
   4a400:	04432916 	blt	zero,r17,4b0a8 <___vfiprintf_internal_r+0x12d0>
   4a404:	d8802517 	ldw	r2,148(sp)
   4a408:	14c0010e 	bge	r2,r19,4a410 <___vfiprintf_internal_r+0x638>
   4a40c:	9805883a 	mov	r2,r19
   4a410:	d8c02417 	ldw	r3,144(sp)
   4a414:	1887883a 	add	r3,r3,r2
   4a418:	d8c02415 	stw	r3,144(sp)
   4a41c:	d8001b15 	stw	zero,108(sp)
   4a420:	d811883a 	mov	r8,sp
   4a424:	003ea006 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4a428:	8c400814 	ori	r17,r17,32
   4a42c:	b0c00007 	ldb	r3,0(r22)
   4a430:	003ec606 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a434:	b0c00007 	ldb	r3,0(r22)
   4a438:	00801b04 	movi	r2,108
   4a43c:	18832026 	beq	r3,r2,4b0c0 <___vfiprintf_internal_r+0x12e8>
   4a440:	8c400414 	ori	r17,r17,16
   4a444:	003ec106 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a448:	9cc03fcc 	andi	r19,r19,255
   4a44c:	b811883a 	mov	r8,r23
   4a450:	9803981e 	bne	r19,zero,4b2b4 <___vfiprintf_internal_r+0x14dc>
   4a454:	8880080c 	andi	r2,r17,32
   4a458:	1002be26 	beq	r2,zero,4af54 <___vfiprintf_internal_r+0x117c>
   4a45c:	d9002217 	ldw	r4,136(sp)
   4a460:	d9402417 	ldw	r5,144(sp)
   4a464:	20800017 	ldw	r2,0(r4)
   4a468:	2807d7fa 	srai	r3,r5,31
   4a46c:	21000104 	addi	r4,r4,4
   4a470:	d9002215 	stw	r4,136(sp)
   4a474:	11400015 	stw	r5,0(r2)
   4a478:	10c00115 	stw	r3,4(r2)
   4a47c:	003e8a06 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4a480:	9cc03fcc 	andi	r19,r19,255
   4a484:	b811883a 	mov	r8,r23
   4a488:	9803871e 	bne	r19,zero,4b2a8 <___vfiprintf_internal_r+0x14d0>
   4a48c:	8880080c 	andi	r2,r17,32
   4a490:	10009a26 	beq	r2,zero,4a6fc <___vfiprintf_internal_r+0x924>
   4a494:	d9002217 	ldw	r4,136(sp)
   4a498:	d8001d85 	stb	zero,118(sp)
   4a49c:	20800204 	addi	r2,r4,8
   4a4a0:	24c00017 	ldw	r19,0(r4)
   4a4a4:	25000117 	ldw	r20,4(r4)
   4a4a8:	8002a416 	blt	r16,zero,4af3c <___vfiprintf_internal_r+0x1164>
   4a4ac:	013fdfc4 	movi	r4,-129
   4a4b0:	9d06b03a 	or	r3,r19,r20
   4a4b4:	d8802215 	stw	r2,136(sp)
   4a4b8:	8922703a 	and	r17,r17,r4
   4a4bc:	18009b26 	beq	r3,zero,4a72c <___vfiprintf_internal_r+0x954>
   4a4c0:	002b883a 	mov	r21,zero
   4a4c4:	ddc01a04 	addi	r23,sp,104
   4a4c8:	9806d0fa 	srli	r3,r19,3
   4a4cc:	a008977a 	slli	r4,r20,29
   4a4d0:	a028d0fa 	srli	r20,r20,3
   4a4d4:	9cc001cc 	andi	r19,r19,7
   4a4d8:	98800c04 	addi	r2,r19,48
   4a4dc:	bdffffc4 	addi	r23,r23,-1
   4a4e0:	20e6b03a 	or	r19,r4,r3
   4a4e4:	b8800005 	stb	r2,0(r23)
   4a4e8:	9d06b03a 	or	r3,r19,r20
   4a4ec:	183ff61e 	bne	r3,zero,4a4c8 <__alt_data_end+0xfffea4c8>
   4a4f0:	88c0004c 	andi	r3,r17,1
   4a4f4:	18021f1e 	bne	r3,zero,4ad74 <___vfiprintf_internal_r+0xf9c>
   4a4f8:	d9401e17 	ldw	r5,120(sp)
   4a4fc:	2de9c83a 	sub	r20,r5,r23
   4a500:	003f3806 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4a504:	9cc03fcc 	andi	r19,r19,255
   4a508:	b811883a 	mov	r8,r23
   4a50c:	98034f1e 	bne	r19,zero,4b24c <___vfiprintf_internal_r+0x1474>
   4a510:	00800174 	movhi	r2,5
   4a514:	10860504 	addi	r2,r2,6164
   4a518:	d8802615 	stw	r2,152(sp)
   4a51c:	8880080c 	andi	r2,r17,32
   4a520:	1000ac26 	beq	r2,zero,4a7d4 <___vfiprintf_internal_r+0x9fc>
   4a524:	d9002217 	ldw	r4,136(sp)
   4a528:	24c00017 	ldw	r19,0(r4)
   4a52c:	25000117 	ldw	r20,4(r4)
   4a530:	21000204 	addi	r4,r4,8
   4a534:	d9002215 	stw	r4,136(sp)
   4a538:	8880004c 	andi	r2,r17,1
   4a53c:	1001e726 	beq	r2,zero,4acdc <___vfiprintf_internal_r+0xf04>
   4a540:	9d04b03a 	or	r2,r19,r20
   4a544:	10025c1e 	bne	r2,zero,4aeb8 <___vfiprintf_internal_r+0x10e0>
   4a548:	d8001d85 	stb	zero,118(sp)
   4a54c:	80024416 	blt	r16,zero,4ae60 <___vfiprintf_internal_r+0x1088>
   4a550:	00bfdfc4 	movi	r2,-129
   4a554:	88a2703a 	and	r17,r17,r2
   4a558:	003f1d06 	br	4a1d0 <__alt_data_end+0xfffea1d0>
   4a55c:	d8c02217 	ldw	r3,136(sp)
   4a560:	04c00044 	movi	r19,1
   4a564:	b811883a 	mov	r8,r23
   4a568:	18800017 	ldw	r2,0(r3)
   4a56c:	18c00104 	addi	r3,r3,4
   4a570:	d8001d85 	stb	zero,118(sp)
   4a574:	d8801005 	stb	r2,64(sp)
   4a578:	d8c02215 	stw	r3,136(sp)
   4a57c:	9829883a 	mov	r20,r19
   4a580:	ddc01004 	addi	r23,sp,64
   4a584:	0021883a 	mov	r16,zero
   4a588:	003f1e06 	br	4a204 <__alt_data_end+0xfffea204>
   4a58c:	9cc03fcc 	andi	r19,r19,255
   4a590:	b811883a 	mov	r8,r23
   4a594:	9803331e 	bne	r19,zero,4b264 <___vfiprintf_internal_r+0x148c>
   4a598:	8880080c 	andi	r2,r17,32
   4a59c:	10004826 	beq	r2,zero,4a6c0 <___vfiprintf_internal_r+0x8e8>
   4a5a0:	d9002217 	ldw	r4,136(sp)
   4a5a4:	20800117 	ldw	r2,4(r4)
   4a5a8:	24c00017 	ldw	r19,0(r4)
   4a5ac:	21000204 	addi	r4,r4,8
   4a5b0:	d9002215 	stw	r4,136(sp)
   4a5b4:	1029883a 	mov	r20,r2
   4a5b8:	10024c16 	blt	r2,zero,4aeec <___vfiprintf_internal_r+0x1114>
   4a5bc:	dd401d83 	ldbu	r21,118(sp)
   4a5c0:	80007116 	blt	r16,zero,4a788 <___vfiprintf_internal_r+0x9b0>
   4a5c4:	00ffdfc4 	movi	r3,-129
   4a5c8:	9d04b03a 	or	r2,r19,r20
   4a5cc:	88e2703a 	and	r17,r17,r3
   4a5d0:	1000d126 	beq	r2,zero,4a918 <___vfiprintf_internal_r+0xb40>
   4a5d4:	a0023526 	beq	r20,zero,4aeac <___vfiprintf_internal_r+0x10d4>
   4a5d8:	ddc01a04 	addi	r23,sp,104
   4a5dc:	4039883a 	mov	fp,r8
   4a5e0:	9809883a 	mov	r4,r19
   4a5e4:	a00b883a 	mov	r5,r20
   4a5e8:	01800284 	movi	r6,10
   4a5ec:	000f883a 	mov	r7,zero
   4a5f0:	004be840 	call	4be84 <__umoddi3>
   4a5f4:	10800c04 	addi	r2,r2,48
   4a5f8:	bdffffc4 	addi	r23,r23,-1
   4a5fc:	9809883a 	mov	r4,r19
   4a600:	a00b883a 	mov	r5,r20
   4a604:	b8800005 	stb	r2,0(r23)
   4a608:	01800284 	movi	r6,10
   4a60c:	000f883a 	mov	r7,zero
   4a610:	004b8880 	call	4b888 <__udivdi3>
   4a614:	1027883a 	mov	r19,r2
   4a618:	10c4b03a 	or	r2,r2,r3
   4a61c:	1829883a 	mov	r20,r3
   4a620:	103fef1e 	bne	r2,zero,4a5e0 <__alt_data_end+0xfffea5e0>
   4a624:	d9001e17 	ldw	r4,120(sp)
   4a628:	e011883a 	mov	r8,fp
   4a62c:	25e9c83a 	sub	r20,r4,r23
   4a630:	003eec06 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4a634:	d8802307 	ldb	r2,140(sp)
   4a638:	1002361e 	bne	r2,zero,4af14 <___vfiprintf_internal_r+0x113c>
   4a63c:	00c00804 	movi	r3,32
   4a640:	d8c02305 	stb	r3,140(sp)
   4a644:	04c00044 	movi	r19,1
   4a648:	b0c00007 	ldb	r3,0(r22)
   4a64c:	003e3f06 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a650:	8c400054 	ori	r17,r17,1
   4a654:	b0c00007 	ldb	r3,0(r22)
   4a658:	003e3c06 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a65c:	8c402014 	ori	r17,r17,128
   4a660:	b0c00007 	ldb	r3,0(r22)
   4a664:	003e3906 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a668:	dc002715 	stw	r16,156(sp)
   4a66c:	d8002515 	stw	zero,148(sp)
   4a670:	1f3ff404 	addi	fp,r3,-48
   4a674:	0009883a 	mov	r4,zero
   4a678:	b021883a 	mov	r16,r22
   4a67c:	01400284 	movi	r5,10
   4a680:	004131c0 	call	4131c <__mulsi3>
   4a684:	80c00007 	ldb	r3,0(r16)
   4a688:	e089883a 	add	r4,fp,r2
   4a68c:	b5800044 	addi	r22,r22,1
   4a690:	1f3ff404 	addi	fp,r3,-48
   4a694:	b021883a 	mov	r16,r22
   4a698:	af3ff82e 	bgeu	r21,fp,4a67c <__alt_data_end+0xfffea67c>
   4a69c:	d9002515 	stw	r4,148(sp)
   4a6a0:	dc002717 	ldw	r16,156(sp)
   4a6a4:	003e2a06 	br	49f50 <__alt_data_end+0xfffe9f50>
   4a6a8:	9cc03fcc 	andi	r19,r19,255
   4a6ac:	b811883a 	mov	r8,r23
   4a6b0:	9802e91e 	bne	r19,zero,4b258 <___vfiprintf_internal_r+0x1480>
   4a6b4:	8c400414 	ori	r17,r17,16
   4a6b8:	8880080c 	andi	r2,r17,32
   4a6bc:	103fb81e 	bne	r2,zero,4a5a0 <__alt_data_end+0xfffea5a0>
   4a6c0:	8880040c 	andi	r2,r17,16
   4a6c4:	10022e26 	beq	r2,zero,4af80 <___vfiprintf_internal_r+0x11a8>
   4a6c8:	d9402217 	ldw	r5,136(sp)
   4a6cc:	2cc00017 	ldw	r19,0(r5)
   4a6d0:	29400104 	addi	r5,r5,4
   4a6d4:	d9402215 	stw	r5,136(sp)
   4a6d8:	9829d7fa 	srai	r20,r19,31
   4a6dc:	a005883a 	mov	r2,r20
   4a6e0:	003fb506 	br	4a5b8 <__alt_data_end+0xfffea5b8>
   4a6e4:	9cc03fcc 	andi	r19,r19,255
   4a6e8:	b811883a 	mov	r8,r23
   4a6ec:	9802fa1e 	bne	r19,zero,4b2d8 <___vfiprintf_internal_r+0x1500>
   4a6f0:	8c400414 	ori	r17,r17,16
   4a6f4:	8880080c 	andi	r2,r17,32
   4a6f8:	103f661e 	bne	r2,zero,4a494 <__alt_data_end+0xfffea494>
   4a6fc:	8880040c 	andi	r2,r17,16
   4a700:	10020626 	beq	r2,zero,4af1c <___vfiprintf_internal_r+0x1144>
   4a704:	d9402217 	ldw	r5,136(sp)
   4a708:	d8001d85 	stb	zero,118(sp)
   4a70c:	0029883a 	mov	r20,zero
   4a710:	28800104 	addi	r2,r5,4
   4a714:	2cc00017 	ldw	r19,0(r5)
   4a718:	80020816 	blt	r16,zero,4af3c <___vfiprintf_internal_r+0x1164>
   4a71c:	00ffdfc4 	movi	r3,-129
   4a720:	d8802215 	stw	r2,136(sp)
   4a724:	88e2703a 	and	r17,r17,r3
   4a728:	983f651e 	bne	r19,zero,4a4c0 <__alt_data_end+0xfffea4c0>
   4a72c:	002b883a 	mov	r21,zero
   4a730:	8002cf26 	beq	r16,zero,4b270 <___vfiprintf_internal_r+0x1498>
   4a734:	0027883a 	mov	r19,zero
   4a738:	0029883a 	mov	r20,zero
   4a73c:	003f6106 	br	4a4c4 <__alt_data_end+0xfffea4c4>
   4a740:	9cc03fcc 	andi	r19,r19,255
   4a744:	b811883a 	mov	r8,r23
   4a748:	9802e01e 	bne	r19,zero,4b2cc <___vfiprintf_internal_r+0x14f4>
   4a74c:	8c400414 	ori	r17,r17,16
   4a750:	8880080c 	andi	r2,r17,32
   4a754:	1000641e 	bne	r2,zero,4a8e8 <___vfiprintf_internal_r+0xb10>
   4a758:	8880040c 	andi	r2,r17,16
   4a75c:	1001c81e 	bne	r2,zero,4ae80 <___vfiprintf_internal_r+0x10a8>
   4a760:	8880100c 	andi	r2,r17,64
   4a764:	d8001d85 	stb	zero,118(sp)
   4a768:	1002281e 	bne	r2,zero,4b00c <___vfiprintf_internal_r+0x1234>
   4a76c:	d9002217 	ldw	r4,136(sp)
   4a770:	0029883a 	mov	r20,zero
   4a774:	20800104 	addi	r2,r4,4
   4a778:	24c00017 	ldw	r19,0(r4)
   4a77c:	8001c60e 	bge	r16,zero,4ae98 <___vfiprintf_internal_r+0x10c0>
   4a780:	d8802215 	stw	r2,136(sp)
   4a784:	002b883a 	mov	r21,zero
   4a788:	9d04b03a 	or	r2,r19,r20
   4a78c:	103f911e 	bne	r2,zero,4a5d4 <__alt_data_end+0xfffea5d4>
   4a790:	00800044 	movi	r2,1
   4a794:	10803fcc 	andi	r2,r2,255
   4a798:	00c00044 	movi	r3,1
   4a79c:	10c05f26 	beq	r2,r3,4a91c <___vfiprintf_internal_r+0xb44>
   4a7a0:	00c00084 	movi	r3,2
   4a7a4:	10ffe31e 	bne	r2,r3,4a734 <__alt_data_end+0xfffea734>
   4a7a8:	0027883a 	mov	r19,zero
   4a7ac:	0029883a 	mov	r20,zero
   4a7b0:	00015106 	br	4acf8 <___vfiprintf_internal_r+0xf20>
   4a7b4:	9cc03fcc 	andi	r19,r19,255
   4a7b8:	b811883a 	mov	r8,r23
   4a7bc:	9802c01e 	bne	r19,zero,4b2c0 <___vfiprintf_internal_r+0x14e8>
   4a7c0:	01400174 	movhi	r5,5
   4a7c4:	29460004 	addi	r5,r5,6144
   4a7c8:	d9402615 	stw	r5,152(sp)
   4a7cc:	8880080c 	andi	r2,r17,32
   4a7d0:	103f541e 	bne	r2,zero,4a524 <__alt_data_end+0xfffea524>
   4a7d4:	8880040c 	andi	r2,r17,16
   4a7d8:	1001f226 	beq	r2,zero,4afa4 <___vfiprintf_internal_r+0x11cc>
   4a7dc:	d9402217 	ldw	r5,136(sp)
   4a7e0:	0029883a 	mov	r20,zero
   4a7e4:	2cc00017 	ldw	r19,0(r5)
   4a7e8:	29400104 	addi	r5,r5,4
   4a7ec:	d9402215 	stw	r5,136(sp)
   4a7f0:	003f5106 	br	4a538 <__alt_data_end+0xfffea538>
   4a7f4:	d8c02217 	ldw	r3,136(sp)
   4a7f8:	b811883a 	mov	r8,r23
   4a7fc:	d8001d85 	stb	zero,118(sp)
   4a800:	1dc00017 	ldw	r23,0(r3)
   4a804:	1f000104 	addi	fp,r3,4
   4a808:	b8025926 	beq	r23,zero,4b170 <___vfiprintf_internal_r+0x1398>
   4a80c:	80023316 	blt	r16,zero,4b0dc <___vfiprintf_internal_r+0x1304>
   4a810:	800d883a 	mov	r6,r16
   4a814:	000b883a 	mov	r5,zero
   4a818:	b809883a 	mov	r4,r23
   4a81c:	da002a15 	stw	r8,168(sp)
   4a820:	00481700 	call	48170 <memchr>
   4a824:	da002a17 	ldw	r8,168(sp)
   4a828:	10026826 	beq	r2,zero,4b1cc <___vfiprintf_internal_r+0x13f4>
   4a82c:	15e9c83a 	sub	r20,r2,r23
   4a830:	dd401d83 	ldbu	r21,118(sp)
   4a834:	df002215 	stw	fp,136(sp)
   4a838:	0021883a 	mov	r16,zero
   4a83c:	003e6906 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4a840:	9cc03fcc 	andi	r19,r19,255
   4a844:	b811883a 	mov	r8,r23
   4a848:	983fc126 	beq	r19,zero,4a750 <__alt_data_end+0xfffea750>
   4a84c:	d8c02303 	ldbu	r3,140(sp)
   4a850:	d8c01d85 	stb	r3,118(sp)
   4a854:	003fbe06 	br	4a750 <__alt_data_end+0xfffea750>
   4a858:	d9002217 	ldw	r4,136(sp)
   4a85c:	d9402217 	ldw	r5,136(sp)
   4a860:	21000017 	ldw	r4,0(r4)
   4a864:	28800104 	addi	r2,r5,4
   4a868:	d9002515 	stw	r4,148(sp)
   4a86c:	203e3d16 	blt	r4,zero,4a164 <__alt_data_end+0xfffea164>
   4a870:	d8802215 	stw	r2,136(sp)
   4a874:	b0c00007 	ldb	r3,0(r22)
   4a878:	003db406 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a87c:	00c00ac4 	movi	r3,43
   4a880:	d8c02305 	stb	r3,140(sp)
   4a884:	04c00044 	movi	r19,1
   4a888:	b0c00007 	ldb	r3,0(r22)
   4a88c:	003daf06 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a890:	b0c00007 	ldb	r3,0(r22)
   4a894:	01000a84 	movi	r4,42
   4a898:	b4000044 	addi	r16,r22,1
   4a89c:	19025e26 	beq	r3,r4,4b218 <___vfiprintf_internal_r+0x1440>
   4a8a0:	1f3ff404 	addi	fp,r3,-48
   4a8a4:	0009883a 	mov	r4,zero
   4a8a8:	af025236 	bltu	r21,fp,4b1f4 <___vfiprintf_internal_r+0x141c>
   4a8ac:	01400284 	movi	r5,10
   4a8b0:	004131c0 	call	4131c <__mulsi3>
   4a8b4:	80c00007 	ldb	r3,0(r16)
   4a8b8:	1709883a 	add	r4,r2,fp
   4a8bc:	85800044 	addi	r22,r16,1
   4a8c0:	1f3ff404 	addi	fp,r3,-48
   4a8c4:	b021883a 	mov	r16,r22
   4a8c8:	af3ff82e 	bgeu	r21,fp,4a8ac <__alt_data_end+0xfffea8ac>
   4a8cc:	2021883a 	mov	r16,r4
   4a8d0:	203d9f0e 	bge	r4,zero,49f50 <__alt_data_end+0xfffe9f50>
   4a8d4:	043fffc4 	movi	r16,-1
   4a8d8:	003d9d06 	br	49f50 <__alt_data_end+0xfffe9f50>
   4a8dc:	8c401014 	ori	r17,r17,64
   4a8e0:	b0c00007 	ldb	r3,0(r22)
   4a8e4:	003d9906 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4a8e8:	d9002217 	ldw	r4,136(sp)
   4a8ec:	d8001d85 	stb	zero,118(sp)
   4a8f0:	20c00204 	addi	r3,r4,8
   4a8f4:	24c00017 	ldw	r19,0(r4)
   4a8f8:	25000117 	ldw	r20,4(r4)
   4a8fc:	8001e716 	blt	r16,zero,4b09c <___vfiprintf_internal_r+0x12c4>
   4a900:	013fdfc4 	movi	r4,-129
   4a904:	9d04b03a 	or	r2,r19,r20
   4a908:	d8c02215 	stw	r3,136(sp)
   4a90c:	8922703a 	and	r17,r17,r4
   4a910:	002b883a 	mov	r21,zero
   4a914:	103f2f1e 	bne	r2,zero,4a5d4 <__alt_data_end+0xfffea5d4>
   4a918:	803e2f26 	beq	r16,zero,4a1d8 <__alt_data_end+0xfffea1d8>
   4a91c:	0027883a 	mov	r19,zero
   4a920:	9cc00c04 	addi	r19,r19,48
   4a924:	dcc019c5 	stb	r19,103(sp)
   4a928:	dd002817 	ldw	r20,160(sp)
   4a92c:	ddc019c4 	addi	r23,sp,103
   4a930:	003e2c06 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4a934:	9cc03fcc 	andi	r19,r19,255
   4a938:	b811883a 	mov	r8,r23
   4a93c:	9802571e 	bne	r19,zero,4b29c <___vfiprintf_internal_r+0x14c4>
   4a940:	18005726 	beq	r3,zero,4aaa0 <___vfiprintf_internal_r+0xcc8>
   4a944:	04c00044 	movi	r19,1
   4a948:	d8c01005 	stb	r3,64(sp)
   4a94c:	d8001d85 	stb	zero,118(sp)
   4a950:	9829883a 	mov	r20,r19
   4a954:	ddc01004 	addi	r23,sp,64
   4a958:	003f0a06 	br	4a584 <__alt_data_end+0xfffea584>
   4a95c:	d9402017 	ldw	r5,128(sp)
   4a960:	d9002117 	ldw	r4,132(sp)
   4a964:	d9801a04 	addi	r6,sp,104
   4a968:	da802a15 	stw	r10,168(sp)
   4a96c:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4a970:	da802a17 	ldw	r10,168(sp)
   4a974:	1000501e 	bne	r2,zero,4aab8 <___vfiprintf_internal_r+0xce0>
   4a978:	d9801b17 	ldw	r6,108(sp)
   4a97c:	d8801c17 	ldw	r2,112(sp)
   4a980:	d811883a 	mov	r8,sp
   4a984:	31000044 	addi	r4,r6,1
   4a988:	003e3606 	br	4a264 <__alt_data_end+0xfffea264>
   4a98c:	d9001b17 	ldw	r4,108(sp)
   4a990:	d8801c17 	ldw	r2,112(sp)
   4a994:	21400044 	addi	r5,r4,1
   4a998:	d9801d87 	ldb	r6,118(sp)
   4a99c:	303e5226 	beq	r6,zero,4a2e8 <__alt_data_end+0xfffea2e8>
   4a9a0:	01800044 	movi	r6,1
   4a9a4:	d9001d84 	addi	r4,sp,118
   4a9a8:	1185883a 	add	r2,r2,r6
   4a9ac:	41000015 	stw	r4,0(r8)
   4a9b0:	41800115 	stw	r6,4(r8)
   4a9b4:	d8801c15 	stw	r2,112(sp)
   4a9b8:	d9401b15 	stw	r5,108(sp)
   4a9bc:	010001c4 	movi	r4,7
   4a9c0:	2140b00e 	bge	r4,r5,4ac84 <___vfiprintf_internal_r+0xeac>
   4a9c4:	1000f61e 	bne	r2,zero,4ada0 <___vfiprintf_internal_r+0xfc8>
   4a9c8:	3800b31e 	bne	r7,zero,4ac98 <___vfiprintf_internal_r+0xec0>
   4a9cc:	0009883a 	mov	r4,zero
   4a9d0:	300b883a 	mov	r5,r6
   4a9d4:	d811883a 	mov	r8,sp
   4a9d8:	01802004 	movi	r6,128
   4a9dc:	19be5226 	beq	r3,r6,4a328 <__alt_data_end+0xfffea328>
   4a9e0:	8521c83a 	sub	r16,r16,r20
   4a9e4:	043e790e 	bge	zero,r16,4a3cc <__alt_data_end+0xfffea3cc>
   4a9e8:	05400404 	movi	r21,16
   4a9ec:	ac01b00e 	bge	r21,r16,4b0b0 <___vfiprintf_internal_r+0x12d8>
   4a9f0:	01400174 	movhi	r5,5
   4a9f4:	29466504 	addi	r5,r5,6548
   4a9f8:	d9402315 	stw	r5,140(sp)
   4a9fc:	070001c4 	movi	fp,7
   4aa00:	00000506 	br	4aa18 <___vfiprintf_internal_r+0xc40>
   4aa04:	21400084 	addi	r5,r4,2
   4aa08:	42000204 	addi	r8,r8,8
   4aa0c:	1809883a 	mov	r4,r3
   4aa10:	843ffc04 	addi	r16,r16,-16
   4aa14:	ac000d0e 	bge	r21,r16,4aa4c <___vfiprintf_internal_r+0xc74>
   4aa18:	10800404 	addi	r2,r2,16
   4aa1c:	20c00044 	addi	r3,r4,1
   4aa20:	44800015 	stw	r18,0(r8)
   4aa24:	45400115 	stw	r21,4(r8)
   4aa28:	d8801c15 	stw	r2,112(sp)
   4aa2c:	d8c01b15 	stw	r3,108(sp)
   4aa30:	e0fff40e 	bge	fp,r3,4aa04 <__alt_data_end+0xfffeaa04>
   4aa34:	1000101e 	bne	r2,zero,4aa78 <___vfiprintf_internal_r+0xca0>
   4aa38:	843ffc04 	addi	r16,r16,-16
   4aa3c:	01400044 	movi	r5,1
   4aa40:	0009883a 	mov	r4,zero
   4aa44:	d811883a 	mov	r8,sp
   4aa48:	ac3ff316 	blt	r21,r16,4aa18 <__alt_data_end+0xfffeaa18>
   4aa4c:	d8c02317 	ldw	r3,140(sp)
   4aa50:	1405883a 	add	r2,r2,r16
   4aa54:	44000115 	stw	r16,4(r8)
   4aa58:	40c00015 	stw	r3,0(r8)
   4aa5c:	d8801c15 	stw	r2,112(sp)
   4aa60:	d9401b15 	stw	r5,108(sp)
   4aa64:	00c001c4 	movi	r3,7
   4aa68:	19401916 	blt	r3,r5,4aad0 <___vfiprintf_internal_r+0xcf8>
   4aa6c:	42000204 	addi	r8,r8,8
   4aa70:	29400044 	addi	r5,r5,1
   4aa74:	003e5506 	br	4a3cc <__alt_data_end+0xfffea3cc>
   4aa78:	d9402017 	ldw	r5,128(sp)
   4aa7c:	d9002117 	ldw	r4,132(sp)
   4aa80:	d9801a04 	addi	r6,sp,104
   4aa84:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4aa88:	10000b1e 	bne	r2,zero,4aab8 <___vfiprintf_internal_r+0xce0>
   4aa8c:	d9001b17 	ldw	r4,108(sp)
   4aa90:	d8801c17 	ldw	r2,112(sp)
   4aa94:	d811883a 	mov	r8,sp
   4aa98:	21400044 	addi	r5,r4,1
   4aa9c:	003fdc06 	br	4aa10 <__alt_data_end+0xfffeaa10>
   4aaa0:	d8801c17 	ldw	r2,112(sp)
   4aaa4:	10000426 	beq	r2,zero,4aab8 <___vfiprintf_internal_r+0xce0>
   4aaa8:	d9402017 	ldw	r5,128(sp)
   4aaac:	d9002117 	ldw	r4,132(sp)
   4aab0:	d9801a04 	addi	r6,sp,104
   4aab4:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4aab8:	d9402017 	ldw	r5,128(sp)
   4aabc:	2880030b 	ldhu	r2,12(r5)
   4aac0:	1080100c 	andi	r2,r2,64
   4aac4:	10014d1e 	bne	r2,zero,4affc <___vfiprintf_internal_r+0x1224>
   4aac8:	d8802417 	ldw	r2,144(sp)
   4aacc:	003d9706 	br	4a12c <__alt_data_end+0xfffea12c>
   4aad0:	1000d21e 	bne	r2,zero,4ae1c <___vfiprintf_internal_r+0x1044>
   4aad4:	00c00044 	movi	r3,1
   4aad8:	a005883a 	mov	r2,r20
   4aadc:	ddc00015 	stw	r23,0(sp)
   4aae0:	dd000115 	stw	r20,4(sp)
   4aae4:	dd001c15 	stw	r20,112(sp)
   4aae8:	d8c01b15 	stw	r3,108(sp)
   4aaec:	d811883a 	mov	r8,sp
   4aaf0:	42000204 	addi	r8,r8,8
   4aaf4:	8c40010c 	andi	r17,r17,4
   4aaf8:	88004026 	beq	r17,zero,4abfc <___vfiprintf_internal_r+0xe24>
   4aafc:	d9002517 	ldw	r4,148(sp)
   4ab00:	24e3c83a 	sub	r17,r4,r19
   4ab04:	04403d0e 	bge	zero,r17,4abfc <___vfiprintf_internal_r+0xe24>
   4ab08:	04000404 	movi	r16,16
   4ab0c:	8441a90e 	bge	r16,r17,4b1b4 <___vfiprintf_internal_r+0x13dc>
   4ab10:	00c00174 	movhi	r3,5
   4ab14:	18c66904 	addi	r3,r3,6564
   4ab18:	d9001b17 	ldw	r4,108(sp)
   4ab1c:	d8c02315 	stw	r3,140(sp)
   4ab20:	050001c4 	movi	r20,7
   4ab24:	dd402117 	ldw	r21,132(sp)
   4ab28:	ddc02017 	ldw	r23,128(sp)
   4ab2c:	00000506 	br	4ab44 <___vfiprintf_internal_r+0xd6c>
   4ab30:	21400084 	addi	r5,r4,2
   4ab34:	42000204 	addi	r8,r8,8
   4ab38:	1809883a 	mov	r4,r3
   4ab3c:	8c7ffc04 	addi	r17,r17,-16
   4ab40:	84400f0e 	bge	r16,r17,4ab80 <___vfiprintf_internal_r+0xda8>
   4ab44:	01400174 	movhi	r5,5
   4ab48:	10800404 	addi	r2,r2,16
   4ab4c:	20c00044 	addi	r3,r4,1
   4ab50:	29466904 	addi	r5,r5,6564
   4ab54:	41400015 	stw	r5,0(r8)
   4ab58:	44000115 	stw	r16,4(r8)
   4ab5c:	d8801c15 	stw	r2,112(sp)
   4ab60:	d8c01b15 	stw	r3,108(sp)
   4ab64:	a0fff20e 	bge	r20,r3,4ab30 <__alt_data_end+0xfffeab30>
   4ab68:	1000141e 	bne	r2,zero,4abbc <___vfiprintf_internal_r+0xde4>
   4ab6c:	8c7ffc04 	addi	r17,r17,-16
   4ab70:	01400044 	movi	r5,1
   4ab74:	0009883a 	mov	r4,zero
   4ab78:	d811883a 	mov	r8,sp
   4ab7c:	847ff116 	blt	r16,r17,4ab44 <__alt_data_end+0xfffeab44>
   4ab80:	d8c02317 	ldw	r3,140(sp)
   4ab84:	1445883a 	add	r2,r2,r17
   4ab88:	44400115 	stw	r17,4(r8)
   4ab8c:	40c00015 	stw	r3,0(r8)
   4ab90:	d8801c15 	stw	r2,112(sp)
   4ab94:	d9401b15 	stw	r5,108(sp)
   4ab98:	00c001c4 	movi	r3,7
   4ab9c:	1940170e 	bge	r3,r5,4abfc <___vfiprintf_internal_r+0xe24>
   4aba0:	1000101e 	bne	r2,zero,4abe4 <___vfiprintf_internal_r+0xe0c>
   4aba4:	d8802517 	ldw	r2,148(sp)
   4aba8:	14c11616 	blt	r2,r19,4b004 <___vfiprintf_internal_r+0x122c>
   4abac:	d9002417 	ldw	r4,144(sp)
   4abb0:	2089883a 	add	r4,r4,r2
   4abb4:	d9002415 	stw	r4,144(sp)
   4abb8:	003e1806 	br	4a41c <__alt_data_end+0xfffea41c>
   4abbc:	d9801a04 	addi	r6,sp,104
   4abc0:	b80b883a 	mov	r5,r23
   4abc4:	a809883a 	mov	r4,r21
   4abc8:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4abcc:	103fba1e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4abd0:	d9001b17 	ldw	r4,108(sp)
   4abd4:	d8801c17 	ldw	r2,112(sp)
   4abd8:	d811883a 	mov	r8,sp
   4abdc:	21400044 	addi	r5,r4,1
   4abe0:	003fd606 	br	4ab3c <__alt_data_end+0xfffeab3c>
   4abe4:	d9402017 	ldw	r5,128(sp)
   4abe8:	d9002117 	ldw	r4,132(sp)
   4abec:	d9801a04 	addi	r6,sp,104
   4abf0:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4abf4:	103fb01e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4abf8:	d8801c17 	ldw	r2,112(sp)
   4abfc:	d8c02517 	ldw	r3,148(sp)
   4ac00:	1cc0010e 	bge	r3,r19,4ac08 <___vfiprintf_internal_r+0xe30>
   4ac04:	9807883a 	mov	r3,r19
   4ac08:	d9002417 	ldw	r4,144(sp)
   4ac0c:	20c9883a 	add	r4,r4,r3
   4ac10:	d9002415 	stw	r4,144(sp)
   4ac14:	103e0126 	beq	r2,zero,4a41c <__alt_data_end+0xfffea41c>
   4ac18:	d9402017 	ldw	r5,128(sp)
   4ac1c:	d9002117 	ldw	r4,132(sp)
   4ac20:	d9801a04 	addi	r6,sp,104
   4ac24:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4ac28:	103dfc26 	beq	r2,zero,4a41c <__alt_data_end+0xfffea41c>
   4ac2c:	003fa206 	br	4aab8 <__alt_data_end+0xfffeaab8>
   4ac30:	d9402017 	ldw	r5,128(sp)
   4ac34:	d9002117 	ldw	r4,132(sp)
   4ac38:	d9801a04 	addi	r6,sp,104
   4ac3c:	d9c02b15 	stw	r7,172(sp)
   4ac40:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4ac44:	d9c02b17 	ldw	r7,172(sp)
   4ac48:	103f9b1e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4ac4c:	d9001b17 	ldw	r4,108(sp)
   4ac50:	d8801c17 	ldw	r2,112(sp)
   4ac54:	d811883a 	mov	r8,sp
   4ac58:	21800044 	addi	r6,r4,1
   4ac5c:	003dbf06 	br	4a35c <__alt_data_end+0xfffea35c>
   4ac60:	1000d81e 	bne	r2,zero,4afc4 <___vfiprintf_internal_r+0x11ec>
   4ac64:	d9001d87 	ldb	r4,118(sp)
   4ac68:	20000a26 	beq	r4,zero,4ac94 <___vfiprintf_internal_r+0xebc>
   4ac6c:	00800044 	movi	r2,1
   4ac70:	d9001d84 	addi	r4,sp,118
   4ac74:	100b883a 	mov	r5,r2
   4ac78:	d9000015 	stw	r4,0(sp)
   4ac7c:	d8800115 	stw	r2,4(sp)
   4ac80:	d811883a 	mov	r8,sp
   4ac84:	2809883a 	mov	r4,r5
   4ac88:	42000204 	addi	r8,r8,8
   4ac8c:	29400044 	addi	r5,r5,1
   4ac90:	003d9506 	br	4a2e8 <__alt_data_end+0xfffea2e8>
   4ac94:	3800fd26 	beq	r7,zero,4b08c <___vfiprintf_internal_r+0x12b4>
   4ac98:	00800084 	movi	r2,2
   4ac9c:	d9001d04 	addi	r4,sp,116
   4aca0:	d9000015 	stw	r4,0(sp)
   4aca4:	d8800115 	stw	r2,4(sp)
   4aca8:	01400044 	movi	r5,1
   4acac:	d811883a 	mov	r8,sp
   4acb0:	2809883a 	mov	r4,r5
   4acb4:	42000204 	addi	r8,r8,8
   4acb8:	29400044 	addi	r5,r5,1
   4acbc:	003f4606 	br	4a9d8 <__alt_data_end+0xfffea9d8>
   4acc0:	d8802517 	ldw	r2,148(sp)
   4acc4:	14c0010e 	bge	r2,r19,4accc <___vfiprintf_internal_r+0xef4>
   4acc8:	9805883a 	mov	r2,r19
   4accc:	d9402417 	ldw	r5,144(sp)
   4acd0:	288b883a 	add	r5,r5,r2
   4acd4:	d9402415 	stw	r5,144(sp)
   4acd8:	003dd006 	br	4a41c <__alt_data_end+0xfffea41c>
   4acdc:	d8001d85 	stb	zero,118(sp)
   4ace0:	80005d16 	blt	r16,zero,4ae58 <___vfiprintf_internal_r+0x1080>
   4ace4:	00ffdfc4 	movi	r3,-129
   4ace8:	9d04b03a 	or	r2,r19,r20
   4acec:	88e2703a 	and	r17,r17,r3
   4acf0:	103d3726 	beq	r2,zero,4a1d0 <__alt_data_end+0xfffea1d0>
   4acf4:	002b883a 	mov	r21,zero
   4acf8:	d9002617 	ldw	r4,152(sp)
   4acfc:	ddc01a04 	addi	r23,sp,104
   4ad00:	988003cc 	andi	r2,r19,15
   4ad04:	a006973a 	slli	r3,r20,28
   4ad08:	2085883a 	add	r2,r4,r2
   4ad0c:	9826d13a 	srli	r19,r19,4
   4ad10:	10800003 	ldbu	r2,0(r2)
   4ad14:	a028d13a 	srli	r20,r20,4
   4ad18:	bdffffc4 	addi	r23,r23,-1
   4ad1c:	1ce6b03a 	or	r19,r3,r19
   4ad20:	b8800005 	stb	r2,0(r23)
   4ad24:	9d04b03a 	or	r2,r19,r20
   4ad28:	103ff51e 	bne	r2,zero,4ad00 <__alt_data_end+0xfffead00>
   4ad2c:	d8801e17 	ldw	r2,120(sp)
   4ad30:	15e9c83a 	sub	r20,r2,r23
   4ad34:	003d2b06 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4ad38:	d9402017 	ldw	r5,128(sp)
   4ad3c:	d9002117 	ldw	r4,132(sp)
   4ad40:	d9801a04 	addi	r6,sp,104
   4ad44:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4ad48:	103f5b1e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4ad4c:	d8801c17 	ldw	r2,112(sp)
   4ad50:	d811883a 	mov	r8,sp
   4ad54:	003f6706 	br	4aaf4 <__alt_data_end+0xfffeaaf4>
   4ad58:	d9402017 	ldw	r5,128(sp)
   4ad5c:	d9002117 	ldw	r4,132(sp)
   4ad60:	d9801a04 	addi	r6,sp,104
   4ad64:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4ad68:	103f531e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4ad6c:	d811883a 	mov	r8,sp
   4ad70:	003cd906 	br	4a0d8 <__alt_data_end+0xfffea0d8>
   4ad74:	10803fcc 	andi	r2,r2,255
   4ad78:	1080201c 	xori	r2,r2,128
   4ad7c:	10bfe004 	addi	r2,r2,-128
   4ad80:	00c00c04 	movi	r3,48
   4ad84:	10ffe926 	beq	r2,r3,4ad2c <__alt_data_end+0xfffead2c>
   4ad88:	b8ffffc5 	stb	r3,-1(r23)
   4ad8c:	d8c01e17 	ldw	r3,120(sp)
   4ad90:	b8bfffc4 	addi	r2,r23,-1
   4ad94:	102f883a 	mov	r23,r2
   4ad98:	18a9c83a 	sub	r20,r3,r2
   4ad9c:	003d1106 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4ada0:	d9402017 	ldw	r5,128(sp)
   4ada4:	d9002117 	ldw	r4,132(sp)
   4ada8:	d9801a04 	addi	r6,sp,104
   4adac:	d8c02a15 	stw	r3,168(sp)
   4adb0:	d9c02b15 	stw	r7,172(sp)
   4adb4:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4adb8:	d8c02a17 	ldw	r3,168(sp)
   4adbc:	d9c02b17 	ldw	r7,172(sp)
   4adc0:	103f3d1e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4adc4:	d9001b17 	ldw	r4,108(sp)
   4adc8:	d8801c17 	ldw	r2,112(sp)
   4adcc:	d811883a 	mov	r8,sp
   4add0:	21400044 	addi	r5,r4,1
   4add4:	003d4406 	br	4a2e8 <__alt_data_end+0xfffea2e8>
   4add8:	d9402017 	ldw	r5,128(sp)
   4addc:	d9002117 	ldw	r4,132(sp)
   4ade0:	d9801a04 	addi	r6,sp,104
   4ade4:	d8c02a15 	stw	r3,168(sp)
   4ade8:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4adec:	d8c02a17 	ldw	r3,168(sp)
   4adf0:	103f311e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4adf4:	d9001b17 	ldw	r4,108(sp)
   4adf8:	d8801c17 	ldw	r2,112(sp)
   4adfc:	d811883a 	mov	r8,sp
   4ae00:	21400044 	addi	r5,r4,1
   4ae04:	003ef406 	br	4a9d8 <__alt_data_end+0xfffea9d8>
   4ae08:	1000bd1e 	bne	r2,zero,4b100 <___vfiprintf_internal_r+0x1328>
   4ae0c:	01400044 	movi	r5,1
   4ae10:	0009883a 	mov	r4,zero
   4ae14:	d811883a 	mov	r8,sp
   4ae18:	003ef106 	br	4a9e0 <__alt_data_end+0xfffea9e0>
   4ae1c:	d9402017 	ldw	r5,128(sp)
   4ae20:	d9002117 	ldw	r4,132(sp)
   4ae24:	d9801a04 	addi	r6,sp,104
   4ae28:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4ae2c:	103f221e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4ae30:	d9401b17 	ldw	r5,108(sp)
   4ae34:	d8801c17 	ldw	r2,112(sp)
   4ae38:	d811883a 	mov	r8,sp
   4ae3c:	29400044 	addi	r5,r5,1
   4ae40:	003d6206 	br	4a3cc <__alt_data_end+0xfffea3cc>
   4ae44:	01400174 	movhi	r5,5
   4ae48:	29460504 	addi	r5,r5,6164
   4ae4c:	d9402615 	stw	r5,152(sp)
   4ae50:	d8c02215 	stw	r3,136(sp)
   4ae54:	1023883a 	mov	r17,r2
   4ae58:	9d04b03a 	or	r2,r19,r20
   4ae5c:	103fa51e 	bne	r2,zero,4acf4 <__alt_data_end+0xfffeacf4>
   4ae60:	002b883a 	mov	r21,zero
   4ae64:	00800084 	movi	r2,2
   4ae68:	003e4a06 	br	4a794 <__alt_data_end+0xfffea794>
   4ae6c:	01400174 	movhi	r5,5
   4ae70:	29460504 	addi	r5,r5,6164
   4ae74:	002b883a 	mov	r21,zero
   4ae78:	d9402615 	stw	r5,152(sp)
   4ae7c:	003f9e06 	br	4acf8 <__alt_data_end+0xfffeacf8>
   4ae80:	d9402217 	ldw	r5,136(sp)
   4ae84:	d8001d85 	stb	zero,118(sp)
   4ae88:	0029883a 	mov	r20,zero
   4ae8c:	28800104 	addi	r2,r5,4
   4ae90:	2cc00017 	ldw	r19,0(r5)
   4ae94:	803e3a16 	blt	r16,zero,4a780 <__alt_data_end+0xfffea780>
   4ae98:	00ffdfc4 	movi	r3,-129
   4ae9c:	d8802215 	stw	r2,136(sp)
   4aea0:	88e2703a 	and	r17,r17,r3
   4aea4:	002b883a 	mov	r21,zero
   4aea8:	983e9b26 	beq	r19,zero,4a918 <__alt_data_end+0xfffea918>
   4aeac:	00800244 	movi	r2,9
   4aeb0:	14fdc936 	bltu	r2,r19,4a5d8 <__alt_data_end+0xfffea5d8>
   4aeb4:	003e9a06 	br	4a920 <__alt_data_end+0xfffea920>
   4aeb8:	00800c04 	movi	r2,48
   4aebc:	d8c01d45 	stb	r3,117(sp)
   4aec0:	d8801d05 	stb	r2,116(sp)
   4aec4:	d8001d85 	stb	zero,118(sp)
   4aec8:	88c00094 	ori	r3,r17,2
   4aecc:	80009c16 	blt	r16,zero,4b140 <___vfiprintf_internal_r+0x1368>
   4aed0:	00bfdfc4 	movi	r2,-129
   4aed4:	88a2703a 	and	r17,r17,r2
   4aed8:	8c400094 	ori	r17,r17,2
   4aedc:	002b883a 	mov	r21,zero
   4aee0:	003f8506 	br	4acf8 <__alt_data_end+0xfffeacf8>
   4aee4:	b029883a 	mov	r20,r22
   4aee8:	003c0b06 	br	49f18 <__alt_data_end+0xfffe9f18>
   4aeec:	04e7c83a 	sub	r19,zero,r19
   4aef0:	05400b44 	movi	r21,45
   4aef4:	9804c03a 	cmpne	r2,r19,zero
   4aef8:	0529c83a 	sub	r20,zero,r20
   4aefc:	dd401d85 	stb	r21,118(sp)
   4af00:	a0a9c83a 	sub	r20,r20,r2
   4af04:	80009716 	blt	r16,zero,4b164 <___vfiprintf_internal_r+0x138c>
   4af08:	00bfdfc4 	movi	r2,-129
   4af0c:	88a2703a 	and	r17,r17,r2
   4af10:	003db006 	br	4a5d4 <__alt_data_end+0xfffea5d4>
   4af14:	b0c00007 	ldb	r3,0(r22)
   4af18:	003c0c06 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4af1c:	8880100c 	andi	r2,r17,64
   4af20:	d8001d85 	stb	zero,118(sp)
   4af24:	1000461e 	bne	r2,zero,4b040 <___vfiprintf_internal_r+0x1268>
   4af28:	d9002217 	ldw	r4,136(sp)
   4af2c:	0029883a 	mov	r20,zero
   4af30:	20800104 	addi	r2,r4,4
   4af34:	24c00017 	ldw	r19,0(r4)
   4af38:	803df80e 	bge	r16,zero,4a71c <__alt_data_end+0xfffea71c>
   4af3c:	9d06b03a 	or	r3,r19,r20
   4af40:	d8802215 	stw	r2,136(sp)
   4af44:	183d5e1e 	bne	r3,zero,4a4c0 <__alt_data_end+0xfffea4c0>
   4af48:	002b883a 	mov	r21,zero
   4af4c:	0005883a 	mov	r2,zero
   4af50:	003e1006 	br	4a794 <__alt_data_end+0xfffea794>
   4af54:	8880040c 	andi	r2,r17,16
   4af58:	1000321e 	bne	r2,zero,4b024 <___vfiprintf_internal_r+0x124c>
   4af5c:	8c40100c 	andi	r17,r17,64
   4af60:	88008d26 	beq	r17,zero,4b198 <___vfiprintf_internal_r+0x13c0>
   4af64:	d9402217 	ldw	r5,136(sp)
   4af68:	d8c02417 	ldw	r3,144(sp)
   4af6c:	28800017 	ldw	r2,0(r5)
   4af70:	29400104 	addi	r5,r5,4
   4af74:	d9402215 	stw	r5,136(sp)
   4af78:	10c0000d 	sth	r3,0(r2)
   4af7c:	003bca06 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4af80:	8880100c 	andi	r2,r17,64
   4af84:	10003a26 	beq	r2,zero,4b070 <___vfiprintf_internal_r+0x1298>
   4af88:	d8802217 	ldw	r2,136(sp)
   4af8c:	14c0000f 	ldh	r19,0(r2)
   4af90:	10800104 	addi	r2,r2,4
   4af94:	d8802215 	stw	r2,136(sp)
   4af98:	9829d7fa 	srai	r20,r19,31
   4af9c:	a005883a 	mov	r2,r20
   4afa0:	003d8506 	br	4a5b8 <__alt_data_end+0xfffea5b8>
   4afa4:	8880100c 	andi	r2,r17,64
   4afa8:	10002b26 	beq	r2,zero,4b058 <___vfiprintf_internal_r+0x1280>
   4afac:	d8802217 	ldw	r2,136(sp)
   4afb0:	0029883a 	mov	r20,zero
   4afb4:	14c0000b 	ldhu	r19,0(r2)
   4afb8:	10800104 	addi	r2,r2,4
   4afbc:	d8802215 	stw	r2,136(sp)
   4afc0:	003d5d06 	br	4a538 <__alt_data_end+0xfffea538>
   4afc4:	d9402017 	ldw	r5,128(sp)
   4afc8:	d9002117 	ldw	r4,132(sp)
   4afcc:	d9801a04 	addi	r6,sp,104
   4afd0:	d8c02a15 	stw	r3,168(sp)
   4afd4:	d9c02b15 	stw	r7,172(sp)
   4afd8:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4afdc:	d8c02a17 	ldw	r3,168(sp)
   4afe0:	d9c02b17 	ldw	r7,172(sp)
   4afe4:	103eb41e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4afe8:	d9001b17 	ldw	r4,108(sp)
   4afec:	d8801c17 	ldw	r2,112(sp)
   4aff0:	d811883a 	mov	r8,sp
   4aff4:	21400044 	addi	r5,r4,1
   4aff8:	003e6706 	br	4a998 <__alt_data_end+0xfffea998>
   4affc:	00bfffc4 	movi	r2,-1
   4b000:	003c4a06 	br	4a12c <__alt_data_end+0xfffea12c>
   4b004:	9805883a 	mov	r2,r19
   4b008:	003ee806 	br	4abac <__alt_data_end+0xfffeabac>
   4b00c:	d8c02217 	ldw	r3,136(sp)
   4b010:	0029883a 	mov	r20,zero
   4b014:	18800104 	addi	r2,r3,4
   4b018:	1cc0000b 	ldhu	r19,0(r3)
   4b01c:	803f9e0e 	bge	r16,zero,4ae98 <__alt_data_end+0xfffeae98>
   4b020:	003dd706 	br	4a780 <__alt_data_end+0xfffea780>
   4b024:	d8c02217 	ldw	r3,136(sp)
   4b028:	d9002417 	ldw	r4,144(sp)
   4b02c:	18800017 	ldw	r2,0(r3)
   4b030:	18c00104 	addi	r3,r3,4
   4b034:	d8c02215 	stw	r3,136(sp)
   4b038:	11000015 	stw	r4,0(r2)
   4b03c:	003b9a06 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4b040:	d8c02217 	ldw	r3,136(sp)
   4b044:	0029883a 	mov	r20,zero
   4b048:	18800104 	addi	r2,r3,4
   4b04c:	1cc0000b 	ldhu	r19,0(r3)
   4b050:	803db20e 	bge	r16,zero,4a71c <__alt_data_end+0xfffea71c>
   4b054:	003fb906 	br	4af3c <__alt_data_end+0xfffeaf3c>
   4b058:	d9002217 	ldw	r4,136(sp)
   4b05c:	0029883a 	mov	r20,zero
   4b060:	24c00017 	ldw	r19,0(r4)
   4b064:	21000104 	addi	r4,r4,4
   4b068:	d9002215 	stw	r4,136(sp)
   4b06c:	003d3206 	br	4a538 <__alt_data_end+0xfffea538>
   4b070:	d8c02217 	ldw	r3,136(sp)
   4b074:	1cc00017 	ldw	r19,0(r3)
   4b078:	18c00104 	addi	r3,r3,4
   4b07c:	d8c02215 	stw	r3,136(sp)
   4b080:	9829d7fa 	srai	r20,r19,31
   4b084:	a005883a 	mov	r2,r20
   4b088:	003d4b06 	br	4a5b8 <__alt_data_end+0xfffea5b8>
   4b08c:	0009883a 	mov	r4,zero
   4b090:	01400044 	movi	r5,1
   4b094:	d811883a 	mov	r8,sp
   4b098:	003e4f06 	br	4a9d8 <__alt_data_end+0xfffea9d8>
   4b09c:	d8c02215 	stw	r3,136(sp)
   4b0a0:	002b883a 	mov	r21,zero
   4b0a4:	003db806 	br	4a788 <__alt_data_end+0xfffea788>
   4b0a8:	d811883a 	mov	r8,sp
   4b0ac:	003e9606 	br	4ab08 <__alt_data_end+0xfffeab08>
   4b0b0:	01000174 	movhi	r4,5
   4b0b4:	21066504 	addi	r4,r4,6548
   4b0b8:	d9002315 	stw	r4,140(sp)
   4b0bc:	003e6306 	br	4aa4c <__alt_data_end+0xfffeaa4c>
   4b0c0:	b0c00043 	ldbu	r3,1(r22)
   4b0c4:	8c400814 	ori	r17,r17,32
   4b0c8:	b5800044 	addi	r22,r22,1
   4b0cc:	18c03fcc 	andi	r3,r3,255
   4b0d0:	18c0201c 	xori	r3,r3,128
   4b0d4:	18ffe004 	addi	r3,r3,-128
   4b0d8:	003b9c06 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4b0dc:	b809883a 	mov	r4,r23
   4b0e0:	da002a15 	stw	r8,168(sp)
   4b0e4:	0043a080 	call	43a08 <strlen>
   4b0e8:	1029883a 	mov	r20,r2
   4b0ec:	dd401d83 	ldbu	r21,118(sp)
   4b0f0:	df002215 	stw	fp,136(sp)
   4b0f4:	0021883a 	mov	r16,zero
   4b0f8:	da002a17 	ldw	r8,168(sp)
   4b0fc:	003c3906 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4b100:	d9402017 	ldw	r5,128(sp)
   4b104:	d9002117 	ldw	r4,132(sp)
   4b108:	d9801a04 	addi	r6,sp,104
   4b10c:	0049cc40 	call	49cc4 <__sprint_r.part.0>
   4b110:	103e691e 	bne	r2,zero,4aab8 <__alt_data_end+0xfffeaab8>
   4b114:	d9001b17 	ldw	r4,108(sp)
   4b118:	d8801c17 	ldw	r2,112(sp)
   4b11c:	d811883a 	mov	r8,sp
   4b120:	21400044 	addi	r5,r4,1
   4b124:	003e2e06 	br	4a9e0 <__alt_data_end+0xfffea9e0>
   4b128:	01000174 	movhi	r4,5
   4b12c:	21066904 	addi	r4,r4,6564
   4b130:	d9002315 	stw	r4,140(sp)
   4b134:	d9001b17 	ldw	r4,108(sp)
   4b138:	21000044 	addi	r4,r4,1
   4b13c:	003c5e06 	br	4a2b8 <__alt_data_end+0xfffea2b8>
   4b140:	002b883a 	mov	r21,zero
   4b144:	00800084 	movi	r2,2
   4b148:	10803fcc 	andi	r2,r2,255
   4b14c:	01000044 	movi	r4,1
   4b150:	11002b26 	beq	r2,r4,4b200 <___vfiprintf_internal_r+0x1428>
   4b154:	01000084 	movi	r4,2
   4b158:	11002b1e 	bne	r2,r4,4b208 <___vfiprintf_internal_r+0x1430>
   4b15c:	1823883a 	mov	r17,r3
   4b160:	003ee506 	br	4acf8 <__alt_data_end+0xfffeacf8>
   4b164:	8807883a 	mov	r3,r17
   4b168:	00800044 	movi	r2,1
   4b16c:	003ff606 	br	4b148 <__alt_data_end+0xfffeb148>
   4b170:	00800184 	movi	r2,6
   4b174:	1400012e 	bgeu	r2,r16,4b17c <___vfiprintf_internal_r+0x13a4>
   4b178:	1021883a 	mov	r16,r2
   4b17c:	8029883a 	mov	r20,r16
   4b180:	8027883a 	mov	r19,r16
   4b184:	80002216 	blt	r16,zero,4b210 <___vfiprintf_internal_r+0x1438>
   4b188:	05c00174 	movhi	r23,5
   4b18c:	df002215 	stw	fp,136(sp)
   4b190:	bdc60a04 	addi	r23,r23,6184
   4b194:	003cfb06 	br	4a584 <__alt_data_end+0xfffea584>
   4b198:	d9002217 	ldw	r4,136(sp)
   4b19c:	d9402417 	ldw	r5,144(sp)
   4b1a0:	20800017 	ldw	r2,0(r4)
   4b1a4:	21000104 	addi	r4,r4,4
   4b1a8:	d9002215 	stw	r4,136(sp)
   4b1ac:	11400015 	stw	r5,0(r2)
   4b1b0:	003b3d06 	br	49ea8 <__alt_data_end+0xfffe9ea8>
   4b1b4:	01400174 	movhi	r5,5
   4b1b8:	29466904 	addi	r5,r5,6564
   4b1bc:	d9402315 	stw	r5,140(sp)
   4b1c0:	d9401b17 	ldw	r5,108(sp)
   4b1c4:	29400044 	addi	r5,r5,1
   4b1c8:	003e6d06 	br	4ab80 <__alt_data_end+0xfffeab80>
   4b1cc:	8029883a 	mov	r20,r16
   4b1d0:	dd401d83 	ldbu	r21,118(sp)
   4b1d4:	df002215 	stw	fp,136(sp)
   4b1d8:	0021883a 	mov	r16,zero
   4b1dc:	003c0106 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4b1e0:	00c00174 	movhi	r3,5
   4b1e4:	18c66504 	addi	r3,r3,6548
   4b1e8:	d8c02315 	stw	r3,140(sp)
   4b1ec:	280d883a 	mov	r6,r5
   4b1f0:	003c6906 	br	4a398 <__alt_data_end+0xfffea398>
   4b1f4:	802d883a 	mov	r22,r16
   4b1f8:	0021883a 	mov	r16,zero
   4b1fc:	003b5406 	br	49f50 <__alt_data_end+0xfffe9f50>
   4b200:	1823883a 	mov	r17,r3
   4b204:	003cf306 	br	4a5d4 <__alt_data_end+0xfffea5d4>
   4b208:	1823883a 	mov	r17,r3
   4b20c:	003cad06 	br	4a4c4 <__alt_data_end+0xfffea4c4>
   4b210:	0027883a 	mov	r19,zero
   4b214:	003fdc06 	br	4b188 <__alt_data_end+0xfffeb188>
   4b218:	d9402217 	ldw	r5,136(sp)
   4b21c:	8005883a 	mov	r2,r16
   4b220:	b0c00043 	ldbu	r3,1(r22)
   4b224:	2c000017 	ldw	r16,0(r5)
   4b228:	29000104 	addi	r4,r5,4
   4b22c:	d9002215 	stw	r4,136(sp)
   4b230:	102d883a 	mov	r22,r2
   4b234:	803fa50e 	bge	r16,zero,4b0cc <__alt_data_end+0xfffeb0cc>
   4b238:	18c03fcc 	andi	r3,r3,255
   4b23c:	18c0201c 	xori	r3,r3,128
   4b240:	043fffc4 	movi	r16,-1
   4b244:	18ffe004 	addi	r3,r3,-128
   4b248:	003b4006 	br	49f4c <__alt_data_end+0xfffe9f4c>
   4b24c:	d9402303 	ldbu	r5,140(sp)
   4b250:	d9401d85 	stb	r5,118(sp)
   4b254:	003cae06 	br	4a510 <__alt_data_end+0xfffea510>
   4b258:	d8c02303 	ldbu	r3,140(sp)
   4b25c:	d8c01d85 	stb	r3,118(sp)
   4b260:	003d1406 	br	4a6b4 <__alt_data_end+0xfffea6b4>
   4b264:	d8c02303 	ldbu	r3,140(sp)
   4b268:	d8c01d85 	stb	r3,118(sp)
   4b26c:	003cca06 	br	4a598 <__alt_data_end+0xfffea598>
   4b270:	8880004c 	andi	r2,r17,1
   4b274:	002b883a 	mov	r21,zero
   4b278:	10000526 	beq	r2,zero,4b290 <___vfiprintf_internal_r+0x14b8>
   4b27c:	00800c04 	movi	r2,48
   4b280:	d88019c5 	stb	r2,103(sp)
   4b284:	dd002817 	ldw	r20,160(sp)
   4b288:	ddc019c4 	addi	r23,sp,103
   4b28c:	003bd506 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4b290:	0029883a 	mov	r20,zero
   4b294:	ddc01a04 	addi	r23,sp,104
   4b298:	003bd206 	br	4a1e4 <__alt_data_end+0xfffea1e4>
   4b29c:	d9002303 	ldbu	r4,140(sp)
   4b2a0:	d9001d85 	stb	r4,118(sp)
   4b2a4:	003da606 	br	4a940 <__alt_data_end+0xfffea940>
   4b2a8:	d8c02303 	ldbu	r3,140(sp)
   4b2ac:	d8c01d85 	stb	r3,118(sp)
   4b2b0:	003c7606 	br	4a48c <__alt_data_end+0xfffea48c>
   4b2b4:	d8c02303 	ldbu	r3,140(sp)
   4b2b8:	d8c01d85 	stb	r3,118(sp)
   4b2bc:	003c6506 	br	4a454 <__alt_data_end+0xfffea454>
   4b2c0:	d9002303 	ldbu	r4,140(sp)
   4b2c4:	d9001d85 	stb	r4,118(sp)
   4b2c8:	003d3d06 	br	4a7c0 <__alt_data_end+0xfffea7c0>
   4b2cc:	d8c02303 	ldbu	r3,140(sp)
   4b2d0:	d8c01d85 	stb	r3,118(sp)
   4b2d4:	003d1d06 	br	4a74c <__alt_data_end+0xfffea74c>
   4b2d8:	d8c02303 	ldbu	r3,140(sp)
   4b2dc:	d8c01d85 	stb	r3,118(sp)
   4b2e0:	003d0306 	br	4a6f0 <__alt_data_end+0xfffea6f0>

0004b2e4 <__vfiprintf_internal>:
   4b2e4:	00800174 	movhi	r2,5
   4b2e8:	108d5104 	addi	r2,r2,13636
   4b2ec:	300f883a 	mov	r7,r6
   4b2f0:	280d883a 	mov	r6,r5
   4b2f4:	200b883a 	mov	r5,r4
   4b2f8:	11000017 	ldw	r4,0(r2)
   4b2fc:	0049dd81 	jmpi	49dd8 <___vfiprintf_internal_r>

0004b300 <__sbprintf>:
   4b300:	2880030b 	ldhu	r2,12(r5)
   4b304:	2ac01917 	ldw	r11,100(r5)
   4b308:	2a80038b 	ldhu	r10,14(r5)
   4b30c:	2a400717 	ldw	r9,28(r5)
   4b310:	2a000917 	ldw	r8,36(r5)
   4b314:	defee204 	addi	sp,sp,-1144
   4b318:	00c10004 	movi	r3,1024
   4b31c:	dc011a15 	stw	r16,1128(sp)
   4b320:	10bfff4c 	andi	r2,r2,65533
   4b324:	2821883a 	mov	r16,r5
   4b328:	d8cb883a 	add	r5,sp,r3
   4b32c:	dc811c15 	stw	r18,1136(sp)
   4b330:	dc411b15 	stw	r17,1132(sp)
   4b334:	dfc11d15 	stw	ra,1140(sp)
   4b338:	2025883a 	mov	r18,r4
   4b33c:	d881030d 	sth	r2,1036(sp)
   4b340:	dac11915 	stw	r11,1124(sp)
   4b344:	da81038d 	sth	r10,1038(sp)
   4b348:	da410715 	stw	r9,1052(sp)
   4b34c:	da010915 	stw	r8,1060(sp)
   4b350:	dec10015 	stw	sp,1024(sp)
   4b354:	dec10415 	stw	sp,1040(sp)
   4b358:	d8c10215 	stw	r3,1032(sp)
   4b35c:	d8c10515 	stw	r3,1044(sp)
   4b360:	d8010615 	stw	zero,1048(sp)
   4b364:	0049dd80 	call	49dd8 <___vfiprintf_internal_r>
   4b368:	1023883a 	mov	r17,r2
   4b36c:	10000416 	blt	r2,zero,4b380 <__sbprintf+0x80>
   4b370:	d9410004 	addi	r5,sp,1024
   4b374:	9009883a 	mov	r4,r18
   4b378:	00416b00 	call	416b0 <_fflush_r>
   4b37c:	10000d1e 	bne	r2,zero,4b3b4 <__sbprintf+0xb4>
   4b380:	d881030b 	ldhu	r2,1036(sp)
   4b384:	1080100c 	andi	r2,r2,64
   4b388:	10000326 	beq	r2,zero,4b398 <__sbprintf+0x98>
   4b38c:	8080030b 	ldhu	r2,12(r16)
   4b390:	10801014 	ori	r2,r2,64
   4b394:	8080030d 	sth	r2,12(r16)
   4b398:	8805883a 	mov	r2,r17
   4b39c:	dfc11d17 	ldw	ra,1140(sp)
   4b3a0:	dc811c17 	ldw	r18,1136(sp)
   4b3a4:	dc411b17 	ldw	r17,1132(sp)
   4b3a8:	dc011a17 	ldw	r16,1128(sp)
   4b3ac:	dec11e04 	addi	sp,sp,1144
   4b3b0:	f800283a 	ret
   4b3b4:	047fffc4 	movi	r17,-1
   4b3b8:	003ff106 	br	4b380 <__alt_data_end+0xfffeb380>

0004b3bc <_calloc_r>:
   4b3bc:	defffe04 	addi	sp,sp,-8
   4b3c0:	2805883a 	mov	r2,r5
   4b3c4:	dc000015 	stw	r16,0(sp)
   4b3c8:	300b883a 	mov	r5,r6
   4b3cc:	2021883a 	mov	r16,r4
   4b3d0:	1009883a 	mov	r4,r2
   4b3d4:	dfc00115 	stw	ra,4(sp)
   4b3d8:	004131c0 	call	4131c <__mulsi3>
   4b3dc:	100b883a 	mov	r5,r2
   4b3e0:	8009883a 	mov	r4,r16
   4b3e4:	00429380 	call	42938 <_malloc_r>
   4b3e8:	10002926 	beq	r2,zero,4b490 <_calloc_r+0xd4>
   4b3ec:	11bfff17 	ldw	r6,-4(r2)
   4b3f0:	1021883a 	mov	r16,r2
   4b3f4:	00bfff04 	movi	r2,-4
   4b3f8:	308c703a 	and	r6,r6,r2
   4b3fc:	00c00904 	movi	r3,36
   4b400:	308d883a 	add	r6,r6,r2
   4b404:	19801636 	bltu	r3,r6,4b460 <_calloc_r+0xa4>
   4b408:	008004c4 	movi	r2,19
   4b40c:	11800b2e 	bgeu	r2,r6,4b43c <_calloc_r+0x80>
   4b410:	80000015 	stw	zero,0(r16)
   4b414:	80000115 	stw	zero,4(r16)
   4b418:	008006c4 	movi	r2,27
   4b41c:	11801a2e 	bgeu	r2,r6,4b488 <_calloc_r+0xcc>
   4b420:	80000215 	stw	zero,8(r16)
   4b424:	80000315 	stw	zero,12(r16)
   4b428:	30c0151e 	bne	r6,r3,4b480 <_calloc_r+0xc4>
   4b42c:	80000415 	stw	zero,16(r16)
   4b430:	80800604 	addi	r2,r16,24
   4b434:	80000515 	stw	zero,20(r16)
   4b438:	00000106 	br	4b440 <_calloc_r+0x84>
   4b43c:	8005883a 	mov	r2,r16
   4b440:	10000015 	stw	zero,0(r2)
   4b444:	10000115 	stw	zero,4(r2)
   4b448:	10000215 	stw	zero,8(r2)
   4b44c:	8005883a 	mov	r2,r16
   4b450:	dfc00117 	ldw	ra,4(sp)
   4b454:	dc000017 	ldw	r16,0(sp)
   4b458:	dec00204 	addi	sp,sp,8
   4b45c:	f800283a 	ret
   4b460:	000b883a 	mov	r5,zero
   4b464:	8009883a 	mov	r4,r16
   4b468:	00431440 	call	43144 <memset>
   4b46c:	8005883a 	mov	r2,r16
   4b470:	dfc00117 	ldw	ra,4(sp)
   4b474:	dc000017 	ldw	r16,0(sp)
   4b478:	dec00204 	addi	sp,sp,8
   4b47c:	f800283a 	ret
   4b480:	80800404 	addi	r2,r16,16
   4b484:	003fee06 	br	4b440 <__alt_data_end+0xfffeb440>
   4b488:	80800204 	addi	r2,r16,8
   4b48c:	003fec06 	br	4b440 <__alt_data_end+0xfffeb440>
   4b490:	0005883a 	mov	r2,zero
   4b494:	003fee06 	br	4b450 <__alt_data_end+0xfffeb450>

0004b498 <__fputwc>:
   4b498:	defff804 	addi	sp,sp,-32
   4b49c:	dcc00415 	stw	r19,16(sp)
   4b4a0:	dc800315 	stw	r18,12(sp)
   4b4a4:	dc000115 	stw	r16,4(sp)
   4b4a8:	dfc00715 	stw	ra,28(sp)
   4b4ac:	dd400615 	stw	r21,24(sp)
   4b4b0:	dd000515 	stw	r20,20(sp)
   4b4b4:	dc400215 	stw	r17,8(sp)
   4b4b8:	2027883a 	mov	r19,r4
   4b4bc:	2825883a 	mov	r18,r5
   4b4c0:	3021883a 	mov	r16,r6
   4b4c4:	00480bc0 	call	480bc <__locale_mb_cur_max>
   4b4c8:	00c00044 	movi	r3,1
   4b4cc:	10c03e26 	beq	r2,r3,4b5c8 <__fputwc+0x130>
   4b4d0:	81c01704 	addi	r7,r16,92
   4b4d4:	900d883a 	mov	r6,r18
   4b4d8:	d80b883a 	mov	r5,sp
   4b4dc:	9809883a 	mov	r4,r19
   4b4e0:	004b6a00 	call	4b6a0 <_wcrtomb_r>
   4b4e4:	1029883a 	mov	r20,r2
   4b4e8:	00bfffc4 	movi	r2,-1
   4b4ec:	a0802026 	beq	r20,r2,4b570 <__fputwc+0xd8>
   4b4f0:	d9400003 	ldbu	r5,0(sp)
   4b4f4:	a0001c26 	beq	r20,zero,4b568 <__fputwc+0xd0>
   4b4f8:	0023883a 	mov	r17,zero
   4b4fc:	05400284 	movi	r21,10
   4b500:	00000906 	br	4b528 <__fputwc+0x90>
   4b504:	80800017 	ldw	r2,0(r16)
   4b508:	11400005 	stb	r5,0(r2)
   4b50c:	80c00017 	ldw	r3,0(r16)
   4b510:	18c00044 	addi	r3,r3,1
   4b514:	80c00015 	stw	r3,0(r16)
   4b518:	8c400044 	addi	r17,r17,1
   4b51c:	dc45883a 	add	r2,sp,r17
   4b520:	8d00112e 	bgeu	r17,r20,4b568 <__fputwc+0xd0>
   4b524:	11400003 	ldbu	r5,0(r2)
   4b528:	80c00217 	ldw	r3,8(r16)
   4b52c:	18ffffc4 	addi	r3,r3,-1
   4b530:	80c00215 	stw	r3,8(r16)
   4b534:	183ff30e 	bge	r3,zero,4b504 <__alt_data_end+0xfffeb504>
   4b538:	80800617 	ldw	r2,24(r16)
   4b53c:	18801916 	blt	r3,r2,4b5a4 <__fputwc+0x10c>
   4b540:	80800017 	ldw	r2,0(r16)
   4b544:	11400005 	stb	r5,0(r2)
   4b548:	80800017 	ldw	r2,0(r16)
   4b54c:	10c00003 	ldbu	r3,0(r2)
   4b550:	10800044 	addi	r2,r2,1
   4b554:	1d402326 	beq	r3,r21,4b5e4 <__fputwc+0x14c>
   4b558:	80800015 	stw	r2,0(r16)
   4b55c:	8c400044 	addi	r17,r17,1
   4b560:	dc45883a 	add	r2,sp,r17
   4b564:	8d3fef36 	bltu	r17,r20,4b524 <__alt_data_end+0xfffeb524>
   4b568:	9005883a 	mov	r2,r18
   4b56c:	00000406 	br	4b580 <__fputwc+0xe8>
   4b570:	80c0030b 	ldhu	r3,12(r16)
   4b574:	a005883a 	mov	r2,r20
   4b578:	18c01014 	ori	r3,r3,64
   4b57c:	80c0030d 	sth	r3,12(r16)
   4b580:	dfc00717 	ldw	ra,28(sp)
   4b584:	dd400617 	ldw	r21,24(sp)
   4b588:	dd000517 	ldw	r20,20(sp)
   4b58c:	dcc00417 	ldw	r19,16(sp)
   4b590:	dc800317 	ldw	r18,12(sp)
   4b594:	dc400217 	ldw	r17,8(sp)
   4b598:	dc000117 	ldw	r16,4(sp)
   4b59c:	dec00804 	addi	sp,sp,32
   4b5a0:	f800283a 	ret
   4b5a4:	800d883a 	mov	r6,r16
   4b5a8:	29403fcc 	andi	r5,r5,255
   4b5ac:	9809883a 	mov	r4,r19
   4b5b0:	0045e5c0 	call	45e5c <__swbuf_r>
   4b5b4:	10bfffe0 	cmpeqi	r2,r2,-1
   4b5b8:	10803fcc 	andi	r2,r2,255
   4b5bc:	103fd626 	beq	r2,zero,4b518 <__alt_data_end+0xfffeb518>
   4b5c0:	00bfffc4 	movi	r2,-1
   4b5c4:	003fee06 	br	4b580 <__alt_data_end+0xfffeb580>
   4b5c8:	90ffffc4 	addi	r3,r18,-1
   4b5cc:	01003f84 	movi	r4,254
   4b5d0:	20ffbf36 	bltu	r4,r3,4b4d0 <__alt_data_end+0xfffeb4d0>
   4b5d4:	900b883a 	mov	r5,r18
   4b5d8:	dc800005 	stb	r18,0(sp)
   4b5dc:	1029883a 	mov	r20,r2
   4b5e0:	003fc506 	br	4b4f8 <__alt_data_end+0xfffeb4f8>
   4b5e4:	800d883a 	mov	r6,r16
   4b5e8:	a80b883a 	mov	r5,r21
   4b5ec:	9809883a 	mov	r4,r19
   4b5f0:	0045e5c0 	call	45e5c <__swbuf_r>
   4b5f4:	10bfffe0 	cmpeqi	r2,r2,-1
   4b5f8:	003fef06 	br	4b5b8 <__alt_data_end+0xfffeb5b8>

0004b5fc <_fputwc_r>:
   4b5fc:	3080030b 	ldhu	r2,12(r6)
   4b600:	10c8000c 	andi	r3,r2,8192
   4b604:	1800051e 	bne	r3,zero,4b61c <_fputwc_r+0x20>
   4b608:	30c01917 	ldw	r3,100(r6)
   4b60c:	10880014 	ori	r2,r2,8192
   4b610:	3080030d 	sth	r2,12(r6)
   4b614:	18880014 	ori	r2,r3,8192
   4b618:	30801915 	stw	r2,100(r6)
   4b61c:	004b4981 	jmpi	4b498 <__fputwc>

0004b620 <fputwc>:
   4b620:	00800174 	movhi	r2,5
   4b624:	defffc04 	addi	sp,sp,-16
   4b628:	108d5104 	addi	r2,r2,13636
   4b62c:	dc000115 	stw	r16,4(sp)
   4b630:	14000017 	ldw	r16,0(r2)
   4b634:	dc400215 	stw	r17,8(sp)
   4b638:	dfc00315 	stw	ra,12(sp)
   4b63c:	2023883a 	mov	r17,r4
   4b640:	80000226 	beq	r16,zero,4b64c <fputwc+0x2c>
   4b644:	80800e17 	ldw	r2,56(r16)
   4b648:	10001026 	beq	r2,zero,4b68c <fputwc+0x6c>
   4b64c:	2880030b 	ldhu	r2,12(r5)
   4b650:	10c8000c 	andi	r3,r2,8192
   4b654:	1800051e 	bne	r3,zero,4b66c <fputwc+0x4c>
   4b658:	28c01917 	ldw	r3,100(r5)
   4b65c:	10880014 	ori	r2,r2,8192
   4b660:	2880030d 	sth	r2,12(r5)
   4b664:	18880014 	ori	r2,r3,8192
   4b668:	28801915 	stw	r2,100(r5)
   4b66c:	280d883a 	mov	r6,r5
   4b670:	8009883a 	mov	r4,r16
   4b674:	880b883a 	mov	r5,r17
   4b678:	dfc00317 	ldw	ra,12(sp)
   4b67c:	dc400217 	ldw	r17,8(sp)
   4b680:	dc000117 	ldw	r16,4(sp)
   4b684:	dec00404 	addi	sp,sp,16
   4b688:	004b4981 	jmpi	4b498 <__fputwc>
   4b68c:	8009883a 	mov	r4,r16
   4b690:	d9400015 	stw	r5,0(sp)
   4b694:	0041a9c0 	call	41a9c <__sinit>
   4b698:	d9400017 	ldw	r5,0(sp)
   4b69c:	003feb06 	br	4b64c <__alt_data_end+0xfffeb64c>

0004b6a0 <_wcrtomb_r>:
   4b6a0:	defff604 	addi	sp,sp,-40
   4b6a4:	00800174 	movhi	r2,5
   4b6a8:	dc800815 	stw	r18,32(sp)
   4b6ac:	dc400715 	stw	r17,28(sp)
   4b6b0:	dc000615 	stw	r16,24(sp)
   4b6b4:	108d5504 	addi	r2,r2,13652
   4b6b8:	dfc00915 	stw	ra,36(sp)
   4b6bc:	2021883a 	mov	r16,r4
   4b6c0:	3823883a 	mov	r17,r7
   4b6c4:	14800017 	ldw	r18,0(r2)
   4b6c8:	28001426 	beq	r5,zero,4b71c <_wcrtomb_r+0x7c>
   4b6cc:	d9400415 	stw	r5,16(sp)
   4b6d0:	d9800515 	stw	r6,20(sp)
   4b6d4:	00480b00 	call	480b0 <__locale_charset>
   4b6d8:	d9800517 	ldw	r6,20(sp)
   4b6dc:	d9400417 	ldw	r5,16(sp)
   4b6e0:	100f883a 	mov	r7,r2
   4b6e4:	dc400015 	stw	r17,0(sp)
   4b6e8:	8009883a 	mov	r4,r16
   4b6ec:	903ee83a 	callr	r18
   4b6f0:	00ffffc4 	movi	r3,-1
   4b6f4:	10c0031e 	bne	r2,r3,4b704 <_wcrtomb_r+0x64>
   4b6f8:	88000015 	stw	zero,0(r17)
   4b6fc:	00c02284 	movi	r3,138
   4b700:	80c00015 	stw	r3,0(r16)
   4b704:	dfc00917 	ldw	ra,36(sp)
   4b708:	dc800817 	ldw	r18,32(sp)
   4b70c:	dc400717 	ldw	r17,28(sp)
   4b710:	dc000617 	ldw	r16,24(sp)
   4b714:	dec00a04 	addi	sp,sp,40
   4b718:	f800283a 	ret
   4b71c:	00480b00 	call	480b0 <__locale_charset>
   4b720:	100f883a 	mov	r7,r2
   4b724:	dc400015 	stw	r17,0(sp)
   4b728:	000d883a 	mov	r6,zero
   4b72c:	d9400104 	addi	r5,sp,4
   4b730:	8009883a 	mov	r4,r16
   4b734:	903ee83a 	callr	r18
   4b738:	003fed06 	br	4b6f0 <__alt_data_end+0xfffeb6f0>

0004b73c <wcrtomb>:
   4b73c:	defff604 	addi	sp,sp,-40
   4b740:	00800174 	movhi	r2,5
   4b744:	dc800615 	stw	r18,24(sp)
   4b748:	dc400515 	stw	r17,20(sp)
   4b74c:	108d5104 	addi	r2,r2,13636
   4b750:	dfc00915 	stw	ra,36(sp)
   4b754:	dd000815 	stw	r20,32(sp)
   4b758:	dcc00715 	stw	r19,28(sp)
   4b75c:	dc000415 	stw	r16,16(sp)
   4b760:	3025883a 	mov	r18,r6
   4b764:	14400017 	ldw	r17,0(r2)
   4b768:	20001926 	beq	r4,zero,4b7d0 <wcrtomb+0x94>
   4b76c:	00800174 	movhi	r2,5
   4b770:	108d5504 	addi	r2,r2,13652
   4b774:	15000017 	ldw	r20,0(r2)
   4b778:	2021883a 	mov	r16,r4
   4b77c:	2827883a 	mov	r19,r5
   4b780:	00480b00 	call	480b0 <__locale_charset>
   4b784:	100f883a 	mov	r7,r2
   4b788:	dc800015 	stw	r18,0(sp)
   4b78c:	980d883a 	mov	r6,r19
   4b790:	800b883a 	mov	r5,r16
   4b794:	8809883a 	mov	r4,r17
   4b798:	a03ee83a 	callr	r20
   4b79c:	00ffffc4 	movi	r3,-1
   4b7a0:	10c0031e 	bne	r2,r3,4b7b0 <wcrtomb+0x74>
   4b7a4:	90000015 	stw	zero,0(r18)
   4b7a8:	00c02284 	movi	r3,138
   4b7ac:	88c00015 	stw	r3,0(r17)
   4b7b0:	dfc00917 	ldw	ra,36(sp)
   4b7b4:	dd000817 	ldw	r20,32(sp)
   4b7b8:	dcc00717 	ldw	r19,28(sp)
   4b7bc:	dc800617 	ldw	r18,24(sp)
   4b7c0:	dc400517 	ldw	r17,20(sp)
   4b7c4:	dc000417 	ldw	r16,16(sp)
   4b7c8:	dec00a04 	addi	sp,sp,40
   4b7cc:	f800283a 	ret
   4b7d0:	00800174 	movhi	r2,5
   4b7d4:	108d5504 	addi	r2,r2,13652
   4b7d8:	14000017 	ldw	r16,0(r2)
   4b7dc:	00480b00 	call	480b0 <__locale_charset>
   4b7e0:	100f883a 	mov	r7,r2
   4b7e4:	dc800015 	stw	r18,0(sp)
   4b7e8:	000d883a 	mov	r6,zero
   4b7ec:	d9400104 	addi	r5,sp,4
   4b7f0:	8809883a 	mov	r4,r17
   4b7f4:	803ee83a 	callr	r16
   4b7f8:	003fe806 	br	4b79c <__alt_data_end+0xfffeb79c>

0004b7fc <__ascii_wctomb>:
   4b7fc:	28000526 	beq	r5,zero,4b814 <__ascii_wctomb+0x18>
   4b800:	00803fc4 	movi	r2,255
   4b804:	11800536 	bltu	r2,r6,4b81c <__ascii_wctomb+0x20>
   4b808:	29800005 	stb	r6,0(r5)
   4b80c:	00800044 	movi	r2,1
   4b810:	f800283a 	ret
   4b814:	0005883a 	mov	r2,zero
   4b818:	f800283a 	ret
   4b81c:	00802284 	movi	r2,138
   4b820:	20800015 	stw	r2,0(r4)
   4b824:	00bfffc4 	movi	r2,-1
   4b828:	f800283a 	ret

0004b82c <_wctomb_r>:
   4b82c:	00800174 	movhi	r2,5
   4b830:	defff904 	addi	sp,sp,-28
   4b834:	108d5504 	addi	r2,r2,13652
   4b838:	dfc00615 	stw	ra,24(sp)
   4b83c:	dc400515 	stw	r17,20(sp)
   4b840:	dc000415 	stw	r16,16(sp)
   4b844:	3823883a 	mov	r17,r7
   4b848:	14000017 	ldw	r16,0(r2)
   4b84c:	d9000115 	stw	r4,4(sp)
   4b850:	d9400215 	stw	r5,8(sp)
   4b854:	d9800315 	stw	r6,12(sp)
   4b858:	00480b00 	call	480b0 <__locale_charset>
   4b85c:	d9800317 	ldw	r6,12(sp)
   4b860:	d9400217 	ldw	r5,8(sp)
   4b864:	d9000117 	ldw	r4,4(sp)
   4b868:	100f883a 	mov	r7,r2
   4b86c:	dc400015 	stw	r17,0(sp)
   4b870:	803ee83a 	callr	r16
   4b874:	dfc00617 	ldw	ra,24(sp)
   4b878:	dc400517 	ldw	r17,20(sp)
   4b87c:	dc000417 	ldw	r16,16(sp)
   4b880:	dec00704 	addi	sp,sp,28
   4b884:	f800283a 	ret

0004b888 <__udivdi3>:
   4b888:	defff404 	addi	sp,sp,-48
   4b88c:	dcc00515 	stw	r19,20(sp)
   4b890:	dc000215 	stw	r16,8(sp)
   4b894:	dfc00b15 	stw	ra,44(sp)
   4b898:	df000a15 	stw	fp,40(sp)
   4b89c:	ddc00915 	stw	r23,36(sp)
   4b8a0:	dd800815 	stw	r22,32(sp)
   4b8a4:	dd400715 	stw	r21,28(sp)
   4b8a8:	dd000615 	stw	r20,24(sp)
   4b8ac:	dc800415 	stw	r18,16(sp)
   4b8b0:	dc400315 	stw	r17,12(sp)
   4b8b4:	2027883a 	mov	r19,r4
   4b8b8:	2821883a 	mov	r16,r5
   4b8bc:	3800461e 	bne	r7,zero,4b9d8 <__udivdi3+0x150>
   4b8c0:	3023883a 	mov	r17,r6
   4b8c4:	2025883a 	mov	r18,r4
   4b8c8:	2980572e 	bgeu	r5,r6,4ba28 <__udivdi3+0x1a0>
   4b8cc:	00bfffd4 	movui	r2,65535
   4b8d0:	282d883a 	mov	r22,r5
   4b8d4:	1180b236 	bltu	r2,r6,4bba0 <__udivdi3+0x318>
   4b8d8:	00803fc4 	movi	r2,255
   4b8dc:	1185803a 	cmpltu	r2,r2,r6
   4b8e0:	100490fa 	slli	r2,r2,3
   4b8e4:	3086d83a 	srl	r3,r6,r2
   4b8e8:	01000174 	movhi	r4,5
   4b8ec:	2105ba04 	addi	r4,r4,5864
   4b8f0:	20c7883a 	add	r3,r4,r3
   4b8f4:	18c00003 	ldbu	r3,0(r3)
   4b8f8:	1885883a 	add	r2,r3,r2
   4b8fc:	00c00804 	movi	r3,32
   4b900:	1887c83a 	sub	r3,r3,r2
   4b904:	18000526 	beq	r3,zero,4b91c <__udivdi3+0x94>
   4b908:	80e0983a 	sll	r16,r16,r3
   4b90c:	9884d83a 	srl	r2,r19,r2
   4b910:	30e2983a 	sll	r17,r6,r3
   4b914:	98e4983a 	sll	r18,r19,r3
   4b918:	142cb03a 	or	r22,r2,r16
   4b91c:	882ad43a 	srli	r21,r17,16
   4b920:	b009883a 	mov	r4,r22
   4b924:	8d3fffcc 	andi	r20,r17,65535
   4b928:	a80b883a 	mov	r5,r21
   4b92c:	00412c40 	call	412c4 <__umodsi3>
   4b930:	b009883a 	mov	r4,r22
   4b934:	a80b883a 	mov	r5,r21
   4b938:	1027883a 	mov	r19,r2
   4b93c:	00412600 	call	41260 <__udivsi3>
   4b940:	100b883a 	mov	r5,r2
   4b944:	a009883a 	mov	r4,r20
   4b948:	102d883a 	mov	r22,r2
   4b94c:	004131c0 	call	4131c <__mulsi3>
   4b950:	9826943a 	slli	r19,r19,16
   4b954:	9006d43a 	srli	r3,r18,16
   4b958:	1cc6b03a 	or	r3,r3,r19
   4b95c:	1880052e 	bgeu	r3,r2,4b974 <__udivdi3+0xec>
   4b960:	1c47883a 	add	r3,r3,r17
   4b964:	b13fffc4 	addi	r4,r22,-1
   4b968:	1c400136 	bltu	r3,r17,4b970 <__udivdi3+0xe8>
   4b96c:	18814236 	bltu	r3,r2,4be78 <__udivdi3+0x5f0>
   4b970:	202d883a 	mov	r22,r4
   4b974:	18a1c83a 	sub	r16,r3,r2
   4b978:	8009883a 	mov	r4,r16
   4b97c:	a80b883a 	mov	r5,r21
   4b980:	00412c40 	call	412c4 <__umodsi3>
   4b984:	1027883a 	mov	r19,r2
   4b988:	8009883a 	mov	r4,r16
   4b98c:	a80b883a 	mov	r5,r21
   4b990:	9826943a 	slli	r19,r19,16
   4b994:	00412600 	call	41260 <__udivsi3>
   4b998:	100b883a 	mov	r5,r2
   4b99c:	a009883a 	mov	r4,r20
   4b9a0:	94bfffcc 	andi	r18,r18,65535
   4b9a4:	1021883a 	mov	r16,r2
   4b9a8:	94e4b03a 	or	r18,r18,r19
   4b9ac:	004131c0 	call	4131c <__mulsi3>
   4b9b0:	9080052e 	bgeu	r18,r2,4b9c8 <__udivdi3+0x140>
   4b9b4:	8ca5883a 	add	r18,r17,r18
   4b9b8:	80ffffc4 	addi	r3,r16,-1
   4b9bc:	94410c36 	bltu	r18,r17,4bdf0 <__udivdi3+0x568>
   4b9c0:	90810b2e 	bgeu	r18,r2,4bdf0 <__udivdi3+0x568>
   4b9c4:	843fff84 	addi	r16,r16,-2
   4b9c8:	b004943a 	slli	r2,r22,16
   4b9cc:	0007883a 	mov	r3,zero
   4b9d0:	1404b03a 	or	r2,r2,r16
   4b9d4:	00005e06 	br	4bb50 <__udivdi3+0x2c8>
   4b9d8:	29c05b36 	bltu	r5,r7,4bb48 <__udivdi3+0x2c0>
   4b9dc:	00bfffd4 	movui	r2,65535
   4b9e0:	11c0672e 	bgeu	r2,r7,4bb80 <__udivdi3+0x2f8>
   4b9e4:	00804034 	movhi	r2,256
   4b9e8:	10bfffc4 	addi	r2,r2,-1
   4b9ec:	11c10a36 	bltu	r2,r7,4be18 <__udivdi3+0x590>
   4b9f0:	00800404 	movi	r2,16
   4b9f4:	3886d83a 	srl	r3,r7,r2
   4b9f8:	01000174 	movhi	r4,5
   4b9fc:	2105ba04 	addi	r4,r4,5864
   4ba00:	20c7883a 	add	r3,r4,r3
   4ba04:	18c00003 	ldbu	r3,0(r3)
   4ba08:	05c00804 	movi	r23,32
   4ba0c:	1885883a 	add	r2,r3,r2
   4ba10:	b8afc83a 	sub	r23,r23,r2
   4ba14:	b800671e 	bne	r23,zero,4bbb4 <__udivdi3+0x32c>
   4ba18:	3c010536 	bltu	r7,r16,4be30 <__udivdi3+0x5a8>
   4ba1c:	9985403a 	cmpgeu	r2,r19,r6
   4ba20:	0007883a 	mov	r3,zero
   4ba24:	00004a06 	br	4bb50 <__udivdi3+0x2c8>
   4ba28:	3000041e 	bne	r6,zero,4ba3c <__udivdi3+0x1b4>
   4ba2c:	000b883a 	mov	r5,zero
   4ba30:	01000044 	movi	r4,1
   4ba34:	00412600 	call	41260 <__udivsi3>
   4ba38:	1023883a 	mov	r17,r2
   4ba3c:	00bfffd4 	movui	r2,65535
   4ba40:	1440532e 	bgeu	r2,r17,4bb90 <__udivdi3+0x308>
   4ba44:	00804034 	movhi	r2,256
   4ba48:	10bfffc4 	addi	r2,r2,-1
   4ba4c:	1440f436 	bltu	r2,r17,4be20 <__udivdi3+0x598>
   4ba50:	00800404 	movi	r2,16
   4ba54:	8886d83a 	srl	r3,r17,r2
   4ba58:	01000174 	movhi	r4,5
   4ba5c:	2105ba04 	addi	r4,r4,5864
   4ba60:	20c7883a 	add	r3,r4,r3
   4ba64:	18c00003 	ldbu	r3,0(r3)
   4ba68:	1885883a 	add	r2,r3,r2
   4ba6c:	00c00804 	movi	r3,32
   4ba70:	1887c83a 	sub	r3,r3,r2
   4ba74:	1800a51e 	bne	r3,zero,4bd0c <__udivdi3+0x484>
   4ba78:	882ad43a 	srli	r21,r17,16
   4ba7c:	8461c83a 	sub	r16,r16,r17
   4ba80:	8d3fffcc 	andi	r20,r17,65535
   4ba84:	00c00044 	movi	r3,1
   4ba88:	a80b883a 	mov	r5,r21
   4ba8c:	8009883a 	mov	r4,r16
   4ba90:	d8c00115 	stw	r3,4(sp)
   4ba94:	00412c40 	call	412c4 <__umodsi3>
   4ba98:	a80b883a 	mov	r5,r21
   4ba9c:	8009883a 	mov	r4,r16
   4baa0:	1027883a 	mov	r19,r2
   4baa4:	00412600 	call	41260 <__udivsi3>
   4baa8:	a00b883a 	mov	r5,r20
   4baac:	1009883a 	mov	r4,r2
   4bab0:	102d883a 	mov	r22,r2
   4bab4:	004131c0 	call	4131c <__mulsi3>
   4bab8:	9826943a 	slli	r19,r19,16
   4babc:	900ed43a 	srli	r7,r18,16
   4bac0:	d8c00117 	ldw	r3,4(sp)
   4bac4:	3cceb03a 	or	r7,r7,r19
   4bac8:	3880052e 	bgeu	r7,r2,4bae0 <__udivdi3+0x258>
   4bacc:	3c4f883a 	add	r7,r7,r17
   4bad0:	b13fffc4 	addi	r4,r22,-1
   4bad4:	3c400136 	bltu	r7,r17,4badc <__udivdi3+0x254>
   4bad8:	3880e436 	bltu	r7,r2,4be6c <__udivdi3+0x5e4>
   4badc:	202d883a 	mov	r22,r4
   4bae0:	38a1c83a 	sub	r16,r7,r2
   4bae4:	8009883a 	mov	r4,r16
   4bae8:	a80b883a 	mov	r5,r21
   4baec:	d8c00115 	stw	r3,4(sp)
   4baf0:	00412c40 	call	412c4 <__umodsi3>
   4baf4:	1027883a 	mov	r19,r2
   4baf8:	8009883a 	mov	r4,r16
   4bafc:	a80b883a 	mov	r5,r21
   4bb00:	9826943a 	slli	r19,r19,16
   4bb04:	00412600 	call	41260 <__udivsi3>
   4bb08:	a00b883a 	mov	r5,r20
   4bb0c:	1009883a 	mov	r4,r2
   4bb10:	94bfffcc 	andi	r18,r18,65535
   4bb14:	1021883a 	mov	r16,r2
   4bb18:	94e4b03a 	or	r18,r18,r19
   4bb1c:	004131c0 	call	4131c <__mulsi3>
   4bb20:	d8c00117 	ldw	r3,4(sp)
   4bb24:	9080052e 	bgeu	r18,r2,4bb3c <__udivdi3+0x2b4>
   4bb28:	8ca5883a 	add	r18,r17,r18
   4bb2c:	813fffc4 	addi	r4,r16,-1
   4bb30:	9440ad36 	bltu	r18,r17,4bde8 <__udivdi3+0x560>
   4bb34:	9080ac2e 	bgeu	r18,r2,4bde8 <__udivdi3+0x560>
   4bb38:	843fff84 	addi	r16,r16,-2
   4bb3c:	b004943a 	slli	r2,r22,16
   4bb40:	1404b03a 	or	r2,r2,r16
   4bb44:	00000206 	br	4bb50 <__udivdi3+0x2c8>
   4bb48:	0007883a 	mov	r3,zero
   4bb4c:	0005883a 	mov	r2,zero
   4bb50:	dfc00b17 	ldw	ra,44(sp)
   4bb54:	df000a17 	ldw	fp,40(sp)
   4bb58:	ddc00917 	ldw	r23,36(sp)
   4bb5c:	dd800817 	ldw	r22,32(sp)
   4bb60:	dd400717 	ldw	r21,28(sp)
   4bb64:	dd000617 	ldw	r20,24(sp)
   4bb68:	dcc00517 	ldw	r19,20(sp)
   4bb6c:	dc800417 	ldw	r18,16(sp)
   4bb70:	dc400317 	ldw	r17,12(sp)
   4bb74:	dc000217 	ldw	r16,8(sp)
   4bb78:	dec00c04 	addi	sp,sp,48
   4bb7c:	f800283a 	ret
   4bb80:	00803fc4 	movi	r2,255
   4bb84:	11c5803a 	cmpltu	r2,r2,r7
   4bb88:	100490fa 	slli	r2,r2,3
   4bb8c:	003f9906 	br	4b9f4 <__alt_data_end+0xfffeb9f4>
   4bb90:	00803fc4 	movi	r2,255
   4bb94:	1445803a 	cmpltu	r2,r2,r17
   4bb98:	100490fa 	slli	r2,r2,3
   4bb9c:	003fad06 	br	4ba54 <__alt_data_end+0xfffeba54>
   4bba0:	00804034 	movhi	r2,256
   4bba4:	10bfffc4 	addi	r2,r2,-1
   4bba8:	11809f36 	bltu	r2,r6,4be28 <__udivdi3+0x5a0>
   4bbac:	00800404 	movi	r2,16
   4bbb0:	003f4c06 	br	4b8e4 <__alt_data_end+0xfffeb8e4>
   4bbb4:	3dce983a 	sll	r7,r7,r23
   4bbb8:	30b8d83a 	srl	fp,r6,r2
   4bbbc:	80a2d83a 	srl	r17,r16,r2
   4bbc0:	35cc983a 	sll	r6,r6,r23
   4bbc4:	3f38b03a 	or	fp,r7,fp
   4bbc8:	e024d43a 	srli	r18,fp,16
   4bbcc:	9884d83a 	srl	r2,r19,r2
   4bbd0:	85e0983a 	sll	r16,r16,r23
   4bbd4:	8809883a 	mov	r4,r17
   4bbd8:	900b883a 	mov	r5,r18
   4bbdc:	d9800015 	stw	r6,0(sp)
   4bbe0:	1420b03a 	or	r16,r2,r16
   4bbe4:	00412c40 	call	412c4 <__umodsi3>
   4bbe8:	900b883a 	mov	r5,r18
   4bbec:	8809883a 	mov	r4,r17
   4bbf0:	1029883a 	mov	r20,r2
   4bbf4:	e5bfffcc 	andi	r22,fp,65535
   4bbf8:	00412600 	call	41260 <__udivsi3>
   4bbfc:	100b883a 	mov	r5,r2
   4bc00:	b009883a 	mov	r4,r22
   4bc04:	102b883a 	mov	r21,r2
   4bc08:	004131c0 	call	4131c <__mulsi3>
   4bc0c:	a028943a 	slli	r20,r20,16
   4bc10:	8006d43a 	srli	r3,r16,16
   4bc14:	1d06b03a 	or	r3,r3,r20
   4bc18:	1880042e 	bgeu	r3,r2,4bc2c <__udivdi3+0x3a4>
   4bc1c:	1f07883a 	add	r3,r3,fp
   4bc20:	a93fffc4 	addi	r4,r21,-1
   4bc24:	1f00892e 	bgeu	r3,fp,4be4c <__udivdi3+0x5c4>
   4bc28:	202b883a 	mov	r21,r4
   4bc2c:	18a3c83a 	sub	r17,r3,r2
   4bc30:	8809883a 	mov	r4,r17
   4bc34:	900b883a 	mov	r5,r18
   4bc38:	00412c40 	call	412c4 <__umodsi3>
   4bc3c:	1029883a 	mov	r20,r2
   4bc40:	8809883a 	mov	r4,r17
   4bc44:	900b883a 	mov	r5,r18
   4bc48:	a028943a 	slli	r20,r20,16
   4bc4c:	00412600 	call	41260 <__udivsi3>
   4bc50:	100b883a 	mov	r5,r2
   4bc54:	b009883a 	mov	r4,r22
   4bc58:	843fffcc 	andi	r16,r16,65535
   4bc5c:	1023883a 	mov	r17,r2
   4bc60:	8520b03a 	or	r16,r16,r20
   4bc64:	004131c0 	call	4131c <__mulsi3>
   4bc68:	8080042e 	bgeu	r16,r2,4bc7c <__udivdi3+0x3f4>
   4bc6c:	8721883a 	add	r16,r16,fp
   4bc70:	88ffffc4 	addi	r3,r17,-1
   4bc74:	8700712e 	bgeu	r16,fp,4be3c <__udivdi3+0x5b4>
   4bc78:	1823883a 	mov	r17,r3
   4bc7c:	a80e943a 	slli	r7,r21,16
   4bc80:	d8c00017 	ldw	r3,0(sp)
   4bc84:	80a1c83a 	sub	r16,r16,r2
   4bc88:	3c64b03a 	or	r18,r7,r17
   4bc8c:	1d3fffcc 	andi	r20,r3,65535
   4bc90:	9022d43a 	srli	r17,r18,16
   4bc94:	95bfffcc 	andi	r22,r18,65535
   4bc98:	a00b883a 	mov	r5,r20
   4bc9c:	b009883a 	mov	r4,r22
   4bca0:	182ad43a 	srli	r21,r3,16
   4bca4:	004131c0 	call	4131c <__mulsi3>
   4bca8:	a00b883a 	mov	r5,r20
   4bcac:	8809883a 	mov	r4,r17
   4bcb0:	1039883a 	mov	fp,r2
   4bcb4:	004131c0 	call	4131c <__mulsi3>
   4bcb8:	8809883a 	mov	r4,r17
   4bcbc:	a80b883a 	mov	r5,r21
   4bcc0:	1029883a 	mov	r20,r2
   4bcc4:	004131c0 	call	4131c <__mulsi3>
   4bcc8:	a80b883a 	mov	r5,r21
   4bccc:	b009883a 	mov	r4,r22
   4bcd0:	1023883a 	mov	r17,r2
   4bcd4:	004131c0 	call	4131c <__mulsi3>
   4bcd8:	e006d43a 	srli	r3,fp,16
   4bcdc:	1505883a 	add	r2,r2,r20
   4bce0:	1887883a 	add	r3,r3,r2
   4bce4:	1d00022e 	bgeu	r3,r20,4bcf0 <__udivdi3+0x468>
   4bce8:	00800074 	movhi	r2,1
   4bcec:	88a3883a 	add	r17,r17,r2
   4bcf0:	1804d43a 	srli	r2,r3,16
   4bcf4:	1463883a 	add	r17,r2,r17
   4bcf8:	84404436 	bltu	r16,r17,4be0c <__udivdi3+0x584>
   4bcfc:	84403e26 	beq	r16,r17,4bdf8 <__udivdi3+0x570>
   4bd00:	9005883a 	mov	r2,r18
   4bd04:	0007883a 	mov	r3,zero
   4bd08:	003f9106 	br	4bb50 <__alt_data_end+0xfffebb50>
   4bd0c:	88e2983a 	sll	r17,r17,r3
   4bd10:	80aed83a 	srl	r23,r16,r2
   4bd14:	80e0983a 	sll	r16,r16,r3
   4bd18:	882ad43a 	srli	r21,r17,16
   4bd1c:	9884d83a 	srl	r2,r19,r2
   4bd20:	b809883a 	mov	r4,r23
   4bd24:	a80b883a 	mov	r5,r21
   4bd28:	98e4983a 	sll	r18,r19,r3
   4bd2c:	142cb03a 	or	r22,r2,r16
   4bd30:	00412c40 	call	412c4 <__umodsi3>
   4bd34:	b809883a 	mov	r4,r23
   4bd38:	a80b883a 	mov	r5,r21
   4bd3c:	1027883a 	mov	r19,r2
   4bd40:	8d3fffcc 	andi	r20,r17,65535
   4bd44:	00412600 	call	41260 <__udivsi3>
   4bd48:	a009883a 	mov	r4,r20
   4bd4c:	100b883a 	mov	r5,r2
   4bd50:	102f883a 	mov	r23,r2
   4bd54:	004131c0 	call	4131c <__mulsi3>
   4bd58:	9826943a 	slli	r19,r19,16
   4bd5c:	b008d43a 	srli	r4,r22,16
   4bd60:	24c8b03a 	or	r4,r4,r19
   4bd64:	2080062e 	bgeu	r4,r2,4bd80 <__udivdi3+0x4f8>
   4bd68:	2449883a 	add	r4,r4,r17
   4bd6c:	b8ffffc4 	addi	r3,r23,-1
   4bd70:	24403c36 	bltu	r4,r17,4be64 <__udivdi3+0x5dc>
   4bd74:	20803b2e 	bgeu	r4,r2,4be64 <__udivdi3+0x5dc>
   4bd78:	bdffff84 	addi	r23,r23,-2
   4bd7c:	2449883a 	add	r4,r4,r17
   4bd80:	20a1c83a 	sub	r16,r4,r2
   4bd84:	a80b883a 	mov	r5,r21
   4bd88:	8009883a 	mov	r4,r16
   4bd8c:	00412c40 	call	412c4 <__umodsi3>
   4bd90:	a80b883a 	mov	r5,r21
   4bd94:	8009883a 	mov	r4,r16
   4bd98:	1027883a 	mov	r19,r2
   4bd9c:	00412600 	call	41260 <__udivsi3>
   4bda0:	a009883a 	mov	r4,r20
   4bda4:	100b883a 	mov	r5,r2
   4bda8:	9826943a 	slli	r19,r19,16
   4bdac:	1039883a 	mov	fp,r2
   4bdb0:	004131c0 	call	4131c <__mulsi3>
   4bdb4:	b13fffcc 	andi	r4,r22,65535
   4bdb8:	24c8b03a 	or	r4,r4,r19
   4bdbc:	2080062e 	bgeu	r4,r2,4bdd8 <__udivdi3+0x550>
   4bdc0:	2449883a 	add	r4,r4,r17
   4bdc4:	e0ffffc4 	addi	r3,fp,-1
   4bdc8:	24402436 	bltu	r4,r17,4be5c <__udivdi3+0x5d4>
   4bdcc:	2080232e 	bgeu	r4,r2,4be5c <__udivdi3+0x5d4>
   4bdd0:	e73fff84 	addi	fp,fp,-2
   4bdd4:	2449883a 	add	r4,r4,r17
   4bdd8:	b82e943a 	slli	r23,r23,16
   4bddc:	20a1c83a 	sub	r16,r4,r2
   4bde0:	bf06b03a 	or	r3,r23,fp
   4bde4:	003f2806 	br	4ba88 <__alt_data_end+0xfffeba88>
   4bde8:	2021883a 	mov	r16,r4
   4bdec:	003f5306 	br	4bb3c <__alt_data_end+0xfffebb3c>
   4bdf0:	1821883a 	mov	r16,r3
   4bdf4:	003ef406 	br	4b9c8 <__alt_data_end+0xfffeb9c8>
   4bdf8:	1806943a 	slli	r3,r3,16
   4bdfc:	9de6983a 	sll	r19,r19,r23
   4be00:	e73fffcc 	andi	fp,fp,65535
   4be04:	1f07883a 	add	r3,r3,fp
   4be08:	98ffbd2e 	bgeu	r19,r3,4bd00 <__alt_data_end+0xfffebd00>
   4be0c:	90bfffc4 	addi	r2,r18,-1
   4be10:	0007883a 	mov	r3,zero
   4be14:	003f4e06 	br	4bb50 <__alt_data_end+0xfffebb50>
   4be18:	00800604 	movi	r2,24
   4be1c:	003ef506 	br	4b9f4 <__alt_data_end+0xfffeb9f4>
   4be20:	00800604 	movi	r2,24
   4be24:	003f0b06 	br	4ba54 <__alt_data_end+0xfffeba54>
   4be28:	00800604 	movi	r2,24
   4be2c:	003ead06 	br	4b8e4 <__alt_data_end+0xfffeb8e4>
   4be30:	0007883a 	mov	r3,zero
   4be34:	00800044 	movi	r2,1
   4be38:	003f4506 	br	4bb50 <__alt_data_end+0xfffebb50>
   4be3c:	80bf8e2e 	bgeu	r16,r2,4bc78 <__alt_data_end+0xfffebc78>
   4be40:	8c7fff84 	addi	r17,r17,-2
   4be44:	8721883a 	add	r16,r16,fp
   4be48:	003f8c06 	br	4bc7c <__alt_data_end+0xfffebc7c>
   4be4c:	18bf762e 	bgeu	r3,r2,4bc28 <__alt_data_end+0xfffebc28>
   4be50:	ad7fff84 	addi	r21,r21,-2
   4be54:	1f07883a 	add	r3,r3,fp
   4be58:	003f7406 	br	4bc2c <__alt_data_end+0xfffebc2c>
   4be5c:	1839883a 	mov	fp,r3
   4be60:	003fdd06 	br	4bdd8 <__alt_data_end+0xfffebdd8>
   4be64:	182f883a 	mov	r23,r3
   4be68:	003fc506 	br	4bd80 <__alt_data_end+0xfffebd80>
   4be6c:	b5bfff84 	addi	r22,r22,-2
   4be70:	3c4f883a 	add	r7,r7,r17
   4be74:	003f1a06 	br	4bae0 <__alt_data_end+0xfffebae0>
   4be78:	b5bfff84 	addi	r22,r22,-2
   4be7c:	1c47883a 	add	r3,r3,r17
   4be80:	003ebc06 	br	4b974 <__alt_data_end+0xfffeb974>

0004be84 <__umoddi3>:
   4be84:	defff304 	addi	sp,sp,-52
   4be88:	df000b15 	stw	fp,44(sp)
   4be8c:	dc400415 	stw	r17,16(sp)
   4be90:	dc000315 	stw	r16,12(sp)
   4be94:	dfc00c15 	stw	ra,48(sp)
   4be98:	ddc00a15 	stw	r23,40(sp)
   4be9c:	dd800915 	stw	r22,36(sp)
   4bea0:	dd400815 	stw	r21,32(sp)
   4bea4:	dd000715 	stw	r20,28(sp)
   4bea8:	dcc00615 	stw	r19,24(sp)
   4beac:	dc800515 	stw	r18,20(sp)
   4beb0:	2021883a 	mov	r16,r4
   4beb4:	2823883a 	mov	r17,r5
   4beb8:	2839883a 	mov	fp,r5
   4bebc:	3800401e 	bne	r7,zero,4bfc0 <__umoddi3+0x13c>
   4bec0:	3027883a 	mov	r19,r6
   4bec4:	2029883a 	mov	r20,r4
   4bec8:	2980552e 	bgeu	r5,r6,4c020 <__umoddi3+0x19c>
   4becc:	00bfffd4 	movui	r2,65535
   4bed0:	1180a236 	bltu	r2,r6,4c15c <__umoddi3+0x2d8>
   4bed4:	01003fc4 	movi	r4,255
   4bed8:	2189803a 	cmpltu	r4,r4,r6
   4bedc:	200890fa 	slli	r4,r4,3
   4bee0:	3104d83a 	srl	r2,r6,r4
   4bee4:	00c00174 	movhi	r3,5
   4bee8:	18c5ba04 	addi	r3,r3,5864
   4beec:	1885883a 	add	r2,r3,r2
   4bef0:	10c00003 	ldbu	r3,0(r2)
   4bef4:	00800804 	movi	r2,32
   4bef8:	1909883a 	add	r4,r3,r4
   4befc:	1125c83a 	sub	r18,r2,r4
   4bf00:	90000526 	beq	r18,zero,4bf18 <__umoddi3+0x94>
   4bf04:	8ca2983a 	sll	r17,r17,r18
   4bf08:	8108d83a 	srl	r4,r16,r4
   4bf0c:	34a6983a 	sll	r19,r6,r18
   4bf10:	84a8983a 	sll	r20,r16,r18
   4bf14:	2478b03a 	or	fp,r4,r17
   4bf18:	982cd43a 	srli	r22,r19,16
   4bf1c:	e009883a 	mov	r4,fp
   4bf20:	9dffffcc 	andi	r23,r19,65535
   4bf24:	b00b883a 	mov	r5,r22
   4bf28:	00412c40 	call	412c4 <__umodsi3>
   4bf2c:	b00b883a 	mov	r5,r22
   4bf30:	e009883a 	mov	r4,fp
   4bf34:	102b883a 	mov	r21,r2
   4bf38:	00412600 	call	41260 <__udivsi3>
   4bf3c:	100b883a 	mov	r5,r2
   4bf40:	b809883a 	mov	r4,r23
   4bf44:	004131c0 	call	4131c <__mulsi3>
   4bf48:	a82a943a 	slli	r21,r21,16
   4bf4c:	a006d43a 	srli	r3,r20,16
   4bf50:	1d46b03a 	or	r3,r3,r21
   4bf54:	1880032e 	bgeu	r3,r2,4bf64 <__umoddi3+0xe0>
   4bf58:	1cc7883a 	add	r3,r3,r19
   4bf5c:	1cc00136 	bltu	r3,r19,4bf64 <__umoddi3+0xe0>
   4bf60:	18813136 	bltu	r3,r2,4c428 <__umoddi3+0x5a4>
   4bf64:	18a1c83a 	sub	r16,r3,r2
   4bf68:	b00b883a 	mov	r5,r22
   4bf6c:	8009883a 	mov	r4,r16
   4bf70:	00412c40 	call	412c4 <__umodsi3>
   4bf74:	b00b883a 	mov	r5,r22
   4bf78:	8009883a 	mov	r4,r16
   4bf7c:	1023883a 	mov	r17,r2
   4bf80:	00412600 	call	41260 <__udivsi3>
   4bf84:	100b883a 	mov	r5,r2
   4bf88:	b809883a 	mov	r4,r23
   4bf8c:	8822943a 	slli	r17,r17,16
   4bf90:	004131c0 	call	4131c <__mulsi3>
   4bf94:	a0ffffcc 	andi	r3,r20,65535
   4bf98:	1c46b03a 	or	r3,r3,r17
   4bf9c:	1880042e 	bgeu	r3,r2,4bfb0 <__umoddi3+0x12c>
   4bfa0:	1cc7883a 	add	r3,r3,r19
   4bfa4:	1cc00236 	bltu	r3,r19,4bfb0 <__umoddi3+0x12c>
   4bfa8:	1880012e 	bgeu	r3,r2,4bfb0 <__umoddi3+0x12c>
   4bfac:	1cc7883a 	add	r3,r3,r19
   4bfb0:	1885c83a 	sub	r2,r3,r2
   4bfb4:	1484d83a 	srl	r2,r2,r18
   4bfb8:	0007883a 	mov	r3,zero
   4bfbc:	00005306 	br	4c10c <__umoddi3+0x288>
   4bfc0:	29c05036 	bltu	r5,r7,4c104 <__umoddi3+0x280>
   4bfc4:	00bfffd4 	movui	r2,65535
   4bfc8:	11c05c2e 	bgeu	r2,r7,4c13c <__umoddi3+0x2b8>
   4bfcc:	00804034 	movhi	r2,256
   4bfd0:	10bfffc4 	addi	r2,r2,-1
   4bfd4:	11c10636 	bltu	r2,r7,4c3f0 <__umoddi3+0x56c>
   4bfd8:	01000404 	movi	r4,16
   4bfdc:	3904d83a 	srl	r2,r7,r4
   4bfe0:	00c00174 	movhi	r3,5
   4bfe4:	18c5ba04 	addi	r3,r3,5864
   4bfe8:	1885883a 	add	r2,r3,r2
   4bfec:	14c00003 	ldbu	r19,0(r2)
   4bff0:	00c00804 	movi	r3,32
   4bff4:	9927883a 	add	r19,r19,r4
   4bff8:	1ce9c83a 	sub	r20,r3,r19
   4bffc:	a0005c1e 	bne	r20,zero,4c170 <__umoddi3+0x2ec>
   4c000:	3c400136 	bltu	r7,r17,4c008 <__umoddi3+0x184>
   4c004:	81810a36 	bltu	r16,r6,4c430 <__umoddi3+0x5ac>
   4c008:	8185c83a 	sub	r2,r16,r6
   4c00c:	89e3c83a 	sub	r17,r17,r7
   4c010:	8089803a 	cmpltu	r4,r16,r2
   4c014:	8939c83a 	sub	fp,r17,r4
   4c018:	e007883a 	mov	r3,fp
   4c01c:	00003b06 	br	4c10c <__umoddi3+0x288>
   4c020:	3000041e 	bne	r6,zero,4c034 <__umoddi3+0x1b0>
   4c024:	000b883a 	mov	r5,zero
   4c028:	01000044 	movi	r4,1
   4c02c:	00412600 	call	41260 <__udivsi3>
   4c030:	1027883a 	mov	r19,r2
   4c034:	00bfffd4 	movui	r2,65535
   4c038:	14c0442e 	bgeu	r2,r19,4c14c <__umoddi3+0x2c8>
   4c03c:	00804034 	movhi	r2,256
   4c040:	10bfffc4 	addi	r2,r2,-1
   4c044:	14c0ec36 	bltu	r2,r19,4c3f8 <__umoddi3+0x574>
   4c048:	00800404 	movi	r2,16
   4c04c:	9886d83a 	srl	r3,r19,r2
   4c050:	01000174 	movhi	r4,5
   4c054:	2105ba04 	addi	r4,r4,5864
   4c058:	20c7883a 	add	r3,r4,r3
   4c05c:	18c00003 	ldbu	r3,0(r3)
   4c060:	1887883a 	add	r3,r3,r2
   4c064:	00800804 	movi	r2,32
   4c068:	10e5c83a 	sub	r18,r2,r3
   4c06c:	9000ab1e 	bne	r18,zero,4c31c <__umoddi3+0x498>
   4c070:	982cd43a 	srli	r22,r19,16
   4c074:	8ce3c83a 	sub	r17,r17,r19
   4c078:	9dffffcc 	andi	r23,r19,65535
   4c07c:	b00b883a 	mov	r5,r22
   4c080:	8809883a 	mov	r4,r17
   4c084:	00412c40 	call	412c4 <__umodsi3>
   4c088:	b00b883a 	mov	r5,r22
   4c08c:	8809883a 	mov	r4,r17
   4c090:	102b883a 	mov	r21,r2
   4c094:	00412600 	call	41260 <__udivsi3>
   4c098:	b80b883a 	mov	r5,r23
   4c09c:	1009883a 	mov	r4,r2
   4c0a0:	004131c0 	call	4131c <__mulsi3>
   4c0a4:	a82a943a 	slli	r21,r21,16
   4c0a8:	a006d43a 	srli	r3,r20,16
   4c0ac:	1d46b03a 	or	r3,r3,r21
   4c0b0:	1880042e 	bgeu	r3,r2,4c0c4 <__umoddi3+0x240>
   4c0b4:	1cc7883a 	add	r3,r3,r19
   4c0b8:	1cc00236 	bltu	r3,r19,4c0c4 <__umoddi3+0x240>
   4c0bc:	1880012e 	bgeu	r3,r2,4c0c4 <__umoddi3+0x240>
   4c0c0:	1cc7883a 	add	r3,r3,r19
   4c0c4:	18a1c83a 	sub	r16,r3,r2
   4c0c8:	b00b883a 	mov	r5,r22
   4c0cc:	8009883a 	mov	r4,r16
   4c0d0:	00412c40 	call	412c4 <__umodsi3>
   4c0d4:	1023883a 	mov	r17,r2
   4c0d8:	b00b883a 	mov	r5,r22
   4c0dc:	8009883a 	mov	r4,r16
   4c0e0:	00412600 	call	41260 <__udivsi3>
   4c0e4:	8822943a 	slli	r17,r17,16
   4c0e8:	b80b883a 	mov	r5,r23
   4c0ec:	1009883a 	mov	r4,r2
   4c0f0:	004131c0 	call	4131c <__mulsi3>
   4c0f4:	a53fffcc 	andi	r20,r20,65535
   4c0f8:	a446b03a 	or	r3,r20,r17
   4c0fc:	18bfac2e 	bgeu	r3,r2,4bfb0 <__alt_data_end+0xfffebfb0>
   4c100:	003fa706 	br	4bfa0 <__alt_data_end+0xfffebfa0>
   4c104:	2005883a 	mov	r2,r4
   4c108:	2807883a 	mov	r3,r5
   4c10c:	dfc00c17 	ldw	ra,48(sp)
   4c110:	df000b17 	ldw	fp,44(sp)
   4c114:	ddc00a17 	ldw	r23,40(sp)
   4c118:	dd800917 	ldw	r22,36(sp)
   4c11c:	dd400817 	ldw	r21,32(sp)
   4c120:	dd000717 	ldw	r20,28(sp)
   4c124:	dcc00617 	ldw	r19,24(sp)
   4c128:	dc800517 	ldw	r18,20(sp)
   4c12c:	dc400417 	ldw	r17,16(sp)
   4c130:	dc000317 	ldw	r16,12(sp)
   4c134:	dec00d04 	addi	sp,sp,52
   4c138:	f800283a 	ret
   4c13c:	04c03fc4 	movi	r19,255
   4c140:	99c9803a 	cmpltu	r4,r19,r7
   4c144:	200890fa 	slli	r4,r4,3
   4c148:	003fa406 	br	4bfdc <__alt_data_end+0xfffebfdc>
   4c14c:	00803fc4 	movi	r2,255
   4c150:	14c5803a 	cmpltu	r2,r2,r19
   4c154:	100490fa 	slli	r2,r2,3
   4c158:	003fbc06 	br	4c04c <__alt_data_end+0xfffec04c>
   4c15c:	00804034 	movhi	r2,256
   4c160:	10bfffc4 	addi	r2,r2,-1
   4c164:	1180a636 	bltu	r2,r6,4c400 <__umoddi3+0x57c>
   4c168:	01000404 	movi	r4,16
   4c16c:	003f5c06 	br	4bee0 <__alt_data_end+0xfffebee0>
   4c170:	3d0e983a 	sll	r7,r7,r20
   4c174:	34ead83a 	srl	r21,r6,r19
   4c178:	8cc6d83a 	srl	r3,r17,r19
   4c17c:	8d10983a 	sll	r8,r17,r20
   4c180:	3d6ab03a 	or	r21,r7,r21
   4c184:	a82cd43a 	srli	r22,r21,16
   4c188:	84e2d83a 	srl	r17,r16,r19
   4c18c:	1809883a 	mov	r4,r3
   4c190:	b00b883a 	mov	r5,r22
   4c194:	8a22b03a 	or	r17,r17,r8
   4c198:	3524983a 	sll	r18,r6,r20
   4c19c:	dc400015 	stw	r17,0(sp)
   4c1a0:	d8c00115 	stw	r3,4(sp)
   4c1a4:	00412c40 	call	412c4 <__umodsi3>
   4c1a8:	d8c00117 	ldw	r3,4(sp)
   4c1ac:	b00b883a 	mov	r5,r22
   4c1b0:	1039883a 	mov	fp,r2
   4c1b4:	1809883a 	mov	r4,r3
   4c1b8:	00412600 	call	41260 <__udivsi3>
   4c1bc:	adffffcc 	andi	r23,r21,65535
   4c1c0:	100b883a 	mov	r5,r2
   4c1c4:	b809883a 	mov	r4,r23
   4c1c8:	1023883a 	mov	r17,r2
   4c1cc:	004131c0 	call	4131c <__mulsi3>
   4c1d0:	d9400017 	ldw	r5,0(sp)
   4c1d4:	e008943a 	slli	r4,fp,16
   4c1d8:	8520983a 	sll	r16,r16,r20
   4c1dc:	2806d43a 	srli	r3,r5,16
   4c1e0:	1906b03a 	or	r3,r3,r4
   4c1e4:	1880042e 	bgeu	r3,r2,4c1f8 <__umoddi3+0x374>
   4c1e8:	1d47883a 	add	r3,r3,r21
   4c1ec:	893fffc4 	addi	r4,r17,-1
   4c1f0:	1d40892e 	bgeu	r3,r21,4c418 <__umoddi3+0x594>
   4c1f4:	2023883a 	mov	r17,r4
   4c1f8:	18b9c83a 	sub	fp,r3,r2
   4c1fc:	b00b883a 	mov	r5,r22
   4c200:	e009883a 	mov	r4,fp
   4c204:	00412c40 	call	412c4 <__umodsi3>
   4c208:	b00b883a 	mov	r5,r22
   4c20c:	e009883a 	mov	r4,fp
   4c210:	d8800215 	stw	r2,8(sp)
   4c214:	00412600 	call	41260 <__udivsi3>
   4c218:	100b883a 	mov	r5,r2
   4c21c:	b809883a 	mov	r4,r23
   4c220:	102d883a 	mov	r22,r2
   4c224:	004131c0 	call	4131c <__mulsi3>
   4c228:	d9800217 	ldw	r6,8(sp)
   4c22c:	d8c00017 	ldw	r3,0(sp)
   4c230:	300c943a 	slli	r6,r6,16
   4c234:	1a3fffcc 	andi	r8,r3,65535
   4c238:	4190b03a 	or	r8,r8,r6
   4c23c:	4080042e 	bgeu	r8,r2,4c250 <__umoddi3+0x3cc>
   4c240:	4551883a 	add	r8,r8,r21
   4c244:	b0ffffc4 	addi	r3,r22,-1
   4c248:	45406f2e 	bgeu	r8,r21,4c408 <__umoddi3+0x584>
   4c24c:	182d883a 	mov	r22,r3
   4c250:	880e943a 	slli	r7,r17,16
   4c254:	9006d43a 	srli	r3,r18,16
   4c258:	91bfffcc 	andi	r6,r18,65535
   4c25c:	3dacb03a 	or	r22,r7,r22
   4c260:	b02ed43a 	srli	r23,r22,16
   4c264:	b5bfffcc 	andi	r22,r22,65535
   4c268:	300b883a 	mov	r5,r6
   4c26c:	b009883a 	mov	r4,r22
   4c270:	40a3c83a 	sub	r17,r8,r2
   4c274:	d8c00115 	stw	r3,4(sp)
   4c278:	d9800215 	stw	r6,8(sp)
   4c27c:	004131c0 	call	4131c <__mulsi3>
   4c280:	d9800217 	ldw	r6,8(sp)
   4c284:	b809883a 	mov	r4,r23
   4c288:	1039883a 	mov	fp,r2
   4c28c:	300b883a 	mov	r5,r6
   4c290:	004131c0 	call	4131c <__mulsi3>
   4c294:	d8c00117 	ldw	r3,4(sp)
   4c298:	b809883a 	mov	r4,r23
   4c29c:	d8800215 	stw	r2,8(sp)
   4c2a0:	180b883a 	mov	r5,r3
   4c2a4:	004131c0 	call	4131c <__mulsi3>
   4c2a8:	d8c00117 	ldw	r3,4(sp)
   4c2ac:	b009883a 	mov	r4,r22
   4c2b0:	102f883a 	mov	r23,r2
   4c2b4:	180b883a 	mov	r5,r3
   4c2b8:	004131c0 	call	4131c <__mulsi3>
   4c2bc:	d9800217 	ldw	r6,8(sp)
   4c2c0:	e006d43a 	srli	r3,fp,16
   4c2c4:	1185883a 	add	r2,r2,r6
   4c2c8:	1885883a 	add	r2,r3,r2
   4c2cc:	1180022e 	bgeu	r2,r6,4c2d8 <__umoddi3+0x454>
   4c2d0:	00c00074 	movhi	r3,1
   4c2d4:	b8ef883a 	add	r23,r23,r3
   4c2d8:	1006d43a 	srli	r3,r2,16
   4c2dc:	1004943a 	slli	r2,r2,16
   4c2e0:	e73fffcc 	andi	fp,fp,65535
   4c2e4:	1dc7883a 	add	r3,r3,r23
   4c2e8:	1739883a 	add	fp,r2,fp
   4c2ec:	88c03a36 	bltu	r17,r3,4c3d8 <__umoddi3+0x554>
   4c2f0:	88c05126 	beq	r17,r3,4c438 <__umoddi3+0x5b4>
   4c2f4:	88c9c83a 	sub	r4,r17,r3
   4c2f8:	e00f883a 	mov	r7,fp
   4c2fc:	81cfc83a 	sub	r7,r16,r7
   4c300:	81c7803a 	cmpltu	r3,r16,r7
   4c304:	20c7c83a 	sub	r3,r4,r3
   4c308:	1cc4983a 	sll	r2,r3,r19
   4c30c:	3d0ed83a 	srl	r7,r7,r20
   4c310:	1d06d83a 	srl	r3,r3,r20
   4c314:	11c4b03a 	or	r2,r2,r7
   4c318:	003f7c06 	br	4c10c <__alt_data_end+0xfffec10c>
   4c31c:	9ca6983a 	sll	r19,r19,r18
   4c320:	88f8d83a 	srl	fp,r17,r3
   4c324:	80c4d83a 	srl	r2,r16,r3
   4c328:	982cd43a 	srli	r22,r19,16
   4c32c:	8ca2983a 	sll	r17,r17,r18
   4c330:	e009883a 	mov	r4,fp
   4c334:	b00b883a 	mov	r5,r22
   4c338:	146ab03a 	or	r21,r2,r17
   4c33c:	00412c40 	call	412c4 <__umodsi3>
   4c340:	b00b883a 	mov	r5,r22
   4c344:	e009883a 	mov	r4,fp
   4c348:	1029883a 	mov	r20,r2
   4c34c:	9dffffcc 	andi	r23,r19,65535
   4c350:	00412600 	call	41260 <__udivsi3>
   4c354:	b809883a 	mov	r4,r23
   4c358:	100b883a 	mov	r5,r2
   4c35c:	004131c0 	call	4131c <__mulsi3>
   4c360:	a008943a 	slli	r4,r20,16
   4c364:	a806d43a 	srli	r3,r21,16
   4c368:	84a8983a 	sll	r20,r16,r18
   4c36c:	1906b03a 	or	r3,r3,r4
   4c370:	1880042e 	bgeu	r3,r2,4c384 <__umoddi3+0x500>
   4c374:	1cc7883a 	add	r3,r3,r19
   4c378:	1cc00236 	bltu	r3,r19,4c384 <__umoddi3+0x500>
   4c37c:	1880012e 	bgeu	r3,r2,4c384 <__umoddi3+0x500>
   4c380:	1cc7883a 	add	r3,r3,r19
   4c384:	18a3c83a 	sub	r17,r3,r2
   4c388:	b00b883a 	mov	r5,r22
   4c38c:	8809883a 	mov	r4,r17
   4c390:	00412c40 	call	412c4 <__umodsi3>
   4c394:	b00b883a 	mov	r5,r22
   4c398:	8809883a 	mov	r4,r17
   4c39c:	1021883a 	mov	r16,r2
   4c3a0:	00412600 	call	41260 <__udivsi3>
   4c3a4:	100b883a 	mov	r5,r2
   4c3a8:	b809883a 	mov	r4,r23
   4c3ac:	8020943a 	slli	r16,r16,16
   4c3b0:	004131c0 	call	4131c <__mulsi3>
   4c3b4:	a8ffffcc 	andi	r3,r21,65535
   4c3b8:	1c06b03a 	or	r3,r3,r16
   4c3bc:	1880042e 	bgeu	r3,r2,4c3d0 <__umoddi3+0x54c>
   4c3c0:	1cc7883a 	add	r3,r3,r19
   4c3c4:	1cc00236 	bltu	r3,r19,4c3d0 <__umoddi3+0x54c>
   4c3c8:	1880012e 	bgeu	r3,r2,4c3d0 <__umoddi3+0x54c>
   4c3cc:	1cc7883a 	add	r3,r3,r19
   4c3d0:	18a3c83a 	sub	r17,r3,r2
   4c3d4:	003f2906 	br	4c07c <__alt_data_end+0xfffec07c>
   4c3d8:	e48fc83a 	sub	r7,fp,r18
   4c3dc:	1d49c83a 	sub	r4,r3,r21
   4c3e0:	e1f9803a 	cmpltu	fp,fp,r7
   4c3e4:	2739c83a 	sub	fp,r4,fp
   4c3e8:	8f09c83a 	sub	r4,r17,fp
   4c3ec:	003fc306 	br	4c2fc <__alt_data_end+0xfffec2fc>
   4c3f0:	01000604 	movi	r4,24
   4c3f4:	003ef906 	br	4bfdc <__alt_data_end+0xfffebfdc>
   4c3f8:	00800604 	movi	r2,24
   4c3fc:	003f1306 	br	4c04c <__alt_data_end+0xfffec04c>
   4c400:	01000604 	movi	r4,24
   4c404:	003eb606 	br	4bee0 <__alt_data_end+0xfffebee0>
   4c408:	40bf902e 	bgeu	r8,r2,4c24c <__alt_data_end+0xfffec24c>
   4c40c:	b5bfff84 	addi	r22,r22,-2
   4c410:	4551883a 	add	r8,r8,r21
   4c414:	003f8e06 	br	4c250 <__alt_data_end+0xfffec250>
   4c418:	18bf762e 	bgeu	r3,r2,4c1f4 <__alt_data_end+0xfffec1f4>
   4c41c:	8c7fff84 	addi	r17,r17,-2
   4c420:	1d47883a 	add	r3,r3,r21
   4c424:	003f7406 	br	4c1f8 <__alt_data_end+0xfffec1f8>
   4c428:	1cc7883a 	add	r3,r3,r19
   4c42c:	003ecd06 	br	4bf64 <__alt_data_end+0xfffebf64>
   4c430:	8005883a 	mov	r2,r16
   4c434:	003ef806 	br	4c018 <__alt_data_end+0xfffec018>
   4c438:	873fe736 	bltu	r16,fp,4c3d8 <__alt_data_end+0xfffec3d8>
   4c43c:	e00f883a 	mov	r7,fp
   4c440:	0009883a 	mov	r4,zero
   4c444:	003fad06 	br	4c2fc <__alt_data_end+0xfffec2fc>

0004c448 <__adddf3>:
   4c448:	02c00434 	movhi	r11,16
   4c44c:	5affffc4 	addi	r11,r11,-1
   4c450:	2806d7fa 	srli	r3,r5,31
   4c454:	2ad4703a 	and	r10,r5,r11
   4c458:	3ad2703a 	and	r9,r7,r11
   4c45c:	3804d53a 	srli	r2,r7,20
   4c460:	3018d77a 	srli	r12,r6,29
   4c464:	280ad53a 	srli	r5,r5,20
   4c468:	501490fa 	slli	r10,r10,3
   4c46c:	2010d77a 	srli	r8,r4,29
   4c470:	481290fa 	slli	r9,r9,3
   4c474:	380ed7fa 	srli	r7,r7,31
   4c478:	defffb04 	addi	sp,sp,-20
   4c47c:	dc800215 	stw	r18,8(sp)
   4c480:	dc400115 	stw	r17,4(sp)
   4c484:	dc000015 	stw	r16,0(sp)
   4c488:	dfc00415 	stw	ra,16(sp)
   4c48c:	dcc00315 	stw	r19,12(sp)
   4c490:	1c803fcc 	andi	r18,r3,255
   4c494:	2c01ffcc 	andi	r16,r5,2047
   4c498:	5210b03a 	or	r8,r10,r8
   4c49c:	202290fa 	slli	r17,r4,3
   4c4a0:	1081ffcc 	andi	r2,r2,2047
   4c4a4:	4b12b03a 	or	r9,r9,r12
   4c4a8:	300c90fa 	slli	r6,r6,3
   4c4ac:	91c07526 	beq	r18,r7,4c684 <__adddf3+0x23c>
   4c4b0:	8087c83a 	sub	r3,r16,r2
   4c4b4:	00c0ab0e 	bge	zero,r3,4c764 <__adddf3+0x31c>
   4c4b8:	10002a1e 	bne	r2,zero,4c564 <__adddf3+0x11c>
   4c4bc:	4984b03a 	or	r2,r9,r6
   4c4c0:	1000961e 	bne	r2,zero,4c71c <__adddf3+0x2d4>
   4c4c4:	888001cc 	andi	r2,r17,7
   4c4c8:	10000726 	beq	r2,zero,4c4e8 <__adddf3+0xa0>
   4c4cc:	888003cc 	andi	r2,r17,15
   4c4d0:	00c00104 	movi	r3,4
   4c4d4:	10c00426 	beq	r2,r3,4c4e8 <__adddf3+0xa0>
   4c4d8:	88c7883a 	add	r3,r17,r3
   4c4dc:	1c63803a 	cmpltu	r17,r3,r17
   4c4e0:	4451883a 	add	r8,r8,r17
   4c4e4:	1823883a 	mov	r17,r3
   4c4e8:	4080202c 	andhi	r2,r8,128
   4c4ec:	10005926 	beq	r2,zero,4c654 <__adddf3+0x20c>
   4c4f0:	84000044 	addi	r16,r16,1
   4c4f4:	0081ffc4 	movi	r2,2047
   4c4f8:	8080ba26 	beq	r16,r2,4c7e4 <__adddf3+0x39c>
   4c4fc:	00bfe034 	movhi	r2,65408
   4c500:	10bfffc4 	addi	r2,r2,-1
   4c504:	4090703a 	and	r8,r8,r2
   4c508:	4004977a 	slli	r2,r8,29
   4c50c:	4010927a 	slli	r8,r8,9
   4c510:	8822d0fa 	srli	r17,r17,3
   4c514:	8401ffcc 	andi	r16,r16,2047
   4c518:	4010d33a 	srli	r8,r8,12
   4c51c:	9007883a 	mov	r3,r18
   4c520:	1444b03a 	or	r2,r2,r17
   4c524:	8401ffcc 	andi	r16,r16,2047
   4c528:	8020953a 	slli	r16,r16,20
   4c52c:	18c03fcc 	andi	r3,r3,255
   4c530:	01000434 	movhi	r4,16
   4c534:	213fffc4 	addi	r4,r4,-1
   4c538:	180697fa 	slli	r3,r3,31
   4c53c:	4110703a 	and	r8,r8,r4
   4c540:	4410b03a 	or	r8,r8,r16
   4c544:	40c6b03a 	or	r3,r8,r3
   4c548:	dfc00417 	ldw	ra,16(sp)
   4c54c:	dcc00317 	ldw	r19,12(sp)
   4c550:	dc800217 	ldw	r18,8(sp)
   4c554:	dc400117 	ldw	r17,4(sp)
   4c558:	dc000017 	ldw	r16,0(sp)
   4c55c:	dec00504 	addi	sp,sp,20
   4c560:	f800283a 	ret
   4c564:	0081ffc4 	movi	r2,2047
   4c568:	80bfd626 	beq	r16,r2,4c4c4 <__alt_data_end+0xfffec4c4>
   4c56c:	4a402034 	orhi	r9,r9,128
   4c570:	00800e04 	movi	r2,56
   4c574:	10c09f16 	blt	r2,r3,4c7f4 <__adddf3+0x3ac>
   4c578:	008007c4 	movi	r2,31
   4c57c:	10c0c216 	blt	r2,r3,4c888 <__adddf3+0x440>
   4c580:	00800804 	movi	r2,32
   4c584:	10c5c83a 	sub	r2,r2,r3
   4c588:	488a983a 	sll	r5,r9,r2
   4c58c:	30c8d83a 	srl	r4,r6,r3
   4c590:	3084983a 	sll	r2,r6,r2
   4c594:	48c6d83a 	srl	r3,r9,r3
   4c598:	290cb03a 	or	r6,r5,r4
   4c59c:	1004c03a 	cmpne	r2,r2,zero
   4c5a0:	308cb03a 	or	r6,r6,r2
   4c5a4:	898dc83a 	sub	r6,r17,r6
   4c5a8:	89a3803a 	cmpltu	r17,r17,r6
   4c5ac:	40d1c83a 	sub	r8,r8,r3
   4c5b0:	4451c83a 	sub	r8,r8,r17
   4c5b4:	3023883a 	mov	r17,r6
   4c5b8:	4080202c 	andhi	r2,r8,128
   4c5bc:	10002326 	beq	r2,zero,4c64c <__adddf3+0x204>
   4c5c0:	04c02034 	movhi	r19,128
   4c5c4:	9cffffc4 	addi	r19,r19,-1
   4c5c8:	44e6703a 	and	r19,r8,r19
   4c5cc:	98007626 	beq	r19,zero,4c7a8 <__adddf3+0x360>
   4c5d0:	9809883a 	mov	r4,r19
   4c5d4:	00411040 	call	41104 <__clzsi2>
   4c5d8:	10fffe04 	addi	r3,r2,-8
   4c5dc:	010007c4 	movi	r4,31
   4c5e0:	20c07716 	blt	r4,r3,4c7c0 <__adddf3+0x378>
   4c5e4:	00800804 	movi	r2,32
   4c5e8:	10c5c83a 	sub	r2,r2,r3
   4c5ec:	8884d83a 	srl	r2,r17,r2
   4c5f0:	98d0983a 	sll	r8,r19,r3
   4c5f4:	88e2983a 	sll	r17,r17,r3
   4c5f8:	1204b03a 	or	r2,r2,r8
   4c5fc:	1c007416 	blt	r3,r16,4c7d0 <__adddf3+0x388>
   4c600:	1c21c83a 	sub	r16,r3,r16
   4c604:	82000044 	addi	r8,r16,1
   4c608:	00c007c4 	movi	r3,31
   4c60c:	1a009116 	blt	r3,r8,4c854 <__adddf3+0x40c>
   4c610:	00c00804 	movi	r3,32
   4c614:	1a07c83a 	sub	r3,r3,r8
   4c618:	8a08d83a 	srl	r4,r17,r8
   4c61c:	88e2983a 	sll	r17,r17,r3
   4c620:	10c6983a 	sll	r3,r2,r3
   4c624:	1210d83a 	srl	r8,r2,r8
   4c628:	8804c03a 	cmpne	r2,r17,zero
   4c62c:	1906b03a 	or	r3,r3,r4
   4c630:	18a2b03a 	or	r17,r3,r2
   4c634:	0021883a 	mov	r16,zero
   4c638:	003fa206 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c63c:	1890b03a 	or	r8,r3,r2
   4c640:	40017d26 	beq	r8,zero,4cc38 <__adddf3+0x7f0>
   4c644:	1011883a 	mov	r8,r2
   4c648:	1823883a 	mov	r17,r3
   4c64c:	888001cc 	andi	r2,r17,7
   4c650:	103f9e1e 	bne	r2,zero,4c4cc <__alt_data_end+0xfffec4cc>
   4c654:	4004977a 	slli	r2,r8,29
   4c658:	8822d0fa 	srli	r17,r17,3
   4c65c:	4010d0fa 	srli	r8,r8,3
   4c660:	9007883a 	mov	r3,r18
   4c664:	1444b03a 	or	r2,r2,r17
   4c668:	0101ffc4 	movi	r4,2047
   4c66c:	81002426 	beq	r16,r4,4c700 <__adddf3+0x2b8>
   4c670:	8120703a 	and	r16,r16,r4
   4c674:	01000434 	movhi	r4,16
   4c678:	213fffc4 	addi	r4,r4,-1
   4c67c:	4110703a 	and	r8,r8,r4
   4c680:	003fa806 	br	4c524 <__alt_data_end+0xfffec524>
   4c684:	8089c83a 	sub	r4,r16,r2
   4c688:	01005e0e 	bge	zero,r4,4c804 <__adddf3+0x3bc>
   4c68c:	10002b26 	beq	r2,zero,4c73c <__adddf3+0x2f4>
   4c690:	0081ffc4 	movi	r2,2047
   4c694:	80bf8b26 	beq	r16,r2,4c4c4 <__alt_data_end+0xfffec4c4>
   4c698:	4a402034 	orhi	r9,r9,128
   4c69c:	00800e04 	movi	r2,56
   4c6a0:	1100a40e 	bge	r2,r4,4c934 <__adddf3+0x4ec>
   4c6a4:	498cb03a 	or	r6,r9,r6
   4c6a8:	300ac03a 	cmpne	r5,r6,zero
   4c6ac:	0013883a 	mov	r9,zero
   4c6b0:	2c4b883a 	add	r5,r5,r17
   4c6b4:	2c63803a 	cmpltu	r17,r5,r17
   4c6b8:	4a11883a 	add	r8,r9,r8
   4c6bc:	8a11883a 	add	r8,r17,r8
   4c6c0:	2823883a 	mov	r17,r5
   4c6c4:	4080202c 	andhi	r2,r8,128
   4c6c8:	103fe026 	beq	r2,zero,4c64c <__alt_data_end+0xfffec64c>
   4c6cc:	84000044 	addi	r16,r16,1
   4c6d0:	0081ffc4 	movi	r2,2047
   4c6d4:	8080d226 	beq	r16,r2,4ca20 <__adddf3+0x5d8>
   4c6d8:	00bfe034 	movhi	r2,65408
   4c6dc:	10bfffc4 	addi	r2,r2,-1
   4c6e0:	4090703a 	and	r8,r8,r2
   4c6e4:	880ad07a 	srli	r5,r17,1
   4c6e8:	400897fa 	slli	r4,r8,31
   4c6ec:	88c0004c 	andi	r3,r17,1
   4c6f0:	28e2b03a 	or	r17,r5,r3
   4c6f4:	4010d07a 	srli	r8,r8,1
   4c6f8:	2462b03a 	or	r17,r4,r17
   4c6fc:	003f7106 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c700:	4088b03a 	or	r4,r8,r2
   4c704:	20014526 	beq	r4,zero,4cc1c <__adddf3+0x7d4>
   4c708:	01000434 	movhi	r4,16
   4c70c:	42000234 	orhi	r8,r8,8
   4c710:	213fffc4 	addi	r4,r4,-1
   4c714:	4110703a 	and	r8,r8,r4
   4c718:	003f8206 	br	4c524 <__alt_data_end+0xfffec524>
   4c71c:	18ffffc4 	addi	r3,r3,-1
   4c720:	1800491e 	bne	r3,zero,4c848 <__adddf3+0x400>
   4c724:	898bc83a 	sub	r5,r17,r6
   4c728:	8963803a 	cmpltu	r17,r17,r5
   4c72c:	4251c83a 	sub	r8,r8,r9
   4c730:	4451c83a 	sub	r8,r8,r17
   4c734:	2823883a 	mov	r17,r5
   4c738:	003f9f06 	br	4c5b8 <__alt_data_end+0xfffec5b8>
   4c73c:	4984b03a 	or	r2,r9,r6
   4c740:	103f6026 	beq	r2,zero,4c4c4 <__alt_data_end+0xfffec4c4>
   4c744:	213fffc4 	addi	r4,r4,-1
   4c748:	2000931e 	bne	r4,zero,4c998 <__adddf3+0x550>
   4c74c:	898d883a 	add	r6,r17,r6
   4c750:	3463803a 	cmpltu	r17,r6,r17
   4c754:	4251883a 	add	r8,r8,r9
   4c758:	8a11883a 	add	r8,r17,r8
   4c75c:	3023883a 	mov	r17,r6
   4c760:	003fd806 	br	4c6c4 <__alt_data_end+0xfffec6c4>
   4c764:	1800541e 	bne	r3,zero,4c8b8 <__adddf3+0x470>
   4c768:	80800044 	addi	r2,r16,1
   4c76c:	1081ffcc 	andi	r2,r2,2047
   4c770:	00c00044 	movi	r3,1
   4c774:	1880a00e 	bge	r3,r2,4c9f8 <__adddf3+0x5b0>
   4c778:	8989c83a 	sub	r4,r17,r6
   4c77c:	8905803a 	cmpltu	r2,r17,r4
   4c780:	4267c83a 	sub	r19,r8,r9
   4c784:	98a7c83a 	sub	r19,r19,r2
   4c788:	9880202c 	andhi	r2,r19,128
   4c78c:	10006326 	beq	r2,zero,4c91c <__adddf3+0x4d4>
   4c790:	3463c83a 	sub	r17,r6,r17
   4c794:	4a07c83a 	sub	r3,r9,r8
   4c798:	344d803a 	cmpltu	r6,r6,r17
   4c79c:	19a7c83a 	sub	r19,r3,r6
   4c7a0:	3825883a 	mov	r18,r7
   4c7a4:	983f8a1e 	bne	r19,zero,4c5d0 <__alt_data_end+0xfffec5d0>
   4c7a8:	8809883a 	mov	r4,r17
   4c7ac:	00411040 	call	41104 <__clzsi2>
   4c7b0:	10800804 	addi	r2,r2,32
   4c7b4:	10fffe04 	addi	r3,r2,-8
   4c7b8:	010007c4 	movi	r4,31
   4c7bc:	20ff890e 	bge	r4,r3,4c5e4 <__alt_data_end+0xfffec5e4>
   4c7c0:	10bff604 	addi	r2,r2,-40
   4c7c4:	8884983a 	sll	r2,r17,r2
   4c7c8:	0023883a 	mov	r17,zero
   4c7cc:	1c3f8c0e 	bge	r3,r16,4c600 <__alt_data_end+0xfffec600>
   4c7d0:	023fe034 	movhi	r8,65408
   4c7d4:	423fffc4 	addi	r8,r8,-1
   4c7d8:	80e1c83a 	sub	r16,r16,r3
   4c7dc:	1210703a 	and	r8,r2,r8
   4c7e0:	003f3806 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c7e4:	9007883a 	mov	r3,r18
   4c7e8:	0011883a 	mov	r8,zero
   4c7ec:	0005883a 	mov	r2,zero
   4c7f0:	003f4c06 	br	4c524 <__alt_data_end+0xfffec524>
   4c7f4:	498cb03a 	or	r6,r9,r6
   4c7f8:	300cc03a 	cmpne	r6,r6,zero
   4c7fc:	0007883a 	mov	r3,zero
   4c800:	003f6806 	br	4c5a4 <__alt_data_end+0xfffec5a4>
   4c804:	20009c1e 	bne	r4,zero,4ca78 <__adddf3+0x630>
   4c808:	80800044 	addi	r2,r16,1
   4c80c:	1141ffcc 	andi	r5,r2,2047
   4c810:	01000044 	movi	r4,1
   4c814:	2140670e 	bge	r4,r5,4c9b4 <__adddf3+0x56c>
   4c818:	0101ffc4 	movi	r4,2047
   4c81c:	11007f26 	beq	r2,r4,4ca1c <__adddf3+0x5d4>
   4c820:	898d883a 	add	r6,r17,r6
   4c824:	4247883a 	add	r3,r8,r9
   4c828:	3451803a 	cmpltu	r8,r6,r17
   4c82c:	40d1883a 	add	r8,r8,r3
   4c830:	402297fa 	slli	r17,r8,31
   4c834:	300cd07a 	srli	r6,r6,1
   4c838:	4010d07a 	srli	r8,r8,1
   4c83c:	1021883a 	mov	r16,r2
   4c840:	89a2b03a 	or	r17,r17,r6
   4c844:	003f1f06 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c848:	0081ffc4 	movi	r2,2047
   4c84c:	80bf481e 	bne	r16,r2,4c570 <__alt_data_end+0xfffec570>
   4c850:	003f1c06 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c854:	843ff844 	addi	r16,r16,-31
   4c858:	01000804 	movi	r4,32
   4c85c:	1406d83a 	srl	r3,r2,r16
   4c860:	41005026 	beq	r8,r4,4c9a4 <__adddf3+0x55c>
   4c864:	01001004 	movi	r4,64
   4c868:	2211c83a 	sub	r8,r4,r8
   4c86c:	1204983a 	sll	r2,r2,r8
   4c870:	88a2b03a 	or	r17,r17,r2
   4c874:	8822c03a 	cmpne	r17,r17,zero
   4c878:	1c62b03a 	or	r17,r3,r17
   4c87c:	0011883a 	mov	r8,zero
   4c880:	0021883a 	mov	r16,zero
   4c884:	003f7106 	br	4c64c <__alt_data_end+0xfffec64c>
   4c888:	193ff804 	addi	r4,r3,-32
   4c88c:	00800804 	movi	r2,32
   4c890:	4908d83a 	srl	r4,r9,r4
   4c894:	18804526 	beq	r3,r2,4c9ac <__adddf3+0x564>
   4c898:	00801004 	movi	r2,64
   4c89c:	10c5c83a 	sub	r2,r2,r3
   4c8a0:	4886983a 	sll	r3,r9,r2
   4c8a4:	198cb03a 	or	r6,r3,r6
   4c8a8:	300cc03a 	cmpne	r6,r6,zero
   4c8ac:	218cb03a 	or	r6,r4,r6
   4c8b0:	0007883a 	mov	r3,zero
   4c8b4:	003f3b06 	br	4c5a4 <__alt_data_end+0xfffec5a4>
   4c8b8:	80002a26 	beq	r16,zero,4c964 <__adddf3+0x51c>
   4c8bc:	0101ffc4 	movi	r4,2047
   4c8c0:	11006826 	beq	r2,r4,4ca64 <__adddf3+0x61c>
   4c8c4:	00c7c83a 	sub	r3,zero,r3
   4c8c8:	42002034 	orhi	r8,r8,128
   4c8cc:	01000e04 	movi	r4,56
   4c8d0:	20c07c16 	blt	r4,r3,4cac4 <__adddf3+0x67c>
   4c8d4:	010007c4 	movi	r4,31
   4c8d8:	20c0da16 	blt	r4,r3,4cc44 <__adddf3+0x7fc>
   4c8dc:	01000804 	movi	r4,32
   4c8e0:	20c9c83a 	sub	r4,r4,r3
   4c8e4:	4114983a 	sll	r10,r8,r4
   4c8e8:	88cad83a 	srl	r5,r17,r3
   4c8ec:	8908983a 	sll	r4,r17,r4
   4c8f0:	40c6d83a 	srl	r3,r8,r3
   4c8f4:	5162b03a 	or	r17,r10,r5
   4c8f8:	2008c03a 	cmpne	r4,r4,zero
   4c8fc:	8922b03a 	or	r17,r17,r4
   4c900:	3463c83a 	sub	r17,r6,r17
   4c904:	48c7c83a 	sub	r3,r9,r3
   4c908:	344d803a 	cmpltu	r6,r6,r17
   4c90c:	1991c83a 	sub	r8,r3,r6
   4c910:	1021883a 	mov	r16,r2
   4c914:	3825883a 	mov	r18,r7
   4c918:	003f2706 	br	4c5b8 <__alt_data_end+0xfffec5b8>
   4c91c:	24d0b03a 	or	r8,r4,r19
   4c920:	40001b1e 	bne	r8,zero,4c990 <__adddf3+0x548>
   4c924:	0005883a 	mov	r2,zero
   4c928:	0007883a 	mov	r3,zero
   4c92c:	0021883a 	mov	r16,zero
   4c930:	003f4d06 	br	4c668 <__alt_data_end+0xfffec668>
   4c934:	008007c4 	movi	r2,31
   4c938:	11003c16 	blt	r2,r4,4ca2c <__adddf3+0x5e4>
   4c93c:	00800804 	movi	r2,32
   4c940:	1105c83a 	sub	r2,r2,r4
   4c944:	488e983a 	sll	r7,r9,r2
   4c948:	310ad83a 	srl	r5,r6,r4
   4c94c:	3084983a 	sll	r2,r6,r2
   4c950:	4912d83a 	srl	r9,r9,r4
   4c954:	394ab03a 	or	r5,r7,r5
   4c958:	1004c03a 	cmpne	r2,r2,zero
   4c95c:	288ab03a 	or	r5,r5,r2
   4c960:	003f5306 	br	4c6b0 <__alt_data_end+0xfffec6b0>
   4c964:	4448b03a 	or	r4,r8,r17
   4c968:	20003e26 	beq	r4,zero,4ca64 <__adddf3+0x61c>
   4c96c:	00c6303a 	nor	r3,zero,r3
   4c970:	18003a1e 	bne	r3,zero,4ca5c <__adddf3+0x614>
   4c974:	3463c83a 	sub	r17,r6,r17
   4c978:	4a07c83a 	sub	r3,r9,r8
   4c97c:	344d803a 	cmpltu	r6,r6,r17
   4c980:	1991c83a 	sub	r8,r3,r6
   4c984:	1021883a 	mov	r16,r2
   4c988:	3825883a 	mov	r18,r7
   4c98c:	003f0a06 	br	4c5b8 <__alt_data_end+0xfffec5b8>
   4c990:	2023883a 	mov	r17,r4
   4c994:	003f0d06 	br	4c5cc <__alt_data_end+0xfffec5cc>
   4c998:	0081ffc4 	movi	r2,2047
   4c99c:	80bf3f1e 	bne	r16,r2,4c69c <__alt_data_end+0xfffec69c>
   4c9a0:	003ec806 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c9a4:	0005883a 	mov	r2,zero
   4c9a8:	003fb106 	br	4c870 <__alt_data_end+0xfffec870>
   4c9ac:	0007883a 	mov	r3,zero
   4c9b0:	003fbc06 	br	4c8a4 <__alt_data_end+0xfffec8a4>
   4c9b4:	4444b03a 	or	r2,r8,r17
   4c9b8:	8000871e 	bne	r16,zero,4cbd8 <__adddf3+0x790>
   4c9bc:	1000ba26 	beq	r2,zero,4cca8 <__adddf3+0x860>
   4c9c0:	4984b03a 	or	r2,r9,r6
   4c9c4:	103ebf26 	beq	r2,zero,4c4c4 <__alt_data_end+0xfffec4c4>
   4c9c8:	8985883a 	add	r2,r17,r6
   4c9cc:	4247883a 	add	r3,r8,r9
   4c9d0:	1451803a 	cmpltu	r8,r2,r17
   4c9d4:	40d1883a 	add	r8,r8,r3
   4c9d8:	40c0202c 	andhi	r3,r8,128
   4c9dc:	1023883a 	mov	r17,r2
   4c9e0:	183f1a26 	beq	r3,zero,4c64c <__alt_data_end+0xfffec64c>
   4c9e4:	00bfe034 	movhi	r2,65408
   4c9e8:	10bfffc4 	addi	r2,r2,-1
   4c9ec:	2021883a 	mov	r16,r4
   4c9f0:	4090703a 	and	r8,r8,r2
   4c9f4:	003eb306 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4c9f8:	4444b03a 	or	r2,r8,r17
   4c9fc:	8000291e 	bne	r16,zero,4caa4 <__adddf3+0x65c>
   4ca00:	10004b1e 	bne	r2,zero,4cb30 <__adddf3+0x6e8>
   4ca04:	4990b03a 	or	r8,r9,r6
   4ca08:	40008b26 	beq	r8,zero,4cc38 <__adddf3+0x7f0>
   4ca0c:	4811883a 	mov	r8,r9
   4ca10:	3023883a 	mov	r17,r6
   4ca14:	3825883a 	mov	r18,r7
   4ca18:	003eaa06 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4ca1c:	1021883a 	mov	r16,r2
   4ca20:	0011883a 	mov	r8,zero
   4ca24:	0005883a 	mov	r2,zero
   4ca28:	003f0f06 	br	4c668 <__alt_data_end+0xfffec668>
   4ca2c:	217ff804 	addi	r5,r4,-32
   4ca30:	00800804 	movi	r2,32
   4ca34:	494ad83a 	srl	r5,r9,r5
   4ca38:	20807d26 	beq	r4,r2,4cc30 <__adddf3+0x7e8>
   4ca3c:	00801004 	movi	r2,64
   4ca40:	1109c83a 	sub	r4,r2,r4
   4ca44:	4912983a 	sll	r9,r9,r4
   4ca48:	498cb03a 	or	r6,r9,r6
   4ca4c:	300cc03a 	cmpne	r6,r6,zero
   4ca50:	298ab03a 	or	r5,r5,r6
   4ca54:	0013883a 	mov	r9,zero
   4ca58:	003f1506 	br	4c6b0 <__alt_data_end+0xfffec6b0>
   4ca5c:	0101ffc4 	movi	r4,2047
   4ca60:	113f9a1e 	bne	r2,r4,4c8cc <__alt_data_end+0xfffec8cc>
   4ca64:	4811883a 	mov	r8,r9
   4ca68:	3023883a 	mov	r17,r6
   4ca6c:	1021883a 	mov	r16,r2
   4ca70:	3825883a 	mov	r18,r7
   4ca74:	003e9306 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4ca78:	8000161e 	bne	r16,zero,4cad4 <__adddf3+0x68c>
   4ca7c:	444ab03a 	or	r5,r8,r17
   4ca80:	28005126 	beq	r5,zero,4cbc8 <__adddf3+0x780>
   4ca84:	0108303a 	nor	r4,zero,r4
   4ca88:	20004d1e 	bne	r4,zero,4cbc0 <__adddf3+0x778>
   4ca8c:	89a3883a 	add	r17,r17,r6
   4ca90:	4253883a 	add	r9,r8,r9
   4ca94:	898d803a 	cmpltu	r6,r17,r6
   4ca98:	3251883a 	add	r8,r6,r9
   4ca9c:	1021883a 	mov	r16,r2
   4caa0:	003f0806 	br	4c6c4 <__alt_data_end+0xfffec6c4>
   4caa4:	1000301e 	bne	r2,zero,4cb68 <__adddf3+0x720>
   4caa8:	4984b03a 	or	r2,r9,r6
   4caac:	10007126 	beq	r2,zero,4cc74 <__adddf3+0x82c>
   4cab0:	4811883a 	mov	r8,r9
   4cab4:	3023883a 	mov	r17,r6
   4cab8:	3825883a 	mov	r18,r7
   4cabc:	0401ffc4 	movi	r16,2047
   4cac0:	003e8006 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cac4:	4462b03a 	or	r17,r8,r17
   4cac8:	8822c03a 	cmpne	r17,r17,zero
   4cacc:	0007883a 	mov	r3,zero
   4cad0:	003f8b06 	br	4c900 <__alt_data_end+0xfffec900>
   4cad4:	0141ffc4 	movi	r5,2047
   4cad8:	11403b26 	beq	r2,r5,4cbc8 <__adddf3+0x780>
   4cadc:	0109c83a 	sub	r4,zero,r4
   4cae0:	42002034 	orhi	r8,r8,128
   4cae4:	01400e04 	movi	r5,56
   4cae8:	29006716 	blt	r5,r4,4cc88 <__adddf3+0x840>
   4caec:	014007c4 	movi	r5,31
   4caf0:	29007016 	blt	r5,r4,4ccb4 <__adddf3+0x86c>
   4caf4:	01400804 	movi	r5,32
   4caf8:	290bc83a 	sub	r5,r5,r4
   4cafc:	4154983a 	sll	r10,r8,r5
   4cb00:	890ed83a 	srl	r7,r17,r4
   4cb04:	894a983a 	sll	r5,r17,r5
   4cb08:	4108d83a 	srl	r4,r8,r4
   4cb0c:	51e2b03a 	or	r17,r10,r7
   4cb10:	280ac03a 	cmpne	r5,r5,zero
   4cb14:	8962b03a 	or	r17,r17,r5
   4cb18:	89a3883a 	add	r17,r17,r6
   4cb1c:	2253883a 	add	r9,r4,r9
   4cb20:	898d803a 	cmpltu	r6,r17,r6
   4cb24:	3251883a 	add	r8,r6,r9
   4cb28:	1021883a 	mov	r16,r2
   4cb2c:	003ee506 	br	4c6c4 <__alt_data_end+0xfffec6c4>
   4cb30:	4984b03a 	or	r2,r9,r6
   4cb34:	103e6326 	beq	r2,zero,4c4c4 <__alt_data_end+0xfffec4c4>
   4cb38:	8987c83a 	sub	r3,r17,r6
   4cb3c:	88c9803a 	cmpltu	r4,r17,r3
   4cb40:	4245c83a 	sub	r2,r8,r9
   4cb44:	1105c83a 	sub	r2,r2,r4
   4cb48:	1100202c 	andhi	r4,r2,128
   4cb4c:	203ebb26 	beq	r4,zero,4c63c <__alt_data_end+0xfffec63c>
   4cb50:	3463c83a 	sub	r17,r6,r17
   4cb54:	4a07c83a 	sub	r3,r9,r8
   4cb58:	344d803a 	cmpltu	r6,r6,r17
   4cb5c:	1991c83a 	sub	r8,r3,r6
   4cb60:	3825883a 	mov	r18,r7
   4cb64:	003e5706 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cb68:	4984b03a 	or	r2,r9,r6
   4cb6c:	10002e26 	beq	r2,zero,4cc28 <__adddf3+0x7e0>
   4cb70:	4004d0fa 	srli	r2,r8,3
   4cb74:	8822d0fa 	srli	r17,r17,3
   4cb78:	4010977a 	slli	r8,r8,29
   4cb7c:	10c0022c 	andhi	r3,r2,8
   4cb80:	4462b03a 	or	r17,r8,r17
   4cb84:	18000826 	beq	r3,zero,4cba8 <__adddf3+0x760>
   4cb88:	4808d0fa 	srli	r4,r9,3
   4cb8c:	20c0022c 	andhi	r3,r4,8
   4cb90:	1800051e 	bne	r3,zero,4cba8 <__adddf3+0x760>
   4cb94:	300cd0fa 	srli	r6,r6,3
   4cb98:	4806977a 	slli	r3,r9,29
   4cb9c:	2005883a 	mov	r2,r4
   4cba0:	3825883a 	mov	r18,r7
   4cba4:	19a2b03a 	or	r17,r3,r6
   4cba8:	8810d77a 	srli	r8,r17,29
   4cbac:	100490fa 	slli	r2,r2,3
   4cbb0:	882290fa 	slli	r17,r17,3
   4cbb4:	0401ffc4 	movi	r16,2047
   4cbb8:	4090b03a 	or	r8,r8,r2
   4cbbc:	003e4106 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cbc0:	0141ffc4 	movi	r5,2047
   4cbc4:	117fc71e 	bne	r2,r5,4cae4 <__alt_data_end+0xfffecae4>
   4cbc8:	4811883a 	mov	r8,r9
   4cbcc:	3023883a 	mov	r17,r6
   4cbd0:	1021883a 	mov	r16,r2
   4cbd4:	003e3b06 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cbd8:	10002f26 	beq	r2,zero,4cc98 <__adddf3+0x850>
   4cbdc:	4984b03a 	or	r2,r9,r6
   4cbe0:	10001126 	beq	r2,zero,4cc28 <__adddf3+0x7e0>
   4cbe4:	4004d0fa 	srli	r2,r8,3
   4cbe8:	8822d0fa 	srli	r17,r17,3
   4cbec:	4010977a 	slli	r8,r8,29
   4cbf0:	10c0022c 	andhi	r3,r2,8
   4cbf4:	4462b03a 	or	r17,r8,r17
   4cbf8:	183feb26 	beq	r3,zero,4cba8 <__alt_data_end+0xfffecba8>
   4cbfc:	4808d0fa 	srli	r4,r9,3
   4cc00:	20c0022c 	andhi	r3,r4,8
   4cc04:	183fe81e 	bne	r3,zero,4cba8 <__alt_data_end+0xfffecba8>
   4cc08:	300cd0fa 	srli	r6,r6,3
   4cc0c:	4806977a 	slli	r3,r9,29
   4cc10:	2005883a 	mov	r2,r4
   4cc14:	19a2b03a 	or	r17,r3,r6
   4cc18:	003fe306 	br	4cba8 <__alt_data_end+0xfffecba8>
   4cc1c:	0011883a 	mov	r8,zero
   4cc20:	0005883a 	mov	r2,zero
   4cc24:	003e3f06 	br	4c524 <__alt_data_end+0xfffec524>
   4cc28:	0401ffc4 	movi	r16,2047
   4cc2c:	003e2506 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cc30:	0013883a 	mov	r9,zero
   4cc34:	003f8406 	br	4ca48 <__alt_data_end+0xfffeca48>
   4cc38:	0005883a 	mov	r2,zero
   4cc3c:	0007883a 	mov	r3,zero
   4cc40:	003e8906 	br	4c668 <__alt_data_end+0xfffec668>
   4cc44:	197ff804 	addi	r5,r3,-32
   4cc48:	01000804 	movi	r4,32
   4cc4c:	414ad83a 	srl	r5,r8,r5
   4cc50:	19002426 	beq	r3,r4,4cce4 <__adddf3+0x89c>
   4cc54:	01001004 	movi	r4,64
   4cc58:	20c7c83a 	sub	r3,r4,r3
   4cc5c:	40c6983a 	sll	r3,r8,r3
   4cc60:	1c46b03a 	or	r3,r3,r17
   4cc64:	1806c03a 	cmpne	r3,r3,zero
   4cc68:	28e2b03a 	or	r17,r5,r3
   4cc6c:	0007883a 	mov	r3,zero
   4cc70:	003f2306 	br	4c900 <__alt_data_end+0xfffec900>
   4cc74:	0007883a 	mov	r3,zero
   4cc78:	5811883a 	mov	r8,r11
   4cc7c:	00bfffc4 	movi	r2,-1
   4cc80:	0401ffc4 	movi	r16,2047
   4cc84:	003e7806 	br	4c668 <__alt_data_end+0xfffec668>
   4cc88:	4462b03a 	or	r17,r8,r17
   4cc8c:	8822c03a 	cmpne	r17,r17,zero
   4cc90:	0009883a 	mov	r4,zero
   4cc94:	003fa006 	br	4cb18 <__alt_data_end+0xfffecb18>
   4cc98:	4811883a 	mov	r8,r9
   4cc9c:	3023883a 	mov	r17,r6
   4cca0:	0401ffc4 	movi	r16,2047
   4cca4:	003e0706 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4cca8:	4811883a 	mov	r8,r9
   4ccac:	3023883a 	mov	r17,r6
   4ccb0:	003e0406 	br	4c4c4 <__alt_data_end+0xfffec4c4>
   4ccb4:	21fff804 	addi	r7,r4,-32
   4ccb8:	01400804 	movi	r5,32
   4ccbc:	41ced83a 	srl	r7,r8,r7
   4ccc0:	21400a26 	beq	r4,r5,4ccec <__adddf3+0x8a4>
   4ccc4:	01401004 	movi	r5,64
   4ccc8:	2909c83a 	sub	r4,r5,r4
   4cccc:	4108983a 	sll	r4,r8,r4
   4ccd0:	2448b03a 	or	r4,r4,r17
   4ccd4:	2008c03a 	cmpne	r4,r4,zero
   4ccd8:	3922b03a 	or	r17,r7,r4
   4ccdc:	0009883a 	mov	r4,zero
   4cce0:	003f8d06 	br	4cb18 <__alt_data_end+0xfffecb18>
   4cce4:	0007883a 	mov	r3,zero
   4cce8:	003fdd06 	br	4cc60 <__alt_data_end+0xfffecc60>
   4ccec:	0009883a 	mov	r4,zero
   4ccf0:	003ff706 	br	4ccd0 <__alt_data_end+0xfffeccd0>

0004ccf4 <__eqdf2>:
   4ccf4:	2804d53a 	srli	r2,r5,20
   4ccf8:	3806d53a 	srli	r3,r7,20
   4ccfc:	02000434 	movhi	r8,16
   4cd00:	423fffc4 	addi	r8,r8,-1
   4cd04:	1081ffcc 	andi	r2,r2,2047
   4cd08:	0281ffc4 	movi	r10,2047
   4cd0c:	2a12703a 	and	r9,r5,r8
   4cd10:	18c1ffcc 	andi	r3,r3,2047
   4cd14:	3a10703a 	and	r8,r7,r8
   4cd18:	280ad7fa 	srli	r5,r5,31
   4cd1c:	380ed7fa 	srli	r7,r7,31
   4cd20:	12801026 	beq	r2,r10,4cd64 <__eqdf2+0x70>
   4cd24:	0281ffc4 	movi	r10,2047
   4cd28:	1a800a26 	beq	r3,r10,4cd54 <__eqdf2+0x60>
   4cd2c:	10c00226 	beq	r2,r3,4cd38 <__eqdf2+0x44>
   4cd30:	00800044 	movi	r2,1
   4cd34:	f800283a 	ret
   4cd38:	4a3ffd1e 	bne	r9,r8,4cd30 <__alt_data_end+0xfffecd30>
   4cd3c:	21bffc1e 	bne	r4,r6,4cd30 <__alt_data_end+0xfffecd30>
   4cd40:	29c00c26 	beq	r5,r7,4cd74 <__eqdf2+0x80>
   4cd44:	103ffa1e 	bne	r2,zero,4cd30 <__alt_data_end+0xfffecd30>
   4cd48:	2244b03a 	or	r2,r4,r9
   4cd4c:	1004c03a 	cmpne	r2,r2,zero
   4cd50:	f800283a 	ret
   4cd54:	3214b03a 	or	r10,r6,r8
   4cd58:	503ff426 	beq	r10,zero,4cd2c <__alt_data_end+0xfffecd2c>
   4cd5c:	00800044 	movi	r2,1
   4cd60:	f800283a 	ret
   4cd64:	2254b03a 	or	r10,r4,r9
   4cd68:	503fee26 	beq	r10,zero,4cd24 <__alt_data_end+0xfffecd24>
   4cd6c:	00800044 	movi	r2,1
   4cd70:	f800283a 	ret
   4cd74:	0005883a 	mov	r2,zero
   4cd78:	f800283a 	ret

0004cd7c <__gedf2>:
   4cd7c:	2804d53a 	srli	r2,r5,20
   4cd80:	3806d53a 	srli	r3,r7,20
   4cd84:	02000434 	movhi	r8,16
   4cd88:	423fffc4 	addi	r8,r8,-1
   4cd8c:	1081ffcc 	andi	r2,r2,2047
   4cd90:	0241ffc4 	movi	r9,2047
   4cd94:	2a14703a 	and	r10,r5,r8
   4cd98:	18c1ffcc 	andi	r3,r3,2047
   4cd9c:	3a10703a 	and	r8,r7,r8
   4cda0:	280ad7fa 	srli	r5,r5,31
   4cda4:	380ed7fa 	srli	r7,r7,31
   4cda8:	12401d26 	beq	r2,r9,4ce20 <__gedf2+0xa4>
   4cdac:	0241ffc4 	movi	r9,2047
   4cdb0:	1a401226 	beq	r3,r9,4cdfc <__gedf2+0x80>
   4cdb4:	1000081e 	bne	r2,zero,4cdd8 <__gedf2+0x5c>
   4cdb8:	2296b03a 	or	r11,r4,r10
   4cdbc:	5813003a 	cmpeq	r9,r11,zero
   4cdc0:	1800091e 	bne	r3,zero,4cde8 <__gedf2+0x6c>
   4cdc4:	3218b03a 	or	r12,r6,r8
   4cdc8:	6000071e 	bne	r12,zero,4cde8 <__gedf2+0x6c>
   4cdcc:	0005883a 	mov	r2,zero
   4cdd0:	5800101e 	bne	r11,zero,4ce14 <__gedf2+0x98>
   4cdd4:	f800283a 	ret
   4cdd8:	18000c1e 	bne	r3,zero,4ce0c <__gedf2+0x90>
   4cddc:	3212b03a 	or	r9,r6,r8
   4cde0:	48000c26 	beq	r9,zero,4ce14 <__gedf2+0x98>
   4cde4:	0013883a 	mov	r9,zero
   4cde8:	39c03fcc 	andi	r7,r7,255
   4cdec:	48000826 	beq	r9,zero,4ce10 <__gedf2+0x94>
   4cdf0:	38000926 	beq	r7,zero,4ce18 <__gedf2+0x9c>
   4cdf4:	00800044 	movi	r2,1
   4cdf8:	f800283a 	ret
   4cdfc:	3212b03a 	or	r9,r6,r8
   4ce00:	483fec26 	beq	r9,zero,4cdb4 <__alt_data_end+0xfffecdb4>
   4ce04:	00bfff84 	movi	r2,-2
   4ce08:	f800283a 	ret
   4ce0c:	39c03fcc 	andi	r7,r7,255
   4ce10:	29c00626 	beq	r5,r7,4ce2c <__gedf2+0xb0>
   4ce14:	283ff726 	beq	r5,zero,4cdf4 <__alt_data_end+0xfffecdf4>
   4ce18:	00bfffc4 	movi	r2,-1
   4ce1c:	f800283a 	ret
   4ce20:	2292b03a 	or	r9,r4,r10
   4ce24:	483fe126 	beq	r9,zero,4cdac <__alt_data_end+0xfffecdac>
   4ce28:	003ff606 	br	4ce04 <__alt_data_end+0xfffece04>
   4ce2c:	18bff916 	blt	r3,r2,4ce14 <__alt_data_end+0xfffece14>
   4ce30:	10c00316 	blt	r2,r3,4ce40 <__gedf2+0xc4>
   4ce34:	42bff736 	bltu	r8,r10,4ce14 <__alt_data_end+0xfffece14>
   4ce38:	52000326 	beq	r10,r8,4ce48 <__gedf2+0xcc>
   4ce3c:	5200042e 	bgeu	r10,r8,4ce50 <__gedf2+0xd4>
   4ce40:	283fec1e 	bne	r5,zero,4cdf4 <__alt_data_end+0xfffecdf4>
   4ce44:	003ff406 	br	4ce18 <__alt_data_end+0xfffece18>
   4ce48:	313ff236 	bltu	r6,r4,4ce14 <__alt_data_end+0xfffece14>
   4ce4c:	21bffc36 	bltu	r4,r6,4ce40 <__alt_data_end+0xfffece40>
   4ce50:	0005883a 	mov	r2,zero
   4ce54:	f800283a 	ret

0004ce58 <__ledf2>:
   4ce58:	2804d53a 	srli	r2,r5,20
   4ce5c:	3810d53a 	srli	r8,r7,20
   4ce60:	00c00434 	movhi	r3,16
   4ce64:	18ffffc4 	addi	r3,r3,-1
   4ce68:	1081ffcc 	andi	r2,r2,2047
   4ce6c:	0241ffc4 	movi	r9,2047
   4ce70:	28d4703a 	and	r10,r5,r3
   4ce74:	4201ffcc 	andi	r8,r8,2047
   4ce78:	38c6703a 	and	r3,r7,r3
   4ce7c:	280ad7fa 	srli	r5,r5,31
   4ce80:	380ed7fa 	srli	r7,r7,31
   4ce84:	12401f26 	beq	r2,r9,4cf04 <__ledf2+0xac>
   4ce88:	0241ffc4 	movi	r9,2047
   4ce8c:	42401426 	beq	r8,r9,4cee0 <__ledf2+0x88>
   4ce90:	1000091e 	bne	r2,zero,4ceb8 <__ledf2+0x60>
   4ce94:	2296b03a 	or	r11,r4,r10
   4ce98:	5813003a 	cmpeq	r9,r11,zero
   4ce9c:	29403fcc 	andi	r5,r5,255
   4cea0:	40000a1e 	bne	r8,zero,4cecc <__ledf2+0x74>
   4cea4:	30d8b03a 	or	r12,r6,r3
   4cea8:	6000081e 	bne	r12,zero,4cecc <__ledf2+0x74>
   4ceac:	0005883a 	mov	r2,zero
   4ceb0:	5800111e 	bne	r11,zero,4cef8 <__ledf2+0xa0>
   4ceb4:	f800283a 	ret
   4ceb8:	29403fcc 	andi	r5,r5,255
   4cebc:	40000c1e 	bne	r8,zero,4cef0 <__ledf2+0x98>
   4cec0:	30d2b03a 	or	r9,r6,r3
   4cec4:	48000c26 	beq	r9,zero,4cef8 <__ledf2+0xa0>
   4cec8:	0013883a 	mov	r9,zero
   4cecc:	39c03fcc 	andi	r7,r7,255
   4ced0:	48000826 	beq	r9,zero,4cef4 <__ledf2+0x9c>
   4ced4:	38001126 	beq	r7,zero,4cf1c <__ledf2+0xc4>
   4ced8:	00800044 	movi	r2,1
   4cedc:	f800283a 	ret
   4cee0:	30d2b03a 	or	r9,r6,r3
   4cee4:	483fea26 	beq	r9,zero,4ce90 <__alt_data_end+0xfffece90>
   4cee8:	00800084 	movi	r2,2
   4ceec:	f800283a 	ret
   4cef0:	39c03fcc 	andi	r7,r7,255
   4cef4:	39400726 	beq	r7,r5,4cf14 <__ledf2+0xbc>
   4cef8:	2800081e 	bne	r5,zero,4cf1c <__ledf2+0xc4>
   4cefc:	00800044 	movi	r2,1
   4cf00:	f800283a 	ret
   4cf04:	2292b03a 	or	r9,r4,r10
   4cf08:	483fdf26 	beq	r9,zero,4ce88 <__alt_data_end+0xfffece88>
   4cf0c:	00800084 	movi	r2,2
   4cf10:	f800283a 	ret
   4cf14:	4080030e 	bge	r8,r2,4cf24 <__ledf2+0xcc>
   4cf18:	383fef26 	beq	r7,zero,4ced8 <__alt_data_end+0xfffeced8>
   4cf1c:	00bfffc4 	movi	r2,-1
   4cf20:	f800283a 	ret
   4cf24:	123feb16 	blt	r2,r8,4ced4 <__alt_data_end+0xfffeced4>
   4cf28:	1abff336 	bltu	r3,r10,4cef8 <__alt_data_end+0xfffecef8>
   4cf2c:	50c00326 	beq	r10,r3,4cf3c <__ledf2+0xe4>
   4cf30:	50c0042e 	bgeu	r10,r3,4cf44 <__ledf2+0xec>
   4cf34:	283fe81e 	bne	r5,zero,4ced8 <__alt_data_end+0xfffeced8>
   4cf38:	003ff806 	br	4cf1c <__alt_data_end+0xfffecf1c>
   4cf3c:	313fee36 	bltu	r6,r4,4cef8 <__alt_data_end+0xfffecef8>
   4cf40:	21bffc36 	bltu	r4,r6,4cf34 <__alt_data_end+0xfffecf34>
   4cf44:	0005883a 	mov	r2,zero
   4cf48:	f800283a 	ret

0004cf4c <__muldf3>:
   4cf4c:	deffee04 	addi	sp,sp,-72
   4cf50:	dd000c15 	stw	r20,48(sp)
   4cf54:	2828d53a 	srli	r20,r5,20
   4cf58:	ddc00f15 	stw	r23,60(sp)
   4cf5c:	282ed7fa 	srli	r23,r5,31
   4cf60:	dc000815 	stw	r16,32(sp)
   4cf64:	04000434 	movhi	r16,16
   4cf68:	dcc00b15 	stw	r19,44(sp)
   4cf6c:	843fffc4 	addi	r16,r16,-1
   4cf70:	dfc01115 	stw	ra,68(sp)
   4cf74:	df001015 	stw	fp,64(sp)
   4cf78:	dd800e15 	stw	r22,56(sp)
   4cf7c:	dd400d15 	stw	r21,52(sp)
   4cf80:	dc800a15 	stw	r18,40(sp)
   4cf84:	dc400915 	stw	r17,36(sp)
   4cf88:	a501ffcc 	andi	r20,r20,2047
   4cf8c:	2c20703a 	and	r16,r5,r16
   4cf90:	b827883a 	mov	r19,r23
   4cf94:	ba403fcc 	andi	r9,r23,255
   4cf98:	a0006026 	beq	r20,zero,4d11c <__muldf3+0x1d0>
   4cf9c:	0081ffc4 	movi	r2,2047
   4cfa0:	202d883a 	mov	r22,r4
   4cfa4:	a0803626 	beq	r20,r2,4d080 <__muldf3+0x134>
   4cfa8:	84000434 	orhi	r16,r16,16
   4cfac:	200ad77a 	srli	r5,r4,29
   4cfb0:	800490fa 	slli	r2,r16,3
   4cfb4:	202c90fa 	slli	r22,r4,3
   4cfb8:	a53f0044 	addi	r20,r20,-1023
   4cfbc:	28a0b03a 	or	r16,r5,r2
   4cfc0:	002b883a 	mov	r21,zero
   4cfc4:	000b883a 	mov	r5,zero
   4cfc8:	3804d53a 	srli	r2,r7,20
   4cfcc:	3838d7fa 	srli	fp,r7,31
   4cfd0:	04400434 	movhi	r17,16
   4cfd4:	8c7fffc4 	addi	r17,r17,-1
   4cfd8:	1081ffcc 	andi	r2,r2,2047
   4cfdc:	3025883a 	mov	r18,r6
   4cfe0:	3c62703a 	and	r17,r7,r17
   4cfe4:	e2803fcc 	andi	r10,fp,255
   4cfe8:	10006d26 	beq	r2,zero,4d1a0 <__muldf3+0x254>
   4cfec:	00c1ffc4 	movi	r3,2047
   4cff0:	10c06526 	beq	r2,r3,4d188 <__muldf3+0x23c>
   4cff4:	8c400434 	orhi	r17,r17,16
   4cff8:	300ed77a 	srli	r7,r6,29
   4cffc:	880690fa 	slli	r3,r17,3
   4d000:	302490fa 	slli	r18,r6,3
   4d004:	10bf0044 	addi	r2,r2,-1023
   4d008:	38e2b03a 	or	r17,r7,r3
   4d00c:	000f883a 	mov	r7,zero
   4d010:	a087883a 	add	r3,r20,r2
   4d014:	010003c4 	movi	r4,15
   4d018:	3d44b03a 	or	r2,r7,r21
   4d01c:	e5ccf03a 	xor	r6,fp,r23
   4d020:	1a000044 	addi	r8,r3,1
   4d024:	20809b36 	bltu	r4,r2,4d294 <__muldf3+0x348>
   4d028:	100490ba 	slli	r2,r2,2
   4d02c:	01000174 	movhi	r4,5
   4d030:	21341004 	addi	r4,r4,-12224
   4d034:	1105883a 	add	r2,r2,r4
   4d038:	10800017 	ldw	r2,0(r2)
   4d03c:	1000683a 	jmp	r2
   4d040:	0004d294 	movui	zero,4938
   4d044:	0004d0a0 	cmpeqi	zero,zero,4930
   4d048:	0004d0a0 	cmpeqi	zero,zero,4930
   4d04c:	0004d09c 	xori	zero,zero,4930
   4d050:	0004d270 	cmpltui	zero,zero,4937
   4d054:	0004d270 	cmpltui	zero,zero,4937
   4d058:	0004d258 	cmpnei	zero,zero,4937
   4d05c:	0004d09c 	xori	zero,zero,4930
   4d060:	0004d270 	cmpltui	zero,zero,4937
   4d064:	0004d258 	cmpnei	zero,zero,4937
   4d068:	0004d270 	cmpltui	zero,zero,4937
   4d06c:	0004d09c 	xori	zero,zero,4930
   4d070:	0004d280 	call	4d28 <__alt_mem_onchip_mem_1f-0x3b2d8>
   4d074:	0004d280 	call	4d28 <__alt_mem_onchip_mem_1f-0x3b2d8>
   4d078:	0004d280 	call	4d28 <__alt_mem_onchip_mem_1f-0x3b2d8>
   4d07c:	0004d5e0 	cmpeqi	zero,zero,4951
   4d080:	2404b03a 	or	r2,r4,r16
   4d084:	1000711e 	bne	r2,zero,4d24c <__muldf3+0x300>
   4d088:	05400204 	movi	r21,8
   4d08c:	0021883a 	mov	r16,zero
   4d090:	002d883a 	mov	r22,zero
   4d094:	01400084 	movi	r5,2
   4d098:	003fcb06 	br	4cfc8 <__alt_data_end+0xfffecfc8>
   4d09c:	500d883a 	mov	r6,r10
   4d0a0:	00800084 	movi	r2,2
   4d0a4:	38805926 	beq	r7,r2,4d20c <__muldf3+0x2c0>
   4d0a8:	008000c4 	movi	r2,3
   4d0ac:	3881bb26 	beq	r7,r2,4d79c <__muldf3+0x850>
   4d0b0:	00800044 	movi	r2,1
   4d0b4:	3881961e 	bne	r7,r2,4d710 <__muldf3+0x7c4>
   4d0b8:	3027883a 	mov	r19,r6
   4d0bc:	0005883a 	mov	r2,zero
   4d0c0:	0021883a 	mov	r16,zero
   4d0c4:	002d883a 	mov	r22,zero
   4d0c8:	1004953a 	slli	r2,r2,20
   4d0cc:	98c03fcc 	andi	r3,r19,255
   4d0d0:	04400434 	movhi	r17,16
   4d0d4:	8c7fffc4 	addi	r17,r17,-1
   4d0d8:	180697fa 	slli	r3,r3,31
   4d0dc:	8460703a 	and	r16,r16,r17
   4d0e0:	80a0b03a 	or	r16,r16,r2
   4d0e4:	80c6b03a 	or	r3,r16,r3
   4d0e8:	b005883a 	mov	r2,r22
   4d0ec:	dfc01117 	ldw	ra,68(sp)
   4d0f0:	df001017 	ldw	fp,64(sp)
   4d0f4:	ddc00f17 	ldw	r23,60(sp)
   4d0f8:	dd800e17 	ldw	r22,56(sp)
   4d0fc:	dd400d17 	ldw	r21,52(sp)
   4d100:	dd000c17 	ldw	r20,48(sp)
   4d104:	dcc00b17 	ldw	r19,44(sp)
   4d108:	dc800a17 	ldw	r18,40(sp)
   4d10c:	dc400917 	ldw	r17,36(sp)
   4d110:	dc000817 	ldw	r16,32(sp)
   4d114:	dec01204 	addi	sp,sp,72
   4d118:	f800283a 	ret
   4d11c:	2404b03a 	or	r2,r4,r16
   4d120:	202b883a 	mov	r21,r4
   4d124:	10004426 	beq	r2,zero,4d238 <__muldf3+0x2ec>
   4d128:	80015126 	beq	r16,zero,4d670 <__muldf3+0x724>
   4d12c:	8009883a 	mov	r4,r16
   4d130:	d9800715 	stw	r6,28(sp)
   4d134:	d9c00215 	stw	r7,8(sp)
   4d138:	da400415 	stw	r9,16(sp)
   4d13c:	00411040 	call	41104 <__clzsi2>
   4d140:	d9800717 	ldw	r6,28(sp)
   4d144:	d9c00217 	ldw	r7,8(sp)
   4d148:	da400417 	ldw	r9,16(sp)
   4d14c:	113ffd44 	addi	r4,r2,-11
   4d150:	00c00704 	movi	r3,28
   4d154:	19014216 	blt	r3,r4,4d660 <__muldf3+0x714>
   4d158:	00c00744 	movi	r3,29
   4d15c:	15bffe04 	addi	r22,r2,-8
   4d160:	1907c83a 	sub	r3,r3,r4
   4d164:	85a0983a 	sll	r16,r16,r22
   4d168:	a8c6d83a 	srl	r3,r21,r3
   4d16c:	adac983a 	sll	r22,r21,r22
   4d170:	1c20b03a 	or	r16,r3,r16
   4d174:	1080fcc4 	addi	r2,r2,1011
   4d178:	00a9c83a 	sub	r20,zero,r2
   4d17c:	002b883a 	mov	r21,zero
   4d180:	000b883a 	mov	r5,zero
   4d184:	003f9006 	br	4cfc8 <__alt_data_end+0xfffecfc8>
   4d188:	3446b03a 	or	r3,r6,r17
   4d18c:	1800281e 	bne	r3,zero,4d230 <__muldf3+0x2e4>
   4d190:	0023883a 	mov	r17,zero
   4d194:	0025883a 	mov	r18,zero
   4d198:	01c00084 	movi	r7,2
   4d19c:	003f9c06 	br	4d010 <__alt_data_end+0xfffed010>
   4d1a0:	3446b03a 	or	r3,r6,r17
   4d1a4:	18001e26 	beq	r3,zero,4d220 <__muldf3+0x2d4>
   4d1a8:	88012126 	beq	r17,zero,4d630 <__muldf3+0x6e4>
   4d1ac:	8809883a 	mov	r4,r17
   4d1b0:	d9400215 	stw	r5,8(sp)
   4d1b4:	d9800715 	stw	r6,28(sp)
   4d1b8:	da400415 	stw	r9,16(sp)
   4d1bc:	da800315 	stw	r10,12(sp)
   4d1c0:	00411040 	call	41104 <__clzsi2>
   4d1c4:	d9400217 	ldw	r5,8(sp)
   4d1c8:	d9800717 	ldw	r6,28(sp)
   4d1cc:	da400417 	ldw	r9,16(sp)
   4d1d0:	da800317 	ldw	r10,12(sp)
   4d1d4:	113ffd44 	addi	r4,r2,-11
   4d1d8:	00c00704 	movi	r3,28
   4d1dc:	19011016 	blt	r3,r4,4d620 <__muldf3+0x6d4>
   4d1e0:	00c00744 	movi	r3,29
   4d1e4:	14bffe04 	addi	r18,r2,-8
   4d1e8:	1907c83a 	sub	r3,r3,r4
   4d1ec:	8ca2983a 	sll	r17,r17,r18
   4d1f0:	30c6d83a 	srl	r3,r6,r3
   4d1f4:	34a4983a 	sll	r18,r6,r18
   4d1f8:	1c62b03a 	or	r17,r3,r17
   4d1fc:	1080fcc4 	addi	r2,r2,1011
   4d200:	0085c83a 	sub	r2,zero,r2
   4d204:	000f883a 	mov	r7,zero
   4d208:	003f8106 	br	4d010 <__alt_data_end+0xfffed010>
   4d20c:	3027883a 	mov	r19,r6
   4d210:	0081ffc4 	movi	r2,2047
   4d214:	0021883a 	mov	r16,zero
   4d218:	002d883a 	mov	r22,zero
   4d21c:	003faa06 	br	4d0c8 <__alt_data_end+0xfffed0c8>
   4d220:	0023883a 	mov	r17,zero
   4d224:	0025883a 	mov	r18,zero
   4d228:	01c00044 	movi	r7,1
   4d22c:	003f7806 	br	4d010 <__alt_data_end+0xfffed010>
   4d230:	01c000c4 	movi	r7,3
   4d234:	003f7606 	br	4d010 <__alt_data_end+0xfffed010>
   4d238:	05400104 	movi	r21,4
   4d23c:	0021883a 	mov	r16,zero
   4d240:	002d883a 	mov	r22,zero
   4d244:	01400044 	movi	r5,1
   4d248:	003f5f06 	br	4cfc8 <__alt_data_end+0xfffecfc8>
   4d24c:	05400304 	movi	r21,12
   4d250:	014000c4 	movi	r5,3
   4d254:	003f5c06 	br	4cfc8 <__alt_data_end+0xfffecfc8>
   4d258:	04000434 	movhi	r16,16
   4d25c:	0027883a 	mov	r19,zero
   4d260:	843fffc4 	addi	r16,r16,-1
   4d264:	05bfffc4 	movi	r22,-1
   4d268:	0081ffc4 	movi	r2,2047
   4d26c:	003f9606 	br	4d0c8 <__alt_data_end+0xfffed0c8>
   4d270:	8023883a 	mov	r17,r16
   4d274:	b025883a 	mov	r18,r22
   4d278:	280f883a 	mov	r7,r5
   4d27c:	003f8806 	br	4d0a0 <__alt_data_end+0xfffed0a0>
   4d280:	8023883a 	mov	r17,r16
   4d284:	b025883a 	mov	r18,r22
   4d288:	480d883a 	mov	r6,r9
   4d28c:	280f883a 	mov	r7,r5
   4d290:	003f8306 	br	4d0a0 <__alt_data_end+0xfffed0a0>
   4d294:	b026d43a 	srli	r19,r22,16
   4d298:	902ed43a 	srli	r23,r18,16
   4d29c:	b5bfffcc 	andi	r22,r22,65535
   4d2a0:	94bfffcc 	andi	r18,r18,65535
   4d2a4:	b00b883a 	mov	r5,r22
   4d2a8:	9009883a 	mov	r4,r18
   4d2ac:	d8c00515 	stw	r3,20(sp)
   4d2b0:	d9800715 	stw	r6,28(sp)
   4d2b4:	da000615 	stw	r8,24(sp)
   4d2b8:	004131c0 	call	4131c <__mulsi3>
   4d2bc:	980b883a 	mov	r5,r19
   4d2c0:	9009883a 	mov	r4,r18
   4d2c4:	1029883a 	mov	r20,r2
   4d2c8:	004131c0 	call	4131c <__mulsi3>
   4d2cc:	b80b883a 	mov	r5,r23
   4d2d0:	9809883a 	mov	r4,r19
   4d2d4:	102b883a 	mov	r21,r2
   4d2d8:	004131c0 	call	4131c <__mulsi3>
   4d2dc:	b809883a 	mov	r4,r23
   4d2e0:	b00b883a 	mov	r5,r22
   4d2e4:	1039883a 	mov	fp,r2
   4d2e8:	004131c0 	call	4131c <__mulsi3>
   4d2ec:	a008d43a 	srli	r4,r20,16
   4d2f0:	1545883a 	add	r2,r2,r21
   4d2f4:	d8c00517 	ldw	r3,20(sp)
   4d2f8:	2085883a 	add	r2,r4,r2
   4d2fc:	d9800717 	ldw	r6,28(sp)
   4d300:	da000617 	ldw	r8,24(sp)
   4d304:	1540022e 	bgeu	r2,r21,4d310 <__muldf3+0x3c4>
   4d308:	01000074 	movhi	r4,1
   4d30c:	e139883a 	add	fp,fp,r4
   4d310:	100e943a 	slli	r7,r2,16
   4d314:	1004d43a 	srli	r2,r2,16
   4d318:	882ad43a 	srli	r21,r17,16
   4d31c:	a53fffcc 	andi	r20,r20,65535
   4d320:	8c7fffcc 	andi	r17,r17,65535
   4d324:	3d29883a 	add	r20,r7,r20
   4d328:	b00b883a 	mov	r5,r22
   4d32c:	8809883a 	mov	r4,r17
   4d330:	d8c00515 	stw	r3,20(sp)
   4d334:	d9800715 	stw	r6,28(sp)
   4d338:	da000615 	stw	r8,24(sp)
   4d33c:	dd000115 	stw	r20,4(sp)
   4d340:	d8800015 	stw	r2,0(sp)
   4d344:	004131c0 	call	4131c <__mulsi3>
   4d348:	980b883a 	mov	r5,r19
   4d34c:	8809883a 	mov	r4,r17
   4d350:	d8800215 	stw	r2,8(sp)
   4d354:	004131c0 	call	4131c <__mulsi3>
   4d358:	9809883a 	mov	r4,r19
   4d35c:	a80b883a 	mov	r5,r21
   4d360:	1029883a 	mov	r20,r2
   4d364:	004131c0 	call	4131c <__mulsi3>
   4d368:	b00b883a 	mov	r5,r22
   4d36c:	a809883a 	mov	r4,r21
   4d370:	d8800415 	stw	r2,16(sp)
   4d374:	004131c0 	call	4131c <__mulsi3>
   4d378:	d9c00217 	ldw	r7,8(sp)
   4d37c:	1505883a 	add	r2,r2,r20
   4d380:	d8c00517 	ldw	r3,20(sp)
   4d384:	3826d43a 	srli	r19,r7,16
   4d388:	d9800717 	ldw	r6,28(sp)
   4d38c:	da000617 	ldw	r8,24(sp)
   4d390:	9885883a 	add	r2,r19,r2
   4d394:	da400417 	ldw	r9,16(sp)
   4d398:	1500022e 	bgeu	r2,r20,4d3a4 <__muldf3+0x458>
   4d39c:	01000074 	movhi	r4,1
   4d3a0:	4913883a 	add	r9,r9,r4
   4d3a4:	1028d43a 	srli	r20,r2,16
   4d3a8:	1004943a 	slli	r2,r2,16
   4d3ac:	802cd43a 	srli	r22,r16,16
   4d3b0:	843fffcc 	andi	r16,r16,65535
   4d3b4:	3cffffcc 	andi	r19,r7,65535
   4d3b8:	9009883a 	mov	r4,r18
   4d3bc:	800b883a 	mov	r5,r16
   4d3c0:	a269883a 	add	r20,r20,r9
   4d3c4:	d8c00515 	stw	r3,20(sp)
   4d3c8:	d9800715 	stw	r6,28(sp)
   4d3cc:	da000615 	stw	r8,24(sp)
   4d3d0:	14e7883a 	add	r19,r2,r19
   4d3d4:	004131c0 	call	4131c <__mulsi3>
   4d3d8:	9009883a 	mov	r4,r18
   4d3dc:	b00b883a 	mov	r5,r22
   4d3e0:	d8800315 	stw	r2,12(sp)
   4d3e4:	004131c0 	call	4131c <__mulsi3>
   4d3e8:	b809883a 	mov	r4,r23
   4d3ec:	b00b883a 	mov	r5,r22
   4d3f0:	d8800215 	stw	r2,8(sp)
   4d3f4:	004131c0 	call	4131c <__mulsi3>
   4d3f8:	b80b883a 	mov	r5,r23
   4d3fc:	8009883a 	mov	r4,r16
   4d400:	d8800415 	stw	r2,16(sp)
   4d404:	004131c0 	call	4131c <__mulsi3>
   4d408:	da800317 	ldw	r10,12(sp)
   4d40c:	d9c00217 	ldw	r7,8(sp)
   4d410:	d9000017 	ldw	r4,0(sp)
   4d414:	502ed43a 	srli	r23,r10,16
   4d418:	11c5883a 	add	r2,r2,r7
   4d41c:	24e5883a 	add	r18,r4,r19
   4d420:	b885883a 	add	r2,r23,r2
   4d424:	d8c00517 	ldw	r3,20(sp)
   4d428:	d9800717 	ldw	r6,28(sp)
   4d42c:	da000617 	ldw	r8,24(sp)
   4d430:	da400417 	ldw	r9,16(sp)
   4d434:	11c0022e 	bgeu	r2,r7,4d440 <__muldf3+0x4f4>
   4d438:	01000074 	movhi	r4,1
   4d43c:	4913883a 	add	r9,r9,r4
   4d440:	100ed43a 	srli	r7,r2,16
   4d444:	1004943a 	slli	r2,r2,16
   4d448:	55ffffcc 	andi	r23,r10,65535
   4d44c:	3a53883a 	add	r9,r7,r9
   4d450:	8809883a 	mov	r4,r17
   4d454:	800b883a 	mov	r5,r16
   4d458:	d8c00515 	stw	r3,20(sp)
   4d45c:	d9800715 	stw	r6,28(sp)
   4d460:	da000615 	stw	r8,24(sp)
   4d464:	da400415 	stw	r9,16(sp)
   4d468:	15ef883a 	add	r23,r2,r23
   4d46c:	004131c0 	call	4131c <__mulsi3>
   4d470:	8809883a 	mov	r4,r17
   4d474:	b00b883a 	mov	r5,r22
   4d478:	d8800215 	stw	r2,8(sp)
   4d47c:	004131c0 	call	4131c <__mulsi3>
   4d480:	b00b883a 	mov	r5,r22
   4d484:	a809883a 	mov	r4,r21
   4d488:	d8800315 	stw	r2,12(sp)
   4d48c:	004131c0 	call	4131c <__mulsi3>
   4d490:	8009883a 	mov	r4,r16
   4d494:	a80b883a 	mov	r5,r21
   4d498:	1023883a 	mov	r17,r2
   4d49c:	004131c0 	call	4131c <__mulsi3>
   4d4a0:	d9c00217 	ldw	r7,8(sp)
   4d4a4:	da800317 	ldw	r10,12(sp)
   4d4a8:	d8c00517 	ldw	r3,20(sp)
   4d4ac:	3808d43a 	srli	r4,r7,16
   4d4b0:	1285883a 	add	r2,r2,r10
   4d4b4:	d9800717 	ldw	r6,28(sp)
   4d4b8:	2085883a 	add	r2,r4,r2
   4d4bc:	da000617 	ldw	r8,24(sp)
   4d4c0:	da400417 	ldw	r9,16(sp)
   4d4c4:	1280022e 	bgeu	r2,r10,4d4d0 <__muldf3+0x584>
   4d4c8:	01000074 	movhi	r4,1
   4d4cc:	8923883a 	add	r17,r17,r4
   4d4d0:	1008943a 	slli	r4,r2,16
   4d4d4:	39ffffcc 	andi	r7,r7,65535
   4d4d8:	e4b9883a 	add	fp,fp,r18
   4d4dc:	21cf883a 	add	r7,r4,r7
   4d4e0:	e4e7803a 	cmpltu	r19,fp,r19
   4d4e4:	3d0f883a 	add	r7,r7,r20
   4d4e8:	bf39883a 	add	fp,r23,fp
   4d4ec:	99c9883a 	add	r4,r19,r7
   4d4f0:	e5ef803a 	cmpltu	r23,fp,r23
   4d4f4:	490b883a 	add	r5,r9,r4
   4d4f8:	1004d43a 	srli	r2,r2,16
   4d4fc:	b965883a 	add	r18,r23,r5
   4d500:	24c9803a 	cmpltu	r4,r4,r19
   4d504:	3d29803a 	cmpltu	r20,r7,r20
   4d508:	a128b03a 	or	r20,r20,r4
   4d50c:	95ef803a 	cmpltu	r23,r18,r23
   4d510:	2a53803a 	cmpltu	r9,r5,r9
   4d514:	a0a9883a 	add	r20,r20,r2
   4d518:	4deeb03a 	or	r23,r9,r23
   4d51c:	a5ef883a 	add	r23,r20,r23
   4d520:	bc63883a 	add	r17,r23,r17
   4d524:	e004927a 	slli	r2,fp,9
   4d528:	d9000117 	ldw	r4,4(sp)
   4d52c:	882e927a 	slli	r23,r17,9
   4d530:	9022d5fa 	srli	r17,r18,23
   4d534:	e038d5fa 	srli	fp,fp,23
   4d538:	1104b03a 	or	r2,r2,r4
   4d53c:	9024927a 	slli	r18,r18,9
   4d540:	1004c03a 	cmpne	r2,r2,zero
   4d544:	bc62b03a 	or	r17,r23,r17
   4d548:	1738b03a 	or	fp,r2,fp
   4d54c:	8880402c 	andhi	r2,r17,256
   4d550:	e4a4b03a 	or	r18,fp,r18
   4d554:	10000726 	beq	r2,zero,4d574 <__muldf3+0x628>
   4d558:	9006d07a 	srli	r3,r18,1
   4d55c:	880497fa 	slli	r2,r17,31
   4d560:	9480004c 	andi	r18,r18,1
   4d564:	8822d07a 	srli	r17,r17,1
   4d568:	1ca4b03a 	or	r18,r3,r18
   4d56c:	14a4b03a 	or	r18,r2,r18
   4d570:	4007883a 	mov	r3,r8
   4d574:	1880ffc4 	addi	r2,r3,1023
   4d578:	0080460e 	bge	zero,r2,4d694 <__muldf3+0x748>
   4d57c:	910001cc 	andi	r4,r18,7
   4d580:	20000726 	beq	r4,zero,4d5a0 <__muldf3+0x654>
   4d584:	910003cc 	andi	r4,r18,15
   4d588:	01400104 	movi	r5,4
   4d58c:	21400426 	beq	r4,r5,4d5a0 <__muldf3+0x654>
   4d590:	9149883a 	add	r4,r18,r5
   4d594:	24a5803a 	cmpltu	r18,r4,r18
   4d598:	8ca3883a 	add	r17,r17,r18
   4d59c:	2025883a 	mov	r18,r4
   4d5a0:	8900402c 	andhi	r4,r17,256
   4d5a4:	20000426 	beq	r4,zero,4d5b8 <__muldf3+0x66c>
   4d5a8:	18810004 	addi	r2,r3,1024
   4d5ac:	00ffc034 	movhi	r3,65280
   4d5b0:	18ffffc4 	addi	r3,r3,-1
   4d5b4:	88e2703a 	and	r17,r17,r3
   4d5b8:	00c1ff84 	movi	r3,2046
   4d5bc:	18bf1316 	blt	r3,r2,4d20c <__alt_data_end+0xfffed20c>
   4d5c0:	882c977a 	slli	r22,r17,29
   4d5c4:	9024d0fa 	srli	r18,r18,3
   4d5c8:	8822927a 	slli	r17,r17,9
   4d5cc:	1081ffcc 	andi	r2,r2,2047
   4d5d0:	b4acb03a 	or	r22,r22,r18
   4d5d4:	8820d33a 	srli	r16,r17,12
   4d5d8:	3027883a 	mov	r19,r6
   4d5dc:	003eba06 	br	4d0c8 <__alt_data_end+0xfffed0c8>
   4d5e0:	8080022c 	andhi	r2,r16,8
   4d5e4:	10000926 	beq	r2,zero,4d60c <__muldf3+0x6c0>
   4d5e8:	8880022c 	andhi	r2,r17,8
   4d5ec:	1000071e 	bne	r2,zero,4d60c <__muldf3+0x6c0>
   4d5f0:	00800434 	movhi	r2,16
   4d5f4:	8c000234 	orhi	r16,r17,8
   4d5f8:	10bfffc4 	addi	r2,r2,-1
   4d5fc:	e027883a 	mov	r19,fp
   4d600:	80a0703a 	and	r16,r16,r2
   4d604:	902d883a 	mov	r22,r18
   4d608:	003f1706 	br	4d268 <__alt_data_end+0xfffed268>
   4d60c:	00800434 	movhi	r2,16
   4d610:	84000234 	orhi	r16,r16,8
   4d614:	10bfffc4 	addi	r2,r2,-1
   4d618:	80a0703a 	and	r16,r16,r2
   4d61c:	003f1206 	br	4d268 <__alt_data_end+0xfffed268>
   4d620:	147ff604 	addi	r17,r2,-40
   4d624:	3462983a 	sll	r17,r6,r17
   4d628:	0025883a 	mov	r18,zero
   4d62c:	003ef306 	br	4d1fc <__alt_data_end+0xfffed1fc>
   4d630:	3009883a 	mov	r4,r6
   4d634:	d9400215 	stw	r5,8(sp)
   4d638:	d9800715 	stw	r6,28(sp)
   4d63c:	da400415 	stw	r9,16(sp)
   4d640:	da800315 	stw	r10,12(sp)
   4d644:	00411040 	call	41104 <__clzsi2>
   4d648:	10800804 	addi	r2,r2,32
   4d64c:	da800317 	ldw	r10,12(sp)
   4d650:	da400417 	ldw	r9,16(sp)
   4d654:	d9800717 	ldw	r6,28(sp)
   4d658:	d9400217 	ldw	r5,8(sp)
   4d65c:	003edd06 	br	4d1d4 <__alt_data_end+0xfffed1d4>
   4d660:	143ff604 	addi	r16,r2,-40
   4d664:	ac20983a 	sll	r16,r21,r16
   4d668:	002d883a 	mov	r22,zero
   4d66c:	003ec106 	br	4d174 <__alt_data_end+0xfffed174>
   4d670:	d9800715 	stw	r6,28(sp)
   4d674:	d9c00215 	stw	r7,8(sp)
   4d678:	da400415 	stw	r9,16(sp)
   4d67c:	00411040 	call	41104 <__clzsi2>
   4d680:	10800804 	addi	r2,r2,32
   4d684:	da400417 	ldw	r9,16(sp)
   4d688:	d9c00217 	ldw	r7,8(sp)
   4d68c:	d9800717 	ldw	r6,28(sp)
   4d690:	003eae06 	br	4d14c <__alt_data_end+0xfffed14c>
   4d694:	00c00044 	movi	r3,1
   4d698:	1887c83a 	sub	r3,r3,r2
   4d69c:	01000e04 	movi	r4,56
   4d6a0:	20fe8516 	blt	r4,r3,4d0b8 <__alt_data_end+0xfffed0b8>
   4d6a4:	010007c4 	movi	r4,31
   4d6a8:	20c01b16 	blt	r4,r3,4d718 <__muldf3+0x7cc>
   4d6ac:	00800804 	movi	r2,32
   4d6b0:	10c5c83a 	sub	r2,r2,r3
   4d6b4:	888a983a 	sll	r5,r17,r2
   4d6b8:	90c8d83a 	srl	r4,r18,r3
   4d6bc:	9084983a 	sll	r2,r18,r2
   4d6c0:	88e2d83a 	srl	r17,r17,r3
   4d6c4:	2906b03a 	or	r3,r5,r4
   4d6c8:	1004c03a 	cmpne	r2,r2,zero
   4d6cc:	1886b03a 	or	r3,r3,r2
   4d6d0:	188001cc 	andi	r2,r3,7
   4d6d4:	10000726 	beq	r2,zero,4d6f4 <__muldf3+0x7a8>
   4d6d8:	188003cc 	andi	r2,r3,15
   4d6dc:	01000104 	movi	r4,4
   4d6e0:	11000426 	beq	r2,r4,4d6f4 <__muldf3+0x7a8>
   4d6e4:	1805883a 	mov	r2,r3
   4d6e8:	10c00104 	addi	r3,r2,4
   4d6ec:	1885803a 	cmpltu	r2,r3,r2
   4d6f0:	88a3883a 	add	r17,r17,r2
   4d6f4:	8880202c 	andhi	r2,r17,128
   4d6f8:	10001c26 	beq	r2,zero,4d76c <__muldf3+0x820>
   4d6fc:	3027883a 	mov	r19,r6
   4d700:	00800044 	movi	r2,1
   4d704:	0021883a 	mov	r16,zero
   4d708:	002d883a 	mov	r22,zero
   4d70c:	003e6e06 	br	4d0c8 <__alt_data_end+0xfffed0c8>
   4d710:	4007883a 	mov	r3,r8
   4d714:	003f9706 	br	4d574 <__alt_data_end+0xfffed574>
   4d718:	017ff844 	movi	r5,-31
   4d71c:	2885c83a 	sub	r2,r5,r2
   4d720:	888ad83a 	srl	r5,r17,r2
   4d724:	00800804 	movi	r2,32
   4d728:	18801a26 	beq	r3,r2,4d794 <__muldf3+0x848>
   4d72c:	01001004 	movi	r4,64
   4d730:	20c7c83a 	sub	r3,r4,r3
   4d734:	88e2983a 	sll	r17,r17,r3
   4d738:	8ca4b03a 	or	r18,r17,r18
   4d73c:	9004c03a 	cmpne	r2,r18,zero
   4d740:	2884b03a 	or	r2,r5,r2
   4d744:	144001cc 	andi	r17,r2,7
   4d748:	88000d1e 	bne	r17,zero,4d780 <__muldf3+0x834>
   4d74c:	0021883a 	mov	r16,zero
   4d750:	102cd0fa 	srli	r22,r2,3
   4d754:	3027883a 	mov	r19,r6
   4d758:	0005883a 	mov	r2,zero
   4d75c:	b46cb03a 	or	r22,r22,r17
   4d760:	003e5906 	br	4d0c8 <__alt_data_end+0xfffed0c8>
   4d764:	1007883a 	mov	r3,r2
   4d768:	0023883a 	mov	r17,zero
   4d76c:	8820927a 	slli	r16,r17,9
   4d770:	1805883a 	mov	r2,r3
   4d774:	8822977a 	slli	r17,r17,29
   4d778:	8020d33a 	srli	r16,r16,12
   4d77c:	003ff406 	br	4d750 <__alt_data_end+0xfffed750>
   4d780:	10c003cc 	andi	r3,r2,15
   4d784:	01000104 	movi	r4,4
   4d788:	193ff626 	beq	r3,r4,4d764 <__alt_data_end+0xfffed764>
   4d78c:	0023883a 	mov	r17,zero
   4d790:	003fd506 	br	4d6e8 <__alt_data_end+0xfffed6e8>
   4d794:	0023883a 	mov	r17,zero
   4d798:	003fe706 	br	4d738 <__alt_data_end+0xfffed738>
   4d79c:	00800434 	movhi	r2,16
   4d7a0:	8c000234 	orhi	r16,r17,8
   4d7a4:	10bfffc4 	addi	r2,r2,-1
   4d7a8:	3027883a 	mov	r19,r6
   4d7ac:	80a0703a 	and	r16,r16,r2
   4d7b0:	902d883a 	mov	r22,r18
   4d7b4:	003eac06 	br	4d268 <__alt_data_end+0xfffed268>

0004d7b8 <__subdf3>:
   4d7b8:	02000434 	movhi	r8,16
   4d7bc:	423fffc4 	addi	r8,r8,-1
   4d7c0:	defffb04 	addi	sp,sp,-20
   4d7c4:	2a14703a 	and	r10,r5,r8
   4d7c8:	3812d53a 	srli	r9,r7,20
   4d7cc:	3a10703a 	and	r8,r7,r8
   4d7d0:	2006d77a 	srli	r3,r4,29
   4d7d4:	3004d77a 	srli	r2,r6,29
   4d7d8:	dc000015 	stw	r16,0(sp)
   4d7dc:	501490fa 	slli	r10,r10,3
   4d7e0:	2820d53a 	srli	r16,r5,20
   4d7e4:	401090fa 	slli	r8,r8,3
   4d7e8:	dc800215 	stw	r18,8(sp)
   4d7ec:	dc400115 	stw	r17,4(sp)
   4d7f0:	dfc00415 	stw	ra,16(sp)
   4d7f4:	202290fa 	slli	r17,r4,3
   4d7f8:	dcc00315 	stw	r19,12(sp)
   4d7fc:	4a41ffcc 	andi	r9,r9,2047
   4d800:	0101ffc4 	movi	r4,2047
   4d804:	2824d7fa 	srli	r18,r5,31
   4d808:	8401ffcc 	andi	r16,r16,2047
   4d80c:	50c6b03a 	or	r3,r10,r3
   4d810:	380ed7fa 	srli	r7,r7,31
   4d814:	408ab03a 	or	r5,r8,r2
   4d818:	300c90fa 	slli	r6,r6,3
   4d81c:	49009626 	beq	r9,r4,4da78 <__subdf3+0x2c0>
   4d820:	39c0005c 	xori	r7,r7,1
   4d824:	8245c83a 	sub	r2,r16,r9
   4d828:	3c807426 	beq	r7,r18,4d9fc <__subdf3+0x244>
   4d82c:	0080af0e 	bge	zero,r2,4daec <__subdf3+0x334>
   4d830:	48002a1e 	bne	r9,zero,4d8dc <__subdf3+0x124>
   4d834:	2988b03a 	or	r4,r5,r6
   4d838:	20009a1e 	bne	r4,zero,4daa4 <__subdf3+0x2ec>
   4d83c:	888001cc 	andi	r2,r17,7
   4d840:	10000726 	beq	r2,zero,4d860 <__subdf3+0xa8>
   4d844:	888003cc 	andi	r2,r17,15
   4d848:	01000104 	movi	r4,4
   4d84c:	11000426 	beq	r2,r4,4d860 <__subdf3+0xa8>
   4d850:	890b883a 	add	r5,r17,r4
   4d854:	2c63803a 	cmpltu	r17,r5,r17
   4d858:	1c47883a 	add	r3,r3,r17
   4d85c:	2823883a 	mov	r17,r5
   4d860:	1880202c 	andhi	r2,r3,128
   4d864:	10005926 	beq	r2,zero,4d9cc <__subdf3+0x214>
   4d868:	84000044 	addi	r16,r16,1
   4d86c:	0081ffc4 	movi	r2,2047
   4d870:	8080be26 	beq	r16,r2,4db6c <__subdf3+0x3b4>
   4d874:	017fe034 	movhi	r5,65408
   4d878:	297fffc4 	addi	r5,r5,-1
   4d87c:	1946703a 	and	r3,r3,r5
   4d880:	1804977a 	slli	r2,r3,29
   4d884:	1806927a 	slli	r3,r3,9
   4d888:	8822d0fa 	srli	r17,r17,3
   4d88c:	8401ffcc 	andi	r16,r16,2047
   4d890:	180ad33a 	srli	r5,r3,12
   4d894:	9100004c 	andi	r4,r18,1
   4d898:	1444b03a 	or	r2,r2,r17
   4d89c:	80c1ffcc 	andi	r3,r16,2047
   4d8a0:	1820953a 	slli	r16,r3,20
   4d8a4:	20c03fcc 	andi	r3,r4,255
   4d8a8:	180897fa 	slli	r4,r3,31
   4d8ac:	00c00434 	movhi	r3,16
   4d8b0:	18ffffc4 	addi	r3,r3,-1
   4d8b4:	28c6703a 	and	r3,r5,r3
   4d8b8:	1c06b03a 	or	r3,r3,r16
   4d8bc:	1906b03a 	or	r3,r3,r4
   4d8c0:	dfc00417 	ldw	ra,16(sp)
   4d8c4:	dcc00317 	ldw	r19,12(sp)
   4d8c8:	dc800217 	ldw	r18,8(sp)
   4d8cc:	dc400117 	ldw	r17,4(sp)
   4d8d0:	dc000017 	ldw	r16,0(sp)
   4d8d4:	dec00504 	addi	sp,sp,20
   4d8d8:	f800283a 	ret
   4d8dc:	0101ffc4 	movi	r4,2047
   4d8e0:	813fd626 	beq	r16,r4,4d83c <__alt_data_end+0xfffed83c>
   4d8e4:	29402034 	orhi	r5,r5,128
   4d8e8:	01000e04 	movi	r4,56
   4d8ec:	2080a316 	blt	r4,r2,4db7c <__subdf3+0x3c4>
   4d8f0:	010007c4 	movi	r4,31
   4d8f4:	2080c616 	blt	r4,r2,4dc10 <__subdf3+0x458>
   4d8f8:	01000804 	movi	r4,32
   4d8fc:	2089c83a 	sub	r4,r4,r2
   4d900:	2910983a 	sll	r8,r5,r4
   4d904:	308ed83a 	srl	r7,r6,r2
   4d908:	3108983a 	sll	r4,r6,r4
   4d90c:	2884d83a 	srl	r2,r5,r2
   4d910:	41ccb03a 	or	r6,r8,r7
   4d914:	2008c03a 	cmpne	r4,r4,zero
   4d918:	310cb03a 	or	r6,r6,r4
   4d91c:	898dc83a 	sub	r6,r17,r6
   4d920:	89a3803a 	cmpltu	r17,r17,r6
   4d924:	1887c83a 	sub	r3,r3,r2
   4d928:	1c47c83a 	sub	r3,r3,r17
   4d92c:	3023883a 	mov	r17,r6
   4d930:	1880202c 	andhi	r2,r3,128
   4d934:	10002326 	beq	r2,zero,4d9c4 <__subdf3+0x20c>
   4d938:	04c02034 	movhi	r19,128
   4d93c:	9cffffc4 	addi	r19,r19,-1
   4d940:	1ce6703a 	and	r19,r3,r19
   4d944:	98007a26 	beq	r19,zero,4db30 <__subdf3+0x378>
   4d948:	9809883a 	mov	r4,r19
   4d94c:	00411040 	call	41104 <__clzsi2>
   4d950:	113ffe04 	addi	r4,r2,-8
   4d954:	00c007c4 	movi	r3,31
   4d958:	19007b16 	blt	r3,r4,4db48 <__subdf3+0x390>
   4d95c:	00800804 	movi	r2,32
   4d960:	1105c83a 	sub	r2,r2,r4
   4d964:	8884d83a 	srl	r2,r17,r2
   4d968:	9906983a 	sll	r3,r19,r4
   4d96c:	8922983a 	sll	r17,r17,r4
   4d970:	10c4b03a 	or	r2,r2,r3
   4d974:	24007816 	blt	r4,r16,4db58 <__subdf3+0x3a0>
   4d978:	2421c83a 	sub	r16,r4,r16
   4d97c:	80c00044 	addi	r3,r16,1
   4d980:	010007c4 	movi	r4,31
   4d984:	20c09516 	blt	r4,r3,4dbdc <__subdf3+0x424>
   4d988:	01400804 	movi	r5,32
   4d98c:	28cbc83a 	sub	r5,r5,r3
   4d990:	88c8d83a 	srl	r4,r17,r3
   4d994:	8962983a 	sll	r17,r17,r5
   4d998:	114a983a 	sll	r5,r2,r5
   4d99c:	10c6d83a 	srl	r3,r2,r3
   4d9a0:	8804c03a 	cmpne	r2,r17,zero
   4d9a4:	290ab03a 	or	r5,r5,r4
   4d9a8:	28a2b03a 	or	r17,r5,r2
   4d9ac:	0021883a 	mov	r16,zero
   4d9b0:	003fa206 	br	4d83c <__alt_data_end+0xfffed83c>
   4d9b4:	2090b03a 	or	r8,r4,r2
   4d9b8:	40018e26 	beq	r8,zero,4dff4 <__subdf3+0x83c>
   4d9bc:	1007883a 	mov	r3,r2
   4d9c0:	2023883a 	mov	r17,r4
   4d9c4:	888001cc 	andi	r2,r17,7
   4d9c8:	103f9e1e 	bne	r2,zero,4d844 <__alt_data_end+0xfffed844>
   4d9cc:	1804977a 	slli	r2,r3,29
   4d9d0:	8822d0fa 	srli	r17,r17,3
   4d9d4:	1810d0fa 	srli	r8,r3,3
   4d9d8:	9100004c 	andi	r4,r18,1
   4d9dc:	1444b03a 	or	r2,r2,r17
   4d9e0:	00c1ffc4 	movi	r3,2047
   4d9e4:	80c02826 	beq	r16,r3,4da88 <__subdf3+0x2d0>
   4d9e8:	01400434 	movhi	r5,16
   4d9ec:	297fffc4 	addi	r5,r5,-1
   4d9f0:	80e0703a 	and	r16,r16,r3
   4d9f4:	414a703a 	and	r5,r8,r5
   4d9f8:	003fa806 	br	4d89c <__alt_data_end+0xfffed89c>
   4d9fc:	0080630e 	bge	zero,r2,4db8c <__subdf3+0x3d4>
   4da00:	48003026 	beq	r9,zero,4dac4 <__subdf3+0x30c>
   4da04:	0101ffc4 	movi	r4,2047
   4da08:	813f8c26 	beq	r16,r4,4d83c <__alt_data_end+0xfffed83c>
   4da0c:	29402034 	orhi	r5,r5,128
   4da10:	01000e04 	movi	r4,56
   4da14:	2080a90e 	bge	r4,r2,4dcbc <__subdf3+0x504>
   4da18:	298cb03a 	or	r6,r5,r6
   4da1c:	3012c03a 	cmpne	r9,r6,zero
   4da20:	0005883a 	mov	r2,zero
   4da24:	4c53883a 	add	r9,r9,r17
   4da28:	4c63803a 	cmpltu	r17,r9,r17
   4da2c:	10c7883a 	add	r3,r2,r3
   4da30:	88c7883a 	add	r3,r17,r3
   4da34:	4823883a 	mov	r17,r9
   4da38:	1880202c 	andhi	r2,r3,128
   4da3c:	1000d026 	beq	r2,zero,4dd80 <__subdf3+0x5c8>
   4da40:	84000044 	addi	r16,r16,1
   4da44:	0081ffc4 	movi	r2,2047
   4da48:	8080fe26 	beq	r16,r2,4de44 <__subdf3+0x68c>
   4da4c:	00bfe034 	movhi	r2,65408
   4da50:	10bfffc4 	addi	r2,r2,-1
   4da54:	1886703a 	and	r3,r3,r2
   4da58:	880ad07a 	srli	r5,r17,1
   4da5c:	180497fa 	slli	r2,r3,31
   4da60:	8900004c 	andi	r4,r17,1
   4da64:	2922b03a 	or	r17,r5,r4
   4da68:	1806d07a 	srli	r3,r3,1
   4da6c:	1462b03a 	or	r17,r2,r17
   4da70:	3825883a 	mov	r18,r7
   4da74:	003f7106 	br	4d83c <__alt_data_end+0xfffed83c>
   4da78:	2984b03a 	or	r2,r5,r6
   4da7c:	103f6826 	beq	r2,zero,4d820 <__alt_data_end+0xfffed820>
   4da80:	39c03fcc 	andi	r7,r7,255
   4da84:	003f6706 	br	4d824 <__alt_data_end+0xfffed824>
   4da88:	4086b03a 	or	r3,r8,r2
   4da8c:	18015226 	beq	r3,zero,4dfd8 <__subdf3+0x820>
   4da90:	00c00434 	movhi	r3,16
   4da94:	41400234 	orhi	r5,r8,8
   4da98:	18ffffc4 	addi	r3,r3,-1
   4da9c:	28ca703a 	and	r5,r5,r3
   4daa0:	003f7e06 	br	4d89c <__alt_data_end+0xfffed89c>
   4daa4:	10bfffc4 	addi	r2,r2,-1
   4daa8:	1000491e 	bne	r2,zero,4dbd0 <__subdf3+0x418>
   4daac:	898fc83a 	sub	r7,r17,r6
   4dab0:	89e3803a 	cmpltu	r17,r17,r7
   4dab4:	1947c83a 	sub	r3,r3,r5
   4dab8:	1c47c83a 	sub	r3,r3,r17
   4dabc:	3823883a 	mov	r17,r7
   4dac0:	003f9b06 	br	4d930 <__alt_data_end+0xfffed930>
   4dac4:	2988b03a 	or	r4,r5,r6
   4dac8:	203f5c26 	beq	r4,zero,4d83c <__alt_data_end+0xfffed83c>
   4dacc:	10bfffc4 	addi	r2,r2,-1
   4dad0:	1000931e 	bne	r2,zero,4dd20 <__subdf3+0x568>
   4dad4:	898d883a 	add	r6,r17,r6
   4dad8:	3463803a 	cmpltu	r17,r6,r17
   4dadc:	1947883a 	add	r3,r3,r5
   4dae0:	88c7883a 	add	r3,r17,r3
   4dae4:	3023883a 	mov	r17,r6
   4dae8:	003fd306 	br	4da38 <__alt_data_end+0xfffeda38>
   4daec:	1000541e 	bne	r2,zero,4dc40 <__subdf3+0x488>
   4daf0:	80800044 	addi	r2,r16,1
   4daf4:	1081ffcc 	andi	r2,r2,2047
   4daf8:	01000044 	movi	r4,1
   4dafc:	2080a20e 	bge	r4,r2,4dd88 <__subdf3+0x5d0>
   4db00:	8989c83a 	sub	r4,r17,r6
   4db04:	8905803a 	cmpltu	r2,r17,r4
   4db08:	1967c83a 	sub	r19,r3,r5
   4db0c:	98a7c83a 	sub	r19,r19,r2
   4db10:	9880202c 	andhi	r2,r19,128
   4db14:	10006326 	beq	r2,zero,4dca4 <__subdf3+0x4ec>
   4db18:	3463c83a 	sub	r17,r6,r17
   4db1c:	28c7c83a 	sub	r3,r5,r3
   4db20:	344d803a 	cmpltu	r6,r6,r17
   4db24:	19a7c83a 	sub	r19,r3,r6
   4db28:	3825883a 	mov	r18,r7
   4db2c:	983f861e 	bne	r19,zero,4d948 <__alt_data_end+0xfffed948>
   4db30:	8809883a 	mov	r4,r17
   4db34:	00411040 	call	41104 <__clzsi2>
   4db38:	10800804 	addi	r2,r2,32
   4db3c:	113ffe04 	addi	r4,r2,-8
   4db40:	00c007c4 	movi	r3,31
   4db44:	193f850e 	bge	r3,r4,4d95c <__alt_data_end+0xfffed95c>
   4db48:	10bff604 	addi	r2,r2,-40
   4db4c:	8884983a 	sll	r2,r17,r2
   4db50:	0023883a 	mov	r17,zero
   4db54:	243f880e 	bge	r4,r16,4d978 <__alt_data_end+0xfffed978>
   4db58:	00ffe034 	movhi	r3,65408
   4db5c:	18ffffc4 	addi	r3,r3,-1
   4db60:	8121c83a 	sub	r16,r16,r4
   4db64:	10c6703a 	and	r3,r2,r3
   4db68:	003f3406 	br	4d83c <__alt_data_end+0xfffed83c>
   4db6c:	9100004c 	andi	r4,r18,1
   4db70:	000b883a 	mov	r5,zero
   4db74:	0005883a 	mov	r2,zero
   4db78:	003f4806 	br	4d89c <__alt_data_end+0xfffed89c>
   4db7c:	298cb03a 	or	r6,r5,r6
   4db80:	300cc03a 	cmpne	r6,r6,zero
   4db84:	0005883a 	mov	r2,zero
   4db88:	003f6406 	br	4d91c <__alt_data_end+0xfffed91c>
   4db8c:	10009a1e 	bne	r2,zero,4ddf8 <__subdf3+0x640>
   4db90:	82400044 	addi	r9,r16,1
   4db94:	4881ffcc 	andi	r2,r9,2047
   4db98:	02800044 	movi	r10,1
   4db9c:	5080670e 	bge	r10,r2,4dd3c <__subdf3+0x584>
   4dba0:	0081ffc4 	movi	r2,2047
   4dba4:	4880af26 	beq	r9,r2,4de64 <__subdf3+0x6ac>
   4dba8:	898d883a 	add	r6,r17,r6
   4dbac:	1945883a 	add	r2,r3,r5
   4dbb0:	3447803a 	cmpltu	r3,r6,r17
   4dbb4:	1887883a 	add	r3,r3,r2
   4dbb8:	182297fa 	slli	r17,r3,31
   4dbbc:	300cd07a 	srli	r6,r6,1
   4dbc0:	1806d07a 	srli	r3,r3,1
   4dbc4:	4821883a 	mov	r16,r9
   4dbc8:	89a2b03a 	or	r17,r17,r6
   4dbcc:	003f1b06 	br	4d83c <__alt_data_end+0xfffed83c>
   4dbd0:	0101ffc4 	movi	r4,2047
   4dbd4:	813f441e 	bne	r16,r4,4d8e8 <__alt_data_end+0xfffed8e8>
   4dbd8:	003f1806 	br	4d83c <__alt_data_end+0xfffed83c>
   4dbdc:	843ff844 	addi	r16,r16,-31
   4dbe0:	01400804 	movi	r5,32
   4dbe4:	1408d83a 	srl	r4,r2,r16
   4dbe8:	19405026 	beq	r3,r5,4dd2c <__subdf3+0x574>
   4dbec:	01401004 	movi	r5,64
   4dbf0:	28c7c83a 	sub	r3,r5,r3
   4dbf4:	10c4983a 	sll	r2,r2,r3
   4dbf8:	88a2b03a 	or	r17,r17,r2
   4dbfc:	8822c03a 	cmpne	r17,r17,zero
   4dc00:	2462b03a 	or	r17,r4,r17
   4dc04:	0007883a 	mov	r3,zero
   4dc08:	0021883a 	mov	r16,zero
   4dc0c:	003f6d06 	br	4d9c4 <__alt_data_end+0xfffed9c4>
   4dc10:	11fff804 	addi	r7,r2,-32
   4dc14:	01000804 	movi	r4,32
   4dc18:	29ced83a 	srl	r7,r5,r7
   4dc1c:	11004526 	beq	r2,r4,4dd34 <__subdf3+0x57c>
   4dc20:	01001004 	movi	r4,64
   4dc24:	2089c83a 	sub	r4,r4,r2
   4dc28:	2904983a 	sll	r2,r5,r4
   4dc2c:	118cb03a 	or	r6,r2,r6
   4dc30:	300cc03a 	cmpne	r6,r6,zero
   4dc34:	398cb03a 	or	r6,r7,r6
   4dc38:	0005883a 	mov	r2,zero
   4dc3c:	003f3706 	br	4d91c <__alt_data_end+0xfffed91c>
   4dc40:	80002a26 	beq	r16,zero,4dcec <__subdf3+0x534>
   4dc44:	0101ffc4 	movi	r4,2047
   4dc48:	49006626 	beq	r9,r4,4dde4 <__subdf3+0x62c>
   4dc4c:	0085c83a 	sub	r2,zero,r2
   4dc50:	18c02034 	orhi	r3,r3,128
   4dc54:	01000e04 	movi	r4,56
   4dc58:	20807e16 	blt	r4,r2,4de54 <__subdf3+0x69c>
   4dc5c:	010007c4 	movi	r4,31
   4dc60:	2080e716 	blt	r4,r2,4e000 <__subdf3+0x848>
   4dc64:	01000804 	movi	r4,32
   4dc68:	2089c83a 	sub	r4,r4,r2
   4dc6c:	1914983a 	sll	r10,r3,r4
   4dc70:	8890d83a 	srl	r8,r17,r2
   4dc74:	8908983a 	sll	r4,r17,r4
   4dc78:	1884d83a 	srl	r2,r3,r2
   4dc7c:	5222b03a 	or	r17,r10,r8
   4dc80:	2006c03a 	cmpne	r3,r4,zero
   4dc84:	88e2b03a 	or	r17,r17,r3
   4dc88:	3463c83a 	sub	r17,r6,r17
   4dc8c:	2885c83a 	sub	r2,r5,r2
   4dc90:	344d803a 	cmpltu	r6,r6,r17
   4dc94:	1187c83a 	sub	r3,r2,r6
   4dc98:	4821883a 	mov	r16,r9
   4dc9c:	3825883a 	mov	r18,r7
   4dca0:	003f2306 	br	4d930 <__alt_data_end+0xfffed930>
   4dca4:	24d0b03a 	or	r8,r4,r19
   4dca8:	40001b1e 	bne	r8,zero,4dd18 <__subdf3+0x560>
   4dcac:	0005883a 	mov	r2,zero
   4dcb0:	0009883a 	mov	r4,zero
   4dcb4:	0021883a 	mov	r16,zero
   4dcb8:	003f4906 	br	4d9e0 <__alt_data_end+0xfffed9e0>
   4dcbc:	010007c4 	movi	r4,31
   4dcc0:	20803a16 	blt	r4,r2,4ddac <__subdf3+0x5f4>
   4dcc4:	01000804 	movi	r4,32
   4dcc8:	2089c83a 	sub	r4,r4,r2
   4dccc:	2912983a 	sll	r9,r5,r4
   4dcd0:	3090d83a 	srl	r8,r6,r2
   4dcd4:	3108983a 	sll	r4,r6,r4
   4dcd8:	2884d83a 	srl	r2,r5,r2
   4dcdc:	4a12b03a 	or	r9,r9,r8
   4dce0:	2008c03a 	cmpne	r4,r4,zero
   4dce4:	4912b03a 	or	r9,r9,r4
   4dce8:	003f4e06 	br	4da24 <__alt_data_end+0xfffeda24>
   4dcec:	1c48b03a 	or	r4,r3,r17
   4dcf0:	20003c26 	beq	r4,zero,4dde4 <__subdf3+0x62c>
   4dcf4:	0084303a 	nor	r2,zero,r2
   4dcf8:	1000381e 	bne	r2,zero,4dddc <__subdf3+0x624>
   4dcfc:	3463c83a 	sub	r17,r6,r17
   4dd00:	28c5c83a 	sub	r2,r5,r3
   4dd04:	344d803a 	cmpltu	r6,r6,r17
   4dd08:	1187c83a 	sub	r3,r2,r6
   4dd0c:	4821883a 	mov	r16,r9
   4dd10:	3825883a 	mov	r18,r7
   4dd14:	003f0606 	br	4d930 <__alt_data_end+0xfffed930>
   4dd18:	2023883a 	mov	r17,r4
   4dd1c:	003f0906 	br	4d944 <__alt_data_end+0xfffed944>
   4dd20:	0101ffc4 	movi	r4,2047
   4dd24:	813f3a1e 	bne	r16,r4,4da10 <__alt_data_end+0xfffeda10>
   4dd28:	003ec406 	br	4d83c <__alt_data_end+0xfffed83c>
   4dd2c:	0005883a 	mov	r2,zero
   4dd30:	003fb106 	br	4dbf8 <__alt_data_end+0xfffedbf8>
   4dd34:	0005883a 	mov	r2,zero
   4dd38:	003fbc06 	br	4dc2c <__alt_data_end+0xfffedc2c>
   4dd3c:	1c44b03a 	or	r2,r3,r17
   4dd40:	80008e1e 	bne	r16,zero,4df7c <__subdf3+0x7c4>
   4dd44:	1000c826 	beq	r2,zero,4e068 <__subdf3+0x8b0>
   4dd48:	2984b03a 	or	r2,r5,r6
   4dd4c:	103ebb26 	beq	r2,zero,4d83c <__alt_data_end+0xfffed83c>
   4dd50:	8989883a 	add	r4,r17,r6
   4dd54:	1945883a 	add	r2,r3,r5
   4dd58:	2447803a 	cmpltu	r3,r4,r17
   4dd5c:	1887883a 	add	r3,r3,r2
   4dd60:	1880202c 	andhi	r2,r3,128
   4dd64:	2023883a 	mov	r17,r4
   4dd68:	103f1626 	beq	r2,zero,4d9c4 <__alt_data_end+0xfffed9c4>
   4dd6c:	00bfe034 	movhi	r2,65408
   4dd70:	10bfffc4 	addi	r2,r2,-1
   4dd74:	5021883a 	mov	r16,r10
   4dd78:	1886703a 	and	r3,r3,r2
   4dd7c:	003eaf06 	br	4d83c <__alt_data_end+0xfffed83c>
   4dd80:	3825883a 	mov	r18,r7
   4dd84:	003f0f06 	br	4d9c4 <__alt_data_end+0xfffed9c4>
   4dd88:	1c44b03a 	or	r2,r3,r17
   4dd8c:	8000251e 	bne	r16,zero,4de24 <__subdf3+0x66c>
   4dd90:	1000661e 	bne	r2,zero,4df2c <__subdf3+0x774>
   4dd94:	2990b03a 	or	r8,r5,r6
   4dd98:	40009626 	beq	r8,zero,4dff4 <__subdf3+0x83c>
   4dd9c:	2807883a 	mov	r3,r5
   4dda0:	3023883a 	mov	r17,r6
   4dda4:	3825883a 	mov	r18,r7
   4dda8:	003ea406 	br	4d83c <__alt_data_end+0xfffed83c>
   4ddac:	127ff804 	addi	r9,r2,-32
   4ddb0:	01000804 	movi	r4,32
   4ddb4:	2a52d83a 	srl	r9,r5,r9
   4ddb8:	11008c26 	beq	r2,r4,4dfec <__subdf3+0x834>
   4ddbc:	01001004 	movi	r4,64
   4ddc0:	2085c83a 	sub	r2,r4,r2
   4ddc4:	2884983a 	sll	r2,r5,r2
   4ddc8:	118cb03a 	or	r6,r2,r6
   4ddcc:	300cc03a 	cmpne	r6,r6,zero
   4ddd0:	4992b03a 	or	r9,r9,r6
   4ddd4:	0005883a 	mov	r2,zero
   4ddd8:	003f1206 	br	4da24 <__alt_data_end+0xfffeda24>
   4dddc:	0101ffc4 	movi	r4,2047
   4dde0:	493f9c1e 	bne	r9,r4,4dc54 <__alt_data_end+0xfffedc54>
   4dde4:	2807883a 	mov	r3,r5
   4dde8:	3023883a 	mov	r17,r6
   4ddec:	4821883a 	mov	r16,r9
   4ddf0:	3825883a 	mov	r18,r7
   4ddf4:	003e9106 	br	4d83c <__alt_data_end+0xfffed83c>
   4ddf8:	80001f1e 	bne	r16,zero,4de78 <__subdf3+0x6c0>
   4ddfc:	1c48b03a 	or	r4,r3,r17
   4de00:	20005a26 	beq	r4,zero,4df6c <__subdf3+0x7b4>
   4de04:	0084303a 	nor	r2,zero,r2
   4de08:	1000561e 	bne	r2,zero,4df64 <__subdf3+0x7ac>
   4de0c:	89a3883a 	add	r17,r17,r6
   4de10:	1945883a 	add	r2,r3,r5
   4de14:	898d803a 	cmpltu	r6,r17,r6
   4de18:	3087883a 	add	r3,r6,r2
   4de1c:	4821883a 	mov	r16,r9
   4de20:	003f0506 	br	4da38 <__alt_data_end+0xfffeda38>
   4de24:	10002b1e 	bne	r2,zero,4ded4 <__subdf3+0x71c>
   4de28:	2984b03a 	or	r2,r5,r6
   4de2c:	10008026 	beq	r2,zero,4e030 <__subdf3+0x878>
   4de30:	2807883a 	mov	r3,r5
   4de34:	3023883a 	mov	r17,r6
   4de38:	3825883a 	mov	r18,r7
   4de3c:	0401ffc4 	movi	r16,2047
   4de40:	003e7e06 	br	4d83c <__alt_data_end+0xfffed83c>
   4de44:	3809883a 	mov	r4,r7
   4de48:	0011883a 	mov	r8,zero
   4de4c:	0005883a 	mov	r2,zero
   4de50:	003ee306 	br	4d9e0 <__alt_data_end+0xfffed9e0>
   4de54:	1c62b03a 	or	r17,r3,r17
   4de58:	8822c03a 	cmpne	r17,r17,zero
   4de5c:	0005883a 	mov	r2,zero
   4de60:	003f8906 	br	4dc88 <__alt_data_end+0xfffedc88>
   4de64:	3809883a 	mov	r4,r7
   4de68:	4821883a 	mov	r16,r9
   4de6c:	0011883a 	mov	r8,zero
   4de70:	0005883a 	mov	r2,zero
   4de74:	003eda06 	br	4d9e0 <__alt_data_end+0xfffed9e0>
   4de78:	0101ffc4 	movi	r4,2047
   4de7c:	49003b26 	beq	r9,r4,4df6c <__subdf3+0x7b4>
   4de80:	0085c83a 	sub	r2,zero,r2
   4de84:	18c02034 	orhi	r3,r3,128
   4de88:	01000e04 	movi	r4,56
   4de8c:	20806e16 	blt	r4,r2,4e048 <__subdf3+0x890>
   4de90:	010007c4 	movi	r4,31
   4de94:	20807716 	blt	r4,r2,4e074 <__subdf3+0x8bc>
   4de98:	01000804 	movi	r4,32
   4de9c:	2089c83a 	sub	r4,r4,r2
   4dea0:	1914983a 	sll	r10,r3,r4
   4dea4:	8890d83a 	srl	r8,r17,r2
   4dea8:	8908983a 	sll	r4,r17,r4
   4deac:	1884d83a 	srl	r2,r3,r2
   4deb0:	5222b03a 	or	r17,r10,r8
   4deb4:	2006c03a 	cmpne	r3,r4,zero
   4deb8:	88e2b03a 	or	r17,r17,r3
   4debc:	89a3883a 	add	r17,r17,r6
   4dec0:	1145883a 	add	r2,r2,r5
   4dec4:	898d803a 	cmpltu	r6,r17,r6
   4dec8:	3087883a 	add	r3,r6,r2
   4decc:	4821883a 	mov	r16,r9
   4ded0:	003ed906 	br	4da38 <__alt_data_end+0xfffeda38>
   4ded4:	2984b03a 	or	r2,r5,r6
   4ded8:	10004226 	beq	r2,zero,4dfe4 <__subdf3+0x82c>
   4dedc:	1808d0fa 	srli	r4,r3,3
   4dee0:	8822d0fa 	srli	r17,r17,3
   4dee4:	1806977a 	slli	r3,r3,29
   4dee8:	2080022c 	andhi	r2,r4,8
   4deec:	1c62b03a 	or	r17,r3,r17
   4def0:	10000826 	beq	r2,zero,4df14 <__subdf3+0x75c>
   4def4:	2812d0fa 	srli	r9,r5,3
   4def8:	4880022c 	andhi	r2,r9,8
   4defc:	1000051e 	bne	r2,zero,4df14 <__subdf3+0x75c>
   4df00:	300cd0fa 	srli	r6,r6,3
   4df04:	2804977a 	slli	r2,r5,29
   4df08:	4809883a 	mov	r4,r9
   4df0c:	3825883a 	mov	r18,r7
   4df10:	11a2b03a 	or	r17,r2,r6
   4df14:	8806d77a 	srli	r3,r17,29
   4df18:	200890fa 	slli	r4,r4,3
   4df1c:	882290fa 	slli	r17,r17,3
   4df20:	0401ffc4 	movi	r16,2047
   4df24:	1906b03a 	or	r3,r3,r4
   4df28:	003e4406 	br	4d83c <__alt_data_end+0xfffed83c>
   4df2c:	2984b03a 	or	r2,r5,r6
   4df30:	103e4226 	beq	r2,zero,4d83c <__alt_data_end+0xfffed83c>
   4df34:	8989c83a 	sub	r4,r17,r6
   4df38:	8911803a 	cmpltu	r8,r17,r4
   4df3c:	1945c83a 	sub	r2,r3,r5
   4df40:	1205c83a 	sub	r2,r2,r8
   4df44:	1200202c 	andhi	r8,r2,128
   4df48:	403e9a26 	beq	r8,zero,4d9b4 <__alt_data_end+0xfffed9b4>
   4df4c:	3463c83a 	sub	r17,r6,r17
   4df50:	28c5c83a 	sub	r2,r5,r3
   4df54:	344d803a 	cmpltu	r6,r6,r17
   4df58:	1187c83a 	sub	r3,r2,r6
   4df5c:	3825883a 	mov	r18,r7
   4df60:	003e3606 	br	4d83c <__alt_data_end+0xfffed83c>
   4df64:	0101ffc4 	movi	r4,2047
   4df68:	493fc71e 	bne	r9,r4,4de88 <__alt_data_end+0xfffede88>
   4df6c:	2807883a 	mov	r3,r5
   4df70:	3023883a 	mov	r17,r6
   4df74:	4821883a 	mov	r16,r9
   4df78:	003e3006 	br	4d83c <__alt_data_end+0xfffed83c>
   4df7c:	10003626 	beq	r2,zero,4e058 <__subdf3+0x8a0>
   4df80:	2984b03a 	or	r2,r5,r6
   4df84:	10001726 	beq	r2,zero,4dfe4 <__subdf3+0x82c>
   4df88:	1808d0fa 	srli	r4,r3,3
   4df8c:	8822d0fa 	srli	r17,r17,3
   4df90:	1806977a 	slli	r3,r3,29
   4df94:	2080022c 	andhi	r2,r4,8
   4df98:	1c62b03a 	or	r17,r3,r17
   4df9c:	10000726 	beq	r2,zero,4dfbc <__subdf3+0x804>
   4dfa0:	2812d0fa 	srli	r9,r5,3
   4dfa4:	4880022c 	andhi	r2,r9,8
   4dfa8:	1000041e 	bne	r2,zero,4dfbc <__subdf3+0x804>
   4dfac:	300cd0fa 	srli	r6,r6,3
   4dfb0:	2804977a 	slli	r2,r5,29
   4dfb4:	4809883a 	mov	r4,r9
   4dfb8:	11a2b03a 	or	r17,r2,r6
   4dfbc:	8806d77a 	srli	r3,r17,29
   4dfc0:	200890fa 	slli	r4,r4,3
   4dfc4:	882290fa 	slli	r17,r17,3
   4dfc8:	3825883a 	mov	r18,r7
   4dfcc:	1906b03a 	or	r3,r3,r4
   4dfd0:	0401ffc4 	movi	r16,2047
   4dfd4:	003e1906 	br	4d83c <__alt_data_end+0xfffed83c>
   4dfd8:	000b883a 	mov	r5,zero
   4dfdc:	0005883a 	mov	r2,zero
   4dfe0:	003e2e06 	br	4d89c <__alt_data_end+0xfffed89c>
   4dfe4:	0401ffc4 	movi	r16,2047
   4dfe8:	003e1406 	br	4d83c <__alt_data_end+0xfffed83c>
   4dfec:	0005883a 	mov	r2,zero
   4dff0:	003f7506 	br	4ddc8 <__alt_data_end+0xfffeddc8>
   4dff4:	0005883a 	mov	r2,zero
   4dff8:	0009883a 	mov	r4,zero
   4dffc:	003e7806 	br	4d9e0 <__alt_data_end+0xfffed9e0>
   4e000:	123ff804 	addi	r8,r2,-32
   4e004:	01000804 	movi	r4,32
   4e008:	1a10d83a 	srl	r8,r3,r8
   4e00c:	11002526 	beq	r2,r4,4e0a4 <__subdf3+0x8ec>
   4e010:	01001004 	movi	r4,64
   4e014:	2085c83a 	sub	r2,r4,r2
   4e018:	1884983a 	sll	r2,r3,r2
   4e01c:	1444b03a 	or	r2,r2,r17
   4e020:	1004c03a 	cmpne	r2,r2,zero
   4e024:	40a2b03a 	or	r17,r8,r2
   4e028:	0005883a 	mov	r2,zero
   4e02c:	003f1606 	br	4dc88 <__alt_data_end+0xfffedc88>
   4e030:	02000434 	movhi	r8,16
   4e034:	0009883a 	mov	r4,zero
   4e038:	423fffc4 	addi	r8,r8,-1
   4e03c:	00bfffc4 	movi	r2,-1
   4e040:	0401ffc4 	movi	r16,2047
   4e044:	003e6606 	br	4d9e0 <__alt_data_end+0xfffed9e0>
   4e048:	1c62b03a 	or	r17,r3,r17
   4e04c:	8822c03a 	cmpne	r17,r17,zero
   4e050:	0005883a 	mov	r2,zero
   4e054:	003f9906 	br	4debc <__alt_data_end+0xfffedebc>
   4e058:	2807883a 	mov	r3,r5
   4e05c:	3023883a 	mov	r17,r6
   4e060:	0401ffc4 	movi	r16,2047
   4e064:	003df506 	br	4d83c <__alt_data_end+0xfffed83c>
   4e068:	2807883a 	mov	r3,r5
   4e06c:	3023883a 	mov	r17,r6
   4e070:	003df206 	br	4d83c <__alt_data_end+0xfffed83c>
   4e074:	123ff804 	addi	r8,r2,-32
   4e078:	01000804 	movi	r4,32
   4e07c:	1a10d83a 	srl	r8,r3,r8
   4e080:	11000a26 	beq	r2,r4,4e0ac <__subdf3+0x8f4>
   4e084:	01001004 	movi	r4,64
   4e088:	2085c83a 	sub	r2,r4,r2
   4e08c:	1884983a 	sll	r2,r3,r2
   4e090:	1444b03a 	or	r2,r2,r17
   4e094:	1004c03a 	cmpne	r2,r2,zero
   4e098:	40a2b03a 	or	r17,r8,r2
   4e09c:	0005883a 	mov	r2,zero
   4e0a0:	003f8606 	br	4debc <__alt_data_end+0xfffedebc>
   4e0a4:	0005883a 	mov	r2,zero
   4e0a8:	003fdc06 	br	4e01c <__alt_data_end+0xfffee01c>
   4e0ac:	0005883a 	mov	r2,zero
   4e0b0:	003ff706 	br	4e090 <__alt_data_end+0xfffee090>

0004e0b4 <__fixdfsi>:
   4e0b4:	280cd53a 	srli	r6,r5,20
   4e0b8:	00c00434 	movhi	r3,16
   4e0bc:	18ffffc4 	addi	r3,r3,-1
   4e0c0:	3181ffcc 	andi	r6,r6,2047
   4e0c4:	01c0ff84 	movi	r7,1022
   4e0c8:	28c6703a 	and	r3,r5,r3
   4e0cc:	280ad7fa 	srli	r5,r5,31
   4e0d0:	3980120e 	bge	r7,r6,4e11c <__fixdfsi+0x68>
   4e0d4:	00810744 	movi	r2,1053
   4e0d8:	11800c16 	blt	r2,r6,4e10c <__fixdfsi+0x58>
   4e0dc:	00810cc4 	movi	r2,1075
   4e0e0:	1185c83a 	sub	r2,r2,r6
   4e0e4:	01c007c4 	movi	r7,31
   4e0e8:	18c00434 	orhi	r3,r3,16
   4e0ec:	38800d16 	blt	r7,r2,4e124 <__fixdfsi+0x70>
   4e0f0:	31befb44 	addi	r6,r6,-1043
   4e0f4:	2084d83a 	srl	r2,r4,r2
   4e0f8:	1986983a 	sll	r3,r3,r6
   4e0fc:	1884b03a 	or	r2,r3,r2
   4e100:	28000726 	beq	r5,zero,4e120 <__fixdfsi+0x6c>
   4e104:	0085c83a 	sub	r2,zero,r2
   4e108:	f800283a 	ret
   4e10c:	00a00034 	movhi	r2,32768
   4e110:	10bfffc4 	addi	r2,r2,-1
   4e114:	2885883a 	add	r2,r5,r2
   4e118:	f800283a 	ret
   4e11c:	0005883a 	mov	r2,zero
   4e120:	f800283a 	ret
   4e124:	008104c4 	movi	r2,1043
   4e128:	1185c83a 	sub	r2,r2,r6
   4e12c:	1884d83a 	srl	r2,r3,r2
   4e130:	003ff306 	br	4e100 <__alt_data_end+0xfffee100>

0004e134 <__floatsidf>:
   4e134:	defffd04 	addi	sp,sp,-12
   4e138:	dfc00215 	stw	ra,8(sp)
   4e13c:	dc400115 	stw	r17,4(sp)
   4e140:	dc000015 	stw	r16,0(sp)
   4e144:	20002b26 	beq	r4,zero,4e1f4 <__floatsidf+0xc0>
   4e148:	2023883a 	mov	r17,r4
   4e14c:	2020d7fa 	srli	r16,r4,31
   4e150:	20002d16 	blt	r4,zero,4e208 <__floatsidf+0xd4>
   4e154:	8809883a 	mov	r4,r17
   4e158:	00411040 	call	41104 <__clzsi2>
   4e15c:	01410784 	movi	r5,1054
   4e160:	288bc83a 	sub	r5,r5,r2
   4e164:	01010cc4 	movi	r4,1075
   4e168:	2149c83a 	sub	r4,r4,r5
   4e16c:	00c007c4 	movi	r3,31
   4e170:	1900160e 	bge	r3,r4,4e1cc <__floatsidf+0x98>
   4e174:	00c104c4 	movi	r3,1043
   4e178:	1947c83a 	sub	r3,r3,r5
   4e17c:	88c6983a 	sll	r3,r17,r3
   4e180:	00800434 	movhi	r2,16
   4e184:	10bfffc4 	addi	r2,r2,-1
   4e188:	1886703a 	and	r3,r3,r2
   4e18c:	2941ffcc 	andi	r5,r5,2047
   4e190:	800d883a 	mov	r6,r16
   4e194:	0005883a 	mov	r2,zero
   4e198:	280a953a 	slli	r5,r5,20
   4e19c:	31803fcc 	andi	r6,r6,255
   4e1a0:	01000434 	movhi	r4,16
   4e1a4:	300c97fa 	slli	r6,r6,31
   4e1a8:	213fffc4 	addi	r4,r4,-1
   4e1ac:	1906703a 	and	r3,r3,r4
   4e1b0:	1946b03a 	or	r3,r3,r5
   4e1b4:	1986b03a 	or	r3,r3,r6
   4e1b8:	dfc00217 	ldw	ra,8(sp)
   4e1bc:	dc400117 	ldw	r17,4(sp)
   4e1c0:	dc000017 	ldw	r16,0(sp)
   4e1c4:	dec00304 	addi	sp,sp,12
   4e1c8:	f800283a 	ret
   4e1cc:	00c002c4 	movi	r3,11
   4e1d0:	1887c83a 	sub	r3,r3,r2
   4e1d4:	88c6d83a 	srl	r3,r17,r3
   4e1d8:	8904983a 	sll	r2,r17,r4
   4e1dc:	01000434 	movhi	r4,16
   4e1e0:	213fffc4 	addi	r4,r4,-1
   4e1e4:	2941ffcc 	andi	r5,r5,2047
   4e1e8:	1906703a 	and	r3,r3,r4
   4e1ec:	800d883a 	mov	r6,r16
   4e1f0:	003fe906 	br	4e198 <__alt_data_end+0xfffee198>
   4e1f4:	000d883a 	mov	r6,zero
   4e1f8:	000b883a 	mov	r5,zero
   4e1fc:	0007883a 	mov	r3,zero
   4e200:	0005883a 	mov	r2,zero
   4e204:	003fe406 	br	4e198 <__alt_data_end+0xfffee198>
   4e208:	0123c83a 	sub	r17,zero,r4
   4e20c:	003fd106 	br	4e154 <__alt_data_end+0xfffee154>

0004e210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e210:	defffe04 	addi	sp,sp,-8
   4e214:	dfc00115 	stw	ra,4(sp)
   4e218:	df000015 	stw	fp,0(sp)
   4e21c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e220:	00800174 	movhi	r2,5
   4e224:	108d5b04 	addi	r2,r2,13676
   4e228:	10800017 	ldw	r2,0(r2)
   4e22c:	10000526 	beq	r2,zero,4e244 <alt_get_errno+0x34>
   4e230:	00800174 	movhi	r2,5
   4e234:	108d5b04 	addi	r2,r2,13676
   4e238:	10800017 	ldw	r2,0(r2)
   4e23c:	103ee83a 	callr	r2
   4e240:	00000206 	br	4e24c <alt_get_errno+0x3c>
   4e244:	00800174 	movhi	r2,5
   4e248:	10946904 	addi	r2,r2,20900
}
   4e24c:	e037883a 	mov	sp,fp
   4e250:	dfc00117 	ldw	ra,4(sp)
   4e254:	df000017 	ldw	fp,0(sp)
   4e258:	dec00204 	addi	sp,sp,8
   4e25c:	f800283a 	ret

0004e260 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4e260:	defffb04 	addi	sp,sp,-20
   4e264:	dfc00415 	stw	ra,16(sp)
   4e268:	df000315 	stw	fp,12(sp)
   4e26c:	df000304 	addi	fp,sp,12
   4e270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4e274:	e0bfff17 	ldw	r2,-4(fp)
   4e278:	10000716 	blt	r2,zero,4e298 <close+0x38>
   4e27c:	e13fff17 	ldw	r4,-4(fp)
   4e280:	01400304 	movi	r5,12
   4e284:	004131c0 	call	4131c <__mulsi3>
   4e288:	00c00174 	movhi	r3,5
   4e28c:	18c8ce04 	addi	r3,r3,9016
   4e290:	10c5883a 	add	r2,r2,r3
   4e294:	00000106 	br	4e29c <close+0x3c>
   4e298:	0005883a 	mov	r2,zero
   4e29c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4e2a0:	e0bffd17 	ldw	r2,-12(fp)
   4e2a4:	10001826 	beq	r2,zero,4e308 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4e2a8:	e0bffd17 	ldw	r2,-12(fp)
   4e2ac:	10800017 	ldw	r2,0(r2)
   4e2b0:	10800417 	ldw	r2,16(r2)
   4e2b4:	10000626 	beq	r2,zero,4e2d0 <close+0x70>
   4e2b8:	e0bffd17 	ldw	r2,-12(fp)
   4e2bc:	10800017 	ldw	r2,0(r2)
   4e2c0:	10800417 	ldw	r2,16(r2)
   4e2c4:	e13ffd17 	ldw	r4,-12(fp)
   4e2c8:	103ee83a 	callr	r2
   4e2cc:	00000106 	br	4e2d4 <close+0x74>
   4e2d0:	0005883a 	mov	r2,zero
   4e2d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4e2d8:	e13fff17 	ldw	r4,-4(fp)
   4e2dc:	004ebf00 	call	4ebf0 <alt_release_fd>
    if (rval < 0)
   4e2e0:	e0bffe17 	ldw	r2,-8(fp)
   4e2e4:	1000060e 	bge	r2,zero,4e300 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4e2e8:	004e2100 	call	4e210 <alt_get_errno>
   4e2ec:	e0fffe17 	ldw	r3,-8(fp)
   4e2f0:	00c7c83a 	sub	r3,zero,r3
   4e2f4:	10c00015 	stw	r3,0(r2)
      return -1;
   4e2f8:	00bfffc4 	movi	r2,-1
   4e2fc:	00000606 	br	4e318 <close+0xb8>
    }
    return 0;
   4e300:	0005883a 	mov	r2,zero
   4e304:	00000406 	br	4e318 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e308:	004e2100 	call	4e210 <alt_get_errno>
   4e30c:	00c01444 	movi	r3,81
   4e310:	10c00015 	stw	r3,0(r2)
    return -1;
   4e314:	00bfffc4 	movi	r2,-1
  }
}
   4e318:	e037883a 	mov	sp,fp
   4e31c:	dfc00117 	ldw	ra,4(sp)
   4e320:	df000017 	ldw	fp,0(sp)
   4e324:	dec00204 	addi	sp,sp,8
   4e328:	f800283a 	ret

0004e32c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4e32c:	defffc04 	addi	sp,sp,-16
   4e330:	df000315 	stw	fp,12(sp)
   4e334:	df000304 	addi	fp,sp,12
   4e338:	e13ffd15 	stw	r4,-12(fp)
   4e33c:	e17ffe15 	stw	r5,-8(fp)
   4e340:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4e344:	e0bfff17 	ldw	r2,-4(fp)
}
   4e348:	e037883a 	mov	sp,fp
   4e34c:	df000017 	ldw	fp,0(sp)
   4e350:	dec00104 	addi	sp,sp,4
   4e354:	f800283a 	ret

0004e358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e358:	defffe04 	addi	sp,sp,-8
   4e35c:	dfc00115 	stw	ra,4(sp)
   4e360:	df000015 	stw	fp,0(sp)
   4e364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e368:	00800174 	movhi	r2,5
   4e36c:	108d5b04 	addi	r2,r2,13676
   4e370:	10800017 	ldw	r2,0(r2)
   4e374:	10000526 	beq	r2,zero,4e38c <alt_get_errno+0x34>
   4e378:	00800174 	movhi	r2,5
   4e37c:	108d5b04 	addi	r2,r2,13676
   4e380:	10800017 	ldw	r2,0(r2)
   4e384:	103ee83a 	callr	r2
   4e388:	00000206 	br	4e394 <alt_get_errno+0x3c>
   4e38c:	00800174 	movhi	r2,5
   4e390:	10946904 	addi	r2,r2,20900
}
   4e394:	e037883a 	mov	sp,fp
   4e398:	dfc00117 	ldw	ra,4(sp)
   4e39c:	df000017 	ldw	fp,0(sp)
   4e3a0:	dec00204 	addi	sp,sp,8
   4e3a4:	f800283a 	ret

0004e3a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4e3a8:	defffb04 	addi	sp,sp,-20
   4e3ac:	dfc00415 	stw	ra,16(sp)
   4e3b0:	df000315 	stw	fp,12(sp)
   4e3b4:	df000304 	addi	fp,sp,12
   4e3b8:	e13ffe15 	stw	r4,-8(fp)
   4e3bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e3c0:	e0bffe17 	ldw	r2,-8(fp)
   4e3c4:	10000716 	blt	r2,zero,4e3e4 <fstat+0x3c>
   4e3c8:	e13ffe17 	ldw	r4,-8(fp)
   4e3cc:	01400304 	movi	r5,12
   4e3d0:	004131c0 	call	4131c <__mulsi3>
   4e3d4:	00c00174 	movhi	r3,5
   4e3d8:	18c8ce04 	addi	r3,r3,9016
   4e3dc:	10c5883a 	add	r2,r2,r3
   4e3e0:	00000106 	br	4e3e8 <fstat+0x40>
   4e3e4:	0005883a 	mov	r2,zero
   4e3e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4e3ec:	e0bffd17 	ldw	r2,-12(fp)
   4e3f0:	10001026 	beq	r2,zero,4e434 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4e3f4:	e0bffd17 	ldw	r2,-12(fp)
   4e3f8:	10800017 	ldw	r2,0(r2)
   4e3fc:	10800817 	ldw	r2,32(r2)
   4e400:	10000726 	beq	r2,zero,4e420 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4e404:	e0bffd17 	ldw	r2,-12(fp)
   4e408:	10800017 	ldw	r2,0(r2)
   4e40c:	10800817 	ldw	r2,32(r2)
   4e410:	e13ffd17 	ldw	r4,-12(fp)
   4e414:	e17fff17 	ldw	r5,-4(fp)
   4e418:	103ee83a 	callr	r2
   4e41c:	00000906 	br	4e444 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4e420:	e0bfff17 	ldw	r2,-4(fp)
   4e424:	00c80004 	movi	r3,8192
   4e428:	10c00115 	stw	r3,4(r2)
      return 0;
   4e42c:	0005883a 	mov	r2,zero
   4e430:	00000406 	br	4e444 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e434:	004e3580 	call	4e358 <alt_get_errno>
   4e438:	00c01444 	movi	r3,81
   4e43c:	10c00015 	stw	r3,0(r2)
    return -1;
   4e440:	00bfffc4 	movi	r2,-1
  }
}
   4e444:	e037883a 	mov	sp,fp
   4e448:	dfc00117 	ldw	ra,4(sp)
   4e44c:	df000017 	ldw	fp,0(sp)
   4e450:	dec00204 	addi	sp,sp,8
   4e454:	f800283a 	ret

0004e458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e458:	defffe04 	addi	sp,sp,-8
   4e45c:	dfc00115 	stw	ra,4(sp)
   4e460:	df000015 	stw	fp,0(sp)
   4e464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e468:	00800174 	movhi	r2,5
   4e46c:	108d5b04 	addi	r2,r2,13676
   4e470:	10800017 	ldw	r2,0(r2)
   4e474:	10000526 	beq	r2,zero,4e48c <alt_get_errno+0x34>
   4e478:	00800174 	movhi	r2,5
   4e47c:	108d5b04 	addi	r2,r2,13676
   4e480:	10800017 	ldw	r2,0(r2)
   4e484:	103ee83a 	callr	r2
   4e488:	00000206 	br	4e494 <alt_get_errno+0x3c>
   4e48c:	00800174 	movhi	r2,5
   4e490:	10946904 	addi	r2,r2,20900
}
   4e494:	e037883a 	mov	sp,fp
   4e498:	dfc00117 	ldw	ra,4(sp)
   4e49c:	df000017 	ldw	fp,0(sp)
   4e4a0:	dec00204 	addi	sp,sp,8
   4e4a4:	f800283a 	ret

0004e4a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e4a8:	deffed04 	addi	sp,sp,-76
   4e4ac:	dfc01215 	stw	ra,72(sp)
   4e4b0:	df001115 	stw	fp,68(sp)
   4e4b4:	df001104 	addi	fp,sp,68
   4e4b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e4bc:	e0bfff17 	ldw	r2,-4(fp)
   4e4c0:	10000716 	blt	r2,zero,4e4e0 <isatty+0x38>
   4e4c4:	e13fff17 	ldw	r4,-4(fp)
   4e4c8:	01400304 	movi	r5,12
   4e4cc:	004131c0 	call	4131c <__mulsi3>
   4e4d0:	00c00174 	movhi	r3,5
   4e4d4:	18c8ce04 	addi	r3,r3,9016
   4e4d8:	10c5883a 	add	r2,r2,r3
   4e4dc:	00000106 	br	4e4e4 <isatty+0x3c>
   4e4e0:	0005883a 	mov	r2,zero
   4e4e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e4e8:	e0bfef17 	ldw	r2,-68(fp)
   4e4ec:	10000e26 	beq	r2,zero,4e528 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e4f0:	e0bfef17 	ldw	r2,-68(fp)
   4e4f4:	10800017 	ldw	r2,0(r2)
   4e4f8:	10800817 	ldw	r2,32(r2)
   4e4fc:	1000021e 	bne	r2,zero,4e508 <isatty+0x60>
    {
      return 1;
   4e500:	00800044 	movi	r2,1
   4e504:	00000c06 	br	4e538 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e508:	e0bff004 	addi	r2,fp,-64
   4e50c:	e13fff17 	ldw	r4,-4(fp)
   4e510:	100b883a 	mov	r5,r2
   4e514:	004e3a80 	call	4e3a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e518:	e0bff117 	ldw	r2,-60(fp)
   4e51c:	10880020 	cmpeqi	r2,r2,8192
   4e520:	10803fcc 	andi	r2,r2,255
   4e524:	00000406 	br	4e538 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e528:	004e4580 	call	4e458 <alt_get_errno>
   4e52c:	00c01444 	movi	r3,81
   4e530:	10c00015 	stw	r3,0(r2)
    return 0;
   4e534:	0005883a 	mov	r2,zero
  }
}
   4e538:	e037883a 	mov	sp,fp
   4e53c:	dfc00117 	ldw	ra,4(sp)
   4e540:	df000017 	ldw	fp,0(sp)
   4e544:	dec00204 	addi	sp,sp,8
   4e548:	f800283a 	ret

0004e54c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e54c:	defffc04 	addi	sp,sp,-16
   4e550:	df000315 	stw	fp,12(sp)
   4e554:	df000304 	addi	fp,sp,12
   4e558:	e13ffd15 	stw	r4,-12(fp)
   4e55c:	e17ffe15 	stw	r5,-8(fp)
   4e560:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e564:	e0fffe17 	ldw	r3,-8(fp)
   4e568:	e0bffd17 	ldw	r2,-12(fp)
   4e56c:	18800e26 	beq	r3,r2,4e5a8 <alt_load_section+0x5c>
  {
    while( to != end )
   4e570:	00000a06 	br	4e59c <alt_load_section+0x50>
    {
      *to++ = *from++;
   4e574:	e0bffd17 	ldw	r2,-12(fp)
   4e578:	10c00017 	ldw	r3,0(r2)
   4e57c:	e0bffe17 	ldw	r2,-8(fp)
   4e580:	10c00015 	stw	r3,0(r2)
   4e584:	e0bffe17 	ldw	r2,-8(fp)
   4e588:	10800104 	addi	r2,r2,4
   4e58c:	e0bffe15 	stw	r2,-8(fp)
   4e590:	e0bffd17 	ldw	r2,-12(fp)
   4e594:	10800104 	addi	r2,r2,4
   4e598:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4e59c:	e0fffe17 	ldw	r3,-8(fp)
   4e5a0:	e0bfff17 	ldw	r2,-4(fp)
   4e5a4:	18bff31e 	bne	r3,r2,4e574 <__alt_data_end+0xfffee574>
    {
      *to++ = *from++;
    }
  }
}
   4e5a8:	e037883a 	mov	sp,fp
   4e5ac:	df000017 	ldw	fp,0(sp)
   4e5b0:	dec00104 	addi	sp,sp,4
   4e5b4:	f800283a 	ret

0004e5b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4e5b8:	defffe04 	addi	sp,sp,-8
   4e5bc:	dfc00115 	stw	ra,4(sp)
   4e5c0:	df000015 	stw	fp,0(sp)
   4e5c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4e5c8:	01000174 	movhi	r4,5
   4e5cc:	210d7204 	addi	r4,r4,13768
   4e5d0:	01400174 	movhi	r5,5
   4e5d4:	29467d04 	addi	r5,r5,6644
   4e5d8:	01800174 	movhi	r6,5
   4e5dc:	318d7204 	addi	r6,r6,13768
   4e5e0:	004e54c0 	call	4e54c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4e5e4:	01000134 	movhi	r4,4
   4e5e8:	21000804 	addi	r4,r4,32
   4e5ec:	01400134 	movhi	r5,4
   4e5f0:	29400804 	addi	r5,r5,32
   4e5f4:	01800134 	movhi	r6,4
   4e5f8:	31806e04 	addi	r6,r6,440
   4e5fc:	004e54c0 	call	4e54c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4e600:	01000174 	movhi	r4,5
   4e604:	21058804 	addi	r4,r4,5664
   4e608:	01400174 	movhi	r5,5
   4e60c:	29458804 	addi	r5,r5,5664
   4e610:	01800174 	movhi	r6,5
   4e614:	31867d04 	addi	r6,r6,6644
   4e618:	004e54c0 	call	4e54c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4e61c:	00507cc0 	call	507cc <alt_dcache_flush_all>
  alt_icache_flush_all();
   4e620:	0050c8c0 	call	50c8c <alt_icache_flush_all>
}
   4e624:	e037883a 	mov	sp,fp
   4e628:	dfc00117 	ldw	ra,4(sp)
   4e62c:	df000017 	ldw	fp,0(sp)
   4e630:	dec00204 	addi	sp,sp,8
   4e634:	f800283a 	ret

0004e638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e638:	defffe04 	addi	sp,sp,-8
   4e63c:	dfc00115 	stw	ra,4(sp)
   4e640:	df000015 	stw	fp,0(sp)
   4e644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e648:	00800174 	movhi	r2,5
   4e64c:	108d5b04 	addi	r2,r2,13676
   4e650:	10800017 	ldw	r2,0(r2)
   4e654:	10000526 	beq	r2,zero,4e66c <alt_get_errno+0x34>
   4e658:	00800174 	movhi	r2,5
   4e65c:	108d5b04 	addi	r2,r2,13676
   4e660:	10800017 	ldw	r2,0(r2)
   4e664:	103ee83a 	callr	r2
   4e668:	00000206 	br	4e674 <alt_get_errno+0x3c>
   4e66c:	00800174 	movhi	r2,5
   4e670:	10946904 	addi	r2,r2,20900
}
   4e674:	e037883a 	mov	sp,fp
   4e678:	dfc00117 	ldw	ra,4(sp)
   4e67c:	df000017 	ldw	fp,0(sp)
   4e680:	dec00204 	addi	sp,sp,8
   4e684:	f800283a 	ret

0004e688 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4e688:	defff904 	addi	sp,sp,-28
   4e68c:	dfc00615 	stw	ra,24(sp)
   4e690:	df000515 	stw	fp,20(sp)
   4e694:	df000504 	addi	fp,sp,20
   4e698:	e13ffd15 	stw	r4,-12(fp)
   4e69c:	e17ffe15 	stw	r5,-8(fp)
   4e6a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4e6a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e6a8:	e0bffd17 	ldw	r2,-12(fp)
   4e6ac:	10000716 	blt	r2,zero,4e6cc <lseek+0x44>
   4e6b0:	e13ffd17 	ldw	r4,-12(fp)
   4e6b4:	01400304 	movi	r5,12
   4e6b8:	004131c0 	call	4131c <__mulsi3>
   4e6bc:	00c00174 	movhi	r3,5
   4e6c0:	18c8ce04 	addi	r3,r3,9016
   4e6c4:	10c5883a 	add	r2,r2,r3
   4e6c8:	00000106 	br	4e6d0 <lseek+0x48>
   4e6cc:	0005883a 	mov	r2,zero
   4e6d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4e6d4:	e0bffc17 	ldw	r2,-16(fp)
   4e6d8:	10001026 	beq	r2,zero,4e71c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4e6dc:	e0bffc17 	ldw	r2,-16(fp)
   4e6e0:	10800017 	ldw	r2,0(r2)
   4e6e4:	10800717 	ldw	r2,28(r2)
   4e6e8:	10000926 	beq	r2,zero,4e710 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4e6ec:	e0bffc17 	ldw	r2,-16(fp)
   4e6f0:	10800017 	ldw	r2,0(r2)
   4e6f4:	10800717 	ldw	r2,28(r2)
   4e6f8:	e13ffc17 	ldw	r4,-16(fp)
   4e6fc:	e17ffe17 	ldw	r5,-8(fp)
   4e700:	e1bfff17 	ldw	r6,-4(fp)
   4e704:	103ee83a 	callr	r2
   4e708:	e0bffb15 	stw	r2,-20(fp)
   4e70c:	00000506 	br	4e724 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4e710:	00bfde84 	movi	r2,-134
   4e714:	e0bffb15 	stw	r2,-20(fp)
   4e718:	00000206 	br	4e724 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4e71c:	00bfebc4 	movi	r2,-81
   4e720:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4e724:	e0bffb17 	ldw	r2,-20(fp)
   4e728:	1000060e 	bge	r2,zero,4e744 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4e72c:	004e6380 	call	4e638 <alt_get_errno>
   4e730:	e0fffb17 	ldw	r3,-20(fp)
   4e734:	00c7c83a 	sub	r3,zero,r3
   4e738:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4e73c:	00bfffc4 	movi	r2,-1
   4e740:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4e744:	e0bffb17 	ldw	r2,-20(fp)
}
   4e748:	e037883a 	mov	sp,fp
   4e74c:	dfc00117 	ldw	ra,4(sp)
   4e750:	df000017 	ldw	fp,0(sp)
   4e754:	dec00204 	addi	sp,sp,8
   4e758:	f800283a 	ret

0004e75c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4e75c:	defffd04 	addi	sp,sp,-12
   4e760:	dfc00215 	stw	ra,8(sp)
   4e764:	df000115 	stw	fp,4(sp)
   4e768:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4e76c:	0009883a 	mov	r4,zero
   4e770:	004ef6c0 	call	4ef6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4e774:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4e778:	004efa00 	call	4efa0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4e77c:	01000174 	movhi	r4,5
   4e780:	21067004 	addi	r4,r4,6592
   4e784:	01400174 	movhi	r5,5
   4e788:	29467004 	addi	r5,r5,6592
   4e78c:	01800174 	movhi	r6,5
   4e790:	31867004 	addi	r6,r6,6592
   4e794:	00510500 	call	51050 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4e798:	00508d80 	call	508d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4e79c:	01000174 	movhi	r4,5
   4e7a0:	21024d04 	addi	r4,r4,2356
   4e7a4:	00512840 	call	51284 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4e7a8:	d1272017 	ldw	r4,-25472(gp)
   4e7ac:	d0e72117 	ldw	r3,-25468(gp)
   4e7b0:	d0a72217 	ldw	r2,-25464(gp)
   4e7b4:	180b883a 	mov	r5,r3
   4e7b8:	100d883a 	mov	r6,r2
   4e7bc:	00401f40 	call	401f4 <main>
   4e7c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4e7c4:	01000044 	movi	r4,1
   4e7c8:	004e2600 	call	4e260 <close>
  exit (result);
   4e7cc:	e13fff17 	ldw	r4,-4(fp)
   4e7d0:	00512980 	call	51298 <exit>

0004e7d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4e7d4:	defffe04 	addi	sp,sp,-8
   4e7d8:	df000115 	stw	fp,4(sp)
   4e7dc:	df000104 	addi	fp,sp,4
   4e7e0:	e13fff15 	stw	r4,-4(fp)
}
   4e7e4:	e037883a 	mov	sp,fp
   4e7e8:	df000017 	ldw	fp,0(sp)
   4e7ec:	dec00104 	addi	sp,sp,4
   4e7f0:	f800283a 	ret

0004e7f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4e7f4:	defffe04 	addi	sp,sp,-8
   4e7f8:	df000115 	stw	fp,4(sp)
   4e7fc:	df000104 	addi	fp,sp,4
   4e800:	e13fff15 	stw	r4,-4(fp)
}
   4e804:	e037883a 	mov	sp,fp
   4e808:	df000017 	ldw	fp,0(sp)
   4e80c:	dec00104 	addi	sp,sp,4
   4e810:	f800283a 	ret

0004e814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e814:	defffe04 	addi	sp,sp,-8
   4e818:	dfc00115 	stw	ra,4(sp)
   4e81c:	df000015 	stw	fp,0(sp)
   4e820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e824:	00800174 	movhi	r2,5
   4e828:	108d5b04 	addi	r2,r2,13676
   4e82c:	10800017 	ldw	r2,0(r2)
   4e830:	10000526 	beq	r2,zero,4e848 <alt_get_errno+0x34>
   4e834:	00800174 	movhi	r2,5
   4e838:	108d5b04 	addi	r2,r2,13676
   4e83c:	10800017 	ldw	r2,0(r2)
   4e840:	103ee83a 	callr	r2
   4e844:	00000206 	br	4e850 <alt_get_errno+0x3c>
   4e848:	00800174 	movhi	r2,5
   4e84c:	10946904 	addi	r2,r2,20900
}
   4e850:	e037883a 	mov	sp,fp
   4e854:	dfc00117 	ldw	ra,4(sp)
   4e858:	df000017 	ldw	fp,0(sp)
   4e85c:	dec00204 	addi	sp,sp,8
   4e860:	f800283a 	ret

0004e864 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4e864:	defffb04 	addi	sp,sp,-20
   4e868:	dfc00415 	stw	ra,16(sp)
   4e86c:	df000315 	stw	fp,12(sp)
   4e870:	dc000215 	stw	r16,8(sp)
   4e874:	df000204 	addi	fp,sp,8
   4e878:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4e87c:	e0bfff17 	ldw	r2,-4(fp)
   4e880:	10800217 	ldw	r2,8(r2)
   4e884:	10d00034 	orhi	r3,r2,16384
   4e888:	e0bfff17 	ldw	r2,-4(fp)
   4e88c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e890:	e03ffe15 	stw	zero,-8(fp)
   4e894:	00002206 	br	4e920 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e898:	04000174 	movhi	r16,5
   4e89c:	8408ce04 	addi	r16,r16,9016
   4e8a0:	e0bffe17 	ldw	r2,-8(fp)
   4e8a4:	1009883a 	mov	r4,r2
   4e8a8:	01400304 	movi	r5,12
   4e8ac:	004131c0 	call	4131c <__mulsi3>
   4e8b0:	8085883a 	add	r2,r16,r2
   4e8b4:	10c00017 	ldw	r3,0(r2)
   4e8b8:	e0bfff17 	ldw	r2,-4(fp)
   4e8bc:	10800017 	ldw	r2,0(r2)
   4e8c0:	1880141e 	bne	r3,r2,4e914 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e8c4:	04000174 	movhi	r16,5
   4e8c8:	8408ce04 	addi	r16,r16,9016
   4e8cc:	e0bffe17 	ldw	r2,-8(fp)
   4e8d0:	1009883a 	mov	r4,r2
   4e8d4:	01400304 	movi	r5,12
   4e8d8:	004131c0 	call	4131c <__mulsi3>
   4e8dc:	8085883a 	add	r2,r16,r2
   4e8e0:	10800204 	addi	r2,r2,8
   4e8e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e8e8:	10000a0e 	bge	r2,zero,4e914 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4e8ec:	e13ffe17 	ldw	r4,-8(fp)
   4e8f0:	01400304 	movi	r5,12
   4e8f4:	004131c0 	call	4131c <__mulsi3>
   4e8f8:	00c00174 	movhi	r3,5
   4e8fc:	18c8ce04 	addi	r3,r3,9016
   4e900:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e904:	e0bfff17 	ldw	r2,-4(fp)
   4e908:	18800226 	beq	r3,r2,4e914 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4e90c:	00bffcc4 	movi	r2,-13
   4e910:	00000a06 	br	4e93c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e914:	e0bffe17 	ldw	r2,-8(fp)
   4e918:	10800044 	addi	r2,r2,1
   4e91c:	e0bffe15 	stw	r2,-8(fp)
   4e920:	00800174 	movhi	r2,5
   4e924:	108d5a04 	addi	r2,r2,13672
   4e928:	10800017 	ldw	r2,0(r2)
   4e92c:	1007883a 	mov	r3,r2
   4e930:	e0bffe17 	ldw	r2,-8(fp)
   4e934:	18bfd82e 	bgeu	r3,r2,4e898 <__alt_data_end+0xfffee898>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4e938:	0005883a 	mov	r2,zero
}
   4e93c:	e037883a 	mov	sp,fp
   4e940:	dfc00217 	ldw	ra,8(sp)
   4e944:	df000117 	ldw	fp,4(sp)
   4e948:	dc000017 	ldw	r16,0(sp)
   4e94c:	dec00304 	addi	sp,sp,12
   4e950:	f800283a 	ret

0004e954 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e954:	defff604 	addi	sp,sp,-40
   4e958:	dfc00915 	stw	ra,36(sp)
   4e95c:	df000815 	stw	fp,32(sp)
   4e960:	df000804 	addi	fp,sp,32
   4e964:	e13ffd15 	stw	r4,-12(fp)
   4e968:	e17ffe15 	stw	r5,-8(fp)
   4e96c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4e970:	00bfffc4 	movi	r2,-1
   4e974:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4e978:	00bffb44 	movi	r2,-19
   4e97c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4e980:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e984:	e13ffd17 	ldw	r4,-12(fp)
   4e988:	01400174 	movhi	r5,5
   4e98c:	294d5804 	addi	r5,r5,13664
   4e990:	00509900 	call	50990 <alt_find_dev>
   4e994:	e0bff815 	stw	r2,-32(fp)
   4e998:	e0bff817 	ldw	r2,-32(fp)
   4e99c:	1000051e 	bne	r2,zero,4e9b4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4e9a0:	e13ffd17 	ldw	r4,-12(fp)
   4e9a4:	0050a200 	call	50a20 <alt_find_file>
   4e9a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4e9ac:	00800044 	movi	r2,1
   4e9b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4e9b4:	e0bff817 	ldw	r2,-32(fp)
   4e9b8:	10002a26 	beq	r2,zero,4ea64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4e9bc:	e13ff817 	ldw	r4,-32(fp)
   4e9c0:	0050bb80 	call	50bb8 <alt_get_fd>
   4e9c4:	e0bff915 	stw	r2,-28(fp)
   4e9c8:	e0bff917 	ldw	r2,-28(fp)
   4e9cc:	1000030e 	bge	r2,zero,4e9dc <open+0x88>
    {
      status = index;
   4e9d0:	e0bff917 	ldw	r2,-28(fp)
   4e9d4:	e0bffa15 	stw	r2,-24(fp)
   4e9d8:	00002406 	br	4ea6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4e9dc:	e13ff917 	ldw	r4,-28(fp)
   4e9e0:	01400304 	movi	r5,12
   4e9e4:	004131c0 	call	4131c <__mulsi3>
   4e9e8:	00c00174 	movhi	r3,5
   4e9ec:	18c8ce04 	addi	r3,r3,9016
   4e9f0:	10c5883a 	add	r2,r2,r3
   4e9f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e9f8:	e0fffe17 	ldw	r3,-8(fp)
   4e9fc:	00900034 	movhi	r2,16384
   4ea00:	10bfffc4 	addi	r2,r2,-1
   4ea04:	1886703a 	and	r3,r3,r2
   4ea08:	e0bffc17 	ldw	r2,-16(fp)
   4ea0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4ea10:	e0bffb17 	ldw	r2,-20(fp)
   4ea14:	1000051e 	bne	r2,zero,4ea2c <open+0xd8>
   4ea18:	e13ffc17 	ldw	r4,-16(fp)
   4ea1c:	004e8640 	call	4e864 <alt_file_locked>
   4ea20:	e0bffa15 	stw	r2,-24(fp)
   4ea24:	e0bffa17 	ldw	r2,-24(fp)
   4ea28:	10001016 	blt	r2,zero,4ea6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4ea2c:	e0bff817 	ldw	r2,-32(fp)
   4ea30:	10800317 	ldw	r2,12(r2)
   4ea34:	10000826 	beq	r2,zero,4ea58 <open+0x104>
   4ea38:	e0bff817 	ldw	r2,-32(fp)
   4ea3c:	10800317 	ldw	r2,12(r2)
   4ea40:	e13ffc17 	ldw	r4,-16(fp)
   4ea44:	e17ffd17 	ldw	r5,-12(fp)
   4ea48:	e1bffe17 	ldw	r6,-8(fp)
   4ea4c:	e1ffff17 	ldw	r7,-4(fp)
   4ea50:	103ee83a 	callr	r2
   4ea54:	00000106 	br	4ea5c <open+0x108>
   4ea58:	0005883a 	mov	r2,zero
   4ea5c:	e0bffa15 	stw	r2,-24(fp)
   4ea60:	00000206 	br	4ea6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4ea64:	00bffb44 	movi	r2,-19
   4ea68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4ea6c:	e0bffa17 	ldw	r2,-24(fp)
   4ea70:	1000080e 	bge	r2,zero,4ea94 <open+0x140>
  {
    alt_release_fd (index);  
   4ea74:	e13ff917 	ldw	r4,-28(fp)
   4ea78:	004ebf00 	call	4ebf0 <alt_release_fd>
    ALT_ERRNO = -status;
   4ea7c:	004e8140 	call	4e814 <alt_get_errno>
   4ea80:	e0fffa17 	ldw	r3,-24(fp)
   4ea84:	00c7c83a 	sub	r3,zero,r3
   4ea88:	10c00015 	stw	r3,0(r2)
    return -1;
   4ea8c:	00bfffc4 	movi	r2,-1
   4ea90:	00000106 	br	4ea98 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4ea94:	e0bff917 	ldw	r2,-28(fp)
}
   4ea98:	e037883a 	mov	sp,fp
   4ea9c:	dfc00117 	ldw	ra,4(sp)
   4eaa0:	df000017 	ldw	fp,0(sp)
   4eaa4:	dec00204 	addi	sp,sp,8
   4eaa8:	f800283a 	ret

0004eaac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eaac:	defffe04 	addi	sp,sp,-8
   4eab0:	dfc00115 	stw	ra,4(sp)
   4eab4:	df000015 	stw	fp,0(sp)
   4eab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eabc:	00800174 	movhi	r2,5
   4eac0:	108d5b04 	addi	r2,r2,13676
   4eac4:	10800017 	ldw	r2,0(r2)
   4eac8:	10000526 	beq	r2,zero,4eae0 <alt_get_errno+0x34>
   4eacc:	00800174 	movhi	r2,5
   4ead0:	108d5b04 	addi	r2,r2,13676
   4ead4:	10800017 	ldw	r2,0(r2)
   4ead8:	103ee83a 	callr	r2
   4eadc:	00000206 	br	4eae8 <alt_get_errno+0x3c>
   4eae0:	00800174 	movhi	r2,5
   4eae4:	10946904 	addi	r2,r2,20900
}
   4eae8:	e037883a 	mov	sp,fp
   4eaec:	dfc00117 	ldw	ra,4(sp)
   4eaf0:	df000017 	ldw	fp,0(sp)
   4eaf4:	dec00204 	addi	sp,sp,8
   4eaf8:	f800283a 	ret

0004eafc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4eafc:	defff904 	addi	sp,sp,-28
   4eb00:	dfc00615 	stw	ra,24(sp)
   4eb04:	df000515 	stw	fp,20(sp)
   4eb08:	df000504 	addi	fp,sp,20
   4eb0c:	e13ffd15 	stw	r4,-12(fp)
   4eb10:	e17ffe15 	stw	r5,-8(fp)
   4eb14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eb18:	e0bffd17 	ldw	r2,-12(fp)
   4eb1c:	10000716 	blt	r2,zero,4eb3c <read+0x40>
   4eb20:	e13ffd17 	ldw	r4,-12(fp)
   4eb24:	01400304 	movi	r5,12
   4eb28:	004131c0 	call	4131c <__mulsi3>
   4eb2c:	00c00174 	movhi	r3,5
   4eb30:	18c8ce04 	addi	r3,r3,9016
   4eb34:	10c5883a 	add	r2,r2,r3
   4eb38:	00000106 	br	4eb40 <read+0x44>
   4eb3c:	0005883a 	mov	r2,zero
   4eb40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4eb44:	e0bffb17 	ldw	r2,-20(fp)
   4eb48:	10002026 	beq	r2,zero,4ebcc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4eb4c:	e0bffb17 	ldw	r2,-20(fp)
   4eb50:	10800217 	ldw	r2,8(r2)
   4eb54:	108000cc 	andi	r2,r2,3
   4eb58:	10800060 	cmpeqi	r2,r2,1
   4eb5c:	1000171e 	bne	r2,zero,4ebbc <read+0xc0>
        (fd->dev->read))
   4eb60:	e0bffb17 	ldw	r2,-20(fp)
   4eb64:	10800017 	ldw	r2,0(r2)
   4eb68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4eb6c:	10001326 	beq	r2,zero,4ebbc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4eb70:	e0bffb17 	ldw	r2,-20(fp)
   4eb74:	10800017 	ldw	r2,0(r2)
   4eb78:	10c00517 	ldw	r3,20(r2)
   4eb7c:	e0bfff17 	ldw	r2,-4(fp)
   4eb80:	e13ffb17 	ldw	r4,-20(fp)
   4eb84:	e17ffe17 	ldw	r5,-8(fp)
   4eb88:	100d883a 	mov	r6,r2
   4eb8c:	183ee83a 	callr	r3
   4eb90:	e0bffc15 	stw	r2,-16(fp)
   4eb94:	e0bffc17 	ldw	r2,-16(fp)
   4eb98:	1000060e 	bge	r2,zero,4ebb4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4eb9c:	004eaac0 	call	4eaac <alt_get_errno>
   4eba0:	e0fffc17 	ldw	r3,-16(fp)
   4eba4:	00c7c83a 	sub	r3,zero,r3
   4eba8:	10c00015 	stw	r3,0(r2)
          return -1;
   4ebac:	00bfffc4 	movi	r2,-1
   4ebb0:	00000a06 	br	4ebdc <read+0xe0>
        }
        return rval;
   4ebb4:	e0bffc17 	ldw	r2,-16(fp)
   4ebb8:	00000806 	br	4ebdc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4ebbc:	004eaac0 	call	4eaac <alt_get_errno>
   4ebc0:	00c00344 	movi	r3,13
   4ebc4:	10c00015 	stw	r3,0(r2)
   4ebc8:	00000306 	br	4ebd8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4ebcc:	004eaac0 	call	4eaac <alt_get_errno>
   4ebd0:	00c01444 	movi	r3,81
   4ebd4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4ebd8:	00bfffc4 	movi	r2,-1
}
   4ebdc:	e037883a 	mov	sp,fp
   4ebe0:	dfc00117 	ldw	ra,4(sp)
   4ebe4:	df000017 	ldw	fp,0(sp)
   4ebe8:	dec00204 	addi	sp,sp,8
   4ebec:	f800283a 	ret

0004ebf0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4ebf0:	defffc04 	addi	sp,sp,-16
   4ebf4:	dfc00315 	stw	ra,12(sp)
   4ebf8:	df000215 	stw	fp,8(sp)
   4ebfc:	dc000115 	stw	r16,4(sp)
   4ec00:	df000104 	addi	fp,sp,4
   4ec04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4ec08:	e0bfff17 	ldw	r2,-4(fp)
   4ec0c:	108000d0 	cmplti	r2,r2,3
   4ec10:	1000111e 	bne	r2,zero,4ec58 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4ec14:	04000174 	movhi	r16,5
   4ec18:	8408ce04 	addi	r16,r16,9016
   4ec1c:	e0bfff17 	ldw	r2,-4(fp)
   4ec20:	1009883a 	mov	r4,r2
   4ec24:	01400304 	movi	r5,12
   4ec28:	004131c0 	call	4131c <__mulsi3>
   4ec2c:	8085883a 	add	r2,r16,r2
   4ec30:	10800204 	addi	r2,r2,8
   4ec34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4ec38:	04000174 	movhi	r16,5
   4ec3c:	8408ce04 	addi	r16,r16,9016
   4ec40:	e0bfff17 	ldw	r2,-4(fp)
   4ec44:	1009883a 	mov	r4,r2
   4ec48:	01400304 	movi	r5,12
   4ec4c:	004131c0 	call	4131c <__mulsi3>
   4ec50:	8085883a 	add	r2,r16,r2
   4ec54:	10000015 	stw	zero,0(r2)
  }
}
   4ec58:	e037883a 	mov	sp,fp
   4ec5c:	dfc00217 	ldw	ra,8(sp)
   4ec60:	df000117 	ldw	fp,4(sp)
   4ec64:	dc000017 	ldw	r16,0(sp)
   4ec68:	dec00304 	addi	sp,sp,12
   4ec6c:	f800283a 	ret

0004ec70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4ec70:	defff904 	addi	sp,sp,-28
   4ec74:	df000615 	stw	fp,24(sp)
   4ec78:	df000604 	addi	fp,sp,24
   4ec7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ec80:	0005303a 	rdctl	r2,status
   4ec84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ec88:	e0fffc17 	ldw	r3,-16(fp)
   4ec8c:	00bfff84 	movi	r2,-2
   4ec90:	1884703a 	and	r2,r3,r2
   4ec94:	1001703a 	wrctl	status,r2
  
  return context;
   4ec98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4ec9c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4eca0:	d0a00c17 	ldw	r2,-32720(gp)
   4eca4:	10c000c4 	addi	r3,r2,3
   4eca8:	00bfff04 	movi	r2,-4
   4ecac:	1884703a 	and	r2,r3,r2
   4ecb0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4ecb4:	d0e00c17 	ldw	r3,-32720(gp)
   4ecb8:	e0bfff17 	ldw	r2,-4(fp)
   4ecbc:	1885883a 	add	r2,r3,r2
   4ecc0:	00c001b4 	movhi	r3,6
   4ecc4:	18c00004 	addi	r3,r3,0
   4ecc8:	1880062e 	bgeu	r3,r2,4ece4 <sbrk+0x74>
   4eccc:	e0bffa17 	ldw	r2,-24(fp)
   4ecd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ecd4:	e0bffd17 	ldw	r2,-12(fp)
   4ecd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4ecdc:	00bfffc4 	movi	r2,-1
   4ece0:	00000b06 	br	4ed10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4ece4:	d0a00c17 	ldw	r2,-32720(gp)
   4ece8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4ecec:	d0e00c17 	ldw	r3,-32720(gp)
   4ecf0:	e0bfff17 	ldw	r2,-4(fp)
   4ecf4:	1885883a 	add	r2,r3,r2
   4ecf8:	d0a00c15 	stw	r2,-32720(gp)
   4ecfc:	e0bffa17 	ldw	r2,-24(fp)
   4ed00:	e0bffe15 	stw	r2,-8(fp)
   4ed04:	e0bffe17 	ldw	r2,-8(fp)
   4ed08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4ed0c:	e0bffb17 	ldw	r2,-20(fp)
} 
   4ed10:	e037883a 	mov	sp,fp
   4ed14:	df000017 	ldw	fp,0(sp)
   4ed18:	dec00104 	addi	sp,sp,4
   4ed1c:	f800283a 	ret

0004ed20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ed20:	defffe04 	addi	sp,sp,-8
   4ed24:	dfc00115 	stw	ra,4(sp)
   4ed28:	df000015 	stw	fp,0(sp)
   4ed2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ed30:	00800174 	movhi	r2,5
   4ed34:	108d5b04 	addi	r2,r2,13676
   4ed38:	10800017 	ldw	r2,0(r2)
   4ed3c:	10000526 	beq	r2,zero,4ed54 <alt_get_errno+0x34>
   4ed40:	00800174 	movhi	r2,5
   4ed44:	108d5b04 	addi	r2,r2,13676
   4ed48:	10800017 	ldw	r2,0(r2)
   4ed4c:	103ee83a 	callr	r2
   4ed50:	00000206 	br	4ed5c <alt_get_errno+0x3c>
   4ed54:	00800174 	movhi	r2,5
   4ed58:	10946904 	addi	r2,r2,20900
}
   4ed5c:	e037883a 	mov	sp,fp
   4ed60:	dfc00117 	ldw	ra,4(sp)
   4ed64:	df000017 	ldw	fp,0(sp)
   4ed68:	dec00204 	addi	sp,sp,8
   4ed6c:	f800283a 	ret

0004ed70 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   4ed70:	defffc04 	addi	sp,sp,-16
   4ed74:	dfc00315 	stw	ra,12(sp)
   4ed78:	df000215 	stw	fp,8(sp)
   4ed7c:	df000204 	addi	fp,sp,8
   4ed80:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4ed84:	00800174 	movhi	r2,5
   4ed88:	10947504 	addi	r2,r2,20948
   4ed8c:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   4ed90:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ed94:	00800174 	movhi	r2,5
   4ed98:	10947404 	addi	r2,r2,20944
   4ed9c:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   4eda0:	1000051e 	bne	r2,zero,4edb8 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
   4eda4:	004ed200 	call	4ed20 <alt_get_errno>
   4eda8:	00c01604 	movi	r3,88
   4edac:	10c00015 	stw	r3,0(r2)
    return 0;
   4edb0:	0005883a 	mov	r2,zero
   4edb4:	00000a06 	br	4ede0 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   4edb8:	e0bfff17 	ldw	r2,-4(fp)
   4edbc:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   4edc0:	e0bfff17 	ldw	r2,-4(fp)
   4edc4:	e0fffe17 	ldw	r3,-8(fp)
   4edc8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   4edcc:	e0bfff17 	ldw	r2,-4(fp)
   4edd0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   4edd4:	e0bfff17 	ldw	r2,-4(fp)
   4edd8:	10000315 	stw	zero,12(r2)

  return ticks;
   4eddc:	e0bffe17 	ldw	r2,-8(fp)
}
   4ede0:	e037883a 	mov	sp,fp
   4ede4:	dfc00117 	ldw	ra,4(sp)
   4ede8:	df000017 	ldw	fp,0(sp)
   4edec:	dec00204 	addi	sp,sp,8
   4edf0:	f800283a 	ret

0004edf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4edf4:	defffe04 	addi	sp,sp,-8
   4edf8:	dfc00115 	stw	ra,4(sp)
   4edfc:	df000015 	stw	fp,0(sp)
   4ee00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ee04:	00800174 	movhi	r2,5
   4ee08:	108d5b04 	addi	r2,r2,13676
   4ee0c:	10800017 	ldw	r2,0(r2)
   4ee10:	10000526 	beq	r2,zero,4ee28 <alt_get_errno+0x34>
   4ee14:	00800174 	movhi	r2,5
   4ee18:	108d5b04 	addi	r2,r2,13676
   4ee1c:	10800017 	ldw	r2,0(r2)
   4ee20:	103ee83a 	callr	r2
   4ee24:	00000206 	br	4ee30 <alt_get_errno+0x3c>
   4ee28:	00800174 	movhi	r2,5
   4ee2c:	10946904 	addi	r2,r2,20900
}
   4ee30:	e037883a 	mov	sp,fp
   4ee34:	dfc00117 	ldw	ra,4(sp)
   4ee38:	df000017 	ldw	fp,0(sp)
   4ee3c:	dec00204 	addi	sp,sp,8
   4ee40:	f800283a 	ret

0004ee44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4ee44:	defff904 	addi	sp,sp,-28
   4ee48:	dfc00615 	stw	ra,24(sp)
   4ee4c:	df000515 	stw	fp,20(sp)
   4ee50:	df000504 	addi	fp,sp,20
   4ee54:	e13ffd15 	stw	r4,-12(fp)
   4ee58:	e17ffe15 	stw	r5,-8(fp)
   4ee5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ee60:	e0bffd17 	ldw	r2,-12(fp)
   4ee64:	10000716 	blt	r2,zero,4ee84 <write+0x40>
   4ee68:	e13ffd17 	ldw	r4,-12(fp)
   4ee6c:	01400304 	movi	r5,12
   4ee70:	004131c0 	call	4131c <__mulsi3>
   4ee74:	00c00174 	movhi	r3,5
   4ee78:	18c8ce04 	addi	r3,r3,9016
   4ee7c:	10c5883a 	add	r2,r2,r3
   4ee80:	00000106 	br	4ee88 <write+0x44>
   4ee84:	0005883a 	mov	r2,zero
   4ee88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4ee8c:	e0bffb17 	ldw	r2,-20(fp)
   4ee90:	10001f26 	beq	r2,zero,4ef10 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4ee94:	e0bffb17 	ldw	r2,-20(fp)
   4ee98:	10800217 	ldw	r2,8(r2)
   4ee9c:	108000cc 	andi	r2,r2,3
   4eea0:	10001726 	beq	r2,zero,4ef00 <write+0xbc>
   4eea4:	e0bffb17 	ldw	r2,-20(fp)
   4eea8:	10800017 	ldw	r2,0(r2)
   4eeac:	10800617 	ldw	r2,24(r2)
   4eeb0:	10001326 	beq	r2,zero,4ef00 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4eeb4:	e0bffb17 	ldw	r2,-20(fp)
   4eeb8:	10800017 	ldw	r2,0(r2)
   4eebc:	10c00617 	ldw	r3,24(r2)
   4eec0:	e0bfff17 	ldw	r2,-4(fp)
   4eec4:	e13ffb17 	ldw	r4,-20(fp)
   4eec8:	e17ffe17 	ldw	r5,-8(fp)
   4eecc:	100d883a 	mov	r6,r2
   4eed0:	183ee83a 	callr	r3
   4eed4:	e0bffc15 	stw	r2,-16(fp)
   4eed8:	e0bffc17 	ldw	r2,-16(fp)
   4eedc:	1000060e 	bge	r2,zero,4eef8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4eee0:	004edf40 	call	4edf4 <alt_get_errno>
   4eee4:	e0fffc17 	ldw	r3,-16(fp)
   4eee8:	00c7c83a 	sub	r3,zero,r3
   4eeec:	10c00015 	stw	r3,0(r2)
        return -1;
   4eef0:	00bfffc4 	movi	r2,-1
   4eef4:	00000a06 	br	4ef20 <write+0xdc>
      }
      return rval;
   4eef8:	e0bffc17 	ldw	r2,-16(fp)
   4eefc:	00000806 	br	4ef20 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4ef00:	004edf40 	call	4edf4 <alt_get_errno>
   4ef04:	00c00344 	movi	r3,13
   4ef08:	10c00015 	stw	r3,0(r2)
   4ef0c:	00000306 	br	4ef1c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4ef10:	004edf40 	call	4edf4 <alt_get_errno>
   4ef14:	00c01444 	movi	r3,81
   4ef18:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4ef1c:	00bfffc4 	movi	r2,-1
}
   4ef20:	e037883a 	mov	sp,fp
   4ef24:	dfc00117 	ldw	ra,4(sp)
   4ef28:	df000017 	ldw	fp,0(sp)
   4ef2c:	dec00204 	addi	sp,sp,8
   4ef30:	f800283a 	ret

0004ef34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ef34:	defffd04 	addi	sp,sp,-12
   4ef38:	dfc00215 	stw	ra,8(sp)
   4ef3c:	df000115 	stw	fp,4(sp)
   4ef40:	df000104 	addi	fp,sp,4
   4ef44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4ef48:	e13fff17 	ldw	r4,-4(fp)
   4ef4c:	01400174 	movhi	r5,5
   4ef50:	294d5804 	addi	r5,r5,13664
   4ef54:	00508380 	call	50838 <alt_dev_llist_insert>
}
   4ef58:	e037883a 	mov	sp,fp
   4ef5c:	dfc00117 	ldw	ra,4(sp)
   4ef60:	df000017 	ldw	fp,0(sp)
   4ef64:	dec00204 	addi	sp,sp,8
   4ef68:	f800283a 	ret

0004ef6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4ef6c:	defffd04 	addi	sp,sp,-12
   4ef70:	dfc00215 	stw	ra,8(sp)
   4ef74:	df000115 	stw	fp,4(sp)
   4ef78:	df000104 	addi	fp,sp,4
   4ef7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1F, cpu_1f);
   4ef80:	00512640 	call	51264 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4ef84:	00800044 	movi	r2,1
   4ef88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4ef8c:	e037883a 	mov	sp,fp
   4ef90:	dfc00117 	ldw	ra,4(sp)
   4ef94:	df000017 	ldw	fp,0(sp)
   4ef98:	dec00204 	addi	sp,sp,8
   4ef9c:	f800283a 	ret

0004efa0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4efa0:	defffe04 	addi	sp,sp,-8
   4efa4:	dfc00115 	stw	ra,4(sp)
   4efa8:	df000015 	stw	fp,0(sp)
   4efac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1F, timer_1f);
   4efb0:	010000b4 	movhi	r4,2
   4efb4:	21040004 	addi	r4,r4,4096
   4efb8:	000b883a 	mov	r5,zero
   4efbc:	01800044 	movi	r6,1
   4efc0:	01c0fa04 	movi	r7,1000
   4efc4:	004ffdc0 	call	4ffdc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   4efc8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_6, fifo_q_6);
   4efcc:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1F, jtag_uart_1f);
   4efd0:	01000174 	movhi	r4,5
   4efd4:	21093804 	addi	r4,r4,9440
   4efd8:	000b883a 	mov	r5,zero
   4efdc:	01800404 	movi	r6,16
   4efe0:	004f6680 	call	4f668 <altera_avalon_jtag_uart_init>
   4efe4:	01000174 	movhi	r4,5
   4efe8:	21092e04 	addi	r4,r4,9400
   4efec:	004ef340 	call	4ef34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1F, sysid_1f);
   4eff0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   4eff4:	01000174 	movhi	r4,5
   4eff8:	210d4604 	addi	r4,r4,13592
   4effc:	0050b340 	call	50b34 <alt_fs_reg>
}
   4f000:	e037883a 	mov	sp,fp
   4f004:	dfc00117 	ldw	ra,4(sp)
   4f008:	df000017 	ldw	fp,0(sp)
   4f00c:	dec00204 	addi	sp,sp,8
   4f010:	f800283a 	ret

0004f014 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4f014:	defffa04 	addi	sp,sp,-24
   4f018:	dfc00515 	stw	ra,20(sp)
   4f01c:	df000415 	stw	fp,16(sp)
   4f020:	df000404 	addi	fp,sp,16
   4f024:	e13ffc15 	stw	r4,-16(fp)
   4f028:	e17ffd15 	stw	r5,-12(fp)
   4f02c:	e1bffe15 	stw	r6,-8(fp)
   4f030:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4f034:	e13ffc17 	ldw	r4,-16(fp)
   4f038:	01400fc4 	movi	r5,63
   4f03c:	004f1e00 	call	4f1e0 <altera_avalon_fifo_clear_event>
   4f040:	10000226 	beq	r2,zero,4f04c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4f044:	00bfffc4 	movi	r2,-1
   4f048:	00001306 	br	4f098 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4f04c:	e13ffc17 	ldw	r4,-16(fp)
   4f050:	e17ffd17 	ldw	r5,-12(fp)
   4f054:	004f23c0 	call	4f23c <altera_avalon_fifo_write_ienable>
   4f058:	10000226 	beq	r2,zero,4f064 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4f05c:	00bfff84 	movi	r2,-2
   4f060:	00000d06 	br	4f098 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4f064:	e13ffc17 	ldw	r4,-16(fp)
   4f068:	e17fff17 	ldw	r5,-4(fp)
   4f06c:	004f2940 	call	4f294 <altera_avalon_fifo_write_almostfull>
   4f070:	10000226 	beq	r2,zero,4f07c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f074:	00bfff44 	movi	r2,-3
   4f078:	00000706 	br	4f098 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4f07c:	e13ffc17 	ldw	r4,-16(fp)
   4f080:	e17ffe17 	ldw	r5,-8(fp)
   4f084:	004f2ec0 	call	4f2ec <altera_avalon_fifo_write_almostempty>
   4f088:	10000226 	beq	r2,zero,4f094 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f08c:	00bfff44 	movi	r2,-3
   4f090:	00000106 	br	4f098 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4f094:	0005883a 	mov	r2,zero
}
   4f098:	e037883a 	mov	sp,fp
   4f09c:	dfc00117 	ldw	ra,4(sp)
   4f0a0:	df000017 	ldw	fp,0(sp)
   4f0a4:	dec00204 	addi	sp,sp,8
   4f0a8:	f800283a 	ret

0004f0ac <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4f0ac:	defffd04 	addi	sp,sp,-12
   4f0b0:	df000215 	stw	fp,8(sp)
   4f0b4:	df000204 	addi	fp,sp,8
   4f0b8:	e13ffe15 	stw	r4,-8(fp)
   4f0bc:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4f0c0:	e0bffe17 	ldw	r2,-8(fp)
   4f0c4:	10800104 	addi	r2,r2,4
   4f0c8:	10800037 	ldwio	r2,0(r2)
   4f0cc:	1007883a 	mov	r3,r2
   4f0d0:	e0bfff17 	ldw	r2,-4(fp)
   4f0d4:	1884703a 	and	r2,r3,r2
}
   4f0d8:	e037883a 	mov	sp,fp
   4f0dc:	df000017 	ldw	fp,0(sp)
   4f0e0:	dec00104 	addi	sp,sp,4
   4f0e4:	f800283a 	ret

0004f0e8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4f0e8:	defffd04 	addi	sp,sp,-12
   4f0ec:	df000215 	stw	fp,8(sp)
   4f0f0:	df000204 	addi	fp,sp,8
   4f0f4:	e13ffe15 	stw	r4,-8(fp)
   4f0f8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4f0fc:	e0bffe17 	ldw	r2,-8(fp)
   4f100:	10800304 	addi	r2,r2,12
   4f104:	10800037 	ldwio	r2,0(r2)
   4f108:	1007883a 	mov	r3,r2
   4f10c:	e0bfff17 	ldw	r2,-4(fp)
   4f110:	1884703a 	and	r2,r3,r2
}
   4f114:	e037883a 	mov	sp,fp
   4f118:	df000017 	ldw	fp,0(sp)
   4f11c:	dec00104 	addi	sp,sp,4
   4f120:	f800283a 	ret

0004f124 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4f124:	defffe04 	addi	sp,sp,-8
   4f128:	df000115 	stw	fp,4(sp)
   4f12c:	df000104 	addi	fp,sp,4
   4f130:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4f134:	e0bfff17 	ldw	r2,-4(fp)
   4f138:	10800404 	addi	r2,r2,16
   4f13c:	10800037 	ldwio	r2,0(r2)
}
   4f140:	e037883a 	mov	sp,fp
   4f144:	df000017 	ldw	fp,0(sp)
   4f148:	dec00104 	addi	sp,sp,4
   4f14c:	f800283a 	ret

0004f150 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4f150:	defffe04 	addi	sp,sp,-8
   4f154:	df000115 	stw	fp,4(sp)
   4f158:	df000104 	addi	fp,sp,4
   4f15c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4f160:	e0bfff17 	ldw	r2,-4(fp)
   4f164:	10800504 	addi	r2,r2,20
   4f168:	10800037 	ldwio	r2,0(r2)
}
   4f16c:	e037883a 	mov	sp,fp
   4f170:	df000017 	ldw	fp,0(sp)
   4f174:	dec00104 	addi	sp,sp,4
   4f178:	f800283a 	ret

0004f17c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4f17c:	defffd04 	addi	sp,sp,-12
   4f180:	df000215 	stw	fp,8(sp)
   4f184:	df000204 	addi	fp,sp,8
   4f188:	e13ffe15 	stw	r4,-8(fp)
   4f18c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4f190:	e0bffe17 	ldw	r2,-8(fp)
   4f194:	10800204 	addi	r2,r2,8
   4f198:	10800037 	ldwio	r2,0(r2)
   4f19c:	1007883a 	mov	r3,r2
   4f1a0:	e0bfff17 	ldw	r2,-4(fp)
   4f1a4:	1884703a 	and	r2,r3,r2
}
   4f1a8:	e037883a 	mov	sp,fp
   4f1ac:	df000017 	ldw	fp,0(sp)
   4f1b0:	dec00104 	addi	sp,sp,4
   4f1b4:	f800283a 	ret

0004f1b8 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4f1b8:	defffe04 	addi	sp,sp,-8
   4f1bc:	df000115 	stw	fp,4(sp)
   4f1c0:	df000104 	addi	fp,sp,4
   4f1c4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4f1c8:	e0bfff17 	ldw	r2,-4(fp)
   4f1cc:	10800037 	ldwio	r2,0(r2)
}
   4f1d0:	e037883a 	mov	sp,fp
   4f1d4:	df000017 	ldw	fp,0(sp)
   4f1d8:	dec00104 	addi	sp,sp,4
   4f1dc:	f800283a 	ret

0004f1e0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4f1e0:	defffd04 	addi	sp,sp,-12
   4f1e4:	df000215 	stw	fp,8(sp)
   4f1e8:	df000204 	addi	fp,sp,8
   4f1ec:	e13ffe15 	stw	r4,-8(fp)
   4f1f0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4f1f4:	e0bffe17 	ldw	r2,-8(fp)
   4f1f8:	10800204 	addi	r2,r2,8
   4f1fc:	e0ffff17 	ldw	r3,-4(fp)
   4f200:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4f204:	e0bffe17 	ldw	r2,-8(fp)
   4f208:	10800204 	addi	r2,r2,8
   4f20c:	10800037 	ldwio	r2,0(r2)
   4f210:	1007883a 	mov	r3,r2
   4f214:	e0bfff17 	ldw	r2,-4(fp)
   4f218:	1884703a 	and	r2,r3,r2
   4f21c:	1000021e 	bne	r2,zero,4f228 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4f220:	0005883a 	mov	r2,zero
   4f224:	00000106 	br	4f22c <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4f228:	00bfffc4 	movi	r2,-1
}
   4f22c:	e037883a 	mov	sp,fp
   4f230:	df000017 	ldw	fp,0(sp)
   4f234:	dec00104 	addi	sp,sp,4
   4f238:	f800283a 	ret

0004f23c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4f23c:	defffd04 	addi	sp,sp,-12
   4f240:	df000215 	stw	fp,8(sp)
   4f244:	df000204 	addi	fp,sp,8
   4f248:	e13ffe15 	stw	r4,-8(fp)
   4f24c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4f250:	e0bffe17 	ldw	r2,-8(fp)
   4f254:	10800304 	addi	r2,r2,12
   4f258:	e0ffff17 	ldw	r3,-4(fp)
   4f25c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4f260:	e0bffe17 	ldw	r2,-8(fp)
   4f264:	10800304 	addi	r2,r2,12
   4f268:	10800037 	ldwio	r2,0(r2)
   4f26c:	1007883a 	mov	r3,r2
   4f270:	e0bfff17 	ldw	r2,-4(fp)
   4f274:	1880021e 	bne	r3,r2,4f280 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4f278:	0005883a 	mov	r2,zero
   4f27c:	00000106 	br	4f284 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4f280:	00bfff84 	movi	r2,-2
}
   4f284:	e037883a 	mov	sp,fp
   4f288:	df000017 	ldw	fp,0(sp)
   4f28c:	dec00104 	addi	sp,sp,4
   4f290:	f800283a 	ret

0004f294 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4f294:	defffd04 	addi	sp,sp,-12
   4f298:	df000215 	stw	fp,8(sp)
   4f29c:	df000204 	addi	fp,sp,8
   4f2a0:	e13ffe15 	stw	r4,-8(fp)
   4f2a4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4f2a8:	e0bffe17 	ldw	r2,-8(fp)
   4f2ac:	10800404 	addi	r2,r2,16
   4f2b0:	e0ffff17 	ldw	r3,-4(fp)
   4f2b4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4f2b8:	e0bffe17 	ldw	r2,-8(fp)
   4f2bc:	10800404 	addi	r2,r2,16
   4f2c0:	10800037 	ldwio	r2,0(r2)
   4f2c4:	1007883a 	mov	r3,r2
   4f2c8:	e0bfff17 	ldw	r2,-4(fp)
   4f2cc:	1880021e 	bne	r3,r2,4f2d8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4f2d0:	0005883a 	mov	r2,zero
   4f2d4:	00000106 	br	4f2dc <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f2d8:	00bfff44 	movi	r2,-3
}
   4f2dc:	e037883a 	mov	sp,fp
   4f2e0:	df000017 	ldw	fp,0(sp)
   4f2e4:	dec00104 	addi	sp,sp,4
   4f2e8:	f800283a 	ret

0004f2ec <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4f2ec:	defffd04 	addi	sp,sp,-12
   4f2f0:	df000215 	stw	fp,8(sp)
   4f2f4:	df000204 	addi	fp,sp,8
   4f2f8:	e13ffe15 	stw	r4,-8(fp)
   4f2fc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4f300:	e0bffe17 	ldw	r2,-8(fp)
   4f304:	10800504 	addi	r2,r2,20
   4f308:	e0ffff17 	ldw	r3,-4(fp)
   4f30c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4f310:	e0bffe17 	ldw	r2,-8(fp)
   4f314:	10800504 	addi	r2,r2,20
   4f318:	10800037 	ldwio	r2,0(r2)
   4f31c:	1007883a 	mov	r3,r2
   4f320:	e0bfff17 	ldw	r2,-4(fp)
   4f324:	1880021e 	bne	r3,r2,4f330 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4f328:	0005883a 	mov	r2,zero
   4f32c:	00000106 	br	4f334 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4f330:	00bfff44 	movi	r2,-3
}
   4f334:	e037883a 	mov	sp,fp
   4f338:	df000017 	ldw	fp,0(sp)
   4f33c:	dec00104 	addi	sp,sp,4
   4f340:	f800283a 	ret

0004f344 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4f344:	defffb04 	addi	sp,sp,-20
   4f348:	dfc00415 	stw	ra,16(sp)
   4f34c:	df000315 	stw	fp,12(sp)
   4f350:	df000304 	addi	fp,sp,12
   4f354:	e13ffd15 	stw	r4,-12(fp)
   4f358:	e17ffe15 	stw	r5,-8(fp)
   4f35c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4f360:	e13ffe17 	ldw	r4,-8(fp)
   4f364:	01400044 	movi	r5,1
   4f368:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   4f36c:	1000051e 	bne	r2,zero,4f384 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4f370:	e0bffd17 	ldw	r2,-12(fp)
   4f374:	e0ffff17 	ldw	r3,-4(fp)
   4f378:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4f37c:	0005883a 	mov	r2,zero
   4f380:	00000106 	br	4f388 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4f384:	00bfff04 	movi	r2,-4
    }
}
   4f388:	e037883a 	mov	sp,fp
   4f38c:	dfc00117 	ldw	ra,4(sp)
   4f390:	df000017 	ldw	fp,0(sp)
   4f394:	dec00204 	addi	sp,sp,8
   4f398:	f800283a 	ret

0004f39c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4f39c:	defffa04 	addi	sp,sp,-24
   4f3a0:	dfc00515 	stw	ra,20(sp)
   4f3a4:	df000415 	stw	fp,16(sp)
   4f3a8:	df000404 	addi	fp,sp,16
   4f3ac:	e13ffd15 	stw	r4,-12(fp)
   4f3b0:	e17ffe15 	stw	r5,-8(fp)
   4f3b4:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4f3b8:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4f3bc:	e0bfff17 	ldw	r2,-4(fp)
   4f3c0:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4f3c4:	e13ffe17 	ldw	r4,-8(fp)
   4f3c8:	01400084 	movi	r5,2
   4f3cc:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   4f3d0:	1000071e 	bne	r2,zero,4f3f0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4f3d4:	e13ffe17 	ldw	r4,-8(fp)
   4f3d8:	004f1b80 	call	4f1b8 <altera_avalon_fifo_read_level>
   4f3dc:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4f3e0:	e0bffd17 	ldw	r2,-12(fp)
   4f3e4:	10c00037 	ldwio	r3,0(r2)
   4f3e8:	e0bfff17 	ldw	r2,-4(fp)
   4f3ec:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4f3f0:	e0bffc17 	ldw	r2,-16(fp)
}
   4f3f4:	e037883a 	mov	sp,fp
   4f3f8:	dfc00117 	ldw	ra,4(sp)
   4f3fc:	df000017 	ldw	fp,0(sp)
   4f400:	dec00204 	addi	sp,sp,8
   4f404:	f800283a 	ret

0004f408 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4f408:	defffc04 	addi	sp,sp,-16
   4f40c:	dfc00315 	stw	ra,12(sp)
   4f410:	df000215 	stw	fp,8(sp)
   4f414:	df000204 	addi	fp,sp,8
   4f418:	e13ffe15 	stw	r4,-8(fp)
   4f41c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4f420:	e13fff17 	ldw	r4,-4(fp)
   4f424:	01400084 	movi	r5,2
   4f428:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   4f42c:	1000031e 	bne	r2,zero,4f43c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4f430:	e0bffe17 	ldw	r2,-8(fp)
   4f434:	10800037 	ldwio	r2,0(r2)
   4f438:	00000106 	br	4f440 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4f43c:	0005883a 	mov	r2,zero
}
   4f440:	e037883a 	mov	sp,fp
   4f444:	dfc00117 	ldw	ra,4(sp)
   4f448:	df000017 	ldw	fp,0(sp)
   4f44c:	dec00204 	addi	sp,sp,8
   4f450:	f800283a 	ret

0004f454 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4f454:	defffb04 	addi	sp,sp,-20
   4f458:	dfc00415 	stw	ra,16(sp)
   4f45c:	df000315 	stw	fp,12(sp)
   4f460:	df000304 	addi	fp,sp,12
   4f464:	e13ffd15 	stw	r4,-12(fp)
   4f468:	e17ffe15 	stw	r5,-8(fp)
   4f46c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4f470:	e13ffe17 	ldw	r4,-8(fp)
   4f474:	01400044 	movi	r5,1
   4f478:	004f0ac0 	call	4f0ac <altera_avalon_fifo_read_status>
   4f47c:	1000061e 	bne	r2,zero,4f498 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4f480:	e0bffd17 	ldw	r2,-12(fp)
   4f484:	10800104 	addi	r2,r2,4
   4f488:	e0ffff17 	ldw	r3,-4(fp)
   4f48c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4f490:	0005883a 	mov	r2,zero
   4f494:	00000106 	br	4f49c <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4f498:	00bfff04 	movi	r2,-4
    }
}
   4f49c:	e037883a 	mov	sp,fp
   4f4a0:	dfc00117 	ldw	ra,4(sp)
   4f4a4:	df000017 	ldw	fp,0(sp)
   4f4a8:	dec00204 	addi	sp,sp,8
   4f4ac:	f800283a 	ret

0004f4b0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4f4b0:	defffe04 	addi	sp,sp,-8
   4f4b4:	df000115 	stw	fp,4(sp)
   4f4b8:	df000104 	addi	fp,sp,4
   4f4bc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4f4c0:	e0bfff17 	ldw	r2,-4(fp)
   4f4c4:	10800104 	addi	r2,r2,4
   4f4c8:	10800037 	ldwio	r2,0(r2)
}
   4f4cc:	e037883a 	mov	sp,fp
   4f4d0:	df000017 	ldw	fp,0(sp)
   4f4d4:	dec00104 	addi	sp,sp,4
   4f4d8:	f800283a 	ret

0004f4dc <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4f4dc:	defffe04 	addi	sp,sp,-8
   4f4e0:	df000115 	stw	fp,4(sp)
   4f4e4:	df000104 	addi	fp,sp,4
   4f4e8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4f4ec:	e0bfff17 	ldw	r2,-4(fp)
   4f4f0:	10800037 	ldwio	r2,0(r2)
}
   4f4f4:	e037883a 	mov	sp,fp
   4f4f8:	df000017 	ldw	fp,0(sp)
   4f4fc:	dec00104 	addi	sp,sp,4
   4f500:	f800283a 	ret

0004f504 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4f504:	defffa04 	addi	sp,sp,-24
   4f508:	dfc00515 	stw	ra,20(sp)
   4f50c:	df000415 	stw	fp,16(sp)
   4f510:	df000404 	addi	fp,sp,16
   4f514:	e13ffd15 	stw	r4,-12(fp)
   4f518:	e17ffe15 	stw	r5,-8(fp)
   4f51c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f520:	e0bffd17 	ldw	r2,-12(fp)
   4f524:	10800017 	ldw	r2,0(r2)
   4f528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f52c:	e0bffc17 	ldw	r2,-16(fp)
   4f530:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4f534:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f538:	10800217 	ldw	r2,8(r2)
   4f53c:	1809883a 	mov	r4,r3
   4f540:	e17ffe17 	ldw	r5,-8(fp)
   4f544:	e1bfff17 	ldw	r6,-4(fp)
   4f548:	100f883a 	mov	r7,r2
   4f54c:	004fb2c0 	call	4fb2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4f550:	e037883a 	mov	sp,fp
   4f554:	dfc00117 	ldw	ra,4(sp)
   4f558:	df000017 	ldw	fp,0(sp)
   4f55c:	dec00204 	addi	sp,sp,8
   4f560:	f800283a 	ret

0004f564 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4f564:	defffa04 	addi	sp,sp,-24
   4f568:	dfc00515 	stw	ra,20(sp)
   4f56c:	df000415 	stw	fp,16(sp)
   4f570:	df000404 	addi	fp,sp,16
   4f574:	e13ffd15 	stw	r4,-12(fp)
   4f578:	e17ffe15 	stw	r5,-8(fp)
   4f57c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f580:	e0bffd17 	ldw	r2,-12(fp)
   4f584:	10800017 	ldw	r2,0(r2)
   4f588:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f58c:	e0bffc17 	ldw	r2,-16(fp)
   4f590:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4f594:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f598:	10800217 	ldw	r2,8(r2)
   4f59c:	1809883a 	mov	r4,r3
   4f5a0:	e17ffe17 	ldw	r5,-8(fp)
   4f5a4:	e1bfff17 	ldw	r6,-4(fp)
   4f5a8:	100f883a 	mov	r7,r2
   4f5ac:	004fd440 	call	4fd44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4f5b0:	e037883a 	mov	sp,fp
   4f5b4:	dfc00117 	ldw	ra,4(sp)
   4f5b8:	df000017 	ldw	fp,0(sp)
   4f5bc:	dec00204 	addi	sp,sp,8
   4f5c0:	f800283a 	ret

0004f5c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4f5c4:	defffc04 	addi	sp,sp,-16
   4f5c8:	dfc00315 	stw	ra,12(sp)
   4f5cc:	df000215 	stw	fp,8(sp)
   4f5d0:	df000204 	addi	fp,sp,8
   4f5d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f5d8:	e0bfff17 	ldw	r2,-4(fp)
   4f5dc:	10800017 	ldw	r2,0(r2)
   4f5e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4f5e4:	e0bffe17 	ldw	r2,-8(fp)
   4f5e8:	10c00a04 	addi	r3,r2,40
   4f5ec:	e0bfff17 	ldw	r2,-4(fp)
   4f5f0:	10800217 	ldw	r2,8(r2)
   4f5f4:	1809883a 	mov	r4,r3
   4f5f8:	100b883a 	mov	r5,r2
   4f5fc:	004f9d00 	call	4f9d0 <altera_avalon_jtag_uart_close>
}
   4f600:	e037883a 	mov	sp,fp
   4f604:	dfc00117 	ldw	ra,4(sp)
   4f608:	df000017 	ldw	fp,0(sp)
   4f60c:	dec00204 	addi	sp,sp,8
   4f610:	f800283a 	ret

0004f614 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4f614:	defffa04 	addi	sp,sp,-24
   4f618:	dfc00515 	stw	ra,20(sp)
   4f61c:	df000415 	stw	fp,16(sp)
   4f620:	df000404 	addi	fp,sp,16
   4f624:	e13ffd15 	stw	r4,-12(fp)
   4f628:	e17ffe15 	stw	r5,-8(fp)
   4f62c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4f630:	e0bffd17 	ldw	r2,-12(fp)
   4f634:	10800017 	ldw	r2,0(r2)
   4f638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4f63c:	e0bffc17 	ldw	r2,-16(fp)
   4f640:	10800a04 	addi	r2,r2,40
   4f644:	1009883a 	mov	r4,r2
   4f648:	e17ffe17 	ldw	r5,-8(fp)
   4f64c:	e1bfff17 	ldw	r6,-4(fp)
   4f650:	004fa380 	call	4fa38 <altera_avalon_jtag_uart_ioctl>
}
   4f654:	e037883a 	mov	sp,fp
   4f658:	dfc00117 	ldw	ra,4(sp)
   4f65c:	df000017 	ldw	fp,0(sp)
   4f660:	dec00204 	addi	sp,sp,8
   4f664:	f800283a 	ret

0004f668 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4f668:	defffa04 	addi	sp,sp,-24
   4f66c:	dfc00515 	stw	ra,20(sp)
   4f670:	df000415 	stw	fp,16(sp)
   4f674:	df000404 	addi	fp,sp,16
   4f678:	e13ffd15 	stw	r4,-12(fp)
   4f67c:	e17ffe15 	stw	r5,-8(fp)
   4f680:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f684:	e0bffd17 	ldw	r2,-12(fp)
   4f688:	00c00044 	movi	r3,1
   4f68c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4f690:	e0bffd17 	ldw	r2,-12(fp)
   4f694:	10800017 	ldw	r2,0(r2)
   4f698:	10800104 	addi	r2,r2,4
   4f69c:	e0fffd17 	ldw	r3,-12(fp)
   4f6a0:	18c00817 	ldw	r3,32(r3)
   4f6a4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4f6a8:	e0fffe17 	ldw	r3,-8(fp)
   4f6ac:	e0bfff17 	ldw	r2,-4(fp)
   4f6b0:	d8000015 	stw	zero,0(sp)
   4f6b4:	1809883a 	mov	r4,r3
   4f6b8:	100b883a 	mov	r5,r2
   4f6bc:	01800174 	movhi	r6,5
   4f6c0:	31bdca04 	addi	r6,r6,-2264
   4f6c4:	e1fffd17 	ldw	r7,-12(fp)
   4f6c8:	0050ca80 	call	50ca8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4f6cc:	e0bffd17 	ldw	r2,-12(fp)
   4f6d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4f6d4:	e0bffd17 	ldw	r2,-12(fp)
   4f6d8:	10c00204 	addi	r3,r2,8
   4f6dc:	00800174 	movhi	r2,5
   4f6e0:	10947404 	addi	r2,r2,20944
   4f6e4:	10800017 	ldw	r2,0(r2)
   4f6e8:	1809883a 	mov	r4,r3
   4f6ec:	100b883a 	mov	r5,r2
   4f6f0:	01800174 	movhi	r6,5
   4f6f4:	31be4b04 	addi	r6,r6,-1748
   4f6f8:	e1fffd17 	ldw	r7,-12(fp)
   4f6fc:	005068c0 	call	5068c <alt_alarm_start>
   4f700:	1000040e 	bge	r2,zero,4f714 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4f704:	e0bffd17 	ldw	r2,-12(fp)
   4f708:	00e00034 	movhi	r3,32768
   4f70c:	18ffffc4 	addi	r3,r3,-1
   4f710:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4f714:	e037883a 	mov	sp,fp
   4f718:	dfc00117 	ldw	ra,4(sp)
   4f71c:	df000017 	ldw	fp,0(sp)
   4f720:	dec00204 	addi	sp,sp,8
   4f724:	f800283a 	ret

0004f728 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4f728:	defff804 	addi	sp,sp,-32
   4f72c:	df000715 	stw	fp,28(sp)
   4f730:	df000704 	addi	fp,sp,28
   4f734:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4f738:	e0bfff17 	ldw	r2,-4(fp)
   4f73c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4f740:	e0bffb17 	ldw	r2,-20(fp)
   4f744:	10800017 	ldw	r2,0(r2)
   4f748:	e0bffc15 	stw	r2,-16(fp)
   4f74c:	00000106 	br	4f754 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4f750:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f754:	e0bffc17 	ldw	r2,-16(fp)
   4f758:	10800104 	addi	r2,r2,4
   4f75c:	10800037 	ldwio	r2,0(r2)
   4f760:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4f764:	e0bffd17 	ldw	r2,-12(fp)
   4f768:	1080c00c 	andi	r2,r2,768
   4f76c:	10006a26 	beq	r2,zero,4f918 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4f770:	e0bffd17 	ldw	r2,-12(fp)
   4f774:	1080400c 	andi	r2,r2,256
   4f778:	10003326 	beq	r2,zero,4f848 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4f77c:	00800074 	movhi	r2,1
   4f780:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f784:	e0bffb17 	ldw	r2,-20(fp)
   4f788:	10800a17 	ldw	r2,40(r2)
   4f78c:	10800044 	addi	r2,r2,1
   4f790:	1081ffcc 	andi	r2,r2,2047
   4f794:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4f798:	e0bffb17 	ldw	r2,-20(fp)
   4f79c:	10c00b17 	ldw	r3,44(r2)
   4f7a0:	e0bffe17 	ldw	r2,-8(fp)
   4f7a4:	18801426 	beq	r3,r2,4f7f8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4f7a8:	e0bffc17 	ldw	r2,-16(fp)
   4f7ac:	10800037 	ldwio	r2,0(r2)
   4f7b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4f7b4:	e0bff917 	ldw	r2,-28(fp)
   4f7b8:	10a0000c 	andi	r2,r2,32768
   4f7bc:	10001026 	beq	r2,zero,4f800 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4f7c0:	e0bffb17 	ldw	r2,-20(fp)
   4f7c4:	10800a17 	ldw	r2,40(r2)
   4f7c8:	e0fff917 	ldw	r3,-28(fp)
   4f7cc:	e13ffb17 	ldw	r4,-20(fp)
   4f7d0:	2085883a 	add	r2,r4,r2
   4f7d4:	10800e04 	addi	r2,r2,56
   4f7d8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f7dc:	e0bffb17 	ldw	r2,-20(fp)
   4f7e0:	10800a17 	ldw	r2,40(r2)
   4f7e4:	10800044 	addi	r2,r2,1
   4f7e8:	10c1ffcc 	andi	r3,r2,2047
   4f7ec:	e0bffb17 	ldw	r2,-20(fp)
   4f7f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4f7f4:	003fe306 	br	4f784 <__alt_data_end+0xfffef784>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4f7f8:	0001883a 	nop
   4f7fc:	00000106 	br	4f804 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4f800:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4f804:	e0bff917 	ldw	r2,-28(fp)
   4f808:	10bfffec 	andhi	r2,r2,65535
   4f80c:	10000e26 	beq	r2,zero,4f848 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f810:	e0bffb17 	ldw	r2,-20(fp)
   4f814:	10c00817 	ldw	r3,32(r2)
   4f818:	00bfff84 	movi	r2,-2
   4f81c:	1886703a 	and	r3,r3,r2
   4f820:	e0bffb17 	ldw	r2,-20(fp)
   4f824:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4f828:	e0bffc17 	ldw	r2,-16(fp)
   4f82c:	10800104 	addi	r2,r2,4
   4f830:	e0fffb17 	ldw	r3,-20(fp)
   4f834:	18c00817 	ldw	r3,32(r3)
   4f838:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f83c:	e0bffc17 	ldw	r2,-16(fp)
   4f840:	10800104 	addi	r2,r2,4
   4f844:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4f848:	e0bffd17 	ldw	r2,-12(fp)
   4f84c:	1080800c 	andi	r2,r2,512
   4f850:	103fbf26 	beq	r2,zero,4f750 <__alt_data_end+0xfffef750>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4f854:	e0bffd17 	ldw	r2,-12(fp)
   4f858:	1004d43a 	srli	r2,r2,16
   4f85c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f860:	00001406 	br	4f8b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4f864:	e0bffc17 	ldw	r2,-16(fp)
   4f868:	e0fffb17 	ldw	r3,-20(fp)
   4f86c:	18c00d17 	ldw	r3,52(r3)
   4f870:	e13ffb17 	ldw	r4,-20(fp)
   4f874:	20c7883a 	add	r3,r4,r3
   4f878:	18c20e04 	addi	r3,r3,2104
   4f87c:	18c00003 	ldbu	r3,0(r3)
   4f880:	18c03fcc 	andi	r3,r3,255
   4f884:	18c0201c 	xori	r3,r3,128
   4f888:	18ffe004 	addi	r3,r3,-128
   4f88c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f890:	e0bffb17 	ldw	r2,-20(fp)
   4f894:	10800d17 	ldw	r2,52(r2)
   4f898:	10800044 	addi	r2,r2,1
   4f89c:	10c1ffcc 	andi	r3,r2,2047
   4f8a0:	e0bffb17 	ldw	r2,-20(fp)
   4f8a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4f8a8:	e0bffa17 	ldw	r2,-24(fp)
   4f8ac:	10bfffc4 	addi	r2,r2,-1
   4f8b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4f8b4:	e0bffa17 	ldw	r2,-24(fp)
   4f8b8:	10000526 	beq	r2,zero,4f8d0 <altera_avalon_jtag_uart_irq+0x1a8>
   4f8bc:	e0bffb17 	ldw	r2,-20(fp)
   4f8c0:	10c00d17 	ldw	r3,52(r2)
   4f8c4:	e0bffb17 	ldw	r2,-20(fp)
   4f8c8:	10800c17 	ldw	r2,48(r2)
   4f8cc:	18bfe51e 	bne	r3,r2,4f864 <__alt_data_end+0xfffef864>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4f8d0:	e0bffa17 	ldw	r2,-24(fp)
   4f8d4:	103f9e26 	beq	r2,zero,4f750 <__alt_data_end+0xfffef750>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4f8d8:	e0bffb17 	ldw	r2,-20(fp)
   4f8dc:	10c00817 	ldw	r3,32(r2)
   4f8e0:	00bfff44 	movi	r2,-3
   4f8e4:	1886703a 	and	r3,r3,r2
   4f8e8:	e0bffb17 	ldw	r2,-20(fp)
   4f8ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f8f0:	e0bffb17 	ldw	r2,-20(fp)
   4f8f4:	10800017 	ldw	r2,0(r2)
   4f8f8:	10800104 	addi	r2,r2,4
   4f8fc:	e0fffb17 	ldw	r3,-20(fp)
   4f900:	18c00817 	ldw	r3,32(r3)
   4f904:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f908:	e0bffc17 	ldw	r2,-16(fp)
   4f90c:	10800104 	addi	r2,r2,4
   4f910:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4f914:	003f8e06 	br	4f750 <__alt_data_end+0xfffef750>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4f918:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4f91c:	e037883a 	mov	sp,fp
   4f920:	df000017 	ldw	fp,0(sp)
   4f924:	dec00104 	addi	sp,sp,4
   4f928:	f800283a 	ret

0004f92c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4f92c:	defffc04 	addi	sp,sp,-16
   4f930:	df000315 	stw	fp,12(sp)
   4f934:	df000304 	addi	fp,sp,12
   4f938:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4f93c:	e0bfff17 	ldw	r2,-4(fp)
   4f940:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4f944:	e0bffd17 	ldw	r2,-12(fp)
   4f948:	10800017 	ldw	r2,0(r2)
   4f94c:	10800104 	addi	r2,r2,4
   4f950:	10800037 	ldwio	r2,0(r2)
   4f954:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4f958:	e0bffe17 	ldw	r2,-8(fp)
   4f95c:	1081000c 	andi	r2,r2,1024
   4f960:	10000a26 	beq	r2,zero,4f98c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4f964:	e0bffd17 	ldw	r2,-12(fp)
   4f968:	10800017 	ldw	r2,0(r2)
   4f96c:	10800104 	addi	r2,r2,4
   4f970:	e0fffd17 	ldw	r3,-12(fp)
   4f974:	18c00817 	ldw	r3,32(r3)
   4f978:	18c10014 	ori	r3,r3,1024
   4f97c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4f980:	e0bffd17 	ldw	r2,-12(fp)
   4f984:	10000915 	stw	zero,36(r2)
   4f988:	00000a06 	br	4f9b4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4f98c:	e0bffd17 	ldw	r2,-12(fp)
   4f990:	10800917 	ldw	r2,36(r2)
   4f994:	00e00034 	movhi	r3,32768
   4f998:	18ffff04 	addi	r3,r3,-4
   4f99c:	18800536 	bltu	r3,r2,4f9b4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4f9a0:	e0bffd17 	ldw	r2,-12(fp)
   4f9a4:	10800917 	ldw	r2,36(r2)
   4f9a8:	10c00044 	addi	r3,r2,1
   4f9ac:	e0bffd17 	ldw	r2,-12(fp)
   4f9b0:	10c00915 	stw	r3,36(r2)
   4f9b4:	00800174 	movhi	r2,5
   4f9b8:	10947404 	addi	r2,r2,20944
   4f9bc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4f9c0:	e037883a 	mov	sp,fp
   4f9c4:	df000017 	ldw	fp,0(sp)
   4f9c8:	dec00104 	addi	sp,sp,4
   4f9cc:	f800283a 	ret

0004f9d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4f9d0:	defffd04 	addi	sp,sp,-12
   4f9d4:	df000215 	stw	fp,8(sp)
   4f9d8:	df000204 	addi	fp,sp,8
   4f9dc:	e13ffe15 	stw	r4,-8(fp)
   4f9e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f9e4:	00000506 	br	4f9fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4f9e8:	e0bfff17 	ldw	r2,-4(fp)
   4f9ec:	1090000c 	andi	r2,r2,16384
   4f9f0:	10000226 	beq	r2,zero,4f9fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4f9f4:	00bffd44 	movi	r2,-11
   4f9f8:	00000b06 	br	4fa28 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4f9fc:	e0bffe17 	ldw	r2,-8(fp)
   4fa00:	10c00d17 	ldw	r3,52(r2)
   4fa04:	e0bffe17 	ldw	r2,-8(fp)
   4fa08:	10800c17 	ldw	r2,48(r2)
   4fa0c:	18800526 	beq	r3,r2,4fa24 <altera_avalon_jtag_uart_close+0x54>
   4fa10:	e0bffe17 	ldw	r2,-8(fp)
   4fa14:	10c00917 	ldw	r3,36(r2)
   4fa18:	e0bffe17 	ldw	r2,-8(fp)
   4fa1c:	10800117 	ldw	r2,4(r2)
   4fa20:	18bff136 	bltu	r3,r2,4f9e8 <__alt_data_end+0xfffef9e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4fa24:	0005883a 	mov	r2,zero
}
   4fa28:	e037883a 	mov	sp,fp
   4fa2c:	df000017 	ldw	fp,0(sp)
   4fa30:	dec00104 	addi	sp,sp,4
   4fa34:	f800283a 	ret

0004fa38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4fa38:	defffa04 	addi	sp,sp,-24
   4fa3c:	df000515 	stw	fp,20(sp)
   4fa40:	df000504 	addi	fp,sp,20
   4fa44:	e13ffd15 	stw	r4,-12(fp)
   4fa48:	e17ffe15 	stw	r5,-8(fp)
   4fa4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4fa50:	00bff9c4 	movi	r2,-25
   4fa54:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4fa58:	e0bffe17 	ldw	r2,-8(fp)
   4fa5c:	10da8060 	cmpeqi	r3,r2,27137
   4fa60:	1800031e 	bne	r3,zero,4fa70 <altera_avalon_jtag_uart_ioctl+0x38>
   4fa64:	109a80a0 	cmpeqi	r2,r2,27138
   4fa68:	1000181e 	bne	r2,zero,4facc <altera_avalon_jtag_uart_ioctl+0x94>
   4fa6c:	00002606 	br	4fb08 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4fa70:	e0bffd17 	ldw	r2,-12(fp)
   4fa74:	10c00117 	ldw	r3,4(r2)
   4fa78:	00a00034 	movhi	r2,32768
   4fa7c:	10bfffc4 	addi	r2,r2,-1
   4fa80:	18802226 	beq	r3,r2,4fb0c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4fa84:	e0bfff17 	ldw	r2,-4(fp)
   4fa88:	10800017 	ldw	r2,0(r2)
   4fa8c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4fa90:	e0bffc17 	ldw	r2,-16(fp)
   4fa94:	10800090 	cmplti	r2,r2,2
   4fa98:	1000061e 	bne	r2,zero,4fab4 <altera_avalon_jtag_uart_ioctl+0x7c>
   4fa9c:	e0fffc17 	ldw	r3,-16(fp)
   4faa0:	00a00034 	movhi	r2,32768
   4faa4:	10bfffc4 	addi	r2,r2,-1
   4faa8:	18800226 	beq	r3,r2,4fab4 <altera_avalon_jtag_uart_ioctl+0x7c>
   4faac:	e0bffc17 	ldw	r2,-16(fp)
   4fab0:	00000206 	br	4fabc <altera_avalon_jtag_uart_ioctl+0x84>
   4fab4:	00a00034 	movhi	r2,32768
   4fab8:	10bfff84 	addi	r2,r2,-2
   4fabc:	e0fffd17 	ldw	r3,-12(fp)
   4fac0:	18800115 	stw	r2,4(r3)
      rc = 0;
   4fac4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fac8:	00001006 	br	4fb0c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4facc:	e0bffd17 	ldw	r2,-12(fp)
   4fad0:	10c00117 	ldw	r3,4(r2)
   4fad4:	00a00034 	movhi	r2,32768
   4fad8:	10bfffc4 	addi	r2,r2,-1
   4fadc:	18800d26 	beq	r3,r2,4fb14 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4fae0:	e0bffd17 	ldw	r2,-12(fp)
   4fae4:	10c00917 	ldw	r3,36(r2)
   4fae8:	e0bffd17 	ldw	r2,-12(fp)
   4faec:	10800117 	ldw	r2,4(r2)
   4faf0:	1885803a 	cmpltu	r2,r3,r2
   4faf4:	10c03fcc 	andi	r3,r2,255
   4faf8:	e0bfff17 	ldw	r2,-4(fp)
   4fafc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4fb00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fb04:	00000306 	br	4fb14 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4fb08:	00000306 	br	4fb18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4fb0c:	0001883a 	nop
   4fb10:	00000106 	br	4fb18 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4fb14:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4fb18:	e0bffb17 	ldw	r2,-20(fp)
}
   4fb1c:	e037883a 	mov	sp,fp
   4fb20:	df000017 	ldw	fp,0(sp)
   4fb24:	dec00104 	addi	sp,sp,4
   4fb28:	f800283a 	ret

0004fb2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4fb2c:	defff304 	addi	sp,sp,-52
   4fb30:	dfc00c15 	stw	ra,48(sp)
   4fb34:	df000b15 	stw	fp,44(sp)
   4fb38:	df000b04 	addi	fp,sp,44
   4fb3c:	e13ffc15 	stw	r4,-16(fp)
   4fb40:	e17ffd15 	stw	r5,-12(fp)
   4fb44:	e1bffe15 	stw	r6,-8(fp)
   4fb48:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4fb4c:	e0bffd17 	ldw	r2,-12(fp)
   4fb50:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fb54:	00004706 	br	4fc74 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4fb58:	e0bffc17 	ldw	r2,-16(fp)
   4fb5c:	10800a17 	ldw	r2,40(r2)
   4fb60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4fb64:	e0bffc17 	ldw	r2,-16(fp)
   4fb68:	10800b17 	ldw	r2,44(r2)
   4fb6c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4fb70:	e0fff717 	ldw	r3,-36(fp)
   4fb74:	e0bff817 	ldw	r2,-32(fp)
   4fb78:	18800536 	bltu	r3,r2,4fb90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4fb7c:	e0fff717 	ldw	r3,-36(fp)
   4fb80:	e0bff817 	ldw	r2,-32(fp)
   4fb84:	1885c83a 	sub	r2,r3,r2
   4fb88:	e0bff615 	stw	r2,-40(fp)
   4fb8c:	00000406 	br	4fba0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4fb90:	00c20004 	movi	r3,2048
   4fb94:	e0bff817 	ldw	r2,-32(fp)
   4fb98:	1885c83a 	sub	r2,r3,r2
   4fb9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fba0:	e0bff617 	ldw	r2,-40(fp)
   4fba4:	10001e26 	beq	r2,zero,4fc20 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4fba8:	e0fffe17 	ldw	r3,-8(fp)
   4fbac:	e0bff617 	ldw	r2,-40(fp)
   4fbb0:	1880022e 	bgeu	r3,r2,4fbbc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4fbb4:	e0bffe17 	ldw	r2,-8(fp)
   4fbb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4fbbc:	e0bff817 	ldw	r2,-32(fp)
   4fbc0:	10800e04 	addi	r2,r2,56
   4fbc4:	e0fffc17 	ldw	r3,-16(fp)
   4fbc8:	1885883a 	add	r2,r3,r2
   4fbcc:	e13ff517 	ldw	r4,-44(fp)
   4fbd0:	100b883a 	mov	r5,r2
   4fbd4:	e1bff617 	ldw	r6,-40(fp)
   4fbd8:	00482540 	call	48254 <memcpy>
      ptr   += n;
   4fbdc:	e0fff517 	ldw	r3,-44(fp)
   4fbe0:	e0bff617 	ldw	r2,-40(fp)
   4fbe4:	1885883a 	add	r2,r3,r2
   4fbe8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4fbec:	e0fffe17 	ldw	r3,-8(fp)
   4fbf0:	e0bff617 	ldw	r2,-40(fp)
   4fbf4:	1885c83a 	sub	r2,r3,r2
   4fbf8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fbfc:	e0fff817 	ldw	r3,-32(fp)
   4fc00:	e0bff617 	ldw	r2,-40(fp)
   4fc04:	1885883a 	add	r2,r3,r2
   4fc08:	10c1ffcc 	andi	r3,r2,2047
   4fc0c:	e0bffc17 	ldw	r2,-16(fp)
   4fc10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4fc14:	e0bffe17 	ldw	r2,-8(fp)
   4fc18:	00bfcf16 	blt	zero,r2,4fb58 <__alt_data_end+0xfffefb58>
   4fc1c:	00000106 	br	4fc24 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4fc20:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4fc24:	e0fff517 	ldw	r3,-44(fp)
   4fc28:	e0bffd17 	ldw	r2,-12(fp)
   4fc2c:	1880141e 	bne	r3,r2,4fc80 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4fc30:	e0bfff17 	ldw	r2,-4(fp)
   4fc34:	1090000c 	andi	r2,r2,16384
   4fc38:	1000131e 	bne	r2,zero,4fc88 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4fc3c:	0001883a 	nop
   4fc40:	e0bffc17 	ldw	r2,-16(fp)
   4fc44:	10c00a17 	ldw	r3,40(r2)
   4fc48:	e0bff717 	ldw	r2,-36(fp)
   4fc4c:	1880051e 	bne	r3,r2,4fc64 <altera_avalon_jtag_uart_read+0x138>
   4fc50:	e0bffc17 	ldw	r2,-16(fp)
   4fc54:	10c00917 	ldw	r3,36(r2)
   4fc58:	e0bffc17 	ldw	r2,-16(fp)
   4fc5c:	10800117 	ldw	r2,4(r2)
   4fc60:	18bff736 	bltu	r3,r2,4fc40 <__alt_data_end+0xfffefc40>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4fc64:	e0bffc17 	ldw	r2,-16(fp)
   4fc68:	10c00a17 	ldw	r3,40(r2)
   4fc6c:	e0bff717 	ldw	r2,-36(fp)
   4fc70:	18800726 	beq	r3,r2,4fc90 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fc74:	e0bffe17 	ldw	r2,-8(fp)
   4fc78:	00bfb716 	blt	zero,r2,4fb58 <__alt_data_end+0xfffefb58>
   4fc7c:	00000506 	br	4fc94 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4fc80:	0001883a 	nop
   4fc84:	00000306 	br	4fc94 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4fc88:	0001883a 	nop
   4fc8c:	00000106 	br	4fc94 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4fc90:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4fc94:	e0fff517 	ldw	r3,-44(fp)
   4fc98:	e0bffd17 	ldw	r2,-12(fp)
   4fc9c:	18801726 	beq	r3,r2,4fcfc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fca0:	0005303a 	rdctl	r2,status
   4fca4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fca8:	e0fffa17 	ldw	r3,-24(fp)
   4fcac:	00bfff84 	movi	r2,-2
   4fcb0:	1884703a 	and	r2,r3,r2
   4fcb4:	1001703a 	wrctl	status,r2
  
  return context;
   4fcb8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4fcbc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4fcc0:	e0bffc17 	ldw	r2,-16(fp)
   4fcc4:	10800817 	ldw	r2,32(r2)
   4fcc8:	10c00054 	ori	r3,r2,1
   4fccc:	e0bffc17 	ldw	r2,-16(fp)
   4fcd0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fcd4:	e0bffc17 	ldw	r2,-16(fp)
   4fcd8:	10800017 	ldw	r2,0(r2)
   4fcdc:	10800104 	addi	r2,r2,4
   4fce0:	e0fffc17 	ldw	r3,-16(fp)
   4fce4:	18c00817 	ldw	r3,32(r3)
   4fce8:	10c00035 	stwio	r3,0(r2)
   4fcec:	e0bff917 	ldw	r2,-28(fp)
   4fcf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fcf4:	e0bffb17 	ldw	r2,-20(fp)
   4fcf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4fcfc:	e0fff517 	ldw	r3,-44(fp)
   4fd00:	e0bffd17 	ldw	r2,-12(fp)
   4fd04:	18800426 	beq	r3,r2,4fd18 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4fd08:	e0fff517 	ldw	r3,-44(fp)
   4fd0c:	e0bffd17 	ldw	r2,-12(fp)
   4fd10:	1885c83a 	sub	r2,r3,r2
   4fd14:	00000606 	br	4fd30 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4fd18:	e0bfff17 	ldw	r2,-4(fp)
   4fd1c:	1090000c 	andi	r2,r2,16384
   4fd20:	10000226 	beq	r2,zero,4fd2c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4fd24:	00bffd44 	movi	r2,-11
   4fd28:	00000106 	br	4fd30 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4fd2c:	00bffec4 	movi	r2,-5
}
   4fd30:	e037883a 	mov	sp,fp
   4fd34:	dfc00117 	ldw	ra,4(sp)
   4fd38:	df000017 	ldw	fp,0(sp)
   4fd3c:	dec00204 	addi	sp,sp,8
   4fd40:	f800283a 	ret

0004fd44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4fd44:	defff304 	addi	sp,sp,-52
   4fd48:	dfc00c15 	stw	ra,48(sp)
   4fd4c:	df000b15 	stw	fp,44(sp)
   4fd50:	df000b04 	addi	fp,sp,44
   4fd54:	e13ffc15 	stw	r4,-16(fp)
   4fd58:	e17ffd15 	stw	r5,-12(fp)
   4fd5c:	e1bffe15 	stw	r6,-8(fp)
   4fd60:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4fd64:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4fd68:	e0bffd17 	ldw	r2,-12(fp)
   4fd6c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4fd70:	00003706 	br	4fe50 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4fd74:	e0bffc17 	ldw	r2,-16(fp)
   4fd78:	10800c17 	ldw	r2,48(r2)
   4fd7c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4fd80:	e0bffc17 	ldw	r2,-16(fp)
   4fd84:	10800d17 	ldw	r2,52(r2)
   4fd88:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4fd8c:	e0fff817 	ldw	r3,-32(fp)
   4fd90:	e0bff517 	ldw	r2,-44(fp)
   4fd94:	1880062e 	bgeu	r3,r2,4fdb0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4fd98:	e0fff517 	ldw	r3,-44(fp)
   4fd9c:	e0bff817 	ldw	r2,-32(fp)
   4fda0:	1885c83a 	sub	r2,r3,r2
   4fda4:	10bfffc4 	addi	r2,r2,-1
   4fda8:	e0bff615 	stw	r2,-40(fp)
   4fdac:	00000b06 	br	4fddc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4fdb0:	e0bff517 	ldw	r2,-44(fp)
   4fdb4:	10000526 	beq	r2,zero,4fdcc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4fdb8:	00c20004 	movi	r3,2048
   4fdbc:	e0bff817 	ldw	r2,-32(fp)
   4fdc0:	1885c83a 	sub	r2,r3,r2
   4fdc4:	e0bff615 	stw	r2,-40(fp)
   4fdc8:	00000406 	br	4fddc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4fdcc:	00c1ffc4 	movi	r3,2047
   4fdd0:	e0bff817 	ldw	r2,-32(fp)
   4fdd4:	1885c83a 	sub	r2,r3,r2
   4fdd8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fddc:	e0bff617 	ldw	r2,-40(fp)
   4fde0:	10001e26 	beq	r2,zero,4fe5c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4fde4:	e0fffe17 	ldw	r3,-8(fp)
   4fde8:	e0bff617 	ldw	r2,-40(fp)
   4fdec:	1880022e 	bgeu	r3,r2,4fdf8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4fdf0:	e0bffe17 	ldw	r2,-8(fp)
   4fdf4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4fdf8:	e0bff817 	ldw	r2,-32(fp)
   4fdfc:	10820e04 	addi	r2,r2,2104
   4fe00:	e0fffc17 	ldw	r3,-16(fp)
   4fe04:	1885883a 	add	r2,r3,r2
   4fe08:	1009883a 	mov	r4,r2
   4fe0c:	e17ffd17 	ldw	r5,-12(fp)
   4fe10:	e1bff617 	ldw	r6,-40(fp)
   4fe14:	00482540 	call	48254 <memcpy>
      ptr   += n;
   4fe18:	e0fffd17 	ldw	r3,-12(fp)
   4fe1c:	e0bff617 	ldw	r2,-40(fp)
   4fe20:	1885883a 	add	r2,r3,r2
   4fe24:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4fe28:	e0fffe17 	ldw	r3,-8(fp)
   4fe2c:	e0bff617 	ldw	r2,-40(fp)
   4fe30:	1885c83a 	sub	r2,r3,r2
   4fe34:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fe38:	e0fff817 	ldw	r3,-32(fp)
   4fe3c:	e0bff617 	ldw	r2,-40(fp)
   4fe40:	1885883a 	add	r2,r3,r2
   4fe44:	10c1ffcc 	andi	r3,r2,2047
   4fe48:	e0bffc17 	ldw	r2,-16(fp)
   4fe4c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4fe50:	e0bffe17 	ldw	r2,-8(fp)
   4fe54:	00bfc716 	blt	zero,r2,4fd74 <__alt_data_end+0xfffefd74>
   4fe58:	00000106 	br	4fe60 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4fe5c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fe60:	0005303a 	rdctl	r2,status
   4fe64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fe68:	e0fffa17 	ldw	r3,-24(fp)
   4fe6c:	00bfff84 	movi	r2,-2
   4fe70:	1884703a 	and	r2,r3,r2
   4fe74:	1001703a 	wrctl	status,r2
  
  return context;
   4fe78:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4fe7c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4fe80:	e0bffc17 	ldw	r2,-16(fp)
   4fe84:	10800817 	ldw	r2,32(r2)
   4fe88:	10c00094 	ori	r3,r2,2
   4fe8c:	e0bffc17 	ldw	r2,-16(fp)
   4fe90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fe94:	e0bffc17 	ldw	r2,-16(fp)
   4fe98:	10800017 	ldw	r2,0(r2)
   4fe9c:	10800104 	addi	r2,r2,4
   4fea0:	e0fffc17 	ldw	r3,-16(fp)
   4fea4:	18c00817 	ldw	r3,32(r3)
   4fea8:	10c00035 	stwio	r3,0(r2)
   4feac:	e0bff917 	ldw	r2,-28(fp)
   4feb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4feb4:	e0bffb17 	ldw	r2,-20(fp)
   4feb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4febc:	e0bffe17 	ldw	r2,-8(fp)
   4fec0:	0080110e 	bge	zero,r2,4ff08 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4fec4:	e0bfff17 	ldw	r2,-4(fp)
   4fec8:	1090000c 	andi	r2,r2,16384
   4fecc:	1000111e 	bne	r2,zero,4ff14 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4fed0:	0001883a 	nop
   4fed4:	e0bffc17 	ldw	r2,-16(fp)
   4fed8:	10c00d17 	ldw	r3,52(r2)
   4fedc:	e0bff517 	ldw	r2,-44(fp)
   4fee0:	1880051e 	bne	r3,r2,4fef8 <altera_avalon_jtag_uart_write+0x1b4>
   4fee4:	e0bffc17 	ldw	r2,-16(fp)
   4fee8:	10c00917 	ldw	r3,36(r2)
   4feec:	e0bffc17 	ldw	r2,-16(fp)
   4fef0:	10800117 	ldw	r2,4(r2)
   4fef4:	18bff736 	bltu	r3,r2,4fed4 <__alt_data_end+0xfffefed4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4fef8:	e0bffc17 	ldw	r2,-16(fp)
   4fefc:	10c00d17 	ldw	r3,52(r2)
   4ff00:	e0bff517 	ldw	r2,-44(fp)
   4ff04:	18800526 	beq	r3,r2,4ff1c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4ff08:	e0bffe17 	ldw	r2,-8(fp)
   4ff0c:	00bfd016 	blt	zero,r2,4fe50 <__alt_data_end+0xfffefe50>
   4ff10:	00000306 	br	4ff20 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4ff14:	0001883a 	nop
   4ff18:	00000106 	br	4ff20 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4ff1c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4ff20:	e0fffd17 	ldw	r3,-12(fp)
   4ff24:	e0bff717 	ldw	r2,-36(fp)
   4ff28:	18800426 	beq	r3,r2,4ff3c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4ff2c:	e0fffd17 	ldw	r3,-12(fp)
   4ff30:	e0bff717 	ldw	r2,-36(fp)
   4ff34:	1885c83a 	sub	r2,r3,r2
   4ff38:	00000606 	br	4ff54 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4ff3c:	e0bfff17 	ldw	r2,-4(fp)
   4ff40:	1090000c 	andi	r2,r2,16384
   4ff44:	10000226 	beq	r2,zero,4ff50 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4ff48:	00bffd44 	movi	r2,-11
   4ff4c:	00000106 	br	4ff54 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4ff50:	00bffec4 	movi	r2,-5
}
   4ff54:	e037883a 	mov	sp,fp
   4ff58:	dfc00117 	ldw	ra,4(sp)
   4ff5c:	df000017 	ldw	fp,0(sp)
   4ff60:	dec00204 	addi	sp,sp,8
   4ff64:	f800283a 	ret

0004ff68 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4ff68:	defffa04 	addi	sp,sp,-24
   4ff6c:	dfc00515 	stw	ra,20(sp)
   4ff70:	df000415 	stw	fp,16(sp)
   4ff74:	df000404 	addi	fp,sp,16
   4ff78:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4ff7c:	0007883a 	mov	r3,zero
   4ff80:	e0bfff17 	ldw	r2,-4(fp)
   4ff84:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4ff88:	e0bfff17 	ldw	r2,-4(fp)
   4ff8c:	10800104 	addi	r2,r2,4
   4ff90:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ff94:	0005303a 	rdctl	r2,status
   4ff98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ff9c:	e0fffd17 	ldw	r3,-12(fp)
   4ffa0:	00bfff84 	movi	r2,-2
   4ffa4:	1884703a 	and	r2,r3,r2
   4ffa8:	1001703a 	wrctl	status,r2
  
  return context;
   4ffac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4ffb0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4ffb4:	00511600 	call	51160 <alt_tick>
   4ffb8:	e0bffc17 	ldw	r2,-16(fp)
   4ffbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ffc0:	e0bffe17 	ldw	r2,-8(fp)
   4ffc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4ffc8:	e037883a 	mov	sp,fp
   4ffcc:	dfc00117 	ldw	ra,4(sp)
   4ffd0:	df000017 	ldw	fp,0(sp)
   4ffd4:	dec00204 	addi	sp,sp,8
   4ffd8:	f800283a 	ret

0004ffdc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4ffdc:	defff804 	addi	sp,sp,-32
   4ffe0:	dfc00715 	stw	ra,28(sp)
   4ffe4:	df000615 	stw	fp,24(sp)
   4ffe8:	df000604 	addi	fp,sp,24
   4ffec:	e13ffc15 	stw	r4,-16(fp)
   4fff0:	e17ffd15 	stw	r5,-12(fp)
   4fff4:	e1bffe15 	stw	r6,-8(fp)
   4fff8:	e1ffff15 	stw	r7,-4(fp)
   4fffc:	e0bfff17 	ldw	r2,-4(fp)
   50000:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   50004:	00800174 	movhi	r2,5
   50008:	10947404 	addi	r2,r2,20944
   5000c:	10800017 	ldw	r2,0(r2)
   50010:	1000041e 	bne	r2,zero,50024 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   50014:	00800174 	movhi	r2,5
   50018:	10947404 	addi	r2,r2,20944
   5001c:	e0fffb17 	ldw	r3,-20(fp)
   50020:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   50024:	e0bffc17 	ldw	r2,-16(fp)
   50028:	10800104 	addi	r2,r2,4
   5002c:	00c001c4 	movi	r3,7
   50030:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   50034:	d8000015 	stw	zero,0(sp)
   50038:	e13ffd17 	ldw	r4,-12(fp)
   5003c:	e17ffe17 	ldw	r5,-8(fp)
   50040:	01800174 	movhi	r6,5
   50044:	31bfda04 	addi	r6,r6,-152
   50048:	e1fffc17 	ldw	r7,-16(fp)
   5004c:	0050ca80 	call	50ca8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   50050:	e037883a 	mov	sp,fp
   50054:	dfc00117 	ldw	ra,4(sp)
   50058:	df000017 	ldw	fp,0(sp)
   5005c:	dec00204 	addi	sp,sp,8
   50060:	f800283a 	ret

00050064 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   50064:	deffeb04 	addi	sp,sp,-84
   50068:	df001415 	stw	fp,80(sp)
   5006c:	dc401315 	stw	r17,76(sp)
   50070:	dc001215 	stw	r16,72(sp)
   50074:	df001204 	addi	fp,sp,72
   50078:	e13ffb15 	stw	r4,-20(fp)
   5007c:	e17ffc15 	stw	r5,-16(fp)
   50080:	e1bffd15 	stw	r6,-12(fp)
   50084:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   50088:	e0bffb17 	ldw	r2,-20(fp)
   5008c:	10800017 	ldw	r2,0(r2)
   50090:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   50094:	e0bfee17 	ldw	r2,-72(fp)
   50098:	10800217 	ldw	r2,8(r2)
   5009c:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   500a0:	e0bff717 	ldw	r2,-36(fp)
   500a4:	10bfffc4 	addi	r2,r2,-1
   500a8:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   500ac:	e0bff817 	ldw	r2,-32(fp)
   500b0:	10800044 	addi	r2,r2,1
   500b4:	e0bff815 	stw	r2,-32(fp)
   500b8:	e0bff817 	ldw	r2,-32(fp)
   500bc:	10800003 	ldbu	r2,0(r2)
   500c0:	10803fcc 	andi	r2,r2,255
   500c4:	1080201c 	xori	r2,r2,128
   500c8:	10bfe004 	addi	r2,r2,-128
   500cc:	103ff71e 	bne	r2,zero,500ac <__alt_data_end+0xffff00ac>
    ;

  return ptr - string;
   500d0:	e0fff817 	ldw	r3,-32(fp)
   500d4:	e0bff717 	ldw	r2,-36(fp)
   500d8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   500dc:	10800044 	addi	r2,r2,1
   500e0:	e0fffc17 	ldw	r3,-16(fp)
   500e4:	1885883a 	add	r2,r3,r2
   500e8:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   500ec:	d0a01c04 	addi	r2,gp,-32656
   500f0:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   500f4:	e0bffc17 	ldw	r2,-16(fp)
   500f8:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   500fc:	e0bffd17 	ldw	r2,-12(fp)
   50100:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   50104:	e0bffe17 	ldw	r2,-8(fp)
   50108:	e0bff215 	stw	r2,-56(fp)
   5010c:	e0bffc17 	ldw	r2,-16(fp)
   50110:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   50114:	e0bff917 	ldw	r2,-28(fp)
   50118:	10bfffc4 	addi	r2,r2,-1
   5011c:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   50120:	e0bffa17 	ldw	r2,-24(fp)
   50124:	10800044 	addi	r2,r2,1
   50128:	e0bffa15 	stw	r2,-24(fp)
   5012c:	e0bffa17 	ldw	r2,-24(fp)
   50130:	10800003 	ldbu	r2,0(r2)
   50134:	10803fcc 	andi	r2,r2,255
   50138:	1080201c 	xori	r2,r2,128
   5013c:	10bfe004 	addi	r2,r2,-128
   50140:	103ff71e 	bne	r2,zero,50120 <__alt_data_end+0xffff0120>
    ;

  return ptr - string;
   50144:	e0fffa17 	ldw	r3,-24(fp)
   50148:	e0bff917 	ldw	r2,-28(fp)
   5014c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   50150:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   50154:	e13ff017 	ldw	r4,-64(fp)
   50158:	e13fff15 	stw	r4,-4(fp)
   5015c:	e17ff117 	ldw	r5,-60(fp)
   50160:	e1bff217 	ldw	r6,-56(fp)
   50164:	e1fff317 	ldw	r7,-52(fp)
   50168:	e0ffef17 	ldw	r3,-68(fp)
   5016c:	1821883a 	mov	r16,r3
   50170:	8007883a 	mov	r3,r16
   50174:	e13fff17 	ldw	r4,-4(fp)
   50178:	003da07a 	break	1
   5017c:	1821883a 	mov	r16,r3
   50180:	1023883a 	mov	r17,r2
   50184:	e47ff415 	stw	r17,-48(fp)
   50188:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   5018c:	e0bff417 	ldw	r2,-48(fp)
   50190:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   50194:	e0bfef17 	ldw	r2,-68(fp)
   50198:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   5019c:	e0bff617 	ldw	r2,-40(fp)
   501a0:	1000031e 	bne	r2,zero,501b0 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   501a4:	e0bffb17 	ldw	r2,-20(fp)
   501a8:	e0fff517 	ldw	r3,-44(fp)
   501ac:	10c00115 	stw	r3,4(r2)

  return -error;
   501b0:	e0bff617 	ldw	r2,-40(fp)
   501b4:	0085c83a 	sub	r2,zero,r2
}
   501b8:	e037883a 	mov	sp,fp
   501bc:	df000217 	ldw	fp,8(sp)
   501c0:	dc400117 	ldw	r17,4(sp)
   501c4:	dc000017 	ldw	r16,0(sp)
   501c8:	dec00304 	addi	sp,sp,12
   501cc:	f800283a 	ret

000501d0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   501d0:	defffa04 	addi	sp,sp,-24
   501d4:	df000515 	stw	fp,20(sp)
   501d8:	dc000415 	stw	r16,16(sp)
   501dc:	df000404 	addi	fp,sp,16
   501e0:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   501e4:	d0a01904 	addi	r2,gp,-32668
   501e8:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   501ec:	e0bfff17 	ldw	r2,-4(fp)
   501f0:	10800117 	ldw	r2,4(r2)
   501f4:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   501f8:	e0bffd17 	ldw	r2,-12(fp)
   501fc:	e0fffc17 	ldw	r3,-16(fp)
   50200:	1821883a 	mov	r16,r3
   50204:	8007883a 	mov	r3,r16
   50208:	1009883a 	mov	r4,r2
   5020c:	003da07a 	break	1
   50210:	1821883a 	mov	r16,r3
   50214:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   50218:	e0bffc17 	ldw	r2,-16(fp)
   5021c:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   50220:	e0bffe17 	ldw	r2,-8(fp)
   50224:	0085c83a 	sub	r2,zero,r2
}
   50228:	e037883a 	mov	sp,fp
   5022c:	df000117 	ldw	fp,4(sp)
   50230:	dc000017 	ldw	r16,0(sp)
   50234:	dec00204 	addi	sp,sp,8
   50238:	f800283a 	ret

0005023c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   5023c:	defff204 	addi	sp,sp,-56
   50240:	df000d15 	stw	fp,52(sp)
   50244:	dc400c15 	stw	r17,48(sp)
   50248:	dc000b15 	stw	r16,44(sp)
   5024c:	df000b04 	addi	fp,sp,44
   50250:	e13ffc15 	stw	r4,-16(fp)
   50254:	e17ffd15 	stw	r5,-12(fp)
   50258:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   5025c:	d0a01604 	addi	r2,gp,-32680
   50260:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   50264:	e0bffc17 	ldw	r2,-16(fp)
   50268:	10800117 	ldw	r2,4(r2)
   5026c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   50270:	e0bffd17 	ldw	r2,-12(fp)
   50274:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   50278:	e0bffe17 	ldw	r2,-8(fp)
   5027c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   50280:	e13ff617 	ldw	r4,-40(fp)
   50284:	e13fff15 	stw	r4,-4(fp)
   50288:	e17ff717 	ldw	r5,-36(fp)
   5028c:	e1bff817 	ldw	r6,-32(fp)
   50290:	e0fff517 	ldw	r3,-44(fp)
   50294:	1821883a 	mov	r16,r3
   50298:	8007883a 	mov	r3,r16
   5029c:	e13fff17 	ldw	r4,-4(fp)
   502a0:	003da07a 	break	1
   502a4:	1821883a 	mov	r16,r3
   502a8:	1023883a 	mov	r17,r2
   502ac:	e47ff915 	stw	r17,-28(fp)
   502b0:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   502b4:	e0bff917 	ldw	r2,-28(fp)
   502b8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   502bc:	e0bff517 	ldw	r2,-44(fp)
   502c0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   502c4:	e0bffb17 	ldw	r2,-20(fp)
   502c8:	10000326 	beq	r2,zero,502d8 <alt_hostfs_read+0x9c>
   502cc:	e0bffb17 	ldw	r2,-20(fp)
   502d0:	0085c83a 	sub	r2,zero,r2
   502d4:	00000106 	br	502dc <alt_hostfs_read+0xa0>
   502d8:	e0bffa17 	ldw	r2,-24(fp)
}
   502dc:	e037883a 	mov	sp,fp
   502e0:	df000217 	ldw	fp,8(sp)
   502e4:	dc400117 	ldw	r17,4(sp)
   502e8:	dc000017 	ldw	r16,0(sp)
   502ec:	dec00304 	addi	sp,sp,12
   502f0:	f800283a 	ret

000502f4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   502f4:	defff204 	addi	sp,sp,-56
   502f8:	df000d15 	stw	fp,52(sp)
   502fc:	dc400c15 	stw	r17,48(sp)
   50300:	dc000b15 	stw	r16,44(sp)
   50304:	df000b04 	addi	fp,sp,44
   50308:	e13ffc15 	stw	r4,-16(fp)
   5030c:	e17ffd15 	stw	r5,-12(fp)
   50310:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   50314:	d0a01304 	addi	r2,gp,-32692
   50318:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   5031c:	e0bffc17 	ldw	r2,-16(fp)
   50320:	10800117 	ldw	r2,4(r2)
   50324:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   50328:	e0bffd17 	ldw	r2,-12(fp)
   5032c:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   50330:	e0bffe17 	ldw	r2,-8(fp)
   50334:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   50338:	e13ff617 	ldw	r4,-40(fp)
   5033c:	e13fff15 	stw	r4,-4(fp)
   50340:	e17ff717 	ldw	r5,-36(fp)
   50344:	e1bff817 	ldw	r6,-32(fp)
   50348:	e0fff517 	ldw	r3,-44(fp)
   5034c:	1821883a 	mov	r16,r3
   50350:	8007883a 	mov	r3,r16
   50354:	e13fff17 	ldw	r4,-4(fp)
   50358:	003da07a 	break	1
   5035c:	1821883a 	mov	r16,r3
   50360:	1023883a 	mov	r17,r2
   50364:	e47ff915 	stw	r17,-28(fp)
   50368:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   5036c:	e0bff917 	ldw	r2,-28(fp)
   50370:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   50374:	e0bff517 	ldw	r2,-44(fp)
   50378:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   5037c:	e0bffb17 	ldw	r2,-20(fp)
   50380:	10000326 	beq	r2,zero,50390 <alt_hostfs_write+0x9c>
   50384:	e0bffb17 	ldw	r2,-20(fp)
   50388:	0085c83a 	sub	r2,zero,r2
   5038c:	00000106 	br	50394 <alt_hostfs_write+0xa0>
   50390:	e0bffa17 	ldw	r2,-24(fp)
}
   50394:	e037883a 	mov	sp,fp
   50398:	df000217 	ldw	fp,8(sp)
   5039c:	dc400117 	ldw	r17,4(sp)
   503a0:	dc000017 	ldw	r16,0(sp)
   503a4:	dec00304 	addi	sp,sp,12
   503a8:	f800283a 	ret

000503ac <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   503ac:	defff204 	addi	sp,sp,-56
   503b0:	df000d15 	stw	fp,52(sp)
   503b4:	dc400c15 	stw	r17,48(sp)
   503b8:	dc000b15 	stw	r16,44(sp)
   503bc:	df000b04 	addi	fp,sp,44
   503c0:	e13ffc15 	stw	r4,-16(fp)
   503c4:	e17ffd15 	stw	r5,-12(fp)
   503c8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   503cc:	d0a01004 	addi	r2,gp,-32704
   503d0:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   503d4:	e0bffc17 	ldw	r2,-16(fp)
   503d8:	10800117 	ldw	r2,4(r2)
   503dc:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   503e0:	e0bffd17 	ldw	r2,-12(fp)
   503e4:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   503e8:	e0bffe17 	ldw	r2,-8(fp)
   503ec:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   503f0:	e13ff617 	ldw	r4,-40(fp)
   503f4:	e13fff15 	stw	r4,-4(fp)
   503f8:	e17ff717 	ldw	r5,-36(fp)
   503fc:	e1bff817 	ldw	r6,-32(fp)
   50400:	e0fff517 	ldw	r3,-44(fp)
   50404:	1821883a 	mov	r16,r3
   50408:	8007883a 	mov	r3,r16
   5040c:	e13fff17 	ldw	r4,-4(fp)
   50410:	003da07a 	break	1
   50414:	1821883a 	mov	r16,r3
   50418:	1023883a 	mov	r17,r2
   5041c:	e47ff915 	stw	r17,-28(fp)
   50420:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   50424:	e0bff917 	ldw	r2,-28(fp)
   50428:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   5042c:	e0bff517 	ldw	r2,-44(fp)
   50430:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   50434:	e0bffb17 	ldw	r2,-20(fp)
   50438:	10000326 	beq	r2,zero,50448 <alt_hostfs_seek+0x9c>
   5043c:	e0bffb17 	ldw	r2,-20(fp)
   50440:	0085c83a 	sub	r2,zero,r2
   50444:	00000106 	br	5044c <alt_hostfs_seek+0xa0>
   50448:	e0bffa17 	ldw	r2,-24(fp)
}
   5044c:	e037883a 	mov	sp,fp
   50450:	df000217 	ldw	fp,8(sp)
   50454:	dc400117 	ldw	r17,4(sp)
   50458:	dc000017 	ldw	r16,0(sp)
   5045c:	dec00304 	addi	sp,sp,12
   50460:	f800283a 	ret

00050464 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   50464:	deffe204 	addi	sp,sp,-120
   50468:	df001d15 	stw	fp,116(sp)
   5046c:	dc401c15 	stw	r17,112(sp)
   50470:	dc001b15 	stw	r16,108(sp)
   50474:	df001b04 	addi	fp,sp,108
   50478:	e13ffd15 	stw	r4,-12(fp)
   5047c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   50480:	d0a00d04 	addi	r2,gp,-32716
   50484:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   50488:	e0bffd17 	ldw	r2,-12(fp)
   5048c:	10800117 	ldw	r2,4(r2)
   50490:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   50494:	e0bfed04 	addi	r2,fp,-76
   50498:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   5049c:	e13fe717 	ldw	r4,-100(fp)
   504a0:	e13fff15 	stw	r4,-4(fp)
   504a4:	e17fe817 	ldw	r5,-96(fp)
   504a8:	e0ffe617 	ldw	r3,-104(fp)
   504ac:	1821883a 	mov	r16,r3
   504b0:	8007883a 	mov	r3,r16
   504b4:	e13fff17 	ldw	r4,-4(fp)
   504b8:	003da07a 	break	1
   504bc:	1821883a 	mov	r16,r3
   504c0:	1023883a 	mov	r17,r2
   504c4:	e47fe915 	stw	r17,-92(fp)
   504c8:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   504cc:	e0bfe917 	ldw	r2,-92(fp)
   504d0:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   504d4:	e0bfe617 	ldw	r2,-104(fp)
   504d8:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   504dc:	e0bfeb17 	ldw	r2,-84(fp)
   504e0:	1000621e 	bne	r2,zero,5066c <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   504e4:	e0bfed04 	addi	r2,fp,-76
   504e8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   504ec:	e0bfe517 	ldw	r2,-108(fp)
   504f0:	10801004 	addi	r2,r2,64
   504f4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   504f8:	00001606 	br	50554 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   504fc:	e0bfe517 	ldw	r2,-108(fp)
   50500:	10800017 	ldw	r2,0(r2)
   50504:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   50508:	e0bfe517 	ldw	r2,-108(fp)
   5050c:	10800017 	ldw	r2,0(r2)
   50510:	10803fec 	andhi	r2,r2,255
   50514:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   50518:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   5051c:	e0bfe517 	ldw	r2,-108(fp)
   50520:	10800017 	ldw	r2,0(r2)
   50524:	10bfc00c 	andi	r2,r2,65280
   50528:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   5052c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   50530:	e0bfe517 	ldw	r2,-108(fp)
   50534:	10800017 	ldw	r2,0(r2)
   50538:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   5053c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   50540:	e0bfe517 	ldw	r2,-108(fp)
   50544:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   50548:	e0bfe517 	ldw	r2,-108(fp)
   5054c:	10800104 	addi	r2,r2,4
   50550:	e0bfe515 	stw	r2,-108(fp)
   50554:	e0ffe517 	ldw	r3,-108(fp)
   50558:	e0bfec17 	ldw	r2,-80(fp)
   5055c:	18bfe736 	bltu	r3,r2,504fc <__alt_data_end+0xffff04fc>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   50560:	e0bffe17 	ldw	r2,-8(fp)
   50564:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   50568:	e0bfe517 	ldw	r2,-108(fp)
   5056c:	10800f04 	addi	r2,r2,60
   50570:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   50574:	00000506 	br	5058c <alt_hostfs_fstat+0x128>
      *ptr = 0;
   50578:	e0bfe517 	ldw	r2,-108(fp)
   5057c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   50580:	e0bfe517 	ldw	r2,-108(fp)
   50584:	10800104 	addi	r2,r2,4
   50588:	e0bfe515 	stw	r2,-108(fp)
   5058c:	e0ffe517 	ldw	r3,-108(fp)
   50590:	e0bfec17 	ldw	r2,-80(fp)
   50594:	18bff836 	bltu	r3,r2,50578 <__alt_data_end+0xffff0578>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   50598:	e0bfed17 	ldw	r2,-76(fp)
   5059c:	1007883a 	mov	r3,r2
   505a0:	e0bffe17 	ldw	r2,-8(fp)
   505a4:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   505a8:	e0bfee17 	ldw	r2,-72(fp)
   505ac:	1007883a 	mov	r3,r2
   505b0:	e0bffe17 	ldw	r2,-8(fp)
   505b4:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   505b8:	e0ffef17 	ldw	r3,-68(fp)
   505bc:	e0bffe17 	ldw	r2,-8(fp)
   505c0:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   505c4:	e0bff017 	ldw	r2,-64(fp)
   505c8:	1007883a 	mov	r3,r2
   505cc:	e0bffe17 	ldw	r2,-8(fp)
   505d0:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   505d4:	e0bff117 	ldw	r2,-60(fp)
   505d8:	1007883a 	mov	r3,r2
   505dc:	e0bffe17 	ldw	r2,-8(fp)
   505e0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   505e4:	e0bff217 	ldw	r2,-56(fp)
   505e8:	1007883a 	mov	r3,r2
   505ec:	e0bffe17 	ldw	r2,-8(fp)
   505f0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   505f4:	e0bff317 	ldw	r2,-52(fp)
   505f8:	1007883a 	mov	r3,r2
   505fc:	e0bffe17 	ldw	r2,-8(fp)
   50600:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   50604:	e0bff517 	ldw	r2,-44(fp)
   50608:	1007883a 	mov	r3,r2
   5060c:	e0bffe17 	ldw	r2,-8(fp)
   50610:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   50614:	e0bffa17 	ldw	r2,-24(fp)
   50618:	1007883a 	mov	r3,r2
   5061c:	e0bffe17 	ldw	r2,-8(fp)
   50620:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   50624:	e0bffb17 	ldw	r2,-20(fp)
   50628:	1007883a 	mov	r3,r2
   5062c:	e0bffe17 	ldw	r2,-8(fp)
   50630:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   50634:	e0bffc17 	ldw	r2,-16(fp)
   50638:	1007883a 	mov	r3,r2
   5063c:	e0bffe17 	ldw	r2,-8(fp)
   50640:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   50644:	e0bff717 	ldw	r2,-36(fp)
   50648:	1007883a 	mov	r3,r2
   5064c:	e0bffe17 	ldw	r2,-8(fp)
   50650:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   50654:	e0bff917 	ldw	r2,-28(fp)
   50658:	1007883a 	mov	r3,r2
   5065c:	e0bffe17 	ldw	r2,-8(fp)
   50660:	10c00c15 	stw	r3,48(r2)

    return rc;
   50664:	e0bfea17 	ldw	r2,-88(fp)
   50668:	00000206 	br	50674 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   5066c:	e0bfeb17 	ldw	r2,-84(fp)
   50670:	0085c83a 	sub	r2,zero,r2
}
   50674:	e037883a 	mov	sp,fp
   50678:	df000217 	ldw	fp,8(sp)
   5067c:	dc400117 	ldw	r17,4(sp)
   50680:	dc000017 	ldw	r16,0(sp)
   50684:	dec00304 	addi	sp,sp,12
   50688:	f800283a 	ret

0005068c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5068c:	defff504 	addi	sp,sp,-44
   50690:	df000a15 	stw	fp,40(sp)
   50694:	df000a04 	addi	fp,sp,40
   50698:	e13ffc15 	stw	r4,-16(fp)
   5069c:	e17ffd15 	stw	r5,-12(fp)
   506a0:	e1bffe15 	stw	r6,-8(fp)
   506a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   506a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   506ac:	00800174 	movhi	r2,5
   506b0:	10947404 	addi	r2,r2,20944
   506b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   506b8:	10003f26 	beq	r2,zero,507b8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   506bc:	e0bffc17 	ldw	r2,-16(fp)
   506c0:	10003b26 	beq	r2,zero,507b0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   506c4:	e0bffc17 	ldw	r2,-16(fp)
   506c8:	e0fffe17 	ldw	r3,-8(fp)
   506cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   506d0:	e0bffc17 	ldw	r2,-16(fp)
   506d4:	e0ffff17 	ldw	r3,-4(fp)
   506d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   506dc:	0005303a 	rdctl	r2,status
   506e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   506e4:	e0fff817 	ldw	r3,-32(fp)
   506e8:	00bfff84 	movi	r2,-2
   506ec:	1884703a 	and	r2,r3,r2
   506f0:	1001703a 	wrctl	status,r2
  
  return context;
   506f4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   506f8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   506fc:	00800174 	movhi	r2,5
   50700:	10947504 	addi	r2,r2,20948
   50704:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   50708:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5070c:	e0fffd17 	ldw	r3,-12(fp)
   50710:	e0bff617 	ldw	r2,-40(fp)
   50714:	1885883a 	add	r2,r3,r2
   50718:	10c00044 	addi	r3,r2,1
   5071c:	e0bffc17 	ldw	r2,-16(fp)
   50720:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   50724:	e0bffc17 	ldw	r2,-16(fp)
   50728:	10c00217 	ldw	r3,8(r2)
   5072c:	e0bff617 	ldw	r2,-40(fp)
   50730:	1880042e 	bgeu	r3,r2,50744 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   50734:	e0bffc17 	ldw	r2,-16(fp)
   50738:	00c00044 	movi	r3,1
   5073c:	10c00405 	stb	r3,16(r2)
   50740:	00000206 	br	5074c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   50744:	e0bffc17 	ldw	r2,-16(fp)
   50748:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   5074c:	e0bffc17 	ldw	r2,-16(fp)
   50750:	00c00174 	movhi	r3,5
   50754:	18cd7004 	addi	r3,r3,13760
   50758:	e0fff915 	stw	r3,-28(fp)
   5075c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50760:	e0bffa17 	ldw	r2,-24(fp)
   50764:	e0fff917 	ldw	r3,-28(fp)
   50768:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5076c:	e0bff917 	ldw	r2,-28(fp)
   50770:	10c00017 	ldw	r3,0(r2)
   50774:	e0bffa17 	ldw	r2,-24(fp)
   50778:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5077c:	e0bff917 	ldw	r2,-28(fp)
   50780:	10800017 	ldw	r2,0(r2)
   50784:	e0fffa17 	ldw	r3,-24(fp)
   50788:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5078c:	e0bff917 	ldw	r2,-28(fp)
   50790:	e0fffa17 	ldw	r3,-24(fp)
   50794:	10c00015 	stw	r3,0(r2)
   50798:	e0bff717 	ldw	r2,-36(fp)
   5079c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   507a0:	e0bffb17 	ldw	r2,-20(fp)
   507a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   507a8:	0005883a 	mov	r2,zero
   507ac:	00000306 	br	507bc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   507b0:	00bffa84 	movi	r2,-22
   507b4:	00000106 	br	507bc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   507b8:	00bfde84 	movi	r2,-134
  }
}
   507bc:	e037883a 	mov	sp,fp
   507c0:	df000017 	ldw	fp,0(sp)
   507c4:	dec00104 	addi	sp,sp,4
   507c8:	f800283a 	ret

000507cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   507cc:	deffff04 	addi	sp,sp,-4
   507d0:	df000015 	stw	fp,0(sp)
   507d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   507d8:	e037883a 	mov	sp,fp
   507dc:	df000017 	ldw	fp,0(sp)
   507e0:	dec00104 	addi	sp,sp,4
   507e4:	f800283a 	ret

000507e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   507e8:	defffe04 	addi	sp,sp,-8
   507ec:	dfc00115 	stw	ra,4(sp)
   507f0:	df000015 	stw	fp,0(sp)
   507f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   507f8:	00800174 	movhi	r2,5
   507fc:	108d5b04 	addi	r2,r2,13676
   50800:	10800017 	ldw	r2,0(r2)
   50804:	10000526 	beq	r2,zero,5081c <alt_get_errno+0x34>
   50808:	00800174 	movhi	r2,5
   5080c:	108d5b04 	addi	r2,r2,13676
   50810:	10800017 	ldw	r2,0(r2)
   50814:	103ee83a 	callr	r2
   50818:	00000206 	br	50824 <alt_get_errno+0x3c>
   5081c:	00800174 	movhi	r2,5
   50820:	10946904 	addi	r2,r2,20900
}
   50824:	e037883a 	mov	sp,fp
   50828:	dfc00117 	ldw	ra,4(sp)
   5082c:	df000017 	ldw	fp,0(sp)
   50830:	dec00204 	addi	sp,sp,8
   50834:	f800283a 	ret

00050838 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   50838:	defffa04 	addi	sp,sp,-24
   5083c:	dfc00515 	stw	ra,20(sp)
   50840:	df000415 	stw	fp,16(sp)
   50844:	df000404 	addi	fp,sp,16
   50848:	e13ffe15 	stw	r4,-8(fp)
   5084c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   50850:	e0bffe17 	ldw	r2,-8(fp)
   50854:	10000326 	beq	r2,zero,50864 <alt_dev_llist_insert+0x2c>
   50858:	e0bffe17 	ldw	r2,-8(fp)
   5085c:	10800217 	ldw	r2,8(r2)
   50860:	1000051e 	bne	r2,zero,50878 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   50864:	00507e80 	call	507e8 <alt_get_errno>
   50868:	00c00584 	movi	r3,22
   5086c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   50870:	00bffa84 	movi	r2,-22
   50874:	00001306 	br	508c4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50878:	e0bffe17 	ldw	r2,-8(fp)
   5087c:	e0ffff17 	ldw	r3,-4(fp)
   50880:	e0fffc15 	stw	r3,-16(fp)
   50884:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50888:	e0bffd17 	ldw	r2,-12(fp)
   5088c:	e0fffc17 	ldw	r3,-16(fp)
   50890:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50894:	e0bffc17 	ldw	r2,-16(fp)
   50898:	10c00017 	ldw	r3,0(r2)
   5089c:	e0bffd17 	ldw	r2,-12(fp)
   508a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   508a4:	e0bffc17 	ldw	r2,-16(fp)
   508a8:	10800017 	ldw	r2,0(r2)
   508ac:	e0fffd17 	ldw	r3,-12(fp)
   508b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   508b4:	e0bffc17 	ldw	r2,-16(fp)
   508b8:	e0fffd17 	ldw	r3,-12(fp)
   508bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   508c0:	0005883a 	mov	r2,zero
}
   508c4:	e037883a 	mov	sp,fp
   508c8:	dfc00117 	ldw	ra,4(sp)
   508cc:	df000017 	ldw	fp,0(sp)
   508d0:	dec00204 	addi	sp,sp,8
   508d4:	f800283a 	ret

000508d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   508d8:	defffd04 	addi	sp,sp,-12
   508dc:	dfc00215 	stw	ra,8(sp)
   508e0:	df000115 	stw	fp,4(sp)
   508e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   508e8:	00800174 	movhi	r2,5
   508ec:	10858704 	addi	r2,r2,5660
   508f0:	e0bfff15 	stw	r2,-4(fp)
   508f4:	00000606 	br	50910 <_do_ctors+0x38>
        (*ctor) (); 
   508f8:	e0bfff17 	ldw	r2,-4(fp)
   508fc:	10800017 	ldw	r2,0(r2)
   50900:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   50904:	e0bfff17 	ldw	r2,-4(fp)
   50908:	10bfff04 	addi	r2,r2,-4
   5090c:	e0bfff15 	stw	r2,-4(fp)
   50910:	e0ffff17 	ldw	r3,-4(fp)
   50914:	00800174 	movhi	r2,5
   50918:	10858804 	addi	r2,r2,5664
   5091c:	18bff62e 	bgeu	r3,r2,508f8 <__alt_data_end+0xffff08f8>
        (*ctor) (); 
}
   50920:	e037883a 	mov	sp,fp
   50924:	dfc00117 	ldw	ra,4(sp)
   50928:	df000017 	ldw	fp,0(sp)
   5092c:	dec00204 	addi	sp,sp,8
   50930:	f800283a 	ret

00050934 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   50934:	defffd04 	addi	sp,sp,-12
   50938:	dfc00215 	stw	ra,8(sp)
   5093c:	df000115 	stw	fp,4(sp)
   50940:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50944:	00800174 	movhi	r2,5
   50948:	10858704 	addi	r2,r2,5660
   5094c:	e0bfff15 	stw	r2,-4(fp)
   50950:	00000606 	br	5096c <_do_dtors+0x38>
        (*dtor) (); 
   50954:	e0bfff17 	ldw	r2,-4(fp)
   50958:	10800017 	ldw	r2,0(r2)
   5095c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50960:	e0bfff17 	ldw	r2,-4(fp)
   50964:	10bfff04 	addi	r2,r2,-4
   50968:	e0bfff15 	stw	r2,-4(fp)
   5096c:	e0ffff17 	ldw	r3,-4(fp)
   50970:	00800174 	movhi	r2,5
   50974:	10858804 	addi	r2,r2,5664
   50978:	18bff62e 	bgeu	r3,r2,50954 <__alt_data_end+0xffff0954>
        (*dtor) (); 
}
   5097c:	e037883a 	mov	sp,fp
   50980:	dfc00117 	ldw	ra,4(sp)
   50984:	df000017 	ldw	fp,0(sp)
   50988:	dec00204 	addi	sp,sp,8
   5098c:	f800283a 	ret

00050990 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50990:	defffa04 	addi	sp,sp,-24
   50994:	dfc00515 	stw	ra,20(sp)
   50998:	df000415 	stw	fp,16(sp)
   5099c:	df000404 	addi	fp,sp,16
   509a0:	e13ffe15 	stw	r4,-8(fp)
   509a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   509a8:	e0bfff17 	ldw	r2,-4(fp)
   509ac:	10800017 	ldw	r2,0(r2)
   509b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   509b4:	e13ffe17 	ldw	r4,-8(fp)
   509b8:	0043a080 	call	43a08 <strlen>
   509bc:	10800044 	addi	r2,r2,1
   509c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   509c4:	00000d06 	br	509fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   509c8:	e0bffc17 	ldw	r2,-16(fp)
   509cc:	10c00217 	ldw	r3,8(r2)
   509d0:	e0bffd17 	ldw	r2,-12(fp)
   509d4:	1809883a 	mov	r4,r3
   509d8:	e17ffe17 	ldw	r5,-8(fp)
   509dc:	100d883a 	mov	r6,r2
   509e0:	00512d00 	call	512d0 <memcmp>
   509e4:	1000021e 	bne	r2,zero,509f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   509e8:	e0bffc17 	ldw	r2,-16(fp)
   509ec:	00000706 	br	50a0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   509f0:	e0bffc17 	ldw	r2,-16(fp)
   509f4:	10800017 	ldw	r2,0(r2)
   509f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   509fc:	e0fffc17 	ldw	r3,-16(fp)
   50a00:	e0bfff17 	ldw	r2,-4(fp)
   50a04:	18bff01e 	bne	r3,r2,509c8 <__alt_data_end+0xffff09c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50a08:	0005883a 	mov	r2,zero
}
   50a0c:	e037883a 	mov	sp,fp
   50a10:	dfc00117 	ldw	ra,4(sp)
   50a14:	df000017 	ldw	fp,0(sp)
   50a18:	dec00204 	addi	sp,sp,8
   50a1c:	f800283a 	ret

00050a20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50a20:	defffb04 	addi	sp,sp,-20
   50a24:	dfc00415 	stw	ra,16(sp)
   50a28:	df000315 	stw	fp,12(sp)
   50a2c:	df000304 	addi	fp,sp,12
   50a30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50a34:	00800174 	movhi	r2,5
   50a38:	108d5604 	addi	r2,r2,13656
   50a3c:	10800017 	ldw	r2,0(r2)
   50a40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50a44:	00003106 	br	50b0c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   50a48:	e0bffd17 	ldw	r2,-12(fp)
   50a4c:	10800217 	ldw	r2,8(r2)
   50a50:	1009883a 	mov	r4,r2
   50a54:	0043a080 	call	43a08 <strlen>
   50a58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50a5c:	e0bffd17 	ldw	r2,-12(fp)
   50a60:	10c00217 	ldw	r3,8(r2)
   50a64:	e0bffe17 	ldw	r2,-8(fp)
   50a68:	10bfffc4 	addi	r2,r2,-1
   50a6c:	1885883a 	add	r2,r3,r2
   50a70:	10800003 	ldbu	r2,0(r2)
   50a74:	10803fcc 	andi	r2,r2,255
   50a78:	1080201c 	xori	r2,r2,128
   50a7c:	10bfe004 	addi	r2,r2,-128
   50a80:	10800bd8 	cmpnei	r2,r2,47
   50a84:	1000031e 	bne	r2,zero,50a94 <alt_find_file+0x74>
    {
      len -= 1;
   50a88:	e0bffe17 	ldw	r2,-8(fp)
   50a8c:	10bfffc4 	addi	r2,r2,-1
   50a90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50a94:	e0bffe17 	ldw	r2,-8(fp)
   50a98:	e0ffff17 	ldw	r3,-4(fp)
   50a9c:	1885883a 	add	r2,r3,r2
   50aa0:	10800003 	ldbu	r2,0(r2)
   50aa4:	10803fcc 	andi	r2,r2,255
   50aa8:	1080201c 	xori	r2,r2,128
   50aac:	10bfe004 	addi	r2,r2,-128
   50ab0:	10800be0 	cmpeqi	r2,r2,47
   50ab4:	1000081e 	bne	r2,zero,50ad8 <alt_find_file+0xb8>
   50ab8:	e0bffe17 	ldw	r2,-8(fp)
   50abc:	e0ffff17 	ldw	r3,-4(fp)
   50ac0:	1885883a 	add	r2,r3,r2
   50ac4:	10800003 	ldbu	r2,0(r2)
   50ac8:	10803fcc 	andi	r2,r2,255
   50acc:	1080201c 	xori	r2,r2,128
   50ad0:	10bfe004 	addi	r2,r2,-128
   50ad4:	10000a1e 	bne	r2,zero,50b00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   50ad8:	e0bffd17 	ldw	r2,-12(fp)
   50adc:	10c00217 	ldw	r3,8(r2)
   50ae0:	e0bffe17 	ldw	r2,-8(fp)
   50ae4:	1809883a 	mov	r4,r3
   50ae8:	e17fff17 	ldw	r5,-4(fp)
   50aec:	100d883a 	mov	r6,r2
   50af0:	00512d00 	call	512d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50af4:	1000021e 	bne	r2,zero,50b00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   50af8:	e0bffd17 	ldw	r2,-12(fp)
   50afc:	00000806 	br	50b20 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   50b00:	e0bffd17 	ldw	r2,-12(fp)
   50b04:	10800017 	ldw	r2,0(r2)
   50b08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50b0c:	e0fffd17 	ldw	r3,-12(fp)
   50b10:	00800174 	movhi	r2,5
   50b14:	108d5604 	addi	r2,r2,13656
   50b18:	18bfcb1e 	bne	r3,r2,50a48 <__alt_data_end+0xffff0a48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50b1c:	0005883a 	mov	r2,zero
}
   50b20:	e037883a 	mov	sp,fp
   50b24:	dfc00117 	ldw	ra,4(sp)
   50b28:	df000017 	ldw	fp,0(sp)
   50b2c:	dec00204 	addi	sp,sp,8
   50b30:	f800283a 	ret

00050b34 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   50b34:	defffc04 	addi	sp,sp,-16
   50b38:	df000315 	stw	fp,12(sp)
   50b3c:	df000304 	addi	fp,sp,12
   50b40:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   50b44:	e0bfff17 	ldw	r2,-4(fp)
   50b48:	10800217 	ldw	r2,8(r2)
   50b4c:	1000021e 	bne	r2,zero,50b58 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   50b50:	00bffb44 	movi	r2,-19
   50b54:	00001406 	br	50ba8 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   50b58:	e0bfff17 	ldw	r2,-4(fp)
   50b5c:	00c00174 	movhi	r3,5
   50b60:	18cd5604 	addi	r3,r3,13656
   50b64:	e0fffd15 	stw	r3,-12(fp)
   50b68:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50b6c:	e0bffe17 	ldw	r2,-8(fp)
   50b70:	e0fffd17 	ldw	r3,-12(fp)
   50b74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50b78:	e0bffd17 	ldw	r2,-12(fp)
   50b7c:	10c00017 	ldw	r3,0(r2)
   50b80:	e0bffe17 	ldw	r2,-8(fp)
   50b84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50b88:	e0bffd17 	ldw	r2,-12(fp)
   50b8c:	10800017 	ldw	r2,0(r2)
   50b90:	e0fffe17 	ldw	r3,-8(fp)
   50b94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50b98:	e0bffd17 	ldw	r2,-12(fp)
   50b9c:	e0fffe17 	ldw	r3,-8(fp)
   50ba0:	10c00015 	stw	r3,0(r2)

  return 0;
   50ba4:	0005883a 	mov	r2,zero
} 
   50ba8:	e037883a 	mov	sp,fp
   50bac:	df000017 	ldw	fp,0(sp)
   50bb0:	dec00104 	addi	sp,sp,4
   50bb4:	f800283a 	ret

00050bb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50bb8:	defffa04 	addi	sp,sp,-24
   50bbc:	dfc00515 	stw	ra,20(sp)
   50bc0:	df000415 	stw	fp,16(sp)
   50bc4:	dc000315 	stw	r16,12(sp)
   50bc8:	df000304 	addi	fp,sp,12
   50bcc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   50bd0:	00bffa04 	movi	r2,-24
   50bd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50bd8:	e03ffd15 	stw	zero,-12(fp)
   50bdc:	00002106 	br	50c64 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   50be0:	04000174 	movhi	r16,5
   50be4:	8408ce04 	addi	r16,r16,9016
   50be8:	e0bffd17 	ldw	r2,-12(fp)
   50bec:	1009883a 	mov	r4,r2
   50bf0:	01400304 	movi	r5,12
   50bf4:	004131c0 	call	4131c <__mulsi3>
   50bf8:	8085883a 	add	r2,r16,r2
   50bfc:	10800017 	ldw	r2,0(r2)
   50c00:	1000151e 	bne	r2,zero,50c58 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   50c04:	04000174 	movhi	r16,5
   50c08:	8408ce04 	addi	r16,r16,9016
   50c0c:	e0bffd17 	ldw	r2,-12(fp)
   50c10:	1009883a 	mov	r4,r2
   50c14:	01400304 	movi	r5,12
   50c18:	004131c0 	call	4131c <__mulsi3>
   50c1c:	8085883a 	add	r2,r16,r2
   50c20:	e0ffff17 	ldw	r3,-4(fp)
   50c24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50c28:	00800174 	movhi	r2,5
   50c2c:	108d5a04 	addi	r2,r2,13672
   50c30:	10c00017 	ldw	r3,0(r2)
   50c34:	e0bffd17 	ldw	r2,-12(fp)
   50c38:	1880040e 	bge	r3,r2,50c4c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   50c3c:	00800174 	movhi	r2,5
   50c40:	108d5a04 	addi	r2,r2,13672
   50c44:	e0fffd17 	ldw	r3,-12(fp)
   50c48:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   50c4c:	e0bffd17 	ldw	r2,-12(fp)
   50c50:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   50c54:	00000606 	br	50c70 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50c58:	e0bffd17 	ldw	r2,-12(fp)
   50c5c:	10800044 	addi	r2,r2,1
   50c60:	e0bffd15 	stw	r2,-12(fp)
   50c64:	e0bffd17 	ldw	r2,-12(fp)
   50c68:	10800810 	cmplti	r2,r2,32
   50c6c:	103fdc1e 	bne	r2,zero,50be0 <__alt_data_end+0xffff0be0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   50c70:	e0bffe17 	ldw	r2,-8(fp)
}
   50c74:	e037883a 	mov	sp,fp
   50c78:	dfc00217 	ldw	ra,8(sp)
   50c7c:	df000117 	ldw	fp,4(sp)
   50c80:	dc000017 	ldw	r16,0(sp)
   50c84:	dec00304 	addi	sp,sp,12
   50c88:	f800283a 	ret

00050c8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   50c8c:	deffff04 	addi	sp,sp,-4
   50c90:	df000015 	stw	fp,0(sp)
   50c94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   50c98:	e037883a 	mov	sp,fp
   50c9c:	df000017 	ldw	fp,0(sp)
   50ca0:	dec00104 	addi	sp,sp,4
   50ca4:	f800283a 	ret

00050ca8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50ca8:	defff904 	addi	sp,sp,-28
   50cac:	dfc00615 	stw	ra,24(sp)
   50cb0:	df000515 	stw	fp,20(sp)
   50cb4:	df000504 	addi	fp,sp,20
   50cb8:	e13ffc15 	stw	r4,-16(fp)
   50cbc:	e17ffd15 	stw	r5,-12(fp)
   50cc0:	e1bffe15 	stw	r6,-8(fp)
   50cc4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   50cc8:	e0800217 	ldw	r2,8(fp)
   50ccc:	d8800015 	stw	r2,0(sp)
   50cd0:	e13ffc17 	ldw	r4,-16(fp)
   50cd4:	e17ffd17 	ldw	r5,-12(fp)
   50cd8:	e1bffe17 	ldw	r6,-8(fp)
   50cdc:	e1ffff17 	ldw	r7,-4(fp)
   50ce0:	0050e800 	call	50e80 <alt_iic_isr_register>
}  
   50ce4:	e037883a 	mov	sp,fp
   50ce8:	dfc00117 	ldw	ra,4(sp)
   50cec:	df000017 	ldw	fp,0(sp)
   50cf0:	dec00204 	addi	sp,sp,8
   50cf4:	f800283a 	ret

00050cf8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   50cf8:	defff904 	addi	sp,sp,-28
   50cfc:	df000615 	stw	fp,24(sp)
   50d00:	df000604 	addi	fp,sp,24
   50d04:	e13ffe15 	stw	r4,-8(fp)
   50d08:	e17fff15 	stw	r5,-4(fp)
   50d0c:	e0bfff17 	ldw	r2,-4(fp)
   50d10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50d14:	0005303a 	rdctl	r2,status
   50d18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50d1c:	e0fffb17 	ldw	r3,-20(fp)
   50d20:	00bfff84 	movi	r2,-2
   50d24:	1884703a 	and	r2,r3,r2
   50d28:	1001703a 	wrctl	status,r2
  
  return context;
   50d2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50d30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   50d34:	e0bffa17 	ldw	r2,-24(fp)
   50d38:	00c00044 	movi	r3,1
   50d3c:	1884983a 	sll	r2,r3,r2
   50d40:	1007883a 	mov	r3,r2
   50d44:	00800174 	movhi	r2,5
   50d48:	10947304 	addi	r2,r2,20940
   50d4c:	10800017 	ldw	r2,0(r2)
   50d50:	1886b03a 	or	r3,r3,r2
   50d54:	00800174 	movhi	r2,5
   50d58:	10947304 	addi	r2,r2,20940
   50d5c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50d60:	00800174 	movhi	r2,5
   50d64:	10947304 	addi	r2,r2,20940
   50d68:	10800017 	ldw	r2,0(r2)
   50d6c:	100170fa 	wrctl	ienable,r2
   50d70:	e0bffc17 	ldw	r2,-16(fp)
   50d74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50d78:	e0bffd17 	ldw	r2,-12(fp)
   50d7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50d80:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   50d84:	e037883a 	mov	sp,fp
   50d88:	df000017 	ldw	fp,0(sp)
   50d8c:	dec00104 	addi	sp,sp,4
   50d90:	f800283a 	ret

00050d94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   50d94:	defff904 	addi	sp,sp,-28
   50d98:	df000615 	stw	fp,24(sp)
   50d9c:	df000604 	addi	fp,sp,24
   50da0:	e13ffe15 	stw	r4,-8(fp)
   50da4:	e17fff15 	stw	r5,-4(fp)
   50da8:	e0bfff17 	ldw	r2,-4(fp)
   50dac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50db0:	0005303a 	rdctl	r2,status
   50db4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50db8:	e0fffb17 	ldw	r3,-20(fp)
   50dbc:	00bfff84 	movi	r2,-2
   50dc0:	1884703a 	and	r2,r3,r2
   50dc4:	1001703a 	wrctl	status,r2
  
  return context;
   50dc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50dcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   50dd0:	e0bffa17 	ldw	r2,-24(fp)
   50dd4:	00c00044 	movi	r3,1
   50dd8:	1884983a 	sll	r2,r3,r2
   50ddc:	0084303a 	nor	r2,zero,r2
   50de0:	1007883a 	mov	r3,r2
   50de4:	00800174 	movhi	r2,5
   50de8:	10947304 	addi	r2,r2,20940
   50dec:	10800017 	ldw	r2,0(r2)
   50df0:	1886703a 	and	r3,r3,r2
   50df4:	00800174 	movhi	r2,5
   50df8:	10947304 	addi	r2,r2,20940
   50dfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50e00:	00800174 	movhi	r2,5
   50e04:	10947304 	addi	r2,r2,20940
   50e08:	10800017 	ldw	r2,0(r2)
   50e0c:	100170fa 	wrctl	ienable,r2
   50e10:	e0bffc17 	ldw	r2,-16(fp)
   50e14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e18:	e0bffd17 	ldw	r2,-12(fp)
   50e1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50e20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   50e24:	e037883a 	mov	sp,fp
   50e28:	df000017 	ldw	fp,0(sp)
   50e2c:	dec00104 	addi	sp,sp,4
   50e30:	f800283a 	ret

00050e34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   50e34:	defffc04 	addi	sp,sp,-16
   50e38:	df000315 	stw	fp,12(sp)
   50e3c:	df000304 	addi	fp,sp,12
   50e40:	e13ffe15 	stw	r4,-8(fp)
   50e44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   50e48:	000530fa 	rdctl	r2,ienable
   50e4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   50e50:	e0bfff17 	ldw	r2,-4(fp)
   50e54:	00c00044 	movi	r3,1
   50e58:	1884983a 	sll	r2,r3,r2
   50e5c:	1007883a 	mov	r3,r2
   50e60:	e0bffd17 	ldw	r2,-12(fp)
   50e64:	1884703a 	and	r2,r3,r2
   50e68:	1004c03a 	cmpne	r2,r2,zero
   50e6c:	10803fcc 	andi	r2,r2,255
}
   50e70:	e037883a 	mov	sp,fp
   50e74:	df000017 	ldw	fp,0(sp)
   50e78:	dec00104 	addi	sp,sp,4
   50e7c:	f800283a 	ret

00050e80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50e80:	defff504 	addi	sp,sp,-44
   50e84:	dfc00a15 	stw	ra,40(sp)
   50e88:	df000915 	stw	fp,36(sp)
   50e8c:	df000904 	addi	fp,sp,36
   50e90:	e13ffc15 	stw	r4,-16(fp)
   50e94:	e17ffd15 	stw	r5,-12(fp)
   50e98:	e1bffe15 	stw	r6,-8(fp)
   50e9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   50ea0:	00bffa84 	movi	r2,-22
   50ea4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   50ea8:	e0bffd17 	ldw	r2,-12(fp)
   50eac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   50eb0:	e0bff817 	ldw	r2,-32(fp)
   50eb4:	10800808 	cmpgei	r2,r2,32
   50eb8:	1000271e 	bne	r2,zero,50f58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50ebc:	0005303a 	rdctl	r2,status
   50ec0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50ec4:	e0fffa17 	ldw	r3,-24(fp)
   50ec8:	00bfff84 	movi	r2,-2
   50ecc:	1884703a 	and	r2,r3,r2
   50ed0:	1001703a 	wrctl	status,r2
  
  return context;
   50ed4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   50ed8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   50edc:	00c00174 	movhi	r3,5
   50ee0:	18d48004 	addi	r3,r3,20992
   50ee4:	e0bff817 	ldw	r2,-32(fp)
   50ee8:	100490fa 	slli	r2,r2,3
   50eec:	1885883a 	add	r2,r3,r2
   50ef0:	e0fffe17 	ldw	r3,-8(fp)
   50ef4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   50ef8:	00c00174 	movhi	r3,5
   50efc:	18d48004 	addi	r3,r3,20992
   50f00:	e0bff817 	ldw	r2,-32(fp)
   50f04:	100490fa 	slli	r2,r2,3
   50f08:	1885883a 	add	r2,r3,r2
   50f0c:	10800104 	addi	r2,r2,4
   50f10:	e0ffff17 	ldw	r3,-4(fp)
   50f14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   50f18:	e0bffe17 	ldw	r2,-8(fp)
   50f1c:	10000526 	beq	r2,zero,50f34 <alt_iic_isr_register+0xb4>
   50f20:	e0bff817 	ldw	r2,-32(fp)
   50f24:	e13ffc17 	ldw	r4,-16(fp)
   50f28:	100b883a 	mov	r5,r2
   50f2c:	0050cf80 	call	50cf8 <alt_ic_irq_enable>
   50f30:	00000406 	br	50f44 <alt_iic_isr_register+0xc4>
   50f34:	e0bff817 	ldw	r2,-32(fp)
   50f38:	e13ffc17 	ldw	r4,-16(fp)
   50f3c:	100b883a 	mov	r5,r2
   50f40:	0050d940 	call	50d94 <alt_ic_irq_disable>
   50f44:	e0bff715 	stw	r2,-36(fp)
   50f48:	e0bff917 	ldw	r2,-28(fp)
   50f4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50f50:	e0bffb17 	ldw	r2,-20(fp)
   50f54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   50f58:	e0bff717 	ldw	r2,-36(fp)
}
   50f5c:	e037883a 	mov	sp,fp
   50f60:	dfc00117 	ldw	ra,4(sp)
   50f64:	df000017 	ldw	fp,0(sp)
   50f68:	dec00204 	addi	sp,sp,8
   50f6c:	f800283a 	ret

00050f70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   50f70:	defff804 	addi	sp,sp,-32
   50f74:	dfc00715 	stw	ra,28(sp)
   50f78:	df000615 	stw	fp,24(sp)
   50f7c:	dc000515 	stw	r16,20(sp)
   50f80:	df000504 	addi	fp,sp,20
   50f84:	e13ffc15 	stw	r4,-16(fp)
   50f88:	e17ffd15 	stw	r5,-12(fp)
   50f8c:	e1bffe15 	stw	r6,-8(fp)
   50f90:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   50f94:	e13ffd17 	ldw	r4,-12(fp)
   50f98:	e17ffe17 	ldw	r5,-8(fp)
   50f9c:	e1bfff17 	ldw	r6,-4(fp)
   50fa0:	004e9540 	call	4e954 <open>
   50fa4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   50fa8:	e0bffb17 	ldw	r2,-20(fp)
   50fac:	10002216 	blt	r2,zero,51038 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   50fb0:	04000174 	movhi	r16,5
   50fb4:	8408ce04 	addi	r16,r16,9016
   50fb8:	e0bffb17 	ldw	r2,-20(fp)
   50fbc:	1009883a 	mov	r4,r2
   50fc0:	01400304 	movi	r5,12
   50fc4:	004131c0 	call	4131c <__mulsi3>
   50fc8:	8085883a 	add	r2,r16,r2
   50fcc:	10c00017 	ldw	r3,0(r2)
   50fd0:	e0bffc17 	ldw	r2,-16(fp)
   50fd4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   50fd8:	04000174 	movhi	r16,5
   50fdc:	8408ce04 	addi	r16,r16,9016
   50fe0:	e0bffb17 	ldw	r2,-20(fp)
   50fe4:	1009883a 	mov	r4,r2
   50fe8:	01400304 	movi	r5,12
   50fec:	004131c0 	call	4131c <__mulsi3>
   50ff0:	8085883a 	add	r2,r16,r2
   50ff4:	10800104 	addi	r2,r2,4
   50ff8:	10c00017 	ldw	r3,0(r2)
   50ffc:	e0bffc17 	ldw	r2,-16(fp)
   51000:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   51004:	04000174 	movhi	r16,5
   51008:	8408ce04 	addi	r16,r16,9016
   5100c:	e0bffb17 	ldw	r2,-20(fp)
   51010:	1009883a 	mov	r4,r2
   51014:	01400304 	movi	r5,12
   51018:	004131c0 	call	4131c <__mulsi3>
   5101c:	8085883a 	add	r2,r16,r2
   51020:	10800204 	addi	r2,r2,8
   51024:	10c00017 	ldw	r3,0(r2)
   51028:	e0bffc17 	ldw	r2,-16(fp)
   5102c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   51030:	e13ffb17 	ldw	r4,-20(fp)
   51034:	004ebf00 	call	4ebf0 <alt_release_fd>
  }
} 
   51038:	e037883a 	mov	sp,fp
   5103c:	dfc00217 	ldw	ra,8(sp)
   51040:	df000117 	ldw	fp,4(sp)
   51044:	dc000017 	ldw	r16,0(sp)
   51048:	dec00304 	addi	sp,sp,12
   5104c:	f800283a 	ret

00051050 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   51050:	defffb04 	addi	sp,sp,-20
   51054:	dfc00415 	stw	ra,16(sp)
   51058:	df000315 	stw	fp,12(sp)
   5105c:	df000304 	addi	fp,sp,12
   51060:	e13ffd15 	stw	r4,-12(fp)
   51064:	e17ffe15 	stw	r5,-8(fp)
   51068:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   5106c:	01000174 	movhi	r4,5
   51070:	2108d104 	addi	r4,r4,9028
   51074:	e17ffd17 	ldw	r5,-12(fp)
   51078:	01800044 	movi	r6,1
   5107c:	01c07fc4 	movi	r7,511
   51080:	0050f700 	call	50f70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   51084:	01000174 	movhi	r4,5
   51088:	2108ce04 	addi	r4,r4,9016
   5108c:	e17ffe17 	ldw	r5,-8(fp)
   51090:	000d883a 	mov	r6,zero
   51094:	01c07fc4 	movi	r7,511
   51098:	0050f700 	call	50f70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   5109c:	01000174 	movhi	r4,5
   510a0:	2108d404 	addi	r4,r4,9040
   510a4:	e17fff17 	ldw	r5,-4(fp)
   510a8:	01800044 	movi	r6,1
   510ac:	01c07fc4 	movi	r7,511
   510b0:	0050f700 	call	50f70 <alt_open_fd>
}  
   510b4:	e037883a 	mov	sp,fp
   510b8:	dfc00117 	ldw	ra,4(sp)
   510bc:	df000017 	ldw	fp,0(sp)
   510c0:	dec00204 	addi	sp,sp,8
   510c4:	f800283a 	ret

000510c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   510c8:	defffa04 	addi	sp,sp,-24
   510cc:	df000515 	stw	fp,20(sp)
   510d0:	df000504 	addi	fp,sp,20
   510d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   510d8:	0005303a 	rdctl	r2,status
   510dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   510e0:	e0fffc17 	ldw	r3,-16(fp)
   510e4:	00bfff84 	movi	r2,-2
   510e8:	1884703a 	and	r2,r3,r2
   510ec:	1001703a 	wrctl	status,r2
  
  return context;
   510f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   510f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   510f8:	e0bfff17 	ldw	r2,-4(fp)
   510fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   51100:	e0bffd17 	ldw	r2,-12(fp)
   51104:	10800017 	ldw	r2,0(r2)
   51108:	e0fffd17 	ldw	r3,-12(fp)
   5110c:	18c00117 	ldw	r3,4(r3)
   51110:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   51114:	e0bffd17 	ldw	r2,-12(fp)
   51118:	10800117 	ldw	r2,4(r2)
   5111c:	e0fffd17 	ldw	r3,-12(fp)
   51120:	18c00017 	ldw	r3,0(r3)
   51124:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   51128:	e0bffd17 	ldw	r2,-12(fp)
   5112c:	e0fffd17 	ldw	r3,-12(fp)
   51130:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   51134:	e0bffd17 	ldw	r2,-12(fp)
   51138:	e0fffd17 	ldw	r3,-12(fp)
   5113c:	10c00015 	stw	r3,0(r2)
   51140:	e0bffb17 	ldw	r2,-20(fp)
   51144:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51148:	e0bffe17 	ldw	r2,-8(fp)
   5114c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   51150:	e037883a 	mov	sp,fp
   51154:	df000017 	ldw	fp,0(sp)
   51158:	dec00104 	addi	sp,sp,4
   5115c:	f800283a 	ret

00051160 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   51160:	defffb04 	addi	sp,sp,-20
   51164:	dfc00415 	stw	ra,16(sp)
   51168:	df000315 	stw	fp,12(sp)
   5116c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   51170:	d0a02017 	ldw	r2,-32640(gp)
   51174:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   51178:	d0a72517 	ldw	r2,-25452(gp)
   5117c:	10800044 	addi	r2,r2,1
   51180:	d0a72515 	stw	r2,-25452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51184:	00002e06 	br	51240 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   51188:	e0bffd17 	ldw	r2,-12(fp)
   5118c:	10800017 	ldw	r2,0(r2)
   51190:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   51194:	e0bffd17 	ldw	r2,-12(fp)
   51198:	10800403 	ldbu	r2,16(r2)
   5119c:	10803fcc 	andi	r2,r2,255
   511a0:	10000426 	beq	r2,zero,511b4 <alt_tick+0x54>
   511a4:	d0a72517 	ldw	r2,-25452(gp)
   511a8:	1000021e 	bne	r2,zero,511b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   511ac:	e0bffd17 	ldw	r2,-12(fp)
   511b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   511b4:	e0bffd17 	ldw	r2,-12(fp)
   511b8:	10800217 	ldw	r2,8(r2)
   511bc:	d0e72517 	ldw	r3,-25452(gp)
   511c0:	18801d36 	bltu	r3,r2,51238 <alt_tick+0xd8>
   511c4:	e0bffd17 	ldw	r2,-12(fp)
   511c8:	10800403 	ldbu	r2,16(r2)
   511cc:	10803fcc 	andi	r2,r2,255
   511d0:	1000191e 	bne	r2,zero,51238 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   511d4:	e0bffd17 	ldw	r2,-12(fp)
   511d8:	10c00317 	ldw	r3,12(r2)
   511dc:	e0bffd17 	ldw	r2,-12(fp)
   511e0:	10800517 	ldw	r2,20(r2)
   511e4:	1009883a 	mov	r4,r2
   511e8:	183ee83a 	callr	r3
   511ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   511f0:	e0bfff17 	ldw	r2,-4(fp)
   511f4:	1000031e 	bne	r2,zero,51204 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   511f8:	e13ffd17 	ldw	r4,-12(fp)
   511fc:	00510c80 	call	510c8 <alt_alarm_stop>
   51200:	00000d06 	br	51238 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   51204:	e0bffd17 	ldw	r2,-12(fp)
   51208:	10c00217 	ldw	r3,8(r2)
   5120c:	e0bfff17 	ldw	r2,-4(fp)
   51210:	1887883a 	add	r3,r3,r2
   51214:	e0bffd17 	ldw	r2,-12(fp)
   51218:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   5121c:	e0bffd17 	ldw	r2,-12(fp)
   51220:	10c00217 	ldw	r3,8(r2)
   51224:	d0a72517 	ldw	r2,-25452(gp)
   51228:	1880032e 	bgeu	r3,r2,51238 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   5122c:	e0bffd17 	ldw	r2,-12(fp)
   51230:	00c00044 	movi	r3,1
   51234:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   51238:	e0bffe17 	ldw	r2,-8(fp)
   5123c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   51240:	e0fffd17 	ldw	r3,-12(fp)
   51244:	d0a02004 	addi	r2,gp,-32640
   51248:	18bfcf1e 	bne	r3,r2,51188 <__alt_data_end+0xffff1188>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   5124c:	0001883a 	nop
}
   51250:	e037883a 	mov	sp,fp
   51254:	dfc00117 	ldw	ra,4(sp)
   51258:	df000017 	ldw	fp,0(sp)
   5125c:	dec00204 	addi	sp,sp,8
   51260:	f800283a 	ret

00051264 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   51264:	deffff04 	addi	sp,sp,-4
   51268:	df000015 	stw	fp,0(sp)
   5126c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   51270:	000170fa 	wrctl	ienable,zero
}
   51274:	e037883a 	mov	sp,fp
   51278:	df000017 	ldw	fp,0(sp)
   5127c:	dec00104 	addi	sp,sp,4
   51280:	f800283a 	ret

00051284 <atexit>:
   51284:	200b883a 	mov	r5,r4
   51288:	000f883a 	mov	r7,zero
   5128c:	000d883a 	mov	r6,zero
   51290:	0009883a 	mov	r4,zero
   51294:	005134c1 	jmpi	5134c <__register_exitproc>

00051298 <exit>:
   51298:	defffe04 	addi	sp,sp,-8
   5129c:	000b883a 	mov	r5,zero
   512a0:	dc000015 	stw	r16,0(sp)
   512a4:	dfc00115 	stw	ra,4(sp)
   512a8:	2021883a 	mov	r16,r4
   512ac:	00514640 	call	51464 <__call_exitprocs>
   512b0:	00800174 	movhi	r2,5
   512b4:	108d5004 	addi	r2,r2,13632
   512b8:	11000017 	ldw	r4,0(r2)
   512bc:	20800f17 	ldw	r2,60(r4)
   512c0:	10000126 	beq	r2,zero,512c8 <exit+0x30>
   512c4:	103ee83a 	callr	r2
   512c8:	8009883a 	mov	r4,r16
   512cc:	00515e40 	call	515e4 <_exit>

000512d0 <memcmp>:
   512d0:	01c000c4 	movi	r7,3
   512d4:	3980192e 	bgeu	r7,r6,5133c <memcmp+0x6c>
   512d8:	2144b03a 	or	r2,r4,r5
   512dc:	11c4703a 	and	r2,r2,r7
   512e0:	10000f26 	beq	r2,zero,51320 <memcmp+0x50>
   512e4:	20800003 	ldbu	r2,0(r4)
   512e8:	28c00003 	ldbu	r3,0(r5)
   512ec:	10c0151e 	bne	r2,r3,51344 <memcmp+0x74>
   512f0:	31bfff84 	addi	r6,r6,-2
   512f4:	01ffffc4 	movi	r7,-1
   512f8:	00000406 	br	5130c <memcmp+0x3c>
   512fc:	20800003 	ldbu	r2,0(r4)
   51300:	28c00003 	ldbu	r3,0(r5)
   51304:	31bfffc4 	addi	r6,r6,-1
   51308:	10c00e1e 	bne	r2,r3,51344 <memcmp+0x74>
   5130c:	21000044 	addi	r4,r4,1
   51310:	29400044 	addi	r5,r5,1
   51314:	31fff91e 	bne	r6,r7,512fc <__alt_data_end+0xffff12fc>
   51318:	0005883a 	mov	r2,zero
   5131c:	f800283a 	ret
   51320:	20c00017 	ldw	r3,0(r4)
   51324:	28800017 	ldw	r2,0(r5)
   51328:	18bfee1e 	bne	r3,r2,512e4 <__alt_data_end+0xffff12e4>
   5132c:	31bfff04 	addi	r6,r6,-4
   51330:	21000104 	addi	r4,r4,4
   51334:	29400104 	addi	r5,r5,4
   51338:	39bff936 	bltu	r7,r6,51320 <__alt_data_end+0xffff1320>
   5133c:	303fe91e 	bne	r6,zero,512e4 <__alt_data_end+0xffff12e4>
   51340:	003ff506 	br	51318 <__alt_data_end+0xffff1318>
   51344:	10c5c83a 	sub	r2,r2,r3
   51348:	f800283a 	ret

0005134c <__register_exitproc>:
   5134c:	defffa04 	addi	sp,sp,-24
   51350:	dc000315 	stw	r16,12(sp)
   51354:	04000174 	movhi	r16,5
   51358:	840d5004 	addi	r16,r16,13632
   5135c:	80c00017 	ldw	r3,0(r16)
   51360:	dc400415 	stw	r17,16(sp)
   51364:	dfc00515 	stw	ra,20(sp)
   51368:	18805217 	ldw	r2,328(r3)
   5136c:	2023883a 	mov	r17,r4
   51370:	10003726 	beq	r2,zero,51450 <__register_exitproc+0x104>
   51374:	10c00117 	ldw	r3,4(r2)
   51378:	010007c4 	movi	r4,31
   5137c:	20c00e16 	blt	r4,r3,513b8 <__register_exitproc+0x6c>
   51380:	1a000044 	addi	r8,r3,1
   51384:	8800221e 	bne	r17,zero,51410 <__register_exitproc+0xc4>
   51388:	18c00084 	addi	r3,r3,2
   5138c:	18c7883a 	add	r3,r3,r3
   51390:	18c7883a 	add	r3,r3,r3
   51394:	12000115 	stw	r8,4(r2)
   51398:	10c7883a 	add	r3,r2,r3
   5139c:	19400015 	stw	r5,0(r3)
   513a0:	0005883a 	mov	r2,zero
   513a4:	dfc00517 	ldw	ra,20(sp)
   513a8:	dc400417 	ldw	r17,16(sp)
   513ac:	dc000317 	ldw	r16,12(sp)
   513b0:	dec00604 	addi	sp,sp,24
   513b4:	f800283a 	ret
   513b8:	00800034 	movhi	r2,0
   513bc:	10800004 	addi	r2,r2,0
   513c0:	10002626 	beq	r2,zero,5145c <__register_exitproc+0x110>
   513c4:	01006404 	movi	r4,400
   513c8:	d9400015 	stw	r5,0(sp)
   513cc:	d9800115 	stw	r6,4(sp)
   513d0:	d9c00215 	stw	r7,8(sp)
   513d4:	00000000 	call	0 <__alt_mem_onchip_mem_1f-0x40000>
   513d8:	d9400017 	ldw	r5,0(sp)
   513dc:	d9800117 	ldw	r6,4(sp)
   513e0:	d9c00217 	ldw	r7,8(sp)
   513e4:	10001d26 	beq	r2,zero,5145c <__register_exitproc+0x110>
   513e8:	81000017 	ldw	r4,0(r16)
   513ec:	10000115 	stw	zero,4(r2)
   513f0:	02000044 	movi	r8,1
   513f4:	22405217 	ldw	r9,328(r4)
   513f8:	0007883a 	mov	r3,zero
   513fc:	12400015 	stw	r9,0(r2)
   51400:	20805215 	stw	r2,328(r4)
   51404:	10006215 	stw	zero,392(r2)
   51408:	10006315 	stw	zero,396(r2)
   5140c:	883fde26 	beq	r17,zero,51388 <__alt_data_end+0xffff1388>
   51410:	18c9883a 	add	r4,r3,r3
   51414:	2109883a 	add	r4,r4,r4
   51418:	1109883a 	add	r4,r2,r4
   5141c:	21802215 	stw	r6,136(r4)
   51420:	01800044 	movi	r6,1
   51424:	12406217 	ldw	r9,392(r2)
   51428:	30cc983a 	sll	r6,r6,r3
   5142c:	4992b03a 	or	r9,r9,r6
   51430:	12406215 	stw	r9,392(r2)
   51434:	21c04215 	stw	r7,264(r4)
   51438:	01000084 	movi	r4,2
   5143c:	893fd21e 	bne	r17,r4,51388 <__alt_data_end+0xffff1388>
   51440:	11006317 	ldw	r4,396(r2)
   51444:	218cb03a 	or	r6,r4,r6
   51448:	11806315 	stw	r6,396(r2)
   5144c:	003fce06 	br	51388 <__alt_data_end+0xffff1388>
   51450:	18805304 	addi	r2,r3,332
   51454:	18805215 	stw	r2,328(r3)
   51458:	003fc606 	br	51374 <__alt_data_end+0xffff1374>
   5145c:	00bfffc4 	movi	r2,-1
   51460:	003fd006 	br	513a4 <__alt_data_end+0xffff13a4>

00051464 <__call_exitprocs>:
   51464:	defff504 	addi	sp,sp,-44
   51468:	df000915 	stw	fp,36(sp)
   5146c:	dd400615 	stw	r21,24(sp)
   51470:	dc800315 	stw	r18,12(sp)
   51474:	dfc00a15 	stw	ra,40(sp)
   51478:	ddc00815 	stw	r23,32(sp)
   5147c:	dd800715 	stw	r22,28(sp)
   51480:	dd000515 	stw	r20,20(sp)
   51484:	dcc00415 	stw	r19,16(sp)
   51488:	dc400215 	stw	r17,8(sp)
   5148c:	dc000115 	stw	r16,4(sp)
   51490:	d9000015 	stw	r4,0(sp)
   51494:	2839883a 	mov	fp,r5
   51498:	04800044 	movi	r18,1
   5149c:	057fffc4 	movi	r21,-1
   514a0:	00800174 	movhi	r2,5
   514a4:	108d5004 	addi	r2,r2,13632
   514a8:	12000017 	ldw	r8,0(r2)
   514ac:	45005217 	ldw	r20,328(r8)
   514b0:	44c05204 	addi	r19,r8,328
   514b4:	a0001c26 	beq	r20,zero,51528 <__call_exitprocs+0xc4>
   514b8:	a0800117 	ldw	r2,4(r20)
   514bc:	15ffffc4 	addi	r23,r2,-1
   514c0:	b8000d16 	blt	r23,zero,514f8 <__call_exitprocs+0x94>
   514c4:	14000044 	addi	r16,r2,1
   514c8:	8421883a 	add	r16,r16,r16
   514cc:	8421883a 	add	r16,r16,r16
   514d0:	84402004 	addi	r17,r16,128
   514d4:	a463883a 	add	r17,r20,r17
   514d8:	a421883a 	add	r16,r20,r16
   514dc:	e0001e26 	beq	fp,zero,51558 <__call_exitprocs+0xf4>
   514e0:	80804017 	ldw	r2,256(r16)
   514e4:	e0801c26 	beq	fp,r2,51558 <__call_exitprocs+0xf4>
   514e8:	bdffffc4 	addi	r23,r23,-1
   514ec:	843fff04 	addi	r16,r16,-4
   514f0:	8c7fff04 	addi	r17,r17,-4
   514f4:	bd7ff91e 	bne	r23,r21,514dc <__alt_data_end+0xffff14dc>
   514f8:	00800034 	movhi	r2,0
   514fc:	10800004 	addi	r2,r2,0
   51500:	10000926 	beq	r2,zero,51528 <__call_exitprocs+0xc4>
   51504:	a0800117 	ldw	r2,4(r20)
   51508:	1000301e 	bne	r2,zero,515cc <__call_exitprocs+0x168>
   5150c:	a0800017 	ldw	r2,0(r20)
   51510:	10003226 	beq	r2,zero,515dc <__call_exitprocs+0x178>
   51514:	a009883a 	mov	r4,r20
   51518:	98800015 	stw	r2,0(r19)
   5151c:	00000000 	call	0 <__alt_mem_onchip_mem_1f-0x40000>
   51520:	9d000017 	ldw	r20,0(r19)
   51524:	a03fe41e 	bne	r20,zero,514b8 <__alt_data_end+0xffff14b8>
   51528:	dfc00a17 	ldw	ra,40(sp)
   5152c:	df000917 	ldw	fp,36(sp)
   51530:	ddc00817 	ldw	r23,32(sp)
   51534:	dd800717 	ldw	r22,28(sp)
   51538:	dd400617 	ldw	r21,24(sp)
   5153c:	dd000517 	ldw	r20,20(sp)
   51540:	dcc00417 	ldw	r19,16(sp)
   51544:	dc800317 	ldw	r18,12(sp)
   51548:	dc400217 	ldw	r17,8(sp)
   5154c:	dc000117 	ldw	r16,4(sp)
   51550:	dec00b04 	addi	sp,sp,44
   51554:	f800283a 	ret
   51558:	a0800117 	ldw	r2,4(r20)
   5155c:	80c00017 	ldw	r3,0(r16)
   51560:	10bfffc4 	addi	r2,r2,-1
   51564:	15c01426 	beq	r2,r23,515b8 <__call_exitprocs+0x154>
   51568:	80000015 	stw	zero,0(r16)
   5156c:	183fde26 	beq	r3,zero,514e8 <__alt_data_end+0xffff14e8>
   51570:	95c8983a 	sll	r4,r18,r23
   51574:	a0806217 	ldw	r2,392(r20)
   51578:	a5800117 	ldw	r22,4(r20)
   5157c:	2084703a 	and	r2,r4,r2
   51580:	10000b26 	beq	r2,zero,515b0 <__call_exitprocs+0x14c>
   51584:	a0806317 	ldw	r2,396(r20)
   51588:	2088703a 	and	r4,r4,r2
   5158c:	20000c1e 	bne	r4,zero,515c0 <__call_exitprocs+0x15c>
   51590:	89400017 	ldw	r5,0(r17)
   51594:	d9000017 	ldw	r4,0(sp)
   51598:	183ee83a 	callr	r3
   5159c:	a0800117 	ldw	r2,4(r20)
   515a0:	15bfbf1e 	bne	r2,r22,514a0 <__alt_data_end+0xffff14a0>
   515a4:	98800017 	ldw	r2,0(r19)
   515a8:	153fcf26 	beq	r2,r20,514e8 <__alt_data_end+0xffff14e8>
   515ac:	003fbc06 	br	514a0 <__alt_data_end+0xffff14a0>
   515b0:	183ee83a 	callr	r3
   515b4:	003ff906 	br	5159c <__alt_data_end+0xffff159c>
   515b8:	a5c00115 	stw	r23,4(r20)
   515bc:	003feb06 	br	5156c <__alt_data_end+0xffff156c>
   515c0:	89000017 	ldw	r4,0(r17)
   515c4:	183ee83a 	callr	r3
   515c8:	003ff406 	br	5159c <__alt_data_end+0xffff159c>
   515cc:	a0800017 	ldw	r2,0(r20)
   515d0:	a027883a 	mov	r19,r20
   515d4:	1029883a 	mov	r20,r2
   515d8:	003fb606 	br	514b4 <__alt_data_end+0xffff14b4>
   515dc:	0005883a 	mov	r2,zero
   515e0:	003ffb06 	br	515d0 <__alt_data_end+0xffff15d0>

000515e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   515e4:	defffc04 	addi	sp,sp,-16
   515e8:	df000315 	stw	fp,12(sp)
   515ec:	df000304 	addi	fp,sp,12
   515f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   515f4:	0001883a 	nop
   515f8:	e0bfff17 	ldw	r2,-4(fp)
   515fc:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   51600:	e0bffd17 	ldw	r2,-12(fp)
   51604:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   51608:	e0bffe17 	ldw	r2,-8(fp)
   5160c:	10000226 	beq	r2,zero,51618 <_exit+0x34>
    ALT_SIM_FAIL();
   51610:	002af070 	cmpltui	zero,zero,43969
   51614:	00000106 	br	5161c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   51618:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5161c:	003fff06 	br	5161c <__alt_data_end+0xffff161c>

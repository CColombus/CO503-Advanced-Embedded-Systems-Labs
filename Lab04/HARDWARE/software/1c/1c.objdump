
1c.elf:     file format elf32-littlenios2
1c.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006928 memsz 0x00006928 flags r-x
    LOAD off    0x00007948 vaddr 0x00016948 paddr 0x0001841c align 2**12
         filesz 0x00001ad4 memsz 0x00001ad4 flags rw-
    LOAD off    0x00009ef0 vaddr 0x00019ef0 paddr 0x00019ef0 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006714  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  000168cc  000168cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad4  00016948  0001841c  00007948  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00019ef0  00019ef0  00009ef0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000941c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f0  00000000  00000000  00009440  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00018d50  00000000  00000000  00009e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006055  00000000  00000000  00022b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007278  00000000  00000000  00028bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001338  00000000  00000000  0002fe50  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000254a  00000000  00000000  00031188  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005db3  00000000  00000000  000336d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00039488  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00039498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003c35d  2**0
                  CONTENTS, READONLY
 17 .cpu          00000006  00000000  00000000  0003c360  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003c366  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c367  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c368  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c36c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c370  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000c  00000000  00000000  0003c374  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000c  00000000  00000000  0003c380  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000c  00000000  00000000  0003c38c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0003c398  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0003c3a1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001c11da  00000000  00000000  0003c3bd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
000168cc l    d  .rodata	00000000 .rodata
00016948 l    d  .rwdata	00000000 .rwdata
00019ef0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1c_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
000183d0 l     O .rwdata	00000002 c2.1697
000183d2 l     O .rwdata	00000002 c6.1700
000183d4 l     O .rwdata	00000002 s2.1703
000183d6 l     O .rwdata	00000002 c7.1701
000183d8 l     O .rwdata	00000002 c5.1699
000183da l     O .rwdata	00000002 c3.1698
000183dc l     O .rwdata	00000002 c1.1696
000183de l     O .rwdata	00000002 s1.1702
000183e0 l     O .rwdata	00000002 s3.1704
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010f74 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016dc8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001303c l     F .text	00000008 __fp_lock
00013044 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00013c10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013d2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013d58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013e58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013f4c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014038 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014214 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001840c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014488 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000145c8 l     F .text	00000038 alt_dev_reg
00017370 l     O .rwdata	00001060 jtag_uart_1c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014db0 l     F .text	00000204 altera_avalon_jtag_uart_irq
00014fb4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000155f0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015848 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015cd4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015e2c l     F .text	00000050 alt_get_errno
00015e7c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00013ad4 g     F .text	00000064 _isatty_r
0001415c g     F .text	00000078 alt_main
00011878 g     F .text	00000084 _puts_r
00019f4c g     O .bss	00000100 alt_irq
0001699c g     O .rwdata	0000000c q1c
00013b38 g     F .text	0000006c _lseek_r
0001491c g     F .text	00000058 altera_avalon_fifo_write_almostfull
0001841c g       *ABS*	00000000 __flash_rwdata_start
0001a1dc g       *ABS*	00000000 __alt_heap_start
000137e8 g     F .text	0000005c __sseek
000130e0 g     F .text	0000010c __sinit
00013058 g     F .text	00000078 __sfmoreglue
00016978 g     O .rwdata	0000000c q5
000141f4 g     F .text	00000020 __malloc_unlock
00012528 g     F .text	0000018c memmove
0001469c g     F .text	00000098 altera_avalon_fifo_init
000130d0 g     F .text	00000010 _cleanup
000149cc g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00014b64 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013a6c g     F .text	00000068 _fstat_r
00019f08 g     O .bss	00000004 errno
00019f10 g     O .bss	00000004 alt_argv
000203d0 g       *ABS*	00000000 _gp
00014868 g     F .text	0000005c altera_avalon_fifo_clear_event
000171f0 g     O .rwdata	00000180 alt_fd_list
00016280 g     F .text	00000090 alt_find_dev
000123e8 g     F .text	00000140 memcpy
00010d98 g     F .text	0000003c RECV
0001304c g     F .text	0000000c _cleanup_r
00015db4 g     F .text	00000078 alt_io_redirect
000168cc g       *ABS*	00000000 __DTOR_END__
000118fc g     F .text	00000014 puts
00016954 g     O .rwdata	0000000c q2
000151b4 g     F .text	00000218 altera_avalon_jtag_uart_read
000110cc g     F .text	00000014 malloc
00011094 g     F .text	00000008 __udivsi3
00013ea8 g     F .text	000000a4 isatty
00019f04 g     O .bss	00000004 __malloc_top_pad
00011e0c g     F .text	000004e4 __sfvwrite_r
00011910 g     F .text	00000064 _sbrk_r
00013ba4 g     F .text	0000006c _read_r
00018404 g     O .rwdata	00000004 alt_max_fd
0001391c g     F .text	0000013c _fclose_r
0001300c g     F .text	00000030 fflush
00019f00 g     O .bss	00000004 __malloc_max_sbrked_mem
00014088 g     F .text	000000d4 lseek
000183ec g     O .rwdata	00000004 _global_impure_ptr
000126b4 g     F .text	000005fc _realloc_r
0001a1dc g       *ABS*	00000000 __bss_end
00015be4 g     F .text	000000f0 alt_iic_isr_register
0001615c g     F .text	00000104 alt_tick
000132f8 g     F .text	00000018 __fp_lock_all
00015b98 g     F .text	0000004c alt_ic_irq_enabled
000160c4 g     F .text	00000098 alt_alarm_stop
00019f18 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
000171c8 g     O .rwdata	00000028 alt_dev_null
0001582c g     F .text	0000001c alt_dcache_flush_all
000148c4 g     F .text	00000058 altera_avalon_fifo_write_ienable
0001841c g       *ABS*	00000000 __ram_rwdata_end
000147d8 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000183fc g     O .rwdata	00000008 alt_dev_list
000144d8 g     F .text	000000f0 write
00016948 g       *ABS*	00000000 __ram_rodata_end
00013da8 g     F .text	000000b0 fstat
00019ef8 g     O .bss	00000004 INIT_USAGE_DEQ
0001109c g     F .text	00000008 __umodsi3
0001a1dc g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem_1c
00014cf0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00014804 g     F .text	0000003c altera_avalon_fifo_read_event
000168cc g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00015664 g     F .text	00000088 alt_avalon_timer_sc_init
000153cc g     F .text	00000224 altera_avalon_jtag_uart_write
000132e8 g     F .text	00000004 __sfp_lock_acquire
00014a90 g     F .text	0000004c altera_avalon_fifo_read_fifo
000122f0 g     F .text	000000f8 memchr
00011b3c g     F .text	000002d0 _free_r
000166f0 g     F .text	000001a0 __call_exitprocs
000183e4 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00019f1c g     O .bss	00000004 _alt_tick_rate
00010c8c g     F .text	00000088 enqueueINT32
00019f20 g     O .bss	00000004 _alt_nticks
00014264 g     F .text	000000f4 read
00014634 g     F .text	00000068 alt_sys_init
000165c0 g     F .text	00000130 __register_exitproc
000169a8 g     O .rwdata	0000000c q1d
00016960 g     O .rwdata	0000000c q3
00015058 g     F .text	00000068 altera_avalon_jtag_uart_close
000110a4 g     F .text	00000028 __mulsi3
00016948 g       *ABS*	00000000 __ram_rwdata_start
000168cc g       *ABS*	00000000 __ram_rodata_start
00019f24 g     O .bss	00000028 __malloc_current_mallinfo
00016948 g     O .rwdata	0000000c q1
00014b8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016424 g     F .text	000000d4 alt_get_fd
000138b8 g     F .text	00000064 _close_r
00016544 g     F .text	0000007c memcmp
00014c4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a1dc g       *ABS*	00000000 __alt_stack_base
00014c9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012cb0 g     F .text	00000174 __swsetup_r
00014734 g     F .text	0000003c altera_avalon_fifo_read_status
000131ec g     F .text	000000fc __sfp
000169c0 g     O .rwdata	00000408 __malloc_av_
000132f4 g     F .text	00000004 __sinit_lock_release
0001370c g     F .text	00000054 __sread
00014b38 g     F .text	0000002c altera_avalon_fifo_read_other_info
00010e18 g     F .text	0000015c printInteger
00016310 g     F .text	00000114 alt_find_file
00015898 g     F .text	000000a0 alt_dev_llist_insert
000141d4 g     F .text	00000020 __malloc_lock
000143d8 g     F .text	000000b0 sbrk
00012e24 g     F .text	000001e8 _fflush_r
00019ef0 g       *ABS*	00000000 __bss_start
00019ef0 g     O .bss	00000004 data
00013630 g     F .text	000000dc memset
00010c60 g     F .text	0000002c main
00019f14 g     O .bss	00000004 alt_envp
00019efc g     O .bss	00000004 __malloc_max_total_mem
00014bec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014840 g     F .text	00000028 altera_avalon_fifo_read_level
00013844 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013a58 g     F .text	00000014 fclose
0001a04c g     O .bss	00000190 _atexit0
000110f4 g     F .text	00000784 _malloc_r
00018408 g     O .rwdata	00000004 alt_errno
00016990 g     O .rwdata	0000000c q1b
00013328 g     F .text	000000a8 _fwalk
00010fe8 g     F .text	00000050 __divsi3
00011a00 g     F .text	0000013c _malloc_trim_r
000168cc g       *ABS*	00000000 __CTOR_END__
000168cc g       *ABS*	00000000 __flash_rodata_start
000168cc g       *ABS*	00000000 __DTOR_LIST__
000101f4 g     F .text	00000a6c DCT
00014600 g     F .text	00000034 alt_irq_init
00014358 g     F .text	00000080 alt_release_fd
000164f8 g     F .text	00000014 atexit
0001384c g     F .text	0000006c _write_r
00016984 g     O .rwdata	0000000c q6
00010dd4 g     F .text	00000044 SEND
00019ef4 g     O .bss	00000004 INIT_USAGE_ENQ
000183f0 g     O .rwdata	00000004 _impure_ptr
00019f0c g     O .bss	00000004 alt_argc
00015994 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00013310 g     F .text	00000018 __fp_unlock_all
000169b4 g     O .rwdata	0000000c q1e
000183f4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014adc g     F .text	0000005c altera_avalon_fifo_write_other_info
00015a0c g     F .text	00000050 alt_ic_isr_register
0001841c g       *ABS*	00000000 _edata
0001a1dc g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
000150c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00015af8 g     F .text	000000a0 alt_ic_irq_disable
00013760 g     F .text	00000088 __swrite
000183e8 g     O .rwdata	00000004 __malloc_trim_threshold
00016260 g     F .text	00000020 altera_nios2_qsys_irq_init
0001650c g     F .text	00000038 exit
000133d0 g     F .text	000000b8 _fwalk_reent
00011038 g     F .text	0000005c __modsi3
00014770 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000132ec g     F .text	00000004 __sfp_lock_release
00016890 g     F .text	0000003c _exit
000156ec g     F .text	00000140 alt_alarm_start
000147ac g     F .text	0000002c altera_avalon_fifo_read_almostfull
00013488 g     F .text	000001a8 __smakebuf_r
0001696c g     O .rwdata	0000000c q4
00011974 g     F .text	0000008c strlen
00015f6c g     F .text	00000158 open
00014a24 g     F .text	0000006c altera_avalon_read_fifo
00010d14 g     F .text	00000084 dequeueINT32
000159f0 g     F .text	0000001c alt_icache_flush_all
00018410 g     O .rwdata	00000004 alt_priority_mask
00015a5c g     F .text	0000009c alt_ic_irq_enable
00014974 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00018414 g     O .rwdata	00000008 alt_alarm_list
00015938 g     F .text	0000005c _do_ctors
00013c60 g     F .text	000000cc close
00013fb8 g     F .text	00000080 alt_load
000110e0 g     F .text	00000014 free
000132f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e7d304 	addi	r3,r3,-24756
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	2127d304 	addi	r4,r4,-24756
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d680f414 	ori	gp,gp,976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a7bc14 	ori	r2,r2,40688

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e87714 	ori	r3,r3,41436

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0013fb80 	call	13fb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	001415c0 	call	1415c <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <DCT>:
INT16 *data;

// TODO: Currently, this function is complete. But will have to change for hardware implementation.
/* DCT for One block(8x8) */
void DCT(void)
{
   101f4:	defff204 	addi	sp,sp,-56
   101f8:	dfc00d15 	stw	ra,52(sp)
   101fc:	df000c15 	stw	fp,48(sp)
   10200:	dc400b15 	stw	r17,44(sp)
   10204:	dc000a15 	stw	r16,40(sp)
   10208:	df000a04 	addi	fp,sp,40
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   1020c:	e03ff60d 	sth	zero,-40(fp)
   10210:	00000906 	br	10238 <DCT+0x44>
	{

		data[i] = (INT16)RECV();
   10214:	d0e6c817 	ldw	r3,-25824(gp)
   10218:	e0bff60b 	ldhu	r2,-40(fp)
   1021c:	1085883a 	add	r2,r2,r2
   10220:	18a1883a 	add	r16,r3,r2
   10224:	0010d980 	call	10d98 <RECV>
   10228:	8080000d 	sth	r2,0(r16)
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   1022c:	e0bff60b 	ldhu	r2,-40(fp)
   10230:	10800044 	addi	r2,r2,1
   10234:	e0bff60d 	sth	r2,-40(fp)
   10238:	e0bff60b 	ldhu	r2,-40(fp)
   1023c:	10801030 	cmpltui	r2,r2,64
   10240:	103ff41e 	bne	r2,zero,10214 <DCT+0x20>
	{

		data[i] = (INT16)RECV();
	}

	for (i = 8; i > 0; i--)
   10244:	00800204 	movi	r2,8
   10248:	e0bff60d 	sth	r2,-40(fp)
   1024c:	00012d06 	br	10704 <DCT+0x510>
	{
		x8 = data[0] + data[7];
   10250:	d0a6c817 	ldw	r2,-25824(gp)
   10254:	1080000b 	ldhu	r2,0(r2)
   10258:	10ffffcc 	andi	r3,r2,65535
   1025c:	18e0001c 	xori	r3,r3,32768
   10260:	18e00004 	addi	r3,r3,-32768
   10264:	d0a6c817 	ldw	r2,-25824(gp)
   10268:	10800384 	addi	r2,r2,14
   1026c:	1080000b 	ldhu	r2,0(r2)
   10270:	10bfffcc 	andi	r2,r2,65535
   10274:	10a0001c 	xori	r2,r2,32768
   10278:	10a00004 	addi	r2,r2,-32768
   1027c:	1885883a 	add	r2,r3,r2
   10280:	e0bff715 	stw	r2,-36(fp)
		x0 = data[0] - data[7];
   10284:	d0a6c817 	ldw	r2,-25824(gp)
   10288:	1080000b 	ldhu	r2,0(r2)
   1028c:	10ffffcc 	andi	r3,r2,65535
   10290:	18e0001c 	xori	r3,r3,32768
   10294:	18e00004 	addi	r3,r3,-32768
   10298:	d0a6c817 	ldw	r2,-25824(gp)
   1029c:	10800384 	addi	r2,r2,14
   102a0:	1080000b 	ldhu	r2,0(r2)
   102a4:	10bfffcc 	andi	r2,r2,65535
   102a8:	10a0001c 	xori	r2,r2,32768
   102ac:	10a00004 	addi	r2,r2,-32768
   102b0:	1885c83a 	sub	r2,r3,r2
   102b4:	e0bff815 	stw	r2,-32(fp)

		x7 = data[1] + data[6];
   102b8:	d0a6c817 	ldw	r2,-25824(gp)
   102bc:	10800084 	addi	r2,r2,2
   102c0:	1080000b 	ldhu	r2,0(r2)
   102c4:	10ffffcc 	andi	r3,r2,65535
   102c8:	18e0001c 	xori	r3,r3,32768
   102cc:	18e00004 	addi	r3,r3,-32768
   102d0:	d0a6c817 	ldw	r2,-25824(gp)
   102d4:	10800304 	addi	r2,r2,12
   102d8:	1080000b 	ldhu	r2,0(r2)
   102dc:	10bfffcc 	andi	r2,r2,65535
   102e0:	10a0001c 	xori	r2,r2,32768
   102e4:	10a00004 	addi	r2,r2,-32768
   102e8:	1885883a 	add	r2,r3,r2
   102ec:	e0bff915 	stw	r2,-28(fp)
		x1 = data[1] - data[6];
   102f0:	d0a6c817 	ldw	r2,-25824(gp)
   102f4:	10800084 	addi	r2,r2,2
   102f8:	1080000b 	ldhu	r2,0(r2)
   102fc:	10ffffcc 	andi	r3,r2,65535
   10300:	18e0001c 	xori	r3,r3,32768
   10304:	18e00004 	addi	r3,r3,-32768
   10308:	d0a6c817 	ldw	r2,-25824(gp)
   1030c:	10800304 	addi	r2,r2,12
   10310:	1080000b 	ldhu	r2,0(r2)
   10314:	10bfffcc 	andi	r2,r2,65535
   10318:	10a0001c 	xori	r2,r2,32768
   1031c:	10a00004 	addi	r2,r2,-32768
   10320:	1885c83a 	sub	r2,r3,r2
   10324:	e0bffa15 	stw	r2,-24(fp)

		x6 = data[2] + data[5];
   10328:	d0a6c817 	ldw	r2,-25824(gp)
   1032c:	10800104 	addi	r2,r2,4
   10330:	1080000b 	ldhu	r2,0(r2)
   10334:	10ffffcc 	andi	r3,r2,65535
   10338:	18e0001c 	xori	r3,r3,32768
   1033c:	18e00004 	addi	r3,r3,-32768
   10340:	d0a6c817 	ldw	r2,-25824(gp)
   10344:	10800284 	addi	r2,r2,10
   10348:	1080000b 	ldhu	r2,0(r2)
   1034c:	10bfffcc 	andi	r2,r2,65535
   10350:	10a0001c 	xori	r2,r2,32768
   10354:	10a00004 	addi	r2,r2,-32768
   10358:	1885883a 	add	r2,r3,r2
   1035c:	e0bffb15 	stw	r2,-20(fp)
		x2 = data[2] - data[5];
   10360:	d0a6c817 	ldw	r2,-25824(gp)
   10364:	10800104 	addi	r2,r2,4
   10368:	1080000b 	ldhu	r2,0(r2)
   1036c:	10ffffcc 	andi	r3,r2,65535
   10370:	18e0001c 	xori	r3,r3,32768
   10374:	18e00004 	addi	r3,r3,-32768
   10378:	d0a6c817 	ldw	r2,-25824(gp)
   1037c:	10800284 	addi	r2,r2,10
   10380:	1080000b 	ldhu	r2,0(r2)
   10384:	10bfffcc 	andi	r2,r2,65535
   10388:	10a0001c 	xori	r2,r2,32768
   1038c:	10a00004 	addi	r2,r2,-32768
   10390:	1885c83a 	sub	r2,r3,r2
   10394:	e0bffc15 	stw	r2,-16(fp)

		x5 = data[3] + data[4];
   10398:	d0a6c817 	ldw	r2,-25824(gp)
   1039c:	10800184 	addi	r2,r2,6
   103a0:	1080000b 	ldhu	r2,0(r2)
   103a4:	10ffffcc 	andi	r3,r2,65535
   103a8:	18e0001c 	xori	r3,r3,32768
   103ac:	18e00004 	addi	r3,r3,-32768
   103b0:	d0a6c817 	ldw	r2,-25824(gp)
   103b4:	10800204 	addi	r2,r2,8
   103b8:	1080000b 	ldhu	r2,0(r2)
   103bc:	10bfffcc 	andi	r2,r2,65535
   103c0:	10a0001c 	xori	r2,r2,32768
   103c4:	10a00004 	addi	r2,r2,-32768
   103c8:	1885883a 	add	r2,r3,r2
   103cc:	e0bffd15 	stw	r2,-12(fp)
		x3 = data[3] - data[4];
   103d0:	d0a6c817 	ldw	r2,-25824(gp)
   103d4:	10800184 	addi	r2,r2,6
   103d8:	1080000b 	ldhu	r2,0(r2)
   103dc:	10ffffcc 	andi	r3,r2,65535
   103e0:	18e0001c 	xori	r3,r3,32768
   103e4:	18e00004 	addi	r3,r3,-32768
   103e8:	d0a6c817 	ldw	r2,-25824(gp)
   103ec:	10800204 	addi	r2,r2,8
   103f0:	1080000b 	ldhu	r2,0(r2)
   103f4:	10bfffcc 	andi	r2,r2,65535
   103f8:	10a0001c 	xori	r2,r2,32768
   103fc:	10a00004 	addi	r2,r2,-32768
   10400:	1885c83a 	sub	r2,r3,r2
   10404:	e0bffe15 	stw	r2,-8(fp)

		x4 = x8 + x5;
   10408:	e0fff717 	ldw	r3,-36(fp)
   1040c:	e0bffd17 	ldw	r2,-12(fp)
   10410:	1885883a 	add	r2,r3,r2
   10414:	e0bfff15 	stw	r2,-4(fp)
		x8 -= x5;
   10418:	e0fff717 	ldw	r3,-36(fp)
   1041c:	e0bffd17 	ldw	r2,-12(fp)
   10420:	1885c83a 	sub	r2,r3,r2
   10424:	e0bff715 	stw	r2,-36(fp)

		x5 = x7 + x6;
   10428:	e0fff917 	ldw	r3,-28(fp)
   1042c:	e0bffb17 	ldw	r2,-20(fp)
   10430:	1885883a 	add	r2,r3,r2
   10434:	e0bffd15 	stw	r2,-12(fp)
		x7 -= x6;
   10438:	e0fff917 	ldw	r3,-28(fp)
   1043c:	e0bffb17 	ldw	r2,-20(fp)
   10440:	1885c83a 	sub	r2,r3,r2
   10444:	e0bff915 	stw	r2,-28(fp)

		data[0] = (INT16)(x4 + x5);
   10448:	d0a6c817 	ldw	r2,-25824(gp)
   1044c:	e0ffff17 	ldw	r3,-4(fp)
   10450:	1809883a 	mov	r4,r3
   10454:	e0fffd17 	ldw	r3,-12(fp)
   10458:	20c7883a 	add	r3,r4,r3
   1045c:	10c0000d 	sth	r3,0(r2)
		data[4] = (INT16)(x4 - x5);
   10460:	d0a6c817 	ldw	r2,-25824(gp)
   10464:	10800204 	addi	r2,r2,8
   10468:	e0ffff17 	ldw	r3,-4(fp)
   1046c:	1809883a 	mov	r4,r3
   10470:	e0fffd17 	ldw	r3,-12(fp)
   10474:	20c7c83a 	sub	r3,r4,r3
   10478:	10c0000d 	sth	r3,0(r2)

		data[2] = (INT16)((x8 * c2 + x7 * c6) >> s2);
   1047c:	d0a6c817 	ldw	r2,-25824(gp)
   10480:	14000104 	addi	r16,r2,4
   10484:	d0a0000b 	ldhu	r2,-32768(gp)
   10488:	10bfffcc 	andi	r2,r2,65535
   1048c:	1009883a 	mov	r4,r2
   10490:	e17ff717 	ldw	r5,-36(fp)
   10494:	00110a40 	call	110a4 <__mulsi3>
   10498:	1023883a 	mov	r17,r2
   1049c:	d0a0008b 	ldhu	r2,-32766(gp)
   104a0:	10bfffcc 	andi	r2,r2,65535
   104a4:	1009883a 	mov	r4,r2
   104a8:	e17ff917 	ldw	r5,-28(fp)
   104ac:	00110a40 	call	110a4 <__mulsi3>
   104b0:	8887883a 	add	r3,r17,r2
   104b4:	d0a0010b 	ldhu	r2,-32764(gp)
   104b8:	10bfffcc 	andi	r2,r2,65535
   104bc:	1885d83a 	sra	r2,r3,r2
   104c0:	8080000d 	sth	r2,0(r16)
		data[6] = (INT16)((x8 * c6 - x7 * c2) >> s2);
   104c4:	d0a6c817 	ldw	r2,-25824(gp)
   104c8:	14000304 	addi	r16,r2,12
   104cc:	d0a0008b 	ldhu	r2,-32766(gp)
   104d0:	10bfffcc 	andi	r2,r2,65535
   104d4:	1009883a 	mov	r4,r2
   104d8:	e17ff717 	ldw	r5,-36(fp)
   104dc:	00110a40 	call	110a4 <__mulsi3>
   104e0:	1023883a 	mov	r17,r2
   104e4:	d0a0000b 	ldhu	r2,-32768(gp)
   104e8:	10bfffcc 	andi	r2,r2,65535
   104ec:	1009883a 	mov	r4,r2
   104f0:	e17ff917 	ldw	r5,-28(fp)
   104f4:	00110a40 	call	110a4 <__mulsi3>
   104f8:	8887c83a 	sub	r3,r17,r2
   104fc:	d0a0010b 	ldhu	r2,-32764(gp)
   10500:	10bfffcc 	andi	r2,r2,65535
   10504:	1885d83a 	sra	r2,r3,r2
   10508:	8080000d 	sth	r2,0(r16)

		data[7] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s2);
   1050c:	d0a6c817 	ldw	r2,-25824(gp)
   10510:	14000384 	addi	r16,r2,14
   10514:	d0a0018b 	ldhu	r2,-32762(gp)
   10518:	10bfffcc 	andi	r2,r2,65535
   1051c:	1009883a 	mov	r4,r2
   10520:	e17ff817 	ldw	r5,-32(fp)
   10524:	00110a40 	call	110a4 <__mulsi3>
   10528:	1023883a 	mov	r17,r2
   1052c:	d0a0020b 	ldhu	r2,-32760(gp)
   10530:	10bfffcc 	andi	r2,r2,65535
   10534:	1009883a 	mov	r4,r2
   10538:	e17ffa17 	ldw	r5,-24(fp)
   1053c:	00110a40 	call	110a4 <__mulsi3>
   10540:	88a3c83a 	sub	r17,r17,r2
   10544:	d0a0028b 	ldhu	r2,-32758(gp)
   10548:	10bfffcc 	andi	r2,r2,65535
   1054c:	1009883a 	mov	r4,r2
   10550:	e17ffc17 	ldw	r5,-16(fp)
   10554:	00110a40 	call	110a4 <__mulsi3>
   10558:	88a3883a 	add	r17,r17,r2
   1055c:	d0a0030b 	ldhu	r2,-32756(gp)
   10560:	10bfffcc 	andi	r2,r2,65535
   10564:	1009883a 	mov	r4,r2
   10568:	e17ffe17 	ldw	r5,-8(fp)
   1056c:	00110a40 	call	110a4 <__mulsi3>
   10570:	8887c83a 	sub	r3,r17,r2
   10574:	d0a0010b 	ldhu	r2,-32764(gp)
   10578:	10bfffcc 	andi	r2,r2,65535
   1057c:	1885d83a 	sra	r2,r3,r2
   10580:	8080000d 	sth	r2,0(r16)
		data[5] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s2);
   10584:	d0a6c817 	ldw	r2,-25824(gp)
   10588:	14000284 	addi	r16,r2,10
   1058c:	d0a0020b 	ldhu	r2,-32760(gp)
   10590:	10bfffcc 	andi	r2,r2,65535
   10594:	1009883a 	mov	r4,r2
   10598:	e17ff817 	ldw	r5,-32(fp)
   1059c:	00110a40 	call	110a4 <__mulsi3>
   105a0:	1023883a 	mov	r17,r2
   105a4:	d0a0030b 	ldhu	r2,-32756(gp)
   105a8:	10bfffcc 	andi	r2,r2,65535
   105ac:	1009883a 	mov	r4,r2
   105b0:	e17ffa17 	ldw	r5,-24(fp)
   105b4:	00110a40 	call	110a4 <__mulsi3>
   105b8:	88a3c83a 	sub	r17,r17,r2
   105bc:	d0a0018b 	ldhu	r2,-32762(gp)
   105c0:	10bfffcc 	andi	r2,r2,65535
   105c4:	1009883a 	mov	r4,r2
   105c8:	e17ffc17 	ldw	r5,-16(fp)
   105cc:	00110a40 	call	110a4 <__mulsi3>
   105d0:	88a3883a 	add	r17,r17,r2
   105d4:	d0a0028b 	ldhu	r2,-32758(gp)
   105d8:	10bfffcc 	andi	r2,r2,65535
   105dc:	1009883a 	mov	r4,r2
   105e0:	e17ffe17 	ldw	r5,-8(fp)
   105e4:	00110a40 	call	110a4 <__mulsi3>
   105e8:	8887883a 	add	r3,r17,r2
   105ec:	d0a0010b 	ldhu	r2,-32764(gp)
   105f0:	10bfffcc 	andi	r2,r2,65535
   105f4:	1885d83a 	sra	r2,r3,r2
   105f8:	8080000d 	sth	r2,0(r16)
		data[3] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s2);
   105fc:	d0a6c817 	ldw	r2,-25824(gp)
   10600:	14000184 	addi	r16,r2,6
   10604:	d0a0028b 	ldhu	r2,-32758(gp)
   10608:	10bfffcc 	andi	r2,r2,65535
   1060c:	1009883a 	mov	r4,r2
   10610:	e17ff817 	ldw	r5,-32(fp)
   10614:	00110a40 	call	110a4 <__mulsi3>
   10618:	1023883a 	mov	r17,r2
   1061c:	d0a0018b 	ldhu	r2,-32762(gp)
   10620:	10bfffcc 	andi	r2,r2,65535
   10624:	1009883a 	mov	r4,r2
   10628:	e17ffa17 	ldw	r5,-24(fp)
   1062c:	00110a40 	call	110a4 <__mulsi3>
   10630:	88a3c83a 	sub	r17,r17,r2
   10634:	d0a0030b 	ldhu	r2,-32756(gp)
   10638:	10bfffcc 	andi	r2,r2,65535
   1063c:	1009883a 	mov	r4,r2
   10640:	e17ffc17 	ldw	r5,-16(fp)
   10644:	00110a40 	call	110a4 <__mulsi3>
   10648:	88a3c83a 	sub	r17,r17,r2
   1064c:	d0a0020b 	ldhu	r2,-32760(gp)
   10650:	10bfffcc 	andi	r2,r2,65535
   10654:	1009883a 	mov	r4,r2
   10658:	e17ffe17 	ldw	r5,-8(fp)
   1065c:	00110a40 	call	110a4 <__mulsi3>
   10660:	8887c83a 	sub	r3,r17,r2
   10664:	d0a0010b 	ldhu	r2,-32764(gp)
   10668:	10bfffcc 	andi	r2,r2,65535
   1066c:	1885d83a 	sra	r2,r3,r2
   10670:	8080000d 	sth	r2,0(r16)
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);
   10674:	d0a6c817 	ldw	r2,-25824(gp)
   10678:	14000084 	addi	r16,r2,2
   1067c:	d0a0030b 	ldhu	r2,-32756(gp)
   10680:	10bfffcc 	andi	r2,r2,65535
   10684:	1009883a 	mov	r4,r2
   10688:	e17ff817 	ldw	r5,-32(fp)
   1068c:	00110a40 	call	110a4 <__mulsi3>
   10690:	1023883a 	mov	r17,r2
   10694:	d0a0028b 	ldhu	r2,-32758(gp)
   10698:	10bfffcc 	andi	r2,r2,65535
   1069c:	1009883a 	mov	r4,r2
   106a0:	e17ffa17 	ldw	r5,-24(fp)
   106a4:	00110a40 	call	110a4 <__mulsi3>
   106a8:	88a3883a 	add	r17,r17,r2
   106ac:	d0a0020b 	ldhu	r2,-32760(gp)
   106b0:	10bfffcc 	andi	r2,r2,65535
   106b4:	1009883a 	mov	r4,r2
   106b8:	e17ffc17 	ldw	r5,-16(fp)
   106bc:	00110a40 	call	110a4 <__mulsi3>
   106c0:	88a3883a 	add	r17,r17,r2
   106c4:	d0a0018b 	ldhu	r2,-32762(gp)
   106c8:	10bfffcc 	andi	r2,r2,65535
   106cc:	1009883a 	mov	r4,r2
   106d0:	e17ffe17 	ldw	r5,-8(fp)
   106d4:	00110a40 	call	110a4 <__mulsi3>
   106d8:	8887883a 	add	r3,r17,r2
   106dc:	d0a0010b 	ldhu	r2,-32764(gp)
   106e0:	10bfffcc 	andi	r2,r2,65535
   106e4:	1885d83a 	sra	r2,r3,r2
   106e8:	8080000d 	sth	r2,0(r16)

		data += 8;
   106ec:	d0a6c817 	ldw	r2,-25824(gp)
   106f0:	10800404 	addi	r2,r2,16
   106f4:	d0a6c815 	stw	r2,-25824(gp)
	{

		data[i] = (INT16)RECV();
	}

	for (i = 8; i > 0; i--)
   106f8:	e0bff60b 	ldhu	r2,-40(fp)
   106fc:	10bfffc4 	addi	r2,r2,-1
   10700:	e0bff60d 	sth	r2,-40(fp)
   10704:	e0bff60b 	ldhu	r2,-40(fp)
   10708:	103ed11e 	bne	r2,zero,10250 <DCT+0x5c>
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);

		data += 8;
	}

	data -= 64;
   1070c:	d0a6c817 	ldw	r2,-25824(gp)
   10710:	10bfe004 	addi	r2,r2,-128
   10714:	d0a6c815 	stw	r2,-25824(gp)

	for (i = 8; i > 0; i--)
   10718:	00800204 	movi	r2,8
   1071c:	e0bff60d 	sth	r2,-40(fp)
   10720:	00013106 	br	10be8 <DCT+0x9f4>
	{
		x8 = data[0] + data[56];
   10724:	d0a6c817 	ldw	r2,-25824(gp)
   10728:	1080000b 	ldhu	r2,0(r2)
   1072c:	10ffffcc 	andi	r3,r2,65535
   10730:	18e0001c 	xori	r3,r3,32768
   10734:	18e00004 	addi	r3,r3,-32768
   10738:	d0a6c817 	ldw	r2,-25824(gp)
   1073c:	10801c04 	addi	r2,r2,112
   10740:	1080000b 	ldhu	r2,0(r2)
   10744:	10bfffcc 	andi	r2,r2,65535
   10748:	10a0001c 	xori	r2,r2,32768
   1074c:	10a00004 	addi	r2,r2,-32768
   10750:	1885883a 	add	r2,r3,r2
   10754:	e0bff715 	stw	r2,-36(fp)
		x0 = data[0] - data[56];
   10758:	d0a6c817 	ldw	r2,-25824(gp)
   1075c:	1080000b 	ldhu	r2,0(r2)
   10760:	10ffffcc 	andi	r3,r2,65535
   10764:	18e0001c 	xori	r3,r3,32768
   10768:	18e00004 	addi	r3,r3,-32768
   1076c:	d0a6c817 	ldw	r2,-25824(gp)
   10770:	10801c04 	addi	r2,r2,112
   10774:	1080000b 	ldhu	r2,0(r2)
   10778:	10bfffcc 	andi	r2,r2,65535
   1077c:	10a0001c 	xori	r2,r2,32768
   10780:	10a00004 	addi	r2,r2,-32768
   10784:	1885c83a 	sub	r2,r3,r2
   10788:	e0bff815 	stw	r2,-32(fp)

		x7 = data[8] + data[48];
   1078c:	d0a6c817 	ldw	r2,-25824(gp)
   10790:	10800404 	addi	r2,r2,16
   10794:	1080000b 	ldhu	r2,0(r2)
   10798:	10ffffcc 	andi	r3,r2,65535
   1079c:	18e0001c 	xori	r3,r3,32768
   107a0:	18e00004 	addi	r3,r3,-32768
   107a4:	d0a6c817 	ldw	r2,-25824(gp)
   107a8:	10801804 	addi	r2,r2,96
   107ac:	1080000b 	ldhu	r2,0(r2)
   107b0:	10bfffcc 	andi	r2,r2,65535
   107b4:	10a0001c 	xori	r2,r2,32768
   107b8:	10a00004 	addi	r2,r2,-32768
   107bc:	1885883a 	add	r2,r3,r2
   107c0:	e0bff915 	stw	r2,-28(fp)
		x1 = data[8] - data[48];
   107c4:	d0a6c817 	ldw	r2,-25824(gp)
   107c8:	10800404 	addi	r2,r2,16
   107cc:	1080000b 	ldhu	r2,0(r2)
   107d0:	10ffffcc 	andi	r3,r2,65535
   107d4:	18e0001c 	xori	r3,r3,32768
   107d8:	18e00004 	addi	r3,r3,-32768
   107dc:	d0a6c817 	ldw	r2,-25824(gp)
   107e0:	10801804 	addi	r2,r2,96
   107e4:	1080000b 	ldhu	r2,0(r2)
   107e8:	10bfffcc 	andi	r2,r2,65535
   107ec:	10a0001c 	xori	r2,r2,32768
   107f0:	10a00004 	addi	r2,r2,-32768
   107f4:	1885c83a 	sub	r2,r3,r2
   107f8:	e0bffa15 	stw	r2,-24(fp)

		x6 = data[16] + data[40];
   107fc:	d0a6c817 	ldw	r2,-25824(gp)
   10800:	10800804 	addi	r2,r2,32
   10804:	1080000b 	ldhu	r2,0(r2)
   10808:	10ffffcc 	andi	r3,r2,65535
   1080c:	18e0001c 	xori	r3,r3,32768
   10810:	18e00004 	addi	r3,r3,-32768
   10814:	d0a6c817 	ldw	r2,-25824(gp)
   10818:	10801404 	addi	r2,r2,80
   1081c:	1080000b 	ldhu	r2,0(r2)
   10820:	10bfffcc 	andi	r2,r2,65535
   10824:	10a0001c 	xori	r2,r2,32768
   10828:	10a00004 	addi	r2,r2,-32768
   1082c:	1885883a 	add	r2,r3,r2
   10830:	e0bffb15 	stw	r2,-20(fp)
		x2 = data[16] - data[40];
   10834:	d0a6c817 	ldw	r2,-25824(gp)
   10838:	10800804 	addi	r2,r2,32
   1083c:	1080000b 	ldhu	r2,0(r2)
   10840:	10ffffcc 	andi	r3,r2,65535
   10844:	18e0001c 	xori	r3,r3,32768
   10848:	18e00004 	addi	r3,r3,-32768
   1084c:	d0a6c817 	ldw	r2,-25824(gp)
   10850:	10801404 	addi	r2,r2,80
   10854:	1080000b 	ldhu	r2,0(r2)
   10858:	10bfffcc 	andi	r2,r2,65535
   1085c:	10a0001c 	xori	r2,r2,32768
   10860:	10a00004 	addi	r2,r2,-32768
   10864:	1885c83a 	sub	r2,r3,r2
   10868:	e0bffc15 	stw	r2,-16(fp)

		x5 = data[24] + data[32];
   1086c:	d0a6c817 	ldw	r2,-25824(gp)
   10870:	10800c04 	addi	r2,r2,48
   10874:	1080000b 	ldhu	r2,0(r2)
   10878:	10ffffcc 	andi	r3,r2,65535
   1087c:	18e0001c 	xori	r3,r3,32768
   10880:	18e00004 	addi	r3,r3,-32768
   10884:	d0a6c817 	ldw	r2,-25824(gp)
   10888:	10801004 	addi	r2,r2,64
   1088c:	1080000b 	ldhu	r2,0(r2)
   10890:	10bfffcc 	andi	r2,r2,65535
   10894:	10a0001c 	xori	r2,r2,32768
   10898:	10a00004 	addi	r2,r2,-32768
   1089c:	1885883a 	add	r2,r3,r2
   108a0:	e0bffd15 	stw	r2,-12(fp)
		x3 = data[24] - data[32];
   108a4:	d0a6c817 	ldw	r2,-25824(gp)
   108a8:	10800c04 	addi	r2,r2,48
   108ac:	1080000b 	ldhu	r2,0(r2)
   108b0:	10ffffcc 	andi	r3,r2,65535
   108b4:	18e0001c 	xori	r3,r3,32768
   108b8:	18e00004 	addi	r3,r3,-32768
   108bc:	d0a6c817 	ldw	r2,-25824(gp)
   108c0:	10801004 	addi	r2,r2,64
   108c4:	1080000b 	ldhu	r2,0(r2)
   108c8:	10bfffcc 	andi	r2,r2,65535
   108cc:	10a0001c 	xori	r2,r2,32768
   108d0:	10a00004 	addi	r2,r2,-32768
   108d4:	1885c83a 	sub	r2,r3,r2
   108d8:	e0bffe15 	stw	r2,-8(fp)

		x4 = x8 + x5;
   108dc:	e0fff717 	ldw	r3,-36(fp)
   108e0:	e0bffd17 	ldw	r2,-12(fp)
   108e4:	1885883a 	add	r2,r3,r2
   108e8:	e0bfff15 	stw	r2,-4(fp)
		x8 -= x5;
   108ec:	e0fff717 	ldw	r3,-36(fp)
   108f0:	e0bffd17 	ldw	r2,-12(fp)
   108f4:	1885c83a 	sub	r2,r3,r2
   108f8:	e0bff715 	stw	r2,-36(fp)

		x5 = x7 + x6;
   108fc:	e0fff917 	ldw	r3,-28(fp)
   10900:	e0bffb17 	ldw	r2,-20(fp)
   10904:	1885883a 	add	r2,r3,r2
   10908:	e0bffd15 	stw	r2,-12(fp)
		x7 -= x6;
   1090c:	e0fff917 	ldw	r3,-28(fp)
   10910:	e0bffb17 	ldw	r2,-20(fp)
   10914:	1885c83a 	sub	r2,r3,r2
   10918:	e0bff915 	stw	r2,-28(fp)

		data[0] = (INT16)((x4 + x5) >> s1);
   1091c:	d0a6c817 	ldw	r2,-25824(gp)
   10920:	e13fff17 	ldw	r4,-4(fp)
   10924:	e0fffd17 	ldw	r3,-12(fp)
   10928:	20c9883a 	add	r4,r4,r3
   1092c:	d0e0038b 	ldhu	r3,-32754(gp)
   10930:	18ffffcc 	andi	r3,r3,65535
   10934:	20c7d83a 	sra	r3,r4,r3
   10938:	10c0000d 	sth	r3,0(r2)
		data[32] = (INT16)((x4 - x5) >> s1);
   1093c:	d0a6c817 	ldw	r2,-25824(gp)
   10940:	10801004 	addi	r2,r2,64
   10944:	e13fff17 	ldw	r4,-4(fp)
   10948:	e0fffd17 	ldw	r3,-12(fp)
   1094c:	20c9c83a 	sub	r4,r4,r3
   10950:	d0e0038b 	ldhu	r3,-32754(gp)
   10954:	18ffffcc 	andi	r3,r3,65535
   10958:	20c7d83a 	sra	r3,r4,r3
   1095c:	10c0000d 	sth	r3,0(r2)

		data[16] = (INT16)((x8 * c2 + x7 * c6) >> s3);
   10960:	d0a6c817 	ldw	r2,-25824(gp)
   10964:	14000804 	addi	r16,r2,32
   10968:	d0a0000b 	ldhu	r2,-32768(gp)
   1096c:	10bfffcc 	andi	r2,r2,65535
   10970:	1009883a 	mov	r4,r2
   10974:	e17ff717 	ldw	r5,-36(fp)
   10978:	00110a40 	call	110a4 <__mulsi3>
   1097c:	1023883a 	mov	r17,r2
   10980:	d0a0008b 	ldhu	r2,-32766(gp)
   10984:	10bfffcc 	andi	r2,r2,65535
   10988:	1009883a 	mov	r4,r2
   1098c:	e17ff917 	ldw	r5,-28(fp)
   10990:	00110a40 	call	110a4 <__mulsi3>
   10994:	8887883a 	add	r3,r17,r2
   10998:	d0a0040b 	ldhu	r2,-32752(gp)
   1099c:	10bfffcc 	andi	r2,r2,65535
   109a0:	1885d83a 	sra	r2,r3,r2
   109a4:	8080000d 	sth	r2,0(r16)
		data[48] = (INT16)((x8 * c6 - x7 * c2) >> s3);
   109a8:	d0a6c817 	ldw	r2,-25824(gp)
   109ac:	14001804 	addi	r16,r2,96
   109b0:	d0a0008b 	ldhu	r2,-32766(gp)
   109b4:	10bfffcc 	andi	r2,r2,65535
   109b8:	1009883a 	mov	r4,r2
   109bc:	e17ff717 	ldw	r5,-36(fp)
   109c0:	00110a40 	call	110a4 <__mulsi3>
   109c4:	1023883a 	mov	r17,r2
   109c8:	d0a0000b 	ldhu	r2,-32768(gp)
   109cc:	10bfffcc 	andi	r2,r2,65535
   109d0:	1009883a 	mov	r4,r2
   109d4:	e17ff917 	ldw	r5,-28(fp)
   109d8:	00110a40 	call	110a4 <__mulsi3>
   109dc:	8887c83a 	sub	r3,r17,r2
   109e0:	d0a0040b 	ldhu	r2,-32752(gp)
   109e4:	10bfffcc 	andi	r2,r2,65535
   109e8:	1885d83a 	sra	r2,r3,r2
   109ec:	8080000d 	sth	r2,0(r16)

		data[56] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s3);
   109f0:	d0a6c817 	ldw	r2,-25824(gp)
   109f4:	14001c04 	addi	r16,r2,112
   109f8:	d0a0018b 	ldhu	r2,-32762(gp)
   109fc:	10bfffcc 	andi	r2,r2,65535
   10a00:	1009883a 	mov	r4,r2
   10a04:	e17ff817 	ldw	r5,-32(fp)
   10a08:	00110a40 	call	110a4 <__mulsi3>
   10a0c:	1023883a 	mov	r17,r2
   10a10:	d0a0020b 	ldhu	r2,-32760(gp)
   10a14:	10bfffcc 	andi	r2,r2,65535
   10a18:	1009883a 	mov	r4,r2
   10a1c:	e17ffa17 	ldw	r5,-24(fp)
   10a20:	00110a40 	call	110a4 <__mulsi3>
   10a24:	88a3c83a 	sub	r17,r17,r2
   10a28:	d0a0028b 	ldhu	r2,-32758(gp)
   10a2c:	10bfffcc 	andi	r2,r2,65535
   10a30:	1009883a 	mov	r4,r2
   10a34:	e17ffc17 	ldw	r5,-16(fp)
   10a38:	00110a40 	call	110a4 <__mulsi3>
   10a3c:	88a3883a 	add	r17,r17,r2
   10a40:	d0a0030b 	ldhu	r2,-32756(gp)
   10a44:	10bfffcc 	andi	r2,r2,65535
   10a48:	1009883a 	mov	r4,r2
   10a4c:	e17ffe17 	ldw	r5,-8(fp)
   10a50:	00110a40 	call	110a4 <__mulsi3>
   10a54:	8887c83a 	sub	r3,r17,r2
   10a58:	d0a0040b 	ldhu	r2,-32752(gp)
   10a5c:	10bfffcc 	andi	r2,r2,65535
   10a60:	1885d83a 	sra	r2,r3,r2
   10a64:	8080000d 	sth	r2,0(r16)
		data[40] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s3);
   10a68:	d0a6c817 	ldw	r2,-25824(gp)
   10a6c:	14001404 	addi	r16,r2,80
   10a70:	d0a0020b 	ldhu	r2,-32760(gp)
   10a74:	10bfffcc 	andi	r2,r2,65535
   10a78:	1009883a 	mov	r4,r2
   10a7c:	e17ff817 	ldw	r5,-32(fp)
   10a80:	00110a40 	call	110a4 <__mulsi3>
   10a84:	1023883a 	mov	r17,r2
   10a88:	d0a0030b 	ldhu	r2,-32756(gp)
   10a8c:	10bfffcc 	andi	r2,r2,65535
   10a90:	1009883a 	mov	r4,r2
   10a94:	e17ffa17 	ldw	r5,-24(fp)
   10a98:	00110a40 	call	110a4 <__mulsi3>
   10a9c:	88a3c83a 	sub	r17,r17,r2
   10aa0:	d0a0018b 	ldhu	r2,-32762(gp)
   10aa4:	10bfffcc 	andi	r2,r2,65535
   10aa8:	1009883a 	mov	r4,r2
   10aac:	e17ffc17 	ldw	r5,-16(fp)
   10ab0:	00110a40 	call	110a4 <__mulsi3>
   10ab4:	88a3883a 	add	r17,r17,r2
   10ab8:	d0a0028b 	ldhu	r2,-32758(gp)
   10abc:	10bfffcc 	andi	r2,r2,65535
   10ac0:	1009883a 	mov	r4,r2
   10ac4:	e17ffe17 	ldw	r5,-8(fp)
   10ac8:	00110a40 	call	110a4 <__mulsi3>
   10acc:	8887883a 	add	r3,r17,r2
   10ad0:	d0a0040b 	ldhu	r2,-32752(gp)
   10ad4:	10bfffcc 	andi	r2,r2,65535
   10ad8:	1885d83a 	sra	r2,r3,r2
   10adc:	8080000d 	sth	r2,0(r16)
		data[24] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s3);
   10ae0:	d0a6c817 	ldw	r2,-25824(gp)
   10ae4:	14000c04 	addi	r16,r2,48
   10ae8:	d0a0028b 	ldhu	r2,-32758(gp)
   10aec:	10bfffcc 	andi	r2,r2,65535
   10af0:	1009883a 	mov	r4,r2
   10af4:	e17ff817 	ldw	r5,-32(fp)
   10af8:	00110a40 	call	110a4 <__mulsi3>
   10afc:	1023883a 	mov	r17,r2
   10b00:	d0a0018b 	ldhu	r2,-32762(gp)
   10b04:	10bfffcc 	andi	r2,r2,65535
   10b08:	1009883a 	mov	r4,r2
   10b0c:	e17ffa17 	ldw	r5,-24(fp)
   10b10:	00110a40 	call	110a4 <__mulsi3>
   10b14:	88a3c83a 	sub	r17,r17,r2
   10b18:	d0a0030b 	ldhu	r2,-32756(gp)
   10b1c:	10bfffcc 	andi	r2,r2,65535
   10b20:	1009883a 	mov	r4,r2
   10b24:	e17ffc17 	ldw	r5,-16(fp)
   10b28:	00110a40 	call	110a4 <__mulsi3>
   10b2c:	88a3c83a 	sub	r17,r17,r2
   10b30:	d0a0020b 	ldhu	r2,-32760(gp)
   10b34:	10bfffcc 	andi	r2,r2,65535
   10b38:	1009883a 	mov	r4,r2
   10b3c:	e17ffe17 	ldw	r5,-8(fp)
   10b40:	00110a40 	call	110a4 <__mulsi3>
   10b44:	8887c83a 	sub	r3,r17,r2
   10b48:	d0a0040b 	ldhu	r2,-32752(gp)
   10b4c:	10bfffcc 	andi	r2,r2,65535
   10b50:	1885d83a 	sra	r2,r3,r2
   10b54:	8080000d 	sth	r2,0(r16)
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);
   10b58:	d0a6c817 	ldw	r2,-25824(gp)
   10b5c:	14000404 	addi	r16,r2,16
   10b60:	d0a0030b 	ldhu	r2,-32756(gp)
   10b64:	10bfffcc 	andi	r2,r2,65535
   10b68:	1009883a 	mov	r4,r2
   10b6c:	e17ff817 	ldw	r5,-32(fp)
   10b70:	00110a40 	call	110a4 <__mulsi3>
   10b74:	1023883a 	mov	r17,r2
   10b78:	d0a0028b 	ldhu	r2,-32758(gp)
   10b7c:	10bfffcc 	andi	r2,r2,65535
   10b80:	1009883a 	mov	r4,r2
   10b84:	e17ffa17 	ldw	r5,-24(fp)
   10b88:	00110a40 	call	110a4 <__mulsi3>
   10b8c:	88a3883a 	add	r17,r17,r2
   10b90:	d0a0020b 	ldhu	r2,-32760(gp)
   10b94:	10bfffcc 	andi	r2,r2,65535
   10b98:	1009883a 	mov	r4,r2
   10b9c:	e17ffc17 	ldw	r5,-16(fp)
   10ba0:	00110a40 	call	110a4 <__mulsi3>
   10ba4:	88a3883a 	add	r17,r17,r2
   10ba8:	d0a0018b 	ldhu	r2,-32762(gp)
   10bac:	10bfffcc 	andi	r2,r2,65535
   10bb0:	1009883a 	mov	r4,r2
   10bb4:	e17ffe17 	ldw	r5,-8(fp)
   10bb8:	00110a40 	call	110a4 <__mulsi3>
   10bbc:	8887883a 	add	r3,r17,r2
   10bc0:	d0a0040b 	ldhu	r2,-32752(gp)
   10bc4:	10bfffcc 	andi	r2,r2,65535
   10bc8:	1885d83a 	sra	r2,r3,r2
   10bcc:	8080000d 	sth	r2,0(r16)

		data++;
   10bd0:	d0a6c817 	ldw	r2,-25824(gp)
   10bd4:	10800084 	addi	r2,r2,2
   10bd8:	d0a6c815 	stw	r2,-25824(gp)
		data += 8;
	}

	data -= 64;

	for (i = 8; i > 0; i--)
   10bdc:	e0bff60b 	ldhu	r2,-40(fp)
   10be0:	10bfffc4 	addi	r2,r2,-1
   10be4:	e0bff60d 	sth	r2,-40(fp)
   10be8:	e0bff60b 	ldhu	r2,-40(fp)
   10bec:	103ecd1e 	bne	r2,zero,10724 <DCT+0x530>
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);

		data++;
	}

	data -= 8;
   10bf0:	d0a6c817 	ldw	r2,-25824(gp)
   10bf4:	10bffc04 	addi	r2,r2,-16
   10bf8:	d0a6c815 	stw	r2,-25824(gp)

	/* write out to queue */
	for (i = 0; i < 64; i++)
   10bfc:	e03ff60d 	sth	zero,-40(fp)
   10c00:	00000d06 	br	10c38 <DCT+0xa44>
	{
		SEND(data[i]);
   10c04:	d0e6c817 	ldw	r3,-25824(gp)
   10c08:	e0bff60b 	ldhu	r2,-40(fp)
   10c0c:	1085883a 	add	r2,r2,r2
   10c10:	1885883a 	add	r2,r3,r2
   10c14:	1080000b 	ldhu	r2,0(r2)
   10c18:	10bfffcc 	andi	r2,r2,65535
   10c1c:	10a0001c 	xori	r2,r2,32768
   10c20:	10a00004 	addi	r2,r2,-32768
   10c24:	1009883a 	mov	r4,r2
   10c28:	0010dd40 	call	10dd4 <SEND>
	}

	data -= 8;

	/* write out to queue */
	for (i = 0; i < 64; i++)
   10c2c:	e0bff60b 	ldhu	r2,-40(fp)
   10c30:	10800044 	addi	r2,r2,1
   10c34:	e0bff60d 	sth	r2,-40(fp)
   10c38:	e0bff60b 	ldhu	r2,-40(fp)
   10c3c:	10801030 	cmpltui	r2,r2,64
   10c40:	103ff01e 	bne	r2,zero,10c04 <DCT+0xa10>
	{
		SEND(data[i]);
	}
}
   10c44:	e037883a 	mov	sp,fp
   10c48:	dfc00317 	ldw	ra,12(sp)
   10c4c:	df000217 	ldw	fp,8(sp)
   10c50:	dc400117 	ldw	r17,4(sp)
   10c54:	dc000017 	ldw	r16,0(sp)
   10c58:	dec00404 	addi	sp,sp,16
   10c5c:	f800283a 	ret

00010c60 <main>:


// TODO: Rate limited here manually. Will have to change for hardware implementation.
int main(void)
{
   10c60:	defffe04 	addi	sp,sp,-8
   10c64:	dfc00115 	stw	ra,4(sp)
   10c68:	df000015 	stw	fp,0(sp)
   10c6c:	d839883a 	mov	fp,sp
	data = (INT16 *)malloc(sizeof(INT16) * 64);
   10c70:	01002004 	movi	r4,128
   10c74:	00110cc0 	call	110cc <malloc>
   10c78:	d0a6c815 	stw	r2,-25824(gp)

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	 while (1)
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		DCT();
   10c7c:	00101f40 	call	101f4 <DCT>
		/* changed by haris */
		DCT();
   10c80:	00101f40 	call	101f4 <DCT>
		DCT();
   10c84:	00101f40 	call	101f4 <DCT>
	}
   10c88:	003ffc06 	br	10c7c <main+0x1c>

00010c8c <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   10c8c:	defffa04 	addi	sp,sp,-24
   10c90:	dfc00515 	stw	ra,20(sp)
   10c94:	df000415 	stw	fp,16(sp)
   10c98:	df000404 	addi	fp,sp,16
   10c9c:	e13ffc15 	stw	r4,-16(fp)
   10ca0:	e17ffd15 	stw	r5,-12(fp)
   10ca4:	e1bffe15 	stw	r6,-8(fp)
   10ca8:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   10cac:	0001883a 	nop
   10cb0:	e0bffe17 	ldw	r2,-8(fp)
   10cb4:	1009883a 	mov	r4,r2
   10cb8:	01400044 	movi	r5,1
   10cbc:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   10cc0:	103ffb1e 	bne	r2,zero,10cb0 <enqueueINT32+0x24>
	{}

    if (INIT_USAGE_ENQ == 0){
   10cc4:	d0a6c917 	ldw	r2,-25820(gp)
   10cc8:	1000051e 	bne	r2,zero,10ce0 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   10ccc:	00800044 	movi	r2,1
   10cd0:	d0a6c915 	stw	r2,-25820(gp)
        printf("First time using enqueueINT32\n");
   10cd4:	01000074 	movhi	r4,1
   10cd8:	211a3304 	addi	r4,r4,26828
   10cdc:	00118fc0 	call	118fc <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   10ce0:	e0bffc17 	ldw	r2,-16(fp)
   10ce4:	1009883a 	mov	r4,r2
   10ce8:	e0bffe17 	ldw	r2,-8(fp)
   10cec:	1007883a 	mov	r3,r2
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	180b883a 	mov	r5,r3
   10cf8:	100d883a 	mov	r6,r2
   10cfc:	00149cc0 	call	149cc <altera_avalon_fifo_write_fifo>
}
   10d00:	e037883a 	mov	sp,fp
   10d04:	dfc00117 	ldw	ra,4(sp)
   10d08:	df000017 	ldw	fp,0(sp)
   10d0c:	dec00204 	addi	sp,sp,8
   10d10:	f800283a 	ret

00010d14 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   10d14:	defffa04 	addi	sp,sp,-24
   10d18:	dfc00515 	stw	ra,20(sp)
   10d1c:	df000415 	stw	fp,16(sp)
   10d20:	df000404 	addi	fp,sp,16
   10d24:	e13ffd15 	stw	r4,-12(fp)
   10d28:	e17ffe15 	stw	r5,-8(fp)
   10d2c:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   10d30:	0001883a 	nop
   10d34:	e0bfff17 	ldw	r2,-4(fp)
   10d38:	1009883a 	mov	r4,r2
   10d3c:	01400084 	movi	r5,2
   10d40:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   10d44:	103ffb1e 	bne	r2,zero,10d34 <dequeueINT32+0x20>
	{}

    if (INIT_USAGE_DEQ == 0){
   10d48:	d0a6ca17 	ldw	r2,-25816(gp)
   10d4c:	1000051e 	bne	r2,zero,10d64 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   10d50:	00800044 	movi	r2,1
   10d54:	d0a6ca15 	stw	r2,-25816(gp)
        printf("First time using dequeueINT32\n");
   10d58:	01000074 	movhi	r4,1
   10d5c:	211a3b04 	addi	r4,r4,26860
   10d60:	00118fc0 	call	118fc <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   10d64:	e0bffe17 	ldw	r2,-8(fp)
   10d68:	1007883a 	mov	r3,r2
   10d6c:	e0bfff17 	ldw	r2,-4(fp)
   10d70:	1809883a 	mov	r4,r3
   10d74:	100b883a 	mov	r5,r2
   10d78:	0014a900 	call	14a90 <altera_avalon_fifo_read_fifo>
   10d7c:	e0bffc15 	stw	r2,-16(fp)

	return data;
   10d80:	e0bffc17 	ldw	r2,-16(fp)
}
   10d84:	e037883a 	mov	sp,fp
   10d88:	dfc00117 	ldw	ra,4(sp)
   10d8c:	df000017 	ldw	fp,0(sp)
   10d90:	dec00204 	addi	sp,sp,8
   10d94:	f800283a 	ret

00010d98 <RECV>:
#include "q_mem_obj_def.h"

void printInteger(int n);

int RECV()
{
   10d98:	defffe04 	addi	sp,sp,-8
   10d9c:	dfc00115 	stw	ra,4(sp)
   10da0:	df000015 	stw	fp,0(sp)
   10da4:	d839883a 	mov	fp,sp

    return dequeueINT32(q1b);
   10da8:	00800074 	movhi	r2,1
   10dac:	109a6404 	addi	r2,r2,27024
   10db0:	11000017 	ldw	r4,0(r2)
   10db4:	11400117 	ldw	r5,4(r2)
   10db8:	11800217 	ldw	r6,8(r2)
   10dbc:	0010d140 	call	10d14 <dequeueINT32>
}
   10dc0:	e037883a 	mov	sp,fp
   10dc4:	dfc00117 	ldw	ra,4(sp)
   10dc8:	df000017 	ldw	fp,0(sp)
   10dcc:	dec00204 	addi	sp,sp,8
   10dd0:	f800283a 	ret

00010dd4 <SEND>:

void SEND(int data)
{
   10dd4:	defffd04 	addi	sp,sp,-12
   10dd8:	dfc00215 	stw	ra,8(sp)
   10ddc:	df000115 	stw	fp,4(sp)
   10de0:	df000104 	addi	fp,sp,4
   10de4:	e13fff15 	stw	r4,-4(fp)
//	printInteger(data);
	enqueueINT32(q1c, data);
   10de8:	00800074 	movhi	r2,1
   10dec:	109a6704 	addi	r2,r2,27036
   10df0:	11000017 	ldw	r4,0(r2)
   10df4:	11400117 	ldw	r5,4(r2)
   10df8:	11800217 	ldw	r6,8(r2)
   10dfc:	e1ffff17 	ldw	r7,-4(fp)
   10e00:	0010c8c0 	call	10c8c <enqueueINT32>
}
   10e04:	e037883a 	mov	sp,fp
   10e08:	dfc00117 	ldw	ra,4(sp)
   10e0c:	df000017 	ldw	fp,0(sp)
   10e10:	dec00204 	addi	sp,sp,8
   10e14:	f800283a 	ret

00010e18 <printInteger>:

void printInteger(int n) {
   10e18:	defff304 	addi	sp,sp,-52
   10e1c:	dfc00c15 	stw	ra,48(sp)
   10e20:	df000b15 	stw	fp,44(sp)
   10e24:	df000b04 	addi	fp,sp,44
   10e28:	e13fff15 	stw	r4,-4(fp)
    char buffer[20];
    int i = 0, sign;
   10e2c:	e03ff515 	stw	zero,-44(fp)

    if ((sign = n) < 0)  // Record sign
   10e30:	e0bfff17 	ldw	r2,-4(fp)
   10e34:	e0bff815 	stw	r2,-32(fp)
   10e38:	e0bff817 	ldw	r2,-32(fp)
   10e3c:	1000030e 	bge	r2,zero,10e4c <printInteger+0x34>
        n = -n;          // Make n positive
   10e40:	e0bfff17 	ldw	r2,-4(fp)
   10e44:	0085c83a 	sub	r2,zero,r2
   10e48:	e0bfff15 	stw	r2,-4(fp)

    do {  // Generate digits in reverse order
        buffer[i++] = n % 10 + '0';  // Get next digit
   10e4c:	e0bfff17 	ldw	r2,-4(fp)
   10e50:	1009883a 	mov	r4,r2
   10e54:	01400284 	movi	r5,10
   10e58:	00110380 	call	11038 <__modsi3>
   10e5c:	10800c04 	addi	r2,r2,48
   10e60:	1007883a 	mov	r3,r2
   10e64:	e13ff944 	addi	r4,fp,-27
   10e68:	e0bff517 	ldw	r2,-44(fp)
   10e6c:	2085883a 	add	r2,r4,r2
   10e70:	10c00005 	stb	r3,0(r2)
   10e74:	e0bff517 	ldw	r2,-44(fp)
   10e78:	10800044 	addi	r2,r2,1
   10e7c:	e0bff515 	stw	r2,-44(fp)
    } while ((n /= 10) > 0);         // Delete it
   10e80:	e0bfff17 	ldw	r2,-4(fp)
   10e84:	1009883a 	mov	r4,r2
   10e88:	01400284 	movi	r5,10
   10e8c:	0010fe80 	call	10fe8 <__divsi3>
   10e90:	e0bfff15 	stw	r2,-4(fp)
   10e94:	e0bfff17 	ldw	r2,-4(fp)
   10e98:	00bfec16 	blt	zero,r2,10e4c <printInteger+0x34>

    if (sign < 0)
   10e9c:	e0bff817 	ldw	r2,-32(fp)
   10ea0:	1000080e 	bge	r2,zero,10ec4 <printInteger+0xac>
        buffer[i++] = '-';
   10ea4:	e0fff944 	addi	r3,fp,-27
   10ea8:	e0bff517 	ldw	r2,-44(fp)
   10eac:	1885883a 	add	r2,r3,r2
   10eb0:	00c00b44 	movi	r3,45
   10eb4:	10c00005 	stb	r3,0(r2)
   10eb8:	e0bff517 	ldw	r2,-44(fp)
   10ebc:	10800044 	addi	r2,r2,1
   10ec0:	e0bff515 	stw	r2,-44(fp)

    buffer[i] = '\0';
   10ec4:	e0fff944 	addi	r3,fp,-27
   10ec8:	e0bff517 	ldw	r2,-44(fp)
   10ecc:	1885883a 	add	r2,r3,r2
   10ed0:	10000005 	stb	zero,0(r2)

    // Reverse the string
    int start = 0, end = i - 1;
   10ed4:	e03ff615 	stw	zero,-40(fp)
   10ed8:	e0bff517 	ldw	r2,-44(fp)
   10edc:	10bfffc4 	addi	r2,r2,-1
   10ee0:	e0bff715 	stw	r2,-36(fp)
    char temp;
    while (start < end) {
   10ee4:	00001806 	br	10f48 <printInteger+0x130>
        temp = buffer[start];
   10ee8:	e0fff944 	addi	r3,fp,-27
   10eec:	e0bff617 	ldw	r2,-40(fp)
   10ef0:	1885883a 	add	r2,r3,r2
   10ef4:	10800003 	ldbu	r2,0(r2)
   10ef8:	e0bff905 	stb	r2,-28(fp)
        buffer[start] = buffer[end];
   10efc:	e0fff944 	addi	r3,fp,-27
   10f00:	e0bff717 	ldw	r2,-36(fp)
   10f04:	1885883a 	add	r2,r3,r2
   10f08:	10c00003 	ldbu	r3,0(r2)
   10f0c:	e13ff944 	addi	r4,fp,-27
   10f10:	e0bff617 	ldw	r2,-40(fp)
   10f14:	2085883a 	add	r2,r4,r2
   10f18:	10c00005 	stb	r3,0(r2)
        buffer[end] = temp;
   10f1c:	e0fff944 	addi	r3,fp,-27
   10f20:	e0bff717 	ldw	r2,-36(fp)
   10f24:	1885883a 	add	r2,r3,r2
   10f28:	e0fff903 	ldbu	r3,-28(fp)
   10f2c:	10c00005 	stb	r3,0(r2)
        start++;
   10f30:	e0bff617 	ldw	r2,-40(fp)
   10f34:	10800044 	addi	r2,r2,1
   10f38:	e0bff615 	stw	r2,-40(fp)
        end--;
   10f3c:	e0bff717 	ldw	r2,-36(fp)
   10f40:	10bfffc4 	addi	r2,r2,-1
   10f44:	e0bff715 	stw	r2,-36(fp)
    buffer[i] = '\0';

    // Reverse the string
    int start = 0, end = i - 1;
    char temp;
    while (start < end) {
   10f48:	e0fff617 	ldw	r3,-40(fp)
   10f4c:	e0bff717 	ldw	r2,-36(fp)
   10f50:	18bfe516 	blt	r3,r2,10ee8 <printInteger+0xd0>
        buffer[end] = temp;
        start++;
        end--;
    }

    puts(buffer);  // Print string to stdout followed by a newline
   10f54:	e0bff944 	addi	r2,fp,-27
   10f58:	1009883a 	mov	r4,r2
   10f5c:	00118fc0 	call	118fc <puts>
}
   10f60:	e037883a 	mov	sp,fp
   10f64:	dfc00117 	ldw	ra,4(sp)
   10f68:	df000017 	ldw	fp,0(sp)
   10f6c:	dec00204 	addi	sp,sp,8
   10f70:	f800283a 	ret

00010f74 <udivmodsi4>:
   10f74:	2005883a 	mov	r2,r4
   10f78:	2900182e 	bgeu	r5,r4,10fdc <udivmodsi4+0x68>
   10f7c:	28001716 	blt	r5,zero,10fdc <udivmodsi4+0x68>
   10f80:	01000804 	movi	r4,32
   10f84:	00c00044 	movi	r3,1
   10f88:	00000206 	br	10f94 <udivmodsi4+0x20>
   10f8c:	20001126 	beq	r4,zero,10fd4 <udivmodsi4+0x60>
   10f90:	28000516 	blt	r5,zero,10fa8 <udivmodsi4+0x34>
   10f94:	294b883a 	add	r5,r5,r5
   10f98:	213fffc4 	addi	r4,r4,-1
   10f9c:	18c7883a 	add	r3,r3,r3
   10fa0:	28bffa36 	bltu	r5,r2,10f8c <udivmodsi4+0x18>
   10fa4:	18000b26 	beq	r3,zero,10fd4 <udivmodsi4+0x60>
   10fa8:	0009883a 	mov	r4,zero
   10fac:	11400236 	bltu	r2,r5,10fb8 <udivmodsi4+0x44>
   10fb0:	1145c83a 	sub	r2,r2,r5
   10fb4:	20c8b03a 	or	r4,r4,r3
   10fb8:	1806d07a 	srli	r3,r3,1
   10fbc:	280ad07a 	srli	r5,r5,1
   10fc0:	183ffa1e 	bne	r3,zero,10fac <udivmodsi4+0x38>
   10fc4:	3000021e 	bne	r6,zero,10fd0 <udivmodsi4+0x5c>
   10fc8:	2005883a 	mov	r2,r4
   10fcc:	f800283a 	ret
   10fd0:	f800283a 	ret
   10fd4:	0009883a 	mov	r4,zero
   10fd8:	003ffa06 	br	10fc4 <udivmodsi4+0x50>
   10fdc:	00c00044 	movi	r3,1
   10fe0:	0009883a 	mov	r4,zero
   10fe4:	003ff106 	br	10fac <udivmodsi4+0x38>

00010fe8 <__divsi3>:
   10fe8:	defffe04 	addi	sp,sp,-8
   10fec:	dfc00115 	stw	ra,4(sp)
   10ff0:	dc000015 	stw	r16,0(sp)
   10ff4:	20000a16 	blt	r4,zero,11020 <__divsi3+0x38>
   10ff8:	0021883a 	mov	r16,zero
   10ffc:	28000b16 	blt	r5,zero,1102c <__divsi3+0x44>
   11000:	000d883a 	mov	r6,zero
   11004:	0010f740 	call	10f74 <udivmodsi4>
   11008:	80000126 	beq	r16,zero,11010 <__divsi3+0x28>
   1100c:	0085c83a 	sub	r2,zero,r2
   11010:	dfc00117 	ldw	ra,4(sp)
   11014:	dc000017 	ldw	r16,0(sp)
   11018:	dec00204 	addi	sp,sp,8
   1101c:	f800283a 	ret
   11020:	0109c83a 	sub	r4,zero,r4
   11024:	04000044 	movi	r16,1
   11028:	283ff50e 	bge	r5,zero,11000 <__divsi3+0x18>
   1102c:	014bc83a 	sub	r5,zero,r5
   11030:	8400005c 	xori	r16,r16,1
   11034:	003ff206 	br	11000 <__divsi3+0x18>

00011038 <__modsi3>:
   11038:	deffff04 	addi	sp,sp,-4
   1103c:	dfc00015 	stw	ra,0(sp)
   11040:	20000516 	blt	r4,zero,11058 <__modsi3+0x20>
   11044:	28000c16 	blt	r5,zero,11078 <__modsi3+0x40>
   11048:	01800044 	movi	r6,1
   1104c:	dfc00017 	ldw	ra,0(sp)
   11050:	dec00104 	addi	sp,sp,4
   11054:	0010f741 	jmpi	10f74 <udivmodsi4>
   11058:	0109c83a 	sub	r4,zero,r4
   1105c:	28000b16 	blt	r5,zero,1108c <__modsi3+0x54>
   11060:	01800044 	movi	r6,1
   11064:	0010f740 	call	10f74 <udivmodsi4>
   11068:	0085c83a 	sub	r2,zero,r2
   1106c:	dfc00017 	ldw	ra,0(sp)
   11070:	dec00104 	addi	sp,sp,4
   11074:	f800283a 	ret
   11078:	014bc83a 	sub	r5,zero,r5
   1107c:	01800044 	movi	r6,1
   11080:	dfc00017 	ldw	ra,0(sp)
   11084:	dec00104 	addi	sp,sp,4
   11088:	0010f741 	jmpi	10f74 <udivmodsi4>
   1108c:	014bc83a 	sub	r5,zero,r5
   11090:	003ff306 	br	11060 <__modsi3+0x28>

00011094 <__udivsi3>:
   11094:	000d883a 	mov	r6,zero
   11098:	0010f741 	jmpi	10f74 <udivmodsi4>

0001109c <__umodsi3>:
   1109c:	01800044 	movi	r6,1
   110a0:	0010f741 	jmpi	10f74 <udivmodsi4>

000110a4 <__mulsi3>:
   110a4:	0005883a 	mov	r2,zero
   110a8:	20000726 	beq	r4,zero,110c8 <__mulsi3+0x24>
   110ac:	20c0004c 	andi	r3,r4,1
   110b0:	2008d07a 	srli	r4,r4,1
   110b4:	18000126 	beq	r3,zero,110bc <__mulsi3+0x18>
   110b8:	1145883a 	add	r2,r2,r5
   110bc:	294b883a 	add	r5,r5,r5
   110c0:	203ffa1e 	bne	r4,zero,110ac <__mulsi3+0x8>
   110c4:	f800283a 	ret
   110c8:	f800283a 	ret

000110cc <malloc>:
   110cc:	008000b4 	movhi	r2,2
   110d0:	10a0fc04 	addi	r2,r2,-31760
   110d4:	200b883a 	mov	r5,r4
   110d8:	11000017 	ldw	r4,0(r2)
   110dc:	00110f41 	jmpi	110f4 <_malloc_r>

000110e0 <free>:
   110e0:	008000b4 	movhi	r2,2
   110e4:	10a0fc04 	addi	r2,r2,-31760
   110e8:	200b883a 	mov	r5,r4
   110ec:	11000017 	ldw	r4,0(r2)
   110f0:	0011b3c1 	jmpi	11b3c <_free_r>

000110f4 <_malloc_r>:
   110f4:	defff604 	addi	sp,sp,-40
   110f8:	dc800215 	stw	r18,8(sp)
   110fc:	dfc00915 	stw	ra,36(sp)
   11100:	df000815 	stw	fp,32(sp)
   11104:	ddc00715 	stw	r23,28(sp)
   11108:	dd800615 	stw	r22,24(sp)
   1110c:	dd400515 	stw	r21,20(sp)
   11110:	dd000415 	stw	r20,16(sp)
   11114:	dcc00315 	stw	r19,12(sp)
   11118:	dc400115 	stw	r17,4(sp)
   1111c:	dc000015 	stw	r16,0(sp)
   11120:	288002c4 	addi	r2,r5,11
   11124:	00c00584 	movi	r3,22
   11128:	2025883a 	mov	r18,r4
   1112c:	18802b2e 	bgeu	r3,r2,111dc <_malloc_r+0xe8>
   11130:	047ffe04 	movi	r17,-8
   11134:	1462703a 	and	r17,r2,r17
   11138:	88002a16 	blt	r17,zero,111e4 <_malloc_r+0xf0>
   1113c:	89402936 	bltu	r17,r5,111e4 <_malloc_r+0xf0>
   11140:	9009883a 	mov	r4,r18
   11144:	00141d40 	call	141d4 <__malloc_lock>
   11148:	00807dc4 	movi	r2,503
   1114c:	14402936 	bltu	r2,r17,111f4 <_malloc_r+0x100>
   11150:	8808d0fa 	srli	r4,r17,3
   11154:	04c00074 	movhi	r19,1
   11158:	9cda7004 	addi	r19,r19,27072
   1115c:	2105883a 	add	r2,r4,r4
   11160:	1085883a 	add	r2,r2,r2
   11164:	1085883a 	add	r2,r2,r2
   11168:	9885883a 	add	r2,r19,r2
   1116c:	14000317 	ldw	r16,12(r2)
   11170:	80815526 	beq	r16,r2,116c8 <_malloc_r+0x5d4>
   11174:	81000117 	ldw	r4,4(r16)
   11178:	00bfff04 	movi	r2,-4
   1117c:	80c00317 	ldw	r3,12(r16)
   11180:	2084703a 	and	r2,r4,r2
   11184:	8085883a 	add	r2,r16,r2
   11188:	11800117 	ldw	r6,4(r2)
   1118c:	81400217 	ldw	r5,8(r16)
   11190:	9009883a 	mov	r4,r18
   11194:	31800054 	ori	r6,r6,1
   11198:	11800115 	stw	r6,4(r2)
   1119c:	28c00315 	stw	r3,12(r5)
   111a0:	19400215 	stw	r5,8(r3)
   111a4:	00141f40 	call	141f4 <__malloc_unlock>
   111a8:	80800204 	addi	r2,r16,8
   111ac:	dfc00917 	ldw	ra,36(sp)
   111b0:	df000817 	ldw	fp,32(sp)
   111b4:	ddc00717 	ldw	r23,28(sp)
   111b8:	dd800617 	ldw	r22,24(sp)
   111bc:	dd400517 	ldw	r21,20(sp)
   111c0:	dd000417 	ldw	r20,16(sp)
   111c4:	dcc00317 	ldw	r19,12(sp)
   111c8:	dc800217 	ldw	r18,8(sp)
   111cc:	dc400117 	ldw	r17,4(sp)
   111d0:	dc000017 	ldw	r16,0(sp)
   111d4:	dec00a04 	addi	sp,sp,40
   111d8:	f800283a 	ret
   111dc:	04400404 	movi	r17,16
   111e0:	897fd72e 	bgeu	r17,r5,11140 <_malloc_r+0x4c>
   111e4:	00800304 	movi	r2,12
   111e8:	90800015 	stw	r2,0(r18)
   111ec:	0005883a 	mov	r2,zero
   111f0:	003fee06 	br	111ac <_malloc_r+0xb8>
   111f4:	8808d27a 	srli	r4,r17,9
   111f8:	20007126 	beq	r4,zero,113c0 <_malloc_r+0x2cc>
   111fc:	00800104 	movi	r2,4
   11200:	1100eb36 	bltu	r2,r4,115b0 <_malloc_r+0x4bc>
   11204:	8808d1ba 	srli	r4,r17,6
   11208:	21000e04 	addi	r4,r4,56
   1120c:	210b883a 	add	r5,r4,r4
   11210:	294b883a 	add	r5,r5,r5
   11214:	294b883a 	add	r5,r5,r5
   11218:	04c00074 	movhi	r19,1
   1121c:	9cda7004 	addi	r19,r19,27072
   11220:	994b883a 	add	r5,r19,r5
   11224:	2c000317 	ldw	r16,12(r5)
   11228:	2c000e26 	beq	r5,r16,11264 <_malloc_r+0x170>
   1122c:	80c00117 	ldw	r3,4(r16)
   11230:	01ffff04 	movi	r7,-4
   11234:	018003c4 	movi	r6,15
   11238:	19c6703a 	and	r3,r3,r7
   1123c:	1c45c83a 	sub	r2,r3,r17
   11240:	30800716 	blt	r6,r2,11260 <_malloc_r+0x16c>
   11244:	1000610e 	bge	r2,zero,113cc <_malloc_r+0x2d8>
   11248:	84000317 	ldw	r16,12(r16)
   1124c:	2c000526 	beq	r5,r16,11264 <_malloc_r+0x170>
   11250:	80c00117 	ldw	r3,4(r16)
   11254:	19c6703a 	and	r3,r3,r7
   11258:	1c45c83a 	sub	r2,r3,r17
   1125c:	30bff90e 	bge	r6,r2,11244 <_malloc_r+0x150>
   11260:	213fffc4 	addi	r4,r4,-1
   11264:	21000044 	addi	r4,r4,1
   11268:	9c000417 	ldw	r16,16(r19)
   1126c:	00c00074 	movhi	r3,1
   11270:	18da7004 	addi	r3,r3,27072
   11274:	1a400204 	addi	r9,r3,8
   11278:	8240ff26 	beq	r16,r9,11678 <_malloc_r+0x584>
   1127c:	81400117 	ldw	r5,4(r16)
   11280:	00bfff04 	movi	r2,-4
   11284:	018003c4 	movi	r6,15
   11288:	2884703a 	and	r2,r5,r2
   1128c:	144bc83a 	sub	r5,r2,r17
   11290:	3140ea16 	blt	r6,r5,1163c <_malloc_r+0x548>
   11294:	1a400515 	stw	r9,20(r3)
   11298:	1a400415 	stw	r9,16(r3)
   1129c:	2800570e 	bge	r5,zero,113fc <_malloc_r+0x308>
   112a0:	01407fc4 	movi	r5,511
   112a4:	2880ca36 	bltu	r5,r2,115d0 <_malloc_r+0x4dc>
   112a8:	1004d0fa 	srli	r2,r2,3
   112ac:	02000044 	movi	r8,1
   112b0:	19c00117 	ldw	r7,4(r3)
   112b4:	108b883a 	add	r5,r2,r2
   112b8:	294b883a 	add	r5,r5,r5
   112bc:	1005d0ba 	srai	r2,r2,2
   112c0:	294b883a 	add	r5,r5,r5
   112c4:	28cb883a 	add	r5,r5,r3
   112c8:	29800217 	ldw	r6,8(r5)
   112cc:	4084983a 	sll	r2,r8,r2
   112d0:	81400315 	stw	r5,12(r16)
   112d4:	81800215 	stw	r6,8(r16)
   112d8:	11c4b03a 	or	r2,r2,r7
   112dc:	18800115 	stw	r2,4(r3)
   112e0:	2c000215 	stw	r16,8(r5)
   112e4:	34000315 	stw	r16,12(r6)
   112e8:	200bd0ba 	srai	r5,r4,2
   112ec:	00c00044 	movi	r3,1
   112f0:	194a983a 	sll	r5,r3,r5
   112f4:	11404936 	bltu	r2,r5,1141c <_malloc_r+0x328>
   112f8:	1146703a 	and	r3,r2,r5
   112fc:	18000a1e 	bne	r3,zero,11328 <_malloc_r+0x234>
   11300:	00ffff04 	movi	r3,-4
   11304:	294b883a 	add	r5,r5,r5
   11308:	20c8703a 	and	r4,r4,r3
   1130c:	1146703a 	and	r3,r2,r5
   11310:	21000104 	addi	r4,r4,4
   11314:	1800041e 	bne	r3,zero,11328 <_malloc_r+0x234>
   11318:	294b883a 	add	r5,r5,r5
   1131c:	1146703a 	and	r3,r2,r5
   11320:	21000104 	addi	r4,r4,4
   11324:	183ffc26 	beq	r3,zero,11318 <_malloc_r+0x224>
   11328:	023fff04 	movi	r8,-4
   1132c:	01c003c4 	movi	r7,15
   11330:	2105883a 	add	r2,r4,r4
   11334:	1085883a 	add	r2,r2,r2
   11338:	1085883a 	add	r2,r2,r2
   1133c:	9899883a 	add	r12,r19,r2
   11340:	62800304 	addi	r10,r12,12
   11344:	2017883a 	mov	r11,r4
   11348:	54000017 	ldw	r16,0(r10)
   1134c:	51bffd04 	addi	r6,r10,-12
   11350:	8180041e 	bne	r16,r6,11364 <_malloc_r+0x270>
   11354:	0000ca06 	br	11680 <_malloc_r+0x58c>
   11358:	10001c0e 	bge	r2,zero,113cc <_malloc_r+0x2d8>
   1135c:	84000317 	ldw	r16,12(r16)
   11360:	8180c726 	beq	r16,r6,11680 <_malloc_r+0x58c>
   11364:	80c00117 	ldw	r3,4(r16)
   11368:	1a06703a 	and	r3,r3,r8
   1136c:	1c45c83a 	sub	r2,r3,r17
   11370:	38bff90e 	bge	r7,r2,11358 <_malloc_r+0x264>
   11374:	81000317 	ldw	r4,12(r16)
   11378:	81400217 	ldw	r5,8(r16)
   1137c:	8447883a 	add	r3,r16,r17
   11380:	8c400054 	ori	r17,r17,1
   11384:	29000315 	stw	r4,12(r5)
   11388:	21400215 	stw	r5,8(r4)
   1138c:	84400115 	stw	r17,4(r16)
   11390:	1889883a 	add	r4,r3,r2
   11394:	11400054 	ori	r5,r2,1
   11398:	98c00515 	stw	r3,20(r19)
   1139c:	98c00415 	stw	r3,16(r19)
   113a0:	20800015 	stw	r2,0(r4)
   113a4:	1a400315 	stw	r9,12(r3)
   113a8:	1a400215 	stw	r9,8(r3)
   113ac:	19400115 	stw	r5,4(r3)
   113b0:	9009883a 	mov	r4,r18
   113b4:	00141f40 	call	141f4 <__malloc_unlock>
   113b8:	80800204 	addi	r2,r16,8
   113bc:	003f7b06 	br	111ac <_malloc_r+0xb8>
   113c0:	8808d0fa 	srli	r4,r17,3
   113c4:	210b883a 	add	r5,r4,r4
   113c8:	003f9106 	br	11210 <_malloc_r+0x11c>
   113cc:	80c7883a 	add	r3,r16,r3
   113d0:	19400117 	ldw	r5,4(r3)
   113d4:	80800317 	ldw	r2,12(r16)
   113d8:	81000217 	ldw	r4,8(r16)
   113dc:	29400054 	ori	r5,r5,1
   113e0:	19400115 	stw	r5,4(r3)
   113e4:	20800315 	stw	r2,12(r4)
   113e8:	11000215 	stw	r4,8(r2)
   113ec:	9009883a 	mov	r4,r18
   113f0:	00141f40 	call	141f4 <__malloc_unlock>
   113f4:	80800204 	addi	r2,r16,8
   113f8:	003f6c06 	br	111ac <_malloc_r+0xb8>
   113fc:	8085883a 	add	r2,r16,r2
   11400:	10c00117 	ldw	r3,4(r2)
   11404:	9009883a 	mov	r4,r18
   11408:	18c00054 	ori	r3,r3,1
   1140c:	10c00115 	stw	r3,4(r2)
   11410:	00141f40 	call	141f4 <__malloc_unlock>
   11414:	80800204 	addi	r2,r16,8
   11418:	003f6406 	br	111ac <_malloc_r+0xb8>
   1141c:	9c000217 	ldw	r16,8(r19)
   11420:	00bfff04 	movi	r2,-4
   11424:	85400117 	ldw	r21,4(r16)
   11428:	a8aa703a 	and	r21,r21,r2
   1142c:	ac400336 	bltu	r21,r17,1143c <_malloc_r+0x348>
   11430:	ac45c83a 	sub	r2,r21,r17
   11434:	00c003c4 	movi	r3,15
   11438:	18805316 	blt	r3,r2,11588 <_malloc_r+0x494>
   1143c:	d5e6cd17 	ldw	r23,-25804(gp)
   11440:	d0e00517 	ldw	r3,-32748(gp)
   11444:	00bfffc4 	movi	r2,-1
   11448:	8579883a 	add	fp,r16,r21
   1144c:	8def883a 	add	r23,r17,r23
   11450:	1880d226 	beq	r3,r2,1179c <_malloc_r+0x6a8>
   11454:	bdc403c4 	addi	r23,r23,4111
   11458:	00bc0004 	movi	r2,-4096
   1145c:	b8ae703a 	and	r23,r23,r2
   11460:	9009883a 	mov	r4,r18
   11464:	b80b883a 	mov	r5,r23
   11468:	00119100 	call	11910 <_sbrk_r>
   1146c:	1029883a 	mov	r20,r2
   11470:	00bfffc4 	movi	r2,-1
   11474:	a080d126 	beq	r20,r2,117bc <_malloc_r+0x6c8>
   11478:	a7009f36 	bltu	r20,fp,116f8 <_malloc_r+0x604>
   1147c:	058000b4 	movhi	r22,2
   11480:	b5a7c904 	addi	r22,r22,-24796
   11484:	b0800017 	ldw	r2,0(r22)
   11488:	b885883a 	add	r2,r23,r2
   1148c:	b0800015 	stw	r2,0(r22)
   11490:	e500cf26 	beq	fp,r20,117d0 <_malloc_r+0x6dc>
   11494:	d1200517 	ldw	r4,-32748(gp)
   11498:	00ffffc4 	movi	r3,-1
   1149c:	20c0e026 	beq	r4,r3,11820 <_malloc_r+0x72c>
   114a0:	a739c83a 	sub	fp,r20,fp
   114a4:	1705883a 	add	r2,r2,fp
   114a8:	b0800015 	stw	r2,0(r22)
   114ac:	a08001cc 	andi	r2,r20,7
   114b0:	1000a526 	beq	r2,zero,11748 <_malloc_r+0x654>
   114b4:	a0a9c83a 	sub	r20,r20,r2
   114b8:	00c40204 	movi	r3,4104
   114bc:	a5000204 	addi	r20,r20,8
   114c0:	1885c83a 	sub	r2,r3,r2
   114c4:	a5c7883a 	add	r3,r20,r23
   114c8:	18c3ffcc 	andi	r3,r3,4095
   114cc:	10efc83a 	sub	r23,r2,r3
   114d0:	9009883a 	mov	r4,r18
   114d4:	b80b883a 	mov	r5,r23
   114d8:	00119100 	call	11910 <_sbrk_r>
   114dc:	00ffffc4 	movi	r3,-1
   114e0:	10c0cc26 	beq	r2,r3,11814 <_malloc_r+0x720>
   114e4:	1505c83a 	sub	r2,r2,r20
   114e8:	b887883a 	add	r3,r23,r2
   114ec:	18c00054 	ori	r3,r3,1
   114f0:	b0800017 	ldw	r2,0(r22)
   114f4:	9d000215 	stw	r20,8(r19)
   114f8:	a0c00115 	stw	r3,4(r20)
   114fc:	b885883a 	add	r2,r23,r2
   11500:	b0800015 	stw	r2,0(r22)
   11504:	84c00e26 	beq	r16,r19,11540 <_malloc_r+0x44c>
   11508:	00c003c4 	movi	r3,15
   1150c:	1d40902e 	bgeu	r3,r21,11750 <_malloc_r+0x65c>
   11510:	ad7ffd04 	addi	r21,r21,-12
   11514:	013ffe04 	movi	r4,-8
   11518:	a908703a 	and	r4,r21,r4
   1151c:	810b883a 	add	r5,r16,r4
   11520:	01800144 	movi	r6,5
   11524:	29800115 	stw	r6,4(r5)
   11528:	29800215 	stw	r6,8(r5)
   1152c:	81400117 	ldw	r5,4(r16)
   11530:	2940004c 	andi	r5,r5,1
   11534:	214ab03a 	or	r5,r4,r5
   11538:	81400115 	stw	r5,4(r16)
   1153c:	1900ae36 	bltu	r3,r4,117f8 <_malloc_r+0x704>
   11540:	d0e6cc17 	ldw	r3,-25808(gp)
   11544:	1880012e 	bgeu	r3,r2,1154c <_malloc_r+0x458>
   11548:	d0a6cc15 	stw	r2,-25808(gp)
   1154c:	d0e6cb17 	ldw	r3,-25812(gp)
   11550:	9c000217 	ldw	r16,8(r19)
   11554:	1880012e 	bgeu	r3,r2,1155c <_malloc_r+0x468>
   11558:	d0a6cb15 	stw	r2,-25812(gp)
   1155c:	80c00117 	ldw	r3,4(r16)
   11560:	00bfff04 	movi	r2,-4
   11564:	1886703a 	and	r3,r3,r2
   11568:	1c45c83a 	sub	r2,r3,r17
   1156c:	1c400236 	bltu	r3,r17,11578 <_malloc_r+0x484>
   11570:	00c003c4 	movi	r3,15
   11574:	18800416 	blt	r3,r2,11588 <_malloc_r+0x494>
   11578:	9009883a 	mov	r4,r18
   1157c:	00141f40 	call	141f4 <__malloc_unlock>
   11580:	0005883a 	mov	r2,zero
   11584:	003f0906 	br	111ac <_malloc_r+0xb8>
   11588:	88c00054 	ori	r3,r17,1
   1158c:	10800054 	ori	r2,r2,1
   11590:	80c00115 	stw	r3,4(r16)
   11594:	8463883a 	add	r17,r16,r17
   11598:	88800115 	stw	r2,4(r17)
   1159c:	9009883a 	mov	r4,r18
   115a0:	9c400215 	stw	r17,8(r19)
   115a4:	00141f40 	call	141f4 <__malloc_unlock>
   115a8:	80800204 	addi	r2,r16,8
   115ac:	003eff06 	br	111ac <_malloc_r+0xb8>
   115b0:	00800504 	movi	r2,20
   115b4:	1100492e 	bgeu	r2,r4,116dc <_malloc_r+0x5e8>
   115b8:	00801504 	movi	r2,84
   115bc:	11005c36 	bltu	r2,r4,11730 <_malloc_r+0x63c>
   115c0:	8808d33a 	srli	r4,r17,12
   115c4:	21001b84 	addi	r4,r4,110
   115c8:	210b883a 	add	r5,r4,r4
   115cc:	003f1006 	br	11210 <_malloc_r+0x11c>
   115d0:	1006d27a 	srli	r3,r2,9
   115d4:	01400104 	movi	r5,4
   115d8:	28c0432e 	bgeu	r5,r3,116e8 <_malloc_r+0x5f4>
   115dc:	01400504 	movi	r5,20
   115e0:	28c07036 	bltu	r5,r3,117a4 <_malloc_r+0x6b0>
   115e4:	194016c4 	addi	r5,r3,91
   115e8:	294d883a 	add	r6,r5,r5
   115ec:	318d883a 	add	r6,r6,r6
   115f0:	318d883a 	add	r6,r6,r6
   115f4:	998d883a 	add	r6,r19,r6
   115f8:	30c00217 	ldw	r3,8(r6)
   115fc:	01c00074 	movhi	r7,1
   11600:	39da7004 	addi	r7,r7,27072
   11604:	19805726 	beq	r3,r6,11764 <_malloc_r+0x670>
   11608:	01ffff04 	movi	r7,-4
   1160c:	19400117 	ldw	r5,4(r3)
   11610:	29ca703a 	and	r5,r5,r7
   11614:	1140022e 	bgeu	r2,r5,11620 <_malloc_r+0x52c>
   11618:	18c00217 	ldw	r3,8(r3)
   1161c:	30fffb1e 	bne	r6,r3,1160c <_malloc_r+0x518>
   11620:	19400317 	ldw	r5,12(r3)
   11624:	98800117 	ldw	r2,4(r19)
   11628:	81400315 	stw	r5,12(r16)
   1162c:	80c00215 	stw	r3,8(r16)
   11630:	2c000215 	stw	r16,8(r5)
   11634:	1c000315 	stw	r16,12(r3)
   11638:	003f2b06 	br	112e8 <_malloc_r+0x1f4>
   1163c:	8445883a 	add	r2,r16,r17
   11640:	8c400054 	ori	r17,r17,1
   11644:	18800515 	stw	r2,20(r3)
   11648:	18800415 	stw	r2,16(r3)
   1164c:	29000054 	ori	r4,r5,1
   11650:	1147883a 	add	r3,r2,r5
   11654:	84400115 	stw	r17,4(r16)
   11658:	11000115 	stw	r4,4(r2)
   1165c:	12400315 	stw	r9,12(r2)
   11660:	12400215 	stw	r9,8(r2)
   11664:	19400015 	stw	r5,0(r3)
   11668:	9009883a 	mov	r4,r18
   1166c:	00141f40 	call	141f4 <__malloc_unlock>
   11670:	80800204 	addi	r2,r16,8
   11674:	003ecd06 	br	111ac <_malloc_r+0xb8>
   11678:	18800117 	ldw	r2,4(r3)
   1167c:	003f1a06 	br	112e8 <_malloc_r+0x1f4>
   11680:	5ac00044 	addi	r11,r11,1
   11684:	588000cc 	andi	r2,r11,3
   11688:	52800204 	addi	r10,r10,8
   1168c:	103f2e1e 	bne	r2,zero,11348 <_malloc_r+0x254>
   11690:	20c000cc 	andi	r3,r4,3
   11694:	60bffe04 	addi	r2,r12,-8
   11698:	18006f26 	beq	r3,zero,11858 <_malloc_r+0x764>
   1169c:	63000017 	ldw	r12,0(r12)
   116a0:	213fffc4 	addi	r4,r4,-1
   116a4:	60bffa26 	beq	r12,r2,11690 <_malloc_r+0x59c>
   116a8:	98800117 	ldw	r2,4(r19)
   116ac:	294b883a 	add	r5,r5,r5
   116b0:	117f5a36 	bltu	r2,r5,1141c <_malloc_r+0x328>
   116b4:	283f5926 	beq	r5,zero,1141c <_malloc_r+0x328>
   116b8:	1146703a 	and	r3,r2,r5
   116bc:	18001626 	beq	r3,zero,11718 <_malloc_r+0x624>
   116c0:	5809883a 	mov	r4,r11
   116c4:	003f1a06 	br	11330 <_malloc_r+0x23c>
   116c8:	80800204 	addi	r2,r16,8
   116cc:	84000517 	ldw	r16,20(r16)
   116d0:	143ea81e 	bne	r2,r16,11174 <_malloc_r+0x80>
   116d4:	21000084 	addi	r4,r4,2
   116d8:	003ee306 	br	11268 <_malloc_r+0x174>
   116dc:	210016c4 	addi	r4,r4,91
   116e0:	210b883a 	add	r5,r4,r4
   116e4:	003eca06 	br	11210 <_malloc_r+0x11c>
   116e8:	100ad1ba 	srli	r5,r2,6
   116ec:	29400e04 	addi	r5,r5,56
   116f0:	294d883a 	add	r6,r5,r5
   116f4:	003fbd06 	br	115ec <_malloc_r+0x4f8>
   116f8:	84ff6026 	beq	r16,r19,1147c <_malloc_r+0x388>
   116fc:	00800074 	movhi	r2,1
   11700:	109a7004 	addi	r2,r2,27072
   11704:	14000217 	ldw	r16,8(r2)
   11708:	00bfff04 	movi	r2,-4
   1170c:	80c00117 	ldw	r3,4(r16)
   11710:	1886703a 	and	r3,r3,r2
   11714:	003f9406 	br	11568 <_malloc_r+0x474>
   11718:	294b883a 	add	r5,r5,r5
   1171c:	1146703a 	and	r3,r2,r5
   11720:	5ac00104 	addi	r11,r11,4
   11724:	183ffc26 	beq	r3,zero,11718 <_malloc_r+0x624>
   11728:	5809883a 	mov	r4,r11
   1172c:	003f0006 	br	11330 <_malloc_r+0x23c>
   11730:	00805504 	movi	r2,340
   11734:	11001336 	bltu	r2,r4,11784 <_malloc_r+0x690>
   11738:	8808d3fa 	srli	r4,r17,15
   1173c:	21001dc4 	addi	r4,r4,119
   11740:	210b883a 	add	r5,r4,r4
   11744:	003eb206 	br	11210 <_malloc_r+0x11c>
   11748:	00840004 	movi	r2,4096
   1174c:	003f5d06 	br	114c4 <_malloc_r+0x3d0>
   11750:	00800044 	movi	r2,1
   11754:	a0800115 	stw	r2,4(r20)
   11758:	a021883a 	mov	r16,r20
   1175c:	0007883a 	mov	r3,zero
   11760:	003f8106 	br	11568 <_malloc_r+0x474>
   11764:	280bd0ba 	srai	r5,r5,2
   11768:	01800044 	movi	r6,1
   1176c:	38800117 	ldw	r2,4(r7)
   11770:	314c983a 	sll	r6,r6,r5
   11774:	180b883a 	mov	r5,r3
   11778:	3084b03a 	or	r2,r6,r2
   1177c:	38800115 	stw	r2,4(r7)
   11780:	003fa906 	br	11628 <_malloc_r+0x534>
   11784:	00815504 	movi	r2,1364
   11788:	11001836 	bltu	r2,r4,117ec <_malloc_r+0x6f8>
   1178c:	8808d4ba 	srli	r4,r17,18
   11790:	21001f04 	addi	r4,r4,124
   11794:	210b883a 	add	r5,r4,r4
   11798:	003e9d06 	br	11210 <_malloc_r+0x11c>
   1179c:	bdc00404 	addi	r23,r23,16
   117a0:	003f2f06 	br	11460 <_malloc_r+0x36c>
   117a4:	01401504 	movi	r5,84
   117a8:	28c01f36 	bltu	r5,r3,11828 <_malloc_r+0x734>
   117ac:	100ad33a 	srli	r5,r2,12
   117b0:	29401b84 	addi	r5,r5,110
   117b4:	294d883a 	add	r6,r5,r5
   117b8:	003f8c06 	br	115ec <_malloc_r+0x4f8>
   117bc:	9c000217 	ldw	r16,8(r19)
   117c0:	00bfff04 	movi	r2,-4
   117c4:	80c00117 	ldw	r3,4(r16)
   117c8:	1886703a 	and	r3,r3,r2
   117cc:	003f6606 	br	11568 <_malloc_r+0x474>
   117d0:	e0c3ffcc 	andi	r3,fp,4095
   117d4:	183f2f1e 	bne	r3,zero,11494 <_malloc_r+0x3a0>
   117d8:	98c00217 	ldw	r3,8(r19)
   117dc:	bd49883a 	add	r4,r23,r21
   117e0:	21000054 	ori	r4,r4,1
   117e4:	19000115 	stw	r4,4(r3)
   117e8:	003f5506 	br	11540 <_malloc_r+0x44c>
   117ec:	01403f04 	movi	r5,252
   117f0:	01001f84 	movi	r4,126
   117f4:	003e8606 	br	11210 <_malloc_r+0x11c>
   117f8:	9009883a 	mov	r4,r18
   117fc:	81400204 	addi	r5,r16,8
   11800:	0011b3c0 	call	11b3c <_free_r>
   11804:	008000b4 	movhi	r2,2
   11808:	10a7c904 	addi	r2,r2,-24796
   1180c:	10800017 	ldw	r2,0(r2)
   11810:	003f4b06 	br	11540 <_malloc_r+0x44c>
   11814:	00c00044 	movi	r3,1
   11818:	002f883a 	mov	r23,zero
   1181c:	003f3406 	br	114f0 <_malloc_r+0x3fc>
   11820:	d5200515 	stw	r20,-32748(gp)
   11824:	003f2106 	br	114ac <_malloc_r+0x3b8>
   11828:	01405504 	movi	r5,340
   1182c:	28c00436 	bltu	r5,r3,11840 <_malloc_r+0x74c>
   11830:	100ad3fa 	srli	r5,r2,15
   11834:	29401dc4 	addi	r5,r5,119
   11838:	294d883a 	add	r6,r5,r5
   1183c:	003f6b06 	br	115ec <_malloc_r+0x4f8>
   11840:	01415504 	movi	r5,1364
   11844:	28c00936 	bltu	r5,r3,1186c <_malloc_r+0x778>
   11848:	100ad4ba 	srli	r5,r2,18
   1184c:	29401f04 	addi	r5,r5,124
   11850:	294d883a 	add	r6,r5,r5
   11854:	003f6506 	br	115ec <_malloc_r+0x4f8>
   11858:	98800117 	ldw	r2,4(r19)
   1185c:	0146303a 	nor	r3,zero,r5
   11860:	1884703a 	and	r2,r3,r2
   11864:	98800115 	stw	r2,4(r19)
   11868:	003f9006 	br	116ac <_malloc_r+0x5b8>
   1186c:	01803f04 	movi	r6,252
   11870:	01401f84 	movi	r5,126
   11874:	003f5d06 	br	115ec <_malloc_r+0x4f8>

00011878 <_puts_r>:
   11878:	defff604 	addi	sp,sp,-40
   1187c:	dc400815 	stw	r17,32(sp)
   11880:	2023883a 	mov	r17,r4
   11884:	2809883a 	mov	r4,r5
   11888:	dc000715 	stw	r16,28(sp)
   1188c:	dfc00915 	stw	ra,36(sp)
   11890:	2821883a 	mov	r16,r5
   11894:	00119740 	call	11974 <strlen>
   11898:	10c00044 	addi	r3,r2,1
   1189c:	d8800115 	stw	r2,4(sp)
   118a0:	89400217 	ldw	r5,8(r17)
   118a4:	00800074 	movhi	r2,1
   118a8:	109a4304 	addi	r2,r2,26892
   118ac:	d8800215 	stw	r2,8(sp)
   118b0:	00800044 	movi	r2,1
   118b4:	d8800315 	stw	r2,12(sp)
   118b8:	8809883a 	mov	r4,r17
   118bc:	00800084 	movi	r2,2
   118c0:	d9800404 	addi	r6,sp,16
   118c4:	dc000015 	stw	r16,0(sp)
   118c8:	d8c00615 	stw	r3,24(sp)
   118cc:	dec00415 	stw	sp,16(sp)
   118d0:	d8800515 	stw	r2,20(sp)
   118d4:	0011e0c0 	call	11e0c <__sfvwrite_r>
   118d8:	1000061e 	bne	r2,zero,118f4 <_puts_r+0x7c>
   118dc:	00800284 	movi	r2,10
   118e0:	dfc00917 	ldw	ra,36(sp)
   118e4:	dc400817 	ldw	r17,32(sp)
   118e8:	dc000717 	ldw	r16,28(sp)
   118ec:	dec00a04 	addi	sp,sp,40
   118f0:	f800283a 	ret
   118f4:	00bfffc4 	movi	r2,-1
   118f8:	003ff906 	br	118e0 <_puts_r+0x68>

000118fc <puts>:
   118fc:	008000b4 	movhi	r2,2
   11900:	10a0fc04 	addi	r2,r2,-31760
   11904:	200b883a 	mov	r5,r4
   11908:	11000017 	ldw	r4,0(r2)
   1190c:	00118781 	jmpi	11878 <_puts_r>

00011910 <_sbrk_r>:
   11910:	defffd04 	addi	sp,sp,-12
   11914:	dc400115 	stw	r17,4(sp)
   11918:	dc000015 	stw	r16,0(sp)
   1191c:	2023883a 	mov	r17,r4
   11920:	040000b4 	movhi	r16,2
   11924:	8427c204 	addi	r16,r16,-24824
   11928:	2809883a 	mov	r4,r5
   1192c:	dfc00215 	stw	ra,8(sp)
   11930:	80000015 	stw	zero,0(r16)
   11934:	00143d80 	call	143d8 <sbrk>
   11938:	00ffffc4 	movi	r3,-1
   1193c:	10c00526 	beq	r2,r3,11954 <_sbrk_r+0x44>
   11940:	dfc00217 	ldw	ra,8(sp)
   11944:	dc400117 	ldw	r17,4(sp)
   11948:	dc000017 	ldw	r16,0(sp)
   1194c:	dec00304 	addi	sp,sp,12
   11950:	f800283a 	ret
   11954:	80c00017 	ldw	r3,0(r16)
   11958:	183ff926 	beq	r3,zero,11940 <_sbrk_r+0x30>
   1195c:	88c00015 	stw	r3,0(r17)
   11960:	dfc00217 	ldw	ra,8(sp)
   11964:	dc400117 	ldw	r17,4(sp)
   11968:	dc000017 	ldw	r16,0(sp)
   1196c:	dec00304 	addi	sp,sp,12
   11970:	f800283a 	ret

00011974 <strlen>:
   11974:	208000cc 	andi	r2,r4,3
   11978:	10001f1e 	bne	r2,zero,119f8 <strlen+0x84>
   1197c:	20800017 	ldw	r2,0(r4)
   11980:	01ffbff4 	movhi	r7,65279
   11984:	39ffbfc4 	addi	r7,r7,-257
   11988:	01a02074 	movhi	r6,32897
   1198c:	31a02004 	addi	r6,r6,-32640
   11990:	11c7883a 	add	r3,r2,r7
   11994:	0084303a 	nor	r2,zero,r2
   11998:	1886703a 	and	r3,r3,r2
   1199c:	1986703a 	and	r3,r3,r6
   119a0:	2005883a 	mov	r2,r4
   119a4:	1800101e 	bne	r3,zero,119e8 <strlen+0x74>
   119a8:	10800104 	addi	r2,r2,4
   119ac:	10c00017 	ldw	r3,0(r2)
   119b0:	19cb883a 	add	r5,r3,r7
   119b4:	00c6303a 	nor	r3,zero,r3
   119b8:	28c6703a 	and	r3,r5,r3
   119bc:	1986703a 	and	r3,r3,r6
   119c0:	1800091e 	bne	r3,zero,119e8 <strlen+0x74>
   119c4:	10800104 	addi	r2,r2,4
   119c8:	10c00017 	ldw	r3,0(r2)
   119cc:	19cb883a 	add	r5,r3,r7
   119d0:	00c6303a 	nor	r3,zero,r3
   119d4:	28c6703a 	and	r3,r5,r3
   119d8:	1986703a 	and	r3,r3,r6
   119dc:	183ff226 	beq	r3,zero,119a8 <strlen+0x34>
   119e0:	00000106 	br	119e8 <strlen+0x74>
   119e4:	10800044 	addi	r2,r2,1
   119e8:	10c00007 	ldb	r3,0(r2)
   119ec:	183ffd1e 	bne	r3,zero,119e4 <strlen+0x70>
   119f0:	1105c83a 	sub	r2,r2,r4
   119f4:	f800283a 	ret
   119f8:	2005883a 	mov	r2,r4
   119fc:	003ffa06 	br	119e8 <strlen+0x74>

00011a00 <_malloc_trim_r>:
   11a00:	defffb04 	addi	sp,sp,-20
   11a04:	dcc00315 	stw	r19,12(sp)
   11a08:	dc800215 	stw	r18,8(sp)
   11a0c:	dc400115 	stw	r17,4(sp)
   11a10:	dc000015 	stw	r16,0(sp)
   11a14:	2827883a 	mov	r19,r5
   11a18:	dfc00415 	stw	ra,16(sp)
   11a1c:	04400074 	movhi	r17,1
   11a20:	8c5a7004 	addi	r17,r17,27072
   11a24:	2021883a 	mov	r16,r4
   11a28:	00141d40 	call	141d4 <__malloc_lock>
   11a2c:	88800217 	ldw	r2,8(r17)
   11a30:	14800117 	ldw	r18,4(r2)
   11a34:	00bfff04 	movi	r2,-4
   11a38:	90a4703a 	and	r18,r18,r2
   11a3c:	9083fbc4 	addi	r2,r18,4079
   11a40:	14e7c83a 	sub	r19,r2,r19
   11a44:	9826d33a 	srli	r19,r19,12
   11a48:	0083ffc4 	movi	r2,4095
   11a4c:	9cffffc4 	addi	r19,r19,-1
   11a50:	9826933a 	slli	r19,r19,12
   11a54:	14c0060e 	bge	r2,r19,11a70 <_malloc_trim_r+0x70>
   11a58:	8009883a 	mov	r4,r16
   11a5c:	000b883a 	mov	r5,zero
   11a60:	00119100 	call	11910 <_sbrk_r>
   11a64:	88c00217 	ldw	r3,8(r17)
   11a68:	1c87883a 	add	r3,r3,r18
   11a6c:	10c00a26 	beq	r2,r3,11a98 <_malloc_trim_r+0x98>
   11a70:	8009883a 	mov	r4,r16
   11a74:	00141f40 	call	141f4 <__malloc_unlock>
   11a78:	0005883a 	mov	r2,zero
   11a7c:	dfc00417 	ldw	ra,16(sp)
   11a80:	dcc00317 	ldw	r19,12(sp)
   11a84:	dc800217 	ldw	r18,8(sp)
   11a88:	dc400117 	ldw	r17,4(sp)
   11a8c:	dc000017 	ldw	r16,0(sp)
   11a90:	dec00504 	addi	sp,sp,20
   11a94:	f800283a 	ret
   11a98:	8009883a 	mov	r4,r16
   11a9c:	04cbc83a 	sub	r5,zero,r19
   11aa0:	00119100 	call	11910 <_sbrk_r>
   11aa4:	00ffffc4 	movi	r3,-1
   11aa8:	10c01326 	beq	r2,r3,11af8 <_malloc_trim_r+0xf8>
   11aac:	008000b4 	movhi	r2,2
   11ab0:	10a7c904 	addi	r2,r2,-24796
   11ab4:	11000017 	ldw	r4,0(r2)
   11ab8:	88c00217 	ldw	r3,8(r17)
   11abc:	94e5c83a 	sub	r18,r18,r19
   11ac0:	94800054 	ori	r18,r18,1
   11ac4:	24e7c83a 	sub	r19,r4,r19
   11ac8:	1c800115 	stw	r18,4(r3)
   11acc:	8009883a 	mov	r4,r16
   11ad0:	14c00015 	stw	r19,0(r2)
   11ad4:	00141f40 	call	141f4 <__malloc_unlock>
   11ad8:	00800044 	movi	r2,1
   11adc:	dfc00417 	ldw	ra,16(sp)
   11ae0:	dcc00317 	ldw	r19,12(sp)
   11ae4:	dc800217 	ldw	r18,8(sp)
   11ae8:	dc400117 	ldw	r17,4(sp)
   11aec:	dc000017 	ldw	r16,0(sp)
   11af0:	dec00504 	addi	sp,sp,20
   11af4:	f800283a 	ret
   11af8:	8009883a 	mov	r4,r16
   11afc:	000b883a 	mov	r5,zero
   11b00:	00119100 	call	11910 <_sbrk_r>
   11b04:	88c00217 	ldw	r3,8(r17)
   11b08:	014003c4 	movi	r5,15
   11b0c:	10c9c83a 	sub	r4,r2,r3
   11b10:	293fd70e 	bge	r5,r4,11a70 <_malloc_trim_r+0x70>
   11b14:	014000b4 	movhi	r5,2
   11b18:	2960f904 	addi	r5,r5,-31772
   11b1c:	29400017 	ldw	r5,0(r5)
   11b20:	21000054 	ori	r4,r4,1
   11b24:	19000115 	stw	r4,4(r3)
   11b28:	1145c83a 	sub	r2,r2,r5
   11b2c:	014000b4 	movhi	r5,2
   11b30:	2967c904 	addi	r5,r5,-24796
   11b34:	28800015 	stw	r2,0(r5)
   11b38:	003fcd06 	br	11a70 <_malloc_trim_r+0x70>

00011b3c <_free_r>:
   11b3c:	defffd04 	addi	sp,sp,-12
   11b40:	dc400115 	stw	r17,4(sp)
   11b44:	dc000015 	stw	r16,0(sp)
   11b48:	dfc00215 	stw	ra,8(sp)
   11b4c:	2821883a 	mov	r16,r5
   11b50:	2023883a 	mov	r17,r4
   11b54:	28004b26 	beq	r5,zero,11c84 <_free_r+0x148>
   11b58:	00141d40 	call	141d4 <__malloc_lock>
   11b5c:	823fff17 	ldw	r8,-4(r16)
   11b60:	00bfff84 	movi	r2,-2
   11b64:	81bffe04 	addi	r6,r16,-8
   11b68:	4084703a 	and	r2,r8,r2
   11b6c:	3087883a 	add	r3,r6,r2
   11b70:	01400074 	movhi	r5,1
   11b74:	295a7004 	addi	r5,r5,27072
   11b78:	1a400117 	ldw	r9,4(r3)
   11b7c:	29000217 	ldw	r4,8(r5)
   11b80:	01ffff04 	movi	r7,-4
   11b84:	49ce703a 	and	r7,r9,r7
   11b88:	20c06526 	beq	r4,r3,11d20 <_free_r+0x1e4>
   11b8c:	19c00115 	stw	r7,4(r3)
   11b90:	4200004c 	andi	r8,r8,1
   11b94:	40003026 	beq	r8,zero,11c58 <_free_r+0x11c>
   11b98:	0009883a 	mov	r4,zero
   11b9c:	19d1883a 	add	r8,r3,r7
   11ba0:	42000117 	ldw	r8,4(r8)
   11ba4:	4200004c 	andi	r8,r8,1
   11ba8:	4000061e 	bne	r8,zero,11bc4 <_free_r+0x88>
   11bac:	11c5883a 	add	r2,r2,r7
   11bb0:	19c00217 	ldw	r7,8(r3)
   11bb4:	20004e26 	beq	r4,zero,11cf0 <_free_r+0x1b4>
   11bb8:	18c00317 	ldw	r3,12(r3)
   11bbc:	38c00315 	stw	r3,12(r7)
   11bc0:	19c00215 	stw	r7,8(r3)
   11bc4:	11c00054 	ori	r7,r2,1
   11bc8:	3087883a 	add	r3,r6,r2
   11bcc:	31c00115 	stw	r7,4(r6)
   11bd0:	18800015 	stw	r2,0(r3)
   11bd4:	20001a1e 	bne	r4,zero,11c40 <_free_r+0x104>
   11bd8:	00c07fc4 	movi	r3,511
   11bdc:	18802e2e 	bgeu	r3,r2,11c98 <_free_r+0x15c>
   11be0:	1006d27a 	srli	r3,r2,9
   11be4:	01000104 	movi	r4,4
   11be8:	20c06636 	bltu	r4,r3,11d84 <_free_r+0x248>
   11bec:	1008d1ba 	srli	r4,r2,6
   11bf0:	21000e04 	addi	r4,r4,56
   11bf4:	210f883a 	add	r7,r4,r4
   11bf8:	39cf883a 	add	r7,r7,r7
   11bfc:	39cf883a 	add	r7,r7,r7
   11c00:	29cf883a 	add	r7,r5,r7
   11c04:	38c00217 	ldw	r3,8(r7)
   11c08:	01400074 	movhi	r5,1
   11c0c:	295a7004 	addi	r5,r5,27072
   11c10:	19c06126 	beq	r3,r7,11d98 <_free_r+0x25c>
   11c14:	013fff04 	movi	r4,-4
   11c18:	19400117 	ldw	r5,4(r3)
   11c1c:	290a703a 	and	r5,r5,r4
   11c20:	1140022e 	bgeu	r2,r5,11c2c <_free_r+0xf0>
   11c24:	18c00217 	ldw	r3,8(r3)
   11c28:	38fffb1e 	bne	r7,r3,11c18 <_free_r+0xdc>
   11c2c:	18800317 	ldw	r2,12(r3)
   11c30:	30800315 	stw	r2,12(r6)
   11c34:	30c00215 	stw	r3,8(r6)
   11c38:	11800215 	stw	r6,8(r2)
   11c3c:	19800315 	stw	r6,12(r3)
   11c40:	8809883a 	mov	r4,r17
   11c44:	dfc00217 	ldw	ra,8(sp)
   11c48:	dc400117 	ldw	r17,4(sp)
   11c4c:	dc000017 	ldw	r16,0(sp)
   11c50:	dec00304 	addi	sp,sp,12
   11c54:	00141f41 	jmpi	141f4 <__malloc_unlock>
   11c58:	813ffe17 	ldw	r4,-8(r16)
   11c5c:	2a400204 	addi	r9,r5,8
   11c60:	310dc83a 	sub	r6,r6,r4
   11c64:	32000217 	ldw	r8,8(r6)
   11c68:	1105883a 	add	r2,r2,r4
   11c6c:	42404326 	beq	r8,r9,11d7c <_free_r+0x240>
   11c70:	32400317 	ldw	r9,12(r6)
   11c74:	0009883a 	mov	r4,zero
   11c78:	42400315 	stw	r9,12(r8)
   11c7c:	4a000215 	stw	r8,8(r9)
   11c80:	003fc606 	br	11b9c <_free_r+0x60>
   11c84:	dfc00217 	ldw	ra,8(sp)
   11c88:	dc400117 	ldw	r17,4(sp)
   11c8c:	dc000017 	ldw	r16,0(sp)
   11c90:	dec00304 	addi	sp,sp,12
   11c94:	f800283a 	ret
   11c98:	1004d0fa 	srli	r2,r2,3
   11c9c:	02000044 	movi	r8,1
   11ca0:	29c00117 	ldw	r7,4(r5)
   11ca4:	1087883a 	add	r3,r2,r2
   11ca8:	18c7883a 	add	r3,r3,r3
   11cac:	1005d0ba 	srai	r2,r2,2
   11cb0:	18c7883a 	add	r3,r3,r3
   11cb4:	28c7883a 	add	r3,r5,r3
   11cb8:	19000217 	ldw	r4,8(r3)
   11cbc:	4084983a 	sll	r2,r8,r2
   11cc0:	30c00315 	stw	r3,12(r6)
   11cc4:	31000215 	stw	r4,8(r6)
   11cc8:	11c4b03a 	or	r2,r2,r7
   11ccc:	21800315 	stw	r6,12(r4)
   11cd0:	8809883a 	mov	r4,r17
   11cd4:	28800115 	stw	r2,4(r5)
   11cd8:	19800215 	stw	r6,8(r3)
   11cdc:	dfc00217 	ldw	ra,8(sp)
   11ce0:	dc400117 	ldw	r17,4(sp)
   11ce4:	dc000017 	ldw	r16,0(sp)
   11ce8:	dec00304 	addi	sp,sp,12
   11cec:	00141f41 	jmpi	141f4 <__malloc_unlock>
   11cf0:	02000074 	movhi	r8,1
   11cf4:	421a7204 	addi	r8,r8,27080
   11cf8:	3a3faf1e 	bne	r7,r8,11bb8 <_free_r+0x7c>
   11cfc:	29800515 	stw	r6,20(r5)
   11d00:	29800415 	stw	r6,16(r5)
   11d04:	11000054 	ori	r4,r2,1
   11d08:	3087883a 	add	r3,r6,r2
   11d0c:	31c00315 	stw	r7,12(r6)
   11d10:	31c00215 	stw	r7,8(r6)
   11d14:	31000115 	stw	r4,4(r6)
   11d18:	18800015 	stw	r2,0(r3)
   11d1c:	003fc806 	br	11c40 <_free_r+0x104>
   11d20:	4200004c 	andi	r8,r8,1
   11d24:	3885883a 	add	r2,r7,r2
   11d28:	4000071e 	bne	r8,zero,11d48 <_free_r+0x20c>
   11d2c:	81fffe17 	ldw	r7,-8(r16)
   11d30:	31cdc83a 	sub	r6,r6,r7
   11d34:	30c00317 	ldw	r3,12(r6)
   11d38:	31000217 	ldw	r4,8(r6)
   11d3c:	11c5883a 	add	r2,r2,r7
   11d40:	20c00315 	stw	r3,12(r4)
   11d44:	19000215 	stw	r4,8(r3)
   11d48:	00c000b4 	movhi	r3,2
   11d4c:	18e0fa04 	addi	r3,r3,-31768
   11d50:	18c00017 	ldw	r3,0(r3)
   11d54:	11000054 	ori	r4,r2,1
   11d58:	31000115 	stw	r4,4(r6)
   11d5c:	29800215 	stw	r6,8(r5)
   11d60:	10ffb736 	bltu	r2,r3,11c40 <_free_r+0x104>
   11d64:	008000b4 	movhi	r2,2
   11d68:	10a7c104 	addi	r2,r2,-24828
   11d6c:	11400017 	ldw	r5,0(r2)
   11d70:	8809883a 	mov	r4,r17
   11d74:	0011a000 	call	11a00 <_malloc_trim_r>
   11d78:	003fb106 	br	11c40 <_free_r+0x104>
   11d7c:	01000044 	movi	r4,1
   11d80:	003f8606 	br	11b9c <_free_r+0x60>
   11d84:	01000504 	movi	r4,20
   11d88:	20c00b36 	bltu	r4,r3,11db8 <_free_r+0x27c>
   11d8c:	190016c4 	addi	r4,r3,91
   11d90:	210f883a 	add	r7,r4,r4
   11d94:	003f9806 	br	11bf8 <_free_r+0xbc>
   11d98:	2009d0ba 	srai	r4,r4,2
   11d9c:	00800044 	movi	r2,1
   11da0:	29c00117 	ldw	r7,4(r5)
   11da4:	1108983a 	sll	r4,r2,r4
   11da8:	1805883a 	mov	r2,r3
   11dac:	21c8b03a 	or	r4,r4,r7
   11db0:	29000115 	stw	r4,4(r5)
   11db4:	003f9e06 	br	11c30 <_free_r+0xf4>
   11db8:	01001504 	movi	r4,84
   11dbc:	20c00436 	bltu	r4,r3,11dd0 <_free_r+0x294>
   11dc0:	1008d33a 	srli	r4,r2,12
   11dc4:	21001b84 	addi	r4,r4,110
   11dc8:	210f883a 	add	r7,r4,r4
   11dcc:	003f8a06 	br	11bf8 <_free_r+0xbc>
   11dd0:	01005504 	movi	r4,340
   11dd4:	20c00436 	bltu	r4,r3,11de8 <_free_r+0x2ac>
   11dd8:	1008d3fa 	srli	r4,r2,15
   11ddc:	21001dc4 	addi	r4,r4,119
   11de0:	210f883a 	add	r7,r4,r4
   11de4:	003f8406 	br	11bf8 <_free_r+0xbc>
   11de8:	01015504 	movi	r4,1364
   11dec:	20c00436 	bltu	r4,r3,11e00 <_free_r+0x2c4>
   11df0:	1008d4ba 	srli	r4,r2,18
   11df4:	21001f04 	addi	r4,r4,124
   11df8:	210f883a 	add	r7,r4,r4
   11dfc:	003f7e06 	br	11bf8 <_free_r+0xbc>
   11e00:	01c03f04 	movi	r7,252
   11e04:	01001f84 	movi	r4,126
   11e08:	003f7b06 	br	11bf8 <_free_r+0xbc>

00011e0c <__sfvwrite_r>:
   11e0c:	30800217 	ldw	r2,8(r6)
   11e10:	defff504 	addi	sp,sp,-44
   11e14:	dd400615 	stw	r21,24(sp)
   11e18:	dd000515 	stw	r20,20(sp)
   11e1c:	dc000115 	stw	r16,4(sp)
   11e20:	dfc00a15 	stw	ra,40(sp)
   11e24:	df000915 	stw	fp,36(sp)
   11e28:	ddc00815 	stw	r23,32(sp)
   11e2c:	dd800715 	stw	r22,28(sp)
   11e30:	dcc00415 	stw	r19,16(sp)
   11e34:	dc800315 	stw	r18,12(sp)
   11e38:	dc400215 	stw	r17,8(sp)
   11e3c:	3029883a 	mov	r20,r6
   11e40:	202b883a 	mov	r21,r4
   11e44:	2821883a 	mov	r16,r5
   11e48:	10002126 	beq	r2,zero,11ed0 <__sfvwrite_r+0xc4>
   11e4c:	2880030b 	ldhu	r2,12(r5)
   11e50:	10c0020c 	andi	r3,r2,8
   11e54:	18ffffcc 	andi	r3,r3,65535
   11e58:	18e0001c 	xori	r3,r3,32768
   11e5c:	18e00004 	addi	r3,r3,-32768
   11e60:	18002826 	beq	r3,zero,11f04 <__sfvwrite_r+0xf8>
   11e64:	28c00417 	ldw	r3,16(r5)
   11e68:	18002626 	beq	r3,zero,11f04 <__sfvwrite_r+0xf8>
   11e6c:	10c0008c 	andi	r3,r2,2
   11e70:	18ffffcc 	andi	r3,r3,65535
   11e74:	18e0001c 	xori	r3,r3,32768
   11e78:	18e00004 	addi	r3,r3,-32768
   11e7c:	a4400017 	ldw	r17,0(r20)
   11e80:	18002b26 	beq	r3,zero,11f30 <__sfvwrite_r+0x124>
   11e84:	0027883a 	mov	r19,zero
   11e88:	0025883a 	mov	r18,zero
   11e8c:	05810004 	movi	r22,1024
   11e90:	980d883a 	mov	r6,r19
   11e94:	a809883a 	mov	r4,r21
   11e98:	90004f26 	beq	r18,zero,11fd8 <__sfvwrite_r+0x1cc>
   11e9c:	900f883a 	mov	r7,r18
   11ea0:	81400717 	ldw	r5,28(r16)
   11ea4:	b480012e 	bgeu	r22,r18,11eac <__sfvwrite_r+0xa0>
   11ea8:	01c10004 	movi	r7,1024
   11eac:	80800917 	ldw	r2,36(r16)
   11eb0:	103ee83a 	callr	r2
   11eb4:	0080540e 	bge	zero,r2,12008 <__sfvwrite_r+0x1fc>
   11eb8:	a0c00217 	ldw	r3,8(r20)
   11ebc:	98a7883a 	add	r19,r19,r2
   11ec0:	90a5c83a 	sub	r18,r18,r2
   11ec4:	1885c83a 	sub	r2,r3,r2
   11ec8:	a0800215 	stw	r2,8(r20)
   11ecc:	103ff01e 	bne	r2,zero,11e90 <__sfvwrite_r+0x84>
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	dfc00a17 	ldw	ra,40(sp)
   11ed8:	df000917 	ldw	fp,36(sp)
   11edc:	ddc00817 	ldw	r23,32(sp)
   11ee0:	dd800717 	ldw	r22,28(sp)
   11ee4:	dd400617 	ldw	r21,24(sp)
   11ee8:	dd000517 	ldw	r20,20(sp)
   11eec:	dcc00417 	ldw	r19,16(sp)
   11ef0:	dc800317 	ldw	r18,12(sp)
   11ef4:	dc400217 	ldw	r17,8(sp)
   11ef8:	dc000117 	ldw	r16,4(sp)
   11efc:	dec00b04 	addi	sp,sp,44
   11f00:	f800283a 	ret
   11f04:	a809883a 	mov	r4,r21
   11f08:	800b883a 	mov	r5,r16
   11f0c:	0012cb00 	call	12cb0 <__swsetup_r>
   11f10:	1000f01e 	bne	r2,zero,122d4 <__sfvwrite_r+0x4c8>
   11f14:	8080030b 	ldhu	r2,12(r16)
   11f18:	a4400017 	ldw	r17,0(r20)
   11f1c:	10c0008c 	andi	r3,r2,2
   11f20:	18ffffcc 	andi	r3,r3,65535
   11f24:	18e0001c 	xori	r3,r3,32768
   11f28:	18e00004 	addi	r3,r3,-32768
   11f2c:	183fd51e 	bne	r3,zero,11e84 <__sfvwrite_r+0x78>
   11f30:	10c0004c 	andi	r3,r2,1
   11f34:	002d883a 	mov	r22,zero
   11f38:	1800381e 	bne	r3,zero,1201c <__sfvwrite_r+0x210>
   11f3c:	0025883a 	mov	r18,zero
   11f40:	90002126 	beq	r18,zero,11fc8 <__sfvwrite_r+0x1bc>
   11f44:	10c0800c 	andi	r3,r2,512
   11f48:	18ffffcc 	andi	r3,r3,65535
   11f4c:	18e0001c 	xori	r3,r3,32768
   11f50:	18e00004 	addi	r3,r3,-32768
   11f54:	84c00217 	ldw	r19,8(r16)
   11f58:	18006b26 	beq	r3,zero,12108 <__sfvwrite_r+0x2fc>
   11f5c:	980f883a 	mov	r7,r19
   11f60:	94c08636 	bltu	r18,r19,1217c <__sfvwrite_r+0x370>
   11f64:	10c1200c 	andi	r3,r2,1152
   11f68:	18009f1e 	bne	r3,zero,121e8 <__sfvwrite_r+0x3dc>
   11f6c:	81000017 	ldw	r4,0(r16)
   11f70:	982f883a 	mov	r23,r19
   11f74:	9039883a 	mov	fp,r18
   11f78:	9027883a 	mov	r19,r18
   11f7c:	380d883a 	mov	r6,r7
   11f80:	b00b883a 	mov	r5,r22
   11f84:	d9c00015 	stw	r7,0(sp)
   11f88:	00125280 	call	12528 <memmove>
   11f8c:	d9c00017 	ldw	r7,0(sp)
   11f90:	81000217 	ldw	r4,8(r16)
   11f94:	80800017 	ldw	r2,0(r16)
   11f98:	25efc83a 	sub	r23,r4,r23
   11f9c:	11cf883a 	add	r7,r2,r7
   11fa0:	85c00215 	stw	r23,8(r16)
   11fa4:	81c00015 	stw	r7,0(r16)
   11fa8:	a0800217 	ldw	r2,8(r20)
   11fac:	b72d883a 	add	r22,r22,fp
   11fb0:	9725c83a 	sub	r18,r18,fp
   11fb4:	14e7c83a 	sub	r19,r2,r19
   11fb8:	a4c00215 	stw	r19,8(r20)
   11fbc:	983fc426 	beq	r19,zero,11ed0 <__sfvwrite_r+0xc4>
   11fc0:	8080030b 	ldhu	r2,12(r16)
   11fc4:	903fdf1e 	bne	r18,zero,11f44 <__sfvwrite_r+0x138>
   11fc8:	8d800017 	ldw	r22,0(r17)
   11fcc:	8c800117 	ldw	r18,4(r17)
   11fd0:	8c400204 	addi	r17,r17,8
   11fd4:	003fda06 	br	11f40 <__sfvwrite_r+0x134>
   11fd8:	8cc00017 	ldw	r19,0(r17)
   11fdc:	8c800117 	ldw	r18,4(r17)
   11fe0:	8c400204 	addi	r17,r17,8
   11fe4:	003faa06 	br	11e90 <__sfvwrite_r+0x84>
   11fe8:	00126b40 	call	126b4 <_realloc_r>
   11fec:	102f883a 	mov	r23,r2
   11ff0:	10009f1e 	bne	r2,zero,12270 <__sfvwrite_r+0x464>
   11ff4:	81400417 	ldw	r5,16(r16)
   11ff8:	a809883a 	mov	r4,r21
   11ffc:	0011b3c0 	call	11b3c <_free_r>
   12000:	00800304 	movi	r2,12
   12004:	a8800015 	stw	r2,0(r21)
   12008:	80c0030b 	ldhu	r3,12(r16)
   1200c:	00bfffc4 	movi	r2,-1
   12010:	18c01014 	ori	r3,r3,64
   12014:	80c0030d 	sth	r3,12(r16)
   12018:	003fae06 	br	11ed4 <__sfvwrite_r+0xc8>
   1201c:	0007883a 	mov	r3,zero
   12020:	0039883a 	mov	fp,zero
   12024:	0025883a 	mov	r18,zero
   12028:	90001e26 	beq	r18,zero,120a4 <__sfvwrite_r+0x298>
   1202c:	18006526 	beq	r3,zero,121c4 <__sfvwrite_r+0x3b8>
   12030:	b02f883a 	mov	r23,r22
   12034:	9580012e 	bgeu	r18,r22,1203c <__sfvwrite_r+0x230>
   12038:	902f883a 	mov	r23,r18
   1203c:	81000017 	ldw	r4,0(r16)
   12040:	80800417 	ldw	r2,16(r16)
   12044:	84c00217 	ldw	r19,8(r16)
   12048:	81c00517 	ldw	r7,20(r16)
   1204c:	1100022e 	bgeu	r2,r4,12058 <__sfvwrite_r+0x24c>
   12050:	99e7883a 	add	r19,r19,r7
   12054:	9dc01816 	blt	r19,r23,120b8 <__sfvwrite_r+0x2ac>
   12058:	b9c03b16 	blt	r23,r7,12148 <__sfvwrite_r+0x33c>
   1205c:	80800917 	ldw	r2,36(r16)
   12060:	81400717 	ldw	r5,28(r16)
   12064:	a809883a 	mov	r4,r21
   12068:	d8c00015 	stw	r3,0(sp)
   1206c:	e00d883a 	mov	r6,fp
   12070:	103ee83a 	callr	r2
   12074:	1027883a 	mov	r19,r2
   12078:	d8c00017 	ldw	r3,0(sp)
   1207c:	00bfe20e 	bge	zero,r2,12008 <__sfvwrite_r+0x1fc>
   12080:	b4edc83a 	sub	r22,r22,r19
   12084:	b0001a26 	beq	r22,zero,120f0 <__sfvwrite_r+0x2e4>
   12088:	a0800217 	ldw	r2,8(r20)
   1208c:	e4f9883a 	add	fp,fp,r19
   12090:	94e5c83a 	sub	r18,r18,r19
   12094:	14e7c83a 	sub	r19,r2,r19
   12098:	a4c00215 	stw	r19,8(r20)
   1209c:	983f8c26 	beq	r19,zero,11ed0 <__sfvwrite_r+0xc4>
   120a0:	903fe21e 	bne	r18,zero,1202c <__sfvwrite_r+0x220>
   120a4:	8f000017 	ldw	fp,0(r17)
   120a8:	8c800117 	ldw	r18,4(r17)
   120ac:	0007883a 	mov	r3,zero
   120b0:	8c400204 	addi	r17,r17,8
   120b4:	003fdc06 	br	12028 <__sfvwrite_r+0x21c>
   120b8:	e00b883a 	mov	r5,fp
   120bc:	980d883a 	mov	r6,r19
   120c0:	d8c00015 	stw	r3,0(sp)
   120c4:	00125280 	call	12528 <memmove>
   120c8:	80800017 	ldw	r2,0(r16)
   120cc:	a809883a 	mov	r4,r21
   120d0:	800b883a 	mov	r5,r16
   120d4:	14c5883a 	add	r2,r2,r19
   120d8:	80800015 	stw	r2,0(r16)
   120dc:	0012e240 	call	12e24 <_fflush_r>
   120e0:	d8c00017 	ldw	r3,0(sp)
   120e4:	103fc81e 	bne	r2,zero,12008 <__sfvwrite_r+0x1fc>
   120e8:	b4edc83a 	sub	r22,r22,r19
   120ec:	b03fe61e 	bne	r22,zero,12088 <__sfvwrite_r+0x27c>
   120f0:	a809883a 	mov	r4,r21
   120f4:	800b883a 	mov	r5,r16
   120f8:	0012e240 	call	12e24 <_fflush_r>
   120fc:	103fc21e 	bne	r2,zero,12008 <__sfvwrite_r+0x1fc>
   12100:	0007883a 	mov	r3,zero
   12104:	003fe006 	br	12088 <__sfvwrite_r+0x27c>
   12108:	81000017 	ldw	r4,0(r16)
   1210c:	80800417 	ldw	r2,16(r16)
   12110:	1100022e 	bgeu	r2,r4,1211c <__sfvwrite_r+0x310>
   12114:	9839883a 	mov	fp,r19
   12118:	9c806036 	bltu	r19,r18,1229c <__sfvwrite_r+0x490>
   1211c:	81c00517 	ldw	r7,20(r16)
   12120:	91c01c36 	bltu	r18,r7,12194 <__sfvwrite_r+0x388>
   12124:	80800917 	ldw	r2,36(r16)
   12128:	81400717 	ldw	r5,28(r16)
   1212c:	a809883a 	mov	r4,r21
   12130:	b00d883a 	mov	r6,r22
   12134:	103ee83a 	callr	r2
   12138:	1027883a 	mov	r19,r2
   1213c:	00bfb20e 	bge	zero,r2,12008 <__sfvwrite_r+0x1fc>
   12140:	1039883a 	mov	fp,r2
   12144:	003f9806 	br	11fa8 <__sfvwrite_r+0x19c>
   12148:	b80d883a 	mov	r6,r23
   1214c:	e00b883a 	mov	r5,fp
   12150:	d8c00015 	stw	r3,0(sp)
   12154:	00125280 	call	12528 <memmove>
   12158:	80800217 	ldw	r2,8(r16)
   1215c:	81000017 	ldw	r4,0(r16)
   12160:	b827883a 	mov	r19,r23
   12164:	15c5c83a 	sub	r2,r2,r23
   12168:	25ef883a 	add	r23,r4,r23
   1216c:	80800215 	stw	r2,8(r16)
   12170:	85c00015 	stw	r23,0(r16)
   12174:	d8c00017 	ldw	r3,0(sp)
   12178:	003fc106 	br	12080 <__sfvwrite_r+0x274>
   1217c:	81000017 	ldw	r4,0(r16)
   12180:	902f883a 	mov	r23,r18
   12184:	9039883a 	mov	fp,r18
   12188:	9027883a 	mov	r19,r18
   1218c:	900f883a 	mov	r7,r18
   12190:	003f7a06 	br	11f7c <__sfvwrite_r+0x170>
   12194:	b00b883a 	mov	r5,r22
   12198:	900d883a 	mov	r6,r18
   1219c:	00125280 	call	12528 <memmove>
   121a0:	80c00217 	ldw	r3,8(r16)
   121a4:	80800017 	ldw	r2,0(r16)
   121a8:	9027883a 	mov	r19,r18
   121ac:	1c87c83a 	sub	r3,r3,r18
   121b0:	1485883a 	add	r2,r2,r18
   121b4:	80c00215 	stw	r3,8(r16)
   121b8:	80800015 	stw	r2,0(r16)
   121bc:	9039883a 	mov	fp,r18
   121c0:	003f7906 	br	11fa8 <__sfvwrite_r+0x19c>
   121c4:	e009883a 	mov	r4,fp
   121c8:	01400284 	movi	r5,10
   121cc:	900d883a 	mov	r6,r18
   121d0:	00122f00 	call	122f0 <memchr>
   121d4:	10003c26 	beq	r2,zero,122c8 <__sfvwrite_r+0x4bc>
   121d8:	15800044 	addi	r22,r2,1
   121dc:	b72dc83a 	sub	r22,r22,fp
   121e0:	00c00044 	movi	r3,1
   121e4:	003f9206 	br	12030 <__sfvwrite_r+0x224>
   121e8:	81000517 	ldw	r4,20(r16)
   121ec:	81400417 	ldw	r5,16(r16)
   121f0:	80c00017 	ldw	r3,0(r16)
   121f4:	210d883a 	add	r6,r4,r4
   121f8:	3109883a 	add	r4,r6,r4
   121fc:	2026d7fa 	srli	r19,r4,31
   12200:	1979c83a 	sub	fp,r3,r5
   12204:	e1800044 	addi	r6,fp,1
   12208:	9909883a 	add	r4,r19,r4
   1220c:	2027d07a 	srai	r19,r4,1
   12210:	3489883a 	add	r4,r6,r18
   12214:	980d883a 	mov	r6,r19
   12218:	9900022e 	bgeu	r19,r4,12224 <__sfvwrite_r+0x418>
   1221c:	2027883a 	mov	r19,r4
   12220:	200d883a 	mov	r6,r4
   12224:	1081000c 	andi	r2,r2,1024
   12228:	10bfffcc 	andi	r2,r2,65535
   1222c:	10a0001c 	xori	r2,r2,32768
   12230:	10a00004 	addi	r2,r2,-32768
   12234:	a809883a 	mov	r4,r21
   12238:	103f6b26 	beq	r2,zero,11fe8 <__sfvwrite_r+0x1dc>
   1223c:	300b883a 	mov	r5,r6
   12240:	00110f40 	call	110f4 <_malloc_r>
   12244:	102f883a 	mov	r23,r2
   12248:	103f6d26 	beq	r2,zero,12000 <__sfvwrite_r+0x1f4>
   1224c:	81400417 	ldw	r5,16(r16)
   12250:	1009883a 	mov	r4,r2
   12254:	e00d883a 	mov	r6,fp
   12258:	00123e80 	call	123e8 <memcpy>
   1225c:	8080030b 	ldhu	r2,12(r16)
   12260:	00fedfc4 	movi	r3,-1153
   12264:	10c4703a 	and	r2,r2,r3
   12268:	10802014 	ori	r2,r2,128
   1226c:	8080030d 	sth	r2,12(r16)
   12270:	bf09883a 	add	r4,r23,fp
   12274:	9f07c83a 	sub	r3,r19,fp
   12278:	85c00415 	stw	r23,16(r16)
   1227c:	84c00515 	stw	r19,20(r16)
   12280:	81000015 	stw	r4,0(r16)
   12284:	902f883a 	mov	r23,r18
   12288:	80c00215 	stw	r3,8(r16)
   1228c:	9039883a 	mov	fp,r18
   12290:	9027883a 	mov	r19,r18
   12294:	900f883a 	mov	r7,r18
   12298:	003f3806 	br	11f7c <__sfvwrite_r+0x170>
   1229c:	b00b883a 	mov	r5,r22
   122a0:	980d883a 	mov	r6,r19
   122a4:	00125280 	call	12528 <memmove>
   122a8:	80800017 	ldw	r2,0(r16)
   122ac:	a809883a 	mov	r4,r21
   122b0:	800b883a 	mov	r5,r16
   122b4:	14c5883a 	add	r2,r2,r19
   122b8:	80800015 	stw	r2,0(r16)
   122bc:	0012e240 	call	12e24 <_fflush_r>
   122c0:	103f3926 	beq	r2,zero,11fa8 <__sfvwrite_r+0x19c>
   122c4:	003f5006 	br	12008 <__sfvwrite_r+0x1fc>
   122c8:	95800044 	addi	r22,r18,1
   122cc:	00c00044 	movi	r3,1
   122d0:	003f5706 	br	12030 <__sfvwrite_r+0x224>
   122d4:	80c0030b 	ldhu	r3,12(r16)
   122d8:	00bfffc4 	movi	r2,-1
   122dc:	18c01014 	ori	r3,r3,64
   122e0:	80c0030d 	sth	r3,12(r16)
   122e4:	00c00244 	movi	r3,9
   122e8:	a8c00015 	stw	r3,0(r21)
   122ec:	003ef906 	br	11ed4 <__sfvwrite_r+0xc8>

000122f0 <memchr>:
   122f0:	008000c4 	movi	r2,3
   122f4:	29403fcc 	andi	r5,r5,255
   122f8:	1180282e 	bgeu	r2,r6,1239c <memchr+0xac>
   122fc:	2086703a 	and	r3,r4,r2
   12300:	1800351e 	bne	r3,zero,123d8 <memchr+0xe8>
   12304:	2816923a 	slli	r11,r5,8
   12308:	2093883a 	add	r9,r4,r2
   1230c:	22000084 	addi	r8,r4,2
   12310:	5957883a 	add	r11,r11,r5
   12314:	5816923a 	slli	r11,r11,8
   12318:	20c00044 	addi	r3,r4,1
   1231c:	037fbff4 	movhi	r13,65279
   12320:	6b7fbfc4 	addi	r13,r13,-257
   12324:	5957883a 	add	r11,r11,r5
   12328:	5816923a 	slli	r11,r11,8
   1232c:	03202074 	movhi	r12,32897
   12330:	63202004 	addi	r12,r12,-32640
   12334:	101d883a 	mov	r14,r2
   12338:	5957883a 	add	r11,r11,r5
   1233c:	21c00017 	ldw	r7,0(r4)
   12340:	31bfff04 	addi	r6,r6,-4
   12344:	1805883a 	mov	r2,r3
   12348:	3acef03a 	xor	r7,r7,r11
   1234c:	3b55883a 	add	r10,r7,r13
   12350:	01ce303a 	nor	r7,zero,r7
   12354:	51ce703a 	and	r7,r10,r7
   12358:	3b0e703a 	and	r7,r7,r12
   1235c:	38000a26 	beq	r7,zero,12388 <memchr+0x98>
   12360:	21c00003 	ldbu	r7,0(r4)
   12364:	39401e26 	beq	r7,r5,123e0 <memchr+0xf0>
   12368:	19c00003 	ldbu	r7,0(r3)
   1236c:	39401926 	beq	r7,r5,123d4 <memchr+0xe4>
   12370:	41c00003 	ldbu	r7,0(r8)
   12374:	4005883a 	mov	r2,r8
   12378:	39401626 	beq	r7,r5,123d4 <memchr+0xe4>
   1237c:	49c00003 	ldbu	r7,0(r9)
   12380:	4805883a 	mov	r2,r9
   12384:	39401326 	beq	r7,r5,123d4 <memchr+0xe4>
   12388:	21000104 	addi	r4,r4,4
   1238c:	4a400104 	addi	r9,r9,4
   12390:	42000104 	addi	r8,r8,4
   12394:	18c00104 	addi	r3,r3,4
   12398:	71bfe836 	bltu	r14,r6,1233c <memchr+0x4c>
   1239c:	2005883a 	mov	r2,r4
   123a0:	30000a26 	beq	r6,zero,123cc <memchr+0xdc>
   123a4:	10c00003 	ldbu	r3,0(r2)
   123a8:	19400a26 	beq	r3,r5,123d4 <memchr+0xe4>
   123ac:	10c00044 	addi	r3,r2,1
   123b0:	118d883a 	add	r6,r2,r6
   123b4:	00000306 	br	123c4 <memchr+0xd4>
   123b8:	11000003 	ldbu	r4,0(r2)
   123bc:	18c00044 	addi	r3,r3,1
   123c0:	21400426 	beq	r4,r5,123d4 <memchr+0xe4>
   123c4:	1805883a 	mov	r2,r3
   123c8:	19bffb1e 	bne	r3,r6,123b8 <memchr+0xc8>
   123cc:	0005883a 	mov	r2,zero
   123d0:	f800283a 	ret
   123d4:	f800283a 	ret
   123d8:	2005883a 	mov	r2,r4
   123dc:	003ff106 	br	123a4 <memchr+0xb4>
   123e0:	2005883a 	mov	r2,r4
   123e4:	f800283a 	ret

000123e8 <memcpy>:
   123e8:	defffb04 	addi	sp,sp,-20
   123ec:	dc000015 	stw	r16,0(sp)
   123f0:	dfc00415 	stw	ra,16(sp)
   123f4:	dcc00315 	stw	r19,12(sp)
   123f8:	dc800215 	stw	r18,8(sp)
   123fc:	dc400115 	stw	r17,4(sp)
   12400:	00c003c4 	movi	r3,15
   12404:	2021883a 	mov	r16,r4
   12408:	3005883a 	mov	r2,r6
   1240c:	1980032e 	bgeu	r3,r6,1241c <memcpy+0x34>
   12410:	2906b03a 	or	r3,r5,r4
   12414:	18c000cc 	andi	r3,r3,3
   12418:	18001026 	beq	r3,zero,1245c <memcpy+0x74>
   1241c:	8007883a 	mov	r3,r16
   12420:	288f883a 	add	r7,r5,r2
   12424:	10000526 	beq	r2,zero,1243c <memcpy+0x54>
   12428:	29800003 	ldbu	r6,0(r5)
   1242c:	18c00044 	addi	r3,r3,1
   12430:	29400044 	addi	r5,r5,1
   12434:	19bfffc5 	stb	r6,-1(r3)
   12438:	29fffb1e 	bne	r5,r7,12428 <memcpy+0x40>
   1243c:	8005883a 	mov	r2,r16
   12440:	dfc00417 	ldw	ra,16(sp)
   12444:	dcc00317 	ldw	r19,12(sp)
   12448:	dc800217 	ldw	r18,8(sp)
   1244c:	dc400117 	ldw	r17,4(sp)
   12450:	dc000017 	ldw	r16,0(sp)
   12454:	dec00504 	addi	sp,sp,20
   12458:	f800283a 	ret
   1245c:	32bffc04 	addi	r10,r6,-16
   12460:	5014d13a 	srli	r10,r10,4
   12464:	20800404 	addi	r2,r4,16
   12468:	2007883a 	mov	r3,r4
   1246c:	5008913a 	slli	r4,r10,4
   12470:	280f883a 	mov	r7,r5
   12474:	1105883a 	add	r2,r2,r4
   12478:	3a000017 	ldw	r8,0(r7)
   1247c:	18c00404 	addi	r3,r3,16
   12480:	39c00404 	addi	r7,r7,16
   12484:	1a3ffc15 	stw	r8,-16(r3)
   12488:	3a3ffd17 	ldw	r8,-12(r7)
   1248c:	1a3ffd15 	stw	r8,-12(r3)
   12490:	3a3ffe17 	ldw	r8,-8(r7)
   12494:	1a3ffe15 	stw	r8,-8(r3)
   12498:	3a3fff17 	ldw	r8,-4(r7)
   1249c:	1a3fff15 	stw	r8,-4(r3)
   124a0:	18bff51e 	bne	r3,r2,12478 <memcpy+0x90>
   124a4:	52800044 	addi	r10,r10,1
   124a8:	5014913a 	slli	r10,r10,4
   124ac:	308003cc 	andi	r2,r6,15
   124b0:	010000c4 	movi	r4,3
   124b4:	8287883a 	add	r3,r16,r10
   124b8:	2a95883a 	add	r10,r5,r10
   124bc:	2080182e 	bgeu	r4,r2,12520 <memcpy+0x138>
   124c0:	147fff04 	addi	r17,r2,-4
   124c4:	8808d0ba 	srli	r4,r17,2
   124c8:	1a400104 	addi	r9,r3,4
   124cc:	180d883a 	mov	r6,r3
   124d0:	2105883a 	add	r2,r4,r4
   124d4:	1085883a 	add	r2,r2,r2
   124d8:	4893883a 	add	r9,r9,r2
   124dc:	500f883a 	mov	r7,r10
   124e0:	3a000017 	ldw	r8,0(r7)
   124e4:	31800104 	addi	r6,r6,4
   124e8:	39c00104 	addi	r7,r7,4
   124ec:	323fff15 	stw	r8,-4(r6)
   124f0:	327ffb1e 	bne	r6,r9,124e0 <memcpy+0xf8>
   124f4:	20800044 	addi	r2,r4,1
   124f8:	1085883a 	add	r2,r2,r2
   124fc:	1085883a 	add	r2,r2,r2
   12500:	017fff04 	movi	r5,-4
   12504:	18a5883a 	add	r18,r3,r2
   12508:	50a7883a 	add	r19,r10,r2
   1250c:	00110a40 	call	110a4 <__mulsi3>
   12510:	1445883a 	add	r2,r2,r17
   12514:	980b883a 	mov	r5,r19
   12518:	9007883a 	mov	r3,r18
   1251c:	003fc006 	br	12420 <memcpy+0x38>
   12520:	500b883a 	mov	r5,r10
   12524:	003fbe06 	br	12420 <memcpy+0x38>

00012528 <memmove>:
   12528:	defffb04 	addi	sp,sp,-20
   1252c:	dc000015 	stw	r16,0(sp)
   12530:	dfc00415 	stw	ra,16(sp)
   12534:	dcc00315 	stw	r19,12(sp)
   12538:	dc800215 	stw	r18,8(sp)
   1253c:	dc400115 	stw	r17,4(sp)
   12540:	2021883a 	mov	r16,r4
   12544:	300f883a 	mov	r7,r6
   12548:	2900122e 	bgeu	r5,r4,12594 <memmove+0x6c>
   1254c:	2987883a 	add	r3,r5,r6
   12550:	20c0102e 	bgeu	r4,r3,12594 <memmove+0x6c>
   12554:	218b883a 	add	r5,r4,r6
   12558:	1989c83a 	sub	r4,r3,r6
   1255c:	30000526 	beq	r6,zero,12574 <memmove+0x4c>
   12560:	18ffffc4 	addi	r3,r3,-1
   12564:	18800003 	ldbu	r2,0(r3)
   12568:	297fffc4 	addi	r5,r5,-1
   1256c:	28800005 	stb	r2,0(r5)
   12570:	193ffb1e 	bne	r3,r4,12560 <memmove+0x38>
   12574:	8005883a 	mov	r2,r16
   12578:	dfc00417 	ldw	ra,16(sp)
   1257c:	dcc00317 	ldw	r19,12(sp)
   12580:	dc800217 	ldw	r18,8(sp)
   12584:	dc400117 	ldw	r17,4(sp)
   12588:	dc000017 	ldw	r16,0(sp)
   1258c:	dec00504 	addi	sp,sp,20
   12590:	f800283a 	ret
   12594:	008003c4 	movi	r2,15
   12598:	1180422e 	bgeu	r2,r6,126a4 <memmove+0x17c>
   1259c:	2c04b03a 	or	r2,r5,r16
   125a0:	108000cc 	andi	r2,r2,3
   125a4:	10003f1e 	bne	r2,zero,126a4 <memmove+0x17c>
   125a8:	32bffc04 	addi	r10,r6,-16
   125ac:	5014d13a 	srli	r10,r10,4
   125b0:	81000404 	addi	r4,r16,16
   125b4:	8007883a 	mov	r3,r16
   125b8:	5004913a 	slli	r2,r10,4
   125bc:	280f883a 	mov	r7,r5
   125c0:	2089883a 	add	r4,r4,r2
   125c4:	38800017 	ldw	r2,0(r7)
   125c8:	18c00404 	addi	r3,r3,16
   125cc:	39c00404 	addi	r7,r7,16
   125d0:	18bffc15 	stw	r2,-16(r3)
   125d4:	38bffd17 	ldw	r2,-12(r7)
   125d8:	18bffd15 	stw	r2,-12(r3)
   125dc:	38bffe17 	ldw	r2,-8(r7)
   125e0:	18bffe15 	stw	r2,-8(r3)
   125e4:	38bfff17 	ldw	r2,-4(r7)
   125e8:	18bfff15 	stw	r2,-4(r3)
   125ec:	193ff51e 	bne	r3,r4,125c4 <memmove+0x9c>
   125f0:	52800044 	addi	r10,r10,1
   125f4:	5014913a 	slli	r10,r10,4
   125f8:	31c003cc 	andi	r7,r6,15
   125fc:	008000c4 	movi	r2,3
   12600:	8287883a 	add	r3,r16,r10
   12604:	2a95883a 	add	r10,r5,r10
   12608:	11c0282e 	bgeu	r2,r7,126ac <memmove+0x184>
   1260c:	3c7fff04 	addi	r17,r7,-4
   12610:	8808d0ba 	srli	r4,r17,2
   12614:	1a400104 	addi	r9,r3,4
   12618:	180d883a 	mov	r6,r3
   1261c:	2105883a 	add	r2,r4,r4
   12620:	1085883a 	add	r2,r2,r2
   12624:	4893883a 	add	r9,r9,r2
   12628:	5005883a 	mov	r2,r10
   1262c:	12000017 	ldw	r8,0(r2)
   12630:	31800104 	addi	r6,r6,4
   12634:	10800104 	addi	r2,r2,4
   12638:	323fff15 	stw	r8,-4(r6)
   1263c:	327ffb1e 	bne	r6,r9,1262c <memmove+0x104>
   12640:	20800044 	addi	r2,r4,1
   12644:	1085883a 	add	r2,r2,r2
   12648:	1085883a 	add	r2,r2,r2
   1264c:	017fff04 	movi	r5,-4
   12650:	18a5883a 	add	r18,r3,r2
   12654:	50a7883a 	add	r19,r10,r2
   12658:	00110a40 	call	110a4 <__mulsi3>
   1265c:	144f883a 	add	r7,r2,r17
   12660:	980b883a 	mov	r5,r19
   12664:	9007883a 	mov	r3,r18
   12668:	383fc226 	beq	r7,zero,12574 <memmove+0x4c>
   1266c:	19cf883a 	add	r7,r3,r7
   12670:	29800003 	ldbu	r6,0(r5)
   12674:	18c00044 	addi	r3,r3,1
   12678:	29400044 	addi	r5,r5,1
   1267c:	19bfffc5 	stb	r6,-1(r3)
   12680:	19fffb1e 	bne	r3,r7,12670 <memmove+0x148>
   12684:	8005883a 	mov	r2,r16
   12688:	dfc00417 	ldw	ra,16(sp)
   1268c:	dcc00317 	ldw	r19,12(sp)
   12690:	dc800217 	ldw	r18,8(sp)
   12694:	dc400117 	ldw	r17,4(sp)
   12698:	dc000017 	ldw	r16,0(sp)
   1269c:	dec00504 	addi	sp,sp,20
   126a0:	f800283a 	ret
   126a4:	8007883a 	mov	r3,r16
   126a8:	003fef06 	br	12668 <memmove+0x140>
   126ac:	500b883a 	mov	r5,r10
   126b0:	003fed06 	br	12668 <memmove+0x140>

000126b4 <_realloc_r>:
   126b4:	defff504 	addi	sp,sp,-44
   126b8:	dd400615 	stw	r21,24(sp)
   126bc:	dc800315 	stw	r18,12(sp)
   126c0:	dc000115 	stw	r16,4(sp)
   126c4:	dfc00a15 	stw	ra,40(sp)
   126c8:	df000915 	stw	fp,36(sp)
   126cc:	ddc00815 	stw	r23,32(sp)
   126d0:	dd800715 	stw	r22,28(sp)
   126d4:	dd000515 	stw	r20,20(sp)
   126d8:	dcc00415 	stw	r19,16(sp)
   126dc:	dc400215 	stw	r17,8(sp)
   126e0:	2821883a 	mov	r16,r5
   126e4:	202b883a 	mov	r21,r4
   126e8:	3025883a 	mov	r18,r6
   126ec:	28009626 	beq	r5,zero,12948 <_realloc_r+0x294>
   126f0:	00141d40 	call	141d4 <__malloc_lock>
   126f4:	80bfff17 	ldw	r2,-4(r16)
   126f8:	04ffff04 	movi	r19,-4
   126fc:	90c002c4 	addi	r3,r18,11
   12700:	01000584 	movi	r4,22
   12704:	85bffe04 	addi	r22,r16,-8
   12708:	14e6703a 	and	r19,r2,r19
   1270c:	20c0372e 	bgeu	r4,r3,127ec <_realloc_r+0x138>
   12710:	047ffe04 	movi	r17,-8
   12714:	1c62703a 	and	r17,r3,r17
   12718:	8807883a 	mov	r3,r17
   1271c:	88005a16 	blt	r17,zero,12888 <_realloc_r+0x1d4>
   12720:	8c805936 	bltu	r17,r18,12888 <_realloc_r+0x1d4>
   12724:	98c0340e 	bge	r19,r3,127f8 <_realloc_r+0x144>
   12728:	07000074 	movhi	fp,1
   1272c:	e71a7004 	addi	fp,fp,27072
   12730:	e1400217 	ldw	r5,8(fp)
   12734:	b4c9883a 	add	r4,r22,r19
   12738:	29009026 	beq	r5,r4,1297c <_realloc_r+0x2c8>
   1273c:	21800117 	ldw	r6,4(r4)
   12740:	01ffff84 	movi	r7,-2
   12744:	31ce703a 	and	r7,r6,r7
   12748:	21cf883a 	add	r7,r4,r7
   1274c:	39c00117 	ldw	r7,4(r7)
   12750:	39c0004c 	andi	r7,r7,1
   12754:	38004326 	beq	r7,zero,12864 <_realloc_r+0x1b0>
   12758:	000d883a 	mov	r6,zero
   1275c:	0009883a 	mov	r4,zero
   12760:	1080004c 	andi	r2,r2,1
   12764:	10005a1e 	bne	r2,zero,128d0 <_realloc_r+0x21c>
   12768:	85fffe17 	ldw	r23,-8(r16)
   1276c:	00bfff04 	movi	r2,-4
   12770:	b5efc83a 	sub	r23,r22,r23
   12774:	b9c00117 	ldw	r7,4(r23)
   12778:	388e703a 	and	r7,r7,r2
   1277c:	3ccf883a 	add	r7,r7,r19
   12780:	20005226 	beq	r4,zero,128cc <_realloc_r+0x218>
   12784:	31e9883a 	add	r20,r6,r7
   12788:	2140c726 	beq	r4,r5,12aa8 <_realloc_r+0x3f4>
   1278c:	a0c04f16 	blt	r20,r3,128cc <_realloc_r+0x218>
   12790:	20800317 	ldw	r2,12(r4)
   12794:	20c00217 	ldw	r3,8(r4)
   12798:	99bfff04 	addi	r6,r19,-4
   1279c:	01000904 	movi	r4,36
   127a0:	18800315 	stw	r2,12(r3)
   127a4:	10c00215 	stw	r3,8(r2)
   127a8:	b8c00217 	ldw	r3,8(r23)
   127ac:	b8800317 	ldw	r2,12(r23)
   127b0:	bc800204 	addi	r18,r23,8
   127b4:	18800315 	stw	r2,12(r3)
   127b8:	10c00215 	stw	r3,8(r2)
   127bc:	2180ed36 	bltu	r4,r6,12b74 <_realloc_r+0x4c0>
   127c0:	008004c4 	movi	r2,19
   127c4:	11809b2e 	bgeu	r2,r6,12a34 <_realloc_r+0x380>
   127c8:	80800017 	ldw	r2,0(r16)
   127cc:	b8800215 	stw	r2,8(r23)
   127d0:	80800117 	ldw	r2,4(r16)
   127d4:	b8800315 	stw	r2,12(r23)
   127d8:	008006c4 	movi	r2,27
   127dc:	1180f936 	bltu	r2,r6,12bc4 <_realloc_r+0x510>
   127e0:	b8800404 	addi	r2,r23,16
   127e4:	80c00204 	addi	r3,r16,8
   127e8:	00009406 	br	12a3c <_realloc_r+0x388>
   127ec:	00c00404 	movi	r3,16
   127f0:	1823883a 	mov	r17,r3
   127f4:	003fca06 	br	12720 <_realloc_r+0x6c>
   127f8:	9829883a 	mov	r20,r19
   127fc:	a447c83a 	sub	r3,r20,r17
   12800:	010003c4 	movi	r4,15
   12804:	1080004c 	andi	r2,r2,1
   12808:	20c02336 	bltu	r4,r3,12898 <_realloc_r+0x1e4>
   1280c:	1504b03a 	or	r2,r2,r20
   12810:	b0800115 	stw	r2,4(r22)
   12814:	b52d883a 	add	r22,r22,r20
   12818:	b0800117 	ldw	r2,4(r22)
   1281c:	10800054 	ori	r2,r2,1
   12820:	b0800115 	stw	r2,4(r22)
   12824:	a809883a 	mov	r4,r21
   12828:	00141f40 	call	141f4 <__malloc_unlock>
   1282c:	8025883a 	mov	r18,r16
   12830:	9005883a 	mov	r2,r18
   12834:	dfc00a17 	ldw	ra,40(sp)
   12838:	df000917 	ldw	fp,36(sp)
   1283c:	ddc00817 	ldw	r23,32(sp)
   12840:	dd800717 	ldw	r22,28(sp)
   12844:	dd400617 	ldw	r21,24(sp)
   12848:	dd000517 	ldw	r20,20(sp)
   1284c:	dcc00417 	ldw	r19,16(sp)
   12850:	dc800317 	ldw	r18,12(sp)
   12854:	dc400217 	ldw	r17,8(sp)
   12858:	dc000117 	ldw	r16,4(sp)
   1285c:	dec00b04 	addi	sp,sp,44
   12860:	f800283a 	ret
   12864:	01ffff04 	movi	r7,-4
   12868:	31cc703a 	and	r6,r6,r7
   1286c:	34e9883a 	add	r20,r6,r19
   12870:	a0ffbb16 	blt	r20,r3,12760 <_realloc_r+0xac>
   12874:	20c00317 	ldw	r3,12(r4)
   12878:	21000217 	ldw	r4,8(r4)
   1287c:	20c00315 	stw	r3,12(r4)
   12880:	19000215 	stw	r4,8(r3)
   12884:	003fdd06 	br	127fc <_realloc_r+0x148>
   12888:	00800304 	movi	r2,12
   1288c:	a8800015 	stw	r2,0(r21)
   12890:	0025883a 	mov	r18,zero
   12894:	003fe606 	br	12830 <_realloc_r+0x17c>
   12898:	1444b03a 	or	r2,r2,r17
   1289c:	b0800115 	stw	r2,4(r22)
   128a0:	b44b883a 	add	r5,r22,r17
   128a4:	18800054 	ori	r2,r3,1
   128a8:	28800115 	stw	r2,4(r5)
   128ac:	28c7883a 	add	r3,r5,r3
   128b0:	18800117 	ldw	r2,4(r3)
   128b4:	a809883a 	mov	r4,r21
   128b8:	29400204 	addi	r5,r5,8
   128bc:	10800054 	ori	r2,r2,1
   128c0:	18800115 	stw	r2,4(r3)
   128c4:	0011b3c0 	call	11b3c <_free_r>
   128c8:	003fd606 	br	12824 <_realloc_r+0x170>
   128cc:	38c0330e 	bge	r7,r3,1299c <_realloc_r+0x2e8>
   128d0:	900b883a 	mov	r5,r18
   128d4:	a809883a 	mov	r4,r21
   128d8:	00110f40 	call	110f4 <_malloc_r>
   128dc:	1025883a 	mov	r18,r2
   128e0:	10001626 	beq	r2,zero,1293c <_realloc_r+0x288>
   128e4:	80bfff17 	ldw	r2,-4(r16)
   128e8:	00ffff84 	movi	r3,-2
   128ec:	913ffe04 	addi	r4,r18,-8
   128f0:	10c6703a 	and	r3,r2,r3
   128f4:	b0c7883a 	add	r3,r22,r3
   128f8:	20c09926 	beq	r4,r3,12b60 <_realloc_r+0x4ac>
   128fc:	99bfff04 	addi	r6,r19,-4
   12900:	00800904 	movi	r2,36
   12904:	11806436 	bltu	r2,r6,12a98 <_realloc_r+0x3e4>
   12908:	00c004c4 	movi	r3,19
   1290c:	19804036 	bltu	r3,r6,12a10 <_realloc_r+0x35c>
   12910:	9005883a 	mov	r2,r18
   12914:	8007883a 	mov	r3,r16
   12918:	19000017 	ldw	r4,0(r3)
   1291c:	11000015 	stw	r4,0(r2)
   12920:	19000117 	ldw	r4,4(r3)
   12924:	11000115 	stw	r4,4(r2)
   12928:	18c00217 	ldw	r3,8(r3)
   1292c:	10c00215 	stw	r3,8(r2)
   12930:	a809883a 	mov	r4,r21
   12934:	800b883a 	mov	r5,r16
   12938:	0011b3c0 	call	11b3c <_free_r>
   1293c:	a809883a 	mov	r4,r21
   12940:	00141f40 	call	141f4 <__malloc_unlock>
   12944:	003fba06 	br	12830 <_realloc_r+0x17c>
   12948:	300b883a 	mov	r5,r6
   1294c:	dfc00a17 	ldw	ra,40(sp)
   12950:	df000917 	ldw	fp,36(sp)
   12954:	ddc00817 	ldw	r23,32(sp)
   12958:	dd800717 	ldw	r22,28(sp)
   1295c:	dd400617 	ldw	r21,24(sp)
   12960:	dd000517 	ldw	r20,20(sp)
   12964:	dcc00417 	ldw	r19,16(sp)
   12968:	dc800317 	ldw	r18,12(sp)
   1296c:	dc400217 	ldw	r17,8(sp)
   12970:	dc000117 	ldw	r16,4(sp)
   12974:	dec00b04 	addi	sp,sp,44
   12978:	00110f41 	jmpi	110f4 <_malloc_r>
   1297c:	29800117 	ldw	r6,4(r5)
   12980:	013fff04 	movi	r4,-4
   12984:	89c00404 	addi	r7,r17,16
   12988:	310c703a 	and	r6,r6,r4
   1298c:	34c9883a 	add	r4,r6,r19
   12990:	21c0340e 	bge	r4,r7,12a64 <_realloc_r+0x3b0>
   12994:	2809883a 	mov	r4,r5
   12998:	003f7106 	br	12760 <_realloc_r+0xac>
   1299c:	b8800317 	ldw	r2,12(r23)
   129a0:	b8c00217 	ldw	r3,8(r23)
   129a4:	99bfff04 	addi	r6,r19,-4
   129a8:	01000904 	movi	r4,36
   129ac:	18800315 	stw	r2,12(r3)
   129b0:	10c00215 	stw	r3,8(r2)
   129b4:	bc800204 	addi	r18,r23,8
   129b8:	21807836 	bltu	r4,r6,12b9c <_realloc_r+0x4e8>
   129bc:	008004c4 	movi	r2,19
   129c0:	1180732e 	bgeu	r2,r6,12b90 <_realloc_r+0x4dc>
   129c4:	80800017 	ldw	r2,0(r16)
   129c8:	b8800215 	stw	r2,8(r23)
   129cc:	80800117 	ldw	r2,4(r16)
   129d0:	b8800315 	stw	r2,12(r23)
   129d4:	008006c4 	movi	r2,27
   129d8:	11808936 	bltu	r2,r6,12c00 <_realloc_r+0x54c>
   129dc:	b8800404 	addi	r2,r23,16
   129e0:	80c00204 	addi	r3,r16,8
   129e4:	19000017 	ldw	r4,0(r3)
   129e8:	9021883a 	mov	r16,r18
   129ec:	3829883a 	mov	r20,r7
   129f0:	11000015 	stw	r4,0(r2)
   129f4:	19000117 	ldw	r4,4(r3)
   129f8:	b82d883a 	mov	r22,r23
   129fc:	11000115 	stw	r4,4(r2)
   12a00:	18c00217 	ldw	r3,8(r3)
   12a04:	10c00215 	stw	r3,8(r2)
   12a08:	b8800117 	ldw	r2,4(r23)
   12a0c:	003f7b06 	br	127fc <_realloc_r+0x148>
   12a10:	80c00017 	ldw	r3,0(r16)
   12a14:	90c00015 	stw	r3,0(r18)
   12a18:	80c00117 	ldw	r3,4(r16)
   12a1c:	90c00115 	stw	r3,4(r18)
   12a20:	00c006c4 	movi	r3,27
   12a24:	19804636 	bltu	r3,r6,12b40 <_realloc_r+0x48c>
   12a28:	90800204 	addi	r2,r18,8
   12a2c:	80c00204 	addi	r3,r16,8
   12a30:	003fb906 	br	12918 <_realloc_r+0x264>
   12a34:	9005883a 	mov	r2,r18
   12a38:	8007883a 	mov	r3,r16
   12a3c:	19000017 	ldw	r4,0(r3)
   12a40:	9021883a 	mov	r16,r18
   12a44:	b82d883a 	mov	r22,r23
   12a48:	11000015 	stw	r4,0(r2)
   12a4c:	19000117 	ldw	r4,4(r3)
   12a50:	11000115 	stw	r4,4(r2)
   12a54:	18c00217 	ldw	r3,8(r3)
   12a58:	10c00215 	stw	r3,8(r2)
   12a5c:	b8800117 	ldw	r2,4(r23)
   12a60:	003f6606 	br	127fc <_realloc_r+0x148>
   12a64:	2445c83a 	sub	r2,r4,r17
   12a68:	b46d883a 	add	r22,r22,r17
   12a6c:	10800054 	ori	r2,r2,1
   12a70:	b0800115 	stw	r2,4(r22)
   12a74:	80bfff17 	ldw	r2,-4(r16)
   12a78:	a809883a 	mov	r4,r21
   12a7c:	e5800215 	stw	r22,8(fp)
   12a80:	1080004c 	andi	r2,r2,1
   12a84:	88a2b03a 	or	r17,r17,r2
   12a88:	847fff15 	stw	r17,-4(r16)
   12a8c:	00141f40 	call	141f4 <__malloc_unlock>
   12a90:	8025883a 	mov	r18,r16
   12a94:	003f6606 	br	12830 <_realloc_r+0x17c>
   12a98:	9009883a 	mov	r4,r18
   12a9c:	800b883a 	mov	r5,r16
   12aa0:	00125280 	call	12528 <memmove>
   12aa4:	003fa206 	br	12930 <_realloc_r+0x27c>
   12aa8:	88800404 	addi	r2,r17,16
   12aac:	a0bf8716 	blt	r20,r2,128cc <_realloc_r+0x218>
   12ab0:	b8800317 	ldw	r2,12(r23)
   12ab4:	b8c00217 	ldw	r3,8(r23)
   12ab8:	99bfff04 	addi	r6,r19,-4
   12abc:	01000904 	movi	r4,36
   12ac0:	18800315 	stw	r2,12(r3)
   12ac4:	10c00215 	stw	r3,8(r2)
   12ac8:	bc800204 	addi	r18,r23,8
   12acc:	21806536 	bltu	r4,r6,12c64 <_realloc_r+0x5b0>
   12ad0:	008004c4 	movi	r2,19
   12ad4:	1180592e 	bgeu	r2,r6,12c3c <_realloc_r+0x588>
   12ad8:	80800017 	ldw	r2,0(r16)
   12adc:	b8800215 	stw	r2,8(r23)
   12ae0:	80800117 	ldw	r2,4(r16)
   12ae4:	b8800315 	stw	r2,12(r23)
   12ae8:	008006c4 	movi	r2,27
   12aec:	11806136 	bltu	r2,r6,12c74 <_realloc_r+0x5c0>
   12af0:	b8800404 	addi	r2,r23,16
   12af4:	80c00204 	addi	r3,r16,8
   12af8:	19000017 	ldw	r4,0(r3)
   12afc:	11000015 	stw	r4,0(r2)
   12b00:	19000117 	ldw	r4,4(r3)
   12b04:	11000115 	stw	r4,4(r2)
   12b08:	18c00217 	ldw	r3,8(r3)
   12b0c:	10c00215 	stw	r3,8(r2)
   12b10:	a447c83a 	sub	r3,r20,r17
   12b14:	bc45883a 	add	r2,r23,r17
   12b18:	18c00054 	ori	r3,r3,1
   12b1c:	10c00115 	stw	r3,4(r2)
   12b20:	b8c00117 	ldw	r3,4(r23)
   12b24:	e0800215 	stw	r2,8(fp)
   12b28:	a809883a 	mov	r4,r21
   12b2c:	1880004c 	andi	r2,r3,1
   12b30:	88a2b03a 	or	r17,r17,r2
   12b34:	bc400115 	stw	r17,4(r23)
   12b38:	00141f40 	call	141f4 <__malloc_unlock>
   12b3c:	003f3c06 	br	12830 <_realloc_r+0x17c>
   12b40:	80c00217 	ldw	r3,8(r16)
   12b44:	90c00215 	stw	r3,8(r18)
   12b48:	80c00317 	ldw	r3,12(r16)
   12b4c:	90c00315 	stw	r3,12(r18)
   12b50:	30802426 	beq	r6,r2,12be4 <_realloc_r+0x530>
   12b54:	90800404 	addi	r2,r18,16
   12b58:	80c00404 	addi	r3,r16,16
   12b5c:	003f6e06 	br	12918 <_realloc_r+0x264>
   12b60:	953fff17 	ldw	r20,-4(r18)
   12b64:	00ffff04 	movi	r3,-4
   12b68:	a0e8703a 	and	r20,r20,r3
   12b6c:	a4e9883a 	add	r20,r20,r19
   12b70:	003f2206 	br	127fc <_realloc_r+0x148>
   12b74:	800b883a 	mov	r5,r16
   12b78:	9009883a 	mov	r4,r18
   12b7c:	00125280 	call	12528 <memmove>
   12b80:	9021883a 	mov	r16,r18
   12b84:	b8800117 	ldw	r2,4(r23)
   12b88:	b82d883a 	mov	r22,r23
   12b8c:	003f1b06 	br	127fc <_realloc_r+0x148>
   12b90:	9005883a 	mov	r2,r18
   12b94:	8007883a 	mov	r3,r16
   12b98:	003f9206 	br	129e4 <_realloc_r+0x330>
   12b9c:	800b883a 	mov	r5,r16
   12ba0:	9009883a 	mov	r4,r18
   12ba4:	d9c00015 	stw	r7,0(sp)
   12ba8:	00125280 	call	12528 <memmove>
   12bac:	d9c00017 	ldw	r7,0(sp)
   12bb0:	9021883a 	mov	r16,r18
   12bb4:	b8800117 	ldw	r2,4(r23)
   12bb8:	3829883a 	mov	r20,r7
   12bbc:	b82d883a 	mov	r22,r23
   12bc0:	003f0e06 	br	127fc <_realloc_r+0x148>
   12bc4:	80800217 	ldw	r2,8(r16)
   12bc8:	b8800415 	stw	r2,16(r23)
   12bcc:	80800317 	ldw	r2,12(r16)
   12bd0:	b8800515 	stw	r2,20(r23)
   12bd4:	31001226 	beq	r6,r4,12c20 <_realloc_r+0x56c>
   12bd8:	b8800604 	addi	r2,r23,24
   12bdc:	80c00404 	addi	r3,r16,16
   12be0:	003f9606 	br	12a3c <_realloc_r+0x388>
   12be4:	81000417 	ldw	r4,16(r16)
   12be8:	90800604 	addi	r2,r18,24
   12bec:	80c00604 	addi	r3,r16,24
   12bf0:	91000415 	stw	r4,16(r18)
   12bf4:	81000517 	ldw	r4,20(r16)
   12bf8:	91000515 	stw	r4,20(r18)
   12bfc:	003f4606 	br	12918 <_realloc_r+0x264>
   12c00:	80800217 	ldw	r2,8(r16)
   12c04:	b8800415 	stw	r2,16(r23)
   12c08:	80800317 	ldw	r2,12(r16)
   12c0c:	b8800515 	stw	r2,20(r23)
   12c10:	31000d26 	beq	r6,r4,12c48 <_realloc_r+0x594>
   12c14:	b8800604 	addi	r2,r23,24
   12c18:	80c00404 	addi	r3,r16,16
   12c1c:	003f7106 	br	129e4 <_realloc_r+0x330>
   12c20:	81000417 	ldw	r4,16(r16)
   12c24:	b8800804 	addi	r2,r23,32
   12c28:	80c00604 	addi	r3,r16,24
   12c2c:	b9000615 	stw	r4,24(r23)
   12c30:	81000517 	ldw	r4,20(r16)
   12c34:	b9000715 	stw	r4,28(r23)
   12c38:	003f8006 	br	12a3c <_realloc_r+0x388>
   12c3c:	9005883a 	mov	r2,r18
   12c40:	8007883a 	mov	r3,r16
   12c44:	003fac06 	br	12af8 <_realloc_r+0x444>
   12c48:	81000417 	ldw	r4,16(r16)
   12c4c:	b8800804 	addi	r2,r23,32
   12c50:	80c00604 	addi	r3,r16,24
   12c54:	b9000615 	stw	r4,24(r23)
   12c58:	81000517 	ldw	r4,20(r16)
   12c5c:	b9000715 	stw	r4,28(r23)
   12c60:	003f6006 	br	129e4 <_realloc_r+0x330>
   12c64:	9009883a 	mov	r4,r18
   12c68:	800b883a 	mov	r5,r16
   12c6c:	00125280 	call	12528 <memmove>
   12c70:	003fa706 	br	12b10 <_realloc_r+0x45c>
   12c74:	80800217 	ldw	r2,8(r16)
   12c78:	b8800415 	stw	r2,16(r23)
   12c7c:	80800317 	ldw	r2,12(r16)
   12c80:	b8800515 	stw	r2,20(r23)
   12c84:	31000326 	beq	r6,r4,12c94 <_realloc_r+0x5e0>
   12c88:	b8800604 	addi	r2,r23,24
   12c8c:	80c00404 	addi	r3,r16,16
   12c90:	003f9906 	br	12af8 <_realloc_r+0x444>
   12c94:	81000417 	ldw	r4,16(r16)
   12c98:	b8800804 	addi	r2,r23,32
   12c9c:	80c00604 	addi	r3,r16,24
   12ca0:	b9000615 	stw	r4,24(r23)
   12ca4:	81000517 	ldw	r4,20(r16)
   12ca8:	b9000715 	stw	r4,28(r23)
   12cac:	003f9206 	br	12af8 <_realloc_r+0x444>

00012cb0 <__swsetup_r>:
   12cb0:	008000b4 	movhi	r2,2
   12cb4:	10a0fc04 	addi	r2,r2,-31760
   12cb8:	10800017 	ldw	r2,0(r2)
   12cbc:	defffd04 	addi	sp,sp,-12
   12cc0:	dc400115 	stw	r17,4(sp)
   12cc4:	dc000015 	stw	r16,0(sp)
   12cc8:	dfc00215 	stw	ra,8(sp)
   12ccc:	2023883a 	mov	r17,r4
   12cd0:	2821883a 	mov	r16,r5
   12cd4:	10000226 	beq	r2,zero,12ce0 <__swsetup_r+0x30>
   12cd8:	10c00e17 	ldw	r3,56(r2)
   12cdc:	18003d26 	beq	r3,zero,12dd4 <__swsetup_r+0x124>
   12ce0:	8080030b 	ldhu	r2,12(r16)
   12ce4:	10c0020c 	andi	r3,r2,8
   12ce8:	18ffffcc 	andi	r3,r3,65535
   12cec:	18e0001c 	xori	r3,r3,32768
   12cf0:	18e00004 	addi	r3,r3,-32768
   12cf4:	18001226 	beq	r3,zero,12d40 <__swsetup_r+0x90>
   12cf8:	80c00417 	ldw	r3,16(r16)
   12cfc:	18001f26 	beq	r3,zero,12d7c <__swsetup_r+0xcc>
   12d00:	1100004c 	andi	r4,r2,1
   12d04:	2000261e 	bne	r4,zero,12da0 <__swsetup_r+0xf0>
   12d08:	1080008c 	andi	r2,r2,2
   12d0c:	10bfffcc 	andi	r2,r2,65535
   12d10:	10a0001c 	xori	r2,r2,32768
   12d14:	10a00004 	addi	r2,r2,-32768
   12d18:	1000311e 	bne	r2,zero,12de0 <__swsetup_r+0x130>
   12d1c:	80800517 	ldw	r2,20(r16)
   12d20:	80800215 	stw	r2,8(r16)
   12d24:	18002326 	beq	r3,zero,12db4 <__swsetup_r+0x104>
   12d28:	0005883a 	mov	r2,zero
   12d2c:	dfc00217 	ldw	ra,8(sp)
   12d30:	dc400117 	ldw	r17,4(sp)
   12d34:	dc000017 	ldw	r16,0(sp)
   12d38:	dec00304 	addi	sp,sp,12
   12d3c:	f800283a 	ret
   12d40:	10c0040c 	andi	r3,r2,16
   12d44:	18ffffcc 	andi	r3,r3,65535
   12d48:	18e0001c 	xori	r3,r3,32768
   12d4c:	18e00004 	addi	r3,r3,-32768
   12d50:	18001e26 	beq	r3,zero,12dcc <__swsetup_r+0x11c>
   12d54:	10c0010c 	andi	r3,r2,4
   12d58:	18ffffcc 	andi	r3,r3,65535
   12d5c:	18e0001c 	xori	r3,r3,32768
   12d60:	18e00004 	addi	r3,r3,-32768
   12d64:	1800211e 	bne	r3,zero,12dec <__swsetup_r+0x13c>
   12d68:	80c00417 	ldw	r3,16(r16)
   12d6c:	11400214 	ori	r5,r2,8
   12d70:	8140030d 	sth	r5,12(r16)
   12d74:	2805883a 	mov	r2,r5
   12d78:	183fe11e 	bne	r3,zero,12d00 <__swsetup_r+0x50>
   12d7c:	1140a00c 	andi	r5,r2,640
   12d80:	01008004 	movi	r4,512
   12d84:	293fde26 	beq	r5,r4,12d00 <__swsetup_r+0x50>
   12d88:	8809883a 	mov	r4,r17
   12d8c:	800b883a 	mov	r5,r16
   12d90:	00134880 	call	13488 <__smakebuf_r>
   12d94:	8080030b 	ldhu	r2,12(r16)
   12d98:	80c00417 	ldw	r3,16(r16)
   12d9c:	003fd806 	br	12d00 <__swsetup_r+0x50>
   12da0:	80800517 	ldw	r2,20(r16)
   12da4:	80000215 	stw	zero,8(r16)
   12da8:	0085c83a 	sub	r2,zero,r2
   12dac:	80800615 	stw	r2,24(r16)
   12db0:	183fdd1e 	bne	r3,zero,12d28 <__swsetup_r+0x78>
   12db4:	8080030b 	ldhu	r2,12(r16)
   12db8:	1080200c 	andi	r2,r2,128
   12dbc:	10bfffcc 	andi	r2,r2,65535
   12dc0:	10a0001c 	xori	r2,r2,32768
   12dc4:	10a00004 	addi	r2,r2,-32768
   12dc8:	103fd826 	beq	r2,zero,12d2c <__swsetup_r+0x7c>
   12dcc:	00bfffc4 	movi	r2,-1
   12dd0:	003fd606 	br	12d2c <__swsetup_r+0x7c>
   12dd4:	1009883a 	mov	r4,r2
   12dd8:	00130e00 	call	130e0 <__sinit>
   12ddc:	003fc006 	br	12ce0 <__swsetup_r+0x30>
   12de0:	0005883a 	mov	r2,zero
   12de4:	80800215 	stw	r2,8(r16)
   12de8:	003fce06 	br	12d24 <__swsetup_r+0x74>
   12dec:	81400c17 	ldw	r5,48(r16)
   12df0:	28000626 	beq	r5,zero,12e0c <__swsetup_r+0x15c>
   12df4:	80c01004 	addi	r3,r16,64
   12df8:	28c00326 	beq	r5,r3,12e08 <__swsetup_r+0x158>
   12dfc:	8809883a 	mov	r4,r17
   12e00:	0011b3c0 	call	11b3c <_free_r>
   12e04:	8080030b 	ldhu	r2,12(r16)
   12e08:	80000c15 	stw	zero,48(r16)
   12e0c:	80c00417 	ldw	r3,16(r16)
   12e10:	013ff6c4 	movi	r4,-37
   12e14:	2084703a 	and	r2,r4,r2
   12e18:	80000115 	stw	zero,4(r16)
   12e1c:	80c00015 	stw	r3,0(r16)
   12e20:	003fd206 	br	12d6c <__swsetup_r+0xbc>

00012e24 <_fflush_r>:
   12e24:	defffb04 	addi	sp,sp,-20
   12e28:	dcc00315 	stw	r19,12(sp)
   12e2c:	dc400115 	stw	r17,4(sp)
   12e30:	dfc00415 	stw	ra,16(sp)
   12e34:	dc800215 	stw	r18,8(sp)
   12e38:	dc000015 	stw	r16,0(sp)
   12e3c:	2027883a 	mov	r19,r4
   12e40:	2823883a 	mov	r17,r5
   12e44:	20000226 	beq	r4,zero,12e50 <_fflush_r+0x2c>
   12e48:	20800e17 	ldw	r2,56(r4)
   12e4c:	10005726 	beq	r2,zero,12fac <_fflush_r+0x188>
   12e50:	8880030b 	ldhu	r2,12(r17)
   12e54:	10c0020c 	andi	r3,r2,8
   12e58:	18ffffcc 	andi	r3,r3,65535
   12e5c:	18e0001c 	xori	r3,r3,32768
   12e60:	18e00004 	addi	r3,r3,-32768
   12e64:	1800311e 	bne	r3,zero,12f2c <_fflush_r+0x108>
   12e68:	89000117 	ldw	r4,4(r17)
   12e6c:	10c20014 	ori	r3,r2,2048
   12e70:	88c0030d 	sth	r3,12(r17)
   12e74:	180b883a 	mov	r5,r3
   12e78:	0100520e 	bge	zero,r4,12fc4 <_fflush_r+0x1a0>
   12e7c:	88c00a17 	ldw	r3,40(r17)
   12e80:	18002226 	beq	r3,zero,12f0c <_fflush_r+0xe8>
   12e84:	1084000c 	andi	r2,r2,4096
   12e88:	10bfffcc 	andi	r2,r2,65535
   12e8c:	10a0001c 	xori	r2,r2,32768
   12e90:	10a00004 	addi	r2,r2,-32768
   12e94:	10004e26 	beq	r2,zero,12fd0 <_fflush_r+0x1ac>
   12e98:	8c001417 	ldw	r16,80(r17)
   12e9c:	2940010c 	andi	r5,r5,4
   12ea0:	297fffcc 	andi	r5,r5,65535
   12ea4:	2960001c 	xori	r5,r5,32768
   12ea8:	29600004 	addi	r5,r5,-32768
   12eac:	28000626 	beq	r5,zero,12ec8 <_fflush_r+0xa4>
   12eb0:	89000117 	ldw	r4,4(r17)
   12eb4:	88800c17 	ldw	r2,48(r17)
   12eb8:	8121c83a 	sub	r16,r16,r4
   12ebc:	10000226 	beq	r2,zero,12ec8 <_fflush_r+0xa4>
   12ec0:	88800f17 	ldw	r2,60(r17)
   12ec4:	80a1c83a 	sub	r16,r16,r2
   12ec8:	89400717 	ldw	r5,28(r17)
   12ecc:	9809883a 	mov	r4,r19
   12ed0:	800d883a 	mov	r6,r16
   12ed4:	000f883a 	mov	r7,zero
   12ed8:	183ee83a 	callr	r3
   12edc:	8080281e 	bne	r16,r2,12f80 <_fflush_r+0x15c>
   12ee0:	8880030b 	ldhu	r2,12(r17)
   12ee4:	88c00417 	ldw	r3,16(r17)
   12ee8:	88000115 	stw	zero,4(r17)
   12eec:	113dffcc 	andi	r4,r2,63487
   12ef0:	1084000c 	andi	r2,r2,4096
   12ef4:	10bfffcc 	andi	r2,r2,65535
   12ef8:	10a0001c 	xori	r2,r2,32768
   12efc:	8900030d 	sth	r4,12(r17)
   12f00:	88c00015 	stw	r3,0(r17)
   12f04:	10a00004 	addi	r2,r2,-32768
   12f08:	10002c1e 	bne	r2,zero,12fbc <_fflush_r+0x198>
   12f0c:	0005883a 	mov	r2,zero
   12f10:	dfc00417 	ldw	ra,16(sp)
   12f14:	dcc00317 	ldw	r19,12(sp)
   12f18:	dc800217 	ldw	r18,8(sp)
   12f1c:	dc400117 	ldw	r17,4(sp)
   12f20:	dc000017 	ldw	r16,0(sp)
   12f24:	dec00504 	addi	sp,sp,20
   12f28:	f800283a 	ret
   12f2c:	8c800417 	ldw	r18,16(r17)
   12f30:	903ff626 	beq	r18,zero,12f0c <_fflush_r+0xe8>
   12f34:	8c000017 	ldw	r16,0(r17)
   12f38:	108000cc 	andi	r2,r2,3
   12f3c:	8c800015 	stw	r18,0(r17)
   12f40:	84a1c83a 	sub	r16,r16,r18
   12f44:	10001b1e 	bne	r2,zero,12fb4 <_fflush_r+0x190>
   12f48:	88800517 	ldw	r2,20(r17)
   12f4c:	88800215 	stw	r2,8(r17)
   12f50:	04000316 	blt	zero,r16,12f60 <_fflush_r+0x13c>
   12f54:	003fed06 	br	12f0c <_fflush_r+0xe8>
   12f58:	90a5883a 	add	r18,r18,r2
   12f5c:	043feb0e 	bge	zero,r16,12f0c <_fflush_r+0xe8>
   12f60:	88800917 	ldw	r2,36(r17)
   12f64:	89400717 	ldw	r5,28(r17)
   12f68:	800f883a 	mov	r7,r16
   12f6c:	900d883a 	mov	r6,r18
   12f70:	9809883a 	mov	r4,r19
   12f74:	103ee83a 	callr	r2
   12f78:	80a1c83a 	sub	r16,r16,r2
   12f7c:	00bff616 	blt	zero,r2,12f58 <_fflush_r+0x134>
   12f80:	88c0030b 	ldhu	r3,12(r17)
   12f84:	00bfffc4 	movi	r2,-1
   12f88:	18c01014 	ori	r3,r3,64
   12f8c:	88c0030d 	sth	r3,12(r17)
   12f90:	dfc00417 	ldw	ra,16(sp)
   12f94:	dcc00317 	ldw	r19,12(sp)
   12f98:	dc800217 	ldw	r18,8(sp)
   12f9c:	dc400117 	ldw	r17,4(sp)
   12fa0:	dc000017 	ldw	r16,0(sp)
   12fa4:	dec00504 	addi	sp,sp,20
   12fa8:	f800283a 	ret
   12fac:	00130e00 	call	130e0 <__sinit>
   12fb0:	003fa706 	br	12e50 <_fflush_r+0x2c>
   12fb4:	0005883a 	mov	r2,zero
   12fb8:	003fe406 	br	12f4c <_fflush_r+0x128>
   12fbc:	8c001415 	stw	r16,80(r17)
   12fc0:	003fd206 	br	12f0c <_fflush_r+0xe8>
   12fc4:	88c00f17 	ldw	r3,60(r17)
   12fc8:	00ffac16 	blt	zero,r3,12e7c <_fflush_r+0x58>
   12fcc:	003fcf06 	br	12f0c <_fflush_r+0xe8>
   12fd0:	89400717 	ldw	r5,28(r17)
   12fd4:	9809883a 	mov	r4,r19
   12fd8:	000d883a 	mov	r6,zero
   12fdc:	01c00044 	movi	r7,1
   12fe0:	183ee83a 	callr	r3
   12fe4:	1021883a 	mov	r16,r2
   12fe8:	00bfffc4 	movi	r2,-1
   12fec:	80800326 	beq	r16,r2,12ffc <_fflush_r+0x1d8>
   12ff0:	8940030b 	ldhu	r5,12(r17)
   12ff4:	88c00a17 	ldw	r3,40(r17)
   12ff8:	003fa806 	br	12e9c <_fflush_r+0x78>
   12ffc:	98c00017 	ldw	r3,0(r19)
   13000:	00800744 	movi	r2,29
   13004:	18bfde1e 	bne	r3,r2,12f80 <_fflush_r+0x15c>
   13008:	003fc006 	br	12f0c <_fflush_r+0xe8>

0001300c <fflush>:
   1300c:	200b883a 	mov	r5,r4
   13010:	20000426 	beq	r4,zero,13024 <fflush+0x18>
   13014:	008000b4 	movhi	r2,2
   13018:	10a0fc04 	addi	r2,r2,-31760
   1301c:	11000017 	ldw	r4,0(r2)
   13020:	0012e241 	jmpi	12e24 <_fflush_r>
   13024:	008000b4 	movhi	r2,2
   13028:	10a0fb04 	addi	r2,r2,-31764
   1302c:	11000017 	ldw	r4,0(r2)
   13030:	01400074 	movhi	r5,1
   13034:	294b8904 	addi	r5,r5,11812
   13038:	00133d01 	jmpi	133d0 <_fwalk_reent>

0001303c <__fp_lock>:
   1303c:	0005883a 	mov	r2,zero
   13040:	f800283a 	ret

00013044 <__fp_unlock>:
   13044:	0005883a 	mov	r2,zero
   13048:	f800283a 	ret

0001304c <_cleanup_r>:
   1304c:	01400074 	movhi	r5,1
   13050:	294e9604 	addi	r5,r5,14936
   13054:	00133281 	jmpi	13328 <_fwalk>

00013058 <__sfmoreglue>:
   13058:	defffc04 	addi	sp,sp,-16
   1305c:	dc800215 	stw	r18,8(sp)
   13060:	2825883a 	mov	r18,r5
   13064:	dc000015 	stw	r16,0(sp)
   13068:	01401704 	movi	r5,92
   1306c:	2021883a 	mov	r16,r4
   13070:	9009883a 	mov	r4,r18
   13074:	dfc00315 	stw	ra,12(sp)
   13078:	dc400115 	stw	r17,4(sp)
   1307c:	00110a40 	call	110a4 <__mulsi3>
   13080:	8009883a 	mov	r4,r16
   13084:	11400304 	addi	r5,r2,12
   13088:	1023883a 	mov	r17,r2
   1308c:	00110f40 	call	110f4 <_malloc_r>
   13090:	1021883a 	mov	r16,r2
   13094:	10000726 	beq	r2,zero,130b4 <__sfmoreglue+0x5c>
   13098:	11000304 	addi	r4,r2,12
   1309c:	10000015 	stw	zero,0(r2)
   130a0:	14800115 	stw	r18,4(r2)
   130a4:	11000215 	stw	r4,8(r2)
   130a8:	000b883a 	mov	r5,zero
   130ac:	880d883a 	mov	r6,r17
   130b0:	00136300 	call	13630 <memset>
   130b4:	8005883a 	mov	r2,r16
   130b8:	dfc00317 	ldw	ra,12(sp)
   130bc:	dc800217 	ldw	r18,8(sp)
   130c0:	dc400117 	ldw	r17,4(sp)
   130c4:	dc000017 	ldw	r16,0(sp)
   130c8:	dec00404 	addi	sp,sp,16
   130cc:	f800283a 	ret

000130d0 <_cleanup>:
   130d0:	008000b4 	movhi	r2,2
   130d4:	10a0fb04 	addi	r2,r2,-31764
   130d8:	11000017 	ldw	r4,0(r2)
   130dc:	001304c1 	jmpi	1304c <_cleanup_r>

000130e0 <__sinit>:
   130e0:	20800e17 	ldw	r2,56(r4)
   130e4:	1000401e 	bne	r2,zero,131e8 <__sinit+0x108>
   130e8:	21400117 	ldw	r5,4(r4)
   130ec:	01800074 	movhi	r6,1
   130f0:	318c1304 	addi	r6,r6,12364
   130f4:	20c00217 	ldw	r3,8(r4)
   130f8:	21800f15 	stw	r6,60(r4)
   130fc:	2080bb04 	addi	r2,r4,748
   13100:	02400044 	movi	r9,1
   13104:	018000c4 	movi	r6,3
   13108:	2180b915 	stw	r6,740(r4)
   1310c:	2080ba15 	stw	r2,744(r4)
   13110:	22400e15 	stw	r9,56(r4)
   13114:	20800317 	ldw	r2,12(r4)
   13118:	2000b815 	stw	zero,736(r4)
   1311c:	02000074 	movhi	r8,1
   13120:	420dc304 	addi	r8,r8,14092
   13124:	01c00074 	movhi	r7,1
   13128:	39cdd804 	addi	r7,r7,14176
   1312c:	01800074 	movhi	r6,1
   13130:	318dfa04 	addi	r6,r6,14312
   13134:	01000074 	movhi	r4,1
   13138:	210e1104 	addi	r4,r4,14404
   1313c:	02800104 	movi	r10,4
   13140:	28000015 	stw	zero,0(r5)
   13144:	28000115 	stw	zero,4(r5)
   13148:	28000215 	stw	zero,8(r5)
   1314c:	2a80030d 	sth	r10,12(r5)
   13150:	2800038d 	sth	zero,14(r5)
   13154:	28000415 	stw	zero,16(r5)
   13158:	28000515 	stw	zero,20(r5)
   1315c:	28000615 	stw	zero,24(r5)
   13160:	29400715 	stw	r5,28(r5)
   13164:	2a000815 	stw	r8,32(r5)
   13168:	29c00915 	stw	r7,36(r5)
   1316c:	29800a15 	stw	r6,40(r5)
   13170:	29000b15 	stw	r4,44(r5)
   13174:	01400284 	movi	r5,10
   13178:	18000015 	stw	zero,0(r3)
   1317c:	18000115 	stw	zero,4(r3)
   13180:	18000215 	stw	zero,8(r3)
   13184:	1940030d 	sth	r5,12(r3)
   13188:	1a40038d 	sth	r9,14(r3)
   1318c:	18000415 	stw	zero,16(r3)
   13190:	18000515 	stw	zero,20(r3)
   13194:	18000615 	stw	zero,24(r3)
   13198:	18c00715 	stw	r3,28(r3)
   1319c:	1a000815 	stw	r8,32(r3)
   131a0:	19c00915 	stw	r7,36(r3)
   131a4:	19800a15 	stw	r6,40(r3)
   131a8:	19000b15 	stw	r4,44(r3)
   131ac:	00c00484 	movi	r3,18
   131b0:	10c0030d 	sth	r3,12(r2)
   131b4:	00c00084 	movi	r3,2
   131b8:	10000015 	stw	zero,0(r2)
   131bc:	10000115 	stw	zero,4(r2)
   131c0:	10000215 	stw	zero,8(r2)
   131c4:	10c0038d 	sth	r3,14(r2)
   131c8:	10000415 	stw	zero,16(r2)
   131cc:	10000515 	stw	zero,20(r2)
   131d0:	10000615 	stw	zero,24(r2)
   131d4:	10800715 	stw	r2,28(r2)
   131d8:	12000815 	stw	r8,32(r2)
   131dc:	11c00915 	stw	r7,36(r2)
   131e0:	11800a15 	stw	r6,40(r2)
   131e4:	11000b15 	stw	r4,44(r2)
   131e8:	f800283a 	ret

000131ec <__sfp>:
   131ec:	defffc04 	addi	sp,sp,-16
   131f0:	008000b4 	movhi	r2,2
   131f4:	10a0fb04 	addi	r2,r2,-31764
   131f8:	dc400115 	stw	r17,4(sp)
   131fc:	14400017 	ldw	r17,0(r2)
   13200:	dc800215 	stw	r18,8(sp)
   13204:	dfc00315 	stw	ra,12(sp)
   13208:	88800e17 	ldw	r2,56(r17)
   1320c:	dc000015 	stw	r16,0(sp)
   13210:	2025883a 	mov	r18,r4
   13214:	10002826 	beq	r2,zero,132b8 <__sfp+0xcc>
   13218:	8c40b804 	addi	r17,r17,736
   1321c:	043fffc4 	movi	r16,-1
   13220:	89400117 	ldw	r5,4(r17)
   13224:	88800217 	ldw	r2,8(r17)
   13228:	297fffc4 	addi	r5,r5,-1
   1322c:	28000a16 	blt	r5,zero,13258 <__sfp+0x6c>
   13230:	10c0030f 	ldh	r3,12(r2)
   13234:	18000c26 	beq	r3,zero,13268 <__sfp+0x7c>
   13238:	10c01a04 	addi	r3,r2,104
   1323c:	00000206 	br	13248 <__sfp+0x5c>
   13240:	19bfe90f 	ldh	r6,-92(r3)
   13244:	30000826 	beq	r6,zero,13268 <__sfp+0x7c>
   13248:	297fffc4 	addi	r5,r5,-1
   1324c:	18bffd04 	addi	r2,r3,-12
   13250:	18c01704 	addi	r3,r3,92
   13254:	2c3ffa1e 	bne	r5,r16,13240 <__sfp+0x54>
   13258:	88800017 	ldw	r2,0(r17)
   1325c:	10001926 	beq	r2,zero,132c4 <__sfp+0xd8>
   13260:	1023883a 	mov	r17,r2
   13264:	003fee06 	br	13220 <__sfp+0x34>
   13268:	00ffffc4 	movi	r3,-1
   1326c:	10c0038d 	sth	r3,14(r2)
   13270:	00c00044 	movi	r3,1
   13274:	10c0030d 	sth	r3,12(r2)
   13278:	10000015 	stw	zero,0(r2)
   1327c:	10000215 	stw	zero,8(r2)
   13280:	10000115 	stw	zero,4(r2)
   13284:	10000415 	stw	zero,16(r2)
   13288:	10000515 	stw	zero,20(r2)
   1328c:	10000615 	stw	zero,24(r2)
   13290:	10000c15 	stw	zero,48(r2)
   13294:	10000d15 	stw	zero,52(r2)
   13298:	10001115 	stw	zero,68(r2)
   1329c:	10001215 	stw	zero,72(r2)
   132a0:	dfc00317 	ldw	ra,12(sp)
   132a4:	dc800217 	ldw	r18,8(sp)
   132a8:	dc400117 	ldw	r17,4(sp)
   132ac:	dc000017 	ldw	r16,0(sp)
   132b0:	dec00404 	addi	sp,sp,16
   132b4:	f800283a 	ret
   132b8:	8809883a 	mov	r4,r17
   132bc:	00130e00 	call	130e0 <__sinit>
   132c0:	003fd506 	br	13218 <__sfp+0x2c>
   132c4:	9009883a 	mov	r4,r18
   132c8:	01400104 	movi	r5,4
   132cc:	00130580 	call	13058 <__sfmoreglue>
   132d0:	88800015 	stw	r2,0(r17)
   132d4:	103fe21e 	bne	r2,zero,13260 <__sfp+0x74>
   132d8:	00800304 	movi	r2,12
   132dc:	90800015 	stw	r2,0(r18)
   132e0:	0005883a 	mov	r2,zero
   132e4:	003fee06 	br	132a0 <__sfp+0xb4>

000132e8 <__sfp_lock_acquire>:
   132e8:	f800283a 	ret

000132ec <__sfp_lock_release>:
   132ec:	f800283a 	ret

000132f0 <__sinit_lock_acquire>:
   132f0:	f800283a 	ret

000132f4 <__sinit_lock_release>:
   132f4:	f800283a 	ret

000132f8 <__fp_lock_all>:
   132f8:	008000b4 	movhi	r2,2
   132fc:	10a0fc04 	addi	r2,r2,-31760
   13300:	11000017 	ldw	r4,0(r2)
   13304:	01400074 	movhi	r5,1
   13308:	294c0f04 	addi	r5,r5,12348
   1330c:	00133281 	jmpi	13328 <_fwalk>

00013310 <__fp_unlock_all>:
   13310:	008000b4 	movhi	r2,2
   13314:	10a0fc04 	addi	r2,r2,-31760
   13318:	11000017 	ldw	r4,0(r2)
   1331c:	01400074 	movhi	r5,1
   13320:	294c1104 	addi	r5,r5,12356
   13324:	00133281 	jmpi	13328 <_fwalk>

00013328 <_fwalk>:
   13328:	defff904 	addi	sp,sp,-28
   1332c:	dcc00315 	stw	r19,12(sp)
   13330:	24c0b804 	addi	r19,r4,736
   13334:	dd400515 	stw	r21,20(sp)
   13338:	dd000415 	stw	r20,16(sp)
   1333c:	dfc00615 	stw	ra,24(sp)
   13340:	dc800215 	stw	r18,8(sp)
   13344:	dc400115 	stw	r17,4(sp)
   13348:	dc000015 	stw	r16,0(sp)
   1334c:	282b883a 	mov	r21,r5
   13350:	0029883a 	mov	r20,zero
   13354:	00132e80 	call	132e8 <__sfp_lock_acquire>
   13358:	98001226 	beq	r19,zero,133a4 <_fwalk+0x7c>
   1335c:	04bfffc4 	movi	r18,-1
   13360:	9c400117 	ldw	r17,4(r19)
   13364:	9c000217 	ldw	r16,8(r19)
   13368:	8c7fffc4 	addi	r17,r17,-1
   1336c:	88000b16 	blt	r17,zero,1339c <_fwalk+0x74>
   13370:	84000304 	addi	r16,r16,12
   13374:	80c0000f 	ldh	r3,0(r16)
   13378:	8c7fffc4 	addi	r17,r17,-1
   1337c:	813ffd04 	addi	r4,r16,-12
   13380:	18000426 	beq	r3,zero,13394 <_fwalk+0x6c>
   13384:	80c0008f 	ldh	r3,2(r16)
   13388:	1c800226 	beq	r3,r18,13394 <_fwalk+0x6c>
   1338c:	a83ee83a 	callr	r21
   13390:	a0a8b03a 	or	r20,r20,r2
   13394:	84001704 	addi	r16,r16,92
   13398:	8cbff61e 	bne	r17,r18,13374 <_fwalk+0x4c>
   1339c:	9cc00017 	ldw	r19,0(r19)
   133a0:	983fef1e 	bne	r19,zero,13360 <_fwalk+0x38>
   133a4:	00132ec0 	call	132ec <__sfp_lock_release>
   133a8:	a005883a 	mov	r2,r20
   133ac:	dfc00617 	ldw	ra,24(sp)
   133b0:	dd400517 	ldw	r21,20(sp)
   133b4:	dd000417 	ldw	r20,16(sp)
   133b8:	dcc00317 	ldw	r19,12(sp)
   133bc:	dc800217 	ldw	r18,8(sp)
   133c0:	dc400117 	ldw	r17,4(sp)
   133c4:	dc000017 	ldw	r16,0(sp)
   133c8:	dec00704 	addi	sp,sp,28
   133cc:	f800283a 	ret

000133d0 <_fwalk_reent>:
   133d0:	defff804 	addi	sp,sp,-32
   133d4:	dcc00315 	stw	r19,12(sp)
   133d8:	24c0b804 	addi	r19,r4,736
   133dc:	dd800615 	stw	r22,24(sp)
   133e0:	dd400515 	stw	r21,20(sp)
   133e4:	dd000415 	stw	r20,16(sp)
   133e8:	dfc00715 	stw	ra,28(sp)
   133ec:	dc800215 	stw	r18,8(sp)
   133f0:	dc400115 	stw	r17,4(sp)
   133f4:	dc000015 	stw	r16,0(sp)
   133f8:	2029883a 	mov	r20,r4
   133fc:	282b883a 	mov	r21,r5
   13400:	002d883a 	mov	r22,zero
   13404:	00132e80 	call	132e8 <__sfp_lock_acquire>
   13408:	98001326 	beq	r19,zero,13458 <_fwalk_reent+0x88>
   1340c:	04bfffc4 	movi	r18,-1
   13410:	9c400117 	ldw	r17,4(r19)
   13414:	9c000217 	ldw	r16,8(r19)
   13418:	8c7fffc4 	addi	r17,r17,-1
   1341c:	88000c16 	blt	r17,zero,13450 <_fwalk_reent+0x80>
   13420:	84000304 	addi	r16,r16,12
   13424:	80c0000f 	ldh	r3,0(r16)
   13428:	8c7fffc4 	addi	r17,r17,-1
   1342c:	817ffd04 	addi	r5,r16,-12
   13430:	18000526 	beq	r3,zero,13448 <_fwalk_reent+0x78>
   13434:	80c0008f 	ldh	r3,2(r16)
   13438:	a009883a 	mov	r4,r20
   1343c:	1c800226 	beq	r3,r18,13448 <_fwalk_reent+0x78>
   13440:	a83ee83a 	callr	r21
   13444:	b0acb03a 	or	r22,r22,r2
   13448:	84001704 	addi	r16,r16,92
   1344c:	8cbff51e 	bne	r17,r18,13424 <_fwalk_reent+0x54>
   13450:	9cc00017 	ldw	r19,0(r19)
   13454:	983fee1e 	bne	r19,zero,13410 <_fwalk_reent+0x40>
   13458:	00132ec0 	call	132ec <__sfp_lock_release>
   1345c:	b005883a 	mov	r2,r22
   13460:	dfc00717 	ldw	ra,28(sp)
   13464:	dd800617 	ldw	r22,24(sp)
   13468:	dd400517 	ldw	r21,20(sp)
   1346c:	dd000417 	ldw	r20,16(sp)
   13470:	dcc00317 	ldw	r19,12(sp)
   13474:	dc800217 	ldw	r18,8(sp)
   13478:	dc400117 	ldw	r17,4(sp)
   1347c:	dc000017 	ldw	r16,0(sp)
   13480:	dec00804 	addi	sp,sp,32
   13484:	f800283a 	ret

00013488 <__smakebuf_r>:
   13488:	2880030b 	ldhu	r2,12(r5)
   1348c:	deffed04 	addi	sp,sp,-76
   13490:	dc401015 	stw	r17,64(sp)
   13494:	10c0008c 	andi	r3,r2,2
   13498:	18ffffcc 	andi	r3,r3,65535
   1349c:	18e0001c 	xori	r3,r3,32768
   134a0:	dc000f15 	stw	r16,60(sp)
   134a4:	dfc01215 	stw	ra,72(sp)
   134a8:	dc801115 	stw	r18,68(sp)
   134ac:	18e00004 	addi	r3,r3,-32768
   134b0:	2821883a 	mov	r16,r5
   134b4:	2023883a 	mov	r17,r4
   134b8:	1800381e 	bne	r3,zero,1359c <__smakebuf_r+0x114>
   134bc:	2940038f 	ldh	r5,14(r5)
   134c0:	28002d16 	blt	r5,zero,13578 <__smakebuf_r+0xf0>
   134c4:	d80d883a 	mov	r6,sp
   134c8:	0013a6c0 	call	13a6c <_fstat_r>
   134cc:	10002916 	blt	r2,zero,13574 <__smakebuf_r+0xec>
   134d0:	d8800117 	ldw	r2,4(sp)
   134d4:	00e00014 	movui	r3,32768
   134d8:	10bc000c 	andi	r2,r2,61440
   134dc:	10c03c26 	beq	r2,r3,135d0 <__smakebuf_r+0x148>
   134e0:	80c0030b 	ldhu	r3,12(r16)
   134e4:	18c20014 	ori	r3,r3,2048
   134e8:	80c0030d 	sth	r3,12(r16)
   134ec:	00c80004 	movi	r3,8192
   134f0:	10c00c1e 	bne	r2,r3,13524 <__smakebuf_r+0x9c>
   134f4:	8140038f 	ldh	r5,14(r16)
   134f8:	8809883a 	mov	r4,r17
   134fc:	0013ad40 	call	13ad4 <_isatty_r>
   13500:	10000826 	beq	r2,zero,13524 <__smakebuf_r+0x9c>
   13504:	80c0030b 	ldhu	r3,12(r16)
   13508:	808010c4 	addi	r2,r16,67
   1350c:	80800015 	stw	r2,0(r16)
   13510:	18c00054 	ori	r3,r3,1
   13514:	80800415 	stw	r2,16(r16)
   13518:	00800044 	movi	r2,1
   1351c:	80c0030d 	sth	r3,12(r16)
   13520:	80800515 	stw	r2,20(r16)
   13524:	04810004 	movi	r18,1024
   13528:	8809883a 	mov	r4,r17
   1352c:	900b883a 	mov	r5,r18
   13530:	00110f40 	call	110f4 <_malloc_r>
   13534:	10003026 	beq	r2,zero,135f8 <__smakebuf_r+0x170>
   13538:	80c0030b 	ldhu	r3,12(r16)
   1353c:	01000074 	movhi	r4,1
   13540:	210c1304 	addi	r4,r4,12364
   13544:	89000f15 	stw	r4,60(r17)
   13548:	18c02014 	ori	r3,r3,128
   1354c:	80c0030d 	sth	r3,12(r16)
   13550:	80800015 	stw	r2,0(r16)
   13554:	80800415 	stw	r2,16(r16)
   13558:	84800515 	stw	r18,20(r16)
   1355c:	dfc01217 	ldw	ra,72(sp)
   13560:	dc801117 	ldw	r18,68(sp)
   13564:	dc401017 	ldw	r17,64(sp)
   13568:	dc000f17 	ldw	r16,60(sp)
   1356c:	dec01304 	addi	sp,sp,76
   13570:	f800283a 	ret
   13574:	8080030b 	ldhu	r2,12(r16)
   13578:	10c0200c 	andi	r3,r2,128
   1357c:	18ffffcc 	andi	r3,r3,65535
   13580:	18e0001c 	xori	r3,r3,32768
   13584:	18e00004 	addi	r3,r3,-32768
   13588:	18000f1e 	bne	r3,zero,135c8 <__smakebuf_r+0x140>
   1358c:	04810004 	movi	r18,1024
   13590:	10820014 	ori	r2,r2,2048
   13594:	8080030d 	sth	r2,12(r16)
   13598:	003fe306 	br	13528 <__smakebuf_r+0xa0>
   1359c:	288010c4 	addi	r2,r5,67
   135a0:	28800015 	stw	r2,0(r5)
   135a4:	28800415 	stw	r2,16(r5)
   135a8:	00800044 	movi	r2,1
   135ac:	28800515 	stw	r2,20(r5)
   135b0:	dfc01217 	ldw	ra,72(sp)
   135b4:	dc801117 	ldw	r18,68(sp)
   135b8:	dc401017 	ldw	r17,64(sp)
   135bc:	dc000f17 	ldw	r16,60(sp)
   135c0:	dec01304 	addi	sp,sp,76
   135c4:	f800283a 	ret
   135c8:	04801004 	movi	r18,64
   135cc:	003ff006 	br	13590 <__smakebuf_r+0x108>
   135d0:	81000a17 	ldw	r4,40(r16)
   135d4:	00c00074 	movhi	r3,1
   135d8:	18cdfa04 	addi	r3,r3,14312
   135dc:	20ffc01e 	bne	r4,r3,134e0 <__smakebuf_r+0x58>
   135e0:	8080030b 	ldhu	r2,12(r16)
   135e4:	00c10004 	movi	r3,1024
   135e8:	80c01315 	stw	r3,76(r16)
   135ec:	10c4b03a 	or	r2,r2,r3
   135f0:	8080030d 	sth	r2,12(r16)
   135f4:	003fcb06 	br	13524 <__smakebuf_r+0x9c>
   135f8:	8080030b 	ldhu	r2,12(r16)
   135fc:	10c0800c 	andi	r3,r2,512
   13600:	18ffffcc 	andi	r3,r3,65535
   13604:	18e0001c 	xori	r3,r3,32768
   13608:	18e00004 	addi	r3,r3,-32768
   1360c:	183fd31e 	bne	r3,zero,1355c <__smakebuf_r+0xd4>
   13610:	10800094 	ori	r2,r2,2
   13614:	80c010c4 	addi	r3,r16,67
   13618:	8080030d 	sth	r2,12(r16)
   1361c:	00800044 	movi	r2,1
   13620:	80c00015 	stw	r3,0(r16)
   13624:	80c00415 	stw	r3,16(r16)
   13628:	80800515 	stw	r2,20(r16)
   1362c:	003fcb06 	br	1355c <__smakebuf_r+0xd4>

00013630 <memset>:
   13630:	00c000c4 	movi	r3,3
   13634:	2005883a 	mov	r2,r4
   13638:	29403fcc 	andi	r5,r5,255
   1363c:	19802d2e 	bgeu	r3,r6,136f4 <memset+0xc4>
   13640:	20c6703a 	and	r3,r4,r3
   13644:	18002e1e 	bne	r3,zero,13700 <memset+0xd0>
   13648:	2806923a 	slli	r3,r5,8
   1364c:	010003c4 	movi	r4,15
   13650:	3011883a 	mov	r8,r6
   13654:	1946b03a 	or	r3,r3,r5
   13658:	180e943a 	slli	r7,r3,16
   1365c:	38ceb03a 	or	r7,r7,r3
   13660:	1007883a 	mov	r3,r2
   13664:	21800f2e 	bgeu	r4,r6,136a4 <memset+0x74>
   13668:	19c00015 	stw	r7,0(r3)
   1366c:	19c00115 	stw	r7,4(r3)
   13670:	19c00215 	stw	r7,8(r3)
   13674:	19c00315 	stw	r7,12(r3)
   13678:	423ffc04 	addi	r8,r8,-16
   1367c:	18c00404 	addi	r3,r3,16
   13680:	223ff936 	bltu	r4,r8,13668 <memset+0x38>
   13684:	30fffc04 	addi	r3,r6,-16
   13688:	1806d13a 	srli	r3,r3,4
   1368c:	318003cc 	andi	r6,r6,15
   13690:	010000c4 	movi	r4,3
   13694:	18c00044 	addi	r3,r3,1
   13698:	1806913a 	slli	r3,r3,4
   1369c:	10c7883a 	add	r3,r2,r3
   136a0:	21800e2e 	bgeu	r4,r6,136dc <memset+0xac>
   136a4:	1813883a 	mov	r9,r3
   136a8:	3011883a 	mov	r8,r6
   136ac:	010000c4 	movi	r4,3
   136b0:	49c00015 	stw	r7,0(r9)
   136b4:	423fff04 	addi	r8,r8,-4
   136b8:	4a400104 	addi	r9,r9,4
   136bc:	223ffc36 	bltu	r4,r8,136b0 <memset+0x80>
   136c0:	313fff04 	addi	r4,r6,-4
   136c4:	2008d0ba 	srli	r4,r4,2
   136c8:	318000cc 	andi	r6,r6,3
   136cc:	21000044 	addi	r4,r4,1
   136d0:	2109883a 	add	r4,r4,r4
   136d4:	2109883a 	add	r4,r4,r4
   136d8:	1907883a 	add	r3,r3,r4
   136dc:	30000a26 	beq	r6,zero,13708 <memset+0xd8>
   136e0:	198d883a 	add	r6,r3,r6
   136e4:	19400005 	stb	r5,0(r3)
   136e8:	18c00044 	addi	r3,r3,1
   136ec:	19bffd1e 	bne	r3,r6,136e4 <memset+0xb4>
   136f0:	f800283a 	ret
   136f4:	2007883a 	mov	r3,r4
   136f8:	303ff91e 	bne	r6,zero,136e0 <memset+0xb0>
   136fc:	00000206 	br	13708 <memset+0xd8>
   13700:	2007883a 	mov	r3,r4
   13704:	003ff606 	br	136e0 <memset+0xb0>
   13708:	f800283a 	ret

0001370c <__sread>:
   1370c:	defffe04 	addi	sp,sp,-8
   13710:	dc000015 	stw	r16,0(sp)
   13714:	2821883a 	mov	r16,r5
   13718:	2940038f 	ldh	r5,14(r5)
   1371c:	dfc00115 	stw	ra,4(sp)
   13720:	0013ba40 	call	13ba4 <_read_r>
   13724:	10000716 	blt	r2,zero,13744 <__sread+0x38>
   13728:	80c01417 	ldw	r3,80(r16)
   1372c:	1887883a 	add	r3,r3,r2
   13730:	80c01415 	stw	r3,80(r16)
   13734:	dfc00117 	ldw	ra,4(sp)
   13738:	dc000017 	ldw	r16,0(sp)
   1373c:	dec00204 	addi	sp,sp,8
   13740:	f800283a 	ret
   13744:	80c0030b 	ldhu	r3,12(r16)
   13748:	18fbffcc 	andi	r3,r3,61439
   1374c:	80c0030d 	sth	r3,12(r16)
   13750:	dfc00117 	ldw	ra,4(sp)
   13754:	dc000017 	ldw	r16,0(sp)
   13758:	dec00204 	addi	sp,sp,8
   1375c:	f800283a 	ret

00013760 <__swrite>:
   13760:	2880030b 	ldhu	r2,12(r5)
   13764:	defffb04 	addi	sp,sp,-20
   13768:	dcc00315 	stw	r19,12(sp)
   1376c:	10c0400c 	andi	r3,r2,256
   13770:	18ffffcc 	andi	r3,r3,65535
   13774:	18e0001c 	xori	r3,r3,32768
   13778:	dc800215 	stw	r18,8(sp)
   1377c:	dc400115 	stw	r17,4(sp)
   13780:	dc000015 	stw	r16,0(sp)
   13784:	dfc00415 	stw	ra,16(sp)
   13788:	18e00004 	addi	r3,r3,-32768
   1378c:	2821883a 	mov	r16,r5
   13790:	2027883a 	mov	r19,r4
   13794:	3025883a 	mov	r18,r6
   13798:	3823883a 	mov	r17,r7
   1379c:	18000526 	beq	r3,zero,137b4 <__swrite+0x54>
   137a0:	2940038f 	ldh	r5,14(r5)
   137a4:	000d883a 	mov	r6,zero
   137a8:	01c00084 	movi	r7,2
   137ac:	0013b380 	call	13b38 <_lseek_r>
   137b0:	8080030b 	ldhu	r2,12(r16)
   137b4:	8140038f 	ldh	r5,14(r16)
   137b8:	10bbffcc 	andi	r2,r2,61439
   137bc:	9809883a 	mov	r4,r19
   137c0:	900d883a 	mov	r6,r18
   137c4:	880f883a 	mov	r7,r17
   137c8:	8080030d 	sth	r2,12(r16)
   137cc:	dfc00417 	ldw	ra,16(sp)
   137d0:	dcc00317 	ldw	r19,12(sp)
   137d4:	dc800217 	ldw	r18,8(sp)
   137d8:	dc400117 	ldw	r17,4(sp)
   137dc:	dc000017 	ldw	r16,0(sp)
   137e0:	dec00504 	addi	sp,sp,20
   137e4:	001384c1 	jmpi	1384c <_write_r>

000137e8 <__sseek>:
   137e8:	defffe04 	addi	sp,sp,-8
   137ec:	dc000015 	stw	r16,0(sp)
   137f0:	2821883a 	mov	r16,r5
   137f4:	2940038f 	ldh	r5,14(r5)
   137f8:	dfc00115 	stw	ra,4(sp)
   137fc:	0013b380 	call	13b38 <_lseek_r>
   13800:	00ffffc4 	movi	r3,-1
   13804:	10c00826 	beq	r2,r3,13828 <__sseek+0x40>
   13808:	80c0030b 	ldhu	r3,12(r16)
   1380c:	80801415 	stw	r2,80(r16)
   13810:	18c40014 	ori	r3,r3,4096
   13814:	80c0030d 	sth	r3,12(r16)
   13818:	dfc00117 	ldw	ra,4(sp)
   1381c:	dc000017 	ldw	r16,0(sp)
   13820:	dec00204 	addi	sp,sp,8
   13824:	f800283a 	ret
   13828:	80c0030b 	ldhu	r3,12(r16)
   1382c:	18fbffcc 	andi	r3,r3,61439
   13830:	80c0030d 	sth	r3,12(r16)
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	dc000017 	ldw	r16,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <__sclose>:
   13844:	2940038f 	ldh	r5,14(r5)
   13848:	00138b81 	jmpi	138b8 <_close_r>

0001384c <_write_r>:
   1384c:	defffd04 	addi	sp,sp,-12
   13850:	dc400115 	stw	r17,4(sp)
   13854:	dc000015 	stw	r16,0(sp)
   13858:	2023883a 	mov	r17,r4
   1385c:	040000b4 	movhi	r16,2
   13860:	8427c204 	addi	r16,r16,-24824
   13864:	2809883a 	mov	r4,r5
   13868:	300b883a 	mov	r5,r6
   1386c:	380d883a 	mov	r6,r7
   13870:	dfc00215 	stw	ra,8(sp)
   13874:	80000015 	stw	zero,0(r16)
   13878:	00144d80 	call	144d8 <write>
   1387c:	00ffffc4 	movi	r3,-1
   13880:	10c00526 	beq	r2,r3,13898 <_write_r+0x4c>
   13884:	dfc00217 	ldw	ra,8(sp)
   13888:	dc400117 	ldw	r17,4(sp)
   1388c:	dc000017 	ldw	r16,0(sp)
   13890:	dec00304 	addi	sp,sp,12
   13894:	f800283a 	ret
   13898:	80c00017 	ldw	r3,0(r16)
   1389c:	183ff926 	beq	r3,zero,13884 <_write_r+0x38>
   138a0:	88c00015 	stw	r3,0(r17)
   138a4:	dfc00217 	ldw	ra,8(sp)
   138a8:	dc400117 	ldw	r17,4(sp)
   138ac:	dc000017 	ldw	r16,0(sp)
   138b0:	dec00304 	addi	sp,sp,12
   138b4:	f800283a 	ret

000138b8 <_close_r>:
   138b8:	defffd04 	addi	sp,sp,-12
   138bc:	dc400115 	stw	r17,4(sp)
   138c0:	dc000015 	stw	r16,0(sp)
   138c4:	2023883a 	mov	r17,r4
   138c8:	040000b4 	movhi	r16,2
   138cc:	8427c204 	addi	r16,r16,-24824
   138d0:	2809883a 	mov	r4,r5
   138d4:	dfc00215 	stw	ra,8(sp)
   138d8:	80000015 	stw	zero,0(r16)
   138dc:	0013c600 	call	13c60 <close>
   138e0:	00ffffc4 	movi	r3,-1
   138e4:	10c00526 	beq	r2,r3,138fc <_close_r+0x44>
   138e8:	dfc00217 	ldw	ra,8(sp)
   138ec:	dc400117 	ldw	r17,4(sp)
   138f0:	dc000017 	ldw	r16,0(sp)
   138f4:	dec00304 	addi	sp,sp,12
   138f8:	f800283a 	ret
   138fc:	80c00017 	ldw	r3,0(r16)
   13900:	183ff926 	beq	r3,zero,138e8 <_close_r+0x30>
   13904:	88c00015 	stw	r3,0(r17)
   13908:	dfc00217 	ldw	ra,8(sp)
   1390c:	dc400117 	ldw	r17,4(sp)
   13910:	dc000017 	ldw	r16,0(sp)
   13914:	dec00304 	addi	sp,sp,12
   13918:	f800283a 	ret

0001391c <_fclose_r>:
   1391c:	defffc04 	addi	sp,sp,-16
   13920:	dc400115 	stw	r17,4(sp)
   13924:	dc000015 	stw	r16,0(sp)
   13928:	dfc00315 	stw	ra,12(sp)
   1392c:	dc800215 	stw	r18,8(sp)
   13930:	2821883a 	mov	r16,r5
   13934:	2023883a 	mov	r17,r4
   13938:	28003426 	beq	r5,zero,13a0c <_fclose_r+0xf0>
   1393c:	00132e80 	call	132e8 <__sfp_lock_acquire>
   13940:	88000226 	beq	r17,zero,1394c <_fclose_r+0x30>
   13944:	88800e17 	ldw	r2,56(r17)
   13948:	10003826 	beq	r2,zero,13a2c <_fclose_r+0x110>
   1394c:	8080030f 	ldh	r2,12(r16)
   13950:	10002526 	beq	r2,zero,139e8 <_fclose_r+0xcc>
   13954:	8809883a 	mov	r4,r17
   13958:	800b883a 	mov	r5,r16
   1395c:	0012e240 	call	12e24 <_fflush_r>
   13960:	1025883a 	mov	r18,r2
   13964:	80800b17 	ldw	r2,44(r16)
   13968:	10000426 	beq	r2,zero,1397c <_fclose_r+0x60>
   1396c:	81400717 	ldw	r5,28(r16)
   13970:	8809883a 	mov	r4,r17
   13974:	103ee83a 	callr	r2
   13978:	10003516 	blt	r2,zero,13a50 <_fclose_r+0x134>
   1397c:	8080030b 	ldhu	r2,12(r16)
   13980:	1080200c 	andi	r2,r2,128
   13984:	10bfffcc 	andi	r2,r2,65535
   13988:	10a0001c 	xori	r2,r2,32768
   1398c:	10a00004 	addi	r2,r2,-32768
   13990:	10002b1e 	bne	r2,zero,13a40 <_fclose_r+0x124>
   13994:	81400c17 	ldw	r5,48(r16)
   13998:	28000526 	beq	r5,zero,139b0 <_fclose_r+0x94>
   1399c:	80801004 	addi	r2,r16,64
   139a0:	28800226 	beq	r5,r2,139ac <_fclose_r+0x90>
   139a4:	8809883a 	mov	r4,r17
   139a8:	0011b3c0 	call	11b3c <_free_r>
   139ac:	80000c15 	stw	zero,48(r16)
   139b0:	81401117 	ldw	r5,68(r16)
   139b4:	28000326 	beq	r5,zero,139c4 <_fclose_r+0xa8>
   139b8:	8809883a 	mov	r4,r17
   139bc:	0011b3c0 	call	11b3c <_free_r>
   139c0:	80001115 	stw	zero,68(r16)
   139c4:	8000030d 	sth	zero,12(r16)
   139c8:	00132ec0 	call	132ec <__sfp_lock_release>
   139cc:	9005883a 	mov	r2,r18
   139d0:	dfc00317 	ldw	ra,12(sp)
   139d4:	dc800217 	ldw	r18,8(sp)
   139d8:	dc400117 	ldw	r17,4(sp)
   139dc:	dc000017 	ldw	r16,0(sp)
   139e0:	dec00404 	addi	sp,sp,16
   139e4:	f800283a 	ret
   139e8:	00132ec0 	call	132ec <__sfp_lock_release>
   139ec:	0025883a 	mov	r18,zero
   139f0:	9005883a 	mov	r2,r18
   139f4:	dfc00317 	ldw	ra,12(sp)
   139f8:	dc800217 	ldw	r18,8(sp)
   139fc:	dc400117 	ldw	r17,4(sp)
   13a00:	dc000017 	ldw	r16,0(sp)
   13a04:	dec00404 	addi	sp,sp,16
   13a08:	f800283a 	ret
   13a0c:	0025883a 	mov	r18,zero
   13a10:	9005883a 	mov	r2,r18
   13a14:	dfc00317 	ldw	ra,12(sp)
   13a18:	dc800217 	ldw	r18,8(sp)
   13a1c:	dc400117 	ldw	r17,4(sp)
   13a20:	dc000017 	ldw	r16,0(sp)
   13a24:	dec00404 	addi	sp,sp,16
   13a28:	f800283a 	ret
   13a2c:	8809883a 	mov	r4,r17
   13a30:	00130e00 	call	130e0 <__sinit>
   13a34:	8080030f 	ldh	r2,12(r16)
   13a38:	103fc61e 	bne	r2,zero,13954 <_fclose_r+0x38>
   13a3c:	003fea06 	br	139e8 <_fclose_r+0xcc>
   13a40:	81400417 	ldw	r5,16(r16)
   13a44:	8809883a 	mov	r4,r17
   13a48:	0011b3c0 	call	11b3c <_free_r>
   13a4c:	003fd106 	br	13994 <_fclose_r+0x78>
   13a50:	04bfffc4 	movi	r18,-1
   13a54:	003fc906 	br	1397c <_fclose_r+0x60>

00013a58 <fclose>:
   13a58:	008000b4 	movhi	r2,2
   13a5c:	10a0fc04 	addi	r2,r2,-31760
   13a60:	200b883a 	mov	r5,r4
   13a64:	11000017 	ldw	r4,0(r2)
   13a68:	001391c1 	jmpi	1391c <_fclose_r>

00013a6c <_fstat_r>:
   13a6c:	defffd04 	addi	sp,sp,-12
   13a70:	dc400115 	stw	r17,4(sp)
   13a74:	dc000015 	stw	r16,0(sp)
   13a78:	2023883a 	mov	r17,r4
   13a7c:	040000b4 	movhi	r16,2
   13a80:	8427c204 	addi	r16,r16,-24824
   13a84:	2809883a 	mov	r4,r5
   13a88:	300b883a 	mov	r5,r6
   13a8c:	dfc00215 	stw	ra,8(sp)
   13a90:	80000015 	stw	zero,0(r16)
   13a94:	0013da80 	call	13da8 <fstat>
   13a98:	00ffffc4 	movi	r3,-1
   13a9c:	10c00526 	beq	r2,r3,13ab4 <_fstat_r+0x48>
   13aa0:	dfc00217 	ldw	ra,8(sp)
   13aa4:	dc400117 	ldw	r17,4(sp)
   13aa8:	dc000017 	ldw	r16,0(sp)
   13aac:	dec00304 	addi	sp,sp,12
   13ab0:	f800283a 	ret
   13ab4:	80c00017 	ldw	r3,0(r16)
   13ab8:	183ff926 	beq	r3,zero,13aa0 <_fstat_r+0x34>
   13abc:	88c00015 	stw	r3,0(r17)
   13ac0:	dfc00217 	ldw	ra,8(sp)
   13ac4:	dc400117 	ldw	r17,4(sp)
   13ac8:	dc000017 	ldw	r16,0(sp)
   13acc:	dec00304 	addi	sp,sp,12
   13ad0:	f800283a 	ret

00013ad4 <_isatty_r>:
   13ad4:	defffd04 	addi	sp,sp,-12
   13ad8:	dc400115 	stw	r17,4(sp)
   13adc:	dc000015 	stw	r16,0(sp)
   13ae0:	2023883a 	mov	r17,r4
   13ae4:	040000b4 	movhi	r16,2
   13ae8:	8427c204 	addi	r16,r16,-24824
   13aec:	2809883a 	mov	r4,r5
   13af0:	dfc00215 	stw	ra,8(sp)
   13af4:	80000015 	stw	zero,0(r16)
   13af8:	0013ea80 	call	13ea8 <isatty>
   13afc:	00ffffc4 	movi	r3,-1
   13b00:	10c00526 	beq	r2,r3,13b18 <_isatty_r+0x44>
   13b04:	dfc00217 	ldw	ra,8(sp)
   13b08:	dc400117 	ldw	r17,4(sp)
   13b0c:	dc000017 	ldw	r16,0(sp)
   13b10:	dec00304 	addi	sp,sp,12
   13b14:	f800283a 	ret
   13b18:	80c00017 	ldw	r3,0(r16)
   13b1c:	183ff926 	beq	r3,zero,13b04 <_isatty_r+0x30>
   13b20:	88c00015 	stw	r3,0(r17)
   13b24:	dfc00217 	ldw	ra,8(sp)
   13b28:	dc400117 	ldw	r17,4(sp)
   13b2c:	dc000017 	ldw	r16,0(sp)
   13b30:	dec00304 	addi	sp,sp,12
   13b34:	f800283a 	ret

00013b38 <_lseek_r>:
   13b38:	defffd04 	addi	sp,sp,-12
   13b3c:	dc400115 	stw	r17,4(sp)
   13b40:	dc000015 	stw	r16,0(sp)
   13b44:	2023883a 	mov	r17,r4
   13b48:	040000b4 	movhi	r16,2
   13b4c:	8427c204 	addi	r16,r16,-24824
   13b50:	2809883a 	mov	r4,r5
   13b54:	300b883a 	mov	r5,r6
   13b58:	380d883a 	mov	r6,r7
   13b5c:	dfc00215 	stw	ra,8(sp)
   13b60:	80000015 	stw	zero,0(r16)
   13b64:	00140880 	call	14088 <lseek>
   13b68:	00ffffc4 	movi	r3,-1
   13b6c:	10c00526 	beq	r2,r3,13b84 <_lseek_r+0x4c>
   13b70:	dfc00217 	ldw	ra,8(sp)
   13b74:	dc400117 	ldw	r17,4(sp)
   13b78:	dc000017 	ldw	r16,0(sp)
   13b7c:	dec00304 	addi	sp,sp,12
   13b80:	f800283a 	ret
   13b84:	80c00017 	ldw	r3,0(r16)
   13b88:	183ff926 	beq	r3,zero,13b70 <_lseek_r+0x38>
   13b8c:	88c00015 	stw	r3,0(r17)
   13b90:	dfc00217 	ldw	ra,8(sp)
   13b94:	dc400117 	ldw	r17,4(sp)
   13b98:	dc000017 	ldw	r16,0(sp)
   13b9c:	dec00304 	addi	sp,sp,12
   13ba0:	f800283a 	ret

00013ba4 <_read_r>:
   13ba4:	defffd04 	addi	sp,sp,-12
   13ba8:	dc400115 	stw	r17,4(sp)
   13bac:	dc000015 	stw	r16,0(sp)
   13bb0:	2023883a 	mov	r17,r4
   13bb4:	040000b4 	movhi	r16,2
   13bb8:	8427c204 	addi	r16,r16,-24824
   13bbc:	2809883a 	mov	r4,r5
   13bc0:	300b883a 	mov	r5,r6
   13bc4:	380d883a 	mov	r6,r7
   13bc8:	dfc00215 	stw	ra,8(sp)
   13bcc:	80000015 	stw	zero,0(r16)
   13bd0:	00142640 	call	14264 <read>
   13bd4:	00ffffc4 	movi	r3,-1
   13bd8:	10c00526 	beq	r2,r3,13bf0 <_read_r+0x4c>
   13bdc:	dfc00217 	ldw	ra,8(sp)
   13be0:	dc400117 	ldw	r17,4(sp)
   13be4:	dc000017 	ldw	r16,0(sp)
   13be8:	dec00304 	addi	sp,sp,12
   13bec:	f800283a 	ret
   13bf0:	80c00017 	ldw	r3,0(r16)
   13bf4:	183ff926 	beq	r3,zero,13bdc <_read_r+0x38>
   13bf8:	88c00015 	stw	r3,0(r17)
   13bfc:	dfc00217 	ldw	ra,8(sp)
   13c00:	dc400117 	ldw	r17,4(sp)
   13c04:	dc000017 	ldw	r16,0(sp)
   13c08:	dec00304 	addi	sp,sp,12
   13c0c:	f800283a 	ret

00013c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c10:	defffe04 	addi	sp,sp,-8
   13c14:	dfc00115 	stw	ra,4(sp)
   13c18:	df000015 	stw	fp,0(sp)
   13c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c20:	008000b4 	movhi	r2,2
   13c24:	10a10204 	addi	r2,r2,-31736
   13c28:	10800017 	ldw	r2,0(r2)
   13c2c:	10000526 	beq	r2,zero,13c44 <alt_get_errno+0x34>
   13c30:	008000b4 	movhi	r2,2
   13c34:	10a10204 	addi	r2,r2,-31736
   13c38:	10800017 	ldw	r2,0(r2)
   13c3c:	103ee83a 	callr	r2
   13c40:	00000206 	br	13c4c <alt_get_errno+0x3c>
   13c44:	008000b4 	movhi	r2,2
   13c48:	10a7c204 	addi	r2,r2,-24824
}
   13c4c:	e037883a 	mov	sp,fp
   13c50:	dfc00117 	ldw	ra,4(sp)
   13c54:	df000017 	ldw	fp,0(sp)
   13c58:	dec00204 	addi	sp,sp,8
   13c5c:	f800283a 	ret

00013c60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13c60:	defffb04 	addi	sp,sp,-20
   13c64:	dfc00415 	stw	ra,16(sp)
   13c68:	df000315 	stw	fp,12(sp)
   13c6c:	df000304 	addi	fp,sp,12
   13c70:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13c74:	e0bfff17 	ldw	r2,-4(fp)
   13c78:	10000716 	blt	r2,zero,13c98 <close+0x38>
   13c7c:	e13fff17 	ldw	r4,-4(fp)
   13c80:	01400304 	movi	r5,12
   13c84:	00110a40 	call	110a4 <__mulsi3>
   13c88:	00c00074 	movhi	r3,1
   13c8c:	18dc7c04 	addi	r3,r3,29168
   13c90:	10c5883a 	add	r2,r2,r3
   13c94:	00000106 	br	13c9c <close+0x3c>
   13c98:	0005883a 	mov	r2,zero
   13c9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13ca0:	e0bffd17 	ldw	r2,-12(fp)
   13ca4:	10001826 	beq	r2,zero,13d08 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13ca8:	e0bffd17 	ldw	r2,-12(fp)
   13cac:	10800017 	ldw	r2,0(r2)
   13cb0:	10800417 	ldw	r2,16(r2)
   13cb4:	10000626 	beq	r2,zero,13cd0 <close+0x70>
   13cb8:	e0bffd17 	ldw	r2,-12(fp)
   13cbc:	10800017 	ldw	r2,0(r2)
   13cc0:	10800417 	ldw	r2,16(r2)
   13cc4:	e13ffd17 	ldw	r4,-12(fp)
   13cc8:	103ee83a 	callr	r2
   13ccc:	00000106 	br	13cd4 <close+0x74>
   13cd0:	0005883a 	mov	r2,zero
   13cd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13cd8:	e13fff17 	ldw	r4,-4(fp)
   13cdc:	00143580 	call	14358 <alt_release_fd>
    if (rval < 0)
   13ce0:	e0bffe17 	ldw	r2,-8(fp)
   13ce4:	1000060e 	bge	r2,zero,13d00 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13ce8:	0013c100 	call	13c10 <alt_get_errno>
   13cec:	e0fffe17 	ldw	r3,-8(fp)
   13cf0:	00c7c83a 	sub	r3,zero,r3
   13cf4:	10c00015 	stw	r3,0(r2)
      return -1;
   13cf8:	00bfffc4 	movi	r2,-1
   13cfc:	00000606 	br	13d18 <close+0xb8>
    }
    return 0;
   13d00:	0005883a 	mov	r2,zero
   13d04:	00000406 	br	13d18 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13d08:	0013c100 	call	13c10 <alt_get_errno>
   13d0c:	00c01444 	movi	r3,81
   13d10:	10c00015 	stw	r3,0(r2)
    return -1;
   13d14:	00bfffc4 	movi	r2,-1
  }
}
   13d18:	e037883a 	mov	sp,fp
   13d1c:	dfc00117 	ldw	ra,4(sp)
   13d20:	df000017 	ldw	fp,0(sp)
   13d24:	dec00204 	addi	sp,sp,8
   13d28:	f800283a 	ret

00013d2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13d2c:	defffc04 	addi	sp,sp,-16
   13d30:	df000315 	stw	fp,12(sp)
   13d34:	df000304 	addi	fp,sp,12
   13d38:	e13ffd15 	stw	r4,-12(fp)
   13d3c:	e17ffe15 	stw	r5,-8(fp)
   13d40:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13d44:	e0bfff17 	ldw	r2,-4(fp)
}
   13d48:	e037883a 	mov	sp,fp
   13d4c:	df000017 	ldw	fp,0(sp)
   13d50:	dec00104 	addi	sp,sp,4
   13d54:	f800283a 	ret

00013d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d58:	defffe04 	addi	sp,sp,-8
   13d5c:	dfc00115 	stw	ra,4(sp)
   13d60:	df000015 	stw	fp,0(sp)
   13d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d68:	008000b4 	movhi	r2,2
   13d6c:	10a10204 	addi	r2,r2,-31736
   13d70:	10800017 	ldw	r2,0(r2)
   13d74:	10000526 	beq	r2,zero,13d8c <alt_get_errno+0x34>
   13d78:	008000b4 	movhi	r2,2
   13d7c:	10a10204 	addi	r2,r2,-31736
   13d80:	10800017 	ldw	r2,0(r2)
   13d84:	103ee83a 	callr	r2
   13d88:	00000206 	br	13d94 <alt_get_errno+0x3c>
   13d8c:	008000b4 	movhi	r2,2
   13d90:	10a7c204 	addi	r2,r2,-24824
}
   13d94:	e037883a 	mov	sp,fp
   13d98:	dfc00117 	ldw	ra,4(sp)
   13d9c:	df000017 	ldw	fp,0(sp)
   13da0:	dec00204 	addi	sp,sp,8
   13da4:	f800283a 	ret

00013da8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13da8:	defffb04 	addi	sp,sp,-20
   13dac:	dfc00415 	stw	ra,16(sp)
   13db0:	df000315 	stw	fp,12(sp)
   13db4:	df000304 	addi	fp,sp,12
   13db8:	e13ffe15 	stw	r4,-8(fp)
   13dbc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13dc0:	e0bffe17 	ldw	r2,-8(fp)
   13dc4:	10000716 	blt	r2,zero,13de4 <fstat+0x3c>
   13dc8:	e13ffe17 	ldw	r4,-8(fp)
   13dcc:	01400304 	movi	r5,12
   13dd0:	00110a40 	call	110a4 <__mulsi3>
   13dd4:	00c00074 	movhi	r3,1
   13dd8:	18dc7c04 	addi	r3,r3,29168
   13ddc:	10c5883a 	add	r2,r2,r3
   13de0:	00000106 	br	13de8 <fstat+0x40>
   13de4:	0005883a 	mov	r2,zero
   13de8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13dec:	e0bffd17 	ldw	r2,-12(fp)
   13df0:	10001026 	beq	r2,zero,13e34 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13df4:	e0bffd17 	ldw	r2,-12(fp)
   13df8:	10800017 	ldw	r2,0(r2)
   13dfc:	10800817 	ldw	r2,32(r2)
   13e00:	10000726 	beq	r2,zero,13e20 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   13e04:	e0bffd17 	ldw	r2,-12(fp)
   13e08:	10800017 	ldw	r2,0(r2)
   13e0c:	10800817 	ldw	r2,32(r2)
   13e10:	e13ffd17 	ldw	r4,-12(fp)
   13e14:	e17fff17 	ldw	r5,-4(fp)
   13e18:	103ee83a 	callr	r2
   13e1c:	00000906 	br	13e44 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13e20:	e0bfff17 	ldw	r2,-4(fp)
   13e24:	00c80004 	movi	r3,8192
   13e28:	10c00115 	stw	r3,4(r2)
      return 0;
   13e2c:	0005883a 	mov	r2,zero
   13e30:	00000406 	br	13e44 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13e34:	0013d580 	call	13d58 <alt_get_errno>
   13e38:	00c01444 	movi	r3,81
   13e3c:	10c00015 	stw	r3,0(r2)
    return -1;
   13e40:	00bfffc4 	movi	r2,-1
  }
}
   13e44:	e037883a 	mov	sp,fp
   13e48:	dfc00117 	ldw	ra,4(sp)
   13e4c:	df000017 	ldw	fp,0(sp)
   13e50:	dec00204 	addi	sp,sp,8
   13e54:	f800283a 	ret

00013e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e58:	defffe04 	addi	sp,sp,-8
   13e5c:	dfc00115 	stw	ra,4(sp)
   13e60:	df000015 	stw	fp,0(sp)
   13e64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e68:	008000b4 	movhi	r2,2
   13e6c:	10a10204 	addi	r2,r2,-31736
   13e70:	10800017 	ldw	r2,0(r2)
   13e74:	10000526 	beq	r2,zero,13e8c <alt_get_errno+0x34>
   13e78:	008000b4 	movhi	r2,2
   13e7c:	10a10204 	addi	r2,r2,-31736
   13e80:	10800017 	ldw	r2,0(r2)
   13e84:	103ee83a 	callr	r2
   13e88:	00000206 	br	13e94 <alt_get_errno+0x3c>
   13e8c:	008000b4 	movhi	r2,2
   13e90:	10a7c204 	addi	r2,r2,-24824
}
   13e94:	e037883a 	mov	sp,fp
   13e98:	dfc00117 	ldw	ra,4(sp)
   13e9c:	df000017 	ldw	fp,0(sp)
   13ea0:	dec00204 	addi	sp,sp,8
   13ea4:	f800283a 	ret

00013ea8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13ea8:	deffed04 	addi	sp,sp,-76
   13eac:	dfc01215 	stw	ra,72(sp)
   13eb0:	df001115 	stw	fp,68(sp)
   13eb4:	df001104 	addi	fp,sp,68
   13eb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ebc:	e0bfff17 	ldw	r2,-4(fp)
   13ec0:	10000716 	blt	r2,zero,13ee0 <isatty+0x38>
   13ec4:	e13fff17 	ldw	r4,-4(fp)
   13ec8:	01400304 	movi	r5,12
   13ecc:	00110a40 	call	110a4 <__mulsi3>
   13ed0:	00c00074 	movhi	r3,1
   13ed4:	18dc7c04 	addi	r3,r3,29168
   13ed8:	10c5883a 	add	r2,r2,r3
   13edc:	00000106 	br	13ee4 <isatty+0x3c>
   13ee0:	0005883a 	mov	r2,zero
   13ee4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13ee8:	e0bfef17 	ldw	r2,-68(fp)
   13eec:	10000e26 	beq	r2,zero,13f28 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13ef0:	e0bfef17 	ldw	r2,-68(fp)
   13ef4:	10800017 	ldw	r2,0(r2)
   13ef8:	10800817 	ldw	r2,32(r2)
   13efc:	1000021e 	bne	r2,zero,13f08 <isatty+0x60>
    {
      return 1;
   13f00:	00800044 	movi	r2,1
   13f04:	00000c06 	br	13f38 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13f08:	e0bff004 	addi	r2,fp,-64
   13f0c:	e13fff17 	ldw	r4,-4(fp)
   13f10:	100b883a 	mov	r5,r2
   13f14:	0013da80 	call	13da8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13f18:	e0bff117 	ldw	r2,-60(fp)
   13f1c:	10880020 	cmpeqi	r2,r2,8192
   13f20:	10803fcc 	andi	r2,r2,255
   13f24:	00000406 	br	13f38 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f28:	0013e580 	call	13e58 <alt_get_errno>
   13f2c:	00c01444 	movi	r3,81
   13f30:	10c00015 	stw	r3,0(r2)
    return 0;
   13f34:	0005883a 	mov	r2,zero
  }
}
   13f38:	e037883a 	mov	sp,fp
   13f3c:	dfc00117 	ldw	ra,4(sp)
   13f40:	df000017 	ldw	fp,0(sp)
   13f44:	dec00204 	addi	sp,sp,8
   13f48:	f800283a 	ret

00013f4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13f4c:	defffc04 	addi	sp,sp,-16
   13f50:	df000315 	stw	fp,12(sp)
   13f54:	df000304 	addi	fp,sp,12
   13f58:	e13ffd15 	stw	r4,-12(fp)
   13f5c:	e17ffe15 	stw	r5,-8(fp)
   13f60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13f64:	e0fffe17 	ldw	r3,-8(fp)
   13f68:	e0bffd17 	ldw	r2,-12(fp)
   13f6c:	18800e26 	beq	r3,r2,13fa8 <alt_load_section+0x5c>
  {
    while( to != end )
   13f70:	00000a06 	br	13f9c <alt_load_section+0x50>
    {
      *to++ = *from++;
   13f74:	e0bffd17 	ldw	r2,-12(fp)
   13f78:	10c00017 	ldw	r3,0(r2)
   13f7c:	e0bffe17 	ldw	r2,-8(fp)
   13f80:	10c00015 	stw	r3,0(r2)
   13f84:	e0bffe17 	ldw	r2,-8(fp)
   13f88:	10800104 	addi	r2,r2,4
   13f8c:	e0bffe15 	stw	r2,-8(fp)
   13f90:	e0bffd17 	ldw	r2,-12(fp)
   13f94:	10800104 	addi	r2,r2,4
   13f98:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13f9c:	e0fffe17 	ldw	r3,-8(fp)
   13fa0:	e0bfff17 	ldw	r2,-4(fp)
   13fa4:	18bff31e 	bne	r3,r2,13f74 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13fa8:	e037883a 	mov	sp,fp
   13fac:	df000017 	ldw	fp,0(sp)
   13fb0:	dec00104 	addi	sp,sp,4
   13fb4:	f800283a 	ret

00013fb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13fb8:	defffe04 	addi	sp,sp,-8
   13fbc:	dfc00115 	stw	ra,4(sp)
   13fc0:	df000015 	stw	fp,0(sp)
   13fc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13fc8:	010000b4 	movhi	r4,2
   13fcc:	21210704 	addi	r4,r4,-31716
   13fd0:	01400074 	movhi	r5,1
   13fd4:	295a5204 	addi	r5,r5,26952
   13fd8:	018000b4 	movhi	r6,2
   13fdc:	31a10704 	addi	r6,r6,-31716
   13fe0:	0013f4c0 	call	13f4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13fe4:	01000074 	movhi	r4,1
   13fe8:	21000804 	addi	r4,r4,32
   13fec:	01400074 	movhi	r5,1
   13ff0:	29400804 	addi	r5,r5,32
   13ff4:	01800074 	movhi	r6,1
   13ff8:	31806e04 	addi	r6,r6,440
   13ffc:	0013f4c0 	call	13f4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14000:	01000074 	movhi	r4,1
   14004:	211a3304 	addi	r4,r4,26828
   14008:	01400074 	movhi	r5,1
   1400c:	295a3304 	addi	r5,r5,26828
   14010:	01800074 	movhi	r6,1
   14014:	319a5204 	addi	r6,r6,26952
   14018:	0013f4c0 	call	13f4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1401c:	001582c0 	call	1582c <alt_dcache_flush_all>
  alt_icache_flush_all();
   14020:	00159f00 	call	159f0 <alt_icache_flush_all>
}
   14024:	e037883a 	mov	sp,fp
   14028:	dfc00117 	ldw	ra,4(sp)
   1402c:	df000017 	ldw	fp,0(sp)
   14030:	dec00204 	addi	sp,sp,8
   14034:	f800283a 	ret

00014038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14038:	defffe04 	addi	sp,sp,-8
   1403c:	dfc00115 	stw	ra,4(sp)
   14040:	df000015 	stw	fp,0(sp)
   14044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14048:	008000b4 	movhi	r2,2
   1404c:	10a10204 	addi	r2,r2,-31736
   14050:	10800017 	ldw	r2,0(r2)
   14054:	10000526 	beq	r2,zero,1406c <alt_get_errno+0x34>
   14058:	008000b4 	movhi	r2,2
   1405c:	10a10204 	addi	r2,r2,-31736
   14060:	10800017 	ldw	r2,0(r2)
   14064:	103ee83a 	callr	r2
   14068:	00000206 	br	14074 <alt_get_errno+0x3c>
   1406c:	008000b4 	movhi	r2,2
   14070:	10a7c204 	addi	r2,r2,-24824
}
   14074:	e037883a 	mov	sp,fp
   14078:	dfc00117 	ldw	ra,4(sp)
   1407c:	df000017 	ldw	fp,0(sp)
   14080:	dec00204 	addi	sp,sp,8
   14084:	f800283a 	ret

00014088 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14088:	defff904 	addi	sp,sp,-28
   1408c:	dfc00615 	stw	ra,24(sp)
   14090:	df000515 	stw	fp,20(sp)
   14094:	df000504 	addi	fp,sp,20
   14098:	e13ffd15 	stw	r4,-12(fp)
   1409c:	e17ffe15 	stw	r5,-8(fp)
   140a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   140a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140a8:	e0bffd17 	ldw	r2,-12(fp)
   140ac:	10000716 	blt	r2,zero,140cc <lseek+0x44>
   140b0:	e13ffd17 	ldw	r4,-12(fp)
   140b4:	01400304 	movi	r5,12
   140b8:	00110a40 	call	110a4 <__mulsi3>
   140bc:	00c00074 	movhi	r3,1
   140c0:	18dc7c04 	addi	r3,r3,29168
   140c4:	10c5883a 	add	r2,r2,r3
   140c8:	00000106 	br	140d0 <lseek+0x48>
   140cc:	0005883a 	mov	r2,zero
   140d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	10001026 	beq	r2,zero,1411c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   140dc:	e0bffc17 	ldw	r2,-16(fp)
   140e0:	10800017 	ldw	r2,0(r2)
   140e4:	10800717 	ldw	r2,28(r2)
   140e8:	10000926 	beq	r2,zero,14110 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   140ec:	e0bffc17 	ldw	r2,-16(fp)
   140f0:	10800017 	ldw	r2,0(r2)
   140f4:	10800717 	ldw	r2,28(r2)
   140f8:	e13ffc17 	ldw	r4,-16(fp)
   140fc:	e17ffe17 	ldw	r5,-8(fp)
   14100:	e1bfff17 	ldw	r6,-4(fp)
   14104:	103ee83a 	callr	r2
   14108:	e0bffb15 	stw	r2,-20(fp)
   1410c:	00000506 	br	14124 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14110:	00bfde84 	movi	r2,-134
   14114:	e0bffb15 	stw	r2,-20(fp)
   14118:	00000206 	br	14124 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   1411c:	00bfebc4 	movi	r2,-81
   14120:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14124:	e0bffb17 	ldw	r2,-20(fp)
   14128:	1000060e 	bge	r2,zero,14144 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1412c:	00140380 	call	14038 <alt_get_errno>
   14130:	e0fffb17 	ldw	r3,-20(fp)
   14134:	00c7c83a 	sub	r3,zero,r3
   14138:	10c00015 	stw	r3,0(r2)
    rc = -1;
   1413c:	00bfffc4 	movi	r2,-1
   14140:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14144:	e0bffb17 	ldw	r2,-20(fp)
}
   14148:	e037883a 	mov	sp,fp
   1414c:	dfc00117 	ldw	ra,4(sp)
   14150:	df000017 	ldw	fp,0(sp)
   14154:	dec00204 	addi	sp,sp,8
   14158:	f800283a 	ret

0001415c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1415c:	defffd04 	addi	sp,sp,-12
   14160:	dfc00215 	stw	ra,8(sp)
   14164:	df000115 	stw	fp,4(sp)
   14168:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1416c:	0009883a 	mov	r4,zero
   14170:	00146000 	call	14600 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14174:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14178:	00146340 	call	14634 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1417c:	01000074 	movhi	r4,1
   14180:	211a4804 	addi	r4,r4,26912
   14184:	01400074 	movhi	r5,1
   14188:	295a4804 	addi	r5,r5,26912
   1418c:	01800074 	movhi	r6,1
   14190:	319a4804 	addi	r6,r6,26912
   14194:	0015db40 	call	15db4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14198:	00159380 	call	15938 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1419c:	01000074 	movhi	r4,1
   141a0:	21166504 	addi	r4,r4,22932
   141a4:	00164f80 	call	164f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   141a8:	d126cf17 	ldw	r4,-25796(gp)
   141ac:	d0e6d017 	ldw	r3,-25792(gp)
   141b0:	d0a6d117 	ldw	r2,-25788(gp)
   141b4:	180b883a 	mov	r5,r3
   141b8:	100d883a 	mov	r6,r2
   141bc:	0010c600 	call	10c60 <main>
   141c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   141c4:	01000044 	movi	r4,1
   141c8:	0013c600 	call	13c60 <close>
  exit (result);
   141cc:	e13fff17 	ldw	r4,-4(fp)
   141d0:	001650c0 	call	1650c <exit>

000141d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   141d4:	defffe04 	addi	sp,sp,-8
   141d8:	df000115 	stw	fp,4(sp)
   141dc:	df000104 	addi	fp,sp,4
   141e0:	e13fff15 	stw	r4,-4(fp)
}
   141e4:	e037883a 	mov	sp,fp
   141e8:	df000017 	ldw	fp,0(sp)
   141ec:	dec00104 	addi	sp,sp,4
   141f0:	f800283a 	ret

000141f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   141f4:	defffe04 	addi	sp,sp,-8
   141f8:	df000115 	stw	fp,4(sp)
   141fc:	df000104 	addi	fp,sp,4
   14200:	e13fff15 	stw	r4,-4(fp)
}
   14204:	e037883a 	mov	sp,fp
   14208:	df000017 	ldw	fp,0(sp)
   1420c:	dec00104 	addi	sp,sp,4
   14210:	f800283a 	ret

00014214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14214:	defffe04 	addi	sp,sp,-8
   14218:	dfc00115 	stw	ra,4(sp)
   1421c:	df000015 	stw	fp,0(sp)
   14220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14224:	008000b4 	movhi	r2,2
   14228:	10a10204 	addi	r2,r2,-31736
   1422c:	10800017 	ldw	r2,0(r2)
   14230:	10000526 	beq	r2,zero,14248 <alt_get_errno+0x34>
   14234:	008000b4 	movhi	r2,2
   14238:	10a10204 	addi	r2,r2,-31736
   1423c:	10800017 	ldw	r2,0(r2)
   14240:	103ee83a 	callr	r2
   14244:	00000206 	br	14250 <alt_get_errno+0x3c>
   14248:	008000b4 	movhi	r2,2
   1424c:	10a7c204 	addi	r2,r2,-24824
}
   14250:	e037883a 	mov	sp,fp
   14254:	dfc00117 	ldw	ra,4(sp)
   14258:	df000017 	ldw	fp,0(sp)
   1425c:	dec00204 	addi	sp,sp,8
   14260:	f800283a 	ret

00014264 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14264:	defff904 	addi	sp,sp,-28
   14268:	dfc00615 	stw	ra,24(sp)
   1426c:	df000515 	stw	fp,20(sp)
   14270:	df000504 	addi	fp,sp,20
   14274:	e13ffd15 	stw	r4,-12(fp)
   14278:	e17ffe15 	stw	r5,-8(fp)
   1427c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	10000716 	blt	r2,zero,142a4 <read+0x40>
   14288:	e13ffd17 	ldw	r4,-12(fp)
   1428c:	01400304 	movi	r5,12
   14290:	00110a40 	call	110a4 <__mulsi3>
   14294:	00c00074 	movhi	r3,1
   14298:	18dc7c04 	addi	r3,r3,29168
   1429c:	10c5883a 	add	r2,r2,r3
   142a0:	00000106 	br	142a8 <read+0x44>
   142a4:	0005883a 	mov	r2,zero
   142a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   142ac:	e0bffb17 	ldw	r2,-20(fp)
   142b0:	10002026 	beq	r2,zero,14334 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142b4:	e0bffb17 	ldw	r2,-20(fp)
   142b8:	10800217 	ldw	r2,8(r2)
   142bc:	108000cc 	andi	r2,r2,3
   142c0:	10800060 	cmpeqi	r2,r2,1
   142c4:	1000171e 	bne	r2,zero,14324 <read+0xc0>
        (fd->dev->read))
   142c8:	e0bffb17 	ldw	r2,-20(fp)
   142cc:	10800017 	ldw	r2,0(r2)
   142d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142d4:	10001326 	beq	r2,zero,14324 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   142d8:	e0bffb17 	ldw	r2,-20(fp)
   142dc:	10800017 	ldw	r2,0(r2)
   142e0:	10c00517 	ldw	r3,20(r2)
   142e4:	e0bfff17 	ldw	r2,-4(fp)
   142e8:	e13ffb17 	ldw	r4,-20(fp)
   142ec:	e17ffe17 	ldw	r5,-8(fp)
   142f0:	100d883a 	mov	r6,r2
   142f4:	183ee83a 	callr	r3
   142f8:	e0bffc15 	stw	r2,-16(fp)
   142fc:	e0bffc17 	ldw	r2,-16(fp)
   14300:	1000060e 	bge	r2,zero,1431c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   14304:	00142140 	call	14214 <alt_get_errno>
   14308:	e0fffc17 	ldw	r3,-16(fp)
   1430c:	00c7c83a 	sub	r3,zero,r3
   14310:	10c00015 	stw	r3,0(r2)
          return -1;
   14314:	00bfffc4 	movi	r2,-1
   14318:	00000a06 	br	14344 <read+0xe0>
        }
        return rval;
   1431c:	e0bffc17 	ldw	r2,-16(fp)
   14320:	00000806 	br	14344 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14324:	00142140 	call	14214 <alt_get_errno>
   14328:	00c00344 	movi	r3,13
   1432c:	10c00015 	stw	r3,0(r2)
   14330:	00000306 	br	14340 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14334:	00142140 	call	14214 <alt_get_errno>
   14338:	00c01444 	movi	r3,81
   1433c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   14340:	00bfffc4 	movi	r2,-1
}
   14344:	e037883a 	mov	sp,fp
   14348:	dfc00117 	ldw	ra,4(sp)
   1434c:	df000017 	ldw	fp,0(sp)
   14350:	dec00204 	addi	sp,sp,8
   14354:	f800283a 	ret

00014358 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14358:	defffc04 	addi	sp,sp,-16
   1435c:	dfc00315 	stw	ra,12(sp)
   14360:	df000215 	stw	fp,8(sp)
   14364:	dc000115 	stw	r16,4(sp)
   14368:	df000104 	addi	fp,sp,4
   1436c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14370:	e0bfff17 	ldw	r2,-4(fp)
   14374:	108000d0 	cmplti	r2,r2,3
   14378:	1000111e 	bne	r2,zero,143c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1437c:	04000074 	movhi	r16,1
   14380:	841c7c04 	addi	r16,r16,29168
   14384:	e0bfff17 	ldw	r2,-4(fp)
   14388:	1009883a 	mov	r4,r2
   1438c:	01400304 	movi	r5,12
   14390:	00110a40 	call	110a4 <__mulsi3>
   14394:	8085883a 	add	r2,r16,r2
   14398:	10800204 	addi	r2,r2,8
   1439c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   143a0:	04000074 	movhi	r16,1
   143a4:	841c7c04 	addi	r16,r16,29168
   143a8:	e0bfff17 	ldw	r2,-4(fp)
   143ac:	1009883a 	mov	r4,r2
   143b0:	01400304 	movi	r5,12
   143b4:	00110a40 	call	110a4 <__mulsi3>
   143b8:	8085883a 	add	r2,r16,r2
   143bc:	10000015 	stw	zero,0(r2)
  }
}
   143c0:	e037883a 	mov	sp,fp
   143c4:	dfc00217 	ldw	ra,8(sp)
   143c8:	df000117 	ldw	fp,4(sp)
   143cc:	dc000017 	ldw	r16,0(sp)
   143d0:	dec00304 	addi	sp,sp,12
   143d4:	f800283a 	ret

000143d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   143d8:	defff904 	addi	sp,sp,-28
   143dc:	df000615 	stw	fp,24(sp)
   143e0:	df000604 	addi	fp,sp,24
   143e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143e8:	0005303a 	rdctl	r2,status
   143ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143f0:	e0fffc17 	ldw	r3,-16(fp)
   143f4:	00bfff84 	movi	r2,-2
   143f8:	1884703a 	and	r2,r3,r2
   143fc:	1001703a 	wrctl	status,r2
  
  return context;
   14400:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14404:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14408:	d0a00f17 	ldw	r2,-32708(gp)
   1440c:	10c000c4 	addi	r3,r2,3
   14410:	00bfff04 	movi	r2,-4
   14414:	1884703a 	and	r2,r3,r2
   14418:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1441c:	d0e00f17 	ldw	r3,-32708(gp)
   14420:	e0bfff17 	ldw	r2,-4(fp)
   14424:	1885883a 	add	r2,r3,r2
   14428:	00c000b4 	movhi	r3,2
   1442c:	18c00004 	addi	r3,r3,0
   14430:	1880062e 	bgeu	r3,r2,1444c <sbrk+0x74>
   14434:	e0bffa17 	ldw	r2,-24(fp)
   14438:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1443c:	e0bffd17 	ldw	r2,-12(fp)
   14440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14444:	00bfffc4 	movi	r2,-1
   14448:	00000b06 	br	14478 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1444c:	d0a00f17 	ldw	r2,-32708(gp)
   14450:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   14454:	d0e00f17 	ldw	r3,-32708(gp)
   14458:	e0bfff17 	ldw	r2,-4(fp)
   1445c:	1885883a 	add	r2,r3,r2
   14460:	d0a00f15 	stw	r2,-32708(gp)
   14464:	e0bffa17 	ldw	r2,-24(fp)
   14468:	e0bffe15 	stw	r2,-8(fp)
   1446c:	e0bffe17 	ldw	r2,-8(fp)
   14470:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14474:	e0bffb17 	ldw	r2,-20(fp)
} 
   14478:	e037883a 	mov	sp,fp
   1447c:	df000017 	ldw	fp,0(sp)
   14480:	dec00104 	addi	sp,sp,4
   14484:	f800283a 	ret

00014488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14488:	defffe04 	addi	sp,sp,-8
   1448c:	dfc00115 	stw	ra,4(sp)
   14490:	df000015 	stw	fp,0(sp)
   14494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14498:	008000b4 	movhi	r2,2
   1449c:	10a10204 	addi	r2,r2,-31736
   144a0:	10800017 	ldw	r2,0(r2)
   144a4:	10000526 	beq	r2,zero,144bc <alt_get_errno+0x34>
   144a8:	008000b4 	movhi	r2,2
   144ac:	10a10204 	addi	r2,r2,-31736
   144b0:	10800017 	ldw	r2,0(r2)
   144b4:	103ee83a 	callr	r2
   144b8:	00000206 	br	144c4 <alt_get_errno+0x3c>
   144bc:	008000b4 	movhi	r2,2
   144c0:	10a7c204 	addi	r2,r2,-24824
}
   144c4:	e037883a 	mov	sp,fp
   144c8:	dfc00117 	ldw	ra,4(sp)
   144cc:	df000017 	ldw	fp,0(sp)
   144d0:	dec00204 	addi	sp,sp,8
   144d4:	f800283a 	ret

000144d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   144d8:	defff904 	addi	sp,sp,-28
   144dc:	dfc00615 	stw	ra,24(sp)
   144e0:	df000515 	stw	fp,20(sp)
   144e4:	df000504 	addi	fp,sp,20
   144e8:	e13ffd15 	stw	r4,-12(fp)
   144ec:	e17ffe15 	stw	r5,-8(fp)
   144f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   144f4:	e0bffd17 	ldw	r2,-12(fp)
   144f8:	10000716 	blt	r2,zero,14518 <write+0x40>
   144fc:	e13ffd17 	ldw	r4,-12(fp)
   14500:	01400304 	movi	r5,12
   14504:	00110a40 	call	110a4 <__mulsi3>
   14508:	00c00074 	movhi	r3,1
   1450c:	18dc7c04 	addi	r3,r3,29168
   14510:	10c5883a 	add	r2,r2,r3
   14514:	00000106 	br	1451c <write+0x44>
   14518:	0005883a 	mov	r2,zero
   1451c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14520:	e0bffb17 	ldw	r2,-20(fp)
   14524:	10001f26 	beq	r2,zero,145a4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14528:	e0bffb17 	ldw	r2,-20(fp)
   1452c:	10800217 	ldw	r2,8(r2)
   14530:	108000cc 	andi	r2,r2,3
   14534:	10001726 	beq	r2,zero,14594 <write+0xbc>
   14538:	e0bffb17 	ldw	r2,-20(fp)
   1453c:	10800017 	ldw	r2,0(r2)
   14540:	10800617 	ldw	r2,24(r2)
   14544:	10001326 	beq	r2,zero,14594 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14548:	e0bffb17 	ldw	r2,-20(fp)
   1454c:	10800017 	ldw	r2,0(r2)
   14550:	10c00617 	ldw	r3,24(r2)
   14554:	e0bfff17 	ldw	r2,-4(fp)
   14558:	e13ffb17 	ldw	r4,-20(fp)
   1455c:	e17ffe17 	ldw	r5,-8(fp)
   14560:	100d883a 	mov	r6,r2
   14564:	183ee83a 	callr	r3
   14568:	e0bffc15 	stw	r2,-16(fp)
   1456c:	e0bffc17 	ldw	r2,-16(fp)
   14570:	1000060e 	bge	r2,zero,1458c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14574:	00144880 	call	14488 <alt_get_errno>
   14578:	e0fffc17 	ldw	r3,-16(fp)
   1457c:	00c7c83a 	sub	r3,zero,r3
   14580:	10c00015 	stw	r3,0(r2)
        return -1;
   14584:	00bfffc4 	movi	r2,-1
   14588:	00000a06 	br	145b4 <write+0xdc>
      }
      return rval;
   1458c:	e0bffc17 	ldw	r2,-16(fp)
   14590:	00000806 	br	145b4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14594:	00144880 	call	14488 <alt_get_errno>
   14598:	00c00344 	movi	r3,13
   1459c:	10c00015 	stw	r3,0(r2)
   145a0:	00000306 	br	145b0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   145a4:	00144880 	call	14488 <alt_get_errno>
   145a8:	00c01444 	movi	r3,81
   145ac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   145b0:	00bfffc4 	movi	r2,-1
}
   145b4:	e037883a 	mov	sp,fp
   145b8:	dfc00117 	ldw	ra,4(sp)
   145bc:	df000017 	ldw	fp,0(sp)
   145c0:	dec00204 	addi	sp,sp,8
   145c4:	f800283a 	ret

000145c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   145c8:	defffd04 	addi	sp,sp,-12
   145cc:	dfc00215 	stw	ra,8(sp)
   145d0:	df000115 	stw	fp,4(sp)
   145d4:	df000104 	addi	fp,sp,4
   145d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   145dc:	e13fff17 	ldw	r4,-4(fp)
   145e0:	014000b4 	movhi	r5,2
   145e4:	2960ff04 	addi	r5,r5,-31748
   145e8:	00158980 	call	15898 <alt_dev_llist_insert>
}
   145ec:	e037883a 	mov	sp,fp
   145f0:	dfc00117 	ldw	ra,4(sp)
   145f4:	df000017 	ldw	fp,0(sp)
   145f8:	dec00204 	addi	sp,sp,8
   145fc:	f800283a 	ret

00014600 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14600:	defffd04 	addi	sp,sp,-12
   14604:	dfc00215 	stw	ra,8(sp)
   14608:	df000115 	stw	fp,4(sp)
   1460c:	df000104 	addi	fp,sp,4
   14610:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1C, cpu_1c);
   14614:	00162600 	call	16260 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14618:	00800044 	movi	r2,1
   1461c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14620:	e037883a 	mov	sp,fp
   14624:	dfc00117 	ldw	ra,4(sp)
   14628:	df000017 	ldw	fp,0(sp)
   1462c:	dec00204 	addi	sp,sp,8
   14630:	f800283a 	ret

00014634 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14634:	defffe04 	addi	sp,sp,-8
   14638:	dfc00115 	stw	ra,4(sp)
   1463c:	df000015 	stw	fp,0(sp)
   14640:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1C, timer_1c);
   14644:	010000b4 	movhi	r4,2
   14648:	21041004 	addi	r4,r4,4160
   1464c:	000b883a 	mov	r5,zero
   14650:	01800044 	movi	r6,1
   14654:	01c0fa04 	movi	r7,1000
   14658:	00156640 	call	15664 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1B, fifo_1b);
   1465c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1C, fifo_1c);
   14660:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1C, jtag_uart_1c);
   14664:	01000074 	movhi	r4,1
   14668:	211ce604 	addi	r4,r4,29592
   1466c:	000b883a 	mov	r5,zero
   14670:	01800404 	movi	r6,16
   14674:	0014cf00 	call	14cf0 <altera_avalon_jtag_uart_init>
   14678:	01000074 	movhi	r4,1
   1467c:	211cdc04 	addi	r4,r4,29552
   14680:	00145c80 	call	145c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1C, sysid_1c);
   14684:	0001883a 	nop
}
   14688:	e037883a 	mov	sp,fp
   1468c:	dfc00117 	ldw	ra,4(sp)
   14690:	df000017 	ldw	fp,0(sp)
   14694:	dec00204 	addi	sp,sp,8
   14698:	f800283a 	ret

0001469c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1469c:	defffa04 	addi	sp,sp,-24
   146a0:	dfc00515 	stw	ra,20(sp)
   146a4:	df000415 	stw	fp,16(sp)
   146a8:	df000404 	addi	fp,sp,16
   146ac:	e13ffc15 	stw	r4,-16(fp)
   146b0:	e17ffd15 	stw	r5,-12(fp)
   146b4:	e1bffe15 	stw	r6,-8(fp)
   146b8:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   146bc:	e13ffc17 	ldw	r4,-16(fp)
   146c0:	01400fc4 	movi	r5,63
   146c4:	00148680 	call	14868 <altera_avalon_fifo_clear_event>
   146c8:	10000226 	beq	r2,zero,146d4 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   146cc:	00bfffc4 	movi	r2,-1
   146d0:	00001306 	br	14720 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   146d4:	e13ffc17 	ldw	r4,-16(fp)
   146d8:	e17ffd17 	ldw	r5,-12(fp)
   146dc:	00148c40 	call	148c4 <altera_avalon_fifo_write_ienable>
   146e0:	10000226 	beq	r2,zero,146ec <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   146e4:	00bfff84 	movi	r2,-2
   146e8:	00000d06 	br	14720 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   146ec:	e13ffc17 	ldw	r4,-16(fp)
   146f0:	e17fff17 	ldw	r5,-4(fp)
   146f4:	001491c0 	call	1491c <altera_avalon_fifo_write_almostfull>
   146f8:	10000226 	beq	r2,zero,14704 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   146fc:	00bfff44 	movi	r2,-3
   14700:	00000706 	br	14720 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   14704:	e13ffc17 	ldw	r4,-16(fp)
   14708:	e17ffe17 	ldw	r5,-8(fp)
   1470c:	00149740 	call	14974 <altera_avalon_fifo_write_almostempty>
   14710:	10000226 	beq	r2,zero,1471c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14714:	00bfff44 	movi	r2,-3
   14718:	00000106 	br	14720 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   1471c:	0005883a 	mov	r2,zero
}
   14720:	e037883a 	mov	sp,fp
   14724:	dfc00117 	ldw	ra,4(sp)
   14728:	df000017 	ldw	fp,0(sp)
   1472c:	dec00204 	addi	sp,sp,8
   14730:	f800283a 	ret

00014734 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   14734:	defffd04 	addi	sp,sp,-12
   14738:	df000215 	stw	fp,8(sp)
   1473c:	df000204 	addi	fp,sp,8
   14740:	e13ffe15 	stw	r4,-8(fp)
   14744:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   14748:	e0bffe17 	ldw	r2,-8(fp)
   1474c:	10800104 	addi	r2,r2,4
   14750:	10800037 	ldwio	r2,0(r2)
   14754:	1007883a 	mov	r3,r2
   14758:	e0bfff17 	ldw	r2,-4(fp)
   1475c:	1884703a 	and	r2,r3,r2
}
   14760:	e037883a 	mov	sp,fp
   14764:	df000017 	ldw	fp,0(sp)
   14768:	dec00104 	addi	sp,sp,4
   1476c:	f800283a 	ret

00014770 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   14770:	defffd04 	addi	sp,sp,-12
   14774:	df000215 	stw	fp,8(sp)
   14778:	df000204 	addi	fp,sp,8
   1477c:	e13ffe15 	stw	r4,-8(fp)
   14780:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   14784:	e0bffe17 	ldw	r2,-8(fp)
   14788:	10800304 	addi	r2,r2,12
   1478c:	10800037 	ldwio	r2,0(r2)
   14790:	1007883a 	mov	r3,r2
   14794:	e0bfff17 	ldw	r2,-4(fp)
   14798:	1884703a 	and	r2,r3,r2
}
   1479c:	e037883a 	mov	sp,fp
   147a0:	df000017 	ldw	fp,0(sp)
   147a4:	dec00104 	addi	sp,sp,4
   147a8:	f800283a 	ret

000147ac <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   147ac:	defffe04 	addi	sp,sp,-8
   147b0:	df000115 	stw	fp,4(sp)
   147b4:	df000104 	addi	fp,sp,4
   147b8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   147bc:	e0bfff17 	ldw	r2,-4(fp)
   147c0:	10800404 	addi	r2,r2,16
   147c4:	10800037 	ldwio	r2,0(r2)
}
   147c8:	e037883a 	mov	sp,fp
   147cc:	df000017 	ldw	fp,0(sp)
   147d0:	dec00104 	addi	sp,sp,4
   147d4:	f800283a 	ret

000147d8 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   147d8:	defffe04 	addi	sp,sp,-8
   147dc:	df000115 	stw	fp,4(sp)
   147e0:	df000104 	addi	fp,sp,4
   147e4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   147e8:	e0bfff17 	ldw	r2,-4(fp)
   147ec:	10800504 	addi	r2,r2,20
   147f0:	10800037 	ldwio	r2,0(r2)
}
   147f4:	e037883a 	mov	sp,fp
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00104 	addi	sp,sp,4
   14800:	f800283a 	ret

00014804 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   14804:	defffd04 	addi	sp,sp,-12
   14808:	df000215 	stw	fp,8(sp)
   1480c:	df000204 	addi	fp,sp,8
   14810:	e13ffe15 	stw	r4,-8(fp)
   14814:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	10800204 	addi	r2,r2,8
   14820:	10800037 	ldwio	r2,0(r2)
   14824:	1007883a 	mov	r3,r2
   14828:	e0bfff17 	ldw	r2,-4(fp)
   1482c:	1884703a 	and	r2,r3,r2
}
   14830:	e037883a 	mov	sp,fp
   14834:	df000017 	ldw	fp,0(sp)
   14838:	dec00104 	addi	sp,sp,4
   1483c:	f800283a 	ret

00014840 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   14840:	defffe04 	addi	sp,sp,-8
   14844:	df000115 	stw	fp,4(sp)
   14848:	df000104 	addi	fp,sp,4
   1484c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   14850:	e0bfff17 	ldw	r2,-4(fp)
   14854:	10800037 	ldwio	r2,0(r2)
}
   14858:	e037883a 	mov	sp,fp
   1485c:	df000017 	ldw	fp,0(sp)
   14860:	dec00104 	addi	sp,sp,4
   14864:	f800283a 	ret

00014868 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14868:	defffd04 	addi	sp,sp,-12
   1486c:	df000215 	stw	fp,8(sp)
   14870:	df000204 	addi	fp,sp,8
   14874:	e13ffe15 	stw	r4,-8(fp)
   14878:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	10800204 	addi	r2,r2,8
   14884:	e0ffff17 	ldw	r3,-4(fp)
   14888:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1488c:	e0bffe17 	ldw	r2,-8(fp)
   14890:	10800204 	addi	r2,r2,8
   14894:	10800037 	ldwio	r2,0(r2)
   14898:	1007883a 	mov	r3,r2
   1489c:	e0bfff17 	ldw	r2,-4(fp)
   148a0:	1884703a 	and	r2,r3,r2
   148a4:	1000021e 	bne	r2,zero,148b0 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   148a8:	0005883a 	mov	r2,zero
   148ac:	00000106 	br	148b4 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   148b0:	00bfffc4 	movi	r2,-1
}
   148b4:	e037883a 	mov	sp,fp
   148b8:	df000017 	ldw	fp,0(sp)
   148bc:	dec00104 	addi	sp,sp,4
   148c0:	f800283a 	ret

000148c4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   148c4:	defffd04 	addi	sp,sp,-12
   148c8:	df000215 	stw	fp,8(sp)
   148cc:	df000204 	addi	fp,sp,8
   148d0:	e13ffe15 	stw	r4,-8(fp)
   148d4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   148d8:	e0bffe17 	ldw	r2,-8(fp)
   148dc:	10800304 	addi	r2,r2,12
   148e0:	e0ffff17 	ldw	r3,-4(fp)
   148e4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   148e8:	e0bffe17 	ldw	r2,-8(fp)
   148ec:	10800304 	addi	r2,r2,12
   148f0:	10800037 	ldwio	r2,0(r2)
   148f4:	1007883a 	mov	r3,r2
   148f8:	e0bfff17 	ldw	r2,-4(fp)
   148fc:	1880021e 	bne	r3,r2,14908 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14900:	0005883a 	mov	r2,zero
   14904:	00000106 	br	1490c <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14908:	00bfff84 	movi	r2,-2
}
   1490c:	e037883a 	mov	sp,fp
   14910:	df000017 	ldw	fp,0(sp)
   14914:	dec00104 	addi	sp,sp,4
   14918:	f800283a 	ret

0001491c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   1491c:	defffd04 	addi	sp,sp,-12
   14920:	df000215 	stw	fp,8(sp)
   14924:	df000204 	addi	fp,sp,8
   14928:	e13ffe15 	stw	r4,-8(fp)
   1492c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   14930:	e0bffe17 	ldw	r2,-8(fp)
   14934:	10800404 	addi	r2,r2,16
   14938:	e0ffff17 	ldw	r3,-4(fp)
   1493c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   14940:	e0bffe17 	ldw	r2,-8(fp)
   14944:	10800404 	addi	r2,r2,16
   14948:	10800037 	ldwio	r2,0(r2)
   1494c:	1007883a 	mov	r3,r2
   14950:	e0bfff17 	ldw	r2,-4(fp)
   14954:	1880021e 	bne	r3,r2,14960 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14958:	0005883a 	mov	r2,zero
   1495c:	00000106 	br	14964 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14960:	00bfff44 	movi	r2,-3
}
   14964:	e037883a 	mov	sp,fp
   14968:	df000017 	ldw	fp,0(sp)
   1496c:	dec00104 	addi	sp,sp,4
   14970:	f800283a 	ret

00014974 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14974:	defffd04 	addi	sp,sp,-12
   14978:	df000215 	stw	fp,8(sp)
   1497c:	df000204 	addi	fp,sp,8
   14980:	e13ffe15 	stw	r4,-8(fp)
   14984:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14988:	e0bffe17 	ldw	r2,-8(fp)
   1498c:	10800504 	addi	r2,r2,20
   14990:	e0ffff17 	ldw	r3,-4(fp)
   14994:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   14998:	e0bffe17 	ldw	r2,-8(fp)
   1499c:	10800504 	addi	r2,r2,20
   149a0:	10800037 	ldwio	r2,0(r2)
   149a4:	1007883a 	mov	r3,r2
   149a8:	e0bfff17 	ldw	r2,-4(fp)
   149ac:	1880021e 	bne	r3,r2,149b8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   149b0:	0005883a 	mov	r2,zero
   149b4:	00000106 	br	149bc <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   149b8:	00bfff44 	movi	r2,-3
}
   149bc:	e037883a 	mov	sp,fp
   149c0:	df000017 	ldw	fp,0(sp)
   149c4:	dec00104 	addi	sp,sp,4
   149c8:	f800283a 	ret

000149cc <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   149cc:	defffb04 	addi	sp,sp,-20
   149d0:	dfc00415 	stw	ra,16(sp)
   149d4:	df000315 	stw	fp,12(sp)
   149d8:	df000304 	addi	fp,sp,12
   149dc:	e13ffd15 	stw	r4,-12(fp)
   149e0:	e17ffe15 	stw	r5,-8(fp)
   149e4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   149e8:	e13ffe17 	ldw	r4,-8(fp)
   149ec:	01400044 	movi	r5,1
   149f0:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   149f4:	1000051e 	bne	r2,zero,14a0c <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   149f8:	e0bffd17 	ldw	r2,-12(fp)
   149fc:	e0ffff17 	ldw	r3,-4(fp)
   14a00:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   14a04:	0005883a 	mov	r2,zero
   14a08:	00000106 	br	14a10 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   14a0c:	00bfff04 	movi	r2,-4
    }
}
   14a10:	e037883a 	mov	sp,fp
   14a14:	dfc00117 	ldw	ra,4(sp)
   14a18:	df000017 	ldw	fp,0(sp)
   14a1c:	dec00204 	addi	sp,sp,8
   14a20:	f800283a 	ret

00014a24 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   14a24:	defffa04 	addi	sp,sp,-24
   14a28:	dfc00515 	stw	ra,20(sp)
   14a2c:	df000415 	stw	fp,16(sp)
   14a30:	df000404 	addi	fp,sp,16
   14a34:	e13ffd15 	stw	r4,-12(fp)
   14a38:	e17ffe15 	stw	r5,-8(fp)
   14a3c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   14a40:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14a44:	e0bfff17 	ldw	r2,-4(fp)
   14a48:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14a4c:	e13ffe17 	ldw	r4,-8(fp)
   14a50:	01400084 	movi	r5,2
   14a54:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   14a58:	1000071e 	bne	r2,zero,14a78 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   14a5c:	e13ffe17 	ldw	r4,-8(fp)
   14a60:	00148400 	call	14840 <altera_avalon_fifo_read_level>
   14a64:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14a68:	e0bffd17 	ldw	r2,-12(fp)
   14a6c:	10c00037 	ldwio	r3,0(r2)
   14a70:	e0bfff17 	ldw	r2,-4(fp)
   14a74:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14a78:	e0bffc17 	ldw	r2,-16(fp)
}
   14a7c:	e037883a 	mov	sp,fp
   14a80:	dfc00117 	ldw	ra,4(sp)
   14a84:	df000017 	ldw	fp,0(sp)
   14a88:	dec00204 	addi	sp,sp,8
   14a8c:	f800283a 	ret

00014a90 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   14a90:	defffc04 	addi	sp,sp,-16
   14a94:	dfc00315 	stw	ra,12(sp)
   14a98:	df000215 	stw	fp,8(sp)
   14a9c:	df000204 	addi	fp,sp,8
   14aa0:	e13ffe15 	stw	r4,-8(fp)
   14aa4:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14aa8:	e13fff17 	ldw	r4,-4(fp)
   14aac:	01400084 	movi	r5,2
   14ab0:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   14ab4:	1000031e 	bne	r2,zero,14ac4 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14ab8:	e0bffe17 	ldw	r2,-8(fp)
   14abc:	10800037 	ldwio	r2,0(r2)
   14ac0:	00000106 	br	14ac8 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   14ac4:	0005883a 	mov	r2,zero
}
   14ac8:	e037883a 	mov	sp,fp
   14acc:	dfc00117 	ldw	ra,4(sp)
   14ad0:	df000017 	ldw	fp,0(sp)
   14ad4:	dec00204 	addi	sp,sp,8
   14ad8:	f800283a 	ret

00014adc <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   14adc:	defffb04 	addi	sp,sp,-20
   14ae0:	dfc00415 	stw	ra,16(sp)
   14ae4:	df000315 	stw	fp,12(sp)
   14ae8:	df000304 	addi	fp,sp,12
   14aec:	e13ffd15 	stw	r4,-12(fp)
   14af0:	e17ffe15 	stw	r5,-8(fp)
   14af4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14af8:	e13ffe17 	ldw	r4,-8(fp)
   14afc:	01400044 	movi	r5,1
   14b00:	00147340 	call	14734 <altera_avalon_fifo_read_status>
   14b04:	1000061e 	bne	r2,zero,14b20 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   14b08:	e0bffd17 	ldw	r2,-12(fp)
   14b0c:	10800104 	addi	r2,r2,4
   14b10:	e0ffff17 	ldw	r3,-4(fp)
   14b14:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   14b18:	0005883a 	mov	r2,zero
   14b1c:	00000106 	br	14b24 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   14b20:	00bfff04 	movi	r2,-4
    }
}
   14b24:	e037883a 	mov	sp,fp
   14b28:	dfc00117 	ldw	ra,4(sp)
   14b2c:	df000017 	ldw	fp,0(sp)
   14b30:	dec00204 	addi	sp,sp,8
   14b34:	f800283a 	ret

00014b38 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   14b38:	defffe04 	addi	sp,sp,-8
   14b3c:	df000115 	stw	fp,4(sp)
   14b40:	df000104 	addi	fp,sp,4
   14b44:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   14b48:	e0bfff17 	ldw	r2,-4(fp)
   14b4c:	10800104 	addi	r2,r2,4
   14b50:	10800037 	ldwio	r2,0(r2)
}
   14b54:	e037883a 	mov	sp,fp
   14b58:	df000017 	ldw	fp,0(sp)
   14b5c:	dec00104 	addi	sp,sp,4
   14b60:	f800283a 	ret

00014b64 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   14b64:	defffe04 	addi	sp,sp,-8
   14b68:	df000115 	stw	fp,4(sp)
   14b6c:	df000104 	addi	fp,sp,4
   14b70:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   14b74:	e0bfff17 	ldw	r2,-4(fp)
   14b78:	10800037 	ldwio	r2,0(r2)
}
   14b7c:	e037883a 	mov	sp,fp
   14b80:	df000017 	ldw	fp,0(sp)
   14b84:	dec00104 	addi	sp,sp,4
   14b88:	f800283a 	ret

00014b8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14b8c:	defffa04 	addi	sp,sp,-24
   14b90:	dfc00515 	stw	ra,20(sp)
   14b94:	df000415 	stw	fp,16(sp)
   14b98:	df000404 	addi	fp,sp,16
   14b9c:	e13ffd15 	stw	r4,-12(fp)
   14ba0:	e17ffe15 	stw	r5,-8(fp)
   14ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14ba8:	e0bffd17 	ldw	r2,-12(fp)
   14bac:	10800017 	ldw	r2,0(r2)
   14bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14bb4:	e0bffc17 	ldw	r2,-16(fp)
   14bb8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14bbc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14bc0:	10800217 	ldw	r2,8(r2)
   14bc4:	1809883a 	mov	r4,r3
   14bc8:	e17ffe17 	ldw	r5,-8(fp)
   14bcc:	e1bfff17 	ldw	r6,-4(fp)
   14bd0:	100f883a 	mov	r7,r2
   14bd4:	00151b40 	call	151b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14bd8:	e037883a 	mov	sp,fp
   14bdc:	dfc00117 	ldw	ra,4(sp)
   14be0:	df000017 	ldw	fp,0(sp)
   14be4:	dec00204 	addi	sp,sp,8
   14be8:	f800283a 	ret

00014bec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14bec:	defffa04 	addi	sp,sp,-24
   14bf0:	dfc00515 	stw	ra,20(sp)
   14bf4:	df000415 	stw	fp,16(sp)
   14bf8:	df000404 	addi	fp,sp,16
   14bfc:	e13ffd15 	stw	r4,-12(fp)
   14c00:	e17ffe15 	stw	r5,-8(fp)
   14c04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14c08:	e0bffd17 	ldw	r2,-12(fp)
   14c0c:	10800017 	ldw	r2,0(r2)
   14c10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14c14:	e0bffc17 	ldw	r2,-16(fp)
   14c18:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14c1c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14c20:	10800217 	ldw	r2,8(r2)
   14c24:	1809883a 	mov	r4,r3
   14c28:	e17ffe17 	ldw	r5,-8(fp)
   14c2c:	e1bfff17 	ldw	r6,-4(fp)
   14c30:	100f883a 	mov	r7,r2
   14c34:	00153cc0 	call	153cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14c38:	e037883a 	mov	sp,fp
   14c3c:	dfc00117 	ldw	ra,4(sp)
   14c40:	df000017 	ldw	fp,0(sp)
   14c44:	dec00204 	addi	sp,sp,8
   14c48:	f800283a 	ret

00014c4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14c4c:	defffc04 	addi	sp,sp,-16
   14c50:	dfc00315 	stw	ra,12(sp)
   14c54:	df000215 	stw	fp,8(sp)
   14c58:	df000204 	addi	fp,sp,8
   14c5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14c60:	e0bfff17 	ldw	r2,-4(fp)
   14c64:	10800017 	ldw	r2,0(r2)
   14c68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14c6c:	e0bffe17 	ldw	r2,-8(fp)
   14c70:	10c00a04 	addi	r3,r2,40
   14c74:	e0bfff17 	ldw	r2,-4(fp)
   14c78:	10800217 	ldw	r2,8(r2)
   14c7c:	1809883a 	mov	r4,r3
   14c80:	100b883a 	mov	r5,r2
   14c84:	00150580 	call	15058 <altera_avalon_jtag_uart_close>
}
   14c88:	e037883a 	mov	sp,fp
   14c8c:	dfc00117 	ldw	ra,4(sp)
   14c90:	df000017 	ldw	fp,0(sp)
   14c94:	dec00204 	addi	sp,sp,8
   14c98:	f800283a 	ret

00014c9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14c9c:	defffa04 	addi	sp,sp,-24
   14ca0:	dfc00515 	stw	ra,20(sp)
   14ca4:	df000415 	stw	fp,16(sp)
   14ca8:	df000404 	addi	fp,sp,16
   14cac:	e13ffd15 	stw	r4,-12(fp)
   14cb0:	e17ffe15 	stw	r5,-8(fp)
   14cb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14cb8:	e0bffd17 	ldw	r2,-12(fp)
   14cbc:	10800017 	ldw	r2,0(r2)
   14cc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14cc4:	e0bffc17 	ldw	r2,-16(fp)
   14cc8:	10800a04 	addi	r2,r2,40
   14ccc:	1009883a 	mov	r4,r2
   14cd0:	e17ffe17 	ldw	r5,-8(fp)
   14cd4:	e1bfff17 	ldw	r6,-4(fp)
   14cd8:	00150c00 	call	150c0 <altera_avalon_jtag_uart_ioctl>
}
   14cdc:	e037883a 	mov	sp,fp
   14ce0:	dfc00117 	ldw	ra,4(sp)
   14ce4:	df000017 	ldw	fp,0(sp)
   14ce8:	dec00204 	addi	sp,sp,8
   14cec:	f800283a 	ret

00014cf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14cf0:	defffa04 	addi	sp,sp,-24
   14cf4:	dfc00515 	stw	ra,20(sp)
   14cf8:	df000415 	stw	fp,16(sp)
   14cfc:	df000404 	addi	fp,sp,16
   14d00:	e13ffd15 	stw	r4,-12(fp)
   14d04:	e17ffe15 	stw	r5,-8(fp)
   14d08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14d0c:	e0bffd17 	ldw	r2,-12(fp)
   14d10:	00c00044 	movi	r3,1
   14d14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14d18:	e0bffd17 	ldw	r2,-12(fp)
   14d1c:	10800017 	ldw	r2,0(r2)
   14d20:	10800104 	addi	r2,r2,4
   14d24:	e0fffd17 	ldw	r3,-12(fp)
   14d28:	18c00817 	ldw	r3,32(r3)
   14d2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14d30:	e0fffe17 	ldw	r3,-8(fp)
   14d34:	e0bfff17 	ldw	r2,-4(fp)
   14d38:	d8000015 	stw	zero,0(sp)
   14d3c:	1809883a 	mov	r4,r3
   14d40:	100b883a 	mov	r5,r2
   14d44:	01800074 	movhi	r6,1
   14d48:	31936c04 	addi	r6,r6,19888
   14d4c:	e1fffd17 	ldw	r7,-12(fp)
   14d50:	0015a0c0 	call	15a0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14d54:	e0bffd17 	ldw	r2,-12(fp)
   14d58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14d5c:	e0bffd17 	ldw	r2,-12(fp)
   14d60:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14d64:	008000b4 	movhi	r2,2
   14d68:	10a7c704 	addi	r2,r2,-24804
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	1809883a 	mov	r4,r3
   14d74:	100b883a 	mov	r5,r2
   14d78:	01800074 	movhi	r6,1
   14d7c:	3193ed04 	addi	r6,r6,20404
   14d80:	e1fffd17 	ldw	r7,-12(fp)
   14d84:	00156ec0 	call	156ec <alt_alarm_start>
   14d88:	1000040e 	bge	r2,zero,14d9c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14d8c:	e0bffd17 	ldw	r2,-12(fp)
   14d90:	00e00034 	movhi	r3,32768
   14d94:	18ffffc4 	addi	r3,r3,-1
   14d98:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14d9c:	e037883a 	mov	sp,fp
   14da0:	dfc00117 	ldw	ra,4(sp)
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00204 	addi	sp,sp,8
   14dac:	f800283a 	ret

00014db0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14db0:	defff804 	addi	sp,sp,-32
   14db4:	df000715 	stw	fp,28(sp)
   14db8:	df000704 	addi	fp,sp,28
   14dbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14dc8:	e0bffb17 	ldw	r2,-20(fp)
   14dcc:	10800017 	ldw	r2,0(r2)
   14dd0:	e0bffc15 	stw	r2,-16(fp)
   14dd4:	00000106 	br	14ddc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   14dd8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14ddc:	e0bffc17 	ldw	r2,-16(fp)
   14de0:	10800104 	addi	r2,r2,4
   14de4:	10800037 	ldwio	r2,0(r2)
   14de8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14dec:	e0bffd17 	ldw	r2,-12(fp)
   14df0:	1080c00c 	andi	r2,r2,768
   14df4:	10006a26 	beq	r2,zero,14fa0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14df8:	e0bffd17 	ldw	r2,-12(fp)
   14dfc:	1080400c 	andi	r2,r2,256
   14e00:	10003326 	beq	r2,zero,14ed0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14e04:	00800074 	movhi	r2,1
   14e08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14e0c:	e0bffb17 	ldw	r2,-20(fp)
   14e10:	10800a17 	ldw	r2,40(r2)
   14e14:	10800044 	addi	r2,r2,1
   14e18:	1081ffcc 	andi	r2,r2,2047
   14e1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14e20:	e0bffb17 	ldw	r2,-20(fp)
   14e24:	10c00b17 	ldw	r3,44(r2)
   14e28:	e0bffe17 	ldw	r2,-8(fp)
   14e2c:	18801426 	beq	r3,r2,14e80 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14e30:	e0bffc17 	ldw	r2,-16(fp)
   14e34:	10800037 	ldwio	r2,0(r2)
   14e38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14e3c:	e0bff917 	ldw	r2,-28(fp)
   14e40:	10a0000c 	andi	r2,r2,32768
   14e44:	10001026 	beq	r2,zero,14e88 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14e48:	e0bffb17 	ldw	r2,-20(fp)
   14e4c:	10800a17 	ldw	r2,40(r2)
   14e50:	e0fff917 	ldw	r3,-28(fp)
   14e54:	e13ffb17 	ldw	r4,-20(fp)
   14e58:	2085883a 	add	r2,r4,r2
   14e5c:	10800e04 	addi	r2,r2,56
   14e60:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14e64:	e0bffb17 	ldw	r2,-20(fp)
   14e68:	10800a17 	ldw	r2,40(r2)
   14e6c:	10800044 	addi	r2,r2,1
   14e70:	10c1ffcc 	andi	r3,r2,2047
   14e74:	e0bffb17 	ldw	r2,-20(fp)
   14e78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14e7c:	003fe306 	br	14e0c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14e80:	0001883a 	nop
   14e84:	00000106 	br	14e8c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14e88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14e8c:	e0bff917 	ldw	r2,-28(fp)
   14e90:	10bfffec 	andhi	r2,r2,65535
   14e94:	10000e26 	beq	r2,zero,14ed0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14e98:	e0bffb17 	ldw	r2,-20(fp)
   14e9c:	10c00817 	ldw	r3,32(r2)
   14ea0:	00bfff84 	movi	r2,-2
   14ea4:	1886703a 	and	r3,r3,r2
   14ea8:	e0bffb17 	ldw	r2,-20(fp)
   14eac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14eb0:	e0bffc17 	ldw	r2,-16(fp)
   14eb4:	10800104 	addi	r2,r2,4
   14eb8:	e0fffb17 	ldw	r3,-20(fp)
   14ebc:	18c00817 	ldw	r3,32(r3)
   14ec0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14ec4:	e0bffc17 	ldw	r2,-16(fp)
   14ec8:	10800104 	addi	r2,r2,4
   14ecc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14ed0:	e0bffd17 	ldw	r2,-12(fp)
   14ed4:	1080800c 	andi	r2,r2,512
   14ed8:	103fbf26 	beq	r2,zero,14dd8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14edc:	e0bffd17 	ldw	r2,-12(fp)
   14ee0:	1004d43a 	srli	r2,r2,16
   14ee4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14ee8:	00001406 	br	14f3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14eec:	e0bffc17 	ldw	r2,-16(fp)
   14ef0:	e0fffb17 	ldw	r3,-20(fp)
   14ef4:	18c00d17 	ldw	r3,52(r3)
   14ef8:	e13ffb17 	ldw	r4,-20(fp)
   14efc:	20c7883a 	add	r3,r4,r3
   14f00:	18c20e04 	addi	r3,r3,2104
   14f04:	18c00003 	ldbu	r3,0(r3)
   14f08:	18c03fcc 	andi	r3,r3,255
   14f0c:	18c0201c 	xori	r3,r3,128
   14f10:	18ffe004 	addi	r3,r3,-128
   14f14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14f18:	e0bffb17 	ldw	r2,-20(fp)
   14f1c:	10800d17 	ldw	r2,52(r2)
   14f20:	10800044 	addi	r2,r2,1
   14f24:	10c1ffcc 	andi	r3,r2,2047
   14f28:	e0bffb17 	ldw	r2,-20(fp)
   14f2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14f30:	e0bffa17 	ldw	r2,-24(fp)
   14f34:	10bfffc4 	addi	r2,r2,-1
   14f38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14f3c:	e0bffa17 	ldw	r2,-24(fp)
   14f40:	10000526 	beq	r2,zero,14f58 <altera_avalon_jtag_uart_irq+0x1a8>
   14f44:	e0bffb17 	ldw	r2,-20(fp)
   14f48:	10c00d17 	ldw	r3,52(r2)
   14f4c:	e0bffb17 	ldw	r2,-20(fp)
   14f50:	10800c17 	ldw	r2,48(r2)
   14f54:	18bfe51e 	bne	r3,r2,14eec <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14f58:	e0bffa17 	ldw	r2,-24(fp)
   14f5c:	103f9e26 	beq	r2,zero,14dd8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14f60:	e0bffb17 	ldw	r2,-20(fp)
   14f64:	10c00817 	ldw	r3,32(r2)
   14f68:	00bfff44 	movi	r2,-3
   14f6c:	1886703a 	and	r3,r3,r2
   14f70:	e0bffb17 	ldw	r2,-20(fp)
   14f74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14f78:	e0bffb17 	ldw	r2,-20(fp)
   14f7c:	10800017 	ldw	r2,0(r2)
   14f80:	10800104 	addi	r2,r2,4
   14f84:	e0fffb17 	ldw	r3,-20(fp)
   14f88:	18c00817 	ldw	r3,32(r3)
   14f8c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14f90:	e0bffc17 	ldw	r2,-16(fp)
   14f94:	10800104 	addi	r2,r2,4
   14f98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14f9c:	003f8e06 	br	14dd8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14fa0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14fa4:	e037883a 	mov	sp,fp
   14fa8:	df000017 	ldw	fp,0(sp)
   14fac:	dec00104 	addi	sp,sp,4
   14fb0:	f800283a 	ret

00014fb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14fb4:	defffc04 	addi	sp,sp,-16
   14fb8:	df000315 	stw	fp,12(sp)
   14fbc:	df000304 	addi	fp,sp,12
   14fc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14fc4:	e0bfff17 	ldw	r2,-4(fp)
   14fc8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14fcc:	e0bffd17 	ldw	r2,-12(fp)
   14fd0:	10800017 	ldw	r2,0(r2)
   14fd4:	10800104 	addi	r2,r2,4
   14fd8:	10800037 	ldwio	r2,0(r2)
   14fdc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14fe0:	e0bffe17 	ldw	r2,-8(fp)
   14fe4:	1081000c 	andi	r2,r2,1024
   14fe8:	10000a26 	beq	r2,zero,15014 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	10800017 	ldw	r2,0(r2)
   14ff4:	10800104 	addi	r2,r2,4
   14ff8:	e0fffd17 	ldw	r3,-12(fp)
   14ffc:	18c00817 	ldw	r3,32(r3)
   15000:	18c10014 	ori	r3,r3,1024
   15004:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   15008:	e0bffd17 	ldw	r2,-12(fp)
   1500c:	10000915 	stw	zero,36(r2)
   15010:	00000a06 	br	1503c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15014:	e0bffd17 	ldw	r2,-12(fp)
   15018:	10800917 	ldw	r2,36(r2)
   1501c:	00e00034 	movhi	r3,32768
   15020:	18ffff04 	addi	r3,r3,-4
   15024:	18800536 	bltu	r3,r2,1503c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   15028:	e0bffd17 	ldw	r2,-12(fp)
   1502c:	10800917 	ldw	r2,36(r2)
   15030:	10c00044 	addi	r3,r2,1
   15034:	e0bffd17 	ldw	r2,-12(fp)
   15038:	10c00915 	stw	r3,36(r2)
   1503c:	008000b4 	movhi	r2,2
   15040:	10a7c704 	addi	r2,r2,-24804
   15044:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15048:	e037883a 	mov	sp,fp
   1504c:	df000017 	ldw	fp,0(sp)
   15050:	dec00104 	addi	sp,sp,4
   15054:	f800283a 	ret

00015058 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15058:	defffd04 	addi	sp,sp,-12
   1505c:	df000215 	stw	fp,8(sp)
   15060:	df000204 	addi	fp,sp,8
   15064:	e13ffe15 	stw	r4,-8(fp)
   15068:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1506c:	00000506 	br	15084 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15070:	e0bfff17 	ldw	r2,-4(fp)
   15074:	1090000c 	andi	r2,r2,16384
   15078:	10000226 	beq	r2,zero,15084 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1507c:	00bffd44 	movi	r2,-11
   15080:	00000b06 	br	150b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15084:	e0bffe17 	ldw	r2,-8(fp)
   15088:	10c00d17 	ldw	r3,52(r2)
   1508c:	e0bffe17 	ldw	r2,-8(fp)
   15090:	10800c17 	ldw	r2,48(r2)
   15094:	18800526 	beq	r3,r2,150ac <altera_avalon_jtag_uart_close+0x54>
   15098:	e0bffe17 	ldw	r2,-8(fp)
   1509c:	10c00917 	ldw	r3,36(r2)
   150a0:	e0bffe17 	ldw	r2,-8(fp)
   150a4:	10800117 	ldw	r2,4(r2)
   150a8:	18bff136 	bltu	r3,r2,15070 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   150ac:	0005883a 	mov	r2,zero
}
   150b0:	e037883a 	mov	sp,fp
   150b4:	df000017 	ldw	fp,0(sp)
   150b8:	dec00104 	addi	sp,sp,4
   150bc:	f800283a 	ret

000150c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   150c0:	defffa04 	addi	sp,sp,-24
   150c4:	df000515 	stw	fp,20(sp)
   150c8:	df000504 	addi	fp,sp,20
   150cc:	e13ffd15 	stw	r4,-12(fp)
   150d0:	e17ffe15 	stw	r5,-8(fp)
   150d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   150d8:	00bff9c4 	movi	r2,-25
   150dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	10da8060 	cmpeqi	r3,r2,27137
   150e8:	1800031e 	bne	r3,zero,150f8 <altera_avalon_jtag_uart_ioctl+0x38>
   150ec:	109a80a0 	cmpeqi	r2,r2,27138
   150f0:	1000181e 	bne	r2,zero,15154 <altera_avalon_jtag_uart_ioctl+0x94>
   150f4:	00002606 	br	15190 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   150f8:	e0bffd17 	ldw	r2,-12(fp)
   150fc:	10c00117 	ldw	r3,4(r2)
   15100:	00a00034 	movhi	r2,32768
   15104:	10bfffc4 	addi	r2,r2,-1
   15108:	18802226 	beq	r3,r2,15194 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1510c:	e0bfff17 	ldw	r2,-4(fp)
   15110:	10800017 	ldw	r2,0(r2)
   15114:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15118:	e0bffc17 	ldw	r2,-16(fp)
   1511c:	10800090 	cmplti	r2,r2,2
   15120:	1000061e 	bne	r2,zero,1513c <altera_avalon_jtag_uart_ioctl+0x7c>
   15124:	e0fffc17 	ldw	r3,-16(fp)
   15128:	00a00034 	movhi	r2,32768
   1512c:	10bfffc4 	addi	r2,r2,-1
   15130:	18800226 	beq	r3,r2,1513c <altera_avalon_jtag_uart_ioctl+0x7c>
   15134:	e0bffc17 	ldw	r2,-16(fp)
   15138:	00000206 	br	15144 <altera_avalon_jtag_uart_ioctl+0x84>
   1513c:	00a00034 	movhi	r2,32768
   15140:	10bfff84 	addi	r2,r2,-2
   15144:	e0fffd17 	ldw	r3,-12(fp)
   15148:	18800115 	stw	r2,4(r3)
      rc = 0;
   1514c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15150:	00001006 	br	15194 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	10c00117 	ldw	r3,4(r2)
   1515c:	00a00034 	movhi	r2,32768
   15160:	10bfffc4 	addi	r2,r2,-1
   15164:	18800d26 	beq	r3,r2,1519c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15168:	e0bffd17 	ldw	r2,-12(fp)
   1516c:	10c00917 	ldw	r3,36(r2)
   15170:	e0bffd17 	ldw	r2,-12(fp)
   15174:	10800117 	ldw	r2,4(r2)
   15178:	1885803a 	cmpltu	r2,r3,r2
   1517c:	10c03fcc 	andi	r3,r2,255
   15180:	e0bfff17 	ldw	r2,-4(fp)
   15184:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15188:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1518c:	00000306 	br	1519c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   15190:	00000306 	br	151a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15194:	0001883a 	nop
   15198:	00000106 	br	151a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1519c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   151a0:	e0bffb17 	ldw	r2,-20(fp)
}
   151a4:	e037883a 	mov	sp,fp
   151a8:	df000017 	ldw	fp,0(sp)
   151ac:	dec00104 	addi	sp,sp,4
   151b0:	f800283a 	ret

000151b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   151b4:	defff304 	addi	sp,sp,-52
   151b8:	dfc00c15 	stw	ra,48(sp)
   151bc:	df000b15 	stw	fp,44(sp)
   151c0:	df000b04 	addi	fp,sp,44
   151c4:	e13ffc15 	stw	r4,-16(fp)
   151c8:	e17ffd15 	stw	r5,-12(fp)
   151cc:	e1bffe15 	stw	r6,-8(fp)
   151d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   151d4:	e0bffd17 	ldw	r2,-12(fp)
   151d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   151dc:	00004706 	br	152fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   151e0:	e0bffc17 	ldw	r2,-16(fp)
   151e4:	10800a17 	ldw	r2,40(r2)
   151e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   151ec:	e0bffc17 	ldw	r2,-16(fp)
   151f0:	10800b17 	ldw	r2,44(r2)
   151f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   151f8:	e0fff717 	ldw	r3,-36(fp)
   151fc:	e0bff817 	ldw	r2,-32(fp)
   15200:	18800536 	bltu	r3,r2,15218 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15204:	e0fff717 	ldw	r3,-36(fp)
   15208:	e0bff817 	ldw	r2,-32(fp)
   1520c:	1885c83a 	sub	r2,r3,r2
   15210:	e0bff615 	stw	r2,-40(fp)
   15214:	00000406 	br	15228 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15218:	00c20004 	movi	r3,2048
   1521c:	e0bff817 	ldw	r2,-32(fp)
   15220:	1885c83a 	sub	r2,r3,r2
   15224:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15228:	e0bff617 	ldw	r2,-40(fp)
   1522c:	10001e26 	beq	r2,zero,152a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15230:	e0fffe17 	ldw	r3,-8(fp)
   15234:	e0bff617 	ldw	r2,-40(fp)
   15238:	1880022e 	bgeu	r3,r2,15244 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1523c:	e0bffe17 	ldw	r2,-8(fp)
   15240:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15244:	e0bff817 	ldw	r2,-32(fp)
   15248:	10800e04 	addi	r2,r2,56
   1524c:	e0fffc17 	ldw	r3,-16(fp)
   15250:	1885883a 	add	r2,r3,r2
   15254:	e13ff517 	ldw	r4,-44(fp)
   15258:	100b883a 	mov	r5,r2
   1525c:	e1bff617 	ldw	r6,-40(fp)
   15260:	00123e80 	call	123e8 <memcpy>
      ptr   += n;
   15264:	e0fff517 	ldw	r3,-44(fp)
   15268:	e0bff617 	ldw	r2,-40(fp)
   1526c:	1885883a 	add	r2,r3,r2
   15270:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15274:	e0fffe17 	ldw	r3,-8(fp)
   15278:	e0bff617 	ldw	r2,-40(fp)
   1527c:	1885c83a 	sub	r2,r3,r2
   15280:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15284:	e0fff817 	ldw	r3,-32(fp)
   15288:	e0bff617 	ldw	r2,-40(fp)
   1528c:	1885883a 	add	r2,r3,r2
   15290:	10c1ffcc 	andi	r3,r2,2047
   15294:	e0bffc17 	ldw	r2,-16(fp)
   15298:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1529c:	e0bffe17 	ldw	r2,-8(fp)
   152a0:	00bfcf16 	blt	zero,r2,151e0 <altera_avalon_jtag_uart_read+0x2c>
   152a4:	00000106 	br	152ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   152a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   152ac:	e0fff517 	ldw	r3,-44(fp)
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	1880141e 	bne	r3,r2,15308 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   152b8:	e0bfff17 	ldw	r2,-4(fp)
   152bc:	1090000c 	andi	r2,r2,16384
   152c0:	1000131e 	bne	r2,zero,15310 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   152c4:	0001883a 	nop
   152c8:	e0bffc17 	ldw	r2,-16(fp)
   152cc:	10c00a17 	ldw	r3,40(r2)
   152d0:	e0bff717 	ldw	r2,-36(fp)
   152d4:	1880051e 	bne	r3,r2,152ec <altera_avalon_jtag_uart_read+0x138>
   152d8:	e0bffc17 	ldw	r2,-16(fp)
   152dc:	10c00917 	ldw	r3,36(r2)
   152e0:	e0bffc17 	ldw	r2,-16(fp)
   152e4:	10800117 	ldw	r2,4(r2)
   152e8:	18bff736 	bltu	r3,r2,152c8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   152ec:	e0bffc17 	ldw	r2,-16(fp)
   152f0:	10c00a17 	ldw	r3,40(r2)
   152f4:	e0bff717 	ldw	r2,-36(fp)
   152f8:	18800726 	beq	r3,r2,15318 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   152fc:	e0bffe17 	ldw	r2,-8(fp)
   15300:	00bfb716 	blt	zero,r2,151e0 <altera_avalon_jtag_uart_read+0x2c>
   15304:	00000506 	br	1531c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15308:	0001883a 	nop
   1530c:	00000306 	br	1531c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15310:	0001883a 	nop
   15314:	00000106 	br	1531c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15318:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1531c:	e0fff517 	ldw	r3,-44(fp)
   15320:	e0bffd17 	ldw	r2,-12(fp)
   15324:	18801726 	beq	r3,r2,15384 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15328:	0005303a 	rdctl	r2,status
   1532c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15330:	e0fffa17 	ldw	r3,-24(fp)
   15334:	00bfff84 	movi	r2,-2
   15338:	1884703a 	and	r2,r3,r2
   1533c:	1001703a 	wrctl	status,r2
  
  return context;
   15340:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15344:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15348:	e0bffc17 	ldw	r2,-16(fp)
   1534c:	10800817 	ldw	r2,32(r2)
   15350:	10c00054 	ori	r3,r2,1
   15354:	e0bffc17 	ldw	r2,-16(fp)
   15358:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	10800017 	ldw	r2,0(r2)
   15364:	10800104 	addi	r2,r2,4
   15368:	e0fffc17 	ldw	r3,-16(fp)
   1536c:	18c00817 	ldw	r3,32(r3)
   15370:	10c00035 	stwio	r3,0(r2)
   15374:	e0bff917 	ldw	r2,-28(fp)
   15378:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1537c:	e0bffb17 	ldw	r2,-20(fp)
   15380:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15384:	e0fff517 	ldw	r3,-44(fp)
   15388:	e0bffd17 	ldw	r2,-12(fp)
   1538c:	18800426 	beq	r3,r2,153a0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   15390:	e0fff517 	ldw	r3,-44(fp)
   15394:	e0bffd17 	ldw	r2,-12(fp)
   15398:	1885c83a 	sub	r2,r3,r2
   1539c:	00000606 	br	153b8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   153a0:	e0bfff17 	ldw	r2,-4(fp)
   153a4:	1090000c 	andi	r2,r2,16384
   153a8:	10000226 	beq	r2,zero,153b4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   153ac:	00bffd44 	movi	r2,-11
   153b0:	00000106 	br	153b8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   153b4:	00bffec4 	movi	r2,-5
}
   153b8:	e037883a 	mov	sp,fp
   153bc:	dfc00117 	ldw	ra,4(sp)
   153c0:	df000017 	ldw	fp,0(sp)
   153c4:	dec00204 	addi	sp,sp,8
   153c8:	f800283a 	ret

000153cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   153cc:	defff304 	addi	sp,sp,-52
   153d0:	dfc00c15 	stw	ra,48(sp)
   153d4:	df000b15 	stw	fp,44(sp)
   153d8:	df000b04 	addi	fp,sp,44
   153dc:	e13ffc15 	stw	r4,-16(fp)
   153e0:	e17ffd15 	stw	r5,-12(fp)
   153e4:	e1bffe15 	stw	r6,-8(fp)
   153e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   153ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   153f0:	e0bffd17 	ldw	r2,-12(fp)
   153f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   153f8:	00003706 	br	154d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   153fc:	e0bffc17 	ldw	r2,-16(fp)
   15400:	10800c17 	ldw	r2,48(r2)
   15404:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   15408:	e0bffc17 	ldw	r2,-16(fp)
   1540c:	10800d17 	ldw	r2,52(r2)
   15410:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   15414:	e0fff817 	ldw	r3,-32(fp)
   15418:	e0bff517 	ldw	r2,-44(fp)
   1541c:	1880062e 	bgeu	r3,r2,15438 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15420:	e0fff517 	ldw	r3,-44(fp)
   15424:	e0bff817 	ldw	r2,-32(fp)
   15428:	1885c83a 	sub	r2,r3,r2
   1542c:	10bfffc4 	addi	r2,r2,-1
   15430:	e0bff615 	stw	r2,-40(fp)
   15434:	00000b06 	br	15464 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15438:	e0bff517 	ldw	r2,-44(fp)
   1543c:	10000526 	beq	r2,zero,15454 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15440:	00c20004 	movi	r3,2048
   15444:	e0bff817 	ldw	r2,-32(fp)
   15448:	1885c83a 	sub	r2,r3,r2
   1544c:	e0bff615 	stw	r2,-40(fp)
   15450:	00000406 	br	15464 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15454:	00c1ffc4 	movi	r3,2047
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	1885c83a 	sub	r2,r3,r2
   15460:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15464:	e0bff617 	ldw	r2,-40(fp)
   15468:	10001e26 	beq	r2,zero,154e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1546c:	e0fffe17 	ldw	r3,-8(fp)
   15470:	e0bff617 	ldw	r2,-40(fp)
   15474:	1880022e 	bgeu	r3,r2,15480 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15478:	e0bffe17 	ldw	r2,-8(fp)
   1547c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15480:	e0bff817 	ldw	r2,-32(fp)
   15484:	10820e04 	addi	r2,r2,2104
   15488:	e0fffc17 	ldw	r3,-16(fp)
   1548c:	1885883a 	add	r2,r3,r2
   15490:	1009883a 	mov	r4,r2
   15494:	e17ffd17 	ldw	r5,-12(fp)
   15498:	e1bff617 	ldw	r6,-40(fp)
   1549c:	00123e80 	call	123e8 <memcpy>
      ptr   += n;
   154a0:	e0fffd17 	ldw	r3,-12(fp)
   154a4:	e0bff617 	ldw	r2,-40(fp)
   154a8:	1885883a 	add	r2,r3,r2
   154ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   154b0:	e0fffe17 	ldw	r3,-8(fp)
   154b4:	e0bff617 	ldw	r2,-40(fp)
   154b8:	1885c83a 	sub	r2,r3,r2
   154bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   154c0:	e0fff817 	ldw	r3,-32(fp)
   154c4:	e0bff617 	ldw	r2,-40(fp)
   154c8:	1885883a 	add	r2,r3,r2
   154cc:	10c1ffcc 	andi	r3,r2,2047
   154d0:	e0bffc17 	ldw	r2,-16(fp)
   154d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   154d8:	e0bffe17 	ldw	r2,-8(fp)
   154dc:	00bfc716 	blt	zero,r2,153fc <altera_avalon_jtag_uart_write+0x30>
   154e0:	00000106 	br	154e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   154e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154e8:	0005303a 	rdctl	r2,status
   154ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154f0:	e0fffa17 	ldw	r3,-24(fp)
   154f4:	00bfff84 	movi	r2,-2
   154f8:	1884703a 	and	r2,r3,r2
   154fc:	1001703a 	wrctl	status,r2
  
  return context;
   15500:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15504:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15508:	e0bffc17 	ldw	r2,-16(fp)
   1550c:	10800817 	ldw	r2,32(r2)
   15510:	10c00094 	ori	r3,r2,2
   15514:	e0bffc17 	ldw	r2,-16(fp)
   15518:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1551c:	e0bffc17 	ldw	r2,-16(fp)
   15520:	10800017 	ldw	r2,0(r2)
   15524:	10800104 	addi	r2,r2,4
   15528:	e0fffc17 	ldw	r3,-16(fp)
   1552c:	18c00817 	ldw	r3,32(r3)
   15530:	10c00035 	stwio	r3,0(r2)
   15534:	e0bff917 	ldw	r2,-28(fp)
   15538:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1553c:	e0bffb17 	ldw	r2,-20(fp)
   15540:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15544:	e0bffe17 	ldw	r2,-8(fp)
   15548:	0080110e 	bge	zero,r2,15590 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1554c:	e0bfff17 	ldw	r2,-4(fp)
   15550:	1090000c 	andi	r2,r2,16384
   15554:	1000111e 	bne	r2,zero,1559c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15558:	0001883a 	nop
   1555c:	e0bffc17 	ldw	r2,-16(fp)
   15560:	10c00d17 	ldw	r3,52(r2)
   15564:	e0bff517 	ldw	r2,-44(fp)
   15568:	1880051e 	bne	r3,r2,15580 <altera_avalon_jtag_uart_write+0x1b4>
   1556c:	e0bffc17 	ldw	r2,-16(fp)
   15570:	10c00917 	ldw	r3,36(r2)
   15574:	e0bffc17 	ldw	r2,-16(fp)
   15578:	10800117 	ldw	r2,4(r2)
   1557c:	18bff736 	bltu	r3,r2,1555c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   15580:	e0bffc17 	ldw	r2,-16(fp)
   15584:	10c00d17 	ldw	r3,52(r2)
   15588:	e0bff517 	ldw	r2,-44(fp)
   1558c:	18800526 	beq	r3,r2,155a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15590:	e0bffe17 	ldw	r2,-8(fp)
   15594:	00bfd016 	blt	zero,r2,154d8 <altera_avalon_jtag_uart_write+0x10c>
   15598:	00000306 	br	155a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1559c:	0001883a 	nop
   155a0:	00000106 	br	155a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   155a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   155a8:	e0fffd17 	ldw	r3,-12(fp)
   155ac:	e0bff717 	ldw	r2,-36(fp)
   155b0:	18800426 	beq	r3,r2,155c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   155b4:	e0fffd17 	ldw	r3,-12(fp)
   155b8:	e0bff717 	ldw	r2,-36(fp)
   155bc:	1885c83a 	sub	r2,r3,r2
   155c0:	00000606 	br	155dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	1090000c 	andi	r2,r2,16384
   155cc:	10000226 	beq	r2,zero,155d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   155d0:	00bffd44 	movi	r2,-11
   155d4:	00000106 	br	155dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   155d8:	00bffec4 	movi	r2,-5
}
   155dc:	e037883a 	mov	sp,fp
   155e0:	dfc00117 	ldw	ra,4(sp)
   155e4:	df000017 	ldw	fp,0(sp)
   155e8:	dec00204 	addi	sp,sp,8
   155ec:	f800283a 	ret

000155f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   155f0:	defffa04 	addi	sp,sp,-24
   155f4:	dfc00515 	stw	ra,20(sp)
   155f8:	df000415 	stw	fp,16(sp)
   155fc:	df000404 	addi	fp,sp,16
   15600:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15604:	0007883a 	mov	r3,zero
   15608:	e0bfff17 	ldw	r2,-4(fp)
   1560c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15610:	e0bfff17 	ldw	r2,-4(fp)
   15614:	10800104 	addi	r2,r2,4
   15618:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1561c:	0005303a 	rdctl	r2,status
   15620:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15624:	e0fffd17 	ldw	r3,-12(fp)
   15628:	00bfff84 	movi	r2,-2
   1562c:	1884703a 	and	r2,r3,r2
   15630:	1001703a 	wrctl	status,r2
  
  return context;
   15634:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15638:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1563c:	001615c0 	call	1615c <alt_tick>
   15640:	e0bffc17 	ldw	r2,-16(fp)
   15644:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15648:	e0bffe17 	ldw	r2,-8(fp)
   1564c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15650:	e037883a 	mov	sp,fp
   15654:	dfc00117 	ldw	ra,4(sp)
   15658:	df000017 	ldw	fp,0(sp)
   1565c:	dec00204 	addi	sp,sp,8
   15660:	f800283a 	ret

00015664 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15664:	defff804 	addi	sp,sp,-32
   15668:	dfc00715 	stw	ra,28(sp)
   1566c:	df000615 	stw	fp,24(sp)
   15670:	df000604 	addi	fp,sp,24
   15674:	e13ffc15 	stw	r4,-16(fp)
   15678:	e17ffd15 	stw	r5,-12(fp)
   1567c:	e1bffe15 	stw	r6,-8(fp)
   15680:	e1ffff15 	stw	r7,-4(fp)
   15684:	e0bfff17 	ldw	r2,-4(fp)
   15688:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1568c:	008000b4 	movhi	r2,2
   15690:	10a7c704 	addi	r2,r2,-24804
   15694:	10800017 	ldw	r2,0(r2)
   15698:	1000041e 	bne	r2,zero,156ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1569c:	008000b4 	movhi	r2,2
   156a0:	10a7c704 	addi	r2,r2,-24804
   156a4:	e0fffb17 	ldw	r3,-20(fp)
   156a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   156ac:	e0bffc17 	ldw	r2,-16(fp)
   156b0:	10800104 	addi	r2,r2,4
   156b4:	00c001c4 	movi	r3,7
   156b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   156bc:	d8000015 	stw	zero,0(sp)
   156c0:	e13ffd17 	ldw	r4,-12(fp)
   156c4:	e17ffe17 	ldw	r5,-8(fp)
   156c8:	01800074 	movhi	r6,1
   156cc:	31957c04 	addi	r6,r6,22000
   156d0:	e1fffc17 	ldw	r7,-16(fp)
   156d4:	0015a0c0 	call	15a0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   156d8:	e037883a 	mov	sp,fp
   156dc:	dfc00117 	ldw	ra,4(sp)
   156e0:	df000017 	ldw	fp,0(sp)
   156e4:	dec00204 	addi	sp,sp,8
   156e8:	f800283a 	ret

000156ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   156ec:	defff504 	addi	sp,sp,-44
   156f0:	df000a15 	stw	fp,40(sp)
   156f4:	df000a04 	addi	fp,sp,40
   156f8:	e13ffc15 	stw	r4,-16(fp)
   156fc:	e17ffd15 	stw	r5,-12(fp)
   15700:	e1bffe15 	stw	r6,-8(fp)
   15704:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15708:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1570c:	008000b4 	movhi	r2,2
   15710:	10a7c704 	addi	r2,r2,-24804
   15714:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   15718:	10003f26 	beq	r2,zero,15818 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1571c:	e0bffc17 	ldw	r2,-16(fp)
   15720:	10003b26 	beq	r2,zero,15810 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   15724:	e0bffc17 	ldw	r2,-16(fp)
   15728:	e0fffe17 	ldw	r3,-8(fp)
   1572c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15730:	e0bffc17 	ldw	r2,-16(fp)
   15734:	e0ffff17 	ldw	r3,-4(fp)
   15738:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1573c:	0005303a 	rdctl	r2,status
   15740:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15744:	e0fff817 	ldw	r3,-32(fp)
   15748:	00bfff84 	movi	r2,-2
   1574c:	1884703a 	and	r2,r3,r2
   15750:	1001703a 	wrctl	status,r2
  
  return context;
   15754:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   15758:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1575c:	008000b4 	movhi	r2,2
   15760:	10a7c804 	addi	r2,r2,-24800
   15764:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   15768:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1576c:	e0fffd17 	ldw	r3,-12(fp)
   15770:	e0bff617 	ldw	r2,-40(fp)
   15774:	1885883a 	add	r2,r3,r2
   15778:	10c00044 	addi	r3,r2,1
   1577c:	e0bffc17 	ldw	r2,-16(fp)
   15780:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15784:	e0bffc17 	ldw	r2,-16(fp)
   15788:	10c00217 	ldw	r3,8(r2)
   1578c:	e0bff617 	ldw	r2,-40(fp)
   15790:	1880042e 	bgeu	r3,r2,157a4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   15794:	e0bffc17 	ldw	r2,-16(fp)
   15798:	00c00044 	movi	r3,1
   1579c:	10c00405 	stb	r3,16(r2)
   157a0:	00000206 	br	157ac <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   157a4:	e0bffc17 	ldw	r2,-16(fp)
   157a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   157ac:	e0bffc17 	ldw	r2,-16(fp)
   157b0:	00c000b4 	movhi	r3,2
   157b4:	18e10504 	addi	r3,r3,-31724
   157b8:	e0fff915 	stw	r3,-28(fp)
   157bc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   157c0:	e0bffa17 	ldw	r2,-24(fp)
   157c4:	e0fff917 	ldw	r3,-28(fp)
   157c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   157cc:	e0bff917 	ldw	r2,-28(fp)
   157d0:	10c00017 	ldw	r3,0(r2)
   157d4:	e0bffa17 	ldw	r2,-24(fp)
   157d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   157dc:	e0bff917 	ldw	r2,-28(fp)
   157e0:	10800017 	ldw	r2,0(r2)
   157e4:	e0fffa17 	ldw	r3,-24(fp)
   157e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   157ec:	e0bff917 	ldw	r2,-28(fp)
   157f0:	e0fffa17 	ldw	r3,-24(fp)
   157f4:	10c00015 	stw	r3,0(r2)
   157f8:	e0bff717 	ldw	r2,-36(fp)
   157fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15800:	e0bffb17 	ldw	r2,-20(fp)
   15804:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15808:	0005883a 	mov	r2,zero
   1580c:	00000306 	br	1581c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   15810:	00bffa84 	movi	r2,-22
   15814:	00000106 	br	1581c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   15818:	00bfde84 	movi	r2,-134
  }
}
   1581c:	e037883a 	mov	sp,fp
   15820:	df000017 	ldw	fp,0(sp)
   15824:	dec00104 	addi	sp,sp,4
   15828:	f800283a 	ret

0001582c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1582c:	deffff04 	addi	sp,sp,-4
   15830:	df000015 	stw	fp,0(sp)
   15834:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15838:	e037883a 	mov	sp,fp
   1583c:	df000017 	ldw	fp,0(sp)
   15840:	dec00104 	addi	sp,sp,4
   15844:	f800283a 	ret

00015848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15848:	defffe04 	addi	sp,sp,-8
   1584c:	dfc00115 	stw	ra,4(sp)
   15850:	df000015 	stw	fp,0(sp)
   15854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15858:	008000b4 	movhi	r2,2
   1585c:	10a10204 	addi	r2,r2,-31736
   15860:	10800017 	ldw	r2,0(r2)
   15864:	10000526 	beq	r2,zero,1587c <alt_get_errno+0x34>
   15868:	008000b4 	movhi	r2,2
   1586c:	10a10204 	addi	r2,r2,-31736
   15870:	10800017 	ldw	r2,0(r2)
   15874:	103ee83a 	callr	r2
   15878:	00000206 	br	15884 <alt_get_errno+0x3c>
   1587c:	008000b4 	movhi	r2,2
   15880:	10a7c204 	addi	r2,r2,-24824
}
   15884:	e037883a 	mov	sp,fp
   15888:	dfc00117 	ldw	ra,4(sp)
   1588c:	df000017 	ldw	fp,0(sp)
   15890:	dec00204 	addi	sp,sp,8
   15894:	f800283a 	ret

00015898 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15898:	defffa04 	addi	sp,sp,-24
   1589c:	dfc00515 	stw	ra,20(sp)
   158a0:	df000415 	stw	fp,16(sp)
   158a4:	df000404 	addi	fp,sp,16
   158a8:	e13ffe15 	stw	r4,-8(fp)
   158ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   158b0:	e0bffe17 	ldw	r2,-8(fp)
   158b4:	10000326 	beq	r2,zero,158c4 <alt_dev_llist_insert+0x2c>
   158b8:	e0bffe17 	ldw	r2,-8(fp)
   158bc:	10800217 	ldw	r2,8(r2)
   158c0:	1000051e 	bne	r2,zero,158d8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   158c4:	00158480 	call	15848 <alt_get_errno>
   158c8:	00c00584 	movi	r3,22
   158cc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   158d0:	00bffa84 	movi	r2,-22
   158d4:	00001306 	br	15924 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   158d8:	e0bffe17 	ldw	r2,-8(fp)
   158dc:	e0ffff17 	ldw	r3,-4(fp)
   158e0:	e0fffc15 	stw	r3,-16(fp)
   158e4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	e0fffc17 	ldw	r3,-16(fp)
   158f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   158f4:	e0bffc17 	ldw	r2,-16(fp)
   158f8:	10c00017 	ldw	r3,0(r2)
   158fc:	e0bffd17 	ldw	r2,-12(fp)
   15900:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15904:	e0bffc17 	ldw	r2,-16(fp)
   15908:	10800017 	ldw	r2,0(r2)
   1590c:	e0fffd17 	ldw	r3,-12(fp)
   15910:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15914:	e0bffc17 	ldw	r2,-16(fp)
   15918:	e0fffd17 	ldw	r3,-12(fp)
   1591c:	10c00015 	stw	r3,0(r2)

  return 0;  
   15920:	0005883a 	mov	r2,zero
}
   15924:	e037883a 	mov	sp,fp
   15928:	dfc00117 	ldw	ra,4(sp)
   1592c:	df000017 	ldw	fp,0(sp)
   15930:	dec00204 	addi	sp,sp,8
   15934:	f800283a 	ret

00015938 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15938:	defffd04 	addi	sp,sp,-12
   1593c:	dfc00215 	stw	ra,8(sp)
   15940:	df000115 	stw	fp,4(sp)
   15944:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15948:	00800074 	movhi	r2,1
   1594c:	109a3204 	addi	r2,r2,26824
   15950:	e0bfff15 	stw	r2,-4(fp)
   15954:	00000606 	br	15970 <_do_ctors+0x38>
        (*ctor) (); 
   15958:	e0bfff17 	ldw	r2,-4(fp)
   1595c:	10800017 	ldw	r2,0(r2)
   15960:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15964:	e0bfff17 	ldw	r2,-4(fp)
   15968:	10bfff04 	addi	r2,r2,-4
   1596c:	e0bfff15 	stw	r2,-4(fp)
   15970:	e0ffff17 	ldw	r3,-4(fp)
   15974:	00800074 	movhi	r2,1
   15978:	109a3304 	addi	r2,r2,26828
   1597c:	18bff62e 	bgeu	r3,r2,15958 <_do_ctors+0x20>
        (*ctor) (); 
}
   15980:	e037883a 	mov	sp,fp
   15984:	dfc00117 	ldw	ra,4(sp)
   15988:	df000017 	ldw	fp,0(sp)
   1598c:	dec00204 	addi	sp,sp,8
   15990:	f800283a 	ret

00015994 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15994:	defffd04 	addi	sp,sp,-12
   15998:	dfc00215 	stw	ra,8(sp)
   1599c:	df000115 	stw	fp,4(sp)
   159a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   159a4:	00800074 	movhi	r2,1
   159a8:	109a3204 	addi	r2,r2,26824
   159ac:	e0bfff15 	stw	r2,-4(fp)
   159b0:	00000606 	br	159cc <_do_dtors+0x38>
        (*dtor) (); 
   159b4:	e0bfff17 	ldw	r2,-4(fp)
   159b8:	10800017 	ldw	r2,0(r2)
   159bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   159c0:	e0bfff17 	ldw	r2,-4(fp)
   159c4:	10bfff04 	addi	r2,r2,-4
   159c8:	e0bfff15 	stw	r2,-4(fp)
   159cc:	e0ffff17 	ldw	r3,-4(fp)
   159d0:	00800074 	movhi	r2,1
   159d4:	109a3304 	addi	r2,r2,26828
   159d8:	18bff62e 	bgeu	r3,r2,159b4 <_do_dtors+0x20>
        (*dtor) (); 
}
   159dc:	e037883a 	mov	sp,fp
   159e0:	dfc00117 	ldw	ra,4(sp)
   159e4:	df000017 	ldw	fp,0(sp)
   159e8:	dec00204 	addi	sp,sp,8
   159ec:	f800283a 	ret

000159f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   159f0:	deffff04 	addi	sp,sp,-4
   159f4:	df000015 	stw	fp,0(sp)
   159f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   159fc:	e037883a 	mov	sp,fp
   15a00:	df000017 	ldw	fp,0(sp)
   15a04:	dec00104 	addi	sp,sp,4
   15a08:	f800283a 	ret

00015a0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15a0c:	defff904 	addi	sp,sp,-28
   15a10:	dfc00615 	stw	ra,24(sp)
   15a14:	df000515 	stw	fp,20(sp)
   15a18:	df000504 	addi	fp,sp,20
   15a1c:	e13ffc15 	stw	r4,-16(fp)
   15a20:	e17ffd15 	stw	r5,-12(fp)
   15a24:	e1bffe15 	stw	r6,-8(fp)
   15a28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15a2c:	e0800217 	ldw	r2,8(fp)
   15a30:	d8800015 	stw	r2,0(sp)
   15a34:	e13ffc17 	ldw	r4,-16(fp)
   15a38:	e17ffd17 	ldw	r5,-12(fp)
   15a3c:	e1bffe17 	ldw	r6,-8(fp)
   15a40:	e1ffff17 	ldw	r7,-4(fp)
   15a44:	0015be40 	call	15be4 <alt_iic_isr_register>
}  
   15a48:	e037883a 	mov	sp,fp
   15a4c:	dfc00117 	ldw	ra,4(sp)
   15a50:	df000017 	ldw	fp,0(sp)
   15a54:	dec00204 	addi	sp,sp,8
   15a58:	f800283a 	ret

00015a5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15a5c:	defff904 	addi	sp,sp,-28
   15a60:	df000615 	stw	fp,24(sp)
   15a64:	df000604 	addi	fp,sp,24
   15a68:	e13ffe15 	stw	r4,-8(fp)
   15a6c:	e17fff15 	stw	r5,-4(fp)
   15a70:	e0bfff17 	ldw	r2,-4(fp)
   15a74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a78:	0005303a 	rdctl	r2,status
   15a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a80:	e0fffb17 	ldw	r3,-20(fp)
   15a84:	00bfff84 	movi	r2,-2
   15a88:	1884703a 	and	r2,r3,r2
   15a8c:	1001703a 	wrctl	status,r2
  
  return context;
   15a90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15a94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15a98:	e0bffa17 	ldw	r2,-24(fp)
   15a9c:	00c00044 	movi	r3,1
   15aa0:	1884983a 	sll	r2,r3,r2
   15aa4:	1007883a 	mov	r3,r2
   15aa8:	008000b4 	movhi	r2,2
   15aac:	10a7c604 	addi	r2,r2,-24808
   15ab0:	10800017 	ldw	r2,0(r2)
   15ab4:	1886b03a 	or	r3,r3,r2
   15ab8:	008000b4 	movhi	r2,2
   15abc:	10a7c604 	addi	r2,r2,-24808
   15ac0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15ac4:	008000b4 	movhi	r2,2
   15ac8:	10a7c604 	addi	r2,r2,-24808
   15acc:	10800017 	ldw	r2,0(r2)
   15ad0:	100170fa 	wrctl	ienable,r2
   15ad4:	e0bffc17 	ldw	r2,-16(fp)
   15ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15adc:	e0bffd17 	ldw	r2,-12(fp)
   15ae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15ae4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   15ae8:	e037883a 	mov	sp,fp
   15aec:	df000017 	ldw	fp,0(sp)
   15af0:	dec00104 	addi	sp,sp,4
   15af4:	f800283a 	ret

00015af8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15af8:	defff904 	addi	sp,sp,-28
   15afc:	df000615 	stw	fp,24(sp)
   15b00:	df000604 	addi	fp,sp,24
   15b04:	e13ffe15 	stw	r4,-8(fp)
   15b08:	e17fff15 	stw	r5,-4(fp)
   15b0c:	e0bfff17 	ldw	r2,-4(fp)
   15b10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b14:	0005303a 	rdctl	r2,status
   15b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b1c:	e0fffb17 	ldw	r3,-20(fp)
   15b20:	00bfff84 	movi	r2,-2
   15b24:	1884703a 	and	r2,r3,r2
   15b28:	1001703a 	wrctl	status,r2
  
  return context;
   15b2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15b30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15b34:	e0bffa17 	ldw	r2,-24(fp)
   15b38:	00c00044 	movi	r3,1
   15b3c:	1884983a 	sll	r2,r3,r2
   15b40:	0084303a 	nor	r2,zero,r2
   15b44:	1007883a 	mov	r3,r2
   15b48:	008000b4 	movhi	r2,2
   15b4c:	10a7c604 	addi	r2,r2,-24808
   15b50:	10800017 	ldw	r2,0(r2)
   15b54:	1886703a 	and	r3,r3,r2
   15b58:	008000b4 	movhi	r2,2
   15b5c:	10a7c604 	addi	r2,r2,-24808
   15b60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15b64:	008000b4 	movhi	r2,2
   15b68:	10a7c604 	addi	r2,r2,-24808
   15b6c:	10800017 	ldw	r2,0(r2)
   15b70:	100170fa 	wrctl	ienable,r2
   15b74:	e0bffc17 	ldw	r2,-16(fp)
   15b78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b7c:	e0bffd17 	ldw	r2,-12(fp)
   15b80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15b84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   15b88:	e037883a 	mov	sp,fp
   15b8c:	df000017 	ldw	fp,0(sp)
   15b90:	dec00104 	addi	sp,sp,4
   15b94:	f800283a 	ret

00015b98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15b98:	defffc04 	addi	sp,sp,-16
   15b9c:	df000315 	stw	fp,12(sp)
   15ba0:	df000304 	addi	fp,sp,12
   15ba4:	e13ffe15 	stw	r4,-8(fp)
   15ba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15bac:	000530fa 	rdctl	r2,ienable
   15bb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15bb4:	e0bfff17 	ldw	r2,-4(fp)
   15bb8:	00c00044 	movi	r3,1
   15bbc:	1884983a 	sll	r2,r3,r2
   15bc0:	1007883a 	mov	r3,r2
   15bc4:	e0bffd17 	ldw	r2,-12(fp)
   15bc8:	1884703a 	and	r2,r3,r2
   15bcc:	1004c03a 	cmpne	r2,r2,zero
   15bd0:	10803fcc 	andi	r2,r2,255
}
   15bd4:	e037883a 	mov	sp,fp
   15bd8:	df000017 	ldw	fp,0(sp)
   15bdc:	dec00104 	addi	sp,sp,4
   15be0:	f800283a 	ret

00015be4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15be4:	defff504 	addi	sp,sp,-44
   15be8:	dfc00a15 	stw	ra,40(sp)
   15bec:	df000915 	stw	fp,36(sp)
   15bf0:	df000904 	addi	fp,sp,36
   15bf4:	e13ffc15 	stw	r4,-16(fp)
   15bf8:	e17ffd15 	stw	r5,-12(fp)
   15bfc:	e1bffe15 	stw	r6,-8(fp)
   15c00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15c04:	00bffa84 	movi	r2,-22
   15c08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15c0c:	e0bffd17 	ldw	r2,-12(fp)
   15c10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15c14:	e0bff817 	ldw	r2,-32(fp)
   15c18:	10800808 	cmpgei	r2,r2,32
   15c1c:	1000271e 	bne	r2,zero,15cbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c20:	0005303a 	rdctl	r2,status
   15c24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c28:	e0fffa17 	ldw	r3,-24(fp)
   15c2c:	00bfff84 	movi	r2,-2
   15c30:	1884703a 	and	r2,r3,r2
   15c34:	1001703a 	wrctl	status,r2
  
  return context;
   15c38:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15c3c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   15c40:	00c000b4 	movhi	r3,2
   15c44:	18e7d304 	addi	r3,r3,-24756
   15c48:	e0bff817 	ldw	r2,-32(fp)
   15c4c:	100490fa 	slli	r2,r2,3
   15c50:	1885883a 	add	r2,r3,r2
   15c54:	e0fffe17 	ldw	r3,-8(fp)
   15c58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15c5c:	00c000b4 	movhi	r3,2
   15c60:	18e7d304 	addi	r3,r3,-24756
   15c64:	e0bff817 	ldw	r2,-32(fp)
   15c68:	100490fa 	slli	r2,r2,3
   15c6c:	1885883a 	add	r2,r3,r2
   15c70:	10800104 	addi	r2,r2,4
   15c74:	e0ffff17 	ldw	r3,-4(fp)
   15c78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   15c7c:	e0bffe17 	ldw	r2,-8(fp)
   15c80:	10000526 	beq	r2,zero,15c98 <alt_iic_isr_register+0xb4>
   15c84:	e0bff817 	ldw	r2,-32(fp)
   15c88:	e13ffc17 	ldw	r4,-16(fp)
   15c8c:	100b883a 	mov	r5,r2
   15c90:	0015a5c0 	call	15a5c <alt_ic_irq_enable>
   15c94:	00000406 	br	15ca8 <alt_iic_isr_register+0xc4>
   15c98:	e0bff817 	ldw	r2,-32(fp)
   15c9c:	e13ffc17 	ldw	r4,-16(fp)
   15ca0:	100b883a 	mov	r5,r2
   15ca4:	0015af80 	call	15af8 <alt_ic_irq_disable>
   15ca8:	e0bff715 	stw	r2,-36(fp)
   15cac:	e0bff917 	ldw	r2,-28(fp)
   15cb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cb4:	e0bffb17 	ldw	r2,-20(fp)
   15cb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15cbc:	e0bff717 	ldw	r2,-36(fp)
}
   15cc0:	e037883a 	mov	sp,fp
   15cc4:	dfc00117 	ldw	ra,4(sp)
   15cc8:	df000017 	ldw	fp,0(sp)
   15ccc:	dec00204 	addi	sp,sp,8
   15cd0:	f800283a 	ret

00015cd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15cd4:	defff804 	addi	sp,sp,-32
   15cd8:	dfc00715 	stw	ra,28(sp)
   15cdc:	df000615 	stw	fp,24(sp)
   15ce0:	dc000515 	stw	r16,20(sp)
   15ce4:	df000504 	addi	fp,sp,20
   15ce8:	e13ffc15 	stw	r4,-16(fp)
   15cec:	e17ffd15 	stw	r5,-12(fp)
   15cf0:	e1bffe15 	stw	r6,-8(fp)
   15cf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   15cf8:	e13ffd17 	ldw	r4,-12(fp)
   15cfc:	e17ffe17 	ldw	r5,-8(fp)
   15d00:	e1bfff17 	ldw	r6,-4(fp)
   15d04:	0015f6c0 	call	15f6c <open>
   15d08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   15d0c:	e0bffb17 	ldw	r2,-20(fp)
   15d10:	10002216 	blt	r2,zero,15d9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15d14:	04000074 	movhi	r16,1
   15d18:	841c7c04 	addi	r16,r16,29168
   15d1c:	e0bffb17 	ldw	r2,-20(fp)
   15d20:	1009883a 	mov	r4,r2
   15d24:	01400304 	movi	r5,12
   15d28:	00110a40 	call	110a4 <__mulsi3>
   15d2c:	8085883a 	add	r2,r16,r2
   15d30:	10c00017 	ldw	r3,0(r2)
   15d34:	e0bffc17 	ldw	r2,-16(fp)
   15d38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15d3c:	04000074 	movhi	r16,1
   15d40:	841c7c04 	addi	r16,r16,29168
   15d44:	e0bffb17 	ldw	r2,-20(fp)
   15d48:	1009883a 	mov	r4,r2
   15d4c:	01400304 	movi	r5,12
   15d50:	00110a40 	call	110a4 <__mulsi3>
   15d54:	8085883a 	add	r2,r16,r2
   15d58:	10800104 	addi	r2,r2,4
   15d5c:	10c00017 	ldw	r3,0(r2)
   15d60:	e0bffc17 	ldw	r2,-16(fp)
   15d64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15d68:	04000074 	movhi	r16,1
   15d6c:	841c7c04 	addi	r16,r16,29168
   15d70:	e0bffb17 	ldw	r2,-20(fp)
   15d74:	1009883a 	mov	r4,r2
   15d78:	01400304 	movi	r5,12
   15d7c:	00110a40 	call	110a4 <__mulsi3>
   15d80:	8085883a 	add	r2,r16,r2
   15d84:	10800204 	addi	r2,r2,8
   15d88:	10c00017 	ldw	r3,0(r2)
   15d8c:	e0bffc17 	ldw	r2,-16(fp)
   15d90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15d94:	e13ffb17 	ldw	r4,-20(fp)
   15d98:	00143580 	call	14358 <alt_release_fd>
  }
} 
   15d9c:	e037883a 	mov	sp,fp
   15da0:	dfc00217 	ldw	ra,8(sp)
   15da4:	df000117 	ldw	fp,4(sp)
   15da8:	dc000017 	ldw	r16,0(sp)
   15dac:	dec00304 	addi	sp,sp,12
   15db0:	f800283a 	ret

00015db4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15db4:	defffb04 	addi	sp,sp,-20
   15db8:	dfc00415 	stw	ra,16(sp)
   15dbc:	df000315 	stw	fp,12(sp)
   15dc0:	df000304 	addi	fp,sp,12
   15dc4:	e13ffd15 	stw	r4,-12(fp)
   15dc8:	e17ffe15 	stw	r5,-8(fp)
   15dcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15dd0:	01000074 	movhi	r4,1
   15dd4:	211c7f04 	addi	r4,r4,29180
   15dd8:	e17ffd17 	ldw	r5,-12(fp)
   15ddc:	01800044 	movi	r6,1
   15de0:	01c07fc4 	movi	r7,511
   15de4:	0015cd40 	call	15cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15de8:	01000074 	movhi	r4,1
   15dec:	211c7c04 	addi	r4,r4,29168
   15df0:	e17ffe17 	ldw	r5,-8(fp)
   15df4:	000d883a 	mov	r6,zero
   15df8:	01c07fc4 	movi	r7,511
   15dfc:	0015cd40 	call	15cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15e00:	01000074 	movhi	r4,1
   15e04:	211c8204 	addi	r4,r4,29192
   15e08:	e17fff17 	ldw	r5,-4(fp)
   15e0c:	01800044 	movi	r6,1
   15e10:	01c07fc4 	movi	r7,511
   15e14:	0015cd40 	call	15cd4 <alt_open_fd>
}  
   15e18:	e037883a 	mov	sp,fp
   15e1c:	dfc00117 	ldw	ra,4(sp)
   15e20:	df000017 	ldw	fp,0(sp)
   15e24:	dec00204 	addi	sp,sp,8
   15e28:	f800283a 	ret

00015e2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15e2c:	defffe04 	addi	sp,sp,-8
   15e30:	dfc00115 	stw	ra,4(sp)
   15e34:	df000015 	stw	fp,0(sp)
   15e38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15e3c:	008000b4 	movhi	r2,2
   15e40:	10a10204 	addi	r2,r2,-31736
   15e44:	10800017 	ldw	r2,0(r2)
   15e48:	10000526 	beq	r2,zero,15e60 <alt_get_errno+0x34>
   15e4c:	008000b4 	movhi	r2,2
   15e50:	10a10204 	addi	r2,r2,-31736
   15e54:	10800017 	ldw	r2,0(r2)
   15e58:	103ee83a 	callr	r2
   15e5c:	00000206 	br	15e68 <alt_get_errno+0x3c>
   15e60:	008000b4 	movhi	r2,2
   15e64:	10a7c204 	addi	r2,r2,-24824
}
   15e68:	e037883a 	mov	sp,fp
   15e6c:	dfc00117 	ldw	ra,4(sp)
   15e70:	df000017 	ldw	fp,0(sp)
   15e74:	dec00204 	addi	sp,sp,8
   15e78:	f800283a 	ret

00015e7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15e7c:	defffb04 	addi	sp,sp,-20
   15e80:	dfc00415 	stw	ra,16(sp)
   15e84:	df000315 	stw	fp,12(sp)
   15e88:	dc000215 	stw	r16,8(sp)
   15e8c:	df000204 	addi	fp,sp,8
   15e90:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15e94:	e0bfff17 	ldw	r2,-4(fp)
   15e98:	10800217 	ldw	r2,8(r2)
   15e9c:	10d00034 	orhi	r3,r2,16384
   15ea0:	e0bfff17 	ldw	r2,-4(fp)
   15ea4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15ea8:	e03ffe15 	stw	zero,-8(fp)
   15eac:	00002206 	br	15f38 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15eb0:	04000074 	movhi	r16,1
   15eb4:	841c7c04 	addi	r16,r16,29168
   15eb8:	e0bffe17 	ldw	r2,-8(fp)
   15ebc:	1009883a 	mov	r4,r2
   15ec0:	01400304 	movi	r5,12
   15ec4:	00110a40 	call	110a4 <__mulsi3>
   15ec8:	8085883a 	add	r2,r16,r2
   15ecc:	10c00017 	ldw	r3,0(r2)
   15ed0:	e0bfff17 	ldw	r2,-4(fp)
   15ed4:	10800017 	ldw	r2,0(r2)
   15ed8:	1880141e 	bne	r3,r2,15f2c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15edc:	04000074 	movhi	r16,1
   15ee0:	841c7c04 	addi	r16,r16,29168
   15ee4:	e0bffe17 	ldw	r2,-8(fp)
   15ee8:	1009883a 	mov	r4,r2
   15eec:	01400304 	movi	r5,12
   15ef0:	00110a40 	call	110a4 <__mulsi3>
   15ef4:	8085883a 	add	r2,r16,r2
   15ef8:	10800204 	addi	r2,r2,8
   15efc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15f00:	10000a0e 	bge	r2,zero,15f2c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15f04:	e13ffe17 	ldw	r4,-8(fp)
   15f08:	01400304 	movi	r5,12
   15f0c:	00110a40 	call	110a4 <__mulsi3>
   15f10:	00c00074 	movhi	r3,1
   15f14:	18dc7c04 	addi	r3,r3,29168
   15f18:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15f1c:	e0bfff17 	ldw	r2,-4(fp)
   15f20:	18800226 	beq	r3,r2,15f2c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15f24:	00bffcc4 	movi	r2,-13
   15f28:	00000a06 	br	15f54 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15f2c:	e0bffe17 	ldw	r2,-8(fp)
   15f30:	10800044 	addi	r2,r2,1
   15f34:	e0bffe15 	stw	r2,-8(fp)
   15f38:	008000b4 	movhi	r2,2
   15f3c:	10a10104 	addi	r2,r2,-31740
   15f40:	10800017 	ldw	r2,0(r2)
   15f44:	1007883a 	mov	r3,r2
   15f48:	e0bffe17 	ldw	r2,-8(fp)
   15f4c:	18bfd82e 	bgeu	r3,r2,15eb0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15f50:	0005883a 	mov	r2,zero
}
   15f54:	e037883a 	mov	sp,fp
   15f58:	dfc00217 	ldw	ra,8(sp)
   15f5c:	df000117 	ldw	fp,4(sp)
   15f60:	dc000017 	ldw	r16,0(sp)
   15f64:	dec00304 	addi	sp,sp,12
   15f68:	f800283a 	ret

00015f6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15f6c:	defff604 	addi	sp,sp,-40
   15f70:	dfc00915 	stw	ra,36(sp)
   15f74:	df000815 	stw	fp,32(sp)
   15f78:	df000804 	addi	fp,sp,32
   15f7c:	e13ffd15 	stw	r4,-12(fp)
   15f80:	e17ffe15 	stw	r5,-8(fp)
   15f84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15f88:	00bfffc4 	movi	r2,-1
   15f8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15f90:	00bffb44 	movi	r2,-19
   15f94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15f98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15f9c:	e13ffd17 	ldw	r4,-12(fp)
   15fa0:	014000b4 	movhi	r5,2
   15fa4:	2960ff04 	addi	r5,r5,-31748
   15fa8:	00162800 	call	16280 <alt_find_dev>
   15fac:	e0bff815 	stw	r2,-32(fp)
   15fb0:	e0bff817 	ldw	r2,-32(fp)
   15fb4:	1000051e 	bne	r2,zero,15fcc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15fb8:	e13ffd17 	ldw	r4,-12(fp)
   15fbc:	00163100 	call	16310 <alt_find_file>
   15fc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15fc4:	00800044 	movi	r2,1
   15fc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15fcc:	e0bff817 	ldw	r2,-32(fp)
   15fd0:	10002a26 	beq	r2,zero,1607c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15fd4:	e13ff817 	ldw	r4,-32(fp)
   15fd8:	00164240 	call	16424 <alt_get_fd>
   15fdc:	e0bff915 	stw	r2,-28(fp)
   15fe0:	e0bff917 	ldw	r2,-28(fp)
   15fe4:	1000030e 	bge	r2,zero,15ff4 <open+0x88>
    {
      status = index;
   15fe8:	e0bff917 	ldw	r2,-28(fp)
   15fec:	e0bffa15 	stw	r2,-24(fp)
   15ff0:	00002406 	br	16084 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15ff4:	e13ff917 	ldw	r4,-28(fp)
   15ff8:	01400304 	movi	r5,12
   15ffc:	00110a40 	call	110a4 <__mulsi3>
   16000:	00c00074 	movhi	r3,1
   16004:	18dc7c04 	addi	r3,r3,29168
   16008:	10c5883a 	add	r2,r2,r3
   1600c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16010:	e0fffe17 	ldw	r3,-8(fp)
   16014:	00900034 	movhi	r2,16384
   16018:	10bfffc4 	addi	r2,r2,-1
   1601c:	1886703a 	and	r3,r3,r2
   16020:	e0bffc17 	ldw	r2,-16(fp)
   16024:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16028:	e0bffb17 	ldw	r2,-20(fp)
   1602c:	1000051e 	bne	r2,zero,16044 <open+0xd8>
   16030:	e13ffc17 	ldw	r4,-16(fp)
   16034:	0015e7c0 	call	15e7c <alt_file_locked>
   16038:	e0bffa15 	stw	r2,-24(fp)
   1603c:	e0bffa17 	ldw	r2,-24(fp)
   16040:	10001016 	blt	r2,zero,16084 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16044:	e0bff817 	ldw	r2,-32(fp)
   16048:	10800317 	ldw	r2,12(r2)
   1604c:	10000826 	beq	r2,zero,16070 <open+0x104>
   16050:	e0bff817 	ldw	r2,-32(fp)
   16054:	10800317 	ldw	r2,12(r2)
   16058:	e13ffc17 	ldw	r4,-16(fp)
   1605c:	e17ffd17 	ldw	r5,-12(fp)
   16060:	e1bffe17 	ldw	r6,-8(fp)
   16064:	e1ffff17 	ldw	r7,-4(fp)
   16068:	103ee83a 	callr	r2
   1606c:	00000106 	br	16074 <open+0x108>
   16070:	0005883a 	mov	r2,zero
   16074:	e0bffa15 	stw	r2,-24(fp)
   16078:	00000206 	br	16084 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1607c:	00bffb44 	movi	r2,-19
   16080:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16084:	e0bffa17 	ldw	r2,-24(fp)
   16088:	1000080e 	bge	r2,zero,160ac <open+0x140>
  {
    alt_release_fd (index);  
   1608c:	e13ff917 	ldw	r4,-28(fp)
   16090:	00143580 	call	14358 <alt_release_fd>
    ALT_ERRNO = -status;
   16094:	0015e2c0 	call	15e2c <alt_get_errno>
   16098:	e0fffa17 	ldw	r3,-24(fp)
   1609c:	00c7c83a 	sub	r3,zero,r3
   160a0:	10c00015 	stw	r3,0(r2)
    return -1;
   160a4:	00bfffc4 	movi	r2,-1
   160a8:	00000106 	br	160b0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   160ac:	e0bff917 	ldw	r2,-28(fp)
}
   160b0:	e037883a 	mov	sp,fp
   160b4:	dfc00117 	ldw	ra,4(sp)
   160b8:	df000017 	ldw	fp,0(sp)
   160bc:	dec00204 	addi	sp,sp,8
   160c0:	f800283a 	ret

000160c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   160c4:	defffa04 	addi	sp,sp,-24
   160c8:	df000515 	stw	fp,20(sp)
   160cc:	df000504 	addi	fp,sp,20
   160d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160d4:	0005303a 	rdctl	r2,status
   160d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160dc:	e0fffc17 	ldw	r3,-16(fp)
   160e0:	00bfff84 	movi	r2,-2
   160e4:	1884703a 	and	r2,r3,r2
   160e8:	1001703a 	wrctl	status,r2
  
  return context;
   160ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   160f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   160f4:	e0bfff17 	ldw	r2,-4(fp)
   160f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   160fc:	e0bffd17 	ldw	r2,-12(fp)
   16100:	10800017 	ldw	r2,0(r2)
   16104:	e0fffd17 	ldw	r3,-12(fp)
   16108:	18c00117 	ldw	r3,4(r3)
   1610c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16110:	e0bffd17 	ldw	r2,-12(fp)
   16114:	10800117 	ldw	r2,4(r2)
   16118:	e0fffd17 	ldw	r3,-12(fp)
   1611c:	18c00017 	ldw	r3,0(r3)
   16120:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16124:	e0bffd17 	ldw	r2,-12(fp)
   16128:	e0fffd17 	ldw	r3,-12(fp)
   1612c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16130:	e0bffd17 	ldw	r2,-12(fp)
   16134:	e0fffd17 	ldw	r3,-12(fp)
   16138:	10c00015 	stw	r3,0(r2)
   1613c:	e0bffb17 	ldw	r2,-20(fp)
   16140:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16144:	e0bffe17 	ldw	r2,-8(fp)
   16148:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1614c:	e037883a 	mov	sp,fp
   16150:	df000017 	ldw	fp,0(sp)
   16154:	dec00104 	addi	sp,sp,4
   16158:	f800283a 	ret

0001615c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1615c:	defffb04 	addi	sp,sp,-20
   16160:	dfc00415 	stw	ra,16(sp)
   16164:	df000315 	stw	fp,12(sp)
   16168:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1616c:	d0a01117 	ldw	r2,-32700(gp)
   16170:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16174:	d0a6d417 	ldw	r2,-25776(gp)
   16178:	10800044 	addi	r2,r2,1
   1617c:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16180:	00002e06 	br	1623c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16184:	e0bffd17 	ldw	r2,-12(fp)
   16188:	10800017 	ldw	r2,0(r2)
   1618c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16190:	e0bffd17 	ldw	r2,-12(fp)
   16194:	10800403 	ldbu	r2,16(r2)
   16198:	10803fcc 	andi	r2,r2,255
   1619c:	10000426 	beq	r2,zero,161b0 <alt_tick+0x54>
   161a0:	d0a6d417 	ldw	r2,-25776(gp)
   161a4:	1000021e 	bne	r2,zero,161b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   161a8:	e0bffd17 	ldw	r2,-12(fp)
   161ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   161b0:	e0bffd17 	ldw	r2,-12(fp)
   161b4:	10800217 	ldw	r2,8(r2)
   161b8:	d0e6d417 	ldw	r3,-25776(gp)
   161bc:	18801d36 	bltu	r3,r2,16234 <alt_tick+0xd8>
   161c0:	e0bffd17 	ldw	r2,-12(fp)
   161c4:	10800403 	ldbu	r2,16(r2)
   161c8:	10803fcc 	andi	r2,r2,255
   161cc:	1000191e 	bne	r2,zero,16234 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   161d0:	e0bffd17 	ldw	r2,-12(fp)
   161d4:	10c00317 	ldw	r3,12(r2)
   161d8:	e0bffd17 	ldw	r2,-12(fp)
   161dc:	10800517 	ldw	r2,20(r2)
   161e0:	1009883a 	mov	r4,r2
   161e4:	183ee83a 	callr	r3
   161e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   161ec:	e0bfff17 	ldw	r2,-4(fp)
   161f0:	1000031e 	bne	r2,zero,16200 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   161f4:	e13ffd17 	ldw	r4,-12(fp)
   161f8:	00160c40 	call	160c4 <alt_alarm_stop>
   161fc:	00000d06 	br	16234 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16200:	e0bffd17 	ldw	r2,-12(fp)
   16204:	10c00217 	ldw	r3,8(r2)
   16208:	e0bfff17 	ldw	r2,-4(fp)
   1620c:	1887883a 	add	r3,r3,r2
   16210:	e0bffd17 	ldw	r2,-12(fp)
   16214:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16218:	e0bffd17 	ldw	r2,-12(fp)
   1621c:	10c00217 	ldw	r3,8(r2)
   16220:	d0a6d417 	ldw	r2,-25776(gp)
   16224:	1880032e 	bgeu	r3,r2,16234 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16228:	e0bffd17 	ldw	r2,-12(fp)
   1622c:	00c00044 	movi	r3,1
   16230:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16234:	e0bffe17 	ldw	r2,-8(fp)
   16238:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1623c:	e0fffd17 	ldw	r3,-12(fp)
   16240:	d0a01104 	addi	r2,gp,-32700
   16244:	18bfcf1e 	bne	r3,r2,16184 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16248:	0001883a 	nop
}
   1624c:	e037883a 	mov	sp,fp
   16250:	dfc00117 	ldw	ra,4(sp)
   16254:	df000017 	ldw	fp,0(sp)
   16258:	dec00204 	addi	sp,sp,8
   1625c:	f800283a 	ret

00016260 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   16260:	deffff04 	addi	sp,sp,-4
   16264:	df000015 	stw	fp,0(sp)
   16268:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1626c:	000170fa 	wrctl	ienable,zero
}
   16270:	e037883a 	mov	sp,fp
   16274:	df000017 	ldw	fp,0(sp)
   16278:	dec00104 	addi	sp,sp,4
   1627c:	f800283a 	ret

00016280 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16280:	defffa04 	addi	sp,sp,-24
   16284:	dfc00515 	stw	ra,20(sp)
   16288:	df000415 	stw	fp,16(sp)
   1628c:	df000404 	addi	fp,sp,16
   16290:	e13ffe15 	stw	r4,-8(fp)
   16294:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16298:	e0bfff17 	ldw	r2,-4(fp)
   1629c:	10800017 	ldw	r2,0(r2)
   162a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   162a4:	e13ffe17 	ldw	r4,-8(fp)
   162a8:	00119740 	call	11974 <strlen>
   162ac:	10800044 	addi	r2,r2,1
   162b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   162b4:	00000d06 	br	162ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   162b8:	e0bffc17 	ldw	r2,-16(fp)
   162bc:	10c00217 	ldw	r3,8(r2)
   162c0:	e0bffd17 	ldw	r2,-12(fp)
   162c4:	1809883a 	mov	r4,r3
   162c8:	e17ffe17 	ldw	r5,-8(fp)
   162cc:	100d883a 	mov	r6,r2
   162d0:	00165440 	call	16544 <memcmp>
   162d4:	1000021e 	bne	r2,zero,162e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   162d8:	e0bffc17 	ldw	r2,-16(fp)
   162dc:	00000706 	br	162fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   162e0:	e0bffc17 	ldw	r2,-16(fp)
   162e4:	10800017 	ldw	r2,0(r2)
   162e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   162ec:	e0fffc17 	ldw	r3,-16(fp)
   162f0:	e0bfff17 	ldw	r2,-4(fp)
   162f4:	18bff01e 	bne	r3,r2,162b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   162f8:	0005883a 	mov	r2,zero
}
   162fc:	e037883a 	mov	sp,fp
   16300:	dfc00117 	ldw	ra,4(sp)
   16304:	df000017 	ldw	fp,0(sp)
   16308:	dec00204 	addi	sp,sp,8
   1630c:	f800283a 	ret

00016310 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16310:	defffb04 	addi	sp,sp,-20
   16314:	dfc00415 	stw	ra,16(sp)
   16318:	df000315 	stw	fp,12(sp)
   1631c:	df000304 	addi	fp,sp,12
   16320:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16324:	008000b4 	movhi	r2,2
   16328:	10a0fd04 	addi	r2,r2,-31756
   1632c:	10800017 	ldw	r2,0(r2)
   16330:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16334:	00003106 	br	163fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   16338:	e0bffd17 	ldw	r2,-12(fp)
   1633c:	10800217 	ldw	r2,8(r2)
   16340:	1009883a 	mov	r4,r2
   16344:	00119740 	call	11974 <strlen>
   16348:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1634c:	e0bffd17 	ldw	r2,-12(fp)
   16350:	10c00217 	ldw	r3,8(r2)
   16354:	e0bffe17 	ldw	r2,-8(fp)
   16358:	10bfffc4 	addi	r2,r2,-1
   1635c:	1885883a 	add	r2,r3,r2
   16360:	10800003 	ldbu	r2,0(r2)
   16364:	10803fcc 	andi	r2,r2,255
   16368:	1080201c 	xori	r2,r2,128
   1636c:	10bfe004 	addi	r2,r2,-128
   16370:	10800bd8 	cmpnei	r2,r2,47
   16374:	1000031e 	bne	r2,zero,16384 <alt_find_file+0x74>
    {
      len -= 1;
   16378:	e0bffe17 	ldw	r2,-8(fp)
   1637c:	10bfffc4 	addi	r2,r2,-1
   16380:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16384:	e0bffe17 	ldw	r2,-8(fp)
   16388:	e0ffff17 	ldw	r3,-4(fp)
   1638c:	1885883a 	add	r2,r3,r2
   16390:	10800003 	ldbu	r2,0(r2)
   16394:	10803fcc 	andi	r2,r2,255
   16398:	1080201c 	xori	r2,r2,128
   1639c:	10bfe004 	addi	r2,r2,-128
   163a0:	10800be0 	cmpeqi	r2,r2,47
   163a4:	1000081e 	bne	r2,zero,163c8 <alt_find_file+0xb8>
   163a8:	e0bffe17 	ldw	r2,-8(fp)
   163ac:	e0ffff17 	ldw	r3,-4(fp)
   163b0:	1885883a 	add	r2,r3,r2
   163b4:	10800003 	ldbu	r2,0(r2)
   163b8:	10803fcc 	andi	r2,r2,255
   163bc:	1080201c 	xori	r2,r2,128
   163c0:	10bfe004 	addi	r2,r2,-128
   163c4:	10000a1e 	bne	r2,zero,163f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   163c8:	e0bffd17 	ldw	r2,-12(fp)
   163cc:	10c00217 	ldw	r3,8(r2)
   163d0:	e0bffe17 	ldw	r2,-8(fp)
   163d4:	1809883a 	mov	r4,r3
   163d8:	e17fff17 	ldw	r5,-4(fp)
   163dc:	100d883a 	mov	r6,r2
   163e0:	00165440 	call	16544 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   163e4:	1000021e 	bne	r2,zero,163f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   163e8:	e0bffd17 	ldw	r2,-12(fp)
   163ec:	00000806 	br	16410 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   163f0:	e0bffd17 	ldw	r2,-12(fp)
   163f4:	10800017 	ldw	r2,0(r2)
   163f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   163fc:	e0fffd17 	ldw	r3,-12(fp)
   16400:	008000b4 	movhi	r2,2
   16404:	10a0fd04 	addi	r2,r2,-31756
   16408:	18bfcb1e 	bne	r3,r2,16338 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1640c:	0005883a 	mov	r2,zero
}
   16410:	e037883a 	mov	sp,fp
   16414:	dfc00117 	ldw	ra,4(sp)
   16418:	df000017 	ldw	fp,0(sp)
   1641c:	dec00204 	addi	sp,sp,8
   16420:	f800283a 	ret

00016424 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16424:	defffa04 	addi	sp,sp,-24
   16428:	dfc00515 	stw	ra,20(sp)
   1642c:	df000415 	stw	fp,16(sp)
   16430:	dc000315 	stw	r16,12(sp)
   16434:	df000304 	addi	fp,sp,12
   16438:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1643c:	00bffa04 	movi	r2,-24
   16440:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16444:	e03ffd15 	stw	zero,-12(fp)
   16448:	00002106 	br	164d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1644c:	04000074 	movhi	r16,1
   16450:	841c7c04 	addi	r16,r16,29168
   16454:	e0bffd17 	ldw	r2,-12(fp)
   16458:	1009883a 	mov	r4,r2
   1645c:	01400304 	movi	r5,12
   16460:	00110a40 	call	110a4 <__mulsi3>
   16464:	8085883a 	add	r2,r16,r2
   16468:	10800017 	ldw	r2,0(r2)
   1646c:	1000151e 	bne	r2,zero,164c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   16470:	04000074 	movhi	r16,1
   16474:	841c7c04 	addi	r16,r16,29168
   16478:	e0bffd17 	ldw	r2,-12(fp)
   1647c:	1009883a 	mov	r4,r2
   16480:	01400304 	movi	r5,12
   16484:	00110a40 	call	110a4 <__mulsi3>
   16488:	8085883a 	add	r2,r16,r2
   1648c:	e0ffff17 	ldw	r3,-4(fp)
   16490:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   16494:	008000b4 	movhi	r2,2
   16498:	10a10104 	addi	r2,r2,-31740
   1649c:	10c00017 	ldw	r3,0(r2)
   164a0:	e0bffd17 	ldw	r2,-12(fp)
   164a4:	1880040e 	bge	r3,r2,164b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   164a8:	008000b4 	movhi	r2,2
   164ac:	10a10104 	addi	r2,r2,-31740
   164b0:	e0fffd17 	ldw	r3,-12(fp)
   164b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   164b8:	e0bffd17 	ldw	r2,-12(fp)
   164bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   164c0:	00000606 	br	164dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   164c4:	e0bffd17 	ldw	r2,-12(fp)
   164c8:	10800044 	addi	r2,r2,1
   164cc:	e0bffd15 	stw	r2,-12(fp)
   164d0:	e0bffd17 	ldw	r2,-12(fp)
   164d4:	10800810 	cmplti	r2,r2,32
   164d8:	103fdc1e 	bne	r2,zero,1644c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   164dc:	e0bffe17 	ldw	r2,-8(fp)
}
   164e0:	e037883a 	mov	sp,fp
   164e4:	dfc00217 	ldw	ra,8(sp)
   164e8:	df000117 	ldw	fp,4(sp)
   164ec:	dc000017 	ldw	r16,0(sp)
   164f0:	dec00304 	addi	sp,sp,12
   164f4:	f800283a 	ret

000164f8 <atexit>:
   164f8:	200b883a 	mov	r5,r4
   164fc:	000d883a 	mov	r6,zero
   16500:	0009883a 	mov	r4,zero
   16504:	000f883a 	mov	r7,zero
   16508:	00165c01 	jmpi	165c0 <__register_exitproc>

0001650c <exit>:
   1650c:	defffe04 	addi	sp,sp,-8
   16510:	000b883a 	mov	r5,zero
   16514:	dc000015 	stw	r16,0(sp)
   16518:	dfc00115 	stw	ra,4(sp)
   1651c:	2021883a 	mov	r16,r4
   16520:	00166f00 	call	166f0 <__call_exitprocs>
   16524:	008000b4 	movhi	r2,2
   16528:	10a0fb04 	addi	r2,r2,-31764
   1652c:	11000017 	ldw	r4,0(r2)
   16530:	20800f17 	ldw	r2,60(r4)
   16534:	10000126 	beq	r2,zero,1653c <exit+0x30>
   16538:	103ee83a 	callr	r2
   1653c:	8009883a 	mov	r4,r16
   16540:	00168900 	call	16890 <_exit>

00016544 <memcmp>:
   16544:	01c000c4 	movi	r7,3
   16548:	3980192e 	bgeu	r7,r6,165b0 <memcmp+0x6c>
   1654c:	2904b03a 	or	r2,r5,r4
   16550:	11c4703a 	and	r2,r2,r7
   16554:	10000f26 	beq	r2,zero,16594 <memcmp+0x50>
   16558:	20c00003 	ldbu	r3,0(r4)
   1655c:	28800003 	ldbu	r2,0(r5)
   16560:	1880151e 	bne	r3,r2,165b8 <memcmp+0x74>
   16564:	31bfff84 	addi	r6,r6,-2
   16568:	01ffffc4 	movi	r7,-1
   1656c:	00000406 	br	16580 <memcmp+0x3c>
   16570:	20c00003 	ldbu	r3,0(r4)
   16574:	28800003 	ldbu	r2,0(r5)
   16578:	31bfffc4 	addi	r6,r6,-1
   1657c:	18800e1e 	bne	r3,r2,165b8 <memcmp+0x74>
   16580:	21000044 	addi	r4,r4,1
   16584:	29400044 	addi	r5,r5,1
   16588:	31fff91e 	bne	r6,r7,16570 <memcmp+0x2c>
   1658c:	0005883a 	mov	r2,zero
   16590:	f800283a 	ret
   16594:	20c00017 	ldw	r3,0(r4)
   16598:	28800017 	ldw	r2,0(r5)
   1659c:	1880041e 	bne	r3,r2,165b0 <memcmp+0x6c>
   165a0:	31bfff04 	addi	r6,r6,-4
   165a4:	21000104 	addi	r4,r4,4
   165a8:	29400104 	addi	r5,r5,4
   165ac:	39bff936 	bltu	r7,r6,16594 <memcmp+0x50>
   165b0:	303fe91e 	bne	r6,zero,16558 <memcmp+0x14>
   165b4:	003ff506 	br	1658c <memcmp+0x48>
   165b8:	1885c83a 	sub	r2,r3,r2
   165bc:	f800283a 	ret

000165c0 <__register_exitproc>:
   165c0:	defffa04 	addi	sp,sp,-24
   165c4:	008000b4 	movhi	r2,2
   165c8:	10a0fb04 	addi	r2,r2,-31764
   165cc:	dc000315 	stw	r16,12(sp)
   165d0:	14000017 	ldw	r16,0(r2)
   165d4:	dc400415 	stw	r17,16(sp)
   165d8:	dfc00515 	stw	ra,20(sp)
   165dc:	80805217 	ldw	r2,328(r16)
   165e0:	2023883a 	mov	r17,r4
   165e4:	10003e26 	beq	r2,zero,166e0 <__register_exitproc+0x120>
   165e8:	10c00117 	ldw	r3,4(r2)
   165ec:	020007c4 	movi	r8,31
   165f0:	40c0180e 	bge	r8,r3,16654 <__register_exitproc+0x94>
   165f4:	00800074 	movhi	r2,1
   165f8:	10843304 	addi	r2,r2,4300
   165fc:	1000061e 	bne	r2,zero,16618 <__register_exitproc+0x58>
   16600:	00bfffc4 	movi	r2,-1
   16604:	dfc00517 	ldw	ra,20(sp)
   16608:	dc400417 	ldw	r17,16(sp)
   1660c:	dc000317 	ldw	r16,12(sp)
   16610:	dec00604 	addi	sp,sp,24
   16614:	f800283a 	ret
   16618:	01006404 	movi	r4,400
   1661c:	d9400015 	stw	r5,0(sp)
   16620:	d9800115 	stw	r6,4(sp)
   16624:	d9c00215 	stw	r7,8(sp)
   16628:	00110cc0 	call	110cc <malloc>
   1662c:	d9400017 	ldw	r5,0(sp)
   16630:	d9800117 	ldw	r6,4(sp)
   16634:	d9c00217 	ldw	r7,8(sp)
   16638:	103ff126 	beq	r2,zero,16600 <__register_exitproc+0x40>
   1663c:	80c05217 	ldw	r3,328(r16)
   16640:	10000115 	stw	zero,4(r2)
   16644:	10c00015 	stw	r3,0(r2)
   16648:	80805215 	stw	r2,328(r16)
   1664c:	10006215 	stw	zero,392(r2)
   16650:	10006315 	stw	zero,396(r2)
   16654:	10c00117 	ldw	r3,4(r2)
   16658:	88000d1e 	bne	r17,zero,16690 <__register_exitproc+0xd0>
   1665c:	19000084 	addi	r4,r3,2
   16660:	2109883a 	add	r4,r4,r4
   16664:	18c00044 	addi	r3,r3,1
   16668:	2109883a 	add	r4,r4,r4
   1666c:	1109883a 	add	r4,r2,r4
   16670:	10c00115 	stw	r3,4(r2)
   16674:	0005883a 	mov	r2,zero
   16678:	21400015 	stw	r5,0(r4)
   1667c:	dfc00517 	ldw	ra,20(sp)
   16680:	dc400417 	ldw	r17,16(sp)
   16684:	dc000317 	ldw	r16,12(sp)
   16688:	dec00604 	addi	sp,sp,24
   1668c:	f800283a 	ret
   16690:	02400044 	movi	r9,1
   16694:	12806217 	ldw	r10,392(r2)
   16698:	48d2983a 	sll	r9,r9,r3
   1669c:	19000804 	addi	r4,r3,32
   166a0:	18d1883a 	add	r8,r3,r3
   166a4:	2109883a 	add	r4,r4,r4
   166a8:	4211883a 	add	r8,r8,r8
   166ac:	2109883a 	add	r4,r4,r4
   166b0:	1109883a 	add	r4,r2,r4
   166b4:	1211883a 	add	r8,r2,r8
   166b8:	5254b03a 	or	r10,r10,r9
   166bc:	21c02215 	stw	r7,136(r4)
   166c0:	41802215 	stw	r6,136(r8)
   166c4:	12806215 	stw	r10,392(r2)
   166c8:	01000084 	movi	r4,2
   166cc:	893fe31e 	bne	r17,r4,1665c <__register_exitproc+0x9c>
   166d0:	11006317 	ldw	r4,396(r2)
   166d4:	2252b03a 	or	r9,r4,r9
   166d8:	12406315 	stw	r9,396(r2)
   166dc:	003fdf06 	br	1665c <__register_exitproc+0x9c>
   166e0:	008000b4 	movhi	r2,2
   166e4:	10a81304 	addi	r2,r2,-24500
   166e8:	80805215 	stw	r2,328(r16)
   166ec:	003fbe06 	br	165e8 <__register_exitproc+0x28>

000166f0 <__call_exitprocs>:
   166f0:	008000b4 	movhi	r2,2
   166f4:	10a0fb04 	addi	r2,r2,-31764
   166f8:	10800017 	ldw	r2,0(r2)
   166fc:	defff304 	addi	sp,sp,-52
   16700:	df000b15 	stw	fp,44(sp)
   16704:	d8800015 	stw	r2,0(sp)
   16708:	10805204 	addi	r2,r2,328
   1670c:	dd400815 	stw	r21,32(sp)
   16710:	dfc00c15 	stw	ra,48(sp)
   16714:	ddc00a15 	stw	r23,40(sp)
   16718:	dd800915 	stw	r22,36(sp)
   1671c:	dd000715 	stw	r20,28(sp)
   16720:	dcc00615 	stw	r19,24(sp)
   16724:	dc800515 	stw	r18,20(sp)
   16728:	dc400415 	stw	r17,16(sp)
   1672c:	dc000315 	stw	r16,12(sp)
   16730:	d9000115 	stw	r4,4(sp)
   16734:	2839883a 	mov	fp,r5
   16738:	d8800215 	stw	r2,8(sp)
   1673c:	057fffc4 	movi	r21,-1
   16740:	d8800017 	ldw	r2,0(sp)
   16744:	ddc00217 	ldw	r23,8(sp)
   16748:	14805217 	ldw	r18,328(r2)
   1674c:	90001726 	beq	r18,zero,167ac <__call_exitprocs+0xbc>
   16750:	94400117 	ldw	r17,4(r18)
   16754:	8c3fffc4 	addi	r16,r17,-1
   16758:	80001116 	blt	r16,zero,167a0 <__call_exitprocs+0xb0>
   1675c:	8c400044 	addi	r17,r17,1
   16760:	8427883a 	add	r19,r16,r16
   16764:	8c63883a 	add	r17,r17,r17
   16768:	95802204 	addi	r22,r18,136
   1676c:	9ce7883a 	add	r19,r19,r19
   16770:	8c63883a 	add	r17,r17,r17
   16774:	b4e7883a 	add	r19,r22,r19
   16778:	9463883a 	add	r17,r18,r17
   1677c:	e0001726 	beq	fp,zero,167dc <__call_exitprocs+0xec>
   16780:	8c87c83a 	sub	r3,r17,r18
   16784:	b0c7883a 	add	r3,r22,r3
   16788:	18c01e17 	ldw	r3,120(r3)
   1678c:	1f001326 	beq	r3,fp,167dc <__call_exitprocs+0xec>
   16790:	843fffc4 	addi	r16,r16,-1
   16794:	9cffff04 	addi	r19,r19,-4
   16798:	8c7fff04 	addi	r17,r17,-4
   1679c:	857ff71e 	bne	r16,r21,1677c <__call_exitprocs+0x8c>
   167a0:	00800074 	movhi	r2,1
   167a4:	10843804 	addi	r2,r2,4320
   167a8:	10002a1e 	bne	r2,zero,16854 <__call_exitprocs+0x164>
   167ac:	dfc00c17 	ldw	ra,48(sp)
   167b0:	df000b17 	ldw	fp,44(sp)
   167b4:	ddc00a17 	ldw	r23,40(sp)
   167b8:	dd800917 	ldw	r22,36(sp)
   167bc:	dd400817 	ldw	r21,32(sp)
   167c0:	dd000717 	ldw	r20,28(sp)
   167c4:	dcc00617 	ldw	r19,24(sp)
   167c8:	dc800517 	ldw	r18,20(sp)
   167cc:	dc400417 	ldw	r17,16(sp)
   167d0:	dc000317 	ldw	r16,12(sp)
   167d4:	dec00d04 	addi	sp,sp,52
   167d8:	f800283a 	ret
   167dc:	91000117 	ldw	r4,4(r18)
   167e0:	88c00017 	ldw	r3,0(r17)
   167e4:	213fffc4 	addi	r4,r4,-1
   167e8:	24001526 	beq	r4,r16,16840 <__call_exitprocs+0x150>
   167ec:	88000015 	stw	zero,0(r17)
   167f0:	183fe726 	beq	r3,zero,16790 <__call_exitprocs+0xa0>
   167f4:	00800044 	movi	r2,1
   167f8:	1408983a 	sll	r4,r2,r16
   167fc:	91406217 	ldw	r5,392(r18)
   16800:	95000117 	ldw	r20,4(r18)
   16804:	214a703a 	and	r5,r4,r5
   16808:	28000b26 	beq	r5,zero,16838 <__call_exitprocs+0x148>
   1680c:	91406317 	ldw	r5,396(r18)
   16810:	2148703a 	and	r4,r4,r5
   16814:	20000c1e 	bne	r4,zero,16848 <__call_exitprocs+0x158>
   16818:	99400017 	ldw	r5,0(r19)
   1681c:	d9000117 	ldw	r4,4(sp)
   16820:	183ee83a 	callr	r3
   16824:	90c00117 	ldw	r3,4(r18)
   16828:	1d3fc51e 	bne	r3,r20,16740 <__call_exitprocs+0x50>
   1682c:	b8c00017 	ldw	r3,0(r23)
   16830:	1cbfd726 	beq	r3,r18,16790 <__call_exitprocs+0xa0>
   16834:	003fc206 	br	16740 <__call_exitprocs+0x50>
   16838:	183ee83a 	callr	r3
   1683c:	003ff906 	br	16824 <__call_exitprocs+0x134>
   16840:	94000115 	stw	r16,4(r18)
   16844:	003fea06 	br	167f0 <__call_exitprocs+0x100>
   16848:	99000017 	ldw	r4,0(r19)
   1684c:	183ee83a 	callr	r3
   16850:	003ff406 	br	16824 <__call_exitprocs+0x134>
   16854:	90c00117 	ldw	r3,4(r18)
   16858:	1800071e 	bne	r3,zero,16878 <__call_exitprocs+0x188>
   1685c:	90c00017 	ldw	r3,0(r18)
   16860:	18000926 	beq	r3,zero,16888 <__call_exitprocs+0x198>
   16864:	9009883a 	mov	r4,r18
   16868:	b8c00015 	stw	r3,0(r23)
   1686c:	00110e00 	call	110e0 <free>
   16870:	bc800017 	ldw	r18,0(r23)
   16874:	003fb506 	br	1674c <__call_exitprocs+0x5c>
   16878:	90c00017 	ldw	r3,0(r18)
   1687c:	902f883a 	mov	r23,r18
   16880:	1825883a 	mov	r18,r3
   16884:	003fb106 	br	1674c <__call_exitprocs+0x5c>
   16888:	0007883a 	mov	r3,zero
   1688c:	003ffb06 	br	1687c <__call_exitprocs+0x18c>

00016890 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16890:	defffc04 	addi	sp,sp,-16
   16894:	df000315 	stw	fp,12(sp)
   16898:	df000304 	addi	fp,sp,12
   1689c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   168a0:	0001883a 	nop
   168a4:	e0bfff17 	ldw	r2,-4(fp)
   168a8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   168ac:	e0bffd17 	ldw	r2,-12(fp)
   168b0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   168b4:	e0bffe17 	ldw	r2,-8(fp)
   168b8:	10000226 	beq	r2,zero,168c4 <_exit+0x34>
    ALT_SIM_FAIL();
   168bc:	002af070 	cmpltui	zero,zero,43969
   168c0:	00000106 	br	168c8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   168c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   168c8:	003fff06 	br	168c8 <_exit+0x38>

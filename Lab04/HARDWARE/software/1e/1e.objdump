
1e.elf:     file format elf32-littlenios2
1e.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006b38 memsz 0x00006b38 flags r-x
    LOAD off    0x00007b58 vaddr 0x00016b58 paddr 0x00018e2c align 2**12
         filesz 0x000022d4 memsz 0x000022d4 flags rw-
    LOAD off    0x0000a100 vaddr 0x0001b100 paddr 0x0001b100 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006914  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00016acc  00016acc  00007acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000022d4  00016b58  00018e2c  00007b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  0001b100  0001b100  0000a100  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009e2c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009d0  00000000  00000000  00009e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000185c3  00000000  00000000  0000a820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ee5  00000000  00000000  00022de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000715c  00000000  00000000  00028cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001358  00000000  00000000  0002fe24  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000026f8  00000000  00000000  0003117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005ddf  00000000  00000000  00033874  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00039654  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00039668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003c66a  2**0
                  CONTENTS, READONLY
 17 .cpu          00000006  00000000  00000000  0003c66d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003c673  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c674  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c675  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c679  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c67d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000c  00000000  00000000  0003c681  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000c  00000000  00000000  0003c68d  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000c  00000000  00000000  0003c699  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0003c6a5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0003c6ae  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001c11da  00000000  00000000  0003c6ca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00016acc l    d  .rodata	00000000 .rodata
00016b58 l    d  .rwdata	00000000 .rwdata
0001b100 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1e_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00011198 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000173e4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00012e2c l     F .text	00000008 __fp_lock
00012e34 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00013e0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013f28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013f54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014054 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014148 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018e1c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000147c4 l     F .text	00000038 alt_dev_reg
00017d94 l     O .rwdata	00001060 jtag_uart_1e
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014fb0 l     F .text	00000204 altera_avalon_jtag_uart_irq
000151b4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000157f0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015a48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015ed4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001602c l     F .text	00000050 alt_get_errno
0001607c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00013cd0 g     F .text	00000064 _isatty_r
00014358 g     F .text	00000078 alt_main
000112f0 g     F .text	00000084 _puts_r
0001b164 g     O .bss	00000100 alt_irq
000173c0 g     O .rwdata	0000000c q1c
00013d34 g     F .text	0000006c _lseek_r
00014b1c g     F .text	00000058 altera_avalon_fifo_write_almostfull
00018e2c g       *ABS*	00000000 __flash_rwdata_start
0001b3f4 g       *ABS*	00000000 __alt_heap_start
00016b58 g     O .rwdata	00000018 luminance_dc_code_table
000139e4 g     F .text	0000005c __sseek
00012ed0 g     F .text	0000010c __sinit
00012e48 g     F .text	00000078 __sfmoreglue
0001739c g     O .rwdata	0000000c q5
000143f0 g     F .text	00000020 __malloc_unlock
000122b4 g     F .text	0000018c memmove
0001489c g     F .text	00000098 altera_avalon_fifo_init
00012ec0 g     F .text	00000010 _cleanup
00014bcc g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00014d64 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013c68 g     F .text	00000068 _fstat_r
0001b120 g     O .bss	00000004 errno
0001b128 g     O .bss	00000004 alt_argv
00020df4 g       *ABS*	00000000 _gp
00014a68 g     F .text	0000005c altera_avalon_fifo_clear_event
00017c14 g     O .rwdata	00000180 alt_fd_list
00016480 g     F .text	00000090 alt_find_dev
00012174 g     F .text	00000140 memcpy
00012e3c g     F .text	0000000c _cleanup_r
00015fb4 g     F .text	00000078 alt_io_redirect
00016acc g       *ABS*	00000000 __DTOR_END__
00011374 g     F .text	00000014 puts
00017378 g     O .rwdata	0000000c q2
00016e40 g     O .rwdata	00000144 chrominance_ac_code_table
000153b4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000112b8 g     F .text	00000008 __udivsi3
000140a4 g     F .text	000000a4 isatty
0001b11c g     O .bss	00000004 __malloc_top_pad
00011414 g     F .text	000004e4 __sfvwrite_r
00012a3c g     F .text	00000064 _sbrk_r
00013da0 g     F .text	0000006c _read_r
00018e14 g     O .rwdata	00000004 alt_max_fd
00013b18 g     F .text	0000013c _fclose_r
00012dfc g     F .text	00000030 fflush
0001b118 g     O .bss	00000004 __malloc_max_sbrked_mem
00014284 g     F .text	000000d4 lseek
00018df4 g     O .rwdata	00000004 _global_impure_ptr
00012440 g     F .text	000005fc _realloc_r
0001b3f4 g       *ABS*	00000000 __bss_end
00015de4 g     F .text	000000f0 alt_iic_isr_register
0001635c g     F .text	00000104 alt_tick
000130e8 g     F .text	00000018 __fp_lock_all
00015d98 g     F .text	0000004c alt_ic_irq_enabled
000162c4 g     F .text	00000098 alt_alarm_stop
0001b130 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00017bec g     O .rwdata	00000028 alt_dev_null
00015a2c g     F .text	0000001c alt_dcache_flush_all
00014ac4 g     F .text	00000058 altera_avalon_fifo_write_ienable
00018e2c g       *ABS*	00000000 __ram_rwdata_end
000149d8 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00018e0c g     O .rwdata	00000008 alt_dev_list
000146d4 g     F .text	000000f0 write
000101f4 g     F .text	000002cc write_markers
00016b58 g       *ABS*	00000000 __ram_rodata_end
00013fa4 g     F .text	000000b0 fstat
0001b110 g     O .bss	00000004 INIT_USAGE_DEQ
00010fbc g     F .text	0000003c RECV2
000112c0 g     F .text	00000008 __umodsi3
0001b3f4 g       *ABS*	00000000 end
00014ef0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00010ff8 g     F .text	00000044 SEND1
00014a04 g     F .text	0000003c altera_avalon_fifo_read_event
00016acc g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00015864 g     F .text	00000088 alt_avalon_timer_sc_init
00016b88 g     O .rwdata	00000018 chrominance_dc_code_table
000155cc g     F .text	00000224 altera_avalon_jtag_uart_write
000130d8 g     F .text	00000004 __sfp_lock_acquire
00014c90 g     F .text	0000004c altera_avalon_fifo_read_fifo
0001207c g     F .text	000000f8 memchr
00013254 g     F .text	000002d0 _free_r
000168f0 g     F .text	000001a0 __call_exitprocs
00018dfc g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
0001b134 g     O .bss	00000004 _alt_tick_rate
00010e74 g     F .text	00000088 enqueueINT32
0001b138 g     O .bss	00000004 _alt_nticks
00014460 g     F .text	000000f4 read
00014830 g     F .text	0000006c alt_sys_init
000167c0 g     F .text	00000130 __register_exitproc
000173cc g     O .rwdata	0000000c q1d
00017384 g     O .rwdata	0000000c q3
00015258 g     F .text	00000068 altera_avalon_jtag_uart_close
000112c8 g     F .text	00000028 __mulsi3
00016b58 g       *ABS*	00000000 __ram_rwdata_start
00016acc g       *ABS*	00000000 __ram_rodata_start
0001b13c g     O .bss	00000028 __malloc_current_mallinfo
0001b108 g     O .bss	00000002 ldc2
00016f84 g     O .rwdata	00000144 chrominance_ac_size_table
0001736c g     O .rwdata	0000000c q1
00014d8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016624 g     F .text	000000d4 alt_get_fd
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem_1e
00013ab4 g     F .text	00000064 _close_r
00016744 g     F .text	0000007c memcmp
00014e4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001b3f4 g       *ABS*	00000000 __alt_stack_base
00014e9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012aa0 g     F .text	00000174 __swsetup_r
00014934 g     F .text	0000003c altera_avalon_fifo_read_status
00012fdc g     F .text	000000fc __sfp
000177e4 g     O .rwdata	00000408 __malloc_av_
000130e4 g     F .text	00000004 __sinit_lock_release
00013908 g     F .text	00000054 __sread
00014d38 g     F .text	0000002c altera_avalon_fifo_read_other_info
0001103c g     F .text	0000015c printInteger
00016510 g     F .text	00000114 alt_find_file
00015a98 g     F .text	000000a0 alt_dev_llist_insert
000143d0 g     F .text	00000020 __malloc_lock
000145d4 g     F .text	000000b0 sbrk
00012c14 g     F .text	000001e8 _fflush_r
0001b100 g       *ABS*	00000000 __bss_start
0001382c g     F .text	000000dc memset
0001b106 g     O .bss	00000002 ldc1
00010dd0 g     F .text	000000a4 main
0001b12c g     O .bss	00000004 alt_envp
0001b114 g     O .bss	00000004 __malloc_max_total_mem
00014dec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014a40 g     F .text	00000028 altera_avalon_fifo_read_level
00010cfc g     F .text	000000d4 close_bitstream
00013a40 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013c54 g     F .text	00000014 fclose
0001b264 g     O .bss	00000190 _atexit0
000118f8 g     F .text	00000784 _malloc_r
00010f80 g     F .text	0000003c RECV1
00018e18 g     O .rwdata	00000004 alt_errno
000173b4 g     O .rwdata	0000000c q1b
00013524 g     F .text	000000a8 _fwalk
0001120c g     F .text	00000050 __divsi3
00013118 g     F .text	0000013c _malloc_trim_r
00016acc g       *ABS*	00000000 __CTOR_END__
000104c0 g     F .text	0000083c huffman
00016acc g       *ABS*	00000000 __flash_rodata_start
00016acc g       *ABS*	00000000 __DTOR_LIST__
000147fc g     F .text	00000034 alt_irq_init
00014554 g     F .text	00000080 alt_release_fd
000166f8 g     F .text	00000014 atexit
00013a48 g     F .text	0000006c _write_r
000173a8 g     O .rwdata	0000000c q6
000170c8 g     O .rwdata	00000100 bitsize
0001b10c g     O .bss	00000004 INIT_USAGE_ENQ
00018df8 g     O .rwdata	00000004 _impure_ptr
0001b124 g     O .bss	00000004 alt_argc
00015b94 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00013100 g     F .text	00000018 __fp_unlock_all
000173d8 g     O .rwdata	0000000c q1e
00018e04 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001b100 g     O .bss	00000004 lcode
00014cdc g     F .text	0000005c altera_avalon_fifo_write_other_info
00015c0c g     F .text	00000050 alt_ic_isr_register
00018e2c g       *ABS*	00000000 _edata
0001b3f4 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
000152c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00015cf8 g     F .text	000000a0 alt_ic_irq_disable
0001395c g     F .text	00000088 __swrite
00018e00 g     O .rwdata	00000004 __malloc_trim_threshold
00016cfc g     O .rwdata	00000144 luminance_ac_size_table
00016460 g     F .text	00000020 altera_nios2_qsys_irq_init
0001670c g     F .text	00000038 exit
000171c8 g     O .rwdata	000001a4 markerdata
000135cc g     F .text	000000b8 _fwalk_reent
0001125c g     F .text	0000005c __modsi3
00014970 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001b10a g     O .bss	00000002 ldc3
000130dc g     F .text	00000004 __sfp_lock_release
00016a90 g     F .text	0000003c _exit
00016ba0 g     O .rwdata	00000018 chrominance_dc_size_table
000158ec g     F .text	00000140 alt_alarm_start
000149ac g     F .text	0000002c altera_avalon_fifo_read_almostfull
00013684 g     F .text	000001a8 __smakebuf_r
00017390 g     O .rwdata	0000000c q4
00011388 g     F .text	0000008c strlen
0001616c g     F .text	00000158 open
00014c24 g     F .text	0000006c altera_avalon_read_fifo
00010efc g     F .text	00000084 dequeueINT32
0001b104 g     O .bss	00000002 bitindex
00015bf0 g     F .text	0000001c alt_icache_flush_all
00016bb8 g     O .rwdata	00000144 luminance_ac_code_table
00018e20 g     O .rwdata	00000004 alt_priority_mask
00015c5c g     F .text	0000009c alt_ic_irq_enable
00014b74 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00018e24 g     O .rwdata	00000008 alt_alarm_list
00015b38 g     F .text	0000005c _do_ctors
00016b70 g     O .rwdata	00000018 luminance_dc_size_table
00013e5c g     F .text	000000cc close
000141b4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000130e0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18ec5904 	addi	r3,r3,-20124
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	212c5904 	addi	r4,r4,-20124
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d6837d14 	ori	gp,gp,3572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10ac4014 	ori	r2,r2,45312

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18ecfd14 	ori	r3,r3,46068

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00141b40 	call	141b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00143580 	call	14358 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <write_markers>:
	}

// Header for JPEG Encoder

void write_markers(UINT32 image_width, UINT32 image_height)
{
   101f4:	defffa04 	addi	sp,sp,-24
   101f8:	dfc00515 	stw	ra,20(sp)
   101fc:	df000415 	stw	fp,16(sp)
   10200:	df000404 	addi	fp,sp,16
   10204:	e13ffe15 	stw	r4,-8(fp)
   10208:	e17fff15 	stw	r5,-4(fp)
	UINT16 i, header_length;
	UINT8 number_of_components;

	// Start of image marker
	SEND1(0xFF);
   1020c:	01003fc4 	movi	r4,255
   10210:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0xD8);
   10214:	01003604 	movi	r4,216
   10218:	0010ff80 	call	10ff8 <SEND1>

	// Quantization table marker
	SEND1(0xFF);
   1021c:	01003fc4 	movi	r4,255
   10220:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0xDB);
   10224:	010036c4 	movi	r4,219
   10228:	0010ff80 	call	10ff8 <SEND1>

	// Quantization table length
	SEND1(0x00);
   1022c:	0009883a 	mov	r4,zero
   10230:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x84);
   10234:	01002104 	movi	r4,132
   10238:	0010ff80 	call	10ff8 <SEND1>

	// Pq, Tq
	SEND1(0x00);
   1023c:	0009883a 	mov	r4,zero
   10240:	0010ff80 	call	10ff8 <SEND1>

	// Lqt table
	for (i = 0; i < 64; i++)
   10244:	e03ffc0d 	sth	zero,-16(fp)
   10248:	00000706 	br	10268 <write_markers+0x74>
		SEND1((UINT8)RECV2()); // Lqt [i];
   1024c:	0010fbc0 	call	10fbc <RECV2>
   10250:	10803fcc 	andi	r2,r2,255
   10254:	1009883a 	mov	r4,r2
   10258:	0010ff80 	call	10ff8 <SEND1>

	// Pq, Tq
	SEND1(0x00);

	// Lqt table
	for (i = 0; i < 64; i++)
   1025c:	e0bffc0b 	ldhu	r2,-16(fp)
   10260:	10800044 	addi	r2,r2,1
   10264:	e0bffc0d 	sth	r2,-16(fp)
   10268:	e0bffc0b 	ldhu	r2,-16(fp)
   1026c:	10801030 	cmpltui	r2,r2,64
   10270:	103ff61e 	bne	r2,zero,1024c <write_markers+0x58>
		SEND1((UINT8)RECV2()); // Lqt [i];

	// Pq, Tq
	SEND1(0x01);
   10274:	01000044 	movi	r4,1
   10278:	0010ff80 	call	10ff8 <SEND1>

	// Cqt table
	for (i = 0; i < 64; i++)
   1027c:	e03ffc0d 	sth	zero,-16(fp)
   10280:	00000706 	br	102a0 <write_markers+0xac>
		SEND1((UINT8)RECV2()); // Cqt [i];
   10284:	0010fbc0 	call	10fbc <RECV2>
   10288:	10803fcc 	andi	r2,r2,255
   1028c:	1009883a 	mov	r4,r2
   10290:	0010ff80 	call	10ff8 <SEND1>

	// Pq, Tq
	SEND1(0x01);

	// Cqt table
	for (i = 0; i < 64; i++)
   10294:	e0bffc0b 	ldhu	r2,-16(fp)
   10298:	10800044 	addi	r2,r2,1
   1029c:	e0bffc0d 	sth	r2,-16(fp)
   102a0:	e0bffc0b 	ldhu	r2,-16(fp)
   102a4:	10801030 	cmpltui	r2,r2,64
   102a8:	103ff61e 	bne	r2,zero,10284 <write_markers+0x90>
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   102ac:	e03ffc0d 	sth	zero,-16(fp)
   102b0:	00001706 	br	10310 <write_markers+0x11c>
	{
		SEND1((UINT8)(markerdata[i] >> 8));
   102b4:	e0bffc0b 	ldhu	r2,-16(fp)
   102b8:	00c00074 	movhi	r3,1
   102bc:	18dc7204 	addi	r3,r3,29128
   102c0:	1085883a 	add	r2,r2,r2
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	1080000b 	ldhu	r2,0(r2)
   102cc:	10bfffcc 	andi	r2,r2,65535
   102d0:	1004d23a 	srli	r2,r2,8
   102d4:	10803fcc 	andi	r2,r2,255
   102d8:	1009883a 	mov	r4,r2
   102dc:	0010ff80 	call	10ff8 <SEND1>
		SEND1((UINT8)markerdata[i]);
   102e0:	e0bffc0b 	ldhu	r2,-16(fp)
   102e4:	00c00074 	movhi	r3,1
   102e8:	18dc7204 	addi	r3,r3,29128
   102ec:	1085883a 	add	r2,r2,r2
   102f0:	1885883a 	add	r2,r3,r2
   102f4:	1080000b 	ldhu	r2,0(r2)
   102f8:	10803fcc 	andi	r2,r2,255
   102fc:	1009883a 	mov	r4,r2
   10300:	0010ff80 	call	10ff8 <SEND1>
	// Cqt table
	for (i = 0; i < 64; i++)
		SEND1((UINT8)RECV2()); // Cqt [i];

	// huffman table(DHT)
	for (i = 0; i < 210; i++)
   10304:	e0bffc0b 	ldhu	r2,-16(fp)
   10308:	10800044 	addi	r2,r2,1
   1030c:	e0bffc0d 	sth	r2,-16(fp)
   10310:	e0bffc0b 	ldhu	r2,-16(fp)
   10314:	108034b0 	cmpltui	r2,r2,210
   10318:	103fe61e 	bne	r2,zero,102b4 <write_markers+0xc0>
	}

	// if (image_format == FOUR_ZERO_ZERO)
	//	number_of_components = 1;
	// else
	number_of_components = 3;
   1031c:	008000c4 	movi	r2,3
   10320:	e0bffc85 	stb	r2,-14(fp)

	// Frame header(SOF)

	// Start of frame marker
	SEND1(0xFF);
   10324:	01003fc4 	movi	r4,255
   10328:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0xC0);
   1032c:	01003004 	movi	r4,192
   10330:	0010ff80 	call	10ff8 <SEND1>

	header_length = (UINT16)(8 + 3 * number_of_components);
   10334:	e0fffc83 	ldbu	r3,-14(fp)
   10338:	1805883a 	mov	r2,r3
   1033c:	1085883a 	add	r2,r2,r2
   10340:	10c5883a 	add	r2,r2,r3
   10344:	10800204 	addi	r2,r2,8
   10348:	e0bffd0d 	sth	r2,-12(fp)

	// Frame header length
	SEND1((UINT8)(header_length >> 8));
   1034c:	e0bffd0b 	ldhu	r2,-12(fp)
   10350:	1004d23a 	srli	r2,r2,8
   10354:	10803fcc 	andi	r2,r2,255
   10358:	1009883a 	mov	r4,r2
   1035c:	0010ff80 	call	10ff8 <SEND1>
	SEND1((UINT8)header_length);
   10360:	e0bffd0b 	ldhu	r2,-12(fp)
   10364:	10803fcc 	andi	r2,r2,255
   10368:	1009883a 	mov	r4,r2
   1036c:	0010ff80 	call	10ff8 <SEND1>

	// Precision (P)
	SEND1(0x08);
   10370:	01000204 	movi	r4,8
   10374:	0010ff80 	call	10ff8 <SEND1>

	// image height
	SEND1((UINT8)(image_height >> 8));
   10378:	e0bfff17 	ldw	r2,-4(fp)
   1037c:	1004d23a 	srli	r2,r2,8
   10380:	10803fcc 	andi	r2,r2,255
   10384:	1009883a 	mov	r4,r2
   10388:	0010ff80 	call	10ff8 <SEND1>
	SEND1((UINT8)image_height);
   1038c:	e0bfff17 	ldw	r2,-4(fp)
   10390:	10803fcc 	andi	r2,r2,255
   10394:	1009883a 	mov	r4,r2
   10398:	0010ff80 	call	10ff8 <SEND1>

	// image width
	SEND1((UINT8)(image_width >> 8));
   1039c:	e0bffe17 	ldw	r2,-8(fp)
   103a0:	1004d23a 	srli	r2,r2,8
   103a4:	10803fcc 	andi	r2,r2,255
   103a8:	1009883a 	mov	r4,r2
   103ac:	0010ff80 	call	10ff8 <SEND1>
	SEND1((UINT8)image_width);
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10803fcc 	andi	r2,r2,255
   103b8:	1009883a 	mov	r4,r2
   103bc:	0010ff80 	call	10ff8 <SEND1>

	// Nf
	SEND1(number_of_components);
   103c0:	e0bffc83 	ldbu	r2,-14(fp)
   103c4:	1009883a 	mov	r4,r2
   103c8:	0010ff80 	call	10ff8 <SEND1>
	//	*output_ptr++ = 0x11;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   103cc:	01000044 	movi	r4,1
   103d0:	0010ff80 	call	10ff8 <SEND1>
	// if (image_format == FOUR_TWO_ZERO)
	//	*output_ptr++ = 0x22;
	// else if (image_format == FOUR_TWO_TWO)
	//	*output_ptr++ = 0x21;
	// else
	SEND1(0x11);
   103d4:	01000444 	movi	r4,17
   103d8:	0010ff80 	call	10ff8 <SEND1>

	SEND1(0x00);
   103dc:	0009883a 	mov	r4,zero
   103e0:	0010ff80 	call	10ff8 <SEND1>

	SEND1(0x02);
   103e4:	01000084 	movi	r4,2
   103e8:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x11);
   103ec:	01000444 	movi	r4,17
   103f0:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x01);
   103f4:	01000044 	movi	r4,1
   103f8:	0010ff80 	call	10ff8 <SEND1>

	SEND1(0x03);
   103fc:	010000c4 	movi	r4,3
   10400:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x11);
   10404:	01000444 	movi	r4,17
   10408:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x01);
   1040c:	01000044 	movi	r4,1
   10410:	0010ff80 	call	10ff8 <SEND1>
	//}

	// Scan header(SOF)

	// Start of scan marker
	SEND1(0xFF);
   10414:	01003fc4 	movi	r4,255
   10418:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0xDA);
   1041c:	01003684 	movi	r4,218
   10420:	0010ff80 	call	10ff8 <SEND1>

	header_length = (UINT16)(6 + (number_of_components << 1));
   10424:	e0bffc83 	ldbu	r2,-14(fp)
   10428:	1085883a 	add	r2,r2,r2
   1042c:	10800184 	addi	r2,r2,6
   10430:	e0bffd0d 	sth	r2,-12(fp)

	// Scan header length
	SEND1((UINT8)(header_length >> 8));
   10434:	e0bffd0b 	ldhu	r2,-12(fp)
   10438:	1004d23a 	srli	r2,r2,8
   1043c:	10803fcc 	andi	r2,r2,255
   10440:	1009883a 	mov	r4,r2
   10444:	0010ff80 	call	10ff8 <SEND1>
	SEND1((UINT8)header_length);
   10448:	e0bffd0b 	ldhu	r2,-12(fp)
   1044c:	10803fcc 	andi	r2,r2,255
   10450:	1009883a 	mov	r4,r2
   10454:	0010ff80 	call	10ff8 <SEND1>

	// Ns
	SEND1(number_of_components);
   10458:	e0bffc83 	ldbu	r2,-14(fp)
   1045c:	1009883a 	mov	r4,r2
   10460:	0010ff80 	call	10ff8 <SEND1>
	//	*output_ptr++ = 0x01;
	//	*output_ptr++ = 0x00;
	// }
	// else
	//{
	SEND1(0x01);
   10464:	01000044 	movi	r4,1
   10468:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x00);
   1046c:	0009883a 	mov	r4,zero
   10470:	0010ff80 	call	10ff8 <SEND1>

	SEND1(0x02);
   10474:	01000084 	movi	r4,2
   10478:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x11);
   1047c:	01000444 	movi	r4,17
   10480:	0010ff80 	call	10ff8 <SEND1>

	SEND1(0x03);
   10484:	010000c4 	movi	r4,3
   10488:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x11);
   1048c:	01000444 	movi	r4,17
   10490:	0010ff80 	call	10ff8 <SEND1>
	//}

	SEND1(0x00);
   10494:	0009883a 	mov	r4,zero
   10498:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x3F);
   1049c:	01000fc4 	movi	r4,63
   104a0:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0x00);
   104a4:	0009883a 	mov	r4,zero
   104a8:	0010ff80 	call	10ff8 <SEND1>
}
   104ac:	e037883a 	mov	sp,fp
   104b0:	dfc00117 	ldw	ra,4(sp)
   104b4:	df000017 	ldw	fp,0(sp)
   104b8:	dec00204 	addi	sp,sp,8
   104bc:	f800283a 	ret

000104c0 <huffman>:
UINT32 lcode = 0;
UINT16 bitindex = 0;
INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

void huffman(UINT16 component)
{
   104c0:	defff104 	addi	sp,sp,-60
   104c4:	dfc00e15 	stw	ra,56(sp)
   104c8:	df000d15 	stw	fp,52(sp)
   104cc:	df000d04 	addi	fp,sp,52
   104d0:	2005883a 	mov	r2,r4
   104d4:	e0bfff0d 	sth	r2,-4(fp)
	UINT16 *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	// static INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

	INT16 Coeff, LastDc;
	UINT16 AbsCoeff, HuffCode, HuffSize, RunLength = 0, DataSize = 0, index;
   104d8:	e03ff98d 	sth	zero,-26(fp)
   104dc:	e03ffa0d 	sth	zero,-24(fp)
	UINT8 out;

	// Temp_Ptr = Temp;
	// Coeff = *Temp_Ptr++;
	// xt_iss_profile_disable();
	Coeff = (INT16)RECV2();
   104e0:	0010fbc0 	call	10fbc <RECV2>
   104e4:	e0bff80d 	sth	r2,-32(fp)
	// xt_iss_profile_enable();
	if (component == 1)
   104e8:	e0bfff0b 	ldhu	r2,-4(fp)
   104ec:	10800058 	cmpnei	r2,r2,1
   104f0:	1000111e 	bne	r2,zero,10538 <huffman+0x78>
	{
		DcCodeTable = luminance_dc_code_table;
   104f4:	00800074 	movhi	r2,1
   104f8:	109ad604 	addi	r2,r2,27480
   104fc:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = luminance_dc_size_table;
   10500:	00800074 	movhi	r2,1
   10504:	109adc04 	addi	r2,r2,27504
   10508:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = luminance_ac_code_table;
   1050c:	00800074 	movhi	r2,1
   10510:	109aee04 	addi	r2,r2,27576
   10514:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = luminance_ac_size_table;
   10518:	00800074 	movhi	r2,1
   1051c:	109b3f04 	addi	r2,r2,27900
   10520:	e0bff715 	stw	r2,-36(fp)

		LastDc = ldc1;
   10524:	d0a8c48b 	ldhu	r2,-23790(gp)
   10528:	e0bff88d 	sth	r2,-30(fp)
		ldc1 = Coeff;
   1052c:	e0bff80b 	ldhu	r2,-32(fp)
   10530:	d0a8c48d 	sth	r2,-23790(gp)
   10534:	00001806 	br	10598 <huffman+0xd8>
	}
	else
	{
		DcCodeTable = chrominance_dc_code_table;
   10538:	00800074 	movhi	r2,1
   1053c:	109ae204 	addi	r2,r2,27528
   10540:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = chrominance_dc_size_table;
   10544:	00800074 	movhi	r2,1
   10548:	109ae804 	addi	r2,r2,27552
   1054c:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = chrominance_ac_code_table;
   10550:	00800074 	movhi	r2,1
   10554:	109b9004 	addi	r2,r2,28224
   10558:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = chrominance_ac_size_table;
   1055c:	00800074 	movhi	r2,1
   10560:	109be104 	addi	r2,r2,28548
   10564:	e0bff715 	stw	r2,-36(fp)

		if (component == 2)
   10568:	e0bfff0b 	ldhu	r2,-4(fp)
   1056c:	10800098 	cmpnei	r2,r2,2
   10570:	1000051e 	bne	r2,zero,10588 <huffman+0xc8>
		{
			LastDc = ldc2;
   10574:	d0a8c50b 	ldhu	r2,-23788(gp)
   10578:	e0bff88d 	sth	r2,-30(fp)
			ldc2 = Coeff;
   1057c:	e0bff80b 	ldhu	r2,-32(fp)
   10580:	d0a8c50d 	sth	r2,-23788(gp)
   10584:	00000406 	br	10598 <huffman+0xd8>
		}
		else
		{
			LastDc = ldc3;
   10588:	d0a8c58b 	ldhu	r2,-23786(gp)
   1058c:	e0bff88d 	sth	r2,-30(fp)
			ldc3 = Coeff;
   10590:	e0bff80b 	ldhu	r2,-32(fp)
   10594:	d0a8c58d 	sth	r2,-23786(gp)
		}
	}

	Coeff -= LastDc;
   10598:	e0fff80b 	ldhu	r3,-32(fp)
   1059c:	e0bff88b 	ldhu	r2,-30(fp)
   105a0:	1885c83a 	sub	r2,r3,r2
   105a4:	e0bff80d 	sth	r2,-32(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   105a8:	e0bff80f 	ldh	r2,-32(fp)
   105ac:	1000060e 	bge	r2,zero,105c8 <huffman+0x108>
   105b0:	e0bff80b 	ldhu	r2,-32(fp)
   105b4:	0085c83a 	sub	r2,zero,r2
   105b8:	e0fff80b 	ldhu	r3,-32(fp)
   105bc:	18ffffc4 	addi	r3,r3,-1
   105c0:	e0fff80d 	sth	r3,-32(fp)
   105c4:	00000106 	br	105cc <huffman+0x10c>
   105c8:	e0bff80b 	ldhu	r2,-32(fp)
   105cc:	e0bff90d 	sth	r2,-28(fp)

	while (AbsCoeff != 0)
   105d0:	00000606 	br	105ec <huffman+0x12c>
	{
		AbsCoeff >>= 1;
   105d4:	e0bff90b 	ldhu	r2,-28(fp)
   105d8:	1004d07a 	srli	r2,r2,1
   105dc:	e0bff90d 	sth	r2,-28(fp)
		DataSize++;
   105e0:	e0bffa0b 	ldhu	r2,-24(fp)
   105e4:	10800044 	addi	r2,r2,1
   105e8:	e0bffa0d 	sth	r2,-24(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0)
   105ec:	e0bff90b 	ldhu	r2,-28(fp)
   105f0:	103ff81e 	bne	r2,zero,105d4 <huffman+0x114>
	{
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable[DataSize];
   105f4:	e0bffa0b 	ldhu	r2,-24(fp)
   105f8:	1085883a 	add	r2,r2,r2
   105fc:	e0fff417 	ldw	r3,-48(fp)
   10600:	1885883a 	add	r2,r3,r2
   10604:	1080000b 	ldhu	r2,0(r2)
   10608:	e0bffa8d 	sth	r2,-22(fp)
	HuffSize = DcSizeTable[DataSize];
   1060c:	e0bffa0b 	ldhu	r2,-24(fp)
   10610:	1085883a 	add	r2,r2,r2
   10614:	e0fff517 	ldw	r3,-44(fp)
   10618:	1885883a 	add	r2,r3,r2
   1061c:	1080000b 	ldhu	r2,0(r2)
   10620:	e0bffb0d 	sth	r2,-20(fp)

	Coeff &= (1 << DataSize) - 1;
   10624:	e0bffa0b 	ldhu	r2,-24(fp)
   10628:	00c00044 	movi	r3,1
   1062c:	1884983a 	sll	r2,r3,r2
   10630:	10bfffc4 	addi	r2,r2,-1
   10634:	1007883a 	mov	r3,r2
   10638:	e0bff80b 	ldhu	r2,-32(fp)
   1063c:	1884703a 	and	r2,r3,r2
   10640:	e0bff80d 	sth	r2,-32(fp)
	data = (HuffCode << DataSize) | Coeff;
   10644:	e0fffa8b 	ldhu	r3,-22(fp)
   10648:	e0bffa0b 	ldhu	r2,-24(fp)
   1064c:	1886983a 	sll	r3,r3,r2
   10650:	e0bff80f 	ldh	r2,-32(fp)
   10654:	1884b03a 	or	r2,r3,r2
   10658:	e0bffc15 	stw	r2,-16(fp)
	numbits = HuffSize + DataSize;
   1065c:	e0fffb0b 	ldhu	r3,-20(fp)
   10660:	e0bffa0b 	ldhu	r2,-24(fp)
   10664:	1885883a 	add	r2,r3,r2
   10668:	e0bffd0d 	sth	r2,-12(fp)

	PUTBITS
   1066c:	d0e8c40b 	ldhu	r3,-23792(gp)
   10670:	e0bffd0b 	ldhu	r2,-12(fp)
   10674:	1885883a 	add	r2,r3,r2
   10678:	10bff804 	addi	r2,r2,-32
   1067c:	e0bffd8d 	sth	r2,-10(fp)
   10680:	e0bffd8f 	ldh	r2,-10(fp)
   10684:	10000b0e 	bge	r2,zero,106b4 <huffman+0x1f4>
   10688:	d0e8c317 	ldw	r3,-23796(gp)
   1068c:	e0bffd0b 	ldhu	r2,-12(fp)
   10690:	1886983a 	sll	r3,r3,r2
   10694:	e0bffc17 	ldw	r2,-16(fp)
   10698:	1884b03a 	or	r2,r3,r2
   1069c:	d0a8c315 	stw	r2,-23796(gp)
   106a0:	d0e8c40b 	ldhu	r3,-23792(gp)
   106a4:	e0bffd0b 	ldhu	r2,-12(fp)
   106a8:	1885883a 	add	r2,r3,r2
   106ac:	d0a8c40d 	sth	r2,-23792(gp)
   106b0:	00003a06 	br	1079c <huffman+0x2dc>
   106b4:	d0e8c317 	ldw	r3,-23796(gp)
   106b8:	d0a8c40b 	ldhu	r2,-23792(gp)
   106bc:	10bfffcc 	andi	r2,r2,65535
   106c0:	01000804 	movi	r4,32
   106c4:	2085c83a 	sub	r2,r4,r2
   106c8:	1886983a 	sll	r3,r3,r2
   106cc:	e0bffd8f 	ldh	r2,-10(fp)
   106d0:	e13ffc17 	ldw	r4,-16(fp)
   106d4:	2084d83a 	srl	r2,r4,r2
   106d8:	1884b03a 	or	r2,r3,r2
   106dc:	d0a8c315 	stw	r2,-23796(gp)
   106e0:	d0a8c317 	ldw	r2,-23796(gp)
   106e4:	1004d63a 	srli	r2,r2,24
   106e8:	e0bffe05 	stb	r2,-8(fp)
   106ec:	e0bffe03 	ldbu	r2,-8(fp)
   106f0:	1009883a 	mov	r4,r2
   106f4:	0010ff80 	call	10ff8 <SEND1>
   106f8:	e0bffe03 	ldbu	r2,-8(fp)
   106fc:	10803fd8 	cmpnei	r2,r2,255
   10700:	1000021e 	bne	r2,zero,1070c <huffman+0x24c>
   10704:	0009883a 	mov	r4,zero
   10708:	0010ff80 	call	10ff8 <SEND1>
   1070c:	d0a8c317 	ldw	r2,-23796(gp)
   10710:	1004d43a 	srli	r2,r2,16
   10714:	e0bffe05 	stb	r2,-8(fp)
   10718:	e0bffe03 	ldbu	r2,-8(fp)
   1071c:	1009883a 	mov	r4,r2
   10720:	0010ff80 	call	10ff8 <SEND1>
   10724:	e0bffe03 	ldbu	r2,-8(fp)
   10728:	10803fd8 	cmpnei	r2,r2,255
   1072c:	1000021e 	bne	r2,zero,10738 <huffman+0x278>
   10730:	0009883a 	mov	r4,zero
   10734:	0010ff80 	call	10ff8 <SEND1>
   10738:	d0a8c317 	ldw	r2,-23796(gp)
   1073c:	1004d23a 	srli	r2,r2,8
   10740:	e0bffe05 	stb	r2,-8(fp)
   10744:	e0bffe03 	ldbu	r2,-8(fp)
   10748:	1009883a 	mov	r4,r2
   1074c:	0010ff80 	call	10ff8 <SEND1>
   10750:	e0bffe03 	ldbu	r2,-8(fp)
   10754:	10803fd8 	cmpnei	r2,r2,255
   10758:	1000021e 	bne	r2,zero,10764 <huffman+0x2a4>
   1075c:	0009883a 	mov	r4,zero
   10760:	0010ff80 	call	10ff8 <SEND1>
   10764:	d0a8c317 	ldw	r2,-23796(gp)
   10768:	e0bffe05 	stb	r2,-8(fp)
   1076c:	e0bffe03 	ldbu	r2,-8(fp)
   10770:	1009883a 	mov	r4,r2
   10774:	0010ff80 	call	10ff8 <SEND1>
   10778:	e0bffe03 	ldbu	r2,-8(fp)
   1077c:	10803fd8 	cmpnei	r2,r2,255
   10780:	1000021e 	bne	r2,zero,1078c <huffman+0x2cc>
   10784:	0009883a 	mov	r4,zero
   10788:	0010ff80 	call	10ff8 <SEND1>
   1078c:	e0bffc17 	ldw	r2,-16(fp)
   10790:	d0a8c315 	stw	r2,-23796(gp)
   10794:	e0bffd8b 	ldhu	r2,-10(fp)
   10798:	d0a8c40d 	sth	r2,-23792(gp)

	for (i = 63; i > 0; i--)
   1079c:	00800fc4 	movi	r2,63
   107a0:	e0bff30d 	sth	r2,-52(fp)
   107a4:	0000f906 	br	10b8c <huffman+0x6cc>
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
   107a8:	0010fbc0 	call	10fbc <RECV2>
   107ac:	e0bff80d 	sth	r2,-32(fp)
   107b0:	e0bff80f 	ldh	r2,-32(fp)
   107b4:	1000ef26 	beq	r2,zero,10b74 <huffman+0x6b4>
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   107b8:	00005706 	br	10918 <huffman+0x458>
			{
				RunLength -= 16;
   107bc:	e0bff98b 	ldhu	r2,-26(fp)
   107c0:	10bffc04 	addi	r2,r2,-16
   107c4:	e0bff98d 	sth	r2,-26(fp)
				data = AcCodeTable[161];
   107c8:	e0bff617 	ldw	r2,-40(fp)
   107cc:	10805084 	addi	r2,r2,322
   107d0:	1080000b 	ldhu	r2,0(r2)
   107d4:	10bfffcc 	andi	r2,r2,65535
   107d8:	e0bffc15 	stw	r2,-16(fp)
				numbits = AcSizeTable[161];
   107dc:	e0bff717 	ldw	r2,-36(fp)
   107e0:	1080508b 	ldhu	r2,322(r2)
   107e4:	e0bffd0d 	sth	r2,-12(fp)
				PUTBITS
   107e8:	d0e8c40b 	ldhu	r3,-23792(gp)
   107ec:	e0bffd0b 	ldhu	r2,-12(fp)
   107f0:	1885883a 	add	r2,r3,r2
   107f4:	10bff804 	addi	r2,r2,-32
   107f8:	e0bffd8d 	sth	r2,-10(fp)
   107fc:	e0bffd8f 	ldh	r2,-10(fp)
   10800:	10000b0e 	bge	r2,zero,10830 <huffman+0x370>
   10804:	d0e8c317 	ldw	r3,-23796(gp)
   10808:	e0bffd0b 	ldhu	r2,-12(fp)
   1080c:	1886983a 	sll	r3,r3,r2
   10810:	e0bffc17 	ldw	r2,-16(fp)
   10814:	1884b03a 	or	r2,r3,r2
   10818:	d0a8c315 	stw	r2,-23796(gp)
   1081c:	d0e8c40b 	ldhu	r3,-23792(gp)
   10820:	e0bffd0b 	ldhu	r2,-12(fp)
   10824:	1885883a 	add	r2,r3,r2
   10828:	d0a8c40d 	sth	r2,-23792(gp)
   1082c:	00003a06 	br	10918 <huffman+0x458>
   10830:	d0e8c317 	ldw	r3,-23796(gp)
   10834:	d0a8c40b 	ldhu	r2,-23792(gp)
   10838:	10bfffcc 	andi	r2,r2,65535
   1083c:	01000804 	movi	r4,32
   10840:	2085c83a 	sub	r2,r4,r2
   10844:	1886983a 	sll	r3,r3,r2
   10848:	e0bffd8f 	ldh	r2,-10(fp)
   1084c:	e13ffc17 	ldw	r4,-16(fp)
   10850:	2084d83a 	srl	r2,r4,r2
   10854:	1884b03a 	or	r2,r3,r2
   10858:	d0a8c315 	stw	r2,-23796(gp)
   1085c:	d0a8c317 	ldw	r2,-23796(gp)
   10860:	1004d63a 	srli	r2,r2,24
   10864:	e0bffe05 	stb	r2,-8(fp)
   10868:	e0bffe03 	ldbu	r2,-8(fp)
   1086c:	1009883a 	mov	r4,r2
   10870:	0010ff80 	call	10ff8 <SEND1>
   10874:	e0bffe03 	ldbu	r2,-8(fp)
   10878:	10803fd8 	cmpnei	r2,r2,255
   1087c:	1000021e 	bne	r2,zero,10888 <huffman+0x3c8>
   10880:	0009883a 	mov	r4,zero
   10884:	0010ff80 	call	10ff8 <SEND1>
   10888:	d0a8c317 	ldw	r2,-23796(gp)
   1088c:	1004d43a 	srli	r2,r2,16
   10890:	e0bffe05 	stb	r2,-8(fp)
   10894:	e0bffe03 	ldbu	r2,-8(fp)
   10898:	1009883a 	mov	r4,r2
   1089c:	0010ff80 	call	10ff8 <SEND1>
   108a0:	e0bffe03 	ldbu	r2,-8(fp)
   108a4:	10803fd8 	cmpnei	r2,r2,255
   108a8:	1000021e 	bne	r2,zero,108b4 <huffman+0x3f4>
   108ac:	0009883a 	mov	r4,zero
   108b0:	0010ff80 	call	10ff8 <SEND1>
   108b4:	d0a8c317 	ldw	r2,-23796(gp)
   108b8:	1004d23a 	srli	r2,r2,8
   108bc:	e0bffe05 	stb	r2,-8(fp)
   108c0:	e0bffe03 	ldbu	r2,-8(fp)
   108c4:	1009883a 	mov	r4,r2
   108c8:	0010ff80 	call	10ff8 <SEND1>
   108cc:	e0bffe03 	ldbu	r2,-8(fp)
   108d0:	10803fd8 	cmpnei	r2,r2,255
   108d4:	1000021e 	bne	r2,zero,108e0 <huffman+0x420>
   108d8:	0009883a 	mov	r4,zero
   108dc:	0010ff80 	call	10ff8 <SEND1>
   108e0:	d0a8c317 	ldw	r2,-23796(gp)
   108e4:	e0bffe05 	stb	r2,-8(fp)
   108e8:	e0bffe03 	ldbu	r2,-8(fp)
   108ec:	1009883a 	mov	r4,r2
   108f0:	0010ff80 	call	10ff8 <SEND1>
   108f4:	e0bffe03 	ldbu	r2,-8(fp)
   108f8:	10803fd8 	cmpnei	r2,r2,255
   108fc:	1000021e 	bne	r2,zero,10908 <huffman+0x448>
   10900:	0009883a 	mov	r4,zero
   10904:	0010ff80 	call	10ff8 <SEND1>
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	d0a8c315 	stw	r2,-23796(gp)
   10910:	e0bffd8b 	ldhu	r2,-10(fp)
   10914:	d0a8c40d 	sth	r2,-23792(gp)
	for (i = 63; i > 0; i--)
	{ // xt_iss_profile_disable();
		// if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)RECV2()) != 0)
		{ // xt_iss_profile_enable();
			while (RunLength > 15)
   10918:	e0bff98b 	ldhu	r2,-26(fp)
   1091c:	10800428 	cmpgeui	r2,r2,16
   10920:	103fa61e 	bne	r2,zero,107bc <huffman+0x2fc>
				data = AcCodeTable[161];
				numbits = AcSizeTable[161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   10924:	e0bff80f 	ldh	r2,-32(fp)
   10928:	1000060e 	bge	r2,zero,10944 <huffman+0x484>
   1092c:	e0bff80b 	ldhu	r2,-32(fp)
   10930:	0085c83a 	sub	r2,zero,r2
   10934:	e0fff80b 	ldhu	r3,-32(fp)
   10938:	18ffffc4 	addi	r3,r3,-1
   1093c:	e0fff80d 	sth	r3,-32(fp)
   10940:	00000106 	br	10948 <huffman+0x488>
   10944:	e0bff80b 	ldhu	r2,-32(fp)
   10948:	e0bff90d 	sth	r2,-28(fp)

			if (AbsCoeff >> 8 == 0)
   1094c:	e0bff90b 	ldhu	r2,-28(fp)
   10950:	1004d23a 	srli	r2,r2,8
   10954:	10bfffcc 	andi	r2,r2,65535
   10958:	1000081e 	bne	r2,zero,1097c <huffman+0x4bc>
				DataSize = bitsize[AbsCoeff];
   1095c:	e0bff90b 	ldhu	r2,-28(fp)
   10960:	00c00074 	movhi	r3,1
   10964:	18dc3204 	addi	r3,r3,28872
   10968:	1885883a 	add	r2,r3,r2
   1096c:	10800003 	ldbu	r2,0(r2)
   10970:	10803fcc 	andi	r2,r2,255
   10974:	e0bffa0d 	sth	r2,-24(fp)
   10978:	00000a06 	br	109a4 <huffman+0x4e4>
			else
				DataSize = bitsize[AbsCoeff >> 8] + 8;
   1097c:	e0bff90b 	ldhu	r2,-28(fp)
   10980:	1004d23a 	srli	r2,r2,8
   10984:	10bfffcc 	andi	r2,r2,65535
   10988:	00c00074 	movhi	r3,1
   1098c:	18dc3204 	addi	r3,r3,28872
   10990:	1885883a 	add	r2,r3,r2
   10994:	10800003 	ldbu	r2,0(r2)
   10998:	10803fcc 	andi	r2,r2,255
   1099c:	10800204 	addi	r2,r2,8
   109a0:	e0bffa0d 	sth	r2,-24(fp)

			index = RunLength * 10 + DataSize;
   109a4:	e0bff98b 	ldhu	r2,-26(fp)
   109a8:	1009883a 	mov	r4,r2
   109ac:	01400284 	movi	r5,10
   109b0:	00112c80 	call	112c8 <__mulsi3>
   109b4:	1007883a 	mov	r3,r2
   109b8:	e0bffa0b 	ldhu	r2,-24(fp)
   109bc:	1885883a 	add	r2,r3,r2
   109c0:	e0bffe8d 	sth	r2,-6(fp)
			HuffCode = AcCodeTable[index];
   109c4:	e0bffe8b 	ldhu	r2,-6(fp)
   109c8:	1085883a 	add	r2,r2,r2
   109cc:	e0fff617 	ldw	r3,-40(fp)
   109d0:	1885883a 	add	r2,r3,r2
   109d4:	1080000b 	ldhu	r2,0(r2)
   109d8:	e0bffa8d 	sth	r2,-22(fp)
			HuffSize = AcSizeTable[index];
   109dc:	e0bffe8b 	ldhu	r2,-6(fp)
   109e0:	1085883a 	add	r2,r2,r2
   109e4:	e0fff717 	ldw	r3,-36(fp)
   109e8:	1885883a 	add	r2,r3,r2
   109ec:	1080000b 	ldhu	r2,0(r2)
   109f0:	e0bffb0d 	sth	r2,-20(fp)

			Coeff &= (1 << DataSize) - 1;
   109f4:	e0bffa0b 	ldhu	r2,-24(fp)
   109f8:	00c00044 	movi	r3,1
   109fc:	1884983a 	sll	r2,r3,r2
   10a00:	10bfffc4 	addi	r2,r2,-1
   10a04:	1007883a 	mov	r3,r2
   10a08:	e0bff80b 	ldhu	r2,-32(fp)
   10a0c:	1884703a 	and	r2,r3,r2
   10a10:	e0bff80d 	sth	r2,-32(fp)
			data = (HuffCode << DataSize) | Coeff;
   10a14:	e0fffa8b 	ldhu	r3,-22(fp)
   10a18:	e0bffa0b 	ldhu	r2,-24(fp)
   10a1c:	1886983a 	sll	r3,r3,r2
   10a20:	e0bff80f 	ldh	r2,-32(fp)
   10a24:	1884b03a 	or	r2,r3,r2
   10a28:	e0bffc15 	stw	r2,-16(fp)
			numbits = HuffSize + DataSize;
   10a2c:	e0fffb0b 	ldhu	r3,-20(fp)
   10a30:	e0bffa0b 	ldhu	r2,-24(fp)
   10a34:	1885883a 	add	r2,r3,r2
   10a38:	e0bffd0d 	sth	r2,-12(fp)

			PUTBITS
   10a3c:	d0e8c40b 	ldhu	r3,-23792(gp)
   10a40:	e0bffd0b 	ldhu	r2,-12(fp)
   10a44:	1885883a 	add	r2,r3,r2
   10a48:	10bff804 	addi	r2,r2,-32
   10a4c:	e0bffd8d 	sth	r2,-10(fp)
   10a50:	e0bffd8f 	ldh	r2,-10(fp)
   10a54:	10000b0e 	bge	r2,zero,10a84 <huffman+0x5c4>
   10a58:	d0e8c317 	ldw	r3,-23796(gp)
   10a5c:	e0bffd0b 	ldhu	r2,-12(fp)
   10a60:	1886983a 	sll	r3,r3,r2
   10a64:	e0bffc17 	ldw	r2,-16(fp)
   10a68:	1884b03a 	or	r2,r3,r2
   10a6c:	d0a8c315 	stw	r2,-23796(gp)
   10a70:	d0e8c40b 	ldhu	r3,-23792(gp)
   10a74:	e0bffd0b 	ldhu	r2,-12(fp)
   10a78:	1885883a 	add	r2,r3,r2
   10a7c:	d0a8c40d 	sth	r2,-23792(gp)
   10a80:	00003a06 	br	10b6c <huffman+0x6ac>
   10a84:	d0e8c317 	ldw	r3,-23796(gp)
   10a88:	d0a8c40b 	ldhu	r2,-23792(gp)
   10a8c:	10bfffcc 	andi	r2,r2,65535
   10a90:	01000804 	movi	r4,32
   10a94:	2085c83a 	sub	r2,r4,r2
   10a98:	1886983a 	sll	r3,r3,r2
   10a9c:	e0bffd8f 	ldh	r2,-10(fp)
   10aa0:	e13ffc17 	ldw	r4,-16(fp)
   10aa4:	2084d83a 	srl	r2,r4,r2
   10aa8:	1884b03a 	or	r2,r3,r2
   10aac:	d0a8c315 	stw	r2,-23796(gp)
   10ab0:	d0a8c317 	ldw	r2,-23796(gp)
   10ab4:	1004d63a 	srli	r2,r2,24
   10ab8:	e0bffe05 	stb	r2,-8(fp)
   10abc:	e0bffe03 	ldbu	r2,-8(fp)
   10ac0:	1009883a 	mov	r4,r2
   10ac4:	0010ff80 	call	10ff8 <SEND1>
   10ac8:	e0bffe03 	ldbu	r2,-8(fp)
   10acc:	10803fd8 	cmpnei	r2,r2,255
   10ad0:	1000021e 	bne	r2,zero,10adc <huffman+0x61c>
   10ad4:	0009883a 	mov	r4,zero
   10ad8:	0010ff80 	call	10ff8 <SEND1>
   10adc:	d0a8c317 	ldw	r2,-23796(gp)
   10ae0:	1004d43a 	srli	r2,r2,16
   10ae4:	e0bffe05 	stb	r2,-8(fp)
   10ae8:	e0bffe03 	ldbu	r2,-8(fp)
   10aec:	1009883a 	mov	r4,r2
   10af0:	0010ff80 	call	10ff8 <SEND1>
   10af4:	e0bffe03 	ldbu	r2,-8(fp)
   10af8:	10803fd8 	cmpnei	r2,r2,255
   10afc:	1000021e 	bne	r2,zero,10b08 <huffman+0x648>
   10b00:	0009883a 	mov	r4,zero
   10b04:	0010ff80 	call	10ff8 <SEND1>
   10b08:	d0a8c317 	ldw	r2,-23796(gp)
   10b0c:	1004d23a 	srli	r2,r2,8
   10b10:	e0bffe05 	stb	r2,-8(fp)
   10b14:	e0bffe03 	ldbu	r2,-8(fp)
   10b18:	1009883a 	mov	r4,r2
   10b1c:	0010ff80 	call	10ff8 <SEND1>
   10b20:	e0bffe03 	ldbu	r2,-8(fp)
   10b24:	10803fd8 	cmpnei	r2,r2,255
   10b28:	1000021e 	bne	r2,zero,10b34 <huffman+0x674>
   10b2c:	0009883a 	mov	r4,zero
   10b30:	0010ff80 	call	10ff8 <SEND1>
   10b34:	d0a8c317 	ldw	r2,-23796(gp)
   10b38:	e0bffe05 	stb	r2,-8(fp)
   10b3c:	e0bffe03 	ldbu	r2,-8(fp)
   10b40:	1009883a 	mov	r4,r2
   10b44:	0010ff80 	call	10ff8 <SEND1>
   10b48:	e0bffe03 	ldbu	r2,-8(fp)
   10b4c:	10803fd8 	cmpnei	r2,r2,255
   10b50:	1000021e 	bne	r2,zero,10b5c <huffman+0x69c>
   10b54:	0009883a 	mov	r4,zero
   10b58:	0010ff80 	call	10ff8 <SEND1>
   10b5c:	e0bffc17 	ldw	r2,-16(fp)
   10b60:	d0a8c315 	stw	r2,-23796(gp)
   10b64:	e0bffd8b 	ldhu	r2,-10(fp)
   10b68:	d0a8c40d 	sth	r2,-23792(gp)
			RunLength = 0;
   10b6c:	e03ff98d 	sth	zero,-26(fp)
   10b70:	00000306 	br	10b80 <huffman+0x6c0>
		}
		else
			RunLength++;
   10b74:	e0bff98b 	ldhu	r2,-26(fp)
   10b78:	10800044 	addi	r2,r2,1
   10b7c:	e0bff98d 	sth	r2,-26(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i = 63; i > 0; i--)
   10b80:	e0bff30b 	ldhu	r2,-52(fp)
   10b84:	10bfffc4 	addi	r2,r2,-1
   10b88:	e0bff30d 	sth	r2,-52(fp)
   10b8c:	e0bff30b 	ldhu	r2,-52(fp)
   10b90:	103f051e 	bne	r2,zero,107a8 <huffman+0x2e8>
		}
		else
			RunLength++;
	}
	// xt_iss_profile_enable();
	if (RunLength != 0)
   10b94:	e0bff98b 	ldhu	r2,-26(fp)
   10b98:	10005326 	beq	r2,zero,10ce8 <huffman+0x828>
	{
		data = AcCodeTable[0];
   10b9c:	e0bff617 	ldw	r2,-40(fp)
   10ba0:	1080000b 	ldhu	r2,0(r2)
   10ba4:	10bfffcc 	andi	r2,r2,65535
   10ba8:	e0bffc15 	stw	r2,-16(fp)
		numbits = AcSizeTable[0];
   10bac:	e0bff717 	ldw	r2,-36(fp)
   10bb0:	1080000b 	ldhu	r2,0(r2)
   10bb4:	e0bffd0d 	sth	r2,-12(fp)
		PUTBITS
   10bb8:	d0e8c40b 	ldhu	r3,-23792(gp)
   10bbc:	e0bffd0b 	ldhu	r2,-12(fp)
   10bc0:	1885883a 	add	r2,r3,r2
   10bc4:	10bff804 	addi	r2,r2,-32
   10bc8:	e0bffd8d 	sth	r2,-10(fp)
   10bcc:	e0bffd8f 	ldh	r2,-10(fp)
   10bd0:	10000b0e 	bge	r2,zero,10c00 <huffman+0x740>
   10bd4:	d0e8c317 	ldw	r3,-23796(gp)
   10bd8:	e0bffd0b 	ldhu	r2,-12(fp)
   10bdc:	1886983a 	sll	r3,r3,r2
   10be0:	e0bffc17 	ldw	r2,-16(fp)
   10be4:	1884b03a 	or	r2,r3,r2
   10be8:	d0a8c315 	stw	r2,-23796(gp)
   10bec:	d0e8c40b 	ldhu	r3,-23792(gp)
   10bf0:	e0bffd0b 	ldhu	r2,-12(fp)
   10bf4:	1885883a 	add	r2,r3,r2
   10bf8:	d0a8c40d 	sth	r2,-23792(gp)
   10bfc:	00003a06 	br	10ce8 <huffman+0x828>
   10c00:	d0e8c317 	ldw	r3,-23796(gp)
   10c04:	d0a8c40b 	ldhu	r2,-23792(gp)
   10c08:	10bfffcc 	andi	r2,r2,65535
   10c0c:	01000804 	movi	r4,32
   10c10:	2085c83a 	sub	r2,r4,r2
   10c14:	1886983a 	sll	r3,r3,r2
   10c18:	e0bffd8f 	ldh	r2,-10(fp)
   10c1c:	e13ffc17 	ldw	r4,-16(fp)
   10c20:	2084d83a 	srl	r2,r4,r2
   10c24:	1884b03a 	or	r2,r3,r2
   10c28:	d0a8c315 	stw	r2,-23796(gp)
   10c2c:	d0a8c317 	ldw	r2,-23796(gp)
   10c30:	1004d63a 	srli	r2,r2,24
   10c34:	e0bffe05 	stb	r2,-8(fp)
   10c38:	e0bffe03 	ldbu	r2,-8(fp)
   10c3c:	1009883a 	mov	r4,r2
   10c40:	0010ff80 	call	10ff8 <SEND1>
   10c44:	e0bffe03 	ldbu	r2,-8(fp)
   10c48:	10803fd8 	cmpnei	r2,r2,255
   10c4c:	1000021e 	bne	r2,zero,10c58 <huffman+0x798>
   10c50:	0009883a 	mov	r4,zero
   10c54:	0010ff80 	call	10ff8 <SEND1>
   10c58:	d0a8c317 	ldw	r2,-23796(gp)
   10c5c:	1004d43a 	srli	r2,r2,16
   10c60:	e0bffe05 	stb	r2,-8(fp)
   10c64:	e0bffe03 	ldbu	r2,-8(fp)
   10c68:	1009883a 	mov	r4,r2
   10c6c:	0010ff80 	call	10ff8 <SEND1>
   10c70:	e0bffe03 	ldbu	r2,-8(fp)
   10c74:	10803fd8 	cmpnei	r2,r2,255
   10c78:	1000021e 	bne	r2,zero,10c84 <huffman+0x7c4>
   10c7c:	0009883a 	mov	r4,zero
   10c80:	0010ff80 	call	10ff8 <SEND1>
   10c84:	d0a8c317 	ldw	r2,-23796(gp)
   10c88:	1004d23a 	srli	r2,r2,8
   10c8c:	e0bffe05 	stb	r2,-8(fp)
   10c90:	e0bffe03 	ldbu	r2,-8(fp)
   10c94:	1009883a 	mov	r4,r2
   10c98:	0010ff80 	call	10ff8 <SEND1>
   10c9c:	e0bffe03 	ldbu	r2,-8(fp)
   10ca0:	10803fd8 	cmpnei	r2,r2,255
   10ca4:	1000021e 	bne	r2,zero,10cb0 <huffman+0x7f0>
   10ca8:	0009883a 	mov	r4,zero
   10cac:	0010ff80 	call	10ff8 <SEND1>
   10cb0:	d0a8c317 	ldw	r2,-23796(gp)
   10cb4:	e0bffe05 	stb	r2,-8(fp)
   10cb8:	e0bffe03 	ldbu	r2,-8(fp)
   10cbc:	1009883a 	mov	r4,r2
   10cc0:	0010ff80 	call	10ff8 <SEND1>
   10cc4:	e0bffe03 	ldbu	r2,-8(fp)
   10cc8:	10803fd8 	cmpnei	r2,r2,255
   10ccc:	1000021e 	bne	r2,zero,10cd8 <huffman+0x818>
   10cd0:	0009883a 	mov	r4,zero
   10cd4:	0010ff80 	call	10ff8 <SEND1>
   10cd8:	e0bffc17 	ldw	r2,-16(fp)
   10cdc:	d0a8c315 	stw	r2,-23796(gp)
   10ce0:	e0bffd8b 	ldhu	r2,-10(fp)
   10ce4:	d0a8c40d 	sth	r2,-23792(gp)
	}
}
   10ce8:	e037883a 	mov	sp,fp
   10cec:	dfc00117 	ldw	ra,4(sp)
   10cf0:	df000017 	ldw	fp,0(sp)
   10cf4:	dec00204 	addi	sp,sp,8
   10cf8:	f800283a 	ret

00010cfc <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream(void)
{
   10cfc:	defffb04 	addi	sp,sp,-20
   10d00:	dfc00415 	stw	ra,16(sp)
   10d04:	df000315 	stw	fp,12(sp)
   10d08:	df000304 	addi	fp,sp,12
	UINT16 i, count;
	UINT8 *ptr;

	UINT8 out;

	if (bitindex > 0)
   10d0c:	d0a8c40b 	ldhu	r2,-23792(gp)
   10d10:	10bfffcc 	andi	r2,r2,65535
   10d14:	10002526 	beq	r2,zero,10dac <close_bitstream+0xb0>
	{
		lcode <<= (32 - bitindex);
   10d18:	d0e8c317 	ldw	r3,-23796(gp)
   10d1c:	d0a8c40b 	ldhu	r2,-23792(gp)
   10d20:	10bfffcc 	andi	r2,r2,65535
   10d24:	01000804 	movi	r4,32
   10d28:	2085c83a 	sub	r2,r4,r2
   10d2c:	1884983a 	sll	r2,r3,r2
   10d30:	d0a8c315 	stw	r2,-23796(gp)
		count = (bitindex + 7) >> 3;
   10d34:	d0a8c40b 	ldhu	r2,-23792(gp)
   10d38:	10bfffcc 	andi	r2,r2,65535
   10d3c:	108001c4 	addi	r2,r2,7
   10d40:	1005d0fa 	srai	r2,r2,3
   10d44:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (UINT8 *)&lcode + 3;
   10d48:	008000b4 	movhi	r2,2
   10d4c:	10ac40c4 	addi	r2,r2,-20221
   10d50:	e0bffe15 	stw	r2,-8(fp)

		for (i = count; i > 0; i--)
   10d54:	e0bfff0b 	ldhu	r2,-4(fp)
   10d58:	e0bffd0d 	sth	r2,-12(fp)
   10d5c:	00001106 	br	10da4 <close_bitstream+0xa8>
		{
			out = *ptr--;
   10d60:	e0bffe17 	ldw	r2,-8(fp)
   10d64:	10800003 	ldbu	r2,0(r2)
   10d68:	e0bfff85 	stb	r2,-2(fp)
   10d6c:	e0bffe17 	ldw	r2,-8(fp)
   10d70:	10bfffc4 	addi	r2,r2,-1
   10d74:	e0bffe15 	stw	r2,-8(fp)
			SEND1(out);
   10d78:	e0bfff83 	ldbu	r2,-2(fp)
   10d7c:	1009883a 	mov	r4,r2
   10d80:	0010ff80 	call	10ff8 <SEND1>
			if (out == 0xff)
   10d84:	e0bfff83 	ldbu	r2,-2(fp)
   10d88:	10803fd8 	cmpnei	r2,r2,255
   10d8c:	1000021e 	bne	r2,zero,10d98 <close_bitstream+0x9c>
				SEND1(0);
   10d90:	0009883a 	mov	r4,zero
   10d94:	0010ff80 	call	10ff8 <SEND1>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (UINT8 *)&lcode + 3;

		for (i = count; i > 0; i--)
   10d98:	e0bffd0b 	ldhu	r2,-12(fp)
   10d9c:	10bfffc4 	addi	r2,r2,-1
   10da0:	e0bffd0d 	sth	r2,-12(fp)
   10da4:	e0bffd0b 	ldhu	r2,-12(fp)
   10da8:	103fed1e 	bne	r2,zero,10d60 <close_bitstream+0x64>
				SEND1(0);
		}
	}

	// End of image marker
	SEND1(0xFF);
   10dac:	01003fc4 	movi	r4,255
   10db0:	0010ff80 	call	10ff8 <SEND1>
	SEND1(0xD9);
   10db4:	01003644 	movi	r4,217
   10db8:	0010ff80 	call	10ff8 <SEND1>
}
   10dbc:	e037883a 	mov	sp,fp
   10dc0:	dfc00117 	ldw	ra,4(sp)
   10dc4:	df000017 	ldw	fp,0(sp)
   10dc8:	dec00204 	addi	sp,sp,8
   10dcc:	f800283a 	ret

00010dd0 <main>:

int main(void)
{
   10dd0:	defffb04 	addi	sp,sp,-20
   10dd4:	dfc00415 	stw	ra,16(sp)
   10dd8:	df000315 	stw	fp,12(sp)
   10ddc:	df000304 	addi	fp,sp,12
	

	while (1)
	{

		lcode = 0;
   10de0:	d028c315 	stw	zero,-23796(gp)
		bitindex = 0;
   10de4:	d028c40d 	sth	zero,-23792(gp)
		ldc1 = 0;
   10de8:	d028c48d 	sth	zero,-23790(gp)
		ldc2 = 0;
   10dec:	d028c50d 	sth	zero,-23788(gp)
		ldc3 = 0;
   10df0:	d028c58d 	sth	zero,-23786(gp)

		UINT32 width = (UINT32)RECV1();
   10df4:	0010f800 	call	10f80 <RECV1>
   10df8:	e0bffe15 	stw	r2,-8(fp)
		UINT32 height = (UINT32)RECV1();
   10dfc:	0010f800 	call	10f80 <RECV1>
   10e00:	e0bfff15 	stw	r2,-4(fp)
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
   10e04:	0010f800 	call	10f80 <RECV1>
   10e08:	e0bffd15 	stw	r2,-12(fp)
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
   10e0c:	e13ffe17 	ldw	r4,-8(fp)
   10e10:	e17fff17 	ldw	r5,-4(fp)
   10e14:	00101f40 	call	101f4 <write_markers>
		// asm("dummy");
		for (; count > 0; count--)
   10e18:	00000906 	br	10e40 <main+0x70>
		{
			huffman(1);
   10e1c:	01000044 	movi	r4,1
   10e20:	00104c00 	call	104c0 <huffman>
			huffman(2);
   10e24:	01000084 	movi	r4,2
   10e28:	00104c00 	call	104c0 <huffman>
			huffman(3);
   10e2c:	010000c4 	movi	r4,3
   10e30:	00104c00 	call	104c0 <huffman>
		UINT32 height = (UINT32)RECV1();
		UINT32 count = (UINT32)RECV1(); // xt_iss_profile_enable();
		// fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width, height);
		// asm("dummy");
		for (; count > 0; count--)
   10e34:	e0bffd17 	ldw	r2,-12(fp)
   10e38:	10bfffc4 	addi	r2,r2,-1
   10e3c:	e0bffd15 	stw	r2,-12(fp)
   10e40:	e0bffd17 	ldw	r2,-12(fp)
   10e44:	103ff51e 	bne	r2,zero,10e1c <main+0x4c>
			huffman(3);
			//	#pragma flush //added by haris
			// asm("dummy");
		}
		// fprintf(stderr,"Closing bitstream\n");
		close_bitstream();
   10e48:	0010cfc0 	call	10cfc <close_bitstream>
		// SET_DONE();

		// TODO: Send the DONE flag to the next stage
		// TODO: Not used you can fully ignore this queue
		// SEND2(1);
		break;
   10e4c:	0001883a 	nop
	}

	// TODO: Close the queues


	printf("\n Finished !\n");
   10e50:	01000074 	movhi	r4,1
   10e54:	211ab304 	addi	r4,r4,27340
   10e58:	00113740 	call	11374 <puts>
	return 0;
   10e5c:	0005883a 	mov	r2,zero
}
   10e60:	e037883a 	mov	sp,fp
   10e64:	dfc00117 	ldw	ra,4(sp)
   10e68:	df000017 	ldw	fp,0(sp)
   10e6c:	dec00204 	addi	sp,sp,8
   10e70:	f800283a 	ret

00010e74 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   10e74:	defffa04 	addi	sp,sp,-24
   10e78:	dfc00515 	stw	ra,20(sp)
   10e7c:	df000415 	stw	fp,16(sp)
   10e80:	df000404 	addi	fp,sp,16
   10e84:	e13ffc15 	stw	r4,-16(fp)
   10e88:	e17ffd15 	stw	r5,-12(fp)
   10e8c:	e1bffe15 	stw	r6,-8(fp)
   10e90:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   10e94:	0001883a 	nop
   10e98:	e0bffe17 	ldw	r2,-8(fp)
   10e9c:	1009883a 	mov	r4,r2
   10ea0:	01400044 	movi	r5,1
   10ea4:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   10ea8:	103ffb1e 	bne	r2,zero,10e98 <enqueueINT32+0x24>
	{}

    if (INIT_USAGE_ENQ == 0){
   10eac:	d0a8c617 	ldw	r2,-23784(gp)
   10eb0:	1000051e 	bne	r2,zero,10ec8 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   10eb4:	00800044 	movi	r2,1
   10eb8:	d0a8c615 	stw	r2,-23784(gp)
        printf("First time using enqueueINT32\n");
   10ebc:	01000074 	movhi	r4,1
   10ec0:	211ab704 	addi	r4,r4,27356
   10ec4:	00113740 	call	11374 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   10ec8:	e0bffc17 	ldw	r2,-16(fp)
   10ecc:	1009883a 	mov	r4,r2
   10ed0:	e0bffe17 	ldw	r2,-8(fp)
   10ed4:	1007883a 	mov	r3,r2
   10ed8:	e0bfff17 	ldw	r2,-4(fp)
   10edc:	180b883a 	mov	r5,r3
   10ee0:	100d883a 	mov	r6,r2
   10ee4:	0014bcc0 	call	14bcc <altera_avalon_fifo_write_fifo>
}
   10ee8:	e037883a 	mov	sp,fp
   10eec:	dfc00117 	ldw	ra,4(sp)
   10ef0:	df000017 	ldw	fp,0(sp)
   10ef4:	dec00204 	addi	sp,sp,8
   10ef8:	f800283a 	ret

00010efc <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   10efc:	defffa04 	addi	sp,sp,-24
   10f00:	dfc00515 	stw	ra,20(sp)
   10f04:	df000415 	stw	fp,16(sp)
   10f08:	df000404 	addi	fp,sp,16
   10f0c:	e13ffd15 	stw	r4,-12(fp)
   10f10:	e17ffe15 	stw	r5,-8(fp)
   10f14:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   10f18:	0001883a 	nop
   10f1c:	e0bfff17 	ldw	r2,-4(fp)
   10f20:	1009883a 	mov	r4,r2
   10f24:	01400084 	movi	r5,2
   10f28:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   10f2c:	103ffb1e 	bne	r2,zero,10f1c <dequeueINT32+0x20>
	{}

    if (INIT_USAGE_DEQ == 0){
   10f30:	d0a8c717 	ldw	r2,-23780(gp)
   10f34:	1000051e 	bne	r2,zero,10f4c <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   10f38:	00800044 	movi	r2,1
   10f3c:	d0a8c715 	stw	r2,-23780(gp)
        printf("First time using dequeueINT32\n");
   10f40:	01000074 	movhi	r4,1
   10f44:	211abf04 	addi	r4,r4,27388
   10f48:	00113740 	call	11374 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   10f4c:	e0bffe17 	ldw	r2,-8(fp)
   10f50:	1007883a 	mov	r3,r2
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	1809883a 	mov	r4,r3
   10f5c:	100b883a 	mov	r5,r2
   10f60:	0014c900 	call	14c90 <altera_avalon_fifo_read_fifo>
   10f64:	e0bffc15 	stw	r2,-16(fp)

	return data;
   10f68:	e0bffc17 	ldw	r2,-16(fp)
}
   10f6c:	e037883a 	mov	sp,fp
   10f70:	dfc00117 	ldw	ra,4(sp)
   10f74:	df000017 	ldw	fp,0(sp)
   10f78:	dec00204 	addi	sp,sp,8
   10f7c:	f800283a 	ret

00010f80 <RECV1>:
#include "q_mem_obj_def.h"

void printInteger(int n);

int RECV1()
{
   10f80:	defffe04 	addi	sp,sp,-8
   10f84:	dfc00115 	stw	ra,4(sp)
   10f88:	df000015 	stw	fp,0(sp)
   10f8c:	d839883a 	mov	fp,sp

    return dequeueINT32(q5);
   10f90:	00800074 	movhi	r2,1
   10f94:	109ce704 	addi	r2,r2,29596
   10f98:	11000017 	ldw	r4,0(r2)
   10f9c:	11400117 	ldw	r5,4(r2)
   10fa0:	11800217 	ldw	r6,8(r2)
   10fa4:	0010efc0 	call	10efc <dequeueINT32>
}
   10fa8:	e037883a 	mov	sp,fp
   10fac:	dfc00117 	ldw	ra,4(sp)
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00204 	addi	sp,sp,8
   10fb8:	f800283a 	ret

00010fbc <RECV2>:

int RECV2()
{
   10fbc:	defffe04 	addi	sp,sp,-8
   10fc0:	dfc00115 	stw	ra,4(sp)
   10fc4:	df000015 	stw	fp,0(sp)
   10fc8:	d839883a 	mov	fp,sp

    return dequeueINT32(q1d);
   10fcc:	00800074 	movhi	r2,1
   10fd0:	109cf304 	addi	r2,r2,29644
   10fd4:	11000017 	ldw	r4,0(r2)
   10fd8:	11400117 	ldw	r5,4(r2)
   10fdc:	11800217 	ldw	r6,8(r2)
   10fe0:	0010efc0 	call	10efc <dequeueINT32>
}
   10fe4:	e037883a 	mov	sp,fp
   10fe8:	dfc00117 	ldw	ra,4(sp)
   10fec:	df000017 	ldw	fp,0(sp)
   10ff0:	dec00204 	addi	sp,sp,8
   10ff4:	f800283a 	ret

00010ff8 <SEND1>:

void SEND1(int data)
{
   10ff8:	defffd04 	addi	sp,sp,-12
   10ffc:	dfc00215 	stw	ra,8(sp)
   11000:	df000115 	stw	fp,4(sp)
   11004:	df000104 	addi	fp,sp,4
   11008:	e13fff15 	stw	r4,-4(fp)
//	printInteger(data);
    enqueueINT32(q1e, data);
   1100c:	00800074 	movhi	r2,1
   11010:	109cf604 	addi	r2,r2,29656
   11014:	11000017 	ldw	r4,0(r2)
   11018:	11400117 	ldw	r5,4(r2)
   1101c:	11800217 	ldw	r6,8(r2)
   11020:	e1ffff17 	ldw	r7,-4(fp)
   11024:	0010e740 	call	10e74 <enqueueINT32>
}
   11028:	e037883a 	mov	sp,fp
   1102c:	dfc00117 	ldw	ra,4(sp)
   11030:	df000017 	ldw	fp,0(sp)
   11034:	dec00204 	addi	sp,sp,8
   11038:	f800283a 	ret

0001103c <printInteger>:


void printInteger(int n) {
   1103c:	defff304 	addi	sp,sp,-52
   11040:	dfc00c15 	stw	ra,48(sp)
   11044:	df000b15 	stw	fp,44(sp)
   11048:	df000b04 	addi	fp,sp,44
   1104c:	e13fff15 	stw	r4,-4(fp)
    char buffer[20];
    int i = 0, sign;
   11050:	e03ff515 	stw	zero,-44(fp)

    if ((sign = n) < 0)  // Record sign
   11054:	e0bfff17 	ldw	r2,-4(fp)
   11058:	e0bff815 	stw	r2,-32(fp)
   1105c:	e0bff817 	ldw	r2,-32(fp)
   11060:	1000030e 	bge	r2,zero,11070 <printInteger+0x34>
        n = -n;          // Make n positive
   11064:	e0bfff17 	ldw	r2,-4(fp)
   11068:	0085c83a 	sub	r2,zero,r2
   1106c:	e0bfff15 	stw	r2,-4(fp)

    do {  // Generate digits in reverse order
        buffer[i++] = n % 10 + '0';  // Get next digit
   11070:	e0bfff17 	ldw	r2,-4(fp)
   11074:	1009883a 	mov	r4,r2
   11078:	01400284 	movi	r5,10
   1107c:	001125c0 	call	1125c <__modsi3>
   11080:	10800c04 	addi	r2,r2,48
   11084:	1007883a 	mov	r3,r2
   11088:	e13ff944 	addi	r4,fp,-27
   1108c:	e0bff517 	ldw	r2,-44(fp)
   11090:	2085883a 	add	r2,r4,r2
   11094:	10c00005 	stb	r3,0(r2)
   11098:	e0bff517 	ldw	r2,-44(fp)
   1109c:	10800044 	addi	r2,r2,1
   110a0:	e0bff515 	stw	r2,-44(fp)
    } while ((n /= 10) > 0);         // Delete it
   110a4:	e0bfff17 	ldw	r2,-4(fp)
   110a8:	1009883a 	mov	r4,r2
   110ac:	01400284 	movi	r5,10
   110b0:	001120c0 	call	1120c <__divsi3>
   110b4:	e0bfff15 	stw	r2,-4(fp)
   110b8:	e0bfff17 	ldw	r2,-4(fp)
   110bc:	00bfec16 	blt	zero,r2,11070 <printInteger+0x34>

    if (sign < 0)
   110c0:	e0bff817 	ldw	r2,-32(fp)
   110c4:	1000080e 	bge	r2,zero,110e8 <printInteger+0xac>
        buffer[i++] = '-';
   110c8:	e0fff944 	addi	r3,fp,-27
   110cc:	e0bff517 	ldw	r2,-44(fp)
   110d0:	1885883a 	add	r2,r3,r2
   110d4:	00c00b44 	movi	r3,45
   110d8:	10c00005 	stb	r3,0(r2)
   110dc:	e0bff517 	ldw	r2,-44(fp)
   110e0:	10800044 	addi	r2,r2,1
   110e4:	e0bff515 	stw	r2,-44(fp)

    buffer[i] = '\0';
   110e8:	e0fff944 	addi	r3,fp,-27
   110ec:	e0bff517 	ldw	r2,-44(fp)
   110f0:	1885883a 	add	r2,r3,r2
   110f4:	10000005 	stb	zero,0(r2)

    // Reverse the string
    int start = 0, end = i - 1;
   110f8:	e03ff615 	stw	zero,-40(fp)
   110fc:	e0bff517 	ldw	r2,-44(fp)
   11100:	10bfffc4 	addi	r2,r2,-1
   11104:	e0bff715 	stw	r2,-36(fp)
    char temp;
    while (start < end) {
   11108:	00001806 	br	1116c <printInteger+0x130>
        temp = buffer[start];
   1110c:	e0fff944 	addi	r3,fp,-27
   11110:	e0bff617 	ldw	r2,-40(fp)
   11114:	1885883a 	add	r2,r3,r2
   11118:	10800003 	ldbu	r2,0(r2)
   1111c:	e0bff905 	stb	r2,-28(fp)
        buffer[start] = buffer[end];
   11120:	e0fff944 	addi	r3,fp,-27
   11124:	e0bff717 	ldw	r2,-36(fp)
   11128:	1885883a 	add	r2,r3,r2
   1112c:	10c00003 	ldbu	r3,0(r2)
   11130:	e13ff944 	addi	r4,fp,-27
   11134:	e0bff617 	ldw	r2,-40(fp)
   11138:	2085883a 	add	r2,r4,r2
   1113c:	10c00005 	stb	r3,0(r2)
        buffer[end] = temp;
   11140:	e0fff944 	addi	r3,fp,-27
   11144:	e0bff717 	ldw	r2,-36(fp)
   11148:	1885883a 	add	r2,r3,r2
   1114c:	e0fff903 	ldbu	r3,-28(fp)
   11150:	10c00005 	stb	r3,0(r2)
        start++;
   11154:	e0bff617 	ldw	r2,-40(fp)
   11158:	10800044 	addi	r2,r2,1
   1115c:	e0bff615 	stw	r2,-40(fp)
        end--;
   11160:	e0bff717 	ldw	r2,-36(fp)
   11164:	10bfffc4 	addi	r2,r2,-1
   11168:	e0bff715 	stw	r2,-36(fp)
    buffer[i] = '\0';

    // Reverse the string
    int start = 0, end = i - 1;
    char temp;
    while (start < end) {
   1116c:	e0fff617 	ldw	r3,-40(fp)
   11170:	e0bff717 	ldw	r2,-36(fp)
   11174:	18bfe516 	blt	r3,r2,1110c <printInteger+0xd0>
        buffer[end] = temp;
        start++;
        end--;
    }

    puts(buffer);  // Print string to stdout followed by a newline
   11178:	e0bff944 	addi	r2,fp,-27
   1117c:	1009883a 	mov	r4,r2
   11180:	00113740 	call	11374 <puts>
}
   11184:	e037883a 	mov	sp,fp
   11188:	dfc00117 	ldw	ra,4(sp)
   1118c:	df000017 	ldw	fp,0(sp)
   11190:	dec00204 	addi	sp,sp,8
   11194:	f800283a 	ret

00011198 <udivmodsi4>:
   11198:	2005883a 	mov	r2,r4
   1119c:	2900182e 	bgeu	r5,r4,11200 <udivmodsi4+0x68>
   111a0:	28001716 	blt	r5,zero,11200 <udivmodsi4+0x68>
   111a4:	01000804 	movi	r4,32
   111a8:	00c00044 	movi	r3,1
   111ac:	00000206 	br	111b8 <udivmodsi4+0x20>
   111b0:	20001126 	beq	r4,zero,111f8 <udivmodsi4+0x60>
   111b4:	28000516 	blt	r5,zero,111cc <udivmodsi4+0x34>
   111b8:	294b883a 	add	r5,r5,r5
   111bc:	213fffc4 	addi	r4,r4,-1
   111c0:	18c7883a 	add	r3,r3,r3
   111c4:	28bffa36 	bltu	r5,r2,111b0 <udivmodsi4+0x18>
   111c8:	18000b26 	beq	r3,zero,111f8 <udivmodsi4+0x60>
   111cc:	0009883a 	mov	r4,zero
   111d0:	11400236 	bltu	r2,r5,111dc <udivmodsi4+0x44>
   111d4:	1145c83a 	sub	r2,r2,r5
   111d8:	20c8b03a 	or	r4,r4,r3
   111dc:	1806d07a 	srli	r3,r3,1
   111e0:	280ad07a 	srli	r5,r5,1
   111e4:	183ffa1e 	bne	r3,zero,111d0 <udivmodsi4+0x38>
   111e8:	3000021e 	bne	r6,zero,111f4 <udivmodsi4+0x5c>
   111ec:	2005883a 	mov	r2,r4
   111f0:	f800283a 	ret
   111f4:	f800283a 	ret
   111f8:	0009883a 	mov	r4,zero
   111fc:	003ffa06 	br	111e8 <udivmodsi4+0x50>
   11200:	00c00044 	movi	r3,1
   11204:	0009883a 	mov	r4,zero
   11208:	003ff106 	br	111d0 <udivmodsi4+0x38>

0001120c <__divsi3>:
   1120c:	defffe04 	addi	sp,sp,-8
   11210:	dfc00115 	stw	ra,4(sp)
   11214:	dc000015 	stw	r16,0(sp)
   11218:	20000a16 	blt	r4,zero,11244 <__divsi3+0x38>
   1121c:	0021883a 	mov	r16,zero
   11220:	28000b16 	blt	r5,zero,11250 <__divsi3+0x44>
   11224:	000d883a 	mov	r6,zero
   11228:	00111980 	call	11198 <udivmodsi4>
   1122c:	80000126 	beq	r16,zero,11234 <__divsi3+0x28>
   11230:	0085c83a 	sub	r2,zero,r2
   11234:	dfc00117 	ldw	ra,4(sp)
   11238:	dc000017 	ldw	r16,0(sp)
   1123c:	dec00204 	addi	sp,sp,8
   11240:	f800283a 	ret
   11244:	0109c83a 	sub	r4,zero,r4
   11248:	04000044 	movi	r16,1
   1124c:	283ff50e 	bge	r5,zero,11224 <__divsi3+0x18>
   11250:	014bc83a 	sub	r5,zero,r5
   11254:	8400005c 	xori	r16,r16,1
   11258:	003ff206 	br	11224 <__divsi3+0x18>

0001125c <__modsi3>:
   1125c:	deffff04 	addi	sp,sp,-4
   11260:	dfc00015 	stw	ra,0(sp)
   11264:	20000516 	blt	r4,zero,1127c <__modsi3+0x20>
   11268:	28000c16 	blt	r5,zero,1129c <__modsi3+0x40>
   1126c:	01800044 	movi	r6,1
   11270:	dfc00017 	ldw	ra,0(sp)
   11274:	dec00104 	addi	sp,sp,4
   11278:	00111981 	jmpi	11198 <udivmodsi4>
   1127c:	0109c83a 	sub	r4,zero,r4
   11280:	28000b16 	blt	r5,zero,112b0 <__modsi3+0x54>
   11284:	01800044 	movi	r6,1
   11288:	00111980 	call	11198 <udivmodsi4>
   1128c:	0085c83a 	sub	r2,zero,r2
   11290:	dfc00017 	ldw	ra,0(sp)
   11294:	dec00104 	addi	sp,sp,4
   11298:	f800283a 	ret
   1129c:	014bc83a 	sub	r5,zero,r5
   112a0:	01800044 	movi	r6,1
   112a4:	dfc00017 	ldw	ra,0(sp)
   112a8:	dec00104 	addi	sp,sp,4
   112ac:	00111981 	jmpi	11198 <udivmodsi4>
   112b0:	014bc83a 	sub	r5,zero,r5
   112b4:	003ff306 	br	11284 <__modsi3+0x28>

000112b8 <__udivsi3>:
   112b8:	000d883a 	mov	r6,zero
   112bc:	00111981 	jmpi	11198 <udivmodsi4>

000112c0 <__umodsi3>:
   112c0:	01800044 	movi	r6,1
   112c4:	00111981 	jmpi	11198 <udivmodsi4>

000112c8 <__mulsi3>:
   112c8:	0005883a 	mov	r2,zero
   112cc:	20000726 	beq	r4,zero,112ec <__mulsi3+0x24>
   112d0:	20c0004c 	andi	r3,r4,1
   112d4:	2008d07a 	srli	r4,r4,1
   112d8:	18000126 	beq	r3,zero,112e0 <__mulsi3+0x18>
   112dc:	1145883a 	add	r2,r2,r5
   112e0:	294b883a 	add	r5,r5,r5
   112e4:	203ffa1e 	bne	r4,zero,112d0 <__mulsi3+0x8>
   112e8:	f800283a 	ret
   112ec:	f800283a 	ret

000112f0 <_puts_r>:
   112f0:	defff604 	addi	sp,sp,-40
   112f4:	dc400815 	stw	r17,32(sp)
   112f8:	2023883a 	mov	r17,r4
   112fc:	2809883a 	mov	r4,r5
   11300:	dc000715 	stw	r16,28(sp)
   11304:	dfc00915 	stw	ra,36(sp)
   11308:	2821883a 	mov	r16,r5
   1130c:	00113880 	call	11388 <strlen>
   11310:	10c00044 	addi	r3,r2,1
   11314:	d8800115 	stw	r2,4(sp)
   11318:	89400217 	ldw	r5,8(r17)
   1131c:	00800074 	movhi	r2,1
   11320:	109ac704 	addi	r2,r2,27420
   11324:	d8800215 	stw	r2,8(sp)
   11328:	00800044 	movi	r2,1
   1132c:	d8800315 	stw	r2,12(sp)
   11330:	8809883a 	mov	r4,r17
   11334:	00800084 	movi	r2,2
   11338:	d9800404 	addi	r6,sp,16
   1133c:	dc000015 	stw	r16,0(sp)
   11340:	d8c00615 	stw	r3,24(sp)
   11344:	dec00415 	stw	sp,16(sp)
   11348:	d8800515 	stw	r2,20(sp)
   1134c:	00114140 	call	11414 <__sfvwrite_r>
   11350:	1000061e 	bne	r2,zero,1136c <_puts_r+0x7c>
   11354:	00800284 	movi	r2,10
   11358:	dfc00917 	ldw	ra,36(sp)
   1135c:	dc400817 	ldw	r17,32(sp)
   11360:	dc000717 	ldw	r16,28(sp)
   11364:	dec00a04 	addi	sp,sp,40
   11368:	f800283a 	ret
   1136c:	00bfffc4 	movi	r2,-1
   11370:	003ff906 	br	11358 <_puts_r+0x68>

00011374 <puts>:
   11374:	008000b4 	movhi	r2,2
   11378:	10a37e04 	addi	r2,r2,-29192
   1137c:	200b883a 	mov	r5,r4
   11380:	11000017 	ldw	r4,0(r2)
   11384:	00112f01 	jmpi	112f0 <_puts_r>

00011388 <strlen>:
   11388:	208000cc 	andi	r2,r4,3
   1138c:	10001f1e 	bne	r2,zero,1140c <strlen+0x84>
   11390:	20800017 	ldw	r2,0(r4)
   11394:	01ffbff4 	movhi	r7,65279
   11398:	39ffbfc4 	addi	r7,r7,-257
   1139c:	01a02074 	movhi	r6,32897
   113a0:	31a02004 	addi	r6,r6,-32640
   113a4:	11c7883a 	add	r3,r2,r7
   113a8:	0084303a 	nor	r2,zero,r2
   113ac:	1886703a 	and	r3,r3,r2
   113b0:	1986703a 	and	r3,r3,r6
   113b4:	2005883a 	mov	r2,r4
   113b8:	1800101e 	bne	r3,zero,113fc <strlen+0x74>
   113bc:	10800104 	addi	r2,r2,4
   113c0:	10c00017 	ldw	r3,0(r2)
   113c4:	19cb883a 	add	r5,r3,r7
   113c8:	00c6303a 	nor	r3,zero,r3
   113cc:	28c6703a 	and	r3,r5,r3
   113d0:	1986703a 	and	r3,r3,r6
   113d4:	1800091e 	bne	r3,zero,113fc <strlen+0x74>
   113d8:	10800104 	addi	r2,r2,4
   113dc:	10c00017 	ldw	r3,0(r2)
   113e0:	19cb883a 	add	r5,r3,r7
   113e4:	00c6303a 	nor	r3,zero,r3
   113e8:	28c6703a 	and	r3,r5,r3
   113ec:	1986703a 	and	r3,r3,r6
   113f0:	183ff226 	beq	r3,zero,113bc <strlen+0x34>
   113f4:	00000106 	br	113fc <strlen+0x74>
   113f8:	10800044 	addi	r2,r2,1
   113fc:	10c00007 	ldb	r3,0(r2)
   11400:	183ffd1e 	bne	r3,zero,113f8 <strlen+0x70>
   11404:	1105c83a 	sub	r2,r2,r4
   11408:	f800283a 	ret
   1140c:	2005883a 	mov	r2,r4
   11410:	003ffa06 	br	113fc <strlen+0x74>

00011414 <__sfvwrite_r>:
   11414:	30800217 	ldw	r2,8(r6)
   11418:	defff504 	addi	sp,sp,-44
   1141c:	dd400615 	stw	r21,24(sp)
   11420:	dd000515 	stw	r20,20(sp)
   11424:	dc000115 	stw	r16,4(sp)
   11428:	dfc00a15 	stw	ra,40(sp)
   1142c:	df000915 	stw	fp,36(sp)
   11430:	ddc00815 	stw	r23,32(sp)
   11434:	dd800715 	stw	r22,28(sp)
   11438:	dcc00415 	stw	r19,16(sp)
   1143c:	dc800315 	stw	r18,12(sp)
   11440:	dc400215 	stw	r17,8(sp)
   11444:	3029883a 	mov	r20,r6
   11448:	202b883a 	mov	r21,r4
   1144c:	2821883a 	mov	r16,r5
   11450:	10002126 	beq	r2,zero,114d8 <__sfvwrite_r+0xc4>
   11454:	2880030b 	ldhu	r2,12(r5)
   11458:	10c0020c 	andi	r3,r2,8
   1145c:	18ffffcc 	andi	r3,r3,65535
   11460:	18e0001c 	xori	r3,r3,32768
   11464:	18e00004 	addi	r3,r3,-32768
   11468:	18002826 	beq	r3,zero,1150c <__sfvwrite_r+0xf8>
   1146c:	28c00417 	ldw	r3,16(r5)
   11470:	18002626 	beq	r3,zero,1150c <__sfvwrite_r+0xf8>
   11474:	10c0008c 	andi	r3,r2,2
   11478:	18ffffcc 	andi	r3,r3,65535
   1147c:	18e0001c 	xori	r3,r3,32768
   11480:	18e00004 	addi	r3,r3,-32768
   11484:	a4400017 	ldw	r17,0(r20)
   11488:	18002b26 	beq	r3,zero,11538 <__sfvwrite_r+0x124>
   1148c:	0027883a 	mov	r19,zero
   11490:	0025883a 	mov	r18,zero
   11494:	05810004 	movi	r22,1024
   11498:	980d883a 	mov	r6,r19
   1149c:	a809883a 	mov	r4,r21
   114a0:	90004f26 	beq	r18,zero,115e0 <__sfvwrite_r+0x1cc>
   114a4:	900f883a 	mov	r7,r18
   114a8:	81400717 	ldw	r5,28(r16)
   114ac:	b480012e 	bgeu	r22,r18,114b4 <__sfvwrite_r+0xa0>
   114b0:	01c10004 	movi	r7,1024
   114b4:	80800917 	ldw	r2,36(r16)
   114b8:	103ee83a 	callr	r2
   114bc:	0080540e 	bge	zero,r2,11610 <__sfvwrite_r+0x1fc>
   114c0:	a0c00217 	ldw	r3,8(r20)
   114c4:	98a7883a 	add	r19,r19,r2
   114c8:	90a5c83a 	sub	r18,r18,r2
   114cc:	1885c83a 	sub	r2,r3,r2
   114d0:	a0800215 	stw	r2,8(r20)
   114d4:	103ff01e 	bne	r2,zero,11498 <__sfvwrite_r+0x84>
   114d8:	0005883a 	mov	r2,zero
   114dc:	dfc00a17 	ldw	ra,40(sp)
   114e0:	df000917 	ldw	fp,36(sp)
   114e4:	ddc00817 	ldw	r23,32(sp)
   114e8:	dd800717 	ldw	r22,28(sp)
   114ec:	dd400617 	ldw	r21,24(sp)
   114f0:	dd000517 	ldw	r20,20(sp)
   114f4:	dcc00417 	ldw	r19,16(sp)
   114f8:	dc800317 	ldw	r18,12(sp)
   114fc:	dc400217 	ldw	r17,8(sp)
   11500:	dc000117 	ldw	r16,4(sp)
   11504:	dec00b04 	addi	sp,sp,44
   11508:	f800283a 	ret
   1150c:	a809883a 	mov	r4,r21
   11510:	800b883a 	mov	r5,r16
   11514:	0012aa00 	call	12aa0 <__swsetup_r>
   11518:	1000f01e 	bne	r2,zero,118dc <__sfvwrite_r+0x4c8>
   1151c:	8080030b 	ldhu	r2,12(r16)
   11520:	a4400017 	ldw	r17,0(r20)
   11524:	10c0008c 	andi	r3,r2,2
   11528:	18ffffcc 	andi	r3,r3,65535
   1152c:	18e0001c 	xori	r3,r3,32768
   11530:	18e00004 	addi	r3,r3,-32768
   11534:	183fd51e 	bne	r3,zero,1148c <__sfvwrite_r+0x78>
   11538:	10c0004c 	andi	r3,r2,1
   1153c:	002d883a 	mov	r22,zero
   11540:	1800381e 	bne	r3,zero,11624 <__sfvwrite_r+0x210>
   11544:	0025883a 	mov	r18,zero
   11548:	90002126 	beq	r18,zero,115d0 <__sfvwrite_r+0x1bc>
   1154c:	10c0800c 	andi	r3,r2,512
   11550:	18ffffcc 	andi	r3,r3,65535
   11554:	18e0001c 	xori	r3,r3,32768
   11558:	18e00004 	addi	r3,r3,-32768
   1155c:	84c00217 	ldw	r19,8(r16)
   11560:	18006b26 	beq	r3,zero,11710 <__sfvwrite_r+0x2fc>
   11564:	980f883a 	mov	r7,r19
   11568:	94c08636 	bltu	r18,r19,11784 <__sfvwrite_r+0x370>
   1156c:	10c1200c 	andi	r3,r2,1152
   11570:	18009f1e 	bne	r3,zero,117f0 <__sfvwrite_r+0x3dc>
   11574:	81000017 	ldw	r4,0(r16)
   11578:	982f883a 	mov	r23,r19
   1157c:	9039883a 	mov	fp,r18
   11580:	9027883a 	mov	r19,r18
   11584:	380d883a 	mov	r6,r7
   11588:	b00b883a 	mov	r5,r22
   1158c:	d9c00015 	stw	r7,0(sp)
   11590:	00122b40 	call	122b4 <memmove>
   11594:	d9c00017 	ldw	r7,0(sp)
   11598:	81000217 	ldw	r4,8(r16)
   1159c:	80800017 	ldw	r2,0(r16)
   115a0:	25efc83a 	sub	r23,r4,r23
   115a4:	11cf883a 	add	r7,r2,r7
   115a8:	85c00215 	stw	r23,8(r16)
   115ac:	81c00015 	stw	r7,0(r16)
   115b0:	a0800217 	ldw	r2,8(r20)
   115b4:	b72d883a 	add	r22,r22,fp
   115b8:	9725c83a 	sub	r18,r18,fp
   115bc:	14e7c83a 	sub	r19,r2,r19
   115c0:	a4c00215 	stw	r19,8(r20)
   115c4:	983fc426 	beq	r19,zero,114d8 <__sfvwrite_r+0xc4>
   115c8:	8080030b 	ldhu	r2,12(r16)
   115cc:	903fdf1e 	bne	r18,zero,1154c <__sfvwrite_r+0x138>
   115d0:	8d800017 	ldw	r22,0(r17)
   115d4:	8c800117 	ldw	r18,4(r17)
   115d8:	8c400204 	addi	r17,r17,8
   115dc:	003fda06 	br	11548 <__sfvwrite_r+0x134>
   115e0:	8cc00017 	ldw	r19,0(r17)
   115e4:	8c800117 	ldw	r18,4(r17)
   115e8:	8c400204 	addi	r17,r17,8
   115ec:	003faa06 	br	11498 <__sfvwrite_r+0x84>
   115f0:	00124400 	call	12440 <_realloc_r>
   115f4:	102f883a 	mov	r23,r2
   115f8:	10009f1e 	bne	r2,zero,11878 <__sfvwrite_r+0x464>
   115fc:	81400417 	ldw	r5,16(r16)
   11600:	a809883a 	mov	r4,r21
   11604:	00132540 	call	13254 <_free_r>
   11608:	00800304 	movi	r2,12
   1160c:	a8800015 	stw	r2,0(r21)
   11610:	80c0030b 	ldhu	r3,12(r16)
   11614:	00bfffc4 	movi	r2,-1
   11618:	18c01014 	ori	r3,r3,64
   1161c:	80c0030d 	sth	r3,12(r16)
   11620:	003fae06 	br	114dc <__sfvwrite_r+0xc8>
   11624:	0007883a 	mov	r3,zero
   11628:	0039883a 	mov	fp,zero
   1162c:	0025883a 	mov	r18,zero
   11630:	90001e26 	beq	r18,zero,116ac <__sfvwrite_r+0x298>
   11634:	18006526 	beq	r3,zero,117cc <__sfvwrite_r+0x3b8>
   11638:	b02f883a 	mov	r23,r22
   1163c:	9580012e 	bgeu	r18,r22,11644 <__sfvwrite_r+0x230>
   11640:	902f883a 	mov	r23,r18
   11644:	81000017 	ldw	r4,0(r16)
   11648:	80800417 	ldw	r2,16(r16)
   1164c:	84c00217 	ldw	r19,8(r16)
   11650:	81c00517 	ldw	r7,20(r16)
   11654:	1100022e 	bgeu	r2,r4,11660 <__sfvwrite_r+0x24c>
   11658:	99e7883a 	add	r19,r19,r7
   1165c:	9dc01816 	blt	r19,r23,116c0 <__sfvwrite_r+0x2ac>
   11660:	b9c03b16 	blt	r23,r7,11750 <__sfvwrite_r+0x33c>
   11664:	80800917 	ldw	r2,36(r16)
   11668:	81400717 	ldw	r5,28(r16)
   1166c:	a809883a 	mov	r4,r21
   11670:	d8c00015 	stw	r3,0(sp)
   11674:	e00d883a 	mov	r6,fp
   11678:	103ee83a 	callr	r2
   1167c:	1027883a 	mov	r19,r2
   11680:	d8c00017 	ldw	r3,0(sp)
   11684:	00bfe20e 	bge	zero,r2,11610 <__sfvwrite_r+0x1fc>
   11688:	b4edc83a 	sub	r22,r22,r19
   1168c:	b0001a26 	beq	r22,zero,116f8 <__sfvwrite_r+0x2e4>
   11690:	a0800217 	ldw	r2,8(r20)
   11694:	e4f9883a 	add	fp,fp,r19
   11698:	94e5c83a 	sub	r18,r18,r19
   1169c:	14e7c83a 	sub	r19,r2,r19
   116a0:	a4c00215 	stw	r19,8(r20)
   116a4:	983f8c26 	beq	r19,zero,114d8 <__sfvwrite_r+0xc4>
   116a8:	903fe21e 	bne	r18,zero,11634 <__sfvwrite_r+0x220>
   116ac:	8f000017 	ldw	fp,0(r17)
   116b0:	8c800117 	ldw	r18,4(r17)
   116b4:	0007883a 	mov	r3,zero
   116b8:	8c400204 	addi	r17,r17,8
   116bc:	003fdc06 	br	11630 <__sfvwrite_r+0x21c>
   116c0:	e00b883a 	mov	r5,fp
   116c4:	980d883a 	mov	r6,r19
   116c8:	d8c00015 	stw	r3,0(sp)
   116cc:	00122b40 	call	122b4 <memmove>
   116d0:	80800017 	ldw	r2,0(r16)
   116d4:	a809883a 	mov	r4,r21
   116d8:	800b883a 	mov	r5,r16
   116dc:	14c5883a 	add	r2,r2,r19
   116e0:	80800015 	stw	r2,0(r16)
   116e4:	0012c140 	call	12c14 <_fflush_r>
   116e8:	d8c00017 	ldw	r3,0(sp)
   116ec:	103fc81e 	bne	r2,zero,11610 <__sfvwrite_r+0x1fc>
   116f0:	b4edc83a 	sub	r22,r22,r19
   116f4:	b03fe61e 	bne	r22,zero,11690 <__sfvwrite_r+0x27c>
   116f8:	a809883a 	mov	r4,r21
   116fc:	800b883a 	mov	r5,r16
   11700:	0012c140 	call	12c14 <_fflush_r>
   11704:	103fc21e 	bne	r2,zero,11610 <__sfvwrite_r+0x1fc>
   11708:	0007883a 	mov	r3,zero
   1170c:	003fe006 	br	11690 <__sfvwrite_r+0x27c>
   11710:	81000017 	ldw	r4,0(r16)
   11714:	80800417 	ldw	r2,16(r16)
   11718:	1100022e 	bgeu	r2,r4,11724 <__sfvwrite_r+0x310>
   1171c:	9839883a 	mov	fp,r19
   11720:	9c806036 	bltu	r19,r18,118a4 <__sfvwrite_r+0x490>
   11724:	81c00517 	ldw	r7,20(r16)
   11728:	91c01c36 	bltu	r18,r7,1179c <__sfvwrite_r+0x388>
   1172c:	80800917 	ldw	r2,36(r16)
   11730:	81400717 	ldw	r5,28(r16)
   11734:	a809883a 	mov	r4,r21
   11738:	b00d883a 	mov	r6,r22
   1173c:	103ee83a 	callr	r2
   11740:	1027883a 	mov	r19,r2
   11744:	00bfb20e 	bge	zero,r2,11610 <__sfvwrite_r+0x1fc>
   11748:	1039883a 	mov	fp,r2
   1174c:	003f9806 	br	115b0 <__sfvwrite_r+0x19c>
   11750:	b80d883a 	mov	r6,r23
   11754:	e00b883a 	mov	r5,fp
   11758:	d8c00015 	stw	r3,0(sp)
   1175c:	00122b40 	call	122b4 <memmove>
   11760:	80800217 	ldw	r2,8(r16)
   11764:	81000017 	ldw	r4,0(r16)
   11768:	b827883a 	mov	r19,r23
   1176c:	15c5c83a 	sub	r2,r2,r23
   11770:	25ef883a 	add	r23,r4,r23
   11774:	80800215 	stw	r2,8(r16)
   11778:	85c00015 	stw	r23,0(r16)
   1177c:	d8c00017 	ldw	r3,0(sp)
   11780:	003fc106 	br	11688 <__sfvwrite_r+0x274>
   11784:	81000017 	ldw	r4,0(r16)
   11788:	902f883a 	mov	r23,r18
   1178c:	9039883a 	mov	fp,r18
   11790:	9027883a 	mov	r19,r18
   11794:	900f883a 	mov	r7,r18
   11798:	003f7a06 	br	11584 <__sfvwrite_r+0x170>
   1179c:	b00b883a 	mov	r5,r22
   117a0:	900d883a 	mov	r6,r18
   117a4:	00122b40 	call	122b4 <memmove>
   117a8:	80c00217 	ldw	r3,8(r16)
   117ac:	80800017 	ldw	r2,0(r16)
   117b0:	9027883a 	mov	r19,r18
   117b4:	1c87c83a 	sub	r3,r3,r18
   117b8:	1485883a 	add	r2,r2,r18
   117bc:	80c00215 	stw	r3,8(r16)
   117c0:	80800015 	stw	r2,0(r16)
   117c4:	9039883a 	mov	fp,r18
   117c8:	003f7906 	br	115b0 <__sfvwrite_r+0x19c>
   117cc:	e009883a 	mov	r4,fp
   117d0:	01400284 	movi	r5,10
   117d4:	900d883a 	mov	r6,r18
   117d8:	001207c0 	call	1207c <memchr>
   117dc:	10003c26 	beq	r2,zero,118d0 <__sfvwrite_r+0x4bc>
   117e0:	15800044 	addi	r22,r2,1
   117e4:	b72dc83a 	sub	r22,r22,fp
   117e8:	00c00044 	movi	r3,1
   117ec:	003f9206 	br	11638 <__sfvwrite_r+0x224>
   117f0:	81000517 	ldw	r4,20(r16)
   117f4:	81400417 	ldw	r5,16(r16)
   117f8:	80c00017 	ldw	r3,0(r16)
   117fc:	210d883a 	add	r6,r4,r4
   11800:	3109883a 	add	r4,r6,r4
   11804:	2026d7fa 	srli	r19,r4,31
   11808:	1979c83a 	sub	fp,r3,r5
   1180c:	e1800044 	addi	r6,fp,1
   11810:	9909883a 	add	r4,r19,r4
   11814:	2027d07a 	srai	r19,r4,1
   11818:	3489883a 	add	r4,r6,r18
   1181c:	980d883a 	mov	r6,r19
   11820:	9900022e 	bgeu	r19,r4,1182c <__sfvwrite_r+0x418>
   11824:	2027883a 	mov	r19,r4
   11828:	200d883a 	mov	r6,r4
   1182c:	1081000c 	andi	r2,r2,1024
   11830:	10bfffcc 	andi	r2,r2,65535
   11834:	10a0001c 	xori	r2,r2,32768
   11838:	10a00004 	addi	r2,r2,-32768
   1183c:	a809883a 	mov	r4,r21
   11840:	103f6b26 	beq	r2,zero,115f0 <__sfvwrite_r+0x1dc>
   11844:	300b883a 	mov	r5,r6
   11848:	00118f80 	call	118f8 <_malloc_r>
   1184c:	102f883a 	mov	r23,r2
   11850:	103f6d26 	beq	r2,zero,11608 <__sfvwrite_r+0x1f4>
   11854:	81400417 	ldw	r5,16(r16)
   11858:	1009883a 	mov	r4,r2
   1185c:	e00d883a 	mov	r6,fp
   11860:	00121740 	call	12174 <memcpy>
   11864:	8080030b 	ldhu	r2,12(r16)
   11868:	00fedfc4 	movi	r3,-1153
   1186c:	10c4703a 	and	r2,r2,r3
   11870:	10802014 	ori	r2,r2,128
   11874:	8080030d 	sth	r2,12(r16)
   11878:	bf09883a 	add	r4,r23,fp
   1187c:	9f07c83a 	sub	r3,r19,fp
   11880:	85c00415 	stw	r23,16(r16)
   11884:	84c00515 	stw	r19,20(r16)
   11888:	81000015 	stw	r4,0(r16)
   1188c:	902f883a 	mov	r23,r18
   11890:	80c00215 	stw	r3,8(r16)
   11894:	9039883a 	mov	fp,r18
   11898:	9027883a 	mov	r19,r18
   1189c:	900f883a 	mov	r7,r18
   118a0:	003f3806 	br	11584 <__sfvwrite_r+0x170>
   118a4:	b00b883a 	mov	r5,r22
   118a8:	980d883a 	mov	r6,r19
   118ac:	00122b40 	call	122b4 <memmove>
   118b0:	80800017 	ldw	r2,0(r16)
   118b4:	a809883a 	mov	r4,r21
   118b8:	800b883a 	mov	r5,r16
   118bc:	14c5883a 	add	r2,r2,r19
   118c0:	80800015 	stw	r2,0(r16)
   118c4:	0012c140 	call	12c14 <_fflush_r>
   118c8:	103f3926 	beq	r2,zero,115b0 <__sfvwrite_r+0x19c>
   118cc:	003f5006 	br	11610 <__sfvwrite_r+0x1fc>
   118d0:	95800044 	addi	r22,r18,1
   118d4:	00c00044 	movi	r3,1
   118d8:	003f5706 	br	11638 <__sfvwrite_r+0x224>
   118dc:	80c0030b 	ldhu	r3,12(r16)
   118e0:	00bfffc4 	movi	r2,-1
   118e4:	18c01014 	ori	r3,r3,64
   118e8:	80c0030d 	sth	r3,12(r16)
   118ec:	00c00244 	movi	r3,9
   118f0:	a8c00015 	stw	r3,0(r21)
   118f4:	003ef906 	br	114dc <__sfvwrite_r+0xc8>

000118f8 <_malloc_r>:
   118f8:	defff604 	addi	sp,sp,-40
   118fc:	dc800215 	stw	r18,8(sp)
   11900:	dfc00915 	stw	ra,36(sp)
   11904:	df000815 	stw	fp,32(sp)
   11908:	ddc00715 	stw	r23,28(sp)
   1190c:	dd800615 	stw	r22,24(sp)
   11910:	dd400515 	stw	r21,20(sp)
   11914:	dd000415 	stw	r20,16(sp)
   11918:	dcc00315 	stw	r19,12(sp)
   1191c:	dc400115 	stw	r17,4(sp)
   11920:	dc000015 	stw	r16,0(sp)
   11924:	288002c4 	addi	r2,r5,11
   11928:	00c00584 	movi	r3,22
   1192c:	2025883a 	mov	r18,r4
   11930:	18802b2e 	bgeu	r3,r2,119e0 <_malloc_r+0xe8>
   11934:	047ffe04 	movi	r17,-8
   11938:	1462703a 	and	r17,r2,r17
   1193c:	88002a16 	blt	r17,zero,119e8 <_malloc_r+0xf0>
   11940:	89402936 	bltu	r17,r5,119e8 <_malloc_r+0xf0>
   11944:	9009883a 	mov	r4,r18
   11948:	00143d00 	call	143d0 <__malloc_lock>
   1194c:	00807dc4 	movi	r2,503
   11950:	14402936 	bltu	r2,r17,119f8 <_malloc_r+0x100>
   11954:	8808d0fa 	srli	r4,r17,3
   11958:	04c00074 	movhi	r19,1
   1195c:	9cddf904 	addi	r19,r19,30692
   11960:	2105883a 	add	r2,r4,r4
   11964:	1085883a 	add	r2,r2,r2
   11968:	1085883a 	add	r2,r2,r2
   1196c:	9885883a 	add	r2,r19,r2
   11970:	14000317 	ldw	r16,12(r2)
   11974:	80815526 	beq	r16,r2,11ecc <_malloc_r+0x5d4>
   11978:	81000117 	ldw	r4,4(r16)
   1197c:	00bfff04 	movi	r2,-4
   11980:	80c00317 	ldw	r3,12(r16)
   11984:	2084703a 	and	r2,r4,r2
   11988:	8085883a 	add	r2,r16,r2
   1198c:	11800117 	ldw	r6,4(r2)
   11990:	81400217 	ldw	r5,8(r16)
   11994:	9009883a 	mov	r4,r18
   11998:	31800054 	ori	r6,r6,1
   1199c:	11800115 	stw	r6,4(r2)
   119a0:	28c00315 	stw	r3,12(r5)
   119a4:	19400215 	stw	r5,8(r3)
   119a8:	00143f00 	call	143f0 <__malloc_unlock>
   119ac:	80800204 	addi	r2,r16,8
   119b0:	dfc00917 	ldw	ra,36(sp)
   119b4:	df000817 	ldw	fp,32(sp)
   119b8:	ddc00717 	ldw	r23,28(sp)
   119bc:	dd800617 	ldw	r22,24(sp)
   119c0:	dd400517 	ldw	r21,20(sp)
   119c4:	dd000417 	ldw	r20,16(sp)
   119c8:	dcc00317 	ldw	r19,12(sp)
   119cc:	dc800217 	ldw	r18,8(sp)
   119d0:	dc400117 	ldw	r17,4(sp)
   119d4:	dc000017 	ldw	r16,0(sp)
   119d8:	dec00a04 	addi	sp,sp,40
   119dc:	f800283a 	ret
   119e0:	04400404 	movi	r17,16
   119e4:	897fd72e 	bgeu	r17,r5,11944 <_malloc_r+0x4c>
   119e8:	00800304 	movi	r2,12
   119ec:	90800015 	stw	r2,0(r18)
   119f0:	0005883a 	mov	r2,zero
   119f4:	003fee06 	br	119b0 <_malloc_r+0xb8>
   119f8:	8808d27a 	srli	r4,r17,9
   119fc:	20007126 	beq	r4,zero,11bc4 <_malloc_r+0x2cc>
   11a00:	00800104 	movi	r2,4
   11a04:	1100eb36 	bltu	r2,r4,11db4 <_malloc_r+0x4bc>
   11a08:	8808d1ba 	srli	r4,r17,6
   11a0c:	21000e04 	addi	r4,r4,56
   11a10:	210b883a 	add	r5,r4,r4
   11a14:	294b883a 	add	r5,r5,r5
   11a18:	294b883a 	add	r5,r5,r5
   11a1c:	04c00074 	movhi	r19,1
   11a20:	9cddf904 	addi	r19,r19,30692
   11a24:	994b883a 	add	r5,r19,r5
   11a28:	2c000317 	ldw	r16,12(r5)
   11a2c:	2c000e26 	beq	r5,r16,11a68 <_malloc_r+0x170>
   11a30:	80c00117 	ldw	r3,4(r16)
   11a34:	01ffff04 	movi	r7,-4
   11a38:	018003c4 	movi	r6,15
   11a3c:	19c6703a 	and	r3,r3,r7
   11a40:	1c45c83a 	sub	r2,r3,r17
   11a44:	30800716 	blt	r6,r2,11a64 <_malloc_r+0x16c>
   11a48:	1000610e 	bge	r2,zero,11bd0 <_malloc_r+0x2d8>
   11a4c:	84000317 	ldw	r16,12(r16)
   11a50:	2c000526 	beq	r5,r16,11a68 <_malloc_r+0x170>
   11a54:	80c00117 	ldw	r3,4(r16)
   11a58:	19c6703a 	and	r3,r3,r7
   11a5c:	1c45c83a 	sub	r2,r3,r17
   11a60:	30bff90e 	bge	r6,r2,11a48 <_malloc_r+0x150>
   11a64:	213fffc4 	addi	r4,r4,-1
   11a68:	21000044 	addi	r4,r4,1
   11a6c:	9c000417 	ldw	r16,16(r19)
   11a70:	00c00074 	movhi	r3,1
   11a74:	18ddf904 	addi	r3,r3,30692
   11a78:	1a400204 	addi	r9,r3,8
   11a7c:	8240ff26 	beq	r16,r9,11e7c <_malloc_r+0x584>
   11a80:	81400117 	ldw	r5,4(r16)
   11a84:	00bfff04 	movi	r2,-4
   11a88:	018003c4 	movi	r6,15
   11a8c:	2884703a 	and	r2,r5,r2
   11a90:	144bc83a 	sub	r5,r2,r17
   11a94:	3140ea16 	blt	r6,r5,11e40 <_malloc_r+0x548>
   11a98:	1a400515 	stw	r9,20(r3)
   11a9c:	1a400415 	stw	r9,16(r3)
   11aa0:	2800570e 	bge	r5,zero,11c00 <_malloc_r+0x308>
   11aa4:	01407fc4 	movi	r5,511
   11aa8:	2880ca36 	bltu	r5,r2,11dd4 <_malloc_r+0x4dc>
   11aac:	1004d0fa 	srli	r2,r2,3
   11ab0:	02000044 	movi	r8,1
   11ab4:	19c00117 	ldw	r7,4(r3)
   11ab8:	108b883a 	add	r5,r2,r2
   11abc:	294b883a 	add	r5,r5,r5
   11ac0:	1005d0ba 	srai	r2,r2,2
   11ac4:	294b883a 	add	r5,r5,r5
   11ac8:	28cb883a 	add	r5,r5,r3
   11acc:	29800217 	ldw	r6,8(r5)
   11ad0:	4084983a 	sll	r2,r8,r2
   11ad4:	81400315 	stw	r5,12(r16)
   11ad8:	81800215 	stw	r6,8(r16)
   11adc:	11c4b03a 	or	r2,r2,r7
   11ae0:	18800115 	stw	r2,4(r3)
   11ae4:	2c000215 	stw	r16,8(r5)
   11ae8:	34000315 	stw	r16,12(r6)
   11aec:	200bd0ba 	srai	r5,r4,2
   11af0:	00c00044 	movi	r3,1
   11af4:	194a983a 	sll	r5,r3,r5
   11af8:	11404936 	bltu	r2,r5,11c20 <_malloc_r+0x328>
   11afc:	1146703a 	and	r3,r2,r5
   11b00:	18000a1e 	bne	r3,zero,11b2c <_malloc_r+0x234>
   11b04:	00ffff04 	movi	r3,-4
   11b08:	294b883a 	add	r5,r5,r5
   11b0c:	20c8703a 	and	r4,r4,r3
   11b10:	1146703a 	and	r3,r2,r5
   11b14:	21000104 	addi	r4,r4,4
   11b18:	1800041e 	bne	r3,zero,11b2c <_malloc_r+0x234>
   11b1c:	294b883a 	add	r5,r5,r5
   11b20:	1146703a 	and	r3,r2,r5
   11b24:	21000104 	addi	r4,r4,4
   11b28:	183ffc26 	beq	r3,zero,11b1c <_malloc_r+0x224>
   11b2c:	023fff04 	movi	r8,-4
   11b30:	01c003c4 	movi	r7,15
   11b34:	2105883a 	add	r2,r4,r4
   11b38:	1085883a 	add	r2,r2,r2
   11b3c:	1085883a 	add	r2,r2,r2
   11b40:	9899883a 	add	r12,r19,r2
   11b44:	62800304 	addi	r10,r12,12
   11b48:	2017883a 	mov	r11,r4
   11b4c:	54000017 	ldw	r16,0(r10)
   11b50:	51bffd04 	addi	r6,r10,-12
   11b54:	8180041e 	bne	r16,r6,11b68 <_malloc_r+0x270>
   11b58:	0000ca06 	br	11e84 <_malloc_r+0x58c>
   11b5c:	10001c0e 	bge	r2,zero,11bd0 <_malloc_r+0x2d8>
   11b60:	84000317 	ldw	r16,12(r16)
   11b64:	8180c726 	beq	r16,r6,11e84 <_malloc_r+0x58c>
   11b68:	80c00117 	ldw	r3,4(r16)
   11b6c:	1a06703a 	and	r3,r3,r8
   11b70:	1c45c83a 	sub	r2,r3,r17
   11b74:	38bff90e 	bge	r7,r2,11b5c <_malloc_r+0x264>
   11b78:	81000317 	ldw	r4,12(r16)
   11b7c:	81400217 	ldw	r5,8(r16)
   11b80:	8447883a 	add	r3,r16,r17
   11b84:	8c400054 	ori	r17,r17,1
   11b88:	29000315 	stw	r4,12(r5)
   11b8c:	21400215 	stw	r5,8(r4)
   11b90:	84400115 	stw	r17,4(r16)
   11b94:	1889883a 	add	r4,r3,r2
   11b98:	11400054 	ori	r5,r2,1
   11b9c:	98c00515 	stw	r3,20(r19)
   11ba0:	98c00415 	stw	r3,16(r19)
   11ba4:	20800015 	stw	r2,0(r4)
   11ba8:	1a400315 	stw	r9,12(r3)
   11bac:	1a400215 	stw	r9,8(r3)
   11bb0:	19400115 	stw	r5,4(r3)
   11bb4:	9009883a 	mov	r4,r18
   11bb8:	00143f00 	call	143f0 <__malloc_unlock>
   11bbc:	80800204 	addi	r2,r16,8
   11bc0:	003f7b06 	br	119b0 <_malloc_r+0xb8>
   11bc4:	8808d0fa 	srli	r4,r17,3
   11bc8:	210b883a 	add	r5,r4,r4
   11bcc:	003f9106 	br	11a14 <_malloc_r+0x11c>
   11bd0:	80c7883a 	add	r3,r16,r3
   11bd4:	19400117 	ldw	r5,4(r3)
   11bd8:	80800317 	ldw	r2,12(r16)
   11bdc:	81000217 	ldw	r4,8(r16)
   11be0:	29400054 	ori	r5,r5,1
   11be4:	19400115 	stw	r5,4(r3)
   11be8:	20800315 	stw	r2,12(r4)
   11bec:	11000215 	stw	r4,8(r2)
   11bf0:	9009883a 	mov	r4,r18
   11bf4:	00143f00 	call	143f0 <__malloc_unlock>
   11bf8:	80800204 	addi	r2,r16,8
   11bfc:	003f6c06 	br	119b0 <_malloc_r+0xb8>
   11c00:	8085883a 	add	r2,r16,r2
   11c04:	10c00117 	ldw	r3,4(r2)
   11c08:	9009883a 	mov	r4,r18
   11c0c:	18c00054 	ori	r3,r3,1
   11c10:	10c00115 	stw	r3,4(r2)
   11c14:	00143f00 	call	143f0 <__malloc_unlock>
   11c18:	80800204 	addi	r2,r16,8
   11c1c:	003f6406 	br	119b0 <_malloc_r+0xb8>
   11c20:	9c000217 	ldw	r16,8(r19)
   11c24:	00bfff04 	movi	r2,-4
   11c28:	85400117 	ldw	r21,4(r16)
   11c2c:	a8aa703a 	and	r21,r21,r2
   11c30:	ac400336 	bltu	r21,r17,11c40 <_malloc_r+0x348>
   11c34:	ac45c83a 	sub	r2,r21,r17
   11c38:	00c003c4 	movi	r3,15
   11c3c:	18805316 	blt	r3,r2,11d8c <_malloc_r+0x494>
   11c40:	d5e8ca17 	ldw	r23,-23768(gp)
   11c44:	d0e00217 	ldw	r3,-32760(gp)
   11c48:	00bfffc4 	movi	r2,-1
   11c4c:	8579883a 	add	fp,r16,r21
   11c50:	8def883a 	add	r23,r17,r23
   11c54:	1880d226 	beq	r3,r2,11fa0 <_malloc_r+0x6a8>
   11c58:	bdc403c4 	addi	r23,r23,4111
   11c5c:	00bc0004 	movi	r2,-4096
   11c60:	b8ae703a 	and	r23,r23,r2
   11c64:	9009883a 	mov	r4,r18
   11c68:	b80b883a 	mov	r5,r23
   11c6c:	0012a3c0 	call	12a3c <_sbrk_r>
   11c70:	1029883a 	mov	r20,r2
   11c74:	00bfffc4 	movi	r2,-1
   11c78:	a080d126 	beq	r20,r2,11fc0 <_malloc_r+0x6c8>
   11c7c:	a7009f36 	bltu	r20,fp,11efc <_malloc_r+0x604>
   11c80:	058000b4 	movhi	r22,2
   11c84:	b5ac4f04 	addi	r22,r22,-20164
   11c88:	b0800017 	ldw	r2,0(r22)
   11c8c:	b885883a 	add	r2,r23,r2
   11c90:	b0800015 	stw	r2,0(r22)
   11c94:	e500cf26 	beq	fp,r20,11fd4 <_malloc_r+0x6dc>
   11c98:	d1200217 	ldw	r4,-32760(gp)
   11c9c:	00ffffc4 	movi	r3,-1
   11ca0:	20c0e026 	beq	r4,r3,12024 <_malloc_r+0x72c>
   11ca4:	a739c83a 	sub	fp,r20,fp
   11ca8:	1705883a 	add	r2,r2,fp
   11cac:	b0800015 	stw	r2,0(r22)
   11cb0:	a08001cc 	andi	r2,r20,7
   11cb4:	1000a526 	beq	r2,zero,11f4c <_malloc_r+0x654>
   11cb8:	a0a9c83a 	sub	r20,r20,r2
   11cbc:	00c40204 	movi	r3,4104
   11cc0:	a5000204 	addi	r20,r20,8
   11cc4:	1885c83a 	sub	r2,r3,r2
   11cc8:	a5c7883a 	add	r3,r20,r23
   11ccc:	18c3ffcc 	andi	r3,r3,4095
   11cd0:	10efc83a 	sub	r23,r2,r3
   11cd4:	9009883a 	mov	r4,r18
   11cd8:	b80b883a 	mov	r5,r23
   11cdc:	0012a3c0 	call	12a3c <_sbrk_r>
   11ce0:	00ffffc4 	movi	r3,-1
   11ce4:	10c0cc26 	beq	r2,r3,12018 <_malloc_r+0x720>
   11ce8:	1505c83a 	sub	r2,r2,r20
   11cec:	b887883a 	add	r3,r23,r2
   11cf0:	18c00054 	ori	r3,r3,1
   11cf4:	b0800017 	ldw	r2,0(r22)
   11cf8:	9d000215 	stw	r20,8(r19)
   11cfc:	a0c00115 	stw	r3,4(r20)
   11d00:	b885883a 	add	r2,r23,r2
   11d04:	b0800015 	stw	r2,0(r22)
   11d08:	84c00e26 	beq	r16,r19,11d44 <_malloc_r+0x44c>
   11d0c:	00c003c4 	movi	r3,15
   11d10:	1d40902e 	bgeu	r3,r21,11f54 <_malloc_r+0x65c>
   11d14:	ad7ffd04 	addi	r21,r21,-12
   11d18:	013ffe04 	movi	r4,-8
   11d1c:	a908703a 	and	r4,r21,r4
   11d20:	810b883a 	add	r5,r16,r4
   11d24:	01800144 	movi	r6,5
   11d28:	29800115 	stw	r6,4(r5)
   11d2c:	29800215 	stw	r6,8(r5)
   11d30:	81400117 	ldw	r5,4(r16)
   11d34:	2940004c 	andi	r5,r5,1
   11d38:	214ab03a 	or	r5,r4,r5
   11d3c:	81400115 	stw	r5,4(r16)
   11d40:	1900ae36 	bltu	r3,r4,11ffc <_malloc_r+0x704>
   11d44:	d0e8c917 	ldw	r3,-23772(gp)
   11d48:	1880012e 	bgeu	r3,r2,11d50 <_malloc_r+0x458>
   11d4c:	d0a8c915 	stw	r2,-23772(gp)
   11d50:	d0e8c817 	ldw	r3,-23776(gp)
   11d54:	9c000217 	ldw	r16,8(r19)
   11d58:	1880012e 	bgeu	r3,r2,11d60 <_malloc_r+0x468>
   11d5c:	d0a8c815 	stw	r2,-23776(gp)
   11d60:	80c00117 	ldw	r3,4(r16)
   11d64:	00bfff04 	movi	r2,-4
   11d68:	1886703a 	and	r3,r3,r2
   11d6c:	1c45c83a 	sub	r2,r3,r17
   11d70:	1c400236 	bltu	r3,r17,11d7c <_malloc_r+0x484>
   11d74:	00c003c4 	movi	r3,15
   11d78:	18800416 	blt	r3,r2,11d8c <_malloc_r+0x494>
   11d7c:	9009883a 	mov	r4,r18
   11d80:	00143f00 	call	143f0 <__malloc_unlock>
   11d84:	0005883a 	mov	r2,zero
   11d88:	003f0906 	br	119b0 <_malloc_r+0xb8>
   11d8c:	88c00054 	ori	r3,r17,1
   11d90:	10800054 	ori	r2,r2,1
   11d94:	80c00115 	stw	r3,4(r16)
   11d98:	8463883a 	add	r17,r16,r17
   11d9c:	88800115 	stw	r2,4(r17)
   11da0:	9009883a 	mov	r4,r18
   11da4:	9c400215 	stw	r17,8(r19)
   11da8:	00143f00 	call	143f0 <__malloc_unlock>
   11dac:	80800204 	addi	r2,r16,8
   11db0:	003eff06 	br	119b0 <_malloc_r+0xb8>
   11db4:	00800504 	movi	r2,20
   11db8:	1100492e 	bgeu	r2,r4,11ee0 <_malloc_r+0x5e8>
   11dbc:	00801504 	movi	r2,84
   11dc0:	11005c36 	bltu	r2,r4,11f34 <_malloc_r+0x63c>
   11dc4:	8808d33a 	srli	r4,r17,12
   11dc8:	21001b84 	addi	r4,r4,110
   11dcc:	210b883a 	add	r5,r4,r4
   11dd0:	003f1006 	br	11a14 <_malloc_r+0x11c>
   11dd4:	1006d27a 	srli	r3,r2,9
   11dd8:	01400104 	movi	r5,4
   11ddc:	28c0432e 	bgeu	r5,r3,11eec <_malloc_r+0x5f4>
   11de0:	01400504 	movi	r5,20
   11de4:	28c07036 	bltu	r5,r3,11fa8 <_malloc_r+0x6b0>
   11de8:	194016c4 	addi	r5,r3,91
   11dec:	294d883a 	add	r6,r5,r5
   11df0:	318d883a 	add	r6,r6,r6
   11df4:	318d883a 	add	r6,r6,r6
   11df8:	998d883a 	add	r6,r19,r6
   11dfc:	30c00217 	ldw	r3,8(r6)
   11e00:	01c00074 	movhi	r7,1
   11e04:	39ddf904 	addi	r7,r7,30692
   11e08:	19805726 	beq	r3,r6,11f68 <_malloc_r+0x670>
   11e0c:	01ffff04 	movi	r7,-4
   11e10:	19400117 	ldw	r5,4(r3)
   11e14:	29ca703a 	and	r5,r5,r7
   11e18:	1140022e 	bgeu	r2,r5,11e24 <_malloc_r+0x52c>
   11e1c:	18c00217 	ldw	r3,8(r3)
   11e20:	30fffb1e 	bne	r6,r3,11e10 <_malloc_r+0x518>
   11e24:	19400317 	ldw	r5,12(r3)
   11e28:	98800117 	ldw	r2,4(r19)
   11e2c:	81400315 	stw	r5,12(r16)
   11e30:	80c00215 	stw	r3,8(r16)
   11e34:	2c000215 	stw	r16,8(r5)
   11e38:	1c000315 	stw	r16,12(r3)
   11e3c:	003f2b06 	br	11aec <_malloc_r+0x1f4>
   11e40:	8445883a 	add	r2,r16,r17
   11e44:	8c400054 	ori	r17,r17,1
   11e48:	18800515 	stw	r2,20(r3)
   11e4c:	18800415 	stw	r2,16(r3)
   11e50:	29000054 	ori	r4,r5,1
   11e54:	1147883a 	add	r3,r2,r5
   11e58:	84400115 	stw	r17,4(r16)
   11e5c:	11000115 	stw	r4,4(r2)
   11e60:	12400315 	stw	r9,12(r2)
   11e64:	12400215 	stw	r9,8(r2)
   11e68:	19400015 	stw	r5,0(r3)
   11e6c:	9009883a 	mov	r4,r18
   11e70:	00143f00 	call	143f0 <__malloc_unlock>
   11e74:	80800204 	addi	r2,r16,8
   11e78:	003ecd06 	br	119b0 <_malloc_r+0xb8>
   11e7c:	18800117 	ldw	r2,4(r3)
   11e80:	003f1a06 	br	11aec <_malloc_r+0x1f4>
   11e84:	5ac00044 	addi	r11,r11,1
   11e88:	588000cc 	andi	r2,r11,3
   11e8c:	52800204 	addi	r10,r10,8
   11e90:	103f2e1e 	bne	r2,zero,11b4c <_malloc_r+0x254>
   11e94:	20c000cc 	andi	r3,r4,3
   11e98:	60bffe04 	addi	r2,r12,-8
   11e9c:	18006f26 	beq	r3,zero,1205c <_malloc_r+0x764>
   11ea0:	63000017 	ldw	r12,0(r12)
   11ea4:	213fffc4 	addi	r4,r4,-1
   11ea8:	60bffa26 	beq	r12,r2,11e94 <_malloc_r+0x59c>
   11eac:	98800117 	ldw	r2,4(r19)
   11eb0:	294b883a 	add	r5,r5,r5
   11eb4:	117f5a36 	bltu	r2,r5,11c20 <_malloc_r+0x328>
   11eb8:	283f5926 	beq	r5,zero,11c20 <_malloc_r+0x328>
   11ebc:	1146703a 	and	r3,r2,r5
   11ec0:	18001626 	beq	r3,zero,11f1c <_malloc_r+0x624>
   11ec4:	5809883a 	mov	r4,r11
   11ec8:	003f1a06 	br	11b34 <_malloc_r+0x23c>
   11ecc:	80800204 	addi	r2,r16,8
   11ed0:	84000517 	ldw	r16,20(r16)
   11ed4:	143ea81e 	bne	r2,r16,11978 <_malloc_r+0x80>
   11ed8:	21000084 	addi	r4,r4,2
   11edc:	003ee306 	br	11a6c <_malloc_r+0x174>
   11ee0:	210016c4 	addi	r4,r4,91
   11ee4:	210b883a 	add	r5,r4,r4
   11ee8:	003eca06 	br	11a14 <_malloc_r+0x11c>
   11eec:	100ad1ba 	srli	r5,r2,6
   11ef0:	29400e04 	addi	r5,r5,56
   11ef4:	294d883a 	add	r6,r5,r5
   11ef8:	003fbd06 	br	11df0 <_malloc_r+0x4f8>
   11efc:	84ff6026 	beq	r16,r19,11c80 <_malloc_r+0x388>
   11f00:	00800074 	movhi	r2,1
   11f04:	109df904 	addi	r2,r2,30692
   11f08:	14000217 	ldw	r16,8(r2)
   11f0c:	00bfff04 	movi	r2,-4
   11f10:	80c00117 	ldw	r3,4(r16)
   11f14:	1886703a 	and	r3,r3,r2
   11f18:	003f9406 	br	11d6c <_malloc_r+0x474>
   11f1c:	294b883a 	add	r5,r5,r5
   11f20:	1146703a 	and	r3,r2,r5
   11f24:	5ac00104 	addi	r11,r11,4
   11f28:	183ffc26 	beq	r3,zero,11f1c <_malloc_r+0x624>
   11f2c:	5809883a 	mov	r4,r11
   11f30:	003f0006 	br	11b34 <_malloc_r+0x23c>
   11f34:	00805504 	movi	r2,340
   11f38:	11001336 	bltu	r2,r4,11f88 <_malloc_r+0x690>
   11f3c:	8808d3fa 	srli	r4,r17,15
   11f40:	21001dc4 	addi	r4,r4,119
   11f44:	210b883a 	add	r5,r4,r4
   11f48:	003eb206 	br	11a14 <_malloc_r+0x11c>
   11f4c:	00840004 	movi	r2,4096
   11f50:	003f5d06 	br	11cc8 <_malloc_r+0x3d0>
   11f54:	00800044 	movi	r2,1
   11f58:	a0800115 	stw	r2,4(r20)
   11f5c:	a021883a 	mov	r16,r20
   11f60:	0007883a 	mov	r3,zero
   11f64:	003f8106 	br	11d6c <_malloc_r+0x474>
   11f68:	280bd0ba 	srai	r5,r5,2
   11f6c:	01800044 	movi	r6,1
   11f70:	38800117 	ldw	r2,4(r7)
   11f74:	314c983a 	sll	r6,r6,r5
   11f78:	180b883a 	mov	r5,r3
   11f7c:	3084b03a 	or	r2,r6,r2
   11f80:	38800115 	stw	r2,4(r7)
   11f84:	003fa906 	br	11e2c <_malloc_r+0x534>
   11f88:	00815504 	movi	r2,1364
   11f8c:	11001836 	bltu	r2,r4,11ff0 <_malloc_r+0x6f8>
   11f90:	8808d4ba 	srli	r4,r17,18
   11f94:	21001f04 	addi	r4,r4,124
   11f98:	210b883a 	add	r5,r4,r4
   11f9c:	003e9d06 	br	11a14 <_malloc_r+0x11c>
   11fa0:	bdc00404 	addi	r23,r23,16
   11fa4:	003f2f06 	br	11c64 <_malloc_r+0x36c>
   11fa8:	01401504 	movi	r5,84
   11fac:	28c01f36 	bltu	r5,r3,1202c <_malloc_r+0x734>
   11fb0:	100ad33a 	srli	r5,r2,12
   11fb4:	29401b84 	addi	r5,r5,110
   11fb8:	294d883a 	add	r6,r5,r5
   11fbc:	003f8c06 	br	11df0 <_malloc_r+0x4f8>
   11fc0:	9c000217 	ldw	r16,8(r19)
   11fc4:	00bfff04 	movi	r2,-4
   11fc8:	80c00117 	ldw	r3,4(r16)
   11fcc:	1886703a 	and	r3,r3,r2
   11fd0:	003f6606 	br	11d6c <_malloc_r+0x474>
   11fd4:	e0c3ffcc 	andi	r3,fp,4095
   11fd8:	183f2f1e 	bne	r3,zero,11c98 <_malloc_r+0x3a0>
   11fdc:	98c00217 	ldw	r3,8(r19)
   11fe0:	bd49883a 	add	r4,r23,r21
   11fe4:	21000054 	ori	r4,r4,1
   11fe8:	19000115 	stw	r4,4(r3)
   11fec:	003f5506 	br	11d44 <_malloc_r+0x44c>
   11ff0:	01403f04 	movi	r5,252
   11ff4:	01001f84 	movi	r4,126
   11ff8:	003e8606 	br	11a14 <_malloc_r+0x11c>
   11ffc:	9009883a 	mov	r4,r18
   12000:	81400204 	addi	r5,r16,8
   12004:	00132540 	call	13254 <_free_r>
   12008:	008000b4 	movhi	r2,2
   1200c:	10ac4f04 	addi	r2,r2,-20164
   12010:	10800017 	ldw	r2,0(r2)
   12014:	003f4b06 	br	11d44 <_malloc_r+0x44c>
   12018:	00c00044 	movi	r3,1
   1201c:	002f883a 	mov	r23,zero
   12020:	003f3406 	br	11cf4 <_malloc_r+0x3fc>
   12024:	d5200215 	stw	r20,-32760(gp)
   12028:	003f2106 	br	11cb0 <_malloc_r+0x3b8>
   1202c:	01405504 	movi	r5,340
   12030:	28c00436 	bltu	r5,r3,12044 <_malloc_r+0x74c>
   12034:	100ad3fa 	srli	r5,r2,15
   12038:	29401dc4 	addi	r5,r5,119
   1203c:	294d883a 	add	r6,r5,r5
   12040:	003f6b06 	br	11df0 <_malloc_r+0x4f8>
   12044:	01415504 	movi	r5,1364
   12048:	28c00936 	bltu	r5,r3,12070 <_malloc_r+0x778>
   1204c:	100ad4ba 	srli	r5,r2,18
   12050:	29401f04 	addi	r5,r5,124
   12054:	294d883a 	add	r6,r5,r5
   12058:	003f6506 	br	11df0 <_malloc_r+0x4f8>
   1205c:	98800117 	ldw	r2,4(r19)
   12060:	0146303a 	nor	r3,zero,r5
   12064:	1884703a 	and	r2,r3,r2
   12068:	98800115 	stw	r2,4(r19)
   1206c:	003f9006 	br	11eb0 <_malloc_r+0x5b8>
   12070:	01803f04 	movi	r6,252
   12074:	01401f84 	movi	r5,126
   12078:	003f5d06 	br	11df0 <_malloc_r+0x4f8>

0001207c <memchr>:
   1207c:	008000c4 	movi	r2,3
   12080:	29403fcc 	andi	r5,r5,255
   12084:	1180282e 	bgeu	r2,r6,12128 <memchr+0xac>
   12088:	2086703a 	and	r3,r4,r2
   1208c:	1800351e 	bne	r3,zero,12164 <memchr+0xe8>
   12090:	2816923a 	slli	r11,r5,8
   12094:	2093883a 	add	r9,r4,r2
   12098:	22000084 	addi	r8,r4,2
   1209c:	5957883a 	add	r11,r11,r5
   120a0:	5816923a 	slli	r11,r11,8
   120a4:	20c00044 	addi	r3,r4,1
   120a8:	037fbff4 	movhi	r13,65279
   120ac:	6b7fbfc4 	addi	r13,r13,-257
   120b0:	5957883a 	add	r11,r11,r5
   120b4:	5816923a 	slli	r11,r11,8
   120b8:	03202074 	movhi	r12,32897
   120bc:	63202004 	addi	r12,r12,-32640
   120c0:	101d883a 	mov	r14,r2
   120c4:	5957883a 	add	r11,r11,r5
   120c8:	21c00017 	ldw	r7,0(r4)
   120cc:	31bfff04 	addi	r6,r6,-4
   120d0:	1805883a 	mov	r2,r3
   120d4:	3acef03a 	xor	r7,r7,r11
   120d8:	3b55883a 	add	r10,r7,r13
   120dc:	01ce303a 	nor	r7,zero,r7
   120e0:	51ce703a 	and	r7,r10,r7
   120e4:	3b0e703a 	and	r7,r7,r12
   120e8:	38000a26 	beq	r7,zero,12114 <memchr+0x98>
   120ec:	21c00003 	ldbu	r7,0(r4)
   120f0:	39401e26 	beq	r7,r5,1216c <memchr+0xf0>
   120f4:	19c00003 	ldbu	r7,0(r3)
   120f8:	39401926 	beq	r7,r5,12160 <memchr+0xe4>
   120fc:	41c00003 	ldbu	r7,0(r8)
   12100:	4005883a 	mov	r2,r8
   12104:	39401626 	beq	r7,r5,12160 <memchr+0xe4>
   12108:	49c00003 	ldbu	r7,0(r9)
   1210c:	4805883a 	mov	r2,r9
   12110:	39401326 	beq	r7,r5,12160 <memchr+0xe4>
   12114:	21000104 	addi	r4,r4,4
   12118:	4a400104 	addi	r9,r9,4
   1211c:	42000104 	addi	r8,r8,4
   12120:	18c00104 	addi	r3,r3,4
   12124:	71bfe836 	bltu	r14,r6,120c8 <memchr+0x4c>
   12128:	2005883a 	mov	r2,r4
   1212c:	30000a26 	beq	r6,zero,12158 <memchr+0xdc>
   12130:	10c00003 	ldbu	r3,0(r2)
   12134:	19400a26 	beq	r3,r5,12160 <memchr+0xe4>
   12138:	10c00044 	addi	r3,r2,1
   1213c:	118d883a 	add	r6,r2,r6
   12140:	00000306 	br	12150 <memchr+0xd4>
   12144:	11000003 	ldbu	r4,0(r2)
   12148:	18c00044 	addi	r3,r3,1
   1214c:	21400426 	beq	r4,r5,12160 <memchr+0xe4>
   12150:	1805883a 	mov	r2,r3
   12154:	19bffb1e 	bne	r3,r6,12144 <memchr+0xc8>
   12158:	0005883a 	mov	r2,zero
   1215c:	f800283a 	ret
   12160:	f800283a 	ret
   12164:	2005883a 	mov	r2,r4
   12168:	003ff106 	br	12130 <memchr+0xb4>
   1216c:	2005883a 	mov	r2,r4
   12170:	f800283a 	ret

00012174 <memcpy>:
   12174:	defffb04 	addi	sp,sp,-20
   12178:	dc000015 	stw	r16,0(sp)
   1217c:	dfc00415 	stw	ra,16(sp)
   12180:	dcc00315 	stw	r19,12(sp)
   12184:	dc800215 	stw	r18,8(sp)
   12188:	dc400115 	stw	r17,4(sp)
   1218c:	00c003c4 	movi	r3,15
   12190:	2021883a 	mov	r16,r4
   12194:	3005883a 	mov	r2,r6
   12198:	1980032e 	bgeu	r3,r6,121a8 <memcpy+0x34>
   1219c:	2906b03a 	or	r3,r5,r4
   121a0:	18c000cc 	andi	r3,r3,3
   121a4:	18001026 	beq	r3,zero,121e8 <memcpy+0x74>
   121a8:	8007883a 	mov	r3,r16
   121ac:	288f883a 	add	r7,r5,r2
   121b0:	10000526 	beq	r2,zero,121c8 <memcpy+0x54>
   121b4:	29800003 	ldbu	r6,0(r5)
   121b8:	18c00044 	addi	r3,r3,1
   121bc:	29400044 	addi	r5,r5,1
   121c0:	19bfffc5 	stb	r6,-1(r3)
   121c4:	29fffb1e 	bne	r5,r7,121b4 <memcpy+0x40>
   121c8:	8005883a 	mov	r2,r16
   121cc:	dfc00417 	ldw	ra,16(sp)
   121d0:	dcc00317 	ldw	r19,12(sp)
   121d4:	dc800217 	ldw	r18,8(sp)
   121d8:	dc400117 	ldw	r17,4(sp)
   121dc:	dc000017 	ldw	r16,0(sp)
   121e0:	dec00504 	addi	sp,sp,20
   121e4:	f800283a 	ret
   121e8:	32bffc04 	addi	r10,r6,-16
   121ec:	5014d13a 	srli	r10,r10,4
   121f0:	20800404 	addi	r2,r4,16
   121f4:	2007883a 	mov	r3,r4
   121f8:	5008913a 	slli	r4,r10,4
   121fc:	280f883a 	mov	r7,r5
   12200:	1105883a 	add	r2,r2,r4
   12204:	3a000017 	ldw	r8,0(r7)
   12208:	18c00404 	addi	r3,r3,16
   1220c:	39c00404 	addi	r7,r7,16
   12210:	1a3ffc15 	stw	r8,-16(r3)
   12214:	3a3ffd17 	ldw	r8,-12(r7)
   12218:	1a3ffd15 	stw	r8,-12(r3)
   1221c:	3a3ffe17 	ldw	r8,-8(r7)
   12220:	1a3ffe15 	stw	r8,-8(r3)
   12224:	3a3fff17 	ldw	r8,-4(r7)
   12228:	1a3fff15 	stw	r8,-4(r3)
   1222c:	18bff51e 	bne	r3,r2,12204 <memcpy+0x90>
   12230:	52800044 	addi	r10,r10,1
   12234:	5014913a 	slli	r10,r10,4
   12238:	308003cc 	andi	r2,r6,15
   1223c:	010000c4 	movi	r4,3
   12240:	8287883a 	add	r3,r16,r10
   12244:	2a95883a 	add	r10,r5,r10
   12248:	2080182e 	bgeu	r4,r2,122ac <memcpy+0x138>
   1224c:	147fff04 	addi	r17,r2,-4
   12250:	8808d0ba 	srli	r4,r17,2
   12254:	1a400104 	addi	r9,r3,4
   12258:	180d883a 	mov	r6,r3
   1225c:	2105883a 	add	r2,r4,r4
   12260:	1085883a 	add	r2,r2,r2
   12264:	4893883a 	add	r9,r9,r2
   12268:	500f883a 	mov	r7,r10
   1226c:	3a000017 	ldw	r8,0(r7)
   12270:	31800104 	addi	r6,r6,4
   12274:	39c00104 	addi	r7,r7,4
   12278:	323fff15 	stw	r8,-4(r6)
   1227c:	327ffb1e 	bne	r6,r9,1226c <memcpy+0xf8>
   12280:	20800044 	addi	r2,r4,1
   12284:	1085883a 	add	r2,r2,r2
   12288:	1085883a 	add	r2,r2,r2
   1228c:	017fff04 	movi	r5,-4
   12290:	18a5883a 	add	r18,r3,r2
   12294:	50a7883a 	add	r19,r10,r2
   12298:	00112c80 	call	112c8 <__mulsi3>
   1229c:	1445883a 	add	r2,r2,r17
   122a0:	980b883a 	mov	r5,r19
   122a4:	9007883a 	mov	r3,r18
   122a8:	003fc006 	br	121ac <memcpy+0x38>
   122ac:	500b883a 	mov	r5,r10
   122b0:	003fbe06 	br	121ac <memcpy+0x38>

000122b4 <memmove>:
   122b4:	defffb04 	addi	sp,sp,-20
   122b8:	dc000015 	stw	r16,0(sp)
   122bc:	dfc00415 	stw	ra,16(sp)
   122c0:	dcc00315 	stw	r19,12(sp)
   122c4:	dc800215 	stw	r18,8(sp)
   122c8:	dc400115 	stw	r17,4(sp)
   122cc:	2021883a 	mov	r16,r4
   122d0:	300f883a 	mov	r7,r6
   122d4:	2900122e 	bgeu	r5,r4,12320 <memmove+0x6c>
   122d8:	2987883a 	add	r3,r5,r6
   122dc:	20c0102e 	bgeu	r4,r3,12320 <memmove+0x6c>
   122e0:	218b883a 	add	r5,r4,r6
   122e4:	1989c83a 	sub	r4,r3,r6
   122e8:	30000526 	beq	r6,zero,12300 <memmove+0x4c>
   122ec:	18ffffc4 	addi	r3,r3,-1
   122f0:	18800003 	ldbu	r2,0(r3)
   122f4:	297fffc4 	addi	r5,r5,-1
   122f8:	28800005 	stb	r2,0(r5)
   122fc:	193ffb1e 	bne	r3,r4,122ec <memmove+0x38>
   12300:	8005883a 	mov	r2,r16
   12304:	dfc00417 	ldw	ra,16(sp)
   12308:	dcc00317 	ldw	r19,12(sp)
   1230c:	dc800217 	ldw	r18,8(sp)
   12310:	dc400117 	ldw	r17,4(sp)
   12314:	dc000017 	ldw	r16,0(sp)
   12318:	dec00504 	addi	sp,sp,20
   1231c:	f800283a 	ret
   12320:	008003c4 	movi	r2,15
   12324:	1180422e 	bgeu	r2,r6,12430 <memmove+0x17c>
   12328:	2c04b03a 	or	r2,r5,r16
   1232c:	108000cc 	andi	r2,r2,3
   12330:	10003f1e 	bne	r2,zero,12430 <memmove+0x17c>
   12334:	32bffc04 	addi	r10,r6,-16
   12338:	5014d13a 	srli	r10,r10,4
   1233c:	81000404 	addi	r4,r16,16
   12340:	8007883a 	mov	r3,r16
   12344:	5004913a 	slli	r2,r10,4
   12348:	280f883a 	mov	r7,r5
   1234c:	2089883a 	add	r4,r4,r2
   12350:	38800017 	ldw	r2,0(r7)
   12354:	18c00404 	addi	r3,r3,16
   12358:	39c00404 	addi	r7,r7,16
   1235c:	18bffc15 	stw	r2,-16(r3)
   12360:	38bffd17 	ldw	r2,-12(r7)
   12364:	18bffd15 	stw	r2,-12(r3)
   12368:	38bffe17 	ldw	r2,-8(r7)
   1236c:	18bffe15 	stw	r2,-8(r3)
   12370:	38bfff17 	ldw	r2,-4(r7)
   12374:	18bfff15 	stw	r2,-4(r3)
   12378:	193ff51e 	bne	r3,r4,12350 <memmove+0x9c>
   1237c:	52800044 	addi	r10,r10,1
   12380:	5014913a 	slli	r10,r10,4
   12384:	31c003cc 	andi	r7,r6,15
   12388:	008000c4 	movi	r2,3
   1238c:	8287883a 	add	r3,r16,r10
   12390:	2a95883a 	add	r10,r5,r10
   12394:	11c0282e 	bgeu	r2,r7,12438 <memmove+0x184>
   12398:	3c7fff04 	addi	r17,r7,-4
   1239c:	8808d0ba 	srli	r4,r17,2
   123a0:	1a400104 	addi	r9,r3,4
   123a4:	180d883a 	mov	r6,r3
   123a8:	2105883a 	add	r2,r4,r4
   123ac:	1085883a 	add	r2,r2,r2
   123b0:	4893883a 	add	r9,r9,r2
   123b4:	5005883a 	mov	r2,r10
   123b8:	12000017 	ldw	r8,0(r2)
   123bc:	31800104 	addi	r6,r6,4
   123c0:	10800104 	addi	r2,r2,4
   123c4:	323fff15 	stw	r8,-4(r6)
   123c8:	327ffb1e 	bne	r6,r9,123b8 <memmove+0x104>
   123cc:	20800044 	addi	r2,r4,1
   123d0:	1085883a 	add	r2,r2,r2
   123d4:	1085883a 	add	r2,r2,r2
   123d8:	017fff04 	movi	r5,-4
   123dc:	18a5883a 	add	r18,r3,r2
   123e0:	50a7883a 	add	r19,r10,r2
   123e4:	00112c80 	call	112c8 <__mulsi3>
   123e8:	144f883a 	add	r7,r2,r17
   123ec:	980b883a 	mov	r5,r19
   123f0:	9007883a 	mov	r3,r18
   123f4:	383fc226 	beq	r7,zero,12300 <memmove+0x4c>
   123f8:	19cf883a 	add	r7,r3,r7
   123fc:	29800003 	ldbu	r6,0(r5)
   12400:	18c00044 	addi	r3,r3,1
   12404:	29400044 	addi	r5,r5,1
   12408:	19bfffc5 	stb	r6,-1(r3)
   1240c:	19fffb1e 	bne	r3,r7,123fc <memmove+0x148>
   12410:	8005883a 	mov	r2,r16
   12414:	dfc00417 	ldw	ra,16(sp)
   12418:	dcc00317 	ldw	r19,12(sp)
   1241c:	dc800217 	ldw	r18,8(sp)
   12420:	dc400117 	ldw	r17,4(sp)
   12424:	dc000017 	ldw	r16,0(sp)
   12428:	dec00504 	addi	sp,sp,20
   1242c:	f800283a 	ret
   12430:	8007883a 	mov	r3,r16
   12434:	003fef06 	br	123f4 <memmove+0x140>
   12438:	500b883a 	mov	r5,r10
   1243c:	003fed06 	br	123f4 <memmove+0x140>

00012440 <_realloc_r>:
   12440:	defff504 	addi	sp,sp,-44
   12444:	dd400615 	stw	r21,24(sp)
   12448:	dc800315 	stw	r18,12(sp)
   1244c:	dc000115 	stw	r16,4(sp)
   12450:	dfc00a15 	stw	ra,40(sp)
   12454:	df000915 	stw	fp,36(sp)
   12458:	ddc00815 	stw	r23,32(sp)
   1245c:	dd800715 	stw	r22,28(sp)
   12460:	dd000515 	stw	r20,20(sp)
   12464:	dcc00415 	stw	r19,16(sp)
   12468:	dc400215 	stw	r17,8(sp)
   1246c:	2821883a 	mov	r16,r5
   12470:	202b883a 	mov	r21,r4
   12474:	3025883a 	mov	r18,r6
   12478:	28009626 	beq	r5,zero,126d4 <_realloc_r+0x294>
   1247c:	00143d00 	call	143d0 <__malloc_lock>
   12480:	80bfff17 	ldw	r2,-4(r16)
   12484:	04ffff04 	movi	r19,-4
   12488:	90c002c4 	addi	r3,r18,11
   1248c:	01000584 	movi	r4,22
   12490:	85bffe04 	addi	r22,r16,-8
   12494:	14e6703a 	and	r19,r2,r19
   12498:	20c0372e 	bgeu	r4,r3,12578 <_realloc_r+0x138>
   1249c:	047ffe04 	movi	r17,-8
   124a0:	1c62703a 	and	r17,r3,r17
   124a4:	8807883a 	mov	r3,r17
   124a8:	88005a16 	blt	r17,zero,12614 <_realloc_r+0x1d4>
   124ac:	8c805936 	bltu	r17,r18,12614 <_realloc_r+0x1d4>
   124b0:	98c0340e 	bge	r19,r3,12584 <_realloc_r+0x144>
   124b4:	07000074 	movhi	fp,1
   124b8:	e71df904 	addi	fp,fp,30692
   124bc:	e1400217 	ldw	r5,8(fp)
   124c0:	b4c9883a 	add	r4,r22,r19
   124c4:	29009026 	beq	r5,r4,12708 <_realloc_r+0x2c8>
   124c8:	21800117 	ldw	r6,4(r4)
   124cc:	01ffff84 	movi	r7,-2
   124d0:	31ce703a 	and	r7,r6,r7
   124d4:	21cf883a 	add	r7,r4,r7
   124d8:	39c00117 	ldw	r7,4(r7)
   124dc:	39c0004c 	andi	r7,r7,1
   124e0:	38004326 	beq	r7,zero,125f0 <_realloc_r+0x1b0>
   124e4:	000d883a 	mov	r6,zero
   124e8:	0009883a 	mov	r4,zero
   124ec:	1080004c 	andi	r2,r2,1
   124f0:	10005a1e 	bne	r2,zero,1265c <_realloc_r+0x21c>
   124f4:	85fffe17 	ldw	r23,-8(r16)
   124f8:	00bfff04 	movi	r2,-4
   124fc:	b5efc83a 	sub	r23,r22,r23
   12500:	b9c00117 	ldw	r7,4(r23)
   12504:	388e703a 	and	r7,r7,r2
   12508:	3ccf883a 	add	r7,r7,r19
   1250c:	20005226 	beq	r4,zero,12658 <_realloc_r+0x218>
   12510:	31e9883a 	add	r20,r6,r7
   12514:	2140c726 	beq	r4,r5,12834 <_realloc_r+0x3f4>
   12518:	a0c04f16 	blt	r20,r3,12658 <_realloc_r+0x218>
   1251c:	20800317 	ldw	r2,12(r4)
   12520:	20c00217 	ldw	r3,8(r4)
   12524:	99bfff04 	addi	r6,r19,-4
   12528:	01000904 	movi	r4,36
   1252c:	18800315 	stw	r2,12(r3)
   12530:	10c00215 	stw	r3,8(r2)
   12534:	b8c00217 	ldw	r3,8(r23)
   12538:	b8800317 	ldw	r2,12(r23)
   1253c:	bc800204 	addi	r18,r23,8
   12540:	18800315 	stw	r2,12(r3)
   12544:	10c00215 	stw	r3,8(r2)
   12548:	2180ed36 	bltu	r4,r6,12900 <_realloc_r+0x4c0>
   1254c:	008004c4 	movi	r2,19
   12550:	11809b2e 	bgeu	r2,r6,127c0 <_realloc_r+0x380>
   12554:	80800017 	ldw	r2,0(r16)
   12558:	b8800215 	stw	r2,8(r23)
   1255c:	80800117 	ldw	r2,4(r16)
   12560:	b8800315 	stw	r2,12(r23)
   12564:	008006c4 	movi	r2,27
   12568:	1180f936 	bltu	r2,r6,12950 <_realloc_r+0x510>
   1256c:	b8800404 	addi	r2,r23,16
   12570:	80c00204 	addi	r3,r16,8
   12574:	00009406 	br	127c8 <_realloc_r+0x388>
   12578:	00c00404 	movi	r3,16
   1257c:	1823883a 	mov	r17,r3
   12580:	003fca06 	br	124ac <_realloc_r+0x6c>
   12584:	9829883a 	mov	r20,r19
   12588:	a447c83a 	sub	r3,r20,r17
   1258c:	010003c4 	movi	r4,15
   12590:	1080004c 	andi	r2,r2,1
   12594:	20c02336 	bltu	r4,r3,12624 <_realloc_r+0x1e4>
   12598:	1504b03a 	or	r2,r2,r20
   1259c:	b0800115 	stw	r2,4(r22)
   125a0:	b52d883a 	add	r22,r22,r20
   125a4:	b0800117 	ldw	r2,4(r22)
   125a8:	10800054 	ori	r2,r2,1
   125ac:	b0800115 	stw	r2,4(r22)
   125b0:	a809883a 	mov	r4,r21
   125b4:	00143f00 	call	143f0 <__malloc_unlock>
   125b8:	8025883a 	mov	r18,r16
   125bc:	9005883a 	mov	r2,r18
   125c0:	dfc00a17 	ldw	ra,40(sp)
   125c4:	df000917 	ldw	fp,36(sp)
   125c8:	ddc00817 	ldw	r23,32(sp)
   125cc:	dd800717 	ldw	r22,28(sp)
   125d0:	dd400617 	ldw	r21,24(sp)
   125d4:	dd000517 	ldw	r20,20(sp)
   125d8:	dcc00417 	ldw	r19,16(sp)
   125dc:	dc800317 	ldw	r18,12(sp)
   125e0:	dc400217 	ldw	r17,8(sp)
   125e4:	dc000117 	ldw	r16,4(sp)
   125e8:	dec00b04 	addi	sp,sp,44
   125ec:	f800283a 	ret
   125f0:	01ffff04 	movi	r7,-4
   125f4:	31cc703a 	and	r6,r6,r7
   125f8:	34e9883a 	add	r20,r6,r19
   125fc:	a0ffbb16 	blt	r20,r3,124ec <_realloc_r+0xac>
   12600:	20c00317 	ldw	r3,12(r4)
   12604:	21000217 	ldw	r4,8(r4)
   12608:	20c00315 	stw	r3,12(r4)
   1260c:	19000215 	stw	r4,8(r3)
   12610:	003fdd06 	br	12588 <_realloc_r+0x148>
   12614:	00800304 	movi	r2,12
   12618:	a8800015 	stw	r2,0(r21)
   1261c:	0025883a 	mov	r18,zero
   12620:	003fe606 	br	125bc <_realloc_r+0x17c>
   12624:	1444b03a 	or	r2,r2,r17
   12628:	b0800115 	stw	r2,4(r22)
   1262c:	b44b883a 	add	r5,r22,r17
   12630:	18800054 	ori	r2,r3,1
   12634:	28800115 	stw	r2,4(r5)
   12638:	28c7883a 	add	r3,r5,r3
   1263c:	18800117 	ldw	r2,4(r3)
   12640:	a809883a 	mov	r4,r21
   12644:	29400204 	addi	r5,r5,8
   12648:	10800054 	ori	r2,r2,1
   1264c:	18800115 	stw	r2,4(r3)
   12650:	00132540 	call	13254 <_free_r>
   12654:	003fd606 	br	125b0 <_realloc_r+0x170>
   12658:	38c0330e 	bge	r7,r3,12728 <_realloc_r+0x2e8>
   1265c:	900b883a 	mov	r5,r18
   12660:	a809883a 	mov	r4,r21
   12664:	00118f80 	call	118f8 <_malloc_r>
   12668:	1025883a 	mov	r18,r2
   1266c:	10001626 	beq	r2,zero,126c8 <_realloc_r+0x288>
   12670:	80bfff17 	ldw	r2,-4(r16)
   12674:	00ffff84 	movi	r3,-2
   12678:	913ffe04 	addi	r4,r18,-8
   1267c:	10c6703a 	and	r3,r2,r3
   12680:	b0c7883a 	add	r3,r22,r3
   12684:	20c09926 	beq	r4,r3,128ec <_realloc_r+0x4ac>
   12688:	99bfff04 	addi	r6,r19,-4
   1268c:	00800904 	movi	r2,36
   12690:	11806436 	bltu	r2,r6,12824 <_realloc_r+0x3e4>
   12694:	00c004c4 	movi	r3,19
   12698:	19804036 	bltu	r3,r6,1279c <_realloc_r+0x35c>
   1269c:	9005883a 	mov	r2,r18
   126a0:	8007883a 	mov	r3,r16
   126a4:	19000017 	ldw	r4,0(r3)
   126a8:	11000015 	stw	r4,0(r2)
   126ac:	19000117 	ldw	r4,4(r3)
   126b0:	11000115 	stw	r4,4(r2)
   126b4:	18c00217 	ldw	r3,8(r3)
   126b8:	10c00215 	stw	r3,8(r2)
   126bc:	a809883a 	mov	r4,r21
   126c0:	800b883a 	mov	r5,r16
   126c4:	00132540 	call	13254 <_free_r>
   126c8:	a809883a 	mov	r4,r21
   126cc:	00143f00 	call	143f0 <__malloc_unlock>
   126d0:	003fba06 	br	125bc <_realloc_r+0x17c>
   126d4:	300b883a 	mov	r5,r6
   126d8:	dfc00a17 	ldw	ra,40(sp)
   126dc:	df000917 	ldw	fp,36(sp)
   126e0:	ddc00817 	ldw	r23,32(sp)
   126e4:	dd800717 	ldw	r22,28(sp)
   126e8:	dd400617 	ldw	r21,24(sp)
   126ec:	dd000517 	ldw	r20,20(sp)
   126f0:	dcc00417 	ldw	r19,16(sp)
   126f4:	dc800317 	ldw	r18,12(sp)
   126f8:	dc400217 	ldw	r17,8(sp)
   126fc:	dc000117 	ldw	r16,4(sp)
   12700:	dec00b04 	addi	sp,sp,44
   12704:	00118f81 	jmpi	118f8 <_malloc_r>
   12708:	29800117 	ldw	r6,4(r5)
   1270c:	013fff04 	movi	r4,-4
   12710:	89c00404 	addi	r7,r17,16
   12714:	310c703a 	and	r6,r6,r4
   12718:	34c9883a 	add	r4,r6,r19
   1271c:	21c0340e 	bge	r4,r7,127f0 <_realloc_r+0x3b0>
   12720:	2809883a 	mov	r4,r5
   12724:	003f7106 	br	124ec <_realloc_r+0xac>
   12728:	b8800317 	ldw	r2,12(r23)
   1272c:	b8c00217 	ldw	r3,8(r23)
   12730:	99bfff04 	addi	r6,r19,-4
   12734:	01000904 	movi	r4,36
   12738:	18800315 	stw	r2,12(r3)
   1273c:	10c00215 	stw	r3,8(r2)
   12740:	bc800204 	addi	r18,r23,8
   12744:	21807836 	bltu	r4,r6,12928 <_realloc_r+0x4e8>
   12748:	008004c4 	movi	r2,19
   1274c:	1180732e 	bgeu	r2,r6,1291c <_realloc_r+0x4dc>
   12750:	80800017 	ldw	r2,0(r16)
   12754:	b8800215 	stw	r2,8(r23)
   12758:	80800117 	ldw	r2,4(r16)
   1275c:	b8800315 	stw	r2,12(r23)
   12760:	008006c4 	movi	r2,27
   12764:	11808936 	bltu	r2,r6,1298c <_realloc_r+0x54c>
   12768:	b8800404 	addi	r2,r23,16
   1276c:	80c00204 	addi	r3,r16,8
   12770:	19000017 	ldw	r4,0(r3)
   12774:	9021883a 	mov	r16,r18
   12778:	3829883a 	mov	r20,r7
   1277c:	11000015 	stw	r4,0(r2)
   12780:	19000117 	ldw	r4,4(r3)
   12784:	b82d883a 	mov	r22,r23
   12788:	11000115 	stw	r4,4(r2)
   1278c:	18c00217 	ldw	r3,8(r3)
   12790:	10c00215 	stw	r3,8(r2)
   12794:	b8800117 	ldw	r2,4(r23)
   12798:	003f7b06 	br	12588 <_realloc_r+0x148>
   1279c:	80c00017 	ldw	r3,0(r16)
   127a0:	90c00015 	stw	r3,0(r18)
   127a4:	80c00117 	ldw	r3,4(r16)
   127a8:	90c00115 	stw	r3,4(r18)
   127ac:	00c006c4 	movi	r3,27
   127b0:	19804636 	bltu	r3,r6,128cc <_realloc_r+0x48c>
   127b4:	90800204 	addi	r2,r18,8
   127b8:	80c00204 	addi	r3,r16,8
   127bc:	003fb906 	br	126a4 <_realloc_r+0x264>
   127c0:	9005883a 	mov	r2,r18
   127c4:	8007883a 	mov	r3,r16
   127c8:	19000017 	ldw	r4,0(r3)
   127cc:	9021883a 	mov	r16,r18
   127d0:	b82d883a 	mov	r22,r23
   127d4:	11000015 	stw	r4,0(r2)
   127d8:	19000117 	ldw	r4,4(r3)
   127dc:	11000115 	stw	r4,4(r2)
   127e0:	18c00217 	ldw	r3,8(r3)
   127e4:	10c00215 	stw	r3,8(r2)
   127e8:	b8800117 	ldw	r2,4(r23)
   127ec:	003f6606 	br	12588 <_realloc_r+0x148>
   127f0:	2445c83a 	sub	r2,r4,r17
   127f4:	b46d883a 	add	r22,r22,r17
   127f8:	10800054 	ori	r2,r2,1
   127fc:	b0800115 	stw	r2,4(r22)
   12800:	80bfff17 	ldw	r2,-4(r16)
   12804:	a809883a 	mov	r4,r21
   12808:	e5800215 	stw	r22,8(fp)
   1280c:	1080004c 	andi	r2,r2,1
   12810:	88a2b03a 	or	r17,r17,r2
   12814:	847fff15 	stw	r17,-4(r16)
   12818:	00143f00 	call	143f0 <__malloc_unlock>
   1281c:	8025883a 	mov	r18,r16
   12820:	003f6606 	br	125bc <_realloc_r+0x17c>
   12824:	9009883a 	mov	r4,r18
   12828:	800b883a 	mov	r5,r16
   1282c:	00122b40 	call	122b4 <memmove>
   12830:	003fa206 	br	126bc <_realloc_r+0x27c>
   12834:	88800404 	addi	r2,r17,16
   12838:	a0bf8716 	blt	r20,r2,12658 <_realloc_r+0x218>
   1283c:	b8800317 	ldw	r2,12(r23)
   12840:	b8c00217 	ldw	r3,8(r23)
   12844:	99bfff04 	addi	r6,r19,-4
   12848:	01000904 	movi	r4,36
   1284c:	18800315 	stw	r2,12(r3)
   12850:	10c00215 	stw	r3,8(r2)
   12854:	bc800204 	addi	r18,r23,8
   12858:	21806536 	bltu	r4,r6,129f0 <_realloc_r+0x5b0>
   1285c:	008004c4 	movi	r2,19
   12860:	1180592e 	bgeu	r2,r6,129c8 <_realloc_r+0x588>
   12864:	80800017 	ldw	r2,0(r16)
   12868:	b8800215 	stw	r2,8(r23)
   1286c:	80800117 	ldw	r2,4(r16)
   12870:	b8800315 	stw	r2,12(r23)
   12874:	008006c4 	movi	r2,27
   12878:	11806136 	bltu	r2,r6,12a00 <_realloc_r+0x5c0>
   1287c:	b8800404 	addi	r2,r23,16
   12880:	80c00204 	addi	r3,r16,8
   12884:	19000017 	ldw	r4,0(r3)
   12888:	11000015 	stw	r4,0(r2)
   1288c:	19000117 	ldw	r4,4(r3)
   12890:	11000115 	stw	r4,4(r2)
   12894:	18c00217 	ldw	r3,8(r3)
   12898:	10c00215 	stw	r3,8(r2)
   1289c:	a447c83a 	sub	r3,r20,r17
   128a0:	bc45883a 	add	r2,r23,r17
   128a4:	18c00054 	ori	r3,r3,1
   128a8:	10c00115 	stw	r3,4(r2)
   128ac:	b8c00117 	ldw	r3,4(r23)
   128b0:	e0800215 	stw	r2,8(fp)
   128b4:	a809883a 	mov	r4,r21
   128b8:	1880004c 	andi	r2,r3,1
   128bc:	88a2b03a 	or	r17,r17,r2
   128c0:	bc400115 	stw	r17,4(r23)
   128c4:	00143f00 	call	143f0 <__malloc_unlock>
   128c8:	003f3c06 	br	125bc <_realloc_r+0x17c>
   128cc:	80c00217 	ldw	r3,8(r16)
   128d0:	90c00215 	stw	r3,8(r18)
   128d4:	80c00317 	ldw	r3,12(r16)
   128d8:	90c00315 	stw	r3,12(r18)
   128dc:	30802426 	beq	r6,r2,12970 <_realloc_r+0x530>
   128e0:	90800404 	addi	r2,r18,16
   128e4:	80c00404 	addi	r3,r16,16
   128e8:	003f6e06 	br	126a4 <_realloc_r+0x264>
   128ec:	953fff17 	ldw	r20,-4(r18)
   128f0:	00ffff04 	movi	r3,-4
   128f4:	a0e8703a 	and	r20,r20,r3
   128f8:	a4e9883a 	add	r20,r20,r19
   128fc:	003f2206 	br	12588 <_realloc_r+0x148>
   12900:	800b883a 	mov	r5,r16
   12904:	9009883a 	mov	r4,r18
   12908:	00122b40 	call	122b4 <memmove>
   1290c:	9021883a 	mov	r16,r18
   12910:	b8800117 	ldw	r2,4(r23)
   12914:	b82d883a 	mov	r22,r23
   12918:	003f1b06 	br	12588 <_realloc_r+0x148>
   1291c:	9005883a 	mov	r2,r18
   12920:	8007883a 	mov	r3,r16
   12924:	003f9206 	br	12770 <_realloc_r+0x330>
   12928:	800b883a 	mov	r5,r16
   1292c:	9009883a 	mov	r4,r18
   12930:	d9c00015 	stw	r7,0(sp)
   12934:	00122b40 	call	122b4 <memmove>
   12938:	d9c00017 	ldw	r7,0(sp)
   1293c:	9021883a 	mov	r16,r18
   12940:	b8800117 	ldw	r2,4(r23)
   12944:	3829883a 	mov	r20,r7
   12948:	b82d883a 	mov	r22,r23
   1294c:	003f0e06 	br	12588 <_realloc_r+0x148>
   12950:	80800217 	ldw	r2,8(r16)
   12954:	b8800415 	stw	r2,16(r23)
   12958:	80800317 	ldw	r2,12(r16)
   1295c:	b8800515 	stw	r2,20(r23)
   12960:	31001226 	beq	r6,r4,129ac <_realloc_r+0x56c>
   12964:	b8800604 	addi	r2,r23,24
   12968:	80c00404 	addi	r3,r16,16
   1296c:	003f9606 	br	127c8 <_realloc_r+0x388>
   12970:	81000417 	ldw	r4,16(r16)
   12974:	90800604 	addi	r2,r18,24
   12978:	80c00604 	addi	r3,r16,24
   1297c:	91000415 	stw	r4,16(r18)
   12980:	81000517 	ldw	r4,20(r16)
   12984:	91000515 	stw	r4,20(r18)
   12988:	003f4606 	br	126a4 <_realloc_r+0x264>
   1298c:	80800217 	ldw	r2,8(r16)
   12990:	b8800415 	stw	r2,16(r23)
   12994:	80800317 	ldw	r2,12(r16)
   12998:	b8800515 	stw	r2,20(r23)
   1299c:	31000d26 	beq	r6,r4,129d4 <_realloc_r+0x594>
   129a0:	b8800604 	addi	r2,r23,24
   129a4:	80c00404 	addi	r3,r16,16
   129a8:	003f7106 	br	12770 <_realloc_r+0x330>
   129ac:	81000417 	ldw	r4,16(r16)
   129b0:	b8800804 	addi	r2,r23,32
   129b4:	80c00604 	addi	r3,r16,24
   129b8:	b9000615 	stw	r4,24(r23)
   129bc:	81000517 	ldw	r4,20(r16)
   129c0:	b9000715 	stw	r4,28(r23)
   129c4:	003f8006 	br	127c8 <_realloc_r+0x388>
   129c8:	9005883a 	mov	r2,r18
   129cc:	8007883a 	mov	r3,r16
   129d0:	003fac06 	br	12884 <_realloc_r+0x444>
   129d4:	81000417 	ldw	r4,16(r16)
   129d8:	b8800804 	addi	r2,r23,32
   129dc:	80c00604 	addi	r3,r16,24
   129e0:	b9000615 	stw	r4,24(r23)
   129e4:	81000517 	ldw	r4,20(r16)
   129e8:	b9000715 	stw	r4,28(r23)
   129ec:	003f6006 	br	12770 <_realloc_r+0x330>
   129f0:	9009883a 	mov	r4,r18
   129f4:	800b883a 	mov	r5,r16
   129f8:	00122b40 	call	122b4 <memmove>
   129fc:	003fa706 	br	1289c <_realloc_r+0x45c>
   12a00:	80800217 	ldw	r2,8(r16)
   12a04:	b8800415 	stw	r2,16(r23)
   12a08:	80800317 	ldw	r2,12(r16)
   12a0c:	b8800515 	stw	r2,20(r23)
   12a10:	31000326 	beq	r6,r4,12a20 <_realloc_r+0x5e0>
   12a14:	b8800604 	addi	r2,r23,24
   12a18:	80c00404 	addi	r3,r16,16
   12a1c:	003f9906 	br	12884 <_realloc_r+0x444>
   12a20:	81000417 	ldw	r4,16(r16)
   12a24:	b8800804 	addi	r2,r23,32
   12a28:	80c00604 	addi	r3,r16,24
   12a2c:	b9000615 	stw	r4,24(r23)
   12a30:	81000517 	ldw	r4,20(r16)
   12a34:	b9000715 	stw	r4,28(r23)
   12a38:	003f9206 	br	12884 <_realloc_r+0x444>

00012a3c <_sbrk_r>:
   12a3c:	defffd04 	addi	sp,sp,-12
   12a40:	dc400115 	stw	r17,4(sp)
   12a44:	dc000015 	stw	r16,0(sp)
   12a48:	2023883a 	mov	r17,r4
   12a4c:	040000b4 	movhi	r16,2
   12a50:	842c4804 	addi	r16,r16,-20192
   12a54:	2809883a 	mov	r4,r5
   12a58:	dfc00215 	stw	ra,8(sp)
   12a5c:	80000015 	stw	zero,0(r16)
   12a60:	00145d40 	call	145d4 <sbrk>
   12a64:	00ffffc4 	movi	r3,-1
   12a68:	10c00526 	beq	r2,r3,12a80 <_sbrk_r+0x44>
   12a6c:	dfc00217 	ldw	ra,8(sp)
   12a70:	dc400117 	ldw	r17,4(sp)
   12a74:	dc000017 	ldw	r16,0(sp)
   12a78:	dec00304 	addi	sp,sp,12
   12a7c:	f800283a 	ret
   12a80:	80c00017 	ldw	r3,0(r16)
   12a84:	183ff926 	beq	r3,zero,12a6c <_sbrk_r+0x30>
   12a88:	88c00015 	stw	r3,0(r17)
   12a8c:	dfc00217 	ldw	ra,8(sp)
   12a90:	dc400117 	ldw	r17,4(sp)
   12a94:	dc000017 	ldw	r16,0(sp)
   12a98:	dec00304 	addi	sp,sp,12
   12a9c:	f800283a 	ret

00012aa0 <__swsetup_r>:
   12aa0:	008000b4 	movhi	r2,2
   12aa4:	10a37e04 	addi	r2,r2,-29192
   12aa8:	10800017 	ldw	r2,0(r2)
   12aac:	defffd04 	addi	sp,sp,-12
   12ab0:	dc400115 	stw	r17,4(sp)
   12ab4:	dc000015 	stw	r16,0(sp)
   12ab8:	dfc00215 	stw	ra,8(sp)
   12abc:	2023883a 	mov	r17,r4
   12ac0:	2821883a 	mov	r16,r5
   12ac4:	10000226 	beq	r2,zero,12ad0 <__swsetup_r+0x30>
   12ac8:	10c00e17 	ldw	r3,56(r2)
   12acc:	18003d26 	beq	r3,zero,12bc4 <__swsetup_r+0x124>
   12ad0:	8080030b 	ldhu	r2,12(r16)
   12ad4:	10c0020c 	andi	r3,r2,8
   12ad8:	18ffffcc 	andi	r3,r3,65535
   12adc:	18e0001c 	xori	r3,r3,32768
   12ae0:	18e00004 	addi	r3,r3,-32768
   12ae4:	18001226 	beq	r3,zero,12b30 <__swsetup_r+0x90>
   12ae8:	80c00417 	ldw	r3,16(r16)
   12aec:	18001f26 	beq	r3,zero,12b6c <__swsetup_r+0xcc>
   12af0:	1100004c 	andi	r4,r2,1
   12af4:	2000261e 	bne	r4,zero,12b90 <__swsetup_r+0xf0>
   12af8:	1080008c 	andi	r2,r2,2
   12afc:	10bfffcc 	andi	r2,r2,65535
   12b00:	10a0001c 	xori	r2,r2,32768
   12b04:	10a00004 	addi	r2,r2,-32768
   12b08:	1000311e 	bne	r2,zero,12bd0 <__swsetup_r+0x130>
   12b0c:	80800517 	ldw	r2,20(r16)
   12b10:	80800215 	stw	r2,8(r16)
   12b14:	18002326 	beq	r3,zero,12ba4 <__swsetup_r+0x104>
   12b18:	0005883a 	mov	r2,zero
   12b1c:	dfc00217 	ldw	ra,8(sp)
   12b20:	dc400117 	ldw	r17,4(sp)
   12b24:	dc000017 	ldw	r16,0(sp)
   12b28:	dec00304 	addi	sp,sp,12
   12b2c:	f800283a 	ret
   12b30:	10c0040c 	andi	r3,r2,16
   12b34:	18ffffcc 	andi	r3,r3,65535
   12b38:	18e0001c 	xori	r3,r3,32768
   12b3c:	18e00004 	addi	r3,r3,-32768
   12b40:	18001e26 	beq	r3,zero,12bbc <__swsetup_r+0x11c>
   12b44:	10c0010c 	andi	r3,r2,4
   12b48:	18ffffcc 	andi	r3,r3,65535
   12b4c:	18e0001c 	xori	r3,r3,32768
   12b50:	18e00004 	addi	r3,r3,-32768
   12b54:	1800211e 	bne	r3,zero,12bdc <__swsetup_r+0x13c>
   12b58:	80c00417 	ldw	r3,16(r16)
   12b5c:	11400214 	ori	r5,r2,8
   12b60:	8140030d 	sth	r5,12(r16)
   12b64:	2805883a 	mov	r2,r5
   12b68:	183fe11e 	bne	r3,zero,12af0 <__swsetup_r+0x50>
   12b6c:	1140a00c 	andi	r5,r2,640
   12b70:	01008004 	movi	r4,512
   12b74:	293fde26 	beq	r5,r4,12af0 <__swsetup_r+0x50>
   12b78:	8809883a 	mov	r4,r17
   12b7c:	800b883a 	mov	r5,r16
   12b80:	00136840 	call	13684 <__smakebuf_r>
   12b84:	8080030b 	ldhu	r2,12(r16)
   12b88:	80c00417 	ldw	r3,16(r16)
   12b8c:	003fd806 	br	12af0 <__swsetup_r+0x50>
   12b90:	80800517 	ldw	r2,20(r16)
   12b94:	80000215 	stw	zero,8(r16)
   12b98:	0085c83a 	sub	r2,zero,r2
   12b9c:	80800615 	stw	r2,24(r16)
   12ba0:	183fdd1e 	bne	r3,zero,12b18 <__swsetup_r+0x78>
   12ba4:	8080030b 	ldhu	r2,12(r16)
   12ba8:	1080200c 	andi	r2,r2,128
   12bac:	10bfffcc 	andi	r2,r2,65535
   12bb0:	10a0001c 	xori	r2,r2,32768
   12bb4:	10a00004 	addi	r2,r2,-32768
   12bb8:	103fd826 	beq	r2,zero,12b1c <__swsetup_r+0x7c>
   12bbc:	00bfffc4 	movi	r2,-1
   12bc0:	003fd606 	br	12b1c <__swsetup_r+0x7c>
   12bc4:	1009883a 	mov	r4,r2
   12bc8:	0012ed00 	call	12ed0 <__sinit>
   12bcc:	003fc006 	br	12ad0 <__swsetup_r+0x30>
   12bd0:	0005883a 	mov	r2,zero
   12bd4:	80800215 	stw	r2,8(r16)
   12bd8:	003fce06 	br	12b14 <__swsetup_r+0x74>
   12bdc:	81400c17 	ldw	r5,48(r16)
   12be0:	28000626 	beq	r5,zero,12bfc <__swsetup_r+0x15c>
   12be4:	80c01004 	addi	r3,r16,64
   12be8:	28c00326 	beq	r5,r3,12bf8 <__swsetup_r+0x158>
   12bec:	8809883a 	mov	r4,r17
   12bf0:	00132540 	call	13254 <_free_r>
   12bf4:	8080030b 	ldhu	r2,12(r16)
   12bf8:	80000c15 	stw	zero,48(r16)
   12bfc:	80c00417 	ldw	r3,16(r16)
   12c00:	013ff6c4 	movi	r4,-37
   12c04:	2084703a 	and	r2,r4,r2
   12c08:	80000115 	stw	zero,4(r16)
   12c0c:	80c00015 	stw	r3,0(r16)
   12c10:	003fd206 	br	12b5c <__swsetup_r+0xbc>

00012c14 <_fflush_r>:
   12c14:	defffb04 	addi	sp,sp,-20
   12c18:	dcc00315 	stw	r19,12(sp)
   12c1c:	dc400115 	stw	r17,4(sp)
   12c20:	dfc00415 	stw	ra,16(sp)
   12c24:	dc800215 	stw	r18,8(sp)
   12c28:	dc000015 	stw	r16,0(sp)
   12c2c:	2027883a 	mov	r19,r4
   12c30:	2823883a 	mov	r17,r5
   12c34:	20000226 	beq	r4,zero,12c40 <_fflush_r+0x2c>
   12c38:	20800e17 	ldw	r2,56(r4)
   12c3c:	10005726 	beq	r2,zero,12d9c <_fflush_r+0x188>
   12c40:	8880030b 	ldhu	r2,12(r17)
   12c44:	10c0020c 	andi	r3,r2,8
   12c48:	18ffffcc 	andi	r3,r3,65535
   12c4c:	18e0001c 	xori	r3,r3,32768
   12c50:	18e00004 	addi	r3,r3,-32768
   12c54:	1800311e 	bne	r3,zero,12d1c <_fflush_r+0x108>
   12c58:	89000117 	ldw	r4,4(r17)
   12c5c:	10c20014 	ori	r3,r2,2048
   12c60:	88c0030d 	sth	r3,12(r17)
   12c64:	180b883a 	mov	r5,r3
   12c68:	0100520e 	bge	zero,r4,12db4 <_fflush_r+0x1a0>
   12c6c:	88c00a17 	ldw	r3,40(r17)
   12c70:	18002226 	beq	r3,zero,12cfc <_fflush_r+0xe8>
   12c74:	1084000c 	andi	r2,r2,4096
   12c78:	10bfffcc 	andi	r2,r2,65535
   12c7c:	10a0001c 	xori	r2,r2,32768
   12c80:	10a00004 	addi	r2,r2,-32768
   12c84:	10004e26 	beq	r2,zero,12dc0 <_fflush_r+0x1ac>
   12c88:	8c001417 	ldw	r16,80(r17)
   12c8c:	2940010c 	andi	r5,r5,4
   12c90:	297fffcc 	andi	r5,r5,65535
   12c94:	2960001c 	xori	r5,r5,32768
   12c98:	29600004 	addi	r5,r5,-32768
   12c9c:	28000626 	beq	r5,zero,12cb8 <_fflush_r+0xa4>
   12ca0:	89000117 	ldw	r4,4(r17)
   12ca4:	88800c17 	ldw	r2,48(r17)
   12ca8:	8121c83a 	sub	r16,r16,r4
   12cac:	10000226 	beq	r2,zero,12cb8 <_fflush_r+0xa4>
   12cb0:	88800f17 	ldw	r2,60(r17)
   12cb4:	80a1c83a 	sub	r16,r16,r2
   12cb8:	89400717 	ldw	r5,28(r17)
   12cbc:	9809883a 	mov	r4,r19
   12cc0:	800d883a 	mov	r6,r16
   12cc4:	000f883a 	mov	r7,zero
   12cc8:	183ee83a 	callr	r3
   12ccc:	8080281e 	bne	r16,r2,12d70 <_fflush_r+0x15c>
   12cd0:	8880030b 	ldhu	r2,12(r17)
   12cd4:	88c00417 	ldw	r3,16(r17)
   12cd8:	88000115 	stw	zero,4(r17)
   12cdc:	113dffcc 	andi	r4,r2,63487
   12ce0:	1084000c 	andi	r2,r2,4096
   12ce4:	10bfffcc 	andi	r2,r2,65535
   12ce8:	10a0001c 	xori	r2,r2,32768
   12cec:	8900030d 	sth	r4,12(r17)
   12cf0:	88c00015 	stw	r3,0(r17)
   12cf4:	10a00004 	addi	r2,r2,-32768
   12cf8:	10002c1e 	bne	r2,zero,12dac <_fflush_r+0x198>
   12cfc:	0005883a 	mov	r2,zero
   12d00:	dfc00417 	ldw	ra,16(sp)
   12d04:	dcc00317 	ldw	r19,12(sp)
   12d08:	dc800217 	ldw	r18,8(sp)
   12d0c:	dc400117 	ldw	r17,4(sp)
   12d10:	dc000017 	ldw	r16,0(sp)
   12d14:	dec00504 	addi	sp,sp,20
   12d18:	f800283a 	ret
   12d1c:	8c800417 	ldw	r18,16(r17)
   12d20:	903ff626 	beq	r18,zero,12cfc <_fflush_r+0xe8>
   12d24:	8c000017 	ldw	r16,0(r17)
   12d28:	108000cc 	andi	r2,r2,3
   12d2c:	8c800015 	stw	r18,0(r17)
   12d30:	84a1c83a 	sub	r16,r16,r18
   12d34:	10001b1e 	bne	r2,zero,12da4 <_fflush_r+0x190>
   12d38:	88800517 	ldw	r2,20(r17)
   12d3c:	88800215 	stw	r2,8(r17)
   12d40:	04000316 	blt	zero,r16,12d50 <_fflush_r+0x13c>
   12d44:	003fed06 	br	12cfc <_fflush_r+0xe8>
   12d48:	90a5883a 	add	r18,r18,r2
   12d4c:	043feb0e 	bge	zero,r16,12cfc <_fflush_r+0xe8>
   12d50:	88800917 	ldw	r2,36(r17)
   12d54:	89400717 	ldw	r5,28(r17)
   12d58:	800f883a 	mov	r7,r16
   12d5c:	900d883a 	mov	r6,r18
   12d60:	9809883a 	mov	r4,r19
   12d64:	103ee83a 	callr	r2
   12d68:	80a1c83a 	sub	r16,r16,r2
   12d6c:	00bff616 	blt	zero,r2,12d48 <_fflush_r+0x134>
   12d70:	88c0030b 	ldhu	r3,12(r17)
   12d74:	00bfffc4 	movi	r2,-1
   12d78:	18c01014 	ori	r3,r3,64
   12d7c:	88c0030d 	sth	r3,12(r17)
   12d80:	dfc00417 	ldw	ra,16(sp)
   12d84:	dcc00317 	ldw	r19,12(sp)
   12d88:	dc800217 	ldw	r18,8(sp)
   12d8c:	dc400117 	ldw	r17,4(sp)
   12d90:	dc000017 	ldw	r16,0(sp)
   12d94:	dec00504 	addi	sp,sp,20
   12d98:	f800283a 	ret
   12d9c:	0012ed00 	call	12ed0 <__sinit>
   12da0:	003fa706 	br	12c40 <_fflush_r+0x2c>
   12da4:	0005883a 	mov	r2,zero
   12da8:	003fe406 	br	12d3c <_fflush_r+0x128>
   12dac:	8c001415 	stw	r16,80(r17)
   12db0:	003fd206 	br	12cfc <_fflush_r+0xe8>
   12db4:	88c00f17 	ldw	r3,60(r17)
   12db8:	00ffac16 	blt	zero,r3,12c6c <_fflush_r+0x58>
   12dbc:	003fcf06 	br	12cfc <_fflush_r+0xe8>
   12dc0:	89400717 	ldw	r5,28(r17)
   12dc4:	9809883a 	mov	r4,r19
   12dc8:	000d883a 	mov	r6,zero
   12dcc:	01c00044 	movi	r7,1
   12dd0:	183ee83a 	callr	r3
   12dd4:	1021883a 	mov	r16,r2
   12dd8:	00bfffc4 	movi	r2,-1
   12ddc:	80800326 	beq	r16,r2,12dec <_fflush_r+0x1d8>
   12de0:	8940030b 	ldhu	r5,12(r17)
   12de4:	88c00a17 	ldw	r3,40(r17)
   12de8:	003fa806 	br	12c8c <_fflush_r+0x78>
   12dec:	98c00017 	ldw	r3,0(r19)
   12df0:	00800744 	movi	r2,29
   12df4:	18bfde1e 	bne	r3,r2,12d70 <_fflush_r+0x15c>
   12df8:	003fc006 	br	12cfc <_fflush_r+0xe8>

00012dfc <fflush>:
   12dfc:	200b883a 	mov	r5,r4
   12e00:	20000426 	beq	r4,zero,12e14 <fflush+0x18>
   12e04:	008000b4 	movhi	r2,2
   12e08:	10a37e04 	addi	r2,r2,-29192
   12e0c:	11000017 	ldw	r4,0(r2)
   12e10:	0012c141 	jmpi	12c14 <_fflush_r>
   12e14:	008000b4 	movhi	r2,2
   12e18:	10a37d04 	addi	r2,r2,-29196
   12e1c:	11000017 	ldw	r4,0(r2)
   12e20:	01400074 	movhi	r5,1
   12e24:	294b0504 	addi	r5,r5,11284
   12e28:	00135cc1 	jmpi	135cc <_fwalk_reent>

00012e2c <__fp_lock>:
   12e2c:	0005883a 	mov	r2,zero
   12e30:	f800283a 	ret

00012e34 <__fp_unlock>:
   12e34:	0005883a 	mov	r2,zero
   12e38:	f800283a 	ret

00012e3c <_cleanup_r>:
   12e3c:	01400074 	movhi	r5,1
   12e40:	294f1504 	addi	r5,r5,15444
   12e44:	00135241 	jmpi	13524 <_fwalk>

00012e48 <__sfmoreglue>:
   12e48:	defffc04 	addi	sp,sp,-16
   12e4c:	dc800215 	stw	r18,8(sp)
   12e50:	2825883a 	mov	r18,r5
   12e54:	dc000015 	stw	r16,0(sp)
   12e58:	01401704 	movi	r5,92
   12e5c:	2021883a 	mov	r16,r4
   12e60:	9009883a 	mov	r4,r18
   12e64:	dfc00315 	stw	ra,12(sp)
   12e68:	dc400115 	stw	r17,4(sp)
   12e6c:	00112c80 	call	112c8 <__mulsi3>
   12e70:	8009883a 	mov	r4,r16
   12e74:	11400304 	addi	r5,r2,12
   12e78:	1023883a 	mov	r17,r2
   12e7c:	00118f80 	call	118f8 <_malloc_r>
   12e80:	1021883a 	mov	r16,r2
   12e84:	10000726 	beq	r2,zero,12ea4 <__sfmoreglue+0x5c>
   12e88:	11000304 	addi	r4,r2,12
   12e8c:	10000015 	stw	zero,0(r2)
   12e90:	14800115 	stw	r18,4(r2)
   12e94:	11000215 	stw	r4,8(r2)
   12e98:	000b883a 	mov	r5,zero
   12e9c:	880d883a 	mov	r6,r17
   12ea0:	001382c0 	call	1382c <memset>
   12ea4:	8005883a 	mov	r2,r16
   12ea8:	dfc00317 	ldw	ra,12(sp)
   12eac:	dc800217 	ldw	r18,8(sp)
   12eb0:	dc400117 	ldw	r17,4(sp)
   12eb4:	dc000017 	ldw	r16,0(sp)
   12eb8:	dec00404 	addi	sp,sp,16
   12ebc:	f800283a 	ret

00012ec0 <_cleanup>:
   12ec0:	008000b4 	movhi	r2,2
   12ec4:	10a37d04 	addi	r2,r2,-29196
   12ec8:	11000017 	ldw	r4,0(r2)
   12ecc:	0012e3c1 	jmpi	12e3c <_cleanup_r>

00012ed0 <__sinit>:
   12ed0:	20800e17 	ldw	r2,56(r4)
   12ed4:	1000401e 	bne	r2,zero,12fd8 <__sinit+0x108>
   12ed8:	21400117 	ldw	r5,4(r4)
   12edc:	01800074 	movhi	r6,1
   12ee0:	318b8f04 	addi	r6,r6,11836
   12ee4:	20c00217 	ldw	r3,8(r4)
   12ee8:	21800f15 	stw	r6,60(r4)
   12eec:	2080bb04 	addi	r2,r4,748
   12ef0:	02400044 	movi	r9,1
   12ef4:	018000c4 	movi	r6,3
   12ef8:	2180b915 	stw	r6,740(r4)
   12efc:	2080ba15 	stw	r2,744(r4)
   12f00:	22400e15 	stw	r9,56(r4)
   12f04:	20800317 	ldw	r2,12(r4)
   12f08:	2000b815 	stw	zero,736(r4)
   12f0c:	02000074 	movhi	r8,1
   12f10:	420e4204 	addi	r8,r8,14600
   12f14:	01c00074 	movhi	r7,1
   12f18:	39ce5704 	addi	r7,r7,14684
   12f1c:	01800074 	movhi	r6,1
   12f20:	318e7904 	addi	r6,r6,14820
   12f24:	01000074 	movhi	r4,1
   12f28:	210e9004 	addi	r4,r4,14912
   12f2c:	02800104 	movi	r10,4
   12f30:	28000015 	stw	zero,0(r5)
   12f34:	28000115 	stw	zero,4(r5)
   12f38:	28000215 	stw	zero,8(r5)
   12f3c:	2a80030d 	sth	r10,12(r5)
   12f40:	2800038d 	sth	zero,14(r5)
   12f44:	28000415 	stw	zero,16(r5)
   12f48:	28000515 	stw	zero,20(r5)
   12f4c:	28000615 	stw	zero,24(r5)
   12f50:	29400715 	stw	r5,28(r5)
   12f54:	2a000815 	stw	r8,32(r5)
   12f58:	29c00915 	stw	r7,36(r5)
   12f5c:	29800a15 	stw	r6,40(r5)
   12f60:	29000b15 	stw	r4,44(r5)
   12f64:	01400284 	movi	r5,10
   12f68:	18000015 	stw	zero,0(r3)
   12f6c:	18000115 	stw	zero,4(r3)
   12f70:	18000215 	stw	zero,8(r3)
   12f74:	1940030d 	sth	r5,12(r3)
   12f78:	1a40038d 	sth	r9,14(r3)
   12f7c:	18000415 	stw	zero,16(r3)
   12f80:	18000515 	stw	zero,20(r3)
   12f84:	18000615 	stw	zero,24(r3)
   12f88:	18c00715 	stw	r3,28(r3)
   12f8c:	1a000815 	stw	r8,32(r3)
   12f90:	19c00915 	stw	r7,36(r3)
   12f94:	19800a15 	stw	r6,40(r3)
   12f98:	19000b15 	stw	r4,44(r3)
   12f9c:	00c00484 	movi	r3,18
   12fa0:	10c0030d 	sth	r3,12(r2)
   12fa4:	00c00084 	movi	r3,2
   12fa8:	10000015 	stw	zero,0(r2)
   12fac:	10000115 	stw	zero,4(r2)
   12fb0:	10000215 	stw	zero,8(r2)
   12fb4:	10c0038d 	sth	r3,14(r2)
   12fb8:	10000415 	stw	zero,16(r2)
   12fbc:	10000515 	stw	zero,20(r2)
   12fc0:	10000615 	stw	zero,24(r2)
   12fc4:	10800715 	stw	r2,28(r2)
   12fc8:	12000815 	stw	r8,32(r2)
   12fcc:	11c00915 	stw	r7,36(r2)
   12fd0:	11800a15 	stw	r6,40(r2)
   12fd4:	11000b15 	stw	r4,44(r2)
   12fd8:	f800283a 	ret

00012fdc <__sfp>:
   12fdc:	defffc04 	addi	sp,sp,-16
   12fe0:	008000b4 	movhi	r2,2
   12fe4:	10a37d04 	addi	r2,r2,-29196
   12fe8:	dc400115 	stw	r17,4(sp)
   12fec:	14400017 	ldw	r17,0(r2)
   12ff0:	dc800215 	stw	r18,8(sp)
   12ff4:	dfc00315 	stw	ra,12(sp)
   12ff8:	88800e17 	ldw	r2,56(r17)
   12ffc:	dc000015 	stw	r16,0(sp)
   13000:	2025883a 	mov	r18,r4
   13004:	10002826 	beq	r2,zero,130a8 <__sfp+0xcc>
   13008:	8c40b804 	addi	r17,r17,736
   1300c:	043fffc4 	movi	r16,-1
   13010:	89400117 	ldw	r5,4(r17)
   13014:	88800217 	ldw	r2,8(r17)
   13018:	297fffc4 	addi	r5,r5,-1
   1301c:	28000a16 	blt	r5,zero,13048 <__sfp+0x6c>
   13020:	10c0030f 	ldh	r3,12(r2)
   13024:	18000c26 	beq	r3,zero,13058 <__sfp+0x7c>
   13028:	10c01a04 	addi	r3,r2,104
   1302c:	00000206 	br	13038 <__sfp+0x5c>
   13030:	19bfe90f 	ldh	r6,-92(r3)
   13034:	30000826 	beq	r6,zero,13058 <__sfp+0x7c>
   13038:	297fffc4 	addi	r5,r5,-1
   1303c:	18bffd04 	addi	r2,r3,-12
   13040:	18c01704 	addi	r3,r3,92
   13044:	2c3ffa1e 	bne	r5,r16,13030 <__sfp+0x54>
   13048:	88800017 	ldw	r2,0(r17)
   1304c:	10001926 	beq	r2,zero,130b4 <__sfp+0xd8>
   13050:	1023883a 	mov	r17,r2
   13054:	003fee06 	br	13010 <__sfp+0x34>
   13058:	00ffffc4 	movi	r3,-1
   1305c:	10c0038d 	sth	r3,14(r2)
   13060:	00c00044 	movi	r3,1
   13064:	10c0030d 	sth	r3,12(r2)
   13068:	10000015 	stw	zero,0(r2)
   1306c:	10000215 	stw	zero,8(r2)
   13070:	10000115 	stw	zero,4(r2)
   13074:	10000415 	stw	zero,16(r2)
   13078:	10000515 	stw	zero,20(r2)
   1307c:	10000615 	stw	zero,24(r2)
   13080:	10000c15 	stw	zero,48(r2)
   13084:	10000d15 	stw	zero,52(r2)
   13088:	10001115 	stw	zero,68(r2)
   1308c:	10001215 	stw	zero,72(r2)
   13090:	dfc00317 	ldw	ra,12(sp)
   13094:	dc800217 	ldw	r18,8(sp)
   13098:	dc400117 	ldw	r17,4(sp)
   1309c:	dc000017 	ldw	r16,0(sp)
   130a0:	dec00404 	addi	sp,sp,16
   130a4:	f800283a 	ret
   130a8:	8809883a 	mov	r4,r17
   130ac:	0012ed00 	call	12ed0 <__sinit>
   130b0:	003fd506 	br	13008 <__sfp+0x2c>
   130b4:	9009883a 	mov	r4,r18
   130b8:	01400104 	movi	r5,4
   130bc:	0012e480 	call	12e48 <__sfmoreglue>
   130c0:	88800015 	stw	r2,0(r17)
   130c4:	103fe21e 	bne	r2,zero,13050 <__sfp+0x74>
   130c8:	00800304 	movi	r2,12
   130cc:	90800015 	stw	r2,0(r18)
   130d0:	0005883a 	mov	r2,zero
   130d4:	003fee06 	br	13090 <__sfp+0xb4>

000130d8 <__sfp_lock_acquire>:
   130d8:	f800283a 	ret

000130dc <__sfp_lock_release>:
   130dc:	f800283a 	ret

000130e0 <__sinit_lock_acquire>:
   130e0:	f800283a 	ret

000130e4 <__sinit_lock_release>:
   130e4:	f800283a 	ret

000130e8 <__fp_lock_all>:
   130e8:	008000b4 	movhi	r2,2
   130ec:	10a37e04 	addi	r2,r2,-29192
   130f0:	11000017 	ldw	r4,0(r2)
   130f4:	01400074 	movhi	r5,1
   130f8:	294b8b04 	addi	r5,r5,11820
   130fc:	00135241 	jmpi	13524 <_fwalk>

00013100 <__fp_unlock_all>:
   13100:	008000b4 	movhi	r2,2
   13104:	10a37e04 	addi	r2,r2,-29192
   13108:	11000017 	ldw	r4,0(r2)
   1310c:	01400074 	movhi	r5,1
   13110:	294b8d04 	addi	r5,r5,11828
   13114:	00135241 	jmpi	13524 <_fwalk>

00013118 <_malloc_trim_r>:
   13118:	defffb04 	addi	sp,sp,-20
   1311c:	dcc00315 	stw	r19,12(sp)
   13120:	dc800215 	stw	r18,8(sp)
   13124:	dc400115 	stw	r17,4(sp)
   13128:	dc000015 	stw	r16,0(sp)
   1312c:	2827883a 	mov	r19,r5
   13130:	dfc00415 	stw	ra,16(sp)
   13134:	04400074 	movhi	r17,1
   13138:	8c5df904 	addi	r17,r17,30692
   1313c:	2021883a 	mov	r16,r4
   13140:	00143d00 	call	143d0 <__malloc_lock>
   13144:	88800217 	ldw	r2,8(r17)
   13148:	14800117 	ldw	r18,4(r2)
   1314c:	00bfff04 	movi	r2,-4
   13150:	90a4703a 	and	r18,r18,r2
   13154:	9083fbc4 	addi	r2,r18,4079
   13158:	14e7c83a 	sub	r19,r2,r19
   1315c:	9826d33a 	srli	r19,r19,12
   13160:	0083ffc4 	movi	r2,4095
   13164:	9cffffc4 	addi	r19,r19,-1
   13168:	9826933a 	slli	r19,r19,12
   1316c:	14c0060e 	bge	r2,r19,13188 <_malloc_trim_r+0x70>
   13170:	8009883a 	mov	r4,r16
   13174:	000b883a 	mov	r5,zero
   13178:	0012a3c0 	call	12a3c <_sbrk_r>
   1317c:	88c00217 	ldw	r3,8(r17)
   13180:	1c87883a 	add	r3,r3,r18
   13184:	10c00a26 	beq	r2,r3,131b0 <_malloc_trim_r+0x98>
   13188:	8009883a 	mov	r4,r16
   1318c:	00143f00 	call	143f0 <__malloc_unlock>
   13190:	0005883a 	mov	r2,zero
   13194:	dfc00417 	ldw	ra,16(sp)
   13198:	dcc00317 	ldw	r19,12(sp)
   1319c:	dc800217 	ldw	r18,8(sp)
   131a0:	dc400117 	ldw	r17,4(sp)
   131a4:	dc000017 	ldw	r16,0(sp)
   131a8:	dec00504 	addi	sp,sp,20
   131ac:	f800283a 	ret
   131b0:	8009883a 	mov	r4,r16
   131b4:	04cbc83a 	sub	r5,zero,r19
   131b8:	0012a3c0 	call	12a3c <_sbrk_r>
   131bc:	00ffffc4 	movi	r3,-1
   131c0:	10c01326 	beq	r2,r3,13210 <_malloc_trim_r+0xf8>
   131c4:	008000b4 	movhi	r2,2
   131c8:	10ac4f04 	addi	r2,r2,-20164
   131cc:	11000017 	ldw	r4,0(r2)
   131d0:	88c00217 	ldw	r3,8(r17)
   131d4:	94e5c83a 	sub	r18,r18,r19
   131d8:	94800054 	ori	r18,r18,1
   131dc:	24e7c83a 	sub	r19,r4,r19
   131e0:	1c800115 	stw	r18,4(r3)
   131e4:	8009883a 	mov	r4,r16
   131e8:	14c00015 	stw	r19,0(r2)
   131ec:	00143f00 	call	143f0 <__malloc_unlock>
   131f0:	00800044 	movi	r2,1
   131f4:	dfc00417 	ldw	ra,16(sp)
   131f8:	dcc00317 	ldw	r19,12(sp)
   131fc:	dc800217 	ldw	r18,8(sp)
   13200:	dc400117 	ldw	r17,4(sp)
   13204:	dc000017 	ldw	r16,0(sp)
   13208:	dec00504 	addi	sp,sp,20
   1320c:	f800283a 	ret
   13210:	8009883a 	mov	r4,r16
   13214:	000b883a 	mov	r5,zero
   13218:	0012a3c0 	call	12a3c <_sbrk_r>
   1321c:	88c00217 	ldw	r3,8(r17)
   13220:	014003c4 	movi	r5,15
   13224:	10c9c83a 	sub	r4,r2,r3
   13228:	293fd70e 	bge	r5,r4,13188 <_malloc_trim_r+0x70>
   1322c:	014000b4 	movhi	r5,2
   13230:	29637f04 	addi	r5,r5,-29188
   13234:	29400017 	ldw	r5,0(r5)
   13238:	21000054 	ori	r4,r4,1
   1323c:	19000115 	stw	r4,4(r3)
   13240:	1145c83a 	sub	r2,r2,r5
   13244:	014000b4 	movhi	r5,2
   13248:	296c4f04 	addi	r5,r5,-20164
   1324c:	28800015 	stw	r2,0(r5)
   13250:	003fcd06 	br	13188 <_malloc_trim_r+0x70>

00013254 <_free_r>:
   13254:	defffd04 	addi	sp,sp,-12
   13258:	dc400115 	stw	r17,4(sp)
   1325c:	dc000015 	stw	r16,0(sp)
   13260:	dfc00215 	stw	ra,8(sp)
   13264:	2821883a 	mov	r16,r5
   13268:	2023883a 	mov	r17,r4
   1326c:	28004b26 	beq	r5,zero,1339c <_free_r+0x148>
   13270:	00143d00 	call	143d0 <__malloc_lock>
   13274:	823fff17 	ldw	r8,-4(r16)
   13278:	00bfff84 	movi	r2,-2
   1327c:	81bffe04 	addi	r6,r16,-8
   13280:	4084703a 	and	r2,r8,r2
   13284:	3087883a 	add	r3,r6,r2
   13288:	01400074 	movhi	r5,1
   1328c:	295df904 	addi	r5,r5,30692
   13290:	1a400117 	ldw	r9,4(r3)
   13294:	29000217 	ldw	r4,8(r5)
   13298:	01ffff04 	movi	r7,-4
   1329c:	49ce703a 	and	r7,r9,r7
   132a0:	20c06526 	beq	r4,r3,13438 <_free_r+0x1e4>
   132a4:	19c00115 	stw	r7,4(r3)
   132a8:	4200004c 	andi	r8,r8,1
   132ac:	40003026 	beq	r8,zero,13370 <_free_r+0x11c>
   132b0:	0009883a 	mov	r4,zero
   132b4:	19d1883a 	add	r8,r3,r7
   132b8:	42000117 	ldw	r8,4(r8)
   132bc:	4200004c 	andi	r8,r8,1
   132c0:	4000061e 	bne	r8,zero,132dc <_free_r+0x88>
   132c4:	11c5883a 	add	r2,r2,r7
   132c8:	19c00217 	ldw	r7,8(r3)
   132cc:	20004e26 	beq	r4,zero,13408 <_free_r+0x1b4>
   132d0:	18c00317 	ldw	r3,12(r3)
   132d4:	38c00315 	stw	r3,12(r7)
   132d8:	19c00215 	stw	r7,8(r3)
   132dc:	11c00054 	ori	r7,r2,1
   132e0:	3087883a 	add	r3,r6,r2
   132e4:	31c00115 	stw	r7,4(r6)
   132e8:	18800015 	stw	r2,0(r3)
   132ec:	20001a1e 	bne	r4,zero,13358 <_free_r+0x104>
   132f0:	00c07fc4 	movi	r3,511
   132f4:	18802e2e 	bgeu	r3,r2,133b0 <_free_r+0x15c>
   132f8:	1006d27a 	srli	r3,r2,9
   132fc:	01000104 	movi	r4,4
   13300:	20c06636 	bltu	r4,r3,1349c <_free_r+0x248>
   13304:	1008d1ba 	srli	r4,r2,6
   13308:	21000e04 	addi	r4,r4,56
   1330c:	210f883a 	add	r7,r4,r4
   13310:	39cf883a 	add	r7,r7,r7
   13314:	39cf883a 	add	r7,r7,r7
   13318:	29cf883a 	add	r7,r5,r7
   1331c:	38c00217 	ldw	r3,8(r7)
   13320:	01400074 	movhi	r5,1
   13324:	295df904 	addi	r5,r5,30692
   13328:	19c06126 	beq	r3,r7,134b0 <_free_r+0x25c>
   1332c:	013fff04 	movi	r4,-4
   13330:	19400117 	ldw	r5,4(r3)
   13334:	290a703a 	and	r5,r5,r4
   13338:	1140022e 	bgeu	r2,r5,13344 <_free_r+0xf0>
   1333c:	18c00217 	ldw	r3,8(r3)
   13340:	38fffb1e 	bne	r7,r3,13330 <_free_r+0xdc>
   13344:	18800317 	ldw	r2,12(r3)
   13348:	30800315 	stw	r2,12(r6)
   1334c:	30c00215 	stw	r3,8(r6)
   13350:	11800215 	stw	r6,8(r2)
   13354:	19800315 	stw	r6,12(r3)
   13358:	8809883a 	mov	r4,r17
   1335c:	dfc00217 	ldw	ra,8(sp)
   13360:	dc400117 	ldw	r17,4(sp)
   13364:	dc000017 	ldw	r16,0(sp)
   13368:	dec00304 	addi	sp,sp,12
   1336c:	00143f01 	jmpi	143f0 <__malloc_unlock>
   13370:	813ffe17 	ldw	r4,-8(r16)
   13374:	2a400204 	addi	r9,r5,8
   13378:	310dc83a 	sub	r6,r6,r4
   1337c:	32000217 	ldw	r8,8(r6)
   13380:	1105883a 	add	r2,r2,r4
   13384:	42404326 	beq	r8,r9,13494 <_free_r+0x240>
   13388:	32400317 	ldw	r9,12(r6)
   1338c:	0009883a 	mov	r4,zero
   13390:	42400315 	stw	r9,12(r8)
   13394:	4a000215 	stw	r8,8(r9)
   13398:	003fc606 	br	132b4 <_free_r+0x60>
   1339c:	dfc00217 	ldw	ra,8(sp)
   133a0:	dc400117 	ldw	r17,4(sp)
   133a4:	dc000017 	ldw	r16,0(sp)
   133a8:	dec00304 	addi	sp,sp,12
   133ac:	f800283a 	ret
   133b0:	1004d0fa 	srli	r2,r2,3
   133b4:	02000044 	movi	r8,1
   133b8:	29c00117 	ldw	r7,4(r5)
   133bc:	1087883a 	add	r3,r2,r2
   133c0:	18c7883a 	add	r3,r3,r3
   133c4:	1005d0ba 	srai	r2,r2,2
   133c8:	18c7883a 	add	r3,r3,r3
   133cc:	28c7883a 	add	r3,r5,r3
   133d0:	19000217 	ldw	r4,8(r3)
   133d4:	4084983a 	sll	r2,r8,r2
   133d8:	30c00315 	stw	r3,12(r6)
   133dc:	31000215 	stw	r4,8(r6)
   133e0:	11c4b03a 	or	r2,r2,r7
   133e4:	21800315 	stw	r6,12(r4)
   133e8:	8809883a 	mov	r4,r17
   133ec:	28800115 	stw	r2,4(r5)
   133f0:	19800215 	stw	r6,8(r3)
   133f4:	dfc00217 	ldw	ra,8(sp)
   133f8:	dc400117 	ldw	r17,4(sp)
   133fc:	dc000017 	ldw	r16,0(sp)
   13400:	dec00304 	addi	sp,sp,12
   13404:	00143f01 	jmpi	143f0 <__malloc_unlock>
   13408:	02000074 	movhi	r8,1
   1340c:	421dfb04 	addi	r8,r8,30700
   13410:	3a3faf1e 	bne	r7,r8,132d0 <_free_r+0x7c>
   13414:	29800515 	stw	r6,20(r5)
   13418:	29800415 	stw	r6,16(r5)
   1341c:	11000054 	ori	r4,r2,1
   13420:	3087883a 	add	r3,r6,r2
   13424:	31c00315 	stw	r7,12(r6)
   13428:	31c00215 	stw	r7,8(r6)
   1342c:	31000115 	stw	r4,4(r6)
   13430:	18800015 	stw	r2,0(r3)
   13434:	003fc806 	br	13358 <_free_r+0x104>
   13438:	4200004c 	andi	r8,r8,1
   1343c:	3885883a 	add	r2,r7,r2
   13440:	4000071e 	bne	r8,zero,13460 <_free_r+0x20c>
   13444:	81fffe17 	ldw	r7,-8(r16)
   13448:	31cdc83a 	sub	r6,r6,r7
   1344c:	30c00317 	ldw	r3,12(r6)
   13450:	31000217 	ldw	r4,8(r6)
   13454:	11c5883a 	add	r2,r2,r7
   13458:	20c00315 	stw	r3,12(r4)
   1345c:	19000215 	stw	r4,8(r3)
   13460:	00c000b4 	movhi	r3,2
   13464:	18e38004 	addi	r3,r3,-29184
   13468:	18c00017 	ldw	r3,0(r3)
   1346c:	11000054 	ori	r4,r2,1
   13470:	31000115 	stw	r4,4(r6)
   13474:	29800215 	stw	r6,8(r5)
   13478:	10ffb736 	bltu	r2,r3,13358 <_free_r+0x104>
   1347c:	008000b4 	movhi	r2,2
   13480:	10ac4704 	addi	r2,r2,-20196
   13484:	11400017 	ldw	r5,0(r2)
   13488:	8809883a 	mov	r4,r17
   1348c:	00131180 	call	13118 <_malloc_trim_r>
   13490:	003fb106 	br	13358 <_free_r+0x104>
   13494:	01000044 	movi	r4,1
   13498:	003f8606 	br	132b4 <_free_r+0x60>
   1349c:	01000504 	movi	r4,20
   134a0:	20c00b36 	bltu	r4,r3,134d0 <_free_r+0x27c>
   134a4:	190016c4 	addi	r4,r3,91
   134a8:	210f883a 	add	r7,r4,r4
   134ac:	003f9806 	br	13310 <_free_r+0xbc>
   134b0:	2009d0ba 	srai	r4,r4,2
   134b4:	00800044 	movi	r2,1
   134b8:	29c00117 	ldw	r7,4(r5)
   134bc:	1108983a 	sll	r4,r2,r4
   134c0:	1805883a 	mov	r2,r3
   134c4:	21c8b03a 	or	r4,r4,r7
   134c8:	29000115 	stw	r4,4(r5)
   134cc:	003f9e06 	br	13348 <_free_r+0xf4>
   134d0:	01001504 	movi	r4,84
   134d4:	20c00436 	bltu	r4,r3,134e8 <_free_r+0x294>
   134d8:	1008d33a 	srli	r4,r2,12
   134dc:	21001b84 	addi	r4,r4,110
   134e0:	210f883a 	add	r7,r4,r4
   134e4:	003f8a06 	br	13310 <_free_r+0xbc>
   134e8:	01005504 	movi	r4,340
   134ec:	20c00436 	bltu	r4,r3,13500 <_free_r+0x2ac>
   134f0:	1008d3fa 	srli	r4,r2,15
   134f4:	21001dc4 	addi	r4,r4,119
   134f8:	210f883a 	add	r7,r4,r4
   134fc:	003f8406 	br	13310 <_free_r+0xbc>
   13500:	01015504 	movi	r4,1364
   13504:	20c00436 	bltu	r4,r3,13518 <_free_r+0x2c4>
   13508:	1008d4ba 	srli	r4,r2,18
   1350c:	21001f04 	addi	r4,r4,124
   13510:	210f883a 	add	r7,r4,r4
   13514:	003f7e06 	br	13310 <_free_r+0xbc>
   13518:	01c03f04 	movi	r7,252
   1351c:	01001f84 	movi	r4,126
   13520:	003f7b06 	br	13310 <_free_r+0xbc>

00013524 <_fwalk>:
   13524:	defff904 	addi	sp,sp,-28
   13528:	dcc00315 	stw	r19,12(sp)
   1352c:	24c0b804 	addi	r19,r4,736
   13530:	dd400515 	stw	r21,20(sp)
   13534:	dd000415 	stw	r20,16(sp)
   13538:	dfc00615 	stw	ra,24(sp)
   1353c:	dc800215 	stw	r18,8(sp)
   13540:	dc400115 	stw	r17,4(sp)
   13544:	dc000015 	stw	r16,0(sp)
   13548:	282b883a 	mov	r21,r5
   1354c:	0029883a 	mov	r20,zero
   13550:	00130d80 	call	130d8 <__sfp_lock_acquire>
   13554:	98001226 	beq	r19,zero,135a0 <_fwalk+0x7c>
   13558:	04bfffc4 	movi	r18,-1
   1355c:	9c400117 	ldw	r17,4(r19)
   13560:	9c000217 	ldw	r16,8(r19)
   13564:	8c7fffc4 	addi	r17,r17,-1
   13568:	88000b16 	blt	r17,zero,13598 <_fwalk+0x74>
   1356c:	84000304 	addi	r16,r16,12
   13570:	80c0000f 	ldh	r3,0(r16)
   13574:	8c7fffc4 	addi	r17,r17,-1
   13578:	813ffd04 	addi	r4,r16,-12
   1357c:	18000426 	beq	r3,zero,13590 <_fwalk+0x6c>
   13580:	80c0008f 	ldh	r3,2(r16)
   13584:	1c800226 	beq	r3,r18,13590 <_fwalk+0x6c>
   13588:	a83ee83a 	callr	r21
   1358c:	a0a8b03a 	or	r20,r20,r2
   13590:	84001704 	addi	r16,r16,92
   13594:	8cbff61e 	bne	r17,r18,13570 <_fwalk+0x4c>
   13598:	9cc00017 	ldw	r19,0(r19)
   1359c:	983fef1e 	bne	r19,zero,1355c <_fwalk+0x38>
   135a0:	00130dc0 	call	130dc <__sfp_lock_release>
   135a4:	a005883a 	mov	r2,r20
   135a8:	dfc00617 	ldw	ra,24(sp)
   135ac:	dd400517 	ldw	r21,20(sp)
   135b0:	dd000417 	ldw	r20,16(sp)
   135b4:	dcc00317 	ldw	r19,12(sp)
   135b8:	dc800217 	ldw	r18,8(sp)
   135bc:	dc400117 	ldw	r17,4(sp)
   135c0:	dc000017 	ldw	r16,0(sp)
   135c4:	dec00704 	addi	sp,sp,28
   135c8:	f800283a 	ret

000135cc <_fwalk_reent>:
   135cc:	defff804 	addi	sp,sp,-32
   135d0:	dcc00315 	stw	r19,12(sp)
   135d4:	24c0b804 	addi	r19,r4,736
   135d8:	dd800615 	stw	r22,24(sp)
   135dc:	dd400515 	stw	r21,20(sp)
   135e0:	dd000415 	stw	r20,16(sp)
   135e4:	dfc00715 	stw	ra,28(sp)
   135e8:	dc800215 	stw	r18,8(sp)
   135ec:	dc400115 	stw	r17,4(sp)
   135f0:	dc000015 	stw	r16,0(sp)
   135f4:	2029883a 	mov	r20,r4
   135f8:	282b883a 	mov	r21,r5
   135fc:	002d883a 	mov	r22,zero
   13600:	00130d80 	call	130d8 <__sfp_lock_acquire>
   13604:	98001326 	beq	r19,zero,13654 <_fwalk_reent+0x88>
   13608:	04bfffc4 	movi	r18,-1
   1360c:	9c400117 	ldw	r17,4(r19)
   13610:	9c000217 	ldw	r16,8(r19)
   13614:	8c7fffc4 	addi	r17,r17,-1
   13618:	88000c16 	blt	r17,zero,1364c <_fwalk_reent+0x80>
   1361c:	84000304 	addi	r16,r16,12
   13620:	80c0000f 	ldh	r3,0(r16)
   13624:	8c7fffc4 	addi	r17,r17,-1
   13628:	817ffd04 	addi	r5,r16,-12
   1362c:	18000526 	beq	r3,zero,13644 <_fwalk_reent+0x78>
   13630:	80c0008f 	ldh	r3,2(r16)
   13634:	a009883a 	mov	r4,r20
   13638:	1c800226 	beq	r3,r18,13644 <_fwalk_reent+0x78>
   1363c:	a83ee83a 	callr	r21
   13640:	b0acb03a 	or	r22,r22,r2
   13644:	84001704 	addi	r16,r16,92
   13648:	8cbff51e 	bne	r17,r18,13620 <_fwalk_reent+0x54>
   1364c:	9cc00017 	ldw	r19,0(r19)
   13650:	983fee1e 	bne	r19,zero,1360c <_fwalk_reent+0x40>
   13654:	00130dc0 	call	130dc <__sfp_lock_release>
   13658:	b005883a 	mov	r2,r22
   1365c:	dfc00717 	ldw	ra,28(sp)
   13660:	dd800617 	ldw	r22,24(sp)
   13664:	dd400517 	ldw	r21,20(sp)
   13668:	dd000417 	ldw	r20,16(sp)
   1366c:	dcc00317 	ldw	r19,12(sp)
   13670:	dc800217 	ldw	r18,8(sp)
   13674:	dc400117 	ldw	r17,4(sp)
   13678:	dc000017 	ldw	r16,0(sp)
   1367c:	dec00804 	addi	sp,sp,32
   13680:	f800283a 	ret

00013684 <__smakebuf_r>:
   13684:	2880030b 	ldhu	r2,12(r5)
   13688:	deffed04 	addi	sp,sp,-76
   1368c:	dc401015 	stw	r17,64(sp)
   13690:	10c0008c 	andi	r3,r2,2
   13694:	18ffffcc 	andi	r3,r3,65535
   13698:	18e0001c 	xori	r3,r3,32768
   1369c:	dc000f15 	stw	r16,60(sp)
   136a0:	dfc01215 	stw	ra,72(sp)
   136a4:	dc801115 	stw	r18,68(sp)
   136a8:	18e00004 	addi	r3,r3,-32768
   136ac:	2821883a 	mov	r16,r5
   136b0:	2023883a 	mov	r17,r4
   136b4:	1800381e 	bne	r3,zero,13798 <__smakebuf_r+0x114>
   136b8:	2940038f 	ldh	r5,14(r5)
   136bc:	28002d16 	blt	r5,zero,13774 <__smakebuf_r+0xf0>
   136c0:	d80d883a 	mov	r6,sp
   136c4:	0013c680 	call	13c68 <_fstat_r>
   136c8:	10002916 	blt	r2,zero,13770 <__smakebuf_r+0xec>
   136cc:	d8800117 	ldw	r2,4(sp)
   136d0:	00e00014 	movui	r3,32768
   136d4:	10bc000c 	andi	r2,r2,61440
   136d8:	10c03c26 	beq	r2,r3,137cc <__smakebuf_r+0x148>
   136dc:	80c0030b 	ldhu	r3,12(r16)
   136e0:	18c20014 	ori	r3,r3,2048
   136e4:	80c0030d 	sth	r3,12(r16)
   136e8:	00c80004 	movi	r3,8192
   136ec:	10c00c1e 	bne	r2,r3,13720 <__smakebuf_r+0x9c>
   136f0:	8140038f 	ldh	r5,14(r16)
   136f4:	8809883a 	mov	r4,r17
   136f8:	0013cd00 	call	13cd0 <_isatty_r>
   136fc:	10000826 	beq	r2,zero,13720 <__smakebuf_r+0x9c>
   13700:	80c0030b 	ldhu	r3,12(r16)
   13704:	808010c4 	addi	r2,r16,67
   13708:	80800015 	stw	r2,0(r16)
   1370c:	18c00054 	ori	r3,r3,1
   13710:	80800415 	stw	r2,16(r16)
   13714:	00800044 	movi	r2,1
   13718:	80c0030d 	sth	r3,12(r16)
   1371c:	80800515 	stw	r2,20(r16)
   13720:	04810004 	movi	r18,1024
   13724:	8809883a 	mov	r4,r17
   13728:	900b883a 	mov	r5,r18
   1372c:	00118f80 	call	118f8 <_malloc_r>
   13730:	10003026 	beq	r2,zero,137f4 <__smakebuf_r+0x170>
   13734:	80c0030b 	ldhu	r3,12(r16)
   13738:	01000074 	movhi	r4,1
   1373c:	210b8f04 	addi	r4,r4,11836
   13740:	89000f15 	stw	r4,60(r17)
   13744:	18c02014 	ori	r3,r3,128
   13748:	80c0030d 	sth	r3,12(r16)
   1374c:	80800015 	stw	r2,0(r16)
   13750:	80800415 	stw	r2,16(r16)
   13754:	84800515 	stw	r18,20(r16)
   13758:	dfc01217 	ldw	ra,72(sp)
   1375c:	dc801117 	ldw	r18,68(sp)
   13760:	dc401017 	ldw	r17,64(sp)
   13764:	dc000f17 	ldw	r16,60(sp)
   13768:	dec01304 	addi	sp,sp,76
   1376c:	f800283a 	ret
   13770:	8080030b 	ldhu	r2,12(r16)
   13774:	10c0200c 	andi	r3,r2,128
   13778:	18ffffcc 	andi	r3,r3,65535
   1377c:	18e0001c 	xori	r3,r3,32768
   13780:	18e00004 	addi	r3,r3,-32768
   13784:	18000f1e 	bne	r3,zero,137c4 <__smakebuf_r+0x140>
   13788:	04810004 	movi	r18,1024
   1378c:	10820014 	ori	r2,r2,2048
   13790:	8080030d 	sth	r2,12(r16)
   13794:	003fe306 	br	13724 <__smakebuf_r+0xa0>
   13798:	288010c4 	addi	r2,r5,67
   1379c:	28800015 	stw	r2,0(r5)
   137a0:	28800415 	stw	r2,16(r5)
   137a4:	00800044 	movi	r2,1
   137a8:	28800515 	stw	r2,20(r5)
   137ac:	dfc01217 	ldw	ra,72(sp)
   137b0:	dc801117 	ldw	r18,68(sp)
   137b4:	dc401017 	ldw	r17,64(sp)
   137b8:	dc000f17 	ldw	r16,60(sp)
   137bc:	dec01304 	addi	sp,sp,76
   137c0:	f800283a 	ret
   137c4:	04801004 	movi	r18,64
   137c8:	003ff006 	br	1378c <__smakebuf_r+0x108>
   137cc:	81000a17 	ldw	r4,40(r16)
   137d0:	00c00074 	movhi	r3,1
   137d4:	18ce7904 	addi	r3,r3,14820
   137d8:	20ffc01e 	bne	r4,r3,136dc <__smakebuf_r+0x58>
   137dc:	8080030b 	ldhu	r2,12(r16)
   137e0:	00c10004 	movi	r3,1024
   137e4:	80c01315 	stw	r3,76(r16)
   137e8:	10c4b03a 	or	r2,r2,r3
   137ec:	8080030d 	sth	r2,12(r16)
   137f0:	003fcb06 	br	13720 <__smakebuf_r+0x9c>
   137f4:	8080030b 	ldhu	r2,12(r16)
   137f8:	10c0800c 	andi	r3,r2,512
   137fc:	18ffffcc 	andi	r3,r3,65535
   13800:	18e0001c 	xori	r3,r3,32768
   13804:	18e00004 	addi	r3,r3,-32768
   13808:	183fd31e 	bne	r3,zero,13758 <__smakebuf_r+0xd4>
   1380c:	10800094 	ori	r2,r2,2
   13810:	80c010c4 	addi	r3,r16,67
   13814:	8080030d 	sth	r2,12(r16)
   13818:	00800044 	movi	r2,1
   1381c:	80c00015 	stw	r3,0(r16)
   13820:	80c00415 	stw	r3,16(r16)
   13824:	80800515 	stw	r2,20(r16)
   13828:	003fcb06 	br	13758 <__smakebuf_r+0xd4>

0001382c <memset>:
   1382c:	00c000c4 	movi	r3,3
   13830:	2005883a 	mov	r2,r4
   13834:	29403fcc 	andi	r5,r5,255
   13838:	19802d2e 	bgeu	r3,r6,138f0 <memset+0xc4>
   1383c:	20c6703a 	and	r3,r4,r3
   13840:	18002e1e 	bne	r3,zero,138fc <memset+0xd0>
   13844:	2806923a 	slli	r3,r5,8
   13848:	010003c4 	movi	r4,15
   1384c:	3011883a 	mov	r8,r6
   13850:	1946b03a 	or	r3,r3,r5
   13854:	180e943a 	slli	r7,r3,16
   13858:	38ceb03a 	or	r7,r7,r3
   1385c:	1007883a 	mov	r3,r2
   13860:	21800f2e 	bgeu	r4,r6,138a0 <memset+0x74>
   13864:	19c00015 	stw	r7,0(r3)
   13868:	19c00115 	stw	r7,4(r3)
   1386c:	19c00215 	stw	r7,8(r3)
   13870:	19c00315 	stw	r7,12(r3)
   13874:	423ffc04 	addi	r8,r8,-16
   13878:	18c00404 	addi	r3,r3,16
   1387c:	223ff936 	bltu	r4,r8,13864 <memset+0x38>
   13880:	30fffc04 	addi	r3,r6,-16
   13884:	1806d13a 	srli	r3,r3,4
   13888:	318003cc 	andi	r6,r6,15
   1388c:	010000c4 	movi	r4,3
   13890:	18c00044 	addi	r3,r3,1
   13894:	1806913a 	slli	r3,r3,4
   13898:	10c7883a 	add	r3,r2,r3
   1389c:	21800e2e 	bgeu	r4,r6,138d8 <memset+0xac>
   138a0:	1813883a 	mov	r9,r3
   138a4:	3011883a 	mov	r8,r6
   138a8:	010000c4 	movi	r4,3
   138ac:	49c00015 	stw	r7,0(r9)
   138b0:	423fff04 	addi	r8,r8,-4
   138b4:	4a400104 	addi	r9,r9,4
   138b8:	223ffc36 	bltu	r4,r8,138ac <memset+0x80>
   138bc:	313fff04 	addi	r4,r6,-4
   138c0:	2008d0ba 	srli	r4,r4,2
   138c4:	318000cc 	andi	r6,r6,3
   138c8:	21000044 	addi	r4,r4,1
   138cc:	2109883a 	add	r4,r4,r4
   138d0:	2109883a 	add	r4,r4,r4
   138d4:	1907883a 	add	r3,r3,r4
   138d8:	30000a26 	beq	r6,zero,13904 <memset+0xd8>
   138dc:	198d883a 	add	r6,r3,r6
   138e0:	19400005 	stb	r5,0(r3)
   138e4:	18c00044 	addi	r3,r3,1
   138e8:	19bffd1e 	bne	r3,r6,138e0 <memset+0xb4>
   138ec:	f800283a 	ret
   138f0:	2007883a 	mov	r3,r4
   138f4:	303ff91e 	bne	r6,zero,138dc <memset+0xb0>
   138f8:	00000206 	br	13904 <memset+0xd8>
   138fc:	2007883a 	mov	r3,r4
   13900:	003ff606 	br	138dc <memset+0xb0>
   13904:	f800283a 	ret

00013908 <__sread>:
   13908:	defffe04 	addi	sp,sp,-8
   1390c:	dc000015 	stw	r16,0(sp)
   13910:	2821883a 	mov	r16,r5
   13914:	2940038f 	ldh	r5,14(r5)
   13918:	dfc00115 	stw	ra,4(sp)
   1391c:	0013da00 	call	13da0 <_read_r>
   13920:	10000716 	blt	r2,zero,13940 <__sread+0x38>
   13924:	80c01417 	ldw	r3,80(r16)
   13928:	1887883a 	add	r3,r3,r2
   1392c:	80c01415 	stw	r3,80(r16)
   13930:	dfc00117 	ldw	ra,4(sp)
   13934:	dc000017 	ldw	r16,0(sp)
   13938:	dec00204 	addi	sp,sp,8
   1393c:	f800283a 	ret
   13940:	80c0030b 	ldhu	r3,12(r16)
   13944:	18fbffcc 	andi	r3,r3,61439
   13948:	80c0030d 	sth	r3,12(r16)
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	dc000017 	ldw	r16,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <__swrite>:
   1395c:	2880030b 	ldhu	r2,12(r5)
   13960:	defffb04 	addi	sp,sp,-20
   13964:	dcc00315 	stw	r19,12(sp)
   13968:	10c0400c 	andi	r3,r2,256
   1396c:	18ffffcc 	andi	r3,r3,65535
   13970:	18e0001c 	xori	r3,r3,32768
   13974:	dc800215 	stw	r18,8(sp)
   13978:	dc400115 	stw	r17,4(sp)
   1397c:	dc000015 	stw	r16,0(sp)
   13980:	dfc00415 	stw	ra,16(sp)
   13984:	18e00004 	addi	r3,r3,-32768
   13988:	2821883a 	mov	r16,r5
   1398c:	2027883a 	mov	r19,r4
   13990:	3025883a 	mov	r18,r6
   13994:	3823883a 	mov	r17,r7
   13998:	18000526 	beq	r3,zero,139b0 <__swrite+0x54>
   1399c:	2940038f 	ldh	r5,14(r5)
   139a0:	000d883a 	mov	r6,zero
   139a4:	01c00084 	movi	r7,2
   139a8:	0013d340 	call	13d34 <_lseek_r>
   139ac:	8080030b 	ldhu	r2,12(r16)
   139b0:	8140038f 	ldh	r5,14(r16)
   139b4:	10bbffcc 	andi	r2,r2,61439
   139b8:	9809883a 	mov	r4,r19
   139bc:	900d883a 	mov	r6,r18
   139c0:	880f883a 	mov	r7,r17
   139c4:	8080030d 	sth	r2,12(r16)
   139c8:	dfc00417 	ldw	ra,16(sp)
   139cc:	dcc00317 	ldw	r19,12(sp)
   139d0:	dc800217 	ldw	r18,8(sp)
   139d4:	dc400117 	ldw	r17,4(sp)
   139d8:	dc000017 	ldw	r16,0(sp)
   139dc:	dec00504 	addi	sp,sp,20
   139e0:	0013a481 	jmpi	13a48 <_write_r>

000139e4 <__sseek>:
   139e4:	defffe04 	addi	sp,sp,-8
   139e8:	dc000015 	stw	r16,0(sp)
   139ec:	2821883a 	mov	r16,r5
   139f0:	2940038f 	ldh	r5,14(r5)
   139f4:	dfc00115 	stw	ra,4(sp)
   139f8:	0013d340 	call	13d34 <_lseek_r>
   139fc:	00ffffc4 	movi	r3,-1
   13a00:	10c00826 	beq	r2,r3,13a24 <__sseek+0x40>
   13a04:	80c0030b 	ldhu	r3,12(r16)
   13a08:	80801415 	stw	r2,80(r16)
   13a0c:	18c40014 	ori	r3,r3,4096
   13a10:	80c0030d 	sth	r3,12(r16)
   13a14:	dfc00117 	ldw	ra,4(sp)
   13a18:	dc000017 	ldw	r16,0(sp)
   13a1c:	dec00204 	addi	sp,sp,8
   13a20:	f800283a 	ret
   13a24:	80c0030b 	ldhu	r3,12(r16)
   13a28:	18fbffcc 	andi	r3,r3,61439
   13a2c:	80c0030d 	sth	r3,12(r16)
   13a30:	dfc00117 	ldw	ra,4(sp)
   13a34:	dc000017 	ldw	r16,0(sp)
   13a38:	dec00204 	addi	sp,sp,8
   13a3c:	f800283a 	ret

00013a40 <__sclose>:
   13a40:	2940038f 	ldh	r5,14(r5)
   13a44:	0013ab41 	jmpi	13ab4 <_close_r>

00013a48 <_write_r>:
   13a48:	defffd04 	addi	sp,sp,-12
   13a4c:	dc400115 	stw	r17,4(sp)
   13a50:	dc000015 	stw	r16,0(sp)
   13a54:	2023883a 	mov	r17,r4
   13a58:	040000b4 	movhi	r16,2
   13a5c:	842c4804 	addi	r16,r16,-20192
   13a60:	2809883a 	mov	r4,r5
   13a64:	300b883a 	mov	r5,r6
   13a68:	380d883a 	mov	r6,r7
   13a6c:	dfc00215 	stw	ra,8(sp)
   13a70:	80000015 	stw	zero,0(r16)
   13a74:	00146d40 	call	146d4 <write>
   13a78:	00ffffc4 	movi	r3,-1
   13a7c:	10c00526 	beq	r2,r3,13a94 <_write_r+0x4c>
   13a80:	dfc00217 	ldw	ra,8(sp)
   13a84:	dc400117 	ldw	r17,4(sp)
   13a88:	dc000017 	ldw	r16,0(sp)
   13a8c:	dec00304 	addi	sp,sp,12
   13a90:	f800283a 	ret
   13a94:	80c00017 	ldw	r3,0(r16)
   13a98:	183ff926 	beq	r3,zero,13a80 <_write_r+0x38>
   13a9c:	88c00015 	stw	r3,0(r17)
   13aa0:	dfc00217 	ldw	ra,8(sp)
   13aa4:	dc400117 	ldw	r17,4(sp)
   13aa8:	dc000017 	ldw	r16,0(sp)
   13aac:	dec00304 	addi	sp,sp,12
   13ab0:	f800283a 	ret

00013ab4 <_close_r>:
   13ab4:	defffd04 	addi	sp,sp,-12
   13ab8:	dc400115 	stw	r17,4(sp)
   13abc:	dc000015 	stw	r16,0(sp)
   13ac0:	2023883a 	mov	r17,r4
   13ac4:	040000b4 	movhi	r16,2
   13ac8:	842c4804 	addi	r16,r16,-20192
   13acc:	2809883a 	mov	r4,r5
   13ad0:	dfc00215 	stw	ra,8(sp)
   13ad4:	80000015 	stw	zero,0(r16)
   13ad8:	0013e5c0 	call	13e5c <close>
   13adc:	00ffffc4 	movi	r3,-1
   13ae0:	10c00526 	beq	r2,r3,13af8 <_close_r+0x44>
   13ae4:	dfc00217 	ldw	ra,8(sp)
   13ae8:	dc400117 	ldw	r17,4(sp)
   13aec:	dc000017 	ldw	r16,0(sp)
   13af0:	dec00304 	addi	sp,sp,12
   13af4:	f800283a 	ret
   13af8:	80c00017 	ldw	r3,0(r16)
   13afc:	183ff926 	beq	r3,zero,13ae4 <_close_r+0x30>
   13b00:	88c00015 	stw	r3,0(r17)
   13b04:	dfc00217 	ldw	ra,8(sp)
   13b08:	dc400117 	ldw	r17,4(sp)
   13b0c:	dc000017 	ldw	r16,0(sp)
   13b10:	dec00304 	addi	sp,sp,12
   13b14:	f800283a 	ret

00013b18 <_fclose_r>:
   13b18:	defffc04 	addi	sp,sp,-16
   13b1c:	dc400115 	stw	r17,4(sp)
   13b20:	dc000015 	stw	r16,0(sp)
   13b24:	dfc00315 	stw	ra,12(sp)
   13b28:	dc800215 	stw	r18,8(sp)
   13b2c:	2821883a 	mov	r16,r5
   13b30:	2023883a 	mov	r17,r4
   13b34:	28003426 	beq	r5,zero,13c08 <_fclose_r+0xf0>
   13b38:	00130d80 	call	130d8 <__sfp_lock_acquire>
   13b3c:	88000226 	beq	r17,zero,13b48 <_fclose_r+0x30>
   13b40:	88800e17 	ldw	r2,56(r17)
   13b44:	10003826 	beq	r2,zero,13c28 <_fclose_r+0x110>
   13b48:	8080030f 	ldh	r2,12(r16)
   13b4c:	10002526 	beq	r2,zero,13be4 <_fclose_r+0xcc>
   13b50:	8809883a 	mov	r4,r17
   13b54:	800b883a 	mov	r5,r16
   13b58:	0012c140 	call	12c14 <_fflush_r>
   13b5c:	1025883a 	mov	r18,r2
   13b60:	80800b17 	ldw	r2,44(r16)
   13b64:	10000426 	beq	r2,zero,13b78 <_fclose_r+0x60>
   13b68:	81400717 	ldw	r5,28(r16)
   13b6c:	8809883a 	mov	r4,r17
   13b70:	103ee83a 	callr	r2
   13b74:	10003516 	blt	r2,zero,13c4c <_fclose_r+0x134>
   13b78:	8080030b 	ldhu	r2,12(r16)
   13b7c:	1080200c 	andi	r2,r2,128
   13b80:	10bfffcc 	andi	r2,r2,65535
   13b84:	10a0001c 	xori	r2,r2,32768
   13b88:	10a00004 	addi	r2,r2,-32768
   13b8c:	10002b1e 	bne	r2,zero,13c3c <_fclose_r+0x124>
   13b90:	81400c17 	ldw	r5,48(r16)
   13b94:	28000526 	beq	r5,zero,13bac <_fclose_r+0x94>
   13b98:	80801004 	addi	r2,r16,64
   13b9c:	28800226 	beq	r5,r2,13ba8 <_fclose_r+0x90>
   13ba0:	8809883a 	mov	r4,r17
   13ba4:	00132540 	call	13254 <_free_r>
   13ba8:	80000c15 	stw	zero,48(r16)
   13bac:	81401117 	ldw	r5,68(r16)
   13bb0:	28000326 	beq	r5,zero,13bc0 <_fclose_r+0xa8>
   13bb4:	8809883a 	mov	r4,r17
   13bb8:	00132540 	call	13254 <_free_r>
   13bbc:	80001115 	stw	zero,68(r16)
   13bc0:	8000030d 	sth	zero,12(r16)
   13bc4:	00130dc0 	call	130dc <__sfp_lock_release>
   13bc8:	9005883a 	mov	r2,r18
   13bcc:	dfc00317 	ldw	ra,12(sp)
   13bd0:	dc800217 	ldw	r18,8(sp)
   13bd4:	dc400117 	ldw	r17,4(sp)
   13bd8:	dc000017 	ldw	r16,0(sp)
   13bdc:	dec00404 	addi	sp,sp,16
   13be0:	f800283a 	ret
   13be4:	00130dc0 	call	130dc <__sfp_lock_release>
   13be8:	0025883a 	mov	r18,zero
   13bec:	9005883a 	mov	r2,r18
   13bf0:	dfc00317 	ldw	ra,12(sp)
   13bf4:	dc800217 	ldw	r18,8(sp)
   13bf8:	dc400117 	ldw	r17,4(sp)
   13bfc:	dc000017 	ldw	r16,0(sp)
   13c00:	dec00404 	addi	sp,sp,16
   13c04:	f800283a 	ret
   13c08:	0025883a 	mov	r18,zero
   13c0c:	9005883a 	mov	r2,r18
   13c10:	dfc00317 	ldw	ra,12(sp)
   13c14:	dc800217 	ldw	r18,8(sp)
   13c18:	dc400117 	ldw	r17,4(sp)
   13c1c:	dc000017 	ldw	r16,0(sp)
   13c20:	dec00404 	addi	sp,sp,16
   13c24:	f800283a 	ret
   13c28:	8809883a 	mov	r4,r17
   13c2c:	0012ed00 	call	12ed0 <__sinit>
   13c30:	8080030f 	ldh	r2,12(r16)
   13c34:	103fc61e 	bne	r2,zero,13b50 <_fclose_r+0x38>
   13c38:	003fea06 	br	13be4 <_fclose_r+0xcc>
   13c3c:	81400417 	ldw	r5,16(r16)
   13c40:	8809883a 	mov	r4,r17
   13c44:	00132540 	call	13254 <_free_r>
   13c48:	003fd106 	br	13b90 <_fclose_r+0x78>
   13c4c:	04bfffc4 	movi	r18,-1
   13c50:	003fc906 	br	13b78 <_fclose_r+0x60>

00013c54 <fclose>:
   13c54:	008000b4 	movhi	r2,2
   13c58:	10a37e04 	addi	r2,r2,-29192
   13c5c:	200b883a 	mov	r5,r4
   13c60:	11000017 	ldw	r4,0(r2)
   13c64:	0013b181 	jmpi	13b18 <_fclose_r>

00013c68 <_fstat_r>:
   13c68:	defffd04 	addi	sp,sp,-12
   13c6c:	dc400115 	stw	r17,4(sp)
   13c70:	dc000015 	stw	r16,0(sp)
   13c74:	2023883a 	mov	r17,r4
   13c78:	040000b4 	movhi	r16,2
   13c7c:	842c4804 	addi	r16,r16,-20192
   13c80:	2809883a 	mov	r4,r5
   13c84:	300b883a 	mov	r5,r6
   13c88:	dfc00215 	stw	ra,8(sp)
   13c8c:	80000015 	stw	zero,0(r16)
   13c90:	0013fa40 	call	13fa4 <fstat>
   13c94:	00ffffc4 	movi	r3,-1
   13c98:	10c00526 	beq	r2,r3,13cb0 <_fstat_r+0x48>
   13c9c:	dfc00217 	ldw	ra,8(sp)
   13ca0:	dc400117 	ldw	r17,4(sp)
   13ca4:	dc000017 	ldw	r16,0(sp)
   13ca8:	dec00304 	addi	sp,sp,12
   13cac:	f800283a 	ret
   13cb0:	80c00017 	ldw	r3,0(r16)
   13cb4:	183ff926 	beq	r3,zero,13c9c <_fstat_r+0x34>
   13cb8:	88c00015 	stw	r3,0(r17)
   13cbc:	dfc00217 	ldw	ra,8(sp)
   13cc0:	dc400117 	ldw	r17,4(sp)
   13cc4:	dc000017 	ldw	r16,0(sp)
   13cc8:	dec00304 	addi	sp,sp,12
   13ccc:	f800283a 	ret

00013cd0 <_isatty_r>:
   13cd0:	defffd04 	addi	sp,sp,-12
   13cd4:	dc400115 	stw	r17,4(sp)
   13cd8:	dc000015 	stw	r16,0(sp)
   13cdc:	2023883a 	mov	r17,r4
   13ce0:	040000b4 	movhi	r16,2
   13ce4:	842c4804 	addi	r16,r16,-20192
   13ce8:	2809883a 	mov	r4,r5
   13cec:	dfc00215 	stw	ra,8(sp)
   13cf0:	80000015 	stw	zero,0(r16)
   13cf4:	00140a40 	call	140a4 <isatty>
   13cf8:	00ffffc4 	movi	r3,-1
   13cfc:	10c00526 	beq	r2,r3,13d14 <_isatty_r+0x44>
   13d00:	dfc00217 	ldw	ra,8(sp)
   13d04:	dc400117 	ldw	r17,4(sp)
   13d08:	dc000017 	ldw	r16,0(sp)
   13d0c:	dec00304 	addi	sp,sp,12
   13d10:	f800283a 	ret
   13d14:	80c00017 	ldw	r3,0(r16)
   13d18:	183ff926 	beq	r3,zero,13d00 <_isatty_r+0x30>
   13d1c:	88c00015 	stw	r3,0(r17)
   13d20:	dfc00217 	ldw	ra,8(sp)
   13d24:	dc400117 	ldw	r17,4(sp)
   13d28:	dc000017 	ldw	r16,0(sp)
   13d2c:	dec00304 	addi	sp,sp,12
   13d30:	f800283a 	ret

00013d34 <_lseek_r>:
   13d34:	defffd04 	addi	sp,sp,-12
   13d38:	dc400115 	stw	r17,4(sp)
   13d3c:	dc000015 	stw	r16,0(sp)
   13d40:	2023883a 	mov	r17,r4
   13d44:	040000b4 	movhi	r16,2
   13d48:	842c4804 	addi	r16,r16,-20192
   13d4c:	2809883a 	mov	r4,r5
   13d50:	300b883a 	mov	r5,r6
   13d54:	380d883a 	mov	r6,r7
   13d58:	dfc00215 	stw	ra,8(sp)
   13d5c:	80000015 	stw	zero,0(r16)
   13d60:	00142840 	call	14284 <lseek>
   13d64:	00ffffc4 	movi	r3,-1
   13d68:	10c00526 	beq	r2,r3,13d80 <_lseek_r+0x4c>
   13d6c:	dfc00217 	ldw	ra,8(sp)
   13d70:	dc400117 	ldw	r17,4(sp)
   13d74:	dc000017 	ldw	r16,0(sp)
   13d78:	dec00304 	addi	sp,sp,12
   13d7c:	f800283a 	ret
   13d80:	80c00017 	ldw	r3,0(r16)
   13d84:	183ff926 	beq	r3,zero,13d6c <_lseek_r+0x38>
   13d88:	88c00015 	stw	r3,0(r17)
   13d8c:	dfc00217 	ldw	ra,8(sp)
   13d90:	dc400117 	ldw	r17,4(sp)
   13d94:	dc000017 	ldw	r16,0(sp)
   13d98:	dec00304 	addi	sp,sp,12
   13d9c:	f800283a 	ret

00013da0 <_read_r>:
   13da0:	defffd04 	addi	sp,sp,-12
   13da4:	dc400115 	stw	r17,4(sp)
   13da8:	dc000015 	stw	r16,0(sp)
   13dac:	2023883a 	mov	r17,r4
   13db0:	040000b4 	movhi	r16,2
   13db4:	842c4804 	addi	r16,r16,-20192
   13db8:	2809883a 	mov	r4,r5
   13dbc:	300b883a 	mov	r5,r6
   13dc0:	380d883a 	mov	r6,r7
   13dc4:	dfc00215 	stw	ra,8(sp)
   13dc8:	80000015 	stw	zero,0(r16)
   13dcc:	00144600 	call	14460 <read>
   13dd0:	00ffffc4 	movi	r3,-1
   13dd4:	10c00526 	beq	r2,r3,13dec <_read_r+0x4c>
   13dd8:	dfc00217 	ldw	ra,8(sp)
   13ddc:	dc400117 	ldw	r17,4(sp)
   13de0:	dc000017 	ldw	r16,0(sp)
   13de4:	dec00304 	addi	sp,sp,12
   13de8:	f800283a 	ret
   13dec:	80c00017 	ldw	r3,0(r16)
   13df0:	183ff926 	beq	r3,zero,13dd8 <_read_r+0x38>
   13df4:	88c00015 	stw	r3,0(r17)
   13df8:	dfc00217 	ldw	ra,8(sp)
   13dfc:	dc400117 	ldw	r17,4(sp)
   13e00:	dc000017 	ldw	r16,0(sp)
   13e04:	dec00304 	addi	sp,sp,12
   13e08:	f800283a 	ret

00013e0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e0c:	defffe04 	addi	sp,sp,-8
   13e10:	dfc00115 	stw	ra,4(sp)
   13e14:	df000015 	stw	fp,0(sp)
   13e18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e1c:	008000b4 	movhi	r2,2
   13e20:	10a38604 	addi	r2,r2,-29160
   13e24:	10800017 	ldw	r2,0(r2)
   13e28:	10000526 	beq	r2,zero,13e40 <alt_get_errno+0x34>
   13e2c:	008000b4 	movhi	r2,2
   13e30:	10a38604 	addi	r2,r2,-29160
   13e34:	10800017 	ldw	r2,0(r2)
   13e38:	103ee83a 	callr	r2
   13e3c:	00000206 	br	13e48 <alt_get_errno+0x3c>
   13e40:	008000b4 	movhi	r2,2
   13e44:	10ac4804 	addi	r2,r2,-20192
}
   13e48:	e037883a 	mov	sp,fp
   13e4c:	dfc00117 	ldw	ra,4(sp)
   13e50:	df000017 	ldw	fp,0(sp)
   13e54:	dec00204 	addi	sp,sp,8
   13e58:	f800283a 	ret

00013e5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13e5c:	defffb04 	addi	sp,sp,-20
   13e60:	dfc00415 	stw	ra,16(sp)
   13e64:	df000315 	stw	fp,12(sp)
   13e68:	df000304 	addi	fp,sp,12
   13e6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13e70:	e0bfff17 	ldw	r2,-4(fp)
   13e74:	10000716 	blt	r2,zero,13e94 <close+0x38>
   13e78:	e13fff17 	ldw	r4,-4(fp)
   13e7c:	01400304 	movi	r5,12
   13e80:	00112c80 	call	112c8 <__mulsi3>
   13e84:	00c00074 	movhi	r3,1
   13e88:	18df0504 	addi	r3,r3,31764
   13e8c:	10c5883a 	add	r2,r2,r3
   13e90:	00000106 	br	13e98 <close+0x3c>
   13e94:	0005883a 	mov	r2,zero
   13e98:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13e9c:	e0bffd17 	ldw	r2,-12(fp)
   13ea0:	10001826 	beq	r2,zero,13f04 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13ea4:	e0bffd17 	ldw	r2,-12(fp)
   13ea8:	10800017 	ldw	r2,0(r2)
   13eac:	10800417 	ldw	r2,16(r2)
   13eb0:	10000626 	beq	r2,zero,13ecc <close+0x70>
   13eb4:	e0bffd17 	ldw	r2,-12(fp)
   13eb8:	10800017 	ldw	r2,0(r2)
   13ebc:	10800417 	ldw	r2,16(r2)
   13ec0:	e13ffd17 	ldw	r4,-12(fp)
   13ec4:	103ee83a 	callr	r2
   13ec8:	00000106 	br	13ed0 <close+0x74>
   13ecc:	0005883a 	mov	r2,zero
   13ed0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13ed4:	e13fff17 	ldw	r4,-4(fp)
   13ed8:	00145540 	call	14554 <alt_release_fd>
    if (rval < 0)
   13edc:	e0bffe17 	ldw	r2,-8(fp)
   13ee0:	1000060e 	bge	r2,zero,13efc <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13ee4:	0013e0c0 	call	13e0c <alt_get_errno>
   13ee8:	e0fffe17 	ldw	r3,-8(fp)
   13eec:	00c7c83a 	sub	r3,zero,r3
   13ef0:	10c00015 	stw	r3,0(r2)
      return -1;
   13ef4:	00bfffc4 	movi	r2,-1
   13ef8:	00000606 	br	13f14 <close+0xb8>
    }
    return 0;
   13efc:	0005883a 	mov	r2,zero
   13f00:	00000406 	br	13f14 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f04:	0013e0c0 	call	13e0c <alt_get_errno>
   13f08:	00c01444 	movi	r3,81
   13f0c:	10c00015 	stw	r3,0(r2)
    return -1;
   13f10:	00bfffc4 	movi	r2,-1
  }
}
   13f14:	e037883a 	mov	sp,fp
   13f18:	dfc00117 	ldw	ra,4(sp)
   13f1c:	df000017 	ldw	fp,0(sp)
   13f20:	dec00204 	addi	sp,sp,8
   13f24:	f800283a 	ret

00013f28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13f28:	defffc04 	addi	sp,sp,-16
   13f2c:	df000315 	stw	fp,12(sp)
   13f30:	df000304 	addi	fp,sp,12
   13f34:	e13ffd15 	stw	r4,-12(fp)
   13f38:	e17ffe15 	stw	r5,-8(fp)
   13f3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13f40:	e0bfff17 	ldw	r2,-4(fp)
}
   13f44:	e037883a 	mov	sp,fp
   13f48:	df000017 	ldw	fp,0(sp)
   13f4c:	dec00104 	addi	sp,sp,4
   13f50:	f800283a 	ret

00013f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13f54:	defffe04 	addi	sp,sp,-8
   13f58:	dfc00115 	stw	ra,4(sp)
   13f5c:	df000015 	stw	fp,0(sp)
   13f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13f64:	008000b4 	movhi	r2,2
   13f68:	10a38604 	addi	r2,r2,-29160
   13f6c:	10800017 	ldw	r2,0(r2)
   13f70:	10000526 	beq	r2,zero,13f88 <alt_get_errno+0x34>
   13f74:	008000b4 	movhi	r2,2
   13f78:	10a38604 	addi	r2,r2,-29160
   13f7c:	10800017 	ldw	r2,0(r2)
   13f80:	103ee83a 	callr	r2
   13f84:	00000206 	br	13f90 <alt_get_errno+0x3c>
   13f88:	008000b4 	movhi	r2,2
   13f8c:	10ac4804 	addi	r2,r2,-20192
}
   13f90:	e037883a 	mov	sp,fp
   13f94:	dfc00117 	ldw	ra,4(sp)
   13f98:	df000017 	ldw	fp,0(sp)
   13f9c:	dec00204 	addi	sp,sp,8
   13fa0:	f800283a 	ret

00013fa4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13fa4:	defffb04 	addi	sp,sp,-20
   13fa8:	dfc00415 	stw	ra,16(sp)
   13fac:	df000315 	stw	fp,12(sp)
   13fb0:	df000304 	addi	fp,sp,12
   13fb4:	e13ffe15 	stw	r4,-8(fp)
   13fb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13fbc:	e0bffe17 	ldw	r2,-8(fp)
   13fc0:	10000716 	blt	r2,zero,13fe0 <fstat+0x3c>
   13fc4:	e13ffe17 	ldw	r4,-8(fp)
   13fc8:	01400304 	movi	r5,12
   13fcc:	00112c80 	call	112c8 <__mulsi3>
   13fd0:	00c00074 	movhi	r3,1
   13fd4:	18df0504 	addi	r3,r3,31764
   13fd8:	10c5883a 	add	r2,r2,r3
   13fdc:	00000106 	br	13fe4 <fstat+0x40>
   13fe0:	0005883a 	mov	r2,zero
   13fe4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13fe8:	e0bffd17 	ldw	r2,-12(fp)
   13fec:	10001026 	beq	r2,zero,14030 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13ff0:	e0bffd17 	ldw	r2,-12(fp)
   13ff4:	10800017 	ldw	r2,0(r2)
   13ff8:	10800817 	ldw	r2,32(r2)
   13ffc:	10000726 	beq	r2,zero,1401c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   14000:	e0bffd17 	ldw	r2,-12(fp)
   14004:	10800017 	ldw	r2,0(r2)
   14008:	10800817 	ldw	r2,32(r2)
   1400c:	e13ffd17 	ldw	r4,-12(fp)
   14010:	e17fff17 	ldw	r5,-4(fp)
   14014:	103ee83a 	callr	r2
   14018:	00000906 	br	14040 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1401c:	e0bfff17 	ldw	r2,-4(fp)
   14020:	00c80004 	movi	r3,8192
   14024:	10c00115 	stw	r3,4(r2)
      return 0;
   14028:	0005883a 	mov	r2,zero
   1402c:	00000406 	br	14040 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14030:	0013f540 	call	13f54 <alt_get_errno>
   14034:	00c01444 	movi	r3,81
   14038:	10c00015 	stw	r3,0(r2)
    return -1;
   1403c:	00bfffc4 	movi	r2,-1
  }
}
   14040:	e037883a 	mov	sp,fp
   14044:	dfc00117 	ldw	ra,4(sp)
   14048:	df000017 	ldw	fp,0(sp)
   1404c:	dec00204 	addi	sp,sp,8
   14050:	f800283a 	ret

00014054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14054:	defffe04 	addi	sp,sp,-8
   14058:	dfc00115 	stw	ra,4(sp)
   1405c:	df000015 	stw	fp,0(sp)
   14060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14064:	008000b4 	movhi	r2,2
   14068:	10a38604 	addi	r2,r2,-29160
   1406c:	10800017 	ldw	r2,0(r2)
   14070:	10000526 	beq	r2,zero,14088 <alt_get_errno+0x34>
   14074:	008000b4 	movhi	r2,2
   14078:	10a38604 	addi	r2,r2,-29160
   1407c:	10800017 	ldw	r2,0(r2)
   14080:	103ee83a 	callr	r2
   14084:	00000206 	br	14090 <alt_get_errno+0x3c>
   14088:	008000b4 	movhi	r2,2
   1408c:	10ac4804 	addi	r2,r2,-20192
}
   14090:	e037883a 	mov	sp,fp
   14094:	dfc00117 	ldw	ra,4(sp)
   14098:	df000017 	ldw	fp,0(sp)
   1409c:	dec00204 	addi	sp,sp,8
   140a0:	f800283a 	ret

000140a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   140a4:	deffed04 	addi	sp,sp,-76
   140a8:	dfc01215 	stw	ra,72(sp)
   140ac:	df001115 	stw	fp,68(sp)
   140b0:	df001104 	addi	fp,sp,68
   140b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140b8:	e0bfff17 	ldw	r2,-4(fp)
   140bc:	10000716 	blt	r2,zero,140dc <isatty+0x38>
   140c0:	e13fff17 	ldw	r4,-4(fp)
   140c4:	01400304 	movi	r5,12
   140c8:	00112c80 	call	112c8 <__mulsi3>
   140cc:	00c00074 	movhi	r3,1
   140d0:	18df0504 	addi	r3,r3,31764
   140d4:	10c5883a 	add	r2,r2,r3
   140d8:	00000106 	br	140e0 <isatty+0x3c>
   140dc:	0005883a 	mov	r2,zero
   140e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   140e4:	e0bfef17 	ldw	r2,-68(fp)
   140e8:	10000e26 	beq	r2,zero,14124 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   140ec:	e0bfef17 	ldw	r2,-68(fp)
   140f0:	10800017 	ldw	r2,0(r2)
   140f4:	10800817 	ldw	r2,32(r2)
   140f8:	1000021e 	bne	r2,zero,14104 <isatty+0x60>
    {
      return 1;
   140fc:	00800044 	movi	r2,1
   14100:	00000c06 	br	14134 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14104:	e0bff004 	addi	r2,fp,-64
   14108:	e13fff17 	ldw	r4,-4(fp)
   1410c:	100b883a 	mov	r5,r2
   14110:	0013fa40 	call	13fa4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14114:	e0bff117 	ldw	r2,-60(fp)
   14118:	10880020 	cmpeqi	r2,r2,8192
   1411c:	10803fcc 	andi	r2,r2,255
   14120:	00000406 	br	14134 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14124:	00140540 	call	14054 <alt_get_errno>
   14128:	00c01444 	movi	r3,81
   1412c:	10c00015 	stw	r3,0(r2)
    return 0;
   14130:	0005883a 	mov	r2,zero
  }
}
   14134:	e037883a 	mov	sp,fp
   14138:	dfc00117 	ldw	ra,4(sp)
   1413c:	df000017 	ldw	fp,0(sp)
   14140:	dec00204 	addi	sp,sp,8
   14144:	f800283a 	ret

00014148 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14148:	defffc04 	addi	sp,sp,-16
   1414c:	df000315 	stw	fp,12(sp)
   14150:	df000304 	addi	fp,sp,12
   14154:	e13ffd15 	stw	r4,-12(fp)
   14158:	e17ffe15 	stw	r5,-8(fp)
   1415c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   14160:	e0fffe17 	ldw	r3,-8(fp)
   14164:	e0bffd17 	ldw	r2,-12(fp)
   14168:	18800e26 	beq	r3,r2,141a4 <alt_load_section+0x5c>
  {
    while( to != end )
   1416c:	00000a06 	br	14198 <alt_load_section+0x50>
    {
      *to++ = *from++;
   14170:	e0bffd17 	ldw	r2,-12(fp)
   14174:	10c00017 	ldw	r3,0(r2)
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10c00015 	stw	r3,0(r2)
   14180:	e0bffe17 	ldw	r2,-8(fp)
   14184:	10800104 	addi	r2,r2,4
   14188:	e0bffe15 	stw	r2,-8(fp)
   1418c:	e0bffd17 	ldw	r2,-12(fp)
   14190:	10800104 	addi	r2,r2,4
   14194:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   14198:	e0fffe17 	ldw	r3,-8(fp)
   1419c:	e0bfff17 	ldw	r2,-4(fp)
   141a0:	18bff31e 	bne	r3,r2,14170 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   141a4:	e037883a 	mov	sp,fp
   141a8:	df000017 	ldw	fp,0(sp)
   141ac:	dec00104 	addi	sp,sp,4
   141b0:	f800283a 	ret

000141b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   141b4:	defffe04 	addi	sp,sp,-8
   141b8:	dfc00115 	stw	ra,4(sp)
   141bc:	df000015 	stw	fp,0(sp)
   141c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   141c4:	010000b4 	movhi	r4,2
   141c8:	21238b04 	addi	r4,r4,-29140
   141cc:	01400074 	movhi	r5,1
   141d0:	295ad604 	addi	r5,r5,27480
   141d4:	018000b4 	movhi	r6,2
   141d8:	31a38b04 	addi	r6,r6,-29140
   141dc:	00141480 	call	14148 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   141e0:	01000074 	movhi	r4,1
   141e4:	21000804 	addi	r4,r4,32
   141e8:	01400074 	movhi	r5,1
   141ec:	29400804 	addi	r5,r5,32
   141f0:	01800074 	movhi	r6,1
   141f4:	31806e04 	addi	r6,r6,440
   141f8:	00141480 	call	14148 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   141fc:	01000074 	movhi	r4,1
   14200:	211ab304 	addi	r4,r4,27340
   14204:	01400074 	movhi	r5,1
   14208:	295ab304 	addi	r5,r5,27340
   1420c:	01800074 	movhi	r6,1
   14210:	319ad604 	addi	r6,r6,27480
   14214:	00141480 	call	14148 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14218:	0015a2c0 	call	15a2c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1421c:	0015bf00 	call	15bf0 <alt_icache_flush_all>
}
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14234:	defffe04 	addi	sp,sp,-8
   14238:	dfc00115 	stw	ra,4(sp)
   1423c:	df000015 	stw	fp,0(sp)
   14240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14244:	008000b4 	movhi	r2,2
   14248:	10a38604 	addi	r2,r2,-29160
   1424c:	10800017 	ldw	r2,0(r2)
   14250:	10000526 	beq	r2,zero,14268 <alt_get_errno+0x34>
   14254:	008000b4 	movhi	r2,2
   14258:	10a38604 	addi	r2,r2,-29160
   1425c:	10800017 	ldw	r2,0(r2)
   14260:	103ee83a 	callr	r2
   14264:	00000206 	br	14270 <alt_get_errno+0x3c>
   14268:	008000b4 	movhi	r2,2
   1426c:	10ac4804 	addi	r2,r2,-20192
}
   14270:	e037883a 	mov	sp,fp
   14274:	dfc00117 	ldw	ra,4(sp)
   14278:	df000017 	ldw	fp,0(sp)
   1427c:	dec00204 	addi	sp,sp,8
   14280:	f800283a 	ret

00014284 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14284:	defff904 	addi	sp,sp,-28
   14288:	dfc00615 	stw	ra,24(sp)
   1428c:	df000515 	stw	fp,20(sp)
   14290:	df000504 	addi	fp,sp,20
   14294:	e13ffd15 	stw	r4,-12(fp)
   14298:	e17ffe15 	stw	r5,-8(fp)
   1429c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   142a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   142a4:	e0bffd17 	ldw	r2,-12(fp)
   142a8:	10000716 	blt	r2,zero,142c8 <lseek+0x44>
   142ac:	e13ffd17 	ldw	r4,-12(fp)
   142b0:	01400304 	movi	r5,12
   142b4:	00112c80 	call	112c8 <__mulsi3>
   142b8:	00c00074 	movhi	r3,1
   142bc:	18df0504 	addi	r3,r3,31764
   142c0:	10c5883a 	add	r2,r2,r3
   142c4:	00000106 	br	142cc <lseek+0x48>
   142c8:	0005883a 	mov	r2,zero
   142cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   142d0:	e0bffc17 	ldw	r2,-16(fp)
   142d4:	10001026 	beq	r2,zero,14318 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   142d8:	e0bffc17 	ldw	r2,-16(fp)
   142dc:	10800017 	ldw	r2,0(r2)
   142e0:	10800717 	ldw	r2,28(r2)
   142e4:	10000926 	beq	r2,zero,1430c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   142e8:	e0bffc17 	ldw	r2,-16(fp)
   142ec:	10800017 	ldw	r2,0(r2)
   142f0:	10800717 	ldw	r2,28(r2)
   142f4:	e13ffc17 	ldw	r4,-16(fp)
   142f8:	e17ffe17 	ldw	r5,-8(fp)
   142fc:	e1bfff17 	ldw	r6,-4(fp)
   14300:	103ee83a 	callr	r2
   14304:	e0bffb15 	stw	r2,-20(fp)
   14308:	00000506 	br	14320 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1430c:	00bfde84 	movi	r2,-134
   14310:	e0bffb15 	stw	r2,-20(fp)
   14314:	00000206 	br	14320 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   14318:	00bfebc4 	movi	r2,-81
   1431c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	1000060e 	bge	r2,zero,14340 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   14328:	00142340 	call	14234 <alt_get_errno>
   1432c:	e0fffb17 	ldw	r3,-20(fp)
   14330:	00c7c83a 	sub	r3,zero,r3
   14334:	10c00015 	stw	r3,0(r2)
    rc = -1;
   14338:	00bfffc4 	movi	r2,-1
   1433c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14340:	e0bffb17 	ldw	r2,-20(fp)
}
   14344:	e037883a 	mov	sp,fp
   14348:	dfc00117 	ldw	ra,4(sp)
   1434c:	df000017 	ldw	fp,0(sp)
   14350:	dec00204 	addi	sp,sp,8
   14354:	f800283a 	ret

00014358 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14358:	defffd04 	addi	sp,sp,-12
   1435c:	dfc00215 	stw	ra,8(sp)
   14360:	df000115 	stw	fp,4(sp)
   14364:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14368:	0009883a 	mov	r4,zero
   1436c:	00147fc0 	call	147fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14370:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14374:	00148300 	call	14830 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14378:	01000074 	movhi	r4,1
   1437c:	211acc04 	addi	r4,r4,27440
   14380:	01400074 	movhi	r5,1
   14384:	295acc04 	addi	r5,r5,27440
   14388:	01800074 	movhi	r6,1
   1438c:	319acc04 	addi	r6,r6,27440
   14390:	0015fb40 	call	15fb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14394:	0015b380 	call	15b38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14398:	01000074 	movhi	r4,1
   1439c:	2116e504 	addi	r4,r4,23444
   143a0:	00166f80 	call	166f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   143a4:	d128cc17 	ldw	r4,-23760(gp)
   143a8:	d0e8cd17 	ldw	r3,-23756(gp)
   143ac:	d0a8ce17 	ldw	r2,-23752(gp)
   143b0:	180b883a 	mov	r5,r3
   143b4:	100d883a 	mov	r6,r2
   143b8:	0010dd00 	call	10dd0 <main>
   143bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   143c0:	01000044 	movi	r4,1
   143c4:	0013e5c0 	call	13e5c <close>
  exit (result);
   143c8:	e13fff17 	ldw	r4,-4(fp)
   143cc:	001670c0 	call	1670c <exit>

000143d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   143d0:	defffe04 	addi	sp,sp,-8
   143d4:	df000115 	stw	fp,4(sp)
   143d8:	df000104 	addi	fp,sp,4
   143dc:	e13fff15 	stw	r4,-4(fp)
}
   143e0:	e037883a 	mov	sp,fp
   143e4:	df000017 	ldw	fp,0(sp)
   143e8:	dec00104 	addi	sp,sp,4
   143ec:	f800283a 	ret

000143f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   143f0:	defffe04 	addi	sp,sp,-8
   143f4:	df000115 	stw	fp,4(sp)
   143f8:	df000104 	addi	fp,sp,4
   143fc:	e13fff15 	stw	r4,-4(fp)
}
   14400:	e037883a 	mov	sp,fp
   14404:	df000017 	ldw	fp,0(sp)
   14408:	dec00104 	addi	sp,sp,4
   1440c:	f800283a 	ret

00014410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14410:	defffe04 	addi	sp,sp,-8
   14414:	dfc00115 	stw	ra,4(sp)
   14418:	df000015 	stw	fp,0(sp)
   1441c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14420:	008000b4 	movhi	r2,2
   14424:	10a38604 	addi	r2,r2,-29160
   14428:	10800017 	ldw	r2,0(r2)
   1442c:	10000526 	beq	r2,zero,14444 <alt_get_errno+0x34>
   14430:	008000b4 	movhi	r2,2
   14434:	10a38604 	addi	r2,r2,-29160
   14438:	10800017 	ldw	r2,0(r2)
   1443c:	103ee83a 	callr	r2
   14440:	00000206 	br	1444c <alt_get_errno+0x3c>
   14444:	008000b4 	movhi	r2,2
   14448:	10ac4804 	addi	r2,r2,-20192
}
   1444c:	e037883a 	mov	sp,fp
   14450:	dfc00117 	ldw	ra,4(sp)
   14454:	df000017 	ldw	fp,0(sp)
   14458:	dec00204 	addi	sp,sp,8
   1445c:	f800283a 	ret

00014460 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14460:	defff904 	addi	sp,sp,-28
   14464:	dfc00615 	stw	ra,24(sp)
   14468:	df000515 	stw	fp,20(sp)
   1446c:	df000504 	addi	fp,sp,20
   14470:	e13ffd15 	stw	r4,-12(fp)
   14474:	e17ffe15 	stw	r5,-8(fp)
   14478:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1447c:	e0bffd17 	ldw	r2,-12(fp)
   14480:	10000716 	blt	r2,zero,144a0 <read+0x40>
   14484:	e13ffd17 	ldw	r4,-12(fp)
   14488:	01400304 	movi	r5,12
   1448c:	00112c80 	call	112c8 <__mulsi3>
   14490:	00c00074 	movhi	r3,1
   14494:	18df0504 	addi	r3,r3,31764
   14498:	10c5883a 	add	r2,r2,r3
   1449c:	00000106 	br	144a4 <read+0x44>
   144a0:	0005883a 	mov	r2,zero
   144a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   144a8:	e0bffb17 	ldw	r2,-20(fp)
   144ac:	10002026 	beq	r2,zero,14530 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   144b0:	e0bffb17 	ldw	r2,-20(fp)
   144b4:	10800217 	ldw	r2,8(r2)
   144b8:	108000cc 	andi	r2,r2,3
   144bc:	10800060 	cmpeqi	r2,r2,1
   144c0:	1000171e 	bne	r2,zero,14520 <read+0xc0>
        (fd->dev->read))
   144c4:	e0bffb17 	ldw	r2,-20(fp)
   144c8:	10800017 	ldw	r2,0(r2)
   144cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   144d0:	10001326 	beq	r2,zero,14520 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   144d4:	e0bffb17 	ldw	r2,-20(fp)
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	10c00517 	ldw	r3,20(r2)
   144e0:	e0bfff17 	ldw	r2,-4(fp)
   144e4:	e13ffb17 	ldw	r4,-20(fp)
   144e8:	e17ffe17 	ldw	r5,-8(fp)
   144ec:	100d883a 	mov	r6,r2
   144f0:	183ee83a 	callr	r3
   144f4:	e0bffc15 	stw	r2,-16(fp)
   144f8:	e0bffc17 	ldw	r2,-16(fp)
   144fc:	1000060e 	bge	r2,zero,14518 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   14500:	00144100 	call	14410 <alt_get_errno>
   14504:	e0fffc17 	ldw	r3,-16(fp)
   14508:	00c7c83a 	sub	r3,zero,r3
   1450c:	10c00015 	stw	r3,0(r2)
          return -1;
   14510:	00bfffc4 	movi	r2,-1
   14514:	00000a06 	br	14540 <read+0xe0>
        }
        return rval;
   14518:	e0bffc17 	ldw	r2,-16(fp)
   1451c:	00000806 	br	14540 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14520:	00144100 	call	14410 <alt_get_errno>
   14524:	00c00344 	movi	r3,13
   14528:	10c00015 	stw	r3,0(r2)
   1452c:	00000306 	br	1453c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14530:	00144100 	call	14410 <alt_get_errno>
   14534:	00c01444 	movi	r3,81
   14538:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1453c:	00bfffc4 	movi	r2,-1
}
   14540:	e037883a 	mov	sp,fp
   14544:	dfc00117 	ldw	ra,4(sp)
   14548:	df000017 	ldw	fp,0(sp)
   1454c:	dec00204 	addi	sp,sp,8
   14550:	f800283a 	ret

00014554 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14554:	defffc04 	addi	sp,sp,-16
   14558:	dfc00315 	stw	ra,12(sp)
   1455c:	df000215 	stw	fp,8(sp)
   14560:	dc000115 	stw	r16,4(sp)
   14564:	df000104 	addi	fp,sp,4
   14568:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1456c:	e0bfff17 	ldw	r2,-4(fp)
   14570:	108000d0 	cmplti	r2,r2,3
   14574:	1000111e 	bne	r2,zero,145bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   14578:	04000074 	movhi	r16,1
   1457c:	841f0504 	addi	r16,r16,31764
   14580:	e0bfff17 	ldw	r2,-4(fp)
   14584:	1009883a 	mov	r4,r2
   14588:	01400304 	movi	r5,12
   1458c:	00112c80 	call	112c8 <__mulsi3>
   14590:	8085883a 	add	r2,r16,r2
   14594:	10800204 	addi	r2,r2,8
   14598:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1459c:	04000074 	movhi	r16,1
   145a0:	841f0504 	addi	r16,r16,31764
   145a4:	e0bfff17 	ldw	r2,-4(fp)
   145a8:	1009883a 	mov	r4,r2
   145ac:	01400304 	movi	r5,12
   145b0:	00112c80 	call	112c8 <__mulsi3>
   145b4:	8085883a 	add	r2,r16,r2
   145b8:	10000015 	stw	zero,0(r2)
  }
}
   145bc:	e037883a 	mov	sp,fp
   145c0:	dfc00217 	ldw	ra,8(sp)
   145c4:	df000117 	ldw	fp,4(sp)
   145c8:	dc000017 	ldw	r16,0(sp)
   145cc:	dec00304 	addi	sp,sp,12
   145d0:	f800283a 	ret

000145d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   145d4:	defff904 	addi	sp,sp,-28
   145d8:	df000615 	stw	fp,24(sp)
   145dc:	df000604 	addi	fp,sp,24
   145e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145e4:	0005303a 	rdctl	r2,status
   145e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145ec:	e0fffc17 	ldw	r3,-16(fp)
   145f0:	00bfff84 	movi	r2,-2
   145f4:	1884703a 	and	r2,r3,r2
   145f8:	1001703a 	wrctl	status,r2
  
  return context;
   145fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14600:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14604:	d0a00a17 	ldw	r2,-32728(gp)
   14608:	10c000c4 	addi	r3,r2,3
   1460c:	00bfff04 	movi	r2,-4
   14610:	1884703a 	and	r2,r3,r2
   14614:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14618:	d0e00a17 	ldw	r3,-32728(gp)
   1461c:	e0bfff17 	ldw	r2,-4(fp)
   14620:	1885883a 	add	r2,r3,r2
   14624:	00c000b4 	movhi	r3,2
   14628:	18c00004 	addi	r3,r3,0
   1462c:	1880062e 	bgeu	r3,r2,14648 <sbrk+0x74>
   14630:	e0bffa17 	ldw	r2,-24(fp)
   14634:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14638:	e0bffd17 	ldw	r2,-12(fp)
   1463c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14640:	00bfffc4 	movi	r2,-1
   14644:	00000b06 	br	14674 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14648:	d0a00a17 	ldw	r2,-32728(gp)
   1464c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   14650:	d0e00a17 	ldw	r3,-32728(gp)
   14654:	e0bfff17 	ldw	r2,-4(fp)
   14658:	1885883a 	add	r2,r3,r2
   1465c:	d0a00a15 	stw	r2,-32728(gp)
   14660:	e0bffa17 	ldw	r2,-24(fp)
   14664:	e0bffe15 	stw	r2,-8(fp)
   14668:	e0bffe17 	ldw	r2,-8(fp)
   1466c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14670:	e0bffb17 	ldw	r2,-20(fp)
} 
   14674:	e037883a 	mov	sp,fp
   14678:	df000017 	ldw	fp,0(sp)
   1467c:	dec00104 	addi	sp,sp,4
   14680:	f800283a 	ret

00014684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14684:	defffe04 	addi	sp,sp,-8
   14688:	dfc00115 	stw	ra,4(sp)
   1468c:	df000015 	stw	fp,0(sp)
   14690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14694:	008000b4 	movhi	r2,2
   14698:	10a38604 	addi	r2,r2,-29160
   1469c:	10800017 	ldw	r2,0(r2)
   146a0:	10000526 	beq	r2,zero,146b8 <alt_get_errno+0x34>
   146a4:	008000b4 	movhi	r2,2
   146a8:	10a38604 	addi	r2,r2,-29160
   146ac:	10800017 	ldw	r2,0(r2)
   146b0:	103ee83a 	callr	r2
   146b4:	00000206 	br	146c0 <alt_get_errno+0x3c>
   146b8:	008000b4 	movhi	r2,2
   146bc:	10ac4804 	addi	r2,r2,-20192
}
   146c0:	e037883a 	mov	sp,fp
   146c4:	dfc00117 	ldw	ra,4(sp)
   146c8:	df000017 	ldw	fp,0(sp)
   146cc:	dec00204 	addi	sp,sp,8
   146d0:	f800283a 	ret

000146d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   146d4:	defff904 	addi	sp,sp,-28
   146d8:	dfc00615 	stw	ra,24(sp)
   146dc:	df000515 	stw	fp,20(sp)
   146e0:	df000504 	addi	fp,sp,20
   146e4:	e13ffd15 	stw	r4,-12(fp)
   146e8:	e17ffe15 	stw	r5,-8(fp)
   146ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   146f0:	e0bffd17 	ldw	r2,-12(fp)
   146f4:	10000716 	blt	r2,zero,14714 <write+0x40>
   146f8:	e13ffd17 	ldw	r4,-12(fp)
   146fc:	01400304 	movi	r5,12
   14700:	00112c80 	call	112c8 <__mulsi3>
   14704:	00c00074 	movhi	r3,1
   14708:	18df0504 	addi	r3,r3,31764
   1470c:	10c5883a 	add	r2,r2,r3
   14710:	00000106 	br	14718 <write+0x44>
   14714:	0005883a 	mov	r2,zero
   14718:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1471c:	e0bffb17 	ldw	r2,-20(fp)
   14720:	10001f26 	beq	r2,zero,147a0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14724:	e0bffb17 	ldw	r2,-20(fp)
   14728:	10800217 	ldw	r2,8(r2)
   1472c:	108000cc 	andi	r2,r2,3
   14730:	10001726 	beq	r2,zero,14790 <write+0xbc>
   14734:	e0bffb17 	ldw	r2,-20(fp)
   14738:	10800017 	ldw	r2,0(r2)
   1473c:	10800617 	ldw	r2,24(r2)
   14740:	10001326 	beq	r2,zero,14790 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14744:	e0bffb17 	ldw	r2,-20(fp)
   14748:	10800017 	ldw	r2,0(r2)
   1474c:	10c00617 	ldw	r3,24(r2)
   14750:	e0bfff17 	ldw	r2,-4(fp)
   14754:	e13ffb17 	ldw	r4,-20(fp)
   14758:	e17ffe17 	ldw	r5,-8(fp)
   1475c:	100d883a 	mov	r6,r2
   14760:	183ee83a 	callr	r3
   14764:	e0bffc15 	stw	r2,-16(fp)
   14768:	e0bffc17 	ldw	r2,-16(fp)
   1476c:	1000060e 	bge	r2,zero,14788 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14770:	00146840 	call	14684 <alt_get_errno>
   14774:	e0fffc17 	ldw	r3,-16(fp)
   14778:	00c7c83a 	sub	r3,zero,r3
   1477c:	10c00015 	stw	r3,0(r2)
        return -1;
   14780:	00bfffc4 	movi	r2,-1
   14784:	00000a06 	br	147b0 <write+0xdc>
      }
      return rval;
   14788:	e0bffc17 	ldw	r2,-16(fp)
   1478c:	00000806 	br	147b0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14790:	00146840 	call	14684 <alt_get_errno>
   14794:	00c00344 	movi	r3,13
   14798:	10c00015 	stw	r3,0(r2)
   1479c:	00000306 	br	147ac <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   147a0:	00146840 	call	14684 <alt_get_errno>
   147a4:	00c01444 	movi	r3,81
   147a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   147ac:	00bfffc4 	movi	r2,-1
}
   147b0:	e037883a 	mov	sp,fp
   147b4:	dfc00117 	ldw	ra,4(sp)
   147b8:	df000017 	ldw	fp,0(sp)
   147bc:	dec00204 	addi	sp,sp,8
   147c0:	f800283a 	ret

000147c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   147c4:	defffd04 	addi	sp,sp,-12
   147c8:	dfc00215 	stw	ra,8(sp)
   147cc:	df000115 	stw	fp,4(sp)
   147d0:	df000104 	addi	fp,sp,4
   147d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   147d8:	e13fff17 	ldw	r4,-4(fp)
   147dc:	014000b4 	movhi	r5,2
   147e0:	29638304 	addi	r5,r5,-29172
   147e4:	0015a980 	call	15a98 <alt_dev_llist_insert>
}
   147e8:	e037883a 	mov	sp,fp
   147ec:	dfc00117 	ldw	ra,4(sp)
   147f0:	df000017 	ldw	fp,0(sp)
   147f4:	dec00204 	addi	sp,sp,8
   147f8:	f800283a 	ret

000147fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   147fc:	defffd04 	addi	sp,sp,-12
   14800:	dfc00215 	stw	ra,8(sp)
   14804:	df000115 	stw	fp,4(sp)
   14808:	df000104 	addi	fp,sp,4
   1480c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1E, cpu_1e);
   14810:	00164600 	call	16460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14814:	00800044 	movi	r2,1
   14818:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1481c:	e037883a 	mov	sp,fp
   14820:	dfc00117 	ldw	ra,4(sp)
   14824:	df000017 	ldw	fp,0(sp)
   14828:	dec00204 	addi	sp,sp,8
   1482c:	f800283a 	ret

00014830 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14830:	defffe04 	addi	sp,sp,-8
   14834:	dfc00115 	stw	ra,4(sp)
   14838:	df000015 	stw	fp,0(sp)
   1483c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1E, timer_1e);
   14840:	010000b4 	movhi	r4,2
   14844:	21041004 	addi	r4,r4,4160
   14848:	000b883a 	mov	r5,zero
   1484c:	01800044 	movi	r6,1
   14850:	01c0fa04 	movi	r7,1000
   14854:	00158640 	call	15864 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1D, fifo_1d);
   14858:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_1E, fifo_1e);
   1485c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_5, fifo_q_5);
   14860:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1E, jtag_uart_1e);
   14864:	01000074 	movhi	r4,1
   14868:	211f6f04 	addi	r4,r4,32188
   1486c:	000b883a 	mov	r5,zero
   14870:	01800404 	movi	r6,16
   14874:	0014ef00 	call	14ef0 <altera_avalon_jtag_uart_init>
   14878:	01000074 	movhi	r4,1
   1487c:	211f6504 	addi	r4,r4,32148
   14880:	00147c40 	call	147c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1E, sysid_1e);
   14884:	0001883a 	nop
}
   14888:	e037883a 	mov	sp,fp
   1488c:	dfc00117 	ldw	ra,4(sp)
   14890:	df000017 	ldw	fp,0(sp)
   14894:	dec00204 	addi	sp,sp,8
   14898:	f800283a 	ret

0001489c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1489c:	defffa04 	addi	sp,sp,-24
   148a0:	dfc00515 	stw	ra,20(sp)
   148a4:	df000415 	stw	fp,16(sp)
   148a8:	df000404 	addi	fp,sp,16
   148ac:	e13ffc15 	stw	r4,-16(fp)
   148b0:	e17ffd15 	stw	r5,-12(fp)
   148b4:	e1bffe15 	stw	r6,-8(fp)
   148b8:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   148bc:	e13ffc17 	ldw	r4,-16(fp)
   148c0:	01400fc4 	movi	r5,63
   148c4:	0014a680 	call	14a68 <altera_avalon_fifo_clear_event>
   148c8:	10000226 	beq	r2,zero,148d4 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   148cc:	00bfffc4 	movi	r2,-1
   148d0:	00001306 	br	14920 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   148d4:	e13ffc17 	ldw	r4,-16(fp)
   148d8:	e17ffd17 	ldw	r5,-12(fp)
   148dc:	0014ac40 	call	14ac4 <altera_avalon_fifo_write_ienable>
   148e0:	10000226 	beq	r2,zero,148ec <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   148e4:	00bfff84 	movi	r2,-2
   148e8:	00000d06 	br	14920 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   148ec:	e13ffc17 	ldw	r4,-16(fp)
   148f0:	e17fff17 	ldw	r5,-4(fp)
   148f4:	0014b1c0 	call	14b1c <altera_avalon_fifo_write_almostfull>
   148f8:	10000226 	beq	r2,zero,14904 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   148fc:	00bfff44 	movi	r2,-3
   14900:	00000706 	br	14920 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   14904:	e13ffc17 	ldw	r4,-16(fp)
   14908:	e17ffe17 	ldw	r5,-8(fp)
   1490c:	0014b740 	call	14b74 <altera_avalon_fifo_write_almostempty>
   14910:	10000226 	beq	r2,zero,1491c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14914:	00bfff44 	movi	r2,-3
   14918:	00000106 	br	14920 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   1491c:	0005883a 	mov	r2,zero
}
   14920:	e037883a 	mov	sp,fp
   14924:	dfc00117 	ldw	ra,4(sp)
   14928:	df000017 	ldw	fp,0(sp)
   1492c:	dec00204 	addi	sp,sp,8
   14930:	f800283a 	ret

00014934 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   14934:	defffd04 	addi	sp,sp,-12
   14938:	df000215 	stw	fp,8(sp)
   1493c:	df000204 	addi	fp,sp,8
   14940:	e13ffe15 	stw	r4,-8(fp)
   14944:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   14948:	e0bffe17 	ldw	r2,-8(fp)
   1494c:	10800104 	addi	r2,r2,4
   14950:	10800037 	ldwio	r2,0(r2)
   14954:	1007883a 	mov	r3,r2
   14958:	e0bfff17 	ldw	r2,-4(fp)
   1495c:	1884703a 	and	r2,r3,r2
}
   14960:	e037883a 	mov	sp,fp
   14964:	df000017 	ldw	fp,0(sp)
   14968:	dec00104 	addi	sp,sp,4
   1496c:	f800283a 	ret

00014970 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   14970:	defffd04 	addi	sp,sp,-12
   14974:	df000215 	stw	fp,8(sp)
   14978:	df000204 	addi	fp,sp,8
   1497c:	e13ffe15 	stw	r4,-8(fp)
   14980:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   14984:	e0bffe17 	ldw	r2,-8(fp)
   14988:	10800304 	addi	r2,r2,12
   1498c:	10800037 	ldwio	r2,0(r2)
   14990:	1007883a 	mov	r3,r2
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	1884703a 	and	r2,r3,r2
}
   1499c:	e037883a 	mov	sp,fp
   149a0:	df000017 	ldw	fp,0(sp)
   149a4:	dec00104 	addi	sp,sp,4
   149a8:	f800283a 	ret

000149ac <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   149ac:	defffe04 	addi	sp,sp,-8
   149b0:	df000115 	stw	fp,4(sp)
   149b4:	df000104 	addi	fp,sp,4
   149b8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   149bc:	e0bfff17 	ldw	r2,-4(fp)
   149c0:	10800404 	addi	r2,r2,16
   149c4:	10800037 	ldwio	r2,0(r2)
}
   149c8:	e037883a 	mov	sp,fp
   149cc:	df000017 	ldw	fp,0(sp)
   149d0:	dec00104 	addi	sp,sp,4
   149d4:	f800283a 	ret

000149d8 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   149d8:	defffe04 	addi	sp,sp,-8
   149dc:	df000115 	stw	fp,4(sp)
   149e0:	df000104 	addi	fp,sp,4
   149e4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   149e8:	e0bfff17 	ldw	r2,-4(fp)
   149ec:	10800504 	addi	r2,r2,20
   149f0:	10800037 	ldwio	r2,0(r2)
}
   149f4:	e037883a 	mov	sp,fp
   149f8:	df000017 	ldw	fp,0(sp)
   149fc:	dec00104 	addi	sp,sp,4
   14a00:	f800283a 	ret

00014a04 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   14a04:	defffd04 	addi	sp,sp,-12
   14a08:	df000215 	stw	fp,8(sp)
   14a0c:	df000204 	addi	fp,sp,8
   14a10:	e13ffe15 	stw	r4,-8(fp)
   14a14:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   14a18:	e0bffe17 	ldw	r2,-8(fp)
   14a1c:	10800204 	addi	r2,r2,8
   14a20:	10800037 	ldwio	r2,0(r2)
   14a24:	1007883a 	mov	r3,r2
   14a28:	e0bfff17 	ldw	r2,-4(fp)
   14a2c:	1884703a 	and	r2,r3,r2
}
   14a30:	e037883a 	mov	sp,fp
   14a34:	df000017 	ldw	fp,0(sp)
   14a38:	dec00104 	addi	sp,sp,4
   14a3c:	f800283a 	ret

00014a40 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   14a40:	defffe04 	addi	sp,sp,-8
   14a44:	df000115 	stw	fp,4(sp)
   14a48:	df000104 	addi	fp,sp,4
   14a4c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   14a50:	e0bfff17 	ldw	r2,-4(fp)
   14a54:	10800037 	ldwio	r2,0(r2)
}
   14a58:	e037883a 	mov	sp,fp
   14a5c:	df000017 	ldw	fp,0(sp)
   14a60:	dec00104 	addi	sp,sp,4
   14a64:	f800283a 	ret

00014a68 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14a68:	defffd04 	addi	sp,sp,-12
   14a6c:	df000215 	stw	fp,8(sp)
   14a70:	df000204 	addi	fp,sp,8
   14a74:	e13ffe15 	stw	r4,-8(fp)
   14a78:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   14a7c:	e0bffe17 	ldw	r2,-8(fp)
   14a80:	10800204 	addi	r2,r2,8
   14a84:	e0ffff17 	ldw	r3,-4(fp)
   14a88:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   14a8c:	e0bffe17 	ldw	r2,-8(fp)
   14a90:	10800204 	addi	r2,r2,8
   14a94:	10800037 	ldwio	r2,0(r2)
   14a98:	1007883a 	mov	r3,r2
   14a9c:	e0bfff17 	ldw	r2,-4(fp)
   14aa0:	1884703a 	and	r2,r3,r2
   14aa4:	1000021e 	bne	r2,zero,14ab0 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   14aa8:	0005883a 	mov	r2,zero
   14aac:	00000106 	br	14ab4 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   14ab0:	00bfffc4 	movi	r2,-1
}
   14ab4:	e037883a 	mov	sp,fp
   14ab8:	df000017 	ldw	fp,0(sp)
   14abc:	dec00104 	addi	sp,sp,4
   14ac0:	f800283a 	ret

00014ac4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   14ac4:	defffd04 	addi	sp,sp,-12
   14ac8:	df000215 	stw	fp,8(sp)
   14acc:	df000204 	addi	fp,sp,8
   14ad0:	e13ffe15 	stw	r4,-8(fp)
   14ad4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   14ad8:	e0bffe17 	ldw	r2,-8(fp)
   14adc:	10800304 	addi	r2,r2,12
   14ae0:	e0ffff17 	ldw	r3,-4(fp)
   14ae4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   14ae8:	e0bffe17 	ldw	r2,-8(fp)
   14aec:	10800304 	addi	r2,r2,12
   14af0:	10800037 	ldwio	r2,0(r2)
   14af4:	1007883a 	mov	r3,r2
   14af8:	e0bfff17 	ldw	r2,-4(fp)
   14afc:	1880021e 	bne	r3,r2,14b08 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14b00:	0005883a 	mov	r2,zero
   14b04:	00000106 	br	14b0c <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14b08:	00bfff84 	movi	r2,-2
}
   14b0c:	e037883a 	mov	sp,fp
   14b10:	df000017 	ldw	fp,0(sp)
   14b14:	dec00104 	addi	sp,sp,4
   14b18:	f800283a 	ret

00014b1c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   14b1c:	defffd04 	addi	sp,sp,-12
   14b20:	df000215 	stw	fp,8(sp)
   14b24:	df000204 	addi	fp,sp,8
   14b28:	e13ffe15 	stw	r4,-8(fp)
   14b2c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   14b30:	e0bffe17 	ldw	r2,-8(fp)
   14b34:	10800404 	addi	r2,r2,16
   14b38:	e0ffff17 	ldw	r3,-4(fp)
   14b3c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   14b40:	e0bffe17 	ldw	r2,-8(fp)
   14b44:	10800404 	addi	r2,r2,16
   14b48:	10800037 	ldwio	r2,0(r2)
   14b4c:	1007883a 	mov	r3,r2
   14b50:	e0bfff17 	ldw	r2,-4(fp)
   14b54:	1880021e 	bne	r3,r2,14b60 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14b58:	0005883a 	mov	r2,zero
   14b5c:	00000106 	br	14b64 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14b60:	00bfff44 	movi	r2,-3
}
   14b64:	e037883a 	mov	sp,fp
   14b68:	df000017 	ldw	fp,0(sp)
   14b6c:	dec00104 	addi	sp,sp,4
   14b70:	f800283a 	ret

00014b74 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14b74:	defffd04 	addi	sp,sp,-12
   14b78:	df000215 	stw	fp,8(sp)
   14b7c:	df000204 	addi	fp,sp,8
   14b80:	e13ffe15 	stw	r4,-8(fp)
   14b84:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14b88:	e0bffe17 	ldw	r2,-8(fp)
   14b8c:	10800504 	addi	r2,r2,20
   14b90:	e0ffff17 	ldw	r3,-4(fp)
   14b94:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	10800504 	addi	r2,r2,20
   14ba0:	10800037 	ldwio	r2,0(r2)
   14ba4:	1007883a 	mov	r3,r2
   14ba8:	e0bfff17 	ldw	r2,-4(fp)
   14bac:	1880021e 	bne	r3,r2,14bb8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14bb0:	0005883a 	mov	r2,zero
   14bb4:	00000106 	br	14bbc <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14bb8:	00bfff44 	movi	r2,-3
}
   14bbc:	e037883a 	mov	sp,fp
   14bc0:	df000017 	ldw	fp,0(sp)
   14bc4:	dec00104 	addi	sp,sp,4
   14bc8:	f800283a 	ret

00014bcc <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   14bcc:	defffb04 	addi	sp,sp,-20
   14bd0:	dfc00415 	stw	ra,16(sp)
   14bd4:	df000315 	stw	fp,12(sp)
   14bd8:	df000304 	addi	fp,sp,12
   14bdc:	e13ffd15 	stw	r4,-12(fp)
   14be0:	e17ffe15 	stw	r5,-8(fp)
   14be4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14be8:	e13ffe17 	ldw	r4,-8(fp)
   14bec:	01400044 	movi	r5,1
   14bf0:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   14bf4:	1000051e 	bne	r2,zero,14c0c <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   14bf8:	e0bffd17 	ldw	r2,-12(fp)
   14bfc:	e0ffff17 	ldw	r3,-4(fp)
   14c00:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   14c04:	0005883a 	mov	r2,zero
   14c08:	00000106 	br	14c10 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   14c0c:	00bfff04 	movi	r2,-4
    }
}
   14c10:	e037883a 	mov	sp,fp
   14c14:	dfc00117 	ldw	ra,4(sp)
   14c18:	df000017 	ldw	fp,0(sp)
   14c1c:	dec00204 	addi	sp,sp,8
   14c20:	f800283a 	ret

00014c24 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   14c24:	defffa04 	addi	sp,sp,-24
   14c28:	dfc00515 	stw	ra,20(sp)
   14c2c:	df000415 	stw	fp,16(sp)
   14c30:	df000404 	addi	fp,sp,16
   14c34:	e13ffd15 	stw	r4,-12(fp)
   14c38:	e17ffe15 	stw	r5,-8(fp)
   14c3c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   14c40:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14c44:	e0bfff17 	ldw	r2,-4(fp)
   14c48:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14c4c:	e13ffe17 	ldw	r4,-8(fp)
   14c50:	01400084 	movi	r5,2
   14c54:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   14c58:	1000071e 	bne	r2,zero,14c78 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   14c5c:	e13ffe17 	ldw	r4,-8(fp)
   14c60:	0014a400 	call	14a40 <altera_avalon_fifo_read_level>
   14c64:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14c68:	e0bffd17 	ldw	r2,-12(fp)
   14c6c:	10c00037 	ldwio	r3,0(r2)
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14c78:	e0bffc17 	ldw	r2,-16(fp)
}
   14c7c:	e037883a 	mov	sp,fp
   14c80:	dfc00117 	ldw	ra,4(sp)
   14c84:	df000017 	ldw	fp,0(sp)
   14c88:	dec00204 	addi	sp,sp,8
   14c8c:	f800283a 	ret

00014c90 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   14c90:	defffc04 	addi	sp,sp,-16
   14c94:	dfc00315 	stw	ra,12(sp)
   14c98:	df000215 	stw	fp,8(sp)
   14c9c:	df000204 	addi	fp,sp,8
   14ca0:	e13ffe15 	stw	r4,-8(fp)
   14ca4:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14ca8:	e13fff17 	ldw	r4,-4(fp)
   14cac:	01400084 	movi	r5,2
   14cb0:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   14cb4:	1000031e 	bne	r2,zero,14cc4 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14cb8:	e0bffe17 	ldw	r2,-8(fp)
   14cbc:	10800037 	ldwio	r2,0(r2)
   14cc0:	00000106 	br	14cc8 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   14cc4:	0005883a 	mov	r2,zero
}
   14cc8:	e037883a 	mov	sp,fp
   14ccc:	dfc00117 	ldw	ra,4(sp)
   14cd0:	df000017 	ldw	fp,0(sp)
   14cd4:	dec00204 	addi	sp,sp,8
   14cd8:	f800283a 	ret

00014cdc <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   14cdc:	defffb04 	addi	sp,sp,-20
   14ce0:	dfc00415 	stw	ra,16(sp)
   14ce4:	df000315 	stw	fp,12(sp)
   14ce8:	df000304 	addi	fp,sp,12
   14cec:	e13ffd15 	stw	r4,-12(fp)
   14cf0:	e17ffe15 	stw	r5,-8(fp)
   14cf4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14cf8:	e13ffe17 	ldw	r4,-8(fp)
   14cfc:	01400044 	movi	r5,1
   14d00:	00149340 	call	14934 <altera_avalon_fifo_read_status>
   14d04:	1000061e 	bne	r2,zero,14d20 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   14d08:	e0bffd17 	ldw	r2,-12(fp)
   14d0c:	10800104 	addi	r2,r2,4
   14d10:	e0ffff17 	ldw	r3,-4(fp)
   14d14:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   14d18:	0005883a 	mov	r2,zero
   14d1c:	00000106 	br	14d24 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   14d20:	00bfff04 	movi	r2,-4
    }
}
   14d24:	e037883a 	mov	sp,fp
   14d28:	dfc00117 	ldw	ra,4(sp)
   14d2c:	df000017 	ldw	fp,0(sp)
   14d30:	dec00204 	addi	sp,sp,8
   14d34:	f800283a 	ret

00014d38 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   14d38:	defffe04 	addi	sp,sp,-8
   14d3c:	df000115 	stw	fp,4(sp)
   14d40:	df000104 	addi	fp,sp,4
   14d44:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   14d48:	e0bfff17 	ldw	r2,-4(fp)
   14d4c:	10800104 	addi	r2,r2,4
   14d50:	10800037 	ldwio	r2,0(r2)
}
   14d54:	e037883a 	mov	sp,fp
   14d58:	df000017 	ldw	fp,0(sp)
   14d5c:	dec00104 	addi	sp,sp,4
   14d60:	f800283a 	ret

00014d64 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   14d64:	defffe04 	addi	sp,sp,-8
   14d68:	df000115 	stw	fp,4(sp)
   14d6c:	df000104 	addi	fp,sp,4
   14d70:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   14d74:	e0bfff17 	ldw	r2,-4(fp)
   14d78:	10800037 	ldwio	r2,0(r2)
}
   14d7c:	e037883a 	mov	sp,fp
   14d80:	df000017 	ldw	fp,0(sp)
   14d84:	dec00104 	addi	sp,sp,4
   14d88:	f800283a 	ret

00014d8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14d8c:	defffa04 	addi	sp,sp,-24
   14d90:	dfc00515 	stw	ra,20(sp)
   14d94:	df000415 	stw	fp,16(sp)
   14d98:	df000404 	addi	fp,sp,16
   14d9c:	e13ffd15 	stw	r4,-12(fp)
   14da0:	e17ffe15 	stw	r5,-8(fp)
   14da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14da8:	e0bffd17 	ldw	r2,-12(fp)
   14dac:	10800017 	ldw	r2,0(r2)
   14db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14db4:	e0bffc17 	ldw	r2,-16(fp)
   14db8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14dbc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14dc0:	10800217 	ldw	r2,8(r2)
   14dc4:	1809883a 	mov	r4,r3
   14dc8:	e17ffe17 	ldw	r5,-8(fp)
   14dcc:	e1bfff17 	ldw	r6,-4(fp)
   14dd0:	100f883a 	mov	r7,r2
   14dd4:	00153b40 	call	153b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14dd8:	e037883a 	mov	sp,fp
   14ddc:	dfc00117 	ldw	ra,4(sp)
   14de0:	df000017 	ldw	fp,0(sp)
   14de4:	dec00204 	addi	sp,sp,8
   14de8:	f800283a 	ret

00014dec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14dec:	defffa04 	addi	sp,sp,-24
   14df0:	dfc00515 	stw	ra,20(sp)
   14df4:	df000415 	stw	fp,16(sp)
   14df8:	df000404 	addi	fp,sp,16
   14dfc:	e13ffd15 	stw	r4,-12(fp)
   14e00:	e17ffe15 	stw	r5,-8(fp)
   14e04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14e08:	e0bffd17 	ldw	r2,-12(fp)
   14e0c:	10800017 	ldw	r2,0(r2)
   14e10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14e14:	e0bffc17 	ldw	r2,-16(fp)
   14e18:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14e20:	10800217 	ldw	r2,8(r2)
   14e24:	1809883a 	mov	r4,r3
   14e28:	e17ffe17 	ldw	r5,-8(fp)
   14e2c:	e1bfff17 	ldw	r6,-4(fp)
   14e30:	100f883a 	mov	r7,r2
   14e34:	00155cc0 	call	155cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14e38:	e037883a 	mov	sp,fp
   14e3c:	dfc00117 	ldw	ra,4(sp)
   14e40:	df000017 	ldw	fp,0(sp)
   14e44:	dec00204 	addi	sp,sp,8
   14e48:	f800283a 	ret

00014e4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14e4c:	defffc04 	addi	sp,sp,-16
   14e50:	dfc00315 	stw	ra,12(sp)
   14e54:	df000215 	stw	fp,8(sp)
   14e58:	df000204 	addi	fp,sp,8
   14e5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14e60:	e0bfff17 	ldw	r2,-4(fp)
   14e64:	10800017 	ldw	r2,0(r2)
   14e68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14e6c:	e0bffe17 	ldw	r2,-8(fp)
   14e70:	10c00a04 	addi	r3,r2,40
   14e74:	e0bfff17 	ldw	r2,-4(fp)
   14e78:	10800217 	ldw	r2,8(r2)
   14e7c:	1809883a 	mov	r4,r3
   14e80:	100b883a 	mov	r5,r2
   14e84:	00152580 	call	15258 <altera_avalon_jtag_uart_close>
}
   14e88:	e037883a 	mov	sp,fp
   14e8c:	dfc00117 	ldw	ra,4(sp)
   14e90:	df000017 	ldw	fp,0(sp)
   14e94:	dec00204 	addi	sp,sp,8
   14e98:	f800283a 	ret

00014e9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14e9c:	defffa04 	addi	sp,sp,-24
   14ea0:	dfc00515 	stw	ra,20(sp)
   14ea4:	df000415 	stw	fp,16(sp)
   14ea8:	df000404 	addi	fp,sp,16
   14eac:	e13ffd15 	stw	r4,-12(fp)
   14eb0:	e17ffe15 	stw	r5,-8(fp)
   14eb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14eb8:	e0bffd17 	ldw	r2,-12(fp)
   14ebc:	10800017 	ldw	r2,0(r2)
   14ec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14ec4:	e0bffc17 	ldw	r2,-16(fp)
   14ec8:	10800a04 	addi	r2,r2,40
   14ecc:	1009883a 	mov	r4,r2
   14ed0:	e17ffe17 	ldw	r5,-8(fp)
   14ed4:	e1bfff17 	ldw	r6,-4(fp)
   14ed8:	00152c00 	call	152c0 <altera_avalon_jtag_uart_ioctl>
}
   14edc:	e037883a 	mov	sp,fp
   14ee0:	dfc00117 	ldw	ra,4(sp)
   14ee4:	df000017 	ldw	fp,0(sp)
   14ee8:	dec00204 	addi	sp,sp,8
   14eec:	f800283a 	ret

00014ef0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14ef0:	defffa04 	addi	sp,sp,-24
   14ef4:	dfc00515 	stw	ra,20(sp)
   14ef8:	df000415 	stw	fp,16(sp)
   14efc:	df000404 	addi	fp,sp,16
   14f00:	e13ffd15 	stw	r4,-12(fp)
   14f04:	e17ffe15 	stw	r5,-8(fp)
   14f08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14f0c:	e0bffd17 	ldw	r2,-12(fp)
   14f10:	00c00044 	movi	r3,1
   14f14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14f18:	e0bffd17 	ldw	r2,-12(fp)
   14f1c:	10800017 	ldw	r2,0(r2)
   14f20:	10800104 	addi	r2,r2,4
   14f24:	e0fffd17 	ldw	r3,-12(fp)
   14f28:	18c00817 	ldw	r3,32(r3)
   14f2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14f30:	e0fffe17 	ldw	r3,-8(fp)
   14f34:	e0bfff17 	ldw	r2,-4(fp)
   14f38:	d8000015 	stw	zero,0(sp)
   14f3c:	1809883a 	mov	r4,r3
   14f40:	100b883a 	mov	r5,r2
   14f44:	01800074 	movhi	r6,1
   14f48:	3193ec04 	addi	r6,r6,20400
   14f4c:	e1fffd17 	ldw	r7,-12(fp)
   14f50:	0015c0c0 	call	15c0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14f54:	e0bffd17 	ldw	r2,-12(fp)
   14f58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14f5c:	e0bffd17 	ldw	r2,-12(fp)
   14f60:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14f64:	008000b4 	movhi	r2,2
   14f68:	10ac4d04 	addi	r2,r2,-20172
   14f6c:	10800017 	ldw	r2,0(r2)
   14f70:	1809883a 	mov	r4,r3
   14f74:	100b883a 	mov	r5,r2
   14f78:	01800074 	movhi	r6,1
   14f7c:	31946d04 	addi	r6,r6,20916
   14f80:	e1fffd17 	ldw	r7,-12(fp)
   14f84:	00158ec0 	call	158ec <alt_alarm_start>
   14f88:	1000040e 	bge	r2,zero,14f9c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14f8c:	e0bffd17 	ldw	r2,-12(fp)
   14f90:	00e00034 	movhi	r3,32768
   14f94:	18ffffc4 	addi	r3,r3,-1
   14f98:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14f9c:	e037883a 	mov	sp,fp
   14fa0:	dfc00117 	ldw	ra,4(sp)
   14fa4:	df000017 	ldw	fp,0(sp)
   14fa8:	dec00204 	addi	sp,sp,8
   14fac:	f800283a 	ret

00014fb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14fb0:	defff804 	addi	sp,sp,-32
   14fb4:	df000715 	stw	fp,28(sp)
   14fb8:	df000704 	addi	fp,sp,28
   14fbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14fc0:	e0bfff17 	ldw	r2,-4(fp)
   14fc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14fc8:	e0bffb17 	ldw	r2,-20(fp)
   14fcc:	10800017 	ldw	r2,0(r2)
   14fd0:	e0bffc15 	stw	r2,-16(fp)
   14fd4:	00000106 	br	14fdc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   14fd8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14fdc:	e0bffc17 	ldw	r2,-16(fp)
   14fe0:	10800104 	addi	r2,r2,4
   14fe4:	10800037 	ldwio	r2,0(r2)
   14fe8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	1080c00c 	andi	r2,r2,768
   14ff4:	10006a26 	beq	r2,zero,151a0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	1080400c 	andi	r2,r2,256
   15000:	10003326 	beq	r2,zero,150d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15004:	00800074 	movhi	r2,1
   15008:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1500c:	e0bffb17 	ldw	r2,-20(fp)
   15010:	10800a17 	ldw	r2,40(r2)
   15014:	10800044 	addi	r2,r2,1
   15018:	1081ffcc 	andi	r2,r2,2047
   1501c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   15020:	e0bffb17 	ldw	r2,-20(fp)
   15024:	10c00b17 	ldw	r3,44(r2)
   15028:	e0bffe17 	ldw	r2,-8(fp)
   1502c:	18801426 	beq	r3,r2,15080 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15030:	e0bffc17 	ldw	r2,-16(fp)
   15034:	10800037 	ldwio	r2,0(r2)
   15038:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1503c:	e0bff917 	ldw	r2,-28(fp)
   15040:	10a0000c 	andi	r2,r2,32768
   15044:	10001026 	beq	r2,zero,15088 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15048:	e0bffb17 	ldw	r2,-20(fp)
   1504c:	10800a17 	ldw	r2,40(r2)
   15050:	e0fff917 	ldw	r3,-28(fp)
   15054:	e13ffb17 	ldw	r4,-20(fp)
   15058:	2085883a 	add	r2,r4,r2
   1505c:	10800e04 	addi	r2,r2,56
   15060:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15064:	e0bffb17 	ldw	r2,-20(fp)
   15068:	10800a17 	ldw	r2,40(r2)
   1506c:	10800044 	addi	r2,r2,1
   15070:	10c1ffcc 	andi	r3,r2,2047
   15074:	e0bffb17 	ldw	r2,-20(fp)
   15078:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1507c:	003fe306 	br	1500c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15080:	0001883a 	nop
   15084:	00000106 	br	1508c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15088:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1508c:	e0bff917 	ldw	r2,-28(fp)
   15090:	10bfffec 	andhi	r2,r2,65535
   15094:	10000e26 	beq	r2,zero,150d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15098:	e0bffb17 	ldw	r2,-20(fp)
   1509c:	10c00817 	ldw	r3,32(r2)
   150a0:	00bfff84 	movi	r2,-2
   150a4:	1886703a 	and	r3,r3,r2
   150a8:	e0bffb17 	ldw	r2,-20(fp)
   150ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   150b0:	e0bffc17 	ldw	r2,-16(fp)
   150b4:	10800104 	addi	r2,r2,4
   150b8:	e0fffb17 	ldw	r3,-20(fp)
   150bc:	18c00817 	ldw	r3,32(r3)
   150c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	10800104 	addi	r2,r2,4
   150cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   150d0:	e0bffd17 	ldw	r2,-12(fp)
   150d4:	1080800c 	andi	r2,r2,512
   150d8:	103fbf26 	beq	r2,zero,14fd8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   150dc:	e0bffd17 	ldw	r2,-12(fp)
   150e0:	1004d43a 	srli	r2,r2,16
   150e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   150e8:	00001406 	br	1513c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   150ec:	e0bffc17 	ldw	r2,-16(fp)
   150f0:	e0fffb17 	ldw	r3,-20(fp)
   150f4:	18c00d17 	ldw	r3,52(r3)
   150f8:	e13ffb17 	ldw	r4,-20(fp)
   150fc:	20c7883a 	add	r3,r4,r3
   15100:	18c20e04 	addi	r3,r3,2104
   15104:	18c00003 	ldbu	r3,0(r3)
   15108:	18c03fcc 	andi	r3,r3,255
   1510c:	18c0201c 	xori	r3,r3,128
   15110:	18ffe004 	addi	r3,r3,-128
   15114:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15118:	e0bffb17 	ldw	r2,-20(fp)
   1511c:	10800d17 	ldw	r2,52(r2)
   15120:	10800044 	addi	r2,r2,1
   15124:	10c1ffcc 	andi	r3,r2,2047
   15128:	e0bffb17 	ldw	r2,-20(fp)
   1512c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15130:	e0bffa17 	ldw	r2,-24(fp)
   15134:	10bfffc4 	addi	r2,r2,-1
   15138:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1513c:	e0bffa17 	ldw	r2,-24(fp)
   15140:	10000526 	beq	r2,zero,15158 <altera_avalon_jtag_uart_irq+0x1a8>
   15144:	e0bffb17 	ldw	r2,-20(fp)
   15148:	10c00d17 	ldw	r3,52(r2)
   1514c:	e0bffb17 	ldw	r2,-20(fp)
   15150:	10800c17 	ldw	r2,48(r2)
   15154:	18bfe51e 	bne	r3,r2,150ec <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   15158:	e0bffa17 	ldw	r2,-24(fp)
   1515c:	103f9e26 	beq	r2,zero,14fd8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15160:	e0bffb17 	ldw	r2,-20(fp)
   15164:	10c00817 	ldw	r3,32(r2)
   15168:	00bfff44 	movi	r2,-3
   1516c:	1886703a 	and	r3,r3,r2
   15170:	e0bffb17 	ldw	r2,-20(fp)
   15174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15178:	e0bffb17 	ldw	r2,-20(fp)
   1517c:	10800017 	ldw	r2,0(r2)
   15180:	10800104 	addi	r2,r2,4
   15184:	e0fffb17 	ldw	r3,-20(fp)
   15188:	18c00817 	ldw	r3,32(r3)
   1518c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15190:	e0bffc17 	ldw	r2,-16(fp)
   15194:	10800104 	addi	r2,r2,4
   15198:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1519c:	003f8e06 	br	14fd8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   151a0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   151a4:	e037883a 	mov	sp,fp
   151a8:	df000017 	ldw	fp,0(sp)
   151ac:	dec00104 	addi	sp,sp,4
   151b0:	f800283a 	ret

000151b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   151b4:	defffc04 	addi	sp,sp,-16
   151b8:	df000315 	stw	fp,12(sp)
   151bc:	df000304 	addi	fp,sp,12
   151c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   151c4:	e0bfff17 	ldw	r2,-4(fp)
   151c8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   151cc:	e0bffd17 	ldw	r2,-12(fp)
   151d0:	10800017 	ldw	r2,0(r2)
   151d4:	10800104 	addi	r2,r2,4
   151d8:	10800037 	ldwio	r2,0(r2)
   151dc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   151e0:	e0bffe17 	ldw	r2,-8(fp)
   151e4:	1081000c 	andi	r2,r2,1024
   151e8:	10000a26 	beq	r2,zero,15214 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   151ec:	e0bffd17 	ldw	r2,-12(fp)
   151f0:	10800017 	ldw	r2,0(r2)
   151f4:	10800104 	addi	r2,r2,4
   151f8:	e0fffd17 	ldw	r3,-12(fp)
   151fc:	18c00817 	ldw	r3,32(r3)
   15200:	18c10014 	ori	r3,r3,1024
   15204:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   15208:	e0bffd17 	ldw	r2,-12(fp)
   1520c:	10000915 	stw	zero,36(r2)
   15210:	00000a06 	br	1523c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15214:	e0bffd17 	ldw	r2,-12(fp)
   15218:	10800917 	ldw	r2,36(r2)
   1521c:	00e00034 	movhi	r3,32768
   15220:	18ffff04 	addi	r3,r3,-4
   15224:	18800536 	bltu	r3,r2,1523c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   15228:	e0bffd17 	ldw	r2,-12(fp)
   1522c:	10800917 	ldw	r2,36(r2)
   15230:	10c00044 	addi	r3,r2,1
   15234:	e0bffd17 	ldw	r2,-12(fp)
   15238:	10c00915 	stw	r3,36(r2)
   1523c:	008000b4 	movhi	r2,2
   15240:	10ac4d04 	addi	r2,r2,-20172
   15244:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15248:	e037883a 	mov	sp,fp
   1524c:	df000017 	ldw	fp,0(sp)
   15250:	dec00104 	addi	sp,sp,4
   15254:	f800283a 	ret

00015258 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15258:	defffd04 	addi	sp,sp,-12
   1525c:	df000215 	stw	fp,8(sp)
   15260:	df000204 	addi	fp,sp,8
   15264:	e13ffe15 	stw	r4,-8(fp)
   15268:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1526c:	00000506 	br	15284 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15270:	e0bfff17 	ldw	r2,-4(fp)
   15274:	1090000c 	andi	r2,r2,16384
   15278:	10000226 	beq	r2,zero,15284 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1527c:	00bffd44 	movi	r2,-11
   15280:	00000b06 	br	152b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15284:	e0bffe17 	ldw	r2,-8(fp)
   15288:	10c00d17 	ldw	r3,52(r2)
   1528c:	e0bffe17 	ldw	r2,-8(fp)
   15290:	10800c17 	ldw	r2,48(r2)
   15294:	18800526 	beq	r3,r2,152ac <altera_avalon_jtag_uart_close+0x54>
   15298:	e0bffe17 	ldw	r2,-8(fp)
   1529c:	10c00917 	ldw	r3,36(r2)
   152a0:	e0bffe17 	ldw	r2,-8(fp)
   152a4:	10800117 	ldw	r2,4(r2)
   152a8:	18bff136 	bltu	r3,r2,15270 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   152ac:	0005883a 	mov	r2,zero
}
   152b0:	e037883a 	mov	sp,fp
   152b4:	df000017 	ldw	fp,0(sp)
   152b8:	dec00104 	addi	sp,sp,4
   152bc:	f800283a 	ret

000152c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   152c0:	defffa04 	addi	sp,sp,-24
   152c4:	df000515 	stw	fp,20(sp)
   152c8:	df000504 	addi	fp,sp,20
   152cc:	e13ffd15 	stw	r4,-12(fp)
   152d0:	e17ffe15 	stw	r5,-8(fp)
   152d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   152d8:	00bff9c4 	movi	r2,-25
   152dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   152e0:	e0bffe17 	ldw	r2,-8(fp)
   152e4:	10da8060 	cmpeqi	r3,r2,27137
   152e8:	1800031e 	bne	r3,zero,152f8 <altera_avalon_jtag_uart_ioctl+0x38>
   152ec:	109a80a0 	cmpeqi	r2,r2,27138
   152f0:	1000181e 	bne	r2,zero,15354 <altera_avalon_jtag_uart_ioctl+0x94>
   152f4:	00002606 	br	15390 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   152f8:	e0bffd17 	ldw	r2,-12(fp)
   152fc:	10c00117 	ldw	r3,4(r2)
   15300:	00a00034 	movhi	r2,32768
   15304:	10bfffc4 	addi	r2,r2,-1
   15308:	18802226 	beq	r3,r2,15394 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1530c:	e0bfff17 	ldw	r2,-4(fp)
   15310:	10800017 	ldw	r2,0(r2)
   15314:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15318:	e0bffc17 	ldw	r2,-16(fp)
   1531c:	10800090 	cmplti	r2,r2,2
   15320:	1000061e 	bne	r2,zero,1533c <altera_avalon_jtag_uart_ioctl+0x7c>
   15324:	e0fffc17 	ldw	r3,-16(fp)
   15328:	00a00034 	movhi	r2,32768
   1532c:	10bfffc4 	addi	r2,r2,-1
   15330:	18800226 	beq	r3,r2,1533c <altera_avalon_jtag_uart_ioctl+0x7c>
   15334:	e0bffc17 	ldw	r2,-16(fp)
   15338:	00000206 	br	15344 <altera_avalon_jtag_uart_ioctl+0x84>
   1533c:	00a00034 	movhi	r2,32768
   15340:	10bfff84 	addi	r2,r2,-2
   15344:	e0fffd17 	ldw	r3,-12(fp)
   15348:	18800115 	stw	r2,4(r3)
      rc = 0;
   1534c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15350:	00001006 	br	15394 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15354:	e0bffd17 	ldw	r2,-12(fp)
   15358:	10c00117 	ldw	r3,4(r2)
   1535c:	00a00034 	movhi	r2,32768
   15360:	10bfffc4 	addi	r2,r2,-1
   15364:	18800d26 	beq	r3,r2,1539c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15368:	e0bffd17 	ldw	r2,-12(fp)
   1536c:	10c00917 	ldw	r3,36(r2)
   15370:	e0bffd17 	ldw	r2,-12(fp)
   15374:	10800117 	ldw	r2,4(r2)
   15378:	1885803a 	cmpltu	r2,r3,r2
   1537c:	10c03fcc 	andi	r3,r2,255
   15380:	e0bfff17 	ldw	r2,-4(fp)
   15384:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15388:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1538c:	00000306 	br	1539c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   15390:	00000306 	br	153a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15394:	0001883a 	nop
   15398:	00000106 	br	153a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1539c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   153a0:	e0bffb17 	ldw	r2,-20(fp)
}
   153a4:	e037883a 	mov	sp,fp
   153a8:	df000017 	ldw	fp,0(sp)
   153ac:	dec00104 	addi	sp,sp,4
   153b0:	f800283a 	ret

000153b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   153b4:	defff304 	addi	sp,sp,-52
   153b8:	dfc00c15 	stw	ra,48(sp)
   153bc:	df000b15 	stw	fp,44(sp)
   153c0:	df000b04 	addi	fp,sp,44
   153c4:	e13ffc15 	stw	r4,-16(fp)
   153c8:	e17ffd15 	stw	r5,-12(fp)
   153cc:	e1bffe15 	stw	r6,-8(fp)
   153d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   153dc:	00004706 	br	154fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   153e0:	e0bffc17 	ldw	r2,-16(fp)
   153e4:	10800a17 	ldw	r2,40(r2)
   153e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   153ec:	e0bffc17 	ldw	r2,-16(fp)
   153f0:	10800b17 	ldw	r2,44(r2)
   153f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   153f8:	e0fff717 	ldw	r3,-36(fp)
   153fc:	e0bff817 	ldw	r2,-32(fp)
   15400:	18800536 	bltu	r3,r2,15418 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15404:	e0fff717 	ldw	r3,-36(fp)
   15408:	e0bff817 	ldw	r2,-32(fp)
   1540c:	1885c83a 	sub	r2,r3,r2
   15410:	e0bff615 	stw	r2,-40(fp)
   15414:	00000406 	br	15428 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15418:	00c20004 	movi	r3,2048
   1541c:	e0bff817 	ldw	r2,-32(fp)
   15420:	1885c83a 	sub	r2,r3,r2
   15424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15428:	e0bff617 	ldw	r2,-40(fp)
   1542c:	10001e26 	beq	r2,zero,154a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15430:	e0fffe17 	ldw	r3,-8(fp)
   15434:	e0bff617 	ldw	r2,-40(fp)
   15438:	1880022e 	bgeu	r3,r2,15444 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1543c:	e0bffe17 	ldw	r2,-8(fp)
   15440:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15444:	e0bff817 	ldw	r2,-32(fp)
   15448:	10800e04 	addi	r2,r2,56
   1544c:	e0fffc17 	ldw	r3,-16(fp)
   15450:	1885883a 	add	r2,r3,r2
   15454:	e13ff517 	ldw	r4,-44(fp)
   15458:	100b883a 	mov	r5,r2
   1545c:	e1bff617 	ldw	r6,-40(fp)
   15460:	00121740 	call	12174 <memcpy>
      ptr   += n;
   15464:	e0fff517 	ldw	r3,-44(fp)
   15468:	e0bff617 	ldw	r2,-40(fp)
   1546c:	1885883a 	add	r2,r3,r2
   15470:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15474:	e0fffe17 	ldw	r3,-8(fp)
   15478:	e0bff617 	ldw	r2,-40(fp)
   1547c:	1885c83a 	sub	r2,r3,r2
   15480:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15484:	e0fff817 	ldw	r3,-32(fp)
   15488:	e0bff617 	ldw	r2,-40(fp)
   1548c:	1885883a 	add	r2,r3,r2
   15490:	10c1ffcc 	andi	r3,r2,2047
   15494:	e0bffc17 	ldw	r2,-16(fp)
   15498:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1549c:	e0bffe17 	ldw	r2,-8(fp)
   154a0:	00bfcf16 	blt	zero,r2,153e0 <altera_avalon_jtag_uart_read+0x2c>
   154a4:	00000106 	br	154ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   154a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   154ac:	e0fff517 	ldw	r3,-44(fp)
   154b0:	e0bffd17 	ldw	r2,-12(fp)
   154b4:	1880141e 	bne	r3,r2,15508 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   154b8:	e0bfff17 	ldw	r2,-4(fp)
   154bc:	1090000c 	andi	r2,r2,16384
   154c0:	1000131e 	bne	r2,zero,15510 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   154c4:	0001883a 	nop
   154c8:	e0bffc17 	ldw	r2,-16(fp)
   154cc:	10c00a17 	ldw	r3,40(r2)
   154d0:	e0bff717 	ldw	r2,-36(fp)
   154d4:	1880051e 	bne	r3,r2,154ec <altera_avalon_jtag_uart_read+0x138>
   154d8:	e0bffc17 	ldw	r2,-16(fp)
   154dc:	10c00917 	ldw	r3,36(r2)
   154e0:	e0bffc17 	ldw	r2,-16(fp)
   154e4:	10800117 	ldw	r2,4(r2)
   154e8:	18bff736 	bltu	r3,r2,154c8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   154ec:	e0bffc17 	ldw	r2,-16(fp)
   154f0:	10c00a17 	ldw	r3,40(r2)
   154f4:	e0bff717 	ldw	r2,-36(fp)
   154f8:	18800726 	beq	r3,r2,15518 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   154fc:	e0bffe17 	ldw	r2,-8(fp)
   15500:	00bfb716 	blt	zero,r2,153e0 <altera_avalon_jtag_uart_read+0x2c>
   15504:	00000506 	br	1551c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15508:	0001883a 	nop
   1550c:	00000306 	br	1551c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15510:	0001883a 	nop
   15514:	00000106 	br	1551c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15518:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1551c:	e0fff517 	ldw	r3,-44(fp)
   15520:	e0bffd17 	ldw	r2,-12(fp)
   15524:	18801726 	beq	r3,r2,15584 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15528:	0005303a 	rdctl	r2,status
   1552c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15530:	e0fffa17 	ldw	r3,-24(fp)
   15534:	00bfff84 	movi	r2,-2
   15538:	1884703a 	and	r2,r3,r2
   1553c:	1001703a 	wrctl	status,r2
  
  return context;
   15540:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15544:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15548:	e0bffc17 	ldw	r2,-16(fp)
   1554c:	10800817 	ldw	r2,32(r2)
   15550:	10c00054 	ori	r3,r2,1
   15554:	e0bffc17 	ldw	r2,-16(fp)
   15558:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1555c:	e0bffc17 	ldw	r2,-16(fp)
   15560:	10800017 	ldw	r2,0(r2)
   15564:	10800104 	addi	r2,r2,4
   15568:	e0fffc17 	ldw	r3,-16(fp)
   1556c:	18c00817 	ldw	r3,32(r3)
   15570:	10c00035 	stwio	r3,0(r2)
   15574:	e0bff917 	ldw	r2,-28(fp)
   15578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1557c:	e0bffb17 	ldw	r2,-20(fp)
   15580:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15584:	e0fff517 	ldw	r3,-44(fp)
   15588:	e0bffd17 	ldw	r2,-12(fp)
   1558c:	18800426 	beq	r3,r2,155a0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   15590:	e0fff517 	ldw	r3,-44(fp)
   15594:	e0bffd17 	ldw	r2,-12(fp)
   15598:	1885c83a 	sub	r2,r3,r2
   1559c:	00000606 	br	155b8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   155a0:	e0bfff17 	ldw	r2,-4(fp)
   155a4:	1090000c 	andi	r2,r2,16384
   155a8:	10000226 	beq	r2,zero,155b4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   155ac:	00bffd44 	movi	r2,-11
   155b0:	00000106 	br	155b8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   155b4:	00bffec4 	movi	r2,-5
}
   155b8:	e037883a 	mov	sp,fp
   155bc:	dfc00117 	ldw	ra,4(sp)
   155c0:	df000017 	ldw	fp,0(sp)
   155c4:	dec00204 	addi	sp,sp,8
   155c8:	f800283a 	ret

000155cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   155cc:	defff304 	addi	sp,sp,-52
   155d0:	dfc00c15 	stw	ra,48(sp)
   155d4:	df000b15 	stw	fp,44(sp)
   155d8:	df000b04 	addi	fp,sp,44
   155dc:	e13ffc15 	stw	r4,-16(fp)
   155e0:	e17ffd15 	stw	r5,-12(fp)
   155e4:	e1bffe15 	stw	r6,-8(fp)
   155e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   155ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   155f0:	e0bffd17 	ldw	r2,-12(fp)
   155f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   155f8:	00003706 	br	156d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   155fc:	e0bffc17 	ldw	r2,-16(fp)
   15600:	10800c17 	ldw	r2,48(r2)
   15604:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   15608:	e0bffc17 	ldw	r2,-16(fp)
   1560c:	10800d17 	ldw	r2,52(r2)
   15610:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   15614:	e0fff817 	ldw	r3,-32(fp)
   15618:	e0bff517 	ldw	r2,-44(fp)
   1561c:	1880062e 	bgeu	r3,r2,15638 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15620:	e0fff517 	ldw	r3,-44(fp)
   15624:	e0bff817 	ldw	r2,-32(fp)
   15628:	1885c83a 	sub	r2,r3,r2
   1562c:	10bfffc4 	addi	r2,r2,-1
   15630:	e0bff615 	stw	r2,-40(fp)
   15634:	00000b06 	br	15664 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15638:	e0bff517 	ldw	r2,-44(fp)
   1563c:	10000526 	beq	r2,zero,15654 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15640:	00c20004 	movi	r3,2048
   15644:	e0bff817 	ldw	r2,-32(fp)
   15648:	1885c83a 	sub	r2,r3,r2
   1564c:	e0bff615 	stw	r2,-40(fp)
   15650:	00000406 	br	15664 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15654:	00c1ffc4 	movi	r3,2047
   15658:	e0bff817 	ldw	r2,-32(fp)
   1565c:	1885c83a 	sub	r2,r3,r2
   15660:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15664:	e0bff617 	ldw	r2,-40(fp)
   15668:	10001e26 	beq	r2,zero,156e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1566c:	e0fffe17 	ldw	r3,-8(fp)
   15670:	e0bff617 	ldw	r2,-40(fp)
   15674:	1880022e 	bgeu	r3,r2,15680 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15678:	e0bffe17 	ldw	r2,-8(fp)
   1567c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15680:	e0bff817 	ldw	r2,-32(fp)
   15684:	10820e04 	addi	r2,r2,2104
   15688:	e0fffc17 	ldw	r3,-16(fp)
   1568c:	1885883a 	add	r2,r3,r2
   15690:	1009883a 	mov	r4,r2
   15694:	e17ffd17 	ldw	r5,-12(fp)
   15698:	e1bff617 	ldw	r6,-40(fp)
   1569c:	00121740 	call	12174 <memcpy>
      ptr   += n;
   156a0:	e0fffd17 	ldw	r3,-12(fp)
   156a4:	e0bff617 	ldw	r2,-40(fp)
   156a8:	1885883a 	add	r2,r3,r2
   156ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   156b0:	e0fffe17 	ldw	r3,-8(fp)
   156b4:	e0bff617 	ldw	r2,-40(fp)
   156b8:	1885c83a 	sub	r2,r3,r2
   156bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   156c0:	e0fff817 	ldw	r3,-32(fp)
   156c4:	e0bff617 	ldw	r2,-40(fp)
   156c8:	1885883a 	add	r2,r3,r2
   156cc:	10c1ffcc 	andi	r3,r2,2047
   156d0:	e0bffc17 	ldw	r2,-16(fp)
   156d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   156d8:	e0bffe17 	ldw	r2,-8(fp)
   156dc:	00bfc716 	blt	zero,r2,155fc <altera_avalon_jtag_uart_write+0x30>
   156e0:	00000106 	br	156e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   156e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156e8:	0005303a 	rdctl	r2,status
   156ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156f0:	e0fffa17 	ldw	r3,-24(fp)
   156f4:	00bfff84 	movi	r2,-2
   156f8:	1884703a 	and	r2,r3,r2
   156fc:	1001703a 	wrctl	status,r2
  
  return context;
   15700:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15704:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15708:	e0bffc17 	ldw	r2,-16(fp)
   1570c:	10800817 	ldw	r2,32(r2)
   15710:	10c00094 	ori	r3,r2,2
   15714:	e0bffc17 	ldw	r2,-16(fp)
   15718:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1571c:	e0bffc17 	ldw	r2,-16(fp)
   15720:	10800017 	ldw	r2,0(r2)
   15724:	10800104 	addi	r2,r2,4
   15728:	e0fffc17 	ldw	r3,-16(fp)
   1572c:	18c00817 	ldw	r3,32(r3)
   15730:	10c00035 	stwio	r3,0(r2)
   15734:	e0bff917 	ldw	r2,-28(fp)
   15738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1573c:	e0bffb17 	ldw	r2,-20(fp)
   15740:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15744:	e0bffe17 	ldw	r2,-8(fp)
   15748:	0080110e 	bge	zero,r2,15790 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1574c:	e0bfff17 	ldw	r2,-4(fp)
   15750:	1090000c 	andi	r2,r2,16384
   15754:	1000111e 	bne	r2,zero,1579c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15758:	0001883a 	nop
   1575c:	e0bffc17 	ldw	r2,-16(fp)
   15760:	10c00d17 	ldw	r3,52(r2)
   15764:	e0bff517 	ldw	r2,-44(fp)
   15768:	1880051e 	bne	r3,r2,15780 <altera_avalon_jtag_uart_write+0x1b4>
   1576c:	e0bffc17 	ldw	r2,-16(fp)
   15770:	10c00917 	ldw	r3,36(r2)
   15774:	e0bffc17 	ldw	r2,-16(fp)
   15778:	10800117 	ldw	r2,4(r2)
   1577c:	18bff736 	bltu	r3,r2,1575c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   15780:	e0bffc17 	ldw	r2,-16(fp)
   15784:	10c00d17 	ldw	r3,52(r2)
   15788:	e0bff517 	ldw	r2,-44(fp)
   1578c:	18800526 	beq	r3,r2,157a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15790:	e0bffe17 	ldw	r2,-8(fp)
   15794:	00bfd016 	blt	zero,r2,156d8 <altera_avalon_jtag_uart_write+0x10c>
   15798:	00000306 	br	157a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1579c:	0001883a 	nop
   157a0:	00000106 	br	157a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   157a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   157a8:	e0fffd17 	ldw	r3,-12(fp)
   157ac:	e0bff717 	ldw	r2,-36(fp)
   157b0:	18800426 	beq	r3,r2,157c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   157b4:	e0fffd17 	ldw	r3,-12(fp)
   157b8:	e0bff717 	ldw	r2,-36(fp)
   157bc:	1885c83a 	sub	r2,r3,r2
   157c0:	00000606 	br	157dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   157c4:	e0bfff17 	ldw	r2,-4(fp)
   157c8:	1090000c 	andi	r2,r2,16384
   157cc:	10000226 	beq	r2,zero,157d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   157d0:	00bffd44 	movi	r2,-11
   157d4:	00000106 	br	157dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   157d8:	00bffec4 	movi	r2,-5
}
   157dc:	e037883a 	mov	sp,fp
   157e0:	dfc00117 	ldw	ra,4(sp)
   157e4:	df000017 	ldw	fp,0(sp)
   157e8:	dec00204 	addi	sp,sp,8
   157ec:	f800283a 	ret

000157f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   157f0:	defffa04 	addi	sp,sp,-24
   157f4:	dfc00515 	stw	ra,20(sp)
   157f8:	df000415 	stw	fp,16(sp)
   157fc:	df000404 	addi	fp,sp,16
   15800:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15804:	0007883a 	mov	r3,zero
   15808:	e0bfff17 	ldw	r2,-4(fp)
   1580c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15810:	e0bfff17 	ldw	r2,-4(fp)
   15814:	10800104 	addi	r2,r2,4
   15818:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1581c:	0005303a 	rdctl	r2,status
   15820:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15824:	e0fffd17 	ldw	r3,-12(fp)
   15828:	00bfff84 	movi	r2,-2
   1582c:	1884703a 	and	r2,r3,r2
   15830:	1001703a 	wrctl	status,r2
  
  return context;
   15834:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15838:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1583c:	001635c0 	call	1635c <alt_tick>
   15840:	e0bffc17 	ldw	r2,-16(fp)
   15844:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15848:	e0bffe17 	ldw	r2,-8(fp)
   1584c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15850:	e037883a 	mov	sp,fp
   15854:	dfc00117 	ldw	ra,4(sp)
   15858:	df000017 	ldw	fp,0(sp)
   1585c:	dec00204 	addi	sp,sp,8
   15860:	f800283a 	ret

00015864 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15864:	defff804 	addi	sp,sp,-32
   15868:	dfc00715 	stw	ra,28(sp)
   1586c:	df000615 	stw	fp,24(sp)
   15870:	df000604 	addi	fp,sp,24
   15874:	e13ffc15 	stw	r4,-16(fp)
   15878:	e17ffd15 	stw	r5,-12(fp)
   1587c:	e1bffe15 	stw	r6,-8(fp)
   15880:	e1ffff15 	stw	r7,-4(fp)
   15884:	e0bfff17 	ldw	r2,-4(fp)
   15888:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1588c:	008000b4 	movhi	r2,2
   15890:	10ac4d04 	addi	r2,r2,-20172
   15894:	10800017 	ldw	r2,0(r2)
   15898:	1000041e 	bne	r2,zero,158ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1589c:	008000b4 	movhi	r2,2
   158a0:	10ac4d04 	addi	r2,r2,-20172
   158a4:	e0fffb17 	ldw	r3,-20(fp)
   158a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   158ac:	e0bffc17 	ldw	r2,-16(fp)
   158b0:	10800104 	addi	r2,r2,4
   158b4:	00c001c4 	movi	r3,7
   158b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   158bc:	d8000015 	stw	zero,0(sp)
   158c0:	e13ffd17 	ldw	r4,-12(fp)
   158c4:	e17ffe17 	ldw	r5,-8(fp)
   158c8:	01800074 	movhi	r6,1
   158cc:	3195fc04 	addi	r6,r6,22512
   158d0:	e1fffc17 	ldw	r7,-16(fp)
   158d4:	0015c0c0 	call	15c0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   158d8:	e037883a 	mov	sp,fp
   158dc:	dfc00117 	ldw	ra,4(sp)
   158e0:	df000017 	ldw	fp,0(sp)
   158e4:	dec00204 	addi	sp,sp,8
   158e8:	f800283a 	ret

000158ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   158ec:	defff504 	addi	sp,sp,-44
   158f0:	df000a15 	stw	fp,40(sp)
   158f4:	df000a04 	addi	fp,sp,40
   158f8:	e13ffc15 	stw	r4,-16(fp)
   158fc:	e17ffd15 	stw	r5,-12(fp)
   15900:	e1bffe15 	stw	r6,-8(fp)
   15904:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15908:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1590c:	008000b4 	movhi	r2,2
   15910:	10ac4d04 	addi	r2,r2,-20172
   15914:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   15918:	10003f26 	beq	r2,zero,15a18 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1591c:	e0bffc17 	ldw	r2,-16(fp)
   15920:	10003b26 	beq	r2,zero,15a10 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   15924:	e0bffc17 	ldw	r2,-16(fp)
   15928:	e0fffe17 	ldw	r3,-8(fp)
   1592c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15930:	e0bffc17 	ldw	r2,-16(fp)
   15934:	e0ffff17 	ldw	r3,-4(fp)
   15938:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1593c:	0005303a 	rdctl	r2,status
   15940:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15944:	e0fff817 	ldw	r3,-32(fp)
   15948:	00bfff84 	movi	r2,-2
   1594c:	1884703a 	and	r2,r3,r2
   15950:	1001703a 	wrctl	status,r2
  
  return context;
   15954:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   15958:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1595c:	008000b4 	movhi	r2,2
   15960:	10ac4e04 	addi	r2,r2,-20168
   15964:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   15968:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1596c:	e0fffd17 	ldw	r3,-12(fp)
   15970:	e0bff617 	ldw	r2,-40(fp)
   15974:	1885883a 	add	r2,r3,r2
   15978:	10c00044 	addi	r3,r2,1
   1597c:	e0bffc17 	ldw	r2,-16(fp)
   15980:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15984:	e0bffc17 	ldw	r2,-16(fp)
   15988:	10c00217 	ldw	r3,8(r2)
   1598c:	e0bff617 	ldw	r2,-40(fp)
   15990:	1880042e 	bgeu	r3,r2,159a4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   15994:	e0bffc17 	ldw	r2,-16(fp)
   15998:	00c00044 	movi	r3,1
   1599c:	10c00405 	stb	r3,16(r2)
   159a0:	00000206 	br	159ac <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   159a4:	e0bffc17 	ldw	r2,-16(fp)
   159a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   159ac:	e0bffc17 	ldw	r2,-16(fp)
   159b0:	00c000b4 	movhi	r3,2
   159b4:	18e38904 	addi	r3,r3,-29148
   159b8:	e0fff915 	stw	r3,-28(fp)
   159bc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   159c0:	e0bffa17 	ldw	r2,-24(fp)
   159c4:	e0fff917 	ldw	r3,-28(fp)
   159c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   159cc:	e0bff917 	ldw	r2,-28(fp)
   159d0:	10c00017 	ldw	r3,0(r2)
   159d4:	e0bffa17 	ldw	r2,-24(fp)
   159d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   159dc:	e0bff917 	ldw	r2,-28(fp)
   159e0:	10800017 	ldw	r2,0(r2)
   159e4:	e0fffa17 	ldw	r3,-24(fp)
   159e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   159ec:	e0bff917 	ldw	r2,-28(fp)
   159f0:	e0fffa17 	ldw	r3,-24(fp)
   159f4:	10c00015 	stw	r3,0(r2)
   159f8:	e0bff717 	ldw	r2,-36(fp)
   159fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a00:	e0bffb17 	ldw	r2,-20(fp)
   15a04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15a08:	0005883a 	mov	r2,zero
   15a0c:	00000306 	br	15a1c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   15a10:	00bffa84 	movi	r2,-22
   15a14:	00000106 	br	15a1c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   15a18:	00bfde84 	movi	r2,-134
  }
}
   15a1c:	e037883a 	mov	sp,fp
   15a20:	df000017 	ldw	fp,0(sp)
   15a24:	dec00104 	addi	sp,sp,4
   15a28:	f800283a 	ret

00015a2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15a2c:	deffff04 	addi	sp,sp,-4
   15a30:	df000015 	stw	fp,0(sp)
   15a34:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15a38:	e037883a 	mov	sp,fp
   15a3c:	df000017 	ldw	fp,0(sp)
   15a40:	dec00104 	addi	sp,sp,4
   15a44:	f800283a 	ret

00015a48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15a48:	defffe04 	addi	sp,sp,-8
   15a4c:	dfc00115 	stw	ra,4(sp)
   15a50:	df000015 	stw	fp,0(sp)
   15a54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15a58:	008000b4 	movhi	r2,2
   15a5c:	10a38604 	addi	r2,r2,-29160
   15a60:	10800017 	ldw	r2,0(r2)
   15a64:	10000526 	beq	r2,zero,15a7c <alt_get_errno+0x34>
   15a68:	008000b4 	movhi	r2,2
   15a6c:	10a38604 	addi	r2,r2,-29160
   15a70:	10800017 	ldw	r2,0(r2)
   15a74:	103ee83a 	callr	r2
   15a78:	00000206 	br	15a84 <alt_get_errno+0x3c>
   15a7c:	008000b4 	movhi	r2,2
   15a80:	10ac4804 	addi	r2,r2,-20192
}
   15a84:	e037883a 	mov	sp,fp
   15a88:	dfc00117 	ldw	ra,4(sp)
   15a8c:	df000017 	ldw	fp,0(sp)
   15a90:	dec00204 	addi	sp,sp,8
   15a94:	f800283a 	ret

00015a98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15a98:	defffa04 	addi	sp,sp,-24
   15a9c:	dfc00515 	stw	ra,20(sp)
   15aa0:	df000415 	stw	fp,16(sp)
   15aa4:	df000404 	addi	fp,sp,16
   15aa8:	e13ffe15 	stw	r4,-8(fp)
   15aac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15ab0:	e0bffe17 	ldw	r2,-8(fp)
   15ab4:	10000326 	beq	r2,zero,15ac4 <alt_dev_llist_insert+0x2c>
   15ab8:	e0bffe17 	ldw	r2,-8(fp)
   15abc:	10800217 	ldw	r2,8(r2)
   15ac0:	1000051e 	bne	r2,zero,15ad8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   15ac4:	0015a480 	call	15a48 <alt_get_errno>
   15ac8:	00c00584 	movi	r3,22
   15acc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   15ad0:	00bffa84 	movi	r2,-22
   15ad4:	00001306 	br	15b24 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15ad8:	e0bffe17 	ldw	r2,-8(fp)
   15adc:	e0ffff17 	ldw	r3,-4(fp)
   15ae0:	e0fffc15 	stw	r3,-16(fp)
   15ae4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15ae8:	e0bffd17 	ldw	r2,-12(fp)
   15aec:	e0fffc17 	ldw	r3,-16(fp)
   15af0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15af4:	e0bffc17 	ldw	r2,-16(fp)
   15af8:	10c00017 	ldw	r3,0(r2)
   15afc:	e0bffd17 	ldw	r2,-12(fp)
   15b00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15b04:	e0bffc17 	ldw	r2,-16(fp)
   15b08:	10800017 	ldw	r2,0(r2)
   15b0c:	e0fffd17 	ldw	r3,-12(fp)
   15b10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15b14:	e0bffc17 	ldw	r2,-16(fp)
   15b18:	e0fffd17 	ldw	r3,-12(fp)
   15b1c:	10c00015 	stw	r3,0(r2)

  return 0;  
   15b20:	0005883a 	mov	r2,zero
}
   15b24:	e037883a 	mov	sp,fp
   15b28:	dfc00117 	ldw	ra,4(sp)
   15b2c:	df000017 	ldw	fp,0(sp)
   15b30:	dec00204 	addi	sp,sp,8
   15b34:	f800283a 	ret

00015b38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15b38:	defffd04 	addi	sp,sp,-12
   15b3c:	dfc00215 	stw	ra,8(sp)
   15b40:	df000115 	stw	fp,4(sp)
   15b44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15b48:	00800074 	movhi	r2,1
   15b4c:	109ab204 	addi	r2,r2,27336
   15b50:	e0bfff15 	stw	r2,-4(fp)
   15b54:	00000606 	br	15b70 <_do_ctors+0x38>
        (*ctor) (); 
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	10800017 	ldw	r2,0(r2)
   15b60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15b64:	e0bfff17 	ldw	r2,-4(fp)
   15b68:	10bfff04 	addi	r2,r2,-4
   15b6c:	e0bfff15 	stw	r2,-4(fp)
   15b70:	e0ffff17 	ldw	r3,-4(fp)
   15b74:	00800074 	movhi	r2,1
   15b78:	109ab304 	addi	r2,r2,27340
   15b7c:	18bff62e 	bgeu	r3,r2,15b58 <_do_ctors+0x20>
        (*ctor) (); 
}
   15b80:	e037883a 	mov	sp,fp
   15b84:	dfc00117 	ldw	ra,4(sp)
   15b88:	df000017 	ldw	fp,0(sp)
   15b8c:	dec00204 	addi	sp,sp,8
   15b90:	f800283a 	ret

00015b94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15b94:	defffd04 	addi	sp,sp,-12
   15b98:	dfc00215 	stw	ra,8(sp)
   15b9c:	df000115 	stw	fp,4(sp)
   15ba0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ba4:	00800074 	movhi	r2,1
   15ba8:	109ab204 	addi	r2,r2,27336
   15bac:	e0bfff15 	stw	r2,-4(fp)
   15bb0:	00000606 	br	15bcc <_do_dtors+0x38>
        (*dtor) (); 
   15bb4:	e0bfff17 	ldw	r2,-4(fp)
   15bb8:	10800017 	ldw	r2,0(r2)
   15bbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15bc0:	e0bfff17 	ldw	r2,-4(fp)
   15bc4:	10bfff04 	addi	r2,r2,-4
   15bc8:	e0bfff15 	stw	r2,-4(fp)
   15bcc:	e0ffff17 	ldw	r3,-4(fp)
   15bd0:	00800074 	movhi	r2,1
   15bd4:	109ab304 	addi	r2,r2,27340
   15bd8:	18bff62e 	bgeu	r3,r2,15bb4 <_do_dtors+0x20>
        (*dtor) (); 
}
   15bdc:	e037883a 	mov	sp,fp
   15be0:	dfc00117 	ldw	ra,4(sp)
   15be4:	df000017 	ldw	fp,0(sp)
   15be8:	dec00204 	addi	sp,sp,8
   15bec:	f800283a 	ret

00015bf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15bf0:	deffff04 	addi	sp,sp,-4
   15bf4:	df000015 	stw	fp,0(sp)
   15bf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15bfc:	e037883a 	mov	sp,fp
   15c00:	df000017 	ldw	fp,0(sp)
   15c04:	dec00104 	addi	sp,sp,4
   15c08:	f800283a 	ret

00015c0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15c0c:	defff904 	addi	sp,sp,-28
   15c10:	dfc00615 	stw	ra,24(sp)
   15c14:	df000515 	stw	fp,20(sp)
   15c18:	df000504 	addi	fp,sp,20
   15c1c:	e13ffc15 	stw	r4,-16(fp)
   15c20:	e17ffd15 	stw	r5,-12(fp)
   15c24:	e1bffe15 	stw	r6,-8(fp)
   15c28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15c2c:	e0800217 	ldw	r2,8(fp)
   15c30:	d8800015 	stw	r2,0(sp)
   15c34:	e13ffc17 	ldw	r4,-16(fp)
   15c38:	e17ffd17 	ldw	r5,-12(fp)
   15c3c:	e1bffe17 	ldw	r6,-8(fp)
   15c40:	e1ffff17 	ldw	r7,-4(fp)
   15c44:	0015de40 	call	15de4 <alt_iic_isr_register>
}  
   15c48:	e037883a 	mov	sp,fp
   15c4c:	dfc00117 	ldw	ra,4(sp)
   15c50:	df000017 	ldw	fp,0(sp)
   15c54:	dec00204 	addi	sp,sp,8
   15c58:	f800283a 	ret

00015c5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15c5c:	defff904 	addi	sp,sp,-28
   15c60:	df000615 	stw	fp,24(sp)
   15c64:	df000604 	addi	fp,sp,24
   15c68:	e13ffe15 	stw	r4,-8(fp)
   15c6c:	e17fff15 	stw	r5,-4(fp)
   15c70:	e0bfff17 	ldw	r2,-4(fp)
   15c74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c78:	0005303a 	rdctl	r2,status
   15c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c80:	e0fffb17 	ldw	r3,-20(fp)
   15c84:	00bfff84 	movi	r2,-2
   15c88:	1884703a 	and	r2,r3,r2
   15c8c:	1001703a 	wrctl	status,r2
  
  return context;
   15c90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15c94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15c98:	e0bffa17 	ldw	r2,-24(fp)
   15c9c:	00c00044 	movi	r3,1
   15ca0:	1884983a 	sll	r2,r3,r2
   15ca4:	1007883a 	mov	r3,r2
   15ca8:	008000b4 	movhi	r2,2
   15cac:	10ac4c04 	addi	r2,r2,-20176
   15cb0:	10800017 	ldw	r2,0(r2)
   15cb4:	1886b03a 	or	r3,r3,r2
   15cb8:	008000b4 	movhi	r2,2
   15cbc:	10ac4c04 	addi	r2,r2,-20176
   15cc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15cc4:	008000b4 	movhi	r2,2
   15cc8:	10ac4c04 	addi	r2,r2,-20176
   15ccc:	10800017 	ldw	r2,0(r2)
   15cd0:	100170fa 	wrctl	ienable,r2
   15cd4:	e0bffc17 	ldw	r2,-16(fp)
   15cd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cdc:	e0bffd17 	ldw	r2,-12(fp)
   15ce0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15ce4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   15ce8:	e037883a 	mov	sp,fp
   15cec:	df000017 	ldw	fp,0(sp)
   15cf0:	dec00104 	addi	sp,sp,4
   15cf4:	f800283a 	ret

00015cf8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15cf8:	defff904 	addi	sp,sp,-28
   15cfc:	df000615 	stw	fp,24(sp)
   15d00:	df000604 	addi	fp,sp,24
   15d04:	e13ffe15 	stw	r4,-8(fp)
   15d08:	e17fff15 	stw	r5,-4(fp)
   15d0c:	e0bfff17 	ldw	r2,-4(fp)
   15d10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d14:	0005303a 	rdctl	r2,status
   15d18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d1c:	e0fffb17 	ldw	r3,-20(fp)
   15d20:	00bfff84 	movi	r2,-2
   15d24:	1884703a 	and	r2,r3,r2
   15d28:	1001703a 	wrctl	status,r2
  
  return context;
   15d2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15d30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15d34:	e0bffa17 	ldw	r2,-24(fp)
   15d38:	00c00044 	movi	r3,1
   15d3c:	1884983a 	sll	r2,r3,r2
   15d40:	0084303a 	nor	r2,zero,r2
   15d44:	1007883a 	mov	r3,r2
   15d48:	008000b4 	movhi	r2,2
   15d4c:	10ac4c04 	addi	r2,r2,-20176
   15d50:	10800017 	ldw	r2,0(r2)
   15d54:	1886703a 	and	r3,r3,r2
   15d58:	008000b4 	movhi	r2,2
   15d5c:	10ac4c04 	addi	r2,r2,-20176
   15d60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15d64:	008000b4 	movhi	r2,2
   15d68:	10ac4c04 	addi	r2,r2,-20176
   15d6c:	10800017 	ldw	r2,0(r2)
   15d70:	100170fa 	wrctl	ienable,r2
   15d74:	e0bffc17 	ldw	r2,-16(fp)
   15d78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d7c:	e0bffd17 	ldw	r2,-12(fp)
   15d80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15d84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   15d88:	e037883a 	mov	sp,fp
   15d8c:	df000017 	ldw	fp,0(sp)
   15d90:	dec00104 	addi	sp,sp,4
   15d94:	f800283a 	ret

00015d98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15d98:	defffc04 	addi	sp,sp,-16
   15d9c:	df000315 	stw	fp,12(sp)
   15da0:	df000304 	addi	fp,sp,12
   15da4:	e13ffe15 	stw	r4,-8(fp)
   15da8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15dac:	000530fa 	rdctl	r2,ienable
   15db0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15db4:	e0bfff17 	ldw	r2,-4(fp)
   15db8:	00c00044 	movi	r3,1
   15dbc:	1884983a 	sll	r2,r3,r2
   15dc0:	1007883a 	mov	r3,r2
   15dc4:	e0bffd17 	ldw	r2,-12(fp)
   15dc8:	1884703a 	and	r2,r3,r2
   15dcc:	1004c03a 	cmpne	r2,r2,zero
   15dd0:	10803fcc 	andi	r2,r2,255
}
   15dd4:	e037883a 	mov	sp,fp
   15dd8:	df000017 	ldw	fp,0(sp)
   15ddc:	dec00104 	addi	sp,sp,4
   15de0:	f800283a 	ret

00015de4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15de4:	defff504 	addi	sp,sp,-44
   15de8:	dfc00a15 	stw	ra,40(sp)
   15dec:	df000915 	stw	fp,36(sp)
   15df0:	df000904 	addi	fp,sp,36
   15df4:	e13ffc15 	stw	r4,-16(fp)
   15df8:	e17ffd15 	stw	r5,-12(fp)
   15dfc:	e1bffe15 	stw	r6,-8(fp)
   15e00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15e04:	00bffa84 	movi	r2,-22
   15e08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15e0c:	e0bffd17 	ldw	r2,-12(fp)
   15e10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15e14:	e0bff817 	ldw	r2,-32(fp)
   15e18:	10800808 	cmpgei	r2,r2,32
   15e1c:	1000271e 	bne	r2,zero,15ebc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e20:	0005303a 	rdctl	r2,status
   15e24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e28:	e0fffa17 	ldw	r3,-24(fp)
   15e2c:	00bfff84 	movi	r2,-2
   15e30:	1884703a 	and	r2,r3,r2
   15e34:	1001703a 	wrctl	status,r2
  
  return context;
   15e38:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15e3c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   15e40:	00c000b4 	movhi	r3,2
   15e44:	18ec5904 	addi	r3,r3,-20124
   15e48:	e0bff817 	ldw	r2,-32(fp)
   15e4c:	100490fa 	slli	r2,r2,3
   15e50:	1885883a 	add	r2,r3,r2
   15e54:	e0fffe17 	ldw	r3,-8(fp)
   15e58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15e5c:	00c000b4 	movhi	r3,2
   15e60:	18ec5904 	addi	r3,r3,-20124
   15e64:	e0bff817 	ldw	r2,-32(fp)
   15e68:	100490fa 	slli	r2,r2,3
   15e6c:	1885883a 	add	r2,r3,r2
   15e70:	10800104 	addi	r2,r2,4
   15e74:	e0ffff17 	ldw	r3,-4(fp)
   15e78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   15e7c:	e0bffe17 	ldw	r2,-8(fp)
   15e80:	10000526 	beq	r2,zero,15e98 <alt_iic_isr_register+0xb4>
   15e84:	e0bff817 	ldw	r2,-32(fp)
   15e88:	e13ffc17 	ldw	r4,-16(fp)
   15e8c:	100b883a 	mov	r5,r2
   15e90:	0015c5c0 	call	15c5c <alt_ic_irq_enable>
   15e94:	00000406 	br	15ea8 <alt_iic_isr_register+0xc4>
   15e98:	e0bff817 	ldw	r2,-32(fp)
   15e9c:	e13ffc17 	ldw	r4,-16(fp)
   15ea0:	100b883a 	mov	r5,r2
   15ea4:	0015cf80 	call	15cf8 <alt_ic_irq_disable>
   15ea8:	e0bff715 	stw	r2,-36(fp)
   15eac:	e0bff917 	ldw	r2,-28(fp)
   15eb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15eb4:	e0bffb17 	ldw	r2,-20(fp)
   15eb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15ebc:	e0bff717 	ldw	r2,-36(fp)
}
   15ec0:	e037883a 	mov	sp,fp
   15ec4:	dfc00117 	ldw	ra,4(sp)
   15ec8:	df000017 	ldw	fp,0(sp)
   15ecc:	dec00204 	addi	sp,sp,8
   15ed0:	f800283a 	ret

00015ed4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15ed4:	defff804 	addi	sp,sp,-32
   15ed8:	dfc00715 	stw	ra,28(sp)
   15edc:	df000615 	stw	fp,24(sp)
   15ee0:	dc000515 	stw	r16,20(sp)
   15ee4:	df000504 	addi	fp,sp,20
   15ee8:	e13ffc15 	stw	r4,-16(fp)
   15eec:	e17ffd15 	stw	r5,-12(fp)
   15ef0:	e1bffe15 	stw	r6,-8(fp)
   15ef4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   15ef8:	e13ffd17 	ldw	r4,-12(fp)
   15efc:	e17ffe17 	ldw	r5,-8(fp)
   15f00:	e1bfff17 	ldw	r6,-4(fp)
   15f04:	001616c0 	call	1616c <open>
   15f08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   15f0c:	e0bffb17 	ldw	r2,-20(fp)
   15f10:	10002216 	blt	r2,zero,15f9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15f14:	04000074 	movhi	r16,1
   15f18:	841f0504 	addi	r16,r16,31764
   15f1c:	e0bffb17 	ldw	r2,-20(fp)
   15f20:	1009883a 	mov	r4,r2
   15f24:	01400304 	movi	r5,12
   15f28:	00112c80 	call	112c8 <__mulsi3>
   15f2c:	8085883a 	add	r2,r16,r2
   15f30:	10c00017 	ldw	r3,0(r2)
   15f34:	e0bffc17 	ldw	r2,-16(fp)
   15f38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15f3c:	04000074 	movhi	r16,1
   15f40:	841f0504 	addi	r16,r16,31764
   15f44:	e0bffb17 	ldw	r2,-20(fp)
   15f48:	1009883a 	mov	r4,r2
   15f4c:	01400304 	movi	r5,12
   15f50:	00112c80 	call	112c8 <__mulsi3>
   15f54:	8085883a 	add	r2,r16,r2
   15f58:	10800104 	addi	r2,r2,4
   15f5c:	10c00017 	ldw	r3,0(r2)
   15f60:	e0bffc17 	ldw	r2,-16(fp)
   15f64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15f68:	04000074 	movhi	r16,1
   15f6c:	841f0504 	addi	r16,r16,31764
   15f70:	e0bffb17 	ldw	r2,-20(fp)
   15f74:	1009883a 	mov	r4,r2
   15f78:	01400304 	movi	r5,12
   15f7c:	00112c80 	call	112c8 <__mulsi3>
   15f80:	8085883a 	add	r2,r16,r2
   15f84:	10800204 	addi	r2,r2,8
   15f88:	10c00017 	ldw	r3,0(r2)
   15f8c:	e0bffc17 	ldw	r2,-16(fp)
   15f90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15f94:	e13ffb17 	ldw	r4,-20(fp)
   15f98:	00145540 	call	14554 <alt_release_fd>
  }
} 
   15f9c:	e037883a 	mov	sp,fp
   15fa0:	dfc00217 	ldw	ra,8(sp)
   15fa4:	df000117 	ldw	fp,4(sp)
   15fa8:	dc000017 	ldw	r16,0(sp)
   15fac:	dec00304 	addi	sp,sp,12
   15fb0:	f800283a 	ret

00015fb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15fb4:	defffb04 	addi	sp,sp,-20
   15fb8:	dfc00415 	stw	ra,16(sp)
   15fbc:	df000315 	stw	fp,12(sp)
   15fc0:	df000304 	addi	fp,sp,12
   15fc4:	e13ffd15 	stw	r4,-12(fp)
   15fc8:	e17ffe15 	stw	r5,-8(fp)
   15fcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15fd0:	01000074 	movhi	r4,1
   15fd4:	211f0804 	addi	r4,r4,31776
   15fd8:	e17ffd17 	ldw	r5,-12(fp)
   15fdc:	01800044 	movi	r6,1
   15fe0:	01c07fc4 	movi	r7,511
   15fe4:	0015ed40 	call	15ed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15fe8:	01000074 	movhi	r4,1
   15fec:	211f0504 	addi	r4,r4,31764
   15ff0:	e17ffe17 	ldw	r5,-8(fp)
   15ff4:	000d883a 	mov	r6,zero
   15ff8:	01c07fc4 	movi	r7,511
   15ffc:	0015ed40 	call	15ed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16000:	01000074 	movhi	r4,1
   16004:	211f0b04 	addi	r4,r4,31788
   16008:	e17fff17 	ldw	r5,-4(fp)
   1600c:	01800044 	movi	r6,1
   16010:	01c07fc4 	movi	r7,511
   16014:	0015ed40 	call	15ed4 <alt_open_fd>
}  
   16018:	e037883a 	mov	sp,fp
   1601c:	dfc00117 	ldw	ra,4(sp)
   16020:	df000017 	ldw	fp,0(sp)
   16024:	dec00204 	addi	sp,sp,8
   16028:	f800283a 	ret

0001602c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1602c:	defffe04 	addi	sp,sp,-8
   16030:	dfc00115 	stw	ra,4(sp)
   16034:	df000015 	stw	fp,0(sp)
   16038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1603c:	008000b4 	movhi	r2,2
   16040:	10a38604 	addi	r2,r2,-29160
   16044:	10800017 	ldw	r2,0(r2)
   16048:	10000526 	beq	r2,zero,16060 <alt_get_errno+0x34>
   1604c:	008000b4 	movhi	r2,2
   16050:	10a38604 	addi	r2,r2,-29160
   16054:	10800017 	ldw	r2,0(r2)
   16058:	103ee83a 	callr	r2
   1605c:	00000206 	br	16068 <alt_get_errno+0x3c>
   16060:	008000b4 	movhi	r2,2
   16064:	10ac4804 	addi	r2,r2,-20192
}
   16068:	e037883a 	mov	sp,fp
   1606c:	dfc00117 	ldw	ra,4(sp)
   16070:	df000017 	ldw	fp,0(sp)
   16074:	dec00204 	addi	sp,sp,8
   16078:	f800283a 	ret

0001607c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1607c:	defffb04 	addi	sp,sp,-20
   16080:	dfc00415 	stw	ra,16(sp)
   16084:	df000315 	stw	fp,12(sp)
   16088:	dc000215 	stw	r16,8(sp)
   1608c:	df000204 	addi	fp,sp,8
   16090:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16094:	e0bfff17 	ldw	r2,-4(fp)
   16098:	10800217 	ldw	r2,8(r2)
   1609c:	10d00034 	orhi	r3,r2,16384
   160a0:	e0bfff17 	ldw	r2,-4(fp)
   160a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   160a8:	e03ffe15 	stw	zero,-8(fp)
   160ac:	00002206 	br	16138 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   160b0:	04000074 	movhi	r16,1
   160b4:	841f0504 	addi	r16,r16,31764
   160b8:	e0bffe17 	ldw	r2,-8(fp)
   160bc:	1009883a 	mov	r4,r2
   160c0:	01400304 	movi	r5,12
   160c4:	00112c80 	call	112c8 <__mulsi3>
   160c8:	8085883a 	add	r2,r16,r2
   160cc:	10c00017 	ldw	r3,0(r2)
   160d0:	e0bfff17 	ldw	r2,-4(fp)
   160d4:	10800017 	ldw	r2,0(r2)
   160d8:	1880141e 	bne	r3,r2,1612c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   160dc:	04000074 	movhi	r16,1
   160e0:	841f0504 	addi	r16,r16,31764
   160e4:	e0bffe17 	ldw	r2,-8(fp)
   160e8:	1009883a 	mov	r4,r2
   160ec:	01400304 	movi	r5,12
   160f0:	00112c80 	call	112c8 <__mulsi3>
   160f4:	8085883a 	add	r2,r16,r2
   160f8:	10800204 	addi	r2,r2,8
   160fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16100:	10000a0e 	bge	r2,zero,1612c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16104:	e13ffe17 	ldw	r4,-8(fp)
   16108:	01400304 	movi	r5,12
   1610c:	00112c80 	call	112c8 <__mulsi3>
   16110:	00c00074 	movhi	r3,1
   16114:	18df0504 	addi	r3,r3,31764
   16118:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1611c:	e0bfff17 	ldw	r2,-4(fp)
   16120:	18800226 	beq	r3,r2,1612c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16124:	00bffcc4 	movi	r2,-13
   16128:	00000a06 	br	16154 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1612c:	e0bffe17 	ldw	r2,-8(fp)
   16130:	10800044 	addi	r2,r2,1
   16134:	e0bffe15 	stw	r2,-8(fp)
   16138:	008000b4 	movhi	r2,2
   1613c:	10a38504 	addi	r2,r2,-29164
   16140:	10800017 	ldw	r2,0(r2)
   16144:	1007883a 	mov	r3,r2
   16148:	e0bffe17 	ldw	r2,-8(fp)
   1614c:	18bfd82e 	bgeu	r3,r2,160b0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16150:	0005883a 	mov	r2,zero
}
   16154:	e037883a 	mov	sp,fp
   16158:	dfc00217 	ldw	ra,8(sp)
   1615c:	df000117 	ldw	fp,4(sp)
   16160:	dc000017 	ldw	r16,0(sp)
   16164:	dec00304 	addi	sp,sp,12
   16168:	f800283a 	ret

0001616c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1616c:	defff604 	addi	sp,sp,-40
   16170:	dfc00915 	stw	ra,36(sp)
   16174:	df000815 	stw	fp,32(sp)
   16178:	df000804 	addi	fp,sp,32
   1617c:	e13ffd15 	stw	r4,-12(fp)
   16180:	e17ffe15 	stw	r5,-8(fp)
   16184:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16188:	00bfffc4 	movi	r2,-1
   1618c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16190:	00bffb44 	movi	r2,-19
   16194:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16198:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1619c:	e13ffd17 	ldw	r4,-12(fp)
   161a0:	014000b4 	movhi	r5,2
   161a4:	29638304 	addi	r5,r5,-29172
   161a8:	00164800 	call	16480 <alt_find_dev>
   161ac:	e0bff815 	stw	r2,-32(fp)
   161b0:	e0bff817 	ldw	r2,-32(fp)
   161b4:	1000051e 	bne	r2,zero,161cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   161b8:	e13ffd17 	ldw	r4,-12(fp)
   161bc:	00165100 	call	16510 <alt_find_file>
   161c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   161c4:	00800044 	movi	r2,1
   161c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   161cc:	e0bff817 	ldw	r2,-32(fp)
   161d0:	10002a26 	beq	r2,zero,1627c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   161d4:	e13ff817 	ldw	r4,-32(fp)
   161d8:	00166240 	call	16624 <alt_get_fd>
   161dc:	e0bff915 	stw	r2,-28(fp)
   161e0:	e0bff917 	ldw	r2,-28(fp)
   161e4:	1000030e 	bge	r2,zero,161f4 <open+0x88>
    {
      status = index;
   161e8:	e0bff917 	ldw	r2,-28(fp)
   161ec:	e0bffa15 	stw	r2,-24(fp)
   161f0:	00002406 	br	16284 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   161f4:	e13ff917 	ldw	r4,-28(fp)
   161f8:	01400304 	movi	r5,12
   161fc:	00112c80 	call	112c8 <__mulsi3>
   16200:	00c00074 	movhi	r3,1
   16204:	18df0504 	addi	r3,r3,31764
   16208:	10c5883a 	add	r2,r2,r3
   1620c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16210:	e0fffe17 	ldw	r3,-8(fp)
   16214:	00900034 	movhi	r2,16384
   16218:	10bfffc4 	addi	r2,r2,-1
   1621c:	1886703a 	and	r3,r3,r2
   16220:	e0bffc17 	ldw	r2,-16(fp)
   16224:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16228:	e0bffb17 	ldw	r2,-20(fp)
   1622c:	1000051e 	bne	r2,zero,16244 <open+0xd8>
   16230:	e13ffc17 	ldw	r4,-16(fp)
   16234:	001607c0 	call	1607c <alt_file_locked>
   16238:	e0bffa15 	stw	r2,-24(fp)
   1623c:	e0bffa17 	ldw	r2,-24(fp)
   16240:	10001016 	blt	r2,zero,16284 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16244:	e0bff817 	ldw	r2,-32(fp)
   16248:	10800317 	ldw	r2,12(r2)
   1624c:	10000826 	beq	r2,zero,16270 <open+0x104>
   16250:	e0bff817 	ldw	r2,-32(fp)
   16254:	10800317 	ldw	r2,12(r2)
   16258:	e13ffc17 	ldw	r4,-16(fp)
   1625c:	e17ffd17 	ldw	r5,-12(fp)
   16260:	e1bffe17 	ldw	r6,-8(fp)
   16264:	e1ffff17 	ldw	r7,-4(fp)
   16268:	103ee83a 	callr	r2
   1626c:	00000106 	br	16274 <open+0x108>
   16270:	0005883a 	mov	r2,zero
   16274:	e0bffa15 	stw	r2,-24(fp)
   16278:	00000206 	br	16284 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1627c:	00bffb44 	movi	r2,-19
   16280:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16284:	e0bffa17 	ldw	r2,-24(fp)
   16288:	1000080e 	bge	r2,zero,162ac <open+0x140>
  {
    alt_release_fd (index);  
   1628c:	e13ff917 	ldw	r4,-28(fp)
   16290:	00145540 	call	14554 <alt_release_fd>
    ALT_ERRNO = -status;
   16294:	001602c0 	call	1602c <alt_get_errno>
   16298:	e0fffa17 	ldw	r3,-24(fp)
   1629c:	00c7c83a 	sub	r3,zero,r3
   162a0:	10c00015 	stw	r3,0(r2)
    return -1;
   162a4:	00bfffc4 	movi	r2,-1
   162a8:	00000106 	br	162b0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   162ac:	e0bff917 	ldw	r2,-28(fp)
}
   162b0:	e037883a 	mov	sp,fp
   162b4:	dfc00117 	ldw	ra,4(sp)
   162b8:	df000017 	ldw	fp,0(sp)
   162bc:	dec00204 	addi	sp,sp,8
   162c0:	f800283a 	ret

000162c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   162c4:	defffa04 	addi	sp,sp,-24
   162c8:	df000515 	stw	fp,20(sp)
   162cc:	df000504 	addi	fp,sp,20
   162d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162d4:	0005303a 	rdctl	r2,status
   162d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162dc:	e0fffc17 	ldw	r3,-16(fp)
   162e0:	00bfff84 	movi	r2,-2
   162e4:	1884703a 	and	r2,r3,r2
   162e8:	1001703a 	wrctl	status,r2
  
  return context;
   162ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   162f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   162f4:	e0bfff17 	ldw	r2,-4(fp)
   162f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   162fc:	e0bffd17 	ldw	r2,-12(fp)
   16300:	10800017 	ldw	r2,0(r2)
   16304:	e0fffd17 	ldw	r3,-12(fp)
   16308:	18c00117 	ldw	r3,4(r3)
   1630c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16310:	e0bffd17 	ldw	r2,-12(fp)
   16314:	10800117 	ldw	r2,4(r2)
   16318:	e0fffd17 	ldw	r3,-12(fp)
   1631c:	18c00017 	ldw	r3,0(r3)
   16320:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16324:	e0bffd17 	ldw	r2,-12(fp)
   16328:	e0fffd17 	ldw	r3,-12(fp)
   1632c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16330:	e0bffd17 	ldw	r2,-12(fp)
   16334:	e0fffd17 	ldw	r3,-12(fp)
   16338:	10c00015 	stw	r3,0(r2)
   1633c:	e0bffb17 	ldw	r2,-20(fp)
   16340:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16344:	e0bffe17 	ldw	r2,-8(fp)
   16348:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1634c:	e037883a 	mov	sp,fp
   16350:	df000017 	ldw	fp,0(sp)
   16354:	dec00104 	addi	sp,sp,4
   16358:	f800283a 	ret

0001635c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1635c:	defffb04 	addi	sp,sp,-20
   16360:	dfc00415 	stw	ra,16(sp)
   16364:	df000315 	stw	fp,12(sp)
   16368:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1636c:	d0a00c17 	ldw	r2,-32720(gp)
   16370:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16374:	d0a8d117 	ldw	r2,-23740(gp)
   16378:	10800044 	addi	r2,r2,1
   1637c:	d0a8d115 	stw	r2,-23740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16380:	00002e06 	br	1643c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16384:	e0bffd17 	ldw	r2,-12(fp)
   16388:	10800017 	ldw	r2,0(r2)
   1638c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16390:	e0bffd17 	ldw	r2,-12(fp)
   16394:	10800403 	ldbu	r2,16(r2)
   16398:	10803fcc 	andi	r2,r2,255
   1639c:	10000426 	beq	r2,zero,163b0 <alt_tick+0x54>
   163a0:	d0a8d117 	ldw	r2,-23740(gp)
   163a4:	1000021e 	bne	r2,zero,163b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   163a8:	e0bffd17 	ldw	r2,-12(fp)
   163ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   163b0:	e0bffd17 	ldw	r2,-12(fp)
   163b4:	10800217 	ldw	r2,8(r2)
   163b8:	d0e8d117 	ldw	r3,-23740(gp)
   163bc:	18801d36 	bltu	r3,r2,16434 <alt_tick+0xd8>
   163c0:	e0bffd17 	ldw	r2,-12(fp)
   163c4:	10800403 	ldbu	r2,16(r2)
   163c8:	10803fcc 	andi	r2,r2,255
   163cc:	1000191e 	bne	r2,zero,16434 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   163d0:	e0bffd17 	ldw	r2,-12(fp)
   163d4:	10c00317 	ldw	r3,12(r2)
   163d8:	e0bffd17 	ldw	r2,-12(fp)
   163dc:	10800517 	ldw	r2,20(r2)
   163e0:	1009883a 	mov	r4,r2
   163e4:	183ee83a 	callr	r3
   163e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   163ec:	e0bfff17 	ldw	r2,-4(fp)
   163f0:	1000031e 	bne	r2,zero,16400 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   163f4:	e13ffd17 	ldw	r4,-12(fp)
   163f8:	00162c40 	call	162c4 <alt_alarm_stop>
   163fc:	00000d06 	br	16434 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16400:	e0bffd17 	ldw	r2,-12(fp)
   16404:	10c00217 	ldw	r3,8(r2)
   16408:	e0bfff17 	ldw	r2,-4(fp)
   1640c:	1887883a 	add	r3,r3,r2
   16410:	e0bffd17 	ldw	r2,-12(fp)
   16414:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16418:	e0bffd17 	ldw	r2,-12(fp)
   1641c:	10c00217 	ldw	r3,8(r2)
   16420:	d0a8d117 	ldw	r2,-23740(gp)
   16424:	1880032e 	bgeu	r3,r2,16434 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16428:	e0bffd17 	ldw	r2,-12(fp)
   1642c:	00c00044 	movi	r3,1
   16430:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16434:	e0bffe17 	ldw	r2,-8(fp)
   16438:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1643c:	e0fffd17 	ldw	r3,-12(fp)
   16440:	d0a00c04 	addi	r2,gp,-32720
   16444:	18bfcf1e 	bne	r3,r2,16384 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16448:	0001883a 	nop
}
   1644c:	e037883a 	mov	sp,fp
   16450:	dfc00117 	ldw	ra,4(sp)
   16454:	df000017 	ldw	fp,0(sp)
   16458:	dec00204 	addi	sp,sp,8
   1645c:	f800283a 	ret

00016460 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   16460:	deffff04 	addi	sp,sp,-4
   16464:	df000015 	stw	fp,0(sp)
   16468:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1646c:	000170fa 	wrctl	ienable,zero
}
   16470:	e037883a 	mov	sp,fp
   16474:	df000017 	ldw	fp,0(sp)
   16478:	dec00104 	addi	sp,sp,4
   1647c:	f800283a 	ret

00016480 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16480:	defffa04 	addi	sp,sp,-24
   16484:	dfc00515 	stw	ra,20(sp)
   16488:	df000415 	stw	fp,16(sp)
   1648c:	df000404 	addi	fp,sp,16
   16490:	e13ffe15 	stw	r4,-8(fp)
   16494:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16498:	e0bfff17 	ldw	r2,-4(fp)
   1649c:	10800017 	ldw	r2,0(r2)
   164a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   164a4:	e13ffe17 	ldw	r4,-8(fp)
   164a8:	00113880 	call	11388 <strlen>
   164ac:	10800044 	addi	r2,r2,1
   164b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   164b4:	00000d06 	br	164ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   164b8:	e0bffc17 	ldw	r2,-16(fp)
   164bc:	10c00217 	ldw	r3,8(r2)
   164c0:	e0bffd17 	ldw	r2,-12(fp)
   164c4:	1809883a 	mov	r4,r3
   164c8:	e17ffe17 	ldw	r5,-8(fp)
   164cc:	100d883a 	mov	r6,r2
   164d0:	00167440 	call	16744 <memcmp>
   164d4:	1000021e 	bne	r2,zero,164e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   164d8:	e0bffc17 	ldw	r2,-16(fp)
   164dc:	00000706 	br	164fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   164e0:	e0bffc17 	ldw	r2,-16(fp)
   164e4:	10800017 	ldw	r2,0(r2)
   164e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   164ec:	e0fffc17 	ldw	r3,-16(fp)
   164f0:	e0bfff17 	ldw	r2,-4(fp)
   164f4:	18bff01e 	bne	r3,r2,164b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   164f8:	0005883a 	mov	r2,zero
}
   164fc:	e037883a 	mov	sp,fp
   16500:	dfc00117 	ldw	ra,4(sp)
   16504:	df000017 	ldw	fp,0(sp)
   16508:	dec00204 	addi	sp,sp,8
   1650c:	f800283a 	ret

00016510 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16510:	defffb04 	addi	sp,sp,-20
   16514:	dfc00415 	stw	ra,16(sp)
   16518:	df000315 	stw	fp,12(sp)
   1651c:	df000304 	addi	fp,sp,12
   16520:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16524:	008000b4 	movhi	r2,2
   16528:	10a38104 	addi	r2,r2,-29180
   1652c:	10800017 	ldw	r2,0(r2)
   16530:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16534:	00003106 	br	165fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   16538:	e0bffd17 	ldw	r2,-12(fp)
   1653c:	10800217 	ldw	r2,8(r2)
   16540:	1009883a 	mov	r4,r2
   16544:	00113880 	call	11388 <strlen>
   16548:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1654c:	e0bffd17 	ldw	r2,-12(fp)
   16550:	10c00217 	ldw	r3,8(r2)
   16554:	e0bffe17 	ldw	r2,-8(fp)
   16558:	10bfffc4 	addi	r2,r2,-1
   1655c:	1885883a 	add	r2,r3,r2
   16560:	10800003 	ldbu	r2,0(r2)
   16564:	10803fcc 	andi	r2,r2,255
   16568:	1080201c 	xori	r2,r2,128
   1656c:	10bfe004 	addi	r2,r2,-128
   16570:	10800bd8 	cmpnei	r2,r2,47
   16574:	1000031e 	bne	r2,zero,16584 <alt_find_file+0x74>
    {
      len -= 1;
   16578:	e0bffe17 	ldw	r2,-8(fp)
   1657c:	10bfffc4 	addi	r2,r2,-1
   16580:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16584:	e0bffe17 	ldw	r2,-8(fp)
   16588:	e0ffff17 	ldw	r3,-4(fp)
   1658c:	1885883a 	add	r2,r3,r2
   16590:	10800003 	ldbu	r2,0(r2)
   16594:	10803fcc 	andi	r2,r2,255
   16598:	1080201c 	xori	r2,r2,128
   1659c:	10bfe004 	addi	r2,r2,-128
   165a0:	10800be0 	cmpeqi	r2,r2,47
   165a4:	1000081e 	bne	r2,zero,165c8 <alt_find_file+0xb8>
   165a8:	e0bffe17 	ldw	r2,-8(fp)
   165ac:	e0ffff17 	ldw	r3,-4(fp)
   165b0:	1885883a 	add	r2,r3,r2
   165b4:	10800003 	ldbu	r2,0(r2)
   165b8:	10803fcc 	andi	r2,r2,255
   165bc:	1080201c 	xori	r2,r2,128
   165c0:	10bfe004 	addi	r2,r2,-128
   165c4:	10000a1e 	bne	r2,zero,165f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   165c8:	e0bffd17 	ldw	r2,-12(fp)
   165cc:	10c00217 	ldw	r3,8(r2)
   165d0:	e0bffe17 	ldw	r2,-8(fp)
   165d4:	1809883a 	mov	r4,r3
   165d8:	e17fff17 	ldw	r5,-4(fp)
   165dc:	100d883a 	mov	r6,r2
   165e0:	00167440 	call	16744 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   165e4:	1000021e 	bne	r2,zero,165f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   165e8:	e0bffd17 	ldw	r2,-12(fp)
   165ec:	00000806 	br	16610 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   165f0:	e0bffd17 	ldw	r2,-12(fp)
   165f4:	10800017 	ldw	r2,0(r2)
   165f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   165fc:	e0fffd17 	ldw	r3,-12(fp)
   16600:	008000b4 	movhi	r2,2
   16604:	10a38104 	addi	r2,r2,-29180
   16608:	18bfcb1e 	bne	r3,r2,16538 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1660c:	0005883a 	mov	r2,zero
}
   16610:	e037883a 	mov	sp,fp
   16614:	dfc00117 	ldw	ra,4(sp)
   16618:	df000017 	ldw	fp,0(sp)
   1661c:	dec00204 	addi	sp,sp,8
   16620:	f800283a 	ret

00016624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16624:	defffa04 	addi	sp,sp,-24
   16628:	dfc00515 	stw	ra,20(sp)
   1662c:	df000415 	stw	fp,16(sp)
   16630:	dc000315 	stw	r16,12(sp)
   16634:	df000304 	addi	fp,sp,12
   16638:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1663c:	00bffa04 	movi	r2,-24
   16640:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16644:	e03ffd15 	stw	zero,-12(fp)
   16648:	00002106 	br	166d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1664c:	04000074 	movhi	r16,1
   16650:	841f0504 	addi	r16,r16,31764
   16654:	e0bffd17 	ldw	r2,-12(fp)
   16658:	1009883a 	mov	r4,r2
   1665c:	01400304 	movi	r5,12
   16660:	00112c80 	call	112c8 <__mulsi3>
   16664:	8085883a 	add	r2,r16,r2
   16668:	10800017 	ldw	r2,0(r2)
   1666c:	1000151e 	bne	r2,zero,166c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   16670:	04000074 	movhi	r16,1
   16674:	841f0504 	addi	r16,r16,31764
   16678:	e0bffd17 	ldw	r2,-12(fp)
   1667c:	1009883a 	mov	r4,r2
   16680:	01400304 	movi	r5,12
   16684:	00112c80 	call	112c8 <__mulsi3>
   16688:	8085883a 	add	r2,r16,r2
   1668c:	e0ffff17 	ldw	r3,-4(fp)
   16690:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   16694:	008000b4 	movhi	r2,2
   16698:	10a38504 	addi	r2,r2,-29164
   1669c:	10c00017 	ldw	r3,0(r2)
   166a0:	e0bffd17 	ldw	r2,-12(fp)
   166a4:	1880040e 	bge	r3,r2,166b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   166a8:	008000b4 	movhi	r2,2
   166ac:	10a38504 	addi	r2,r2,-29164
   166b0:	e0fffd17 	ldw	r3,-12(fp)
   166b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   166b8:	e0bffd17 	ldw	r2,-12(fp)
   166bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   166c0:	00000606 	br	166dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   166c4:	e0bffd17 	ldw	r2,-12(fp)
   166c8:	10800044 	addi	r2,r2,1
   166cc:	e0bffd15 	stw	r2,-12(fp)
   166d0:	e0bffd17 	ldw	r2,-12(fp)
   166d4:	10800810 	cmplti	r2,r2,32
   166d8:	103fdc1e 	bne	r2,zero,1664c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   166dc:	e0bffe17 	ldw	r2,-8(fp)
}
   166e0:	e037883a 	mov	sp,fp
   166e4:	dfc00217 	ldw	ra,8(sp)
   166e8:	df000117 	ldw	fp,4(sp)
   166ec:	dc000017 	ldw	r16,0(sp)
   166f0:	dec00304 	addi	sp,sp,12
   166f4:	f800283a 	ret

000166f8 <atexit>:
   166f8:	200b883a 	mov	r5,r4
   166fc:	000d883a 	mov	r6,zero
   16700:	0009883a 	mov	r4,zero
   16704:	000f883a 	mov	r7,zero
   16708:	00167c01 	jmpi	167c0 <__register_exitproc>

0001670c <exit>:
   1670c:	defffe04 	addi	sp,sp,-8
   16710:	000b883a 	mov	r5,zero
   16714:	dc000015 	stw	r16,0(sp)
   16718:	dfc00115 	stw	ra,4(sp)
   1671c:	2021883a 	mov	r16,r4
   16720:	00168f00 	call	168f0 <__call_exitprocs>
   16724:	008000b4 	movhi	r2,2
   16728:	10a37d04 	addi	r2,r2,-29196
   1672c:	11000017 	ldw	r4,0(r2)
   16730:	20800f17 	ldw	r2,60(r4)
   16734:	10000126 	beq	r2,zero,1673c <exit+0x30>
   16738:	103ee83a 	callr	r2
   1673c:	8009883a 	mov	r4,r16
   16740:	0016a900 	call	16a90 <_exit>

00016744 <memcmp>:
   16744:	01c000c4 	movi	r7,3
   16748:	3980192e 	bgeu	r7,r6,167b0 <memcmp+0x6c>
   1674c:	2904b03a 	or	r2,r5,r4
   16750:	11c4703a 	and	r2,r2,r7
   16754:	10000f26 	beq	r2,zero,16794 <memcmp+0x50>
   16758:	20c00003 	ldbu	r3,0(r4)
   1675c:	28800003 	ldbu	r2,0(r5)
   16760:	1880151e 	bne	r3,r2,167b8 <memcmp+0x74>
   16764:	31bfff84 	addi	r6,r6,-2
   16768:	01ffffc4 	movi	r7,-1
   1676c:	00000406 	br	16780 <memcmp+0x3c>
   16770:	20c00003 	ldbu	r3,0(r4)
   16774:	28800003 	ldbu	r2,0(r5)
   16778:	31bfffc4 	addi	r6,r6,-1
   1677c:	18800e1e 	bne	r3,r2,167b8 <memcmp+0x74>
   16780:	21000044 	addi	r4,r4,1
   16784:	29400044 	addi	r5,r5,1
   16788:	31fff91e 	bne	r6,r7,16770 <memcmp+0x2c>
   1678c:	0005883a 	mov	r2,zero
   16790:	f800283a 	ret
   16794:	20c00017 	ldw	r3,0(r4)
   16798:	28800017 	ldw	r2,0(r5)
   1679c:	1880041e 	bne	r3,r2,167b0 <memcmp+0x6c>
   167a0:	31bfff04 	addi	r6,r6,-4
   167a4:	21000104 	addi	r4,r4,4
   167a8:	29400104 	addi	r5,r5,4
   167ac:	39bff936 	bltu	r7,r6,16794 <memcmp+0x50>
   167b0:	303fe91e 	bne	r6,zero,16758 <memcmp+0x14>
   167b4:	003ff506 	br	1678c <memcmp+0x48>
   167b8:	1885c83a 	sub	r2,r3,r2
   167bc:	f800283a 	ret

000167c0 <__register_exitproc>:
   167c0:	defffa04 	addi	sp,sp,-24
   167c4:	008000b4 	movhi	r2,2
   167c8:	10a37d04 	addi	r2,r2,-29196
   167cc:	dc000315 	stw	r16,12(sp)
   167d0:	14000017 	ldw	r16,0(r2)
   167d4:	dc400415 	stw	r17,16(sp)
   167d8:	dfc00515 	stw	ra,20(sp)
   167dc:	80805217 	ldw	r2,328(r16)
   167e0:	2023883a 	mov	r17,r4
   167e4:	10003e26 	beq	r2,zero,168e0 <__register_exitproc+0x120>
   167e8:	10c00117 	ldw	r3,4(r2)
   167ec:	020007c4 	movi	r8,31
   167f0:	40c0180e 	bge	r8,r3,16854 <__register_exitproc+0x94>
   167f4:	00800034 	movhi	r2,0
   167f8:	10800004 	addi	r2,r2,0
   167fc:	1000061e 	bne	r2,zero,16818 <__register_exitproc+0x58>
   16800:	00bfffc4 	movi	r2,-1
   16804:	dfc00517 	ldw	ra,20(sp)
   16808:	dc400417 	ldw	r17,16(sp)
   1680c:	dc000317 	ldw	r16,12(sp)
   16810:	dec00604 	addi	sp,sp,24
   16814:	f800283a 	ret
   16818:	01006404 	movi	r4,400
   1681c:	d9400015 	stw	r5,0(sp)
   16820:	d9800115 	stw	r6,4(sp)
   16824:	d9c00215 	stw	r7,8(sp)
   16828:	00000000 	call	0 <__alt_mem_onchip_mem_1e-0x10000>
   1682c:	d9400017 	ldw	r5,0(sp)
   16830:	d9800117 	ldw	r6,4(sp)
   16834:	d9c00217 	ldw	r7,8(sp)
   16838:	103ff126 	beq	r2,zero,16800 <__register_exitproc+0x40>
   1683c:	80c05217 	ldw	r3,328(r16)
   16840:	10000115 	stw	zero,4(r2)
   16844:	10c00015 	stw	r3,0(r2)
   16848:	80805215 	stw	r2,328(r16)
   1684c:	10006215 	stw	zero,392(r2)
   16850:	10006315 	stw	zero,396(r2)
   16854:	10c00117 	ldw	r3,4(r2)
   16858:	88000d1e 	bne	r17,zero,16890 <__register_exitproc+0xd0>
   1685c:	19000084 	addi	r4,r3,2
   16860:	2109883a 	add	r4,r4,r4
   16864:	18c00044 	addi	r3,r3,1
   16868:	2109883a 	add	r4,r4,r4
   1686c:	1109883a 	add	r4,r2,r4
   16870:	10c00115 	stw	r3,4(r2)
   16874:	0005883a 	mov	r2,zero
   16878:	21400015 	stw	r5,0(r4)
   1687c:	dfc00517 	ldw	ra,20(sp)
   16880:	dc400417 	ldw	r17,16(sp)
   16884:	dc000317 	ldw	r16,12(sp)
   16888:	dec00604 	addi	sp,sp,24
   1688c:	f800283a 	ret
   16890:	02400044 	movi	r9,1
   16894:	12806217 	ldw	r10,392(r2)
   16898:	48d2983a 	sll	r9,r9,r3
   1689c:	19000804 	addi	r4,r3,32
   168a0:	18d1883a 	add	r8,r3,r3
   168a4:	2109883a 	add	r4,r4,r4
   168a8:	4211883a 	add	r8,r8,r8
   168ac:	2109883a 	add	r4,r4,r4
   168b0:	1109883a 	add	r4,r2,r4
   168b4:	1211883a 	add	r8,r2,r8
   168b8:	5254b03a 	or	r10,r10,r9
   168bc:	21c02215 	stw	r7,136(r4)
   168c0:	41802215 	stw	r6,136(r8)
   168c4:	12806215 	stw	r10,392(r2)
   168c8:	01000084 	movi	r4,2
   168cc:	893fe31e 	bne	r17,r4,1685c <__register_exitproc+0x9c>
   168d0:	11006317 	ldw	r4,396(r2)
   168d4:	2252b03a 	or	r9,r4,r9
   168d8:	12406315 	stw	r9,396(r2)
   168dc:	003fdf06 	br	1685c <__register_exitproc+0x9c>
   168e0:	008000b4 	movhi	r2,2
   168e4:	10ac9904 	addi	r2,r2,-19868
   168e8:	80805215 	stw	r2,328(r16)
   168ec:	003fbe06 	br	167e8 <__register_exitproc+0x28>

000168f0 <__call_exitprocs>:
   168f0:	008000b4 	movhi	r2,2
   168f4:	10a37d04 	addi	r2,r2,-29196
   168f8:	10800017 	ldw	r2,0(r2)
   168fc:	defff304 	addi	sp,sp,-52
   16900:	df000b15 	stw	fp,44(sp)
   16904:	d8800015 	stw	r2,0(sp)
   16908:	10805204 	addi	r2,r2,328
   1690c:	dd400815 	stw	r21,32(sp)
   16910:	dfc00c15 	stw	ra,48(sp)
   16914:	ddc00a15 	stw	r23,40(sp)
   16918:	dd800915 	stw	r22,36(sp)
   1691c:	dd000715 	stw	r20,28(sp)
   16920:	dcc00615 	stw	r19,24(sp)
   16924:	dc800515 	stw	r18,20(sp)
   16928:	dc400415 	stw	r17,16(sp)
   1692c:	dc000315 	stw	r16,12(sp)
   16930:	d9000115 	stw	r4,4(sp)
   16934:	2839883a 	mov	fp,r5
   16938:	d8800215 	stw	r2,8(sp)
   1693c:	057fffc4 	movi	r21,-1
   16940:	d8800017 	ldw	r2,0(sp)
   16944:	ddc00217 	ldw	r23,8(sp)
   16948:	14805217 	ldw	r18,328(r2)
   1694c:	90001726 	beq	r18,zero,169ac <__call_exitprocs+0xbc>
   16950:	94400117 	ldw	r17,4(r18)
   16954:	8c3fffc4 	addi	r16,r17,-1
   16958:	80001116 	blt	r16,zero,169a0 <__call_exitprocs+0xb0>
   1695c:	8c400044 	addi	r17,r17,1
   16960:	8427883a 	add	r19,r16,r16
   16964:	8c63883a 	add	r17,r17,r17
   16968:	95802204 	addi	r22,r18,136
   1696c:	9ce7883a 	add	r19,r19,r19
   16970:	8c63883a 	add	r17,r17,r17
   16974:	b4e7883a 	add	r19,r22,r19
   16978:	9463883a 	add	r17,r18,r17
   1697c:	e0001726 	beq	fp,zero,169dc <__call_exitprocs+0xec>
   16980:	8c87c83a 	sub	r3,r17,r18
   16984:	b0c7883a 	add	r3,r22,r3
   16988:	18c01e17 	ldw	r3,120(r3)
   1698c:	1f001326 	beq	r3,fp,169dc <__call_exitprocs+0xec>
   16990:	843fffc4 	addi	r16,r16,-1
   16994:	9cffff04 	addi	r19,r19,-4
   16998:	8c7fff04 	addi	r17,r17,-4
   1699c:	857ff71e 	bne	r16,r21,1697c <__call_exitprocs+0x8c>
   169a0:	00800034 	movhi	r2,0
   169a4:	10800004 	addi	r2,r2,0
   169a8:	10002a1e 	bne	r2,zero,16a54 <__call_exitprocs+0x164>
   169ac:	dfc00c17 	ldw	ra,48(sp)
   169b0:	df000b17 	ldw	fp,44(sp)
   169b4:	ddc00a17 	ldw	r23,40(sp)
   169b8:	dd800917 	ldw	r22,36(sp)
   169bc:	dd400817 	ldw	r21,32(sp)
   169c0:	dd000717 	ldw	r20,28(sp)
   169c4:	dcc00617 	ldw	r19,24(sp)
   169c8:	dc800517 	ldw	r18,20(sp)
   169cc:	dc400417 	ldw	r17,16(sp)
   169d0:	dc000317 	ldw	r16,12(sp)
   169d4:	dec00d04 	addi	sp,sp,52
   169d8:	f800283a 	ret
   169dc:	91000117 	ldw	r4,4(r18)
   169e0:	88c00017 	ldw	r3,0(r17)
   169e4:	213fffc4 	addi	r4,r4,-1
   169e8:	24001526 	beq	r4,r16,16a40 <__call_exitprocs+0x150>
   169ec:	88000015 	stw	zero,0(r17)
   169f0:	183fe726 	beq	r3,zero,16990 <__call_exitprocs+0xa0>
   169f4:	00800044 	movi	r2,1
   169f8:	1408983a 	sll	r4,r2,r16
   169fc:	91406217 	ldw	r5,392(r18)
   16a00:	95000117 	ldw	r20,4(r18)
   16a04:	214a703a 	and	r5,r4,r5
   16a08:	28000b26 	beq	r5,zero,16a38 <__call_exitprocs+0x148>
   16a0c:	91406317 	ldw	r5,396(r18)
   16a10:	2148703a 	and	r4,r4,r5
   16a14:	20000c1e 	bne	r4,zero,16a48 <__call_exitprocs+0x158>
   16a18:	99400017 	ldw	r5,0(r19)
   16a1c:	d9000117 	ldw	r4,4(sp)
   16a20:	183ee83a 	callr	r3
   16a24:	90c00117 	ldw	r3,4(r18)
   16a28:	1d3fc51e 	bne	r3,r20,16940 <__call_exitprocs+0x50>
   16a2c:	b8c00017 	ldw	r3,0(r23)
   16a30:	1cbfd726 	beq	r3,r18,16990 <__call_exitprocs+0xa0>
   16a34:	003fc206 	br	16940 <__call_exitprocs+0x50>
   16a38:	183ee83a 	callr	r3
   16a3c:	003ff906 	br	16a24 <__call_exitprocs+0x134>
   16a40:	94000115 	stw	r16,4(r18)
   16a44:	003fea06 	br	169f0 <__call_exitprocs+0x100>
   16a48:	99000017 	ldw	r4,0(r19)
   16a4c:	183ee83a 	callr	r3
   16a50:	003ff406 	br	16a24 <__call_exitprocs+0x134>
   16a54:	90c00117 	ldw	r3,4(r18)
   16a58:	1800071e 	bne	r3,zero,16a78 <__call_exitprocs+0x188>
   16a5c:	90c00017 	ldw	r3,0(r18)
   16a60:	18000926 	beq	r3,zero,16a88 <__call_exitprocs+0x198>
   16a64:	9009883a 	mov	r4,r18
   16a68:	b8c00015 	stw	r3,0(r23)
   16a6c:	00000000 	call	0 <__alt_mem_onchip_mem_1e-0x10000>
   16a70:	bc800017 	ldw	r18,0(r23)
   16a74:	003fb506 	br	1694c <__call_exitprocs+0x5c>
   16a78:	90c00017 	ldw	r3,0(r18)
   16a7c:	902f883a 	mov	r23,r18
   16a80:	1825883a 	mov	r18,r3
   16a84:	003fb106 	br	1694c <__call_exitprocs+0x5c>
   16a88:	0007883a 	mov	r3,zero
   16a8c:	003ffb06 	br	16a7c <__call_exitprocs+0x18c>

00016a90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16a90:	defffc04 	addi	sp,sp,-16
   16a94:	df000315 	stw	fp,12(sp)
   16a98:	df000304 	addi	fp,sp,12
   16a9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16aa0:	0001883a 	nop
   16aa4:	e0bfff17 	ldw	r2,-4(fp)
   16aa8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   16aac:	e0bffd17 	ldw	r2,-12(fp)
   16ab0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	10000226 	beq	r2,zero,16ac4 <_exit+0x34>
    ALT_SIM_FAIL();
   16abc:	002af070 	cmpltui	zero,zero,43969
   16ac0:	00000106 	br	16ac8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   16ac4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   16ac8:	003fff06 	br	16ac8 <_exit+0x38>


1b.elf:     file format elf32-littlenios2
1b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005fe8 memsz 0x00005fe8 flags r-x
    LOAD off    0x00007008 vaddr 0x00016008 paddr 0x00017ac8 align 2**12
         filesz 0x00001ac0 memsz 0x00001ac0 flags rw-
    LOAD off    0x00009588 vaddr 0x00019588 paddr 0x00019588 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005dd4  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  00015f8c  00015f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac0  00016008  00017ac8  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  00019588  00019588  00009588  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008ac8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009d0  00000000  00000000  00008af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00018263  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005e58  00000000  00000000  00021723  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006f5e  00000000  00000000  0002757b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000133c  00000000  00000000  0002e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000251d  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005db3  00000000  00000000  00031d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00037ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003a8eb  2**0
                  CONTENTS, READONLY
 17 .cpu          00000006  00000000  00000000  0003a8ee  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003a8f4  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003a8f5  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003a8f6  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003a8fa  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003a8fe  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000c  00000000  00000000  0003a902  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000c  00000000  00000000  0003a90e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000c  00000000  00000000  0003a91a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0003a926  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  0003a92f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001c11da  00000000  00000000  0003a94b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00015f8c l    d  .rodata	00000000 .rodata
00016008 l    d  .rwdata	00000000 .rwdata
00019588 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1b_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010654 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016080 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000122c0 l     F .text	00000008 __fp_lock
000122c8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000132c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000133e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013510 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013604 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000136f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000138cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017ab8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013b40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013c80 l     F .text	00000038 alt_dev_reg
00016a30 l     O .rwdata	00001060 jtag_uart_1b
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014470 l     F .text	00000204 altera_avalon_jtag_uart_irq
00014674 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014cb0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014f08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015394 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000154ec l     F .text	00000050 alt_get_errno
0001553c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00013164 g     F .text	00000064 _isatty_r
00013814 g     F .text	00000078 alt_main
00010784 g     F .text	00000084 _puts_r
000195e0 g     O .bss	00000100 alt_irq
0001605c g     O .rwdata	0000000c q1c
000131c8 g     F .text	0000006c _lseek_r
00013fdc g     F .text	00000058 altera_avalon_fifo_write_almostfull
00017ac8 g       *ABS*	00000000 __flash_rwdata_start
00019870 g       *ABS*	00000000 __alt_heap_start
00012e78 g     F .text	0000005c __sseek
00012364 g     F .text	0000010c __sinit
000122dc g     F .text	00000078 __sfmoreglue
00016038 g     O .rwdata	0000000c q5
000138ac g     F .text	00000020 __malloc_unlock
00011748 g     F .text	0000018c memmove
00013d5c g     F .text	00000098 altera_avalon_fifo_init
00012354 g     F .text	00000010 _cleanup
0001408c g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00014224 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
000130fc g     F .text	00000068 _fstat_r
0001959c g     O .bss	00000004 errno
000195a4 g     O .bss	00000004 alt_argv
0001fa90 g       *ABS*	00000000 _gp
00013f28 g     F .text	0000005c altera_avalon_fifo_clear_event
000168b0 g     O .rwdata	00000180 alt_fd_list
00015940 g     F .text	00000090 alt_find_dev
00011608 g     F .text	00000140 memcpy
000122d0 g     F .text	0000000c _cleanup_r
00015474 g     F .text	00000078 alt_io_redirect
00015f8c g       *ABS*	00000000 __DTOR_END__
00010808 g     F .text	00000014 puts
00016014 g     O .rwdata	0000000c q2
00014874 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010774 g     F .text	00000008 __udivsi3
00013560 g     F .text	000000a4 isatty
00019598 g     O .bss	00000004 __malloc_top_pad
000108a8 g     F .text	000004e4 __sfvwrite_r
00011ed0 g     F .text	00000064 _sbrk_r
00013234 g     F .text	0000006c _read_r
00017ab0 g     O .rwdata	00000004 alt_max_fd
00012fac g     F .text	0000013c _fclose_r
00012290 g     F .text	00000030 fflush
00019594 g     O .bss	00000004 __malloc_max_sbrked_mem
00013740 g     F .text	000000d4 lseek
00017a90 g     O .rwdata	00000004 _global_impure_ptr
000118d4 g     F .text	000005fc _realloc_r
00019870 g       *ABS*	00000000 __bss_end
000152a4 g     F .text	000000f0 alt_iic_isr_register
0001581c g     F .text	00000104 alt_tick
0001257c g     F .text	00000018 __fp_lock_all
00015258 g     F .text	0000004c alt_ic_irq_enabled
00015784 g     F .text	00000098 alt_alarm_stop
000195ac g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00016888 g     O .rwdata	00000028 alt_dev_null
00014eec g     F .text	0000001c alt_dcache_flush_all
00013f84 g     F .text	00000058 altera_avalon_fifo_write_ienable
00017ac8 g       *ABS*	00000000 __ram_rwdata_end
00013e98 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00017aa8 g     O .rwdata	00000008 alt_dev_list
00013b90 g     F .text	000000f0 write
00016008 g       *ABS*	00000000 __ram_rodata_end
00013460 g     F .text	000000b0 fstat
0001958c g     O .bss	00000004 INIT_USAGE_DEQ
0001043c g     F .text	0000003c RECV2
0001077c g     F .text	00000008 __umodsi3
00019870 g       *ABS*	00000000 end
000143b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00013ec4 g     F .text	0000003c altera_avalon_fifo_read_event
00015f8c g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014d24 g     F .text	00000088 alt_avalon_timer_sc_init
00014a8c g     F .text	00000224 altera_avalon_jtag_uart_write
0001256c g     F .text	00000004 __sfp_lock_acquire
00014150 g     F .text	0000004c altera_avalon_fifo_read_fifo
00011510 g     F .text	000000f8 memchr
000126e8 g     F .text	000002d0 _free_r
00015db0 g     F .text	000001a0 __call_exitprocs
00017a98 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
000195b0 g     O .bss	00000004 _alt_tick_rate
000102f4 g     F .text	00000088 enqueueINT32
000195b4 g     O .bss	00000004 _alt_nticks
0001391c g     F .text	000000f4 read
00013cec g     F .text	00000070 alt_sys_init
00015c80 g     F .text	00000130 __register_exitproc
00016068 g     O .rwdata	0000000c q1d
00016020 g     O .rwdata	0000000c q3
00014718 g     F .text	00000068 altera_avalon_jtag_uart_close
000132a0 g     F .text	00000028 __mulsi3
00016008 g       *ABS*	00000000 __ram_rwdata_start
00015f8c g       *ABS*	00000000 __ram_rodata_start
000195b8 g     O .bss	00000028 __malloc_current_mallinfo
00016008 g     O .rwdata	0000000c q1
0001424c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015ae4 g     F .text	000000d4 alt_get_fd
00012f48 g     F .text	00000064 _close_r
00015c04 g     F .text	0000007c memcmp
0001430c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019870 g       *ABS*	00000000 __alt_stack_base
0001435c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00011f34 g     F .text	00000174 __swsetup_r
00013df4 g     F .text	0000003c altera_avalon_fifo_read_status
00012470 g     F .text	000000fc __sfp
00016480 g     O .rwdata	00000408 __malloc_av_
00012578 g     F .text	00000004 __sinit_lock_release
00012d9c g     F .text	00000054 __sread
000141f8 g     F .text	0000002c altera_avalon_fifo_read_other_info
000104f8 g     F .text	0000015c printInteger
000159d0 g     F .text	00000114 alt_find_file
00014f58 g     F .text	000000a0 alt_dev_llist_insert
0001388c g     F .text	00000020 __malloc_lock
00013a90 g     F .text	000000b0 sbrk
000120a8 g     F .text	000001e8 _fflush_r
00019588 g       *ABS*	00000000 __bss_start
00012cc0 g     F .text	000000dc memset
000102c8 g     F .text	0000002c main
000195a8 g     O .bss	00000004 alt_envp
00019590 g     O .bss	00000004 __malloc_max_total_mem
000142ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00013f00 g     F .text	00000028 altera_avalon_fifo_read_level
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem_1b
00012ed4 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000101f4 g     F .text	000000d4 levelshift
000130e8 g     F .text	00000014 fclose
000196e0 g     O .bss	00000190 _atexit0
00010d8c g     F .text	00000784 _malloc_r
00010400 g     F .text	0000003c RECV1
00017ab4 g     O .rwdata	00000004 alt_errno
00016050 g     O .rwdata	0000000c q1b
000129b8 g     F .text	000000a8 _fwalk
000106c8 g     F .text	00000050 __divsi3
000125ac g     F .text	0000013c _malloc_trim_r
00015f8c g       *ABS*	00000000 __CTOR_END__
00015f8c g       *ABS*	00000000 __flash_rodata_start
00015f8c g       *ABS*	00000000 __DTOR_LIST__
00013cb8 g     F .text	00000034 alt_irq_init
00013a10 g     F .text	00000080 alt_release_fd
00015bb8 g     F .text	00000014 atexit
00012edc g     F .text	0000006c _write_r
00016044 g     O .rwdata	0000000c q6
000104b4 g     F .text	00000044 SEND
00019588 g     O .bss	00000004 INIT_USAGE_ENQ
00017a94 g     O .rwdata	00000004 _impure_ptr
000195a0 g     O .bss	00000004 alt_argc
00015054 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012594 g     F .text	00000018 __fp_unlock_all
00016074 g     O .rwdata	0000000c q1e
00017aa0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001419c g     F .text	0000005c altera_avalon_fifo_write_other_info
000150cc g     F .text	00000050 alt_ic_isr_register
00017ac8 g       *ABS*	00000000 _edata
00019870 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
00014780 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000151b8 g     F .text	000000a0 alt_ic_irq_disable
00012df0 g     F .text	00000088 __swrite
00017a9c g     O .rwdata	00000004 __malloc_trim_threshold
00015920 g     F .text	00000020 altera_nios2_qsys_irq_init
00015bcc g     F .text	00000038 exit
00012a60 g     F .text	000000b8 _fwalk_reent
00010718 g     F .text	0000005c __modsi3
00013e30 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012570 g     F .text	00000004 __sfp_lock_release
00015f50 g     F .text	0000003c _exit
00014dac g     F .text	00000140 alt_alarm_start
00013e6c g     F .text	0000002c altera_avalon_fifo_read_almostfull
00012b18 g     F .text	000001a8 __smakebuf_r
0001602c g     O .rwdata	0000000c q4
0001081c g     F .text	0000008c strlen
0001562c g     F .text	00000158 open
000140e4 g     F .text	0000006c altera_avalon_read_fifo
0001037c g     F .text	00000084 dequeueINT32
000150b0 g     F .text	0000001c alt_icache_flush_all
00017abc g     O .rwdata	00000004 alt_priority_mask
0001511c g     F .text	0000009c alt_ic_irq_enable
00014034 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00017ac0 g     O .rwdata	00000008 alt_alarm_list
00014ff8 g     F .text	0000005c _do_ctors
00013318 g     F .text	000000cc close
00013670 g     F .text	00000080 alt_load
00010478 g     F .text	0000003c RECV3
00000000  w      *UND*	00000000 free
00012574 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e57804 	addi	r3,r3,-27168
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	21257804 	addi	r4,r4,-27168
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c4:	d6bea414 	ori	gp,gp,64144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a56214 	ori	r2,r2,38280

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e61c14 	ori	r3,r3,39024

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00136700 	call	13670 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00138140 	call	13814 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <levelshift>:

// TODO: Currently, this function is complete. But will have to change for hardware implementation.
// TODO: Remove hard limit -> back pressure
/* Level shifting to get 8 bit SIGNED values for the data  */
void levelshift(void)
{
   101f4:	defffd04 	addi	sp,sp,-12
   101f8:	dfc00215 	stw	ra,8(sp)
   101fc:	df000115 	stw	fp,4(sp)
   10200:	df000104 	addi	fp,sp,4

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	// should probably consider queue back pressure
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		for (j = 0; j < 64; j++)
   10204:	e03fff0d 	sth	zero,-4(fp)
   10208:	00000b06 	br	10238 <levelshift+0x44>
		{
			i = (INT16)RECV1();
   1020c:	00104000 	call	10400 <RECV1>
   10210:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   10214:	e0bfff8b 	ldhu	r2,-2(fp)
   10218:	10bfe004 	addi	r2,r2,-128
   1021c:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   10220:	e0bfff8f 	ldh	r2,-2(fp)
   10224:	1009883a 	mov	r4,r2
   10228:	00104b40 	call	104b4 <SEND>

	// TODO: added temporaryCounter to limit the loop otherwise file will be too big,
	// should probably consider queue back pressure
//	for (int temporaryCounter = 0; temporaryCounter < 551; temporaryCounter++)
	{
		for (j = 0; j < 64; j++)
   1022c:	e0bfff0b 	ldhu	r2,-4(fp)
   10230:	10800044 	addi	r2,r2,1
   10234:	e0bfff0d 	sth	r2,-4(fp)
   10238:	e0bfff0f 	ldh	r2,-4(fp)
   1023c:	10801010 	cmplti	r2,r2,64
   10240:	103ff21e 	bne	r2,zero,1020c <levelshift+0x18>
			i = (INT16)RECV1();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   10244:	e03fff0d 	sth	zero,-4(fp)
   10248:	00000b06 	br	10278 <levelshift+0x84>
		{
			i = (INT16)RECV2();
   1024c:	001043c0 	call	1043c <RECV2>
   10250:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   10254:	e0bfff8b 	ldhu	r2,-2(fp)
   10258:	10bfe004 	addi	r2,r2,-128
   1025c:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   10260:	e0bfff8f 	ldh	r2,-2(fp)
   10264:	1009883a 	mov	r4,r2
   10268:	00104b40 	call	104b4 <SEND>
			i = (INT16)RECV1();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   1026c:	e0bfff0b 	ldhu	r2,-4(fp)
   10270:	10800044 	addi	r2,r2,1
   10274:	e0bfff0d 	sth	r2,-4(fp)
   10278:	e0bfff0f 	ldh	r2,-4(fp)
   1027c:	10801010 	cmplti	r2,r2,64
   10280:	103ff21e 	bne	r2,zero,1024c <levelshift+0x58>
			i = (INT16)RECV2();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   10284:	e03fff0d 	sth	zero,-4(fp)
   10288:	00000b06 	br	102b8 <levelshift+0xc4>
		{
			i = (INT16)RECV3();
   1028c:	00104780 	call	10478 <RECV3>
   10290:	e0bfff8d 	sth	r2,-2(fp)
			i -= 128;
   10294:	e0bfff8b 	ldhu	r2,-2(fp)
   10298:	10bfe004 	addi	r2,r2,-128
   1029c:	e0bfff8d 	sth	r2,-2(fp)
			SEND(i);
   102a0:	e0bfff8f 	ldh	r2,-2(fp)
   102a4:	1009883a 	mov	r4,r2
   102a8:	00104b40 	call	104b4 <SEND>
			i = (INT16)RECV2();
			i -= 128;
			SEND(i);
		}

		for (j = 0; j < 64; j++)
   102ac:	e0bfff0b 	ldhu	r2,-4(fp)
   102b0:	10800044 	addi	r2,r2,1
   102b4:	e0bfff0d 	sth	r2,-4(fp)
   102b8:	e0bfff0f 	ldh	r2,-4(fp)
   102bc:	10801010 	cmplti	r2,r2,64
   102c0:	103ff21e 	bne	r2,zero,1028c <levelshift+0x98>
		{
			i = (INT16)RECV3();
			i -= 128;
			SEND(i);
		}
	}
   102c4:	003fcf06 	br	10204 <levelshift+0x10>

000102c8 <main>:
	// TODO: Do the actual implementation.

}

int main(void)
{
   102c8:	defffe04 	addi	sp,sp,-8
   102cc:	dfc00115 	stw	ra,4(sp)
   102d0:	df000015 	stw	fp,0(sp)
   102d4:	d839883a 	mov	fp,sp
	levelshift();
   102d8:	00101f40 	call	101f4 <levelshift>

	return 0;
   102dc:	0005883a 	mov	r2,zero
}
   102e0:	e037883a 	mov	sp,fp
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	df000017 	ldw	fp,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
   102f4:	defffa04 	addi	sp,sp,-24
   102f8:	dfc00515 	stw	ra,20(sp)
   102fc:	df000415 	stw	fp,16(sp)
   10300:	df000404 	addi	fp,sp,16
   10304:	e13ffc15 	stw	r4,-16(fp)
   10308:	e17ffd15 	stw	r5,-12(fp)
   1030c:	e1bffe15 	stw	r6,-8(fp)
   10310:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
   10314:	0001883a 	nop
   10318:	e0bffe17 	ldw	r2,-8(fp)
   1031c:	1009883a 	mov	r4,r2
   10320:	01400044 	movi	r5,1
   10324:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   10328:	103ffb1e 	bne	r2,zero,10318 <enqueueINT32+0x24>
	{}

    if (INIT_USAGE_ENQ == 0){
   1032c:	d0a6be17 	ldw	r2,-25864(gp)
   10330:	1000051e 	bne	r2,zero,10348 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
   10334:	00800044 	movi	r2,1
   10338:	d0a6be15 	stw	r2,-25864(gp)
        printf("First time using enqueueINT32\n");
   1033c:	01000074 	movhi	r4,1
   10340:	2117e304 	addi	r4,r4,24460
   10344:	00108080 	call	10808 <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
   10348:	e0bffc17 	ldw	r2,-16(fp)
   1034c:	1009883a 	mov	r4,r2
   10350:	e0bffe17 	ldw	r2,-8(fp)
   10354:	1007883a 	mov	r3,r2
   10358:	e0bfff17 	ldw	r2,-4(fp)
   1035c:	180b883a 	mov	r5,r3
   10360:	100d883a 	mov	r6,r2
   10364:	001408c0 	call	1408c <altera_avalon_fifo_write_fifo>
}
   10368:	e037883a 	mov	sp,fp
   1036c:	dfc00117 	ldw	ra,4(sp)
   10370:	df000017 	ldw	fp,0(sp)
   10374:	dec00204 	addi	sp,sp,8
   10378:	f800283a 	ret

0001037c <dequeueINT32>:


int dequeueINT32(Queue queue)
{
   1037c:	defffa04 	addi	sp,sp,-24
   10380:	dfc00515 	stw	ra,20(sp)
   10384:	df000415 	stw	fp,16(sp)
   10388:	df000404 	addi	fp,sp,16
   1038c:	e13ffd15 	stw	r4,-12(fp)
   10390:	e17ffe15 	stw	r5,-8(fp)
   10394:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
   10398:	0001883a 	nop
   1039c:	e0bfff17 	ldw	r2,-4(fp)
   103a0:	1009883a 	mov	r4,r2
   103a4:	01400084 	movi	r5,2
   103a8:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   103ac:	103ffb1e 	bne	r2,zero,1039c <dequeueINT32+0x20>
	{}

    if (INIT_USAGE_DEQ == 0){
   103b0:	d0a6bf17 	ldw	r2,-25860(gp)
   103b4:	1000051e 	bne	r2,zero,103cc <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
   103b8:	00800044 	movi	r2,1
   103bc:	d0a6bf15 	stw	r2,-25860(gp)
        printf("First time using dequeueINT32\n");
   103c0:	01000074 	movhi	r4,1
   103c4:	2117eb04 	addi	r4,r4,24492
   103c8:	00108080 	call	10808 <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
   103cc:	e0bffe17 	ldw	r2,-8(fp)
   103d0:	1007883a 	mov	r3,r2
   103d4:	e0bfff17 	ldw	r2,-4(fp)
   103d8:	1809883a 	mov	r4,r3
   103dc:	100b883a 	mov	r5,r2
   103e0:	00141500 	call	14150 <altera_avalon_fifo_read_fifo>
   103e4:	e0bffc15 	stw	r2,-16(fp)

	return data;
   103e8:	e0bffc17 	ldw	r2,-16(fp)
}
   103ec:	e037883a 	mov	sp,fp
   103f0:	dfc00117 	ldw	ra,4(sp)
   103f4:	df000017 	ldw	fp,0(sp)
   103f8:	dec00204 	addi	sp,sp,8
   103fc:	f800283a 	ret

00010400 <RECV1>:
#include "q_mem_obj_def.h"

void printInteger(int n);

int RECV1()
{
   10400:	defffe04 	addi	sp,sp,-8
   10404:	dfc00115 	stw	ra,4(sp)
   10408:	df000015 	stw	fp,0(sp)
   1040c:	d839883a 	mov	fp,sp

    return dequeueINT32(q1);
   10410:	00800074 	movhi	r2,1
   10414:	10980204 	addi	r2,r2,24584
   10418:	11000017 	ldw	r4,0(r2)
   1041c:	11400117 	ldw	r5,4(r2)
   10420:	11800217 	ldw	r6,8(r2)
   10424:	001037c0 	call	1037c <dequeueINT32>
}
   10428:	e037883a 	mov	sp,fp
   1042c:	dfc00117 	ldw	ra,4(sp)
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00204 	addi	sp,sp,8
   10438:	f800283a 	ret

0001043c <RECV2>:

int RECV2()
{
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	dfc00115 	stw	ra,4(sp)
   10444:	df000015 	stw	fp,0(sp)
   10448:	d839883a 	mov	fp,sp

    return dequeueINT32(q2);
   1044c:	00800074 	movhi	r2,1
   10450:	10980504 	addi	r2,r2,24596
   10454:	11000017 	ldw	r4,0(r2)
   10458:	11400117 	ldw	r5,4(r2)
   1045c:	11800217 	ldw	r6,8(r2)
   10460:	001037c0 	call	1037c <dequeueINT32>
}
   10464:	e037883a 	mov	sp,fp
   10468:	dfc00117 	ldw	ra,4(sp)
   1046c:	df000017 	ldw	fp,0(sp)
   10470:	dec00204 	addi	sp,sp,8
   10474:	f800283a 	ret

00010478 <RECV3>:

int RECV3()
{
   10478:	defffe04 	addi	sp,sp,-8
   1047c:	dfc00115 	stw	ra,4(sp)
   10480:	df000015 	stw	fp,0(sp)
   10484:	d839883a 	mov	fp,sp

    return dequeueINT32(q3);
   10488:	00800074 	movhi	r2,1
   1048c:	10980804 	addi	r2,r2,24608
   10490:	11000017 	ldw	r4,0(r2)
   10494:	11400117 	ldw	r5,4(r2)
   10498:	11800217 	ldw	r6,8(r2)
   1049c:	001037c0 	call	1037c <dequeueINT32>
}
   104a0:	e037883a 	mov	sp,fp
   104a4:	dfc00117 	ldw	ra,4(sp)
   104a8:	df000017 	ldw	fp,0(sp)
   104ac:	dec00204 	addi	sp,sp,8
   104b0:	f800283a 	ret

000104b4 <SEND>:

void SEND(int data)
{
   104b4:	defffd04 	addi	sp,sp,-12
   104b8:	dfc00215 	stw	ra,8(sp)
   104bc:	df000115 	stw	fp,4(sp)
   104c0:	df000104 	addi	fp,sp,4
   104c4:	e13fff15 	stw	r4,-4(fp)
//	printInteger(data); //DEBUG
    enqueueINT32(q1b, data);
   104c8:	00800074 	movhi	r2,1
   104cc:	10981404 	addi	r2,r2,24656
   104d0:	11000017 	ldw	r4,0(r2)
   104d4:	11400117 	ldw	r5,4(r2)
   104d8:	11800217 	ldw	r6,8(r2)
   104dc:	e1ffff17 	ldw	r7,-4(fp)
   104e0:	00102f40 	call	102f4 <enqueueINT32>
}
   104e4:	e037883a 	mov	sp,fp
   104e8:	dfc00117 	ldw	ra,4(sp)
   104ec:	df000017 	ldw	fp,0(sp)
   104f0:	dec00204 	addi	sp,sp,8
   104f4:	f800283a 	ret

000104f8 <printInteger>:

void printInteger(int n) {
   104f8:	defff304 	addi	sp,sp,-52
   104fc:	dfc00c15 	stw	ra,48(sp)
   10500:	df000b15 	stw	fp,44(sp)
   10504:	df000b04 	addi	fp,sp,44
   10508:	e13fff15 	stw	r4,-4(fp)
    char buffer[20];
    int i = 0, sign;
   1050c:	e03ff515 	stw	zero,-44(fp)

    if ((sign = n) < 0)  // Record sign
   10510:	e0bfff17 	ldw	r2,-4(fp)
   10514:	e0bff815 	stw	r2,-32(fp)
   10518:	e0bff817 	ldw	r2,-32(fp)
   1051c:	1000030e 	bge	r2,zero,1052c <printInteger+0x34>
        n = -n;          // Make n positive
   10520:	e0bfff17 	ldw	r2,-4(fp)
   10524:	0085c83a 	sub	r2,zero,r2
   10528:	e0bfff15 	stw	r2,-4(fp)

    do {  // Generate digits in reverse order
        buffer[i++] = n % 10 + '0';  // Get next digit
   1052c:	e0bfff17 	ldw	r2,-4(fp)
   10530:	1009883a 	mov	r4,r2
   10534:	01400284 	movi	r5,10
   10538:	00107180 	call	10718 <__modsi3>
   1053c:	10800c04 	addi	r2,r2,48
   10540:	1007883a 	mov	r3,r2
   10544:	e13ff944 	addi	r4,fp,-27
   10548:	e0bff517 	ldw	r2,-44(fp)
   1054c:	2085883a 	add	r2,r4,r2
   10550:	10c00005 	stb	r3,0(r2)
   10554:	e0bff517 	ldw	r2,-44(fp)
   10558:	10800044 	addi	r2,r2,1
   1055c:	e0bff515 	stw	r2,-44(fp)
    } while ((n /= 10) > 0);         // Delete it
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	1009883a 	mov	r4,r2
   10568:	01400284 	movi	r5,10
   1056c:	00106c80 	call	106c8 <__divsi3>
   10570:	e0bfff15 	stw	r2,-4(fp)
   10574:	e0bfff17 	ldw	r2,-4(fp)
   10578:	00bfec16 	blt	zero,r2,1052c <printInteger+0x34>

    if (sign < 0)
   1057c:	e0bff817 	ldw	r2,-32(fp)
   10580:	1000080e 	bge	r2,zero,105a4 <printInteger+0xac>
        buffer[i++] = '-';
   10584:	e0fff944 	addi	r3,fp,-27
   10588:	e0bff517 	ldw	r2,-44(fp)
   1058c:	1885883a 	add	r2,r3,r2
   10590:	00c00b44 	movi	r3,45
   10594:	10c00005 	stb	r3,0(r2)
   10598:	e0bff517 	ldw	r2,-44(fp)
   1059c:	10800044 	addi	r2,r2,1
   105a0:	e0bff515 	stw	r2,-44(fp)

    buffer[i] = '\0';
   105a4:	e0fff944 	addi	r3,fp,-27
   105a8:	e0bff517 	ldw	r2,-44(fp)
   105ac:	1885883a 	add	r2,r3,r2
   105b0:	10000005 	stb	zero,0(r2)

    // Reverse the string
    int start = 0, end = i - 1;
   105b4:	e03ff615 	stw	zero,-40(fp)
   105b8:	e0bff517 	ldw	r2,-44(fp)
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	e0bff715 	stw	r2,-36(fp)
    char temp;
    while (start < end) {
   105c4:	00001806 	br	10628 <printInteger+0x130>
        temp = buffer[start];
   105c8:	e0fff944 	addi	r3,fp,-27
   105cc:	e0bff617 	ldw	r2,-40(fp)
   105d0:	1885883a 	add	r2,r3,r2
   105d4:	10800003 	ldbu	r2,0(r2)
   105d8:	e0bff905 	stb	r2,-28(fp)
        buffer[start] = buffer[end];
   105dc:	e0fff944 	addi	r3,fp,-27
   105e0:	e0bff717 	ldw	r2,-36(fp)
   105e4:	1885883a 	add	r2,r3,r2
   105e8:	10c00003 	ldbu	r3,0(r2)
   105ec:	e13ff944 	addi	r4,fp,-27
   105f0:	e0bff617 	ldw	r2,-40(fp)
   105f4:	2085883a 	add	r2,r4,r2
   105f8:	10c00005 	stb	r3,0(r2)
        buffer[end] = temp;
   105fc:	e0fff944 	addi	r3,fp,-27
   10600:	e0bff717 	ldw	r2,-36(fp)
   10604:	1885883a 	add	r2,r3,r2
   10608:	e0fff903 	ldbu	r3,-28(fp)
   1060c:	10c00005 	stb	r3,0(r2)
        start++;
   10610:	e0bff617 	ldw	r2,-40(fp)
   10614:	10800044 	addi	r2,r2,1
   10618:	e0bff615 	stw	r2,-40(fp)
        end--;
   1061c:	e0bff717 	ldw	r2,-36(fp)
   10620:	10bfffc4 	addi	r2,r2,-1
   10624:	e0bff715 	stw	r2,-36(fp)
    buffer[i] = '\0';

    // Reverse the string
    int start = 0, end = i - 1;
    char temp;
    while (start < end) {
   10628:	e0fff617 	ldw	r3,-40(fp)
   1062c:	e0bff717 	ldw	r2,-36(fp)
   10630:	18bfe516 	blt	r3,r2,105c8 <printInteger+0xd0>
        buffer[end] = temp;
        start++;
        end--;
    }

    puts(buffer);  // Print string to stdout followed by a newline
   10634:	e0bff944 	addi	r2,fp,-27
   10638:	1009883a 	mov	r4,r2
   1063c:	00108080 	call	10808 <puts>
}
   10640:	e037883a 	mov	sp,fp
   10644:	dfc00117 	ldw	ra,4(sp)
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00204 	addi	sp,sp,8
   10650:	f800283a 	ret

00010654 <udivmodsi4>:
   10654:	2005883a 	mov	r2,r4
   10658:	2900182e 	bgeu	r5,r4,106bc <udivmodsi4+0x68>
   1065c:	28001716 	blt	r5,zero,106bc <udivmodsi4+0x68>
   10660:	01000804 	movi	r4,32
   10664:	00c00044 	movi	r3,1
   10668:	00000206 	br	10674 <udivmodsi4+0x20>
   1066c:	20001126 	beq	r4,zero,106b4 <udivmodsi4+0x60>
   10670:	28000516 	blt	r5,zero,10688 <udivmodsi4+0x34>
   10674:	294b883a 	add	r5,r5,r5
   10678:	213fffc4 	addi	r4,r4,-1
   1067c:	18c7883a 	add	r3,r3,r3
   10680:	28bffa36 	bltu	r5,r2,1066c <udivmodsi4+0x18>
   10684:	18000b26 	beq	r3,zero,106b4 <udivmodsi4+0x60>
   10688:	0009883a 	mov	r4,zero
   1068c:	11400236 	bltu	r2,r5,10698 <udivmodsi4+0x44>
   10690:	1145c83a 	sub	r2,r2,r5
   10694:	20c8b03a 	or	r4,r4,r3
   10698:	1806d07a 	srli	r3,r3,1
   1069c:	280ad07a 	srli	r5,r5,1
   106a0:	183ffa1e 	bne	r3,zero,1068c <udivmodsi4+0x38>
   106a4:	3000021e 	bne	r6,zero,106b0 <udivmodsi4+0x5c>
   106a8:	2005883a 	mov	r2,r4
   106ac:	f800283a 	ret
   106b0:	f800283a 	ret
   106b4:	0009883a 	mov	r4,zero
   106b8:	003ffa06 	br	106a4 <udivmodsi4+0x50>
   106bc:	00c00044 	movi	r3,1
   106c0:	0009883a 	mov	r4,zero
   106c4:	003ff106 	br	1068c <udivmodsi4+0x38>

000106c8 <__divsi3>:
   106c8:	defffe04 	addi	sp,sp,-8
   106cc:	dfc00115 	stw	ra,4(sp)
   106d0:	dc000015 	stw	r16,0(sp)
   106d4:	20000a16 	blt	r4,zero,10700 <__divsi3+0x38>
   106d8:	0021883a 	mov	r16,zero
   106dc:	28000b16 	blt	r5,zero,1070c <__divsi3+0x44>
   106e0:	000d883a 	mov	r6,zero
   106e4:	00106540 	call	10654 <udivmodsi4>
   106e8:	80000126 	beq	r16,zero,106f0 <__divsi3+0x28>
   106ec:	0085c83a 	sub	r2,zero,r2
   106f0:	dfc00117 	ldw	ra,4(sp)
   106f4:	dc000017 	ldw	r16,0(sp)
   106f8:	dec00204 	addi	sp,sp,8
   106fc:	f800283a 	ret
   10700:	0109c83a 	sub	r4,zero,r4
   10704:	04000044 	movi	r16,1
   10708:	283ff50e 	bge	r5,zero,106e0 <__divsi3+0x18>
   1070c:	014bc83a 	sub	r5,zero,r5
   10710:	8400005c 	xori	r16,r16,1
   10714:	003ff206 	br	106e0 <__divsi3+0x18>

00010718 <__modsi3>:
   10718:	deffff04 	addi	sp,sp,-4
   1071c:	dfc00015 	stw	ra,0(sp)
   10720:	20000516 	blt	r4,zero,10738 <__modsi3+0x20>
   10724:	28000c16 	blt	r5,zero,10758 <__modsi3+0x40>
   10728:	01800044 	movi	r6,1
   1072c:	dfc00017 	ldw	ra,0(sp)
   10730:	dec00104 	addi	sp,sp,4
   10734:	00106541 	jmpi	10654 <udivmodsi4>
   10738:	0109c83a 	sub	r4,zero,r4
   1073c:	28000b16 	blt	r5,zero,1076c <__modsi3+0x54>
   10740:	01800044 	movi	r6,1
   10744:	00106540 	call	10654 <udivmodsi4>
   10748:	0085c83a 	sub	r2,zero,r2
   1074c:	dfc00017 	ldw	ra,0(sp)
   10750:	dec00104 	addi	sp,sp,4
   10754:	f800283a 	ret
   10758:	014bc83a 	sub	r5,zero,r5
   1075c:	01800044 	movi	r6,1
   10760:	dfc00017 	ldw	ra,0(sp)
   10764:	dec00104 	addi	sp,sp,4
   10768:	00106541 	jmpi	10654 <udivmodsi4>
   1076c:	014bc83a 	sub	r5,zero,r5
   10770:	003ff306 	br	10740 <__modsi3+0x28>

00010774 <__udivsi3>:
   10774:	000d883a 	mov	r6,zero
   10778:	00106541 	jmpi	10654 <udivmodsi4>

0001077c <__umodsi3>:
   1077c:	01800044 	movi	r6,1
   10780:	00106541 	jmpi	10654 <udivmodsi4>

00010784 <_puts_r>:
   10784:	defff604 	addi	sp,sp,-40
   10788:	dc400815 	stw	r17,32(sp)
   1078c:	2023883a 	mov	r17,r4
   10790:	2809883a 	mov	r4,r5
   10794:	dc000715 	stw	r16,28(sp)
   10798:	dfc00915 	stw	ra,36(sp)
   1079c:	2821883a 	mov	r16,r5
   107a0:	001081c0 	call	1081c <strlen>
   107a4:	10c00044 	addi	r3,r2,1
   107a8:	d8800115 	stw	r2,4(sp)
   107ac:	89400217 	ldw	r5,8(r17)
   107b0:	00800074 	movhi	r2,1
   107b4:	1097f304 	addi	r2,r2,24524
   107b8:	d8800215 	stw	r2,8(sp)
   107bc:	00800044 	movi	r2,1
   107c0:	d8800315 	stw	r2,12(sp)
   107c4:	8809883a 	mov	r4,r17
   107c8:	00800084 	movi	r2,2
   107cc:	d9800404 	addi	r6,sp,16
   107d0:	dc000015 	stw	r16,0(sp)
   107d4:	d8c00615 	stw	r3,24(sp)
   107d8:	dec00415 	stw	sp,16(sp)
   107dc:	d8800515 	stw	r2,20(sp)
   107e0:	00108a80 	call	108a8 <__sfvwrite_r>
   107e4:	1000061e 	bne	r2,zero,10800 <_puts_r+0x7c>
   107e8:	00800284 	movi	r2,10
   107ec:	dfc00917 	ldw	ra,36(sp)
   107f0:	dc400817 	ldw	r17,32(sp)
   107f4:	dc000717 	ldw	r16,28(sp)
   107f8:	dec00a04 	addi	sp,sp,40
   107fc:	f800283a 	ret
   10800:	00bfffc4 	movi	r2,-1
   10804:	003ff906 	br	107ec <_puts_r+0x68>

00010808 <puts>:
   10808:	00800074 	movhi	r2,1
   1080c:	109ea504 	addi	r2,r2,31380
   10810:	200b883a 	mov	r5,r4
   10814:	11000017 	ldw	r4,0(r2)
   10818:	00107841 	jmpi	10784 <_puts_r>

0001081c <strlen>:
   1081c:	208000cc 	andi	r2,r4,3
   10820:	10001f1e 	bne	r2,zero,108a0 <strlen+0x84>
   10824:	20800017 	ldw	r2,0(r4)
   10828:	01ffbff4 	movhi	r7,65279
   1082c:	39ffbfc4 	addi	r7,r7,-257
   10830:	01a02074 	movhi	r6,32897
   10834:	31a02004 	addi	r6,r6,-32640
   10838:	11c7883a 	add	r3,r2,r7
   1083c:	0084303a 	nor	r2,zero,r2
   10840:	1886703a 	and	r3,r3,r2
   10844:	1986703a 	and	r3,r3,r6
   10848:	2005883a 	mov	r2,r4
   1084c:	1800101e 	bne	r3,zero,10890 <strlen+0x74>
   10850:	10800104 	addi	r2,r2,4
   10854:	10c00017 	ldw	r3,0(r2)
   10858:	19cb883a 	add	r5,r3,r7
   1085c:	00c6303a 	nor	r3,zero,r3
   10860:	28c6703a 	and	r3,r5,r3
   10864:	1986703a 	and	r3,r3,r6
   10868:	1800091e 	bne	r3,zero,10890 <strlen+0x74>
   1086c:	10800104 	addi	r2,r2,4
   10870:	10c00017 	ldw	r3,0(r2)
   10874:	19cb883a 	add	r5,r3,r7
   10878:	00c6303a 	nor	r3,zero,r3
   1087c:	28c6703a 	and	r3,r5,r3
   10880:	1986703a 	and	r3,r3,r6
   10884:	183ff226 	beq	r3,zero,10850 <strlen+0x34>
   10888:	00000106 	br	10890 <strlen+0x74>
   1088c:	10800044 	addi	r2,r2,1
   10890:	10c00007 	ldb	r3,0(r2)
   10894:	183ffd1e 	bne	r3,zero,1088c <strlen+0x70>
   10898:	1105c83a 	sub	r2,r2,r4
   1089c:	f800283a 	ret
   108a0:	2005883a 	mov	r2,r4
   108a4:	003ffa06 	br	10890 <strlen+0x74>

000108a8 <__sfvwrite_r>:
   108a8:	30800217 	ldw	r2,8(r6)
   108ac:	defff504 	addi	sp,sp,-44
   108b0:	dd400615 	stw	r21,24(sp)
   108b4:	dd000515 	stw	r20,20(sp)
   108b8:	dc000115 	stw	r16,4(sp)
   108bc:	dfc00a15 	stw	ra,40(sp)
   108c0:	df000915 	stw	fp,36(sp)
   108c4:	ddc00815 	stw	r23,32(sp)
   108c8:	dd800715 	stw	r22,28(sp)
   108cc:	dcc00415 	stw	r19,16(sp)
   108d0:	dc800315 	stw	r18,12(sp)
   108d4:	dc400215 	stw	r17,8(sp)
   108d8:	3029883a 	mov	r20,r6
   108dc:	202b883a 	mov	r21,r4
   108e0:	2821883a 	mov	r16,r5
   108e4:	10002126 	beq	r2,zero,1096c <__sfvwrite_r+0xc4>
   108e8:	2880030b 	ldhu	r2,12(r5)
   108ec:	10c0020c 	andi	r3,r2,8
   108f0:	18ffffcc 	andi	r3,r3,65535
   108f4:	18e0001c 	xori	r3,r3,32768
   108f8:	18e00004 	addi	r3,r3,-32768
   108fc:	18002826 	beq	r3,zero,109a0 <__sfvwrite_r+0xf8>
   10900:	28c00417 	ldw	r3,16(r5)
   10904:	18002626 	beq	r3,zero,109a0 <__sfvwrite_r+0xf8>
   10908:	10c0008c 	andi	r3,r2,2
   1090c:	18ffffcc 	andi	r3,r3,65535
   10910:	18e0001c 	xori	r3,r3,32768
   10914:	18e00004 	addi	r3,r3,-32768
   10918:	a4400017 	ldw	r17,0(r20)
   1091c:	18002b26 	beq	r3,zero,109cc <__sfvwrite_r+0x124>
   10920:	0027883a 	mov	r19,zero
   10924:	0025883a 	mov	r18,zero
   10928:	05810004 	movi	r22,1024
   1092c:	980d883a 	mov	r6,r19
   10930:	a809883a 	mov	r4,r21
   10934:	90004f26 	beq	r18,zero,10a74 <__sfvwrite_r+0x1cc>
   10938:	900f883a 	mov	r7,r18
   1093c:	81400717 	ldw	r5,28(r16)
   10940:	b480012e 	bgeu	r22,r18,10948 <__sfvwrite_r+0xa0>
   10944:	01c10004 	movi	r7,1024
   10948:	80800917 	ldw	r2,36(r16)
   1094c:	103ee83a 	callr	r2
   10950:	0080540e 	bge	zero,r2,10aa4 <__sfvwrite_r+0x1fc>
   10954:	a0c00217 	ldw	r3,8(r20)
   10958:	98a7883a 	add	r19,r19,r2
   1095c:	90a5c83a 	sub	r18,r18,r2
   10960:	1885c83a 	sub	r2,r3,r2
   10964:	a0800215 	stw	r2,8(r20)
   10968:	103ff01e 	bne	r2,zero,1092c <__sfvwrite_r+0x84>
   1096c:	0005883a 	mov	r2,zero
   10970:	dfc00a17 	ldw	ra,40(sp)
   10974:	df000917 	ldw	fp,36(sp)
   10978:	ddc00817 	ldw	r23,32(sp)
   1097c:	dd800717 	ldw	r22,28(sp)
   10980:	dd400617 	ldw	r21,24(sp)
   10984:	dd000517 	ldw	r20,20(sp)
   10988:	dcc00417 	ldw	r19,16(sp)
   1098c:	dc800317 	ldw	r18,12(sp)
   10990:	dc400217 	ldw	r17,8(sp)
   10994:	dc000117 	ldw	r16,4(sp)
   10998:	dec00b04 	addi	sp,sp,44
   1099c:	f800283a 	ret
   109a0:	a809883a 	mov	r4,r21
   109a4:	800b883a 	mov	r5,r16
   109a8:	0011f340 	call	11f34 <__swsetup_r>
   109ac:	1000f01e 	bne	r2,zero,10d70 <__sfvwrite_r+0x4c8>
   109b0:	8080030b 	ldhu	r2,12(r16)
   109b4:	a4400017 	ldw	r17,0(r20)
   109b8:	10c0008c 	andi	r3,r2,2
   109bc:	18ffffcc 	andi	r3,r3,65535
   109c0:	18e0001c 	xori	r3,r3,32768
   109c4:	18e00004 	addi	r3,r3,-32768
   109c8:	183fd51e 	bne	r3,zero,10920 <__sfvwrite_r+0x78>
   109cc:	10c0004c 	andi	r3,r2,1
   109d0:	002d883a 	mov	r22,zero
   109d4:	1800381e 	bne	r3,zero,10ab8 <__sfvwrite_r+0x210>
   109d8:	0025883a 	mov	r18,zero
   109dc:	90002126 	beq	r18,zero,10a64 <__sfvwrite_r+0x1bc>
   109e0:	10c0800c 	andi	r3,r2,512
   109e4:	18ffffcc 	andi	r3,r3,65535
   109e8:	18e0001c 	xori	r3,r3,32768
   109ec:	18e00004 	addi	r3,r3,-32768
   109f0:	84c00217 	ldw	r19,8(r16)
   109f4:	18006b26 	beq	r3,zero,10ba4 <__sfvwrite_r+0x2fc>
   109f8:	980f883a 	mov	r7,r19
   109fc:	94c08636 	bltu	r18,r19,10c18 <__sfvwrite_r+0x370>
   10a00:	10c1200c 	andi	r3,r2,1152
   10a04:	18009f1e 	bne	r3,zero,10c84 <__sfvwrite_r+0x3dc>
   10a08:	81000017 	ldw	r4,0(r16)
   10a0c:	982f883a 	mov	r23,r19
   10a10:	9039883a 	mov	fp,r18
   10a14:	9027883a 	mov	r19,r18
   10a18:	380d883a 	mov	r6,r7
   10a1c:	b00b883a 	mov	r5,r22
   10a20:	d9c00015 	stw	r7,0(sp)
   10a24:	00117480 	call	11748 <memmove>
   10a28:	d9c00017 	ldw	r7,0(sp)
   10a2c:	81000217 	ldw	r4,8(r16)
   10a30:	80800017 	ldw	r2,0(r16)
   10a34:	25efc83a 	sub	r23,r4,r23
   10a38:	11cf883a 	add	r7,r2,r7
   10a3c:	85c00215 	stw	r23,8(r16)
   10a40:	81c00015 	stw	r7,0(r16)
   10a44:	a0800217 	ldw	r2,8(r20)
   10a48:	b72d883a 	add	r22,r22,fp
   10a4c:	9725c83a 	sub	r18,r18,fp
   10a50:	14e7c83a 	sub	r19,r2,r19
   10a54:	a4c00215 	stw	r19,8(r20)
   10a58:	983fc426 	beq	r19,zero,1096c <__sfvwrite_r+0xc4>
   10a5c:	8080030b 	ldhu	r2,12(r16)
   10a60:	903fdf1e 	bne	r18,zero,109e0 <__sfvwrite_r+0x138>
   10a64:	8d800017 	ldw	r22,0(r17)
   10a68:	8c800117 	ldw	r18,4(r17)
   10a6c:	8c400204 	addi	r17,r17,8
   10a70:	003fda06 	br	109dc <__sfvwrite_r+0x134>
   10a74:	8cc00017 	ldw	r19,0(r17)
   10a78:	8c800117 	ldw	r18,4(r17)
   10a7c:	8c400204 	addi	r17,r17,8
   10a80:	003faa06 	br	1092c <__sfvwrite_r+0x84>
   10a84:	00118d40 	call	118d4 <_realloc_r>
   10a88:	102f883a 	mov	r23,r2
   10a8c:	10009f1e 	bne	r2,zero,10d0c <__sfvwrite_r+0x464>
   10a90:	81400417 	ldw	r5,16(r16)
   10a94:	a809883a 	mov	r4,r21
   10a98:	00126e80 	call	126e8 <_free_r>
   10a9c:	00800304 	movi	r2,12
   10aa0:	a8800015 	stw	r2,0(r21)
   10aa4:	80c0030b 	ldhu	r3,12(r16)
   10aa8:	00bfffc4 	movi	r2,-1
   10aac:	18c01014 	ori	r3,r3,64
   10ab0:	80c0030d 	sth	r3,12(r16)
   10ab4:	003fae06 	br	10970 <__sfvwrite_r+0xc8>
   10ab8:	0007883a 	mov	r3,zero
   10abc:	0039883a 	mov	fp,zero
   10ac0:	0025883a 	mov	r18,zero
   10ac4:	90001e26 	beq	r18,zero,10b40 <__sfvwrite_r+0x298>
   10ac8:	18006526 	beq	r3,zero,10c60 <__sfvwrite_r+0x3b8>
   10acc:	b02f883a 	mov	r23,r22
   10ad0:	9580012e 	bgeu	r18,r22,10ad8 <__sfvwrite_r+0x230>
   10ad4:	902f883a 	mov	r23,r18
   10ad8:	81000017 	ldw	r4,0(r16)
   10adc:	80800417 	ldw	r2,16(r16)
   10ae0:	84c00217 	ldw	r19,8(r16)
   10ae4:	81c00517 	ldw	r7,20(r16)
   10ae8:	1100022e 	bgeu	r2,r4,10af4 <__sfvwrite_r+0x24c>
   10aec:	99e7883a 	add	r19,r19,r7
   10af0:	9dc01816 	blt	r19,r23,10b54 <__sfvwrite_r+0x2ac>
   10af4:	b9c03b16 	blt	r23,r7,10be4 <__sfvwrite_r+0x33c>
   10af8:	80800917 	ldw	r2,36(r16)
   10afc:	81400717 	ldw	r5,28(r16)
   10b00:	a809883a 	mov	r4,r21
   10b04:	d8c00015 	stw	r3,0(sp)
   10b08:	e00d883a 	mov	r6,fp
   10b0c:	103ee83a 	callr	r2
   10b10:	1027883a 	mov	r19,r2
   10b14:	d8c00017 	ldw	r3,0(sp)
   10b18:	00bfe20e 	bge	zero,r2,10aa4 <__sfvwrite_r+0x1fc>
   10b1c:	b4edc83a 	sub	r22,r22,r19
   10b20:	b0001a26 	beq	r22,zero,10b8c <__sfvwrite_r+0x2e4>
   10b24:	a0800217 	ldw	r2,8(r20)
   10b28:	e4f9883a 	add	fp,fp,r19
   10b2c:	94e5c83a 	sub	r18,r18,r19
   10b30:	14e7c83a 	sub	r19,r2,r19
   10b34:	a4c00215 	stw	r19,8(r20)
   10b38:	983f8c26 	beq	r19,zero,1096c <__sfvwrite_r+0xc4>
   10b3c:	903fe21e 	bne	r18,zero,10ac8 <__sfvwrite_r+0x220>
   10b40:	8f000017 	ldw	fp,0(r17)
   10b44:	8c800117 	ldw	r18,4(r17)
   10b48:	0007883a 	mov	r3,zero
   10b4c:	8c400204 	addi	r17,r17,8
   10b50:	003fdc06 	br	10ac4 <__sfvwrite_r+0x21c>
   10b54:	e00b883a 	mov	r5,fp
   10b58:	980d883a 	mov	r6,r19
   10b5c:	d8c00015 	stw	r3,0(sp)
   10b60:	00117480 	call	11748 <memmove>
   10b64:	80800017 	ldw	r2,0(r16)
   10b68:	a809883a 	mov	r4,r21
   10b6c:	800b883a 	mov	r5,r16
   10b70:	14c5883a 	add	r2,r2,r19
   10b74:	80800015 	stw	r2,0(r16)
   10b78:	00120a80 	call	120a8 <_fflush_r>
   10b7c:	d8c00017 	ldw	r3,0(sp)
   10b80:	103fc81e 	bne	r2,zero,10aa4 <__sfvwrite_r+0x1fc>
   10b84:	b4edc83a 	sub	r22,r22,r19
   10b88:	b03fe61e 	bne	r22,zero,10b24 <__sfvwrite_r+0x27c>
   10b8c:	a809883a 	mov	r4,r21
   10b90:	800b883a 	mov	r5,r16
   10b94:	00120a80 	call	120a8 <_fflush_r>
   10b98:	103fc21e 	bne	r2,zero,10aa4 <__sfvwrite_r+0x1fc>
   10b9c:	0007883a 	mov	r3,zero
   10ba0:	003fe006 	br	10b24 <__sfvwrite_r+0x27c>
   10ba4:	81000017 	ldw	r4,0(r16)
   10ba8:	80800417 	ldw	r2,16(r16)
   10bac:	1100022e 	bgeu	r2,r4,10bb8 <__sfvwrite_r+0x310>
   10bb0:	9839883a 	mov	fp,r19
   10bb4:	9c806036 	bltu	r19,r18,10d38 <__sfvwrite_r+0x490>
   10bb8:	81c00517 	ldw	r7,20(r16)
   10bbc:	91c01c36 	bltu	r18,r7,10c30 <__sfvwrite_r+0x388>
   10bc0:	80800917 	ldw	r2,36(r16)
   10bc4:	81400717 	ldw	r5,28(r16)
   10bc8:	a809883a 	mov	r4,r21
   10bcc:	b00d883a 	mov	r6,r22
   10bd0:	103ee83a 	callr	r2
   10bd4:	1027883a 	mov	r19,r2
   10bd8:	00bfb20e 	bge	zero,r2,10aa4 <__sfvwrite_r+0x1fc>
   10bdc:	1039883a 	mov	fp,r2
   10be0:	003f9806 	br	10a44 <__sfvwrite_r+0x19c>
   10be4:	b80d883a 	mov	r6,r23
   10be8:	e00b883a 	mov	r5,fp
   10bec:	d8c00015 	stw	r3,0(sp)
   10bf0:	00117480 	call	11748 <memmove>
   10bf4:	80800217 	ldw	r2,8(r16)
   10bf8:	81000017 	ldw	r4,0(r16)
   10bfc:	b827883a 	mov	r19,r23
   10c00:	15c5c83a 	sub	r2,r2,r23
   10c04:	25ef883a 	add	r23,r4,r23
   10c08:	80800215 	stw	r2,8(r16)
   10c0c:	85c00015 	stw	r23,0(r16)
   10c10:	d8c00017 	ldw	r3,0(sp)
   10c14:	003fc106 	br	10b1c <__sfvwrite_r+0x274>
   10c18:	81000017 	ldw	r4,0(r16)
   10c1c:	902f883a 	mov	r23,r18
   10c20:	9039883a 	mov	fp,r18
   10c24:	9027883a 	mov	r19,r18
   10c28:	900f883a 	mov	r7,r18
   10c2c:	003f7a06 	br	10a18 <__sfvwrite_r+0x170>
   10c30:	b00b883a 	mov	r5,r22
   10c34:	900d883a 	mov	r6,r18
   10c38:	00117480 	call	11748 <memmove>
   10c3c:	80c00217 	ldw	r3,8(r16)
   10c40:	80800017 	ldw	r2,0(r16)
   10c44:	9027883a 	mov	r19,r18
   10c48:	1c87c83a 	sub	r3,r3,r18
   10c4c:	1485883a 	add	r2,r2,r18
   10c50:	80c00215 	stw	r3,8(r16)
   10c54:	80800015 	stw	r2,0(r16)
   10c58:	9039883a 	mov	fp,r18
   10c5c:	003f7906 	br	10a44 <__sfvwrite_r+0x19c>
   10c60:	e009883a 	mov	r4,fp
   10c64:	01400284 	movi	r5,10
   10c68:	900d883a 	mov	r6,r18
   10c6c:	00115100 	call	11510 <memchr>
   10c70:	10003c26 	beq	r2,zero,10d64 <__sfvwrite_r+0x4bc>
   10c74:	15800044 	addi	r22,r2,1
   10c78:	b72dc83a 	sub	r22,r22,fp
   10c7c:	00c00044 	movi	r3,1
   10c80:	003f9206 	br	10acc <__sfvwrite_r+0x224>
   10c84:	81000517 	ldw	r4,20(r16)
   10c88:	81400417 	ldw	r5,16(r16)
   10c8c:	80c00017 	ldw	r3,0(r16)
   10c90:	210d883a 	add	r6,r4,r4
   10c94:	3109883a 	add	r4,r6,r4
   10c98:	2026d7fa 	srli	r19,r4,31
   10c9c:	1979c83a 	sub	fp,r3,r5
   10ca0:	e1800044 	addi	r6,fp,1
   10ca4:	9909883a 	add	r4,r19,r4
   10ca8:	2027d07a 	srai	r19,r4,1
   10cac:	3489883a 	add	r4,r6,r18
   10cb0:	980d883a 	mov	r6,r19
   10cb4:	9900022e 	bgeu	r19,r4,10cc0 <__sfvwrite_r+0x418>
   10cb8:	2027883a 	mov	r19,r4
   10cbc:	200d883a 	mov	r6,r4
   10cc0:	1081000c 	andi	r2,r2,1024
   10cc4:	10bfffcc 	andi	r2,r2,65535
   10cc8:	10a0001c 	xori	r2,r2,32768
   10ccc:	10a00004 	addi	r2,r2,-32768
   10cd0:	a809883a 	mov	r4,r21
   10cd4:	103f6b26 	beq	r2,zero,10a84 <__sfvwrite_r+0x1dc>
   10cd8:	300b883a 	mov	r5,r6
   10cdc:	0010d8c0 	call	10d8c <_malloc_r>
   10ce0:	102f883a 	mov	r23,r2
   10ce4:	103f6d26 	beq	r2,zero,10a9c <__sfvwrite_r+0x1f4>
   10ce8:	81400417 	ldw	r5,16(r16)
   10cec:	1009883a 	mov	r4,r2
   10cf0:	e00d883a 	mov	r6,fp
   10cf4:	00116080 	call	11608 <memcpy>
   10cf8:	8080030b 	ldhu	r2,12(r16)
   10cfc:	00fedfc4 	movi	r3,-1153
   10d00:	10c4703a 	and	r2,r2,r3
   10d04:	10802014 	ori	r2,r2,128
   10d08:	8080030d 	sth	r2,12(r16)
   10d0c:	bf09883a 	add	r4,r23,fp
   10d10:	9f07c83a 	sub	r3,r19,fp
   10d14:	85c00415 	stw	r23,16(r16)
   10d18:	84c00515 	stw	r19,20(r16)
   10d1c:	81000015 	stw	r4,0(r16)
   10d20:	902f883a 	mov	r23,r18
   10d24:	80c00215 	stw	r3,8(r16)
   10d28:	9039883a 	mov	fp,r18
   10d2c:	9027883a 	mov	r19,r18
   10d30:	900f883a 	mov	r7,r18
   10d34:	003f3806 	br	10a18 <__sfvwrite_r+0x170>
   10d38:	b00b883a 	mov	r5,r22
   10d3c:	980d883a 	mov	r6,r19
   10d40:	00117480 	call	11748 <memmove>
   10d44:	80800017 	ldw	r2,0(r16)
   10d48:	a809883a 	mov	r4,r21
   10d4c:	800b883a 	mov	r5,r16
   10d50:	14c5883a 	add	r2,r2,r19
   10d54:	80800015 	stw	r2,0(r16)
   10d58:	00120a80 	call	120a8 <_fflush_r>
   10d5c:	103f3926 	beq	r2,zero,10a44 <__sfvwrite_r+0x19c>
   10d60:	003f5006 	br	10aa4 <__sfvwrite_r+0x1fc>
   10d64:	95800044 	addi	r22,r18,1
   10d68:	00c00044 	movi	r3,1
   10d6c:	003f5706 	br	10acc <__sfvwrite_r+0x224>
   10d70:	80c0030b 	ldhu	r3,12(r16)
   10d74:	00bfffc4 	movi	r2,-1
   10d78:	18c01014 	ori	r3,r3,64
   10d7c:	80c0030d 	sth	r3,12(r16)
   10d80:	00c00244 	movi	r3,9
   10d84:	a8c00015 	stw	r3,0(r21)
   10d88:	003ef906 	br	10970 <__sfvwrite_r+0xc8>

00010d8c <_malloc_r>:
   10d8c:	defff604 	addi	sp,sp,-40
   10d90:	dc800215 	stw	r18,8(sp)
   10d94:	dfc00915 	stw	ra,36(sp)
   10d98:	df000815 	stw	fp,32(sp)
   10d9c:	ddc00715 	stw	r23,28(sp)
   10da0:	dd800615 	stw	r22,24(sp)
   10da4:	dd400515 	stw	r21,20(sp)
   10da8:	dd000415 	stw	r20,16(sp)
   10dac:	dcc00315 	stw	r19,12(sp)
   10db0:	dc400115 	stw	r17,4(sp)
   10db4:	dc000015 	stw	r16,0(sp)
   10db8:	288002c4 	addi	r2,r5,11
   10dbc:	00c00584 	movi	r3,22
   10dc0:	2025883a 	mov	r18,r4
   10dc4:	18802b2e 	bgeu	r3,r2,10e74 <_malloc_r+0xe8>
   10dc8:	047ffe04 	movi	r17,-8
   10dcc:	1462703a 	and	r17,r2,r17
   10dd0:	88002a16 	blt	r17,zero,10e7c <_malloc_r+0xf0>
   10dd4:	89402936 	bltu	r17,r5,10e7c <_malloc_r+0xf0>
   10dd8:	9009883a 	mov	r4,r18
   10ddc:	001388c0 	call	1388c <__malloc_lock>
   10de0:	00807dc4 	movi	r2,503
   10de4:	14402936 	bltu	r2,r17,10e8c <_malloc_r+0x100>
   10de8:	8808d0fa 	srli	r4,r17,3
   10dec:	04c00074 	movhi	r19,1
   10df0:	9cd92004 	addi	r19,r19,25728
   10df4:	2105883a 	add	r2,r4,r4
   10df8:	1085883a 	add	r2,r2,r2
   10dfc:	1085883a 	add	r2,r2,r2
   10e00:	9885883a 	add	r2,r19,r2
   10e04:	14000317 	ldw	r16,12(r2)
   10e08:	80815526 	beq	r16,r2,11360 <_malloc_r+0x5d4>
   10e0c:	81000117 	ldw	r4,4(r16)
   10e10:	00bfff04 	movi	r2,-4
   10e14:	80c00317 	ldw	r3,12(r16)
   10e18:	2084703a 	and	r2,r4,r2
   10e1c:	8085883a 	add	r2,r16,r2
   10e20:	11800117 	ldw	r6,4(r2)
   10e24:	81400217 	ldw	r5,8(r16)
   10e28:	9009883a 	mov	r4,r18
   10e2c:	31800054 	ori	r6,r6,1
   10e30:	11800115 	stw	r6,4(r2)
   10e34:	28c00315 	stw	r3,12(r5)
   10e38:	19400215 	stw	r5,8(r3)
   10e3c:	00138ac0 	call	138ac <__malloc_unlock>
   10e40:	80800204 	addi	r2,r16,8
   10e44:	dfc00917 	ldw	ra,36(sp)
   10e48:	df000817 	ldw	fp,32(sp)
   10e4c:	ddc00717 	ldw	r23,28(sp)
   10e50:	dd800617 	ldw	r22,24(sp)
   10e54:	dd400517 	ldw	r21,20(sp)
   10e58:	dd000417 	ldw	r20,16(sp)
   10e5c:	dcc00317 	ldw	r19,12(sp)
   10e60:	dc800217 	ldw	r18,8(sp)
   10e64:	dc400117 	ldw	r17,4(sp)
   10e68:	dc000017 	ldw	r16,0(sp)
   10e6c:	dec00a04 	addi	sp,sp,40
   10e70:	f800283a 	ret
   10e74:	04400404 	movi	r17,16
   10e78:	897fd72e 	bgeu	r17,r5,10dd8 <_malloc_r+0x4c>
   10e7c:	00800304 	movi	r2,12
   10e80:	90800015 	stw	r2,0(r18)
   10e84:	0005883a 	mov	r2,zero
   10e88:	003fee06 	br	10e44 <_malloc_r+0xb8>
   10e8c:	8808d27a 	srli	r4,r17,9
   10e90:	20007126 	beq	r4,zero,11058 <_malloc_r+0x2cc>
   10e94:	00800104 	movi	r2,4
   10e98:	1100eb36 	bltu	r2,r4,11248 <_malloc_r+0x4bc>
   10e9c:	8808d1ba 	srli	r4,r17,6
   10ea0:	21000e04 	addi	r4,r4,56
   10ea4:	210b883a 	add	r5,r4,r4
   10ea8:	294b883a 	add	r5,r5,r5
   10eac:	294b883a 	add	r5,r5,r5
   10eb0:	04c00074 	movhi	r19,1
   10eb4:	9cd92004 	addi	r19,r19,25728
   10eb8:	994b883a 	add	r5,r19,r5
   10ebc:	2c000317 	ldw	r16,12(r5)
   10ec0:	2c000e26 	beq	r5,r16,10efc <_malloc_r+0x170>
   10ec4:	80c00117 	ldw	r3,4(r16)
   10ec8:	01ffff04 	movi	r7,-4
   10ecc:	018003c4 	movi	r6,15
   10ed0:	19c6703a 	and	r3,r3,r7
   10ed4:	1c45c83a 	sub	r2,r3,r17
   10ed8:	30800716 	blt	r6,r2,10ef8 <_malloc_r+0x16c>
   10edc:	1000610e 	bge	r2,zero,11064 <_malloc_r+0x2d8>
   10ee0:	84000317 	ldw	r16,12(r16)
   10ee4:	2c000526 	beq	r5,r16,10efc <_malloc_r+0x170>
   10ee8:	80c00117 	ldw	r3,4(r16)
   10eec:	19c6703a 	and	r3,r3,r7
   10ef0:	1c45c83a 	sub	r2,r3,r17
   10ef4:	30bff90e 	bge	r6,r2,10edc <_malloc_r+0x150>
   10ef8:	213fffc4 	addi	r4,r4,-1
   10efc:	21000044 	addi	r4,r4,1
   10f00:	9c000417 	ldw	r16,16(r19)
   10f04:	00c00074 	movhi	r3,1
   10f08:	18d92004 	addi	r3,r3,25728
   10f0c:	1a400204 	addi	r9,r3,8
   10f10:	8240ff26 	beq	r16,r9,11310 <_malloc_r+0x584>
   10f14:	81400117 	ldw	r5,4(r16)
   10f18:	00bfff04 	movi	r2,-4
   10f1c:	018003c4 	movi	r6,15
   10f20:	2884703a 	and	r2,r5,r2
   10f24:	144bc83a 	sub	r5,r2,r17
   10f28:	3140ea16 	blt	r6,r5,112d4 <_malloc_r+0x548>
   10f2c:	1a400515 	stw	r9,20(r3)
   10f30:	1a400415 	stw	r9,16(r3)
   10f34:	2800570e 	bge	r5,zero,11094 <_malloc_r+0x308>
   10f38:	01407fc4 	movi	r5,511
   10f3c:	2880ca36 	bltu	r5,r2,11268 <_malloc_r+0x4dc>
   10f40:	1004d0fa 	srli	r2,r2,3
   10f44:	02000044 	movi	r8,1
   10f48:	19c00117 	ldw	r7,4(r3)
   10f4c:	108b883a 	add	r5,r2,r2
   10f50:	294b883a 	add	r5,r5,r5
   10f54:	1005d0ba 	srai	r2,r2,2
   10f58:	294b883a 	add	r5,r5,r5
   10f5c:	28cb883a 	add	r5,r5,r3
   10f60:	29800217 	ldw	r6,8(r5)
   10f64:	4084983a 	sll	r2,r8,r2
   10f68:	81400315 	stw	r5,12(r16)
   10f6c:	81800215 	stw	r6,8(r16)
   10f70:	11c4b03a 	or	r2,r2,r7
   10f74:	18800115 	stw	r2,4(r3)
   10f78:	2c000215 	stw	r16,8(r5)
   10f7c:	34000315 	stw	r16,12(r6)
   10f80:	200bd0ba 	srai	r5,r4,2
   10f84:	00c00044 	movi	r3,1
   10f88:	194a983a 	sll	r5,r3,r5
   10f8c:	11404936 	bltu	r2,r5,110b4 <_malloc_r+0x328>
   10f90:	1146703a 	and	r3,r2,r5
   10f94:	18000a1e 	bne	r3,zero,10fc0 <_malloc_r+0x234>
   10f98:	00ffff04 	movi	r3,-4
   10f9c:	294b883a 	add	r5,r5,r5
   10fa0:	20c8703a 	and	r4,r4,r3
   10fa4:	1146703a 	and	r3,r2,r5
   10fa8:	21000104 	addi	r4,r4,4
   10fac:	1800041e 	bne	r3,zero,10fc0 <_malloc_r+0x234>
   10fb0:	294b883a 	add	r5,r5,r5
   10fb4:	1146703a 	and	r3,r2,r5
   10fb8:	21000104 	addi	r4,r4,4
   10fbc:	183ffc26 	beq	r3,zero,10fb0 <_malloc_r+0x224>
   10fc0:	023fff04 	movi	r8,-4
   10fc4:	01c003c4 	movi	r7,15
   10fc8:	2105883a 	add	r2,r4,r4
   10fcc:	1085883a 	add	r2,r2,r2
   10fd0:	1085883a 	add	r2,r2,r2
   10fd4:	9899883a 	add	r12,r19,r2
   10fd8:	62800304 	addi	r10,r12,12
   10fdc:	2017883a 	mov	r11,r4
   10fe0:	54000017 	ldw	r16,0(r10)
   10fe4:	51bffd04 	addi	r6,r10,-12
   10fe8:	8180041e 	bne	r16,r6,10ffc <_malloc_r+0x270>
   10fec:	0000ca06 	br	11318 <_malloc_r+0x58c>
   10ff0:	10001c0e 	bge	r2,zero,11064 <_malloc_r+0x2d8>
   10ff4:	84000317 	ldw	r16,12(r16)
   10ff8:	8180c726 	beq	r16,r6,11318 <_malloc_r+0x58c>
   10ffc:	80c00117 	ldw	r3,4(r16)
   11000:	1a06703a 	and	r3,r3,r8
   11004:	1c45c83a 	sub	r2,r3,r17
   11008:	38bff90e 	bge	r7,r2,10ff0 <_malloc_r+0x264>
   1100c:	81000317 	ldw	r4,12(r16)
   11010:	81400217 	ldw	r5,8(r16)
   11014:	8447883a 	add	r3,r16,r17
   11018:	8c400054 	ori	r17,r17,1
   1101c:	29000315 	stw	r4,12(r5)
   11020:	21400215 	stw	r5,8(r4)
   11024:	84400115 	stw	r17,4(r16)
   11028:	1889883a 	add	r4,r3,r2
   1102c:	11400054 	ori	r5,r2,1
   11030:	98c00515 	stw	r3,20(r19)
   11034:	98c00415 	stw	r3,16(r19)
   11038:	20800015 	stw	r2,0(r4)
   1103c:	1a400315 	stw	r9,12(r3)
   11040:	1a400215 	stw	r9,8(r3)
   11044:	19400115 	stw	r5,4(r3)
   11048:	9009883a 	mov	r4,r18
   1104c:	00138ac0 	call	138ac <__malloc_unlock>
   11050:	80800204 	addi	r2,r16,8
   11054:	003f7b06 	br	10e44 <_malloc_r+0xb8>
   11058:	8808d0fa 	srli	r4,r17,3
   1105c:	210b883a 	add	r5,r4,r4
   11060:	003f9106 	br	10ea8 <_malloc_r+0x11c>
   11064:	80c7883a 	add	r3,r16,r3
   11068:	19400117 	ldw	r5,4(r3)
   1106c:	80800317 	ldw	r2,12(r16)
   11070:	81000217 	ldw	r4,8(r16)
   11074:	29400054 	ori	r5,r5,1
   11078:	19400115 	stw	r5,4(r3)
   1107c:	20800315 	stw	r2,12(r4)
   11080:	11000215 	stw	r4,8(r2)
   11084:	9009883a 	mov	r4,r18
   11088:	00138ac0 	call	138ac <__malloc_unlock>
   1108c:	80800204 	addi	r2,r16,8
   11090:	003f6c06 	br	10e44 <_malloc_r+0xb8>
   11094:	8085883a 	add	r2,r16,r2
   11098:	10c00117 	ldw	r3,4(r2)
   1109c:	9009883a 	mov	r4,r18
   110a0:	18c00054 	ori	r3,r3,1
   110a4:	10c00115 	stw	r3,4(r2)
   110a8:	00138ac0 	call	138ac <__malloc_unlock>
   110ac:	80800204 	addi	r2,r16,8
   110b0:	003f6406 	br	10e44 <_malloc_r+0xb8>
   110b4:	9c000217 	ldw	r16,8(r19)
   110b8:	00bfff04 	movi	r2,-4
   110bc:	85400117 	ldw	r21,4(r16)
   110c0:	a8aa703a 	and	r21,r21,r2
   110c4:	ac400336 	bltu	r21,r17,110d4 <_malloc_r+0x348>
   110c8:	ac45c83a 	sub	r2,r21,r17
   110cc:	00c003c4 	movi	r3,15
   110d0:	18805316 	blt	r3,r2,11220 <_malloc_r+0x494>
   110d4:	d5e6c217 	ldw	r23,-25848(gp)
   110d8:	d0e00217 	ldw	r3,-32760(gp)
   110dc:	00bfffc4 	movi	r2,-1
   110e0:	8579883a 	add	fp,r16,r21
   110e4:	8def883a 	add	r23,r17,r23
   110e8:	1880d226 	beq	r3,r2,11434 <_malloc_r+0x6a8>
   110ec:	bdc403c4 	addi	r23,r23,4111
   110f0:	00bc0004 	movi	r2,-4096
   110f4:	b8ae703a 	and	r23,r23,r2
   110f8:	9009883a 	mov	r4,r18
   110fc:	b80b883a 	mov	r5,r23
   11100:	0011ed00 	call	11ed0 <_sbrk_r>
   11104:	1029883a 	mov	r20,r2
   11108:	00bfffc4 	movi	r2,-1
   1110c:	a080d126 	beq	r20,r2,11454 <_malloc_r+0x6c8>
   11110:	a7009f36 	bltu	r20,fp,11390 <_malloc_r+0x604>
   11114:	058000b4 	movhi	r22,2
   11118:	b5a56e04 	addi	r22,r22,-27208
   1111c:	b0800017 	ldw	r2,0(r22)
   11120:	b885883a 	add	r2,r23,r2
   11124:	b0800015 	stw	r2,0(r22)
   11128:	e500cf26 	beq	fp,r20,11468 <_malloc_r+0x6dc>
   1112c:	d1200217 	ldw	r4,-32760(gp)
   11130:	00ffffc4 	movi	r3,-1
   11134:	20c0e026 	beq	r4,r3,114b8 <_malloc_r+0x72c>
   11138:	a739c83a 	sub	fp,r20,fp
   1113c:	1705883a 	add	r2,r2,fp
   11140:	b0800015 	stw	r2,0(r22)
   11144:	a08001cc 	andi	r2,r20,7
   11148:	1000a526 	beq	r2,zero,113e0 <_malloc_r+0x654>
   1114c:	a0a9c83a 	sub	r20,r20,r2
   11150:	00c40204 	movi	r3,4104
   11154:	a5000204 	addi	r20,r20,8
   11158:	1885c83a 	sub	r2,r3,r2
   1115c:	a5c7883a 	add	r3,r20,r23
   11160:	18c3ffcc 	andi	r3,r3,4095
   11164:	10efc83a 	sub	r23,r2,r3
   11168:	9009883a 	mov	r4,r18
   1116c:	b80b883a 	mov	r5,r23
   11170:	0011ed00 	call	11ed0 <_sbrk_r>
   11174:	00ffffc4 	movi	r3,-1
   11178:	10c0cc26 	beq	r2,r3,114ac <_malloc_r+0x720>
   1117c:	1505c83a 	sub	r2,r2,r20
   11180:	b887883a 	add	r3,r23,r2
   11184:	18c00054 	ori	r3,r3,1
   11188:	b0800017 	ldw	r2,0(r22)
   1118c:	9d000215 	stw	r20,8(r19)
   11190:	a0c00115 	stw	r3,4(r20)
   11194:	b885883a 	add	r2,r23,r2
   11198:	b0800015 	stw	r2,0(r22)
   1119c:	84c00e26 	beq	r16,r19,111d8 <_malloc_r+0x44c>
   111a0:	00c003c4 	movi	r3,15
   111a4:	1d40902e 	bgeu	r3,r21,113e8 <_malloc_r+0x65c>
   111a8:	ad7ffd04 	addi	r21,r21,-12
   111ac:	013ffe04 	movi	r4,-8
   111b0:	a908703a 	and	r4,r21,r4
   111b4:	810b883a 	add	r5,r16,r4
   111b8:	01800144 	movi	r6,5
   111bc:	29800115 	stw	r6,4(r5)
   111c0:	29800215 	stw	r6,8(r5)
   111c4:	81400117 	ldw	r5,4(r16)
   111c8:	2940004c 	andi	r5,r5,1
   111cc:	214ab03a 	or	r5,r4,r5
   111d0:	81400115 	stw	r5,4(r16)
   111d4:	1900ae36 	bltu	r3,r4,11490 <_malloc_r+0x704>
   111d8:	d0e6c117 	ldw	r3,-25852(gp)
   111dc:	1880012e 	bgeu	r3,r2,111e4 <_malloc_r+0x458>
   111e0:	d0a6c115 	stw	r2,-25852(gp)
   111e4:	d0e6c017 	ldw	r3,-25856(gp)
   111e8:	9c000217 	ldw	r16,8(r19)
   111ec:	1880012e 	bgeu	r3,r2,111f4 <_malloc_r+0x468>
   111f0:	d0a6c015 	stw	r2,-25856(gp)
   111f4:	80c00117 	ldw	r3,4(r16)
   111f8:	00bfff04 	movi	r2,-4
   111fc:	1886703a 	and	r3,r3,r2
   11200:	1c45c83a 	sub	r2,r3,r17
   11204:	1c400236 	bltu	r3,r17,11210 <_malloc_r+0x484>
   11208:	00c003c4 	movi	r3,15
   1120c:	18800416 	blt	r3,r2,11220 <_malloc_r+0x494>
   11210:	9009883a 	mov	r4,r18
   11214:	00138ac0 	call	138ac <__malloc_unlock>
   11218:	0005883a 	mov	r2,zero
   1121c:	003f0906 	br	10e44 <_malloc_r+0xb8>
   11220:	88c00054 	ori	r3,r17,1
   11224:	10800054 	ori	r2,r2,1
   11228:	80c00115 	stw	r3,4(r16)
   1122c:	8463883a 	add	r17,r16,r17
   11230:	88800115 	stw	r2,4(r17)
   11234:	9009883a 	mov	r4,r18
   11238:	9c400215 	stw	r17,8(r19)
   1123c:	00138ac0 	call	138ac <__malloc_unlock>
   11240:	80800204 	addi	r2,r16,8
   11244:	003eff06 	br	10e44 <_malloc_r+0xb8>
   11248:	00800504 	movi	r2,20
   1124c:	1100492e 	bgeu	r2,r4,11374 <_malloc_r+0x5e8>
   11250:	00801504 	movi	r2,84
   11254:	11005c36 	bltu	r2,r4,113c8 <_malloc_r+0x63c>
   11258:	8808d33a 	srli	r4,r17,12
   1125c:	21001b84 	addi	r4,r4,110
   11260:	210b883a 	add	r5,r4,r4
   11264:	003f1006 	br	10ea8 <_malloc_r+0x11c>
   11268:	1006d27a 	srli	r3,r2,9
   1126c:	01400104 	movi	r5,4
   11270:	28c0432e 	bgeu	r5,r3,11380 <_malloc_r+0x5f4>
   11274:	01400504 	movi	r5,20
   11278:	28c07036 	bltu	r5,r3,1143c <_malloc_r+0x6b0>
   1127c:	194016c4 	addi	r5,r3,91
   11280:	294d883a 	add	r6,r5,r5
   11284:	318d883a 	add	r6,r6,r6
   11288:	318d883a 	add	r6,r6,r6
   1128c:	998d883a 	add	r6,r19,r6
   11290:	30c00217 	ldw	r3,8(r6)
   11294:	01c00074 	movhi	r7,1
   11298:	39d92004 	addi	r7,r7,25728
   1129c:	19805726 	beq	r3,r6,113fc <_malloc_r+0x670>
   112a0:	01ffff04 	movi	r7,-4
   112a4:	19400117 	ldw	r5,4(r3)
   112a8:	29ca703a 	and	r5,r5,r7
   112ac:	1140022e 	bgeu	r2,r5,112b8 <_malloc_r+0x52c>
   112b0:	18c00217 	ldw	r3,8(r3)
   112b4:	30fffb1e 	bne	r6,r3,112a4 <_malloc_r+0x518>
   112b8:	19400317 	ldw	r5,12(r3)
   112bc:	98800117 	ldw	r2,4(r19)
   112c0:	81400315 	stw	r5,12(r16)
   112c4:	80c00215 	stw	r3,8(r16)
   112c8:	2c000215 	stw	r16,8(r5)
   112cc:	1c000315 	stw	r16,12(r3)
   112d0:	003f2b06 	br	10f80 <_malloc_r+0x1f4>
   112d4:	8445883a 	add	r2,r16,r17
   112d8:	8c400054 	ori	r17,r17,1
   112dc:	18800515 	stw	r2,20(r3)
   112e0:	18800415 	stw	r2,16(r3)
   112e4:	29000054 	ori	r4,r5,1
   112e8:	1147883a 	add	r3,r2,r5
   112ec:	84400115 	stw	r17,4(r16)
   112f0:	11000115 	stw	r4,4(r2)
   112f4:	12400315 	stw	r9,12(r2)
   112f8:	12400215 	stw	r9,8(r2)
   112fc:	19400015 	stw	r5,0(r3)
   11300:	9009883a 	mov	r4,r18
   11304:	00138ac0 	call	138ac <__malloc_unlock>
   11308:	80800204 	addi	r2,r16,8
   1130c:	003ecd06 	br	10e44 <_malloc_r+0xb8>
   11310:	18800117 	ldw	r2,4(r3)
   11314:	003f1a06 	br	10f80 <_malloc_r+0x1f4>
   11318:	5ac00044 	addi	r11,r11,1
   1131c:	588000cc 	andi	r2,r11,3
   11320:	52800204 	addi	r10,r10,8
   11324:	103f2e1e 	bne	r2,zero,10fe0 <_malloc_r+0x254>
   11328:	20c000cc 	andi	r3,r4,3
   1132c:	60bffe04 	addi	r2,r12,-8
   11330:	18006f26 	beq	r3,zero,114f0 <_malloc_r+0x764>
   11334:	63000017 	ldw	r12,0(r12)
   11338:	213fffc4 	addi	r4,r4,-1
   1133c:	60bffa26 	beq	r12,r2,11328 <_malloc_r+0x59c>
   11340:	98800117 	ldw	r2,4(r19)
   11344:	294b883a 	add	r5,r5,r5
   11348:	117f5a36 	bltu	r2,r5,110b4 <_malloc_r+0x328>
   1134c:	283f5926 	beq	r5,zero,110b4 <_malloc_r+0x328>
   11350:	1146703a 	and	r3,r2,r5
   11354:	18001626 	beq	r3,zero,113b0 <_malloc_r+0x624>
   11358:	5809883a 	mov	r4,r11
   1135c:	003f1a06 	br	10fc8 <_malloc_r+0x23c>
   11360:	80800204 	addi	r2,r16,8
   11364:	84000517 	ldw	r16,20(r16)
   11368:	143ea81e 	bne	r2,r16,10e0c <_malloc_r+0x80>
   1136c:	21000084 	addi	r4,r4,2
   11370:	003ee306 	br	10f00 <_malloc_r+0x174>
   11374:	210016c4 	addi	r4,r4,91
   11378:	210b883a 	add	r5,r4,r4
   1137c:	003eca06 	br	10ea8 <_malloc_r+0x11c>
   11380:	100ad1ba 	srli	r5,r2,6
   11384:	29400e04 	addi	r5,r5,56
   11388:	294d883a 	add	r6,r5,r5
   1138c:	003fbd06 	br	11284 <_malloc_r+0x4f8>
   11390:	84ff6026 	beq	r16,r19,11114 <_malloc_r+0x388>
   11394:	00800074 	movhi	r2,1
   11398:	10992004 	addi	r2,r2,25728
   1139c:	14000217 	ldw	r16,8(r2)
   113a0:	00bfff04 	movi	r2,-4
   113a4:	80c00117 	ldw	r3,4(r16)
   113a8:	1886703a 	and	r3,r3,r2
   113ac:	003f9406 	br	11200 <_malloc_r+0x474>
   113b0:	294b883a 	add	r5,r5,r5
   113b4:	1146703a 	and	r3,r2,r5
   113b8:	5ac00104 	addi	r11,r11,4
   113bc:	183ffc26 	beq	r3,zero,113b0 <_malloc_r+0x624>
   113c0:	5809883a 	mov	r4,r11
   113c4:	003f0006 	br	10fc8 <_malloc_r+0x23c>
   113c8:	00805504 	movi	r2,340
   113cc:	11001336 	bltu	r2,r4,1141c <_malloc_r+0x690>
   113d0:	8808d3fa 	srli	r4,r17,15
   113d4:	21001dc4 	addi	r4,r4,119
   113d8:	210b883a 	add	r5,r4,r4
   113dc:	003eb206 	br	10ea8 <_malloc_r+0x11c>
   113e0:	00840004 	movi	r2,4096
   113e4:	003f5d06 	br	1115c <_malloc_r+0x3d0>
   113e8:	00800044 	movi	r2,1
   113ec:	a0800115 	stw	r2,4(r20)
   113f0:	a021883a 	mov	r16,r20
   113f4:	0007883a 	mov	r3,zero
   113f8:	003f8106 	br	11200 <_malloc_r+0x474>
   113fc:	280bd0ba 	srai	r5,r5,2
   11400:	01800044 	movi	r6,1
   11404:	38800117 	ldw	r2,4(r7)
   11408:	314c983a 	sll	r6,r6,r5
   1140c:	180b883a 	mov	r5,r3
   11410:	3084b03a 	or	r2,r6,r2
   11414:	38800115 	stw	r2,4(r7)
   11418:	003fa906 	br	112c0 <_malloc_r+0x534>
   1141c:	00815504 	movi	r2,1364
   11420:	11001836 	bltu	r2,r4,11484 <_malloc_r+0x6f8>
   11424:	8808d4ba 	srli	r4,r17,18
   11428:	21001f04 	addi	r4,r4,124
   1142c:	210b883a 	add	r5,r4,r4
   11430:	003e9d06 	br	10ea8 <_malloc_r+0x11c>
   11434:	bdc00404 	addi	r23,r23,16
   11438:	003f2f06 	br	110f8 <_malloc_r+0x36c>
   1143c:	01401504 	movi	r5,84
   11440:	28c01f36 	bltu	r5,r3,114c0 <_malloc_r+0x734>
   11444:	100ad33a 	srli	r5,r2,12
   11448:	29401b84 	addi	r5,r5,110
   1144c:	294d883a 	add	r6,r5,r5
   11450:	003f8c06 	br	11284 <_malloc_r+0x4f8>
   11454:	9c000217 	ldw	r16,8(r19)
   11458:	00bfff04 	movi	r2,-4
   1145c:	80c00117 	ldw	r3,4(r16)
   11460:	1886703a 	and	r3,r3,r2
   11464:	003f6606 	br	11200 <_malloc_r+0x474>
   11468:	e0c3ffcc 	andi	r3,fp,4095
   1146c:	183f2f1e 	bne	r3,zero,1112c <_malloc_r+0x3a0>
   11470:	98c00217 	ldw	r3,8(r19)
   11474:	bd49883a 	add	r4,r23,r21
   11478:	21000054 	ori	r4,r4,1
   1147c:	19000115 	stw	r4,4(r3)
   11480:	003f5506 	br	111d8 <_malloc_r+0x44c>
   11484:	01403f04 	movi	r5,252
   11488:	01001f84 	movi	r4,126
   1148c:	003e8606 	br	10ea8 <_malloc_r+0x11c>
   11490:	9009883a 	mov	r4,r18
   11494:	81400204 	addi	r5,r16,8
   11498:	00126e80 	call	126e8 <_free_r>
   1149c:	008000b4 	movhi	r2,2
   114a0:	10a56e04 	addi	r2,r2,-27208
   114a4:	10800017 	ldw	r2,0(r2)
   114a8:	003f4b06 	br	111d8 <_malloc_r+0x44c>
   114ac:	00c00044 	movi	r3,1
   114b0:	002f883a 	mov	r23,zero
   114b4:	003f3406 	br	11188 <_malloc_r+0x3fc>
   114b8:	d5200215 	stw	r20,-32760(gp)
   114bc:	003f2106 	br	11144 <_malloc_r+0x3b8>
   114c0:	01405504 	movi	r5,340
   114c4:	28c00436 	bltu	r5,r3,114d8 <_malloc_r+0x74c>
   114c8:	100ad3fa 	srli	r5,r2,15
   114cc:	29401dc4 	addi	r5,r5,119
   114d0:	294d883a 	add	r6,r5,r5
   114d4:	003f6b06 	br	11284 <_malloc_r+0x4f8>
   114d8:	01415504 	movi	r5,1364
   114dc:	28c00936 	bltu	r5,r3,11504 <_malloc_r+0x778>
   114e0:	100ad4ba 	srli	r5,r2,18
   114e4:	29401f04 	addi	r5,r5,124
   114e8:	294d883a 	add	r6,r5,r5
   114ec:	003f6506 	br	11284 <_malloc_r+0x4f8>
   114f0:	98800117 	ldw	r2,4(r19)
   114f4:	0146303a 	nor	r3,zero,r5
   114f8:	1884703a 	and	r2,r3,r2
   114fc:	98800115 	stw	r2,4(r19)
   11500:	003f9006 	br	11344 <_malloc_r+0x5b8>
   11504:	01803f04 	movi	r6,252
   11508:	01401f84 	movi	r5,126
   1150c:	003f5d06 	br	11284 <_malloc_r+0x4f8>

00011510 <memchr>:
   11510:	008000c4 	movi	r2,3
   11514:	29403fcc 	andi	r5,r5,255
   11518:	1180282e 	bgeu	r2,r6,115bc <memchr+0xac>
   1151c:	2086703a 	and	r3,r4,r2
   11520:	1800351e 	bne	r3,zero,115f8 <memchr+0xe8>
   11524:	2816923a 	slli	r11,r5,8
   11528:	2093883a 	add	r9,r4,r2
   1152c:	22000084 	addi	r8,r4,2
   11530:	5957883a 	add	r11,r11,r5
   11534:	5816923a 	slli	r11,r11,8
   11538:	20c00044 	addi	r3,r4,1
   1153c:	037fbff4 	movhi	r13,65279
   11540:	6b7fbfc4 	addi	r13,r13,-257
   11544:	5957883a 	add	r11,r11,r5
   11548:	5816923a 	slli	r11,r11,8
   1154c:	03202074 	movhi	r12,32897
   11550:	63202004 	addi	r12,r12,-32640
   11554:	101d883a 	mov	r14,r2
   11558:	5957883a 	add	r11,r11,r5
   1155c:	21c00017 	ldw	r7,0(r4)
   11560:	31bfff04 	addi	r6,r6,-4
   11564:	1805883a 	mov	r2,r3
   11568:	3acef03a 	xor	r7,r7,r11
   1156c:	3b55883a 	add	r10,r7,r13
   11570:	01ce303a 	nor	r7,zero,r7
   11574:	51ce703a 	and	r7,r10,r7
   11578:	3b0e703a 	and	r7,r7,r12
   1157c:	38000a26 	beq	r7,zero,115a8 <memchr+0x98>
   11580:	21c00003 	ldbu	r7,0(r4)
   11584:	39401e26 	beq	r7,r5,11600 <memchr+0xf0>
   11588:	19c00003 	ldbu	r7,0(r3)
   1158c:	39401926 	beq	r7,r5,115f4 <memchr+0xe4>
   11590:	41c00003 	ldbu	r7,0(r8)
   11594:	4005883a 	mov	r2,r8
   11598:	39401626 	beq	r7,r5,115f4 <memchr+0xe4>
   1159c:	49c00003 	ldbu	r7,0(r9)
   115a0:	4805883a 	mov	r2,r9
   115a4:	39401326 	beq	r7,r5,115f4 <memchr+0xe4>
   115a8:	21000104 	addi	r4,r4,4
   115ac:	4a400104 	addi	r9,r9,4
   115b0:	42000104 	addi	r8,r8,4
   115b4:	18c00104 	addi	r3,r3,4
   115b8:	71bfe836 	bltu	r14,r6,1155c <memchr+0x4c>
   115bc:	2005883a 	mov	r2,r4
   115c0:	30000a26 	beq	r6,zero,115ec <memchr+0xdc>
   115c4:	10c00003 	ldbu	r3,0(r2)
   115c8:	19400a26 	beq	r3,r5,115f4 <memchr+0xe4>
   115cc:	10c00044 	addi	r3,r2,1
   115d0:	118d883a 	add	r6,r2,r6
   115d4:	00000306 	br	115e4 <memchr+0xd4>
   115d8:	11000003 	ldbu	r4,0(r2)
   115dc:	18c00044 	addi	r3,r3,1
   115e0:	21400426 	beq	r4,r5,115f4 <memchr+0xe4>
   115e4:	1805883a 	mov	r2,r3
   115e8:	19bffb1e 	bne	r3,r6,115d8 <memchr+0xc8>
   115ec:	0005883a 	mov	r2,zero
   115f0:	f800283a 	ret
   115f4:	f800283a 	ret
   115f8:	2005883a 	mov	r2,r4
   115fc:	003ff106 	br	115c4 <memchr+0xb4>
   11600:	2005883a 	mov	r2,r4
   11604:	f800283a 	ret

00011608 <memcpy>:
   11608:	defffb04 	addi	sp,sp,-20
   1160c:	dc000015 	stw	r16,0(sp)
   11610:	dfc00415 	stw	ra,16(sp)
   11614:	dcc00315 	stw	r19,12(sp)
   11618:	dc800215 	stw	r18,8(sp)
   1161c:	dc400115 	stw	r17,4(sp)
   11620:	00c003c4 	movi	r3,15
   11624:	2021883a 	mov	r16,r4
   11628:	3005883a 	mov	r2,r6
   1162c:	1980032e 	bgeu	r3,r6,1163c <memcpy+0x34>
   11630:	2906b03a 	or	r3,r5,r4
   11634:	18c000cc 	andi	r3,r3,3
   11638:	18001026 	beq	r3,zero,1167c <memcpy+0x74>
   1163c:	8007883a 	mov	r3,r16
   11640:	288f883a 	add	r7,r5,r2
   11644:	10000526 	beq	r2,zero,1165c <memcpy+0x54>
   11648:	29800003 	ldbu	r6,0(r5)
   1164c:	18c00044 	addi	r3,r3,1
   11650:	29400044 	addi	r5,r5,1
   11654:	19bfffc5 	stb	r6,-1(r3)
   11658:	29fffb1e 	bne	r5,r7,11648 <memcpy+0x40>
   1165c:	8005883a 	mov	r2,r16
   11660:	dfc00417 	ldw	ra,16(sp)
   11664:	dcc00317 	ldw	r19,12(sp)
   11668:	dc800217 	ldw	r18,8(sp)
   1166c:	dc400117 	ldw	r17,4(sp)
   11670:	dc000017 	ldw	r16,0(sp)
   11674:	dec00504 	addi	sp,sp,20
   11678:	f800283a 	ret
   1167c:	32bffc04 	addi	r10,r6,-16
   11680:	5014d13a 	srli	r10,r10,4
   11684:	20800404 	addi	r2,r4,16
   11688:	2007883a 	mov	r3,r4
   1168c:	5008913a 	slli	r4,r10,4
   11690:	280f883a 	mov	r7,r5
   11694:	1105883a 	add	r2,r2,r4
   11698:	3a000017 	ldw	r8,0(r7)
   1169c:	18c00404 	addi	r3,r3,16
   116a0:	39c00404 	addi	r7,r7,16
   116a4:	1a3ffc15 	stw	r8,-16(r3)
   116a8:	3a3ffd17 	ldw	r8,-12(r7)
   116ac:	1a3ffd15 	stw	r8,-12(r3)
   116b0:	3a3ffe17 	ldw	r8,-8(r7)
   116b4:	1a3ffe15 	stw	r8,-8(r3)
   116b8:	3a3fff17 	ldw	r8,-4(r7)
   116bc:	1a3fff15 	stw	r8,-4(r3)
   116c0:	18bff51e 	bne	r3,r2,11698 <memcpy+0x90>
   116c4:	52800044 	addi	r10,r10,1
   116c8:	5014913a 	slli	r10,r10,4
   116cc:	308003cc 	andi	r2,r6,15
   116d0:	010000c4 	movi	r4,3
   116d4:	8287883a 	add	r3,r16,r10
   116d8:	2a95883a 	add	r10,r5,r10
   116dc:	2080182e 	bgeu	r4,r2,11740 <memcpy+0x138>
   116e0:	147fff04 	addi	r17,r2,-4
   116e4:	8808d0ba 	srli	r4,r17,2
   116e8:	1a400104 	addi	r9,r3,4
   116ec:	180d883a 	mov	r6,r3
   116f0:	2105883a 	add	r2,r4,r4
   116f4:	1085883a 	add	r2,r2,r2
   116f8:	4893883a 	add	r9,r9,r2
   116fc:	500f883a 	mov	r7,r10
   11700:	3a000017 	ldw	r8,0(r7)
   11704:	31800104 	addi	r6,r6,4
   11708:	39c00104 	addi	r7,r7,4
   1170c:	323fff15 	stw	r8,-4(r6)
   11710:	327ffb1e 	bne	r6,r9,11700 <memcpy+0xf8>
   11714:	20800044 	addi	r2,r4,1
   11718:	1085883a 	add	r2,r2,r2
   1171c:	1085883a 	add	r2,r2,r2
   11720:	017fff04 	movi	r5,-4
   11724:	18a5883a 	add	r18,r3,r2
   11728:	50a7883a 	add	r19,r10,r2
   1172c:	00132a00 	call	132a0 <__mulsi3>
   11730:	1445883a 	add	r2,r2,r17
   11734:	980b883a 	mov	r5,r19
   11738:	9007883a 	mov	r3,r18
   1173c:	003fc006 	br	11640 <memcpy+0x38>
   11740:	500b883a 	mov	r5,r10
   11744:	003fbe06 	br	11640 <memcpy+0x38>

00011748 <memmove>:
   11748:	defffb04 	addi	sp,sp,-20
   1174c:	dc000015 	stw	r16,0(sp)
   11750:	dfc00415 	stw	ra,16(sp)
   11754:	dcc00315 	stw	r19,12(sp)
   11758:	dc800215 	stw	r18,8(sp)
   1175c:	dc400115 	stw	r17,4(sp)
   11760:	2021883a 	mov	r16,r4
   11764:	300f883a 	mov	r7,r6
   11768:	2900122e 	bgeu	r5,r4,117b4 <memmove+0x6c>
   1176c:	2987883a 	add	r3,r5,r6
   11770:	20c0102e 	bgeu	r4,r3,117b4 <memmove+0x6c>
   11774:	218b883a 	add	r5,r4,r6
   11778:	1989c83a 	sub	r4,r3,r6
   1177c:	30000526 	beq	r6,zero,11794 <memmove+0x4c>
   11780:	18ffffc4 	addi	r3,r3,-1
   11784:	18800003 	ldbu	r2,0(r3)
   11788:	297fffc4 	addi	r5,r5,-1
   1178c:	28800005 	stb	r2,0(r5)
   11790:	193ffb1e 	bne	r3,r4,11780 <memmove+0x38>
   11794:	8005883a 	mov	r2,r16
   11798:	dfc00417 	ldw	ra,16(sp)
   1179c:	dcc00317 	ldw	r19,12(sp)
   117a0:	dc800217 	ldw	r18,8(sp)
   117a4:	dc400117 	ldw	r17,4(sp)
   117a8:	dc000017 	ldw	r16,0(sp)
   117ac:	dec00504 	addi	sp,sp,20
   117b0:	f800283a 	ret
   117b4:	008003c4 	movi	r2,15
   117b8:	1180422e 	bgeu	r2,r6,118c4 <memmove+0x17c>
   117bc:	2c04b03a 	or	r2,r5,r16
   117c0:	108000cc 	andi	r2,r2,3
   117c4:	10003f1e 	bne	r2,zero,118c4 <memmove+0x17c>
   117c8:	32bffc04 	addi	r10,r6,-16
   117cc:	5014d13a 	srli	r10,r10,4
   117d0:	81000404 	addi	r4,r16,16
   117d4:	8007883a 	mov	r3,r16
   117d8:	5004913a 	slli	r2,r10,4
   117dc:	280f883a 	mov	r7,r5
   117e0:	2089883a 	add	r4,r4,r2
   117e4:	38800017 	ldw	r2,0(r7)
   117e8:	18c00404 	addi	r3,r3,16
   117ec:	39c00404 	addi	r7,r7,16
   117f0:	18bffc15 	stw	r2,-16(r3)
   117f4:	38bffd17 	ldw	r2,-12(r7)
   117f8:	18bffd15 	stw	r2,-12(r3)
   117fc:	38bffe17 	ldw	r2,-8(r7)
   11800:	18bffe15 	stw	r2,-8(r3)
   11804:	38bfff17 	ldw	r2,-4(r7)
   11808:	18bfff15 	stw	r2,-4(r3)
   1180c:	193ff51e 	bne	r3,r4,117e4 <memmove+0x9c>
   11810:	52800044 	addi	r10,r10,1
   11814:	5014913a 	slli	r10,r10,4
   11818:	31c003cc 	andi	r7,r6,15
   1181c:	008000c4 	movi	r2,3
   11820:	8287883a 	add	r3,r16,r10
   11824:	2a95883a 	add	r10,r5,r10
   11828:	11c0282e 	bgeu	r2,r7,118cc <memmove+0x184>
   1182c:	3c7fff04 	addi	r17,r7,-4
   11830:	8808d0ba 	srli	r4,r17,2
   11834:	1a400104 	addi	r9,r3,4
   11838:	180d883a 	mov	r6,r3
   1183c:	2105883a 	add	r2,r4,r4
   11840:	1085883a 	add	r2,r2,r2
   11844:	4893883a 	add	r9,r9,r2
   11848:	5005883a 	mov	r2,r10
   1184c:	12000017 	ldw	r8,0(r2)
   11850:	31800104 	addi	r6,r6,4
   11854:	10800104 	addi	r2,r2,4
   11858:	323fff15 	stw	r8,-4(r6)
   1185c:	327ffb1e 	bne	r6,r9,1184c <memmove+0x104>
   11860:	20800044 	addi	r2,r4,1
   11864:	1085883a 	add	r2,r2,r2
   11868:	1085883a 	add	r2,r2,r2
   1186c:	017fff04 	movi	r5,-4
   11870:	18a5883a 	add	r18,r3,r2
   11874:	50a7883a 	add	r19,r10,r2
   11878:	00132a00 	call	132a0 <__mulsi3>
   1187c:	144f883a 	add	r7,r2,r17
   11880:	980b883a 	mov	r5,r19
   11884:	9007883a 	mov	r3,r18
   11888:	383fc226 	beq	r7,zero,11794 <memmove+0x4c>
   1188c:	19cf883a 	add	r7,r3,r7
   11890:	29800003 	ldbu	r6,0(r5)
   11894:	18c00044 	addi	r3,r3,1
   11898:	29400044 	addi	r5,r5,1
   1189c:	19bfffc5 	stb	r6,-1(r3)
   118a0:	19fffb1e 	bne	r3,r7,11890 <memmove+0x148>
   118a4:	8005883a 	mov	r2,r16
   118a8:	dfc00417 	ldw	ra,16(sp)
   118ac:	dcc00317 	ldw	r19,12(sp)
   118b0:	dc800217 	ldw	r18,8(sp)
   118b4:	dc400117 	ldw	r17,4(sp)
   118b8:	dc000017 	ldw	r16,0(sp)
   118bc:	dec00504 	addi	sp,sp,20
   118c0:	f800283a 	ret
   118c4:	8007883a 	mov	r3,r16
   118c8:	003fef06 	br	11888 <memmove+0x140>
   118cc:	500b883a 	mov	r5,r10
   118d0:	003fed06 	br	11888 <memmove+0x140>

000118d4 <_realloc_r>:
   118d4:	defff504 	addi	sp,sp,-44
   118d8:	dd400615 	stw	r21,24(sp)
   118dc:	dc800315 	stw	r18,12(sp)
   118e0:	dc000115 	stw	r16,4(sp)
   118e4:	dfc00a15 	stw	ra,40(sp)
   118e8:	df000915 	stw	fp,36(sp)
   118ec:	ddc00815 	stw	r23,32(sp)
   118f0:	dd800715 	stw	r22,28(sp)
   118f4:	dd000515 	stw	r20,20(sp)
   118f8:	dcc00415 	stw	r19,16(sp)
   118fc:	dc400215 	stw	r17,8(sp)
   11900:	2821883a 	mov	r16,r5
   11904:	202b883a 	mov	r21,r4
   11908:	3025883a 	mov	r18,r6
   1190c:	28009626 	beq	r5,zero,11b68 <_realloc_r+0x294>
   11910:	001388c0 	call	1388c <__malloc_lock>
   11914:	80bfff17 	ldw	r2,-4(r16)
   11918:	04ffff04 	movi	r19,-4
   1191c:	90c002c4 	addi	r3,r18,11
   11920:	01000584 	movi	r4,22
   11924:	85bffe04 	addi	r22,r16,-8
   11928:	14e6703a 	and	r19,r2,r19
   1192c:	20c0372e 	bgeu	r4,r3,11a0c <_realloc_r+0x138>
   11930:	047ffe04 	movi	r17,-8
   11934:	1c62703a 	and	r17,r3,r17
   11938:	8807883a 	mov	r3,r17
   1193c:	88005a16 	blt	r17,zero,11aa8 <_realloc_r+0x1d4>
   11940:	8c805936 	bltu	r17,r18,11aa8 <_realloc_r+0x1d4>
   11944:	98c0340e 	bge	r19,r3,11a18 <_realloc_r+0x144>
   11948:	07000074 	movhi	fp,1
   1194c:	e7192004 	addi	fp,fp,25728
   11950:	e1400217 	ldw	r5,8(fp)
   11954:	b4c9883a 	add	r4,r22,r19
   11958:	29009026 	beq	r5,r4,11b9c <_realloc_r+0x2c8>
   1195c:	21800117 	ldw	r6,4(r4)
   11960:	01ffff84 	movi	r7,-2
   11964:	31ce703a 	and	r7,r6,r7
   11968:	21cf883a 	add	r7,r4,r7
   1196c:	39c00117 	ldw	r7,4(r7)
   11970:	39c0004c 	andi	r7,r7,1
   11974:	38004326 	beq	r7,zero,11a84 <_realloc_r+0x1b0>
   11978:	000d883a 	mov	r6,zero
   1197c:	0009883a 	mov	r4,zero
   11980:	1080004c 	andi	r2,r2,1
   11984:	10005a1e 	bne	r2,zero,11af0 <_realloc_r+0x21c>
   11988:	85fffe17 	ldw	r23,-8(r16)
   1198c:	00bfff04 	movi	r2,-4
   11990:	b5efc83a 	sub	r23,r22,r23
   11994:	b9c00117 	ldw	r7,4(r23)
   11998:	388e703a 	and	r7,r7,r2
   1199c:	3ccf883a 	add	r7,r7,r19
   119a0:	20005226 	beq	r4,zero,11aec <_realloc_r+0x218>
   119a4:	31e9883a 	add	r20,r6,r7
   119a8:	2140c726 	beq	r4,r5,11cc8 <_realloc_r+0x3f4>
   119ac:	a0c04f16 	blt	r20,r3,11aec <_realloc_r+0x218>
   119b0:	20800317 	ldw	r2,12(r4)
   119b4:	20c00217 	ldw	r3,8(r4)
   119b8:	99bfff04 	addi	r6,r19,-4
   119bc:	01000904 	movi	r4,36
   119c0:	18800315 	stw	r2,12(r3)
   119c4:	10c00215 	stw	r3,8(r2)
   119c8:	b8c00217 	ldw	r3,8(r23)
   119cc:	b8800317 	ldw	r2,12(r23)
   119d0:	bc800204 	addi	r18,r23,8
   119d4:	18800315 	stw	r2,12(r3)
   119d8:	10c00215 	stw	r3,8(r2)
   119dc:	2180ed36 	bltu	r4,r6,11d94 <_realloc_r+0x4c0>
   119e0:	008004c4 	movi	r2,19
   119e4:	11809b2e 	bgeu	r2,r6,11c54 <_realloc_r+0x380>
   119e8:	80800017 	ldw	r2,0(r16)
   119ec:	b8800215 	stw	r2,8(r23)
   119f0:	80800117 	ldw	r2,4(r16)
   119f4:	b8800315 	stw	r2,12(r23)
   119f8:	008006c4 	movi	r2,27
   119fc:	1180f936 	bltu	r2,r6,11de4 <_realloc_r+0x510>
   11a00:	b8800404 	addi	r2,r23,16
   11a04:	80c00204 	addi	r3,r16,8
   11a08:	00009406 	br	11c5c <_realloc_r+0x388>
   11a0c:	00c00404 	movi	r3,16
   11a10:	1823883a 	mov	r17,r3
   11a14:	003fca06 	br	11940 <_realloc_r+0x6c>
   11a18:	9829883a 	mov	r20,r19
   11a1c:	a447c83a 	sub	r3,r20,r17
   11a20:	010003c4 	movi	r4,15
   11a24:	1080004c 	andi	r2,r2,1
   11a28:	20c02336 	bltu	r4,r3,11ab8 <_realloc_r+0x1e4>
   11a2c:	1504b03a 	or	r2,r2,r20
   11a30:	b0800115 	stw	r2,4(r22)
   11a34:	b52d883a 	add	r22,r22,r20
   11a38:	b0800117 	ldw	r2,4(r22)
   11a3c:	10800054 	ori	r2,r2,1
   11a40:	b0800115 	stw	r2,4(r22)
   11a44:	a809883a 	mov	r4,r21
   11a48:	00138ac0 	call	138ac <__malloc_unlock>
   11a4c:	8025883a 	mov	r18,r16
   11a50:	9005883a 	mov	r2,r18
   11a54:	dfc00a17 	ldw	ra,40(sp)
   11a58:	df000917 	ldw	fp,36(sp)
   11a5c:	ddc00817 	ldw	r23,32(sp)
   11a60:	dd800717 	ldw	r22,28(sp)
   11a64:	dd400617 	ldw	r21,24(sp)
   11a68:	dd000517 	ldw	r20,20(sp)
   11a6c:	dcc00417 	ldw	r19,16(sp)
   11a70:	dc800317 	ldw	r18,12(sp)
   11a74:	dc400217 	ldw	r17,8(sp)
   11a78:	dc000117 	ldw	r16,4(sp)
   11a7c:	dec00b04 	addi	sp,sp,44
   11a80:	f800283a 	ret
   11a84:	01ffff04 	movi	r7,-4
   11a88:	31cc703a 	and	r6,r6,r7
   11a8c:	34e9883a 	add	r20,r6,r19
   11a90:	a0ffbb16 	blt	r20,r3,11980 <_realloc_r+0xac>
   11a94:	20c00317 	ldw	r3,12(r4)
   11a98:	21000217 	ldw	r4,8(r4)
   11a9c:	20c00315 	stw	r3,12(r4)
   11aa0:	19000215 	stw	r4,8(r3)
   11aa4:	003fdd06 	br	11a1c <_realloc_r+0x148>
   11aa8:	00800304 	movi	r2,12
   11aac:	a8800015 	stw	r2,0(r21)
   11ab0:	0025883a 	mov	r18,zero
   11ab4:	003fe606 	br	11a50 <_realloc_r+0x17c>
   11ab8:	1444b03a 	or	r2,r2,r17
   11abc:	b0800115 	stw	r2,4(r22)
   11ac0:	b44b883a 	add	r5,r22,r17
   11ac4:	18800054 	ori	r2,r3,1
   11ac8:	28800115 	stw	r2,4(r5)
   11acc:	28c7883a 	add	r3,r5,r3
   11ad0:	18800117 	ldw	r2,4(r3)
   11ad4:	a809883a 	mov	r4,r21
   11ad8:	29400204 	addi	r5,r5,8
   11adc:	10800054 	ori	r2,r2,1
   11ae0:	18800115 	stw	r2,4(r3)
   11ae4:	00126e80 	call	126e8 <_free_r>
   11ae8:	003fd606 	br	11a44 <_realloc_r+0x170>
   11aec:	38c0330e 	bge	r7,r3,11bbc <_realloc_r+0x2e8>
   11af0:	900b883a 	mov	r5,r18
   11af4:	a809883a 	mov	r4,r21
   11af8:	0010d8c0 	call	10d8c <_malloc_r>
   11afc:	1025883a 	mov	r18,r2
   11b00:	10001626 	beq	r2,zero,11b5c <_realloc_r+0x288>
   11b04:	80bfff17 	ldw	r2,-4(r16)
   11b08:	00ffff84 	movi	r3,-2
   11b0c:	913ffe04 	addi	r4,r18,-8
   11b10:	10c6703a 	and	r3,r2,r3
   11b14:	b0c7883a 	add	r3,r22,r3
   11b18:	20c09926 	beq	r4,r3,11d80 <_realloc_r+0x4ac>
   11b1c:	99bfff04 	addi	r6,r19,-4
   11b20:	00800904 	movi	r2,36
   11b24:	11806436 	bltu	r2,r6,11cb8 <_realloc_r+0x3e4>
   11b28:	00c004c4 	movi	r3,19
   11b2c:	19804036 	bltu	r3,r6,11c30 <_realloc_r+0x35c>
   11b30:	9005883a 	mov	r2,r18
   11b34:	8007883a 	mov	r3,r16
   11b38:	19000017 	ldw	r4,0(r3)
   11b3c:	11000015 	stw	r4,0(r2)
   11b40:	19000117 	ldw	r4,4(r3)
   11b44:	11000115 	stw	r4,4(r2)
   11b48:	18c00217 	ldw	r3,8(r3)
   11b4c:	10c00215 	stw	r3,8(r2)
   11b50:	a809883a 	mov	r4,r21
   11b54:	800b883a 	mov	r5,r16
   11b58:	00126e80 	call	126e8 <_free_r>
   11b5c:	a809883a 	mov	r4,r21
   11b60:	00138ac0 	call	138ac <__malloc_unlock>
   11b64:	003fba06 	br	11a50 <_realloc_r+0x17c>
   11b68:	300b883a 	mov	r5,r6
   11b6c:	dfc00a17 	ldw	ra,40(sp)
   11b70:	df000917 	ldw	fp,36(sp)
   11b74:	ddc00817 	ldw	r23,32(sp)
   11b78:	dd800717 	ldw	r22,28(sp)
   11b7c:	dd400617 	ldw	r21,24(sp)
   11b80:	dd000517 	ldw	r20,20(sp)
   11b84:	dcc00417 	ldw	r19,16(sp)
   11b88:	dc800317 	ldw	r18,12(sp)
   11b8c:	dc400217 	ldw	r17,8(sp)
   11b90:	dc000117 	ldw	r16,4(sp)
   11b94:	dec00b04 	addi	sp,sp,44
   11b98:	0010d8c1 	jmpi	10d8c <_malloc_r>
   11b9c:	29800117 	ldw	r6,4(r5)
   11ba0:	013fff04 	movi	r4,-4
   11ba4:	89c00404 	addi	r7,r17,16
   11ba8:	310c703a 	and	r6,r6,r4
   11bac:	34c9883a 	add	r4,r6,r19
   11bb0:	21c0340e 	bge	r4,r7,11c84 <_realloc_r+0x3b0>
   11bb4:	2809883a 	mov	r4,r5
   11bb8:	003f7106 	br	11980 <_realloc_r+0xac>
   11bbc:	b8800317 	ldw	r2,12(r23)
   11bc0:	b8c00217 	ldw	r3,8(r23)
   11bc4:	99bfff04 	addi	r6,r19,-4
   11bc8:	01000904 	movi	r4,36
   11bcc:	18800315 	stw	r2,12(r3)
   11bd0:	10c00215 	stw	r3,8(r2)
   11bd4:	bc800204 	addi	r18,r23,8
   11bd8:	21807836 	bltu	r4,r6,11dbc <_realloc_r+0x4e8>
   11bdc:	008004c4 	movi	r2,19
   11be0:	1180732e 	bgeu	r2,r6,11db0 <_realloc_r+0x4dc>
   11be4:	80800017 	ldw	r2,0(r16)
   11be8:	b8800215 	stw	r2,8(r23)
   11bec:	80800117 	ldw	r2,4(r16)
   11bf0:	b8800315 	stw	r2,12(r23)
   11bf4:	008006c4 	movi	r2,27
   11bf8:	11808936 	bltu	r2,r6,11e20 <_realloc_r+0x54c>
   11bfc:	b8800404 	addi	r2,r23,16
   11c00:	80c00204 	addi	r3,r16,8
   11c04:	19000017 	ldw	r4,0(r3)
   11c08:	9021883a 	mov	r16,r18
   11c0c:	3829883a 	mov	r20,r7
   11c10:	11000015 	stw	r4,0(r2)
   11c14:	19000117 	ldw	r4,4(r3)
   11c18:	b82d883a 	mov	r22,r23
   11c1c:	11000115 	stw	r4,4(r2)
   11c20:	18c00217 	ldw	r3,8(r3)
   11c24:	10c00215 	stw	r3,8(r2)
   11c28:	b8800117 	ldw	r2,4(r23)
   11c2c:	003f7b06 	br	11a1c <_realloc_r+0x148>
   11c30:	80c00017 	ldw	r3,0(r16)
   11c34:	90c00015 	stw	r3,0(r18)
   11c38:	80c00117 	ldw	r3,4(r16)
   11c3c:	90c00115 	stw	r3,4(r18)
   11c40:	00c006c4 	movi	r3,27
   11c44:	19804636 	bltu	r3,r6,11d60 <_realloc_r+0x48c>
   11c48:	90800204 	addi	r2,r18,8
   11c4c:	80c00204 	addi	r3,r16,8
   11c50:	003fb906 	br	11b38 <_realloc_r+0x264>
   11c54:	9005883a 	mov	r2,r18
   11c58:	8007883a 	mov	r3,r16
   11c5c:	19000017 	ldw	r4,0(r3)
   11c60:	9021883a 	mov	r16,r18
   11c64:	b82d883a 	mov	r22,r23
   11c68:	11000015 	stw	r4,0(r2)
   11c6c:	19000117 	ldw	r4,4(r3)
   11c70:	11000115 	stw	r4,4(r2)
   11c74:	18c00217 	ldw	r3,8(r3)
   11c78:	10c00215 	stw	r3,8(r2)
   11c7c:	b8800117 	ldw	r2,4(r23)
   11c80:	003f6606 	br	11a1c <_realloc_r+0x148>
   11c84:	2445c83a 	sub	r2,r4,r17
   11c88:	b46d883a 	add	r22,r22,r17
   11c8c:	10800054 	ori	r2,r2,1
   11c90:	b0800115 	stw	r2,4(r22)
   11c94:	80bfff17 	ldw	r2,-4(r16)
   11c98:	a809883a 	mov	r4,r21
   11c9c:	e5800215 	stw	r22,8(fp)
   11ca0:	1080004c 	andi	r2,r2,1
   11ca4:	88a2b03a 	or	r17,r17,r2
   11ca8:	847fff15 	stw	r17,-4(r16)
   11cac:	00138ac0 	call	138ac <__malloc_unlock>
   11cb0:	8025883a 	mov	r18,r16
   11cb4:	003f6606 	br	11a50 <_realloc_r+0x17c>
   11cb8:	9009883a 	mov	r4,r18
   11cbc:	800b883a 	mov	r5,r16
   11cc0:	00117480 	call	11748 <memmove>
   11cc4:	003fa206 	br	11b50 <_realloc_r+0x27c>
   11cc8:	88800404 	addi	r2,r17,16
   11ccc:	a0bf8716 	blt	r20,r2,11aec <_realloc_r+0x218>
   11cd0:	b8800317 	ldw	r2,12(r23)
   11cd4:	b8c00217 	ldw	r3,8(r23)
   11cd8:	99bfff04 	addi	r6,r19,-4
   11cdc:	01000904 	movi	r4,36
   11ce0:	18800315 	stw	r2,12(r3)
   11ce4:	10c00215 	stw	r3,8(r2)
   11ce8:	bc800204 	addi	r18,r23,8
   11cec:	21806536 	bltu	r4,r6,11e84 <_realloc_r+0x5b0>
   11cf0:	008004c4 	movi	r2,19
   11cf4:	1180592e 	bgeu	r2,r6,11e5c <_realloc_r+0x588>
   11cf8:	80800017 	ldw	r2,0(r16)
   11cfc:	b8800215 	stw	r2,8(r23)
   11d00:	80800117 	ldw	r2,4(r16)
   11d04:	b8800315 	stw	r2,12(r23)
   11d08:	008006c4 	movi	r2,27
   11d0c:	11806136 	bltu	r2,r6,11e94 <_realloc_r+0x5c0>
   11d10:	b8800404 	addi	r2,r23,16
   11d14:	80c00204 	addi	r3,r16,8
   11d18:	19000017 	ldw	r4,0(r3)
   11d1c:	11000015 	stw	r4,0(r2)
   11d20:	19000117 	ldw	r4,4(r3)
   11d24:	11000115 	stw	r4,4(r2)
   11d28:	18c00217 	ldw	r3,8(r3)
   11d2c:	10c00215 	stw	r3,8(r2)
   11d30:	a447c83a 	sub	r3,r20,r17
   11d34:	bc45883a 	add	r2,r23,r17
   11d38:	18c00054 	ori	r3,r3,1
   11d3c:	10c00115 	stw	r3,4(r2)
   11d40:	b8c00117 	ldw	r3,4(r23)
   11d44:	e0800215 	stw	r2,8(fp)
   11d48:	a809883a 	mov	r4,r21
   11d4c:	1880004c 	andi	r2,r3,1
   11d50:	88a2b03a 	or	r17,r17,r2
   11d54:	bc400115 	stw	r17,4(r23)
   11d58:	00138ac0 	call	138ac <__malloc_unlock>
   11d5c:	003f3c06 	br	11a50 <_realloc_r+0x17c>
   11d60:	80c00217 	ldw	r3,8(r16)
   11d64:	90c00215 	stw	r3,8(r18)
   11d68:	80c00317 	ldw	r3,12(r16)
   11d6c:	90c00315 	stw	r3,12(r18)
   11d70:	30802426 	beq	r6,r2,11e04 <_realloc_r+0x530>
   11d74:	90800404 	addi	r2,r18,16
   11d78:	80c00404 	addi	r3,r16,16
   11d7c:	003f6e06 	br	11b38 <_realloc_r+0x264>
   11d80:	953fff17 	ldw	r20,-4(r18)
   11d84:	00ffff04 	movi	r3,-4
   11d88:	a0e8703a 	and	r20,r20,r3
   11d8c:	a4e9883a 	add	r20,r20,r19
   11d90:	003f2206 	br	11a1c <_realloc_r+0x148>
   11d94:	800b883a 	mov	r5,r16
   11d98:	9009883a 	mov	r4,r18
   11d9c:	00117480 	call	11748 <memmove>
   11da0:	9021883a 	mov	r16,r18
   11da4:	b8800117 	ldw	r2,4(r23)
   11da8:	b82d883a 	mov	r22,r23
   11dac:	003f1b06 	br	11a1c <_realloc_r+0x148>
   11db0:	9005883a 	mov	r2,r18
   11db4:	8007883a 	mov	r3,r16
   11db8:	003f9206 	br	11c04 <_realloc_r+0x330>
   11dbc:	800b883a 	mov	r5,r16
   11dc0:	9009883a 	mov	r4,r18
   11dc4:	d9c00015 	stw	r7,0(sp)
   11dc8:	00117480 	call	11748 <memmove>
   11dcc:	d9c00017 	ldw	r7,0(sp)
   11dd0:	9021883a 	mov	r16,r18
   11dd4:	b8800117 	ldw	r2,4(r23)
   11dd8:	3829883a 	mov	r20,r7
   11ddc:	b82d883a 	mov	r22,r23
   11de0:	003f0e06 	br	11a1c <_realloc_r+0x148>
   11de4:	80800217 	ldw	r2,8(r16)
   11de8:	b8800415 	stw	r2,16(r23)
   11dec:	80800317 	ldw	r2,12(r16)
   11df0:	b8800515 	stw	r2,20(r23)
   11df4:	31001226 	beq	r6,r4,11e40 <_realloc_r+0x56c>
   11df8:	b8800604 	addi	r2,r23,24
   11dfc:	80c00404 	addi	r3,r16,16
   11e00:	003f9606 	br	11c5c <_realloc_r+0x388>
   11e04:	81000417 	ldw	r4,16(r16)
   11e08:	90800604 	addi	r2,r18,24
   11e0c:	80c00604 	addi	r3,r16,24
   11e10:	91000415 	stw	r4,16(r18)
   11e14:	81000517 	ldw	r4,20(r16)
   11e18:	91000515 	stw	r4,20(r18)
   11e1c:	003f4606 	br	11b38 <_realloc_r+0x264>
   11e20:	80800217 	ldw	r2,8(r16)
   11e24:	b8800415 	stw	r2,16(r23)
   11e28:	80800317 	ldw	r2,12(r16)
   11e2c:	b8800515 	stw	r2,20(r23)
   11e30:	31000d26 	beq	r6,r4,11e68 <_realloc_r+0x594>
   11e34:	b8800604 	addi	r2,r23,24
   11e38:	80c00404 	addi	r3,r16,16
   11e3c:	003f7106 	br	11c04 <_realloc_r+0x330>
   11e40:	81000417 	ldw	r4,16(r16)
   11e44:	b8800804 	addi	r2,r23,32
   11e48:	80c00604 	addi	r3,r16,24
   11e4c:	b9000615 	stw	r4,24(r23)
   11e50:	81000517 	ldw	r4,20(r16)
   11e54:	b9000715 	stw	r4,28(r23)
   11e58:	003f8006 	br	11c5c <_realloc_r+0x388>
   11e5c:	9005883a 	mov	r2,r18
   11e60:	8007883a 	mov	r3,r16
   11e64:	003fac06 	br	11d18 <_realloc_r+0x444>
   11e68:	81000417 	ldw	r4,16(r16)
   11e6c:	b8800804 	addi	r2,r23,32
   11e70:	80c00604 	addi	r3,r16,24
   11e74:	b9000615 	stw	r4,24(r23)
   11e78:	81000517 	ldw	r4,20(r16)
   11e7c:	b9000715 	stw	r4,28(r23)
   11e80:	003f6006 	br	11c04 <_realloc_r+0x330>
   11e84:	9009883a 	mov	r4,r18
   11e88:	800b883a 	mov	r5,r16
   11e8c:	00117480 	call	11748 <memmove>
   11e90:	003fa706 	br	11d30 <_realloc_r+0x45c>
   11e94:	80800217 	ldw	r2,8(r16)
   11e98:	b8800415 	stw	r2,16(r23)
   11e9c:	80800317 	ldw	r2,12(r16)
   11ea0:	b8800515 	stw	r2,20(r23)
   11ea4:	31000326 	beq	r6,r4,11eb4 <_realloc_r+0x5e0>
   11ea8:	b8800604 	addi	r2,r23,24
   11eac:	80c00404 	addi	r3,r16,16
   11eb0:	003f9906 	br	11d18 <_realloc_r+0x444>
   11eb4:	81000417 	ldw	r4,16(r16)
   11eb8:	b8800804 	addi	r2,r23,32
   11ebc:	80c00604 	addi	r3,r16,24
   11ec0:	b9000615 	stw	r4,24(r23)
   11ec4:	81000517 	ldw	r4,20(r16)
   11ec8:	b9000715 	stw	r4,28(r23)
   11ecc:	003f9206 	br	11d18 <_realloc_r+0x444>

00011ed0 <_sbrk_r>:
   11ed0:	defffd04 	addi	sp,sp,-12
   11ed4:	dc400115 	stw	r17,4(sp)
   11ed8:	dc000015 	stw	r16,0(sp)
   11edc:	2023883a 	mov	r17,r4
   11ee0:	040000b4 	movhi	r16,2
   11ee4:	84256704 	addi	r16,r16,-27236
   11ee8:	2809883a 	mov	r4,r5
   11eec:	dfc00215 	stw	ra,8(sp)
   11ef0:	80000015 	stw	zero,0(r16)
   11ef4:	0013a900 	call	13a90 <sbrk>
   11ef8:	00ffffc4 	movi	r3,-1
   11efc:	10c00526 	beq	r2,r3,11f14 <_sbrk_r+0x44>
   11f00:	dfc00217 	ldw	ra,8(sp)
   11f04:	dc400117 	ldw	r17,4(sp)
   11f08:	dc000017 	ldw	r16,0(sp)
   11f0c:	dec00304 	addi	sp,sp,12
   11f10:	f800283a 	ret
   11f14:	80c00017 	ldw	r3,0(r16)
   11f18:	183ff926 	beq	r3,zero,11f00 <_sbrk_r+0x30>
   11f1c:	88c00015 	stw	r3,0(r17)
   11f20:	dfc00217 	ldw	ra,8(sp)
   11f24:	dc400117 	ldw	r17,4(sp)
   11f28:	dc000017 	ldw	r16,0(sp)
   11f2c:	dec00304 	addi	sp,sp,12
   11f30:	f800283a 	ret

00011f34 <__swsetup_r>:
   11f34:	00800074 	movhi	r2,1
   11f38:	109ea504 	addi	r2,r2,31380
   11f3c:	10800017 	ldw	r2,0(r2)
   11f40:	defffd04 	addi	sp,sp,-12
   11f44:	dc400115 	stw	r17,4(sp)
   11f48:	dc000015 	stw	r16,0(sp)
   11f4c:	dfc00215 	stw	ra,8(sp)
   11f50:	2023883a 	mov	r17,r4
   11f54:	2821883a 	mov	r16,r5
   11f58:	10000226 	beq	r2,zero,11f64 <__swsetup_r+0x30>
   11f5c:	10c00e17 	ldw	r3,56(r2)
   11f60:	18003d26 	beq	r3,zero,12058 <__swsetup_r+0x124>
   11f64:	8080030b 	ldhu	r2,12(r16)
   11f68:	10c0020c 	andi	r3,r2,8
   11f6c:	18ffffcc 	andi	r3,r3,65535
   11f70:	18e0001c 	xori	r3,r3,32768
   11f74:	18e00004 	addi	r3,r3,-32768
   11f78:	18001226 	beq	r3,zero,11fc4 <__swsetup_r+0x90>
   11f7c:	80c00417 	ldw	r3,16(r16)
   11f80:	18001f26 	beq	r3,zero,12000 <__swsetup_r+0xcc>
   11f84:	1100004c 	andi	r4,r2,1
   11f88:	2000261e 	bne	r4,zero,12024 <__swsetup_r+0xf0>
   11f8c:	1080008c 	andi	r2,r2,2
   11f90:	10bfffcc 	andi	r2,r2,65535
   11f94:	10a0001c 	xori	r2,r2,32768
   11f98:	10a00004 	addi	r2,r2,-32768
   11f9c:	1000311e 	bne	r2,zero,12064 <__swsetup_r+0x130>
   11fa0:	80800517 	ldw	r2,20(r16)
   11fa4:	80800215 	stw	r2,8(r16)
   11fa8:	18002326 	beq	r3,zero,12038 <__swsetup_r+0x104>
   11fac:	0005883a 	mov	r2,zero
   11fb0:	dfc00217 	ldw	ra,8(sp)
   11fb4:	dc400117 	ldw	r17,4(sp)
   11fb8:	dc000017 	ldw	r16,0(sp)
   11fbc:	dec00304 	addi	sp,sp,12
   11fc0:	f800283a 	ret
   11fc4:	10c0040c 	andi	r3,r2,16
   11fc8:	18ffffcc 	andi	r3,r3,65535
   11fcc:	18e0001c 	xori	r3,r3,32768
   11fd0:	18e00004 	addi	r3,r3,-32768
   11fd4:	18001e26 	beq	r3,zero,12050 <__swsetup_r+0x11c>
   11fd8:	10c0010c 	andi	r3,r2,4
   11fdc:	18ffffcc 	andi	r3,r3,65535
   11fe0:	18e0001c 	xori	r3,r3,32768
   11fe4:	18e00004 	addi	r3,r3,-32768
   11fe8:	1800211e 	bne	r3,zero,12070 <__swsetup_r+0x13c>
   11fec:	80c00417 	ldw	r3,16(r16)
   11ff0:	11400214 	ori	r5,r2,8
   11ff4:	8140030d 	sth	r5,12(r16)
   11ff8:	2805883a 	mov	r2,r5
   11ffc:	183fe11e 	bne	r3,zero,11f84 <__swsetup_r+0x50>
   12000:	1140a00c 	andi	r5,r2,640
   12004:	01008004 	movi	r4,512
   12008:	293fde26 	beq	r5,r4,11f84 <__swsetup_r+0x50>
   1200c:	8809883a 	mov	r4,r17
   12010:	800b883a 	mov	r5,r16
   12014:	0012b180 	call	12b18 <__smakebuf_r>
   12018:	8080030b 	ldhu	r2,12(r16)
   1201c:	80c00417 	ldw	r3,16(r16)
   12020:	003fd806 	br	11f84 <__swsetup_r+0x50>
   12024:	80800517 	ldw	r2,20(r16)
   12028:	80000215 	stw	zero,8(r16)
   1202c:	0085c83a 	sub	r2,zero,r2
   12030:	80800615 	stw	r2,24(r16)
   12034:	183fdd1e 	bne	r3,zero,11fac <__swsetup_r+0x78>
   12038:	8080030b 	ldhu	r2,12(r16)
   1203c:	1080200c 	andi	r2,r2,128
   12040:	10bfffcc 	andi	r2,r2,65535
   12044:	10a0001c 	xori	r2,r2,32768
   12048:	10a00004 	addi	r2,r2,-32768
   1204c:	103fd826 	beq	r2,zero,11fb0 <__swsetup_r+0x7c>
   12050:	00bfffc4 	movi	r2,-1
   12054:	003fd606 	br	11fb0 <__swsetup_r+0x7c>
   12058:	1009883a 	mov	r4,r2
   1205c:	00123640 	call	12364 <__sinit>
   12060:	003fc006 	br	11f64 <__swsetup_r+0x30>
   12064:	0005883a 	mov	r2,zero
   12068:	80800215 	stw	r2,8(r16)
   1206c:	003fce06 	br	11fa8 <__swsetup_r+0x74>
   12070:	81400c17 	ldw	r5,48(r16)
   12074:	28000626 	beq	r5,zero,12090 <__swsetup_r+0x15c>
   12078:	80c01004 	addi	r3,r16,64
   1207c:	28c00326 	beq	r5,r3,1208c <__swsetup_r+0x158>
   12080:	8809883a 	mov	r4,r17
   12084:	00126e80 	call	126e8 <_free_r>
   12088:	8080030b 	ldhu	r2,12(r16)
   1208c:	80000c15 	stw	zero,48(r16)
   12090:	80c00417 	ldw	r3,16(r16)
   12094:	013ff6c4 	movi	r4,-37
   12098:	2084703a 	and	r2,r4,r2
   1209c:	80000115 	stw	zero,4(r16)
   120a0:	80c00015 	stw	r3,0(r16)
   120a4:	003fd206 	br	11ff0 <__swsetup_r+0xbc>

000120a8 <_fflush_r>:
   120a8:	defffb04 	addi	sp,sp,-20
   120ac:	dcc00315 	stw	r19,12(sp)
   120b0:	dc400115 	stw	r17,4(sp)
   120b4:	dfc00415 	stw	ra,16(sp)
   120b8:	dc800215 	stw	r18,8(sp)
   120bc:	dc000015 	stw	r16,0(sp)
   120c0:	2027883a 	mov	r19,r4
   120c4:	2823883a 	mov	r17,r5
   120c8:	20000226 	beq	r4,zero,120d4 <_fflush_r+0x2c>
   120cc:	20800e17 	ldw	r2,56(r4)
   120d0:	10005726 	beq	r2,zero,12230 <_fflush_r+0x188>
   120d4:	8880030b 	ldhu	r2,12(r17)
   120d8:	10c0020c 	andi	r3,r2,8
   120dc:	18ffffcc 	andi	r3,r3,65535
   120e0:	18e0001c 	xori	r3,r3,32768
   120e4:	18e00004 	addi	r3,r3,-32768
   120e8:	1800311e 	bne	r3,zero,121b0 <_fflush_r+0x108>
   120ec:	89000117 	ldw	r4,4(r17)
   120f0:	10c20014 	ori	r3,r2,2048
   120f4:	88c0030d 	sth	r3,12(r17)
   120f8:	180b883a 	mov	r5,r3
   120fc:	0100520e 	bge	zero,r4,12248 <_fflush_r+0x1a0>
   12100:	88c00a17 	ldw	r3,40(r17)
   12104:	18002226 	beq	r3,zero,12190 <_fflush_r+0xe8>
   12108:	1084000c 	andi	r2,r2,4096
   1210c:	10bfffcc 	andi	r2,r2,65535
   12110:	10a0001c 	xori	r2,r2,32768
   12114:	10a00004 	addi	r2,r2,-32768
   12118:	10004e26 	beq	r2,zero,12254 <_fflush_r+0x1ac>
   1211c:	8c001417 	ldw	r16,80(r17)
   12120:	2940010c 	andi	r5,r5,4
   12124:	297fffcc 	andi	r5,r5,65535
   12128:	2960001c 	xori	r5,r5,32768
   1212c:	29600004 	addi	r5,r5,-32768
   12130:	28000626 	beq	r5,zero,1214c <_fflush_r+0xa4>
   12134:	89000117 	ldw	r4,4(r17)
   12138:	88800c17 	ldw	r2,48(r17)
   1213c:	8121c83a 	sub	r16,r16,r4
   12140:	10000226 	beq	r2,zero,1214c <_fflush_r+0xa4>
   12144:	88800f17 	ldw	r2,60(r17)
   12148:	80a1c83a 	sub	r16,r16,r2
   1214c:	89400717 	ldw	r5,28(r17)
   12150:	9809883a 	mov	r4,r19
   12154:	800d883a 	mov	r6,r16
   12158:	000f883a 	mov	r7,zero
   1215c:	183ee83a 	callr	r3
   12160:	8080281e 	bne	r16,r2,12204 <_fflush_r+0x15c>
   12164:	8880030b 	ldhu	r2,12(r17)
   12168:	88c00417 	ldw	r3,16(r17)
   1216c:	88000115 	stw	zero,4(r17)
   12170:	113dffcc 	andi	r4,r2,63487
   12174:	1084000c 	andi	r2,r2,4096
   12178:	10bfffcc 	andi	r2,r2,65535
   1217c:	10a0001c 	xori	r2,r2,32768
   12180:	8900030d 	sth	r4,12(r17)
   12184:	88c00015 	stw	r3,0(r17)
   12188:	10a00004 	addi	r2,r2,-32768
   1218c:	10002c1e 	bne	r2,zero,12240 <_fflush_r+0x198>
   12190:	0005883a 	mov	r2,zero
   12194:	dfc00417 	ldw	ra,16(sp)
   12198:	dcc00317 	ldw	r19,12(sp)
   1219c:	dc800217 	ldw	r18,8(sp)
   121a0:	dc400117 	ldw	r17,4(sp)
   121a4:	dc000017 	ldw	r16,0(sp)
   121a8:	dec00504 	addi	sp,sp,20
   121ac:	f800283a 	ret
   121b0:	8c800417 	ldw	r18,16(r17)
   121b4:	903ff626 	beq	r18,zero,12190 <_fflush_r+0xe8>
   121b8:	8c000017 	ldw	r16,0(r17)
   121bc:	108000cc 	andi	r2,r2,3
   121c0:	8c800015 	stw	r18,0(r17)
   121c4:	84a1c83a 	sub	r16,r16,r18
   121c8:	10001b1e 	bne	r2,zero,12238 <_fflush_r+0x190>
   121cc:	88800517 	ldw	r2,20(r17)
   121d0:	88800215 	stw	r2,8(r17)
   121d4:	04000316 	blt	zero,r16,121e4 <_fflush_r+0x13c>
   121d8:	003fed06 	br	12190 <_fflush_r+0xe8>
   121dc:	90a5883a 	add	r18,r18,r2
   121e0:	043feb0e 	bge	zero,r16,12190 <_fflush_r+0xe8>
   121e4:	88800917 	ldw	r2,36(r17)
   121e8:	89400717 	ldw	r5,28(r17)
   121ec:	800f883a 	mov	r7,r16
   121f0:	900d883a 	mov	r6,r18
   121f4:	9809883a 	mov	r4,r19
   121f8:	103ee83a 	callr	r2
   121fc:	80a1c83a 	sub	r16,r16,r2
   12200:	00bff616 	blt	zero,r2,121dc <_fflush_r+0x134>
   12204:	88c0030b 	ldhu	r3,12(r17)
   12208:	00bfffc4 	movi	r2,-1
   1220c:	18c01014 	ori	r3,r3,64
   12210:	88c0030d 	sth	r3,12(r17)
   12214:	dfc00417 	ldw	ra,16(sp)
   12218:	dcc00317 	ldw	r19,12(sp)
   1221c:	dc800217 	ldw	r18,8(sp)
   12220:	dc400117 	ldw	r17,4(sp)
   12224:	dc000017 	ldw	r16,0(sp)
   12228:	dec00504 	addi	sp,sp,20
   1222c:	f800283a 	ret
   12230:	00123640 	call	12364 <__sinit>
   12234:	003fa706 	br	120d4 <_fflush_r+0x2c>
   12238:	0005883a 	mov	r2,zero
   1223c:	003fe406 	br	121d0 <_fflush_r+0x128>
   12240:	8c001415 	stw	r16,80(r17)
   12244:	003fd206 	br	12190 <_fflush_r+0xe8>
   12248:	88c00f17 	ldw	r3,60(r17)
   1224c:	00ffac16 	blt	zero,r3,12100 <_fflush_r+0x58>
   12250:	003fcf06 	br	12190 <_fflush_r+0xe8>
   12254:	89400717 	ldw	r5,28(r17)
   12258:	9809883a 	mov	r4,r19
   1225c:	000d883a 	mov	r6,zero
   12260:	01c00044 	movi	r7,1
   12264:	183ee83a 	callr	r3
   12268:	1021883a 	mov	r16,r2
   1226c:	00bfffc4 	movi	r2,-1
   12270:	80800326 	beq	r16,r2,12280 <_fflush_r+0x1d8>
   12274:	8940030b 	ldhu	r5,12(r17)
   12278:	88c00a17 	ldw	r3,40(r17)
   1227c:	003fa806 	br	12120 <_fflush_r+0x78>
   12280:	98c00017 	ldw	r3,0(r19)
   12284:	00800744 	movi	r2,29
   12288:	18bfde1e 	bne	r3,r2,12204 <_fflush_r+0x15c>
   1228c:	003fc006 	br	12190 <_fflush_r+0xe8>

00012290 <fflush>:
   12290:	200b883a 	mov	r5,r4
   12294:	20000426 	beq	r4,zero,122a8 <fflush+0x18>
   12298:	00800074 	movhi	r2,1
   1229c:	109ea504 	addi	r2,r2,31380
   122a0:	11000017 	ldw	r4,0(r2)
   122a4:	00120a81 	jmpi	120a8 <_fflush_r>
   122a8:	00800074 	movhi	r2,1
   122ac:	109ea404 	addi	r2,r2,31376
   122b0:	11000017 	ldw	r4,0(r2)
   122b4:	01400074 	movhi	r5,1
   122b8:	29482a04 	addi	r5,r5,8360
   122bc:	0012a601 	jmpi	12a60 <_fwalk_reent>

000122c0 <__fp_lock>:
   122c0:	0005883a 	mov	r2,zero
   122c4:	f800283a 	ret

000122c8 <__fp_unlock>:
   122c8:	0005883a 	mov	r2,zero
   122cc:	f800283a 	ret

000122d0 <_cleanup_r>:
   122d0:	01400074 	movhi	r5,1
   122d4:	294c3a04 	addi	r5,r5,12520
   122d8:	00129b81 	jmpi	129b8 <_fwalk>

000122dc <__sfmoreglue>:
   122dc:	defffc04 	addi	sp,sp,-16
   122e0:	dc800215 	stw	r18,8(sp)
   122e4:	2825883a 	mov	r18,r5
   122e8:	dc000015 	stw	r16,0(sp)
   122ec:	01401704 	movi	r5,92
   122f0:	2021883a 	mov	r16,r4
   122f4:	9009883a 	mov	r4,r18
   122f8:	dfc00315 	stw	ra,12(sp)
   122fc:	dc400115 	stw	r17,4(sp)
   12300:	00132a00 	call	132a0 <__mulsi3>
   12304:	8009883a 	mov	r4,r16
   12308:	11400304 	addi	r5,r2,12
   1230c:	1023883a 	mov	r17,r2
   12310:	0010d8c0 	call	10d8c <_malloc_r>
   12314:	1021883a 	mov	r16,r2
   12318:	10000726 	beq	r2,zero,12338 <__sfmoreglue+0x5c>
   1231c:	11000304 	addi	r4,r2,12
   12320:	10000015 	stw	zero,0(r2)
   12324:	14800115 	stw	r18,4(r2)
   12328:	11000215 	stw	r4,8(r2)
   1232c:	000b883a 	mov	r5,zero
   12330:	880d883a 	mov	r6,r17
   12334:	0012cc00 	call	12cc0 <memset>
   12338:	8005883a 	mov	r2,r16
   1233c:	dfc00317 	ldw	ra,12(sp)
   12340:	dc800217 	ldw	r18,8(sp)
   12344:	dc400117 	ldw	r17,4(sp)
   12348:	dc000017 	ldw	r16,0(sp)
   1234c:	dec00404 	addi	sp,sp,16
   12350:	f800283a 	ret

00012354 <_cleanup>:
   12354:	00800074 	movhi	r2,1
   12358:	109ea404 	addi	r2,r2,31376
   1235c:	11000017 	ldw	r4,0(r2)
   12360:	00122d01 	jmpi	122d0 <_cleanup_r>

00012364 <__sinit>:
   12364:	20800e17 	ldw	r2,56(r4)
   12368:	1000401e 	bne	r2,zero,1246c <__sinit+0x108>
   1236c:	21400117 	ldw	r5,4(r4)
   12370:	01800074 	movhi	r6,1
   12374:	3188b404 	addi	r6,r6,8912
   12378:	20c00217 	ldw	r3,8(r4)
   1237c:	21800f15 	stw	r6,60(r4)
   12380:	2080bb04 	addi	r2,r4,748
   12384:	02400044 	movi	r9,1
   12388:	018000c4 	movi	r6,3
   1238c:	2180b915 	stw	r6,740(r4)
   12390:	2080ba15 	stw	r2,744(r4)
   12394:	22400e15 	stw	r9,56(r4)
   12398:	20800317 	ldw	r2,12(r4)
   1239c:	2000b815 	stw	zero,736(r4)
   123a0:	02000074 	movhi	r8,1
   123a4:	420b6704 	addi	r8,r8,11676
   123a8:	01c00074 	movhi	r7,1
   123ac:	39cb7c04 	addi	r7,r7,11760
   123b0:	01800074 	movhi	r6,1
   123b4:	318b9e04 	addi	r6,r6,11896
   123b8:	01000074 	movhi	r4,1
   123bc:	210bb504 	addi	r4,r4,11988
   123c0:	02800104 	movi	r10,4
   123c4:	28000015 	stw	zero,0(r5)
   123c8:	28000115 	stw	zero,4(r5)
   123cc:	28000215 	stw	zero,8(r5)
   123d0:	2a80030d 	sth	r10,12(r5)
   123d4:	2800038d 	sth	zero,14(r5)
   123d8:	28000415 	stw	zero,16(r5)
   123dc:	28000515 	stw	zero,20(r5)
   123e0:	28000615 	stw	zero,24(r5)
   123e4:	29400715 	stw	r5,28(r5)
   123e8:	2a000815 	stw	r8,32(r5)
   123ec:	29c00915 	stw	r7,36(r5)
   123f0:	29800a15 	stw	r6,40(r5)
   123f4:	29000b15 	stw	r4,44(r5)
   123f8:	01400284 	movi	r5,10
   123fc:	18000015 	stw	zero,0(r3)
   12400:	18000115 	stw	zero,4(r3)
   12404:	18000215 	stw	zero,8(r3)
   12408:	1940030d 	sth	r5,12(r3)
   1240c:	1a40038d 	sth	r9,14(r3)
   12410:	18000415 	stw	zero,16(r3)
   12414:	18000515 	stw	zero,20(r3)
   12418:	18000615 	stw	zero,24(r3)
   1241c:	18c00715 	stw	r3,28(r3)
   12420:	1a000815 	stw	r8,32(r3)
   12424:	19c00915 	stw	r7,36(r3)
   12428:	19800a15 	stw	r6,40(r3)
   1242c:	19000b15 	stw	r4,44(r3)
   12430:	00c00484 	movi	r3,18
   12434:	10c0030d 	sth	r3,12(r2)
   12438:	00c00084 	movi	r3,2
   1243c:	10000015 	stw	zero,0(r2)
   12440:	10000115 	stw	zero,4(r2)
   12444:	10000215 	stw	zero,8(r2)
   12448:	10c0038d 	sth	r3,14(r2)
   1244c:	10000415 	stw	zero,16(r2)
   12450:	10000515 	stw	zero,20(r2)
   12454:	10000615 	stw	zero,24(r2)
   12458:	10800715 	stw	r2,28(r2)
   1245c:	12000815 	stw	r8,32(r2)
   12460:	11c00915 	stw	r7,36(r2)
   12464:	11800a15 	stw	r6,40(r2)
   12468:	11000b15 	stw	r4,44(r2)
   1246c:	f800283a 	ret

00012470 <__sfp>:
   12470:	defffc04 	addi	sp,sp,-16
   12474:	00800074 	movhi	r2,1
   12478:	109ea404 	addi	r2,r2,31376
   1247c:	dc400115 	stw	r17,4(sp)
   12480:	14400017 	ldw	r17,0(r2)
   12484:	dc800215 	stw	r18,8(sp)
   12488:	dfc00315 	stw	ra,12(sp)
   1248c:	88800e17 	ldw	r2,56(r17)
   12490:	dc000015 	stw	r16,0(sp)
   12494:	2025883a 	mov	r18,r4
   12498:	10002826 	beq	r2,zero,1253c <__sfp+0xcc>
   1249c:	8c40b804 	addi	r17,r17,736
   124a0:	043fffc4 	movi	r16,-1
   124a4:	89400117 	ldw	r5,4(r17)
   124a8:	88800217 	ldw	r2,8(r17)
   124ac:	297fffc4 	addi	r5,r5,-1
   124b0:	28000a16 	blt	r5,zero,124dc <__sfp+0x6c>
   124b4:	10c0030f 	ldh	r3,12(r2)
   124b8:	18000c26 	beq	r3,zero,124ec <__sfp+0x7c>
   124bc:	10c01a04 	addi	r3,r2,104
   124c0:	00000206 	br	124cc <__sfp+0x5c>
   124c4:	19bfe90f 	ldh	r6,-92(r3)
   124c8:	30000826 	beq	r6,zero,124ec <__sfp+0x7c>
   124cc:	297fffc4 	addi	r5,r5,-1
   124d0:	18bffd04 	addi	r2,r3,-12
   124d4:	18c01704 	addi	r3,r3,92
   124d8:	2c3ffa1e 	bne	r5,r16,124c4 <__sfp+0x54>
   124dc:	88800017 	ldw	r2,0(r17)
   124e0:	10001926 	beq	r2,zero,12548 <__sfp+0xd8>
   124e4:	1023883a 	mov	r17,r2
   124e8:	003fee06 	br	124a4 <__sfp+0x34>
   124ec:	00ffffc4 	movi	r3,-1
   124f0:	10c0038d 	sth	r3,14(r2)
   124f4:	00c00044 	movi	r3,1
   124f8:	10c0030d 	sth	r3,12(r2)
   124fc:	10000015 	stw	zero,0(r2)
   12500:	10000215 	stw	zero,8(r2)
   12504:	10000115 	stw	zero,4(r2)
   12508:	10000415 	stw	zero,16(r2)
   1250c:	10000515 	stw	zero,20(r2)
   12510:	10000615 	stw	zero,24(r2)
   12514:	10000c15 	stw	zero,48(r2)
   12518:	10000d15 	stw	zero,52(r2)
   1251c:	10001115 	stw	zero,68(r2)
   12520:	10001215 	stw	zero,72(r2)
   12524:	dfc00317 	ldw	ra,12(sp)
   12528:	dc800217 	ldw	r18,8(sp)
   1252c:	dc400117 	ldw	r17,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00404 	addi	sp,sp,16
   12538:	f800283a 	ret
   1253c:	8809883a 	mov	r4,r17
   12540:	00123640 	call	12364 <__sinit>
   12544:	003fd506 	br	1249c <__sfp+0x2c>
   12548:	9009883a 	mov	r4,r18
   1254c:	01400104 	movi	r5,4
   12550:	00122dc0 	call	122dc <__sfmoreglue>
   12554:	88800015 	stw	r2,0(r17)
   12558:	103fe21e 	bne	r2,zero,124e4 <__sfp+0x74>
   1255c:	00800304 	movi	r2,12
   12560:	90800015 	stw	r2,0(r18)
   12564:	0005883a 	mov	r2,zero
   12568:	003fee06 	br	12524 <__sfp+0xb4>

0001256c <__sfp_lock_acquire>:
   1256c:	f800283a 	ret

00012570 <__sfp_lock_release>:
   12570:	f800283a 	ret

00012574 <__sinit_lock_acquire>:
   12574:	f800283a 	ret

00012578 <__sinit_lock_release>:
   12578:	f800283a 	ret

0001257c <__fp_lock_all>:
   1257c:	00800074 	movhi	r2,1
   12580:	109ea504 	addi	r2,r2,31380
   12584:	11000017 	ldw	r4,0(r2)
   12588:	01400074 	movhi	r5,1
   1258c:	2948b004 	addi	r5,r5,8896
   12590:	00129b81 	jmpi	129b8 <_fwalk>

00012594 <__fp_unlock_all>:
   12594:	00800074 	movhi	r2,1
   12598:	109ea504 	addi	r2,r2,31380
   1259c:	11000017 	ldw	r4,0(r2)
   125a0:	01400074 	movhi	r5,1
   125a4:	2948b204 	addi	r5,r5,8904
   125a8:	00129b81 	jmpi	129b8 <_fwalk>

000125ac <_malloc_trim_r>:
   125ac:	defffb04 	addi	sp,sp,-20
   125b0:	dcc00315 	stw	r19,12(sp)
   125b4:	dc800215 	stw	r18,8(sp)
   125b8:	dc400115 	stw	r17,4(sp)
   125bc:	dc000015 	stw	r16,0(sp)
   125c0:	2827883a 	mov	r19,r5
   125c4:	dfc00415 	stw	ra,16(sp)
   125c8:	04400074 	movhi	r17,1
   125cc:	8c592004 	addi	r17,r17,25728
   125d0:	2021883a 	mov	r16,r4
   125d4:	001388c0 	call	1388c <__malloc_lock>
   125d8:	88800217 	ldw	r2,8(r17)
   125dc:	14800117 	ldw	r18,4(r2)
   125e0:	00bfff04 	movi	r2,-4
   125e4:	90a4703a 	and	r18,r18,r2
   125e8:	9083fbc4 	addi	r2,r18,4079
   125ec:	14e7c83a 	sub	r19,r2,r19
   125f0:	9826d33a 	srli	r19,r19,12
   125f4:	0083ffc4 	movi	r2,4095
   125f8:	9cffffc4 	addi	r19,r19,-1
   125fc:	9826933a 	slli	r19,r19,12
   12600:	14c0060e 	bge	r2,r19,1261c <_malloc_trim_r+0x70>
   12604:	8009883a 	mov	r4,r16
   12608:	000b883a 	mov	r5,zero
   1260c:	0011ed00 	call	11ed0 <_sbrk_r>
   12610:	88c00217 	ldw	r3,8(r17)
   12614:	1c87883a 	add	r3,r3,r18
   12618:	10c00a26 	beq	r2,r3,12644 <_malloc_trim_r+0x98>
   1261c:	8009883a 	mov	r4,r16
   12620:	00138ac0 	call	138ac <__malloc_unlock>
   12624:	0005883a 	mov	r2,zero
   12628:	dfc00417 	ldw	ra,16(sp)
   1262c:	dcc00317 	ldw	r19,12(sp)
   12630:	dc800217 	ldw	r18,8(sp)
   12634:	dc400117 	ldw	r17,4(sp)
   12638:	dc000017 	ldw	r16,0(sp)
   1263c:	dec00504 	addi	sp,sp,20
   12640:	f800283a 	ret
   12644:	8009883a 	mov	r4,r16
   12648:	04cbc83a 	sub	r5,zero,r19
   1264c:	0011ed00 	call	11ed0 <_sbrk_r>
   12650:	00ffffc4 	movi	r3,-1
   12654:	10c01326 	beq	r2,r3,126a4 <_malloc_trim_r+0xf8>
   12658:	008000b4 	movhi	r2,2
   1265c:	10a56e04 	addi	r2,r2,-27208
   12660:	11000017 	ldw	r4,0(r2)
   12664:	88c00217 	ldw	r3,8(r17)
   12668:	94e5c83a 	sub	r18,r18,r19
   1266c:	94800054 	ori	r18,r18,1
   12670:	24e7c83a 	sub	r19,r4,r19
   12674:	1c800115 	stw	r18,4(r3)
   12678:	8009883a 	mov	r4,r16
   1267c:	14c00015 	stw	r19,0(r2)
   12680:	00138ac0 	call	138ac <__malloc_unlock>
   12684:	00800044 	movi	r2,1
   12688:	dfc00417 	ldw	ra,16(sp)
   1268c:	dcc00317 	ldw	r19,12(sp)
   12690:	dc800217 	ldw	r18,8(sp)
   12694:	dc400117 	ldw	r17,4(sp)
   12698:	dc000017 	ldw	r16,0(sp)
   1269c:	dec00504 	addi	sp,sp,20
   126a0:	f800283a 	ret
   126a4:	8009883a 	mov	r4,r16
   126a8:	000b883a 	mov	r5,zero
   126ac:	0011ed00 	call	11ed0 <_sbrk_r>
   126b0:	88c00217 	ldw	r3,8(r17)
   126b4:	014003c4 	movi	r5,15
   126b8:	10c9c83a 	sub	r4,r2,r3
   126bc:	293fd70e 	bge	r5,r4,1261c <_malloc_trim_r+0x70>
   126c0:	01400074 	movhi	r5,1
   126c4:	295ea604 	addi	r5,r5,31384
   126c8:	29400017 	ldw	r5,0(r5)
   126cc:	21000054 	ori	r4,r4,1
   126d0:	19000115 	stw	r4,4(r3)
   126d4:	1145c83a 	sub	r2,r2,r5
   126d8:	014000b4 	movhi	r5,2
   126dc:	29656e04 	addi	r5,r5,-27208
   126e0:	28800015 	stw	r2,0(r5)
   126e4:	003fcd06 	br	1261c <_malloc_trim_r+0x70>

000126e8 <_free_r>:
   126e8:	defffd04 	addi	sp,sp,-12
   126ec:	dc400115 	stw	r17,4(sp)
   126f0:	dc000015 	stw	r16,0(sp)
   126f4:	dfc00215 	stw	ra,8(sp)
   126f8:	2821883a 	mov	r16,r5
   126fc:	2023883a 	mov	r17,r4
   12700:	28004b26 	beq	r5,zero,12830 <_free_r+0x148>
   12704:	001388c0 	call	1388c <__malloc_lock>
   12708:	823fff17 	ldw	r8,-4(r16)
   1270c:	00bfff84 	movi	r2,-2
   12710:	81bffe04 	addi	r6,r16,-8
   12714:	4084703a 	and	r2,r8,r2
   12718:	3087883a 	add	r3,r6,r2
   1271c:	01400074 	movhi	r5,1
   12720:	29592004 	addi	r5,r5,25728
   12724:	1a400117 	ldw	r9,4(r3)
   12728:	29000217 	ldw	r4,8(r5)
   1272c:	01ffff04 	movi	r7,-4
   12730:	49ce703a 	and	r7,r9,r7
   12734:	20c06526 	beq	r4,r3,128cc <_free_r+0x1e4>
   12738:	19c00115 	stw	r7,4(r3)
   1273c:	4200004c 	andi	r8,r8,1
   12740:	40003026 	beq	r8,zero,12804 <_free_r+0x11c>
   12744:	0009883a 	mov	r4,zero
   12748:	19d1883a 	add	r8,r3,r7
   1274c:	42000117 	ldw	r8,4(r8)
   12750:	4200004c 	andi	r8,r8,1
   12754:	4000061e 	bne	r8,zero,12770 <_free_r+0x88>
   12758:	11c5883a 	add	r2,r2,r7
   1275c:	19c00217 	ldw	r7,8(r3)
   12760:	20004e26 	beq	r4,zero,1289c <_free_r+0x1b4>
   12764:	18c00317 	ldw	r3,12(r3)
   12768:	38c00315 	stw	r3,12(r7)
   1276c:	19c00215 	stw	r7,8(r3)
   12770:	11c00054 	ori	r7,r2,1
   12774:	3087883a 	add	r3,r6,r2
   12778:	31c00115 	stw	r7,4(r6)
   1277c:	18800015 	stw	r2,0(r3)
   12780:	20001a1e 	bne	r4,zero,127ec <_free_r+0x104>
   12784:	00c07fc4 	movi	r3,511
   12788:	18802e2e 	bgeu	r3,r2,12844 <_free_r+0x15c>
   1278c:	1006d27a 	srli	r3,r2,9
   12790:	01000104 	movi	r4,4
   12794:	20c06636 	bltu	r4,r3,12930 <_free_r+0x248>
   12798:	1008d1ba 	srli	r4,r2,6
   1279c:	21000e04 	addi	r4,r4,56
   127a0:	210f883a 	add	r7,r4,r4
   127a4:	39cf883a 	add	r7,r7,r7
   127a8:	39cf883a 	add	r7,r7,r7
   127ac:	29cf883a 	add	r7,r5,r7
   127b0:	38c00217 	ldw	r3,8(r7)
   127b4:	01400074 	movhi	r5,1
   127b8:	29592004 	addi	r5,r5,25728
   127bc:	19c06126 	beq	r3,r7,12944 <_free_r+0x25c>
   127c0:	013fff04 	movi	r4,-4
   127c4:	19400117 	ldw	r5,4(r3)
   127c8:	290a703a 	and	r5,r5,r4
   127cc:	1140022e 	bgeu	r2,r5,127d8 <_free_r+0xf0>
   127d0:	18c00217 	ldw	r3,8(r3)
   127d4:	38fffb1e 	bne	r7,r3,127c4 <_free_r+0xdc>
   127d8:	18800317 	ldw	r2,12(r3)
   127dc:	30800315 	stw	r2,12(r6)
   127e0:	30c00215 	stw	r3,8(r6)
   127e4:	11800215 	stw	r6,8(r2)
   127e8:	19800315 	stw	r6,12(r3)
   127ec:	8809883a 	mov	r4,r17
   127f0:	dfc00217 	ldw	ra,8(sp)
   127f4:	dc400117 	ldw	r17,4(sp)
   127f8:	dc000017 	ldw	r16,0(sp)
   127fc:	dec00304 	addi	sp,sp,12
   12800:	00138ac1 	jmpi	138ac <__malloc_unlock>
   12804:	813ffe17 	ldw	r4,-8(r16)
   12808:	2a400204 	addi	r9,r5,8
   1280c:	310dc83a 	sub	r6,r6,r4
   12810:	32000217 	ldw	r8,8(r6)
   12814:	1105883a 	add	r2,r2,r4
   12818:	42404326 	beq	r8,r9,12928 <_free_r+0x240>
   1281c:	32400317 	ldw	r9,12(r6)
   12820:	0009883a 	mov	r4,zero
   12824:	42400315 	stw	r9,12(r8)
   12828:	4a000215 	stw	r8,8(r9)
   1282c:	003fc606 	br	12748 <_free_r+0x60>
   12830:	dfc00217 	ldw	ra,8(sp)
   12834:	dc400117 	ldw	r17,4(sp)
   12838:	dc000017 	ldw	r16,0(sp)
   1283c:	dec00304 	addi	sp,sp,12
   12840:	f800283a 	ret
   12844:	1004d0fa 	srli	r2,r2,3
   12848:	02000044 	movi	r8,1
   1284c:	29c00117 	ldw	r7,4(r5)
   12850:	1087883a 	add	r3,r2,r2
   12854:	18c7883a 	add	r3,r3,r3
   12858:	1005d0ba 	srai	r2,r2,2
   1285c:	18c7883a 	add	r3,r3,r3
   12860:	28c7883a 	add	r3,r5,r3
   12864:	19000217 	ldw	r4,8(r3)
   12868:	4084983a 	sll	r2,r8,r2
   1286c:	30c00315 	stw	r3,12(r6)
   12870:	31000215 	stw	r4,8(r6)
   12874:	11c4b03a 	or	r2,r2,r7
   12878:	21800315 	stw	r6,12(r4)
   1287c:	8809883a 	mov	r4,r17
   12880:	28800115 	stw	r2,4(r5)
   12884:	19800215 	stw	r6,8(r3)
   12888:	dfc00217 	ldw	ra,8(sp)
   1288c:	dc400117 	ldw	r17,4(sp)
   12890:	dc000017 	ldw	r16,0(sp)
   12894:	dec00304 	addi	sp,sp,12
   12898:	00138ac1 	jmpi	138ac <__malloc_unlock>
   1289c:	02000074 	movhi	r8,1
   128a0:	42192204 	addi	r8,r8,25736
   128a4:	3a3faf1e 	bne	r7,r8,12764 <_free_r+0x7c>
   128a8:	29800515 	stw	r6,20(r5)
   128ac:	29800415 	stw	r6,16(r5)
   128b0:	11000054 	ori	r4,r2,1
   128b4:	3087883a 	add	r3,r6,r2
   128b8:	31c00315 	stw	r7,12(r6)
   128bc:	31c00215 	stw	r7,8(r6)
   128c0:	31000115 	stw	r4,4(r6)
   128c4:	18800015 	stw	r2,0(r3)
   128c8:	003fc806 	br	127ec <_free_r+0x104>
   128cc:	4200004c 	andi	r8,r8,1
   128d0:	3885883a 	add	r2,r7,r2
   128d4:	4000071e 	bne	r8,zero,128f4 <_free_r+0x20c>
   128d8:	81fffe17 	ldw	r7,-8(r16)
   128dc:	31cdc83a 	sub	r6,r6,r7
   128e0:	30c00317 	ldw	r3,12(r6)
   128e4:	31000217 	ldw	r4,8(r6)
   128e8:	11c5883a 	add	r2,r2,r7
   128ec:	20c00315 	stw	r3,12(r4)
   128f0:	19000215 	stw	r4,8(r3)
   128f4:	00c00074 	movhi	r3,1
   128f8:	18dea704 	addi	r3,r3,31388
   128fc:	18c00017 	ldw	r3,0(r3)
   12900:	11000054 	ori	r4,r2,1
   12904:	31000115 	stw	r4,4(r6)
   12908:	29800215 	stw	r6,8(r5)
   1290c:	10ffb736 	bltu	r2,r3,127ec <_free_r+0x104>
   12910:	008000b4 	movhi	r2,2
   12914:	10a56604 	addi	r2,r2,-27240
   12918:	11400017 	ldw	r5,0(r2)
   1291c:	8809883a 	mov	r4,r17
   12920:	00125ac0 	call	125ac <_malloc_trim_r>
   12924:	003fb106 	br	127ec <_free_r+0x104>
   12928:	01000044 	movi	r4,1
   1292c:	003f8606 	br	12748 <_free_r+0x60>
   12930:	01000504 	movi	r4,20
   12934:	20c00b36 	bltu	r4,r3,12964 <_free_r+0x27c>
   12938:	190016c4 	addi	r4,r3,91
   1293c:	210f883a 	add	r7,r4,r4
   12940:	003f9806 	br	127a4 <_free_r+0xbc>
   12944:	2009d0ba 	srai	r4,r4,2
   12948:	00800044 	movi	r2,1
   1294c:	29c00117 	ldw	r7,4(r5)
   12950:	1108983a 	sll	r4,r2,r4
   12954:	1805883a 	mov	r2,r3
   12958:	21c8b03a 	or	r4,r4,r7
   1295c:	29000115 	stw	r4,4(r5)
   12960:	003f9e06 	br	127dc <_free_r+0xf4>
   12964:	01001504 	movi	r4,84
   12968:	20c00436 	bltu	r4,r3,1297c <_free_r+0x294>
   1296c:	1008d33a 	srli	r4,r2,12
   12970:	21001b84 	addi	r4,r4,110
   12974:	210f883a 	add	r7,r4,r4
   12978:	003f8a06 	br	127a4 <_free_r+0xbc>
   1297c:	01005504 	movi	r4,340
   12980:	20c00436 	bltu	r4,r3,12994 <_free_r+0x2ac>
   12984:	1008d3fa 	srli	r4,r2,15
   12988:	21001dc4 	addi	r4,r4,119
   1298c:	210f883a 	add	r7,r4,r4
   12990:	003f8406 	br	127a4 <_free_r+0xbc>
   12994:	01015504 	movi	r4,1364
   12998:	20c00436 	bltu	r4,r3,129ac <_free_r+0x2c4>
   1299c:	1008d4ba 	srli	r4,r2,18
   129a0:	21001f04 	addi	r4,r4,124
   129a4:	210f883a 	add	r7,r4,r4
   129a8:	003f7e06 	br	127a4 <_free_r+0xbc>
   129ac:	01c03f04 	movi	r7,252
   129b0:	01001f84 	movi	r4,126
   129b4:	003f7b06 	br	127a4 <_free_r+0xbc>

000129b8 <_fwalk>:
   129b8:	defff904 	addi	sp,sp,-28
   129bc:	dcc00315 	stw	r19,12(sp)
   129c0:	24c0b804 	addi	r19,r4,736
   129c4:	dd400515 	stw	r21,20(sp)
   129c8:	dd000415 	stw	r20,16(sp)
   129cc:	dfc00615 	stw	ra,24(sp)
   129d0:	dc800215 	stw	r18,8(sp)
   129d4:	dc400115 	stw	r17,4(sp)
   129d8:	dc000015 	stw	r16,0(sp)
   129dc:	282b883a 	mov	r21,r5
   129e0:	0029883a 	mov	r20,zero
   129e4:	001256c0 	call	1256c <__sfp_lock_acquire>
   129e8:	98001226 	beq	r19,zero,12a34 <_fwalk+0x7c>
   129ec:	04bfffc4 	movi	r18,-1
   129f0:	9c400117 	ldw	r17,4(r19)
   129f4:	9c000217 	ldw	r16,8(r19)
   129f8:	8c7fffc4 	addi	r17,r17,-1
   129fc:	88000b16 	blt	r17,zero,12a2c <_fwalk+0x74>
   12a00:	84000304 	addi	r16,r16,12
   12a04:	80c0000f 	ldh	r3,0(r16)
   12a08:	8c7fffc4 	addi	r17,r17,-1
   12a0c:	813ffd04 	addi	r4,r16,-12
   12a10:	18000426 	beq	r3,zero,12a24 <_fwalk+0x6c>
   12a14:	80c0008f 	ldh	r3,2(r16)
   12a18:	1c800226 	beq	r3,r18,12a24 <_fwalk+0x6c>
   12a1c:	a83ee83a 	callr	r21
   12a20:	a0a8b03a 	or	r20,r20,r2
   12a24:	84001704 	addi	r16,r16,92
   12a28:	8cbff61e 	bne	r17,r18,12a04 <_fwalk+0x4c>
   12a2c:	9cc00017 	ldw	r19,0(r19)
   12a30:	983fef1e 	bne	r19,zero,129f0 <_fwalk+0x38>
   12a34:	00125700 	call	12570 <__sfp_lock_release>
   12a38:	a005883a 	mov	r2,r20
   12a3c:	dfc00617 	ldw	ra,24(sp)
   12a40:	dd400517 	ldw	r21,20(sp)
   12a44:	dd000417 	ldw	r20,16(sp)
   12a48:	dcc00317 	ldw	r19,12(sp)
   12a4c:	dc800217 	ldw	r18,8(sp)
   12a50:	dc400117 	ldw	r17,4(sp)
   12a54:	dc000017 	ldw	r16,0(sp)
   12a58:	dec00704 	addi	sp,sp,28
   12a5c:	f800283a 	ret

00012a60 <_fwalk_reent>:
   12a60:	defff804 	addi	sp,sp,-32
   12a64:	dcc00315 	stw	r19,12(sp)
   12a68:	24c0b804 	addi	r19,r4,736
   12a6c:	dd800615 	stw	r22,24(sp)
   12a70:	dd400515 	stw	r21,20(sp)
   12a74:	dd000415 	stw	r20,16(sp)
   12a78:	dfc00715 	stw	ra,28(sp)
   12a7c:	dc800215 	stw	r18,8(sp)
   12a80:	dc400115 	stw	r17,4(sp)
   12a84:	dc000015 	stw	r16,0(sp)
   12a88:	2029883a 	mov	r20,r4
   12a8c:	282b883a 	mov	r21,r5
   12a90:	002d883a 	mov	r22,zero
   12a94:	001256c0 	call	1256c <__sfp_lock_acquire>
   12a98:	98001326 	beq	r19,zero,12ae8 <_fwalk_reent+0x88>
   12a9c:	04bfffc4 	movi	r18,-1
   12aa0:	9c400117 	ldw	r17,4(r19)
   12aa4:	9c000217 	ldw	r16,8(r19)
   12aa8:	8c7fffc4 	addi	r17,r17,-1
   12aac:	88000c16 	blt	r17,zero,12ae0 <_fwalk_reent+0x80>
   12ab0:	84000304 	addi	r16,r16,12
   12ab4:	80c0000f 	ldh	r3,0(r16)
   12ab8:	8c7fffc4 	addi	r17,r17,-1
   12abc:	817ffd04 	addi	r5,r16,-12
   12ac0:	18000526 	beq	r3,zero,12ad8 <_fwalk_reent+0x78>
   12ac4:	80c0008f 	ldh	r3,2(r16)
   12ac8:	a009883a 	mov	r4,r20
   12acc:	1c800226 	beq	r3,r18,12ad8 <_fwalk_reent+0x78>
   12ad0:	a83ee83a 	callr	r21
   12ad4:	b0acb03a 	or	r22,r22,r2
   12ad8:	84001704 	addi	r16,r16,92
   12adc:	8cbff51e 	bne	r17,r18,12ab4 <_fwalk_reent+0x54>
   12ae0:	9cc00017 	ldw	r19,0(r19)
   12ae4:	983fee1e 	bne	r19,zero,12aa0 <_fwalk_reent+0x40>
   12ae8:	00125700 	call	12570 <__sfp_lock_release>
   12aec:	b005883a 	mov	r2,r22
   12af0:	dfc00717 	ldw	ra,28(sp)
   12af4:	dd800617 	ldw	r22,24(sp)
   12af8:	dd400517 	ldw	r21,20(sp)
   12afc:	dd000417 	ldw	r20,16(sp)
   12b00:	dcc00317 	ldw	r19,12(sp)
   12b04:	dc800217 	ldw	r18,8(sp)
   12b08:	dc400117 	ldw	r17,4(sp)
   12b0c:	dc000017 	ldw	r16,0(sp)
   12b10:	dec00804 	addi	sp,sp,32
   12b14:	f800283a 	ret

00012b18 <__smakebuf_r>:
   12b18:	2880030b 	ldhu	r2,12(r5)
   12b1c:	deffed04 	addi	sp,sp,-76
   12b20:	dc401015 	stw	r17,64(sp)
   12b24:	10c0008c 	andi	r3,r2,2
   12b28:	18ffffcc 	andi	r3,r3,65535
   12b2c:	18e0001c 	xori	r3,r3,32768
   12b30:	dc000f15 	stw	r16,60(sp)
   12b34:	dfc01215 	stw	ra,72(sp)
   12b38:	dc801115 	stw	r18,68(sp)
   12b3c:	18e00004 	addi	r3,r3,-32768
   12b40:	2821883a 	mov	r16,r5
   12b44:	2023883a 	mov	r17,r4
   12b48:	1800381e 	bne	r3,zero,12c2c <__smakebuf_r+0x114>
   12b4c:	2940038f 	ldh	r5,14(r5)
   12b50:	28002d16 	blt	r5,zero,12c08 <__smakebuf_r+0xf0>
   12b54:	d80d883a 	mov	r6,sp
   12b58:	00130fc0 	call	130fc <_fstat_r>
   12b5c:	10002916 	blt	r2,zero,12c04 <__smakebuf_r+0xec>
   12b60:	d8800117 	ldw	r2,4(sp)
   12b64:	00e00014 	movui	r3,32768
   12b68:	10bc000c 	andi	r2,r2,61440
   12b6c:	10c03c26 	beq	r2,r3,12c60 <__smakebuf_r+0x148>
   12b70:	80c0030b 	ldhu	r3,12(r16)
   12b74:	18c20014 	ori	r3,r3,2048
   12b78:	80c0030d 	sth	r3,12(r16)
   12b7c:	00c80004 	movi	r3,8192
   12b80:	10c00c1e 	bne	r2,r3,12bb4 <__smakebuf_r+0x9c>
   12b84:	8140038f 	ldh	r5,14(r16)
   12b88:	8809883a 	mov	r4,r17
   12b8c:	00131640 	call	13164 <_isatty_r>
   12b90:	10000826 	beq	r2,zero,12bb4 <__smakebuf_r+0x9c>
   12b94:	80c0030b 	ldhu	r3,12(r16)
   12b98:	808010c4 	addi	r2,r16,67
   12b9c:	80800015 	stw	r2,0(r16)
   12ba0:	18c00054 	ori	r3,r3,1
   12ba4:	80800415 	stw	r2,16(r16)
   12ba8:	00800044 	movi	r2,1
   12bac:	80c0030d 	sth	r3,12(r16)
   12bb0:	80800515 	stw	r2,20(r16)
   12bb4:	04810004 	movi	r18,1024
   12bb8:	8809883a 	mov	r4,r17
   12bbc:	900b883a 	mov	r5,r18
   12bc0:	0010d8c0 	call	10d8c <_malloc_r>
   12bc4:	10003026 	beq	r2,zero,12c88 <__smakebuf_r+0x170>
   12bc8:	80c0030b 	ldhu	r3,12(r16)
   12bcc:	01000074 	movhi	r4,1
   12bd0:	2108b404 	addi	r4,r4,8912
   12bd4:	89000f15 	stw	r4,60(r17)
   12bd8:	18c02014 	ori	r3,r3,128
   12bdc:	80c0030d 	sth	r3,12(r16)
   12be0:	80800015 	stw	r2,0(r16)
   12be4:	80800415 	stw	r2,16(r16)
   12be8:	84800515 	stw	r18,20(r16)
   12bec:	dfc01217 	ldw	ra,72(sp)
   12bf0:	dc801117 	ldw	r18,68(sp)
   12bf4:	dc401017 	ldw	r17,64(sp)
   12bf8:	dc000f17 	ldw	r16,60(sp)
   12bfc:	dec01304 	addi	sp,sp,76
   12c00:	f800283a 	ret
   12c04:	8080030b 	ldhu	r2,12(r16)
   12c08:	10c0200c 	andi	r3,r2,128
   12c0c:	18ffffcc 	andi	r3,r3,65535
   12c10:	18e0001c 	xori	r3,r3,32768
   12c14:	18e00004 	addi	r3,r3,-32768
   12c18:	18000f1e 	bne	r3,zero,12c58 <__smakebuf_r+0x140>
   12c1c:	04810004 	movi	r18,1024
   12c20:	10820014 	ori	r2,r2,2048
   12c24:	8080030d 	sth	r2,12(r16)
   12c28:	003fe306 	br	12bb8 <__smakebuf_r+0xa0>
   12c2c:	288010c4 	addi	r2,r5,67
   12c30:	28800015 	stw	r2,0(r5)
   12c34:	28800415 	stw	r2,16(r5)
   12c38:	00800044 	movi	r2,1
   12c3c:	28800515 	stw	r2,20(r5)
   12c40:	dfc01217 	ldw	ra,72(sp)
   12c44:	dc801117 	ldw	r18,68(sp)
   12c48:	dc401017 	ldw	r17,64(sp)
   12c4c:	dc000f17 	ldw	r16,60(sp)
   12c50:	dec01304 	addi	sp,sp,76
   12c54:	f800283a 	ret
   12c58:	04801004 	movi	r18,64
   12c5c:	003ff006 	br	12c20 <__smakebuf_r+0x108>
   12c60:	81000a17 	ldw	r4,40(r16)
   12c64:	00c00074 	movhi	r3,1
   12c68:	18cb9e04 	addi	r3,r3,11896
   12c6c:	20ffc01e 	bne	r4,r3,12b70 <__smakebuf_r+0x58>
   12c70:	8080030b 	ldhu	r2,12(r16)
   12c74:	00c10004 	movi	r3,1024
   12c78:	80c01315 	stw	r3,76(r16)
   12c7c:	10c4b03a 	or	r2,r2,r3
   12c80:	8080030d 	sth	r2,12(r16)
   12c84:	003fcb06 	br	12bb4 <__smakebuf_r+0x9c>
   12c88:	8080030b 	ldhu	r2,12(r16)
   12c8c:	10c0800c 	andi	r3,r2,512
   12c90:	18ffffcc 	andi	r3,r3,65535
   12c94:	18e0001c 	xori	r3,r3,32768
   12c98:	18e00004 	addi	r3,r3,-32768
   12c9c:	183fd31e 	bne	r3,zero,12bec <__smakebuf_r+0xd4>
   12ca0:	10800094 	ori	r2,r2,2
   12ca4:	80c010c4 	addi	r3,r16,67
   12ca8:	8080030d 	sth	r2,12(r16)
   12cac:	00800044 	movi	r2,1
   12cb0:	80c00015 	stw	r3,0(r16)
   12cb4:	80c00415 	stw	r3,16(r16)
   12cb8:	80800515 	stw	r2,20(r16)
   12cbc:	003fcb06 	br	12bec <__smakebuf_r+0xd4>

00012cc0 <memset>:
   12cc0:	00c000c4 	movi	r3,3
   12cc4:	2005883a 	mov	r2,r4
   12cc8:	29403fcc 	andi	r5,r5,255
   12ccc:	19802d2e 	bgeu	r3,r6,12d84 <memset+0xc4>
   12cd0:	20c6703a 	and	r3,r4,r3
   12cd4:	18002e1e 	bne	r3,zero,12d90 <memset+0xd0>
   12cd8:	2806923a 	slli	r3,r5,8
   12cdc:	010003c4 	movi	r4,15
   12ce0:	3011883a 	mov	r8,r6
   12ce4:	1946b03a 	or	r3,r3,r5
   12ce8:	180e943a 	slli	r7,r3,16
   12cec:	38ceb03a 	or	r7,r7,r3
   12cf0:	1007883a 	mov	r3,r2
   12cf4:	21800f2e 	bgeu	r4,r6,12d34 <memset+0x74>
   12cf8:	19c00015 	stw	r7,0(r3)
   12cfc:	19c00115 	stw	r7,4(r3)
   12d00:	19c00215 	stw	r7,8(r3)
   12d04:	19c00315 	stw	r7,12(r3)
   12d08:	423ffc04 	addi	r8,r8,-16
   12d0c:	18c00404 	addi	r3,r3,16
   12d10:	223ff936 	bltu	r4,r8,12cf8 <memset+0x38>
   12d14:	30fffc04 	addi	r3,r6,-16
   12d18:	1806d13a 	srli	r3,r3,4
   12d1c:	318003cc 	andi	r6,r6,15
   12d20:	010000c4 	movi	r4,3
   12d24:	18c00044 	addi	r3,r3,1
   12d28:	1806913a 	slli	r3,r3,4
   12d2c:	10c7883a 	add	r3,r2,r3
   12d30:	21800e2e 	bgeu	r4,r6,12d6c <memset+0xac>
   12d34:	1813883a 	mov	r9,r3
   12d38:	3011883a 	mov	r8,r6
   12d3c:	010000c4 	movi	r4,3
   12d40:	49c00015 	stw	r7,0(r9)
   12d44:	423fff04 	addi	r8,r8,-4
   12d48:	4a400104 	addi	r9,r9,4
   12d4c:	223ffc36 	bltu	r4,r8,12d40 <memset+0x80>
   12d50:	313fff04 	addi	r4,r6,-4
   12d54:	2008d0ba 	srli	r4,r4,2
   12d58:	318000cc 	andi	r6,r6,3
   12d5c:	21000044 	addi	r4,r4,1
   12d60:	2109883a 	add	r4,r4,r4
   12d64:	2109883a 	add	r4,r4,r4
   12d68:	1907883a 	add	r3,r3,r4
   12d6c:	30000a26 	beq	r6,zero,12d98 <memset+0xd8>
   12d70:	198d883a 	add	r6,r3,r6
   12d74:	19400005 	stb	r5,0(r3)
   12d78:	18c00044 	addi	r3,r3,1
   12d7c:	19bffd1e 	bne	r3,r6,12d74 <memset+0xb4>
   12d80:	f800283a 	ret
   12d84:	2007883a 	mov	r3,r4
   12d88:	303ff91e 	bne	r6,zero,12d70 <memset+0xb0>
   12d8c:	00000206 	br	12d98 <memset+0xd8>
   12d90:	2007883a 	mov	r3,r4
   12d94:	003ff606 	br	12d70 <memset+0xb0>
   12d98:	f800283a 	ret

00012d9c <__sread>:
   12d9c:	defffe04 	addi	sp,sp,-8
   12da0:	dc000015 	stw	r16,0(sp)
   12da4:	2821883a 	mov	r16,r5
   12da8:	2940038f 	ldh	r5,14(r5)
   12dac:	dfc00115 	stw	ra,4(sp)
   12db0:	00132340 	call	13234 <_read_r>
   12db4:	10000716 	blt	r2,zero,12dd4 <__sread+0x38>
   12db8:	80c01417 	ldw	r3,80(r16)
   12dbc:	1887883a 	add	r3,r3,r2
   12dc0:	80c01415 	stw	r3,80(r16)
   12dc4:	dfc00117 	ldw	ra,4(sp)
   12dc8:	dc000017 	ldw	r16,0(sp)
   12dcc:	dec00204 	addi	sp,sp,8
   12dd0:	f800283a 	ret
   12dd4:	80c0030b 	ldhu	r3,12(r16)
   12dd8:	18fbffcc 	andi	r3,r3,61439
   12ddc:	80c0030d 	sth	r3,12(r16)
   12de0:	dfc00117 	ldw	ra,4(sp)
   12de4:	dc000017 	ldw	r16,0(sp)
   12de8:	dec00204 	addi	sp,sp,8
   12dec:	f800283a 	ret

00012df0 <__swrite>:
   12df0:	2880030b 	ldhu	r2,12(r5)
   12df4:	defffb04 	addi	sp,sp,-20
   12df8:	dcc00315 	stw	r19,12(sp)
   12dfc:	10c0400c 	andi	r3,r2,256
   12e00:	18ffffcc 	andi	r3,r3,65535
   12e04:	18e0001c 	xori	r3,r3,32768
   12e08:	dc800215 	stw	r18,8(sp)
   12e0c:	dc400115 	stw	r17,4(sp)
   12e10:	dc000015 	stw	r16,0(sp)
   12e14:	dfc00415 	stw	ra,16(sp)
   12e18:	18e00004 	addi	r3,r3,-32768
   12e1c:	2821883a 	mov	r16,r5
   12e20:	2027883a 	mov	r19,r4
   12e24:	3025883a 	mov	r18,r6
   12e28:	3823883a 	mov	r17,r7
   12e2c:	18000526 	beq	r3,zero,12e44 <__swrite+0x54>
   12e30:	2940038f 	ldh	r5,14(r5)
   12e34:	000d883a 	mov	r6,zero
   12e38:	01c00084 	movi	r7,2
   12e3c:	00131c80 	call	131c8 <_lseek_r>
   12e40:	8080030b 	ldhu	r2,12(r16)
   12e44:	8140038f 	ldh	r5,14(r16)
   12e48:	10bbffcc 	andi	r2,r2,61439
   12e4c:	9809883a 	mov	r4,r19
   12e50:	900d883a 	mov	r6,r18
   12e54:	880f883a 	mov	r7,r17
   12e58:	8080030d 	sth	r2,12(r16)
   12e5c:	dfc00417 	ldw	ra,16(sp)
   12e60:	dcc00317 	ldw	r19,12(sp)
   12e64:	dc800217 	ldw	r18,8(sp)
   12e68:	dc400117 	ldw	r17,4(sp)
   12e6c:	dc000017 	ldw	r16,0(sp)
   12e70:	dec00504 	addi	sp,sp,20
   12e74:	0012edc1 	jmpi	12edc <_write_r>

00012e78 <__sseek>:
   12e78:	defffe04 	addi	sp,sp,-8
   12e7c:	dc000015 	stw	r16,0(sp)
   12e80:	2821883a 	mov	r16,r5
   12e84:	2940038f 	ldh	r5,14(r5)
   12e88:	dfc00115 	stw	ra,4(sp)
   12e8c:	00131c80 	call	131c8 <_lseek_r>
   12e90:	00ffffc4 	movi	r3,-1
   12e94:	10c00826 	beq	r2,r3,12eb8 <__sseek+0x40>
   12e98:	80c0030b 	ldhu	r3,12(r16)
   12e9c:	80801415 	stw	r2,80(r16)
   12ea0:	18c40014 	ori	r3,r3,4096
   12ea4:	80c0030d 	sth	r3,12(r16)
   12ea8:	dfc00117 	ldw	ra,4(sp)
   12eac:	dc000017 	ldw	r16,0(sp)
   12eb0:	dec00204 	addi	sp,sp,8
   12eb4:	f800283a 	ret
   12eb8:	80c0030b 	ldhu	r3,12(r16)
   12ebc:	18fbffcc 	andi	r3,r3,61439
   12ec0:	80c0030d 	sth	r3,12(r16)
   12ec4:	dfc00117 	ldw	ra,4(sp)
   12ec8:	dc000017 	ldw	r16,0(sp)
   12ecc:	dec00204 	addi	sp,sp,8
   12ed0:	f800283a 	ret

00012ed4 <__sclose>:
   12ed4:	2940038f 	ldh	r5,14(r5)
   12ed8:	0012f481 	jmpi	12f48 <_close_r>

00012edc <_write_r>:
   12edc:	defffd04 	addi	sp,sp,-12
   12ee0:	dc400115 	stw	r17,4(sp)
   12ee4:	dc000015 	stw	r16,0(sp)
   12ee8:	2023883a 	mov	r17,r4
   12eec:	040000b4 	movhi	r16,2
   12ef0:	84256704 	addi	r16,r16,-27236
   12ef4:	2809883a 	mov	r4,r5
   12ef8:	300b883a 	mov	r5,r6
   12efc:	380d883a 	mov	r6,r7
   12f00:	dfc00215 	stw	ra,8(sp)
   12f04:	80000015 	stw	zero,0(r16)
   12f08:	0013b900 	call	13b90 <write>
   12f0c:	00ffffc4 	movi	r3,-1
   12f10:	10c00526 	beq	r2,r3,12f28 <_write_r+0x4c>
   12f14:	dfc00217 	ldw	ra,8(sp)
   12f18:	dc400117 	ldw	r17,4(sp)
   12f1c:	dc000017 	ldw	r16,0(sp)
   12f20:	dec00304 	addi	sp,sp,12
   12f24:	f800283a 	ret
   12f28:	80c00017 	ldw	r3,0(r16)
   12f2c:	183ff926 	beq	r3,zero,12f14 <_write_r+0x38>
   12f30:	88c00015 	stw	r3,0(r17)
   12f34:	dfc00217 	ldw	ra,8(sp)
   12f38:	dc400117 	ldw	r17,4(sp)
   12f3c:	dc000017 	ldw	r16,0(sp)
   12f40:	dec00304 	addi	sp,sp,12
   12f44:	f800283a 	ret

00012f48 <_close_r>:
   12f48:	defffd04 	addi	sp,sp,-12
   12f4c:	dc400115 	stw	r17,4(sp)
   12f50:	dc000015 	stw	r16,0(sp)
   12f54:	2023883a 	mov	r17,r4
   12f58:	040000b4 	movhi	r16,2
   12f5c:	84256704 	addi	r16,r16,-27236
   12f60:	2809883a 	mov	r4,r5
   12f64:	dfc00215 	stw	ra,8(sp)
   12f68:	80000015 	stw	zero,0(r16)
   12f6c:	00133180 	call	13318 <close>
   12f70:	00ffffc4 	movi	r3,-1
   12f74:	10c00526 	beq	r2,r3,12f8c <_close_r+0x44>
   12f78:	dfc00217 	ldw	ra,8(sp)
   12f7c:	dc400117 	ldw	r17,4(sp)
   12f80:	dc000017 	ldw	r16,0(sp)
   12f84:	dec00304 	addi	sp,sp,12
   12f88:	f800283a 	ret
   12f8c:	80c00017 	ldw	r3,0(r16)
   12f90:	183ff926 	beq	r3,zero,12f78 <_close_r+0x30>
   12f94:	88c00015 	stw	r3,0(r17)
   12f98:	dfc00217 	ldw	ra,8(sp)
   12f9c:	dc400117 	ldw	r17,4(sp)
   12fa0:	dc000017 	ldw	r16,0(sp)
   12fa4:	dec00304 	addi	sp,sp,12
   12fa8:	f800283a 	ret

00012fac <_fclose_r>:
   12fac:	defffc04 	addi	sp,sp,-16
   12fb0:	dc400115 	stw	r17,4(sp)
   12fb4:	dc000015 	stw	r16,0(sp)
   12fb8:	dfc00315 	stw	ra,12(sp)
   12fbc:	dc800215 	stw	r18,8(sp)
   12fc0:	2821883a 	mov	r16,r5
   12fc4:	2023883a 	mov	r17,r4
   12fc8:	28003426 	beq	r5,zero,1309c <_fclose_r+0xf0>
   12fcc:	001256c0 	call	1256c <__sfp_lock_acquire>
   12fd0:	88000226 	beq	r17,zero,12fdc <_fclose_r+0x30>
   12fd4:	88800e17 	ldw	r2,56(r17)
   12fd8:	10003826 	beq	r2,zero,130bc <_fclose_r+0x110>
   12fdc:	8080030f 	ldh	r2,12(r16)
   12fe0:	10002526 	beq	r2,zero,13078 <_fclose_r+0xcc>
   12fe4:	8809883a 	mov	r4,r17
   12fe8:	800b883a 	mov	r5,r16
   12fec:	00120a80 	call	120a8 <_fflush_r>
   12ff0:	1025883a 	mov	r18,r2
   12ff4:	80800b17 	ldw	r2,44(r16)
   12ff8:	10000426 	beq	r2,zero,1300c <_fclose_r+0x60>
   12ffc:	81400717 	ldw	r5,28(r16)
   13000:	8809883a 	mov	r4,r17
   13004:	103ee83a 	callr	r2
   13008:	10003516 	blt	r2,zero,130e0 <_fclose_r+0x134>
   1300c:	8080030b 	ldhu	r2,12(r16)
   13010:	1080200c 	andi	r2,r2,128
   13014:	10bfffcc 	andi	r2,r2,65535
   13018:	10a0001c 	xori	r2,r2,32768
   1301c:	10a00004 	addi	r2,r2,-32768
   13020:	10002b1e 	bne	r2,zero,130d0 <_fclose_r+0x124>
   13024:	81400c17 	ldw	r5,48(r16)
   13028:	28000526 	beq	r5,zero,13040 <_fclose_r+0x94>
   1302c:	80801004 	addi	r2,r16,64
   13030:	28800226 	beq	r5,r2,1303c <_fclose_r+0x90>
   13034:	8809883a 	mov	r4,r17
   13038:	00126e80 	call	126e8 <_free_r>
   1303c:	80000c15 	stw	zero,48(r16)
   13040:	81401117 	ldw	r5,68(r16)
   13044:	28000326 	beq	r5,zero,13054 <_fclose_r+0xa8>
   13048:	8809883a 	mov	r4,r17
   1304c:	00126e80 	call	126e8 <_free_r>
   13050:	80001115 	stw	zero,68(r16)
   13054:	8000030d 	sth	zero,12(r16)
   13058:	00125700 	call	12570 <__sfp_lock_release>
   1305c:	9005883a 	mov	r2,r18
   13060:	dfc00317 	ldw	ra,12(sp)
   13064:	dc800217 	ldw	r18,8(sp)
   13068:	dc400117 	ldw	r17,4(sp)
   1306c:	dc000017 	ldw	r16,0(sp)
   13070:	dec00404 	addi	sp,sp,16
   13074:	f800283a 	ret
   13078:	00125700 	call	12570 <__sfp_lock_release>
   1307c:	0025883a 	mov	r18,zero
   13080:	9005883a 	mov	r2,r18
   13084:	dfc00317 	ldw	ra,12(sp)
   13088:	dc800217 	ldw	r18,8(sp)
   1308c:	dc400117 	ldw	r17,4(sp)
   13090:	dc000017 	ldw	r16,0(sp)
   13094:	dec00404 	addi	sp,sp,16
   13098:	f800283a 	ret
   1309c:	0025883a 	mov	r18,zero
   130a0:	9005883a 	mov	r2,r18
   130a4:	dfc00317 	ldw	ra,12(sp)
   130a8:	dc800217 	ldw	r18,8(sp)
   130ac:	dc400117 	ldw	r17,4(sp)
   130b0:	dc000017 	ldw	r16,0(sp)
   130b4:	dec00404 	addi	sp,sp,16
   130b8:	f800283a 	ret
   130bc:	8809883a 	mov	r4,r17
   130c0:	00123640 	call	12364 <__sinit>
   130c4:	8080030f 	ldh	r2,12(r16)
   130c8:	103fc61e 	bne	r2,zero,12fe4 <_fclose_r+0x38>
   130cc:	003fea06 	br	13078 <_fclose_r+0xcc>
   130d0:	81400417 	ldw	r5,16(r16)
   130d4:	8809883a 	mov	r4,r17
   130d8:	00126e80 	call	126e8 <_free_r>
   130dc:	003fd106 	br	13024 <_fclose_r+0x78>
   130e0:	04bfffc4 	movi	r18,-1
   130e4:	003fc906 	br	1300c <_fclose_r+0x60>

000130e8 <fclose>:
   130e8:	00800074 	movhi	r2,1
   130ec:	109ea504 	addi	r2,r2,31380
   130f0:	200b883a 	mov	r5,r4
   130f4:	11000017 	ldw	r4,0(r2)
   130f8:	0012fac1 	jmpi	12fac <_fclose_r>

000130fc <_fstat_r>:
   130fc:	defffd04 	addi	sp,sp,-12
   13100:	dc400115 	stw	r17,4(sp)
   13104:	dc000015 	stw	r16,0(sp)
   13108:	2023883a 	mov	r17,r4
   1310c:	040000b4 	movhi	r16,2
   13110:	84256704 	addi	r16,r16,-27236
   13114:	2809883a 	mov	r4,r5
   13118:	300b883a 	mov	r5,r6
   1311c:	dfc00215 	stw	ra,8(sp)
   13120:	80000015 	stw	zero,0(r16)
   13124:	00134600 	call	13460 <fstat>
   13128:	00ffffc4 	movi	r3,-1
   1312c:	10c00526 	beq	r2,r3,13144 <_fstat_r+0x48>
   13130:	dfc00217 	ldw	ra,8(sp)
   13134:	dc400117 	ldw	r17,4(sp)
   13138:	dc000017 	ldw	r16,0(sp)
   1313c:	dec00304 	addi	sp,sp,12
   13140:	f800283a 	ret
   13144:	80c00017 	ldw	r3,0(r16)
   13148:	183ff926 	beq	r3,zero,13130 <_fstat_r+0x34>
   1314c:	88c00015 	stw	r3,0(r17)
   13150:	dfc00217 	ldw	ra,8(sp)
   13154:	dc400117 	ldw	r17,4(sp)
   13158:	dc000017 	ldw	r16,0(sp)
   1315c:	dec00304 	addi	sp,sp,12
   13160:	f800283a 	ret

00013164 <_isatty_r>:
   13164:	defffd04 	addi	sp,sp,-12
   13168:	dc400115 	stw	r17,4(sp)
   1316c:	dc000015 	stw	r16,0(sp)
   13170:	2023883a 	mov	r17,r4
   13174:	040000b4 	movhi	r16,2
   13178:	84256704 	addi	r16,r16,-27236
   1317c:	2809883a 	mov	r4,r5
   13180:	dfc00215 	stw	ra,8(sp)
   13184:	80000015 	stw	zero,0(r16)
   13188:	00135600 	call	13560 <isatty>
   1318c:	00ffffc4 	movi	r3,-1
   13190:	10c00526 	beq	r2,r3,131a8 <_isatty_r+0x44>
   13194:	dfc00217 	ldw	ra,8(sp)
   13198:	dc400117 	ldw	r17,4(sp)
   1319c:	dc000017 	ldw	r16,0(sp)
   131a0:	dec00304 	addi	sp,sp,12
   131a4:	f800283a 	ret
   131a8:	80c00017 	ldw	r3,0(r16)
   131ac:	183ff926 	beq	r3,zero,13194 <_isatty_r+0x30>
   131b0:	88c00015 	stw	r3,0(r17)
   131b4:	dfc00217 	ldw	ra,8(sp)
   131b8:	dc400117 	ldw	r17,4(sp)
   131bc:	dc000017 	ldw	r16,0(sp)
   131c0:	dec00304 	addi	sp,sp,12
   131c4:	f800283a 	ret

000131c8 <_lseek_r>:
   131c8:	defffd04 	addi	sp,sp,-12
   131cc:	dc400115 	stw	r17,4(sp)
   131d0:	dc000015 	stw	r16,0(sp)
   131d4:	2023883a 	mov	r17,r4
   131d8:	040000b4 	movhi	r16,2
   131dc:	84256704 	addi	r16,r16,-27236
   131e0:	2809883a 	mov	r4,r5
   131e4:	300b883a 	mov	r5,r6
   131e8:	380d883a 	mov	r6,r7
   131ec:	dfc00215 	stw	ra,8(sp)
   131f0:	80000015 	stw	zero,0(r16)
   131f4:	00137400 	call	13740 <lseek>
   131f8:	00ffffc4 	movi	r3,-1
   131fc:	10c00526 	beq	r2,r3,13214 <_lseek_r+0x4c>
   13200:	dfc00217 	ldw	ra,8(sp)
   13204:	dc400117 	ldw	r17,4(sp)
   13208:	dc000017 	ldw	r16,0(sp)
   1320c:	dec00304 	addi	sp,sp,12
   13210:	f800283a 	ret
   13214:	80c00017 	ldw	r3,0(r16)
   13218:	183ff926 	beq	r3,zero,13200 <_lseek_r+0x38>
   1321c:	88c00015 	stw	r3,0(r17)
   13220:	dfc00217 	ldw	ra,8(sp)
   13224:	dc400117 	ldw	r17,4(sp)
   13228:	dc000017 	ldw	r16,0(sp)
   1322c:	dec00304 	addi	sp,sp,12
   13230:	f800283a 	ret

00013234 <_read_r>:
   13234:	defffd04 	addi	sp,sp,-12
   13238:	dc400115 	stw	r17,4(sp)
   1323c:	dc000015 	stw	r16,0(sp)
   13240:	2023883a 	mov	r17,r4
   13244:	040000b4 	movhi	r16,2
   13248:	84256704 	addi	r16,r16,-27236
   1324c:	2809883a 	mov	r4,r5
   13250:	300b883a 	mov	r5,r6
   13254:	380d883a 	mov	r6,r7
   13258:	dfc00215 	stw	ra,8(sp)
   1325c:	80000015 	stw	zero,0(r16)
   13260:	001391c0 	call	1391c <read>
   13264:	00ffffc4 	movi	r3,-1
   13268:	10c00526 	beq	r2,r3,13280 <_read_r+0x4c>
   1326c:	dfc00217 	ldw	ra,8(sp)
   13270:	dc400117 	ldw	r17,4(sp)
   13274:	dc000017 	ldw	r16,0(sp)
   13278:	dec00304 	addi	sp,sp,12
   1327c:	f800283a 	ret
   13280:	80c00017 	ldw	r3,0(r16)
   13284:	183ff926 	beq	r3,zero,1326c <_read_r+0x38>
   13288:	88c00015 	stw	r3,0(r17)
   1328c:	dfc00217 	ldw	ra,8(sp)
   13290:	dc400117 	ldw	r17,4(sp)
   13294:	dc000017 	ldw	r16,0(sp)
   13298:	dec00304 	addi	sp,sp,12
   1329c:	f800283a 	ret

000132a0 <__mulsi3>:
   132a0:	0005883a 	mov	r2,zero
   132a4:	20000726 	beq	r4,zero,132c4 <__mulsi3+0x24>
   132a8:	20c0004c 	andi	r3,r4,1
   132ac:	2008d07a 	srli	r4,r4,1
   132b0:	18000126 	beq	r3,zero,132b8 <__mulsi3+0x18>
   132b4:	1145883a 	add	r2,r2,r5
   132b8:	294b883a 	add	r5,r5,r5
   132bc:	203ffa1e 	bne	r4,zero,132a8 <__mulsi3+0x8>
   132c0:	f800283a 	ret
   132c4:	f800283a 	ret

000132c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132c8:	defffe04 	addi	sp,sp,-8
   132cc:	dfc00115 	stw	ra,4(sp)
   132d0:	df000015 	stw	fp,0(sp)
   132d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132d8:	00800074 	movhi	r2,1
   132dc:	109ead04 	addi	r2,r2,31412
   132e0:	10800017 	ldw	r2,0(r2)
   132e4:	10000526 	beq	r2,zero,132fc <alt_get_errno+0x34>
   132e8:	00800074 	movhi	r2,1
   132ec:	109ead04 	addi	r2,r2,31412
   132f0:	10800017 	ldw	r2,0(r2)
   132f4:	103ee83a 	callr	r2
   132f8:	00000206 	br	13304 <alt_get_errno+0x3c>
   132fc:	008000b4 	movhi	r2,2
   13300:	10a56704 	addi	r2,r2,-27236
}
   13304:	e037883a 	mov	sp,fp
   13308:	dfc00117 	ldw	ra,4(sp)
   1330c:	df000017 	ldw	fp,0(sp)
   13310:	dec00204 	addi	sp,sp,8
   13314:	f800283a 	ret

00013318 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13318:	defffb04 	addi	sp,sp,-20
   1331c:	dfc00415 	stw	ra,16(sp)
   13320:	df000315 	stw	fp,12(sp)
   13324:	df000304 	addi	fp,sp,12
   13328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	10000716 	blt	r2,zero,13350 <close+0x38>
   13334:	e13fff17 	ldw	r4,-4(fp)
   13338:	01400304 	movi	r5,12
   1333c:	00132a00 	call	132a0 <__mulsi3>
   13340:	00c00074 	movhi	r3,1
   13344:	18da2c04 	addi	r3,r3,26800
   13348:	10c5883a 	add	r2,r2,r3
   1334c:	00000106 	br	13354 <close+0x3c>
   13350:	0005883a 	mov	r2,zero
   13354:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13358:	e0bffd17 	ldw	r2,-12(fp)
   1335c:	10001826 	beq	r2,zero,133c0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13360:	e0bffd17 	ldw	r2,-12(fp)
   13364:	10800017 	ldw	r2,0(r2)
   13368:	10800417 	ldw	r2,16(r2)
   1336c:	10000626 	beq	r2,zero,13388 <close+0x70>
   13370:	e0bffd17 	ldw	r2,-12(fp)
   13374:	10800017 	ldw	r2,0(r2)
   13378:	10800417 	ldw	r2,16(r2)
   1337c:	e13ffd17 	ldw	r4,-12(fp)
   13380:	103ee83a 	callr	r2
   13384:	00000106 	br	1338c <close+0x74>
   13388:	0005883a 	mov	r2,zero
   1338c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13390:	e13fff17 	ldw	r4,-4(fp)
   13394:	0013a100 	call	13a10 <alt_release_fd>
    if (rval < 0)
   13398:	e0bffe17 	ldw	r2,-8(fp)
   1339c:	1000060e 	bge	r2,zero,133b8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   133a0:	00132c80 	call	132c8 <alt_get_errno>
   133a4:	e0fffe17 	ldw	r3,-8(fp)
   133a8:	00c7c83a 	sub	r3,zero,r3
   133ac:	10c00015 	stw	r3,0(r2)
      return -1;
   133b0:	00bfffc4 	movi	r2,-1
   133b4:	00000606 	br	133d0 <close+0xb8>
    }
    return 0;
   133b8:	0005883a 	mov	r2,zero
   133bc:	00000406 	br	133d0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133c0:	00132c80 	call	132c8 <alt_get_errno>
   133c4:	00c01444 	movi	r3,81
   133c8:	10c00015 	stw	r3,0(r2)
    return -1;
   133cc:	00bfffc4 	movi	r2,-1
  }
}
   133d0:	e037883a 	mov	sp,fp
   133d4:	dfc00117 	ldw	ra,4(sp)
   133d8:	df000017 	ldw	fp,0(sp)
   133dc:	dec00204 	addi	sp,sp,8
   133e0:	f800283a 	ret

000133e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   133e4:	defffc04 	addi	sp,sp,-16
   133e8:	df000315 	stw	fp,12(sp)
   133ec:	df000304 	addi	fp,sp,12
   133f0:	e13ffd15 	stw	r4,-12(fp)
   133f4:	e17ffe15 	stw	r5,-8(fp)
   133f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   133fc:	e0bfff17 	ldw	r2,-4(fp)
}
   13400:	e037883a 	mov	sp,fp
   13404:	df000017 	ldw	fp,0(sp)
   13408:	dec00104 	addi	sp,sp,4
   1340c:	f800283a 	ret

00013410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13410:	defffe04 	addi	sp,sp,-8
   13414:	dfc00115 	stw	ra,4(sp)
   13418:	df000015 	stw	fp,0(sp)
   1341c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13420:	00800074 	movhi	r2,1
   13424:	109ead04 	addi	r2,r2,31412
   13428:	10800017 	ldw	r2,0(r2)
   1342c:	10000526 	beq	r2,zero,13444 <alt_get_errno+0x34>
   13430:	00800074 	movhi	r2,1
   13434:	109ead04 	addi	r2,r2,31412
   13438:	10800017 	ldw	r2,0(r2)
   1343c:	103ee83a 	callr	r2
   13440:	00000206 	br	1344c <alt_get_errno+0x3c>
   13444:	008000b4 	movhi	r2,2
   13448:	10a56704 	addi	r2,r2,-27236
}
   1344c:	e037883a 	mov	sp,fp
   13450:	dfc00117 	ldw	ra,4(sp)
   13454:	df000017 	ldw	fp,0(sp)
   13458:	dec00204 	addi	sp,sp,8
   1345c:	f800283a 	ret

00013460 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13460:	defffb04 	addi	sp,sp,-20
   13464:	dfc00415 	stw	ra,16(sp)
   13468:	df000315 	stw	fp,12(sp)
   1346c:	df000304 	addi	fp,sp,12
   13470:	e13ffe15 	stw	r4,-8(fp)
   13474:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13478:	e0bffe17 	ldw	r2,-8(fp)
   1347c:	10000716 	blt	r2,zero,1349c <fstat+0x3c>
   13480:	e13ffe17 	ldw	r4,-8(fp)
   13484:	01400304 	movi	r5,12
   13488:	00132a00 	call	132a0 <__mulsi3>
   1348c:	00c00074 	movhi	r3,1
   13490:	18da2c04 	addi	r3,r3,26800
   13494:	10c5883a 	add	r2,r2,r3
   13498:	00000106 	br	134a0 <fstat+0x40>
   1349c:	0005883a 	mov	r2,zero
   134a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   134a4:	e0bffd17 	ldw	r2,-12(fp)
   134a8:	10001026 	beq	r2,zero,134ec <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   134ac:	e0bffd17 	ldw	r2,-12(fp)
   134b0:	10800017 	ldw	r2,0(r2)
   134b4:	10800817 	ldw	r2,32(r2)
   134b8:	10000726 	beq	r2,zero,134d8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   134bc:	e0bffd17 	ldw	r2,-12(fp)
   134c0:	10800017 	ldw	r2,0(r2)
   134c4:	10800817 	ldw	r2,32(r2)
   134c8:	e13ffd17 	ldw	r4,-12(fp)
   134cc:	e17fff17 	ldw	r5,-4(fp)
   134d0:	103ee83a 	callr	r2
   134d4:	00000906 	br	134fc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   134d8:	e0bfff17 	ldw	r2,-4(fp)
   134dc:	00c80004 	movi	r3,8192
   134e0:	10c00115 	stw	r3,4(r2)
      return 0;
   134e4:	0005883a 	mov	r2,zero
   134e8:	00000406 	br	134fc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134ec:	00134100 	call	13410 <alt_get_errno>
   134f0:	00c01444 	movi	r3,81
   134f4:	10c00015 	stw	r3,0(r2)
    return -1;
   134f8:	00bfffc4 	movi	r2,-1
  }
}
   134fc:	e037883a 	mov	sp,fp
   13500:	dfc00117 	ldw	ra,4(sp)
   13504:	df000017 	ldw	fp,0(sp)
   13508:	dec00204 	addi	sp,sp,8
   1350c:	f800283a 	ret

00013510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13510:	defffe04 	addi	sp,sp,-8
   13514:	dfc00115 	stw	ra,4(sp)
   13518:	df000015 	stw	fp,0(sp)
   1351c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13520:	00800074 	movhi	r2,1
   13524:	109ead04 	addi	r2,r2,31412
   13528:	10800017 	ldw	r2,0(r2)
   1352c:	10000526 	beq	r2,zero,13544 <alt_get_errno+0x34>
   13530:	00800074 	movhi	r2,1
   13534:	109ead04 	addi	r2,r2,31412
   13538:	10800017 	ldw	r2,0(r2)
   1353c:	103ee83a 	callr	r2
   13540:	00000206 	br	1354c <alt_get_errno+0x3c>
   13544:	008000b4 	movhi	r2,2
   13548:	10a56704 	addi	r2,r2,-27236
}
   1354c:	e037883a 	mov	sp,fp
   13550:	dfc00117 	ldw	ra,4(sp)
   13554:	df000017 	ldw	fp,0(sp)
   13558:	dec00204 	addi	sp,sp,8
   1355c:	f800283a 	ret

00013560 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13560:	deffed04 	addi	sp,sp,-76
   13564:	dfc01215 	stw	ra,72(sp)
   13568:	df001115 	stw	fp,68(sp)
   1356c:	df001104 	addi	fp,sp,68
   13570:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13574:	e0bfff17 	ldw	r2,-4(fp)
   13578:	10000716 	blt	r2,zero,13598 <isatty+0x38>
   1357c:	e13fff17 	ldw	r4,-4(fp)
   13580:	01400304 	movi	r5,12
   13584:	00132a00 	call	132a0 <__mulsi3>
   13588:	00c00074 	movhi	r3,1
   1358c:	18da2c04 	addi	r3,r3,26800
   13590:	10c5883a 	add	r2,r2,r3
   13594:	00000106 	br	1359c <isatty+0x3c>
   13598:	0005883a 	mov	r2,zero
   1359c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   135a0:	e0bfef17 	ldw	r2,-68(fp)
   135a4:	10000e26 	beq	r2,zero,135e0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   135a8:	e0bfef17 	ldw	r2,-68(fp)
   135ac:	10800017 	ldw	r2,0(r2)
   135b0:	10800817 	ldw	r2,32(r2)
   135b4:	1000021e 	bne	r2,zero,135c0 <isatty+0x60>
    {
      return 1;
   135b8:	00800044 	movi	r2,1
   135bc:	00000c06 	br	135f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   135c0:	e0bff004 	addi	r2,fp,-64
   135c4:	e13fff17 	ldw	r4,-4(fp)
   135c8:	100b883a 	mov	r5,r2
   135cc:	00134600 	call	13460 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   135d0:	e0bff117 	ldw	r2,-60(fp)
   135d4:	10880020 	cmpeqi	r2,r2,8192
   135d8:	10803fcc 	andi	r2,r2,255
   135dc:	00000406 	br	135f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   135e0:	00135100 	call	13510 <alt_get_errno>
   135e4:	00c01444 	movi	r3,81
   135e8:	10c00015 	stw	r3,0(r2)
    return 0;
   135ec:	0005883a 	mov	r2,zero
  }
}
   135f0:	e037883a 	mov	sp,fp
   135f4:	dfc00117 	ldw	ra,4(sp)
   135f8:	df000017 	ldw	fp,0(sp)
   135fc:	dec00204 	addi	sp,sp,8
   13600:	f800283a 	ret

00013604 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13604:	defffc04 	addi	sp,sp,-16
   13608:	df000315 	stw	fp,12(sp)
   1360c:	df000304 	addi	fp,sp,12
   13610:	e13ffd15 	stw	r4,-12(fp)
   13614:	e17ffe15 	stw	r5,-8(fp)
   13618:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1361c:	e0fffe17 	ldw	r3,-8(fp)
   13620:	e0bffd17 	ldw	r2,-12(fp)
   13624:	18800e26 	beq	r3,r2,13660 <alt_load_section+0x5c>
  {
    while( to != end )
   13628:	00000a06 	br	13654 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1362c:	e0bffd17 	ldw	r2,-12(fp)
   13630:	10c00017 	ldw	r3,0(r2)
   13634:	e0bffe17 	ldw	r2,-8(fp)
   13638:	10c00015 	stw	r3,0(r2)
   1363c:	e0bffe17 	ldw	r2,-8(fp)
   13640:	10800104 	addi	r2,r2,4
   13644:	e0bffe15 	stw	r2,-8(fp)
   13648:	e0bffd17 	ldw	r2,-12(fp)
   1364c:	10800104 	addi	r2,r2,4
   13650:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13654:	e0fffe17 	ldw	r3,-8(fp)
   13658:	e0bfff17 	ldw	r2,-4(fp)
   1365c:	18bff31e 	bne	r3,r2,1362c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13660:	e037883a 	mov	sp,fp
   13664:	df000017 	ldw	fp,0(sp)
   13668:	dec00104 	addi	sp,sp,4
   1366c:	f800283a 	ret

00013670 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13670:	defffe04 	addi	sp,sp,-8
   13674:	dfc00115 	stw	ra,4(sp)
   13678:	df000015 	stw	fp,0(sp)
   1367c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13680:	01000074 	movhi	r4,1
   13684:	211eb204 	addi	r4,r4,31432
   13688:	01400074 	movhi	r5,1
   1368c:	29580204 	addi	r5,r5,24584
   13690:	01800074 	movhi	r6,1
   13694:	319eb204 	addi	r6,r6,31432
   13698:	00136040 	call	13604 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1369c:	01000074 	movhi	r4,1
   136a0:	21000804 	addi	r4,r4,32
   136a4:	01400074 	movhi	r5,1
   136a8:	29400804 	addi	r5,r5,32
   136ac:	01800074 	movhi	r6,1
   136b0:	31806e04 	addi	r6,r6,440
   136b4:	00136040 	call	13604 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   136b8:	01000074 	movhi	r4,1
   136bc:	2117e304 	addi	r4,r4,24460
   136c0:	01400074 	movhi	r5,1
   136c4:	2957e304 	addi	r5,r5,24460
   136c8:	01800074 	movhi	r6,1
   136cc:	31980204 	addi	r6,r6,24584
   136d0:	00136040 	call	13604 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   136d4:	0014eec0 	call	14eec <alt_dcache_flush_all>
  alt_icache_flush_all();
   136d8:	00150b00 	call	150b0 <alt_icache_flush_all>
}
   136dc:	e037883a 	mov	sp,fp
   136e0:	dfc00117 	ldw	ra,4(sp)
   136e4:	df000017 	ldw	fp,0(sp)
   136e8:	dec00204 	addi	sp,sp,8
   136ec:	f800283a 	ret

000136f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136f0:	defffe04 	addi	sp,sp,-8
   136f4:	dfc00115 	stw	ra,4(sp)
   136f8:	df000015 	stw	fp,0(sp)
   136fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13700:	00800074 	movhi	r2,1
   13704:	109ead04 	addi	r2,r2,31412
   13708:	10800017 	ldw	r2,0(r2)
   1370c:	10000526 	beq	r2,zero,13724 <alt_get_errno+0x34>
   13710:	00800074 	movhi	r2,1
   13714:	109ead04 	addi	r2,r2,31412
   13718:	10800017 	ldw	r2,0(r2)
   1371c:	103ee83a 	callr	r2
   13720:	00000206 	br	1372c <alt_get_errno+0x3c>
   13724:	008000b4 	movhi	r2,2
   13728:	10a56704 	addi	r2,r2,-27236
}
   1372c:	e037883a 	mov	sp,fp
   13730:	dfc00117 	ldw	ra,4(sp)
   13734:	df000017 	ldw	fp,0(sp)
   13738:	dec00204 	addi	sp,sp,8
   1373c:	f800283a 	ret

00013740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13740:	defff904 	addi	sp,sp,-28
   13744:	dfc00615 	stw	ra,24(sp)
   13748:	df000515 	stw	fp,20(sp)
   1374c:	df000504 	addi	fp,sp,20
   13750:	e13ffd15 	stw	r4,-12(fp)
   13754:	e17ffe15 	stw	r5,-8(fp)
   13758:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1375c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13760:	e0bffd17 	ldw	r2,-12(fp)
   13764:	10000716 	blt	r2,zero,13784 <lseek+0x44>
   13768:	e13ffd17 	ldw	r4,-12(fp)
   1376c:	01400304 	movi	r5,12
   13770:	00132a00 	call	132a0 <__mulsi3>
   13774:	00c00074 	movhi	r3,1
   13778:	18da2c04 	addi	r3,r3,26800
   1377c:	10c5883a 	add	r2,r2,r3
   13780:	00000106 	br	13788 <lseek+0x48>
   13784:	0005883a 	mov	r2,zero
   13788:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1378c:	e0bffc17 	ldw	r2,-16(fp)
   13790:	10001026 	beq	r2,zero,137d4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13794:	e0bffc17 	ldw	r2,-16(fp)
   13798:	10800017 	ldw	r2,0(r2)
   1379c:	10800717 	ldw	r2,28(r2)
   137a0:	10000926 	beq	r2,zero,137c8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   137a4:	e0bffc17 	ldw	r2,-16(fp)
   137a8:	10800017 	ldw	r2,0(r2)
   137ac:	10800717 	ldw	r2,28(r2)
   137b0:	e13ffc17 	ldw	r4,-16(fp)
   137b4:	e17ffe17 	ldw	r5,-8(fp)
   137b8:	e1bfff17 	ldw	r6,-4(fp)
   137bc:	103ee83a 	callr	r2
   137c0:	e0bffb15 	stw	r2,-20(fp)
   137c4:	00000506 	br	137dc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   137c8:	00bfde84 	movi	r2,-134
   137cc:	e0bffb15 	stw	r2,-20(fp)
   137d0:	00000206 	br	137dc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   137d4:	00bfebc4 	movi	r2,-81
   137d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   137dc:	e0bffb17 	ldw	r2,-20(fp)
   137e0:	1000060e 	bge	r2,zero,137fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   137e4:	00136f00 	call	136f0 <alt_get_errno>
   137e8:	e0fffb17 	ldw	r3,-20(fp)
   137ec:	00c7c83a 	sub	r3,zero,r3
   137f0:	10c00015 	stw	r3,0(r2)
    rc = -1;
   137f4:	00bfffc4 	movi	r2,-1
   137f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   137fc:	e0bffb17 	ldw	r2,-20(fp)
}
   13800:	e037883a 	mov	sp,fp
   13804:	dfc00117 	ldw	ra,4(sp)
   13808:	df000017 	ldw	fp,0(sp)
   1380c:	dec00204 	addi	sp,sp,8
   13810:	f800283a 	ret

00013814 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13814:	defffd04 	addi	sp,sp,-12
   13818:	dfc00215 	stw	ra,8(sp)
   1381c:	df000115 	stw	fp,4(sp)
   13820:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13824:	0009883a 	mov	r4,zero
   13828:	0013cb80 	call	13cb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1382c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13830:	0013cec0 	call	13cec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13834:	01000074 	movhi	r4,1
   13838:	2117f804 	addi	r4,r4,24544
   1383c:	01400074 	movhi	r5,1
   13840:	2957f804 	addi	r5,r5,24544
   13844:	01800074 	movhi	r6,1
   13848:	3197f804 	addi	r6,r6,24544
   1384c:	00154740 	call	15474 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13850:	0014ff80 	call	14ff8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13854:	01000074 	movhi	r4,1
   13858:	21141504 	addi	r4,r4,20564
   1385c:	0015bb80 	call	15bb8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13860:	d126c417 	ldw	r4,-25840(gp)
   13864:	d0e6c517 	ldw	r3,-25836(gp)
   13868:	d0a6c617 	ldw	r2,-25832(gp)
   1386c:	180b883a 	mov	r5,r3
   13870:	100d883a 	mov	r6,r2
   13874:	00102c80 	call	102c8 <main>
   13878:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1387c:	01000044 	movi	r4,1
   13880:	00133180 	call	13318 <close>
  exit (result);
   13884:	e13fff17 	ldw	r4,-4(fp)
   13888:	0015bcc0 	call	15bcc <exit>

0001388c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1388c:	defffe04 	addi	sp,sp,-8
   13890:	df000115 	stw	fp,4(sp)
   13894:	df000104 	addi	fp,sp,4
   13898:	e13fff15 	stw	r4,-4(fp)
}
   1389c:	e037883a 	mov	sp,fp
   138a0:	df000017 	ldw	fp,0(sp)
   138a4:	dec00104 	addi	sp,sp,4
   138a8:	f800283a 	ret

000138ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   138ac:	defffe04 	addi	sp,sp,-8
   138b0:	df000115 	stw	fp,4(sp)
   138b4:	df000104 	addi	fp,sp,4
   138b8:	e13fff15 	stw	r4,-4(fp)
}
   138bc:	e037883a 	mov	sp,fp
   138c0:	df000017 	ldw	fp,0(sp)
   138c4:	dec00104 	addi	sp,sp,4
   138c8:	f800283a 	ret

000138cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   138cc:	defffe04 	addi	sp,sp,-8
   138d0:	dfc00115 	stw	ra,4(sp)
   138d4:	df000015 	stw	fp,0(sp)
   138d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   138dc:	00800074 	movhi	r2,1
   138e0:	109ead04 	addi	r2,r2,31412
   138e4:	10800017 	ldw	r2,0(r2)
   138e8:	10000526 	beq	r2,zero,13900 <alt_get_errno+0x34>
   138ec:	00800074 	movhi	r2,1
   138f0:	109ead04 	addi	r2,r2,31412
   138f4:	10800017 	ldw	r2,0(r2)
   138f8:	103ee83a 	callr	r2
   138fc:	00000206 	br	13908 <alt_get_errno+0x3c>
   13900:	008000b4 	movhi	r2,2
   13904:	10a56704 	addi	r2,r2,-27236
}
   13908:	e037883a 	mov	sp,fp
   1390c:	dfc00117 	ldw	ra,4(sp)
   13910:	df000017 	ldw	fp,0(sp)
   13914:	dec00204 	addi	sp,sp,8
   13918:	f800283a 	ret

0001391c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1391c:	defff904 	addi	sp,sp,-28
   13920:	dfc00615 	stw	ra,24(sp)
   13924:	df000515 	stw	fp,20(sp)
   13928:	df000504 	addi	fp,sp,20
   1392c:	e13ffd15 	stw	r4,-12(fp)
   13930:	e17ffe15 	stw	r5,-8(fp)
   13934:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13938:	e0bffd17 	ldw	r2,-12(fp)
   1393c:	10000716 	blt	r2,zero,1395c <read+0x40>
   13940:	e13ffd17 	ldw	r4,-12(fp)
   13944:	01400304 	movi	r5,12
   13948:	00132a00 	call	132a0 <__mulsi3>
   1394c:	00c00074 	movhi	r3,1
   13950:	18da2c04 	addi	r3,r3,26800
   13954:	10c5883a 	add	r2,r2,r3
   13958:	00000106 	br	13960 <read+0x44>
   1395c:	0005883a 	mov	r2,zero
   13960:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13964:	e0bffb17 	ldw	r2,-20(fp)
   13968:	10002026 	beq	r2,zero,139ec <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1396c:	e0bffb17 	ldw	r2,-20(fp)
   13970:	10800217 	ldw	r2,8(r2)
   13974:	108000cc 	andi	r2,r2,3
   13978:	10800060 	cmpeqi	r2,r2,1
   1397c:	1000171e 	bne	r2,zero,139dc <read+0xc0>
        (fd->dev->read))
   13980:	e0bffb17 	ldw	r2,-20(fp)
   13984:	10800017 	ldw	r2,0(r2)
   13988:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1398c:	10001326 	beq	r2,zero,139dc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13990:	e0bffb17 	ldw	r2,-20(fp)
   13994:	10800017 	ldw	r2,0(r2)
   13998:	10c00517 	ldw	r3,20(r2)
   1399c:	e0bfff17 	ldw	r2,-4(fp)
   139a0:	e13ffb17 	ldw	r4,-20(fp)
   139a4:	e17ffe17 	ldw	r5,-8(fp)
   139a8:	100d883a 	mov	r6,r2
   139ac:	183ee83a 	callr	r3
   139b0:	e0bffc15 	stw	r2,-16(fp)
   139b4:	e0bffc17 	ldw	r2,-16(fp)
   139b8:	1000060e 	bge	r2,zero,139d4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   139bc:	00138cc0 	call	138cc <alt_get_errno>
   139c0:	e0fffc17 	ldw	r3,-16(fp)
   139c4:	00c7c83a 	sub	r3,zero,r3
   139c8:	10c00015 	stw	r3,0(r2)
          return -1;
   139cc:	00bfffc4 	movi	r2,-1
   139d0:	00000a06 	br	139fc <read+0xe0>
        }
        return rval;
   139d4:	e0bffc17 	ldw	r2,-16(fp)
   139d8:	00000806 	br	139fc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   139dc:	00138cc0 	call	138cc <alt_get_errno>
   139e0:	00c00344 	movi	r3,13
   139e4:	10c00015 	stw	r3,0(r2)
   139e8:	00000306 	br	139f8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   139ec:	00138cc0 	call	138cc <alt_get_errno>
   139f0:	00c01444 	movi	r3,81
   139f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   139f8:	00bfffc4 	movi	r2,-1
}
   139fc:	e037883a 	mov	sp,fp
   13a00:	dfc00117 	ldw	ra,4(sp)
   13a04:	df000017 	ldw	fp,0(sp)
   13a08:	dec00204 	addi	sp,sp,8
   13a0c:	f800283a 	ret

00013a10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13a10:	defffc04 	addi	sp,sp,-16
   13a14:	dfc00315 	stw	ra,12(sp)
   13a18:	df000215 	stw	fp,8(sp)
   13a1c:	dc000115 	stw	r16,4(sp)
   13a20:	df000104 	addi	fp,sp,4
   13a24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13a28:	e0bfff17 	ldw	r2,-4(fp)
   13a2c:	108000d0 	cmplti	r2,r2,3
   13a30:	1000111e 	bne	r2,zero,13a78 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13a34:	04000074 	movhi	r16,1
   13a38:	841a2c04 	addi	r16,r16,26800
   13a3c:	e0bfff17 	ldw	r2,-4(fp)
   13a40:	1009883a 	mov	r4,r2
   13a44:	01400304 	movi	r5,12
   13a48:	00132a00 	call	132a0 <__mulsi3>
   13a4c:	8085883a 	add	r2,r16,r2
   13a50:	10800204 	addi	r2,r2,8
   13a54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13a58:	04000074 	movhi	r16,1
   13a5c:	841a2c04 	addi	r16,r16,26800
   13a60:	e0bfff17 	ldw	r2,-4(fp)
   13a64:	1009883a 	mov	r4,r2
   13a68:	01400304 	movi	r5,12
   13a6c:	00132a00 	call	132a0 <__mulsi3>
   13a70:	8085883a 	add	r2,r16,r2
   13a74:	10000015 	stw	zero,0(r2)
  }
}
   13a78:	e037883a 	mov	sp,fp
   13a7c:	dfc00217 	ldw	ra,8(sp)
   13a80:	df000117 	ldw	fp,4(sp)
   13a84:	dc000017 	ldw	r16,0(sp)
   13a88:	dec00304 	addi	sp,sp,12
   13a8c:	f800283a 	ret

00013a90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13a90:	defff904 	addi	sp,sp,-28
   13a94:	df000615 	stw	fp,24(sp)
   13a98:	df000604 	addi	fp,sp,24
   13a9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13aa0:	0005303a 	rdctl	r2,status
   13aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13aa8:	e0fffc17 	ldw	r3,-16(fp)
   13aac:	00bfff84 	movi	r2,-2
   13ab0:	1884703a 	and	r2,r3,r2
   13ab4:	1001703a 	wrctl	status,r2
  
  return context;
   13ab8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13abc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13ac0:	d0a00a17 	ldw	r2,-32728(gp)
   13ac4:	10c000c4 	addi	r3,r2,3
   13ac8:	00bfff04 	movi	r2,-4
   13acc:	1884703a 	and	r2,r3,r2
   13ad0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13ad4:	d0e00a17 	ldw	r3,-32728(gp)
   13ad8:	e0bfff17 	ldw	r2,-4(fp)
   13adc:	1885883a 	add	r2,r3,r2
   13ae0:	00c000b4 	movhi	r3,2
   13ae4:	18c00004 	addi	r3,r3,0
   13ae8:	1880062e 	bgeu	r3,r2,13b04 <sbrk+0x74>
   13aec:	e0bffa17 	ldw	r2,-24(fp)
   13af0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13af4:	e0bffd17 	ldw	r2,-12(fp)
   13af8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13afc:	00bfffc4 	movi	r2,-1
   13b00:	00000b06 	br	13b30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13b04:	d0a00a17 	ldw	r2,-32728(gp)
   13b08:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13b0c:	d0e00a17 	ldw	r3,-32728(gp)
   13b10:	e0bfff17 	ldw	r2,-4(fp)
   13b14:	1885883a 	add	r2,r3,r2
   13b18:	d0a00a15 	stw	r2,-32728(gp)
   13b1c:	e0bffa17 	ldw	r2,-24(fp)
   13b20:	e0bffe15 	stw	r2,-8(fp)
   13b24:	e0bffe17 	ldw	r2,-8(fp)
   13b28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13b2c:	e0bffb17 	ldw	r2,-20(fp)
} 
   13b30:	e037883a 	mov	sp,fp
   13b34:	df000017 	ldw	fp,0(sp)
   13b38:	dec00104 	addi	sp,sp,4
   13b3c:	f800283a 	ret

00013b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13b40:	defffe04 	addi	sp,sp,-8
   13b44:	dfc00115 	stw	ra,4(sp)
   13b48:	df000015 	stw	fp,0(sp)
   13b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13b50:	00800074 	movhi	r2,1
   13b54:	109ead04 	addi	r2,r2,31412
   13b58:	10800017 	ldw	r2,0(r2)
   13b5c:	10000526 	beq	r2,zero,13b74 <alt_get_errno+0x34>
   13b60:	00800074 	movhi	r2,1
   13b64:	109ead04 	addi	r2,r2,31412
   13b68:	10800017 	ldw	r2,0(r2)
   13b6c:	103ee83a 	callr	r2
   13b70:	00000206 	br	13b7c <alt_get_errno+0x3c>
   13b74:	008000b4 	movhi	r2,2
   13b78:	10a56704 	addi	r2,r2,-27236
}
   13b7c:	e037883a 	mov	sp,fp
   13b80:	dfc00117 	ldw	ra,4(sp)
   13b84:	df000017 	ldw	fp,0(sp)
   13b88:	dec00204 	addi	sp,sp,8
   13b8c:	f800283a 	ret

00013b90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13b90:	defff904 	addi	sp,sp,-28
   13b94:	dfc00615 	stw	ra,24(sp)
   13b98:	df000515 	stw	fp,20(sp)
   13b9c:	df000504 	addi	fp,sp,20
   13ba0:	e13ffd15 	stw	r4,-12(fp)
   13ba4:	e17ffe15 	stw	r5,-8(fp)
   13ba8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13bac:	e0bffd17 	ldw	r2,-12(fp)
   13bb0:	10000716 	blt	r2,zero,13bd0 <write+0x40>
   13bb4:	e13ffd17 	ldw	r4,-12(fp)
   13bb8:	01400304 	movi	r5,12
   13bbc:	00132a00 	call	132a0 <__mulsi3>
   13bc0:	00c00074 	movhi	r3,1
   13bc4:	18da2c04 	addi	r3,r3,26800
   13bc8:	10c5883a 	add	r2,r2,r3
   13bcc:	00000106 	br	13bd4 <write+0x44>
   13bd0:	0005883a 	mov	r2,zero
   13bd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13bd8:	e0bffb17 	ldw	r2,-20(fp)
   13bdc:	10001f26 	beq	r2,zero,13c5c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13be0:	e0bffb17 	ldw	r2,-20(fp)
   13be4:	10800217 	ldw	r2,8(r2)
   13be8:	108000cc 	andi	r2,r2,3
   13bec:	10001726 	beq	r2,zero,13c4c <write+0xbc>
   13bf0:	e0bffb17 	ldw	r2,-20(fp)
   13bf4:	10800017 	ldw	r2,0(r2)
   13bf8:	10800617 	ldw	r2,24(r2)
   13bfc:	10001326 	beq	r2,zero,13c4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13c00:	e0bffb17 	ldw	r2,-20(fp)
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	10c00617 	ldw	r3,24(r2)
   13c0c:	e0bfff17 	ldw	r2,-4(fp)
   13c10:	e13ffb17 	ldw	r4,-20(fp)
   13c14:	e17ffe17 	ldw	r5,-8(fp)
   13c18:	100d883a 	mov	r6,r2
   13c1c:	183ee83a 	callr	r3
   13c20:	e0bffc15 	stw	r2,-16(fp)
   13c24:	e0bffc17 	ldw	r2,-16(fp)
   13c28:	1000060e 	bge	r2,zero,13c44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13c2c:	0013b400 	call	13b40 <alt_get_errno>
   13c30:	e0fffc17 	ldw	r3,-16(fp)
   13c34:	00c7c83a 	sub	r3,zero,r3
   13c38:	10c00015 	stw	r3,0(r2)
        return -1;
   13c3c:	00bfffc4 	movi	r2,-1
   13c40:	00000a06 	br	13c6c <write+0xdc>
      }
      return rval;
   13c44:	e0bffc17 	ldw	r2,-16(fp)
   13c48:	00000806 	br	13c6c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13c4c:	0013b400 	call	13b40 <alt_get_errno>
   13c50:	00c00344 	movi	r3,13
   13c54:	10c00015 	stw	r3,0(r2)
   13c58:	00000306 	br	13c68 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13c5c:	0013b400 	call	13b40 <alt_get_errno>
   13c60:	00c01444 	movi	r3,81
   13c64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13c68:	00bfffc4 	movi	r2,-1
}
   13c6c:	e037883a 	mov	sp,fp
   13c70:	dfc00117 	ldw	ra,4(sp)
   13c74:	df000017 	ldw	fp,0(sp)
   13c78:	dec00204 	addi	sp,sp,8
   13c7c:	f800283a 	ret

00013c80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13c80:	defffd04 	addi	sp,sp,-12
   13c84:	dfc00215 	stw	ra,8(sp)
   13c88:	df000115 	stw	fp,4(sp)
   13c8c:	df000104 	addi	fp,sp,4
   13c90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13c94:	e13fff17 	ldw	r4,-4(fp)
   13c98:	01400074 	movhi	r5,1
   13c9c:	295eaa04 	addi	r5,r5,31400
   13ca0:	0014f580 	call	14f58 <alt_dev_llist_insert>
}
   13ca4:	e037883a 	mov	sp,fp
   13ca8:	dfc00117 	ldw	ra,4(sp)
   13cac:	df000017 	ldw	fp,0(sp)
   13cb0:	dec00204 	addi	sp,sp,8
   13cb4:	f800283a 	ret

00013cb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13cb8:	defffd04 	addi	sp,sp,-12
   13cbc:	dfc00215 	stw	ra,8(sp)
   13cc0:	df000115 	stw	fp,4(sp)
   13cc4:	df000104 	addi	fp,sp,4
   13cc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1B, cpu_1b);
   13ccc:	00159200 	call	15920 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13cd0:	00800044 	movi	r2,1
   13cd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13cd8:	e037883a 	mov	sp,fp
   13cdc:	dfc00117 	ldw	ra,4(sp)
   13ce0:	df000017 	ldw	fp,0(sp)
   13ce4:	dec00204 	addi	sp,sp,8
   13ce8:	f800283a 	ret

00013cec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13cec:	defffe04 	addi	sp,sp,-8
   13cf0:	dfc00115 	stw	ra,4(sp)
   13cf4:	df000015 	stw	fp,0(sp)
   13cf8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1B, timer_1b);
   13cfc:	010000b4 	movhi	r4,2
   13d00:	21040804 	addi	r4,r4,4128
   13d04:	000b883a 	mov	r5,zero
   13d08:	01800044 	movi	r6,1
   13d0c:	01c0fa04 	movi	r7,1000
   13d10:	0014d240 	call	14d24 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1B, fifo_1b);
   13d14:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_1, fifo_q_1);
   13d18:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_2, fifo_q_2);
   13d1c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_3, fifo_q_3);
   13d20:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1B, jtag_uart_1b);
   13d24:	01000074 	movhi	r4,1
   13d28:	211a9604 	addi	r4,r4,27224
   13d2c:	000b883a 	mov	r5,zero
   13d30:	01800404 	movi	r6,16
   13d34:	00143b00 	call	143b0 <altera_avalon_jtag_uart_init>
   13d38:	01000074 	movhi	r4,1
   13d3c:	211a8c04 	addi	r4,r4,27184
   13d40:	0013c800 	call	13c80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1B, sysid_1b);
   13d44:	0001883a 	nop
}
   13d48:	e037883a 	mov	sp,fp
   13d4c:	dfc00117 	ldw	ra,4(sp)
   13d50:	df000017 	ldw	fp,0(sp)
   13d54:	dec00204 	addi	sp,sp,8
   13d58:	f800283a 	ret

00013d5c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   13d5c:	defffa04 	addi	sp,sp,-24
   13d60:	dfc00515 	stw	ra,20(sp)
   13d64:	df000415 	stw	fp,16(sp)
   13d68:	df000404 	addi	fp,sp,16
   13d6c:	e13ffc15 	stw	r4,-16(fp)
   13d70:	e17ffd15 	stw	r5,-12(fp)
   13d74:	e1bffe15 	stw	r6,-8(fp)
   13d78:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   13d7c:	e13ffc17 	ldw	r4,-16(fp)
   13d80:	01400fc4 	movi	r5,63
   13d84:	0013f280 	call	13f28 <altera_avalon_fifo_clear_event>
   13d88:	10000226 	beq	r2,zero,13d94 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   13d8c:	00bfffc4 	movi	r2,-1
   13d90:	00001306 	br	13de0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   13d94:	e13ffc17 	ldw	r4,-16(fp)
   13d98:	e17ffd17 	ldw	r5,-12(fp)
   13d9c:	0013f840 	call	13f84 <altera_avalon_fifo_write_ienable>
   13da0:	10000226 	beq	r2,zero,13dac <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   13da4:	00bfff84 	movi	r2,-2
   13da8:	00000d06 	br	13de0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   13dac:	e13ffc17 	ldw	r4,-16(fp)
   13db0:	e17fff17 	ldw	r5,-4(fp)
   13db4:	0013fdc0 	call	13fdc <altera_avalon_fifo_write_almostfull>
   13db8:	10000226 	beq	r2,zero,13dc4 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13dbc:	00bfff44 	movi	r2,-3
   13dc0:	00000706 	br	13de0 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   13dc4:	e13ffc17 	ldw	r4,-16(fp)
   13dc8:	e17ffe17 	ldw	r5,-8(fp)
   13dcc:	00140340 	call	14034 <altera_avalon_fifo_write_almostempty>
   13dd0:	10000226 	beq	r2,zero,13ddc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13dd4:	00bfff44 	movi	r2,-3
   13dd8:	00000106 	br	13de0 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   13ddc:	0005883a 	mov	r2,zero
}
   13de0:	e037883a 	mov	sp,fp
   13de4:	dfc00117 	ldw	ra,4(sp)
   13de8:	df000017 	ldw	fp,0(sp)
   13dec:	dec00204 	addi	sp,sp,8
   13df0:	f800283a 	ret

00013df4 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   13df4:	defffd04 	addi	sp,sp,-12
   13df8:	df000215 	stw	fp,8(sp)
   13dfc:	df000204 	addi	fp,sp,8
   13e00:	e13ffe15 	stw	r4,-8(fp)
   13e04:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   13e08:	e0bffe17 	ldw	r2,-8(fp)
   13e0c:	10800104 	addi	r2,r2,4
   13e10:	10800037 	ldwio	r2,0(r2)
   13e14:	1007883a 	mov	r3,r2
   13e18:	e0bfff17 	ldw	r2,-4(fp)
   13e1c:	1884703a 	and	r2,r3,r2
}
   13e20:	e037883a 	mov	sp,fp
   13e24:	df000017 	ldw	fp,0(sp)
   13e28:	dec00104 	addi	sp,sp,4
   13e2c:	f800283a 	ret

00013e30 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   13e30:	defffd04 	addi	sp,sp,-12
   13e34:	df000215 	stw	fp,8(sp)
   13e38:	df000204 	addi	fp,sp,8
   13e3c:	e13ffe15 	stw	r4,-8(fp)
   13e40:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   13e44:	e0bffe17 	ldw	r2,-8(fp)
   13e48:	10800304 	addi	r2,r2,12
   13e4c:	10800037 	ldwio	r2,0(r2)
   13e50:	1007883a 	mov	r3,r2
   13e54:	e0bfff17 	ldw	r2,-4(fp)
   13e58:	1884703a 	and	r2,r3,r2
}
   13e5c:	e037883a 	mov	sp,fp
   13e60:	df000017 	ldw	fp,0(sp)
   13e64:	dec00104 	addi	sp,sp,4
   13e68:	f800283a 	ret

00013e6c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   13e6c:	defffe04 	addi	sp,sp,-8
   13e70:	df000115 	stw	fp,4(sp)
   13e74:	df000104 	addi	fp,sp,4
   13e78:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   13e7c:	e0bfff17 	ldw	r2,-4(fp)
   13e80:	10800404 	addi	r2,r2,16
   13e84:	10800037 	ldwio	r2,0(r2)
}
   13e88:	e037883a 	mov	sp,fp
   13e8c:	df000017 	ldw	fp,0(sp)
   13e90:	dec00104 	addi	sp,sp,4
   13e94:	f800283a 	ret

00013e98 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   13e98:	defffe04 	addi	sp,sp,-8
   13e9c:	df000115 	stw	fp,4(sp)
   13ea0:	df000104 	addi	fp,sp,4
   13ea4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   13ea8:	e0bfff17 	ldw	r2,-4(fp)
   13eac:	10800504 	addi	r2,r2,20
   13eb0:	10800037 	ldwio	r2,0(r2)
}
   13eb4:	e037883a 	mov	sp,fp
   13eb8:	df000017 	ldw	fp,0(sp)
   13ebc:	dec00104 	addi	sp,sp,4
   13ec0:	f800283a 	ret

00013ec4 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   13ec4:	defffd04 	addi	sp,sp,-12
   13ec8:	df000215 	stw	fp,8(sp)
   13ecc:	df000204 	addi	fp,sp,8
   13ed0:	e13ffe15 	stw	r4,-8(fp)
   13ed4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   13ed8:	e0bffe17 	ldw	r2,-8(fp)
   13edc:	10800204 	addi	r2,r2,8
   13ee0:	10800037 	ldwio	r2,0(r2)
   13ee4:	1007883a 	mov	r3,r2
   13ee8:	e0bfff17 	ldw	r2,-4(fp)
   13eec:	1884703a 	and	r2,r3,r2
}
   13ef0:	e037883a 	mov	sp,fp
   13ef4:	df000017 	ldw	fp,0(sp)
   13ef8:	dec00104 	addi	sp,sp,4
   13efc:	f800283a 	ret

00013f00 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   13f00:	defffe04 	addi	sp,sp,-8
   13f04:	df000115 	stw	fp,4(sp)
   13f08:	df000104 	addi	fp,sp,4
   13f0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   13f10:	e0bfff17 	ldw	r2,-4(fp)
   13f14:	10800037 	ldwio	r2,0(r2)
}
   13f18:	e037883a 	mov	sp,fp
   13f1c:	df000017 	ldw	fp,0(sp)
   13f20:	dec00104 	addi	sp,sp,4
   13f24:	f800283a 	ret

00013f28 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   13f28:	defffd04 	addi	sp,sp,-12
   13f2c:	df000215 	stw	fp,8(sp)
   13f30:	df000204 	addi	fp,sp,8
   13f34:	e13ffe15 	stw	r4,-8(fp)
   13f38:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	10800204 	addi	r2,r2,8
   13f44:	e0ffff17 	ldw	r3,-4(fp)
   13f48:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   13f4c:	e0bffe17 	ldw	r2,-8(fp)
   13f50:	10800204 	addi	r2,r2,8
   13f54:	10800037 	ldwio	r2,0(r2)
   13f58:	1007883a 	mov	r3,r2
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
   13f60:	1884703a 	and	r2,r3,r2
   13f64:	1000021e 	bne	r2,zero,13f70 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   13f68:	0005883a 	mov	r2,zero
   13f6c:	00000106 	br	13f74 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   13f70:	00bfffc4 	movi	r2,-1
}
   13f74:	e037883a 	mov	sp,fp
   13f78:	df000017 	ldw	fp,0(sp)
   13f7c:	dec00104 	addi	sp,sp,4
   13f80:	f800283a 	ret

00013f84 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   13f84:	defffd04 	addi	sp,sp,-12
   13f88:	df000215 	stw	fp,8(sp)
   13f8c:	df000204 	addi	fp,sp,8
   13f90:	e13ffe15 	stw	r4,-8(fp)
   13f94:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   13f98:	e0bffe17 	ldw	r2,-8(fp)
   13f9c:	10800304 	addi	r2,r2,12
   13fa0:	e0ffff17 	ldw	r3,-4(fp)
   13fa4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   13fa8:	e0bffe17 	ldw	r2,-8(fp)
   13fac:	10800304 	addi	r2,r2,12
   13fb0:	10800037 	ldwio	r2,0(r2)
   13fb4:	1007883a 	mov	r3,r2
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	1880021e 	bne	r3,r2,13fc8 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   13fc0:	0005883a 	mov	r2,zero
   13fc4:	00000106 	br	13fcc <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   13fc8:	00bfff84 	movi	r2,-2
}
   13fcc:	e037883a 	mov	sp,fp
   13fd0:	df000017 	ldw	fp,0(sp)
   13fd4:	dec00104 	addi	sp,sp,4
   13fd8:	f800283a 	ret

00013fdc <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   13fdc:	defffd04 	addi	sp,sp,-12
   13fe0:	df000215 	stw	fp,8(sp)
   13fe4:	df000204 	addi	fp,sp,8
   13fe8:	e13ffe15 	stw	r4,-8(fp)
   13fec:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   13ff0:	e0bffe17 	ldw	r2,-8(fp)
   13ff4:	10800404 	addi	r2,r2,16
   13ff8:	e0ffff17 	ldw	r3,-4(fp)
   13ffc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	10800404 	addi	r2,r2,16
   14008:	10800037 	ldwio	r2,0(r2)
   1400c:	1007883a 	mov	r3,r2
   14010:	e0bfff17 	ldw	r2,-4(fp)
   14014:	1880021e 	bne	r3,r2,14020 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14018:	0005883a 	mov	r2,zero
   1401c:	00000106 	br	14024 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14020:	00bfff44 	movi	r2,-3
}
   14024:	e037883a 	mov	sp,fp
   14028:	df000017 	ldw	fp,0(sp)
   1402c:	dec00104 	addi	sp,sp,4
   14030:	f800283a 	ret

00014034 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14034:	defffd04 	addi	sp,sp,-12
   14038:	df000215 	stw	fp,8(sp)
   1403c:	df000204 	addi	fp,sp,8
   14040:	e13ffe15 	stw	r4,-8(fp)
   14044:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14048:	e0bffe17 	ldw	r2,-8(fp)
   1404c:	10800504 	addi	r2,r2,20
   14050:	e0ffff17 	ldw	r3,-4(fp)
   14054:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   14058:	e0bffe17 	ldw	r2,-8(fp)
   1405c:	10800504 	addi	r2,r2,20
   14060:	10800037 	ldwio	r2,0(r2)
   14064:	1007883a 	mov	r3,r2
   14068:	e0bfff17 	ldw	r2,-4(fp)
   1406c:	1880021e 	bne	r3,r2,14078 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14070:	0005883a 	mov	r2,zero
   14074:	00000106 	br	1407c <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14078:	00bfff44 	movi	r2,-3
}
   1407c:	e037883a 	mov	sp,fp
   14080:	df000017 	ldw	fp,0(sp)
   14084:	dec00104 	addi	sp,sp,4
   14088:	f800283a 	ret

0001408c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   1408c:	defffb04 	addi	sp,sp,-20
   14090:	dfc00415 	stw	ra,16(sp)
   14094:	df000315 	stw	fp,12(sp)
   14098:	df000304 	addi	fp,sp,12
   1409c:	e13ffd15 	stw	r4,-12(fp)
   140a0:	e17ffe15 	stw	r5,-8(fp)
   140a4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   140a8:	e13ffe17 	ldw	r4,-8(fp)
   140ac:	01400044 	movi	r5,1
   140b0:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   140b4:	1000051e 	bne	r2,zero,140cc <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   140b8:	e0bffd17 	ldw	r2,-12(fp)
   140bc:	e0ffff17 	ldw	r3,-4(fp)
   140c0:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   140c4:	0005883a 	mov	r2,zero
   140c8:	00000106 	br	140d0 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   140cc:	00bfff04 	movi	r2,-4
    }
}
   140d0:	e037883a 	mov	sp,fp
   140d4:	dfc00117 	ldw	ra,4(sp)
   140d8:	df000017 	ldw	fp,0(sp)
   140dc:	dec00204 	addi	sp,sp,8
   140e0:	f800283a 	ret

000140e4 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   140e4:	defffa04 	addi	sp,sp,-24
   140e8:	dfc00515 	stw	ra,20(sp)
   140ec:	df000415 	stw	fp,16(sp)
   140f0:	df000404 	addi	fp,sp,16
   140f4:	e13ffd15 	stw	r4,-12(fp)
   140f8:	e17ffe15 	stw	r5,-8(fp)
   140fc:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   14100:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14104:	e0bfff17 	ldw	r2,-4(fp)
   14108:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1410c:	e13ffe17 	ldw	r4,-8(fp)
   14110:	01400084 	movi	r5,2
   14114:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   14118:	1000071e 	bne	r2,zero,14138 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   1411c:	e13ffe17 	ldw	r4,-8(fp)
   14120:	0013f000 	call	13f00 <altera_avalon_fifo_read_level>
   14124:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14128:	e0bffd17 	ldw	r2,-12(fp)
   1412c:	10c00037 	ldwio	r3,0(r2)
   14130:	e0bfff17 	ldw	r2,-4(fp)
   14134:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14138:	e0bffc17 	ldw	r2,-16(fp)
}
   1413c:	e037883a 	mov	sp,fp
   14140:	dfc00117 	ldw	ra,4(sp)
   14144:	df000017 	ldw	fp,0(sp)
   14148:	dec00204 	addi	sp,sp,8
   1414c:	f800283a 	ret

00014150 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   14150:	defffc04 	addi	sp,sp,-16
   14154:	dfc00315 	stw	ra,12(sp)
   14158:	df000215 	stw	fp,8(sp)
   1415c:	df000204 	addi	fp,sp,8
   14160:	e13ffe15 	stw	r4,-8(fp)
   14164:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14168:	e13fff17 	ldw	r4,-4(fp)
   1416c:	01400084 	movi	r5,2
   14170:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   14174:	1000031e 	bne	r2,zero,14184 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10800037 	ldwio	r2,0(r2)
   14180:	00000106 	br	14188 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   14184:	0005883a 	mov	r2,zero
}
   14188:	e037883a 	mov	sp,fp
   1418c:	dfc00117 	ldw	ra,4(sp)
   14190:	df000017 	ldw	fp,0(sp)
   14194:	dec00204 	addi	sp,sp,8
   14198:	f800283a 	ret

0001419c <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   1419c:	defffb04 	addi	sp,sp,-20
   141a0:	dfc00415 	stw	ra,16(sp)
   141a4:	df000315 	stw	fp,12(sp)
   141a8:	df000304 	addi	fp,sp,12
   141ac:	e13ffd15 	stw	r4,-12(fp)
   141b0:	e17ffe15 	stw	r5,-8(fp)
   141b4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   141b8:	e13ffe17 	ldw	r4,-8(fp)
   141bc:	01400044 	movi	r5,1
   141c0:	0013df40 	call	13df4 <altera_avalon_fifo_read_status>
   141c4:	1000061e 	bne	r2,zero,141e0 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   141c8:	e0bffd17 	ldw	r2,-12(fp)
   141cc:	10800104 	addi	r2,r2,4
   141d0:	e0ffff17 	ldw	r3,-4(fp)
   141d4:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   141d8:	0005883a 	mov	r2,zero
   141dc:	00000106 	br	141e4 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   141e0:	00bfff04 	movi	r2,-4
    }
}
   141e4:	e037883a 	mov	sp,fp
   141e8:	dfc00117 	ldw	ra,4(sp)
   141ec:	df000017 	ldw	fp,0(sp)
   141f0:	dec00204 	addi	sp,sp,8
   141f4:	f800283a 	ret

000141f8 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   141f8:	defffe04 	addi	sp,sp,-8
   141fc:	df000115 	stw	fp,4(sp)
   14200:	df000104 	addi	fp,sp,4
   14204:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   14208:	e0bfff17 	ldw	r2,-4(fp)
   1420c:	10800104 	addi	r2,r2,4
   14210:	10800037 	ldwio	r2,0(r2)
}
   14214:	e037883a 	mov	sp,fp
   14218:	df000017 	ldw	fp,0(sp)
   1421c:	dec00104 	addi	sp,sp,4
   14220:	f800283a 	ret

00014224 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   14224:	defffe04 	addi	sp,sp,-8
   14228:	df000115 	stw	fp,4(sp)
   1422c:	df000104 	addi	fp,sp,4
   14230:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   14234:	e0bfff17 	ldw	r2,-4(fp)
   14238:	10800037 	ldwio	r2,0(r2)
}
   1423c:	e037883a 	mov	sp,fp
   14240:	df000017 	ldw	fp,0(sp)
   14244:	dec00104 	addi	sp,sp,4
   14248:	f800283a 	ret

0001424c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1424c:	defffa04 	addi	sp,sp,-24
   14250:	dfc00515 	stw	ra,20(sp)
   14254:	df000415 	stw	fp,16(sp)
   14258:	df000404 	addi	fp,sp,16
   1425c:	e13ffd15 	stw	r4,-12(fp)
   14260:	e17ffe15 	stw	r5,-8(fp)
   14264:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14268:	e0bffd17 	ldw	r2,-12(fp)
   1426c:	10800017 	ldw	r2,0(r2)
   14270:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14274:	e0bffc17 	ldw	r2,-16(fp)
   14278:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1427c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14280:	10800217 	ldw	r2,8(r2)
   14284:	1809883a 	mov	r4,r3
   14288:	e17ffe17 	ldw	r5,-8(fp)
   1428c:	e1bfff17 	ldw	r6,-4(fp)
   14290:	100f883a 	mov	r7,r2
   14294:	00148740 	call	14874 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14298:	e037883a 	mov	sp,fp
   1429c:	dfc00117 	ldw	ra,4(sp)
   142a0:	df000017 	ldw	fp,0(sp)
   142a4:	dec00204 	addi	sp,sp,8
   142a8:	f800283a 	ret

000142ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   142ac:	defffa04 	addi	sp,sp,-24
   142b0:	dfc00515 	stw	ra,20(sp)
   142b4:	df000415 	stw	fp,16(sp)
   142b8:	df000404 	addi	fp,sp,16
   142bc:	e13ffd15 	stw	r4,-12(fp)
   142c0:	e17ffe15 	stw	r5,-8(fp)
   142c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   142c8:	e0bffd17 	ldw	r2,-12(fp)
   142cc:	10800017 	ldw	r2,0(r2)
   142d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   142d4:	e0bffc17 	ldw	r2,-16(fp)
   142d8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   142dc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   142e0:	10800217 	ldw	r2,8(r2)
   142e4:	1809883a 	mov	r4,r3
   142e8:	e17ffe17 	ldw	r5,-8(fp)
   142ec:	e1bfff17 	ldw	r6,-4(fp)
   142f0:	100f883a 	mov	r7,r2
   142f4:	0014a8c0 	call	14a8c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   142f8:	e037883a 	mov	sp,fp
   142fc:	dfc00117 	ldw	ra,4(sp)
   14300:	df000017 	ldw	fp,0(sp)
   14304:	dec00204 	addi	sp,sp,8
   14308:	f800283a 	ret

0001430c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1430c:	defffc04 	addi	sp,sp,-16
   14310:	dfc00315 	stw	ra,12(sp)
   14314:	df000215 	stw	fp,8(sp)
   14318:	df000204 	addi	fp,sp,8
   1431c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14320:	e0bfff17 	ldw	r2,-4(fp)
   14324:	10800017 	ldw	r2,0(r2)
   14328:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1432c:	e0bffe17 	ldw	r2,-8(fp)
   14330:	10c00a04 	addi	r3,r2,40
   14334:	e0bfff17 	ldw	r2,-4(fp)
   14338:	10800217 	ldw	r2,8(r2)
   1433c:	1809883a 	mov	r4,r3
   14340:	100b883a 	mov	r5,r2
   14344:	00147180 	call	14718 <altera_avalon_jtag_uart_close>
}
   14348:	e037883a 	mov	sp,fp
   1434c:	dfc00117 	ldw	ra,4(sp)
   14350:	df000017 	ldw	fp,0(sp)
   14354:	dec00204 	addi	sp,sp,8
   14358:	f800283a 	ret

0001435c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1435c:	defffa04 	addi	sp,sp,-24
   14360:	dfc00515 	stw	ra,20(sp)
   14364:	df000415 	stw	fp,16(sp)
   14368:	df000404 	addi	fp,sp,16
   1436c:	e13ffd15 	stw	r4,-12(fp)
   14370:	e17ffe15 	stw	r5,-8(fp)
   14374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14378:	e0bffd17 	ldw	r2,-12(fp)
   1437c:	10800017 	ldw	r2,0(r2)
   14380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14384:	e0bffc17 	ldw	r2,-16(fp)
   14388:	10800a04 	addi	r2,r2,40
   1438c:	1009883a 	mov	r4,r2
   14390:	e17ffe17 	ldw	r5,-8(fp)
   14394:	e1bfff17 	ldw	r6,-4(fp)
   14398:	00147800 	call	14780 <altera_avalon_jtag_uart_ioctl>
}
   1439c:	e037883a 	mov	sp,fp
   143a0:	dfc00117 	ldw	ra,4(sp)
   143a4:	df000017 	ldw	fp,0(sp)
   143a8:	dec00204 	addi	sp,sp,8
   143ac:	f800283a 	ret

000143b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   143b0:	defffa04 	addi	sp,sp,-24
   143b4:	dfc00515 	stw	ra,20(sp)
   143b8:	df000415 	stw	fp,16(sp)
   143bc:	df000404 	addi	fp,sp,16
   143c0:	e13ffd15 	stw	r4,-12(fp)
   143c4:	e17ffe15 	stw	r5,-8(fp)
   143c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   143cc:	e0bffd17 	ldw	r2,-12(fp)
   143d0:	00c00044 	movi	r3,1
   143d4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   143d8:	e0bffd17 	ldw	r2,-12(fp)
   143dc:	10800017 	ldw	r2,0(r2)
   143e0:	10800104 	addi	r2,r2,4
   143e4:	e0fffd17 	ldw	r3,-12(fp)
   143e8:	18c00817 	ldw	r3,32(r3)
   143ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   143f0:	e0fffe17 	ldw	r3,-8(fp)
   143f4:	e0bfff17 	ldw	r2,-4(fp)
   143f8:	d8000015 	stw	zero,0(sp)
   143fc:	1809883a 	mov	r4,r3
   14400:	100b883a 	mov	r5,r2
   14404:	01800074 	movhi	r6,1
   14408:	31911c04 	addi	r6,r6,17520
   1440c:	e1fffd17 	ldw	r7,-12(fp)
   14410:	00150cc0 	call	150cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14414:	e0bffd17 	ldw	r2,-12(fp)
   14418:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1441c:	e0bffd17 	ldw	r2,-12(fp)
   14420:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14424:	008000b4 	movhi	r2,2
   14428:	10a56c04 	addi	r2,r2,-27216
   1442c:	10800017 	ldw	r2,0(r2)
   14430:	1809883a 	mov	r4,r3
   14434:	100b883a 	mov	r5,r2
   14438:	01800074 	movhi	r6,1
   1443c:	31919d04 	addi	r6,r6,18036
   14440:	e1fffd17 	ldw	r7,-12(fp)
   14444:	0014dac0 	call	14dac <alt_alarm_start>
   14448:	1000040e 	bge	r2,zero,1445c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1444c:	e0bffd17 	ldw	r2,-12(fp)
   14450:	00e00034 	movhi	r3,32768
   14454:	18ffffc4 	addi	r3,r3,-1
   14458:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1445c:	e037883a 	mov	sp,fp
   14460:	dfc00117 	ldw	ra,4(sp)
   14464:	df000017 	ldw	fp,0(sp)
   14468:	dec00204 	addi	sp,sp,8
   1446c:	f800283a 	ret

00014470 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14470:	defff804 	addi	sp,sp,-32
   14474:	df000715 	stw	fp,28(sp)
   14478:	df000704 	addi	fp,sp,28
   1447c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14480:	e0bfff17 	ldw	r2,-4(fp)
   14484:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14488:	e0bffb17 	ldw	r2,-20(fp)
   1448c:	10800017 	ldw	r2,0(r2)
   14490:	e0bffc15 	stw	r2,-16(fp)
   14494:	00000106 	br	1449c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   14498:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1449c:	e0bffc17 	ldw	r2,-16(fp)
   144a0:	10800104 	addi	r2,r2,4
   144a4:	10800037 	ldwio	r2,0(r2)
   144a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   144ac:	e0bffd17 	ldw	r2,-12(fp)
   144b0:	1080c00c 	andi	r2,r2,768
   144b4:	10006a26 	beq	r2,zero,14660 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   144b8:	e0bffd17 	ldw	r2,-12(fp)
   144bc:	1080400c 	andi	r2,r2,256
   144c0:	10003326 	beq	r2,zero,14590 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   144c4:	00800074 	movhi	r2,1
   144c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   144cc:	e0bffb17 	ldw	r2,-20(fp)
   144d0:	10800a17 	ldw	r2,40(r2)
   144d4:	10800044 	addi	r2,r2,1
   144d8:	1081ffcc 	andi	r2,r2,2047
   144dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   144e0:	e0bffb17 	ldw	r2,-20(fp)
   144e4:	10c00b17 	ldw	r3,44(r2)
   144e8:	e0bffe17 	ldw	r2,-8(fp)
   144ec:	18801426 	beq	r3,r2,14540 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	10800037 	ldwio	r2,0(r2)
   144f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   144fc:	e0bff917 	ldw	r2,-28(fp)
   14500:	10a0000c 	andi	r2,r2,32768
   14504:	10001026 	beq	r2,zero,14548 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14508:	e0bffb17 	ldw	r2,-20(fp)
   1450c:	10800a17 	ldw	r2,40(r2)
   14510:	e0fff917 	ldw	r3,-28(fp)
   14514:	e13ffb17 	ldw	r4,-20(fp)
   14518:	2085883a 	add	r2,r4,r2
   1451c:	10800e04 	addi	r2,r2,56
   14520:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14524:	e0bffb17 	ldw	r2,-20(fp)
   14528:	10800a17 	ldw	r2,40(r2)
   1452c:	10800044 	addi	r2,r2,1
   14530:	10c1ffcc 	andi	r3,r2,2047
   14534:	e0bffb17 	ldw	r2,-20(fp)
   14538:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1453c:	003fe306 	br	144cc <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14540:	0001883a 	nop
   14544:	00000106 	br	1454c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14548:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1454c:	e0bff917 	ldw	r2,-28(fp)
   14550:	10bfffec 	andhi	r2,r2,65535
   14554:	10000e26 	beq	r2,zero,14590 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14558:	e0bffb17 	ldw	r2,-20(fp)
   1455c:	10c00817 	ldw	r3,32(r2)
   14560:	00bfff84 	movi	r2,-2
   14564:	1886703a 	and	r3,r3,r2
   14568:	e0bffb17 	ldw	r2,-20(fp)
   1456c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14570:	e0bffc17 	ldw	r2,-16(fp)
   14574:	10800104 	addi	r2,r2,4
   14578:	e0fffb17 	ldw	r3,-20(fp)
   1457c:	18c00817 	ldw	r3,32(r3)
   14580:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14584:	e0bffc17 	ldw	r2,-16(fp)
   14588:	10800104 	addi	r2,r2,4
   1458c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14590:	e0bffd17 	ldw	r2,-12(fp)
   14594:	1080800c 	andi	r2,r2,512
   14598:	103fbf26 	beq	r2,zero,14498 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1459c:	e0bffd17 	ldw	r2,-12(fp)
   145a0:	1004d43a 	srli	r2,r2,16
   145a4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   145a8:	00001406 	br	145fc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   145ac:	e0bffc17 	ldw	r2,-16(fp)
   145b0:	e0fffb17 	ldw	r3,-20(fp)
   145b4:	18c00d17 	ldw	r3,52(r3)
   145b8:	e13ffb17 	ldw	r4,-20(fp)
   145bc:	20c7883a 	add	r3,r4,r3
   145c0:	18c20e04 	addi	r3,r3,2104
   145c4:	18c00003 	ldbu	r3,0(r3)
   145c8:	18c03fcc 	andi	r3,r3,255
   145cc:	18c0201c 	xori	r3,r3,128
   145d0:	18ffe004 	addi	r3,r3,-128
   145d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   145d8:	e0bffb17 	ldw	r2,-20(fp)
   145dc:	10800d17 	ldw	r2,52(r2)
   145e0:	10800044 	addi	r2,r2,1
   145e4:	10c1ffcc 	andi	r3,r2,2047
   145e8:	e0bffb17 	ldw	r2,-20(fp)
   145ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   145f0:	e0bffa17 	ldw	r2,-24(fp)
   145f4:	10bfffc4 	addi	r2,r2,-1
   145f8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   145fc:	e0bffa17 	ldw	r2,-24(fp)
   14600:	10000526 	beq	r2,zero,14618 <altera_avalon_jtag_uart_irq+0x1a8>
   14604:	e0bffb17 	ldw	r2,-20(fp)
   14608:	10c00d17 	ldw	r3,52(r2)
   1460c:	e0bffb17 	ldw	r2,-20(fp)
   14610:	10800c17 	ldw	r2,48(r2)
   14614:	18bfe51e 	bne	r3,r2,145ac <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14618:	e0bffa17 	ldw	r2,-24(fp)
   1461c:	103f9e26 	beq	r2,zero,14498 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14620:	e0bffb17 	ldw	r2,-20(fp)
   14624:	10c00817 	ldw	r3,32(r2)
   14628:	00bfff44 	movi	r2,-3
   1462c:	1886703a 	and	r3,r3,r2
   14630:	e0bffb17 	ldw	r2,-20(fp)
   14634:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14638:	e0bffb17 	ldw	r2,-20(fp)
   1463c:	10800017 	ldw	r2,0(r2)
   14640:	10800104 	addi	r2,r2,4
   14644:	e0fffb17 	ldw	r3,-20(fp)
   14648:	18c00817 	ldw	r3,32(r3)
   1464c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14650:	e0bffc17 	ldw	r2,-16(fp)
   14654:	10800104 	addi	r2,r2,4
   14658:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1465c:	003f8e06 	br	14498 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14660:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14664:	e037883a 	mov	sp,fp
   14668:	df000017 	ldw	fp,0(sp)
   1466c:	dec00104 	addi	sp,sp,4
   14670:	f800283a 	ret

00014674 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14674:	defffc04 	addi	sp,sp,-16
   14678:	df000315 	stw	fp,12(sp)
   1467c:	df000304 	addi	fp,sp,12
   14680:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14684:	e0bfff17 	ldw	r2,-4(fp)
   14688:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1468c:	e0bffd17 	ldw	r2,-12(fp)
   14690:	10800017 	ldw	r2,0(r2)
   14694:	10800104 	addi	r2,r2,4
   14698:	10800037 	ldwio	r2,0(r2)
   1469c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   146a0:	e0bffe17 	ldw	r2,-8(fp)
   146a4:	1081000c 	andi	r2,r2,1024
   146a8:	10000a26 	beq	r2,zero,146d4 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   146ac:	e0bffd17 	ldw	r2,-12(fp)
   146b0:	10800017 	ldw	r2,0(r2)
   146b4:	10800104 	addi	r2,r2,4
   146b8:	e0fffd17 	ldw	r3,-12(fp)
   146bc:	18c00817 	ldw	r3,32(r3)
   146c0:	18c10014 	ori	r3,r3,1024
   146c4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   146c8:	e0bffd17 	ldw	r2,-12(fp)
   146cc:	10000915 	stw	zero,36(r2)
   146d0:	00000a06 	br	146fc <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   146d4:	e0bffd17 	ldw	r2,-12(fp)
   146d8:	10800917 	ldw	r2,36(r2)
   146dc:	00e00034 	movhi	r3,32768
   146e0:	18ffff04 	addi	r3,r3,-4
   146e4:	18800536 	bltu	r3,r2,146fc <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   146e8:	e0bffd17 	ldw	r2,-12(fp)
   146ec:	10800917 	ldw	r2,36(r2)
   146f0:	10c00044 	addi	r3,r2,1
   146f4:	e0bffd17 	ldw	r2,-12(fp)
   146f8:	10c00915 	stw	r3,36(r2)
   146fc:	008000b4 	movhi	r2,2
   14700:	10a56c04 	addi	r2,r2,-27216
   14704:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14708:	e037883a 	mov	sp,fp
   1470c:	df000017 	ldw	fp,0(sp)
   14710:	dec00104 	addi	sp,sp,4
   14714:	f800283a 	ret

00014718 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14718:	defffd04 	addi	sp,sp,-12
   1471c:	df000215 	stw	fp,8(sp)
   14720:	df000204 	addi	fp,sp,8
   14724:	e13ffe15 	stw	r4,-8(fp)
   14728:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1472c:	00000506 	br	14744 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14730:	e0bfff17 	ldw	r2,-4(fp)
   14734:	1090000c 	andi	r2,r2,16384
   14738:	10000226 	beq	r2,zero,14744 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1473c:	00bffd44 	movi	r2,-11
   14740:	00000b06 	br	14770 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14744:	e0bffe17 	ldw	r2,-8(fp)
   14748:	10c00d17 	ldw	r3,52(r2)
   1474c:	e0bffe17 	ldw	r2,-8(fp)
   14750:	10800c17 	ldw	r2,48(r2)
   14754:	18800526 	beq	r3,r2,1476c <altera_avalon_jtag_uart_close+0x54>
   14758:	e0bffe17 	ldw	r2,-8(fp)
   1475c:	10c00917 	ldw	r3,36(r2)
   14760:	e0bffe17 	ldw	r2,-8(fp)
   14764:	10800117 	ldw	r2,4(r2)
   14768:	18bff136 	bltu	r3,r2,14730 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1476c:	0005883a 	mov	r2,zero
}
   14770:	e037883a 	mov	sp,fp
   14774:	df000017 	ldw	fp,0(sp)
   14778:	dec00104 	addi	sp,sp,4
   1477c:	f800283a 	ret

00014780 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14780:	defffa04 	addi	sp,sp,-24
   14784:	df000515 	stw	fp,20(sp)
   14788:	df000504 	addi	fp,sp,20
   1478c:	e13ffd15 	stw	r4,-12(fp)
   14790:	e17ffe15 	stw	r5,-8(fp)
   14794:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14798:	00bff9c4 	movi	r2,-25
   1479c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   147a0:	e0bffe17 	ldw	r2,-8(fp)
   147a4:	10da8060 	cmpeqi	r3,r2,27137
   147a8:	1800031e 	bne	r3,zero,147b8 <altera_avalon_jtag_uart_ioctl+0x38>
   147ac:	109a80a0 	cmpeqi	r2,r2,27138
   147b0:	1000181e 	bne	r2,zero,14814 <altera_avalon_jtag_uart_ioctl+0x94>
   147b4:	00002606 	br	14850 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   147b8:	e0bffd17 	ldw	r2,-12(fp)
   147bc:	10c00117 	ldw	r3,4(r2)
   147c0:	00a00034 	movhi	r2,32768
   147c4:	10bfffc4 	addi	r2,r2,-1
   147c8:	18802226 	beq	r3,r2,14854 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   147cc:	e0bfff17 	ldw	r2,-4(fp)
   147d0:	10800017 	ldw	r2,0(r2)
   147d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   147d8:	e0bffc17 	ldw	r2,-16(fp)
   147dc:	10800090 	cmplti	r2,r2,2
   147e0:	1000061e 	bne	r2,zero,147fc <altera_avalon_jtag_uart_ioctl+0x7c>
   147e4:	e0fffc17 	ldw	r3,-16(fp)
   147e8:	00a00034 	movhi	r2,32768
   147ec:	10bfffc4 	addi	r2,r2,-1
   147f0:	18800226 	beq	r3,r2,147fc <altera_avalon_jtag_uart_ioctl+0x7c>
   147f4:	e0bffc17 	ldw	r2,-16(fp)
   147f8:	00000206 	br	14804 <altera_avalon_jtag_uart_ioctl+0x84>
   147fc:	00a00034 	movhi	r2,32768
   14800:	10bfff84 	addi	r2,r2,-2
   14804:	e0fffd17 	ldw	r3,-12(fp)
   14808:	18800115 	stw	r2,4(r3)
      rc = 0;
   1480c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14810:	00001006 	br	14854 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14814:	e0bffd17 	ldw	r2,-12(fp)
   14818:	10c00117 	ldw	r3,4(r2)
   1481c:	00a00034 	movhi	r2,32768
   14820:	10bfffc4 	addi	r2,r2,-1
   14824:	18800d26 	beq	r3,r2,1485c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14828:	e0bffd17 	ldw	r2,-12(fp)
   1482c:	10c00917 	ldw	r3,36(r2)
   14830:	e0bffd17 	ldw	r2,-12(fp)
   14834:	10800117 	ldw	r2,4(r2)
   14838:	1885803a 	cmpltu	r2,r3,r2
   1483c:	10c03fcc 	andi	r3,r2,255
   14840:	e0bfff17 	ldw	r2,-4(fp)
   14844:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14848:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1484c:	00000306 	br	1485c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   14850:	00000306 	br	14860 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14854:	0001883a 	nop
   14858:	00000106 	br	14860 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1485c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14860:	e0bffb17 	ldw	r2,-20(fp)
}
   14864:	e037883a 	mov	sp,fp
   14868:	df000017 	ldw	fp,0(sp)
   1486c:	dec00104 	addi	sp,sp,4
   14870:	f800283a 	ret

00014874 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14874:	defff304 	addi	sp,sp,-52
   14878:	dfc00c15 	stw	ra,48(sp)
   1487c:	df000b15 	stw	fp,44(sp)
   14880:	df000b04 	addi	fp,sp,44
   14884:	e13ffc15 	stw	r4,-16(fp)
   14888:	e17ffd15 	stw	r5,-12(fp)
   1488c:	e1bffe15 	stw	r6,-8(fp)
   14890:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14894:	e0bffd17 	ldw	r2,-12(fp)
   14898:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1489c:	00004706 	br	149bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   148a0:	e0bffc17 	ldw	r2,-16(fp)
   148a4:	10800a17 	ldw	r2,40(r2)
   148a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   148ac:	e0bffc17 	ldw	r2,-16(fp)
   148b0:	10800b17 	ldw	r2,44(r2)
   148b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   148b8:	e0fff717 	ldw	r3,-36(fp)
   148bc:	e0bff817 	ldw	r2,-32(fp)
   148c0:	18800536 	bltu	r3,r2,148d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   148c4:	e0fff717 	ldw	r3,-36(fp)
   148c8:	e0bff817 	ldw	r2,-32(fp)
   148cc:	1885c83a 	sub	r2,r3,r2
   148d0:	e0bff615 	stw	r2,-40(fp)
   148d4:	00000406 	br	148e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   148d8:	00c20004 	movi	r3,2048
   148dc:	e0bff817 	ldw	r2,-32(fp)
   148e0:	1885c83a 	sub	r2,r3,r2
   148e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   148e8:	e0bff617 	ldw	r2,-40(fp)
   148ec:	10001e26 	beq	r2,zero,14968 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   148f0:	e0fffe17 	ldw	r3,-8(fp)
   148f4:	e0bff617 	ldw	r2,-40(fp)
   148f8:	1880022e 	bgeu	r3,r2,14904 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   148fc:	e0bffe17 	ldw	r2,-8(fp)
   14900:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14904:	e0bff817 	ldw	r2,-32(fp)
   14908:	10800e04 	addi	r2,r2,56
   1490c:	e0fffc17 	ldw	r3,-16(fp)
   14910:	1885883a 	add	r2,r3,r2
   14914:	e13ff517 	ldw	r4,-44(fp)
   14918:	100b883a 	mov	r5,r2
   1491c:	e1bff617 	ldw	r6,-40(fp)
   14920:	00116080 	call	11608 <memcpy>
      ptr   += n;
   14924:	e0fff517 	ldw	r3,-44(fp)
   14928:	e0bff617 	ldw	r2,-40(fp)
   1492c:	1885883a 	add	r2,r3,r2
   14930:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14934:	e0fffe17 	ldw	r3,-8(fp)
   14938:	e0bff617 	ldw	r2,-40(fp)
   1493c:	1885c83a 	sub	r2,r3,r2
   14940:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14944:	e0fff817 	ldw	r3,-32(fp)
   14948:	e0bff617 	ldw	r2,-40(fp)
   1494c:	1885883a 	add	r2,r3,r2
   14950:	10c1ffcc 	andi	r3,r2,2047
   14954:	e0bffc17 	ldw	r2,-16(fp)
   14958:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1495c:	e0bffe17 	ldw	r2,-8(fp)
   14960:	00bfcf16 	blt	zero,r2,148a0 <altera_avalon_jtag_uart_read+0x2c>
   14964:	00000106 	br	1496c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14968:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1496c:	e0fff517 	ldw	r3,-44(fp)
   14970:	e0bffd17 	ldw	r2,-12(fp)
   14974:	1880141e 	bne	r3,r2,149c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14978:	e0bfff17 	ldw	r2,-4(fp)
   1497c:	1090000c 	andi	r2,r2,16384
   14980:	1000131e 	bne	r2,zero,149d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14984:	0001883a 	nop
   14988:	e0bffc17 	ldw	r2,-16(fp)
   1498c:	10c00a17 	ldw	r3,40(r2)
   14990:	e0bff717 	ldw	r2,-36(fp)
   14994:	1880051e 	bne	r3,r2,149ac <altera_avalon_jtag_uart_read+0x138>
   14998:	e0bffc17 	ldw	r2,-16(fp)
   1499c:	10c00917 	ldw	r3,36(r2)
   149a0:	e0bffc17 	ldw	r2,-16(fp)
   149a4:	10800117 	ldw	r2,4(r2)
   149a8:	18bff736 	bltu	r3,r2,14988 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   149ac:	e0bffc17 	ldw	r2,-16(fp)
   149b0:	10c00a17 	ldw	r3,40(r2)
   149b4:	e0bff717 	ldw	r2,-36(fp)
   149b8:	18800726 	beq	r3,r2,149d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   149bc:	e0bffe17 	ldw	r2,-8(fp)
   149c0:	00bfb716 	blt	zero,r2,148a0 <altera_avalon_jtag_uart_read+0x2c>
   149c4:	00000506 	br	149dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   149c8:	0001883a 	nop
   149cc:	00000306 	br	149dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   149d0:	0001883a 	nop
   149d4:	00000106 	br	149dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   149d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   149dc:	e0fff517 	ldw	r3,-44(fp)
   149e0:	e0bffd17 	ldw	r2,-12(fp)
   149e4:	18801726 	beq	r3,r2,14a44 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149e8:	0005303a 	rdctl	r2,status
   149ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149f0:	e0fffa17 	ldw	r3,-24(fp)
   149f4:	00bfff84 	movi	r2,-2
   149f8:	1884703a 	and	r2,r3,r2
   149fc:	1001703a 	wrctl	status,r2
  
  return context;
   14a00:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14a04:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14a08:	e0bffc17 	ldw	r2,-16(fp)
   14a0c:	10800817 	ldw	r2,32(r2)
   14a10:	10c00054 	ori	r3,r2,1
   14a14:	e0bffc17 	ldw	r2,-16(fp)
   14a18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14a1c:	e0bffc17 	ldw	r2,-16(fp)
   14a20:	10800017 	ldw	r2,0(r2)
   14a24:	10800104 	addi	r2,r2,4
   14a28:	e0fffc17 	ldw	r3,-16(fp)
   14a2c:	18c00817 	ldw	r3,32(r3)
   14a30:	10c00035 	stwio	r3,0(r2)
   14a34:	e0bff917 	ldw	r2,-28(fp)
   14a38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a3c:	e0bffb17 	ldw	r2,-20(fp)
   14a40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14a44:	e0fff517 	ldw	r3,-44(fp)
   14a48:	e0bffd17 	ldw	r2,-12(fp)
   14a4c:	18800426 	beq	r3,r2,14a60 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   14a50:	e0fff517 	ldw	r3,-44(fp)
   14a54:	e0bffd17 	ldw	r2,-12(fp)
   14a58:	1885c83a 	sub	r2,r3,r2
   14a5c:	00000606 	br	14a78 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   14a60:	e0bfff17 	ldw	r2,-4(fp)
   14a64:	1090000c 	andi	r2,r2,16384
   14a68:	10000226 	beq	r2,zero,14a74 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14a6c:	00bffd44 	movi	r2,-11
   14a70:	00000106 	br	14a78 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   14a74:	00bffec4 	movi	r2,-5
}
   14a78:	e037883a 	mov	sp,fp
   14a7c:	dfc00117 	ldw	ra,4(sp)
   14a80:	df000017 	ldw	fp,0(sp)
   14a84:	dec00204 	addi	sp,sp,8
   14a88:	f800283a 	ret

00014a8c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14a8c:	defff304 	addi	sp,sp,-52
   14a90:	dfc00c15 	stw	ra,48(sp)
   14a94:	df000b15 	stw	fp,44(sp)
   14a98:	df000b04 	addi	fp,sp,44
   14a9c:	e13ffc15 	stw	r4,-16(fp)
   14aa0:	e17ffd15 	stw	r5,-12(fp)
   14aa4:	e1bffe15 	stw	r6,-8(fp)
   14aa8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14aac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14ab0:	e0bffd17 	ldw	r2,-12(fp)
   14ab4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14ab8:	00003706 	br	14b98 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14abc:	e0bffc17 	ldw	r2,-16(fp)
   14ac0:	10800c17 	ldw	r2,48(r2)
   14ac4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14ac8:	e0bffc17 	ldw	r2,-16(fp)
   14acc:	10800d17 	ldw	r2,52(r2)
   14ad0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14ad4:	e0fff817 	ldw	r3,-32(fp)
   14ad8:	e0bff517 	ldw	r2,-44(fp)
   14adc:	1880062e 	bgeu	r3,r2,14af8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14ae0:	e0fff517 	ldw	r3,-44(fp)
   14ae4:	e0bff817 	ldw	r2,-32(fp)
   14ae8:	1885c83a 	sub	r2,r3,r2
   14aec:	10bfffc4 	addi	r2,r2,-1
   14af0:	e0bff615 	stw	r2,-40(fp)
   14af4:	00000b06 	br	14b24 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14af8:	e0bff517 	ldw	r2,-44(fp)
   14afc:	10000526 	beq	r2,zero,14b14 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14b00:	00c20004 	movi	r3,2048
   14b04:	e0bff817 	ldw	r2,-32(fp)
   14b08:	1885c83a 	sub	r2,r3,r2
   14b0c:	e0bff615 	stw	r2,-40(fp)
   14b10:	00000406 	br	14b24 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14b14:	00c1ffc4 	movi	r3,2047
   14b18:	e0bff817 	ldw	r2,-32(fp)
   14b1c:	1885c83a 	sub	r2,r3,r2
   14b20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14b24:	e0bff617 	ldw	r2,-40(fp)
   14b28:	10001e26 	beq	r2,zero,14ba4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14b2c:	e0fffe17 	ldw	r3,-8(fp)
   14b30:	e0bff617 	ldw	r2,-40(fp)
   14b34:	1880022e 	bgeu	r3,r2,14b40 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14b38:	e0bffe17 	ldw	r2,-8(fp)
   14b3c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14b40:	e0bff817 	ldw	r2,-32(fp)
   14b44:	10820e04 	addi	r2,r2,2104
   14b48:	e0fffc17 	ldw	r3,-16(fp)
   14b4c:	1885883a 	add	r2,r3,r2
   14b50:	1009883a 	mov	r4,r2
   14b54:	e17ffd17 	ldw	r5,-12(fp)
   14b58:	e1bff617 	ldw	r6,-40(fp)
   14b5c:	00116080 	call	11608 <memcpy>
      ptr   += n;
   14b60:	e0fffd17 	ldw	r3,-12(fp)
   14b64:	e0bff617 	ldw	r2,-40(fp)
   14b68:	1885883a 	add	r2,r3,r2
   14b6c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14b70:	e0fffe17 	ldw	r3,-8(fp)
   14b74:	e0bff617 	ldw	r2,-40(fp)
   14b78:	1885c83a 	sub	r2,r3,r2
   14b7c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14b80:	e0fff817 	ldw	r3,-32(fp)
   14b84:	e0bff617 	ldw	r2,-40(fp)
   14b88:	1885883a 	add	r2,r3,r2
   14b8c:	10c1ffcc 	andi	r3,r2,2047
   14b90:	e0bffc17 	ldw	r2,-16(fp)
   14b94:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	00bfc716 	blt	zero,r2,14abc <altera_avalon_jtag_uart_write+0x30>
   14ba0:	00000106 	br	14ba8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14ba4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ba8:	0005303a 	rdctl	r2,status
   14bac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14bb0:	e0fffa17 	ldw	r3,-24(fp)
   14bb4:	00bfff84 	movi	r2,-2
   14bb8:	1884703a 	and	r2,r3,r2
   14bbc:	1001703a 	wrctl	status,r2
  
  return context;
   14bc0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14bc4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14bc8:	e0bffc17 	ldw	r2,-16(fp)
   14bcc:	10800817 	ldw	r2,32(r2)
   14bd0:	10c00094 	ori	r3,r2,2
   14bd4:	e0bffc17 	ldw	r2,-16(fp)
   14bd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14bdc:	e0bffc17 	ldw	r2,-16(fp)
   14be0:	10800017 	ldw	r2,0(r2)
   14be4:	10800104 	addi	r2,r2,4
   14be8:	e0fffc17 	ldw	r3,-16(fp)
   14bec:	18c00817 	ldw	r3,32(r3)
   14bf0:	10c00035 	stwio	r3,0(r2)
   14bf4:	e0bff917 	ldw	r2,-28(fp)
   14bf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bfc:	e0bffb17 	ldw	r2,-20(fp)
   14c00:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14c04:	e0bffe17 	ldw	r2,-8(fp)
   14c08:	0080110e 	bge	zero,r2,14c50 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	1090000c 	andi	r2,r2,16384
   14c14:	1000111e 	bne	r2,zero,14c5c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14c18:	0001883a 	nop
   14c1c:	e0bffc17 	ldw	r2,-16(fp)
   14c20:	10c00d17 	ldw	r3,52(r2)
   14c24:	e0bff517 	ldw	r2,-44(fp)
   14c28:	1880051e 	bne	r3,r2,14c40 <altera_avalon_jtag_uart_write+0x1b4>
   14c2c:	e0bffc17 	ldw	r2,-16(fp)
   14c30:	10c00917 	ldw	r3,36(r2)
   14c34:	e0bffc17 	ldw	r2,-16(fp)
   14c38:	10800117 	ldw	r2,4(r2)
   14c3c:	18bff736 	bltu	r3,r2,14c1c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14c40:	e0bffc17 	ldw	r2,-16(fp)
   14c44:	10c00d17 	ldw	r3,52(r2)
   14c48:	e0bff517 	ldw	r2,-44(fp)
   14c4c:	18800526 	beq	r3,r2,14c64 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14c50:	e0bffe17 	ldw	r2,-8(fp)
   14c54:	00bfd016 	blt	zero,r2,14b98 <altera_avalon_jtag_uart_write+0x10c>
   14c58:	00000306 	br	14c68 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14c5c:	0001883a 	nop
   14c60:	00000106 	br	14c68 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   14c64:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14c68:	e0fffd17 	ldw	r3,-12(fp)
   14c6c:	e0bff717 	ldw	r2,-36(fp)
   14c70:	18800426 	beq	r3,r2,14c84 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14c74:	e0fffd17 	ldw	r3,-12(fp)
   14c78:	e0bff717 	ldw	r2,-36(fp)
   14c7c:	1885c83a 	sub	r2,r3,r2
   14c80:	00000606 	br	14c9c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14c84:	e0bfff17 	ldw	r2,-4(fp)
   14c88:	1090000c 	andi	r2,r2,16384
   14c8c:	10000226 	beq	r2,zero,14c98 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14c90:	00bffd44 	movi	r2,-11
   14c94:	00000106 	br	14c9c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14c98:	00bffec4 	movi	r2,-5
}
   14c9c:	e037883a 	mov	sp,fp
   14ca0:	dfc00117 	ldw	ra,4(sp)
   14ca4:	df000017 	ldw	fp,0(sp)
   14ca8:	dec00204 	addi	sp,sp,8
   14cac:	f800283a 	ret

00014cb0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14cb0:	defffa04 	addi	sp,sp,-24
   14cb4:	dfc00515 	stw	ra,20(sp)
   14cb8:	df000415 	stw	fp,16(sp)
   14cbc:	df000404 	addi	fp,sp,16
   14cc0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14cc4:	0007883a 	mov	r3,zero
   14cc8:	e0bfff17 	ldw	r2,-4(fp)
   14ccc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14cd0:	e0bfff17 	ldw	r2,-4(fp)
   14cd4:	10800104 	addi	r2,r2,4
   14cd8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cdc:	0005303a 	rdctl	r2,status
   14ce0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ce4:	e0fffd17 	ldw	r3,-12(fp)
   14ce8:	00bfff84 	movi	r2,-2
   14cec:	1884703a 	and	r2,r3,r2
   14cf0:	1001703a 	wrctl	status,r2
  
  return context;
   14cf4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14cf8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14cfc:	001581c0 	call	1581c <alt_tick>
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14d10:	e037883a 	mov	sp,fp
   14d14:	dfc00117 	ldw	ra,4(sp)
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00204 	addi	sp,sp,8
   14d20:	f800283a 	ret

00014d24 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14d24:	defff804 	addi	sp,sp,-32
   14d28:	dfc00715 	stw	ra,28(sp)
   14d2c:	df000615 	stw	fp,24(sp)
   14d30:	df000604 	addi	fp,sp,24
   14d34:	e13ffc15 	stw	r4,-16(fp)
   14d38:	e17ffd15 	stw	r5,-12(fp)
   14d3c:	e1bffe15 	stw	r6,-8(fp)
   14d40:	e1ffff15 	stw	r7,-4(fp)
   14d44:	e0bfff17 	ldw	r2,-4(fp)
   14d48:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14d4c:	008000b4 	movhi	r2,2
   14d50:	10a56c04 	addi	r2,r2,-27216
   14d54:	10800017 	ldw	r2,0(r2)
   14d58:	1000041e 	bne	r2,zero,14d6c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   14d5c:	008000b4 	movhi	r2,2
   14d60:	10a56c04 	addi	r2,r2,-27216
   14d64:	e0fffb17 	ldw	r3,-20(fp)
   14d68:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14d6c:	e0bffc17 	ldw	r2,-16(fp)
   14d70:	10800104 	addi	r2,r2,4
   14d74:	00c001c4 	movi	r3,7
   14d78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14d7c:	d8000015 	stw	zero,0(sp)
   14d80:	e13ffd17 	ldw	r4,-12(fp)
   14d84:	e17ffe17 	ldw	r5,-8(fp)
   14d88:	01800074 	movhi	r6,1
   14d8c:	31932c04 	addi	r6,r6,19632
   14d90:	e1fffc17 	ldw	r7,-16(fp)
   14d94:	00150cc0 	call	150cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14d98:	e037883a 	mov	sp,fp
   14d9c:	dfc00117 	ldw	ra,4(sp)
   14da0:	df000017 	ldw	fp,0(sp)
   14da4:	dec00204 	addi	sp,sp,8
   14da8:	f800283a 	ret

00014dac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14dac:	defff504 	addi	sp,sp,-44
   14db0:	df000a15 	stw	fp,40(sp)
   14db4:	df000a04 	addi	fp,sp,40
   14db8:	e13ffc15 	stw	r4,-16(fp)
   14dbc:	e17ffd15 	stw	r5,-12(fp)
   14dc0:	e1bffe15 	stw	r6,-8(fp)
   14dc4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14dc8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14dcc:	008000b4 	movhi	r2,2
   14dd0:	10a56c04 	addi	r2,r2,-27216
   14dd4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14dd8:	10003f26 	beq	r2,zero,14ed8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14ddc:	e0bffc17 	ldw	r2,-16(fp)
   14de0:	10003b26 	beq	r2,zero,14ed0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14de4:	e0bffc17 	ldw	r2,-16(fp)
   14de8:	e0fffe17 	ldw	r3,-8(fp)
   14dec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14df0:	e0bffc17 	ldw	r2,-16(fp)
   14df4:	e0ffff17 	ldw	r3,-4(fp)
   14df8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dfc:	0005303a 	rdctl	r2,status
   14e00:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e04:	e0fff817 	ldw	r3,-32(fp)
   14e08:	00bfff84 	movi	r2,-2
   14e0c:	1884703a 	and	r2,r3,r2
   14e10:	1001703a 	wrctl	status,r2
  
  return context;
   14e14:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14e18:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14e1c:	008000b4 	movhi	r2,2
   14e20:	10a56d04 	addi	r2,r2,-27212
   14e24:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14e28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14e2c:	e0fffd17 	ldw	r3,-12(fp)
   14e30:	e0bff617 	ldw	r2,-40(fp)
   14e34:	1885883a 	add	r2,r3,r2
   14e38:	10c00044 	addi	r3,r2,1
   14e3c:	e0bffc17 	ldw	r2,-16(fp)
   14e40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14e44:	e0bffc17 	ldw	r2,-16(fp)
   14e48:	10c00217 	ldw	r3,8(r2)
   14e4c:	e0bff617 	ldw	r2,-40(fp)
   14e50:	1880042e 	bgeu	r3,r2,14e64 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   14e54:	e0bffc17 	ldw	r2,-16(fp)
   14e58:	00c00044 	movi	r3,1
   14e5c:	10c00405 	stb	r3,16(r2)
   14e60:	00000206 	br	14e6c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   14e64:	e0bffc17 	ldw	r2,-16(fp)
   14e68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14e6c:	e0bffc17 	ldw	r2,-16(fp)
   14e70:	00c00074 	movhi	r3,1
   14e74:	18deb004 	addi	r3,r3,31424
   14e78:	e0fff915 	stw	r3,-28(fp)
   14e7c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14e80:	e0bffa17 	ldw	r2,-24(fp)
   14e84:	e0fff917 	ldw	r3,-28(fp)
   14e88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14e8c:	e0bff917 	ldw	r2,-28(fp)
   14e90:	10c00017 	ldw	r3,0(r2)
   14e94:	e0bffa17 	ldw	r2,-24(fp)
   14e98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14e9c:	e0bff917 	ldw	r2,-28(fp)
   14ea0:	10800017 	ldw	r2,0(r2)
   14ea4:	e0fffa17 	ldw	r3,-24(fp)
   14ea8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14eac:	e0bff917 	ldw	r2,-28(fp)
   14eb0:	e0fffa17 	ldw	r3,-24(fp)
   14eb4:	10c00015 	stw	r3,0(r2)
   14eb8:	e0bff717 	ldw	r2,-36(fp)
   14ebc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ec0:	e0bffb17 	ldw	r2,-20(fp)
   14ec4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14ec8:	0005883a 	mov	r2,zero
   14ecc:	00000306 	br	14edc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   14ed0:	00bffa84 	movi	r2,-22
   14ed4:	00000106 	br	14edc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14ed8:	00bfde84 	movi	r2,-134
  }
}
   14edc:	e037883a 	mov	sp,fp
   14ee0:	df000017 	ldw	fp,0(sp)
   14ee4:	dec00104 	addi	sp,sp,4
   14ee8:	f800283a 	ret

00014eec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14eec:	deffff04 	addi	sp,sp,-4
   14ef0:	df000015 	stw	fp,0(sp)
   14ef4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14ef8:	e037883a 	mov	sp,fp
   14efc:	df000017 	ldw	fp,0(sp)
   14f00:	dec00104 	addi	sp,sp,4
   14f04:	f800283a 	ret

00014f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f08:	defffe04 	addi	sp,sp,-8
   14f0c:	dfc00115 	stw	ra,4(sp)
   14f10:	df000015 	stw	fp,0(sp)
   14f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f18:	00800074 	movhi	r2,1
   14f1c:	109ead04 	addi	r2,r2,31412
   14f20:	10800017 	ldw	r2,0(r2)
   14f24:	10000526 	beq	r2,zero,14f3c <alt_get_errno+0x34>
   14f28:	00800074 	movhi	r2,1
   14f2c:	109ead04 	addi	r2,r2,31412
   14f30:	10800017 	ldw	r2,0(r2)
   14f34:	103ee83a 	callr	r2
   14f38:	00000206 	br	14f44 <alt_get_errno+0x3c>
   14f3c:	008000b4 	movhi	r2,2
   14f40:	10a56704 	addi	r2,r2,-27236
}
   14f44:	e037883a 	mov	sp,fp
   14f48:	dfc00117 	ldw	ra,4(sp)
   14f4c:	df000017 	ldw	fp,0(sp)
   14f50:	dec00204 	addi	sp,sp,8
   14f54:	f800283a 	ret

00014f58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14f58:	defffa04 	addi	sp,sp,-24
   14f5c:	dfc00515 	stw	ra,20(sp)
   14f60:	df000415 	stw	fp,16(sp)
   14f64:	df000404 	addi	fp,sp,16
   14f68:	e13ffe15 	stw	r4,-8(fp)
   14f6c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14f70:	e0bffe17 	ldw	r2,-8(fp)
   14f74:	10000326 	beq	r2,zero,14f84 <alt_dev_llist_insert+0x2c>
   14f78:	e0bffe17 	ldw	r2,-8(fp)
   14f7c:	10800217 	ldw	r2,8(r2)
   14f80:	1000051e 	bne	r2,zero,14f98 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   14f84:	0014f080 	call	14f08 <alt_get_errno>
   14f88:	00c00584 	movi	r3,22
   14f8c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   14f90:	00bffa84 	movi	r2,-22
   14f94:	00001306 	br	14fe4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14f98:	e0bffe17 	ldw	r2,-8(fp)
   14f9c:	e0ffff17 	ldw	r3,-4(fp)
   14fa0:	e0fffc15 	stw	r3,-16(fp)
   14fa4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14fa8:	e0bffd17 	ldw	r2,-12(fp)
   14fac:	e0fffc17 	ldw	r3,-16(fp)
   14fb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14fb4:	e0bffc17 	ldw	r2,-16(fp)
   14fb8:	10c00017 	ldw	r3,0(r2)
   14fbc:	e0bffd17 	ldw	r2,-12(fp)
   14fc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14fc4:	e0bffc17 	ldw	r2,-16(fp)
   14fc8:	10800017 	ldw	r2,0(r2)
   14fcc:	e0fffd17 	ldw	r3,-12(fp)
   14fd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14fd4:	e0bffc17 	ldw	r2,-16(fp)
   14fd8:	e0fffd17 	ldw	r3,-12(fp)
   14fdc:	10c00015 	stw	r3,0(r2)

  return 0;  
   14fe0:	0005883a 	mov	r2,zero
}
   14fe4:	e037883a 	mov	sp,fp
   14fe8:	dfc00117 	ldw	ra,4(sp)
   14fec:	df000017 	ldw	fp,0(sp)
   14ff0:	dec00204 	addi	sp,sp,8
   14ff4:	f800283a 	ret

00014ff8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14ff8:	defffd04 	addi	sp,sp,-12
   14ffc:	dfc00215 	stw	ra,8(sp)
   15000:	df000115 	stw	fp,4(sp)
   15004:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15008:	00800074 	movhi	r2,1
   1500c:	1097e204 	addi	r2,r2,24456
   15010:	e0bfff15 	stw	r2,-4(fp)
   15014:	00000606 	br	15030 <_do_ctors+0x38>
        (*ctor) (); 
   15018:	e0bfff17 	ldw	r2,-4(fp)
   1501c:	10800017 	ldw	r2,0(r2)
   15020:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	10bfff04 	addi	r2,r2,-4
   1502c:	e0bfff15 	stw	r2,-4(fp)
   15030:	e0ffff17 	ldw	r3,-4(fp)
   15034:	00800074 	movhi	r2,1
   15038:	1097e304 	addi	r2,r2,24460
   1503c:	18bff62e 	bgeu	r3,r2,15018 <_do_ctors+0x20>
        (*ctor) (); 
}
   15040:	e037883a 	mov	sp,fp
   15044:	dfc00117 	ldw	ra,4(sp)
   15048:	df000017 	ldw	fp,0(sp)
   1504c:	dec00204 	addi	sp,sp,8
   15050:	f800283a 	ret

00015054 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15054:	defffd04 	addi	sp,sp,-12
   15058:	dfc00215 	stw	ra,8(sp)
   1505c:	df000115 	stw	fp,4(sp)
   15060:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15064:	00800074 	movhi	r2,1
   15068:	1097e204 	addi	r2,r2,24456
   1506c:	e0bfff15 	stw	r2,-4(fp)
   15070:	00000606 	br	1508c <_do_dtors+0x38>
        (*dtor) (); 
   15074:	e0bfff17 	ldw	r2,-4(fp)
   15078:	10800017 	ldw	r2,0(r2)
   1507c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15080:	e0bfff17 	ldw	r2,-4(fp)
   15084:	10bfff04 	addi	r2,r2,-4
   15088:	e0bfff15 	stw	r2,-4(fp)
   1508c:	e0ffff17 	ldw	r3,-4(fp)
   15090:	00800074 	movhi	r2,1
   15094:	1097e304 	addi	r2,r2,24460
   15098:	18bff62e 	bgeu	r3,r2,15074 <_do_dtors+0x20>
        (*dtor) (); 
}
   1509c:	e037883a 	mov	sp,fp
   150a0:	dfc00117 	ldw	ra,4(sp)
   150a4:	df000017 	ldw	fp,0(sp)
   150a8:	dec00204 	addi	sp,sp,8
   150ac:	f800283a 	ret

000150b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   150b0:	deffff04 	addi	sp,sp,-4
   150b4:	df000015 	stw	fp,0(sp)
   150b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   150bc:	e037883a 	mov	sp,fp
   150c0:	df000017 	ldw	fp,0(sp)
   150c4:	dec00104 	addi	sp,sp,4
   150c8:	f800283a 	ret

000150cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   150cc:	defff904 	addi	sp,sp,-28
   150d0:	dfc00615 	stw	ra,24(sp)
   150d4:	df000515 	stw	fp,20(sp)
   150d8:	df000504 	addi	fp,sp,20
   150dc:	e13ffc15 	stw	r4,-16(fp)
   150e0:	e17ffd15 	stw	r5,-12(fp)
   150e4:	e1bffe15 	stw	r6,-8(fp)
   150e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   150ec:	e0800217 	ldw	r2,8(fp)
   150f0:	d8800015 	stw	r2,0(sp)
   150f4:	e13ffc17 	ldw	r4,-16(fp)
   150f8:	e17ffd17 	ldw	r5,-12(fp)
   150fc:	e1bffe17 	ldw	r6,-8(fp)
   15100:	e1ffff17 	ldw	r7,-4(fp)
   15104:	00152a40 	call	152a4 <alt_iic_isr_register>
}  
   15108:	e037883a 	mov	sp,fp
   1510c:	dfc00117 	ldw	ra,4(sp)
   15110:	df000017 	ldw	fp,0(sp)
   15114:	dec00204 	addi	sp,sp,8
   15118:	f800283a 	ret

0001511c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1511c:	defff904 	addi	sp,sp,-28
   15120:	df000615 	stw	fp,24(sp)
   15124:	df000604 	addi	fp,sp,24
   15128:	e13ffe15 	stw	r4,-8(fp)
   1512c:	e17fff15 	stw	r5,-4(fp)
   15130:	e0bfff17 	ldw	r2,-4(fp)
   15134:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15138:	0005303a 	rdctl	r2,status
   1513c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15140:	e0fffb17 	ldw	r3,-20(fp)
   15144:	00bfff84 	movi	r2,-2
   15148:	1884703a 	and	r2,r3,r2
   1514c:	1001703a 	wrctl	status,r2
  
  return context;
   15150:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15154:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15158:	e0bffa17 	ldw	r2,-24(fp)
   1515c:	00c00044 	movi	r3,1
   15160:	1884983a 	sll	r2,r3,r2
   15164:	1007883a 	mov	r3,r2
   15168:	008000b4 	movhi	r2,2
   1516c:	10a56b04 	addi	r2,r2,-27220
   15170:	10800017 	ldw	r2,0(r2)
   15174:	1886b03a 	or	r3,r3,r2
   15178:	008000b4 	movhi	r2,2
   1517c:	10a56b04 	addi	r2,r2,-27220
   15180:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15184:	008000b4 	movhi	r2,2
   15188:	10a56b04 	addi	r2,r2,-27220
   1518c:	10800017 	ldw	r2,0(r2)
   15190:	100170fa 	wrctl	ienable,r2
   15194:	e0bffc17 	ldw	r2,-16(fp)
   15198:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1519c:	e0bffd17 	ldw	r2,-12(fp)
   151a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   151a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   151a8:	e037883a 	mov	sp,fp
   151ac:	df000017 	ldw	fp,0(sp)
   151b0:	dec00104 	addi	sp,sp,4
   151b4:	f800283a 	ret

000151b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   151b8:	defff904 	addi	sp,sp,-28
   151bc:	df000615 	stw	fp,24(sp)
   151c0:	df000604 	addi	fp,sp,24
   151c4:	e13ffe15 	stw	r4,-8(fp)
   151c8:	e17fff15 	stw	r5,-4(fp)
   151cc:	e0bfff17 	ldw	r2,-4(fp)
   151d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151d4:	0005303a 	rdctl	r2,status
   151d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151dc:	e0fffb17 	ldw	r3,-20(fp)
   151e0:	00bfff84 	movi	r2,-2
   151e4:	1884703a 	and	r2,r3,r2
   151e8:	1001703a 	wrctl	status,r2
  
  return context;
   151ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   151f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   151f4:	e0bffa17 	ldw	r2,-24(fp)
   151f8:	00c00044 	movi	r3,1
   151fc:	1884983a 	sll	r2,r3,r2
   15200:	0084303a 	nor	r2,zero,r2
   15204:	1007883a 	mov	r3,r2
   15208:	008000b4 	movhi	r2,2
   1520c:	10a56b04 	addi	r2,r2,-27220
   15210:	10800017 	ldw	r2,0(r2)
   15214:	1886703a 	and	r3,r3,r2
   15218:	008000b4 	movhi	r2,2
   1521c:	10a56b04 	addi	r2,r2,-27220
   15220:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15224:	008000b4 	movhi	r2,2
   15228:	10a56b04 	addi	r2,r2,-27220
   1522c:	10800017 	ldw	r2,0(r2)
   15230:	100170fa 	wrctl	ienable,r2
   15234:	e0bffc17 	ldw	r2,-16(fp)
   15238:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1523c:	e0bffd17 	ldw	r2,-12(fp)
   15240:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15244:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   15248:	e037883a 	mov	sp,fp
   1524c:	df000017 	ldw	fp,0(sp)
   15250:	dec00104 	addi	sp,sp,4
   15254:	f800283a 	ret

00015258 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15258:	defffc04 	addi	sp,sp,-16
   1525c:	df000315 	stw	fp,12(sp)
   15260:	df000304 	addi	fp,sp,12
   15264:	e13ffe15 	stw	r4,-8(fp)
   15268:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1526c:	000530fa 	rdctl	r2,ienable
   15270:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15274:	e0bfff17 	ldw	r2,-4(fp)
   15278:	00c00044 	movi	r3,1
   1527c:	1884983a 	sll	r2,r3,r2
   15280:	1007883a 	mov	r3,r2
   15284:	e0bffd17 	ldw	r2,-12(fp)
   15288:	1884703a 	and	r2,r3,r2
   1528c:	1004c03a 	cmpne	r2,r2,zero
   15290:	10803fcc 	andi	r2,r2,255
}
   15294:	e037883a 	mov	sp,fp
   15298:	df000017 	ldw	fp,0(sp)
   1529c:	dec00104 	addi	sp,sp,4
   152a0:	f800283a 	ret

000152a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   152a4:	defff504 	addi	sp,sp,-44
   152a8:	dfc00a15 	stw	ra,40(sp)
   152ac:	df000915 	stw	fp,36(sp)
   152b0:	df000904 	addi	fp,sp,36
   152b4:	e13ffc15 	stw	r4,-16(fp)
   152b8:	e17ffd15 	stw	r5,-12(fp)
   152bc:	e1bffe15 	stw	r6,-8(fp)
   152c0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   152c4:	00bffa84 	movi	r2,-22
   152c8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   152cc:	e0bffd17 	ldw	r2,-12(fp)
   152d0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   152d4:	e0bff817 	ldw	r2,-32(fp)
   152d8:	10800808 	cmpgei	r2,r2,32
   152dc:	1000271e 	bne	r2,zero,1537c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152e0:	0005303a 	rdctl	r2,status
   152e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152e8:	e0fffa17 	ldw	r3,-24(fp)
   152ec:	00bfff84 	movi	r2,-2
   152f0:	1884703a 	and	r2,r3,r2
   152f4:	1001703a 	wrctl	status,r2
  
  return context;
   152f8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   152fc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   15300:	00c000b4 	movhi	r3,2
   15304:	18e57804 	addi	r3,r3,-27168
   15308:	e0bff817 	ldw	r2,-32(fp)
   1530c:	100490fa 	slli	r2,r2,3
   15310:	1885883a 	add	r2,r3,r2
   15314:	e0fffe17 	ldw	r3,-8(fp)
   15318:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1531c:	00c000b4 	movhi	r3,2
   15320:	18e57804 	addi	r3,r3,-27168
   15324:	e0bff817 	ldw	r2,-32(fp)
   15328:	100490fa 	slli	r2,r2,3
   1532c:	1885883a 	add	r2,r3,r2
   15330:	10800104 	addi	r2,r2,4
   15334:	e0ffff17 	ldw	r3,-4(fp)
   15338:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1533c:	e0bffe17 	ldw	r2,-8(fp)
   15340:	10000526 	beq	r2,zero,15358 <alt_iic_isr_register+0xb4>
   15344:	e0bff817 	ldw	r2,-32(fp)
   15348:	e13ffc17 	ldw	r4,-16(fp)
   1534c:	100b883a 	mov	r5,r2
   15350:	001511c0 	call	1511c <alt_ic_irq_enable>
   15354:	00000406 	br	15368 <alt_iic_isr_register+0xc4>
   15358:	e0bff817 	ldw	r2,-32(fp)
   1535c:	e13ffc17 	ldw	r4,-16(fp)
   15360:	100b883a 	mov	r5,r2
   15364:	00151b80 	call	151b8 <alt_ic_irq_disable>
   15368:	e0bff715 	stw	r2,-36(fp)
   1536c:	e0bff917 	ldw	r2,-28(fp)
   15370:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15374:	e0bffb17 	ldw	r2,-20(fp)
   15378:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1537c:	e0bff717 	ldw	r2,-36(fp)
}
   15380:	e037883a 	mov	sp,fp
   15384:	dfc00117 	ldw	ra,4(sp)
   15388:	df000017 	ldw	fp,0(sp)
   1538c:	dec00204 	addi	sp,sp,8
   15390:	f800283a 	ret

00015394 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15394:	defff804 	addi	sp,sp,-32
   15398:	dfc00715 	stw	ra,28(sp)
   1539c:	df000615 	stw	fp,24(sp)
   153a0:	dc000515 	stw	r16,20(sp)
   153a4:	df000504 	addi	fp,sp,20
   153a8:	e13ffc15 	stw	r4,-16(fp)
   153ac:	e17ffd15 	stw	r5,-12(fp)
   153b0:	e1bffe15 	stw	r6,-8(fp)
   153b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   153b8:	e13ffd17 	ldw	r4,-12(fp)
   153bc:	e17ffe17 	ldw	r5,-8(fp)
   153c0:	e1bfff17 	ldw	r6,-4(fp)
   153c4:	001562c0 	call	1562c <open>
   153c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   153cc:	e0bffb17 	ldw	r2,-20(fp)
   153d0:	10002216 	blt	r2,zero,1545c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   153d4:	04000074 	movhi	r16,1
   153d8:	841a2c04 	addi	r16,r16,26800
   153dc:	e0bffb17 	ldw	r2,-20(fp)
   153e0:	1009883a 	mov	r4,r2
   153e4:	01400304 	movi	r5,12
   153e8:	00132a00 	call	132a0 <__mulsi3>
   153ec:	8085883a 	add	r2,r16,r2
   153f0:	10c00017 	ldw	r3,0(r2)
   153f4:	e0bffc17 	ldw	r2,-16(fp)
   153f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   153fc:	04000074 	movhi	r16,1
   15400:	841a2c04 	addi	r16,r16,26800
   15404:	e0bffb17 	ldw	r2,-20(fp)
   15408:	1009883a 	mov	r4,r2
   1540c:	01400304 	movi	r5,12
   15410:	00132a00 	call	132a0 <__mulsi3>
   15414:	8085883a 	add	r2,r16,r2
   15418:	10800104 	addi	r2,r2,4
   1541c:	10c00017 	ldw	r3,0(r2)
   15420:	e0bffc17 	ldw	r2,-16(fp)
   15424:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15428:	04000074 	movhi	r16,1
   1542c:	841a2c04 	addi	r16,r16,26800
   15430:	e0bffb17 	ldw	r2,-20(fp)
   15434:	1009883a 	mov	r4,r2
   15438:	01400304 	movi	r5,12
   1543c:	00132a00 	call	132a0 <__mulsi3>
   15440:	8085883a 	add	r2,r16,r2
   15444:	10800204 	addi	r2,r2,8
   15448:	10c00017 	ldw	r3,0(r2)
   1544c:	e0bffc17 	ldw	r2,-16(fp)
   15450:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15454:	e13ffb17 	ldw	r4,-20(fp)
   15458:	0013a100 	call	13a10 <alt_release_fd>
  }
} 
   1545c:	e037883a 	mov	sp,fp
   15460:	dfc00217 	ldw	ra,8(sp)
   15464:	df000117 	ldw	fp,4(sp)
   15468:	dc000017 	ldw	r16,0(sp)
   1546c:	dec00304 	addi	sp,sp,12
   15470:	f800283a 	ret

00015474 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15474:	defffb04 	addi	sp,sp,-20
   15478:	dfc00415 	stw	ra,16(sp)
   1547c:	df000315 	stw	fp,12(sp)
   15480:	df000304 	addi	fp,sp,12
   15484:	e13ffd15 	stw	r4,-12(fp)
   15488:	e17ffe15 	stw	r5,-8(fp)
   1548c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15490:	01000074 	movhi	r4,1
   15494:	211a2f04 	addi	r4,r4,26812
   15498:	e17ffd17 	ldw	r5,-12(fp)
   1549c:	01800044 	movi	r6,1
   154a0:	01c07fc4 	movi	r7,511
   154a4:	00153940 	call	15394 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   154a8:	01000074 	movhi	r4,1
   154ac:	211a2c04 	addi	r4,r4,26800
   154b0:	e17ffe17 	ldw	r5,-8(fp)
   154b4:	000d883a 	mov	r6,zero
   154b8:	01c07fc4 	movi	r7,511
   154bc:	00153940 	call	15394 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   154c0:	01000074 	movhi	r4,1
   154c4:	211a3204 	addi	r4,r4,26824
   154c8:	e17fff17 	ldw	r5,-4(fp)
   154cc:	01800044 	movi	r6,1
   154d0:	01c07fc4 	movi	r7,511
   154d4:	00153940 	call	15394 <alt_open_fd>
}  
   154d8:	e037883a 	mov	sp,fp
   154dc:	dfc00117 	ldw	ra,4(sp)
   154e0:	df000017 	ldw	fp,0(sp)
   154e4:	dec00204 	addi	sp,sp,8
   154e8:	f800283a 	ret

000154ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   154ec:	defffe04 	addi	sp,sp,-8
   154f0:	dfc00115 	stw	ra,4(sp)
   154f4:	df000015 	stw	fp,0(sp)
   154f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   154fc:	00800074 	movhi	r2,1
   15500:	109ead04 	addi	r2,r2,31412
   15504:	10800017 	ldw	r2,0(r2)
   15508:	10000526 	beq	r2,zero,15520 <alt_get_errno+0x34>
   1550c:	00800074 	movhi	r2,1
   15510:	109ead04 	addi	r2,r2,31412
   15514:	10800017 	ldw	r2,0(r2)
   15518:	103ee83a 	callr	r2
   1551c:	00000206 	br	15528 <alt_get_errno+0x3c>
   15520:	008000b4 	movhi	r2,2
   15524:	10a56704 	addi	r2,r2,-27236
}
   15528:	e037883a 	mov	sp,fp
   1552c:	dfc00117 	ldw	ra,4(sp)
   15530:	df000017 	ldw	fp,0(sp)
   15534:	dec00204 	addi	sp,sp,8
   15538:	f800283a 	ret

0001553c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1553c:	defffb04 	addi	sp,sp,-20
   15540:	dfc00415 	stw	ra,16(sp)
   15544:	df000315 	stw	fp,12(sp)
   15548:	dc000215 	stw	r16,8(sp)
   1554c:	df000204 	addi	fp,sp,8
   15550:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15554:	e0bfff17 	ldw	r2,-4(fp)
   15558:	10800217 	ldw	r2,8(r2)
   1555c:	10d00034 	orhi	r3,r2,16384
   15560:	e0bfff17 	ldw	r2,-4(fp)
   15564:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15568:	e03ffe15 	stw	zero,-8(fp)
   1556c:	00002206 	br	155f8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15570:	04000074 	movhi	r16,1
   15574:	841a2c04 	addi	r16,r16,26800
   15578:	e0bffe17 	ldw	r2,-8(fp)
   1557c:	1009883a 	mov	r4,r2
   15580:	01400304 	movi	r5,12
   15584:	00132a00 	call	132a0 <__mulsi3>
   15588:	8085883a 	add	r2,r16,r2
   1558c:	10c00017 	ldw	r3,0(r2)
   15590:	e0bfff17 	ldw	r2,-4(fp)
   15594:	10800017 	ldw	r2,0(r2)
   15598:	1880141e 	bne	r3,r2,155ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1559c:	04000074 	movhi	r16,1
   155a0:	841a2c04 	addi	r16,r16,26800
   155a4:	e0bffe17 	ldw	r2,-8(fp)
   155a8:	1009883a 	mov	r4,r2
   155ac:	01400304 	movi	r5,12
   155b0:	00132a00 	call	132a0 <__mulsi3>
   155b4:	8085883a 	add	r2,r16,r2
   155b8:	10800204 	addi	r2,r2,8
   155bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   155c0:	10000a0e 	bge	r2,zero,155ec <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   155c4:	e13ffe17 	ldw	r4,-8(fp)
   155c8:	01400304 	movi	r5,12
   155cc:	00132a00 	call	132a0 <__mulsi3>
   155d0:	00c00074 	movhi	r3,1
   155d4:	18da2c04 	addi	r3,r3,26800
   155d8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   155dc:	e0bfff17 	ldw	r2,-4(fp)
   155e0:	18800226 	beq	r3,r2,155ec <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   155e4:	00bffcc4 	movi	r2,-13
   155e8:	00000a06 	br	15614 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   155ec:	e0bffe17 	ldw	r2,-8(fp)
   155f0:	10800044 	addi	r2,r2,1
   155f4:	e0bffe15 	stw	r2,-8(fp)
   155f8:	00800074 	movhi	r2,1
   155fc:	109eac04 	addi	r2,r2,31408
   15600:	10800017 	ldw	r2,0(r2)
   15604:	1007883a 	mov	r3,r2
   15608:	e0bffe17 	ldw	r2,-8(fp)
   1560c:	18bfd82e 	bgeu	r3,r2,15570 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15610:	0005883a 	mov	r2,zero
}
   15614:	e037883a 	mov	sp,fp
   15618:	dfc00217 	ldw	ra,8(sp)
   1561c:	df000117 	ldw	fp,4(sp)
   15620:	dc000017 	ldw	r16,0(sp)
   15624:	dec00304 	addi	sp,sp,12
   15628:	f800283a 	ret

0001562c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1562c:	defff604 	addi	sp,sp,-40
   15630:	dfc00915 	stw	ra,36(sp)
   15634:	df000815 	stw	fp,32(sp)
   15638:	df000804 	addi	fp,sp,32
   1563c:	e13ffd15 	stw	r4,-12(fp)
   15640:	e17ffe15 	stw	r5,-8(fp)
   15644:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15648:	00bfffc4 	movi	r2,-1
   1564c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15650:	00bffb44 	movi	r2,-19
   15654:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15658:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1565c:	e13ffd17 	ldw	r4,-12(fp)
   15660:	01400074 	movhi	r5,1
   15664:	295eaa04 	addi	r5,r5,31400
   15668:	00159400 	call	15940 <alt_find_dev>
   1566c:	e0bff815 	stw	r2,-32(fp)
   15670:	e0bff817 	ldw	r2,-32(fp)
   15674:	1000051e 	bne	r2,zero,1568c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15678:	e13ffd17 	ldw	r4,-12(fp)
   1567c:	00159d00 	call	159d0 <alt_find_file>
   15680:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15684:	00800044 	movi	r2,1
   15688:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1568c:	e0bff817 	ldw	r2,-32(fp)
   15690:	10002a26 	beq	r2,zero,1573c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15694:	e13ff817 	ldw	r4,-32(fp)
   15698:	0015ae40 	call	15ae4 <alt_get_fd>
   1569c:	e0bff915 	stw	r2,-28(fp)
   156a0:	e0bff917 	ldw	r2,-28(fp)
   156a4:	1000030e 	bge	r2,zero,156b4 <open+0x88>
    {
      status = index;
   156a8:	e0bff917 	ldw	r2,-28(fp)
   156ac:	e0bffa15 	stw	r2,-24(fp)
   156b0:	00002406 	br	15744 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   156b4:	e13ff917 	ldw	r4,-28(fp)
   156b8:	01400304 	movi	r5,12
   156bc:	00132a00 	call	132a0 <__mulsi3>
   156c0:	00c00074 	movhi	r3,1
   156c4:	18da2c04 	addi	r3,r3,26800
   156c8:	10c5883a 	add	r2,r2,r3
   156cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   156d0:	e0fffe17 	ldw	r3,-8(fp)
   156d4:	00900034 	movhi	r2,16384
   156d8:	10bfffc4 	addi	r2,r2,-1
   156dc:	1886703a 	and	r3,r3,r2
   156e0:	e0bffc17 	ldw	r2,-16(fp)
   156e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   156e8:	e0bffb17 	ldw	r2,-20(fp)
   156ec:	1000051e 	bne	r2,zero,15704 <open+0xd8>
   156f0:	e13ffc17 	ldw	r4,-16(fp)
   156f4:	001553c0 	call	1553c <alt_file_locked>
   156f8:	e0bffa15 	stw	r2,-24(fp)
   156fc:	e0bffa17 	ldw	r2,-24(fp)
   15700:	10001016 	blt	r2,zero,15744 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15704:	e0bff817 	ldw	r2,-32(fp)
   15708:	10800317 	ldw	r2,12(r2)
   1570c:	10000826 	beq	r2,zero,15730 <open+0x104>
   15710:	e0bff817 	ldw	r2,-32(fp)
   15714:	10800317 	ldw	r2,12(r2)
   15718:	e13ffc17 	ldw	r4,-16(fp)
   1571c:	e17ffd17 	ldw	r5,-12(fp)
   15720:	e1bffe17 	ldw	r6,-8(fp)
   15724:	e1ffff17 	ldw	r7,-4(fp)
   15728:	103ee83a 	callr	r2
   1572c:	00000106 	br	15734 <open+0x108>
   15730:	0005883a 	mov	r2,zero
   15734:	e0bffa15 	stw	r2,-24(fp)
   15738:	00000206 	br	15744 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1573c:	00bffb44 	movi	r2,-19
   15740:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15744:	e0bffa17 	ldw	r2,-24(fp)
   15748:	1000080e 	bge	r2,zero,1576c <open+0x140>
  {
    alt_release_fd (index);  
   1574c:	e13ff917 	ldw	r4,-28(fp)
   15750:	0013a100 	call	13a10 <alt_release_fd>
    ALT_ERRNO = -status;
   15754:	00154ec0 	call	154ec <alt_get_errno>
   15758:	e0fffa17 	ldw	r3,-24(fp)
   1575c:	00c7c83a 	sub	r3,zero,r3
   15760:	10c00015 	stw	r3,0(r2)
    return -1;
   15764:	00bfffc4 	movi	r2,-1
   15768:	00000106 	br	15770 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1576c:	e0bff917 	ldw	r2,-28(fp)
}
   15770:	e037883a 	mov	sp,fp
   15774:	dfc00117 	ldw	ra,4(sp)
   15778:	df000017 	ldw	fp,0(sp)
   1577c:	dec00204 	addi	sp,sp,8
   15780:	f800283a 	ret

00015784 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15784:	defffa04 	addi	sp,sp,-24
   15788:	df000515 	stw	fp,20(sp)
   1578c:	df000504 	addi	fp,sp,20
   15790:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15794:	0005303a 	rdctl	r2,status
   15798:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1579c:	e0fffc17 	ldw	r3,-16(fp)
   157a0:	00bfff84 	movi	r2,-2
   157a4:	1884703a 	and	r2,r3,r2
   157a8:	1001703a 	wrctl	status,r2
  
  return context;
   157ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   157b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   157bc:	e0bffd17 	ldw	r2,-12(fp)
   157c0:	10800017 	ldw	r2,0(r2)
   157c4:	e0fffd17 	ldw	r3,-12(fp)
   157c8:	18c00117 	ldw	r3,4(r3)
   157cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   157d0:	e0bffd17 	ldw	r2,-12(fp)
   157d4:	10800117 	ldw	r2,4(r2)
   157d8:	e0fffd17 	ldw	r3,-12(fp)
   157dc:	18c00017 	ldw	r3,0(r3)
   157e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	e0fffd17 	ldw	r3,-12(fp)
   157ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   157f0:	e0bffd17 	ldw	r2,-12(fp)
   157f4:	e0fffd17 	ldw	r3,-12(fp)
   157f8:	10c00015 	stw	r3,0(r2)
   157fc:	e0bffb17 	ldw	r2,-20(fp)
   15800:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15804:	e0bffe17 	ldw	r2,-8(fp)
   15808:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1580c:	e037883a 	mov	sp,fp
   15810:	df000017 	ldw	fp,0(sp)
   15814:	dec00104 	addi	sp,sp,4
   15818:	f800283a 	ret

0001581c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1581c:	defffb04 	addi	sp,sp,-20
   15820:	dfc00415 	stw	ra,16(sp)
   15824:	df000315 	stw	fp,12(sp)
   15828:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1582c:	d0a00c17 	ldw	r2,-32720(gp)
   15830:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15834:	d0a6c917 	ldw	r2,-25820(gp)
   15838:	10800044 	addi	r2,r2,1
   1583c:	d0a6c915 	stw	r2,-25820(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15840:	00002e06 	br	158fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15844:	e0bffd17 	ldw	r2,-12(fp)
   15848:	10800017 	ldw	r2,0(r2)
   1584c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15850:	e0bffd17 	ldw	r2,-12(fp)
   15854:	10800403 	ldbu	r2,16(r2)
   15858:	10803fcc 	andi	r2,r2,255
   1585c:	10000426 	beq	r2,zero,15870 <alt_tick+0x54>
   15860:	d0a6c917 	ldw	r2,-25820(gp)
   15864:	1000021e 	bne	r2,zero,15870 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15868:	e0bffd17 	ldw	r2,-12(fp)
   1586c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15870:	e0bffd17 	ldw	r2,-12(fp)
   15874:	10800217 	ldw	r2,8(r2)
   15878:	d0e6c917 	ldw	r3,-25820(gp)
   1587c:	18801d36 	bltu	r3,r2,158f4 <alt_tick+0xd8>
   15880:	e0bffd17 	ldw	r2,-12(fp)
   15884:	10800403 	ldbu	r2,16(r2)
   15888:	10803fcc 	andi	r2,r2,255
   1588c:	1000191e 	bne	r2,zero,158f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15890:	e0bffd17 	ldw	r2,-12(fp)
   15894:	10c00317 	ldw	r3,12(r2)
   15898:	e0bffd17 	ldw	r2,-12(fp)
   1589c:	10800517 	ldw	r2,20(r2)
   158a0:	1009883a 	mov	r4,r2
   158a4:	183ee83a 	callr	r3
   158a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   158ac:	e0bfff17 	ldw	r2,-4(fp)
   158b0:	1000031e 	bne	r2,zero,158c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   158b4:	e13ffd17 	ldw	r4,-12(fp)
   158b8:	00157840 	call	15784 <alt_alarm_stop>
   158bc:	00000d06 	br	158f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   158c0:	e0bffd17 	ldw	r2,-12(fp)
   158c4:	10c00217 	ldw	r3,8(r2)
   158c8:	e0bfff17 	ldw	r2,-4(fp)
   158cc:	1887883a 	add	r3,r3,r2
   158d0:	e0bffd17 	ldw	r2,-12(fp)
   158d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   158d8:	e0bffd17 	ldw	r2,-12(fp)
   158dc:	10c00217 	ldw	r3,8(r2)
   158e0:	d0a6c917 	ldw	r2,-25820(gp)
   158e4:	1880032e 	bgeu	r3,r2,158f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	00c00044 	movi	r3,1
   158f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   158f4:	e0bffe17 	ldw	r2,-8(fp)
   158f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   158fc:	e0fffd17 	ldw	r3,-12(fp)
   15900:	d0a00c04 	addi	r2,gp,-32720
   15904:	18bfcf1e 	bne	r3,r2,15844 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15908:	0001883a 	nop
}
   1590c:	e037883a 	mov	sp,fp
   15910:	dfc00117 	ldw	ra,4(sp)
   15914:	df000017 	ldw	fp,0(sp)
   15918:	dec00204 	addi	sp,sp,8
   1591c:	f800283a 	ret

00015920 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   15920:	deffff04 	addi	sp,sp,-4
   15924:	df000015 	stw	fp,0(sp)
   15928:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1592c:	000170fa 	wrctl	ienable,zero
}
   15930:	e037883a 	mov	sp,fp
   15934:	df000017 	ldw	fp,0(sp)
   15938:	dec00104 	addi	sp,sp,4
   1593c:	f800283a 	ret

00015940 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15940:	defffa04 	addi	sp,sp,-24
   15944:	dfc00515 	stw	ra,20(sp)
   15948:	df000415 	stw	fp,16(sp)
   1594c:	df000404 	addi	fp,sp,16
   15950:	e13ffe15 	stw	r4,-8(fp)
   15954:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15958:	e0bfff17 	ldw	r2,-4(fp)
   1595c:	10800017 	ldw	r2,0(r2)
   15960:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15964:	e13ffe17 	ldw	r4,-8(fp)
   15968:	001081c0 	call	1081c <strlen>
   1596c:	10800044 	addi	r2,r2,1
   15970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15974:	00000d06 	br	159ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15978:	e0bffc17 	ldw	r2,-16(fp)
   1597c:	10c00217 	ldw	r3,8(r2)
   15980:	e0bffd17 	ldw	r2,-12(fp)
   15984:	1809883a 	mov	r4,r3
   15988:	e17ffe17 	ldw	r5,-8(fp)
   1598c:	100d883a 	mov	r6,r2
   15990:	0015c040 	call	15c04 <memcmp>
   15994:	1000021e 	bne	r2,zero,159a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15998:	e0bffc17 	ldw	r2,-16(fp)
   1599c:	00000706 	br	159bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   159a0:	e0bffc17 	ldw	r2,-16(fp)
   159a4:	10800017 	ldw	r2,0(r2)
   159a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   159ac:	e0fffc17 	ldw	r3,-16(fp)
   159b0:	e0bfff17 	ldw	r2,-4(fp)
   159b4:	18bff01e 	bne	r3,r2,15978 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   159b8:	0005883a 	mov	r2,zero
}
   159bc:	e037883a 	mov	sp,fp
   159c0:	dfc00117 	ldw	ra,4(sp)
   159c4:	df000017 	ldw	fp,0(sp)
   159c8:	dec00204 	addi	sp,sp,8
   159cc:	f800283a 	ret

000159d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   159d0:	defffb04 	addi	sp,sp,-20
   159d4:	dfc00415 	stw	ra,16(sp)
   159d8:	df000315 	stw	fp,12(sp)
   159dc:	df000304 	addi	fp,sp,12
   159e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   159e4:	00800074 	movhi	r2,1
   159e8:	109ea804 	addi	r2,r2,31392
   159ec:	10800017 	ldw	r2,0(r2)
   159f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   159f4:	00003106 	br	15abc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   159f8:	e0bffd17 	ldw	r2,-12(fp)
   159fc:	10800217 	ldw	r2,8(r2)
   15a00:	1009883a 	mov	r4,r2
   15a04:	001081c0 	call	1081c <strlen>
   15a08:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15a0c:	e0bffd17 	ldw	r2,-12(fp)
   15a10:	10c00217 	ldw	r3,8(r2)
   15a14:	e0bffe17 	ldw	r2,-8(fp)
   15a18:	10bfffc4 	addi	r2,r2,-1
   15a1c:	1885883a 	add	r2,r3,r2
   15a20:	10800003 	ldbu	r2,0(r2)
   15a24:	10803fcc 	andi	r2,r2,255
   15a28:	1080201c 	xori	r2,r2,128
   15a2c:	10bfe004 	addi	r2,r2,-128
   15a30:	10800bd8 	cmpnei	r2,r2,47
   15a34:	1000031e 	bne	r2,zero,15a44 <alt_find_file+0x74>
    {
      len -= 1;
   15a38:	e0bffe17 	ldw	r2,-8(fp)
   15a3c:	10bfffc4 	addi	r2,r2,-1
   15a40:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15a44:	e0bffe17 	ldw	r2,-8(fp)
   15a48:	e0ffff17 	ldw	r3,-4(fp)
   15a4c:	1885883a 	add	r2,r3,r2
   15a50:	10800003 	ldbu	r2,0(r2)
   15a54:	10803fcc 	andi	r2,r2,255
   15a58:	1080201c 	xori	r2,r2,128
   15a5c:	10bfe004 	addi	r2,r2,-128
   15a60:	10800be0 	cmpeqi	r2,r2,47
   15a64:	1000081e 	bne	r2,zero,15a88 <alt_find_file+0xb8>
   15a68:	e0bffe17 	ldw	r2,-8(fp)
   15a6c:	e0ffff17 	ldw	r3,-4(fp)
   15a70:	1885883a 	add	r2,r3,r2
   15a74:	10800003 	ldbu	r2,0(r2)
   15a78:	10803fcc 	andi	r2,r2,255
   15a7c:	1080201c 	xori	r2,r2,128
   15a80:	10bfe004 	addi	r2,r2,-128
   15a84:	10000a1e 	bne	r2,zero,15ab0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15a88:	e0bffd17 	ldw	r2,-12(fp)
   15a8c:	10c00217 	ldw	r3,8(r2)
   15a90:	e0bffe17 	ldw	r2,-8(fp)
   15a94:	1809883a 	mov	r4,r3
   15a98:	e17fff17 	ldw	r5,-4(fp)
   15a9c:	100d883a 	mov	r6,r2
   15aa0:	0015c040 	call	15c04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15aa4:	1000021e 	bne	r2,zero,15ab0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15aa8:	e0bffd17 	ldw	r2,-12(fp)
   15aac:	00000806 	br	15ad0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15ab0:	e0bffd17 	ldw	r2,-12(fp)
   15ab4:	10800017 	ldw	r2,0(r2)
   15ab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15abc:	e0fffd17 	ldw	r3,-12(fp)
   15ac0:	00800074 	movhi	r2,1
   15ac4:	109ea804 	addi	r2,r2,31392
   15ac8:	18bfcb1e 	bne	r3,r2,159f8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15acc:	0005883a 	mov	r2,zero
}
   15ad0:	e037883a 	mov	sp,fp
   15ad4:	dfc00117 	ldw	ra,4(sp)
   15ad8:	df000017 	ldw	fp,0(sp)
   15adc:	dec00204 	addi	sp,sp,8
   15ae0:	f800283a 	ret

00015ae4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15ae4:	defffa04 	addi	sp,sp,-24
   15ae8:	dfc00515 	stw	ra,20(sp)
   15aec:	df000415 	stw	fp,16(sp)
   15af0:	dc000315 	stw	r16,12(sp)
   15af4:	df000304 	addi	fp,sp,12
   15af8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15afc:	00bffa04 	movi	r2,-24
   15b00:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15b04:	e03ffd15 	stw	zero,-12(fp)
   15b08:	00002106 	br	15b90 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   15b0c:	04000074 	movhi	r16,1
   15b10:	841a2c04 	addi	r16,r16,26800
   15b14:	e0bffd17 	ldw	r2,-12(fp)
   15b18:	1009883a 	mov	r4,r2
   15b1c:	01400304 	movi	r5,12
   15b20:	00132a00 	call	132a0 <__mulsi3>
   15b24:	8085883a 	add	r2,r16,r2
   15b28:	10800017 	ldw	r2,0(r2)
   15b2c:	1000151e 	bne	r2,zero,15b84 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   15b30:	04000074 	movhi	r16,1
   15b34:	841a2c04 	addi	r16,r16,26800
   15b38:	e0bffd17 	ldw	r2,-12(fp)
   15b3c:	1009883a 	mov	r4,r2
   15b40:	01400304 	movi	r5,12
   15b44:	00132a00 	call	132a0 <__mulsi3>
   15b48:	8085883a 	add	r2,r16,r2
   15b4c:	e0ffff17 	ldw	r3,-4(fp)
   15b50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15b54:	00800074 	movhi	r2,1
   15b58:	109eac04 	addi	r2,r2,31408
   15b5c:	10c00017 	ldw	r3,0(r2)
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	1880040e 	bge	r3,r2,15b78 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   15b68:	00800074 	movhi	r2,1
   15b6c:	109eac04 	addi	r2,r2,31408
   15b70:	e0fffd17 	ldw	r3,-12(fp)
   15b74:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   15b78:	e0bffd17 	ldw	r2,-12(fp)
   15b7c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15b80:	00000606 	br	15b9c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15b84:	e0bffd17 	ldw	r2,-12(fp)
   15b88:	10800044 	addi	r2,r2,1
   15b8c:	e0bffd15 	stw	r2,-12(fp)
   15b90:	e0bffd17 	ldw	r2,-12(fp)
   15b94:	10800810 	cmplti	r2,r2,32
   15b98:	103fdc1e 	bne	r2,zero,15b0c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15b9c:	e0bffe17 	ldw	r2,-8(fp)
}
   15ba0:	e037883a 	mov	sp,fp
   15ba4:	dfc00217 	ldw	ra,8(sp)
   15ba8:	df000117 	ldw	fp,4(sp)
   15bac:	dc000017 	ldw	r16,0(sp)
   15bb0:	dec00304 	addi	sp,sp,12
   15bb4:	f800283a 	ret

00015bb8 <atexit>:
   15bb8:	200b883a 	mov	r5,r4
   15bbc:	000d883a 	mov	r6,zero
   15bc0:	0009883a 	mov	r4,zero
   15bc4:	000f883a 	mov	r7,zero
   15bc8:	0015c801 	jmpi	15c80 <__register_exitproc>

00015bcc <exit>:
   15bcc:	defffe04 	addi	sp,sp,-8
   15bd0:	000b883a 	mov	r5,zero
   15bd4:	dc000015 	stw	r16,0(sp)
   15bd8:	dfc00115 	stw	ra,4(sp)
   15bdc:	2021883a 	mov	r16,r4
   15be0:	0015db00 	call	15db0 <__call_exitprocs>
   15be4:	00800074 	movhi	r2,1
   15be8:	109ea404 	addi	r2,r2,31376
   15bec:	11000017 	ldw	r4,0(r2)
   15bf0:	20800f17 	ldw	r2,60(r4)
   15bf4:	10000126 	beq	r2,zero,15bfc <exit+0x30>
   15bf8:	103ee83a 	callr	r2
   15bfc:	8009883a 	mov	r4,r16
   15c00:	0015f500 	call	15f50 <_exit>

00015c04 <memcmp>:
   15c04:	01c000c4 	movi	r7,3
   15c08:	3980192e 	bgeu	r7,r6,15c70 <memcmp+0x6c>
   15c0c:	2904b03a 	or	r2,r5,r4
   15c10:	11c4703a 	and	r2,r2,r7
   15c14:	10000f26 	beq	r2,zero,15c54 <memcmp+0x50>
   15c18:	20c00003 	ldbu	r3,0(r4)
   15c1c:	28800003 	ldbu	r2,0(r5)
   15c20:	1880151e 	bne	r3,r2,15c78 <memcmp+0x74>
   15c24:	31bfff84 	addi	r6,r6,-2
   15c28:	01ffffc4 	movi	r7,-1
   15c2c:	00000406 	br	15c40 <memcmp+0x3c>
   15c30:	20c00003 	ldbu	r3,0(r4)
   15c34:	28800003 	ldbu	r2,0(r5)
   15c38:	31bfffc4 	addi	r6,r6,-1
   15c3c:	18800e1e 	bne	r3,r2,15c78 <memcmp+0x74>
   15c40:	21000044 	addi	r4,r4,1
   15c44:	29400044 	addi	r5,r5,1
   15c48:	31fff91e 	bne	r6,r7,15c30 <memcmp+0x2c>
   15c4c:	0005883a 	mov	r2,zero
   15c50:	f800283a 	ret
   15c54:	20c00017 	ldw	r3,0(r4)
   15c58:	28800017 	ldw	r2,0(r5)
   15c5c:	1880041e 	bne	r3,r2,15c70 <memcmp+0x6c>
   15c60:	31bfff04 	addi	r6,r6,-4
   15c64:	21000104 	addi	r4,r4,4
   15c68:	29400104 	addi	r5,r5,4
   15c6c:	39bff936 	bltu	r7,r6,15c54 <memcmp+0x50>
   15c70:	303fe91e 	bne	r6,zero,15c18 <memcmp+0x14>
   15c74:	003ff506 	br	15c4c <memcmp+0x48>
   15c78:	1885c83a 	sub	r2,r3,r2
   15c7c:	f800283a 	ret

00015c80 <__register_exitproc>:
   15c80:	defffa04 	addi	sp,sp,-24
   15c84:	00800074 	movhi	r2,1
   15c88:	109ea404 	addi	r2,r2,31376
   15c8c:	dc000315 	stw	r16,12(sp)
   15c90:	14000017 	ldw	r16,0(r2)
   15c94:	dc400415 	stw	r17,16(sp)
   15c98:	dfc00515 	stw	ra,20(sp)
   15c9c:	80805217 	ldw	r2,328(r16)
   15ca0:	2023883a 	mov	r17,r4
   15ca4:	10003e26 	beq	r2,zero,15da0 <__register_exitproc+0x120>
   15ca8:	10c00117 	ldw	r3,4(r2)
   15cac:	020007c4 	movi	r8,31
   15cb0:	40c0180e 	bge	r8,r3,15d14 <__register_exitproc+0x94>
   15cb4:	00800034 	movhi	r2,0
   15cb8:	10800004 	addi	r2,r2,0
   15cbc:	1000061e 	bne	r2,zero,15cd8 <__register_exitproc+0x58>
   15cc0:	00bfffc4 	movi	r2,-1
   15cc4:	dfc00517 	ldw	ra,20(sp)
   15cc8:	dc400417 	ldw	r17,16(sp)
   15ccc:	dc000317 	ldw	r16,12(sp)
   15cd0:	dec00604 	addi	sp,sp,24
   15cd4:	f800283a 	ret
   15cd8:	01006404 	movi	r4,400
   15cdc:	d9400015 	stw	r5,0(sp)
   15ce0:	d9800115 	stw	r6,4(sp)
   15ce4:	d9c00215 	stw	r7,8(sp)
   15ce8:	00000000 	call	0 <__alt_mem_onchip_mem_1b-0x10000>
   15cec:	d9400017 	ldw	r5,0(sp)
   15cf0:	d9800117 	ldw	r6,4(sp)
   15cf4:	d9c00217 	ldw	r7,8(sp)
   15cf8:	103ff126 	beq	r2,zero,15cc0 <__register_exitproc+0x40>
   15cfc:	80c05217 	ldw	r3,328(r16)
   15d00:	10000115 	stw	zero,4(r2)
   15d04:	10c00015 	stw	r3,0(r2)
   15d08:	80805215 	stw	r2,328(r16)
   15d0c:	10006215 	stw	zero,392(r2)
   15d10:	10006315 	stw	zero,396(r2)
   15d14:	10c00117 	ldw	r3,4(r2)
   15d18:	88000d1e 	bne	r17,zero,15d50 <__register_exitproc+0xd0>
   15d1c:	19000084 	addi	r4,r3,2
   15d20:	2109883a 	add	r4,r4,r4
   15d24:	18c00044 	addi	r3,r3,1
   15d28:	2109883a 	add	r4,r4,r4
   15d2c:	1109883a 	add	r4,r2,r4
   15d30:	10c00115 	stw	r3,4(r2)
   15d34:	0005883a 	mov	r2,zero
   15d38:	21400015 	stw	r5,0(r4)
   15d3c:	dfc00517 	ldw	ra,20(sp)
   15d40:	dc400417 	ldw	r17,16(sp)
   15d44:	dc000317 	ldw	r16,12(sp)
   15d48:	dec00604 	addi	sp,sp,24
   15d4c:	f800283a 	ret
   15d50:	02400044 	movi	r9,1
   15d54:	12806217 	ldw	r10,392(r2)
   15d58:	48d2983a 	sll	r9,r9,r3
   15d5c:	19000804 	addi	r4,r3,32
   15d60:	18d1883a 	add	r8,r3,r3
   15d64:	2109883a 	add	r4,r4,r4
   15d68:	4211883a 	add	r8,r8,r8
   15d6c:	2109883a 	add	r4,r4,r4
   15d70:	1109883a 	add	r4,r2,r4
   15d74:	1211883a 	add	r8,r2,r8
   15d78:	5254b03a 	or	r10,r10,r9
   15d7c:	21c02215 	stw	r7,136(r4)
   15d80:	41802215 	stw	r6,136(r8)
   15d84:	12806215 	stw	r10,392(r2)
   15d88:	01000084 	movi	r4,2
   15d8c:	893fe31e 	bne	r17,r4,15d1c <__register_exitproc+0x9c>
   15d90:	11006317 	ldw	r4,396(r2)
   15d94:	2252b03a 	or	r9,r4,r9
   15d98:	12406315 	stw	r9,396(r2)
   15d9c:	003fdf06 	br	15d1c <__register_exitproc+0x9c>
   15da0:	008000b4 	movhi	r2,2
   15da4:	10a5b804 	addi	r2,r2,-26912
   15da8:	80805215 	stw	r2,328(r16)
   15dac:	003fbe06 	br	15ca8 <__register_exitproc+0x28>

00015db0 <__call_exitprocs>:
   15db0:	00800074 	movhi	r2,1
   15db4:	109ea404 	addi	r2,r2,31376
   15db8:	10800017 	ldw	r2,0(r2)
   15dbc:	defff304 	addi	sp,sp,-52
   15dc0:	df000b15 	stw	fp,44(sp)
   15dc4:	d8800015 	stw	r2,0(sp)
   15dc8:	10805204 	addi	r2,r2,328
   15dcc:	dd400815 	stw	r21,32(sp)
   15dd0:	dfc00c15 	stw	ra,48(sp)
   15dd4:	ddc00a15 	stw	r23,40(sp)
   15dd8:	dd800915 	stw	r22,36(sp)
   15ddc:	dd000715 	stw	r20,28(sp)
   15de0:	dcc00615 	stw	r19,24(sp)
   15de4:	dc800515 	stw	r18,20(sp)
   15de8:	dc400415 	stw	r17,16(sp)
   15dec:	dc000315 	stw	r16,12(sp)
   15df0:	d9000115 	stw	r4,4(sp)
   15df4:	2839883a 	mov	fp,r5
   15df8:	d8800215 	stw	r2,8(sp)
   15dfc:	057fffc4 	movi	r21,-1
   15e00:	d8800017 	ldw	r2,0(sp)
   15e04:	ddc00217 	ldw	r23,8(sp)
   15e08:	14805217 	ldw	r18,328(r2)
   15e0c:	90001726 	beq	r18,zero,15e6c <__call_exitprocs+0xbc>
   15e10:	94400117 	ldw	r17,4(r18)
   15e14:	8c3fffc4 	addi	r16,r17,-1
   15e18:	80001116 	blt	r16,zero,15e60 <__call_exitprocs+0xb0>
   15e1c:	8c400044 	addi	r17,r17,1
   15e20:	8427883a 	add	r19,r16,r16
   15e24:	8c63883a 	add	r17,r17,r17
   15e28:	95802204 	addi	r22,r18,136
   15e2c:	9ce7883a 	add	r19,r19,r19
   15e30:	8c63883a 	add	r17,r17,r17
   15e34:	b4e7883a 	add	r19,r22,r19
   15e38:	9463883a 	add	r17,r18,r17
   15e3c:	e0001726 	beq	fp,zero,15e9c <__call_exitprocs+0xec>
   15e40:	8c87c83a 	sub	r3,r17,r18
   15e44:	b0c7883a 	add	r3,r22,r3
   15e48:	18c01e17 	ldw	r3,120(r3)
   15e4c:	1f001326 	beq	r3,fp,15e9c <__call_exitprocs+0xec>
   15e50:	843fffc4 	addi	r16,r16,-1
   15e54:	9cffff04 	addi	r19,r19,-4
   15e58:	8c7fff04 	addi	r17,r17,-4
   15e5c:	857ff71e 	bne	r16,r21,15e3c <__call_exitprocs+0x8c>
   15e60:	00800034 	movhi	r2,0
   15e64:	10800004 	addi	r2,r2,0
   15e68:	10002a1e 	bne	r2,zero,15f14 <__call_exitprocs+0x164>
   15e6c:	dfc00c17 	ldw	ra,48(sp)
   15e70:	df000b17 	ldw	fp,44(sp)
   15e74:	ddc00a17 	ldw	r23,40(sp)
   15e78:	dd800917 	ldw	r22,36(sp)
   15e7c:	dd400817 	ldw	r21,32(sp)
   15e80:	dd000717 	ldw	r20,28(sp)
   15e84:	dcc00617 	ldw	r19,24(sp)
   15e88:	dc800517 	ldw	r18,20(sp)
   15e8c:	dc400417 	ldw	r17,16(sp)
   15e90:	dc000317 	ldw	r16,12(sp)
   15e94:	dec00d04 	addi	sp,sp,52
   15e98:	f800283a 	ret
   15e9c:	91000117 	ldw	r4,4(r18)
   15ea0:	88c00017 	ldw	r3,0(r17)
   15ea4:	213fffc4 	addi	r4,r4,-1
   15ea8:	24001526 	beq	r4,r16,15f00 <__call_exitprocs+0x150>
   15eac:	88000015 	stw	zero,0(r17)
   15eb0:	183fe726 	beq	r3,zero,15e50 <__call_exitprocs+0xa0>
   15eb4:	00800044 	movi	r2,1
   15eb8:	1408983a 	sll	r4,r2,r16
   15ebc:	91406217 	ldw	r5,392(r18)
   15ec0:	95000117 	ldw	r20,4(r18)
   15ec4:	214a703a 	and	r5,r4,r5
   15ec8:	28000b26 	beq	r5,zero,15ef8 <__call_exitprocs+0x148>
   15ecc:	91406317 	ldw	r5,396(r18)
   15ed0:	2148703a 	and	r4,r4,r5
   15ed4:	20000c1e 	bne	r4,zero,15f08 <__call_exitprocs+0x158>
   15ed8:	99400017 	ldw	r5,0(r19)
   15edc:	d9000117 	ldw	r4,4(sp)
   15ee0:	183ee83a 	callr	r3
   15ee4:	90c00117 	ldw	r3,4(r18)
   15ee8:	1d3fc51e 	bne	r3,r20,15e00 <__call_exitprocs+0x50>
   15eec:	b8c00017 	ldw	r3,0(r23)
   15ef0:	1cbfd726 	beq	r3,r18,15e50 <__call_exitprocs+0xa0>
   15ef4:	003fc206 	br	15e00 <__call_exitprocs+0x50>
   15ef8:	183ee83a 	callr	r3
   15efc:	003ff906 	br	15ee4 <__call_exitprocs+0x134>
   15f00:	94000115 	stw	r16,4(r18)
   15f04:	003fea06 	br	15eb0 <__call_exitprocs+0x100>
   15f08:	99000017 	ldw	r4,0(r19)
   15f0c:	183ee83a 	callr	r3
   15f10:	003ff406 	br	15ee4 <__call_exitprocs+0x134>
   15f14:	90c00117 	ldw	r3,4(r18)
   15f18:	1800071e 	bne	r3,zero,15f38 <__call_exitprocs+0x188>
   15f1c:	90c00017 	ldw	r3,0(r18)
   15f20:	18000926 	beq	r3,zero,15f48 <__call_exitprocs+0x198>
   15f24:	9009883a 	mov	r4,r18
   15f28:	b8c00015 	stw	r3,0(r23)
   15f2c:	00000000 	call	0 <__alt_mem_onchip_mem_1b-0x10000>
   15f30:	bc800017 	ldw	r18,0(r23)
   15f34:	003fb506 	br	15e0c <__call_exitprocs+0x5c>
   15f38:	90c00017 	ldw	r3,0(r18)
   15f3c:	902f883a 	mov	r23,r18
   15f40:	1825883a 	mov	r18,r3
   15f44:	003fb106 	br	15e0c <__call_exitprocs+0x5c>
   15f48:	0007883a 	mov	r3,zero
   15f4c:	003ffb06 	br	15f3c <__call_exitprocs+0x18c>

00015f50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15f50:	defffc04 	addi	sp,sp,-16
   15f54:	df000315 	stw	fp,12(sp)
   15f58:	df000304 	addi	fp,sp,12
   15f5c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15f60:	0001883a 	nop
   15f64:	e0bfff17 	ldw	r2,-4(fp)
   15f68:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   15f6c:	e0bffd17 	ldw	r2,-12(fp)
   15f70:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15f74:	e0bffe17 	ldw	r2,-8(fp)
   15f78:	10000226 	beq	r2,zero,15f84 <_exit+0x34>
    ALT_SIM_FAIL();
   15f7c:	002af070 	cmpltui	zero,zero,43969
   15f80:	00000106 	br	15f88 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   15f84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15f88:	003fff06 	br	15f88 <_exit+0x38>

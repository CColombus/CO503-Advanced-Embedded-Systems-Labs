
1a_r.elf:     file format elf32-littlenios2
1a_r.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000147b0 memsz 0x000147b0 flags r-x
    LOAD off    0x000157d0 vaddr 0x000147d0 paddr 0x0001633c align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00017ea8 vaddr 0x00017ea8 paddr 0x00017ea8 align 2**12
         filesz 0x00000000 memsz 0x000003f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013e60  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b8  00014018  00014018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  000147d0  0001633c  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f4  00017ea8  00017ea8  00017ea8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001733c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000012f8  00000000  00000000  00017360  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00037157  00000000  00000000  00018658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d822  00000000  00000000  0004f7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000f7e0  00000000  00000000  0005cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000024a0  00000000  00000000  0006c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000403b  00000000  00000000  0006ec54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000196dd  00000000  00000000  00072c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0008c36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0008c380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000911da  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000911dd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000911e0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000911e1  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000911e2  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000911e6  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000911ea  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000911ee  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000911f7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00091200  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00091209  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  00091212  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001c11da  00000000  00000000  0009122e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00014018 l    d  .rodata	00000000 .rodata
000147d0 l    d  .rwdata	00000000 .rwdata
00017ea8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../1a_r_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 queue_wrapper.c
00000000 l    df *ABS*	00000000 readYUV.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001894 l     F .text	00000008 __fp_lock
0000189c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014848 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00003710 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003c74 l     F .text	00000034 __sprint_r
000141ee l     O .rodata	00000010 blanks.3515
000141fe l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vfscanf.c
00014216 l     O .rodata	00000022 basefix.3427
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00014339 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00007514 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
000144dc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00014624 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0001505c l     O .rwdata	00000014 fpi.2015
00014640 l     O .rodata	00000028 tinytens
00015070 l     O .rwdata	00000014 fpinan.2051
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000daac l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000f560 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001035c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00010c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010db0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010ddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010edc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010fd0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000110bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00011298 l     F .text	00000050 alt_get_errno
000112e8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00011530 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000162e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000117a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000118e4 l     F .text	00000038 alt_dev_reg
0001522c l     O .rwdata	00001060 jtag_uart
0001628c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000120e8 l     F .text	00000204 altera_avalon_jtag_uart_irq
000122ec l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012928 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00016324 l     O .rwdata	00000004 hcinfo.2311
00016318 l     O .rwdata	00000004 hcinfo.2324
0001630c l     O .rwdata	00000004 hcinfo.2333
00016300 l     O .rwdata	00000004 hcinfo.2346
000162f4 l     O .rwdata	00000004 hcinfo.2359
000162e8 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000131a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013930 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000365c g     F .text	0000001c putchar
0000a714 g     F .text	00000074 _mprec_log10
0000a804 g     F .text	00000084 __any_on
000092e8 g     F .text	00000064 _isatty_r
0001450c g     O .rodata	00000028 __mprec_tinytens
000111e0 g     F .text	00000078 alt_main
00003b54 g     F .text	00000094 strcpy
00010b24 g     F .text	00000044 __ashldi3
00003678 g     F .text	00000084 _puts_r
0001800c g     O .bss	00000100 alt_irq
00014824 g     O .rwdata	0000000c q1c
00009460 g     F .text	0000006c _lseek_r
00000d50 g     F .text	00000044 SEND6
00011c54 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0001633c g       *ABS*	00000000 __flash_rwdata_start
00008d6c g     F .text	00000098 __sflags
0000fe00 g     F .text	0000005c __eqdf2
0001829c g       *ABS*	00000000 __alt_heap_start
00003618 g     F .text	0000003c printf
00003a58 g     F .text	0000005c __sseek
00001938 g     F .text	0000010c __sinit
0000d888 g     F .text	0000013c __swbuf_r
00009384 g     F .text	0000009c _setlocale_r
000018b0 g     F .text	00000078 __sfmoreglue
0000d86c g     F .text	0000001c ungetc
00014800 g     O .rwdata	0000000c q5
00011278 g     F .text	00000020 __malloc_unlock
00012a24 g     F .text	0000016c alt_hostfs_open
0000b334 g     F .text	00001548 _strtod_r
000096ac g     F .text	0000018c memmove
000119d4 g     F .text	00000098 altera_avalon_fifo_init
00001928 g     F .text	00000010 _cleanup
00011d04 g     F .text	00000058 altera_avalon_fifo_write_fifo
00009838 g     F .text	000000a8 _Balloc
00000ac0 g     F .text	00000030 jemalloc
0000feb8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00011e9c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000c84 g     F .text	00000044 SEND3
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002848 g     F .text	00000068 _fstat_r
00017eb0 g     O .bss	00000004 errno
0000723c g     F .text	00000024 __svfscanf
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000106bc g     F .text	0000002c __make_fp
00017ed0 g     O .bss	00000004 alt_argv
0001e2b4 g       *ABS*	00000000 _gp
00011ba0 g     F .text	0000005c altera_avalon_fifo_clear_event
00002354 g     F .text	0000003c fscanf
000150ac g     O .rwdata	00000180 alt_fd_list
00012d6c g     F .text	000000b8 alt_hostfs_seek
00003654 g     F .text	00000008 _putchar_r
00013350 g     F .text	00000090 alt_find_dev
00003364 g     F .text	00000140 memcpy
0000e3c4 g     F .text	0000028c __hexnan
000018a4 g     F .text	0000000c _cleanup_r
00010038 g     F .text	000000d4 __floatsidf
000134f4 g     F .text	00000084 alt_fs_reg
00013a10 g     F .text	00000078 alt_io_redirect
0000ff80 g     F .text	0000005c __ltdf2
00014018 g       *ABS*	00000000 __DTOR_END__
000036fc g     F .text	00000014 puts
00009530 g     F .text	00000040 mbrtowc
000147dc g     O .rwdata	0000000c q2
000071f0 g     F .text	0000004c _vfscanf_r
0000a670 g     F .text	000000a4 __ratio
000124ec g     F .text	00000218 altera_avalon_jtag_uart_read
00002bb8 g     F .text	00000014 malloc
000035ec g     F .text	0000002c _printf_r
0001047c g     F .text	00000008 __udivsi3
00010f2c g     F .text	000000a4 isatty
0000934c g     F .text	00000038 iswspace
0001455c g     O .rodata	000000c8 __mprec_tens
00009420 g     F .text	0000000c __locale_charset
0000e760 g     F .text	00000084 __fixunsdfsi
00017ebc g     O .bss	00000004 __malloc_top_pad
0000d228 g     F .text	00000024 strtoul
000162c8 g     O .rwdata	00000004 __mb_cur_max
0000942c g     F .text	0000000c _localeconv_r
0000d24c g     F .text	00000394 _strtoull_r
00009c68 g     F .text	0000003c __i2b
00008e04 g     F .text	000004e4 __sfvwrite_r
00003918 g     F .text	00000064 _sbrk_r
00000d94 g     F .text	00000770 read_444_format
00012bfc g     F .text	000000b8 alt_hostfs_read
0000aa34 g     F .text	0000006c _read_r
00015050 g     O .rwdata	0000000c __lc_ctype
000162dc g     O .rwdata	00000004 alt_max_fd
0001090c g     F .text	00000104 __unpack_d
0000152c g     F .text	0000013c _fclose_r
00001864 g     F .text	00000030 fflush
00017eb8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000f8b4 g     F .text	00000054 __adddf3
0000a3e4 g     F .text	00000148 __b2d
0000ee34 g     F .text	00000628 __umoddi3
0001110c g     F .text	000000d4 lseek
000162b4 g     O .rwdata	00000004 _global_impure_ptr
0000aaa0 g     F .text	000005fc _realloc_r
0001829c g       *ABS*	00000000 __bss_end
00013840 g     F .text	000000f0 alt_iic_isr_register
00013b20 g     F .text	00000104 alt_tick
00017f0c g     O .bss	00000100 __hexdig
0000e7e4 g     F .text	00000650 __udivdi3
00014534 g     O .rodata	00000028 __mprec_bigtens
00009a4c g     F .text	00000104 __s2b
00010240 g     F .text	0000011c __floatunsidf
0000a184 g     F .text	00000058 __mcmp
000162c4 g     O .rwdata	00000004 __ctype_ptr
00001b50 g     F .text	00000018 __fp_lock_all
000137f4 g     F .text	0000004c alt_ic_irq_enabled
00013a88 g     F .text	00000098 alt_alarm_stop
0000cc30 g     F .text	00000024 strtol
00017ed8 g     O .bss	00000004 alt_irq_active
00012b90 g     F .text	0000006c alt_hostfs_close
000000ec g     F .exceptions	000000cc alt_irq_handler
00015084 g     O .rwdata	00000028 alt_dev_null
00010538 g     F .text	000000c8 __unpack_f
0001318c g     F .text	0000001c alt_dcache_flush_all
00009b50 g     F .text	00000068 __hi0bits
0001010c g     F .text	000000d4 __fixdfsi
0000c87c g     F .text	0000001c strtod
00011bfc g     F .text	00000058 altera_avalon_fifo_write_ienable
0001633c g       *ABS*	00000000 __ram_rwdata_end
00011b10 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000162d4 g     O .rwdata	00000008 alt_dev_list
000117f4 g     F .text	000000f0 write
0000a888 g     F .text	000000bc _putc_r
0000f4b0 g     F .text	0000005c __gtsf2
000147d0 g       *ABS*	00000000 __ram_rodata_end
00010e2c g     F .text	000000b0 fstat
00010ae0 g     F .text	00000044 __lshrdi3
0000ffdc g     F .text	0000005c __ledf2
00017eac g     O .bss	00000004 INIT_USAGE_DEQ
00003abc g     F .text	00000098 strcat
00009efc g     F .text	0000012c __pow5mult
00017ec8 g     O .bss	00000004 __nlocale_changed
00010484 g     F .text	00000008 __umodsi3
0001829c g       *ABS*	00000000 end
00000c40 g     F .text	00000044 SEND2
00010b68 g     F .text	0000012c __pack_f
00002824 g     F .text	00000024 fseek
00012028 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000bfc g     F .text	00000044 SEND1
00011b3c g     F .text	0000003c altera_avalon_fifo_read_event
00014018 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0001299c g     F .text	00000088 alt_avalon_timer_sc_init
0001048c g     F .text	000000ac __clzsi2
00012704 g     F .text	00000224 altera_avalon_jtag_uart_write
00001b40 g     F .text	00000004 __sfp_lock_acquire
00011dc8 g     F .text	0000004c altera_avalon_fifo_read_fifo
000095b4 g     F .text	000000f8 memchr
00003ca8 g     F .text	00001e7c ___vfprintf_internal_r
0000b1cc g     F .text	00000058 _sprintf_r
00002084 g     F .text	000002d0 _free_r
00013e3c g     F .text	000001a0 __call_exitprocs
00017ec4 g     O .bss	00000004 __mlocale_changed
000162bc g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00017edc g     O .bss	00000004 _alt_tick_rate
0000cc54 g     F .text	00000330 _strtoll_r
00000468 g     F .text	0000023c encode_image
0000a028 g     F .text	0000015c __lshift
00000af0 g     F .text	00000088 enqueueINT32
00017ee0 g     O .bss	00000004 _alt_nticks
00011580 g     F .text	000000f4 read
00011950 g     F .text	00000084 alt_sys_init
00003580 g     F .text	0000006c _open_r
00013d0c g     F .text	00000130 __register_exitproc
00014830 g     O .rwdata	0000000c q1d
000147e8 g     O .rwdata	0000000c q3
00009ca4 g     F .text	00000258 __multiply
00012390 g     F .text	00000068 altera_avalon_jtag_uart_close
00001504 g     F .text	00000028 __mulsi3
000147d0 g       *ABS*	00000000 __ram_rwdata_start
00014018 g       *ABS*	00000000 __ram_rodata_start
00017ee4 g     O .bss	00000028 __malloc_current_mallinfo
0000f45c g     F .text	00000054 __eqsf2
0000a52c g     F .text	00000144 __d2b
000147d0 g     O .rwdata	0000000c q1
00000d0c g     F .text	00000044 SEND5
00011ec4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000cf84 g     F .text	000002a4 _strtoul_r
00013578 g     F .text	000000d4 alt_get_fd
00010a10 g     F .text	000000d0 __fpcmp_parts_d
000074b0 g     F .text	00000064 _close_r
00013c90 g     F .text	0000007c memcmp
00011f84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001829c g       *ABS*	00000000 __alt_stack_base
00011fd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000733c g     F .text	00000174 __swsetup_r
00011a6c g     F .text	0000003c altera_avalon_fifo_read_status
0000fc4c g     F .text	000001b4 __divdf3
00001a44 g     F .text	000000fc __sfp
0000a788 g     F .text	0000007c __copybits
00014c48 g     O .rwdata	00000408 __malloc_av_
00001b4c g     F .text	00000004 __sinit_lock_release
0000f968 g     F .text	000002e4 __muldf3
0000397c g     F .text	00000054 __sread
00001f08 g     F .text	00000040 fread
00011e70 g     F .text	0000002c altera_avalon_fifo_read_other_info
000133e0 g     F .text	00000114 alt_find_file
000131f8 g     F .text	000000a0 alt_dev_llist_insert
00011258 g     F .text	00000020 __malloc_lock
000116f4 g     F .text	000000b0 sbrk
0000167c g     F .text	000001e8 _fflush_r
0000d9e0 g     F .text	000000cc _calloc_r
00001cb0 g     F .text	0000001c fopen
00017ea8 g       *ABS*	00000000 __bss_start
00002390 g     F .text	00000020 _fscanf_r
000034a4 g     F .text	000000dc memset
000006a4 g     F .text	0000041c main
00017ed4 g     O .bss	00000004 alt_envp
00017eb4 g     O .bss	00000004 __malloc_max_total_mem
00011f24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011b78 g     F .text	00000028 altera_avalon_fifo_read_level
0000d9c4 g     F .text	0000001c __swbuf
0000f50c g     F .text	00000054 __ltsf2
00001ccc g     F .text	0000023c _fread_r
00003ab4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00001668 g     F .text	00000014 fclose
0000c9b8 g     F .text	00000278 _strtol_r
000101e0 g     F .text	00000060 __truncdfsf2
0001810c g     O .bss	00000190 _atexit0
00007750 g     F .text	0000161c _dtoa_r
00002be0 g     F .text	00000784 _malloc_r
000162e0 g     O .rwdata	00000004 alt_errno
0000d5e0 g     F .text	000000f0 __submore
00014818 g     O .rwdata	0000000c q1b
000028b0 g     F .text	000000a8 _fwalk
00009570 g     F .text	00000044 _mbtowc_r
0000a944 g     F .text	000000f0 putc
000103d0 g     F .text	00000050 __divsi3
00014684 g     O .rodata	00000014 __thenan_df
00001f48 g     F .text	0000013c _malloc_trim_r
00014018 g       *ABS*	00000000 __CTOR_END__
0000b290 g     F .text	000000a4 strcmp
00014018 g       *ABS*	00000000 __flash_rodata_start
00014018 g       *ABS*	00000000 __DTOR_LIST__
0000fe5c g     F .text	0000005c __nedf2
0001191c g     F .text	00000034 alt_irq_init
00011674 g     F .text	00000080 alt_release_fd
0000b224 g     F .text	0000006c sprintf
00014698 g     O .rodata	00000100 __clz_tab
00017ec0 g     O .bss	00000004 _PathLocale
0000c898 g     F .text	00000120 strtof
00013c44 g     F .text	00000014 atexit
000072d0 g     F .text	0000006c _write_r
0001480c g     O .rwdata	0000000c q6
00009438 g     F .text	0000001c setlocale
00017ea8 g     O .bss	00000004 INIT_USAGE_ENQ
0000b1c4 g     F .text	00000008 nanf
000162b8 g     O .rwdata	00000004 _impure_ptr
00017ecc g     O .bss	00000004 alt_argc
000094cc g     F .text	00000064 _mbrtowc_r
000132f4 g     F .text	0000005c _do_dtors
000023b0 g     F .text	00000474 _fseek_r
0000372c g     F .text	000001ec __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000a384 g     F .text	00000060 __ulp
0000b09c g     F .text	00000038 __isinfd
00001b68 g     F .text	00000018 __fp_unlock_all
0001483c g     O .rwdata	0000000c q1e
000162cc g     O .rwdata	00000008 alt_fs_list
00012cb4 g     F .text	000000b8 alt_hostfs_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009454 g     F .text	0000000c localeconv
00011e14 g     F .text	0000005c altera_avalon_fifo_write_other_info
00013668 g     F .text	00000050 alt_ic_isr_register
0000dbbc g     F .text	00000090 __hexdig_init
0001633c g       *ABS*	00000000 _edata
0001829c g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00007260 g     F .text	00000070 vfscanf
000123f8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00013754 g     F .text	000000a0 alt_ic_irq_disable
000039d0 g     F .text	00000088 __swrite
000162c0 g     O .rwdata	00000004 __malloc_trim_threshold
00013c24 g     F .text	00000020 altera_nios2_qsys_irq_init
00013c58 g     F .text	00000038 exit
00002958 g     F .text	000000b8 _fwalk_reent
0000a1dc g     F .text	000001a8 __mdiff
00010420 g     F .text	0000005c __modsi3
00011aa8 g     F .text	0000003c altera_avalon_fifo_read_ienable
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001b44 g     F .text	00000004 __sfp_lock_release
0000b100 g     F .text	000000c4 __sccl
00014238 g     O .rodata	00000101 _ctype_
00010600 g     F .text	000000bc __fpcmp_parts_f
00001b80 g     F .text	00000130 _fopen_r
00013fdc g     F .text	0000003c _exit
0000b0d4 g     F .text	0000002c __isnand
0001304c g     F .text	00000140 alt_alarm_start
0000e650 g     F .text	00000110 __muldi3
00011ae4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00002a10 g     F .text	000001a8 __smakebuf_r
000147f4 g     O .rwdata	0000000c q4
00000cc8 g     F .text	00000044 SEND4
00003be8 g     F .text	0000008c strlen
000113d8 g     F .text	00000158 open
00011d5c g     F .text	0000006c altera_avalon_read_fifo
0000ff1c g     F .text	00000064 __gedf2
000001f4 g     F .text	00000274 initialization
0000dc4c g     F .text	00000778 __gethex
00000b78 g     F .text	00000084 dequeueINT32
0001364c g     F .text	0000001c alt_icache_flush_all
00016330 g     O .rwdata	00000004 alt_priority_mask
000136b8 g     F .text	0000009c alt_ic_irq_enable
00005b24 g     F .text	00000024 __vfprintf_internal
0000f908 g     F .text	00000060 __subdf3
00009bb8 g     F .text	000000b0 __lo0bits
00005b48 g     F .text	000016a8 __svfscanf_r
00011cac g     F .text	00000058 altera_avalon_fifo_write_almostempty
00016334 g     O .rwdata	00000008 alt_alarm_list
0000d6d0 g     F .text	0000019c _ungetc_r
00013298 g     F .text	0000005c _do_ctors
00010ce4 g     F .text	000000cc close
0001103c g     F .text	00000080 alt_load
000106e8 g     F .text	00000224 __pack_d
00002bcc g     F .text	00000014 free
00001b48 g     F .text	00000004 __sinit_lock_acquire
00009908 g     F .text	00000144 __multadd
000098e0 g     F .text	00000028 _Bfree
00012e24 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c000b4 	movhi	r3,2
 130:	18e00304 	addi	r3,r3,-32756
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	010000b4 	movhi	r4,2
 148:	21200304 	addi	r4,r4,-32756
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b8ad14 	ori	gp,gp,58036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	109faa14 	ori	r2,r2,32424

    movhi r3, %hi(__bss_end)
     1d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d4:	18e0a714 	ori	r3,r3,33436

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	001103c0 	call	1103c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00111e00 	call	111e0 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <initialization>:
#include "readYUV.h"

#include "queue_wrapper.h"

void initialization(JPEG_ENCODER_STRUCTURE *jpeg, UINT32 image_format, UINT32 image_width, UINT32 image_height)
{
     1f4:	defff704 	addi	sp,sp,-36
     1f8:	dfc00815 	stw	ra,32(sp)
     1fc:	df000715 	stw	fp,28(sp)
     200:	dc000615 	stw	r16,24(sp)
     204:	df000604 	addi	fp,sp,24
     208:	e13ffc15 	stw	r4,-16(fp)
     20c:	e17ffd15 	stw	r5,-12(fp)
     210:	e1bffe15 	stw	r6,-8(fp)
     214:	e1ffff15 	stw	r7,-4(fp)
	UINT16 mcu_width, mcu_height, bytes_per_pixel;

	jpeg->mcu_width = mcu_width = 8;
     218:	00800204 	movi	r2,8
     21c:	e0bffa0d 	sth	r2,-24(fp)
     220:	e0bffc17 	ldw	r2,-16(fp)
     224:	e0fffa0b 	ldhu	r3,-24(fp)
     228:	10c0000d 	sth	r3,0(r2)
	jpeg->mcu_height = mcu_height = 8;
     22c:	00800204 	movi	r2,8
     230:	e0bffa8d 	sth	r2,-22(fp)
     234:	e0bffc17 	ldw	r2,-16(fp)
     238:	e0fffa8b 	ldhu	r3,-22(fp)
     23c:	10c0008d 	sth	r3,2(r2)

	jpeg->horizontal_mcus = (UINT16)((image_width + mcu_width - 1) >> 3);
     240:	e0fffa0b 	ldhu	r3,-24(fp)
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	1885883a 	add	r2,r3,r2
     24c:	10bfffc4 	addi	r2,r2,-1
     250:	1004d0fa 	srli	r2,r2,3
     254:	1007883a 	mov	r3,r2
     258:	e0bffc17 	ldw	r2,-16(fp)
     25c:	10c0010d 	sth	r3,4(r2)
	jpeg->vertical_mcus = (UINT16)((image_height + mcu_height - 1) >> 3);
     260:	e0fffa8b 	ldhu	r3,-22(fp)
     264:	e0bfff17 	ldw	r2,-4(fp)
     268:	1885883a 	add	r2,r3,r2
     26c:	10bfffc4 	addi	r2,r2,-1
     270:	1004d0fa 	srli	r2,r2,3
     274:	1007883a 	mov	r3,r2
     278:	e0bffc17 	ldw	r2,-16(fp)
     27c:	10c0018d 	sth	r3,6(r2)

	bytes_per_pixel = 3;
     280:	008000c4 	movi	r2,3
     284:	e0bffb0d 	sth	r2,-20(fp)
	// read_format = read_444_format;

	jpeg->rows_in_bottom_mcus = (UINT16)(image_height - (jpeg->vertical_mcus - 1) * mcu_height);
     288:	e0bfff17 	ldw	r2,-4(fp)
     28c:	1021883a 	mov	r16,r2
     290:	e0bffc17 	ldw	r2,-16(fp)
     294:	1080018b 	ldhu	r2,6(r2)
     298:	10bfffcc 	andi	r2,r2,65535
     29c:	10bfffc4 	addi	r2,r2,-1
     2a0:	1007883a 	mov	r3,r2
     2a4:	e0bffa8b 	ldhu	r2,-22(fp)
     2a8:	1809883a 	mov	r4,r3
     2ac:	100b883a 	mov	r5,r2
     2b0:	00015040 	call	1504 <__mulsi3>
     2b4:	8085c83a 	sub	r2,r16,r2
     2b8:	1007883a 	mov	r3,r2
     2bc:	e0bffc17 	ldw	r2,-16(fp)
     2c0:	10c0028d 	sth	r3,10(r2)
	jpeg->cols_in_right_mcus = (UINT16)(image_width - (jpeg->horizontal_mcus - 1) * mcu_width);
     2c4:	e0bffe17 	ldw	r2,-8(fp)
     2c8:	1021883a 	mov	r16,r2
     2cc:	e0bffc17 	ldw	r2,-16(fp)
     2d0:	1080010b 	ldhu	r2,4(r2)
     2d4:	10bfffcc 	andi	r2,r2,65535
     2d8:	10bfffc4 	addi	r2,r2,-1
     2dc:	1007883a 	mov	r3,r2
     2e0:	e0bffa0b 	ldhu	r2,-24(fp)
     2e4:	1809883a 	mov	r4,r3
     2e8:	100b883a 	mov	r5,r2
     2ec:	00015040 	call	1504 <__mulsi3>
     2f0:	8085c83a 	sub	r2,r16,r2
     2f4:	1007883a 	mov	r3,r2
     2f8:	e0bffc17 	ldw	r2,-16(fp)
     2fc:	10c0020d 	sth	r3,8(r2)

	jpeg->length_minus_mcu_width = (UINT16)((image_width - mcu_width) * bytes_per_pixel);
     300:	e0bffa0b 	ldhu	r2,-24(fp)
     304:	e0fffe17 	ldw	r3,-8(fp)
     308:	1885c83a 	sub	r2,r3,r2
     30c:	1007883a 	mov	r3,r2
     310:	e0bffb0b 	ldhu	r2,-20(fp)
     314:	1809883a 	mov	r4,r3
     318:	100b883a 	mov	r5,r2
     31c:	00015040 	call	1504 <__mulsi3>
     320:	1007883a 	mov	r3,r2
     324:	e0bffc17 	ldw	r2,-16(fp)
     328:	10c0040d 	sth	r3,16(r2)
	jpeg->length_minus_width = (UINT16)((image_width - jpeg->cols_in_right_mcus) * bytes_per_pixel);
     32c:	e0bffc17 	ldw	r2,-16(fp)
     330:	1080020b 	ldhu	r2,8(r2)
     334:	10bfffcc 	andi	r2,r2,65535
     338:	e0fffe17 	ldw	r3,-8(fp)
     33c:	1885c83a 	sub	r2,r3,r2
     340:	1007883a 	mov	r3,r2
     344:	e0bffb0b 	ldhu	r2,-20(fp)
     348:	1809883a 	mov	r4,r3
     34c:	100b883a 	mov	r5,r2
     350:	00015040 	call	1504 <__mulsi3>
     354:	1007883a 	mov	r3,r2
     358:	e0bffc17 	ldw	r2,-16(fp)
     35c:	10c0048d 	sth	r3,18(r2)

	jpeg->mcu_width_size = (UINT16)(mcu_width * bytes_per_pixel);
     360:	e0fffa0b 	ldhu	r3,-24(fp)
     364:	e0bffb0b 	ldhu	r2,-20(fp)
     368:	1809883a 	mov	r4,r3
     36c:	100b883a 	mov	r5,r2
     370:	00015040 	call	1504 <__mulsi3>
     374:	1007883a 	mov	r3,r2
     378:	e0bffc17 	ldw	r2,-16(fp)
     37c:	10c0058d 	sth	r3,22(r2)

	if (image_format != FOUR_TWO_ZERO)
     380:	e0bffd17 	ldw	r2,-12(fp)
     384:	10800060 	cmpeqi	r2,r2,1
     388:	1000151e 	bne	r2,zero,3e0 <initialization+0x1ec>
		jpeg->offset = (UINT16)((image_width * (mcu_height - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     38c:	e0bffa8b 	ldhu	r2,-22(fp)
     390:	10bfffc4 	addi	r2,r2,-1
     394:	1009883a 	mov	r4,r2
     398:	e17ffe17 	ldw	r5,-8(fp)
     39c:	00015040 	call	1504 <__mulsi3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	e0bffc17 	ldw	r2,-16(fp)
     3a8:	1080020b 	ldhu	r2,8(r2)
     3ac:	113fffcc 	andi	r4,r2,65535
     3b0:	e0bffa0b 	ldhu	r2,-24(fp)
     3b4:	2085c83a 	sub	r2,r4,r2
     3b8:	1885883a 	add	r2,r3,r2
     3bc:	1007883a 	mov	r3,r2
     3c0:	e0bffb0b 	ldhu	r2,-20(fp)
     3c4:	1809883a 	mov	r4,r3
     3c8:	100b883a 	mov	r5,r2
     3cc:	00015040 	call	1504 <__mulsi3>
     3d0:	1007883a 	mov	r3,r2
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10c0060d 	sth	r3,24(r2)
     3dc:	00001606 	br	438 <initialization+0x244>
	else
		jpeg->offset = (UINT16)((image_width * ((mcu_height >> 1) - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     3e0:	e0bffa8b 	ldhu	r2,-22(fp)
     3e4:	1004d07a 	srli	r2,r2,1
     3e8:	10bfffcc 	andi	r2,r2,65535
     3ec:	10bfffc4 	addi	r2,r2,-1
     3f0:	1009883a 	mov	r4,r2
     3f4:	e17ffe17 	ldw	r5,-8(fp)
     3f8:	00015040 	call	1504 <__mulsi3>
     3fc:	1007883a 	mov	r3,r2
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	1080020b 	ldhu	r2,8(r2)
     408:	113fffcc 	andi	r4,r2,65535
     40c:	e0bffa0b 	ldhu	r2,-24(fp)
     410:	2085c83a 	sub	r2,r4,r2
     414:	1885883a 	add	r2,r3,r2
     418:	1007883a 	mov	r3,r2
     41c:	e0bffb0b 	ldhu	r2,-20(fp)
     420:	1809883a 	mov	r4,r3
     424:	100b883a 	mov	r5,r2
     428:	00015040 	call	1504 <__mulsi3>
     42c:	1007883a 	mov	r3,r2
     430:	e0bffc17 	ldw	r2,-16(fp)
     434:	10c0060d 	sth	r3,24(r2)

	jpeg->ldc1 = 0;
     438:	e0bffc17 	ldw	r2,-16(fp)
     43c:	1000068d 	sth	zero,26(r2)
	jpeg->ldc2 = 0;
     440:	e0bffc17 	ldw	r2,-16(fp)
     444:	1000070d 	sth	zero,28(r2)
	jpeg->ldc3 = 0;
     448:	e0bffc17 	ldw	r2,-16(fp)
     44c:	1000078d 	sth	zero,30(r2)
}
     450:	e037883a 	mov	sp,fp
     454:	dfc00217 	ldw	ra,8(sp)
     458:	df000117 	ldw	fp,4(sp)
     45c:	dc000017 	ldw	r16,0(sp)
     460:	dec00304 	addi	sp,sp,12
     464:	f800283a 	ret

00000468 <encode_image>:

UINT8 *encode_image(UINT8 *input_ptr, UINT8 *output_ptr, UINT32 quality_factor, UINT32 image_format, UINT32 image_width, UINT32 image_height)
{
     468:	defff004 	addi	sp,sp,-64
     46c:	dfc00f15 	stw	ra,60(sp)
     470:	df000e15 	stw	fp,56(sp)
     474:	df000e04 	addi	fp,sp,56
     478:	e13ffc15 	stw	r4,-16(fp)
     47c:	e17ffd15 	stw	r5,-12(fp)
     480:	e1bffe15 	stw	r6,-8(fp)
     484:	e1ffff15 	stw	r7,-4(fp)
	UINT16 i, j;

	JPEG_ENCODER_STRUCTURE JpegStruct;
	JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure = &JpegStruct;
     488:	e0bff404 	addi	r2,fp,-48
     48c:	e0bff315 	stw	r2,-52(fp)

	if (image_format == RGB)
     490:	e0bfff17 	ldw	r2,-4(fp)
     494:	10800118 	cmpnei	r2,r2,4
     498:	1000021e 	bne	r2,zero,4a4 <encode_image+0x3c>
	{
		image_format = FOUR_FOUR_FOUR;
     49c:	008000c4 	movi	r2,3
     4a0:	e0bfff15 	stw	r2,-4(fp)
	}

	initialization(jpeg_encoder_structure, image_format, image_width, image_height);
     4a4:	e13ff317 	ldw	r4,-52(fp)
     4a8:	e17fff17 	ldw	r5,-4(fp)
     4ac:	e1800217 	ldw	r6,8(fp)
     4b0:	e1c00317 	ldw	r7,12(fp)
     4b4:	00001f40 	call	1f4 <initialization>

	SEND4((jpeg_encoder_structure->vertical_mcus) * (jpeg_encoder_structure->horizontal_mcus));
     4b8:	e0bff317 	ldw	r2,-52(fp)
     4bc:	1080018b 	ldhu	r2,6(r2)
     4c0:	10ffffcc 	andi	r3,r2,65535
     4c4:	e0bff317 	ldw	r2,-52(fp)
     4c8:	1080010b 	ldhu	r2,4(r2)
     4cc:	10bfffcc 	andi	r2,r2,65535
     4d0:	1809883a 	mov	r4,r3
     4d4:	100b883a 	mov	r5,r2
     4d8:	00015040 	call	1504 <__mulsi3>
     4dc:	1009883a 	mov	r4,r2
     4e0:	0000cc80 	call	cc8 <SEND4>
	SEND4(quality_factor);
     4e4:	e0bffe17 	ldw	r2,-8(fp)
     4e8:	1009883a 	mov	r4,r2
     4ec:	0000cc80 	call	cc8 <SEND4>
	printf("Done with q4!\n");
     4f0:	01000074 	movhi	r4,1
     4f4:	21100604 	addi	r4,r4,16408
     4f8:	00036fc0 	call	36fc <puts>

	SEND5(image_width);
     4fc:	e0800217 	ldw	r2,8(fp)
     500:	1009883a 	mov	r4,r2
     504:	0000d0c0 	call	d0c <SEND5>
	SEND5(image_height);
     508:	e0800317 	ldw	r2,12(fp)
     50c:	1009883a 	mov	r4,r2
     510:	0000d0c0 	call	d0c <SEND5>
	SEND5((jpeg_encoder_structure->vertical_mcus) * (jpeg_encoder_structure->horizontal_mcus));
     514:	e0bff317 	ldw	r2,-52(fp)
     518:	1080018b 	ldhu	r2,6(r2)
     51c:	10ffffcc 	andi	r3,r2,65535
     520:	e0bff317 	ldw	r2,-52(fp)
     524:	1080010b 	ldhu	r2,4(r2)
     528:	10bfffcc 	andi	r2,r2,65535
     52c:	1809883a 	mov	r4,r3
     530:	100b883a 	mov	r5,r2
     534:	00015040 	call	1504 <__mulsi3>
     538:	1009883a 	mov	r4,r2
     53c:	0000d0c0 	call	d0c <SEND5>
	printf("Done with q5!\n");
     540:	01000074 	movhi	r4,1
     544:	21100a04 	addi	r4,r4,16424
     548:	00036fc0 	call	36fc <puts>
	printf("Sending image data");
     54c:	01000074 	movhi	r4,1
     550:	21100e04 	addi	r4,r4,16440
     554:	00036180 	call	3618 <printf>
	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
     558:	00800044 	movi	r2,1
     55c:	e0bff20d 	sth	r2,-56(fp)
     560:	00004306 	br	670 <encode_image+0x208>
	{
		printf(".");
     564:	01000b84 	movi	r4,46
     568:	000365c0 	call	365c <putchar>
		if (i < jpeg_encoder_structure->vertical_mcus)
     56c:	e0bff317 	ldw	r2,-52(fp)
     570:	1080018b 	ldhu	r2,6(r2)
     574:	10bfffcc 	andi	r2,r2,65535
     578:	e0fff20b 	ldhu	r3,-56(fp)
     57c:	1880052e 	bgeu	r3,r2,594 <encode_image+0x12c>
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
     580:	e0bff317 	ldw	r2,-52(fp)
     584:	10c0008b 	ldhu	r3,2(r2)
     588:	e0bff317 	ldw	r2,-52(fp)
     58c:	10c0030d 	sth	r3,12(r2)
     590:	00000406 	br	5a4 <encode_image+0x13c>
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
     594:	e0bff317 	ldw	r2,-52(fp)
     598:	10c0028b 	ldhu	r3,10(r2)
     59c:	e0bff317 	ldw	r2,-52(fp)
     5a0:	10c0030d 	sth	r3,12(r2)

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
     5a4:	00800044 	movi	r2,1
     5a8:	e0bff28d 	sth	r2,-54(fp)
     5ac:	00002206 	br	638 <encode_image+0x1d0>
		{
			if (j < jpeg_encoder_structure->horizontal_mcus)
     5b0:	e0bff317 	ldw	r2,-52(fp)
     5b4:	1080010b 	ldhu	r2,4(r2)
     5b8:	10bfffcc 	andi	r2,r2,65535
     5bc:	e0fff28b 	ldhu	r3,-54(fp)
     5c0:	1880092e 	bgeu	r3,r2,5e8 <encode_image+0x180>
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->mcu_width;
     5c4:	e0bff317 	ldw	r2,-52(fp)
     5c8:	10c0000b 	ldhu	r3,0(r2)
     5cc:	e0bff317 	ldw	r2,-52(fp)
     5d0:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_mcu_width;
     5d4:	e0bff317 	ldw	r2,-52(fp)
     5d8:	10c0040b 	ldhu	r3,16(r2)
     5dc:	e0bff317 	ldw	r2,-52(fp)
     5e0:	10c0050d 	sth	r3,20(r2)
     5e4:	00000806 	br	608 <encode_image+0x1a0>
			}
			else
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->cols_in_right_mcus;
     5e8:	e0bff317 	ldw	r2,-52(fp)
     5ec:	10c0020b 	ldhu	r3,8(r2)
     5f0:	e0bff317 	ldw	r2,-52(fp)
     5f4:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_width;
     5f8:	e0bff317 	ldw	r2,-52(fp)
     5fc:	10c0048b 	ldhu	r3,18(r2)
     600:	e0bff317 	ldw	r2,-52(fp)
     604:	10c0050d 	sth	r3,20(r2)
			}

			read_444_format(jpeg_encoder_structure, input_ptr);
     608:	e13ff317 	ldw	r4,-52(fp)
     60c:	e17ffc17 	ldw	r5,-16(fp)
     610:	0000d940 	call	d94 <read_444_format>

			input_ptr += jpeg_encoder_structure->mcu_width_size;
     614:	e0bff317 	ldw	r2,-52(fp)
     618:	1080058b 	ldhu	r2,22(r2)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	e0fffc17 	ldw	r3,-16(fp)
     624:	1885883a 	add	r2,r3,r2
     628:	e0bffc15 	stw	r2,-16(fp)
		if (i < jpeg_encoder_structure->vertical_mcus)
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
     62c:	e0bff28b 	ldhu	r2,-54(fp)
     630:	10800044 	addi	r2,r2,1
     634:	e0bff28d 	sth	r2,-54(fp)
     638:	e0bff317 	ldw	r2,-52(fp)
     63c:	1080010b 	ldhu	r2,4(r2)
     640:	10ffffcc 	andi	r3,r2,65535
     644:	e0bff28b 	ldhu	r2,-54(fp)
     648:	18bfd92e 	bgeu	r3,r2,5b0 <encode_image+0x148>
			input_ptr += jpeg_encoder_structure->mcu_width_size;

// #pragma flush
		}

		input_ptr += jpeg_encoder_structure->offset;
     64c:	e0bff317 	ldw	r2,-52(fp)
     650:	1080060b 	ldhu	r2,24(r2)
     654:	10bfffcc 	andi	r2,r2,65535
     658:	e0fffc17 	ldw	r3,-16(fp)
     65c:	1885883a 	add	r2,r3,r2
     660:	e0bffc15 	stw	r2,-16(fp)
	SEND5(image_width);
	SEND5(image_height);
	SEND5((jpeg_encoder_structure->vertical_mcus) * (jpeg_encoder_structure->horizontal_mcus));
	printf("Done with q5!\n");
	printf("Sending image data");
	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
     664:	e0bff20b 	ldhu	r2,-56(fp)
     668:	10800044 	addi	r2,r2,1
     66c:	e0bff20d 	sth	r2,-56(fp)
     670:	e0bff317 	ldw	r2,-52(fp)
     674:	1080018b 	ldhu	r2,6(r2)
     678:	10ffffcc 	andi	r3,r2,65535
     67c:	e0bff20b 	ldhu	r2,-56(fp)
     680:	18bfb82e 	bgeu	r3,r2,564 <encode_image+0xfc>
// #pragma flush
		}

		input_ptr += jpeg_encoder_structure->offset;
	}
	printf("\n");
     684:	01000284 	movi	r4,10
     688:	000365c0 	call	365c <putchar>
	return output_ptr;
     68c:	e0bffd17 	ldw	r2,-12(fp)
}
     690:	e037883a 	mov	sp,fp
     694:	dfc00117 	ldw	ra,4(sp)
     698:	df000017 	ldw	fp,0(sp)
     69c:	dec00204 	addi	sp,sp,8
     6a0:	f800283a 	ret

000006a4 <main>:
#include "config.h"

void *jemalloc(size_t size);

int main()
{
     6a4:	deff6d04 	addi	sp,sp,-588
     6a8:	dfc09215 	stw	ra,584(sp)
     6ac:	df009115 	stw	fp,580(sp)
     6b0:	df009104 	addi	fp,sp,580
	char file_system[80] = "/mnt/host/files/";
     6b4:	009d1bb4 	movhi	r2,29806
     6b8:	109b4bc4 	addi	r2,r2,27951
     6bc:	e0bf7715 	stw	r2,-548(fp)
     6c0:	009cdbf4 	movhi	r2,29551
     6c4:	109a0bc4 	addi	r2,r2,26671
     6c8:	e0bf7815 	stw	r2,-544(fp)
     6cc:	009a59b4 	movhi	r2,26982
     6d0:	108bdd04 	addi	r2,r2,12148
     6d4:	e0bf7915 	stw	r2,-540(fp)
     6d8:	008bdcf4 	movhi	r2,12147
     6dc:	10995b04 	addi	r2,r2,25964
     6e0:	e0bf7a15 	stw	r2,-536(fp)
     6e4:	e03f7b15 	stw	zero,-532(fp)
     6e8:	e0ff7c04 	addi	r3,fp,-528
     6ec:	00800f04 	movi	r2,60
     6f0:	1809883a 	mov	r4,r3
     6f4:	000b883a 	mov	r5,zero
     6f8:	100d883a 	mov	r6,r2
     6fc:	00034a40 	call	34a4 <memset>
	UINT32 quality_factor, image_format, image_width, image_height;

	// TODO: Do the actual implementation.
	
	char param_file[150];
	strcpy(param_file,file_system);
     700:	e0ffb504 	addi	r3,fp,-300
     704:	e0bf7704 	addi	r2,fp,-548
     708:	1809883a 	mov	r4,r3
     70c:	100b883a 	mov	r5,r2
     710:	0003b540 	call	3b54 <strcpy>
	strcat(param_file, "param.txt");
     714:	e0bfb504 	addi	r2,fp,-300
     718:	1009883a 	mov	r4,r2
     71c:	0003be80 	call	3be8 <strlen>
     720:	e0ffb504 	addi	r3,fp,-300
     724:	1885883a 	add	r2,r3,r2
     728:	00c01c04 	movi	r3,112
     72c:	10c00005 	stb	r3,0(r2)
     730:	00c01844 	movi	r3,97
     734:	10c00045 	stb	r3,1(r2)
     738:	00c01c84 	movi	r3,114
     73c:	10c00085 	stb	r3,2(r2)
     740:	00c01844 	movi	r3,97
     744:	10c000c5 	stb	r3,3(r2)
     748:	00c01b44 	movi	r3,109
     74c:	10c00105 	stb	r3,4(r2)
     750:	00c00b84 	movi	r3,46
     754:	10c00145 	stb	r3,5(r2)
     758:	00c01d04 	movi	r3,116
     75c:	10c00185 	stb	r3,6(r2)
     760:	00c01e04 	movi	r3,120
     764:	10c001c5 	stb	r3,7(r2)
     768:	00c01d04 	movi	r3,116
     76c:	10c00205 	stb	r3,8(r2)
     770:	10000245 	stb	zero,9(r2)

	printf("Gonna look for parameters in: %s\n",param_file);
     774:	e0bfb504 	addi	r2,fp,-300
     778:	01000074 	movhi	r4,1
     77c:	21101304 	addi	r4,r4,16460
     780:	100b883a 	mov	r5,r2
     784:	00036180 	call	3618 <printf>

	fp = fopen(param_file, "r");
     788:	e0bfb504 	addi	r2,fp,-300
     78c:	1009883a 	mov	r4,r2
     790:	01400074 	movhi	r5,1
     794:	29501c04 	addi	r5,r5,16496
     798:	0001cb00 	call	1cb0 <fopen>
     79c:	e0bf7415 	stw	r2,-560(fp)

	if (fp == NULL)
     7a0:	e0bf7417 	ldw	r2,-560(fp)
     7a4:	1000b01e 	bne	r2,zero,a68 <main+0x3c4>
	{
		printf("Parameter File Open Error!\n");
     7a8:	01000074 	movhi	r4,1
     7ac:	21101d04 	addi	r4,r4,16500
     7b0:	00036fc0 	call	36fc <puts>
		return 0;
     7b4:	0005883a 	mov	r2,zero
     7b8:	0000bc06 	br	aac <main+0x408>
	}

	while (fscanf(fp, "%s", input_file_name) != EOF)
	{
		input_file_name_ptr = input_file_name;
     7bc:	e0bf8b04 	addi	r2,fp,-468
     7c0:	e0bf7115 	stw	r2,-572(fp)

		while (*input_file_name_ptr != '.')
     7c4:	00000a06 	br	7f0 <main+0x14c>
		{
			SEND6((int)*input_file_name_ptr);
     7c8:	e0bf7117 	ldw	r2,-572(fp)
     7cc:	10800003 	ldbu	r2,0(r2)
     7d0:	10803fcc 	andi	r2,r2,255
     7d4:	1080201c 	xori	r2,r2,128
     7d8:	10bfe004 	addi	r2,r2,-128
     7dc:	1009883a 	mov	r4,r2
     7e0:	0000d500 	call	d50 <SEND6>
			input_file_name_ptr++;
     7e4:	e0bf7117 	ldw	r2,-572(fp)
     7e8:	10800044 	addi	r2,r2,1
     7ec:	e0bf7115 	stw	r2,-572(fp)

	while (fscanf(fp, "%s", input_file_name) != EOF)
	{
		input_file_name_ptr = input_file_name;

		while (*input_file_name_ptr != '.')
     7f0:	e0bf7117 	ldw	r2,-572(fp)
     7f4:	10800003 	ldbu	r2,0(r2)
     7f8:	10803fcc 	andi	r2,r2,255
     7fc:	1080201c 	xori	r2,r2,128
     800:	10bfe004 	addi	r2,r2,-128
     804:	10800b98 	cmpnei	r2,r2,46
     808:	103fef1e 	bne	r2,zero,7c8 <main+0x124>
		{
			SEND6((int)*input_file_name_ptr);
			input_file_name_ptr++;
		}
		SEND6((int)'\0');
     80c:	0009883a 	mov	r4,zero
     810:	0000d500 	call	d50 <SEND6>

		printf("Sent filename to q6!.\n");
     814:	01000074 	movhi	r4,1
     818:	21102404 	addi	r4,r4,16528
     81c:	00036fc0 	call	36fc <puts>

		fscanf(fp, "%d", &quality_factor);
     820:	e0bfb104 	addi	r2,fp,-316
     824:	e13f7417 	ldw	r4,-560(fp)
     828:	01400074 	movhi	r5,1
     82c:	29502a04 	addi	r5,r5,16552
     830:	100d883a 	mov	r6,r2
     834:	00023540 	call	2354 <fscanf>
		fscanf(fp, "%d", &image_format);
     838:	e0bfb204 	addi	r2,fp,-312
     83c:	e13f7417 	ldw	r4,-560(fp)
     840:	01400074 	movhi	r5,1
     844:	29502a04 	addi	r5,r5,16552
     848:	100d883a 	mov	r6,r2
     84c:	00023540 	call	2354 <fscanf>
		fscanf(fp, "%d", &image_width);
     850:	e0bfb304 	addi	r2,fp,-308
     854:	e13f7417 	ldw	r4,-560(fp)
     858:	01400074 	movhi	r5,1
     85c:	29502a04 	addi	r5,r5,16552
     860:	100d883a 	mov	r6,r2
     864:	00023540 	call	2354 <fscanf>
		fscanf(fp, "%d", &image_height);
     868:	e0bfb404 	addi	r2,fp,-304
     86c:	e13f7417 	ldw	r4,-560(fp)
     870:	01400074 	movhi	r5,1
     874:	29502a04 	addi	r5,r5,16552
     878:	100d883a 	mov	r6,r2
     87c:	00023540 	call	2354 <fscanf>

		// print the parameters and the file name
		printf("File Name: %s\n", input_file_name);
     880:	e0bf8b04 	addi	r2,fp,-468
     884:	01000074 	movhi	r4,1
     888:	21102b04 	addi	r4,r4,16556
     88c:	100b883a 	mov	r5,r2
     890:	00036180 	call	3618 <printf>
		printf("Quality Factor: %d\n", quality_factor);
     894:	e0bfb117 	ldw	r2,-316(fp)
     898:	01000074 	movhi	r4,1
     89c:	21102f04 	addi	r4,r4,16572
     8a0:	100b883a 	mov	r5,r2
     8a4:	00036180 	call	3618 <printf>
		printf("Image Format: %d\n", image_format);
     8a8:	e0bfb217 	ldw	r2,-312(fp)
     8ac:	01000074 	movhi	r4,1
     8b0:	21103404 	addi	r4,r4,16592
     8b4:	100b883a 	mov	r5,r2
     8b8:	00036180 	call	3618 <printf>
		printf("Image Width: %d\n", image_width);
     8bc:	e0bfb317 	ldw	r2,-308(fp)
     8c0:	01000074 	movhi	r4,1
     8c4:	21103904 	addi	r4,r4,16612
     8c8:	100b883a 	mov	r5,r2
     8cc:	00036180 	call	3618 <printf>
		printf("Image Height: %d\n", image_height);
     8d0:	e0bfb417 	ldw	r2,-304(fp)
     8d4:	01000074 	movhi	r4,1
     8d8:	21103e04 	addi	r4,r4,16632
     8dc:	100b883a 	mov	r5,r2
     8e0:	00036180 	call	3618 <printf>

		if (image_format == FOUR_ZERO_ZERO)
     8e4:	e0bfb217 	ldw	r2,-312(fp)
     8e8:	1000071e 	bne	r2,zero,908 <main+0x264>
			image_size = image_width * image_height;
     8ec:	e0ffb317 	ldw	r3,-308(fp)
     8f0:	e0bfb417 	ldw	r2,-304(fp)
     8f4:	1809883a 	mov	r4,r3
     8f8:	100b883a 	mov	r5,r2
     8fc:	00015040 	call	1504 <__mulsi3>
     900:	e0bf7215 	stw	r2,-568(fp)
     904:	00002406 	br	998 <main+0x2f4>
		else if (image_format == FOUR_TWO_ZERO)
     908:	e0bfb217 	ldw	r2,-312(fp)
     90c:	10800058 	cmpnei	r2,r2,1
     910:	10000c1e 	bne	r2,zero,944 <main+0x2a0>
			image_size = (image_width * image_height * 3) >> 1;
     914:	e0ffb317 	ldw	r3,-308(fp)
     918:	e0bfb417 	ldw	r2,-304(fp)
     91c:	1809883a 	mov	r4,r3
     920:	100b883a 	mov	r5,r2
     924:	00015040 	call	1504 <__mulsi3>
     928:	1007883a 	mov	r3,r2
     92c:	1805883a 	mov	r2,r3
     930:	1085883a 	add	r2,r2,r2
     934:	10c5883a 	add	r2,r2,r3
     938:	1004d07a 	srli	r2,r2,1
     93c:	e0bf7215 	stw	r2,-568(fp)
     940:	00001506 	br	998 <main+0x2f4>
		else if (image_format == FOUR_TWO_TWO)
     944:	e0bfb217 	ldw	r2,-312(fp)
     948:	10800098 	cmpnei	r2,r2,2
     94c:	1000081e 	bne	r2,zero,970 <main+0x2cc>
			image_size = image_width * image_height * 2;
     950:	e0ffb317 	ldw	r3,-308(fp)
     954:	e0bfb417 	ldw	r2,-304(fp)
     958:	1809883a 	mov	r4,r3
     95c:	100b883a 	mov	r5,r2
     960:	00015040 	call	1504 <__mulsi3>
     964:	1085883a 	add	r2,r2,r2
     968:	e0bf7215 	stw	r2,-568(fp)
     96c:	00000a06 	br	998 <main+0x2f4>
		else
			image_size = image_width * image_height * 3;
     970:	e0ffb317 	ldw	r3,-308(fp)
     974:	e0bfb417 	ldw	r2,-304(fp)
     978:	1809883a 	mov	r4,r3
     97c:	100b883a 	mov	r5,r2
     980:	00015040 	call	1504 <__mulsi3>
     984:	1007883a 	mov	r3,r2
     988:	1805883a 	mov	r2,r3
     98c:	1085883a 	add	r2,r2,r2
     990:	10c5883a 	add	r2,r2,r3
     994:	e0bf7215 	stw	r2,-568(fp)

		input = (UINT8 *)jemalloc(2500000 * sizeof(UINT8));
     998:	010009b4 	movhi	r4,38
     99c:	21096804 	addi	r4,r4,9632
     9a0:	0000ac00 	call	ac0 <jemalloc>
     9a4:	e0bf7515 	stw	r2,-556(fp)

		char input_file_full[150];
		strcpy(input_file_full,file_system);
     9a8:	e0ffda84 	addi	r3,fp,-150
     9ac:	e0bf7704 	addi	r2,fp,-548
     9b0:	1809883a 	mov	r4,r3
     9b4:	100b883a 	mov	r5,r2
     9b8:	0003b540 	call	3b54 <strcpy>
		strcat(input_file_full,input_file_name);
     9bc:	e0ffda84 	addi	r3,fp,-150
     9c0:	e0bf8b04 	addi	r2,fp,-468
     9c4:	1809883a 	mov	r4,r3
     9c8:	100b883a 	mov	r5,r2
     9cc:	0003abc0 	call	3abc <strcat>

		fpt = fopen(input_file_full, "rb");
     9d0:	e0bfda84 	addi	r2,fp,-150
     9d4:	1009883a 	mov	r4,r2
     9d8:	01400074 	movhi	r5,1
     9dc:	29504304 	addi	r5,r5,16652
     9e0:	0001cb00 	call	1cb0 <fopen>
     9e4:	e0bf7615 	stw	r2,-552(fp)

		if (fpt == NULL)
     9e8:	e0bf7617 	ldw	r2,-552(fp)
     9ec:	1000051e 	bne	r2,zero,a04 <main+0x360>
		{
			printf("Raw File Open Error!\n");
     9f0:	01000074 	movhi	r4,1
     9f4:	21104404 	addi	r4,r4,16656
     9f8:	00036fc0 	call	36fc <puts>
			return 0;
     9fc:	0005883a 	mov	r2,zero
     a00:	00002a06 	br	aac <main+0x408>
		}

		fread(input, 1, image_size, fpt);
     a04:	e13f7517 	ldw	r4,-556(fp)
     a08:	01400044 	movi	r5,1
     a0c:	e1bf7217 	ldw	r6,-568(fp)
     a10:	e1ff7617 	ldw	r7,-552(fp)
     a14:	0001f080 	call	1f08 <fread>
		printf("Image file successfully loaded into memory!\n");
     a18:	01000074 	movhi	r4,1
     a1c:	21104a04 	addi	r4,r4,16680
     a20:	00036fc0 	call	36fc <puts>

		fclose(fpt);
     a24:	e13f7617 	ldw	r4,-552(fp)
     a28:	00016680 	call	1668 <fclose>

		output_ptr = encode_image(input, output_ptr, quality_factor, image_format, image_width, image_height);
     a2c:	e0ffb117 	ldw	r3,-316(fp)
     a30:	e0bfb217 	ldw	r2,-312(fp)
     a34:	e17fb317 	ldw	r5,-308(fp)
     a38:	e13fb417 	ldw	r4,-304(fp)
     a3c:	d9400015 	stw	r5,0(sp)
     a40:	d9000115 	stw	r4,4(sp)
     a44:	e13f7517 	ldw	r4,-556(fp)
     a48:	e17f7317 	ldw	r5,-564(fp)
     a4c:	180d883a 	mov	r6,r3
     a50:	100f883a 	mov	r7,r2
     a54:	00004680 	call	468 <encode_image>
     a58:	e0bf7315 	stw	r2,-564(fp)

		free(input);
     a5c:	e13f7517 	ldw	r4,-556(fp)
     a60:	0002bcc0 	call	2bcc <free>
     a64:	00000106 	br	a6c <main+0x3c8>
	{
		printf("Parameter File Open Error!\n");
		return 0;
	}

	while (fscanf(fp, "%s", input_file_name) != EOF)
     a68:	0001883a 	nop
     a6c:	e0bf8b04 	addi	r2,fp,-468
     a70:	e13f7417 	ldw	r4,-560(fp)
     a74:	01400074 	movhi	r5,1
     a78:	29505504 	addi	r5,r5,16724
     a7c:	100d883a 	mov	r6,r2
     a80:	00023540 	call	2354 <fscanf>
     a84:	10bfffd8 	cmpnei	r2,r2,-1
     a88:	103f4c1e 	bne	r2,zero,7bc <main+0x118>
		output_ptr = encode_image(input, output_ptr, quality_factor, image_format, image_width, image_height);

		free(input);
	}

	SEND6((int)0);
     a8c:	0009883a 	mov	r4,zero
     a90:	0000d500 	call	d50 <SEND6>

	fclose(fp);
     a94:	e13f7417 	ldw	r4,-560(fp)
     a98:	00016680 	call	1668 <fclose>

	printf("\n Done ! \n");
     a9c:	01000074 	movhi	r4,1
     aa0:	21105604 	addi	r4,r4,16728
     aa4:	00036fc0 	call	36fc <puts>

	// TODO: Do the actual implementation.


	return 0;
     aa8:	0005883a 	mov	r2,zero
}
     aac:	e037883a 	mov	sp,fp
     ab0:	dfc00117 	ldw	ra,4(sp)
     ab4:	df000017 	ldw	fp,0(sp)
     ab8:	dec00204 	addi	sp,sp,8
     abc:	f800283a 	ret

00000ac0 <jemalloc>:

void *jemalloc(size_t size)
{
     ac0:	defffd04 	addi	sp,sp,-12
     ac4:	dfc00215 	stw	ra,8(sp)
     ac8:	df000115 	stw	fp,4(sp)
     acc:	df000104 	addi	fp,sp,4
     ad0:	e13fff15 	stw	r4,-4(fp)
	return (malloc(size));
     ad4:	e13fff17 	ldw	r4,-4(fp)
     ad8:	0002bb80 	call	2bb8 <malloc>
}
     adc:	e037883a 	mov	sp,fp
     ae0:	dfc00117 	ldw	ra,4(sp)
     ae4:	df000017 	ldw	fp,0(sp)
     ae8:	dec00204 	addi	sp,sp,8
     aec:	f800283a 	ret

00000af0 <enqueueINT32>:

int INIT_USAGE_ENQ = 0;
int INIT_USAGE_DEQ = 0;

int enqueueINT32(Queue queue, int data)
{
     af0:	defffa04 	addi	sp,sp,-24
     af4:	dfc00515 	stw	ra,20(sp)
     af8:	df000415 	stw	fp,16(sp)
     afc:	df000404 	addi	fp,sp,16
     b00:	e13ffc15 	stw	r4,-16(fp)
     b04:	e17ffd15 	stw	r5,-12(fp)
     b08:	e1bffe15 	stw	r6,-8(fp)
     b0c:	e1ffff15 	stw	r7,-4(fp)

    // Wait if the fifo is full
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<0) != 0)
     b10:	0001883a 	nop
     b14:	e0bffe17 	ldw	r2,-8(fp)
     b18:	1009883a 	mov	r4,r2
     b1c:	01400044 	movi	r5,1
     b20:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
     b24:	103ffb1e 	bne	r2,zero,b14 <enqueueINT32+0x24>
	{}

    if (INIT_USAGE_ENQ == 0){
     b28:	d0a6fd17 	ldw	r2,-25612(gp)
     b2c:	1000051e 	bne	r2,zero,b44 <enqueueINT32+0x54>
        INIT_USAGE_ENQ = 1;
     b30:	00800044 	movi	r2,1
     b34:	d0a6fd15 	stw	r2,-25612(gp)
        printf("First time using enqueueINT32\n");
     b38:	01000074 	movhi	r4,1
     b3c:	21105904 	addi	r4,r4,16740
     b40:	00036fc0 	call	36fc <puts>
    }

	// Write the data to FIFO
	return altera_avalon_fifo_write_fifo(queue.mem_base_in,queue.ctrl_base,(int)data);
     b44:	e0bffc17 	ldw	r2,-16(fp)
     b48:	1009883a 	mov	r4,r2
     b4c:	e0bffe17 	ldw	r2,-8(fp)
     b50:	1007883a 	mov	r3,r2
     b54:	e0bfff17 	ldw	r2,-4(fp)
     b58:	180b883a 	mov	r5,r3
     b5c:	100d883a 	mov	r6,r2
     b60:	0011d040 	call	11d04 <altera_avalon_fifo_write_fifo>
}
     b64:	e037883a 	mov	sp,fp
     b68:	dfc00117 	ldw	ra,4(sp)
     b6c:	df000017 	ldw	fp,0(sp)
     b70:	dec00204 	addi	sp,sp,8
     b74:	f800283a 	ret

00000b78 <dequeueINT32>:


int dequeueINT32(Queue queue)
{
     b78:	defffa04 	addi	sp,sp,-24
     b7c:	dfc00515 	stw	ra,20(sp)
     b80:	df000415 	stw	fp,16(sp)
     b84:	df000404 	addi	fp,sp,16
     b88:	e13ffd15 	stw	r4,-12(fp)
     b8c:	e17ffe15 	stw	r5,-8(fp)
     b90:	e1bfff15 	stw	r6,-4(fp)

	// Wait if the fifo is empty
	while (altera_avalon_fifo_read_status(queue.ctrl_base,1<<1) != 0)
     b94:	0001883a 	nop
     b98:	e0bfff17 	ldw	r2,-4(fp)
     b9c:	1009883a 	mov	r4,r2
     ba0:	01400084 	movi	r5,2
     ba4:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
     ba8:	103ffb1e 	bne	r2,zero,b98 <dequeueINT32+0x20>
	{}

    if (INIT_USAGE_DEQ == 0){
     bac:	d0a6fe17 	ldw	r2,-25608(gp)
     bb0:	1000051e 	bne	r2,zero,bc8 <dequeueINT32+0x50>
        INIT_USAGE_DEQ = 1;
     bb4:	00800044 	movi	r2,1
     bb8:	d0a6fe15 	stw	r2,-25608(gp)
        printf("First time using dequeueINT32\n");
     bbc:	01000074 	movhi	r4,1
     bc0:	21106104 	addi	r4,r4,16772
     bc4:	00036fc0 	call	36fc <puts>
    }

	// Read the data
	int data = altera_avalon_fifo_read_fifo(queue.mem_base_out,queue.ctrl_base);
     bc8:	e0bffe17 	ldw	r2,-8(fp)
     bcc:	1007883a 	mov	r3,r2
     bd0:	e0bfff17 	ldw	r2,-4(fp)
     bd4:	1809883a 	mov	r4,r3
     bd8:	100b883a 	mov	r5,r2
     bdc:	0011dc80 	call	11dc8 <altera_avalon_fifo_read_fifo>
     be0:	e0bffc15 	stw	r2,-16(fp)

	return data;
     be4:	e0bffc17 	ldw	r2,-16(fp)
}
     be8:	e037883a 	mov	sp,fp
     bec:	dfc00117 	ldw	ra,4(sp)
     bf0:	df000017 	ldw	fp,0(sp)
     bf4:	dec00204 	addi	sp,sp,8
     bf8:	f800283a 	ret

00000bfc <SEND1>:
#include "queue.h"

#include "q_mem_obj_def.h"

void SEND1(int Y)
{
     bfc:	defffd04 	addi	sp,sp,-12
     c00:	dfc00215 	stw	ra,8(sp)
     c04:	df000115 	stw	fp,4(sp)
     c08:	df000104 	addi	fp,sp,4
     c0c:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q1, Y);
     c10:	00800074 	movhi	r2,1
     c14:	1091f404 	addi	r2,r2,18384
     c18:	11000017 	ldw	r4,0(r2)
     c1c:	11400117 	ldw	r5,4(r2)
     c20:	11800217 	ldw	r6,8(r2)
     c24:	e1ffff17 	ldw	r7,-4(fp)
     c28:	0000af00 	call	af0 <enqueueINT32>
}
     c2c:	e037883a 	mov	sp,fp
     c30:	dfc00117 	ldw	ra,4(sp)
     c34:	df000017 	ldw	fp,0(sp)
     c38:	dec00204 	addi	sp,sp,8
     c3c:	f800283a 	ret

00000c40 <SEND2>:

void SEND2(int Cb)
{
     c40:	defffd04 	addi	sp,sp,-12
     c44:	dfc00215 	stw	ra,8(sp)
     c48:	df000115 	stw	fp,4(sp)
     c4c:	df000104 	addi	fp,sp,4
     c50:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q2, Cb);
     c54:	00800074 	movhi	r2,1
     c58:	1091f704 	addi	r2,r2,18396
     c5c:	11000017 	ldw	r4,0(r2)
     c60:	11400117 	ldw	r5,4(r2)
     c64:	11800217 	ldw	r6,8(r2)
     c68:	e1ffff17 	ldw	r7,-4(fp)
     c6c:	0000af00 	call	af0 <enqueueINT32>
}
     c70:	e037883a 	mov	sp,fp
     c74:	dfc00117 	ldw	ra,4(sp)
     c78:	df000017 	ldw	fp,0(sp)
     c7c:	dec00204 	addi	sp,sp,8
     c80:	f800283a 	ret

00000c84 <SEND3>:

void SEND3(int Cr)
{
     c84:	defffd04 	addi	sp,sp,-12
     c88:	dfc00215 	stw	ra,8(sp)
     c8c:	df000115 	stw	fp,4(sp)
     c90:	df000104 	addi	fp,sp,4
     c94:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q3, Cr);
     c98:	00800074 	movhi	r2,1
     c9c:	1091fa04 	addi	r2,r2,18408
     ca0:	11000017 	ldw	r4,0(r2)
     ca4:	11400117 	ldw	r5,4(r2)
     ca8:	11800217 	ldw	r6,8(r2)
     cac:	e1ffff17 	ldw	r7,-4(fp)
     cb0:	0000af00 	call	af0 <enqueueINT32>
}
     cb4:	e037883a 	mov	sp,fp
     cb8:	dfc00117 	ldw	ra,4(sp)
     cbc:	df000017 	ldw	fp,0(sp)
     cc0:	dec00204 	addi	sp,sp,8
     cc4:	f800283a 	ret

00000cc8 <SEND4>:

void SEND4(int data)
{
     cc8:	defffd04 	addi	sp,sp,-12
     ccc:	dfc00215 	stw	ra,8(sp)
     cd0:	df000115 	stw	fp,4(sp)
     cd4:	df000104 	addi	fp,sp,4
     cd8:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q4, data);
     cdc:	00800074 	movhi	r2,1
     ce0:	1091fd04 	addi	r2,r2,18420
     ce4:	11000017 	ldw	r4,0(r2)
     ce8:	11400117 	ldw	r5,4(r2)
     cec:	11800217 	ldw	r6,8(r2)
     cf0:	e1ffff17 	ldw	r7,-4(fp)
     cf4:	0000af00 	call	af0 <enqueueINT32>
}
     cf8:	e037883a 	mov	sp,fp
     cfc:	dfc00117 	ldw	ra,4(sp)
     d00:	df000017 	ldw	fp,0(sp)
     d04:	dec00204 	addi	sp,sp,8
     d08:	f800283a 	ret

00000d0c <SEND5>:

void SEND5(int data)
{
     d0c:	defffd04 	addi	sp,sp,-12
     d10:	dfc00215 	stw	ra,8(sp)
     d14:	df000115 	stw	fp,4(sp)
     d18:	df000104 	addi	fp,sp,4
     d1c:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q5, data);
     d20:	00800074 	movhi	r2,1
     d24:	10920004 	addi	r2,r2,18432
     d28:	11000017 	ldw	r4,0(r2)
     d2c:	11400117 	ldw	r5,4(r2)
     d30:	11800217 	ldw	r6,8(r2)
     d34:	e1ffff17 	ldw	r7,-4(fp)
     d38:	0000af00 	call	af0 <enqueueINT32>
}
     d3c:	e037883a 	mov	sp,fp
     d40:	dfc00117 	ldw	ra,4(sp)
     d44:	df000017 	ldw	fp,0(sp)
     d48:	dec00204 	addi	sp,sp,8
     d4c:	f800283a 	ret

00000d50 <SEND6>:

// TODO: This one sends a char, not an int need to cast
void SEND6(int c)
{
     d50:	defffd04 	addi	sp,sp,-12
     d54:	dfc00215 	stw	ra,8(sp)
     d58:	df000115 	stw	fp,4(sp)
     d5c:	df000104 	addi	fp,sp,4
     d60:	e13fff15 	stw	r4,-4(fp)

    enqueueINT32(q6, c);
     d64:	00800074 	movhi	r2,1
     d68:	10920304 	addi	r2,r2,18444
     d6c:	11000017 	ldw	r4,0(r2)
     d70:	11400117 	ldw	r5,4(r2)
     d74:	11800217 	ldw	r6,8(r2)
     d78:	e1ffff17 	ldw	r7,-4(fp)
     d7c:	0000af00 	call	af0 <enqueueINT32>
     d80:	e037883a 	mov	sp,fp
     d84:	dfc00117 	ldw	ra,4(sp)
     d88:	df000017 	ldw	fp,0(sp)
     d8c:	dec00204 	addi	sp,sp,8
     d90:	f800283a 	ret

00000d94 <read_444_format>:
#include "config.h"

#include "queue_wrapper.h"

void read_444_format(JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT8 *input_ptr)
{
     d94:	defff304 	addi	sp,sp,-52
     d98:	dfc00c15 	stw	ra,48(sp)
     d9c:	df000b15 	stw	fp,44(sp)
     da0:	dc000a15 	stw	r16,40(sp)
     da4:	df000a04 	addi	fp,sp,40
     da8:	e13ffe15 	stw	r4,-8(fp)
     dac:	e17fff15 	stw	r5,-4(fp)
	INT32 i, j;

	UINT8 R, G, B;
	INT32 Y, Cb, Cr;

	UINT16 rows = jpeg_encoder_structure->rows;
     db0:	e0bffe17 	ldw	r2,-8(fp)
     db4:	1080030b 	ldhu	r2,12(r2)
     db8:	e0bffb0d 	sth	r2,-20(fp)
	UINT16 cols = jpeg_encoder_structure->cols;
     dbc:	e0bffe17 	ldw	r2,-8(fp)
     dc0:	1080038b 	ldhu	r2,14(r2)
     dc4:	e0bffb8d 	sth	r2,-18(fp)
	UINT16 incr = jpeg_encoder_structure->incr;
     dc8:	e0bffe17 	ldw	r2,-8(fp)
     dcc:	1080050b 	ldhu	r2,20(r2)
     dd0:	e0bffc0d 	sth	r2,-16(fp)

	for (i = rows; i > 0; i--)
     dd4:	e0bffb0b 	ldhu	r2,-20(fp)
     dd8:	e0bff615 	stw	r2,-40(fp)
     ddc:	0000d806 	br	1140 <read_444_format+0x3ac>
	{
		for (j = cols; j > 0; j--)
     de0:	e0bffb8b 	ldhu	r2,-18(fp)
     de4:	e0bff715 	stw	r2,-36(fp)
     de8:	00006606 	br	f84 <read_444_format+0x1f0>
		{
			R = *input_ptr++;
     dec:	e0bfff17 	ldw	r2,-4(fp)
     df0:	10800003 	ldbu	r2,0(r2)
     df4:	e0bffc85 	stb	r2,-14(fp)
     df8:	e0bfff17 	ldw	r2,-4(fp)
     dfc:	10800044 	addi	r2,r2,1
     e00:	e0bfff15 	stw	r2,-4(fp)
			G = *input_ptr++;
     e04:	e0bfff17 	ldw	r2,-4(fp)
     e08:	10800003 	ldbu	r2,0(r2)
     e0c:	e0bffcc5 	stb	r2,-13(fp)
     e10:	e0bfff17 	ldw	r2,-4(fp)
     e14:	10800044 	addi	r2,r2,1
     e18:	e0bfff15 	stw	r2,-4(fp)
			B = *input_ptr++;
     e1c:	e0bfff17 	ldw	r2,-4(fp)
     e20:	10800003 	ldbu	r2,0(r2)
     e24:	e0bffd05 	stb	r2,-12(fp)
     e28:	e0bfff17 	ldw	r2,-4(fp)
     e2c:	10800044 	addi	r2,r2,1
     e30:	e0bfff15 	stw	r2,-4(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     e34:	e0bffc83 	ldbu	r2,-14(fp)
     e38:	1009883a 	mov	r4,r2
     e3c:	01401344 	movi	r5,77
     e40:	00015040 	call	1504 <__mulsi3>
     e44:	1021883a 	mov	r16,r2
     e48:	e0bffcc3 	ldbu	r2,-13(fp)
     e4c:	1009883a 	mov	r4,r2
     e50:	01402584 	movi	r5,150
     e54:	00015040 	call	1504 <__mulsi3>
     e58:	80a1883a 	add	r16,r16,r2
     e5c:	e0bffd03 	ldbu	r2,-12(fp)
     e60:	1009883a 	mov	r4,r2
     e64:	01400744 	movi	r5,29
     e68:	00015040 	call	1504 <__mulsi3>
     e6c:	8085883a 	add	r2,r16,r2
     e70:	1005d23a 	srai	r2,r2,8
     e74:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     e78:	e0bffc83 	ldbu	r2,-14(fp)
     e7c:	1009883a 	mov	r4,r2
     e80:	017ff544 	movi	r5,-43
     e84:	00015040 	call	1504 <__mulsi3>
     e88:	1021883a 	mov	r16,r2
     e8c:	e0bffcc3 	ldbu	r2,-13(fp)
     e90:	1009883a 	mov	r4,r2
     e94:	017feac4 	movi	r5,-85
     e98:	00015040 	call	1504 <__mulsi3>
     e9c:	8087883a 	add	r3,r16,r2
     ea0:	e0bffd03 	ldbu	r2,-12(fp)
     ea4:	100491fa 	slli	r2,r2,7
     ea8:	1885883a 	add	r2,r3,r2
     eac:	1005d23a 	srai	r2,r2,8
     eb0:	10802004 	addi	r2,r2,128
     eb4:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     eb8:	e0bffc83 	ldbu	r2,-14(fp)
     ebc:	102091fa 	slli	r16,r2,7
     ec0:	e0bffcc3 	ldbu	r2,-13(fp)
     ec4:	1009883a 	mov	r4,r2
     ec8:	017fe544 	movi	r5,-107
     ecc:	00015040 	call	1504 <__mulsi3>
     ed0:	80a1883a 	add	r16,r16,r2
     ed4:	e0bffd03 	ldbu	r2,-12(fp)
     ed8:	1009883a 	mov	r4,r2
     edc:	017ffac4 	movi	r5,-21
     ee0:	00015040 	call	1504 <__mulsi3>
     ee4:	8085883a 	add	r2,r16,r2
     ee8:	1005d23a 	srai	r2,r2,8
     eec:	10802004 	addi	r2,r2,128
     ef0:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0)
     ef4:	e0bff817 	ldw	r2,-32(fp)
     ef8:	1000020e 	bge	r2,zero,f04 <read_444_format+0x170>
				Y = 0;
     efc:	e03ff815 	stw	zero,-32(fp)
     f00:	00000506 	br	f18 <read_444_format+0x184>
			else if (Y > 255)
     f04:	e0bff817 	ldw	r2,-32(fp)
     f08:	10804010 	cmplti	r2,r2,256
     f0c:	1000021e 	bne	r2,zero,f18 <read_444_format+0x184>
				Y = 255;
     f10:	00803fc4 	movi	r2,255
     f14:	e0bff815 	stw	r2,-32(fp)

			if (Cb < 0)
     f18:	e0bff917 	ldw	r2,-28(fp)
     f1c:	1000020e 	bge	r2,zero,f28 <read_444_format+0x194>
				Cb = 0;
     f20:	e03ff915 	stw	zero,-28(fp)
     f24:	00000506 	br	f3c <read_444_format+0x1a8>
			else if (Cb > 255)
     f28:	e0bff917 	ldw	r2,-28(fp)
     f2c:	10804010 	cmplti	r2,r2,256
     f30:	1000021e 	bne	r2,zero,f3c <read_444_format+0x1a8>
				Cb = 255;
     f34:	00803fc4 	movi	r2,255
     f38:	e0bff915 	stw	r2,-28(fp)

			if (Cr < 0)
     f3c:	e0bffa17 	ldw	r2,-24(fp)
     f40:	1000020e 	bge	r2,zero,f4c <read_444_format+0x1b8>
				Cr = 0;
     f44:	e03ffa15 	stw	zero,-24(fp)
     f48:	00000506 	br	f60 <read_444_format+0x1cc>
			else if (Cr > 255)
     f4c:	e0bffa17 	ldw	r2,-24(fp)
     f50:	10804010 	cmplti	r2,r2,256
     f54:	1000021e 	bne	r2,zero,f60 <read_444_format+0x1cc>
				Cr = 255;
     f58:	00803fc4 	movi	r2,255
     f5c:	e0bffa15 	stw	r2,-24(fp)

			SEND1(Y);
     f60:	e13ff817 	ldw	r4,-32(fp)
     f64:	0000bfc0 	call	bfc <SEND1>
			SEND2(Cb);
     f68:	e13ff917 	ldw	r4,-28(fp)
     f6c:	0000c400 	call	c40 <SEND2>
			SEND3(Cr);
     f70:	e13ffa17 	ldw	r4,-24(fp)
     f74:	0000c840 	call	c84 <SEND3>
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i = rows; i > 0; i--)
	{
		for (j = cols; j > 0; j--)
     f78:	e0bff717 	ldw	r2,-36(fp)
     f7c:	10bfffc4 	addi	r2,r2,-1
     f80:	e0bff715 	stw	r2,-36(fp)
     f84:	e0bff717 	ldw	r2,-36(fp)
     f88:	00bf9816 	blt	zero,r2,dec <read_444_format+0x58>
			SEND1(Y);
			SEND2(Cb);
			SEND3(Cr);
		}

		if ((j = (8 - cols)) > 0)
     f8c:	e0bffb8b 	ldhu	r2,-18(fp)
     f90:	00c00204 	movi	r3,8
     f94:	1885c83a 	sub	r2,r3,r2
     f98:	e0bff715 	stw	r2,-36(fp)
     f9c:	e0bff717 	ldw	r2,-36(fp)
     fa0:	0080600e 	bge	zero,r2,1124 <read_444_format+0x390>
		{
			R = *(input_ptr - 3);
     fa4:	e0bfff17 	ldw	r2,-4(fp)
     fa8:	10bfff43 	ldbu	r2,-3(r2)
     fac:	e0bffc85 	stb	r2,-14(fp)
			G = *(input_ptr - 2);
     fb0:	e0bfff17 	ldw	r2,-4(fp)
     fb4:	10bfff83 	ldbu	r2,-2(r2)
     fb8:	e0bffcc5 	stb	r2,-13(fp)
			B = *(input_ptr - 1);
     fbc:	e0bfff17 	ldw	r2,-4(fp)
     fc0:	10bfffc3 	ldbu	r2,-1(r2)
     fc4:	e0bffd05 	stb	r2,-12(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     fc8:	e0bffc83 	ldbu	r2,-14(fp)
     fcc:	1009883a 	mov	r4,r2
     fd0:	01401344 	movi	r5,77
     fd4:	00015040 	call	1504 <__mulsi3>
     fd8:	1021883a 	mov	r16,r2
     fdc:	e0bffcc3 	ldbu	r2,-13(fp)
     fe0:	1009883a 	mov	r4,r2
     fe4:	01402584 	movi	r5,150
     fe8:	00015040 	call	1504 <__mulsi3>
     fec:	80a1883a 	add	r16,r16,r2
     ff0:	e0bffd03 	ldbu	r2,-12(fp)
     ff4:	1009883a 	mov	r4,r2
     ff8:	01400744 	movi	r5,29
     ffc:	00015040 	call	1504 <__mulsi3>
    1000:	8085883a 	add	r2,r16,r2
    1004:	1005d23a 	srai	r2,r2,8
    1008:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
    100c:	e0bffc83 	ldbu	r2,-14(fp)
    1010:	1009883a 	mov	r4,r2
    1014:	017ff544 	movi	r5,-43
    1018:	00015040 	call	1504 <__mulsi3>
    101c:	1021883a 	mov	r16,r2
    1020:	e0bffcc3 	ldbu	r2,-13(fp)
    1024:	1009883a 	mov	r4,r2
    1028:	017feac4 	movi	r5,-85
    102c:	00015040 	call	1504 <__mulsi3>
    1030:	8087883a 	add	r3,r16,r2
    1034:	e0bffd03 	ldbu	r2,-12(fp)
    1038:	100491fa 	slli	r2,r2,7
    103c:	1885883a 	add	r2,r3,r2
    1040:	1005d23a 	srai	r2,r2,8
    1044:	10802004 	addi	r2,r2,128
    1048:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
    104c:	e0bffc83 	ldbu	r2,-14(fp)
    1050:	102091fa 	slli	r16,r2,7
    1054:	e0bffcc3 	ldbu	r2,-13(fp)
    1058:	1009883a 	mov	r4,r2
    105c:	017fe544 	movi	r5,-107
    1060:	00015040 	call	1504 <__mulsi3>
    1064:	80a1883a 	add	r16,r16,r2
    1068:	e0bffd03 	ldbu	r2,-12(fp)
    106c:	1009883a 	mov	r4,r2
    1070:	017ffac4 	movi	r5,-21
    1074:	00015040 	call	1504 <__mulsi3>
    1078:	8085883a 	add	r2,r16,r2
    107c:	1005d23a 	srai	r2,r2,8
    1080:	10802004 	addi	r2,r2,128
    1084:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0)
    1088:	e0bff817 	ldw	r2,-32(fp)
    108c:	1000020e 	bge	r2,zero,1098 <read_444_format+0x304>
				Y = 0;
    1090:	e03ff815 	stw	zero,-32(fp)
    1094:	00000506 	br	10ac <read_444_format+0x318>
			else if (Y > 255)
    1098:	e0bff817 	ldw	r2,-32(fp)
    109c:	10804010 	cmplti	r2,r2,256
    10a0:	1000021e 	bne	r2,zero,10ac <read_444_format+0x318>
				Y = 255;
    10a4:	00803fc4 	movi	r2,255
    10a8:	e0bff815 	stw	r2,-32(fp)

			if (Cb < 0)
    10ac:	e0bff917 	ldw	r2,-28(fp)
    10b0:	1000020e 	bge	r2,zero,10bc <read_444_format+0x328>
				Cb = 0;
    10b4:	e03ff915 	stw	zero,-28(fp)
    10b8:	00000506 	br	10d0 <read_444_format+0x33c>
			else if (Cb > 255)
    10bc:	e0bff917 	ldw	r2,-28(fp)
    10c0:	10804010 	cmplti	r2,r2,256
    10c4:	1000021e 	bne	r2,zero,10d0 <read_444_format+0x33c>
				Cb = 255;
    10c8:	00803fc4 	movi	r2,255
    10cc:	e0bff915 	stw	r2,-28(fp)

			if (Cr < 0)
    10d0:	e0bffa17 	ldw	r2,-24(fp)
    10d4:	1000020e 	bge	r2,zero,10e0 <read_444_format+0x34c>
				Cr = 0;
    10d8:	e03ffa15 	stw	zero,-24(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
    10dc:	00000f06 	br	111c <read_444_format+0x388>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
    10e0:	e0bffa17 	ldw	r2,-24(fp)
    10e4:	10804010 	cmplti	r2,r2,256
    10e8:	10000c1e 	bne	r2,zero,111c <read_444_format+0x388>
				Cr = 255;
    10ec:	00803fc4 	movi	r2,255
    10f0:	e0bffa15 	stw	r2,-24(fp)

			for (; j > 0; j--)
    10f4:	00000906 	br	111c <read_444_format+0x388>
			{

				SEND1(Y);
    10f8:	e13ff817 	ldw	r4,-32(fp)
    10fc:	0000bfc0 	call	bfc <SEND1>
				SEND2(Cb);
    1100:	e13ff917 	ldw	r4,-28(fp)
    1104:	0000c400 	call	c40 <SEND2>
				SEND3(Cr);
    1108:	e13ffa17 	ldw	r4,-24(fp)
    110c:	0000c840 	call	c84 <SEND3>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
    1110:	e0bff717 	ldw	r2,-36(fp)
    1114:	10bfffc4 	addi	r2,r2,-1
    1118:	e0bff715 	stw	r2,-36(fp)
    111c:	e0bff717 	ldw	r2,-36(fp)
    1120:	00bff516 	blt	zero,r2,10f8 <read_444_format+0x364>
				SEND2(Cb);
				SEND3(Cr);
			}
		}

		input_ptr += incr;
    1124:	e0bffc0b 	ldhu	r2,-16(fp)
    1128:	e0ffff17 	ldw	r3,-4(fp)
    112c:	1885883a 	add	r2,r3,r2
    1130:	e0bfff15 	stw	r2,-4(fp)

	UINT16 rows = jpeg_encoder_structure->rows;
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i = rows; i > 0; i--)
    1134:	e0bff617 	ldw	r2,-40(fp)
    1138:	10bfffc4 	addi	r2,r2,-1
    113c:	e0bff615 	stw	r2,-40(fp)
    1140:	e0bff617 	ldw	r2,-40(fp)
    1144:	00bf2616 	blt	zero,r2,de0 <read_444_format+0x4c>
		}

		input_ptr += incr;
	}

	input_ptr -= incr;
    1148:	e0bffc0b 	ldhu	r2,-16(fp)
    114c:	0085c83a 	sub	r2,zero,r2
    1150:	e0ffff17 	ldw	r3,-4(fp)
    1154:	1885883a 	add	r2,r3,r2
    1158:	e0bfff15 	stw	r2,-4(fp)

	for (i = 8 - rows; i > 0; i--)
    115c:	e0bffb0b 	ldhu	r2,-20(fp)
    1160:	00c00204 	movi	r3,8
    1164:	1885c83a 	sub	r2,r3,r2
    1168:	e0bff615 	stw	r2,-40(fp)
    116c:	0000dd06 	br	14e4 <read_444_format+0x750>
	{
		for (j = cols * 3; j > 0;)
    1170:	e0fffb8b 	ldhu	r3,-18(fp)
    1174:	1805883a 	mov	r2,r3
    1178:	1085883a 	add	r2,r2,r2
    117c:	10c5883a 	add	r2,r2,r3
    1180:	e0bff715 	stw	r2,-36(fp)
    1184:	00006c06 	br	1338 <read_444_format+0x5a4>
		{
			R = *(input_ptr - (j--));
    1188:	e0bff717 	ldw	r2,-36(fp)
    118c:	0085c83a 	sub	r2,zero,r2
    1190:	e0ffff17 	ldw	r3,-4(fp)
    1194:	1885883a 	add	r2,r3,r2
    1198:	10800003 	ldbu	r2,0(r2)
    119c:	e0bffc85 	stb	r2,-14(fp)
    11a0:	e0bff717 	ldw	r2,-36(fp)
    11a4:	10bfffc4 	addi	r2,r2,-1
    11a8:	e0bff715 	stw	r2,-36(fp)
			G = *(input_ptr - (j--));
    11ac:	e0bff717 	ldw	r2,-36(fp)
    11b0:	0085c83a 	sub	r2,zero,r2
    11b4:	e0ffff17 	ldw	r3,-4(fp)
    11b8:	1885883a 	add	r2,r3,r2
    11bc:	10800003 	ldbu	r2,0(r2)
    11c0:	e0bffcc5 	stb	r2,-13(fp)
    11c4:	e0bff717 	ldw	r2,-36(fp)
    11c8:	10bfffc4 	addi	r2,r2,-1
    11cc:	e0bff715 	stw	r2,-36(fp)
			B = *(input_ptr - (j--));
    11d0:	e0bff717 	ldw	r2,-36(fp)
    11d4:	0085c83a 	sub	r2,zero,r2
    11d8:	e0ffff17 	ldw	r3,-4(fp)
    11dc:	1885883a 	add	r2,r3,r2
    11e0:	10800003 	ldbu	r2,0(r2)
    11e4:	e0bffd05 	stb	r2,-12(fp)
    11e8:	e0bff717 	ldw	r2,-36(fp)
    11ec:	10bfffc4 	addi	r2,r2,-1
    11f0:	e0bff715 	stw	r2,-36(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
    11f4:	e0bffc83 	ldbu	r2,-14(fp)
    11f8:	1009883a 	mov	r4,r2
    11fc:	01401344 	movi	r5,77
    1200:	00015040 	call	1504 <__mulsi3>
    1204:	1021883a 	mov	r16,r2
    1208:	e0bffcc3 	ldbu	r2,-13(fp)
    120c:	1009883a 	mov	r4,r2
    1210:	01402584 	movi	r5,150
    1214:	00015040 	call	1504 <__mulsi3>
    1218:	80a1883a 	add	r16,r16,r2
    121c:	e0bffd03 	ldbu	r2,-12(fp)
    1220:	1009883a 	mov	r4,r2
    1224:	01400744 	movi	r5,29
    1228:	00015040 	call	1504 <__mulsi3>
    122c:	8085883a 	add	r2,r16,r2
    1230:	1005d23a 	srai	r2,r2,8
    1234:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
    1238:	e0bffc83 	ldbu	r2,-14(fp)
    123c:	1009883a 	mov	r4,r2
    1240:	017ff544 	movi	r5,-43
    1244:	00015040 	call	1504 <__mulsi3>
    1248:	1021883a 	mov	r16,r2
    124c:	e0bffcc3 	ldbu	r2,-13(fp)
    1250:	1009883a 	mov	r4,r2
    1254:	017feac4 	movi	r5,-85
    1258:	00015040 	call	1504 <__mulsi3>
    125c:	8087883a 	add	r3,r16,r2
    1260:	e0bffd03 	ldbu	r2,-12(fp)
    1264:	100491fa 	slli	r2,r2,7
    1268:	1885883a 	add	r2,r3,r2
    126c:	1005d23a 	srai	r2,r2,8
    1270:	10802004 	addi	r2,r2,128
    1274:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
    1278:	e0bffc83 	ldbu	r2,-14(fp)
    127c:	102091fa 	slli	r16,r2,7
    1280:	e0bffcc3 	ldbu	r2,-13(fp)
    1284:	1009883a 	mov	r4,r2
    1288:	017fe544 	movi	r5,-107
    128c:	00015040 	call	1504 <__mulsi3>
    1290:	80a1883a 	add	r16,r16,r2
    1294:	e0bffd03 	ldbu	r2,-12(fp)
    1298:	1009883a 	mov	r4,r2
    129c:	017ffac4 	movi	r5,-21
    12a0:	00015040 	call	1504 <__mulsi3>
    12a4:	8085883a 	add	r2,r16,r2
    12a8:	1005d23a 	srai	r2,r2,8
    12ac:	10802004 	addi	r2,r2,128
    12b0:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0)
    12b4:	e0bff817 	ldw	r2,-32(fp)
    12b8:	1000020e 	bge	r2,zero,12c4 <read_444_format+0x530>
				Y = 0;
    12bc:	e03ff815 	stw	zero,-32(fp)
    12c0:	00000506 	br	12d8 <read_444_format+0x544>
			else if (Y > 255)
    12c4:	e0bff817 	ldw	r2,-32(fp)
    12c8:	10804010 	cmplti	r2,r2,256
    12cc:	1000021e 	bne	r2,zero,12d8 <read_444_format+0x544>
				Y = 255;
    12d0:	00803fc4 	movi	r2,255
    12d4:	e0bff815 	stw	r2,-32(fp)

			if (Cb < 0)
    12d8:	e0bff917 	ldw	r2,-28(fp)
    12dc:	1000020e 	bge	r2,zero,12e8 <read_444_format+0x554>
				Cb = 0;
    12e0:	e03ff915 	stw	zero,-28(fp)
    12e4:	00000506 	br	12fc <read_444_format+0x568>
			else if (Cb > 255)
    12e8:	e0bff917 	ldw	r2,-28(fp)
    12ec:	10804010 	cmplti	r2,r2,256
    12f0:	1000021e 	bne	r2,zero,12fc <read_444_format+0x568>
				Cb = 255;
    12f4:	00803fc4 	movi	r2,255
    12f8:	e0bff915 	stw	r2,-28(fp)

			if (Cr < 0)
    12fc:	e0bffa17 	ldw	r2,-24(fp)
    1300:	1000020e 	bge	r2,zero,130c <read_444_format+0x578>
				Cr = 0;
    1304:	e03ffa15 	stw	zero,-24(fp)
    1308:	00000506 	br	1320 <read_444_format+0x58c>
			else if (Cr > 255)
    130c:	e0bffa17 	ldw	r2,-24(fp)
    1310:	10804010 	cmplti	r2,r2,256
    1314:	1000021e 	bne	r2,zero,1320 <read_444_format+0x58c>
				Cr = 255;
    1318:	00803fc4 	movi	r2,255
    131c:	e0bffa15 	stw	r2,-24(fp)

			SEND1(Y);
    1320:	e13ff817 	ldw	r4,-32(fp)
    1324:	0000bfc0 	call	bfc <SEND1>
			SEND2(Cb);
    1328:	e13ff917 	ldw	r4,-28(fp)
    132c:	0000c400 	call	c40 <SEND2>
			SEND3(Cr);
    1330:	e13ffa17 	ldw	r4,-24(fp)
    1334:	0000c840 	call	c84 <SEND3>

	input_ptr -= incr;

	for (i = 8 - rows; i > 0; i--)
	{
		for (j = cols * 3; j > 0;)
    1338:	e0bff717 	ldw	r2,-36(fp)
    133c:	00bf9216 	blt	zero,r2,1188 <read_444_format+0x3f4>

			SEND1(Y);
			SEND2(Cb);
			SEND3(Cr);
		}
		if ((j = (8 - cols)) > 0)
    1340:	e0bffb8b 	ldhu	r2,-18(fp)
    1344:	00c00204 	movi	r3,8
    1348:	1885c83a 	sub	r2,r3,r2
    134c:	e0bff715 	stw	r2,-36(fp)
    1350:	e0bff717 	ldw	r2,-36(fp)
    1354:	0080600e 	bge	zero,r2,14d8 <read_444_format+0x744>
		{
			R = *(input_ptr - 3);
    1358:	e0bfff17 	ldw	r2,-4(fp)
    135c:	10bfff43 	ldbu	r2,-3(r2)
    1360:	e0bffc85 	stb	r2,-14(fp)
			G = *(input_ptr - 2);
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	10bfff83 	ldbu	r2,-2(r2)
    136c:	e0bffcc5 	stb	r2,-13(fp)
			B = *(input_ptr - 1);
    1370:	e0bfff17 	ldw	r2,-4(fp)
    1374:	10bfffc3 	ldbu	r2,-1(r2)
    1378:	e0bffd05 	stb	r2,-12(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
    137c:	e0bffc83 	ldbu	r2,-14(fp)
    1380:	1009883a 	mov	r4,r2
    1384:	01401344 	movi	r5,77
    1388:	00015040 	call	1504 <__mulsi3>
    138c:	1021883a 	mov	r16,r2
    1390:	e0bffcc3 	ldbu	r2,-13(fp)
    1394:	1009883a 	mov	r4,r2
    1398:	01402584 	movi	r5,150
    139c:	00015040 	call	1504 <__mulsi3>
    13a0:	80a1883a 	add	r16,r16,r2
    13a4:	e0bffd03 	ldbu	r2,-12(fp)
    13a8:	1009883a 	mov	r4,r2
    13ac:	01400744 	movi	r5,29
    13b0:	00015040 	call	1504 <__mulsi3>
    13b4:	8085883a 	add	r2,r16,r2
    13b8:	1005d23a 	srai	r2,r2,8
    13bc:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
    13c0:	e0bffc83 	ldbu	r2,-14(fp)
    13c4:	1009883a 	mov	r4,r2
    13c8:	017ff544 	movi	r5,-43
    13cc:	00015040 	call	1504 <__mulsi3>
    13d0:	1021883a 	mov	r16,r2
    13d4:	e0bffcc3 	ldbu	r2,-13(fp)
    13d8:	1009883a 	mov	r4,r2
    13dc:	017feac4 	movi	r5,-85
    13e0:	00015040 	call	1504 <__mulsi3>
    13e4:	8087883a 	add	r3,r16,r2
    13e8:	e0bffd03 	ldbu	r2,-12(fp)
    13ec:	100491fa 	slli	r2,r2,7
    13f0:	1885883a 	add	r2,r3,r2
    13f4:	1005d23a 	srai	r2,r2,8
    13f8:	10802004 	addi	r2,r2,128
    13fc:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
    1400:	e0bffc83 	ldbu	r2,-14(fp)
    1404:	102091fa 	slli	r16,r2,7
    1408:	e0bffcc3 	ldbu	r2,-13(fp)
    140c:	1009883a 	mov	r4,r2
    1410:	017fe544 	movi	r5,-107
    1414:	00015040 	call	1504 <__mulsi3>
    1418:	80a1883a 	add	r16,r16,r2
    141c:	e0bffd03 	ldbu	r2,-12(fp)
    1420:	1009883a 	mov	r4,r2
    1424:	017ffac4 	movi	r5,-21
    1428:	00015040 	call	1504 <__mulsi3>
    142c:	8085883a 	add	r2,r16,r2
    1430:	1005d23a 	srai	r2,r2,8
    1434:	10802004 	addi	r2,r2,128
    1438:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0)
    143c:	e0bff817 	ldw	r2,-32(fp)
    1440:	1000020e 	bge	r2,zero,144c <read_444_format+0x6b8>
				Y = 0;
    1444:	e03ff815 	stw	zero,-32(fp)
    1448:	00000506 	br	1460 <read_444_format+0x6cc>
			else if (Y > 255)
    144c:	e0bff817 	ldw	r2,-32(fp)
    1450:	10804010 	cmplti	r2,r2,256
    1454:	1000021e 	bne	r2,zero,1460 <read_444_format+0x6cc>
				Y = 255;
    1458:	00803fc4 	movi	r2,255
    145c:	e0bff815 	stw	r2,-32(fp)

			if (Cb < 0)
    1460:	e0bff917 	ldw	r2,-28(fp)
    1464:	1000020e 	bge	r2,zero,1470 <read_444_format+0x6dc>
				Cb = 0;
    1468:	e03ff915 	stw	zero,-28(fp)
    146c:	00000506 	br	1484 <read_444_format+0x6f0>
			else if (Cb > 255)
    1470:	e0bff917 	ldw	r2,-28(fp)
    1474:	10804010 	cmplti	r2,r2,256
    1478:	1000021e 	bne	r2,zero,1484 <read_444_format+0x6f0>
				Cb = 255;
    147c:	00803fc4 	movi	r2,255
    1480:	e0bff915 	stw	r2,-28(fp)

			if (Cr < 0)
    1484:	e0bffa17 	ldw	r2,-24(fp)
    1488:	1000020e 	bge	r2,zero,1494 <read_444_format+0x700>
				Cr = 0;
    148c:	e03ffa15 	stw	zero,-24(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
    1490:	00000f06 	br	14d0 <read_444_format+0x73c>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
    1494:	e0bffa17 	ldw	r2,-24(fp)
    1498:	10804010 	cmplti	r2,r2,256
    149c:	10000c1e 	bne	r2,zero,14d0 <read_444_format+0x73c>
				Cr = 255;
    14a0:	00803fc4 	movi	r2,255
    14a4:	e0bffa15 	stw	r2,-24(fp)

			for (; j > 0; j--)
    14a8:	00000906 	br	14d0 <read_444_format+0x73c>
			{
				SEND1(Y);
    14ac:	e13ff817 	ldw	r4,-32(fp)
    14b0:	0000bfc0 	call	bfc <SEND1>
				SEND2(Cb);
    14b4:	e13ff917 	ldw	r4,-28(fp)
    14b8:	0000c400 	call	c40 <SEND2>
				SEND3(Cr);
    14bc:	e13ffa17 	ldw	r4,-24(fp)
    14c0:	0000c840 	call	c84 <SEND3>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
    14c4:	e0bff717 	ldw	r2,-36(fp)
    14c8:	10bfffc4 	addi	r2,r2,-1
    14cc:	e0bff715 	stw	r2,-36(fp)
    14d0:	e0bff717 	ldw	r2,-36(fp)
    14d4:	00bff516 	blt	zero,r2,14ac <read_444_format+0x718>
		input_ptr += incr;
	}

	input_ptr -= incr;

	for (i = 8 - rows; i > 0; i--)
    14d8:	e0bff617 	ldw	r2,-40(fp)
    14dc:	10bfffc4 	addi	r2,r2,-1
    14e0:	e0bff615 	stw	r2,-40(fp)
    14e4:	e0bff617 	ldw	r2,-40(fp)
    14e8:	00bf2116 	blt	zero,r2,1170 <read_444_format+0x3dc>
				SEND2(Cb);
				SEND3(Cr);
			}
		}
	}
}
    14ec:	e037883a 	mov	sp,fp
    14f0:	dfc00217 	ldw	ra,8(sp)
    14f4:	df000117 	ldw	fp,4(sp)
    14f8:	dc000017 	ldw	r16,0(sp)
    14fc:	dec00304 	addi	sp,sp,12
    1500:	f800283a 	ret

00001504 <__mulsi3>:
    1504:	0005883a 	mov	r2,zero
    1508:	20000726 	beq	r4,zero,1528 <__mulsi3+0x24>
    150c:	20c0004c 	andi	r3,r4,1
    1510:	2008d07a 	srli	r4,r4,1
    1514:	18000126 	beq	r3,zero,151c <__mulsi3+0x18>
    1518:	1145883a 	add	r2,r2,r5
    151c:	294b883a 	add	r5,r5,r5
    1520:	203ffa1e 	bne	r4,zero,150c <__mulsi3+0x8>
    1524:	f800283a 	ret
    1528:	f800283a 	ret

0000152c <_fclose_r>:
    152c:	defffc04 	addi	sp,sp,-16
    1530:	dc400115 	stw	r17,4(sp)
    1534:	dc000015 	stw	r16,0(sp)
    1538:	dfc00315 	stw	ra,12(sp)
    153c:	dc800215 	stw	r18,8(sp)
    1540:	2821883a 	mov	r16,r5
    1544:	2023883a 	mov	r17,r4
    1548:	28003426 	beq	r5,zero,161c <_fclose_r+0xf0>
    154c:	0001b400 	call	1b40 <__sfp_lock_acquire>
    1550:	88000226 	beq	r17,zero,155c <_fclose_r+0x30>
    1554:	88800e17 	ldw	r2,56(r17)
    1558:	10003826 	beq	r2,zero,163c <_fclose_r+0x110>
    155c:	8080030f 	ldh	r2,12(r16)
    1560:	10002526 	beq	r2,zero,15f8 <_fclose_r+0xcc>
    1564:	8809883a 	mov	r4,r17
    1568:	800b883a 	mov	r5,r16
    156c:	000167c0 	call	167c <_fflush_r>
    1570:	1025883a 	mov	r18,r2
    1574:	80800b17 	ldw	r2,44(r16)
    1578:	10000426 	beq	r2,zero,158c <_fclose_r+0x60>
    157c:	81400717 	ldw	r5,28(r16)
    1580:	8809883a 	mov	r4,r17
    1584:	103ee83a 	callr	r2
    1588:	10003516 	blt	r2,zero,1660 <_fclose_r+0x134>
    158c:	8080030b 	ldhu	r2,12(r16)
    1590:	1080200c 	andi	r2,r2,128
    1594:	10bfffcc 	andi	r2,r2,65535
    1598:	10a0001c 	xori	r2,r2,32768
    159c:	10a00004 	addi	r2,r2,-32768
    15a0:	10002b1e 	bne	r2,zero,1650 <_fclose_r+0x124>
    15a4:	81400c17 	ldw	r5,48(r16)
    15a8:	28000526 	beq	r5,zero,15c0 <_fclose_r+0x94>
    15ac:	80801004 	addi	r2,r16,64
    15b0:	28800226 	beq	r5,r2,15bc <_fclose_r+0x90>
    15b4:	8809883a 	mov	r4,r17
    15b8:	00020840 	call	2084 <_free_r>
    15bc:	80000c15 	stw	zero,48(r16)
    15c0:	81401117 	ldw	r5,68(r16)
    15c4:	28000326 	beq	r5,zero,15d4 <_fclose_r+0xa8>
    15c8:	8809883a 	mov	r4,r17
    15cc:	00020840 	call	2084 <_free_r>
    15d0:	80001115 	stw	zero,68(r16)
    15d4:	8000030d 	sth	zero,12(r16)
    15d8:	0001b440 	call	1b44 <__sfp_lock_release>
    15dc:	9005883a 	mov	r2,r18
    15e0:	dfc00317 	ldw	ra,12(sp)
    15e4:	dc800217 	ldw	r18,8(sp)
    15e8:	dc400117 	ldw	r17,4(sp)
    15ec:	dc000017 	ldw	r16,0(sp)
    15f0:	dec00404 	addi	sp,sp,16
    15f4:	f800283a 	ret
    15f8:	0001b440 	call	1b44 <__sfp_lock_release>
    15fc:	0025883a 	mov	r18,zero
    1600:	9005883a 	mov	r2,r18
    1604:	dfc00317 	ldw	ra,12(sp)
    1608:	dc800217 	ldw	r18,8(sp)
    160c:	dc400117 	ldw	r17,4(sp)
    1610:	dc000017 	ldw	r16,0(sp)
    1614:	dec00404 	addi	sp,sp,16
    1618:	f800283a 	ret
    161c:	0025883a 	mov	r18,zero
    1620:	9005883a 	mov	r2,r18
    1624:	dfc00317 	ldw	ra,12(sp)
    1628:	dc800217 	ldw	r18,8(sp)
    162c:	dc400117 	ldw	r17,4(sp)
    1630:	dc000017 	ldw	r16,0(sp)
    1634:	dec00404 	addi	sp,sp,16
    1638:	f800283a 	ret
    163c:	8809883a 	mov	r4,r17
    1640:	00019380 	call	1938 <__sinit>
    1644:	8080030f 	ldh	r2,12(r16)
    1648:	103fc61e 	bne	r2,zero,1564 <_fclose_r+0x38>
    164c:	003fea06 	br	15f8 <_fclose_r+0xcc>
    1650:	81400417 	ldw	r5,16(r16)
    1654:	8809883a 	mov	r4,r17
    1658:	00020840 	call	2084 <_free_r>
    165c:	003fd106 	br	15a4 <_fclose_r+0x78>
    1660:	04bfffc4 	movi	r18,-1
    1664:	003fc906 	br	158c <_fclose_r+0x60>

00001668 <fclose>:
    1668:	00800074 	movhi	r2,1
    166c:	1098ae04 	addi	r2,r2,25272
    1670:	200b883a 	mov	r5,r4
    1674:	11000017 	ldw	r4,0(r2)
    1678:	000152c1 	jmpi	152c <_fclose_r>

0000167c <_fflush_r>:
    167c:	defffb04 	addi	sp,sp,-20
    1680:	dcc00315 	stw	r19,12(sp)
    1684:	dc400115 	stw	r17,4(sp)
    1688:	dfc00415 	stw	ra,16(sp)
    168c:	dc800215 	stw	r18,8(sp)
    1690:	dc000015 	stw	r16,0(sp)
    1694:	2027883a 	mov	r19,r4
    1698:	2823883a 	mov	r17,r5
    169c:	20000226 	beq	r4,zero,16a8 <_fflush_r+0x2c>
    16a0:	20800e17 	ldw	r2,56(r4)
    16a4:	10005726 	beq	r2,zero,1804 <_fflush_r+0x188>
    16a8:	8880030b 	ldhu	r2,12(r17)
    16ac:	10c0020c 	andi	r3,r2,8
    16b0:	18ffffcc 	andi	r3,r3,65535
    16b4:	18e0001c 	xori	r3,r3,32768
    16b8:	18e00004 	addi	r3,r3,-32768
    16bc:	1800311e 	bne	r3,zero,1784 <_fflush_r+0x108>
    16c0:	89000117 	ldw	r4,4(r17)
    16c4:	10c20014 	ori	r3,r2,2048
    16c8:	88c0030d 	sth	r3,12(r17)
    16cc:	180b883a 	mov	r5,r3
    16d0:	0100520e 	bge	zero,r4,181c <_fflush_r+0x1a0>
    16d4:	88c00a17 	ldw	r3,40(r17)
    16d8:	18002226 	beq	r3,zero,1764 <_fflush_r+0xe8>
    16dc:	1084000c 	andi	r2,r2,4096
    16e0:	10bfffcc 	andi	r2,r2,65535
    16e4:	10a0001c 	xori	r2,r2,32768
    16e8:	10a00004 	addi	r2,r2,-32768
    16ec:	10004e26 	beq	r2,zero,1828 <_fflush_r+0x1ac>
    16f0:	8c001417 	ldw	r16,80(r17)
    16f4:	2940010c 	andi	r5,r5,4
    16f8:	297fffcc 	andi	r5,r5,65535
    16fc:	2960001c 	xori	r5,r5,32768
    1700:	29600004 	addi	r5,r5,-32768
    1704:	28000626 	beq	r5,zero,1720 <_fflush_r+0xa4>
    1708:	89000117 	ldw	r4,4(r17)
    170c:	88800c17 	ldw	r2,48(r17)
    1710:	8121c83a 	sub	r16,r16,r4
    1714:	10000226 	beq	r2,zero,1720 <_fflush_r+0xa4>
    1718:	88800f17 	ldw	r2,60(r17)
    171c:	80a1c83a 	sub	r16,r16,r2
    1720:	89400717 	ldw	r5,28(r17)
    1724:	9809883a 	mov	r4,r19
    1728:	800d883a 	mov	r6,r16
    172c:	000f883a 	mov	r7,zero
    1730:	183ee83a 	callr	r3
    1734:	8080281e 	bne	r16,r2,17d8 <_fflush_r+0x15c>
    1738:	8880030b 	ldhu	r2,12(r17)
    173c:	88c00417 	ldw	r3,16(r17)
    1740:	88000115 	stw	zero,4(r17)
    1744:	113dffcc 	andi	r4,r2,63487
    1748:	1084000c 	andi	r2,r2,4096
    174c:	10bfffcc 	andi	r2,r2,65535
    1750:	10a0001c 	xori	r2,r2,32768
    1754:	8900030d 	sth	r4,12(r17)
    1758:	88c00015 	stw	r3,0(r17)
    175c:	10a00004 	addi	r2,r2,-32768
    1760:	10002c1e 	bne	r2,zero,1814 <_fflush_r+0x198>
    1764:	0005883a 	mov	r2,zero
    1768:	dfc00417 	ldw	ra,16(sp)
    176c:	dcc00317 	ldw	r19,12(sp)
    1770:	dc800217 	ldw	r18,8(sp)
    1774:	dc400117 	ldw	r17,4(sp)
    1778:	dc000017 	ldw	r16,0(sp)
    177c:	dec00504 	addi	sp,sp,20
    1780:	f800283a 	ret
    1784:	8c800417 	ldw	r18,16(r17)
    1788:	903ff626 	beq	r18,zero,1764 <_fflush_r+0xe8>
    178c:	8c000017 	ldw	r16,0(r17)
    1790:	108000cc 	andi	r2,r2,3
    1794:	8c800015 	stw	r18,0(r17)
    1798:	84a1c83a 	sub	r16,r16,r18
    179c:	10001b1e 	bne	r2,zero,180c <_fflush_r+0x190>
    17a0:	88800517 	ldw	r2,20(r17)
    17a4:	88800215 	stw	r2,8(r17)
    17a8:	04000316 	blt	zero,r16,17b8 <_fflush_r+0x13c>
    17ac:	003fed06 	br	1764 <_fflush_r+0xe8>
    17b0:	90a5883a 	add	r18,r18,r2
    17b4:	043feb0e 	bge	zero,r16,1764 <_fflush_r+0xe8>
    17b8:	88800917 	ldw	r2,36(r17)
    17bc:	89400717 	ldw	r5,28(r17)
    17c0:	800f883a 	mov	r7,r16
    17c4:	900d883a 	mov	r6,r18
    17c8:	9809883a 	mov	r4,r19
    17cc:	103ee83a 	callr	r2
    17d0:	80a1c83a 	sub	r16,r16,r2
    17d4:	00bff616 	blt	zero,r2,17b0 <_fflush_r+0x134>
    17d8:	88c0030b 	ldhu	r3,12(r17)
    17dc:	00bfffc4 	movi	r2,-1
    17e0:	18c01014 	ori	r3,r3,64
    17e4:	88c0030d 	sth	r3,12(r17)
    17e8:	dfc00417 	ldw	ra,16(sp)
    17ec:	dcc00317 	ldw	r19,12(sp)
    17f0:	dc800217 	ldw	r18,8(sp)
    17f4:	dc400117 	ldw	r17,4(sp)
    17f8:	dc000017 	ldw	r16,0(sp)
    17fc:	dec00504 	addi	sp,sp,20
    1800:	f800283a 	ret
    1804:	00019380 	call	1938 <__sinit>
    1808:	003fa706 	br	16a8 <_fflush_r+0x2c>
    180c:	0005883a 	mov	r2,zero
    1810:	003fe406 	br	17a4 <_fflush_r+0x128>
    1814:	8c001415 	stw	r16,80(r17)
    1818:	003fd206 	br	1764 <_fflush_r+0xe8>
    181c:	88c00f17 	ldw	r3,60(r17)
    1820:	00ffac16 	blt	zero,r3,16d4 <_fflush_r+0x58>
    1824:	003fcf06 	br	1764 <_fflush_r+0xe8>
    1828:	89400717 	ldw	r5,28(r17)
    182c:	9809883a 	mov	r4,r19
    1830:	000d883a 	mov	r6,zero
    1834:	01c00044 	movi	r7,1
    1838:	183ee83a 	callr	r3
    183c:	1021883a 	mov	r16,r2
    1840:	00bfffc4 	movi	r2,-1
    1844:	80800326 	beq	r16,r2,1854 <_fflush_r+0x1d8>
    1848:	8940030b 	ldhu	r5,12(r17)
    184c:	88c00a17 	ldw	r3,40(r17)
    1850:	003fa806 	br	16f4 <_fflush_r+0x78>
    1854:	98c00017 	ldw	r3,0(r19)
    1858:	00800744 	movi	r2,29
    185c:	18bfde1e 	bne	r3,r2,17d8 <_fflush_r+0x15c>
    1860:	003fc006 	br	1764 <_fflush_r+0xe8>

00001864 <fflush>:
    1864:	200b883a 	mov	r5,r4
    1868:	20000426 	beq	r4,zero,187c <fflush+0x18>
    186c:	00800074 	movhi	r2,1
    1870:	1098ae04 	addi	r2,r2,25272
    1874:	11000017 	ldw	r4,0(r2)
    1878:	000167c1 	jmpi	167c <_fflush_r>
    187c:	00800074 	movhi	r2,1
    1880:	1098ad04 	addi	r2,r2,25268
    1884:	11000017 	ldw	r4,0(r2)
    1888:	01400034 	movhi	r5,0
    188c:	29459f04 	addi	r5,r5,5756
    1890:	00029581 	jmpi	2958 <_fwalk_reent>

00001894 <__fp_lock>:
    1894:	0005883a 	mov	r2,zero
    1898:	f800283a 	ret

0000189c <__fp_unlock>:
    189c:	0005883a 	mov	r2,zero
    18a0:	f800283a 	ret

000018a4 <_cleanup_r>:
    18a4:	01400034 	movhi	r5,0
    18a8:	29459a04 	addi	r5,r5,5736
    18ac:	00028b01 	jmpi	28b0 <_fwalk>

000018b0 <__sfmoreglue>:
    18b0:	defffc04 	addi	sp,sp,-16
    18b4:	dc800215 	stw	r18,8(sp)
    18b8:	2825883a 	mov	r18,r5
    18bc:	dc000015 	stw	r16,0(sp)
    18c0:	01401704 	movi	r5,92
    18c4:	2021883a 	mov	r16,r4
    18c8:	9009883a 	mov	r4,r18
    18cc:	dfc00315 	stw	ra,12(sp)
    18d0:	dc400115 	stw	r17,4(sp)
    18d4:	00015040 	call	1504 <__mulsi3>
    18d8:	8009883a 	mov	r4,r16
    18dc:	11400304 	addi	r5,r2,12
    18e0:	1023883a 	mov	r17,r2
    18e4:	0002be00 	call	2be0 <_malloc_r>
    18e8:	1021883a 	mov	r16,r2
    18ec:	10000726 	beq	r2,zero,190c <__sfmoreglue+0x5c>
    18f0:	11000304 	addi	r4,r2,12
    18f4:	10000015 	stw	zero,0(r2)
    18f8:	14800115 	stw	r18,4(r2)
    18fc:	11000215 	stw	r4,8(r2)
    1900:	000b883a 	mov	r5,zero
    1904:	880d883a 	mov	r6,r17
    1908:	00034a40 	call	34a4 <memset>
    190c:	8005883a 	mov	r2,r16
    1910:	dfc00317 	ldw	ra,12(sp)
    1914:	dc800217 	ldw	r18,8(sp)
    1918:	dc400117 	ldw	r17,4(sp)
    191c:	dc000017 	ldw	r16,0(sp)
    1920:	dec00404 	addi	sp,sp,16
    1924:	f800283a 	ret

00001928 <_cleanup>:
    1928:	00800074 	movhi	r2,1
    192c:	1098ad04 	addi	r2,r2,25268
    1930:	11000017 	ldw	r4,0(r2)
    1934:	00018a41 	jmpi	18a4 <_cleanup_r>

00001938 <__sinit>:
    1938:	20800e17 	ldw	r2,56(r4)
    193c:	1000401e 	bne	r2,zero,1a40 <__sinit+0x108>
    1940:	21400117 	ldw	r5,4(r4)
    1944:	01800034 	movhi	r6,0
    1948:	31862904 	addi	r6,r6,6308
    194c:	20c00217 	ldw	r3,8(r4)
    1950:	21800f15 	stw	r6,60(r4)
    1954:	2080bb04 	addi	r2,r4,748
    1958:	02400044 	movi	r9,1
    195c:	018000c4 	movi	r6,3
    1960:	2180b915 	stw	r6,740(r4)
    1964:	2080ba15 	stw	r2,744(r4)
    1968:	22400e15 	stw	r9,56(r4)
    196c:	20800317 	ldw	r2,12(r4)
    1970:	2000b815 	stw	zero,736(r4)
    1974:	02000034 	movhi	r8,0
    1978:	420e5f04 	addi	r8,r8,14716
    197c:	01c00034 	movhi	r7,0
    1980:	39ce7404 	addi	r7,r7,14800
    1984:	01800034 	movhi	r6,0
    1988:	318e9604 	addi	r6,r6,14936
    198c:	01000034 	movhi	r4,0
    1990:	210ead04 	addi	r4,r4,15028
    1994:	02800104 	movi	r10,4
    1998:	28000015 	stw	zero,0(r5)
    199c:	28000115 	stw	zero,4(r5)
    19a0:	28000215 	stw	zero,8(r5)
    19a4:	2a80030d 	sth	r10,12(r5)
    19a8:	2800038d 	sth	zero,14(r5)
    19ac:	28000415 	stw	zero,16(r5)
    19b0:	28000515 	stw	zero,20(r5)
    19b4:	28000615 	stw	zero,24(r5)
    19b8:	29400715 	stw	r5,28(r5)
    19bc:	2a000815 	stw	r8,32(r5)
    19c0:	29c00915 	stw	r7,36(r5)
    19c4:	29800a15 	stw	r6,40(r5)
    19c8:	29000b15 	stw	r4,44(r5)
    19cc:	01400284 	movi	r5,10
    19d0:	18000015 	stw	zero,0(r3)
    19d4:	18000115 	stw	zero,4(r3)
    19d8:	18000215 	stw	zero,8(r3)
    19dc:	1940030d 	sth	r5,12(r3)
    19e0:	1a40038d 	sth	r9,14(r3)
    19e4:	18000415 	stw	zero,16(r3)
    19e8:	18000515 	stw	zero,20(r3)
    19ec:	18000615 	stw	zero,24(r3)
    19f0:	18c00715 	stw	r3,28(r3)
    19f4:	1a000815 	stw	r8,32(r3)
    19f8:	19c00915 	stw	r7,36(r3)
    19fc:	19800a15 	stw	r6,40(r3)
    1a00:	19000b15 	stw	r4,44(r3)
    1a04:	00c00484 	movi	r3,18
    1a08:	10c0030d 	sth	r3,12(r2)
    1a0c:	00c00084 	movi	r3,2
    1a10:	10000015 	stw	zero,0(r2)
    1a14:	10000115 	stw	zero,4(r2)
    1a18:	10000215 	stw	zero,8(r2)
    1a1c:	10c0038d 	sth	r3,14(r2)
    1a20:	10000415 	stw	zero,16(r2)
    1a24:	10000515 	stw	zero,20(r2)
    1a28:	10000615 	stw	zero,24(r2)
    1a2c:	10800715 	stw	r2,28(r2)
    1a30:	12000815 	stw	r8,32(r2)
    1a34:	11c00915 	stw	r7,36(r2)
    1a38:	11800a15 	stw	r6,40(r2)
    1a3c:	11000b15 	stw	r4,44(r2)
    1a40:	f800283a 	ret

00001a44 <__sfp>:
    1a44:	defffc04 	addi	sp,sp,-16
    1a48:	00800074 	movhi	r2,1
    1a4c:	1098ad04 	addi	r2,r2,25268
    1a50:	dc400115 	stw	r17,4(sp)
    1a54:	14400017 	ldw	r17,0(r2)
    1a58:	dc800215 	stw	r18,8(sp)
    1a5c:	dfc00315 	stw	ra,12(sp)
    1a60:	88800e17 	ldw	r2,56(r17)
    1a64:	dc000015 	stw	r16,0(sp)
    1a68:	2025883a 	mov	r18,r4
    1a6c:	10002826 	beq	r2,zero,1b10 <__sfp+0xcc>
    1a70:	8c40b804 	addi	r17,r17,736
    1a74:	043fffc4 	movi	r16,-1
    1a78:	89400117 	ldw	r5,4(r17)
    1a7c:	88800217 	ldw	r2,8(r17)
    1a80:	297fffc4 	addi	r5,r5,-1
    1a84:	28000a16 	blt	r5,zero,1ab0 <__sfp+0x6c>
    1a88:	10c0030f 	ldh	r3,12(r2)
    1a8c:	18000c26 	beq	r3,zero,1ac0 <__sfp+0x7c>
    1a90:	10c01a04 	addi	r3,r2,104
    1a94:	00000206 	br	1aa0 <__sfp+0x5c>
    1a98:	19bfe90f 	ldh	r6,-92(r3)
    1a9c:	30000826 	beq	r6,zero,1ac0 <__sfp+0x7c>
    1aa0:	297fffc4 	addi	r5,r5,-1
    1aa4:	18bffd04 	addi	r2,r3,-12
    1aa8:	18c01704 	addi	r3,r3,92
    1aac:	2c3ffa1e 	bne	r5,r16,1a98 <__sfp+0x54>
    1ab0:	88800017 	ldw	r2,0(r17)
    1ab4:	10001926 	beq	r2,zero,1b1c <__sfp+0xd8>
    1ab8:	1023883a 	mov	r17,r2
    1abc:	003fee06 	br	1a78 <__sfp+0x34>
    1ac0:	00ffffc4 	movi	r3,-1
    1ac4:	10c0038d 	sth	r3,14(r2)
    1ac8:	00c00044 	movi	r3,1
    1acc:	10c0030d 	sth	r3,12(r2)
    1ad0:	10000015 	stw	zero,0(r2)
    1ad4:	10000215 	stw	zero,8(r2)
    1ad8:	10000115 	stw	zero,4(r2)
    1adc:	10000415 	stw	zero,16(r2)
    1ae0:	10000515 	stw	zero,20(r2)
    1ae4:	10000615 	stw	zero,24(r2)
    1ae8:	10000c15 	stw	zero,48(r2)
    1aec:	10000d15 	stw	zero,52(r2)
    1af0:	10001115 	stw	zero,68(r2)
    1af4:	10001215 	stw	zero,72(r2)
    1af8:	dfc00317 	ldw	ra,12(sp)
    1afc:	dc800217 	ldw	r18,8(sp)
    1b00:	dc400117 	ldw	r17,4(sp)
    1b04:	dc000017 	ldw	r16,0(sp)
    1b08:	dec00404 	addi	sp,sp,16
    1b0c:	f800283a 	ret
    1b10:	8809883a 	mov	r4,r17
    1b14:	00019380 	call	1938 <__sinit>
    1b18:	003fd506 	br	1a70 <__sfp+0x2c>
    1b1c:	9009883a 	mov	r4,r18
    1b20:	01400104 	movi	r5,4
    1b24:	00018b00 	call	18b0 <__sfmoreglue>
    1b28:	88800015 	stw	r2,0(r17)
    1b2c:	103fe21e 	bne	r2,zero,1ab8 <__sfp+0x74>
    1b30:	00800304 	movi	r2,12
    1b34:	90800015 	stw	r2,0(r18)
    1b38:	0005883a 	mov	r2,zero
    1b3c:	003fee06 	br	1af8 <__sfp+0xb4>

00001b40 <__sfp_lock_acquire>:
    1b40:	f800283a 	ret

00001b44 <__sfp_lock_release>:
    1b44:	f800283a 	ret

00001b48 <__sinit_lock_acquire>:
    1b48:	f800283a 	ret

00001b4c <__sinit_lock_release>:
    1b4c:	f800283a 	ret

00001b50 <__fp_lock_all>:
    1b50:	00800074 	movhi	r2,1
    1b54:	1098ae04 	addi	r2,r2,25272
    1b58:	11000017 	ldw	r4,0(r2)
    1b5c:	01400034 	movhi	r5,0
    1b60:	29462504 	addi	r5,r5,6292
    1b64:	00028b01 	jmpi	28b0 <_fwalk>

00001b68 <__fp_unlock_all>:
    1b68:	00800074 	movhi	r2,1
    1b6c:	1098ae04 	addi	r2,r2,25272
    1b70:	11000017 	ldw	r4,0(r2)
    1b74:	01400034 	movhi	r5,0
    1b78:	29462704 	addi	r5,r5,6300
    1b7c:	00028b01 	jmpi	28b0 <_fwalk>

00001b80 <_fopen_r>:
    1b80:	defffa04 	addi	sp,sp,-24
    1b84:	dcc00415 	stw	r19,16(sp)
    1b88:	2827883a 	mov	r19,r5
    1b8c:	300b883a 	mov	r5,r6
    1b90:	d80d883a 	mov	r6,sp
    1b94:	dc800315 	stw	r18,12(sp)
    1b98:	dc400215 	stw	r17,8(sp)
    1b9c:	dfc00515 	stw	ra,20(sp)
    1ba0:	dc000115 	stw	r16,4(sp)
    1ba4:	2025883a 	mov	r18,r4
    1ba8:	0008d6c0 	call	8d6c <__sflags>
    1bac:	1023883a 	mov	r17,r2
    1bb0:	10002926 	beq	r2,zero,1c58 <_fopen_r+0xd8>
    1bb4:	9009883a 	mov	r4,r18
    1bb8:	0001a440 	call	1a44 <__sfp>
    1bbc:	1021883a 	mov	r16,r2
    1bc0:	10002526 	beq	r2,zero,1c58 <_fopen_r+0xd8>
    1bc4:	d9800017 	ldw	r6,0(sp)
    1bc8:	9009883a 	mov	r4,r18
    1bcc:	980b883a 	mov	r5,r19
    1bd0:	01c06d84 	movi	r7,438
    1bd4:	00035800 	call	3580 <_open_r>
    1bd8:	10001c16 	blt	r2,zero,1c4c <_fopen_r+0xcc>
    1bdc:	8080038d 	sth	r2,14(r16)
    1be0:	00800034 	movhi	r2,0
    1be4:	108e5f04 	addi	r2,r2,14716
    1be8:	80800815 	stw	r2,32(r16)
    1bec:	00800034 	movhi	r2,0
    1bf0:	108e7404 	addi	r2,r2,14800
    1bf4:	80800915 	stw	r2,36(r16)
    1bf8:	00800034 	movhi	r2,0
    1bfc:	108e9604 	addi	r2,r2,14936
    1c00:	88c0400c 	andi	r3,r17,256
    1c04:	80800a15 	stw	r2,40(r16)
    1c08:	00800034 	movhi	r2,0
    1c0c:	108ead04 	addi	r2,r2,15028
    1c10:	80800b15 	stw	r2,44(r16)
    1c14:	18bfffcc 	andi	r2,r3,65535
    1c18:	10a0001c 	xori	r2,r2,32768
    1c1c:	8440030d 	sth	r17,12(r16)
    1c20:	84000715 	stw	r16,28(r16)
    1c24:	10a00004 	addi	r2,r2,-32768
    1c28:	1000141e 	bne	r2,zero,1c7c <_fopen_r+0xfc>
    1c2c:	8005883a 	mov	r2,r16
    1c30:	dfc00517 	ldw	ra,20(sp)
    1c34:	dcc00417 	ldw	r19,16(sp)
    1c38:	dc800317 	ldw	r18,12(sp)
    1c3c:	dc400217 	ldw	r17,8(sp)
    1c40:	dc000117 	ldw	r16,4(sp)
    1c44:	dec00604 	addi	sp,sp,24
    1c48:	f800283a 	ret
    1c4c:	0001b400 	call	1b40 <__sfp_lock_acquire>
    1c50:	8000030d 	sth	zero,12(r16)
    1c54:	0001b440 	call	1b44 <__sfp_lock_release>
    1c58:	0021883a 	mov	r16,zero
    1c5c:	8005883a 	mov	r2,r16
    1c60:	dfc00517 	ldw	ra,20(sp)
    1c64:	dcc00417 	ldw	r19,16(sp)
    1c68:	dc800317 	ldw	r18,12(sp)
    1c6c:	dc400217 	ldw	r17,8(sp)
    1c70:	dc000117 	ldw	r16,4(sp)
    1c74:	dec00604 	addi	sp,sp,24
    1c78:	f800283a 	ret
    1c7c:	9009883a 	mov	r4,r18
    1c80:	800b883a 	mov	r5,r16
    1c84:	000d883a 	mov	r6,zero
    1c88:	01c00084 	movi	r7,2
    1c8c:	00023b00 	call	23b0 <_fseek_r>
    1c90:	8005883a 	mov	r2,r16
    1c94:	dfc00517 	ldw	ra,20(sp)
    1c98:	dcc00417 	ldw	r19,16(sp)
    1c9c:	dc800317 	ldw	r18,12(sp)
    1ca0:	dc400217 	ldw	r17,8(sp)
    1ca4:	dc000117 	ldw	r16,4(sp)
    1ca8:	dec00604 	addi	sp,sp,24
    1cac:	f800283a 	ret

00001cb0 <fopen>:
    1cb0:	00c00074 	movhi	r3,1
    1cb4:	18d8ae04 	addi	r3,r3,25272
    1cb8:	2005883a 	mov	r2,r4
    1cbc:	19000017 	ldw	r4,0(r3)
    1cc0:	280d883a 	mov	r6,r5
    1cc4:	100b883a 	mov	r5,r2
    1cc8:	0001b801 	jmpi	1b80 <_fopen_r>

00001ccc <_fread_r>:
    1ccc:	defff504 	addi	sp,sp,-44
    1cd0:	dd000515 	stw	r20,20(sp)
    1cd4:	dcc00415 	stw	r19,16(sp)
    1cd8:	2029883a 	mov	r20,r4
    1cdc:	2827883a 	mov	r19,r5
    1ce0:	3809883a 	mov	r4,r7
    1ce4:	300b883a 	mov	r5,r6
    1ce8:	ddc00815 	stw	r23,32(sp)
    1cec:	dd800715 	stw	r22,28(sp)
    1cf0:	dd400615 	stw	r21,24(sp)
    1cf4:	dc000115 	stw	r16,4(sp)
    1cf8:	dfc00a15 	stw	ra,40(sp)
    1cfc:	df000915 	stw	fp,36(sp)
    1d00:	dc800315 	stw	r18,12(sp)
    1d04:	dc400215 	stw	r17,8(sp)
    1d08:	302f883a 	mov	r23,r6
    1d0c:	382b883a 	mov	r21,r7
    1d10:	00015040 	call	1504 <__mulsi3>
    1d14:	102d883a 	mov	r22,r2
    1d18:	dc000b17 	ldw	r16,44(sp)
    1d1c:	10002e26 	beq	r2,zero,1dd8 <_fread_r+0x10c>
    1d20:	a0000226 	beq	r20,zero,1d2c <_fread_r+0x60>
    1d24:	a0800e17 	ldw	r2,56(r20)
    1d28:	10006726 	beq	r2,zero,1ec8 <_fread_r+0x1fc>
    1d2c:	84400117 	ldw	r17,4(r16)
    1d30:	88002b16 	blt	r17,zero,1de0 <_fread_r+0x114>
    1d34:	8080030b 	ldhu	r2,12(r16)
    1d38:	8807883a 	mov	r3,r17
    1d3c:	1080008c 	andi	r2,r2,2
    1d40:	10bfffcc 	andi	r2,r2,65535
    1d44:	10a0001c 	xori	r2,r2,32768
    1d48:	10a00004 	addi	r2,r2,-32768
    1d4c:	10002d1e 	bne	r2,zero,1e04 <_fread_r+0x138>
    1d50:	b025883a 	mov	r18,r22
    1d54:	00000106 	br	1d5c <_fread_r+0x90>
    1d58:	84400117 	ldw	r17,4(r16)
    1d5c:	9809883a 	mov	r4,r19
    1d60:	880d883a 	mov	r6,r17
    1d64:	81400017 	ldw	r5,0(r16)
    1d68:	8c805c2e 	bgeu	r17,r18,1edc <_fread_r+0x210>
    1d6c:	00033640 	call	3364 <memcpy>
    1d70:	80800017 	ldw	r2,0(r16)
    1d74:	9c67883a 	add	r19,r19,r17
    1d78:	9465c83a 	sub	r18,r18,r17
    1d7c:	1463883a 	add	r17,r2,r17
    1d80:	a009883a 	mov	r4,r20
    1d84:	800b883a 	mov	r5,r16
    1d88:	84400015 	stw	r17,0(r16)
    1d8c:	000372c0 	call	372c <__srefill_r>
    1d90:	103ff126 	beq	r2,zero,1d58 <_fread_r+0x8c>
    1d94:	b489c83a 	sub	r4,r22,r18
    1d98:	b80b883a 	mov	r5,r23
    1d9c:	001047c0 	call	1047c <__udivsi3>
    1da0:	102b883a 	mov	r21,r2
    1da4:	a805883a 	mov	r2,r21
    1da8:	dfc00a17 	ldw	ra,40(sp)
    1dac:	df000917 	ldw	fp,36(sp)
    1db0:	ddc00817 	ldw	r23,32(sp)
    1db4:	dd800717 	ldw	r22,28(sp)
    1db8:	dd400617 	ldw	r21,24(sp)
    1dbc:	dd000517 	ldw	r20,20(sp)
    1dc0:	dcc00417 	ldw	r19,16(sp)
    1dc4:	dc800317 	ldw	r18,12(sp)
    1dc8:	dc400217 	ldw	r17,8(sp)
    1dcc:	dc000117 	ldw	r16,4(sp)
    1dd0:	dec00b04 	addi	sp,sp,44
    1dd4:	f800283a 	ret
    1dd8:	002b883a 	mov	r21,zero
    1ddc:	003ff106 	br	1da4 <_fread_r+0xd8>
    1de0:	8080030b 	ldhu	r2,12(r16)
    1de4:	80000115 	stw	zero,4(r16)
    1de8:	0007883a 	mov	r3,zero
    1dec:	1080008c 	andi	r2,r2,2
    1df0:	10bfffcc 	andi	r2,r2,65535
    1df4:	10a0001c 	xori	r2,r2,32768
    1df8:	10a00004 	addi	r2,r2,-32768
    1dfc:	0023883a 	mov	r17,zero
    1e00:	103fd326 	beq	r2,zero,1d50 <_fread_r+0x84>
    1e04:	1823883a 	mov	r17,r3
    1e08:	b0c0012e 	bgeu	r22,r3,1e10 <_fread_r+0x144>
    1e0c:	b023883a 	mov	r17,r22
    1e10:	81400017 	ldw	r5,0(r16)
    1e14:	9809883a 	mov	r4,r19
    1e18:	880d883a 	mov	r6,r17
    1e1c:	00033640 	call	3364 <memcpy>
    1e20:	80800117 	ldw	r2,4(r16)
    1e24:	84800017 	ldw	r18,0(r16)
    1e28:	81400c17 	ldw	r5,48(r16)
    1e2c:	1445c83a 	sub	r2,r2,r17
    1e30:	9465883a 	add	r18,r18,r17
    1e34:	84800015 	stw	r18,0(r16)
    1e38:	80800115 	stw	r2,4(r16)
    1e3c:	9c67883a 	add	r19,r19,r17
    1e40:	b463c83a 	sub	r17,r22,r17
    1e44:	28002e26 	beq	r5,zero,1f00 <_fread_r+0x234>
    1e48:	883fd626 	beq	r17,zero,1da4 <_fread_r+0xd8>
    1e4c:	80801004 	addi	r2,r16,64
    1e50:	28800326 	beq	r5,r2,1e60 <_fread_r+0x194>
    1e54:	a009883a 	mov	r4,r20
    1e58:	00020840 	call	2084 <_free_r>
    1e5c:	84800017 	ldw	r18,0(r16)
    1e60:	80000c15 	stw	zero,48(r16)
    1e64:	80c00517 	ldw	r3,20(r16)
    1e68:	87000417 	ldw	fp,16(r16)
    1e6c:	d8c00015 	stw	r3,0(sp)
    1e70:	00000106 	br	1e78 <_fread_r+0x1ac>
    1e74:	883fcb26 	beq	r17,zero,1da4 <_fread_r+0xd8>
    1e78:	84c00415 	stw	r19,16(r16)
    1e7c:	84400515 	stw	r17,20(r16)
    1e80:	84c00015 	stw	r19,0(r16)
    1e84:	a009883a 	mov	r4,r20
    1e88:	800b883a 	mov	r5,r16
    1e8c:	000372c0 	call	372c <__srefill_r>
    1e90:	d8c00017 	ldw	r3,0(sp)
    1e94:	81000117 	ldw	r4,4(r16)
    1e98:	87000415 	stw	fp,16(r16)
    1e9c:	80c00515 	stw	r3,20(r16)
    1ea0:	84800015 	stw	r18,0(r16)
    1ea4:	80000115 	stw	zero,4(r16)
    1ea8:	8923c83a 	sub	r17,r17,r4
    1eac:	9927883a 	add	r19,r19,r4
    1eb0:	103ff026 	beq	r2,zero,1e74 <_fread_r+0x1a8>
    1eb4:	b449c83a 	sub	r4,r22,r17
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	001047c0 	call	1047c <__udivsi3>
    1ec0:	102b883a 	mov	r21,r2
    1ec4:	003fb706 	br	1da4 <_fread_r+0xd8>
    1ec8:	a009883a 	mov	r4,r20
    1ecc:	00019380 	call	1938 <__sinit>
    1ed0:	84400117 	ldw	r17,4(r16)
    1ed4:	883f970e 	bge	r17,zero,1d34 <_fread_r+0x68>
    1ed8:	003fc106 	br	1de0 <_fread_r+0x114>
    1edc:	900d883a 	mov	r6,r18
    1ee0:	00033640 	call	3364 <memcpy>
    1ee4:	80800117 	ldw	r2,4(r16)
    1ee8:	80c00017 	ldw	r3,0(r16)
    1eec:	1485c83a 	sub	r2,r2,r18
    1ef0:	1ca5883a 	add	r18,r3,r18
    1ef4:	80800115 	stw	r2,4(r16)
    1ef8:	84800015 	stw	r18,0(r16)
    1efc:	003fa906 	br	1da4 <_fread_r+0xd8>
    1f00:	883fd81e 	bne	r17,zero,1e64 <_fread_r+0x198>
    1f04:	003fa706 	br	1da4 <_fread_r+0xd8>

00001f08 <fread>:
    1f08:	00800074 	movhi	r2,1
    1f0c:	1098ae04 	addi	r2,r2,25272
    1f10:	2011883a 	mov	r8,r4
    1f14:	11000017 	ldw	r4,0(r2)
    1f18:	defffe04 	addi	sp,sp,-8
    1f1c:	2807883a 	mov	r3,r5
    1f20:	3005883a 	mov	r2,r6
    1f24:	d9c00015 	stw	r7,0(sp)
    1f28:	400b883a 	mov	r5,r8
    1f2c:	180d883a 	mov	r6,r3
    1f30:	100f883a 	mov	r7,r2
    1f34:	dfc00115 	stw	ra,4(sp)
    1f38:	0001ccc0 	call	1ccc <_fread_r>
    1f3c:	dfc00117 	ldw	ra,4(sp)
    1f40:	dec00204 	addi	sp,sp,8
    1f44:	f800283a 	ret

00001f48 <_malloc_trim_r>:
    1f48:	defffb04 	addi	sp,sp,-20
    1f4c:	dcc00315 	stw	r19,12(sp)
    1f50:	dc800215 	stw	r18,8(sp)
    1f54:	dc400115 	stw	r17,4(sp)
    1f58:	dc000015 	stw	r16,0(sp)
    1f5c:	2827883a 	mov	r19,r5
    1f60:	dfc00415 	stw	ra,16(sp)
    1f64:	04400074 	movhi	r17,1
    1f68:	8c531204 	addi	r17,r17,19528
    1f6c:	2021883a 	mov	r16,r4
    1f70:	00112580 	call	11258 <__malloc_lock>
    1f74:	88800217 	ldw	r2,8(r17)
    1f78:	14800117 	ldw	r18,4(r2)
    1f7c:	00bfff04 	movi	r2,-4
    1f80:	90a4703a 	and	r18,r18,r2
    1f84:	9083fbc4 	addi	r2,r18,4079
    1f88:	14e7c83a 	sub	r19,r2,r19
    1f8c:	9826d33a 	srli	r19,r19,12
    1f90:	0083ffc4 	movi	r2,4095
    1f94:	9cffffc4 	addi	r19,r19,-1
    1f98:	9826933a 	slli	r19,r19,12
    1f9c:	14c0060e 	bge	r2,r19,1fb8 <_malloc_trim_r+0x70>
    1fa0:	8009883a 	mov	r4,r16
    1fa4:	000b883a 	mov	r5,zero
    1fa8:	00039180 	call	3918 <_sbrk_r>
    1fac:	88c00217 	ldw	r3,8(r17)
    1fb0:	1c87883a 	add	r3,r3,r18
    1fb4:	10c00a26 	beq	r2,r3,1fe0 <_malloc_trim_r+0x98>
    1fb8:	8009883a 	mov	r4,r16
    1fbc:	00112780 	call	11278 <__malloc_unlock>
    1fc0:	0005883a 	mov	r2,zero
    1fc4:	dfc00417 	ldw	ra,16(sp)
    1fc8:	dcc00317 	ldw	r19,12(sp)
    1fcc:	dc800217 	ldw	r18,8(sp)
    1fd0:	dc400117 	ldw	r17,4(sp)
    1fd4:	dc000017 	ldw	r16,0(sp)
    1fd8:	dec00504 	addi	sp,sp,20
    1fdc:	f800283a 	ret
    1fe0:	8009883a 	mov	r4,r16
    1fe4:	04cbc83a 	sub	r5,zero,r19
    1fe8:	00039180 	call	3918 <_sbrk_r>
    1fec:	00ffffc4 	movi	r3,-1
    1ff0:	10c01326 	beq	r2,r3,2040 <_malloc_trim_r+0xf8>
    1ff4:	00800074 	movhi	r2,1
    1ff8:	109fb904 	addi	r2,r2,32484
    1ffc:	11000017 	ldw	r4,0(r2)
    2000:	88c00217 	ldw	r3,8(r17)
    2004:	94e5c83a 	sub	r18,r18,r19
    2008:	94800054 	ori	r18,r18,1
    200c:	24e7c83a 	sub	r19,r4,r19
    2010:	1c800115 	stw	r18,4(r3)
    2014:	8009883a 	mov	r4,r16
    2018:	14c00015 	stw	r19,0(r2)
    201c:	00112780 	call	11278 <__malloc_unlock>
    2020:	00800044 	movi	r2,1
    2024:	dfc00417 	ldw	ra,16(sp)
    2028:	dcc00317 	ldw	r19,12(sp)
    202c:	dc800217 	ldw	r18,8(sp)
    2030:	dc400117 	ldw	r17,4(sp)
    2034:	dc000017 	ldw	r16,0(sp)
    2038:	dec00504 	addi	sp,sp,20
    203c:	f800283a 	ret
    2040:	8009883a 	mov	r4,r16
    2044:	000b883a 	mov	r5,zero
    2048:	00039180 	call	3918 <_sbrk_r>
    204c:	88c00217 	ldw	r3,8(r17)
    2050:	014003c4 	movi	r5,15
    2054:	10c9c83a 	sub	r4,r2,r3
    2058:	293fd70e 	bge	r5,r4,1fb8 <_malloc_trim_r+0x70>
    205c:	01400074 	movhi	r5,1
    2060:	2958af04 	addi	r5,r5,25276
    2064:	29400017 	ldw	r5,0(r5)
    2068:	21000054 	ori	r4,r4,1
    206c:	19000115 	stw	r4,4(r3)
    2070:	1145c83a 	sub	r2,r2,r5
    2074:	01400074 	movhi	r5,1
    2078:	295fb904 	addi	r5,r5,32484
    207c:	28800015 	stw	r2,0(r5)
    2080:	003fcd06 	br	1fb8 <_malloc_trim_r+0x70>

00002084 <_free_r>:
    2084:	defffd04 	addi	sp,sp,-12
    2088:	dc400115 	stw	r17,4(sp)
    208c:	dc000015 	stw	r16,0(sp)
    2090:	dfc00215 	stw	ra,8(sp)
    2094:	2821883a 	mov	r16,r5
    2098:	2023883a 	mov	r17,r4
    209c:	28004b26 	beq	r5,zero,21cc <_free_r+0x148>
    20a0:	00112580 	call	11258 <__malloc_lock>
    20a4:	823fff17 	ldw	r8,-4(r16)
    20a8:	00bfff84 	movi	r2,-2
    20ac:	81bffe04 	addi	r6,r16,-8
    20b0:	4084703a 	and	r2,r8,r2
    20b4:	3087883a 	add	r3,r6,r2
    20b8:	01400074 	movhi	r5,1
    20bc:	29531204 	addi	r5,r5,19528
    20c0:	1a400117 	ldw	r9,4(r3)
    20c4:	29000217 	ldw	r4,8(r5)
    20c8:	01ffff04 	movi	r7,-4
    20cc:	49ce703a 	and	r7,r9,r7
    20d0:	20c06526 	beq	r4,r3,2268 <_free_r+0x1e4>
    20d4:	19c00115 	stw	r7,4(r3)
    20d8:	4200004c 	andi	r8,r8,1
    20dc:	40003026 	beq	r8,zero,21a0 <_free_r+0x11c>
    20e0:	0009883a 	mov	r4,zero
    20e4:	19d1883a 	add	r8,r3,r7
    20e8:	42000117 	ldw	r8,4(r8)
    20ec:	4200004c 	andi	r8,r8,1
    20f0:	4000061e 	bne	r8,zero,210c <_free_r+0x88>
    20f4:	11c5883a 	add	r2,r2,r7
    20f8:	19c00217 	ldw	r7,8(r3)
    20fc:	20004e26 	beq	r4,zero,2238 <_free_r+0x1b4>
    2100:	18c00317 	ldw	r3,12(r3)
    2104:	38c00315 	stw	r3,12(r7)
    2108:	19c00215 	stw	r7,8(r3)
    210c:	11c00054 	ori	r7,r2,1
    2110:	3087883a 	add	r3,r6,r2
    2114:	31c00115 	stw	r7,4(r6)
    2118:	18800015 	stw	r2,0(r3)
    211c:	20001a1e 	bne	r4,zero,2188 <_free_r+0x104>
    2120:	00c07fc4 	movi	r3,511
    2124:	18802e2e 	bgeu	r3,r2,21e0 <_free_r+0x15c>
    2128:	1006d27a 	srli	r3,r2,9
    212c:	01000104 	movi	r4,4
    2130:	20c06636 	bltu	r4,r3,22cc <_free_r+0x248>
    2134:	1008d1ba 	srli	r4,r2,6
    2138:	21000e04 	addi	r4,r4,56
    213c:	210f883a 	add	r7,r4,r4
    2140:	39cf883a 	add	r7,r7,r7
    2144:	39cf883a 	add	r7,r7,r7
    2148:	29cf883a 	add	r7,r5,r7
    214c:	38c00217 	ldw	r3,8(r7)
    2150:	01400074 	movhi	r5,1
    2154:	29531204 	addi	r5,r5,19528
    2158:	19c06126 	beq	r3,r7,22e0 <_free_r+0x25c>
    215c:	013fff04 	movi	r4,-4
    2160:	19400117 	ldw	r5,4(r3)
    2164:	290a703a 	and	r5,r5,r4
    2168:	1140022e 	bgeu	r2,r5,2174 <_free_r+0xf0>
    216c:	18c00217 	ldw	r3,8(r3)
    2170:	38fffb1e 	bne	r7,r3,2160 <_free_r+0xdc>
    2174:	18800317 	ldw	r2,12(r3)
    2178:	30800315 	stw	r2,12(r6)
    217c:	30c00215 	stw	r3,8(r6)
    2180:	11800215 	stw	r6,8(r2)
    2184:	19800315 	stw	r6,12(r3)
    2188:	8809883a 	mov	r4,r17
    218c:	dfc00217 	ldw	ra,8(sp)
    2190:	dc400117 	ldw	r17,4(sp)
    2194:	dc000017 	ldw	r16,0(sp)
    2198:	dec00304 	addi	sp,sp,12
    219c:	00112781 	jmpi	11278 <__malloc_unlock>
    21a0:	813ffe17 	ldw	r4,-8(r16)
    21a4:	2a400204 	addi	r9,r5,8
    21a8:	310dc83a 	sub	r6,r6,r4
    21ac:	32000217 	ldw	r8,8(r6)
    21b0:	1105883a 	add	r2,r2,r4
    21b4:	42404326 	beq	r8,r9,22c4 <_free_r+0x240>
    21b8:	32400317 	ldw	r9,12(r6)
    21bc:	0009883a 	mov	r4,zero
    21c0:	42400315 	stw	r9,12(r8)
    21c4:	4a000215 	stw	r8,8(r9)
    21c8:	003fc606 	br	20e4 <_free_r+0x60>
    21cc:	dfc00217 	ldw	ra,8(sp)
    21d0:	dc400117 	ldw	r17,4(sp)
    21d4:	dc000017 	ldw	r16,0(sp)
    21d8:	dec00304 	addi	sp,sp,12
    21dc:	f800283a 	ret
    21e0:	1004d0fa 	srli	r2,r2,3
    21e4:	02000044 	movi	r8,1
    21e8:	29c00117 	ldw	r7,4(r5)
    21ec:	1087883a 	add	r3,r2,r2
    21f0:	18c7883a 	add	r3,r3,r3
    21f4:	1005d0ba 	srai	r2,r2,2
    21f8:	18c7883a 	add	r3,r3,r3
    21fc:	28c7883a 	add	r3,r5,r3
    2200:	19000217 	ldw	r4,8(r3)
    2204:	4084983a 	sll	r2,r8,r2
    2208:	30c00315 	stw	r3,12(r6)
    220c:	31000215 	stw	r4,8(r6)
    2210:	11c4b03a 	or	r2,r2,r7
    2214:	21800315 	stw	r6,12(r4)
    2218:	8809883a 	mov	r4,r17
    221c:	28800115 	stw	r2,4(r5)
    2220:	19800215 	stw	r6,8(r3)
    2224:	dfc00217 	ldw	ra,8(sp)
    2228:	dc400117 	ldw	r17,4(sp)
    222c:	dc000017 	ldw	r16,0(sp)
    2230:	dec00304 	addi	sp,sp,12
    2234:	00112781 	jmpi	11278 <__malloc_unlock>
    2238:	02000074 	movhi	r8,1
    223c:	42131404 	addi	r8,r8,19536
    2240:	3a3faf1e 	bne	r7,r8,2100 <_free_r+0x7c>
    2244:	29800515 	stw	r6,20(r5)
    2248:	29800415 	stw	r6,16(r5)
    224c:	11000054 	ori	r4,r2,1
    2250:	3087883a 	add	r3,r6,r2
    2254:	31c00315 	stw	r7,12(r6)
    2258:	31c00215 	stw	r7,8(r6)
    225c:	31000115 	stw	r4,4(r6)
    2260:	18800015 	stw	r2,0(r3)
    2264:	003fc806 	br	2188 <_free_r+0x104>
    2268:	4200004c 	andi	r8,r8,1
    226c:	3885883a 	add	r2,r7,r2
    2270:	4000071e 	bne	r8,zero,2290 <_free_r+0x20c>
    2274:	81fffe17 	ldw	r7,-8(r16)
    2278:	31cdc83a 	sub	r6,r6,r7
    227c:	30c00317 	ldw	r3,12(r6)
    2280:	31000217 	ldw	r4,8(r6)
    2284:	11c5883a 	add	r2,r2,r7
    2288:	20c00315 	stw	r3,12(r4)
    228c:	19000215 	stw	r4,8(r3)
    2290:	00c00074 	movhi	r3,1
    2294:	18d8b004 	addi	r3,r3,25280
    2298:	18c00017 	ldw	r3,0(r3)
    229c:	11000054 	ori	r4,r2,1
    22a0:	31000115 	stw	r4,4(r6)
    22a4:	29800215 	stw	r6,8(r5)
    22a8:	10ffb736 	bltu	r2,r3,2188 <_free_r+0x104>
    22ac:	00800074 	movhi	r2,1
    22b0:	109faf04 	addi	r2,r2,32444
    22b4:	11400017 	ldw	r5,0(r2)
    22b8:	8809883a 	mov	r4,r17
    22bc:	0001f480 	call	1f48 <_malloc_trim_r>
    22c0:	003fb106 	br	2188 <_free_r+0x104>
    22c4:	01000044 	movi	r4,1
    22c8:	003f8606 	br	20e4 <_free_r+0x60>
    22cc:	01000504 	movi	r4,20
    22d0:	20c00b36 	bltu	r4,r3,2300 <_free_r+0x27c>
    22d4:	190016c4 	addi	r4,r3,91
    22d8:	210f883a 	add	r7,r4,r4
    22dc:	003f9806 	br	2140 <_free_r+0xbc>
    22e0:	2009d0ba 	srai	r4,r4,2
    22e4:	00800044 	movi	r2,1
    22e8:	29c00117 	ldw	r7,4(r5)
    22ec:	1108983a 	sll	r4,r2,r4
    22f0:	1805883a 	mov	r2,r3
    22f4:	21c8b03a 	or	r4,r4,r7
    22f8:	29000115 	stw	r4,4(r5)
    22fc:	003f9e06 	br	2178 <_free_r+0xf4>
    2300:	01001504 	movi	r4,84
    2304:	20c00436 	bltu	r4,r3,2318 <_free_r+0x294>
    2308:	1008d33a 	srli	r4,r2,12
    230c:	21001b84 	addi	r4,r4,110
    2310:	210f883a 	add	r7,r4,r4
    2314:	003f8a06 	br	2140 <_free_r+0xbc>
    2318:	01005504 	movi	r4,340
    231c:	20c00436 	bltu	r4,r3,2330 <_free_r+0x2ac>
    2320:	1008d3fa 	srli	r4,r2,15
    2324:	21001dc4 	addi	r4,r4,119
    2328:	210f883a 	add	r7,r4,r4
    232c:	003f8406 	br	2140 <_free_r+0xbc>
    2330:	01015504 	movi	r4,1364
    2334:	20c00436 	bltu	r4,r3,2348 <_free_r+0x2c4>
    2338:	1008d4ba 	srli	r4,r2,18
    233c:	21001f04 	addi	r4,r4,124
    2340:	210f883a 	add	r7,r4,r4
    2344:	003f7e06 	br	2140 <_free_r+0xbc>
    2348:	01c03f04 	movi	r7,252
    234c:	01001f84 	movi	r4,126
    2350:	003f7b06 	br	2140 <_free_r+0xbc>

00002354 <fscanf>:
    2354:	defffd04 	addi	sp,sp,-12
    2358:	2005883a 	mov	r2,r4
    235c:	dfc00015 	stw	ra,0(sp)
    2360:	d9800115 	stw	r6,4(sp)
    2364:	d9c00215 	stw	r7,8(sp)
    2368:	00c00074 	movhi	r3,1
    236c:	18d8ae04 	addi	r3,r3,25272
    2370:	19000017 	ldw	r4,0(r3)
    2374:	280d883a 	mov	r6,r5
    2378:	d9c00104 	addi	r7,sp,4
    237c:	100b883a 	mov	r5,r2
    2380:	0005b480 	call	5b48 <__svfscanf_r>
    2384:	dfc00017 	ldw	ra,0(sp)
    2388:	dec00304 	addi	sp,sp,12
    238c:	f800283a 	ret

00002390 <_fscanf_r>:
    2390:	defffe04 	addi	sp,sp,-8
    2394:	dfc00015 	stw	ra,0(sp)
    2398:	d9c00115 	stw	r7,4(sp)
    239c:	d9c00104 	addi	r7,sp,4
    23a0:	0005b480 	call	5b48 <__svfscanf_r>
    23a4:	dfc00017 	ldw	ra,0(sp)
    23a8:	dec00204 	addi	sp,sp,8
    23ac:	f800283a 	ret

000023b0 <_fseek_r>:
    23b0:	deffe804 	addi	sp,sp,-96
    23b4:	dd001315 	stw	r20,76(sp)
    23b8:	dc801115 	stw	r18,68(sp)
    23bc:	dc401015 	stw	r17,64(sp)
    23c0:	dc000f15 	stw	r16,60(sp)
    23c4:	dfc01715 	stw	ra,92(sp)
    23c8:	ddc01615 	stw	r23,88(sp)
    23cc:	dd801515 	stw	r22,84(sp)
    23d0:	dd401415 	stw	r21,80(sp)
    23d4:	dcc01215 	stw	r19,72(sp)
    23d8:	2023883a 	mov	r17,r4
    23dc:	2821883a 	mov	r16,r5
    23e0:	3029883a 	mov	r20,r6
    23e4:	3825883a 	mov	r18,r7
    23e8:	20000226 	beq	r4,zero,23f4 <_fseek_r+0x44>
    23ec:	20800e17 	ldw	r2,56(r4)
    23f0:	10006226 	beq	r2,zero,257c <_fseek_r+0x1cc>
    23f4:	80c0030b 	ldhu	r3,12(r16)
    23f8:	00804204 	movi	r2,264
    23fc:	18c0420c 	andi	r3,r3,264
    2400:	18806326 	beq	r3,r2,2590 <_fseek_r+0x1e0>
    2404:	84c00a17 	ldw	r19,40(r16)
    2408:	98010226 	beq	r19,zero,2814 <_fseek_r+0x464>
    240c:	00800044 	movi	r2,1
    2410:	90803d26 	beq	r18,r2,2508 <_fseek_r+0x158>
    2414:	00800084 	movi	r2,2
    2418:	90800126 	beq	r18,r2,2420 <_fseek_r+0x70>
    241c:	90002c1e 	bne	r18,zero,24d0 <_fseek_r+0x120>
    2420:	80800417 	ldw	r2,16(r16)
    2424:	002d883a 	mov	r22,zero
    2428:	002b883a 	mov	r21,zero
    242c:	1000e526 	beq	r2,zero,27c4 <_fseek_r+0x414>
    2430:	80c0030b 	ldhu	r3,12(r16)
    2434:	1882068c 	andi	r2,r3,2074
    2438:	1809883a 	mov	r4,r3
    243c:	10000a1e 	bne	r2,zero,2468 <_fseek_r+0xb8>
    2440:	1881000c 	andi	r2,r3,1024
    2444:	10bfffcc 	andi	r2,r2,65535
    2448:	10a0001c 	xori	r2,r2,32768
    244c:	10a00004 	addi	r2,r2,-32768
    2450:	1000631e 	bne	r2,zero,25e0 <_fseek_r+0x230>
    2454:	00800034 	movhi	r2,0
    2458:	108e9604 	addi	r2,r2,14936
    245c:	98805026 	beq	r19,r2,25a0 <_fseek_r+0x1f0>
    2460:	18c20014 	ori	r3,r3,2048
    2464:	80c0030d 	sth	r3,12(r16)
    2468:	8809883a 	mov	r4,r17
    246c:	800b883a 	mov	r5,r16
    2470:	000167c0 	call	167c <_fflush_r>
    2474:	1000181e 	bne	r2,zero,24d8 <_fseek_r+0x128>
    2478:	81400717 	ldw	r5,28(r16)
    247c:	8809883a 	mov	r4,r17
    2480:	a00d883a 	mov	r6,r20
    2484:	900f883a 	mov	r7,r18
    2488:	983ee83a 	callr	r19
    248c:	00ffffc4 	movi	r3,-1
    2490:	10c01126 	beq	r2,r3,24d8 <_fseek_r+0x128>
    2494:	81400c17 	ldw	r5,48(r16)
    2498:	28000526 	beq	r5,zero,24b0 <_fseek_r+0x100>
    249c:	80801004 	addi	r2,r16,64
    24a0:	28800226 	beq	r5,r2,24ac <_fseek_r+0xfc>
    24a4:	8809883a 	mov	r4,r17
    24a8:	00020840 	call	2084 <_free_r>
    24ac:	80000c15 	stw	zero,48(r16)
    24b0:	8080030b 	ldhu	r2,12(r16)
    24b4:	80c00417 	ldw	r3,16(r16)
    24b8:	80000115 	stw	zero,4(r16)
    24bc:	10bdf7cc 	andi	r2,r2,63455
    24c0:	8080030d 	sth	r2,12(r16)
    24c4:	80c00015 	stw	r3,0(r16)
    24c8:	0005883a 	mov	r2,zero
    24cc:	00000306 	br	24dc <_fseek_r+0x12c>
    24d0:	00800584 	movi	r2,22
    24d4:	88800015 	stw	r2,0(r17)
    24d8:	00bfffc4 	movi	r2,-1
    24dc:	dfc01717 	ldw	ra,92(sp)
    24e0:	ddc01617 	ldw	r23,88(sp)
    24e4:	dd801517 	ldw	r22,84(sp)
    24e8:	dd401417 	ldw	r21,80(sp)
    24ec:	dd001317 	ldw	r20,76(sp)
    24f0:	dcc01217 	ldw	r19,72(sp)
    24f4:	dc801117 	ldw	r18,68(sp)
    24f8:	dc401017 	ldw	r17,64(sp)
    24fc:	dc000f17 	ldw	r16,60(sp)
    2500:	dec01804 	addi	sp,sp,96
    2504:	f800283a 	ret
    2508:	8809883a 	mov	r4,r17
    250c:	800b883a 	mov	r5,r16
    2510:	000167c0 	call	167c <_fflush_r>
    2514:	8080030b 	ldhu	r2,12(r16)
    2518:	10c4000c 	andi	r3,r2,4096
    251c:	18ffffcc 	andi	r3,r3,65535
    2520:	18e0001c 	xori	r3,r3,32768
    2524:	18e00004 	addi	r3,r3,-32768
    2528:	18007d26 	beq	r3,zero,2720 <_fseek_r+0x370>
    252c:	85401417 	ldw	r21,80(r16)
    2530:	10c0010c 	andi	r3,r2,4
    2534:	18ffffcc 	andi	r3,r3,65535
    2538:	18e0001c 	xori	r3,r3,32768
    253c:	18e00004 	addi	r3,r3,-32768
    2540:	18005f1e 	bne	r3,zero,26c0 <_fseek_r+0x310>
    2544:	1080020c 	andi	r2,r2,8
    2548:	10bfffcc 	andi	r2,r2,65535
    254c:	10a0001c 	xori	r2,r2,32768
    2550:	10a00004 	addi	r2,r2,-32768
    2554:	10007026 	beq	r2,zero,2718 <_fseek_r+0x368>
    2558:	80c00017 	ldw	r3,0(r16)
    255c:	80800417 	ldw	r2,16(r16)
    2560:	18000226 	beq	r3,zero,256c <_fseek_r+0x1bc>
    2564:	1887c83a 	sub	r3,r3,r2
    2568:	a8eb883a 	add	r21,r21,r3
    256c:	a569883a 	add	r20,r20,r21
    2570:	05800044 	movi	r22,1
    2574:	0025883a 	mov	r18,zero
    2578:	003fac06 	br	242c <_fseek_r+0x7c>
    257c:	00019380 	call	1938 <__sinit>
    2580:	80c0030b 	ldhu	r3,12(r16)
    2584:	00804204 	movi	r2,264
    2588:	18c0420c 	andi	r3,r3,264
    258c:	18bf9d1e 	bne	r3,r2,2404 <_fseek_r+0x54>
    2590:	8809883a 	mov	r4,r17
    2594:	800b883a 	mov	r5,r16
    2598:	000167c0 	call	167c <_fflush_r>
    259c:	003f9906 	br	2404 <_fseek_r+0x54>
    25a0:	8140038f 	ldh	r5,14(r16)
    25a4:	283fae16 	blt	r5,zero,2460 <_fseek_r+0xb0>
    25a8:	8809883a 	mov	r4,r17
    25ac:	d80d883a 	mov	r6,sp
    25b0:	00028480 	call	2848 <_fstat_r>
    25b4:	1000741e 	bne	r2,zero,2788 <_fseek_r+0x3d8>
    25b8:	d8c00117 	ldw	r3,4(sp)
    25bc:	00a00014 	movui	r2,32768
    25c0:	18fc000c 	andi	r3,r3,61440
    25c4:	1880701e 	bne	r3,r2,2788 <_fseek_r+0x3d8>
    25c8:	8100030b 	ldhu	r4,12(r16)
    25cc:	00810004 	movi	r2,1024
    25d0:	80801315 	stw	r2,76(r16)
    25d4:	2084b03a 	or	r2,r4,r2
    25d8:	1009883a 	mov	r4,r2
    25dc:	8080030d 	sth	r2,12(r16)
    25e0:	90003f1e 	bne	r18,zero,26e0 <_fseek_r+0x330>
    25e4:	a02f883a 	mov	r23,r20
    25e8:	b000461e 	bne	r22,zero,2704 <_fseek_r+0x354>
    25ec:	2084000c 	andi	r2,r4,4096
    25f0:	10bfffcc 	andi	r2,r2,65535
    25f4:	10a0001c 	xori	r2,r2,32768
    25f8:	10a00004 	addi	r2,r2,-32768
    25fc:	10007526 	beq	r2,zero,27d4 <_fseek_r+0x424>
    2600:	80801417 	ldw	r2,80(r16)
    2604:	80c00117 	ldw	r3,4(r16)
    2608:	81400c17 	ldw	r5,48(r16)
    260c:	10ebc83a 	sub	r21,r2,r3
    2610:	28007926 	beq	r5,zero,27f8 <_fseek_r+0x448>
    2614:	81c00f17 	ldw	r7,60(r16)
    2618:	a9ebc83a 	sub	r21,r21,r7
    261c:	80800e17 	ldw	r2,56(r16)
    2620:	81800417 	ldw	r6,16(r16)
    2624:	a8eb883a 	add	r21,r21,r3
    2628:	1185c83a 	sub	r2,r2,r6
    262c:	a8abc83a 	sub	r21,r21,r2
    2630:	3885883a 	add	r2,r7,r2
    2634:	2208000c 	andi	r8,r4,8192
    2638:	423fffcc 	andi	r8,r8,65535
    263c:	4220001c 	xori	r8,r8,32768
    2640:	42200004 	addi	r8,r8,-32768
    2644:	4000031e 	bne	r8,zero,2654 <_fseek_r+0x2a4>
    2648:	bd400216 	blt	r23,r21,2654 <_fseek_r+0x2a4>
    264c:	a887883a 	add	r3,r21,r2
    2650:	b8c03d36 	bltu	r23,r3,2748 <_fseek_r+0x398>
    2654:	85401317 	ldw	r21,76(r16)
    2658:	81400717 	ldw	r5,28(r16)
    265c:	8809883a 	mov	r4,r17
    2660:	056bc83a 	sub	r21,zero,r21
    2664:	bd6a703a 	and	r21,r23,r21
    2668:	a80d883a 	mov	r6,r21
    266c:	000f883a 	mov	r7,zero
    2670:	983ee83a 	callr	r19
    2674:	00ffffc4 	movi	r3,-1
    2678:	10ff7b26 	beq	r2,r3,2468 <_fseek_r+0xb8>
    267c:	80800417 	ldw	r2,16(r16)
    2680:	81400c17 	ldw	r5,48(r16)
    2684:	80000115 	stw	zero,4(r16)
    2688:	80800015 	stw	r2,0(r16)
    268c:	28000526 	beq	r5,zero,26a4 <_fseek_r+0x2f4>
    2690:	80801004 	addi	r2,r16,64
    2694:	28800226 	beq	r5,r2,26a0 <_fseek_r+0x2f0>
    2698:	8809883a 	mov	r4,r17
    269c:	00020840 	call	2084 <_free_r>
    26a0:	80000c15 	stw	zero,48(r16)
    26a4:	8080030b 	ldhu	r2,12(r16)
    26a8:	bd6fc83a 	sub	r23,r23,r21
    26ac:	10bff7cc 	andi	r2,r2,65503
    26b0:	8080030d 	sth	r2,12(r16)
    26b4:	b800361e 	bne	r23,zero,2790 <_fseek_r+0x3e0>
    26b8:	0005883a 	mov	r2,zero
    26bc:	003f8706 	br	24dc <_fseek_r+0x12c>
    26c0:	80c00117 	ldw	r3,4(r16)
    26c4:	80800c17 	ldw	r2,48(r16)
    26c8:	a8ebc83a 	sub	r21,r21,r3
    26cc:	10001226 	beq	r2,zero,2718 <_fseek_r+0x368>
    26d0:	80c00f17 	ldw	r3,60(r16)
    26d4:	80800417 	ldw	r2,16(r16)
    26d8:	a8ebc83a 	sub	r21,r21,r3
    26dc:	003fa306 	br	256c <_fseek_r+0x1bc>
    26e0:	8140038f 	ldh	r5,14(r16)
    26e4:	8809883a 	mov	r4,r17
    26e8:	d80d883a 	mov	r6,sp
    26ec:	00028480 	call	2848 <_fstat_r>
    26f0:	103f5d1e 	bne	r2,zero,2468 <_fseek_r+0xb8>
    26f4:	ddc00417 	ldw	r23,16(sp)
    26f8:	8100030b 	ldhu	r4,12(r16)
    26fc:	a5ef883a 	add	r23,r20,r23
    2700:	b03fba26 	beq	r22,zero,25ec <_fseek_r+0x23c>
    2704:	81400c17 	ldw	r5,48(r16)
    2708:	80c00117 	ldw	r3,4(r16)
    270c:	28003a26 	beq	r5,zero,27f8 <_fseek_r+0x448>
    2710:	81c00f17 	ldw	r7,60(r16)
    2714:	003fc106 	br	261c <_fseek_r+0x26c>
    2718:	80800417 	ldw	r2,16(r16)
    271c:	003f9306 	br	256c <_fseek_r+0x1bc>
    2720:	81400717 	ldw	r5,28(r16)
    2724:	8809883a 	mov	r4,r17
    2728:	000d883a 	mov	r6,zero
    272c:	900f883a 	mov	r7,r18
    2730:	983ee83a 	callr	r19
    2734:	102b883a 	mov	r21,r2
    2738:	00bfffc4 	movi	r2,-1
    273c:	a8bf6626 	beq	r21,r2,24d8 <_fseek_r+0x128>
    2740:	8080030b 	ldhu	r2,12(r16)
    2744:	003f7a06 	br	2530 <_fseek_r+0x180>
    2748:	bd6bc83a 	sub	r21,r23,r21
    274c:	354d883a 	add	r6,r6,r21
    2750:	1545c83a 	sub	r2,r2,r21
    2754:	81800015 	stw	r6,0(r16)
    2758:	80800115 	stw	r2,4(r16)
    275c:	28000626 	beq	r5,zero,2778 <_fseek_r+0x3c8>
    2760:	80801004 	addi	r2,r16,64
    2764:	28800326 	beq	r5,r2,2774 <_fseek_r+0x3c4>
    2768:	8809883a 	mov	r4,r17
    276c:	00020840 	call	2084 <_free_r>
    2770:	8100030b 	ldhu	r4,12(r16)
    2774:	80000c15 	stw	zero,48(r16)
    2778:	213ff7cc 	andi	r4,r4,65503
    277c:	8100030d 	sth	r4,12(r16)
    2780:	0005883a 	mov	r2,zero
    2784:	003f5506 	br	24dc <_fseek_r+0x12c>
    2788:	80c0030b 	ldhu	r3,12(r16)
    278c:	003f3406 	br	2460 <_fseek_r+0xb0>
    2790:	8809883a 	mov	r4,r17
    2794:	800b883a 	mov	r5,r16
    2798:	000372c0 	call	372c <__srefill_r>
    279c:	103f321e 	bne	r2,zero,2468 <_fseek_r+0xb8>
    27a0:	80800117 	ldw	r2,4(r16)
    27a4:	15ff3036 	bltu	r2,r23,2468 <_fseek_r+0xb8>
    27a8:	80c00017 	ldw	r3,0(r16)
    27ac:	15c5c83a 	sub	r2,r2,r23
    27b0:	80800115 	stw	r2,4(r16)
    27b4:	1def883a 	add	r23,r3,r23
    27b8:	85c00015 	stw	r23,0(r16)
    27bc:	0005883a 	mov	r2,zero
    27c0:	003f4606 	br	24dc <_fseek_r+0x12c>
    27c4:	8809883a 	mov	r4,r17
    27c8:	800b883a 	mov	r5,r16
    27cc:	0002a100 	call	2a10 <__smakebuf_r>
    27d0:	003f1706 	br	2430 <_fseek_r+0x80>
    27d4:	81400717 	ldw	r5,28(r16)
    27d8:	8809883a 	mov	r4,r17
    27dc:	000d883a 	mov	r6,zero
    27e0:	01c00044 	movi	r7,1
    27e4:	983ee83a 	callr	r19
    27e8:	00ffffc4 	movi	r3,-1
    27ec:	10ff1e26 	beq	r2,r3,2468 <_fseek_r+0xb8>
    27f0:	8100030b 	ldhu	r4,12(r16)
    27f4:	003f8306 	br	2604 <_fseek_r+0x254>
    27f8:	80800017 	ldw	r2,0(r16)
    27fc:	81800417 	ldw	r6,16(r16)
    2800:	000b883a 	mov	r5,zero
    2804:	1185c83a 	sub	r2,r2,r6
    2808:	a8abc83a 	sub	r21,r21,r2
    280c:	1885883a 	add	r2,r3,r2
    2810:	003f8806 	br	2634 <_fseek_r+0x284>
    2814:	00800744 	movi	r2,29
    2818:	88800015 	stw	r2,0(r17)
    281c:	00bfffc4 	movi	r2,-1
    2820:	003f2e06 	br	24dc <_fseek_r+0x12c>

00002824 <fseek>:
    2824:	00800074 	movhi	r2,1
    2828:	1098ae04 	addi	r2,r2,25272
    282c:	2007883a 	mov	r3,r4
    2830:	11000017 	ldw	r4,0(r2)
    2834:	2805883a 	mov	r2,r5
    2838:	300f883a 	mov	r7,r6
    283c:	180b883a 	mov	r5,r3
    2840:	100d883a 	mov	r6,r2
    2844:	00023b01 	jmpi	23b0 <_fseek_r>

00002848 <_fstat_r>:
    2848:	defffd04 	addi	sp,sp,-12
    284c:	dc400115 	stw	r17,4(sp)
    2850:	dc000015 	stw	r16,0(sp)
    2854:	2023883a 	mov	r17,r4
    2858:	04000074 	movhi	r16,1
    285c:	841fac04 	addi	r16,r16,32432
    2860:	2809883a 	mov	r4,r5
    2864:	300b883a 	mov	r5,r6
    2868:	dfc00215 	stw	ra,8(sp)
    286c:	80000015 	stw	zero,0(r16)
    2870:	0010e2c0 	call	10e2c <fstat>
    2874:	00ffffc4 	movi	r3,-1
    2878:	10c00526 	beq	r2,r3,2890 <_fstat_r+0x48>
    287c:	dfc00217 	ldw	ra,8(sp)
    2880:	dc400117 	ldw	r17,4(sp)
    2884:	dc000017 	ldw	r16,0(sp)
    2888:	dec00304 	addi	sp,sp,12
    288c:	f800283a 	ret
    2890:	80c00017 	ldw	r3,0(r16)
    2894:	183ff926 	beq	r3,zero,287c <_fstat_r+0x34>
    2898:	88c00015 	stw	r3,0(r17)
    289c:	dfc00217 	ldw	ra,8(sp)
    28a0:	dc400117 	ldw	r17,4(sp)
    28a4:	dc000017 	ldw	r16,0(sp)
    28a8:	dec00304 	addi	sp,sp,12
    28ac:	f800283a 	ret

000028b0 <_fwalk>:
    28b0:	defff904 	addi	sp,sp,-28
    28b4:	dcc00315 	stw	r19,12(sp)
    28b8:	24c0b804 	addi	r19,r4,736
    28bc:	dd400515 	stw	r21,20(sp)
    28c0:	dd000415 	stw	r20,16(sp)
    28c4:	dfc00615 	stw	ra,24(sp)
    28c8:	dc800215 	stw	r18,8(sp)
    28cc:	dc400115 	stw	r17,4(sp)
    28d0:	dc000015 	stw	r16,0(sp)
    28d4:	282b883a 	mov	r21,r5
    28d8:	0029883a 	mov	r20,zero
    28dc:	0001b400 	call	1b40 <__sfp_lock_acquire>
    28e0:	98001226 	beq	r19,zero,292c <_fwalk+0x7c>
    28e4:	04bfffc4 	movi	r18,-1
    28e8:	9c400117 	ldw	r17,4(r19)
    28ec:	9c000217 	ldw	r16,8(r19)
    28f0:	8c7fffc4 	addi	r17,r17,-1
    28f4:	88000b16 	blt	r17,zero,2924 <_fwalk+0x74>
    28f8:	84000304 	addi	r16,r16,12
    28fc:	80c0000f 	ldh	r3,0(r16)
    2900:	8c7fffc4 	addi	r17,r17,-1
    2904:	813ffd04 	addi	r4,r16,-12
    2908:	18000426 	beq	r3,zero,291c <_fwalk+0x6c>
    290c:	80c0008f 	ldh	r3,2(r16)
    2910:	1c800226 	beq	r3,r18,291c <_fwalk+0x6c>
    2914:	a83ee83a 	callr	r21
    2918:	a0a8b03a 	or	r20,r20,r2
    291c:	84001704 	addi	r16,r16,92
    2920:	8cbff61e 	bne	r17,r18,28fc <_fwalk+0x4c>
    2924:	9cc00017 	ldw	r19,0(r19)
    2928:	983fef1e 	bne	r19,zero,28e8 <_fwalk+0x38>
    292c:	0001b440 	call	1b44 <__sfp_lock_release>
    2930:	a005883a 	mov	r2,r20
    2934:	dfc00617 	ldw	ra,24(sp)
    2938:	dd400517 	ldw	r21,20(sp)
    293c:	dd000417 	ldw	r20,16(sp)
    2940:	dcc00317 	ldw	r19,12(sp)
    2944:	dc800217 	ldw	r18,8(sp)
    2948:	dc400117 	ldw	r17,4(sp)
    294c:	dc000017 	ldw	r16,0(sp)
    2950:	dec00704 	addi	sp,sp,28
    2954:	f800283a 	ret

00002958 <_fwalk_reent>:
    2958:	defff804 	addi	sp,sp,-32
    295c:	dcc00315 	stw	r19,12(sp)
    2960:	24c0b804 	addi	r19,r4,736
    2964:	dd800615 	stw	r22,24(sp)
    2968:	dd400515 	stw	r21,20(sp)
    296c:	dd000415 	stw	r20,16(sp)
    2970:	dfc00715 	stw	ra,28(sp)
    2974:	dc800215 	stw	r18,8(sp)
    2978:	dc400115 	stw	r17,4(sp)
    297c:	dc000015 	stw	r16,0(sp)
    2980:	2029883a 	mov	r20,r4
    2984:	282b883a 	mov	r21,r5
    2988:	002d883a 	mov	r22,zero
    298c:	0001b400 	call	1b40 <__sfp_lock_acquire>
    2990:	98001326 	beq	r19,zero,29e0 <_fwalk_reent+0x88>
    2994:	04bfffc4 	movi	r18,-1
    2998:	9c400117 	ldw	r17,4(r19)
    299c:	9c000217 	ldw	r16,8(r19)
    29a0:	8c7fffc4 	addi	r17,r17,-1
    29a4:	88000c16 	blt	r17,zero,29d8 <_fwalk_reent+0x80>
    29a8:	84000304 	addi	r16,r16,12
    29ac:	80c0000f 	ldh	r3,0(r16)
    29b0:	8c7fffc4 	addi	r17,r17,-1
    29b4:	817ffd04 	addi	r5,r16,-12
    29b8:	18000526 	beq	r3,zero,29d0 <_fwalk_reent+0x78>
    29bc:	80c0008f 	ldh	r3,2(r16)
    29c0:	a009883a 	mov	r4,r20
    29c4:	1c800226 	beq	r3,r18,29d0 <_fwalk_reent+0x78>
    29c8:	a83ee83a 	callr	r21
    29cc:	b0acb03a 	or	r22,r22,r2
    29d0:	84001704 	addi	r16,r16,92
    29d4:	8cbff51e 	bne	r17,r18,29ac <_fwalk_reent+0x54>
    29d8:	9cc00017 	ldw	r19,0(r19)
    29dc:	983fee1e 	bne	r19,zero,2998 <_fwalk_reent+0x40>
    29e0:	0001b440 	call	1b44 <__sfp_lock_release>
    29e4:	b005883a 	mov	r2,r22
    29e8:	dfc00717 	ldw	ra,28(sp)
    29ec:	dd800617 	ldw	r22,24(sp)
    29f0:	dd400517 	ldw	r21,20(sp)
    29f4:	dd000417 	ldw	r20,16(sp)
    29f8:	dcc00317 	ldw	r19,12(sp)
    29fc:	dc800217 	ldw	r18,8(sp)
    2a00:	dc400117 	ldw	r17,4(sp)
    2a04:	dc000017 	ldw	r16,0(sp)
    2a08:	dec00804 	addi	sp,sp,32
    2a0c:	f800283a 	ret

00002a10 <__smakebuf_r>:
    2a10:	2880030b 	ldhu	r2,12(r5)
    2a14:	deffed04 	addi	sp,sp,-76
    2a18:	dc401015 	stw	r17,64(sp)
    2a1c:	10c0008c 	andi	r3,r2,2
    2a20:	18ffffcc 	andi	r3,r3,65535
    2a24:	18e0001c 	xori	r3,r3,32768
    2a28:	dc000f15 	stw	r16,60(sp)
    2a2c:	dfc01215 	stw	ra,72(sp)
    2a30:	dc801115 	stw	r18,68(sp)
    2a34:	18e00004 	addi	r3,r3,-32768
    2a38:	2821883a 	mov	r16,r5
    2a3c:	2023883a 	mov	r17,r4
    2a40:	1800381e 	bne	r3,zero,2b24 <__smakebuf_r+0x114>
    2a44:	2940038f 	ldh	r5,14(r5)
    2a48:	28002d16 	blt	r5,zero,2b00 <__smakebuf_r+0xf0>
    2a4c:	d80d883a 	mov	r6,sp
    2a50:	00028480 	call	2848 <_fstat_r>
    2a54:	10002916 	blt	r2,zero,2afc <__smakebuf_r+0xec>
    2a58:	d8800117 	ldw	r2,4(sp)
    2a5c:	00e00014 	movui	r3,32768
    2a60:	10bc000c 	andi	r2,r2,61440
    2a64:	10c03c26 	beq	r2,r3,2b58 <__smakebuf_r+0x148>
    2a68:	80c0030b 	ldhu	r3,12(r16)
    2a6c:	18c20014 	ori	r3,r3,2048
    2a70:	80c0030d 	sth	r3,12(r16)
    2a74:	00c80004 	movi	r3,8192
    2a78:	10c00c1e 	bne	r2,r3,2aac <__smakebuf_r+0x9c>
    2a7c:	8140038f 	ldh	r5,14(r16)
    2a80:	8809883a 	mov	r4,r17
    2a84:	00092e80 	call	92e8 <_isatty_r>
    2a88:	10000826 	beq	r2,zero,2aac <__smakebuf_r+0x9c>
    2a8c:	80c0030b 	ldhu	r3,12(r16)
    2a90:	808010c4 	addi	r2,r16,67
    2a94:	80800015 	stw	r2,0(r16)
    2a98:	18c00054 	ori	r3,r3,1
    2a9c:	80800415 	stw	r2,16(r16)
    2aa0:	00800044 	movi	r2,1
    2aa4:	80c0030d 	sth	r3,12(r16)
    2aa8:	80800515 	stw	r2,20(r16)
    2aac:	04810004 	movi	r18,1024
    2ab0:	8809883a 	mov	r4,r17
    2ab4:	900b883a 	mov	r5,r18
    2ab8:	0002be00 	call	2be0 <_malloc_r>
    2abc:	10003026 	beq	r2,zero,2b80 <__smakebuf_r+0x170>
    2ac0:	80c0030b 	ldhu	r3,12(r16)
    2ac4:	01000034 	movhi	r4,0
    2ac8:	21062904 	addi	r4,r4,6308
    2acc:	89000f15 	stw	r4,60(r17)
    2ad0:	18c02014 	ori	r3,r3,128
    2ad4:	80c0030d 	sth	r3,12(r16)
    2ad8:	80800015 	stw	r2,0(r16)
    2adc:	80800415 	stw	r2,16(r16)
    2ae0:	84800515 	stw	r18,20(r16)
    2ae4:	dfc01217 	ldw	ra,72(sp)
    2ae8:	dc801117 	ldw	r18,68(sp)
    2aec:	dc401017 	ldw	r17,64(sp)
    2af0:	dc000f17 	ldw	r16,60(sp)
    2af4:	dec01304 	addi	sp,sp,76
    2af8:	f800283a 	ret
    2afc:	8080030b 	ldhu	r2,12(r16)
    2b00:	10c0200c 	andi	r3,r2,128
    2b04:	18ffffcc 	andi	r3,r3,65535
    2b08:	18e0001c 	xori	r3,r3,32768
    2b0c:	18e00004 	addi	r3,r3,-32768
    2b10:	18000f1e 	bne	r3,zero,2b50 <__smakebuf_r+0x140>
    2b14:	04810004 	movi	r18,1024
    2b18:	10820014 	ori	r2,r2,2048
    2b1c:	8080030d 	sth	r2,12(r16)
    2b20:	003fe306 	br	2ab0 <__smakebuf_r+0xa0>
    2b24:	288010c4 	addi	r2,r5,67
    2b28:	28800015 	stw	r2,0(r5)
    2b2c:	28800415 	stw	r2,16(r5)
    2b30:	00800044 	movi	r2,1
    2b34:	28800515 	stw	r2,20(r5)
    2b38:	dfc01217 	ldw	ra,72(sp)
    2b3c:	dc801117 	ldw	r18,68(sp)
    2b40:	dc401017 	ldw	r17,64(sp)
    2b44:	dc000f17 	ldw	r16,60(sp)
    2b48:	dec01304 	addi	sp,sp,76
    2b4c:	f800283a 	ret
    2b50:	04801004 	movi	r18,64
    2b54:	003ff006 	br	2b18 <__smakebuf_r+0x108>
    2b58:	81000a17 	ldw	r4,40(r16)
    2b5c:	00c00034 	movhi	r3,0
    2b60:	18ce9604 	addi	r3,r3,14936
    2b64:	20ffc01e 	bne	r4,r3,2a68 <__smakebuf_r+0x58>
    2b68:	8080030b 	ldhu	r2,12(r16)
    2b6c:	00c10004 	movi	r3,1024
    2b70:	80c01315 	stw	r3,76(r16)
    2b74:	10c4b03a 	or	r2,r2,r3
    2b78:	8080030d 	sth	r2,12(r16)
    2b7c:	003fcb06 	br	2aac <__smakebuf_r+0x9c>
    2b80:	8080030b 	ldhu	r2,12(r16)
    2b84:	10c0800c 	andi	r3,r2,512
    2b88:	18ffffcc 	andi	r3,r3,65535
    2b8c:	18e0001c 	xori	r3,r3,32768
    2b90:	18e00004 	addi	r3,r3,-32768
    2b94:	183fd31e 	bne	r3,zero,2ae4 <__smakebuf_r+0xd4>
    2b98:	10800094 	ori	r2,r2,2
    2b9c:	80c010c4 	addi	r3,r16,67
    2ba0:	8080030d 	sth	r2,12(r16)
    2ba4:	00800044 	movi	r2,1
    2ba8:	80c00015 	stw	r3,0(r16)
    2bac:	80c00415 	stw	r3,16(r16)
    2bb0:	80800515 	stw	r2,20(r16)
    2bb4:	003fcb06 	br	2ae4 <__smakebuf_r+0xd4>

00002bb8 <malloc>:
    2bb8:	00800074 	movhi	r2,1
    2bbc:	1098ae04 	addi	r2,r2,25272
    2bc0:	200b883a 	mov	r5,r4
    2bc4:	11000017 	ldw	r4,0(r2)
    2bc8:	0002be01 	jmpi	2be0 <_malloc_r>

00002bcc <free>:
    2bcc:	00800074 	movhi	r2,1
    2bd0:	1098ae04 	addi	r2,r2,25272
    2bd4:	200b883a 	mov	r5,r4
    2bd8:	11000017 	ldw	r4,0(r2)
    2bdc:	00020841 	jmpi	2084 <_free_r>

00002be0 <_malloc_r>:
    2be0:	defff604 	addi	sp,sp,-40
    2be4:	dc800215 	stw	r18,8(sp)
    2be8:	dfc00915 	stw	ra,36(sp)
    2bec:	df000815 	stw	fp,32(sp)
    2bf0:	ddc00715 	stw	r23,28(sp)
    2bf4:	dd800615 	stw	r22,24(sp)
    2bf8:	dd400515 	stw	r21,20(sp)
    2bfc:	dd000415 	stw	r20,16(sp)
    2c00:	dcc00315 	stw	r19,12(sp)
    2c04:	dc400115 	stw	r17,4(sp)
    2c08:	dc000015 	stw	r16,0(sp)
    2c0c:	288002c4 	addi	r2,r5,11
    2c10:	00c00584 	movi	r3,22
    2c14:	2025883a 	mov	r18,r4
    2c18:	18802b2e 	bgeu	r3,r2,2cc8 <_malloc_r+0xe8>
    2c1c:	047ffe04 	movi	r17,-8
    2c20:	1462703a 	and	r17,r2,r17
    2c24:	88002a16 	blt	r17,zero,2cd0 <_malloc_r+0xf0>
    2c28:	89402936 	bltu	r17,r5,2cd0 <_malloc_r+0xf0>
    2c2c:	9009883a 	mov	r4,r18
    2c30:	00112580 	call	11258 <__malloc_lock>
    2c34:	00807dc4 	movi	r2,503
    2c38:	14402936 	bltu	r2,r17,2ce0 <_malloc_r+0x100>
    2c3c:	8808d0fa 	srli	r4,r17,3
    2c40:	04c00074 	movhi	r19,1
    2c44:	9cd31204 	addi	r19,r19,19528
    2c48:	2105883a 	add	r2,r4,r4
    2c4c:	1085883a 	add	r2,r2,r2
    2c50:	1085883a 	add	r2,r2,r2
    2c54:	9885883a 	add	r2,r19,r2
    2c58:	14000317 	ldw	r16,12(r2)
    2c5c:	80815526 	beq	r16,r2,31b4 <_malloc_r+0x5d4>
    2c60:	81000117 	ldw	r4,4(r16)
    2c64:	00bfff04 	movi	r2,-4
    2c68:	80c00317 	ldw	r3,12(r16)
    2c6c:	2084703a 	and	r2,r4,r2
    2c70:	8085883a 	add	r2,r16,r2
    2c74:	11800117 	ldw	r6,4(r2)
    2c78:	81400217 	ldw	r5,8(r16)
    2c7c:	9009883a 	mov	r4,r18
    2c80:	31800054 	ori	r6,r6,1
    2c84:	11800115 	stw	r6,4(r2)
    2c88:	28c00315 	stw	r3,12(r5)
    2c8c:	19400215 	stw	r5,8(r3)
    2c90:	00112780 	call	11278 <__malloc_unlock>
    2c94:	80800204 	addi	r2,r16,8
    2c98:	dfc00917 	ldw	ra,36(sp)
    2c9c:	df000817 	ldw	fp,32(sp)
    2ca0:	ddc00717 	ldw	r23,28(sp)
    2ca4:	dd800617 	ldw	r22,24(sp)
    2ca8:	dd400517 	ldw	r21,20(sp)
    2cac:	dd000417 	ldw	r20,16(sp)
    2cb0:	dcc00317 	ldw	r19,12(sp)
    2cb4:	dc800217 	ldw	r18,8(sp)
    2cb8:	dc400117 	ldw	r17,4(sp)
    2cbc:	dc000017 	ldw	r16,0(sp)
    2cc0:	dec00a04 	addi	sp,sp,40
    2cc4:	f800283a 	ret
    2cc8:	04400404 	movi	r17,16
    2ccc:	897fd72e 	bgeu	r17,r5,2c2c <_malloc_r+0x4c>
    2cd0:	00800304 	movi	r2,12
    2cd4:	90800015 	stw	r2,0(r18)
    2cd8:	0005883a 	mov	r2,zero
    2cdc:	003fee06 	br	2c98 <_malloc_r+0xb8>
    2ce0:	8808d27a 	srli	r4,r17,9
    2ce4:	20007126 	beq	r4,zero,2eac <_malloc_r+0x2cc>
    2ce8:	00800104 	movi	r2,4
    2cec:	1100eb36 	bltu	r2,r4,309c <_malloc_r+0x4bc>
    2cf0:	8808d1ba 	srli	r4,r17,6
    2cf4:	21000e04 	addi	r4,r4,56
    2cf8:	210b883a 	add	r5,r4,r4
    2cfc:	294b883a 	add	r5,r5,r5
    2d00:	294b883a 	add	r5,r5,r5
    2d04:	04c00074 	movhi	r19,1
    2d08:	9cd31204 	addi	r19,r19,19528
    2d0c:	994b883a 	add	r5,r19,r5
    2d10:	2c000317 	ldw	r16,12(r5)
    2d14:	2c000e26 	beq	r5,r16,2d50 <_malloc_r+0x170>
    2d18:	80c00117 	ldw	r3,4(r16)
    2d1c:	01ffff04 	movi	r7,-4
    2d20:	018003c4 	movi	r6,15
    2d24:	19c6703a 	and	r3,r3,r7
    2d28:	1c45c83a 	sub	r2,r3,r17
    2d2c:	30800716 	blt	r6,r2,2d4c <_malloc_r+0x16c>
    2d30:	1000610e 	bge	r2,zero,2eb8 <_malloc_r+0x2d8>
    2d34:	84000317 	ldw	r16,12(r16)
    2d38:	2c000526 	beq	r5,r16,2d50 <_malloc_r+0x170>
    2d3c:	80c00117 	ldw	r3,4(r16)
    2d40:	19c6703a 	and	r3,r3,r7
    2d44:	1c45c83a 	sub	r2,r3,r17
    2d48:	30bff90e 	bge	r6,r2,2d30 <_malloc_r+0x150>
    2d4c:	213fffc4 	addi	r4,r4,-1
    2d50:	21000044 	addi	r4,r4,1
    2d54:	9c000417 	ldw	r16,16(r19)
    2d58:	00c00074 	movhi	r3,1
    2d5c:	18d31204 	addi	r3,r3,19528
    2d60:	1a400204 	addi	r9,r3,8
    2d64:	8240ff26 	beq	r16,r9,3164 <_malloc_r+0x584>
    2d68:	81400117 	ldw	r5,4(r16)
    2d6c:	00bfff04 	movi	r2,-4
    2d70:	018003c4 	movi	r6,15
    2d74:	2884703a 	and	r2,r5,r2
    2d78:	144bc83a 	sub	r5,r2,r17
    2d7c:	3140ea16 	blt	r6,r5,3128 <_malloc_r+0x548>
    2d80:	1a400515 	stw	r9,20(r3)
    2d84:	1a400415 	stw	r9,16(r3)
    2d88:	2800570e 	bge	r5,zero,2ee8 <_malloc_r+0x308>
    2d8c:	01407fc4 	movi	r5,511
    2d90:	2880ca36 	bltu	r5,r2,30bc <_malloc_r+0x4dc>
    2d94:	1004d0fa 	srli	r2,r2,3
    2d98:	02000044 	movi	r8,1
    2d9c:	19c00117 	ldw	r7,4(r3)
    2da0:	108b883a 	add	r5,r2,r2
    2da4:	294b883a 	add	r5,r5,r5
    2da8:	1005d0ba 	srai	r2,r2,2
    2dac:	294b883a 	add	r5,r5,r5
    2db0:	28cb883a 	add	r5,r5,r3
    2db4:	29800217 	ldw	r6,8(r5)
    2db8:	4084983a 	sll	r2,r8,r2
    2dbc:	81400315 	stw	r5,12(r16)
    2dc0:	81800215 	stw	r6,8(r16)
    2dc4:	11c4b03a 	or	r2,r2,r7
    2dc8:	18800115 	stw	r2,4(r3)
    2dcc:	2c000215 	stw	r16,8(r5)
    2dd0:	34000315 	stw	r16,12(r6)
    2dd4:	200bd0ba 	srai	r5,r4,2
    2dd8:	00c00044 	movi	r3,1
    2ddc:	194a983a 	sll	r5,r3,r5
    2de0:	11404936 	bltu	r2,r5,2f08 <_malloc_r+0x328>
    2de4:	1146703a 	and	r3,r2,r5
    2de8:	18000a1e 	bne	r3,zero,2e14 <_malloc_r+0x234>
    2dec:	00ffff04 	movi	r3,-4
    2df0:	294b883a 	add	r5,r5,r5
    2df4:	20c8703a 	and	r4,r4,r3
    2df8:	1146703a 	and	r3,r2,r5
    2dfc:	21000104 	addi	r4,r4,4
    2e00:	1800041e 	bne	r3,zero,2e14 <_malloc_r+0x234>
    2e04:	294b883a 	add	r5,r5,r5
    2e08:	1146703a 	and	r3,r2,r5
    2e0c:	21000104 	addi	r4,r4,4
    2e10:	183ffc26 	beq	r3,zero,2e04 <_malloc_r+0x224>
    2e14:	023fff04 	movi	r8,-4
    2e18:	01c003c4 	movi	r7,15
    2e1c:	2105883a 	add	r2,r4,r4
    2e20:	1085883a 	add	r2,r2,r2
    2e24:	1085883a 	add	r2,r2,r2
    2e28:	9899883a 	add	r12,r19,r2
    2e2c:	62800304 	addi	r10,r12,12
    2e30:	2017883a 	mov	r11,r4
    2e34:	54000017 	ldw	r16,0(r10)
    2e38:	51bffd04 	addi	r6,r10,-12
    2e3c:	8180041e 	bne	r16,r6,2e50 <_malloc_r+0x270>
    2e40:	0000ca06 	br	316c <_malloc_r+0x58c>
    2e44:	10001c0e 	bge	r2,zero,2eb8 <_malloc_r+0x2d8>
    2e48:	84000317 	ldw	r16,12(r16)
    2e4c:	8180c726 	beq	r16,r6,316c <_malloc_r+0x58c>
    2e50:	80c00117 	ldw	r3,4(r16)
    2e54:	1a06703a 	and	r3,r3,r8
    2e58:	1c45c83a 	sub	r2,r3,r17
    2e5c:	38bff90e 	bge	r7,r2,2e44 <_malloc_r+0x264>
    2e60:	81000317 	ldw	r4,12(r16)
    2e64:	81400217 	ldw	r5,8(r16)
    2e68:	8447883a 	add	r3,r16,r17
    2e6c:	8c400054 	ori	r17,r17,1
    2e70:	29000315 	stw	r4,12(r5)
    2e74:	21400215 	stw	r5,8(r4)
    2e78:	84400115 	stw	r17,4(r16)
    2e7c:	1889883a 	add	r4,r3,r2
    2e80:	11400054 	ori	r5,r2,1
    2e84:	98c00515 	stw	r3,20(r19)
    2e88:	98c00415 	stw	r3,16(r19)
    2e8c:	20800015 	stw	r2,0(r4)
    2e90:	1a400315 	stw	r9,12(r3)
    2e94:	1a400215 	stw	r9,8(r3)
    2e98:	19400115 	stw	r5,4(r3)
    2e9c:	9009883a 	mov	r4,r18
    2ea0:	00112780 	call	11278 <__malloc_unlock>
    2ea4:	80800204 	addi	r2,r16,8
    2ea8:	003f7b06 	br	2c98 <_malloc_r+0xb8>
    2eac:	8808d0fa 	srli	r4,r17,3
    2eb0:	210b883a 	add	r5,r4,r4
    2eb4:	003f9106 	br	2cfc <_malloc_r+0x11c>
    2eb8:	80c7883a 	add	r3,r16,r3
    2ebc:	19400117 	ldw	r5,4(r3)
    2ec0:	80800317 	ldw	r2,12(r16)
    2ec4:	81000217 	ldw	r4,8(r16)
    2ec8:	29400054 	ori	r5,r5,1
    2ecc:	19400115 	stw	r5,4(r3)
    2ed0:	20800315 	stw	r2,12(r4)
    2ed4:	11000215 	stw	r4,8(r2)
    2ed8:	9009883a 	mov	r4,r18
    2edc:	00112780 	call	11278 <__malloc_unlock>
    2ee0:	80800204 	addi	r2,r16,8
    2ee4:	003f6c06 	br	2c98 <_malloc_r+0xb8>
    2ee8:	8085883a 	add	r2,r16,r2
    2eec:	10c00117 	ldw	r3,4(r2)
    2ef0:	9009883a 	mov	r4,r18
    2ef4:	18c00054 	ori	r3,r3,1
    2ef8:	10c00115 	stw	r3,4(r2)
    2efc:	00112780 	call	11278 <__malloc_unlock>
    2f00:	80800204 	addi	r2,r16,8
    2f04:	003f6406 	br	2c98 <_malloc_r+0xb8>
    2f08:	9c000217 	ldw	r16,8(r19)
    2f0c:	00bfff04 	movi	r2,-4
    2f10:	85400117 	ldw	r21,4(r16)
    2f14:	a8aa703a 	and	r21,r21,r2
    2f18:	ac400336 	bltu	r21,r17,2f28 <_malloc_r+0x348>
    2f1c:	ac45c83a 	sub	r2,r21,r17
    2f20:	00c003c4 	movi	r3,15
    2f24:	18805316 	blt	r3,r2,3074 <_malloc_r+0x494>
    2f28:	d5e70217 	ldw	r23,-25592(gp)
    2f2c:	d0e00217 	ldw	r3,-32760(gp)
    2f30:	00bfffc4 	movi	r2,-1
    2f34:	8579883a 	add	fp,r16,r21
    2f38:	8def883a 	add	r23,r17,r23
    2f3c:	1880d226 	beq	r3,r2,3288 <_malloc_r+0x6a8>
    2f40:	bdc403c4 	addi	r23,r23,4111
    2f44:	00bc0004 	movi	r2,-4096
    2f48:	b8ae703a 	and	r23,r23,r2
    2f4c:	9009883a 	mov	r4,r18
    2f50:	b80b883a 	mov	r5,r23
    2f54:	00039180 	call	3918 <_sbrk_r>
    2f58:	1029883a 	mov	r20,r2
    2f5c:	00bfffc4 	movi	r2,-1
    2f60:	a080d126 	beq	r20,r2,32a8 <_malloc_r+0x6c8>
    2f64:	a7009f36 	bltu	r20,fp,31e4 <_malloc_r+0x604>
    2f68:	05800074 	movhi	r22,1
    2f6c:	b59fb904 	addi	r22,r22,32484
    2f70:	b0800017 	ldw	r2,0(r22)
    2f74:	b885883a 	add	r2,r23,r2
    2f78:	b0800015 	stw	r2,0(r22)
    2f7c:	e500cf26 	beq	fp,r20,32bc <_malloc_r+0x6dc>
    2f80:	d1200217 	ldw	r4,-32760(gp)
    2f84:	00ffffc4 	movi	r3,-1
    2f88:	20c0e026 	beq	r4,r3,330c <_malloc_r+0x72c>
    2f8c:	a739c83a 	sub	fp,r20,fp
    2f90:	1705883a 	add	r2,r2,fp
    2f94:	b0800015 	stw	r2,0(r22)
    2f98:	a08001cc 	andi	r2,r20,7
    2f9c:	1000a526 	beq	r2,zero,3234 <_malloc_r+0x654>
    2fa0:	a0a9c83a 	sub	r20,r20,r2
    2fa4:	00c40204 	movi	r3,4104
    2fa8:	a5000204 	addi	r20,r20,8
    2fac:	1885c83a 	sub	r2,r3,r2
    2fb0:	a5c7883a 	add	r3,r20,r23
    2fb4:	18c3ffcc 	andi	r3,r3,4095
    2fb8:	10efc83a 	sub	r23,r2,r3
    2fbc:	9009883a 	mov	r4,r18
    2fc0:	b80b883a 	mov	r5,r23
    2fc4:	00039180 	call	3918 <_sbrk_r>
    2fc8:	00ffffc4 	movi	r3,-1
    2fcc:	10c0cc26 	beq	r2,r3,3300 <_malloc_r+0x720>
    2fd0:	1505c83a 	sub	r2,r2,r20
    2fd4:	b887883a 	add	r3,r23,r2
    2fd8:	18c00054 	ori	r3,r3,1
    2fdc:	b0800017 	ldw	r2,0(r22)
    2fe0:	9d000215 	stw	r20,8(r19)
    2fe4:	a0c00115 	stw	r3,4(r20)
    2fe8:	b885883a 	add	r2,r23,r2
    2fec:	b0800015 	stw	r2,0(r22)
    2ff0:	84c00e26 	beq	r16,r19,302c <_malloc_r+0x44c>
    2ff4:	00c003c4 	movi	r3,15
    2ff8:	1d40902e 	bgeu	r3,r21,323c <_malloc_r+0x65c>
    2ffc:	ad7ffd04 	addi	r21,r21,-12
    3000:	013ffe04 	movi	r4,-8
    3004:	a908703a 	and	r4,r21,r4
    3008:	810b883a 	add	r5,r16,r4
    300c:	01800144 	movi	r6,5
    3010:	29800115 	stw	r6,4(r5)
    3014:	29800215 	stw	r6,8(r5)
    3018:	81400117 	ldw	r5,4(r16)
    301c:	2940004c 	andi	r5,r5,1
    3020:	214ab03a 	or	r5,r4,r5
    3024:	81400115 	stw	r5,4(r16)
    3028:	1900ae36 	bltu	r3,r4,32e4 <_malloc_r+0x704>
    302c:	d0e70117 	ldw	r3,-25596(gp)
    3030:	1880012e 	bgeu	r3,r2,3038 <_malloc_r+0x458>
    3034:	d0a70115 	stw	r2,-25596(gp)
    3038:	d0e70017 	ldw	r3,-25600(gp)
    303c:	9c000217 	ldw	r16,8(r19)
    3040:	1880012e 	bgeu	r3,r2,3048 <_malloc_r+0x468>
    3044:	d0a70015 	stw	r2,-25600(gp)
    3048:	80c00117 	ldw	r3,4(r16)
    304c:	00bfff04 	movi	r2,-4
    3050:	1886703a 	and	r3,r3,r2
    3054:	1c45c83a 	sub	r2,r3,r17
    3058:	1c400236 	bltu	r3,r17,3064 <_malloc_r+0x484>
    305c:	00c003c4 	movi	r3,15
    3060:	18800416 	blt	r3,r2,3074 <_malloc_r+0x494>
    3064:	9009883a 	mov	r4,r18
    3068:	00112780 	call	11278 <__malloc_unlock>
    306c:	0005883a 	mov	r2,zero
    3070:	003f0906 	br	2c98 <_malloc_r+0xb8>
    3074:	88c00054 	ori	r3,r17,1
    3078:	10800054 	ori	r2,r2,1
    307c:	80c00115 	stw	r3,4(r16)
    3080:	8463883a 	add	r17,r16,r17
    3084:	88800115 	stw	r2,4(r17)
    3088:	9009883a 	mov	r4,r18
    308c:	9c400215 	stw	r17,8(r19)
    3090:	00112780 	call	11278 <__malloc_unlock>
    3094:	80800204 	addi	r2,r16,8
    3098:	003eff06 	br	2c98 <_malloc_r+0xb8>
    309c:	00800504 	movi	r2,20
    30a0:	1100492e 	bgeu	r2,r4,31c8 <_malloc_r+0x5e8>
    30a4:	00801504 	movi	r2,84
    30a8:	11005c36 	bltu	r2,r4,321c <_malloc_r+0x63c>
    30ac:	8808d33a 	srli	r4,r17,12
    30b0:	21001b84 	addi	r4,r4,110
    30b4:	210b883a 	add	r5,r4,r4
    30b8:	003f1006 	br	2cfc <_malloc_r+0x11c>
    30bc:	1006d27a 	srli	r3,r2,9
    30c0:	01400104 	movi	r5,4
    30c4:	28c0432e 	bgeu	r5,r3,31d4 <_malloc_r+0x5f4>
    30c8:	01400504 	movi	r5,20
    30cc:	28c07036 	bltu	r5,r3,3290 <_malloc_r+0x6b0>
    30d0:	194016c4 	addi	r5,r3,91
    30d4:	294d883a 	add	r6,r5,r5
    30d8:	318d883a 	add	r6,r6,r6
    30dc:	318d883a 	add	r6,r6,r6
    30e0:	998d883a 	add	r6,r19,r6
    30e4:	30c00217 	ldw	r3,8(r6)
    30e8:	01c00074 	movhi	r7,1
    30ec:	39d31204 	addi	r7,r7,19528
    30f0:	19805726 	beq	r3,r6,3250 <_malloc_r+0x670>
    30f4:	01ffff04 	movi	r7,-4
    30f8:	19400117 	ldw	r5,4(r3)
    30fc:	29ca703a 	and	r5,r5,r7
    3100:	1140022e 	bgeu	r2,r5,310c <_malloc_r+0x52c>
    3104:	18c00217 	ldw	r3,8(r3)
    3108:	30fffb1e 	bne	r6,r3,30f8 <_malloc_r+0x518>
    310c:	19400317 	ldw	r5,12(r3)
    3110:	98800117 	ldw	r2,4(r19)
    3114:	81400315 	stw	r5,12(r16)
    3118:	80c00215 	stw	r3,8(r16)
    311c:	2c000215 	stw	r16,8(r5)
    3120:	1c000315 	stw	r16,12(r3)
    3124:	003f2b06 	br	2dd4 <_malloc_r+0x1f4>
    3128:	8445883a 	add	r2,r16,r17
    312c:	8c400054 	ori	r17,r17,1
    3130:	18800515 	stw	r2,20(r3)
    3134:	18800415 	stw	r2,16(r3)
    3138:	29000054 	ori	r4,r5,1
    313c:	1147883a 	add	r3,r2,r5
    3140:	84400115 	stw	r17,4(r16)
    3144:	11000115 	stw	r4,4(r2)
    3148:	12400315 	stw	r9,12(r2)
    314c:	12400215 	stw	r9,8(r2)
    3150:	19400015 	stw	r5,0(r3)
    3154:	9009883a 	mov	r4,r18
    3158:	00112780 	call	11278 <__malloc_unlock>
    315c:	80800204 	addi	r2,r16,8
    3160:	003ecd06 	br	2c98 <_malloc_r+0xb8>
    3164:	18800117 	ldw	r2,4(r3)
    3168:	003f1a06 	br	2dd4 <_malloc_r+0x1f4>
    316c:	5ac00044 	addi	r11,r11,1
    3170:	588000cc 	andi	r2,r11,3
    3174:	52800204 	addi	r10,r10,8
    3178:	103f2e1e 	bne	r2,zero,2e34 <_malloc_r+0x254>
    317c:	20c000cc 	andi	r3,r4,3
    3180:	60bffe04 	addi	r2,r12,-8
    3184:	18006f26 	beq	r3,zero,3344 <_malloc_r+0x764>
    3188:	63000017 	ldw	r12,0(r12)
    318c:	213fffc4 	addi	r4,r4,-1
    3190:	60bffa26 	beq	r12,r2,317c <_malloc_r+0x59c>
    3194:	98800117 	ldw	r2,4(r19)
    3198:	294b883a 	add	r5,r5,r5
    319c:	117f5a36 	bltu	r2,r5,2f08 <_malloc_r+0x328>
    31a0:	283f5926 	beq	r5,zero,2f08 <_malloc_r+0x328>
    31a4:	1146703a 	and	r3,r2,r5
    31a8:	18001626 	beq	r3,zero,3204 <_malloc_r+0x624>
    31ac:	5809883a 	mov	r4,r11
    31b0:	003f1a06 	br	2e1c <_malloc_r+0x23c>
    31b4:	80800204 	addi	r2,r16,8
    31b8:	84000517 	ldw	r16,20(r16)
    31bc:	143ea81e 	bne	r2,r16,2c60 <_malloc_r+0x80>
    31c0:	21000084 	addi	r4,r4,2
    31c4:	003ee306 	br	2d54 <_malloc_r+0x174>
    31c8:	210016c4 	addi	r4,r4,91
    31cc:	210b883a 	add	r5,r4,r4
    31d0:	003eca06 	br	2cfc <_malloc_r+0x11c>
    31d4:	100ad1ba 	srli	r5,r2,6
    31d8:	29400e04 	addi	r5,r5,56
    31dc:	294d883a 	add	r6,r5,r5
    31e0:	003fbd06 	br	30d8 <_malloc_r+0x4f8>
    31e4:	84ff6026 	beq	r16,r19,2f68 <_malloc_r+0x388>
    31e8:	00800074 	movhi	r2,1
    31ec:	10931204 	addi	r2,r2,19528
    31f0:	14000217 	ldw	r16,8(r2)
    31f4:	00bfff04 	movi	r2,-4
    31f8:	80c00117 	ldw	r3,4(r16)
    31fc:	1886703a 	and	r3,r3,r2
    3200:	003f9406 	br	3054 <_malloc_r+0x474>
    3204:	294b883a 	add	r5,r5,r5
    3208:	1146703a 	and	r3,r2,r5
    320c:	5ac00104 	addi	r11,r11,4
    3210:	183ffc26 	beq	r3,zero,3204 <_malloc_r+0x624>
    3214:	5809883a 	mov	r4,r11
    3218:	003f0006 	br	2e1c <_malloc_r+0x23c>
    321c:	00805504 	movi	r2,340
    3220:	11001336 	bltu	r2,r4,3270 <_malloc_r+0x690>
    3224:	8808d3fa 	srli	r4,r17,15
    3228:	21001dc4 	addi	r4,r4,119
    322c:	210b883a 	add	r5,r4,r4
    3230:	003eb206 	br	2cfc <_malloc_r+0x11c>
    3234:	00840004 	movi	r2,4096
    3238:	003f5d06 	br	2fb0 <_malloc_r+0x3d0>
    323c:	00800044 	movi	r2,1
    3240:	a0800115 	stw	r2,4(r20)
    3244:	a021883a 	mov	r16,r20
    3248:	0007883a 	mov	r3,zero
    324c:	003f8106 	br	3054 <_malloc_r+0x474>
    3250:	280bd0ba 	srai	r5,r5,2
    3254:	01800044 	movi	r6,1
    3258:	38800117 	ldw	r2,4(r7)
    325c:	314c983a 	sll	r6,r6,r5
    3260:	180b883a 	mov	r5,r3
    3264:	3084b03a 	or	r2,r6,r2
    3268:	38800115 	stw	r2,4(r7)
    326c:	003fa906 	br	3114 <_malloc_r+0x534>
    3270:	00815504 	movi	r2,1364
    3274:	11001836 	bltu	r2,r4,32d8 <_malloc_r+0x6f8>
    3278:	8808d4ba 	srli	r4,r17,18
    327c:	21001f04 	addi	r4,r4,124
    3280:	210b883a 	add	r5,r4,r4
    3284:	003e9d06 	br	2cfc <_malloc_r+0x11c>
    3288:	bdc00404 	addi	r23,r23,16
    328c:	003f2f06 	br	2f4c <_malloc_r+0x36c>
    3290:	01401504 	movi	r5,84
    3294:	28c01f36 	bltu	r5,r3,3314 <_malloc_r+0x734>
    3298:	100ad33a 	srli	r5,r2,12
    329c:	29401b84 	addi	r5,r5,110
    32a0:	294d883a 	add	r6,r5,r5
    32a4:	003f8c06 	br	30d8 <_malloc_r+0x4f8>
    32a8:	9c000217 	ldw	r16,8(r19)
    32ac:	00bfff04 	movi	r2,-4
    32b0:	80c00117 	ldw	r3,4(r16)
    32b4:	1886703a 	and	r3,r3,r2
    32b8:	003f6606 	br	3054 <_malloc_r+0x474>
    32bc:	e0c3ffcc 	andi	r3,fp,4095
    32c0:	183f2f1e 	bne	r3,zero,2f80 <_malloc_r+0x3a0>
    32c4:	98c00217 	ldw	r3,8(r19)
    32c8:	bd49883a 	add	r4,r23,r21
    32cc:	21000054 	ori	r4,r4,1
    32d0:	19000115 	stw	r4,4(r3)
    32d4:	003f5506 	br	302c <_malloc_r+0x44c>
    32d8:	01403f04 	movi	r5,252
    32dc:	01001f84 	movi	r4,126
    32e0:	003e8606 	br	2cfc <_malloc_r+0x11c>
    32e4:	9009883a 	mov	r4,r18
    32e8:	81400204 	addi	r5,r16,8
    32ec:	00020840 	call	2084 <_free_r>
    32f0:	00800074 	movhi	r2,1
    32f4:	109fb904 	addi	r2,r2,32484
    32f8:	10800017 	ldw	r2,0(r2)
    32fc:	003f4b06 	br	302c <_malloc_r+0x44c>
    3300:	00c00044 	movi	r3,1
    3304:	002f883a 	mov	r23,zero
    3308:	003f3406 	br	2fdc <_malloc_r+0x3fc>
    330c:	d5200215 	stw	r20,-32760(gp)
    3310:	003f2106 	br	2f98 <_malloc_r+0x3b8>
    3314:	01405504 	movi	r5,340
    3318:	28c00436 	bltu	r5,r3,332c <_malloc_r+0x74c>
    331c:	100ad3fa 	srli	r5,r2,15
    3320:	29401dc4 	addi	r5,r5,119
    3324:	294d883a 	add	r6,r5,r5
    3328:	003f6b06 	br	30d8 <_malloc_r+0x4f8>
    332c:	01415504 	movi	r5,1364
    3330:	28c00936 	bltu	r5,r3,3358 <_malloc_r+0x778>
    3334:	100ad4ba 	srli	r5,r2,18
    3338:	29401f04 	addi	r5,r5,124
    333c:	294d883a 	add	r6,r5,r5
    3340:	003f6506 	br	30d8 <_malloc_r+0x4f8>
    3344:	98800117 	ldw	r2,4(r19)
    3348:	0146303a 	nor	r3,zero,r5
    334c:	1884703a 	and	r2,r3,r2
    3350:	98800115 	stw	r2,4(r19)
    3354:	003f9006 	br	3198 <_malloc_r+0x5b8>
    3358:	01803f04 	movi	r6,252
    335c:	01401f84 	movi	r5,126
    3360:	003f5d06 	br	30d8 <_malloc_r+0x4f8>

00003364 <memcpy>:
    3364:	defffb04 	addi	sp,sp,-20
    3368:	dc000015 	stw	r16,0(sp)
    336c:	dfc00415 	stw	ra,16(sp)
    3370:	dcc00315 	stw	r19,12(sp)
    3374:	dc800215 	stw	r18,8(sp)
    3378:	dc400115 	stw	r17,4(sp)
    337c:	00c003c4 	movi	r3,15
    3380:	2021883a 	mov	r16,r4
    3384:	3005883a 	mov	r2,r6
    3388:	1980032e 	bgeu	r3,r6,3398 <memcpy+0x34>
    338c:	2906b03a 	or	r3,r5,r4
    3390:	18c000cc 	andi	r3,r3,3
    3394:	18001026 	beq	r3,zero,33d8 <memcpy+0x74>
    3398:	8007883a 	mov	r3,r16
    339c:	288f883a 	add	r7,r5,r2
    33a0:	10000526 	beq	r2,zero,33b8 <memcpy+0x54>
    33a4:	29800003 	ldbu	r6,0(r5)
    33a8:	18c00044 	addi	r3,r3,1
    33ac:	29400044 	addi	r5,r5,1
    33b0:	19bfffc5 	stb	r6,-1(r3)
    33b4:	29fffb1e 	bne	r5,r7,33a4 <memcpy+0x40>
    33b8:	8005883a 	mov	r2,r16
    33bc:	dfc00417 	ldw	ra,16(sp)
    33c0:	dcc00317 	ldw	r19,12(sp)
    33c4:	dc800217 	ldw	r18,8(sp)
    33c8:	dc400117 	ldw	r17,4(sp)
    33cc:	dc000017 	ldw	r16,0(sp)
    33d0:	dec00504 	addi	sp,sp,20
    33d4:	f800283a 	ret
    33d8:	32bffc04 	addi	r10,r6,-16
    33dc:	5014d13a 	srli	r10,r10,4
    33e0:	20800404 	addi	r2,r4,16
    33e4:	2007883a 	mov	r3,r4
    33e8:	5008913a 	slli	r4,r10,4
    33ec:	280f883a 	mov	r7,r5
    33f0:	1105883a 	add	r2,r2,r4
    33f4:	3a000017 	ldw	r8,0(r7)
    33f8:	18c00404 	addi	r3,r3,16
    33fc:	39c00404 	addi	r7,r7,16
    3400:	1a3ffc15 	stw	r8,-16(r3)
    3404:	3a3ffd17 	ldw	r8,-12(r7)
    3408:	1a3ffd15 	stw	r8,-12(r3)
    340c:	3a3ffe17 	ldw	r8,-8(r7)
    3410:	1a3ffe15 	stw	r8,-8(r3)
    3414:	3a3fff17 	ldw	r8,-4(r7)
    3418:	1a3fff15 	stw	r8,-4(r3)
    341c:	18bff51e 	bne	r3,r2,33f4 <memcpy+0x90>
    3420:	52800044 	addi	r10,r10,1
    3424:	5014913a 	slli	r10,r10,4
    3428:	308003cc 	andi	r2,r6,15
    342c:	010000c4 	movi	r4,3
    3430:	8287883a 	add	r3,r16,r10
    3434:	2a95883a 	add	r10,r5,r10
    3438:	2080182e 	bgeu	r4,r2,349c <memcpy+0x138>
    343c:	147fff04 	addi	r17,r2,-4
    3440:	8808d0ba 	srli	r4,r17,2
    3444:	1a400104 	addi	r9,r3,4
    3448:	180d883a 	mov	r6,r3
    344c:	2105883a 	add	r2,r4,r4
    3450:	1085883a 	add	r2,r2,r2
    3454:	4893883a 	add	r9,r9,r2
    3458:	500f883a 	mov	r7,r10
    345c:	3a000017 	ldw	r8,0(r7)
    3460:	31800104 	addi	r6,r6,4
    3464:	39c00104 	addi	r7,r7,4
    3468:	323fff15 	stw	r8,-4(r6)
    346c:	327ffb1e 	bne	r6,r9,345c <memcpy+0xf8>
    3470:	20800044 	addi	r2,r4,1
    3474:	1085883a 	add	r2,r2,r2
    3478:	1085883a 	add	r2,r2,r2
    347c:	017fff04 	movi	r5,-4
    3480:	18a5883a 	add	r18,r3,r2
    3484:	50a7883a 	add	r19,r10,r2
    3488:	00015040 	call	1504 <__mulsi3>
    348c:	1445883a 	add	r2,r2,r17
    3490:	980b883a 	mov	r5,r19
    3494:	9007883a 	mov	r3,r18
    3498:	003fc006 	br	339c <memcpy+0x38>
    349c:	500b883a 	mov	r5,r10
    34a0:	003fbe06 	br	339c <memcpy+0x38>

000034a4 <memset>:
    34a4:	00c000c4 	movi	r3,3
    34a8:	2005883a 	mov	r2,r4
    34ac:	29403fcc 	andi	r5,r5,255
    34b0:	19802d2e 	bgeu	r3,r6,3568 <memset+0xc4>
    34b4:	20c6703a 	and	r3,r4,r3
    34b8:	18002e1e 	bne	r3,zero,3574 <memset+0xd0>
    34bc:	2806923a 	slli	r3,r5,8
    34c0:	010003c4 	movi	r4,15
    34c4:	3011883a 	mov	r8,r6
    34c8:	1946b03a 	or	r3,r3,r5
    34cc:	180e943a 	slli	r7,r3,16
    34d0:	38ceb03a 	or	r7,r7,r3
    34d4:	1007883a 	mov	r3,r2
    34d8:	21800f2e 	bgeu	r4,r6,3518 <memset+0x74>
    34dc:	19c00015 	stw	r7,0(r3)
    34e0:	19c00115 	stw	r7,4(r3)
    34e4:	19c00215 	stw	r7,8(r3)
    34e8:	19c00315 	stw	r7,12(r3)
    34ec:	423ffc04 	addi	r8,r8,-16
    34f0:	18c00404 	addi	r3,r3,16
    34f4:	223ff936 	bltu	r4,r8,34dc <memset+0x38>
    34f8:	30fffc04 	addi	r3,r6,-16
    34fc:	1806d13a 	srli	r3,r3,4
    3500:	318003cc 	andi	r6,r6,15
    3504:	010000c4 	movi	r4,3
    3508:	18c00044 	addi	r3,r3,1
    350c:	1806913a 	slli	r3,r3,4
    3510:	10c7883a 	add	r3,r2,r3
    3514:	21800e2e 	bgeu	r4,r6,3550 <memset+0xac>
    3518:	1813883a 	mov	r9,r3
    351c:	3011883a 	mov	r8,r6
    3520:	010000c4 	movi	r4,3
    3524:	49c00015 	stw	r7,0(r9)
    3528:	423fff04 	addi	r8,r8,-4
    352c:	4a400104 	addi	r9,r9,4
    3530:	223ffc36 	bltu	r4,r8,3524 <memset+0x80>
    3534:	313fff04 	addi	r4,r6,-4
    3538:	2008d0ba 	srli	r4,r4,2
    353c:	318000cc 	andi	r6,r6,3
    3540:	21000044 	addi	r4,r4,1
    3544:	2109883a 	add	r4,r4,r4
    3548:	2109883a 	add	r4,r4,r4
    354c:	1907883a 	add	r3,r3,r4
    3550:	30000a26 	beq	r6,zero,357c <memset+0xd8>
    3554:	198d883a 	add	r6,r3,r6
    3558:	19400005 	stb	r5,0(r3)
    355c:	18c00044 	addi	r3,r3,1
    3560:	19bffd1e 	bne	r3,r6,3558 <memset+0xb4>
    3564:	f800283a 	ret
    3568:	2007883a 	mov	r3,r4
    356c:	303ff91e 	bne	r6,zero,3554 <memset+0xb0>
    3570:	00000206 	br	357c <memset+0xd8>
    3574:	2007883a 	mov	r3,r4
    3578:	003ff606 	br	3554 <memset+0xb0>
    357c:	f800283a 	ret

00003580 <_open_r>:
    3580:	defffd04 	addi	sp,sp,-12
    3584:	dc400115 	stw	r17,4(sp)
    3588:	dc000015 	stw	r16,0(sp)
    358c:	2023883a 	mov	r17,r4
    3590:	04000074 	movhi	r16,1
    3594:	841fac04 	addi	r16,r16,32432
    3598:	2809883a 	mov	r4,r5
    359c:	300b883a 	mov	r5,r6
    35a0:	380d883a 	mov	r6,r7
    35a4:	dfc00215 	stw	ra,8(sp)
    35a8:	80000015 	stw	zero,0(r16)
    35ac:	00113d80 	call	113d8 <open>
    35b0:	00ffffc4 	movi	r3,-1
    35b4:	10c00526 	beq	r2,r3,35cc <_open_r+0x4c>
    35b8:	dfc00217 	ldw	ra,8(sp)
    35bc:	dc400117 	ldw	r17,4(sp)
    35c0:	dc000017 	ldw	r16,0(sp)
    35c4:	dec00304 	addi	sp,sp,12
    35c8:	f800283a 	ret
    35cc:	80c00017 	ldw	r3,0(r16)
    35d0:	183ff926 	beq	r3,zero,35b8 <_open_r+0x38>
    35d4:	88c00015 	stw	r3,0(r17)
    35d8:	dfc00217 	ldw	ra,8(sp)
    35dc:	dc400117 	ldw	r17,4(sp)
    35e0:	dc000017 	ldw	r16,0(sp)
    35e4:	dec00304 	addi	sp,sp,12
    35e8:	f800283a 	ret

000035ec <_printf_r>:
    35ec:	defffd04 	addi	sp,sp,-12
    35f0:	dfc00015 	stw	ra,0(sp)
    35f4:	d9800115 	stw	r6,4(sp)
    35f8:	d9c00215 	stw	r7,8(sp)
    35fc:	280d883a 	mov	r6,r5
    3600:	21400217 	ldw	r5,8(r4)
    3604:	d9c00104 	addi	r7,sp,4
    3608:	0003ca80 	call	3ca8 <___vfprintf_internal_r>
    360c:	dfc00017 	ldw	ra,0(sp)
    3610:	dec00304 	addi	sp,sp,12
    3614:	f800283a 	ret

00003618 <printf>:
    3618:	defffc04 	addi	sp,sp,-16
    361c:	dfc00015 	stw	ra,0(sp)
    3620:	d9400115 	stw	r5,4(sp)
    3624:	d9800215 	stw	r6,8(sp)
    3628:	d9c00315 	stw	r7,12(sp)
    362c:	00800074 	movhi	r2,1
    3630:	1098ae04 	addi	r2,r2,25272
    3634:	10800017 	ldw	r2,0(r2)
    3638:	200b883a 	mov	r5,r4
    363c:	d9800104 	addi	r6,sp,4
    3640:	11000217 	ldw	r4,8(r2)
    3644:	0005b240 	call	5b24 <__vfprintf_internal>
    3648:	dfc00017 	ldw	ra,0(sp)
    364c:	dec00404 	addi	sp,sp,16
    3650:	f800283a 	ret

00003654 <_putchar_r>:
    3654:	21800217 	ldw	r6,8(r4)
    3658:	000a8881 	jmpi	a888 <_putc_r>

0000365c <putchar>:
    365c:	00800074 	movhi	r2,1
    3660:	1098ae04 	addi	r2,r2,25272
    3664:	10800017 	ldw	r2,0(r2)
    3668:	200b883a 	mov	r5,r4
    366c:	11800217 	ldw	r6,8(r2)
    3670:	1009883a 	mov	r4,r2
    3674:	000a8881 	jmpi	a888 <_putc_r>

00003678 <_puts_r>:
    3678:	defff604 	addi	sp,sp,-40
    367c:	dc400815 	stw	r17,32(sp)
    3680:	2023883a 	mov	r17,r4
    3684:	2809883a 	mov	r4,r5
    3688:	dc000715 	stw	r16,28(sp)
    368c:	dfc00915 	stw	ra,36(sp)
    3690:	2821883a 	mov	r16,r5
    3694:	0003be80 	call	3be8 <strlen>
    3698:	10c00044 	addi	r3,r2,1
    369c:	d8800115 	stw	r2,4(sp)
    36a0:	89400217 	ldw	r5,8(r17)
    36a4:	00800074 	movhi	r2,1
    36a8:	10906a04 	addi	r2,r2,16808
    36ac:	d8800215 	stw	r2,8(sp)
    36b0:	00800044 	movi	r2,1
    36b4:	d8800315 	stw	r2,12(sp)
    36b8:	8809883a 	mov	r4,r17
    36bc:	00800084 	movi	r2,2
    36c0:	d9800404 	addi	r6,sp,16
    36c4:	dc000015 	stw	r16,0(sp)
    36c8:	d8c00615 	stw	r3,24(sp)
    36cc:	dec00415 	stw	sp,16(sp)
    36d0:	d8800515 	stw	r2,20(sp)
    36d4:	0008e040 	call	8e04 <__sfvwrite_r>
    36d8:	1000061e 	bne	r2,zero,36f4 <_puts_r+0x7c>
    36dc:	00800284 	movi	r2,10
    36e0:	dfc00917 	ldw	ra,36(sp)
    36e4:	dc400817 	ldw	r17,32(sp)
    36e8:	dc000717 	ldw	r16,28(sp)
    36ec:	dec00a04 	addi	sp,sp,40
    36f0:	f800283a 	ret
    36f4:	00bfffc4 	movi	r2,-1
    36f8:	003ff906 	br	36e0 <_puts_r+0x68>

000036fc <puts>:
    36fc:	00800074 	movhi	r2,1
    3700:	1098ae04 	addi	r2,r2,25272
    3704:	200b883a 	mov	r5,r4
    3708:	11000017 	ldw	r4,0(r2)
    370c:	00036781 	jmpi	3678 <_puts_r>

00003710 <lflush>:
    3710:	20c0030b 	ldhu	r3,12(r4)
    3714:	00800244 	movi	r2,9
    3718:	18c0024c 	andi	r3,r3,9
    371c:	18800226 	beq	r3,r2,3728 <lflush+0x18>
    3720:	0005883a 	mov	r2,zero
    3724:	f800283a 	ret
    3728:	00018641 	jmpi	1864 <fflush>

0000372c <__srefill_r>:
    372c:	defffd04 	addi	sp,sp,-12
    3730:	dc400115 	stw	r17,4(sp)
    3734:	dc000015 	stw	r16,0(sp)
    3738:	dfc00215 	stw	ra,8(sp)
    373c:	2023883a 	mov	r17,r4
    3740:	2821883a 	mov	r16,r5
    3744:	20000226 	beq	r4,zero,3750 <__srefill_r+0x24>
    3748:	20800e17 	ldw	r2,56(r4)
    374c:	10004426 	beq	r2,zero,3860 <__srefill_r+0x134>
    3750:	8080030b 	ldhu	r2,12(r16)
    3754:	80000115 	stw	zero,4(r16)
    3758:	10c0080c 	andi	r3,r2,32
    375c:	18ffffcc 	andi	r3,r3,65535
    3760:	18e0001c 	xori	r3,r3,32768
    3764:	18e00004 	addi	r3,r3,-32768
    3768:	1800371e 	bne	r3,zero,3848 <__srefill_r+0x11c>
    376c:	10c0010c 	andi	r3,r2,4
    3770:	18ffffcc 	andi	r3,r3,65535
    3774:	18e0001c 	xori	r3,r3,32768
    3778:	18e00004 	addi	r3,r3,-32768
    377c:	18002226 	beq	r3,zero,3808 <__srefill_r+0xdc>
    3780:	81400c17 	ldw	r5,48(r16)
    3784:	28000826 	beq	r5,zero,37a8 <__srefill_r+0x7c>
    3788:	80801004 	addi	r2,r16,64
    378c:	28800226 	beq	r5,r2,3798 <__srefill_r+0x6c>
    3790:	8809883a 	mov	r4,r17
    3794:	00020840 	call	2084 <_free_r>
    3798:	80800f17 	ldw	r2,60(r16)
    379c:	80000c15 	stw	zero,48(r16)
    37a0:	80800115 	stw	r2,4(r16)
    37a4:	1000401e 	bne	r2,zero,38a8 <__srefill_r+0x17c>
    37a8:	80800417 	ldw	r2,16(r16)
    37ac:	10005026 	beq	r2,zero,38f0 <__srefill_r+0x1c4>
    37b0:	8080030b 	ldhu	r2,12(r16)
    37b4:	108000cc 	andi	r2,r2,3
    37b8:	10002b1e 	bne	r2,zero,3868 <__srefill_r+0x13c>
    37bc:	81800417 	ldw	r6,16(r16)
    37c0:	80800817 	ldw	r2,32(r16)
    37c4:	81400717 	ldw	r5,28(r16)
    37c8:	81c00517 	ldw	r7,20(r16)
    37cc:	8809883a 	mov	r4,r17
    37d0:	81800015 	stw	r6,0(r16)
    37d4:	103ee83a 	callr	r2
    37d8:	8100030b 	ldhu	r4,12(r16)
    37dc:	00f7ffc4 	movi	r3,-8193
    37e0:	80800115 	stw	r2,4(r16)
    37e4:	20c6703a 	and	r3,r4,r3
    37e8:	80c0030d 	sth	r3,12(r16)
    37ec:	0080130e 	bge	zero,r2,383c <__srefill_r+0x110>
    37f0:	0005883a 	mov	r2,zero
    37f4:	dfc00217 	ldw	ra,8(sp)
    37f8:	dc400117 	ldw	r17,4(sp)
    37fc:	dc000017 	ldw	r16,0(sp)
    3800:	dec00304 	addi	sp,sp,12
    3804:	f800283a 	ret
    3808:	10c0040c 	andi	r3,r2,16
    380c:	18ffffcc 	andi	r3,r3,65535
    3810:	18e0001c 	xori	r3,r3,32768
    3814:	18e00004 	addi	r3,r3,-32768
    3818:	18003926 	beq	r3,zero,3900 <__srefill_r+0x1d4>
    381c:	10c0020c 	andi	r3,r2,8
    3820:	18ffffcc 	andi	r3,r3,65535
    3824:	18e0001c 	xori	r3,r3,32768
    3828:	18e00004 	addi	r3,r3,-32768
    382c:	1800261e 	bne	r3,zero,38c8 <__srefill_r+0x19c>
    3830:	10800114 	ori	r2,r2,4
    3834:	8080030d 	sth	r2,12(r16)
    3838:	003fdb06 	br	37a8 <__srefill_r+0x7c>
    383c:	1000111e 	bne	r2,zero,3884 <__srefill_r+0x158>
    3840:	18c00814 	ori	r3,r3,32
    3844:	80c0030d 	sth	r3,12(r16)
    3848:	00bfffc4 	movi	r2,-1
    384c:	dfc00217 	ldw	ra,8(sp)
    3850:	dc400117 	ldw	r17,4(sp)
    3854:	dc000017 	ldw	r16,0(sp)
    3858:	dec00304 	addi	sp,sp,12
    385c:	f800283a 	ret
    3860:	00019380 	call	1938 <__sinit>
    3864:	003fba06 	br	3750 <__srefill_r+0x24>
    3868:	00800074 	movhi	r2,1
    386c:	1098ad04 	addi	r2,r2,25268
    3870:	11000017 	ldw	r4,0(r2)
    3874:	01400034 	movhi	r5,0
    3878:	294dc404 	addi	r5,r5,14096
    387c:	00028b00 	call	28b0 <_fwalk>
    3880:	003fce06 	br	37bc <__srefill_r+0x90>
    3884:	18c01014 	ori	r3,r3,64
    3888:	00bfffc4 	movi	r2,-1
    388c:	80000115 	stw	zero,4(r16)
    3890:	80c0030d 	sth	r3,12(r16)
    3894:	dfc00217 	ldw	ra,8(sp)
    3898:	dc400117 	ldw	r17,4(sp)
    389c:	dc000017 	ldw	r16,0(sp)
    38a0:	dec00304 	addi	sp,sp,12
    38a4:	f800283a 	ret
    38a8:	80c00e17 	ldw	r3,56(r16)
    38ac:	0005883a 	mov	r2,zero
    38b0:	80c00015 	stw	r3,0(r16)
    38b4:	dfc00217 	ldw	ra,8(sp)
    38b8:	dc400117 	ldw	r17,4(sp)
    38bc:	dc000017 	ldw	r16,0(sp)
    38c0:	dec00304 	addi	sp,sp,12
    38c4:	f800283a 	ret
    38c8:	8809883a 	mov	r4,r17
    38cc:	800b883a 	mov	r5,r16
    38d0:	000167c0 	call	167c <_fflush_r>
    38d4:	103fdc1e 	bne	r2,zero,3848 <__srefill_r+0x11c>
    38d8:	8080030b 	ldhu	r2,12(r16)
    38dc:	00fffdc4 	movi	r3,-9
    38e0:	80000215 	stw	zero,8(r16)
    38e4:	1884703a 	and	r2,r3,r2
    38e8:	80000615 	stw	zero,24(r16)
    38ec:	003fd006 	br	3830 <__srefill_r+0x104>
    38f0:	8809883a 	mov	r4,r17
    38f4:	800b883a 	mov	r5,r16
    38f8:	0002a100 	call	2a10 <__smakebuf_r>
    38fc:	003fac06 	br	37b0 <__srefill_r+0x84>
    3900:	00c00244 	movi	r3,9
    3904:	10801014 	ori	r2,r2,64
    3908:	88c00015 	stw	r3,0(r17)
    390c:	8080030d 	sth	r2,12(r16)
    3910:	00bfffc4 	movi	r2,-1
    3914:	003fb706 	br	37f4 <__srefill_r+0xc8>

00003918 <_sbrk_r>:
    3918:	defffd04 	addi	sp,sp,-12
    391c:	dc400115 	stw	r17,4(sp)
    3920:	dc000015 	stw	r16,0(sp)
    3924:	2023883a 	mov	r17,r4
    3928:	04000074 	movhi	r16,1
    392c:	841fac04 	addi	r16,r16,32432
    3930:	2809883a 	mov	r4,r5
    3934:	dfc00215 	stw	ra,8(sp)
    3938:	80000015 	stw	zero,0(r16)
    393c:	00116f40 	call	116f4 <sbrk>
    3940:	00ffffc4 	movi	r3,-1
    3944:	10c00526 	beq	r2,r3,395c <_sbrk_r+0x44>
    3948:	dfc00217 	ldw	ra,8(sp)
    394c:	dc400117 	ldw	r17,4(sp)
    3950:	dc000017 	ldw	r16,0(sp)
    3954:	dec00304 	addi	sp,sp,12
    3958:	f800283a 	ret
    395c:	80c00017 	ldw	r3,0(r16)
    3960:	183ff926 	beq	r3,zero,3948 <_sbrk_r+0x30>
    3964:	88c00015 	stw	r3,0(r17)
    3968:	dfc00217 	ldw	ra,8(sp)
    396c:	dc400117 	ldw	r17,4(sp)
    3970:	dc000017 	ldw	r16,0(sp)
    3974:	dec00304 	addi	sp,sp,12
    3978:	f800283a 	ret

0000397c <__sread>:
    397c:	defffe04 	addi	sp,sp,-8
    3980:	dc000015 	stw	r16,0(sp)
    3984:	2821883a 	mov	r16,r5
    3988:	2940038f 	ldh	r5,14(r5)
    398c:	dfc00115 	stw	ra,4(sp)
    3990:	000aa340 	call	aa34 <_read_r>
    3994:	10000716 	blt	r2,zero,39b4 <__sread+0x38>
    3998:	80c01417 	ldw	r3,80(r16)
    399c:	1887883a 	add	r3,r3,r2
    39a0:	80c01415 	stw	r3,80(r16)
    39a4:	dfc00117 	ldw	ra,4(sp)
    39a8:	dc000017 	ldw	r16,0(sp)
    39ac:	dec00204 	addi	sp,sp,8
    39b0:	f800283a 	ret
    39b4:	80c0030b 	ldhu	r3,12(r16)
    39b8:	18fbffcc 	andi	r3,r3,61439
    39bc:	80c0030d 	sth	r3,12(r16)
    39c0:	dfc00117 	ldw	ra,4(sp)
    39c4:	dc000017 	ldw	r16,0(sp)
    39c8:	dec00204 	addi	sp,sp,8
    39cc:	f800283a 	ret

000039d0 <__swrite>:
    39d0:	2880030b 	ldhu	r2,12(r5)
    39d4:	defffb04 	addi	sp,sp,-20
    39d8:	dcc00315 	stw	r19,12(sp)
    39dc:	10c0400c 	andi	r3,r2,256
    39e0:	18ffffcc 	andi	r3,r3,65535
    39e4:	18e0001c 	xori	r3,r3,32768
    39e8:	dc800215 	stw	r18,8(sp)
    39ec:	dc400115 	stw	r17,4(sp)
    39f0:	dc000015 	stw	r16,0(sp)
    39f4:	dfc00415 	stw	ra,16(sp)
    39f8:	18e00004 	addi	r3,r3,-32768
    39fc:	2821883a 	mov	r16,r5
    3a00:	2027883a 	mov	r19,r4
    3a04:	3025883a 	mov	r18,r6
    3a08:	3823883a 	mov	r17,r7
    3a0c:	18000526 	beq	r3,zero,3a24 <__swrite+0x54>
    3a10:	2940038f 	ldh	r5,14(r5)
    3a14:	000d883a 	mov	r6,zero
    3a18:	01c00084 	movi	r7,2
    3a1c:	00094600 	call	9460 <_lseek_r>
    3a20:	8080030b 	ldhu	r2,12(r16)
    3a24:	8140038f 	ldh	r5,14(r16)
    3a28:	10bbffcc 	andi	r2,r2,61439
    3a2c:	9809883a 	mov	r4,r19
    3a30:	900d883a 	mov	r6,r18
    3a34:	880f883a 	mov	r7,r17
    3a38:	8080030d 	sth	r2,12(r16)
    3a3c:	dfc00417 	ldw	ra,16(sp)
    3a40:	dcc00317 	ldw	r19,12(sp)
    3a44:	dc800217 	ldw	r18,8(sp)
    3a48:	dc400117 	ldw	r17,4(sp)
    3a4c:	dc000017 	ldw	r16,0(sp)
    3a50:	dec00504 	addi	sp,sp,20
    3a54:	00072d01 	jmpi	72d0 <_write_r>

00003a58 <__sseek>:
    3a58:	defffe04 	addi	sp,sp,-8
    3a5c:	dc000015 	stw	r16,0(sp)
    3a60:	2821883a 	mov	r16,r5
    3a64:	2940038f 	ldh	r5,14(r5)
    3a68:	dfc00115 	stw	ra,4(sp)
    3a6c:	00094600 	call	9460 <_lseek_r>
    3a70:	00ffffc4 	movi	r3,-1
    3a74:	10c00826 	beq	r2,r3,3a98 <__sseek+0x40>
    3a78:	80c0030b 	ldhu	r3,12(r16)
    3a7c:	80801415 	stw	r2,80(r16)
    3a80:	18c40014 	ori	r3,r3,4096
    3a84:	80c0030d 	sth	r3,12(r16)
    3a88:	dfc00117 	ldw	ra,4(sp)
    3a8c:	dc000017 	ldw	r16,0(sp)
    3a90:	dec00204 	addi	sp,sp,8
    3a94:	f800283a 	ret
    3a98:	80c0030b 	ldhu	r3,12(r16)
    3a9c:	18fbffcc 	andi	r3,r3,61439
    3aa0:	80c0030d 	sth	r3,12(r16)
    3aa4:	dfc00117 	ldw	ra,4(sp)
    3aa8:	dc000017 	ldw	r16,0(sp)
    3aac:	dec00204 	addi	sp,sp,8
    3ab0:	f800283a 	ret

00003ab4 <__sclose>:
    3ab4:	2940038f 	ldh	r5,14(r5)
    3ab8:	00074b01 	jmpi	74b0 <_close_r>

00003abc <strcat>:
    3abc:	defffe04 	addi	sp,sp,-8
    3ac0:	dc000015 	stw	r16,0(sp)
    3ac4:	dfc00115 	stw	ra,4(sp)
    3ac8:	208000cc 	andi	r2,r4,3
    3acc:	2021883a 	mov	r16,r4
    3ad0:	1000141e 	bne	r2,zero,3b24 <strcat+0x68>
    3ad4:	20800017 	ldw	r2,0(r4)
    3ad8:	027fbff4 	movhi	r9,65279
    3adc:	4a7fbfc4 	addi	r9,r9,-257
    3ae0:	02202074 	movhi	r8,32897
    3ae4:	42202004 	addi	r8,r8,-32640
    3ae8:	1247883a 	add	r3,r2,r9
    3aec:	0084303a 	nor	r2,zero,r2
    3af0:	1884703a 	and	r2,r3,r2
    3af4:	1204703a 	and	r2,r2,r8
    3af8:	2007883a 	mov	r3,r4
    3afc:	1000091e 	bne	r2,zero,3b24 <strcat+0x68>
    3b00:	18c00104 	addi	r3,r3,4
    3b04:	19800017 	ldw	r6,0(r3)
    3b08:	324f883a 	add	r7,r6,r9
    3b0c:	018c303a 	nor	r6,zero,r6
    3b10:	398c703a 	and	r6,r7,r6
    3b14:	320c703a 	and	r6,r6,r8
    3b18:	303ff926 	beq	r6,zero,3b00 <strcat+0x44>
    3b1c:	1809883a 	mov	r4,r3
    3b20:	00000106 	br	3b28 <strcat+0x6c>
    3b24:	8009883a 	mov	r4,r16
    3b28:	20800007 	ldb	r2,0(r4)
    3b2c:	10000326 	beq	r2,zero,3b3c <strcat+0x80>
    3b30:	21000044 	addi	r4,r4,1
    3b34:	20c00007 	ldb	r3,0(r4)
    3b38:	183ffd1e 	bne	r3,zero,3b30 <strcat+0x74>
    3b3c:	0003b540 	call	3b54 <strcpy>
    3b40:	8005883a 	mov	r2,r16
    3b44:	dfc00117 	ldw	ra,4(sp)
    3b48:	dc000017 	ldw	r16,0(sp)
    3b4c:	dec00204 	addi	sp,sp,8
    3b50:	f800283a 	ret

00003b54 <strcpy>:
    3b54:	2906b03a 	or	r3,r5,r4
    3b58:	18c000cc 	andi	r3,r3,3
    3b5c:	2005883a 	mov	r2,r4
    3b60:	18001a1e 	bne	r3,zero,3bcc <strcpy+0x78>
    3b64:	29800017 	ldw	r6,0(r5)
    3b68:	02bfbff4 	movhi	r10,65279
    3b6c:	52bfbfc4 	addi	r10,r10,-257
    3b70:	02602074 	movhi	r9,32897
    3b74:	4a602004 	addi	r9,r9,-32640
    3b78:	0188303a 	nor	r4,zero,r6
    3b7c:	3287883a 	add	r3,r6,r10
    3b80:	20c6703a 	and	r3,r4,r3
    3b84:	1a46703a 	and	r3,r3,r9
    3b88:	1800101e 	bne	r3,zero,3bcc <strcpy+0x78>
    3b8c:	1007883a 	mov	r3,r2
    3b90:	19800015 	stw	r6,0(r3)
    3b94:	29400104 	addi	r5,r5,4
    3b98:	29800017 	ldw	r6,0(r5)
    3b9c:	18c00104 	addi	r3,r3,4
    3ba0:	0190303a 	nor	r8,zero,r6
    3ba4:	328f883a 	add	r7,r6,r10
    3ba8:	41ce703a 	and	r7,r8,r7
    3bac:	3a4e703a 	and	r7,r7,r9
    3bb0:	383ff726 	beq	r7,zero,3b90 <strcpy+0x3c>
    3bb4:	29800007 	ldb	r6,0(r5)
    3bb8:	18c00044 	addi	r3,r3,1
    3bbc:	29400044 	addi	r5,r5,1
    3bc0:	19bfffc5 	stb	r6,-1(r3)
    3bc4:	3000021e 	bne	r6,zero,3bd0 <strcpy+0x7c>
    3bc8:	f800283a 	ret
    3bcc:	1007883a 	mov	r3,r2
    3bd0:	29800007 	ldb	r6,0(r5)
    3bd4:	18c00044 	addi	r3,r3,1
    3bd8:	29400044 	addi	r5,r5,1
    3bdc:	19bfffc5 	stb	r6,-1(r3)
    3be0:	303ffb1e 	bne	r6,zero,3bd0 <strcpy+0x7c>
    3be4:	f800283a 	ret

00003be8 <strlen>:
    3be8:	208000cc 	andi	r2,r4,3
    3bec:	10001f1e 	bne	r2,zero,3c6c <strlen+0x84>
    3bf0:	20800017 	ldw	r2,0(r4)
    3bf4:	01ffbff4 	movhi	r7,65279
    3bf8:	39ffbfc4 	addi	r7,r7,-257
    3bfc:	01a02074 	movhi	r6,32897
    3c00:	31a02004 	addi	r6,r6,-32640
    3c04:	11c7883a 	add	r3,r2,r7
    3c08:	0084303a 	nor	r2,zero,r2
    3c0c:	1886703a 	and	r3,r3,r2
    3c10:	1986703a 	and	r3,r3,r6
    3c14:	2005883a 	mov	r2,r4
    3c18:	1800101e 	bne	r3,zero,3c5c <strlen+0x74>
    3c1c:	10800104 	addi	r2,r2,4
    3c20:	10c00017 	ldw	r3,0(r2)
    3c24:	19cb883a 	add	r5,r3,r7
    3c28:	00c6303a 	nor	r3,zero,r3
    3c2c:	28c6703a 	and	r3,r5,r3
    3c30:	1986703a 	and	r3,r3,r6
    3c34:	1800091e 	bne	r3,zero,3c5c <strlen+0x74>
    3c38:	10800104 	addi	r2,r2,4
    3c3c:	10c00017 	ldw	r3,0(r2)
    3c40:	19cb883a 	add	r5,r3,r7
    3c44:	00c6303a 	nor	r3,zero,r3
    3c48:	28c6703a 	and	r3,r5,r3
    3c4c:	1986703a 	and	r3,r3,r6
    3c50:	183ff226 	beq	r3,zero,3c1c <strlen+0x34>
    3c54:	00000106 	br	3c5c <strlen+0x74>
    3c58:	10800044 	addi	r2,r2,1
    3c5c:	10c00007 	ldb	r3,0(r2)
    3c60:	183ffd1e 	bne	r3,zero,3c58 <strlen+0x70>
    3c64:	1105c83a 	sub	r2,r2,r4
    3c68:	f800283a 	ret
    3c6c:	2005883a 	mov	r2,r4
    3c70:	003ffa06 	br	3c5c <strlen+0x74>

00003c74 <__sprint_r>:
    3c74:	30800217 	ldw	r2,8(r6)
    3c78:	defffe04 	addi	sp,sp,-8
    3c7c:	dc000015 	stw	r16,0(sp)
    3c80:	dfc00115 	stw	ra,4(sp)
    3c84:	3021883a 	mov	r16,r6
    3c88:	10000226 	beq	r2,zero,3c94 <__sprint_r+0x20>
    3c8c:	0008e040 	call	8e04 <__sfvwrite_r>
    3c90:	80000215 	stw	zero,8(r16)
    3c94:	80000115 	stw	zero,4(r16)
    3c98:	dfc00117 	ldw	ra,4(sp)
    3c9c:	dc000017 	ldw	r16,0(sp)
    3ca0:	dec00204 	addi	sp,sp,8
    3ca4:	f800283a 	ret

00003ca8 <___vfprintf_internal_r>:
    3ca8:	defeb904 	addi	sp,sp,-1308
    3cac:	dc013d15 	stw	r16,1268(sp)
    3cb0:	d9013015 	stw	r4,1216(sp)
    3cb4:	dfc14615 	stw	ra,1304(sp)
    3cb8:	df014515 	stw	fp,1300(sp)
    3cbc:	ddc14415 	stw	r23,1296(sp)
    3cc0:	dd814315 	stw	r22,1292(sp)
    3cc4:	dd414215 	stw	r21,1288(sp)
    3cc8:	dd014115 	stw	r20,1284(sp)
    3ccc:	dcc14015 	stw	r19,1280(sp)
    3cd0:	dc813f15 	stw	r18,1276(sp)
    3cd4:	dc413e15 	stw	r17,1272(sp)
    3cd8:	d9412915 	stw	r5,1188(sp)
    3cdc:	3021883a 	mov	r16,r6
    3ce0:	d9c12d15 	stw	r7,1204(sp)
    3ce4:	000942c0 	call	942c <_localeconv_r>
    3ce8:	10800017 	ldw	r2,0(r2)
    3cec:	d9013017 	ldw	r4,1216(sp)
    3cf0:	d8013315 	stw	zero,1228(sp)
    3cf4:	d8813715 	stw	r2,1244(sp)
    3cf8:	d8013415 	stw	zero,1232(sp)
    3cfc:	20000226 	beq	r4,zero,3d08 <___vfprintf_internal_r+0x60>
    3d00:	20800e17 	ldw	r2,56(r4)
    3d04:	10014b26 	beq	r2,zero,4234 <___vfprintf_internal_r+0x58c>
    3d08:	d8c12917 	ldw	r3,1188(sp)
    3d0c:	1880030b 	ldhu	r2,12(r3)
    3d10:	10c0020c 	andi	r3,r2,8
    3d14:	18ffffcc 	andi	r3,r3,65535
    3d18:	18e0001c 	xori	r3,r3,32768
    3d1c:	18e00004 	addi	r3,r3,-32768
    3d20:	1800ed26 	beq	r3,zero,40d8 <___vfprintf_internal_r+0x430>
    3d24:	d9012917 	ldw	r4,1188(sp)
    3d28:	20c00417 	ldw	r3,16(r4)
    3d2c:	1800ea26 	beq	r3,zero,40d8 <___vfprintf_internal_r+0x430>
    3d30:	1100068c 	andi	r4,r2,26
    3d34:	00c00284 	movi	r3,10
    3d38:	20c0f026 	beq	r4,r3,40fc <___vfprintf_internal_r+0x454>
    3d3c:	d9010dc4 	addi	r4,sp,1079
    3d40:	d8810e04 	addi	r2,sp,1080
    3d44:	dc413017 	ldw	r17,1216(sp)
    3d48:	d8c00404 	addi	r3,sp,16
    3d4c:	d9012615 	stw	r4,1176(sp)
    3d50:	1109c83a 	sub	r4,r2,r4
    3d54:	d8812715 	stw	r2,1180(sp)
    3d58:	d8c11b15 	stw	r3,1132(sp)
    3d5c:	d8011d15 	stw	zero,1140(sp)
    3d60:	d8011c15 	stw	zero,1136(sp)
    3d64:	802b883a 	mov	r21,r16
    3d68:	d8013215 	stw	zero,1224(sp)
    3d6c:	d8013615 	stw	zero,1240(sp)
    3d70:	d8013515 	stw	zero,1236(sp)
    3d74:	d8012c15 	stw	zero,1200(sp)
    3d78:	1813883a 	mov	r9,r3
    3d7c:	d9013915 	stw	r4,1252(sp)
    3d80:	a8800007 	ldb	r2,0(r21)
    3d84:	1002f326 	beq	r2,zero,4954 <___vfprintf_internal_r+0xcac>
    3d88:	00c00944 	movi	r3,37
    3d8c:	a825883a 	mov	r18,r21
    3d90:	10c0021e 	bne	r2,r3,3d9c <___vfprintf_internal_r+0xf4>
    3d94:	00001406 	br	3de8 <___vfprintf_internal_r+0x140>
    3d98:	10c00326 	beq	r2,r3,3da8 <___vfprintf_internal_r+0x100>
    3d9c:	94800044 	addi	r18,r18,1
    3da0:	90800007 	ldb	r2,0(r18)
    3da4:	103ffc1e 	bne	r2,zero,3d98 <___vfprintf_internal_r+0xf0>
    3da8:	9561c83a 	sub	r16,r18,r21
    3dac:	80000e26 	beq	r16,zero,3de8 <___vfprintf_internal_r+0x140>
    3db0:	da011d17 	ldw	r8,1140(sp)
    3db4:	d8c11c17 	ldw	r3,1136(sp)
    3db8:	4d400015 	stw	r21,0(r9)
    3dbc:	4c000115 	stw	r16,4(r9)
    3dc0:	4411883a 	add	r8,r8,r16
    3dc4:	18c00044 	addi	r3,r3,1
    3dc8:	da011d15 	stw	r8,1140(sp)
    3dcc:	d8c11c15 	stw	r3,1136(sp)
    3dd0:	008001c4 	movi	r2,7
    3dd4:	10c11016 	blt	r2,r3,4218 <___vfprintf_internal_r+0x570>
    3dd8:	4a400204 	addi	r9,r9,8
    3ddc:	d8812c17 	ldw	r2,1200(sp)
    3de0:	1405883a 	add	r2,r2,r16
    3de4:	d8812c15 	stw	r2,1200(sp)
    3de8:	90800007 	ldb	r2,0(r18)
    3dec:	1000ee26 	beq	r2,zero,41a8 <___vfprintf_internal_r+0x500>
    3df0:	95400044 	addi	r21,r18,1
    3df4:	94800047 	ldb	r18,1(r18)
    3df8:	073fffc4 	movi	fp,-1
    3dfc:	e007883a 	mov	r3,fp
    3e00:	d8012585 	stb	zero,1174(sp)
    3e04:	d8012e15 	stw	zero,1208(sp)
    3e08:	0021883a 	mov	r16,zero
    3e0c:	05001604 	movi	r20,88
    3e10:	04c00244 	movi	r19,9
    3e14:	4839883a 	mov	fp,r9
    3e18:	ad400044 	addi	r21,r21,1
    3e1c:	90bff804 	addi	r2,r18,-32
    3e20:	a080462e 	bgeu	r20,r2,3f3c <___vfprintf_internal_r+0x294>
    3e24:	e013883a 	mov	r9,fp
    3e28:	9000df26 	beq	r18,zero,41a8 <___vfprintf_internal_r+0x500>
    3e2c:	00c00044 	movi	r3,1
    3e30:	d8c12815 	stw	r3,1184(sp)
    3e34:	dc810405 	stb	r18,1040(sp)
    3e38:	d8012585 	stb	zero,1174(sp)
    3e3c:	d8c12b15 	stw	r3,1196(sp)
    3e40:	dcc10404 	addi	r19,sp,1040
    3e44:	d8013115 	stw	zero,1220(sp)
    3e48:	80c0008c 	andi	r3,r16,2
    3e4c:	d8c12a15 	stw	r3,1192(sp)
    3e50:	18000326 	beq	r3,zero,3e60 <___vfprintf_internal_r+0x1b8>
    3e54:	d8c12817 	ldw	r3,1184(sp)
    3e58:	18c00084 	addi	r3,r3,2
    3e5c:	d8c12815 	stw	r3,1184(sp)
    3e60:	80c0210c 	andi	r3,r16,132
    3e64:	d8c12f15 	stw	r3,1212(sp)
    3e68:	1802251e 	bne	r3,zero,4700 <___vfprintf_internal_r+0xa58>
    3e6c:	d9012e17 	ldw	r4,1208(sp)
    3e70:	d8c12817 	ldw	r3,1184(sp)
    3e74:	20edc83a 	sub	r22,r4,r3
    3e78:	0582210e 	bge	zero,r22,4700 <___vfprintf_internal_r+0xa58>
    3e7c:	02800404 	movi	r10,16
    3e80:	da011d17 	ldw	r8,1140(sp)
    3e84:	d8c11c17 	ldw	r3,1136(sp)
    3e88:	05c00074 	movhi	r23,1
    3e8c:	bdd07b84 	addi	r23,r23,16878
    3e90:	5580200e 	bge	r10,r22,3f14 <___vfprintf_internal_r+0x26c>
    3e94:	dc813815 	stw	r18,1248(sp)
    3e98:	5039883a 	mov	fp,r10
    3e9c:	b825883a 	mov	r18,r23
    3ea0:	050001c4 	movi	r20,7
    3ea4:	b02f883a 	mov	r23,r22
    3ea8:	802d883a 	mov	r22,r16
    3eac:	dc012917 	ldw	r16,1188(sp)
    3eb0:	00000306 	br	3ec0 <___vfprintf_internal_r+0x218>
    3eb4:	bdfffc04 	addi	r23,r23,-16
    3eb8:	4a400204 	addi	r9,r9,8
    3ebc:	e5c0110e 	bge	fp,r23,3f04 <___vfprintf_internal_r+0x25c>
    3ec0:	4c800015 	stw	r18,0(r9)
    3ec4:	4f000115 	stw	fp,4(r9)
    3ec8:	42000404 	addi	r8,r8,16
    3ecc:	18c00044 	addi	r3,r3,1
    3ed0:	da011d15 	stw	r8,1140(sp)
    3ed4:	d8c11c15 	stw	r3,1136(sp)
    3ed8:	a0fff60e 	bge	r20,r3,3eb4 <___vfprintf_internal_r+0x20c>
    3edc:	8809883a 	mov	r4,r17
    3ee0:	800b883a 	mov	r5,r16
    3ee4:	d9811b04 	addi	r6,sp,1132
    3ee8:	0003c740 	call	3c74 <__sprint_r>
    3eec:	1000b41e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    3ef0:	bdfffc04 	addi	r23,r23,-16
    3ef4:	da011d17 	ldw	r8,1140(sp)
    3ef8:	d8c11c17 	ldw	r3,1136(sp)
    3efc:	da400404 	addi	r9,sp,16
    3f00:	e5ffef16 	blt	fp,r23,3ec0 <___vfprintf_internal_r+0x218>
    3f04:	b021883a 	mov	r16,r22
    3f08:	b82d883a 	mov	r22,r23
    3f0c:	902f883a 	mov	r23,r18
    3f10:	dc813817 	ldw	r18,1248(sp)
    3f14:	4dc00015 	stw	r23,0(r9)
    3f18:	4d800115 	stw	r22,4(r9)
    3f1c:	4591883a 	add	r8,r8,r22
    3f20:	18c00044 	addi	r3,r3,1
    3f24:	da011d15 	stw	r8,1140(sp)
    3f28:	d8c11c15 	stw	r3,1136(sp)
    3f2c:	008001c4 	movi	r2,7
    3f30:	10c3fe16 	blt	r2,r3,4f2c <___vfprintf_internal_r+0x1284>
    3f34:	4a400204 	addi	r9,r9,8
    3f38:	0001f306 	br	4708 <___vfprintf_internal_r+0xa60>
    3f3c:	1085883a 	add	r2,r2,r2
    3f40:	1085883a 	add	r2,r2,r2
    3f44:	01000034 	movhi	r4,0
    3f48:	210fd604 	addi	r4,r4,16216
    3f4c:	1105883a 	add	r2,r2,r4
    3f50:	10800017 	ldw	r2,0(r2)
    3f54:	1000683a 	jmp	r2
    3f58:	00004634 	movhi	zero,280
    3f5c:	00003e24 	muli	zero,zero,248
    3f60:	00003e24 	muli	zero,zero,248
    3f64:	0000464c 	andi	zero,zero,281
    3f68:	00003e24 	muli	zero,zero,248
    3f6c:	00003e24 	muli	zero,zero,248
    3f70:	00003e24 	muli	zero,zero,248
    3f74:	00003e24 	muli	zero,zero,248
    3f78:	00003e24 	muli	zero,zero,248
    3f7c:	00003e24 	muli	zero,zero,248
    3f80:	00004504 	movi	zero,276
    3f84:	00004698 	cmpnei	zero,zero,282
    3f88:	00003e24 	muli	zero,zero,248
    3f8c:	000040cc 	andi	zero,zero,259
    3f90:	0000446c 	andhi	zero,zero,273
    3f94:	00003e24 	muli	zero,zero,248
    3f98:	00004658 	cmpnei	zero,zero,281
    3f9c:	00004664 	muli	zero,zero,281
    3fa0:	00004664 	muli	zero,zero,281
    3fa4:	00004664 	muli	zero,zero,281
    3fa8:	00004664 	muli	zero,zero,281
    3fac:	00004664 	muli	zero,zero,281
    3fb0:	00004664 	muli	zero,zero,281
    3fb4:	00004664 	muli	zero,zero,281
    3fb8:	00004664 	muli	zero,zero,281
    3fbc:	00004664 	muli	zero,zero,281
    3fc0:	00003e24 	muli	zero,zero,248
    3fc4:	00003e24 	muli	zero,zero,248
    3fc8:	00003e24 	muli	zero,zero,248
    3fcc:	00003e24 	muli	zero,zero,248
    3fd0:	00003e24 	muli	zero,zero,248
    3fd4:	00003e24 	muli	zero,zero,248
    3fd8:	00003e24 	muli	zero,zero,248
    3fdc:	00003e24 	muli	zero,zero,248
    3fe0:	00003e24 	muli	zero,zero,248
    3fe4:	00003e24 	muli	zero,zero,248
    3fe8:	0000423c 	xorhi	zero,zero,264
    3fec:	000042fc 	xorhi	zero,zero,267
    3ff0:	00003e24 	muli	zero,zero,248
    3ff4:	000042fc 	xorhi	zero,zero,267
    3ff8:	00003e24 	muli	zero,zero,248
    3ffc:	00003e24 	muli	zero,zero,248
    4000:	00003e24 	muli	zero,zero,248
    4004:	00003e24 	muli	zero,zero,248
    4008:	00004390 	cmplti	zero,zero,270
    400c:	00003e24 	muli	zero,zero,248
    4010:	00003e24 	muli	zero,zero,248
    4014:	0000439c 	xori	zero,zero,270
    4018:	00003e24 	muli	zero,zero,248
    401c:	00003e24 	muli	zero,zero,248
    4020:	00003e24 	muli	zero,zero,248
    4024:	00003e24 	muli	zero,zero,248
    4028:	00003e24 	muli	zero,zero,248
    402c:	000043d4 	movui	zero,271
    4030:	00003e24 	muli	zero,zero,248
    4034:	00003e24 	muli	zero,zero,248
    4038:	00004410 	cmplti	zero,zero,272
    403c:	00003e24 	muli	zero,zero,248
    4040:	00003e24 	muli	zero,zero,248
    4044:	00003e24 	muli	zero,zero,248
    4048:	00003e24 	muli	zero,zero,248
    404c:	00003e24 	muli	zero,zero,248
    4050:	00003e24 	muli	zero,zero,248
    4054:	00003e24 	muli	zero,zero,248
    4058:	00003e24 	muli	zero,zero,248
    405c:	00003e24 	muli	zero,zero,248
    4060:	00003e24 	muli	zero,zero,248
    4064:	000046a8 	cmpgeui	zero,zero,282
    4068:	000046dc 	xori	zero,zero,283
    406c:	000042fc 	xorhi	zero,zero,267
    4070:	000042fc 	xorhi	zero,zero,267
    4074:	000042fc 	xorhi	zero,zero,267
    4078:	00004628 	cmpgeui	zero,zero,280
    407c:	000046dc 	xori	zero,zero,283
    4080:	00003e24 	muli	zero,zero,248
    4084:	00003e24 	muli	zero,zero,248
    4088:	000044b4 	movhi	zero,274
    408c:	00003e24 	muli	zero,zero,248
    4090:	000044cc 	andi	zero,zero,275
    4094:	000046e8 	cmpgeui	zero,zero,283
    4098:	0000452c 	andhi	zero,zero,276
    409c:	0000457c 	xorhi	zero,zero,277
    40a0:	00003e24 	muli	zero,zero,248
    40a4:	00004588 	cmpgei	zero,zero,278
    40a8:	00003e24 	muli	zero,zero,248
    40ac:	000046f4 	movhi	zero,283
    40b0:	00003e24 	muli	zero,zero,248
    40b4:	00003e24 	muli	zero,zero,248
    40b8:	000045ec 	andhi	zero,zero,279
    40bc:	d9012e17 	ldw	r4,1208(sp)
    40c0:	d8812d15 	stw	r2,1204(sp)
    40c4:	0109c83a 	sub	r4,zero,r4
    40c8:	d9012e15 	stw	r4,1208(sp)
    40cc:	84000114 	ori	r16,r16,4
    40d0:	ac800007 	ldb	r18,0(r21)
    40d4:	003f5006 	br	3e18 <___vfprintf_internal_r+0x170>
    40d8:	d9013017 	ldw	r4,1216(sp)
    40dc:	d9412917 	ldw	r5,1188(sp)
    40e0:	000733c0 	call	733c <__swsetup_r>
    40e4:	10003d1e 	bne	r2,zero,41dc <___vfprintf_internal_r+0x534>
    40e8:	d8c12917 	ldw	r3,1188(sp)
    40ec:	1880030b 	ldhu	r2,12(r3)
    40f0:	00c00284 	movi	r3,10
    40f4:	1100068c 	andi	r4,r2,26
    40f8:	20ff101e 	bne	r4,r3,3d3c <___vfprintf_internal_r+0x94>
    40fc:	d9012917 	ldw	r4,1188(sp)
    4100:	20c0038b 	ldhu	r3,14(r4)
    4104:	193fffcc 	andi	r4,r3,65535
    4108:	2120001c 	xori	r4,r4,32768
    410c:	21200004 	addi	r4,r4,-32768
    4110:	203f0a16 	blt	r4,zero,3d3c <___vfprintf_internal_r+0x94>
    4114:	d9012917 	ldw	r4,1188(sp)
    4118:	d9c12d17 	ldw	r7,1204(sp)
    411c:	10bfff4c 	andi	r2,r2,65533
    4120:	22800717 	ldw	r10,28(r4)
    4124:	22400917 	ldw	r9,36(r4)
    4128:	d9013017 	ldw	r4,1216(sp)
    412c:	02010004 	movi	r8,1024
    4130:	d881070d 	sth	r2,1052(sp)
    4134:	d9410404 	addi	r5,sp,1040
    4138:	d8800404 	addi	r2,sp,16
    413c:	800d883a 	mov	r6,r16
    4140:	d8c1078d 	sth	r3,1054(sp)
    4144:	da810b15 	stw	r10,1068(sp)
    4148:	da410d15 	stw	r9,1076(sp)
    414c:	d8810415 	stw	r2,1040(sp)
    4150:	d8810815 	stw	r2,1056(sp)
    4154:	da010615 	stw	r8,1048(sp)
    4158:	da010915 	stw	r8,1060(sp)
    415c:	d8010a15 	stw	zero,1064(sp)
    4160:	0003ca80 	call	3ca8 <___vfprintf_internal_r>
    4164:	d8812c15 	stw	r2,1200(sp)
    4168:	10000416 	blt	r2,zero,417c <___vfprintf_internal_r+0x4d4>
    416c:	d9013017 	ldw	r4,1216(sp)
    4170:	d9410404 	addi	r5,sp,1040
    4174:	000167c0 	call	167c <_fflush_r>
    4178:	1006501e 	bne	r2,zero,5abc <___vfprintf_internal_r+0x1e14>
    417c:	d881070b 	ldhu	r2,1052(sp)
    4180:	1080100c 	andi	r2,r2,64
    4184:	10bfffcc 	andi	r2,r2,65535
    4188:	10a0001c 	xori	r2,r2,32768
    418c:	10a00004 	addi	r2,r2,-32768
    4190:	10001426 	beq	r2,zero,41e4 <___vfprintf_internal_r+0x53c>
    4194:	d8c12917 	ldw	r3,1188(sp)
    4198:	1880030b 	ldhu	r2,12(r3)
    419c:	10801014 	ori	r2,r2,64
    41a0:	1880030d 	sth	r2,12(r3)
    41a4:	00000f06 	br	41e4 <___vfprintf_internal_r+0x53c>
    41a8:	d8811d17 	ldw	r2,1140(sp)
    41ac:	10000426 	beq	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    41b0:	d9013017 	ldw	r4,1216(sp)
    41b4:	d9412917 	ldw	r5,1188(sp)
    41b8:	d9811b04 	addi	r6,sp,1132
    41bc:	0003c740 	call	3c74 <__sprint_r>
    41c0:	d8c12917 	ldw	r3,1188(sp)
    41c4:	1880030b 	ldhu	r2,12(r3)
    41c8:	1080100c 	andi	r2,r2,64
    41cc:	10bfffcc 	andi	r2,r2,65535
    41d0:	10a0001c 	xori	r2,r2,32768
    41d4:	10a00004 	addi	r2,r2,-32768
    41d8:	10000226 	beq	r2,zero,41e4 <___vfprintf_internal_r+0x53c>
    41dc:	00bfffc4 	movi	r2,-1
    41e0:	d8812c15 	stw	r2,1200(sp)
    41e4:	d8812c17 	ldw	r2,1200(sp)
    41e8:	dfc14617 	ldw	ra,1304(sp)
    41ec:	df014517 	ldw	fp,1300(sp)
    41f0:	ddc14417 	ldw	r23,1296(sp)
    41f4:	dd814317 	ldw	r22,1292(sp)
    41f8:	dd414217 	ldw	r21,1288(sp)
    41fc:	dd014117 	ldw	r20,1284(sp)
    4200:	dcc14017 	ldw	r19,1280(sp)
    4204:	dc813f17 	ldw	r18,1276(sp)
    4208:	dc413e17 	ldw	r17,1272(sp)
    420c:	dc013d17 	ldw	r16,1268(sp)
    4210:	dec14704 	addi	sp,sp,1308
    4214:	f800283a 	ret
    4218:	d9412917 	ldw	r5,1188(sp)
    421c:	8809883a 	mov	r4,r17
    4220:	d9811b04 	addi	r6,sp,1132
    4224:	0003c740 	call	3c74 <__sprint_r>
    4228:	103fe51e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    422c:	da400404 	addi	r9,sp,16
    4230:	003eea06 	br	3ddc <___vfprintf_internal_r+0x134>
    4234:	00019380 	call	1938 <__sinit>
    4238:	003eb306 	br	3d08 <___vfprintf_internal_r+0x60>
    423c:	e013883a 	mov	r9,fp
    4240:	84000414 	ori	r16,r16,16
    4244:	1839883a 	mov	fp,r3
    4248:	8080080c 	andi	r2,r16,32
    424c:	10034426 	beq	r2,zero,4f60 <___vfprintf_internal_r+0x12b8>
    4250:	d8c12d17 	ldw	r3,1204(sp)
    4254:	18800117 	ldw	r2,4(r3)
    4258:	1dc00017 	ldw	r23,0(r3)
    425c:	18c00204 	addi	r3,r3,8
    4260:	d8c12d15 	stw	r3,1204(sp)
    4264:	102d883a 	mov	r22,r2
    4268:	1003020e 	bge	r2,zero,4e74 <___vfprintf_internal_r+0x11cc>
    426c:	05efc83a 	sub	r23,zero,r23
    4270:	b804c03a 	cmpne	r2,r23,zero
    4274:	05adc83a 	sub	r22,zero,r22
    4278:	b0adc83a 	sub	r22,r22,r2
    427c:	00800b44 	movi	r2,45
    4280:	d8812585 	stb	r2,1174(sp)
    4284:	00c00044 	movi	r3,1
    4288:	bd84b03a 	or	r2,r23,r22
    428c:	e0000216 	blt	fp,zero,4298 <___vfprintf_internal_r+0x5f0>
    4290:	013fdfc4 	movi	r4,-129
    4294:	8120703a 	and	r16,r16,r4
    4298:	1001cc1e 	bne	r2,zero,49cc <___vfprintf_internal_r+0xd24>
    429c:	e001cb1e 	bne	fp,zero,49cc <___vfprintf_internal_r+0xd24>
    42a0:	18c03fcc 	andi	r3,r3,255
    42a4:	1802ca1e 	bne	r3,zero,4dd0 <___vfprintf_internal_r+0x1128>
    42a8:	8080004c 	andi	r2,r16,1
    42ac:	1002c826 	beq	r2,zero,4dd0 <___vfprintf_internal_r+0x1128>
    42b0:	d8c13917 	ldw	r3,1252(sp)
    42b4:	00800c04 	movi	r2,48
    42b8:	d8810dc5 	stb	r2,1079(sp)
    42bc:	d8c12b15 	stw	r3,1196(sp)
    42c0:	dcc10dc4 	addi	r19,sp,1079
    42c4:	d8812b17 	ldw	r2,1196(sp)
    42c8:	d8812815 	stw	r2,1184(sp)
    42cc:	1700010e 	bge	r2,fp,42d4 <___vfprintf_internal_r+0x62c>
    42d0:	df012815 	stw	fp,1184(sp)
    42d4:	d8812583 	ldbu	r2,1174(sp)
    42d8:	df013115 	stw	fp,1220(sp)
    42dc:	10803fcc 	andi	r2,r2,255
    42e0:	1080201c 	xori	r2,r2,128
    42e4:	10bfe004 	addi	r2,r2,-128
    42e8:	103ed726 	beq	r2,zero,3e48 <___vfprintf_internal_r+0x1a0>
    42ec:	d8c12817 	ldw	r3,1184(sp)
    42f0:	18c00044 	addi	r3,r3,1
    42f4:	d8c12815 	stw	r3,1184(sp)
    42f8:	003ed306 	br	3e48 <___vfprintf_internal_r+0x1a0>
    42fc:	8080020c 	andi	r2,r16,8
    4300:	e013883a 	mov	r9,fp
    4304:	1839883a 	mov	fp,r3
    4308:	1003a626 	beq	r2,zero,51a4 <___vfprintf_internal_r+0x14fc>
    430c:	d9012d17 	ldw	r4,1204(sp)
    4310:	25800017 	ldw	r22,0(r4)
    4314:	25000117 	ldw	r20,4(r4)
    4318:	21000204 	addi	r4,r4,8
    431c:	d9012d15 	stw	r4,1204(sp)
    4320:	dd813315 	stw	r22,1228(sp)
    4324:	dd013415 	stw	r20,1232(sp)
    4328:	b009883a 	mov	r4,r22
    432c:	a00b883a 	mov	r5,r20
    4330:	da413c15 	stw	r9,1264(sp)
    4334:	000b09c0 	call	b09c <__isinfd>
    4338:	da413c17 	ldw	r9,1264(sp)
    433c:	b009883a 	mov	r4,r22
    4340:	a00b883a 	mov	r5,r20
    4344:	10041d26 	beq	r2,zero,53bc <___vfprintf_internal_r+0x1714>
    4348:	000d883a 	mov	r6,zero
    434c:	000f883a 	mov	r7,zero
    4350:	000ff800 	call	ff80 <__ltdf2>
    4354:	da413c17 	ldw	r9,1264(sp)
    4358:	1004da16 	blt	r2,zero,56c4 <___vfprintf_internal_r+0x1a1c>
    435c:	d8812583 	ldbu	r2,1174(sp)
    4360:	00c011c4 	movi	r3,71
    4364:	1c83d116 	blt	r3,r18,52ac <___vfprintf_internal_r+0x1604>
    4368:	04c00074 	movhi	r19,1
    436c:	9cd06b04 	addi	r19,r19,16812
    4370:	00c000c4 	movi	r3,3
    4374:	d8c12815 	stw	r3,1184(sp)
    4378:	00ffdfc4 	movi	r3,-129
    437c:	80e0703a 	and	r16,r16,r3
    4380:	d8c12817 	ldw	r3,1184(sp)
    4384:	d8013115 	stw	zero,1220(sp)
    4388:	d8c12b15 	stw	r3,1196(sp)
    438c:	003fd306 	br	42dc <___vfprintf_internal_r+0x634>
    4390:	84000214 	ori	r16,r16,8
    4394:	ac800007 	ldb	r18,0(r21)
    4398:	003e9f06 	br	3e18 <___vfprintf_internal_r+0x170>
    439c:	e013883a 	mov	r9,fp
    43a0:	84000414 	ori	r16,r16,16
    43a4:	1839883a 	mov	fp,r3
    43a8:	8080080c 	andi	r2,r16,32
    43ac:	10031d26 	beq	r2,zero,5024 <___vfprintf_internal_r+0x137c>
    43b0:	d8812d17 	ldw	r2,1204(sp)
    43b4:	0007883a 	mov	r3,zero
    43b8:	15c00017 	ldw	r23,0(r2)
    43bc:	15800117 	ldw	r22,4(r2)
    43c0:	10800204 	addi	r2,r2,8
    43c4:	d8812d15 	stw	r2,1204(sp)
    43c8:	d8012585 	stb	zero,1174(sp)
    43cc:	bd84b03a 	or	r2,r23,r22
    43d0:	003fae06 	br	428c <___vfprintf_internal_r+0x5e4>
    43d4:	e013883a 	mov	r9,fp
    43d8:	84000414 	ori	r16,r16,16
    43dc:	1839883a 	mov	fp,r3
    43e0:	8080080c 	andi	r2,r16,32
    43e4:	1002e726 	beq	r2,zero,4f84 <___vfprintf_internal_r+0x12dc>
    43e8:	d8c12d17 	ldw	r3,1204(sp)
    43ec:	d9012d17 	ldw	r4,1204(sp)
    43f0:	1dc00017 	ldw	r23,0(r3)
    43f4:	1d800117 	ldw	r22,4(r3)
    43f8:	21000204 	addi	r4,r4,8
    43fc:	00c00044 	movi	r3,1
    4400:	d9012d15 	stw	r4,1204(sp)
    4404:	bd84b03a 	or	r2,r23,r22
    4408:	d8012585 	stb	zero,1174(sp)
    440c:	003f9f06 	br	428c <___vfprintf_internal_r+0x5e4>
    4410:	e013883a 	mov	r9,fp
    4414:	1839883a 	mov	fp,r3
    4418:	00c00074 	movhi	r3,1
    441c:	18d06f04 	addi	r3,r3,16828
    4420:	d8c13615 	stw	r3,1240(sp)
    4424:	8080080c 	andi	r2,r16,32
    4428:	10007726 	beq	r2,zero,4608 <___vfprintf_internal_r+0x960>
    442c:	d9012d17 	ldw	r4,1204(sp)
    4430:	25c00017 	ldw	r23,0(r4)
    4434:	25800117 	ldw	r22,4(r4)
    4438:	21000204 	addi	r4,r4,8
    443c:	d9012d15 	stw	r4,1204(sp)
    4440:	8080004c 	andi	r2,r16,1
    4444:	1002c226 	beq	r2,zero,4f50 <___vfprintf_internal_r+0x12a8>
    4448:	bd84b03a 	or	r2,r23,r22
    444c:	10035d26 	beq	r2,zero,51c4 <___vfprintf_internal_r+0x151c>
    4450:	00c00c04 	movi	r3,48
    4454:	d8c12505 	stb	r3,1172(sp)
    4458:	dc812545 	stb	r18,1173(sp)
    445c:	84000094 	ori	r16,r16,2
    4460:	00c00084 	movi	r3,2
    4464:	d8012585 	stb	zero,1174(sp)
    4468:	003f8806 	br	428c <___vfprintf_internal_r+0x5e4>
    446c:	ac800007 	ldb	r18,0(r21)
    4470:	00c00a84 	movi	r3,42
    4474:	adc00044 	addi	r23,r21,1
    4478:	90c57526 	beq	r18,r3,5a50 <___vfprintf_internal_r+0x1da8>
    447c:	95bff404 	addi	r22,r18,-48
    4480:	0009883a 	mov	r4,zero
    4484:	9d84ff36 	bltu	r19,r22,5884 <___vfprintf_internal_r+0x1bdc>
    4488:	01400284 	movi	r5,10
    448c:	00015040 	call	1504 <__mulsi3>
    4490:	bc800007 	ldb	r18,0(r23)
    4494:	b089883a 	add	r4,r22,r2
    4498:	bdc00044 	addi	r23,r23,1
    449c:	95bff404 	addi	r22,r18,-48
    44a0:	9dbff92e 	bgeu	r19,r22,4488 <___vfprintf_internal_r+0x7e0>
    44a4:	2007883a 	mov	r3,r4
    44a8:	20044316 	blt	r4,zero,55b8 <___vfprintf_internal_r+0x1910>
    44ac:	b82b883a 	mov	r21,r23
    44b0:	003e5a06 	br	3e1c <___vfprintf_internal_r+0x174>
    44b4:	ac800007 	ldb	r18,0(r21)
    44b8:	01001b04 	movi	r4,108
    44bc:	a805883a 	mov	r2,r21
    44c0:	91045526 	beq	r18,r4,5618 <___vfprintf_internal_r+0x1970>
    44c4:	84000414 	ori	r16,r16,16
    44c8:	003e5306 	br	3e18 <___vfprintf_internal_r+0x170>
    44cc:	8080080c 	andi	r2,r16,32
    44d0:	e013883a 	mov	r9,fp
    44d4:	10034026 	beq	r2,zero,51d8 <___vfprintf_internal_r+0x1530>
    44d8:	d9012d17 	ldw	r4,1204(sp)
    44dc:	20800017 	ldw	r2,0(r4)
    44e0:	d9012c17 	ldw	r4,1200(sp)
    44e4:	2007d7fa 	srai	r3,r4,31
    44e8:	d9012d17 	ldw	r4,1204(sp)
    44ec:	10c00115 	stw	r3,4(r2)
    44f0:	21000104 	addi	r4,r4,4
    44f4:	d9012d15 	stw	r4,1204(sp)
    44f8:	d9012c17 	ldw	r4,1200(sp)
    44fc:	11000015 	stw	r4,0(r2)
    4500:	003e1f06 	br	3d80 <___vfprintf_internal_r+0xd8>
    4504:	d9012d17 	ldw	r4,1204(sp)
    4508:	21000017 	ldw	r4,0(r4)
    450c:	d9012e15 	stw	r4,1208(sp)
    4510:	d9012d17 	ldw	r4,1204(sp)
    4514:	20800104 	addi	r2,r4,4
    4518:	d9012e17 	ldw	r4,1208(sp)
    451c:	203ee716 	blt	r4,zero,40bc <___vfprintf_internal_r+0x414>
    4520:	d8812d15 	stw	r2,1204(sp)
    4524:	ac800007 	ldb	r18,0(r21)
    4528:	003e3b06 	br	3e18 <___vfprintf_internal_r+0x170>
    452c:	e013883a 	mov	r9,fp
    4530:	1839883a 	mov	fp,r3
    4534:	d8c12d17 	ldw	r3,1204(sp)
    4538:	00800c04 	movi	r2,48
    453c:	01000074 	movhi	r4,1
    4540:	21107404 	addi	r4,r4,16848
    4544:	1dc00017 	ldw	r23,0(r3)
    4548:	18c00104 	addi	r3,r3,4
    454c:	d8812505 	stb	r2,1172(sp)
    4550:	00801e04 	movi	r2,120
    4554:	d8812545 	stb	r2,1173(sp)
    4558:	d8c12d15 	stw	r3,1204(sp)
    455c:	002d883a 	mov	r22,zero
    4560:	84000094 	ori	r16,r16,2
    4564:	d9013615 	stw	r4,1240(sp)
    4568:	00c00084 	movi	r3,2
    456c:	04801e04 	movi	r18,120
    4570:	b805883a 	mov	r2,r23
    4574:	d8012585 	stb	zero,1174(sp)
    4578:	003f4406 	br	428c <___vfprintf_internal_r+0x5e4>
    457c:	84000814 	ori	r16,r16,32
    4580:	ac800007 	ldb	r18,0(r21)
    4584:	003e2406 	br	3e18 <___vfprintf_internal_r+0x170>
    4588:	d8812d17 	ldw	r2,1204(sp)
    458c:	d8012585 	stb	zero,1174(sp)
    4590:	e013883a 	mov	r9,fp
    4594:	14c00017 	ldw	r19,0(r2)
    4598:	1839883a 	mov	fp,r3
    459c:	15c00104 	addi	r23,r2,4
    45a0:	98045526 	beq	r19,zero,56f8 <___vfprintf_internal_r+0x1a50>
    45a4:	9809883a 	mov	r4,r19
    45a8:	18043116 	blt	r3,zero,5670 <___vfprintf_internal_r+0x19c8>
    45ac:	000b883a 	mov	r5,zero
    45b0:	180d883a 	mov	r6,r3
    45b4:	da413c15 	stw	r9,1264(sp)
    45b8:	00095b40 	call	95b4 <memchr>
    45bc:	da413c17 	ldw	r9,1264(sp)
    45c0:	10047a26 	beq	r2,zero,57ac <___vfprintf_internal_r+0x1b04>
    45c4:	14c5c83a 	sub	r2,r2,r19
    45c8:	d8812b15 	stw	r2,1196(sp)
    45cc:	e083d40e 	bge	fp,r2,5520 <___vfprintf_internal_r+0x1878>
    45d0:	df012815 	stw	fp,1184(sp)
    45d4:	e004e416 	blt	fp,zero,5968 <___vfprintf_internal_r+0x1cc0>
    45d8:	d8812583 	ldbu	r2,1174(sp)
    45dc:	df012b15 	stw	fp,1196(sp)
    45e0:	ddc12d15 	stw	r23,1204(sp)
    45e4:	d8013115 	stw	zero,1220(sp)
    45e8:	003f3c06 	br	42dc <___vfprintf_internal_r+0x634>
    45ec:	00800074 	movhi	r2,1
    45f0:	10907404 	addi	r2,r2,16848
    45f4:	d8813615 	stw	r2,1240(sp)
    45f8:	8080080c 	andi	r2,r16,32
    45fc:	e013883a 	mov	r9,fp
    4600:	1839883a 	mov	fp,r3
    4604:	103f891e 	bne	r2,zero,442c <___vfprintf_internal_r+0x784>
    4608:	8080040c 	andi	r2,r16,16
    460c:	1002c326 	beq	r2,zero,511c <___vfprintf_internal_r+0x1474>
    4610:	d8812d17 	ldw	r2,1204(sp)
    4614:	002d883a 	mov	r22,zero
    4618:	15c00017 	ldw	r23,0(r2)
    461c:	10800104 	addi	r2,r2,4
    4620:	d8812d15 	stw	r2,1204(sp)
    4624:	003f8606 	br	4440 <___vfprintf_internal_r+0x798>
    4628:	84001014 	ori	r16,r16,64
    462c:	ac800007 	ldb	r18,0(r21)
    4630:	003df906 	br	3e18 <___vfprintf_internal_r+0x170>
    4634:	d8812587 	ldb	r2,1174(sp)
    4638:	1002e51e 	bne	r2,zero,51d0 <___vfprintf_internal_r+0x1528>
    463c:	00800804 	movi	r2,32
    4640:	d8812585 	stb	r2,1174(sp)
    4644:	ac800007 	ldb	r18,0(r21)
    4648:	003df306 	br	3e18 <___vfprintf_internal_r+0x170>
    464c:	84000054 	ori	r16,r16,1
    4650:	ac800007 	ldb	r18,0(r21)
    4654:	003df006 	br	3e18 <___vfprintf_internal_r+0x170>
    4658:	84002014 	ori	r16,r16,128
    465c:	ac800007 	ldb	r18,0(r21)
    4660:	003ded06 	br	3e18 <___vfprintf_internal_r+0x170>
    4664:	0009883a 	mov	r4,zero
    4668:	95bff404 	addi	r22,r18,-48
    466c:	182f883a 	mov	r23,r3
    4670:	01400284 	movi	r5,10
    4674:	00015040 	call	1504 <__mulsi3>
    4678:	ac800007 	ldb	r18,0(r21)
    467c:	1589883a 	add	r4,r2,r22
    4680:	ad400044 	addi	r21,r21,1
    4684:	95bff404 	addi	r22,r18,-48
    4688:	9dbff92e 	bgeu	r19,r22,4670 <___vfprintf_internal_r+0x9c8>
    468c:	b807883a 	mov	r3,r23
    4690:	d9012e15 	stw	r4,1208(sp)
    4694:	003de106 	br	3e1c <___vfprintf_internal_r+0x174>
    4698:	00800ac4 	movi	r2,43
    469c:	d8812585 	stb	r2,1174(sp)
    46a0:	ac800007 	ldb	r18,0(r21)
    46a4:	003ddc06 	br	3e18 <___vfprintf_internal_r+0x170>
    46a8:	d8c12d17 	ldw	r3,1204(sp)
    46ac:	d9012d17 	ldw	r4,1204(sp)
    46b0:	e013883a 	mov	r9,fp
    46b4:	18800017 	ldw	r2,0(r3)
    46b8:	21000104 	addi	r4,r4,4
    46bc:	00c00044 	movi	r3,1
    46c0:	d8c12815 	stw	r3,1184(sp)
    46c4:	d8012585 	stb	zero,1174(sp)
    46c8:	d8810405 	stb	r2,1040(sp)
    46cc:	d9012d15 	stw	r4,1204(sp)
    46d0:	d8c12b15 	stw	r3,1196(sp)
    46d4:	dcc10404 	addi	r19,sp,1040
    46d8:	003dda06 	br	3e44 <___vfprintf_internal_r+0x19c>
    46dc:	e013883a 	mov	r9,fp
    46e0:	1839883a 	mov	fp,r3
    46e4:	003ed806 	br	4248 <___vfprintf_internal_r+0x5a0>
    46e8:	e013883a 	mov	r9,fp
    46ec:	1839883a 	mov	fp,r3
    46f0:	003f2d06 	br	43a8 <___vfprintf_internal_r+0x700>
    46f4:	e013883a 	mov	r9,fp
    46f8:	1839883a 	mov	fp,r3
    46fc:	003f3806 	br	43e0 <___vfprintf_internal_r+0x738>
    4700:	da011d17 	ldw	r8,1140(sp)
    4704:	d8c11c17 	ldw	r3,1136(sp)
    4708:	d8812587 	ldb	r2,1174(sp)
    470c:	10000b26 	beq	r2,zero,473c <___vfprintf_internal_r+0xa94>
    4710:	d8812584 	addi	r2,sp,1174
    4714:	48800015 	stw	r2,0(r9)
    4718:	00800044 	movi	r2,1
    471c:	48800115 	stw	r2,4(r9)
    4720:	4091883a 	add	r8,r8,r2
    4724:	1887883a 	add	r3,r3,r2
    4728:	da011d15 	stw	r8,1140(sp)
    472c:	d8c11c15 	stw	r3,1136(sp)
    4730:	008001c4 	movi	r2,7
    4734:	10c18e16 	blt	r2,r3,4d70 <___vfprintf_internal_r+0x10c8>
    4738:	4a400204 	addi	r9,r9,8
    473c:	d9012a17 	ldw	r4,1192(sp)
    4740:	20000b26 	beq	r4,zero,4770 <___vfprintf_internal_r+0xac8>
    4744:	d8812504 	addi	r2,sp,1172
    4748:	48800015 	stw	r2,0(r9)
    474c:	00800084 	movi	r2,2
    4750:	48800115 	stw	r2,4(r9)
    4754:	4091883a 	add	r8,r8,r2
    4758:	18c00044 	addi	r3,r3,1
    475c:	da011d15 	stw	r8,1140(sp)
    4760:	d8c11c15 	stw	r3,1136(sp)
    4764:	008001c4 	movi	r2,7
    4768:	10c17816 	blt	r2,r3,4d4c <___vfprintf_internal_r+0x10a4>
    476c:	4a400204 	addi	r9,r9,8
    4770:	d9012f17 	ldw	r4,1212(sp)
    4774:	00802004 	movi	r2,128
    4778:	2080fc26 	beq	r4,r2,4b6c <___vfprintf_internal_r+0xec4>
    477c:	d8813117 	ldw	r2,1220(sp)
    4780:	d9012b17 	ldw	r4,1196(sp)
    4784:	112fc83a 	sub	r23,r2,r4
    4788:	05c02a0e 	bge	zero,r23,4834 <___vfprintf_internal_r+0xb8c>
    478c:	07000404 	movi	fp,16
    4790:	05000074 	movhi	r20,1
    4794:	a5107f84 	addi	r20,r20,16894
    4798:	e5c01d0e 	bge	fp,r23,4810 <___vfprintf_internal_r+0xb68>
    479c:	dc812a15 	stw	r18,1192(sp)
    47a0:	058001c4 	movi	r22,7
    47a4:	a025883a 	mov	r18,r20
    47a8:	8029883a 	mov	r20,r16
    47ac:	dc012917 	ldw	r16,1188(sp)
    47b0:	00000306 	br	47c0 <___vfprintf_internal_r+0xb18>
    47b4:	bdfffc04 	addi	r23,r23,-16
    47b8:	4a400204 	addi	r9,r9,8
    47bc:	e5c0110e 	bge	fp,r23,4804 <___vfprintf_internal_r+0xb5c>
    47c0:	4c800015 	stw	r18,0(r9)
    47c4:	4f000115 	stw	fp,4(r9)
    47c8:	42000404 	addi	r8,r8,16
    47cc:	18c00044 	addi	r3,r3,1
    47d0:	da011d15 	stw	r8,1140(sp)
    47d4:	d8c11c15 	stw	r3,1136(sp)
    47d8:	b0fff60e 	bge	r22,r3,47b4 <___vfprintf_internal_r+0xb0c>
    47dc:	8809883a 	mov	r4,r17
    47e0:	800b883a 	mov	r5,r16
    47e4:	d9811b04 	addi	r6,sp,1132
    47e8:	0003c740 	call	3c74 <__sprint_r>
    47ec:	103e741e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    47f0:	bdfffc04 	addi	r23,r23,-16
    47f4:	da011d17 	ldw	r8,1140(sp)
    47f8:	d8c11c17 	ldw	r3,1136(sp)
    47fc:	da400404 	addi	r9,sp,16
    4800:	e5ffef16 	blt	fp,r23,47c0 <___vfprintf_internal_r+0xb18>
    4804:	a021883a 	mov	r16,r20
    4808:	9029883a 	mov	r20,r18
    480c:	dc812a17 	ldw	r18,1192(sp)
    4810:	4d000015 	stw	r20,0(r9)
    4814:	4dc00115 	stw	r23,4(r9)
    4818:	45d1883a 	add	r8,r8,r23
    481c:	18c00044 	addi	r3,r3,1
    4820:	da011d15 	stw	r8,1140(sp)
    4824:	d8c11c15 	stw	r3,1136(sp)
    4828:	008001c4 	movi	r2,7
    482c:	10c13e16 	blt	r2,r3,4d28 <___vfprintf_internal_r+0x1080>
    4830:	4a400204 	addi	r9,r9,8
    4834:	8080400c 	andi	r2,r16,256
    4838:	1000831e 	bne	r2,zero,4a48 <___vfprintf_internal_r+0xda0>
    483c:	d8812b17 	ldw	r2,1196(sp)
    4840:	4cc00015 	stw	r19,0(r9)
    4844:	48800115 	stw	r2,4(r9)
    4848:	4091883a 	add	r8,r8,r2
    484c:	18c00044 	addi	r3,r3,1
    4850:	da011d15 	stw	r8,1140(sp)
    4854:	d8c11c15 	stw	r3,1136(sp)
    4858:	008001c4 	movi	r2,7
    485c:	10c05316 	blt	r2,r3,49ac <___vfprintf_internal_r+0xd04>
    4860:	4a400204 	addi	r9,r9,8
    4864:	8400010c 	andi	r16,r16,4
    4868:	80002e26 	beq	r16,zero,4924 <___vfprintf_internal_r+0xc7c>
    486c:	d8812e17 	ldw	r2,1208(sp)
    4870:	d8c12817 	ldw	r3,1184(sp)
    4874:	10e1c83a 	sub	r16,r2,r3
    4878:	04002a0e 	bge	zero,r16,4924 <___vfprintf_internal_r+0xc7c>
    487c:	04800404 	movi	r18,16
    4880:	d8c11c17 	ldw	r3,1136(sp)
    4884:	05c00074 	movhi	r23,1
    4888:	bdd07b84 	addi	r23,r23,16878
    488c:	9400170e 	bge	r18,r16,48ec <___vfprintf_internal_r+0xc44>
    4890:	04c001c4 	movi	r19,7
    4894:	dd012917 	ldw	r20,1188(sp)
    4898:	00000306 	br	48a8 <___vfprintf_internal_r+0xc00>
    489c:	843ffc04 	addi	r16,r16,-16
    48a0:	4a400204 	addi	r9,r9,8
    48a4:	9400110e 	bge	r18,r16,48ec <___vfprintf_internal_r+0xc44>
    48a8:	4dc00015 	stw	r23,0(r9)
    48ac:	4c800115 	stw	r18,4(r9)
    48b0:	42000404 	addi	r8,r8,16
    48b4:	18c00044 	addi	r3,r3,1
    48b8:	da011d15 	stw	r8,1140(sp)
    48bc:	d8c11c15 	stw	r3,1136(sp)
    48c0:	98fff60e 	bge	r19,r3,489c <___vfprintf_internal_r+0xbf4>
    48c4:	8809883a 	mov	r4,r17
    48c8:	a00b883a 	mov	r5,r20
    48cc:	d9811b04 	addi	r6,sp,1132
    48d0:	0003c740 	call	3c74 <__sprint_r>
    48d4:	103e3a1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    48d8:	843ffc04 	addi	r16,r16,-16
    48dc:	da011d17 	ldw	r8,1140(sp)
    48e0:	d8c11c17 	ldw	r3,1136(sp)
    48e4:	da400404 	addi	r9,sp,16
    48e8:	943fef16 	blt	r18,r16,48a8 <___vfprintf_internal_r+0xc00>
    48ec:	4dc00015 	stw	r23,0(r9)
    48f0:	4c000115 	stw	r16,4(r9)
    48f4:	8211883a 	add	r8,r16,r8
    48f8:	18c00044 	addi	r3,r3,1
    48fc:	da011d15 	stw	r8,1140(sp)
    4900:	d8c11c15 	stw	r3,1136(sp)
    4904:	008001c4 	movi	r2,7
    4908:	10c0060e 	bge	r2,r3,4924 <___vfprintf_internal_r+0xc7c>
    490c:	d9412917 	ldw	r5,1188(sp)
    4910:	8809883a 	mov	r4,r17
    4914:	d9811b04 	addi	r6,sp,1132
    4918:	0003c740 	call	3c74 <__sprint_r>
    491c:	103e281e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4920:	da011d17 	ldw	r8,1140(sp)
    4924:	dd012817 	ldw	r20,1184(sp)
    4928:	d9012e17 	ldw	r4,1208(sp)
    492c:	a100010e 	bge	r20,r4,4934 <___vfprintf_internal_r+0xc8c>
    4930:	2029883a 	mov	r20,r4
    4934:	d8812c17 	ldw	r2,1200(sp)
    4938:	1505883a 	add	r2,r2,r20
    493c:	d8812c15 	stw	r2,1200(sp)
    4940:	4000b91e 	bne	r8,zero,4c28 <___vfprintf_internal_r+0xf80>
    4944:	d8011c15 	stw	zero,1136(sp)
    4948:	a8800007 	ldb	r2,0(r21)
    494c:	da400404 	addi	r9,sp,16
    4950:	103d0d1e 	bne	r2,zero,3d88 <___vfprintf_internal_r+0xe0>
    4954:	a825883a 	mov	r18,r21
    4958:	003d2306 	br	3de8 <___vfprintf_internal_r+0x140>
    495c:	d9412917 	ldw	r5,1188(sp)
    4960:	8809883a 	mov	r4,r17
    4964:	d9811b04 	addi	r6,sp,1132
    4968:	0003c740 	call	3c74 <__sprint_r>
    496c:	103e141e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4970:	da011d17 	ldw	r8,1140(sp)
    4974:	da400404 	addi	r9,sp,16
    4978:	8080004c 	andi	r2,r16,1
    497c:	103fb926 	beq	r2,zero,4864 <___vfprintf_internal_r+0xbbc>
    4980:	d8c11c17 	ldw	r3,1136(sp)
    4984:	d9013717 	ldw	r4,1244(sp)
    4988:	00800044 	movi	r2,1
    498c:	48800115 	stw	r2,4(r9)
    4990:	49000015 	stw	r4,0(r9)
    4994:	4091883a 	add	r8,r8,r2
    4998:	1887883a 	add	r3,r3,r2
    499c:	da011d15 	stw	r8,1140(sp)
    49a0:	d8c11c15 	stw	r3,1136(sp)
    49a4:	008001c4 	movi	r2,7
    49a8:	10ffad0e 	bge	r2,r3,4860 <___vfprintf_internal_r+0xbb8>
    49ac:	d9412917 	ldw	r5,1188(sp)
    49b0:	8809883a 	mov	r4,r17
    49b4:	d9811b04 	addi	r6,sp,1132
    49b8:	0003c740 	call	3c74 <__sprint_r>
    49bc:	103e001e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    49c0:	da400404 	addi	r9,sp,16
    49c4:	da011d17 	ldw	r8,1140(sp)
    49c8:	003fa606 	br	4864 <___vfprintf_internal_r+0xbbc>
    49cc:	18803fcc 	andi	r2,r3,255
    49d0:	00c00044 	movi	r3,1
    49d4:	10c10126 	beq	r2,r3,4ddc <___vfprintf_internal_r+0x1134>
    49d8:	00c00084 	movi	r3,2
    49dc:	10c0ed26 	beq	r2,r3,4d94 <___vfprintf_internal_r+0x10ec>
    49e0:	d8c10dc4 	addi	r3,sp,1079
    49e4:	b808d0fa 	srli	r4,r23,3
    49e8:	b00a977a 	slli	r5,r22,29
    49ec:	b02cd0fa 	srli	r22,r22,3
    49f0:	bdc001cc 	andi	r23,r23,7
    49f4:	b8800c04 	addi	r2,r23,48
    49f8:	292eb03a 	or	r23,r5,r4
    49fc:	18800005 	stb	r2,0(r3)
    4a00:	bd88b03a 	or	r4,r23,r22
    4a04:	1827883a 	mov	r19,r3
    4a08:	18ffffc4 	addi	r3,r3,-1
    4a0c:	203ff51e 	bne	r4,zero,49e4 <___vfprintf_internal_r+0xd3c>
    4a10:	8100004c 	andi	r4,r16,1
    4a14:	980b883a 	mov	r5,r19
    4a18:	20000726 	beq	r4,zero,4a38 <___vfprintf_internal_r+0xd90>
    4a1c:	10803fcc 	andi	r2,r2,255
    4a20:	1080201c 	xori	r2,r2,128
    4a24:	10bfe004 	addi	r2,r2,-128
    4a28:	01000c04 	movi	r4,48
    4a2c:	11000226 	beq	r2,r4,4a38 <___vfprintf_internal_r+0xd90>
    4a30:	1827883a 	mov	r19,r3
    4a34:	293fffc5 	stb	r4,-1(r5)
    4a38:	d8812717 	ldw	r2,1180(sp)
    4a3c:	14c5c83a 	sub	r2,r2,r19
    4a40:	d8812b15 	stw	r2,1196(sp)
    4a44:	003e1f06 	br	42c4 <___vfprintf_internal_r+0x61c>
    4a48:	00801944 	movi	r2,101
    4a4c:	14807c0e 	bge	r2,r18,4c40 <___vfprintf_internal_r+0xf98>
    4a50:	d9013317 	ldw	r4,1228(sp)
    4a54:	d9413417 	ldw	r5,1232(sp)
    4a58:	000d883a 	mov	r6,zero
    4a5c:	000f883a 	mov	r7,zero
    4a60:	d8c13b15 	stw	r3,1260(sp)
    4a64:	da013a15 	stw	r8,1256(sp)
    4a68:	da413c15 	stw	r9,1264(sp)
    4a6c:	000fe000 	call	fe00 <__eqdf2>
    4a70:	d8c13b17 	ldw	r3,1260(sp)
    4a74:	da013a17 	ldw	r8,1256(sp)
    4a78:	da413c17 	ldw	r9,1264(sp)
    4a7c:	1001001e 	bne	r2,zero,4e80 <___vfprintf_internal_r+0x11d8>
    4a80:	00800074 	movhi	r2,1
    4a84:	10907b04 	addi	r2,r2,16876
    4a88:	48800015 	stw	r2,0(r9)
    4a8c:	00800044 	movi	r2,1
    4a90:	48800115 	stw	r2,4(r9)
    4a94:	4091883a 	add	r8,r8,r2
    4a98:	1887883a 	add	r3,r3,r2
    4a9c:	da011d15 	stw	r8,1140(sp)
    4aa0:	d8c11c15 	stw	r3,1136(sp)
    4aa4:	008001c4 	movi	r2,7
    4aa8:	10c20316 	blt	r2,r3,52b8 <___vfprintf_internal_r+0x1610>
    4aac:	4a400204 	addi	r9,r9,8
    4ab0:	d8812417 	ldw	r2,1168(sp)
    4ab4:	d8c13217 	ldw	r3,1224(sp)
    4ab8:	10c00216 	blt	r2,r3,4ac4 <___vfprintf_internal_r+0xe1c>
    4abc:	8080004c 	andi	r2,r16,1
    4ac0:	103f6826 	beq	r2,zero,4864 <___vfprintf_internal_r+0xbbc>
    4ac4:	d8c11c17 	ldw	r3,1136(sp)
    4ac8:	d9013717 	ldw	r4,1244(sp)
    4acc:	00800044 	movi	r2,1
    4ad0:	48800115 	stw	r2,4(r9)
    4ad4:	49000015 	stw	r4,0(r9)
    4ad8:	4091883a 	add	r8,r8,r2
    4adc:	1887883a 	add	r3,r3,r2
    4ae0:	da011d15 	stw	r8,1140(sp)
    4ae4:	d8c11c15 	stw	r3,1136(sp)
    4ae8:	008001c4 	movi	r2,7
    4aec:	10c2ce16 	blt	r2,r3,5628 <___vfprintf_internal_r+0x1980>
    4af0:	4a400204 	addi	r9,r9,8
    4af4:	d8813217 	ldw	r2,1224(sp)
    4af8:	14bfffc4 	addi	r18,r2,-1
    4afc:	04bf590e 	bge	zero,r18,4864 <___vfprintf_internal_r+0xbbc>
    4b00:	04c00404 	movi	r19,16
    4b04:	d8c11c17 	ldw	r3,1136(sp)
    4b08:	05000074 	movhi	r20,1
    4b0c:	a5107f84 	addi	r20,r20,16894
    4b10:	9c818a0e 	bge	r19,r18,513c <___vfprintf_internal_r+0x1494>
    4b14:	058001c4 	movi	r22,7
    4b18:	ddc12917 	ldw	r23,1188(sp)
    4b1c:	00000306 	br	4b2c <___vfprintf_internal_r+0xe84>
    4b20:	4a400204 	addi	r9,r9,8
    4b24:	94bffc04 	addi	r18,r18,-16
    4b28:	9c81840e 	bge	r19,r18,513c <___vfprintf_internal_r+0x1494>
    4b2c:	4d000015 	stw	r20,0(r9)
    4b30:	4cc00115 	stw	r19,4(r9)
    4b34:	42000404 	addi	r8,r8,16
    4b38:	18c00044 	addi	r3,r3,1
    4b3c:	da011d15 	stw	r8,1140(sp)
    4b40:	d8c11c15 	stw	r3,1136(sp)
    4b44:	b0fff60e 	bge	r22,r3,4b20 <___vfprintf_internal_r+0xe78>
    4b48:	8809883a 	mov	r4,r17
    4b4c:	b80b883a 	mov	r5,r23
    4b50:	d9811b04 	addi	r6,sp,1132
    4b54:	0003c740 	call	3c74 <__sprint_r>
    4b58:	103d991e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4b5c:	da011d17 	ldw	r8,1140(sp)
    4b60:	d8c11c17 	ldw	r3,1136(sp)
    4b64:	da400404 	addi	r9,sp,16
    4b68:	003fee06 	br	4b24 <___vfprintf_internal_r+0xe7c>
    4b6c:	d8812e17 	ldw	r2,1208(sp)
    4b70:	d9012817 	ldw	r4,1184(sp)
    4b74:	112fc83a 	sub	r23,r2,r4
    4b78:	05ff000e 	bge	zero,r23,477c <___vfprintf_internal_r+0xad4>
    4b7c:	07000404 	movi	fp,16
    4b80:	05000074 	movhi	r20,1
    4b84:	a5107f84 	addi	r20,r20,16894
    4b88:	e5c01d0e 	bge	fp,r23,4c00 <___vfprintf_internal_r+0xf58>
    4b8c:	dc812a15 	stw	r18,1192(sp)
    4b90:	058001c4 	movi	r22,7
    4b94:	a025883a 	mov	r18,r20
    4b98:	8029883a 	mov	r20,r16
    4b9c:	dc012917 	ldw	r16,1188(sp)
    4ba0:	00000306 	br	4bb0 <___vfprintf_internal_r+0xf08>
    4ba4:	bdfffc04 	addi	r23,r23,-16
    4ba8:	4a400204 	addi	r9,r9,8
    4bac:	e5c0110e 	bge	fp,r23,4bf4 <___vfprintf_internal_r+0xf4c>
    4bb0:	4c800015 	stw	r18,0(r9)
    4bb4:	4f000115 	stw	fp,4(r9)
    4bb8:	42000404 	addi	r8,r8,16
    4bbc:	18c00044 	addi	r3,r3,1
    4bc0:	da011d15 	stw	r8,1140(sp)
    4bc4:	d8c11c15 	stw	r3,1136(sp)
    4bc8:	b0fff60e 	bge	r22,r3,4ba4 <___vfprintf_internal_r+0xefc>
    4bcc:	8809883a 	mov	r4,r17
    4bd0:	800b883a 	mov	r5,r16
    4bd4:	d9811b04 	addi	r6,sp,1132
    4bd8:	0003c740 	call	3c74 <__sprint_r>
    4bdc:	103d781e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4be0:	bdfffc04 	addi	r23,r23,-16
    4be4:	da011d17 	ldw	r8,1140(sp)
    4be8:	d8c11c17 	ldw	r3,1136(sp)
    4bec:	da400404 	addi	r9,sp,16
    4bf0:	e5ffef16 	blt	fp,r23,4bb0 <___vfprintf_internal_r+0xf08>
    4bf4:	a021883a 	mov	r16,r20
    4bf8:	9029883a 	mov	r20,r18
    4bfc:	dc812a17 	ldw	r18,1192(sp)
    4c00:	4d000015 	stw	r20,0(r9)
    4c04:	4dc00115 	stw	r23,4(r9)
    4c08:	45d1883a 	add	r8,r8,r23
    4c0c:	18c00044 	addi	r3,r3,1
    4c10:	da011d15 	stw	r8,1140(sp)
    4c14:	d8c11c15 	stw	r3,1136(sp)
    4c18:	008001c4 	movi	r2,7
    4c1c:	10c13616 	blt	r2,r3,50f8 <___vfprintf_internal_r+0x1450>
    4c20:	4a400204 	addi	r9,r9,8
    4c24:	003ed506 	br	477c <___vfprintf_internal_r+0xad4>
    4c28:	d9412917 	ldw	r5,1188(sp)
    4c2c:	8809883a 	mov	r4,r17
    4c30:	d9811b04 	addi	r6,sp,1132
    4c34:	0003c740 	call	3c74 <__sprint_r>
    4c38:	103f4226 	beq	r2,zero,4944 <___vfprintf_internal_r+0xc9c>
    4c3c:	003d6006 	br	41c0 <___vfprintf_internal_r+0x518>
    4c40:	d9013217 	ldw	r4,1224(sp)
    4c44:	00800044 	movi	r2,1
    4c48:	4cc00015 	stw	r19,0(r9)
    4c4c:	1101000e 	bge	r2,r4,5050 <___vfprintf_internal_r+0x13a8>
    4c50:	00800044 	movi	r2,1
    4c54:	48800115 	stw	r2,4(r9)
    4c58:	4091883a 	add	r8,r8,r2
    4c5c:	1887883a 	add	r3,r3,r2
    4c60:	da011d15 	stw	r8,1140(sp)
    4c64:	d8c11c15 	stw	r3,1136(sp)
    4c68:	008001c4 	movi	r2,7
    4c6c:	10c10c16 	blt	r2,r3,50a0 <___vfprintf_internal_r+0x13f8>
    4c70:	4a400204 	addi	r9,r9,8
    4c74:	d8813717 	ldw	r2,1244(sp)
    4c78:	48800015 	stw	r2,0(r9)
    4c7c:	00800044 	movi	r2,1
    4c80:	48800115 	stw	r2,4(r9)
    4c84:	4091883a 	add	r8,r8,r2
    4c88:	1887883a 	add	r3,r3,r2
    4c8c:	da011d15 	stw	r8,1140(sp)
    4c90:	d8c11c15 	stw	r3,1136(sp)
    4c94:	008001c4 	movi	r2,7
    4c98:	10c10a16 	blt	r2,r3,50c4 <___vfprintf_internal_r+0x141c>
    4c9c:	4c800204 	addi	r18,r9,8
    4ca0:	d9013317 	ldw	r4,1228(sp)
    4ca4:	d9413417 	ldw	r5,1232(sp)
    4ca8:	000d883a 	mov	r6,zero
    4cac:	000f883a 	mov	r7,zero
    4cb0:	d8c13b15 	stw	r3,1260(sp)
    4cb4:	da013a15 	stw	r8,1256(sp)
    4cb8:	000fe5c0 	call	fe5c <__nedf2>
    4cbc:	d8c13b17 	ldw	r3,1260(sp)
    4cc0:	da013a17 	ldw	r8,1256(sp)
    4cc4:	1000ba26 	beq	r2,zero,4fb0 <___vfprintf_internal_r+0x1308>
    4cc8:	d9013217 	ldw	r4,1224(sp)
    4ccc:	9cc00044 	addi	r19,r19,1
    4cd0:	94c00015 	stw	r19,0(r18)
    4cd4:	20bfffc4 	addi	r2,r4,-1
    4cd8:	90800115 	stw	r2,4(r18)
    4cdc:	4091883a 	add	r8,r8,r2
    4ce0:	18c00044 	addi	r3,r3,1
    4ce4:	da011d15 	stw	r8,1140(sp)
    4ce8:	d8c11c15 	stw	r3,1136(sp)
    4cec:	008001c4 	movi	r2,7
    4cf0:	10c0e216 	blt	r2,r3,507c <___vfprintf_internal_r+0x13d4>
    4cf4:	94800204 	addi	r18,r18,8
    4cf8:	d9013517 	ldw	r4,1236(sp)
    4cfc:	d8811fc4 	addi	r2,sp,1151
    4d00:	90800015 	stw	r2,0(r18)
    4d04:	91000115 	stw	r4,4(r18)
    4d08:	4111883a 	add	r8,r8,r4
    4d0c:	18c00044 	addi	r3,r3,1
    4d10:	da011d15 	stw	r8,1140(sp)
    4d14:	d8c11c15 	stw	r3,1136(sp)
    4d18:	008001c4 	movi	r2,7
    4d1c:	10ff2316 	blt	r2,r3,49ac <___vfprintf_internal_r+0xd04>
    4d20:	92400204 	addi	r9,r18,8
    4d24:	003ecf06 	br	4864 <___vfprintf_internal_r+0xbbc>
    4d28:	d9412917 	ldw	r5,1188(sp)
    4d2c:	8809883a 	mov	r4,r17
    4d30:	d9811b04 	addi	r6,sp,1132
    4d34:	0003c740 	call	3c74 <__sprint_r>
    4d38:	103d211e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4d3c:	da011d17 	ldw	r8,1140(sp)
    4d40:	d8c11c17 	ldw	r3,1136(sp)
    4d44:	da400404 	addi	r9,sp,16
    4d48:	003eba06 	br	4834 <___vfprintf_internal_r+0xb8c>
    4d4c:	d9412917 	ldw	r5,1188(sp)
    4d50:	8809883a 	mov	r4,r17
    4d54:	d9811b04 	addi	r6,sp,1132
    4d58:	0003c740 	call	3c74 <__sprint_r>
    4d5c:	103d181e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4d60:	da011d17 	ldw	r8,1140(sp)
    4d64:	d8c11c17 	ldw	r3,1136(sp)
    4d68:	da400404 	addi	r9,sp,16
    4d6c:	003e8006 	br	4770 <___vfprintf_internal_r+0xac8>
    4d70:	d9412917 	ldw	r5,1188(sp)
    4d74:	8809883a 	mov	r4,r17
    4d78:	d9811b04 	addi	r6,sp,1132
    4d7c:	0003c740 	call	3c74 <__sprint_r>
    4d80:	103d0f1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4d84:	da011d17 	ldw	r8,1140(sp)
    4d88:	d8c11c17 	ldw	r3,1136(sp)
    4d8c:	da400404 	addi	r9,sp,16
    4d90:	003e6a06 	br	473c <___vfprintf_internal_r+0xa94>
    4d94:	d9413617 	ldw	r5,1240(sp)
    4d98:	d8810dc4 	addi	r2,sp,1079
    4d9c:	b8c003cc 	andi	r3,r23,15
    4da0:	b008973a 	slli	r4,r22,28
    4da4:	28c7883a 	add	r3,r5,r3
    4da8:	b82ed13a 	srli	r23,r23,4
    4dac:	18c00003 	ldbu	r3,0(r3)
    4db0:	b02cd13a 	srli	r22,r22,4
    4db4:	25eeb03a 	or	r23,r4,r23
    4db8:	10c00005 	stb	r3,0(r2)
    4dbc:	bd86b03a 	or	r3,r23,r22
    4dc0:	1027883a 	mov	r19,r2
    4dc4:	10bfffc4 	addi	r2,r2,-1
    4dc8:	183ff41e 	bne	r3,zero,4d9c <___vfprintf_internal_r+0x10f4>
    4dcc:	003f1a06 	br	4a38 <___vfprintf_internal_r+0xd90>
    4dd0:	d8012b15 	stw	zero,1196(sp)
    4dd4:	dcc10e04 	addi	r19,sp,1080
    4dd8:	003d3a06 	br	42c4 <___vfprintf_internal_r+0x61c>
    4ddc:	b0025426 	beq	r22,zero,5730 <___vfprintf_internal_r+0x1a88>
    4de0:	b807883a 	mov	r3,r23
    4de4:	d8810dc4 	addi	r2,sp,1079
    4de8:	882f883a 	mov	r23,r17
    4dec:	04c00244 	movi	r19,9
    4df0:	8023883a 	mov	r17,r16
    4df4:	da412815 	stw	r9,1184(sp)
    4df8:	1821883a 	mov	r16,r3
    4dfc:	8009883a 	mov	r4,r16
    4e00:	b00b883a 	mov	r5,r22
    4e04:	01800284 	movi	r6,10
    4e08:	000f883a 	mov	r7,zero
    4e0c:	1029883a 	mov	r20,r2
    4e10:	000ee340 	call	ee34 <__umoddi3>
    4e14:	10800c04 	addi	r2,r2,48
    4e18:	8009883a 	mov	r4,r16
    4e1c:	b00b883a 	mov	r5,r22
    4e20:	a0800005 	stb	r2,0(r20)
    4e24:	01800284 	movi	r6,10
    4e28:	000f883a 	mov	r7,zero
    4e2c:	000e7e40 	call	e7e4 <__udivdi3>
    4e30:	1021883a 	mov	r16,r2
    4e34:	182d883a 	mov	r22,r3
    4e38:	a0bfffc4 	addi	r2,r20,-1
    4e3c:	183fef1e 	bne	r3,zero,4dfc <___vfprintf_internal_r+0x1154>
    4e40:	9c3fee36 	bltu	r19,r16,4dfc <___vfprintf_internal_r+0x1154>
    4e44:	da412817 	ldw	r9,1184(sp)
    4e48:	8005883a 	mov	r2,r16
    4e4c:	8821883a 	mov	r16,r17
    4e50:	b823883a 	mov	r17,r23
    4e54:	102f883a 	mov	r23,r2
    4e58:	d8812717 	ldw	r2,1180(sp)
    4e5c:	a4ffffc4 	addi	r19,r20,-1
    4e60:	bdc00c04 	addi	r23,r23,48
    4e64:	14c5c83a 	sub	r2,r2,r19
    4e68:	a5ffffc5 	stb	r23,-1(r20)
    4e6c:	d8812b15 	stw	r2,1196(sp)
    4e70:	003d1406 	br	42c4 <___vfprintf_internal_r+0x61c>
    4e74:	00c00044 	movi	r3,1
    4e78:	bd84b03a 	or	r2,r23,r22
    4e7c:	003d0306 	br	428c <___vfprintf_internal_r+0x5e4>
    4e80:	dc812417 	ldw	r18,1168(sp)
    4e84:	0481140e 	bge	zero,r18,52d8 <___vfprintf_internal_r+0x1630>
    4e88:	d9013217 	ldw	r4,1224(sp)
    4e8c:	4cc00015 	stw	r19,0(r9)
    4e90:	9100ec16 	blt	r18,r4,5244 <___vfprintf_internal_r+0x159c>
    4e94:	49000115 	stw	r4,4(r9)
    4e98:	4111883a 	add	r8,r8,r4
    4e9c:	18c00044 	addi	r3,r3,1
    4ea0:	da011d15 	stw	r8,1140(sp)
    4ea4:	d8c11c15 	stw	r3,1136(sp)
    4ea8:	008001c4 	movi	r2,7
    4eac:	10c23616 	blt	r2,r3,5788 <___vfprintf_internal_r+0x1ae0>
    4eb0:	4a400204 	addi	r9,r9,8
    4eb4:	d8813217 	ldw	r2,1224(sp)
    4eb8:	90a5c83a 	sub	r18,r18,r2
    4ebc:	04beae0e 	bge	zero,r18,4978 <___vfprintf_internal_r+0xcd0>
    4ec0:	04c00404 	movi	r19,16
    4ec4:	d8c11c17 	ldw	r3,1136(sp)
    4ec8:	05000074 	movhi	r20,1
    4ecc:	a5107f84 	addi	r20,r20,16894
    4ed0:	9c81dd0e 	bge	r19,r18,5648 <___vfprintf_internal_r+0x19a0>
    4ed4:	058001c4 	movi	r22,7
    4ed8:	ddc12917 	ldw	r23,1188(sp)
    4edc:	00000306 	br	4eec <___vfprintf_internal_r+0x1244>
    4ee0:	4a400204 	addi	r9,r9,8
    4ee4:	94bffc04 	addi	r18,r18,-16
    4ee8:	9c81d70e 	bge	r19,r18,5648 <___vfprintf_internal_r+0x19a0>
    4eec:	4d000015 	stw	r20,0(r9)
    4ef0:	4cc00115 	stw	r19,4(r9)
    4ef4:	42000404 	addi	r8,r8,16
    4ef8:	18c00044 	addi	r3,r3,1
    4efc:	da011d15 	stw	r8,1140(sp)
    4f00:	d8c11c15 	stw	r3,1136(sp)
    4f04:	b0fff60e 	bge	r22,r3,4ee0 <___vfprintf_internal_r+0x1238>
    4f08:	8809883a 	mov	r4,r17
    4f0c:	b80b883a 	mov	r5,r23
    4f10:	d9811b04 	addi	r6,sp,1132
    4f14:	0003c740 	call	3c74 <__sprint_r>
    4f18:	103ca91e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4f1c:	da011d17 	ldw	r8,1140(sp)
    4f20:	d8c11c17 	ldw	r3,1136(sp)
    4f24:	da400404 	addi	r9,sp,16
    4f28:	003fee06 	br	4ee4 <___vfprintf_internal_r+0x123c>
    4f2c:	d9412917 	ldw	r5,1188(sp)
    4f30:	8809883a 	mov	r4,r17
    4f34:	d9811b04 	addi	r6,sp,1132
    4f38:	0003c740 	call	3c74 <__sprint_r>
    4f3c:	103ca01e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    4f40:	da011d17 	ldw	r8,1140(sp)
    4f44:	d8c11c17 	ldw	r3,1136(sp)
    4f48:	da400404 	addi	r9,sp,16
    4f4c:	003dee06 	br	4708 <___vfprintf_internal_r+0xa60>
    4f50:	00c00084 	movi	r3,2
    4f54:	bd84b03a 	or	r2,r23,r22
    4f58:	d8012585 	stb	zero,1174(sp)
    4f5c:	003ccb06 	br	428c <___vfprintf_internal_r+0x5e4>
    4f60:	8080040c 	andi	r2,r16,16
    4f64:	1000ae26 	beq	r2,zero,5220 <___vfprintf_internal_r+0x1578>
    4f68:	d9012d17 	ldw	r4,1204(sp)
    4f6c:	25c00017 	ldw	r23,0(r4)
    4f70:	21000104 	addi	r4,r4,4
    4f74:	d9012d15 	stw	r4,1204(sp)
    4f78:	b82dd7fa 	srai	r22,r23,31
    4f7c:	b005883a 	mov	r2,r22
    4f80:	003cb906 	br	4268 <___vfprintf_internal_r+0x5c0>
    4f84:	8080040c 	andi	r2,r16,16
    4f88:	10007026 	beq	r2,zero,514c <___vfprintf_internal_r+0x14a4>
    4f8c:	d8812d17 	ldw	r2,1204(sp)
    4f90:	002d883a 	mov	r22,zero
    4f94:	00c00044 	movi	r3,1
    4f98:	15c00017 	ldw	r23,0(r2)
    4f9c:	10800104 	addi	r2,r2,4
    4fa0:	d8812d15 	stw	r2,1204(sp)
    4fa4:	d8012585 	stb	zero,1174(sp)
    4fa8:	b805883a 	mov	r2,r23
    4fac:	003cb706 	br	428c <___vfprintf_internal_r+0x5e4>
    4fb0:	d8813217 	ldw	r2,1224(sp)
    4fb4:	14ffffc4 	addi	r19,r2,-1
    4fb8:	04ff4f0e 	bge	zero,r19,4cf8 <___vfprintf_internal_r+0x1050>
    4fbc:	05800404 	movi	r22,16
    4fc0:	05000074 	movhi	r20,1
    4fc4:	a5107f84 	addi	r20,r20,16894
    4fc8:	b4c0470e 	bge	r22,r19,50e8 <___vfprintf_internal_r+0x1440>
    4fcc:	05c001c4 	movi	r23,7
    4fd0:	df012917 	ldw	fp,1188(sp)
    4fd4:	00000306 	br	4fe4 <___vfprintf_internal_r+0x133c>
    4fd8:	94800204 	addi	r18,r18,8
    4fdc:	9cfffc04 	addi	r19,r19,-16
    4fe0:	b4c0410e 	bge	r22,r19,50e8 <___vfprintf_internal_r+0x1440>
    4fe4:	95000015 	stw	r20,0(r18)
    4fe8:	95800115 	stw	r22,4(r18)
    4fec:	42000404 	addi	r8,r8,16
    4ff0:	18c00044 	addi	r3,r3,1
    4ff4:	da011d15 	stw	r8,1140(sp)
    4ff8:	d8c11c15 	stw	r3,1136(sp)
    4ffc:	b8fff60e 	bge	r23,r3,4fd8 <___vfprintf_internal_r+0x1330>
    5000:	8809883a 	mov	r4,r17
    5004:	e00b883a 	mov	r5,fp
    5008:	d9811b04 	addi	r6,sp,1132
    500c:	0003c740 	call	3c74 <__sprint_r>
    5010:	103c6b1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5014:	da011d17 	ldw	r8,1140(sp)
    5018:	d8c11c17 	ldw	r3,1136(sp)
    501c:	dc800404 	addi	r18,sp,16
    5020:	003fee06 	br	4fdc <___vfprintf_internal_r+0x1334>
    5024:	8080040c 	andi	r2,r16,16
    5028:	10005326 	beq	r2,zero,5178 <___vfprintf_internal_r+0x14d0>
    502c:	d8c12d17 	ldw	r3,1204(sp)
    5030:	002d883a 	mov	r22,zero
    5034:	1dc00017 	ldw	r23,0(r3)
    5038:	18c00104 	addi	r3,r3,4
    503c:	d8c12d15 	stw	r3,1204(sp)
    5040:	b805883a 	mov	r2,r23
    5044:	0007883a 	mov	r3,zero
    5048:	d8012585 	stb	zero,1174(sp)
    504c:	003c8f06 	br	428c <___vfprintf_internal_r+0x5e4>
    5050:	8088703a 	and	r4,r16,r2
    5054:	203efe1e 	bne	r4,zero,4c50 <___vfprintf_internal_r+0xfa8>
    5058:	48800115 	stw	r2,4(r9)
    505c:	42000044 	addi	r8,r8,1
    5060:	18c00044 	addi	r3,r3,1
    5064:	da011d15 	stw	r8,1140(sp)
    5068:	d8c11c15 	stw	r3,1136(sp)
    506c:	008001c4 	movi	r2,7
    5070:	10c00216 	blt	r2,r3,507c <___vfprintf_internal_r+0x13d4>
    5074:	4c800204 	addi	r18,r9,8
    5078:	003f1f06 	br	4cf8 <___vfprintf_internal_r+0x1050>
    507c:	d9412917 	ldw	r5,1188(sp)
    5080:	8809883a 	mov	r4,r17
    5084:	d9811b04 	addi	r6,sp,1132
    5088:	0003c740 	call	3c74 <__sprint_r>
    508c:	103c4c1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5090:	dc800404 	addi	r18,sp,16
    5094:	da011d17 	ldw	r8,1140(sp)
    5098:	d8c11c17 	ldw	r3,1136(sp)
    509c:	003f1606 	br	4cf8 <___vfprintf_internal_r+0x1050>
    50a0:	d9412917 	ldw	r5,1188(sp)
    50a4:	8809883a 	mov	r4,r17
    50a8:	d9811b04 	addi	r6,sp,1132
    50ac:	0003c740 	call	3c74 <__sprint_r>
    50b0:	103c431e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    50b4:	da011d17 	ldw	r8,1140(sp)
    50b8:	d8c11c17 	ldw	r3,1136(sp)
    50bc:	da400404 	addi	r9,sp,16
    50c0:	003eec06 	br	4c74 <___vfprintf_internal_r+0xfcc>
    50c4:	d9412917 	ldw	r5,1188(sp)
    50c8:	8809883a 	mov	r4,r17
    50cc:	d9811b04 	addi	r6,sp,1132
    50d0:	0003c740 	call	3c74 <__sprint_r>
    50d4:	103c3a1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    50d8:	da011d17 	ldw	r8,1140(sp)
    50dc:	d8c11c17 	ldw	r3,1136(sp)
    50e0:	dc800404 	addi	r18,sp,16
    50e4:	003eee06 	br	4ca0 <___vfprintf_internal_r+0xff8>
    50e8:	95000015 	stw	r20,0(r18)
    50ec:	94c00115 	stw	r19,4(r18)
    50f0:	44d1883a 	add	r8,r8,r19
    50f4:	003efa06 	br	4ce0 <___vfprintf_internal_r+0x1038>
    50f8:	d9412917 	ldw	r5,1188(sp)
    50fc:	8809883a 	mov	r4,r17
    5100:	d9811b04 	addi	r6,sp,1132
    5104:	0003c740 	call	3c74 <__sprint_r>
    5108:	103c2d1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    510c:	da011d17 	ldw	r8,1140(sp)
    5110:	d8c11c17 	ldw	r3,1136(sp)
    5114:	da400404 	addi	r9,sp,16
    5118:	003d9806 	br	477c <___vfprintf_internal_r+0xad4>
    511c:	8080100c 	andi	r2,r16,64
    5120:	10011626 	beq	r2,zero,557c <___vfprintf_internal_r+0x18d4>
    5124:	d8c12d17 	ldw	r3,1204(sp)
    5128:	002d883a 	mov	r22,zero
    512c:	1dc0000b 	ldhu	r23,0(r3)
    5130:	18c00104 	addi	r3,r3,4
    5134:	d8c12d15 	stw	r3,1204(sp)
    5138:	003cc106 	br	4440 <___vfprintf_internal_r+0x798>
    513c:	4d000015 	stw	r20,0(r9)
    5140:	4c800115 	stw	r18,4(r9)
    5144:	4491883a 	add	r8,r8,r18
    5148:	003dc006 	br	484c <___vfprintf_internal_r+0xba4>
    514c:	8080100c 	andi	r2,r16,64
    5150:	10010126 	beq	r2,zero,5558 <___vfprintf_internal_r+0x18b0>
    5154:	d8c12d17 	ldw	r3,1204(sp)
    5158:	002d883a 	mov	r22,zero
    515c:	1dc0000b 	ldhu	r23,0(r3)
    5160:	18c00104 	addi	r3,r3,4
    5164:	d8c12d15 	stw	r3,1204(sp)
    5168:	b805883a 	mov	r2,r23
    516c:	00c00044 	movi	r3,1
    5170:	d8012585 	stb	zero,1174(sp)
    5174:	003c4506 	br	428c <___vfprintf_internal_r+0x5e4>
    5178:	8080100c 	andi	r2,r16,64
    517c:	10010526 	beq	r2,zero,5594 <___vfprintf_internal_r+0x18ec>
    5180:	d9012d17 	ldw	r4,1204(sp)
    5184:	002d883a 	mov	r22,zero
    5188:	0007883a 	mov	r3,zero
    518c:	25c0000b 	ldhu	r23,0(r4)
    5190:	21000104 	addi	r4,r4,4
    5194:	d9012d15 	stw	r4,1204(sp)
    5198:	b805883a 	mov	r2,r23
    519c:	d8012585 	stb	zero,1174(sp)
    51a0:	003c3a06 	br	428c <___vfprintf_internal_r+0x5e4>
    51a4:	d8812d17 	ldw	r2,1204(sp)
    51a8:	15800017 	ldw	r22,0(r2)
    51ac:	15000117 	ldw	r20,4(r2)
    51b0:	10800204 	addi	r2,r2,8
    51b4:	d8812d15 	stw	r2,1204(sp)
    51b8:	dd813315 	stw	r22,1228(sp)
    51bc:	dd013415 	stw	r20,1232(sp)
    51c0:	003c5906 	br	4328 <___vfprintf_internal_r+0x680>
    51c4:	00c00084 	movi	r3,2
    51c8:	d8012585 	stb	zero,1174(sp)
    51cc:	003c2f06 	br	428c <___vfprintf_internal_r+0x5e4>
    51d0:	ac800007 	ldb	r18,0(r21)
    51d4:	003b1006 	br	3e18 <___vfprintf_internal_r+0x170>
    51d8:	8080040c 	andi	r2,r16,16
    51dc:	1000091e 	bne	r2,zero,5204 <___vfprintf_internal_r+0x155c>
    51e0:	8400100c 	andi	r16,r16,64
    51e4:	80000726 	beq	r16,zero,5204 <___vfprintf_internal_r+0x155c>
    51e8:	d8c12d17 	ldw	r3,1204(sp)
    51ec:	d9012c17 	ldw	r4,1200(sp)
    51f0:	18800017 	ldw	r2,0(r3)
    51f4:	18c00104 	addi	r3,r3,4
    51f8:	d8c12d15 	stw	r3,1204(sp)
    51fc:	1100000d 	sth	r4,0(r2)
    5200:	003adf06 	br	3d80 <___vfprintf_internal_r+0xd8>
    5204:	d8c12d17 	ldw	r3,1204(sp)
    5208:	d9012c17 	ldw	r4,1200(sp)
    520c:	18800017 	ldw	r2,0(r3)
    5210:	18c00104 	addi	r3,r3,4
    5214:	d8c12d15 	stw	r3,1204(sp)
    5218:	11000015 	stw	r4,0(r2)
    521c:	003ad806 	br	3d80 <___vfprintf_internal_r+0xd8>
    5220:	8080100c 	andi	r2,r16,64
    5224:	1000c526 	beq	r2,zero,553c <___vfprintf_internal_r+0x1894>
    5228:	d8812d17 	ldw	r2,1204(sp)
    522c:	15c0000f 	ldh	r23,0(r2)
    5230:	10800104 	addi	r2,r2,4
    5234:	d8812d15 	stw	r2,1204(sp)
    5238:	b82dd7fa 	srai	r22,r23,31
    523c:	b005883a 	mov	r2,r22
    5240:	003c0906 	br	4268 <___vfprintf_internal_r+0x5c0>
    5244:	4c800115 	stw	r18,4(r9)
    5248:	9211883a 	add	r8,r18,r8
    524c:	18c00044 	addi	r3,r3,1
    5250:	da011d15 	stw	r8,1140(sp)
    5254:	d8c11c15 	stw	r3,1136(sp)
    5258:	008001c4 	movi	r2,7
    525c:	10c14016 	blt	r2,r3,5760 <___vfprintf_internal_r+0x1ab8>
    5260:	4a400204 	addi	r9,r9,8
    5264:	d8813717 	ldw	r2,1244(sp)
    5268:	9ca7883a 	add	r19,r19,r18
    526c:	48800015 	stw	r2,0(r9)
    5270:	00800044 	movi	r2,1
    5274:	48800115 	stw	r2,4(r9)
    5278:	4091883a 	add	r8,r8,r2
    527c:	1887883a 	add	r3,r3,r2
    5280:	da011d15 	stw	r8,1140(sp)
    5284:	d8c11c15 	stw	r3,1136(sp)
    5288:	008001c4 	movi	r2,7
    528c:	10c12c16 	blt	r2,r3,5740 <___vfprintf_internal_r+0x1a98>
    5290:	4a400204 	addi	r9,r9,8
    5294:	d9013217 	ldw	r4,1224(sp)
    5298:	da011d17 	ldw	r8,1140(sp)
    529c:	d8c11c17 	ldw	r3,1136(sp)
    52a0:	24a5c83a 	sub	r18,r4,r18
    52a4:	4cc00015 	stw	r19,0(r9)
    52a8:	003fa506 	br	5140 <___vfprintf_internal_r+0x1498>
    52ac:	04c00074 	movhi	r19,1
    52b0:	9cd06c04 	addi	r19,r19,16816
    52b4:	003c2e06 	br	4370 <___vfprintf_internal_r+0x6c8>
    52b8:	d9412917 	ldw	r5,1188(sp)
    52bc:	8809883a 	mov	r4,r17
    52c0:	d9811b04 	addi	r6,sp,1132
    52c4:	0003c740 	call	3c74 <__sprint_r>
    52c8:	103bbd1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    52cc:	da011d17 	ldw	r8,1140(sp)
    52d0:	da400404 	addi	r9,sp,16
    52d4:	003df606 	br	4ab0 <___vfprintf_internal_r+0xe08>
    52d8:	00800074 	movhi	r2,1
    52dc:	10907b04 	addi	r2,r2,16876
    52e0:	48800015 	stw	r2,0(r9)
    52e4:	00800044 	movi	r2,1
    52e8:	48800115 	stw	r2,4(r9)
    52ec:	4091883a 	add	r8,r8,r2
    52f0:	1887883a 	add	r3,r3,r2
    52f4:	da011d15 	stw	r8,1140(sp)
    52f8:	d8c11c15 	stw	r3,1136(sp)
    52fc:	008001c4 	movi	r2,7
    5300:	10c0bc16 	blt	r2,r3,55f4 <___vfprintf_internal_r+0x194c>
    5304:	4a400204 	addi	r9,r9,8
    5308:	9000041e 	bne	r18,zero,531c <___vfprintf_internal_r+0x1674>
    530c:	d8c13217 	ldw	r3,1224(sp)
    5310:	1800021e 	bne	r3,zero,531c <___vfprintf_internal_r+0x1674>
    5314:	8080004c 	andi	r2,r16,1
    5318:	103d5226 	beq	r2,zero,4864 <___vfprintf_internal_r+0xbbc>
    531c:	d8c11c17 	ldw	r3,1136(sp)
    5320:	d9013717 	ldw	r4,1244(sp)
    5324:	00800044 	movi	r2,1
    5328:	48800115 	stw	r2,4(r9)
    532c:	49000015 	stw	r4,0(r9)
    5330:	4091883a 	add	r8,r8,r2
    5334:	1887883a 	add	r3,r3,r2
    5338:	da011d15 	stw	r8,1140(sp)
    533c:	d8c11c15 	stw	r3,1136(sp)
    5340:	008001c4 	movi	r2,7
    5344:	10c14516 	blt	r2,r3,585c <___vfprintf_internal_r+0x1bb4>
    5348:	4a400204 	addi	r9,r9,8
    534c:	04a5c83a 	sub	r18,zero,r18
    5350:	0480d70e 	bge	zero,r18,56b0 <___vfprintf_internal_r+0x1a08>
    5354:	05800404 	movi	r22,16
    5358:	05000074 	movhi	r20,1
    535c:	a5107f84 	addi	r20,r20,16894
    5360:	b480db0e 	bge	r22,r18,56d0 <___vfprintf_internal_r+0x1a28>
    5364:	05c001c4 	movi	r23,7
    5368:	df012917 	ldw	fp,1188(sp)
    536c:	00000306 	br	537c <___vfprintf_internal_r+0x16d4>
    5370:	4a400204 	addi	r9,r9,8
    5374:	94bffc04 	addi	r18,r18,-16
    5378:	b480d50e 	bge	r22,r18,56d0 <___vfprintf_internal_r+0x1a28>
    537c:	4d000015 	stw	r20,0(r9)
    5380:	4d800115 	stw	r22,4(r9)
    5384:	42000404 	addi	r8,r8,16
    5388:	18c00044 	addi	r3,r3,1
    538c:	da011d15 	stw	r8,1140(sp)
    5390:	d8c11c15 	stw	r3,1136(sp)
    5394:	b8fff60e 	bge	r23,r3,5370 <___vfprintf_internal_r+0x16c8>
    5398:	8809883a 	mov	r4,r17
    539c:	e00b883a 	mov	r5,fp
    53a0:	d9811b04 	addi	r6,sp,1132
    53a4:	0003c740 	call	3c74 <__sprint_r>
    53a8:	103b851e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    53ac:	da011d17 	ldw	r8,1140(sp)
    53b0:	d8c11c17 	ldw	r3,1136(sp)
    53b4:	da400404 	addi	r9,sp,16
    53b8:	003fee06 	br	5374 <___vfprintf_internal_r+0x16cc>
    53bc:	da413c15 	stw	r9,1264(sp)
    53c0:	000b0d40 	call	b0d4 <__isnand>
    53c4:	da413c17 	ldw	r9,1264(sp)
    53c8:	10007e1e 	bne	r2,zero,55c4 <___vfprintf_internal_r+0x191c>
    53cc:	00bfffc4 	movi	r2,-1
    53d0:	e0816a26 	beq	fp,r2,597c <___vfprintf_internal_r+0x1cd4>
    53d4:	008019c4 	movi	r2,103
    53d8:	90816526 	beq	r18,r2,5970 <___vfprintf_internal_r+0x1cc8>
    53dc:	008011c4 	movi	r2,71
    53e0:	90816326 	beq	r18,r2,5970 <___vfprintf_internal_r+0x1cc8>
    53e4:	80c04014 	ori	r3,r16,256
    53e8:	d8c12a15 	stw	r3,1192(sp)
    53ec:	a0016516 	blt	r20,zero,5984 <___vfprintf_internal_r+0x1cdc>
    53f0:	d8012f05 	stb	zero,1212(sp)
    53f4:	00801984 	movi	r2,102
    53f8:	9080f226 	beq	r18,r2,57c4 <___vfprintf_internal_r+0x1b1c>
    53fc:	00801184 	movi	r2,70
    5400:	9080f026 	beq	r18,r2,57c4 <___vfprintf_internal_r+0x1b1c>
    5404:	00801944 	movi	r2,101
    5408:	90818d26 	beq	r18,r2,5a40 <___vfprintf_internal_r+0x1d98>
    540c:	00801144 	movi	r2,69
    5410:	90818b26 	beq	r18,r2,5a40 <___vfprintf_internal_r+0x1d98>
    5414:	e02f883a 	mov	r23,fp
    5418:	d8812404 	addi	r2,sp,1168
    541c:	d8800115 	stw	r2,4(sp)
    5420:	d8812304 	addi	r2,sp,1164
    5424:	d8800215 	stw	r2,8(sp)
    5428:	d8812204 	addi	r2,sp,1160
    542c:	ddc00015 	stw	r23,0(sp)
    5430:	d8800315 	stw	r2,12(sp)
    5434:	8809883a 	mov	r4,r17
    5438:	b00b883a 	mov	r5,r22
    543c:	a00d883a 	mov	r6,r20
    5440:	01c00084 	movi	r7,2
    5444:	da413c15 	stw	r9,1264(sp)
    5448:	00077500 	call	7750 <_dtoa_r>
    544c:	1027883a 	mov	r19,r2
    5450:	008019c4 	movi	r2,103
    5454:	da413c17 	ldw	r9,1264(sp)
    5458:	9081951e 	bne	r18,r2,5ab0 <___vfprintf_internal_r+0x1e08>
    545c:	8080004c 	andi	r2,r16,1
    5460:	10017926 	beq	r2,zero,5a48 <___vfprintf_internal_r+0x1da0>
    5464:	00801184 	movi	r2,70
    5468:	9dc7883a 	add	r3,r19,r23
    546c:	9080e626 	beq	r18,r2,5808 <___vfprintf_internal_r+0x1b60>
    5470:	b009883a 	mov	r4,r22
    5474:	a00b883a 	mov	r5,r20
    5478:	000d883a 	mov	r6,zero
    547c:	000f883a 	mov	r7,zero
    5480:	d8c13b15 	stw	r3,1260(sp)
    5484:	da413c15 	stw	r9,1264(sp)
    5488:	000fe000 	call	fe00 <__eqdf2>
    548c:	d8c13b17 	ldw	r3,1260(sp)
    5490:	da413c17 	ldw	r9,1264(sp)
    5494:	10000726 	beq	r2,zero,54b4 <___vfprintf_internal_r+0x180c>
    5498:	d8812217 	ldw	r2,1160(sp)
    549c:	10c18a2e 	bgeu	r2,r3,5ac8 <___vfprintf_internal_r+0x1e20>
    54a0:	01000c04 	movi	r4,48
    54a4:	11000005 	stb	r4,0(r2)
    54a8:	10800044 	addi	r2,r2,1
    54ac:	d8812215 	stw	r2,1160(sp)
    54b0:	10fffc1e 	bne	r2,r3,54a4 <___vfprintf_internal_r+0x17fc>
    54b4:	1cc7c83a 	sub	r3,r3,r19
    54b8:	d8c13215 	stw	r3,1224(sp)
    54bc:	008019c4 	movi	r2,103
    54c0:	9080fa26 	beq	r18,r2,58ac <___vfprintf_internal_r+0x1c04>
    54c4:	008011c4 	movi	r2,71
    54c8:	9080f826 	beq	r18,r2,58ac <___vfprintf_internal_r+0x1c04>
    54cc:	00801984 	movi	r2,102
    54d0:	90818e1e 	bne	r18,r2,5b0c <___vfprintf_internal_r+0x1e64>
    54d4:	d8812417 	ldw	r2,1168(sp)
    54d8:	d8812b15 	stw	r2,1196(sp)
    54dc:	00817c0e 	bge	zero,r2,5ad0 <___vfprintf_internal_r+0x1e28>
    54e0:	e000021e 	bne	fp,zero,54ec <___vfprintf_internal_r+0x1844>
    54e4:	8400004c 	andi	r16,r16,1
    54e8:	80000426 	beq	r16,zero,54fc <___vfprintf_internal_r+0x1854>
    54ec:	d8812b17 	ldw	r2,1196(sp)
    54f0:	e2000044 	addi	r8,fp,1
    54f4:	1205883a 	add	r2,r2,r8
    54f8:	d8812b15 	stw	r2,1196(sp)
    54fc:	d8812815 	stw	r2,1184(sp)
    5500:	10010b16 	blt	r2,zero,5930 <___vfprintf_internal_r+0x1c88>
    5504:	ddc12f07 	ldb	r23,1212(sp)
    5508:	b800e426 	beq	r23,zero,589c <___vfprintf_internal_r+0x1bf4>
    550c:	00800b44 	movi	r2,45
    5510:	d8812585 	stb	r2,1174(sp)
    5514:	dc012a17 	ldw	r16,1192(sp)
    5518:	d8013115 	stw	zero,1220(sp)
    551c:	003b7306 	br	42ec <___vfprintf_internal_r+0x644>
    5520:	d8812b17 	ldw	r2,1196(sp)
    5524:	d8812815 	stw	r2,1184(sp)
    5528:	10005716 	blt	r2,zero,5688 <___vfprintf_internal_r+0x19e0>
    552c:	d8812583 	ldbu	r2,1174(sp)
    5530:	ddc12d15 	stw	r23,1204(sp)
    5534:	d8013115 	stw	zero,1220(sp)
    5538:	003b6806 	br	42dc <___vfprintf_internal_r+0x634>
    553c:	d8c12d17 	ldw	r3,1204(sp)
    5540:	1dc00017 	ldw	r23,0(r3)
    5544:	18c00104 	addi	r3,r3,4
    5548:	d8c12d15 	stw	r3,1204(sp)
    554c:	b82dd7fa 	srai	r22,r23,31
    5550:	b005883a 	mov	r2,r22
    5554:	003b4406 	br	4268 <___vfprintf_internal_r+0x5c0>
    5558:	d9012d17 	ldw	r4,1204(sp)
    555c:	002d883a 	mov	r22,zero
    5560:	00c00044 	movi	r3,1
    5564:	25c00017 	ldw	r23,0(r4)
    5568:	21000104 	addi	r4,r4,4
    556c:	d9012d15 	stw	r4,1204(sp)
    5570:	b805883a 	mov	r2,r23
    5574:	d8012585 	stb	zero,1174(sp)
    5578:	003b4406 	br	428c <___vfprintf_internal_r+0x5e4>
    557c:	d9012d17 	ldw	r4,1204(sp)
    5580:	002d883a 	mov	r22,zero
    5584:	25c00017 	ldw	r23,0(r4)
    5588:	21000104 	addi	r4,r4,4
    558c:	d9012d15 	stw	r4,1204(sp)
    5590:	003bab06 	br	4440 <___vfprintf_internal_r+0x798>
    5594:	d8812d17 	ldw	r2,1204(sp)
    5598:	002d883a 	mov	r22,zero
    559c:	0007883a 	mov	r3,zero
    55a0:	15c00017 	ldw	r23,0(r2)
    55a4:	10800104 	addi	r2,r2,4
    55a8:	d8812d15 	stw	r2,1204(sp)
    55ac:	d8012585 	stb	zero,1174(sp)
    55b0:	b805883a 	mov	r2,r23
    55b4:	003b3506 	br	428c <___vfprintf_internal_r+0x5e4>
    55b8:	00ffffc4 	movi	r3,-1
    55bc:	b82b883a 	mov	r21,r23
    55c0:	003a1606 	br	3e1c <___vfprintf_internal_r+0x174>
    55c4:	008011c4 	movi	r2,71
    55c8:	1480b116 	blt	r2,r18,5890 <___vfprintf_internal_r+0x1be8>
    55cc:	04c00074 	movhi	r19,1
    55d0:	9cd06d04 	addi	r19,r19,16820
    55d4:	00c000c4 	movi	r3,3
    55d8:	00bfdfc4 	movi	r2,-129
    55dc:	80a0703a 	and	r16,r16,r2
    55e0:	d8c12815 	stw	r3,1184(sp)
    55e4:	d8812583 	ldbu	r2,1174(sp)
    55e8:	d8c12b15 	stw	r3,1196(sp)
    55ec:	d8013115 	stw	zero,1220(sp)
    55f0:	003b3a06 	br	42dc <___vfprintf_internal_r+0x634>
    55f4:	d9412917 	ldw	r5,1188(sp)
    55f8:	8809883a 	mov	r4,r17
    55fc:	d9811b04 	addi	r6,sp,1132
    5600:	0003c740 	call	3c74 <__sprint_r>
    5604:	103aee1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5608:	dc812417 	ldw	r18,1168(sp)
    560c:	da011d17 	ldw	r8,1140(sp)
    5610:	da400404 	addi	r9,sp,16
    5614:	003f3c06 	br	5308 <___vfprintf_internal_r+0x1660>
    5618:	ad400044 	addi	r21,r21,1
    561c:	84000814 	ori	r16,r16,32
    5620:	14800047 	ldb	r18,1(r2)
    5624:	0039fc06 	br	3e18 <___vfprintf_internal_r+0x170>
    5628:	d9412917 	ldw	r5,1188(sp)
    562c:	8809883a 	mov	r4,r17
    5630:	d9811b04 	addi	r6,sp,1132
    5634:	0003c740 	call	3c74 <__sprint_r>
    5638:	103ae11e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    563c:	da011d17 	ldw	r8,1140(sp)
    5640:	da400404 	addi	r9,sp,16
    5644:	003d2b06 	br	4af4 <___vfprintf_internal_r+0xe4c>
    5648:	4d000015 	stw	r20,0(r9)
    564c:	4c800115 	stw	r18,4(r9)
    5650:	4491883a 	add	r8,r8,r18
    5654:	18c00044 	addi	r3,r3,1
    5658:	da011d15 	stw	r8,1140(sp)
    565c:	d8c11c15 	stw	r3,1136(sp)
    5660:	008001c4 	movi	r2,7
    5664:	10fcbd16 	blt	r2,r3,495c <___vfprintf_internal_r+0xcb4>
    5668:	4a400204 	addi	r9,r9,8
    566c:	003cc206 	br	4978 <___vfprintf_internal_r+0xcd0>
    5670:	da413c15 	stw	r9,1264(sp)
    5674:	0003be80 	call	3be8 <strlen>
    5678:	d8812b15 	stw	r2,1196(sp)
    567c:	d8812815 	stw	r2,1184(sp)
    5680:	da413c17 	ldw	r9,1264(sp)
    5684:	103fa90e 	bge	r2,zero,552c <___vfprintf_internal_r+0x1884>
    5688:	d8012815 	stw	zero,1184(sp)
    568c:	003fa706 	br	552c <___vfprintf_internal_r+0x1884>
    5690:	d9412917 	ldw	r5,1188(sp)
    5694:	8809883a 	mov	r4,r17
    5698:	d9811b04 	addi	r6,sp,1132
    569c:	0003c740 	call	3c74 <__sprint_r>
    56a0:	103ac71e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    56a4:	da011d17 	ldw	r8,1140(sp)
    56a8:	d8c11c17 	ldw	r3,1136(sp)
    56ac:	da400404 	addi	r9,sp,16
    56b0:	d8813217 	ldw	r2,1224(sp)
    56b4:	4cc00015 	stw	r19,0(r9)
    56b8:	48800115 	stw	r2,4(r9)
    56bc:	4091883a 	add	r8,r8,r2
    56c0:	003c6206 	br	484c <___vfprintf_internal_r+0xba4>
    56c4:	00800b44 	movi	r2,45
    56c8:	d8812585 	stb	r2,1174(sp)
    56cc:	003b2406 	br	4360 <___vfprintf_internal_r+0x6b8>
    56d0:	4d000015 	stw	r20,0(r9)
    56d4:	4c800115 	stw	r18,4(r9)
    56d8:	4491883a 	add	r8,r8,r18
    56dc:	18c00044 	addi	r3,r3,1
    56e0:	da011d15 	stw	r8,1140(sp)
    56e4:	d8c11c15 	stw	r3,1136(sp)
    56e8:	008001c4 	movi	r2,7
    56ec:	10ffe816 	blt	r2,r3,5690 <___vfprintf_internal_r+0x19e8>
    56f0:	4a400204 	addi	r9,r9,8
    56f4:	003fee06 	br	56b0 <___vfprintf_internal_r+0x1a08>
    56f8:	d8c12b15 	stw	r3,1196(sp)
    56fc:	00800184 	movi	r2,6
    5700:	10c0062e 	bgeu	r2,r3,571c <___vfprintf_internal_r+0x1a74>
    5704:	d8812b15 	stw	r2,1196(sp)
    5708:	d8812815 	stw	r2,1184(sp)
    570c:	ddc12d15 	stw	r23,1204(sp)
    5710:	04c00074 	movhi	r19,1
    5714:	9cd07904 	addi	r19,r19,16868
    5718:	0039ca06 	br	3e44 <___vfprintf_internal_r+0x19c>
    571c:	d8812b17 	ldw	r2,1196(sp)
    5720:	d8812815 	stw	r2,1184(sp)
    5724:	103ff90e 	bge	r2,zero,570c <___vfprintf_internal_r+0x1a64>
    5728:	d8012815 	stw	zero,1184(sp)
    572c:	003ff706 	br	570c <___vfprintf_internal_r+0x1a64>
    5730:	00800244 	movi	r2,9
    5734:	15fdaa36 	bltu	r2,r23,4de0 <___vfprintf_internal_r+0x1138>
    5738:	dd010e04 	addi	r20,sp,1080
    573c:	003dc606 	br	4e58 <___vfprintf_internal_r+0x11b0>
    5740:	d9412917 	ldw	r5,1188(sp)
    5744:	8809883a 	mov	r4,r17
    5748:	d9811b04 	addi	r6,sp,1132
    574c:	0003c740 	call	3c74 <__sprint_r>
    5750:	103a9b1e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5754:	dc812417 	ldw	r18,1168(sp)
    5758:	da400404 	addi	r9,sp,16
    575c:	003ecd06 	br	5294 <___vfprintf_internal_r+0x15ec>
    5760:	d9412917 	ldw	r5,1188(sp)
    5764:	8809883a 	mov	r4,r17
    5768:	d9811b04 	addi	r6,sp,1132
    576c:	0003c740 	call	3c74 <__sprint_r>
    5770:	103a931e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5774:	dc812417 	ldw	r18,1168(sp)
    5778:	da011d17 	ldw	r8,1140(sp)
    577c:	d8c11c17 	ldw	r3,1136(sp)
    5780:	da400404 	addi	r9,sp,16
    5784:	003eb706 	br	5264 <___vfprintf_internal_r+0x15bc>
    5788:	d9412917 	ldw	r5,1188(sp)
    578c:	8809883a 	mov	r4,r17
    5790:	d9811b04 	addi	r6,sp,1132
    5794:	0003c740 	call	3c74 <__sprint_r>
    5798:	103a891e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    579c:	dc812417 	ldw	r18,1168(sp)
    57a0:	da011d17 	ldw	r8,1140(sp)
    57a4:	da400404 	addi	r9,sp,16
    57a8:	003dc206 	br	4eb4 <___vfprintf_internal_r+0x120c>
    57ac:	df012815 	stw	fp,1184(sp)
    57b0:	d8812583 	ldbu	r2,1174(sp)
    57b4:	df012b15 	stw	fp,1196(sp)
    57b8:	ddc12d15 	stw	r23,1204(sp)
    57bc:	d8013115 	stw	zero,1220(sp)
    57c0:	003ac606 	br	42dc <___vfprintf_internal_r+0x634>
    57c4:	d8812404 	addi	r2,sp,1168
    57c8:	d8800115 	stw	r2,4(sp)
    57cc:	d8812304 	addi	r2,sp,1164
    57d0:	d8800215 	stw	r2,8(sp)
    57d4:	d8812204 	addi	r2,sp,1160
    57d8:	df000015 	stw	fp,0(sp)
    57dc:	d8800315 	stw	r2,12(sp)
    57e0:	8809883a 	mov	r4,r17
    57e4:	b00b883a 	mov	r5,r22
    57e8:	a00d883a 	mov	r6,r20
    57ec:	01c000c4 	movi	r7,3
    57f0:	da413c15 	stw	r9,1264(sp)
    57f4:	00077500 	call	7750 <_dtoa_r>
    57f8:	da413c17 	ldw	r9,1264(sp)
    57fc:	1027883a 	mov	r19,r2
    5800:	1707883a 	add	r3,r2,fp
    5804:	e02f883a 	mov	r23,fp
    5808:	99000007 	ldb	r4,0(r19)
    580c:	00800c04 	movi	r2,48
    5810:	20800326 	beq	r4,r2,5820 <___vfprintf_internal_r+0x1b78>
    5814:	da812417 	ldw	r10,1168(sp)
    5818:	1a87883a 	add	r3,r3,r10
    581c:	003f1406 	br	5470 <___vfprintf_internal_r+0x17c8>
    5820:	b009883a 	mov	r4,r22
    5824:	a00b883a 	mov	r5,r20
    5828:	000d883a 	mov	r6,zero
    582c:	000f883a 	mov	r7,zero
    5830:	d8c13b15 	stw	r3,1260(sp)
    5834:	da413c15 	stw	r9,1264(sp)
    5838:	000fe5c0 	call	fe5c <__nedf2>
    583c:	d8c13b17 	ldw	r3,1260(sp)
    5840:	da413c17 	ldw	r9,1264(sp)
    5844:	103ff326 	beq	r2,zero,5814 <___vfprintf_internal_r+0x1b6c>
    5848:	00800044 	movi	r2,1
    584c:	15d5c83a 	sub	r10,r2,r23
    5850:	da812415 	stw	r10,1168(sp)
    5854:	1a87883a 	add	r3,r3,r10
    5858:	003f0506 	br	5470 <___vfprintf_internal_r+0x17c8>
    585c:	d9412917 	ldw	r5,1188(sp)
    5860:	8809883a 	mov	r4,r17
    5864:	d9811b04 	addi	r6,sp,1132
    5868:	0003c740 	call	3c74 <__sprint_r>
    586c:	103a541e 	bne	r2,zero,41c0 <___vfprintf_internal_r+0x518>
    5870:	dc812417 	ldw	r18,1168(sp)
    5874:	da011d17 	ldw	r8,1140(sp)
    5878:	d8c11c17 	ldw	r3,1136(sp)
    587c:	da400404 	addi	r9,sp,16
    5880:	003eb206 	br	534c <___vfprintf_internal_r+0x16a4>
    5884:	b82b883a 	mov	r21,r23
    5888:	0007883a 	mov	r3,zero
    588c:	00396306 	br	3e1c <___vfprintf_internal_r+0x174>
    5890:	04c00074 	movhi	r19,1
    5894:	9cd06e04 	addi	r19,r19,16824
    5898:	003f4e06 	br	55d4 <___vfprintf_internal_r+0x192c>
    589c:	d8812583 	ldbu	r2,1174(sp)
    58a0:	dc012a17 	ldw	r16,1192(sp)
    58a4:	d8013115 	stw	zero,1220(sp)
    58a8:	003a8c06 	br	42dc <___vfprintf_internal_r+0x634>
    58ac:	d8812417 	ldw	r2,1168(sp)
    58b0:	d8812b15 	stw	r2,1196(sp)
    58b4:	1029883a 	mov	r20,r2
    58b8:	00bfff44 	movi	r2,-3
    58bc:	a0800116 	blt	r20,r2,58c4 <___vfprintf_internal_r+0x1c1c>
    58c0:	e5001d0e 	bge	fp,r20,5938 <___vfprintf_internal_r+0x1c90>
    58c4:	94bfff84 	addi	r18,r18,-2
    58c8:	a53fffc4 	addi	r20,r20,-1
    58cc:	dd012415 	stw	r20,1168(sp)
    58d0:	dc811fc5 	stb	r18,1151(sp)
    58d4:	a0007216 	blt	r20,zero,5aa0 <___vfprintf_internal_r+0x1df8>
    58d8:	00800ac4 	movi	r2,43
    58dc:	d8812005 	stb	r2,1152(sp)
    58e0:	00800244 	movi	r2,9
    58e4:	15003516 	blt	r2,r20,59bc <___vfprintf_internal_r+0x1d14>
    58e8:	00800c04 	movi	r2,48
    58ec:	a5000c04 	addi	r20,r20,48
    58f0:	d8812045 	stb	r2,1153(sp)
    58f4:	dd012085 	stb	r20,1154(sp)
    58f8:	d8c120c4 	addi	r3,sp,1155
    58fc:	d8811fc4 	addi	r2,sp,1151
    5900:	1885c83a 	sub	r2,r3,r2
    5904:	d8c13217 	ldw	r3,1224(sp)
    5908:	d8813515 	stw	r2,1236(sp)
    590c:	1885883a 	add	r2,r3,r2
    5910:	d8812b15 	stw	r2,1196(sp)
    5914:	00800044 	movi	r2,1
    5918:	10c0580e 	bge	r2,r3,5a7c <___vfprintf_internal_r+0x1dd4>
    591c:	d8812b17 	ldw	r2,1196(sp)
    5920:	10800044 	addi	r2,r2,1
    5924:	d8812b15 	stw	r2,1196(sp)
    5928:	d8812815 	stw	r2,1184(sp)
    592c:	103ef50e 	bge	r2,zero,5504 <___vfprintf_internal_r+0x185c>
    5930:	d8012815 	stw	zero,1184(sp)
    5934:	003ef306 	br	5504 <___vfprintf_internal_r+0x185c>
    5938:	d8812b17 	ldw	r2,1196(sp)
    593c:	d8c13217 	ldw	r3,1224(sp)
    5940:	10c01416 	blt	r2,r3,5994 <___vfprintf_internal_r+0x1cec>
    5944:	8400004c 	andi	r16,r16,1
    5948:	80000326 	beq	r16,zero,5958 <___vfprintf_internal_r+0x1cb0>
    594c:	d8812b17 	ldw	r2,1196(sp)
    5950:	10800044 	addi	r2,r2,1
    5954:	d8812b15 	stw	r2,1196(sp)
    5958:	d8812815 	stw	r2,1184(sp)
    595c:	10001416 	blt	r2,zero,59b0 <___vfprintf_internal_r+0x1d08>
    5960:	048019c4 	movi	r18,103
    5964:	003ee706 	br	5504 <___vfprintf_internal_r+0x185c>
    5968:	d8012815 	stw	zero,1184(sp)
    596c:	003b1a06 	br	45d8 <___vfprintf_internal_r+0x930>
    5970:	e03e9c1e 	bne	fp,zero,53e4 <___vfprintf_internal_r+0x173c>
    5974:	07000044 	movi	fp,1
    5978:	003e9a06 	br	53e4 <___vfprintf_internal_r+0x173c>
    597c:	07000184 	movi	fp,6
    5980:	003e9806 	br	53e4 <___vfprintf_internal_r+0x173c>
    5984:	00c00b44 	movi	r3,45
    5988:	a520003c 	xorhi	r20,r20,32768
    598c:	d8c12f05 	stb	r3,1212(sp)
    5990:	003e9806 	br	53f4 <___vfprintf_internal_r+0x174c>
    5994:	05003f0e 	bge	zero,r20,5a94 <___vfprintf_internal_r+0x1dec>
    5998:	05000044 	movi	r20,1
    599c:	d8c13217 	ldw	r3,1224(sp)
    59a0:	a0e9883a 	add	r20,r20,r3
    59a4:	dd012b15 	stw	r20,1196(sp)
    59a8:	dd012815 	stw	r20,1184(sp)
    59ac:	a03fec0e 	bge	r20,zero,5960 <___vfprintf_internal_r+0x1cb8>
    59b0:	d8012815 	stw	zero,1184(sp)
    59b4:	048019c4 	movi	r18,103
    59b8:	003ed206 	br	5504 <___vfprintf_internal_r+0x185c>
    59bc:	d8c11f84 	addi	r3,sp,1150
    59c0:	102f883a 	mov	r23,r2
    59c4:	4839883a 	mov	fp,r9
    59c8:	a009883a 	mov	r4,r20
    59cc:	01400284 	movi	r5,10
    59d0:	182d883a 	mov	r22,r3
    59d4:	00104200 	call	10420 <__modsi3>
    59d8:	10800c04 	addi	r2,r2,48
    59dc:	a009883a 	mov	r4,r20
    59e0:	b0800005 	stb	r2,0(r22)
    59e4:	01400284 	movi	r5,10
    59e8:	00103d00 	call	103d0 <__divsi3>
    59ec:	1029883a 	mov	r20,r2
    59f0:	b0ffffc4 	addi	r3,r22,-1
    59f4:	b8bff416 	blt	r23,r2,59c8 <___vfprintf_internal_r+0x1d20>
    59f8:	11400c04 	addi	r5,r2,48
    59fc:	b17fffc5 	stb	r5,-1(r22)
    5a00:	d8811fc4 	addi	r2,sp,1151
    5a04:	e013883a 	mov	r9,fp
    5a08:	18803e2e 	bgeu	r3,r2,5b04 <___vfprintf_internal_r+0x1e5c>
    5a0c:	b007883a 	mov	r3,r22
    5a10:	d9012044 	addi	r4,sp,1153
    5a14:	00000206 	br	5a20 <___vfprintf_internal_r+0x1d78>
    5a18:	19400003 	ldbu	r5,0(r3)
    5a1c:	18c00044 	addi	r3,r3,1
    5a20:	21400005 	stb	r5,0(r4)
    5a24:	21000044 	addi	r4,r4,1
    5a28:	10fffb1e 	bne	r2,r3,5a18 <___vfprintf_internal_r+0x1d70>
    5a2c:	d8c12004 	addi	r3,sp,1152
    5a30:	1d87c83a 	sub	r3,r3,r22
    5a34:	d9012044 	addi	r4,sp,1153
    5a38:	20c7883a 	add	r3,r4,r3
    5a3c:	003fb006 	br	5900 <___vfprintf_internal_r+0x1c58>
    5a40:	e5c00044 	addi	r23,fp,1
    5a44:	003e7406 	br	5418 <___vfprintf_internal_r+0x1770>
    5a48:	d8c12217 	ldw	r3,1160(sp)
    5a4c:	003e9906 	br	54b4 <___vfprintf_internal_r+0x180c>
    5a50:	d9012d17 	ldw	r4,1204(sp)
    5a54:	ac800043 	ldbu	r18,1(r21)
    5a58:	b82b883a 	mov	r21,r23
    5a5c:	20c00017 	ldw	r3,0(r4)
    5a60:	20800104 	addi	r2,r4,4
    5a64:	d8812d15 	stw	r2,1204(sp)
    5a68:	18002116 	blt	r3,zero,5af0 <___vfprintf_internal_r+0x1e48>
    5a6c:	94803fcc 	andi	r18,r18,255
    5a70:	9480201c 	xori	r18,r18,128
    5a74:	94bfe004 	addi	r18,r18,-128
    5a78:	0038e706 	br	3e18 <___vfprintf_internal_r+0x170>
    5a7c:	80a0703a 	and	r16,r16,r2
    5a80:	803fa61e 	bne	r16,zero,591c <___vfprintf_internal_r+0x1c74>
    5a84:	d8812b17 	ldw	r2,1196(sp)
    5a88:	d8812815 	stw	r2,1184(sp)
    5a8c:	103e9d0e 	bge	r2,zero,5504 <___vfprintf_internal_r+0x185c>
    5a90:	003fa706 	br	5930 <___vfprintf_internal_r+0x1c88>
    5a94:	00800084 	movi	r2,2
    5a98:	1529c83a 	sub	r20,r2,r20
    5a9c:	003fbf06 	br	599c <___vfprintf_internal_r+0x1cf4>
    5aa0:	00800b44 	movi	r2,45
    5aa4:	0529c83a 	sub	r20,zero,r20
    5aa8:	d8812005 	stb	r2,1152(sp)
    5aac:	003f8c06 	br	58e0 <___vfprintf_internal_r+0x1c38>
    5ab0:	008011c4 	movi	r2,71
    5ab4:	90be6926 	beq	r18,r2,545c <___vfprintf_internal_r+0x17b4>
    5ab8:	003e6a06 	br	5464 <___vfprintf_internal_r+0x17bc>
    5abc:	00bfffc4 	movi	r2,-1
    5ac0:	d8812c15 	stw	r2,1200(sp)
    5ac4:	0039ad06 	br	417c <___vfprintf_internal_r+0x4d4>
    5ac8:	1007883a 	mov	r3,r2
    5acc:	003e7906 	br	54b4 <___vfprintf_internal_r+0x180c>
    5ad0:	e000021e 	bne	fp,zero,5adc <___vfprintf_internal_r+0x1e34>
    5ad4:	8400004c 	andi	r16,r16,1
    5ad8:	80000e26 	beq	r16,zero,5b14 <___vfprintf_internal_r+0x1e6c>
    5adc:	e7000084 	addi	fp,fp,2
    5ae0:	df012b15 	stw	fp,1196(sp)
    5ae4:	df012815 	stw	fp,1184(sp)
    5ae8:	e03e860e 	bge	fp,zero,5504 <___vfprintf_internal_r+0x185c>
    5aec:	003f9006 	br	5930 <___vfprintf_internal_r+0x1c88>
    5af0:	94803fcc 	andi	r18,r18,255
    5af4:	9480201c 	xori	r18,r18,128
    5af8:	00ffffc4 	movi	r3,-1
    5afc:	94bfe004 	addi	r18,r18,-128
    5b00:	0038c506 	br	3e18 <___vfprintf_internal_r+0x170>
    5b04:	d8c12044 	addi	r3,sp,1153
    5b08:	003f7d06 	br	5900 <___vfprintf_internal_r+0x1c58>
    5b0c:	dd012417 	ldw	r20,1168(sp)
    5b10:	003f6d06 	br	58c8 <___vfprintf_internal_r+0x1c20>
    5b14:	00c00044 	movi	r3,1
    5b18:	d8c12815 	stw	r3,1184(sp)
    5b1c:	d8c12b15 	stw	r3,1196(sp)
    5b20:	003e7806 	br	5504 <___vfprintf_internal_r+0x185c>

00005b24 <__vfprintf_internal>:
    5b24:	00800074 	movhi	r2,1
    5b28:	1098ae04 	addi	r2,r2,25272
    5b2c:	2007883a 	mov	r3,r4
    5b30:	11000017 	ldw	r4,0(r2)
    5b34:	2805883a 	mov	r2,r5
    5b38:	300f883a 	mov	r7,r6
    5b3c:	180b883a 	mov	r5,r3
    5b40:	100d883a 	mov	r6,r2
    5b44:	0003ca81 	jmpi	3ca8 <___vfprintf_internal_r>

00005b48 <__svfscanf_r>:
    5b48:	deff4c04 	addi	sp,sp,-720
    5b4c:	ddc0b115 	stw	r23,708(sp)
    5b50:	dd00ae15 	stw	r20,696(sp)
    5b54:	dcc0ad15 	stw	r19,692(sp)
    5b58:	dc80ac15 	stw	r18,688(sp)
    5b5c:	dc40ab15 	stw	r17,684(sp)
    5b60:	dc00aa15 	stw	r16,680(sp)
    5b64:	dfc0b315 	stw	ra,716(sp)
    5b68:	df00b215 	stw	fp,712(sp)
    5b6c:	dd80b015 	stw	r22,704(sp)
    5b70:	dd40af15 	stw	r21,700(sp)
    5b74:	30800007 	ldb	r2,0(r6)
    5b78:	002f883a 	mov	r23,zero
    5b7c:	d9c09c15 	stw	r7,624(sp)
    5b80:	d800a015 	stw	zero,640(sp)
    5b84:	d8009f15 	stw	zero,636(sp)
    5b88:	d8009e15 	stw	zero,632(sp)
    5b8c:	d8809b15 	stw	r2,620(sp)
    5b90:	2023883a 	mov	r17,r4
    5b94:	04800074 	movhi	r18,1
    5b98:	9498b104 	addi	r18,r18,25284
    5b9c:	b829883a 	mov	r20,r23
    5ba0:	2827883a 	mov	r19,r5
    5ba4:	34000044 	addi	r16,r6,1
    5ba8:	10002426 	beq	r2,zero,5c3c <__svfscanf_r+0xf4>
    5bac:	95400017 	ldw	r21,0(r18)
    5bb0:	a887883a 	add	r3,r21,r2
    5bb4:	18c00003 	ldbu	r3,0(r3)
    5bb8:	18c0020c 	andi	r3,r3,8
    5bbc:	18c03fcc 	andi	r3,r3,255
    5bc0:	18c0201c 	xori	r3,r3,128
    5bc4:	18ffe004 	addi	r3,r3,-128
    5bc8:	18002926 	beq	r3,zero,5c70 <__svfscanf_r+0x128>
    5bcc:	98800117 	ldw	r2,4(r19)
    5bd0:	0080110e 	bge	zero,r2,5c18 <__svfscanf_r+0xd0>
    5bd4:	98c00017 	ldw	r3,0(r19)
    5bd8:	91000017 	ldw	r4,0(r18)
    5bdc:	18800003 	ldbu	r2,0(r3)
    5be0:	2085883a 	add	r2,r4,r2
    5be4:	10800003 	ldbu	r2,0(r2)
    5be8:	1080020c 	andi	r2,r2,8
    5bec:	10803fcc 	andi	r2,r2,255
    5bf0:	1080201c 	xori	r2,r2,128
    5bf4:	10bfe004 	addi	r2,r2,-128
    5bf8:	10000b26 	beq	r2,zero,5c28 <__svfscanf_r+0xe0>
    5bfc:	98800117 	ldw	r2,4(r19)
    5c00:	18c00044 	addi	r3,r3,1
    5c04:	98c00015 	stw	r3,0(r19)
    5c08:	10bfffc4 	addi	r2,r2,-1
    5c0c:	98800115 	stw	r2,4(r19)
    5c10:	a5000044 	addi	r20,r20,1
    5c14:	00bfef16 	blt	zero,r2,5bd4 <__svfscanf_r+0x8c>
    5c18:	8809883a 	mov	r4,r17
    5c1c:	980b883a 	mov	r5,r19
    5c20:	000372c0 	call	372c <__srefill_r>
    5c24:	103feb26 	beq	r2,zero,5bd4 <__svfscanf_r+0x8c>
    5c28:	800d883a 	mov	r6,r16
    5c2c:	30800007 	ldb	r2,0(r6)
    5c30:	34000044 	addi	r16,r6,1
    5c34:	d8809b15 	stw	r2,620(sp)
    5c38:	103fdc1e 	bne	r2,zero,5bac <__svfscanf_r+0x64>
    5c3c:	d8809e17 	ldw	r2,632(sp)
    5c40:	dfc0b317 	ldw	ra,716(sp)
    5c44:	df00b217 	ldw	fp,712(sp)
    5c48:	ddc0b117 	ldw	r23,708(sp)
    5c4c:	dd80b017 	ldw	r22,704(sp)
    5c50:	dd40af17 	ldw	r21,700(sp)
    5c54:	dd00ae17 	ldw	r20,696(sp)
    5c58:	dcc0ad17 	ldw	r19,692(sp)
    5c5c:	dc80ac17 	ldw	r18,688(sp)
    5c60:	dc40ab17 	ldw	r17,684(sp)
    5c64:	dc00aa17 	ldw	r16,680(sp)
    5c68:	dec0b404 	addi	sp,sp,720
    5c6c:	f800283a 	ret
    5c70:	00c00944 	movi	r3,37
    5c74:	10c00e26 	beq	r2,r3,5cb0 <__svfscanf_r+0x168>
    5c78:	98800117 	ldw	r2,4(r19)
    5c7c:	0080e40e 	bge	zero,r2,6010 <__svfscanf_r+0x4c8>
    5c80:	98800017 	ldw	r2,0(r19)
    5c84:	80ffffc7 	ldb	r3,-1(r16)
    5c88:	11000003 	ldbu	r4,0(r2)
    5c8c:	20ffeb1e 	bne	r4,r3,5c3c <__svfscanf_r+0xf4>
    5c90:	98c00117 	ldw	r3,4(r19)
    5c94:	10800044 	addi	r2,r2,1
    5c98:	98800015 	stw	r2,0(r19)
    5c9c:	18bfffc4 	addi	r2,r3,-1
    5ca0:	98800115 	stw	r2,4(r19)
    5ca4:	a5000044 	addi	r20,r20,1
    5ca8:	800d883a 	mov	r6,r16
    5cac:	003fdf06 	br	5c2c <__svfscanf_r+0xe4>
    5cb0:	0039883a 	mov	fp,zero
    5cb4:	35c00043 	ldbu	r23,1(r6)
    5cb8:	002d883a 	mov	r22,zero
    5cbc:	00c01e04 	movi	r3,120
    5cc0:	01801b04 	movi	r6,108
    5cc4:	e009883a 	mov	r4,fp
    5cc8:	b8803fcc 	andi	r2,r23,255
    5ccc:	87000044 	addi	fp,r16,1
    5cd0:	18804f2e 	bgeu	r3,r2,5e10 <__svfscanf_r+0x2c8>
    5cd4:	bdc03fcc 	andi	r23,r23,255
    5cd8:	bdc0201c 	xori	r23,r23,128
    5cdc:	bdffe004 	addi	r23,r23,-128
    5ce0:	adeb883a 	add	r21,r21,r23
    5ce4:	a8800003 	ldbu	r2,0(r21)
    5ce8:	df009d15 	stw	fp,628(sp)
    5cec:	2039883a 	mov	fp,r4
    5cf0:	1080004c 	andi	r2,r2,1
    5cf4:	1002d926 	beq	r2,zero,685c <__svfscanf_r+0xd14>
    5cf8:	b5800054 	ori	r22,r22,1
    5cfc:	00800074 	movhi	r2,1
    5d00:	10b26e04 	addi	r2,r2,-13896
    5d04:	00c00284 	movi	r3,10
    5d08:	d880a015 	stw	r2,640(sp)
    5d0c:	d8c09f15 	stw	r3,636(sp)
    5d10:	040000c4 	movi	r16,3
    5d14:	98800117 	ldw	r2,4(r19)
    5d18:	0081bd0e 	bge	zero,r2,6410 <__svfscanf_r+0x8c8>
    5d1c:	b080100c 	andi	r2,r22,64
    5d20:	1000ce26 	beq	r2,zero,605c <__svfscanf_r+0x514>
    5d24:	00800084 	movi	r2,2
    5d28:	80818426 	beq	r16,r2,633c <__svfscanf_r+0x7f4>
    5d2c:	1400f716 	blt	r2,r16,610c <__svfscanf_r+0x5c4>
    5d30:	00800044 	movi	r2,1
    5d34:	8080dc26 	beq	r16,r2,60a8 <__svfscanf_r+0x560>
    5d38:	e000011e 	bne	fp,zero,5d40 <__svfscanf_r+0x1f8>
    5d3c:	07000044 	movi	fp,1
    5d40:	b080004c 	andi	r2,r22,1
    5d44:	10022826 	beq	r2,zero,65e8 <__svfscanf_r+0xaa0>
    5d48:	b5c0040c 	andi	r23,r22,16
    5d4c:	b804601e 	bne	r23,zero,6ed0 <__svfscanf_r+0x1388>
    5d50:	d8c09c17 	ldw	r3,624(sp)
    5d54:	1d800017 	ldw	r22,0(r3)
    5d58:	18c00104 	addi	r3,r3,4
    5d5c:	d8c09c15 	stw	r3,624(sp)
    5d60:	0021883a 	mov	r16,zero
    5d64:	dd409904 	addi	r21,sp,612
    5d68:	01000074 	movhi	r4,1
    5d6c:	2118b204 	addi	r4,r4,25288
    5d70:	20800017 	ldw	r2,0(r4)
    5d74:	8080aa26 	beq	r16,r2,6020 <__svfscanf_r+0x4d8>
    5d78:	98800017 	ldw	r2,0(r19)
    5d7c:	9a000117 	ldw	r8,4(r19)
    5d80:	d9400104 	addi	r5,sp,4
    5d84:	11c00003 	ldbu	r7,0(r2)
    5d88:	423fffc4 	addi	r8,r8,-1
    5d8c:	10800044 	addi	r2,r2,1
    5d90:	2c07883a 	add	r3,r5,r16
    5d94:	a809883a 	mov	r4,r21
    5d98:	000b883a 	mov	r5,zero
    5d9c:	01800204 	movi	r6,8
    5da0:	9a000115 	stw	r8,4(r19)
    5da4:	98800015 	stw	r2,0(r19)
    5da8:	19c00005 	stb	r7,0(r3)
    5dac:	84000044 	addi	r16,r16,1
    5db0:	00034a40 	call	34a4 <memset>
    5db4:	8809883a 	mov	r4,r17
    5db8:	dd400015 	stw	r21,0(sp)
    5dbc:	b00b883a 	mov	r5,r22
    5dc0:	d9800104 	addi	r6,sp,4
    5dc4:	800f883a 	mov	r7,r16
    5dc8:	00094cc0 	call	94cc <_mbrtowc_r>
    5dcc:	00ffffc4 	movi	r3,-1
    5dd0:	10c09326 	beq	r2,r3,6020 <__svfscanf_r+0x4d8>
    5dd4:	1003281e 	bne	r2,zero,6a78 <__svfscanf_r+0xf30>
    5dd8:	b800011e 	bne	r23,zero,5de0 <__svfscanf_r+0x298>
    5ddc:	b0000015 	stw	zero,0(r22)
    5de0:	a429883a 	add	r20,r20,r16
    5de4:	e73fffc4 	addi	fp,fp,-1
    5de8:	b803281e 	bne	r23,zero,6a8c <__svfscanf_r+0xf44>
    5dec:	b5800104 	addi	r22,r22,4
    5df0:	0021883a 	mov	r16,zero
    5df4:	98800117 	ldw	r2,4(r19)
    5df8:	00820b0e 	bge	zero,r2,6628 <__svfscanf_r+0xae0>
    5dfc:	e03fda1e 	bne	fp,zero,5d68 <__svfscanf_r+0x220>
    5e00:	b8012226 	beq	r23,zero,628c <__svfscanf_r+0x744>
    5e04:	dc009d17 	ldw	r16,628(sp)
    5e08:	800d883a 	mov	r6,r16
    5e0c:	003f8706 	br	5c2c <__svfscanf_r+0xe4>
    5e10:	1085883a 	add	r2,r2,r2
    5e14:	1085883a 	add	r2,r2,r2
    5e18:	01400034 	movhi	r5,0
    5e1c:	29578b04 	addi	r5,r5,24108
    5e20:	1145883a 	add	r2,r2,r5
    5e24:	10800017 	ldw	r2,0(r2)
    5e28:	1000683a 	jmp	r2
    5e2c:	00006040 	call	604 <encode_image+0x19c>
    5e30:	00005cd4 	movui	zero,371
    5e34:	00005cd4 	movui	zero,371
    5e38:	00005cd4 	movui	zero,371
    5e3c:	00005cd4 	movui	zero,371
    5e40:	00005cd4 	movui	zero,371
    5e44:	00005cd4 	movui	zero,371
    5e48:	00005cd4 	movui	zero,371
    5e4c:	00005cd4 	movui	zero,371
    5e50:	00005cd4 	movui	zero,371
    5e54:	00005cd4 	movui	zero,371
    5e58:	00005cd4 	movui	zero,371
    5e5c:	00005cd4 	movui	zero,371
    5e60:	00005cd4 	movui	zero,371
    5e64:	00005cd4 	movui	zero,371
    5e68:	00005cd4 	movui	zero,371
    5e6c:	00005cd4 	movui	zero,371
    5e70:	00005cd4 	movui	zero,371
    5e74:	00005cd4 	movui	zero,371
    5e78:	00005cd4 	movui	zero,371
    5e7c:	00005cd4 	movui	zero,371
    5e80:	00005cd4 	movui	zero,371
    5e84:	00005cd4 	movui	zero,371
    5e88:	00005cd4 	movui	zero,371
    5e8c:	00005cd4 	movui	zero,371
    5e90:	00005cd4 	movui	zero,371
    5e94:	00005cd4 	movui	zero,371
    5e98:	00005cd4 	movui	zero,371
    5e9c:	00005cd4 	movui	zero,371
    5ea0:	00005cd4 	movui	zero,371
    5ea4:	00005cd4 	movui	zero,371
    5ea8:	00005cd4 	movui	zero,371
    5eac:	00005cd4 	movui	zero,371
    5eb0:	00005cd4 	movui	zero,371
    5eb4:	00005cd4 	movui	zero,371
    5eb8:	00005cd4 	movui	zero,371
    5ebc:	00005cd4 	movui	zero,371
    5ec0:	00006910 	cmplti	zero,zero,420
    5ec4:	00005cd4 	movui	zero,371
    5ec8:	00005cd4 	movui	zero,371
    5ecc:	00005cd4 	movui	zero,371
    5ed0:	00005cd4 	movui	zero,371
    5ed4:	0000691c 	xori	zero,zero,420
    5ed8:	00005cd4 	movui	zero,371
    5edc:	00005cd4 	movui	zero,371
    5ee0:	00005cd4 	movui	zero,371
    5ee4:	00005cd4 	movui	zero,371
    5ee8:	00005cd4 	movui	zero,371
    5eec:	000068ac 	andhi	zero,zero,418
    5ef0:	000068ac 	andhi	zero,zero,418
    5ef4:	000068ac 	andhi	zero,zero,418
    5ef8:	000068ac 	andhi	zero,zero,418
    5efc:	000068ac 	andhi	zero,zero,418
    5f00:	000068ac 	andhi	zero,zero,418
    5f04:	000068ac 	andhi	zero,zero,418
    5f08:	000068ac 	andhi	zero,zero,418
    5f0c:	000068ac 	andhi	zero,zero,418
    5f10:	000068ac 	andhi	zero,zero,418
    5f14:	00005cd4 	movui	zero,371
    5f18:	00005cd4 	movui	zero,371
    5f1c:	00005cd4 	movui	zero,371
    5f20:	00005cd4 	movui	zero,371
    5f24:	00005cd4 	movui	zero,371
    5f28:	00005cd4 	movui	zero,371
    5f2c:	00005cd4 	movui	zero,371
    5f30:	00005cd4 	movui	zero,371
    5f34:	00005cd4 	movui	zero,371
    5f38:	00005cd4 	movui	zero,371
    5f3c:	000068e4 	muli	zero,zero,419
    5f40:	000068f0 	cmpltui	zero,zero,419
    5f44:	00005cd4 	movui	zero,371
    5f48:	000068f0 	cmpltui	zero,zero,419
    5f4c:	00005cd4 	movui	zero,371
    5f50:	00005cd4 	movui	zero,371
    5f54:	00005cd4 	movui	zero,371
    5f58:	00005cd4 	movui	zero,371
    5f5c:	00006900 	call	690 <encode_image+0x228>
    5f60:	00005cd4 	movui	zero,371
    5f64:	00005cd4 	movui	zero,371
    5f68:	0000692c 	andhi	zero,zero,420
    5f6c:	00005cd4 	movui	zero,371
    5f70:	00005cd4 	movui	zero,371
    5f74:	00005cd4 	movui	zero,371
    5f78:	00005cd4 	movui	zero,371
    5f7c:	00005cd4 	movui	zero,371
    5f80:	00005cd4 	movui	zero,371
    5f84:	00005cd4 	movui	zero,371
    5f88:	00005cd4 	movui	zero,371
    5f8c:	00006954 	movui	zero,421
    5f90:	00005cd4 	movui	zero,371
    5f94:	00005cd4 	movui	zero,371
    5f98:	0000697c 	xorhi	zero,zero,421
    5f9c:	00005cd4 	movui	zero,371
    5fa0:	00005cd4 	movui	zero,371
    5fa4:	00005cd4 	movui	zero,371
    5fa8:	00005cd4 	movui	zero,371
    5fac:	00005cd4 	movui	zero,371
    5fb0:	00005cd4 	movui	zero,371
    5fb4:	00005cd4 	movui	zero,371
    5fb8:	000069a0 	cmpeqi	zero,zero,422
    5fbc:	000069b4 	movhi	zero,422
    5fc0:	000068f0 	cmpltui	zero,zero,419
    5fc4:	000068f0 	cmpltui	zero,zero,419
    5fc8:	000068f0 	cmpltui	zero,zero,419
    5fcc:	000069c0 	call	69c <encode_image+0x234>
    5fd0:	000069d0 	cmplti	zero,zero,423
    5fd4:	00005cd4 	movui	zero,371
    5fd8:	00005cd4 	movui	zero,371
    5fdc:	000069f0 	cmpltui	zero,zero,423
    5fe0:	00005cd4 	movui	zero,371
    5fe4:	00006a10 	cmplti	zero,zero,424
    5fe8:	00006a44 	movi	zero,425
    5fec:	00006a50 	cmplti	zero,zero,425
    5ff0:	00005cd4 	movui	zero,371
    5ff4:	00005cd4 	movui	zero,371
    5ff8:	00006878 	rdprs	zero,zero,417
    5ffc:	00005cd4 	movui	zero,371
    6000:	00006888 	cmpgei	zero,zero,418
    6004:	00005cd4 	movui	zero,371
    6008:	00005cd4 	movui	zero,371
    600c:	00006954 	movui	zero,421
    6010:	8809883a 	mov	r4,r17
    6014:	980b883a 	mov	r5,r19
    6018:	000372c0 	call	372c <__srefill_r>
    601c:	103f1826 	beq	r2,zero,5c80 <__svfscanf_r+0x138>
    6020:	d8809e17 	ldw	r2,632(sp)
    6024:	10000626 	beq	r2,zero,6040 <__svfscanf_r+0x4f8>
    6028:	9880030b 	ldhu	r2,12(r19)
    602c:	1080100c 	andi	r2,r2,64
    6030:	10bfffcc 	andi	r2,r2,65535
    6034:	10a0001c 	xori	r2,r2,32768
    6038:	10a00004 	addi	r2,r2,-32768
    603c:	103eff26 	beq	r2,zero,5c3c <__svfscanf_r+0xf4>
    6040:	00bfffc4 	movi	r2,-1
    6044:	d8809e15 	stw	r2,632(sp)
    6048:	003efc06 	br	5c3c <__svfscanf_r+0xf4>
    604c:	8809883a 	mov	r4,r17
    6050:	980b883a 	mov	r5,r19
    6054:	000372c0 	call	372c <__srefill_r>
    6058:	103ff11e 	bne	r2,zero,6020 <__svfscanf_r+0x4d8>
    605c:	91400017 	ldw	r5,0(r18)
    6060:	98800017 	ldw	r2,0(r19)
    6064:	00000206 	br	6070 <__svfscanf_r+0x528>
    6068:	10800044 	addi	r2,r2,1
    606c:	98800015 	stw	r2,0(r19)
    6070:	10c00003 	ldbu	r3,0(r2)
    6074:	28c7883a 	add	r3,r5,r3
    6078:	18c00003 	ldbu	r3,0(r3)
    607c:	18c0020c 	andi	r3,r3,8
    6080:	18c03fcc 	andi	r3,r3,255
    6084:	18c0201c 	xori	r3,r3,128
    6088:	18ffe004 	addi	r3,r3,-128
    608c:	183f2526 	beq	r3,zero,5d24 <__svfscanf_r+0x1dc>
    6090:	98c00117 	ldw	r3,4(r19)
    6094:	a5000044 	addi	r20,r20,1
    6098:	18ffffc4 	addi	r3,r3,-1
    609c:	98c00115 	stw	r3,4(r19)
    60a0:	00fff116 	blt	zero,r3,6068 <__svfscanf_r+0x520>
    60a4:	003fe906 	br	604c <__svfscanf_r+0x504>
    60a8:	e000011e 	bne	fp,zero,60b0 <__svfscanf_r+0x568>
    60ac:	073fffc4 	movi	fp,-1
    60b0:	b580040c 	andi	r22,r22,16
    60b4:	b0016826 	beq	r22,zero,6658 <__svfscanf_r+0xb10>
    60b8:	98800017 	ldw	r2,0(r19)
    60bc:	0021883a 	mov	r16,zero
    60c0:	dd805884 	addi	r22,sp,354
    60c4:	10c00003 	ldbu	r3,0(r2)
    60c8:	b0c7883a 	add	r3,r22,r3
    60cc:	18c00007 	ldb	r3,0(r3)
    60d0:	18039726 	beq	r3,zero,6f30 <__svfscanf_r+0x13e8>
    60d4:	98c00117 	ldw	r3,4(r19)
    60d8:	10800044 	addi	r2,r2,1
    60dc:	84000044 	addi	r16,r16,1
    60e0:	18ffffc4 	addi	r3,r3,-1
    60e4:	98c00115 	stw	r3,4(r19)
    60e8:	98800015 	stw	r2,0(r19)
    60ec:	e4008f26 	beq	fp,r16,632c <__svfscanf_r+0x7e4>
    60f0:	00fff416 	blt	zero,r3,60c4 <__svfscanf_r+0x57c>
    60f4:	8809883a 	mov	r4,r17
    60f8:	980b883a 	mov	r5,r19
    60fc:	000372c0 	call	372c <__srefill_r>
    6100:	10008a1e 	bne	r2,zero,632c <__svfscanf_r+0x7e4>
    6104:	98800017 	ldw	r2,0(r19)
    6108:	003fee06 	br	60c4 <__svfscanf_r+0x57c>
    610c:	008000c4 	movi	r2,3
    6110:	80806426 	beq	r16,r2,62a4 <__svfscanf_r+0x75c>
    6114:	00800104 	movi	r2,4
    6118:	80bf071e 	bne	r16,r2,5d38 <__svfscanf_r+0x1f0>
    611c:	e0bfffc4 	addi	r2,fp,-1
    6120:	01005704 	movi	r4,348
    6124:	20814736 	bltu	r4,r2,6644 <__svfscanf_r+0xafc>
    6128:	0017883a 	mov	r11,zero
    612c:	b581e014 	ori	r22,r22,1920
    6130:	0021883a 	mov	r16,zero
    6134:	d800a115 	stw	zero,644(sp)
    6138:	d800a315 	stw	zero,652(sp)
    613c:	002b883a 	mov	r21,zero
    6140:	d800a215 	stw	zero,648(sp)
    6144:	ddc00104 	addi	r23,sp,4
    6148:	000d883a 	mov	r6,zero
    614c:	00c01384 	movi	r3,78
    6150:	03810004 	movi	r14,1024
    6154:	033e1fc4 	movi	r12,-1921
    6158:	03ff5fc4 	movi	r15,-641
    615c:	99c00017 	ldw	r7,0(r19)
    6160:	39400003 	ldbu	r5,0(r7)
    6164:	28bff544 	addi	r2,r5,-43
    6168:	10803fcc 	andi	r2,r2,255
    616c:	1880c82e 	bgeu	r3,r2,6490 <__svfscanf_r+0x948>
    6170:	a8000226 	beq	r21,zero,617c <__svfscanf_r+0x634>
    6174:	00bfbfc4 	movi	r2,-257
    6178:	b0ac703a 	and	r22,r22,r2
    617c:	31bfffc4 	addi	r6,r6,-1
    6180:	00800044 	movi	r2,1
    6184:	1184092e 	bgeu	r2,r6,71ac <__svfscanf_r+0x1664>
    6188:	80803fcc 	andi	r2,r16,255
    618c:	1080201c 	xori	r2,r2,128
    6190:	10bfe004 	addi	r2,r2,-128
    6194:	10ffffc4 	addi	r3,r2,-1
    6198:	01000184 	movi	r4,6
    619c:	20c01036 	bltu	r4,r3,61e0 <__svfscanf_r+0x698>
    61a0:	00c00084 	movi	r3,2
    61a4:	1883f50e 	bge	r3,r2,717c <__svfscanf_r+0x1634>
    61a8:	00c000c4 	movi	r3,3
    61ac:	10c00c26 	beq	r2,r3,61e0 <__svfscanf_r+0x698>
    61b0:	843fff04 	addi	r16,r16,-4
    61b4:	84003fcc 	andi	r16,r16,255
    61b8:	0438303a 	nor	fp,zero,r16
    61bc:	bf39883a 	add	fp,r23,fp
    61c0:	bdffffc4 	addi	r23,r23,-1
    61c4:	b9400007 	ldb	r5,0(r23)
    61c8:	8809883a 	mov	r4,r17
    61cc:	980d883a 	mov	r6,r19
    61d0:	000d6d00 	call	d6d0 <_ungetc_r>
    61d4:	bf3ffa1e 	bne	r23,fp,61c0 <__svfscanf_r+0x678>
    61d8:	a27fffc4 	addi	r9,r20,-1
    61dc:	4c29c83a 	sub	r20,r9,r16
    61e0:	b080400c 	andi	r2,r22,256
    61e4:	10001326 	beq	r2,zero,6234 <__svfscanf_r+0x6ec>
    61e8:	b081000c 	andi	r2,r22,1024
    61ec:	1003d21e 	bne	r2,zero,7138 <__svfscanf_r+0x15f0>
    61f0:	b97fffc7 	ldb	r5,-1(r23)
    61f4:	00801944 	movi	r2,101
    61f8:	bc3fffc4 	addi	r16,r23,-1
    61fc:	a53fffc4 	addi	r20,r20,-1
    6200:	28800826 	beq	r5,r2,6224 <__svfscanf_r+0x6dc>
    6204:	00801144 	movi	r2,69
    6208:	28800626 	beq	r5,r2,6224 <__svfscanf_r+0x6dc>
    620c:	8809883a 	mov	r4,r17
    6210:	980d883a 	mov	r6,r19
    6214:	000d6d00 	call	d6d0 <_ungetc_r>
    6218:	b97fff87 	ldb	r5,-2(r23)
    621c:	bc3fff84 	addi	r16,r23,-2
    6220:	a53fffc4 	addi	r20,r20,-1
    6224:	8809883a 	mov	r4,r17
    6228:	980d883a 	mov	r6,r19
    622c:	000d6d00 	call	d6d0 <_ungetc_r>
    6230:	802f883a 	mov	r23,r16
    6234:	b080040c 	andi	r2,r22,16
    6238:	103ef21e 	bne	r2,zero,5e04 <__svfscanf_r+0x2bc>
    623c:	b8000005 	stb	zero,0(r23)
    6240:	b0c1800c 	andi	r3,r22,1536
    6244:	00810004 	movi	r2,1024
    6248:	18837726 	beq	r3,r2,7028 <__svfscanf_r+0x14e0>
    624c:	d8c0a317 	ldw	r3,652(sp)
    6250:	1803601e 	bne	r3,zero,6fd4 <__svfscanf_r+0x148c>
    6254:	8809883a 	mov	r4,r17
    6258:	d9400104 	addi	r5,sp,4
    625c:	000d883a 	mov	r6,zero
    6260:	000b3340 	call	b334 <_strtod_r>
    6264:	102b883a 	mov	r21,r2
    6268:	b080004c 	andi	r2,r22,1
    626c:	182f883a 	mov	r23,r3
    6270:	10031f26 	beq	r2,zero,6ef0 <__svfscanf_r+0x13a8>
    6274:	d9409c17 	ldw	r5,624(sp)
    6278:	28800017 	ldw	r2,0(r5)
    627c:	29400104 	addi	r5,r5,4
    6280:	d9409c15 	stw	r5,624(sp)
    6284:	15400015 	stw	r21,0(r2)
    6288:	10c00115 	stw	r3,4(r2)
    628c:	d8809e17 	ldw	r2,632(sp)
    6290:	dc009d17 	ldw	r16,628(sp)
    6294:	10800044 	addi	r2,r2,1
    6298:	d8809e15 	stw	r2,632(sp)
    629c:	800d883a 	mov	r6,r16
    62a0:	003e6206 	br	5c2c <__svfscanf_r+0xe4>
    62a4:	e0bfffc4 	addi	r2,fp,-1
    62a8:	01005704 	movi	r4,348
    62ac:	2080e82e 	bgeu	r4,r2,6650 <__svfscanf_r+0xb08>
    62b0:	e0ffa8c4 	addi	r3,fp,-349
    62b4:	07005744 	movi	fp,349
    62b8:	da409f17 	ldw	r9,636(sp)
    62bc:	b5836014 	ori	r22,r22,3456
    62c0:	0021883a 	mov	r16,zero
    62c4:	dd400104 	addi	r21,sp,4
    62c8:	05c01344 	movi	r23,77
    62cc:	01c08004 	movi	r7,512
    62d0:	01bf7fc4 	movi	r6,-513
    62d4:	9a000017 	ldw	r8,0(r19)
    62d8:	41400003 	ldbu	r5,0(r8)
    62dc:	28bff544 	addi	r2,r5,-43
    62e0:	10803fcc 	andi	r2,r2,255
    62e4:	b881eb2e 	bgeu	r23,r2,6a94 <__svfscanf_r+0xf4c>
    62e8:	da409f15 	stw	r9,636(sp)
    62ec:	b080400c 	andi	r2,r22,256
    62f0:	10000926 	beq	r2,zero,6318 <__svfscanf_r+0x7d0>
    62f4:	d9400104 	addi	r5,sp,4
    62f8:	2d40052e 	bgeu	r5,r21,6310 <__svfscanf_r+0x7c8>
    62fc:	a97fffc7 	ldb	r5,-1(r21)
    6300:	8809883a 	mov	r4,r17
    6304:	980d883a 	mov	r6,r19
    6308:	ad7fffc4 	addi	r21,r21,-1
    630c:	000d6d00 	call	d6d0 <_ungetc_r>
    6310:	d8800104 	addi	r2,sp,4
    6314:	157e4926 	beq	r2,r21,5c3c <__svfscanf_r+0xf4>
    6318:	b080040c 	andi	r2,r22,16
    631c:	1002ac26 	beq	r2,zero,6dd0 <__svfscanf_r+0x1288>
    6320:	d8c00104 	addi	r3,sp,4
    6324:	a8ebc83a 	sub	r21,r21,r3
    6328:	ac21883a 	add	r16,r21,r16
    632c:	a429883a 	add	r20,r20,r16
    6330:	dc009d17 	ldw	r16,628(sp)
    6334:	800d883a 	mov	r6,r16
    6338:	003e3c06 	br	5c2c <__svfscanf_r+0xe4>
    633c:	e000011e 	bne	fp,zero,6344 <__svfscanf_r+0x7fc>
    6340:	073fffc4 	movi	fp,-1
    6344:	b080004c 	andi	r2,r22,1
    6348:	b580040c 	andi	r22,r22,16
    634c:	10003526 	beq	r2,zero,6424 <__svfscanf_r+0x8dc>
    6350:	b002dd1e 	bne	r22,zero,6ec8 <__svfscanf_r+0x1380>
    6354:	d8c09c17 	ldw	r3,624(sp)
    6358:	1d400017 	ldw	r21,0(r3)
    635c:	18c00104 	addi	r3,r3,4
    6360:	d8c09c15 	stw	r3,624(sp)
    6364:	0021883a 	mov	r16,zero
    6368:	ddc09904 	addi	r23,sp,612
    636c:	98c00017 	ldw	r3,0(r19)
    6370:	91400017 	ldw	r5,0(r18)
    6374:	18800003 	ldbu	r2,0(r3)
    6378:	11003fcc 	andi	r4,r2,255
    637c:	2909883a 	add	r4,r5,r4
    6380:	21000003 	ldbu	r4,0(r4)
    6384:	2100020c 	andi	r4,r4,8
    6388:	21003fcc 	andi	r4,r4,255
    638c:	2100201c 	xori	r4,r4,128
    6390:	213fe004 	addi	r4,r4,-128
    6394:	2002731e 	bne	r4,zero,6d64 <__svfscanf_r+0x121c>
    6398:	e0027226 	beq	fp,zero,6d64 <__svfscanf_r+0x121c>
    639c:	01400074 	movhi	r5,1
    63a0:	2958b204 	addi	r5,r5,25288
    63a4:	29000017 	ldw	r4,0(r5)
    63a8:	813f1d26 	beq	r16,r4,6020 <__svfscanf_r+0x4d8>
    63ac:	9a000117 	ldw	r8,4(r19)
    63b0:	18c00044 	addi	r3,r3,1
    63b4:	d9000104 	addi	r4,sp,4
    63b8:	423fffc4 	addi	r8,r8,-1
    63bc:	240f883a 	add	r7,r4,r16
    63c0:	000b883a 	mov	r5,zero
    63c4:	b809883a 	mov	r4,r23
    63c8:	01800204 	movi	r6,8
    63cc:	9a000115 	stw	r8,4(r19)
    63d0:	98c00015 	stw	r3,0(r19)
    63d4:	38800005 	stb	r2,0(r7)
    63d8:	84000044 	addi	r16,r16,1
    63dc:	00034a40 	call	34a4 <memset>
    63e0:	a80b883a 	mov	r5,r21
    63e4:	8809883a 	mov	r4,r17
    63e8:	ddc00015 	stw	r23,0(sp)
    63ec:	d9800104 	addi	r6,sp,4
    63f0:	800f883a 	mov	r7,r16
    63f4:	00094cc0 	call	94cc <_mbrtowc_r>
    63f8:	017fffc4 	movi	r5,-1
    63fc:	117f0826 	beq	r2,r5,6020 <__svfscanf_r+0x4d8>
    6400:	1002de1e 	bne	r2,zero,6f7c <__svfscanf_r+0x1434>
    6404:	a8000015 	stw	zero,0(r21)
    6408:	0009883a 	mov	r4,zero
    640c:	0002de06 	br	6f88 <__svfscanf_r+0x1440>
    6410:	8809883a 	mov	r4,r17
    6414:	980b883a 	mov	r5,r19
    6418:	000372c0 	call	372c <__srefill_r>
    641c:	103e3f26 	beq	r2,zero,5d1c <__svfscanf_r+0x1d4>
    6420:	003eff06 	br	6020 <__svfscanf_r+0x4d8>
    6424:	b0027e26 	beq	r22,zero,6e20 <__svfscanf_r+0x12d8>
    6428:	91400017 	ldw	r5,0(r18)
    642c:	98800017 	ldw	r2,0(r19)
    6430:	0021883a 	mov	r16,zero
    6434:	10c00003 	ldbu	r3,0(r2)
    6438:	28c7883a 	add	r3,r5,r3
    643c:	18c00003 	ldbu	r3,0(r3)
    6440:	18c0020c 	andi	r3,r3,8
    6444:	18c03fcc 	andi	r3,r3,255
    6448:	18c0201c 	xori	r3,r3,128
    644c:	18ffe004 	addi	r3,r3,-128
    6450:	183fb61e 	bne	r3,zero,632c <__svfscanf_r+0x7e4>
    6454:	98c00117 	ldw	r3,4(r19)
    6458:	10800044 	addi	r2,r2,1
    645c:	84000044 	addi	r16,r16,1
    6460:	18ffffc4 	addi	r3,r3,-1
    6464:	98c00115 	stw	r3,4(r19)
    6468:	98800015 	stw	r2,0(r19)
    646c:	e43faf26 	beq	fp,r16,632c <__svfscanf_r+0x7e4>
    6470:	00fff016 	blt	zero,r3,6434 <__svfscanf_r+0x8ec>
    6474:	8809883a 	mov	r4,r17
    6478:	980b883a 	mov	r5,r19
    647c:	000372c0 	call	372c <__srefill_r>
    6480:	103faa1e 	bne	r2,zero,632c <__svfscanf_r+0x7e4>
    6484:	91400017 	ldw	r5,0(r18)
    6488:	98800017 	ldw	r2,0(r19)
    648c:	003fe906 	br	6434 <__svfscanf_r+0x8ec>
    6490:	1085883a 	add	r2,r2,r2
    6494:	1085883a 	add	r2,r2,r2
    6498:	01000034 	movhi	r4,0
    649c:	21192b04 	addi	r4,r4,25772
    64a0:	1105883a 	add	r2,r2,r4
    64a4:	10800017 	ldw	r2,0(r2)
    64a8:	1000683a 	jmp	r2
    64ac:	0000674c 	andi	zero,zero,413
    64b0:	00006170 	cmpltui	zero,zero,389
    64b4:	0000674c 	andi	zero,zero,413
    64b8:	00006738 	rdprs	zero,zero,412
    64bc:	00006170 	cmpltui	zero,zero,389
    64c0:	00006714 	movui	zero,412
    64c4:	000066c8 	cmpgei	zero,zero,411
    64c8:	000066c8 	cmpgei	zero,zero,411
    64cc:	000066c8 	cmpgei	zero,zero,411
    64d0:	000066c8 	cmpgei	zero,zero,411
    64d4:	000066c8 	cmpgei	zero,zero,411
    64d8:	000066c8 	cmpgei	zero,zero,411
    64dc:	000066c8 	cmpgei	zero,zero,411
    64e0:	000066c8 	cmpgei	zero,zero,411
    64e4:	000066c8 	cmpgei	zero,zero,411
    64e8:	00006170 	cmpltui	zero,zero,389
    64ec:	00006170 	cmpltui	zero,zero,389
    64f0:	00006170 	cmpltui	zero,zero,389
    64f4:	00006170 	cmpltui	zero,zero,389
    64f8:	00006170 	cmpltui	zero,zero,389
    64fc:	00006170 	cmpltui	zero,zero,389
    6500:	00006170 	cmpltui	zero,zero,389
    6504:	00006830 	cmpltui	zero,zero,416
    6508:	00006170 	cmpltui	zero,zero,389
    650c:	00006170 	cmpltui	zero,zero,389
    6510:	00006170 	cmpltui	zero,zero,389
    6514:	000067f4 	movhi	zero,415
    6518:	00006840 	call	684 <encode_image+0x21c>
    651c:	00006170 	cmpltui	zero,zero,389
    6520:	00006170 	cmpltui	zero,zero,389
    6524:	000067cc 	andi	zero,zero,415
    6528:	00006170 	cmpltui	zero,zero,389
    652c:	00006170 	cmpltui	zero,zero,389
    6530:	00006170 	cmpltui	zero,zero,389
    6534:	00006170 	cmpltui	zero,zero,389
    6538:	00006798 	cmpnei	zero,zero,414
    653c:	00006170 	cmpltui	zero,zero,389
    6540:	00006170 	cmpltui	zero,zero,389
    6544:	00006170 	cmpltui	zero,zero,389
    6548:	00006170 	cmpltui	zero,zero,389
    654c:	00006170 	cmpltui	zero,zero,389
    6550:	0000677c 	xorhi	zero,zero,413
    6554:	00006170 	cmpltui	zero,zero,389
    6558:	00006170 	cmpltui	zero,zero,389
    655c:	00006170 	cmpltui	zero,zero,389
    6560:	00006170 	cmpltui	zero,zero,389
    6564:	00006760 	cmpeqi	zero,zero,413
    6568:	00006170 	cmpltui	zero,zero,389
    656c:	00006170 	cmpltui	zero,zero,389
    6570:	00006170 	cmpltui	zero,zero,389
    6574:	00006170 	cmpltui	zero,zero,389
    6578:	00006170 	cmpltui	zero,zero,389
    657c:	00006170 	cmpltui	zero,zero,389
    6580:	00006170 	cmpltui	zero,zero,389
    6584:	00006830 	cmpltui	zero,zero,416
    6588:	00006170 	cmpltui	zero,zero,389
    658c:	00006170 	cmpltui	zero,zero,389
    6590:	00006170 	cmpltui	zero,zero,389
    6594:	000067f4 	movhi	zero,415
    6598:	00006840 	call	684 <encode_image+0x21c>
    659c:	00006170 	cmpltui	zero,zero,389
    65a0:	00006170 	cmpltui	zero,zero,389
    65a4:	000067cc 	andi	zero,zero,415
    65a8:	00006170 	cmpltui	zero,zero,389
    65ac:	00006170 	cmpltui	zero,zero,389
    65b0:	00006170 	cmpltui	zero,zero,389
    65b4:	00006170 	cmpltui	zero,zero,389
    65b8:	00006798 	cmpnei	zero,zero,414
    65bc:	00006170 	cmpltui	zero,zero,389
    65c0:	00006170 	cmpltui	zero,zero,389
    65c4:	00006170 	cmpltui	zero,zero,389
    65c8:	00006170 	cmpltui	zero,zero,389
    65cc:	00006170 	cmpltui	zero,zero,389
    65d0:	0000677c 	xorhi	zero,zero,413
    65d4:	00006170 	cmpltui	zero,zero,389
    65d8:	00006170 	cmpltui	zero,zero,389
    65dc:	00006170 	cmpltui	zero,zero,389
    65e0:	00006170 	cmpltui	zero,zero,389
    65e4:	00006760 	cmpeqi	zero,zero,413
    65e8:	b580040c 	andi	r22,r22,16
    65ec:	b0025226 	beq	r22,zero,6f38 <__svfscanf_r+0x13f0>
    65f0:	0021883a 	mov	r16,zero
    65f4:	98800117 	ldw	r2,4(r19)
    65f8:	17026f0e 	bge	r2,fp,6fb8 <__svfscanf_r+0x1470>
    65fc:	98c00017 	ldw	r3,0(r19)
    6600:	8809883a 	mov	r4,r17
    6604:	980b883a 	mov	r5,r19
    6608:	1887883a 	add	r3,r3,r2
    660c:	98c00015 	stw	r3,0(r19)
    6610:	80a1883a 	add	r16,r16,r2
    6614:	e0b9c83a 	sub	fp,fp,r2
    6618:	000372c0 	call	372c <__srefill_r>
    661c:	103ff526 	beq	r2,zero,65f4 <__svfscanf_r+0xaac>
    6620:	803f421e 	bne	r16,zero,632c <__svfscanf_r+0x7e4>
    6624:	003e7e06 	br	6020 <__svfscanf_r+0x4d8>
    6628:	8809883a 	mov	r4,r17
    662c:	980b883a 	mov	r5,r19
    6630:	000372c0 	call	372c <__srefill_r>
    6634:	103df126 	beq	r2,zero,5dfc <__svfscanf_r+0x2b4>
    6638:	803e791e 	bne	r16,zero,6020 <__svfscanf_r+0x4d8>
    663c:	b83f1326 	beq	r23,zero,628c <__svfscanf_r+0x744>
    6640:	003df006 	br	5e04 <__svfscanf_r+0x2bc>
    6644:	e2ffa8c4 	addi	r11,fp,-349
    6648:	07005744 	movi	fp,349
    664c:	003eb706 	br	612c <__svfscanf_r+0x5e4>
    6650:	0007883a 	mov	r3,zero
    6654:	003f1806 	br	62b8 <__svfscanf_r+0x770>
    6658:	d8c09c17 	ldw	r3,624(sp)
    665c:	98800017 	ldw	r2,0(r19)
    6660:	dd805884 	addi	r22,sp,354
    6664:	1c000017 	ldw	r16,0(r3)
    6668:	1dc00104 	addi	r23,r3,4
    666c:	802b883a 	mov	r21,r16
    6670:	10c00003 	ldbu	r3,0(r2)
    6674:	b0c7883a 	add	r3,r22,r3
    6678:	18c00007 	ldb	r3,0(r3)
    667c:	1801c226 	beq	r3,zero,6d88 <__svfscanf_r+0x1240>
    6680:	98c00117 	ldw	r3,4(r19)
    6684:	10800044 	addi	r2,r2,1
    6688:	ad400044 	addi	r21,r21,1
    668c:	18ffffc4 	addi	r3,r3,-1
    6690:	98c00115 	stw	r3,4(r19)
    6694:	10ffffc3 	ldbu	r3,-1(r2)
    6698:	e73fffc4 	addi	fp,fp,-1
    669c:	a8ffffc5 	stb	r3,-1(r21)
    66a0:	98800015 	stw	r2,0(r19)
    66a4:	e001b826 	beq	fp,zero,6d88 <__svfscanf_r+0x1240>
    66a8:	98c00117 	ldw	r3,4(r19)
    66ac:	00fff016 	blt	zero,r3,6670 <__svfscanf_r+0xb28>
    66b0:	8809883a 	mov	r4,r17
    66b4:	980b883a 	mov	r5,r19
    66b8:	000372c0 	call	372c <__srefill_r>
    66bc:	1001b11e 	bne	r2,zero,6d84 <__svfscanf_r+0x123c>
    66c0:	98800017 	ldw	r2,0(r19)
    66c4:	003fea06 	br	6670 <__svfscanf_r+0xb28>
    66c8:	80803fcc 	andi	r2,r16,255
    66cc:	1080201c 	xori	r2,r2,128
    66d0:	10bfe004 	addi	r2,r2,-128
    66d4:	3085883a 	add	r2,r6,r2
    66d8:	103ea51e 	bne	r2,zero,6170 <__svfscanf_r+0x628>
    66dc:	00bf9fc4 	movi	r2,-385
    66e0:	b0ac703a 	and	r22,r22,r2
    66e4:	b9400005 	stb	r5,0(r23)
    66e8:	bdc00044 	addi	r23,r23,1
    66ec:	98800117 	ldw	r2,4(r19)
    66f0:	e73fffc4 	addi	fp,fp,-1
    66f4:	a5000044 	addi	r20,r20,1
    66f8:	10bfffc4 	addi	r2,r2,-1
    66fc:	98800115 	stw	r2,4(r19)
    6700:	00816d0e 	bge	zero,r2,6cb8 <__svfscanf_r+0x1170>
    6704:	39c00044 	addi	r7,r7,1
    6708:	99c00015 	stw	r7,0(r19)
    670c:	e03e931e 	bne	fp,zero,615c <__svfscanf_r+0x614>
    6710:	003e9706 	br	6170 <__svfscanf_r+0x628>
    6714:	b080400c 	andi	r2,r22,256
    6718:	103feb26 	beq	r2,zero,66c8 <__svfscanf_r+0xb80>
    671c:	00bfdfc4 	movi	r2,-129
    6720:	b0ac703a 	and	r22,r22,r2
    6724:	ad400044 	addi	r21,r21,1
    6728:	583ff026 	beq	r11,zero,66ec <__svfscanf_r+0xba4>
    672c:	5affffc4 	addi	r11,r11,-1
    6730:	e7000044 	addi	fp,fp,1
    6734:	003fed06 	br	66ec <__svfscanf_r+0xba4>
    6738:	b080800c 	andi	r2,r22,512
    673c:	103e8c26 	beq	r2,zero,6170 <__svfscanf_r+0x628>
    6740:	b3ec703a 	and	r22,r22,r15
    6744:	dd40a215 	stw	r21,648(sp)
    6748:	003fe606 	br	66e4 <__svfscanf_r+0xb9c>
    674c:	b080200c 	andi	r2,r22,128
    6750:	103e8726 	beq	r2,zero,6170 <__svfscanf_r+0x628>
    6754:	00bfdfc4 	movi	r2,-129
    6758:	b0ac703a 	and	r22,r22,r2
    675c:	003fe106 	br	66e4 <__svfscanf_r+0xb9c>
    6760:	81003fcc 	andi	r4,r16,255
    6764:	2100201c 	xori	r4,r4,128
    6768:	213fe004 	addi	r4,r4,-128
    676c:	008001c4 	movi	r2,7
    6770:	20be7f1e 	bne	r4,r2,6170 <__svfscanf_r+0x628>
    6774:	04000204 	movi	r16,8
    6778:	003fda06 	br	66e4 <__svfscanf_r+0xb9c>
    677c:	81003fcc 	andi	r4,r16,255
    6780:	2100201c 	xori	r4,r4,128
    6784:	213fe004 	addi	r4,r4,-128
    6788:	00800184 	movi	r2,6
    678c:	20be781e 	bne	r4,r2,6170 <__svfscanf_r+0x628>
    6790:	040001c4 	movi	r16,7
    6794:	003fd306 	br	66e4 <__svfscanf_r+0xb9c>
    6798:	3001891e 	bne	r6,zero,6dc0 <__svfscanf_r+0x1278>
    679c:	b101c00c 	andi	r4,r22,1792
    67a0:	0081c004 	movi	r2,1792
    67a4:	20821d26 	beq	r4,r2,701c <__svfscanf_r+0x14d4>
    67a8:	80803fcc 	andi	r2,r16,255
    67ac:	1080201c 	xori	r2,r2,128
    67b0:	10bfe004 	addi	r2,r2,-128
    67b4:	01000044 	movi	r4,1
    67b8:	11000226 	beq	r2,r4,67c4 <__svfscanf_r+0xc7c>
    67bc:	01000104 	movi	r4,4
    67c0:	113e6b1e 	bne	r2,r4,6170 <__svfscanf_r+0x628>
    67c4:	84000044 	addi	r16,r16,1
    67c8:	003fc606 	br	66e4 <__svfscanf_r+0xb9c>
    67cc:	80803fcc 	andi	r2,r16,255
    67d0:	1080201c 	xori	r2,r2,128
    67d4:	10bfe004 	addi	r2,r2,-128
    67d8:	1001731e 	bne	r2,zero,6da8 <__svfscanf_r+0x1260>
    67dc:	b101c00c 	andi	r4,r22,1792
    67e0:	0081c004 	movi	r2,1792
    67e4:	20be621e 	bne	r4,r2,6170 <__svfscanf_r+0x628>
    67e8:	b32c703a 	and	r22,r22,r12
    67ec:	04000044 	movi	r16,1
    67f0:	003fbc06 	br	66e4 <__svfscanf_r+0xb9c>
    67f4:	b081400c 	andi	r2,r22,1280
    67f8:	13800326 	beq	r2,r14,6808 <__svfscanf_r+0xcc0>
    67fc:	b081000c 	andi	r2,r22,1024
    6800:	103e5b26 	beq	r2,zero,6170 <__svfscanf_r+0x628>
    6804:	a83e5d26 	beq	r21,zero,617c <__svfscanf_r+0x634>
    6808:	b080800c 	andi	r2,r22,512
    680c:	1000041e 	bne	r2,zero,6820 <__svfscanf_r+0xcd8>
    6810:	d880a217 	ldw	r2,648(sp)
    6814:	ddc0a115 	stw	r23,644(sp)
    6818:	a8abc83a 	sub	r21,r21,r2
    681c:	dd40a315 	stw	r21,652(sp)
    6820:	b32c703a 	and	r22,r22,r12
    6824:	b5806014 	ori	r22,r22,384
    6828:	002b883a 	mov	r21,zero
    682c:	003fad06 	br	66e4 <__svfscanf_r+0xb9c>
    6830:	00800044 	movi	r2,1
    6834:	30be4e1e 	bne	r6,r2,6170 <__svfscanf_r+0x628>
    6838:	01800084 	movi	r6,2
    683c:	003fa906 	br	66e4 <__svfscanf_r+0xb9c>
    6840:	81003fcc 	andi	r4,r16,255
    6844:	2100201c 	xori	r4,r4,128
    6848:	213fe004 	addi	r4,r4,-128
    684c:	00800084 	movi	r2,2
    6850:	20be471e 	bne	r4,r2,6170 <__svfscanf_r+0x628>
    6854:	040000c4 	movi	r16,3
    6858:	003fa206 	br	66e4 <__svfscanf_r+0xb9c>
    685c:	01400074 	movhi	r5,1
    6860:	29726e04 	addi	r5,r5,-13896
    6864:	00800284 	movi	r2,10
    6868:	d940a015 	stw	r5,640(sp)
    686c:	d8809f15 	stw	r2,636(sp)
    6870:	040000c4 	movi	r16,3
    6874:	003d2706 	br	5d14 <__svfscanf_r+0x1cc>
    6878:	df009d15 	stw	fp,628(sp)
    687c:	04000084 	movi	r16,2
    6880:	2039883a 	mov	fp,r4
    6884:	003d2306 	br	5d14 <__svfscanf_r+0x1cc>
    6888:	00800074 	movhi	r2,1
    688c:	10b3e104 	addi	r2,r2,-12412
    6890:	00c00284 	movi	r3,10
    6894:	df009d15 	stw	fp,628(sp)
    6898:	d880a015 	stw	r2,640(sp)
    689c:	2039883a 	mov	fp,r4
    68a0:	d8c09f15 	stw	r3,636(sp)
    68a4:	040000c4 	movi	r16,3
    68a8:	003d1a06 	br	5d14 <__svfscanf_r+0x1cc>
    68ac:	bdc03fcc 	andi	r23,r23,255
    68b0:	01400284 	movi	r5,10
    68b4:	bdc0201c 	xori	r23,r23,128
    68b8:	d8c0a815 	stw	r3,672(sp)
    68bc:	d980a915 	stw	r6,676(sp)
    68c0:	bdffe004 	addi	r23,r23,-128
    68c4:	00015040 	call	1504 <__mulsi3>
    68c8:	15c5883a 	add	r2,r2,r23
    68cc:	113ff404 	addi	r4,r2,-48
    68d0:	85c00043 	ldbu	r23,1(r16)
    68d4:	d8c0a817 	ldw	r3,672(sp)
    68d8:	e021883a 	mov	r16,fp
    68dc:	d980a917 	ldw	r6,676(sp)
    68e0:	003cf906 	br	5cc8 <__svfscanf_r+0x180>
    68e4:	df009d15 	stw	fp,628(sp)
    68e8:	2039883a 	mov	fp,r4
    68ec:	003d0206 	br	5cf8 <__svfscanf_r+0x1b0>
    68f0:	df009d15 	stw	fp,628(sp)
    68f4:	04000104 	movi	r16,4
    68f8:	2039883a 	mov	fp,r4
    68fc:	003d0506 	br	5d14 <__svfscanf_r+0x1cc>
    6900:	85c00043 	ldbu	r23,1(r16)
    6904:	b5800094 	ori	r22,r22,2
    6908:	e021883a 	mov	r16,fp
    690c:	003cee06 	br	5cc8 <__svfscanf_r+0x180>
    6910:	df009d15 	stw	fp,628(sp)
    6914:	e021883a 	mov	r16,fp
    6918:	003cd706 	br	5c78 <__svfscanf_r+0x130>
    691c:	85c00043 	ldbu	r23,1(r16)
    6920:	b5800414 	ori	r22,r22,16
    6924:	e021883a 	mov	r16,fp
    6928:	003ce706 	br	5cc8 <__svfscanf_r+0x180>
    692c:	df009d15 	stw	fp,628(sp)
    6930:	b5800054 	ori	r22,r22,1
    6934:	2039883a 	mov	fp,r4
    6938:	01000074 	movhi	r4,1
    693c:	2133e104 	addi	r4,r4,-12412
    6940:	01400204 	movi	r5,8
    6944:	d900a015 	stw	r4,640(sp)
    6948:	d9409f15 	stw	r5,636(sp)
    694c:	040000c4 	movi	r16,3
    6950:	003cf006 	br	5d14 <__svfscanf_r+0x1cc>
    6954:	df009d15 	stw	fp,628(sp)
    6958:	01400404 	movi	r5,16
    695c:	2039883a 	mov	fp,r4
    6960:	01000074 	movhi	r4,1
    6964:	2133e104 	addi	r4,r4,-12412
    6968:	b5808014 	ori	r22,r22,512
    696c:	d900a015 	stw	r4,640(sp)
    6970:	d9409f15 	stw	r5,636(sp)
    6974:	040000c4 	movi	r16,3
    6978:	003ce606 	br	5d14 <__svfscanf_r+0x1cc>
    697c:	df009d15 	stw	fp,628(sp)
    6980:	d9409d17 	ldw	r5,628(sp)
    6984:	2039883a 	mov	fp,r4
    6988:	d9005884 	addi	r4,sp,354
    698c:	000b1000 	call	b100 <__sccl>
    6990:	d8809d15 	stw	r2,628(sp)
    6994:	b5801014 	ori	r22,r22,64
    6998:	04000044 	movi	r16,1
    699c:	003cdd06 	br	5d14 <__svfscanf_r+0x1cc>
    69a0:	df009d15 	stw	fp,628(sp)
    69a4:	b5801014 	ori	r22,r22,64
    69a8:	2039883a 	mov	fp,r4
    69ac:	0021883a 	mov	r16,zero
    69b0:	003cd806 	br	5d14 <__svfscanf_r+0x1cc>
    69b4:	df009d15 	stw	fp,628(sp)
    69b8:	2039883a 	mov	fp,r4
    69bc:	003ccf06 	br	5cfc <__svfscanf_r+0x1b4>
    69c0:	85c00043 	ldbu	r23,1(r16)
    69c4:	b5800114 	ori	r22,r22,4
    69c8:	e021883a 	mov	r16,fp
    69cc:	003cbe06 	br	5cc8 <__svfscanf_r+0x180>
    69d0:	df009d15 	stw	fp,628(sp)
    69d4:	2039883a 	mov	fp,r4
    69d8:	01000074 	movhi	r4,1
    69dc:	21326e04 	addi	r4,r4,-13896
    69e0:	d900a015 	stw	r4,640(sp)
    69e4:	d8009f15 	stw	zero,636(sp)
    69e8:	040000c4 	movi	r16,3
    69ec:	003cc906 	br	5d14 <__svfscanf_r+0x1cc>
    69f0:	85c00043 	ldbu	r23,1(r16)
    69f4:	b8803fcc 	andi	r2,r23,255
    69f8:	1080201c 	xori	r2,r2,128
    69fc:	10bfe004 	addi	r2,r2,-128
    6a00:	11818f26 	beq	r2,r6,7040 <__svfscanf_r+0x14f8>
    6a04:	b5800054 	ori	r22,r22,1
    6a08:	e021883a 	mov	r16,fp
    6a0c:	003cae06 	br	5cc8 <__svfscanf_r+0x180>
    6a10:	df009d15 	stw	fp,628(sp)
    6a14:	b080040c 	andi	r2,r22,16
    6a18:	103cfa1e 	bne	r2,zero,5e04 <__svfscanf_r+0x2bc>
    6a1c:	b080010c 	andi	r2,r22,4
    6a20:	10018b26 	beq	r2,zero,7050 <__svfscanf_r+0x1508>
    6a24:	d9009c17 	ldw	r4,624(sp)
    6a28:	e021883a 	mov	r16,fp
    6a2c:	800d883a 	mov	r6,r16
    6a30:	20800017 	ldw	r2,0(r4)
    6a34:	21000104 	addi	r4,r4,4
    6a38:	d9009c15 	stw	r4,624(sp)
    6a3c:	1500000d 	sth	r20,0(r2)
    6a40:	003c7a06 	br	5c2c <__svfscanf_r+0xe4>
    6a44:	df009d15 	stw	fp,628(sp)
    6a48:	2039883a 	mov	fp,r4
    6a4c:	003fba06 	br	6938 <__svfscanf_r+0xdf0>
    6a50:	00800074 	movhi	r2,1
    6a54:	10b3e104 	addi	r2,r2,-12412
    6a58:	00c00404 	movi	r3,16
    6a5c:	df009d15 	stw	fp,628(sp)
    6a60:	b5808814 	ori	r22,r22,544
    6a64:	2039883a 	mov	fp,r4
    6a68:	d880a015 	stw	r2,640(sp)
    6a6c:	d8c09f15 	stw	r3,636(sp)
    6a70:	040000c4 	movi	r16,3
    6a74:	003ca706 	br	5d14 <__svfscanf_r+0x1cc>
    6a78:	013fff84 	movi	r4,-2
    6a7c:	113cdd26 	beq	r2,r4,5df4 <__svfscanf_r+0x2ac>
    6a80:	a429883a 	add	r20,r20,r16
    6a84:	e73fffc4 	addi	fp,fp,-1
    6a88:	b83cd826 	beq	r23,zero,5dec <__svfscanf_r+0x2a4>
    6a8c:	0021883a 	mov	r16,zero
    6a90:	003cd806 	br	5df4 <__svfscanf_r+0x2ac>
    6a94:	1085883a 	add	r2,r2,r2
    6a98:	1085883a 	add	r2,r2,r2
    6a9c:	01000034 	movhi	r4,0
    6aa0:	211aac04 	addi	r4,r4,27312
    6aa4:	1105883a 	add	r2,r2,r4
    6aa8:	10800017 	ldw	r2,0(r2)
    6aac:	1000683a 	jmp	r2
    6ab0:	00006ca4 	muli	zero,zero,434
    6ab4:	000062e8 	cmpgeui	zero,zero,395
    6ab8:	00006ca4 	muli	zero,zero,434
    6abc:	000062e8 	cmpgeui	zero,zero,395
    6ac0:	000062e8 	cmpgeui	zero,zero,395
    6ac4:	00006c7c 	xorhi	zero,zero,433
    6ac8:	00006c5c 	xori	zero,zero,433
    6acc:	00006c5c 	xori	zero,zero,433
    6ad0:	00006c5c 	xori	zero,zero,433
    6ad4:	00006c5c 	xori	zero,zero,433
    6ad8:	00006c5c 	xori	zero,zero,433
    6adc:	00006c5c 	xori	zero,zero,433
    6ae0:	00006c5c 	xori	zero,zero,433
    6ae4:	00006c3c 	xorhi	zero,zero,432
    6ae8:	00006c3c 	xorhi	zero,zero,432
    6aec:	000062e8 	cmpgeui	zero,zero,395
    6af0:	000062e8 	cmpgeui	zero,zero,395
    6af4:	000062e8 	cmpgeui	zero,zero,395
    6af8:	000062e8 	cmpgeui	zero,zero,395
    6afc:	000062e8 	cmpgeui	zero,zero,395
    6b00:	000062e8 	cmpgeui	zero,zero,395
    6b04:	000062e8 	cmpgeui	zero,zero,395
    6b08:	00006c28 	cmpgeui	zero,zero,432
    6b0c:	00006c28 	cmpgeui	zero,zero,432
    6b10:	00006c28 	cmpgeui	zero,zero,432
    6b14:	00006c28 	cmpgeui	zero,zero,432
    6b18:	00006c28 	cmpgeui	zero,zero,432
    6b1c:	00006c28 	cmpgeui	zero,zero,432
    6b20:	000062e8 	cmpgeui	zero,zero,395
    6b24:	000062e8 	cmpgeui	zero,zero,395
    6b28:	000062e8 	cmpgeui	zero,zero,395
    6b2c:	000062e8 	cmpgeui	zero,zero,395
    6b30:	000062e8 	cmpgeui	zero,zero,395
    6b34:	000062e8 	cmpgeui	zero,zero,395
    6b38:	000062e8 	cmpgeui	zero,zero,395
    6b3c:	000062e8 	cmpgeui	zero,zero,395
    6b40:	000062e8 	cmpgeui	zero,zero,395
    6b44:	000062e8 	cmpgeui	zero,zero,395
    6b48:	000062e8 	cmpgeui	zero,zero,395
    6b4c:	000062e8 	cmpgeui	zero,zero,395
    6b50:	000062e8 	cmpgeui	zero,zero,395
    6b54:	000062e8 	cmpgeui	zero,zero,395
    6b58:	000062e8 	cmpgeui	zero,zero,395
    6b5c:	000062e8 	cmpgeui	zero,zero,395
    6b60:	000062e8 	cmpgeui	zero,zero,395
    6b64:	00006be8 	cmpgeui	zero,zero,431
    6b68:	000062e8 	cmpgeui	zero,zero,395
    6b6c:	000062e8 	cmpgeui	zero,zero,395
    6b70:	000062e8 	cmpgeui	zero,zero,395
    6b74:	000062e8 	cmpgeui	zero,zero,395
    6b78:	000062e8 	cmpgeui	zero,zero,395
    6b7c:	000062e8 	cmpgeui	zero,zero,395
    6b80:	000062e8 	cmpgeui	zero,zero,395
    6b84:	000062e8 	cmpgeui	zero,zero,395
    6b88:	00006c28 	cmpgeui	zero,zero,432
    6b8c:	00006c28 	cmpgeui	zero,zero,432
    6b90:	00006c28 	cmpgeui	zero,zero,432
    6b94:	00006c28 	cmpgeui	zero,zero,432
    6b98:	00006c28 	cmpgeui	zero,zero,432
    6b9c:	00006c28 	cmpgeui	zero,zero,432
    6ba0:	000062e8 	cmpgeui	zero,zero,395
    6ba4:	000062e8 	cmpgeui	zero,zero,395
    6ba8:	000062e8 	cmpgeui	zero,zero,395
    6bac:	000062e8 	cmpgeui	zero,zero,395
    6bb0:	000062e8 	cmpgeui	zero,zero,395
    6bb4:	000062e8 	cmpgeui	zero,zero,395
    6bb8:	000062e8 	cmpgeui	zero,zero,395
    6bbc:	000062e8 	cmpgeui	zero,zero,395
    6bc0:	000062e8 	cmpgeui	zero,zero,395
    6bc4:	000062e8 	cmpgeui	zero,zero,395
    6bc8:	000062e8 	cmpgeui	zero,zero,395
    6bcc:	000062e8 	cmpgeui	zero,zero,395
    6bd0:	000062e8 	cmpgeui	zero,zero,395
    6bd4:	000062e8 	cmpgeui	zero,zero,395
    6bd8:	000062e8 	cmpgeui	zero,zero,395
    6bdc:	000062e8 	cmpgeui	zero,zero,395
    6be0:	000062e8 	cmpgeui	zero,zero,395
    6be4:	00006be8 	cmpgeui	zero,zero,431
    6be8:	b081800c 	andi	r2,r22,1536
    6bec:	11fdbe1e 	bne	r2,r7,62e8 <__svfscanf_r+0x7a0>
    6bf0:	b1ac703a 	and	r22,r22,r6
    6bf4:	b5814014 	ori	r22,r22,1280
    6bf8:	02400404 	movi	r9,16
    6bfc:	a9400005 	stb	r5,0(r21)
    6c00:	ad400044 	addi	r21,r21,1
    6c04:	98800117 	ldw	r2,4(r19)
    6c08:	10bfffc4 	addi	r2,r2,-1
    6c0c:	98800115 	stw	r2,4(r19)
    6c10:	00803b0e 	bge	zero,r2,6d00 <__svfscanf_r+0x11b8>
    6c14:	42000044 	addi	r8,r8,1
    6c18:	9a000015 	stw	r8,0(r19)
    6c1c:	e73fffc4 	addi	fp,fp,-1
    6c20:	e03dac1e 	bne	fp,zero,62d4 <__svfscanf_r+0x78c>
    6c24:	003db006 	br	62e8 <__svfscanf_r+0x7a0>
    6c28:	00800284 	movi	r2,10
    6c2c:	127dae0e 	bge	r2,r9,62e8 <__svfscanf_r+0x7a0>
    6c30:	00bd1fc4 	movi	r2,-2945
    6c34:	b0ac703a 	and	r22,r22,r2
    6c38:	003ff006 	br	6bfc <__svfscanf_r+0x10b4>
    6c3c:	4a53883a 	add	r9,r9,r9
    6c40:	01000074 	movhi	r4,1
    6c44:	21108584 	addi	r4,r4,16918
    6c48:	2245883a 	add	r2,r4,r9
    6c4c:	1240000f 	ldh	r9,0(r2)
    6c50:	00800204 	movi	r2,8
    6c54:	127ff616 	blt	r2,r9,6c30 <__svfscanf_r+0x10e8>
    6c58:	003da306 	br	62e8 <__svfscanf_r+0x7a0>
    6c5c:	4a53883a 	add	r9,r9,r9
    6c60:	01000074 	movhi	r4,1
    6c64:	21108584 	addi	r4,r4,16918
    6c68:	2245883a 	add	r2,r4,r9
    6c6c:	1240000f 	ldh	r9,0(r2)
    6c70:	00bd1fc4 	movi	r2,-2945
    6c74:	b0ac703a 	and	r22,r22,r2
    6c78:	003fe006 	br	6bfc <__svfscanf_r+0x10b4>
    6c7c:	b082000c 	andi	r2,r22,2048
    6c80:	103fde26 	beq	r2,zero,6bfc <__svfscanf_r+0x10b4>
    6c84:	4800021e 	bne	r9,zero,6c90 <__svfscanf_r+0x1148>
    6c88:	b5808014 	ori	r22,r22,512
    6c8c:	02400204 	movi	r9,8
    6c90:	b081000c 	andi	r2,r22,1024
    6c94:	10009f26 	beq	r2,zero,6f14 <__svfscanf_r+0x13cc>
    6c98:	00be9fc4 	movi	r2,-1409
    6c9c:	b0ac703a 	and	r22,r22,r2
    6ca0:	003fd606 	br	6bfc <__svfscanf_r+0x10b4>
    6ca4:	b080200c 	andi	r2,r22,128
    6ca8:	103d8f26 	beq	r2,zero,62e8 <__svfscanf_r+0x7a0>
    6cac:	00bfdfc4 	movi	r2,-129
    6cb0:	b0ac703a 	and	r22,r22,r2
    6cb4:	003fd106 	br	6bfc <__svfscanf_r+0x10b4>
    6cb8:	8809883a 	mov	r4,r17
    6cbc:	980b883a 	mov	r5,r19
    6cc0:	d8c0a815 	stw	r3,672(sp)
    6cc4:	d980a915 	stw	r6,676(sp)
    6cc8:	dac0a715 	stw	r11,668(sp)
    6ccc:	db00a515 	stw	r12,660(sp)
    6cd0:	db80a415 	stw	r14,656(sp)
    6cd4:	dbc0a615 	stw	r15,664(sp)
    6cd8:	000372c0 	call	372c <__srefill_r>
    6cdc:	d8c0a817 	ldw	r3,672(sp)
    6ce0:	d980a917 	ldw	r6,676(sp)
    6ce4:	dac0a717 	ldw	r11,668(sp)
    6ce8:	db00a517 	ldw	r12,660(sp)
    6cec:	db80a417 	ldw	r14,656(sp)
    6cf0:	dbc0a617 	ldw	r15,664(sp)
    6cf4:	103d1e1e 	bne	r2,zero,6170 <__svfscanf_r+0x628>
    6cf8:	e03d181e 	bne	fp,zero,615c <__svfscanf_r+0x614>
    6cfc:	003d1c06 	br	6170 <__svfscanf_r+0x628>
    6d00:	8809883a 	mov	r4,r17
    6d04:	980b883a 	mov	r5,r19
    6d08:	d8c0a815 	stw	r3,672(sp)
    6d0c:	d980a915 	stw	r6,676(sp)
    6d10:	d9c0a415 	stw	r7,656(sp)
    6d14:	da40a515 	stw	r9,660(sp)
    6d18:	000372c0 	call	372c <__srefill_r>
    6d1c:	d8c0a817 	ldw	r3,672(sp)
    6d20:	d980a917 	ldw	r6,676(sp)
    6d24:	d9c0a417 	ldw	r7,656(sp)
    6d28:	da40a517 	ldw	r9,660(sp)
    6d2c:	103fbb26 	beq	r2,zero,6c1c <__svfscanf_r+0x10d4>
    6d30:	003d6d06 	br	62e8 <__svfscanf_r+0x7a0>
    6d34:	a429883a 	add	r20,r20,r16
    6d38:	e73fffc4 	addi	fp,fp,-1
    6d3c:	b000fc1e 	bne	r22,zero,7130 <__svfscanf_r+0x15e8>
    6d40:	ad400104 	addi	r21,r21,4
    6d44:	0021883a 	mov	r16,zero
    6d48:	98800117 	ldw	r2,4(r19)
    6d4c:	00bd8716 	blt	zero,r2,636c <__svfscanf_r+0x824>
    6d50:	8809883a 	mov	r4,r17
    6d54:	980b883a 	mov	r5,r19
    6d58:	000372c0 	call	372c <__srefill_r>
    6d5c:	103d8326 	beq	r2,zero,636c <__svfscanf_r+0x824>
    6d60:	803caf1e 	bne	r16,zero,6020 <__svfscanf_r+0x4d8>
    6d64:	b03c271e 	bne	r22,zero,5e04 <__svfscanf_r+0x2bc>
    6d68:	d8809e17 	ldw	r2,632(sp)
    6d6c:	dc009d17 	ldw	r16,628(sp)
    6d70:	a8000015 	stw	zero,0(r21)
    6d74:	10800044 	addi	r2,r2,1
    6d78:	d8809e15 	stw	r2,632(sp)
    6d7c:	800d883a 	mov	r6,r16
    6d80:	003baa06 	br	5c2c <__svfscanf_r+0xe4>
    6d84:	857ca626 	beq	r16,r21,6020 <__svfscanf_r+0x4d8>
    6d88:	ac21c83a 	sub	r16,r21,r16
    6d8c:	803bab26 	beq	r16,zero,5c3c <__svfscanf_r+0xf4>
    6d90:	d8809e17 	ldw	r2,632(sp)
    6d94:	a8000005 	stb	zero,0(r21)
    6d98:	ddc09c15 	stw	r23,624(sp)
    6d9c:	10800044 	addi	r2,r2,1
    6da0:	d8809e15 	stw	r2,632(sp)
    6da4:	003d6106 	br	632c <__svfscanf_r+0x7e4>
    6da8:	010000c4 	movi	r4,3
    6dac:	113e8526 	beq	r2,r4,67c4 <__svfscanf_r+0xc7c>
    6db0:	01000144 	movi	r4,5
    6db4:	113cee1e 	bne	r2,r4,6170 <__svfscanf_r+0x628>
    6db8:	84000044 	addi	r16,r16,1
    6dbc:	003e4906 	br	66e4 <__svfscanf_r+0xb9c>
    6dc0:	00800084 	movi	r2,2
    6dc4:	30be781e 	bne	r6,r2,67a8 <__svfscanf_r+0xc60>
    6dc8:	018000c4 	movi	r6,3
    6dcc:	003e4506 	br	66e4 <__svfscanf_r+0xb9c>
    6dd0:	d8c0a017 	ldw	r3,640(sp)
    6dd4:	d9c09f17 	ldw	r7,636(sp)
    6dd8:	8809883a 	mov	r4,r17
    6ddc:	d9400104 	addi	r5,sp,4
    6de0:	000d883a 	mov	r6,zero
    6de4:	a8000005 	stb	zero,0(r21)
    6de8:	183ee83a 	callr	r3
    6dec:	b0c0080c 	andi	r3,r22,32
    6df0:	1800391e 	bne	r3,zero,6ed8 <__svfscanf_r+0x1390>
    6df4:	b0c0010c 	andi	r3,r22,4
    6df8:	1800ac26 	beq	r3,zero,70ac <__svfscanf_r+0x1564>
    6dfc:	d9409c17 	ldw	r5,624(sp)
    6e00:	28c00017 	ldw	r3,0(r5)
    6e04:	29400104 	addi	r5,r5,4
    6e08:	d9409c15 	stw	r5,624(sp)
    6e0c:	1880000d 	sth	r2,0(r3)
    6e10:	d8809e17 	ldw	r2,632(sp)
    6e14:	10800044 	addi	r2,r2,1
    6e18:	d8809e15 	stw	r2,632(sp)
    6e1c:	003d4006 	br	6320 <__svfscanf_r+0x7d8>
    6e20:	d8c09c17 	ldw	r3,624(sp)
    6e24:	98800017 	ldw	r2,0(r19)
    6e28:	1d400017 	ldw	r21,0(r3)
    6e2c:	1d800104 	addi	r22,r3,4
    6e30:	a821883a 	mov	r16,r21
    6e34:	10c00003 	ldbu	r3,0(r2)
    6e38:	91400017 	ldw	r5,0(r18)
    6e3c:	28c7883a 	add	r3,r5,r3
    6e40:	18c00003 	ldbu	r3,0(r3)
    6e44:	18c0020c 	andi	r3,r3,8
    6e48:	18c03fcc 	andi	r3,r3,255
    6e4c:	18c0201c 	xori	r3,r3,128
    6e50:	18ffe004 	addi	r3,r3,-128
    6e54:	1800121e 	bne	r3,zero,6ea0 <__svfscanf_r+0x1358>
    6e58:	98c00117 	ldw	r3,4(r19)
    6e5c:	10800044 	addi	r2,r2,1
    6e60:	84000044 	addi	r16,r16,1
    6e64:	18ffffc4 	addi	r3,r3,-1
    6e68:	98c00115 	stw	r3,4(r19)
    6e6c:	10ffffc3 	ldbu	r3,-1(r2)
    6e70:	e73fffc4 	addi	fp,fp,-1
    6e74:	80ffffc5 	stb	r3,-1(r16)
    6e78:	98800015 	stw	r2,0(r19)
    6e7c:	e0000826 	beq	fp,zero,6ea0 <__svfscanf_r+0x1358>
    6e80:	98c00117 	ldw	r3,4(r19)
    6e84:	00ffeb16 	blt	zero,r3,6e34 <__svfscanf_r+0x12ec>
    6e88:	8809883a 	mov	r4,r17
    6e8c:	980b883a 	mov	r5,r19
    6e90:	000372c0 	call	372c <__srefill_r>
    6e94:	1000021e 	bne	r2,zero,6ea0 <__svfscanf_r+0x1358>
    6e98:	98800017 	ldw	r2,0(r19)
    6e9c:	003fe506 	br	6e34 <__svfscanf_r+0x12ec>
    6ea0:	d8809e17 	ldw	r2,632(sp)
    6ea4:	856bc83a 	sub	r21,r16,r21
    6ea8:	80000005 	stb	zero,0(r16)
    6eac:	dc009d17 	ldw	r16,628(sp)
    6eb0:	10800044 	addi	r2,r2,1
    6eb4:	a569883a 	add	r20,r20,r21
    6eb8:	d8809e15 	stw	r2,632(sp)
    6ebc:	dd809c15 	stw	r22,624(sp)
    6ec0:	800d883a 	mov	r6,r16
    6ec4:	003b5906 	br	5c2c <__svfscanf_r+0xe4>
    6ec8:	dd409b04 	addi	r21,sp,620
    6ecc:	003d2506 	br	6364 <__svfscanf_r+0x81c>
    6ed0:	002d883a 	mov	r22,zero
    6ed4:	003ba206 	br	5d60 <__svfscanf_r+0x218>
    6ed8:	d9009c17 	ldw	r4,624(sp)
    6edc:	20c00017 	ldw	r3,0(r4)
    6ee0:	21000104 	addi	r4,r4,4
    6ee4:	d9009c15 	stw	r4,624(sp)
    6ee8:	18800015 	stw	r2,0(r3)
    6eec:	003fc806 	br	6e10 <__svfscanf_r+0x12c8>
    6ef0:	b280008c 	andi	r10,r22,2
    6ef4:	50008126 	beq	r10,zero,70fc <__svfscanf_r+0x15b4>
    6ef8:	d8c09c17 	ldw	r3,624(sp)
    6efc:	18800017 	ldw	r2,0(r3)
    6f00:	18c00104 	addi	r3,r3,4
    6f04:	d8c09c15 	stw	r3,624(sp)
    6f08:	15400015 	stw	r21,0(r2)
    6f0c:	15c00115 	stw	r23,4(r2)
    6f10:	003cde06 	br	628c <__svfscanf_r+0x744>
    6f14:	00bf1fc4 	movi	r2,-897
    6f18:	b0ac703a 	and	r22,r22,r2
    6f1c:	18000226 	beq	r3,zero,6f28 <__svfscanf_r+0x13e0>
    6f20:	18ffffc4 	addi	r3,r3,-1
    6f24:	e7000044 	addi	fp,fp,1
    6f28:	84000044 	addi	r16,r16,1
    6f2c:	003f3506 	br	6c04 <__svfscanf_r+0x10bc>
    6f30:	803cfe1e 	bne	r16,zero,632c <__svfscanf_r+0x7e4>
    6f34:	003b4106 	br	5c3c <__svfscanf_r+0xf4>
    6f38:	d8c09c17 	ldw	r3,624(sp)
    6f3c:	01400044 	movi	r5,1
    6f40:	e00d883a 	mov	r6,fp
    6f44:	19000017 	ldw	r4,0(r3)
    6f48:	980f883a 	mov	r7,r19
    6f4c:	0001f080 	call	1f08 <fread>
    6f50:	d9009c17 	ldw	r4,624(sp)
    6f54:	20c00104 	addi	r3,r4,4
    6f58:	103c3126 	beq	r2,zero,6020 <__svfscanf_r+0x4d8>
    6f5c:	1529883a 	add	r20,r2,r20
    6f60:	d8809e17 	ldw	r2,632(sp)
    6f64:	dc009d17 	ldw	r16,628(sp)
    6f68:	d8c09c15 	stw	r3,624(sp)
    6f6c:	10800044 	addi	r2,r2,1
    6f70:	d8809e15 	stw	r2,632(sp)
    6f74:	800d883a 	mov	r6,r16
    6f78:	003b2c06 	br	5c2c <__svfscanf_r+0xe4>
    6f7c:	00ffff84 	movi	r3,-2
    6f80:	10ff7126 	beq	r2,r3,6d48 <__svfscanf_r+0x1200>
    6f84:	a9000017 	ldw	r4,0(r21)
    6f88:	000934c0 	call	934c <iswspace>
    6f8c:	103f6926 	beq	r2,zero,6d34 <__svfscanf_r+0x11ec>
    6f90:	803f7426 	beq	r16,zero,6d64 <__svfscanf_r+0x121c>
    6f94:	843fffc4 	addi	r16,r16,-1
    6f98:	d9000104 	addi	r4,sp,4
    6f9c:	2405883a 	add	r2,r4,r16
    6fa0:	11400003 	ldbu	r5,0(r2)
    6fa4:	8809883a 	mov	r4,r17
    6fa8:	980d883a 	mov	r6,r19
    6fac:	000d6d00 	call	d6d0 <_ungetc_r>
    6fb0:	803ff81e 	bne	r16,zero,6f94 <__svfscanf_r+0x144c>
    6fb4:	003f6b06 	br	6d64 <__svfscanf_r+0x121c>
    6fb8:	99000017 	ldw	r4,0(r19)
    6fbc:	1705c83a 	sub	r2,r2,fp
    6fc0:	8721883a 	add	r16,r16,fp
    6fc4:	2707883a 	add	r3,r4,fp
    6fc8:	98800115 	stw	r2,4(r19)
    6fcc:	98c00015 	stw	r3,0(r19)
    6fd0:	003cd606 	br	632c <__svfscanf_r+0x7e4>
    6fd4:	d880a117 	ldw	r2,644(sp)
    6fd8:	000d883a 	mov	r6,zero
    6fdc:	8809883a 	mov	r4,r17
    6fe0:	11400044 	addi	r5,r2,1
    6fe4:	01c00284 	movi	r7,10
    6fe8:	000c9b80 	call	c9b8 <_strtol_r>
    6fec:	d8c0a317 	ldw	r3,652(sp)
    6ff0:	10cdc83a 	sub	r6,r2,r3
    6ff4:	d900a117 	ldw	r4,644(sp)
    6ff8:	d88055c4 	addi	r2,sp,343
    6ffc:	20800236 	bltu	r4,r2,7008 <__svfscanf_r+0x14c0>
    7000:	d9005584 	addi	r4,sp,342
    7004:	d900a115 	stw	r4,644(sp)
    7008:	d900a117 	ldw	r4,644(sp)
    700c:	01400074 	movhi	r5,1
    7010:	29508404 	addi	r5,r5,16912
    7014:	000b2240 	call	b224 <sprintf>
    7018:	003c8e06 	br	6254 <__svfscanf_r+0x70c>
    701c:	b32c703a 	and	r22,r22,r12
    7020:	01800044 	movi	r6,1
    7024:	003daf06 	br	66e4 <__svfscanf_r+0xb9c>
    7028:	d8c0a217 	ldw	r3,648(sp)
    702c:	a8ebc83a 	sub	r21,r21,r3
    7030:	054dc83a 	sub	r6,zero,r21
    7034:	a83c8726 	beq	r21,zero,6254 <__svfscanf_r+0x70c>
    7038:	ddc0a115 	stw	r23,644(sp)
    703c:	003fed06 	br	6ff4 <__svfscanf_r+0x14ac>
    7040:	85c00083 	ldbu	r23,2(r16)
    7044:	b5800094 	ori	r22,r22,2
    7048:	84000084 	addi	r16,r16,2
    704c:	003b1e06 	br	5cc8 <__svfscanf_r+0x180>
    7050:	b080004c 	andi	r2,r22,1
    7054:	10000d1e 	bne	r2,zero,708c <__svfscanf_r+0x1544>
    7058:	b580008c 	andi	r22,r22,2
    705c:	b0000b26 	beq	r22,zero,708c <__svfscanf_r+0x1544>
    7060:	d8c09c17 	ldw	r3,624(sp)
    7064:	d9009c17 	ldw	r4,624(sp)
    7068:	dc009d17 	ldw	r16,628(sp)
    706c:	18800017 	ldw	r2,0(r3)
    7070:	a007d7fa 	srai	r3,r20,31
    7074:	21000104 	addi	r4,r4,4
    7078:	15000015 	stw	r20,0(r2)
    707c:	10c00115 	stw	r3,4(r2)
    7080:	d9009c15 	stw	r4,624(sp)
    7084:	800d883a 	mov	r6,r16
    7088:	003ae806 	br	5c2c <__svfscanf_r+0xe4>
    708c:	d9409c17 	ldw	r5,624(sp)
    7090:	dc009d17 	ldw	r16,628(sp)
    7094:	28800017 	ldw	r2,0(r5)
    7098:	29400104 	addi	r5,r5,4
    709c:	d9409c15 	stw	r5,624(sp)
    70a0:	15000015 	stw	r20,0(r2)
    70a4:	800d883a 	mov	r6,r16
    70a8:	003ae006 	br	5c2c <__svfscanf_r+0xe4>
    70ac:	b0c0004c 	andi	r3,r22,1
    70b0:	183f891e 	bne	r3,zero,6ed8 <__svfscanf_r+0x1390>
    70b4:	b580008c 	andi	r22,r22,2
    70b8:	b03f8726 	beq	r22,zero,6ed8 <__svfscanf_r+0x1390>
    70bc:	d940a017 	ldw	r5,640(sp)
    70c0:	00800074 	movhi	r2,1
    70c4:	10b3e104 	addi	r2,r2,-12412
    70c8:	8809883a 	mov	r4,r17
    70cc:	28802626 	beq	r5,r2,7168 <__svfscanf_r+0x1620>
    70d0:	d9c09f17 	ldw	r7,636(sp)
    70d4:	d9400104 	addi	r5,sp,4
    70d8:	000d883a 	mov	r6,zero
    70dc:	000cc540 	call	cc54 <_strtoll_r>
    70e0:	d9409c17 	ldw	r5,624(sp)
    70e4:	29000017 	ldw	r4,0(r5)
    70e8:	29400104 	addi	r5,r5,4
    70ec:	d9409c15 	stw	r5,624(sp)
    70f0:	20800015 	stw	r2,0(r4)
    70f4:	20c00115 	stw	r3,4(r4)
    70f8:	003f4506 	br	6e10 <__svfscanf_r+0x12c8>
    70fc:	d8809c17 	ldw	r2,624(sp)
    7100:	a809883a 	mov	r4,r21
    7104:	180b883a 	mov	r5,r3
    7108:	14000104 	addi	r16,r2,4
    710c:	15800017 	ldw	r22,0(r2)
    7110:	000b0d40 	call	b0d4 <__isnand>
    7114:	1000311e 	bne	r2,zero,71dc <__svfscanf_r+0x1694>
    7118:	a809883a 	mov	r4,r21
    711c:	b80b883a 	mov	r5,r23
    7120:	00101e00 	call	101e0 <__truncdfsf2>
    7124:	b0800015 	stw	r2,0(r22)
    7128:	dc009c15 	stw	r16,624(sp)
    712c:	003c5706 	br	628c <__svfscanf_r+0x744>
    7130:	0021883a 	mov	r16,zero
    7134:	003f0406 	br	6d48 <__svfscanf_r+0x1200>
    7138:	d9400104 	addi	r5,sp,4
    713c:	9821883a 	mov	r16,r19
    7140:	2dfabe2e 	bgeu	r5,r23,5c3c <__svfscanf_r+0xf4>
    7144:	bcbfffc4 	addi	r18,r23,-1
    7148:	dcc000c4 	addi	r19,sp,3
    714c:	91400007 	ldb	r5,0(r18)
    7150:	8809883a 	mov	r4,r17
    7154:	94bfffc4 	addi	r18,r18,-1
    7158:	800d883a 	mov	r6,r16
    715c:	000d6d00 	call	d6d0 <_ungetc_r>
    7160:	94fffa1e 	bne	r18,r19,714c <__svfscanf_r+0x1604>
    7164:	003ab506 	br	5c3c <__svfscanf_r+0xf4>
    7168:	d9c09f17 	ldw	r7,636(sp)
    716c:	d9400104 	addi	r5,sp,4
    7170:	000d883a 	mov	r6,zero
    7174:	000d24c0 	call	d24c <_strtoull_r>
    7178:	003fd906 	br	70e0 <__svfscanf_r+0x1598>
    717c:	d9000104 	addi	r4,sp,4
    7180:	9821883a 	mov	r16,r19
    7184:	25faad2e 	bgeu	r4,r23,5c3c <__svfscanf_r+0xf4>
    7188:	bcbfffc4 	addi	r18,r23,-1
    718c:	dcc000c4 	addi	r19,sp,3
    7190:	91400007 	ldb	r5,0(r18)
    7194:	8809883a 	mov	r4,r17
    7198:	94bfffc4 	addi	r18,r18,-1
    719c:	800d883a 	mov	r6,r16
    71a0:	000d6d00 	call	d6d0 <_ungetc_r>
    71a4:	94fffa1e 	bne	r18,r19,7190 <__svfscanf_r+0x1648>
    71a8:	003aa406 	br	5c3c <__svfscanf_r+0xf4>
    71ac:	d8c00104 	addi	r3,sp,4
    71b0:	9821883a 	mov	r16,r19
    71b4:	1dfaa12e 	bgeu	r3,r23,5c3c <__svfscanf_r+0xf4>
    71b8:	bcbfffc4 	addi	r18,r23,-1
    71bc:	dcc000c4 	addi	r19,sp,3
    71c0:	91400007 	ldb	r5,0(r18)
    71c4:	8809883a 	mov	r4,r17
    71c8:	94bfffc4 	addi	r18,r18,-1
    71cc:	800d883a 	mov	r6,r16
    71d0:	000d6d00 	call	d6d0 <_ungetc_r>
    71d4:	94fffa1e 	bne	r18,r19,71c0 <__svfscanf_r+0x1678>
    71d8:	003a9806 	br	5c3c <__svfscanf_r+0xf4>
    71dc:	0009883a 	mov	r4,zero
    71e0:	000b1c40 	call	b1c4 <nanf>
    71e4:	b0800015 	stw	r2,0(r22)
    71e8:	dc009c15 	stw	r16,624(sp)
    71ec:	003c2706 	br	628c <__svfscanf_r+0x744>

000071f0 <_vfscanf_r>:
    71f0:	defffb04 	addi	sp,sp,-20
    71f4:	dc000315 	stw	r16,12(sp)
    71f8:	dfc00415 	stw	ra,16(sp)
    71fc:	2021883a 	mov	r16,r4
    7200:	20000926 	beq	r4,zero,7228 <_vfscanf_r+0x38>
    7204:	20800e17 	ldw	r2,56(r4)
    7208:	1000071e 	bne	r2,zero,7228 <_vfscanf_r+0x38>
    720c:	d9400015 	stw	r5,0(sp)
    7210:	d9800115 	stw	r6,4(sp)
    7214:	d9c00215 	stw	r7,8(sp)
    7218:	00019380 	call	1938 <__sinit>
    721c:	d9c00217 	ldw	r7,8(sp)
    7220:	d9800117 	ldw	r6,4(sp)
    7224:	d9400017 	ldw	r5,0(sp)
    7228:	8009883a 	mov	r4,r16
    722c:	dfc00417 	ldw	ra,16(sp)
    7230:	dc000317 	ldw	r16,12(sp)
    7234:	dec00504 	addi	sp,sp,20
    7238:	0005b481 	jmpi	5b48 <__svfscanf_r>

0000723c <__svfscanf>:
    723c:	00800074 	movhi	r2,1
    7240:	1098ae04 	addi	r2,r2,25272
    7244:	2007883a 	mov	r3,r4
    7248:	11000017 	ldw	r4,0(r2)
    724c:	2805883a 	mov	r2,r5
    7250:	300f883a 	mov	r7,r6
    7254:	180b883a 	mov	r5,r3
    7258:	100d883a 	mov	r6,r2
    725c:	0005b481 	jmpi	5b48 <__svfscanf_r>

00007260 <vfscanf>:
    7260:	defffb04 	addi	sp,sp,-20
    7264:	dc000115 	stw	r16,4(sp)
    7268:	04000074 	movhi	r16,1
    726c:	8418ae04 	addi	r16,r16,25272
    7270:	80800017 	ldw	r2,0(r16)
    7274:	dc800315 	stw	r18,12(sp)
    7278:	dc400215 	stw	r17,8(sp)
    727c:	dfc00415 	stw	ra,16(sp)
    7280:	2025883a 	mov	r18,r4
    7284:	2823883a 	mov	r17,r5
    7288:	300f883a 	mov	r7,r6
    728c:	10000726 	beq	r2,zero,72ac <vfscanf+0x4c>
    7290:	10c00e17 	ldw	r3,56(r2)
    7294:	1800051e 	bne	r3,zero,72ac <vfscanf+0x4c>
    7298:	1009883a 	mov	r4,r2
    729c:	d9800015 	stw	r6,0(sp)
    72a0:	00019380 	call	1938 <__sinit>
    72a4:	80800017 	ldw	r2,0(r16)
    72a8:	d9c00017 	ldw	r7,0(sp)
    72ac:	1009883a 	mov	r4,r2
    72b0:	900b883a 	mov	r5,r18
    72b4:	880d883a 	mov	r6,r17
    72b8:	dfc00417 	ldw	ra,16(sp)
    72bc:	dc800317 	ldw	r18,12(sp)
    72c0:	dc400217 	ldw	r17,8(sp)
    72c4:	dc000117 	ldw	r16,4(sp)
    72c8:	dec00504 	addi	sp,sp,20
    72cc:	0005b481 	jmpi	5b48 <__svfscanf_r>

000072d0 <_write_r>:
    72d0:	defffd04 	addi	sp,sp,-12
    72d4:	dc400115 	stw	r17,4(sp)
    72d8:	dc000015 	stw	r16,0(sp)
    72dc:	2023883a 	mov	r17,r4
    72e0:	04000074 	movhi	r16,1
    72e4:	841fac04 	addi	r16,r16,32432
    72e8:	2809883a 	mov	r4,r5
    72ec:	300b883a 	mov	r5,r6
    72f0:	380d883a 	mov	r6,r7
    72f4:	dfc00215 	stw	ra,8(sp)
    72f8:	80000015 	stw	zero,0(r16)
    72fc:	00117f40 	call	117f4 <write>
    7300:	00ffffc4 	movi	r3,-1
    7304:	10c00526 	beq	r2,r3,731c <_write_r+0x4c>
    7308:	dfc00217 	ldw	ra,8(sp)
    730c:	dc400117 	ldw	r17,4(sp)
    7310:	dc000017 	ldw	r16,0(sp)
    7314:	dec00304 	addi	sp,sp,12
    7318:	f800283a 	ret
    731c:	80c00017 	ldw	r3,0(r16)
    7320:	183ff926 	beq	r3,zero,7308 <_write_r+0x38>
    7324:	88c00015 	stw	r3,0(r17)
    7328:	dfc00217 	ldw	ra,8(sp)
    732c:	dc400117 	ldw	r17,4(sp)
    7330:	dc000017 	ldw	r16,0(sp)
    7334:	dec00304 	addi	sp,sp,12
    7338:	f800283a 	ret

0000733c <__swsetup_r>:
    733c:	00800074 	movhi	r2,1
    7340:	1098ae04 	addi	r2,r2,25272
    7344:	10800017 	ldw	r2,0(r2)
    7348:	defffd04 	addi	sp,sp,-12
    734c:	dc400115 	stw	r17,4(sp)
    7350:	dc000015 	stw	r16,0(sp)
    7354:	dfc00215 	stw	ra,8(sp)
    7358:	2023883a 	mov	r17,r4
    735c:	2821883a 	mov	r16,r5
    7360:	10000226 	beq	r2,zero,736c <__swsetup_r+0x30>
    7364:	10c00e17 	ldw	r3,56(r2)
    7368:	18003d26 	beq	r3,zero,7460 <__swsetup_r+0x124>
    736c:	8080030b 	ldhu	r2,12(r16)
    7370:	10c0020c 	andi	r3,r2,8
    7374:	18ffffcc 	andi	r3,r3,65535
    7378:	18e0001c 	xori	r3,r3,32768
    737c:	18e00004 	addi	r3,r3,-32768
    7380:	18001226 	beq	r3,zero,73cc <__swsetup_r+0x90>
    7384:	80c00417 	ldw	r3,16(r16)
    7388:	18001f26 	beq	r3,zero,7408 <__swsetup_r+0xcc>
    738c:	1100004c 	andi	r4,r2,1
    7390:	2000261e 	bne	r4,zero,742c <__swsetup_r+0xf0>
    7394:	1080008c 	andi	r2,r2,2
    7398:	10bfffcc 	andi	r2,r2,65535
    739c:	10a0001c 	xori	r2,r2,32768
    73a0:	10a00004 	addi	r2,r2,-32768
    73a4:	1000311e 	bne	r2,zero,746c <__swsetup_r+0x130>
    73a8:	80800517 	ldw	r2,20(r16)
    73ac:	80800215 	stw	r2,8(r16)
    73b0:	18002326 	beq	r3,zero,7440 <__swsetup_r+0x104>
    73b4:	0005883a 	mov	r2,zero
    73b8:	dfc00217 	ldw	ra,8(sp)
    73bc:	dc400117 	ldw	r17,4(sp)
    73c0:	dc000017 	ldw	r16,0(sp)
    73c4:	dec00304 	addi	sp,sp,12
    73c8:	f800283a 	ret
    73cc:	10c0040c 	andi	r3,r2,16
    73d0:	18ffffcc 	andi	r3,r3,65535
    73d4:	18e0001c 	xori	r3,r3,32768
    73d8:	18e00004 	addi	r3,r3,-32768
    73dc:	18001e26 	beq	r3,zero,7458 <__swsetup_r+0x11c>
    73e0:	10c0010c 	andi	r3,r2,4
    73e4:	18ffffcc 	andi	r3,r3,65535
    73e8:	18e0001c 	xori	r3,r3,32768
    73ec:	18e00004 	addi	r3,r3,-32768
    73f0:	1800211e 	bne	r3,zero,7478 <__swsetup_r+0x13c>
    73f4:	80c00417 	ldw	r3,16(r16)
    73f8:	11400214 	ori	r5,r2,8
    73fc:	8140030d 	sth	r5,12(r16)
    7400:	2805883a 	mov	r2,r5
    7404:	183fe11e 	bne	r3,zero,738c <__swsetup_r+0x50>
    7408:	1140a00c 	andi	r5,r2,640
    740c:	01008004 	movi	r4,512
    7410:	293fde26 	beq	r5,r4,738c <__swsetup_r+0x50>
    7414:	8809883a 	mov	r4,r17
    7418:	800b883a 	mov	r5,r16
    741c:	0002a100 	call	2a10 <__smakebuf_r>
    7420:	8080030b 	ldhu	r2,12(r16)
    7424:	80c00417 	ldw	r3,16(r16)
    7428:	003fd806 	br	738c <__swsetup_r+0x50>
    742c:	80800517 	ldw	r2,20(r16)
    7430:	80000215 	stw	zero,8(r16)
    7434:	0085c83a 	sub	r2,zero,r2
    7438:	80800615 	stw	r2,24(r16)
    743c:	183fdd1e 	bne	r3,zero,73b4 <__swsetup_r+0x78>
    7440:	8080030b 	ldhu	r2,12(r16)
    7444:	1080200c 	andi	r2,r2,128
    7448:	10bfffcc 	andi	r2,r2,65535
    744c:	10a0001c 	xori	r2,r2,32768
    7450:	10a00004 	addi	r2,r2,-32768
    7454:	103fd826 	beq	r2,zero,73b8 <__swsetup_r+0x7c>
    7458:	00bfffc4 	movi	r2,-1
    745c:	003fd606 	br	73b8 <__swsetup_r+0x7c>
    7460:	1009883a 	mov	r4,r2
    7464:	00019380 	call	1938 <__sinit>
    7468:	003fc006 	br	736c <__swsetup_r+0x30>
    746c:	0005883a 	mov	r2,zero
    7470:	80800215 	stw	r2,8(r16)
    7474:	003fce06 	br	73b0 <__swsetup_r+0x74>
    7478:	81400c17 	ldw	r5,48(r16)
    747c:	28000626 	beq	r5,zero,7498 <__swsetup_r+0x15c>
    7480:	80c01004 	addi	r3,r16,64
    7484:	28c00326 	beq	r5,r3,7494 <__swsetup_r+0x158>
    7488:	8809883a 	mov	r4,r17
    748c:	00020840 	call	2084 <_free_r>
    7490:	8080030b 	ldhu	r2,12(r16)
    7494:	80000c15 	stw	zero,48(r16)
    7498:	80c00417 	ldw	r3,16(r16)
    749c:	013ff6c4 	movi	r4,-37
    74a0:	2084703a 	and	r2,r4,r2
    74a4:	80000115 	stw	zero,4(r16)
    74a8:	80c00015 	stw	r3,0(r16)
    74ac:	003fd206 	br	73f8 <__swsetup_r+0xbc>

000074b0 <_close_r>:
    74b0:	defffd04 	addi	sp,sp,-12
    74b4:	dc400115 	stw	r17,4(sp)
    74b8:	dc000015 	stw	r16,0(sp)
    74bc:	2023883a 	mov	r17,r4
    74c0:	04000074 	movhi	r16,1
    74c4:	841fac04 	addi	r16,r16,32432
    74c8:	2809883a 	mov	r4,r5
    74cc:	dfc00215 	stw	ra,8(sp)
    74d0:	80000015 	stw	zero,0(r16)
    74d4:	0010ce40 	call	10ce4 <close>
    74d8:	00ffffc4 	movi	r3,-1
    74dc:	10c00526 	beq	r2,r3,74f4 <_close_r+0x44>
    74e0:	dfc00217 	ldw	ra,8(sp)
    74e4:	dc400117 	ldw	r17,4(sp)
    74e8:	dc000017 	ldw	r16,0(sp)
    74ec:	dec00304 	addi	sp,sp,12
    74f0:	f800283a 	ret
    74f4:	80c00017 	ldw	r3,0(r16)
    74f8:	183ff926 	beq	r3,zero,74e0 <_close_r+0x30>
    74fc:	88c00015 	stw	r3,0(r17)
    7500:	dfc00217 	ldw	ra,8(sp)
    7504:	dc400117 	ldw	r17,4(sp)
    7508:	dc000017 	ldw	r16,0(sp)
    750c:	dec00304 	addi	sp,sp,12
    7510:	f800283a 	ret

00007514 <quorem>:
    7514:	defff204 	addi	sp,sp,-56
    7518:	dd000815 	stw	r20,32(sp)
    751c:	20800417 	ldw	r2,16(r4)
    7520:	2d000417 	ldw	r20,16(r5)
    7524:	dcc00715 	stw	r19,28(sp)
    7528:	dfc00d15 	stw	ra,52(sp)
    752c:	df000c15 	stw	fp,48(sp)
    7530:	ddc00b15 	stw	r23,44(sp)
    7534:	dd800a15 	stw	r22,40(sp)
    7538:	dd400915 	stw	r21,36(sp)
    753c:	dc800615 	stw	r18,24(sp)
    7540:	dc400515 	stw	r17,20(sp)
    7544:	dc000415 	stw	r16,16(sp)
    7548:	d9400015 	stw	r5,0(sp)
    754c:	2027883a 	mov	r19,r4
    7550:	15007d16 	blt	r2,r20,7748 <quorem+0x234>
    7554:	a0800104 	addi	r2,r20,4
    7558:	1085883a 	add	r2,r2,r2
    755c:	1085883a 	add	r2,r2,r2
    7560:	28ad883a 	add	r22,r5,r2
    7564:	2085883a 	add	r2,r4,r2
    7568:	10800017 	ldw	r2,0(r2)
    756c:	b1400017 	ldw	r5,0(r22)
    7570:	a53fffc4 	addi	r20,r20,-1
    7574:	1009883a 	mov	r4,r2
    7578:	29400044 	addi	r5,r5,1
    757c:	d8800115 	stw	r2,4(sp)
    7580:	001047c0 	call	1047c <__udivsi3>
    7584:	1025883a 	mov	r18,r2
    7588:	d8800017 	ldw	r2,0(sp)
    758c:	9f000504 	addi	fp,r19,20
    7590:	14000504 	addi	r16,r2,20
    7594:	90003626 	beq	r18,zero,7670 <quorem+0x15c>
    7598:	802b883a 	mov	r21,r16
    759c:	e023883a 	mov	r17,fp
    75a0:	0007883a 	mov	r3,zero
    75a4:	002f883a 	mov	r23,zero
    75a8:	a9800017 	ldw	r6,0(r21)
    75ac:	900b883a 	mov	r5,r18
    75b0:	d8c00315 	stw	r3,12(sp)
    75b4:	313fffcc 	andi	r4,r6,65535
    75b8:	d9800215 	stw	r6,8(sp)
    75bc:	00015040 	call	1504 <__mulsi3>
    75c0:	d9800217 	ldw	r6,8(sp)
    75c4:	d8c00317 	ldw	r3,12(sp)
    75c8:	900b883a 	mov	r5,r18
    75cc:	3008d43a 	srli	r4,r6,16
    75d0:	1887883a 	add	r3,r3,r2
    75d4:	d8c00315 	stw	r3,12(sp)
    75d8:	00015040 	call	1504 <__mulsi3>
    75dc:	89400017 	ldw	r5,0(r17)
    75e0:	d8c00317 	ldw	r3,12(sp)
    75e4:	ad400104 	addi	r21,r21,4
    75e8:	293fffcc 	andi	r4,r5,65535
    75ec:	1810d43a 	srli	r8,r3,16
    75f0:	25c9883a 	add	r4,r4,r23
    75f4:	18ffffcc 	andi	r3,r3,65535
    75f8:	20c9c83a 	sub	r4,r4,r3
    75fc:	280cd43a 	srli	r6,r5,16
    7600:	4085883a 	add	r2,r8,r2
    7604:	2007d43a 	srai	r3,r4,16
    7608:	117fffcc 	andi	r5,r2,65535
    760c:	314bc83a 	sub	r5,r6,r5
    7610:	28cb883a 	add	r5,r5,r3
    7614:	8940008d 	sth	r5,2(r17)
    7618:	8900000d 	sth	r4,0(r17)
    761c:	1006d43a 	srli	r3,r2,16
    7620:	282fd43a 	srai	r23,r5,16
    7624:	8c400104 	addi	r17,r17,4
    7628:	b57fdf2e 	bgeu	r22,r21,75a8 <quorem+0x94>
    762c:	d8c00117 	ldw	r3,4(sp)
    7630:	18000f1e 	bne	r3,zero,7670 <quorem+0x15c>
    7634:	a0800144 	addi	r2,r20,5
    7638:	1085883a 	add	r2,r2,r2
    763c:	1085883a 	add	r2,r2,r2
    7640:	9887883a 	add	r3,r19,r2
    7644:	18bfff04 	addi	r2,r3,-4
    7648:	e080082e 	bgeu	fp,r2,766c <quorem+0x158>
    764c:	18ffff17 	ldw	r3,-4(r3)
    7650:	18000326 	beq	r3,zero,7660 <quorem+0x14c>
    7654:	00000506 	br	766c <quorem+0x158>
    7658:	10c00017 	ldw	r3,0(r2)
    765c:	1800031e 	bne	r3,zero,766c <quorem+0x158>
    7660:	10bfff04 	addi	r2,r2,-4
    7664:	a53fffc4 	addi	r20,r20,-1
    7668:	e0bffb36 	bltu	fp,r2,7658 <quorem+0x144>
    766c:	9d000415 	stw	r20,16(r19)
    7670:	d9400017 	ldw	r5,0(sp)
    7674:	9809883a 	mov	r4,r19
    7678:	000a1840 	call	a184 <__mcmp>
    767c:	10002516 	blt	r2,zero,7714 <quorem+0x200>
    7680:	94800044 	addi	r18,r18,1
    7684:	e007883a 	mov	r3,fp
    7688:	000d883a 	mov	r6,zero
    768c:	18800017 	ldw	r2,0(r3)
    7690:	82000017 	ldw	r8,0(r16)
    7694:	84000104 	addi	r16,r16,4
    7698:	11ffffcc 	andi	r7,r2,65535
    769c:	413fffcc 	andi	r4,r8,65535
    76a0:	398d883a 	add	r6,r7,r6
    76a4:	310fc83a 	sub	r7,r6,r4
    76a8:	4010d43a 	srli	r8,r8,16
    76ac:	100cd43a 	srli	r6,r2,16
    76b0:	3809d43a 	srai	r4,r7,16
    76b4:	19c0000d 	sth	r7,0(r3)
    76b8:	320dc83a 	sub	r6,r6,r8
    76bc:	310d883a 	add	r6,r6,r4
    76c0:	1980008d 	sth	r6,2(r3)
    76c4:	300dd43a 	srai	r6,r6,16
    76c8:	18c00104 	addi	r3,r3,4
    76cc:	b43fef2e 	bgeu	r22,r16,768c <quorem+0x178>
    76d0:	a0800144 	addi	r2,r20,5
    76d4:	1085883a 	add	r2,r2,r2
    76d8:	1085883a 	add	r2,r2,r2
    76dc:	9885883a 	add	r2,r19,r2
    76e0:	10c00017 	ldw	r3,0(r2)
    76e4:	18000b1e 	bne	r3,zero,7714 <quorem+0x200>
    76e8:	10ffff04 	addi	r3,r2,-4
    76ec:	e0c0082e 	bgeu	fp,r3,7710 <quorem+0x1fc>
    76f0:	10bfff17 	ldw	r2,-4(r2)
    76f4:	10000326 	beq	r2,zero,7704 <quorem+0x1f0>
    76f8:	00000506 	br	7710 <quorem+0x1fc>
    76fc:	18800017 	ldw	r2,0(r3)
    7700:	1000031e 	bne	r2,zero,7710 <quorem+0x1fc>
    7704:	18ffff04 	addi	r3,r3,-4
    7708:	a53fffc4 	addi	r20,r20,-1
    770c:	e0fffb36 	bltu	fp,r3,76fc <quorem+0x1e8>
    7710:	9d000415 	stw	r20,16(r19)
    7714:	9005883a 	mov	r2,r18
    7718:	dfc00d17 	ldw	ra,52(sp)
    771c:	df000c17 	ldw	fp,48(sp)
    7720:	ddc00b17 	ldw	r23,44(sp)
    7724:	dd800a17 	ldw	r22,40(sp)
    7728:	dd400917 	ldw	r21,36(sp)
    772c:	dd000817 	ldw	r20,32(sp)
    7730:	dcc00717 	ldw	r19,28(sp)
    7734:	dc800617 	ldw	r18,24(sp)
    7738:	dc400517 	ldw	r17,20(sp)
    773c:	dc000417 	ldw	r16,16(sp)
    7740:	dec00e04 	addi	sp,sp,56
    7744:	f800283a 	ret
    7748:	0005883a 	mov	r2,zero
    774c:	003ff206 	br	7718 <quorem+0x204>

00007750 <_dtoa_r>:
    7750:	20801017 	ldw	r2,64(r4)
    7754:	deffdf04 	addi	sp,sp,-132
    7758:	dcc01a15 	stw	r19,104(sp)
    775c:	dc801915 	stw	r18,100(sp)
    7760:	dc401815 	stw	r17,96(sp)
    7764:	dc001715 	stw	r16,92(sp)
    7768:	dfc02015 	stw	ra,128(sp)
    776c:	df001f15 	stw	fp,124(sp)
    7770:	ddc01e15 	stw	r23,120(sp)
    7774:	dd801d15 	stw	r22,116(sp)
    7778:	dd401c15 	stw	r21,112(sp)
    777c:	dd001b15 	stw	r20,108(sp)
    7780:	d9400315 	stw	r5,12(sp)
    7784:	d9c00415 	stw	r7,16(sp)
    7788:	2021883a 	mov	r16,r4
    778c:	3025883a 	mov	r18,r6
    7790:	dcc02317 	ldw	r19,140(sp)
    7794:	3023883a 	mov	r17,r6
    7798:	10000826 	beq	r2,zero,77bc <_dtoa_r+0x6c>
    779c:	20c01117 	ldw	r3,68(r4)
    77a0:	01800044 	movi	r6,1
    77a4:	100b883a 	mov	r5,r2
    77a8:	30cc983a 	sll	r6,r6,r3
    77ac:	10c00115 	stw	r3,4(r2)
    77b0:	11800215 	stw	r6,8(r2)
    77b4:	00098e00 	call	98e0 <_Bfree>
    77b8:	80001015 	stw	zero,64(r16)
    77bc:	90002f16 	blt	r18,zero,787c <_dtoa_r+0x12c>
    77c0:	98000015 	stw	zero,0(r19)
    77c4:	90dffc2c 	andhi	r3,r18,32752
    77c8:	009ffc34 	movhi	r2,32752
    77cc:	18801c26 	beq	r3,r2,7840 <_dtoa_r+0xf0>
    77d0:	d9000317 	ldw	r4,12(sp)
    77d4:	880b883a 	mov	r5,r17
    77d8:	000d883a 	mov	r6,zero
    77dc:	000f883a 	mov	r7,zero
    77e0:	000fe000 	call	fe00 <__eqdf2>
    77e4:	10002c1e 	bne	r2,zero,7898 <_dtoa_r+0x148>
    77e8:	d9002217 	ldw	r4,136(sp)
    77ec:	d9c02417 	ldw	r7,144(sp)
    77f0:	00800044 	movi	r2,1
    77f4:	20800015 	stw	r2,0(r4)
    77f8:	38019426 	beq	r7,zero,7e4c <_dtoa_r+0x6fc>
    77fc:	00800074 	movhi	r2,1
    7800:	10907b44 	addi	r2,r2,16877
    7804:	38800015 	stw	r2,0(r7)
    7808:	15ffffc4 	addi	r23,r2,-1
    780c:	b805883a 	mov	r2,r23
    7810:	dfc02017 	ldw	ra,128(sp)
    7814:	df001f17 	ldw	fp,124(sp)
    7818:	ddc01e17 	ldw	r23,120(sp)
    781c:	dd801d17 	ldw	r22,116(sp)
    7820:	dd401c17 	ldw	r21,112(sp)
    7824:	dd001b17 	ldw	r20,108(sp)
    7828:	dcc01a17 	ldw	r19,104(sp)
    782c:	dc801917 	ldw	r18,100(sp)
    7830:	dc401817 	ldw	r17,96(sp)
    7834:	dc001717 	ldw	r16,92(sp)
    7838:	dec02104 	addi	sp,sp,132
    783c:	f800283a 	ret
    7840:	d8c02217 	ldw	r3,136(sp)
    7844:	d9000317 	ldw	r4,12(sp)
    7848:	0089c3c4 	movi	r2,9999
    784c:	18800015 	stw	r2,0(r3)
    7850:	20016c26 	beq	r4,zero,7e04 <_dtoa_r+0x6b4>
    7854:	05c00074 	movhi	r23,1
    7858:	bdd13204 	addi	r23,r23,17608
    785c:	d9c02417 	ldw	r7,144(sp)
    7860:	383fea26 	beq	r7,zero,780c <_dtoa_r+0xbc>
    7864:	b88000c7 	ldb	r2,3(r23)
    7868:	10016d1e 	bne	r2,zero,7e20 <_dtoa_r+0x6d0>
    786c:	b88000c4 	addi	r2,r23,3
    7870:	d8c02417 	ldw	r3,144(sp)
    7874:	18800015 	stw	r2,0(r3)
    7878:	003fe406 	br	780c <_dtoa_r+0xbc>
    787c:	04600034 	movhi	r17,32768
    7880:	8c7fffc4 	addi	r17,r17,-1
    7884:	9462703a 	and	r17,r18,r17
    7888:	00800044 	movi	r2,1
    788c:	98800015 	stw	r2,0(r19)
    7890:	8825883a 	mov	r18,r17
    7894:	003fcb06 	br	77c4 <_dtoa_r+0x74>
    7898:	d9400317 	ldw	r5,12(sp)
    789c:	9028d53a 	srli	r20,r18,20
    78a0:	d8800204 	addi	r2,sp,8
    78a4:	d8800015 	stw	r2,0(sp)
    78a8:	8009883a 	mov	r4,r16
    78ac:	880d883a 	mov	r6,r17
    78b0:	d9c00104 	addi	r7,sp,4
    78b4:	000a52c0 	call	a52c <__d2b>
    78b8:	a501ffcc 	andi	r20,r20,2047
    78bc:	1039883a 	mov	fp,r2
    78c0:	a001591e 	bne	r20,zero,7e28 <_dtoa_r+0x6d8>
    78c4:	dd400217 	ldw	r21,8(sp)
    78c8:	dd000117 	ldw	r20,4(sp)
    78cc:	00befbc4 	movi	r2,-1041
    78d0:	ad29883a 	add	r20,r21,r20
    78d4:	a082d216 	blt	r20,r2,8420 <_dtoa_r+0xcd0>
    78d8:	d8c00317 	ldw	r3,12(sp)
    78dc:	013f0384 	movi	r4,-1010
    78e0:	2509c83a 	sub	r4,r4,r20
    78e4:	a0810484 	addi	r2,r20,1042
    78e8:	9124983a 	sll	r18,r18,r4
    78ec:	1884d83a 	srl	r2,r3,r2
    78f0:	9088b03a 	or	r4,r18,r2
    78f4:	00102400 	call	10240 <__floatunsidf>
    78f8:	1009883a 	mov	r4,r2
    78fc:	017f8434 	movhi	r5,65040
    7900:	00800044 	movi	r2,1
    7904:	194b883a 	add	r5,r3,r5
    7908:	a53fffc4 	addi	r20,r20,-1
    790c:	d8800f15 	stw	r2,60(sp)
    7910:	000d883a 	mov	r6,zero
    7914:	01cffe34 	movhi	r7,16376
    7918:	000f9080 	call	f908 <__subdf3>
    791c:	1009883a 	mov	r4,r2
    7920:	180b883a 	mov	r5,r3
    7924:	0198dbf4 	movhi	r6,25455
    7928:	3190d844 	addi	r6,r6,17249
    792c:	01cff4f4 	movhi	r7,16339
    7930:	39e1e9c4 	addi	r7,r7,-30809
    7934:	000f9680 	call	f968 <__muldf3>
    7938:	180b883a 	mov	r5,r3
    793c:	01a2d874 	movhi	r6,35681
    7940:	31b22cc4 	addi	r6,r6,-14157
    7944:	01cff1f4 	movhi	r7,16327
    7948:	39e28a04 	addi	r7,r7,-30168
    794c:	1009883a 	mov	r4,r2
    7950:	000f8b40 	call	f8b4 <__adddf3>
    7954:	a009883a 	mov	r4,r20
    7958:	1027883a 	mov	r19,r2
    795c:	1825883a 	mov	r18,r3
    7960:	00100380 	call	10038 <__floatsidf>
    7964:	1009883a 	mov	r4,r2
    7968:	180b883a 	mov	r5,r3
    796c:	019427f4 	movhi	r6,20639
    7970:	319e7ec4 	addi	r6,r6,31227
    7974:	01cff4f4 	movhi	r7,16339
    7978:	39d104c4 	addi	r7,r7,17427
    797c:	000f9680 	call	f968 <__muldf3>
    7980:	9809883a 	mov	r4,r19
    7984:	900b883a 	mov	r5,r18
    7988:	100d883a 	mov	r6,r2
    798c:	180f883a 	mov	r7,r3
    7990:	000f8b40 	call	f8b4 <__adddf3>
    7994:	1009883a 	mov	r4,r2
    7998:	180b883a 	mov	r5,r3
    799c:	1027883a 	mov	r19,r2
    79a0:	1825883a 	mov	r18,r3
    79a4:	001010c0 	call	1010c <__fixdfsi>
    79a8:	9809883a 	mov	r4,r19
    79ac:	900b883a 	mov	r5,r18
    79b0:	000d883a 	mov	r6,zero
    79b4:	000f883a 	mov	r7,zero
    79b8:	d8800615 	stw	r2,24(sp)
    79bc:	000ff800 	call	ff80 <__ltdf2>
    79c0:	10027e16 	blt	r2,zero,83bc <_dtoa_r+0xc6c>
    79c4:	d8c00617 	ldw	r3,24(sp)
    79c8:	00800584 	movi	r2,22
    79cc:	10c26c36 	bltu	r2,r3,8380 <_dtoa_r+0xc30>
    79d0:	180490fa 	slli	r2,r3,3
    79d4:	00c00074 	movhi	r3,1
    79d8:	18d15704 	addi	r3,r3,17756
    79dc:	d9800317 	ldw	r6,12(sp)
    79e0:	1885883a 	add	r2,r3,r2
    79e4:	11000017 	ldw	r4,0(r2)
    79e8:	11400117 	ldw	r5,4(r2)
    79ec:	880f883a 	mov	r7,r17
    79f0:	000feb80 	call	feb8 <__gtdf2>
    79f4:	00828f0e 	bge	zero,r2,8434 <_dtoa_r+0xce4>
    79f8:	d8800617 	ldw	r2,24(sp)
    79fc:	d8000d15 	stw	zero,52(sp)
    7a00:	10bfffc4 	addi	r2,r2,-1
    7a04:	d8800615 	stw	r2,24(sp)
    7a08:	ad29c83a 	sub	r20,r21,r20
    7a0c:	a53fffc4 	addi	r20,r20,-1
    7a10:	a0026616 	blt	r20,zero,83ac <_dtoa_r+0xc5c>
    7a14:	dd000715 	stw	r20,28(sp)
    7a18:	d8000815 	stw	zero,32(sp)
    7a1c:	d8800617 	ldw	r2,24(sp)
    7a20:	10025a16 	blt	r2,zero,838c <_dtoa_r+0xc3c>
    7a24:	d8c00717 	ldw	r3,28(sp)
    7a28:	d8800b15 	stw	r2,44(sp)
    7a2c:	d8000a15 	stw	zero,40(sp)
    7a30:	1887883a 	add	r3,r3,r2
    7a34:	d8c00715 	stw	r3,28(sp)
    7a38:	d9c00417 	ldw	r7,16(sp)
    7a3c:	00800244 	movi	r2,9
    7a40:	11c10536 	bltu	r2,r7,7e58 <_dtoa_r+0x708>
    7a44:	00800144 	movi	r2,5
    7a48:	11c4c60e 	bge	r2,r7,8d64 <_dtoa_r+0x1614>
    7a4c:	39ffff04 	addi	r7,r7,-4
    7a50:	d9c00415 	stw	r7,16(sp)
    7a54:	0027883a 	mov	r19,zero
    7a58:	d9c00417 	ldw	r7,16(sp)
    7a5c:	008000c4 	movi	r2,3
    7a60:	3883a226 	beq	r7,r2,88ec <_dtoa_r+0x119c>
    7a64:	11c2bc16 	blt	r2,r7,8558 <_dtoa_r+0xe08>
    7a68:	00800084 	movi	r2,2
    7a6c:	3880fb1e 	bne	r7,r2,7e5c <_dtoa_r+0x70c>
    7a70:	d8000c15 	stw	zero,48(sp)
    7a74:	d9002117 	ldw	r4,132(sp)
    7a78:	0103ae0e 	bge	zero,r4,8934 <_dtoa_r+0x11e4>
    7a7c:	2025883a 	mov	r18,r4
    7a80:	d9000e15 	stw	r4,56(sp)
    7a84:	d9000915 	stw	r4,36(sp)
    7a88:	80001115 	stw	zero,68(r16)
    7a8c:	008005c4 	movi	r2,23
    7a90:	1484b22e 	bgeu	r2,r18,8d5c <_dtoa_r+0x160c>
    7a94:	00c00044 	movi	r3,1
    7a98:	00800104 	movi	r2,4
    7a9c:	1085883a 	add	r2,r2,r2
    7aa0:	11000504 	addi	r4,r2,20
    7aa4:	180b883a 	mov	r5,r3
    7aa8:	18c00044 	addi	r3,r3,1
    7aac:	913ffb2e 	bgeu	r18,r4,7a9c <_dtoa_r+0x34c>
    7ab0:	81401115 	stw	r5,68(r16)
    7ab4:	8009883a 	mov	r4,r16
    7ab8:	00098380 	call	9838 <_Balloc>
    7abc:	102f883a 	mov	r23,r2
    7ac0:	80801015 	stw	r2,64(r16)
    7ac4:	00800384 	movi	r2,14
    7ac8:	1480f036 	bltu	r2,r18,7e8c <_dtoa_r+0x73c>
    7acc:	9800ef26 	beq	r19,zero,7e8c <_dtoa_r+0x73c>
    7ad0:	d8800617 	ldw	r2,24(sp)
    7ad4:	00839c0e 	bge	zero,r2,8948 <_dtoa_r+0x11f8>
    7ad8:	d8c00617 	ldw	r3,24(sp)
    7adc:	108003cc 	andi	r2,r2,15
    7ae0:	100490fa 	slli	r2,r2,3
    7ae4:	182bd13a 	srai	r21,r3,4
    7ae8:	00c00074 	movhi	r3,1
    7aec:	18d15704 	addi	r3,r3,17756
    7af0:	1885883a 	add	r2,r3,r2
    7af4:	a8c0040c 	andi	r3,r21,16
    7af8:	12800017 	ldw	r10,0(r2)
    7afc:	15800117 	ldw	r22,4(r2)
    7b00:	18038726 	beq	r3,zero,8920 <_dtoa_r+0x11d0>
    7b04:	00800074 	movhi	r2,1
    7b08:	10914d04 	addi	r2,r2,17716
    7b0c:	11800817 	ldw	r6,32(r2)
    7b10:	11c00917 	ldw	r7,36(r2)
    7b14:	d9000317 	ldw	r4,12(sp)
    7b18:	880b883a 	mov	r5,r17
    7b1c:	da801515 	stw	r10,84(sp)
    7b20:	000fc4c0 	call	fc4c <__divdf3>
    7b24:	da801517 	ldw	r10,84(sp)
    7b28:	d8801015 	stw	r2,64(sp)
    7b2c:	1829883a 	mov	r20,r3
    7b30:	ad4003cc 	andi	r21,r21,15
    7b34:	048000c4 	movi	r18,3
    7b38:	a8001126 	beq	r21,zero,7b80 <_dtoa_r+0x430>
    7b3c:	04c00074 	movhi	r19,1
    7b40:	9cd14d04 	addi	r19,r19,17716
    7b44:	5005883a 	mov	r2,r10
    7b48:	b007883a 	mov	r3,r22
    7b4c:	a980004c 	andi	r6,r21,1
    7b50:	1009883a 	mov	r4,r2
    7b54:	a82bd07a 	srai	r21,r21,1
    7b58:	180b883a 	mov	r5,r3
    7b5c:	30000426 	beq	r6,zero,7b70 <_dtoa_r+0x420>
    7b60:	99800017 	ldw	r6,0(r19)
    7b64:	99c00117 	ldw	r7,4(r19)
    7b68:	94800044 	addi	r18,r18,1
    7b6c:	000f9680 	call	f968 <__muldf3>
    7b70:	9cc00204 	addi	r19,r19,8
    7b74:	a83ff51e 	bne	r21,zero,7b4c <_dtoa_r+0x3fc>
    7b78:	1015883a 	mov	r10,r2
    7b7c:	182d883a 	mov	r22,r3
    7b80:	d9001017 	ldw	r4,64(sp)
    7b84:	a00b883a 	mov	r5,r20
    7b88:	500d883a 	mov	r6,r10
    7b8c:	b00f883a 	mov	r7,r22
    7b90:	000fc4c0 	call	fc4c <__divdf3>
    7b94:	1027883a 	mov	r19,r2
    7b98:	1829883a 	mov	r20,r3
    7b9c:	d8c00d17 	ldw	r3,52(sp)
    7ba0:	18000626 	beq	r3,zero,7bbc <_dtoa_r+0x46c>
    7ba4:	9809883a 	mov	r4,r19
    7ba8:	a00b883a 	mov	r5,r20
    7bac:	000d883a 	mov	r6,zero
    7bb0:	01cffc34 	movhi	r7,16368
    7bb4:	000ff800 	call	ff80 <__ltdf2>
    7bb8:	10040e16 	blt	r2,zero,8bf4 <_dtoa_r+0x14a4>
    7bbc:	9009883a 	mov	r4,r18
    7bc0:	00100380 	call	10038 <__floatsidf>
    7bc4:	1009883a 	mov	r4,r2
    7bc8:	180b883a 	mov	r5,r3
    7bcc:	980d883a 	mov	r6,r19
    7bd0:	a00f883a 	mov	r7,r20
    7bd4:	000f9680 	call	f968 <__muldf3>
    7bd8:	1009883a 	mov	r4,r2
    7bdc:	180b883a 	mov	r5,r3
    7be0:	000d883a 	mov	r6,zero
    7be4:	01d00734 	movhi	r7,16412
    7be8:	000f8b40 	call	f8b4 <__adddf3>
    7bec:	057f3034 	movhi	r21,64704
    7bf0:	1d6b883a 	add	r21,r3,r21
    7bf4:	d8c00917 	ldw	r3,36(sp)
    7bf8:	1025883a 	mov	r18,r2
    7bfc:	18031f26 	beq	r3,zero,887c <_dtoa_r+0x112c>
    7c00:	d8800617 	ldw	r2,24(sp)
    7c04:	dac00917 	ldw	r11,36(sp)
    7c08:	d8801315 	stw	r2,76(sp)
    7c0c:	d8c00c17 	ldw	r3,48(sp)
    7c10:	18039026 	beq	r3,zero,8a54 <_dtoa_r+0x1304>
    7c14:	58bfffc4 	addi	r2,r11,-1
    7c18:	100490fa 	slli	r2,r2,3
    7c1c:	00c00074 	movhi	r3,1
    7c20:	18d15704 	addi	r3,r3,17756
    7c24:	0009883a 	mov	r4,zero
    7c28:	1885883a 	add	r2,r3,r2
    7c2c:	11800017 	ldw	r6,0(r2)
    7c30:	11c00117 	ldw	r7,4(r2)
    7c34:	014ff834 	movhi	r5,16352
    7c38:	dac01615 	stw	r11,88(sp)
    7c3c:	000fc4c0 	call	fc4c <__divdf3>
    7c40:	900d883a 	mov	r6,r18
    7c44:	a80f883a 	mov	r7,r21
    7c48:	1009883a 	mov	r4,r2
    7c4c:	180b883a 	mov	r5,r3
    7c50:	000f9080 	call	f908 <__subdf3>
    7c54:	a00b883a 	mov	r5,r20
    7c58:	9809883a 	mov	r4,r19
    7c5c:	182b883a 	mov	r21,r3
    7c60:	d8801015 	stw	r2,64(sp)
    7c64:	001010c0 	call	1010c <__fixdfsi>
    7c68:	1009883a 	mov	r4,r2
    7c6c:	d8801515 	stw	r2,84(sp)
    7c70:	00100380 	call	10038 <__floatsidf>
    7c74:	9809883a 	mov	r4,r19
    7c78:	a00b883a 	mov	r5,r20
    7c7c:	100d883a 	mov	r6,r2
    7c80:	180f883a 	mov	r7,r3
    7c84:	000f9080 	call	f908 <__subdf3>
    7c88:	da401517 	ldw	r9,84(sp)
    7c8c:	d9001017 	ldw	r4,64(sp)
    7c90:	a80b883a 	mov	r5,r21
    7c94:	4d000c04 	addi	r20,r9,48
    7c98:	bd000005 	stb	r20,0(r23)
    7c9c:	100d883a 	mov	r6,r2
    7ca0:	180f883a 	mov	r7,r3
    7ca4:	bd800044 	addi	r22,r23,1
    7ca8:	1025883a 	mov	r18,r2
    7cac:	1827883a 	mov	r19,r3
    7cb0:	000feb80 	call	feb8 <__gtdf2>
    7cb4:	00842216 	blt	zero,r2,8d40 <_dtoa_r+0x15f0>
    7cb8:	0009883a 	mov	r4,zero
    7cbc:	014ffc34 	movhi	r5,16368
    7cc0:	900d883a 	mov	r6,r18
    7cc4:	980f883a 	mov	r7,r19
    7cc8:	000f9080 	call	f908 <__subdf3>
    7ccc:	d9001017 	ldw	r4,64(sp)
    7cd0:	a80b883a 	mov	r5,r21
    7cd4:	100d883a 	mov	r6,r2
    7cd8:	180f883a 	mov	r7,r3
    7cdc:	000feb80 	call	feb8 <__gtdf2>
    7ce0:	dac01617 	ldw	r11,88(sp)
    7ce4:	00841316 	blt	zero,r2,8d34 <_dtoa_r+0x15e4>
    7ce8:	00800044 	movi	r2,1
    7cec:	12c0670e 	bge	r2,r11,7e8c <_dtoa_r+0x73c>
    7cf0:	bad7883a 	add	r11,r23,r11
    7cf4:	df001115 	stw	fp,68(sp)
    7cf8:	dc401215 	stw	r17,72(sp)
    7cfc:	5839883a 	mov	fp,r11
    7d00:	dc401017 	ldw	r17,64(sp)
    7d04:	00000806 	br	7d28 <_dtoa_r+0x5d8>
    7d08:	000f9080 	call	f908 <__subdf3>
    7d0c:	1009883a 	mov	r4,r2
    7d10:	180b883a 	mov	r5,r3
    7d14:	880d883a 	mov	r6,r17
    7d18:	a80f883a 	mov	r7,r21
    7d1c:	000ff800 	call	ff80 <__ltdf2>
    7d20:	1003ee16 	blt	r2,zero,8cdc <_dtoa_r+0x158c>
    7d24:	b703f126 	beq	r22,fp,8cec <_dtoa_r+0x159c>
    7d28:	8809883a 	mov	r4,r17
    7d2c:	a80b883a 	mov	r5,r21
    7d30:	000d883a 	mov	r6,zero
    7d34:	01d00934 	movhi	r7,16420
    7d38:	000f9680 	call	f968 <__muldf3>
    7d3c:	000d883a 	mov	r6,zero
    7d40:	01d00934 	movhi	r7,16420
    7d44:	9009883a 	mov	r4,r18
    7d48:	980b883a 	mov	r5,r19
    7d4c:	1023883a 	mov	r17,r2
    7d50:	182b883a 	mov	r21,r3
    7d54:	000f9680 	call	f968 <__muldf3>
    7d58:	180b883a 	mov	r5,r3
    7d5c:	1009883a 	mov	r4,r2
    7d60:	1825883a 	mov	r18,r3
    7d64:	1027883a 	mov	r19,r2
    7d68:	001010c0 	call	1010c <__fixdfsi>
    7d6c:	1009883a 	mov	r4,r2
    7d70:	1029883a 	mov	r20,r2
    7d74:	00100380 	call	10038 <__floatsidf>
    7d78:	9809883a 	mov	r4,r19
    7d7c:	900b883a 	mov	r5,r18
    7d80:	100d883a 	mov	r6,r2
    7d84:	180f883a 	mov	r7,r3
    7d88:	000f9080 	call	f908 <__subdf3>
    7d8c:	a5000c04 	addi	r20,r20,48
    7d90:	b5000005 	stb	r20,0(r22)
    7d94:	1009883a 	mov	r4,r2
    7d98:	180b883a 	mov	r5,r3
    7d9c:	880d883a 	mov	r6,r17
    7da0:	a80f883a 	mov	r7,r21
    7da4:	1025883a 	mov	r18,r2
    7da8:	1827883a 	mov	r19,r3
    7dac:	000ff800 	call	ff80 <__ltdf2>
    7db0:	b5800044 	addi	r22,r22,1
    7db4:	0009883a 	mov	r4,zero
    7db8:	014ffc34 	movhi	r5,16368
    7dbc:	900d883a 	mov	r6,r18
    7dc0:	980f883a 	mov	r7,r19
    7dc4:	103fd00e 	bge	r2,zero,7d08 <_dtoa_r+0x5b8>
    7dc8:	d9001317 	ldw	r4,76(sp)
    7dcc:	df001117 	ldw	fp,68(sp)
    7dd0:	d9000615 	stw	r4,24(sp)
    7dd4:	8009883a 	mov	r4,r16
    7dd8:	e00b883a 	mov	r5,fp
    7ddc:	00098e00 	call	98e0 <_Bfree>
    7de0:	d9c00617 	ldw	r7,24(sp)
    7de4:	d8c02217 	ldw	r3,136(sp)
    7de8:	d9002417 	ldw	r4,144(sp)
    7dec:	b0000005 	stb	zero,0(r22)
    7df0:	38800044 	addi	r2,r7,1
    7df4:	18800015 	stw	r2,0(r3)
    7df8:	203e8426 	beq	r4,zero,780c <_dtoa_r+0xbc>
    7dfc:	25800015 	stw	r22,0(r4)
    7e00:	003e8206 	br	780c <_dtoa_r+0xbc>
    7e04:	00800434 	movhi	r2,16
    7e08:	10bfffc4 	addi	r2,r2,-1
    7e0c:	90a4703a 	and	r18,r18,r2
    7e10:	903e901e 	bne	r18,zero,7854 <_dtoa_r+0x104>
    7e14:	05c00074 	movhi	r23,1
    7e18:	bdd12f04 	addi	r23,r23,17596
    7e1c:	003e8f06 	br	785c <_dtoa_r+0x10c>
    7e20:	b8800204 	addi	r2,r23,8
    7e24:	003e9206 	br	7870 <_dtoa_r+0x120>
    7e28:	01400434 	movhi	r5,16
    7e2c:	297fffc4 	addi	r5,r5,-1
    7e30:	894a703a 	and	r5,r17,r5
    7e34:	d9000317 	ldw	r4,12(sp)
    7e38:	294ffc34 	orhi	r5,r5,16368
    7e3c:	a53f0044 	addi	r20,r20,-1023
    7e40:	dd400217 	ldw	r21,8(sp)
    7e44:	d8000f15 	stw	zero,60(sp)
    7e48:	003eb106 	br	7910 <_dtoa_r+0x1c0>
    7e4c:	05c00074 	movhi	r23,1
    7e50:	bdd07b04 	addi	r23,r23,16876
    7e54:	003e6d06 	br	780c <_dtoa_r+0xbc>
    7e58:	d8000415 	stw	zero,16(sp)
    7e5c:	80001115 	stw	zero,68(r16)
    7e60:	8009883a 	mov	r4,r16
    7e64:	000b883a 	mov	r5,zero
    7e68:	00098380 	call	9838 <_Balloc>
    7e6c:	01ffffc4 	movi	r7,-1
    7e70:	102f883a 	mov	r23,r2
    7e74:	80801015 	stw	r2,64(r16)
    7e78:	00800044 	movi	r2,1
    7e7c:	d9c00915 	stw	r7,36(sp)
    7e80:	d8002115 	stw	zero,132(sp)
    7e84:	d9c00e15 	stw	r7,56(sp)
    7e88:	d8800c15 	stw	r2,48(sp)
    7e8c:	d8800117 	ldw	r2,4(sp)
    7e90:	10008b16 	blt	r2,zero,80c0 <_dtoa_r+0x970>
    7e94:	d9000617 	ldw	r4,24(sp)
    7e98:	00c00384 	movi	r3,14
    7e9c:	19008816 	blt	r3,r4,80c0 <_dtoa_r+0x970>
    7ea0:	200490fa 	slli	r2,r4,3
    7ea4:	d9c02117 	ldw	r7,132(sp)
    7ea8:	00c00074 	movhi	r3,1
    7eac:	18d15704 	addi	r3,r3,17756
    7eb0:	1885883a 	add	r2,r3,r2
    7eb4:	14800017 	ldw	r18,0(r2)
    7eb8:	14c00117 	ldw	r19,4(r2)
    7ebc:	3801c916 	blt	r7,zero,85e4 <_dtoa_r+0xe94>
    7ec0:	d9000317 	ldw	r4,12(sp)
    7ec4:	900d883a 	mov	r6,r18
    7ec8:	980f883a 	mov	r7,r19
    7ecc:	880b883a 	mov	r5,r17
    7ed0:	000fc4c0 	call	fc4c <__divdf3>
    7ed4:	180b883a 	mov	r5,r3
    7ed8:	1009883a 	mov	r4,r2
    7edc:	001010c0 	call	1010c <__fixdfsi>
    7ee0:	1009883a 	mov	r4,r2
    7ee4:	102b883a 	mov	r21,r2
    7ee8:	00100380 	call	10038 <__floatsidf>
    7eec:	1009883a 	mov	r4,r2
    7ef0:	180b883a 	mov	r5,r3
    7ef4:	900d883a 	mov	r6,r18
    7ef8:	980f883a 	mov	r7,r19
    7efc:	000f9680 	call	f968 <__muldf3>
    7f00:	d9000317 	ldw	r4,12(sp)
    7f04:	880b883a 	mov	r5,r17
    7f08:	100d883a 	mov	r6,r2
    7f0c:	180f883a 	mov	r7,r3
    7f10:	000f9080 	call	f908 <__subdf3>
    7f14:	d9c00917 	ldw	r7,36(sp)
    7f18:	1009883a 	mov	r4,r2
    7f1c:	a8800c04 	addi	r2,r21,48
    7f20:	b8800005 	stb	r2,0(r23)
    7f24:	01800044 	movi	r6,1
    7f28:	180b883a 	mov	r5,r3
    7f2c:	2005883a 	mov	r2,r4
    7f30:	bd800044 	addi	r22,r23,1
    7f34:	39803726 	beq	r7,r6,8014 <_dtoa_r+0x8c4>
    7f38:	000d883a 	mov	r6,zero
    7f3c:	01d00934 	movhi	r7,16420
    7f40:	000f9680 	call	f968 <__muldf3>
    7f44:	1009883a 	mov	r4,r2
    7f48:	180b883a 	mov	r5,r3
    7f4c:	000d883a 	mov	r6,zero
    7f50:	000f883a 	mov	r7,zero
    7f54:	1029883a 	mov	r20,r2
    7f58:	1823883a 	mov	r17,r3
    7f5c:	000fe000 	call	fe00 <__eqdf2>
    7f60:	103f9c26 	beq	r2,zero,7dd4 <_dtoa_r+0x684>
    7f64:	dd400917 	ldw	r21,36(sp)
    7f68:	dc000415 	stw	r16,16(sp)
    7f6c:	00000906 	br	7f94 <_dtoa_r+0x844>
    7f70:	000f9680 	call	f968 <__muldf3>
    7f74:	1009883a 	mov	r4,r2
    7f78:	180b883a 	mov	r5,r3
    7f7c:	000d883a 	mov	r6,zero
    7f80:	000f883a 	mov	r7,zero
    7f84:	1029883a 	mov	r20,r2
    7f88:	1823883a 	mov	r17,r3
    7f8c:	000fe000 	call	fe00 <__eqdf2>
    7f90:	10022926 	beq	r2,zero,8838 <_dtoa_r+0x10e8>
    7f94:	900d883a 	mov	r6,r18
    7f98:	980f883a 	mov	r7,r19
    7f9c:	a009883a 	mov	r4,r20
    7fa0:	880b883a 	mov	r5,r17
    7fa4:	000fc4c0 	call	fc4c <__divdf3>
    7fa8:	180b883a 	mov	r5,r3
    7fac:	1009883a 	mov	r4,r2
    7fb0:	001010c0 	call	1010c <__fixdfsi>
    7fb4:	1009883a 	mov	r4,r2
    7fb8:	1021883a 	mov	r16,r2
    7fbc:	00100380 	call	10038 <__floatsidf>
    7fc0:	1009883a 	mov	r4,r2
    7fc4:	180b883a 	mov	r5,r3
    7fc8:	900d883a 	mov	r6,r18
    7fcc:	980f883a 	mov	r7,r19
    7fd0:	000f9680 	call	f968 <__muldf3>
    7fd4:	a009883a 	mov	r4,r20
    7fd8:	880b883a 	mov	r5,r17
    7fdc:	100d883a 	mov	r6,r2
    7fe0:	180f883a 	mov	r7,r3
    7fe4:	000f9080 	call	f908 <__subdf3>
    7fe8:	82400c04 	addi	r9,r16,48
    7fec:	b2400005 	stb	r9,0(r22)
    7ff0:	b5800044 	addi	r22,r22,1
    7ff4:	b5d3c83a 	sub	r9,r22,r23
    7ff8:	000d883a 	mov	r6,zero
    7ffc:	01d00934 	movhi	r7,16420
    8000:	1009883a 	mov	r4,r2
    8004:	180b883a 	mov	r5,r3
    8008:	aa7fd91e 	bne	r21,r9,7f70 <_dtoa_r+0x820>
    800c:	802b883a 	mov	r21,r16
    8010:	dc000417 	ldw	r16,16(sp)
    8014:	1009883a 	mov	r4,r2
    8018:	180b883a 	mov	r5,r3
    801c:	100d883a 	mov	r6,r2
    8020:	180f883a 	mov	r7,r3
    8024:	000f8b40 	call	f8b4 <__adddf3>
    8028:	9009883a 	mov	r4,r18
    802c:	980b883a 	mov	r5,r19
    8030:	100d883a 	mov	r6,r2
    8034:	180f883a 	mov	r7,r3
    8038:	1023883a 	mov	r17,r2
    803c:	1829883a 	mov	r20,r3
    8040:	000ff800 	call	ff80 <__ltdf2>
    8044:	10000816 	blt	r2,zero,8068 <_dtoa_r+0x918>
    8048:	9009883a 	mov	r4,r18
    804c:	980b883a 	mov	r5,r19
    8050:	880d883a 	mov	r6,r17
    8054:	a00f883a 	mov	r7,r20
    8058:	000fe000 	call	fe00 <__eqdf2>
    805c:	103f5d1e 	bne	r2,zero,7dd4 <_dtoa_r+0x684>
    8060:	ad40004c 	andi	r21,r21,1
    8064:	a83f5b26 	beq	r21,zero,7dd4 <_dtoa_r+0x684>
    8068:	b53fffc3 	ldbu	r20,-1(r22)
    806c:	b0ffff84 	addi	r3,r22,-2
    8070:	01400e44 	movi	r5,57
    8074:	00000306 	br	8084 <_dtoa_r+0x934>
    8078:	1d000003 	ldbu	r20,0(r3)
    807c:	102d883a 	mov	r22,r2
    8080:	18ffffc4 	addi	r3,r3,-1
    8084:	a1003fcc 	andi	r4,r20,255
    8088:	2100201c 	xori	r4,r4,128
    808c:	213fe004 	addi	r4,r4,-128
    8090:	b0bfffc4 	addi	r2,r22,-1
    8094:	2142ca1e 	bne	r4,r5,8bc0 <_dtoa_r+0x1470>
    8098:	b8bff71e 	bne	r23,r2,8078 <_dtoa_r+0x928>
    809c:	d8800617 	ldw	r2,24(sp)
    80a0:	05000c44 	movi	r20,49
    80a4:	10800044 	addi	r2,r2,1
    80a8:	d8800615 	stw	r2,24(sp)
    80ac:	00800c04 	movi	r2,48
    80b0:	b8800005 	stb	r2,0(r23)
    80b4:	b805883a 	mov	r2,r23
    80b8:	15000005 	stb	r20,0(r2)
    80bc:	003f4506 	br	7dd4 <_dtoa_r+0x684>
    80c0:	d9c00c17 	ldw	r7,48(sp)
    80c4:	3800c926 	beq	r7,zero,83ec <_dtoa_r+0xc9c>
    80c8:	d9c00417 	ldw	r7,16(sp)
    80cc:	00c00044 	movi	r3,1
    80d0:	19c16c0e 	bge	r3,r7,8684 <_dtoa_r+0xf34>
    80d4:	d9000917 	ldw	r4,36(sp)
    80d8:	d9c00a17 	ldw	r7,40(sp)
    80dc:	24ffffc4 	addi	r19,r4,-1
    80e0:	3cc20716 	blt	r7,r19,8900 <_dtoa_r+0x11b0>
    80e4:	3ce7c83a 	sub	r19,r7,r19
    80e8:	d9c00917 	ldw	r7,36(sp)
    80ec:	3802ae16 	blt	r7,zero,8ba8 <_dtoa_r+0x1458>
    80f0:	dc800817 	ldw	r18,32(sp)
    80f4:	d8800917 	ldw	r2,36(sp)
    80f8:	d8c00817 	ldw	r3,32(sp)
    80fc:	d9c00717 	ldw	r7,28(sp)
    8100:	8009883a 	mov	r4,r16
    8104:	1887883a 	add	r3,r3,r2
    8108:	388f883a 	add	r7,r7,r2
    810c:	01400044 	movi	r5,1
    8110:	d8c00815 	stw	r3,32(sp)
    8114:	d9c00715 	stw	r7,28(sp)
    8118:	0009c680 	call	9c68 <__i2b>
    811c:	102b883a 	mov	r21,r2
    8120:	90000a26 	beq	r18,zero,814c <_dtoa_r+0x9fc>
    8124:	d8800717 	ldw	r2,28(sp)
    8128:	0080080e 	bge	zero,r2,814c <_dtoa_r+0x9fc>
    812c:	90812b16 	blt	r18,r2,85dc <_dtoa_r+0xe8c>
    8130:	d8c00817 	ldw	r3,32(sp)
    8134:	d9000717 	ldw	r4,28(sp)
    8138:	90a5c83a 	sub	r18,r18,r2
    813c:	1887c83a 	sub	r3,r3,r2
    8140:	2089c83a 	sub	r4,r4,r2
    8144:	d8c00815 	stw	r3,32(sp)
    8148:	d9000715 	stw	r4,28(sp)
    814c:	d9c00a17 	ldw	r7,40(sp)
    8150:	01c0140e 	bge	zero,r7,81a4 <_dtoa_r+0xa54>
    8154:	d8800c17 	ldw	r2,48(sp)
    8158:	1001de26 	beq	r2,zero,88d4 <_dtoa_r+0x1184>
    815c:	04c00e0e 	bge	zero,r19,8198 <_dtoa_r+0xa48>
    8160:	a80b883a 	mov	r5,r21
    8164:	8009883a 	mov	r4,r16
    8168:	980d883a 	mov	r6,r19
    816c:	0009efc0 	call	9efc <__pow5mult>
    8170:	e00d883a 	mov	r6,fp
    8174:	8009883a 	mov	r4,r16
    8178:	100b883a 	mov	r5,r2
    817c:	102b883a 	mov	r21,r2
    8180:	0009ca40 	call	9ca4 <__multiply>
    8184:	1029883a 	mov	r20,r2
    8188:	e00b883a 	mov	r5,fp
    818c:	8009883a 	mov	r4,r16
    8190:	00098e00 	call	98e0 <_Bfree>
    8194:	a039883a 	mov	fp,r20
    8198:	d8c00a17 	ldw	r3,40(sp)
    819c:	1ccdc83a 	sub	r6,r3,r19
    81a0:	3001291e 	bne	r6,zero,8648 <_dtoa_r+0xef8>
    81a4:	8009883a 	mov	r4,r16
    81a8:	01400044 	movi	r5,1
    81ac:	0009c680 	call	9c68 <__i2b>
    81b0:	d9000b17 	ldw	r4,44(sp)
    81b4:	1029883a 	mov	r20,r2
    81b8:	0100050e 	bge	zero,r4,81d0 <_dtoa_r+0xa80>
    81bc:	d9800b17 	ldw	r6,44(sp)
    81c0:	8009883a 	mov	r4,r16
    81c4:	100b883a 	mov	r5,r2
    81c8:	0009efc0 	call	9efc <__pow5mult>
    81cc:	1029883a 	mov	r20,r2
    81d0:	d9c00417 	ldw	r7,16(sp)
    81d4:	00800044 	movi	r2,1
    81d8:	11c0f00e 	bge	r2,r7,859c <_dtoa_r+0xe4c>
    81dc:	0023883a 	mov	r17,zero
    81e0:	d8800b17 	ldw	r2,44(sp)
    81e4:	1001741e 	bne	r2,zero,87b8 <_dtoa_r+0x1068>
    81e8:	00800044 	movi	r2,1
    81ec:	d8c00717 	ldw	r3,28(sp)
    81f0:	10c5883a 	add	r2,r2,r3
    81f4:	108007cc 	andi	r2,r2,31
    81f8:	10008026 	beq	r2,zero,83fc <_dtoa_r+0xcac>
    81fc:	01000804 	movi	r4,32
    8200:	2089c83a 	sub	r4,r4,r2
    8204:	00c00104 	movi	r3,4
    8208:	1902d00e 	bge	r3,r4,8d4c <_dtoa_r+0x15fc>
    820c:	d9000817 	ldw	r4,32(sp)
    8210:	d9c00717 	ldw	r7,28(sp)
    8214:	00c00704 	movi	r3,28
    8218:	1885c83a 	sub	r2,r3,r2
    821c:	2089883a 	add	r4,r4,r2
    8220:	388f883a 	add	r7,r7,r2
    8224:	d9000815 	stw	r4,32(sp)
    8228:	90a5883a 	add	r18,r18,r2
    822c:	d9c00715 	stw	r7,28(sp)
    8230:	d9c00817 	ldw	r7,32(sp)
    8234:	01c0050e 	bge	zero,r7,824c <_dtoa_r+0xafc>
    8238:	e00b883a 	mov	r5,fp
    823c:	8009883a 	mov	r4,r16
    8240:	380d883a 	mov	r6,r7
    8244:	000a0280 	call	a028 <__lshift>
    8248:	1039883a 	mov	fp,r2
    824c:	d8800717 	ldw	r2,28(sp)
    8250:	0080050e 	bge	zero,r2,8268 <_dtoa_r+0xb18>
    8254:	a00b883a 	mov	r5,r20
    8258:	8009883a 	mov	r4,r16
    825c:	100d883a 	mov	r6,r2
    8260:	000a0280 	call	a028 <__lshift>
    8264:	1029883a 	mov	r20,r2
    8268:	d8c00d17 	ldw	r3,52(sp)
    826c:	1801401e 	bne	r3,zero,8770 <_dtoa_r+0x1020>
    8270:	d8800917 	ldw	r2,36(sp)
    8274:	00815a0e 	bge	zero,r2,87e0 <_dtoa_r+0x1090>
    8278:	d8c00c17 	ldw	r3,48(sp)
    827c:	18006f1e 	bne	r3,zero,843c <_dtoa_r+0xcec>
    8280:	b823883a 	mov	r17,r23
    8284:	dc800917 	ldw	r18,36(sp)
    8288:	00000206 	br	8294 <_dtoa_r+0xb44>
    828c:	00099080 	call	9908 <__multadd>
    8290:	1039883a 	mov	fp,r2
    8294:	e009883a 	mov	r4,fp
    8298:	a00b883a 	mov	r5,r20
    829c:	00075140 	call	7514 <quorem>
    82a0:	10800c04 	addi	r2,r2,48
    82a4:	88800005 	stb	r2,0(r17)
    82a8:	8c400044 	addi	r17,r17,1
    82ac:	8dc7c83a 	sub	r3,r17,r23
    82b0:	8009883a 	mov	r4,r16
    82b4:	e00b883a 	mov	r5,fp
    82b8:	01800284 	movi	r6,10
    82bc:	000f883a 	mov	r7,zero
    82c0:	1cbff216 	blt	r3,r18,828c <_dtoa_r+0xb3c>
    82c4:	dd800917 	ldw	r22,36(sp)
    82c8:	1007883a 	mov	r3,r2
    82cc:	05823a0e 	bge	zero,r22,8bb8 <_dtoa_r+0x1468>
    82d0:	bdad883a 	add	r22,r23,r22
    82d4:	0023883a 	mov	r17,zero
    82d8:	e00b883a 	mov	r5,fp
    82dc:	01800044 	movi	r6,1
    82e0:	8009883a 	mov	r4,r16
    82e4:	d8c01515 	stw	r3,84(sp)
    82e8:	000a0280 	call	a028 <__lshift>
    82ec:	1009883a 	mov	r4,r2
    82f0:	a00b883a 	mov	r5,r20
    82f4:	1039883a 	mov	fp,r2
    82f8:	000a1840 	call	a184 <__mcmp>
    82fc:	d8c01517 	ldw	r3,84(sp)
    8300:	0080d60e 	bge	zero,r2,865c <_dtoa_r+0xf0c>
    8304:	b13fffc3 	ldbu	r4,-1(r22)
    8308:	b0ffff84 	addi	r3,r22,-2
    830c:	01800e44 	movi	r6,57
    8310:	00000306 	br	8320 <_dtoa_r+0xbd0>
    8314:	19000003 	ldbu	r4,0(r3)
    8318:	102d883a 	mov	r22,r2
    831c:	18ffffc4 	addi	r3,r3,-1
    8320:	21403fcc 	andi	r5,r4,255
    8324:	2940201c 	xori	r5,r5,128
    8328:	297fe004 	addi	r5,r5,-128
    832c:	b0bfffc4 	addi	r2,r22,-1
    8330:	2981a71e 	bne	r5,r6,89d0 <_dtoa_r+0x1280>
    8334:	b8bff71e 	bne	r23,r2,8314 <_dtoa_r+0xbc4>
    8338:	d8800617 	ldw	r2,24(sp)
    833c:	10800044 	addi	r2,r2,1
    8340:	d8800615 	stw	r2,24(sp)
    8344:	00800c44 	movi	r2,49
    8348:	b8800005 	stb	r2,0(r23)
    834c:	8009883a 	mov	r4,r16
    8350:	a00b883a 	mov	r5,r20
    8354:	00098e00 	call	98e0 <_Bfree>
    8358:	a83e9e26 	beq	r21,zero,7dd4 <_dtoa_r+0x684>
    835c:	88000426 	beq	r17,zero,8370 <_dtoa_r+0xc20>
    8360:	8d400326 	beq	r17,r21,8370 <_dtoa_r+0xc20>
    8364:	8009883a 	mov	r4,r16
    8368:	880b883a 	mov	r5,r17
    836c:	00098e00 	call	98e0 <_Bfree>
    8370:	8009883a 	mov	r4,r16
    8374:	a80b883a 	mov	r5,r21
    8378:	00098e00 	call	98e0 <_Bfree>
    837c:	003e9506 	br	7dd4 <_dtoa_r+0x684>
    8380:	00c00044 	movi	r3,1
    8384:	d8c00d15 	stw	r3,52(sp)
    8388:	003d9f06 	br	7a08 <_dtoa_r+0x2b8>
    838c:	d9000817 	ldw	r4,32(sp)
    8390:	d8800617 	ldw	r2,24(sp)
    8394:	d8000b15 	stw	zero,44(sp)
    8398:	2089c83a 	sub	r4,r4,r2
    839c:	0087c83a 	sub	r3,zero,r2
    83a0:	d9000815 	stw	r4,32(sp)
    83a4:	d8c00a15 	stw	r3,40(sp)
    83a8:	003da306 	br	7a38 <_dtoa_r+0x2e8>
    83ac:	0529c83a 	sub	r20,zero,r20
    83b0:	dd000815 	stw	r20,32(sp)
    83b4:	d8000715 	stw	zero,28(sp)
    83b8:	003d9806 	br	7a1c <_dtoa_r+0x2cc>
    83bc:	d9000617 	ldw	r4,24(sp)
    83c0:	00100380 	call	10038 <__floatsidf>
    83c4:	1009883a 	mov	r4,r2
    83c8:	180b883a 	mov	r5,r3
    83cc:	980d883a 	mov	r6,r19
    83d0:	900f883a 	mov	r7,r18
    83d4:	000fe5c0 	call	fe5c <__nedf2>
    83d8:	103d7a26 	beq	r2,zero,79c4 <_dtoa_r+0x274>
    83dc:	d8800617 	ldw	r2,24(sp)
    83e0:	10bfffc4 	addi	r2,r2,-1
    83e4:	d8800615 	stw	r2,24(sp)
    83e8:	003d7606 	br	79c4 <_dtoa_r+0x274>
    83ec:	dcc00a17 	ldw	r19,40(sp)
    83f0:	dc800817 	ldw	r18,32(sp)
    83f4:	002b883a 	mov	r21,zero
    83f8:	003f4906 	br	8120 <_dtoa_r+0x9d0>
    83fc:	00800704 	movi	r2,28
    8400:	d8c00817 	ldw	r3,32(sp)
    8404:	d9000717 	ldw	r4,28(sp)
    8408:	90a5883a 	add	r18,r18,r2
    840c:	1887883a 	add	r3,r3,r2
    8410:	2089883a 	add	r4,r4,r2
    8414:	d8c00815 	stw	r3,32(sp)
    8418:	d9000715 	stw	r4,28(sp)
    841c:	003f8406 	br	8230 <_dtoa_r+0xae0>
    8420:	d9c00317 	ldw	r7,12(sp)
    8424:	013efb84 	movi	r4,-1042
    8428:	2509c83a 	sub	r4,r4,r20
    842c:	3908983a 	sll	r4,r7,r4
    8430:	003d3006 	br	78f4 <_dtoa_r+0x1a4>
    8434:	d8000d15 	stw	zero,52(sp)
    8438:	003d7306 	br	7a08 <_dtoa_r+0x2b8>
    843c:	0480050e 	bge	zero,r18,8454 <_dtoa_r+0xd04>
    8440:	a80b883a 	mov	r5,r21
    8444:	8009883a 	mov	r4,r16
    8448:	900d883a 	mov	r6,r18
    844c:	000a0280 	call	a028 <__lshift>
    8450:	102b883a 	mov	r21,r2
    8454:	8801611e 	bne	r17,zero,89dc <_dtoa_r+0x128c>
    8458:	a827883a 	mov	r19,r21
    845c:	d8c00317 	ldw	r3,12(sp)
    8460:	d9000917 	ldw	r4,36(sp)
    8464:	b8bfffc4 	addi	r2,r23,-1
    8468:	18c0004c 	andi	r3,r3,1
    846c:	1105883a 	add	r2,r2,r4
    8470:	b825883a 	mov	r18,r23
    8474:	d8800515 	stw	r2,20(sp)
    8478:	a823883a 	mov	r17,r21
    847c:	d8c00315 	stw	r3,12(sp)
    8480:	ddc00715 	stw	r23,28(sp)
    8484:	e009883a 	mov	r4,fp
    8488:	a00b883a 	mov	r5,r20
    848c:	00075140 	call	7514 <quorem>
    8490:	e009883a 	mov	r4,fp
    8494:	880b883a 	mov	r5,r17
    8498:	102d883a 	mov	r22,r2
    849c:	000a1840 	call	a184 <__mcmp>
    84a0:	980d883a 	mov	r6,r19
    84a4:	8009883a 	mov	r4,r16
    84a8:	a00b883a 	mov	r5,r20
    84ac:	102b883a 	mov	r21,r2
    84b0:	000a1dc0 	call	a1dc <__mdiff>
    84b4:	100d883a 	mov	r6,r2
    84b8:	10800317 	ldw	r2,12(r2)
    84bc:	b5c00c04 	addi	r23,r22,48
    84c0:	10008c26 	beq	r2,zero,86f4 <_dtoa_r+0xfa4>
    84c4:	8009883a 	mov	r4,r16
    84c8:	300b883a 	mov	r5,r6
    84cc:	00098e00 	call	98e0 <_Bfree>
    84d0:	00800044 	movi	r2,1
    84d4:	a8007116 	blt	r21,zero,869c <_dtoa_r+0xf4c>
    84d8:	a800041e 	bne	r21,zero,84ec <_dtoa_r+0xd9c>
    84dc:	d9c00417 	ldw	r7,16(sp)
    84e0:	3800021e 	bne	r7,zero,84ec <_dtoa_r+0xd9c>
    84e4:	d8c00317 	ldw	r3,12(sp)
    84e8:	18006c26 	beq	r3,zero,869c <_dtoa_r+0xf4c>
    84ec:	00814c16 	blt	zero,r2,8a20 <_dtoa_r+0x12d0>
    84f0:	d8c00517 	ldw	r3,20(sp)
    84f4:	95400044 	addi	r21,r18,1
    84f8:	95c00005 	stb	r23,0(r18)
    84fc:	a82d883a 	mov	r22,r21
    8500:	90c14d26 	beq	r18,r3,8a38 <_dtoa_r+0x12e8>
    8504:	e00b883a 	mov	r5,fp
    8508:	8009883a 	mov	r4,r16
    850c:	01800284 	movi	r6,10
    8510:	000f883a 	mov	r7,zero
    8514:	00099080 	call	9908 <__multadd>
    8518:	1039883a 	mov	fp,r2
    851c:	8cc08b26 	beq	r17,r19,874c <_dtoa_r+0xffc>
    8520:	880b883a 	mov	r5,r17
    8524:	01800284 	movi	r6,10
    8528:	000f883a 	mov	r7,zero
    852c:	8009883a 	mov	r4,r16
    8530:	00099080 	call	9908 <__multadd>
    8534:	980b883a 	mov	r5,r19
    8538:	8009883a 	mov	r4,r16
    853c:	01800284 	movi	r6,10
    8540:	000f883a 	mov	r7,zero
    8544:	1023883a 	mov	r17,r2
    8548:	00099080 	call	9908 <__multadd>
    854c:	1027883a 	mov	r19,r2
    8550:	a825883a 	mov	r18,r21
    8554:	003fcb06 	br	8484 <_dtoa_r+0xd34>
    8558:	d9c00417 	ldw	r7,16(sp)
    855c:	00800104 	movi	r2,4
    8560:	3880e426 	beq	r7,r2,88f4 <_dtoa_r+0x11a4>
    8564:	00800144 	movi	r2,5
    8568:	38be3c1e 	bne	r7,r2,7e5c <_dtoa_r+0x70c>
    856c:	00c00044 	movi	r3,1
    8570:	d8c00c15 	stw	r3,48(sp)
    8574:	d9c02117 	ldw	r7,132(sp)
    8578:	d8800617 	ldw	r2,24(sp)
    857c:	388f883a 	add	r7,r7,r2
    8580:	3c800044 	addi	r18,r7,1
    8584:	d9c00e15 	stw	r7,56(sp)
    8588:	dc800915 	stw	r18,36(sp)
    858c:	04bd3e16 	blt	zero,r18,7a88 <_dtoa_r+0x338>
    8590:	80001115 	stw	zero,68(r16)
    8594:	000b883a 	mov	r5,zero
    8598:	003d4606 	br	7ab4 <_dtoa_r+0x364>
    859c:	d8c00317 	ldw	r3,12(sp)
    85a0:	183f0e1e 	bne	r3,zero,81dc <_dtoa_r+0xa8c>
    85a4:	00c00434 	movhi	r3,16
    85a8:	18ffffc4 	addi	r3,r3,-1
    85ac:	88c6703a 	and	r3,r17,r3
    85b0:	183f0a1e 	bne	r3,zero,81dc <_dtoa_r+0xa8c>
    85b4:	8c5ffc2c 	andhi	r17,r17,32752
    85b8:	883f0826 	beq	r17,zero,81dc <_dtoa_r+0xa8c>
    85bc:	d9000817 	ldw	r4,32(sp)
    85c0:	d9c00717 	ldw	r7,28(sp)
    85c4:	1023883a 	mov	r17,r2
    85c8:	2089883a 	add	r4,r4,r2
    85cc:	388f883a 	add	r7,r7,r2
    85d0:	d9000815 	stw	r4,32(sp)
    85d4:	d9c00715 	stw	r7,28(sp)
    85d8:	003f0106 	br	81e0 <_dtoa_r+0xa90>
    85dc:	9005883a 	mov	r2,r18
    85e0:	003ed306 	br	8130 <_dtoa_r+0x9e0>
    85e4:	d8800917 	ldw	r2,36(sp)
    85e8:	00be3516 	blt	zero,r2,7ec0 <_dtoa_r+0x770>
    85ec:	1000b61e 	bne	r2,zero,88c8 <_dtoa_r+0x1178>
    85f0:	9009883a 	mov	r4,r18
    85f4:	980b883a 	mov	r5,r19
    85f8:	000d883a 	mov	r6,zero
    85fc:	01d00534 	movhi	r7,16404
    8600:	000f9680 	call	f968 <__muldf3>
    8604:	d9800317 	ldw	r6,12(sp)
    8608:	1009883a 	mov	r4,r2
    860c:	180b883a 	mov	r5,r3
    8610:	880f883a 	mov	r7,r17
    8614:	000ff1c0 	call	ff1c <__gedf2>
    8618:	0029883a 	mov	r20,zero
    861c:	002b883a 	mov	r21,zero
    8620:	10007e16 	blt	r2,zero,881c <_dtoa_r+0x10cc>
    8624:	d8802117 	ldw	r2,132(sp)
    8628:	b82d883a 	mov	r22,r23
    862c:	0084303a 	nor	r2,zero,r2
    8630:	d8800615 	stw	r2,24(sp)
    8634:	8009883a 	mov	r4,r16
    8638:	a00b883a 	mov	r5,r20
    863c:	00098e00 	call	98e0 <_Bfree>
    8640:	a83f4b1e 	bne	r21,zero,8370 <_dtoa_r+0xc20>
    8644:	003de306 	br	7dd4 <_dtoa_r+0x684>
    8648:	e00b883a 	mov	r5,fp
    864c:	8009883a 	mov	r4,r16
    8650:	0009efc0 	call	9efc <__pow5mult>
    8654:	1039883a 	mov	fp,r2
    8658:	003ed206 	br	81a4 <_dtoa_r+0xa54>
    865c:	1000021e 	bne	r2,zero,8668 <_dtoa_r+0xf18>
    8660:	18c0004c 	andi	r3,r3,1
    8664:	183f271e 	bne	r3,zero,8304 <_dtoa_r+0xbb4>
    8668:	01000c04 	movi	r4,48
    866c:	00000106 	br	8674 <_dtoa_r+0xf24>
    8670:	102d883a 	mov	r22,r2
    8674:	b0bfffc4 	addi	r2,r22,-1
    8678:	10c00007 	ldb	r3,0(r2)
    867c:	193ffc26 	beq	r3,r4,8670 <_dtoa_r+0xf20>
    8680:	003f3206 	br	834c <_dtoa_r+0xbfc>
    8684:	d8c00f17 	ldw	r3,60(sp)
    8688:	18015026 	beq	r3,zero,8bcc <_dtoa_r+0x147c>
    868c:	10810cc4 	addi	r2,r2,1075
    8690:	dcc00a17 	ldw	r19,40(sp)
    8694:	dc800817 	ldw	r18,32(sp)
    8698:	003e9706 	br	80f8 <_dtoa_r+0x9a8>
    869c:	b807883a 	mov	r3,r23
    86a0:	182b883a 	mov	r21,r3
    86a4:	ddc00717 	ldw	r23,28(sp)
    86a8:	00800e0e 	bge	zero,r2,86e4 <_dtoa_r+0xf94>
    86ac:	e00b883a 	mov	r5,fp
    86b0:	01800044 	movi	r6,1
    86b4:	8009883a 	mov	r4,r16
    86b8:	d8c01515 	stw	r3,84(sp)
    86bc:	000a0280 	call	a028 <__lshift>
    86c0:	1009883a 	mov	r4,r2
    86c4:	a00b883a 	mov	r5,r20
    86c8:	1039883a 	mov	fp,r2
    86cc:	000a1840 	call	a184 <__mcmp>
    86d0:	d8c01517 	ldw	r3,84(sp)
    86d4:	0081880e 	bge	zero,r2,8cf8 <_dtoa_r+0x15a8>
    86d8:	00800e44 	movi	r2,57
    86dc:	b0c00c44 	addi	r3,r22,49
    86e0:	a8816326 	beq	r21,r2,8c70 <_dtoa_r+0x1520>
    86e4:	90c00005 	stb	r3,0(r18)
    86e8:	95800044 	addi	r22,r18,1
    86ec:	982b883a 	mov	r21,r19
    86f0:	003f1606 	br	834c <_dtoa_r+0xbfc>
    86f4:	300b883a 	mov	r5,r6
    86f8:	e009883a 	mov	r4,fp
    86fc:	d9801515 	stw	r6,84(sp)
    8700:	000a1840 	call	a184 <__mcmp>
    8704:	d9801517 	ldw	r6,84(sp)
    8708:	8009883a 	mov	r4,r16
    870c:	d8801515 	stw	r2,84(sp)
    8710:	300b883a 	mov	r5,r6
    8714:	00098e00 	call	98e0 <_Bfree>
    8718:	d8801517 	ldw	r2,84(sp)
    871c:	103f6d1e 	bne	r2,zero,84d4 <_dtoa_r+0xd84>
    8720:	d9c00417 	ldw	r7,16(sp)
    8724:	383f6b1e 	bne	r7,zero,84d4 <_dtoa_r+0xd84>
    8728:	d8c00317 	ldw	r3,12(sp)
    872c:	183f691e 	bne	r3,zero,84d4 <_dtoa_r+0xd84>
    8730:	b807883a 	mov	r3,r23
    8734:	00800e44 	movi	r2,57
    8738:	ddc00717 	ldw	r23,28(sp)
    873c:	18814c26 	beq	r3,r2,8c70 <_dtoa_r+0x1520>
    8740:	057fe80e 	bge	zero,r21,86e4 <_dtoa_r+0xf94>
    8744:	b0c00c44 	addi	r3,r22,49
    8748:	003fe606 	br	86e4 <_dtoa_r+0xf94>
    874c:	880b883a 	mov	r5,r17
    8750:	8009883a 	mov	r4,r16
    8754:	01800284 	movi	r6,10
    8758:	000f883a 	mov	r7,zero
    875c:	00099080 	call	9908 <__multadd>
    8760:	1023883a 	mov	r17,r2
    8764:	1027883a 	mov	r19,r2
    8768:	a825883a 	mov	r18,r21
    876c:	003f4506 	br	8484 <_dtoa_r+0xd34>
    8770:	e009883a 	mov	r4,fp
    8774:	a00b883a 	mov	r5,r20
    8778:	000a1840 	call	a184 <__mcmp>
    877c:	103ebc0e 	bge	r2,zero,8270 <_dtoa_r+0xb20>
    8780:	e00b883a 	mov	r5,fp
    8784:	8009883a 	mov	r4,r16
    8788:	01800284 	movi	r6,10
    878c:	000f883a 	mov	r7,zero
    8790:	00099080 	call	9908 <__multadd>
    8794:	1039883a 	mov	fp,r2
    8798:	d8800617 	ldw	r2,24(sp)
    879c:	d8c00c17 	ldw	r3,48(sp)
    87a0:	10bfffc4 	addi	r2,r2,-1
    87a4:	d8800615 	stw	r2,24(sp)
    87a8:	1801571e 	bne	r3,zero,8d08 <_dtoa_r+0x15b8>
    87ac:	d9c00e17 	ldw	r7,56(sp)
    87b0:	d9c00915 	stw	r7,36(sp)
    87b4:	003eae06 	br	8270 <_dtoa_r+0xb20>
    87b8:	a0800417 	ldw	r2,16(r20)
    87bc:	10800104 	addi	r2,r2,4
    87c0:	1085883a 	add	r2,r2,r2
    87c4:	1085883a 	add	r2,r2,r2
    87c8:	a085883a 	add	r2,r20,r2
    87cc:	11000017 	ldw	r4,0(r2)
    87d0:	0009b500 	call	9b50 <__hi0bits>
    87d4:	00c00804 	movi	r3,32
    87d8:	1885c83a 	sub	r2,r3,r2
    87dc:	003e8306 	br	81ec <_dtoa_r+0xa9c>
    87e0:	d9c00417 	ldw	r7,16(sp)
    87e4:	00800084 	movi	r2,2
    87e8:	11fea30e 	bge	r2,r7,8278 <_dtoa_r+0xb28>
    87ec:	d8800917 	ldw	r2,36(sp)
    87f0:	103f8c1e 	bne	r2,zero,8624 <_dtoa_r+0xed4>
    87f4:	a00b883a 	mov	r5,r20
    87f8:	8009883a 	mov	r4,r16
    87fc:	01800144 	movi	r6,5
    8800:	000f883a 	mov	r7,zero
    8804:	00099080 	call	9908 <__multadd>
    8808:	e009883a 	mov	r4,fp
    880c:	100b883a 	mov	r5,r2
    8810:	1029883a 	mov	r20,r2
    8814:	000a1840 	call	a184 <__mcmp>
    8818:	00bf820e 	bge	zero,r2,8624 <_dtoa_r+0xed4>
    881c:	00800c44 	movi	r2,49
    8820:	b8800005 	stb	r2,0(r23)
    8824:	d8800617 	ldw	r2,24(sp)
    8828:	bd800044 	addi	r22,r23,1
    882c:	10800044 	addi	r2,r2,1
    8830:	d8800615 	stw	r2,24(sp)
    8834:	003f7f06 	br	8634 <_dtoa_r+0xee4>
    8838:	dc000417 	ldw	r16,16(sp)
    883c:	003d6506 	br	7dd4 <_dtoa_r+0x684>
    8840:	9009883a 	mov	r4,r18
    8844:	00100380 	call	10038 <__floatsidf>
    8848:	1009883a 	mov	r4,r2
    884c:	180b883a 	mov	r5,r3
    8850:	980d883a 	mov	r6,r19
    8854:	a00f883a 	mov	r7,r20
    8858:	000f9680 	call	f968 <__muldf3>
    885c:	1009883a 	mov	r4,r2
    8860:	180b883a 	mov	r5,r3
    8864:	000d883a 	mov	r6,zero
    8868:	01d00734 	movhi	r7,16412
    886c:	000f8b40 	call	f8b4 <__adddf3>
    8870:	057f3034 	movhi	r21,64704
    8874:	1025883a 	mov	r18,r2
    8878:	1d6b883a 	add	r21,r3,r21
    887c:	9809883a 	mov	r4,r19
    8880:	a00b883a 	mov	r5,r20
    8884:	000d883a 	mov	r6,zero
    8888:	01d00534 	movhi	r7,16404
    888c:	000f9080 	call	f908 <__subdf3>
    8890:	1009883a 	mov	r4,r2
    8894:	180b883a 	mov	r5,r3
    8898:	900d883a 	mov	r6,r18
    889c:	a80f883a 	mov	r7,r21
    88a0:	1027883a 	mov	r19,r2
    88a4:	1829883a 	mov	r20,r3
    88a8:	000feb80 	call	feb8 <__gtdf2>
    88ac:	00806616 	blt	zero,r2,8a48 <_dtoa_r+0x12f8>
    88b0:	a9e0003c 	xorhi	r7,r21,32768
    88b4:	9809883a 	mov	r4,r19
    88b8:	a00b883a 	mov	r5,r20
    88bc:	900d883a 	mov	r6,r18
    88c0:	000ff800 	call	ff80 <__ltdf2>
    88c4:	103d710e 	bge	r2,zero,7e8c <_dtoa_r+0x73c>
    88c8:	0029883a 	mov	r20,zero
    88cc:	002b883a 	mov	r21,zero
    88d0:	003f5406 	br	8624 <_dtoa_r+0xed4>
    88d4:	d9800a17 	ldw	r6,40(sp)
    88d8:	e00b883a 	mov	r5,fp
    88dc:	8009883a 	mov	r4,r16
    88e0:	0009efc0 	call	9efc <__pow5mult>
    88e4:	1039883a 	mov	fp,r2
    88e8:	003e2e06 	br	81a4 <_dtoa_r+0xa54>
    88ec:	d8000c15 	stw	zero,48(sp)
    88f0:	003f2006 	br	8574 <_dtoa_r+0xe24>
    88f4:	00800044 	movi	r2,1
    88f8:	d8800c15 	stw	r2,48(sp)
    88fc:	003c5d06 	br	7a74 <_dtoa_r+0x324>
    8900:	d8c00a17 	ldw	r3,40(sp)
    8904:	d9000b17 	ldw	r4,44(sp)
    8908:	dcc00a15 	stw	r19,40(sp)
    890c:	98c5c83a 	sub	r2,r19,r3
    8910:	2089883a 	add	r4,r4,r2
    8914:	d9000b15 	stw	r4,44(sp)
    8918:	0027883a 	mov	r19,zero
    891c:	003df206 	br	80e8 <_dtoa_r+0x998>
    8920:	d9000317 	ldw	r4,12(sp)
    8924:	8829883a 	mov	r20,r17
    8928:	04800084 	movi	r18,2
    892c:	d9001015 	stw	r4,64(sp)
    8930:	003c8106 	br	7b38 <_dtoa_r+0x3e8>
    8934:	04800044 	movi	r18,1
    8938:	dc800e15 	stw	r18,56(sp)
    893c:	dc800915 	stw	r18,36(sp)
    8940:	dc802115 	stw	r18,132(sp)
    8944:	003f1206 	br	8590 <_dtoa_r+0xe40>
    8948:	d8800617 	ldw	r2,24(sp)
    894c:	00abc83a 	sub	r21,zero,r2
    8950:	a800a426 	beq	r21,zero,8be4 <_dtoa_r+0x1494>
    8954:	a88003cc 	andi	r2,r21,15
    8958:	100490fa 	slli	r2,r2,3
    895c:	00c00074 	movhi	r3,1
    8960:	18d15704 	addi	r3,r3,17756
    8964:	d9000317 	ldw	r4,12(sp)
    8968:	1885883a 	add	r2,r3,r2
    896c:	11800017 	ldw	r6,0(r2)
    8970:	11c00117 	ldw	r7,4(r2)
    8974:	a82bd13a 	srai	r21,r21,4
    8978:	880b883a 	mov	r5,r17
    897c:	000f9680 	call	f968 <__muldf3>
    8980:	1027883a 	mov	r19,r2
    8984:	1829883a 	mov	r20,r3
    8988:	a800e826 	beq	r21,zero,8d2c <_dtoa_r+0x15dc>
    898c:	05800074 	movhi	r22,1
    8990:	b5914d04 	addi	r22,r22,17716
    8994:	04800084 	movi	r18,2
    8998:	a980004c 	andi	r6,r21,1
    899c:	1009883a 	mov	r4,r2
    89a0:	a82bd07a 	srai	r21,r21,1
    89a4:	180b883a 	mov	r5,r3
    89a8:	30000426 	beq	r6,zero,89bc <_dtoa_r+0x126c>
    89ac:	b1800017 	ldw	r6,0(r22)
    89b0:	b1c00117 	ldw	r7,4(r22)
    89b4:	94800044 	addi	r18,r18,1
    89b8:	000f9680 	call	f968 <__muldf3>
    89bc:	b5800204 	addi	r22,r22,8
    89c0:	a83ff51e 	bne	r21,zero,8998 <_dtoa_r+0x1248>
    89c4:	1027883a 	mov	r19,r2
    89c8:	1829883a 	mov	r20,r3
    89cc:	003c7306 	br	7b9c <_dtoa_r+0x44c>
    89d0:	21000044 	addi	r4,r4,1
    89d4:	11000005 	stb	r4,0(r2)
    89d8:	003e5c06 	br	834c <_dtoa_r+0xbfc>
    89dc:	a9400117 	ldw	r5,4(r21)
    89e0:	8009883a 	mov	r4,r16
    89e4:	00098380 	call	9838 <_Balloc>
    89e8:	a9800417 	ldw	r6,16(r21)
    89ec:	11000304 	addi	r4,r2,12
    89f0:	a9400304 	addi	r5,r21,12
    89f4:	31800084 	addi	r6,r6,2
    89f8:	318d883a 	add	r6,r6,r6
    89fc:	318d883a 	add	r6,r6,r6
    8a00:	1023883a 	mov	r17,r2
    8a04:	00033640 	call	3364 <memcpy>
    8a08:	8009883a 	mov	r4,r16
    8a0c:	880b883a 	mov	r5,r17
    8a10:	01800044 	movi	r6,1
    8a14:	000a0280 	call	a028 <__lshift>
    8a18:	1027883a 	mov	r19,r2
    8a1c:	003e8f06 	br	845c <_dtoa_r+0xd0c>
    8a20:	b807883a 	mov	r3,r23
    8a24:	00800e44 	movi	r2,57
    8a28:	ddc00717 	ldw	r23,28(sp)
    8a2c:	18809026 	beq	r3,r2,8c70 <_dtoa_r+0x1520>
    8a30:	18c00044 	addi	r3,r3,1
    8a34:	003f2b06 	br	86e4 <_dtoa_r+0xf94>
    8a38:	b807883a 	mov	r3,r23
    8a3c:	982b883a 	mov	r21,r19
    8a40:	ddc00717 	ldw	r23,28(sp)
    8a44:	003e2406 	br	82d8 <_dtoa_r+0xb88>
    8a48:	0029883a 	mov	r20,zero
    8a4c:	002b883a 	mov	r21,zero
    8a50:	003f7206 	br	881c <_dtoa_r+0x10cc>
    8a54:	593fffc4 	addi	r4,r11,-1
    8a58:	200490fa 	slli	r2,r4,3
    8a5c:	00c00074 	movhi	r3,1
    8a60:	18d15704 	addi	r3,r3,17756
    8a64:	d9001015 	stw	r4,64(sp)
    8a68:	1885883a 	add	r2,r3,r2
    8a6c:	11000017 	ldw	r4,0(r2)
    8a70:	11400117 	ldw	r5,4(r2)
    8a74:	900d883a 	mov	r6,r18
    8a78:	a80f883a 	mov	r7,r21
    8a7c:	dac01615 	stw	r11,88(sp)
    8a80:	000f9680 	call	f968 <__muldf3>
    8a84:	a00b883a 	mov	r5,r20
    8a88:	9809883a 	mov	r4,r19
    8a8c:	d8c01215 	stw	r3,72(sp)
    8a90:	d8801115 	stw	r2,68(sp)
    8a94:	001010c0 	call	1010c <__fixdfsi>
    8a98:	1009883a 	mov	r4,r2
    8a9c:	1025883a 	mov	r18,r2
    8aa0:	00100380 	call	10038 <__floatsidf>
    8aa4:	9809883a 	mov	r4,r19
    8aa8:	a00b883a 	mov	r5,r20
    8aac:	100d883a 	mov	r6,r2
    8ab0:	180f883a 	mov	r7,r3
    8ab4:	94800c04 	addi	r18,r18,48
    8ab8:	000f9080 	call	f908 <__subdf3>
    8abc:	bc800005 	stb	r18,0(r23)
    8ac0:	dac01617 	ldw	r11,88(sp)
    8ac4:	102b883a 	mov	r21,r2
    8ac8:	00800044 	movi	r2,1
    8acc:	bd800044 	addi	r22,r23,1
    8ad0:	1815883a 	mov	r10,r3
    8ad4:	58802226 	beq	r11,r2,8b60 <_dtoa_r+0x1410>
    8ad8:	bad7883a 	add	r11,r23,r11
    8adc:	dc001415 	stw	r16,80(sp)
    8ae0:	a805883a 	mov	r2,r21
    8ae4:	b027883a 	mov	r19,r22
    8ae8:	5821883a 	mov	r16,r11
    8aec:	882b883a 	mov	r21,r17
    8af0:	000d883a 	mov	r6,zero
    8af4:	01d00934 	movhi	r7,16420
    8af8:	1009883a 	mov	r4,r2
    8afc:	180b883a 	mov	r5,r3
    8b00:	000f9680 	call	f968 <__muldf3>
    8b04:	180b883a 	mov	r5,r3
    8b08:	1009883a 	mov	r4,r2
    8b0c:	1829883a 	mov	r20,r3
    8b10:	1023883a 	mov	r17,r2
    8b14:	001010c0 	call	1010c <__fixdfsi>
    8b18:	1009883a 	mov	r4,r2
    8b1c:	1025883a 	mov	r18,r2
    8b20:	00100380 	call	10038 <__floatsidf>
    8b24:	8809883a 	mov	r4,r17
    8b28:	a00b883a 	mov	r5,r20
    8b2c:	100d883a 	mov	r6,r2
    8b30:	180f883a 	mov	r7,r3
    8b34:	94800c04 	addi	r18,r18,48
    8b38:	000f9080 	call	f908 <__subdf3>
    8b3c:	9cc00044 	addi	r19,r19,1
    8b40:	9cbfffc5 	stb	r18,-1(r19)
    8b44:	9c3fea1e 	bne	r19,r16,8af0 <_dtoa_r+0x13a0>
    8b48:	1815883a 	mov	r10,r3
    8b4c:	d8c01017 	ldw	r3,64(sp)
    8b50:	dc001417 	ldw	r16,80(sp)
    8b54:	a823883a 	mov	r17,r21
    8b58:	b0ed883a 	add	r22,r22,r3
    8b5c:	102b883a 	mov	r21,r2
    8b60:	d9001117 	ldw	r4,68(sp)
    8b64:	d9401217 	ldw	r5,72(sp)
    8b68:	000d883a 	mov	r6,zero
    8b6c:	01cff834 	movhi	r7,16352
    8b70:	da801515 	stw	r10,84(sp)
    8b74:	000f8b40 	call	f8b4 <__adddf3>
    8b78:	da801517 	ldw	r10,84(sp)
    8b7c:	1009883a 	mov	r4,r2
    8b80:	180b883a 	mov	r5,r3
    8b84:	500f883a 	mov	r7,r10
    8b88:	a80d883a 	mov	r6,r21
    8b8c:	000ff800 	call	ff80 <__ltdf2>
    8b90:	da801517 	ldw	r10,84(sp)
    8b94:	10003b0e 	bge	r2,zero,8c84 <_dtoa_r+0x1534>
    8b98:	d9c01317 	ldw	r7,76(sp)
    8b9c:	b53fffc3 	ldbu	r20,-1(r22)
    8ba0:	d9c00615 	stw	r7,24(sp)
    8ba4:	003d3106 	br	806c <_dtoa_r+0x91c>
    8ba8:	d8800817 	ldw	r2,32(sp)
    8bac:	11e5c83a 	sub	r18,r2,r7
    8bb0:	0005883a 	mov	r2,zero
    8bb4:	003d5006 	br	80f8 <_dtoa_r+0x9a8>
    8bb8:	05800044 	movi	r22,1
    8bbc:	003dc406 	br	82d0 <_dtoa_r+0xb80>
    8bc0:	a5000044 	addi	r20,r20,1
    8bc4:	15000005 	stb	r20,0(r2)
    8bc8:	003c8206 	br	7dd4 <_dtoa_r+0x684>
    8bcc:	d8800217 	ldw	r2,8(sp)
    8bd0:	00c00d84 	movi	r3,54
    8bd4:	dcc00a17 	ldw	r19,40(sp)
    8bd8:	1885c83a 	sub	r2,r3,r2
    8bdc:	dc800817 	ldw	r18,32(sp)
    8be0:	003d4506 	br	80f8 <_dtoa_r+0x9a8>
    8be4:	dcc00317 	ldw	r19,12(sp)
    8be8:	8829883a 	mov	r20,r17
    8bec:	04800084 	movi	r18,2
    8bf0:	003bea06 	br	7b9c <_dtoa_r+0x44c>
    8bf4:	d9000917 	ldw	r4,36(sp)
    8bf8:	203f1126 	beq	r4,zero,8840 <_dtoa_r+0x10f0>
    8bfc:	d9c00e17 	ldw	r7,56(sp)
    8c00:	01fca20e 	bge	zero,r7,7e8c <_dtoa_r+0x73c>
    8c04:	a00b883a 	mov	r5,r20
    8c08:	9809883a 	mov	r4,r19
    8c0c:	000d883a 	mov	r6,zero
    8c10:	01d00934 	movhi	r7,16420
    8c14:	000f9680 	call	f968 <__muldf3>
    8c18:	91000044 	addi	r4,r18,1
    8c1c:	1027883a 	mov	r19,r2
    8c20:	1829883a 	mov	r20,r3
    8c24:	00100380 	call	10038 <__floatsidf>
    8c28:	9809883a 	mov	r4,r19
    8c2c:	a00b883a 	mov	r5,r20
    8c30:	100d883a 	mov	r6,r2
    8c34:	180f883a 	mov	r7,r3
    8c38:	000f9680 	call	f968 <__muldf3>
    8c3c:	1009883a 	mov	r4,r2
    8c40:	180b883a 	mov	r5,r3
    8c44:	000d883a 	mov	r6,zero
    8c48:	01d00734 	movhi	r7,16412
    8c4c:	000f8b40 	call	f8b4 <__adddf3>
    8c50:	1025883a 	mov	r18,r2
    8c54:	d8800617 	ldw	r2,24(sp)
    8c58:	057f3034 	movhi	r21,64704
    8c5c:	1d6b883a 	add	r21,r3,r21
    8c60:	10bfffc4 	addi	r2,r2,-1
    8c64:	d8801315 	stw	r2,76(sp)
    8c68:	dac00e17 	ldw	r11,56(sp)
    8c6c:	003be706 	br	7c0c <_dtoa_r+0x4bc>
    8c70:	01000e44 	movi	r4,57
    8c74:	91000005 	stb	r4,0(r18)
    8c78:	95800044 	addi	r22,r18,1
    8c7c:	982b883a 	mov	r21,r19
    8c80:	003da106 	br	8308 <_dtoa_r+0xbb8>
    8c84:	d9801117 	ldw	r6,68(sp)
    8c88:	d9c01217 	ldw	r7,72(sp)
    8c8c:	0009883a 	mov	r4,zero
    8c90:	014ff834 	movhi	r5,16352
    8c94:	da801515 	stw	r10,84(sp)
    8c98:	000f9080 	call	f908 <__subdf3>
    8c9c:	da801517 	ldw	r10,84(sp)
    8ca0:	1009883a 	mov	r4,r2
    8ca4:	180b883a 	mov	r5,r3
    8ca8:	a80d883a 	mov	r6,r21
    8cac:	500f883a 	mov	r7,r10
    8cb0:	000feb80 	call	feb8 <__gtdf2>
    8cb4:	00bc750e 	bge	zero,r2,7e8c <_dtoa_r+0x73c>
    8cb8:	01000c04 	movi	r4,48
    8cbc:	00000106 	br	8cc4 <_dtoa_r+0x1574>
    8cc0:	102d883a 	mov	r22,r2
    8cc4:	b0bfffc4 	addi	r2,r22,-1
    8cc8:	10c00007 	ldb	r3,0(r2)
    8ccc:	193ffc26 	beq	r3,r4,8cc0 <_dtoa_r+0x1570>
    8cd0:	d8801317 	ldw	r2,76(sp)
    8cd4:	d8800615 	stw	r2,24(sp)
    8cd8:	003c3e06 	br	7dd4 <_dtoa_r+0x684>
    8cdc:	d9001317 	ldw	r4,76(sp)
    8ce0:	df001117 	ldw	fp,68(sp)
    8ce4:	d9000615 	stw	r4,24(sp)
    8ce8:	003ce006 	br	806c <_dtoa_r+0x91c>
    8cec:	df001117 	ldw	fp,68(sp)
    8cf0:	dc401217 	ldw	r17,72(sp)
    8cf4:	003c6506 	br	7e8c <_dtoa_r+0x73c>
    8cf8:	103e7a1e 	bne	r2,zero,86e4 <_dtoa_r+0xf94>
    8cfc:	1880004c 	andi	r2,r3,1
    8d00:	103e7826 	beq	r2,zero,86e4 <_dtoa_r+0xf94>
    8d04:	003e7406 	br	86d8 <_dtoa_r+0xf88>
    8d08:	8009883a 	mov	r4,r16
    8d0c:	a80b883a 	mov	r5,r21
    8d10:	01800284 	movi	r6,10
    8d14:	000f883a 	mov	r7,zero
    8d18:	00099080 	call	9908 <__multadd>
    8d1c:	d9000e17 	ldw	r4,56(sp)
    8d20:	102b883a 	mov	r21,r2
    8d24:	d9000915 	stw	r4,36(sp)
    8d28:	003d5106 	br	8270 <_dtoa_r+0xb20>
    8d2c:	04800084 	movi	r18,2
    8d30:	003b9a06 	br	7b9c <_dtoa_r+0x44c>
    8d34:	d8c01317 	ldw	r3,76(sp)
    8d38:	d8c00615 	stw	r3,24(sp)
    8d3c:	003ccb06 	br	806c <_dtoa_r+0x91c>
    8d40:	d8c01317 	ldw	r3,76(sp)
    8d44:	d8c00615 	stw	r3,24(sp)
    8d48:	003c2206 	br	7dd4 <_dtoa_r+0x684>
    8d4c:	20fd3826 	beq	r4,r3,8230 <_dtoa_r+0xae0>
    8d50:	00c00f04 	movi	r3,60
    8d54:	1885c83a 	sub	r2,r3,r2
    8d58:	003da906 	br	8400 <_dtoa_r+0xcb0>
    8d5c:	000b883a 	mov	r5,zero
    8d60:	003b5406 	br	7ab4 <_dtoa_r+0x364>
    8d64:	04c00044 	movi	r19,1
    8d68:	003b3b06 	br	7a58 <_dtoa_r+0x308>

00008d6c <__sflags>:
    8d6c:	28800007 	ldb	r2,0(r5)
    8d70:	00c01c84 	movi	r3,114
    8d74:	10c01826 	beq	r2,r3,8dd8 <__sflags+0x6c>
    8d78:	00c01dc4 	movi	r3,119
    8d7c:	10c01226 	beq	r2,r3,8dc8 <__sflags+0x5c>
    8d80:	00c01844 	movi	r3,97
    8d84:	10c00426 	beq	r2,r3,8d98 <__sflags+0x2c>
    8d88:	00800584 	movi	r2,22
    8d8c:	20800015 	stw	r2,0(r4)
    8d90:	0005883a 	mov	r2,zero
    8d94:	f800283a 	ret
    8d98:	01c08204 	movi	r7,520
    8d9c:	01000044 	movi	r4,1
    8da0:	00804204 	movi	r2,264
    8da4:	28c00047 	ldb	r3,1(r5)
    8da8:	18000426 	beq	r3,zero,8dbc <__sflags+0x50>
    8dac:	02000ac4 	movi	r8,43
    8db0:	1a000d26 	beq	r3,r8,8de8 <__sflags+0x7c>
    8db4:	28c00087 	ldb	r3,2(r5)
    8db8:	1a000b26 	beq	r3,r8,8de8 <__sflags+0x7c>
    8dbc:	21c8b03a 	or	r4,r4,r7
    8dc0:	31000015 	stw	r4,0(r6)
    8dc4:	f800283a 	ret
    8dc8:	01c18004 	movi	r7,1536
    8dcc:	01000044 	movi	r4,1
    8dd0:	00800204 	movi	r2,8
    8dd4:	003ff306 	br	8da4 <__sflags+0x38>
    8dd8:	000f883a 	mov	r7,zero
    8ddc:	0009883a 	mov	r4,zero
    8de0:	00800104 	movi	r2,4
    8de4:	003fef06 	br	8da4 <__sflags+0x38>
    8de8:	00fff8c4 	movi	r3,-29
    8dec:	01000084 	movi	r4,2
    8df0:	10c4703a 	and	r2,r2,r3
    8df4:	21c8b03a 	or	r4,r4,r7
    8df8:	10800414 	ori	r2,r2,16
    8dfc:	31000015 	stw	r4,0(r6)
    8e00:	f800283a 	ret

00008e04 <__sfvwrite_r>:
    8e04:	30800217 	ldw	r2,8(r6)
    8e08:	defff504 	addi	sp,sp,-44
    8e0c:	dd400615 	stw	r21,24(sp)
    8e10:	dd000515 	stw	r20,20(sp)
    8e14:	dc000115 	stw	r16,4(sp)
    8e18:	dfc00a15 	stw	ra,40(sp)
    8e1c:	df000915 	stw	fp,36(sp)
    8e20:	ddc00815 	stw	r23,32(sp)
    8e24:	dd800715 	stw	r22,28(sp)
    8e28:	dcc00415 	stw	r19,16(sp)
    8e2c:	dc800315 	stw	r18,12(sp)
    8e30:	dc400215 	stw	r17,8(sp)
    8e34:	3029883a 	mov	r20,r6
    8e38:	202b883a 	mov	r21,r4
    8e3c:	2821883a 	mov	r16,r5
    8e40:	10002126 	beq	r2,zero,8ec8 <__sfvwrite_r+0xc4>
    8e44:	2880030b 	ldhu	r2,12(r5)
    8e48:	10c0020c 	andi	r3,r2,8
    8e4c:	18ffffcc 	andi	r3,r3,65535
    8e50:	18e0001c 	xori	r3,r3,32768
    8e54:	18e00004 	addi	r3,r3,-32768
    8e58:	18002826 	beq	r3,zero,8efc <__sfvwrite_r+0xf8>
    8e5c:	28c00417 	ldw	r3,16(r5)
    8e60:	18002626 	beq	r3,zero,8efc <__sfvwrite_r+0xf8>
    8e64:	10c0008c 	andi	r3,r2,2
    8e68:	18ffffcc 	andi	r3,r3,65535
    8e6c:	18e0001c 	xori	r3,r3,32768
    8e70:	18e00004 	addi	r3,r3,-32768
    8e74:	a4400017 	ldw	r17,0(r20)
    8e78:	18002b26 	beq	r3,zero,8f28 <__sfvwrite_r+0x124>
    8e7c:	0027883a 	mov	r19,zero
    8e80:	0025883a 	mov	r18,zero
    8e84:	05810004 	movi	r22,1024
    8e88:	980d883a 	mov	r6,r19
    8e8c:	a809883a 	mov	r4,r21
    8e90:	90004f26 	beq	r18,zero,8fd0 <__sfvwrite_r+0x1cc>
    8e94:	900f883a 	mov	r7,r18
    8e98:	81400717 	ldw	r5,28(r16)
    8e9c:	b480012e 	bgeu	r22,r18,8ea4 <__sfvwrite_r+0xa0>
    8ea0:	01c10004 	movi	r7,1024
    8ea4:	80800917 	ldw	r2,36(r16)
    8ea8:	103ee83a 	callr	r2
    8eac:	0080540e 	bge	zero,r2,9000 <__sfvwrite_r+0x1fc>
    8eb0:	a0c00217 	ldw	r3,8(r20)
    8eb4:	98a7883a 	add	r19,r19,r2
    8eb8:	90a5c83a 	sub	r18,r18,r2
    8ebc:	1885c83a 	sub	r2,r3,r2
    8ec0:	a0800215 	stw	r2,8(r20)
    8ec4:	103ff01e 	bne	r2,zero,8e88 <__sfvwrite_r+0x84>
    8ec8:	0005883a 	mov	r2,zero
    8ecc:	dfc00a17 	ldw	ra,40(sp)
    8ed0:	df000917 	ldw	fp,36(sp)
    8ed4:	ddc00817 	ldw	r23,32(sp)
    8ed8:	dd800717 	ldw	r22,28(sp)
    8edc:	dd400617 	ldw	r21,24(sp)
    8ee0:	dd000517 	ldw	r20,20(sp)
    8ee4:	dcc00417 	ldw	r19,16(sp)
    8ee8:	dc800317 	ldw	r18,12(sp)
    8eec:	dc400217 	ldw	r17,8(sp)
    8ef0:	dc000117 	ldw	r16,4(sp)
    8ef4:	dec00b04 	addi	sp,sp,44
    8ef8:	f800283a 	ret
    8efc:	a809883a 	mov	r4,r21
    8f00:	800b883a 	mov	r5,r16
    8f04:	000733c0 	call	733c <__swsetup_r>
    8f08:	1000f01e 	bne	r2,zero,92cc <__sfvwrite_r+0x4c8>
    8f0c:	8080030b 	ldhu	r2,12(r16)
    8f10:	a4400017 	ldw	r17,0(r20)
    8f14:	10c0008c 	andi	r3,r2,2
    8f18:	18ffffcc 	andi	r3,r3,65535
    8f1c:	18e0001c 	xori	r3,r3,32768
    8f20:	18e00004 	addi	r3,r3,-32768
    8f24:	183fd51e 	bne	r3,zero,8e7c <__sfvwrite_r+0x78>
    8f28:	10c0004c 	andi	r3,r2,1
    8f2c:	002d883a 	mov	r22,zero
    8f30:	1800381e 	bne	r3,zero,9014 <__sfvwrite_r+0x210>
    8f34:	0025883a 	mov	r18,zero
    8f38:	90002126 	beq	r18,zero,8fc0 <__sfvwrite_r+0x1bc>
    8f3c:	10c0800c 	andi	r3,r2,512
    8f40:	18ffffcc 	andi	r3,r3,65535
    8f44:	18e0001c 	xori	r3,r3,32768
    8f48:	18e00004 	addi	r3,r3,-32768
    8f4c:	84c00217 	ldw	r19,8(r16)
    8f50:	18006b26 	beq	r3,zero,9100 <__sfvwrite_r+0x2fc>
    8f54:	980f883a 	mov	r7,r19
    8f58:	94c08636 	bltu	r18,r19,9174 <__sfvwrite_r+0x370>
    8f5c:	10c1200c 	andi	r3,r2,1152
    8f60:	18009f1e 	bne	r3,zero,91e0 <__sfvwrite_r+0x3dc>
    8f64:	81000017 	ldw	r4,0(r16)
    8f68:	982f883a 	mov	r23,r19
    8f6c:	9039883a 	mov	fp,r18
    8f70:	9027883a 	mov	r19,r18
    8f74:	380d883a 	mov	r6,r7
    8f78:	b00b883a 	mov	r5,r22
    8f7c:	d9c00015 	stw	r7,0(sp)
    8f80:	00096ac0 	call	96ac <memmove>
    8f84:	d9c00017 	ldw	r7,0(sp)
    8f88:	81000217 	ldw	r4,8(r16)
    8f8c:	80800017 	ldw	r2,0(r16)
    8f90:	25efc83a 	sub	r23,r4,r23
    8f94:	11cf883a 	add	r7,r2,r7
    8f98:	85c00215 	stw	r23,8(r16)
    8f9c:	81c00015 	stw	r7,0(r16)
    8fa0:	a0800217 	ldw	r2,8(r20)
    8fa4:	b72d883a 	add	r22,r22,fp
    8fa8:	9725c83a 	sub	r18,r18,fp
    8fac:	14e7c83a 	sub	r19,r2,r19
    8fb0:	a4c00215 	stw	r19,8(r20)
    8fb4:	983fc426 	beq	r19,zero,8ec8 <__sfvwrite_r+0xc4>
    8fb8:	8080030b 	ldhu	r2,12(r16)
    8fbc:	903fdf1e 	bne	r18,zero,8f3c <__sfvwrite_r+0x138>
    8fc0:	8d800017 	ldw	r22,0(r17)
    8fc4:	8c800117 	ldw	r18,4(r17)
    8fc8:	8c400204 	addi	r17,r17,8
    8fcc:	003fda06 	br	8f38 <__sfvwrite_r+0x134>
    8fd0:	8cc00017 	ldw	r19,0(r17)
    8fd4:	8c800117 	ldw	r18,4(r17)
    8fd8:	8c400204 	addi	r17,r17,8
    8fdc:	003faa06 	br	8e88 <__sfvwrite_r+0x84>
    8fe0:	000aaa00 	call	aaa0 <_realloc_r>
    8fe4:	102f883a 	mov	r23,r2
    8fe8:	10009f1e 	bne	r2,zero,9268 <__sfvwrite_r+0x464>
    8fec:	81400417 	ldw	r5,16(r16)
    8ff0:	a809883a 	mov	r4,r21
    8ff4:	00020840 	call	2084 <_free_r>
    8ff8:	00800304 	movi	r2,12
    8ffc:	a8800015 	stw	r2,0(r21)
    9000:	80c0030b 	ldhu	r3,12(r16)
    9004:	00bfffc4 	movi	r2,-1
    9008:	18c01014 	ori	r3,r3,64
    900c:	80c0030d 	sth	r3,12(r16)
    9010:	003fae06 	br	8ecc <__sfvwrite_r+0xc8>
    9014:	0007883a 	mov	r3,zero
    9018:	0039883a 	mov	fp,zero
    901c:	0025883a 	mov	r18,zero
    9020:	90001e26 	beq	r18,zero,909c <__sfvwrite_r+0x298>
    9024:	18006526 	beq	r3,zero,91bc <__sfvwrite_r+0x3b8>
    9028:	b02f883a 	mov	r23,r22
    902c:	9580012e 	bgeu	r18,r22,9034 <__sfvwrite_r+0x230>
    9030:	902f883a 	mov	r23,r18
    9034:	81000017 	ldw	r4,0(r16)
    9038:	80800417 	ldw	r2,16(r16)
    903c:	84c00217 	ldw	r19,8(r16)
    9040:	81c00517 	ldw	r7,20(r16)
    9044:	1100022e 	bgeu	r2,r4,9050 <__sfvwrite_r+0x24c>
    9048:	99e7883a 	add	r19,r19,r7
    904c:	9dc01816 	blt	r19,r23,90b0 <__sfvwrite_r+0x2ac>
    9050:	b9c03b16 	blt	r23,r7,9140 <__sfvwrite_r+0x33c>
    9054:	80800917 	ldw	r2,36(r16)
    9058:	81400717 	ldw	r5,28(r16)
    905c:	a809883a 	mov	r4,r21
    9060:	d8c00015 	stw	r3,0(sp)
    9064:	e00d883a 	mov	r6,fp
    9068:	103ee83a 	callr	r2
    906c:	1027883a 	mov	r19,r2
    9070:	d8c00017 	ldw	r3,0(sp)
    9074:	00bfe20e 	bge	zero,r2,9000 <__sfvwrite_r+0x1fc>
    9078:	b4edc83a 	sub	r22,r22,r19
    907c:	b0001a26 	beq	r22,zero,90e8 <__sfvwrite_r+0x2e4>
    9080:	a0800217 	ldw	r2,8(r20)
    9084:	e4f9883a 	add	fp,fp,r19
    9088:	94e5c83a 	sub	r18,r18,r19
    908c:	14e7c83a 	sub	r19,r2,r19
    9090:	a4c00215 	stw	r19,8(r20)
    9094:	983f8c26 	beq	r19,zero,8ec8 <__sfvwrite_r+0xc4>
    9098:	903fe21e 	bne	r18,zero,9024 <__sfvwrite_r+0x220>
    909c:	8f000017 	ldw	fp,0(r17)
    90a0:	8c800117 	ldw	r18,4(r17)
    90a4:	0007883a 	mov	r3,zero
    90a8:	8c400204 	addi	r17,r17,8
    90ac:	003fdc06 	br	9020 <__sfvwrite_r+0x21c>
    90b0:	e00b883a 	mov	r5,fp
    90b4:	980d883a 	mov	r6,r19
    90b8:	d8c00015 	stw	r3,0(sp)
    90bc:	00096ac0 	call	96ac <memmove>
    90c0:	80800017 	ldw	r2,0(r16)
    90c4:	a809883a 	mov	r4,r21
    90c8:	800b883a 	mov	r5,r16
    90cc:	14c5883a 	add	r2,r2,r19
    90d0:	80800015 	stw	r2,0(r16)
    90d4:	000167c0 	call	167c <_fflush_r>
    90d8:	d8c00017 	ldw	r3,0(sp)
    90dc:	103fc81e 	bne	r2,zero,9000 <__sfvwrite_r+0x1fc>
    90e0:	b4edc83a 	sub	r22,r22,r19
    90e4:	b03fe61e 	bne	r22,zero,9080 <__sfvwrite_r+0x27c>
    90e8:	a809883a 	mov	r4,r21
    90ec:	800b883a 	mov	r5,r16
    90f0:	000167c0 	call	167c <_fflush_r>
    90f4:	103fc21e 	bne	r2,zero,9000 <__sfvwrite_r+0x1fc>
    90f8:	0007883a 	mov	r3,zero
    90fc:	003fe006 	br	9080 <__sfvwrite_r+0x27c>
    9100:	81000017 	ldw	r4,0(r16)
    9104:	80800417 	ldw	r2,16(r16)
    9108:	1100022e 	bgeu	r2,r4,9114 <__sfvwrite_r+0x310>
    910c:	9839883a 	mov	fp,r19
    9110:	9c806036 	bltu	r19,r18,9294 <__sfvwrite_r+0x490>
    9114:	81c00517 	ldw	r7,20(r16)
    9118:	91c01c36 	bltu	r18,r7,918c <__sfvwrite_r+0x388>
    911c:	80800917 	ldw	r2,36(r16)
    9120:	81400717 	ldw	r5,28(r16)
    9124:	a809883a 	mov	r4,r21
    9128:	b00d883a 	mov	r6,r22
    912c:	103ee83a 	callr	r2
    9130:	1027883a 	mov	r19,r2
    9134:	00bfb20e 	bge	zero,r2,9000 <__sfvwrite_r+0x1fc>
    9138:	1039883a 	mov	fp,r2
    913c:	003f9806 	br	8fa0 <__sfvwrite_r+0x19c>
    9140:	b80d883a 	mov	r6,r23
    9144:	e00b883a 	mov	r5,fp
    9148:	d8c00015 	stw	r3,0(sp)
    914c:	00096ac0 	call	96ac <memmove>
    9150:	80800217 	ldw	r2,8(r16)
    9154:	81000017 	ldw	r4,0(r16)
    9158:	b827883a 	mov	r19,r23
    915c:	15c5c83a 	sub	r2,r2,r23
    9160:	25ef883a 	add	r23,r4,r23
    9164:	80800215 	stw	r2,8(r16)
    9168:	85c00015 	stw	r23,0(r16)
    916c:	d8c00017 	ldw	r3,0(sp)
    9170:	003fc106 	br	9078 <__sfvwrite_r+0x274>
    9174:	81000017 	ldw	r4,0(r16)
    9178:	902f883a 	mov	r23,r18
    917c:	9039883a 	mov	fp,r18
    9180:	9027883a 	mov	r19,r18
    9184:	900f883a 	mov	r7,r18
    9188:	003f7a06 	br	8f74 <__sfvwrite_r+0x170>
    918c:	b00b883a 	mov	r5,r22
    9190:	900d883a 	mov	r6,r18
    9194:	00096ac0 	call	96ac <memmove>
    9198:	80c00217 	ldw	r3,8(r16)
    919c:	80800017 	ldw	r2,0(r16)
    91a0:	9027883a 	mov	r19,r18
    91a4:	1c87c83a 	sub	r3,r3,r18
    91a8:	1485883a 	add	r2,r2,r18
    91ac:	80c00215 	stw	r3,8(r16)
    91b0:	80800015 	stw	r2,0(r16)
    91b4:	9039883a 	mov	fp,r18
    91b8:	003f7906 	br	8fa0 <__sfvwrite_r+0x19c>
    91bc:	e009883a 	mov	r4,fp
    91c0:	01400284 	movi	r5,10
    91c4:	900d883a 	mov	r6,r18
    91c8:	00095b40 	call	95b4 <memchr>
    91cc:	10003c26 	beq	r2,zero,92c0 <__sfvwrite_r+0x4bc>
    91d0:	15800044 	addi	r22,r2,1
    91d4:	b72dc83a 	sub	r22,r22,fp
    91d8:	00c00044 	movi	r3,1
    91dc:	003f9206 	br	9028 <__sfvwrite_r+0x224>
    91e0:	81000517 	ldw	r4,20(r16)
    91e4:	81400417 	ldw	r5,16(r16)
    91e8:	80c00017 	ldw	r3,0(r16)
    91ec:	210d883a 	add	r6,r4,r4
    91f0:	3109883a 	add	r4,r6,r4
    91f4:	2026d7fa 	srli	r19,r4,31
    91f8:	1979c83a 	sub	fp,r3,r5
    91fc:	e1800044 	addi	r6,fp,1
    9200:	9909883a 	add	r4,r19,r4
    9204:	2027d07a 	srai	r19,r4,1
    9208:	3489883a 	add	r4,r6,r18
    920c:	980d883a 	mov	r6,r19
    9210:	9900022e 	bgeu	r19,r4,921c <__sfvwrite_r+0x418>
    9214:	2027883a 	mov	r19,r4
    9218:	200d883a 	mov	r6,r4
    921c:	1081000c 	andi	r2,r2,1024
    9220:	10bfffcc 	andi	r2,r2,65535
    9224:	10a0001c 	xori	r2,r2,32768
    9228:	10a00004 	addi	r2,r2,-32768
    922c:	a809883a 	mov	r4,r21
    9230:	103f6b26 	beq	r2,zero,8fe0 <__sfvwrite_r+0x1dc>
    9234:	300b883a 	mov	r5,r6
    9238:	0002be00 	call	2be0 <_malloc_r>
    923c:	102f883a 	mov	r23,r2
    9240:	103f6d26 	beq	r2,zero,8ff8 <__sfvwrite_r+0x1f4>
    9244:	81400417 	ldw	r5,16(r16)
    9248:	1009883a 	mov	r4,r2
    924c:	e00d883a 	mov	r6,fp
    9250:	00033640 	call	3364 <memcpy>
    9254:	8080030b 	ldhu	r2,12(r16)
    9258:	00fedfc4 	movi	r3,-1153
    925c:	10c4703a 	and	r2,r2,r3
    9260:	10802014 	ori	r2,r2,128
    9264:	8080030d 	sth	r2,12(r16)
    9268:	bf09883a 	add	r4,r23,fp
    926c:	9f07c83a 	sub	r3,r19,fp
    9270:	85c00415 	stw	r23,16(r16)
    9274:	84c00515 	stw	r19,20(r16)
    9278:	81000015 	stw	r4,0(r16)
    927c:	902f883a 	mov	r23,r18
    9280:	80c00215 	stw	r3,8(r16)
    9284:	9039883a 	mov	fp,r18
    9288:	9027883a 	mov	r19,r18
    928c:	900f883a 	mov	r7,r18
    9290:	003f3806 	br	8f74 <__sfvwrite_r+0x170>
    9294:	b00b883a 	mov	r5,r22
    9298:	980d883a 	mov	r6,r19
    929c:	00096ac0 	call	96ac <memmove>
    92a0:	80800017 	ldw	r2,0(r16)
    92a4:	a809883a 	mov	r4,r21
    92a8:	800b883a 	mov	r5,r16
    92ac:	14c5883a 	add	r2,r2,r19
    92b0:	80800015 	stw	r2,0(r16)
    92b4:	000167c0 	call	167c <_fflush_r>
    92b8:	103f3926 	beq	r2,zero,8fa0 <__sfvwrite_r+0x19c>
    92bc:	003f5006 	br	9000 <__sfvwrite_r+0x1fc>
    92c0:	95800044 	addi	r22,r18,1
    92c4:	00c00044 	movi	r3,1
    92c8:	003f5706 	br	9028 <__sfvwrite_r+0x224>
    92cc:	80c0030b 	ldhu	r3,12(r16)
    92d0:	00bfffc4 	movi	r2,-1
    92d4:	18c01014 	ori	r3,r3,64
    92d8:	80c0030d 	sth	r3,12(r16)
    92dc:	00c00244 	movi	r3,9
    92e0:	a8c00015 	stw	r3,0(r21)
    92e4:	003ef906 	br	8ecc <__sfvwrite_r+0xc8>

000092e8 <_isatty_r>:
    92e8:	defffd04 	addi	sp,sp,-12
    92ec:	dc400115 	stw	r17,4(sp)
    92f0:	dc000015 	stw	r16,0(sp)
    92f4:	2023883a 	mov	r17,r4
    92f8:	04000074 	movhi	r16,1
    92fc:	841fac04 	addi	r16,r16,32432
    9300:	2809883a 	mov	r4,r5
    9304:	dfc00215 	stw	ra,8(sp)
    9308:	80000015 	stw	zero,0(r16)
    930c:	0010f2c0 	call	10f2c <isatty>
    9310:	00ffffc4 	movi	r3,-1
    9314:	10c00526 	beq	r2,r3,932c <_isatty_r+0x44>
    9318:	dfc00217 	ldw	ra,8(sp)
    931c:	dc400117 	ldw	r17,4(sp)
    9320:	dc000017 	ldw	r16,0(sp)
    9324:	dec00304 	addi	sp,sp,12
    9328:	f800283a 	ret
    932c:	80c00017 	ldw	r3,0(r16)
    9330:	183ff926 	beq	r3,zero,9318 <_isatty_r+0x30>
    9334:	88c00015 	stw	r3,0(r17)
    9338:	dfc00217 	ldw	ra,8(sp)
    933c:	dc400117 	ldw	r17,4(sp)
    9340:	dc000017 	ldw	r16,0(sp)
    9344:	dec00304 	addi	sp,sp,12
    9348:	f800283a 	ret

0000934c <iswspace>:
    934c:	00803fc4 	movi	r2,255
    9350:	11000a36 	bltu	r2,r4,937c <iswspace+0x30>
    9354:	00800074 	movhi	r2,1
    9358:	1098b104 	addi	r2,r2,25284
    935c:	10800017 	ldw	r2,0(r2)
    9360:	1109883a 	add	r4,r2,r4
    9364:	20800003 	ldbu	r2,0(r4)
    9368:	1080020c 	andi	r2,r2,8
    936c:	10803fcc 	andi	r2,r2,255
    9370:	1080201c 	xori	r2,r2,128
    9374:	10bfe004 	addi	r2,r2,-128
    9378:	f800283a 	ret
    937c:	0005883a 	mov	r2,zero
    9380:	f800283a 	ret

00009384 <_setlocale_r>:
    9384:	defffc04 	addi	sp,sp,-16
    9388:	dc800215 	stw	r18,8(sp)
    938c:	dc400115 	stw	r17,4(sp)
    9390:	dc000015 	stw	r16,0(sp)
    9394:	dfc00315 	stw	ra,12(sp)
    9398:	3021883a 	mov	r16,r6
    939c:	2023883a 	mov	r17,r4
    93a0:	2825883a 	mov	r18,r5
    93a4:	30001626 	beq	r6,zero,9400 <_setlocale_r+0x7c>
    93a8:	3009883a 	mov	r4,r6
    93ac:	01400074 	movhi	r5,1
    93b0:	29506904 	addi	r5,r5,16804
    93b4:	000b2900 	call	b290 <strcmp>
    93b8:	10000a1e 	bne	r2,zero,93e4 <_setlocale_r+0x60>
    93bc:	8c800c15 	stw	r18,48(r17)
    93c0:	8c000d15 	stw	r16,52(r17)
    93c4:	00800074 	movhi	r2,1
    93c8:	10906904 	addi	r2,r2,16804
    93cc:	dfc00317 	ldw	ra,12(sp)
    93d0:	dc800217 	ldw	r18,8(sp)
    93d4:	dc400117 	ldw	r17,4(sp)
    93d8:	dc000017 	ldw	r16,0(sp)
    93dc:	dec00404 	addi	sp,sp,16
    93e0:	f800283a 	ret
    93e4:	8009883a 	mov	r4,r16
    93e8:	01400074 	movhi	r5,1
    93ec:	29507304 	addi	r5,r5,16844
    93f0:	000b2900 	call	b290 <strcmp>
    93f4:	103ff126 	beq	r2,zero,93bc <_setlocale_r+0x38>
    93f8:	0005883a 	mov	r2,zero
    93fc:	003ff306 	br	93cc <_setlocale_r+0x48>
    9400:	00800074 	movhi	r2,1
    9404:	10906904 	addi	r2,r2,16804
    9408:	dfc00317 	ldw	ra,12(sp)
    940c:	dc800217 	ldw	r18,8(sp)
    9410:	dc400117 	ldw	r17,4(sp)
    9414:	dc000017 	ldw	r16,0(sp)
    9418:	dec00404 	addi	sp,sp,16
    941c:	f800283a 	ret

00009420 <__locale_charset>:
    9420:	00800074 	movhi	r2,1
    9424:	10913304 	addi	r2,r2,17612
    9428:	f800283a 	ret

0000942c <_localeconv_r>:
    942c:	00800074 	movhi	r2,1
    9430:	10913704 	addi	r2,r2,17628
    9434:	f800283a 	ret

00009438 <setlocale>:
    9438:	00c00074 	movhi	r3,1
    943c:	18d8ae04 	addi	r3,r3,25272
    9440:	2005883a 	mov	r2,r4
    9444:	19000017 	ldw	r4,0(r3)
    9448:	280d883a 	mov	r6,r5
    944c:	100b883a 	mov	r5,r2
    9450:	00093841 	jmpi	9384 <_setlocale_r>

00009454 <localeconv>:
    9454:	00800074 	movhi	r2,1
    9458:	10913704 	addi	r2,r2,17628
    945c:	f800283a 	ret

00009460 <_lseek_r>:
    9460:	defffd04 	addi	sp,sp,-12
    9464:	dc400115 	stw	r17,4(sp)
    9468:	dc000015 	stw	r16,0(sp)
    946c:	2023883a 	mov	r17,r4
    9470:	04000074 	movhi	r16,1
    9474:	841fac04 	addi	r16,r16,32432
    9478:	2809883a 	mov	r4,r5
    947c:	300b883a 	mov	r5,r6
    9480:	380d883a 	mov	r6,r7
    9484:	dfc00215 	stw	ra,8(sp)
    9488:	80000015 	stw	zero,0(r16)
    948c:	001110c0 	call	1110c <lseek>
    9490:	00ffffc4 	movi	r3,-1
    9494:	10c00526 	beq	r2,r3,94ac <_lseek_r+0x4c>
    9498:	dfc00217 	ldw	ra,8(sp)
    949c:	dc400117 	ldw	r17,4(sp)
    94a0:	dc000017 	ldw	r16,0(sp)
    94a4:	dec00304 	addi	sp,sp,12
    94a8:	f800283a 	ret
    94ac:	80c00017 	ldw	r3,0(r16)
    94b0:	183ff926 	beq	r3,zero,9498 <_lseek_r+0x38>
    94b4:	88c00015 	stw	r3,0(r17)
    94b8:	dfc00217 	ldw	ra,8(sp)
    94bc:	dc400117 	ldw	r17,4(sp)
    94c0:	dc000017 	ldw	r16,0(sp)
    94c4:	dec00304 	addi	sp,sp,12
    94c8:	f800283a 	ret

000094cc <_mbrtowc_r>:
    94cc:	defffc04 	addi	sp,sp,-16
    94d0:	dc000115 	stw	r16,4(sp)
    94d4:	dc000417 	ldw	r16,16(sp)
    94d8:	dc400215 	stw	r17,8(sp)
    94dc:	dfc00315 	stw	ra,12(sp)
    94e0:	dc000015 	stw	r16,0(sp)
    94e4:	2023883a 	mov	r17,r4
    94e8:	30000b26 	beq	r6,zero,9518 <_mbrtowc_r+0x4c>
    94ec:	00095700 	call	9570 <_mbtowc_r>
    94f0:	00ffffc4 	movi	r3,-1
    94f4:	10c0031e 	bne	r2,r3,9504 <_mbrtowc_r+0x38>
    94f8:	80000015 	stw	zero,0(r16)
    94fc:	00c02284 	movi	r3,138
    9500:	88c00015 	stw	r3,0(r17)
    9504:	dfc00317 	ldw	ra,12(sp)
    9508:	dc400217 	ldw	r17,8(sp)
    950c:	dc000117 	ldw	r16,4(sp)
    9510:	dec00404 	addi	sp,sp,16
    9514:	f800283a 	ret
    9518:	000b883a 	mov	r5,zero
    951c:	01800074 	movhi	r6,1
    9520:	31907304 	addi	r6,r6,16844
    9524:	01c00044 	movi	r7,1
    9528:	00095700 	call	9570 <_mbtowc_r>
    952c:	003ff006 	br	94f0 <_mbrtowc_r+0x24>

00009530 <mbrtowc>:
    9530:	00800074 	movhi	r2,1
    9534:	1098ae04 	addi	r2,r2,25272
    9538:	2011883a 	mov	r8,r4
    953c:	11000017 	ldw	r4,0(r2)
    9540:	defffe04 	addi	sp,sp,-8
    9544:	2807883a 	mov	r3,r5
    9548:	3005883a 	mov	r2,r6
    954c:	d9c00015 	stw	r7,0(sp)
    9550:	400b883a 	mov	r5,r8
    9554:	180d883a 	mov	r6,r3
    9558:	100f883a 	mov	r7,r2
    955c:	dfc00115 	stw	ra,4(sp)
    9560:	00094cc0 	call	94cc <_mbrtowc_r>
    9564:	dfc00117 	ldw	ra,4(sp)
    9568:	dec00204 	addi	sp,sp,8
    956c:	f800283a 	ret

00009570 <_mbtowc_r>:
    9570:	deffff04 	addi	sp,sp,-4
    9574:	28000826 	beq	r5,zero,9598 <_mbtowc_r+0x28>
    9578:	30000926 	beq	r6,zero,95a0 <_mbtowc_r+0x30>
    957c:	38000b26 	beq	r7,zero,95ac <_mbtowc_r+0x3c>
    9580:	30800003 	ldbu	r2,0(r6)
    9584:	28800015 	stw	r2,0(r5)
    9588:	30800003 	ldbu	r2,0(r6)
    958c:	1004c03a 	cmpne	r2,r2,zero
    9590:	dec00104 	addi	sp,sp,4
    9594:	f800283a 	ret
    9598:	d80b883a 	mov	r5,sp
    959c:	303ff71e 	bne	r6,zero,957c <_mbtowc_r+0xc>
    95a0:	0005883a 	mov	r2,zero
    95a4:	dec00104 	addi	sp,sp,4
    95a8:	f800283a 	ret
    95ac:	00bfff84 	movi	r2,-2
    95b0:	003ff706 	br	9590 <_mbtowc_r+0x20>

000095b4 <memchr>:
    95b4:	008000c4 	movi	r2,3
    95b8:	29403fcc 	andi	r5,r5,255
    95bc:	1180282e 	bgeu	r2,r6,9660 <memchr+0xac>
    95c0:	2086703a 	and	r3,r4,r2
    95c4:	1800351e 	bne	r3,zero,969c <memchr+0xe8>
    95c8:	2816923a 	slli	r11,r5,8
    95cc:	2093883a 	add	r9,r4,r2
    95d0:	22000084 	addi	r8,r4,2
    95d4:	5957883a 	add	r11,r11,r5
    95d8:	5816923a 	slli	r11,r11,8
    95dc:	20c00044 	addi	r3,r4,1
    95e0:	037fbff4 	movhi	r13,65279
    95e4:	6b7fbfc4 	addi	r13,r13,-257
    95e8:	5957883a 	add	r11,r11,r5
    95ec:	5816923a 	slli	r11,r11,8
    95f0:	03202074 	movhi	r12,32897
    95f4:	63202004 	addi	r12,r12,-32640
    95f8:	101d883a 	mov	r14,r2
    95fc:	5957883a 	add	r11,r11,r5
    9600:	21c00017 	ldw	r7,0(r4)
    9604:	31bfff04 	addi	r6,r6,-4
    9608:	1805883a 	mov	r2,r3
    960c:	3acef03a 	xor	r7,r7,r11
    9610:	3b55883a 	add	r10,r7,r13
    9614:	01ce303a 	nor	r7,zero,r7
    9618:	51ce703a 	and	r7,r10,r7
    961c:	3b0e703a 	and	r7,r7,r12
    9620:	38000a26 	beq	r7,zero,964c <memchr+0x98>
    9624:	21c00003 	ldbu	r7,0(r4)
    9628:	39401e26 	beq	r7,r5,96a4 <memchr+0xf0>
    962c:	19c00003 	ldbu	r7,0(r3)
    9630:	39401926 	beq	r7,r5,9698 <memchr+0xe4>
    9634:	41c00003 	ldbu	r7,0(r8)
    9638:	4005883a 	mov	r2,r8
    963c:	39401626 	beq	r7,r5,9698 <memchr+0xe4>
    9640:	49c00003 	ldbu	r7,0(r9)
    9644:	4805883a 	mov	r2,r9
    9648:	39401326 	beq	r7,r5,9698 <memchr+0xe4>
    964c:	21000104 	addi	r4,r4,4
    9650:	4a400104 	addi	r9,r9,4
    9654:	42000104 	addi	r8,r8,4
    9658:	18c00104 	addi	r3,r3,4
    965c:	71bfe836 	bltu	r14,r6,9600 <memchr+0x4c>
    9660:	2005883a 	mov	r2,r4
    9664:	30000a26 	beq	r6,zero,9690 <memchr+0xdc>
    9668:	10c00003 	ldbu	r3,0(r2)
    966c:	19400a26 	beq	r3,r5,9698 <memchr+0xe4>
    9670:	10c00044 	addi	r3,r2,1
    9674:	118d883a 	add	r6,r2,r6
    9678:	00000306 	br	9688 <memchr+0xd4>
    967c:	11000003 	ldbu	r4,0(r2)
    9680:	18c00044 	addi	r3,r3,1
    9684:	21400426 	beq	r4,r5,9698 <memchr+0xe4>
    9688:	1805883a 	mov	r2,r3
    968c:	19bffb1e 	bne	r3,r6,967c <memchr+0xc8>
    9690:	0005883a 	mov	r2,zero
    9694:	f800283a 	ret
    9698:	f800283a 	ret
    969c:	2005883a 	mov	r2,r4
    96a0:	003ff106 	br	9668 <memchr+0xb4>
    96a4:	2005883a 	mov	r2,r4
    96a8:	f800283a 	ret

000096ac <memmove>:
    96ac:	defffb04 	addi	sp,sp,-20
    96b0:	dc000015 	stw	r16,0(sp)
    96b4:	dfc00415 	stw	ra,16(sp)
    96b8:	dcc00315 	stw	r19,12(sp)
    96bc:	dc800215 	stw	r18,8(sp)
    96c0:	dc400115 	stw	r17,4(sp)
    96c4:	2021883a 	mov	r16,r4
    96c8:	300f883a 	mov	r7,r6
    96cc:	2900122e 	bgeu	r5,r4,9718 <memmove+0x6c>
    96d0:	2987883a 	add	r3,r5,r6
    96d4:	20c0102e 	bgeu	r4,r3,9718 <memmove+0x6c>
    96d8:	218b883a 	add	r5,r4,r6
    96dc:	1989c83a 	sub	r4,r3,r6
    96e0:	30000526 	beq	r6,zero,96f8 <memmove+0x4c>
    96e4:	18ffffc4 	addi	r3,r3,-1
    96e8:	18800003 	ldbu	r2,0(r3)
    96ec:	297fffc4 	addi	r5,r5,-1
    96f0:	28800005 	stb	r2,0(r5)
    96f4:	193ffb1e 	bne	r3,r4,96e4 <memmove+0x38>
    96f8:	8005883a 	mov	r2,r16
    96fc:	dfc00417 	ldw	ra,16(sp)
    9700:	dcc00317 	ldw	r19,12(sp)
    9704:	dc800217 	ldw	r18,8(sp)
    9708:	dc400117 	ldw	r17,4(sp)
    970c:	dc000017 	ldw	r16,0(sp)
    9710:	dec00504 	addi	sp,sp,20
    9714:	f800283a 	ret
    9718:	008003c4 	movi	r2,15
    971c:	1180422e 	bgeu	r2,r6,9828 <memmove+0x17c>
    9720:	2c04b03a 	or	r2,r5,r16
    9724:	108000cc 	andi	r2,r2,3
    9728:	10003f1e 	bne	r2,zero,9828 <memmove+0x17c>
    972c:	32bffc04 	addi	r10,r6,-16
    9730:	5014d13a 	srli	r10,r10,4
    9734:	81000404 	addi	r4,r16,16
    9738:	8007883a 	mov	r3,r16
    973c:	5004913a 	slli	r2,r10,4
    9740:	280f883a 	mov	r7,r5
    9744:	2089883a 	add	r4,r4,r2
    9748:	38800017 	ldw	r2,0(r7)
    974c:	18c00404 	addi	r3,r3,16
    9750:	39c00404 	addi	r7,r7,16
    9754:	18bffc15 	stw	r2,-16(r3)
    9758:	38bffd17 	ldw	r2,-12(r7)
    975c:	18bffd15 	stw	r2,-12(r3)
    9760:	38bffe17 	ldw	r2,-8(r7)
    9764:	18bffe15 	stw	r2,-8(r3)
    9768:	38bfff17 	ldw	r2,-4(r7)
    976c:	18bfff15 	stw	r2,-4(r3)
    9770:	193ff51e 	bne	r3,r4,9748 <memmove+0x9c>
    9774:	52800044 	addi	r10,r10,1
    9778:	5014913a 	slli	r10,r10,4
    977c:	31c003cc 	andi	r7,r6,15
    9780:	008000c4 	movi	r2,3
    9784:	8287883a 	add	r3,r16,r10
    9788:	2a95883a 	add	r10,r5,r10
    978c:	11c0282e 	bgeu	r2,r7,9830 <memmove+0x184>
    9790:	3c7fff04 	addi	r17,r7,-4
    9794:	8808d0ba 	srli	r4,r17,2
    9798:	1a400104 	addi	r9,r3,4
    979c:	180d883a 	mov	r6,r3
    97a0:	2105883a 	add	r2,r4,r4
    97a4:	1085883a 	add	r2,r2,r2
    97a8:	4893883a 	add	r9,r9,r2
    97ac:	5005883a 	mov	r2,r10
    97b0:	12000017 	ldw	r8,0(r2)
    97b4:	31800104 	addi	r6,r6,4
    97b8:	10800104 	addi	r2,r2,4
    97bc:	323fff15 	stw	r8,-4(r6)
    97c0:	327ffb1e 	bne	r6,r9,97b0 <memmove+0x104>
    97c4:	20800044 	addi	r2,r4,1
    97c8:	1085883a 	add	r2,r2,r2
    97cc:	1085883a 	add	r2,r2,r2
    97d0:	017fff04 	movi	r5,-4
    97d4:	18a5883a 	add	r18,r3,r2
    97d8:	50a7883a 	add	r19,r10,r2
    97dc:	00015040 	call	1504 <__mulsi3>
    97e0:	144f883a 	add	r7,r2,r17
    97e4:	980b883a 	mov	r5,r19
    97e8:	9007883a 	mov	r3,r18
    97ec:	383fc226 	beq	r7,zero,96f8 <memmove+0x4c>
    97f0:	19cf883a 	add	r7,r3,r7
    97f4:	29800003 	ldbu	r6,0(r5)
    97f8:	18c00044 	addi	r3,r3,1
    97fc:	29400044 	addi	r5,r5,1
    9800:	19bfffc5 	stb	r6,-1(r3)
    9804:	19fffb1e 	bne	r3,r7,97f4 <memmove+0x148>
    9808:	8005883a 	mov	r2,r16
    980c:	dfc00417 	ldw	ra,16(sp)
    9810:	dcc00317 	ldw	r19,12(sp)
    9814:	dc800217 	ldw	r18,8(sp)
    9818:	dc400117 	ldw	r17,4(sp)
    981c:	dc000017 	ldw	r16,0(sp)
    9820:	dec00504 	addi	sp,sp,20
    9824:	f800283a 	ret
    9828:	8007883a 	mov	r3,r16
    982c:	003fef06 	br	97ec <memmove+0x140>
    9830:	500b883a 	mov	r5,r10
    9834:	003fed06 	br	97ec <memmove+0x140>

00009838 <_Balloc>:
    9838:	20801317 	ldw	r2,76(r4)
    983c:	defffc04 	addi	sp,sp,-16
    9840:	dc400115 	stw	r17,4(sp)
    9844:	dc000015 	stw	r16,0(sp)
    9848:	dfc00315 	stw	ra,12(sp)
    984c:	dc800215 	stw	r18,8(sp)
    9850:	2023883a 	mov	r17,r4
    9854:	2821883a 	mov	r16,r5
    9858:	10000f26 	beq	r2,zero,9898 <_Balloc+0x60>
    985c:	8407883a 	add	r3,r16,r16
    9860:	18c7883a 	add	r3,r3,r3
    9864:	10c7883a 	add	r3,r2,r3
    9868:	18800017 	ldw	r2,0(r3)
    986c:	10001126 	beq	r2,zero,98b4 <_Balloc+0x7c>
    9870:	11000017 	ldw	r4,0(r2)
    9874:	19000015 	stw	r4,0(r3)
    9878:	10000415 	stw	zero,16(r2)
    987c:	10000315 	stw	zero,12(r2)
    9880:	dfc00317 	ldw	ra,12(sp)
    9884:	dc800217 	ldw	r18,8(sp)
    9888:	dc400117 	ldw	r17,4(sp)
    988c:	dc000017 	ldw	r16,0(sp)
    9890:	dec00404 	addi	sp,sp,16
    9894:	f800283a 	ret
    9898:	01400104 	movi	r5,4
    989c:	01800404 	movi	r6,16
    98a0:	000d9e00 	call	d9e0 <_calloc_r>
    98a4:	88801315 	stw	r2,76(r17)
    98a8:	103fec1e 	bne	r2,zero,985c <_Balloc+0x24>
    98ac:	0005883a 	mov	r2,zero
    98b0:	003ff306 	br	9880 <_Balloc+0x48>
    98b4:	01400044 	movi	r5,1
    98b8:	2c24983a 	sll	r18,r5,r16
    98bc:	8809883a 	mov	r4,r17
    98c0:	91800144 	addi	r6,r18,5
    98c4:	318d883a 	add	r6,r6,r6
    98c8:	318d883a 	add	r6,r6,r6
    98cc:	000d9e00 	call	d9e0 <_calloc_r>
    98d0:	103ff626 	beq	r2,zero,98ac <_Balloc+0x74>
    98d4:	14000115 	stw	r16,4(r2)
    98d8:	14800215 	stw	r18,8(r2)
    98dc:	003fe606 	br	9878 <_Balloc+0x40>

000098e0 <_Bfree>:
    98e0:	28000826 	beq	r5,zero,9904 <_Bfree+0x24>
    98e4:	28c00117 	ldw	r3,4(r5)
    98e8:	20801317 	ldw	r2,76(r4)
    98ec:	18c7883a 	add	r3,r3,r3
    98f0:	18c7883a 	add	r3,r3,r3
    98f4:	10c5883a 	add	r2,r2,r3
    98f8:	10c00017 	ldw	r3,0(r2)
    98fc:	28c00015 	stw	r3,0(r5)
    9900:	11400015 	stw	r5,0(r2)
    9904:	f800283a 	ret

00009908 <__multadd>:
    9908:	defff604 	addi	sp,sp,-40
    990c:	dd400515 	stw	r21,20(sp)
    9910:	2d400417 	ldw	r21,16(r5)
    9914:	df000815 	stw	fp,32(sp)
    9918:	ddc00715 	stw	r23,28(sp)
    991c:	dd800615 	stw	r22,24(sp)
    9920:	dd000415 	stw	r20,16(sp)
    9924:	dc400115 	stw	r17,4(sp)
    9928:	dc000015 	stw	r16,0(sp)
    992c:	dfc00915 	stw	ra,36(sp)
    9930:	dcc00315 	stw	r19,12(sp)
    9934:	dc800215 	stw	r18,8(sp)
    9938:	282d883a 	mov	r22,r5
    993c:	202f883a 	mov	r23,r4
    9940:	3029883a 	mov	r20,r6
    9944:	3839883a 	mov	fp,r7
    9948:	2c000504 	addi	r16,r5,20
    994c:	0023883a 	mov	r17,zero
    9950:	84c00017 	ldw	r19,0(r16)
    9954:	a00b883a 	mov	r5,r20
    9958:	8c400044 	addi	r17,r17,1
    995c:	993fffcc 	andi	r4,r19,65535
    9960:	00015040 	call	1504 <__mulsi3>
    9964:	1725883a 	add	r18,r2,fp
    9968:	9808d43a 	srli	r4,r19,16
    996c:	9026d43a 	srli	r19,r18,16
    9970:	a00b883a 	mov	r5,r20
    9974:	00015040 	call	1504 <__mulsi3>
    9978:	988f883a 	add	r7,r19,r2
    997c:	3804943a 	slli	r2,r7,16
    9980:	94bfffcc 	andi	r18,r18,65535
    9984:	3838d43a 	srli	fp,r7,16
    9988:	14a5883a 	add	r18,r2,r18
    998c:	84800015 	stw	r18,0(r16)
    9990:	84000104 	addi	r16,r16,4
    9994:	8d7fee16 	blt	r17,r21,9950 <__multadd+0x48>
    9998:	e0000926 	beq	fp,zero,99c0 <__multadd+0xb8>
    999c:	b0800217 	ldw	r2,8(r22)
    99a0:	a880140e 	bge	r21,r2,99f4 <__multadd+0xec>
    99a4:	a8800144 	addi	r2,r21,5
    99a8:	1085883a 	add	r2,r2,r2
    99ac:	1085883a 	add	r2,r2,r2
    99b0:	b085883a 	add	r2,r22,r2
    99b4:	ad400044 	addi	r21,r21,1
    99b8:	17000015 	stw	fp,0(r2)
    99bc:	b5400415 	stw	r21,16(r22)
    99c0:	b005883a 	mov	r2,r22
    99c4:	dfc00917 	ldw	ra,36(sp)
    99c8:	df000817 	ldw	fp,32(sp)
    99cc:	ddc00717 	ldw	r23,28(sp)
    99d0:	dd800617 	ldw	r22,24(sp)
    99d4:	dd400517 	ldw	r21,20(sp)
    99d8:	dd000417 	ldw	r20,16(sp)
    99dc:	dcc00317 	ldw	r19,12(sp)
    99e0:	dc800217 	ldw	r18,8(sp)
    99e4:	dc400117 	ldw	r17,4(sp)
    99e8:	dc000017 	ldw	r16,0(sp)
    99ec:	dec00a04 	addi	sp,sp,40
    99f0:	f800283a 	ret
    99f4:	b1400117 	ldw	r5,4(r22)
    99f8:	b809883a 	mov	r4,r23
    99fc:	29400044 	addi	r5,r5,1
    9a00:	00098380 	call	9838 <_Balloc>
    9a04:	b1800417 	ldw	r6,16(r22)
    9a08:	b1400304 	addi	r5,r22,12
    9a0c:	11000304 	addi	r4,r2,12
    9a10:	31800084 	addi	r6,r6,2
    9a14:	318d883a 	add	r6,r6,r6
    9a18:	318d883a 	add	r6,r6,r6
    9a1c:	1021883a 	mov	r16,r2
    9a20:	00033640 	call	3364 <memcpy>
    9a24:	b0c00117 	ldw	r3,4(r22)
    9a28:	b8801317 	ldw	r2,76(r23)
    9a2c:	18c7883a 	add	r3,r3,r3
    9a30:	18c7883a 	add	r3,r3,r3
    9a34:	10c5883a 	add	r2,r2,r3
    9a38:	10c00017 	ldw	r3,0(r2)
    9a3c:	b0c00015 	stw	r3,0(r22)
    9a40:	15800015 	stw	r22,0(r2)
    9a44:	802d883a 	mov	r22,r16
    9a48:	003fd606 	br	99a4 <__multadd+0x9c>

00009a4c <__s2b>:
    9a4c:	defff904 	addi	sp,sp,-28
    9a50:	dd000415 	stw	r20,16(sp)
    9a54:	dc400115 	stw	r17,4(sp)
    9a58:	2829883a 	mov	r20,r5
    9a5c:	2023883a 	mov	r17,r4
    9a60:	01400244 	movi	r5,9
    9a64:	39000204 	addi	r4,r7,8
    9a68:	dcc00315 	stw	r19,12(sp)
    9a6c:	dc800215 	stw	r18,8(sp)
    9a70:	dfc00615 	stw	ra,24(sp)
    9a74:	dd400515 	stw	r21,20(sp)
    9a78:	dc000015 	stw	r16,0(sp)
    9a7c:	3825883a 	mov	r18,r7
    9a80:	3027883a 	mov	r19,r6
    9a84:	00103d00 	call	103d0 <__divsi3>
    9a88:	00c00044 	movi	r3,1
    9a8c:	000b883a 	mov	r5,zero
    9a90:	1880030e 	bge	r3,r2,9aa0 <__s2b+0x54>
    9a94:	18c7883a 	add	r3,r3,r3
    9a98:	29400044 	addi	r5,r5,1
    9a9c:	18bffd16 	blt	r3,r2,9a94 <__s2b+0x48>
    9aa0:	8809883a 	mov	r4,r17
    9aa4:	00098380 	call	9838 <_Balloc>
    9aa8:	d8c00717 	ldw	r3,28(sp)
    9aac:	10c00515 	stw	r3,20(r2)
    9ab0:	00c00044 	movi	r3,1
    9ab4:	10c00415 	stw	r3,16(r2)
    9ab8:	00c00244 	movi	r3,9
    9abc:	1cc0210e 	bge	r3,r19,9b44 <__s2b+0xf8>
    9ac0:	a0eb883a 	add	r21,r20,r3
    9ac4:	a821883a 	mov	r16,r21
    9ac8:	a4e9883a 	add	r20,r20,r19
    9acc:	81c00007 	ldb	r7,0(r16)
    9ad0:	8809883a 	mov	r4,r17
    9ad4:	84000044 	addi	r16,r16,1
    9ad8:	100b883a 	mov	r5,r2
    9adc:	01800284 	movi	r6,10
    9ae0:	39fff404 	addi	r7,r7,-48
    9ae4:	00099080 	call	9908 <__multadd>
    9ae8:	853ff81e 	bne	r16,r20,9acc <__s2b+0x80>
    9aec:	ace1883a 	add	r16,r21,r19
    9af0:	843ffe04 	addi	r16,r16,-8
    9af4:	9c800a0e 	bge	r19,r18,9b20 <__s2b+0xd4>
    9af8:	94e5c83a 	sub	r18,r18,r19
    9afc:	84a5883a 	add	r18,r16,r18
    9b00:	81c00007 	ldb	r7,0(r16)
    9b04:	8809883a 	mov	r4,r17
    9b08:	84000044 	addi	r16,r16,1
    9b0c:	100b883a 	mov	r5,r2
    9b10:	01800284 	movi	r6,10
    9b14:	39fff404 	addi	r7,r7,-48
    9b18:	00099080 	call	9908 <__multadd>
    9b1c:	84bff81e 	bne	r16,r18,9b00 <__s2b+0xb4>
    9b20:	dfc00617 	ldw	ra,24(sp)
    9b24:	dd400517 	ldw	r21,20(sp)
    9b28:	dd000417 	ldw	r20,16(sp)
    9b2c:	dcc00317 	ldw	r19,12(sp)
    9b30:	dc800217 	ldw	r18,8(sp)
    9b34:	dc400117 	ldw	r17,4(sp)
    9b38:	dc000017 	ldw	r16,0(sp)
    9b3c:	dec00704 	addi	sp,sp,28
    9b40:	f800283a 	ret
    9b44:	a4000284 	addi	r16,r20,10
    9b48:	1827883a 	mov	r19,r3
    9b4c:	003fe906 	br	9af4 <__s2b+0xa8>

00009b50 <__hi0bits>:
    9b50:	20bfffec 	andhi	r2,r4,65535
    9b54:	1000141e 	bne	r2,zero,9ba8 <__hi0bits+0x58>
    9b58:	2008943a 	slli	r4,r4,16
    9b5c:	00800404 	movi	r2,16
    9b60:	20ffc02c 	andhi	r3,r4,65280
    9b64:	1800021e 	bne	r3,zero,9b70 <__hi0bits+0x20>
    9b68:	2008923a 	slli	r4,r4,8
    9b6c:	10800204 	addi	r2,r2,8
    9b70:	20fc002c 	andhi	r3,r4,61440
    9b74:	1800021e 	bne	r3,zero,9b80 <__hi0bits+0x30>
    9b78:	2008913a 	slli	r4,r4,4
    9b7c:	10800104 	addi	r2,r2,4
    9b80:	20f0002c 	andhi	r3,r4,49152
    9b84:	1800031e 	bne	r3,zero,9b94 <__hi0bits+0x44>
    9b88:	2109883a 	add	r4,r4,r4
    9b8c:	10800084 	addi	r2,r2,2
    9b90:	2109883a 	add	r4,r4,r4
    9b94:	20000316 	blt	r4,zero,9ba4 <__hi0bits+0x54>
    9b98:	2110002c 	andhi	r4,r4,16384
    9b9c:	2000041e 	bne	r4,zero,9bb0 <__hi0bits+0x60>
    9ba0:	00800804 	movi	r2,32
    9ba4:	f800283a 	ret
    9ba8:	0005883a 	mov	r2,zero
    9bac:	003fec06 	br	9b60 <__hi0bits+0x10>
    9bb0:	10800044 	addi	r2,r2,1
    9bb4:	f800283a 	ret

00009bb8 <__lo0bits>:
    9bb8:	20c00017 	ldw	r3,0(r4)
    9bbc:	188001cc 	andi	r2,r3,7
    9bc0:	10000826 	beq	r2,zero,9be4 <__lo0bits+0x2c>
    9bc4:	1880004c 	andi	r2,r3,1
    9bc8:	1000211e 	bne	r2,zero,9c50 <__lo0bits+0x98>
    9bcc:	1880008c 	andi	r2,r3,2
    9bd0:	1000211e 	bne	r2,zero,9c58 <__lo0bits+0xa0>
    9bd4:	1806d0ba 	srli	r3,r3,2
    9bd8:	00800084 	movi	r2,2
    9bdc:	20c00015 	stw	r3,0(r4)
    9be0:	f800283a 	ret
    9be4:	18bfffcc 	andi	r2,r3,65535
    9be8:	10001326 	beq	r2,zero,9c38 <__lo0bits+0x80>
    9bec:	0005883a 	mov	r2,zero
    9bf0:	19403fcc 	andi	r5,r3,255
    9bf4:	2800021e 	bne	r5,zero,9c00 <__lo0bits+0x48>
    9bf8:	1806d23a 	srli	r3,r3,8
    9bfc:	10800204 	addi	r2,r2,8
    9c00:	194003cc 	andi	r5,r3,15
    9c04:	2800021e 	bne	r5,zero,9c10 <__lo0bits+0x58>
    9c08:	1806d13a 	srli	r3,r3,4
    9c0c:	10800104 	addi	r2,r2,4
    9c10:	194000cc 	andi	r5,r3,3
    9c14:	2800021e 	bne	r5,zero,9c20 <__lo0bits+0x68>
    9c18:	1806d0ba 	srli	r3,r3,2
    9c1c:	10800084 	addi	r2,r2,2
    9c20:	1940004c 	andi	r5,r3,1
    9c24:	2800081e 	bne	r5,zero,9c48 <__lo0bits+0x90>
    9c28:	1806d07a 	srli	r3,r3,1
    9c2c:	1800051e 	bne	r3,zero,9c44 <__lo0bits+0x8c>
    9c30:	00800804 	movi	r2,32
    9c34:	f800283a 	ret
    9c38:	1806d43a 	srli	r3,r3,16
    9c3c:	00800404 	movi	r2,16
    9c40:	003feb06 	br	9bf0 <__lo0bits+0x38>
    9c44:	10800044 	addi	r2,r2,1
    9c48:	20c00015 	stw	r3,0(r4)
    9c4c:	f800283a 	ret
    9c50:	0005883a 	mov	r2,zero
    9c54:	f800283a 	ret
    9c58:	1806d07a 	srli	r3,r3,1
    9c5c:	00800044 	movi	r2,1
    9c60:	20c00015 	stw	r3,0(r4)
    9c64:	f800283a 	ret

00009c68 <__i2b>:
    9c68:	defffd04 	addi	sp,sp,-12
    9c6c:	dc000015 	stw	r16,0(sp)
    9c70:	04000044 	movi	r16,1
    9c74:	dc400115 	stw	r17,4(sp)
    9c78:	2823883a 	mov	r17,r5
    9c7c:	800b883a 	mov	r5,r16
    9c80:	dfc00215 	stw	ra,8(sp)
    9c84:	00098380 	call	9838 <_Balloc>
    9c88:	14400515 	stw	r17,20(r2)
    9c8c:	14000415 	stw	r16,16(r2)
    9c90:	dfc00217 	ldw	ra,8(sp)
    9c94:	dc400117 	ldw	r17,4(sp)
    9c98:	dc000017 	ldw	r16,0(sp)
    9c9c:	dec00304 	addi	sp,sp,12
    9ca0:	f800283a 	ret

00009ca4 <__multiply>:
    9ca4:	defff004 	addi	sp,sp,-64
    9ca8:	dc800815 	stw	r18,32(sp)
    9cac:	dc400715 	stw	r17,28(sp)
    9cb0:	34800417 	ldw	r18,16(r6)
    9cb4:	2c400417 	ldw	r17,16(r5)
    9cb8:	ddc00d15 	stw	r23,52(sp)
    9cbc:	dc000615 	stw	r16,24(sp)
    9cc0:	dfc00f15 	stw	ra,60(sp)
    9cc4:	df000e15 	stw	fp,56(sp)
    9cc8:	dd800c15 	stw	r22,48(sp)
    9ccc:	dd400b15 	stw	r21,44(sp)
    9cd0:	dd000a15 	stw	r20,40(sp)
    9cd4:	dcc00915 	stw	r19,36(sp)
    9cd8:	2821883a 	mov	r16,r5
    9cdc:	302f883a 	mov	r23,r6
    9ce0:	8c80050e 	bge	r17,r18,9cf8 <__multiply+0x54>
    9ce4:	8807883a 	mov	r3,r17
    9ce8:	3021883a 	mov	r16,r6
    9cec:	9023883a 	mov	r17,r18
    9cf0:	282f883a 	mov	r23,r5
    9cf4:	1825883a 	mov	r18,r3
    9cf8:	80800217 	ldw	r2,8(r16)
    9cfc:	8c87883a 	add	r3,r17,r18
    9d00:	d8c00115 	stw	r3,4(sp)
    9d04:	81400117 	ldw	r5,4(r16)
    9d08:	10c0010e 	bge	r2,r3,9d10 <__multiply+0x6c>
    9d0c:	29400044 	addi	r5,r5,1
    9d10:	00098380 	call	9838 <_Balloc>
    9d14:	d8c00117 	ldw	r3,4(sp)
    9d18:	d8800515 	stw	r2,20(sp)
    9d1c:	14c00504 	addi	r19,r2,20
    9d20:	1d400144 	addi	r21,r3,5
    9d24:	ad6b883a 	add	r21,r21,r21
    9d28:	ad6b883a 	add	r21,r21,r21
    9d2c:	156b883a 	add	r21,r2,r21
    9d30:	dd400215 	stw	r21,8(sp)
    9d34:	9805883a 	mov	r2,r19
    9d38:	9d40042e 	bgeu	r19,r21,9d4c <__multiply+0xa8>
    9d3c:	d8c00217 	ldw	r3,8(sp)
    9d40:	10000015 	stw	zero,0(r2)
    9d44:	10800104 	addi	r2,r2,4
    9d48:	10fffc36 	bltu	r2,r3,9d3c <__multiply+0x98>
    9d4c:	94800144 	addi	r18,r18,5
    9d50:	94a5883a 	add	r18,r18,r18
    9d54:	94ad883a 	add	r22,r18,r18
    9d58:	8c400144 	addi	r17,r17,5
    9d5c:	8c63883a 	add	r17,r17,r17
    9d60:	bdad883a 	add	r22,r23,r22
    9d64:	80c00504 	addi	r3,r16,20
    9d68:	8c63883a 	add	r17,r17,r17
    9d6c:	bc800504 	addi	r18,r23,20
    9d70:	dd800315 	stw	r22,12(sp)
    9d74:	d8c00415 	stw	r3,16(sp)
    9d78:	dcc00015 	stw	r19,0(sp)
    9d7c:	8463883a 	add	r17,r16,r17
    9d80:	9580412e 	bgeu	r18,r22,9e88 <__multiply+0x1e4>
    9d84:	90800017 	ldw	r2,0(r18)
    9d88:	173fffcc 	andi	fp,r2,65535
    9d8c:	e0001a26 	beq	fp,zero,9df8 <__multiply+0x154>
    9d90:	dd000017 	ldw	r20,0(sp)
    9d94:	dd800417 	ldw	r22,16(sp)
    9d98:	002b883a 	mov	r21,zero
    9d9c:	b4c00017 	ldw	r19,0(r22)
    9da0:	a4000017 	ldw	r16,0(r20)
    9da4:	e00b883a 	mov	r5,fp
    9da8:	993fffcc 	andi	r4,r19,65535
    9dac:	00015040 	call	1504 <__mulsi3>
    9db0:	9808d43a 	srli	r4,r19,16
    9db4:	817fffcc 	andi	r5,r16,65535
    9db8:	1145883a 	add	r2,r2,r5
    9dbc:	e00b883a 	mov	r5,fp
    9dc0:	1567883a 	add	r19,r2,r21
    9dc4:	8020d43a 	srli	r16,r16,16
    9dc8:	00015040 	call	1504 <__mulsi3>
    9dcc:	9808d43a 	srli	r4,r19,16
    9dd0:	1405883a 	add	r2,r2,r16
    9dd4:	a4c0000d 	sth	r19,0(r20)
    9dd8:	110f883a 	add	r7,r2,r4
    9ddc:	a1c0008d 	sth	r7,2(r20)
    9de0:	b5800104 	addi	r22,r22,4
    9de4:	382ad43a 	srli	r21,r7,16
    9de8:	a5000104 	addi	r20,r20,4
    9dec:	b47feb36 	bltu	r22,r17,9d9c <__multiply+0xf8>
    9df0:	a5400015 	stw	r21,0(r20)
    9df4:	90800017 	ldw	r2,0(r18)
    9df8:	1038d43a 	srli	fp,r2,16
    9dfc:	e0001c26 	beq	fp,zero,9e70 <__multiply+0x1cc>
    9e00:	d8c00017 	ldw	r3,0(sp)
    9e04:	dd000417 	ldw	r20,16(sp)
    9e08:	002b883a 	mov	r21,zero
    9e0c:	1d800017 	ldw	r22,0(r3)
    9e10:	182f883a 	mov	r23,r3
    9e14:	b021883a 	mov	r16,r22
    9e18:	a4c00017 	ldw	r19,0(r20)
    9e1c:	8020d43a 	srli	r16,r16,16
    9e20:	e00b883a 	mov	r5,fp
    9e24:	993fffcc 	andi	r4,r19,65535
    9e28:	00015040 	call	1504 <__mulsi3>
    9e2c:	1405883a 	add	r2,r2,r16
    9e30:	9808d43a 	srli	r4,r19,16
    9e34:	156b883a 	add	r21,r2,r21
    9e38:	bdc00104 	addi	r23,r23,4
    9e3c:	bdbfff0d 	sth	r22,-4(r23)
    9e40:	bd7fff8d 	sth	r21,-2(r23)
    9e44:	bc000017 	ldw	r16,0(r23)
    9e48:	e00b883a 	mov	r5,fp
    9e4c:	00015040 	call	1504 <__mulsi3>
    9e50:	a80ed43a 	srli	r7,r21,16
    9e54:	813fffcc 	andi	r4,r16,65535
    9e58:	2085883a 	add	r2,r4,r2
    9e5c:	11ed883a 	add	r22,r2,r7
    9e60:	a5000104 	addi	r20,r20,4
    9e64:	b02ad43a 	srli	r21,r22,16
    9e68:	a47feb36 	bltu	r20,r17,9e18 <__multiply+0x174>
    9e6c:	bd800015 	stw	r22,0(r23)
    9e70:	d8c00017 	ldw	r3,0(sp)
    9e74:	94800104 	addi	r18,r18,4
    9e78:	18c00104 	addi	r3,r3,4
    9e7c:	d8c00015 	stw	r3,0(sp)
    9e80:	d8c00317 	ldw	r3,12(sp)
    9e84:	90ffbf36 	bltu	r18,r3,9d84 <__multiply+0xe0>
    9e88:	d8c00117 	ldw	r3,4(sp)
    9e8c:	00c00c0e 	bge	zero,r3,9ec0 <__multiply+0x21c>
    9e90:	d8c00217 	ldw	r3,8(sp)
    9e94:	18bfff17 	ldw	r2,-4(r3)
    9e98:	1d7fff04 	addi	r21,r3,-4
    9e9c:	10000326 	beq	r2,zero,9eac <__multiply+0x208>
    9ea0:	00000706 	br	9ec0 <__multiply+0x21c>
    9ea4:	a8800017 	ldw	r2,0(r21)
    9ea8:	1000051e 	bne	r2,zero,9ec0 <__multiply+0x21c>
    9eac:	d8c00117 	ldw	r3,4(sp)
    9eb0:	ad7fff04 	addi	r21,r21,-4
    9eb4:	18ffffc4 	addi	r3,r3,-1
    9eb8:	d8c00115 	stw	r3,4(sp)
    9ebc:	183ff91e 	bne	r3,zero,9ea4 <__multiply+0x200>
    9ec0:	d8800517 	ldw	r2,20(sp)
    9ec4:	d8c00117 	ldw	r3,4(sp)
    9ec8:	10c00415 	stw	r3,16(r2)
    9ecc:	dfc00f17 	ldw	ra,60(sp)
    9ed0:	df000e17 	ldw	fp,56(sp)
    9ed4:	ddc00d17 	ldw	r23,52(sp)
    9ed8:	dd800c17 	ldw	r22,48(sp)
    9edc:	dd400b17 	ldw	r21,44(sp)
    9ee0:	dd000a17 	ldw	r20,40(sp)
    9ee4:	dcc00917 	ldw	r19,36(sp)
    9ee8:	dc800817 	ldw	r18,32(sp)
    9eec:	dc400717 	ldw	r17,28(sp)
    9ef0:	dc000617 	ldw	r16,24(sp)
    9ef4:	dec01004 	addi	sp,sp,64
    9ef8:	f800283a 	ret

00009efc <__pow5mult>:
    9efc:	defffb04 	addi	sp,sp,-20
    9f00:	dcc00315 	stw	r19,12(sp)
    9f04:	dc800215 	stw	r18,8(sp)
    9f08:	dc000015 	stw	r16,0(sp)
    9f0c:	dfc00415 	stw	ra,16(sp)
    9f10:	dc400115 	stw	r17,4(sp)
    9f14:	308000cc 	andi	r2,r6,3
    9f18:	3021883a 	mov	r16,r6
    9f1c:	2027883a 	mov	r19,r4
    9f20:	2825883a 	mov	r18,r5
    9f24:	10002e1e 	bne	r2,zero,9fe0 <__pow5mult+0xe4>
    9f28:	8021d0ba 	srai	r16,r16,2
    9f2c:	80001a26 	beq	r16,zero,9f98 <__pow5mult+0x9c>
    9f30:	9c401217 	ldw	r17,72(r19)
    9f34:	8800061e 	bne	r17,zero,9f50 <__pow5mult+0x54>
    9f38:	00003406 	br	a00c <__pow5mult+0x110>
    9f3c:	8021d07a 	srai	r16,r16,1
    9f40:	80001526 	beq	r16,zero,9f98 <__pow5mult+0x9c>
    9f44:	88c00017 	ldw	r3,0(r17)
    9f48:	18001b26 	beq	r3,zero,9fb8 <__pow5mult+0xbc>
    9f4c:	1823883a 	mov	r17,r3
    9f50:	80c0004c 	andi	r3,r16,1
    9f54:	183ff926 	beq	r3,zero,9f3c <__pow5mult+0x40>
    9f58:	900b883a 	mov	r5,r18
    9f5c:	880d883a 	mov	r6,r17
    9f60:	9809883a 	mov	r4,r19
    9f64:	0009ca40 	call	9ca4 <__multiply>
    9f68:	90001b26 	beq	r18,zero,9fd8 <__pow5mult+0xdc>
    9f6c:	91000117 	ldw	r4,4(r18)
    9f70:	98c01317 	ldw	r3,76(r19)
    9f74:	8021d07a 	srai	r16,r16,1
    9f78:	2109883a 	add	r4,r4,r4
    9f7c:	2109883a 	add	r4,r4,r4
    9f80:	1907883a 	add	r3,r3,r4
    9f84:	19000017 	ldw	r4,0(r3)
    9f88:	91000015 	stw	r4,0(r18)
    9f8c:	1c800015 	stw	r18,0(r3)
    9f90:	1025883a 	mov	r18,r2
    9f94:	803feb1e 	bne	r16,zero,9f44 <__pow5mult+0x48>
    9f98:	9005883a 	mov	r2,r18
    9f9c:	dfc00417 	ldw	ra,16(sp)
    9fa0:	dcc00317 	ldw	r19,12(sp)
    9fa4:	dc800217 	ldw	r18,8(sp)
    9fa8:	dc400117 	ldw	r17,4(sp)
    9fac:	dc000017 	ldw	r16,0(sp)
    9fb0:	dec00504 	addi	sp,sp,20
    9fb4:	f800283a 	ret
    9fb8:	880b883a 	mov	r5,r17
    9fbc:	880d883a 	mov	r6,r17
    9fc0:	9809883a 	mov	r4,r19
    9fc4:	0009ca40 	call	9ca4 <__multiply>
    9fc8:	88800015 	stw	r2,0(r17)
    9fcc:	10000015 	stw	zero,0(r2)
    9fd0:	1023883a 	mov	r17,r2
    9fd4:	003fde06 	br	9f50 <__pow5mult+0x54>
    9fd8:	1025883a 	mov	r18,r2
    9fdc:	003fd706 	br	9f3c <__pow5mult+0x40>
    9fe0:	10bfffc4 	addi	r2,r2,-1
    9fe4:	1085883a 	add	r2,r2,r2
    9fe8:	00c00074 	movhi	r3,1
    9fec:	18d18904 	addi	r3,r3,17956
    9ff0:	1085883a 	add	r2,r2,r2
    9ff4:	1885883a 	add	r2,r3,r2
    9ff8:	11800017 	ldw	r6,0(r2)
    9ffc:	000f883a 	mov	r7,zero
    a000:	00099080 	call	9908 <__multadd>
    a004:	1025883a 	mov	r18,r2
    a008:	003fc706 	br	9f28 <__pow5mult+0x2c>
    a00c:	9809883a 	mov	r4,r19
    a010:	01409c44 	movi	r5,625
    a014:	0009c680 	call	9c68 <__i2b>
    a018:	98801215 	stw	r2,72(r19)
    a01c:	1023883a 	mov	r17,r2
    a020:	10000015 	stw	zero,0(r2)
    a024:	003fca06 	br	9f50 <__pow5mult+0x54>

0000a028 <__lshift>:
    a028:	defff904 	addi	sp,sp,-28
    a02c:	dd400515 	stw	r21,20(sp)
    a030:	dc400115 	stw	r17,4(sp)
    a034:	2d400417 	ldw	r21,16(r5)
    a038:	3023d17a 	srai	r17,r6,5
    a03c:	28800217 	ldw	r2,8(r5)
    a040:	dd000415 	stw	r20,16(sp)
    a044:	8d6b883a 	add	r21,r17,r21
    a048:	dcc00315 	stw	r19,12(sp)
    a04c:	dc800215 	stw	r18,8(sp)
    a050:	dc000015 	stw	r16,0(sp)
    a054:	dfc00615 	stw	ra,24(sp)
    a058:	ac000044 	addi	r16,r21,1
    a05c:	2825883a 	mov	r18,r5
    a060:	3029883a 	mov	r20,r6
    a064:	2027883a 	mov	r19,r4
    a068:	29400117 	ldw	r5,4(r5)
    a06c:	1400030e 	bge	r2,r16,a07c <__lshift+0x54>
    a070:	1085883a 	add	r2,r2,r2
    a074:	29400044 	addi	r5,r5,1
    a078:	143ffd16 	blt	r2,r16,a070 <__lshift+0x48>
    a07c:	9809883a 	mov	r4,r19
    a080:	00098380 	call	9838 <_Balloc>
    a084:	10c00504 	addi	r3,r2,20
    a088:	0440090e 	bge	zero,r17,a0b0 <__lshift+0x88>
    a08c:	000f883a 	mov	r7,zero
    a090:	18000015 	stw	zero,0(r3)
    a094:	39c00044 	addi	r7,r7,1
    a098:	18c00104 	addi	r3,r3,4
    a09c:	3c7ffc1e 	bne	r7,r17,a090 <__lshift+0x68>
    a0a0:	38c00144 	addi	r3,r7,5
    a0a4:	18c7883a 	add	r3,r3,r3
    a0a8:	18c7883a 	add	r3,r3,r3
    a0ac:	10c7883a 	add	r3,r2,r3
    a0b0:	92000417 	ldw	r8,16(r18)
    a0b4:	a18007cc 	andi	r6,r20,31
    a0b8:	91c00504 	addi	r7,r18,20
    a0bc:	42000144 	addi	r8,r8,5
    a0c0:	4211883a 	add	r8,r8,r8
    a0c4:	4211883a 	add	r8,r8,r8
    a0c8:	9211883a 	add	r8,r18,r8
    a0cc:	30002226 	beq	r6,zero,a158 <__lshift+0x130>
    a0d0:	02800804 	movi	r10,32
    a0d4:	5195c83a 	sub	r10,r10,r6
    a0d8:	000b883a 	mov	r5,zero
    a0dc:	3a400017 	ldw	r9,0(r7)
    a0e0:	18c00104 	addi	r3,r3,4
    a0e4:	39c00104 	addi	r7,r7,4
    a0e8:	4992983a 	sll	r9,r9,r6
    a0ec:	2a4ab03a 	or	r5,r5,r9
    a0f0:	197fff15 	stw	r5,-4(r3)
    a0f4:	397fff17 	ldw	r5,-4(r7)
    a0f8:	2a8ad83a 	srl	r5,r5,r10
    a0fc:	3a3ff736 	bltu	r7,r8,a0dc <__lshift+0xb4>
    a100:	19400015 	stw	r5,0(r3)
    a104:	28000126 	beq	r5,zero,a10c <__lshift+0xe4>
    a108:	ac000084 	addi	r16,r21,2
    a10c:	91000117 	ldw	r4,4(r18)
    a110:	98c01317 	ldw	r3,76(r19)
    a114:	843fffc4 	addi	r16,r16,-1
    a118:	2109883a 	add	r4,r4,r4
    a11c:	2109883a 	add	r4,r4,r4
    a120:	1907883a 	add	r3,r3,r4
    a124:	19000017 	ldw	r4,0(r3)
    a128:	14000415 	stw	r16,16(r2)
    a12c:	91000015 	stw	r4,0(r18)
    a130:	1c800015 	stw	r18,0(r3)
    a134:	dfc00617 	ldw	ra,24(sp)
    a138:	dd400517 	ldw	r21,20(sp)
    a13c:	dd000417 	ldw	r20,16(sp)
    a140:	dcc00317 	ldw	r19,12(sp)
    a144:	dc800217 	ldw	r18,8(sp)
    a148:	dc400117 	ldw	r17,4(sp)
    a14c:	dc000017 	ldw	r16,0(sp)
    a150:	dec00704 	addi	sp,sp,28
    a154:	f800283a 	ret
    a158:	39400017 	ldw	r5,0(r7)
    a15c:	18c00104 	addi	r3,r3,4
    a160:	39c00104 	addi	r7,r7,4
    a164:	197fff15 	stw	r5,-4(r3)
    a168:	3a3fe82e 	bgeu	r7,r8,a10c <__lshift+0xe4>
    a16c:	39400017 	ldw	r5,0(r7)
    a170:	18c00104 	addi	r3,r3,4
    a174:	39c00104 	addi	r7,r7,4
    a178:	197fff15 	stw	r5,-4(r3)
    a17c:	3a3ff636 	bltu	r7,r8,a158 <__lshift+0x130>
    a180:	003fe206 	br	a10c <__lshift+0xe4>

0000a184 <__mcmp>:
    a184:	20800417 	ldw	r2,16(r4)
    a188:	28c00417 	ldw	r3,16(r5)
    a18c:	10c5c83a 	sub	r2,r2,r3
    a190:	10000f1e 	bne	r2,zero,a1d0 <__mcmp+0x4c>
    a194:	18c00144 	addi	r3,r3,5
    a198:	18c7883a 	add	r3,r3,r3
    a19c:	18c7883a 	add	r3,r3,r3
    a1a0:	21c00504 	addi	r7,r4,20
    a1a4:	28cb883a 	add	r5,r5,r3
    a1a8:	20c9883a 	add	r4,r4,r3
    a1ac:	213fff04 	addi	r4,r4,-4
    a1b0:	297fff04 	addi	r5,r5,-4
    a1b4:	21800017 	ldw	r6,0(r4)
    a1b8:	28c00017 	ldw	r3,0(r5)
    a1bc:	30c0021e 	bne	r6,r3,a1c8 <__mcmp+0x44>
    a1c0:	393ffa36 	bltu	r7,r4,a1ac <__mcmp+0x28>
    a1c4:	f800283a 	ret
    a1c8:	30c00236 	bltu	r6,r3,a1d4 <__mcmp+0x50>
    a1cc:	00800044 	movi	r2,1
    a1d0:	f800283a 	ret
    a1d4:	00bfffc4 	movi	r2,-1
    a1d8:	f800283a 	ret

0000a1dc <__mdiff>:
    a1dc:	defffb04 	addi	sp,sp,-20
    a1e0:	dc000015 	stw	r16,0(sp)
    a1e4:	2821883a 	mov	r16,r5
    a1e8:	dc800215 	stw	r18,8(sp)
    a1ec:	300b883a 	mov	r5,r6
    a1f0:	2025883a 	mov	r18,r4
    a1f4:	8009883a 	mov	r4,r16
    a1f8:	dc400115 	stw	r17,4(sp)
    a1fc:	dfc00415 	stw	ra,16(sp)
    a200:	dcc00315 	stw	r19,12(sp)
    a204:	3023883a 	mov	r17,r6
    a208:	000a1840 	call	a184 <__mcmp>
    a20c:	10005026 	beq	r2,zero,a350 <__mdiff+0x174>
    a210:	10004a16 	blt	r2,zero,a33c <__mdiff+0x160>
    a214:	0027883a 	mov	r19,zero
    a218:	81400117 	ldw	r5,4(r16)
    a21c:	9009883a 	mov	r4,r18
    a220:	00098380 	call	9838 <_Balloc>
    a224:	82400417 	ldw	r9,16(r16)
    a228:	89800417 	ldw	r6,16(r17)
    a22c:	14c00315 	stw	r19,12(r2)
    a230:	4b800144 	addi	r14,r9,5
    a234:	31800144 	addi	r6,r6,5
    a238:	739d883a 	add	r14,r14,r14
    a23c:	318d883a 	add	r6,r6,r6
    a240:	739d883a 	add	r14,r14,r14
    a244:	318d883a 	add	r6,r6,r6
    a248:	81c00504 	addi	r7,r16,20
    a24c:	839d883a 	add	r14,r16,r14
    a250:	8a000504 	addi	r8,r17,20
    a254:	898d883a 	add	r6,r17,r6
    a258:	10c00504 	addi	r3,r2,20
    a25c:	0009883a 	mov	r4,zero
    a260:	3b000017 	ldw	r12,0(r7)
    a264:	42c00017 	ldw	r11,0(r8)
    a268:	42000104 	addi	r8,r8,4
    a26c:	62bfffcc 	andi	r10,r12,65535
    a270:	5b7fffcc 	andi	r13,r11,65535
    a274:	5109883a 	add	r4,r10,r4
    a278:	2355c83a 	sub	r10,r4,r13
    a27c:	5816d43a 	srli	r11,r11,16
    a280:	6008d43a 	srli	r4,r12,16
    a284:	501bd43a 	srai	r13,r10,16
    a288:	1a80000d 	sth	r10,0(r3)
    a28c:	22c9c83a 	sub	r4,r4,r11
    a290:	2349883a 	add	r4,r4,r13
    a294:	1900008d 	sth	r4,2(r3)
    a298:	39c00104 	addi	r7,r7,4
    a29c:	2009d43a 	srai	r4,r4,16
    a2a0:	18c00104 	addi	r3,r3,4
    a2a4:	41bfee36 	bltu	r8,r6,a260 <__mdiff+0x84>
    a2a8:	180b883a 	mov	r5,r3
    a2ac:	3815883a 	mov	r10,r7
    a2b0:	3b80132e 	bgeu	r7,r14,a300 <__mdiff+0x124>
    a2b4:	3a000017 	ldw	r8,0(r7)
    a2b8:	18c00104 	addi	r3,r3,4
    a2bc:	39c00104 	addi	r7,r7,4
    a2c0:	41bfffcc 	andi	r6,r8,65535
    a2c4:	310d883a 	add	r6,r6,r4
    a2c8:	3009d43a 	srai	r4,r6,16
    a2cc:	4010d43a 	srli	r8,r8,16
    a2d0:	19bfff0d 	sth	r6,-4(r3)
    a2d4:	2209883a 	add	r4,r4,r8
    a2d8:	193fff8d 	sth	r4,-2(r3)
    a2dc:	2009d43a 	srai	r4,r4,16
    a2e0:	3bbff436 	bltu	r7,r14,a2b4 <__mdiff+0xd8>
    a2e4:	0286303a 	nor	r3,zero,r10
    a2e8:	1b87883a 	add	r3,r3,r14
    a2ec:	1806d0ba 	srli	r3,r3,2
    a2f0:	18c00044 	addi	r3,r3,1
    a2f4:	18c7883a 	add	r3,r3,r3
    a2f8:	18c7883a 	add	r3,r3,r3
    a2fc:	28c7883a 	add	r3,r5,r3
    a300:	193fff17 	ldw	r4,-4(r3)
    a304:	18ffff04 	addi	r3,r3,-4
    a308:	2000041e 	bne	r4,zero,a31c <__mdiff+0x140>
    a30c:	18ffff04 	addi	r3,r3,-4
    a310:	19000017 	ldw	r4,0(r3)
    a314:	4a7fffc4 	addi	r9,r9,-1
    a318:	203ffc26 	beq	r4,zero,a30c <__mdiff+0x130>
    a31c:	12400415 	stw	r9,16(r2)
    a320:	dfc00417 	ldw	ra,16(sp)
    a324:	dcc00317 	ldw	r19,12(sp)
    a328:	dc800217 	ldw	r18,8(sp)
    a32c:	dc400117 	ldw	r17,4(sp)
    a330:	dc000017 	ldw	r16,0(sp)
    a334:	dec00504 	addi	sp,sp,20
    a338:	f800283a 	ret
    a33c:	8005883a 	mov	r2,r16
    a340:	04c00044 	movi	r19,1
    a344:	8821883a 	mov	r16,r17
    a348:	1023883a 	mov	r17,r2
    a34c:	003fb206 	br	a218 <__mdiff+0x3c>
    a350:	9009883a 	mov	r4,r18
    a354:	000b883a 	mov	r5,zero
    a358:	00098380 	call	9838 <_Balloc>
    a35c:	00c00044 	movi	r3,1
    a360:	10c00415 	stw	r3,16(r2)
    a364:	10000515 	stw	zero,20(r2)
    a368:	dfc00417 	ldw	ra,16(sp)
    a36c:	dcc00317 	ldw	r19,12(sp)
    a370:	dc800217 	ldw	r18,8(sp)
    a374:	dc400117 	ldw	r17,4(sp)
    a378:	dc000017 	ldw	r16,0(sp)
    a37c:	dec00504 	addi	sp,sp,20
    a380:	f800283a 	ret

0000a384 <__ulp>:
    a384:	295ffc2c 	andhi	r5,r5,32752
    a388:	00bf3034 	movhi	r2,64704
    a38c:	2887883a 	add	r3,r5,r2
    a390:	00c0020e 	bge	zero,r3,a39c <__ulp+0x18>
    a394:	0005883a 	mov	r2,zero
    a398:	f800283a 	ret
    a39c:	00c7c83a 	sub	r3,zero,r3
    a3a0:	1805d53a 	srai	r2,r3,20
    a3a4:	00c004c4 	movi	r3,19
    a3a8:	18800a0e 	bge	r3,r2,a3d4 <__ulp+0x50>
    a3ac:	01000c84 	movi	r4,50
    a3b0:	0007883a 	mov	r3,zero
    a3b4:	20800516 	blt	r4,r2,a3cc <__ulp+0x48>
    a3b8:	01000cc4 	movi	r4,51
    a3bc:	2085c83a 	sub	r2,r4,r2
    a3c0:	01000044 	movi	r4,1
    a3c4:	2084983a 	sll	r2,r4,r2
    a3c8:	f800283a 	ret
    a3cc:	00800044 	movi	r2,1
    a3d0:	f800283a 	ret
    a3d4:	00c00234 	movhi	r3,8
    a3d8:	1887d83a 	sra	r3,r3,r2
    a3dc:	0005883a 	mov	r2,zero
    a3e0:	f800283a 	ret

0000a3e4 <__b2d>:
    a3e4:	defffa04 	addi	sp,sp,-24
    a3e8:	dc000015 	stw	r16,0(sp)
    a3ec:	24000417 	ldw	r16,16(r4)
    a3f0:	dc400115 	stw	r17,4(sp)
    a3f4:	dcc00315 	stw	r19,12(sp)
    a3f8:	84000144 	addi	r16,r16,5
    a3fc:	8421883a 	add	r16,r16,r16
    a400:	8421883a 	add	r16,r16,r16
    a404:	2421883a 	add	r16,r4,r16
    a408:	847fff17 	ldw	r17,-4(r16)
    a40c:	24c00504 	addi	r19,r4,20
    a410:	dd000415 	stw	r20,16(sp)
    a414:	8809883a 	mov	r4,r17
    a418:	dc800215 	stw	r18,8(sp)
    a41c:	2829883a 	mov	r20,r5
    a420:	dfc00515 	stw	ra,20(sp)
    a424:	0009b500 	call	9b50 <__hi0bits>
    a428:	00c00804 	movi	r3,32
    a42c:	1887c83a 	sub	r3,r3,r2
    a430:	a0c00015 	stw	r3,0(r20)
    a434:	00c00284 	movi	r3,10
    a438:	84bfff04 	addi	r18,r16,-4
    a43c:	18801216 	blt	r3,r2,a488 <__b2d+0xa4>
    a440:	010002c4 	movi	r4,11
    a444:	2089c83a 	sub	r4,r4,r2
    a448:	8906d83a 	srl	r3,r17,r4
    a44c:	18cffc34 	orhi	r3,r3,16368
    a450:	9c80322e 	bgeu	r19,r18,a51c <__b2d+0x138>
    a454:	817ffe17 	ldw	r5,-8(r16)
    a458:	2908d83a 	srl	r4,r5,r4
    a45c:	10800544 	addi	r2,r2,21
    a460:	88a2983a 	sll	r17,r17,r2
    a464:	2444b03a 	or	r2,r4,r17
    a468:	dfc00517 	ldw	ra,20(sp)
    a46c:	dd000417 	ldw	r20,16(sp)
    a470:	dcc00317 	ldw	r19,12(sp)
    a474:	dc800217 	ldw	r18,8(sp)
    a478:	dc400117 	ldw	r17,4(sp)
    a47c:	dc000017 	ldw	r16,0(sp)
    a480:	dec00604 	addi	sp,sp,24
    a484:	f800283a 	ret
    a488:	9c801636 	bltu	r19,r18,a4e4 <__b2d+0x100>
    a48c:	113ffd44 	addi	r4,r2,-11
    a490:	000b883a 	mov	r5,zero
    a494:	20001726 	beq	r4,zero,a4f4 <__b2d+0x110>
    a498:	00c00ac4 	movi	r3,43
    a49c:	1885c83a 	sub	r2,r3,r2
    a4a0:	8906983a 	sll	r3,r17,r4
    a4a4:	288cd83a 	srl	r6,r5,r2
    a4a8:	18cffc34 	orhi	r3,r3,16368
    a4ac:	1986b03a 	or	r3,r3,r6
    a4b0:	9c801c2e 	bgeu	r19,r18,a524 <__b2d+0x140>
    a4b4:	91bfff17 	ldw	r6,-4(r18)
    a4b8:	3084d83a 	srl	r2,r6,r2
    a4bc:	2908983a 	sll	r4,r5,r4
    a4c0:	1104b03a 	or	r2,r2,r4
    a4c4:	dfc00517 	ldw	ra,20(sp)
    a4c8:	dd000417 	ldw	r20,16(sp)
    a4cc:	dcc00317 	ldw	r19,12(sp)
    a4d0:	dc800217 	ldw	r18,8(sp)
    a4d4:	dc400117 	ldw	r17,4(sp)
    a4d8:	dc000017 	ldw	r16,0(sp)
    a4dc:	dec00604 	addi	sp,sp,24
    a4e0:	f800283a 	ret
    a4e4:	113ffd44 	addi	r4,r2,-11
    a4e8:	84bffe04 	addi	r18,r16,-8
    a4ec:	817ffe17 	ldw	r5,-8(r16)
    a4f0:	203fe91e 	bne	r4,zero,a498 <__b2d+0xb4>
    a4f4:	88cffc34 	orhi	r3,r17,16368
    a4f8:	2805883a 	mov	r2,r5
    a4fc:	dfc00517 	ldw	ra,20(sp)
    a500:	dd000417 	ldw	r20,16(sp)
    a504:	dcc00317 	ldw	r19,12(sp)
    a508:	dc800217 	ldw	r18,8(sp)
    a50c:	dc400117 	ldw	r17,4(sp)
    a510:	dc000017 	ldw	r16,0(sp)
    a514:	dec00604 	addi	sp,sp,24
    a518:	f800283a 	ret
    a51c:	0009883a 	mov	r4,zero
    a520:	003fce06 	br	a45c <__b2d+0x78>
    a524:	0005883a 	mov	r2,zero
    a528:	003fe406 	br	a4bc <__b2d+0xd8>

0000a52c <__d2b>:
    a52c:	defff804 	addi	sp,sp,-32
    a530:	dc400315 	stw	r17,12(sp)
    a534:	3023883a 	mov	r17,r6
    a538:	dc800415 	stw	r18,16(sp)
    a53c:	8824907a 	slli	r18,r17,1
    a540:	dcc00515 	stw	r19,20(sp)
    a544:	2827883a 	mov	r19,r5
    a548:	9024d57a 	srli	r18,r18,21
    a54c:	01400044 	movi	r5,1
    a550:	dd000615 	stw	r20,24(sp)
    a554:	dc000215 	stw	r16,8(sp)
    a558:	dfc00715 	stw	ra,28(sp)
    a55c:	3829883a 	mov	r20,r7
    a560:	00098380 	call	9838 <_Balloc>
    a564:	1021883a 	mov	r16,r2
    a568:	00800434 	movhi	r2,16
    a56c:	10bfffc4 	addi	r2,r2,-1
    a570:	88a2703a 	and	r17,r17,r2
    a574:	90000126 	beq	r18,zero,a57c <__d2b+0x50>
    a578:	8c400434 	orhi	r17,r17,16
    a57c:	dc400015 	stw	r17,0(sp)
    a580:	98002226 	beq	r19,zero,a60c <__d2b+0xe0>
    a584:	d9000104 	addi	r4,sp,4
    a588:	dcc00115 	stw	r19,4(sp)
    a58c:	0009bb80 	call	9bb8 <__lo0bits>
    a590:	d8c00017 	ldw	r3,0(sp)
    a594:	10002d1e 	bne	r2,zero,a64c <__d2b+0x120>
    a598:	d9000117 	ldw	r4,4(sp)
    a59c:	81000515 	stw	r4,20(r16)
    a5a0:	1823003a 	cmpeq	r17,r3,zero
    a5a4:	01000084 	movi	r4,2
    a5a8:	2463c83a 	sub	r17,r4,r17
    a5ac:	80c00615 	stw	r3,24(r16)
    a5b0:	84400415 	stw	r17,16(r16)
    a5b4:	90001d1e 	bne	r18,zero,a62c <__d2b+0x100>
    a5b8:	88c00104 	addi	r3,r17,4
    a5bc:	18c7883a 	add	r3,r3,r3
    a5c0:	18c7883a 	add	r3,r3,r3
    a5c4:	80c7883a 	add	r3,r16,r3
    a5c8:	19000017 	ldw	r4,0(r3)
    a5cc:	10bef384 	addi	r2,r2,-1074
    a5d0:	a0800015 	stw	r2,0(r20)
    a5d4:	0009b500 	call	9b50 <__hi0bits>
    a5d8:	8822917a 	slli	r17,r17,5
    a5dc:	d8c00817 	ldw	r3,32(sp)
    a5e0:	8885c83a 	sub	r2,r17,r2
    a5e4:	18800015 	stw	r2,0(r3)
    a5e8:	8005883a 	mov	r2,r16
    a5ec:	dfc00717 	ldw	ra,28(sp)
    a5f0:	dd000617 	ldw	r20,24(sp)
    a5f4:	dcc00517 	ldw	r19,20(sp)
    a5f8:	dc800417 	ldw	r18,16(sp)
    a5fc:	dc400317 	ldw	r17,12(sp)
    a600:	dc000217 	ldw	r16,8(sp)
    a604:	dec00804 	addi	sp,sp,32
    a608:	f800283a 	ret
    a60c:	d809883a 	mov	r4,sp
    a610:	0009bb80 	call	9bb8 <__lo0bits>
    a614:	d8c00017 	ldw	r3,0(sp)
    a618:	04400044 	movi	r17,1
    a61c:	84400415 	stw	r17,16(r16)
    a620:	80c00515 	stw	r3,20(r16)
    a624:	10800804 	addi	r2,r2,32
    a628:	903fe326 	beq	r18,zero,a5b8 <__d2b+0x8c>
    a62c:	00c00d44 	movi	r3,53
    a630:	94bef344 	addi	r18,r18,-1075
    a634:	90a5883a 	add	r18,r18,r2
    a638:	1885c83a 	sub	r2,r3,r2
    a63c:	d8c00817 	ldw	r3,32(sp)
    a640:	a4800015 	stw	r18,0(r20)
    a644:	18800015 	stw	r2,0(r3)
    a648:	003fe706 	br	a5e8 <__d2b+0xbc>
    a64c:	01000804 	movi	r4,32
    a650:	2089c83a 	sub	r4,r4,r2
    a654:	1908983a 	sll	r4,r3,r4
    a658:	d9400117 	ldw	r5,4(sp)
    a65c:	1886d83a 	srl	r3,r3,r2
    a660:	2148b03a 	or	r4,r4,r5
    a664:	81000515 	stw	r4,20(r16)
    a668:	d8c00015 	stw	r3,0(sp)
    a66c:	003fcc06 	br	a5a0 <__d2b+0x74>

0000a670 <__ratio>:
    a670:	defff904 	addi	sp,sp,-28
    a674:	dc400315 	stw	r17,12(sp)
    a678:	2823883a 	mov	r17,r5
    a67c:	d9400104 	addi	r5,sp,4
    a680:	dfc00615 	stw	ra,24(sp)
    a684:	dcc00515 	stw	r19,20(sp)
    a688:	dc800415 	stw	r18,16(sp)
    a68c:	2027883a 	mov	r19,r4
    a690:	dc000215 	stw	r16,8(sp)
    a694:	000a3e40 	call	a3e4 <__b2d>
    a698:	8809883a 	mov	r4,r17
    a69c:	d80b883a 	mov	r5,sp
    a6a0:	1025883a 	mov	r18,r2
    a6a4:	1821883a 	mov	r16,r3
    a6a8:	000a3e40 	call	a3e4 <__b2d>
    a6ac:	99400417 	ldw	r5,16(r19)
    a6b0:	89000417 	ldw	r4,16(r17)
    a6b4:	d9800117 	ldw	r6,4(sp)
    a6b8:	2909c83a 	sub	r4,r5,r4
    a6bc:	d9400017 	ldw	r5,0(sp)
    a6c0:	2008917a 	slli	r4,r4,5
    a6c4:	314bc83a 	sub	r5,r6,r5
    a6c8:	290b883a 	add	r5,r5,r4
    a6cc:	01400e0e 	bge	zero,r5,a708 <__ratio+0x98>
    a6d0:	280a953a 	slli	r5,r5,20
    a6d4:	2c21883a 	add	r16,r5,r16
    a6d8:	9009883a 	mov	r4,r18
    a6dc:	800b883a 	mov	r5,r16
    a6e0:	100d883a 	mov	r6,r2
    a6e4:	180f883a 	mov	r7,r3
    a6e8:	000fc4c0 	call	fc4c <__divdf3>
    a6ec:	dfc00617 	ldw	ra,24(sp)
    a6f0:	dcc00517 	ldw	r19,20(sp)
    a6f4:	dc800417 	ldw	r18,16(sp)
    a6f8:	dc400317 	ldw	r17,12(sp)
    a6fc:	dc000217 	ldw	r16,8(sp)
    a700:	dec00704 	addi	sp,sp,28
    a704:	f800283a 	ret
    a708:	280a953a 	slli	r5,r5,20
    a70c:	1947c83a 	sub	r3,r3,r5
    a710:	003ff106 	br	a6d8 <__ratio+0x68>

0000a714 <_mprec_log10>:
    a714:	defffe04 	addi	sp,sp,-8
    a718:	dc000015 	stw	r16,0(sp)
    a71c:	dfc00115 	stw	ra,4(sp)
    a720:	008005c4 	movi	r2,23
    a724:	2021883a 	mov	r16,r4
    a728:	11000d0e 	bge	r2,r4,a760 <_mprec_log10+0x4c>
    a72c:	0005883a 	mov	r2,zero
    a730:	00cffc34 	movhi	r3,16368
    a734:	843fffc4 	addi	r16,r16,-1
    a738:	1009883a 	mov	r4,r2
    a73c:	180b883a 	mov	r5,r3
    a740:	000d883a 	mov	r6,zero
    a744:	01d00934 	movhi	r7,16420
    a748:	000f9680 	call	f968 <__muldf3>
    a74c:	803ff91e 	bne	r16,zero,a734 <_mprec_log10+0x20>
    a750:	dfc00117 	ldw	ra,4(sp)
    a754:	dc000017 	ldw	r16,0(sp)
    a758:	dec00204 	addi	sp,sp,8
    a75c:	f800283a 	ret
    a760:	202090fa 	slli	r16,r4,3
    a764:	00800074 	movhi	r2,1
    a768:	10915704 	addi	r2,r2,17756
    a76c:	1421883a 	add	r16,r2,r16
    a770:	80800017 	ldw	r2,0(r16)
    a774:	80c00117 	ldw	r3,4(r16)
    a778:	dfc00117 	ldw	ra,4(sp)
    a77c:	dc000017 	ldw	r16,0(sp)
    a780:	dec00204 	addi	sp,sp,8
    a784:	f800283a 	ret

0000a788 <__copybits>:
    a788:	297fffc4 	addi	r5,r5,-1
    a78c:	31c00417 	ldw	r7,16(r6)
    a790:	2811d17a 	srai	r8,r5,5
    a794:	30800504 	addi	r2,r6,20
    a798:	39c00144 	addi	r7,r7,5
    a79c:	42000044 	addi	r8,r8,1
    a7a0:	39cf883a 	add	r7,r7,r7
    a7a4:	4211883a 	add	r8,r8,r8
    a7a8:	39cf883a 	add	r7,r7,r7
    a7ac:	4211883a 	add	r8,r8,r8
    a7b0:	31cf883a 	add	r7,r6,r7
    a7b4:	2211883a 	add	r8,r4,r8
    a7b8:	11c00d2e 	bgeu	r2,r7,a7f0 <__copybits+0x68>
    a7bc:	2007883a 	mov	r3,r4
    a7c0:	11400017 	ldw	r5,0(r2)
    a7c4:	18c00104 	addi	r3,r3,4
    a7c8:	10800104 	addi	r2,r2,4
    a7cc:	197fff15 	stw	r5,-4(r3)
    a7d0:	11fffb36 	bltu	r2,r7,a7c0 <__copybits+0x38>
    a7d4:	3985c83a 	sub	r2,r7,r6
    a7d8:	10bffac4 	addi	r2,r2,-21
    a7dc:	1004d0ba 	srli	r2,r2,2
    a7e0:	10800044 	addi	r2,r2,1
    a7e4:	1085883a 	add	r2,r2,r2
    a7e8:	1085883a 	add	r2,r2,r2
    a7ec:	2089883a 	add	r4,r4,r2
    a7f0:	2200032e 	bgeu	r4,r8,a800 <__copybits+0x78>
    a7f4:	20000015 	stw	zero,0(r4)
    a7f8:	21000104 	addi	r4,r4,4
    a7fc:	223ffd36 	bltu	r4,r8,a7f4 <__copybits+0x6c>
    a800:	f800283a 	ret

0000a804 <__any_on>:
    a804:	21800417 	ldw	r6,16(r4)
    a808:	2805d17a 	srai	r2,r5,5
    a80c:	20c00504 	addi	r3,r4,20
    a810:	30800f0e 	bge	r6,r2,a850 <__any_on+0x4c>
    a814:	3005883a 	mov	r2,r6
    a818:	10800144 	addi	r2,r2,5
    a81c:	1085883a 	add	r2,r2,r2
    a820:	1085883a 	add	r2,r2,r2
    a824:	2089883a 	add	r4,r4,r2
    a828:	1900152e 	bgeu	r3,r4,a880 <__any_on+0x7c>
    a82c:	20bfff17 	ldw	r2,-4(r4)
    a830:	213fff04 	addi	r4,r4,-4
    a834:	1000041e 	bne	r2,zero,a848 <__any_on+0x44>
    a838:	1900112e 	bgeu	r3,r4,a880 <__any_on+0x7c>
    a83c:	213fff04 	addi	r4,r4,-4
    a840:	20800017 	ldw	r2,0(r4)
    a844:	103ffc26 	beq	r2,zero,a838 <__any_on+0x34>
    a848:	00800044 	movi	r2,1
    a84c:	f800283a 	ret
    a850:	11bff10e 	bge	r2,r6,a818 <__any_on+0x14>
    a854:	294007cc 	andi	r5,r5,31
    a858:	283fef26 	beq	r5,zero,a818 <__any_on+0x14>
    a85c:	11800144 	addi	r6,r2,5
    a860:	318d883a 	add	r6,r6,r6
    a864:	318d883a 	add	r6,r6,r6
    a868:	218d883a 	add	r6,r4,r6
    a86c:	31800017 	ldw	r6,0(r6)
    a870:	314ed83a 	srl	r7,r6,r5
    a874:	394a983a 	sll	r5,r7,r5
    a878:	29bff31e 	bne	r5,r6,a848 <__any_on+0x44>
    a87c:	003fe606 	br	a818 <__any_on+0x14>
    a880:	0005883a 	mov	r2,zero
    a884:	f800283a 	ret

0000a888 <_putc_r>:
    a888:	defffc04 	addi	sp,sp,-16
    a88c:	dc000215 	stw	r16,8(sp)
    a890:	dfc00315 	stw	ra,12(sp)
    a894:	2021883a 	mov	r16,r4
    a898:	20000226 	beq	r4,zero,a8a4 <_putc_r+0x1c>
    a89c:	20800e17 	ldw	r2,56(r4)
    a8a0:	10001d26 	beq	r2,zero,a918 <_putc_r+0x90>
    a8a4:	30800217 	ldw	r2,8(r6)
    a8a8:	10bfffc4 	addi	r2,r2,-1
    a8ac:	30800215 	stw	r2,8(r6)
    a8b0:	10000a16 	blt	r2,zero,a8dc <_putc_r+0x54>
    a8b4:	30800017 	ldw	r2,0(r6)
    a8b8:	11400005 	stb	r5,0(r2)
    a8bc:	30800017 	ldw	r2,0(r6)
    a8c0:	10c00044 	addi	r3,r2,1
    a8c4:	10800003 	ldbu	r2,0(r2)
    a8c8:	30c00015 	stw	r3,0(r6)
    a8cc:	dfc00317 	ldw	ra,12(sp)
    a8d0:	dc000217 	ldw	r16,8(sp)
    a8d4:	dec00404 	addi	sp,sp,16
    a8d8:	f800283a 	ret
    a8dc:	30c00617 	ldw	r3,24(r6)
    a8e0:	10c01316 	blt	r2,r3,a930 <_putc_r+0xa8>
    a8e4:	30800017 	ldw	r2,0(r6)
    a8e8:	01000284 	movi	r4,10
    a8ec:	11400005 	stb	r5,0(r2)
    a8f0:	30c00017 	ldw	r3,0(r6)
    a8f4:	19400003 	ldbu	r5,0(r3)
    a8f8:	29000d26 	beq	r5,r4,a930 <_putc_r+0xa8>
    a8fc:	18c00044 	addi	r3,r3,1
    a900:	2805883a 	mov	r2,r5
    a904:	30c00015 	stw	r3,0(r6)
    a908:	dfc00317 	ldw	ra,12(sp)
    a90c:	dc000217 	ldw	r16,8(sp)
    a910:	dec00404 	addi	sp,sp,16
    a914:	f800283a 	ret
    a918:	d9400015 	stw	r5,0(sp)
    a91c:	d9800115 	stw	r6,4(sp)
    a920:	00019380 	call	1938 <__sinit>
    a924:	d9800117 	ldw	r6,4(sp)
    a928:	d9400017 	ldw	r5,0(sp)
    a92c:	003fdd06 	br	a8a4 <_putc_r+0x1c>
    a930:	8009883a 	mov	r4,r16
    a934:	dfc00317 	ldw	ra,12(sp)
    a938:	dc000217 	ldw	r16,8(sp)
    a93c:	dec00404 	addi	sp,sp,16
    a940:	000d8881 	jmpi	d888 <__swbuf_r>

0000a944 <putc>:
    a944:	defffc04 	addi	sp,sp,-16
    a948:	dc400115 	stw	r17,4(sp)
    a94c:	04400074 	movhi	r17,1
    a950:	8c58ae04 	addi	r17,r17,25272
    a954:	88800017 	ldw	r2,0(r17)
    a958:	dc800215 	stw	r18,8(sp)
    a95c:	dc000015 	stw	r16,0(sp)
    a960:	dfc00315 	stw	ra,12(sp)
    a964:	2025883a 	mov	r18,r4
    a968:	2821883a 	mov	r16,r5
    a96c:	10000226 	beq	r2,zero,a978 <putc+0x34>
    a970:	10c00e17 	ldw	r3,56(r2)
    a974:	18002126 	beq	r3,zero,a9fc <putc+0xb8>
    a978:	80800217 	ldw	r2,8(r16)
    a97c:	10bfffc4 	addi	r2,r2,-1
    a980:	80800215 	stw	r2,8(r16)
    a984:	10000c16 	blt	r2,zero,a9b8 <putc+0x74>
    a988:	80800017 	ldw	r2,0(r16)
    a98c:	14800005 	stb	r18,0(r2)
    a990:	80800017 	ldw	r2,0(r16)
    a994:	10c00044 	addi	r3,r2,1
    a998:	10800003 	ldbu	r2,0(r2)
    a99c:	80c00015 	stw	r3,0(r16)
    a9a0:	dfc00317 	ldw	ra,12(sp)
    a9a4:	dc800217 	ldw	r18,8(sp)
    a9a8:	dc400117 	ldw	r17,4(sp)
    a9ac:	dc000017 	ldw	r16,0(sp)
    a9b0:	dec00404 	addi	sp,sp,16
    a9b4:	f800283a 	ret
    a9b8:	80c00617 	ldw	r3,24(r16)
    a9bc:	10c01216 	blt	r2,r3,aa08 <putc+0xc4>
    a9c0:	80800017 	ldw	r2,0(r16)
    a9c4:	01000284 	movi	r4,10
    a9c8:	14800005 	stb	r18,0(r2)
    a9cc:	80c00017 	ldw	r3,0(r16)
    a9d0:	19400003 	ldbu	r5,0(r3)
    a9d4:	29001526 	beq	r5,r4,aa2c <putc+0xe8>
    a9d8:	18c00044 	addi	r3,r3,1
    a9dc:	2805883a 	mov	r2,r5
    a9e0:	80c00015 	stw	r3,0(r16)
    a9e4:	dfc00317 	ldw	ra,12(sp)
    a9e8:	dc800217 	ldw	r18,8(sp)
    a9ec:	dc400117 	ldw	r17,4(sp)
    a9f0:	dc000017 	ldw	r16,0(sp)
    a9f4:	dec00404 	addi	sp,sp,16
    a9f8:	f800283a 	ret
    a9fc:	1009883a 	mov	r4,r2
    aa00:	00019380 	call	1938 <__sinit>
    aa04:	003fdc06 	br	a978 <putc+0x34>
    aa08:	89000017 	ldw	r4,0(r17)
    aa0c:	900b883a 	mov	r5,r18
    aa10:	800d883a 	mov	r6,r16
    aa14:	dfc00317 	ldw	ra,12(sp)
    aa18:	dc800217 	ldw	r18,8(sp)
    aa1c:	dc400117 	ldw	r17,4(sp)
    aa20:	dc000017 	ldw	r16,0(sp)
    aa24:	dec00404 	addi	sp,sp,16
    aa28:	000d8881 	jmpi	d888 <__swbuf_r>
    aa2c:	89000017 	ldw	r4,0(r17)
    aa30:	003ff706 	br	aa10 <putc+0xcc>

0000aa34 <_read_r>:
    aa34:	defffd04 	addi	sp,sp,-12
    aa38:	dc400115 	stw	r17,4(sp)
    aa3c:	dc000015 	stw	r16,0(sp)
    aa40:	2023883a 	mov	r17,r4
    aa44:	04000074 	movhi	r16,1
    aa48:	841fac04 	addi	r16,r16,32432
    aa4c:	2809883a 	mov	r4,r5
    aa50:	300b883a 	mov	r5,r6
    aa54:	380d883a 	mov	r6,r7
    aa58:	dfc00215 	stw	ra,8(sp)
    aa5c:	80000015 	stw	zero,0(r16)
    aa60:	00115800 	call	11580 <read>
    aa64:	00ffffc4 	movi	r3,-1
    aa68:	10c00526 	beq	r2,r3,aa80 <_read_r+0x4c>
    aa6c:	dfc00217 	ldw	ra,8(sp)
    aa70:	dc400117 	ldw	r17,4(sp)
    aa74:	dc000017 	ldw	r16,0(sp)
    aa78:	dec00304 	addi	sp,sp,12
    aa7c:	f800283a 	ret
    aa80:	80c00017 	ldw	r3,0(r16)
    aa84:	183ff926 	beq	r3,zero,aa6c <_read_r+0x38>
    aa88:	88c00015 	stw	r3,0(r17)
    aa8c:	dfc00217 	ldw	ra,8(sp)
    aa90:	dc400117 	ldw	r17,4(sp)
    aa94:	dc000017 	ldw	r16,0(sp)
    aa98:	dec00304 	addi	sp,sp,12
    aa9c:	f800283a 	ret

0000aaa0 <_realloc_r>:
    aaa0:	defff504 	addi	sp,sp,-44
    aaa4:	dd400615 	stw	r21,24(sp)
    aaa8:	dc800315 	stw	r18,12(sp)
    aaac:	dc000115 	stw	r16,4(sp)
    aab0:	dfc00a15 	stw	ra,40(sp)
    aab4:	df000915 	stw	fp,36(sp)
    aab8:	ddc00815 	stw	r23,32(sp)
    aabc:	dd800715 	stw	r22,28(sp)
    aac0:	dd000515 	stw	r20,20(sp)
    aac4:	dcc00415 	stw	r19,16(sp)
    aac8:	dc400215 	stw	r17,8(sp)
    aacc:	2821883a 	mov	r16,r5
    aad0:	202b883a 	mov	r21,r4
    aad4:	3025883a 	mov	r18,r6
    aad8:	28009626 	beq	r5,zero,ad34 <_realloc_r+0x294>
    aadc:	00112580 	call	11258 <__malloc_lock>
    aae0:	80bfff17 	ldw	r2,-4(r16)
    aae4:	04ffff04 	movi	r19,-4
    aae8:	90c002c4 	addi	r3,r18,11
    aaec:	01000584 	movi	r4,22
    aaf0:	85bffe04 	addi	r22,r16,-8
    aaf4:	14e6703a 	and	r19,r2,r19
    aaf8:	20c0372e 	bgeu	r4,r3,abd8 <_realloc_r+0x138>
    aafc:	047ffe04 	movi	r17,-8
    ab00:	1c62703a 	and	r17,r3,r17
    ab04:	8807883a 	mov	r3,r17
    ab08:	88005a16 	blt	r17,zero,ac74 <_realloc_r+0x1d4>
    ab0c:	8c805936 	bltu	r17,r18,ac74 <_realloc_r+0x1d4>
    ab10:	98c0340e 	bge	r19,r3,abe4 <_realloc_r+0x144>
    ab14:	07000074 	movhi	fp,1
    ab18:	e7131204 	addi	fp,fp,19528
    ab1c:	e1400217 	ldw	r5,8(fp)
    ab20:	b4c9883a 	add	r4,r22,r19
    ab24:	29009026 	beq	r5,r4,ad68 <_realloc_r+0x2c8>
    ab28:	21800117 	ldw	r6,4(r4)
    ab2c:	01ffff84 	movi	r7,-2
    ab30:	31ce703a 	and	r7,r6,r7
    ab34:	21cf883a 	add	r7,r4,r7
    ab38:	39c00117 	ldw	r7,4(r7)
    ab3c:	39c0004c 	andi	r7,r7,1
    ab40:	38004326 	beq	r7,zero,ac50 <_realloc_r+0x1b0>
    ab44:	000d883a 	mov	r6,zero
    ab48:	0009883a 	mov	r4,zero
    ab4c:	1080004c 	andi	r2,r2,1
    ab50:	10005a1e 	bne	r2,zero,acbc <_realloc_r+0x21c>
    ab54:	85fffe17 	ldw	r23,-8(r16)
    ab58:	00bfff04 	movi	r2,-4
    ab5c:	b5efc83a 	sub	r23,r22,r23
    ab60:	b9c00117 	ldw	r7,4(r23)
    ab64:	388e703a 	and	r7,r7,r2
    ab68:	3ccf883a 	add	r7,r7,r19
    ab6c:	20005226 	beq	r4,zero,acb8 <_realloc_r+0x218>
    ab70:	31e9883a 	add	r20,r6,r7
    ab74:	2140c726 	beq	r4,r5,ae94 <_realloc_r+0x3f4>
    ab78:	a0c04f16 	blt	r20,r3,acb8 <_realloc_r+0x218>
    ab7c:	20800317 	ldw	r2,12(r4)
    ab80:	20c00217 	ldw	r3,8(r4)
    ab84:	99bfff04 	addi	r6,r19,-4
    ab88:	01000904 	movi	r4,36
    ab8c:	18800315 	stw	r2,12(r3)
    ab90:	10c00215 	stw	r3,8(r2)
    ab94:	b8c00217 	ldw	r3,8(r23)
    ab98:	b8800317 	ldw	r2,12(r23)
    ab9c:	bc800204 	addi	r18,r23,8
    aba0:	18800315 	stw	r2,12(r3)
    aba4:	10c00215 	stw	r3,8(r2)
    aba8:	2180ed36 	bltu	r4,r6,af60 <_realloc_r+0x4c0>
    abac:	008004c4 	movi	r2,19
    abb0:	11809b2e 	bgeu	r2,r6,ae20 <_realloc_r+0x380>
    abb4:	80800017 	ldw	r2,0(r16)
    abb8:	b8800215 	stw	r2,8(r23)
    abbc:	80800117 	ldw	r2,4(r16)
    abc0:	b8800315 	stw	r2,12(r23)
    abc4:	008006c4 	movi	r2,27
    abc8:	1180f936 	bltu	r2,r6,afb0 <_realloc_r+0x510>
    abcc:	b8800404 	addi	r2,r23,16
    abd0:	80c00204 	addi	r3,r16,8
    abd4:	00009406 	br	ae28 <_realloc_r+0x388>
    abd8:	00c00404 	movi	r3,16
    abdc:	1823883a 	mov	r17,r3
    abe0:	003fca06 	br	ab0c <_realloc_r+0x6c>
    abe4:	9829883a 	mov	r20,r19
    abe8:	a447c83a 	sub	r3,r20,r17
    abec:	010003c4 	movi	r4,15
    abf0:	1080004c 	andi	r2,r2,1
    abf4:	20c02336 	bltu	r4,r3,ac84 <_realloc_r+0x1e4>
    abf8:	1504b03a 	or	r2,r2,r20
    abfc:	b0800115 	stw	r2,4(r22)
    ac00:	b52d883a 	add	r22,r22,r20
    ac04:	b0800117 	ldw	r2,4(r22)
    ac08:	10800054 	ori	r2,r2,1
    ac0c:	b0800115 	stw	r2,4(r22)
    ac10:	a809883a 	mov	r4,r21
    ac14:	00112780 	call	11278 <__malloc_unlock>
    ac18:	8025883a 	mov	r18,r16
    ac1c:	9005883a 	mov	r2,r18
    ac20:	dfc00a17 	ldw	ra,40(sp)
    ac24:	df000917 	ldw	fp,36(sp)
    ac28:	ddc00817 	ldw	r23,32(sp)
    ac2c:	dd800717 	ldw	r22,28(sp)
    ac30:	dd400617 	ldw	r21,24(sp)
    ac34:	dd000517 	ldw	r20,20(sp)
    ac38:	dcc00417 	ldw	r19,16(sp)
    ac3c:	dc800317 	ldw	r18,12(sp)
    ac40:	dc400217 	ldw	r17,8(sp)
    ac44:	dc000117 	ldw	r16,4(sp)
    ac48:	dec00b04 	addi	sp,sp,44
    ac4c:	f800283a 	ret
    ac50:	01ffff04 	movi	r7,-4
    ac54:	31cc703a 	and	r6,r6,r7
    ac58:	34e9883a 	add	r20,r6,r19
    ac5c:	a0ffbb16 	blt	r20,r3,ab4c <_realloc_r+0xac>
    ac60:	20c00317 	ldw	r3,12(r4)
    ac64:	21000217 	ldw	r4,8(r4)
    ac68:	20c00315 	stw	r3,12(r4)
    ac6c:	19000215 	stw	r4,8(r3)
    ac70:	003fdd06 	br	abe8 <_realloc_r+0x148>
    ac74:	00800304 	movi	r2,12
    ac78:	a8800015 	stw	r2,0(r21)
    ac7c:	0025883a 	mov	r18,zero
    ac80:	003fe606 	br	ac1c <_realloc_r+0x17c>
    ac84:	1444b03a 	or	r2,r2,r17
    ac88:	b0800115 	stw	r2,4(r22)
    ac8c:	b44b883a 	add	r5,r22,r17
    ac90:	18800054 	ori	r2,r3,1
    ac94:	28800115 	stw	r2,4(r5)
    ac98:	28c7883a 	add	r3,r5,r3
    ac9c:	18800117 	ldw	r2,4(r3)
    aca0:	a809883a 	mov	r4,r21
    aca4:	29400204 	addi	r5,r5,8
    aca8:	10800054 	ori	r2,r2,1
    acac:	18800115 	stw	r2,4(r3)
    acb0:	00020840 	call	2084 <_free_r>
    acb4:	003fd606 	br	ac10 <_realloc_r+0x170>
    acb8:	38c0330e 	bge	r7,r3,ad88 <_realloc_r+0x2e8>
    acbc:	900b883a 	mov	r5,r18
    acc0:	a809883a 	mov	r4,r21
    acc4:	0002be00 	call	2be0 <_malloc_r>
    acc8:	1025883a 	mov	r18,r2
    accc:	10001626 	beq	r2,zero,ad28 <_realloc_r+0x288>
    acd0:	80bfff17 	ldw	r2,-4(r16)
    acd4:	00ffff84 	movi	r3,-2
    acd8:	913ffe04 	addi	r4,r18,-8
    acdc:	10c6703a 	and	r3,r2,r3
    ace0:	b0c7883a 	add	r3,r22,r3
    ace4:	20c09926 	beq	r4,r3,af4c <_realloc_r+0x4ac>
    ace8:	99bfff04 	addi	r6,r19,-4
    acec:	00800904 	movi	r2,36
    acf0:	11806436 	bltu	r2,r6,ae84 <_realloc_r+0x3e4>
    acf4:	00c004c4 	movi	r3,19
    acf8:	19804036 	bltu	r3,r6,adfc <_realloc_r+0x35c>
    acfc:	9005883a 	mov	r2,r18
    ad00:	8007883a 	mov	r3,r16
    ad04:	19000017 	ldw	r4,0(r3)
    ad08:	11000015 	stw	r4,0(r2)
    ad0c:	19000117 	ldw	r4,4(r3)
    ad10:	11000115 	stw	r4,4(r2)
    ad14:	18c00217 	ldw	r3,8(r3)
    ad18:	10c00215 	stw	r3,8(r2)
    ad1c:	a809883a 	mov	r4,r21
    ad20:	800b883a 	mov	r5,r16
    ad24:	00020840 	call	2084 <_free_r>
    ad28:	a809883a 	mov	r4,r21
    ad2c:	00112780 	call	11278 <__malloc_unlock>
    ad30:	003fba06 	br	ac1c <_realloc_r+0x17c>
    ad34:	300b883a 	mov	r5,r6
    ad38:	dfc00a17 	ldw	ra,40(sp)
    ad3c:	df000917 	ldw	fp,36(sp)
    ad40:	ddc00817 	ldw	r23,32(sp)
    ad44:	dd800717 	ldw	r22,28(sp)
    ad48:	dd400617 	ldw	r21,24(sp)
    ad4c:	dd000517 	ldw	r20,20(sp)
    ad50:	dcc00417 	ldw	r19,16(sp)
    ad54:	dc800317 	ldw	r18,12(sp)
    ad58:	dc400217 	ldw	r17,8(sp)
    ad5c:	dc000117 	ldw	r16,4(sp)
    ad60:	dec00b04 	addi	sp,sp,44
    ad64:	0002be01 	jmpi	2be0 <_malloc_r>
    ad68:	29800117 	ldw	r6,4(r5)
    ad6c:	013fff04 	movi	r4,-4
    ad70:	89c00404 	addi	r7,r17,16
    ad74:	310c703a 	and	r6,r6,r4
    ad78:	34c9883a 	add	r4,r6,r19
    ad7c:	21c0340e 	bge	r4,r7,ae50 <_realloc_r+0x3b0>
    ad80:	2809883a 	mov	r4,r5
    ad84:	003f7106 	br	ab4c <_realloc_r+0xac>
    ad88:	b8800317 	ldw	r2,12(r23)
    ad8c:	b8c00217 	ldw	r3,8(r23)
    ad90:	99bfff04 	addi	r6,r19,-4
    ad94:	01000904 	movi	r4,36
    ad98:	18800315 	stw	r2,12(r3)
    ad9c:	10c00215 	stw	r3,8(r2)
    ada0:	bc800204 	addi	r18,r23,8
    ada4:	21807836 	bltu	r4,r6,af88 <_realloc_r+0x4e8>
    ada8:	008004c4 	movi	r2,19
    adac:	1180732e 	bgeu	r2,r6,af7c <_realloc_r+0x4dc>
    adb0:	80800017 	ldw	r2,0(r16)
    adb4:	b8800215 	stw	r2,8(r23)
    adb8:	80800117 	ldw	r2,4(r16)
    adbc:	b8800315 	stw	r2,12(r23)
    adc0:	008006c4 	movi	r2,27
    adc4:	11808936 	bltu	r2,r6,afec <_realloc_r+0x54c>
    adc8:	b8800404 	addi	r2,r23,16
    adcc:	80c00204 	addi	r3,r16,8
    add0:	19000017 	ldw	r4,0(r3)
    add4:	9021883a 	mov	r16,r18
    add8:	3829883a 	mov	r20,r7
    addc:	11000015 	stw	r4,0(r2)
    ade0:	19000117 	ldw	r4,4(r3)
    ade4:	b82d883a 	mov	r22,r23
    ade8:	11000115 	stw	r4,4(r2)
    adec:	18c00217 	ldw	r3,8(r3)
    adf0:	10c00215 	stw	r3,8(r2)
    adf4:	b8800117 	ldw	r2,4(r23)
    adf8:	003f7b06 	br	abe8 <_realloc_r+0x148>
    adfc:	80c00017 	ldw	r3,0(r16)
    ae00:	90c00015 	stw	r3,0(r18)
    ae04:	80c00117 	ldw	r3,4(r16)
    ae08:	90c00115 	stw	r3,4(r18)
    ae0c:	00c006c4 	movi	r3,27
    ae10:	19804636 	bltu	r3,r6,af2c <_realloc_r+0x48c>
    ae14:	90800204 	addi	r2,r18,8
    ae18:	80c00204 	addi	r3,r16,8
    ae1c:	003fb906 	br	ad04 <_realloc_r+0x264>
    ae20:	9005883a 	mov	r2,r18
    ae24:	8007883a 	mov	r3,r16
    ae28:	19000017 	ldw	r4,0(r3)
    ae2c:	9021883a 	mov	r16,r18
    ae30:	b82d883a 	mov	r22,r23
    ae34:	11000015 	stw	r4,0(r2)
    ae38:	19000117 	ldw	r4,4(r3)
    ae3c:	11000115 	stw	r4,4(r2)
    ae40:	18c00217 	ldw	r3,8(r3)
    ae44:	10c00215 	stw	r3,8(r2)
    ae48:	b8800117 	ldw	r2,4(r23)
    ae4c:	003f6606 	br	abe8 <_realloc_r+0x148>
    ae50:	2445c83a 	sub	r2,r4,r17
    ae54:	b46d883a 	add	r22,r22,r17
    ae58:	10800054 	ori	r2,r2,1
    ae5c:	b0800115 	stw	r2,4(r22)
    ae60:	80bfff17 	ldw	r2,-4(r16)
    ae64:	a809883a 	mov	r4,r21
    ae68:	e5800215 	stw	r22,8(fp)
    ae6c:	1080004c 	andi	r2,r2,1
    ae70:	88a2b03a 	or	r17,r17,r2
    ae74:	847fff15 	stw	r17,-4(r16)
    ae78:	00112780 	call	11278 <__malloc_unlock>
    ae7c:	8025883a 	mov	r18,r16
    ae80:	003f6606 	br	ac1c <_realloc_r+0x17c>
    ae84:	9009883a 	mov	r4,r18
    ae88:	800b883a 	mov	r5,r16
    ae8c:	00096ac0 	call	96ac <memmove>
    ae90:	003fa206 	br	ad1c <_realloc_r+0x27c>
    ae94:	88800404 	addi	r2,r17,16
    ae98:	a0bf8716 	blt	r20,r2,acb8 <_realloc_r+0x218>
    ae9c:	b8800317 	ldw	r2,12(r23)
    aea0:	b8c00217 	ldw	r3,8(r23)
    aea4:	99bfff04 	addi	r6,r19,-4
    aea8:	01000904 	movi	r4,36
    aeac:	18800315 	stw	r2,12(r3)
    aeb0:	10c00215 	stw	r3,8(r2)
    aeb4:	bc800204 	addi	r18,r23,8
    aeb8:	21806536 	bltu	r4,r6,b050 <_realloc_r+0x5b0>
    aebc:	008004c4 	movi	r2,19
    aec0:	1180592e 	bgeu	r2,r6,b028 <_realloc_r+0x588>
    aec4:	80800017 	ldw	r2,0(r16)
    aec8:	b8800215 	stw	r2,8(r23)
    aecc:	80800117 	ldw	r2,4(r16)
    aed0:	b8800315 	stw	r2,12(r23)
    aed4:	008006c4 	movi	r2,27
    aed8:	11806136 	bltu	r2,r6,b060 <_realloc_r+0x5c0>
    aedc:	b8800404 	addi	r2,r23,16
    aee0:	80c00204 	addi	r3,r16,8
    aee4:	19000017 	ldw	r4,0(r3)
    aee8:	11000015 	stw	r4,0(r2)
    aeec:	19000117 	ldw	r4,4(r3)
    aef0:	11000115 	stw	r4,4(r2)
    aef4:	18c00217 	ldw	r3,8(r3)
    aef8:	10c00215 	stw	r3,8(r2)
    aefc:	a447c83a 	sub	r3,r20,r17
    af00:	bc45883a 	add	r2,r23,r17
    af04:	18c00054 	ori	r3,r3,1
    af08:	10c00115 	stw	r3,4(r2)
    af0c:	b8c00117 	ldw	r3,4(r23)
    af10:	e0800215 	stw	r2,8(fp)
    af14:	a809883a 	mov	r4,r21
    af18:	1880004c 	andi	r2,r3,1
    af1c:	88a2b03a 	or	r17,r17,r2
    af20:	bc400115 	stw	r17,4(r23)
    af24:	00112780 	call	11278 <__malloc_unlock>
    af28:	003f3c06 	br	ac1c <_realloc_r+0x17c>
    af2c:	80c00217 	ldw	r3,8(r16)
    af30:	90c00215 	stw	r3,8(r18)
    af34:	80c00317 	ldw	r3,12(r16)
    af38:	90c00315 	stw	r3,12(r18)
    af3c:	30802426 	beq	r6,r2,afd0 <_realloc_r+0x530>
    af40:	90800404 	addi	r2,r18,16
    af44:	80c00404 	addi	r3,r16,16
    af48:	003f6e06 	br	ad04 <_realloc_r+0x264>
    af4c:	953fff17 	ldw	r20,-4(r18)
    af50:	00ffff04 	movi	r3,-4
    af54:	a0e8703a 	and	r20,r20,r3
    af58:	a4e9883a 	add	r20,r20,r19
    af5c:	003f2206 	br	abe8 <_realloc_r+0x148>
    af60:	800b883a 	mov	r5,r16
    af64:	9009883a 	mov	r4,r18
    af68:	00096ac0 	call	96ac <memmove>
    af6c:	9021883a 	mov	r16,r18
    af70:	b8800117 	ldw	r2,4(r23)
    af74:	b82d883a 	mov	r22,r23
    af78:	003f1b06 	br	abe8 <_realloc_r+0x148>
    af7c:	9005883a 	mov	r2,r18
    af80:	8007883a 	mov	r3,r16
    af84:	003f9206 	br	add0 <_realloc_r+0x330>
    af88:	800b883a 	mov	r5,r16
    af8c:	9009883a 	mov	r4,r18
    af90:	d9c00015 	stw	r7,0(sp)
    af94:	00096ac0 	call	96ac <memmove>
    af98:	d9c00017 	ldw	r7,0(sp)
    af9c:	9021883a 	mov	r16,r18
    afa0:	b8800117 	ldw	r2,4(r23)
    afa4:	3829883a 	mov	r20,r7
    afa8:	b82d883a 	mov	r22,r23
    afac:	003f0e06 	br	abe8 <_realloc_r+0x148>
    afb0:	80800217 	ldw	r2,8(r16)
    afb4:	b8800415 	stw	r2,16(r23)
    afb8:	80800317 	ldw	r2,12(r16)
    afbc:	b8800515 	stw	r2,20(r23)
    afc0:	31001226 	beq	r6,r4,b00c <_realloc_r+0x56c>
    afc4:	b8800604 	addi	r2,r23,24
    afc8:	80c00404 	addi	r3,r16,16
    afcc:	003f9606 	br	ae28 <_realloc_r+0x388>
    afd0:	81000417 	ldw	r4,16(r16)
    afd4:	90800604 	addi	r2,r18,24
    afd8:	80c00604 	addi	r3,r16,24
    afdc:	91000415 	stw	r4,16(r18)
    afe0:	81000517 	ldw	r4,20(r16)
    afe4:	91000515 	stw	r4,20(r18)
    afe8:	003f4606 	br	ad04 <_realloc_r+0x264>
    afec:	80800217 	ldw	r2,8(r16)
    aff0:	b8800415 	stw	r2,16(r23)
    aff4:	80800317 	ldw	r2,12(r16)
    aff8:	b8800515 	stw	r2,20(r23)
    affc:	31000d26 	beq	r6,r4,b034 <_realloc_r+0x594>
    b000:	b8800604 	addi	r2,r23,24
    b004:	80c00404 	addi	r3,r16,16
    b008:	003f7106 	br	add0 <_realloc_r+0x330>
    b00c:	81000417 	ldw	r4,16(r16)
    b010:	b8800804 	addi	r2,r23,32
    b014:	80c00604 	addi	r3,r16,24
    b018:	b9000615 	stw	r4,24(r23)
    b01c:	81000517 	ldw	r4,20(r16)
    b020:	b9000715 	stw	r4,28(r23)
    b024:	003f8006 	br	ae28 <_realloc_r+0x388>
    b028:	9005883a 	mov	r2,r18
    b02c:	8007883a 	mov	r3,r16
    b030:	003fac06 	br	aee4 <_realloc_r+0x444>
    b034:	81000417 	ldw	r4,16(r16)
    b038:	b8800804 	addi	r2,r23,32
    b03c:	80c00604 	addi	r3,r16,24
    b040:	b9000615 	stw	r4,24(r23)
    b044:	81000517 	ldw	r4,20(r16)
    b048:	b9000715 	stw	r4,28(r23)
    b04c:	003f6006 	br	add0 <_realloc_r+0x330>
    b050:	9009883a 	mov	r4,r18
    b054:	800b883a 	mov	r5,r16
    b058:	00096ac0 	call	96ac <memmove>
    b05c:	003fa706 	br	aefc <_realloc_r+0x45c>
    b060:	80800217 	ldw	r2,8(r16)
    b064:	b8800415 	stw	r2,16(r23)
    b068:	80800317 	ldw	r2,12(r16)
    b06c:	b8800515 	stw	r2,20(r23)
    b070:	31000326 	beq	r6,r4,b080 <_realloc_r+0x5e0>
    b074:	b8800604 	addi	r2,r23,24
    b078:	80c00404 	addi	r3,r16,16
    b07c:	003f9906 	br	aee4 <_realloc_r+0x444>
    b080:	81000417 	ldw	r4,16(r16)
    b084:	b8800804 	addi	r2,r23,32
    b088:	80c00604 	addi	r3,r16,24
    b08c:	b9000615 	stw	r4,24(r23)
    b090:	81000517 	ldw	r4,20(r16)
    b094:	b9000715 	stw	r4,28(r23)
    b098:	003f9206 	br	aee4 <_realloc_r+0x444>

0000b09c <__isinfd>:
    b09c:	0105c83a 	sub	r2,zero,r4
    b0a0:	1108b03a 	or	r4,r2,r4
    b0a4:	2004d7fa 	srli	r2,r4,31
    b0a8:	00e00034 	movhi	r3,32768
    b0ac:	18ffffc4 	addi	r3,r3,-1
    b0b0:	28ca703a 	and	r5,r5,r3
    b0b4:	1144b03a 	or	r2,r2,r5
    b0b8:	00dffc34 	movhi	r3,32752
    b0bc:	1885c83a 	sub	r2,r3,r2
    b0c0:	0087c83a 	sub	r3,zero,r2
    b0c4:	1884b03a 	or	r2,r3,r2
    b0c8:	1005d7fa 	srai	r2,r2,31
    b0cc:	10800044 	addi	r2,r2,1
    b0d0:	f800283a 	ret

0000b0d4 <__isnand>:
    b0d4:	0105c83a 	sub	r2,zero,r4
    b0d8:	1108b03a 	or	r4,r2,r4
    b0dc:	2004d7fa 	srli	r2,r4,31
    b0e0:	00e00034 	movhi	r3,32768
    b0e4:	18ffffc4 	addi	r3,r3,-1
    b0e8:	28ca703a 	and	r5,r5,r3
    b0ec:	1144b03a 	or	r2,r2,r5
    b0f0:	00dffc34 	movhi	r3,32752
    b0f4:	1885c83a 	sub	r2,r3,r2
    b0f8:	1004d7fa 	srli	r2,r2,31
    b0fc:	f800283a 	ret

0000b100 <__sccl>:
    b100:	2a400003 	ldbu	r9,0(r5)
    b104:	00801784 	movi	r2,94
    b108:	48802626 	beq	r9,r2,b1a4 <__sccl+0xa4>
    b10c:	28800044 	addi	r2,r5,1
    b110:	0011883a 	mov	r8,zero
    b114:	000b883a 	mov	r5,zero
    b118:	0007883a 	mov	r3,zero
    b11c:	01c04004 	movi	r7,256
    b120:	20cd883a 	add	r6,r4,r3
    b124:	32000005 	stb	r8,0(r6)
    b128:	18c00044 	addi	r3,r3,1
    b12c:	19fffc1e 	bne	r3,r7,b120 <__sccl+0x20>
    b130:	48000f26 	beq	r9,zero,b170 <__sccl+0x70>
    b134:	01800044 	movi	r6,1
    b138:	314dc83a 	sub	r6,r6,r5
    b13c:	02001744 	movi	r8,93
    b140:	01400b44 	movi	r5,45
    b144:	2247883a 	add	r3,r4,r9
    b148:	19800005 	stb	r6,0(r3)
    b14c:	10c00003 	ldbu	r3,0(r2)
    b150:	11c00044 	addi	r7,r2,1
    b154:	19400a26 	beq	r3,r5,b180 <__sccl+0x80>
    b158:	1a000726 	beq	r3,r8,b178 <__sccl+0x78>
    b15c:	1800011e 	bne	r3,zero,b164 <__sccl+0x64>
    b160:	f800283a 	ret
    b164:	1813883a 	mov	r9,r3
    b168:	3805883a 	mov	r2,r7
    b16c:	003ff506 	br	b144 <__sccl+0x44>
    b170:	10bfffc4 	addi	r2,r2,-1
    b174:	f800283a 	ret
    b178:	3805883a 	mov	r2,r7
    b17c:	f800283a 	ret
    b180:	10c00043 	ldbu	r3,1(r2)
    b184:	1a000c26 	beq	r3,r8,b1b8 <__sccl+0xb8>
    b188:	1a400b16 	blt	r3,r9,b1b8 <__sccl+0xb8>
    b18c:	10800084 	addi	r2,r2,2
    b190:	4a400044 	addi	r9,r9,1
    b194:	224f883a 	add	r7,r4,r9
    b198:	39800005 	stb	r6,0(r7)
    b19c:	48fffc16 	blt	r9,r3,b190 <__sccl+0x90>
    b1a0:	003fea06 	br	b14c <__sccl+0x4c>
    b1a4:	2a400043 	ldbu	r9,1(r5)
    b1a8:	28800084 	addi	r2,r5,2
    b1ac:	02000044 	movi	r8,1
    b1b0:	01400044 	movi	r5,1
    b1b4:	003fd806 	br	b118 <__sccl+0x18>
    b1b8:	2813883a 	mov	r9,r5
    b1bc:	3805883a 	mov	r2,r7
    b1c0:	003fe006 	br	b144 <__sccl+0x44>

0000b1c4 <nanf>:
    b1c4:	009ff034 	movhi	r2,32704
    b1c8:	f800283a 	ret

0000b1cc <_sprintf_r>:
    b1cc:	deffe704 	addi	sp,sp,-100
    b1d0:	2807883a 	mov	r3,r5
    b1d4:	dfc01715 	stw	ra,92(sp)
    b1d8:	d9c01815 	stw	r7,96(sp)
    b1dc:	00a00034 	movhi	r2,32768
    b1e0:	10bfffc4 	addi	r2,r2,-1
    b1e4:	02008204 	movi	r8,520
    b1e8:	d8800215 	stw	r2,8(sp)
    b1ec:	d8800515 	stw	r2,20(sp)
    b1f0:	d80b883a 	mov	r5,sp
    b1f4:	d9c01804 	addi	r7,sp,96
    b1f8:	00bfffc4 	movi	r2,-1
    b1fc:	d8c00015 	stw	r3,0(sp)
    b200:	d8c00415 	stw	r3,16(sp)
    b204:	da00030d 	sth	r8,12(sp)
    b208:	d880038d 	sth	r2,14(sp)
    b20c:	0003ca80 	call	3ca8 <___vfprintf_internal_r>
    b210:	d8c00017 	ldw	r3,0(sp)
    b214:	18000005 	stb	zero,0(r3)
    b218:	dfc01717 	ldw	ra,92(sp)
    b21c:	dec01904 	addi	sp,sp,100
    b220:	f800283a 	ret

0000b224 <sprintf>:
    b224:	deffe604 	addi	sp,sp,-104
    b228:	2007883a 	mov	r3,r4
    b22c:	dfc01715 	stw	ra,92(sp)
    b230:	d9801815 	stw	r6,96(sp)
    b234:	d9c01915 	stw	r7,100(sp)
    b238:	00800074 	movhi	r2,1
    b23c:	1098ae04 	addi	r2,r2,25272
    b240:	11000017 	ldw	r4,0(r2)
    b244:	00a00034 	movhi	r2,32768
    b248:	10bfffc4 	addi	r2,r2,-1
    b24c:	280d883a 	mov	r6,r5
    b250:	02008204 	movi	r8,520
    b254:	d8800215 	stw	r2,8(sp)
    b258:	d8800515 	stw	r2,20(sp)
    b25c:	d80b883a 	mov	r5,sp
    b260:	d9c01804 	addi	r7,sp,96
    b264:	00bfffc4 	movi	r2,-1
    b268:	d8c00015 	stw	r3,0(sp)
    b26c:	d8c00415 	stw	r3,16(sp)
    b270:	da00030d 	sth	r8,12(sp)
    b274:	d880038d 	sth	r2,14(sp)
    b278:	0003ca80 	call	3ca8 <___vfprintf_internal_r>
    b27c:	d8c00017 	ldw	r3,0(sp)
    b280:	18000005 	stb	zero,0(r3)
    b284:	dfc01717 	ldw	ra,92(sp)
    b288:	dec01a04 	addi	sp,sp,104
    b28c:	f800283a 	ret

0000b290 <strcmp>:
    b290:	2904b03a 	or	r2,r5,r4
    b294:	108000cc 	andi	r2,r2,3
    b298:	1000171e 	bne	r2,zero,b2f8 <strcmp+0x68>
    b29c:	20800017 	ldw	r2,0(r4)
    b2a0:	28c00017 	ldw	r3,0(r5)
    b2a4:	10c0141e 	bne	r2,r3,b2f8 <strcmp+0x68>
    b2a8:	027fbff4 	movhi	r9,65279
    b2ac:	4a7fbfc4 	addi	r9,r9,-257
    b2b0:	1247883a 	add	r3,r2,r9
    b2b4:	0084303a 	nor	r2,zero,r2
    b2b8:	1884703a 	and	r2,r3,r2
    b2bc:	02202074 	movhi	r8,32897
    b2c0:	42202004 	addi	r8,r8,-32640
    b2c4:	1204703a 	and	r2,r2,r8
    b2c8:	10000226 	beq	r2,zero,b2d4 <strcmp+0x44>
    b2cc:	00001706 	br	b32c <strcmp+0x9c>
    b2d0:	3000161e 	bne	r6,zero,b32c <strcmp+0x9c>
    b2d4:	21000104 	addi	r4,r4,4
    b2d8:	20800017 	ldw	r2,0(r4)
    b2dc:	29400104 	addi	r5,r5,4
    b2e0:	28c00017 	ldw	r3,0(r5)
    b2e4:	124f883a 	add	r7,r2,r9
    b2e8:	008c303a 	nor	r6,zero,r2
    b2ec:	398c703a 	and	r6,r7,r6
    b2f0:	320c703a 	and	r6,r6,r8
    b2f4:	10fff626 	beq	r2,r3,b2d0 <strcmp+0x40>
    b2f8:	20800007 	ldb	r2,0(r4)
    b2fc:	1000051e 	bne	r2,zero,b314 <strcmp+0x84>
    b300:	00000606 	br	b31c <strcmp+0x8c>
    b304:	21000044 	addi	r4,r4,1
    b308:	20800007 	ldb	r2,0(r4)
    b30c:	29400044 	addi	r5,r5,1
    b310:	10000226 	beq	r2,zero,b31c <strcmp+0x8c>
    b314:	28c00007 	ldb	r3,0(r5)
    b318:	10fffa26 	beq	r2,r3,b304 <strcmp+0x74>
    b31c:	20c00003 	ldbu	r3,0(r4)
    b320:	28800003 	ldbu	r2,0(r5)
    b324:	1885c83a 	sub	r2,r3,r2
    b328:	f800283a 	ret
    b32c:	0005883a 	mov	r2,zero
    b330:	f800283a 	ret

0000b334 <_strtod_r>:
    b334:	deffdc04 	addi	sp,sp,-144
    b338:	dc001a15 	stw	r16,104(sp)
    b33c:	d9400e15 	stw	r5,56(sp)
    b340:	d9801115 	stw	r6,68(sp)
    b344:	d9400c15 	stw	r5,48(sp)
    b348:	2805883a 	mov	r2,r5
    b34c:	dfc02315 	stw	ra,140(sp)
    b350:	df002215 	stw	fp,136(sp)
    b354:	ddc02115 	stw	r23,132(sp)
    b358:	dd802015 	stw	r22,128(sp)
    b35c:	dd401f15 	stw	r21,124(sp)
    b360:	dd001e15 	stw	r20,120(sp)
    b364:	dcc01d15 	stw	r19,116(sp)
    b368:	dc801c15 	stw	r18,112(sp)
    b36c:	dc401b15 	stw	r17,108(sp)
    b370:	2021883a 	mov	r16,r4
    b374:	d8000615 	stw	zero,24(sp)
    b378:	d8000715 	stw	zero,28(sp)
    b37c:	01400b44 	movi	r5,45
    b380:	01800074 	movhi	r6,1
    b384:	31ad3604 	addi	r6,r6,-19240
    b388:	10c00003 	ldbu	r3,0(r2)
    b38c:	19003fcc 	andi	r4,r3,255
    b390:	29004c2e 	bgeu	r5,r4,b4c4 <_strtod_r+0x190>
    b394:	1c803fcc 	andi	r18,r3,255
    b398:	9480201c 	xori	r18,r18,128
    b39c:	102d883a 	mov	r22,r2
    b3a0:	d8001215 	stw	zero,72(sp)
    b3a4:	94bfe004 	addi	r18,r18,-128
    b3a8:	00800c04 	movi	r2,48
    b3ac:	9080f526 	beq	r18,r2,b784 <_strtod_r+0x450>
    b3b0:	d8001315 	stw	zero,76(sp)
    b3b4:	04c00bc4 	movi	r19,47
    b3b8:	900f883a 	mov	r7,r18
    b3bc:	9c84770e 	bge	r19,r18,c59c <_strtod_r+0x1268>
    b3c0:	05c00e44 	movi	r23,57
    b3c4:	bc847a16 	blt	r23,r18,c5b0 <_strtod_r+0x127c>
    b3c8:	0039883a 	mov	fp,zero
    b3cc:	b4400044 	addi	r17,r22,1
    b3d0:	dd801015 	stw	r22,64(sp)
    b3d4:	d8000f15 	stw	zero,60(sp)
    b3d8:	e02d883a 	mov	r22,fp
    b3dc:	002b883a 	mov	r21,zero
    b3e0:	8039883a 	mov	fp,r16
    b3e4:	05000204 	movi	r20,8
    b3e8:	0021883a 	mov	r16,zero
    b3ec:	a5408c16 	blt	r20,r21,b620 <_strtod_r+0x2ec>
    b3f0:	b009883a 	mov	r4,r22
    b3f4:	01400284 	movi	r5,10
    b3f8:	00015040 	call	1504 <__mulsi3>
    b3fc:	1485883a 	add	r2,r2,r18
    b400:	15bff404 	addi	r22,r2,-48
    b404:	dc400c15 	stw	r17,48(sp)
    b408:	8c800007 	ldb	r18,0(r17)
    b40c:	ad400044 	addi	r21,r21,1
    b410:	880b883a 	mov	r5,r17
    b414:	900f883a 	mov	r7,r18
    b418:	9c808e0e 	bge	r19,r18,b654 <_strtod_r+0x320>
    b41c:	8c400044 	addi	r17,r17,1
    b420:	bcbff20e 	bge	r23,r18,b3ec <_strtod_r+0xb8>
    b424:	dc000f15 	stw	r16,60(sp)
    b428:	e021883a 	mov	r16,fp
    b42c:	b039883a 	mov	fp,r22
    b430:	dd801017 	ldw	r22,64(sp)
    b434:	a827883a 	mov	r19,r21
    b438:	dd801415 	stw	r22,80(sp)
    b43c:	000d883a 	mov	r6,zero
    b440:	0029883a 	mov	r20,zero
    b444:	d8001015 	stw	zero,64(sp)
    b448:	00801944 	movi	r2,101
    b44c:	3880dd26 	beq	r7,r2,b7c4 <_strtod_r+0x490>
    b450:	00801144 	movi	r2,69
    b454:	3880db26 	beq	r7,r2,b7c4 <_strtod_r+0x490>
    b458:	0009883a 	mov	r4,zero
    b45c:	a8011d1e 	bne	r21,zero,b8d4 <_strtod_r+0x5a0>
    b460:	3001591e 	bne	r6,zero,b9c8 <_strtod_r+0x694>
    b464:	d8c01317 	ldw	r3,76(sp)
    b468:	1801571e 	bne	r3,zero,b9c8 <_strtod_r+0x694>
    b46c:	d8c01017 	ldw	r3,64(sp)
    b470:	1803081e 	bne	r3,zero,c094 <_strtod_r+0xd60>
    b474:	00801384 	movi	r2,78
    b478:	38847e26 	beq	r7,r2,c674 <_strtod_r+0x1340>
    b47c:	11c47916 	blt	r2,r7,c664 <_strtod_r+0x1330>
    b480:	00801244 	movi	r2,73
    b484:	3883031e 	bne	r7,r2,c094 <_strtod_r+0xd60>
    b488:	d8800c17 	ldw	r2,48(sp)
    b48c:	01000074 	movhi	r4,1
    b490:	21118c04 	addi	r4,r4,17968
    b494:	01801004 	movi	r6,64
    b498:	01c01684 	movi	r7,90
    b49c:	21400007 	ldb	r5,0(r4)
    b4a0:	21000044 	addi	r4,r4,1
    b4a4:	2804b426 	beq	r5,zero,c778 <_strtod_r+0x1444>
    b4a8:	10800044 	addi	r2,r2,1
    b4ac:	10c00007 	ldb	r3,0(r2)
    b4b0:	30c0020e 	bge	r6,r3,b4bc <_strtod_r+0x188>
    b4b4:	38c00116 	blt	r7,r3,b4bc <_strtod_r+0x188>
    b4b8:	18c00804 	addi	r3,r3,32
    b4bc:	197ff726 	beq	r3,r5,b49c <_strtod_r+0x168>
    b4c0:	0002f406 	br	c094 <_strtod_r+0xd60>
    b4c4:	2109883a 	add	r4,r4,r4
    b4c8:	2109883a 	add	r4,r4,r4
    b4cc:	2189883a 	add	r4,r4,r6
    b4d0:	21000017 	ldw	r4,0(r4)
    b4d4:	2000683a 	jmp	r4
    b4d8:	0000b5a4 	muli	zero,zero,726
    b4dc:	0000b394 	movui	zero,718
    b4e0:	0000b394 	movui	zero,718
    b4e4:	0000b394 	movui	zero,718
    b4e8:	0000b394 	movui	zero,718
    b4ec:	0000b394 	movui	zero,718
    b4f0:	0000b394 	movui	zero,718
    b4f4:	0000b394 	movui	zero,718
    b4f8:	0000b394 	movui	zero,718
    b4fc:	0000b608 	cmpgei	zero,zero,728
    b500:	0000b608 	cmpgei	zero,zero,728
    b504:	0000b608 	cmpgei	zero,zero,728
    b508:	0000b608 	cmpgei	zero,zero,728
    b50c:	0000b608 	cmpgei	zero,zero,728
    b510:	0000b394 	movui	zero,718
    b514:	0000b394 	movui	zero,718
    b518:	0000b394 	movui	zero,718
    b51c:	0000b394 	movui	zero,718
    b520:	0000b394 	movui	zero,718
    b524:	0000b394 	movui	zero,718
    b528:	0000b394 	movui	zero,718
    b52c:	0000b394 	movui	zero,718
    b530:	0000b394 	movui	zero,718
    b534:	0000b394 	movui	zero,718
    b538:	0000b394 	movui	zero,718
    b53c:	0000b394 	movui	zero,718
    b540:	0000b394 	movui	zero,718
    b544:	0000b394 	movui	zero,718
    b548:	0000b394 	movui	zero,718
    b54c:	0000b394 	movui	zero,718
    b550:	0000b394 	movui	zero,718
    b554:	0000b394 	movui	zero,718
    b558:	0000b608 	cmpgei	zero,zero,728
    b55c:	0000b394 	movui	zero,718
    b560:	0000b394 	movui	zero,718
    b564:	0000b394 	movui	zero,718
    b568:	0000b394 	movui	zero,718
    b56c:	0000b394 	movui	zero,718
    b570:	0000b394 	movui	zero,718
    b574:	0000b394 	movui	zero,718
    b578:	0000b394 	movui	zero,718
    b57c:	0000b394 	movui	zero,718
    b580:	0000b394 	movui	zero,718
    b584:	0000b590 	cmplti	zero,zero,726
    b588:	0000b394 	movui	zero,718
    b58c:	0000b614 	movui	zero,728
    b590:	d8001215 	stw	zero,72(sp)
    b594:	15800044 	addi	r22,r2,1
    b598:	dd800c15 	stw	r22,48(sp)
    b59c:	14800047 	ldb	r18,1(r2)
    b5a0:	903f811e 	bne	r18,zero,b3a8 <_strtod_r+0x74>
    b5a4:	0005883a 	mov	r2,zero
    b5a8:	0007883a 	mov	r3,zero
    b5ac:	d9400e17 	ldw	r5,56(sp)
    b5b0:	d8001215 	stw	zero,72(sp)
    b5b4:	d9400c15 	stw	r5,48(sp)
    b5b8:	d9001117 	ldw	r4,68(sp)
    b5bc:	20000326 	beq	r4,zero,b5cc <_strtod_r+0x298>
    b5c0:	d9000c17 	ldw	r4,48(sp)
    b5c4:	d9401117 	ldw	r5,68(sp)
    b5c8:	29000015 	stw	r4,0(r5)
    b5cc:	d9001217 	ldw	r4,72(sp)
    b5d0:	20000126 	beq	r4,zero,b5d8 <_strtod_r+0x2a4>
    b5d4:	18e0003c 	xorhi	r3,r3,32768
    b5d8:	dfc02317 	ldw	ra,140(sp)
    b5dc:	df002217 	ldw	fp,136(sp)
    b5e0:	ddc02117 	ldw	r23,132(sp)
    b5e4:	dd802017 	ldw	r22,128(sp)
    b5e8:	dd401f17 	ldw	r21,124(sp)
    b5ec:	dd001e17 	ldw	r20,120(sp)
    b5f0:	dcc01d17 	ldw	r19,116(sp)
    b5f4:	dc801c17 	ldw	r18,112(sp)
    b5f8:	dc401b17 	ldw	r17,108(sp)
    b5fc:	dc001a17 	ldw	r16,104(sp)
    b600:	dec02404 	addi	sp,sp,144
    b604:	f800283a 	ret
    b608:	10800044 	addi	r2,r2,1
    b60c:	d8800c15 	stw	r2,48(sp)
    b610:	003f5d06 	br	b388 <_strtod_r+0x54>
    b614:	00c00044 	movi	r3,1
    b618:	d8c01215 	stw	r3,72(sp)
    b61c:	003fdd06 	br	b594 <_strtod_r+0x260>
    b620:	010003c4 	movi	r4,15
    b624:	257f7716 	blt	r4,r21,b404 <_strtod_r+0xd0>
    b628:	8009883a 	mov	r4,r16
    b62c:	01400284 	movi	r5,10
    b630:	00015040 	call	1504 <__mulsi3>
    b634:	dc400c15 	stw	r17,48(sp)
    b638:	1485883a 	add	r2,r2,r18
    b63c:	8c800007 	ldb	r18,0(r17)
    b640:	143ff404 	addi	r16,r2,-48
    b644:	ad400044 	addi	r21,r21,1
    b648:	880b883a 	mov	r5,r17
    b64c:	900f883a 	mov	r7,r18
    b650:	9cbf7216 	blt	r19,r18,b41c <_strtod_r+0xe8>
    b654:	dc000f15 	stw	r16,60(sp)
    b658:	e021883a 	mov	r16,fp
    b65c:	b039883a 	mov	fp,r22
    b660:	dd801017 	ldw	r22,64(sp)
    b664:	00800b84 	movi	r2,46
    b668:	9082561e 	bne	r18,r2,bfc4 <_strtod_r+0xc90>
    b66c:	28800044 	addi	r2,r5,1
    b670:	d8800c15 	stw	r2,48(sp)
    b674:	29c00047 	ldb	r7,1(r5)
    b678:	a802611e 	bne	r21,zero,c000 <_strtod_r+0xccc>
    b67c:	00800c04 	movi	r2,48
    b680:	3884161e 	bne	r7,r2,c6dc <_strtod_r+0x13a8>
    b684:	00800044 	movi	r2,1
    b688:	3809883a 	mov	r4,r7
    b68c:	100d883a 	mov	r6,r2
    b690:	10800044 	addi	r2,r2,1
    b694:	2887883a 	add	r3,r5,r2
    b698:	d8c00c15 	stw	r3,48(sp)
    b69c:	2987883a 	add	r3,r5,r6
    b6a0:	19c00047 	ldb	r7,1(r3)
    b6a4:	393ff926 	beq	r7,r4,b68c <_strtod_r+0x358>
    b6a8:	38bff3c4 	addi	r2,r7,-49
    b6ac:	00c00204 	movi	r3,8
    b6b0:	1882ad36 	bltu	r3,r2,c168 <_strtod_r+0xe34>
    b6b4:	d9400c17 	ldw	r5,48(sp)
    b6b8:	3029883a 	mov	r20,r6
    b6bc:	002f883a 	mov	r23,zero
    b6c0:	d9401415 	stw	r5,80(sp)
    b6c4:	2823883a 	mov	r17,r5
    b6c8:	01800044 	movi	r6,1
    b6cc:	3dbff404 	addi	r22,r7,-48
    b6d0:	b0002826 	beq	r22,zero,b774 <_strtod_r+0x440>
    b6d4:	00800044 	movi	r2,1
    b6d8:	a1a9883a 	add	r20,r20,r6
    b6dc:	30844826 	beq	r6,r2,c800 <_strtod_r+0x14cc>
    b6e0:	b9a7883a 	add	r19,r23,r6
    b6e4:	dc401015 	stw	r17,64(sp)
    b6e8:	e023883a 	mov	r17,fp
    b6ec:	b039883a 	mov	fp,r22
    b6f0:	802d883a 	mov	r22,r16
    b6f4:	dc000f17 	ldw	r16,60(sp)
    b6f8:	98ffffc4 	addi	r3,r19,-1
    b6fc:	dd001615 	stw	r20,88(sp)
    b700:	04800204 	movi	r18,8
    b704:	d9801515 	stw	r6,84(sp)
    b708:	b829883a 	mov	r20,r23
    b70c:	1827883a 	mov	r19,r3
    b710:	a5000044 	addi	r20,r20,1
    b714:	a17fffc4 	addi	r5,r20,-1
    b718:	9142b916 	blt	r18,r5,c200 <_strtod_r+0xecc>
    b71c:	8809883a 	mov	r4,r17
    b720:	01400284 	movi	r5,10
    b724:	00015040 	call	1504 <__mulsi3>
    b728:	1023883a 	mov	r17,r2
    b72c:	a4fff81e 	bne	r20,r19,b710 <_strtod_r+0x3dc>
    b730:	d9801517 	ldw	r6,84(sp)
    b734:	dc000f15 	stw	r16,60(sp)
    b738:	dd001617 	ldw	r20,88(sp)
    b73c:	b021883a 	mov	r16,r22
    b740:	e02d883a 	mov	r22,fp
    b744:	8839883a 	mov	fp,r17
    b748:	dc401017 	ldw	r17,64(sp)
    b74c:	b985883a 	add	r2,r23,r6
    b750:	10bfffc4 	addi	r2,r2,-1
    b754:	00c00204 	movi	r3,8
    b758:	15c00044 	addi	r23,r2,1
    b75c:	1883d616 	blt	r3,r2,c6b8 <_strtod_r+0x1384>
    b760:	e009883a 	mov	r4,fp
    b764:	01400284 	movi	r5,10
    b768:	00015040 	call	1504 <__mulsi3>
    b76c:	15b9883a 	add	fp,r2,r22
    b770:	000d883a 	mov	r6,zero
    b774:	88800044 	addi	r2,r17,1
    b778:	d8800c15 	stw	r2,48(sp)
    b77c:	89c00047 	ldb	r7,1(r17)
    b780:	00022306 	br	c010 <_strtod_r+0xcdc>
    b784:	b0800047 	ldb	r2,1(r22)
    b788:	01001604 	movi	r4,88
    b78c:	1102a326 	beq	r2,r4,c21c <_strtod_r+0xee8>
    b790:	01001e04 	movi	r4,120
    b794:	1102a126 	beq	r2,r4,c21c <_strtod_r+0xee8>
    b798:	b0800044 	addi	r2,r22,1
    b79c:	9009883a 	mov	r4,r18
    b7a0:	d8800c15 	stw	r2,48(sp)
    b7a4:	14800007 	ldb	r18,0(r2)
    b7a8:	102d883a 	mov	r22,r2
    b7ac:	10800044 	addi	r2,r2,1
    b7b0:	913ffb26 	beq	r18,r4,b7a0 <_strtod_r+0x46c>
    b7b4:	90022526 	beq	r18,zero,c04c <_strtod_r+0xd18>
    b7b8:	00c00044 	movi	r3,1
    b7bc:	d8c01315 	stw	r3,76(sp)
    b7c0:	003efc06 	br	b3b4 <_strtod_r+0x80>
    b7c4:	a800011e 	bne	r21,zero,b7cc <_strtod_r+0x498>
    b7c8:	30023026 	beq	r6,zero,c08c <_strtod_r+0xd58>
    b7cc:	d9400c17 	ldw	r5,48(sp)
    b7d0:	28800044 	addi	r2,r5,1
    b7d4:	d8800c15 	stw	r2,48(sp)
    b7d8:	29c00047 	ldb	r7,1(r5)
    b7dc:	d9400e15 	stw	r5,56(sp)
    b7e0:	00800ac4 	movi	r2,43
    b7e4:	38821026 	beq	r7,r2,c028 <_strtod_r+0xcf4>
    b7e8:	00800b44 	movi	r2,45
    b7ec:	38821426 	beq	r7,r2,c040 <_strtod_r+0xd0c>
    b7f0:	d8001515 	stw	zero,84(sp)
    b7f4:	38bff404 	addi	r2,r7,-48
    b7f8:	00c00244 	movi	r3,9
    b7fc:	1881fc36 	bltu	r3,r2,bff0 <_strtod_r+0xcbc>
    b800:	00800c04 	movi	r2,48
    b804:	3880071e 	bne	r7,r2,b824 <_strtod_r+0x4f0>
    b808:	d8800c17 	ldw	r2,48(sp)
    b80c:	3807883a 	mov	r3,r7
    b810:	10800044 	addi	r2,r2,1
    b814:	d8800c15 	stw	r2,48(sp)
    b818:	11c00007 	ldb	r7,0(r2)
    b81c:	10800044 	addi	r2,r2,1
    b820:	38fffc26 	beq	r7,r3,b814 <_strtod_r+0x4e0>
    b824:	38bff3c4 	addi	r2,r7,-49
    b828:	00c00204 	movi	r3,8
    b82c:	18bf0a36 	bltu	r3,r2,b458 <_strtod_r+0x124>
    b830:	d8c00c17 	ldw	r3,48(sp)
    b834:	393ff404 	addi	r4,r7,-48
    b838:	05c00bc4 	movi	r23,47
    b83c:	18800044 	addi	r2,r3,1
    b840:	d8800c15 	stw	r2,48(sp)
    b844:	19c00047 	ldb	r7,1(r3)
    b848:	d8c01615 	stw	r3,88(sp)
    b84c:	b9c0160e 	bge	r23,r7,b8a8 <_strtod_r+0x574>
    b850:	00c00e44 	movi	r3,57
    b854:	19c01416 	blt	r3,r7,b8a8 <_strtod_r+0x574>
    b858:	d9401617 	ldw	r5,88(sp)
    b85c:	dc001715 	stw	r16,92(sp)
    b860:	1823883a 	mov	r17,r3
    b864:	2d800084 	addi	r22,r5,2
    b868:	3025883a 	mov	r18,r6
    b86c:	3821883a 	mov	r16,r7
    b870:	00000206 	br	b87c <_strtod_r+0x548>
    b874:	b5800044 	addi	r22,r22,1
    b878:	8c000816 	blt	r17,r16,b89c <_strtod_r+0x568>
    b87c:	01400284 	movi	r5,10
    b880:	00015040 	call	1504 <__mulsi3>
    b884:	dd800c15 	stw	r22,48(sp)
    b888:	1405883a 	add	r2,r2,r16
    b88c:	b4000007 	ldb	r16,0(r22)
    b890:	113ff404 	addi	r4,r2,-48
    b894:	b005883a 	mov	r2,r22
    b898:	bc3ff616 	blt	r23,r16,b874 <_strtod_r+0x540>
    b89c:	800f883a 	mov	r7,r16
    b8a0:	dc001717 	ldw	r16,92(sp)
    b8a4:	900d883a 	mov	r6,r18
    b8a8:	d8c01617 	ldw	r3,88(sp)
    b8ac:	10c5c83a 	sub	r2,r2,r3
    b8b0:	00c00204 	movi	r3,8
    b8b4:	18833716 	blt	r3,r2,c594 <_strtod_r+0x1260>
    b8b8:	009387c4 	movi	r2,19999
    b8bc:	1100010e 	bge	r2,r4,b8c4 <_strtod_r+0x590>
    b8c0:	1009883a 	mov	r4,r2
    b8c4:	d8c01517 	ldw	r3,84(sp)
    b8c8:	183ee426 	beq	r3,zero,b45c <_strtod_r+0x128>
    b8cc:	0109c83a 	sub	r4,zero,r4
    b8d0:	a83ee326 	beq	r21,zero,b460 <_strtod_r+0x12c>
    b8d4:	2529c83a 	sub	r20,r4,r20
    b8d8:	dd001015 	stw	r20,64(sp)
    b8dc:	9800011e 	bne	r19,zero,b8e4 <_strtod_r+0x5b0>
    b8e0:	a827883a 	mov	r19,r21
    b8e4:	00800404 	movi	r2,16
    b8e8:	a823883a 	mov	r17,r21
    b8ec:	1540010e 	bge	r2,r21,b8f4 <_strtod_r+0x5c0>
    b8f0:	1023883a 	mov	r17,r2
    b8f4:	e009883a 	mov	r4,fp
    b8f8:	00102400 	call	10240 <__floatunsidf>
    b8fc:	d8800615 	stw	r2,24(sp)
    b900:	d8c00715 	stw	r3,28(sp)
    b904:	01000244 	movi	r4,9
    b908:	2440150e 	bge	r4,r17,b960 <_strtod_r+0x62c>
    b90c:	893ffdc4 	addi	r4,r17,-9
    b910:	200890fa 	slli	r4,r4,3
    b914:	180b883a 	mov	r5,r3
    b918:	00c00074 	movhi	r3,1
    b91c:	18d15704 	addi	r3,r3,17756
    b920:	1907883a 	add	r3,r3,r4
    b924:	19800017 	ldw	r6,0(r3)
    b928:	19c00117 	ldw	r7,4(r3)
    b92c:	1009883a 	mov	r4,r2
    b930:	000f9680 	call	f968 <__muldf3>
    b934:	d9000f17 	ldw	r4,60(sp)
    b938:	1025883a 	mov	r18,r2
    b93c:	1829883a 	mov	r20,r3
    b940:	00102400 	call	10240 <__floatunsidf>
    b944:	9009883a 	mov	r4,r18
    b948:	a00b883a 	mov	r5,r20
    b94c:	100d883a 	mov	r6,r2
    b950:	180f883a 	mov	r7,r3
    b954:	000f8b40 	call	f8b4 <__adddf3>
    b958:	d8800615 	stw	r2,24(sp)
    b95c:	d8c00715 	stw	r3,28(sp)
    b960:	008003c4 	movi	r2,15
    b964:	15401b16 	blt	r2,r21,b9d4 <_strtod_r+0x6a0>
    b968:	d8c01017 	ldw	r3,64(sp)
    b96c:	18001626 	beq	r3,zero,b9c8 <_strtod_r+0x694>
    b970:	d9001017 	ldw	r4,64(sp)
    b974:	01032e0e 	bge	zero,r4,c630 <_strtod_r+0x12fc>
    b978:	00c00584 	movi	r3,22
    b97c:	19031016 	blt	r3,r4,c5c0 <_strtod_r+0x128c>
    b980:	200490fa 	slli	r2,r4,3
    b984:	00c00074 	movhi	r3,1
    b988:	18d15704 	addi	r3,r3,17756
    b98c:	d9000617 	ldw	r4,24(sp)
    b990:	1885883a 	add	r2,r3,r2
    b994:	d9400717 	ldw	r5,28(sp)
    b998:	11800017 	ldw	r6,0(r2)
    b99c:	11c00117 	ldw	r7,4(r2)
    b9a0:	000f9680 	call	f968 <__muldf3>
    b9a4:	003f0406 	br	b5b8 <_strtod_r+0x284>
    b9a8:	00dffc34 	movhi	r3,32752
    b9ac:	d8c00715 	stw	r3,28(sp)
    b9b0:	d8000615 	stw	zero,24(sp)
    b9b4:	1080020c 	andi	r2,r2,8
    b9b8:	10000326 	beq	r2,zero,b9c8 <_strtod_r+0x694>
    b9bc:	d8800717 	ldw	r2,28(sp)
    b9c0:	10a00034 	orhi	r2,r2,32768
    b9c4:	d8800715 	stw	r2,28(sp)
    b9c8:	d8800617 	ldw	r2,24(sp)
    b9cc:	d8c00717 	ldw	r3,28(sp)
    b9d0:	003ef906 	br	b5b8 <_strtod_r+0x284>
    b9d4:	d8801017 	ldw	r2,64(sp)
    b9d8:	ac63c83a 	sub	r17,r21,r17
    b9dc:	1463883a 	add	r17,r2,r17
    b9e0:	0442a70e 	bge	zero,r17,c480 <_strtod_r+0x114c>
    b9e4:	888003cc 	andi	r2,r17,15
    b9e8:	10000b26 	beq	r2,zero,ba18 <_strtod_r+0x6e4>
    b9ec:	100490fa 	slli	r2,r2,3
    b9f0:	00c00074 	movhi	r3,1
    b9f4:	18d15704 	addi	r3,r3,17756
    b9f8:	d9000617 	ldw	r4,24(sp)
    b9fc:	1885883a 	add	r2,r3,r2
    ba00:	d9400717 	ldw	r5,28(sp)
    ba04:	11800017 	ldw	r6,0(r2)
    ba08:	11c00117 	ldw	r7,4(r2)
    ba0c:	000f9680 	call	f968 <__muldf3>
    ba10:	d8800615 	stw	r2,24(sp)
    ba14:	d8c00715 	stw	r3,28(sp)
    ba18:	00bffc04 	movi	r2,-16
    ba1c:	88a2703a 	and	r17,r17,r2
    ba20:	8801a41e 	bne	r17,zero,c0b4 <_strtod_r+0xd80>
    ba24:	0029883a 	mov	r20,zero
    ba28:	d9401417 	ldw	r5,80(sp)
    ba2c:	df000015 	stw	fp,0(sp)
    ba30:	8009883a 	mov	r4,r16
    ba34:	980d883a 	mov	r6,r19
    ba38:	a80f883a 	mov	r7,r21
    ba3c:	0009a4c0 	call	9a4c <__s2b>
    ba40:	d8c01017 	ldw	r3,64(sp)
    ba44:	102d883a 	mov	r22,r2
    ba48:	b1000304 	addi	r4,r22,12
    ba4c:	1805d7fa 	srai	r2,r3,31
    ba50:	00f9c83a 	sub	fp,zero,r3
    ba54:	d9001315 	stw	r4,76(sp)
    ba58:	e0b8703a 	and	fp,fp,r2
    ba5c:	df000e15 	stw	fp,56(sp)
    ba60:	b1400117 	ldw	r5,4(r22)
    ba64:	8009883a 	mov	r4,r16
    ba68:	0027883a 	mov	r19,zero
    ba6c:	00098380 	call	9838 <_Balloc>
    ba70:	b1800417 	ldw	r6,16(r22)
    ba74:	d9401317 	ldw	r5,76(sp)
    ba78:	11000304 	addi	r4,r2,12
    ba7c:	31800084 	addi	r6,r6,2
    ba80:	318d883a 	add	r6,r6,r6
    ba84:	318d883a 	add	r6,r6,r6
    ba88:	1025883a 	mov	r18,r2
    ba8c:	00033640 	call	3364 <memcpy>
    ba90:	d9400617 	ldw	r5,24(sp)
    ba94:	d9800717 	ldw	r6,28(sp)
    ba98:	d8800a04 	addi	r2,sp,40
    ba9c:	8009883a 	mov	r4,r16
    baa0:	d9c00d04 	addi	r7,sp,52
    baa4:	d8800015 	stw	r2,0(sp)
    baa8:	000a52c0 	call	a52c <__d2b>
    baac:	8009883a 	mov	r4,r16
    bab0:	01400044 	movi	r5,1
    bab4:	d8800b15 	stw	r2,44(sp)
    bab8:	0009c680 	call	9c68 <__i2b>
    babc:	d8c01017 	ldw	r3,64(sp)
    bac0:	1023883a 	mov	r17,r2
    bac4:	00c0010e 	bge	zero,r3,bacc <_strtod_r+0x798>
    bac8:	1827883a 	mov	r19,r3
    bacc:	d8800d17 	ldw	r2,52(sp)
    bad0:	1000de16 	blt	r2,zero,be4c <_strtod_r+0xb18>
    bad4:	d9000e17 	ldw	r4,56(sp)
    bad8:	9807883a 	mov	r3,r19
    badc:	20af883a 	add	r23,r4,r2
    bae0:	d9000a17 	ldw	r4,40(sp)
    bae4:	1505c83a 	sub	r2,r2,r20
    bae8:	017f00c4 	movi	r5,-1021
    baec:	110d883a 	add	r6,r2,r4
    baf0:	31409a0e 	bge	r6,r5,bd5c <_strtod_r+0xa28>
    baf4:	10810cc4 	addi	r2,r2,1075
    baf8:	b8b9883a 	add	fp,r23,r2
    bafc:	1885883a 	add	r2,r3,r2
    bb00:	152b883a 	add	r21,r2,r20
    bb04:	e005883a 	mov	r2,fp
    bb08:	bf00010e 	bge	r23,fp,bb10 <_strtod_r+0x7dc>
    bb0c:	b805883a 	mov	r2,r23
    bb10:	a880010e 	bge	r21,r2,bb18 <_strtod_r+0x7e4>
    bb14:	a805883a 	mov	r2,r21
    bb18:	0080030e 	bge	zero,r2,bb28 <_strtod_r+0x7f4>
    bb1c:	e0b9c83a 	sub	fp,fp,r2
    bb20:	a8abc83a 	sub	r21,r21,r2
    bb24:	b8afc83a 	sub	r23,r23,r2
    bb28:	d9400e17 	ldw	r5,56(sp)
    bb2c:	28000f26 	beq	r5,zero,bb6c <_strtod_r+0x838>
    bb30:	280d883a 	mov	r6,r5
    bb34:	8009883a 	mov	r4,r16
    bb38:	880b883a 	mov	r5,r17
    bb3c:	0009efc0 	call	9efc <__pow5mult>
    bb40:	d9800b17 	ldw	r6,44(sp)
    bb44:	8009883a 	mov	r4,r16
    bb48:	100b883a 	mov	r5,r2
    bb4c:	1023883a 	mov	r17,r2
    bb50:	0009ca40 	call	9ca4 <__multiply>
    bb54:	d9400b17 	ldw	r5,44(sp)
    bb58:	8009883a 	mov	r4,r16
    bb5c:	d8801815 	stw	r2,96(sp)
    bb60:	00098e00 	call	98e0 <_Bfree>
    bb64:	d8801817 	ldw	r2,96(sp)
    bb68:	d8800b15 	stw	r2,44(sp)
    bb6c:	0700050e 	bge	zero,fp,bb84 <_strtod_r+0x850>
    bb70:	d9400b17 	ldw	r5,44(sp)
    bb74:	8009883a 	mov	r4,r16
    bb78:	e00d883a 	mov	r6,fp
    bb7c:	000a0280 	call	a028 <__lshift>
    bb80:	d8800b15 	stw	r2,44(sp)
    bb84:	98000526 	beq	r19,zero,bb9c <_strtod_r+0x868>
    bb88:	900b883a 	mov	r5,r18
    bb8c:	8009883a 	mov	r4,r16
    bb90:	980d883a 	mov	r6,r19
    bb94:	0009efc0 	call	9efc <__pow5mult>
    bb98:	1025883a 	mov	r18,r2
    bb9c:	0540050e 	bge	zero,r21,bbb4 <_strtod_r+0x880>
    bba0:	900b883a 	mov	r5,r18
    bba4:	8009883a 	mov	r4,r16
    bba8:	a80d883a 	mov	r6,r21
    bbac:	000a0280 	call	a028 <__lshift>
    bbb0:	1025883a 	mov	r18,r2
    bbb4:	05c0050e 	bge	zero,r23,bbcc <_strtod_r+0x898>
    bbb8:	880b883a 	mov	r5,r17
    bbbc:	8009883a 	mov	r4,r16
    bbc0:	b80d883a 	mov	r6,r23
    bbc4:	000a0280 	call	a028 <__lshift>
    bbc8:	1023883a 	mov	r17,r2
    bbcc:	d9400b17 	ldw	r5,44(sp)
    bbd0:	8009883a 	mov	r4,r16
    bbd4:	900d883a 	mov	r6,r18
    bbd8:	000a1dc0 	call	a1dc <__mdiff>
    bbdc:	1027883a 	mov	r19,r2
    bbe0:	10800317 	ldw	r2,12(r2)
    bbe4:	9809883a 	mov	r4,r19
    bbe8:	98000315 	stw	zero,12(r19)
    bbec:	880b883a 	mov	r5,r17
    bbf0:	d8800f15 	stw	r2,60(sp)
    bbf4:	000a1840 	call	a184 <__mcmp>
    bbf8:	1001cb16 	blt	r2,zero,c328 <_strtod_r+0xff4>
    bbfc:	1001fa26 	beq	r2,zero,c3e8 <_strtod_r+0x10b4>
    bc00:	9809883a 	mov	r4,r19
    bc04:	880b883a 	mov	r5,r17
    bc08:	000a6700 	call	a670 <__ratio>
    bc0c:	1009883a 	mov	r4,r2
    bc10:	180b883a 	mov	r5,r3
    bc14:	000d883a 	mov	r6,zero
    bc18:	01d00034 	movhi	r7,16384
    bc1c:	102f883a 	mov	r23,r2
    bc20:	1839883a 	mov	fp,r3
    bc24:	000ffdc0 	call	ffdc <__ledf2>
    bc28:	00804f16 	blt	zero,r2,bd68 <_strtod_r+0xa34>
    bc2c:	d9400f17 	ldw	r5,60(sp)
    bc30:	28008926 	beq	r5,zero,be58 <_strtod_r+0xb24>
    bc34:	da400717 	ldw	r9,28(sp)
    bc38:	05cffc34 	movhi	r23,16368
    bc3c:	d8000815 	stw	zero,32(sp)
    bc40:	ddc00915 	stw	r23,36(sp)
    bc44:	002b883a 	mov	r21,zero
    bc48:	4f1ffc2c 	andhi	fp,r9,32752
    bc4c:	009ff834 	movhi	r2,32736
    bc50:	e0805526 	beq	fp,r2,bda8 <_strtod_r+0xa74>
    bc54:	a0001b26 	beq	r20,zero,bcc4 <_strtod_r+0x990>
    bc58:	0081a834 	movhi	r2,1696
    bc5c:	17001936 	bltu	r2,fp,bcc4 <_strtod_r+0x990>
    bc60:	a809883a 	mov	r4,r21
    bc64:	b80b883a 	mov	r5,r23
    bc68:	01bff034 	movhi	r6,65472
    bc6c:	01d07834 	movhi	r7,16864
    bc70:	39ffffc4 	addi	r7,r7,-1
    bc74:	000ffdc0 	call	ffdc <__ledf2>
    bc78:	00800d16 	blt	zero,r2,bcb0 <_strtod_r+0x97c>
    bc7c:	a809883a 	mov	r4,r21
    bc80:	b80b883a 	mov	r5,r23
    bc84:	000e7600 	call	e760 <__fixunsdfsi>
    bc88:	1000d626 	beq	r2,zero,bfe4 <_strtod_r+0xcb0>
    bc8c:	1009883a 	mov	r4,r2
    bc90:	00102400 	call	10240 <__floatunsidf>
    bc94:	102b883a 	mov	r21,r2
    bc98:	182f883a 	mov	r23,r3
    bc9c:	d9400f17 	ldw	r5,60(sp)
    bca0:	2800ce1e 	bne	r5,zero,bfdc <_strtod_r+0xca8>
    bca4:	b8a0003c 	xorhi	r2,r23,32768
    bca8:	dd400815 	stw	r21,32(sp)
    bcac:	d8800915 	stw	r2,36(sp)
    bcb0:	d8c00917 	ldw	r3,36(sp)
    bcb4:	0081ac34 	movhi	r2,1712
    bcb8:	1885883a 	add	r2,r3,r2
    bcbc:	1705c83a 	sub	r2,r2,fp
    bcc0:	d8800915 	stw	r2,36(sp)
    bcc4:	d9000617 	ldw	r4,24(sp)
    bcc8:	d9400717 	ldw	r5,28(sp)
    bccc:	000a3840 	call	a384 <__ulp>
    bcd0:	da800617 	ldw	r10,24(sp)
    bcd4:	da400717 	ldw	r9,28(sp)
    bcd8:	d9800817 	ldw	r6,32(sp)
    bcdc:	d9c00917 	ldw	r7,36(sp)
    bce0:	1009883a 	mov	r4,r2
    bce4:	180b883a 	mov	r5,r3
    bce8:	da401915 	stw	r9,100(sp)
    bcec:	da801815 	stw	r10,96(sp)
    bcf0:	000f9680 	call	f968 <__muldf3>
    bcf4:	da401917 	ldw	r9,100(sp)
    bcf8:	da801817 	ldw	r10,96(sp)
    bcfc:	100d883a 	mov	r6,r2
    bd00:	480b883a 	mov	r5,r9
    bd04:	5009883a 	mov	r4,r10
    bd08:	180f883a 	mov	r7,r3
    bd0c:	000f8b40 	call	f8b4 <__adddf3>
    bd10:	d8800615 	stw	r2,24(sp)
    bd14:	d8c00715 	stw	r3,28(sp)
    bd18:	1813883a 	mov	r9,r3
    bd1c:	a000021e 	bne	r20,zero,bd28 <_strtod_r+0x9f4>
    bd20:	489ffc2c 	andhi	r2,r9,32752
    bd24:	e0807226 	beq	fp,r2,bef0 <_strtod_r+0xbbc>
    bd28:	d9400b17 	ldw	r5,44(sp)
    bd2c:	8009883a 	mov	r4,r16
    bd30:	00098e00 	call	98e0 <_Bfree>
    bd34:	8009883a 	mov	r4,r16
    bd38:	900b883a 	mov	r5,r18
    bd3c:	00098e00 	call	98e0 <_Bfree>
    bd40:	8009883a 	mov	r4,r16
    bd44:	880b883a 	mov	r5,r17
    bd48:	00098e00 	call	98e0 <_Bfree>
    bd4c:	8009883a 	mov	r4,r16
    bd50:	980b883a 	mov	r5,r19
    bd54:	00098e00 	call	98e0 <_Bfree>
    bd58:	003f4106 	br	ba60 <_strtod_r+0x72c>
    bd5c:	00800d84 	movi	r2,54
    bd60:	1105c83a 	sub	r2,r2,r4
    bd64:	003f6406 	br	baf8 <_strtod_r+0x7c4>
    bd68:	b809883a 	mov	r4,r23
    bd6c:	e00b883a 	mov	r5,fp
    bd70:	000d883a 	mov	r6,zero
    bd74:	01cff834 	movhi	r7,16352
    bd78:	000f9680 	call	f968 <__muldf3>
    bd7c:	d9000f17 	ldw	r4,60(sp)
    bd80:	102b883a 	mov	r21,r2
    bd84:	182f883a 	mov	r23,r3
    bd88:	2000011e 	bne	r4,zero,bd90 <_strtod_r+0xa5c>
    bd8c:	18e0003c 	xorhi	r3,r3,32768
    bd90:	da400717 	ldw	r9,28(sp)
    bd94:	d8800815 	stw	r2,32(sp)
    bd98:	d8c00915 	stw	r3,36(sp)
    bd9c:	4f1ffc2c 	andhi	fp,r9,32752
    bda0:	009ff834 	movhi	r2,32736
    bda4:	e0bfab1e 	bne	fp,r2,bc54 <_strtod_r+0x920>
    bda8:	d8800617 	ldw	r2,24(sp)
    bdac:	00ff2c34 	movhi	r3,64688
    bdb0:	48d3883a 	add	r9,r9,r3
    bdb4:	1009883a 	mov	r4,r2
    bdb8:	d8800415 	stw	r2,16(sp)
    bdbc:	d8800717 	ldw	r2,28(sp)
    bdc0:	480b883a 	mov	r5,r9
    bdc4:	da400715 	stw	r9,28(sp)
    bdc8:	d8800515 	stw	r2,20(sp)
    bdcc:	000a3840 	call	a384 <__ulp>
    bdd0:	da800617 	ldw	r10,24(sp)
    bdd4:	da400717 	ldw	r9,28(sp)
    bdd8:	d9800817 	ldw	r6,32(sp)
    bddc:	d9c00917 	ldw	r7,36(sp)
    bde0:	1009883a 	mov	r4,r2
    bde4:	180b883a 	mov	r5,r3
    bde8:	da401915 	stw	r9,100(sp)
    bdec:	da801815 	stw	r10,96(sp)
    bdf0:	000f9680 	call	f968 <__muldf3>
    bdf4:	da801817 	ldw	r10,96(sp)
    bdf8:	da401917 	ldw	r9,100(sp)
    bdfc:	100d883a 	mov	r6,r2
    be00:	5009883a 	mov	r4,r10
    be04:	480b883a 	mov	r5,r9
    be08:	180f883a 	mov	r7,r3
    be0c:	000f8b40 	call	f8b4 <__adddf3>
    be10:	d8800615 	stw	r2,24(sp)
    be14:	015f2834 	movhi	r5,31904
    be18:	297fffc4 	addi	r5,r5,-1
    be1c:	189ffc2c 	andhi	r2,r3,32752
    be20:	2880642e 	bgeu	r5,r2,bfb4 <_strtod_r+0xc80>
    be24:	d8800517 	ldw	r2,20(sp)
    be28:	00dffc34 	movhi	r3,32752
    be2c:	18ffffc4 	addi	r3,r3,-1
    be30:	10c18526 	beq	r2,r3,c448 <_strtod_r+0x1114>
    be34:	011ffc34 	movhi	r4,32752
    be38:	213fffc4 	addi	r4,r4,-1
    be3c:	00bfffc4 	movi	r2,-1
    be40:	d9000715 	stw	r4,28(sp)
    be44:	d8800615 	stw	r2,24(sp)
    be48:	003fb706 	br	bd28 <_strtod_r+0x9f4>
    be4c:	9887c83a 	sub	r3,r19,r2
    be50:	ddc00e17 	ldw	r23,56(sp)
    be54:	003f2206 	br	bae0 <_strtod_r+0x7ac>
    be58:	d8800617 	ldw	r2,24(sp)
    be5c:	10001a1e 	bne	r2,zero,bec8 <_strtod_r+0xb94>
    be60:	da400717 	ldw	r9,28(sp)
    be64:	00c00434 	movhi	r3,16
    be68:	18ffffc4 	addi	r3,r3,-1
    be6c:	48c4703a 	and	r2,r9,r3
    be70:	1000191e 	bne	r2,zero,bed8 <_strtod_r+0xba4>
    be74:	b809883a 	mov	r4,r23
    be78:	e00b883a 	mov	r5,fp
    be7c:	000d883a 	mov	r6,zero
    be80:	01cffc34 	movhi	r7,16368
    be84:	da401915 	stw	r9,100(sp)
    be88:	000ff800 	call	ff80 <__ltdf2>
    be8c:	da401917 	ldw	r9,100(sp)
    be90:	1001bb16 	blt	r2,zero,c580 <_strtod_r+0x124c>
    be94:	b809883a 	mov	r4,r23
    be98:	e00b883a 	mov	r5,fp
    be9c:	000d883a 	mov	r6,zero
    bea0:	01cff834 	movhi	r7,16352
    bea4:	000f9680 	call	f968 <__muldf3>
    bea8:	da401917 	ldw	r9,100(sp)
    beac:	182f883a 	mov	r23,r3
    beb0:	102b883a 	mov	r21,r2
    beb4:	1007883a 	mov	r3,r2
    beb8:	b8a0003c 	xorhi	r2,r23,32768
    bebc:	d8c00815 	stw	r3,32(sp)
    bec0:	d8800915 	stw	r2,36(sp)
    bec4:	003f6006 	br	bc48 <_strtod_r+0x914>
    bec8:	00c00044 	movi	r3,1
    becc:	da400717 	ldw	r9,28(sp)
    bed0:	10c0011e 	bne	r2,r3,bed8 <_strtod_r+0xba4>
    bed4:	4800c526 	beq	r9,zero,c1ec <_strtod_r+0xeb8>
    bed8:	00affc34 	movhi	r2,49136
    bedc:	d8000815 	stw	zero,32(sp)
    bee0:	d8800915 	stw	r2,36(sp)
    bee4:	002b883a 	mov	r21,zero
    bee8:	05cffc34 	movhi	r23,16368
    beec:	003f5606 	br	bc48 <_strtod_r+0x914>
    bef0:	b80b883a 	mov	r5,r23
    bef4:	a809883a 	mov	r4,r21
    bef8:	da401915 	stw	r9,100(sp)
    befc:	001010c0 	call	1010c <__fixdfsi>
    bf00:	1009883a 	mov	r4,r2
    bf04:	00100380 	call	10038 <__floatsidf>
    bf08:	b80b883a 	mov	r5,r23
    bf0c:	a809883a 	mov	r4,r21
    bf10:	100d883a 	mov	r6,r2
    bf14:	180f883a 	mov	r7,r3
    bf18:	000f9080 	call	f908 <__subdf3>
    bf1c:	102f883a 	mov	r23,r2
    bf20:	d8800f17 	ldw	r2,60(sp)
    bf24:	1839883a 	mov	fp,r3
    bf28:	da401917 	ldw	r9,100(sp)
    bf2c:	1000021e 	bne	r2,zero,bf38 <_strtod_r+0xc04>
    bf30:	d8800617 	ldw	r2,24(sp)
    bf34:	10004826 	beq	r2,zero,c058 <_strtod_r+0xd24>
    bf38:	b809883a 	mov	r4,r23
    bf3c:	e00b883a 	mov	r5,fp
    bf40:	01a52834 	movhi	r6,38048
    bf44:	318d6544 	addi	r6,r6,13717
    bf48:	01cff834 	movhi	r7,16352
    bf4c:	39ffffc4 	addi	r7,r7,-1
    bf50:	000ff800 	call	ff80 <__ltdf2>
    bf54:	10000716 	blt	r2,zero,bf74 <_strtod_r+0xc40>
    bf58:	b809883a 	mov	r4,r23
    bf5c:	e00b883a 	mov	r5,fp
    bf60:	018d6c34 	movhi	r6,13744
    bf64:	31b94d44 	addi	r6,r6,-6859
    bf68:	01cff834 	movhi	r7,16352
    bf6c:	000feb80 	call	feb8 <__gtdf2>
    bf70:	00bf6d0e 	bge	zero,r2,bd28 <_strtod_r+0x9f4>
    bf74:	d9400b17 	ldw	r5,44(sp)
    bf78:	8009883a 	mov	r4,r16
    bf7c:	00098e00 	call	98e0 <_Bfree>
    bf80:	8009883a 	mov	r4,r16
    bf84:	900b883a 	mov	r5,r18
    bf88:	00098e00 	call	98e0 <_Bfree>
    bf8c:	8009883a 	mov	r4,r16
    bf90:	880b883a 	mov	r5,r17
    bf94:	00098e00 	call	98e0 <_Bfree>
    bf98:	8009883a 	mov	r4,r16
    bf9c:	b00b883a 	mov	r5,r22
    bfa0:	00098e00 	call	98e0 <_Bfree>
    bfa4:	8009883a 	mov	r4,r16
    bfa8:	980b883a 	mov	r5,r19
    bfac:	00098e00 	call	98e0 <_Bfree>
    bfb0:	003e8506 	br	b9c8 <_strtod_r+0x694>
    bfb4:	0240d434 	movhi	r9,848
    bfb8:	1a53883a 	add	r9,r3,r9
    bfbc:	da400715 	stw	r9,28(sp)
    bfc0:	003f5606 	br	bd1c <_strtod_r+0x9e8>
    bfc4:	a827883a 	mov	r19,r21
    bfc8:	dd801415 	stw	r22,80(sp)
    bfcc:	000d883a 	mov	r6,zero
    bfd0:	0029883a 	mov	r20,zero
    bfd4:	d8001015 	stw	zero,64(sp)
    bfd8:	003d1d06 	br	b450 <_strtod_r+0x11c>
    bfdc:	b805883a 	mov	r2,r23
    bfe0:	003f3106 	br	bca8 <_strtod_r+0x974>
    bfe4:	002b883a 	mov	r21,zero
    bfe8:	05cffc34 	movhi	r23,16368
    bfec:	003f2b06 	br	bc9c <_strtod_r+0x968>
    bff0:	d9400e17 	ldw	r5,56(sp)
    bff4:	0009883a 	mov	r4,zero
    bff8:	d9400c15 	stw	r5,48(sp)
    bffc:	003d1706 	br	b45c <_strtod_r+0x128>
    c000:	dd801415 	stw	r22,80(sp)
    c004:	a82f883a 	mov	r23,r21
    c008:	000d883a 	mov	r6,zero
    c00c:	0029883a 	mov	r20,zero
    c010:	3dbff404 	addi	r22,r7,-48
    c014:	00800244 	movi	r2,9
    c018:	15802136 	bltu	r2,r22,c0a0 <_strtod_r+0xd6c>
    c01c:	31800044 	addi	r6,r6,1
    c020:	dc400c17 	ldw	r17,48(sp)
    c024:	003daa06 	br	b6d0 <_strtod_r+0x39c>
    c028:	d8001515 	stw	zero,84(sp)
    c02c:	d9400e17 	ldw	r5,56(sp)
    c030:	28800084 	addi	r2,r5,2
    c034:	d8800c15 	stw	r2,48(sp)
    c038:	29c00087 	ldb	r7,2(r5)
    c03c:	003ded06 	br	b7f4 <_strtod_r+0x4c0>
    c040:	00c00044 	movi	r3,1
    c044:	d8c01515 	stw	r3,84(sp)
    c048:	003ff806 	br	c02c <_strtod_r+0xcf8>
    c04c:	0005883a 	mov	r2,zero
    c050:	0007883a 	mov	r3,zero
    c054:	003d5806 	br	b5b8 <_strtod_r+0x284>
    c058:	00c00434 	movhi	r3,16
    c05c:	18ffffc4 	addi	r3,r3,-1
    c060:	48d2703a 	and	r9,r9,r3
    c064:	483fb41e 	bne	r9,zero,bf38 <_strtod_r+0xc04>
    c068:	b809883a 	mov	r4,r23
    c06c:	e00b883a 	mov	r5,fp
    c070:	01a52834 	movhi	r6,38048
    c074:	318d6544 	addi	r6,r6,13717
    c078:	01cff434 	movhi	r7,16336
    c07c:	39ffffc4 	addi	r7,r7,-1
    c080:	000ff800 	call	ff80 <__ltdf2>
    c084:	103f280e 	bge	r2,zero,bd28 <_strtod_r+0x9f4>
    c088:	003fba06 	br	bf74 <_strtod_r+0xc40>
    c08c:	d8c01317 	ldw	r3,76(sp)
    c090:	183dce1e 	bne	r3,zero,b7cc <_strtod_r+0x498>
    c094:	d8800617 	ldw	r2,24(sp)
    c098:	d8c00717 	ldw	r3,28(sp)
    c09c:	003d4306 	br	b5ac <_strtod_r+0x278>
    c0a0:	00c00044 	movi	r3,1
    c0a4:	a827883a 	mov	r19,r21
    c0a8:	d8c01015 	stw	r3,64(sp)
    c0ac:	b82b883a 	mov	r21,r23
    c0b0:	003ce506 	br	b448 <_strtod_r+0x114>
    c0b4:	00804d04 	movi	r2,308
    c0b8:	1440ec16 	blt	r2,r17,c46c <_strtod_r+0x1138>
    c0bc:	8825d13a 	srai	r18,r17,4
    c0c0:	05c00044 	movi	r23,1
    c0c4:	bc81ca0e 	bge	r23,r18,c7f0 <_strtod_r+0x14bc>
    c0c8:	d8800617 	ldw	r2,24(sp)
    c0cc:	d8c00717 	ldw	r3,28(sp)
    c0d0:	05800074 	movhi	r22,1
    c0d4:	b5914d04 	addi	r22,r22,17716
    c0d8:	b029883a 	mov	r20,r22
    c0dc:	0023883a 	mov	r17,zero
    c0e0:	9180004c 	andi	r6,r18,1
    c0e4:	30000526 	beq	r6,zero,c0fc <_strtod_r+0xdc8>
    c0e8:	a1800017 	ldw	r6,0(r20)
    c0ec:	a1c00117 	ldw	r7,4(r20)
    c0f0:	1009883a 	mov	r4,r2
    c0f4:	180b883a 	mov	r5,r3
    c0f8:	000f9680 	call	f968 <__muldf3>
    c0fc:	9025d07a 	srai	r18,r18,1
    c100:	8c400044 	addi	r17,r17,1
    c104:	a5000204 	addi	r20,r20,8
    c108:	bcbff516 	blt	r23,r18,c0e0 <_strtod_r+0xdac>
    c10c:	d8800615 	stw	r2,24(sp)
    c110:	d8c00715 	stw	r3,28(sp)
    c114:	880490fa 	slli	r2,r17,3
    c118:	d9400717 	ldw	r5,28(sp)
    c11c:	d9000617 	ldw	r4,24(sp)
    c120:	b0a3883a 	add	r17,r22,r2
    c124:	89800017 	ldw	r6,0(r17)
    c128:	89c00117 	ldw	r7,4(r17)
    c12c:	00bf2c34 	movhi	r2,64688
    c130:	288b883a 	add	r5,r5,r2
    c134:	000f9680 	call	f968 <__muldf3>
    c138:	d8800615 	stw	r2,24(sp)
    c13c:	011f2834 	movhi	r4,31904
    c140:	189ffc2c 	andhi	r2,r3,32752
    c144:	2080c936 	bltu	r4,r2,c46c <_strtod_r+0x1138>
    c148:	011f2434 	movhi	r4,31888
    c14c:	2081652e 	bgeu	r4,r2,c6e4 <_strtod_r+0x13b0>
    c150:	009ffc34 	movhi	r2,32752
    c154:	10bfffc4 	addi	r2,r2,-1
    c158:	d8800715 	stw	r2,28(sp)
    c15c:	00bfffc4 	movi	r2,-1
    c160:	d8800615 	stw	r2,24(sp)
    c164:	003e2f06 	br	ba24 <_strtod_r+0x6f0>
    c168:	00c00044 	movi	r3,1
    c16c:	0027883a 	mov	r19,zero
    c170:	dd801415 	stw	r22,80(sp)
    c174:	0029883a 	mov	r20,zero
    c178:	d8c01015 	stw	r3,64(sp)
    c17c:	003cb206 	br	b448 <_strtod_r+0x114>
    c180:	d8800717 	ldw	r2,28(sp)
    c184:	00c00434 	movhi	r3,16
    c188:	18ffffc4 	addi	r3,r3,-1
    c18c:	10c6703a 	and	r3,r2,r3
    c190:	1801471e 	bne	r3,zero,c6b0 <_strtod_r+0x137c>
    c194:	d8c00617 	ldw	r3,24(sp)
    c198:	18007e26 	beq	r3,zero,c394 <_strtod_r+0x1060>
    c19c:	18c0004c 	andi	r3,r3,1
    c1a0:	1800a726 	beq	r3,zero,c440 <_strtod_r+0x110c>
    c1a4:	ddc00617 	ldw	r23,24(sp)
    c1a8:	dd400717 	ldw	r21,28(sp)
    c1ac:	b809883a 	mov	r4,r23
    c1b0:	a80b883a 	mov	r5,r21
    c1b4:	000a3840 	call	a384 <__ulp>
    c1b8:	b809883a 	mov	r4,r23
    c1bc:	a80b883a 	mov	r5,r21
    c1c0:	100d883a 	mov	r6,r2
    c1c4:	180f883a 	mov	r7,r3
    c1c8:	000f9080 	call	f908 <__subdf3>
    c1cc:	1009883a 	mov	r4,r2
    c1d0:	180b883a 	mov	r5,r3
    c1d4:	000d883a 	mov	r6,zero
    c1d8:	000f883a 	mov	r7,zero
    c1dc:	d8800615 	stw	r2,24(sp)
    c1e0:	d8c00715 	stw	r3,28(sp)
    c1e4:	000fe000 	call	fe00 <__eqdf2>
    c1e8:	1000951e 	bne	r2,zero,c440 <_strtod_r+0x110c>
    c1ec:	d8000615 	stw	zero,24(sp)
    c1f0:	d8000715 	stw	zero,28(sp)
    c1f4:	00800884 	movi	r2,34
    c1f8:	80800015 	stw	r2,0(r16)
    c1fc:	003f5d06 	br	bf74 <_strtod_r+0xc40>
    c200:	00800404 	movi	r2,16
    c204:	153d4916 	blt	r2,r20,b72c <_strtod_r+0x3f8>
    c208:	8009883a 	mov	r4,r16
    c20c:	01400284 	movi	r5,10
    c210:	00015040 	call	1504 <__mulsi3>
    c214:	1021883a 	mov	r16,r2
    c218:	003d4406 	br	b72c <_strtod_r+0x3f8>
    c21c:	d9001217 	ldw	r4,72(sp)
    c220:	d8800b04 	addi	r2,sp,44
    c224:	04c00074 	movhi	r19,1
    c228:	9cd41704 	addi	r19,r19,20572
    c22c:	d9000115 	stw	r4,4(sp)
    c230:	d8800015 	stw	r2,0(sp)
    c234:	8009883a 	mov	r4,r16
    c238:	d9400c04 	addi	r5,sp,48
    c23c:	980d883a 	mov	r6,r19
    c240:	d9c00a04 	addi	r7,sp,40
    c244:	000dc4c0 	call	dc4c <__gethex>
    c248:	148001cc 	andi	r18,r2,7
    c24c:	903dde26 	beq	r18,zero,b9c8 <_strtod_r+0x694>
    c250:	00c00184 	movi	r3,6
    c254:	90c0f226 	beq	r18,r3,c620 <_strtod_r+0x12ec>
    c258:	d9800b17 	ldw	r6,44(sp)
    c25c:	30000826 	beq	r6,zero,c280 <_strtod_r+0xf4c>
    c260:	99400017 	ldw	r5,0(r19)
    c264:	d9000204 	addi	r4,sp,8
    c268:	d8801815 	stw	r2,96(sp)
    c26c:	000a7880 	call	a788 <__copybits>
    c270:	d9400b17 	ldw	r5,44(sp)
    c274:	8009883a 	mov	r4,r16
    c278:	00098e00 	call	98e0 <_Bfree>
    c27c:	d8801817 	ldw	r2,96(sp)
    c280:	00c00184 	movi	r3,6
    c284:	d9000a17 	ldw	r4,40(sp)
    c288:	1cbdca36 	bltu	r3,r18,b9b4 <_strtod_r+0x680>
    c28c:	94a5883a 	add	r18,r18,r18
    c290:	94a5883a 	add	r18,r18,r18
    c294:	00c00074 	movhi	r3,1
    c298:	18f0aa04 	addi	r3,r3,-15704
    c29c:	90c7883a 	add	r3,r18,r3
    c2a0:	18c00017 	ldw	r3,0(r3)
    c2a4:	1800683a 	jmp	r3
    c2a8:	0000c31c 	xori	zero,zero,780
    c2ac:	0000c2d8 	cmpnei	zero,zero,779
    c2b0:	0000c2c4 	movi	zero,779
    c2b4:	0000b9a8 	cmpgeui	zero,zero,742
    c2b8:	0000c304 	movi	zero,780
    c2bc:	0000c2d8 	cmpnei	zero,zero,779
    c2c0:	0000c31c 	xori	zero,zero,780
    c2c4:	d8c00217 	ldw	r3,8(sp)
    c2c8:	d8c00615 	stw	r3,24(sp)
    c2cc:	d8c00317 	ldw	r3,12(sp)
    c2d0:	d8c00715 	stw	r3,28(sp)
    c2d4:	003db706 	br	b9b4 <_strtod_r+0x680>
    c2d8:	21010cc4 	addi	r4,r4,1075
    c2dc:	d9400317 	ldw	r5,12(sp)
    c2e0:	2008953a 	slli	r4,r4,20
    c2e4:	00fffc34 	movhi	r3,65520
    c2e8:	18ffffc4 	addi	r3,r3,-1
    c2ec:	28c6703a 	and	r3,r5,r3
    c2f0:	20c6b03a 	or	r3,r4,r3
    c2f4:	d9000217 	ldw	r4,8(sp)
    c2f8:	d8c00715 	stw	r3,28(sp)
    c2fc:	d9000615 	stw	r4,24(sp)
    c300:	003dac06 	br	b9b4 <_strtod_r+0x680>
    c304:	00e00034 	movhi	r3,32768
    c308:	18ffffc4 	addi	r3,r3,-1
    c30c:	d8c00715 	stw	r3,28(sp)
    c310:	00ffffc4 	movi	r3,-1
    c314:	d8c00615 	stw	r3,24(sp)
    c318:	003da606 	br	b9b4 <_strtod_r+0x680>
    c31c:	d8000715 	stw	zero,28(sp)
    c320:	d8000615 	stw	zero,24(sp)
    c324:	003da306 	br	b9b4 <_strtod_r+0x680>
    c328:	d8c00f17 	ldw	r3,60(sp)
    c32c:	1800441e 	bne	r3,zero,c440 <_strtod_r+0x110c>
    c330:	d8800617 	ldw	r2,24(sp)
    c334:	1000421e 	bne	r2,zero,c440 <_strtod_r+0x110c>
    c338:	d8800717 	ldw	r2,28(sp)
    c33c:	00c00434 	movhi	r3,16
    c340:	18ffffc4 	addi	r3,r3,-1
    c344:	10c6703a 	and	r3,r2,r3
    c348:	18003d1e 	bne	r3,zero,c440 <_strtod_r+0x110c>
    c34c:	109ffc2c 	andhi	r2,r2,32752
    c350:	00c1ac34 	movhi	r3,1712
    c354:	18803a2e 	bgeu	r3,r2,c440 <_strtod_r+0x110c>
    c358:	98800517 	ldw	r2,20(r19)
    c35c:	1000031e 	bne	r2,zero,c36c <_strtod_r+0x1038>
    c360:	98800417 	ldw	r2,16(r19)
    c364:	00c00044 	movi	r3,1
    c368:	1880350e 	bge	r3,r2,c440 <_strtod_r+0x110c>
    c36c:	980b883a 	mov	r5,r19
    c370:	8009883a 	mov	r4,r16
    c374:	01800044 	movi	r6,1
    c378:	000a0280 	call	a028 <__lshift>
    c37c:	1009883a 	mov	r4,r2
    c380:	880b883a 	mov	r5,r17
    c384:	1027883a 	mov	r19,r2
    c388:	000a1840 	call	a184 <__mcmp>
    c38c:	00802c0e 	bge	zero,r2,c440 <_strtod_r+0x110c>
    c390:	d8800717 	ldw	r2,28(sp)
    c394:	109ffc2c 	andhi	r2,r2,32752
    c398:	a000ed26 	beq	r20,zero,c750 <_strtod_r+0x141c>
    c39c:	00c1ac34 	movhi	r3,1712
    c3a0:	1880eb36 	bltu	r3,r2,c750 <_strtod_r+0x141c>
    c3a4:	00c0dc34 	movhi	r3,880
    c3a8:	18bf902e 	bgeu	r3,r2,c1ec <_strtod_r+0xeb8>
    c3ac:	d9000617 	ldw	r4,24(sp)
    c3b0:	d9400717 	ldw	r5,28(sp)
    c3b4:	008e5434 	movhi	r2,14672
    c3b8:	000d883a 	mov	r6,zero
    c3bc:	100f883a 	mov	r7,r2
    c3c0:	d8800515 	stw	r2,20(sp)
    c3c4:	d8000415 	stw	zero,16(sp)
    c3c8:	000f9680 	call	f968 <__muldf3>
    c3cc:	d8800615 	stw	r2,24(sp)
    c3d0:	d8c00715 	stw	r3,28(sp)
    c3d4:	183ee71e 	bne	r3,zero,bf74 <_strtod_r+0xc40>
    c3d8:	103ee61e 	bne	r2,zero,bf74 <_strtod_r+0xc40>
    c3dc:	00800884 	movi	r2,34
    c3e0:	80800015 	stw	r2,0(r16)
    c3e4:	003ee306 	br	bf74 <_strtod_r+0xc40>
    c3e8:	d9000f17 	ldw	r4,60(sp)
    c3ec:	203f6426 	beq	r4,zero,c180 <_strtod_r+0xe4c>
    c3f0:	d8c00717 	ldw	r3,28(sp)
    c3f4:	00800434 	movhi	r2,16
    c3f8:	10bfffc4 	addi	r2,r2,-1
    c3fc:	1888703a 	and	r4,r3,r2
    c400:	2080bd26 	beq	r4,r2,c6f8 <_strtod_r+0x13c4>
    c404:	d8800617 	ldw	r2,24(sp)
    c408:	1080004c 	andi	r2,r2,1
    c40c:	10000c26 	beq	r2,zero,c440 <_strtod_r+0x110c>
    c410:	ddc00617 	ldw	r23,24(sp)
    c414:	dd400717 	ldw	r21,28(sp)
    c418:	b809883a 	mov	r4,r23
    c41c:	a80b883a 	mov	r5,r21
    c420:	000a3840 	call	a384 <__ulp>
    c424:	b809883a 	mov	r4,r23
    c428:	a80b883a 	mov	r5,r21
    c42c:	100d883a 	mov	r6,r2
    c430:	180f883a 	mov	r7,r3
    c434:	000f8b40 	call	f8b4 <__adddf3>
    c438:	d8800615 	stw	r2,24(sp)
    c43c:	d8c00715 	stw	r3,28(sp)
    c440:	a03fda1e 	bne	r20,zero,c3ac <_strtod_r+0x1078>
    c444:	003ecb06 	br	bf74 <_strtod_r+0xc40>
    c448:	d8c00417 	ldw	r3,16(sp)
    c44c:	00bfffc4 	movi	r2,-1
    c450:	18be781e 	bne	r3,r2,be34 <_strtod_r+0xb00>
    c454:	00800884 	movi	r2,34
    c458:	80800015 	stw	r2,0(r16)
    c45c:	009ffc34 	movhi	r2,32752
    c460:	d8800715 	stw	r2,28(sp)
    c464:	d8000615 	stw	zero,24(sp)
    c468:	003ec206 	br	bf74 <_strtod_r+0xc40>
    c46c:	00800884 	movi	r2,34
    c470:	80800015 	stw	r2,0(r16)
    c474:	00dffc34 	movhi	r3,32752
    c478:	0005883a 	mov	r2,zero
    c47c:	003c4e06 	br	b5b8 <_strtod_r+0x284>
    c480:	883d6826 	beq	r17,zero,ba24 <_strtod_r+0x6f0>
    c484:	0463c83a 	sub	r17,zero,r17
    c488:	888003cc 	andi	r2,r17,15
    c48c:	10000b26 	beq	r2,zero,c4bc <_strtod_r+0x1188>
    c490:	100490fa 	slli	r2,r2,3
    c494:	00c00074 	movhi	r3,1
    c498:	18d15704 	addi	r3,r3,17756
    c49c:	d9000617 	ldw	r4,24(sp)
    c4a0:	1885883a 	add	r2,r3,r2
    c4a4:	d9400717 	ldw	r5,28(sp)
    c4a8:	11800017 	ldw	r6,0(r2)
    c4ac:	11c00117 	ldw	r7,4(r2)
    c4b0:	000fc4c0 	call	fc4c <__divdf3>
    c4b4:	d8800615 	stw	r2,24(sp)
    c4b8:	d8c00715 	stw	r3,28(sp)
    c4bc:	8823d13a 	srai	r17,r17,4
    c4c0:	883d5826 	beq	r17,zero,ba24 <_strtod_r+0x6f0>
    c4c4:	008007c4 	movi	r2,31
    c4c8:	14402816 	blt	r2,r17,c56c <_strtod_r+0x1238>
    c4cc:	8880040c 	andi	r2,r17,16
    c4d0:	1000cf1e 	bne	r2,zero,c810 <_strtod_r+0x14dc>
    c4d4:	0029883a 	mov	r20,zero
    c4d8:	0440100e 	bge	zero,r17,c51c <_strtod_r+0x11e8>
    c4dc:	d8800617 	ldw	r2,24(sp)
    c4e0:	d8c00717 	ldw	r3,28(sp)
    c4e4:	04800074 	movhi	r18,1
    c4e8:	94919004 	addi	r18,r18,17984
    c4ec:	8980004c 	andi	r6,r17,1
    c4f0:	30000526 	beq	r6,zero,c508 <_strtod_r+0x11d4>
    c4f4:	91800017 	ldw	r6,0(r18)
    c4f8:	91c00117 	ldw	r7,4(r18)
    c4fc:	1009883a 	mov	r4,r2
    c500:	180b883a 	mov	r5,r3
    c504:	000f9680 	call	f968 <__muldf3>
    c508:	8823d07a 	srai	r17,r17,1
    c50c:	94800204 	addi	r18,r18,8
    c510:	883ff61e 	bne	r17,zero,c4ec <_strtod_r+0x11b8>
    c514:	d8800615 	stw	r2,24(sp)
    c518:	d8c00715 	stw	r3,28(sp)
    c51c:	a0000d26 	beq	r20,zero,c554 <_strtod_r+0x1220>
    c520:	d8c00717 	ldw	r3,28(sp)
    c524:	01001ac4 	movi	r4,107
    c528:	189ffc2c 	andhi	r2,r3,32752
    c52c:	1004d53a 	srli	r2,r2,20
    c530:	2085c83a 	sub	r2,r4,r2
    c534:	0080070e 	bge	zero,r2,c554 <_strtod_r+0x1220>
    c538:	010007c4 	movi	r4,31
    c53c:	2080c30e 	bge	r4,r2,c84c <_strtod_r+0x1518>
    c540:	d8000615 	stw	zero,24(sp)
    c544:	01000d04 	movi	r4,52
    c548:	2080c60e 	bge	r4,r2,c864 <_strtod_r+0x1530>
    c54c:	0080dc34 	movhi	r2,880
    c550:	d8800715 	stw	r2,28(sp)
    c554:	d9000617 	ldw	r4,24(sp)
    c558:	d9400717 	ldw	r5,28(sp)
    c55c:	000d883a 	mov	r6,zero
    c560:	000f883a 	mov	r7,zero
    c564:	000fe000 	call	fe00 <__eqdf2>
    c568:	103d2f1e 	bne	r2,zero,ba28 <_strtod_r+0x6f4>
    c56c:	00800884 	movi	r2,34
    c570:	80800015 	stw	r2,0(r16)
    c574:	0007883a 	mov	r3,zero
    c578:	0005883a 	mov	r2,zero
    c57c:	003c0e06 	br	b5b8 <_strtod_r+0x284>
    c580:	0007883a 	mov	r3,zero
    c584:	00aff834 	movhi	r2,49120
    c588:	002b883a 	mov	r21,zero
    c58c:	05cff834 	movhi	r23,16352
    c590:	003e4a06 	br	bebc <_strtod_r+0xb88>
    c594:	011387c4 	movi	r4,19999
    c598:	003cca06 	br	b8c4 <_strtod_r+0x590>
    c59c:	b00b883a 	mov	r5,r22
    c5a0:	d8000f15 	stw	zero,60(sp)
    c5a4:	0039883a 	mov	fp,zero
    c5a8:	002b883a 	mov	r21,zero
    c5ac:	003c2d06 	br	b664 <_strtod_r+0x330>
    c5b0:	d8000f15 	stw	zero,60(sp)
    c5b4:	0039883a 	mov	fp,zero
    c5b8:	002b883a 	mov	r21,zero
    c5bc:	003b9d06 	br	b434 <_strtod_r+0x100>
    c5c0:	d9401017 	ldw	r5,64(sp)
    c5c4:	00c00944 	movi	r3,37
    c5c8:	1d47c83a 	sub	r3,r3,r21
    c5cc:	197d0116 	blt	r3,r5,b9d4 <_strtod_r+0x6a0>
    c5d0:	1563c83a 	sub	r17,r2,r21
    c5d4:	880490fa 	slli	r2,r17,3
    c5d8:	04000074 	movhi	r16,1
    c5dc:	84115704 	addi	r16,r16,17756
    c5e0:	d9000617 	ldw	r4,24(sp)
    c5e4:	8085883a 	add	r2,r16,r2
    c5e8:	d9400717 	ldw	r5,28(sp)
    c5ec:	11800017 	ldw	r6,0(r2)
    c5f0:	11c00117 	ldw	r7,4(r2)
    c5f4:	000f9680 	call	f968 <__muldf3>
    c5f8:	d9001017 	ldw	r4,64(sp)
    c5fc:	180b883a 	mov	r5,r3
    c600:	244dc83a 	sub	r6,r4,r17
    c604:	300c90fa 	slli	r6,r6,3
    c608:	1009883a 	mov	r4,r2
    c60c:	81a1883a 	add	r16,r16,r6
    c610:	81800017 	ldw	r6,0(r16)
    c614:	81c00117 	ldw	r7,4(r16)
    c618:	000f9680 	call	f968 <__muldf3>
    c61c:	003be606 	br	b5b8 <_strtod_r+0x284>
    c620:	d9400e17 	ldw	r5,56(sp)
    c624:	d8001215 	stw	zero,72(sp)
    c628:	d9400c15 	stw	r5,48(sp)
    c62c:	003ce606 	br	b9c8 <_strtod_r+0x694>
    c630:	d9401017 	ldw	r5,64(sp)
    c634:	00bffa84 	movi	r2,-22
    c638:	28bce616 	blt	r5,r2,b9d4 <_strtod_r+0x6a0>
    c63c:	280490fa 	slli	r2,r5,3
    c640:	00c00074 	movhi	r3,1
    c644:	18d15704 	addi	r3,r3,17756
    c648:	d9000617 	ldw	r4,24(sp)
    c64c:	1885c83a 	sub	r2,r3,r2
    c650:	d9400717 	ldw	r5,28(sp)
    c654:	11800017 	ldw	r6,0(r2)
    c658:	11c00117 	ldw	r7,4(r2)
    c65c:	000fc4c0 	call	fc4c <__divdf3>
    c660:	003bd506 	br	b5b8 <_strtod_r+0x284>
    c664:	00801a44 	movi	r2,105
    c668:	38bb8726 	beq	r7,r2,b488 <_strtod_r+0x154>
    c66c:	00801b84 	movi	r2,110
    c670:	38be881e 	bne	r7,r2,c094 <_strtod_r+0xd60>
    c674:	d8c00c17 	ldw	r3,48(sp)
    c678:	01000074 	movhi	r4,1
    c67c:	21118f04 	addi	r4,r4,17980
    c680:	01801004 	movi	r6,64
    c684:	01c01684 	movi	r7,90
    c688:	21400007 	ldb	r5,0(r4)
    c68c:	21000044 	addi	r4,r4,1
    c690:	28004e26 	beq	r5,zero,c7cc <_strtod_r+0x1498>
    c694:	18c00044 	addi	r3,r3,1
    c698:	18800007 	ldb	r2,0(r3)
    c69c:	3080020e 	bge	r6,r2,c6a8 <_strtod_r+0x1374>
    c6a0:	38800116 	blt	r7,r2,c6a8 <_strtod_r+0x1374>
    c6a4:	10800804 	addi	r2,r2,32
    c6a8:	117ff726 	beq	r2,r5,c688 <_strtod_r+0x1354>
    c6ac:	003e7906 	br	c094 <_strtod_r+0xd60>
    c6b0:	d8c00617 	ldw	r3,24(sp)
    c6b4:	003eb906 	br	c19c <_strtod_r+0xe68>
    c6b8:	00800404 	movi	r2,16
    c6bc:	15c02216 	blt	r2,r23,c748 <_strtod_r+0x1414>
    c6c0:	d9000f17 	ldw	r4,60(sp)
    c6c4:	01400284 	movi	r5,10
    c6c8:	00015040 	call	1504 <__mulsi3>
    c6cc:	15ad883a 	add	r22,r2,r22
    c6d0:	dd800f15 	stw	r22,60(sp)
    c6d4:	000d883a 	mov	r6,zero
    c6d8:	003c2606 	br	b774 <_strtod_r+0x440>
    c6dc:	000d883a 	mov	r6,zero
    c6e0:	003bf106 	br	b6a8 <_strtod_r+0x374>
    c6e4:	0080d434 	movhi	r2,848
    c6e8:	1887883a 	add	r3,r3,r2
    c6ec:	d8c00715 	stw	r3,28(sp)
    c6f0:	0029883a 	mov	r20,zero
    c6f4:	003ccc06 	br	ba28 <_strtod_r+0x6f4>
    c6f8:	d8800617 	ldw	r2,24(sp)
    c6fc:	a0001026 	beq	r20,zero,c740 <_strtod_r+0x140c>
    c700:	191ffc2c 	andhi	r4,r3,32752
    c704:	0141a834 	movhi	r5,1696
    c708:	29000d36 	bltu	r5,r4,c740 <_strtod_r+0x140c>
    c70c:	2008d53a 	srli	r4,r4,20
    c710:	01401ac4 	movi	r5,107
    c714:	2909c83a 	sub	r4,r5,r4
    c718:	017fffc4 	movi	r5,-1
    c71c:	2908983a 	sll	r4,r5,r4
    c720:	113f391e 	bne	r2,r4,c408 <_strtod_r+0x10d4>
    c724:	18dffc2c 	andhi	r3,r3,32752
    c728:	00800434 	movhi	r2,16
    c72c:	1885883a 	add	r2,r3,r2
    c730:	d8800715 	stw	r2,28(sp)
    c734:	d8000615 	stw	zero,24(sp)
    c738:	a03f1c1e 	bne	r20,zero,c3ac <_strtod_r+0x1078>
    c73c:	003e0d06 	br	bf74 <_strtod_r+0xc40>
    c740:	013fffc4 	movi	r4,-1
    c744:	003ff606 	br	c720 <_strtod_r+0x13ec>
    c748:	000d883a 	mov	r6,zero
    c74c:	003c0906 	br	b774 <_strtod_r+0x440>
    c750:	00fffc34 	movhi	r3,65520
    c754:	10c5883a 	add	r2,r2,r3
    c758:	00c00434 	movhi	r3,16
    c75c:	18ffffc4 	addi	r3,r3,-1
    c760:	10c4b03a 	or	r2,r2,r3
    c764:	d8800715 	stw	r2,28(sp)
    c768:	00bfffc4 	movi	r2,-1
    c76c:	d8800615 	stw	r2,24(sp)
    c770:	a03f0e1e 	bne	r20,zero,c3ac <_strtod_r+0x1078>
    c774:	003dff06 	br	bf74 <_strtod_r+0xc40>
    c778:	1011883a 	mov	r8,r2
    c77c:	d8800c15 	stw	r2,48(sp)
    c780:	01000074 	movhi	r4,1
    c784:	21118d04 	addi	r4,r4,17972
    c788:	01801004 	movi	r6,64
    c78c:	01c01684 	movi	r7,90
    c790:	21400007 	ldb	r5,0(r4)
    c794:	10800044 	addi	r2,r2,1
    c798:	21000044 	addi	r4,r4,1
    c79c:	28001a26 	beq	r5,zero,c808 <_strtod_r+0x14d4>
    c7a0:	10c00007 	ldb	r3,0(r2)
    c7a4:	30c0020e 	bge	r6,r3,c7b0 <_strtod_r+0x147c>
    c7a8:	38c00116 	blt	r7,r3,c7b0 <_strtod_r+0x147c>
    c7ac:	18c00804 	addi	r3,r3,32
    c7b0:	197ff726 	beq	r3,r5,c790 <_strtod_r+0x145c>
    c7b4:	40800044 	addi	r2,r8,1
    c7b8:	d8800c15 	stw	r2,48(sp)
    c7bc:	009ffc34 	movhi	r2,32752
    c7c0:	d8800715 	stw	r2,28(sp)
    c7c4:	d8000615 	stw	zero,24(sp)
    c7c8:	003c7f06 	br	b9c8 <_strtod_r+0x694>
    c7cc:	18800044 	addi	r2,r3,1
    c7d0:	d8800c15 	stw	r2,48(sp)
    c7d4:	18c00047 	ldb	r3,1(r3)
    c7d8:	00800a04 	movi	r2,40
    c7dc:	18800e26 	beq	r3,r2,c818 <_strtod_r+0x14e4>
    c7e0:	00bffe34 	movhi	r2,65528
    c7e4:	d8800715 	stw	r2,28(sp)
    c7e8:	d8000615 	stw	zero,24(sp)
    c7ec:	003c7606 	br	b9c8 <_strtod_r+0x694>
    c7f0:	0023883a 	mov	r17,zero
    c7f4:	05800074 	movhi	r22,1
    c7f8:	b5914d04 	addi	r22,r22,17716
    c7fc:	003e4506 	br	c114 <_strtod_r+0xde0>
    c800:	b805883a 	mov	r2,r23
    c804:	003bd306 	br	b754 <_strtod_r+0x420>
    c808:	d8800c15 	stw	r2,48(sp)
    c80c:	003feb06 	br	c7bc <_strtod_r+0x1488>
    c810:	05001a84 	movi	r20,106
    c814:	003f3006 	br	c4d8 <_strtod_r+0x11a4>
    c818:	d9000c04 	addi	r4,sp,48
    c81c:	01400074 	movhi	r5,1
    c820:	29541c04 	addi	r5,r5,20592
    c824:	d9800204 	addi	r6,sp,8
    c828:	000e3c40 	call	e3c4 <__hexnan>
    c82c:	00c00144 	movi	r3,5
    c830:	10ffeb1e 	bne	r2,r3,c7e0 <_strtod_r+0x14ac>
    c834:	d8800317 	ldw	r2,12(sp)
    c838:	109ffc34 	orhi	r2,r2,32752
    c83c:	d8800715 	stw	r2,28(sp)
    c840:	d8800217 	ldw	r2,8(sp)
    c844:	d8800615 	stw	r2,24(sp)
    c848:	003c5f06 	br	b9c8 <_strtod_r+0x694>
    c84c:	00ffffc4 	movi	r3,-1
    c850:	1884983a 	sll	r2,r3,r2
    c854:	d8c00617 	ldw	r3,24(sp)
    c858:	1884703a 	and	r2,r3,r2
    c85c:	d8800615 	stw	r2,24(sp)
    c860:	003f3c06 	br	c554 <_strtod_r+0x1220>
    c864:	10bff804 	addi	r2,r2,-32
    c868:	013fffc4 	movi	r4,-1
    c86c:	2084983a 	sll	r2,r4,r2
    c870:	10c6703a 	and	r3,r2,r3
    c874:	d8c00715 	stw	r3,28(sp)
    c878:	003f3606 	br	c554 <_strtod_r+0x1220>

0000c87c <strtod>:
    c87c:	00c00074 	movhi	r3,1
    c880:	18d8ae04 	addi	r3,r3,25272
    c884:	2005883a 	mov	r2,r4
    c888:	19000017 	ldw	r4,0(r3)
    c88c:	280d883a 	mov	r6,r5
    c890:	100b883a 	mov	r5,r2
    c894:	000b3341 	jmpi	b334 <_strtod_r>

0000c898 <strtof>:
    c898:	defffb04 	addi	sp,sp,-20
    c89c:	dcc00315 	stw	r19,12(sp)
    c8a0:	04c00074 	movhi	r19,1
    c8a4:	9cd8ae04 	addi	r19,r19,25272
    c8a8:	2005883a 	mov	r2,r4
    c8ac:	99000017 	ldw	r4,0(r19)
    c8b0:	280d883a 	mov	r6,r5
    c8b4:	100b883a 	mov	r5,r2
    c8b8:	dfc00415 	stw	ra,16(sp)
    c8bc:	dc800215 	stw	r18,8(sp)
    c8c0:	dc400115 	stw	r17,4(sp)
    c8c4:	dc000015 	stw	r16,0(sp)
    c8c8:	000b3340 	call	b334 <_strtod_r>
    c8cc:	1009883a 	mov	r4,r2
    c8d0:	180b883a 	mov	r5,r3
    c8d4:	1025883a 	mov	r18,r2
    c8d8:	1823883a 	mov	r17,r3
    c8dc:	00101e00 	call	101e0 <__truncdfsf2>
    c8e0:	1009883a 	mov	r4,r2
    c8e4:	000b883a 	mov	r5,zero
    c8e8:	1021883a 	mov	r16,r2
    c8ec:	000f45c0 	call	f45c <__eqsf2>
    c8f0:	1000111e 	bne	r2,zero,c938 <strtof+0xa0>
    c8f4:	9009883a 	mov	r4,r18
    c8f8:	880b883a 	mov	r5,r17
    c8fc:	000d883a 	mov	r6,zero
    c900:	000f883a 	mov	r7,zero
    c904:	000fe5c0 	call	fe5c <__nedf2>
    c908:	10000b26 	beq	r2,zero,c938 <strtof+0xa0>
    c90c:	98800017 	ldw	r2,0(r19)
    c910:	00c00884 	movi	r3,34
    c914:	10c00015 	stw	r3,0(r2)
    c918:	8005883a 	mov	r2,r16
    c91c:	dfc00417 	ldw	ra,16(sp)
    c920:	dcc00317 	ldw	r19,12(sp)
    c924:	dc800217 	ldw	r18,8(sp)
    c928:	dc400117 	ldw	r17,4(sp)
    c92c:	dc000017 	ldw	r16,0(sp)
    c930:	dec00504 	addi	sp,sp,20
    c934:	f800283a 	ret
    c938:	8009883a 	mov	r4,r16
    c93c:	015fe034 	movhi	r5,32640
    c940:	297fffc4 	addi	r5,r5,-1
    c944:	000f4b00 	call	f4b0 <__gtsf2>
    c948:	0080070e 	bge	zero,r2,c968 <strtof+0xd0>
    c94c:	9009883a 	mov	r4,r18
    c950:	880b883a 	mov	r5,r17
    c954:	01bfffc4 	movi	r6,-1
    c958:	01dffc34 	movhi	r7,32752
    c95c:	39ffffc4 	addi	r7,r7,-1
    c960:	000feb80 	call	feb8 <__gtdf2>
    c964:	00bfe90e 	bge	zero,r2,c90c <strtof+0x74>
    c968:	8009883a 	mov	r4,r16
    c96c:	017fe034 	movhi	r5,65408
    c970:	297fffc4 	addi	r5,r5,-1
    c974:	000f50c0 	call	f50c <__ltsf2>
    c978:	103fe70e 	bge	r2,zero,c918 <strtof+0x80>
    c97c:	9009883a 	mov	r4,r18
    c980:	880b883a 	mov	r5,r17
    c984:	01bfffc4 	movi	r6,-1
    c988:	01fffc34 	movhi	r7,65520
    c98c:	39ffffc4 	addi	r7,r7,-1
    c990:	000ff800 	call	ff80 <__ltdf2>
    c994:	103fdd0e 	bge	r2,zero,c90c <strtof+0x74>
    c998:	8005883a 	mov	r2,r16
    c99c:	dfc00417 	ldw	ra,16(sp)
    c9a0:	dcc00317 	ldw	r19,12(sp)
    c9a4:	dc800217 	ldw	r18,8(sp)
    c9a8:	dc400117 	ldw	r17,4(sp)
    c9ac:	dc000017 	ldw	r16,0(sp)
    c9b0:	dec00504 	addi	sp,sp,20
    c9b4:	f800283a 	ret

0000c9b8 <_strtol_r>:
    c9b8:	defff304 	addi	sp,sp,-52
    c9bc:	00800074 	movhi	r2,1
    c9c0:	1098b104 	addi	r2,r2,25284
    c9c4:	df000b15 	stw	fp,44(sp)
    c9c8:	17000017 	ldw	fp,0(r2)
    c9cc:	ddc00a15 	stw	r23,40(sp)
    c9d0:	dd000715 	stw	r20,28(sp)
    c9d4:	dcc00615 	stw	r19,24(sp)
    c9d8:	dc000315 	stw	r16,12(sp)
    c9dc:	dfc00c15 	stw	ra,48(sp)
    c9e0:	dd800915 	stw	r22,36(sp)
    c9e4:	dd400815 	stw	r21,32(sp)
    c9e8:	dc800515 	stw	r18,20(sp)
    c9ec:	dc400415 	stw	r17,16(sp)
    c9f0:	2827883a 	mov	r19,r5
    c9f4:	d9000215 	stw	r4,8(sp)
    c9f8:	3029883a 	mov	r20,r6
    c9fc:	382f883a 	mov	r23,r7
    ca00:	2821883a 	mov	r16,r5
    ca04:	84400007 	ldb	r17,0(r16)
    ca08:	84000044 	addi	r16,r16,1
    ca0c:	e445883a 	add	r2,fp,r17
    ca10:	10800003 	ldbu	r2,0(r2)
    ca14:	1080020c 	andi	r2,r2,8
    ca18:	10803fcc 	andi	r2,r2,255
    ca1c:	1080201c 	xori	r2,r2,128
    ca20:	10bfe004 	addi	r2,r2,-128
    ca24:	103ff71e 	bne	r2,zero,ca04 <_strtol_r+0x4c>
    ca28:	00800b44 	movi	r2,45
    ca2c:	88806d26 	beq	r17,r2,cbe4 <_strtol_r+0x22c>
    ca30:	00800ac4 	movi	r2,43
    ca34:	88807026 	beq	r17,r2,cbf8 <_strtol_r+0x240>
    ca38:	d8000015 	stw	zero,0(sp)
    ca3c:	b800471e 	bne	r23,zero,cb5c <_strtol_r+0x1a4>
    ca40:	00800c04 	movi	r2,48
    ca44:	88804926 	beq	r17,r2,cb6c <_strtol_r+0x1b4>
    ca48:	05c00284 	movi	r23,10
    ca4c:	b825883a 	mov	r18,r23
    ca50:	d9000017 	ldw	r4,0(sp)
    ca54:	20006026 	beq	r4,zero,cbd8 <_strtol_r+0x220>
    ca58:	05600034 	movhi	r21,32768
    ca5c:	a809883a 	mov	r4,r21
    ca60:	900b883a 	mov	r5,r18
    ca64:	00104840 	call	10484 <__umodsi3>
    ca68:	a809883a 	mov	r4,r21
    ca6c:	900b883a 	mov	r5,r18
    ca70:	d8800115 	stw	r2,4(sp)
    ca74:	001047c0 	call	1047c <__udivsi3>
    ca78:	e447883a 	add	r3,fp,r17
    ca7c:	18c00003 	ldbu	r3,0(r3)
    ca80:	102b883a 	mov	r21,r2
    ca84:	000d883a 	mov	r6,zero
    ca88:	1940010c 	andi	r5,r3,4
    ca8c:	29403fcc 	andi	r5,r5,255
    ca90:	2940201c 	xori	r5,r5,128
    ca94:	297fe004 	addi	r5,r5,-128
    ca98:	0009883a 	mov	r4,zero
    ca9c:	05bfffc4 	movi	r22,-1
    caa0:	28001226 	beq	r5,zero,caec <_strtol_r+0x134>
    caa4:	8c7ff404 	addi	r17,r17,-48
    caa8:	8dc0170e 	bge	r17,r23,cb08 <_strtol_r+0x150>
    caac:	35800626 	beq	r6,r22,cac8 <_strtol_r+0x110>
    cab0:	a9003a36 	bltu	r21,r4,cb9c <_strtol_r+0x1e4>
    cab4:	25403726 	beq	r4,r21,cb94 <_strtol_r+0x1dc>
    cab8:	900b883a 	mov	r5,r18
    cabc:	00015040 	call	1504 <__mulsi3>
    cac0:	8889883a 	add	r4,r17,r2
    cac4:	01800044 	movi	r6,1
    cac8:	84400007 	ldb	r17,0(r16)
    cacc:	84000044 	addi	r16,r16,1
    cad0:	e447883a 	add	r3,fp,r17
    cad4:	18c00003 	ldbu	r3,0(r3)
    cad8:	1940010c 	andi	r5,r3,4
    cadc:	29403fcc 	andi	r5,r5,255
    cae0:	2940201c 	xori	r5,r5,128
    cae4:	297fe004 	addi	r5,r5,-128
    cae8:	283fee1e 	bne	r5,zero,caa4 <_strtol_r+0xec>
    caec:	188000cc 	andi	r2,r3,3
    caf0:	10000526 	beq	r2,zero,cb08 <_strtol_r+0x150>
    caf4:	18c0004c 	andi	r3,r3,1
    caf8:	18002a26 	beq	r3,zero,cba4 <_strtol_r+0x1ec>
    cafc:	00800dc4 	movi	r2,55
    cb00:	88a3c83a 	sub	r17,r17,r2
    cb04:	8dffe916 	blt	r17,r23,caac <_strtol_r+0xf4>
    cb08:	00bfffc4 	movi	r2,-1
    cb0c:	30802826 	beq	r6,r2,cbb0 <_strtol_r+0x1f8>
    cb10:	d8800017 	ldw	r2,0(sp)
    cb14:	10000126 	beq	r2,zero,cb1c <_strtol_r+0x164>
    cb18:	0109c83a 	sub	r4,zero,r4
    cb1c:	2005883a 	mov	r2,r4
    cb20:	a0000226 	beq	r20,zero,cb2c <_strtol_r+0x174>
    cb24:	30002a1e 	bne	r6,zero,cbd0 <_strtol_r+0x218>
    cb28:	a4c00015 	stw	r19,0(r20)
    cb2c:	dfc00c17 	ldw	ra,48(sp)
    cb30:	df000b17 	ldw	fp,44(sp)
    cb34:	ddc00a17 	ldw	r23,40(sp)
    cb38:	dd800917 	ldw	r22,36(sp)
    cb3c:	dd400817 	ldw	r21,32(sp)
    cb40:	dd000717 	ldw	r20,28(sp)
    cb44:	dcc00617 	ldw	r19,24(sp)
    cb48:	dc800517 	ldw	r18,20(sp)
    cb4c:	dc400417 	ldw	r17,16(sp)
    cb50:	dc000317 	ldw	r16,12(sp)
    cb54:	dec00d04 	addi	sp,sp,52
    cb58:	f800283a 	ret
    cb5c:	00800404 	movi	r2,16
    cb60:	b8bfba1e 	bne	r23,r2,ca4c <_strtol_r+0x94>
    cb64:	00800c04 	movi	r2,48
    cb68:	88bfb81e 	bne	r17,r2,ca4c <_strtol_r+0x94>
    cb6c:	80800007 	ldb	r2,0(r16)
    cb70:	00c01e04 	movi	r3,120
    cb74:	10c02626 	beq	r2,r3,cc10 <_strtol_r+0x258>
    cb78:	00c01604 	movi	r3,88
    cb7c:	10c02426 	beq	r2,r3,cc10 <_strtol_r+0x258>
    cb80:	b800281e 	bne	r23,zero,cc24 <_strtol_r+0x26c>
    cb84:	04800204 	movi	r18,8
    cb88:	04400c04 	movi	r17,48
    cb8c:	902f883a 	mov	r23,r18
    cb90:	003faf06 	br	ca50 <_strtol_r+0x98>
    cb94:	d8800117 	ldw	r2,4(sp)
    cb98:	147fc70e 	bge	r2,r17,cab8 <_strtol_r+0x100>
    cb9c:	01bfffc4 	movi	r6,-1
    cba0:	003fc906 	br	cac8 <_strtol_r+0x110>
    cba4:	008015c4 	movi	r2,87
    cba8:	88a3c83a 	sub	r17,r17,r2
    cbac:	003fd506 	br	cb04 <_strtol_r+0x14c>
    cbb0:	d9000017 	ldw	r4,0(sp)
    cbb4:	2000141e 	bne	r4,zero,cc08 <_strtol_r+0x250>
    cbb8:	00a00034 	movhi	r2,32768
    cbbc:	10bfffc4 	addi	r2,r2,-1
    cbc0:	d9000217 	ldw	r4,8(sp)
    cbc4:	00c00884 	movi	r3,34
    cbc8:	20c00015 	stw	r3,0(r4)
    cbcc:	a03fd726 	beq	r20,zero,cb2c <_strtol_r+0x174>
    cbd0:	84ffffc4 	addi	r19,r16,-1
    cbd4:	003fd406 	br	cb28 <_strtol_r+0x170>
    cbd8:	05600034 	movhi	r21,32768
    cbdc:	ad7fffc4 	addi	r21,r21,-1
    cbe0:	003f9e06 	br	ca5c <_strtol_r+0xa4>
    cbe4:	00800044 	movi	r2,1
    cbe8:	84400007 	ldb	r17,0(r16)
    cbec:	d8800015 	stw	r2,0(sp)
    cbf0:	80a1883a 	add	r16,r16,r2
    cbf4:	003f9106 	br	ca3c <_strtol_r+0x84>
    cbf8:	84400007 	ldb	r17,0(r16)
    cbfc:	d8000015 	stw	zero,0(sp)
    cc00:	84000044 	addi	r16,r16,1
    cc04:	003f8d06 	br	ca3c <_strtol_r+0x84>
    cc08:	00a00034 	movhi	r2,32768
    cc0c:	003fec06 	br	cbc0 <_strtol_r+0x208>
    cc10:	04800404 	movi	r18,16
    cc14:	84400047 	ldb	r17,1(r16)
    cc18:	902f883a 	mov	r23,r18
    cc1c:	84000084 	addi	r16,r16,2
    cc20:	003f8b06 	br	ca50 <_strtol_r+0x98>
    cc24:	b825883a 	mov	r18,r23
    cc28:	04400c04 	movi	r17,48
    cc2c:	003f8806 	br	ca50 <_strtol_r+0x98>

0000cc30 <strtol>:
    cc30:	00800074 	movhi	r2,1
    cc34:	1098ae04 	addi	r2,r2,25272
    cc38:	2007883a 	mov	r3,r4
    cc3c:	11000017 	ldw	r4,0(r2)
    cc40:	2805883a 	mov	r2,r5
    cc44:	300f883a 	mov	r7,r6
    cc48:	180b883a 	mov	r5,r3
    cc4c:	100d883a 	mov	r6,r2
    cc50:	000c9b81 	jmpi	c9b8 <_strtol_r>

0000cc54 <_strtoll_r>:
    cc54:	defff004 	addi	sp,sp,-64
    cc58:	00800074 	movhi	r2,1
    cc5c:	1098b104 	addi	r2,r2,25284
    cc60:	ddc00d15 	stw	r23,52(sp)
    cc64:	15c00017 	ldw	r23,0(r2)
    cc68:	df000e15 	stw	fp,56(sp)
    cc6c:	dc000615 	stw	r16,24(sp)
    cc70:	dfc00f15 	stw	ra,60(sp)
    cc74:	dd800c15 	stw	r22,48(sp)
    cc78:	dd400b15 	stw	r21,44(sp)
    cc7c:	dd000a15 	stw	r20,40(sp)
    cc80:	dcc00915 	stw	r19,36(sp)
    cc84:	dc800815 	stw	r18,32(sp)
    cc88:	dc400715 	stw	r17,28(sp)
    cc8c:	d9400015 	stw	r5,0(sp)
    cc90:	d9000415 	stw	r4,16(sp)
    cc94:	d9800115 	stw	r6,4(sp)
    cc98:	3839883a 	mov	fp,r7
    cc9c:	2821883a 	mov	r16,r5
    cca0:	82000007 	ldb	r8,0(r16)
    cca4:	84000044 	addi	r16,r16,1
    cca8:	ba05883a 	add	r2,r23,r8
    ccac:	10800003 	ldbu	r2,0(r2)
    ccb0:	1080020c 	andi	r2,r2,8
    ccb4:	10803fcc 	andi	r2,r2,255
    ccb8:	1080201c 	xori	r2,r2,128
    ccbc:	10bfe004 	addi	r2,r2,-128
    ccc0:	103ff71e 	bne	r2,zero,cca0 <_strtoll_r+0x4c>
    ccc4:	00800b44 	movi	r2,45
    ccc8:	40807a26 	beq	r8,r2,ceb4 <_strtoll_r+0x260>
    cccc:	00800ac4 	movi	r2,43
    ccd0:	40808826 	beq	r8,r2,cef4 <_strtoll_r+0x2a0>
    ccd4:	d8000215 	stw	zero,8(sp)
    ccd8:	e000061e 	bne	fp,zero,ccf4 <_strtoll_r+0xa0>
    ccdc:	00800c04 	movi	r2,48
    cce0:	40808b26 	beq	r8,r2,cf10 <_strtoll_r+0x2bc>
    cce4:	04800284 	movi	r18,10
    cce8:	0027883a 	mov	r19,zero
    ccec:	9039883a 	mov	fp,r18
    ccf0:	00000406 	br	cd04 <_strtoll_r+0xb0>
    ccf4:	00800404 	movi	r2,16
    ccf8:	e0809926 	beq	fp,r2,cf60 <_strtoll_r+0x30c>
    ccfc:	e027d7fa 	srai	r19,fp,31
    cd00:	e025883a 	mov	r18,fp
    cd04:	d9000217 	ldw	r4,8(sp)
    cd08:	20006226 	beq	r4,zero,ce94 <_strtoll_r+0x240>
    cd0c:	002b883a 	mov	r21,zero
    cd10:	04600034 	movhi	r17,32768
    cd14:	a809883a 	mov	r4,r21
    cd18:	880b883a 	mov	r5,r17
    cd1c:	900d883a 	mov	r6,r18
    cd20:	980f883a 	mov	r7,r19
    cd24:	da000515 	stw	r8,20(sp)
    cd28:	000ee340 	call	ee34 <__umoddi3>
    cd2c:	a809883a 	mov	r4,r21
    cd30:	880b883a 	mov	r5,r17
    cd34:	900d883a 	mov	r6,r18
    cd38:	980f883a 	mov	r7,r19
    cd3c:	d8800315 	stw	r2,12(sp)
    cd40:	000e7e40 	call	e7e4 <__udivdi3>
    cd44:	da000517 	ldw	r8,20(sp)
    cd48:	182b883a 	mov	r21,r3
    cd4c:	1023883a 	mov	r17,r2
    cd50:	ba0d883a 	add	r6,r23,r8
    cd54:	31800003 	ldbu	r6,0(r6)
    cd58:	0007883a 	mov	r3,zero
    cd5c:	0009883a 	mov	r4,zero
    cd60:	3240010c 	andi	r9,r6,4
    cd64:	4a403fcc 	andi	r9,r9,255
    cd68:	4a40201c 	xori	r9,r9,128
    cd6c:	4a7fe004 	addi	r9,r9,-128
    cd70:	000b883a 	mov	r5,zero
    cd74:	05bfffc4 	movi	r22,-1
    cd78:	48001026 	beq	r9,zero,cdbc <_strtoll_r+0x168>
    cd7c:	453ff404 	addi	r20,r8,-48
    cd80:	a700150e 	bge	r20,fp,cdd8 <_strtoll_r+0x184>
    cd84:	1d800426 	beq	r3,r22,cd98 <_strtoll_r+0x144>
    cd88:	a9400236 	bltu	r21,r5,cd94 <_strtoll_r+0x140>
    cd8c:	2d402e1e 	bne	r5,r21,ce48 <_strtoll_r+0x1f4>
    cd90:	89002d2e 	bgeu	r17,r4,ce48 <_strtoll_r+0x1f4>
    cd94:	00ffffc4 	movi	r3,-1
    cd98:	82000007 	ldb	r8,0(r16)
    cd9c:	84000044 	addi	r16,r16,1
    cda0:	ba0d883a 	add	r6,r23,r8
    cda4:	31800003 	ldbu	r6,0(r6)
    cda8:	3240010c 	andi	r9,r6,4
    cdac:	4a403fcc 	andi	r9,r9,255
    cdb0:	4a40201c 	xori	r9,r9,128
    cdb4:	4a7fe004 	addi	r9,r9,-128
    cdb8:	483ff01e 	bne	r9,zero,cd7c <_strtoll_r+0x128>
    cdbc:	308000cc 	andi	r2,r6,3
    cdc0:	10000526 	beq	r2,zero,cdd8 <_strtoll_r+0x184>
    cdc4:	3180004c 	andi	r6,r6,1
    cdc8:	30002b26 	beq	r6,zero,ce78 <_strtoll_r+0x224>
    cdcc:	00800dc4 	movi	r2,55
    cdd0:	40a9c83a 	sub	r20,r8,r2
    cdd4:	a73feb16 	blt	r20,fp,cd84 <_strtoll_r+0x130>
    cdd8:	00bfffc4 	movi	r2,-1
    cddc:	18803a26 	beq	r3,r2,cec8 <_strtoll_r+0x274>
    cde0:	d8800217 	ldw	r2,8(sp)
    cde4:	10000426 	beq	r2,zero,cdf8 <_strtoll_r+0x1a4>
    cde8:	0109c83a 	sub	r4,zero,r4
    cdec:	2004c03a 	cmpne	r2,r4,zero
    cdf0:	014bc83a 	sub	r5,zero,r5
    cdf4:	288bc83a 	sub	r5,r5,r2
    cdf8:	d8800117 	ldw	r2,4(sp)
    cdfc:	10004f26 	beq	r2,zero,cf3c <_strtoll_r+0x2e8>
    ce00:	2005883a 	mov	r2,r4
    ce04:	1800271e 	bne	r3,zero,cea4 <_strtoll_r+0x250>
    ce08:	2807883a 	mov	r3,r5
    ce0c:	d9400017 	ldw	r5,0(sp)
    ce10:	d9000117 	ldw	r4,4(sp)
    ce14:	21400015 	stw	r5,0(r4)
    ce18:	dfc00f17 	ldw	ra,60(sp)
    ce1c:	df000e17 	ldw	fp,56(sp)
    ce20:	ddc00d17 	ldw	r23,52(sp)
    ce24:	dd800c17 	ldw	r22,48(sp)
    ce28:	dd400b17 	ldw	r21,44(sp)
    ce2c:	dd000a17 	ldw	r20,40(sp)
    ce30:	dcc00917 	ldw	r19,36(sp)
    ce34:	dc800817 	ldw	r18,32(sp)
    ce38:	dc400717 	ldw	r17,28(sp)
    ce3c:	dc000617 	ldw	r16,24(sp)
    ce40:	dec01004 	addi	sp,sp,64
    ce44:	f800283a 	ret
    ce48:	24400e26 	beq	r4,r17,ce84 <_strtoll_r+0x230>
    ce4c:	900d883a 	mov	r6,r18
    ce50:	980f883a 	mov	r7,r19
    ce54:	000e6500 	call	e650 <__muldi3>
    ce58:	a00dd7fa 	srai	r6,r20,31
    ce5c:	a085883a 	add	r2,r20,r2
    ce60:	1511803a 	cmpltu	r8,r2,r20
    ce64:	30c7883a 	add	r3,r6,r3
    ce68:	40cb883a 	add	r5,r8,r3
    ce6c:	1009883a 	mov	r4,r2
    ce70:	00c00044 	movi	r3,1
    ce74:	003fc806 	br	cd98 <_strtoll_r+0x144>
    ce78:	008015c4 	movi	r2,87
    ce7c:	40a9c83a 	sub	r20,r8,r2
    ce80:	003fd406 	br	cdd4 <_strtoll_r+0x180>
    ce84:	2d7ff11e 	bne	r5,r21,ce4c <_strtoll_r+0x1f8>
    ce88:	d8800317 	ldw	r2,12(sp)
    ce8c:	153fc116 	blt	r2,r20,cd94 <_strtoll_r+0x140>
    ce90:	003fee06 	br	ce4c <_strtoll_r+0x1f8>
    ce94:	057fffc4 	movi	r21,-1
    ce98:	04600034 	movhi	r17,32768
    ce9c:	8c7fffc4 	addi	r17,r17,-1
    cea0:	003f9c06 	br	cd14 <_strtoll_r+0xc0>
    cea4:	2807883a 	mov	r3,r5
    cea8:	843fffc4 	addi	r16,r16,-1
    ceac:	dc000015 	stw	r16,0(sp)
    ceb0:	003fd606 	br	ce0c <_strtoll_r+0x1b8>
    ceb4:	00800044 	movi	r2,1
    ceb8:	82000007 	ldb	r8,0(r16)
    cebc:	d8800215 	stw	r2,8(sp)
    cec0:	80a1883a 	add	r16,r16,r2
    cec4:	003f8406 	br	ccd8 <_strtoll_r+0x84>
    cec8:	d9000217 	ldw	r4,8(sp)
    cecc:	20000d1e 	bne	r4,zero,cf04 <_strtoll_r+0x2b0>
    ced0:	1805883a 	mov	r2,r3
    ced4:	00e00034 	movhi	r3,32768
    ced8:	18ffffc4 	addi	r3,r3,-1
    cedc:	d9400417 	ldw	r5,16(sp)
    cee0:	01000884 	movi	r4,34
    cee4:	29000015 	stw	r4,0(r5)
    cee8:	d9000117 	ldw	r4,4(sp)
    ceec:	203fee1e 	bne	r4,zero,cea8 <_strtoll_r+0x254>
    cef0:	003fc906 	br	ce18 <_strtoll_r+0x1c4>
    cef4:	82000007 	ldb	r8,0(r16)
    cef8:	d8000215 	stw	zero,8(sp)
    cefc:	84000044 	addi	r16,r16,1
    cf00:	003f7506 	br	ccd8 <_strtoll_r+0x84>
    cf04:	0005883a 	mov	r2,zero
    cf08:	00e00034 	movhi	r3,32768
    cf0c:	003ff306 	br	cedc <_strtoll_r+0x288>
    cf10:	80800007 	ldb	r2,0(r16)
    cf14:	00c01e04 	movi	r3,120
    cf18:	10c00b26 	beq	r2,r3,cf48 <_strtoll_r+0x2f4>
    cf1c:	00c01604 	movi	r3,88
    cf20:	10c00926 	beq	r2,r3,cf48 <_strtoll_r+0x2f4>
    cf24:	e000131e 	bne	fp,zero,cf74 <_strtoll_r+0x320>
    cf28:	04800204 	movi	r18,8
    cf2c:	0027883a 	mov	r19,zero
    cf30:	02000c04 	movi	r8,48
    cf34:	9039883a 	mov	fp,r18
    cf38:	003f7206 	br	cd04 <_strtoll_r+0xb0>
    cf3c:	2005883a 	mov	r2,r4
    cf40:	2807883a 	mov	r3,r5
    cf44:	003fb406 	br	ce18 <_strtoll_r+0x1c4>
    cf48:	04800404 	movi	r18,16
    cf4c:	82000047 	ldb	r8,1(r16)
    cf50:	0027883a 	mov	r19,zero
    cf54:	84000084 	addi	r16,r16,2
    cf58:	9039883a 	mov	fp,r18
    cf5c:	003f6906 	br	cd04 <_strtoll_r+0xb0>
    cf60:	00800c04 	movi	r2,48
    cf64:	40bfea26 	beq	r8,r2,cf10 <_strtoll_r+0x2bc>
    cf68:	e025883a 	mov	r18,fp
    cf6c:	0027883a 	mov	r19,zero
    cf70:	003f6406 	br	cd04 <_strtoll_r+0xb0>
    cf74:	e025883a 	mov	r18,fp
    cf78:	e027d7fa 	srai	r19,fp,31
    cf7c:	02000c04 	movi	r8,48
    cf80:	003f6006 	br	cd04 <_strtoll_r+0xb0>

0000cf84 <_strtoul_r>:
    cf84:	defff304 	addi	sp,sp,-52
    cf88:	00800074 	movhi	r2,1
    cf8c:	1098b104 	addi	r2,r2,25284
    cf90:	df000b15 	stw	fp,44(sp)
    cf94:	17000017 	ldw	fp,0(r2)
    cf98:	ddc00a15 	stw	r23,40(sp)
    cf9c:	dd000715 	stw	r20,28(sp)
    cfa0:	dcc00615 	stw	r19,24(sp)
    cfa4:	dc000315 	stw	r16,12(sp)
    cfa8:	dfc00c15 	stw	ra,48(sp)
    cfac:	dd800915 	stw	r22,36(sp)
    cfb0:	dd400815 	stw	r21,32(sp)
    cfb4:	dc800515 	stw	r18,20(sp)
    cfb8:	dc400415 	stw	r17,16(sp)
    cfbc:	2827883a 	mov	r19,r5
    cfc0:	d9000215 	stw	r4,8(sp)
    cfc4:	3029883a 	mov	r20,r6
    cfc8:	382f883a 	mov	r23,r7
    cfcc:	2821883a 	mov	r16,r5
    cfd0:	84400007 	ldb	r17,0(r16)
    cfd4:	84000044 	addi	r16,r16,1
    cfd8:	e445883a 	add	r2,fp,r17
    cfdc:	10800003 	ldbu	r2,0(r2)
    cfe0:	1080020c 	andi	r2,r2,8
    cfe4:	10803fcc 	andi	r2,r2,255
    cfe8:	1080201c 	xori	r2,r2,128
    cfec:	10bfe004 	addi	r2,r2,-128
    cff0:	103ff71e 	bne	r2,zero,cfd0 <_strtoul_r+0x4c>
    cff4:	00800b44 	movi	r2,45
    cff8:	88805e26 	beq	r17,r2,d174 <_strtoul_r+0x1f0>
    cffc:	00800ac4 	movi	r2,43
    d000:	88806126 	beq	r17,r2,d188 <_strtoul_r+0x204>
    d004:	d8000115 	stw	zero,4(sp)
    d008:	b800091e 	bne	r23,zero,d030 <_strtoul_r+0xac>
    d00c:	00800c04 	movi	r2,48
    d010:	88806326 	beq	r17,r2,d1a0 <_strtoul_r+0x21c>
    d014:	05c00284 	movi	r23,10
    d018:	00800144 	movi	r2,5
    d01c:	d8800015 	stw	r2,0(sp)
    d020:	058666b4 	movhi	r22,6554
    d024:	b5a66644 	addi	r22,r22,-26215
    d028:	b825883a 	mov	r18,r23
    d02c:	00000b06 	br	d05c <_strtoul_r+0xd8>
    d030:	00800404 	movi	r2,16
    d034:	b8805826 	beq	r23,r2,d198 <_strtoul_r+0x214>
    d038:	013fffc4 	movi	r4,-1
    d03c:	b80b883a 	mov	r5,r23
    d040:	001047c0 	call	1047c <__udivsi3>
    d044:	013fffc4 	movi	r4,-1
    d048:	b80b883a 	mov	r5,r23
    d04c:	102d883a 	mov	r22,r2
    d050:	00104840 	call	10484 <__umodsi3>
    d054:	d8800015 	stw	r2,0(sp)
    d058:	b825883a 	mov	r18,r23
    d05c:	e447883a 	add	r3,fp,r17
    d060:	18c00003 	ldbu	r3,0(r3)
    d064:	0011883a 	mov	r8,zero
    d068:	0009883a 	mov	r4,zero
    d06c:	1980010c 	andi	r6,r3,4
    d070:	31803fcc 	andi	r6,r6,255
    d074:	3180201c 	xori	r6,r6,128
    d078:	31bfe004 	addi	r6,r6,-128
    d07c:	057fffc4 	movi	r21,-1
    d080:	30001226 	beq	r6,zero,d0cc <_strtoul_r+0x148>
    d084:	8c7ff404 	addi	r17,r17,-48
    d088:	8dc0170e 	bge	r17,r23,d0e8 <_strtoul_r+0x164>
    d08c:	45400626 	beq	r8,r21,d0a8 <_strtoul_r+0x124>
    d090:	b1002c36 	bltu	r22,r4,d144 <_strtoul_r+0x1c0>
    d094:	25802926 	beq	r4,r22,d13c <_strtoul_r+0x1b8>
    d098:	900b883a 	mov	r5,r18
    d09c:	00015040 	call	1504 <__mulsi3>
    d0a0:	8889883a 	add	r4,r17,r2
    d0a4:	02000044 	movi	r8,1
    d0a8:	84400007 	ldb	r17,0(r16)
    d0ac:	84000044 	addi	r16,r16,1
    d0b0:	e447883a 	add	r3,fp,r17
    d0b4:	18c00003 	ldbu	r3,0(r3)
    d0b8:	1980010c 	andi	r6,r3,4
    d0bc:	31803fcc 	andi	r6,r6,255
    d0c0:	3180201c 	xori	r6,r6,128
    d0c4:	31bfe004 	addi	r6,r6,-128
    d0c8:	303fee1e 	bne	r6,zero,d084 <_strtoul_r+0x100>
    d0cc:	188000cc 	andi	r2,r3,3
    d0d0:	10000526 	beq	r2,zero,d0e8 <_strtoul_r+0x164>
    d0d4:	18c0004c 	andi	r3,r3,1
    d0d8:	18001c26 	beq	r3,zero,d14c <_strtoul_r+0x1c8>
    d0dc:	00800dc4 	movi	r2,55
    d0e0:	88a3c83a 	sub	r17,r17,r2
    d0e4:	8dffe916 	blt	r17,r23,d08c <_strtoul_r+0x108>
    d0e8:	00bfffc4 	movi	r2,-1
    d0ec:	40801a26 	beq	r8,r2,d158 <_strtoul_r+0x1d4>
    d0f0:	d8c00117 	ldw	r3,4(sp)
    d0f4:	18000126 	beq	r3,zero,d0fc <_strtoul_r+0x178>
    d0f8:	0109c83a 	sub	r4,zero,r4
    d0fc:	a0000226 	beq	r20,zero,d108 <_strtoul_r+0x184>
    d100:	40001a1e 	bne	r8,zero,d16c <_strtoul_r+0x1e8>
    d104:	a4c00015 	stw	r19,0(r20)
    d108:	2005883a 	mov	r2,r4
    d10c:	dfc00c17 	ldw	ra,48(sp)
    d110:	df000b17 	ldw	fp,44(sp)
    d114:	ddc00a17 	ldw	r23,40(sp)
    d118:	dd800917 	ldw	r22,36(sp)
    d11c:	dd400817 	ldw	r21,32(sp)
    d120:	dd000717 	ldw	r20,28(sp)
    d124:	dcc00617 	ldw	r19,24(sp)
    d128:	dc800517 	ldw	r18,20(sp)
    d12c:	dc400417 	ldw	r17,16(sp)
    d130:	dc000317 	ldw	r16,12(sp)
    d134:	dec00d04 	addi	sp,sp,52
    d138:	f800283a 	ret
    d13c:	d8800017 	ldw	r2,0(sp)
    d140:	147fd50e 	bge	r2,r17,d098 <_strtoul_r+0x114>
    d144:	023fffc4 	movi	r8,-1
    d148:	003fd706 	br	d0a8 <_strtoul_r+0x124>
    d14c:	008015c4 	movi	r2,87
    d150:	88a3c83a 	sub	r17,r17,r2
    d154:	003fe306 	br	d0e4 <_strtoul_r+0x160>
    d158:	d8c00217 	ldw	r3,8(sp)
    d15c:	00800884 	movi	r2,34
    d160:	4009883a 	mov	r4,r8
    d164:	18800015 	stw	r2,0(r3)
    d168:	a03fe726 	beq	r20,zero,d108 <_strtoul_r+0x184>
    d16c:	84ffffc4 	addi	r19,r16,-1
    d170:	003fe406 	br	d104 <_strtoul_r+0x180>
    d174:	00c00044 	movi	r3,1
    d178:	84400007 	ldb	r17,0(r16)
    d17c:	d8c00115 	stw	r3,4(sp)
    d180:	80e1883a 	add	r16,r16,r3
    d184:	003fa006 	br	d008 <_strtoul_r+0x84>
    d188:	84400007 	ldb	r17,0(r16)
    d18c:	d8000115 	stw	zero,4(sp)
    d190:	84000044 	addi	r16,r16,1
    d194:	003f9c06 	br	d008 <_strtoul_r+0x84>
    d198:	00800c04 	movi	r2,48
    d19c:	88bfa61e 	bne	r17,r2,d038 <_strtoul_r+0xb4>
    d1a0:	80800007 	ldb	r2,0(r16)
    d1a4:	00c01e04 	movi	r3,120
    d1a8:	10c00b26 	beq	r2,r3,d1d8 <_strtoul_r+0x254>
    d1ac:	00c01604 	movi	r3,88
    d1b0:	10c00926 	beq	r2,r3,d1d8 <_strtoul_r+0x254>
    d1b4:	b800111e 	bne	r23,zero,d1fc <_strtoul_r+0x278>
    d1b8:	04800204 	movi	r18,8
    d1bc:	008001c4 	movi	r2,7
    d1c0:	d8800015 	stw	r2,0(sp)
    d1c4:	05880034 	movhi	r22,8192
    d1c8:	b5bfffc4 	addi	r22,r22,-1
    d1cc:	04400c04 	movi	r17,48
    d1d0:	902f883a 	mov	r23,r18
    d1d4:	003fa106 	br	d05c <_strtoul_r+0xd8>
    d1d8:	04800404 	movi	r18,16
    d1dc:	008003c4 	movi	r2,15
    d1e0:	84400047 	ldb	r17,1(r16)
    d1e4:	d8800015 	stw	r2,0(sp)
    d1e8:	84000084 	addi	r16,r16,2
    d1ec:	05840034 	movhi	r22,4096
    d1f0:	b5bfffc4 	addi	r22,r22,-1
    d1f4:	902f883a 	mov	r23,r18
    d1f8:	003f9806 	br	d05c <_strtoul_r+0xd8>
    d1fc:	013fffc4 	movi	r4,-1
    d200:	b80b883a 	mov	r5,r23
    d204:	001047c0 	call	1047c <__udivsi3>
    d208:	013fffc4 	movi	r4,-1
    d20c:	b80b883a 	mov	r5,r23
    d210:	102d883a 	mov	r22,r2
    d214:	00104840 	call	10484 <__umodsi3>
    d218:	d8800015 	stw	r2,0(sp)
    d21c:	b825883a 	mov	r18,r23
    d220:	04400c04 	movi	r17,48
    d224:	003f8d06 	br	d05c <_strtoul_r+0xd8>

0000d228 <strtoul>:
    d228:	00800074 	movhi	r2,1
    d22c:	1098ae04 	addi	r2,r2,25272
    d230:	2007883a 	mov	r3,r4
    d234:	11000017 	ldw	r4,0(r2)
    d238:	2805883a 	mov	r2,r5
    d23c:	300f883a 	mov	r7,r6
    d240:	180b883a 	mov	r5,r3
    d244:	100d883a 	mov	r6,r2
    d248:	000cf841 	jmpi	cf84 <_strtoul_r>

0000d24c <_strtoull_r>:
    d24c:	defff004 	addi	sp,sp,-64
    d250:	00800074 	movhi	r2,1
    d254:	1098b104 	addi	r2,r2,25284
    d258:	dd800c15 	stw	r22,48(sp)
    d25c:	15800017 	ldw	r22,0(r2)
    d260:	df000e15 	stw	fp,56(sp)
    d264:	dc000615 	stw	r16,24(sp)
    d268:	dfc00f15 	stw	ra,60(sp)
    d26c:	ddc00d15 	stw	r23,52(sp)
    d270:	dd400b15 	stw	r21,44(sp)
    d274:	dd000a15 	stw	r20,40(sp)
    d278:	dcc00915 	stw	r19,36(sp)
    d27c:	dc800815 	stw	r18,32(sp)
    d280:	dc400715 	stw	r17,28(sp)
    d284:	d9400015 	stw	r5,0(sp)
    d288:	d9000415 	stw	r4,16(sp)
    d28c:	d9800115 	stw	r6,4(sp)
    d290:	3839883a 	mov	fp,r7
    d294:	2821883a 	mov	r16,r5
    d298:	82000007 	ldb	r8,0(r16)
    d29c:	84000044 	addi	r16,r16,1
    d2a0:	b205883a 	add	r2,r22,r8
    d2a4:	10800003 	ldbu	r2,0(r2)
    d2a8:	1080020c 	andi	r2,r2,8
    d2ac:	10803fcc 	andi	r2,r2,255
    d2b0:	1080201c 	xori	r2,r2,128
    d2b4:	10bfe004 	addi	r2,r2,-128
    d2b8:	103ff71e 	bne	r2,zero,d298 <_strtoull_r+0x4c>
    d2bc:	00800b44 	movi	r2,45
    d2c0:	40807e26 	beq	r8,r2,d4bc <_strtoull_r+0x270>
    d2c4:	00800ac4 	movi	r2,43
    d2c8:	40808126 	beq	r8,r2,d4d0 <_strtoull_r+0x284>
    d2cc:	d8000315 	stw	zero,12(sp)
    d2d0:	e0000c1e 	bne	fp,zero,d304 <_strtoull_r+0xb8>
    d2d4:	00800c04 	movi	r2,48
    d2d8:	40808126 	beq	r8,r2,d4e0 <_strtoull_r+0x294>
    d2dc:	04c00284 	movi	r19,10
    d2e0:	00800144 	movi	r2,5
    d2e4:	d8800215 	stw	r2,8(sp)
    d2e8:	046666b4 	movhi	r17,39322
    d2ec:	8c666644 	addi	r17,r17,-26215
    d2f0:	05c666b4 	movhi	r23,6554
    d2f4:	bde66644 	addi	r23,r23,-26215
    d2f8:	0025883a 	mov	r18,zero
    d2fc:	9839883a 	mov	fp,r19
    d300:	00001306 	br	d350 <_strtoull_r+0x104>
    d304:	00800404 	movi	r2,16
    d308:	e0809026 	beq	fp,r2,d54c <_strtoull_r+0x300>
    d30c:	e025d7fa 	srai	r18,fp,31
    d310:	013fffc4 	movi	r4,-1
    d314:	200b883a 	mov	r5,r4
    d318:	e00d883a 	mov	r6,fp
    d31c:	900f883a 	mov	r7,r18
    d320:	da000515 	stw	r8,20(sp)
    d324:	000e7e40 	call	e7e4 <__udivdi3>
    d328:	013fffc4 	movi	r4,-1
    d32c:	200b883a 	mov	r5,r4
    d330:	e00d883a 	mov	r6,fp
    d334:	900f883a 	mov	r7,r18
    d338:	1023883a 	mov	r17,r2
    d33c:	182f883a 	mov	r23,r3
    d340:	000ee340 	call	ee34 <__umoddi3>
    d344:	da000517 	ldw	r8,20(sp)
    d348:	d8800215 	stw	r2,8(sp)
    d34c:	e027883a 	mov	r19,fp
    d350:	b20d883a 	add	r6,r22,r8
    d354:	32400003 	ldbu	r9,0(r6)
    d358:	0007883a 	mov	r3,zero
    d35c:	0009883a 	mov	r4,zero
    d360:	4a80010c 	andi	r10,r9,4
    d364:	52803fcc 	andi	r10,r10,255
    d368:	5280201c 	xori	r10,r10,128
    d36c:	52bfe004 	addi	r10,r10,-128
    d370:	000b883a 	mov	r5,zero
    d374:	057fffc4 	movi	r21,-1
    d378:	50001026 	beq	r10,zero,d3bc <_strtoull_r+0x170>
    d37c:	453ff404 	addi	r20,r8,-48
    d380:	a700150e 	bge	r20,fp,d3d8 <_strtoull_r+0x18c>
    d384:	1d400426 	beq	r3,r21,d398 <_strtoull_r+0x14c>
    d388:	b9400236 	bltu	r23,r5,d394 <_strtoull_r+0x148>
    d38c:	2dc0301e 	bne	r5,r23,d450 <_strtoull_r+0x204>
    d390:	89002f2e 	bgeu	r17,r4,d450 <_strtoull_r+0x204>
    d394:	00ffffc4 	movi	r3,-1
    d398:	82000007 	ldb	r8,0(r16)
    d39c:	84000044 	addi	r16,r16,1
    d3a0:	b20d883a 	add	r6,r22,r8
    d3a4:	32400003 	ldbu	r9,0(r6)
    d3a8:	4a80010c 	andi	r10,r9,4
    d3ac:	52803fcc 	andi	r10,r10,255
    d3b0:	5280201c 	xori	r10,r10,128
    d3b4:	52bfe004 	addi	r10,r10,-128
    d3b8:	503ff01e 	bne	r10,zero,d37c <_strtoull_r+0x130>
    d3bc:	488000cc 	andi	r2,r9,3
    d3c0:	10000526 	beq	r2,zero,d3d8 <_strtoull_r+0x18c>
    d3c4:	4a40004c 	andi	r9,r9,1
    d3c8:	48002d26 	beq	r9,zero,d480 <_strtoull_r+0x234>
    d3cc:	00800dc4 	movi	r2,55
    d3d0:	40a9c83a 	sub	r20,r8,r2
    d3d4:	a73feb16 	blt	r20,fp,d384 <_strtoull_r+0x138>
    d3d8:	00bfffc4 	movi	r2,-1
    d3dc:	18802f26 	beq	r3,r2,d49c <_strtoull_r+0x250>
    d3e0:	d8800317 	ldw	r2,12(sp)
    d3e4:	10000426 	beq	r2,zero,d3f8 <_strtoull_r+0x1ac>
    d3e8:	0109c83a 	sub	r4,zero,r4
    d3ec:	2004c03a 	cmpne	r2,r4,zero
    d3f0:	014bc83a 	sub	r5,zero,r5
    d3f4:	288bc83a 	sub	r5,r5,r2
    d3f8:	d8800117 	ldw	r2,4(sp)
    d3fc:	10000626 	beq	r2,zero,d418 <_strtoull_r+0x1cc>
    d400:	18000226 	beq	r3,zero,d40c <_strtoull_r+0x1c0>
    d404:	843fffc4 	addi	r16,r16,-1
    d408:	dc000015 	stw	r16,0(sp)
    d40c:	d8800017 	ldw	r2,0(sp)
    d410:	d8c00117 	ldw	r3,4(sp)
    d414:	18800015 	stw	r2,0(r3)
    d418:	2005883a 	mov	r2,r4
    d41c:	2807883a 	mov	r3,r5
    d420:	dfc00f17 	ldw	ra,60(sp)
    d424:	df000e17 	ldw	fp,56(sp)
    d428:	ddc00d17 	ldw	r23,52(sp)
    d42c:	dd800c17 	ldw	r22,48(sp)
    d430:	dd400b17 	ldw	r21,44(sp)
    d434:	dd000a17 	ldw	r20,40(sp)
    d438:	dcc00917 	ldw	r19,36(sp)
    d43c:	dc800817 	ldw	r18,32(sp)
    d440:	dc400717 	ldw	r17,28(sp)
    d444:	dc000617 	ldw	r16,24(sp)
    d448:	dec01004 	addi	sp,sp,64
    d44c:	f800283a 	ret
    d450:	24400e26 	beq	r4,r17,d48c <_strtoull_r+0x240>
    d454:	980d883a 	mov	r6,r19
    d458:	900f883a 	mov	r7,r18
    d45c:	000e6500 	call	e650 <__muldi3>
    d460:	a00dd7fa 	srai	r6,r20,31
    d464:	a085883a 	add	r2,r20,r2
    d468:	1511803a 	cmpltu	r8,r2,r20
    d46c:	30c7883a 	add	r3,r6,r3
    d470:	40cb883a 	add	r5,r8,r3
    d474:	1009883a 	mov	r4,r2
    d478:	00c00044 	movi	r3,1
    d47c:	003fc606 	br	d398 <_strtoull_r+0x14c>
    d480:	008015c4 	movi	r2,87
    d484:	40a9c83a 	sub	r20,r8,r2
    d488:	003fd206 	br	d3d4 <_strtoull_r+0x188>
    d48c:	2dfff11e 	bne	r5,r23,d454 <_strtoull_r+0x208>
    d490:	d8800217 	ldw	r2,8(sp)
    d494:	153fbf16 	blt	r2,r20,d394 <_strtoull_r+0x148>
    d498:	003fee06 	br	d454 <_strtoull_r+0x208>
    d49c:	d9000417 	ldw	r4,16(sp)
    d4a0:	00800884 	movi	r2,34
    d4a4:	180b883a 	mov	r5,r3
    d4a8:	20800015 	stw	r2,0(r4)
    d4ac:	d8800117 	ldw	r2,4(sp)
    d4b0:	1809883a 	mov	r4,r3
    d4b4:	103fd31e 	bne	r2,zero,d404 <_strtoull_r+0x1b8>
    d4b8:	003fd706 	br	d418 <_strtoull_r+0x1cc>
    d4bc:	00800044 	movi	r2,1
    d4c0:	82000007 	ldb	r8,0(r16)
    d4c4:	d8800315 	stw	r2,12(sp)
    d4c8:	80a1883a 	add	r16,r16,r2
    d4cc:	003f8006 	br	d2d0 <_strtoull_r+0x84>
    d4d0:	82000007 	ldb	r8,0(r16)
    d4d4:	d8000315 	stw	zero,12(sp)
    d4d8:	84000044 	addi	r16,r16,1
    d4dc:	003f7c06 	br	d2d0 <_strtoull_r+0x84>
    d4e0:	80800007 	ldb	r2,0(r16)
    d4e4:	00c01e04 	movi	r3,120
    d4e8:	10c00d26 	beq	r2,r3,d520 <_strtoull_r+0x2d4>
    d4ec:	00c01604 	movi	r3,88
    d4f0:	10c00b26 	beq	r2,r3,d520 <_strtoull_r+0x2d4>
    d4f4:	e000291e 	bne	fp,zero,d59c <_strtoull_r+0x350>
    d4f8:	04c00204 	movi	r19,8
    d4fc:	008001c4 	movi	r2,7
    d500:	d8800215 	stw	r2,8(sp)
    d504:	047fffc4 	movi	r17,-1
    d508:	05c80034 	movhi	r23,8192
    d50c:	bdffffc4 	addi	r23,r23,-1
    d510:	0025883a 	mov	r18,zero
    d514:	02000c04 	movi	r8,48
    d518:	9839883a 	mov	fp,r19
    d51c:	003f8c06 	br	d350 <_strtoull_r+0x104>
    d520:	04c00404 	movi	r19,16
    d524:	008003c4 	movi	r2,15
    d528:	82000047 	ldb	r8,1(r16)
    d52c:	d8800215 	stw	r2,8(sp)
    d530:	84000084 	addi	r16,r16,2
    d534:	047fffc4 	movi	r17,-1
    d538:	05c40034 	movhi	r23,4096
    d53c:	bdffffc4 	addi	r23,r23,-1
    d540:	0025883a 	mov	r18,zero
    d544:	9839883a 	mov	fp,r19
    d548:	003f8106 	br	d350 <_strtoull_r+0x104>
    d54c:	00800c04 	movi	r2,48
    d550:	40bfe326 	beq	r8,r2,d4e0 <_strtoull_r+0x294>
    d554:	013fffc4 	movi	r4,-1
    d558:	200b883a 	mov	r5,r4
    d55c:	e00d883a 	mov	r6,fp
    d560:	000f883a 	mov	r7,zero
    d564:	da000515 	stw	r8,20(sp)
    d568:	000e7e40 	call	e7e4 <__udivdi3>
    d56c:	013fffc4 	movi	r4,-1
    d570:	200b883a 	mov	r5,r4
    d574:	e00d883a 	mov	r6,fp
    d578:	000f883a 	mov	r7,zero
    d57c:	1023883a 	mov	r17,r2
    d580:	182f883a 	mov	r23,r3
    d584:	000ee340 	call	ee34 <__umoddi3>
    d588:	d8800215 	stw	r2,8(sp)
    d58c:	e027883a 	mov	r19,fp
    d590:	0025883a 	mov	r18,zero
    d594:	da000517 	ldw	r8,20(sp)
    d598:	003f6d06 	br	d350 <_strtoull_r+0x104>
    d59c:	e025d7fa 	srai	r18,fp,31
    d5a0:	013fffc4 	movi	r4,-1
    d5a4:	200b883a 	mov	r5,r4
    d5a8:	e00d883a 	mov	r6,fp
    d5ac:	900f883a 	mov	r7,r18
    d5b0:	000e7e40 	call	e7e4 <__udivdi3>
    d5b4:	013fffc4 	movi	r4,-1
    d5b8:	200b883a 	mov	r5,r4
    d5bc:	e00d883a 	mov	r6,fp
    d5c0:	900f883a 	mov	r7,r18
    d5c4:	1023883a 	mov	r17,r2
    d5c8:	182f883a 	mov	r23,r3
    d5cc:	000ee340 	call	ee34 <__umoddi3>
    d5d0:	d8800215 	stw	r2,8(sp)
    d5d4:	e027883a 	mov	r19,fp
    d5d8:	02000c04 	movi	r8,48
    d5dc:	003f5c06 	br	d350 <_strtoull_r+0x104>

0000d5e0 <__submore>:
    d5e0:	defffa04 	addi	sp,sp,-24
    d5e4:	dc000015 	stw	r16,0(sp)
    d5e8:	2821883a 	mov	r16,r5
    d5ec:	29400c17 	ldw	r5,48(r5)
    d5f0:	dfc00515 	stw	ra,20(sp)
    d5f4:	dd000415 	stw	r20,16(sp)
    d5f8:	dcc00315 	stw	r19,12(sp)
    d5fc:	dc800215 	stw	r18,8(sp)
    d600:	dc400115 	stw	r17,4(sp)
    d604:	80801004 	addi	r2,r16,64
    d608:	28801726 	beq	r5,r2,d668 <__submore+0x88>
    d60c:	84400d17 	ldw	r17,52(r16)
    d610:	8c67883a 	add	r19,r17,r17
    d614:	980d883a 	mov	r6,r19
    d618:	000aaa00 	call	aaa0 <_realloc_r>
    d61c:	1025883a 	mov	r18,r2
    d620:	10002926 	beq	r2,zero,d6c8 <__submore+0xe8>
    d624:	1469883a 	add	r20,r2,r17
    d628:	a009883a 	mov	r4,r20
    d62c:	100b883a 	mov	r5,r2
    d630:	880d883a 	mov	r6,r17
    d634:	00033640 	call	3364 <memcpy>
    d638:	0005883a 	mov	r2,zero
    d63c:	85000015 	stw	r20,0(r16)
    d640:	84800c15 	stw	r18,48(r16)
    d644:	84c00d15 	stw	r19,52(r16)
    d648:	dfc00517 	ldw	ra,20(sp)
    d64c:	dd000417 	ldw	r20,16(sp)
    d650:	dcc00317 	ldw	r19,12(sp)
    d654:	dc800217 	ldw	r18,8(sp)
    d658:	dc400117 	ldw	r17,4(sp)
    d65c:	dc000017 	ldw	r16,0(sp)
    d660:	dec00604 	addi	sp,sp,24
    d664:	f800283a 	ret
    d668:	04410004 	movi	r17,1024
    d66c:	880b883a 	mov	r5,r17
    d670:	0002be00 	call	2be0 <_malloc_r>
    d674:	1007883a 	mov	r3,r2
    d678:	10001326 	beq	r2,zero,d6c8 <__submore+0xe8>
    d67c:	80801083 	ldbu	r2,66(r16)
    d680:	80c00c15 	stw	r3,48(r16)
    d684:	84400d15 	stw	r17,52(r16)
    d688:	1880ffc5 	stb	r2,1023(r3)
    d68c:	81401043 	ldbu	r5,65(r16)
    d690:	1900ff44 	addi	r4,r3,1021
    d694:	0005883a 	mov	r2,zero
    d698:	1940ff85 	stb	r5,1022(r3)
    d69c:	81401003 	ldbu	r5,64(r16)
    d6a0:	1940ff45 	stb	r5,1021(r3)
    d6a4:	81000015 	stw	r4,0(r16)
    d6a8:	dfc00517 	ldw	ra,20(sp)
    d6ac:	dd000417 	ldw	r20,16(sp)
    d6b0:	dcc00317 	ldw	r19,12(sp)
    d6b4:	dc800217 	ldw	r18,8(sp)
    d6b8:	dc400117 	ldw	r17,4(sp)
    d6bc:	dc000017 	ldw	r16,0(sp)
    d6c0:	dec00604 	addi	sp,sp,24
    d6c4:	f800283a 	ret
    d6c8:	00bfffc4 	movi	r2,-1
    d6cc:	003fde06 	br	d648 <__submore+0x68>

0000d6d0 <_ungetc_r>:
    d6d0:	defffc04 	addi	sp,sp,-16
    d6d4:	dc800215 	stw	r18,8(sp)
    d6d8:	dc400115 	stw	r17,4(sp)
    d6dc:	dc000015 	stw	r16,0(sp)
    d6e0:	dfc00315 	stw	ra,12(sp)
    d6e4:	00bfffc4 	movi	r2,-1
    d6e8:	2825883a 	mov	r18,r5
    d6ec:	2023883a 	mov	r17,r4
    d6f0:	3021883a 	mov	r16,r6
    d6f4:	28803026 	beq	r5,r2,d7b8 <_ungetc_r+0xe8>
    d6f8:	20000226 	beq	r4,zero,d704 <_ungetc_r+0x34>
    d6fc:	20800e17 	ldw	r2,56(r4)
    d700:	10002f26 	beq	r2,zero,d7c0 <_ungetc_r+0xf0>
    d704:	80c0030b 	ldhu	r3,12(r16)
    d708:	00bff7c4 	movi	r2,-33
    d70c:	1900010c 	andi	r4,r3,4
    d710:	213fffcc 	andi	r4,r4,65535
    d714:	1884703a 	and	r2,r3,r2
    d718:	2120001c 	xori	r4,r4,32768
    d71c:	8080030d 	sth	r2,12(r16)
    d720:	21200004 	addi	r4,r4,-32768
    d724:	20000c1e 	bne	r4,zero,d758 <_ungetc_r+0x88>
    d728:	1900040c 	andi	r4,r3,16
    d72c:	213fffcc 	andi	r4,r4,65535
    d730:	2120001c 	xori	r4,r4,32768
    d734:	21200004 	addi	r4,r4,-32768
    d738:	20001f26 	beq	r4,zero,d7b8 <_ungetc_r+0xe8>
    d73c:	18c0020c 	andi	r3,r3,8
    d740:	18ffffcc 	andi	r3,r3,65535
    d744:	18e0001c 	xori	r3,r3,32768
    d748:	18e00004 	addi	r3,r3,-32768
    d74c:	1800371e 	bne	r3,zero,d82c <_ungetc_r+0x15c>
    d750:	10800114 	ori	r2,r2,4
    d754:	8080030d 	sth	r2,12(r16)
    d758:	80800c17 	ldw	r2,48(r16)
    d75c:	94803fcc 	andi	r18,r18,255
    d760:	10001926 	beq	r2,zero,d7c8 <_ungetc_r+0xf8>
    d764:	80c00117 	ldw	r3,4(r16)
    d768:	80800d17 	ldw	r2,52(r16)
    d76c:	18800e0e 	bge	r3,r2,d7a8 <_ungetc_r+0xd8>
    d770:	80800017 	ldw	r2,0(r16)
    d774:	10ffffc4 	addi	r3,r2,-1
    d778:	80c00015 	stw	r3,0(r16)
    d77c:	14bfffc5 	stb	r18,-1(r2)
    d780:	80800117 	ldw	r2,4(r16)
    d784:	10800044 	addi	r2,r2,1
    d788:	80800115 	stw	r2,4(r16)
    d78c:	9005883a 	mov	r2,r18
    d790:	dfc00317 	ldw	ra,12(sp)
    d794:	dc800217 	ldw	r18,8(sp)
    d798:	dc400117 	ldw	r17,4(sp)
    d79c:	dc000017 	ldw	r16,0(sp)
    d7a0:	dec00404 	addi	sp,sp,16
    d7a4:	f800283a 	ret
    d7a8:	8809883a 	mov	r4,r17
    d7ac:	800b883a 	mov	r5,r16
    d7b0:	000d5e00 	call	d5e0 <__submore>
    d7b4:	103fee26 	beq	r2,zero,d770 <_ungetc_r+0xa0>
    d7b8:	04bfffc4 	movi	r18,-1
    d7bc:	003ff306 	br	d78c <_ungetc_r+0xbc>
    d7c0:	00019380 	call	1938 <__sinit>
    d7c4:	003fcf06 	br	d704 <_ungetc_r+0x34>
    d7c8:	80c00417 	ldw	r3,16(r16)
    d7cc:	80800017 	ldw	r2,0(r16)
    d7d0:	18000326 	beq	r3,zero,d7e0 <_ungetc_r+0x110>
    d7d4:	1880022e 	bgeu	r3,r2,d7e0 <_ungetc_r+0x110>
    d7d8:	10ffffc3 	ldbu	r3,-1(r2)
    d7dc:	1c801d26 	beq	r3,r18,d854 <_ungetc_r+0x184>
    d7e0:	81400117 	ldw	r5,4(r16)
    d7e4:	80800e15 	stw	r2,56(r16)
    d7e8:	008000c4 	movi	r2,3
    d7ec:	80800d15 	stw	r2,52(r16)
    d7f0:	00800044 	movi	r2,1
    d7f4:	81001004 	addi	r4,r16,64
    d7f8:	80c01084 	addi	r3,r16,66
    d7fc:	80800115 	stw	r2,4(r16)
    d800:	9005883a 	mov	r2,r18
    d804:	81400f15 	stw	r5,60(r16)
    d808:	81000c15 	stw	r4,48(r16)
    d80c:	84801085 	stb	r18,66(r16)
    d810:	80c00015 	stw	r3,0(r16)
    d814:	dfc00317 	ldw	ra,12(sp)
    d818:	dc800217 	ldw	r18,8(sp)
    d81c:	dc400117 	ldw	r17,4(sp)
    d820:	dc000017 	ldw	r16,0(sp)
    d824:	dec00404 	addi	sp,sp,16
    d828:	f800283a 	ret
    d82c:	8809883a 	mov	r4,r17
    d830:	800b883a 	mov	r5,r16
    d834:	000167c0 	call	167c <_fflush_r>
    d838:	103fdf1e 	bne	r2,zero,d7b8 <_ungetc_r+0xe8>
    d83c:	8080030b 	ldhu	r2,12(r16)
    d840:	00fffdc4 	movi	r3,-9
    d844:	80000215 	stw	zero,8(r16)
    d848:	1884703a 	and	r2,r3,r2
    d84c:	80000615 	stw	zero,24(r16)
    d850:	003fbf06 	br	d750 <_ungetc_r+0x80>
    d854:	80c00117 	ldw	r3,4(r16)
    d858:	10bfffc4 	addi	r2,r2,-1
    d85c:	80800015 	stw	r2,0(r16)
    d860:	18800044 	addi	r2,r3,1
    d864:	80800115 	stw	r2,4(r16)
    d868:	003fc806 	br	d78c <_ungetc_r+0xbc>

0000d86c <ungetc>:
    d86c:	00c00074 	movhi	r3,1
    d870:	18d8ae04 	addi	r3,r3,25272
    d874:	2005883a 	mov	r2,r4
    d878:	19000017 	ldw	r4,0(r3)
    d87c:	280d883a 	mov	r6,r5
    d880:	100b883a 	mov	r5,r2
    d884:	000d6d01 	jmpi	d6d0 <_ungetc_r>

0000d888 <__swbuf_r>:
    d888:	defffc04 	addi	sp,sp,-16
    d88c:	dc800215 	stw	r18,8(sp)
    d890:	dc400115 	stw	r17,4(sp)
    d894:	dc000015 	stw	r16,0(sp)
    d898:	dfc00315 	stw	ra,12(sp)
    d89c:	2023883a 	mov	r17,r4
    d8a0:	2825883a 	mov	r18,r5
    d8a4:	3021883a 	mov	r16,r6
    d8a8:	20000226 	beq	r4,zero,d8b4 <__swbuf_r+0x2c>
    d8ac:	20800e17 	ldw	r2,56(r4)
    d8b0:	10003b26 	beq	r2,zero,d9a0 <__swbuf_r+0x118>
    d8b4:	8080030b 	ldhu	r2,12(r16)
    d8b8:	80c00617 	ldw	r3,24(r16)
    d8bc:	1080020c 	andi	r2,r2,8
    d8c0:	10bfffcc 	andi	r2,r2,65535
    d8c4:	10a0001c 	xori	r2,r2,32768
    d8c8:	80c00215 	stw	r3,8(r16)
    d8cc:	10a00004 	addi	r2,r2,-32768
    d8d0:	10002226 	beq	r2,zero,d95c <__swbuf_r+0xd4>
    d8d4:	80800417 	ldw	r2,16(r16)
    d8d8:	10002026 	beq	r2,zero,d95c <__swbuf_r+0xd4>
    d8dc:	80c00017 	ldw	r3,0(r16)
    d8e0:	81000517 	ldw	r4,20(r16)
    d8e4:	94803fcc 	andi	r18,r18,255
    d8e8:	1885c83a 	sub	r2,r3,r2
    d8ec:	1100250e 	bge	r2,r4,d984 <__swbuf_r+0xfc>
    d8f0:	10800044 	addi	r2,r2,1
    d8f4:	81400217 	ldw	r5,8(r16)
    d8f8:	19000044 	addi	r4,r3,1
    d8fc:	297fffc4 	addi	r5,r5,-1
    d900:	81400215 	stw	r5,8(r16)
    d904:	1c800005 	stb	r18,0(r3)
    d908:	80c00517 	ldw	r3,20(r16)
    d90c:	81000015 	stw	r4,0(r16)
    d910:	18800c26 	beq	r3,r2,d944 <__swbuf_r+0xbc>
    d914:	8080030b 	ldhu	r2,12(r16)
    d918:	1080004c 	andi	r2,r2,1
    d91c:	10000226 	beq	r2,zero,d928 <__swbuf_r+0xa0>
    d920:	00800284 	movi	r2,10
    d924:	90800726 	beq	r18,r2,d944 <__swbuf_r+0xbc>
    d928:	9005883a 	mov	r2,r18
    d92c:	dfc00317 	ldw	ra,12(sp)
    d930:	dc800217 	ldw	r18,8(sp)
    d934:	dc400117 	ldw	r17,4(sp)
    d938:	dc000017 	ldw	r16,0(sp)
    d93c:	dec00404 	addi	sp,sp,16
    d940:	f800283a 	ret
    d944:	8809883a 	mov	r4,r17
    d948:	800b883a 	mov	r5,r16
    d94c:	000167c0 	call	167c <_fflush_r>
    d950:	103ff526 	beq	r2,zero,d928 <__swbuf_r+0xa0>
    d954:	04bfffc4 	movi	r18,-1
    d958:	003ff306 	br	d928 <__swbuf_r+0xa0>
    d95c:	8809883a 	mov	r4,r17
    d960:	800b883a 	mov	r5,r16
    d964:	000733c0 	call	733c <__swsetup_r>
    d968:	10000f1e 	bne	r2,zero,d9a8 <__swbuf_r+0x120>
    d96c:	80800417 	ldw	r2,16(r16)
    d970:	80c00017 	ldw	r3,0(r16)
    d974:	81000517 	ldw	r4,20(r16)
    d978:	94803fcc 	andi	r18,r18,255
    d97c:	1885c83a 	sub	r2,r3,r2
    d980:	113fdb16 	blt	r2,r4,d8f0 <__swbuf_r+0x68>
    d984:	8809883a 	mov	r4,r17
    d988:	800b883a 	mov	r5,r16
    d98c:	000167c0 	call	167c <_fflush_r>
    d990:	103ff01e 	bne	r2,zero,d954 <__swbuf_r+0xcc>
    d994:	80c00017 	ldw	r3,0(r16)
    d998:	00800044 	movi	r2,1
    d99c:	003fd506 	br	d8f4 <__swbuf_r+0x6c>
    d9a0:	00019380 	call	1938 <__sinit>
    d9a4:	003fc306 	br	d8b4 <__swbuf_r+0x2c>
    d9a8:	8080030b 	ldhu	r2,12(r16)
    d9ac:	04bfffc4 	movi	r18,-1
    d9b0:	10801014 	ori	r2,r2,64
    d9b4:	8080030d 	sth	r2,12(r16)
    d9b8:	00800244 	movi	r2,9
    d9bc:	88800015 	stw	r2,0(r17)
    d9c0:	003fd906 	br	d928 <__swbuf_r+0xa0>

0000d9c4 <__swbuf>:
    d9c4:	00c00074 	movhi	r3,1
    d9c8:	18d8ae04 	addi	r3,r3,25272
    d9cc:	2005883a 	mov	r2,r4
    d9d0:	19000017 	ldw	r4,0(r3)
    d9d4:	280d883a 	mov	r6,r5
    d9d8:	100b883a 	mov	r5,r2
    d9dc:	000d8881 	jmpi	d888 <__swbuf_r>

0000d9e0 <_calloc_r>:
    d9e0:	defffe04 	addi	sp,sp,-8
    d9e4:	dc000015 	stw	r16,0(sp)
    d9e8:	2021883a 	mov	r16,r4
    d9ec:	3009883a 	mov	r4,r6
    d9f0:	dfc00115 	stw	ra,4(sp)
    d9f4:	00015040 	call	1504 <__mulsi3>
    d9f8:	8009883a 	mov	r4,r16
    d9fc:	100b883a 	mov	r5,r2
    da00:	0002be00 	call	2be0 <_malloc_r>
    da04:	1021883a 	mov	r16,r2
    da08:	10000c26 	beq	r2,zero,da3c <_calloc_r+0x5c>
    da0c:	11bfff17 	ldw	r6,-4(r2)
    da10:	00ffff04 	movi	r3,-4
    da14:	00800904 	movi	r2,36
    da18:	30cc703a 	and	r6,r6,r3
    da1c:	30cd883a 	add	r6,r6,r3
    da20:	11801436 	bltu	r2,r6,da74 <_calloc_r+0x94>
    da24:	00c004c4 	movi	r3,19
    da28:	19800936 	bltu	r3,r6,da50 <_calloc_r+0x70>
    da2c:	8005883a 	mov	r2,r16
    da30:	10000015 	stw	zero,0(r2)
    da34:	10000115 	stw	zero,4(r2)
    da38:	10000215 	stw	zero,8(r2)
    da3c:	8005883a 	mov	r2,r16
    da40:	dfc00117 	ldw	ra,4(sp)
    da44:	dc000017 	ldw	r16,0(sp)
    da48:	dec00204 	addi	sp,sp,8
    da4c:	f800283a 	ret
    da50:	80000015 	stw	zero,0(r16)
    da54:	80000115 	stw	zero,4(r16)
    da58:	00c006c4 	movi	r3,27
    da5c:	19800d2e 	bgeu	r3,r6,da94 <_calloc_r+0xb4>
    da60:	80000215 	stw	zero,8(r16)
    da64:	80000315 	stw	zero,12(r16)
    da68:	30800c26 	beq	r6,r2,da9c <_calloc_r+0xbc>
    da6c:	80800404 	addi	r2,r16,16
    da70:	003fef06 	br	da30 <_calloc_r+0x50>
    da74:	8009883a 	mov	r4,r16
    da78:	000b883a 	mov	r5,zero
    da7c:	00034a40 	call	34a4 <memset>
    da80:	8005883a 	mov	r2,r16
    da84:	dfc00117 	ldw	ra,4(sp)
    da88:	dc000017 	ldw	r16,0(sp)
    da8c:	dec00204 	addi	sp,sp,8
    da90:	f800283a 	ret
    da94:	80800204 	addi	r2,r16,8
    da98:	003fe506 	br	da30 <_calloc_r+0x50>
    da9c:	80000415 	stw	zero,16(r16)
    daa0:	80000515 	stw	zero,20(r16)
    daa4:	80800604 	addi	r2,r16,24
    daa8:	003fe106 	br	da30 <_calloc_r+0x50>

0000daac <rshift>:
    daac:	2805d17a 	srai	r2,r5,5
    dab0:	20c00417 	ldw	r3,16(r4)
    dab4:	22800504 	addi	r10,r4,20
    dab8:	10c0270e 	bge	r2,r3,db58 <rshift+0xac>
    dabc:	19800144 	addi	r6,r3,5
    dac0:	12c00144 	addi	r11,r2,5
    dac4:	318d883a 	add	r6,r6,r6
    dac8:	5ad7883a 	add	r11,r11,r11
    dacc:	318d883a 	add	r6,r6,r6
    dad0:	5ad7883a 	add	r11,r11,r11
    dad4:	294007cc 	andi	r5,r5,31
    dad8:	218d883a 	add	r6,r4,r6
    dadc:	22d7883a 	add	r11,r4,r11
    dae0:	28002026 	beq	r5,zero,db64 <rshift+0xb8>
    dae4:	59c00017 	ldw	r7,0(r11)
    dae8:	02400804 	movi	r9,32
    daec:	58800104 	addi	r2,r11,4
    daf0:	4953c83a 	sub	r9,r9,r5
    daf4:	394ed83a 	srl	r7,r7,r5
    daf8:	11802e2e 	bgeu	r2,r6,dbb4 <rshift+0x108>
    dafc:	5007883a 	mov	r3,r10
    db00:	12000017 	ldw	r8,0(r2)
    db04:	18c00104 	addi	r3,r3,4
    db08:	10800104 	addi	r2,r2,4
    db0c:	4250983a 	sll	r8,r8,r9
    db10:	3a0eb03a 	or	r7,r7,r8
    db14:	19ffff15 	stw	r7,-4(r3)
    db18:	11ffff17 	ldw	r7,-4(r2)
    db1c:	394ed83a 	srl	r7,r7,r5
    db20:	11bff736 	bltu	r2,r6,db00 <rshift+0x54>
    db24:	32c5c83a 	sub	r2,r6,r11
    db28:	10bffec4 	addi	r2,r2,-5
    db2c:	1004d0ba 	srli	r2,r2,2
    db30:	10800184 	addi	r2,r2,6
    db34:	1085883a 	add	r2,r2,r2
    db38:	1085883a 	add	r2,r2,r2
    db3c:	2085883a 	add	r2,r4,r2
    db40:	11c00015 	stw	r7,0(r2)
    db44:	38001626 	beq	r7,zero,dba0 <rshift+0xf4>
    db48:	10800104 	addi	r2,r2,4
    db4c:	1295c83a 	sub	r10,r2,r10
    db50:	5015d0ba 	srai	r10,r10,2
    db54:	00001406 	br	dba8 <rshift+0xfc>
    db58:	20000415 	stw	zero,16(r4)
    db5c:	20000515 	stw	zero,20(r4)
    db60:	f800283a 	ret
    db64:	59bffc2e 	bgeu	r11,r6,db58 <rshift+0xac>
    db68:	5007883a 	mov	r3,r10
    db6c:	5805883a 	mov	r2,r11
    db70:	11400017 	ldw	r5,0(r2)
    db74:	18c00104 	addi	r3,r3,4
    db78:	10800104 	addi	r2,r2,4
    db7c:	197fff15 	stw	r5,-4(r3)
    db80:	11bffb36 	bltu	r2,r6,db70 <rshift+0xc4>
    db84:	02c4303a 	nor	r2,zero,r11
    db88:	1185883a 	add	r2,r2,r6
    db8c:	1004d0ba 	srli	r2,r2,2
    db90:	10800184 	addi	r2,r2,6
    db94:	1085883a 	add	r2,r2,r2
    db98:	1085883a 	add	r2,r2,r2
    db9c:	2085883a 	add	r2,r4,r2
    dba0:	1295c83a 	sub	r10,r2,r10
    dba4:	5015d0ba 	srai	r10,r10,2
    dba8:	22800415 	stw	r10,16(r4)
    dbac:	503feb26 	beq	r10,zero,db5c <rshift+0xb0>
    dbb0:	f800283a 	ret
    dbb4:	5005883a 	mov	r2,r10
    dbb8:	003fe106 	br	db40 <rshift+0x94>

0000dbbc <__hexdig_init>:
    dbbc:	01400074 	movhi	r5,1
    dbc0:	29519e44 	addi	r5,r5,18041
    dbc4:	01000404 	movi	r4,16
    dbc8:	00c00c04 	movi	r3,48
    dbcc:	00800074 	movhi	r2,1
    dbd0:	109fc304 	addi	r2,r2,32524
    dbd4:	29800003 	ldbu	r6,0(r5)
    dbd8:	10c7883a 	add	r3,r2,r3
    dbdc:	19000005 	stb	r4,0(r3)
    dbe0:	29400044 	addi	r5,r5,1
    dbe4:	3007883a 	mov	r3,r6
    dbe8:	21000044 	addi	r4,r4,1
    dbec:	303ff91e 	bne	r6,zero,dbd4 <__hexdig_init+0x18>
    dbf0:	01400074 	movhi	r5,1
    dbf4:	29519c44 	addi	r5,r5,18033
    dbf8:	01000684 	movi	r4,26
    dbfc:	00c01844 	movi	r3,97
    dc00:	29800003 	ldbu	r6,0(r5)
    dc04:	10c7883a 	add	r3,r2,r3
    dc08:	19000005 	stb	r4,0(r3)
    dc0c:	29400044 	addi	r5,r5,1
    dc10:	3007883a 	mov	r3,r6
    dc14:	21000044 	addi	r4,r4,1
    dc18:	303ff91e 	bne	r6,zero,dc00 <__hexdig_init+0x44>
    dc1c:	01400074 	movhi	r5,1
    dc20:	29519a44 	addi	r5,r5,18025
    dc24:	01000684 	movi	r4,26
    dc28:	00c01044 	movi	r3,65
    dc2c:	29800003 	ldbu	r6,0(r5)
    dc30:	10c7883a 	add	r3,r2,r3
    dc34:	19000005 	stb	r4,0(r3)
    dc38:	29400044 	addi	r5,r5,1
    dc3c:	3007883a 	mov	r3,r6
    dc40:	21000044 	addi	r4,r4,1
    dc44:	303ff91e 	bne	r6,zero,dc2c <__hexdig_init+0x70>
    dc48:	f800283a 	ret

0000dc4c <__gethex>:
    dc4c:	defff204 	addi	sp,sp,-56
    dc50:	dc800615 	stw	r18,24(sp)
    dc54:	04800074 	movhi	r18,1
    dc58:	949fc304 	addi	r18,r18,32524
    dc5c:	90800c03 	ldbu	r2,48(r18)
    dc60:	dd400915 	stw	r21,36(sp)
    dc64:	dc400515 	stw	r17,20(sp)
    dc68:	dfc00d15 	stw	ra,52(sp)
    dc6c:	df000c15 	stw	fp,48(sp)
    dc70:	ddc00b15 	stw	r23,44(sp)
    dc74:	dd800a15 	stw	r22,40(sp)
    dc78:	dd000815 	stw	r20,32(sp)
    dc7c:	dcc00715 	stw	r19,28(sp)
    dc80:	dc000415 	stw	r16,16(sp)
    dc84:	d9000115 	stw	r4,4(sp)
    dc88:	d9c00215 	stw	r7,8(sp)
    dc8c:	282b883a 	mov	r21,r5
    dc90:	3023883a 	mov	r17,r6
    dc94:	1000b926 	beq	r2,zero,df7c <__gethex+0x330>
    dc98:	a9000017 	ldw	r4,0(r21)
    dc9c:	00800c04 	movi	r2,48
    dca0:	20c00083 	ldbu	r3,2(r4)
    dca4:	24c00084 	addi	r19,r4,2
    dca8:	1881601e 	bne	r3,r2,e22c <__gethex+0x5e0>
    dcac:	017fff84 	movi	r5,-2
    dcb0:	208000c4 	addi	r2,r4,3
    dcb4:	290bc83a 	sub	r5,r5,r4
    dcb8:	1809883a 	mov	r4,r3
    dcbc:	28b9883a 	add	fp,r5,r2
    dcc0:	1027883a 	mov	r19,r2
    dcc4:	10800044 	addi	r2,r2,1
    dcc8:	10ffffc3 	ldbu	r3,-1(r2)
    dccc:	193ffb26 	beq	r3,r4,dcbc <__gethex+0x70>
    dcd0:	90c5883a 	add	r2,r18,r3
    dcd4:	10800003 	ldbu	r2,0(r2)
    dcd8:	01400074 	movhi	r5,1
    dcdc:	295fc304 	addi	r5,r5,32524
    dce0:	10002b26 	beq	r2,zero,dd90 <__gethex+0x144>
    dce4:	98800003 	ldbu	r2,0(r19)
    dce8:	0009883a 	mov	r4,zero
    dcec:	288b883a 	add	r5,r5,r2
    dcf0:	28c00003 	ldbu	r3,0(r5)
    dcf4:	18016826 	beq	r3,zero,e298 <__gethex+0x64c>
    dcf8:	9821883a 	mov	r16,r19
    dcfc:	84000044 	addi	r16,r16,1
    dd00:	80800003 	ldbu	r2,0(r16)
    dd04:	9087883a 	add	r3,r18,r2
    dd08:	18c00003 	ldbu	r3,0(r3)
    dd0c:	183ffb1e 	bne	r3,zero,dcfc <__gethex+0xb0>
    dd10:	d8000015 	stw	zero,0(sp)
    dd14:	00c00b84 	movi	r3,46
    dd18:	10c0f226 	beq	r2,r3,e0e4 <__gethex+0x498>
    dd1c:	80800003 	ldbu	r2,0(r16)
    dd20:	20014426 	beq	r4,zero,e234 <__gethex+0x5e8>
    dd24:	8109c83a 	sub	r4,r16,r4
    dd28:	2109883a 	add	r4,r4,r4
    dd2c:	2109883a 	add	r4,r4,r4
    dd30:	0129c83a 	sub	r20,zero,r4
    dd34:	00c01404 	movi	r3,80
    dd38:	10c01e26 	beq	r2,r3,ddb4 <__gethex+0x168>
    dd3c:	00c01c04 	movi	r3,112
    dd40:	10c01c26 	beq	r2,r3,ddb4 <__gethex+0x168>
    dd44:	d8c00017 	ldw	r3,0(sp)
    dd48:	802d883a 	mov	r22,r16
    dd4c:	ad800015 	stw	r22,0(r21)
    dd50:	18004026 	beq	r3,zero,de54 <__gethex+0x208>
    dd54:	e001061e 	bne	fp,zero,e170 <__gethex+0x524>
    dd58:	04000184 	movi	r16,6
    dd5c:	8005883a 	mov	r2,r16
    dd60:	dfc00d17 	ldw	ra,52(sp)
    dd64:	df000c17 	ldw	fp,48(sp)
    dd68:	ddc00b17 	ldw	r23,44(sp)
    dd6c:	dd800a17 	ldw	r22,40(sp)
    dd70:	dd400917 	ldw	r21,36(sp)
    dd74:	dd000817 	ldw	r20,32(sp)
    dd78:	dcc00717 	ldw	r19,28(sp)
    dd7c:	dc800617 	ldw	r18,24(sp)
    dd80:	dc400517 	ldw	r17,20(sp)
    dd84:	dc000417 	ldw	r16,16(sp)
    dd88:	dec00e04 	addi	sp,sp,56
    dd8c:	f800283a 	ret
    dd90:	00800b84 	movi	r2,46
    dd94:	1880d626 	beq	r3,r2,e0f0 <__gethex+0x4a4>
    dd98:	98800003 	ldbu	r2,0(r19)
    dd9c:	00c00044 	movi	r3,1
    dda0:	d8c00015 	stw	r3,0(sp)
    dda4:	00c01404 	movi	r3,80
    dda8:	9821883a 	mov	r16,r19
    ddac:	0029883a 	mov	r20,zero
    ddb0:	10ffe21e 	bne	r2,r3,dd3c <__gethex+0xf0>
    ddb4:	80800043 	ldbu	r2,1(r16)
    ddb8:	00c00ac4 	movi	r3,43
    ddbc:	10c0f326 	beq	r2,r3,e18c <__gethex+0x540>
    ddc0:	00c00b44 	movi	r3,45
    ddc4:	10c0ec26 	beq	r2,r3,e178 <__gethex+0x52c>
    ddc8:	80c00044 	addi	r3,r16,1
    ddcc:	d8000315 	stw	zero,12(sp)
    ddd0:	9085883a 	add	r2,r18,r2
    ddd4:	11000003 	ldbu	r4,0(r2)
    ddd8:	203fda26 	beq	r4,zero,dd44 <__gethex+0xf8>
    dddc:	01800644 	movi	r6,25
    dde0:	313fd816 	blt	r6,r4,dd44 <__gethex+0xf8>
    dde4:	18800043 	ldbu	r2,1(r3)
    dde8:	01400074 	movhi	r5,1
    ddec:	295fc304 	addi	r5,r5,32524
    ddf0:	213ffc04 	addi	r4,r4,-16
    ddf4:	2885883a 	add	r2,r5,r2
    ddf8:	15c00003 	ldbu	r23,0(r2)
    ddfc:	1d800044 	addi	r22,r3,1
    de00:	b8000d26 	beq	r23,zero,de38 <__gethex+0x1ec>
    de04:	35c0030e 	bge	r6,r23,de14 <__gethex+0x1c8>
    de08:	00000b06 	br	de38 <__gethex+0x1ec>
    de0c:	00800644 	movi	r2,25
    de10:	15c00916 	blt	r2,r23,de38 <__gethex+0x1ec>
    de14:	01400284 	movi	r5,10
    de18:	00015040 	call	1504 <__mulsi3>
    de1c:	b5800044 	addi	r22,r22,1
    de20:	b1400003 	ldbu	r5,0(r22)
    de24:	15c5883a 	add	r2,r2,r23
    de28:	113ffc04 	addi	r4,r2,-16
    de2c:	914b883a 	add	r5,r18,r5
    de30:	2dc00003 	ldbu	r23,0(r5)
    de34:	b83ff51e 	bne	r23,zero,de0c <__gethex+0x1c0>
    de38:	d8c00317 	ldw	r3,12(sp)
    de3c:	18000126 	beq	r3,zero,de44 <__gethex+0x1f8>
    de40:	0109c83a 	sub	r4,zero,r4
    de44:	d8c00017 	ldw	r3,0(sp)
    de48:	ad800015 	stw	r22,0(r21)
    de4c:	a129883a 	add	r20,r20,r4
    de50:	183fc01e 	bne	r3,zero,dd54 <__gethex+0x108>
    de54:	84c5c83a 	sub	r2,r16,r19
    de58:	10bfffc4 	addi	r2,r2,-1
    de5c:	00c001c4 	movi	r3,7
    de60:	000b883a 	mov	r5,zero
    de64:	1880030e 	bge	r3,r2,de74 <__gethex+0x228>
    de68:	1005d07a 	srai	r2,r2,1
    de6c:	29400044 	addi	r5,r5,1
    de70:	18bffd16 	blt	r3,r2,de68 <__gethex+0x21c>
    de74:	d9000117 	ldw	r4,4(sp)
    de78:	00098380 	call	9838 <_Balloc>
    de7c:	102d883a 	mov	r22,r2
    de80:	15400504 	addi	r21,r2,20
    de84:	9c001b2e 	bgeu	r19,r16,def4 <__gethex+0x2a8>
    de88:	843fffc4 	addi	r16,r16,-1
    de8c:	98bfffc4 	addi	r2,r19,-1
    de90:	a80b883a 	mov	r5,r21
    de94:	0009883a 	mov	r4,zero
    de98:	0007883a 	mov	r3,zero
    de9c:	02800b84 	movi	r10,46
    dea0:	02c00804 	movi	r11,32
    dea4:	00000806 	br	dec8 <__gethex+0x27c>
    dea8:	18c00104 	addi	r3,r3,4
    deac:	918d883a 	add	r6,r18,r6
    deb0:	32400003 	ldbu	r9,0(r6)
    deb4:	4a4003cc 	andi	r9,r9,15
    deb8:	49ce983a 	sll	r7,r9,r7
    debc:	21c8b03a 	or	r4,r4,r7
    dec0:	843fffc4 	addi	r16,r16,-1
    dec4:	80800d26 	beq	r16,r2,defc <__gethex+0x2b0>
    dec8:	81800003 	ldbu	r6,0(r16)
    decc:	180f883a 	mov	r7,r3
    ded0:	32bffb26 	beq	r6,r10,dec0 <__gethex+0x274>
    ded4:	1afff41e 	bne	r3,r11,dea8 <__gethex+0x25c>
    ded8:	29000015 	stw	r4,0(r5)
    dedc:	81800003 	ldbu	r6,0(r16)
    dee0:	0009883a 	mov	r4,zero
    dee4:	000f883a 	mov	r7,zero
    dee8:	29400104 	addi	r5,r5,4
    deec:	00c00104 	movi	r3,4
    def0:	003fee06 	br	deac <__gethex+0x260>
    def4:	a80b883a 	mov	r5,r21
    def8:	0009883a 	mov	r4,zero
    defc:	28c00104 	addi	r3,r5,4
    df00:	1d47c83a 	sub	r3,r3,r21
    df04:	1807d0ba 	srai	r3,r3,2
    df08:	29000015 	stw	r4,0(r5)
    df0c:	1820917a 	slli	r16,r3,5
    df10:	b0c00415 	stw	r3,16(r22)
    df14:	0009b500 	call	9b50 <__hi0bits>
    df18:	8dc00017 	ldw	r23,0(r17)
    df1c:	8085c83a 	sub	r2,r16,r2
    df20:	b8809c16 	blt	r23,r2,e194 <__gethex+0x548>
    df24:	15c0b716 	blt	r2,r23,e204 <__gethex+0x5b8>
    df28:	0039883a 	mov	fp,zero
    df2c:	88c00217 	ldw	r3,8(r17)
    df30:	1d006516 	blt	r3,r20,e0c8 <__gethex+0x47c>
    df34:	88800117 	ldw	r2,4(r17)
    df38:	a080830e 	bge	r20,r2,e148 <__gethex+0x4fc>
    df3c:	1529c83a 	sub	r20,r2,r20
    df40:	a5c01016 	blt	r20,r23,df84 <__gethex+0x338>
    df44:	88c00317 	ldw	r3,12(r17)
    df48:	01000084 	movi	r4,2
    df4c:	1900c726 	beq	r3,r4,e26c <__gethex+0x620>
    df50:	010000c4 	movi	r4,3
    df54:	1900f026 	beq	r3,r4,e318 <__gethex+0x6cc>
    df58:	01000044 	movi	r4,1
    df5c:	1900e626 	beq	r3,r4,e2f8 <__gethex+0x6ac>
    df60:	d9000117 	ldw	r4,4(sp)
    df64:	b00b883a 	mov	r5,r22
    df68:	04001404 	movi	r16,80
    df6c:	00098e00 	call	98e0 <_Bfree>
    df70:	d8c00e17 	ldw	r3,56(sp)
    df74:	18000015 	stw	zero,0(r3)
    df78:	003f7806 	br	dd5c <__gethex+0x110>
    df7c:	000dbbc0 	call	dbbc <__hexdig_init>
    df80:	003f4506 	br	dc98 <__gethex+0x4c>
    df84:	a43fffc4 	addi	r16,r20,-1
    df88:	e000b21e 	bne	fp,zero,e254 <__gethex+0x608>
    df8c:	0400040e 	bge	zero,r16,dfa0 <__gethex+0x354>
    df90:	b009883a 	mov	r4,r22
    df94:	800b883a 	mov	r5,r16
    df98:	000a8040 	call	a804 <__any_on>
    df9c:	1039883a 	mov	fp,r2
    dfa0:	8005d17a 	srai	r2,r16,5
    dfa4:	00c00044 	movi	r3,1
    dfa8:	840007cc 	andi	r16,r16,31
    dfac:	1085883a 	add	r2,r2,r2
    dfb0:	1085883a 	add	r2,r2,r2
    dfb4:	a885883a 	add	r2,r21,r2
    dfb8:	1c06983a 	sll	r3,r3,r16
    dfbc:	10800017 	ldw	r2,0(r2)
    dfc0:	1884703a 	and	r2,r3,r2
    dfc4:	10000126 	beq	r2,zero,dfcc <__gethex+0x380>
    dfc8:	e7000094 	ori	fp,fp,2
    dfcc:	a00b883a 	mov	r5,r20
    dfd0:	b009883a 	mov	r4,r22
    dfd4:	000daac0 	call	daac <rshift>
    dfd8:	bd2fc83a 	sub	r23,r23,r20
    dfdc:	8d000117 	ldw	r20,4(r17)
    dfe0:	04000084 	movi	r16,2
    dfe4:	e0005d26 	beq	fp,zero,e15c <__gethex+0x510>
    dfe8:	88800317 	ldw	r2,12(r17)
    dfec:	00c00084 	movi	r3,2
    dff0:	10c0b026 	beq	r2,r3,e2b4 <__gethex+0x668>
    dff4:	00c000c4 	movi	r3,3
    dff8:	10c05526 	beq	r2,r3,e150 <__gethex+0x504>
    dffc:	00c00044 	movi	r3,1
    e000:	10c0551e 	bne	r2,r3,e158 <__gethex+0x50c>
    e004:	e080008c 	andi	r2,fp,2
    e008:	10005326 	beq	r2,zero,e158 <__gethex+0x50c>
    e00c:	a8800017 	ldw	r2,0(r21)
    e010:	e084b03a 	or	r2,fp,r2
    e014:	10c4703a 	and	r2,r2,r3
    e018:	10004f26 	beq	r2,zero,e158 <__gethex+0x50c>
    e01c:	b7000417 	ldw	fp,16(r22)
    e020:	00ffffc4 	movi	r3,-1
    e024:	e1000144 	addi	r4,fp,5
    e028:	2109883a 	add	r4,r4,r4
    e02c:	2109883a 	add	r4,r4,r4
    e030:	b109883a 	add	r4,r22,r4
    e034:	a8800017 	ldw	r2,0(r21)
    e038:	10c0ba1e 	bne	r2,r3,e324 <__gethex+0x6d8>
    e03c:	a8000015 	stw	zero,0(r21)
    e040:	ad400104 	addi	r21,r21,4
    e044:	a93ffb36 	bltu	r21,r4,e034 <__gethex+0x3e8>
    e048:	b0800217 	ldw	r2,8(r22)
    e04c:	e080bd0e 	bge	fp,r2,e344 <__gethex+0x6f8>
    e050:	e005883a 	mov	r2,fp
    e054:	10c00144 	addi	r3,r2,5
    e058:	18c7883a 	add	r3,r3,r3
    e05c:	18c7883a 	add	r3,r3,r3
    e060:	b0c7883a 	add	r3,r22,r3
    e064:	10800044 	addi	r2,r2,1
    e068:	01000044 	movi	r4,1
    e06c:	19000015 	stw	r4,0(r3)
    e070:	b0800415 	stw	r2,16(r22)
    e074:	00800084 	movi	r2,2
    e078:	8080ad26 	beq	r16,r2,e330 <__gethex+0x6e4>
    e07c:	b0800417 	ldw	r2,16(r22)
    e080:	e0800b16 	blt	fp,r2,e0b0 <__gethex+0x464>
    e084:	bdc007cc 	andi	r23,r23,31
    e088:	b8008626 	beq	r23,zero,e2a4 <__gethex+0x658>
    e08c:	e7000104 	addi	fp,fp,4
    e090:	e739883a 	add	fp,fp,fp
    e094:	e739883a 	add	fp,fp,fp
    e098:	b705883a 	add	r2,r22,fp
    e09c:	11000017 	ldw	r4,0(r2)
    e0a0:	0009b500 	call	9b50 <__hi0bits>
    e0a4:	00c00804 	movi	r3,32
    e0a8:	1defc83a 	sub	r23,r3,r23
    e0ac:	15c07d0e 	bge	r2,r23,e2a4 <__gethex+0x658>
    e0b0:	b009883a 	mov	r4,r22
    e0b4:	01400044 	movi	r5,1
    e0b8:	000daac0 	call	daac <rshift>
    e0bc:	88800217 	ldw	r2,8(r17)
    e0c0:	a5000044 	addi	r20,r20,1
    e0c4:	1500770e 	bge	r2,r20,e2a4 <__gethex+0x658>
    e0c8:	d9000117 	ldw	r4,4(sp)
    e0cc:	b00b883a 	mov	r5,r22
    e0d0:	040028c4 	movi	r16,163
    e0d4:	00098e00 	call	98e0 <_Bfree>
    e0d8:	d8800e17 	ldw	r2,56(sp)
    e0dc:	10000015 	stw	zero,0(r2)
    e0e0:	003f1e06 	br	dd5c <__gethex+0x110>
    e0e4:	20007826 	beq	r4,zero,e2c8 <__gethex+0x67c>
    e0e8:	80800003 	ldbu	r2,0(r16)
    e0ec:	003f0d06 	br	dd24 <__gethex+0xd8>
    e0f0:	98800043 	ldbu	r2,1(r19)
    e0f4:	9c000044 	addi	r16,r19,1
    e0f8:	288b883a 	add	r5,r5,r2
    e0fc:	28c00003 	ldbu	r3,0(r5)
    e100:	18005026 	beq	r3,zero,e244 <__gethex+0x5f8>
    e104:	00c00c04 	movi	r3,48
    e108:	10c0541e 	bne	r2,r3,e25c <__gethex+0x610>
    e10c:	800d883a 	mov	r6,r16
    e110:	1007883a 	mov	r3,r2
    e114:	31800044 	addi	r6,r6,1
    e118:	30800003 	ldbu	r2,0(r6)
    e11c:	10fffd26 	beq	r2,r3,e114 <__gethex+0x4c8>
    e120:	9087883a 	add	r3,r18,r2
    e124:	18c00003 	ldbu	r3,0(r3)
    e128:	3027883a 	mov	r19,r6
    e12c:	18004c1e 	bne	r3,zero,e260 <__gethex+0x614>
    e130:	00c00044 	movi	r3,1
    e134:	8009883a 	mov	r4,r16
    e138:	d8c00015 	stw	r3,0(sp)
    e13c:	1839883a 	mov	fp,r3
    e140:	3021883a 	mov	r16,r6
    e144:	003ef306 	br	dd14 <__gethex+0xc8>
    e148:	04000044 	movi	r16,1
    e14c:	003fa506 	br	dfe4 <__gethex+0x398>
    e150:	d8800f17 	ldw	r2,60(sp)
    e154:	103fb11e 	bne	r2,zero,e01c <__gethex+0x3d0>
    e158:	84000414 	ori	r16,r16,16
    e15c:	d8800e17 	ldw	r2,56(sp)
    e160:	d8c00217 	ldw	r3,8(sp)
    e164:	15800015 	stw	r22,0(r2)
    e168:	1d000015 	stw	r20,0(r3)
    e16c:	003efb06 	br	dd5c <__gethex+0x110>
    e170:	0021883a 	mov	r16,zero
    e174:	003ef906 	br	dd5c <__gethex+0x110>
    e178:	00c00044 	movi	r3,1
    e17c:	d8c00315 	stw	r3,12(sp)
    e180:	80800083 	ldbu	r2,2(r16)
    e184:	80c00084 	addi	r3,r16,2
    e188:	003f1106 	br	ddd0 <__gethex+0x184>
    e18c:	d8000315 	stw	zero,12(sp)
    e190:	003ffb06 	br	e180 <__gethex+0x534>
    e194:	15e1c83a 	sub	r16,r2,r23
    e198:	b009883a 	mov	r4,r22
    e19c:	800b883a 	mov	r5,r16
    e1a0:	000a8040 	call	a804 <__any_on>
    e1a4:	10002526 	beq	r2,zero,e23c <__gethex+0x5f0>
    e1a8:	80bfffc4 	addi	r2,r16,-1
    e1ac:	1007d17a 	srai	r3,r2,5
    e1b0:	110007cc 	andi	r4,r2,31
    e1b4:	07000044 	movi	fp,1
    e1b8:	18c00144 	addi	r3,r3,5
    e1bc:	18c7883a 	add	r3,r3,r3
    e1c0:	18c7883a 	add	r3,r3,r3
    e1c4:	b0c7883a 	add	r3,r22,r3
    e1c8:	e108983a 	sll	r4,fp,r4
    e1cc:	18c00017 	ldw	r3,0(r3)
    e1d0:	20c6703a 	and	r3,r4,r3
    e1d4:	18000626 	beq	r3,zero,e1f0 <__gethex+0x5a4>
    e1d8:	e080340e 	bge	fp,r2,e2ac <__gethex+0x660>
    e1dc:	b009883a 	mov	r4,r22
    e1e0:	817fff84 	addi	r5,r16,-2
    e1e4:	000a8040 	call	a804 <__any_on>
    e1e8:	10003026 	beq	r2,zero,e2ac <__gethex+0x660>
    e1ec:	070000c4 	movi	fp,3
    e1f0:	b009883a 	mov	r4,r22
    e1f4:	800b883a 	mov	r5,r16
    e1f8:	000daac0 	call	daac <rshift>
    e1fc:	a429883a 	add	r20,r20,r16
    e200:	003f4a06 	br	df2c <__gethex+0x2e0>
    e204:	d9000117 	ldw	r4,4(sp)
    e208:	b8a1c83a 	sub	r16,r23,r2
    e20c:	b00b883a 	mov	r5,r22
    e210:	800d883a 	mov	r6,r16
    e214:	000a0280 	call	a028 <__lshift>
    e218:	102d883a 	mov	r22,r2
    e21c:	a429c83a 	sub	r20,r20,r16
    e220:	15400504 	addi	r21,r2,20
    e224:	0039883a 	mov	fp,zero
    e228:	003f4006 	br	df2c <__gethex+0x2e0>
    e22c:	0039883a 	mov	fp,zero
    e230:	003ea706 	br	dcd0 <__gethex+0x84>
    e234:	0029883a 	mov	r20,zero
    e238:	003ebe06 	br	dd34 <__gethex+0xe8>
    e23c:	0039883a 	mov	fp,zero
    e240:	003feb06 	br	e1f0 <__gethex+0x5a4>
    e244:	00c00044 	movi	r3,1
    e248:	0029883a 	mov	r20,zero
    e24c:	d8c00015 	stw	r3,0(sp)
    e250:	003eb806 	br	dd34 <__gethex+0xe8>
    e254:	07000044 	movi	fp,1
    e258:	003f5106 	br	dfa0 <__gethex+0x354>
    e25c:	8027883a 	mov	r19,r16
    e260:	8009883a 	mov	r4,r16
    e264:	07000044 	movi	fp,1
    e268:	003ea306 	br	dcf8 <__gethex+0xac>
    e26c:	d8c00f17 	ldw	r3,60(sp)
    e270:	183f3b1e 	bne	r3,zero,df60 <__gethex+0x314>
    e274:	d8c00217 	ldw	r3,8(sp)
    e278:	04001884 	movi	r16,98
    e27c:	18800015 	stw	r2,0(r3)
    e280:	00800044 	movi	r2,1
    e284:	b0800415 	stw	r2,16(r22)
    e288:	a8800015 	stw	r2,0(r21)
    e28c:	d8800e17 	ldw	r2,56(sp)
    e290:	15800015 	stw	r22,0(r2)
    e294:	003eb106 	br	dd5c <__gethex+0x110>
    e298:	9821883a 	mov	r16,r19
    e29c:	d8000015 	stw	zero,0(sp)
    e2a0:	003e9c06 	br	dd14 <__gethex+0xc8>
    e2a4:	04000844 	movi	r16,33
    e2a8:	003fac06 	br	e15c <__gethex+0x510>
    e2ac:	07000084 	movi	fp,2
    e2b0:	003fcf06 	br	e1f0 <__gethex+0x5a4>
    e2b4:	d8c00f17 	ldw	r3,60(sp)
    e2b8:	00800044 	movi	r2,1
    e2bc:	10c5c83a 	sub	r2,r2,r3
    e2c0:	103fa526 	beq	r2,zero,e158 <__gethex+0x50c>
    e2c4:	003f5506 	br	e01c <__gethex+0x3d0>
    e2c8:	80800043 	ldbu	r2,1(r16)
    e2cc:	81000044 	addi	r4,r16,1
    e2d0:	2021883a 	mov	r16,r4
    e2d4:	9087883a 	add	r3,r18,r2
    e2d8:	18c00003 	ldbu	r3,0(r3)
    e2dc:	183e9026 	beq	r3,zero,dd20 <__gethex+0xd4>
    e2e0:	84000044 	addi	r16,r16,1
    e2e4:	80800003 	ldbu	r2,0(r16)
    e2e8:	9087883a 	add	r3,r18,r2
    e2ec:	18c00003 	ldbu	r3,0(r3)
    e2f0:	183ffb1e 	bne	r3,zero,e2e0 <__gethex+0x694>
    e2f4:	003e8a06 	br	dd20 <__gethex+0xd4>
    e2f8:	a5ff191e 	bne	r20,r23,df60 <__gethex+0x314>
    e2fc:	1dffdd0e 	bge	r3,r23,e274 <__gethex+0x628>
    e300:	b009883a 	mov	r4,r22
    e304:	b97fffc4 	addi	r5,r23,-1
    e308:	000a8040 	call	a804 <__any_on>
    e30c:	103f1426 	beq	r2,zero,df60 <__gethex+0x314>
    e310:	88800117 	ldw	r2,4(r17)
    e314:	003fd706 	br	e274 <__gethex+0x628>
    e318:	d8c00f17 	ldw	r3,60(sp)
    e31c:	183f1026 	beq	r3,zero,df60 <__gethex+0x314>
    e320:	003fd406 	br	e274 <__gethex+0x628>
    e324:	10800044 	addi	r2,r2,1
    e328:	a8800015 	stw	r2,0(r21)
    e32c:	003f5106 	br	e074 <__gethex+0x428>
    e330:	88800017 	ldw	r2,0(r17)
    e334:	10bfffc4 	addi	r2,r2,-1
    e338:	15c01426 	beq	r2,r23,e38c <__gethex+0x740>
    e33c:	04000884 	movi	r16,34
    e340:	003f8606 	br	e15c <__gethex+0x510>
    e344:	b1400117 	ldw	r5,4(r22)
    e348:	d9000117 	ldw	r4,4(sp)
    e34c:	29400044 	addi	r5,r5,1
    e350:	00098380 	call	9838 <_Balloc>
    e354:	b1800417 	ldw	r6,16(r22)
    e358:	b1400304 	addi	r5,r22,12
    e35c:	11000304 	addi	r4,r2,12
    e360:	31800084 	addi	r6,r6,2
    e364:	318d883a 	add	r6,r6,r6
    e368:	318d883a 	add	r6,r6,r6
    e36c:	102b883a 	mov	r21,r2
    e370:	00033640 	call	3364 <memcpy>
    e374:	d9000117 	ldw	r4,4(sp)
    e378:	b00b883a 	mov	r5,r22
    e37c:	a82d883a 	mov	r22,r21
    e380:	00098e00 	call	98e0 <_Bfree>
    e384:	a8800417 	ldw	r2,16(r21)
    e388:	003f3206 	br	e054 <__gethex+0x408>
    e38c:	b805d17a 	srai	r2,r23,5
    e390:	04000044 	movi	r16,1
    e394:	bdc007cc 	andi	r23,r23,31
    e398:	10800144 	addi	r2,r2,5
    e39c:	1085883a 	add	r2,r2,r2
    e3a0:	1085883a 	add	r2,r2,r2
    e3a4:	b085883a 	add	r2,r22,r2
    e3a8:	10800017 	ldw	r2,0(r2)
    e3ac:	85e0983a 	sll	r16,r16,r23
    e3b0:	80a0703a 	and	r16,r16,r2
    e3b4:	8020c03a 	cmpne	r16,r16,zero
    e3b8:	00800884 	movi	r2,34
    e3bc:	1421c83a 	sub	r16,r2,r16
    e3c0:	003f6606 	br	e15c <__gethex+0x510>

0000e3c4 <__hexnan>:
    e3c4:	defff604 	addi	sp,sp,-40
    e3c8:	dc000315 	stw	r16,12(sp)
    e3cc:	04000074 	movhi	r16,1
    e3d0:	841fc304 	addi	r16,r16,32524
    e3d4:	80800c03 	ldbu	r2,48(r16)
    e3d8:	dfc00915 	stw	ra,36(sp)
    e3dc:	dd400815 	stw	r21,32(sp)
    e3e0:	dd000715 	stw	r20,28(sp)
    e3e4:	dcc00615 	stw	r19,24(sp)
    e3e8:	dc800515 	stw	r18,20(sp)
    e3ec:	dc400415 	stw	r17,16(sp)
    e3f0:	10006c26 	beq	r2,zero,e5a4 <__hexnan+0x1e0>
    e3f4:	2d000017 	ldw	r20,0(r5)
    e3f8:	a025d17a 	srai	r18,r20,5
    e3fc:	a50007cc 	andi	r20,r20,31
    e400:	94a5883a 	add	r18,r18,r18
    e404:	94a5883a 	add	r18,r18,r18
    e408:	34a5883a 	add	r18,r6,r18
    e40c:	a0000126 	beq	r20,zero,e414 <__hexnan+0x50>
    e410:	94800104 	addi	r18,r18,4
    e414:	20c00017 	ldw	r3,0(r4)
    e418:	903fff15 	stw	zero,-4(r18)
    e41c:	947fff04 	addi	r17,r18,-4
    e420:	18800043 	ldbu	r2,1(r3)
    e424:	8817883a 	mov	r11,r17
    e428:	880b883a 	mov	r5,r17
    e42c:	0011883a 	mov	r8,zero
    e430:	001b883a 	mov	r13,zero
    e434:	0015883a 	mov	r10,zero
    e438:	03c00204 	movi	r15,8
    e43c:	03800804 	movi	r14,32
    e440:	04c001c4 	movi	r19,7
    e444:	10001b26 	beq	r2,zero,e4b4 <__hexnan+0xf0>
    e448:	808f883a 	add	r7,r16,r2
    e44c:	39c00003 	ldbu	r7,0(r7)
    e450:	3a403fcc 	andi	r9,r7,255
    e454:	4800301e 	bne	r9,zero,e518 <__hexnan+0x154>
    e458:	70804636 	bltu	r14,r2,e574 <__hexnan+0x1b0>
    e45c:	6a80120e 	bge	r13,r10,e4a8 <__hexnan+0xe4>
    e460:	2ac00f2e 	bgeu	r5,r11,e4a0 <__hexnan+0xdc>
    e464:	9a000e16 	blt	r19,r8,e4a0 <__hexnan+0xdc>
    e468:	7a11c83a 	sub	r8,r15,r8
    e46c:	4211883a 	add	r8,r8,r8
    e470:	29c00017 	ldw	r7,0(r5)
    e474:	4211883a 	add	r8,r8,r8
    e478:	722bc83a 	sub	r21,r14,r8
    e47c:	2805883a 	mov	r2,r5
    e480:	12400117 	ldw	r9,4(r2)
    e484:	10800104 	addi	r2,r2,4
    e488:	4d58983a 	sll	r12,r9,r21
    e48c:	3b18b03a 	or	r12,r7,r12
    e490:	4a0ed83a 	srl	r7,r9,r8
    e494:	133fff15 	stw	r12,-4(r2)
    e498:	11c00015 	stw	r7,0(r2)
    e49c:	12fff836 	bltu	r2,r11,e480 <__hexnan+0xbc>
    e4a0:	31402d36 	bltu	r6,r5,e558 <__hexnan+0x194>
    e4a4:	02000204 	movi	r8,8
    e4a8:	18c00044 	addi	r3,r3,1
    e4ac:	18800043 	ldbu	r2,1(r3)
    e4b0:	103fe51e 	bne	r2,zero,e448 <__hexnan+0x84>
    e4b4:	50003126 	beq	r10,zero,e57c <__hexnan+0x1b8>
    e4b8:	2ac0022e 	bgeu	r5,r11,e4c4 <__hexnan+0x100>
    e4bc:	008001c4 	movi	r2,7
    e4c0:	1200520e 	bge	r2,r8,e60c <__hexnan+0x248>
    e4c4:	31403f2e 	bgeu	r6,r5,e5c4 <__hexnan+0x200>
    e4c8:	3005883a 	mov	r2,r6
    e4cc:	28c00017 	ldw	r3,0(r5)
    e4d0:	10800104 	addi	r2,r2,4
    e4d4:	29400104 	addi	r5,r5,4
    e4d8:	10ffff15 	stw	r3,-4(r2)
    e4dc:	897ffb2e 	bgeu	r17,r5,e4cc <__hexnan+0x108>
    e4e0:	10000015 	stw	zero,0(r2)
    e4e4:	10800104 	addi	r2,r2,4
    e4e8:	88bffd2e 	bgeu	r17,r2,e4e0 <__hexnan+0x11c>
    e4ec:	90bfff17 	ldw	r2,-4(r18)
    e4f0:	1000071e 	bne	r2,zero,e510 <__hexnan+0x14c>
    e4f4:	34403c26 	beq	r6,r17,e5e8 <__hexnan+0x224>
    e4f8:	8805883a 	mov	r2,r17
    e4fc:	00000106 	br	e504 <__hexnan+0x140>
    e500:	30803a26 	beq	r6,r2,e5ec <__hexnan+0x228>
    e504:	10bfff04 	addi	r2,r2,-4
    e508:	10c00017 	ldw	r3,0(r2)
    e50c:	183ffc26 	beq	r3,zero,e500 <__hexnan+0x13c>
    e510:	00800144 	movi	r2,5
    e514:	00001a06 	br	e580 <__hexnan+0x1bc>
    e518:	42000044 	addi	r8,r8,1
    e51c:	52800044 	addi	r10,r10,1
    e520:	7a000716 	blt	r15,r8,e540 <__hexnan+0x17c>
    e524:	28800017 	ldw	r2,0(r5)
    e528:	1004913a 	slli	r2,r2,4
    e52c:	39c003cc 	andi	r7,r7,15
    e530:	11ceb03a 	or	r7,r2,r7
    e534:	29c00015 	stw	r7,0(r5)
    e538:	18c00044 	addi	r3,r3,1
    e53c:	003fdb06 	br	e4ac <__hexnan+0xe8>
    e540:	317fd92e 	bgeu	r6,r5,e4a8 <__hexnan+0xe4>
    e544:	283fff15 	stw	zero,-4(r5)
    e548:	0005883a 	mov	r2,zero
    e54c:	297fff04 	addi	r5,r5,-4
    e550:	02000044 	movi	r8,1
    e554:	003ff506 	br	e52c <__hexnan+0x168>
    e558:	283fff15 	stw	zero,-4(r5)
    e55c:	297fff04 	addi	r5,r5,-4
    e560:	501b883a 	mov	r13,r10
    e564:	2817883a 	mov	r11,r5
    e568:	0011883a 	mov	r8,zero
    e56c:	18c00044 	addi	r3,r3,1
    e570:	003fce06 	br	e4ac <__hexnan+0xe8>
    e574:	01c00a44 	movi	r7,41
    e578:	11c02026 	beq	r2,r7,e5fc <__hexnan+0x238>
    e57c:	00800104 	movi	r2,4
    e580:	dfc00917 	ldw	ra,36(sp)
    e584:	dd400817 	ldw	r21,32(sp)
    e588:	dd000717 	ldw	r20,28(sp)
    e58c:	dcc00617 	ldw	r19,24(sp)
    e590:	dc800517 	ldw	r18,20(sp)
    e594:	dc400417 	ldw	r17,16(sp)
    e598:	dc000317 	ldw	r16,12(sp)
    e59c:	dec00a04 	addi	sp,sp,40
    e5a0:	f800283a 	ret
    e5a4:	d9000015 	stw	r4,0(sp)
    e5a8:	d9400115 	stw	r5,4(sp)
    e5ac:	d9800215 	stw	r6,8(sp)
    e5b0:	000dbbc0 	call	dbbc <__hexdig_init>
    e5b4:	d9800217 	ldw	r6,8(sp)
    e5b8:	d9400117 	ldw	r5,4(sp)
    e5bc:	d9000017 	ldw	r4,0(sp)
    e5c0:	003f8c06 	br	e3f4 <__hexnan+0x30>
    e5c4:	a03fc926 	beq	r20,zero,e4ec <__hexnan+0x128>
    e5c8:	00800804 	movi	r2,32
    e5cc:	1529c83a 	sub	r20,r2,r20
    e5d0:	00ffffc4 	movi	r3,-1
    e5d4:	90bfff17 	ldw	r2,-4(r18)
    e5d8:	1d06d83a 	srl	r3,r3,r20
    e5dc:	1884703a 	and	r2,r3,r2
    e5e0:	90bfff15 	stw	r2,-4(r18)
    e5e4:	003fc206 	br	e4f0 <__hexnan+0x12c>
    e5e8:	3005883a 	mov	r2,r6
    e5ec:	00c00044 	movi	r3,1
    e5f0:	10c00015 	stw	r3,0(r2)
    e5f4:	00800144 	movi	r2,5
    e5f8:	003fe106 	br	e580 <__hexnan+0x1bc>
    e5fc:	503fdf26 	beq	r10,zero,e57c <__hexnan+0x1b8>
    e600:	18c00084 	addi	r3,r3,2
    e604:	20c00015 	stw	r3,0(r4)
    e608:	003fab06 	br	e4b8 <__hexnan+0xf4>
    e60c:	00800204 	movi	r2,8
    e610:	1211c83a 	sub	r8,r2,r8
    e614:	4211883a 	add	r8,r8,r8
    e618:	28c00017 	ldw	r3,0(r5)
    e61c:	4211883a 	add	r8,r8,r8
    e620:	02400804 	movi	r9,32
    e624:	4a13c83a 	sub	r9,r9,r8
    e628:	2805883a 	mov	r2,r5
    e62c:	11000117 	ldw	r4,4(r2)
    e630:	10800104 	addi	r2,r2,4
    e634:	224e983a 	sll	r7,r4,r9
    e638:	19ceb03a 	or	r7,r3,r7
    e63c:	2206d83a 	srl	r3,r4,r8
    e640:	11ffff15 	stw	r7,-4(r2)
    e644:	10c00015 	stw	r3,0(r2)
    e648:	12fff836 	bltu	r2,r11,e62c <__hexnan+0x268>
    e64c:	003f9d06 	br	e4c4 <__hexnan+0x100>

0000e650 <__muldi3>:
    e650:	defff604 	addi	sp,sp,-40
    e654:	dd400515 	stw	r21,20(sp)
    e658:	dd000415 	stw	r20,16(sp)
    e65c:	257fffcc 	andi	r21,r4,65535
    e660:	353fffcc 	andi	r20,r6,65535
    e664:	dcc00315 	stw	r19,12(sp)
    e668:	3026d43a 	srli	r19,r6,16
    e66c:	dd800615 	stw	r22,24(sp)
    e670:	dc800215 	stw	r18,8(sp)
    e674:	dc400115 	stw	r17,4(sp)
    e678:	2024d43a 	srli	r18,r4,16
    e67c:	2023883a 	mov	r17,r4
    e680:	282d883a 	mov	r22,r5
    e684:	a009883a 	mov	r4,r20
    e688:	a80b883a 	mov	r5,r21
    e68c:	dfc00915 	stw	ra,36(sp)
    e690:	df000815 	stw	fp,32(sp)
    e694:	ddc00715 	stw	r23,28(sp)
    e698:	3839883a 	mov	fp,r7
    e69c:	dc000015 	stw	r16,0(sp)
    e6a0:	3021883a 	mov	r16,r6
    e6a4:	00015040 	call	1504 <__mulsi3>
    e6a8:	a80b883a 	mov	r5,r21
    e6ac:	9809883a 	mov	r4,r19
    e6b0:	102f883a 	mov	r23,r2
    e6b4:	00015040 	call	1504 <__mulsi3>
    e6b8:	a009883a 	mov	r4,r20
    e6bc:	900b883a 	mov	r5,r18
    e6c0:	102b883a 	mov	r21,r2
    e6c4:	00015040 	call	1504 <__mulsi3>
    e6c8:	9809883a 	mov	r4,r19
    e6cc:	900b883a 	mov	r5,r18
    e6d0:	1029883a 	mov	r20,r2
    e6d4:	00015040 	call	1504 <__mulsi3>
    e6d8:	1007883a 	mov	r3,r2
    e6dc:	b804d43a 	srli	r2,r23,16
    e6e0:	a549883a 	add	r4,r20,r21
    e6e4:	2089883a 	add	r4,r4,r2
    e6e8:	2500022e 	bgeu	r4,r20,e6f4 <__muldi3+0xa4>
    e6ec:	00800074 	movhi	r2,1
    e6f0:	1887883a 	add	r3,r3,r2
    e6f4:	200cd43a 	srli	r6,r4,16
    e6f8:	2004943a 	slli	r2,r4,16
    e6fc:	e00b883a 	mov	r5,fp
    e700:	8809883a 	mov	r4,r17
    e704:	bdffffcc 	andi	r23,r23,65535
    e708:	19a3883a 	add	r17,r3,r6
    e70c:	15ef883a 	add	r23,r2,r23
    e710:	00015040 	call	1504 <__mulsi3>
    e714:	8009883a 	mov	r4,r16
    e718:	b00b883a 	mov	r5,r22
    e71c:	1025883a 	mov	r18,r2
    e720:	00015040 	call	1504 <__mulsi3>
    e724:	9085883a 	add	r2,r18,r2
    e728:	1447883a 	add	r3,r2,r17
    e72c:	b805883a 	mov	r2,r23
    e730:	dfc00917 	ldw	ra,36(sp)
    e734:	df000817 	ldw	fp,32(sp)
    e738:	ddc00717 	ldw	r23,28(sp)
    e73c:	dd800617 	ldw	r22,24(sp)
    e740:	dd400517 	ldw	r21,20(sp)
    e744:	dd000417 	ldw	r20,16(sp)
    e748:	dcc00317 	ldw	r19,12(sp)
    e74c:	dc800217 	ldw	r18,8(sp)
    e750:	dc400117 	ldw	r17,4(sp)
    e754:	dc000017 	ldw	r16,0(sp)
    e758:	dec00a04 	addi	sp,sp,40
    e75c:	f800283a 	ret

0000e760 <__fixunsdfsi>:
    e760:	defffd04 	addi	sp,sp,-12
    e764:	000d883a 	mov	r6,zero
    e768:	01d07834 	movhi	r7,16864
    e76c:	dc400115 	stw	r17,4(sp)
    e770:	dc000015 	stw	r16,0(sp)
    e774:	dfc00215 	stw	ra,8(sp)
    e778:	2023883a 	mov	r17,r4
    e77c:	2821883a 	mov	r16,r5
    e780:	000ff1c0 	call	ff1c <__gedf2>
    e784:	1000080e 	bge	r2,zero,e7a8 <__fixunsdfsi+0x48>
    e788:	8809883a 	mov	r4,r17
    e78c:	800b883a 	mov	r5,r16
    e790:	001010c0 	call	1010c <__fixdfsi>
    e794:	dfc00217 	ldw	ra,8(sp)
    e798:	dc400117 	ldw	r17,4(sp)
    e79c:	dc000017 	ldw	r16,0(sp)
    e7a0:	dec00304 	addi	sp,sp,12
    e7a4:	f800283a 	ret
    e7a8:	000d883a 	mov	r6,zero
    e7ac:	01d07834 	movhi	r7,16864
    e7b0:	8809883a 	mov	r4,r17
    e7b4:	800b883a 	mov	r5,r16
    e7b8:	000f9080 	call	f908 <__subdf3>
    e7bc:	180b883a 	mov	r5,r3
    e7c0:	1009883a 	mov	r4,r2
    e7c4:	001010c0 	call	1010c <__fixdfsi>
    e7c8:	00e00034 	movhi	r3,32768
    e7cc:	10c5883a 	add	r2,r2,r3
    e7d0:	dfc00217 	ldw	ra,8(sp)
    e7d4:	dc400117 	ldw	r17,4(sp)
    e7d8:	dc000017 	ldw	r16,0(sp)
    e7dc:	dec00304 	addi	sp,sp,12
    e7e0:	f800283a 	ret

0000e7e4 <__udivdi3>:
    e7e4:	defff504 	addi	sp,sp,-44
    e7e8:	dd000515 	stw	r20,20(sp)
    e7ec:	dcc00415 	stw	r19,16(sp)
    e7f0:	dc800315 	stw	r18,12(sp)
    e7f4:	dc400215 	stw	r17,8(sp)
    e7f8:	dc000115 	stw	r16,4(sp)
    e7fc:	dfc00a15 	stw	ra,40(sp)
    e800:	df000915 	stw	fp,36(sp)
    e804:	ddc00815 	stw	r23,32(sp)
    e808:	dd800715 	stw	r22,28(sp)
    e80c:	dd400615 	stw	r21,24(sp)
    e810:	2025883a 	mov	r18,r4
    e814:	2823883a 	mov	r17,r5
    e818:	3021883a 	mov	r16,r6
    e81c:	2027883a 	mov	r19,r4
    e820:	2829883a 	mov	r20,r5
    e824:	3800451e 	bne	r7,zero,e93c <__udivdi3+0x158>
    e828:	2980652e 	bgeu	r5,r6,e9c0 <__udivdi3+0x1dc>
    e82c:	00bfffd4 	movui	r2,65535
    e830:	1180b436 	bltu	r2,r6,eb04 <__udivdi3+0x320>
    e834:	00803fc4 	movi	r2,255
    e838:	11816636 	bltu	r2,r6,edd4 <__udivdi3+0x5f0>
    e83c:	0005883a 	mov	r2,zero
    e840:	0007883a 	mov	r3,zero
    e844:	3084d83a 	srl	r2,r6,r2
    e848:	01000074 	movhi	r4,1
    e84c:	2111a604 	addi	r4,r4,18072
    e850:	2085883a 	add	r2,r4,r2
    e854:	10800003 	ldbu	r2,0(r2)
    e858:	10c7883a 	add	r3,r2,r3
    e85c:	00800804 	movi	r2,32
    e860:	10c5c83a 	sub	r2,r2,r3
    e864:	10000526 	beq	r2,zero,e87c <__udivdi3+0x98>
    e868:	88a2983a 	sll	r17,r17,r2
    e86c:	90c6d83a 	srl	r3,r18,r3
    e870:	30a0983a 	sll	r16,r6,r2
    e874:	90a6983a 	sll	r19,r18,r2
    e878:	88e8b03a 	or	r20,r17,r3
    e87c:	8022d43a 	srli	r17,r16,16
    e880:	a009883a 	mov	r4,r20
    e884:	857fffcc 	andi	r21,r16,65535
    e888:	880b883a 	mov	r5,r17
    e88c:	00104840 	call	10484 <__umodsi3>
    e890:	a009883a 	mov	r4,r20
    e894:	880b883a 	mov	r5,r17
    e898:	102d883a 	mov	r22,r2
    e89c:	001047c0 	call	1047c <__udivsi3>
    e8a0:	1009883a 	mov	r4,r2
    e8a4:	a80b883a 	mov	r5,r21
    e8a8:	1025883a 	mov	r18,r2
    e8ac:	00015040 	call	1504 <__mulsi3>
    e8b0:	1009883a 	mov	r4,r2
    e8b4:	b006943a 	slli	r3,r22,16
    e8b8:	9804d43a 	srli	r2,r19,16
    e8bc:	1886b03a 	or	r3,r3,r2
    e8c0:	1900052e 	bgeu	r3,r4,e8d8 <__udivdi3+0xf4>
    e8c4:	1c07883a 	add	r3,r3,r16
    e8c8:	90bfffc4 	addi	r2,r18,-1
    e8cc:	1c000136 	bltu	r3,r16,e8d4 <__udivdi3+0xf0>
    e8d0:	19015536 	bltu	r3,r4,ee28 <__udivdi3+0x644>
    e8d4:	1025883a 	mov	r18,r2
    e8d8:	1929c83a 	sub	r20,r3,r4
    e8dc:	880b883a 	mov	r5,r17
    e8e0:	a009883a 	mov	r4,r20
    e8e4:	00104840 	call	10484 <__umodsi3>
    e8e8:	102d883a 	mov	r22,r2
    e8ec:	880b883a 	mov	r5,r17
    e8f0:	a009883a 	mov	r4,r20
    e8f4:	b02c943a 	slli	r22,r22,16
    e8f8:	001047c0 	call	1047c <__udivsi3>
    e8fc:	1009883a 	mov	r4,r2
    e900:	a80b883a 	mov	r5,r21
    e904:	9cffffcc 	andi	r19,r19,65535
    e908:	1023883a 	mov	r17,r2
    e90c:	b4e6b03a 	or	r19,r22,r19
    e910:	00015040 	call	1504 <__mulsi3>
    e914:	9880052e 	bgeu	r19,r2,e92c <__udivdi3+0x148>
    e918:	9c27883a 	add	r19,r19,r16
    e91c:	88ffffc4 	addi	r3,r17,-1
    e920:	9c011436 	bltu	r19,r16,ed74 <__udivdi3+0x590>
    e924:	9881132e 	bgeu	r19,r2,ed74 <__udivdi3+0x590>
    e928:	8c7fff84 	addi	r17,r17,-2
    e92c:	9004943a 	slli	r2,r18,16
    e930:	0007883a 	mov	r3,zero
    e934:	8884b03a 	or	r2,r17,r2
    e938:	00001506 	br	e990 <__udivdi3+0x1ac>
    e93c:	29c06a36 	bltu	r5,r7,eae8 <__udivdi3+0x304>
    e940:	00bfffd4 	movui	r2,65535
    e944:	11c06a2e 	bgeu	r2,r7,eaf0 <__udivdi3+0x30c>
    e948:	00804034 	movhi	r2,256
    e94c:	10bfffc4 	addi	r2,r2,-1
    e950:	11c11436 	bltu	r2,r7,eda4 <__udivdi3+0x5c0>
    e954:	00c00404 	movi	r3,16
    e958:	180b883a 	mov	r5,r3
    e95c:	38c6d83a 	srl	r3,r7,r3
    e960:	01000074 	movhi	r4,1
    e964:	2111a604 	addi	r4,r4,18072
    e968:	04000804 	movi	r16,32
    e96c:	20c7883a 	add	r3,r4,r3
    e970:	18800003 	ldbu	r2,0(r3)
    e974:	1145883a 	add	r2,r2,r5
    e978:	80a1c83a 	sub	r16,r16,r2
    e97c:	80006e1e 	bne	r16,zero,eb38 <__udivdi3+0x354>
    e980:	0007883a 	mov	r3,zero
    e984:	3c406a36 	bltu	r7,r17,eb30 <__udivdi3+0x34c>
    e988:	9180692e 	bgeu	r18,r6,eb30 <__udivdi3+0x34c>
    e98c:	0005883a 	mov	r2,zero
    e990:	dfc00a17 	ldw	ra,40(sp)
    e994:	df000917 	ldw	fp,36(sp)
    e998:	ddc00817 	ldw	r23,32(sp)
    e99c:	dd800717 	ldw	r22,28(sp)
    e9a0:	dd400617 	ldw	r21,24(sp)
    e9a4:	dd000517 	ldw	r20,20(sp)
    e9a8:	dcc00417 	ldw	r19,16(sp)
    e9ac:	dc800317 	ldw	r18,12(sp)
    e9b0:	dc400217 	ldw	r17,8(sp)
    e9b4:	dc000117 	ldw	r16,4(sp)
    e9b8:	dec00b04 	addi	sp,sp,44
    e9bc:	f800283a 	ret
    e9c0:	3000041e 	bne	r6,zero,e9d4 <__udivdi3+0x1f0>
    e9c4:	01000044 	movi	r4,1
    e9c8:	000b883a 	mov	r5,zero
    e9cc:	001047c0 	call	1047c <__udivsi3>
    e9d0:	1021883a 	mov	r16,r2
    e9d4:	00bfffd4 	movui	r2,65535
    e9d8:	1400502e 	bgeu	r2,r16,eb1c <__udivdi3+0x338>
    e9dc:	00804034 	movhi	r2,256
    e9e0:	10bfffc4 	addi	r2,r2,-1
    e9e4:	1400f536 	bltu	r2,r16,edbc <__udivdi3+0x5d8>
    e9e8:	00800404 	movi	r2,16
    e9ec:	1007883a 	mov	r3,r2
    e9f0:	8084d83a 	srl	r2,r16,r2
    e9f4:	01000074 	movhi	r4,1
    e9f8:	2111a604 	addi	r4,r4,18072
    e9fc:	2085883a 	add	r2,r4,r2
    ea00:	10800003 	ldbu	r2,0(r2)
    ea04:	10c7883a 	add	r3,r2,r3
    ea08:	00800804 	movi	r2,32
    ea0c:	10c5c83a 	sub	r2,r2,r3
    ea10:	1000a01e 	bne	r2,zero,ec94 <__udivdi3+0x4b0>
    ea14:	8028d43a 	srli	r20,r16,16
    ea18:	8c23c83a 	sub	r17,r17,r16
    ea1c:	857fffcc 	andi	r21,r16,65535
    ea20:	00c00044 	movi	r3,1
    ea24:	8809883a 	mov	r4,r17
    ea28:	a00b883a 	mov	r5,r20
    ea2c:	d8c00015 	stw	r3,0(sp)
    ea30:	00104840 	call	10484 <__umodsi3>
    ea34:	8809883a 	mov	r4,r17
    ea38:	a00b883a 	mov	r5,r20
    ea3c:	102d883a 	mov	r22,r2
    ea40:	001047c0 	call	1047c <__udivsi3>
    ea44:	1009883a 	mov	r4,r2
    ea48:	a80b883a 	mov	r5,r21
    ea4c:	1025883a 	mov	r18,r2
    ea50:	00015040 	call	1504 <__mulsi3>
    ea54:	1009883a 	mov	r4,r2
    ea58:	b00c943a 	slli	r6,r22,16
    ea5c:	9804d43a 	srli	r2,r19,16
    ea60:	d8c00017 	ldw	r3,0(sp)
    ea64:	308cb03a 	or	r6,r6,r2
    ea68:	3100052e 	bgeu	r6,r4,ea80 <__udivdi3+0x29c>
    ea6c:	340d883a 	add	r6,r6,r16
    ea70:	90bfffc4 	addi	r2,r18,-1
    ea74:	34000136 	bltu	r6,r16,ea7c <__udivdi3+0x298>
    ea78:	3100e836 	bltu	r6,r4,ee1c <__udivdi3+0x638>
    ea7c:	1025883a 	mov	r18,r2
    ea80:	3123c83a 	sub	r17,r6,r4
    ea84:	8809883a 	mov	r4,r17
    ea88:	a00b883a 	mov	r5,r20
    ea8c:	d8c00015 	stw	r3,0(sp)
    ea90:	00104840 	call	10484 <__umodsi3>
    ea94:	102d883a 	mov	r22,r2
    ea98:	8809883a 	mov	r4,r17
    ea9c:	a00b883a 	mov	r5,r20
    eaa0:	b02c943a 	slli	r22,r22,16
    eaa4:	001047c0 	call	1047c <__udivsi3>
    eaa8:	1009883a 	mov	r4,r2
    eaac:	a80b883a 	mov	r5,r21
    eab0:	9cffffcc 	andi	r19,r19,65535
    eab4:	1023883a 	mov	r17,r2
    eab8:	b4e6b03a 	or	r19,r22,r19
    eabc:	00015040 	call	1504 <__mulsi3>
    eac0:	d8c00017 	ldw	r3,0(sp)
    eac4:	9880052e 	bgeu	r19,r2,eadc <__udivdi3+0x2f8>
    eac8:	9c27883a 	add	r19,r19,r16
    eacc:	893fffc4 	addi	r4,r17,-1
    ead0:	9c00aa36 	bltu	r19,r16,ed7c <__udivdi3+0x598>
    ead4:	9880a92e 	bgeu	r19,r2,ed7c <__udivdi3+0x598>
    ead8:	8c7fff84 	addi	r17,r17,-2
    eadc:	9004943a 	slli	r2,r18,16
    eae0:	8884b03a 	or	r2,r17,r2
    eae4:	003faa06 	br	e990 <__udivdi3+0x1ac>
    eae8:	0007883a 	mov	r3,zero
    eaec:	003fa706 	br	e98c <__udivdi3+0x1a8>
    eaf0:	00803fc4 	movi	r2,255
    eaf4:	11c0ae36 	bltu	r2,r7,edb0 <__udivdi3+0x5cc>
    eaf8:	0007883a 	mov	r3,zero
    eafc:	000b883a 	mov	r5,zero
    eb00:	003f9606 	br	e95c <__udivdi3+0x178>
    eb04:	00804034 	movhi	r2,256
    eb08:	10bfffc4 	addi	r2,r2,-1
    eb0c:	1180ae36 	bltu	r2,r6,edc8 <__udivdi3+0x5e4>
    eb10:	00800404 	movi	r2,16
    eb14:	1007883a 	mov	r3,r2
    eb18:	003f4a06 	br	e844 <__udivdi3+0x60>
    eb1c:	00803fc4 	movi	r2,255
    eb20:	1400af36 	bltu	r2,r16,ede0 <__udivdi3+0x5fc>
    eb24:	0005883a 	mov	r2,zero
    eb28:	0007883a 	mov	r3,zero
    eb2c:	003fb006 	br	e9f0 <__udivdi3+0x20c>
    eb30:	00800044 	movi	r2,1
    eb34:	003f9606 	br	e990 <__udivdi3+0x1ac>
    eb38:	3c0e983a 	sll	r7,r7,r16
    eb3c:	3086d83a 	srl	r3,r6,r2
    eb40:	88aed83a 	srl	r23,r17,r2
    eb44:	9084d83a 	srl	r2,r18,r2
    eb48:	38e6b03a 	or	r19,r7,r3
    eb4c:	9828d43a 	srli	r20,r19,16
    eb50:	8c22983a 	sll	r17,r17,r16
    eb54:	b809883a 	mov	r4,r23
    eb58:	a00b883a 	mov	r5,r20
    eb5c:	342a983a 	sll	r21,r6,r16
    eb60:	88a2b03a 	or	r17,r17,r2
    eb64:	00104840 	call	10484 <__umodsi3>
    eb68:	b809883a 	mov	r4,r23
    eb6c:	a00b883a 	mov	r5,r20
    eb70:	1039883a 	mov	fp,r2
    eb74:	9dbfffcc 	andi	r22,r19,65535
    eb78:	001047c0 	call	1047c <__udivsi3>
    eb7c:	1009883a 	mov	r4,r2
    eb80:	b00b883a 	mov	r5,r22
    eb84:	102f883a 	mov	r23,r2
    eb88:	00015040 	call	1504 <__mulsi3>
    eb8c:	1009883a 	mov	r4,r2
    eb90:	e00e943a 	slli	r7,fp,16
    eb94:	8804d43a 	srli	r2,r17,16
    eb98:	388eb03a 	or	r7,r7,r2
    eb9c:	3900042e 	bgeu	r7,r4,ebb0 <__udivdi3+0x3cc>
    eba0:	3ccf883a 	add	r7,r7,r19
    eba4:	b8bfffc4 	addi	r2,r23,-1
    eba8:	3cc0942e 	bgeu	r7,r19,edfc <__udivdi3+0x618>
    ebac:	102f883a 	mov	r23,r2
    ebb0:	3939c83a 	sub	fp,r7,r4
    ebb4:	a00b883a 	mov	r5,r20
    ebb8:	e009883a 	mov	r4,fp
    ebbc:	00104840 	call	10484 <__umodsi3>
    ebc0:	a00b883a 	mov	r5,r20
    ebc4:	e009883a 	mov	r4,fp
    ebc8:	d8800015 	stw	r2,0(sp)
    ebcc:	001047c0 	call	1047c <__udivsi3>
    ebd0:	1009883a 	mov	r4,r2
    ebd4:	b00b883a 	mov	r5,r22
    ebd8:	1029883a 	mov	r20,r2
    ebdc:	00015040 	call	1504 <__mulsi3>
    ebe0:	d8c00017 	ldw	r3,0(sp)
    ebe4:	8c7fffcc 	andi	r17,r17,65535
    ebe8:	1806943a 	slli	r3,r3,16
    ebec:	1c46b03a 	or	r3,r3,r17
    ebf0:	1880042e 	bgeu	r3,r2,ec04 <__udivdi3+0x420>
    ebf4:	1cc7883a 	add	r3,r3,r19
    ebf8:	a13fffc4 	addi	r4,r20,-1
    ebfc:	1cc07b2e 	bgeu	r3,r19,edec <__udivdi3+0x608>
    ec00:	2029883a 	mov	r20,r4
    ec04:	b82e943a 	slli	r23,r23,16
    ec08:	a822d43a 	srli	r17,r21,16
    ec0c:	ad7fffcc 	andi	r21,r21,65535
    ec10:	a5e8b03a 	or	r20,r20,r23
    ec14:	a5bfffcc 	andi	r22,r20,65535
    ec18:	b009883a 	mov	r4,r22
    ec1c:	a80b883a 	mov	r5,r21
    ec20:	18afc83a 	sub	r23,r3,r2
    ec24:	a026d43a 	srli	r19,r20,16
    ec28:	00015040 	call	1504 <__mulsi3>
    ec2c:	b009883a 	mov	r4,r22
    ec30:	880b883a 	mov	r5,r17
    ec34:	1039883a 	mov	fp,r2
    ec38:	00015040 	call	1504 <__mulsi3>
    ec3c:	a80b883a 	mov	r5,r21
    ec40:	9809883a 	mov	r4,r19
    ec44:	102d883a 	mov	r22,r2
    ec48:	00015040 	call	1504 <__mulsi3>
    ec4c:	9809883a 	mov	r4,r19
    ec50:	880b883a 	mov	r5,r17
    ec54:	102b883a 	mov	r21,r2
    ec58:	00015040 	call	1504 <__mulsi3>
    ec5c:	100b883a 	mov	r5,r2
    ec60:	e004d43a 	srli	r2,fp,16
    ec64:	ad89883a 	add	r4,r21,r22
    ec68:	2089883a 	add	r4,r4,r2
    ec6c:	2540022e 	bgeu	r4,r21,ec78 <__udivdi3+0x494>
    ec70:	00800074 	movhi	r2,1
    ec74:	288b883a 	add	r5,r5,r2
    ec78:	2004d43a 	srli	r2,r4,16
    ec7c:	288b883a 	add	r5,r5,r2
    ec80:	b9404536 	bltu	r23,r5,ed98 <__udivdi3+0x5b4>
    ec84:	b9403f26 	beq	r23,r5,ed84 <__udivdi3+0x5a0>
    ec88:	a005883a 	mov	r2,r20
    ec8c:	0007883a 	mov	r3,zero
    ec90:	003f3f06 	br	e990 <__udivdi3+0x1ac>
    ec94:	80a0983a 	sll	r16,r16,r2
    ec98:	88eed83a 	srl	r23,r17,r3
    ec9c:	90c6d83a 	srl	r3,r18,r3
    eca0:	8028d43a 	srli	r20,r16,16
    eca4:	88a2983a 	sll	r17,r17,r2
    eca8:	b809883a 	mov	r4,r23
    ecac:	a00b883a 	mov	r5,r20
    ecb0:	88ecb03a 	or	r22,r17,r3
    ecb4:	90a6983a 	sll	r19,r18,r2
    ecb8:	00104840 	call	10484 <__umodsi3>
    ecbc:	b809883a 	mov	r4,r23
    ecc0:	a00b883a 	mov	r5,r20
    ecc4:	1023883a 	mov	r17,r2
    ecc8:	857fffcc 	andi	r21,r16,65535
    eccc:	001047c0 	call	1047c <__udivsi3>
    ecd0:	1009883a 	mov	r4,r2
    ecd4:	a80b883a 	mov	r5,r21
    ecd8:	102f883a 	mov	r23,r2
    ecdc:	00015040 	call	1504 <__mulsi3>
    ece0:	1009883a 	mov	r4,r2
    ece4:	880a943a 	slli	r5,r17,16
    ece8:	b004d43a 	srli	r2,r22,16
    ecec:	288ab03a 	or	r5,r5,r2
    ecf0:	2900062e 	bgeu	r5,r4,ed0c <__udivdi3+0x528>
    ecf4:	2c0b883a 	add	r5,r5,r16
    ecf8:	b8bfffc4 	addi	r2,r23,-1
    ecfc:	2c004536 	bltu	r5,r16,ee14 <__udivdi3+0x630>
    ed00:	2900442e 	bgeu	r5,r4,ee14 <__udivdi3+0x630>
    ed04:	bdffff84 	addi	r23,r23,-2
    ed08:	2c0b883a 	add	r5,r5,r16
    ed0c:	2925c83a 	sub	r18,r5,r4
    ed10:	9009883a 	mov	r4,r18
    ed14:	a00b883a 	mov	r5,r20
    ed18:	00104840 	call	10484 <__umodsi3>
    ed1c:	1023883a 	mov	r17,r2
    ed20:	9009883a 	mov	r4,r18
    ed24:	a00b883a 	mov	r5,r20
    ed28:	8822943a 	slli	r17,r17,16
    ed2c:	001047c0 	call	1047c <__udivsi3>
    ed30:	1009883a 	mov	r4,r2
    ed34:	a80b883a 	mov	r5,r21
    ed38:	b5bfffcc 	andi	r22,r22,65535
    ed3c:	1025883a 	mov	r18,r2
    ed40:	8da2b03a 	or	r17,r17,r22
    ed44:	00015040 	call	1504 <__mulsi3>
    ed48:	8880062e 	bgeu	r17,r2,ed64 <__udivdi3+0x580>
    ed4c:	8c23883a 	add	r17,r17,r16
    ed50:	90ffffc4 	addi	r3,r18,-1
    ed54:	8c002d36 	bltu	r17,r16,ee0c <__udivdi3+0x628>
    ed58:	88802c2e 	bgeu	r17,r2,ee0c <__udivdi3+0x628>
    ed5c:	94bfff84 	addi	r18,r18,-2
    ed60:	8c23883a 	add	r17,r17,r16
    ed64:	b806943a 	slli	r3,r23,16
    ed68:	88a3c83a 	sub	r17,r17,r2
    ed6c:	90c6b03a 	or	r3,r18,r3
    ed70:	003f2c06 	br	ea24 <__udivdi3+0x240>
    ed74:	1823883a 	mov	r17,r3
    ed78:	003eec06 	br	e92c <__udivdi3+0x148>
    ed7c:	2023883a 	mov	r17,r4
    ed80:	003f5606 	br	eadc <__udivdi3+0x2f8>
    ed84:	2008943a 	slli	r4,r4,16
    ed88:	9420983a 	sll	r16,r18,r16
    ed8c:	e73fffcc 	andi	fp,fp,65535
    ed90:	2709883a 	add	r4,r4,fp
    ed94:	813fbc2e 	bgeu	r16,r4,ec88 <__udivdi3+0x4a4>
    ed98:	a0bfffc4 	addi	r2,r20,-1
    ed9c:	0007883a 	mov	r3,zero
    eda0:	003efb06 	br	e990 <__udivdi3+0x1ac>
    eda4:	00c00604 	movi	r3,24
    eda8:	180b883a 	mov	r5,r3
    edac:	003eeb06 	br	e95c <__udivdi3+0x178>
    edb0:	00c00204 	movi	r3,8
    edb4:	180b883a 	mov	r5,r3
    edb8:	003ee806 	br	e95c <__udivdi3+0x178>
    edbc:	00800604 	movi	r2,24
    edc0:	1007883a 	mov	r3,r2
    edc4:	003f0a06 	br	e9f0 <__udivdi3+0x20c>
    edc8:	00800604 	movi	r2,24
    edcc:	1007883a 	mov	r3,r2
    edd0:	003e9c06 	br	e844 <__udivdi3+0x60>
    edd4:	00800204 	movi	r2,8
    edd8:	1007883a 	mov	r3,r2
    eddc:	003e9906 	br	e844 <__udivdi3+0x60>
    ede0:	00800204 	movi	r2,8
    ede4:	1007883a 	mov	r3,r2
    ede8:	003f0106 	br	e9f0 <__udivdi3+0x20c>
    edec:	18bf842e 	bgeu	r3,r2,ec00 <__udivdi3+0x41c>
    edf0:	a53fff84 	addi	r20,r20,-2
    edf4:	1cc7883a 	add	r3,r3,r19
    edf8:	003f8206 	br	ec04 <__udivdi3+0x420>
    edfc:	393f6b2e 	bgeu	r7,r4,ebac <__udivdi3+0x3c8>
    ee00:	bdffff84 	addi	r23,r23,-2
    ee04:	3ccf883a 	add	r7,r7,r19
    ee08:	003f6906 	br	ebb0 <__udivdi3+0x3cc>
    ee0c:	1825883a 	mov	r18,r3
    ee10:	003fd406 	br	ed64 <__udivdi3+0x580>
    ee14:	102f883a 	mov	r23,r2
    ee18:	003fbc06 	br	ed0c <__udivdi3+0x528>
    ee1c:	94bfff84 	addi	r18,r18,-2
    ee20:	340d883a 	add	r6,r6,r16
    ee24:	003f1606 	br	ea80 <__udivdi3+0x29c>
    ee28:	94bfff84 	addi	r18,r18,-2
    ee2c:	1c07883a 	add	r3,r3,r16
    ee30:	003ea906 	br	e8d8 <__udivdi3+0xf4>

0000ee34 <__umoddi3>:
    ee34:	defff304 	addi	sp,sp,-52
    ee38:	dd000715 	stw	r20,28(sp)
    ee3c:	dcc00615 	stw	r19,24(sp)
    ee40:	dc800515 	stw	r18,20(sp)
    ee44:	dc400415 	stw	r17,16(sp)
    ee48:	dc000315 	stw	r16,12(sp)
    ee4c:	dfc00c15 	stw	ra,48(sp)
    ee50:	df000b15 	stw	fp,44(sp)
    ee54:	ddc00a15 	stw	r23,40(sp)
    ee58:	dd800915 	stw	r22,36(sp)
    ee5c:	dd400815 	stw	r21,32(sp)
    ee60:	2025883a 	mov	r18,r4
    ee64:	2823883a 	mov	r17,r5
    ee68:	3021883a 	mov	r16,r6
    ee6c:	2027883a 	mov	r19,r4
    ee70:	2829883a 	mov	r20,r5
    ee74:	38003a1e 	bne	r7,zero,ef60 <__umoddi3+0x12c>
    ee78:	2980522e 	bgeu	r5,r6,efc4 <__umoddi3+0x190>
    ee7c:	00bfffd4 	movui	r2,65535
    ee80:	1180a436 	bltu	r2,r6,f114 <__umoddi3+0x2e0>
    ee84:	00803fc4 	movi	r2,255
    ee88:	11816036 	bltu	r2,r6,f40c <__umoddi3+0x5d8>
    ee8c:	0005883a 	mov	r2,zero
    ee90:	0009883a 	mov	r4,zero
    ee94:	3084d83a 	srl	r2,r6,r2
    ee98:	00c00074 	movhi	r3,1
    ee9c:	18d1a604 	addi	r3,r3,18072
    eea0:	05400804 	movi	r21,32
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	10800003 	ldbu	r2,0(r2)
    eeac:	1109883a 	add	r4,r2,r4
    eeb0:	a92bc83a 	sub	r21,r21,r4
    eeb4:	a8010e26 	beq	r21,zero,f2f0 <__umoddi3+0x4bc>
    eeb8:	8d62983a 	sll	r17,r17,r21
    eebc:	9108d83a 	srl	r4,r18,r4
    eec0:	3560983a 	sll	r16,r6,r21
    eec4:	9566983a 	sll	r19,r18,r21
    eec8:	8928b03a 	or	r20,r17,r4
    eecc:	8022d43a 	srli	r17,r16,16
    eed0:	a009883a 	mov	r4,r20
    eed4:	84bfffcc 	andi	r18,r16,65535
    eed8:	880b883a 	mov	r5,r17
    eedc:	00104840 	call	10484 <__umodsi3>
    eee0:	a009883a 	mov	r4,r20
    eee4:	880b883a 	mov	r5,r17
    eee8:	102d883a 	mov	r22,r2
    eeec:	001047c0 	call	1047c <__udivsi3>
    eef0:	1009883a 	mov	r4,r2
    eef4:	900b883a 	mov	r5,r18
    eef8:	00015040 	call	1504 <__mulsi3>
    eefc:	1009883a 	mov	r4,r2
    ef00:	b006943a 	slli	r3,r22,16
    ef04:	9804d43a 	srli	r2,r19,16
    ef08:	1886b03a 	or	r3,r3,r2
    ef0c:	1900042e 	bgeu	r3,r4,ef20 <__umoddi3+0xec>
    ef10:	1c07883a 	add	r3,r3,r16
    ef14:	1c000236 	bltu	r3,r16,ef20 <__umoddi3+0xec>
    ef18:	1900012e 	bgeu	r3,r4,ef20 <__umoddi3+0xec>
    ef1c:	1c07883a 	add	r3,r3,r16
    ef20:	1929c83a 	sub	r20,r3,r4
    ef24:	a009883a 	mov	r4,r20
    ef28:	880b883a 	mov	r5,r17
    ef2c:	00104840 	call	10484 <__umodsi3>
    ef30:	102d883a 	mov	r22,r2
    ef34:	a009883a 	mov	r4,r20
    ef38:	880b883a 	mov	r5,r17
    ef3c:	b02c943a 	slli	r22,r22,16
    ef40:	001047c0 	call	1047c <__udivsi3>
    ef44:	1009883a 	mov	r4,r2
    ef48:	900b883a 	mov	r5,r18
    ef4c:	9cffffcc 	andi	r19,r19,65535
    ef50:	00015040 	call	1504 <__mulsi3>
    ef54:	b4e6b03a 	or	r19,r22,r19
    ef58:	9880572e 	bgeu	r19,r2,f0b8 <__umoddi3+0x284>
    ef5c:	00005206 	br	f0a8 <__umoddi3+0x274>
    ef60:	29c05936 	bltu	r5,r7,f0c8 <__umoddi3+0x294>
    ef64:	00bfffd4 	movui	r2,65535
    ef68:	11c0652e 	bgeu	r2,r7,f100 <__umoddi3+0x2cc>
    ef6c:	00804034 	movhi	r2,256
    ef70:	10bfffc4 	addi	r2,r2,-1
    ef74:	11c11936 	bltu	r2,r7,f3dc <__umoddi3+0x5a8>
    ef78:	00c00404 	movi	r3,16
    ef7c:	1827883a 	mov	r19,r3
    ef80:	38c6d83a 	srl	r3,r7,r3
    ef84:	01000074 	movhi	r4,1
    ef88:	2111a604 	addi	r4,r4,18072
    ef8c:	04000804 	movi	r16,32
    ef90:	20c7883a 	add	r3,r4,r3
    ef94:	18800003 	ldbu	r2,0(r3)
    ef98:	14e7883a 	add	r19,r2,r19
    ef9c:	84e1c83a 	sub	r16,r16,r19
    efa0:	8000671e 	bne	r16,zero,f140 <__umoddi3+0x30c>
    efa4:	3c400136 	bltu	r7,r17,efac <__umoddi3+0x178>
    efa8:	91812536 	bltu	r18,r6,f440 <__umoddi3+0x60c>
    efac:	9185c83a 	sub	r2,r18,r6
    efb0:	89e3c83a 	sub	r17,r17,r7
    efb4:	90a5803a 	cmpltu	r18,r18,r2
    efb8:	8ca9c83a 	sub	r20,r17,r18
    efbc:	a007883a 	mov	r3,r20
    efc0:	00004306 	br	f0d0 <__umoddi3+0x29c>
    efc4:	3000041e 	bne	r6,zero,efd8 <__umoddi3+0x1a4>
    efc8:	01000044 	movi	r4,1
    efcc:	000b883a 	mov	r5,zero
    efd0:	001047c0 	call	1047c <__udivsi3>
    efd4:	1021883a 	mov	r16,r2
    efd8:	00bfffd4 	movui	r2,65535
    efdc:	1400532e 	bgeu	r2,r16,f12c <__umoddi3+0x2f8>
    efe0:	00804034 	movhi	r2,256
    efe4:	10bfffc4 	addi	r2,r2,-1
    efe8:	14010536 	bltu	r2,r16,f400 <__umoddi3+0x5cc>
    efec:	00800404 	movi	r2,16
    eff0:	1007883a 	mov	r3,r2
    eff4:	8084d83a 	srl	r2,r16,r2
    eff8:	01000074 	movhi	r4,1
    effc:	2111a604 	addi	r4,r4,18072
    f000:	05400804 	movi	r21,32
    f004:	2085883a 	add	r2,r4,r2
    f008:	10800003 	ldbu	r2,0(r2)
    f00c:	10c7883a 	add	r3,r2,r3
    f010:	a8ebc83a 	sub	r21,r21,r3
    f014:	a800b81e 	bne	r21,zero,f2f8 <__umoddi3+0x4c4>
    f018:	8028d43a 	srli	r20,r16,16
    f01c:	8c23c83a 	sub	r17,r17,r16
    f020:	85bfffcc 	andi	r22,r16,65535
    f024:	8809883a 	mov	r4,r17
    f028:	a00b883a 	mov	r5,r20
    f02c:	00104840 	call	10484 <__umodsi3>
    f030:	8809883a 	mov	r4,r17
    f034:	a00b883a 	mov	r5,r20
    f038:	1025883a 	mov	r18,r2
    f03c:	001047c0 	call	1047c <__udivsi3>
    f040:	1009883a 	mov	r4,r2
    f044:	b00b883a 	mov	r5,r22
    f048:	00015040 	call	1504 <__mulsi3>
    f04c:	1009883a 	mov	r4,r2
    f050:	9006943a 	slli	r3,r18,16
    f054:	9804d43a 	srli	r2,r19,16
    f058:	1886b03a 	or	r3,r3,r2
    f05c:	1900032e 	bgeu	r3,r4,f06c <__umoddi3+0x238>
    f060:	1c07883a 	add	r3,r3,r16
    f064:	1c000136 	bltu	r3,r16,f06c <__umoddi3+0x238>
    f068:	1900f336 	bltu	r3,r4,f438 <__umoddi3+0x604>
    f06c:	1923c83a 	sub	r17,r3,r4
    f070:	8809883a 	mov	r4,r17
    f074:	a00b883a 	mov	r5,r20
    f078:	00104840 	call	10484 <__umodsi3>
    f07c:	102f883a 	mov	r23,r2
    f080:	8809883a 	mov	r4,r17
    f084:	a00b883a 	mov	r5,r20
    f088:	b82e943a 	slli	r23,r23,16
    f08c:	001047c0 	call	1047c <__udivsi3>
    f090:	1009883a 	mov	r4,r2
    f094:	b00b883a 	mov	r5,r22
    f098:	9cffffcc 	andi	r19,r19,65535
    f09c:	00015040 	call	1504 <__mulsi3>
    f0a0:	bce6b03a 	or	r19,r23,r19
    f0a4:	9880042e 	bgeu	r19,r2,f0b8 <__umoddi3+0x284>
    f0a8:	9c27883a 	add	r19,r19,r16
    f0ac:	9c000236 	bltu	r19,r16,f0b8 <__umoddi3+0x284>
    f0b0:	9880012e 	bgeu	r19,r2,f0b8 <__umoddi3+0x284>
    f0b4:	9c27883a 	add	r19,r19,r16
    f0b8:	9885c83a 	sub	r2,r19,r2
    f0bc:	1544d83a 	srl	r2,r2,r21
    f0c0:	0007883a 	mov	r3,zero
    f0c4:	00000206 	br	f0d0 <__umoddi3+0x29c>
    f0c8:	2005883a 	mov	r2,r4
    f0cc:	2807883a 	mov	r3,r5
    f0d0:	dfc00c17 	ldw	ra,48(sp)
    f0d4:	df000b17 	ldw	fp,44(sp)
    f0d8:	ddc00a17 	ldw	r23,40(sp)
    f0dc:	dd800917 	ldw	r22,36(sp)
    f0e0:	dd400817 	ldw	r21,32(sp)
    f0e4:	dd000717 	ldw	r20,28(sp)
    f0e8:	dcc00617 	ldw	r19,24(sp)
    f0ec:	dc800517 	ldw	r18,20(sp)
    f0f0:	dc400417 	ldw	r17,16(sp)
    f0f4:	dc000317 	ldw	r16,12(sp)
    f0f8:	dec00d04 	addi	sp,sp,52
    f0fc:	f800283a 	ret
    f100:	00803fc4 	movi	r2,255
    f104:	11c0b236 	bltu	r2,r7,f3d0 <__umoddi3+0x59c>
    f108:	0007883a 	mov	r3,zero
    f10c:	0027883a 	mov	r19,zero
    f110:	003f9b06 	br	ef80 <__umoddi3+0x14c>
    f114:	00804034 	movhi	r2,256
    f118:	10bfffc4 	addi	r2,r2,-1
    f11c:	1180b236 	bltu	r2,r6,f3e8 <__umoddi3+0x5b4>
    f120:	00800404 	movi	r2,16
    f124:	1009883a 	mov	r4,r2
    f128:	003f5a06 	br	ee94 <__umoddi3+0x60>
    f12c:	00803fc4 	movi	r2,255
    f130:	1400b036 	bltu	r2,r16,f3f4 <__umoddi3+0x5c0>
    f134:	0005883a 	mov	r2,zero
    f138:	0007883a 	mov	r3,zero
    f13c:	003fad06 	br	eff4 <__umoddi3+0x1c0>
    f140:	34c4d83a 	srl	r2,r6,r19
    f144:	3c0e983a 	sll	r7,r7,r16
    f148:	8cf8d83a 	srl	fp,r17,r19
    f14c:	8c22983a 	sll	r17,r17,r16
    f150:	38a8b03a 	or	r20,r7,r2
    f154:	a02ad43a 	srli	r21,r20,16
    f158:	94c4d83a 	srl	r2,r18,r19
    f15c:	e009883a 	mov	r4,fp
    f160:	a80b883a 	mov	r5,r21
    f164:	342c983a 	sll	r22,r6,r16
    f168:	88a2b03a 	or	r17,r17,r2
    f16c:	00104840 	call	10484 <__umodsi3>
    f170:	e009883a 	mov	r4,fp
    f174:	a80b883a 	mov	r5,r21
    f178:	a5ffffcc 	andi	r23,r20,65535
    f17c:	d8800215 	stw	r2,8(sp)
    f180:	001047c0 	call	1047c <__udivsi3>
    f184:	1009883a 	mov	r4,r2
    f188:	b80b883a 	mov	r5,r23
    f18c:	1039883a 	mov	fp,r2
    f190:	00015040 	call	1504 <__mulsi3>
    f194:	d8c00217 	ldw	r3,8(sp)
    f198:	1009883a 	mov	r4,r2
    f19c:	8804d43a 	srli	r2,r17,16
    f1a0:	1806943a 	slli	r3,r3,16
    f1a4:	9424983a 	sll	r18,r18,r16
    f1a8:	1886b03a 	or	r3,r3,r2
    f1ac:	1900042e 	bgeu	r3,r4,f1c0 <__umoddi3+0x38c>
    f1b0:	1d07883a 	add	r3,r3,r20
    f1b4:	e0bfffc4 	addi	r2,fp,-1
    f1b8:	1d009b2e 	bgeu	r3,r20,f428 <__umoddi3+0x5f4>
    f1bc:	1039883a 	mov	fp,r2
    f1c0:	1907c83a 	sub	r3,r3,r4
    f1c4:	1809883a 	mov	r4,r3
    f1c8:	a80b883a 	mov	r5,r21
    f1cc:	d8c00215 	stw	r3,8(sp)
    f1d0:	00104840 	call	10484 <__umodsi3>
    f1d4:	d8c00217 	ldw	r3,8(sp)
    f1d8:	a80b883a 	mov	r5,r21
    f1dc:	d8800015 	stw	r2,0(sp)
    f1e0:	1809883a 	mov	r4,r3
    f1e4:	001047c0 	call	1047c <__udivsi3>
    f1e8:	1009883a 	mov	r4,r2
    f1ec:	b80b883a 	mov	r5,r23
    f1f0:	102b883a 	mov	r21,r2
    f1f4:	00015040 	call	1504 <__mulsi3>
    f1f8:	d9c00017 	ldw	r7,0(sp)
    f1fc:	8c7fffcc 	andi	r17,r17,65535
    f200:	380e943a 	slli	r7,r7,16
    f204:	3c4eb03a 	or	r7,r7,r17
    f208:	3880042e 	bgeu	r7,r2,f21c <__umoddi3+0x3e8>
    f20c:	3d0f883a 	add	r7,r7,r20
    f210:	a8ffffc4 	addi	r3,r21,-1
    f214:	3d00802e 	bgeu	r7,r20,f418 <__umoddi3+0x5e4>
    f218:	182b883a 	mov	r21,r3
    f21c:	e038943a 	slli	fp,fp,16
    f220:	b010d43a 	srli	r8,r22,16
    f224:	b1bfffcc 	andi	r6,r22,65535
    f228:	af2ab03a 	or	r21,r21,fp
    f22c:	a82ed43a 	srli	r23,r21,16
    f230:	ad7fffcc 	andi	r21,r21,65535
    f234:	300b883a 	mov	r5,r6
    f238:	a809883a 	mov	r4,r21
    f23c:	38a3c83a 	sub	r17,r7,r2
    f240:	d9800115 	stw	r6,4(sp)
    f244:	da000015 	stw	r8,0(sp)
    f248:	00015040 	call	1504 <__mulsi3>
    f24c:	da000017 	ldw	r8,0(sp)
    f250:	a809883a 	mov	r4,r21
    f254:	1039883a 	mov	fp,r2
    f258:	400b883a 	mov	r5,r8
    f25c:	da000215 	stw	r8,8(sp)
    f260:	00015040 	call	1504 <__mulsi3>
    f264:	d9800117 	ldw	r6,4(sp)
    f268:	b809883a 	mov	r4,r23
    f26c:	d8800015 	stw	r2,0(sp)
    f270:	300b883a 	mov	r5,r6
    f274:	00015040 	call	1504 <__mulsi3>
    f278:	d8c00217 	ldw	r3,8(sp)
    f27c:	b809883a 	mov	r4,r23
    f280:	102b883a 	mov	r21,r2
    f284:	180b883a 	mov	r5,r3
    f288:	00015040 	call	1504 <__mulsi3>
    f28c:	d9c00017 	ldw	r7,0(sp)
    f290:	1007883a 	mov	r3,r2
    f294:	e004d43a 	srli	r2,fp,16
    f298:	a9c9883a 	add	r4,r21,r7
    f29c:	2089883a 	add	r4,r4,r2
    f2a0:	2540022e 	bgeu	r4,r21,f2ac <__umoddi3+0x478>
    f2a4:	00800074 	movhi	r2,1
    f2a8:	1887883a 	add	r3,r3,r2
    f2ac:	2004d43a 	srli	r2,r4,16
    f2b0:	2008943a 	slli	r4,r4,16
    f2b4:	e73fffcc 	andi	fp,fp,65535
    f2b8:	1887883a 	add	r3,r3,r2
    f2bc:	2709883a 	add	r4,r4,fp
    f2c0:	88c03d36 	bltu	r17,r3,f3b8 <__umoddi3+0x584>
    f2c4:	88c06126 	beq	r17,r3,f44c <__umoddi3+0x618>
    f2c8:	88c7c83a 	sub	r3,r17,r3
    f2cc:	202d883a 	mov	r22,r4
    f2d0:	95adc83a 	sub	r22,r18,r22
    f2d4:	95a5803a 	cmpltu	r18,r18,r22
    f2d8:	1c87c83a 	sub	r3,r3,r18
    f2dc:	1cc4983a 	sll	r2,r3,r19
    f2e0:	b42cd83a 	srl	r22,r22,r16
    f2e4:	1c06d83a 	srl	r3,r3,r16
    f2e8:	1584b03a 	or	r2,r2,r22
    f2ec:	003f7806 	br	f0d0 <__umoddi3+0x29c>
    f2f0:	002b883a 	mov	r21,zero
    f2f4:	003ef506 	br	eecc <__umoddi3+0x98>
    f2f8:	8560983a 	sll	r16,r16,r21
    f2fc:	88e6d83a 	srl	r19,r17,r3
    f300:	90c6d83a 	srl	r3,r18,r3
    f304:	8028d43a 	srli	r20,r16,16
    f308:	8d62983a 	sll	r17,r17,r21
    f30c:	9809883a 	mov	r4,r19
    f310:	a00b883a 	mov	r5,r20
    f314:	88eeb03a 	or	r23,r17,r3
    f318:	00104840 	call	10484 <__umodsi3>
    f31c:	9809883a 	mov	r4,r19
    f320:	a00b883a 	mov	r5,r20
    f324:	1023883a 	mov	r17,r2
    f328:	85bfffcc 	andi	r22,r16,65535
    f32c:	001047c0 	call	1047c <__udivsi3>
    f330:	1009883a 	mov	r4,r2
    f334:	b00b883a 	mov	r5,r22
    f338:	00015040 	call	1504 <__mulsi3>
    f33c:	1007883a 	mov	r3,r2
    f340:	8808943a 	slli	r4,r17,16
    f344:	b804d43a 	srli	r2,r23,16
    f348:	9566983a 	sll	r19,r18,r21
    f34c:	2088b03a 	or	r4,r4,r2
    f350:	20c0042e 	bgeu	r4,r3,f364 <__umoddi3+0x530>
    f354:	2409883a 	add	r4,r4,r16
    f358:	24000236 	bltu	r4,r16,f364 <__umoddi3+0x530>
    f35c:	20c0012e 	bgeu	r4,r3,f364 <__umoddi3+0x530>
    f360:	2409883a 	add	r4,r4,r16
    f364:	20e5c83a 	sub	r18,r4,r3
    f368:	9009883a 	mov	r4,r18
    f36c:	a00b883a 	mov	r5,r20
    f370:	00104840 	call	10484 <__umodsi3>
    f374:	1023883a 	mov	r17,r2
    f378:	9009883a 	mov	r4,r18
    f37c:	a00b883a 	mov	r5,r20
    f380:	8822943a 	slli	r17,r17,16
    f384:	001047c0 	call	1047c <__udivsi3>
    f388:	1009883a 	mov	r4,r2
    f38c:	b00b883a 	mov	r5,r22
    f390:	bdffffcc 	andi	r23,r23,65535
    f394:	00015040 	call	1504 <__mulsi3>
    f398:	8de2b03a 	or	r17,r17,r23
    f39c:	8880042e 	bgeu	r17,r2,f3b0 <__umoddi3+0x57c>
    f3a0:	8c23883a 	add	r17,r17,r16
    f3a4:	8c000236 	bltu	r17,r16,f3b0 <__umoddi3+0x57c>
    f3a8:	8880012e 	bgeu	r17,r2,f3b0 <__umoddi3+0x57c>
    f3ac:	8c23883a 	add	r17,r17,r16
    f3b0:	88a3c83a 	sub	r17,r17,r2
    f3b4:	003f1b06 	br	f024 <__umoddi3+0x1f0>
    f3b8:	25adc83a 	sub	r22,r4,r22
    f3bc:	1d07c83a 	sub	r3,r3,r20
    f3c0:	2589803a 	cmpltu	r4,r4,r22
    f3c4:	1907c83a 	sub	r3,r3,r4
    f3c8:	88c7c83a 	sub	r3,r17,r3
    f3cc:	003fc006 	br	f2d0 <__umoddi3+0x49c>
    f3d0:	00c00204 	movi	r3,8
    f3d4:	1827883a 	mov	r19,r3
    f3d8:	003ee906 	br	ef80 <__umoddi3+0x14c>
    f3dc:	00c00604 	movi	r3,24
    f3e0:	1827883a 	mov	r19,r3
    f3e4:	003ee606 	br	ef80 <__umoddi3+0x14c>
    f3e8:	00800604 	movi	r2,24
    f3ec:	1009883a 	mov	r4,r2
    f3f0:	003ea806 	br	ee94 <__umoddi3+0x60>
    f3f4:	00800204 	movi	r2,8
    f3f8:	1007883a 	mov	r3,r2
    f3fc:	003efd06 	br	eff4 <__umoddi3+0x1c0>
    f400:	00800604 	movi	r2,24
    f404:	1007883a 	mov	r3,r2
    f408:	003efa06 	br	eff4 <__umoddi3+0x1c0>
    f40c:	00800204 	movi	r2,8
    f410:	1009883a 	mov	r4,r2
    f414:	003e9f06 	br	ee94 <__umoddi3+0x60>
    f418:	38bf7f2e 	bgeu	r7,r2,f218 <__umoddi3+0x3e4>
    f41c:	ad7fff84 	addi	r21,r21,-2
    f420:	3d0f883a 	add	r7,r7,r20
    f424:	003f7d06 	br	f21c <__umoddi3+0x3e8>
    f428:	193f642e 	bgeu	r3,r4,f1bc <__umoddi3+0x388>
    f42c:	e73fff84 	addi	fp,fp,-2
    f430:	1d07883a 	add	r3,r3,r20
    f434:	003f6206 	br	f1c0 <__umoddi3+0x38c>
    f438:	1c07883a 	add	r3,r3,r16
    f43c:	003f0b06 	br	f06c <__umoddi3+0x238>
    f440:	9005883a 	mov	r2,r18
    f444:	a007883a 	mov	r3,r20
    f448:	003f2106 	br	f0d0 <__umoddi3+0x29c>
    f44c:	913fda36 	bltu	r18,r4,f3b8 <__umoddi3+0x584>
    f450:	202d883a 	mov	r22,r4
    f454:	0007883a 	mov	r3,zero
    f458:	003f9d06 	br	f2d0 <__umoddi3+0x49c>

0000f45c <__eqsf2>:
    f45c:	defff504 	addi	sp,sp,-44
    f460:	d9000915 	stw	r4,36(sp)
    f464:	d9400815 	stw	r5,32(sp)
    f468:	d9000904 	addi	r4,sp,36
    f46c:	d9400404 	addi	r5,sp,16
    f470:	dfc00a15 	stw	ra,40(sp)
    f474:	00105380 	call	10538 <__unpack_f>
    f478:	d9000804 	addi	r4,sp,32
    f47c:	d80b883a 	mov	r5,sp
    f480:	00105380 	call	10538 <__unpack_f>
    f484:	d8c00417 	ldw	r3,16(sp)
    f488:	00800044 	movi	r2,1
    f48c:	10c0052e 	bgeu	r2,r3,f4a4 <__eqsf2+0x48>
    f490:	d8c00017 	ldw	r3,0(sp)
    f494:	10c0032e 	bgeu	r2,r3,f4a4 <__eqsf2+0x48>
    f498:	d9000404 	addi	r4,sp,16
    f49c:	d80b883a 	mov	r5,sp
    f4a0:	00106000 	call	10600 <__fpcmp_parts_f>
    f4a4:	dfc00a17 	ldw	ra,40(sp)
    f4a8:	dec00b04 	addi	sp,sp,44
    f4ac:	f800283a 	ret

0000f4b0 <__gtsf2>:
    f4b0:	defff504 	addi	sp,sp,-44
    f4b4:	d9000915 	stw	r4,36(sp)
    f4b8:	d9400815 	stw	r5,32(sp)
    f4bc:	d9000904 	addi	r4,sp,36
    f4c0:	d9400404 	addi	r5,sp,16
    f4c4:	dfc00a15 	stw	ra,40(sp)
    f4c8:	00105380 	call	10538 <__unpack_f>
    f4cc:	d9000804 	addi	r4,sp,32
    f4d0:	d80b883a 	mov	r5,sp
    f4d4:	00105380 	call	10538 <__unpack_f>
    f4d8:	d8c00417 	ldw	r3,16(sp)
    f4dc:	00800044 	movi	r2,1
    f4e0:	10c0082e 	bgeu	r2,r3,f504 <__gtsf2+0x54>
    f4e4:	d8c00017 	ldw	r3,0(sp)
    f4e8:	10c0062e 	bgeu	r2,r3,f504 <__gtsf2+0x54>
    f4ec:	d9000404 	addi	r4,sp,16
    f4f0:	d80b883a 	mov	r5,sp
    f4f4:	00106000 	call	10600 <__fpcmp_parts_f>
    f4f8:	dfc00a17 	ldw	ra,40(sp)
    f4fc:	dec00b04 	addi	sp,sp,44
    f500:	f800283a 	ret
    f504:	00bfffc4 	movi	r2,-1
    f508:	003ffb06 	br	f4f8 <__gtsf2+0x48>

0000f50c <__ltsf2>:
    f50c:	defff504 	addi	sp,sp,-44
    f510:	d9000915 	stw	r4,36(sp)
    f514:	d9400815 	stw	r5,32(sp)
    f518:	d9000904 	addi	r4,sp,36
    f51c:	d9400404 	addi	r5,sp,16
    f520:	dfc00a15 	stw	ra,40(sp)
    f524:	00105380 	call	10538 <__unpack_f>
    f528:	d9000804 	addi	r4,sp,32
    f52c:	d80b883a 	mov	r5,sp
    f530:	00105380 	call	10538 <__unpack_f>
    f534:	d8c00417 	ldw	r3,16(sp)
    f538:	00800044 	movi	r2,1
    f53c:	10c0052e 	bgeu	r2,r3,f554 <__ltsf2+0x48>
    f540:	d8c00017 	ldw	r3,0(sp)
    f544:	10c0032e 	bgeu	r2,r3,f554 <__ltsf2+0x48>
    f548:	d9000404 	addi	r4,sp,16
    f54c:	d80b883a 	mov	r5,sp
    f550:	00106000 	call	10600 <__fpcmp_parts_f>
    f554:	dfc00a17 	ldw	ra,40(sp)
    f558:	dec00b04 	addi	sp,sp,44
    f55c:	f800283a 	ret

0000f560 <_fpadd_parts>:
    f560:	2005883a 	mov	r2,r4
    f564:	21000017 	ldw	r4,0(r4)
    f568:	01c00044 	movi	r7,1
    f56c:	3900622e 	bgeu	r7,r4,f6f8 <_fpadd_parts+0x198>
    f570:	28c00017 	ldw	r3,0(r5)
    f574:	38c05f2e 	bgeu	r7,r3,f6f4 <_fpadd_parts+0x194>
    f578:	01c00104 	movi	r7,4
    f57c:	21c0c626 	beq	r4,r7,f898 <_fpadd_parts+0x338>
    f580:	19c05c26 	beq	r3,r7,f6f4 <_fpadd_parts+0x194>
    f584:	01c00084 	movi	r7,2
    f588:	19c06b26 	beq	r3,r7,f738 <_fpadd_parts+0x1d8>
    f58c:	21c05926 	beq	r4,r7,f6f4 <_fpadd_parts+0x194>
    f590:	11c00217 	ldw	r7,8(r2)
    f594:	2ac00217 	ldw	r11,8(r5)
    f598:	13000317 	ldw	r12,12(r2)
    f59c:	13400417 	ldw	r13,16(r2)
    f5a0:	3ac9c83a 	sub	r4,r7,r11
    f5a4:	2a000317 	ldw	r8,12(r5)
    f5a8:	2a400417 	ldw	r9,16(r5)
    f5ac:	2015883a 	mov	r10,r4
    f5b0:	20007516 	blt	r4,zero,f788 <_fpadd_parts+0x228>
    f5b4:	00c00fc4 	movi	r3,63
    f5b8:	1a805016 	blt	r3,r10,f6fc <_fpadd_parts+0x19c>
    f5bc:	0100870e 	bge	zero,r4,f7dc <_fpadd_parts+0x27c>
    f5c0:	50fff804 	addi	r3,r10,-32
    f5c4:	18009916 	blt	r3,zero,f82c <_fpadd_parts+0x2cc>
    f5c8:	48d6d83a 	srl	r11,r9,r3
    f5cc:	001d883a 	mov	r14,zero
    f5d0:	18009e16 	blt	r3,zero,f84c <_fpadd_parts+0x2ec>
    f5d4:	01000044 	movi	r4,1
    f5d8:	20c6983a 	sll	r3,r4,r3
    f5dc:	0015883a 	mov	r10,zero
    f5e0:	513fffc4 	addi	r4,r10,-1
    f5e4:	2295403a 	cmpgeu	r10,r4,r10
    f5e8:	1a87c83a 	sub	r3,r3,r10
    f5ec:	1a52703a 	and	r9,r3,r9
    f5f0:	2210703a 	and	r8,r4,r8
    f5f4:	4250b03a 	or	r8,r8,r9
    f5f8:	4010c03a 	cmpne	r8,r8,zero
    f5fc:	42d0b03a 	or	r8,r8,r11
    f600:	7013883a 	mov	r9,r14
    f604:	11000117 	ldw	r4,4(r2)
    f608:	28800117 	ldw	r2,4(r5)
    f60c:	20804126 	beq	r4,r2,f714 <_fpadd_parts+0x1b4>
    f610:	20006326 	beq	r4,zero,f7a0 <_fpadd_parts+0x240>
    f614:	4305c83a 	sub	r2,r8,r12
    f618:	4091803a 	cmpltu	r8,r8,r2
    f61c:	4b47c83a 	sub	r3,r9,r13
    f620:	1a07c83a 	sub	r3,r3,r8
    f624:	18006316 	blt	r3,zero,f7b4 <_fpadd_parts+0x254>
    f628:	30000115 	stw	zero,4(r6)
    f62c:	31c00215 	stw	r7,8(r6)
    f630:	30800315 	stw	r2,12(r6)
    f634:	30c00415 	stw	r3,16(r6)
    f638:	11ffffc4 	addi	r7,r2,-1
    f63c:	388b403a 	cmpgeu	r5,r7,r2
    f640:	194bc83a 	sub	r5,r3,r5
    f644:	01040034 	movhi	r4,4096
    f648:	213fffc4 	addi	r4,r4,-1
    f64c:	21401736 	bltu	r4,r5,f6ac <_fpadd_parts+0x14c>
    f650:	29008226 	beq	r5,r4,f85c <_fpadd_parts+0x2fc>
    f654:	31400217 	ldw	r5,8(r6)
    f658:	02840034 	movhi	r10,4096
    f65c:	52bfffc4 	addi	r10,r10,-1
    f660:	033fff84 	movi	r12,-2
    f664:	297fffc4 	addi	r5,r5,-1
    f668:	00000106 	br	f670 <_fpadd_parts+0x110>
    f66c:	3a804a26 	beq	r7,r10,f798 <_fpadd_parts+0x238>
    f670:	1089883a 	add	r4,r2,r2
    f674:	2091803a 	cmpltu	r8,r4,r2
    f678:	18c7883a 	add	r3,r3,r3
    f67c:	227fffc4 	addi	r9,r4,-1
    f680:	40d1883a 	add	r8,r8,r3
    f684:	490f403a 	cmpgeu	r7,r9,r4
    f688:	41cfc83a 	sub	r7,r8,r7
    f68c:	2817883a 	mov	r11,r5
    f690:	2005883a 	mov	r2,r4
    f694:	4007883a 	mov	r3,r8
    f698:	297fffc4 	addi	r5,r5,-1
    f69c:	51fff32e 	bgeu	r10,r7,f66c <_fpadd_parts+0x10c>
    f6a0:	31000315 	stw	r4,12(r6)
    f6a4:	32000415 	stw	r8,16(r6)
    f6a8:	32c00215 	stw	r11,8(r6)
    f6ac:	010000c4 	movi	r4,3
    f6b0:	31000015 	stw	r4,0(r6)
    f6b4:	01080034 	movhi	r4,8192
    f6b8:	213fffc4 	addi	r4,r4,-1
    f6bc:	20c00b2e 	bgeu	r4,r3,f6ec <_fpadd_parts+0x18c>
    f6c0:	180e97fa 	slli	r7,r3,31
    f6c4:	1008d07a 	srli	r4,r2,1
    f6c8:	31400217 	ldw	r5,8(r6)
    f6cc:	1806d07a 	srli	r3,r3,1
    f6d0:	1080004c 	andi	r2,r2,1
    f6d4:	3908b03a 	or	r4,r7,r4
    f6d8:	1108b03a 	or	r4,r2,r4
    f6dc:	29400044 	addi	r5,r5,1
    f6e0:	31000315 	stw	r4,12(r6)
    f6e4:	30c00415 	stw	r3,16(r6)
    f6e8:	31400215 	stw	r5,8(r6)
    f6ec:	3005883a 	mov	r2,r6
    f6f0:	f800283a 	ret
    f6f4:	2805883a 	mov	r2,r5
    f6f8:	f800283a 	ret
    f6fc:	59c01e0e 	bge	r11,r7,f778 <_fpadd_parts+0x218>
    f700:	11000117 	ldw	r4,4(r2)
    f704:	28800117 	ldw	r2,4(r5)
    f708:	0011883a 	mov	r8,zero
    f70c:	0013883a 	mov	r9,zero
    f710:	20bfbf1e 	bne	r4,r2,f610 <_fpadd_parts+0xb0>
    f714:	4305883a 	add	r2,r8,r12
    f718:	1207803a 	cmpltu	r3,r2,r8
    f71c:	4b53883a 	add	r9,r9,r13
    f720:	1a47883a 	add	r3,r3,r9
    f724:	31000115 	stw	r4,4(r6)
    f728:	31c00215 	stw	r7,8(r6)
    f72c:	30800315 	stw	r2,12(r6)
    f730:	30c00415 	stw	r3,16(r6)
    f734:	003fdd06 	br	f6ac <_fpadd_parts+0x14c>
    f738:	20ffef1e 	bne	r4,r3,f6f8 <_fpadd_parts+0x198>
    f73c:	31000015 	stw	r4,0(r6)
    f740:	10c00117 	ldw	r3,4(r2)
    f744:	30c00115 	stw	r3,4(r6)
    f748:	10c00217 	ldw	r3,8(r2)
    f74c:	11000117 	ldw	r4,4(r2)
    f750:	29400117 	ldw	r5,4(r5)
    f754:	30c00215 	stw	r3,8(r6)
    f758:	10c00317 	ldw	r3,12(r2)
    f75c:	2908703a 	and	r4,r5,r4
    f760:	30c00315 	stw	r3,12(r6)
    f764:	10c00417 	ldw	r3,16(r2)
    f768:	31000115 	stw	r4,4(r6)
    f76c:	3005883a 	mov	r2,r6
    f770:	30c00415 	stw	r3,16(r6)
    f774:	f800283a 	ret
    f778:	580f883a 	mov	r7,r11
    f77c:	0019883a 	mov	r12,zero
    f780:	001b883a 	mov	r13,zero
    f784:	003f9f06 	br	f604 <_fpadd_parts+0xa4>
    f788:	0115c83a 	sub	r10,zero,r4
    f78c:	00c00fc4 	movi	r3,63
    f790:	1abfda16 	blt	r3,r10,f6fc <_fpadd_parts+0x19c>
    f794:	003f8906 	br	f5bc <_fpadd_parts+0x5c>
    f798:	627fb52e 	bgeu	r12,r9,f670 <_fpadd_parts+0x110>
    f79c:	003fc006 	br	f6a0 <_fpadd_parts+0x140>
    f7a0:	6205c83a 	sub	r2,r12,r8
    f7a4:	6099803a 	cmpltu	r12,r12,r2
    f7a8:	6a47c83a 	sub	r3,r13,r9
    f7ac:	1b07c83a 	sub	r3,r3,r12
    f7b0:	183f9d0e 	bge	r3,zero,f628 <_fpadd_parts+0xc8>
    f7b4:	0085c83a 	sub	r2,zero,r2
    f7b8:	1008c03a 	cmpne	r4,r2,zero
    f7bc:	00c7c83a 	sub	r3,zero,r3
    f7c0:	1907c83a 	sub	r3,r3,r4
    f7c4:	01000044 	movi	r4,1
    f7c8:	31000115 	stw	r4,4(r6)
    f7cc:	31c00215 	stw	r7,8(r6)
    f7d0:	30800315 	stw	r2,12(r6)
    f7d4:	30c00415 	stw	r3,16(r6)
    f7d8:	003f9706 	br	f638 <_fpadd_parts+0xd8>
    f7dc:	203f8926 	beq	r4,zero,f604 <_fpadd_parts+0xa4>
    f7e0:	50fff804 	addi	r3,r10,-32
    f7e4:	3a8f883a 	add	r7,r7,r10
    f7e8:	18002316 	blt	r3,zero,f878 <_fpadd_parts+0x318>
    f7ec:	68d6d83a 	srl	r11,r13,r3
    f7f0:	001d883a 	mov	r14,zero
    f7f4:	18001c16 	blt	r3,zero,f868 <_fpadd_parts+0x308>
    f7f8:	01000044 	movi	r4,1
    f7fc:	20c6983a 	sll	r3,r4,r3
    f800:	0015883a 	mov	r10,zero
    f804:	513fffc4 	addi	r4,r10,-1
    f808:	2295403a 	cmpgeu	r10,r4,r10
    f80c:	1a87c83a 	sub	r3,r3,r10
    f810:	1b5a703a 	and	r13,r3,r13
    f814:	2318703a 	and	r12,r4,r12
    f818:	6358b03a 	or	r12,r12,r13
    f81c:	6018c03a 	cmpne	r12,r12,zero
    f820:	62d8b03a 	or	r12,r12,r11
    f824:	701b883a 	mov	r13,r14
    f828:	003f7606 	br	f604 <_fpadd_parts+0xa4>
    f82c:	4808907a 	slli	r4,r9,1
    f830:	02c007c4 	movi	r11,31
    f834:	5a97c83a 	sub	r11,r11,r10
    f838:	22c8983a 	sll	r4,r4,r11
    f83c:	4296d83a 	srl	r11,r8,r10
    f840:	4a9cd83a 	srl	r14,r9,r10
    f844:	22d6b03a 	or	r11,r4,r11
    f848:	003f6106 	br	f5d0 <_fpadd_parts+0x70>
    f84c:	00c00044 	movi	r3,1
    f850:	1a94983a 	sll	r10,r3,r10
    f854:	0007883a 	mov	r3,zero
    f858:	003f6106 	br	f5e0 <_fpadd_parts+0x80>
    f85c:	013fff84 	movi	r4,-2
    f860:	21ff7c2e 	bgeu	r4,r7,f654 <_fpadd_parts+0xf4>
    f864:	003f9106 	br	f6ac <_fpadd_parts+0x14c>
    f868:	00c00044 	movi	r3,1
    f86c:	1a94983a 	sll	r10,r3,r10
    f870:	0007883a 	mov	r3,zero
    f874:	003fe306 	br	f804 <_fpadd_parts+0x2a4>
    f878:	6816907a 	slli	r11,r13,1
    f87c:	010007c4 	movi	r4,31
    f880:	2289c83a 	sub	r4,r4,r10
    f884:	5908983a 	sll	r4,r11,r4
    f888:	6296d83a 	srl	r11,r12,r10
    f88c:	6a9cd83a 	srl	r14,r13,r10
    f890:	22d6b03a 	or	r11,r4,r11
    f894:	003fd706 	br	f7f4 <_fpadd_parts+0x294>
    f898:	193f971e 	bne	r3,r4,f6f8 <_fpadd_parts+0x198>
    f89c:	11000117 	ldw	r4,4(r2)
    f8a0:	28c00117 	ldw	r3,4(r5)
    f8a4:	20ff9426 	beq	r4,r3,f6f8 <_fpadd_parts+0x198>
    f8a8:	00800074 	movhi	r2,1
    f8ac:	1091a104 	addi	r2,r2,18052
    f8b0:	f800283a 	ret

0000f8b4 <__adddf3>:
    f8b4:	deffec04 	addi	sp,sp,-80
    f8b8:	d9001115 	stw	r4,68(sp)
    f8bc:	d9401215 	stw	r5,72(sp)
    f8c0:	d9001104 	addi	r4,sp,68
    f8c4:	d9400a04 	addi	r5,sp,40
    f8c8:	dfc01315 	stw	ra,76(sp)
    f8cc:	d9c01015 	stw	r7,64(sp)
    f8d0:	d9800f15 	stw	r6,60(sp)
    f8d4:	001090c0 	call	1090c <__unpack_d>
    f8d8:	d9000f04 	addi	r4,sp,60
    f8dc:	d9400504 	addi	r5,sp,20
    f8e0:	001090c0 	call	1090c <__unpack_d>
    f8e4:	d9000a04 	addi	r4,sp,40
    f8e8:	d9400504 	addi	r5,sp,20
    f8ec:	d80d883a 	mov	r6,sp
    f8f0:	000f5600 	call	f560 <_fpadd_parts>
    f8f4:	1009883a 	mov	r4,r2
    f8f8:	00106e80 	call	106e8 <__pack_d>
    f8fc:	dfc01317 	ldw	ra,76(sp)
    f900:	dec01404 	addi	sp,sp,80
    f904:	f800283a 	ret

0000f908 <__subdf3>:
    f908:	deffec04 	addi	sp,sp,-80
    f90c:	d9001115 	stw	r4,68(sp)
    f910:	d9401215 	stw	r5,72(sp)
    f914:	d9001104 	addi	r4,sp,68
    f918:	d9400a04 	addi	r5,sp,40
    f91c:	dfc01315 	stw	ra,76(sp)
    f920:	d9c01015 	stw	r7,64(sp)
    f924:	d9800f15 	stw	r6,60(sp)
    f928:	001090c0 	call	1090c <__unpack_d>
    f92c:	d9000f04 	addi	r4,sp,60
    f930:	d9400504 	addi	r5,sp,20
    f934:	001090c0 	call	1090c <__unpack_d>
    f938:	d8800617 	ldw	r2,24(sp)
    f93c:	d9000a04 	addi	r4,sp,40
    f940:	d9400504 	addi	r5,sp,20
    f944:	d80d883a 	mov	r6,sp
    f948:	1080005c 	xori	r2,r2,1
    f94c:	d8800615 	stw	r2,24(sp)
    f950:	000f5600 	call	f560 <_fpadd_parts>
    f954:	1009883a 	mov	r4,r2
    f958:	00106e80 	call	106e8 <__pack_d>
    f95c:	dfc01317 	ldw	ra,76(sp)
    f960:	dec01404 	addi	sp,sp,80
    f964:	f800283a 	ret

0000f968 <__muldf3>:
    f968:	deffe404 	addi	sp,sp,-112
    f96c:	d9001115 	stw	r4,68(sp)
    f970:	d9401215 	stw	r5,72(sp)
    f974:	d9001104 	addi	r4,sp,68
    f978:	d9400a04 	addi	r5,sp,40
    f97c:	dfc01b15 	stw	ra,108(sp)
    f980:	d9800f15 	stw	r6,60(sp)
    f984:	d9c01015 	stw	r7,64(sp)
    f988:	ddc01a15 	stw	r23,104(sp)
    f98c:	dd801915 	stw	r22,100(sp)
    f990:	dd401815 	stw	r21,96(sp)
    f994:	dd001715 	stw	r20,92(sp)
    f998:	dcc01615 	stw	r19,88(sp)
    f99c:	dc801515 	stw	r18,84(sp)
    f9a0:	dc401415 	stw	r17,80(sp)
    f9a4:	dc001315 	stw	r16,76(sp)
    f9a8:	001090c0 	call	1090c <__unpack_d>
    f9ac:	d9000f04 	addi	r4,sp,60
    f9b0:	d9400504 	addi	r5,sp,20
    f9b4:	001090c0 	call	1090c <__unpack_d>
    f9b8:	d8c00a17 	ldw	r3,40(sp)
    f9bc:	00800044 	movi	r2,1
    f9c0:	10c01136 	bltu	r2,r3,fa08 <__muldf3+0xa0>
    f9c4:	d8c00b17 	ldw	r3,44(sp)
    f9c8:	d8800617 	ldw	r2,24(sp)
    f9cc:	d9000a04 	addi	r4,sp,40
    f9d0:	1884c03a 	cmpne	r2,r3,r2
    f9d4:	d8800b15 	stw	r2,44(sp)
    f9d8:	00106e80 	call	106e8 <__pack_d>
    f9dc:	dfc01b17 	ldw	ra,108(sp)
    f9e0:	ddc01a17 	ldw	r23,104(sp)
    f9e4:	dd801917 	ldw	r22,100(sp)
    f9e8:	dd401817 	ldw	r21,96(sp)
    f9ec:	dd001717 	ldw	r20,92(sp)
    f9f0:	dcc01617 	ldw	r19,88(sp)
    f9f4:	dc801517 	ldw	r18,84(sp)
    f9f8:	dc401417 	ldw	r17,80(sp)
    f9fc:	dc001317 	ldw	r16,76(sp)
    fa00:	dec01c04 	addi	sp,sp,112
    fa04:	f800283a 	ret
    fa08:	d9000517 	ldw	r4,20(sp)
    fa0c:	11000636 	bltu	r2,r4,fa28 <__muldf3+0xc0>
    fa10:	d8800617 	ldw	r2,24(sp)
    fa14:	d8c00b17 	ldw	r3,44(sp)
    fa18:	d9000504 	addi	r4,sp,20
    fa1c:	1884c03a 	cmpne	r2,r3,r2
    fa20:	d8800615 	stw	r2,24(sp)
    fa24:	003fec06 	br	f9d8 <__muldf3+0x70>
    fa28:	00800104 	movi	r2,4
    fa2c:	1880051e 	bne	r3,r2,fa44 <__muldf3+0xdc>
    fa30:	00800084 	movi	r2,2
    fa34:	20bfe31e 	bne	r4,r2,f9c4 <__muldf3+0x5c>
    fa38:	01000074 	movhi	r4,1
    fa3c:	2111a104 	addi	r4,r4,18052
    fa40:	003fe506 	br	f9d8 <__muldf3+0x70>
    fa44:	2080031e 	bne	r4,r2,fa54 <__muldf3+0xec>
    fa48:	00800084 	movi	r2,2
    fa4c:	18bffa26 	beq	r3,r2,fa38 <__muldf3+0xd0>
    fa50:	003fef06 	br	fa10 <__muldf3+0xa8>
    fa54:	00800084 	movi	r2,2
    fa58:	18bfda26 	beq	r3,r2,f9c4 <__muldf3+0x5c>
    fa5c:	20bfec26 	beq	r4,r2,fa10 <__muldf3+0xa8>
    fa60:	dc000d17 	ldw	r16,52(sp)
    fa64:	dd000817 	ldw	r20,32(sp)
    fa68:	dc800917 	ldw	r18,36(sp)
    fa6c:	8009883a 	mov	r4,r16
    fa70:	000b883a 	mov	r5,zero
    fa74:	a00d883a 	mov	r6,r20
    fa78:	000f883a 	mov	r7,zero
    fa7c:	000e6500 	call	e650 <__muldi3>
    fa80:	dc400e17 	ldw	r17,56(sp)
    fa84:	9009883a 	mov	r4,r18
    fa88:	800d883a 	mov	r6,r16
    fa8c:	000b883a 	mov	r5,zero
    fa90:	000f883a 	mov	r7,zero
    fa94:	102f883a 	mov	r23,r2
    fa98:	1827883a 	mov	r19,r3
    fa9c:	000e6500 	call	e650 <__muldi3>
    faa0:	900d883a 	mov	r6,r18
    faa4:	8809883a 	mov	r4,r17
    faa8:	000b883a 	mov	r5,zero
    faac:	000f883a 	mov	r7,zero
    fab0:	102b883a 	mov	r21,r2
    fab4:	1821883a 	mov	r16,r3
    fab8:	000e6500 	call	e650 <__muldi3>
    fabc:	8809883a 	mov	r4,r17
    fac0:	000b883a 	mov	r5,zero
    fac4:	a00d883a 	mov	r6,r20
    fac8:	000f883a 	mov	r7,zero
    facc:	102d883a 	mov	r22,r2
    fad0:	1825883a 	mov	r18,r3
    fad4:	000e6500 	call	e650 <__muldi3>
    fad8:	154b883a 	add	r5,r2,r21
    fadc:	2889803a 	cmpltu	r4,r5,r2
    fae0:	1c07883a 	add	r3,r3,r16
    fae4:	20c9883a 	add	r4,r4,r3
    fae8:	24004b36 	bltu	r4,r16,fc18 <__muldf3+0x2b0>
    faec:	8100011e 	bne	r16,r4,faf4 <__muldf3+0x18c>
    faf0:	2d404936 	bltu	r5,r21,fc18 <__muldf3+0x2b0>
    faf4:	0011883a 	mov	r8,zero
    faf8:	0007883a 	mov	r3,zero
    fafc:	2ccb883a 	add	r5,r5,r19
    fb00:	b80d883a 	mov	r6,r23
    fb04:	2cc0012e 	bgeu	r5,r19,fb0c <__muldf3+0x1a4>
    fb08:	02000044 	movi	r8,1
    fb0c:	258f883a 	add	r7,r4,r22
    fb10:	3909803a 	cmpltu	r4,r7,r4
    fb14:	da400c17 	ldw	r9,48(sp)
    fb18:	2489883a 	add	r4,r4,r18
    fb1c:	d8800717 	ldw	r2,28(sp)
    fb20:	20c9883a 	add	r4,r4,r3
    fb24:	da800b17 	ldw	r10,44(sp)
    fb28:	d8c00617 	ldw	r3,24(sp)
    fb2c:	3a11883a 	add	r8,r7,r8
    fb30:	4885883a 	add	r2,r9,r2
    fb34:	50c6c03a 	cmpne	r3,r10,r3
    fb38:	41cf803a 	cmpltu	r7,r8,r7
    fb3c:	12400104 	addi	r9,r2,4
    fb40:	d8c00115 	stw	r3,4(sp)
    fb44:	3909883a 	add	r4,r7,r4
    fb48:	da400215 	stw	r9,8(sp)
    fb4c:	03480034 	movhi	r13,8192
    fb50:	6b7fffc4 	addi	r13,r13,-1
    fb54:	4007883a 	mov	r3,r8
    fb58:	6900102e 	bgeu	r13,r4,fb9c <__muldf3+0x234>
    fb5c:	10800144 	addi	r2,r2,5
    fb60:	180ed07a 	srli	r7,r3,1
    fb64:	18c0004c 	andi	r3,r3,1
    fb68:	201097fa 	slli	r8,r4,31
    fb6c:	281697fa 	slli	r11,r5,31
    fb70:	2008d07a 	srli	r4,r4,1
    fb74:	3014d07a 	srli	r10,r6,1
    fb78:	2812d07a 	srli	r9,r5,1
    fb7c:	1019883a 	mov	r12,r2
    fb80:	18000226 	beq	r3,zero,fb8c <__muldf3+0x224>
    fb84:	5a8cb03a 	or	r6,r11,r10
    fb88:	49600034 	orhi	r5,r9,32768
    fb8c:	41c6b03a 	or	r3,r8,r7
    fb90:	10800044 	addi	r2,r2,1
    fb94:	693ff236 	bltu	r13,r4,fb60 <__muldf3+0x1f8>
    fb98:	db000215 	stw	r12,8(sp)
    fb9c:	03440034 	movhi	r13,4096
    fba0:	6b7fffc4 	addi	r13,r13,-1
    fba4:	69001336 	bltu	r13,r4,fbf4 <__muldf3+0x28c>
    fba8:	d8800217 	ldw	r2,8(sp)
    fbac:	10bfffc4 	addi	r2,r2,-1
    fbb0:	18d3883a 	add	r9,r3,r3
    fbb4:	48c7803a 	cmpltu	r3,r9,r3
    fbb8:	2109883a 	add	r4,r4,r4
    fbbc:	190f883a 	add	r7,r3,r4
    fbc0:	3191883a 	add	r8,r6,r6
    fbc4:	4197803a 	cmpltu	r11,r8,r6
    fbc8:	2955883a 	add	r10,r5,r5
    fbcc:	1019883a 	mov	r12,r2
    fbd0:	4807883a 	mov	r3,r9
    fbd4:	3809883a 	mov	r4,r7
    fbd8:	2800010e 	bge	r5,zero,fbe0 <__muldf3+0x278>
    fbdc:	48c00054 	ori	r3,r9,1
    fbe0:	400d883a 	mov	r6,r8
    fbe4:	5a8b883a 	add	r5,r11,r10
    fbe8:	10bfffc4 	addi	r2,r2,-1
    fbec:	69fff02e 	bgeu	r13,r7,fbb0 <__muldf3+0x248>
    fbf0:	db000215 	stw	r12,8(sp)
    fbf4:	18803fcc 	andi	r2,r3,255
    fbf8:	01c02004 	movi	r7,128
    fbfc:	11c00926 	beq	r2,r7,fc24 <__muldf3+0x2bc>
    fc00:	008000c4 	movi	r2,3
    fc04:	d9000415 	stw	r4,16(sp)
    fc08:	d8c00315 	stw	r3,12(sp)
    fc0c:	d8800015 	stw	r2,0(sp)
    fc10:	d809883a 	mov	r4,sp
    fc14:	003f7006 	br	f9d8 <__muldf3+0x70>
    fc18:	0011883a 	mov	r8,zero
    fc1c:	00c00044 	movi	r3,1
    fc20:	003fb606 	br	fafc <__muldf3+0x194>
    fc24:	19c0400c 	andi	r7,r3,256
    fc28:	383ff51e 	bne	r7,zero,fc00 <__muldf3+0x298>
    fc2c:	314ab03a 	or	r5,r6,r5
    fc30:	283ff326 	beq	r5,zero,fc00 <__muldf3+0x298>
    fc34:	1885883a 	add	r2,r3,r2
    fc38:	10cb803a 	cmpltu	r5,r2,r3
    fc3c:	00ffc004 	movi	r3,-256
    fc40:	10c6703a 	and	r3,r2,r3
    fc44:	2909883a 	add	r4,r5,r4
    fc48:	003fed06 	br	fc00 <__muldf3+0x298>

0000fc4c <__divdf3>:
    fc4c:	defff104 	addi	sp,sp,-60
    fc50:	d9000c15 	stw	r4,48(sp)
    fc54:	d9400d15 	stw	r5,52(sp)
    fc58:	d9000c04 	addi	r4,sp,48
    fc5c:	d9400504 	addi	r5,sp,20
    fc60:	dfc00e15 	stw	ra,56(sp)
    fc64:	d9800a15 	stw	r6,40(sp)
    fc68:	d9c00b15 	stw	r7,44(sp)
    fc6c:	001090c0 	call	1090c <__unpack_d>
    fc70:	d9000a04 	addi	r4,sp,40
    fc74:	d80b883a 	mov	r5,sp
    fc78:	001090c0 	call	1090c <__unpack_d>
    fc7c:	d8c00517 	ldw	r3,20(sp)
    fc80:	00800044 	movi	r2,1
    fc84:	10c00536 	bltu	r2,r3,fc9c <__divdf3+0x50>
    fc88:	d9000504 	addi	r4,sp,20
    fc8c:	00106e80 	call	106e8 <__pack_d>
    fc90:	dfc00e17 	ldw	ra,56(sp)
    fc94:	dec00f04 	addi	sp,sp,60
    fc98:	f800283a 	ret
    fc9c:	d9000017 	ldw	r4,0(sp)
    fca0:	11000536 	bltu	r2,r4,fcb8 <__divdf3+0x6c>
    fca4:	d809883a 	mov	r4,sp
    fca8:	00106e80 	call	106e8 <__pack_d>
    fcac:	dfc00e17 	ldw	ra,56(sp)
    fcb0:	dec00f04 	addi	sp,sp,60
    fcb4:	f800283a 	ret
    fcb8:	d9800617 	ldw	r6,24(sp)
    fcbc:	d9400117 	ldw	r5,4(sp)
    fcc0:	00800104 	movi	r2,4
    fcc4:	314af03a 	xor	r5,r6,r5
    fcc8:	d9400615 	stw	r5,24(sp)
    fccc:	18800226 	beq	r3,r2,fcd8 <__divdf3+0x8c>
    fcd0:	01400084 	movi	r5,2
    fcd4:	1940041e 	bne	r3,r5,fce8 <__divdf3+0x9c>
    fcd8:	193feb1e 	bne	r3,r4,fc88 <__divdf3+0x3c>
    fcdc:	01000074 	movhi	r4,1
    fce0:	2111a104 	addi	r4,r4,18052
    fce4:	003fe906 	br	fc8c <__divdf3+0x40>
    fce8:	20803326 	beq	r4,r2,fdb8 <__divdf3+0x16c>
    fcec:	21403726 	beq	r4,r5,fdcc <__divdf3+0x180>
    fcf0:	d8800217 	ldw	r2,8(sp)
    fcf4:	d9000717 	ldw	r4,28(sp)
    fcf8:	d8c00917 	ldw	r3,36(sp)
    fcfc:	da000417 	ldw	r8,16(sp)
    fd00:	2089c83a 	sub	r4,r4,r2
    fd04:	d9000715 	stw	r4,28(sp)
    fd08:	d8800817 	ldw	r2,32(sp)
    fd0c:	dbc00317 	ldw	r15,12(sp)
    fd10:	1a000236 	bltu	r3,r8,fd1c <__divdf3+0xd0>
    fd14:	40c0081e 	bne	r8,r3,fd38 <__divdf3+0xec>
    fd18:	13c0072e 	bgeu	r2,r15,fd38 <__divdf3+0xec>
    fd1c:	108b883a 	add	r5,r2,r2
    fd20:	288d803a 	cmpltu	r6,r5,r2
    fd24:	18c7883a 	add	r3,r3,r3
    fd28:	213fffc4 	addi	r4,r4,-1
    fd2c:	2805883a 	mov	r2,r5
    fd30:	30c7883a 	add	r3,r6,r3
    fd34:	d9000715 	stw	r4,28(sp)
    fd38:	01400f44 	movi	r5,61
    fd3c:	000f883a 	mov	r7,zero
    fd40:	01040034 	movhi	r4,4096
    fd44:	0019883a 	mov	r12,zero
    fd48:	001b883a 	mov	r13,zero
    fd4c:	201697fa 	slli	r11,r4,31
    fd50:	3814d07a 	srli	r10,r7,1
    fd54:	297fffc4 	addi	r5,r5,-1
    fd58:	1a000936 	bltu	r3,r8,fd80 <__divdf3+0x134>
    fd5c:	13cdc83a 	sub	r6,r2,r15
    fd60:	1193803a 	cmpltu	r9,r2,r6
    fd64:	1a1dc83a 	sub	r14,r3,r8
    fd68:	40c0011e 	bne	r8,r3,fd70 <__divdf3+0x124>
    fd6c:	13c00436 	bltu	r2,r15,fd80 <__divdf3+0x134>
    fd70:	3005883a 	mov	r2,r6
    fd74:	7247c83a 	sub	r3,r14,r9
    fd78:	61d8b03a 	or	r12,r12,r7
    fd7c:	691ab03a 	or	r13,r13,r4
    fd80:	108d883a 	add	r6,r2,r2
    fd84:	3093803a 	cmpltu	r9,r6,r2
    fd88:	18c7883a 	add	r3,r3,r3
    fd8c:	5a8eb03a 	or	r7,r11,r10
    fd90:	2008d07a 	srli	r4,r4,1
    fd94:	3005883a 	mov	r2,r6
    fd98:	48c7883a 	add	r3,r9,r3
    fd9c:	283feb1e 	bne	r5,zero,fd4c <__divdf3+0x100>
    fda0:	61003fcc 	andi	r4,r12,255
    fda4:	01402004 	movi	r5,128
    fda8:	21400b26 	beq	r4,r5,fdd8 <__divdf3+0x18c>
    fdac:	db000815 	stw	r12,32(sp)
    fdb0:	db400915 	stw	r13,36(sp)
    fdb4:	003fb406 	br	fc88 <__divdf3+0x3c>
    fdb8:	d8000815 	stw	zero,32(sp)
    fdbc:	d8000915 	stw	zero,36(sp)
    fdc0:	d8000715 	stw	zero,28(sp)
    fdc4:	d9000504 	addi	r4,sp,20
    fdc8:	003fb006 	br	fc8c <__divdf3+0x40>
    fdcc:	d8800515 	stw	r2,20(sp)
    fdd0:	d9000504 	addi	r4,sp,20
    fdd4:	003fad06 	br	fc8c <__divdf3+0x40>
    fdd8:	6140400c 	andi	r5,r12,256
    fddc:	283ff31e 	bne	r5,zero,fdac <__divdf3+0x160>
    fde0:	30c4b03a 	or	r2,r6,r3
    fde4:	103ff126 	beq	r2,zero,fdac <__divdf3+0x160>
    fde8:	6109883a 	add	r4,r12,r4
    fdec:	2305803a 	cmpltu	r2,r4,r12
    fdf0:	033fc004 	movi	r12,-256
    fdf4:	2318703a 	and	r12,r4,r12
    fdf8:	135b883a 	add	r13,r2,r13
    fdfc:	003feb06 	br	fdac <__divdf3+0x160>

0000fe00 <__eqdf2>:
    fe00:	defff104 	addi	sp,sp,-60
    fe04:	d9000c15 	stw	r4,48(sp)
    fe08:	d9400d15 	stw	r5,52(sp)
    fe0c:	d9000c04 	addi	r4,sp,48
    fe10:	d9400504 	addi	r5,sp,20
    fe14:	dfc00e15 	stw	ra,56(sp)
    fe18:	d9800a15 	stw	r6,40(sp)
    fe1c:	d9c00b15 	stw	r7,44(sp)
    fe20:	001090c0 	call	1090c <__unpack_d>
    fe24:	d9000a04 	addi	r4,sp,40
    fe28:	d80b883a 	mov	r5,sp
    fe2c:	001090c0 	call	1090c <__unpack_d>
    fe30:	d8c00517 	ldw	r3,20(sp)
    fe34:	00800044 	movi	r2,1
    fe38:	10c0052e 	bgeu	r2,r3,fe50 <__eqdf2+0x50>
    fe3c:	d8c00017 	ldw	r3,0(sp)
    fe40:	10c0032e 	bgeu	r2,r3,fe50 <__eqdf2+0x50>
    fe44:	d9000504 	addi	r4,sp,20
    fe48:	d80b883a 	mov	r5,sp
    fe4c:	0010a100 	call	10a10 <__fpcmp_parts_d>
    fe50:	dfc00e17 	ldw	ra,56(sp)
    fe54:	dec00f04 	addi	sp,sp,60
    fe58:	f800283a 	ret

0000fe5c <__nedf2>:
    fe5c:	defff104 	addi	sp,sp,-60
    fe60:	d9000c15 	stw	r4,48(sp)
    fe64:	d9400d15 	stw	r5,52(sp)
    fe68:	d9000c04 	addi	r4,sp,48
    fe6c:	d9400504 	addi	r5,sp,20
    fe70:	dfc00e15 	stw	ra,56(sp)
    fe74:	d9800a15 	stw	r6,40(sp)
    fe78:	d9c00b15 	stw	r7,44(sp)
    fe7c:	001090c0 	call	1090c <__unpack_d>
    fe80:	d9000a04 	addi	r4,sp,40
    fe84:	d80b883a 	mov	r5,sp
    fe88:	001090c0 	call	1090c <__unpack_d>
    fe8c:	d8c00517 	ldw	r3,20(sp)
    fe90:	00800044 	movi	r2,1
    fe94:	10c0052e 	bgeu	r2,r3,feac <__nedf2+0x50>
    fe98:	d8c00017 	ldw	r3,0(sp)
    fe9c:	10c0032e 	bgeu	r2,r3,feac <__nedf2+0x50>
    fea0:	d9000504 	addi	r4,sp,20
    fea4:	d80b883a 	mov	r5,sp
    fea8:	0010a100 	call	10a10 <__fpcmp_parts_d>
    feac:	dfc00e17 	ldw	ra,56(sp)
    feb0:	dec00f04 	addi	sp,sp,60
    feb4:	f800283a 	ret

0000feb8 <__gtdf2>:
    feb8:	defff104 	addi	sp,sp,-60
    febc:	d9000c15 	stw	r4,48(sp)
    fec0:	d9400d15 	stw	r5,52(sp)
    fec4:	d9000c04 	addi	r4,sp,48
    fec8:	d9400504 	addi	r5,sp,20
    fecc:	dfc00e15 	stw	ra,56(sp)
    fed0:	d9800a15 	stw	r6,40(sp)
    fed4:	d9c00b15 	stw	r7,44(sp)
    fed8:	001090c0 	call	1090c <__unpack_d>
    fedc:	d9000a04 	addi	r4,sp,40
    fee0:	d80b883a 	mov	r5,sp
    fee4:	001090c0 	call	1090c <__unpack_d>
    fee8:	d8c00517 	ldw	r3,20(sp)
    feec:	00800044 	movi	r2,1
    fef0:	10c0082e 	bgeu	r2,r3,ff14 <__gtdf2+0x5c>
    fef4:	d8c00017 	ldw	r3,0(sp)
    fef8:	10c0062e 	bgeu	r2,r3,ff14 <__gtdf2+0x5c>
    fefc:	d9000504 	addi	r4,sp,20
    ff00:	d80b883a 	mov	r5,sp
    ff04:	0010a100 	call	10a10 <__fpcmp_parts_d>
    ff08:	dfc00e17 	ldw	ra,56(sp)
    ff0c:	dec00f04 	addi	sp,sp,60
    ff10:	f800283a 	ret
    ff14:	00bfffc4 	movi	r2,-1
    ff18:	003ffb06 	br	ff08 <__gtdf2+0x50>

0000ff1c <__gedf2>:
    ff1c:	defff104 	addi	sp,sp,-60
    ff20:	d9000c15 	stw	r4,48(sp)
    ff24:	d9400d15 	stw	r5,52(sp)
    ff28:	d9000c04 	addi	r4,sp,48
    ff2c:	d9400504 	addi	r5,sp,20
    ff30:	dfc00e15 	stw	ra,56(sp)
    ff34:	d9800a15 	stw	r6,40(sp)
    ff38:	d9c00b15 	stw	r7,44(sp)
    ff3c:	001090c0 	call	1090c <__unpack_d>
    ff40:	d9000a04 	addi	r4,sp,40
    ff44:	d80b883a 	mov	r5,sp
    ff48:	001090c0 	call	1090c <__unpack_d>
    ff4c:	d8c00517 	ldw	r3,20(sp)
    ff50:	00800044 	movi	r2,1
    ff54:	10c0082e 	bgeu	r2,r3,ff78 <__gedf2+0x5c>
    ff58:	d8c00017 	ldw	r3,0(sp)
    ff5c:	10c0062e 	bgeu	r2,r3,ff78 <__gedf2+0x5c>
    ff60:	d9000504 	addi	r4,sp,20
    ff64:	d80b883a 	mov	r5,sp
    ff68:	0010a100 	call	10a10 <__fpcmp_parts_d>
    ff6c:	dfc00e17 	ldw	ra,56(sp)
    ff70:	dec00f04 	addi	sp,sp,60
    ff74:	f800283a 	ret
    ff78:	00bfffc4 	movi	r2,-1
    ff7c:	003ffb06 	br	ff6c <__gedf2+0x50>

0000ff80 <__ltdf2>:
    ff80:	defff104 	addi	sp,sp,-60
    ff84:	d9000c15 	stw	r4,48(sp)
    ff88:	d9400d15 	stw	r5,52(sp)
    ff8c:	d9000c04 	addi	r4,sp,48
    ff90:	d9400504 	addi	r5,sp,20
    ff94:	dfc00e15 	stw	ra,56(sp)
    ff98:	d9800a15 	stw	r6,40(sp)
    ff9c:	d9c00b15 	stw	r7,44(sp)
    ffa0:	001090c0 	call	1090c <__unpack_d>
    ffa4:	d9000a04 	addi	r4,sp,40
    ffa8:	d80b883a 	mov	r5,sp
    ffac:	001090c0 	call	1090c <__unpack_d>
    ffb0:	d8c00517 	ldw	r3,20(sp)
    ffb4:	00800044 	movi	r2,1
    ffb8:	10c0052e 	bgeu	r2,r3,ffd0 <__ltdf2+0x50>
    ffbc:	d8c00017 	ldw	r3,0(sp)
    ffc0:	10c0032e 	bgeu	r2,r3,ffd0 <__ltdf2+0x50>
    ffc4:	d9000504 	addi	r4,sp,20
    ffc8:	d80b883a 	mov	r5,sp
    ffcc:	0010a100 	call	10a10 <__fpcmp_parts_d>
    ffd0:	dfc00e17 	ldw	ra,56(sp)
    ffd4:	dec00f04 	addi	sp,sp,60
    ffd8:	f800283a 	ret

0000ffdc <__ledf2>:
    ffdc:	defff104 	addi	sp,sp,-60
    ffe0:	d9000c15 	stw	r4,48(sp)
    ffe4:	d9400d15 	stw	r5,52(sp)
    ffe8:	d9000c04 	addi	r4,sp,48
    ffec:	d9400504 	addi	r5,sp,20
    fff0:	dfc00e15 	stw	ra,56(sp)
    fff4:	d9800a15 	stw	r6,40(sp)
    fff8:	d9c00b15 	stw	r7,44(sp)
    fffc:	001090c0 	call	1090c <__unpack_d>
   10000:	d9000a04 	addi	r4,sp,40
   10004:	d80b883a 	mov	r5,sp
   10008:	001090c0 	call	1090c <__unpack_d>
   1000c:	d8c00517 	ldw	r3,20(sp)
   10010:	00800044 	movi	r2,1
   10014:	10c0052e 	bgeu	r2,r3,1002c <__ledf2+0x50>
   10018:	d8c00017 	ldw	r3,0(sp)
   1001c:	10c0032e 	bgeu	r2,r3,1002c <__ledf2+0x50>
   10020:	d9000504 	addi	r4,sp,20
   10024:	d80b883a 	mov	r5,sp
   10028:	0010a100 	call	10a10 <__fpcmp_parts_d>
   1002c:	dfc00e17 	ldw	ra,56(sp)
   10030:	dec00f04 	addi	sp,sp,60
   10034:	f800283a 	ret

00010038 <__floatsidf>:
   10038:	2004d7fa 	srli	r2,r4,31
   1003c:	defff904 	addi	sp,sp,-28
   10040:	00c000c4 	movi	r3,3
   10044:	dfc00615 	stw	ra,24(sp)
   10048:	dc000515 	stw	r16,20(sp)
   1004c:	d8c00015 	stw	r3,0(sp)
   10050:	d8800115 	stw	r2,4(sp)
   10054:	2000081e 	bne	r4,zero,10078 <__floatsidf+0x40>
   10058:	00800084 	movi	r2,2
   1005c:	d8800015 	stw	r2,0(sp)
   10060:	d809883a 	mov	r4,sp
   10064:	00106e80 	call	106e8 <__pack_d>
   10068:	dfc00617 	ldw	ra,24(sp)
   1006c:	dc000517 	ldw	r16,20(sp)
   10070:	dec00704 	addi	sp,sp,28
   10074:	f800283a 	ret
   10078:	00c00f04 	movi	r3,60
   1007c:	d8c00215 	stw	r3,8(sp)
   10080:	10000f1e 	bne	r2,zero,100c0 <__floatsidf+0x88>
   10084:	2021883a 	mov	r16,r4
   10088:	8009883a 	mov	r4,r16
   1008c:	001048c0 	call	1048c <__clzsi2>
   10090:	11000744 	addi	r4,r2,29
   10094:	0100110e 	bge	zero,r4,100dc <__floatsidf+0xa4>
   10098:	10ffff44 	addi	r3,r2,-3
   1009c:	18001216 	blt	r3,zero,100e8 <__floatsidf+0xb0>
   100a0:	80c6983a 	sll	r3,r16,r3
   100a4:	0009883a 	mov	r4,zero
   100a8:	014007c4 	movi	r5,31
   100ac:	2885c83a 	sub	r2,r5,r2
   100b0:	d9000315 	stw	r4,12(sp)
   100b4:	d8c00415 	stw	r3,16(sp)
   100b8:	d8800215 	stw	r2,8(sp)
   100bc:	003fe806 	br	10060 <__floatsidf+0x28>
   100c0:	00a00034 	movhi	r2,32768
   100c4:	20800e26 	beq	r4,r2,10100 <__floatsidf+0xc8>
   100c8:	0121c83a 	sub	r16,zero,r4
   100cc:	8009883a 	mov	r4,r16
   100d0:	001048c0 	call	1048c <__clzsi2>
   100d4:	11000744 	addi	r4,r2,29
   100d8:	013fef16 	blt	zero,r4,10098 <__floatsidf+0x60>
   100dc:	dc000315 	stw	r16,12(sp)
   100e0:	d8000415 	stw	zero,16(sp)
   100e4:	003fde06 	br	10060 <__floatsidf+0x28>
   100e8:	800ad07a 	srli	r5,r16,1
   100ec:	00c007c4 	movi	r3,31
   100f0:	1907c83a 	sub	r3,r3,r4
   100f4:	28c6d83a 	srl	r3,r5,r3
   100f8:	8108983a 	sll	r4,r16,r4
   100fc:	003fea06 	br	100a8 <__floatsidf+0x70>
   10100:	0005883a 	mov	r2,zero
   10104:	00f07834 	movhi	r3,49632
   10108:	003fd706 	br	10068 <__floatsidf+0x30>

0001010c <__fixdfsi>:
   1010c:	defff804 	addi	sp,sp,-32
   10110:	d9000515 	stw	r4,20(sp)
   10114:	d9400615 	stw	r5,24(sp)
   10118:	d9000504 	addi	r4,sp,20
   1011c:	d80b883a 	mov	r5,sp
   10120:	dfc00715 	stw	ra,28(sp)
   10124:	001090c0 	call	1090c <__unpack_d>
   10128:	d8800017 	ldw	r2,0(sp)
   1012c:	00c00084 	movi	r3,2
   10130:	10c01c26 	beq	r2,r3,101a4 <__fixdfsi+0x98>
   10134:	00c00044 	movi	r3,1
   10138:	18801a2e 	bgeu	r3,r2,101a4 <__fixdfsi+0x98>
   1013c:	00c00104 	movi	r3,4
   10140:	10c01126 	beq	r2,r3,10188 <__fixdfsi+0x7c>
   10144:	d8800217 	ldw	r2,8(sp)
   10148:	10001616 	blt	r2,zero,101a4 <__fixdfsi+0x98>
   1014c:	00c00784 	movi	r3,30
   10150:	18800d16 	blt	r3,r2,10188 <__fixdfsi+0x7c>
   10154:	00c00f04 	movi	r3,60
   10158:	1885c83a 	sub	r2,r3,r2
   1015c:	10fff804 	addi	r3,r2,-32
   10160:	d9400317 	ldw	r5,12(sp)
   10164:	d9000417 	ldw	r4,16(sp)
   10168:	18001616 	blt	r3,zero,101c4 <__fixdfsi+0xb8>
   1016c:	20c4d83a 	srl	r2,r4,r3
   10170:	d8c00117 	ldw	r3,4(sp)
   10174:	18000126 	beq	r3,zero,1017c <__fixdfsi+0x70>
   10178:	0085c83a 	sub	r2,zero,r2
   1017c:	dfc00717 	ldw	ra,28(sp)
   10180:	dec00804 	addi	sp,sp,32
   10184:	f800283a 	ret
   10188:	d8800117 	ldw	r2,4(sp)
   1018c:	1000091e 	bne	r2,zero,101b4 <__fixdfsi+0xa8>
   10190:	00a00034 	movhi	r2,32768
   10194:	10bfffc4 	addi	r2,r2,-1
   10198:	dfc00717 	ldw	ra,28(sp)
   1019c:	dec00804 	addi	sp,sp,32
   101a0:	f800283a 	ret
   101a4:	0005883a 	mov	r2,zero
   101a8:	dfc00717 	ldw	ra,28(sp)
   101ac:	dec00804 	addi	sp,sp,32
   101b0:	f800283a 	ret
   101b4:	00a00034 	movhi	r2,32768
   101b8:	dfc00717 	ldw	ra,28(sp)
   101bc:	dec00804 	addi	sp,sp,32
   101c0:	f800283a 	ret
   101c4:	2008907a 	slli	r4,r4,1
   101c8:	018007c4 	movi	r6,31
   101cc:	308dc83a 	sub	r6,r6,r2
   101d0:	2188983a 	sll	r4,r4,r6
   101d4:	2884d83a 	srl	r2,r5,r2
   101d8:	2084b03a 	or	r2,r4,r2
   101dc:	003fe406 	br	10170 <__fixdfsi+0x64>

000101e0 <__truncdfsf2>:
   101e0:	defff804 	addi	sp,sp,-32
   101e4:	d9000515 	stw	r4,20(sp)
   101e8:	d9400615 	stw	r5,24(sp)
   101ec:	d9000504 	addi	r4,sp,20
   101f0:	d80b883a 	mov	r5,sp
   101f4:	dfc00715 	stw	ra,28(sp)
   101f8:	001090c0 	call	1090c <__unpack_d>
   101fc:	d8800317 	ldw	r2,12(sp)
   10200:	d8c00417 	ldw	r3,16(sp)
   10204:	01100034 	movhi	r4,16384
   10208:	213fffc4 	addi	r4,r4,-1
   1020c:	100ed7ba 	srli	r7,r2,30
   10210:	180690ba 	slli	r3,r3,2
   10214:	1104703a 	and	r2,r2,r4
   10218:	19ceb03a 	or	r7,r3,r7
   1021c:	10000126 	beq	r2,zero,10224 <__truncdfsf2+0x44>
   10220:	39c00054 	ori	r7,r7,1
   10224:	d9000017 	ldw	r4,0(sp)
   10228:	d9400117 	ldw	r5,4(sp)
   1022c:	d9800217 	ldw	r6,8(sp)
   10230:	00106bc0 	call	106bc <__make_fp>
   10234:	dfc00717 	ldw	ra,28(sp)
   10238:	dec00804 	addi	sp,sp,32
   1023c:	f800283a 	ret

00010240 <__floatunsidf>:
   10240:	defff904 	addi	sp,sp,-28
   10244:	dc000515 	stw	r16,20(sp)
   10248:	dfc00615 	stw	ra,24(sp)
   1024c:	d8000115 	stw	zero,4(sp)
   10250:	2021883a 	mov	r16,r4
   10254:	20001726 	beq	r4,zero,102b4 <__floatunsidf+0x74>
   10258:	008000c4 	movi	r2,3
   1025c:	d8800015 	stw	r2,0(sp)
   10260:	00800f04 	movi	r2,60
   10264:	d8800215 	stw	r2,8(sp)
   10268:	001048c0 	call	1048c <__clzsi2>
   1026c:	10c00744 	addi	r3,r2,29
   10270:	18001816 	blt	r3,zero,102d4 <__floatunsidf+0x94>
   10274:	18002d26 	beq	r3,zero,1032c <__floatunsidf+0xec>
   10278:	113fff44 	addi	r4,r2,-3
   1027c:	20002e16 	blt	r4,zero,10338 <__floatunsidf+0xf8>
   10280:	8108983a 	sll	r4,r16,r4
   10284:	0021883a 	mov	r16,zero
   10288:	014007c4 	movi	r5,31
   1028c:	2885c83a 	sub	r2,r5,r2
   10290:	dc000315 	stw	r16,12(sp)
   10294:	d9000415 	stw	r4,16(sp)
   10298:	d8800215 	stw	r2,8(sp)
   1029c:	d809883a 	mov	r4,sp
   102a0:	00106e80 	call	106e8 <__pack_d>
   102a4:	dfc00617 	ldw	ra,24(sp)
   102a8:	dc000517 	ldw	r16,20(sp)
   102ac:	dec00704 	addi	sp,sp,28
   102b0:	f800283a 	ret
   102b4:	00800084 	movi	r2,2
   102b8:	d809883a 	mov	r4,sp
   102bc:	d8800015 	stw	r2,0(sp)
   102c0:	00106e80 	call	106e8 <__pack_d>
   102c4:	dfc00617 	ldw	ra,24(sp)
   102c8:	dc000517 	ldw	r16,20(sp)
   102cc:	dec00704 	addi	sp,sp,28
   102d0:	f800283a 	ret
   102d4:	00c7c83a 	sub	r3,zero,r3
   102d8:	193ff804 	addi	r4,r3,-32
   102dc:	20001c16 	blt	r4,zero,10350 <__floatunsidf+0x110>
   102e0:	000b883a 	mov	r5,zero
   102e4:	2009d7fa 	srai	r4,r4,31
   102e8:	80c6d83a 	srl	r3,r16,r3
   102ec:	297fffc4 	addi	r5,r5,-1
   102f0:	2c20703a 	and	r16,r5,r16
   102f4:	8020c03a 	cmpne	r16,r16,zero
   102f8:	1906703a 	and	r3,r3,r4
   102fc:	010007c4 	movi	r4,31
   10300:	80c6b03a 	or	r3,r16,r3
   10304:	2085c83a 	sub	r2,r4,r2
   10308:	d809883a 	mov	r4,sp
   1030c:	d8c00315 	stw	r3,12(sp)
   10310:	d8000415 	stw	zero,16(sp)
   10314:	d8800215 	stw	r2,8(sp)
   10318:	00106e80 	call	106e8 <__pack_d>
   1031c:	dfc00617 	ldw	ra,24(sp)
   10320:	dc000517 	ldw	r16,20(sp)
   10324:	dec00704 	addi	sp,sp,28
   10328:	f800283a 	ret
   1032c:	dc000315 	stw	r16,12(sp)
   10330:	d8000415 	stw	zero,16(sp)
   10334:	003fd906 	br	1029c <__floatunsidf+0x5c>
   10338:	800ad07a 	srli	r5,r16,1
   1033c:	010007c4 	movi	r4,31
   10340:	20c9c83a 	sub	r4,r4,r3
   10344:	2908d83a 	srl	r4,r5,r4
   10348:	80e0983a 	sll	r16,r16,r3
   1034c:	003fce06 	br	10288 <__floatunsidf+0x48>
   10350:	01400044 	movi	r5,1
   10354:	28ca983a 	sll	r5,r5,r3
   10358:	003fe206 	br	102e4 <__floatunsidf+0xa4>

0001035c <udivmodsi4>:
   1035c:	2005883a 	mov	r2,r4
   10360:	2900182e 	bgeu	r5,r4,103c4 <udivmodsi4+0x68>
   10364:	28001716 	blt	r5,zero,103c4 <udivmodsi4+0x68>
   10368:	01000804 	movi	r4,32
   1036c:	00c00044 	movi	r3,1
   10370:	00000206 	br	1037c <udivmodsi4+0x20>
   10374:	20001126 	beq	r4,zero,103bc <udivmodsi4+0x60>
   10378:	28000516 	blt	r5,zero,10390 <udivmodsi4+0x34>
   1037c:	294b883a 	add	r5,r5,r5
   10380:	213fffc4 	addi	r4,r4,-1
   10384:	18c7883a 	add	r3,r3,r3
   10388:	28bffa36 	bltu	r5,r2,10374 <udivmodsi4+0x18>
   1038c:	18000b26 	beq	r3,zero,103bc <udivmodsi4+0x60>
   10390:	0009883a 	mov	r4,zero
   10394:	11400236 	bltu	r2,r5,103a0 <udivmodsi4+0x44>
   10398:	1145c83a 	sub	r2,r2,r5
   1039c:	20c8b03a 	or	r4,r4,r3
   103a0:	1806d07a 	srli	r3,r3,1
   103a4:	280ad07a 	srli	r5,r5,1
   103a8:	183ffa1e 	bne	r3,zero,10394 <udivmodsi4+0x38>
   103ac:	3000021e 	bne	r6,zero,103b8 <udivmodsi4+0x5c>
   103b0:	2005883a 	mov	r2,r4
   103b4:	f800283a 	ret
   103b8:	f800283a 	ret
   103bc:	0009883a 	mov	r4,zero
   103c0:	003ffa06 	br	103ac <udivmodsi4+0x50>
   103c4:	00c00044 	movi	r3,1
   103c8:	0009883a 	mov	r4,zero
   103cc:	003ff106 	br	10394 <udivmodsi4+0x38>

000103d0 <__divsi3>:
   103d0:	defffe04 	addi	sp,sp,-8
   103d4:	dfc00115 	stw	ra,4(sp)
   103d8:	dc000015 	stw	r16,0(sp)
   103dc:	20000a16 	blt	r4,zero,10408 <__divsi3+0x38>
   103e0:	0021883a 	mov	r16,zero
   103e4:	28000b16 	blt	r5,zero,10414 <__divsi3+0x44>
   103e8:	000d883a 	mov	r6,zero
   103ec:	001035c0 	call	1035c <udivmodsi4>
   103f0:	80000126 	beq	r16,zero,103f8 <__divsi3+0x28>
   103f4:	0085c83a 	sub	r2,zero,r2
   103f8:	dfc00117 	ldw	ra,4(sp)
   103fc:	dc000017 	ldw	r16,0(sp)
   10400:	dec00204 	addi	sp,sp,8
   10404:	f800283a 	ret
   10408:	0109c83a 	sub	r4,zero,r4
   1040c:	04000044 	movi	r16,1
   10410:	283ff50e 	bge	r5,zero,103e8 <__divsi3+0x18>
   10414:	014bc83a 	sub	r5,zero,r5
   10418:	8400005c 	xori	r16,r16,1
   1041c:	003ff206 	br	103e8 <__divsi3+0x18>

00010420 <__modsi3>:
   10420:	deffff04 	addi	sp,sp,-4
   10424:	dfc00015 	stw	ra,0(sp)
   10428:	20000516 	blt	r4,zero,10440 <__modsi3+0x20>
   1042c:	28000c16 	blt	r5,zero,10460 <__modsi3+0x40>
   10430:	01800044 	movi	r6,1
   10434:	dfc00017 	ldw	ra,0(sp)
   10438:	dec00104 	addi	sp,sp,4
   1043c:	001035c1 	jmpi	1035c <udivmodsi4>
   10440:	0109c83a 	sub	r4,zero,r4
   10444:	28000b16 	blt	r5,zero,10474 <__modsi3+0x54>
   10448:	01800044 	movi	r6,1
   1044c:	001035c0 	call	1035c <udivmodsi4>
   10450:	0085c83a 	sub	r2,zero,r2
   10454:	dfc00017 	ldw	ra,0(sp)
   10458:	dec00104 	addi	sp,sp,4
   1045c:	f800283a 	ret
   10460:	014bc83a 	sub	r5,zero,r5
   10464:	01800044 	movi	r6,1
   10468:	dfc00017 	ldw	ra,0(sp)
   1046c:	dec00104 	addi	sp,sp,4
   10470:	001035c1 	jmpi	1035c <udivmodsi4>
   10474:	014bc83a 	sub	r5,zero,r5
   10478:	003ff306 	br	10448 <__modsi3+0x28>

0001047c <__udivsi3>:
   1047c:	000d883a 	mov	r6,zero
   10480:	001035c1 	jmpi	1035c <udivmodsi4>

00010484 <__umodsi3>:
   10484:	01800044 	movi	r6,1
   10488:	001035c1 	jmpi	1035c <udivmodsi4>

0001048c <__clzsi2>:
   1048c:	00bfffd4 	movui	r2,65535
   10490:	11000b36 	bltu	r2,r4,104c0 <__clzsi2+0x34>
   10494:	00803fc4 	movi	r2,255
   10498:	11001e2e 	bgeu	r2,r4,10514 <__clzsi2+0x88>
   1049c:	00c00204 	movi	r3,8
   104a0:	20c8d83a 	srl	r4,r4,r3
   104a4:	00c00074 	movhi	r3,1
   104a8:	18d1a604 	addi	r3,r3,18072
   104ac:	00800604 	movi	r2,24
   104b0:	1909883a 	add	r4,r3,r4
   104b4:	20c00003 	ldbu	r3,0(r4)
   104b8:	10c5c83a 	sub	r2,r2,r3
   104bc:	f800283a 	ret
   104c0:	00804034 	movhi	r2,256
   104c4:	10bfffc4 	addi	r2,r2,-1
   104c8:	11000936 	bltu	r2,r4,104f0 <__clzsi2+0x64>
   104cc:	00800404 	movi	r2,16
   104d0:	1007883a 	mov	r3,r2
   104d4:	20c8d83a 	srl	r4,r4,r3
   104d8:	00c00074 	movhi	r3,1
   104dc:	18d1a604 	addi	r3,r3,18072
   104e0:	1909883a 	add	r4,r3,r4
   104e4:	20c00003 	ldbu	r3,0(r4)
   104e8:	10c5c83a 	sub	r2,r2,r3
   104ec:	f800283a 	ret
   104f0:	00c00604 	movi	r3,24
   104f4:	20c8d83a 	srl	r4,r4,r3
   104f8:	00c00074 	movhi	r3,1
   104fc:	18d1a604 	addi	r3,r3,18072
   10500:	00800204 	movi	r2,8
   10504:	1909883a 	add	r4,r3,r4
   10508:	20c00003 	ldbu	r3,0(r4)
   1050c:	10c5c83a 	sub	r2,r2,r3
   10510:	f800283a 	ret
   10514:	0007883a 	mov	r3,zero
   10518:	20c8d83a 	srl	r4,r4,r3
   1051c:	00c00074 	movhi	r3,1
   10520:	18d1a604 	addi	r3,r3,18072
   10524:	00800804 	movi	r2,32
   10528:	1909883a 	add	r4,r3,r4
   1052c:	20c00003 	ldbu	r3,0(r4)
   10530:	10c5c83a 	sub	r2,r2,r3
   10534:	f800283a 	ret

00010538 <__unpack_f>:
   10538:	20c00017 	ldw	r3,0(r4)
   1053c:	00802034 	movhi	r2,128
   10540:	10bfffc4 	addi	r2,r2,-1
   10544:	1808d5fa 	srli	r4,r3,23
   10548:	180cd7fa 	srli	r6,r3,31
   1054c:	1884703a 	and	r2,r3,r2
   10550:	21003fcc 	andi	r4,r4,255
   10554:	29800115 	stw	r6,4(r5)
   10558:	2000111e 	bne	r4,zero,105a0 <__unpack_f+0x68>
   1055c:	10001a26 	beq	r2,zero,105c8 <__unpack_f+0x90>
   10560:	00ffe084 	movi	r3,-126
   10564:	100491fa 	slli	r2,r2,7
   10568:	28c00215 	stw	r3,8(r5)
   1056c:	00c000c4 	movi	r3,3
   10570:	28c00015 	stw	r3,0(r5)
   10574:	01900034 	movhi	r6,16384
   10578:	31bfffc4 	addi	r6,r6,-1
   1057c:	30801036 	bltu	r6,r2,105c0 <__unpack_f+0x88>
   10580:	00ffe044 	movi	r3,-127
   10584:	1085883a 	add	r2,r2,r2
   10588:	1809883a 	mov	r4,r3
   1058c:	18ffffc4 	addi	r3,r3,-1
   10590:	30bffc2e 	bgeu	r6,r2,10584 <__unpack_f+0x4c>
   10594:	29000215 	stw	r4,8(r5)
   10598:	28800315 	stw	r2,12(r5)
   1059c:	f800283a 	ret
   105a0:	01803fc4 	movi	r6,255
   105a4:	21800b26 	beq	r4,r6,105d4 <__unpack_f+0x9c>
   105a8:	100491fa 	slli	r2,r2,7
   105ac:	213fe044 	addi	r4,r4,-127
   105b0:	00c000c4 	movi	r3,3
   105b4:	10900034 	orhi	r2,r2,16384
   105b8:	29000215 	stw	r4,8(r5)
   105bc:	28c00015 	stw	r3,0(r5)
   105c0:	28800315 	stw	r2,12(r5)
   105c4:	f800283a 	ret
   105c8:	00800084 	movi	r2,2
   105cc:	28800015 	stw	r2,0(r5)
   105d0:	f800283a 	ret
   105d4:	10000526 	beq	r2,zero,105ec <__unpack_f+0xb4>
   105d8:	18c0042c 	andhi	r3,r3,16
   105dc:	18000626 	beq	r3,zero,105f8 <__unpack_f+0xc0>
   105e0:	00c00044 	movi	r3,1
   105e4:	28c00015 	stw	r3,0(r5)
   105e8:	003ff506 	br	105c0 <__unpack_f+0x88>
   105ec:	00800104 	movi	r2,4
   105f0:	28800015 	stw	r2,0(r5)
   105f4:	f800283a 	ret
   105f8:	28000015 	stw	zero,0(r5)
   105fc:	003ff006 	br	105c0 <__unpack_f+0x88>

00010600 <__fpcmp_parts_f>:
   10600:	20c00017 	ldw	r3,0(r4)
   10604:	00800044 	movi	r2,1
   10608:	10c0172e 	bgeu	r2,r3,10668 <__fpcmp_parts_f+0x68>
   1060c:	29800017 	ldw	r6,0(r5)
   10610:	1180152e 	bgeu	r2,r6,10668 <__fpcmp_parts_f+0x68>
   10614:	01c00104 	movi	r7,4
   10618:	19c02326 	beq	r3,r7,106a8 <__fpcmp_parts_f+0xa8>
   1061c:	31c00926 	beq	r6,r7,10644 <__fpcmp_parts_f+0x44>
   10620:	01c00084 	movi	r7,2
   10624:	19c00626 	beq	r3,r7,10640 <__fpcmp_parts_f+0x40>
   10628:	31c01126 	beq	r6,r7,10670 <__fpcmp_parts_f+0x70>
   1062c:	20c00117 	ldw	r3,4(r4)
   10630:	29800117 	ldw	r6,4(r5)
   10634:	19801226 	beq	r3,r6,10680 <__fpcmp_parts_f+0x80>
   10638:	1800041e 	bne	r3,zero,1064c <__fpcmp_parts_f+0x4c>
   1063c:	f800283a 	ret
   10640:	30c01526 	beq	r6,r3,10698 <__fpcmp_parts_f+0x98>
   10644:	28800117 	ldw	r2,4(r5)
   10648:	1000071e 	bne	r2,zero,10668 <__fpcmp_parts_f+0x68>
   1064c:	00bfffc4 	movi	r2,-1
   10650:	f800283a 	ret
   10654:	39801216 	blt	r7,r6,106a0 <__fpcmp_parts_f+0xa0>
   10658:	21000317 	ldw	r4,12(r4)
   1065c:	28800317 	ldw	r2,12(r5)
   10660:	11000c2e 	bgeu	r2,r4,10694 <__fpcmp_parts_f+0x94>
   10664:	183ff91e 	bne	r3,zero,1064c <__fpcmp_parts_f+0x4c>
   10668:	00800044 	movi	r2,1
   1066c:	f800283a 	ret
   10670:	20800117 	ldw	r2,4(r4)
   10674:	103ff51e 	bne	r2,zero,1064c <__fpcmp_parts_f+0x4c>
   10678:	00800044 	movi	r2,1
   1067c:	f800283a 	ret
   10680:	21c00217 	ldw	r7,8(r4)
   10684:	29800217 	ldw	r6,8(r5)
   10688:	31fff20e 	bge	r6,r7,10654 <__fpcmp_parts_f+0x54>
   1068c:	183fef1e 	bne	r3,zero,1064c <__fpcmp_parts_f+0x4c>
   10690:	f800283a 	ret
   10694:	20800236 	bltu	r4,r2,106a0 <__fpcmp_parts_f+0xa0>
   10698:	0005883a 	mov	r2,zero
   1069c:	f800283a 	ret
   106a0:	183fea26 	beq	r3,zero,1064c <__fpcmp_parts_f+0x4c>
   106a4:	003ff006 	br	10668 <__fpcmp_parts_f+0x68>
   106a8:	30fff11e 	bne	r6,r3,10670 <__fpcmp_parts_f+0x70>
   106ac:	28c00117 	ldw	r3,4(r5)
   106b0:	20800117 	ldw	r2,4(r4)
   106b4:	1885c83a 	sub	r2,r3,r2
   106b8:	f800283a 	ret

000106bc <__make_fp>:
   106bc:	defffb04 	addi	sp,sp,-20
   106c0:	d9000015 	stw	r4,0(sp)
   106c4:	d809883a 	mov	r4,sp
   106c8:	dfc00415 	stw	ra,16(sp)
   106cc:	d9400115 	stw	r5,4(sp)
   106d0:	d9800215 	stw	r6,8(sp)
   106d4:	d9c00315 	stw	r7,12(sp)
   106d8:	0010b680 	call	10b68 <__pack_f>
   106dc:	dfc00417 	ldw	ra,16(sp)
   106e0:	dec00504 	addi	sp,sp,20
   106e4:	f800283a 	ret

000106e8 <__pack_d>:
   106e8:	20800017 	ldw	r2,0(r4)
   106ec:	defff804 	addi	sp,sp,-32
   106f0:	dcc00315 	stw	r19,12(sp)
   106f4:	dc800215 	stw	r18,8(sp)
   106f8:	dfc00715 	stw	ra,28(sp)
   106fc:	dd800615 	stw	r22,24(sp)
   10700:	dd400515 	stw	r21,20(sp)
   10704:	dd000415 	stw	r20,16(sp)
   10708:	dc400115 	stw	r17,4(sp)
   1070c:	dc000015 	stw	r16,0(sp)
   10710:	04800044 	movi	r18,1
   10714:	24400317 	ldw	r17,12(r4)
   10718:	24000417 	ldw	r16,16(r4)
   1071c:	24c00117 	ldw	r19,4(r4)
   10720:	9080422e 	bgeu	r18,r2,1082c <__pack_d+0x144>
   10724:	00c00104 	movi	r3,4
   10728:	10c03c26 	beq	r2,r3,1081c <__pack_d+0x134>
   1072c:	00c00084 	movi	r3,2
   10730:	10c01926 	beq	r2,r3,10798 <__pack_d+0xb0>
   10734:	8c04b03a 	or	r2,r17,r16
   10738:	10001726 	beq	r2,zero,10798 <__pack_d+0xb0>
   1073c:	21000217 	ldw	r4,8(r4)
   10740:	00bf0084 	movi	r2,-1022
   10744:	20804016 	blt	r4,r2,10848 <__pack_d+0x160>
   10748:	0080ffc4 	movi	r2,1023
   1074c:	11003316 	blt	r2,r4,1081c <__pack_d+0x134>
   10750:	88803fcc 	andi	r2,r17,255
   10754:	00c02004 	movi	r3,128
   10758:	10c02926 	beq	r2,r3,10800 <__pack_d+0x118>
   1075c:	88801fc4 	addi	r2,r17,127
   10760:	1463803a 	cmpltu	r17,r2,r17
   10764:	8c21883a 	add	r16,r17,r16
   10768:	1023883a 	mov	r17,r2
   1076c:	00880034 	movhi	r2,8192
   10770:	10bfffc4 	addi	r2,r2,-1
   10774:	14001c36 	bltu	r2,r16,107e8 <__pack_d+0x100>
   10778:	2100ffc4 	addi	r4,r4,1023
   1077c:	8006963a 	slli	r3,r16,24
   10780:	8804d23a 	srli	r2,r17,8
   10784:	8020913a 	slli	r16,r16,4
   10788:	2101ffcc 	andi	r4,r4,2047
   1078c:	1884b03a 	or	r2,r3,r2
   10790:	8020d33a 	srli	r16,r16,12
   10794:	00000306 	br	107a4 <__pack_d+0xbc>
   10798:	0009883a 	mov	r4,zero
   1079c:	0005883a 	mov	r2,zero
   107a0:	0021883a 	mov	r16,zero
   107a4:	2008953a 	slli	r4,r4,20
   107a8:	982697fa 	slli	r19,r19,31
   107ac:	00c00434 	movhi	r3,16
   107b0:	18ffffc4 	addi	r3,r3,-1
   107b4:	80e0703a 	and	r16,r16,r3
   107b8:	8106b03a 	or	r3,r16,r4
   107bc:	1cc6b03a 	or	r3,r3,r19
   107c0:	dfc00717 	ldw	ra,28(sp)
   107c4:	dd800617 	ldw	r22,24(sp)
   107c8:	dd400517 	ldw	r21,20(sp)
   107cc:	dd000417 	ldw	r20,16(sp)
   107d0:	dcc00317 	ldw	r19,12(sp)
   107d4:	dc800217 	ldw	r18,8(sp)
   107d8:	dc400117 	ldw	r17,4(sp)
   107dc:	dc000017 	ldw	r16,0(sp)
   107e0:	dec00804 	addi	sp,sp,32
   107e4:	f800283a 	ret
   107e8:	800697fa 	slli	r3,r16,31
   107ec:	8804d07a 	srli	r2,r17,1
   107f0:	21010004 	addi	r4,r4,1024
   107f4:	8020d07a 	srli	r16,r16,1
   107f8:	18a2b03a 	or	r17,r3,r2
   107fc:	003fdf06 	br	1077c <__pack_d+0x94>
   10800:	88c0400c 	andi	r3,r17,256
   10804:	183fd926 	beq	r3,zero,1076c <__pack_d+0x84>
   10808:	8885883a 	add	r2,r17,r2
   1080c:	1463803a 	cmpltu	r17,r2,r17
   10810:	8c21883a 	add	r16,r17,r16
   10814:	1023883a 	mov	r17,r2
   10818:	003fd406 	br	1076c <__pack_d+0x84>
   1081c:	0101ffc4 	movi	r4,2047
   10820:	0005883a 	mov	r2,zero
   10824:	0021883a 	mov	r16,zero
   10828:	003fde06 	br	107a4 <__pack_d+0xbc>
   1082c:	84000234 	orhi	r16,r16,8
   10830:	00c00434 	movhi	r3,16
   10834:	18ffffc4 	addi	r3,r3,-1
   10838:	8805883a 	mov	r2,r17
   1083c:	80e0703a 	and	r16,r16,r3
   10840:	0101ffc4 	movi	r4,2047
   10844:	003fd706 	br	107a4 <__pack_d+0xbc>
   10848:	1129c83a 	sub	r20,r2,r4
   1084c:	00800e04 	movi	r2,56
   10850:	15002716 	blt	r2,r20,108f0 <__pack_d+0x208>
   10854:	800b883a 	mov	r5,r16
   10858:	a00d883a 	mov	r6,r20
   1085c:	8809883a 	mov	r4,r17
   10860:	0010ae00 	call	10ae0 <__lshrdi3>
   10864:	9009883a 	mov	r4,r18
   10868:	000b883a 	mov	r5,zero
   1086c:	a00d883a 	mov	r6,r20
   10870:	102d883a 	mov	r22,r2
   10874:	182b883a 	mov	r21,r3
   10878:	0010b240 	call	10b24 <__ashldi3>
   1087c:	1009003a 	cmpeq	r4,r2,zero
   10880:	1907c83a 	sub	r3,r3,r4
   10884:	10bfffc4 	addi	r2,r2,-1
   10888:	1c20703a 	and	r16,r3,r16
   1088c:	1444703a 	and	r2,r2,r17
   10890:	1404b03a 	or	r2,r2,r16
   10894:	1004c03a 	cmpne	r2,r2,zero
   10898:	1584b03a 	or	r2,r2,r22
   1089c:	11003fcc 	andi	r4,r2,255
   108a0:	01402004 	movi	r5,128
   108a4:	a807883a 	mov	r3,r21
   108a8:	2140131e 	bne	r4,r5,108f8 <__pack_d+0x210>
   108ac:	1140400c 	andi	r5,r2,256
   108b0:	28000426 	beq	r5,zero,108c4 <__pack_d+0x1dc>
   108b4:	1109883a 	add	r4,r2,r4
   108b8:	2085803a 	cmpltu	r2,r4,r2
   108bc:	1547883a 	add	r3,r2,r21
   108c0:	2005883a 	mov	r2,r4
   108c4:	1808963a 	slli	r4,r3,24
   108c8:	1004d23a 	srli	r2,r2,8
   108cc:	1820913a 	slli	r16,r3,4
   108d0:	01440034 	movhi	r5,4096
   108d4:	297fffc4 	addi	r5,r5,-1
   108d8:	2084b03a 	or	r2,r4,r2
   108dc:	8020d33a 	srli	r16,r16,12
   108e0:	01000044 	movi	r4,1
   108e4:	28ffaf36 	bltu	r5,r3,107a4 <__pack_d+0xbc>
   108e8:	0009883a 	mov	r4,zero
   108ec:	003fad06 	br	107a4 <__pack_d+0xbc>
   108f0:	0005883a 	mov	r2,zero
   108f4:	0007883a 	mov	r3,zero
   108f8:	11001fc4 	addi	r4,r2,127
   108fc:	2085803a 	cmpltu	r2,r4,r2
   10900:	10c7883a 	add	r3,r2,r3
   10904:	2005883a 	mov	r2,r4
   10908:	003fee06 	br	108c4 <__pack_d+0x1dc>

0001090c <__unpack_d>:
   1090c:	21800117 	ldw	r6,4(r4)
   10910:	20c00017 	ldw	r3,0(r4)
   10914:	3004d7fa 	srli	r2,r6,31
   10918:	3008d53a 	srli	r4,r6,20
   1091c:	28800115 	stw	r2,4(r5)
   10920:	2101ffcc 	andi	r4,r4,2047
   10924:	00800434 	movhi	r2,16
   10928:	10bfffc4 	addi	r2,r2,-1
   1092c:	3084703a 	and	r2,r6,r2
   10930:	20001a1e 	bne	r4,zero,1099c <__unpack_d+0x90>
   10934:	1888b03a 	or	r4,r3,r2
   10938:	20002626 	beq	r4,zero,109d4 <__unpack_d+0xc8>
   1093c:	1808d63a 	srli	r4,r3,24
   10940:	1004923a 	slli	r2,r2,8
   10944:	01bf0084 	movi	r6,-1022
   10948:	29800215 	stw	r6,8(r5)
   1094c:	2084b03a 	or	r2,r4,r2
   10950:	010000c4 	movi	r4,3
   10954:	29000015 	stw	r4,0(r5)
   10958:	02040034 	movhi	r8,4096
   1095c:	423fffc4 	addi	r8,r8,-1
   10960:	1806923a 	slli	r3,r3,8
   10964:	40801836 	bltu	r8,r2,109c8 <__unpack_d+0xbc>
   10968:	013f0044 	movi	r4,-1023
   1096c:	18cd883a 	add	r6,r3,r3
   10970:	30c7803a 	cmpltu	r3,r6,r3
   10974:	1085883a 	add	r2,r2,r2
   10978:	1885883a 	add	r2,r3,r2
   1097c:	200f883a 	mov	r7,r4
   10980:	3007883a 	mov	r3,r6
   10984:	213fffc4 	addi	r4,r4,-1
   10988:	40bff82e 	bgeu	r8,r2,1096c <__unpack_d+0x60>
   1098c:	29c00215 	stw	r7,8(r5)
   10990:	28c00315 	stw	r3,12(r5)
   10994:	28800415 	stw	r2,16(r5)
   10998:	f800283a 	ret
   1099c:	01c1ffc4 	movi	r7,2047
   109a0:	21c00f26 	beq	r4,r7,109e0 <__unpack_d+0xd4>
   109a4:	180cd63a 	srli	r6,r3,24
   109a8:	1004923a 	slli	r2,r2,8
   109ac:	213f0044 	addi	r4,r4,-1023
   109b0:	1806923a 	slli	r3,r3,8
   109b4:	3084b03a 	or	r2,r6,r2
   109b8:	29000215 	stw	r4,8(r5)
   109bc:	010000c4 	movi	r4,3
   109c0:	10840034 	orhi	r2,r2,4096
   109c4:	29000015 	stw	r4,0(r5)
   109c8:	28c00315 	stw	r3,12(r5)
   109cc:	28800415 	stw	r2,16(r5)
   109d0:	f800283a 	ret
   109d4:	00800084 	movi	r2,2
   109d8:	28800015 	stw	r2,0(r5)
   109dc:	f800283a 	ret
   109e0:	1888b03a 	or	r4,r3,r2
   109e4:	20000526 	beq	r4,zero,109fc <__unpack_d+0xf0>
   109e8:	3180022c 	andhi	r6,r6,8
   109ec:	30000626 	beq	r6,zero,10a08 <__unpack_d+0xfc>
   109f0:	01000044 	movi	r4,1
   109f4:	29000015 	stw	r4,0(r5)
   109f8:	003ff306 	br	109c8 <__unpack_d+0xbc>
   109fc:	00800104 	movi	r2,4
   10a00:	28800015 	stw	r2,0(r5)
   10a04:	f800283a 	ret
   10a08:	28000015 	stw	zero,0(r5)
   10a0c:	003fee06 	br	109c8 <__unpack_d+0xbc>

00010a10 <__fpcmp_parts_d>:
   10a10:	20c00017 	ldw	r3,0(r4)
   10a14:	00800044 	movi	r2,1
   10a18:	10c0142e 	bgeu	r2,r3,10a6c <__fpcmp_parts_d+0x5c>
   10a1c:	29800017 	ldw	r6,0(r5)
   10a20:	1180122e 	bgeu	r2,r6,10a6c <__fpcmp_parts_d+0x5c>
   10a24:	01c00104 	movi	r7,4
   10a28:	19c02826 	beq	r3,r7,10acc <__fpcmp_parts_d+0xbc>
   10a2c:	31c00926 	beq	r6,r7,10a54 <__fpcmp_parts_d+0x44>
   10a30:	01c00084 	movi	r7,2
   10a34:	19c00626 	beq	r3,r7,10a50 <__fpcmp_parts_d+0x40>
   10a38:	31c00a26 	beq	r6,r7,10a64 <__fpcmp_parts_d+0x54>
   10a3c:	20c00117 	ldw	r3,4(r4)
   10a40:	29800117 	ldw	r6,4(r5)
   10a44:	19800b26 	beq	r3,r6,10a74 <__fpcmp_parts_d+0x64>
   10a48:	1800041e 	bne	r3,zero,10a5c <__fpcmp_parts_d+0x4c>
   10a4c:	f800283a 	ret
   10a50:	30c01a26 	beq	r6,r3,10abc <__fpcmp_parts_d+0xac>
   10a54:	28800117 	ldw	r2,4(r5)
   10a58:	1000041e 	bne	r2,zero,10a6c <__fpcmp_parts_d+0x5c>
   10a5c:	00bfffc4 	movi	r2,-1
   10a60:	f800283a 	ret
   10a64:	20800117 	ldw	r2,4(r4)
   10a68:	103ffc1e 	bne	r2,zero,10a5c <__fpcmp_parts_d+0x4c>
   10a6c:	00800044 	movi	r2,1
   10a70:	f800283a 	ret
   10a74:	21c00217 	ldw	r7,8(r4)
   10a78:	29800217 	ldw	r6,8(r5)
   10a7c:	31c0020e 	bge	r6,r7,10a88 <__fpcmp_parts_d+0x78>
   10a80:	183ff61e 	bne	r3,zero,10a5c <__fpcmp_parts_d+0x4c>
   10a84:	f800283a 	ret
   10a88:	39800a16 	blt	r7,r6,10ab4 <__fpcmp_parts_d+0xa4>
   10a8c:	20800417 	ldw	r2,16(r4)
   10a90:	29800417 	ldw	r6,16(r5)
   10a94:	21c00317 	ldw	r7,12(r4)
   10a98:	29000317 	ldw	r4,12(r5)
   10a9c:	30800936 	bltu	r6,r2,10ac4 <__fpcmp_parts_d+0xb4>
   10aa0:	1180011e 	bne	r2,r6,10aa8 <__fpcmp_parts_d+0x98>
   10aa4:	21c00736 	bltu	r4,r7,10ac4 <__fpcmp_parts_d+0xb4>
   10aa8:	11800236 	bltu	r2,r6,10ab4 <__fpcmp_parts_d+0xa4>
   10aac:	3080031e 	bne	r6,r2,10abc <__fpcmp_parts_d+0xac>
   10ab0:	3900022e 	bgeu	r7,r4,10abc <__fpcmp_parts_d+0xac>
   10ab4:	183fe926 	beq	r3,zero,10a5c <__fpcmp_parts_d+0x4c>
   10ab8:	003fec06 	br	10a6c <__fpcmp_parts_d+0x5c>
   10abc:	0005883a 	mov	r2,zero
   10ac0:	f800283a 	ret
   10ac4:	183fe926 	beq	r3,zero,10a6c <__fpcmp_parts_d+0x5c>
   10ac8:	003fe406 	br	10a5c <__fpcmp_parts_d+0x4c>
   10acc:	30ffe51e 	bne	r6,r3,10a64 <__fpcmp_parts_d+0x54>
   10ad0:	28c00117 	ldw	r3,4(r5)
   10ad4:	20800117 	ldw	r2,4(r4)
   10ad8:	1885c83a 	sub	r2,r3,r2
   10adc:	f800283a 	ret

00010ae0 <__lshrdi3>:
   10ae0:	2005883a 	mov	r2,r4
   10ae4:	2807883a 	mov	r3,r5
   10ae8:	30000826 	beq	r6,zero,10b0c <__lshrdi3+0x2c>
   10aec:	01000804 	movi	r4,32
   10af0:	2189c83a 	sub	r4,r4,r6
   10af4:	0100060e 	bge	zero,r4,10b10 <__lshrdi3+0x30>
   10af8:	1184d83a 	srl	r2,r2,r6
   10afc:	2908983a 	sll	r4,r5,r4
   10b00:	298cd83a 	srl	r6,r5,r6
   10b04:	2084b03a 	or	r2,r4,r2
   10b08:	3007883a 	mov	r3,r6
   10b0c:	f800283a 	ret
   10b10:	0105c83a 	sub	r2,zero,r4
   10b14:	000d883a 	mov	r6,zero
   10b18:	2884d83a 	srl	r2,r5,r2
   10b1c:	3007883a 	mov	r3,r6
   10b20:	003ffa06 	br	10b0c <__lshrdi3+0x2c>

00010b24 <__ashldi3>:
   10b24:	2005883a 	mov	r2,r4
   10b28:	2807883a 	mov	r3,r5
   10b2c:	30000826 	beq	r6,zero,10b50 <__ashldi3+0x2c>
   10b30:	01000804 	movi	r4,32
   10b34:	2189c83a 	sub	r4,r4,r6
   10b38:	0100060e 	bge	zero,r4,10b54 <__ashldi3+0x30>
   10b3c:	1108d83a 	srl	r4,r2,r4
   10b40:	2986983a 	sll	r3,r5,r6
   10b44:	118c983a 	sll	r6,r2,r6
   10b48:	20c6b03a 	or	r3,r4,r3
   10b4c:	3005883a 	mov	r2,r6
   10b50:	f800283a 	ret
   10b54:	0107c83a 	sub	r3,zero,r4
   10b58:	000d883a 	mov	r6,zero
   10b5c:	10c6983a 	sll	r3,r2,r3
   10b60:	3005883a 	mov	r2,r6
   10b64:	003ffa06 	br	10b50 <__ashldi3+0x2c>

00010b68 <__pack_f>:
   10b68:	21400017 	ldw	r5,0(r4)
   10b6c:	01800044 	movi	r6,1
   10b70:	20c00317 	ldw	r3,12(r4)
   10b74:	21c00117 	ldw	r7,4(r4)
   10b78:	3140282e 	bgeu	r6,r5,10c1c <__pack_f+0xb4>
   10b7c:	00800104 	movi	r2,4
   10b80:	28802326 	beq	r5,r2,10c10 <__pack_f+0xa8>
   10b84:	00800084 	movi	r2,2
   10b88:	28800f26 	beq	r5,r2,10bc8 <__pack_f+0x60>
   10b8c:	18000e26 	beq	r3,zero,10bc8 <__pack_f+0x60>
   10b90:	21000217 	ldw	r4,8(r4)
   10b94:	00bfe084 	movi	r2,-126
   10b98:	20802616 	blt	r4,r2,10c34 <__pack_f+0xcc>
   10b9c:	00801fc4 	movi	r2,127
   10ba0:	11001b16 	blt	r2,r4,10c10 <__pack_f+0xa8>
   10ba4:	188a703a 	and	r5,r3,r2
   10ba8:	00801004 	movi	r2,64
   10bac:	28801126 	beq	r5,r2,10bf4 <__pack_f+0x8c>
   10bb0:	18c00fc4 	addi	r3,r3,63
   10bb4:	18001316 	blt	r3,zero,10c04 <__pack_f+0x9c>
   10bb8:	21001fc4 	addi	r4,r4,127
   10bbc:	180690ba 	slli	r3,r3,2
   10bc0:	1806d27a 	srli	r3,r3,9
   10bc4:	00000206 	br	10bd0 <__pack_f+0x68>
   10bc8:	0009883a 	mov	r4,zero
   10bcc:	0007883a 	mov	r3,zero
   10bd0:	21003fcc 	andi	r4,r4,255
   10bd4:	200895fa 	slli	r4,r4,23
   10bd8:	380a97fa 	slli	r5,r7,31
   10bdc:	00802034 	movhi	r2,128
   10be0:	10bfffc4 	addi	r2,r2,-1
   10be4:	1886703a 	and	r3,r3,r2
   10be8:	1904b03a 	or	r2,r3,r4
   10bec:	1144b03a 	or	r2,r2,r5
   10bf0:	f800283a 	ret
   10bf4:	1880200c 	andi	r2,r3,128
   10bf8:	103fee26 	beq	r2,zero,10bb4 <__pack_f+0x4c>
   10bfc:	18c01004 	addi	r3,r3,64
   10c00:	183fed0e 	bge	r3,zero,10bb8 <__pack_f+0x50>
   10c04:	1806d07a 	srli	r3,r3,1
   10c08:	21002004 	addi	r4,r4,128
   10c0c:	003feb06 	br	10bbc <__pack_f+0x54>
   10c10:	013fffc4 	movi	r4,-1
   10c14:	0007883a 	mov	r3,zero
   10c18:	003fed06 	br	10bd0 <__pack_f+0x68>
   10c1c:	18c00434 	orhi	r3,r3,16
   10c20:	00802034 	movhi	r2,128
   10c24:	10bfffc4 	addi	r2,r2,-1
   10c28:	1886703a 	and	r3,r3,r2
   10c2c:	013fffc4 	movi	r4,-1
   10c30:	003fe706 	br	10bd0 <__pack_f+0x68>
   10c34:	1105c83a 	sub	r2,r2,r4
   10c38:	01000644 	movi	r4,25
   10c3c:	20801216 	blt	r4,r2,10c88 <__pack_f+0x120>
   10c40:	3088983a 	sll	r4,r6,r2
   10c44:	1884d83a 	srl	r2,r3,r2
   10c48:	213fffc4 	addi	r4,r4,-1
   10c4c:	20c6703a 	and	r3,r4,r3
   10c50:	1806c03a 	cmpne	r3,r3,zero
   10c54:	1884b03a 	or	r2,r3,r2
   10c58:	11001fcc 	andi	r4,r2,127
   10c5c:	00c01004 	movi	r3,64
   10c60:	20c00a1e 	bne	r4,r3,10c8c <__pack_f+0x124>
   10c64:	10c0200c 	andi	r3,r2,128
   10c68:	18000126 	beq	r3,zero,10c70 <__pack_f+0x108>
   10c6c:	10801004 	addi	r2,r2,64
   10c70:	100690ba 	slli	r3,r2,2
   10c74:	01100034 	movhi	r4,16384
   10c78:	1105403a 	cmpgeu	r2,r2,r4
   10c7c:	1806d27a 	srli	r3,r3,9
   10c80:	1009883a 	mov	r4,r2
   10c84:	003fd206 	br	10bd0 <__pack_f+0x68>
   10c88:	0005883a 	mov	r2,zero
   10c8c:	10800fc4 	addi	r2,r2,63
   10c90:	003ff706 	br	10c70 <__pack_f+0x108>

00010c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c94:	defffe04 	addi	sp,sp,-8
   10c98:	dfc00115 	stw	ra,4(sp)
   10c9c:	df000015 	stw	fp,0(sp)
   10ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10ca4:	00800074 	movhi	r2,1
   10ca8:	1098b804 	addi	r2,r2,25312
   10cac:	10800017 	ldw	r2,0(r2)
   10cb0:	10000526 	beq	r2,zero,10cc8 <alt_get_errno+0x34>
   10cb4:	00800074 	movhi	r2,1
   10cb8:	1098b804 	addi	r2,r2,25312
   10cbc:	10800017 	ldw	r2,0(r2)
   10cc0:	103ee83a 	callr	r2
   10cc4:	00000206 	br	10cd0 <alt_get_errno+0x3c>
   10cc8:	00800074 	movhi	r2,1
   10ccc:	109fac04 	addi	r2,r2,32432
}
   10cd0:	e037883a 	mov	sp,fp
   10cd4:	dfc00117 	ldw	ra,4(sp)
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00204 	addi	sp,sp,8
   10ce0:	f800283a 	ret

00010ce4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10ce4:	defffb04 	addi	sp,sp,-20
   10ce8:	dfc00415 	stw	ra,16(sp)
   10cec:	df000315 	stw	fp,12(sp)
   10cf0:	df000304 	addi	fp,sp,12
   10cf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	10000716 	blt	r2,zero,10d1c <close+0x38>
   10d00:	e13fff17 	ldw	r4,-4(fp)
   10d04:	01400304 	movi	r5,12
   10d08:	00015040 	call	1504 <__mulsi3>
   10d0c:	00c00074 	movhi	r3,1
   10d10:	18d42b04 	addi	r3,r3,20652
   10d14:	10c5883a 	add	r2,r2,r3
   10d18:	00000106 	br	10d20 <close+0x3c>
   10d1c:	0005883a 	mov	r2,zero
   10d20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   10d24:	e0bffd17 	ldw	r2,-12(fp)
   10d28:	10001826 	beq	r2,zero,10d8c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10d2c:	e0bffd17 	ldw	r2,-12(fp)
   10d30:	10800017 	ldw	r2,0(r2)
   10d34:	10800417 	ldw	r2,16(r2)
   10d38:	10000626 	beq	r2,zero,10d54 <close+0x70>
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	10800017 	ldw	r2,0(r2)
   10d44:	10800417 	ldw	r2,16(r2)
   10d48:	e13ffd17 	ldw	r4,-12(fp)
   10d4c:	103ee83a 	callr	r2
   10d50:	00000106 	br	10d58 <close+0x74>
   10d54:	0005883a 	mov	r2,zero
   10d58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10d5c:	e13fff17 	ldw	r4,-4(fp)
   10d60:	00116740 	call	11674 <alt_release_fd>
    if (rval < 0)
   10d64:	e0bffe17 	ldw	r2,-8(fp)
   10d68:	1000060e 	bge	r2,zero,10d84 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   10d6c:	0010c940 	call	10c94 <alt_get_errno>
   10d70:	e0fffe17 	ldw	r3,-8(fp)
   10d74:	00c7c83a 	sub	r3,zero,r3
   10d78:	10c00015 	stw	r3,0(r2)
      return -1;
   10d7c:	00bfffc4 	movi	r2,-1
   10d80:	00000606 	br	10d9c <close+0xb8>
    }
    return 0;
   10d84:	0005883a 	mov	r2,zero
   10d88:	00000406 	br	10d9c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10d8c:	0010c940 	call	10c94 <alt_get_errno>
   10d90:	00c01444 	movi	r3,81
   10d94:	10c00015 	stw	r3,0(r2)
    return -1;
   10d98:	00bfffc4 	movi	r2,-1
  }
}
   10d9c:	e037883a 	mov	sp,fp
   10da0:	dfc00117 	ldw	ra,4(sp)
   10da4:	df000017 	ldw	fp,0(sp)
   10da8:	dec00204 	addi	sp,sp,8
   10dac:	f800283a 	ret

00010db0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10db0:	defffc04 	addi	sp,sp,-16
   10db4:	df000315 	stw	fp,12(sp)
   10db8:	df000304 	addi	fp,sp,12
   10dbc:	e13ffd15 	stw	r4,-12(fp)
   10dc0:	e17ffe15 	stw	r5,-8(fp)
   10dc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10dc8:	e0bfff17 	ldw	r2,-4(fp)
}
   10dcc:	e037883a 	mov	sp,fp
   10dd0:	df000017 	ldw	fp,0(sp)
   10dd4:	dec00104 	addi	sp,sp,4
   10dd8:	f800283a 	ret

00010ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ddc:	defffe04 	addi	sp,sp,-8
   10de0:	dfc00115 	stw	ra,4(sp)
   10de4:	df000015 	stw	fp,0(sp)
   10de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10dec:	00800074 	movhi	r2,1
   10df0:	1098b804 	addi	r2,r2,25312
   10df4:	10800017 	ldw	r2,0(r2)
   10df8:	10000526 	beq	r2,zero,10e10 <alt_get_errno+0x34>
   10dfc:	00800074 	movhi	r2,1
   10e00:	1098b804 	addi	r2,r2,25312
   10e04:	10800017 	ldw	r2,0(r2)
   10e08:	103ee83a 	callr	r2
   10e0c:	00000206 	br	10e18 <alt_get_errno+0x3c>
   10e10:	00800074 	movhi	r2,1
   10e14:	109fac04 	addi	r2,r2,32432
}
   10e18:	e037883a 	mov	sp,fp
   10e1c:	dfc00117 	ldw	ra,4(sp)
   10e20:	df000017 	ldw	fp,0(sp)
   10e24:	dec00204 	addi	sp,sp,8
   10e28:	f800283a 	ret

00010e2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   10e2c:	defffb04 	addi	sp,sp,-20
   10e30:	dfc00415 	stw	ra,16(sp)
   10e34:	df000315 	stw	fp,12(sp)
   10e38:	df000304 	addi	fp,sp,12
   10e3c:	e13ffe15 	stw	r4,-8(fp)
   10e40:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10e44:	e0bffe17 	ldw	r2,-8(fp)
   10e48:	10000716 	blt	r2,zero,10e68 <fstat+0x3c>
   10e4c:	e13ffe17 	ldw	r4,-8(fp)
   10e50:	01400304 	movi	r5,12
   10e54:	00015040 	call	1504 <__mulsi3>
   10e58:	00c00074 	movhi	r3,1
   10e5c:	18d42b04 	addi	r3,r3,20652
   10e60:	10c5883a 	add	r2,r2,r3
   10e64:	00000106 	br	10e6c <fstat+0x40>
   10e68:	0005883a 	mov	r2,zero
   10e6c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10e70:	e0bffd17 	ldw	r2,-12(fp)
   10e74:	10001026 	beq	r2,zero,10eb8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10e78:	e0bffd17 	ldw	r2,-12(fp)
   10e7c:	10800017 	ldw	r2,0(r2)
   10e80:	10800817 	ldw	r2,32(r2)
   10e84:	10000726 	beq	r2,zero,10ea4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   10e88:	e0bffd17 	ldw	r2,-12(fp)
   10e8c:	10800017 	ldw	r2,0(r2)
   10e90:	10800817 	ldw	r2,32(r2)
   10e94:	e13ffd17 	ldw	r4,-12(fp)
   10e98:	e17fff17 	ldw	r5,-4(fp)
   10e9c:	103ee83a 	callr	r2
   10ea0:	00000906 	br	10ec8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10ea4:	e0bfff17 	ldw	r2,-4(fp)
   10ea8:	00c80004 	movi	r3,8192
   10eac:	10c00115 	stw	r3,4(r2)
      return 0;
   10eb0:	0005883a 	mov	r2,zero
   10eb4:	00000406 	br	10ec8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10eb8:	0010ddc0 	call	10ddc <alt_get_errno>
   10ebc:	00c01444 	movi	r3,81
   10ec0:	10c00015 	stw	r3,0(r2)
    return -1;
   10ec4:	00bfffc4 	movi	r2,-1
  }
}
   10ec8:	e037883a 	mov	sp,fp
   10ecc:	dfc00117 	ldw	ra,4(sp)
   10ed0:	df000017 	ldw	fp,0(sp)
   10ed4:	dec00204 	addi	sp,sp,8
   10ed8:	f800283a 	ret

00010edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10edc:	defffe04 	addi	sp,sp,-8
   10ee0:	dfc00115 	stw	ra,4(sp)
   10ee4:	df000015 	stw	fp,0(sp)
   10ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10eec:	00800074 	movhi	r2,1
   10ef0:	1098b804 	addi	r2,r2,25312
   10ef4:	10800017 	ldw	r2,0(r2)
   10ef8:	10000526 	beq	r2,zero,10f10 <alt_get_errno+0x34>
   10efc:	00800074 	movhi	r2,1
   10f00:	1098b804 	addi	r2,r2,25312
   10f04:	10800017 	ldw	r2,0(r2)
   10f08:	103ee83a 	callr	r2
   10f0c:	00000206 	br	10f18 <alt_get_errno+0x3c>
   10f10:	00800074 	movhi	r2,1
   10f14:	109fac04 	addi	r2,r2,32432
}
   10f18:	e037883a 	mov	sp,fp
   10f1c:	dfc00117 	ldw	ra,4(sp)
   10f20:	df000017 	ldw	fp,0(sp)
   10f24:	dec00204 	addi	sp,sp,8
   10f28:	f800283a 	ret

00010f2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10f2c:	deffed04 	addi	sp,sp,-76
   10f30:	dfc01215 	stw	ra,72(sp)
   10f34:	df001115 	stw	fp,68(sp)
   10f38:	df001104 	addi	fp,sp,68
   10f3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10f40:	e0bfff17 	ldw	r2,-4(fp)
   10f44:	10000716 	blt	r2,zero,10f64 <isatty+0x38>
   10f48:	e13fff17 	ldw	r4,-4(fp)
   10f4c:	01400304 	movi	r5,12
   10f50:	00015040 	call	1504 <__mulsi3>
   10f54:	00c00074 	movhi	r3,1
   10f58:	18d42b04 	addi	r3,r3,20652
   10f5c:	10c5883a 	add	r2,r2,r3
   10f60:	00000106 	br	10f68 <isatty+0x3c>
   10f64:	0005883a 	mov	r2,zero
   10f68:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10f6c:	e0bfef17 	ldw	r2,-68(fp)
   10f70:	10000e26 	beq	r2,zero,10fac <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10f74:	e0bfef17 	ldw	r2,-68(fp)
   10f78:	10800017 	ldw	r2,0(r2)
   10f7c:	10800817 	ldw	r2,32(r2)
   10f80:	1000021e 	bne	r2,zero,10f8c <isatty+0x60>
    {
      return 1;
   10f84:	00800044 	movi	r2,1
   10f88:	00000c06 	br	10fbc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10f8c:	e0bff004 	addi	r2,fp,-64
   10f90:	e13fff17 	ldw	r4,-4(fp)
   10f94:	100b883a 	mov	r5,r2
   10f98:	0010e2c0 	call	10e2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10f9c:	e0bff117 	ldw	r2,-60(fp)
   10fa0:	10880020 	cmpeqi	r2,r2,8192
   10fa4:	10803fcc 	andi	r2,r2,255
   10fa8:	00000406 	br	10fbc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10fac:	0010edc0 	call	10edc <alt_get_errno>
   10fb0:	00c01444 	movi	r3,81
   10fb4:	10c00015 	stw	r3,0(r2)
    return 0;
   10fb8:	0005883a 	mov	r2,zero
  }
}
   10fbc:	e037883a 	mov	sp,fp
   10fc0:	dfc00117 	ldw	ra,4(sp)
   10fc4:	df000017 	ldw	fp,0(sp)
   10fc8:	dec00204 	addi	sp,sp,8
   10fcc:	f800283a 	ret

00010fd0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10fd0:	defffc04 	addi	sp,sp,-16
   10fd4:	df000315 	stw	fp,12(sp)
   10fd8:	df000304 	addi	fp,sp,12
   10fdc:	e13ffd15 	stw	r4,-12(fp)
   10fe0:	e17ffe15 	stw	r5,-8(fp)
   10fe4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10fe8:	e0fffe17 	ldw	r3,-8(fp)
   10fec:	e0bffd17 	ldw	r2,-12(fp)
   10ff0:	18800e26 	beq	r3,r2,1102c <alt_load_section+0x5c>
  {
    while( to != end )
   10ff4:	00000a06 	br	11020 <alt_load_section+0x50>
    {
      *to++ = *from++;
   10ff8:	e0bffd17 	ldw	r2,-12(fp)
   10ffc:	10c00017 	ldw	r3,0(r2)
   11000:	e0bffe17 	ldw	r2,-8(fp)
   11004:	10c00015 	stw	r3,0(r2)
   11008:	e0bffe17 	ldw	r2,-8(fp)
   1100c:	10800104 	addi	r2,r2,4
   11010:	e0bffe15 	stw	r2,-8(fp)
   11014:	e0bffd17 	ldw	r2,-12(fp)
   11018:	10800104 	addi	r2,r2,4
   1101c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11020:	e0fffe17 	ldw	r3,-8(fp)
   11024:	e0bfff17 	ldw	r2,-4(fp)
   11028:	18bff31e 	bne	r3,r2,10ff8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1102c:	e037883a 	mov	sp,fp
   11030:	df000017 	ldw	fp,0(sp)
   11034:	dec00104 	addi	sp,sp,4
   11038:	f800283a 	ret

0001103c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1103c:	defffe04 	addi	sp,sp,-8
   11040:	dfc00115 	stw	ra,4(sp)
   11044:	df000015 	stw	fp,0(sp)
   11048:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1104c:	01000074 	movhi	r4,1
   11050:	2118cf04 	addi	r4,r4,25404
   11054:	01400074 	movhi	r5,1
   11058:	2951f404 	addi	r5,r5,18384
   1105c:	01800074 	movhi	r6,1
   11060:	3198cf04 	addi	r6,r6,25404
   11064:	0010fd00 	call	10fd0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11068:	01000034 	movhi	r4,0
   1106c:	21000804 	addi	r4,r4,32
   11070:	01400034 	movhi	r5,0
   11074:	29400804 	addi	r5,r5,32
   11078:	01800034 	movhi	r6,0
   1107c:	31806e04 	addi	r6,r6,440
   11080:	0010fd00 	call	10fd0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11084:	01000074 	movhi	r4,1
   11088:	21100604 	addi	r4,r4,16408
   1108c:	01400074 	movhi	r5,1
   11090:	29500604 	addi	r5,r5,16408
   11094:	01800074 	movhi	r6,1
   11098:	3191f404 	addi	r6,r6,18384
   1109c:	0010fd00 	call	10fd0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   110a0:	001318c0 	call	1318c <alt_dcache_flush_all>
  alt_icache_flush_all();
   110a4:	001364c0 	call	1364c <alt_icache_flush_all>
}
   110a8:	e037883a 	mov	sp,fp
   110ac:	dfc00117 	ldw	ra,4(sp)
   110b0:	df000017 	ldw	fp,0(sp)
   110b4:	dec00204 	addi	sp,sp,8
   110b8:	f800283a 	ret

000110bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110bc:	defffe04 	addi	sp,sp,-8
   110c0:	dfc00115 	stw	ra,4(sp)
   110c4:	df000015 	stw	fp,0(sp)
   110c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   110cc:	00800074 	movhi	r2,1
   110d0:	1098b804 	addi	r2,r2,25312
   110d4:	10800017 	ldw	r2,0(r2)
   110d8:	10000526 	beq	r2,zero,110f0 <alt_get_errno+0x34>
   110dc:	00800074 	movhi	r2,1
   110e0:	1098b804 	addi	r2,r2,25312
   110e4:	10800017 	ldw	r2,0(r2)
   110e8:	103ee83a 	callr	r2
   110ec:	00000206 	br	110f8 <alt_get_errno+0x3c>
   110f0:	00800074 	movhi	r2,1
   110f4:	109fac04 	addi	r2,r2,32432
}
   110f8:	e037883a 	mov	sp,fp
   110fc:	dfc00117 	ldw	ra,4(sp)
   11100:	df000017 	ldw	fp,0(sp)
   11104:	dec00204 	addi	sp,sp,8
   11108:	f800283a 	ret

0001110c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1110c:	defff904 	addi	sp,sp,-28
   11110:	dfc00615 	stw	ra,24(sp)
   11114:	df000515 	stw	fp,20(sp)
   11118:	df000504 	addi	fp,sp,20
   1111c:	e13ffd15 	stw	r4,-12(fp)
   11120:	e17ffe15 	stw	r5,-8(fp)
   11124:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   11128:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1112c:	e0bffd17 	ldw	r2,-12(fp)
   11130:	10000716 	blt	r2,zero,11150 <lseek+0x44>
   11134:	e13ffd17 	ldw	r4,-12(fp)
   11138:	01400304 	movi	r5,12
   1113c:	00015040 	call	1504 <__mulsi3>
   11140:	00c00074 	movhi	r3,1
   11144:	18d42b04 	addi	r3,r3,20652
   11148:	10c5883a 	add	r2,r2,r3
   1114c:	00000106 	br	11154 <lseek+0x48>
   11150:	0005883a 	mov	r2,zero
   11154:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   11158:	e0bffc17 	ldw	r2,-16(fp)
   1115c:	10001026 	beq	r2,zero,111a0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   11160:	e0bffc17 	ldw	r2,-16(fp)
   11164:	10800017 	ldw	r2,0(r2)
   11168:	10800717 	ldw	r2,28(r2)
   1116c:	10000926 	beq	r2,zero,11194 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   11170:	e0bffc17 	ldw	r2,-16(fp)
   11174:	10800017 	ldw	r2,0(r2)
   11178:	10800717 	ldw	r2,28(r2)
   1117c:	e13ffc17 	ldw	r4,-16(fp)
   11180:	e17ffe17 	ldw	r5,-8(fp)
   11184:	e1bfff17 	ldw	r6,-4(fp)
   11188:	103ee83a 	callr	r2
   1118c:	e0bffb15 	stw	r2,-20(fp)
   11190:	00000506 	br	111a8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   11194:	00bfde84 	movi	r2,-134
   11198:	e0bffb15 	stw	r2,-20(fp)
   1119c:	00000206 	br	111a8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   111a0:	00bfebc4 	movi	r2,-81
   111a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   111a8:	e0bffb17 	ldw	r2,-20(fp)
   111ac:	1000060e 	bge	r2,zero,111c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   111b0:	00110bc0 	call	110bc <alt_get_errno>
   111b4:	e0fffb17 	ldw	r3,-20(fp)
   111b8:	00c7c83a 	sub	r3,zero,r3
   111bc:	10c00015 	stw	r3,0(r2)
    rc = -1;
   111c0:	00bfffc4 	movi	r2,-1
   111c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   111c8:	e0bffb17 	ldw	r2,-20(fp)
}
   111cc:	e037883a 	mov	sp,fp
   111d0:	dfc00117 	ldw	ra,4(sp)
   111d4:	df000017 	ldw	fp,0(sp)
   111d8:	dec00204 	addi	sp,sp,8
   111dc:	f800283a 	ret

000111e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   111e0:	defffd04 	addi	sp,sp,-12
   111e4:	dfc00215 	stw	ra,8(sp)
   111e8:	df000115 	stw	fp,4(sp)
   111ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   111f0:	0009883a 	mov	r4,zero
   111f4:	001191c0 	call	1191c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   111f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   111fc:	00119500 	call	11950 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11200:	01000074 	movhi	r4,1
   11204:	2111e904 	addi	r4,r4,18340
   11208:	01400074 	movhi	r5,1
   1120c:	2951e904 	addi	r5,r5,18340
   11210:	01800074 	movhi	r6,1
   11214:	3191e904 	addi	r6,r6,18340
   11218:	0013a100 	call	13a10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1121c:	00132980 	call	13298 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11220:	01000074 	movhi	r4,1
   11224:	210cbd04 	addi	r4,r4,13044
   11228:	0013c440 	call	13c44 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1122c:	d1270617 	ldw	r4,-25576(gp)
   11230:	d0e70717 	ldw	r3,-25572(gp)
   11234:	d0a70817 	ldw	r2,-25568(gp)
   11238:	180b883a 	mov	r5,r3
   1123c:	100d883a 	mov	r6,r2
   11240:	00006a40 	call	6a4 <main>
   11244:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11248:	01000044 	movi	r4,1
   1124c:	0010ce40 	call	10ce4 <close>
  exit (result);
   11250:	e13fff17 	ldw	r4,-4(fp)
   11254:	0013c580 	call	13c58 <exit>

00011258 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   11258:	defffe04 	addi	sp,sp,-8
   1125c:	df000115 	stw	fp,4(sp)
   11260:	df000104 	addi	fp,sp,4
   11264:	e13fff15 	stw	r4,-4(fp)
}
   11268:	e037883a 	mov	sp,fp
   1126c:	df000017 	ldw	fp,0(sp)
   11270:	dec00104 	addi	sp,sp,4
   11274:	f800283a 	ret

00011278 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11278:	defffe04 	addi	sp,sp,-8
   1127c:	df000115 	stw	fp,4(sp)
   11280:	df000104 	addi	fp,sp,4
   11284:	e13fff15 	stw	r4,-4(fp)
}
   11288:	e037883a 	mov	sp,fp
   1128c:	df000017 	ldw	fp,0(sp)
   11290:	dec00104 	addi	sp,sp,4
   11294:	f800283a 	ret

00011298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11298:	defffe04 	addi	sp,sp,-8
   1129c:	dfc00115 	stw	ra,4(sp)
   112a0:	df000015 	stw	fp,0(sp)
   112a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   112a8:	00800074 	movhi	r2,1
   112ac:	1098b804 	addi	r2,r2,25312
   112b0:	10800017 	ldw	r2,0(r2)
   112b4:	10000526 	beq	r2,zero,112cc <alt_get_errno+0x34>
   112b8:	00800074 	movhi	r2,1
   112bc:	1098b804 	addi	r2,r2,25312
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	103ee83a 	callr	r2
   112c8:	00000206 	br	112d4 <alt_get_errno+0x3c>
   112cc:	00800074 	movhi	r2,1
   112d0:	109fac04 	addi	r2,r2,32432
}
   112d4:	e037883a 	mov	sp,fp
   112d8:	dfc00117 	ldw	ra,4(sp)
   112dc:	df000017 	ldw	fp,0(sp)
   112e0:	dec00204 	addi	sp,sp,8
   112e4:	f800283a 	ret

000112e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   112e8:	defffb04 	addi	sp,sp,-20
   112ec:	dfc00415 	stw	ra,16(sp)
   112f0:	df000315 	stw	fp,12(sp)
   112f4:	dc000215 	stw	r16,8(sp)
   112f8:	df000204 	addi	fp,sp,8
   112fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11300:	e0bfff17 	ldw	r2,-4(fp)
   11304:	10800217 	ldw	r2,8(r2)
   11308:	10d00034 	orhi	r3,r2,16384
   1130c:	e0bfff17 	ldw	r2,-4(fp)
   11310:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11314:	e03ffe15 	stw	zero,-8(fp)
   11318:	00002206 	br	113a4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1131c:	04000074 	movhi	r16,1
   11320:	84142b04 	addi	r16,r16,20652
   11324:	e0bffe17 	ldw	r2,-8(fp)
   11328:	1009883a 	mov	r4,r2
   1132c:	01400304 	movi	r5,12
   11330:	00015040 	call	1504 <__mulsi3>
   11334:	8085883a 	add	r2,r16,r2
   11338:	10c00017 	ldw	r3,0(r2)
   1133c:	e0bfff17 	ldw	r2,-4(fp)
   11340:	10800017 	ldw	r2,0(r2)
   11344:	1880141e 	bne	r3,r2,11398 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11348:	04000074 	movhi	r16,1
   1134c:	84142b04 	addi	r16,r16,20652
   11350:	e0bffe17 	ldw	r2,-8(fp)
   11354:	1009883a 	mov	r4,r2
   11358:	01400304 	movi	r5,12
   1135c:	00015040 	call	1504 <__mulsi3>
   11360:	8085883a 	add	r2,r16,r2
   11364:	10800204 	addi	r2,r2,8
   11368:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1136c:	10000a0e 	bge	r2,zero,11398 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11370:	e13ffe17 	ldw	r4,-8(fp)
   11374:	01400304 	movi	r5,12
   11378:	00015040 	call	1504 <__mulsi3>
   1137c:	00c00074 	movhi	r3,1
   11380:	18d42b04 	addi	r3,r3,20652
   11384:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	18800226 	beq	r3,r2,11398 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11390:	00bffcc4 	movi	r2,-13
   11394:	00000a06 	br	113c0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11398:	e0bffe17 	ldw	r2,-8(fp)
   1139c:	10800044 	addi	r2,r2,1
   113a0:	e0bffe15 	stw	r2,-8(fp)
   113a4:	00800074 	movhi	r2,1
   113a8:	1098b704 	addi	r2,r2,25308
   113ac:	10800017 	ldw	r2,0(r2)
   113b0:	1007883a 	mov	r3,r2
   113b4:	e0bffe17 	ldw	r2,-8(fp)
   113b8:	18bfd82e 	bgeu	r3,r2,1131c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   113bc:	0005883a 	mov	r2,zero
}
   113c0:	e037883a 	mov	sp,fp
   113c4:	dfc00217 	ldw	ra,8(sp)
   113c8:	df000117 	ldw	fp,4(sp)
   113cc:	dc000017 	ldw	r16,0(sp)
   113d0:	dec00304 	addi	sp,sp,12
   113d4:	f800283a 	ret

000113d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   113d8:	defff604 	addi	sp,sp,-40
   113dc:	dfc00915 	stw	ra,36(sp)
   113e0:	df000815 	stw	fp,32(sp)
   113e4:	df000804 	addi	fp,sp,32
   113e8:	e13ffd15 	stw	r4,-12(fp)
   113ec:	e17ffe15 	stw	r5,-8(fp)
   113f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   113f4:	00bfffc4 	movi	r2,-1
   113f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   113fc:	00bffb44 	movi	r2,-19
   11400:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11404:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11408:	e13ffd17 	ldw	r4,-12(fp)
   1140c:	01400074 	movhi	r5,1
   11410:	2958b504 	addi	r5,r5,25300
   11414:	00133500 	call	13350 <alt_find_dev>
   11418:	e0bff815 	stw	r2,-32(fp)
   1141c:	e0bff817 	ldw	r2,-32(fp)
   11420:	1000051e 	bne	r2,zero,11438 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11424:	e13ffd17 	ldw	r4,-12(fp)
   11428:	00133e00 	call	133e0 <alt_find_file>
   1142c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11430:	00800044 	movi	r2,1
   11434:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11438:	e0bff817 	ldw	r2,-32(fp)
   1143c:	10002a26 	beq	r2,zero,114e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11440:	e13ff817 	ldw	r4,-32(fp)
   11444:	00135780 	call	13578 <alt_get_fd>
   11448:	e0bff915 	stw	r2,-28(fp)
   1144c:	e0bff917 	ldw	r2,-28(fp)
   11450:	1000030e 	bge	r2,zero,11460 <open+0x88>
    {
      status = index;
   11454:	e0bff917 	ldw	r2,-28(fp)
   11458:	e0bffa15 	stw	r2,-24(fp)
   1145c:	00002406 	br	114f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11460:	e13ff917 	ldw	r4,-28(fp)
   11464:	01400304 	movi	r5,12
   11468:	00015040 	call	1504 <__mulsi3>
   1146c:	00c00074 	movhi	r3,1
   11470:	18d42b04 	addi	r3,r3,20652
   11474:	10c5883a 	add	r2,r2,r3
   11478:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1147c:	e0fffe17 	ldw	r3,-8(fp)
   11480:	00900034 	movhi	r2,16384
   11484:	10bfffc4 	addi	r2,r2,-1
   11488:	1886703a 	and	r3,r3,r2
   1148c:	e0bffc17 	ldw	r2,-16(fp)
   11490:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11494:	e0bffb17 	ldw	r2,-20(fp)
   11498:	1000051e 	bne	r2,zero,114b0 <open+0xd8>
   1149c:	e13ffc17 	ldw	r4,-16(fp)
   114a0:	00112e80 	call	112e8 <alt_file_locked>
   114a4:	e0bffa15 	stw	r2,-24(fp)
   114a8:	e0bffa17 	ldw	r2,-24(fp)
   114ac:	10001016 	blt	r2,zero,114f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   114b0:	e0bff817 	ldw	r2,-32(fp)
   114b4:	10800317 	ldw	r2,12(r2)
   114b8:	10000826 	beq	r2,zero,114dc <open+0x104>
   114bc:	e0bff817 	ldw	r2,-32(fp)
   114c0:	10800317 	ldw	r2,12(r2)
   114c4:	e13ffc17 	ldw	r4,-16(fp)
   114c8:	e17ffd17 	ldw	r5,-12(fp)
   114cc:	e1bffe17 	ldw	r6,-8(fp)
   114d0:	e1ffff17 	ldw	r7,-4(fp)
   114d4:	103ee83a 	callr	r2
   114d8:	00000106 	br	114e0 <open+0x108>
   114dc:	0005883a 	mov	r2,zero
   114e0:	e0bffa15 	stw	r2,-24(fp)
   114e4:	00000206 	br	114f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   114e8:	00bffb44 	movi	r2,-19
   114ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   114f0:	e0bffa17 	ldw	r2,-24(fp)
   114f4:	1000080e 	bge	r2,zero,11518 <open+0x140>
  {
    alt_release_fd (index);  
   114f8:	e13ff917 	ldw	r4,-28(fp)
   114fc:	00116740 	call	11674 <alt_release_fd>
    ALT_ERRNO = -status;
   11500:	00112980 	call	11298 <alt_get_errno>
   11504:	e0fffa17 	ldw	r3,-24(fp)
   11508:	00c7c83a 	sub	r3,zero,r3
   1150c:	10c00015 	stw	r3,0(r2)
    return -1;
   11510:	00bfffc4 	movi	r2,-1
   11514:	00000106 	br	1151c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   11518:	e0bff917 	ldw	r2,-28(fp)
}
   1151c:	e037883a 	mov	sp,fp
   11520:	dfc00117 	ldw	ra,4(sp)
   11524:	df000017 	ldw	fp,0(sp)
   11528:	dec00204 	addi	sp,sp,8
   1152c:	f800283a 	ret

00011530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11530:	defffe04 	addi	sp,sp,-8
   11534:	dfc00115 	stw	ra,4(sp)
   11538:	df000015 	stw	fp,0(sp)
   1153c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11540:	00800074 	movhi	r2,1
   11544:	1098b804 	addi	r2,r2,25312
   11548:	10800017 	ldw	r2,0(r2)
   1154c:	10000526 	beq	r2,zero,11564 <alt_get_errno+0x34>
   11550:	00800074 	movhi	r2,1
   11554:	1098b804 	addi	r2,r2,25312
   11558:	10800017 	ldw	r2,0(r2)
   1155c:	103ee83a 	callr	r2
   11560:	00000206 	br	1156c <alt_get_errno+0x3c>
   11564:	00800074 	movhi	r2,1
   11568:	109fac04 	addi	r2,r2,32432
}
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11580:	defff904 	addi	sp,sp,-28
   11584:	dfc00615 	stw	ra,24(sp)
   11588:	df000515 	stw	fp,20(sp)
   1158c:	df000504 	addi	fp,sp,20
   11590:	e13ffd15 	stw	r4,-12(fp)
   11594:	e17ffe15 	stw	r5,-8(fp)
   11598:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	10000716 	blt	r2,zero,115c0 <read+0x40>
   115a4:	e13ffd17 	ldw	r4,-12(fp)
   115a8:	01400304 	movi	r5,12
   115ac:	00015040 	call	1504 <__mulsi3>
   115b0:	00c00074 	movhi	r3,1
   115b4:	18d42b04 	addi	r3,r3,20652
   115b8:	10c5883a 	add	r2,r2,r3
   115bc:	00000106 	br	115c4 <read+0x44>
   115c0:	0005883a 	mov	r2,zero
   115c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   115c8:	e0bffb17 	ldw	r2,-20(fp)
   115cc:	10002026 	beq	r2,zero,11650 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   115d0:	e0bffb17 	ldw	r2,-20(fp)
   115d4:	10800217 	ldw	r2,8(r2)
   115d8:	108000cc 	andi	r2,r2,3
   115dc:	10800060 	cmpeqi	r2,r2,1
   115e0:	1000171e 	bne	r2,zero,11640 <read+0xc0>
        (fd->dev->read))
   115e4:	e0bffb17 	ldw	r2,-20(fp)
   115e8:	10800017 	ldw	r2,0(r2)
   115ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   115f0:	10001326 	beq	r2,zero,11640 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   115f4:	e0bffb17 	ldw	r2,-20(fp)
   115f8:	10800017 	ldw	r2,0(r2)
   115fc:	10c00517 	ldw	r3,20(r2)
   11600:	e0bfff17 	ldw	r2,-4(fp)
   11604:	e13ffb17 	ldw	r4,-20(fp)
   11608:	e17ffe17 	ldw	r5,-8(fp)
   1160c:	100d883a 	mov	r6,r2
   11610:	183ee83a 	callr	r3
   11614:	e0bffc15 	stw	r2,-16(fp)
   11618:	e0bffc17 	ldw	r2,-16(fp)
   1161c:	1000060e 	bge	r2,zero,11638 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   11620:	00115300 	call	11530 <alt_get_errno>
   11624:	e0fffc17 	ldw	r3,-16(fp)
   11628:	00c7c83a 	sub	r3,zero,r3
   1162c:	10c00015 	stw	r3,0(r2)
          return -1;
   11630:	00bfffc4 	movi	r2,-1
   11634:	00000a06 	br	11660 <read+0xe0>
        }
        return rval;
   11638:	e0bffc17 	ldw	r2,-16(fp)
   1163c:	00000806 	br	11660 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   11640:	00115300 	call	11530 <alt_get_errno>
   11644:	00c00344 	movi	r3,13
   11648:	10c00015 	stw	r3,0(r2)
   1164c:	00000306 	br	1165c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   11650:	00115300 	call	11530 <alt_get_errno>
   11654:	00c01444 	movi	r3,81
   11658:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1165c:	00bfffc4 	movi	r2,-1
}
   11660:	e037883a 	mov	sp,fp
   11664:	dfc00117 	ldw	ra,4(sp)
   11668:	df000017 	ldw	fp,0(sp)
   1166c:	dec00204 	addi	sp,sp,8
   11670:	f800283a 	ret

00011674 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11674:	defffc04 	addi	sp,sp,-16
   11678:	dfc00315 	stw	ra,12(sp)
   1167c:	df000215 	stw	fp,8(sp)
   11680:	dc000115 	stw	r16,4(sp)
   11684:	df000104 	addi	fp,sp,4
   11688:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1168c:	e0bfff17 	ldw	r2,-4(fp)
   11690:	108000d0 	cmplti	r2,r2,3
   11694:	1000111e 	bne	r2,zero,116dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   11698:	04000074 	movhi	r16,1
   1169c:	84142b04 	addi	r16,r16,20652
   116a0:	e0bfff17 	ldw	r2,-4(fp)
   116a4:	1009883a 	mov	r4,r2
   116a8:	01400304 	movi	r5,12
   116ac:	00015040 	call	1504 <__mulsi3>
   116b0:	8085883a 	add	r2,r16,r2
   116b4:	10800204 	addi	r2,r2,8
   116b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   116bc:	04000074 	movhi	r16,1
   116c0:	84142b04 	addi	r16,r16,20652
   116c4:	e0bfff17 	ldw	r2,-4(fp)
   116c8:	1009883a 	mov	r4,r2
   116cc:	01400304 	movi	r5,12
   116d0:	00015040 	call	1504 <__mulsi3>
   116d4:	8085883a 	add	r2,r16,r2
   116d8:	10000015 	stw	zero,0(r2)
  }
}
   116dc:	e037883a 	mov	sp,fp
   116e0:	dfc00217 	ldw	ra,8(sp)
   116e4:	df000117 	ldw	fp,4(sp)
   116e8:	dc000017 	ldw	r16,0(sp)
   116ec:	dec00304 	addi	sp,sp,12
   116f0:	f800283a 	ret

000116f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   116f4:	defff904 	addi	sp,sp,-28
   116f8:	df000615 	stw	fp,24(sp)
   116fc:	df000604 	addi	fp,sp,24
   11700:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11704:	0005303a 	rdctl	r2,status
   11708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1170c:	e0fffc17 	ldw	r3,-16(fp)
   11710:	00bfff84 	movi	r2,-2
   11714:	1884703a 	and	r2,r3,r2
   11718:	1001703a 	wrctl	status,r2
  
  return context;
   1171c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11720:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11724:	d0a00c17 	ldw	r2,-32720(gp)
   11728:	10c000c4 	addi	r3,r2,3
   1172c:	00bfff04 	movi	r2,-4
   11730:	1884703a 	and	r2,r3,r2
   11734:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11738:	d0e00c17 	ldw	r3,-32720(gp)
   1173c:	e0bfff17 	ldw	r2,-4(fp)
   11740:	1885883a 	add	r2,r3,r2
   11744:	00c20034 	movhi	r3,2048
   11748:	18c00004 	addi	r3,r3,0
   1174c:	1880062e 	bgeu	r3,r2,11768 <sbrk+0x74>
   11750:	e0bffa17 	ldw	r2,-24(fp)
   11754:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11758:	e0bffd17 	ldw	r2,-12(fp)
   1175c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11760:	00bfffc4 	movi	r2,-1
   11764:	00000b06 	br	11794 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11768:	d0a00c17 	ldw	r2,-32720(gp)
   1176c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   11770:	d0e00c17 	ldw	r3,-32720(gp)
   11774:	e0bfff17 	ldw	r2,-4(fp)
   11778:	1885883a 	add	r2,r3,r2
   1177c:	d0a00c15 	stw	r2,-32720(gp)
   11780:	e0bffa17 	ldw	r2,-24(fp)
   11784:	e0bffe15 	stw	r2,-8(fp)
   11788:	e0bffe17 	ldw	r2,-8(fp)
   1178c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11790:	e0bffb17 	ldw	r2,-20(fp)
} 
   11794:	e037883a 	mov	sp,fp
   11798:	df000017 	ldw	fp,0(sp)
   1179c:	dec00104 	addi	sp,sp,4
   117a0:	f800283a 	ret

000117a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   117a4:	defffe04 	addi	sp,sp,-8
   117a8:	dfc00115 	stw	ra,4(sp)
   117ac:	df000015 	stw	fp,0(sp)
   117b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117b4:	00800074 	movhi	r2,1
   117b8:	1098b804 	addi	r2,r2,25312
   117bc:	10800017 	ldw	r2,0(r2)
   117c0:	10000526 	beq	r2,zero,117d8 <alt_get_errno+0x34>
   117c4:	00800074 	movhi	r2,1
   117c8:	1098b804 	addi	r2,r2,25312
   117cc:	10800017 	ldw	r2,0(r2)
   117d0:	103ee83a 	callr	r2
   117d4:	00000206 	br	117e0 <alt_get_errno+0x3c>
   117d8:	00800074 	movhi	r2,1
   117dc:	109fac04 	addi	r2,r2,32432
}
   117e0:	e037883a 	mov	sp,fp
   117e4:	dfc00117 	ldw	ra,4(sp)
   117e8:	df000017 	ldw	fp,0(sp)
   117ec:	dec00204 	addi	sp,sp,8
   117f0:	f800283a 	ret

000117f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   117f4:	defff904 	addi	sp,sp,-28
   117f8:	dfc00615 	stw	ra,24(sp)
   117fc:	df000515 	stw	fp,20(sp)
   11800:	df000504 	addi	fp,sp,20
   11804:	e13ffd15 	stw	r4,-12(fp)
   11808:	e17ffe15 	stw	r5,-8(fp)
   1180c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11810:	e0bffd17 	ldw	r2,-12(fp)
   11814:	10000716 	blt	r2,zero,11834 <write+0x40>
   11818:	e13ffd17 	ldw	r4,-12(fp)
   1181c:	01400304 	movi	r5,12
   11820:	00015040 	call	1504 <__mulsi3>
   11824:	00c00074 	movhi	r3,1
   11828:	18d42b04 	addi	r3,r3,20652
   1182c:	10c5883a 	add	r2,r2,r3
   11830:	00000106 	br	11838 <write+0x44>
   11834:	0005883a 	mov	r2,zero
   11838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1183c:	e0bffb17 	ldw	r2,-20(fp)
   11840:	10001f26 	beq	r2,zero,118c0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11844:	e0bffb17 	ldw	r2,-20(fp)
   11848:	10800217 	ldw	r2,8(r2)
   1184c:	108000cc 	andi	r2,r2,3
   11850:	10001726 	beq	r2,zero,118b0 <write+0xbc>
   11854:	e0bffb17 	ldw	r2,-20(fp)
   11858:	10800017 	ldw	r2,0(r2)
   1185c:	10800617 	ldw	r2,24(r2)
   11860:	10001326 	beq	r2,zero,118b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11864:	e0bffb17 	ldw	r2,-20(fp)
   11868:	10800017 	ldw	r2,0(r2)
   1186c:	10c00617 	ldw	r3,24(r2)
   11870:	e0bfff17 	ldw	r2,-4(fp)
   11874:	e13ffb17 	ldw	r4,-20(fp)
   11878:	e17ffe17 	ldw	r5,-8(fp)
   1187c:	100d883a 	mov	r6,r2
   11880:	183ee83a 	callr	r3
   11884:	e0bffc15 	stw	r2,-16(fp)
   11888:	e0bffc17 	ldw	r2,-16(fp)
   1188c:	1000060e 	bge	r2,zero,118a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11890:	00117a40 	call	117a4 <alt_get_errno>
   11894:	e0fffc17 	ldw	r3,-16(fp)
   11898:	00c7c83a 	sub	r3,zero,r3
   1189c:	10c00015 	stw	r3,0(r2)
        return -1;
   118a0:	00bfffc4 	movi	r2,-1
   118a4:	00000a06 	br	118d0 <write+0xdc>
      }
      return rval;
   118a8:	e0bffc17 	ldw	r2,-16(fp)
   118ac:	00000806 	br	118d0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   118b0:	00117a40 	call	117a4 <alt_get_errno>
   118b4:	00c00344 	movi	r3,13
   118b8:	10c00015 	stw	r3,0(r2)
   118bc:	00000306 	br	118cc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   118c0:	00117a40 	call	117a4 <alt_get_errno>
   118c4:	00c01444 	movi	r3,81
   118c8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   118cc:	00bfffc4 	movi	r2,-1
}
   118d0:	e037883a 	mov	sp,fp
   118d4:	dfc00117 	ldw	ra,4(sp)
   118d8:	df000017 	ldw	fp,0(sp)
   118dc:	dec00204 	addi	sp,sp,8
   118e0:	f800283a 	ret

000118e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   118e4:	defffd04 	addi	sp,sp,-12
   118e8:	dfc00215 	stw	ra,8(sp)
   118ec:	df000115 	stw	fp,4(sp)
   118f0:	df000104 	addi	fp,sp,4
   118f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   118f8:	e13fff17 	ldw	r4,-4(fp)
   118fc:	01400074 	movhi	r5,1
   11900:	2958b504 	addi	r5,r5,25300
   11904:	00131f80 	call	131f8 <alt_dev_llist_insert>
}
   11908:	e037883a 	mov	sp,fp
   1190c:	dfc00117 	ldw	ra,4(sp)
   11910:	df000017 	ldw	fp,0(sp)
   11914:	dec00204 	addi	sp,sp,8
   11918:	f800283a 	ret

0001191c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1191c:	defffd04 	addi	sp,sp,-12
   11920:	dfc00215 	stw	ra,8(sp)
   11924:	df000115 	stw	fp,4(sp)
   11928:	df000104 	addi	fp,sp,4
   1192c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   11930:	0013c240 	call	13c24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11934:	00800044 	movi	r2,1
   11938:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1193c:	e037883a 	mov	sp,fp
   11940:	dfc00117 	ldw	ra,4(sp)
   11944:	df000017 	ldw	fp,0(sp)
   11948:	dec00204 	addi	sp,sp,8
   1194c:	f800283a 	ret

00011950 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11950:	defffe04 	addi	sp,sp,-8
   11954:	dfc00115 	stw	ra,4(sp)
   11958:	df000015 	stw	fp,0(sp)
   1195c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   11960:	01020034 	movhi	r4,2048
   11964:	21043004 	addi	r4,r4,4288
   11968:	000b883a 	mov	r5,zero
   1196c:	01800044 	movi	r6,1
   11970:	01c0fa04 	movi	r7,1000
   11974:	001299c0 	call	1299c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_1, fifo_q_1);
   11978:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_2, fifo_q_2);
   1197c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_3, fifo_q_3);
   11980:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_4, fifo_q_4);
   11984:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_5, fifo_q_5);
   11988:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_Q_6, fifo_q_6);
   1198c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   11990:	01000074 	movhi	r4,1
   11994:	21149504 	addi	r4,r4,21076
   11998:	000b883a 	mov	r5,zero
   1199c:	01800404 	movi	r6,16
   119a0:	00120280 	call	12028 <altera_avalon_jtag_uart_init>
   119a4:	01000074 	movhi	r4,1
   119a8:	21148b04 	addi	r4,r4,21036
   119ac:	00118e40 	call	118e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
   119b0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   119b4:	01000074 	movhi	r4,1
   119b8:	2118a304 	addi	r4,r4,25228
   119bc:	00134f40 	call	134f4 <alt_fs_reg>
}
   119c0:	e037883a 	mov	sp,fp
   119c4:	dfc00117 	ldw	ra,4(sp)
   119c8:	df000017 	ldw	fp,0(sp)
   119cc:	dec00204 	addi	sp,sp,8
   119d0:	f800283a 	ret

000119d4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   119d4:	defffa04 	addi	sp,sp,-24
   119d8:	dfc00515 	stw	ra,20(sp)
   119dc:	df000415 	stw	fp,16(sp)
   119e0:	df000404 	addi	fp,sp,16
   119e4:	e13ffc15 	stw	r4,-16(fp)
   119e8:	e17ffd15 	stw	r5,-12(fp)
   119ec:	e1bffe15 	stw	r6,-8(fp)
   119f0:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   119f4:	e13ffc17 	ldw	r4,-16(fp)
   119f8:	01400fc4 	movi	r5,63
   119fc:	0011ba00 	call	11ba0 <altera_avalon_fifo_clear_event>
   11a00:	10000226 	beq	r2,zero,11a0c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   11a04:	00bfffc4 	movi	r2,-1
   11a08:	00001306 	br	11a58 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   11a0c:	e13ffc17 	ldw	r4,-16(fp)
   11a10:	e17ffd17 	ldw	r5,-12(fp)
   11a14:	0011bfc0 	call	11bfc <altera_avalon_fifo_write_ienable>
   11a18:	10000226 	beq	r2,zero,11a24 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   11a1c:	00bfff84 	movi	r2,-2
   11a20:	00000d06 	br	11a58 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   11a24:	e13ffc17 	ldw	r4,-16(fp)
   11a28:	e17fff17 	ldw	r5,-4(fp)
   11a2c:	0011c540 	call	11c54 <altera_avalon_fifo_write_almostfull>
   11a30:	10000226 	beq	r2,zero,11a3c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11a34:	00bfff44 	movi	r2,-3
   11a38:	00000706 	br	11a58 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   11a3c:	e13ffc17 	ldw	r4,-16(fp)
   11a40:	e17ffe17 	ldw	r5,-8(fp)
   11a44:	0011cac0 	call	11cac <altera_avalon_fifo_write_almostempty>
   11a48:	10000226 	beq	r2,zero,11a54 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11a4c:	00bfff44 	movi	r2,-3
   11a50:	00000106 	br	11a58 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   11a54:	0005883a 	mov	r2,zero
}
   11a58:	e037883a 	mov	sp,fp
   11a5c:	dfc00117 	ldw	ra,4(sp)
   11a60:	df000017 	ldw	fp,0(sp)
   11a64:	dec00204 	addi	sp,sp,8
   11a68:	f800283a 	ret

00011a6c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   11a6c:	defffd04 	addi	sp,sp,-12
   11a70:	df000215 	stw	fp,8(sp)
   11a74:	df000204 	addi	fp,sp,8
   11a78:	e13ffe15 	stw	r4,-8(fp)
   11a7c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11a80:	e0bffe17 	ldw	r2,-8(fp)
   11a84:	10800104 	addi	r2,r2,4
   11a88:	10800037 	ldwio	r2,0(r2)
   11a8c:	1007883a 	mov	r3,r2
   11a90:	e0bfff17 	ldw	r2,-4(fp)
   11a94:	1884703a 	and	r2,r3,r2
}
   11a98:	e037883a 	mov	sp,fp
   11a9c:	df000017 	ldw	fp,0(sp)
   11aa0:	dec00104 	addi	sp,sp,4
   11aa4:	f800283a 	ret

00011aa8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   11aa8:	defffd04 	addi	sp,sp,-12
   11aac:	df000215 	stw	fp,8(sp)
   11ab0:	df000204 	addi	fp,sp,8
   11ab4:	e13ffe15 	stw	r4,-8(fp)
   11ab8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   11abc:	e0bffe17 	ldw	r2,-8(fp)
   11ac0:	10800304 	addi	r2,r2,12
   11ac4:	10800037 	ldwio	r2,0(r2)
   11ac8:	1007883a 	mov	r3,r2
   11acc:	e0bfff17 	ldw	r2,-4(fp)
   11ad0:	1884703a 	and	r2,r3,r2
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	df000017 	ldw	fp,0(sp)
   11adc:	dec00104 	addi	sp,sp,4
   11ae0:	f800283a 	ret

00011ae4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   11ae4:	defffe04 	addi	sp,sp,-8
   11ae8:	df000115 	stw	fp,4(sp)
   11aec:	df000104 	addi	fp,sp,4
   11af0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   11af4:	e0bfff17 	ldw	r2,-4(fp)
   11af8:	10800404 	addi	r2,r2,16
   11afc:	10800037 	ldwio	r2,0(r2)
}
   11b00:	e037883a 	mov	sp,fp
   11b04:	df000017 	ldw	fp,0(sp)
   11b08:	dec00104 	addi	sp,sp,4
   11b0c:	f800283a 	ret

00011b10 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   11b10:	defffe04 	addi	sp,sp,-8
   11b14:	df000115 	stw	fp,4(sp)
   11b18:	df000104 	addi	fp,sp,4
   11b1c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   11b20:	e0bfff17 	ldw	r2,-4(fp)
   11b24:	10800504 	addi	r2,r2,20
   11b28:	10800037 	ldwio	r2,0(r2)
}
   11b2c:	e037883a 	mov	sp,fp
   11b30:	df000017 	ldw	fp,0(sp)
   11b34:	dec00104 	addi	sp,sp,4
   11b38:	f800283a 	ret

00011b3c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   11b3c:	defffd04 	addi	sp,sp,-12
   11b40:	df000215 	stw	fp,8(sp)
   11b44:	df000204 	addi	fp,sp,8
   11b48:	e13ffe15 	stw	r4,-8(fp)
   11b4c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   11b50:	e0bffe17 	ldw	r2,-8(fp)
   11b54:	10800204 	addi	r2,r2,8
   11b58:	10800037 	ldwio	r2,0(r2)
   11b5c:	1007883a 	mov	r3,r2
   11b60:	e0bfff17 	ldw	r2,-4(fp)
   11b64:	1884703a 	and	r2,r3,r2
}
   11b68:	e037883a 	mov	sp,fp
   11b6c:	df000017 	ldw	fp,0(sp)
   11b70:	dec00104 	addi	sp,sp,4
   11b74:	f800283a 	ret

00011b78 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   11b78:	defffe04 	addi	sp,sp,-8
   11b7c:	df000115 	stw	fp,4(sp)
   11b80:	df000104 	addi	fp,sp,4
   11b84:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   11b88:	e0bfff17 	ldw	r2,-4(fp)
   11b8c:	10800037 	ldwio	r2,0(r2)
}
   11b90:	e037883a 	mov	sp,fp
   11b94:	df000017 	ldw	fp,0(sp)
   11b98:	dec00104 	addi	sp,sp,4
   11b9c:	f800283a 	ret

00011ba0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   11ba0:	defffd04 	addi	sp,sp,-12
   11ba4:	df000215 	stw	fp,8(sp)
   11ba8:	df000204 	addi	fp,sp,8
   11bac:	e13ffe15 	stw	r4,-8(fp)
   11bb0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   11bb4:	e0bffe17 	ldw	r2,-8(fp)
   11bb8:	10800204 	addi	r2,r2,8
   11bbc:	e0ffff17 	ldw	r3,-4(fp)
   11bc0:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   11bc4:	e0bffe17 	ldw	r2,-8(fp)
   11bc8:	10800204 	addi	r2,r2,8
   11bcc:	10800037 	ldwio	r2,0(r2)
   11bd0:	1007883a 	mov	r3,r2
   11bd4:	e0bfff17 	ldw	r2,-4(fp)
   11bd8:	1884703a 	and	r2,r3,r2
   11bdc:	1000021e 	bne	r2,zero,11be8 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   11be0:	0005883a 	mov	r2,zero
   11be4:	00000106 	br	11bec <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   11be8:	00bfffc4 	movi	r2,-1
}
   11bec:	e037883a 	mov	sp,fp
   11bf0:	df000017 	ldw	fp,0(sp)
   11bf4:	dec00104 	addi	sp,sp,4
   11bf8:	f800283a 	ret

00011bfc <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   11bfc:	defffd04 	addi	sp,sp,-12
   11c00:	df000215 	stw	fp,8(sp)
   11c04:	df000204 	addi	fp,sp,8
   11c08:	e13ffe15 	stw	r4,-8(fp)
   11c0c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   11c10:	e0bffe17 	ldw	r2,-8(fp)
   11c14:	10800304 	addi	r2,r2,12
   11c18:	e0ffff17 	ldw	r3,-4(fp)
   11c1c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   11c20:	e0bffe17 	ldw	r2,-8(fp)
   11c24:	10800304 	addi	r2,r2,12
   11c28:	10800037 	ldwio	r2,0(r2)
   11c2c:	1007883a 	mov	r3,r2
   11c30:	e0bfff17 	ldw	r2,-4(fp)
   11c34:	1880021e 	bne	r3,r2,11c40 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   11c38:	0005883a 	mov	r2,zero
   11c3c:	00000106 	br	11c44 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   11c40:	00bfff84 	movi	r2,-2
}
   11c44:	e037883a 	mov	sp,fp
   11c48:	df000017 	ldw	fp,0(sp)
   11c4c:	dec00104 	addi	sp,sp,4
   11c50:	f800283a 	ret

00011c54 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   11c54:	defffd04 	addi	sp,sp,-12
   11c58:	df000215 	stw	fp,8(sp)
   11c5c:	df000204 	addi	fp,sp,8
   11c60:	e13ffe15 	stw	r4,-8(fp)
   11c64:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   11c68:	e0bffe17 	ldw	r2,-8(fp)
   11c6c:	10800404 	addi	r2,r2,16
   11c70:	e0ffff17 	ldw	r3,-4(fp)
   11c74:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	10800404 	addi	r2,r2,16
   11c80:	10800037 	ldwio	r2,0(r2)
   11c84:	1007883a 	mov	r3,r2
   11c88:	e0bfff17 	ldw	r2,-4(fp)
   11c8c:	1880021e 	bne	r3,r2,11c98 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   11c90:	0005883a 	mov	r2,zero
   11c94:	00000106 	br	11c9c <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11c98:	00bfff44 	movi	r2,-3
}
   11c9c:	e037883a 	mov	sp,fp
   11ca0:	df000017 	ldw	fp,0(sp)
   11ca4:	dec00104 	addi	sp,sp,4
   11ca8:	f800283a 	ret

00011cac <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   11cac:	defffd04 	addi	sp,sp,-12
   11cb0:	df000215 	stw	fp,8(sp)
   11cb4:	df000204 	addi	fp,sp,8
   11cb8:	e13ffe15 	stw	r4,-8(fp)
   11cbc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   11cc0:	e0bffe17 	ldw	r2,-8(fp)
   11cc4:	10800504 	addi	r2,r2,20
   11cc8:	e0ffff17 	ldw	r3,-4(fp)
   11ccc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   11cd0:	e0bffe17 	ldw	r2,-8(fp)
   11cd4:	10800504 	addi	r2,r2,20
   11cd8:	10800037 	ldwio	r2,0(r2)
   11cdc:	1007883a 	mov	r3,r2
   11ce0:	e0bfff17 	ldw	r2,-4(fp)
   11ce4:	1880021e 	bne	r3,r2,11cf0 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   11ce8:	0005883a 	mov	r2,zero
   11cec:	00000106 	br	11cf4 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11cf0:	00bfff44 	movi	r2,-3
}
   11cf4:	e037883a 	mov	sp,fp
   11cf8:	df000017 	ldw	fp,0(sp)
   11cfc:	dec00104 	addi	sp,sp,4
   11d00:	f800283a 	ret

00011d04 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   11d04:	defffb04 	addi	sp,sp,-20
   11d08:	dfc00415 	stw	ra,16(sp)
   11d0c:	df000315 	stw	fp,12(sp)
   11d10:	df000304 	addi	fp,sp,12
   11d14:	e13ffd15 	stw	r4,-12(fp)
   11d18:	e17ffe15 	stw	r5,-8(fp)
   11d1c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11d20:	e13ffe17 	ldw	r4,-8(fp)
   11d24:	01400044 	movi	r5,1
   11d28:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
   11d2c:	1000051e 	bne	r2,zero,11d44 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   11d30:	e0bffd17 	ldw	r2,-12(fp)
   11d34:	e0ffff17 	ldw	r3,-4(fp)
   11d38:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   11d3c:	0005883a 	mov	r2,zero
   11d40:	00000106 	br	11d48 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   11d44:	00bfff04 	movi	r2,-4
    }
}
   11d48:	e037883a 	mov	sp,fp
   11d4c:	dfc00117 	ldw	ra,4(sp)
   11d50:	df000017 	ldw	fp,0(sp)
   11d54:	dec00204 	addi	sp,sp,8
   11d58:	f800283a 	ret

00011d5c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   11d5c:	defffa04 	addi	sp,sp,-24
   11d60:	dfc00515 	stw	ra,20(sp)
   11d64:	df000415 	stw	fp,16(sp)
   11d68:	df000404 	addi	fp,sp,16
   11d6c:	e13ffd15 	stw	r4,-12(fp)
   11d70:	e17ffe15 	stw	r5,-8(fp)
   11d74:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   11d78:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   11d7c:	e0bfff17 	ldw	r2,-4(fp)
   11d80:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   11d84:	e13ffe17 	ldw	r4,-8(fp)
   11d88:	01400084 	movi	r5,2
   11d8c:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
   11d90:	1000071e 	bne	r2,zero,11db0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   11d94:	e13ffe17 	ldw	r4,-8(fp)
   11d98:	0011b780 	call	11b78 <altera_avalon_fifo_read_level>
   11d9c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   11da0:	e0bffd17 	ldw	r2,-12(fp)
   11da4:	10c00037 	ldwio	r3,0(r2)
   11da8:	e0bfff17 	ldw	r2,-4(fp)
   11dac:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   11db0:	e0bffc17 	ldw	r2,-16(fp)
}
   11db4:	e037883a 	mov	sp,fp
   11db8:	dfc00117 	ldw	ra,4(sp)
   11dbc:	df000017 	ldw	fp,0(sp)
   11dc0:	dec00204 	addi	sp,sp,8
   11dc4:	f800283a 	ret

00011dc8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   11dc8:	defffc04 	addi	sp,sp,-16
   11dcc:	dfc00315 	stw	ra,12(sp)
   11dd0:	df000215 	stw	fp,8(sp)
   11dd4:	df000204 	addi	fp,sp,8
   11dd8:	e13ffe15 	stw	r4,-8(fp)
   11ddc:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   11de0:	e13fff17 	ldw	r4,-4(fp)
   11de4:	01400084 	movi	r5,2
   11de8:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
   11dec:	1000031e 	bne	r2,zero,11dfc <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   11df0:	e0bffe17 	ldw	r2,-8(fp)
   11df4:	10800037 	ldwio	r2,0(r2)
   11df8:	00000106 	br	11e00 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   11dfc:	0005883a 	mov	r2,zero
}
   11e00:	e037883a 	mov	sp,fp
   11e04:	dfc00117 	ldw	ra,4(sp)
   11e08:	df000017 	ldw	fp,0(sp)
   11e0c:	dec00204 	addi	sp,sp,8
   11e10:	f800283a 	ret

00011e14 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   11e14:	defffb04 	addi	sp,sp,-20
   11e18:	dfc00415 	stw	ra,16(sp)
   11e1c:	df000315 	stw	fp,12(sp)
   11e20:	df000304 	addi	fp,sp,12
   11e24:	e13ffd15 	stw	r4,-12(fp)
   11e28:	e17ffe15 	stw	r5,-8(fp)
   11e2c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11e30:	e13ffe17 	ldw	r4,-8(fp)
   11e34:	01400044 	movi	r5,1
   11e38:	0011a6c0 	call	11a6c <altera_avalon_fifo_read_status>
   11e3c:	1000061e 	bne	r2,zero,11e58 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   11e40:	e0bffd17 	ldw	r2,-12(fp)
   11e44:	10800104 	addi	r2,r2,4
   11e48:	e0ffff17 	ldw	r3,-4(fp)
   11e4c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   11e50:	0005883a 	mov	r2,zero
   11e54:	00000106 	br	11e5c <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   11e58:	00bfff04 	movi	r2,-4
    }
}
   11e5c:	e037883a 	mov	sp,fp
   11e60:	dfc00117 	ldw	ra,4(sp)
   11e64:	df000017 	ldw	fp,0(sp)
   11e68:	dec00204 	addi	sp,sp,8
   11e6c:	f800283a 	ret

00011e70 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   11e70:	defffe04 	addi	sp,sp,-8
   11e74:	df000115 	stw	fp,4(sp)
   11e78:	df000104 	addi	fp,sp,4
   11e7c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   11e80:	e0bfff17 	ldw	r2,-4(fp)
   11e84:	10800104 	addi	r2,r2,4
   11e88:	10800037 	ldwio	r2,0(r2)
}
   11e8c:	e037883a 	mov	sp,fp
   11e90:	df000017 	ldw	fp,0(sp)
   11e94:	dec00104 	addi	sp,sp,4
   11e98:	f800283a 	ret

00011e9c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   11e9c:	defffe04 	addi	sp,sp,-8
   11ea0:	df000115 	stw	fp,4(sp)
   11ea4:	df000104 	addi	fp,sp,4
   11ea8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   11eac:	e0bfff17 	ldw	r2,-4(fp)
   11eb0:	10800037 	ldwio	r2,0(r2)
}
   11eb4:	e037883a 	mov	sp,fp
   11eb8:	df000017 	ldw	fp,0(sp)
   11ebc:	dec00104 	addi	sp,sp,4
   11ec0:	f800283a 	ret

00011ec4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11ec4:	defffa04 	addi	sp,sp,-24
   11ec8:	dfc00515 	stw	ra,20(sp)
   11ecc:	df000415 	stw	fp,16(sp)
   11ed0:	df000404 	addi	fp,sp,16
   11ed4:	e13ffd15 	stw	r4,-12(fp)
   11ed8:	e17ffe15 	stw	r5,-8(fp)
   11edc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11ee0:	e0bffd17 	ldw	r2,-12(fp)
   11ee4:	10800017 	ldw	r2,0(r2)
   11ee8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11eec:	e0bffc17 	ldw	r2,-16(fp)
   11ef0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   11ef4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11ef8:	10800217 	ldw	r2,8(r2)
   11efc:	1809883a 	mov	r4,r3
   11f00:	e17ffe17 	ldw	r5,-8(fp)
   11f04:	e1bfff17 	ldw	r6,-4(fp)
   11f08:	100f883a 	mov	r7,r2
   11f0c:	00124ec0 	call	124ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11f10:	e037883a 	mov	sp,fp
   11f14:	dfc00117 	ldw	ra,4(sp)
   11f18:	df000017 	ldw	fp,0(sp)
   11f1c:	dec00204 	addi	sp,sp,8
   11f20:	f800283a 	ret

00011f24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11f24:	defffa04 	addi	sp,sp,-24
   11f28:	dfc00515 	stw	ra,20(sp)
   11f2c:	df000415 	stw	fp,16(sp)
   11f30:	df000404 	addi	fp,sp,16
   11f34:	e13ffd15 	stw	r4,-12(fp)
   11f38:	e17ffe15 	stw	r5,-8(fp)
   11f3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	10800017 	ldw	r2,0(r2)
   11f48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11f4c:	e0bffc17 	ldw	r2,-16(fp)
   11f50:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   11f54:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11f58:	10800217 	ldw	r2,8(r2)
   11f5c:	1809883a 	mov	r4,r3
   11f60:	e17ffe17 	ldw	r5,-8(fp)
   11f64:	e1bfff17 	ldw	r6,-4(fp)
   11f68:	100f883a 	mov	r7,r2
   11f6c:	00127040 	call	12704 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11f70:	e037883a 	mov	sp,fp
   11f74:	dfc00117 	ldw	ra,4(sp)
   11f78:	df000017 	ldw	fp,0(sp)
   11f7c:	dec00204 	addi	sp,sp,8
   11f80:	f800283a 	ret

00011f84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11f84:	defffc04 	addi	sp,sp,-16
   11f88:	dfc00315 	stw	ra,12(sp)
   11f8c:	df000215 	stw	fp,8(sp)
   11f90:	df000204 	addi	fp,sp,8
   11f94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11f98:	e0bfff17 	ldw	r2,-4(fp)
   11f9c:	10800017 	ldw	r2,0(r2)
   11fa0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11fa4:	e0bffe17 	ldw	r2,-8(fp)
   11fa8:	10c00a04 	addi	r3,r2,40
   11fac:	e0bfff17 	ldw	r2,-4(fp)
   11fb0:	10800217 	ldw	r2,8(r2)
   11fb4:	1809883a 	mov	r4,r3
   11fb8:	100b883a 	mov	r5,r2
   11fbc:	00123900 	call	12390 <altera_avalon_jtag_uart_close>
}
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	dfc00117 	ldw	ra,4(sp)
   11fc8:	df000017 	ldw	fp,0(sp)
   11fcc:	dec00204 	addi	sp,sp,8
   11fd0:	f800283a 	ret

00011fd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11fd4:	defffa04 	addi	sp,sp,-24
   11fd8:	dfc00515 	stw	ra,20(sp)
   11fdc:	df000415 	stw	fp,16(sp)
   11fe0:	df000404 	addi	fp,sp,16
   11fe4:	e13ffd15 	stw	r4,-12(fp)
   11fe8:	e17ffe15 	stw	r5,-8(fp)
   11fec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11ff0:	e0bffd17 	ldw	r2,-12(fp)
   11ff4:	10800017 	ldw	r2,0(r2)
   11ff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11ffc:	e0bffc17 	ldw	r2,-16(fp)
   12000:	10800a04 	addi	r2,r2,40
   12004:	1009883a 	mov	r4,r2
   12008:	e17ffe17 	ldw	r5,-8(fp)
   1200c:	e1bfff17 	ldw	r6,-4(fp)
   12010:	00123f80 	call	123f8 <altera_avalon_jtag_uart_ioctl>
}
   12014:	e037883a 	mov	sp,fp
   12018:	dfc00117 	ldw	ra,4(sp)
   1201c:	df000017 	ldw	fp,0(sp)
   12020:	dec00204 	addi	sp,sp,8
   12024:	f800283a 	ret

00012028 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12028:	defffa04 	addi	sp,sp,-24
   1202c:	dfc00515 	stw	ra,20(sp)
   12030:	df000415 	stw	fp,16(sp)
   12034:	df000404 	addi	fp,sp,16
   12038:	e13ffd15 	stw	r4,-12(fp)
   1203c:	e17ffe15 	stw	r5,-8(fp)
   12040:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12044:	e0bffd17 	ldw	r2,-12(fp)
   12048:	00c00044 	movi	r3,1
   1204c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12050:	e0bffd17 	ldw	r2,-12(fp)
   12054:	10800017 	ldw	r2,0(r2)
   12058:	10800104 	addi	r2,r2,4
   1205c:	e0fffd17 	ldw	r3,-12(fp)
   12060:	18c00817 	ldw	r3,32(r3)
   12064:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12068:	e0fffe17 	ldw	r3,-8(fp)
   1206c:	e0bfff17 	ldw	r2,-4(fp)
   12070:	d8000015 	stw	zero,0(sp)
   12074:	1809883a 	mov	r4,r3
   12078:	100b883a 	mov	r5,r2
   1207c:	01800074 	movhi	r6,1
   12080:	31883a04 	addi	r6,r6,8424
   12084:	e1fffd17 	ldw	r7,-12(fp)
   12088:	00136680 	call	13668 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1208c:	e0bffd17 	ldw	r2,-12(fp)
   12090:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12094:	e0bffd17 	ldw	r2,-12(fp)
   12098:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1209c:	00800074 	movhi	r2,1
   120a0:	109fb704 	addi	r2,r2,32476
   120a4:	10800017 	ldw	r2,0(r2)
   120a8:	1809883a 	mov	r4,r3
   120ac:	100b883a 	mov	r5,r2
   120b0:	01800074 	movhi	r6,1
   120b4:	3188bb04 	addi	r6,r6,8940
   120b8:	e1fffd17 	ldw	r7,-12(fp)
   120bc:	001304c0 	call	1304c <alt_alarm_start>
   120c0:	1000040e 	bge	r2,zero,120d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   120c4:	e0bffd17 	ldw	r2,-12(fp)
   120c8:	00e00034 	movhi	r3,32768
   120cc:	18ffffc4 	addi	r3,r3,-1
   120d0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   120d4:	e037883a 	mov	sp,fp
   120d8:	dfc00117 	ldw	ra,4(sp)
   120dc:	df000017 	ldw	fp,0(sp)
   120e0:	dec00204 	addi	sp,sp,8
   120e4:	f800283a 	ret

000120e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   120e8:	defff804 	addi	sp,sp,-32
   120ec:	df000715 	stw	fp,28(sp)
   120f0:	df000704 	addi	fp,sp,28
   120f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   120f8:	e0bfff17 	ldw	r2,-4(fp)
   120fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12100:	e0bffb17 	ldw	r2,-20(fp)
   12104:	10800017 	ldw	r2,0(r2)
   12108:	e0bffc15 	stw	r2,-16(fp)
   1210c:	00000106 	br	12114 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   12110:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12114:	e0bffc17 	ldw	r2,-16(fp)
   12118:	10800104 	addi	r2,r2,4
   1211c:	10800037 	ldwio	r2,0(r2)
   12120:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12124:	e0bffd17 	ldw	r2,-12(fp)
   12128:	1080c00c 	andi	r2,r2,768
   1212c:	10006a26 	beq	r2,zero,122d8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12130:	e0bffd17 	ldw	r2,-12(fp)
   12134:	1080400c 	andi	r2,r2,256
   12138:	10003326 	beq	r2,zero,12208 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1213c:	00800074 	movhi	r2,1
   12140:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12144:	e0bffb17 	ldw	r2,-20(fp)
   12148:	10800a17 	ldw	r2,40(r2)
   1214c:	10800044 	addi	r2,r2,1
   12150:	1081ffcc 	andi	r2,r2,2047
   12154:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12158:	e0bffb17 	ldw	r2,-20(fp)
   1215c:	10c00b17 	ldw	r3,44(r2)
   12160:	e0bffe17 	ldw	r2,-8(fp)
   12164:	18801426 	beq	r3,r2,121b8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12168:	e0bffc17 	ldw	r2,-16(fp)
   1216c:	10800037 	ldwio	r2,0(r2)
   12170:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12174:	e0bff917 	ldw	r2,-28(fp)
   12178:	10a0000c 	andi	r2,r2,32768
   1217c:	10001026 	beq	r2,zero,121c0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12180:	e0bffb17 	ldw	r2,-20(fp)
   12184:	10800a17 	ldw	r2,40(r2)
   12188:	e0fff917 	ldw	r3,-28(fp)
   1218c:	e13ffb17 	ldw	r4,-20(fp)
   12190:	2085883a 	add	r2,r4,r2
   12194:	10800e04 	addi	r2,r2,56
   12198:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1219c:	e0bffb17 	ldw	r2,-20(fp)
   121a0:	10800a17 	ldw	r2,40(r2)
   121a4:	10800044 	addi	r2,r2,1
   121a8:	10c1ffcc 	andi	r3,r2,2047
   121ac:	e0bffb17 	ldw	r2,-20(fp)
   121b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   121b4:	003fe306 	br	12144 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   121b8:	0001883a 	nop
   121bc:	00000106 	br	121c4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   121c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   121c4:	e0bff917 	ldw	r2,-28(fp)
   121c8:	10bfffec 	andhi	r2,r2,65535
   121cc:	10000e26 	beq	r2,zero,12208 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   121d0:	e0bffb17 	ldw	r2,-20(fp)
   121d4:	10c00817 	ldw	r3,32(r2)
   121d8:	00bfff84 	movi	r2,-2
   121dc:	1886703a 	and	r3,r3,r2
   121e0:	e0bffb17 	ldw	r2,-20(fp)
   121e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   121e8:	e0bffc17 	ldw	r2,-16(fp)
   121ec:	10800104 	addi	r2,r2,4
   121f0:	e0fffb17 	ldw	r3,-20(fp)
   121f4:	18c00817 	ldw	r3,32(r3)
   121f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   121fc:	e0bffc17 	ldw	r2,-16(fp)
   12200:	10800104 	addi	r2,r2,4
   12204:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12208:	e0bffd17 	ldw	r2,-12(fp)
   1220c:	1080800c 	andi	r2,r2,512
   12210:	103fbf26 	beq	r2,zero,12110 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12214:	e0bffd17 	ldw	r2,-12(fp)
   12218:	1004d43a 	srli	r2,r2,16
   1221c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12220:	00001406 	br	12274 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12224:	e0bffc17 	ldw	r2,-16(fp)
   12228:	e0fffb17 	ldw	r3,-20(fp)
   1222c:	18c00d17 	ldw	r3,52(r3)
   12230:	e13ffb17 	ldw	r4,-20(fp)
   12234:	20c7883a 	add	r3,r4,r3
   12238:	18c20e04 	addi	r3,r3,2104
   1223c:	18c00003 	ldbu	r3,0(r3)
   12240:	18c03fcc 	andi	r3,r3,255
   12244:	18c0201c 	xori	r3,r3,128
   12248:	18ffe004 	addi	r3,r3,-128
   1224c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12250:	e0bffb17 	ldw	r2,-20(fp)
   12254:	10800d17 	ldw	r2,52(r2)
   12258:	10800044 	addi	r2,r2,1
   1225c:	10c1ffcc 	andi	r3,r2,2047
   12260:	e0bffb17 	ldw	r2,-20(fp)
   12264:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12268:	e0bffa17 	ldw	r2,-24(fp)
   1226c:	10bfffc4 	addi	r2,r2,-1
   12270:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12274:	e0bffa17 	ldw	r2,-24(fp)
   12278:	10000526 	beq	r2,zero,12290 <altera_avalon_jtag_uart_irq+0x1a8>
   1227c:	e0bffb17 	ldw	r2,-20(fp)
   12280:	10c00d17 	ldw	r3,52(r2)
   12284:	e0bffb17 	ldw	r2,-20(fp)
   12288:	10800c17 	ldw	r2,48(r2)
   1228c:	18bfe51e 	bne	r3,r2,12224 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12290:	e0bffa17 	ldw	r2,-24(fp)
   12294:	103f9e26 	beq	r2,zero,12110 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12298:	e0bffb17 	ldw	r2,-20(fp)
   1229c:	10c00817 	ldw	r3,32(r2)
   122a0:	00bfff44 	movi	r2,-3
   122a4:	1886703a 	and	r3,r3,r2
   122a8:	e0bffb17 	ldw	r2,-20(fp)
   122ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   122b0:	e0bffb17 	ldw	r2,-20(fp)
   122b4:	10800017 	ldw	r2,0(r2)
   122b8:	10800104 	addi	r2,r2,4
   122bc:	e0fffb17 	ldw	r3,-20(fp)
   122c0:	18c00817 	ldw	r3,32(r3)
   122c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   122c8:	e0bffc17 	ldw	r2,-16(fp)
   122cc:	10800104 	addi	r2,r2,4
   122d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   122d4:	003f8e06 	br	12110 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   122d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   122dc:	e037883a 	mov	sp,fp
   122e0:	df000017 	ldw	fp,0(sp)
   122e4:	dec00104 	addi	sp,sp,4
   122e8:	f800283a 	ret

000122ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   122ec:	defffc04 	addi	sp,sp,-16
   122f0:	df000315 	stw	fp,12(sp)
   122f4:	df000304 	addi	fp,sp,12
   122f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   122fc:	e0bfff17 	ldw	r2,-4(fp)
   12300:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12304:	e0bffd17 	ldw	r2,-12(fp)
   12308:	10800017 	ldw	r2,0(r2)
   1230c:	10800104 	addi	r2,r2,4
   12310:	10800037 	ldwio	r2,0(r2)
   12314:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12318:	e0bffe17 	ldw	r2,-8(fp)
   1231c:	1081000c 	andi	r2,r2,1024
   12320:	10000a26 	beq	r2,zero,1234c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12324:	e0bffd17 	ldw	r2,-12(fp)
   12328:	10800017 	ldw	r2,0(r2)
   1232c:	10800104 	addi	r2,r2,4
   12330:	e0fffd17 	ldw	r3,-12(fp)
   12334:	18c00817 	ldw	r3,32(r3)
   12338:	18c10014 	ori	r3,r3,1024
   1233c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   12340:	e0bffd17 	ldw	r2,-12(fp)
   12344:	10000915 	stw	zero,36(r2)
   12348:	00000a06 	br	12374 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1234c:	e0bffd17 	ldw	r2,-12(fp)
   12350:	10800917 	ldw	r2,36(r2)
   12354:	00e00034 	movhi	r3,32768
   12358:	18ffff04 	addi	r3,r3,-4
   1235c:	18800536 	bltu	r3,r2,12374 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   12360:	e0bffd17 	ldw	r2,-12(fp)
   12364:	10800917 	ldw	r2,36(r2)
   12368:	10c00044 	addi	r3,r2,1
   1236c:	e0bffd17 	ldw	r2,-12(fp)
   12370:	10c00915 	stw	r3,36(r2)
   12374:	00800074 	movhi	r2,1
   12378:	109fb704 	addi	r2,r2,32476
   1237c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12380:	e037883a 	mov	sp,fp
   12384:	df000017 	ldw	fp,0(sp)
   12388:	dec00104 	addi	sp,sp,4
   1238c:	f800283a 	ret

00012390 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12390:	defffd04 	addi	sp,sp,-12
   12394:	df000215 	stw	fp,8(sp)
   12398:	df000204 	addi	fp,sp,8
   1239c:	e13ffe15 	stw	r4,-8(fp)
   123a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   123a4:	00000506 	br	123bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   123a8:	e0bfff17 	ldw	r2,-4(fp)
   123ac:	1090000c 	andi	r2,r2,16384
   123b0:	10000226 	beq	r2,zero,123bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   123b4:	00bffd44 	movi	r2,-11
   123b8:	00000b06 	br	123e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   123bc:	e0bffe17 	ldw	r2,-8(fp)
   123c0:	10c00d17 	ldw	r3,52(r2)
   123c4:	e0bffe17 	ldw	r2,-8(fp)
   123c8:	10800c17 	ldw	r2,48(r2)
   123cc:	18800526 	beq	r3,r2,123e4 <altera_avalon_jtag_uart_close+0x54>
   123d0:	e0bffe17 	ldw	r2,-8(fp)
   123d4:	10c00917 	ldw	r3,36(r2)
   123d8:	e0bffe17 	ldw	r2,-8(fp)
   123dc:	10800117 	ldw	r2,4(r2)
   123e0:	18bff136 	bltu	r3,r2,123a8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   123e4:	0005883a 	mov	r2,zero
}
   123e8:	e037883a 	mov	sp,fp
   123ec:	df000017 	ldw	fp,0(sp)
   123f0:	dec00104 	addi	sp,sp,4
   123f4:	f800283a 	ret

000123f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   123f8:	defffa04 	addi	sp,sp,-24
   123fc:	df000515 	stw	fp,20(sp)
   12400:	df000504 	addi	fp,sp,20
   12404:	e13ffd15 	stw	r4,-12(fp)
   12408:	e17ffe15 	stw	r5,-8(fp)
   1240c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   12410:	00bff9c4 	movi	r2,-25
   12414:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   12418:	e0bffe17 	ldw	r2,-8(fp)
   1241c:	10da8060 	cmpeqi	r3,r2,27137
   12420:	1800031e 	bne	r3,zero,12430 <altera_avalon_jtag_uart_ioctl+0x38>
   12424:	109a80a0 	cmpeqi	r2,r2,27138
   12428:	1000181e 	bne	r2,zero,1248c <altera_avalon_jtag_uart_ioctl+0x94>
   1242c:	00002606 	br	124c8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	10c00117 	ldw	r3,4(r2)
   12438:	00a00034 	movhi	r2,32768
   1243c:	10bfffc4 	addi	r2,r2,-1
   12440:	18802226 	beq	r3,r2,124cc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   12444:	e0bfff17 	ldw	r2,-4(fp)
   12448:	10800017 	ldw	r2,0(r2)
   1244c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12450:	e0bffc17 	ldw	r2,-16(fp)
   12454:	10800090 	cmplti	r2,r2,2
   12458:	1000061e 	bne	r2,zero,12474 <altera_avalon_jtag_uart_ioctl+0x7c>
   1245c:	e0fffc17 	ldw	r3,-16(fp)
   12460:	00a00034 	movhi	r2,32768
   12464:	10bfffc4 	addi	r2,r2,-1
   12468:	18800226 	beq	r3,r2,12474 <altera_avalon_jtag_uart_ioctl+0x7c>
   1246c:	e0bffc17 	ldw	r2,-16(fp)
   12470:	00000206 	br	1247c <altera_avalon_jtag_uart_ioctl+0x84>
   12474:	00a00034 	movhi	r2,32768
   12478:	10bfff84 	addi	r2,r2,-2
   1247c:	e0fffd17 	ldw	r3,-12(fp)
   12480:	18800115 	stw	r2,4(r3)
      rc = 0;
   12484:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12488:	00001006 	br	124cc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1248c:	e0bffd17 	ldw	r2,-12(fp)
   12490:	10c00117 	ldw	r3,4(r2)
   12494:	00a00034 	movhi	r2,32768
   12498:	10bfffc4 	addi	r2,r2,-1
   1249c:	18800d26 	beq	r3,r2,124d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   124a0:	e0bffd17 	ldw	r2,-12(fp)
   124a4:	10c00917 	ldw	r3,36(r2)
   124a8:	e0bffd17 	ldw	r2,-12(fp)
   124ac:	10800117 	ldw	r2,4(r2)
   124b0:	1885803a 	cmpltu	r2,r3,r2
   124b4:	10c03fcc 	andi	r3,r2,255
   124b8:	e0bfff17 	ldw	r2,-4(fp)
   124bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   124c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   124c4:	00000306 	br	124d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   124c8:	00000306 	br	124d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   124cc:	0001883a 	nop
   124d0:	00000106 	br	124d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   124d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   124d8:	e0bffb17 	ldw	r2,-20(fp)
}
   124dc:	e037883a 	mov	sp,fp
   124e0:	df000017 	ldw	fp,0(sp)
   124e4:	dec00104 	addi	sp,sp,4
   124e8:	f800283a 	ret

000124ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   124ec:	defff304 	addi	sp,sp,-52
   124f0:	dfc00c15 	stw	ra,48(sp)
   124f4:	df000b15 	stw	fp,44(sp)
   124f8:	df000b04 	addi	fp,sp,44
   124fc:	e13ffc15 	stw	r4,-16(fp)
   12500:	e17ffd15 	stw	r5,-12(fp)
   12504:	e1bffe15 	stw	r6,-8(fp)
   12508:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1250c:	e0bffd17 	ldw	r2,-12(fp)
   12510:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12514:	00004706 	br	12634 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12518:	e0bffc17 	ldw	r2,-16(fp)
   1251c:	10800a17 	ldw	r2,40(r2)
   12520:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12524:	e0bffc17 	ldw	r2,-16(fp)
   12528:	10800b17 	ldw	r2,44(r2)
   1252c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12530:	e0fff717 	ldw	r3,-36(fp)
   12534:	e0bff817 	ldw	r2,-32(fp)
   12538:	18800536 	bltu	r3,r2,12550 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1253c:	e0fff717 	ldw	r3,-36(fp)
   12540:	e0bff817 	ldw	r2,-32(fp)
   12544:	1885c83a 	sub	r2,r3,r2
   12548:	e0bff615 	stw	r2,-40(fp)
   1254c:	00000406 	br	12560 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12550:	00c20004 	movi	r3,2048
   12554:	e0bff817 	ldw	r2,-32(fp)
   12558:	1885c83a 	sub	r2,r3,r2
   1255c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12560:	e0bff617 	ldw	r2,-40(fp)
   12564:	10001e26 	beq	r2,zero,125e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12568:	e0fffe17 	ldw	r3,-8(fp)
   1256c:	e0bff617 	ldw	r2,-40(fp)
   12570:	1880022e 	bgeu	r3,r2,1257c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12574:	e0bffe17 	ldw	r2,-8(fp)
   12578:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1257c:	e0bff817 	ldw	r2,-32(fp)
   12580:	10800e04 	addi	r2,r2,56
   12584:	e0fffc17 	ldw	r3,-16(fp)
   12588:	1885883a 	add	r2,r3,r2
   1258c:	e13ff517 	ldw	r4,-44(fp)
   12590:	100b883a 	mov	r5,r2
   12594:	e1bff617 	ldw	r6,-40(fp)
   12598:	00033640 	call	3364 <memcpy>
      ptr   += n;
   1259c:	e0fff517 	ldw	r3,-44(fp)
   125a0:	e0bff617 	ldw	r2,-40(fp)
   125a4:	1885883a 	add	r2,r3,r2
   125a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   125ac:	e0fffe17 	ldw	r3,-8(fp)
   125b0:	e0bff617 	ldw	r2,-40(fp)
   125b4:	1885c83a 	sub	r2,r3,r2
   125b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   125bc:	e0fff817 	ldw	r3,-32(fp)
   125c0:	e0bff617 	ldw	r2,-40(fp)
   125c4:	1885883a 	add	r2,r3,r2
   125c8:	10c1ffcc 	andi	r3,r2,2047
   125cc:	e0bffc17 	ldw	r2,-16(fp)
   125d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   125d4:	e0bffe17 	ldw	r2,-8(fp)
   125d8:	00bfcf16 	blt	zero,r2,12518 <altera_avalon_jtag_uart_read+0x2c>
   125dc:	00000106 	br	125e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   125e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   125e4:	e0fff517 	ldw	r3,-44(fp)
   125e8:	e0bffd17 	ldw	r2,-12(fp)
   125ec:	1880141e 	bne	r3,r2,12640 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   125f0:	e0bfff17 	ldw	r2,-4(fp)
   125f4:	1090000c 	andi	r2,r2,16384
   125f8:	1000131e 	bne	r2,zero,12648 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   125fc:	0001883a 	nop
   12600:	e0bffc17 	ldw	r2,-16(fp)
   12604:	10c00a17 	ldw	r3,40(r2)
   12608:	e0bff717 	ldw	r2,-36(fp)
   1260c:	1880051e 	bne	r3,r2,12624 <altera_avalon_jtag_uart_read+0x138>
   12610:	e0bffc17 	ldw	r2,-16(fp)
   12614:	10c00917 	ldw	r3,36(r2)
   12618:	e0bffc17 	ldw	r2,-16(fp)
   1261c:	10800117 	ldw	r2,4(r2)
   12620:	18bff736 	bltu	r3,r2,12600 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12624:	e0bffc17 	ldw	r2,-16(fp)
   12628:	10c00a17 	ldw	r3,40(r2)
   1262c:	e0bff717 	ldw	r2,-36(fp)
   12630:	18800726 	beq	r3,r2,12650 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12634:	e0bffe17 	ldw	r2,-8(fp)
   12638:	00bfb716 	blt	zero,r2,12518 <altera_avalon_jtag_uart_read+0x2c>
   1263c:	00000506 	br	12654 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12640:	0001883a 	nop
   12644:	00000306 	br	12654 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   12648:	0001883a 	nop
   1264c:	00000106 	br	12654 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12650:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12654:	e0fff517 	ldw	r3,-44(fp)
   12658:	e0bffd17 	ldw	r2,-12(fp)
   1265c:	18801726 	beq	r3,r2,126bc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12660:	0005303a 	rdctl	r2,status
   12664:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12668:	e0fffa17 	ldw	r3,-24(fp)
   1266c:	00bfff84 	movi	r2,-2
   12670:	1884703a 	and	r2,r3,r2
   12674:	1001703a 	wrctl	status,r2
  
  return context;
   12678:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1267c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12680:	e0bffc17 	ldw	r2,-16(fp)
   12684:	10800817 	ldw	r2,32(r2)
   12688:	10c00054 	ori	r3,r2,1
   1268c:	e0bffc17 	ldw	r2,-16(fp)
   12690:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12694:	e0bffc17 	ldw	r2,-16(fp)
   12698:	10800017 	ldw	r2,0(r2)
   1269c:	10800104 	addi	r2,r2,4
   126a0:	e0fffc17 	ldw	r3,-16(fp)
   126a4:	18c00817 	ldw	r3,32(r3)
   126a8:	10c00035 	stwio	r3,0(r2)
   126ac:	e0bff917 	ldw	r2,-28(fp)
   126b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126b4:	e0bffb17 	ldw	r2,-20(fp)
   126b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   126bc:	e0fff517 	ldw	r3,-44(fp)
   126c0:	e0bffd17 	ldw	r2,-12(fp)
   126c4:	18800426 	beq	r3,r2,126d8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   126c8:	e0fff517 	ldw	r3,-44(fp)
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	1885c83a 	sub	r2,r3,r2
   126d4:	00000606 	br	126f0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   126d8:	e0bfff17 	ldw	r2,-4(fp)
   126dc:	1090000c 	andi	r2,r2,16384
   126e0:	10000226 	beq	r2,zero,126ec <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   126e4:	00bffd44 	movi	r2,-11
   126e8:	00000106 	br	126f0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   126ec:	00bffec4 	movi	r2,-5
}
   126f0:	e037883a 	mov	sp,fp
   126f4:	dfc00117 	ldw	ra,4(sp)
   126f8:	df000017 	ldw	fp,0(sp)
   126fc:	dec00204 	addi	sp,sp,8
   12700:	f800283a 	ret

00012704 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12704:	defff304 	addi	sp,sp,-52
   12708:	dfc00c15 	stw	ra,48(sp)
   1270c:	df000b15 	stw	fp,44(sp)
   12710:	df000b04 	addi	fp,sp,44
   12714:	e13ffc15 	stw	r4,-16(fp)
   12718:	e17ffd15 	stw	r5,-12(fp)
   1271c:	e1bffe15 	stw	r6,-8(fp)
   12720:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12724:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12728:	e0bffd17 	ldw	r2,-12(fp)
   1272c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12730:	00003706 	br	12810 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12734:	e0bffc17 	ldw	r2,-16(fp)
   12738:	10800c17 	ldw	r2,48(r2)
   1273c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   12740:	e0bffc17 	ldw	r2,-16(fp)
   12744:	10800d17 	ldw	r2,52(r2)
   12748:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1274c:	e0fff817 	ldw	r3,-32(fp)
   12750:	e0bff517 	ldw	r2,-44(fp)
   12754:	1880062e 	bgeu	r3,r2,12770 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12758:	e0fff517 	ldw	r3,-44(fp)
   1275c:	e0bff817 	ldw	r2,-32(fp)
   12760:	1885c83a 	sub	r2,r3,r2
   12764:	10bfffc4 	addi	r2,r2,-1
   12768:	e0bff615 	stw	r2,-40(fp)
   1276c:	00000b06 	br	1279c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12770:	e0bff517 	ldw	r2,-44(fp)
   12774:	10000526 	beq	r2,zero,1278c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12778:	00c20004 	movi	r3,2048
   1277c:	e0bff817 	ldw	r2,-32(fp)
   12780:	1885c83a 	sub	r2,r3,r2
   12784:	e0bff615 	stw	r2,-40(fp)
   12788:	00000406 	br	1279c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1278c:	00c1ffc4 	movi	r3,2047
   12790:	e0bff817 	ldw	r2,-32(fp)
   12794:	1885c83a 	sub	r2,r3,r2
   12798:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1279c:	e0bff617 	ldw	r2,-40(fp)
   127a0:	10001e26 	beq	r2,zero,1281c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   127a4:	e0fffe17 	ldw	r3,-8(fp)
   127a8:	e0bff617 	ldw	r2,-40(fp)
   127ac:	1880022e 	bgeu	r3,r2,127b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   127b0:	e0bffe17 	ldw	r2,-8(fp)
   127b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   127b8:	e0bff817 	ldw	r2,-32(fp)
   127bc:	10820e04 	addi	r2,r2,2104
   127c0:	e0fffc17 	ldw	r3,-16(fp)
   127c4:	1885883a 	add	r2,r3,r2
   127c8:	1009883a 	mov	r4,r2
   127cc:	e17ffd17 	ldw	r5,-12(fp)
   127d0:	e1bff617 	ldw	r6,-40(fp)
   127d4:	00033640 	call	3364 <memcpy>
      ptr   += n;
   127d8:	e0fffd17 	ldw	r3,-12(fp)
   127dc:	e0bff617 	ldw	r2,-40(fp)
   127e0:	1885883a 	add	r2,r3,r2
   127e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   127e8:	e0fffe17 	ldw	r3,-8(fp)
   127ec:	e0bff617 	ldw	r2,-40(fp)
   127f0:	1885c83a 	sub	r2,r3,r2
   127f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   127f8:	e0fff817 	ldw	r3,-32(fp)
   127fc:	e0bff617 	ldw	r2,-40(fp)
   12800:	1885883a 	add	r2,r3,r2
   12804:	10c1ffcc 	andi	r3,r2,2047
   12808:	e0bffc17 	ldw	r2,-16(fp)
   1280c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12810:	e0bffe17 	ldw	r2,-8(fp)
   12814:	00bfc716 	blt	zero,r2,12734 <altera_avalon_jtag_uart_write+0x30>
   12818:	00000106 	br	12820 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1281c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12820:	0005303a 	rdctl	r2,status
   12824:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12828:	e0fffa17 	ldw	r3,-24(fp)
   1282c:	00bfff84 	movi	r2,-2
   12830:	1884703a 	and	r2,r3,r2
   12834:	1001703a 	wrctl	status,r2
  
  return context;
   12838:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1283c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12840:	e0bffc17 	ldw	r2,-16(fp)
   12844:	10800817 	ldw	r2,32(r2)
   12848:	10c00094 	ori	r3,r2,2
   1284c:	e0bffc17 	ldw	r2,-16(fp)
   12850:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12854:	e0bffc17 	ldw	r2,-16(fp)
   12858:	10800017 	ldw	r2,0(r2)
   1285c:	10800104 	addi	r2,r2,4
   12860:	e0fffc17 	ldw	r3,-16(fp)
   12864:	18c00817 	ldw	r3,32(r3)
   12868:	10c00035 	stwio	r3,0(r2)
   1286c:	e0bff917 	ldw	r2,-28(fp)
   12870:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12874:	e0bffb17 	ldw	r2,-20(fp)
   12878:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1287c:	e0bffe17 	ldw	r2,-8(fp)
   12880:	0080110e 	bge	zero,r2,128c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12884:	e0bfff17 	ldw	r2,-4(fp)
   12888:	1090000c 	andi	r2,r2,16384
   1288c:	1000111e 	bne	r2,zero,128d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12890:	0001883a 	nop
   12894:	e0bffc17 	ldw	r2,-16(fp)
   12898:	10c00d17 	ldw	r3,52(r2)
   1289c:	e0bff517 	ldw	r2,-44(fp)
   128a0:	1880051e 	bne	r3,r2,128b8 <altera_avalon_jtag_uart_write+0x1b4>
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	10c00917 	ldw	r3,36(r2)
   128ac:	e0bffc17 	ldw	r2,-16(fp)
   128b0:	10800117 	ldw	r2,4(r2)
   128b4:	18bff736 	bltu	r3,r2,12894 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   128b8:	e0bffc17 	ldw	r2,-16(fp)
   128bc:	10c00d17 	ldw	r3,52(r2)
   128c0:	e0bff517 	ldw	r2,-44(fp)
   128c4:	18800526 	beq	r3,r2,128dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   128c8:	e0bffe17 	ldw	r2,-8(fp)
   128cc:	00bfd016 	blt	zero,r2,12810 <altera_avalon_jtag_uart_write+0x10c>
   128d0:	00000306 	br	128e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   128d4:	0001883a 	nop
   128d8:	00000106 	br	128e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   128dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   128e0:	e0fffd17 	ldw	r3,-12(fp)
   128e4:	e0bff717 	ldw	r2,-36(fp)
   128e8:	18800426 	beq	r3,r2,128fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   128ec:	e0fffd17 	ldw	r3,-12(fp)
   128f0:	e0bff717 	ldw	r2,-36(fp)
   128f4:	1885c83a 	sub	r2,r3,r2
   128f8:	00000606 	br	12914 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   128fc:	e0bfff17 	ldw	r2,-4(fp)
   12900:	1090000c 	andi	r2,r2,16384
   12904:	10000226 	beq	r2,zero,12910 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   12908:	00bffd44 	movi	r2,-11
   1290c:	00000106 	br	12914 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12910:	00bffec4 	movi	r2,-5
}
   12914:	e037883a 	mov	sp,fp
   12918:	dfc00117 	ldw	ra,4(sp)
   1291c:	df000017 	ldw	fp,0(sp)
   12920:	dec00204 	addi	sp,sp,8
   12924:	f800283a 	ret

00012928 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12928:	defffa04 	addi	sp,sp,-24
   1292c:	dfc00515 	stw	ra,20(sp)
   12930:	df000415 	stw	fp,16(sp)
   12934:	df000404 	addi	fp,sp,16
   12938:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1293c:	0007883a 	mov	r3,zero
   12940:	e0bfff17 	ldw	r2,-4(fp)
   12944:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12948:	e0bfff17 	ldw	r2,-4(fp)
   1294c:	10800104 	addi	r2,r2,4
   12950:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12954:	0005303a 	rdctl	r2,status
   12958:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1295c:	e0fffd17 	ldw	r3,-12(fp)
   12960:	00bfff84 	movi	r2,-2
   12964:	1884703a 	and	r2,r3,r2
   12968:	1001703a 	wrctl	status,r2
  
  return context;
   1296c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12970:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   12974:	0013b200 	call	13b20 <alt_tick>
   12978:	e0bffc17 	ldw	r2,-16(fp)
   1297c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12980:	e0bffe17 	ldw	r2,-8(fp)
   12984:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12988:	e037883a 	mov	sp,fp
   1298c:	dfc00117 	ldw	ra,4(sp)
   12990:	df000017 	ldw	fp,0(sp)
   12994:	dec00204 	addi	sp,sp,8
   12998:	f800283a 	ret

0001299c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1299c:	defff804 	addi	sp,sp,-32
   129a0:	dfc00715 	stw	ra,28(sp)
   129a4:	df000615 	stw	fp,24(sp)
   129a8:	df000604 	addi	fp,sp,24
   129ac:	e13ffc15 	stw	r4,-16(fp)
   129b0:	e17ffd15 	stw	r5,-12(fp)
   129b4:	e1bffe15 	stw	r6,-8(fp)
   129b8:	e1ffff15 	stw	r7,-4(fp)
   129bc:	e0bfff17 	ldw	r2,-4(fp)
   129c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   129c4:	00800074 	movhi	r2,1
   129c8:	109fb704 	addi	r2,r2,32476
   129cc:	10800017 	ldw	r2,0(r2)
   129d0:	1000041e 	bne	r2,zero,129e4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   129d4:	00800074 	movhi	r2,1
   129d8:	109fb704 	addi	r2,r2,32476
   129dc:	e0fffb17 	ldw	r3,-20(fp)
   129e0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   129e4:	e0bffc17 	ldw	r2,-16(fp)
   129e8:	10800104 	addi	r2,r2,4
   129ec:	00c001c4 	movi	r3,7
   129f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   129f4:	d8000015 	stw	zero,0(sp)
   129f8:	e13ffd17 	ldw	r4,-12(fp)
   129fc:	e17ffe17 	ldw	r5,-8(fp)
   12a00:	01800074 	movhi	r6,1
   12a04:	318a4a04 	addi	r6,r6,10536
   12a08:	e1fffc17 	ldw	r7,-16(fp)
   12a0c:	00136680 	call	13668 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12a10:	e037883a 	mov	sp,fp
   12a14:	dfc00117 	ldw	ra,4(sp)
   12a18:	df000017 	ldw	fp,0(sp)
   12a1c:	dec00204 	addi	sp,sp,8
   12a20:	f800283a 	ret

00012a24 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   12a24:	deffeb04 	addi	sp,sp,-84
   12a28:	df001415 	stw	fp,80(sp)
   12a2c:	dc401315 	stw	r17,76(sp)
   12a30:	dc001215 	stw	r16,72(sp)
   12a34:	df001204 	addi	fp,sp,72
   12a38:	e13ffb15 	stw	r4,-20(fp)
   12a3c:	e17ffc15 	stw	r5,-16(fp)
   12a40:	e1bffd15 	stw	r6,-12(fp)
   12a44:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   12a48:	e0bffb17 	ldw	r2,-20(fp)
   12a4c:	10800017 	ldw	r2,0(r2)
   12a50:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   12a54:	e0bfee17 	ldw	r2,-72(fp)
   12a58:	10800217 	ldw	r2,8(r2)
   12a5c:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   12a60:	e0bff717 	ldw	r2,-36(fp)
   12a64:	10bfffc4 	addi	r2,r2,-1
   12a68:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   12a6c:	e0bff817 	ldw	r2,-32(fp)
   12a70:	10800044 	addi	r2,r2,1
   12a74:	e0bff815 	stw	r2,-32(fp)
   12a78:	e0bff817 	ldw	r2,-32(fp)
   12a7c:	10800003 	ldbu	r2,0(r2)
   12a80:	10803fcc 	andi	r2,r2,255
   12a84:	1080201c 	xori	r2,r2,128
   12a88:	10bfe004 	addi	r2,r2,-128
   12a8c:	103ff71e 	bne	r2,zero,12a6c <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   12a90:	e0fff817 	ldw	r3,-32(fp)
   12a94:	e0bff717 	ldw	r2,-36(fp)
   12a98:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   12a9c:	10800044 	addi	r2,r2,1
   12aa0:	e0fffc17 	ldw	r3,-16(fp)
   12aa4:	1885883a 	add	r2,r3,r2
   12aa8:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   12aac:	d0a01c04 	addi	r2,gp,-32656
   12ab0:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   12ab4:	e0bffc17 	ldw	r2,-16(fp)
   12ab8:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   12abc:	e0bffd17 	ldw	r2,-12(fp)
   12ac0:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   12ac4:	e0bffe17 	ldw	r2,-8(fp)
   12ac8:	e0bff215 	stw	r2,-56(fp)
   12acc:	e0bffc17 	ldw	r2,-16(fp)
   12ad0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   12ad4:	e0bff917 	ldw	r2,-28(fp)
   12ad8:	10bfffc4 	addi	r2,r2,-1
   12adc:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   12ae0:	e0bffa17 	ldw	r2,-24(fp)
   12ae4:	10800044 	addi	r2,r2,1
   12ae8:	e0bffa15 	stw	r2,-24(fp)
   12aec:	e0bffa17 	ldw	r2,-24(fp)
   12af0:	10800003 	ldbu	r2,0(r2)
   12af4:	10803fcc 	andi	r2,r2,255
   12af8:	1080201c 	xori	r2,r2,128
   12afc:	10bfe004 	addi	r2,r2,-128
   12b00:	103ff71e 	bne	r2,zero,12ae0 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   12b04:	e0fffa17 	ldw	r3,-24(fp)
   12b08:	e0bff917 	ldw	r2,-28(fp)
   12b0c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   12b10:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   12b14:	e13ff017 	ldw	r4,-64(fp)
   12b18:	e13fff15 	stw	r4,-4(fp)
   12b1c:	e17ff117 	ldw	r5,-60(fp)
   12b20:	e1bff217 	ldw	r6,-56(fp)
   12b24:	e1fff317 	ldw	r7,-52(fp)
   12b28:	e0ffef17 	ldw	r3,-68(fp)
   12b2c:	1821883a 	mov	r16,r3
   12b30:	8007883a 	mov	r3,r16
   12b34:	e13fff17 	ldw	r4,-4(fp)
   12b38:	003da07a 	break	1
   12b3c:	1821883a 	mov	r16,r3
   12b40:	1023883a 	mov	r17,r2
   12b44:	e47ff415 	stw	r17,-48(fp)
   12b48:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   12b4c:	e0bff417 	ldw	r2,-48(fp)
   12b50:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   12b54:	e0bfef17 	ldw	r2,-68(fp)
   12b58:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   12b5c:	e0bff617 	ldw	r2,-40(fp)
   12b60:	1000031e 	bne	r2,zero,12b70 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   12b64:	e0bffb17 	ldw	r2,-20(fp)
   12b68:	e0fff517 	ldw	r3,-44(fp)
   12b6c:	10c00115 	stw	r3,4(r2)

  return -error;
   12b70:	e0bff617 	ldw	r2,-40(fp)
   12b74:	0085c83a 	sub	r2,zero,r2
}
   12b78:	e037883a 	mov	sp,fp
   12b7c:	df000217 	ldw	fp,8(sp)
   12b80:	dc400117 	ldw	r17,4(sp)
   12b84:	dc000017 	ldw	r16,0(sp)
   12b88:	dec00304 	addi	sp,sp,12
   12b8c:	f800283a 	ret

00012b90 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   12b90:	defffa04 	addi	sp,sp,-24
   12b94:	df000515 	stw	fp,20(sp)
   12b98:	dc000415 	stw	r16,16(sp)
   12b9c:	df000404 	addi	fp,sp,16
   12ba0:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   12ba4:	d0a01904 	addi	r2,gp,-32668
   12ba8:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   12bac:	e0bfff17 	ldw	r2,-4(fp)
   12bb0:	10800117 	ldw	r2,4(r2)
   12bb4:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   12bb8:	e0bffd17 	ldw	r2,-12(fp)
   12bbc:	e0fffc17 	ldw	r3,-16(fp)
   12bc0:	1821883a 	mov	r16,r3
   12bc4:	8007883a 	mov	r3,r16
   12bc8:	1009883a 	mov	r4,r2
   12bcc:	003da07a 	break	1
   12bd0:	1821883a 	mov	r16,r3
   12bd4:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   12bd8:	e0bffc17 	ldw	r2,-16(fp)
   12bdc:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   12be0:	e0bffe17 	ldw	r2,-8(fp)
   12be4:	0085c83a 	sub	r2,zero,r2
}
   12be8:	e037883a 	mov	sp,fp
   12bec:	df000117 	ldw	fp,4(sp)
   12bf0:	dc000017 	ldw	r16,0(sp)
   12bf4:	dec00204 	addi	sp,sp,8
   12bf8:	f800283a 	ret

00012bfc <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   12bfc:	defff204 	addi	sp,sp,-56
   12c00:	df000d15 	stw	fp,52(sp)
   12c04:	dc400c15 	stw	r17,48(sp)
   12c08:	dc000b15 	stw	r16,44(sp)
   12c0c:	df000b04 	addi	fp,sp,44
   12c10:	e13ffc15 	stw	r4,-16(fp)
   12c14:	e17ffd15 	stw	r5,-12(fp)
   12c18:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   12c1c:	d0a01604 	addi	r2,gp,-32680
   12c20:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   12c24:	e0bffc17 	ldw	r2,-16(fp)
   12c28:	10800117 	ldw	r2,4(r2)
   12c2c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   12c30:	e0bffd17 	ldw	r2,-12(fp)
   12c34:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   12c38:	e0bffe17 	ldw	r2,-8(fp)
   12c3c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   12c40:	e13ff617 	ldw	r4,-40(fp)
   12c44:	e13fff15 	stw	r4,-4(fp)
   12c48:	e17ff717 	ldw	r5,-36(fp)
   12c4c:	e1bff817 	ldw	r6,-32(fp)
   12c50:	e0fff517 	ldw	r3,-44(fp)
   12c54:	1821883a 	mov	r16,r3
   12c58:	8007883a 	mov	r3,r16
   12c5c:	e13fff17 	ldw	r4,-4(fp)
   12c60:	003da07a 	break	1
   12c64:	1821883a 	mov	r16,r3
   12c68:	1023883a 	mov	r17,r2
   12c6c:	e47ff915 	stw	r17,-28(fp)
   12c70:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   12c74:	e0bff917 	ldw	r2,-28(fp)
   12c78:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   12c7c:	e0bff517 	ldw	r2,-44(fp)
   12c80:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   12c84:	e0bffb17 	ldw	r2,-20(fp)
   12c88:	10000326 	beq	r2,zero,12c98 <alt_hostfs_read+0x9c>
   12c8c:	e0bffb17 	ldw	r2,-20(fp)
   12c90:	0085c83a 	sub	r2,zero,r2
   12c94:	00000106 	br	12c9c <alt_hostfs_read+0xa0>
   12c98:	e0bffa17 	ldw	r2,-24(fp)
}
   12c9c:	e037883a 	mov	sp,fp
   12ca0:	df000217 	ldw	fp,8(sp)
   12ca4:	dc400117 	ldw	r17,4(sp)
   12ca8:	dc000017 	ldw	r16,0(sp)
   12cac:	dec00304 	addi	sp,sp,12
   12cb0:	f800283a 	ret

00012cb4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   12cb4:	defff204 	addi	sp,sp,-56
   12cb8:	df000d15 	stw	fp,52(sp)
   12cbc:	dc400c15 	stw	r17,48(sp)
   12cc0:	dc000b15 	stw	r16,44(sp)
   12cc4:	df000b04 	addi	fp,sp,44
   12cc8:	e13ffc15 	stw	r4,-16(fp)
   12ccc:	e17ffd15 	stw	r5,-12(fp)
   12cd0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   12cd4:	d0a01304 	addi	r2,gp,-32692
   12cd8:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   12cdc:	e0bffc17 	ldw	r2,-16(fp)
   12ce0:	10800117 	ldw	r2,4(r2)
   12ce4:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   12ce8:	e0bffd17 	ldw	r2,-12(fp)
   12cec:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   12cf0:	e0bffe17 	ldw	r2,-8(fp)
   12cf4:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   12cf8:	e13ff617 	ldw	r4,-40(fp)
   12cfc:	e13fff15 	stw	r4,-4(fp)
   12d00:	e17ff717 	ldw	r5,-36(fp)
   12d04:	e1bff817 	ldw	r6,-32(fp)
   12d08:	e0fff517 	ldw	r3,-44(fp)
   12d0c:	1821883a 	mov	r16,r3
   12d10:	8007883a 	mov	r3,r16
   12d14:	e13fff17 	ldw	r4,-4(fp)
   12d18:	003da07a 	break	1
   12d1c:	1821883a 	mov	r16,r3
   12d20:	1023883a 	mov	r17,r2
   12d24:	e47ff915 	stw	r17,-28(fp)
   12d28:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   12d2c:	e0bff917 	ldw	r2,-28(fp)
   12d30:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   12d34:	e0bff517 	ldw	r2,-44(fp)
   12d38:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   12d3c:	e0bffb17 	ldw	r2,-20(fp)
   12d40:	10000326 	beq	r2,zero,12d50 <alt_hostfs_write+0x9c>
   12d44:	e0bffb17 	ldw	r2,-20(fp)
   12d48:	0085c83a 	sub	r2,zero,r2
   12d4c:	00000106 	br	12d54 <alt_hostfs_write+0xa0>
   12d50:	e0bffa17 	ldw	r2,-24(fp)
}
   12d54:	e037883a 	mov	sp,fp
   12d58:	df000217 	ldw	fp,8(sp)
   12d5c:	dc400117 	ldw	r17,4(sp)
   12d60:	dc000017 	ldw	r16,0(sp)
   12d64:	dec00304 	addi	sp,sp,12
   12d68:	f800283a 	ret

00012d6c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   12d6c:	defff204 	addi	sp,sp,-56
   12d70:	df000d15 	stw	fp,52(sp)
   12d74:	dc400c15 	stw	r17,48(sp)
   12d78:	dc000b15 	stw	r16,44(sp)
   12d7c:	df000b04 	addi	fp,sp,44
   12d80:	e13ffc15 	stw	r4,-16(fp)
   12d84:	e17ffd15 	stw	r5,-12(fp)
   12d88:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   12d8c:	d0a01004 	addi	r2,gp,-32704
   12d90:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   12d94:	e0bffc17 	ldw	r2,-16(fp)
   12d98:	10800117 	ldw	r2,4(r2)
   12d9c:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   12da0:	e0bffd17 	ldw	r2,-12(fp)
   12da4:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   12da8:	e0bffe17 	ldw	r2,-8(fp)
   12dac:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   12db0:	e13ff617 	ldw	r4,-40(fp)
   12db4:	e13fff15 	stw	r4,-4(fp)
   12db8:	e17ff717 	ldw	r5,-36(fp)
   12dbc:	e1bff817 	ldw	r6,-32(fp)
   12dc0:	e0fff517 	ldw	r3,-44(fp)
   12dc4:	1821883a 	mov	r16,r3
   12dc8:	8007883a 	mov	r3,r16
   12dcc:	e13fff17 	ldw	r4,-4(fp)
   12dd0:	003da07a 	break	1
   12dd4:	1821883a 	mov	r16,r3
   12dd8:	1023883a 	mov	r17,r2
   12ddc:	e47ff915 	stw	r17,-28(fp)
   12de0:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   12de4:	e0bff917 	ldw	r2,-28(fp)
   12de8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   12dec:	e0bff517 	ldw	r2,-44(fp)
   12df0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   12df4:	e0bffb17 	ldw	r2,-20(fp)
   12df8:	10000326 	beq	r2,zero,12e08 <alt_hostfs_seek+0x9c>
   12dfc:	e0bffb17 	ldw	r2,-20(fp)
   12e00:	0085c83a 	sub	r2,zero,r2
   12e04:	00000106 	br	12e0c <alt_hostfs_seek+0xa0>
   12e08:	e0bffa17 	ldw	r2,-24(fp)
}
   12e0c:	e037883a 	mov	sp,fp
   12e10:	df000217 	ldw	fp,8(sp)
   12e14:	dc400117 	ldw	r17,4(sp)
   12e18:	dc000017 	ldw	r16,0(sp)
   12e1c:	dec00304 	addi	sp,sp,12
   12e20:	f800283a 	ret

00012e24 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   12e24:	deffe204 	addi	sp,sp,-120
   12e28:	df001d15 	stw	fp,116(sp)
   12e2c:	dc401c15 	stw	r17,112(sp)
   12e30:	dc001b15 	stw	r16,108(sp)
   12e34:	df001b04 	addi	fp,sp,108
   12e38:	e13ffd15 	stw	r4,-12(fp)
   12e3c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   12e40:	d0a00d04 	addi	r2,gp,-32716
   12e44:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   12e48:	e0bffd17 	ldw	r2,-12(fp)
   12e4c:	10800117 	ldw	r2,4(r2)
   12e50:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   12e54:	e0bfed04 	addi	r2,fp,-76
   12e58:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   12e5c:	e13fe717 	ldw	r4,-100(fp)
   12e60:	e13fff15 	stw	r4,-4(fp)
   12e64:	e17fe817 	ldw	r5,-96(fp)
   12e68:	e0ffe617 	ldw	r3,-104(fp)
   12e6c:	1821883a 	mov	r16,r3
   12e70:	8007883a 	mov	r3,r16
   12e74:	e13fff17 	ldw	r4,-4(fp)
   12e78:	003da07a 	break	1
   12e7c:	1821883a 	mov	r16,r3
   12e80:	1023883a 	mov	r17,r2
   12e84:	e47fe915 	stw	r17,-92(fp)
   12e88:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   12e8c:	e0bfe917 	ldw	r2,-92(fp)
   12e90:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   12e94:	e0bfe617 	ldw	r2,-104(fp)
   12e98:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   12e9c:	e0bfeb17 	ldw	r2,-84(fp)
   12ea0:	1000621e 	bne	r2,zero,1302c <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   12ea4:	e0bfed04 	addi	r2,fp,-76
   12ea8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   12eac:	e0bfe517 	ldw	r2,-108(fp)
   12eb0:	10801004 	addi	r2,r2,64
   12eb4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   12eb8:	00001606 	br	12f14 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   12ebc:	e0bfe517 	ldw	r2,-108(fp)
   12ec0:	10800017 	ldw	r2,0(r2)
   12ec4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   12ec8:	e0bfe517 	ldw	r2,-108(fp)
   12ecc:	10800017 	ldw	r2,0(r2)
   12ed0:	10803fec 	andhi	r2,r2,255
   12ed4:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   12ed8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   12edc:	e0bfe517 	ldw	r2,-108(fp)
   12ee0:	10800017 	ldw	r2,0(r2)
   12ee4:	10bfc00c 	andi	r2,r2,65280
   12ee8:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   12eec:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   12ef0:	e0bfe517 	ldw	r2,-108(fp)
   12ef4:	10800017 	ldw	r2,0(r2)
   12ef8:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   12efc:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   12f00:	e0bfe517 	ldw	r2,-108(fp)
   12f04:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   12f08:	e0bfe517 	ldw	r2,-108(fp)
   12f0c:	10800104 	addi	r2,r2,4
   12f10:	e0bfe515 	stw	r2,-108(fp)
   12f14:	e0ffe517 	ldw	r3,-108(fp)
   12f18:	e0bfec17 	ldw	r2,-80(fp)
   12f1c:	18bfe736 	bltu	r3,r2,12ebc <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   12f20:	e0bffe17 	ldw	r2,-8(fp)
   12f24:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   12f28:	e0bfe517 	ldw	r2,-108(fp)
   12f2c:	10800f04 	addi	r2,r2,60
   12f30:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   12f34:	00000506 	br	12f4c <alt_hostfs_fstat+0x128>
      *ptr = 0;
   12f38:	e0bfe517 	ldw	r2,-108(fp)
   12f3c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   12f40:	e0bfe517 	ldw	r2,-108(fp)
   12f44:	10800104 	addi	r2,r2,4
   12f48:	e0bfe515 	stw	r2,-108(fp)
   12f4c:	e0ffe517 	ldw	r3,-108(fp)
   12f50:	e0bfec17 	ldw	r2,-80(fp)
   12f54:	18bff836 	bltu	r3,r2,12f38 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   12f58:	e0bfed17 	ldw	r2,-76(fp)
   12f5c:	1007883a 	mov	r3,r2
   12f60:	e0bffe17 	ldw	r2,-8(fp)
   12f64:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   12f68:	e0bfee17 	ldw	r2,-72(fp)
   12f6c:	1007883a 	mov	r3,r2
   12f70:	e0bffe17 	ldw	r2,-8(fp)
   12f74:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   12f78:	e0ffef17 	ldw	r3,-68(fp)
   12f7c:	e0bffe17 	ldw	r2,-8(fp)
   12f80:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   12f84:	e0bff017 	ldw	r2,-64(fp)
   12f88:	1007883a 	mov	r3,r2
   12f8c:	e0bffe17 	ldw	r2,-8(fp)
   12f90:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   12f94:	e0bff117 	ldw	r2,-60(fp)
   12f98:	1007883a 	mov	r3,r2
   12f9c:	e0bffe17 	ldw	r2,-8(fp)
   12fa0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   12fa4:	e0bff217 	ldw	r2,-56(fp)
   12fa8:	1007883a 	mov	r3,r2
   12fac:	e0bffe17 	ldw	r2,-8(fp)
   12fb0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   12fb4:	e0bff317 	ldw	r2,-52(fp)
   12fb8:	1007883a 	mov	r3,r2
   12fbc:	e0bffe17 	ldw	r2,-8(fp)
   12fc0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   12fc4:	e0bff517 	ldw	r2,-44(fp)
   12fc8:	1007883a 	mov	r3,r2
   12fcc:	e0bffe17 	ldw	r2,-8(fp)
   12fd0:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   12fd4:	e0bffa17 	ldw	r2,-24(fp)
   12fd8:	1007883a 	mov	r3,r2
   12fdc:	e0bffe17 	ldw	r2,-8(fp)
   12fe0:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   12fe4:	e0bffb17 	ldw	r2,-20(fp)
   12fe8:	1007883a 	mov	r3,r2
   12fec:	e0bffe17 	ldw	r2,-8(fp)
   12ff0:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   12ff4:	e0bffc17 	ldw	r2,-16(fp)
   12ff8:	1007883a 	mov	r3,r2
   12ffc:	e0bffe17 	ldw	r2,-8(fp)
   13000:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   13004:	e0bff717 	ldw	r2,-36(fp)
   13008:	1007883a 	mov	r3,r2
   1300c:	e0bffe17 	ldw	r2,-8(fp)
   13010:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   13014:	e0bff917 	ldw	r2,-28(fp)
   13018:	1007883a 	mov	r3,r2
   1301c:	e0bffe17 	ldw	r2,-8(fp)
   13020:	10c00c15 	stw	r3,48(r2)

    return rc;
   13024:	e0bfea17 	ldw	r2,-88(fp)
   13028:	00000206 	br	13034 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   1302c:	e0bfeb17 	ldw	r2,-84(fp)
   13030:	0085c83a 	sub	r2,zero,r2
}
   13034:	e037883a 	mov	sp,fp
   13038:	df000217 	ldw	fp,8(sp)
   1303c:	dc400117 	ldw	r17,4(sp)
   13040:	dc000017 	ldw	r16,0(sp)
   13044:	dec00304 	addi	sp,sp,12
   13048:	f800283a 	ret

0001304c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1304c:	defff504 	addi	sp,sp,-44
   13050:	df000a15 	stw	fp,40(sp)
   13054:	df000a04 	addi	fp,sp,40
   13058:	e13ffc15 	stw	r4,-16(fp)
   1305c:	e17ffd15 	stw	r5,-12(fp)
   13060:	e1bffe15 	stw	r6,-8(fp)
   13064:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13068:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1306c:	00800074 	movhi	r2,1
   13070:	109fb704 	addi	r2,r2,32476
   13074:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   13078:	10003f26 	beq	r2,zero,13178 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1307c:	e0bffc17 	ldw	r2,-16(fp)
   13080:	10003b26 	beq	r2,zero,13170 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   13084:	e0bffc17 	ldw	r2,-16(fp)
   13088:	e0fffe17 	ldw	r3,-8(fp)
   1308c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13090:	e0bffc17 	ldw	r2,-16(fp)
   13094:	e0ffff17 	ldw	r3,-4(fp)
   13098:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1309c:	0005303a 	rdctl	r2,status
   130a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130a4:	e0fff817 	ldw	r3,-32(fp)
   130a8:	00bfff84 	movi	r2,-2
   130ac:	1884703a 	and	r2,r3,r2
   130b0:	1001703a 	wrctl	status,r2
  
  return context;
   130b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   130b8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   130bc:	00800074 	movhi	r2,1
   130c0:	109fb804 	addi	r2,r2,32480
   130c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   130c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   130cc:	e0fffd17 	ldw	r3,-12(fp)
   130d0:	e0bff617 	ldw	r2,-40(fp)
   130d4:	1885883a 	add	r2,r3,r2
   130d8:	10c00044 	addi	r3,r2,1
   130dc:	e0bffc17 	ldw	r2,-16(fp)
   130e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   130e4:	e0bffc17 	ldw	r2,-16(fp)
   130e8:	10c00217 	ldw	r3,8(r2)
   130ec:	e0bff617 	ldw	r2,-40(fp)
   130f0:	1880042e 	bgeu	r3,r2,13104 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   130f4:	e0bffc17 	ldw	r2,-16(fp)
   130f8:	00c00044 	movi	r3,1
   130fc:	10c00405 	stb	r3,16(r2)
   13100:	00000206 	br	1310c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   13104:	e0bffc17 	ldw	r2,-16(fp)
   13108:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1310c:	e0bffc17 	ldw	r2,-16(fp)
   13110:	00c00074 	movhi	r3,1
   13114:	18d8cd04 	addi	r3,r3,25396
   13118:	e0fff915 	stw	r3,-28(fp)
   1311c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13120:	e0bffa17 	ldw	r2,-24(fp)
   13124:	e0fff917 	ldw	r3,-28(fp)
   13128:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1312c:	e0bff917 	ldw	r2,-28(fp)
   13130:	10c00017 	ldw	r3,0(r2)
   13134:	e0bffa17 	ldw	r2,-24(fp)
   13138:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1313c:	e0bff917 	ldw	r2,-28(fp)
   13140:	10800017 	ldw	r2,0(r2)
   13144:	e0fffa17 	ldw	r3,-24(fp)
   13148:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1314c:	e0bff917 	ldw	r2,-28(fp)
   13150:	e0fffa17 	ldw	r3,-24(fp)
   13154:	10c00015 	stw	r3,0(r2)
   13158:	e0bff717 	ldw	r2,-36(fp)
   1315c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13160:	e0bffb17 	ldw	r2,-20(fp)
   13164:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   13168:	0005883a 	mov	r2,zero
   1316c:	00000306 	br	1317c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   13170:	00bffa84 	movi	r2,-22
   13174:	00000106 	br	1317c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   13178:	00bfde84 	movi	r2,-134
  }
}
   1317c:	e037883a 	mov	sp,fp
   13180:	df000017 	ldw	fp,0(sp)
   13184:	dec00104 	addi	sp,sp,4
   13188:	f800283a 	ret

0001318c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1318c:	deffff04 	addi	sp,sp,-4
   13190:	df000015 	stw	fp,0(sp)
   13194:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13198:	e037883a 	mov	sp,fp
   1319c:	df000017 	ldw	fp,0(sp)
   131a0:	dec00104 	addi	sp,sp,4
   131a4:	f800283a 	ret

000131a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131a8:	defffe04 	addi	sp,sp,-8
   131ac:	dfc00115 	stw	ra,4(sp)
   131b0:	df000015 	stw	fp,0(sp)
   131b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131b8:	00800074 	movhi	r2,1
   131bc:	1098b804 	addi	r2,r2,25312
   131c0:	10800017 	ldw	r2,0(r2)
   131c4:	10000526 	beq	r2,zero,131dc <alt_get_errno+0x34>
   131c8:	00800074 	movhi	r2,1
   131cc:	1098b804 	addi	r2,r2,25312
   131d0:	10800017 	ldw	r2,0(r2)
   131d4:	103ee83a 	callr	r2
   131d8:	00000206 	br	131e4 <alt_get_errno+0x3c>
   131dc:	00800074 	movhi	r2,1
   131e0:	109fac04 	addi	r2,r2,32432
}
   131e4:	e037883a 	mov	sp,fp
   131e8:	dfc00117 	ldw	ra,4(sp)
   131ec:	df000017 	ldw	fp,0(sp)
   131f0:	dec00204 	addi	sp,sp,8
   131f4:	f800283a 	ret

000131f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   131f8:	defffa04 	addi	sp,sp,-24
   131fc:	dfc00515 	stw	ra,20(sp)
   13200:	df000415 	stw	fp,16(sp)
   13204:	df000404 	addi	fp,sp,16
   13208:	e13ffe15 	stw	r4,-8(fp)
   1320c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13210:	e0bffe17 	ldw	r2,-8(fp)
   13214:	10000326 	beq	r2,zero,13224 <alt_dev_llist_insert+0x2c>
   13218:	e0bffe17 	ldw	r2,-8(fp)
   1321c:	10800217 	ldw	r2,8(r2)
   13220:	1000051e 	bne	r2,zero,13238 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   13224:	00131a80 	call	131a8 <alt_get_errno>
   13228:	00c00584 	movi	r3,22
   1322c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13230:	00bffa84 	movi	r2,-22
   13234:	00001306 	br	13284 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13238:	e0bffe17 	ldw	r2,-8(fp)
   1323c:	e0ffff17 	ldw	r3,-4(fp)
   13240:	e0fffc15 	stw	r3,-16(fp)
   13244:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13248:	e0bffd17 	ldw	r2,-12(fp)
   1324c:	e0fffc17 	ldw	r3,-16(fp)
   13250:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13254:	e0bffc17 	ldw	r2,-16(fp)
   13258:	10c00017 	ldw	r3,0(r2)
   1325c:	e0bffd17 	ldw	r2,-12(fp)
   13260:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13264:	e0bffc17 	ldw	r2,-16(fp)
   13268:	10800017 	ldw	r2,0(r2)
   1326c:	e0fffd17 	ldw	r3,-12(fp)
   13270:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13274:	e0bffc17 	ldw	r2,-16(fp)
   13278:	e0fffd17 	ldw	r3,-12(fp)
   1327c:	10c00015 	stw	r3,0(r2)

  return 0;  
   13280:	0005883a 	mov	r2,zero
}
   13284:	e037883a 	mov	sp,fp
   13288:	dfc00117 	ldw	ra,4(sp)
   1328c:	df000017 	ldw	fp,0(sp)
   13290:	dec00204 	addi	sp,sp,8
   13294:	f800283a 	ret

00013298 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13298:	defffd04 	addi	sp,sp,-12
   1329c:	dfc00215 	stw	ra,8(sp)
   132a0:	df000115 	stw	fp,4(sp)
   132a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   132a8:	00800074 	movhi	r2,1
   132ac:	10900504 	addi	r2,r2,16404
   132b0:	e0bfff15 	stw	r2,-4(fp)
   132b4:	00000606 	br	132d0 <_do_ctors+0x38>
        (*ctor) (); 
   132b8:	e0bfff17 	ldw	r2,-4(fp)
   132bc:	10800017 	ldw	r2,0(r2)
   132c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   132c4:	e0bfff17 	ldw	r2,-4(fp)
   132c8:	10bfff04 	addi	r2,r2,-4
   132cc:	e0bfff15 	stw	r2,-4(fp)
   132d0:	e0ffff17 	ldw	r3,-4(fp)
   132d4:	00800074 	movhi	r2,1
   132d8:	10900604 	addi	r2,r2,16408
   132dc:	18bff62e 	bgeu	r3,r2,132b8 <_do_ctors+0x20>
        (*ctor) (); 
}
   132e0:	e037883a 	mov	sp,fp
   132e4:	dfc00117 	ldw	ra,4(sp)
   132e8:	df000017 	ldw	fp,0(sp)
   132ec:	dec00204 	addi	sp,sp,8
   132f0:	f800283a 	ret

000132f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   132f4:	defffd04 	addi	sp,sp,-12
   132f8:	dfc00215 	stw	ra,8(sp)
   132fc:	df000115 	stw	fp,4(sp)
   13300:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13304:	00800074 	movhi	r2,1
   13308:	10900504 	addi	r2,r2,16404
   1330c:	e0bfff15 	stw	r2,-4(fp)
   13310:	00000606 	br	1332c <_do_dtors+0x38>
        (*dtor) (); 
   13314:	e0bfff17 	ldw	r2,-4(fp)
   13318:	10800017 	ldw	r2,0(r2)
   1331c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	10bfff04 	addi	r2,r2,-4
   13328:	e0bfff15 	stw	r2,-4(fp)
   1332c:	e0ffff17 	ldw	r3,-4(fp)
   13330:	00800074 	movhi	r2,1
   13334:	10900604 	addi	r2,r2,16408
   13338:	18bff62e 	bgeu	r3,r2,13314 <_do_dtors+0x20>
        (*dtor) (); 
}
   1333c:	e037883a 	mov	sp,fp
   13340:	dfc00117 	ldw	ra,4(sp)
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00204 	addi	sp,sp,8
   1334c:	f800283a 	ret

00013350 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13350:	defffa04 	addi	sp,sp,-24
   13354:	dfc00515 	stw	ra,20(sp)
   13358:	df000415 	stw	fp,16(sp)
   1335c:	df000404 	addi	fp,sp,16
   13360:	e13ffe15 	stw	r4,-8(fp)
   13364:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13368:	e0bfff17 	ldw	r2,-4(fp)
   1336c:	10800017 	ldw	r2,0(r2)
   13370:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13374:	e13ffe17 	ldw	r4,-8(fp)
   13378:	0003be80 	call	3be8 <strlen>
   1337c:	10800044 	addi	r2,r2,1
   13380:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13384:	00000d06 	br	133bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13388:	e0bffc17 	ldw	r2,-16(fp)
   1338c:	10c00217 	ldw	r3,8(r2)
   13390:	e0bffd17 	ldw	r2,-12(fp)
   13394:	1809883a 	mov	r4,r3
   13398:	e17ffe17 	ldw	r5,-8(fp)
   1339c:	100d883a 	mov	r6,r2
   133a0:	0013c900 	call	13c90 <memcmp>
   133a4:	1000021e 	bne	r2,zero,133b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   133a8:	e0bffc17 	ldw	r2,-16(fp)
   133ac:	00000706 	br	133cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   133b0:	e0bffc17 	ldw	r2,-16(fp)
   133b4:	10800017 	ldw	r2,0(r2)
   133b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   133bc:	e0fffc17 	ldw	r3,-16(fp)
   133c0:	e0bfff17 	ldw	r2,-4(fp)
   133c4:	18bff01e 	bne	r3,r2,13388 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   133c8:	0005883a 	mov	r2,zero
}
   133cc:	e037883a 	mov	sp,fp
   133d0:	dfc00117 	ldw	ra,4(sp)
   133d4:	df000017 	ldw	fp,0(sp)
   133d8:	dec00204 	addi	sp,sp,8
   133dc:	f800283a 	ret

000133e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   133e0:	defffb04 	addi	sp,sp,-20
   133e4:	dfc00415 	stw	ra,16(sp)
   133e8:	df000315 	stw	fp,12(sp)
   133ec:	df000304 	addi	fp,sp,12
   133f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   133f4:	00800074 	movhi	r2,1
   133f8:	1098b304 	addi	r2,r2,25292
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13404:	00003106 	br	134cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   13408:	e0bffd17 	ldw	r2,-12(fp)
   1340c:	10800217 	ldw	r2,8(r2)
   13410:	1009883a 	mov	r4,r2
   13414:	0003be80 	call	3be8 <strlen>
   13418:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1341c:	e0bffd17 	ldw	r2,-12(fp)
   13420:	10c00217 	ldw	r3,8(r2)
   13424:	e0bffe17 	ldw	r2,-8(fp)
   13428:	10bfffc4 	addi	r2,r2,-1
   1342c:	1885883a 	add	r2,r3,r2
   13430:	10800003 	ldbu	r2,0(r2)
   13434:	10803fcc 	andi	r2,r2,255
   13438:	1080201c 	xori	r2,r2,128
   1343c:	10bfe004 	addi	r2,r2,-128
   13440:	10800bd8 	cmpnei	r2,r2,47
   13444:	1000031e 	bne	r2,zero,13454 <alt_find_file+0x74>
    {
      len -= 1;
   13448:	e0bffe17 	ldw	r2,-8(fp)
   1344c:	10bfffc4 	addi	r2,r2,-1
   13450:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13454:	e0bffe17 	ldw	r2,-8(fp)
   13458:	e0ffff17 	ldw	r3,-4(fp)
   1345c:	1885883a 	add	r2,r3,r2
   13460:	10800003 	ldbu	r2,0(r2)
   13464:	10803fcc 	andi	r2,r2,255
   13468:	1080201c 	xori	r2,r2,128
   1346c:	10bfe004 	addi	r2,r2,-128
   13470:	10800be0 	cmpeqi	r2,r2,47
   13474:	1000081e 	bne	r2,zero,13498 <alt_find_file+0xb8>
   13478:	e0bffe17 	ldw	r2,-8(fp)
   1347c:	e0ffff17 	ldw	r3,-4(fp)
   13480:	1885883a 	add	r2,r3,r2
   13484:	10800003 	ldbu	r2,0(r2)
   13488:	10803fcc 	andi	r2,r2,255
   1348c:	1080201c 	xori	r2,r2,128
   13490:	10bfe004 	addi	r2,r2,-128
   13494:	10000a1e 	bne	r2,zero,134c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   13498:	e0bffd17 	ldw	r2,-12(fp)
   1349c:	10c00217 	ldw	r3,8(r2)
   134a0:	e0bffe17 	ldw	r2,-8(fp)
   134a4:	1809883a 	mov	r4,r3
   134a8:	e17fff17 	ldw	r5,-4(fp)
   134ac:	100d883a 	mov	r6,r2
   134b0:	0013c900 	call	13c90 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   134b4:	1000021e 	bne	r2,zero,134c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   134b8:	e0bffd17 	ldw	r2,-12(fp)
   134bc:	00000806 	br	134e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   134c0:	e0bffd17 	ldw	r2,-12(fp)
   134c4:	10800017 	ldw	r2,0(r2)
   134c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   134cc:	e0fffd17 	ldw	r3,-12(fp)
   134d0:	00800074 	movhi	r2,1
   134d4:	1098b304 	addi	r2,r2,25292
   134d8:	18bfcb1e 	bne	r3,r2,13408 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   134dc:	0005883a 	mov	r2,zero
}
   134e0:	e037883a 	mov	sp,fp
   134e4:	dfc00117 	ldw	ra,4(sp)
   134e8:	df000017 	ldw	fp,0(sp)
   134ec:	dec00204 	addi	sp,sp,8
   134f0:	f800283a 	ret

000134f4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   134f4:	defffc04 	addi	sp,sp,-16
   134f8:	df000315 	stw	fp,12(sp)
   134fc:	df000304 	addi	fp,sp,12
   13500:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   13504:	e0bfff17 	ldw	r2,-4(fp)
   13508:	10800217 	ldw	r2,8(r2)
   1350c:	1000021e 	bne	r2,zero,13518 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   13510:	00bffb44 	movi	r2,-19
   13514:	00001406 	br	13568 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   13518:	e0bfff17 	ldw	r2,-4(fp)
   1351c:	00c00074 	movhi	r3,1
   13520:	18d8b304 	addi	r3,r3,25292
   13524:	e0fffd15 	stw	r3,-12(fp)
   13528:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1352c:	e0bffe17 	ldw	r2,-8(fp)
   13530:	e0fffd17 	ldw	r3,-12(fp)
   13534:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	10c00017 	ldw	r3,0(r2)
   13540:	e0bffe17 	ldw	r2,-8(fp)
   13544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13548:	e0bffd17 	ldw	r2,-12(fp)
   1354c:	10800017 	ldw	r2,0(r2)
   13550:	e0fffe17 	ldw	r3,-8(fp)
   13554:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13558:	e0bffd17 	ldw	r2,-12(fp)
   1355c:	e0fffe17 	ldw	r3,-8(fp)
   13560:	10c00015 	stw	r3,0(r2)

  return 0;
   13564:	0005883a 	mov	r2,zero
} 
   13568:	e037883a 	mov	sp,fp
   1356c:	df000017 	ldw	fp,0(sp)
   13570:	dec00104 	addi	sp,sp,4
   13574:	f800283a 	ret

00013578 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13578:	defffa04 	addi	sp,sp,-24
   1357c:	dfc00515 	stw	ra,20(sp)
   13580:	df000415 	stw	fp,16(sp)
   13584:	dc000315 	stw	r16,12(sp)
   13588:	df000304 	addi	fp,sp,12
   1358c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13590:	00bffa04 	movi	r2,-24
   13594:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13598:	e03ffd15 	stw	zero,-12(fp)
   1359c:	00002106 	br	13624 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   135a0:	04000074 	movhi	r16,1
   135a4:	84142b04 	addi	r16,r16,20652
   135a8:	e0bffd17 	ldw	r2,-12(fp)
   135ac:	1009883a 	mov	r4,r2
   135b0:	01400304 	movi	r5,12
   135b4:	00015040 	call	1504 <__mulsi3>
   135b8:	8085883a 	add	r2,r16,r2
   135bc:	10800017 	ldw	r2,0(r2)
   135c0:	1000151e 	bne	r2,zero,13618 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   135c4:	04000074 	movhi	r16,1
   135c8:	84142b04 	addi	r16,r16,20652
   135cc:	e0bffd17 	ldw	r2,-12(fp)
   135d0:	1009883a 	mov	r4,r2
   135d4:	01400304 	movi	r5,12
   135d8:	00015040 	call	1504 <__mulsi3>
   135dc:	8085883a 	add	r2,r16,r2
   135e0:	e0ffff17 	ldw	r3,-4(fp)
   135e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   135e8:	00800074 	movhi	r2,1
   135ec:	1098b704 	addi	r2,r2,25308
   135f0:	10c00017 	ldw	r3,0(r2)
   135f4:	e0bffd17 	ldw	r2,-12(fp)
   135f8:	1880040e 	bge	r3,r2,1360c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   135fc:	00800074 	movhi	r2,1
   13600:	1098b704 	addi	r2,r2,25308
   13604:	e0fffd17 	ldw	r3,-12(fp)
   13608:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1360c:	e0bffd17 	ldw	r2,-12(fp)
   13610:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   13614:	00000606 	br	13630 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13618:	e0bffd17 	ldw	r2,-12(fp)
   1361c:	10800044 	addi	r2,r2,1
   13620:	e0bffd15 	stw	r2,-12(fp)
   13624:	e0bffd17 	ldw	r2,-12(fp)
   13628:	10800810 	cmplti	r2,r2,32
   1362c:	103fdc1e 	bne	r2,zero,135a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13630:	e0bffe17 	ldw	r2,-8(fp)
}
   13634:	e037883a 	mov	sp,fp
   13638:	dfc00217 	ldw	ra,8(sp)
   1363c:	df000117 	ldw	fp,4(sp)
   13640:	dc000017 	ldw	r16,0(sp)
   13644:	dec00304 	addi	sp,sp,12
   13648:	f800283a 	ret

0001364c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1364c:	deffff04 	addi	sp,sp,-4
   13650:	df000015 	stw	fp,0(sp)
   13654:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13658:	e037883a 	mov	sp,fp
   1365c:	df000017 	ldw	fp,0(sp)
   13660:	dec00104 	addi	sp,sp,4
   13664:	f800283a 	ret

00013668 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13668:	defff904 	addi	sp,sp,-28
   1366c:	dfc00615 	stw	ra,24(sp)
   13670:	df000515 	stw	fp,20(sp)
   13674:	df000504 	addi	fp,sp,20
   13678:	e13ffc15 	stw	r4,-16(fp)
   1367c:	e17ffd15 	stw	r5,-12(fp)
   13680:	e1bffe15 	stw	r6,-8(fp)
   13684:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13688:	e0800217 	ldw	r2,8(fp)
   1368c:	d8800015 	stw	r2,0(sp)
   13690:	e13ffc17 	ldw	r4,-16(fp)
   13694:	e17ffd17 	ldw	r5,-12(fp)
   13698:	e1bffe17 	ldw	r6,-8(fp)
   1369c:	e1ffff17 	ldw	r7,-4(fp)
   136a0:	00138400 	call	13840 <alt_iic_isr_register>
}  
   136a4:	e037883a 	mov	sp,fp
   136a8:	dfc00117 	ldw	ra,4(sp)
   136ac:	df000017 	ldw	fp,0(sp)
   136b0:	dec00204 	addi	sp,sp,8
   136b4:	f800283a 	ret

000136b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   136b8:	defff904 	addi	sp,sp,-28
   136bc:	df000615 	stw	fp,24(sp)
   136c0:	df000604 	addi	fp,sp,24
   136c4:	e13ffe15 	stw	r4,-8(fp)
   136c8:	e17fff15 	stw	r5,-4(fp)
   136cc:	e0bfff17 	ldw	r2,-4(fp)
   136d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136d4:	0005303a 	rdctl	r2,status
   136d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136dc:	e0fffb17 	ldw	r3,-20(fp)
   136e0:	00bfff84 	movi	r2,-2
   136e4:	1884703a 	and	r2,r3,r2
   136e8:	1001703a 	wrctl	status,r2
  
  return context;
   136ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   136f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   136f4:	e0bffa17 	ldw	r2,-24(fp)
   136f8:	00c00044 	movi	r3,1
   136fc:	1884983a 	sll	r2,r3,r2
   13700:	1007883a 	mov	r3,r2
   13704:	00800074 	movhi	r2,1
   13708:	109fb604 	addi	r2,r2,32472
   1370c:	10800017 	ldw	r2,0(r2)
   13710:	1886b03a 	or	r3,r3,r2
   13714:	00800074 	movhi	r2,1
   13718:	109fb604 	addi	r2,r2,32472
   1371c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13720:	00800074 	movhi	r2,1
   13724:	109fb604 	addi	r2,r2,32472
   13728:	10800017 	ldw	r2,0(r2)
   1372c:	100170fa 	wrctl	ienable,r2
   13730:	e0bffc17 	ldw	r2,-16(fp)
   13734:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13740:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   13744:	e037883a 	mov	sp,fp
   13748:	df000017 	ldw	fp,0(sp)
   1374c:	dec00104 	addi	sp,sp,4
   13750:	f800283a 	ret

00013754 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13754:	defff904 	addi	sp,sp,-28
   13758:	df000615 	stw	fp,24(sp)
   1375c:	df000604 	addi	fp,sp,24
   13760:	e13ffe15 	stw	r4,-8(fp)
   13764:	e17fff15 	stw	r5,-4(fp)
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13770:	0005303a 	rdctl	r2,status
   13774:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13778:	e0fffb17 	ldw	r3,-20(fp)
   1377c:	00bfff84 	movi	r2,-2
   13780:	1884703a 	and	r2,r3,r2
   13784:	1001703a 	wrctl	status,r2
  
  return context;
   13788:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1378c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13790:	e0bffa17 	ldw	r2,-24(fp)
   13794:	00c00044 	movi	r3,1
   13798:	1884983a 	sll	r2,r3,r2
   1379c:	0084303a 	nor	r2,zero,r2
   137a0:	1007883a 	mov	r3,r2
   137a4:	00800074 	movhi	r2,1
   137a8:	109fb604 	addi	r2,r2,32472
   137ac:	10800017 	ldw	r2,0(r2)
   137b0:	1886703a 	and	r3,r3,r2
   137b4:	00800074 	movhi	r2,1
   137b8:	109fb604 	addi	r2,r2,32472
   137bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   137c0:	00800074 	movhi	r2,1
   137c4:	109fb604 	addi	r2,r2,32472
   137c8:	10800017 	ldw	r2,0(r2)
   137cc:	100170fa 	wrctl	ienable,r2
   137d0:	e0bffc17 	ldw	r2,-16(fp)
   137d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137d8:	e0bffd17 	ldw	r2,-12(fp)
   137dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   137e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   137e4:	e037883a 	mov	sp,fp
   137e8:	df000017 	ldw	fp,0(sp)
   137ec:	dec00104 	addi	sp,sp,4
   137f0:	f800283a 	ret

000137f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   137f4:	defffc04 	addi	sp,sp,-16
   137f8:	df000315 	stw	fp,12(sp)
   137fc:	df000304 	addi	fp,sp,12
   13800:	e13ffe15 	stw	r4,-8(fp)
   13804:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13808:	000530fa 	rdctl	r2,ienable
   1380c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13810:	e0bfff17 	ldw	r2,-4(fp)
   13814:	00c00044 	movi	r3,1
   13818:	1884983a 	sll	r2,r3,r2
   1381c:	1007883a 	mov	r3,r2
   13820:	e0bffd17 	ldw	r2,-12(fp)
   13824:	1884703a 	and	r2,r3,r2
   13828:	1004c03a 	cmpne	r2,r2,zero
   1382c:	10803fcc 	andi	r2,r2,255
}
   13830:	e037883a 	mov	sp,fp
   13834:	df000017 	ldw	fp,0(sp)
   13838:	dec00104 	addi	sp,sp,4
   1383c:	f800283a 	ret

00013840 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13840:	defff504 	addi	sp,sp,-44
   13844:	dfc00a15 	stw	ra,40(sp)
   13848:	df000915 	stw	fp,36(sp)
   1384c:	df000904 	addi	fp,sp,36
   13850:	e13ffc15 	stw	r4,-16(fp)
   13854:	e17ffd15 	stw	r5,-12(fp)
   13858:	e1bffe15 	stw	r6,-8(fp)
   1385c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13860:	00bffa84 	movi	r2,-22
   13864:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13870:	e0bff817 	ldw	r2,-32(fp)
   13874:	10800808 	cmpgei	r2,r2,32
   13878:	1000271e 	bne	r2,zero,13918 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1387c:	0005303a 	rdctl	r2,status
   13880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13884:	e0fffa17 	ldw	r3,-24(fp)
   13888:	00bfff84 	movi	r2,-2
   1388c:	1884703a 	and	r2,r3,r2
   13890:	1001703a 	wrctl	status,r2
  
  return context;
   13894:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13898:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1389c:	00c000b4 	movhi	r3,2
   138a0:	18e00304 	addi	r3,r3,-32756
   138a4:	e0bff817 	ldw	r2,-32(fp)
   138a8:	100490fa 	slli	r2,r2,3
   138ac:	1885883a 	add	r2,r3,r2
   138b0:	e0fffe17 	ldw	r3,-8(fp)
   138b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   138b8:	00c000b4 	movhi	r3,2
   138bc:	18e00304 	addi	r3,r3,-32756
   138c0:	e0bff817 	ldw	r2,-32(fp)
   138c4:	100490fa 	slli	r2,r2,3
   138c8:	1885883a 	add	r2,r3,r2
   138cc:	10800104 	addi	r2,r2,4
   138d0:	e0ffff17 	ldw	r3,-4(fp)
   138d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   138d8:	e0bffe17 	ldw	r2,-8(fp)
   138dc:	10000526 	beq	r2,zero,138f4 <alt_iic_isr_register+0xb4>
   138e0:	e0bff817 	ldw	r2,-32(fp)
   138e4:	e13ffc17 	ldw	r4,-16(fp)
   138e8:	100b883a 	mov	r5,r2
   138ec:	00136b80 	call	136b8 <alt_ic_irq_enable>
   138f0:	00000406 	br	13904 <alt_iic_isr_register+0xc4>
   138f4:	e0bff817 	ldw	r2,-32(fp)
   138f8:	e13ffc17 	ldw	r4,-16(fp)
   138fc:	100b883a 	mov	r5,r2
   13900:	00137540 	call	13754 <alt_ic_irq_disable>
   13904:	e0bff715 	stw	r2,-36(fp)
   13908:	e0bff917 	ldw	r2,-28(fp)
   1390c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13910:	e0bffb17 	ldw	r2,-20(fp)
   13914:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13918:	e0bff717 	ldw	r2,-36(fp)
}
   1391c:	e037883a 	mov	sp,fp
   13920:	dfc00117 	ldw	ra,4(sp)
   13924:	df000017 	ldw	fp,0(sp)
   13928:	dec00204 	addi	sp,sp,8
   1392c:	f800283a 	ret

00013930 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13930:	defff804 	addi	sp,sp,-32
   13934:	dfc00715 	stw	ra,28(sp)
   13938:	df000615 	stw	fp,24(sp)
   1393c:	dc000515 	stw	r16,20(sp)
   13940:	df000504 	addi	fp,sp,20
   13944:	e13ffc15 	stw	r4,-16(fp)
   13948:	e17ffd15 	stw	r5,-12(fp)
   1394c:	e1bffe15 	stw	r6,-8(fp)
   13950:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13954:	e13ffd17 	ldw	r4,-12(fp)
   13958:	e17ffe17 	ldw	r5,-8(fp)
   1395c:	e1bfff17 	ldw	r6,-4(fp)
   13960:	00113d80 	call	113d8 <open>
   13964:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   13968:	e0bffb17 	ldw	r2,-20(fp)
   1396c:	10002216 	blt	r2,zero,139f8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13970:	04000074 	movhi	r16,1
   13974:	84142b04 	addi	r16,r16,20652
   13978:	e0bffb17 	ldw	r2,-20(fp)
   1397c:	1009883a 	mov	r4,r2
   13980:	01400304 	movi	r5,12
   13984:	00015040 	call	1504 <__mulsi3>
   13988:	8085883a 	add	r2,r16,r2
   1398c:	10c00017 	ldw	r3,0(r2)
   13990:	e0bffc17 	ldw	r2,-16(fp)
   13994:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13998:	04000074 	movhi	r16,1
   1399c:	84142b04 	addi	r16,r16,20652
   139a0:	e0bffb17 	ldw	r2,-20(fp)
   139a4:	1009883a 	mov	r4,r2
   139a8:	01400304 	movi	r5,12
   139ac:	00015040 	call	1504 <__mulsi3>
   139b0:	8085883a 	add	r2,r16,r2
   139b4:	10800104 	addi	r2,r2,4
   139b8:	10c00017 	ldw	r3,0(r2)
   139bc:	e0bffc17 	ldw	r2,-16(fp)
   139c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   139c4:	04000074 	movhi	r16,1
   139c8:	84142b04 	addi	r16,r16,20652
   139cc:	e0bffb17 	ldw	r2,-20(fp)
   139d0:	1009883a 	mov	r4,r2
   139d4:	01400304 	movi	r5,12
   139d8:	00015040 	call	1504 <__mulsi3>
   139dc:	8085883a 	add	r2,r16,r2
   139e0:	10800204 	addi	r2,r2,8
   139e4:	10c00017 	ldw	r3,0(r2)
   139e8:	e0bffc17 	ldw	r2,-16(fp)
   139ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   139f0:	e13ffb17 	ldw	r4,-20(fp)
   139f4:	00116740 	call	11674 <alt_release_fd>
  }
} 
   139f8:	e037883a 	mov	sp,fp
   139fc:	dfc00217 	ldw	ra,8(sp)
   13a00:	df000117 	ldw	fp,4(sp)
   13a04:	dc000017 	ldw	r16,0(sp)
   13a08:	dec00304 	addi	sp,sp,12
   13a0c:	f800283a 	ret

00013a10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13a10:	defffb04 	addi	sp,sp,-20
   13a14:	dfc00415 	stw	ra,16(sp)
   13a18:	df000315 	stw	fp,12(sp)
   13a1c:	df000304 	addi	fp,sp,12
   13a20:	e13ffd15 	stw	r4,-12(fp)
   13a24:	e17ffe15 	stw	r5,-8(fp)
   13a28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13a2c:	01000074 	movhi	r4,1
   13a30:	21142e04 	addi	r4,r4,20664
   13a34:	e17ffd17 	ldw	r5,-12(fp)
   13a38:	01800044 	movi	r6,1
   13a3c:	01c07fc4 	movi	r7,511
   13a40:	00139300 	call	13930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13a44:	01000074 	movhi	r4,1
   13a48:	21142b04 	addi	r4,r4,20652
   13a4c:	e17ffe17 	ldw	r5,-8(fp)
   13a50:	000d883a 	mov	r6,zero
   13a54:	01c07fc4 	movi	r7,511
   13a58:	00139300 	call	13930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13a5c:	01000074 	movhi	r4,1
   13a60:	21143104 	addi	r4,r4,20676
   13a64:	e17fff17 	ldw	r5,-4(fp)
   13a68:	01800044 	movi	r6,1
   13a6c:	01c07fc4 	movi	r7,511
   13a70:	00139300 	call	13930 <alt_open_fd>
}  
   13a74:	e037883a 	mov	sp,fp
   13a78:	dfc00117 	ldw	ra,4(sp)
   13a7c:	df000017 	ldw	fp,0(sp)
   13a80:	dec00204 	addi	sp,sp,8
   13a84:	f800283a 	ret

00013a88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13a88:	defffa04 	addi	sp,sp,-24
   13a8c:	df000515 	stw	fp,20(sp)
   13a90:	df000504 	addi	fp,sp,20
   13a94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a98:	0005303a 	rdctl	r2,status
   13a9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13aa0:	e0fffc17 	ldw	r3,-16(fp)
   13aa4:	00bfff84 	movi	r2,-2
   13aa8:	1884703a 	and	r2,r3,r2
   13aac:	1001703a 	wrctl	status,r2
  
  return context;
   13ab0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13ab4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
   13ac4:	10800017 	ldw	r2,0(r2)
   13ac8:	e0fffd17 	ldw	r3,-12(fp)
   13acc:	18c00117 	ldw	r3,4(r3)
   13ad0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13ad4:	e0bffd17 	ldw	r2,-12(fp)
   13ad8:	10800117 	ldw	r2,4(r2)
   13adc:	e0fffd17 	ldw	r3,-12(fp)
   13ae0:	18c00017 	ldw	r3,0(r3)
   13ae4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13ae8:	e0bffd17 	ldw	r2,-12(fp)
   13aec:	e0fffd17 	ldw	r3,-12(fp)
   13af0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13af4:	e0bffd17 	ldw	r2,-12(fp)
   13af8:	e0fffd17 	ldw	r3,-12(fp)
   13afc:	10c00015 	stw	r3,0(r2)
   13b00:	e0bffb17 	ldw	r2,-20(fp)
   13b04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b08:	e0bffe17 	ldw	r2,-8(fp)
   13b0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13b10:	e037883a 	mov	sp,fp
   13b14:	df000017 	ldw	fp,0(sp)
   13b18:	dec00104 	addi	sp,sp,4
   13b1c:	f800283a 	ret

00013b20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13b20:	defffb04 	addi	sp,sp,-20
   13b24:	dfc00415 	stw	ra,16(sp)
   13b28:	df000315 	stw	fp,12(sp)
   13b2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13b30:	d0a02017 	ldw	r2,-32640(gp)
   13b34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13b38:	d0a70b17 	ldw	r2,-25556(gp)
   13b3c:	10800044 	addi	r2,r2,1
   13b40:	d0a70b15 	stw	r2,-25556(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13b44:	00002e06 	br	13c00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   13b48:	e0bffd17 	ldw	r2,-12(fp)
   13b4c:	10800017 	ldw	r2,0(r2)
   13b50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13b54:	e0bffd17 	ldw	r2,-12(fp)
   13b58:	10800403 	ldbu	r2,16(r2)
   13b5c:	10803fcc 	andi	r2,r2,255
   13b60:	10000426 	beq	r2,zero,13b74 <alt_tick+0x54>
   13b64:	d0a70b17 	ldw	r2,-25556(gp)
   13b68:	1000021e 	bne	r2,zero,13b74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   13b6c:	e0bffd17 	ldw	r2,-12(fp)
   13b70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13b74:	e0bffd17 	ldw	r2,-12(fp)
   13b78:	10800217 	ldw	r2,8(r2)
   13b7c:	d0e70b17 	ldw	r3,-25556(gp)
   13b80:	18801d36 	bltu	r3,r2,13bf8 <alt_tick+0xd8>
   13b84:	e0bffd17 	ldw	r2,-12(fp)
   13b88:	10800403 	ldbu	r2,16(r2)
   13b8c:	10803fcc 	andi	r2,r2,255
   13b90:	1000191e 	bne	r2,zero,13bf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   13b94:	e0bffd17 	ldw	r2,-12(fp)
   13b98:	10c00317 	ldw	r3,12(r2)
   13b9c:	e0bffd17 	ldw	r2,-12(fp)
   13ba0:	10800517 	ldw	r2,20(r2)
   13ba4:	1009883a 	mov	r4,r2
   13ba8:	183ee83a 	callr	r3
   13bac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13bb0:	e0bfff17 	ldw	r2,-4(fp)
   13bb4:	1000031e 	bne	r2,zero,13bc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   13bb8:	e13ffd17 	ldw	r4,-12(fp)
   13bbc:	0013a880 	call	13a88 <alt_alarm_stop>
   13bc0:	00000d06 	br	13bf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   13bc4:	e0bffd17 	ldw	r2,-12(fp)
   13bc8:	10c00217 	ldw	r3,8(r2)
   13bcc:	e0bfff17 	ldw	r2,-4(fp)
   13bd0:	1887883a 	add	r3,r3,r2
   13bd4:	e0bffd17 	ldw	r2,-12(fp)
   13bd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13bdc:	e0bffd17 	ldw	r2,-12(fp)
   13be0:	10c00217 	ldw	r3,8(r2)
   13be4:	d0a70b17 	ldw	r2,-25556(gp)
   13be8:	1880032e 	bgeu	r3,r2,13bf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   13bec:	e0bffd17 	ldw	r2,-12(fp)
   13bf0:	00c00044 	movi	r3,1
   13bf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   13bf8:	e0bffe17 	ldw	r2,-8(fp)
   13bfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13c00:	e0fffd17 	ldw	r3,-12(fp)
   13c04:	d0a02004 	addi	r2,gp,-32640
   13c08:	18bfcf1e 	bne	r3,r2,13b48 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   13c0c:	0001883a 	nop
}
   13c10:	e037883a 	mov	sp,fp
   13c14:	dfc00117 	ldw	ra,4(sp)
   13c18:	df000017 	ldw	fp,0(sp)
   13c1c:	dec00204 	addi	sp,sp,8
   13c20:	f800283a 	ret

00013c24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13c24:	deffff04 	addi	sp,sp,-4
   13c28:	df000015 	stw	fp,0(sp)
   13c2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13c30:	000170fa 	wrctl	ienable,zero
}
   13c34:	e037883a 	mov	sp,fp
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00104 	addi	sp,sp,4
   13c40:	f800283a 	ret

00013c44 <atexit>:
   13c44:	200b883a 	mov	r5,r4
   13c48:	000d883a 	mov	r6,zero
   13c4c:	0009883a 	mov	r4,zero
   13c50:	000f883a 	mov	r7,zero
   13c54:	0013d0c1 	jmpi	13d0c <__register_exitproc>

00013c58 <exit>:
   13c58:	defffe04 	addi	sp,sp,-8
   13c5c:	000b883a 	mov	r5,zero
   13c60:	dc000015 	stw	r16,0(sp)
   13c64:	dfc00115 	stw	ra,4(sp)
   13c68:	2021883a 	mov	r16,r4
   13c6c:	0013e3c0 	call	13e3c <__call_exitprocs>
   13c70:	00800074 	movhi	r2,1
   13c74:	1098ad04 	addi	r2,r2,25268
   13c78:	11000017 	ldw	r4,0(r2)
   13c7c:	20800f17 	ldw	r2,60(r4)
   13c80:	10000126 	beq	r2,zero,13c88 <exit+0x30>
   13c84:	103ee83a 	callr	r2
   13c88:	8009883a 	mov	r4,r16
   13c8c:	0013fdc0 	call	13fdc <_exit>

00013c90 <memcmp>:
   13c90:	01c000c4 	movi	r7,3
   13c94:	3980192e 	bgeu	r7,r6,13cfc <memcmp+0x6c>
   13c98:	2904b03a 	or	r2,r5,r4
   13c9c:	11c4703a 	and	r2,r2,r7
   13ca0:	10000f26 	beq	r2,zero,13ce0 <memcmp+0x50>
   13ca4:	20c00003 	ldbu	r3,0(r4)
   13ca8:	28800003 	ldbu	r2,0(r5)
   13cac:	1880151e 	bne	r3,r2,13d04 <memcmp+0x74>
   13cb0:	31bfff84 	addi	r6,r6,-2
   13cb4:	01ffffc4 	movi	r7,-1
   13cb8:	00000406 	br	13ccc <memcmp+0x3c>
   13cbc:	20c00003 	ldbu	r3,0(r4)
   13cc0:	28800003 	ldbu	r2,0(r5)
   13cc4:	31bfffc4 	addi	r6,r6,-1
   13cc8:	18800e1e 	bne	r3,r2,13d04 <memcmp+0x74>
   13ccc:	21000044 	addi	r4,r4,1
   13cd0:	29400044 	addi	r5,r5,1
   13cd4:	31fff91e 	bne	r6,r7,13cbc <memcmp+0x2c>
   13cd8:	0005883a 	mov	r2,zero
   13cdc:	f800283a 	ret
   13ce0:	20c00017 	ldw	r3,0(r4)
   13ce4:	28800017 	ldw	r2,0(r5)
   13ce8:	1880041e 	bne	r3,r2,13cfc <memcmp+0x6c>
   13cec:	31bfff04 	addi	r6,r6,-4
   13cf0:	21000104 	addi	r4,r4,4
   13cf4:	29400104 	addi	r5,r5,4
   13cf8:	39bff936 	bltu	r7,r6,13ce0 <memcmp+0x50>
   13cfc:	303fe91e 	bne	r6,zero,13ca4 <memcmp+0x14>
   13d00:	003ff506 	br	13cd8 <memcmp+0x48>
   13d04:	1885c83a 	sub	r2,r3,r2
   13d08:	f800283a 	ret

00013d0c <__register_exitproc>:
   13d0c:	defffa04 	addi	sp,sp,-24
   13d10:	00800074 	movhi	r2,1
   13d14:	1098ad04 	addi	r2,r2,25268
   13d18:	dc000315 	stw	r16,12(sp)
   13d1c:	14000017 	ldw	r16,0(r2)
   13d20:	dc400415 	stw	r17,16(sp)
   13d24:	dfc00515 	stw	ra,20(sp)
   13d28:	80805217 	ldw	r2,328(r16)
   13d2c:	2023883a 	mov	r17,r4
   13d30:	10003e26 	beq	r2,zero,13e2c <__register_exitproc+0x120>
   13d34:	10c00117 	ldw	r3,4(r2)
   13d38:	020007c4 	movi	r8,31
   13d3c:	40c0180e 	bge	r8,r3,13da0 <__register_exitproc+0x94>
   13d40:	00800034 	movhi	r2,0
   13d44:	108aee04 	addi	r2,r2,11192
   13d48:	1000061e 	bne	r2,zero,13d64 <__register_exitproc+0x58>
   13d4c:	00bfffc4 	movi	r2,-1
   13d50:	dfc00517 	ldw	ra,20(sp)
   13d54:	dc400417 	ldw	r17,16(sp)
   13d58:	dc000317 	ldw	r16,12(sp)
   13d5c:	dec00604 	addi	sp,sp,24
   13d60:	f800283a 	ret
   13d64:	01006404 	movi	r4,400
   13d68:	d9400015 	stw	r5,0(sp)
   13d6c:	d9800115 	stw	r6,4(sp)
   13d70:	d9c00215 	stw	r7,8(sp)
   13d74:	0002bb80 	call	2bb8 <malloc>
   13d78:	d9400017 	ldw	r5,0(sp)
   13d7c:	d9800117 	ldw	r6,4(sp)
   13d80:	d9c00217 	ldw	r7,8(sp)
   13d84:	103ff126 	beq	r2,zero,13d4c <__register_exitproc+0x40>
   13d88:	80c05217 	ldw	r3,328(r16)
   13d8c:	10000115 	stw	zero,4(r2)
   13d90:	10c00015 	stw	r3,0(r2)
   13d94:	80805215 	stw	r2,328(r16)
   13d98:	10006215 	stw	zero,392(r2)
   13d9c:	10006315 	stw	zero,396(r2)
   13da0:	10c00117 	ldw	r3,4(r2)
   13da4:	88000d1e 	bne	r17,zero,13ddc <__register_exitproc+0xd0>
   13da8:	19000084 	addi	r4,r3,2
   13dac:	2109883a 	add	r4,r4,r4
   13db0:	18c00044 	addi	r3,r3,1
   13db4:	2109883a 	add	r4,r4,r4
   13db8:	1109883a 	add	r4,r2,r4
   13dbc:	10c00115 	stw	r3,4(r2)
   13dc0:	0005883a 	mov	r2,zero
   13dc4:	21400015 	stw	r5,0(r4)
   13dc8:	dfc00517 	ldw	ra,20(sp)
   13dcc:	dc400417 	ldw	r17,16(sp)
   13dd0:	dc000317 	ldw	r16,12(sp)
   13dd4:	dec00604 	addi	sp,sp,24
   13dd8:	f800283a 	ret
   13ddc:	02400044 	movi	r9,1
   13de0:	12806217 	ldw	r10,392(r2)
   13de4:	48d2983a 	sll	r9,r9,r3
   13de8:	19000804 	addi	r4,r3,32
   13dec:	18d1883a 	add	r8,r3,r3
   13df0:	2109883a 	add	r4,r4,r4
   13df4:	4211883a 	add	r8,r8,r8
   13df8:	2109883a 	add	r4,r4,r4
   13dfc:	1109883a 	add	r4,r2,r4
   13e00:	1211883a 	add	r8,r2,r8
   13e04:	5254b03a 	or	r10,r10,r9
   13e08:	21c02215 	stw	r7,136(r4)
   13e0c:	41802215 	stw	r6,136(r8)
   13e10:	12806215 	stw	r10,392(r2)
   13e14:	01000084 	movi	r4,2
   13e18:	893fe31e 	bne	r17,r4,13da8 <__register_exitproc+0x9c>
   13e1c:	11006317 	ldw	r4,396(r2)
   13e20:	2252b03a 	or	r9,r4,r9
   13e24:	12406315 	stw	r9,396(r2)
   13e28:	003fdf06 	br	13da8 <__register_exitproc+0x9c>
   13e2c:	008000b4 	movhi	r2,2
   13e30:	10a04304 	addi	r2,r2,-32500
   13e34:	80805215 	stw	r2,328(r16)
   13e38:	003fbe06 	br	13d34 <__register_exitproc+0x28>

00013e3c <__call_exitprocs>:
   13e3c:	00800074 	movhi	r2,1
   13e40:	1098ad04 	addi	r2,r2,25268
   13e44:	10800017 	ldw	r2,0(r2)
   13e48:	defff304 	addi	sp,sp,-52
   13e4c:	df000b15 	stw	fp,44(sp)
   13e50:	d8800015 	stw	r2,0(sp)
   13e54:	10805204 	addi	r2,r2,328
   13e58:	dd400815 	stw	r21,32(sp)
   13e5c:	dfc00c15 	stw	ra,48(sp)
   13e60:	ddc00a15 	stw	r23,40(sp)
   13e64:	dd800915 	stw	r22,36(sp)
   13e68:	dd000715 	stw	r20,28(sp)
   13e6c:	dcc00615 	stw	r19,24(sp)
   13e70:	dc800515 	stw	r18,20(sp)
   13e74:	dc400415 	stw	r17,16(sp)
   13e78:	dc000315 	stw	r16,12(sp)
   13e7c:	d9000115 	stw	r4,4(sp)
   13e80:	2839883a 	mov	fp,r5
   13e84:	d8800215 	stw	r2,8(sp)
   13e88:	057fffc4 	movi	r21,-1
   13e8c:	d8800017 	ldw	r2,0(sp)
   13e90:	ddc00217 	ldw	r23,8(sp)
   13e94:	14805217 	ldw	r18,328(r2)
   13e98:	90001726 	beq	r18,zero,13ef8 <__call_exitprocs+0xbc>
   13e9c:	94400117 	ldw	r17,4(r18)
   13ea0:	8c3fffc4 	addi	r16,r17,-1
   13ea4:	80001116 	blt	r16,zero,13eec <__call_exitprocs+0xb0>
   13ea8:	8c400044 	addi	r17,r17,1
   13eac:	8427883a 	add	r19,r16,r16
   13eb0:	8c63883a 	add	r17,r17,r17
   13eb4:	95802204 	addi	r22,r18,136
   13eb8:	9ce7883a 	add	r19,r19,r19
   13ebc:	8c63883a 	add	r17,r17,r17
   13ec0:	b4e7883a 	add	r19,r22,r19
   13ec4:	9463883a 	add	r17,r18,r17
   13ec8:	e0001726 	beq	fp,zero,13f28 <__call_exitprocs+0xec>
   13ecc:	8c87c83a 	sub	r3,r17,r18
   13ed0:	b0c7883a 	add	r3,r22,r3
   13ed4:	18c01e17 	ldw	r3,120(r3)
   13ed8:	1f001326 	beq	r3,fp,13f28 <__call_exitprocs+0xec>
   13edc:	843fffc4 	addi	r16,r16,-1
   13ee0:	9cffff04 	addi	r19,r19,-4
   13ee4:	8c7fff04 	addi	r17,r17,-4
   13ee8:	857ff71e 	bne	r16,r21,13ec8 <__call_exitprocs+0x8c>
   13eec:	00800034 	movhi	r2,0
   13ef0:	108af304 	addi	r2,r2,11212
   13ef4:	10002a1e 	bne	r2,zero,13fa0 <__call_exitprocs+0x164>
   13ef8:	dfc00c17 	ldw	ra,48(sp)
   13efc:	df000b17 	ldw	fp,44(sp)
   13f00:	ddc00a17 	ldw	r23,40(sp)
   13f04:	dd800917 	ldw	r22,36(sp)
   13f08:	dd400817 	ldw	r21,32(sp)
   13f0c:	dd000717 	ldw	r20,28(sp)
   13f10:	dcc00617 	ldw	r19,24(sp)
   13f14:	dc800517 	ldw	r18,20(sp)
   13f18:	dc400417 	ldw	r17,16(sp)
   13f1c:	dc000317 	ldw	r16,12(sp)
   13f20:	dec00d04 	addi	sp,sp,52
   13f24:	f800283a 	ret
   13f28:	91000117 	ldw	r4,4(r18)
   13f2c:	88c00017 	ldw	r3,0(r17)
   13f30:	213fffc4 	addi	r4,r4,-1
   13f34:	24001526 	beq	r4,r16,13f8c <__call_exitprocs+0x150>
   13f38:	88000015 	stw	zero,0(r17)
   13f3c:	183fe726 	beq	r3,zero,13edc <__call_exitprocs+0xa0>
   13f40:	00800044 	movi	r2,1
   13f44:	1408983a 	sll	r4,r2,r16
   13f48:	91406217 	ldw	r5,392(r18)
   13f4c:	95000117 	ldw	r20,4(r18)
   13f50:	214a703a 	and	r5,r4,r5
   13f54:	28000b26 	beq	r5,zero,13f84 <__call_exitprocs+0x148>
   13f58:	91406317 	ldw	r5,396(r18)
   13f5c:	2148703a 	and	r4,r4,r5
   13f60:	20000c1e 	bne	r4,zero,13f94 <__call_exitprocs+0x158>
   13f64:	99400017 	ldw	r5,0(r19)
   13f68:	d9000117 	ldw	r4,4(sp)
   13f6c:	183ee83a 	callr	r3
   13f70:	90c00117 	ldw	r3,4(r18)
   13f74:	1d3fc51e 	bne	r3,r20,13e8c <__call_exitprocs+0x50>
   13f78:	b8c00017 	ldw	r3,0(r23)
   13f7c:	1cbfd726 	beq	r3,r18,13edc <__call_exitprocs+0xa0>
   13f80:	003fc206 	br	13e8c <__call_exitprocs+0x50>
   13f84:	183ee83a 	callr	r3
   13f88:	003ff906 	br	13f70 <__call_exitprocs+0x134>
   13f8c:	94000115 	stw	r16,4(r18)
   13f90:	003fea06 	br	13f3c <__call_exitprocs+0x100>
   13f94:	99000017 	ldw	r4,0(r19)
   13f98:	183ee83a 	callr	r3
   13f9c:	003ff406 	br	13f70 <__call_exitprocs+0x134>
   13fa0:	90c00117 	ldw	r3,4(r18)
   13fa4:	1800071e 	bne	r3,zero,13fc4 <__call_exitprocs+0x188>
   13fa8:	90c00017 	ldw	r3,0(r18)
   13fac:	18000926 	beq	r3,zero,13fd4 <__call_exitprocs+0x198>
   13fb0:	9009883a 	mov	r4,r18
   13fb4:	b8c00015 	stw	r3,0(r23)
   13fb8:	0002bcc0 	call	2bcc <free>
   13fbc:	bc800017 	ldw	r18,0(r23)
   13fc0:	003fb506 	br	13e98 <__call_exitprocs+0x5c>
   13fc4:	90c00017 	ldw	r3,0(r18)
   13fc8:	902f883a 	mov	r23,r18
   13fcc:	1825883a 	mov	r18,r3
   13fd0:	003fb106 	br	13e98 <__call_exitprocs+0x5c>
   13fd4:	0007883a 	mov	r3,zero
   13fd8:	003ffb06 	br	13fc8 <__call_exitprocs+0x18c>

00013fdc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13fdc:	defffc04 	addi	sp,sp,-16
   13fe0:	df000315 	stw	fp,12(sp)
   13fe4:	df000304 	addi	fp,sp,12
   13fe8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13fec:	0001883a 	nop
   13ff0:	e0bfff17 	ldw	r2,-4(fp)
   13ff4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	10000226 	beq	r2,zero,14010 <_exit+0x34>
    ALT_SIM_FAIL();
   14008:	002af070 	cmpltui	zero,zero,43969
   1400c:	00000106 	br	14014 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   14010:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14014:	003fff06 	br	14014 <_exit+0x38>
